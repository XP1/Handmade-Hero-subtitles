1
00:00:02,100 --> 00:00:04,900
Hello everyone, and welcome to handmade hero.

2
00:00:04,900 --> 00:00:07,800
The show we could a complete game live on stream in the pre stream,

3
00:00:07,800 --> 00:00:08,200
QA.

4
00:00:08,200 --> 00:00:12,500
Somebody asked the question just now about whether or not a function

5
00:00:12,500 --> 00:00:17,900
call was slower than I'm sorry, whether or not calling a function via

6
00:00:17,900 --> 00:00:20,300
a pointer with slower than just a regular function call.

7
00:00:20,300 --> 00:00:24,200
And I was trying to explain what the difference was between these two

8
00:00:24,200 --> 00:00:24,600
things.

9
00:00:24,600 --> 00:00:26,700
And then I was like, you know what, it's time to start the stream

10
00:00:26,700 --> 00:00:32,100
anyway so why don't I just show you the difference between those two?

11
00:00:32,100 --> 00:00:35,500
You things and then you don't have to speculate on it, right?

12
00:00:37,400 --> 00:00:41,600
You can, you can have a little bit more intuition, the sort of Pat

13
00:00:41,600 --> 00:00:44,300
answer is that, it shouldn't, it shouldn't be appreciably slower.

14
00:00:44,300 --> 00:00:48,200
Depending on the circumstances, it depends really on what you're

15
00:00:48,200 --> 00:00:48,400
doing.

16
00:00:48,400 --> 00:00:51,600
It can be or it cannot be depending on the circumstances.

17
00:00:51,600 --> 00:00:55,600
But I'll sort of try to give you a little bit of a background on that.

18
00:00:55,600 --> 00:01:00,400
It's not really my area of expertise I haven't studied it recently, so

19
00:01:00,400 --> 00:01:03,400
there is that but all right so let me open up.

20
00:01:03,500 --> 00:01:06,900
I think do we use this one of these things buildable

21
00:01:07,600 --> 00:01:10,600
One of our whole test Solutions we use for searching.

22
00:01:11,800 --> 00:01:12,600
Let's see.

23
00:01:14,500 --> 00:01:15,700
Let's see.

24
00:01:18,100 --> 00:01:20,900
So this is just the project we use for searching stuff, okay?

25
00:01:20,900 --> 00:01:25,600
So let's say that we wanted to take a look at what was going on here.

26
00:01:25,600 --> 00:01:31,400
So I'm just going to make one of our favorite things here and info and

27
00:01:31,400 --> 00:01:35,200
in fact I guess you know I'll make it avoid no rest at the moment and

28
00:01:35,200 --> 00:01:38,800
we'll just say that it passes an integer in here and here is our Foo

29
00:01:38,800 --> 00:01:44,000
and then I'll call it down here with with Foo five, right?

30
00:01:44,200 --> 00:01:48,100
And so if we want to I should be able to just go to the

31
00:01:48,100 --> 00:01:51,700
Disassembly here, and give you sort of a quick look at what's

32
00:01:51,700 --> 00:01:52,300
happening.

33
00:01:52,700 --> 00:01:55,300
So what you can see Happening Here, Right is.

34
00:01:55,300 --> 00:01:57,000
Here's the code for Foo up here.

35
00:01:57,000 --> 00:02:00,200
Here's the actual Assembly, Language instructions for Foo.

36
00:02:00,200 --> 00:02:03,500
And what you'll notice, of course, is we're compiling a debug mode, so

37
00:02:03,500 --> 00:02:04,800
there's no optimizations going on.

38
00:02:04,800 --> 00:02:07,500
So it's literally doing the stupidest possible thing right?

39
00:02:08,600 --> 00:02:10,699
But Foo doesn't do anything, right?

40
00:02:10,699 --> 00:02:12,200
There's nothing going on in Foo.

41
00:02:12,600 --> 00:02:15,300
So what you're seeing here is you're just seeing like the code for

42
00:02:15,300 --> 00:02:17,900
like, you know, getting the stack frame set up and that kind of stuff.

43
00:02:18,000 --> 00:02:19,300
And then returning, right?

44
00:02:19,300 --> 00:02:24,300
So it's not doing anything other than just, the basic, really simple

45
00:02:24,300 --> 00:02:28,000
stuff that has to happen as boilerplate for functions in debug mode

46
00:02:28,000 --> 00:02:30,300
and in optimization mode, you know, a lot of that stuff, might go

47
00:02:30,300 --> 00:02:33,600
away, but we care about, of course, is the call site.

48
00:02:33,600 --> 00:02:36,000
And you can see here at the call site, that it's very, very simple.

49
00:02:36,000 --> 00:02:38,900
If I want to call this function, you will note.

50
00:02:38,900 --> 00:02:44,800
What happens is, I do a push of 5 that 5 is the 5 that I'm trying to

51
00:02:44,800 --> 00:02:45,200
pass.

52
00:02:45,200 --> 00:02:48,000
So that puts that on the stack and then

53
00:02:48,100 --> 00:02:51,200
then we have here, the actual call to Foo.

54
00:02:51,200 --> 00:02:56,000
And what you will notice about this call to Foo is that it knows.

55
00:02:56,000 --> 00:02:59,900
As you can see in the disassembly itself, just from

56
00:03:00,000 --> 00:03:06,800
This this this sort of encoding here, you'll notice that it knows the

57
00:03:06,800 --> 00:03:12,800
address that it's jumping to and to be honest, my my B decoding skills

58
00:03:12,800 --> 00:03:14,400
are not particularly great.

59
00:03:14,600 --> 00:03:19,400
I am not an Assembly Language programmer, so you know, I don't know,

60
00:03:19,400 --> 00:03:23,800
the x64 instruction set really well or anything like that.

61
00:03:24,900 --> 00:03:28,300
But what I assume is happening here is that this is using an encoding

62
00:03:28,300 --> 00:03:29,800
for call that

63
00:03:30,000 --> 00:03:33,100
Does some kind of instruction pointer relative, addressing any way,

64
00:03:33,100 --> 00:03:37,300
but point being, what I can tell you is it didn't have to go load the

65
00:03:37,300 --> 00:03:38,700
value to jump to, right?

66
00:03:38,700 --> 00:03:42,800
You can see that just the instruction for the call in these bites as

67
00:03:42,800 --> 00:03:44,900
encoded where it needs to get to.

68
00:03:44,900 --> 00:03:47,900
And I just don't know, I think it probably is encoded as a relative

69
00:03:47,900 --> 00:03:50,400
offset from the call site or something like this, right?

70
00:03:50,700 --> 00:03:53,600
And if you went and looked up the x64 instruction and coding, it would

71
00:03:53,600 --> 00:03:56,500
explain to you how to decrypt what this means.

72
00:03:56,900 --> 00:03:59,800
Such that you know, how did they get oh f

73
00:04:00,000 --> 00:04:02,400
E12 for eh or whatever, right?

74
00:04:03,100 --> 00:04:06,700
Because you can see that it's not really, it's not directly in the B.

75
00:04:06,700 --> 00:04:08,500
And again, like I said, I've got probably two encoded.

76
00:04:08,700 --> 00:04:10,300
What we could do is take a look.

77
00:04:11,800 --> 00:04:13,300
You know, this is the hexadecimal value.

78
00:04:13,300 --> 00:04:15,000
That's that's where we're jumping to.

79
00:04:15,300 --> 00:04:19,000
What I could do is say well, what is that relative to the instruction

80
00:04:19,000 --> 00:04:19,300
here?

81
00:04:19,300 --> 00:04:19,800
Oh thanks.

82
00:04:19,800 --> 00:04:20,399
That's good.

83
00:04:20,399 --> 00:04:22,000
Thanks, visual studio for deleting that.

84
00:04:22,000 --> 00:04:23,900
I certainly didn't want that number that I put there.

85
00:04:26,800 --> 00:04:38,100
So if I do 0 x 0, x, and I take a look at the hex here, so let's see

86
00:04:38,100 --> 00:04:39,100
if ff8.

87
00:04:41,600 --> 00:04:46,000
You can kind of see, that could very well be f.

88
00:04:46,000 --> 00:04:50,000
F f f f 8.

89
00:04:50,300 --> 00:04:52,600
And I would have expected for for but maybe this is encoded.

90
00:04:52,800 --> 00:04:56,400
So I would suspect just looking at the Delta between the jump Target

91
00:04:56,600 --> 00:04:59,800
And the address, I would suspect that what we're looking at here is

92
00:04:59,800 --> 00:05:01,000
some kind of relative encoding.

93
00:05:01,000 --> 00:05:01,700
That's my guess.

94
00:05:02,100 --> 00:05:02,700
Doesn't matter.

95
00:05:02,700 --> 00:05:03,700
Not relevant to the discussion.

96
00:05:03,700 --> 00:05:06,700
Really, but point being you can see how this works.

97
00:05:06,900 --> 00:05:10,600
So this is the entirety of what the processor actually had to do.

98
00:05:11,100 --> 00:05:14,600
Now where this information is coming from, is a place called The

99
00:05:14,600 --> 00:05:16,000
i-cash, okay?

100
00:05:16,700 --> 00:05:20,000
What the I cash is is and, and again, take this with a grain of salt,

101
00:05:20,000 --> 00:05:23,600
this is not my area of expertise, so processors, get rid of all the

102
00:05:23,600 --> 00:05:26,100
time and what I say is, like a cursory

103
00:05:26,500 --> 00:05:27,500
Nation of what's happening.

104
00:05:27,700 --> 00:05:30,200
The actual nitty-gritty of a modern processor is incredibly

105
00:05:30,200 --> 00:05:30,700
complicated.

106
00:05:30,700 --> 00:05:34,500
So there's layers and layers and layers underneath what I'm saying

107
00:05:34,500 --> 00:05:39,600
that are, you know if you really want to know and really get it good.

108
00:05:39,900 --> 00:05:44,400
You're going to have to know more than I do about how and a modern x64

109
00:05:44,400 --> 00:05:47,300
is Chip works as a lot of my sort of way.

110
00:05:47,300 --> 00:05:49,800
I think about process is a bit dated at this point.

111
00:05:51,300 --> 00:05:55,900
But anyway, much like we talked about how the we have a cache for data

112
00:05:55,900 --> 00:05:58,100
where every time you access something, it's got to be pulled into the

113
00:05:58,100 --> 00:05:59,800
cash and so you want things to stay low.

114
00:06:00,000 --> 00:06:01,100
Cash in bubble block.

115
00:06:01,800 --> 00:06:04,900
The processor has a number of things that are going on like that for

116
00:06:04,900 --> 00:06:06,100
the instruction stream as well.

117
00:06:06,100 --> 00:06:09,600
So is the thing called an eye cash and the I cash is something that

118
00:06:09,600 --> 00:06:12,600
that caches the instruction streams, right?

119
00:06:12,900 --> 00:06:16,000
And so much like data, you know, this, this information here, that's

120
00:06:16,000 --> 00:06:17,400
what the process is executing.

121
00:06:17,600 --> 00:06:21,700
Well, that's essentially data to write it stuff that has to get loaded

122
00:06:21,700 --> 00:06:22,200
out of memory.

123
00:06:22,200 --> 00:06:23,800
Our program is a thing sitting in memory.

124
00:06:23,800 --> 00:06:26,900
So just like data occupies space in the cache.

125
00:06:27,000 --> 00:06:29,800
Well, there's a cash for that for that code because that

126
00:06:30,000 --> 00:06:30,900
has to be read in as well.

127
00:06:30,900 --> 00:06:33,800
And, furthermore, there's often times something called a trace cache

128
00:06:33,800 --> 00:06:35,700
as well, which is to say that.

129
00:06:35,700 --> 00:06:39,500
One of the things that's true about modern microprocessors, is that

130
00:06:39,500 --> 00:06:44,700
the instruction stream that we give it these bites here that you see

131
00:06:44,800 --> 00:06:47,700
these, these bites that include the push, five, the call.

132
00:06:48,100 --> 00:06:50,900
That's not actually what the processor executes.

133
00:06:51,100 --> 00:06:54,800
The processor actually takes those instructions and usually kind of

134
00:06:55,700 --> 00:06:59,900
breaks them up into smaller logical units called micro operations.

135
00:07:00,400 --> 00:07:03,100
And those micro operations are what it actually executes.

136
00:07:03,400 --> 00:07:07,700
So sometimes the processor also has a thing where in addition to

137
00:07:08,200 --> 00:07:15,100
caching actual instruction streams as we write them, it may also have

138
00:07:15,100 --> 00:07:20,000
a micro app cache which caches the decoding of those instructions into

139
00:07:20,000 --> 00:07:24,300
the Micro Ops that they actually that it actually executes and, you

140
00:07:24,300 --> 00:07:26,200
know, a processor, you can imagine processor.

141
00:07:26,200 --> 00:07:28,600
Architecture can do all sorts of things there, it might only have a

142
00:07:28,600 --> 00:07:29,800
micro app cache, it

143
00:07:29,900 --> 00:07:33,100
I only have an eye cash, it might have both you know, who knows.

144
00:07:33,100 --> 00:07:36,700
And like I said, I'm not an expert on the x64 architecture so I have

145
00:07:36,700 --> 00:07:37,300
no idea.

146
00:07:37,300 --> 00:07:41,100
I don't pretend to know that stuff, I don't keep up with it, but point

147
00:07:41,100 --> 00:07:42,800
being something like that is going to go on there.

148
00:07:42,800 --> 00:07:44,000
So you've got this kind of cash.

149
00:07:44,500 --> 00:07:48,700
So what needs to happen is when the processor sees this information,

150
00:07:48,700 --> 00:07:50,800
for the first time is going to get pulled into a cash.

151
00:07:50,800 --> 00:07:53,600
It's going to get decoded into Micro Ops possibly cash there.

152
00:07:54,000 --> 00:07:57,400
Those Micro Ops have to be executed and the result of the micro app

153
00:07:57,400 --> 00:07:58,600
execution is what's going to happen.

154
00:07:58,600 --> 00:07:59,800
Now, what you can see here,

155
00:08:00,300 --> 00:08:05,200
Is this entire sequence is entirely fitting in the I cash, right?

156
00:08:05,600 --> 00:08:08,900
There's no, I don't mean fitting like it fits size wise.

157
00:08:08,900 --> 00:08:10,900
I mean, it all comes from there.

158
00:08:11,000 --> 00:08:14,000
It doesn't need to go to the data cache to get any information.

159
00:08:14,100 --> 00:08:15,800
There's no data coming here.

160
00:08:16,000 --> 00:08:19,400
The push 5 is encoded entirely there, because the constant value, so

161
00:08:19,400 --> 00:08:24,000
that's entirely inside that the instruction stream in the i-cash, the

162
00:08:24,000 --> 00:08:27,000
call with the location entirely encoded there.

163
00:08:27,500 --> 00:08:29,800
And so, what that means is, all it has to do.

164
00:08:29,900 --> 00:08:32,900
Do is just look at the instructions in order and execute them in

165
00:08:32,900 --> 00:08:33,299
order.

166
00:08:33,700 --> 00:08:39,400
Another crucial thing about this is it means that the processor modern

167
00:08:39,400 --> 00:08:42,900
processors for the most part, most of the ones that you'll encounter

168
00:08:42,900 --> 00:08:46,900
certainly, x64 outside of larabee and stuff like that, where you're

169
00:08:46,900 --> 00:08:50,800
talking about the main desktop chip, they are out-of-order processors.

170
00:08:51,000 --> 00:08:54,500
What that means is that it will be looking ahead in the instruction

171
00:08:54,500 --> 00:08:56,200
stream and doing all sorts of things.

172
00:08:56,400 --> 00:08:59,600
So it doesn't just sit there and go do the push first.

173
00:08:59,600 --> 00:08:59,800
Then,

174
00:09:00,000 --> 00:09:03,800
The call then do the ad, then do the mob, then do the push.

175
00:09:03,800 --> 00:09:05,200
It doesn't do that, right?

176
00:09:05,300 --> 00:09:08,100
What it does is it looks at a window instructions, and if it thinks,

177
00:09:08,100 --> 00:09:09,800
it could execute an instruction, it will.

178
00:09:10,000 --> 00:09:13,400
And furthermore, when it tries to execute instruction, it's not only

179
00:09:13,400 --> 00:09:15,700
going to execute instructions that it knows.

180
00:09:15,700 --> 00:09:16,700
It can execute.

181
00:09:16,700 --> 00:09:20,800
It may also try to execute instructions that it only thinks it might

182
00:09:20,800 --> 00:09:22,100
be able to execute.

183
00:09:22,500 --> 00:09:25,800
For example, let's say that you have an if statement, right?

184
00:09:25,800 --> 00:09:28,600
You have an if statement and inside the, if statement are some things

185
00:09:28,600 --> 00:09:29,800
that will only happen if the

186
00:09:30,000 --> 00:09:33,500
If statement is true, well, the processor May employ a branch

187
00:09:33,500 --> 00:09:37,500
predictor which is a thing that tries to guess, which way you're going

188
00:09:37,500 --> 00:09:40,300
to go on that if statement, do you think it's going to go through, or

189
00:09:40,300 --> 00:09:41,800
do you think it's gonna go false, right?

190
00:09:42,500 --> 00:09:45,800
It may employ one of those and then it may start looking at, whichever

191
00:09:45,800 --> 00:09:48,600
branch of thinks is more likely and speculatively executing those

192
00:09:48,600 --> 00:09:49,600
instructions, right?

193
00:09:50,000 --> 00:09:53,400
So there's there's even this whole other state of things where if the

194
00:09:53,400 --> 00:09:58,500
processor can can concretely predict which instructions you will be

195
00:09:58,500 --> 00:09:59,900
executing, it can get

196
00:10:00,000 --> 00:10:03,400
More performance than if it doesn't know what instructions is going to

197
00:10:03,400 --> 00:10:07,000
be executing and that can be true across a call.

198
00:10:07,100 --> 00:10:10,700
You can easily imagine processor architectures where, when you hit a

199
00:10:10,700 --> 00:10:16,000
call site like this, if it knows what it's calling into it, can go

200
00:10:16,000 --> 00:10:19,900
start to get those instructions before we ever get to the call.

201
00:10:20,100 --> 00:10:22,700
And if you take a look at this instruction stream here, you'll notice

202
00:10:22,700 --> 00:10:24,000
there are no jumps in it.

203
00:10:24,100 --> 00:10:28,500
Push mob sub push, push push leap of mauve rep Bob, affects our mob

204
00:10:28,600 --> 00:10:29,800
push call and the

205
00:10:29,900 --> 00:10:33,000
call has a known address in it, right?

206
00:10:34,200 --> 00:10:36,100
So it's critical to understand about that.

207
00:10:36,300 --> 00:10:37,600
Is that a processor?

208
00:10:37,600 --> 00:10:41,300
If it was so inclined way back here, when it started executing this,

209
00:10:41,300 --> 00:10:43,100
push the out of order.

210
00:10:43,100 --> 00:10:46,600
Window could have easily read this call and gone.

211
00:10:46,600 --> 00:10:50,000
Oh, I should start fetching instructions from this location because I

212
00:10:50,000 --> 00:10:53,600
know when I get down to here, I'm going to need them, okay?

213
00:10:54,500 --> 00:10:59,300
It did not have to know the result of any of these instructions in

214
00:10:59,300 --> 00:11:03,800
order to start fetching that and be right there was no chance that

215
00:11:04,000 --> 00:11:04,800
Could have been wrong.

216
00:11:04,900 --> 00:11:06,900
Unless there was an exception or something, right?

217
00:11:06,900 --> 00:11:11,600
Like a, you know, divide by zero or right to a illegal memory

218
00:11:11,600 --> 00:11:12,300
location.

219
00:11:12,500 --> 00:11:14,900
That was the only thing that was going to stop it because all the rest

220
00:11:14,900 --> 00:11:19,100
of these things were deterministic and don't require an aren't

221
00:11:19,100 --> 00:11:19,800
required to know.

222
00:11:19,800 --> 00:11:20,700
We're gonna jump.

223
00:11:21,100 --> 00:11:21,600
Okay?

224
00:11:22,100 --> 00:11:24,300
So that's what happens when you normally call a function?

225
00:11:24,500 --> 00:11:27,400
But now, let's take a look at what happens if I call a function and I

226
00:11:27,400 --> 00:11:29,900
needed to get that function pointer from somewhere, okay?

227
00:11:30,200 --> 00:11:33,000
So let's suppose, I introduce a global variable here.

228
00:11:35,100 --> 00:11:35,800
Like so.

229
00:11:44,300 --> 00:11:44,500
Okay.

230
00:11:44,500 --> 00:11:49,200
So here is the function pointer concept, right?

231
00:11:49,200 --> 00:11:50,500
Or I should say function signature

232
00:11:51,900 --> 00:11:53,100
Here's the function signature.

233
00:11:53,500 --> 00:11:56,900
And what I want to do is say, all right, I'm going to get a pointer to

234
00:11:56,900 --> 00:11:57,900
one of these things.

235
00:12:00,000 --> 00:12:01,800
Three-pointer right.

236
00:12:04,100 --> 00:12:06,400
And I'm going to point that at the foo function.

237
00:12:07,200 --> 00:12:09,700
So then in here in, you know, here's my call to Foo.

238
00:12:09,800 --> 00:12:12,600
I'm going to also do a call to food pointer and I'm going to pass Five

239
00:12:12,600 --> 00:12:13,300
to that as well.

240
00:12:13,500 --> 00:12:16,400
Okay, so now I'm going to run down to there.

241
00:12:18,000 --> 00:12:22,900
And go back to the disassembly and it wants you to take a look at what

242
00:12:22,900 --> 00:12:25,700
these two things are, are both doing.

243
00:12:26,600 --> 00:12:27,000
All right?

244
00:12:30,100 --> 00:12:31,100
So yeah, okay.

245
00:12:33,500 --> 00:12:36,600
I suppose this is probably a little bit different because of the

246
00:12:36,600 --> 00:12:37,200
static variable.

247
00:12:37,200 --> 00:12:38,800
This is going to be a little harder to read.

248
00:12:39,600 --> 00:12:43,600
I let me do one that's going to be a little easier for you because

249
00:12:43,600 --> 00:12:45,600
that's like everybody's segment to pull up static.

250
00:12:47,300 --> 00:12:48,700
It'll be easier if we do it this way.

251
00:12:54,900 --> 00:13:01,900
so, let's pretend instead that I have another function here and I

252
00:13:01,900 --> 00:13:02,800
pass,

253
00:13:05,300 --> 00:13:06,900
One in, right.

254
00:13:16,100 --> 00:13:16,800
Of course, I guess.

255
00:13:20,600 --> 00:13:24,600
Oops, I still need my Foo in order to have a function to pass.

256
00:13:25,100 --> 00:13:26,100
So here's my bar.

257
00:13:33,800 --> 00:13:34,200
Okay.

258
00:13:35,800 --> 00:13:38,800
So now what I'm going to do is I'm going to call that bar function and

259
00:13:38,800 --> 00:13:41,000
I'm going to call that with my Foo function.

260
00:13:45,400 --> 00:13:47,200
I just think this will make it a little easier to see.

261
00:13:48,500 --> 00:13:51,200
Okay, so remember, this is what it looked like to call the function

262
00:13:51,200 --> 00:13:55,100
normally and now I'm going to go into bar and see what it looks like

263
00:13:55,100 --> 00:13:56,200
to call the other one.

264
00:13:56,900 --> 00:13:57,500
All right.

265
00:13:59,700 --> 00:14:01,800
Okay, because this is a little easier to see.

266
00:14:04,300 --> 00:14:05,500
So here we go.

267
00:14:06,200 --> 00:14:10,300
This is obviously just again the boilerplate and then here we push the

268
00:14:10,300 --> 00:14:12,300
five on the stock like we're going to before.

269
00:14:13,300 --> 00:14:18,600
But now, what you'll notice is, we actually have this situation where

270
00:14:18,600 --> 00:14:24,700
the foo that the site that we're going to call, right is actually Foo

271
00:14:25,300 --> 00:14:27,300
the local variable, right?

272
00:14:27,300 --> 00:14:31,900
And that local variable is sitting at this location, right?

273
00:14:32,600 --> 00:14:33,100
And do I

274
00:14:33,300 --> 00:14:35,400
Of see here.

275
00:14:35,400 --> 00:14:36,600
Yeah, yeah.

276
00:14:37,800 --> 00:14:42,500
And so what has to happen first is it has to load, whatever is at that

277
00:14:42,500 --> 00:14:45,600
address before it can actually jump, right?

278
00:14:46,100 --> 00:14:49,200
So you'll notice it doesn't know like before, right?

279
00:14:49,200 --> 00:14:52,200
When you looked at it, it had just encoded right in it.

280
00:14:52,200 --> 00:14:56,500
Here's the hard coded address, there's no more information here when

281
00:14:56,500 --> 00:14:59,800
we get to the call, I have to look at what's at that location.

282
00:15:00,000 --> 00:15:02,800
And then I could jump, right?

283
00:15:03,900 --> 00:15:08,500
So, what the processor ends up having to do, is it has to know what

284
00:15:08,500 --> 00:15:11,500
this value was ahead of time, right?

285
00:15:11,800 --> 00:15:14,300
And maybe it does or maybe it doesn't.

286
00:15:14,300 --> 00:15:17,400
And that's the crucial part about this situation.

287
00:15:17,700 --> 00:15:18,300
So,

288
00:15:19,600 --> 00:15:22,600
At least this is the part that I think is crucial.

289
00:15:22,600 --> 00:15:24,600
If I was more of an expert on x64.

290
00:15:24,600 --> 00:15:25,300
I could tell you.

291
00:15:26,600 --> 00:15:29,900
So what you can imagine Happening Here is

292
00:15:31,300 --> 00:15:33,800
Do you want to know if it's going to be less efficient or more?

293
00:15:33,800 --> 00:15:36,400
If you know if it's gonna be less efficient than calling the

294
00:15:36,400 --> 00:15:41,000
hard-coded function, the answer is usually going to be how hard is it

295
00:15:41,000 --> 00:15:46,500
for the processor to guess what this value is going to be in time to

296
00:15:46,500 --> 00:15:49,700
get here right in time when it actually gets here?

297
00:15:50,200 --> 00:15:55,400
So in this case, the answer is probably it's going to be just fine

298
00:15:55,500 --> 00:15:59,500
because this information comes in it doesn't get modified anywhere,

299
00:15:59,500 --> 00:16:00,800
there's no chance, it could be

300
00:16:01,000 --> 00:16:01,400
Long.

301
00:16:01,500 --> 00:16:05,700
And so it's going to go ahead and just know that it could go start

302
00:16:05,700 --> 00:16:07,100
fetching instructions to that address.

303
00:16:07,100 --> 00:16:07,800
There's nothing.

304
00:16:08,000 --> 00:16:11,600
It doesn't seem like there be anything crazy going on there, right?

305
00:16:11,900 --> 00:16:15,500
But let's say you were talking about a different circumstance.

306
00:16:15,700 --> 00:16:19,600
Like for example you were just talking about Ray tracers, right?

307
00:16:21,000 --> 00:16:26,800
In re tracers, if I was just doing some intersection work here, I may

308
00:16:26,800 --> 00:16:30,400
not know and there might be a bunch of ifs and branches.

309
00:16:30,400 --> 00:16:35,000
That are determining what the actual resulting pointer is to the final

310
00:16:35,000 --> 00:16:36,000
object that I hit.

311
00:16:36,400 --> 00:16:41,900
And if immediately after that intersection determination, I then try

312
00:16:41,900 --> 00:16:46,000
to immediately call whatever that function pointer was, well, that

313
00:16:46,000 --> 00:16:48,400
could create some problems for the processor.

314
00:16:48,600 --> 00:16:50,600
It could create some kind of stalls there, I don't know.

315
00:16:50,800 --> 00:16:54,200
Like I said, you have to contest it, but it could be that it's just

316
00:16:54,200 --> 00:16:57,900
not enough time for the processor to have gone and loaded the code

317
00:16:57,900 --> 00:17:00,900
needed to call, or to have the out of order window.

318
00:17:00,900 --> 00:17:04,099
Fetch enough out of it to start pulling instructions, right?

319
00:17:04,900 --> 00:17:07,700
And so that can be a problem, right?

320
00:17:07,700 --> 00:17:09,800
That can be an issue.

321
00:17:10,700 --> 00:17:15,000
So like everything else when you're asking questions about is it more

322
00:17:15,000 --> 00:17:15,300
efficient?

323
00:17:15,300 --> 00:17:16,500
Is it less efficient?

324
00:17:16,500 --> 00:17:19,200
The answer these days is almost always.

325
00:17:19,200 --> 00:17:20,099
It depends.

326
00:17:20,400 --> 00:17:20,599
And in this

327
00:17:20,700 --> 00:17:22,300
This case, I think it's definitely an.

328
00:17:22,300 --> 00:17:23,099
It depends.

329
00:17:23,200 --> 00:17:26,400
Sometimes calling through a function pointer will be no more expensive

330
00:17:26,400 --> 00:17:27,099
in practice.

331
00:17:27,300 --> 00:17:29,700
Then not calling through a function pointer right then just a regular

332
00:17:29,700 --> 00:17:30,400
function call.

333
00:17:30,600 --> 00:17:34,200
There are certainly plenty of times when you would never see the

334
00:17:34,200 --> 00:17:36,100
difference on a profile between those two things.

335
00:17:36,100 --> 00:17:37,800
They will be equivalent, right?

336
00:17:38,100 --> 00:17:42,500
But I think it's certainly plausible depending on your situation that

337
00:17:42,500 --> 00:17:47,000
you could construct cases in several reasonable scenarios like where

338
00:17:47,000 --> 00:17:48,500
you weren't doing anything crazy.

339
00:17:48,500 --> 00:17:50,500
You were just trying to use them in a reasonable way.

340
00:17:50,800 --> 00:17:54,900
You could I think create cases where you would see problems with that,

341
00:17:54,900 --> 00:17:57,800
and it might not be the best way to go, right?

342
00:18:00,300 --> 00:18:02,000
Hopefully, that makes some sense.

343
00:18:04,900 --> 00:18:05,300
Okay.

344
00:18:06,300 --> 00:18:09,900
Also, if you wanted to see, I think I can switch this thing over to

345
00:18:09,900 --> 00:18:11,200
release build.

346
00:18:15,300 --> 00:18:16,300
Oh you know what?

347
00:18:17,100 --> 00:18:18,100
So this is interesting.

348
00:18:18,300 --> 00:18:25,500
I just noticed I was wondering I'm like why is it pushing five right?

349
00:18:25,500 --> 00:18:26,800
You remember with push five?

350
00:18:26,800 --> 00:18:29,100
I was like I thought about time I like it doesn't want to talk - I'm

351
00:18:29,100 --> 00:18:31,000
not gonna be around like why is it pushing 5?

352
00:18:31,100 --> 00:18:35,300
Because on x64 typically the first parameter if it fits in a

353
00:18:35,300 --> 00:18:39,700
registered goes in a register and what I realized is the reason is

354
00:18:39,700 --> 00:18:43,300
because it's not compiling x64, it's compiling win32.

355
00:18:43,700 --> 00:18:45,000
So it's compiling 30.

356
00:18:45,100 --> 00:18:45,800
A bit code.

357
00:18:46,500 --> 00:18:48,000
Let's, let's change that.

358
00:18:48,000 --> 00:18:48,600
Shall we?

359
00:18:49,300 --> 00:18:52,400
First, let's go back to debug build, and let's make a new one of

360
00:18:52,400 --> 00:18:52,900
these.

361
00:18:53,100 --> 00:18:56,400
And let's do an x 64 build instead.

362
00:18:59,000 --> 00:18:59,900
Because that was bugging me.

363
00:18:59,900 --> 00:19:01,400
I'm like, why is it pushing 5?

364
00:19:01,500 --> 00:19:05,000
It should have just moved 52 eax or something, right?

365
00:19:05,900 --> 00:19:06,500
E CX.

366
00:19:06,500 --> 00:19:07,200
There you go.

367
00:19:07,300 --> 00:19:09,200
So that's what I would have expected, right?

368
00:19:09,200 --> 00:19:09,500
Yeah.

369
00:19:09,500 --> 00:19:10,400
X is for return or something.

370
00:19:10,400 --> 00:19:12,800
Yeah, so ECX I guess is where the first parameter goes.

371
00:19:13,900 --> 00:19:15,300
So yeah, that's what I would have expected.

372
00:19:15,300 --> 00:19:17,700
And that's that makes a lot more sense.

373
00:19:19,800 --> 00:19:24,800
Okay, so then if I go ahead and switch this to release build, you can

374
00:19:24,800 --> 00:19:28,400
see what it would do differently because it's going to be a lot

375
00:19:28,400 --> 00:19:29,300
differently at the call side.

376
00:19:29,300 --> 00:19:32,900
Anyway, well, okay, so it looks like it completely optimized these out

377
00:19:32,900 --> 00:19:34,900
because they don't do anything, right?

378
00:19:37,200 --> 00:19:38,600
So I'd have to do something like

379
00:19:56,400 --> 00:19:57,400
Some of that.

380
00:19:58,400 --> 00:19:58,800
There we go.

381
00:20:00,000 --> 00:20:00,400
All right.

382
00:20:00,400 --> 00:20:03,000
So now that I've forced these to compile in, let's go to the

383
00:20:03,000 --> 00:20:04,200
disassembly here.

384
00:20:05,700 --> 00:20:09,500
Yeah and hopefully, can I look at a new this?

385
00:20:10,500 --> 00:20:12,000
So yeah.

386
00:20:12,100 --> 00:20:18,200
I mean the optimizer I get a, I would have to create a more hard to

387
00:20:18,200 --> 00:20:19,400
discern case for it.

388
00:20:19,400 --> 00:20:23,300
There, you can see that the optimizer was did a great job, right?

389
00:20:23,700 --> 00:20:28,000
It looked at the evaluation of bar looked at the fact that it's

390
00:20:28,200 --> 00:20:32,600
Is calling Foo five, took that and in lined it into just, you know,

391
00:20:32,600 --> 00:20:35,700
straight up calling the printf, right?

392
00:20:36,900 --> 00:20:39,400
So, yeah, you can see it.

393
00:20:39,400 --> 00:20:40,800
Call the printf right here.

394
00:20:42,200 --> 00:20:47,300
So yeah, like that's that's style.

395
00:20:47,500 --> 00:20:48,000
Anyway.

396
00:20:51,700 --> 00:20:52,700
Enough about that.

397
00:20:52,900 --> 00:20:57,500
Hopefully, that gave you a little bit of a, an idea of the difference

398
00:20:57,500 --> 00:20:59,700
between calling through a

399
00:21:00,000 --> 00:21:02,500
Should pointer and calling just regular.

400
00:21:04,900 --> 00:21:09,200
I would point out that C++, in particular does a really, really stupid

401
00:21:09,200 --> 00:21:14,400
thing which is that C++ because it was designed so long ago.

402
00:21:15,400 --> 00:21:17,300
It does this really, really dumb?

403
00:21:17,300 --> 00:21:18,500
In fact I can I can show you.

404
00:21:18,500 --> 00:21:20,200
It's like the worst thing ever.

405
00:21:22,100 --> 00:21:26,800
C++ is just real real dumb and it probably made sense at the time

406
00:21:26,800 --> 00:21:30,800
because the thing that they were most concerned about was space, but

407
00:21:30,800 --> 00:21:32,700
it's real bad.

408
00:21:32,700 --> 00:21:36,300
In modern times the way that they handle virtual functions.

409
00:21:36,800 --> 00:21:40,800
So what happens in C++ is if you make a class I guess we don't need a

410
00:21:40,800 --> 00:21:42,300
class we can just call it a struct.

411
00:21:42,300 --> 00:21:45,000
I don't want to Sully the name of struct which is a good thing though

412
00:21:45,000 --> 00:21:45,900
with a virtual function.

413
00:21:45,900 --> 00:21:51,600
So we'll call it a struct class like, you know, and you make a class

414
00:21:51,600 --> 00:21:51,700
or

415
00:21:51,900 --> 00:21:52,700
Thing, right?

416
00:21:54,900 --> 00:21:58,700
And so I'm going to add a virtual function here so I say like okay

417
00:21:58,700 --> 00:22:03,000
there's a virtual function and the virtual function is actually the

418
00:22:03,000 --> 00:22:03,500
food.

419
00:22:03,500 --> 00:22:10,000
So now there's a virtual Foo and it takes one of those, you know and I

420
00:22:10,000 --> 00:22:11,100
mean I don't know what it does.

421
00:22:11,100 --> 00:22:17,100
It does some kind of a virtual thing that's like, you know, the printf

422
00:22:17,100 --> 00:22:17,700
or whatever.

423
00:22:20,400 --> 00:22:21,200
Right?

424
00:22:21,900 --> 00:22:26,900
And so when you have one of these guys and you want to do that, and in

425
00:22:26,900 --> 00:22:28,000
fact I could do this.

426
00:22:36,400 --> 00:22:40,300
so there's a virtual function with Foo and you know, if I want to

427
00:22:40,300 --> 00:22:45,900
write then I can do one of these things that for some reason, he

428
00:22:45,900 --> 00:22:50,000
thought was a good idea and, you know, there is our inheritance and

429
00:22:50,000 --> 00:22:53,800
now I can go ahead and say, like okay, yeah, maybe like get it prints

430
00:22:53,800 --> 00:22:56,100
out a different thing in this case,

431
00:23:03,300 --> 00:23:04,600
Write something like that.

432
00:23:05,400 --> 00:23:08,900
So if someone gave me a screw strip, it would print out a strip.

433
00:23:08,900 --> 00:23:11,400
If someone gave me AB yarn over, put out of yarn but in both cases it

434
00:23:11,400 --> 00:23:13,400
prints out the % d.

435
00:23:13,400 --> 00:23:15,700
Right, that's it.

436
00:23:16,500 --> 00:23:20,700
So if I have one of these, you can sort of see like I go.

437
00:23:20,700 --> 00:23:26,000
All right, here's a, here's a strip and

438
00:23:29,800 --> 00:23:33,000
if I call Foo on that,

439
00:23:35,000 --> 00:23:37,000
I'm going to turn off the optimizer temporarily.

440
00:23:37,000 --> 00:23:41,100
I could show you how these things are implemented and they're real

441
00:23:41,100 --> 00:23:43,900
bad, they're much worse than what they're much much worse than the

442
00:23:43,900 --> 00:23:47,400
case that we just sort of went over, if that makes sense.

443
00:23:47,400 --> 00:23:47,800
Oops.

444
00:23:52,300 --> 00:23:53,900
Got those lovely Publix.

445
00:23:58,900 --> 00:23:59,500
so,

446
00:24:00,000 --> 00:24:03,500
Here we are creating our strew strip and then we're going to try and

447
00:24:03,500 --> 00:24:05,000
call one of these guys, right?

448
00:24:05,000 --> 00:24:10,200
And so, let's take a look at what has to happen when we try to do our

449
00:24:10,200 --> 00:24:11,000
call.

450
00:24:11,300 --> 00:24:11,700
Okay?

451
00:24:12,900 --> 00:24:17,000
So what you'll see happening here which is kind of crazy, although, in

452
00:24:17,000 --> 00:24:18,700
this case I think it just determined.

453
00:24:18,700 --> 00:24:22,900
It knew what the call was, did it actually know that or not?

454
00:24:23,300 --> 00:24:24,400
It looks like it actually knew that.

455
00:24:24,400 --> 00:24:26,400
So I'm a, I'm a

456
00:24:28,000 --> 00:24:31,900
I may have to operate it one more so it doesn't so that the compiler

457
00:24:31,900 --> 00:24:33,800
doesn't know exactly which one it's calling.

458
00:24:34,500 --> 00:24:35,700
Let me go ahead and do that.

459
00:24:43,900 --> 00:24:46,300
so, let's say that we take of yarn in here,

460
00:24:50,900 --> 00:24:53,800
And off of the Barna, I want to call the food.

461
00:24:54,600 --> 00:24:58,300
So this function doesn't know which one it's going to get, right?

462
00:24:58,700 --> 00:25:06,100
And so I have a whatever, and then I'm going to call my my function.

463
00:25:07,300 --> 00:25:07,900
Up in here.

464
00:25:13,500 --> 00:25:20,400
Okay, so now you can see the Epic disaster that C++ playing out for

465
00:25:20,400 --> 00:25:23,500
you in Assembly Language.

466
00:25:24,100 --> 00:25:29,100
So here is what appears to be as simple and operation as the one we

467
00:25:29,100 --> 00:25:30,100
had previously, right?

468
00:25:30,100 --> 00:25:33,300
It's just calling a function through a pointer sort of, right?

469
00:25:33,300 --> 00:25:37,900
It's the same idea what's in directed, but the problem is, what ends

470
00:25:37,900 --> 00:25:43,200
up happening is the way in which these are encoded is

471
00:25:43,400 --> 00:25:45,600
Ee in directed, right?

472
00:25:45,800 --> 00:25:49,800
So basically, there is a virtual function table which has the pointers

473
00:25:49,800 --> 00:25:51,100
that it needs to call.

474
00:25:51,100 --> 00:25:56,300
So it first needs to load whatever that virtual function table is and

475
00:25:56,300 --> 00:26:00,800
then it needs to load whatever the function is out of the table,

476
00:26:01,400 --> 00:26:02,000
right?

477
00:26:02,800 --> 00:26:09,900
So you can see it's got a call off of a pointer that it had to load,

478
00:26:10,000 --> 00:26:12,500
right twice.

479
00:26:12,800 --> 00:26:13,200
Right.

480
00:26:13,300 --> 00:26:17,600
Here at did the load and here it does the call off the load, right?

481
00:26:19,000 --> 00:26:21,200
And so that's just a huge.

482
00:26:22,200 --> 00:26:24,000
It's just this huge W directed thing.

483
00:26:24,000 --> 00:26:26,300
That the processor has to struggle with all the time because it never

484
00:26:26,300 --> 00:26:28,400
knows where it's calling off, too.

485
00:26:28,700 --> 00:26:32,300
And that double load means that you're always having to pull these

486
00:26:32,300 --> 00:26:35,200
unrelated things out of the cache.

487
00:26:35,200 --> 00:26:37,200
Those virtual function tables, right?

488
00:26:37,300 --> 00:26:41,600
Always have to be like pulled into look, be looked up into even though

489
00:26:41,600 --> 00:26:43,200
they have nothing to do with the memory that

490
00:26:43,300 --> 00:26:44,600
You were already accessing.

491
00:26:44,600 --> 00:26:45,300
Right?

492
00:26:45,300 --> 00:26:49,700
So a lot of times it's just real real bad to hit these double in

493
00:26:49,700 --> 00:26:53,300
directions because if a processor happens to be set up to hit them

494
00:26:53,300 --> 00:26:56,400
really well, which a lot of times like Intel chips actually will

495
00:26:56,400 --> 00:26:59,500
because hey they're used to dealing with crappy, C++ code or whatever.

496
00:27:00,000 --> 00:27:04,600
But you know heaven forbid you do you hit one of these on a processor?

497
00:27:04,600 --> 00:27:06,500
That's not so set up for that.

498
00:27:06,800 --> 00:27:10,500
Like for example the you know Xbox 360 or something like this,

499
00:27:10,800 --> 00:27:14,700
something that didn't want to have to do these kinds of things that

500
00:27:14,700 --> 00:27:17,400
didn't have a lot of ways of masking, those double in directions by

501
00:27:17,400 --> 00:27:21,000
doing other stuff or whatever and it's real bad, right?

502
00:27:22,200 --> 00:27:25,100
So that's what happens every time you do a virtual function call and

503
00:27:25,100 --> 00:27:27,200
C++ it's it's worse.

504
00:27:27,500 --> 00:27:28,600
It's worse than both.

505
00:27:28,600 --> 00:27:32,600
The other cases we looked at and it's just not the way that you

506
00:27:32,600 --> 00:27:34,500
usually want your program to work.

507
00:27:34,500 --> 00:27:38,100
You're paying a huge cost there for oftentimes.

508
00:27:38,100 --> 00:27:38,500
No.

509
00:27:38,600 --> 00:27:41,300
You know, you could have implemented it a different way than a virtual

510
00:27:41,300 --> 00:27:45,500
function and you would not have had to have that speed hit, right?

511
00:27:46,500 --> 00:27:49,100
So yeah, not not great.

512
00:27:49,300 --> 00:27:51,500
I never use Virtual functions for this reason.

513
00:27:51,500 --> 00:27:51,700
I

514
00:27:51,900 --> 00:27:55,800
Must always want to be able to have control to do something different,

515
00:27:55,800 --> 00:28:00,500
if I need to, because the problem with going down, this route is,

516
00:28:00,500 --> 00:28:02,800
there's nothing you can do to fix it, right?

517
00:28:02,900 --> 00:28:05,000
There's no way you can tell the compiler.

518
00:28:05,000 --> 00:28:08,000
Oh, hey, I really want you to implement this a different way, because

519
00:28:08,000 --> 00:28:09,600
it's too slow with a double direction.

520
00:28:09,600 --> 00:28:11,700
For this piece of code, there's nothing you can do.

521
00:28:11,800 --> 00:28:16,600
Whereas if you implement it yourself, you can change the way that

522
00:28:16,600 --> 00:28:18,000
those dispatchers are happening.

523
00:28:18,200 --> 00:28:21,500
If you're, if you end up in a situation where it's important, right?

524
00:28:21,800 --> 00:28:24,600
So you know, that's why I never use them.

525
00:28:24,600 --> 00:28:27,700
But if your are the kind of person who wants to use Virtual functions,

526
00:28:28,000 --> 00:28:31,600
you want to be real careful that you never use Virtual functions in

527
00:28:31,600 --> 00:28:34,700
places that you think you might have to optimize heavily because

528
00:28:34,700 --> 00:28:37,700
there's nothing you can do about it, it's just going to be slow,

529
00:28:37,800 --> 00:28:38,300
right?

530
00:28:39,800 --> 00:28:41,000
So, you know,

531
00:28:43,700 --> 00:28:44,800
A word of caution.

532
00:28:46,900 --> 00:28:47,200
All right.

533
00:28:47,200 --> 00:28:50,800
We have blown through a tremendous amount of time answering this

534
00:28:51,800 --> 00:28:56,500
question but hopefully we entered it.

535
00:28:56,600 --> 00:28:59,800
We answered it sufficiently, if that makes sense.

536
00:29:01,900 --> 00:29:05,300
And yeah, there you go.

537
00:29:05,300 --> 00:29:10,800
I don't know if that answered the question, but hopefully it did and

538
00:29:10,800 --> 00:29:11,500
now we can move on.

539
00:29:11,800 --> 00:29:15,300
Okay, so I don't know if I'll have time to do anything.

540
00:29:15,300 --> 00:29:16,500
We ate up a lot of time, but I'll

541
00:29:17,400 --> 00:29:21,100
I just wanted all I wanted to do today was just take a look at

542
00:29:21,100 --> 00:29:26,800
animating, the the, those sort of little, little jumpy pads.

543
00:29:26,800 --> 00:29:27,800
A little jumpy poo.

544
00:29:29,700 --> 00:29:33,400
So what we did though, that's not the right project.

545
00:29:35,300 --> 00:29:40,800
What we did yesterday is I made these little jump pads here, right?

546
00:29:41,100 --> 00:29:45,300
So I could jump onto the pad and then it would spring me down to the,

547
00:29:45,300 --> 00:29:47,600
to a square below, right?

548
00:29:47,800 --> 00:29:51,800
But right now all we did is just have those pads setup but we don't

549
00:29:51,800 --> 00:29:52,900
actually do anything with them.

550
00:29:53,400 --> 00:29:56,500
The first thing I'd like to do is see if I can just get teleportation

551
00:29:56,500 --> 00:29:57,000
working.

552
00:29:57,200 --> 00:29:59,800
So that basically like any time you jump on one of those pads

553
00:30:00,000 --> 00:30:05,400
We'll move whatever jumped there to some other location that specified

554
00:30:05,400 --> 00:30:06,800
by the pad, right?

555
00:30:07,200 --> 00:30:08,500
I just want to do that too.

556
00:30:08,700 --> 00:30:11,400
To see if we can make that work relatively well.

557
00:30:12,000 --> 00:30:17,700
So, in order to do that, what I, what I believe happens here is just

558
00:30:17,700 --> 00:30:20,800
that inside handmade entity, right?

559
00:30:20,900 --> 00:30:23,000
There's there is simulation code.

560
00:30:25,300 --> 00:30:26,300
For various entities.

561
00:30:26,600 --> 00:30:28,900
And so what I want to do is say well, okay.

562
00:30:29,400 --> 00:30:33,900
So you know as we go through these entities, if we look and see that

563
00:30:33,900 --> 00:30:37,100
somebody is sitting on any that does have this particular piece of

564
00:30:37,100 --> 00:30:41,100
behavior, then we might want to do something about it, right?

565
00:30:41,700 --> 00:30:49,100
So for example, what we could do is if we go to here we go, stim

566
00:30:49,100 --> 00:30:49,700
region.

567
00:30:51,200 --> 00:30:54,800
If we take a look at the occupying, the people who

568
00:30:54,900 --> 00:30:56,000
Doing occupation.

569
00:30:56,300 --> 00:30:59,700
What we can do is say, well alright there's two ways we could do this,

570
00:30:59,700 --> 00:31:01,700
we could do it, forward-looking your backward-looking, I don't know

571
00:31:01,700 --> 00:31:02,700
which one I want to do.

572
00:31:03,100 --> 00:31:06,300
So I'm just going to pick one random kind of a haven't thought

573
00:31:06,400 --> 00:31:08,500
particularly much about what should happen.

574
00:31:08,500 --> 00:31:12,400
But what I'm going to do here is, I don't know that any flag active

575
00:31:12,400 --> 00:31:13,300
should really be.

576
00:31:13,900 --> 00:31:16,200
I don't know if that should be a bait here or not, it's a good

577
00:31:16,200 --> 00:31:16,700
question.

578
00:31:27,400 --> 00:31:32,000
I don't really know exactly what's going on here per se, but what I

579
00:31:32,000 --> 00:31:34,800
want to do is say, all right, if this entity

580
00:31:37,800 --> 00:31:43,700
Is one that has Loops the magical boost, right?

581
00:31:44,300 --> 00:31:51,800
So if I've got Auto boost to and the auto boost to is valid, right?

582
00:31:51,800 --> 00:31:52,800
So if I say,

583
00:31:59,200 --> 00:32:01,600
and I think we decided that ought that

584
00:32:06,000 --> 00:32:07,900
The right way to check for these things.

585
00:32:07,900 --> 00:32:10,200
I always wanted to say is valid but I think

586
00:32:12,700 --> 00:32:15,900
What we decided is to just call get reversible, right?

587
00:32:16,800 --> 00:32:18,600
So basically if we say, you know,

588
00:32:21,700 --> 00:32:25,900
if this thing has an auto boost to then what I want to do is say if

589
00:32:25,900 --> 00:32:28,200
the someone was standing on me, then boost him.

590
00:32:29,300 --> 00:32:29,600
Right?

591
00:32:29,600 --> 00:32:30,400
Whoever it was.

592
00:32:31,800 --> 00:32:36,000
So when we say, get reversible for the auto boost to, I then want to

593
00:32:36,000 --> 00:32:39,900
see like for anybody who's standing on one of my traversable is

594
00:32:39,900 --> 00:32:41,500
whatever they are, right?

595
00:32:52,900 --> 00:32:56,400
If there's an occupier on that reversible, I want to like move.

596
00:32:56,500 --> 00:32:59,300
Whoever it was I want them to go, right?

597
00:33:00,000 --> 00:33:04,200
And if I remember correctly, the way that this stuff works is, we have

598
00:33:04,300 --> 00:33:10,100
already like a routine that handles that sort of like trade-off that

599
00:33:10,100 --> 00:33:11,200
that sort of movement.

600
00:33:11,800 --> 00:33:13,600
And I think it's in here.

601
00:33:13,900 --> 00:33:17,800
I don't again, it's been a while since we've done this stuff and I

602
00:33:18,400 --> 00:33:21,900
have it, paged out in my brain right now but I remember we have a

603
00:33:21,900 --> 00:33:22,600
transaction.

604
00:33:22,600 --> 00:33:24,500
Yeah, here it is, right?

605
00:33:25,000 --> 00:33:29,400
So if there is an occupier, I feel like I could do something here.

606
00:33:29,400 --> 00:33:29,700
Where we

607
00:33:30,000 --> 00:33:35,700
Said you know try to do a transactional occupy of whoever this this

608
00:33:35,700 --> 00:33:36,500
person is.

609
00:33:36,800 --> 00:33:43,200
So I think it's just like, Oh Yeah, from where were this dude was

610
00:33:45,500 --> 00:33:47,800
To wherever our thing.

611
00:33:47,900 --> 00:33:50,800
Our boost to is

612
00:34:00,500 --> 00:34:04,300
I'm just saying if anyone standing on anything in ours, will try to do

613
00:34:04,300 --> 00:34:08,300
a transactional occupy and if we can, we'll move them to the Boost

614
00:34:08,300 --> 00:34:08,600
too.

615
00:34:11,699 --> 00:34:12,300
Right.

616
00:34:17,300 --> 00:34:17,900
Cannot convert.

617
00:34:17,900 --> 00:34:22,000
Argument 32 traversable reference.

618
00:34:24,000 --> 00:34:24,400
Oh,

619
00:34:27,100 --> 00:34:29,699
So I guess I didn't need I was assuming I'd need to save that but I

620
00:34:29,699 --> 00:34:30,400
guess I don't.

621
00:34:31,400 --> 00:34:37,199
So, you know, something like that kind of just like randomly

622
00:34:37,199 --> 00:34:38,000
suggesting that.

623
00:34:38,000 --> 00:34:39,699
Yeah, so there you go.

624
00:34:39,699 --> 00:34:44,900
So you can kind of see that it hopped my body down there, right now.

625
00:34:44,900 --> 00:34:47,500
The problem with that obviously, is that right now?

626
00:34:47,500 --> 00:34:51,500
We have no code that mu the to move the head, to where the body has to

627
00:34:51,500 --> 00:34:55,699
go, which will have to do, but that's really all I wanted to see

628
00:34:55,699 --> 00:34:56,600
happen, right?

629
00:34:56,600 --> 00:35:00,300
I just wanted to see anyone who hit that one, get teleported down

630
00:35:00,300 --> 00:35:01,300
there, which they do, which

631
00:35:01,500 --> 00:35:01,900
Great.

632
00:35:02,300 --> 00:35:03,800
Those guys did too which is funny.

633
00:35:05,000 --> 00:35:06,600
But anyway that's that's all there is to it.

634
00:35:06,600 --> 00:35:08,600
I wonder if the snake would do that too.

635
00:35:10,000 --> 00:35:12,000
Kind of curious what happens.

636
00:35:12,000 --> 00:35:13,600
If the snake goes up there, go up there mr.

637
00:35:13,600 --> 00:35:14,000
Snake.

638
00:35:16,000 --> 00:35:16,500
Come on.

639
00:35:16,500 --> 00:35:17,400
Oh come on.

640
00:35:18,100 --> 00:35:19,900
You went right by it dude.

641
00:35:20,400 --> 00:35:22,100
All right, get over there.

642
00:35:22,100 --> 00:35:23,200
I'm going to block your path.

643
00:35:23,200 --> 00:35:25,100
Go down there, go, there we go.

644
00:35:25,500 --> 00:35:26,300
Ha ha ha.

645
00:35:27,900 --> 00:35:31,200
So for people who are asking whether the snake would work, it clearly

646
00:35:31,200 --> 00:35:31,700
does.

647
00:35:31,800 --> 00:35:32,500
So that's great.

648
00:35:32,500 --> 00:35:36,900
So that just got rid of our snake there it went okay so that's all

649
00:35:36,900 --> 00:35:39,600
fine and good and really what we need to do

650
00:35:41,600 --> 00:35:44,900
At this point is just make something that will force the body to move,

651
00:35:45,400 --> 00:35:45,700
though.

652
00:35:45,700 --> 00:35:48,500
The head to move down with the body which right now we don't do.

653
00:35:48,500 --> 00:35:50,400
And so like I said, that's a bit of a problem.

654
00:35:51,400 --> 00:35:54,600
It's a problem in a number of ways, not just this one and the reason

655
00:35:54,600 --> 00:35:57,000
for that is if we go over here right?

656
00:35:57,100 --> 00:35:59,800
When we you know, we should not be able to do that.

657
00:36:00,400 --> 00:36:02,100
Right, that's not supposed to happen.

658
00:36:02,200 --> 00:36:03,100
What we're doing here.

659
00:36:03,800 --> 00:36:04,700
That's just ridiculous.

660
00:36:04,700 --> 00:36:07,600
You're only supposed to move, the the head about that far and what's

661
00:36:07,600 --> 00:36:08,600
supposed to happen is?

662
00:36:08,600 --> 00:36:11,600
If the head is too far from the body, it's supposed to get sucked back

663
00:36:11,600 --> 00:36:12,600
to the body, right?

664
00:36:12,600 --> 00:36:17,500
It's not supposed to ever actually be able to go any further than it

665
00:36:17,500 --> 00:36:18,300
could go.

666
00:36:20,400 --> 00:36:24,800
Half the, you know, half a square, unless the body will actually

667
00:36:24,800 --> 00:36:25,300
follow.

668
00:36:25,800 --> 00:36:28,300
So if you're moving in a straight line is fine because the body will

669
00:36:28,300 --> 00:36:31,700
always hop after you, but we want to stop you from being able to do

670
00:36:31,700 --> 00:36:32,200
that.

671
00:36:35,100 --> 00:36:38,700
Whenever the circumstances would be otherwise, right?

672
00:36:39,500 --> 00:36:41,500
So, yeah, so that's what we want to do there.

673
00:36:46,000 --> 00:36:46,900
That's pretty funny.

674
00:36:50,800 --> 00:36:51,600
So that's what we want to do.

675
00:36:51,600 --> 00:36:57,000
There, we need something that will Spring the head down.

676
00:36:57,200 --> 00:37:00,400
Now, it's interesting as our our head does spring back in X Y.

677
00:37:00,600 --> 00:37:02,100
So I guess is our head.

678
00:37:02,200 --> 00:37:03,700
Currently not springing.

679
00:37:04,000 --> 00:37:05,900
I guess it doesn't spring to the body.

680
00:37:06,100 --> 00:37:13,500
I guess the it just Springs back to whatever the closest traversable

681
00:37:13,500 --> 00:37:14,800
is, maybe I guess.

682
00:37:19,500 --> 00:37:22,600
We need to do some work on our player movement code to say the least.

683
00:37:22,600 --> 00:37:24,500
But, you know, that will come with time.

684
00:37:24,800 --> 00:37:28,000
That will certainly be the most complicated piece of the entity

685
00:37:28,400 --> 00:37:29,100
movement code.

686
00:37:29,100 --> 00:37:33,400
I'm sure because, you know, you got to really tune it and it's hasn't

687
00:37:33,400 --> 00:37:34,600
been tuned at all yet, right?

688
00:37:34,600 --> 00:37:35,800
It's pretty crappy.

689
00:37:39,100 --> 00:37:42,500
But anyway, so I think this is the code here that does it the right?

690
00:37:42,500 --> 00:37:45,800
Like, here's the re-centering stuff that sort of happens.

691
00:37:49,100 --> 00:37:53,800
Right, you can kind of see what's going on here with the closest here

692
00:37:53,800 --> 00:37:57,400
is the spring to the, to the closest and so on.

693
00:37:58,000 --> 00:38:02,700
And yeah, it does look like

694
00:38:05,100 --> 00:38:06,800
that closest pee.

695
00:38:11,700 --> 00:38:14,200
Is the closest reversible to the Head?

696
00:38:25,200 --> 00:38:31,000
So, I think really all we would have to do here is say well, okay, you

697
00:38:31,000 --> 00:38:36,800
know, try to go to the next one, like we were doing before, but

698
00:38:36,800 --> 00:38:41,100
afterwards, you know, we probably want to, to when we do this closest

699
00:38:41,100 --> 00:38:44,700
to pee, when we do, get some space reversible, we don't really want to

700
00:38:44,700 --> 00:38:45,500
use this one.

701
00:38:46,000 --> 00:38:49,700
What we would rather use is whichever one, the body is occupying,

702
00:38:49,900 --> 00:38:50,400
right?

703
00:38:51,200 --> 00:38:54,500
So, what we probably want to do is something more like,

704
00:38:55,500 --> 00:38:59,800
Get some space traversable you, nobody out.

705
00:39:00,000 --> 00:39:02,100
Pine here, something like that.

706
00:39:02,100 --> 00:39:02,900
Probably.

707
00:39:04,400 --> 00:39:09,100
So we always suck back to the bodies one, not the heads one, right?

708
00:39:09,100 --> 00:39:10,000
If that makes sense.

709
00:39:10,300 --> 00:39:16,100
So you know, if I go over to this guy and let go now at least I'm

710
00:39:16,100 --> 00:39:16,900
sucking back.

711
00:39:16,900 --> 00:39:21,600
And so now the only bug in our thing is that we let it go too far but

712
00:39:21,600 --> 00:39:23,100
it can't stop there.

713
00:39:23,300 --> 00:39:27,200
And so now in theory I should suck down when the body goes down and I

714
00:39:27,200 --> 00:39:27,600
did.

715
00:39:27,600 --> 00:39:29,800
So that's what I, that's exactly what I wanted to have happen.

716
00:39:30,000 --> 00:39:30,600
Are right?

717
00:39:31,000 --> 00:39:31,800
So that's perfect.

718
00:39:31,800 --> 00:39:33,900
So now our little teleport pads are working.

719
00:39:34,400 --> 00:39:37,300
Like I said, we I don't really want them to teleport pads so I would

720
00:39:37,300 --> 00:39:42,100
like to go ahead and make it so there's a little jump animation there

721
00:39:42,100 --> 00:39:42,900
but there we go.

722
00:39:43,500 --> 00:39:45,100
That's exactly what I had wanted to do.

723
00:39:45,600 --> 00:39:47,400
And we do have about 15 minutes left.

724
00:39:47,400 --> 00:39:51,600
So even though we had a bunch of stuff we did today, we should be able

725
00:39:51,600 --> 00:39:53,100
to, oh wow.

726
00:39:54,400 --> 00:39:55,300
That was crazy.

727
00:39:57,400 --> 00:39:58,600
The snake jumping down there.

728
00:39:58,600 --> 00:40:00,200
How did it jump back though?

729
00:40:04,600 --> 00:40:05,900
I don't know how it did that.

730
00:40:05,900 --> 00:40:08,400
That's probably a bug somewhere or who knows?

731
00:40:08,600 --> 00:40:11,000
We have some pretty crazy code in there right now for some of these

732
00:40:11,000 --> 00:40:11,300
things.

733
00:40:11,300 --> 00:40:13,700
So I guess it doesn't surprise me but that was kind of wild.

734
00:40:17,700 --> 00:40:17,900
Yeah.

735
00:40:17,900 --> 00:40:21,100
How would they get back up Theory?

736
00:40:21,100 --> 00:40:24,000
I don't wouldn't think they'd be able to do that but yeah, so that

737
00:40:24,000 --> 00:40:25,800
works almost exactly like I wanted.

738
00:40:26,100 --> 00:40:26,800
So that's good.

739
00:40:27,000 --> 00:40:30,900
So really all I want to do now is when I hop onto this thing instead

740
00:40:30,900 --> 00:40:33,300
of immediately teleporting my body down there.

741
00:40:34,200 --> 00:40:37,700
What I want to do is make the body actually go through one of the

742
00:40:37,700 --> 00:40:39,600
standard hops, right?

743
00:40:42,500 --> 00:40:47,900
So when I do that, and we do the, you know, this sort of thing.

744
00:40:47,900 --> 00:40:52,700
This transactional occupy, the problem here is I don't really know

745
00:40:52,800 --> 00:40:57,300
what that, what that entity does to move itself, right?

746
00:40:57,600 --> 00:41:00,900
So, you know, I mean, I can do something like this.

747
00:41:04,900 --> 00:41:06,500
And maybe that would be sufficient.

748
00:41:06,500 --> 00:41:07,300
I don't know.

749
00:41:14,100 --> 00:41:18,400
It would certainly work for the hero but you know, if somebody wasn't

750
00:41:18,400 --> 00:41:21,400
a hopper then it wouldn't work.

751
00:41:21,400 --> 00:41:22,200
Presumably.

752
00:41:28,500 --> 00:41:34,100
Yeah also hey, guess what we just moved the occupier off of there so

753
00:41:34,100 --> 00:41:35,100
that ain't going to work.

754
00:41:35,200 --> 00:41:38,800
That's what we want to do, is this?

755
00:41:43,300 --> 00:41:46,200
So grab the occupier out and then we can do whatever we want with them

756
00:41:46,200 --> 00:41:48,000
and we don't have to worry about the pointer going away.

757
00:41:51,800 --> 00:41:52,100
Go.

758
00:41:57,000 --> 00:41:59,500
so, I think in theory,

759
00:42:00,200 --> 00:42:01,200
That should hop other.

760
00:42:01,200 --> 00:42:02,100
Didn't look like adopt?

761
00:42:08,700 --> 00:42:09,100
oh,

762
00:42:11,900 --> 00:42:13,100
that reminds me.

763
00:42:24,700 --> 00:42:25,900
We need this as well.

764
00:42:37,900 --> 00:42:40,800
So hopefully you can see their wives saying, we're going to need to

765
00:42:41,300 --> 00:42:45,100
sort of upgrade something a little bit before we can make that a

766
00:42:45,100 --> 00:42:46,200
reasonable piece of code.

767
00:42:46,200 --> 00:42:48,000
Although it still seems like I'm not getting a hop there.

768
00:42:48,000 --> 00:42:48,800
I'm not sure why.

769
00:42:54,100 --> 00:42:54,400
Right.

770
00:42:54,400 --> 00:42:55,700
It's kind of a little busted.

771
00:42:57,800 --> 00:43:00,600
Can I I need a better way to slow time down here.

772
00:43:04,700 --> 00:43:06,500
first thing there is

773
00:43:10,000 --> 00:43:13,600
So now we're running extremely slowly, right?

774
00:43:13,900 --> 00:43:19,000
So I can see exactly what happens when I hop on this thing, right?

775
00:43:20,700 --> 00:43:23,100
Like that, that was all messed up, right?

776
00:43:23,700 --> 00:43:29,700
I think probably because it happened before the person ever actually

777
00:43:29,700 --> 00:43:30,600
landed.

778
00:43:30,600 --> 00:43:35,700
So it takes the occupational part of that and and goes from there.

779
00:43:35,700 --> 00:43:40,500
So really like, you know, we're going to need sort of a little bit of

780
00:43:40,500 --> 00:43:40,700
a

781
00:43:42,600 --> 00:43:47,000
And upgraded logic here because right now like this is what happens.

782
00:43:50,100 --> 00:43:56,800
We need to sort of take when it goes to the planted mode and do it

783
00:43:56,800 --> 00:43:58,100
then, right?

784
00:43:59,700 --> 00:44:00,600
And we can do that.

785
00:44:00,600 --> 00:44:01,400
Pretty trivially, right?

786
00:44:01,400 --> 00:44:03,700
We can say like, you know,

787
00:44:06,500 --> 00:44:09,100
But this isn't going to work generally speaking.

788
00:44:10,300 --> 00:44:10,600
Right.

789
00:44:10,600 --> 00:44:13,800
This isn't going to be a particularly good way of handling this.

790
00:44:13,800 --> 00:44:16,500
We need to sort of upgrade that logic, right?

791
00:44:17,000 --> 00:44:19,900
But that at least allows them to jump and then jump again.

792
00:44:20,200 --> 00:44:23,000
And so now you can kind of see that working there still a little bit

793
00:44:23,000 --> 00:44:27,000
of a, of a problem with it which is that the head starts animating

794
00:44:27,200 --> 00:44:30,200
faster than the body does, which is not great.

795
00:44:30,300 --> 00:44:34,600
And furthermore, The Hop isn't really set up quite so well to do that

796
00:44:34,600 --> 00:44:35,100
Ark.

797
00:44:35,200 --> 00:44:37,700
So we'd probably need to upgrade that code a little bit, but we're

798
00:44:37,700 --> 00:44:40,000
starting to get to the point where it's doing the right thing.

799
00:44:40,100 --> 00:44:40,800
Thing, right?

800
00:44:40,800 --> 00:44:42,200
Let's slow it down a little bit more.

801
00:44:55,500 --> 00:44:55,900
Right?

802
00:44:56,000 --> 00:44:57,000
So they're it hits.

803
00:44:57,500 --> 00:44:59,800
And now it jumps down to the floor and you

804
00:45:00,000 --> 00:45:01,400
It actually does the jump.

805
00:45:01,500 --> 00:45:05,900
The problem is, it's not a very satisfying jump because the arc up is

806
00:45:05,900 --> 00:45:08,100
not enough for that big jump down.

807
00:45:08,900 --> 00:45:11,600
So, we probably just need a little bit better controller code there,

808
00:45:12,000 --> 00:45:14,400
but otherwise it's reasonable, right?

809
00:45:14,900 --> 00:45:15,700
It's not too bad.

810
00:45:15,700 --> 00:45:18,300
I'm going to kind of slowly hop over here.

811
00:45:26,700 --> 00:45:28,200
So you can see, we really want a bigger Arc there.

812
00:45:28,200 --> 00:45:30,600
And the other thing is we want that head to animate a little bit

813
00:45:30,600 --> 00:45:31,800
differently, right?

814
00:45:33,400 --> 00:45:33,900
Okay.

815
00:45:35,800 --> 00:45:39,000
But yeah, kind of getting a little bit ahead of ourselves here because

816
00:45:39,000 --> 00:45:43,100
that's really entity code specific sort of stuff that we want there.

817
00:45:43,600 --> 00:45:48,700
So really we kind of I think are done for the most part here with this

818
00:45:48,700 --> 00:45:49,000
stuff.

819
00:45:49,000 --> 00:45:50,900
So I think we kind of want to do.

820
00:45:51,200 --> 00:45:55,600
We want to put this down somewhere later, right.

821
00:45:56,100 --> 00:45:58,000
You know this is going to be sort of like a

822
00:46:13,100 --> 00:46:14,900
We really want to do that a little bit later on.

823
00:46:14,900 --> 00:46:17,000
It's not really something we care about at the moment.

824
00:46:17,200 --> 00:46:22,500
So looking at this stuff here when we're doing our Z stuff, I feel

825
00:46:22,500 --> 00:46:25,800
like now we're pretty much good to go because I feel like flying

826
00:46:25,800 --> 00:46:27,800
things could go over low walls very easily.

827
00:46:27,800 --> 00:46:31,900
Now we kind of have the concept of all that stuff.

828
00:46:31,900 --> 00:46:35,800
Worked out pretty pretty well because we can still do 3D Collision

829
00:46:35,800 --> 00:46:36,300
detection.

830
00:46:36,600 --> 00:46:39,500
So if we update the Collision detection, as we're supposed to do here,

831
00:46:39,600 --> 00:46:42,400
we shouldn't have any trouble using boxes that are sort of floating in

832
00:46:42,400 --> 00:46:42,500
mid-air,

833
00:46:42,700 --> 00:46:45,100
If we want to, we didn't do anything that would prevent that from

834
00:46:45,100 --> 00:46:45,700
happening.

835
00:46:45,900 --> 00:46:49,400
We have our different layers working properly and our coordinate

836
00:46:49,400 --> 00:46:50,200
systems are fine.

837
00:46:50,200 --> 00:46:52,600
I think I don't know that we need any special texture coordinate

838
00:46:52,600 --> 00:46:54,800
systems is not sure we're going to use those very much.

839
00:46:56,000 --> 00:47:00,100
So I think we can kind of say that most of this stuff is pretty much

840
00:47:00,100 --> 00:47:00,600
done.

841
00:47:03,000 --> 00:47:09,100
So I think we can kind of go kind of go start looking at at this

842
00:47:09,100 --> 00:47:10,200
bundle of stuff here.

843
00:47:10,400 --> 00:47:11,600
This is basically like

844
00:47:15,200 --> 00:47:16,300
Graphics upgrade.

845
00:47:19,700 --> 00:47:20,500
so,

846
00:47:22,400 --> 00:47:23,500
Let's take a look here.

847
00:47:24,000 --> 00:47:25,900
Collision detection.

848
00:47:28,300 --> 00:47:29,500
I don't know.

849
00:47:32,800 --> 00:47:35,900
We're going to kind of have to look at this because these are mostly,

850
00:47:35,900 --> 00:47:37,500
probably not so relevant anymore.

851
00:47:37,500 --> 00:47:41,800
Now that we have grid-based movement, requirements, for Collision

852
00:47:41,800 --> 00:47:45,200
detection, it's more going to be about floating entities, what they

853
00:47:45,200 --> 00:47:50,600
need to do, and about like projectile Collision sorts of stuff.

854
00:47:51,000 --> 00:47:52,800
So, I don't know what we want to do with that.

855
00:47:52,800 --> 00:47:58,300
We'll have to look at that a little bit more and AI storage.

856
00:47:58,300 --> 00:47:59,900
We haven't really, we don't have

857
00:48:00,000 --> 00:48:03,000
A lot to do with that stuff yet.

858
00:48:03,400 --> 00:48:06,200
I don't know when we're really going to want that.

859
00:48:08,200 --> 00:48:09,000
Yeah.

860
00:48:10,600 --> 00:48:11,400
Yeah.

861
00:48:11,400 --> 00:48:15,700
So I think we're mostly living up here and particle.

862
00:48:15,700 --> 00:48:18,800
Systems is probably something we do want to get to fairly soon.

863
00:48:19,300 --> 00:48:22,200
Let's take a look at some of our situation here.

864
00:48:22,200 --> 00:48:27,100
I'm going to take this Notch down a little bit.

865
00:48:27,400 --> 00:48:29,500
I'll just have two screens for the moment.

866
00:48:32,600 --> 00:48:34,700
So we can still kind of zip around here.

867
00:48:40,400 --> 00:48:42,500
All right, you see?

868
00:48:42,500 --> 00:48:44,800
See how people were able to get up like that?

869
00:48:44,800 --> 00:48:46,900
I don't understand what the hell they were doing that.

870
00:48:48,700 --> 00:48:52,700
Is that because there's some kind of a warp here that I left in

871
00:48:54,100 --> 00:48:54,900
Or something.

872
00:48:56,200 --> 00:48:58,000
I don't understand how it did that.

873
00:48:58,400 --> 00:49:00,800
I want to know what it was doing because it was pretty cool.

874
00:49:01,900 --> 00:49:03,200
I just don't know how to do it.

875
00:49:03,900 --> 00:49:07,600
It's like the snakes have a magic way of going upstairs that I don't

876
00:49:07,600 --> 00:49:09,500
have, which is weird.

877
00:49:13,900 --> 00:49:17,600
All right, so I think what we want to do is we want to start taking a

878
00:49:17,600 --> 00:49:20,500
look at putting some particle systems in here, because we're going to

879
00:49:20,500 --> 00:49:22,100
need those for effects and stuff like that.

880
00:49:22,100 --> 00:49:24,600
They're pretty important for an action game because they kind of sell

881
00:49:24,600 --> 00:49:29,700
it, you know, seeing lots of things kind of Sparkle around and spray

882
00:49:29,700 --> 00:49:31,400
around and do fun stuff.

883
00:49:31,400 --> 00:49:34,700
Is it tends to be pretty important for an action game, you know?

884
00:49:34,900 --> 00:49:37,300
So we kind of want some of that in there and it's just going to be a

885
00:49:37,300 --> 00:49:39,500
way for us to accentuate the various things that we need to

886
00:49:39,500 --> 00:49:40,300
accentuate.

887
00:49:40,600 --> 00:49:41,700
Yes brights, do it.

888
00:49:41,900 --> 00:49:44,800
It feels kind of good to hop around here as we tune that it will

889
00:49:44,800 --> 00:49:47,800
certainly get better and we put in the new art it'll be way better.

890
00:49:48,400 --> 00:49:51,800
But you know when we hit somebody you know like we're going to have a

891
00:49:51,800 --> 00:49:54,800
glove in here and we're going to swipe with the glove, you know, it'd

892
00:49:54,800 --> 00:49:55,200
be nice.

893
00:49:55,200 --> 00:49:57,300
If you could leave a particle Trail, it'd be nice.

894
00:49:57,300 --> 00:50:00,500
If, when you hit something, you got some particle Splash that sort of

895
00:50:00,500 --> 00:50:00,800
stuff.

896
00:50:00,800 --> 00:50:05,900
So in terms of making, you know, selling the feel of an action game, I

897
00:50:05,900 --> 00:50:08,000
think particle systems are going to be pretty important.

898
00:50:08,000 --> 00:50:10,500
So I would like to put some in there and I think that's what we kind

899
00:50:10,500 --> 00:50:11,500
of want to do next.

900
00:50:11,800 --> 00:50:14,400
I won't get started on that because we're almost at the end here and I

901
00:50:14,400 --> 00:50:16,600
think we're pretty much done with all the other things that I want to

902
00:50:16,600 --> 00:50:17,000
do.

903
00:50:17,500 --> 00:50:20,200
So I'll save the explanation for tomorrow and will end a little bit

904
00:50:20,200 --> 00:50:20,700
early.

905
00:50:23,600 --> 00:50:25,800
I think that should basically do it.

906
00:50:26,300 --> 00:50:26,800
So yeah.

907
00:50:26,800 --> 00:50:31,300
So let's go to cue a little bit early and then tomorrow I guess you'll

908
00:50:31,300 --> 00:50:31,900
have to tomorrow.

909
00:50:32,800 --> 00:50:37,200
So next week, we'll just be particle systems week and we'll do all

910
00:50:37,200 --> 00:50:38,400
sorts of particle system stuff.

911
00:50:38,400 --> 00:50:41,700
Will upgrade the renderer to have particle batches so that they're not

912
00:50:41,800 --> 00:50:42,300
Slow.

913
00:50:43,000 --> 00:50:44,300
And then we will

914
00:50:48,000 --> 00:50:51,700
We'll just sort of get them nicely integrated, so they're easy to use

915
00:50:51,700 --> 00:50:56,000
and do a couple that will be reasonable, right?

916
00:50:58,200 --> 00:50:59,800
All right, so any questions?

917
00:51:00,400 --> 00:51:02,400
About where we're at at the moment.

918
00:51:29,100 --> 00:51:34,500
Sean McGrath asks, my three-year-old would like to know, why is he

919
00:51:34,500 --> 00:51:36,200
angry regarding the hero?

920
00:51:36,600 --> 00:51:40,500
Well, keep in mind that the hero now looks quite a bit different.

921
00:51:40,500 --> 00:51:42,100
So this is the old art.

922
00:51:43,200 --> 00:51:44,600
The new art.

923
00:51:45,900 --> 00:51:51,200
That we are almost a good point for putting in looks like that.

924
00:51:51,900 --> 00:51:55,200
Does your three-year-old think that that still looks angry?

925
00:51:55,200 --> 00:51:56,300
That's what the hero looks like.

926
00:51:56,300 --> 00:52:01,900
Now from it's got the proper top-down perspective and an has kind of

927
00:52:02,400 --> 00:52:03,300
got that nice.

928
00:52:03,900 --> 00:52:07,500
She always puts a lot of good personality in the face so I don't know

929
00:52:07,500 --> 00:52:09,200
if that looks angry still or

930
00:52:21,100 --> 00:52:23,900
This Isaac, I think the snakes choose their next jump destination

931
00:52:23,900 --> 00:52:26,100
while still on the Upper Floor, okay?

932
00:52:26,300 --> 00:52:29,200
So after they get boosted down they can jump back up again.

933
00:52:29,400 --> 00:52:29,900
Okay?

934
00:52:31,500 --> 00:52:32,000
Okay.

935
00:52:41,700 --> 00:52:42,600
Yeah, that makes good sense.

936
00:52:42,600 --> 00:52:47,100
Because yeah, the brain, the brain doesn't know that the snake got

937
00:52:47,100 --> 00:52:50,100
teleported down, so it could have already picked a destination to jump

938
00:52:50,100 --> 00:52:50,400
to.

939
00:52:50,400 --> 00:52:51,400
That does make sense.

940
00:53:07,100 --> 00:53:10,900
So if you look at Kirby, the American version always has an angry face

941
00:53:11,200 --> 00:53:13,000
and the Japanese version is always smiling.

942
00:53:13,400 --> 00:53:16,400
Well, so maybe we should have two kinds for internationalisation will

943
00:53:16,400 --> 00:53:19,700
have like a frowny face for America or an angry face of America.

944
00:53:24,000 --> 00:53:24,600
Uplink coder.

945
00:53:24,600 --> 00:53:27,500
What happens if someone blocks the place someone gets boosted down to

946
00:53:27,700 --> 00:53:28,800
then you can't boost down?

947
00:53:29,000 --> 00:53:32,800
That's one of the nice things about the way we did it, right?

948
00:53:32,900 --> 00:53:33,900
Which is

949
00:53:41,900 --> 00:53:46,600
This transactional occupy makes it so that you can't have two people

950
00:53:46,600 --> 00:53:48,300
occupying a space, right?

951
00:53:48,300 --> 00:53:50,800
So it just won't move the person down.

952
00:54:01,000 --> 00:54:04,100
Can we talk again about Euro time stream?

953
00:54:05,500 --> 00:54:07,400
We could talk about Euro timestream.

954
00:54:07,400 --> 00:54:10,000
I just don't know what Euro timestream means.

955
00:55:23,300 --> 00:55:26,800
So it's worth noting that, you know, we still when we do kind of our

956
00:55:26,800 --> 00:55:29,800
final past, we still will have to deal with the fact that when you

957
00:55:29,800 --> 00:55:32,500
move down, your kind of just continuously going between the coordinate

958
00:55:32,500 --> 00:55:38,100
systems, so we still will need to have some way that that works

959
00:55:38,100 --> 00:55:38,600
probably.

960
00:55:38,600 --> 00:55:42,400
But I think we should be okay because you don't, you know, you won't

961
00:55:42,400 --> 00:55:42,900
be going.

962
00:55:43,100 --> 00:55:44,300
We'll be able to kind of hack it.

963
00:55:44,300 --> 00:55:44,900
I think.

964
00:55:50,300 --> 00:55:52,900
Seems at times for Europe like you did at the start of the project.

965
00:55:53,700 --> 00:55:58,600
So actually at the start of the project we were always 8 p.m.

966
00:55:58,600 --> 00:56:01,100
it was only in the middle of the project that we did five PM streams

967
00:56:01,300 --> 00:56:04,100
but streams times are just based on my schedule.

968
00:56:04,400 --> 00:56:09,100
I can't I don't have the up really the flexibility to worry about who

969
00:56:09,100 --> 00:56:10,400
is up when for them.

970
00:56:11,100 --> 00:56:15,900
So they they are when they are and sometimes depending on what my

971
00:56:15,900 --> 00:56:18,800
schedules are, they will be your friendly and other times they won't.

972
00:56:18,800 --> 00:56:19,500
But I don't

973
00:56:19,700 --> 00:56:22,400
Do not set the schedule based on what is convenient for people to

974
00:56:22,400 --> 00:56:22,800
watch.

975
00:56:22,800 --> 00:56:28,500
I said it based on when I can do it and you know, that becomes useful

976
00:56:28,500 --> 00:56:32,600
for some people and not useful for others, that makes sense.

977
00:56:45,600 --> 00:56:47,000
Our more General software questions.

978
00:56:47,000 --> 00:56:47,400
Okay.

979
00:56:47,600 --> 00:56:48,100
Yeah.

980
00:56:48,100 --> 00:56:51,100
If they're I usually just answer questions that are about what we're

981
00:56:51,100 --> 00:56:56,400
doing first, but if we don't have any more questions about that then I

982
00:56:56,400 --> 00:56:59,800
don't want mind.

983
00:57:00,000 --> 00:57:01,100
Ones that are broader.

984
00:57:07,600 --> 00:57:10,900
Loan billion, not being boosted down with glue, the player in that

985
00:57:10,900 --> 00:57:12,100
there is an enemy there.

986
00:57:12,600 --> 00:57:14,500
Will that affect gameplay much.

987
00:57:17,300 --> 00:57:20,900
So I guess what I would say is I'm not sure how we're going to

988
00:57:20,900 --> 00:57:22,300
implement these just yet.

989
00:57:24,300 --> 00:57:29,800
It may be that the place that you land when you boost down is the same

990
00:57:29,800 --> 00:57:32,400
place that you would step on to boost up.

991
00:57:32,600 --> 00:57:36,000
So, it may be that there's never a way to actually stand on one of

992
00:57:36,000 --> 00:57:36,200
them.

993
00:57:36,200 --> 00:57:36,800
Anyway,

994
00:57:38,100 --> 00:57:39,100
Really right?

995
00:57:39,100 --> 00:57:42,000
You would both have to kind of get on them at the same time and

996
00:57:42,000 --> 00:57:45,800
prevent each other from boosting or something, if that makes sense.

997
00:57:53,000 --> 00:57:56,000
Sort of okubo any reason why you don't just let the hero jump down and

998
00:57:56,000 --> 00:57:58,400
only use jump pads for moving up levels.

999
00:58:00,400 --> 00:58:04,600
I kind of wanted to make it specific when you could move up or down so

1000
00:58:04,600 --> 00:58:07,900
I don't want Holes in the Floor to be things you can jump down.

1001
00:58:08,200 --> 00:58:09,100
I just want them to things.

1002
00:58:09,100 --> 00:58:14,200
You can see down and then only when there's actually a sort of pad.

1003
00:58:15,600 --> 00:58:16,600
Would it let you do that?

1004
00:58:16,700 --> 00:58:19,800
We could also think about making it be more of an elevator e looking

1005
00:58:19,800 --> 00:58:20,900
thing but I don't think so.

1006
00:58:20,900 --> 00:58:22,900
I think I just wanted to kind of boost you and

1007
00:58:36,900 --> 00:58:38,300
team its key.

1008
00:58:38,300 --> 00:58:41,500
In case you care my problem with McCaskey sounds before is that when

1009
00:58:41,500 --> 00:58:44,000
you drew it, the way it was drawn, my brain assumed, you meant the

1010
00:58:44,000 --> 00:58:47,600
origin of the shapes and not the origin of the graph.

1011
00:58:48,200 --> 00:58:51,600
Well, it's true in either case, right?

1012
00:58:51,700 --> 00:58:55,400
The origin of the shape is what you're talking about, basically,

1013
00:58:55,400 --> 00:58:55,700
right?

1014
00:58:55,700 --> 00:58:59,800
Because that shape is relatives, World relative, if you're talking

1015
00:58:59,800 --> 00:59:03,700
about trying to do two things colliding in the same space, but the

1016
00:59:03,700 --> 00:59:06,600
Makowski some doesn't is talking about just the

1017
00:59:06,700 --> 00:59:09,700
Of the shapes, which could be either way, right?

1018
00:59:09,700 --> 00:59:11,400
It's whatever you define it to be.

1019
00:59:15,100 --> 00:59:18,800
The point is just that when you do the minkowski sum, you're talking

1020
00:59:18,800 --> 00:59:22,200
about the actual values of the points, which means that where you

1021
00:59:22,200 --> 00:59:25,700
chose to consider the origin when you define the shapes matters.

1022
00:59:34,200 --> 00:59:38,100
Demetri Spanos told me about time, reversible debuggers and it sounds

1023
00:59:38,100 --> 00:59:38,800
kind of bunkers.

1024
00:59:38,800 --> 00:59:42,000
How would you implement it without making a huge strain on the run

1025
00:59:42,000 --> 00:59:42,400
time?

1026
00:59:45,000 --> 00:59:49,200
I don't really know how you implement them.

1027
00:59:51,400 --> 00:59:57,200
If you didn't have to worry about operating system stuff, then you

1028
00:59:57,200 --> 00:59:59,100
know, you would implement it, it's pretty trivial.

1029
00:59:59,100 --> 00:59:59,600
All you do is

1030
01:00:00,000 --> 01:00:04,400
like pages and then periodically you wake up, save the contents of all

1031
01:00:04,400 --> 01:00:08,900
the pages that have nut have been men protected

1032
01:00:10,000 --> 01:00:11,800
that have triggered, right?

1033
01:00:12,600 --> 01:00:14,700
And then record the instruction pointer and that just gives you

1034
01:00:14,700 --> 01:00:18,000
checkpoints and then you can always jump back to any one of those

1035
01:00:18,000 --> 01:00:19,800
checkpoints and that's really easy to do.

1036
01:00:20,100 --> 01:00:23,600
The thing that's much harder to do is like, let's say you call F right

1037
01:00:23,600 --> 01:00:25,600
to write to a file or something like that.

1038
01:00:25,900 --> 01:00:29,500
If your debugger is supposed to be good enough to undo the F, right,

1039
01:00:29,500 --> 01:00:31,900
that's real tough, real real tough.

1040
01:00:33,400 --> 01:00:36,300
So, I don't know if time reversible debuggers.

1041
01:00:36,300 --> 01:00:39,600
If there are any time reversible debuggers that can do that, I don't

1042
01:00:39,600 --> 01:00:39,700
know.

1043
01:00:41,600 --> 01:00:47,700
but if you think about what happens with programs that do not involve

1044
01:00:47,700 --> 01:00:53,500
calls to the operating system that can alter permanent on disk stuff,

1045
01:00:56,200 --> 01:00:57,200
then it's pretty easy.

1046
01:00:57,600 --> 01:01:02,600
If you don't then what you have to do is start intercepting all of the

1047
01:01:02,900 --> 01:01:05,600
system level stuff so that you can do essentially the same thing I

1048
01:01:05,600 --> 01:01:09,100
just said but with any resources in the system, right?

1049
01:01:09,100 --> 01:01:12,000
So if they write to file Pages, you have to remember which file page

1050
01:01:12,000 --> 01:01:14,600
has changed and be able to back those up as well.

1051
01:01:15,100 --> 01:01:17,600
But just doing time, reversible debugging on Sony that doesn't call.

1052
01:01:17,600 --> 01:01:19,100
The operating system is actually trivial.

1053
01:01:19,300 --> 01:01:22,300
All you do is just periodically, suspend the task.

1054
01:01:22,300 --> 01:01:25,300
Look at all the pages that have been touched right out their contents.

1055
01:01:25,600 --> 01:01:26,100
Right.

1056
01:01:30,700 --> 01:01:32,800
Well, it's actually not quite that you men.

1057
01:01:32,800 --> 01:01:36,200
Protect all the pages that every time that a page is touched, you

1058
01:01:36,200 --> 01:01:36,500
right out.

1059
01:01:36,500 --> 01:01:37,100
Its contents.

1060
01:01:37,100 --> 01:01:41,600
And then let the thing resume, then periodically, you go back, men,

1061
01:01:41,600 --> 01:01:44,800
protect all the pages that have been touched, right?

1062
01:01:45,600 --> 01:01:48,200
And start the process over again and that just gives you check points

1063
01:01:48,200 --> 01:01:50,600
in time where you can restore exactly what the memory say that the

1064
01:01:50,600 --> 01:01:54,000
machine was, it's actually almost the same thing we do in handmade

1065
01:01:54,000 --> 01:01:57,700
hero where we do that sort of loop live coding.

1066
01:01:57,900 --> 01:02:03,000
basically that it's just we didn't use the win32 calls that let you do

1067
01:02:03,000 --> 01:02:06,400
the men protect we could have but I just didn't

1068
01:02:13,100 --> 01:02:16,300
Thoughts on VR, I don't care for it.

1069
01:02:17,800 --> 01:02:19,300
It's not my cup of tea.

1070
01:02:19,900 --> 01:02:25,700
I like the regular old stuff so I don't know.

1071
01:02:26,200 --> 01:02:31,700
I understand why certain people get excited about it because it's

1072
01:02:31,700 --> 01:02:35,000
definitely a different experience and it's the kind of experience

1073
01:02:35,000 --> 01:02:36,500
that's fun to have once.

1074
01:02:37,700 --> 01:02:41,300
Like, it's everyone should try it sometime at a trade show, right?

1075
01:02:42,000 --> 01:02:45,600
It's not the kind of experience I ever want to have again.

1076
01:02:45,700 --> 01:02:47,000
Like, I've never wanted

1077
01:02:47,100 --> 01:02:48,900
To go back and do V re.

1078
01:02:48,900 --> 01:02:50,200
And it was just like, yep.

1079
01:02:50,200 --> 01:02:52,200
It was fine and now I'm done.

1080
01:02:53,600 --> 01:02:57,100
It doesn't engage me the way computers in general do.

1081
01:02:57,800 --> 01:02:59,800
So I haven't really had

1082
01:03:00,100 --> 01:03:02,800
The kind of enthusiasm for them that other people have.

1083
01:03:06,900 --> 01:03:11,800
I think as the technology becomes easier to transition in and out of

1084
01:03:13,200 --> 01:03:15,900
then it might make sense that I would occasionally use it more.

1085
01:03:16,300 --> 01:03:21,800
So, for example, I would probably enjoy having VR, like, if I wanted

1086
01:03:21,800 --> 01:03:25,700
to play a space Sim so I could like, look around the cockpit, you know

1087
01:03:26,000 --> 01:03:26,500
would be fun.

1088
01:03:26,500 --> 01:03:29,100
Like, I've always wanted to have more of a dog fighting experience

1089
01:03:29,100 --> 01:03:31,600
where, you know, I can quickly look behind me and see, you know, if

1090
01:03:31,600 --> 01:03:33,900
there's a spaceship behind me, right?

1091
01:03:34,100 --> 01:03:35,400
And V are starting to do that.

1092
01:03:35,400 --> 01:03:36,300
Pretty good.

1093
01:03:36,700 --> 01:03:42,700
And so I think that if it didn't take so much set up, and so much junk

1094
01:03:42,700 --> 01:03:45,800
on my desk and all this other stuff to have that happen.

1095
01:03:46,300 --> 01:03:50,800
I think I could see, like, oh, I'm gonna go play a game of the elite,

1096
01:03:50,800 --> 01:03:55,900
or whatever, or, you know, in my dream world X Ring, the original

1097
01:03:55,900 --> 01:04:00,200
X-Wing, let's say, and I can if I just like quick, grab the thing, and

1098
01:04:00,200 --> 01:04:01,600
stick it on my head and that's it.

1099
01:04:01,600 --> 01:04:04,200
And I just start playing and it wasn't like this big.

1100
01:04:04,200 --> 01:04:06,500
Oh, you got to make sure your base stations were configured and

1101
01:04:06,600 --> 01:04:10,200
Here is your wand and whatever and like, oh the Oculus cameras like

1102
01:04:10,200 --> 01:04:12,400
got knocked over or what, you know, all that crap.

1103
01:04:15,100 --> 01:04:21,600
So, you know, I I feel like that's kind of the barrier for me using it

1104
01:04:21,600 --> 01:04:22,500
occasionally.

1105
01:04:23,500 --> 01:04:27,700
I definitely don't like VR enough at the moment to deal with all of

1106
01:04:27,700 --> 01:04:31,300
the hassles, but I think if they, you know, and they will write.

1107
01:04:31,300 --> 01:04:33,700
I mean, you know, that, you know, that this is the kind of things

1108
01:04:33,700 --> 01:04:34,400
they're working on, right?

1109
01:04:34,400 --> 01:04:39,700
They want to make it really easy as that barrier to getting into VR,

1110
01:04:40,000 --> 01:04:41,200
goes down.

1111
01:04:42,400 --> 01:04:48,900
As the headsets get lighter and it's cheaper to buy them and you don't

1112
01:04:48,900 --> 01:04:50,700
have any set up and blah blah blah.

1113
01:04:50,700 --> 01:04:54,800
If they can get that down enough then it becomes something that I

1114
01:04:54,800 --> 01:04:57,500
would use occasionally when I'm playing a game that I think really

1115
01:04:57,500 --> 01:04:59,300
benefits from that.

1116
01:04:59,300 --> 01:04:59,800
Right.

1117
01:05:00,900 --> 01:05:05,700
But I just when I do VR stuff, I'm like it's kind of a neat novelty

1118
01:05:05,700 --> 01:05:08,900
but it's just not something that I am excited.

1119
01:05:08,900 --> 01:05:12,000
Enough about to want to deal with any of the earlier adopters stuff.

1120
01:05:12,300 --> 01:05:17,100
And so I think like probably the vast majority of game players out

1121
01:05:17,100 --> 01:05:17,600
there.

1122
01:05:18,000 --> 01:05:21,400
I'm like, yeah, you know, we'll see you in five years.

1123
01:05:21,400 --> 01:05:24,700
Let's let's see what it is, and maybe I'll go, you know, look at one

1124
01:05:24,700 --> 01:05:26,500
then but I'm just not

1125
01:05:28,900 --> 01:05:35,200
I'm just not sufficiently motivated at by the current crop of tech to

1126
01:05:35,200 --> 01:05:37,200
really bother with it, right?

1127
01:05:46,900 --> 01:05:52,000
I looked for calls to the OS to give me the page size, the page size,

1128
01:05:52,800 --> 01:05:53,800
and I couldn't find it.

1129
01:05:54,800 --> 01:05:58,900
Well, the page size is always 4K at the moment because turning on

1130
01:05:58,900 --> 01:05:59,800
large pages, is

1131
01:06:00,000 --> 01:06:02,300
Like impossible in Windows.

1132
01:06:02,900 --> 01:06:06,800
They really don't want you to do it for some reason, so you basically

1133
01:06:06,800 --> 01:06:09,900
can't ship an app that's large page where I mean you can.

1134
01:06:10,200 --> 01:06:11,300
But it's really hard.

1135
01:06:11,900 --> 01:06:15,000
I think you have to be like administrator to do it even, it's really

1136
01:06:15,000 --> 01:06:15,200
weird.

1137
01:06:15,200 --> 01:06:17,500
They just, I don't know why it's windows.

1138
01:06:17,500 --> 01:06:19,400
It's a disaster nowadays, right?

1139
01:06:20,300 --> 01:06:21,700
It's just an epic fail.

1140
01:06:22,700 --> 01:06:26,400
So, you know, the page sizes aren't particularly problematic in that

1141
01:06:26,400 --> 01:06:26,800
sense.

1142
01:06:27,800 --> 01:06:28,300
But,

1143
01:06:29,200 --> 01:06:31,400
I don't know, maybe you're talking about how big a particular

1144
01:06:31,400 --> 01:06:32,600
allocation range was,

1145
01:06:34,300 --> 01:06:37,700
But anyway, if you want to know what the what the default page size is

1146
01:06:38,000 --> 01:06:41,400
get system info or one of those gets us the metrics.

1147
01:06:41,400 --> 01:06:42,700
I don't think it's get system, info.

1148
01:06:43,100 --> 01:06:44,800
You can call and they'll tell you the page size.

1149
01:06:56,000 --> 01:06:57,700
I meant the allocated pages.

1150
01:06:57,800 --> 01:07:01,200
Okay, so your talk well I guess I don't know why you're talking about.

1151
01:07:01,200 --> 01:07:04,300
Are you talking about like I have

1152
01:07:11,100 --> 01:07:12,300
I guess I don't know what I'm right.

1153
01:07:12,600 --> 01:07:13,000
Sorry.

1154
01:07:15,100 --> 01:07:15,700
Are you talking about?

1155
01:07:15,700 --> 01:07:20,400
I have a pointer into a region and I just want to know like in that

1156
01:07:20,400 --> 01:07:21,100
region.

1157
01:07:21,400 --> 01:07:26,300
What was the page that like like how big was the virtual Alec call

1158
01:07:26,300 --> 01:07:29,600
that caused this page to be reserved kind of a thing?

1159
01:07:32,000 --> 01:07:33,800
If you had a chance to look at the rust, programming language.

1160
01:07:34,000 --> 01:07:37,000
No, I don't I don't do anything with rust.

1161
01:07:40,600 --> 01:07:44,700
Is the penalty for polymorphic calls in not intensive sections of

1162
01:07:44,700 --> 01:07:48,000
codes worth the trade-off of usage.

1163
01:07:48,000 --> 01:07:48,600
Benefits.

1164
01:07:48,600 --> 01:07:52,900
Also, do you think you could beat John Carmack in a fight?

1165
01:07:56,400 --> 01:07:57,800
You seem buff.

1166
01:08:00,100 --> 01:08:05,100
Let me answer the second question first, which is that I seriously

1167
01:08:05,100 --> 01:08:10,400
doubt that our degrees of relative buffness would determine who would

1168
01:08:10,400 --> 01:08:12,100
win in a fight.

1169
01:08:15,100 --> 01:08:18,600
Like, I just don't feel like if John Carmack and I were fighting that

1170
01:08:18,600 --> 01:08:22,000
the determining Factor would be like, who's stronger, right?

1171
01:08:22,000 --> 01:08:25,300
That that doesn't seem like the primary thing, right?

1172
01:08:25,300 --> 01:08:28,300
It's probably who like throws the better punches or whose murmur do

1173
01:08:28,300 --> 01:08:28,800
verbal.

1174
01:08:28,800 --> 01:08:33,500
Like, you know, for example, John Blow studied kung fu for a long

1175
01:08:33,500 --> 01:08:35,100
time, right?

1176
01:08:36,800 --> 01:08:44,399
And so, you know, if if you factor in like that, fighting

1177
01:08:44,600 --> 01:08:51,600
Variance would mean a lot, you know probably John would be able to be

1178
01:08:51,600 --> 01:08:55,399
a much more effective fighter regardless of whether he was as strong

1179
01:08:55,399 --> 01:08:56,500
as say I was.

1180
01:08:56,800 --> 01:08:59,800
Because most of the things that are going to matter there are

1181
01:09:00,000 --> 01:09:02,600
Not just how strong he is at this moment.

1182
01:09:02,700 --> 01:09:05,100
It's going to be like reflexes and stuff like that, right?

1183
01:09:05,500 --> 01:09:09,200
So since I know absolutely nothing about John carmack's fighting

1184
01:09:09,200 --> 01:09:12,100
skills, I would say, who knows.

1185
01:09:12,100 --> 01:09:15,100
But why would John Carmack and I be fighting in the first place would

1186
01:09:15,100 --> 01:09:18,100
be another question altogether since.

1187
01:09:18,500 --> 01:09:22,000
I would assume that me and John Carmack would be friendly.

1188
01:09:22,000 --> 01:09:26,600
If we were talking in person by we have talked in person before and

1189
01:09:26,600 --> 01:09:28,399
certainly a fight did not break out.

1190
01:09:28,600 --> 01:09:29,700
So it seems like

1191
01:09:30,200 --> 01:09:31,600
that would not be necessary.

1192
01:09:32,899 --> 01:09:35,200
And certainly I have a tremendous amount of respect for me as well so

1193
01:09:35,200 --> 01:09:38,399
I would I would prefer not to get in a fight with him if I could avoid

1194
01:09:38,399 --> 01:09:38,700
it.

1195
01:09:47,200 --> 01:09:51,300
So, as for the polymorphic calls in an intensive sections of codes

1196
01:09:51,300 --> 01:09:57,100
worth being worth a trade-off, I would say that if you're talking

1197
01:09:57,100 --> 01:10:02,500
about not intensive sections of code, then you've kind of already

1198
01:10:02,500 --> 01:10:03,200
answered the question.

1199
01:10:03,200 --> 01:10:06,900
Like, if you can verify that the places where the polymorphic calls

1200
01:10:06,900 --> 01:10:09,800
are happening, are not going to occupy a significant amount of your

1201
01:10:09,800 --> 01:10:13,000
time budget, then obviously you don't have to care.

1202
01:10:13,000 --> 01:10:16,000
So if you find that you're getting some benefits from it,

1203
01:10:16,400 --> 01:10:18,400
Then you should be fine, right?

1204
01:10:18,600 --> 01:10:21,400
The important thing is this that you determine that that's actually

1205
01:10:21,400 --> 01:10:22,300
true, right?

1206
01:10:22,300 --> 01:10:23,600
The important thing is you determine that.

1207
01:10:23,600 --> 01:10:27,000
This is not going to be a half heavily trafficked area that's going to

1208
01:10:27,000 --> 01:10:29,000
cause you problems, right?

1209
01:10:29,000 --> 01:10:33,000
And you should be able to know based on how many of these calls do you

1210
01:10:33,000 --> 01:10:34,700
anticipate happening, right?

1211
01:10:34,800 --> 01:10:36,500
Are you talking about 10 calls at frame?

1212
01:10:36,500 --> 01:10:39,700
100 calls a frame, a thousand calls a frame ten thousand calls a frame

1213
01:10:39,700 --> 01:10:40,500
like right?

1214
01:10:42,900 --> 01:10:45,900
If the answer is 10 times a frame, then it really isn't going to ever

1215
01:10:45,900 --> 01:10:46,400
matter, right?

1216
01:10:46,400 --> 01:10:49,200
There's just no way that's going to probably add up to something

1217
01:10:49,200 --> 01:10:50,300
that's going to be relevant.

1218
01:10:50,300 --> 01:10:53,300
If the answer is like 100,000 times a frame, well, that's starting to

1219
01:10:53,300 --> 01:10:55,400
sound pretty darn concerning, right?

1220
01:10:55,700 --> 01:10:59,000
So you kind of got to think through where you are in that Spectrum.

1221
01:11:07,300 --> 01:11:09,600
How long do you think until a new low-level capable language?

1222
01:11:09,600 --> 01:11:11,400
Will be produced to surpass C++.

1223
01:11:12,600 --> 01:11:20,000
I would say that I don't anticipate that anyone in the game industry

1224
01:11:20,000 --> 01:11:28,600
would be starting a, they're starting engine programming in C++ 10

1225
01:11:28,600 --> 01:11:29,200
years from now.

1226
01:11:31,500 --> 01:11:35,900
So I would say, 20 26, their C++ will be a dead language in the game

1227
01:11:35,900 --> 01:11:37,800
industry other than Legacy code.

1228
01:11:39,200 --> 01:11:40,500
That's, that's my prediction.

1229
01:11:43,200 --> 01:11:48,100
I think there are enough people now working on successors, who are

1230
01:11:48,100 --> 01:11:49,200
serious about it?

1231
01:11:50,400 --> 01:11:53,400
That I think the train has left the station.

1232
01:11:53,700 --> 01:11:57,100
I think we all know the C++ is a terrible language, that doesn't suit

1233
01:11:57,100 --> 01:11:59,900
our needs and it is not being designed or maintained by people.

1234
01:12:00,500 --> 01:12:05,300
Who are producing quality work for the specification.

1235
01:12:05,600 --> 01:12:07,600
And so I think it's dead.

1236
01:12:08,400 --> 01:12:12,000
I think it is waiting to die, so I think, as a programming language of

1237
01:12:12,000 --> 01:12:16,300
the game industry, I think C plus plus will be gone within within a

1238
01:12:16,300 --> 01:12:16,900
decade.

1239
01:12:19,400 --> 01:12:21,900
And obviously, they'll still be stuff like, you know, oh, maybe the

1240
01:12:21,900 --> 01:12:24,900
whole Unreal Engine still written in C plus plus.

1241
01:12:24,900 --> 01:12:28,700
So there's, you know, it hasn't been totally replaced by 2026 or

1242
01:12:28,700 --> 01:12:31,300
something, so they're still like Legacy maintenance stuff like that.

1243
01:12:31,300 --> 01:12:34,200
Going on, that will obviously continue for quite some time.

1244
01:12:34,200 --> 01:12:37,300
You know just like COBOL is still being used in banking some place or

1245
01:12:37,300 --> 01:12:38,100
whatever, right?

1246
01:12:38,300 --> 01:12:43,000
So it will take a long time for C++ to completely die out as something

1247
01:12:43,000 --> 01:12:49,000
that is still used in the game industry, but fundamentally C++ has

1248
01:12:49,200 --> 01:12:50,200
Ever been a good language.

1249
01:12:50,200 --> 01:12:55,000
It's always been lousy and I think it always kind of just was only

1250
01:12:55,000 --> 01:12:58,800
clawing along because C is a was a good language and has a lot of good

1251
01:12:58,800 --> 01:13:03,300
things going for it at the time and I think we've all come to that

1252
01:13:03,300 --> 01:13:09,000
realization now most of us know this and and I think serious

1253
01:13:09,000 --> 01:13:13,300
programmers in the game is tree all kind of know that this is true and

1254
01:13:13,300 --> 01:13:18,900
so we're we're I think in that mindset.

1255
01:13:19,100 --> 01:13:22,300
And I think outside of the game industry, everybody already knows this

1256
01:13:22,900 --> 01:13:26,600
just like we do and they've just since they don't have the same kind

1257
01:13:26,600 --> 01:13:28,800
of performance constraints and they don't have the same kind of crust

1258
01:13:28,800 --> 01:13:31,800
pallet come across platform performance.

1259
01:13:31,800 --> 01:13:36,500
Constraints that we do they have just moved to languages that are less

1260
01:13:36,500 --> 01:13:40,900
capable of doing some of that low level stuff because they don't have

1261
01:13:40,900 --> 01:13:41,600
to worry about it.

1262
01:13:41,600 --> 01:13:45,000
So you know they could they can use Ruby if they want to write and a

1263
01:13:45,000 --> 01:13:49,000
game programmer will probably never use Ruby for a serious engine.

1264
01:13:50,500 --> 01:13:56,000
But you know we I think now also appreciate that we need to move on

1265
01:13:56,200 --> 01:13:59,200
and it's just a question of us getting a language that's suitable for

1266
01:13:59,200 --> 01:13:59,800
games.

1267
01:14:00,100 --> 01:14:04,500
Much like a web programmer programming or back-end programming has,

1268
01:14:04,800 --> 01:14:10,000
has made that determination has tried to move to things like go like C

1269
01:14:10,000 --> 01:14:11,900
sharp or even Java or whatever.

1270
01:14:11,900 --> 01:14:15,900
You know people have moved away from C++ to all sorts of other

1271
01:14:15,900 --> 01:14:17,700
languages whether they're good or not.

1272
01:14:18,900 --> 01:14:19,200
And so

1273
01:14:19,500 --> 01:14:22,600
I think in games it's just a question of us.

1274
01:14:25,200 --> 01:14:29,400
Working out that successors language or set of languages but I think

1275
01:14:29,400 --> 01:14:31,900
we know we need to do it and it's unsustainable.

1276
01:14:32,300 --> 01:14:34,800
It is not a sustainable language for game development.

1277
01:14:34,800 --> 01:14:36,200
It's costing us every day.

1278
01:14:36,200 --> 01:14:40,400
It's costing every programming team programmer, Team every day.

1279
01:14:42,700 --> 01:14:47,100
And, you know, it needs to go and I think it will go.

1280
01:14:49,900 --> 01:14:54,200
And, you know, like maybe John blows language will do it, but if it

1281
01:14:54,200 --> 01:14:57,500
doesn't, I think there's other initiatives, you know, I think there's

1282
01:14:57,500 --> 01:14:58,200
other things happening.

1283
01:14:58,200 --> 01:14:59,800
I think also probably,

1284
01:15:00,200 --> 01:15:02,700
I know there's been other people inspired by John to do their own

1285
01:15:02,700 --> 01:15:05,600
languages, so it's getting started right?

1286
01:15:05,600 --> 01:15:08,700
Like the process getting started, but it's just going to take a while

1287
01:15:08,700 --> 01:15:15,600
until we get up to the point where we can.

1288
01:15:18,000 --> 01:15:22,300
Where we have something viable, that's got a solid tool chain and that

1289
01:15:22,300 --> 01:15:23,200
we can start using.

1290
01:15:26,500 --> 01:15:29,200
But yeah, I mean, I can tell you for a fact that I will not be

1291
01:15:29,200 --> 01:15:32,300
programming in C++ by 2026.

1292
01:15:33,500 --> 01:15:37,800
I'm hoping that within about three years will be off of C++ at Molly.

1293
01:15:37,800 --> 01:15:44,500
I'm hoping but you know, who knows that's aspirational.

1294
01:15:58,800 --> 01:16:03,300
And yeah I don't think D like d and go in these sort of languages.

1295
01:16:03,300 --> 01:16:07,900
They're just you know a lot of them don't even have as good as tough

1296
01:16:07,900 --> 01:16:09,500
as John already has in J.

1297
01:16:09,500 --> 01:16:13,200
I write like, I'm just I'm not impressed with a lot of these other

1298
01:16:13,200 --> 01:16:15,100
languages, they just don't seem very good.

1299
01:16:15,400 --> 01:16:17,800
And you're like, if you're gonna go through the trouble of replacing

1300
01:16:17,800 --> 01:16:18,300
see,

1301
01:16:19,800 --> 01:16:22,200
With a new language, it should be baller, right?

1302
01:16:22,200 --> 01:16:25,300
It should be a really good language and like these other languages are

1303
01:16:25,300 --> 01:16:28,000
just not that good, you know, they're, they're pretty minor

1304
01:16:28,600 --> 01:16:34,800
improvements over C or C++ and like, we should at this point have an

1305
01:16:34,800 --> 01:16:36,900
epically better language, right?

1306
01:16:38,000 --> 01:16:41,800
And like the kind of stuff that John shows where it's like, hey, you

1307
01:16:41,800 --> 01:16:45,900
can run anything you could run, run time, you can run a compile time

1308
01:16:46,100 --> 01:16:49,200
that should just be like, if your language can't run,

1309
01:16:49,400 --> 01:16:50,800
Invaders during compilation.

1310
01:16:50,800 --> 01:16:52,300
Why does it even exist?

1311
01:16:52,700 --> 01:16:55,200
It's obvious to me that you should be able to do anything.

1312
01:16:55,200 --> 01:16:58,200
You can do at runtime, you should have been able to do a compile time

1313
01:16:58,300 --> 01:17:01,700
that's just an that is a, it's me and obvious thing that a language

1314
01:17:01,700 --> 01:17:04,300
should be able to do if you can't do that.

1315
01:17:04,500 --> 01:17:06,400
Like I don't even want to hear about it, right?

1316
01:17:06,400 --> 01:17:10,300
Like don't even send me a language that can't do that because it

1317
01:17:10,300 --> 01:17:13,100
already just demonstrates to me that you're not thinking this problem

1318
01:17:13,100 --> 01:17:13,500
through.

1319
01:17:15,300 --> 01:17:17,200
So I have high hopes for j.i.

1320
01:17:17,200 --> 01:17:19,400
because, you know, it seems to be doing a lot of things, right?

1321
01:17:19,400 --> 01:17:20,000
Like that.

1322
01:17:22,500 --> 01:17:24,200
I don't know if it will succeed or not.

1323
01:17:24,200 --> 01:17:26,400
You know, who knows how good it is when we actually start to try and

1324
01:17:26,400 --> 01:17:30,800
use it or whatever, but I think like it's an example of something that

1325
01:17:30,800 --> 01:17:33,800
is clearly going the right direction and I think we'll have more of

1326
01:17:33,800 --> 01:17:34,500
those as well.

1327
01:17:34,500 --> 01:17:39,100
And one of these I think we'll be able to stick and we'll be able to

1328
01:17:39,100 --> 01:17:42,800
move past C++ and

1329
01:17:44,500 --> 01:17:46,300
And off you go, right?

1330
01:17:49,400 --> 01:17:49,800
so,

1331
01:18:08,900 --> 01:18:10,100
And yeah, Miller plexus.

1332
01:18:10,100 --> 01:18:12,800
A lot of things worth noting are made in C++.

1333
01:18:13,200 --> 01:18:15,400
But again you know a lot of that.

1334
01:18:18,000 --> 01:18:20,500
A lot of that's just because it's the only viable low-level

1335
01:18:20,500 --> 01:18:22,700
programming language, right?

1336
01:18:26,200 --> 01:18:29,600
You know, people just don't have options for some reason every time

1337
01:18:29,600 --> 01:18:32,800
people make these like, you know, I don't even understand like when

1338
01:18:32,800 --> 01:18:35,700
they made go, they made it like, you know, almost you have to use a

1339
01:18:35,700 --> 01:18:36,700
garbage collector and stuff.

1340
01:18:36,700 --> 01:18:38,200
I don't know why you would do that, right?

1341
01:18:38,200 --> 01:18:40,600
Like why would you make a new language that you had to use garbage

1342
01:18:40,600 --> 01:18:45,500
bags for doesn't make any sense, but you know, that is just this

1343
01:18:45,500 --> 01:18:47,900
recurring theme that for some reason.

1344
01:18:47,900 --> 01:18:52,400
When people make new languages, they don't consider c-level

1345
01:18:52,400 --> 01:18:54,300
specificity as like a bare minimum.

1346
01:18:54,300 --> 01:18:55,800
In my mind, see,

1347
01:18:56,100 --> 01:18:57,500
Is actually too high.

1348
01:18:57,900 --> 01:19:03,100
Like, in my mind, the level of specificity should basically be

1349
01:19:03,100 --> 01:19:04,000
Assembly Language.

1350
01:19:04,000 --> 01:19:06,800
Like, you should basically be able to program essentially Assembly

1351
01:19:06,800 --> 01:19:10,000
Language at the base level of your language, right?

1352
01:19:10,300 --> 01:19:14,100
And then you should be able to scale up from that as arbitrarily far

1353
01:19:14,100 --> 01:19:15,000
as you want to go.

1354
01:19:15,300 --> 01:19:20,100
But the concept that people introduce languages now, which can't even

1355
01:19:20,500 --> 01:19:21,300
do sea.

1356
01:19:21,300 --> 01:19:23,400
Level specificity for what you want.

1357
01:19:23,400 --> 01:19:25,800
The machine to do, is so strange to me, I

1358
01:19:26,000 --> 01:19:29,200
I don't understand why you would do it because there's no cost to it,

1359
01:19:29,200 --> 01:19:29,800
right?

1360
01:19:29,800 --> 01:19:34,600
It's not like you can't introduce high level features because you have

1361
01:19:34,600 --> 01:19:35,300
low-level features.

1362
01:19:35,300 --> 01:19:38,300
Like that's not how language design works right.

1363
01:19:38,400 --> 01:19:42,900
Language design is scalable like you can have low level constructs and

1364
01:19:42,900 --> 01:19:45,600
build higher level contracts on top of them if you're doing your

1365
01:19:45,600 --> 01:19:47,200
design cleanly, right?

1366
01:19:48,400 --> 01:19:52,600
And so unfortunately everyone always makes these were decisions like

1367
01:19:52,600 --> 01:19:55,800
you know, will make Ruby or whatever well it can

1368
01:19:56,000 --> 01:19:58,100
Do any of the low-level stuff or whatever, right?

1369
01:19:58,100 --> 01:20:00,700
You can't be as specific as see about what you want machine to do.

1370
01:20:00,900 --> 01:20:05,800
It's like that seems like it just carves off a huge set of things.

1371
01:20:05,900 --> 01:20:08,000
You never going to write an operating system in this language.

1372
01:20:08,100 --> 01:20:10,100
You're never going to write a high performance web server in this

1373
01:20:10,100 --> 01:20:10,600
language.

1374
01:20:10,700 --> 01:20:13,000
You're never going to write a game in this language, you never going

1375
01:20:13,000 --> 01:20:16,900
to write mission-critical you know, space code or whatever, right.

1376
01:20:17,500 --> 01:20:18,100
But

1377
01:20:19,800 --> 01:20:22,900
I don't think that's necessary to have a high level programming

1378
01:20:22,900 --> 01:20:23,600
language.

1379
01:20:23,700 --> 01:20:29,500
It just means that you need to think about the low level and establish

1380
01:20:29,500 --> 01:20:33,100
that cleanly as part of your overall design.

1381
01:20:33,300 --> 01:20:37,000
And I wish people would do that because when we're programming games,

1382
01:20:37,000 --> 01:20:39,800
I mean, you see a lot of the code I write, right?

1383
01:20:39,800 --> 01:20:44,800
There's tons of like intricate weird high level code going on and you

1384
01:20:44,800 --> 01:20:47,100
want better constructs than C++.

1385
01:20:47,300 --> 01:20:49,500
In fact, you could make more efficient code.

1386
01:20:49,900 --> 01:20:53,700
Then what I write on handmade hero, a lot of times, if you had more

1387
01:20:53,700 --> 01:20:57,200
efficient, high level constructs that you could work with, right?

1388
01:20:58,200 --> 01:20:59,800
So you want all those high-level contract.

1389
01:21:00,000 --> 01:21:03,400
In programming, you don't want to throw those away just because you

1390
01:21:03,400 --> 01:21:06,200
know, you have a bunch of pieces of code that do need to be

1391
01:21:06,200 --> 01:21:10,000
performance critical and do need to have that specificity, right?

1392
01:21:11,300 --> 01:21:14,700
So you just need people to start taking seriously the concept that you

1393
01:21:14,700 --> 01:21:18,300
need that Spectrum, you just need language designers to start

1394
01:21:18,300 --> 01:21:18,900
thinking.

1395
01:21:19,100 --> 01:21:23,500
Okay, at the base level I want to completely specify the Assembly

1396
01:21:23,500 --> 01:21:24,800
Language for this code.

1397
01:21:24,800 --> 01:21:29,000
I want to be able to go all the way down to 100 percent explicit,

1398
01:21:29,400 --> 01:21:29,800
right?

1399
01:21:30,000 --> 01:21:30,000
Right?

1400
01:21:30,300 --> 01:21:33,700
And I want to scale up from there to get less and less and less

1401
01:21:33,700 --> 01:21:34,500
explicit.

1402
01:21:34,500 --> 01:21:38,800
So, the programmer basically has a Continuum of explicitness.

1403
01:21:39,400 --> 01:21:44,300
So that when they want to nitpick and say, no, this is exactly the

1404
01:21:44,300 --> 01:21:45,300
sequence of instructions.

1405
01:21:45,300 --> 01:21:48,200
I want on this platform at this time, do it this way.

1406
01:21:49,200 --> 01:21:53,900
And then, as they slice away at it, they can remove remove remove,

1407
01:21:53,900 --> 01:21:58,600
remove until they get to a part where it's much more high level and is

1408
01:21:58,600 --> 01:21:59,800
not specifying anything.

1409
01:21:59,900 --> 01:22:03,000
Specific like what instructions to use or anything like that.

1410
01:22:03,000 --> 01:22:05,600
And is operating at a much more abstract level.

1411
01:22:05,600 --> 01:22:08,800
When the programmer doesn't care how it's done, right?

1412
01:22:08,800 --> 01:22:13,000
And you want that range, and I think that's the thing that's really

1413
01:22:13,000 --> 01:22:13,400
missing.

1414
01:22:13,400 --> 01:22:15,900
I think you have the opportunity right now.

1415
01:22:15,900 --> 01:22:21,700
To pick languages at a number of places on that spectrum and get

1416
01:22:21,700 --> 01:22:23,000
locked in, right?

1417
01:22:23,000 --> 01:22:27,600
So, you can pick C C++ and get locked in at a very low level of

1418
01:22:27,600 --> 01:22:28,800
abstractness, right?

1419
01:22:28,800 --> 01:22:29,900
Because even if you throw

1420
01:22:29,900 --> 01:22:34,400
So all the templates all that stuff on it C++ still can't even barely

1421
01:22:34,400 --> 01:22:37,700
do any metaprogramming worth anything right?

1422
01:22:39,900 --> 01:22:43,000
Or you can pick something super crazy like, you know, you could go up

1423
01:22:43,000 --> 01:22:46,500
to something like, you know, a weird list.

1424
01:22:46,500 --> 01:22:50,800
Be sort of language or an MRI Haskell, or who knows what and have all

1425
01:22:50,800 --> 01:22:52,100
kinds of crazy stuff happening.

1426
01:22:52,100 --> 01:22:52,800
Right?

1427
01:22:52,900 --> 01:22:56,700
But forget it if you want to try and do some really specific like

1428
01:22:56,700 --> 01:22:58,800
low-level stuff at that point, right?

1429
01:23:00,000 --> 01:23:03,200
And so you kind of have this weird thing where you can pick places on

1430
01:23:03,200 --> 01:23:05,600
the Spectrum and get locked into that place.

1431
01:23:06,600 --> 01:23:08,400
But I think the language we really want

1432
01:23:08,600 --> 01:23:11,500
Games and perhaps WHY games is so challenging?

1433
01:23:11,500 --> 01:23:15,500
As a language design space is we need the Spectrum.

1434
01:23:15,700 --> 01:23:21,100
We need to be able to do those high-level weird, you know, ml style

1435
01:23:21,100 --> 01:23:22,600
constructs if we want them.

1436
01:23:23,200 --> 01:23:26,300
But then we also need to make sure that we don't have to use them when

1437
01:23:26,300 --> 01:23:28,200
they're inappropriate, right?

1438
01:23:54,600 --> 01:23:55,400
It's cute.

1439
01:23:55,400 --> 01:23:58,300
Do you think the fundamental issue with programming languages is not

1440
01:23:58,300 --> 01:23:59,800
giving access to memory and treating them?

1441
01:24:00,000 --> 01:24:00,800
First class.

1442
01:24:01,100 --> 01:24:03,800
No, although that is a symptom.

1443
01:24:04,600 --> 01:24:09,700
What I think is that you pretty much know today.

1444
01:24:09,700 --> 01:24:14,100
You can look at x64 and you can look at arm right?

1445
01:24:14,400 --> 01:24:18,900
You can see the instruction sets, you know what the CPU does?

1446
01:24:20,000 --> 01:24:23,300
Fundamentally speaking, you need to appreciate the fact that the

1447
01:24:23,300 --> 01:24:26,800
programmers job is to construct Assembly Language.

1448
01:24:27,100 --> 01:24:31,000
That is what they are doing right now.

1449
01:24:31,600 --> 01:24:33,500
Huge classes of programmers like to pretend.

1450
01:24:33,500 --> 01:24:35,800
They're not or don't care or something, right?

1451
01:24:35,800 --> 01:24:40,800
And that's where we get slow code, you know, that's where we get code.

1452
01:24:40,800 --> 01:24:43,900
That takes too long to execute and annoys me and it's, you know, I'm

1453
01:24:43,900 --> 01:24:47,700
sitting around waiting for my Gmail to refresh for some reason and

1454
01:24:47,700 --> 01:24:49,500
it's taking, you know, three seconds.

1455
01:24:49,700 --> 01:24:52,600
No, I have a 1 millisecond ping time to the server, right?

1456
01:24:54,200 --> 01:24:56,700
So, who knows what's going on out there, right?

1457
01:24:57,300 --> 01:25:01,100
But if you actually care about program computer, what you care about

1458
01:25:01,100 --> 01:25:03,300
is the Assembly Language that comes out the other end.

1459
01:25:04,100 --> 01:25:08,700
So what you need to do is you need to give the programmer access to

1460
01:25:08,700 --> 01:25:13,500
that Assembly Language, and control over what it outputs.

1461
01:25:14,600 --> 01:25:17,600
And that includes all the things just say, like treating memory.

1462
01:25:17,600 --> 01:25:21,400
As a first test citizen pointers, you can try to pretend the pointers

1463
01:25:21,400 --> 01:25:22,700
don't exist but guess what?

1464
01:25:22,800 --> 01:25:23,300
Your program.

1465
01:25:23,500 --> 01:25:24,500
Is using them everywhere.

1466
01:25:24,700 --> 01:25:26,400
That is how a CPU works.

1467
01:25:26,400 --> 01:25:30,100
There is no way for it to not use pointers so pretending they don't

1468
01:25:30,100 --> 01:25:31,300
exist, is just dumb.

1469
01:25:31,400 --> 01:25:33,400
It's not a constructive way to do things.

1470
01:25:33,700 --> 01:25:35,400
You need to acknowledge that they exist.

1471
01:25:35,400 --> 01:25:38,500
Give you access to everything the CPU can do.

1472
01:25:39,500 --> 01:25:40,100
Right?

1473
01:25:41,200 --> 01:25:48,300
And then you need to layer on top of that until you get up to high

1474
01:25:48,300 --> 01:25:52,000
level constructs that don't need to think about memory as a first

1475
01:25:52,000 --> 01:25:54,900
class citizen that don't need to think about instructions as

1476
01:25:54,900 --> 01:25:56,700
first-class citizens that don't need to.

1477
01:25:56,700 --> 01:25:59,200
Think about multi-threading as first-class citizens that are just

1478
01:25:59,300 --> 01:26:03,000
abstract ways of stating needs to be done, you need that Continuum

1479
01:26:03,000 --> 01:26:08,400
because that Continuum is what allows you to when you need to optimize

1480
01:26:08,400 --> 01:26:09,000
drop.

1481
01:26:09,300 --> 01:26:11,100
On to the appropriate level.

1482
01:26:12,000 --> 01:26:16,800
Most languages designed today have hard floor limits that are nowhere

1483
01:26:16,800 --> 01:26:19,800
near specifying the Assembly Language.

1484
01:26:19,900 --> 01:26:22,500
They're not even close, right?

1485
01:26:22,500 --> 01:26:25,800
Some of them are so far away from that, that it takes like literally

1486
01:26:25,800 --> 01:26:30,000
thousands of Assembly Language, instructions, just to issue the most

1487
01:26:31,100 --> 01:26:35,300
granular version of their programming language and that's not

1488
01:26:35,300 --> 01:26:36,800
acceptable, right?

1489
01:26:41,900 --> 01:26:44,600
The class mammographic plus actually cursed me out last week because

1490
01:26:44,600 --> 01:26:48,300
Malik is too complicated to use in large programs, it's nuts.

1491
01:26:48,300 --> 01:26:51,000
How Ardent people are about believing obviously wrong things.

1492
01:26:51,400 --> 01:26:54,300
Yep, it is.

1493
01:26:57,900 --> 01:26:58,800
I totally agree.

1494
01:26:58,800 --> 01:26:59,800
It's a sad world out there.

1495
01:27:00,100 --> 01:27:04,100
and the software shows it right, the software is real bad and that's

1496
01:27:04,100 --> 01:27:05,000
because

1497
01:27:06,600 --> 01:27:12,700
People don't take these things seriously anymore, they try to make

1498
01:27:12,700 --> 01:27:16,500
their lives as easy as possible and they don't care.

1499
01:27:16,500 --> 01:27:20,000
Fundamentally what comes out the other side unfortunately, right?

1500
01:27:20,000 --> 01:27:23,900
And so if it means that users are waiting five seconds for result.

1501
01:27:23,900 --> 01:27:26,400
That should have taken 1 millisecond, right?

1502
01:27:27,000 --> 01:27:30,300
They fundamentally don't care because they finished their job quicker.

1503
01:27:30,400 --> 01:27:34,300
Like they didn't have to do as much programming or whatever, right?

1504
01:27:35,100 --> 01:27:35,700
And and

1505
01:27:36,000 --> 01:27:38,800
Just not good but that's fundamentally what people look at.

1506
01:27:38,800 --> 01:27:42,400
And like a lot of times you'll see that you will see huge lectures on

1507
01:27:42,400 --> 01:27:43,800
best practices or something like this.

1508
01:27:43,800 --> 01:27:48,400
And there is not a single mention of the performance implications of

1509
01:27:48,400 --> 01:27:49,400
the things are talking about.

1510
01:27:49,400 --> 01:27:53,400
All they talk about is whether it's saved them time or it reduced.

1511
01:27:53,400 --> 01:27:56,500
How many bugs there were or it was the time to Market got smaller

1512
01:27:56,500 --> 01:27:56,700
whatever.

1513
01:27:56,700 --> 01:27:57,100
Right.

1514
01:27:57,100 --> 01:27:59,900
So the things they're looking at are just fundamentally, not

1515
01:27:59,900 --> 01:28:03,400
performance and honestly, I don't really think you can get away with

1516
01:28:03,400 --> 01:28:03,800
that anywhere.

1517
01:28:03,800 --> 01:28:05,800
I think the only reason that people get away

1518
01:28:06,000 --> 01:28:08,700
With that in the web world is because they don't have competition,

1519
01:28:08,700 --> 01:28:09,400
right?

1520
01:28:09,500 --> 01:28:10,400
Fundamentally speaking.

1521
01:28:10,400 --> 01:28:13,200
If someone was shipping an email server right now that had one

1522
01:28:13,200 --> 01:28:16,200
millisecond response time all the time, everyone would use it.

1523
01:28:17,400 --> 01:28:20,100
Like that would be the end of any other anyone else's email because it

1524
01:28:20,100 --> 01:28:23,100
feels awesome to use things that are that fast, right?

1525
01:28:23,100 --> 01:28:27,000
It feels fantastic and people feel the difference, right?

1526
01:28:27,100 --> 01:28:30,100
But the truth is no one in that space is serving anything like that.

1527
01:28:30,200 --> 01:28:33,900
You can't go get the high performance equivalent to Twitter.

1528
01:28:34,100 --> 01:28:36,700
You can't go get the high performance equivalent to Facebook.

1529
01:28:36,800 --> 01:28:39,200
You can't go get the high performance equivalent to gmail.

1530
01:28:39,300 --> 01:28:42,700
You can't go get the high performance equivalent to Google Maps.

1531
01:28:42,900 --> 01:28:43,700
They don't exist.

1532
01:28:44,600 --> 01:28:45,100
Right.

1533
01:28:46,300 --> 01:28:52,000
And so until people actually are shipping competition in that space,

1534
01:28:52,700 --> 01:28:53,400
right?

1535
01:28:55,600 --> 01:28:57,000
It's it'll skate.

1536
01:28:57,400 --> 01:29:00,800
The reason it doesn't work in the game Space is because you do have

1537
01:29:00,800 --> 01:29:01,500
competition.

1538
01:29:01,700 --> 01:29:06,300
Nobody wants to play a one frames per second game when they can play a

1539
01:29:06,300 --> 01:29:07,700
30 frame per second game.

1540
01:29:07,900 --> 01:29:10,800
And nobody wants to play a 30 frames per second game, when they can

1541
01:29:10,800 --> 01:29:13,900
play a 60 frames per second game, in fact, there are streamers now, I

1542
01:29:13,900 --> 01:29:14,200
think it.

1543
01:29:14,400 --> 01:29:17,400
TotalBiscuit who said he won't even stream 30 frames per second games

1544
01:29:17,400 --> 01:29:18,400
anymore, something like this.

1545
01:29:18,400 --> 01:29:20,400
I don't know if that's really true, but someone was saying something

1546
01:29:20,400 --> 01:29:21,100
that's right.

1547
01:29:21,400 --> 01:29:26,600
So in the game Space, you see all of this pressure for performance to

1548
01:29:26,600 --> 01:29:33,000
matter and hence we can't go use, you know, Ruby or Pearl or something

1549
01:29:33,000 --> 01:29:37,100
like this because throwing away, even if it was great which I don't

1550
01:29:37,100 --> 01:29:39,200
even necessarily think those languages are all that great.

1551
01:29:39,200 --> 01:29:43,600
But even if they were, we can't afford to give up the opportunities to

1552
01:29:43,600 --> 01:29:44,200
optimize.

1553
01:29:44,300 --> 01:29:48,900
That we need right but that doesn't mean we don't want high-level

1554
01:29:48,900 --> 01:29:50,200
languages, we do.

1555
01:29:50,800 --> 01:29:53,100
I don't want to have to keep writing the kinds of codes.

1556
01:29:53,100 --> 01:29:54,200
I write on handmade hero.

1557
01:29:54,200 --> 01:29:57,600
I don't want to have to build linked list myself, but the stupid part

1558
01:29:57,600 --> 01:29:59,800
of it is, is it C plus plus, it features are so bad.

1559
01:30:00,100 --> 01:30:03,300
That usually, I end up being happier, writing a linked list myself

1560
01:30:03,300 --> 01:30:05,800
every time than trying to use templates because they're terrible,

1561
01:30:05,900 --> 01:30:06,500
right?

1562
01:30:08,800 --> 01:30:13,600
And so you get into these situations where it's just like yeah, you're

1563
01:30:13,600 --> 01:30:15,400
damned if you do damned if you don't.

1564
01:30:16,200 --> 01:30:19,900
And so, hopefully what we'll be able to get to now that we're getting

1565
01:30:19,900 --> 01:30:24,200
serious about this sort of thing is that we'll be able to start

1566
01:30:24,200 --> 01:30:26,700
getting a spectrum based language in here.

1567
01:30:26,700 --> 01:30:27,700
Whether it's j.i.

1568
01:30:27,700 --> 01:30:29,900
or something else that allows

1569
01:30:30,000 --> 01:30:36,000
Allows us to have the low-level specificity when we want it and scale

1570
01:30:36,000 --> 01:30:38,700
up to not having it when we don't, right?

1571
01:30:40,000 --> 01:30:40,600
so,

1572
01:30:48,800 --> 01:30:49,200
Trans women.

1573
01:30:49,200 --> 01:30:51,700
This sounds like a good argument for requiring software, engineering

1574
01:30:51,700 --> 01:30:54,800
students to ship a game as one of the requirements for Education maybe

1575
01:30:54,800 --> 01:30:59,300
or just have a hard cap on their performance of something, right?

1576
01:30:59,400 --> 01:31:02,300
So let him write something web related but say it's got to respond in

1577
01:31:02,300 --> 01:31:03,100
one millisecond.

1578
01:31:04,400 --> 01:31:06,500
It gets one millisecond turnaround time, right?

1579
01:31:06,700 --> 01:31:09,800
So you got to respond within the Ping or whatever to Ms?

1580
01:31:09,800 --> 01:31:10,200
Let's say.

1581
01:31:12,200 --> 01:31:16,200
You know, so they can't just they can't they can't even use PHP,

1582
01:31:16,200 --> 01:31:16,500
right?

1583
01:31:16,500 --> 01:31:20,800
Because I think the PHP is like, minimum, turnaround time is probably

1584
01:31:20,800 --> 01:31:21,400
worse than that.

1585
01:31:21,800 --> 01:31:22,300
Maybe not.

1586
01:31:22,300 --> 01:31:24,200
But you know what I mean, right?

1587
01:31:30,000 --> 01:31:30,400
Catch over.

1588
01:31:30,400 --> 01:31:33,700
I do think it's worth moving from to see posotion c99.

1589
01:31:34,100 --> 01:31:37,000
I don't see 99 would be fine for me.

1590
01:31:37,000 --> 01:31:40,800
I don't really care, but other people see some stuff that they like

1591
01:31:40,800 --> 01:31:43,200
and see bus so, you know, your mileage may vary.

1592
01:31:51,400 --> 01:31:53,000
Picking the lesser of two evils here.

1593
01:31:53,000 --> 01:31:55,900
What's your advice between good new emacs and MCS?

1594
01:31:56,000 --> 01:31:59,300
I don't know what MCS is and I don't use going to be Max anymore.

1595
01:31:59,300 --> 01:32:02,400
I use for coder and it is what I would recommend for an editor.

1596
01:32:12,800 --> 01:32:16,000
If guy doesn't work out, will you have to take it into your own hands

1597
01:32:16,000 --> 01:32:16,700
to make a language?

1598
01:32:17,400 --> 01:32:19,100
I already sort of do like, at Molly.

1599
01:32:19,100 --> 01:32:20,300
We have our own custom stuff.

1600
01:32:20,300 --> 01:32:23,900
And like I said, I'm hoping that within three years will be entirely

1601
01:32:23,900 --> 01:32:29,400
on the custom stuff, and we won't be using C++ at all anymore, but I,

1602
01:32:30,000 --> 01:32:33,200
it's kind of a phased thing because we have to shift games the

1603
01:32:33,200 --> 01:32:36,500
meantime, and so I can't afford to just dedicate my time entirely to

1604
01:32:36,500 --> 01:32:40,400
doing that if we have a windfall where one of our games makes a ton of

1605
01:32:40,400 --> 01:32:42,400
money or something, then, you know, I might

1606
01:32:42,500 --> 01:32:42,700
Right.

1607
01:32:43,200 --> 01:32:48,200
But yeah, we will we will either be off of our stuff because we moved

1608
01:32:48,200 --> 01:32:51,700
on to jii or something equivalent or we will just be entirely on our

1609
01:32:51,700 --> 01:32:54,700
own stuff, one of the other, but we definitely will not be on C plus

1610
01:32:54,700 --> 01:32:55,800
plus ten years from now.

1611
01:32:55,800 --> 01:32:59,700
I can tell you that I'm hoping three years but you know, everything

1612
01:32:59,700 --> 01:32:59,800
always

1613
01:33:00,000 --> 01:33:01,200
It's longer than you wish it would.

1614
01:33:01,200 --> 01:33:03,700
So, you know,

1615
01:33:05,400 --> 01:33:07,800
I wouldn't count on it, I'm not counting on it.

1616
01:33:07,800 --> 01:33:11,000
Unfortunately, I wish I could, is there a practical way to use C in

1617
01:33:11,000 --> 01:33:13,100
place of web languages like JavaScript and HTML?

1618
01:33:13,100 --> 01:33:15,600
Is it possible to give them competition on the web?

1619
01:33:16,200 --> 01:33:20,700
Yeah, so like I said, I did this actually recently and it's kind of

1620
01:33:20,700 --> 01:33:21,800
awesome, right?

1621
01:33:21,800 --> 01:33:24,400
I don't know if you've ever seen how long it takes normally to

1622
01:33:24,400 --> 01:33:26,700
subscribe to like a mailing list or something on the web, it's this

1623
01:33:26,700 --> 01:33:29,800
big long process that takes multiple seconds or something where you're

1624
01:33:29,800 --> 01:33:30,400
like waiting in.

1625
01:33:30,400 --> 01:33:32,500
There's look usually a little spinning thing or whatever.

1626
01:33:33,600 --> 01:33:35,000
But I wrote Our

1627
01:33:35,200 --> 01:33:40,000
Revealing the server and see, and that's how long it takes.

1628
01:33:41,400 --> 01:33:42,000
Right?

1629
01:33:42,000 --> 01:33:43,600
It's like instant, you push the button.

1630
01:33:43,600 --> 01:33:47,800
It's like, boom, you're done and

1631
01:33:49,500 --> 01:33:55,600
I think it took me two days to write the email server for a list.

1632
01:33:58,100 --> 01:34:00,400
And it's hilarious, like the thing, we replaced, which Ismail jet

1633
01:34:00,400 --> 01:34:00,600
mail.

1634
01:34:00,600 --> 01:34:03,900
Jet took many seconds to like do it and it was buggy.

1635
01:34:03,900 --> 01:34:04,500
It didn't work.

1636
01:34:04,500 --> 01:34:06,700
Like that's why we replacing the first place as it was like, the code

1637
01:34:06,700 --> 01:34:10,200
was so bad that they messed up the subscriptions for things.

1638
01:34:10,200 --> 01:34:11,500
It was pretty hilarious.

1639
01:34:14,400 --> 01:34:15,100
So yeah.

1640
01:34:16,100 --> 01:34:19,100
And I like I said I think you know if we wanted to I think we could

1641
01:34:19,100 --> 01:34:22,100
just annihilate male jet like if that's if that's what we thought we

1642
01:34:22,100 --> 01:34:22,400
want to do it.

1643
01:34:22,400 --> 01:34:25,600
Molly rocket was like, I'm sure we could take out MailChimp and mail

1644
01:34:25,600 --> 01:34:29,900
Jet and everybody else because I mean, I could probably run a single

1645
01:34:29,900 --> 01:34:32,800
server that would probably be as efficient.

1646
01:34:32,800 --> 01:34:35,700
It's like their entire AWS Farm or whatever the heck they're doing

1647
01:34:35,900 --> 01:34:38,400
because it's mailing list is so simple.

1648
01:34:38,600 --> 01:34:40,300
It's trivially parallelizable.

1649
01:34:40,600 --> 01:34:41,700
It's like

1650
01:34:43,400 --> 01:34:46,300
Almost no back-end processing time, right?

1651
01:34:49,200 --> 01:34:49,700
So yeah.

1652
01:34:49,700 --> 01:34:52,200
I feel like a lot of this stuff is just Amateur hour and if you were

1653
01:34:52,200 --> 01:34:55,400
really serious, you could go totally.

1654
01:34:55,600 --> 01:34:59,500
Just, you know, you could just go into some space like that and you

1655
01:34:59,500 --> 01:35:01,700
could just totally own it because all your stuff would just

1656
01:35:03,100 --> 01:35:03,900
would just annihilate.

1657
01:35:03,900 --> 01:35:05,000
What's in there currently?

1658
01:35:17,400 --> 01:35:19,100
When I started University, we started learning.

1659
01:35:19,100 --> 01:35:19,800
Oh, and Java.

1660
01:35:19,800 --> 01:35:21,700
Do you think that this is part of the problem?

1661
01:35:21,700 --> 01:35:25,900
I'm pretty sure if we'd started learning about Hardware than assembly

1662
01:35:25,900 --> 01:35:28,300
then see, I would have had better programming earlier.

1663
01:35:28,600 --> 01:35:29,200
Yeah.

1664
01:35:33,200 --> 01:35:34,700
I guess what I would say is,

1665
01:35:37,700 --> 01:35:41,400
I think you have to learn a very simple programming language first.

1666
01:35:41,400 --> 01:35:44,100
Like, you know, I the first thing that I learned was basic, right?

1667
01:35:44,100 --> 01:35:47,200
Which doesn't have object-oriented it at all, either, but it certainly

1668
01:35:47,200 --> 01:35:48,500
doesn't have, like Assembly Language.

1669
01:35:48,500 --> 01:35:50,300
You stuff in it either, right?

1670
01:35:50,600 --> 01:35:53,800
So I think, you know, to bootstrap, your first language needs to be

1671
01:35:53,800 --> 01:35:56,700
whatever is simple and allows you to get some traction and it

1672
01:35:56,700 --> 01:35:59,800
encourages you to learn logo even

1673
01:36:00,100 --> 01:36:04,500
Anything but yes I think that starting with object orientation is just

1674
01:36:04,500 --> 01:36:06,900
bad because it's kind of a throwaway thing that I don't really think

1675
01:36:06,900 --> 01:36:10,200
is useful and so I think yeah, once you're ready to start taking the

1676
01:36:10,200 --> 01:36:12,800
leap into more serious program, I think Hardware assembly.

1677
01:36:12,800 --> 01:36:17,000
See very good things to learn because you start to learn like how code

1678
01:36:17,000 --> 01:36:20,000
actually works on a computer and then build up your higher level

1679
01:36:20,000 --> 01:36:20,600
language class with there.

1680
01:36:20,600 --> 01:36:23,900
So you can see what you are losing and make sure you don't lose

1681
01:36:23,900 --> 01:36:24,700
important things.

1682
01:36:24,700 --> 01:36:27,500
When you choose a higher level language, construct for the problem at

1683
01:36:27,500 --> 01:36:27,900
hand,

1684
01:36:37,500 --> 01:36:41,000
So Risco, how high is getting rid of Windows that H and standard

1685
01:36:41,000 --> 01:36:42,800
libraries on your to-do list?

1686
01:36:44,100 --> 01:36:48,900
Are you talking about on handmade hero or at work?

1687
01:37:07,300 --> 01:37:10,500
So you still need to convert to HTML, JavaScript etcetera.

1688
01:37:10,500 --> 01:37:12,800
But you do, your main development.

1689
01:37:12,800 --> 01:37:13,200
See

1690
01:37:16,200 --> 01:37:18,500
No, it's a back.

1691
01:37:18,500 --> 01:37:19,800
End is completely written in C.

1692
01:37:20,500 --> 01:37:25,600
The hilarious part is is I didn't even do any performance operation in

1693
01:37:25,600 --> 01:37:30,000
fact, the server isn't even compiled with optimizations on.

1694
01:37:31,300 --> 01:37:35,100
And it runs as a cgi-bin, it's not even memory resident so it has to

1695
01:37:35,100 --> 01:37:36,100
load the executable.

1696
01:37:39,200 --> 01:37:41,800
And it's still like 10:00 10:00.

1697
01:37:41,800 --> 01:37:44,500
I don't know how many times a thousand times faster than the male jet

1698
01:37:44,500 --> 01:37:44,800
one.

1699
01:37:45,000 --> 01:37:47,000
I don't know what the fuck people do.

1700
01:37:47,400 --> 01:37:49,100
Who I sure am not supposed to swear.

1701
01:37:49,900 --> 01:37:51,100
We're still technically on stream.

1702
01:37:51,100 --> 01:37:54,500
I don't know what people do when they write these things.

1703
01:37:54,600 --> 01:38:00,200
I have no idea because that is not even an optimized program, it's

1704
01:38:00,200 --> 01:38:01,900
completely unoptimized program.

1705
01:38:02,200 --> 01:38:05,300
I could make it 10 times, 100 times probably faster.

1706
01:38:06,500 --> 01:38:07,400
Then what it is right now.

1707
01:38:07,400 --> 01:38:11,400
Probably even more than that, but it's so much faster than everything

1708
01:38:11,400 --> 01:38:11,600
else.

1709
01:38:11,600 --> 01:38:13,600
I didn't even try, I was just like, oh my God.

1710
01:38:21,200 --> 01:38:21,700
So risk.

1711
01:38:21,700 --> 01:38:24,200
Oh yes, getting rid of sterile, Arizona, Windows a Chanel, okay?

1712
01:38:25,000 --> 01:38:27,700
I don't know that we'll ever bother getting rid of Windows .h on

1713
01:38:27,700 --> 01:38:30,800
handmade hero because I don't there's I don't know that I ever said

1714
01:38:30,800 --> 01:38:34,300
that I would do that for sure and it's not super necessary.

1715
01:38:35,600 --> 01:38:37,100
Getting rid of the standard libraries.

1716
01:38:37,300 --> 01:38:39,900
We only use about five functions from there right now.

1717
01:38:40,300 --> 01:38:43,000
So it's not very high in the list at all.

1718
01:38:43,100 --> 01:38:47,300
It's just a trig functions that need to be replaced, sine cosine, and,

1719
01:38:47,300 --> 01:38:48,300
and round, and seal.

1720
01:38:48,300 --> 01:38:49,000
That's about it.

1721
01:38:49,800 --> 01:38:50,500
So someday

1722
01:38:50,700 --> 01:38:54,200
Take a break and just do a few math routines, but that's the only one

1723
01:38:55,100 --> 01:38:55,800
that's all we need.

1724
01:38:55,800 --> 01:38:56,700
Is the master teens.

1725
01:38:56,700 --> 01:38:59,800
We don't use anything else, so so

1726
01:39:00,200 --> 01:39:02,200
I don't consider that particular high priority because like I said, we

1727
01:39:02,200 --> 01:39:03,600
don't really hard.

1728
01:39:03,600 --> 01:39:05,300
We basically don't use anything right now.

1729
01:39:05,300 --> 01:39:10,300
We're almost standard library free, but eventually we will have to

1730
01:39:10,300 --> 01:39:14,200
write the Cindy versions of those math routines and then we can pull

1731
01:39:14,200 --> 01:39:16,100
the stick then we can pull the library's completely

1732
01:39:17,900 --> 01:39:21,100
What do you think about the new coffee Lake processor announcement?

1733
01:39:21,100 --> 01:39:23,300
Seems like Intel is losing it.

1734
01:39:24,600 --> 01:39:26,800
I have not heard about that.

1735
01:39:26,900 --> 01:39:28,800
Should I be terrify?

1736
01:39:31,200 --> 01:39:34,000
Do you think tdd is efficient for a learning tool?

1737
01:39:34,800 --> 01:39:35,500
I don't know.

1738
01:39:36,800 --> 01:39:39,700
It's got some benefits, I'm not sure.

1739
01:39:40,100 --> 01:39:40,800
What is your opinion?

1740
01:39:40,800 --> 01:39:44,300
High level features that are predicated on the unobservable, T of

1741
01:39:44,300 --> 01:39:45,900
various low-level details?

1742
01:39:48,600 --> 01:39:51,600
Well, you know, again like I said, I think as long as they're

1743
01:39:51,600 --> 01:39:53,200
optional, it's not so bad.

1744
01:39:56,000 --> 01:39:58,300
So, I know Crown, how is it even possible to remove windows, that H?

1745
01:39:58,300 --> 01:40:01,100
I thought that was the lowest possible Choice without writing a noise

1746
01:40:01,100 --> 01:40:01,600
yourself.

1747
01:40:02,200 --> 01:40:02,600
Yes.

1748
01:40:02,600 --> 01:40:05,500
Well, so when you talk about Ruby winners, a nature not talking about

1749
01:40:05,500 --> 01:40:08,400
removing Windows, obviously, if you're running on Windows, you have to

1750
01:40:08,400 --> 01:40:09,100
call windows.

1751
01:40:09,100 --> 01:40:12,600
So yes, there is no way to get any lower than what we're at right now,

1752
01:40:12,900 --> 01:40:15,700
but you don't actually have to include Windows of H.

1753
01:40:15,700 --> 01:40:19,100
What you can do is just take the windows functions, you actually call

1754
01:40:19,300 --> 01:40:25,700
and you can just copy your, the ones you want into your own.

1755
01:40:25,900 --> 01:40:28,300
All and then be done and then you don't have as much.

1756
01:40:28,400 --> 01:40:30,500
It doesn't take as much compile time because doesn't have to include

1757
01:40:30,500 --> 01:40:31,800
all those ridiculous Windows headers.

1758
01:40:31,800 --> 01:40:33,500
It only has the few that you actually need.

1759
01:40:35,500 --> 01:40:38,100
So, yes, there's no way, you know, if you're running on Windows, you

1760
01:40:38,100 --> 01:40:38,800
have to call windows.

1761
01:40:38,800 --> 01:40:44,600
So you won't get rid of that, but you can avoid including their header

1762
01:40:44,600 --> 01:40:46,100
files because all you need is the function.

1763
01:40:46,100 --> 01:40:46,700
Signatures,

1764
01:40:55,500 --> 01:40:57,300
Have you done any JavaScript programming?

1765
01:40:57,600 --> 01:40:58,300
Yes.

1766
01:40:58,500 --> 01:41:02,400
In fact, I've done a bunch of JavaScript programming.

1767
01:41:02,500 --> 01:41:04,400
I don't like it, but I've done it.

1768
01:41:11,700 --> 01:41:15,700
Policymakers, you know, so it was 10, nanometer for low Performance

1769
01:41:15,700 --> 01:41:22,400
Machine and 14 nanometer for high-end, but more cores.

1770
01:41:25,100 --> 01:41:25,500
Hmm.

1771
01:41:27,200 --> 01:41:30,000
oh wait, so you're saying that the process

1772
01:41:32,500 --> 01:41:34,600
the, the process is,

1773
01:41:37,000 --> 01:41:38,100
A smaller.

1774
01:41:39,200 --> 01:41:44,400
It's a die shrink for the low perf but not for the hype perf.

1775
01:41:46,000 --> 01:41:47,300
I guess I'm not sure.

1776
01:41:47,300 --> 01:41:48,300
I'll have to look at it.

1777
01:41:49,500 --> 01:41:52,300
Shawn I know has his own file for just the windows function

1778
01:41:52,300 --> 01:41:52,600
prototypes.

1779
01:41:52,600 --> 01:41:55,500
He uses I've tried this and see and it worked practically flawlessly.

1780
01:41:55,500 --> 01:41:56,400
But I've had a problem.

1781
01:41:56,400 --> 01:41:57,700
Getting it to work in CBP.

1782
01:41:58,000 --> 01:41:59,200
Do anything about that?

1783
01:42:00,000 --> 01:42:01,800
Help me or should try the form.

1784
01:42:02,200 --> 01:42:08,000
Well, I've never had a problem with it and I compiled in CPP on at

1785
01:42:08,000 --> 01:42:13,400
work and I don't use any headers of any kind and I've never had a

1786
01:42:13,400 --> 01:42:14,000
problem with that.

1787
01:42:14,000 --> 01:42:17,200
I just use have my own prototypes.

1788
01:42:19,900 --> 01:42:22,100
Don't forget, need to put an extra in see around them.

1789
01:42:23,200 --> 01:42:26,700
Right, you need extern quote, see quote and then a bracket, and then

1790
01:42:26,700 --> 01:42:27,800
you can go, right?

1791
01:42:28,300 --> 01:42:29,300
So don't forget that.

1792
01:42:35,400 --> 01:42:37,600
Have you considered getting a team together and maybe making new

1793
01:42:37,600 --> 01:42:39,100
language doing it the right way?

1794
01:42:40,500 --> 01:42:45,100
Well, you know, I like I said I don't really know it's not necessarily

1795
01:42:45,100 --> 01:42:47,800
my area of expertise and I don't really know that I'm going to have to

1796
01:42:47,800 --> 01:42:51,300
you know, like for we don't know what's going to happen with Jay.

1797
01:42:51,300 --> 01:42:54,200
I maybe it's great and just works.

1798
01:42:54,300 --> 01:42:55,900
And then why would I bother right?

1799
01:42:55,900 --> 01:42:57,200
Like, you know,

1800
01:42:59,400 --> 01:43:03,300
We don't know that that that the successor to see much less isn't

1801
01:43:03,300 --> 01:43:04,400
already here, right?

1802
01:43:04,400 --> 01:43:05,200
So, so we

1803
01:43:07,000 --> 01:43:09,400
I have a ton of stuff to do obviously, right?

1804
01:43:09,400 --> 01:43:10,100
And so,

1805
01:43:11,100 --> 01:43:13,800
Until I have a little bit more freedom to explore stuff like that.

1806
01:43:13,800 --> 01:43:17,200
I certainly am not going to rush into try and be the person who does

1807
01:43:17,200 --> 01:43:21,000
that when there's already capable people trying some things that area.

1808
01:43:21,000 --> 01:43:22,800
And so, I'd rather see if they succeed first.

1809
01:43:22,800 --> 01:43:26,100
Because if they succeed, then, then we're done, right?

1810
01:43:26,100 --> 01:43:30,100
I mean, I don't need to be involved in that.

1811
01:43:35,800 --> 01:43:38,500
I am currently writing the renderer for my own engine, and I don't

1812
01:43:38,500 --> 01:43:41,100
know if I should future-proof it by writing it in, Vulcan are sick

1813
01:43:41,100 --> 01:43:42,200
with opengl 4.3.

1814
01:43:42,200 --> 01:43:44,700
Do you have any opinions on the importance of multi-threading for

1815
01:43:44,700 --> 01:43:45,100
rendering?

1816
01:43:45,500 --> 01:43:49,200
Yeah, I guess what I would say is multi-threading is incredibly

1817
01:43:49,200 --> 01:43:51,800
important for rendering but if you want to you can just write in

1818
01:43:51,800 --> 01:43:54,100
opengl 4.5 and be done with it.

1819
01:43:54,400 --> 01:43:57,000
Opengl 4.5 has lots of multi-threading effects because better

1820
01:43:57,000 --> 01:44:01,500
multi-threading the Vulcan if you want in terms of, if you use

1821
01:44:01,500 --> 01:44:04,400
extensions for example, Envy command list,

1822
01:44:04,700 --> 01:44:06,200
Is fantastic for multi-threading.

1823
01:44:07,200 --> 01:44:10,000
So you have some options, the problem, the thing that I'm worried

1824
01:44:10,000 --> 01:44:11,700
about is that I would say.

1825
01:44:11,700 --> 01:44:14,900
Opengl 4.5 is much better than Vulcan in most ways.

1826
01:44:14,900 --> 01:44:17,700
Opengl 4.5 with extensions, is much better at the problem is, I don't

1827
01:44:17,700 --> 01:44:21,300
know how well it will be supported if vendors decide that Vulcan is

1828
01:44:21,300 --> 01:44:21,800
the way to go.

1829
01:44:21,800 --> 01:44:24,100
And that's where they put all their time, then we're just screwed,

1830
01:44:24,300 --> 01:44:24,800
right?

1831
01:44:25,200 --> 01:44:26,400
And there's nothing we can do about it.

1832
01:44:26,400 --> 01:44:28,500
We're going to all have to write Vulcan, even though it's not

1833
01:44:28,500 --> 01:44:32,800
particularly well-designed API, opengl 4.5 is a lot closer to a good

1834
01:44:32,800 --> 01:44:34,400
design, a pi, it's still not great.

1835
01:44:34,500 --> 01:44:38,800
But it's better than Vulcan, but I don't know how well supported it

1836
01:44:38,800 --> 01:44:39,200
will be.

1837
01:44:39,200 --> 01:44:43,800
And it still has the old Legacy context crap, that that is not good,

1838
01:44:44,500 --> 01:44:47,600
and I don't know if they'll be willing to get rid of that.

1839
01:44:47,900 --> 01:44:48,900
So it's really too bad.

1840
01:44:48,900 --> 01:44:49,000
What?

1841
01:44:49,000 --> 01:44:51,300
I wish they would have done is not done Vulcan.

1842
01:44:51,500 --> 01:44:55,700
I wish they would have taken opengl 4.5 removed, a ton of the stuff,

1843
01:44:55,700 --> 01:44:58,700
that's not a zdo and removed context.

1844
01:44:58,700 --> 01:44:59,400
Completely

1845
01:45:00,100 --> 01:45:02,300
That opengl 5 because I think that would have been great.

1846
01:45:02,300 --> 01:45:04,900
I think they would have a real good API instead.

1847
01:45:04,900 --> 01:45:07,100
Now we got this ridiculous Vulcan thing, sitting around.

1848
01:45:07,100 --> 01:45:08,400
I have no idea why it's even there.

1849
01:45:08,400 --> 01:45:09,400
It's not useful.

1850
01:45:12,300 --> 01:45:16,000
I don't I I wish Vulcan would just go away.

1851
01:45:16,000 --> 01:45:17,700
Honestly I don't think it's good.

1852
01:45:17,800 --> 01:45:20,400
I think it's just a bad API.

1853
01:45:21,100 --> 01:45:22,400
I don't really have anything else to say.

1854
01:45:22,400 --> 01:45:26,400
Other than that, I think opengl 4.5 is way closer to a good API.

1855
01:45:26,400 --> 01:45:29,800
I just think I think you could just get rid of a lot of stuff from it.

1856
01:45:30,000 --> 01:45:34,600
It and make a few targeted additions, and I think you'd be, you'd have

1857
01:45:34,600 --> 01:45:37,700
a really great high performance API, that does everything the falcon

1858
01:45:37,700 --> 01:45:38,200
can do.

1859
01:45:38,200 --> 01:45:42,100
But without all of the really bad sort of artifact, you stuff

1860
01:45:43,800 --> 01:45:45,300
Lexis remove context for opengl.

1861
01:45:45,300 --> 01:45:45,800
What do you mean?

1862
01:45:46,100 --> 01:45:50,200
What I mean, is you want opengl to be effectively stateless for the

1863
01:45:50,200 --> 01:45:51,000
most part.

1864
01:45:51,100 --> 01:45:52,700
And right now, it's very stateful.

1865
01:45:52,800 --> 01:45:56,600
You have this concept that you've you make contacts current and then

1866
01:45:56,600 --> 01:45:58,400
there's all this state that's stored on the context.

1867
01:45:58,400 --> 01:46:00,800
And that's just not constructive.

1868
01:46:00,800 --> 01:46:01,800
Like, you don't really want that.

1869
01:46:02,300 --> 01:46:04,700
What you want to be able to do is just build up things in memory.

1870
01:46:05,000 --> 01:46:07,500
And then you really just want kind of one call, which is like execute

1871
01:46:07,500 --> 01:46:09,900
this memory, right?

1872
01:46:10,400 --> 01:46:12,900
And they've got a lot of that in opengl 4.5.

1873
01:46:13,100 --> 01:46:13,300
Plus

1874
01:46:13,500 --> 01:46:14,000
Tensions now.

1875
01:46:14,000 --> 01:46:16,900
So for example, you could just build up MV command lists, execute them

1876
01:46:16,900 --> 01:46:20,900
and there's no real estate associated with them and so really you just

1877
01:46:21,400 --> 01:46:25,800
build up your memories sets and you batch them in off you go, right?

1878
01:46:26,100 --> 01:46:30,000
And that's what you want because the closer you get to that the more

1879
01:46:30,000 --> 01:46:34,500
you get away from threading restrictions, which is what you want

1880
01:46:34,900 --> 01:46:35,800
opengl right now.

1881
01:46:35,800 --> 01:46:39,100
Because of the make contacts thing is really, really tough to

1882
01:46:39,100 --> 01:46:43,300
multi-thread properly and it just

1883
01:46:43,400 --> 01:46:45,100
Needs to go away, right?

1884
01:46:45,300 --> 01:46:46,500
It just needs to go away.

1885
01:46:48,000 --> 01:46:49,200
There's no need for it anymore.

1886
01:46:49,300 --> 01:46:52,600
They've replaced almost all of the things that you need to context for

1887
01:46:52,600 --> 01:46:54,400
with better systems.

1888
01:46:55,100 --> 01:46:59,400
But there's just a few cases in terms of like which display you're

1889
01:46:59,400 --> 01:47:04,200
targeting and how you ever just call through it that just require you

1890
01:47:04,200 --> 01:47:07,600
to still use them and that's like a really big problem, right?

1891
01:47:07,600 --> 01:47:09,000
So we just got to get rid of that.

1892
01:47:09,000 --> 01:47:11,700
So I'd say opengl 5.0 should have, it should be that right?

1893
01:47:11,800 --> 01:47:13,100
It should be no more context.

1894
01:47:13,100 --> 01:47:13,300
There's no

1895
01:47:13,500 --> 01:47:16,200
After that, there's just one call to call us execute memory.

1896
01:47:16,200 --> 01:47:20,800
The memory has an own format where you write in the things you want to

1897
01:47:20,800 --> 01:47:22,900
do and that's the API, right?

1898
01:47:23,500 --> 01:47:24,500
It would be baller.

1899
01:47:27,200 --> 01:47:30,800
So, you know, that would be my wish is that and then we can get rid of

1900
01:47:30,800 --> 01:47:33,900
Vulcan and never have to hear about it again because it's just a giant

1901
01:47:33,900 --> 01:47:36,700
monstrosity that I think distracts and takes implementation time away

1902
01:47:36,700 --> 01:47:39,600
from the other targets.

1903
01:47:50,000 --> 01:47:52,400
Interesting that you and John Blow disagree about the usefulness of a

1904
01:47:52,400 --> 01:47:53,200
zdo.

1905
01:47:56,400 --> 01:47:59,800
a CDO is like, absolutely

1906
01:48:00,000 --> 01:48:06,100
% critical and and it not not because the performance actually

1907
01:48:06,300 --> 01:48:10,800
performance is one reason that a CDO is is interesting, but the real

1908
01:48:10,800 --> 01:48:15,800
reason is, is robustness, right.

1909
01:48:17,700 --> 01:48:22,600
The real reason is robustness, and you just don't get that without a

1910
01:48:22,600 --> 01:48:27,800
video when you define a large driver surface, right?

1911
01:48:28,500 --> 01:48:29,900
It becomes much more difficult.

1912
01:48:30,000 --> 01:48:33,300
Cult to a for the programmer to know whether they're using that

1913
01:48:33,300 --> 01:48:37,100
drivers surface effectively and in a bug free Manner and also it

1914
01:48:37,100 --> 01:48:40,700
becomes very, very difficult for the driver to implement what it needs

1915
01:48:40,700 --> 01:48:43,400
to implement in order to execute things efficiently, right?

1916
01:48:44,300 --> 01:48:47,700
And so typically what you'll see happen, often times is you'll see.

1917
01:48:47,700 --> 01:48:50,600
Even in a scenario where you have a large driver service, what ends up

1918
01:48:50,600 --> 01:48:53,700
happening is the driver, buffer is a ton of stuff so it can figure out

1919
01:48:53,700 --> 01:48:55,800
what you're actually doing and then executes it, right?

1920
01:48:55,800 --> 01:48:58,500
So what we want to do is move away from that to a system where you're

1921
01:48:58,500 --> 01:48:59,800
just prepping the memory.

1922
01:49:00,000 --> 01:49:03,200
It has all the commands you need to do you dump that off to the card

1923
01:49:03,300 --> 01:49:06,400
and to the driver and it goes, right?

1924
01:49:06,400 --> 01:49:09,400
Because not only does that let you be completely thread thread.

1925
01:49:09,400 --> 01:49:10,200
It is highly thread.

1926
01:49:10,200 --> 01:49:14,000
As you want, you no longer have any thread issues, you'll ever have

1927
01:49:14,000 --> 01:49:15,700
any words, think problems and all that stuff.

1928
01:49:15,700 --> 01:49:18,800
You just go and prep everything you want and when you're ready to prep

1929
01:49:18,800 --> 01:49:21,100
you kick off and then all you need is notifications of when those

1930
01:49:21,100 --> 01:49:22,900
kickoffs are complete so that you can reclaim the memory.

1931
01:49:22,900 --> 01:49:24,200
That's all you need to do right?

1932
01:49:24,300 --> 01:49:25,600
And it's very, very clean.

1933
01:49:25,600 --> 01:49:28,200
It's extremely efficient really, really important.

1934
01:49:30,200 --> 01:49:36,500
And so I see the azd zä ZD o design is being crucial.

1935
01:49:37,500 --> 01:49:42,000
It doesn't go as far as I want it to yet but it's getting there and

1936
01:49:43,900 --> 01:49:45,800
You know, I think it's a very good thing.

1937
01:49:47,200 --> 01:49:49,300
And we both agreed that we should just have a stable I say and not

1938
01:49:49,300 --> 01:49:51,000
even bother putting a GPS or an API, you are.

1939
01:49:51,000 --> 01:49:51,600
Absolutely.

1940
01:49:51,800 --> 01:49:55,000
And that's one of the reasons that I think a CTO is so constructive as

1941
01:49:55,000 --> 01:49:59,200
we go towards more and more easy to do, that becomes an icy, right?

1942
01:49:59,500 --> 01:50:03,100
If you literally have zero driver overhead, meaning that I just make a

1943
01:50:03,100 --> 01:50:07,200
call and that thing sends men coming down to the card to execute that

1944
01:50:07,200 --> 01:50:11,200
effectively has now been a data format that is a stabilizer, right?

1945
01:50:11,500 --> 01:50:15,000
So easy to do is is basically a step to stable.

1946
01:50:15,000 --> 01:50:16,400
I say, right?

1947
01:50:17,000 --> 01:50:21,100
Because the more driver overhead, you have, the less specified.

1948
01:50:21,300 --> 01:50:22,800
What is happening on the card?

1949
01:50:24,400 --> 01:50:25,700
The less specified it is.

1950
01:50:25,700 --> 01:50:28,400
What is actually happening on the card by definition, right?

1951
01:50:28,400 --> 01:50:30,300
Because the driver is doing more stuff.

1952
01:50:42,200 --> 01:50:44,700
Do you think dx12 is going to be a big improvement over 11?

1953
01:50:44,900 --> 01:50:45,400
I don't know.

1954
01:50:45,400 --> 01:50:47,500
I don't program DirectX really hardly at all.

1955
01:50:51,100 --> 01:50:51,500
so,

1956
01:50:54,200 --> 01:50:59,400
all right, this has been a very long queue a so I'm done.

1957
01:51:00,100 --> 01:51:01,000
I'm spent.

1958
01:51:01,000 --> 01:51:01,800
I need a drink.

1959
01:51:04,300 --> 01:51:07,200
Or as Microsoft would say, I need lots of dranks.

1960
01:51:11,300 --> 01:51:13,100
All right, thank you, everyone for joining me for another episode of

1961
01:51:13,100 --> 01:51:13,600
handmade here.

1962
01:51:13,600 --> 01:51:14,800
It's been a pleasure coding with you.

1963
01:51:14,800 --> 01:51:18,400
As always, if you would like to follow along at home, you can always

1964
01:51:18,400 --> 01:51:21,900
pre-order the game on handmade hero dot-org and it comes with source

1965
01:51:21,900 --> 01:51:24,500
code so you can play around with it at home.

1966
01:51:24,800 --> 01:51:25,900
And follow along the series.

1967
01:51:25,900 --> 01:51:27,000
We also have forms that you can go to.

1968
01:51:27,000 --> 01:51:29,400
If you want to ask questions of patreon page, you can go to.

1969
01:51:29,400 --> 01:51:32,800
If you would like to support our video series, a schedule bot that

1970
01:51:32,800 --> 01:51:35,800
will tell you when we are alive and an episode guide.

1971
01:51:36,100 --> 01:51:39,900
If you would like to catch up on old stuff, that is the last stream

1972
01:51:39,900 --> 01:51:40,300
for the week.

1973
01:51:40,400 --> 01:51:40,900
I will be

1974
01:51:41,100 --> 01:51:44,700
A off, as you can see, nothing scheduled.

1975
01:51:44,700 --> 01:51:48,200
I will be off till next week, but we will be back working on particle

1976
01:51:48,200 --> 01:51:51,700
systems next week that is about it.

1977
01:51:51,700 --> 01:51:55,900
Until then have fun programming, folks, I will see you on the

1978
01:51:55,900 --> 01:51:56,200
internet.

1979
01:51:56,200 --> 01:51:57,200
Take it easy, everyone.

