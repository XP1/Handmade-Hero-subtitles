1
00:00:00,000 --> 00:00:00,600
Started again.

2
00:00:00,600 --> 00:00:04,400
So we have a nice clean one to post to the YouTube archive.

3
00:00:04,600 --> 00:00:10,100
Hello everyone and welcome to the 11th day of handmade hero the series

4
00:00:10,100 --> 00:00:13,800
where we code a complete professional quality game from scratch right

5
00:00:13,800 --> 00:00:14,700
before your very eyes.

6
00:00:14,700 --> 00:00:17,000
And we explained every last little bit of it.

7
00:00:17,500 --> 00:00:19,500
For those of you want to follow along at home.

8
00:00:19,500 --> 00:00:22,900
You will know everything that goes into it and why.

9
00:00:23,000 --> 00:00:25,600
Now, we have some exciting news.

10
00:00:25,800 --> 00:00:27,500
There's a little bit of a caveat to the news.

11
00:00:27,500 --> 00:00:29,800
We have some exciting news people have been asking.

12
00:00:30,000 --> 00:00:33,000
For a forums and official forums where they can post things and

13
00:00:33,000 --> 00:00:34,500
discuss stuff with other members Community.

14
00:00:34,500 --> 00:00:35,800
It is finally ready.

15
00:00:37,200 --> 00:00:38,000
I won't say that.

16
00:00:38,000 --> 00:00:38,900
It's good yet.

17
00:00:38,900 --> 00:00:41,400
My web skills are blow.

18
00:00:41,400 --> 00:00:43,000
I am not a web programmer.

19
00:00:43,000 --> 00:00:45,800
And I also tend to get very frustrated anytime.

20
00:00:45,800 --> 00:00:50,100
I do anything with the web and there's a lot of cursing and this sort

21
00:00:50,100 --> 00:00:54,000
of thing and so I can't promise you that this site is going to be

22
00:00:54,000 --> 00:00:54,800
great overnight.

23
00:00:54,800 --> 00:00:57,800
It'll probably take a while to air at The Kinks, but if you go to

24
00:00:57,800 --> 00:00:59,900
handmade hero dot Oregon, hit the old.

25
00:01:00,000 --> 00:01:01,000
Key to refresh it.

26
00:01:01,000 --> 00:01:04,500
You will notice that the link that used to say email a question where

27
00:01:04,500 --> 00:01:06,000
you just had to send it directly to me.

28
00:01:06,200 --> 00:01:10,600
Now actually, has a news and forums button that you can click on and

29
00:01:10,600 --> 00:01:13,800
when you go there, you will go to this little handmade hero Central

30
00:01:13,800 --> 00:01:14,200
thing.

31
00:01:14,700 --> 00:01:16,900
And it's got a little news that shows you like the schedule.

32
00:01:16,900 --> 00:01:18,100
Now, that's up there.

33
00:01:18,100 --> 00:01:19,900
So if you want to know what the schedule going to be for the week, you

34
00:01:19,900 --> 00:01:20,800
can get to that.

35
00:01:21,000 --> 00:01:24,500
There's an episode guide that was put together by some awesome folks.

36
00:01:24,800 --> 00:01:27,900
Jason Bennett Abner, climb, Brea, Matthew, vandevander, Gustavo,

37
00:01:27,900 --> 00:01:28,300
Chavez.

38
00:01:28,300 --> 00:01:29,800
I don't know how to pronounce their names correctly.

39
00:01:29,900 --> 00:01:30,700
So I apologize for that.

40
00:01:30,700 --> 00:01:32,400
These are people that I only know over the Internet.

41
00:01:32,400 --> 00:01:34,100
I've never heard them even say their name.

42
00:01:34,500 --> 00:01:35,700
That is how nice they are.

43
00:01:35,700 --> 00:01:36,900
They put this together for you.

44
00:01:36,900 --> 00:01:37,900
And this is pretty awesome.

45
00:01:37,900 --> 00:01:38,200
You should.

46
00:01:38,200 --> 00:01:39,700
Check out the work they've done.

47
00:01:39,700 --> 00:01:40,500
It's amazing.

48
00:01:40,600 --> 00:01:42,200
You can jump to one of these.

49
00:01:42,400 --> 00:01:46,800
One of these things that one of the videos from a day and they've made

50
00:01:46,800 --> 00:01:49,200
the stuff where they put notes in here when there's notes for the

51
00:01:49,200 --> 00:01:54,800
stream, but they put basically like time coded information where you

52
00:01:54,800 --> 00:01:55,900
can just click on the thing.

53
00:01:55,900 --> 00:01:58,200
You want to know and it jumps to where it is in the Stream.

54
00:01:58,200 --> 00:01:59,200
So it's pretty amazing.

55
00:01:59,200 --> 00:01:59,800
The episode guide.

56
00:02:00,000 --> 00:02:00,600
Amazing.

57
00:02:00,700 --> 00:02:03,800
They've done some amazing work there, and I cannot thank them enough

58
00:02:03,800 --> 00:02:04,400
for that.

59
00:02:04,500 --> 00:02:07,300
And then, of course, there's a coding resources section that you've

60
00:02:07,300 --> 00:02:09,699
got that we're going to be putting stuff in, like, recommendations

61
00:02:09,699 --> 00:02:10,199
from people.

62
00:02:10,199 --> 00:02:12,600
And like, if you want to know how to get things running on Linux, for

63
00:02:12,600 --> 00:02:16,100
example, David GAO has put together an awesome guide for that complete

64
00:02:16,100 --> 00:02:16,900
with source code.

65
00:02:17,100 --> 00:02:20,400
And then finally, there's code discussion that you can click on and it

66
00:02:20,400 --> 00:02:23,800
is a full-on old school web forum, and I'll be trying to clean up some

67
00:02:23,800 --> 00:02:24,000
of this.

68
00:02:24,000 --> 00:02:27,200
It's a little messy right now, but hopefully that'll give something.

69
00:02:28,100 --> 00:02:29,800
Get people being able to use something.

70
00:02:29,900 --> 00:02:32,000
And in the short term while we try to clean things up a bit.

71
00:02:32,000 --> 00:02:34,000
So that is all the news.

72
00:02:34,300 --> 00:02:37,300
I hope that you find that to be usable.

73
00:02:37,300 --> 00:02:40,400
And if you if you don't, please post in the forums and we can discuss

74
00:02:40,400 --> 00:02:41,000
maybe changes.

75
00:02:41,000 --> 00:02:42,600
We can make a, I'll do the best I can.

76
00:02:42,600 --> 00:02:45,300
Like I said, I'm not a web guy, but I'll do the best I can.

77
00:02:45,400 --> 00:02:48,800
Last but not least, we have changed so that the pre-order button now,

78
00:02:48,800 --> 00:02:50,400
goes to stripe as well.

79
00:02:50,400 --> 00:02:52,100
A lot of people were having trouble with PayPal.

80
00:02:52,100 --> 00:02:52,600
I guess.

81
00:02:52,700 --> 00:02:55,200
I didn't realize how much better stripe was than PayPal.

82
00:02:55,200 --> 00:02:56,800
It's much better experience to.

83
00:02:56,800 --> 00:02:57,500
I tried it out.

84
00:02:57,500 --> 00:02:58,400
It's, it's way better.

85
00:02:58,400 --> 00:02:59,600
You can still use PayPal if you

86
00:03:00,000 --> 00:03:01,100
But that changes.

87
00:03:01,100 --> 00:03:03,200
Well, so we did a bunch of work on the website.

88
00:03:03,400 --> 00:03:05,800
Thank you to everyone who contributed that it's been awesome.

89
00:03:06,100 --> 00:03:09,500
And and that is, you know, hopefully it hopefully it'll all go.

90
00:03:09,500 --> 00:03:12,300
Well, please let us know if you have any trouble with it and we'll,

91
00:03:12,500 --> 00:03:13,400
we'll do the best we can.

92
00:03:13,400 --> 00:03:15,600
So that's it for the preamble to the stream.

93
00:03:16,300 --> 00:03:18,100
Welcome back everyone.

94
00:03:18,200 --> 00:03:19,500
I hope you had a good Thanksgiving.

95
00:03:19,500 --> 00:03:22,300
If you're the if you're in a part of the world that celebrates that if

96
00:03:22,300 --> 00:03:26,900
not, I just hope you're having a good, I guess a good beginning of

97
00:03:26,900 --> 00:03:27,500
December.

98
00:03:27,500 --> 00:03:28,100
Let's say,

99
00:03:30,200 --> 00:03:32,800
Tonight we have a very interesting topic to talk about a very

100
00:03:32,800 --> 00:03:37,800
important topic to talk about and that is that up until now we have

101
00:03:37,800 --> 00:03:41,400
basically been doing everything in Windows.

102
00:03:41,400 --> 00:03:44,400
We have been essentially getting ourselves into position.

103
00:03:44,400 --> 00:03:48,100
If we go into our handmade directory here, we can see that in our code

104
00:03:48,100 --> 00:03:48,600
directory.

105
00:03:48,600 --> 00:03:50,400
All we have is a win32 handmade.

106
00:03:50,400 --> 00:03:55,000
And if you remember, I prefix it with win32 because this is win32

107
00:03:55,000 --> 00:03:55,100
code.

108
00:03:55,100 --> 00:03:58,300
One of the things that I like to do and this is very germane to the

109
00:03:58,300 --> 00:04:00,200
topic today, which is starting to get things into

110
00:04:00,300 --> 00:04:05,400
Cross-platform setup is basically I like to make it extraordinarily

111
00:04:05,400 --> 00:04:09,200
clear where the platform-specific code lives and where the platform

112
00:04:09,200 --> 00:04:10,300
independent code lives.

113
00:04:10,300 --> 00:04:13,800
And so I right from the beginning, when we did this made sure that I

114
00:04:13,800 --> 00:04:17,100
specified, that, that was a win32 underscore handmade because I like

115
00:04:17,100 --> 00:04:22,200
to underscore each particular thing with the platform that it is made

116
00:04:22,200 --> 00:04:22,600
to go on.

117
00:04:22,600 --> 00:04:25,800
So if there's no underscore platform identify at the beginning of it,

118
00:04:25,800 --> 00:04:28,500
that means that it's generic code that should compile on everything

119
00:04:28,700 --> 00:04:29,900
and if there is

120
00:04:30,200 --> 00:04:32,900
A platform-specific prefix to it.

121
00:04:32,900 --> 00:04:34,800
Then that means it is only for that platform.

122
00:04:34,800 --> 00:04:37,700
And one of the things that this allows you to do very quickly is for

123
00:04:37,700 --> 00:04:39,000
anyone who's trying to Port it.

124
00:04:39,100 --> 00:04:41,400
They immediately know exactly what they have to do.

125
00:04:41,400 --> 00:04:45,700
They can just do it, you know, der win32 star kind of a thing and they

126
00:04:45,700 --> 00:04:48,900
can see immediately exactly all the files that they're going to have

127
00:04:48,900 --> 00:04:50,700
to port for their operating system.

128
00:04:50,700 --> 00:04:53,900
And that's a big help to anyone if you've ever actually ported

129
00:04:54,000 --> 00:04:55,600
something to a new platform before.

130
00:04:55,600 --> 00:04:59,200
You know, that just figuring out what you have to Port is a huge step.

131
00:04:59,200 --> 00:05:00,100
And if you, if the

132
00:05:00,300 --> 00:05:01,700
Some can set you up for Success there.

133
00:05:02,000 --> 00:05:03,200
That's a, that's a big deal.

134
00:05:05,000 --> 00:05:09,200
But point being, we do not have any platform nonspecific codes.

135
00:05:09,200 --> 00:05:09,700
The moment.

136
00:05:09,700 --> 00:05:11,800
We were only working on getting a bootstrap up and running.

137
00:05:11,800 --> 00:05:15,000
So the first thing I want to do is just talk a little bit about what

138
00:05:15,000 --> 00:05:16,500
is in this win32 file.

139
00:05:16,500 --> 00:05:19,200
What we are going to do with it where it is going to go.

140
00:05:19,200 --> 00:05:23,700
Just to kind of give people a little bit of a little bit of kind of a

141
00:05:23,700 --> 00:05:25,100
heads up as to what to expect.

142
00:05:25,100 --> 00:05:27,600
Because I've seen a lot of people who've done things with the win32

143
00:05:27,600 --> 00:05:28,400
platform layer.

144
00:05:28,400 --> 00:05:30,900
And I've been talking about things of the win32 platform where I want

145
00:05:30,900 --> 00:05:34,100
to make sure that people don't have the wrong expectations for the

146
00:05:34,100 --> 00:05:35,100
code that is in

147
00:05:35,100 --> 00:05:38,600
In there right now, so I'm actually going to slap a to do at the top

148
00:05:38,600 --> 00:05:39,100
of this.

149
00:05:39,200 --> 00:05:41,900
Just so people know exactly what's going on here.

150
00:05:42,300 --> 00:05:44,200
It's my keyboard is a little off center.

151
00:05:44,200 --> 00:05:45,300
That is not going to happen.

152
00:05:45,300 --> 00:05:46,700
That is not going to stand right.

153
00:05:46,700 --> 00:05:47,200
There we go.

154
00:05:49,000 --> 00:05:49,600
Let's see.

155
00:05:50,000 --> 00:05:53,400
This is not a final platform layer.

156
00:05:54,500 --> 00:05:58,000
And basically, what people need to realize is what we have done with

157
00:05:58,000 --> 00:05:59,900
our win32 platform layer, and this.

158
00:06:00,000 --> 00:06:01,300
By Design is a basically.

159
00:06:01,300 --> 00:06:05,400
I just wrote the bare minimum stuff in here that we were going to need

160
00:06:05,400 --> 00:06:09,400
in order to get ourselves off of win32 in order to make sure that we

161
00:06:09,400 --> 00:06:12,000
basically don't have to think about Windows Much Anymore going

162
00:06:12,000 --> 00:06:12,500
forwards.

163
00:06:12,700 --> 00:06:15,300
So I focused on the simplest possible thing we could do for

164
00:06:15,300 --> 00:06:19,100
educational purposes, which was getting a sound buffer up that we

165
00:06:19,100 --> 00:06:22,200
could write directly into a graphics buffer up that we could write

166
00:06:22,200 --> 00:06:25,300
directly into and rudimentary input coming in from a Gamepad and

167
00:06:25,300 --> 00:06:25,900
keyboard.

168
00:06:26,000 --> 00:06:27,400
Because that is mostly what we need.

169
00:06:27,400 --> 00:06:29,900
There's one other thing that will need which is file I/O, but I saved

170
00:06:30,000 --> 00:06:33,000
That for this week for reasons that you'll see a little later.

171
00:06:33,300 --> 00:06:36,000
But what that means is I do not know and one of the thing which was

172
00:06:36,000 --> 00:06:38,500
timing knowing how long things take and we did that as well.

173
00:06:39,000 --> 00:06:41,800
So the thing that I want to impress upon you though just before we go.

174
00:06:41,800 --> 00:06:44,700
Any further is, this is not a platform layer that you would ship and

175
00:06:44,700 --> 00:06:47,300
anyone who was, you know, going crazy in the YouTube comments.

176
00:06:47,300 --> 00:06:50,600
Oh my God, he's doing this or he doesn't understand that everyone can

177
00:06:50,600 --> 00:06:51,800
just relax a little bit.

178
00:06:51,800 --> 00:06:55,600
I would not ship this as a win32 platform layer either at all, in any

179
00:06:55,800 --> 00:06:58,300
by any stretch of the imagination, but that is not what it is for

180
00:06:58,700 --> 00:06:59,900
later on in the series.

181
00:07:00,000 --> 00:07:02,800
Is when we start doing work on getting the game shippable, when we

182
00:07:02,800 --> 00:07:05,800
start doing that polishing, work that we need to do to get the game

183
00:07:05,800 --> 00:07:10,900
shippable that is when we will be concentrating on the correct way to

184
00:07:10,900 --> 00:07:14,500
do everything in a win32 platform, layer for maximum compatibility

185
00:07:14,700 --> 00:07:16,700
maximum performance, things like that.

186
00:07:16,900 --> 00:07:18,400
But right now our goals are different.

187
00:07:18,400 --> 00:07:20,800
Our goals are understanding and education right now.

188
00:07:20,900 --> 00:07:23,400
And so the last thing we want to do is spend a ton of time.

189
00:07:23,400 --> 00:07:26,700
Going here are the eight thousand things you have to do in order to do

190
00:07:26,700 --> 00:07:29,800
thing, X on Windows properly because really that just

191
00:07:29,900 --> 00:07:32,300
Obscures the real point of this series which is the educational

192
00:07:32,300 --> 00:07:32,700
process.

193
00:07:32,700 --> 00:07:36,100
So win32 platform stuff, we will get to later but that is not the goal

194
00:07:36,100 --> 00:07:36,500
right now.

195
00:07:36,500 --> 00:07:38,700
And so I want to make sure everyone understands that and doesn't read

196
00:07:38,700 --> 00:07:42,000
too much in to the platform layer code as it is right now.

197
00:07:42,000 --> 00:07:46,200
So I'm going to write in a big to-do list and just kind of say the

198
00:07:46,200 --> 00:07:48,400
stuff that later on we'll probably be doing.

199
00:07:48,400 --> 00:07:51,700
Just so you have an idea of exactly how much stuff we will actually

200
00:07:51,700 --> 00:07:54,600
have to go and tighten down when we finally my ship this so that you

201
00:07:54,600 --> 00:07:56,100
have no Illusions about that.

202
00:07:57,100 --> 00:07:59,800
So, saved game locations is one.

203
00:08:00,000 --> 00:08:04,100
sample, so that's basically like if we have state that we want to save

204
00:08:04,100 --> 00:08:04,700
and we will

205
00:08:06,600 --> 00:08:07,400
Where does that go?

206
00:08:07,400 --> 00:08:10,700
We have to interface with Windows to find out where that goes getting

207
00:08:10,700 --> 00:08:16,500
a handle to our own executable file, our own executable file.

208
00:08:16,500 --> 00:08:18,300
That is something we'll have to do through this layer.

209
00:08:18,800 --> 00:08:20,800
We need the asset loading path.

210
00:08:20,800 --> 00:08:23,500
So we got to know where our assets are going to come from.

211
00:08:24,000 --> 00:08:27,300
We basically have to have threading multi-threading.

212
00:08:27,300 --> 00:08:28,800
So how to launch a thread.

213
00:08:29,300 --> 00:08:30,700
We don't have anything like that, right now.

214
00:08:30,700 --> 00:08:31,800
We've only got one thread.

215
00:08:31,800 --> 00:08:34,500
So if our game wanted to have more than one thread, it couldn't do

216
00:08:34,500 --> 00:08:36,200
that right now, so we're going to need that as well.

217
00:08:37,100 --> 00:08:38,900
We are going to need raw input.

218
00:08:38,900 --> 00:08:41,600
Probably, we would like to do some things with raw input support,

219
00:08:41,600 --> 00:08:43,400
multiple keyboards that sort of thing.

220
00:08:43,799 --> 00:08:48,200
Support groups support for multiple keyboards.

221
00:08:48,200 --> 00:08:48,700
There we go.

222
00:08:48,700 --> 00:08:50,500
And it, my keyword is not aligned properly.

223
00:08:50,500 --> 00:08:51,200
There we go.

224
00:08:51,300 --> 00:08:53,300
You got to get that alignment or you can't get the speed.

225
00:08:53,300 --> 00:08:55,000
You got to get your hands and just the right place.

226
00:08:55,000 --> 00:08:55,700
You know what I'm saying?

227
00:08:55,900 --> 00:08:56,700
You know what I'm saying?

228
00:08:56,900 --> 00:08:57,200
All right.

229
00:08:57,200 --> 00:08:59,700
Anyway, we have to do.

230
00:09:00,000 --> 00:09:05,700
Sleep and time begin period in order to make sure that on laptops and

231
00:09:05,700 --> 00:09:07,200
other sorts of circumstances.

232
00:09:07,200 --> 00:09:11,200
We do not melt the processor down by using all available cycles and

233
00:09:11,200 --> 00:09:14,700
basically burn through the person's battery, clip cursor, for

234
00:09:14,700 --> 00:09:20,500
multi-monitor multi-monitor support because basically right now if we

235
00:09:20,500 --> 00:09:23,300
were to go fullscreen, oh and I should put full screen support as

236
00:09:23,300 --> 00:09:23,600
well.

237
00:09:23,800 --> 00:09:26,600
If we were to go full screen, people could move the cursor outside the

238
00:09:26,600 --> 00:09:28,800
window and it would be weird even though we're not getting the mouse

239
00:09:28,800 --> 00:09:29,800
and that sort of stuff.

240
00:09:30,300 --> 00:09:31,200
Let's see here.

241
00:09:31,400 --> 00:09:35,700
We want to be able to do WM set cursor as well, so that we basically

242
00:09:35,700 --> 00:09:37,500
control the cursor visibility.

243
00:09:39,300 --> 00:09:40,200
There we go.

244
00:09:40,900 --> 00:09:44,500
We are going to want to do, query, cancel, auto play, assuming that

245
00:09:44,500 --> 00:09:45,900
that even still works anymore.

246
00:09:45,900 --> 00:09:48,300
But something that we probably should do at least for the old days.

247
00:09:48,600 --> 00:09:55,000
WM activate app for when we are not the active application.

248
00:09:55,200 --> 00:09:56,500
That's a good thing to do.

249
00:09:57,000 --> 00:09:59,800
We are going to need to do Blitz.

250
00:10:00,100 --> 00:10:03,200
Improvements possibly using bit blit.

251
00:10:03,300 --> 00:10:06,000
We are going to want Hardware acceleration.

252
00:10:07,100 --> 00:10:13,300
So opengl or direct3d or both potentially who knows we could get

253
00:10:13,300 --> 00:10:15,400
totally crazy depending on how things are going.

254
00:10:16,300 --> 00:10:21,600
And finally, we may want to do some stuff with get keyboard layout for

255
00:10:21,600 --> 00:10:22,900
French keyboards.

256
00:10:23,500 --> 00:10:27,100
Was the basically International wasde and that sort of stuff

257
00:10:27,200 --> 00:10:29,800
international wasde support.

258
00:10:29,900 --> 00:10:33,700
And that is just a partial list of stuff.

259
00:10:34,900 --> 00:10:37,400
So basically that is something to keep in mind.

260
00:10:37,400 --> 00:10:41,200
So hopefully that just gives you an idea of how much stuff we actually

261
00:10:41,200 --> 00:10:44,800
have to do when we really want to get things into complete shipping

262
00:10:44,800 --> 00:10:47,800
State and we don't need to worry about most of these things for a long

263
00:10:47,800 --> 00:10:50,800
time, but it's just worth noting that you should understand.

264
00:10:50,800 --> 00:10:51,400
What we are doing.

265
00:10:51,400 --> 00:10:54,500
Here is just a very simple layer designed to get us up and running so

266
00:10:54,500 --> 00:10:58,300
we can develop the game and then later as we go we may Implement some

267
00:10:58,300 --> 00:10:59,600
of these when we need them.

268
00:10:59,700 --> 00:10:59,800
If

269
00:11:00,000 --> 00:11:05,400
Actually need them to do stuff, very specifically beforehand.

270
00:11:05,400 --> 00:11:06,500
We need to do that.

271
00:11:06,600 --> 00:11:10,200
But we also will do them at the end when we're actually just doing

272
00:11:10,200 --> 00:11:12,600
ship testing and retesting on machines and seeing, okay.

273
00:11:12,600 --> 00:11:13,400
This didn't work here.

274
00:11:13,400 --> 00:11:15,200
Make sure we support this there that sort of thing.

275
00:11:17,400 --> 00:11:17,800
Okay.

276
00:11:18,600 --> 00:11:21,700
So now that I've got that out of the way and you understand what's

277
00:11:21,700 --> 00:11:25,400
going on in this win32, handmade file, the main topic for today.

278
00:11:25,400 --> 00:11:29,600
The main topic for Monday is basically how to architect code properly.

279
00:11:30,000 --> 00:11:33,700
So that it is cropped as easy to make cross-platform as possible.

280
00:11:33,900 --> 00:11:37,400
So basically what we're looking to do here is we're looking to make it

281
00:11:37,400 --> 00:11:40,100
so that the majority of the code that we write for this project, as

282
00:11:40,100 --> 00:11:45,000
much of the code is possible, will be simple for anyone including

283
00:11:45,000 --> 00:11:49,400
myself, but anyone who wants to to get running on another platform

284
00:11:49,600 --> 00:11:50,300
optimally.

285
00:11:50,600 --> 00:11:52,000
So basically there's two goals there.

286
00:11:52,000 --> 00:11:54,700
There's just, there's just the getting it running at all on another

287
00:11:54,700 --> 00:11:55,200
platform.

288
00:11:55,200 --> 00:11:56,400
So we wrote it on Windows.

289
00:11:56,400 --> 00:11:57,500
We want to get it running on Linux.

290
00:11:57,500 --> 00:11:58,300
We wrote it on Windows.

291
00:11:58,300 --> 00:11:59,800
We want to pour it to Raspberry Pi.

292
00:12:00,000 --> 00:12:01,100
Or something like that, right?

293
00:12:01,200 --> 00:12:01,500
Whatever.

294
00:12:01,500 --> 00:12:02,500
We want to Port it to.

295
00:12:03,000 --> 00:12:06,400
There's just the act of getting it working and we want to make that be

296
00:12:06,400 --> 00:12:07,300
as easy as possible.

297
00:12:07,300 --> 00:12:11,500
But then we also have to think about the act of making it optimal on

298
00:12:11,500 --> 00:12:12,300
those platforms.

299
00:12:12,300 --> 00:12:14,800
Meaning, the amount of work that that person is going to have to do,

300
00:12:15,000 --> 00:12:17,100
and optimal is probably the wrong term.

301
00:12:17,100 --> 00:12:20,400
No piece of code is ever optimal for real, but basically getting it to

302
00:12:20,400 --> 00:12:23,700
the point where its performance, where it runs at a reasonable frame

303
00:12:23,700 --> 00:12:27,000
rate for what one, might expect the game to run on on that platform.

304
00:12:27,000 --> 00:12:29,900
So if the platform should be able to run the game at 60 frames a

305
00:12:30,000 --> 00:12:33,200
And but there's a bunch of stuff with a platform that will have to

306
00:12:33,200 --> 00:12:35,700
happen in order to enable that order to make that work.

307
00:12:35,800 --> 00:12:39,200
What we need to do is say how easy are we making it for that person

308
00:12:39,200 --> 00:12:40,400
who has to do that Port?

309
00:12:40,400 --> 00:12:44,100
How easy are we making them making their lives at that time?

310
00:12:44,400 --> 00:12:47,700
And now in this case, it's going to be us we're going to be doing a

311
00:12:47,700 --> 00:12:48,600
lot of those ports.

312
00:12:48,700 --> 00:12:51,300
So it's really saying how easy we're going to make our lives.

313
00:12:51,300 --> 00:12:54,700
But in general when you're working on stuff like this, it is typical

314
00:12:54,700 --> 00:12:55,900
that you will not be the person.

315
00:12:55,900 --> 00:12:58,500
Perhaps it's doing all the porting work for something that you work

316
00:12:58,500 --> 00:12:58,700
on.

317
00:12:58,700 --> 00:12:59,900
So really you're kind of trying to keep

318
00:13:00,000 --> 00:13:02,500
Other person in mind that some sense you're saying what will the

319
00:13:02,500 --> 00:13:04,300
people who come along here and Port?

320
00:13:04,300 --> 00:13:05,100
This other platforms?

321
00:13:05,100 --> 00:13:06,100
What will they have to do?

322
00:13:06,200 --> 00:13:06,700
How easy?

323
00:13:06,700 --> 00:13:08,000
Will it be for them to do their job?

324
00:13:08,100 --> 00:13:08,500
How easy?

325
00:13:08,500 --> 00:13:11,700
Will it be for them to maintain that Port, where you update your

326
00:13:11,700 --> 00:13:12,700
version of the source.

327
00:13:12,700 --> 00:13:14,700
Does that going to require a whole rewrite for them?

328
00:13:14,700 --> 00:13:16,400
What's going to mean, right?

329
00:13:17,100 --> 00:13:19,200
So those are all the things that I want to put in your head things

330
00:13:19,200 --> 00:13:20,300
that you want to think about.

331
00:13:20,400 --> 00:13:23,000
And we're going to talk about ways of making that easier and harder

332
00:13:23,000 --> 00:13:23,200
today.

333
00:13:23,200 --> 00:13:27,400
So that you can see why certain decisions cause problems and why you

334
00:13:27,400 --> 00:13:28,400
shouldn't make those decisions.

335
00:13:28,400 --> 00:13:29,800
And instead prefer things.

336
00:13:29,900 --> 00:13:31,300
That are going to be a little easier.

337
00:13:34,000 --> 00:13:34,700
Okay.

338
00:13:36,300 --> 00:13:41,900
So, the first thing that I'd like to say or write really like to

339
00:13:41,900 --> 00:13:46,200
introduce you to, if you haven't seen it before, is how people in

340
00:13:46,200 --> 00:13:51,600
general, used to make code be cross-platform, and I shouldn't say,

341
00:13:51,600 --> 00:13:55,100
people in general, I should say maybe the most prevalent way in the

342
00:13:55,100 --> 00:13:55,700
old days.

343
00:13:56,000 --> 00:13:59,100
So the most prevalent way in the old days is you would have a file and

344
00:13:59,100 --> 00:14:02,100
that file would be doing something like our win32 handmade would be

345
00:14:02,100 --> 00:14:02,500
doing.

346
00:14:02,800 --> 00:14:05,500
And there would be something like the code for opening a window.

347
00:14:05,600 --> 00:14:05,900
So, if you

348
00:14:06,100 --> 00:14:07,900
Look at the code for opening a window here.

349
00:14:08,100 --> 00:14:12,000
You can basically see that we have some stuff that we had to do in

350
00:14:12,000 --> 00:14:13,100
order to get that to happen.

351
00:14:13,100 --> 00:14:14,000
It was right here.

352
00:14:14,300 --> 00:14:17,300
Now, the way that people used to do porting to various platforms

353
00:14:17,300 --> 00:14:20,500
before is that you say, well, okay, when I need to do stuff, I'll

354
00:14:20,500 --> 00:14:24,300
start at the beginning here and I'll say, well, you know, I'll use the

355
00:14:24,300 --> 00:14:25,000
preprocessor.

356
00:14:25,000 --> 00:14:27,400
And now, of course it, for those of you that don't know, because we

357
00:14:27,400 --> 00:14:29,700
haven't talked about it, much in C.

358
00:14:29,700 --> 00:14:30,500
And C++.

359
00:14:30,500 --> 00:14:33,100
There is a preprocessor and what that preprocessor does allow you to

360
00:14:33,100 --> 00:14:35,600
do along with the one thing that we have been sort of using it for in

361
00:14:35,600 --> 00:14:35,900
the past.

362
00:14:36,000 --> 00:14:39,200
Last pound, including pound to find which we've seen, it allows us to

363
00:14:39,200 --> 00:14:41,300
do pound, if statements and the pound.

364
00:14:41,300 --> 00:14:44,600
If statements can take two forms that are kind of equivalent to some

365
00:14:44,600 --> 00:14:46,100
degree, but they can take different forms.

366
00:14:46,400 --> 00:14:49,600
Basically, what we're allowed to do is say pound if and then some

367
00:14:49,600 --> 00:14:54,100
pre-processor expression, like for example, pound if is running on

368
00:14:54,100 --> 00:14:58,200
win32, and basically, what it'll do is it'll execute the stuff in

369
00:14:58,200 --> 00:14:59,800
here, stuff in here.

370
00:15:00,000 --> 00:15:07,500
Happens when that thing is 1 or sorry, not 0 and stuff in here happens

371
00:15:07,600 --> 00:15:13,500
when it is 0 or undefined basically, so what this allows you to do is

372
00:15:13,700 --> 00:15:19,700
define basically sort of macro variables which control certain ports

373
00:15:19,700 --> 00:15:22,700
of the compilation so that you can knock Parts out when you're on

374
00:15:22,700 --> 00:15:24,800
certain platforms and bring other parts in when you're on certain

375
00:15:24,800 --> 00:15:25,500
platforms.

376
00:15:25,800 --> 00:15:28,300
And so, what a lot of people would do is they would Define some kind

377
00:15:28,300 --> 00:15:29,800
of variable, typically

378
00:15:30,000 --> 00:15:32,400
It would be something like that because I believe that was the visual

379
00:15:32,400 --> 00:15:32,700
C.

380
00:15:32,700 --> 00:15:35,500
Standard was basically underscore win32 or something like this.

381
00:15:35,500 --> 00:15:36,500
But, you know, it could be whatever.

382
00:15:36,500 --> 00:15:40,600
Maybe we'd have our own for example, like handmade win32 and we

383
00:15:40,600 --> 00:15:42,600
probably will do something like that for other reasons in a second.

384
00:15:42,600 --> 00:15:46,400
But basically what they do is they'd have a defined like that and then

385
00:15:46,400 --> 00:15:50,500
inside the code you would basically bracket the things that did not

386
00:15:50,500 --> 00:15:52,700
work and provide Alternatives.

387
00:15:52,700 --> 00:15:55,900
So when main obviously would not work on Linux, but you know, what

388
00:15:55,900 --> 00:15:56,700
would work on Linux?

389
00:15:56,700 --> 00:15:59,900
It would work if you were to do something.

390
00:16:00,500 --> 00:16:01,600
Like this, right?

391
00:16:01,600 --> 00:16:05,000
This is the way that you would introduce that function in Linux.

392
00:16:05,000 --> 00:16:07,900
So something that you would see a lot of times is basically this kind

393
00:16:07,900 --> 00:16:10,000
of pouring, you say that a little bit odd.

394
00:16:10,000 --> 00:16:12,400
They're basically what you see is something like this.

395
00:16:12,400 --> 00:16:16,100
And when you would compile this, if you are running on win32, it would

396
00:16:16,100 --> 00:16:16,900
put in the wind man.

397
00:16:16,900 --> 00:16:17,700
That looks like this.

398
00:16:17,700 --> 00:16:20,900
And if you were compiling on Linux, let's say it would put it in here,

399
00:16:21,000 --> 00:16:23,200
and these could even stack on top of each other.

400
00:16:23,200 --> 00:16:23,800
There's an L.

401
00:16:23,800 --> 00:16:27,100
If basically, which could do something like this, and then we could

402
00:16:27,100 --> 00:16:29,800
do, you know another one down here for a different platform.

403
00:16:30,000 --> 00:16:31,700
Handmade Mac, right?

404
00:16:31,700 --> 00:16:32,800
These sorts of things.

405
00:16:32,900 --> 00:16:33,300
I don't know.

406
00:16:33,300 --> 00:16:34,300
It's probably the same on Mac.

407
00:16:34,300 --> 00:16:36,800
Honestly, I don't quite remember, but well actually on Mac you got

408
00:16:36,800 --> 00:16:38,200
you, you want to be in Cocoa.

409
00:16:38,200 --> 00:16:40,000
So it's actually an Objective C and this sort of stuff.

410
00:16:40,000 --> 00:16:43,300
But point being, you would see, you know, maybe Raspberry Pi or

411
00:16:43,300 --> 00:16:44,000
whatever and stuff.

412
00:16:44,000 --> 00:16:46,400
Like that point being is you would see a bunch of stuff like this.

413
00:16:46,800 --> 00:16:49,600
And basically, what you would do is in each one of these slots

414
00:16:49,800 --> 00:16:51,200
everywhere in the code.

415
00:16:51,300 --> 00:16:54,400
You would go in and slut in the thing that you want to have happen.

416
00:16:55,200 --> 00:16:55,700
Okay.

417
00:16:56,100 --> 00:16:58,600
So basically, let's say that we had done something like that.

418
00:16:58,600 --> 00:16:59,800
We've done something like this and now

419
00:17:00,000 --> 00:17:03,000
Now we've got something that's going to have the correct introduction

420
00:17:03,100 --> 00:17:04,200
for whichever platform.

421
00:17:04,200 --> 00:17:07,500
You would have, then what you would do is you would go into your build

422
00:17:07,500 --> 00:17:11,400
up batch file and in here, you would basically use what's called a

423
00:17:11,400 --> 00:17:14,700
compiler time, you know, like a compile time pound to fine.

424
00:17:17,099 --> 00:17:19,300
And the compiler basically allows you to do that.

425
00:17:19,300 --> 00:17:22,700
You can specify minus D and then you can put the thing you wanted to

426
00:17:22,700 --> 00:17:25,000
find what you wanted to find it to in a syntax.

427
00:17:25,000 --> 00:17:28,900
It looks like this - the handmade win32 equals 1 means that.

428
00:17:28,900 --> 00:17:32,100
Now, I'm injecting that pound to find so that anything in the code

429
00:17:32,100 --> 00:17:33,500
that does this kind of an F.

430
00:17:33,600 --> 00:17:38,800
It will get back a true essentially, so it will actually do this line.

431
00:17:38,800 --> 00:17:42,400
So if I do this compile, yes, I would like to say that build up at if

432
00:17:42,400 --> 00:17:45,200
I do this compile, you will see that it works on the other hand, if I

433
00:17:45,200 --> 00:17:46,300
was saying for

434
00:17:46,400 --> 00:17:48,900
Some reason that we were compiling in some other thing.

435
00:17:48,900 --> 00:17:51,800
Let's say, I said, we were compiling and Linux or something you would

436
00:17:51,800 --> 00:17:55,300
notice that we would get an error essentially because it's going to

437
00:17:55,300 --> 00:17:56,800
actually use this other definition.

438
00:17:56,800 --> 00:17:59,400
So it's now it's just a regular function and there's no each instance

439
00:17:59,400 --> 00:17:59,800
and all the rest.

440
00:18:00,000 --> 00:18:01,100
Code doesn't work right?

441
00:18:01,100 --> 00:18:04,400
But you can see the basic trick here is, this is what you do and you

442
00:18:04,400 --> 00:18:07,600
would continue this process to Port the whole function you'd pound if

443
00:18:07,600 --> 00:18:11,400
all the windows code and put else's around it, so that you could

444
00:18:11,400 --> 00:18:14,600
inject, whatever the correct calls were on Linux.

445
00:18:15,000 --> 00:18:17,200
Hopefully that makes pretty intuitive sense to you.

446
00:18:17,200 --> 00:18:18,800
It's not very complicated, right?

447
00:18:18,800 --> 00:18:22,000
It's a pretty basic thing to want to do there.

448
00:18:22,000 --> 00:18:25,300
Really isn't a lot going on there.

449
00:18:25,300 --> 00:18:26,600
That's that's, that's confusing.

450
00:18:26,800 --> 00:18:29,300
So I'm going to go ahead and change it back to our other pound to find

451
00:18:29,300 --> 00:18:29,800
so we can see.

452
00:18:30,000 --> 00:18:33,000
See that this thing works properly, you know, exactly why because we

453
00:18:33,000 --> 00:18:35,400
may want to use that ahead in the future and so on.

454
00:18:36,000 --> 00:18:39,300
So that is how you'd you'd have done it way back in the past.

455
00:18:39,300 --> 00:18:42,200
I remember reading through like the canoe make source code back in

456
00:18:42,200 --> 00:18:46,700
1996 or something and it's just all all over the place this sort of

457
00:18:46,700 --> 00:18:47,100
thing, right?

458
00:18:47,100 --> 00:18:48,800
It all the code has multiple paths.

459
00:18:49,600 --> 00:18:50,100
Now.

460
00:18:50,200 --> 00:18:54,300
The reason that I do not recommend writing code this way and we will

461
00:18:54,300 --> 00:18:55,400
use a limited.

462
00:18:55,400 --> 00:18:58,100
I'll show you a very specific place where I do think that this comes

463
00:18:58,100 --> 00:18:59,900
in handy, so I'm not saying

464
00:19:00,000 --> 00:19:04,400
Never do it, but I am saying, think long and hard about doing this

465
00:19:04,400 --> 00:19:05,100
sort of thing.

466
00:19:05,400 --> 00:19:09,400
The reason for it is because first of all it it does.

467
00:19:09,400 --> 00:19:13,600
Cause a problem for exactly what I was.

468
00:19:13,600 --> 00:19:15,400
I said at the very beginning of the podcast.

469
00:19:15,400 --> 00:19:15,700
I'm sorry.

470
00:19:15,700 --> 00:19:16,100
Thank you.

471
00:19:16,100 --> 00:19:17,100
Can do this video cast.

472
00:19:17,100 --> 00:19:17,400
I guess.

473
00:19:17,400 --> 00:19:18,400
This is not a podcast.

474
00:19:18,400 --> 00:19:19,900
I don't think with an iPod could be listening to it.

475
00:19:19,900 --> 00:19:21,000
The very beginning of this video.

476
00:19:21,000 --> 00:19:22,500
Guess what?

477
00:19:22,500 --> 00:19:25,600
I basically said was, we're trying to make the job very easy for the

478
00:19:25,600 --> 00:19:27,100
people who have to pour it in the future.

479
00:19:27,600 --> 00:19:29,800
And if what they have to do is go through all.

480
00:19:29,900 --> 00:19:33,900
All the code looking for all of the places where we used win32 code

481
00:19:33,900 --> 00:19:35,600
and pound iffing around them like that.

482
00:19:35,600 --> 00:19:37,600
And we just scatter the code everywhere and just do the pound.

483
00:19:37,600 --> 00:19:41,600
If that creates a pretty big problem, right there.

484
00:19:41,600 --> 00:19:42,400
It's just annoying.

485
00:19:42,400 --> 00:19:45,000
You can't see where they are up front.

486
00:19:45,000 --> 00:19:46,500
You don't even know where all the code is.

487
00:19:46,500 --> 00:19:49,200
It's a learning process just for the person, even figure out what was

488
00:19:49,200 --> 00:19:49,700
going on.

489
00:19:50,000 --> 00:19:52,800
And it forces them kind of into this mindset of.

490
00:19:52,800 --> 00:19:53,000
All right.

491
00:19:53,000 --> 00:19:53,500
I got to go.

492
00:19:53,700 --> 00:19:57,400
Look at these other sort of if statements and see what each path was

493
00:19:57,400 --> 00:19:58,400
doing and whatever.

494
00:19:58,700 --> 00:19:59,600
So that's thing one.

495
00:20:00,100 --> 00:20:00,900
Thing too.

496
00:20:01,100 --> 00:20:04,600
Is that the code quickly becomes very difficult for anyone to read

497
00:20:04,600 --> 00:20:08,200
without, basically, the benefit of a cup of a editor that collapses

498
00:20:08,200 --> 00:20:08,400
them.

499
00:20:08,400 --> 00:20:12,700
Because if you imagine in here, we have this sort of nonsense going on

500
00:20:12,800 --> 00:20:14,500
all the time, right?

501
00:20:14,500 --> 00:20:17,000
And remember, it's not just that, it's everything.

502
00:20:17,000 --> 00:20:20,200
It's every platform that this thing will ever be pointed to, right.

503
00:20:20,200 --> 00:20:23,100
We've got all this sort of garbage going on, right?

504
00:20:23,500 --> 00:20:24,600
Then pretty soon.

505
00:20:24,600 --> 00:20:29,800
You're basically starting to require write a development environment.

506
00:20:29,900 --> 00:20:34,100
Ain't that can understand these ifs and know which ones you have set

507
00:20:34,100 --> 00:20:37,000
and show you only the selective code because otherwise you're never

508
00:20:37,000 --> 00:20:38,400
going to be able to read this code.

509
00:20:38,600 --> 00:20:41,500
You're only going to see one line of each function of the time because

510
00:20:41,500 --> 00:20:44,900
the whole page is going to be taken up with this kind of stuff and

511
00:20:44,900 --> 00:20:46,400
that's just inconvenient right there.

512
00:20:46,400 --> 00:20:48,900
And it's a hard probability like, emacs.

513
00:20:49,100 --> 00:20:51,000
If you do a bunch of stuff does actually do that.

514
00:20:51,000 --> 00:20:51,700
It's kind of a pain.

515
00:20:51,700 --> 00:20:54,500
So I don't do it but a lot of editors don't do it at all.

516
00:20:54,500 --> 00:20:57,100
There's there's a number of reasons why you don't want to voice out on

517
00:20:57,100 --> 00:20:57,300
someone.

518
00:20:57,300 --> 00:20:59,800
You're basically putting a hard requirement on their editor.

519
00:21:00,200 --> 00:21:02,300
And I'd rather not do that for such a small thing.

520
00:21:02,700 --> 00:21:06,300
But those two things, the first, the second one are small compared to

521
00:21:06,300 --> 00:21:07,000
the third one.

522
00:21:09,500 --> 00:21:12,600
the third one, I saved the best for last, you know, I would do it and

523
00:21:12,600 --> 00:21:16,100
I did the real reason that you never write code like this unless you

524
00:21:16,100 --> 00:21:17,100
absolutely have to

525
00:21:18,200 --> 00:21:24,300
Is because it dictates the control flow must be equivalent across all

526
00:21:24,300 --> 00:21:25,100
platforms.

527
00:21:25,400 --> 00:21:25,700
Okay.

528
00:21:25,700 --> 00:21:26,900
I'm going to say that again.

529
00:21:27,000 --> 00:21:27,900
Just so, you know what I mean?

530
00:21:27,900 --> 00:21:32,200
And I'm going to be example, if you do cross-platform code, this way,

531
00:21:33,000 --> 00:21:39,000
it means that the control flow of your program is shared across all

532
00:21:39,000 --> 00:21:41,600
the platforms that you will ever ship on.

533
00:21:42,200 --> 00:21:42,300
Now.

534
00:21:42,300 --> 00:21:43,300
What do I mean by that?

535
00:21:43,700 --> 00:21:47,200
Well, what I mean is, if I'm going to go through here and henpeck out

536
00:21:47,200 --> 00:21:47,700
lines of

537
00:21:48,000 --> 00:21:51,900
Would like I was doing then essentially what we have is the same set

538
00:21:51,900 --> 00:21:56,200
of functions and the same set of if statements the same set of while

539
00:21:56,200 --> 00:22:01,100
loops and we have just started inserting very insidiously, different

540
00:22:01,100 --> 00:22:05,400
Escape mechanisms, Escape hatches, if you will for each platform to go

541
00:22:05,400 --> 00:22:09,000
in actually do the thing that they wanted to do at the time that they

542
00:22:09,000 --> 00:22:10,400
needed to do it, right?

543
00:22:11,400 --> 00:22:13,600
That is very, very problematic.

544
00:22:13,600 --> 00:22:17,200
When you start talking about platforms that are very different in the

545
00:22:17,200 --> 00:22:23,200
way that they expect initialization and and platform services to work.

546
00:22:23,300 --> 00:22:28,500
So for example, let's say on one platform in order to load resources

547
00:22:28,500 --> 00:22:29,300
asynchronously.

548
00:22:29,300 --> 00:22:31,800
So I want to basically have background streaming in my game.

549
00:22:31,800 --> 00:22:37,400
I want to load bitmaps out of my resource file and I want to do that.

550
00:22:37,400 --> 00:22:38,300
While the game is running.

551
00:22:38,300 --> 00:22:39,300
I don't want to stop the game.

552
00:22:39,300 --> 00:22:40,600
I want to happen continuously.

553
00:22:40,600 --> 00:22:41,000
So there's no

554
00:22:41,200 --> 00:22:44,600
In screen on one platform, maybe that's best accomplished with a

555
00:22:44,600 --> 00:22:46,800
separate thread on another platform.

556
00:22:46,800 --> 00:22:50,400
Maybe that's best accomplished with overlapped IO, who knows?

557
00:22:50,600 --> 00:22:54,100
Maybe it's best accomplished with memory mapped files on one platform.

558
00:22:54,700 --> 00:22:58,200
Each one of these things may dictate a very different structure for

559
00:22:58,200 --> 00:23:02,000
how the game starts up, how it continues running, how it handles,

560
00:23:02,000 --> 00:23:05,100
things, like messages that come in from the, from the operating

561
00:23:05,100 --> 00:23:05,400
system.

562
00:23:05,400 --> 00:23:06,500
All those sorts of things.

563
00:23:07,700 --> 00:23:10,800
And so what I would like to impress upon you and this comes from many

564
00:23:10,800 --> 00:23:13,600
many years of shipping cross-platform code.

565
00:23:13,600 --> 00:23:16,500
I guess this point is 20 years of shipping code that always had to run

566
00:23:16,500 --> 00:23:23,300
everywhere is that that just it's just a very inefficient way to try

567
00:23:23,300 --> 00:23:25,300
and do the coding the much.

568
00:23:25,300 --> 00:23:28,900
Much better way is the way that I'm going to show you now, so I would

569
00:23:28,900 --> 00:23:33,800
highly recommend not doing this this method of coding.

570
00:23:34,100 --> 00:23:36,800
I'm going to show you two more methods for the rest of the

571
00:23:37,100 --> 00:23:37,400
Here.

572
00:23:37,600 --> 00:23:39,600
And I would highly recommend.

573
00:23:39,700 --> 00:23:42,700
Unless for some reason you really love what I just showed you, you

574
00:23:42,700 --> 00:23:44,000
really loved this right here.

575
00:23:44,600 --> 00:23:48,700
I would highly recommend not using that method as a method of

576
00:23:48,700 --> 00:23:52,200
programming and stepped in one specific instance that I will show you

577
00:23:52,200 --> 00:23:52,800
in a minute.

578
00:23:53,900 --> 00:23:54,400
Okay.

579
00:23:54,500 --> 00:23:56,100
So what are the better ways to do this?

580
00:23:56,100 --> 00:23:59,300
Well, I've already set us up for success with one of the ways.

581
00:24:00,000 --> 00:24:00,700
This is common.

582
00:24:00,700 --> 00:24:03,200
I shouldn't say one of the ways, basically, the way that is common

583
00:24:03,200 --> 00:24:05,200
between the two methods that I'm going to talk about next.

584
00:24:06,500 --> 00:24:11,000
What I did was I call this win32 handmade dot CPP and my expectation

585
00:24:11,000 --> 00:24:14,000
is that somebody else will come along at some point and create Linux

586
00:24:14,200 --> 00:24:16,200
handmade dot CPP, right?

587
00:24:16,200 --> 00:24:17,400
That's someone's going to be me.

588
00:24:17,400 --> 00:24:21,100
But, you know, like I said, in a more larger project, it would

589
00:24:21,100 --> 00:24:23,400
probably be the platform expert for Linux.

590
00:24:23,400 --> 00:24:24,300
Whoever is job.

591
00:24:24,300 --> 00:24:25,400
It is to make that be running.

592
00:24:26,200 --> 00:24:29,600
Now, the way that this will work then right, is that the win32

593
00:24:29,600 --> 00:24:33,600
specific code will go into these files that are marked with 32 and

594
00:24:33,600 --> 00:24:36,200
there might be more than one doesn't just have to be one multiple.

595
00:24:36,400 --> 00:24:39,100
Within three to underscore our and all of the Linux code will go into

596
00:24:39,100 --> 00:24:40,300
Linux underscore files.

597
00:24:41,100 --> 00:24:44,400
Now, the way will work the way it will work from there on is, we will

598
00:24:44,400 --> 00:24:48,500
create a single shared header file that will be called handmade .h,

599
00:24:48,600 --> 00:24:49,200
right?

600
00:24:49,300 --> 00:24:53,600
And this single shared header file will basically include the

601
00:24:53,600 --> 00:24:58,300
operations that the platform layer is supposed to be able to perform

602
00:24:58,400 --> 00:25:00,700
on behalf of our cross-platform code.

603
00:25:01,500 --> 00:25:06,200
Right, it will create basically an API in this, it'll sort of, create

604
00:25:06,200 --> 00:25:10,500
our own platform, abstraction API in this header file and all of our

605
00:25:10,500 --> 00:25:14,700
platform non specific code will call into this way.

606
00:25:14,900 --> 00:25:18,300
So basically we, let's say, have something where we want to load a

607
00:25:18,300 --> 00:25:18,700
file.

608
00:25:19,000 --> 00:25:21,600
We will type something like load file, right?

609
00:25:21,600 --> 00:25:23,000
And there's a name for the file.

610
00:25:23,000 --> 00:25:25,100
I'd at this is not the actual API, we will use.

611
00:25:25,100 --> 00:25:28,200
But let's say we have that, we will call this load file.

612
00:25:28,200 --> 00:25:31,100
And often times, I like to do is call it platform load file, so that

613
00:25:31,100 --> 00:25:31,200
we

614
00:25:31,400 --> 00:25:32,900
That we're asking the platform for something.

615
00:25:32,900 --> 00:25:34,400
They people who get prefixed right?

616
00:25:35,300 --> 00:25:37,200
There will be one definition of that here.

617
00:25:37,300 --> 00:25:37,800
Right?

618
00:25:37,800 --> 00:25:38,600
And it'll do the load.

619
00:25:38,600 --> 00:25:38,800
I guess.

620
00:25:38,800 --> 00:25:40,900
It's got to actually return something, probably, blah, blah, blah.

621
00:25:40,900 --> 00:25:42,000
But anyway, you get my idea.

622
00:25:42,000 --> 00:25:43,400
There is a platform API here.

623
00:25:43,900 --> 00:25:49,500
Then what happens is that API exists both here right inside the Linux

624
00:25:49,500 --> 00:25:50,000
version.

625
00:25:50,100 --> 00:25:55,000
And so in the Linux file, right, I would do, you know, this implements

626
00:25:55,300 --> 00:25:57,700
the Linux file loading, right?

627
00:25:57,800 --> 00:26:01,100
And then in the win32 version, I would do the same thing.

628
00:26:01,300 --> 00:26:05,400
Right, I would basically have this for the win32 version here.

629
00:26:05,800 --> 00:26:06,200
Okay.

630
00:26:06,700 --> 00:26:10,000
So all that happens, now is when we're actually writing platform

631
00:26:10,000 --> 00:26:10,900
nonspecific codes.

632
00:26:10,900 --> 00:26:15,600
So, let's say we are in handmade dot CPP, right?

633
00:26:15,600 --> 00:26:17,400
I open up my handmade that sleepy.

634
00:26:17,400 --> 00:26:18,700
No, I do not want that.

635
00:26:18,700 --> 00:26:19,200
I want that.

636
00:26:19,200 --> 00:26:19,800
There we go.

637
00:26:20,200 --> 00:26:21,600
In handmade dot CPP.

638
00:26:21,800 --> 00:26:22,700
I've got some stuff.

639
00:26:22,700 --> 00:26:25,600
I don't know what function this is, but I want to load a file and I

640
00:26:25,600 --> 00:26:27,500
don't want this code to be relying on windows.

641
00:26:27,500 --> 00:26:29,900
So they don't want any more of the code that we ever right to be

642
00:26:29,900 --> 00:26:30,700
relying on Windows.

643
00:26:30,700 --> 00:26:31,100
I want it to be

644
00:26:31,300 --> 00:26:31,500
Lately.

645
00:26:31,500 --> 00:26:32,300
Cross-platform.

646
00:26:32,600 --> 00:26:36,500
I am just going to call platform load file with the filename, right?

647
00:26:36,600 --> 00:26:39,600
I'm going to ask it to load that and it's going to give me back the

648
00:26:39,600 --> 00:26:39,900
file.

649
00:26:39,900 --> 00:26:41,100
Contents like that.

650
00:26:41,400 --> 00:26:45,900
Okay, and this is the structure that we are going to use from now on.

651
00:26:46,000 --> 00:26:48,600
So if you imagine, this is our main Loop or something.

652
00:26:48,600 --> 00:26:49,900
I don't know exactly what it is.

653
00:26:50,200 --> 00:26:51,700
This is how how that goes.

654
00:26:52,000 --> 00:26:52,200
Then.

655
00:26:52,200 --> 00:26:55,600
What I'm going to do is I'm just going to call into that from the

656
00:26:55,600 --> 00:26:56,200
platform layer.

657
00:26:56,200 --> 00:26:59,800
So once we have started things going right, once Things Are

658
00:27:00,000 --> 00:27:04,300
Thing I am going to call in here when we're actually up.

659
00:27:04,300 --> 00:27:06,700
I don't know where we're going to clean up this thing in a second

660
00:27:06,700 --> 00:27:06,900
here.

661
00:27:06,900 --> 00:27:09,300
But so after we do, you know, whatever therefore sound before?

662
00:27:09,300 --> 00:27:09,800
Who knows.

663
00:27:10,000 --> 00:27:12,300
We're going to call this main Loop thing, right?

664
00:27:12,300 --> 00:27:13,500
We're gonna call it from in here.

665
00:27:13,800 --> 00:27:16,700
Okay, and I have to obviously include this file.

666
00:27:17,200 --> 00:27:20,500
So, let's do that here as well.

667
00:27:20,800 --> 00:27:24,400
You too, dude, this is something I'll talk about in one second as

668
00:27:24,400 --> 00:27:24,800
well.

669
00:27:24,800 --> 00:27:29,900
Handmade dot CPP and I will go ahead and go.

670
00:27:30,000 --> 00:27:33,500
Include handmade .h, hear that.

671
00:27:33,500 --> 00:27:34,600
And I will compile.

672
00:27:34,900 --> 00:27:40,800
Okay, so in here, we have to actually pretend that we implemented that

673
00:27:40,800 --> 00:27:41,500
at least a little.

674
00:27:41,900 --> 00:27:44,500
So now what I want to show you is basically I'm going to talk a little

675
00:27:44,500 --> 00:27:44,800
bit.

676
00:27:45,000 --> 00:27:47,700
Actually we talked at length about what I just did there, but in the

677
00:27:47,700 --> 00:27:50,700
interim just before I go into that, I'm going to show you exactly what

678
00:27:50,700 --> 00:27:52,700
I mean now so you can be 100% clear on that.

679
00:27:52,700 --> 00:27:56,500
So basically, what's going to happen is we start off in the platform

680
00:27:56,500 --> 00:27:57,700
specific layer, right?

681
00:27:57,700 --> 00:27:59,800
The platform's of thick layer is still controlling.

682
00:28:00,000 --> 00:28:04,000
Like it was when we were Windows, only, it does all of the Windows

683
00:28:04,000 --> 00:28:06,200
startup stuff that it was going to do, right?

684
00:28:06,200 --> 00:28:10,000
It does the same things, but then when it's ready to actually do game

685
00:28:10,000 --> 00:28:10,800
work, right?

686
00:28:10,800 --> 00:28:12,300
When it's ready to do game work.

687
00:28:12,500 --> 00:28:16,600
It calls into the platform nonspecific layer of our code where all the

688
00:28:16,600 --> 00:28:17,900
rest of our code will live.

689
00:28:17,900 --> 00:28:22,800
Basically, from now on then, whenever it gets to the point where it

690
00:28:22,800 --> 00:28:24,500
needs a platform service.

691
00:28:24,600 --> 00:28:28,300
Again, when it needs to do something that only the platform knows how

692
00:28:28,300 --> 00:28:29,800
to do file IO.

693
00:28:29,900 --> 00:28:33,500
So, Network IO, Graphics, display, whatever it happens to be.

694
00:28:34,200 --> 00:28:38,300
Then it is going to go ahead and call out right, that call out, then

695
00:28:38,300 --> 00:28:42,600
goes right back in to the platform layer, that platform layer Fields.

696
00:28:42,600 --> 00:28:46,800
The call, does the windows Pacific Linux specific Mac specific thing

697
00:28:46,800 --> 00:28:50,700
here, whatever that happens to be returns back and things continue as

698
00:28:50,700 --> 00:28:52,100
normal, okay?

699
00:28:53,400 --> 00:28:55,300
Now, I said I was gonna talk about two ways right now.

700
00:28:55,300 --> 00:28:58,200
I'm talking about just the basics that is going to be shared between

701
00:28:58,200 --> 00:28:58,800
both ways.

702
00:28:59,200 --> 00:29:03,500
This is, I would argue the more common more modern way of doing

703
00:29:03,500 --> 00:29:04,500
cross-platform code.

704
00:29:04,500 --> 00:29:08,100
I don't think a lot of people advocate for doing the first method that

705
00:29:08,100 --> 00:29:09,400
I talked about anymore.

706
00:29:09,400 --> 00:29:13,900
I don't think you would see a lot of people strenuously arguing that.

707
00:29:13,900 --> 00:29:16,700
No, it's better to have all these if desk throughout the code.

708
00:29:16,700 --> 00:29:19,400
I think this what I said right there would be relatively

709
00:29:19,400 --> 00:29:20,300
uncontroversial.

710
00:29:20,500 --> 00:29:22,600
You never know programming things somehow.

711
00:29:22,700 --> 00:29:24,900
To be controversial even when you think they wouldn't be.

712
00:29:25,400 --> 00:29:28,600
But I suspect you would not get a lot of people going.

713
00:29:28,600 --> 00:29:29,600
No, you need pound.

714
00:29:29,600 --> 00:29:30,300
If dust everywhere.

715
00:29:30,300 --> 00:29:31,400
That's fantastic.

716
00:29:33,400 --> 00:29:39,800
So now we get to the two possible ways of using the technique of I

717
00:29:39,800 --> 00:29:42,500
just described, which creates sort of two different philosophical

718
00:29:42,500 --> 00:29:46,000
camps for how the platform code should be written.

719
00:29:46,000 --> 00:29:48,300
I fall into the latter Camp.

720
00:29:48,600 --> 00:29:50,900
I think most people fall into the former Camp.

721
00:29:50,900 --> 00:29:54,100
So I am not going to tell you that one of these is wrong and one of

722
00:29:54,100 --> 00:29:54,600
these is right.

723
00:29:54,600 --> 00:29:59,000
I am going to tell you which one I prefer and why, but I would

724
00:29:59,000 --> 00:29:59,900
recommend that you

725
00:30:00,000 --> 00:30:01,400
You think about them yourself?

726
00:30:01,400 --> 00:30:02,300
Try them yourself?

727
00:30:02,300 --> 00:30:05,000
If you don't have experience with them and decide for yourself, which

728
00:30:05,000 --> 00:30:09,800
one you would like better and do that one because I do not have any

729
00:30:09,800 --> 00:30:09,900
idea.

730
00:30:09,900 --> 00:30:11,800
It is not an ideological war with me.

731
00:30:11,800 --> 00:30:13,300
I am not going to go 50 rounds.

732
00:30:13,300 --> 00:30:15,300
With someone telling them one is better when it's worth.

733
00:30:15,300 --> 00:30:18,600
I'd you can just tell you which one that I prefer and then you should

734
00:30:18,600 --> 00:30:21,100
make up your own mind about which one you prefer.

735
00:30:21,400 --> 00:30:25,300
So first before I go into those two, I'm going to tell you a little

736
00:30:25,300 --> 00:30:28,500
bit what I did with the build here because it's a little crazy and I

737
00:30:28,500 --> 00:30:29,700
realized that this is

738
00:30:30,000 --> 00:30:32,500
Thing that will be highly controversial, I guarantee you, but again,

739
00:30:32,700 --> 00:30:33,700
not even arguing for it.

740
00:30:33,700 --> 00:30:35,300
Just telling you how it's how I code.

741
00:30:36,600 --> 00:30:41,000
Normally the way people like to do build environments is when you have

742
00:30:41,000 --> 00:30:44,900
more than one file, which you almost always, do you start adding those

743
00:30:44,900 --> 00:30:46,600
files to this CL line here.

744
00:30:47,100 --> 00:30:49,700
And now, most people actually have a, much more complicated build

745
00:30:49,700 --> 00:30:50,400
system than this.

746
00:30:50,600 --> 00:30:53,400
So actually what they do is they have like a whole make system that

747
00:30:53,400 --> 00:30:56,200
lists a bunch of files and then figures out what their dependencies

748
00:30:56,200 --> 00:30:59,200
are and which ones have to be rebuilt and then call CL multiple times

749
00:30:59,200 --> 00:31:01,000
once for each file, that's we built our all.

750
00:31:01,000 --> 00:31:01,900
These are the sorts of things.

751
00:31:03,000 --> 00:31:05,400
Many, many, many, many, many different things you could go.

752
00:31:05,400 --> 00:31:07,600
You can spend forever looking at build environments.

753
00:31:07,700 --> 00:31:10,100
If you are interested in build environments, I recommend that you do.

754
00:31:10,100 --> 00:31:12,200
So it will not be something I ever cover on the stream.

755
00:31:12,300 --> 00:31:13,000
So there you go.

756
00:31:13,300 --> 00:31:14,400
You can go do that on your own.

757
00:31:15,700 --> 00:31:17,600
So that is what would normally happen.

758
00:31:17,600 --> 00:31:20,500
Even if you were using a minimal build process, you would often come

759
00:31:20,500 --> 00:31:24,600
in here and add handmade dot CPP onto the build line and you can pile

760
00:31:24,600 --> 00:31:25,200
up that way.

761
00:31:25,200 --> 00:31:26,600
I don't like to do that.

762
00:31:26,600 --> 00:31:29,100
I find that that just basically takes longer to compile.

763
00:31:29,500 --> 00:31:32,300
So what I do instead is I do something that a lot of people.

764
00:31:32,800 --> 00:31:35,900
All the unity build and it's a little confusing because it has nothing

765
00:31:35,900 --> 00:31:36,700
to do with unity.

766
00:31:36,700 --> 00:31:39,500
The game engine, which is what people probably think of when they hear

767
00:31:39,500 --> 00:31:40,200
Unity build.

768
00:31:40,600 --> 00:31:44,400
But actually what I am talking about is the concept that you just only

769
00:31:44,400 --> 00:31:49,500
have one conceptual translation unit in your entire project.

770
00:31:49,500 --> 00:31:53,800
And what that means is basically, win32 handmade is the only file you

771
00:31:53,800 --> 00:31:58,200
will ever compiled on win32 and Linux underscore, handmade dot CPP is

772
00:31:58,200 --> 00:32:02,000
the only file you'll ever compiled on Linux reasons that I like this.

773
00:32:02,400 --> 00:32:02,600
I like

774
00:32:02,700 --> 00:32:05,700
I like it because it means getting the build working on a new platform

775
00:32:05,700 --> 00:32:08,300
is absolutely as dumb.

776
00:32:08,300 --> 00:32:09,700
Simple as possible.

777
00:32:09,800 --> 00:32:14,400
You literally type the compiler and the platform file name.

778
00:32:15,500 --> 00:32:16,400
And it builds.

779
00:32:16,400 --> 00:32:17,300
That's it.

780
00:32:17,300 --> 00:32:19,200
There's like nothing else that can go wrong.

781
00:32:19,200 --> 00:32:22,700
I mean, sometimes if you require these sort of things like I did here

782
00:32:22,700 --> 00:32:25,300
and you don't try to do automatic determination of the platform.

783
00:32:25,300 --> 00:32:26,900
Then you have to be able to do that.

784
00:32:27,100 --> 00:32:29,100
That is really about it.

785
00:32:29,300 --> 00:32:30,900
I like how dumb simple that is.

786
00:32:30,900 --> 00:32:33,900
I like how it means that you won't spend any time fussing with your

787
00:32:33,900 --> 00:32:34,900
build environment.

788
00:32:35,100 --> 00:32:37,300
The other reason that I like it is, it means you never have to

789
00:32:37,300 --> 00:32:38,200
forward, declare anything.

790
00:32:38,200 --> 00:32:41,800
If you don't want to H, files are largely optional at this point

791
00:32:41,900 --> 00:32:44,900
because since everything is in the same translation unit, basically,

792
00:32:44,900 --> 00:32:45,100
if you

793
00:32:45,300 --> 00:32:47,700
Just stack things up in the order that you expect to call them.

794
00:32:47,800 --> 00:32:50,800
It kind of just works and you can get rid of all the duplicate typing

795
00:32:50,900 --> 00:32:52,900
that you have to type for, for declarations.

796
00:32:52,900 --> 00:32:56,100
It's a minor benefit, but it helps the other thing that I seem to

797
00:32:56,100 --> 00:32:59,700
notice about it, is, it is crazy fast compared to how long it takes.

798
00:33:00,000 --> 00:33:02,100
Compile things not doing it this way.

799
00:33:02,100 --> 00:33:05,000
I feel like there's just a lot of startup time for the compiler, a lot

800
00:33:05,000 --> 00:33:06,800
of overhead and including things.

801
00:33:06,800 --> 00:33:07,500
I don't know.

802
00:33:07,700 --> 00:33:10,300
I don't pretend to know the reasons for that because I've never worked

803
00:33:10,300 --> 00:33:11,400
on a commercial compiler.

804
00:33:11,800 --> 00:33:15,100
So I couldn't tell you but all I know is it is a lot faster to compile

805
00:33:15,100 --> 00:33:16,600
a single-file than it is compiled.

806
00:33:16,600 --> 00:33:20,300
Lots of files that just seems to be the case and I have not found a

807
00:33:20,300 --> 00:33:22,500
situation so far where that hasn't been the case.

808
00:33:22,500 --> 00:33:25,000
So you get a speed win too and I'm all for that.

809
00:33:25,100 --> 00:33:26,500
So, that is what I did right here.

810
00:33:26,500 --> 00:33:29,000
Instead of doing basically putting handmade in here.

811
00:33:29,000 --> 00:33:29,800
I stuck it in here.

812
00:33:30,000 --> 00:33:32,500
If we're going to be getting a little more formal with how we do that,

813
00:33:32,600 --> 00:33:34,400
but for now, that's really all we need to do.

814
00:33:35,400 --> 00:33:39,700
And so that is pretty much how you would set up the build for now and

815
00:33:39,700 --> 00:33:40,200
forever.

816
00:33:40,200 --> 00:33:41,700
That's really the end of it.

817
00:33:42,100 --> 00:33:44,400
That is how I will be doing it pretty much till the end of the

818
00:33:44,400 --> 00:33:45,500
project, I suspect.

819
00:33:48,500 --> 00:33:53,800
Okay, so let's talk about the two philosophical branches.

820
00:33:53,800 --> 00:33:56,000
We can go down and I'll tell you the one, I'm going to be going down

821
00:33:56,000 --> 00:33:58,300
so that you understand the differences in can see them.

822
00:33:59,000 --> 00:33:59,600
All right.

823
00:33:59,900 --> 00:34:04,300
So one way and I'll start with with the way that I think is more

824
00:34:04,300 --> 00:34:08,199
prevalent today so that you can understand the way that most people I

825
00:34:08,199 --> 00:34:09,100
think do this.

826
00:34:09,699 --> 00:34:15,100
So, one way to do the cross-platform code is basically to virtualize

827
00:34:15,400 --> 00:34:17,400
the operating system out.

828
00:34:17,800 --> 00:34:18,500
To the game.

829
00:34:19,300 --> 00:34:20,400
Now, what do I mean by that?

830
00:34:20,500 --> 00:34:25,300
What I mean by that is that instead of thinking as the game as sort of

831
00:34:25,300 --> 00:34:29,400
an isolated entity and that the platform code is working with the game

832
00:34:29,400 --> 00:34:30,900
or any of these sorts of things.

833
00:34:31,300 --> 00:34:31,699
Instead.

834
00:34:31,699 --> 00:34:36,100
What you're thinking of is just literally abstracting the literal

835
00:34:36,100 --> 00:34:41,600
operation, the specific operation of the platform, abstracting that

836
00:34:41,600 --> 00:34:47,000
into a virtual set of calls that your game can call as if it was

837
00:34:47,000 --> 00:34:47,400
running.

838
00:34:47,600 --> 00:34:49,699
Being on a that virtual operating system.

839
00:34:50,600 --> 00:34:53,900
So what that normally looks like is after you enter win main, for

840
00:34:53,900 --> 00:34:57,400
example, you will call gain main, right?

841
00:34:57,400 --> 00:34:59,700
Well, you won't call that way, but you'll call Game Main.

842
00:35:00,000 --> 00:35:03,900
And then, inside handmade dot CPP, you will have game main.

843
00:35:04,000 --> 00:35:07,800
Okay, and then, what will happen in game main is, you will start

844
00:35:07,800 --> 00:35:12,400
calling the platform layer to do various things platform layer open

845
00:35:12,400 --> 00:35:15,700
window, and you will tell it to open a window for you and you will get

846
00:35:15,700 --> 00:35:17,400
back a platform window.

847
00:35:17,600 --> 00:35:18,800
Like this kind of a thing.

848
00:35:18,900 --> 00:35:23,900
Okay, you will then say platform layer open sound device or something

849
00:35:23,900 --> 00:35:25,900
like this, open the sound device.

850
00:35:27,200 --> 00:35:27,700
Right?

851
00:35:27,900 --> 00:35:32,400
And you will get back a sound device and I'm making these names up,

852
00:35:32,400 --> 00:35:33,700
but this is basically it.

853
00:35:34,300 --> 00:35:37,700
You will then go through and essentially do all of the startup code

854
00:35:37,700 --> 00:35:40,500
that you would normally do for an operating system.

855
00:35:40,500 --> 00:35:43,300
If you are writing in that operating system directly, but instead of

856
00:35:43,300 --> 00:35:46,100
ever actually calling an actual operating system and asking it for

857
00:35:46,100 --> 00:35:46,600
something.

858
00:35:47,100 --> 00:35:47,600
Instead.

859
00:35:47,600 --> 00:35:51,000
You are always calling a virtual operating system that you have made

860
00:35:51,000 --> 00:35:53,100
up in your head, right?

861
00:35:53,100 --> 00:35:56,800
And defined in some H file and then it is

862
00:35:56,900 --> 00:35:59,800
Is doing the work behind the scenes necessary to?

863
00:36:00,000 --> 00:36:04,800
Do all the stuff on actual Windows, actual Linux, actual Mac, OS, X,

864
00:36:04,800 --> 00:36:05,300
right?

865
00:36:06,000 --> 00:36:08,700
You're actually calling all of those things and it's doing the work

866
00:36:08,700 --> 00:36:11,800
behind the scenes to make it appear as if you were running on this

867
00:36:11,800 --> 00:36:13,900
magical operating system at the end.

868
00:36:13,900 --> 00:36:16,200
You would have game, shut down and game.

869
00:36:16,200 --> 00:36:18,200
Shutdown will do the same things.

870
00:36:18,300 --> 00:36:18,800
It will do.

871
00:36:18,800 --> 00:36:22,700
Platform close window, right, that sort of stuff.

872
00:36:22,700 --> 00:36:24,500
I don't know why I was calling this platform layer.

873
00:36:24,500 --> 00:36:25,300
That's not what I said.

874
00:36:25,300 --> 00:36:25,800
It would do.

875
00:36:25,900 --> 00:36:28,100
You will be doing things like this, right?

876
00:36:28,100 --> 00:36:29,600
You will call platform close.

877
00:36:30,000 --> 00:36:31,200
Device, right?

878
00:36:31,500 --> 00:36:33,600
And hopefully this is all pretty understandable.

879
00:36:33,600 --> 00:36:34,500
What this would be doing.

880
00:36:34,500 --> 00:36:38,300
Basically, if you look back at our win32 handmade, you can always sort

881
00:36:38,300 --> 00:36:39,200
of see what would happen.

882
00:36:39,400 --> 00:36:41,100
This platform open window call.

883
00:36:41,100 --> 00:36:44,000
We would go in here and we would take this code.

884
00:36:44,000 --> 00:36:48,700
Write this code here that opens a window, we would extract that code,

885
00:36:49,100 --> 00:36:50,800
we would put it inside the platform.

886
00:36:50,800 --> 00:36:51,900
Open window call.

887
00:36:51,900 --> 00:36:55,800
We would take the H wind, we would wrap that in this platform windows

888
00:36:55,800 --> 00:36:57,400
struct, make it opaque.

889
00:36:58,000 --> 00:36:59,400
And then, basically, we would have a

890
00:37:00,100 --> 00:37:04,600
This version of all the things that we did in win32, handmade dot CPP,

891
00:37:05,200 --> 00:37:05,800
make sense.

892
00:37:06,200 --> 00:37:07,800
It's very straightforward to do.

893
00:37:08,000 --> 00:37:09,700
I don't think you would run into a lot of problems.

894
00:37:09,700 --> 00:37:11,300
If you want to try this yourself.

895
00:37:11,400 --> 00:37:14,600
I feel like, you know, there isn't a lot of nuance to it.

896
00:37:14,600 --> 00:37:15,800
It's fairly straightforward.

897
00:37:15,900 --> 00:37:19,500
So if you want to try that and that way sounds attractive to you, then

898
00:37:19,500 --> 00:37:20,700
you can go and give that a shot.

899
00:37:20,700 --> 00:37:22,800
Like I said, I do not want to be ideological about it.

900
00:37:22,800 --> 00:37:24,800
So I would not say, don't do that.

901
00:37:24,800 --> 00:37:27,000
If that seems like the way that you would like to do it.

902
00:37:27,000 --> 00:37:29,500
You should give it a try and it should be fairly straightforward.

903
00:37:29,500 --> 00:37:29,600
It's

904
00:37:29,900 --> 00:37:30,100
Actly.

905
00:37:30,100 --> 00:37:32,300
What I just said, you take all of the things that you're going to do

906
00:37:32,300 --> 00:37:33,000
and you abstract them.

907
00:37:33,000 --> 00:37:33,100
Now.

908
00:37:33,100 --> 00:37:35,200
I'll give you a little hint in case you want to do this.

909
00:37:35,200 --> 00:37:38,700
Since I won't be spending a lot of time talking about that method

910
00:37:38,700 --> 00:37:39,900
because we're not going to use it.

911
00:37:40,100 --> 00:37:42,500
You may ask, how do you return the opaque stuff?

912
00:37:42,800 --> 00:37:43,200
Right?

913
00:37:43,300 --> 00:37:45,100
How do you do this platform window thing?

914
00:37:45,500 --> 00:37:48,100
Well, the way that you do that is actually pretty straightforward.

915
00:37:48,200 --> 00:37:52,600
You can do something like this inside, inside handmade outage, right?

916
00:37:52,600 --> 00:37:53,500
You can call.

917
00:37:53,600 --> 00:37:55,600
In fact, I'll just I'll just go ahead and do one of these for you just

918
00:37:55,600 --> 00:37:56,300
so you can see.

919
00:37:56,300 --> 00:37:58,700
Because it's like I said, if you want if you end up feeling more

920
00:37:58,700 --> 00:37:59,800
comfortable with this method,

921
00:38:00,000 --> 00:38:01,400
I highly encourage you to do that.

922
00:38:01,400 --> 00:38:04,400
You should always program in the idiom that feels most comfortable to

923
00:38:04,400 --> 00:38:04,700
you.

924
00:38:04,800 --> 00:38:06,000
You should not programming away.

925
00:38:06,000 --> 00:38:08,500
Just because I said, so or somebody else on the web said so that's a

926
00:38:08,500 --> 00:38:10,700
poor reason to choose a particular way.

927
00:38:10,900 --> 00:38:13,200
So just in case you want to pick this method, I'm going to show you

928
00:38:13,200 --> 00:38:14,700
how to do a couple things in it.

929
00:38:14,800 --> 00:38:15,900
I think that's a good idea.

930
00:38:15,900 --> 00:38:18,500
That way people will be set up for Success if they choose to go that

931
00:38:18,500 --> 00:38:20,500
route and don't have any experience with this.

932
00:38:20,900 --> 00:38:21,200
Okay.

933
00:38:21,200 --> 00:38:25,400
So if we were to do this and we want to do the open window thing,

934
00:38:25,400 --> 00:38:26,000
right?

935
00:38:26,300 --> 00:38:29,800
We would do something like this, we would declare a struct.

936
00:38:29,900 --> 00:38:31,400
But we wouldn't say how it is.

937
00:38:31,400 --> 00:38:33,100
So we basically just do a declaration.

938
00:38:33,100 --> 00:38:34,600
We would never Define The Struck.

939
00:38:34,600 --> 00:38:36,000
We would just declare it outside.

940
00:38:36,000 --> 00:38:36,300
Here.

941
00:38:36,300 --> 00:38:38,500
I'm gonna get rid of the platform load file because that doesn't

942
00:38:38,500 --> 00:38:39,500
actually exist anymore.

943
00:38:39,500 --> 00:38:41,200
We're that that was just my example there.

944
00:38:41,600 --> 00:38:44,700
So we're going to say platform open window and you know, maybe it

945
00:38:44,700 --> 00:38:45,100
passes.

946
00:38:45,100 --> 00:38:49,100
Let's say the title 22 the window that it wants to open.

947
00:38:49,100 --> 00:38:50,100
I don't know what it's gonna pass here.

948
00:38:50,100 --> 00:38:52,100
But other stuff right whatever you wanted.

949
00:38:52,100 --> 00:38:54,800
Maybe you want the dimensions to pass whatever you think you want to

950
00:38:54,800 --> 00:38:55,700
pass their you pass.

951
00:38:56,100 --> 00:38:59,800
Okay, and then I have another thing which is closed platform.

952
00:39:00,000 --> 00:39:00,400
Window.

953
00:39:01,800 --> 00:39:04,800
And that's going to take that same window handle, right, that same

954
00:39:04,800 --> 00:39:07,100
window, handle, and it's going to close the window.

955
00:39:07,600 --> 00:39:11,100
So what we do then is inside wind inside our Windows platform layer

956
00:39:11,100 --> 00:39:11,900
here, right?

957
00:39:12,000 --> 00:39:17,500
We would Implement those by first defining, the platform window in

958
00:39:17,500 --> 00:39:18,800
here, right?

959
00:39:18,800 --> 00:39:21,100
Because one of the interesting things that you have to remember is the

960
00:39:21,100 --> 00:39:24,100
win32 code is only going to be compiled on win32.

961
00:39:24,100 --> 00:39:26,300
And the Linux code is only going to be compiled on Linux.

962
00:39:26,600 --> 00:39:30,500
That means we can actually have two different definitions for platform

963
00:39:30,500 --> 00:39:30,900
window.

964
00:39:32,200 --> 00:39:36,700
We can have two totally different definitions for platform window that

965
00:39:36,700 --> 00:39:40,600
don't actually have to be the same, so we can in our platform window

966
00:39:40,600 --> 00:39:41,700
here, right?

967
00:39:41,800 --> 00:39:44,000
We can store the H win handle, right?

968
00:39:44,000 --> 00:39:48,200
This is the, the handle and inside our Linux one, right in.

969
00:39:48,200 --> 00:39:49,100
Our Linux one.

970
00:39:49,300 --> 00:39:51,400
We do exactly the same stuff.

971
00:39:51,400 --> 00:39:52,000
Right?

972
00:39:52,000 --> 00:39:54,900
But instead we would do whatever the X thing is here.

973
00:39:54,900 --> 00:39:57,100
I don't remember, but I think its capital window or something like

974
00:39:57,100 --> 00:39:57,900
this, right?

975
00:39:58,100 --> 00:39:59,400
That's like, you know what?

976
00:39:59,400 --> 00:40:00,300
I think it's that

977
00:40:01,100 --> 00:40:01,600
I could be wrong.

978
00:40:01,600 --> 00:40:02,300
In fact, on X.

979
00:40:02,300 --> 00:40:04,400
You may not even be able to do some of these things.

980
00:40:04,400 --> 00:40:05,300
You may not even be able use Windows.

981
00:40:05,300 --> 00:40:06,900
I think they do some crazy stuff like that.

982
00:40:06,900 --> 00:40:07,500
I'm not sure.

983
00:40:07,700 --> 00:40:08,600
I don't remember.

984
00:40:08,700 --> 00:40:11,100
I wrote my ex platform code a while back and having looked at it

985
00:40:11,100 --> 00:40:11,300
since.

986
00:40:11,300 --> 00:40:13,900
But point being there's something that goes here, right?

987
00:40:13,900 --> 00:40:16,400
And it's whatever the x windows platform handle is.

988
00:40:16,400 --> 00:40:21,000
So this is the X Windows window, type would go right there, right?

989
00:40:22,200 --> 00:40:24,600
So then you just put the code in there, right?

990
00:40:24,700 --> 00:40:27,000
You create a new one of these, right?

991
00:40:27,000 --> 00:40:28,700
So you're going to have to allocate it, right?

992
00:40:28,700 --> 00:40:31,200
Whether with malloc or whatever you want to use for allocation, will

993
00:40:31,200 --> 00:40:33,400
be talking about allocations a lot and I'll show you how I want to do

994
00:40:33,400 --> 00:40:33,500
them.

995
00:40:33,500 --> 00:40:35,400
But however you want to do your allocations is fine.

996
00:40:35,600 --> 00:40:37,600
So you allocate it here, right?

997
00:40:37,800 --> 00:40:41,600
And you make one of these things, this is the result, you then do all

998
00:40:41,600 --> 00:40:43,500
this code that you were going to do.

999
00:40:43,500 --> 00:40:48,100
And the create window, you know, this equals the handle equals the

1000
00:40:48,100 --> 00:40:50,800
result of create window here, right?

1001
00:40:50,900 --> 00:40:51,800
And then you just return

1002
00:40:52,200 --> 00:40:53,400
That okay?

1003
00:40:53,700 --> 00:40:56,700
And then in here when you get a new one in, you've just look, is it

1004
00:40:56,700 --> 00:40:57,200
valid?

1005
00:40:57,200 --> 00:41:00,300
If it is valid you would do your clothes window right on it or

1006
00:41:00,300 --> 00:41:03,600
whatever you'd ask window to do it and that'd be it.

1007
00:41:03,700 --> 00:41:05,700
So it's really really straightforward.

1008
00:41:05,700 --> 00:41:06,500
If you do want to do this.

1009
00:41:06,500 --> 00:41:10,600
Basically, you just wrap up the types in your own opaque handle in

1010
00:41:10,600 --> 00:41:12,300
your platform nonspecific part.

1011
00:41:12,300 --> 00:41:13,800
You just don't tell them what it is.

1012
00:41:13,800 --> 00:41:15,300
You don't let them know at all.

1013
00:41:15,300 --> 00:41:15,800
You haven't?

1014
00:41:15,800 --> 00:41:16,600
They have no idea.

1015
00:41:16,600 --> 00:41:19,100
So they can't accidentally use it and start creating platform

1016
00:41:19,100 --> 00:41:20,000
dependent code.

1017
00:41:20,300 --> 00:41:21,800
And then on each platform, you define.

1018
00:41:22,000 --> 00:41:26,200
Version of that struck that encapsulates, the things that you need and

1019
00:41:26,200 --> 00:41:28,400
you're done and that's all there is to it.

1020
00:41:28,400 --> 00:41:30,500
It's really nothing more complicated than that.

1021
00:41:30,500 --> 00:41:33,100
So hopefully that makes some sense.

1022
00:41:33,300 --> 00:41:34,500
We're not going to do that.

1023
00:41:34,700 --> 00:41:38,600
But if you did want to do that, then you would be Off to the Races.

1024
00:41:38,600 --> 00:41:41,100
So, you know, you're you're good to go with that point.

1025
00:41:42,100 --> 00:41:46,000
So, let me make sure we're back to normal here, trying to get rid of

1026
00:41:46,000 --> 00:41:51,200
some of this stuff so that I don't leave old demo code around, get rid

1027
00:41:51,200 --> 00:41:53,600
of that, get rid of that.

1028
00:41:53,900 --> 00:41:55,600
And now we are back to square one.

1029
00:41:55,600 --> 00:41:56,100
I believe.

1030
00:41:56,100 --> 00:41:58,200
Let's just verify that we are back to square one.

1031
00:41:58,200 --> 00:41:59,300
We're still running, right?

1032
00:41:59,300 --> 00:41:59,900
Everyone is

1033
00:42:00,000 --> 00:42:00,300
Fee.

1034
00:42:00,600 --> 00:42:01,400
They assume.

1035
00:42:01,900 --> 00:42:02,300
Yes.

1036
00:42:02,300 --> 00:42:04,100
It does appear to be.

1037
00:42:04,100 --> 00:42:04,800
Why is that?

1038
00:42:04,800 --> 00:42:05,000
What?

1039
00:42:05,000 --> 00:42:06,200
Why are we going nuts?

1040
00:42:06,200 --> 00:42:06,600
There?

1041
00:42:07,100 --> 00:42:08,500
That is not a good dead zone at all.

1042
00:42:08,500 --> 00:42:09,900
Why are we scrolling like that?

1043
00:42:09,900 --> 00:42:13,000
Oh, does it, does it look like that's what's going on.

1044
00:42:13,000 --> 00:42:14,600
Did you see how crazy that was scrolling?

1045
00:42:15,100 --> 00:42:16,000
What was going on there?

1046
00:42:17,100 --> 00:42:17,200
Yeah.

1047
00:42:17,200 --> 00:42:20,400
It looks like it looks like the controller just wasn't initialized

1048
00:42:20,400 --> 00:42:20,800
yet.

1049
00:42:20,800 --> 00:42:23,100
So it was giving back some, craving it with sudo initialize.

1050
00:42:23,100 --> 00:42:23,600
I don't know.

1051
00:42:23,900 --> 00:42:27,200
It's kind of weird how these xinput joysticks behave when we get to

1052
00:42:27,200 --> 00:42:28,200
Windows shipping code.

1053
00:42:28,200 --> 00:42:29,800
I wonder if we'll have to do some stuff there.

1054
00:42:30,000 --> 00:42:33,900
Or if my if my maybe just cause we haven't implemented, any dead zone

1055
00:42:33,900 --> 00:42:34,600
handling or something.

1056
00:42:34,600 --> 00:42:35,100
I don't know.

1057
00:42:35,100 --> 00:42:37,900
Maybe it's nothing to concern about but it was a little wonky point

1058
00:42:37,900 --> 00:42:39,100
being we don't need to care about that.

1059
00:42:39,100 --> 00:42:39,700
The moment though.

1060
00:42:40,900 --> 00:42:43,700
All right, so hopefully that all made some good sense.

1061
00:42:43,700 --> 00:42:46,400
And if you would like to go out and Implement your platform layer that

1062
00:42:46,400 --> 00:42:49,500
way, hopefully you can kind of see how that would happen.

1063
00:42:49,600 --> 00:42:51,200
It's really not that complicated to do.

1064
00:42:51,200 --> 00:42:52,200
You just start going?

1065
00:42:52,400 --> 00:42:52,900
Okay?

1066
00:42:52,900 --> 00:42:56,400
I don't actually like doing things that way, the reason that I don't

1067
00:42:56,400 --> 00:43:00,200
like doing the things that way is that it is a more expressive

1068
00:43:00,200 --> 00:43:04,300
interface to me than necessary.

1069
00:43:07,300 --> 00:43:08,300
And what do I mean by that?

1070
00:43:09,500 --> 00:43:12,800
Well, an operating system is designed to do all sorts of things.

1071
00:43:13,100 --> 00:43:15,500
It's designed for applications that want more than one window.

1072
00:43:15,600 --> 00:43:17,600
It's designed for applications that don't want a window.

1073
00:43:17,800 --> 00:43:20,000
It's designed for applications that will open windows closed, windows

1074
00:43:20,000 --> 00:43:21,700
open, Windows, and close windows again, open windows.

1075
00:43:21,700 --> 00:43:24,500
Again, it's designed for applications that show up in the start menu

1076
00:43:24,500 --> 00:43:27,900
that appear in this task bar, that do all sorts of things.

1077
00:43:27,900 --> 00:43:32,300
Like use the component object model and why the old embed themselves

1078
00:43:32,300 --> 00:43:33,100
in other applications.

1079
00:43:33,100 --> 00:43:36,000
And use habla, clue object, linking and embedding register themselves

1080
00:43:36,000 --> 00:43:39,200
in the registry integrated into the shell and operating.

1081
00:43:39,800 --> 00:43:42,700
Supports a huge amount of flexibility.

1082
00:43:42,900 --> 00:43:45,100
And one could argue that that's fine.

1083
00:43:45,700 --> 00:43:47,900
We don't need to criticize the operating system for doing that.

1084
00:43:47,900 --> 00:43:51,800
Maybe that's the operating systems job, but when it comes to a game,

1085
00:43:51,800 --> 00:43:53,200
we do have to ask ourselves.

1086
00:43:54,500 --> 00:43:55,100
Do we need that?

1087
00:43:55,100 --> 00:43:55,800
Flexibility?

1088
00:43:56,200 --> 00:43:59,800
Is our game going to be opening multiple windows is our game going to

1089
00:43:59,800 --> 00:44:02,100
need to open and close windows open and close them open and close them

1090
00:44:02,100 --> 00:44:04,700
open and close them of its own volition, right?

1091
00:44:04,700 --> 00:44:07,500
Not even response to an operating system message where we could just

1092
00:44:07,500 --> 00:44:11,000
handle it in the operating system layer, but does the game need to

1093
00:44:11,000 --> 00:44:12,400
know that those things ever happened?

1094
00:44:12,800 --> 00:44:15,100
Does our game need to even know what a window is.

1095
00:44:15,100 --> 00:44:15,900
Does it care?

1096
00:44:15,900 --> 00:44:17,700
What a window is at all.

1097
00:44:18,000 --> 00:44:19,400
Does it need to know about sound devices?

1098
00:44:19,400 --> 00:44:23,100
Or does it only want to give us back a stream of sound, right?

1099
00:44:23,700 --> 00:44:24,200
And what?

1100
00:44:24,300 --> 00:44:29,100
Usually argue, is that you don't want to add all that complexity to

1101
00:44:29,100 --> 00:44:29,800
the platform layer.

1102
00:44:29,800 --> 00:44:34,500
If you don't have to what I'd much rather do is Define things.

1103
00:44:34,500 --> 00:44:40,100
The other way around, instead of the platform layer, being a series of

1104
00:44:40,100 --> 00:44:44,100
services, provided to the game that the the game, then constructs a

1105
00:44:44,100 --> 00:44:45,900
running application out of in much.

1106
00:44:45,900 --> 00:44:48,900
The same way that a normal winter you to application would use the

1107
00:44:48,900 --> 00:44:50,300
operating system directly.

1108
00:44:51,300 --> 00:44:54,200
I prefer to think of the game as

1109
00:44:54,300 --> 00:44:59,200
services to the operating system level to produce the graphics and

1110
00:44:59,200 --> 00:44:59,800
sound.

1111
00:45:00,600 --> 00:45:02,000
Necessary to play the game.

1112
00:45:02,700 --> 00:45:02,800
Now.

1113
00:45:02,800 --> 00:45:04,100
Let me show you what I mean by that.

1114
00:45:05,100 --> 00:45:09,300
What I mean, is that really when we look at this platform layer that

1115
00:45:09,300 --> 00:45:13,100
we've already written, there isn't much of a compelling reason to

1116
00:45:13,100 --> 00:45:17,000
abstract any of it out of this code and allow it to be callable from

1117
00:45:17,000 --> 00:45:17,600
the game layer.

1118
00:45:17,600 --> 00:45:21,800
And in fact, you might actually argue that there are reasons not to do

1119
00:45:21,800 --> 00:45:21,900
that.

1120
00:45:21,900 --> 00:45:25,300
And those reasons are that when we actually start to tighten the

1121
00:45:25,300 --> 00:45:27,300
ratchet on this platform code.

1122
00:45:27,300 --> 00:45:28,100
There may be.

1123
00:45:28,100 --> 00:45:32,700
Lots of very complicated logic that we need to do in order to most

1124
00:45:32,700 --> 00:45:35,100
carefully adhere to the standards.

1125
00:45:35,200 --> 00:45:38,700
That platform, there may be tons of Windows messages, like device

1126
00:45:38,700 --> 00:45:39,200
change.

1127
00:45:39,200 --> 00:45:41,900
That tells us we need to move to a different monitor at that time.

1128
00:45:41,900 --> 00:45:42,400
Right?

1129
00:45:42,500 --> 00:45:45,400
There may be things like device removed that, the GamePad got

1130
00:45:45,400 --> 00:45:47,600
unplugged and then replugged again, right?

1131
00:45:48,000 --> 00:45:51,100
There may be all sorts of special things about like this device is a

1132
00:45:51,100 --> 00:45:53,600
pain and so the pain should be treated this way, but only in certain

1133
00:45:53,600 --> 00:45:56,300
circumstances and depending on whether you're active at the time or

1134
00:45:56,300 --> 00:45:56,900
not.

1135
00:45:57,600 --> 00:46:00,100
If you think about all those things, they're different for every

1136
00:46:00,100 --> 00:46:00,800
platform.

1137
00:46:00,800 --> 00:46:03,400
Every platform is completely different when it comes to these sorts of

1138
00:46:03,400 --> 00:46:03,600
things.

1139
00:46:03,600 --> 00:46:05,000
There's a lot of very important.

1140
00:46:05,100 --> 00:46:08,200
Differences, compare and contrast, something, like cocoa, and the code

1141
00:46:08,200 --> 00:46:11,300
that you write on Mac, OS, X with the code for say, Linux.

1142
00:46:11,400 --> 00:46:13,100
It's very, very different.

1143
00:46:13,800 --> 00:46:17,500
And so, what I would much rather do is just write all the operating

1144
00:46:17,500 --> 00:46:18,900
system code and let it be.

1145
00:46:18,900 --> 00:46:22,200
All tangly and weird and do all the things that it needs to do

1146
00:46:22,200 --> 00:46:23,600
specific to the operating system.

1147
00:46:24,500 --> 00:46:28,500
And then, the only thing the game ever does is respond to a few.

1148
00:46:28,500 --> 00:46:32,400
Very simple request, which are giving the stuff you want to draw.

1149
00:46:33,000 --> 00:46:34,500
Give me the sound you want to play.

1150
00:46:35,100 --> 00:46:38,200
And here is the users input, right?

1151
00:46:38,400 --> 00:46:41,300
If you think about it, there's really only three things that it needs

1152
00:46:41,300 --> 00:46:42,000
to provide.

1153
00:46:42,500 --> 00:46:45,300
And then on the back Channel, there's really only two things you ever

1154
00:46:45,300 --> 00:46:46,100
need to provide.

1155
00:46:46,300 --> 00:46:50,400
Please send this out the network for me, and I need to read or write

1156
00:46:50,400 --> 00:46:51,300
from a file now.

1157
00:46:53,800 --> 00:46:55,200
Not a whole lot there, right?

1158
00:46:56,100 --> 00:46:59,900
So what I would argue is you can drastically simplify the degree to

1159
00:46:59,900 --> 00:47:03,900
which your platform layer, inherits the complexity of its operating

1160
00:47:03,900 --> 00:47:09,700
system by not, forcing it to pass that complexity on to the game and

1161
00:47:09,700 --> 00:47:13,800
round-trip all of the logical operations through it.

1162
00:47:15,100 --> 00:47:16,400
Hopefully that makes some sense.

1163
00:47:16,600 --> 00:47:16,700
Now.

1164
00:47:16,700 --> 00:47:18,200
I'm going to show you how we do that.

1165
00:47:18,400 --> 00:47:22,300
Basically, all we have to do is isolate a few specific locations in

1166
00:47:22,300 --> 00:47:25,600
the code where the platform layer wants services from the game.

1167
00:47:25,700 --> 00:47:29,300
And then isolate a few specific Parts in the game where the game wants

1168
00:47:29,300 --> 00:47:31,200
services from the platform layer.

1169
00:47:31,600 --> 00:47:32,100
Okay.

1170
00:47:32,500 --> 00:47:37,100
So for example, when we are in here, right, you will notice that we

1171
00:47:37,100 --> 00:47:40,400
have a while loop and this is our Global running Loop that we wrote,

1172
00:47:40,400 --> 00:47:42,600
We process our messages here.

1173
00:47:42,900 --> 00:47:44,700
We get the input from the game.

1174
00:47:44,800 --> 00:47:46,000
Out here, right?

1175
00:47:46,000 --> 00:47:47,900
And this was test code but it's not that far.

1176
00:47:47,900 --> 00:47:49,800
From being regular code that we could ship.

1177
00:47:49,800 --> 00:47:52,400
There's things we would definitely do to it, but it's sort of getting

1178
00:47:52,400 --> 00:47:53,600
there right now.

1179
00:47:53,600 --> 00:47:57,300
You'll see, I've already kind of suggested to you what then should go

1180
00:47:57,300 --> 00:47:57,700
on.

1181
00:47:57,900 --> 00:47:59,800
Well, this right here, render weird.

1182
00:48:00,000 --> 00:48:02,500
Radiant, that's our render, right?

1183
00:48:02,500 --> 00:48:04,100
That's the thing that we rendered.

1184
00:48:04,100 --> 00:48:04,300
Now.

1185
00:48:04,300 --> 00:48:06,200
We just have a faux thing sitting in there.

1186
00:48:06,400 --> 00:48:09,500
But that's basically the thing that renders for the game.

1187
00:48:09,500 --> 00:48:15,400
So I can just say game update and render right here and say this is

1188
00:48:15,400 --> 00:48:16,800
where it's going to do.

1189
00:48:16,800 --> 00:48:18,700
It's updating and rendering, right?

1190
00:48:18,900 --> 00:48:23,700
And what I expect this to do right here, I expect this guy.

1191
00:48:23,900 --> 00:48:24,200
Oops.

1192
00:48:26,700 --> 00:48:28,900
I'm going to put a little note in here, right?

1193
00:48:30,500 --> 00:48:31,700
Note, Casey.

1194
00:48:34,000 --> 00:48:35,000
Services.

1195
00:48:36,400 --> 00:48:41,500
That the game provides to the platform layer, right?

1196
00:48:42,200 --> 00:48:46,500
Game update and render is one of them and

1197
00:48:48,700 --> 00:48:51,600
I don't even know if we're going to need any more of them at the

1198
00:48:51,600 --> 00:48:52,500
moment.

1199
00:48:54,600 --> 00:48:56,400
That may be it.

1200
00:48:57,800 --> 00:48:59,200
Maybe they'll be some more, right?

1201
00:49:01,600 --> 00:49:03,400
And then here, we're going to have services.

1202
00:49:04,500 --> 00:49:06,000
About the platform layer.

1203
00:49:08,600 --> 00:49:11,600
Provides to the game, right?

1204
00:49:11,900 --> 00:49:14,600
And we're not even going to fill those in yet because that stuff,

1205
00:49:14,600 --> 00:49:15,300
like, load file.

1206
00:49:15,300 --> 00:49:19,500
And, like, I think I've said before, if you happen to read my blog,

1207
00:49:20,300 --> 00:49:23,200
I'm a big fan of semantic compression or basically compression

1208
00:49:23,200 --> 00:49:26,800
oriented programming, which means you should never write something in

1209
00:49:26,800 --> 00:49:28,700
before you actually have it working.

1210
00:49:28,900 --> 00:49:31,700
And you should, you should never like presuppose that an API Works,

1211
00:49:31,700 --> 00:49:34,600
Victor, a should always pull out and develop the API from the ground

1212
00:49:34,600 --> 00:49:35,000
up.

1213
00:49:35,100 --> 00:49:36,400
So we happen to know.

1214
00:49:36,400 --> 00:49:38,200
This is exactly where we would want to do our stuff.

1215
00:49:38,400 --> 00:49:41,600
So I'm okay with saying that game updating rendered but then after

1216
00:49:41,600 --> 00:49:44,500
that, I think we're pretty much done with that.

1217
00:49:44,700 --> 00:49:46,200
I don't want to presuppose anymore.

1218
00:49:46,200 --> 00:49:47,900
So I should actually almost say to do here.

1219
00:49:47,900 --> 00:49:49,600
We'll add those in as we go.

1220
00:49:50,000 --> 00:49:50,500
Okay.

1221
00:49:50,800 --> 00:49:53,500
So basically what we want to do here is we want to say the game update

1222
00:49:53,500 --> 00:49:55,000
and render, right?

1223
00:49:55,200 --> 00:49:59,100
We want that to basically do the rendering into that bitmap, that we

1224
00:49:59,100 --> 00:49:59,600
set up.

1225
00:49:59,600 --> 00:50:02,000
So we should probably pass the bitmap here to the game so it can draw

1226
00:50:02,000 --> 00:50:02,400
into it.

1227
00:50:02,400 --> 00:50:02,900
Right?

1228
00:50:03,400 --> 00:50:04,900
And then we also want to pass it.

1229
00:50:04,900 --> 00:50:05,700
The sound.

1230
00:50:05,700 --> 00:50:08,200
We want to basically pass in a buffer so we can get sound back.

1231
00:50:08,300 --> 00:50:11,000
Back the sound that we're going to play for this buffer, right?

1232
00:50:11,900 --> 00:50:16,100
So we're going to do those two things, and then at the end of it, it

1233
00:50:16,100 --> 00:50:17,700
should pretty much do the output.

1234
00:50:17,700 --> 00:50:18,800
We've got our output working.

1235
00:50:18,800 --> 00:50:19,900
We've got some timing code in here.

1236
00:50:19,900 --> 00:50:22,400
We should probably take this stuff out for now because we don't

1237
00:50:22,400 --> 00:50:24,800
actually care about this printf at all.

1238
00:50:24,800 --> 00:50:26,200
So, I'll get rid of that for now.

1239
00:50:27,700 --> 00:50:28,300
There we go.

1240
00:50:29,000 --> 00:50:29,300
I don't know.

1241
00:50:29,300 --> 00:50:30,700
What display the value here.

1242
00:50:30,700 --> 00:50:33,700
Is that some old comment comments are always out of date as Jonathan.

1243
00:50:33,700 --> 00:50:36,200
Blow says, comments are always out of date.

1244
00:50:38,900 --> 00:50:39,100
Hm.

1245
00:50:40,600 --> 00:50:41,900
Well, we got a lot of comments around daycare.

1246
00:50:41,900 --> 00:50:43,100
Sorry to jump in here.

1247
00:50:43,300 --> 00:50:44,600
I think I could murder a road in.

1248
00:50:44,600 --> 00:50:45,500
And was mentioning these.

1249
00:50:45,700 --> 00:50:48,700
We did change to using a lower latency already.

1250
00:50:48,700 --> 00:50:49,900
We already did that.

1251
00:50:50,400 --> 00:50:51,400
Yeah, oops.

1252
00:50:52,000 --> 00:50:52,600
Oops.

1253
00:50:52,900 --> 00:50:53,500
Yeah.

1254
00:50:53,900 --> 00:50:54,500
Let's see.

1255
00:50:54,600 --> 00:50:56,100
Do we have sine wave?

1256
00:50:56,400 --> 00:50:57,000
Do we do it?

1257
00:50:57,000 --> 00:50:57,200
Yes.

1258
00:50:57,200 --> 00:50:58,400
Switch to a sine wave.

1259
00:50:58,500 --> 00:50:59,800
Yeah, we've got a lot of things in here.

1260
00:51:00,000 --> 00:51:00,800
Did switch the sign.

1261
00:51:00,800 --> 00:51:03,000
We're not taking our to do is out after we actually do them.

1262
00:51:03,100 --> 00:51:04,000
We should start to look for that.

1263
00:51:04,000 --> 00:51:07,700
But anyway, so, okay, sorry, back to the story as it goes.

1264
00:51:07,900 --> 00:51:10,400
Sometimes you gotta stop and just go what's going on in there?

1265
00:51:10,400 --> 00:51:11,700
What is going on in there?

1266
00:51:12,000 --> 00:51:12,300
All right.

1267
00:51:12,300 --> 00:51:15,700
So basically, all we need to do is we need to have our game update and

1268
00:51:15,700 --> 00:51:20,300
render basically needs to provide us, a new bitmap, and a new piece of

1269
00:51:20,300 --> 00:51:23,000
sound and it needs to take in the input.

1270
00:51:23,000 --> 00:51:23,500
Right?

1271
00:51:23,500 --> 00:51:27,100
So we need to pass it essentially, three things, right?

1272
00:51:27,700 --> 00:51:29,900
Game update and render needs to take

1273
00:51:30,000 --> 00:51:31,700
Take three things.

1274
00:51:31,700 --> 00:51:33,700
It needs to take the input.

1275
00:51:33,900 --> 00:51:34,200
Right?

1276
00:51:34,200 --> 00:51:36,800
The controller keyboard input, right?

1277
00:51:36,800 --> 00:51:39,300
It needs to take the bitmap to Output.

1278
00:51:39,600 --> 00:51:40,200
Right?

1279
00:51:40,300 --> 00:51:42,100
And it needs to take the sound output.

1280
00:51:42,900 --> 00:51:43,400
Right?

1281
00:51:43,500 --> 00:51:46,500
It needs to take the sound buffer bitmap buffer.

1282
00:51:47,000 --> 00:51:48,700
I guess I should say to use instead of Doubt.

1283
00:51:48,700 --> 00:51:49,800
Put right?

1284
00:51:49,800 --> 00:51:52,600
So, let's go take the controller keyboard input in, you know what,

1285
00:51:52,600 --> 00:51:53,500
let's call it for things.

1286
00:51:53,500 --> 00:51:56,400
Let's Spanish Inquisition that because we're also going to need timing

1287
00:51:56,400 --> 00:51:59,800
because if you were doing a locked timer, if you were, if you were

1288
00:52:00,100 --> 00:52:01,500
Have a game that had a fixed frame rate.

1289
00:52:01,500 --> 00:52:03,400
So it always ran at 60 frames a second.

1290
00:52:03,700 --> 00:52:05,000
Then that's all you would need, right?

1291
00:52:05,000 --> 00:52:07,100
You wouldn't pass any timing information into it.

1292
00:52:07,600 --> 00:52:11,600
But in this particular case, since we are not doing that, we are going

1293
00:52:11,600 --> 00:52:13,300
to do a flexible frame rate for the game.

1294
00:52:13,400 --> 00:52:14,900
We need to pass in some timing information.

1295
00:52:14,900 --> 00:52:16,400
So the game has any idea what's going on.

1296
00:52:17,600 --> 00:52:20,900
So at the outset, we pretty much only need these things.

1297
00:52:21,000 --> 00:52:25,000
Now this may I'm going to put a note in here.

1298
00:52:25,000 --> 00:52:32,400
This may expand in the future to like sound on separate thread, Etc in

1299
00:52:32,400 --> 00:52:33,000
the future.

1300
00:52:33,000 --> 00:52:35,900
We may want this to be more complicated.

1301
00:52:35,900 --> 00:52:39,200
The calls may go from 1 to say 3 or something, right?

1302
00:52:39,400 --> 00:52:43,100
Because what we may want to do in the future is we may want to have it

1303
00:52:43,300 --> 00:52:47,300
such that we can have sound run on a different thread.

1304
00:52:47,900 --> 00:52:50,100
And get updated asynchronously or something like this.

1305
00:52:50,100 --> 00:52:53,800
And so we may want to have the game support calling it back in less of

1306
00:52:53,800 --> 00:52:56,800
a monolithic fashion, but we're not going to do that till we actually

1307
00:52:57,200 --> 00:52:58,200
know that we need it.

1308
00:52:58,300 --> 00:52:58,900
All right.

1309
00:52:58,900 --> 00:53:02,500
So basically all we're going to do is is if we run the game.

1310
00:53:02,500 --> 00:53:06,300
Now we can actually we've had a regression essentially, right?

1311
00:53:06,300 --> 00:53:12,300
We've had a, we've had a, we've gone backwards and functionality, if

1312
00:53:12,300 --> 00:53:15,000
we run the game now and the reason is because I took out our call to

1313
00:53:15,000 --> 00:53:17,200
render gradient, correct, like, if I

1314
00:53:17,400 --> 00:53:18,000
Look at this.

1315
00:53:18,100 --> 00:53:20,600
There's no more gradient because we're not calling it anymore.

1316
00:53:20,800 --> 00:53:23,800
So basically what I want to do, just to end the stream today now that

1317
00:53:23,800 --> 00:53:26,400
we've kind of seen the way we're doing platform Services is I would

1318
00:53:26,400 --> 00:53:30,200
like to basically pull out our first piece of platform-independent

1319
00:53:30,200 --> 00:53:32,000
code, which is render weird gradient.

1320
00:53:32,000 --> 00:53:35,500
Because if you look at it, you will notice that there is almost

1321
00:53:35,500 --> 00:53:36,500
nothing about it.

1322
00:53:36,600 --> 00:53:39,400
That is platform-specific this win32 off-screen.

1323
00:53:39,400 --> 00:53:44,200
Buffer is really the only part of it that for that which, that is

1324
00:53:44,200 --> 00:53:44,400
true.

1325
00:53:44,400 --> 00:53:47,300
So I'm going to go ahead and just pull that straight out, right?

1326
00:53:47,400 --> 00:53:51,000
I'm going to go ahead in here and drop into my handmade dot CPP, and

1327
00:53:51,000 --> 00:53:53,200
I'm going to stick that in here and you can see the only thing that we

1328
00:53:53,200 --> 00:53:54,100
really need to do.

1329
00:53:55,500 --> 00:53:59,700
Is we need to change this win32 specific thing to a non?

1330
00:54:00,000 --> 00:54:01,000
You two specific thing.

1331
00:54:01,100 --> 00:54:01,700
Right?

1332
00:54:01,700 --> 00:54:05,600
So all we really need to do is go here and take this struct, right?

1333
00:54:05,800 --> 00:54:10,800
This truck that we had and we need to make that something that is not

1334
00:54:10,800 --> 00:54:14,800
platform specific and really, it almost already is, right.

1335
00:54:14,800 --> 00:54:18,200
It almost already is something that is completely platform

1336
00:54:18,300 --> 00:54:19,400
nonspecific.

1337
00:54:19,600 --> 00:54:20,100
So,

1338
00:54:21,100 --> 00:54:24,300
if we take a very trivial step here, right?

1339
00:54:24,300 --> 00:54:26,300
We do game off-screen buffer.

1340
00:54:27,300 --> 00:54:29,100
We've got our blue offset in our green offset.

1341
00:54:29,100 --> 00:54:33,700
Their right got game, off-screen buffer, and we pass the buffer in to

1342
00:54:33,700 --> 00:54:36,000
this, then we will be able.

1343
00:54:36,400 --> 00:54:38,900
And I'm not saying this is how it should necessarily go in the final

1344
00:54:38,900 --> 00:54:42,300
thing, but we are sort of starting to get usually code goes through a

1345
00:54:42,300 --> 00:54:43,300
couple of Transformations.

1346
00:54:43,300 --> 00:54:45,500
First, so just be aware of that, but you can kind of see what I'm

1347
00:54:45,500 --> 00:54:46,000
doing here.

1348
00:54:46,400 --> 00:54:50,300
We'll start actually I guess I want to do in to do offset.

1349
00:54:51,000 --> 00:54:51,500
Offset.

1350
00:54:51,700 --> 00:54:55,200
Basically, what I want to do is just make it so up, five minute,

1351
00:54:55,200 --> 00:54:56,400
warning, almost out of time.

1352
00:54:56,400 --> 00:54:56,700
Good thing.

1353
00:54:56,700 --> 00:54:57,500
We're almost done.

1354
00:54:58,400 --> 00:55:00,900
I want to make it so that we can at least get something rendering

1355
00:55:00,900 --> 00:55:05,100
before the end of the stream so that you can see the first step in

1356
00:55:05,100 --> 00:55:05,900
platform-independent.

1357
00:55:05,900 --> 00:55:09,300
So basically, all I need to do now is make it so I have one of these

1358
00:55:09,300 --> 00:55:10,000
to pass.

1359
00:55:10,700 --> 00:55:12,300
Oops, those ants.

1360
00:55:12,800 --> 00:55:15,600
So really all I need to do is make sure that I can pass one of those

1361
00:55:15,800 --> 00:55:18,100
to this, and we can even do that in place here.

1362
00:55:18,100 --> 00:55:18,800
We can just say.

1363
00:55:18,800 --> 00:55:19,700
OK game off-screen.

1364
00:55:19,700 --> 00:55:20,700
Buffer is

1365
00:55:20,900 --> 00:55:22,100
is some kind of buffer.

1366
00:55:22,100 --> 00:55:28,000
The buffer has some memory write that memory comes from our win, 30

1367
00:55:28,000 --> 00:55:29,200
SQL string buffer.

1368
00:55:29,400 --> 00:55:31,800
We've got the with, you've got the height.

1369
00:55:32,000 --> 00:55:34,000
We've got the pitch, right?

1370
00:55:34,300 --> 00:55:36,000
And where were those guys?

1371
00:55:36,000 --> 00:55:40,700
Those guys were in our where did it go?

1372
00:55:41,600 --> 00:55:43,300
It's in our Global's here.

1373
00:55:44,700 --> 00:55:45,900
Darn you five minute warning.

1374
00:55:45,900 --> 00:55:48,700
You're using up my screen real estate Global back buffer.

1375
00:55:49,000 --> 00:55:50,200
That was what I was looking for.

1376
00:55:50,900 --> 00:55:58,100
All right, so Global black buffer memory Global bat buffered with and

1377
00:55:58,200 --> 00:55:58,500
lat.

1378
00:55:59,900 --> 00:56:00,500
Tight.

1379
00:56:01,100 --> 00:56:04,700
Like so just pulling those out, there should be good.

1380
00:56:04,700 --> 00:56:08,800
And then we just pass the address of that and there we go.

1381
00:56:08,800 --> 00:56:13,200
Now, if I run this, you will note that we are almost back to feature

1382
00:56:13,200 --> 00:56:13,800
parity.

1383
00:56:14,600 --> 00:56:17,800
You know, we've almost got it back to the place where we had it

1384
00:56:17,800 --> 00:56:18,100
before.

1385
00:56:18,100 --> 00:56:21,500
Now, we can achieve feature, parity pretty easily by passing blue

1386
00:56:21,500 --> 00:56:23,500
offset and green offset here, right?

1387
00:56:23,500 --> 00:56:26,300
If we wanted to do that, we could easily do that.

1388
00:56:26,300 --> 00:56:29,500
So, basically, if we said, for some reason that our thing,

1389
00:56:30,200 --> 00:56:34,300
This then we could easily have feature parity, which we should

1390
00:56:34,300 --> 00:56:37,500
probably do just for the end of the stream, just for fun.

1391
00:56:37,700 --> 00:56:38,600
I like that.

1392
00:56:39,000 --> 00:56:40,800
And let's see here.

1393
00:56:41,600 --> 00:56:43,300
What is, what is it actually called?

1394
00:56:43,300 --> 00:56:44,600
What is it called?

1395
00:56:45,000 --> 00:56:47,400
I thought it was blue offset, and green offset, but apparently does

1396
00:56:47,400 --> 00:56:47,700
not that.

1397
00:56:47,700 --> 00:56:50,600
It's X offset in y offset, right?

1398
00:56:50,600 --> 00:56:54,700
Because we were doing the two different ones X offset and Y offset.

1399
00:56:54,700 --> 00:56:58,500
So X offset y offset.

1400
00:57:01,000 --> 00:57:02,900
Okay, render that.

1401
00:57:03,300 --> 00:57:06,400
And now we should have back our controller and we do.

1402
00:57:06,800 --> 00:57:10,800
Okay, so I hope you can see how easy that is.

1403
00:57:10,900 --> 00:57:11,400
Right.

1404
00:57:11,700 --> 00:57:13,600
It's very, very straightforward.

1405
00:57:14,700 --> 00:57:16,800
That was not like a sleight of hand or anything.

1406
00:57:16,800 --> 00:57:19,000
For those of you who are unfamiliar with platform-independent

1407
00:57:20,300 --> 00:57:24,300
programming really is that simple will have to do a little bit more

1408
00:57:24,300 --> 00:57:24,700
here.

1409
00:57:24,900 --> 00:57:29,000
We're going to get a little fancier tomorrow obviously, but it is

1410
00:57:29,000 --> 00:57:30,000
really that simple.

1411
00:57:30,000 --> 00:57:33,800
All you have to do is Define a rigid boundary and then move things

1412
00:57:33,800 --> 00:57:38,400
across the boundary from the specific side to the nonspecific side as

1413
00:57:38,400 --> 00:57:39,100
necessary.

1414
00:57:39,400 --> 00:57:40,500
And pretty soon.

1415
00:57:40,500 --> 00:57:43,800
You'll be at the point where almost all the code you write will be on

1416
00:57:43,800 --> 00:57:44,400
the nonspecific.

1417
00:57:44,500 --> 00:57:46,900
Site, anyway, you won't need to write them in Windows.

1418
00:57:47,600 --> 00:57:50,000
But that's really all there is to it.

1419
00:57:50,200 --> 00:57:54,300
It is not very difficult to make very clean, very nice cross-platform

1420
00:57:54,300 --> 00:57:54,800
code.

1421
00:57:54,900 --> 00:57:58,900
A lot of people don't but that I think is literally just because they

1422
00:57:58,900 --> 00:58:01,600
haven't had the experience and don't know just how easy it is because

1423
00:58:01,600 --> 00:58:03,000
it actually is pretty darn easy.

1424
00:58:03,000 --> 00:58:05,900
If you just have a little bit of discipline to keep it that way,

1425
00:58:06,100 --> 00:58:08,000
pretty much through the entire project.

1426
00:58:08,800 --> 00:58:10,000
So yeah, so there's that.

1427
00:58:10,000 --> 00:58:13,500
So basically, what we've done is we've essentially nuked, our render

1428
00:58:13,500 --> 00:58:14,300
weird gradient call.

1429
00:58:14,400 --> 00:58:16,100
All right, it's gone now.

1430
00:58:16,200 --> 00:58:16,900
So that is one.

1431
00:58:16,900 --> 00:58:20,600
Nice, big chunk of code that got moved out and we are left with mostly

1432
00:58:20,800 --> 00:58:21,100
code.

1433
00:58:21,100 --> 00:58:23,700
The specific, the sine wave will be the one that will do tomorrow.

1434
00:58:23,700 --> 00:58:26,800
Probably, and then we'll look at the moving, the input as well.

1435
00:58:27,100 --> 00:58:31,000
But we are well on our way here at the end of the stream on day 11 to

1436
00:58:31,000 --> 00:58:34,800
essentially having cross-platform game set up ready to go.

1437
00:58:35,100 --> 00:58:38,500
And again, this will allow basically anyone who's trying to follow us

1438
00:58:38,500 --> 00:58:40,600
on Linux or Mac OS 10 to go use out.

1439
00:58:40,600 --> 00:58:42,300
You know what, this might be a good time.

1440
00:58:42,300 --> 00:58:44,200
Just before we get to the Q&A to

1441
00:58:44,500 --> 00:58:48,700
Shout out to David gal who has been doing some porting work.

1442
00:58:48,700 --> 00:58:52,500
If you go to the forum's, there is undercoating resources already,

1443
00:58:52,500 --> 00:58:54,300
even though this section is kind of construction.

1444
00:58:54,700 --> 00:58:56,300
There is a platform page in David.

1445
00:58:56,300 --> 00:58:59,700
Gal has contributed a little handmade penguin thing.

1446
00:58:59,900 --> 00:59:02,600
Basically what he does is he follows the stream and he shows you how

1447
00:59:02,600 --> 00:59:05,700
to do the same stuff, using the simple directmedia layer, which is

1448
00:59:05,700 --> 00:59:10,400
basically a cross-platform abstraction of windowing systems so that

1449
00:59:10,400 --> 00:59:12,300
you can run on Mac, OS, 10 and Linux.

1450
00:59:12,300 --> 00:59:14,300
And so on it is a

1451
00:59:14,400 --> 00:59:16,100
He well-respected Library.

1452
00:59:16,100 --> 00:59:18,700
The sdl is a lot of people ship games on it.

1453
00:59:18,800 --> 00:59:22,400
So if you were looking for a library to use to help you run on a

1454
00:59:22,400 --> 00:59:25,500
platform that you didn't understand or if you just want to use a

1455
00:59:25,500 --> 00:59:28,900
abstraction layer in general, that is probably a decent one to use.

1456
00:59:29,300 --> 00:59:32,600
But anyway point being he has ported that stuff and again, you can get

1457
00:59:32,600 --> 00:59:35,100
to that link pretty easily just going to coding resources.

1458
00:59:35,100 --> 00:59:35,800
It's right there.

1459
00:59:36,000 --> 00:59:39,100
So if you are following along at home, we are basically at the end of

1460
00:59:39,100 --> 00:59:39,500
this week.

1461
00:59:39,500 --> 00:59:42,500
We will probably have pulled most things out and we will be in

1462
00:59:42,900 --> 00:59:44,300
platform nonspecific land.

1463
00:59:44,500 --> 00:59:49,800
So you can follow along at home, exactly like you could if you were on

1464
00:59:49,800 --> 00:59:50,300
windows.

1465
00:59:50,300 --> 00:59:54,300
So hopefully that is giving you a little bit of a background in the

1466
00:59:54,300 --> 00:59:57,200
philosophy of cross-platform development and how it should work.

1467
00:59:57,200 --> 00:59:59,200
I've given you three different ways you could do it.

1468
00:59:59,300 --> 00:59:59,900
I've recommended

1469
01:00:00,000 --> 01:00:03,200
One of them but you are welcome to look at the other two and see what

1470
01:00:03,200 --> 01:00:04,400
you think of them yourself.

1471
01:00:04,500 --> 01:00:07,300
Practice them, a little maybe see what you think and come to your own

1472
01:00:07,300 --> 01:00:07,800
conclusion.

1473
01:00:08,200 --> 01:00:11,200
We will be continuing with this tomorrow at 8:00 p.m.

1474
01:00:11,600 --> 01:00:17,800
And I think now might be a good time to go into the Q&A, obviously, as

1475
01:00:17,800 --> 01:00:20,300
always, if you would like to have a copy of the source, you can

1476
01:00:20,300 --> 01:00:21,100
pre-order it.

1477
01:00:21,600 --> 01:00:25,100
You can pre-order it from handmade hero dot-org, right here, if you'd

1478
01:00:25,100 --> 01:00:27,700
like to and that will get you access to the source code.

1479
01:00:27,700 --> 01:00:29,600
I push it basically right after the stream every night.

1480
01:00:29,600 --> 01:00:29,800
So

1481
01:00:30,200 --> 01:00:33,600
Right away, you can get X to it and we will be putting the art assets

1482
01:00:34,000 --> 01:00:36,000
up as part of this pre-order as well.

1483
01:00:36,000 --> 01:00:38,200
So that if you want to follow along with the artists as we use, once

1484
01:00:38,200 --> 01:00:40,700
we start doing a graphics and sound and stuff.

1485
01:00:40,800 --> 01:00:41,800
They'll be in there too.

1486
01:00:41,900 --> 01:00:43,700
And think that's about it.

1487
01:00:43,700 --> 01:00:46,500
I've got some notes that I want to talk about in the Q&A, just some

1488
01:00:46,500 --> 01:00:52,500
cleanup from before, but I will look at questions first and we will

1489
01:00:52,500 --> 01:00:56,200
talk about those as time permits.

1490
01:00:56,400 --> 01:00:59,800
Okay, let's go to the Q&A.

1491
01:01:00,000 --> 01:01:01,700
And a please prefix.

1492
01:01:01,700 --> 01:01:03,700
Your questions with a at.

1493
01:01:03,700 --> 01:01:08,100
See me oratory if you can because that is the only way that I will see

1494
01:01:08,100 --> 01:01:10,500
them because I got a little scanner that scans them.

1495
01:01:10,500 --> 01:01:14,100
So if you want me to answer the question, then you will have to put

1496
01:01:14,100 --> 01:01:14,600
that in there.

1497
01:01:14,600 --> 01:01:15,800
So please put that in there.

1498
01:01:18,900 --> 01:01:21,300
Let's take a look here.

1499
01:01:24,700 --> 01:01:27,500
Someone says seems unsafe to include the platform independent code

1500
01:01:27,500 --> 01:01:29,200
after including the platform specific headers.

1501
01:01:29,300 --> 01:01:33,900
Yes, that is true to an extent when we clean this up and we could do

1502
01:01:33,900 --> 01:01:34,500
this right now.

1503
01:01:34,500 --> 01:01:35,600
Actually, you can already do it.

1504
01:01:35,600 --> 01:01:40,000
If you'd like to, you can definitely do stuff where you where you're

1505
01:01:40,000 --> 01:01:42,500
sort of change the way these definition orders come.

1506
01:01:42,500 --> 01:01:47,200
So, for example, you can do something more like this and of course,

1507
01:01:47,200 --> 01:01:50,300
you will still need the standard definitions of the type because we

1508
01:01:50,300 --> 01:01:52,700
were using those, when we can move them down, if you wanted to move

1509
01:01:52,700 --> 01:01:53,700
them like this.

1510
01:01:54,300 --> 01:01:55,400
It would still work just fine.

1511
01:01:55,400 --> 01:01:59,000
And the reason for that is basically because if you do not trust

1512
01:01:59,000 --> 01:02:03,900
yourself or even if you trust yourself, just fine, but you don't trust

1513
01:02:03,900 --> 01:02:04,600
windows.

1514
01:02:04,800 --> 01:02:06,600
And that is a pretty reasonable thing.

1515
01:02:06,600 --> 01:02:09,800
Windows defines a lot of stupid macros, the stuff that overrides stuff

1516
01:02:09,800 --> 01:02:13,300
in your code, for example, so if you want to be a little more isolated

1517
01:02:13,300 --> 01:02:14,900
and this is probably something I would recommend as well.

1518
01:02:14,900 --> 01:02:17,100
We just hadn't gotten there yet, since it came up in the question.

1519
01:02:17,100 --> 01:02:17,900
We might as well talk about it.

1520
01:02:17,900 --> 01:02:22,000
Now, putting as much of your code above, the windows include as

1521
01:02:22,000 --> 01:02:23,600
possible is usually a good thing.

1522
01:02:23,700 --> 01:02:27,500
There is no reason to put that stuff in here because we really should

1523
01:02:27,500 --> 01:02:31,800
just leave all of our platform nonspecific code outside of it so that

1524
01:02:31,800 --> 01:02:33,700
it can't see any of Windows and isn't bothered by it.

1525
01:02:33,700 --> 01:02:36,500
Because remember, we're basically creating one giant file.

1526
01:02:36,800 --> 01:02:39,300
We're basically creating one giant file filled with pound includes.

1527
01:02:39,300 --> 01:02:40,600
That's just all the code.

1528
01:02:40,600 --> 01:02:43,400
And so rather than lb including windows at the top so that everyone

1529
01:02:43,400 --> 01:02:45,500
can see the stuff from Windows, you might as well put it at the

1530
01:02:45,500 --> 01:02:47,500
bottom, so that nobody gets there.

1531
01:02:47,800 --> 01:02:49,700
I wouldn't necessarily call it unsafe.

1532
01:02:49,800 --> 01:02:53,500
I think the person who asked the question said, unsafe, but of course,

1533
01:02:53,500 --> 01:02:53,600
you

1534
01:02:53,800 --> 01:02:57,300
It in quotes, I wouldn't say unsafe, but it is just probably better

1535
01:02:57,300 --> 01:02:59,800
practice, not to because, again, windows can Define.

1536
01:03:00,000 --> 01:03:03,400
Defines and stuff in there that you don't want interfering with your

1537
01:03:03,400 --> 01:03:03,800
code.

1538
01:03:03,800 --> 01:03:06,800
And so it's probably just better, it's less aggravating because

1539
01:03:06,800 --> 01:03:09,300
otherwise you're going to go to their summer and you're going to call

1540
01:03:09,300 --> 01:03:09,700
something.

1541
01:03:09,700 --> 01:03:12,000
Like, I don't know, like create directory.

1542
01:03:12,100 --> 01:03:13,300
You're going to make a function called that.

1543
01:03:13,300 --> 01:03:14,700
And then find that, your code goes all wonky.

1544
01:03:14,700 --> 01:03:16,900
Because Windows has pound to find it to be create direct create

1545
01:03:16,900 --> 01:03:18,200
directory, a, or something like this.

1546
01:03:18,200 --> 01:03:19,400
And it's messing with you.

1547
01:03:22,600 --> 01:03:23,800
Let's see.

1548
01:03:23,900 --> 01:03:26,700
Would you always orchestrate how you do threading in the platform

1549
01:03:26,700 --> 01:03:28,900
layer or does it make sense for the platform where to also provide a

1550
01:03:28,900 --> 01:03:30,600
more generic threading job service.

1551
01:03:31,600 --> 01:03:33,900
So I always would orchestrate it in the platform layer.

1552
01:03:33,900 --> 01:03:36,400
And the reason for that is because you don't really know how the

1553
01:03:36,400 --> 01:03:38,900
platform wants to handle threading in that way.

1554
01:03:39,100 --> 01:03:41,900
It may threading, often times in games.

1555
01:03:42,200 --> 01:03:42,600
Oh great.

1556
01:03:42,600 --> 01:03:44,400
My cord has caught here.

1557
01:03:44,400 --> 01:03:44,800
There we go.

1558
01:03:45,000 --> 01:03:45,500
Threading.

1559
01:03:45,500 --> 01:03:50,500
Often times in games, is directly tied to Resource Management in a lot

1560
01:03:50,500 --> 01:03:51,100
of places.

1561
01:03:51,300 --> 01:03:51,800
So there's

1562
01:03:52,300 --> 01:03:54,300
Just do computation stuff and that's fine.

1563
01:03:54,600 --> 01:03:58,400
But there are also threads that are tied to servicing resource

1564
01:03:58,400 --> 01:04:01,700
Readiness file IO Network IO, things like this.

1565
01:04:01,900 --> 01:04:06,100
And a lot of times you really need that to be an integral part of your

1566
01:04:06,100 --> 01:04:07,100
threading scheme.

1567
01:04:07,200 --> 01:04:09,400
And so I find that keeping that stuff in the platform.

1568
01:04:09,400 --> 01:04:10,100
Layer is better.

1569
01:04:10,300 --> 01:04:13,100
If there's something that every single platform is doing the same.

1570
01:04:13,100 --> 01:04:14,900
Then that's a perfect candidate for hoisting.

1571
01:04:14,900 --> 01:04:16,600
It out into the platform nonspecific layer.

1572
01:04:16,800 --> 01:04:20,200
But really The Meta thing to say is basically, don't move anything

1573
01:04:20,200 --> 01:04:21,800
into the platform nonspecific layer.

1574
01:04:22,000 --> 01:04:24,400
That is actually different on each platform.

1575
01:04:24,500 --> 01:04:28,700
So if you go ahead and make open window into a virtual thing, like I

1576
01:04:28,700 --> 01:04:32,200
was saying before not virtual, but a thing that you're actually game

1577
01:04:32,200 --> 01:04:36,500
is calling that suggests that there's some bonus in Saving, the fact

1578
01:04:36,500 --> 01:04:38,900
that a window is going to be open, so that you want to do it multiple

1579
01:04:38,900 --> 01:04:42,100
times, but you're going to do that in every platform and in every

1580
01:04:42,100 --> 01:04:42,400
platform.

1581
01:04:42,400 --> 01:04:44,200
It's different code and a different procedure.

1582
01:04:44,400 --> 01:04:46,000
So you don't actually gain anything.

1583
01:04:46,000 --> 01:04:48,900
You just add complexity by having it have two ping-pong back and

1584
01:04:48,900 --> 01:04:49,400
forth.

1585
01:04:49,400 --> 01:04:51,900
So really, what I try to do in the reason that I like this, the

1586
01:04:52,000 --> 01:04:54,700
Dirty method better the method where it's just a service, has a strict

1587
01:04:54,700 --> 01:04:59,500
strict service layer back and forth is based on because it gets rid of

1588
01:04:59,500 --> 01:05:03,100
all that cruft, all that extraneous, unimportant interface.

1589
01:05:08,900 --> 01:05:10,500
Let's see.

1590
01:05:14,000 --> 01:05:16,900
You said last stream that you didn't really like showing the FPS

1591
01:05:16,900 --> 01:05:18,300
because you didn't find it useful.

1592
01:05:18,300 --> 01:05:19,300
Can you explain that?

1593
01:05:19,400 --> 01:05:22,100
Yeah, it's because it's a what, it's an inverse number.

1594
01:05:22,400 --> 01:05:25,700
I don't really like thinking about it because you're like how many

1595
01:05:25,900 --> 01:05:29,500
cycles did that code, take how many milliseconds to that code?

1596
01:05:29,500 --> 01:05:32,400
Take, that's like a direct measured thing.

1597
01:05:32,900 --> 01:05:35,300
And so you're just talking about the thing that you actually care

1598
01:05:35,300 --> 01:05:35,900
about.

1599
01:05:36,100 --> 01:05:37,300
But with frames per second.

1600
01:05:37,300 --> 01:05:39,300
It's like 1 over that thing, right?

1601
01:05:39,300 --> 01:05:42,800
If your game took 14 milliseconds to render, right?

1602
01:05:43,000 --> 01:05:43,100
Right.

1603
01:05:43,100 --> 01:05:47,600
I mean, well, I hear it's really easy to sort of show you what I mean,

1604
01:05:47,800 --> 01:05:48,300
right?

1605
01:05:48,800 --> 01:05:51,200
So basically, maybe, oh, you know what?

1606
01:05:51,200 --> 01:05:52,700
I think I might even have.

1607
01:05:52,800 --> 01:05:56,900
Do I have LibreOffice calc on here, okay.

1608
01:05:58,000 --> 01:05:59,200
LibreOffice calc.

1609
01:06:00,000 --> 01:06:00,600
Me up.

1610
01:06:01,100 --> 01:06:01,300
There.

1611
01:06:01,300 --> 01:06:01,700
It is.

1612
01:06:01,700 --> 01:06:03,500
The document Foundation, ladies and gentleman.

1613
01:06:03,500 --> 01:06:05,700
I don't know what that is, but they make a free spreadsheet and I

1614
01:06:05,700 --> 01:06:06,600
thank them for that.

1615
01:06:07,000 --> 01:06:10,300
So let's say we have milliseconds and frames per second, right?

1616
01:06:10,500 --> 01:06:13,300
So let's look at what the MS are for our game here.

1617
01:06:13,500 --> 01:06:20,400
Let's just say we basically have everything from like essentially

1618
01:06:20,700 --> 01:06:25,000
extraordinarily fast way higher than any game will ever run all the

1619
01:06:25,000 --> 01:06:27,900
way out to see there.

1620
01:06:28,100 --> 01:06:29,900
Something like 30 frames a

1621
01:06:30,000 --> 01:06:31,000
S, right.

1622
01:06:32,000 --> 01:06:33,500
30 frames/second is pretty common.

1623
01:06:33,800 --> 01:06:39,000
So I'm going to say that we basically have one over right or sorry.

1624
01:06:39,000 --> 01:06:44,400
I should say 1000 milliseconds over that right over the whatever the

1625
01:06:44,400 --> 01:06:45,200
millisecond is.

1626
01:06:45,400 --> 01:06:49,000
And so this is how many frames per second, we should be getting right?

1627
01:06:49,200 --> 01:06:53,400
And then I'm going to turn off all the crazy decimal points there.

1628
01:06:53,400 --> 01:06:58,100
So, you can kind of see what ends up happening with our number format

1629
01:06:58,100 --> 01:06:58,900
cells.

1630
01:07:00,200 --> 01:07:02,300
Like that, there we go.

1631
01:07:02,800 --> 01:07:03,400
All right.

1632
01:07:03,800 --> 01:07:07,800
So what you can look at here and hopefully this will make a little bit

1633
01:07:07,800 --> 01:07:11,400
of sense is let's say that I sped up my code.

1634
01:07:11,500 --> 01:07:15,300
So I actually took a piece of code that was taking four milliseconds

1635
01:07:15,400 --> 01:07:17,700
and I spread sped it up by two milliseconds.

1636
01:07:17,700 --> 01:07:19,000
So I cut out a fair bit of time.

1637
01:07:19,300 --> 01:07:20,500
So I went from four to two.

1638
01:07:20,700 --> 01:07:23,900
Well, that's 250 frames a second to 500 frames a second.

1639
01:07:23,900 --> 01:07:28,400
So if you looked at that, you'd say, oh, 500 minus 250, right?

1640
01:07:28,600 --> 01:07:29,800
500 - 250.

1641
01:07:29,900 --> 01:07:32,900
That's a difference of 250 frames per second.

1642
01:07:32,900 --> 01:07:33,600
That's massive.

1643
01:07:33,600 --> 01:07:34,200
Right?

1644
01:07:34,200 --> 01:07:37,000
Well, let's say I did the exact same thing down here, right?

1645
01:07:37,000 --> 01:07:38,800
And I sped up a code that I sped up code.

1646
01:07:38,800 --> 01:07:42,900
That took 33 milliseconds, 231 milliseconds, right?

1647
01:07:42,900 --> 01:07:48,000
Well, that was like, saying, oh, I went from from 30 to 40 to 30

1648
01:07:48,000 --> 01:07:50,000
frames a second to 32 frames a second, right?

1649
01:07:50,000 --> 01:07:50,900
32 to 34.

1650
01:07:51,100 --> 01:07:52,200
So it's a 32 32.

1651
01:07:52,400 --> 01:07:54,200
That's a difference of two frames per second.

1652
01:07:54,300 --> 01:07:56,500
The same speed up in code.

1653
01:07:56,500 --> 01:07:59,800
The same reduction in number of Cycles executed results in

1654
01:08:00,000 --> 01:08:03,200
In 50 frames a second difference versus two frames a second

1655
01:08:03,200 --> 01:08:03,700
difference.

1656
01:08:04,000 --> 01:08:07,700
So the fact that it's an inverse number creates this nasty thing where

1657
01:08:07,700 --> 01:08:09,000
you don't even know what you're talking about.

1658
01:08:09,000 --> 01:08:10,700
All I got three more frames per second.

1659
01:08:10,700 --> 01:08:14,000
Well, out of where were you when you started?

1660
01:08:14,000 --> 01:08:16,600
I need to know that to know whether that was good or lousy, right?

1661
01:08:16,600 --> 01:08:19,300
It might be awesome or it might be irrelevant.

1662
01:08:19,300 --> 01:08:19,899
Right?

1663
01:08:20,000 --> 01:08:23,100
So talking about milliseconds is just way easier because it talks

1664
01:08:23,100 --> 01:08:26,100
about the actual thing you actually cared about and it lets you know,

1665
01:08:26,100 --> 01:08:27,600
how impactful that change was.

1666
01:08:27,700 --> 01:08:29,800
Whereas looking at frames a second is just confusing.

1667
01:08:29,899 --> 01:08:30,200
It.

1668
01:08:30,300 --> 01:08:32,000
So I wouldn't necessarily say, don't use them.

1669
01:08:32,000 --> 01:08:34,300
If you like using them, you can use them and if you understand them,

1670
01:08:34,600 --> 01:08:35,399
well, then that's fine.

1671
01:08:35,399 --> 01:08:37,399
But that's why I don't like frames per second.

1672
01:08:37,399 --> 01:08:41,000
I really only ever print out frames per second at the end of things,

1673
01:08:41,000 --> 01:08:44,500
so that I could translate that into whether we're hitting 30, or 60

1674
01:08:44,500 --> 01:08:47,399
hertz, because those are industry standard benchmarks.

1675
01:08:47,500 --> 01:08:51,399
Basically, you've got, you got three levels, you're looking at, you

1676
01:08:51,399 --> 01:08:54,000
know, if you're a game, you're looking at, you're looking at these

1677
01:08:54,000 --> 01:08:56,000
three breaking points here, right?

1678
01:08:56,399 --> 01:08:57,600
I don't know how to highlight those.

1679
01:08:57,800 --> 01:08:59,700
These are your three breaking points for a game.

1680
01:09:00,000 --> 01:09:02,200
You've got 11 milliseconds per frame.

1681
01:09:02,399 --> 01:09:04,300
If you can hit that, you can run in VR.

1682
01:09:05,399 --> 01:09:07,000
You got 60 milliseconds per frame.

1683
01:09:07,000 --> 01:09:07,600
You can hit that.

1684
01:09:07,600 --> 01:09:08,800
You can lock 60, hertz on a.

1685
01:09:08,800 --> 01:09:13,100
So a 1080p, nice, smooth display, and if you can hit 33, then you're

1686
01:09:13,100 --> 01:09:14,800
at least nice and smooth.

1687
01:09:15,300 --> 01:09:18,200
You look animated your 30 frames a second, anything below that and

1688
01:09:18,200 --> 01:09:20,200
you're totally, you know, you're done.

1689
01:09:20,600 --> 01:09:22,399
But those are your three breaking points, right?

1690
01:09:23,200 --> 01:09:24,800
And so, you know,

1691
01:09:25,899 --> 01:09:28,700
I just find it easier to think about the most, like, ants there and

1692
01:09:28,700 --> 01:09:30,300
then just use these as kind of guidelines.

1693
01:09:30,300 --> 01:09:31,800
For, when you're talking about industry numbers.

1694
01:09:31,800 --> 01:09:32,800
You can kind of remember.

1695
01:09:32,800 --> 01:09:35,600
Oh, yeah, like, you know, what frames per second on my app because

1696
01:09:35,600 --> 01:09:36,600
that's what people quote.

1697
01:09:36,600 --> 01:09:37,800
Hopefully, that answer the question.

1698
01:09:41,800 --> 01:09:43,300
Okay.

1699
01:09:45,600 --> 01:09:46,200
um,

1700
01:09:49,200 --> 01:09:51,200
On the scale from genius to totally awesome.

1701
01:09:51,200 --> 01:09:52,899
How can you remember all this?

1702
01:09:53,300 --> 01:09:57,800
So it is really not a scale of Genius to awesome as well.

1703
01:09:57,900 --> 01:10:02,000
It is basically just the fact that actually I'm making tons of

1704
01:10:02,000 --> 01:10:04,700
mistakes and that is exactly what will happen to you too.

1705
01:10:04,700 --> 01:10:09,200
When you learn all this, I missed eight things all the time or my

1706
01:10:09,200 --> 01:10:14,400
knowledge is out of date things in Computing, world move so fast, so I

1707
01:10:14,400 --> 01:10:16,900
am telling you the knowledge that I built up over 30 years, so it

1708
01:10:16,900 --> 01:10:18,600
seems like a lot, but, you know,

1709
01:10:19,100 --> 01:10:22,900
Basically, my knowledge is, is always a little out of date, and every

1710
01:10:22,900 --> 01:10:27,400
last little thing we do on the stream with, with perhaps, the perhaps

1711
01:10:27,400 --> 01:10:30,700
the caveat of the architecture, which may be more of a Timeless thing

1712
01:10:30,800 --> 01:10:32,500
at least in C and C++.

1713
01:10:33,800 --> 01:10:36,600
With the exception of that, like, it appears that I know what I'm

1714
01:10:36,600 --> 01:10:39,500
talking about because I'm showing you lots of things and they work

1715
01:10:39,500 --> 01:10:42,700
well, but there's always better things than what I'm showing you

1716
01:10:42,700 --> 01:10:46,000
because someone just invented a new algorithm that's better in the

1717
01:10:46,000 --> 01:10:48,800
cache and because processors change the way they did it.

1718
01:10:48,900 --> 01:10:51,100
And so the way that I used to do it is now the not the fastest way

1719
01:10:51,100 --> 01:10:53,300
anymore or I didn't even know the fastest way at the time because

1720
01:10:53,300 --> 01:10:54,200
someone else had it.

1721
01:10:54,600 --> 01:10:59,500
So basically what I would say is try to consider the things that I'm

1722
01:10:59,500 --> 01:11:00,200
telling you.

1723
01:11:00,600 --> 01:11:03,700
They may sound impressive when they're coming out because you don't

1724
01:11:03,700 --> 01:11:08,900
already know them but really there's way more genius down the line and

1725
01:11:08,900 --> 01:11:14,000
so if you can if you have time as you learn these things to read more

1726
01:11:14,000 --> 01:11:17,600
about them, you will find that there is Real Genius Behind these

1727
01:11:17,600 --> 01:11:18,800
things that you can do that.

1728
01:11:19,000 --> 01:11:22,300
More than what I'm doing and I would highly recommend that you do

1729
01:11:22,300 --> 01:11:22,500
that.

1730
01:11:22,500 --> 01:11:24,600
I'm basically giving you the first Passover view.

1731
01:11:24,800 --> 01:11:26,100
That's not so genius.

1732
01:11:26,100 --> 01:11:27,400
It's just the whole picture.

1733
01:11:27,400 --> 01:11:30,600
It's like here's how you do everything reasonably.

1734
01:11:30,900 --> 01:11:34,400
And then for each individual part, you can go spend a lifetime

1735
01:11:34,600 --> 01:11:38,600
learning about that one part and being the Real Genius at it and you

1736
01:11:38,600 --> 01:11:40,400
will write code much better than me.

1737
01:11:40,800 --> 01:11:44,100
If you do that, I guarantee you that pretty much anything you pick in

1738
01:11:44,100 --> 01:11:44,400
here.

1739
01:11:44,600 --> 01:11:48,500
If you go dedicate five years to mastering it, you will be

1740
01:11:48,900 --> 01:11:52,600
Writing code, far superior than the thing that I show in this dream

1741
01:11:53,000 --> 01:11:56,000
without question, because there's always that much to learn and

1742
01:11:56,000 --> 01:11:59,800
there's always Hardware improvements and changes that radically shift.

1743
01:12:00,200 --> 01:12:02,900
The right way or the shouldn't say the right way, but the best way to

1744
01:12:02,900 --> 01:12:03,600
do something.

1745
01:12:03,800 --> 01:12:06,100
And so, there's always an expert.

1746
01:12:06,100 --> 01:12:08,800
And if you want to become an expert in that thing, the things that I'm

1747
01:12:08,800 --> 01:12:11,700
saying that you are flatteringly calling genius.

1748
01:12:11,700 --> 01:12:15,500
Now, you will think we're just stupid and misguided when you become an

1749
01:12:15,500 --> 01:12:17,100
expert in that thing.

1750
01:12:22,400 --> 01:12:25,700
Do we currently have a hidden platform dependency inside the bitmap

1751
01:12:25,700 --> 01:12:26,900
memory or is be gra.

1752
01:12:26,900 --> 01:12:28,900
Something that happens on the other platforms to.

1753
01:12:29,400 --> 01:12:31,200
So we do have a little bit.

1754
01:12:32,100 --> 01:12:35,500
So basically what I would like to say about that right now is you

1755
01:12:35,500 --> 01:12:39,300
could totally do the game this way and it would not be a problem.

1756
01:12:39,400 --> 01:12:42,800
Every platform will be able to specify will be able to display a BGR

1757
01:12:42,800 --> 01:12:46,600
or an RGB XX bitmap for us.

1758
01:12:47,100 --> 01:12:51,400
However, it will in the future and in fact, I can put a note here for

1759
01:12:51,400 --> 01:12:52,100
anyone who wants to know.

1760
01:12:52,700 --> 01:13:01,600
In the future rendering specifically will become a three-tiered

1761
01:13:01,600 --> 01:13:02,800
abstraction.

1762
01:13:05,200 --> 01:13:06,200
Let us leave that as a little mystery.

1763
01:13:06,200 --> 01:13:09,200
No, but basically all I'm talking about is the fact that rendering

1764
01:13:09,200 --> 01:13:11,300
because it is so time-critical.

1765
01:13:11,300 --> 01:13:14,600
And so crucial to the performance of your game.

1766
01:13:15,100 --> 01:13:20,100
Often times goes through one more sort of specialization than

1767
01:13:20,100 --> 01:13:21,100
everything else does.

1768
01:13:21,200 --> 01:13:25,000
Nothing else in your game will probably need to be specialized in any

1769
01:13:25,000 --> 01:13:30,100
more ways than that, but for our game, we will actually be doing

1770
01:13:30,100 --> 01:13:33,900
something eventually that will introduce one more sort of

1771
01:13:34,700 --> 01:13:36,900
In our abstraction layer, just for graphics.

1772
01:13:37,100 --> 01:13:41,400
And what that will be, is basically sort of a display list abstraction

1773
01:13:41,400 --> 01:13:46,000
kind of a thing that allows us to either do the rendering ourselves or

1774
01:13:46,000 --> 01:13:47,900
do the rendering using Hardware.

1775
01:13:49,200 --> 01:13:54,700
So, I wouldn't worry really at all about how portable this thing is.

1776
01:13:54,900 --> 01:13:55,900
In terms of speed.

1777
01:13:56,000 --> 01:13:58,600
It will be portable everywhere in terms of just running.

1778
01:13:58,600 --> 01:14:02,400
Okay, but in terms of the speed, which is the only time you would care

1779
01:14:02,400 --> 01:14:03,800
about this, because the platform layer can

1780
01:14:04,000 --> 01:14:07,100
He's just flip the Swizzle the bits on a flip and social.

1781
01:14:07,100 --> 01:14:11,600
The blitz Swizzle the bits when it Blitz, it's got a good rhyme

1782
01:14:11,700 --> 01:14:15,500
special, the bits when it blitz, so you could basically always do

1783
01:14:15,500 --> 01:14:16,000
that.

1784
01:14:16,000 --> 01:14:18,200
And it would just be a slight performance penalty or something, right?

1785
01:14:18,200 --> 01:14:22,300
But probably not even there, but we will actually be taking pains to

1786
01:14:22,300 --> 01:14:25,100
go far beyond that in terms of platform, accommodation.

1787
01:14:25,100 --> 01:14:28,300
So that's the reason that I'm not talking about that right now, but in

1788
01:14:28,300 --> 01:14:29,700
some sense you are kind of, right?

1789
01:14:29,800 --> 01:14:31,400
It's not really a platform dependency.

1790
01:14:31,500 --> 01:14:33,800
It's a platform in efficiency its base.

1791
01:14:34,100 --> 01:14:37,700
Saying, we're specifying something to the platform layer that we kind

1792
01:14:37,700 --> 01:14:41,000
of know might be more costly on some platforms than others.

1793
01:14:41,200 --> 01:14:43,200
And that is not quite the same.

1794
01:14:43,200 --> 01:14:45,000
As the platform dependency gets a dependency.

1795
01:14:45,000 --> 01:14:45,500
Suggest.

1796
01:14:45,500 --> 01:14:48,600
It would be very hard to overcome it on other platforms, but that's

1797
01:14:48,600 --> 01:14:49,200
not really true.

1798
01:14:49,300 --> 01:14:50,300
So depends how you want to see it.

1799
01:14:50,300 --> 01:14:54,500
But either way, that will we will not be actually leaving it this way

1800
01:14:54,700 --> 01:14:55,500
in the future.

1801
01:14:55,600 --> 01:14:58,100
We will be introducing one more thing because we'll need to in order

1802
01:14:58,100 --> 01:14:59,700
to take advantage of GPU the

1803
01:15:00,000 --> 01:15:04,000
On the other hand will actually probably remain locked but that will

1804
01:15:04,000 --> 01:15:05,700
be fine because almost all platforms.

1805
01:15:06,000 --> 01:15:07,000
Can now put sound in the way.

1806
01:15:07,000 --> 01:15:07,600
We're going to help put it.

1807
01:15:07,600 --> 01:15:09,900
So it's really not that big a deal and sound is so small that you

1808
01:15:09,900 --> 01:15:11,300
don't care about the extra buffer copy.

1809
01:15:15,900 --> 01:15:17,000
Let's take a look.

1810
01:15:19,100 --> 01:15:22,000
It seems like your approach to handling platform, dependent Services

1811
01:15:22,000 --> 01:15:25,500
is to prefer a many to one relationship instead of a one-to-many.

1812
01:15:25,700 --> 01:15:29,200
What I mean by this is to prefer having the game, be the one actual

1813
01:15:29,200 --> 01:15:31,900
service being provided to different platforms instead of the game

1814
01:15:31,900 --> 01:15:34,300
being reliant on many different platforms for services.

1815
01:15:34,600 --> 01:15:37,500
It seems like your approach is advantageous because the game is, in

1816
01:15:37,500 --> 01:15:40,600
fact, the one common service being provided and is therefore easier to

1817
01:15:40,600 --> 01:15:42,000
properly Implement, for all platforms.

1818
01:15:42,000 --> 01:15:44,600
Instead of coming up with some high-level abstraction, which might

1819
01:15:44,600 --> 01:15:46,300
hide some platform specific issues.

1820
01:15:46,500 --> 01:15:48,000
Do you agree with this description?

1821
01:15:48,400 --> 01:15:51,600
So do you find this approach to work for API design and pieces play in

1822
01:15:51,600 --> 01:15:53,700
pieces of code other than OS level services.

1823
01:15:53,900 --> 01:15:56,100
That is a fantastic summary.

1824
01:15:56,100 --> 01:15:57,600
It is correct.

1825
01:15:57,600 --> 01:15:58,400
First of all.

1826
01:16:01,200 --> 01:16:03,900
That is a very good way of saying it and I would agree with what you

1827
01:16:03,900 --> 01:16:11,800
said and I guess the thing I might add to it is at the end there where

1828
01:16:11,800 --> 01:16:12,200
you're saying.

1829
01:16:12,200 --> 01:16:13,800
Do you think it's a good approach for other things?

1830
01:16:15,500 --> 01:16:17,600
It is an approach that works very well.

1831
01:16:19,900 --> 01:16:24,800
When you are trying to do something specific and that is the reason

1832
01:16:24,800 --> 01:16:31,400
why it works, basically, the reason why you have this API design

1833
01:16:31,400 --> 01:16:35,600
benefit, at least what I'm calling a benefit in my, in my opinion.

1834
01:16:36,900 --> 01:16:39,900
The reason that you get this API benefit by doing it the way that I'm

1835
01:16:39,900 --> 01:16:42,900
suggesting rather than the standard way of doing it is because there

1836
01:16:42,900 --> 01:16:47,800
is a massive disparity in the necessary flexibility on either side of

1837
01:16:47,800 --> 01:16:49,000
the API boundary.

1838
01:16:49,200 --> 01:16:52,200
So the OS is fantastically flexible.

1839
01:16:53,700 --> 01:17:00,200
And the game is not games, use a very small subset of the features of

1840
01:17:00,200 --> 01:17:02,800
a normal operation of the flexibility of a normal operating system.

1841
01:17:03,300 --> 01:17:06,600
So when you have that, very dramatic disparity of a huge amount of

1842
01:17:06,600 --> 01:17:10,900
flexibility on side a and almost, no recoil necessary flexibility on

1843
01:17:10,900 --> 01:17:15,500
side B, then that is really the time when you want to think about

1844
01:17:15,500 --> 01:17:19,800
doing that kind of inversion and instead of propagating forwards the

1845
01:17:19,800 --> 01:17:21,000
the sort of abstraction.

1846
01:17:21,000 --> 01:17:23,200
You want to propagate it backwards and say this.

1847
01:17:23,400 --> 01:17:23,900
Is the service.

1848
01:17:23,900 --> 01:17:24,800
Let's turn it around.

1849
01:17:24,800 --> 01:17:26,500
Let's make the simplest thing the service.

1850
01:17:28,600 --> 01:17:32,000
So I don't know how useful that will be in other circumstances.

1851
01:17:32,200 --> 01:17:36,300
But if you do find yourself in a place where those sorts of things

1852
01:17:36,700 --> 01:17:40,800
appear to be true, then it probably is a thing to consider and to at

1853
01:17:40,800 --> 01:17:42,800
least try see how it would look.

1854
01:17:43,000 --> 01:17:46,300
Because you may find that it works as well as it does in games where I

1855
01:17:46,300 --> 01:17:47,900
think it does work rather well.

1856
01:17:51,800 --> 01:17:53,000
Let's see.

1857
01:17:55,000 --> 01:17:57,300
How did you set up visual studio to have that black theme?

1858
01:17:57,300 --> 01:17:58,300
When I installed it?

1859
01:17:58,500 --> 01:17:59,800
It popped up a window that?

1860
01:18:00,000 --> 01:18:01,400
Ed, what kind of theme do you want?

1861
01:18:01,400 --> 01:18:02,500
And I picked dark.

1862
01:18:04,000 --> 01:18:04,700
That was all I did.

1863
01:18:04,700 --> 01:18:05,800
I have no idea.

1864
01:18:06,900 --> 01:18:07,800
That was that was it.

1865
01:18:08,000 --> 01:18:13,400
I then went and tuned my fonts to be the same colors as emacs by using

1866
01:18:13,400 --> 01:18:16,500
the the font selection in the options menu, but that was the only

1867
01:18:16,500 --> 01:18:17,200
other thing I did.

1868
01:18:24,400 --> 01:18:25,200
During coding.

1869
01:18:25,200 --> 01:18:27,900
Is it easy to discipline yourself to make the code as clean and tidy

1870
01:18:27,900 --> 01:18:28,600
as possible?

1871
01:18:28,700 --> 01:18:29,800
What it actually does.

1872
01:18:31,100 --> 01:18:35,100
Is it encourages OCD - encoding, do you think this is good in general

1873
01:18:35,100 --> 01:18:36,200
or could it backfire?

1874
01:18:37,700 --> 01:18:38,100
I'm not sure.

1875
01:18:38,100 --> 01:18:39,300
I totally understand the question.

1876
01:18:39,300 --> 01:18:42,600
But what I would say is I find that the right balance is definitely

1877
01:18:42,600 --> 01:18:43,900
compression oriented programming.

1878
01:18:43,900 --> 01:18:47,400
Like, I say, I know that's a term that I sort of invented, so it may

1879
01:18:47,400 --> 01:18:48,500
not be the right one.

1880
01:18:48,500 --> 01:18:50,900
Like there's a lot of coding methodology speak out there and maybe

1881
01:18:50,900 --> 01:18:52,000
there's a better term for it.

1882
01:18:52,100 --> 01:18:53,500
I call it compression oriented programming.

1883
01:18:53,700 --> 01:18:57,000
The other people would call it something else, but basically some

1884
01:18:57,000 --> 01:18:59,400
people sometimes use the word refactoring, but I don't like that

1885
01:18:59,400 --> 01:19:01,900
because refactoring is talking about other things.

1886
01:19:03,200 --> 01:19:06,600
And so I don't really like using the word refactoring because I think

1887
01:19:06,600 --> 01:19:10,400
it implies too much, but you could maybe say refactoring oriented

1888
01:19:10,400 --> 01:19:10,600
prefer.

1889
01:19:10,600 --> 01:19:11,000
I don't know.

1890
01:19:11,000 --> 01:19:12,600
I prefer compression oriented programming.

1891
01:19:12,900 --> 01:19:15,200
Basically, what I like to do is I like to see how things go.

1892
01:19:15,200 --> 01:19:19,800
When you just write them sloppily as sloppily as you want and then you

1893
01:19:19,800 --> 01:19:20,600
look and go.

1894
01:19:20,700 --> 01:19:22,200
What are the commonalities here?

1895
01:19:22,200 --> 01:19:23,200
How can I touch?

1896
01:19:23,600 --> 01:19:27,100
Reduce the size of this code by pulling out common things into

1897
01:19:27,100 --> 01:19:29,100
reusable portions and calling them.

1898
01:19:29,200 --> 01:19:30,600
That is how I like to do things.

1899
01:19:30,700 --> 01:19:32,200
So, I don't really like to be 200.

1900
01:19:32,200 --> 01:19:37,700
CDI am OCD about some things to be sure, but I try not to be super OCD

1901
01:19:37,700 --> 01:19:38,200
about stuff.

1902
01:19:38,200 --> 01:19:42,100
I try to let things have some breathing room and then I pull stuff up

1903
01:19:42,400 --> 01:19:43,400
as they need to be.

1904
01:19:43,500 --> 01:19:43,700
Now.

1905
01:19:43,700 --> 01:19:44,800
One thing I will mention

1906
01:19:45,900 --> 01:19:49,200
Is you don't want to, you don't want to compress things too much.

1907
01:19:49,200 --> 01:19:51,200
You don't want to lock things down too early.

1908
01:19:51,300 --> 01:19:54,000
So it's important to always have some Breathing Room, some flexibility

1909
01:19:54,000 --> 01:19:54,600
in your code.

1910
01:19:54,700 --> 01:19:58,400
You want to be able to allow it to move a little bit.

1911
01:19:58,400 --> 01:20:01,000
So you don't want to like everyday, look through your code.

1912
01:20:01,000 --> 01:20:01,200
And go.

1913
01:20:01,200 --> 01:20:04,500
Let me lock this down to the minimal thing and pull out every last bit

1914
01:20:04,500 --> 01:20:05,200
and optimize it.

1915
01:20:05,200 --> 01:20:09,100
Not that's bad because your code is a living thing.

1916
01:20:09,100 --> 01:20:13,300
It sort of grows over time and changes and as you see more about the

1917
01:20:13,300 --> 01:20:15,000
problem space and you need.

1918
01:20:15,200 --> 01:20:17,400
Your code to do different things and do more things.

1919
01:20:17,500 --> 01:20:19,100
You need that flexibility.

1920
01:20:19,200 --> 01:20:22,800
So you don't always want to optimize even just at the API level for

1921
01:20:22,800 --> 01:20:24,200
this specific thing that you're doing.

1922
01:20:24,400 --> 01:20:27,100
You want to always keep in mind that code needs room to grow and

1923
01:20:27,100 --> 01:20:29,300
mature and so too much.

1924
01:20:29,300 --> 01:20:33,200
Oh seediness is bad certainly and I would say that it can backfire if

1925
01:20:33,200 --> 01:20:37,200
you do become too fixated on on that sort of thing.

1926
01:20:39,900 --> 01:20:40,400
Yeah.

1927
01:20:42,800 --> 01:20:48,100
What did you declare a function before pound Define in your header

1928
01:20:48,100 --> 01:20:49,300
file?

1929
01:20:49,500 --> 01:20:50,100
I'm sorry.

1930
01:20:50,100 --> 01:20:51,600
Hide in for, I don't understand.

1931
01:20:51,600 --> 01:20:53,700
What did you declare a function before a pound to find your header

1932
01:20:53,700 --> 01:20:53,900
file?

1933
01:20:53,900 --> 01:20:56,300
If you could clarify that question, I will answer it.

1934
01:20:58,500 --> 01:20:59,800
Let's see.

1935
01:21:05,200 --> 01:21:06,200
I'm very curious.

1936
01:21:06,200 --> 01:21:10,000
And do you think this would have much cookies into the file?

1937
01:21:10,000 --> 01:21:10,400
I'm sorry.

1938
01:21:10,400 --> 01:21:11,900
I do not even know what that means.

1939
01:21:12,200 --> 01:21:15,100
I can understand the question Marvel sidekick.

1940
01:21:16,600 --> 01:21:17,800
Let's see.

1941
01:21:22,700 --> 01:21:23,600
Onion knocks.

1942
01:21:23,600 --> 01:21:26,100
That question is not really appropriate for what we're talking about

1943
01:21:26,100 --> 01:21:26,500
right now.

1944
01:21:26,500 --> 01:21:30,000
We will be dealing with stuff in terms of asset importing probably

1945
01:21:30,000 --> 01:21:31,600
next week, but it won't be 3D.

1946
01:21:31,600 --> 01:21:34,100
So we're not doing 3D assets this time around.

1947
01:21:34,100 --> 01:21:34,900
Sorry about that.

1948
01:21:35,900 --> 01:21:38,300
Will we be writing our own image format and loader?

1949
01:21:38,300 --> 01:21:38,800
Astray?

1950
01:21:38,800 --> 01:21:39,900
Garner 13?

1951
01:21:39,900 --> 01:21:40,700
Yes, we will.

1952
01:21:42,700 --> 01:21:44,500
But it will be a pretty simple image for him.

1953
01:21:44,500 --> 01:21:46,800
At first, it will not be compressed or anything.

1954
01:21:46,800 --> 01:21:48,900
It'll just be the basics, just you can see how that works.

1955
01:21:48,900 --> 01:21:50,900
So won't be anything fancy, but it'll be there.

1956
01:21:52,800 --> 01:21:53,900
Let's see.

1957
01:21:59,000 --> 01:22:01,200
Trying to separate things into questions that are actually about what

1958
01:22:01,200 --> 01:22:03,400
we were doing rather than talking about things that will probably get

1959
01:22:03,400 --> 01:22:03,900
to later.

1960
01:22:03,900 --> 01:22:05,800
I don't really want to answer questions that we're going to actually

1961
01:22:05,800 --> 01:22:07,500
have a whole episodes about in the future.

1962
01:22:07,500 --> 01:22:09,100
So if you could try to make sure the questions are about what we're

1963
01:22:09,100 --> 01:22:12,400
doing now, not what we're going to do later because when we go do it

1964
01:22:12,400 --> 01:22:16,100
later I will have a whole hour and I'll tell you all the things that

1965
01:22:16,100 --> 01:22:17,400
you're asking the question actually.

1966
01:22:17,400 --> 01:22:18,500
And in fact show you

1967
01:22:19,900 --> 01:22:20,700
Let's see.

1968
01:22:21,800 --> 01:22:23,800
Would there be a way to build your platform dependent code and

1969
01:22:23,800 --> 01:22:26,200
separate entity in order to allow you to use it in the future?

1970
01:22:26,300 --> 01:22:29,800
Yes, that is actually basically what you would do.

1971
01:22:30,100 --> 01:22:34,200
And in fact what we sort of are doing, if you want to abstract this

1972
01:22:34,200 --> 01:22:34,700
code.

1973
01:22:34,700 --> 01:22:38,600
All you have to do is just pull out the pound include here and just do

1974
01:22:38,600 --> 01:22:40,100
pound include game dot CPP.

1975
01:22:40,100 --> 01:22:41,600
Something that's not a specific name.

1976
01:22:41,800 --> 01:22:44,900
And then from then on, you just go ahead and use the same layer

1977
01:22:44,900 --> 01:22:46,300
everywhere, every, on every game.

1978
01:22:46,400 --> 01:22:46,700
That's it.

1979
01:22:46,700 --> 01:22:47,700
There's nothing to it.

1980
01:22:47,700 --> 01:22:49,200
There's nothing platform-specific.

1981
01:22:49,600 --> 01:22:52,200
In the, there's nothing game-specific in the platform code ever,

1982
01:22:52,200 --> 01:22:52,600
really.

1983
01:22:54,100 --> 01:22:54,600
So yeah.

1984
01:22:56,200 --> 01:22:57,800
I mean and I should do and I should also State.

1985
01:22:57,800 --> 01:22:58,800
That's how I do it too.

1986
01:22:58,800 --> 01:23:01,100
I never write new platform layers.

1987
01:23:01,100 --> 01:23:05,400
I wrote one and I use that one and then periodically I improve it.

1988
01:23:08,700 --> 01:23:09,900
Let's see.

1989
01:23:12,500 --> 01:23:15,500
Will you be developing your own implementation of strings?

1990
01:23:16,400 --> 01:23:20,000
Probably not because we probably won't use any strings there.

1991
01:23:20,000 --> 01:23:23,300
Might that we will have to deal with strings a little bit for

1992
01:23:23,900 --> 01:23:24,600
language.

1993
01:23:24,600 --> 01:23:28,200
Like, we'll have to abstract some string stuff for language support.

1994
01:23:28,200 --> 01:23:32,000
When we have strings that appear in the game, basically, for free,

1995
01:23:32,000 --> 01:23:35,000
basically shipping with locales, but that's about all will be doing

1996
01:23:35,000 --> 01:23:35,500
there.

1997
01:23:35,500 --> 01:23:36,200
We won't be.

1998
01:23:36,500 --> 01:23:37,200
There won't be any.

1999
01:23:37,900 --> 01:23:41,200
Means that this will not be like the Unreal Engine where there's like

2000
01:23:41,200 --> 01:23:43,600
eight million strings, nude, and deleted every frame or whatever

2001
01:23:43,600 --> 01:23:43,900
happens.

2002
01:23:43,900 --> 01:23:44,700
Their craziness.

2003
01:23:45,000 --> 01:23:48,300
This is, this is like there won't be any string passing in the game or

2004
01:23:48,300 --> 01:23:49,100
anything like that.

2005
01:23:53,000 --> 01:23:53,600
Let's see.

2006
01:23:53,600 --> 01:23:56,200
Does the unity build approach work with parallel compilation?

2007
01:23:56,500 --> 01:23:58,000
I don't know.

2008
01:23:58,500 --> 01:23:59,800
Basically the compiles are so

2009
01:24:00,000 --> 01:24:02,900
Ask, usually, when I do this, that I haven't had to worry about that,

2010
01:24:03,400 --> 01:24:07,300
but I don't know how many compilers are actually multi-threaded inside

2011
01:24:07,300 --> 01:24:08,100
a single file.

2012
01:24:08,400 --> 01:24:11,500
They may require you to have multiple files to make that work.

2013
01:24:11,600 --> 01:24:14,300
And so you would have to break up into a couple different compilation

2014
01:24:14,300 --> 01:24:14,500
units.

2015
01:24:14,500 --> 01:24:18,500
If you wanted to get parallelism one basically for every processor,

2016
01:24:18,600 --> 01:24:19,800
but I don't know.

2017
01:24:20,600 --> 01:24:24,600
Like I said, the builds are so fast with the amount of code you need

2018
01:24:24,600 --> 01:24:25,400
for a game.

2019
01:24:26,400 --> 01:24:29,200
Like this game will probably always compiled in less than 10 seconds

2020
01:24:29,200 --> 01:24:29,900
without

2021
01:24:30,000 --> 01:24:31,800
That forms without multi-core support.

2022
01:24:31,800 --> 01:24:33,200
I would think so.

2023
01:24:33,200 --> 01:24:34,100
We'll see as we go though.

2024
01:24:37,700 --> 01:24:41,900
Let's see, given your unique approach.

2025
01:24:41,900 --> 01:24:43,800
Correct me if I'm wrong, but I believe you lose multi-threaded

2026
01:24:43,800 --> 01:24:44,200
compilation.

2027
01:24:44,200 --> 01:24:45,300
Okay, so that's another one.

2028
01:24:45,700 --> 01:24:46,300
Yes.

2029
01:24:46,300 --> 01:24:47,500
I think you do.

2030
01:24:47,600 --> 01:24:49,700
I mean I don't think you can get multi-threaded compilation because

2031
01:24:49,700 --> 01:24:52,800
most powers aren't multi-threaded in side.

2032
01:24:52,800 --> 01:24:53,500
A compilation unit.

2033
01:24:53,500 --> 01:24:57,100
I don't actually know but again, yeah, I don't care because it's fast.

2034
01:24:57,100 --> 01:25:00,100
It's so fast already that it hasn't actually ever been a problem for

2035
01:25:00,100 --> 01:25:00,300
me.

2036
01:25:02,300 --> 01:25:05,200
Why you static functions when there is only one translation unit.

2037
01:25:05,800 --> 01:25:09,300
So I don't know if you need to do that anymore.

2038
01:25:10,200 --> 01:25:15,200
But I have found had found at times in the past that the reason to do

2039
01:25:15,200 --> 01:25:18,000
it is because it lets the compiler know that.

2040
01:25:18,000 --> 01:25:21,700
It doesn't have to actually build an export table for those functions

2041
01:25:22,000 --> 01:25:25,200
and it just speeds things up because now it knows that they're all,

2042
01:25:25,200 --> 01:25:26,700
they're never going to get called externally.

2043
01:25:26,900 --> 01:25:28,400
It also can sometimes, help the optimizer.

2044
01:25:28,400 --> 01:25:31,100
Can now the optimizer knows every possible place where the thing is

2045
01:25:31,100 --> 01:25:31,500
called.

2046
01:25:31,500 --> 01:25:31,600
And

2047
01:25:31,800 --> 01:25:33,900
Was that it can't ever be called from outside.

2048
01:25:34,000 --> 01:25:36,900
So it's basically better for the optimizer and the compiler, usually.

2049
01:25:37,300 --> 01:25:39,700
But whether that translates into real savings, these days, I don't

2050
01:25:39,700 --> 01:25:39,800
know.

2051
01:25:39,800 --> 01:25:41,100
I haven't really tested at these days.

2052
01:25:41,100 --> 01:25:42,400
Back in the old days.

2053
01:25:42,400 --> 01:25:44,600
I did some testing on things like this, but I haven't done it

2054
01:25:44,600 --> 01:25:45,700
recently, so I'm not sure.

2055
01:25:49,200 --> 01:25:50,700
Let's see.

2056
01:25:52,000 --> 01:25:54,600
Just in the Q&A part.

2057
01:25:54,600 --> 01:25:57,500
Could you please read the questions more slowly, or we explain the

2058
01:25:57,500 --> 01:25:58,600
question after you understood it.

2059
01:25:58,600 --> 01:26:00,500
This is very important for archived videos.

2060
01:26:00,500 --> 01:26:00,900
Yes.

2061
01:26:00,900 --> 01:26:02,000
I will try to do that.

2062
01:26:02,000 --> 01:26:03,100
That is a good idea.

2063
01:26:05,600 --> 01:26:06,600
Hello, sir.

2064
01:26:06,600 --> 01:26:09,700
I'm a computer science student and I was wondering if you feel that it

2065
01:26:09,700 --> 01:26:13,200
is necessary to make a flow chart before coding or if you go with the

2066
01:26:13,200 --> 01:26:13,700
flow.

2067
01:26:15,300 --> 01:26:21,400
Well, I certainly don't want to start a holy were so all I will say is

2068
01:26:21,400 --> 01:26:29,600
that I have never found it useful to do any kind of diagramming prior

2069
01:26:29,600 --> 01:26:34,300
to programming because at best the diagram is

2070
01:26:34,700 --> 01:26:38,500
Leave the code that you would be typing and anything less than that

2071
01:26:38,500 --> 01:26:42,600
obscures the actual reality of the problem and means when you go to

2072
01:26:42,600 --> 01:26:45,100
actually use that chart it will be wrong.

2073
01:26:45,700 --> 01:26:48,700
And so I've always found that the right thing to do is to learn to

2074
01:26:48,700 --> 01:26:51,700
have a good enough cognition of how code works.

2075
01:26:51,700 --> 01:26:55,000
When you look at it that it is essentially as easy as working with

2076
01:26:55,000 --> 01:26:55,900
something like a flowchart.

2077
01:26:55,900 --> 01:26:59,500
But now, you know that s absolutely everything is captured there in.

2078
01:27:00,000 --> 01:27:03,500
Do not get into the circumstance that I often see people get into

2079
01:27:03,500 --> 01:27:06,700
where they have drawn some diagram or have some crazy, uml thing.

2080
01:27:06,900 --> 01:27:09,600
And then they go to implement it as just a mess because the uml

2081
01:27:09,600 --> 01:27:13,400
diagram fails to capture, all the important subtlety, in how the code

2082
01:27:13,400 --> 01:27:14,500
really works at a low level.

2083
01:27:19,700 --> 01:27:23,700
I think the question was, why the pound of fine part of the include?

2084
01:27:23,700 --> 01:27:29,600
Okay, thank you for thank you for questions clarifying, that pseudonym

2085
01:27:29,700 --> 01:27:30,600
73.

2086
01:27:31,100 --> 01:27:32,500
That is that okay?

2087
01:27:32,500 --> 01:27:32,800
Okay.

2088
01:27:32,800 --> 01:27:33,000
Okay.

2089
01:27:33,000 --> 01:27:33,400
Okay.

2090
01:27:33,800 --> 01:27:34,800
I did not talk about these.

2091
01:27:34,800 --> 01:27:37,300
They get automatically inserted, by my editor macros.

2092
01:27:37,800 --> 01:27:41,500
So if you look at the H file that I made here to talk to store our

2093
01:27:41,500 --> 01:27:43,700
platform layer definitions, right?

2094
01:27:44,600 --> 01:27:46,100
It has this thing in here.

2095
01:27:46,100 --> 01:27:46,700
This pound.

2096
01:27:46,700 --> 01:27:48,600
If what that's called.

2097
01:27:48,800 --> 01:27:51,100
It's called a include guard.

2098
01:27:52,100 --> 01:27:54,800
What it means, is that if you try to pound include this file.

2099
01:27:56,100 --> 01:28:00,000
It will it'll do this if and see has anyone to in pound of fine,

2100
01:28:00,000 --> 01:28:04,600
handmade .h, assuming that they haven't it'll actually, you know have

2101
01:28:04,600 --> 01:28:09,800
this code then it will Define handmade dot h and and the end if if

2102
01:28:09,800 --> 01:28:14,300
someone then comes to pound included again, then you won't actually

2103
01:28:14,300 --> 01:28:17,100
have to worry about that because it's prevented from being included

2104
01:28:17,100 --> 01:28:17,400
twice.

2105
01:28:17,400 --> 01:28:22,800
It'll say if to find handmade and hand made has been defined, so it

2106
01:28:23,700 --> 01:28:24,600
Doesn't include it.

2107
01:28:24,800 --> 01:28:25,500
That's it.

2108
01:28:25,500 --> 01:28:29,800
It's just called an include guard or an idempotent.

2109
01:28:30,000 --> 01:28:31,600
There's I don't know, there's weird names for it.

2110
01:28:31,600 --> 01:28:35,600
But that all it is, is to make sure that if someone in the code, let's

2111
01:28:35,600 --> 01:28:38,300
say, for example, handmade dot CPP.

2112
01:28:38,300 --> 01:28:40,700
It's including handmade .h, right.

2113
01:28:40,800 --> 01:28:45,400
Let's say we included hand, it made dot h as well beforehand, right?

2114
01:28:45,400 --> 01:28:46,700
So now it's included twice.

2115
01:28:46,700 --> 01:28:47,900
You can see that it still works.

2116
01:28:48,100 --> 01:28:52,500
If I were to go in here and remove these guys so that it actually does

2117
01:28:52,500 --> 01:28:53,400
get included twice.

2118
01:28:53,700 --> 01:28:56,200
Now you notice, you get all these errors because it gets included

2119
01:28:56,200 --> 01:28:58,700
twice, and it tries to redefine things and it's like you can't

2120
01:28:58,700 --> 01:29:01,100
redefine things twice.

2121
01:29:02,300 --> 01:29:02,800
That's all.

2122
01:29:02,900 --> 01:29:04,500
Hopefully that's pretty clear.

2123
01:29:06,000 --> 01:29:11,900
Yeah, why do you specify void in function?

2124
01:29:11,900 --> 01:29:16,200
Definitions when they don't take arguments that is just a force of

2125
01:29:16,200 --> 01:29:16,800
habit.

2126
01:29:17,200 --> 01:29:18,800
You used to have to do that.

2127
01:29:19,800 --> 01:29:21,400
You do not have to anymore.

2128
01:29:21,400 --> 01:29:25,600
So if you would like to any time, you see me do that, and I guess I

2129
01:29:25,600 --> 01:29:31,000
don't have one at the moment, but there we go, if you see this, right,

2130
01:29:31,000 --> 01:29:32,000
this is the way I've written.

2131
01:29:32,200 --> 01:29:32,600
Code.

2132
01:29:32,600 --> 01:29:33,600
You can it turn?

2133
01:29:33,800 --> 01:29:34,900
Equivalently do that.

2134
01:29:34,900 --> 01:29:39,200
If you want to similarly, I do this by force of habit where I put a

2135
01:29:39,200 --> 01:29:40,100
parentheses around there.

2136
01:29:40,100 --> 01:29:44,100
You actually that is the more common way and perhaps even the more

2137
01:29:44,100 --> 01:29:44,600
correct way.

2138
01:29:44,600 --> 01:29:47,000
You might say to write a return statement.

2139
01:29:47,000 --> 01:29:52,300
Those are just ways that I code that I, they're based on the way I

2140
01:29:52,300 --> 01:29:53,300
learned to program.

2141
01:29:53,800 --> 01:29:55,200
So there's no real reason for them.

2142
01:29:55,200 --> 01:29:58,600
They're just a force of habit and it doesn't, it's not necessary.

2143
01:29:58,700 --> 01:29:59,800
You don't have to do those things.

2144
01:30:04,000 --> 01:30:05,800
Okay, last couple questions here.

2145
01:30:06,000 --> 01:30:07,200
Let's see.

2146
01:30:08,000 --> 01:30:10,200
Do you have a specific method of solving primary problems or just

2147
01:30:10,200 --> 01:30:12,600
write things and solve them in place, solve them in place?

2148
01:30:12,600 --> 01:30:15,000
Unless they're really hard, not to think about them for a while and go

2149
01:30:15,000 --> 01:30:18,300
make sort of like mathematical diagrams or something, where I'm trying

2150
01:30:18,300 --> 01:30:20,700
to work out, how something's going to work or something like that.

2151
01:30:20,700 --> 01:30:23,700
In terms of like some other thing like math and not code.

2152
01:30:23,700 --> 01:30:24,600
If it's a code problem.

2153
01:30:24,600 --> 01:30:25,700
I do it in place.

2154
01:30:28,300 --> 01:30:29,400
Let's see.

2155
01:30:31,000 --> 01:30:33,400
Why are we for declaring game layer functions in the header?

2156
01:30:33,400 --> 01:30:34,900
What when you include the whole implementation?

2157
01:30:35,200 --> 01:30:38,200
Because I like, I just like to see it.

2158
01:30:38,400 --> 01:30:40,600
I like to be able to have H file up.

2159
01:30:40,600 --> 01:30:41,700
And the other thing up.

2160
01:30:41,700 --> 01:30:42,800
I like to be able to see these.

2161
01:30:42,800 --> 01:30:47,800
So, often times, I will do stuff where I actually have, you know, sort

2162
01:30:47,800 --> 01:30:49,900
of files for my convenience to see.

2163
01:30:49,900 --> 01:30:52,500
It's the only reason I break up the files to because you can just

2164
01:30:52,500 --> 01:30:53,500
write all the things.

2165
01:30:53,500 --> 01:30:57,900
You could have basically one file for the whole game, one file for

2166
01:30:57,900 --> 01:31:00,700
each platform layer, and that would be it, but I do break it up.

2167
01:31:00,800 --> 01:31:03,500
The files and just use put pound include to pull them together because

2168
01:31:03,500 --> 01:31:05,800
I find it's just easier for me to work with when I'm actually editing.

2169
01:31:08,700 --> 01:31:09,800
Let's see.

2170
01:31:13,200 --> 01:31:14,000
Let's see.

2171
01:31:18,600 --> 01:31:21,400
Do you think it's realistic for someone with awful math skills to be

2172
01:31:21,400 --> 01:31:22,500
efficient game developer.

2173
01:31:22,500 --> 01:31:24,100
All right, so I'll end on that question.

2174
01:31:24,100 --> 01:31:25,600
We will end the stream on that question.

2175
01:31:25,900 --> 01:31:29,500
The question is, do you think it is realistic for someone with awful

2176
01:31:29,500 --> 01:31:33,700
math skills to be an efficient game developer.

2177
01:31:34,400 --> 01:31:40,800
So that is a very complex question and I'll talk about it for the next

2178
01:31:40,800 --> 01:31:44,200
five minutes and I do not claim my answer to be definitive.

2179
01:31:46,700 --> 01:31:49,700
I'm simply going to say my thoughts on it and I think other people

2180
01:31:49,700 --> 01:31:53,100
would have different thoughts on it, that may be as good or better

2181
01:31:53,100 --> 01:31:54,600
than the thoughts that I'm about to give.

2182
01:31:56,300 --> 01:31:56,900
so,

2183
01:31:59,900 --> 01:32:03,400
You can make entire game with no math skills at all.

2184
01:32:04,800 --> 01:32:05,700
Okay, that's just true.

2185
01:32:09,300 --> 01:32:13,800
It is definitely possible to be a very effective programmer in a lot

2186
01:32:13,800 --> 01:32:19,100
of areas and not know any math to give you a very simple example.

2187
01:32:20,200 --> 01:32:22,100
if you are programming, a text Adventure,

2188
01:32:23,600 --> 01:32:27,800
It could be possible to make that entire thing very well and do a good

2189
01:32:27,800 --> 01:32:28,700
job on it.

2190
01:32:30,500 --> 01:32:33,600
Knowing only enough math to do pointer arithmetic.

2191
01:32:34,700 --> 01:32:36,700
Which is like simple addition.

2192
01:32:36,700 --> 01:32:38,800
And understanding addition to multiplication, basically.

2193
01:32:40,600 --> 01:32:41,300
so,

2194
01:32:43,700 --> 01:32:44,700
At a base level.

2195
01:32:44,700 --> 01:32:49,100
I would say that we can start out saying that math is not as required

2196
01:32:49,100 --> 01:32:52,100
for programming as a lot of people make it out to be.

2197
01:32:52,200 --> 01:32:52,900
That is true.

2198
01:32:54,500 --> 01:32:58,200
Second thing, a lot of times.

2199
01:32:58,200 --> 01:32:59,800
In fact, I was listening to something.

2200
01:33:00,000 --> 01:33:04,000
Other day, I was listening to an NPR story where they were talking

2201
01:33:04,000 --> 01:33:10,600
about like the history of sort of people in computer science and so on

2202
01:33:10,600 --> 01:33:14,700
and they were talking about a bunch of things and they they sort of

2203
01:33:14,900 --> 01:33:17,800
made this implication there were talking about people who used to be

2204
01:33:17,800 --> 01:33:20,900
programmers in stopped or various types of disciplines in these sorts

2205
01:33:20,900 --> 01:33:25,200
of things and they made this very common assumption, the MPR.

2206
01:33:25,200 --> 01:33:27,500
If you're someone who doesn't know anything about programming made

2207
01:33:27,500 --> 01:33:29,900
this very common something they said that a

2208
01:33:30,000 --> 01:33:33,100
Ticular person referring to when they were a child was very good at

2209
01:33:33,100 --> 01:33:33,700
math.

2210
01:33:34,300 --> 01:33:37,900
So they should have been someone who would be very good at computer

2211
01:33:37,900 --> 01:33:38,600
science.

2212
01:33:39,000 --> 01:33:39,600
Right?

2213
01:33:39,600 --> 01:33:43,700
And that's a very common feeling among people.

2214
01:33:43,700 --> 01:33:47,000
I think, they think of those two things is related where I probably

2215
01:33:47,000 --> 01:33:47,600
depart with.

2216
01:33:47,600 --> 01:33:50,700
Most people is that, I think that computer that being a good

2217
01:33:50,700 --> 01:33:51,500
programmer.

2218
01:33:52,300 --> 01:33:57,900
If you're talking literally about programming, it has almost no

2219
01:33:57,900 --> 01:33:59,900
relationship to how good you are at math.

2220
01:34:00,800 --> 01:34:03,900
I think they are completely unrelated.

2221
01:34:04,000 --> 01:34:08,600
And I say that from my own experience because I was absolutely awful

2222
01:34:09,100 --> 01:34:13,300
at math throughout my whole time, going to school.

2223
01:34:13,800 --> 01:34:18,200
You would never have called me a star math student by any stretch of

2224
01:34:18,200 --> 01:34:19,100
the imagination.

2225
01:34:20,500 --> 01:34:24,400
And the reason for that is because a lot of what determines, whether

2226
01:34:24,400 --> 01:34:29,400
you're good at math, all throughout a large chunk of the math career,

2227
01:34:29,600 --> 01:34:33,000
is how meticulously you can do things without making mistakes.

2228
01:34:33,200 --> 01:34:37,200
That's what math almost entirely is from, you know, for your first.

2229
01:34:37,300 --> 01:34:39,600
I don't know and years through it, probably even when you get into

2230
01:34:39,600 --> 01:34:42,600
college, still that way for a long time programming.

2231
01:34:42,800 --> 01:34:45,000
There's no such thing as that in programming.

2232
01:34:45,000 --> 01:34:46,300
The computer is doing the work.

2233
01:34:46,400 --> 01:34:50,100
It's entirely about The Logical way.

2234
01:34:50,300 --> 01:34:54,500
Which you break things down, which has a lot more to do about seeing

2235
01:34:54,500 --> 01:34:56,500
creative analogies and things.

2236
01:34:56,700 --> 01:35:01,500
It's a lot more like someone who is really good at explaining history.

2237
01:35:01,600 --> 01:35:06,100
For example, I would Peg them as the person who might be better at

2238
01:35:06,100 --> 01:35:07,700
some of the things in programming.

2239
01:35:07,700 --> 01:35:11,300
Now, it's not sufficient, certainly, but I'm just saying, I wouldn't

2240
01:35:11,300 --> 01:35:15,000
use math as the primary thing because math tends to be about very

2241
01:35:15,000 --> 01:35:19,600
meticulously, executing a small number of logical things with a small

2242
01:35:19,600 --> 01:35:20,100
number.

2243
01:35:20,400 --> 01:35:24,000
Of of things in play at any given time.

2244
01:35:24,000 --> 01:35:26,400
That is what you do in math for your first.

2245
01:35:26,400 --> 01:35:27,700
16 years of math.

2246
01:35:28,500 --> 01:35:33,500
But programming is about not having to be meticulous about a huge

2247
01:35:33,500 --> 01:35:34,800
number of things that are in play.

2248
01:35:34,800 --> 01:35:36,100
And the more number of things.

2249
01:35:36,100 --> 01:35:39,200
You can remember and keep in play and analogize and compress and

2250
01:35:39,200 --> 01:35:45,000
Compact and reduce into more convenient ways of thinking about them.

2251
01:35:45,000 --> 01:35:46,200
The better you will be.

2252
01:35:46,600 --> 01:35:50,400
Now other types of math are about these things, right?

2253
01:35:50,400 --> 01:35:53,800
And so, as you get up into higher math, you might say that they're

2254
01:35:53,800 --> 01:35:57,400
much more related, but the kind of math that you experience in high

2255
01:35:57,400 --> 01:35:58,500
school and Junior High.

2256
01:35:58,500 --> 01:35:59,600
A high and lower.

2257
01:36:00,300 --> 01:36:04,600
And even probably in college, I find to be completely unrelated to

2258
01:36:04,600 --> 01:36:05,100
programming.

2259
01:36:05,100 --> 01:36:08,400
I don't feel, they do not feel similar to me in any way.

2260
01:36:09,800 --> 01:36:10,800
So that's the second thing.

2261
01:36:11,700 --> 01:36:15,300
Those are the the am time math parts of the thoughts.

2262
01:36:15,300 --> 01:36:18,700
The things that saying, like I don't know that being good at math,

2263
01:36:18,700 --> 01:36:21,000
really has all that much to do at being good at program.

2264
01:36:21,700 --> 01:36:23,300
Now, here's the pro math parts.

2265
01:36:25,600 --> 01:36:31,200
Especially in the realm of graphics and sound, which is a really,

2266
01:36:31,200 --> 01:36:34,400
really important part and Graphics.

2267
01:36:34,400 --> 01:36:37,300
I should say physics as well, because graphics and physics are kind of

2268
01:36:37,300 --> 01:36:38,500
tightly coupled in that way.

2269
01:36:39,100 --> 01:36:45,700
Graphics physics and sound the degree to, which those disciplines.

2270
01:36:45,900 --> 01:36:50,800
When you code them, lean heavily on mathematics cannot be overstated.

2271
01:36:52,200 --> 01:36:55,300
There is so much math involved.

2272
01:36:55,700 --> 01:36:59,800
In doing say 3D graphics and 3D physics, so much math.

2273
01:37:00,900 --> 01:37:05,600
That if you are uncomfortable with conceptual mathematics, not

2274
01:37:05,600 --> 01:37:09,000
necessary computation, but conceptual mathematics.

2275
01:37:09,600 --> 01:37:13,400
I think it is safe to say you will have an extremely hard time doing

2276
01:37:13,400 --> 01:37:14,700
those parts of the code.

2277
01:37:14,800 --> 01:37:18,500
It doesn't mean you couldn't, maybe do other parts but when you get up

2278
01:37:18,500 --> 01:37:23,100
into there and you start talking about programming a 3D game, even the

2279
01:37:23,100 --> 01:37:26,500
game code, so not the engine code, but even the game code like how

2280
01:37:26,500 --> 01:37:30,500
characters work and stuff like that, even that it is.

2281
01:37:30,700 --> 01:37:34,100
Definitely something we're not being comfortable with conceptual

2282
01:37:34,100 --> 01:37:36,600
mathematics linear algebra.

2283
01:37:38,200 --> 01:37:45,600
Partial differential, equations basic, basic trigonometry, trying to

2284
01:37:45,600 --> 01:37:46,700
think of the other sorts of things.

2285
01:37:46,700 --> 01:37:53,200
Basic calculus, obviously just understanding those things is crucial

2286
01:37:53,200 --> 01:37:54,900
to being effective in those disciplines.

2287
01:37:55,300 --> 01:37:59,900
So while, if all you want to do is be a good programmer, I don't know

2288
01:37:59,900 --> 01:38:04,100
that math comes into it very much if you want to be a good programmer

2289
01:38:04,200 --> 01:38:05,300
in games.

2290
01:38:06,400 --> 01:38:10,300
Then, unless you pick a very specific sub genres of games, that

2291
01:38:10,300 --> 01:38:13,400
doesn't lean very heavily on any of these sorts of things, like

2292
01:38:13,400 --> 01:38:17,700
narrative 2D games, maybe.

2293
01:38:19,000 --> 01:38:24,400
I would say that you will have to get familiar with the math and

2294
01:38:24,400 --> 01:38:25,500
comforter with the math.

2295
01:38:27,500 --> 01:38:32,100
The good news for people who are afraid of that is, like I said, I was

2296
01:38:32,100 --> 01:38:33,200
awful at math in high school.

2297
01:38:33,200 --> 01:38:39,000
I had a very hard time with it and I taught myself linear algebra out

2298
01:38:39,000 --> 01:38:42,800
of a book and I taught myself differential equations to the extent

2299
01:38:42,800 --> 01:38:44,600
that I even know them at all out of books.

2300
01:38:45,500 --> 01:38:49,400
I taught myself all the trigonometry that I know now out of books

2301
01:38:49,400 --> 01:38:52,300
because I forgot most of what I learned in high school or just was bad

2302
01:38:52,300 --> 01:38:53,100
at it in high school.

2303
01:38:54,000 --> 01:38:56,900
And what I will point out about that.

2304
01:38:57,200 --> 01:38:59,800
Is that when you have two things?

2305
01:39:01,000 --> 01:39:05,400
A the motivation to do it because now you have a game that you want to

2306
01:39:05,400 --> 01:39:08,700
make and you want to make the game good and you are motivated to learn

2307
01:39:08,700 --> 01:39:11,400
the math Behind these things, and not just sitting in a classroom

2308
01:39:11,400 --> 01:39:11,900
somewhere.

2309
01:39:12,000 --> 01:39:14,600
While somebody talks at you and says things that don't mean anything

2310
01:39:14,600 --> 01:39:16,900
to you, when you're actually motivated.

2311
01:39:18,300 --> 01:39:23,600
And two, when you have the computer to lean on, to do a lot of the

2312
01:39:23,600 --> 01:39:26,200
work for you, that's the Drudge work.

2313
01:39:26,200 --> 01:39:27,200
Meticulous work.

2314
01:39:28,600 --> 01:39:33,300
It really turns things around, in terms of your ability to get better

2315
01:39:33,300 --> 01:39:33,900
at math.

2316
01:39:33,900 --> 01:39:37,600
You can also use what's called a computer-aided algebra or

2317
01:39:37,600 --> 01:39:38,900
computer-aided mathematics.

2318
01:39:38,900 --> 01:39:39,900
I don't know what they're called.

2319
01:39:40,100 --> 01:39:46,200
Usually now, like things like Mathematica or Matlab, these sorts of

2320
01:39:46,200 --> 01:39:46,400
things.

2321
01:39:46,400 --> 01:39:47,600
There's even like a free one.

2322
01:39:47,600 --> 01:39:49,200
I think, the good news ships.

2323
01:39:49,200 --> 01:39:50,600
I don't remember what it's called.

2324
01:39:51,200 --> 01:39:55,000
But basically, you can even have it help you solve equations.

2325
01:39:55,000 --> 01:39:57,300
If you're the type of person who wants, you know, how to solve an

2326
01:39:57,300 --> 01:39:57,700
equation.

2327
01:39:57,700 --> 01:39:58,100
You still have trouble.

2328
01:39:58,300 --> 01:40:00,100
Because you forget the minus sign or whatever.

2329
01:40:00,500 --> 01:40:02,200
There's even things that can help you with that.

2330
01:40:02,800 --> 01:40:05,900
And so, what I would say is, don't give up.

2331
01:40:05,900 --> 01:40:09,100
Hope if you want to be a game programmer and found math, very

2332
01:40:09,100 --> 01:40:10,300
difficult in high school.

2333
01:40:11,100 --> 01:40:15,300
You may find that you are able to go much further in a different

2334
01:40:15,300 --> 01:40:15,800
setting.

2335
01:40:16,300 --> 01:40:19,400
I can't promise that you will you may have just been born bad at math.

2336
01:40:19,400 --> 01:40:20,900
And if you are, I apologize.

2337
01:40:20,900 --> 01:40:21,800
There are certain things.

2338
01:40:21,800 --> 01:40:23,100
You just won't be able to do.

2339
01:40:23,500 --> 01:40:28,100
It's sad, but it might be true, but it may not be true.

2340
01:40:28,200 --> 01:40:32,300
And so I would definitely give it a good long try and I think anyone

2341
01:40:32,300 --> 01:40:35,400
who really puts their mind to it, unless they just somehow were born

2342
01:40:35,400 --> 01:40:38,100
without any ability to do that, that concrete thought necessary to do

2343
01:40:38,100 --> 01:40:38,500
it.

2344
01:40:38,700 --> 01:40:42,700
But I think if you can learn programming, you've got that enough of a

2345
01:40:42,700 --> 01:40:44,700
concrete part of the brand-new should be able to learn the math.

2346
01:40:44,800 --> 01:40:48,100
So what I would say is it's probably going to be more about your

2347
01:40:48,100 --> 01:40:52,800
determination to do it and less about the impossibility of it.

2348
01:40:53,000 --> 01:40:55,500
So I would highly recommend saying if that's something you really want

2349
01:40:55,500 --> 01:40:57,900
to do use.

2350
01:40:58,300 --> 01:41:02,300
Games as a motivation, to learn that math and you will be able I think

2351
01:41:02,300 --> 01:41:05,100
to learn it in that setting if you really put your mind to it and

2352
01:41:05,100 --> 01:41:07,200
dedicate several months to practice.

2353
01:41:08,300 --> 01:41:11,300
Even if you couldn't do it in school because I had a horrible time in

2354
01:41:11,300 --> 01:41:15,800
school and I hated math, hated math, in high school.

2355
01:41:16,100 --> 01:41:18,500
So, all right, everyone.

2356
01:41:19,400 --> 01:41:23,100
Oh, someone is all saying gee, good, new octave and canoes Sage.

2357
01:41:23,100 --> 01:41:25,200
They were saying so, there you go.

2358
01:41:25,200 --> 01:41:26,900
So that was the thing that I was thinking of the canoe kuenn.

2359
01:41:26,900 --> 01:41:30,000
So, alright, I think that is the end of the stream for tonight.

2360
01:41:30,100 --> 01:41:30,800
Thank you so much.

2361
01:41:30,800 --> 01:41:31,800
Everyone for joining us.

2362
01:41:31,800 --> 01:41:35,500
I had a wonderful time talking about cross-platform programming with

2363
01:41:35,500 --> 01:41:38,000
you and I cannot wait to talk about it some more.

2364
01:41:38,100 --> 01:41:39,700
Or tomorrow 8:00 p.m.

2365
01:41:39,700 --> 01:41:41,000
Pacific Standard time.

2366
01:41:41,200 --> 01:41:46,000
I hope to see you on the stream, and on our new forums to, If you

2367
01:41:46,000 --> 01:41:47,200
happen to go check it out.

2368
01:41:47,200 --> 01:41:50,300
Handmade Hero dot-org has the link if you would like to jump over

2369
01:41:50,300 --> 01:41:50,700
there.

2370
01:41:51,100 --> 01:41:52,400
Hope to see you there as well.

2371
01:41:52,400 --> 01:41:55,600
So, thank you everyone so much for joining me.

2372
01:41:55,600 --> 01:41:58,400
And also, obviously tonight a very special.

2373
01:41:58,900 --> 01:41:59,800
Thanks, go out again.

2374
01:42:00,000 --> 01:42:01,900
After the game, The Stream a lot of thinking, with the end again, to

2375
01:42:01,900 --> 01:42:03,500
the people who made the forums possible.

2376
01:42:03,700 --> 01:42:07,300
In fact, their names are baked into the forums now and will be so

2377
01:42:07,300 --> 01:42:08,000
forever.

2378
01:42:08,600 --> 01:42:10,800
We could not have done things like that episode guide.

2379
01:42:10,800 --> 01:42:15,200
Without the hard work of people who were really eager to help out with

2380
01:42:15,200 --> 01:42:16,900
handmade here, and I really appreciate that.

2381
01:42:16,900 --> 01:42:20,100
Same thing to the people of doing the platform ports, and stuff like

2382
01:42:20,100 --> 01:42:20,300
that.

2383
01:42:20,300 --> 01:42:22,900
It's been awesome and it really helps out other members of the

2384
01:42:22,900 --> 01:42:23,300
community.

2385
01:42:23,300 --> 01:42:24,300
So, thank you so much.

2386
01:42:24,300 --> 01:42:28,700
Everyone for doing that again, and, and thank you all for making

2387
01:42:28,700 --> 01:42:29,400
handmade hero.

2388
01:42:30,000 --> 01:42:30,900
Such a great thing.

2389
01:42:30,900 --> 01:42:33,900
I've been really enjoying it and I can't wait for the rest of this

2390
01:42:33,900 --> 01:42:35,100
week and the rest of all the week.

2391
01:42:35,100 --> 01:42:37,500
So, thanks everyone and I will see you tomorrow night.

