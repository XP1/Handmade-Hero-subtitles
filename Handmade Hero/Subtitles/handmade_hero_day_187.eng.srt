1
00:00:00,000 --> 00:00:01,100
And start recording.

2
00:00:01,400 --> 00:00:04,600
Hello everyone and welcome to handmade Heroes show where we code a

3
00:00:04,600 --> 00:00:06,600
complete game live on Twitch.

4
00:00:07,200 --> 00:00:12,600
You know, one of the things that is a problem.

5
00:00:13,100 --> 00:00:18,200
When you are trying to develop a game that's for educational purposes,

6
00:00:18,200 --> 00:00:21,900
like this one is and so your streaming every last little bit of the

7
00:00:21,900 --> 00:00:22,600
development.

8
00:00:22,600 --> 00:00:25,900
You only get one hour a night to work on it.

9
00:00:26,600 --> 00:00:29,500
And you also have to talk the entire time.

10
00:00:29,600 --> 00:00:29,800
So,

11
00:00:30,000 --> 00:00:33,000
It's a lot harder to program than it normally would be, so you have a

12
00:00:33,000 --> 00:00:37,600
pretty big head wind there and it makes it so that it's a lot harder

13
00:00:37,600 --> 00:00:40,400
to get as much done in an hour as you normally would, and that's

14
00:00:40,400 --> 00:00:41,100
unfortunate.

15
00:00:41,200 --> 00:00:42,600
So there's it's tough.

16
00:00:43,200 --> 00:00:49,200
However, once in a while, you actually get a pretty big windfall from

17
00:00:49,200 --> 00:00:53,300
this process and to say the least, that is exactly what happened

18
00:00:53,500 --> 00:00:54,100
yesterday.

19
00:00:54,100 --> 00:00:56,000
Because yesterday, we had a bug

20
00:00:56,900 --> 00:00:58,600
That is a relatively difficult bug.

21
00:00:58,600 --> 00:01:02,500
I would say it was a it was a pretty tricky one and I did not

22
00:01:02,500 --> 00:01:04,900
immediately think of really any Avenues.

23
00:01:04,900 --> 00:01:08,900
So we were going to have to today start by like starting starting

24
00:01:08,900 --> 00:01:09,400
going.

25
00:01:09,600 --> 00:01:11,300
All right let's see what all our assumptions are.

26
00:01:11,300 --> 00:01:12,800
Let's start trying to validate them.

27
00:01:12,800 --> 00:01:15,800
Let's capture enough information that we can start validate each one

28
00:01:16,000 --> 00:01:18,200
and start looking for the culprit blah blah, right?

29
00:01:19,100 --> 00:01:26,300
But instead the the sort of Hardcore viewers of handmade hero.

30
00:01:29,300 --> 00:01:29,800
Today.

31
00:01:31,000 --> 00:01:35,600
Found the bug, I mean I don't know that they found the bug, but from

32
00:01:35,600 --> 00:01:38,600
reading the forum's people were posting like we think this is where

33
00:01:38,600 --> 00:01:40,000
the bug is, we think we found it.

34
00:01:40,000 --> 00:01:44,200
And when I read what they wrote, I think it's a pretty solid guess.

35
00:01:44,300 --> 00:01:47,200
Like, I was like, that sounds a lot.

36
00:01:47,200 --> 00:01:48,400
Like it could be the bug.

37
00:01:49,500 --> 00:01:55,000
So, I think, in the same way that the stream takes away, a lot of

38
00:01:55,000 --> 00:02:00,300
productivity, because of the nature of what it is once in a while you

39
00:02:00,300 --> 00:02:00,700
get a pretty

40
00:02:00,800 --> 00:02:01,100
Boost.

41
00:02:01,100 --> 00:02:05,800
Because if it were just me and it was in real life and I started to

42
00:02:05,800 --> 00:02:10,300
bugging this, I could have been debugging it for several hours and

43
00:02:11,100 --> 00:02:14,700
instead it was just like you just have all these sub, it's like having

44
00:02:14,700 --> 00:02:16,400
a bunch of programmers in the office.

45
00:02:16,400 --> 00:02:18,200
You can just call over and be like, hey, I got this bug.

46
00:02:18,200 --> 00:02:20,600
You guys want to look at it and like they all start looking at it and

47
00:02:20,600 --> 00:02:22,100
like somebody finds it or whatever, right?

48
00:02:24,200 --> 00:02:27,200
So let's talk about that, let's just Dive Right In and see if they

49
00:02:27,200 --> 00:02:27,800
found it.

50
00:02:27,800 --> 00:02:30,200
I think they probably did like I said when I looked at as like that's

51
00:02:30,200 --> 00:02:33,400
pretty good and I think it indicates something that we should probably

52
00:02:33,400 --> 00:02:38,400
do as well and I'll talk about that just as soon as we look at the

53
00:02:38,400 --> 00:02:38,700
bug.

54
00:02:38,700 --> 00:02:42,800
So it's day 1 87 today so if you want to follow along at home day, 186

55
00:02:43,600 --> 00:02:45,700
is the source code to unpack.

56
00:02:45,700 --> 00:02:46,200
That's the code.

57
00:02:46,200 --> 00:02:46,900
I'm starting with today.

58
00:02:46,900 --> 00:02:51,000
So if you preorder the game on a m dot org unpacked a 186 is source

59
00:02:51,000 --> 00:02:52,200
code day 187's.

60
00:02:52,200 --> 00:02:53,500
The The Code 4

61
00:02:53,700 --> 00:02:54,100
That.

62
00:02:54,300 --> 00:02:59,700
So let's talk about what was happening and we'll sort of talk about

63
00:03:00,000 --> 00:03:02,500
They thought the bug was so, here we are.

64
00:03:04,200 --> 00:03:08,300
And as you can see, we get what looks like a pretty valid profile.

65
00:03:08,300 --> 00:03:11,200
Carpeting at the beginning, we're actually seeing as those things

66
00:03:11,200 --> 00:03:15,300
scroll by when it sort of started, we were seeing some reasonable

67
00:03:15,300 --> 00:03:20,000
profiles but then unfortunately after that initial wave, we don't see

68
00:03:20,000 --> 00:03:20,600
anything.

69
00:03:21,000 --> 00:03:23,500
It's kind of interesting here as I read launch it now I still don't

70
00:03:23,500 --> 00:03:27,300
see anything so you only get some right at the beginning and I think

71
00:03:27,300 --> 00:03:32,000
part of that is probably also because the first time you run it caches

72
00:03:32,000 --> 00:03:33,200
are cold the

73
00:03:33,700 --> 00:03:36,600
Takes longer all that stuff and those delays, I think we're probably

74
00:03:36,600 --> 00:03:37,600
helping us out.

75
00:03:38,300 --> 00:03:39,900
So we Tracked Down The Bug.

76
00:03:40,300 --> 00:03:44,000
Yesterday, we actually did kind of look at what the bug actually was.

77
00:03:44,000 --> 00:03:45,400
And we knew what the bug was.

78
00:03:45,400 --> 00:03:46,900
We just didn't know what was causing it.

79
00:03:47,300 --> 00:03:51,200
So what the bug was is that we are sort of doing this this thing that

80
00:03:51,200 --> 00:03:52,100
per thread.

81
00:03:53,300 --> 00:03:57,700
As we go through, we look every time we open a timing block, we keep

82
00:03:57,700 --> 00:03:58,700
track of that.

83
00:03:58,800 --> 00:04:02,200
And then we look for the clothes, the the matching clothes block for

84
00:04:02,200 --> 00:04:03,500
it and then we kind of retire that.

85
00:04:03,500 --> 00:04:07,100
So you keep like a little stack for every thread as you open blocks,

86
00:04:07,100 --> 00:04:08,500
the stock gets a little higher.

87
00:04:08,500 --> 00:04:13,100
As you close them, it gets a little lower and what we found was that

88
00:04:13,100 --> 00:04:16,899
seem to be working just fine up until some point when we got a bunch

89
00:04:16,899 --> 00:04:20,000
of debug records that look like they had opens with no match and

90
00:04:20,000 --> 00:04:20,600
closes.

91
00:04:24,500 --> 00:04:28,400
And that was a little bit of a Puzzler and one of the things that's

92
00:04:28,400 --> 00:04:31,600
generally true I find because, you know, like I was saying on the pre

93
00:04:31,600 --> 00:04:34,100
stream, I've been programming for a long time and program for 30

94
00:04:34,100 --> 00:04:34,500
years.

95
00:04:36,000 --> 00:04:38,900
One of the things that's generally true when you're debugging

96
00:04:38,900 --> 00:04:41,600
something, is that?

97
00:04:42,500 --> 00:04:47,700
Because I programmed for so long, usually, I did bug things in 10, 20

98
00:04:47,700 --> 00:04:50,100
minutes, something like this, even if it's a relatively hard bug,

99
00:04:50,100 --> 00:04:54,000
because I kind of know what the problems could be right, and I go look

100
00:04:54,000 --> 00:04:54,200
for

101
00:04:54,500 --> 00:04:57,400
And it's one of them and we fix it and you've seen that happen a bunch

102
00:04:57,400 --> 00:05:02,700
of times on the stream, but every so often, even if you've been

103
00:05:02,700 --> 00:05:06,300
programming for this long, at least if you're anything like me you

104
00:05:06,300 --> 00:05:08,000
still get bugs that are stumpers.

105
00:05:08,400 --> 00:05:12,000
You get a bug to the Stamper and it stumps you and you're like, I just

106
00:05:12,000 --> 00:05:15,600
don't know what's going on and it does it can take hours, it can take

107
00:05:15,600 --> 00:05:16,200
days.

108
00:05:16,200 --> 00:05:17,600
Sometimes to find these bugs.

109
00:05:19,000 --> 00:05:24,500
And sometimes it turns out that it legitimately just was that hard.

110
00:05:25,100 --> 00:05:29,300
I've had times when the compiler was outputting bad code, that's, I

111
00:05:29,300 --> 00:05:32,200
mean that just takes a long time to track down, right?

112
00:05:33,200 --> 00:05:35,900
You've had I've had times when the operating system has a bug in it,

113
00:05:36,500 --> 00:05:39,600
so things that are just fundamental are flawed and you go look for

114
00:05:39,600 --> 00:05:44,900
them and you're like that actually probably was going to just take a

115
00:05:44,900 --> 00:05:45,500
couple of days.

116
00:05:45,500 --> 00:05:47,200
It was that hard, right?

117
00:05:48,600 --> 00:05:49,600
but other times,

118
00:05:50,700 --> 00:05:52,300
The bug is not so complicated.

119
00:05:52,500 --> 00:05:52,700
Right.

120
00:05:52,700 --> 00:05:54,100
It's a very simple bug.

121
00:05:55,000 --> 00:05:59,700
And so the question is, why did that bug take so long to find?

122
00:06:01,200 --> 00:06:05,800
When these other bugs, which are comparatively simple did not.

123
00:06:06,600 --> 00:06:12,000
And again the reason there is because of that intuition the reason is

124
00:06:12,000 --> 00:06:16,600
because you make certain assumptions about what is true, in your code

125
00:06:17,400 --> 00:06:21,700
and your debugging ability from years of experience, usually ends up,

126
00:06:21,700 --> 00:06:23,000
being built up around.

127
00:06:23,000 --> 00:06:26,900
What are the sorts of things that are probably going to be the case

128
00:06:26,900 --> 00:06:27,200
here?

129
00:06:27,400 --> 00:06:30,200
I will go look for them and the bug usually ends up.

130
00:06:30,300 --> 00:06:33,500
Being there and you're like, okay and so you're debugging process,

131
00:06:33,500 --> 00:06:37,400
typically boils down to checking things that allow you to narrow in on

132
00:06:37,400 --> 00:06:38,800
that field of possibilities.

133
00:06:39,300 --> 00:06:44,200
But what you don't do, during that time, he's check all the other

134
00:06:44,200 --> 00:06:48,100
things in the program because some of those could be wrong, but

135
00:06:48,100 --> 00:06:52,400
obviously you can't check them all and the where you draw that line

136
00:06:52,900 --> 00:06:57,100
between what you assumed to be true and what you believe to be up in

137
00:06:57,100 --> 00:07:00,200
the air and they need to be verified the stumper bugs.

138
00:07:00,300 --> 00:07:03,200
Come when you are unable to draw that line correctly.

139
00:07:03,300 --> 00:07:07,800
You have carved something out of consideration that is actually where

140
00:07:07,800 --> 00:07:09,700
the bug lies, right?

141
00:07:10,200 --> 00:07:13,500
It's just like trying to find anything else in the real world if you

142
00:07:13,500 --> 00:07:16,800
lost your keys and your trying to find them and you don't find them

143
00:07:16,800 --> 00:07:20,500
for a long time, even though they turn out to be in a place that was

144
00:07:20,500 --> 00:07:21,500
totally reasonable.

145
00:07:21,700 --> 00:07:25,300
The reason is because you just don't think that the keys could

146
00:07:25,300 --> 00:07:27,400
possibly have been somewhere, right?

147
00:07:27,900 --> 00:07:30,200
But then it turns out, you're like, oh, right, they could have

148
00:07:30,300 --> 00:07:31,600
They're right.

149
00:07:32,100 --> 00:07:34,300
Because obviously if you're going to look for your keys, you can't

150
00:07:34,300 --> 00:07:35,700
look everywhere in the world.

151
00:07:35,800 --> 00:07:38,500
You have to make some guesses about where they might be.

152
00:07:39,300 --> 00:07:43,000
And so the times when you find your keys and it's easy is because you

153
00:07:43,000 --> 00:07:47,000
guessed correctly after a few tries, some of the places they could

154
00:07:47,000 --> 00:07:48,500
have been and you found them, right?

155
00:07:48,500 --> 00:07:50,500
But if it's in that really tricky place,

156
00:07:52,900 --> 00:07:55,500
That yeah it turns out you were there with the keys.

157
00:07:55,600 --> 00:07:58,300
You just never, you didn't remember, right?

158
00:07:58,800 --> 00:07:59,600
You never look there.

159
00:07:59,600 --> 00:08:01,600
You don't find them for days or who knows what happens or you don't

160
00:08:01,600 --> 00:08:02,200
find them at all?

161
00:08:03,600 --> 00:08:06,500
And so this bug is definitely one of those kinds, right?

162
00:08:07,200 --> 00:08:12,200
And so, what the, what the folks on the on the forums are staying and

163
00:08:12,200 --> 00:08:14,000
we'll see if they're correct.

164
00:08:14,300 --> 00:08:19,300
What they were saying is that we were tripped up by our translation

165
00:08:19,300 --> 00:08:21,200
unit Index, right?

166
00:08:21,200 --> 00:08:24,700
Because if you remember how this works we tried out something new.

167
00:08:24,700 --> 00:08:28,300
And this again is kind of probably a little bit indicative of why I

168
00:08:28,300 --> 00:08:31,700
guessed poorly on where the bugs might be or where that line should be

169
00:08:31,700 --> 00:08:32,200
drawn.

170
00:08:33,000 --> 00:08:35,700
We tried a new thing they haven't tried before and I don't know how

171
00:08:35,700 --> 00:08:36,900
effective it is, right?

172
00:08:36,900 --> 00:08:38,400
And that was using.

173
00:08:38,900 --> 00:08:42,299
In fact, I'll just open up the code so you can case you don't

174
00:08:42,299 --> 00:08:48,800
remember, which is using this sort of counter system to have a unique

175
00:08:48,800 --> 00:08:52,400
ID for each of our debug locations, right?

176
00:08:54,100 --> 00:08:55,500
It was pretty cool, it's interesting.

177
00:08:55,500 --> 00:08:58,700
I've never tried it before and it was just a consequence of having

178
00:08:59,200 --> 00:08:59,800
very small.

179
00:09:00,200 --> 00:09:03,300
Of translation units because normally you can't do that because you

180
00:09:03,300 --> 00:09:06,200
have a large number of translation units since we have only three, it

181
00:09:06,200 --> 00:09:09,500
was well within the realm of accomplishments so we tried it.

182
00:09:10,500 --> 00:09:14,800
What that means is that we need a translation unit number in order to

183
00:09:14,800 --> 00:09:18,900
figure out which debug record actually goes.

184
00:09:21,800 --> 00:09:23,700
In what place, right?

185
00:09:24,500 --> 00:09:31,000
So if we have a debug record index tells us uniquely for a translation

186
00:09:31,000 --> 00:09:32,100
unit, which debug record.

187
00:09:32,100 --> 00:09:34,100
We're looking at without the translation.

188
00:09:34,100 --> 00:09:35,400
Unit index being correct.

189
00:09:35,400 --> 00:09:37,400
We don't actually know which debug record it is.

190
00:09:37,400 --> 00:09:41,200
We have to have a translation at zero one or two to say, whether it is

191
00:09:41,200 --> 00:09:44,300
in the main code, the optimized code to the platform layer, right?

192
00:09:44,600 --> 00:09:47,100
And that was a concession that we had to make in order to try out this

193
00:09:47,100 --> 00:09:48,300
counter system.

194
00:09:49,000 --> 00:09:50,800
Well, it turns out,

195
00:09:51,600 --> 00:09:54,700
Remember, I had actually started out doing it correctly, I had made

196
00:09:54,700 --> 00:09:59,800
record debug event, I think or something similar to it, a macro, which

197
00:09:59,800 --> 00:10:01,600
is what I want to do eventually anyway.

198
00:10:02,100 --> 00:10:04,400
But I switched it to an inline function at one point so that we could

199
00:10:04,400 --> 00:10:07,200
watch it and have an easier time to bug a.

200
00:10:07,200 --> 00:10:08,800
Well, there's a problem with that.

201
00:10:09,000 --> 00:10:12,800
The problem with that is that if it is an inline function, if we're

202
00:10:12,800 --> 00:10:16,000
not building within lining on everywhere,

203
00:10:17,200 --> 00:10:19,900
And even if we are, I guess I'm not really sure what the rules would

204
00:10:19,900 --> 00:10:21,600
be for this in C++.

205
00:10:22,700 --> 00:10:26,800
But the compiler is certainly free to actually not in line that

206
00:10:26,800 --> 00:10:27,300
function.

207
00:10:27,700 --> 00:10:31,000
If it doesn't in line that function than what's going to happen is

208
00:10:31,000 --> 00:10:34,800
there's going to be a version of it generated in every translation

209
00:10:34,800 --> 00:10:35,900
unit, right?

210
00:10:36,100 --> 00:10:38,000
So every transfers that calls it.

211
00:10:38,100 --> 00:10:39,900
So we have three translucent translation units.

212
00:10:39,900 --> 00:10:42,100
Each of them calls, record, debug event.

213
00:10:42,100 --> 00:10:42,900
What that means.

214
00:10:43,000 --> 00:10:46,700
Is there going to be a version of record

215
00:10:46,800 --> 00:10:49,400
I meant thrown into each of those translation units.

216
00:10:49,500 --> 00:10:53,400
However, when it comes time to link the Linker is only going to use

217
00:10:53,400 --> 00:10:55,800
one of them because that's how the Linker works.

218
00:10:55,900 --> 00:10:56,900
It does not.

219
00:10:58,600 --> 00:11:00,600
Does not try to keep them separate.

220
00:11:00,600 --> 00:11:03,700
And, at least that, as far as I know, it does not necessarily try to

221
00:11:03,700 --> 00:11:09,700
keep them separate so it's totally within its ability, like it's

222
00:11:09,700 --> 00:11:10,900
allowed as far as I know.

223
00:11:10,900 --> 00:11:13,600
And again, I'm not really a C++ language learner these days because I

224
00:11:13,600 --> 00:11:16,100
don't pay much attention to it so maybe I don't even know if that's

225
00:11:16,100 --> 00:11:16,300
true.

226
00:11:16,300 --> 00:11:18,800
It could be that the in line is supposed to always make sure there's

227
00:11:18,800 --> 00:11:22,800
one per translation or something like that but what they were

228
00:11:22,800 --> 00:11:26,200
hypothesizing on the forums and I guess people actually check this

229
00:11:26,200 --> 00:11:28,200
out, was it what's happening is it's

230
00:11:28,300 --> 00:11:30,700
Generating a different record debug in.

231
00:11:30,700 --> 00:11:34,900
But in record, debug event for each translation unit, putting the

232
00:11:34,900 --> 00:11:36,300
correct translation unit in there.

233
00:11:36,300 --> 00:11:40,800
But then at link time, it's actually throwing out one of them, so that

234
00:11:40,800 --> 00:11:44,200
no matter which translation unit is actually calling in to record

235
00:11:44,200 --> 00:11:45,100
debug event.

236
00:11:45,600 --> 00:11:50,600
It's only ever using one of the translation units, what that means,

237
00:11:50,600 --> 00:11:54,000
we'll have conflicting debug record indices, which will make it look

238
00:11:54,000 --> 00:11:57,200
like something is being opened and closed in a pattern, that's totally

239
00:11:57,200 --> 00:11:58,100
not correct.

240
00:11:58,300 --> 00:11:59,900
T' for what could actually.

241
00:12:00,100 --> 00:12:01,400
Be happening there.

242
00:12:02,700 --> 00:12:03,900
That was their hypothesis.

243
00:12:04,100 --> 00:12:08,500
It certainly sounds like a very good guest to me and it turns out that

244
00:12:08,500 --> 00:12:12,800
there's actually a pretty easy way for us to determine that.

245
00:12:12,900 --> 00:12:17,300
What we can do is just see if the translation unit index ever actually

246
00:12:17,300 --> 00:12:21,300
equals something other than 0 or 2.

247
00:12:21,600 --> 00:12:22,000
Right?

248
00:12:22,000 --> 00:12:26,700
So optimized our to translation units optimized and Main get compiled

249
00:12:26,700 --> 00:12:27,100
together.

250
00:12:27,100 --> 00:12:30,700
We should be seeing translation units of both 0 & 1 when we run

251
00:12:30,700 --> 00:12:32,400
through our debug event

252
00:12:32,700 --> 00:12:36,600
So what I'm going to do is take a look and see some in the wrong

253
00:12:36,600 --> 00:12:37,200
function here.

254
00:12:37,500 --> 00:12:40,300
When we're actually spending over them, I just want to see if we see

255
00:12:40,300 --> 00:12:43,800
both of them or not, if we see both of them, then it might, it might

256
00:12:43,800 --> 00:12:45,900
suggest that that's not actually the case, although it still could be

257
00:12:45,900 --> 00:12:47,700
for various other reasons.

258
00:12:47,800 --> 00:12:50,700
But I'm going to just see if that's the case if we don't see ever

259
00:12:50,700 --> 00:12:51,900
translation unit 1.

260
00:12:52,000 --> 00:12:54,300
Then we know yep that's exactly what happened.

261
00:12:54,300 --> 00:12:56,800
We're only getting one version of record debug event and that's

262
00:12:56,800 --> 00:12:57,600
throwing us off.

263
00:12:57,600 --> 00:13:00,400
So that's at least a bug if not the bug and it seems like a very

264
00:13:00,400 --> 00:13:02,300
likely culprit for the bug.

265
00:13:02,800 --> 00:13:06,000
so, let's take a look here when we run through these, I'm going to do

266
00:13:06,000 --> 00:13:06,800
in assert

267
00:13:08,200 --> 00:13:12,500
That the event translation unit is not equal to 0 that should fire

268
00:13:12,500 --> 00:13:13,800
right away, right?

269
00:13:13,800 --> 00:13:17,300
Because we believe we should have translation unit 0 ones in there and

270
00:13:17,300 --> 00:13:21,600
we do so that's fine and now we're going to see about translation unit

271
00:13:21,600 --> 00:13:24,600
1 and I apophysis here would be that would not fire.

272
00:13:26,400 --> 00:13:27,000
It does.

273
00:13:27,200 --> 00:13:30,600
So first of all we've learned that there are sometimes at least where

274
00:13:30,600 --> 00:13:32,400
translation unit 1 is happening.

275
00:13:32,400 --> 00:13:35,600
Now I'll double-check translation unit to as well but I assume that

276
00:13:35,600 --> 00:13:42,000
means we've got all three translation units happening right okay so

277
00:13:42,500 --> 00:13:44,900
it's not necessarily clear to me yet.

278
00:13:45,300 --> 00:13:48,800
What the that the what they think is the bug is the bug because we are

279
00:13:48,800 --> 00:13:51,200
getting translation unit 1 which is the optimized translation unit,

280
00:13:51,200 --> 00:13:56,100
but we don't necessarily still know whether all of the paths from

281
00:13:56,200 --> 00:13:59,800
That optimized one are actually getting the correct translation unit

282
00:13:59,900 --> 00:14:00,700
even so.

283
00:14:01,000 --> 00:14:03,700
So what I'd like to do is take a look at handmade optimized here.

284
00:14:03,900 --> 00:14:06,800
I'd like to see what the time functions actually are.

285
00:14:10,500 --> 00:14:12,900
So there's a time there's two of them, right?

286
00:14:12,900 --> 00:14:14,700
There's there's this one here.

287
00:14:17,100 --> 00:14:17,700
Right.

288
00:14:18,000 --> 00:14:19,300
And there's this one here.

289
00:14:20,500 --> 00:14:25,200
So it's possible that one or the other of them is not actually

290
00:14:25,200 --> 00:14:26,300
recording it properly.

291
00:14:26,500 --> 00:14:30,200
I'm going to go ahead and just step into that function and see and you

292
00:14:30,200 --> 00:14:32,600
know what else I'm going to do to make it a little bit easier on us.

293
00:14:32,800 --> 00:14:36,600
I'm going to see if this bug Repros in fully unoptimized mode.

294
00:14:36,700 --> 00:14:40,700
So if I actually turn off optimization in all the paths so we're not

295
00:14:40,700 --> 00:14:44,100
building optimize at all, what happens, right?

296
00:14:45,200 --> 00:14:46,200
Let's find out.

297
00:14:47,400 --> 00:14:51,900
So, that's very interesting right there that alone starts to suggest

298
00:14:51,900 --> 00:14:56,700
that perhaps that that is actually true because if the region can't

299
00:14:56,700 --> 00:14:59,300
went up that suggests that maybe we're actually getting a more

300
00:14:59,300 --> 00:14:59,800
accurate.

301
00:15:00,000 --> 00:15:00,800
Would run in there.

302
00:15:01,300 --> 00:15:02,600
But that's sort of a separate thing.

303
00:15:02,700 --> 00:15:04,500
We're gonna have to figure out something to do about this because I

304
00:15:04,500 --> 00:15:06,200
don't like having to sort of make these.

305
00:15:07,500 --> 00:15:09,900
We're gonna have to figure out some way of making it cleaner way of

306
00:15:09,900 --> 00:15:10,600
storing these things.

307
00:15:10,600 --> 00:15:12,400
But anyway, okay, we'll go here and see

308
00:15:14,600 --> 00:15:18,300
And hey look, it does not actually seem to Repro in debug mode.

309
00:15:19,600 --> 00:15:24,500
Which again starts to kind of suggests that that could actually be the

310
00:15:24,500 --> 00:15:25,800
case that it's the translation.

311
00:15:25,800 --> 00:15:29,100
Unit thing is maybe optimizing, one of them welding it into the code

312
00:15:29,100 --> 00:15:30,600
and the other ones calling out.

313
00:15:30,700 --> 00:15:34,400
So we are still getting some ones and some zeros out of there, right?

314
00:15:34,400 --> 00:15:36,400
I don't know but it could also just because of the speed.

315
00:15:36,600 --> 00:15:37,800
I really just don't know at this point.

316
00:15:37,800 --> 00:15:41,700
Again just trying to investigate to see whether or not that makes

317
00:15:41,700 --> 00:15:41,900
sense.

318
00:15:41,900 --> 00:15:45,700
So, it looks like I do have to have this guy on full optimizations, or

319
00:15:45,700 --> 00:15:48,700
at least something Beyond, no optimizations in order for it to have

320
00:15:48,700 --> 00:15:49,000
him.

321
00:15:50,200 --> 00:15:51,100
Record properly.

322
00:15:51,500 --> 00:15:52,200
There he is.

323
00:15:52,200 --> 00:15:53,700
And the bug is obviously happening.

324
00:15:53,700 --> 00:15:54,500
No question there.

325
00:15:54,500 --> 00:15:55,500
We're not seeing anything.

326
00:15:56,100 --> 00:15:58,800
So let's go ahead into handmade optimized here.

327
00:15:59,500 --> 00:16:04,300
What I'm going to go ahead and do is I'm going to I'm going to go in

328
00:16:04,300 --> 00:16:08,700
here and I'm going to set a breakpoint in draw a rectangle quickly.

329
00:16:08,700 --> 00:16:11,300
So draw rectangle quickly.

330
00:16:12,100 --> 00:16:13,000
I'm going to do a run.

331
00:16:14,400 --> 00:16:18,300
And inside this run, I'm going to see if I can if I can actually look

332
00:16:18,400 --> 00:16:23,700
at the code that's being executed to find out what's happening again,

333
00:16:23,700 --> 00:16:26,300
with that with that timing block, right?

334
00:16:26,300 --> 00:16:30,300
I want to see what the actual thing is that it does.

335
00:16:30,900 --> 00:16:33,100
I guess I can't really there it is.

336
00:16:35,900 --> 00:16:37,700
I don't need multiple threads on this.

337
00:16:37,700 --> 00:16:40,900
So I'm going to do the same thing that I did before and freeze all the

338
00:16:40,900 --> 00:16:43,800
other threads that are running.

339
00:16:44,700 --> 00:16:49,000
And so I am going to just take all these guys who are running our

340
00:16:49,000 --> 00:16:49,900
other stuff here.

341
00:16:50,000 --> 00:16:53,500
I'm going to freeze those guys so that they are frozen and then I'm

342
00:16:53,500 --> 00:16:54,700
going to step into this guy.

343
00:16:57,400 --> 00:16:59,700
So, here we are on record debug event, right?

344
00:16:59,700 --> 00:17:01,300
It's getting written out.

345
00:17:01,400 --> 00:17:04,800
I'm going to take a look here at our Global debug table, so that I can

346
00:17:04,800 --> 00:17:08,800
have some sort of an idea of what's getting recorded.

347
00:17:08,900 --> 00:17:14,700
You can see here where we are in that in that list 5924 40, that's

348
00:17:14,700 --> 00:17:16,099
been incremented already.

349
00:17:16,800 --> 00:17:20,700
So we're looking at something in Array 0.

350
00:17:21,400 --> 00:17:22,099
That is

351
00:17:23,599 --> 00:17:25,599
Near 59 to 440.

352
00:17:26,300 --> 00:17:29,900
So it's going to be like, let's say I've been here for 39, something

353
00:17:29,900 --> 00:17:34,300
like that and I'm going to take a look at this guy's.

354
00:17:34,300 --> 00:17:36,400
So let's take a look as we right through here.

355
00:17:38,000 --> 00:17:41,000
You know what, the other thing we could do is to, there's another way

356
00:17:41,000 --> 00:17:42,500
we could actually figure this out.

357
00:17:43,100 --> 00:17:46,400
I want to take a look and see where it thinks we are.

358
00:17:48,500 --> 00:17:50,700
So there we are in handmade temp dot DL.

359
00:17:50,700 --> 00:17:54,300
I'm just trying to figure out if there is a fork or debug event.

360
00:17:57,300 --> 00:17:59,200
So, you can actually see.

361
00:18:00,900 --> 00:18:05,200
I think we're basically, we're basically seeing exactly what what we

362
00:18:05,200 --> 00:18:07,000
expect to see if the bug is what they said.

363
00:18:07,000 --> 00:18:12,500
It is we're actually in a function right now so this was not in lined.

364
00:18:12,800 --> 00:18:16,800
So it is highly possible that these things got collapsed, right?

365
00:18:16,900 --> 00:18:19,500
So let's take a look and see what it right to the translation unit.

366
00:18:19,500 --> 00:18:21,100
Let's see if we can see that happen.

367
00:18:21,600 --> 00:18:24,700
I don't know if we can or not the debug record index should have

368
00:18:24,700 --> 00:18:25,800
gotten written in here.

369
00:18:26,000 --> 00:18:27,200
I'm not seeing it.

370
00:18:27,700 --> 00:18:29,700
I'm wondering if maybe

371
00:18:30,400 --> 00:18:32,300
I'm still off by a little bit here.

372
00:18:32,900 --> 00:18:33,800
I'm not sure.

373
00:18:34,300 --> 00:18:37,200
Don't know how many of these I need to look at.

374
00:18:37,500 --> 00:18:40,200
Let's take a look at these guys here.

375
00:18:42,700 --> 00:18:45,900
None of them appear to actually been updated and I can't really look

376
00:18:45,900 --> 00:18:46,600
at that.

377
00:18:46,700 --> 00:18:48,400
Oh well you know what?

378
00:18:48,600 --> 00:18:51,500
I can just look at the disassembly and see what that actually

379
00:18:51,500 --> 00:18:53,000
executed, right?

380
00:18:55,700 --> 00:19:02,100
So it looks like it moved to re x r ax, the keyword pointer here and

381
00:19:02,100 --> 00:19:05,800
then it moved a b pointer and it moves zero, that's the wrong

382
00:19:05,800 --> 00:19:06,700
translation unit.

383
00:19:07,800 --> 00:19:08,300
Right.

384
00:19:10,600 --> 00:19:11,700
So they totally nailed it.

385
00:19:13,200 --> 00:19:15,900
So I didn't actually look at who the people are on the forums who

386
00:19:15,900 --> 00:19:18,800
found it, but good work, guys.

387
00:19:18,800 --> 00:19:20,800
I mean that you're right on the money.

388
00:19:21,300 --> 00:19:24,300
That's exactly what the problem is right there, right?

389
00:19:25,800 --> 00:19:30,100
And so, the fact that it chose to throw out, that guy is exactly why

390
00:19:30,100 --> 00:19:30,900
we had the problem.

391
00:19:30,900 --> 00:19:34,300
Now, you know, the trivial fix for this, obviously there's a very,

392
00:19:34,300 --> 00:19:37,300
very simple fix for this, which is just to make this a macro and then

393
00:19:37,300 --> 00:19:39,500
it has to be expanded in line.

394
00:19:41,700 --> 00:19:44,700
You know, I can or you could do a force in line would be the way to do

395
00:19:44,700 --> 00:19:45,000
it.

396
00:19:45,600 --> 00:19:48,800
And so, if I did something like this, right?

397
00:19:50,300 --> 00:19:51,100
And then

398
00:19:52,700 --> 00:19:54,700
C, backslash region.

399
00:19:56,700 --> 00:20:00,100
I could probably get away with just doing that and that may fix the

400
00:20:00,100 --> 00:20:00,600
problem.

401
00:20:00,600 --> 00:20:01,700
Just straight away.

402
00:20:02,300 --> 00:20:04,800
You know, let's find out.

403
00:20:06,200 --> 00:20:06,800
And it does.

404
00:20:07,700 --> 00:20:10,600
So that was it it was just a problem with our translation

405
00:20:11,800 --> 00:20:12,400
traditionalist.

406
00:20:12,400 --> 00:20:16,000
But here's what I'm thinking, just based on that,

407
00:20:18,800 --> 00:20:20,500
First of all, we should take a moment.

408
00:20:21,700 --> 00:20:23,500
We really need to reverse all the shame.

409
00:20:25,900 --> 00:20:30,000
Maybe like if the owl of Shame is backwards or something that's like

410
00:20:30,000 --> 00:20:31,000
an owl of success.

411
00:20:31,000 --> 00:20:35,200
Like you guys have found that that was a great job finding that

412
00:20:36,300 --> 00:20:38,600
Like, well done, because that's a tricky one.

413
00:20:38,600 --> 00:20:41,600
Like again, it was the compiler doing something.

414
00:20:41,600 --> 00:20:44,900
In particular that, you know, we weren't thinking it could do and in a

415
00:20:44,900 --> 00:20:46,300
way that's like, kind of subtle.

416
00:20:46,300 --> 00:20:49,600
And so, you know, I mean, that was that was good work.

417
00:20:50,600 --> 00:20:53,000
So good work to everyone at found that that was really, really well

418
00:20:53,000 --> 00:20:53,400
done.

419
00:20:53,600 --> 00:20:56,800
And like I said that probably saved a lot of stream time because I

420
00:20:56,800 --> 00:20:59,700
would have had to go through piece by piece until I Came Upon that.

421
00:21:00,100 --> 00:21:03,200
It would have taken a very long time, so that's pretty awesome.

422
00:21:04,500 --> 00:21:07,900
However, so we should definitely say that.

423
00:21:10,600 --> 00:21:15,200
But the other thing that I would like to mention is I think for me

424
00:21:15,900 --> 00:21:20,600
that may be the straw that breaks the camel's back as far as the camel

425
00:21:20,600 --> 00:21:22,900
of using the per translation.

426
00:21:22,900 --> 00:21:24,400
Unit stuff is concerned.

427
00:21:25,000 --> 00:21:26,800
Because again it was an experiment.

428
00:21:26,800 --> 00:21:28,300
It's something I've never tried before.

429
00:21:28,300 --> 00:21:34,300
I think it probably does have some useful aspects to it, but I feel

430
00:21:34,300 --> 00:21:37,300
like that kind of bug is very subtle.

431
00:21:37,700 --> 00:21:40,200
It was because of complexity that we had to introduce

432
00:21:40,400 --> 00:21:42,600
In order to use the counter.

433
00:21:44,100 --> 00:21:49,700
And I just don't feel comfortable relying on something like that when

434
00:21:49,700 --> 00:21:50,500
kind of now I know.

435
00:21:50,500 --> 00:21:51,100
All right, there's some cut.

436
00:21:51,100 --> 00:21:54,700
There's there was enough, Jank Enos and you know if there's tankiness

437
00:21:54,700 --> 00:21:57,800
that's not the end of the world, but it's janking is that we've now

438
00:21:57,800 --> 00:22:02,800
seen cause of subtle bug that to me suggests, it's time to say, this

439
00:22:02,800 --> 00:22:05,200
is not a reliable way to do this, right?

440
00:22:05,800 --> 00:22:09,300
And that's fine, you know, that's not the end of the world.

441
00:22:09,600 --> 00:22:11,900
You got to experiment, you got to try stuff out.

442
00:22:12,000 --> 00:22:12,900
This was a new thing.

443
00:22:12,900 --> 00:22:13,600
I had not tried it.

444
00:22:13,800 --> 00:22:18,500
For I just feel like I'm kind of, I'm feeling on the side of.

445
00:22:18,500 --> 00:22:20,600
I don't love it, I don't like it.

446
00:22:20,600 --> 00:22:23,100
It introduced too much complexity for what should have been, a

447
00:22:23,100 --> 00:22:24,000
relatively simple thing.

448
00:22:24,200 --> 00:22:30,300
And I don't think it saves enough in return to really be at least for

449
00:22:30,300 --> 00:22:34,500
what we're doing for this purpose to really be worth that extra

450
00:22:34,500 --> 00:22:39,000
complexity because the complexity has costs like we just saw right?

451
00:22:40,800 --> 00:22:42,400
So that's my feeling on it.

452
00:22:42,600 --> 00:22:43,600
Now we don't have to fix

453
00:22:43,700 --> 00:22:47,500
It right now because that is a suitable fix for now.

454
00:22:48,900 --> 00:22:53,000
But I do feel like that's something, you know, I would like to just

455
00:22:53,000 --> 00:23:00,500
say here that I would like to switch away from the translation unit

456
00:23:00,500 --> 00:23:10,700
indexing and just go a more standard one time hash table.

457
00:23:12,000 --> 00:23:16,300
Because the complexity seems to be causing problems.

458
00:23:21,200 --> 00:23:21,700
So, yeah.

459
00:23:21,700 --> 00:23:24,500
So I'm a little, I'm a little worried about that, I don't like it and

460
00:23:24,500 --> 00:23:28,500
I think that for me, that's that would suggest that I would not do

461
00:23:28,500 --> 00:23:32,500
this this way, again, it's working now so, you know, maybe we just

462
00:23:32,500 --> 00:23:33,400
leave it for now.

463
00:23:33,900 --> 00:23:36,800
But I think, you know, if we had another bug in it, I would say, let's

464
00:23:36,800 --> 00:23:37,500
replace it.

465
00:23:37,600 --> 00:23:38,500
Let's not even to bucket.

466
00:23:38,500 --> 00:23:39,300
Let's just replace it.

467
00:23:39,300 --> 00:23:44,100
It's not and then we'll do a bug, it rather than kind of having a keep

468
00:23:44,100 --> 00:23:44,400
on to us.

469
00:23:44,400 --> 00:23:46,600
But like my, my eyes on that.

470
00:23:46,600 --> 00:23:47,800
I don't like it.

471
00:23:47,800 --> 00:23:49,300
I don't like how that went down.

472
00:23:51,100 --> 00:23:54,300
And, you know, even though I'm kind of aware of that as like a

473
00:23:54,300 --> 00:23:55,900
possible, kind of bug.

474
00:23:56,200 --> 00:23:59,100
I just don't, I don't have enough confidence in it.

475
00:24:00,200 --> 00:24:02,200
So that's it though.

476
00:24:02,200 --> 00:24:06,900
I mean that was the bug and so I believe, now we're in reasonable

477
00:24:06,900 --> 00:24:07,500
shape.

478
00:24:07,600 --> 00:24:09,200
We just have a bunch of work.

479
00:24:09,200 --> 00:24:11,500
We have to now do to actually go.

480
00:24:11,600 --> 00:24:13,900
That kind of derailed, it's a bit actually get back to what we were

481
00:24:13,900 --> 00:24:17,200
trying to do which was produced some useful visualizations here.

482
00:24:18,400 --> 00:24:22,600
So, the first thing that I'd like to do is I don't think we want to

483
00:24:22,600 --> 00:24:26,600
produce regions if the Region's can't really be seen, you know what I

484
00:24:26,600 --> 00:24:27,000
mean?

485
00:24:28,100 --> 00:24:31,600
So, I think one thing we could do just right off the bat is when we're

486
00:24:31,600 --> 00:24:32,700
going to add a region.

487
00:24:32,800 --> 00:24:36,500
Like when we do an ad region, I'd like to do something where we test

488
00:24:36,500 --> 00:24:40,300
to see if the number of clocks is even going to be enough to show up.

489
00:24:40,400 --> 00:24:45,900
You know we should have some kind of a notion of what the min max T

490
00:24:46,100 --> 00:24:48,100
difference would have to be in order.

491
00:24:48,300 --> 00:24:50,000
Refer to actually be included.

492
00:24:50,400 --> 00:24:53,600
And so, what I'd like to do there is I'd like to create those Min and

493
00:24:53,600 --> 00:24:55,400
Max tease like so,

494
00:24:56,900 --> 00:24:57,700
Something like this.

495
00:25:04,200 --> 00:25:08,300
And then I'd like to check them so that I can see whether or not I

496
00:25:08,300 --> 00:25:12,100
believe that it is something worth recording.

497
00:25:12,500 --> 00:25:17,400
So I guess what I'd say is if the max T minus the Min to, you know, is

498
00:25:17,400 --> 00:25:20,100
not greater than like our T threshold.

499
00:25:23,800 --> 00:25:25,900
Then I would like to just ignore it.

500
00:25:26,400 --> 00:25:29,000
I should say see if it's greater than T threshold.

501
00:25:29,000 --> 00:25:29,700
Then I'll keep it.

502
00:25:30,700 --> 00:25:32,400
so, the threshold t,

503
00:25:34,900 --> 00:25:36,600
I don't know, probably something like this.

504
00:25:37,300 --> 00:25:41,700
Like if we imagine having the bar divided into hundreds, something

505
00:25:41,700 --> 00:25:45,000
less than a hundredth of a bar, does not seem like a useful thing to

506
00:25:45,000 --> 00:25:45,700
add.

507
00:25:46,800 --> 00:25:50,500
So I'm going to just see if that makes things a little more usable,

508
00:25:50,500 --> 00:25:51,000
right.

509
00:25:51,000 --> 00:25:53,700
Because basically there were all these little tiny invisible bars in

510
00:25:53,700 --> 00:25:56,700
there that we're just like little tiny Snippets of time and those

511
00:25:56,700 --> 00:26:00,200
don't seem like things that are particularly useful to add.

512
00:26:01,800 --> 00:26:05,200
Okay, so let's think about this a little bit more.

513
00:26:05,400 --> 00:26:07,300
So here we go, here's our dude.

514
00:26:07,700 --> 00:26:13,400
And if we take a look now to we're running pretty slowly, you know?

515
00:26:14,200 --> 00:26:15,900
And of course, the running slowly.

516
00:26:15,900 --> 00:26:20,600
A lot of that is just the debug, the debug frame stuff.

517
00:26:20,900 --> 00:26:23,600
So what I'd like to do is make sure we can compile it out.

518
00:26:23,600 --> 00:26:26,600
First of all, right, I'd like to be able to compile out the debug

519
00:26:26,600 --> 00:26:30,000
stuff, and I'd also like to be able to be able to switch the viewing

520
00:26:30,000 --> 00:26:30,800
of it on and off.

521
00:26:31,200 --> 00:26:34,000
Just so we can make sure that we kind of have that stuff under control

522
00:26:34,000 --> 00:26:34,500
as well.

523
00:26:35,800 --> 00:26:36,500
All right.

524
00:26:37,300 --> 00:26:40,500
So what would we do here right now?

525
00:26:41,000 --> 00:26:44,800
We would want something where these blocks and stuff, we would want

526
00:26:44,800 --> 00:26:49,300
some way of having these things turn, you know, basically off and on.

527
00:26:49,600 --> 00:26:53,300
So what I want to do is have some kind of an if statement here, right?

528
00:26:54,000 --> 00:26:59,600
That's like, you know, if timer or if

529
00:27:00,000 --> 00:27:01,300
Debugging is enabled.

530
00:27:01,900 --> 00:27:07,500
I don't know perfect profile enabled if profile so we've got I don't

531
00:27:07,500 --> 00:27:07,800
know.

532
00:27:08,500 --> 00:27:09,600
We've got a build in here.

533
00:27:11,400 --> 00:27:14,500
We have our little handmade defines, I believe.

534
00:27:15,800 --> 00:27:19,100
Yeah, we've got him here and I'd like to be able to see those a little

535
00:27:19,100 --> 00:27:20,000
bit more easily.

536
00:27:20,500 --> 00:27:22,400
So I think I'm going to move those out.

537
00:27:22,500 --> 00:27:25,800
I think I'm going to try this set, common compiler Flags.

538
00:27:29,200 --> 00:27:33,100
I'm going to go ahead and say that.

539
00:27:34,600 --> 00:27:36,400
So, that way, I can see our settings.

540
00:27:36,400 --> 00:27:36,700
There.

541
00:27:36,700 --> 00:27:39,200
In fact, maybe I'll put it at the end as well, so we can see more of

542
00:27:39,200 --> 00:27:39,900
the settings.

543
00:27:40,100 --> 00:27:43,000
So, we got 132, we've got slow, we've got internal, and I'm going to

544
00:27:43,000 --> 00:27:44,700
just say we've got profile.

545
00:27:45,900 --> 00:27:47,200
Is another switch we can flip.

546
00:27:48,400 --> 00:27:52,700
So if we have handmade profile turned on, then we do this stuff.

547
00:27:53,300 --> 00:27:54,300
Otherwise,

548
00:27:55,900 --> 00:27:59,300
I want to be able to just vaporize these so that these things are not

549
00:27:59,300 --> 00:28:02,600
ever actually inserted into the code, they're just like not there,

550
00:28:03,300 --> 00:28:03,900
right?

551
00:28:04,400 --> 00:28:09,700
So time function, just expands to nothing time to block expands to

552
00:28:09,700 --> 00:28:10,300
nothing.

553
00:28:12,000 --> 00:28:16,300
Begin block, end block, expand to nothing, so that no matter what

554
00:28:16,300 --> 00:28:20,800
anyone is doing, no matter what they think they're doing nothing

555
00:28:20,800 --> 00:28:22,600
happens, right?

556
00:28:23,500 --> 00:28:25,600
So, you know, by default we build, we got

557
00:28:25,700 --> 00:28:28,900
Profiler on and there's the profiler.

558
00:28:29,300 --> 00:28:34,400
But if I then say go into that build that bat and I say turn the

559
00:28:34,400 --> 00:28:36,800
profile off and recompile.

560
00:28:38,300 --> 00:28:41,500
That code should be literally gone, right?

561
00:28:42,000 --> 00:28:46,100
So it's just not there and you can see that even though we're still

562
00:28:46,100 --> 00:28:49,700
like we haven't turned off the display of it at all, you can see that

563
00:28:49,700 --> 00:28:52,200
we're back to running nice and fast, right?

564
00:28:52,200 --> 00:28:57,900
We've got our performance back and everything and nothing is actually

565
00:28:57,900 --> 00:29:00,700
showing up in the graph, which is what we'd expect, because there are

566
00:29:00,700 --> 00:29:01,700
no debug records.

567
00:29:01,700 --> 00:29:04,200
There are no debug events in the log.

568
00:29:04,200 --> 00:29:05,200
Nothing is happening.

569
00:29:06,200 --> 00:29:07,600
So when it goes to draw it,

570
00:29:07,800 --> 00:29:10,500
Nothing to look at, so that's good.

571
00:29:12,500 --> 00:29:15,800
But now, once we have the profile on which is what we want to do, at

572
00:29:15,800 --> 00:29:22,300
the moment, we need to start having some way of interacting with the

573
00:29:22,300 --> 00:29:23,300
sky, right?

574
00:29:23,300 --> 00:29:24,500
Is what I think we need to do.

575
00:29:25,100 --> 00:29:27,900
Now, the other thing that I would like to do here, I'd also like to

576
00:29:27,900 --> 00:29:30,900
know, so we're pretty slow, right?

577
00:29:30,900 --> 00:29:31,700
Like I'm looking at.

578
00:29:31,700 --> 00:29:34,500
Look at how slow we are right now, right?

579
00:29:36,100 --> 00:29:41,800
And I'm not sure how much sense that makes I feel like something.

580
00:29:41,900 --> 00:29:44,100
Weird is up, you know what I mean?

581
00:29:45,000 --> 00:29:47,500
Because that framerate feels really slow to me.

582
00:29:47,700 --> 00:29:52,900
Like, you can see it's dramatically slower than it was before, right?

583
00:29:53,300 --> 00:29:56,300
I mean, hopefully you guys can see on the stream, how much slower that

584
00:29:56,300 --> 00:29:56,600
is.

585
00:29:57,300 --> 00:29:59,800
But if we look over here,

586
00:30:00,800 --> 00:30:01,800
At our profile.

587
00:30:02,800 --> 00:30:06,200
Our profile doesn't actually back that up.

588
00:30:06,700 --> 00:30:08,000
So I want to figure out.

589
00:30:08,000 --> 00:30:11,500
I feel like we're drawing it wrong or something is a little off.

590
00:30:11,700 --> 00:30:16,300
Because if you think about it, if you look at how much time this stuff

591
00:30:16,300 --> 00:30:22,300
is taking in theory, the top of the chart like the entire size of the

592
00:30:22,300 --> 00:30:26,700
chart with something like 30 frames a second, right?

593
00:30:26,900 --> 00:30:31,100
So even though if we're missing that right, which you can see that we

594
00:30:31,100 --> 00:30:32,500
are missing it several

595
00:30:33,000 --> 00:30:37,000
In a lot of cases, even if we're missing that, we're missing it by a

596
00:30:37,000 --> 00:30:39,600
very little bit, most of the time, right?

597
00:30:39,600 --> 00:30:42,300
There's not, there's not much going on there.

598
00:30:43,400 --> 00:30:46,400
So the question is, if we're only missing 30 frames a second by little

599
00:30:46,400 --> 00:30:50,000
bit, why isn't the game running at like 15 frames a second?

600
00:30:50,700 --> 00:30:53,800
And instead looks like it's running it like you know five frames a

601
00:30:53,800 --> 00:30:56,600
second or two frames a second or something like this.

602
00:30:56,600 --> 00:30:58,600
Why is it so much slower?

603
00:30:59,900 --> 00:31:01,900
And maybe I'm just wrong about that.

604
00:31:01,900 --> 00:31:02,500
Maybe I

605
00:31:02,700 --> 00:31:03,600
I have a.

606
00:31:05,700 --> 00:31:09,300
I'm misjudging that speed but I feel like that's something to take a

607
00:31:09,300 --> 00:31:10,000
look at.

608
00:31:10,800 --> 00:31:17,200
So, all right, there's a pretty easy way that we can actually do

609
00:31:17,200 --> 00:31:18,400
something about that.

610
00:31:18,700 --> 00:31:24,000
If we go ahead into win32 handmade dot CPP, you know, we had a frame

611
00:31:24,000 --> 00:31:25,900
rate counter in here, right?

612
00:31:26,400 --> 00:31:28,900
We did like a query performance counter kind of a thing.

613
00:31:29,900 --> 00:31:34,400
So see here, win32 get wall.

614
00:31:34,600 --> 00:31:35,100
Fuck.

615
00:31:36,100 --> 00:31:42,300
So, one thing that we can do is, we can do something where we try to

616
00:31:42,300 --> 00:31:47,700
show these these wall clocks a little bit better as well, right?

617
00:31:47,700 --> 00:31:52,300
We know our flip wall clock, we've got our encounter as well, so we

618
00:31:52,300 --> 00:31:54,100
have the ability to pass that thing in.

619
00:31:54,100 --> 00:31:57,100
And so maybe, you know, we have this thing before that we were sort of

620
00:31:57,100 --> 00:31:58,900
passing to the debug system.

621
00:31:59,200 --> 00:32:02,300
Maybe that's something we should pass to the debug system as well.

622
00:32:02,300 --> 00:32:04,000
Write something that sort of says

623
00:32:04,500 --> 00:32:07,900
here is a wall clock time so you can just validate your our dtsc

624
00:32:07,900 --> 00:32:10,400
measurements against that wall clock time.

625
00:32:13,800 --> 00:32:16,500
And make sure they at least make some semblance of sense.

626
00:32:16,800 --> 00:32:17,300
Right?

627
00:32:18,100 --> 00:32:19,400
Seems like pretty reasonable to me.

628
00:32:20,400 --> 00:32:21,700
So that's something we could do there.

629
00:32:21,700 --> 00:32:26,100
And also another thing that we can do is we can have the you know, we

630
00:32:26,100 --> 00:32:31,200
can then say here's what the here's what the actual are dtsc's total

631
00:32:31,300 --> 00:32:34,700
were for the whole block, right?

632
00:32:35,000 --> 00:32:39,000
Because we know, you know, we know that here's the frame marker, we

633
00:32:39,000 --> 00:32:41,900
could basically say that like at the frame marker here.

634
00:32:42,100 --> 00:32:43,200
The wall clock time.

635
00:32:43,400 --> 00:32:49,900
So we can look and say we have a relatively reasonable guess as to how

636
00:32:49,900 --> 00:32:53,500
many cycles elapsed and how much wall clock time elapsed.

637
00:32:53,500 --> 00:32:56,000
So that those two things can be correlated, right?

638
00:32:57,100 --> 00:32:58,700
That seems like pretty reasonable to me.

639
00:32:59,500 --> 00:32:59,900
So in

640
00:33:00,000 --> 00:33:01,000
To do that.

641
00:33:01,000 --> 00:33:02,300
What I would like to do.

642
00:33:02,500 --> 00:33:06,000
I suppose, we could move the frame marker down to the beginning.

643
00:33:06,000 --> 00:33:08,200
I don't know, which is the best place for it.

644
00:33:08,200 --> 00:33:10,100
I guess, you know, the frame marker.

645
00:33:14,000 --> 00:33:17,900
When we insert that frame marker, it be nice to be able to insert the

646
00:33:17,900 --> 00:33:23,500
time, the wall, the wall clock, s, you know, right in there.

647
00:33:23,600 --> 00:33:27,600
I don't know how realistic that would be for us to actually do.

648
00:33:28,200 --> 00:33:31,700
But if you take a look at these debug events, I suppose it's not

649
00:33:31,700 --> 00:33:34,700
entirely out of the question that we couldn't Union it and put it on

650
00:33:34,700 --> 00:33:37,300
our 32 in there, since we don't care.

651
00:33:37,300 --> 00:33:41,300
For example, about the thread ID or the core

652
00:33:41,500 --> 00:33:46,200
In the debug record index, we don't care about any of that for the

653
00:33:46,200 --> 00:33:47,700
wall clock, right?

654
00:33:47,700 --> 00:33:51,800
We could imagine doing something where we have at our 32 that will

655
00:33:51,800 --> 00:33:54,600
right in there for the, for the debug frame marker.

656
00:33:54,700 --> 00:33:56,300
So, begin block and end of the lock.

657
00:33:56,300 --> 00:33:59,400
They will actually use these but, you know,

658
00:34:03,000 --> 00:34:07,300
Say, the debug record index or maybe the core index in the thread ID,

659
00:34:07,500 --> 00:34:13,000
those are actually a youth or do to, you know, for I'm sorry an R32

660
00:34:13,199 --> 00:34:15,400
for the frame marker, we could do that.

661
00:34:15,900 --> 00:34:18,400
I don't know if that makes the most sense but it seems pretty

662
00:34:18,400 --> 00:34:19,000
reasonable.

663
00:34:19,600 --> 00:34:21,800
So let's take a look at what would happen if we did that.

664
00:34:22,800 --> 00:34:24,600
If we did that, let's do something.

665
00:34:24,600 --> 00:34:31,199
Like, I don't know, thread ID and a core index, we could do something.

666
00:34:31,400 --> 00:34:38,000
Like struct debug event or thread ID core Index, right?

667
00:34:38,100 --> 00:34:41,199
You still don't get the core index, we don't have a way to get that

668
00:34:41,199 --> 00:34:45,699
the moment, so kind of a useless value but even so so if we do this,

669
00:34:46,500 --> 00:34:47,100
put it there,

670
00:34:52,400 --> 00:34:55,100
I don't know what we'll call that something like this.

671
00:34:56,900 --> 00:34:59,500
Then it here we can have wall clock time.

672
00:35:02,300 --> 00:35:04,500
And then we can just keep running into the stream there.

673
00:35:04,500 --> 00:35:05,700
What our actual records are?

674
00:35:06,100 --> 00:35:09,900
And our frame marker here, can take whatever that is.

675
00:35:10,300 --> 00:35:13,900
So we have went through to get wall clock.

676
00:35:15,800 --> 00:35:18,400
And so I can just go ahead and stick that in there.

677
00:35:18,800 --> 00:35:22,400
So up the frame marker will call went through to get wall clock with

678
00:35:22,400 --> 00:35:23,400
three to get wall clock.

679
00:35:23,400 --> 00:35:26,300
I believe just returns s for us, right?

680
00:35:28,900 --> 00:35:29,300
Hmm.

681
00:35:29,300 --> 00:35:29,900
No, it doesn't.

682
00:35:29,900 --> 00:35:32,000
I need, I need to convert it.

683
00:35:32,200 --> 00:35:33,900
I need to actually convert it to S.

684
00:35:34,700 --> 00:35:39,800
So what I actually want is something like inline R32 with who to get

685
00:35:40,000 --> 00:35:42,800
wall clock, s something like this.

686
00:35:44,300 --> 00:35:49,500
And that would divide by query performance frequency, right?

687
00:35:50,700 --> 00:35:53,900
I said, would say let's divide result.

688
00:35:56,400 --> 00:35:59,800
We want to call went through to get wall clock.

689
00:36:02,400 --> 00:36:03,400
I suppose.

690
00:36:05,400 --> 00:36:06,300
Global perf count.

691
00:36:06,300 --> 00:36:08,400
Frequency is what?

692
00:36:11,000 --> 00:36:11,800
64-bit.

693
00:36:11,800 --> 00:36:14,900
Yeah, so all I have to do.

694
00:36:14,900 --> 00:36:19,000
I think is just take quad part from the get wall clock.

695
00:36:21,200 --> 00:36:25,200
That'll give me the 64-bit, integer representing the clock time.

696
00:36:25,500 --> 00:36:27,600
Here's the perf frequency.

697
00:36:28,200 --> 00:36:33,500
If I divide those two, I guess I could do you know, full 64-bit

698
00:36:33,500 --> 00:36:34,400
divided on the to

699
00:36:35,800 --> 00:36:40,000
That would just get me back a wall clock time stamp and that would be

700
00:36:40,000 --> 00:36:40,400
that.

701
00:36:40,700 --> 00:36:45,400
Now maybe that's not the smartest idea because maybe get a little bit

702
00:36:45,400 --> 00:36:49,300
less Precision that way if we wanted to do it the other way round.

703
00:36:49,700 --> 00:36:55,400
I guess we would just do something right where we do to get well,

704
00:36:55,400 --> 00:36:59,300
clock, where we would pass just the elapsed time.

705
00:36:59,400 --> 00:37:02,700
So the frame marker actually says, how much time was elapsed since the

706
00:37:02,700 --> 00:37:03,600
previous frame.

707
00:37:04,400 --> 00:37:08,400
And again, if we want to do that, then we would basically be in the

708
00:37:08,400 --> 00:37:13,200
business again of doing sort of a diff between the two, if that makes

709
00:37:13,200 --> 00:37:13,700
sense.

710
00:37:14,000 --> 00:37:16,500
So trying to do a diff between the two

711
00:37:19,600 --> 00:37:23,100
She's me like the first time through.

712
00:37:24,000 --> 00:37:28,500
We would say, let's say we have large integer, but we've got last

713
00:37:28,500 --> 00:37:31,400
counter already, but I guess we'll do what.

714
00:37:31,400 --> 00:37:32,600
Supper one frame marker.

715
00:37:33,000 --> 00:37:34,100
Could probably clean this up.

716
00:37:34,100 --> 00:37:36,000
In fact, what does last count or even two?

717
00:37:39,300 --> 00:37:41,400
It's just the end of that frame.

718
00:37:41,900 --> 00:37:44,100
It's like at the bottom of it, right?

719
00:37:46,200 --> 00:37:48,800
You know, we could probably even just piggyback on that.

720
00:37:48,800 --> 00:37:50,300
I'm not going to deal with that for now though.

721
00:37:50,700 --> 00:37:53,600
Well, we'll worry about restructuring this Loop when we come through

722
00:37:53,600 --> 00:37:56,700
and do sort of the final pass on it and try to make something that's

723
00:37:56,700 --> 00:38:01,500
more ship oriented and less Dev oriented for the win32 main Loop that.

724
00:38:01,800 --> 00:38:03,000
So, I'm just going to go ahead and say,

725
00:38:06,200 --> 00:38:10,500
That we have that, I might say that, we initialize it to 0 and then

726
00:38:10,500 --> 00:38:14,300
when we come through here, I'm going to do like something like frame

727
00:38:14,300 --> 00:38:15,400
marker seconds.

728
00:38:16,000 --> 00:38:18,200
Elapsed, I'm going to set that to zero.

729
00:38:18,400 --> 00:38:22,100
I'm going to say that the first one just gets that there that there

730
00:38:22,100 --> 00:38:22,800
was no seconds.

731
00:38:22,800 --> 00:38:23,400
Elapsed.

732
00:38:23,500 --> 00:38:25,100
That's just a it's just a hard marker.

733
00:38:25,100 --> 00:38:26,500
That doesn't actually count.

734
00:38:28,500 --> 00:38:32,200
Although also looking at that, it's kind of like well that might give

735
00:38:32,200 --> 00:38:34,400
us that might give us an impetus to sort

736
00:38:34,500 --> 00:38:38,800
Of use the existing one because that means that our first frames time.

737
00:38:39,400 --> 00:38:41,700
Is that the first time as a meaningless value?

738
00:38:46,000 --> 00:38:46,500
I don't know.

739
00:38:46,500 --> 00:38:48,800
It's really tough decision.

740
00:38:49,800 --> 00:38:52,200
I kind of want both, you know?

741
00:38:52,800 --> 00:38:54,800
Well, I know how long the frame took

742
00:38:56,700 --> 00:38:59,100
And I guess if I wanted a time to Startup code, I should time that

743
00:38:59,100 --> 00:38:59,700
separately.

744
00:39:03,300 --> 00:39:03,900
I don't know.

745
00:39:05,700 --> 00:39:10,600
This is just a really hard decision, it's a really hard decision, I

746
00:39:10,600 --> 00:39:13,200
feel like there's no good answer because what I'm thinking in my head

747
00:39:13,200 --> 00:39:16,900
is I also would like to know how long it was between the startup of

748
00:39:16,900 --> 00:39:19,600
the program and when we actually got here which was it just that I

749
00:39:19,600 --> 00:39:23,600
might want to like have these sort of way points marked a little more

750
00:39:23,600 --> 00:39:24,300
explicitly.

751
00:39:27,500 --> 00:39:29,200
I suppose it's not the end of the world.

752
00:39:29,800 --> 00:39:31,700
I'll go ahead and move it down at the bottom for now.

753
00:39:32,100 --> 00:39:35,700
But that's warrants further consideration that's all I'll say about

754
00:39:35,700 --> 00:39:36,100
that.

755
00:39:37,000 --> 00:39:41,900
Okay, so if I come through here there should be a way for me now kind

756
00:39:41,900 --> 00:39:45,600
of to know I've got the end counter last kind of close encounter.

757
00:39:45,800 --> 00:39:49,300
So I know at this point what the difference between these two guys was

758
00:39:49,400 --> 00:39:54,300
so I have a rough estimate of that and I can just do something where I

759
00:39:54,300 --> 00:39:57,100
say like okay those guys are going to be

760
00:39:57,300 --> 00:40:00,800
You called, if I look at this, when we're calling debug frame and

761
00:40:00,800 --> 00:40:02,400
that's doing a bunch of work there.

762
00:40:02,800 --> 00:40:08,500
So I kind of need to count that right as part of the time in this

763
00:40:08,500 --> 00:40:11,600
Frame, I think that would be more appropriate.

764
00:40:11,900 --> 00:40:15,400
So what I'm going to do here is I'm going to actually have went

765
00:40:15,400 --> 00:40:16,400
through to get wall clock.

766
00:40:16,500 --> 00:40:18,200
Oh and that's actually interesting.

767
00:40:19,500 --> 00:40:24,400
So that actually also explains why our profile isn't isn't lining up.

768
00:40:24,500 --> 00:40:29,400
We're not timing the time spent collating debug records, which is

769
00:40:29,400 --> 00:40:30,700
probably very substantial.

770
00:40:31,700 --> 00:40:34,100
So we'll see that in a second anyway.

771
00:40:34,800 --> 00:40:35,900
Hey we already found the problem.

772
00:40:36,500 --> 00:40:39,300
So anyway, here is our and clock.

773
00:40:41,100 --> 00:40:42,800
And here's our static setting, our last counter.

774
00:40:43,000 --> 00:40:45,200
So what I'm going to do is I'm just going to go ahead and set here

775
00:40:45,900 --> 00:40:49,800
went through to get seconds elapsed.

776
00:40:50,400 --> 00:40:54,400
And I'm going to ask for the seconds elapsed between last counter and

777
00:40:54,400 --> 00:40:55,100
encounter.

778
00:40:55,500 --> 00:40:58,800
So now I'm actually passing the through their frame marker.

779
00:41:03,000 --> 00:41:06,100
Obviously just does the standard thing that it does it does a record

780
00:41:06,100 --> 00:41:09,400
debug event but that debug event is setting.

781
00:41:09,400 --> 00:41:13,100
The standard things that we set in a debug index in a debug event.

782
00:41:13,100 --> 00:41:16,800
Right now, what we want to do is we want to actually set a frame time,

783
00:41:17,000 --> 00:41:17,600
right?

784
00:41:17,900 --> 00:41:19,900
So we want, like seconds elapsed here,

785
00:41:22,300 --> 00:41:25,200
you know, I'm saying and so we want

786
00:41:26,900 --> 00:41:30,500
This value and the debug event to be set instead of the one that did

787
00:41:30,500 --> 00:41:31,100
get set.

788
00:41:31,300 --> 00:41:35,300
So what I'm going to do there is I'm going to say like okay when we do

789
00:41:35,300 --> 00:41:36,500
record debug event,

790
00:41:39,500 --> 00:41:44,700
we're going to need to do essentially the same set of operations here.

791
00:41:45,200 --> 00:41:46,900
And we're going to need to kind of know.

792
00:41:47,900 --> 00:41:51,700
We're going to we're going to have to know that we only set these in a

793
00:41:51,900 --> 00:41:54,700
you know in certain circumstances.

794
00:41:55,300 --> 00:41:56,500
So how would I do that?

795
00:41:57,200 --> 00:41:59,800
I think the easiest way to do that would probably be

796
00:42:00,000 --> 00:42:04,500
Septum maybe more towards the end, you know, set them.

797
00:42:05,800 --> 00:42:06,900
Here or something like this.

798
00:42:07,400 --> 00:42:11,600
And then only, and then have that be something that's actually code.

799
00:42:13,900 --> 00:42:16,900
Have that be something that's actually may be done by the macro

800
00:42:16,900 --> 00:42:18,500
itself, right?

801
00:42:18,700 --> 00:42:22,400
Done by the whoever's calling it, because I'd like to keep this.

802
00:42:22,700 --> 00:42:25,200
I'd like to keep this part the same, you know what I mean?

803
00:42:25,900 --> 00:42:31,000
So, what I would say is okay, there's a pound of fine here, which is

804
00:42:31,000 --> 00:42:38,400
like record, debug event common, something like that.

805
00:42:38,900 --> 00:42:42,400
It's going to do all of the stuff that we know that we always do,

806
00:42:42,500 --> 00:42:43,300
which is this

807
00:42:45,700 --> 00:42:48,700
But then record debug event.

808
00:42:51,600 --> 00:42:52,700
Just does this.

809
00:42:55,500 --> 00:42:55,900
Oops.

810
00:42:58,200 --> 00:43:05,600
We're groups cord index event type that just gets done.

811
00:43:07,300 --> 00:43:11,800
And so that in frame marker, we can do exactly the same thing, but set

812
00:43:11,800 --> 00:43:14,100
the event parameters differently, right?

813
00:43:15,100 --> 00:43:21,400
Clock is not the one I wanted for indexes, but I actually so something

814
00:43:21,400 --> 00:43:22,000
like that.

815
00:43:22,700 --> 00:43:28,800
And then what we can do is do sort of it slightly differently here.

816
00:43:29,000 --> 00:43:29,300
Record.

817
00:43:29,300 --> 00:43:32,300
Debug event record index event type.

818
00:43:32,300 --> 00:43:32,800
There we go.

819
00:43:34,100 --> 00:43:37,000
We'll do the common part and then we can also now

820
00:43:37,100 --> 00:43:39,700
Do this part as seconds elapsed.

821
00:43:46,300 --> 00:43:46,800
Okay.

822
00:43:48,800 --> 00:43:54,700
So, moving on to many actual parameters for record, debug event

823
00:43:54,700 --> 00:43:55,300
common.

824
00:43:57,500 --> 00:43:58,200
Is that true?

825
00:44:02,900 --> 00:44:04,700
Let's see, yes it is.

826
00:44:06,600 --> 00:44:07,500
Keep those up there.

827
00:44:07,600 --> 00:44:08,100
There we go.

828
00:44:09,700 --> 00:44:15,700
And now in theory we should be able to have these guys.

829
00:44:15,900 --> 00:44:16,200
Oops.

830
00:44:18,500 --> 00:44:22,600
Have these guys come out of the Union?

831
00:44:27,800 --> 00:44:30,600
Like so, so that's all good.

832
00:44:31,200 --> 00:44:34,800
And now, inside this, debug event, frame marker, we now have the

833
00:44:34,800 --> 00:44:40,100
ability for our current frame wherever that frame maybe can actually

834
00:44:40,100 --> 00:44:44,700
specify a seconds elapsed and that seconds elapsed can actually be

835
00:44:44,700 --> 00:44:46,400
based on the actual wall clock time.

836
00:44:46,400 --> 00:44:49,400
So, now, for every frame, we know that again, in the end clock, and we

837
00:44:49,400 --> 00:44:50,500
also know,

838
00:44:52,200 --> 00:44:53,200
Seconds elapsed.

839
00:44:53,900 --> 00:44:58,500
So that allows us to line up our wall clock time, current frame needs

840
00:44:58,500 --> 00:44:59,800
to actually have one of those

841
00:45:00,700 --> 00:45:05,400
So here's a debug frame wall seconds elapsed maybe it's what we'll

842
00:45:05,400 --> 00:45:07,800
call it well seconds elapsed.

843
00:45:08,800 --> 00:45:13,100
And when we actually create one of those

844
00:45:18,900 --> 00:45:24,700
So yeah, the only problem with that is we take the begin clock from

845
00:45:24,700 --> 00:45:26,500
this one, not the end clock.

846
00:45:27,200 --> 00:45:31,000
So if we do have frame markers that happen at the end, we do have to

847
00:45:31,000 --> 00:45:33,700
do it like this, right?

848
00:45:35,700 --> 00:45:36,700
Something like that.

849
00:45:37,100 --> 00:45:41,700
So we do have to do something where we say, like, oh, okay, we'll

850
00:45:41,800 --> 00:45:43,400
remember what the what the clock is.

851
00:45:43,400 --> 00:45:45,200
That's, that's actually fine.

852
00:45:45,400 --> 00:45:46,500
That's not a problem.

853
00:45:47,200 --> 00:45:50,300
That just means that this part happens a little bit differently.

854
00:45:50,600 --> 00:45:52,100
So instead what we do,

855
00:45:54,100 --> 00:45:55,600
Yeah, is we'd have to, okay?

856
00:45:56,700 --> 00:45:58,300
You can see why that's a little annoying, right?

857
00:45:58,300 --> 00:46:01,500
It means that we see the frame marker after we've already collected

858
00:46:01,500 --> 00:46:04,100
all the information for that frame.

859
00:46:04,600 --> 00:46:05,300
You know what I mean?

860
00:46:06,500 --> 00:46:10,800
So, it doesn't really cause us much of a problem, but it does mean

861
00:46:10,800 --> 00:46:13,700
that, you know, when we see a frame marker, what we're doing is

862
00:46:13,700 --> 00:46:17,300
saying, if we had a current frame, all the information for the frame

863
00:46:17,300 --> 00:46:19,600
actually happens there, right?

864
00:46:19,600 --> 00:46:24,600
So if we had a current frame, all the stuff actually occurs here, if

865
00:46:24,600 --> 00:46:25,500
that makes sense.

866
00:46:26,500 --> 00:46:32,800
Like what that that wall s of locks that comes in that actually goes

867
00:46:32,900 --> 00:46:36,400
with the, with the event, that we've sort of been we've been writing

868
00:46:36,400 --> 00:46:41,000
to and then when we see it, we then create a new frame that's going to

869
00:46:41,000 --> 00:46:44,400
be for all the events that come after we know what the begin is.

870
00:46:46,600 --> 00:46:47,400
Which is now.

871
00:46:47,600 --> 00:46:50,200
But this is for the next frame, right?

872
00:46:50,200 --> 00:46:53,400
It's not the frame that we, it's not the frame that represents this

873
00:46:53,400 --> 00:46:56,600
event and then the rest of the stuff can stay the same, but we don't

874
00:46:56,600 --> 00:46:57,700
know what the wall seconds.

875
00:46:57,700 --> 00:47:00,000
Elapsed is yet we have no idea.

876
00:47:00,000 --> 00:47:00,800
It could be anything.

877
00:47:01,200 --> 00:47:03,200
So just it just cast switches up.

878
00:47:03,700 --> 00:47:07,800
How that works a little bit, but I think that's good.

879
00:47:07,900 --> 00:47:09,800
Okay, so

880
00:47:11,400 --> 00:47:13,200
Last night, it's going on here.

881
00:47:16,700 --> 00:47:17,500
I know what happened there.

882
00:47:19,200 --> 00:47:20,700
Keyboard was not responding.

883
00:47:21,800 --> 00:47:27,200
I'm sorry, Dave, I can't I can't save the file so we got about 10

884
00:47:27,200 --> 00:47:29,500
minutes left on the clock, if I remember correctly.

885
00:47:29,500 --> 00:47:30,600
Sorry, about 10 minutes late.

886
00:47:32,200 --> 00:47:33,400
So let's see what's going on here?

887
00:47:37,300 --> 00:47:38,400
That's probably a bug.

888
00:47:38,400 --> 00:47:39,300
What's going on here?

889
00:47:39,900 --> 00:47:40,800
Current frame.

890
00:47:43,100 --> 00:47:44,600
Region, count 2048.

891
00:47:45,200 --> 00:47:45,600
Well.

892
00:47:47,600 --> 00:47:48,800
Are we just not cycling.

893
00:47:48,800 --> 00:47:52,400
Our region properly, current frame equals the next one.

894
00:47:55,700 --> 00:47:57,300
Clock range from Rescue L.

895
00:47:57,300 --> 00:47:59,100
Yeah that but that

896
00:48:03,000 --> 00:48:04,600
I don't know why we have so many regions.

897
00:48:05,100 --> 00:48:06,400
That doesn't seem quite right.

898
00:48:08,900 --> 00:48:10,500
See here, region cap.

899
00:48:15,700 --> 00:48:17,800
Like could there even be that many regions.

900
00:48:19,400 --> 00:48:20,200
Seems odd.

901
00:48:24,000 --> 00:48:28,900
Okay, so now, well, there's a couple things.

902
00:48:29,400 --> 00:48:31,500
So now, we can at least see that this line.

903
00:48:31,500 --> 00:48:36,300
We can, we can see this line being longer than it was before.

904
00:48:38,900 --> 00:48:41,000
So, what's odd about that is?

905
00:48:41,000 --> 00:48:44,100
I didn't actually change that piece of information yet, right?

906
00:48:44,800 --> 00:48:49,100
I did move the frame marker down but this is still not being.

907
00:48:49,500 --> 00:48:53,000
This is not be encountered in there, so that's a little bit odd that

908
00:48:53,000 --> 00:48:53,100
that

909
00:48:53,300 --> 00:48:56,900
Got but that changed shape, right?

910
00:48:58,400 --> 00:48:59,600
That's a bit strange.

911
00:49:00,400 --> 00:49:02,600
I'm not sure exactly what to make of that.

912
00:49:04,000 --> 00:49:06,400
That feels like, I just did something stupid.

913
00:49:07,400 --> 00:49:08,500
Could be that kind of day.

914
00:49:11,600 --> 00:49:14,700
After all, I got off easy because other people on the stream already

915
00:49:14,700 --> 00:49:15,300
found the bug.

916
00:49:15,300 --> 00:49:16,700
So I didn't have to really work very hard.

917
00:49:16,900 --> 00:49:19,000
Maybe it's making me lazy, right?

918
00:49:19,000 --> 00:49:20,100
Because you can see

919
00:49:21,300 --> 00:49:25,300
We're running the same code as before, there really isn't any reason

920
00:49:25,400 --> 00:49:28,400
why that should now be a different shape.

921
00:49:28,700 --> 00:49:33,700
This is just the main line code, but it's waiting for the, it's got a

922
00:49:33,700 --> 00:49:35,400
long tail here, right?

923
00:49:35,400 --> 00:49:39,200
The, the those two guys are the end, guys.

924
00:49:40,400 --> 00:49:46,000
And here we've got frame weight and frame display, and I don't really

925
00:49:46,000 --> 00:49:48,400
understand why those would have elongated themselves.

926
00:49:48,400 --> 00:49:51,400
Like, I don't understand why those would have gotten larger, we're not

927
00:49:51,400 --> 00:49:53,200
counting this stuff.

928
00:49:53,900 --> 00:49:57,500
If we do count this stuff that will do now,

929
00:50:09,600 --> 00:50:10,700
Let's take a look here.

930
00:50:11,400 --> 00:50:15,600
Also, I don't know if n cycle count, that's the Cycles left.

931
00:50:15,600 --> 00:50:17,800
That doesn't really need to be done anymore, right?

932
00:50:18,900 --> 00:50:21,000
Because we now got cycle counts all over the place.

933
00:50:21,800 --> 00:50:25,700
There's really no read meat for us to be doing that in the platform

934
00:50:25,700 --> 00:50:26,000
layer.

935
00:50:29,200 --> 00:50:35,000
Okay, so at the very least, now we can see this is more representative

936
00:50:35,000 --> 00:50:36,500
of the frame rate, right?

937
00:50:36,500 --> 00:50:37,300
So that's good.

938
00:50:37,300 --> 00:50:41,100
I'm a little concerned about why these vote These Bars change sighs.

939
00:50:41,100 --> 00:50:43,400
So I guess we'll have to keep drilling down to that.

940
00:50:43,400 --> 00:50:47,700
But now you can see to that debug collation, just takes a huge amount

941
00:50:47,700 --> 00:50:51,000
of time and it makes some sense because we had just a crazy number of

942
00:50:51,000 --> 00:50:51,800
events it was looking through.

943
00:50:51,800 --> 00:50:53,400
What was it like on the first frames there?

944
00:50:53,400 --> 00:50:56,900
Like 500,000 Avengers on like that but then it was down to you know

945
00:50:56,900 --> 00:50:59,200
it's tens of thousands of events and that's just a lot of

946
00:50:59,200 --> 00:50:59,900
Of stuff to iterate through.

947
00:51:00,400 --> 00:51:02,700
And we're not doing it in necessarily particularly smart way.

948
00:51:02,700 --> 00:51:05,400
There's, you know, we have a ton of stuff we could think about their

949
00:51:05,600 --> 00:51:07,800
but point being at least that's getting to be a slightly more

950
00:51:07,800 --> 00:51:10,700
realistic picture now, but what I would like to do is I would also

951
00:51:10,700 --> 00:51:15,900
like to now use that sort of, that sort of, for lack of a better term

952
00:51:16,100 --> 00:51:18,600
wall clock time that we sent down there.

953
00:51:18,800 --> 00:51:22,100
I'd like to once we have that now that we know like how many seconds

954
00:51:22,100 --> 00:51:25,500
left for frame, I'd like to draw that in there so that we could sort

955
00:51:25,500 --> 00:51:28,400
of see you know, here's the milliseconds per frame that's actually

956
00:51:28,400 --> 00:51:29,800
happening there, right?

957
00:51:30,000 --> 00:51:30,100
Right.

958
00:51:31,000 --> 00:51:35,600
So what I'd like to do is when we do our debug overlay stuff,

959
00:51:37,800 --> 00:51:38,400
And here.

960
00:51:40,600 --> 00:51:44,000
I could just print out some information about the frames, like, for

961
00:51:44,000 --> 00:51:47,000
example, because we now we have this van stuff.

962
00:51:47,100 --> 00:51:50,600
So, when we, when we do our debug overlay, I could even do something

963
00:51:50,600 --> 00:51:51,900
like this, right here.

964
00:51:52,300 --> 00:51:57,000
We have the debug State and we have those frames when we're drawing

965
00:51:57,000 --> 00:51:57,300
them.

966
00:51:58,800 --> 00:52:01,300
In fact, I've got the font info here as well.

967
00:52:01,500 --> 00:52:02,100
Right.

968
00:52:02,600 --> 00:52:08,300
What I could do is say, let's, let's actually do a little bit of a

969
00:52:08,300 --> 00:52:09,400
debug text line.

970
00:52:10,100 --> 00:52:11,000
Vortex line.

971
00:52:12,800 --> 00:52:18,500
This guy right here, what I'd like to do is I'd like to make him I

972
00:52:18,500 --> 00:52:21,100
guess I only have five minutes left so maybe I shouldn't go too far.

973
00:52:21,100 --> 00:52:23,800
Maybe I'll just call it once and then we'll worry about.

974
00:52:23,800 --> 00:52:27,100
I was going to put it underneath each frame, I'll just call it with

975
00:52:27,100 --> 00:52:27,900
the actual

976
00:52:30,100 --> 00:52:34,100
yeah, for now, I'll call it with the with just the actual

977
00:52:36,400 --> 00:52:39,800
single line with the may be the most recent frame, but what I'd like

978
00:52:39,800 --> 00:52:45,300
to do is I'll abstract that out and then we'll call the the frames out

979
00:52:45,300 --> 00:52:49,700
by having the actual milliseconds per frame kind of down along the

980
00:52:49,700 --> 00:52:51,300
bottom, right?

981
00:52:51,500 --> 00:52:55,900
So, here, if I did something like what we had there, I could do, you

982
00:52:55,900 --> 00:52:56,300
know,

983
00:53:00,000 --> 00:53:07,900
Well seconds per frame, there it is or maybe like last frame time,

984
00:53:08,700 --> 00:53:09,600
something like that.

985
00:53:10,300 --> 00:53:14,700
And then you here I could just say the debug state

986
00:53:17,100 --> 00:53:20,100
give me frame 0.

987
00:53:22,400 --> 00:53:23,000
What is it?

988
00:53:23,400 --> 00:53:24,800
Wall seconds, elapsed.

989
00:53:25,300 --> 00:53:26,600
That's the number of seconds.

990
00:53:26,900 --> 00:53:29,900
So if I want the number of milliseconds, right, I could just multiply

991
00:53:29,900 --> 00:53:31,900
by 1000 and then I've got it.

992
00:53:32,800 --> 00:53:37,800
I could also just truncate that but we might as well just show it like

993
00:53:37,800 --> 00:53:39,300
so something like that.

994
00:53:40,100 --> 00:53:44,600
And then presumably we could get our MS X out there.

995
00:53:46,000 --> 00:53:46,700
So there we go.

996
00:53:48,500 --> 00:53:51,500
So you can see here what we think our frame times are.

997
00:53:52,400 --> 00:53:55,500
Now that's not the last frame time that would.

998
00:53:55,500 --> 00:53:57,800
That was the first frame time for a while there, so you can kind of

999
00:53:57,800 --> 00:53:59,500
see what the frame times are here.

1000
00:54:03,900 --> 00:54:06,700
That it's odd how it climbed up like that too.

1001
00:54:06,700 --> 00:54:10,200
But I suppose that's, you know, it's not that odd actually, because as

1002
00:54:10,200 --> 00:54:13,900
we draw more things, the frame time goes up, because there's more

1003
00:54:13,900 --> 00:54:16,400
calls to draw a rectangle and other nonsense like that.

1004
00:54:17,000 --> 00:54:17,800
But yes you can see.

1005
00:54:17,800 --> 00:54:20,000
Now, what the what the last frame time is up there.

1006
00:54:20,000 --> 00:54:22,000
It's pretty expensive, right?

1007
00:54:23,000 --> 00:54:27,900
And if we actually turn off show drawing the debug stuff.

1008
00:54:28,500 --> 00:54:33,500
So, if I go in and instead of doing like the collation, if

1009
00:54:34,500 --> 00:54:36,900
If I if I just don't draw.

1010
00:54:37,000 --> 00:54:41,600
So let's say, I just in here, I say just draw that debug line and

1011
00:54:41,600 --> 00:54:43,900
don't try any of this stuff, right?

1012
00:54:50,200 --> 00:54:51,900
I'm curious to know what the frame time is.

1013
00:54:54,900 --> 00:54:55,700
I shouldn't I should.

1014
00:54:55,700 --> 00:55:00,900
Also probably do the actual last frame time, but you can see even with

1015
00:55:00,900 --> 00:55:01,900
drawing off.

1016
00:55:01,900 --> 00:55:05,200
It's the collation that really is pretty pricey.

1017
00:55:05,200 --> 00:55:12,200
They're, you know, even if we don't draw any of the results, collating

1018
00:55:12,200 --> 00:55:15,100
alone just takes a tremendous amount of our time.

1019
00:55:15,600 --> 00:55:20,200
Because when that's off, when collisions not happening, we just have a

1020
00:55:20,200 --> 00:55:21,500
lot less to deal with.

1021
00:55:21,600 --> 00:55:23,300
Now, I guess the other thing is we don't really know that it's

1022
00:55:23,300 --> 00:55:24,000
collation.

1023
00:55:24,100 --> 00:55:24,600
I suppose we do.

1024
00:55:24,700 --> 00:55:27,500
Way to turn off, call a specifically, could just also be the cost of

1025
00:55:27,500 --> 00:55:28,600
recording the debug events.

1026
00:55:28,800 --> 00:55:31,200
So we probably want to check test that as well.

1027
00:55:32,700 --> 00:55:37,400
And, you know, that's something we could also do just, just to see

1028
00:55:37,400 --> 00:55:41,200
here in terms of like doing the debug collation.

1029
00:55:41,400 --> 00:55:43,800
Unfortunately, without looking at the wall clocks, we wouldn't

1030
00:55:43,800 --> 00:55:47,600
necessarily know, but, you know, I guess one really easy.

1031
00:55:47,600 --> 00:55:52,700
Way to test that is in the platform code, since we have frame marker

1032
00:55:52,700 --> 00:55:53,700
as a separate thing.

1033
00:55:54,100 --> 00:55:54,300
Well, we

1034
00:55:54,700 --> 00:55:57,200
I'd do is have record debug event.

1035
00:55:57,300 --> 00:55:59,700
Not actually do anything, right?

1036
00:55:59,900 --> 00:56:04,100
So I could just say, you know what, instead of all this stuff I'm

1037
00:56:04,100 --> 00:56:08,900
going to do an undef here on time to block or time function and time

1038
00:56:08,900 --> 00:56:10,300
block, right?

1039
00:56:10,300 --> 00:56:12,200
And I'm going to find them to not do anything.

1040
00:56:17,900 --> 00:56:23,500
So that way, we would still have anything that was using the other

1041
00:56:23,500 --> 00:56:25,100
functions, right?

1042
00:56:25,100 --> 00:56:29,000
So anything that anything that's actually using frame marker will

1043
00:56:29,000 --> 00:56:29,500
work.

1044
00:56:30,500 --> 00:56:32,600
Right frame marker would just work.

1045
00:56:34,300 --> 00:56:39,900
Because no one's touching that but all the rest of the stuff will not

1046
00:56:39,900 --> 00:56:40,300
work.

1047
00:56:41,500 --> 00:56:44,900
So, yeah, in fact, that's the stuff that's actually in handmade

1048
00:56:44,900 --> 00:56:45,900
profile already.

1049
00:56:46,000 --> 00:56:48,900
So I suppose, I could just turn him a profile often we'd still get the

1050
00:56:48,900 --> 00:56:51,200
frame markers, which is kind of nice.

1051
00:56:51,900 --> 00:56:53,700
I don't know that, we actually want to leave it that way.

1052
00:56:54,700 --> 00:56:58,600
To be honest, but I guess since it's already there.

1053
00:56:59,100 --> 00:56:59,900
Let's just see what happens.

1054
00:57:02,000 --> 00:57:02,700
I turn it off.

1055
00:57:10,100 --> 00:57:13,300
Yeah, so I mean you can just see that

1056
00:57:18,000 --> 00:57:19,700
We turn it all off, completely.

1057
00:57:23,700 --> 00:57:25,000
Of course, that's still doesn't tell me.

1058
00:57:25,100 --> 00:57:26,600
It doesn't tell me how much time.

1059
00:57:26,800 --> 00:57:28,000
It just tells me that.

1060
00:57:28,600 --> 00:57:31,800
Yeah, because I need to actually put the records in there.

1061
00:57:31,900 --> 00:57:35,600
Get the frame marker ones out of it, that's a little rough.

1062
00:57:35,900 --> 00:57:38,400
So I'm not sure I think we're just about at, I'm not sure.

1063
00:57:38,400 --> 00:57:40,700
I actually probably need some other way of measuring the frame just to

1064
00:57:40,700 --> 00:57:41,200
see.

1065
00:57:41,400 --> 00:57:44,800
Because the problem is with collation, if we don't look through all

1066
00:57:44,800 --> 00:57:47,000
the records, we aren't going to know.

1067
00:57:49,900 --> 00:57:50,900
We aren't going to know.

1068
00:57:52,400 --> 00:57:54,900
What the frame time was since that's how we're currently displaying

1069
00:57:54,900 --> 00:57:56,600
the frame time, right?

1070
00:57:56,700 --> 00:58:00,700
So it's hard for us to get a bead on exactly which part of that.

1071
00:58:00,700 --> 00:58:01,700
It's costing us.

1072
00:58:02,200 --> 00:58:06,500
So, in here, right here is our debug State stuff.

1073
00:58:06,500 --> 00:58:09,800
You know, if I were to just go ahead and say don't call it the debug

1074
00:58:09,800 --> 00:58:13,100
records, we won't know what the frame time is.

1075
00:58:13,100 --> 00:58:16,200
So we'd have to have a second way so I could print it out or something

1076
00:58:16,200 --> 00:58:17,600
like that, right?

1077
00:58:20,000 --> 00:58:22,000
But didn't like that, I guess, because this never gets into

1078
00:58:22,100 --> 00:58:22,600
Last.

1079
00:58:23,900 --> 00:58:27,500
So we could, you know, we could print it out in some way, but in like

1080
00:58:27,500 --> 00:58:30,400
in Winter do handmade or something like that, which I guess is the

1081
00:58:30,400 --> 00:58:36,000
only real way that we can figure out one way or the other, which is

1082
00:58:36,000 --> 00:58:37,900
costing which goes at the profiles on

1083
00:58:40,300 --> 00:58:41,800
And we don't do.

1084
00:58:42,900 --> 00:58:43,800
Any of this?

1085
00:58:48,400 --> 00:58:48,800
And you know what?

1086
00:58:48,800 --> 00:58:53,300
I could also do it this way, if you book State frame count,

1087
00:58:55,300 --> 00:59:01,100
That would allow me to do this as well, Weber State frame count on

1088
00:59:01,100 --> 00:59:01,500
this one.

1089
00:59:01,700 --> 00:59:04,800
So, now that it's actually the last frame, right?

1090
00:59:05,300 --> 00:59:08,000
Because we're we were having that problem before.

1091
00:59:10,000 --> 00:59:12,900
Okay, so if we do that,

1092
00:59:15,100 --> 00:59:15,900
Then you know, we can.

1093
00:59:15,900 --> 00:59:19,700
Well I mean, we can kind of see the fact that it is the collation I

1094
00:59:19,700 --> 00:59:23,300
mean it would be nice to print it out but that's still running at a

1095
00:59:23,300 --> 00:59:24,400
very nice frame rate.

1096
00:59:24,500 --> 00:59:25,900
Very, very nice frame rate.

1097
00:59:25,900 --> 00:59:29,300
So looks like recording the info, not necessarily such a bad thing.

1098
00:59:30,200 --> 00:59:32,800
Collating it currently is not being done very well.

1099
00:59:33,100 --> 00:59:35,000
The collation is, clearly costing us a lot.

1100
00:59:36,300 --> 00:59:40,100
so we know, you know, now we know something,

1101
00:59:43,300 --> 00:59:45,900
All right, I'll go ahead and bring it to the Q&A.

1102
00:59:46,800 --> 00:59:47,300
This is good.

1103
00:59:47,300 --> 00:59:51,500
We're finally at a place where it's taken a while again.

1104
00:59:51,700 --> 00:59:54,500
No thanks to that extra complexity of the translation unit thing which

1105
00:59:55,300 --> 00:59:57,100
you know you live and learn.

1106
00:59:58,100 --> 00:59:59,800
First time, you try something often times.

1107
01:00:00,600 --> 01:00:04,300
You don't necessarily know what the reuter wrong or right reasons to

1108
01:00:04,300 --> 01:00:05,100
do something are.

1109
01:00:06,400 --> 01:00:09,300
But yeah, it looks like we've got all our information.

1110
01:00:09,300 --> 01:00:11,500
Now, it's coming through relatively reliably, we could focus on,

1111
01:00:11,500 --> 01:00:14,100
actually displaying it and useful ways and putting it in maybe a

1112
01:00:14,100 --> 01:00:16,900
little bit of UI there so we can kind of navigate through it, start to

1113
01:00:16,900 --> 01:00:21,200
drill down on the data so that's good better late than never we had a

1114
01:00:21,200 --> 01:00:21,700
nasty bug.

1115
01:00:21,700 --> 01:00:27,200
The costs two days is true but at least, you know, With a Little Help

1116
01:00:27,200 --> 01:00:30,000
from from the forums in fact, we were able to keep

1117
01:00:30,100 --> 01:00:34,800
To not too much time so that is the power of having multiple

1118
01:00:34,800 --> 01:00:35,600
programmers, I guess.

1119
01:00:35,700 --> 01:00:39,000
All right, let's go ahead and go to the Q&A.

1120
01:00:39,000 --> 01:00:44,100
I feel like that's probably it's probably pretty easy to understand

1121
01:00:44,100 --> 01:00:45,000
what we did there I guess.

1122
01:00:45,100 --> 01:00:48,600
But just in case you guys have questions about that lets go to the Q&A

1123
01:00:48,600 --> 01:00:50,600
and and see what people have to say.

1124
01:00:50,600 --> 01:00:55,100
Please put a cute: in front your questions so I can answer it.

1125
01:01:05,300 --> 01:01:11,300
Quarter on what's your favorite bug of all time man?

1126
01:01:11,600 --> 01:01:15,700
You know the problem is I just I don't write them down and so like you

1127
01:01:15,700 --> 01:01:19,400
know I probably do have a favorite bug of all time and I probably

1128
01:01:19,400 --> 01:01:20,400
don't remember it.

1129
01:01:39,400 --> 01:01:39,900
Donna.

1130
01:01:40,500 --> 01:01:41,100
I'm sorry.

1131
01:01:41,100 --> 01:01:43,700
Yeah, I wish I could recall it but I don't know.

1132
01:01:49,400 --> 01:01:54,700
Serge RGB often when I'm debugging or Sergey RGB perhaps often when

1133
01:01:54,700 --> 01:01:55,200
I'm debugging.

1134
01:01:55,200 --> 01:01:57,600
I have to stop myself from changing stuff at random because of mental

1135
01:01:57,600 --> 01:01:58,800
laziness hoping for an.

1136
01:01:58,800 --> 01:02:01,200
Even number of signers, do you ever have that urge?

1137
01:02:01,200 --> 01:02:03,800
If so has a diminished, as you become more experienced

1138
01:02:11,200 --> 01:02:14,000
So, I guess what I would say is, yeah, that definitely changes over

1139
01:02:14,000 --> 01:02:14,500
time.

1140
01:02:15,200 --> 01:02:18,100
And I think the reason that that changes over time is because as you

1141
01:02:18,100 --> 01:02:21,500
program for longer, you tend to realize that it always comes back to

1142
01:02:21,500 --> 01:02:24,700
bite you, it just always does, right?

1143
01:02:25,300 --> 01:02:28,000
If you care about quality, you know if you're someone who just chips

1144
01:02:28,000 --> 01:02:30,600
it and doesn't care, you know then maybe not but assuming that you

1145
01:02:30,600 --> 01:02:33,400
care about the quality of the software which granted like I complain

1146
01:02:33,400 --> 01:02:34,200
about this dream all the time.

1147
01:02:34,200 --> 01:02:37,600
Very few people seem to I think I've said before that, you know

1148
01:02:38,100 --> 01:02:43,500
I actually don't have that high of a quality bar on my code, compared

1149
01:02:43,500 --> 01:02:43,900
a lot of people.

1150
01:02:43,900 --> 01:02:47,300
I know and yet and yet these days it seems like most people's code is

1151
01:02:47,300 --> 01:02:49,700
below my Quality Bar which is which is kind of scary.

1152
01:02:50,000 --> 01:02:53,100
That's not that's that's a canary you didn't want to see died in the

1153
01:02:53,100 --> 01:02:54,600
mine if that makes sense.

1154
01:02:56,700 --> 01:02:59,400
But so I think, you know, if you have a reasonable Quality Bar,

1155
01:03:00,400 --> 01:03:03,800
It just always comes back to bite you and so what you end up at the

1156
01:03:03,800 --> 01:03:07,500
end you end up with it's not that you don't have the urge to just

1157
01:03:07,500 --> 01:03:08,500
change stuff inmate working.

1158
01:03:08,500 --> 01:03:12,700
It's that you tend to do those changes more as investigatory changes

1159
01:03:13,200 --> 01:03:17,600
and if one of them fixes it you don't just move on you then go.

1160
01:03:17,600 --> 01:03:18,100
Okay.

1161
01:03:18,100 --> 01:03:19,600
Wait why did that fix it?

1162
01:03:19,600 --> 01:03:21,000
Let me go verify that.

1163
01:03:21,000 --> 01:03:24,300
That really that I understand why that actually fixed it.

1164
01:03:25,500 --> 01:03:29,800
That's really the difference and in fact you can see that pretty

1165
01:03:30,000 --> 01:03:33,100
Directly, if you go.

1166
01:03:35,900 --> 01:03:43,600
If let's if we go to my blog here that actually happened on some early

1167
01:03:43,600 --> 01:03:44,800
witness stuff here.

1168
01:03:45,100 --> 01:03:46,000
It's this one.

1169
01:03:48,200 --> 01:03:52,800
So I wrote a thing about a bug actually and here it is.

1170
01:03:53,700 --> 01:03:58,100
And then I thought, I knew what the bug was, I went on Christmas

1171
01:03:58,100 --> 01:04:03,100
break, I came back from it and it turned out the bug was something

1172
01:04:03,100 --> 01:04:03,600
else.

1173
01:04:04,300 --> 01:04:08,800
And the only reason I found that out was because it was nagging at me

1174
01:04:08,800 --> 01:04:12,700
that I didn't think the fix should actually have fixed it.

1175
01:04:13,500 --> 01:04:15,900
You know, I fix it just for Chris Rick.

1176
01:04:15,900 --> 01:04:20,100
I went away and while I was actually on Christmas break, I was like

1177
01:04:20,100 --> 01:04:21,600
this just doesn't add up.

1178
01:04:22,400 --> 01:04:24,700
And then when I came back, I was able to verify that.

1179
01:04:24,700 --> 01:04:28,800
In fact, it was a different bug and it was just the fix I had done had

1180
01:04:28,800 --> 01:04:32,600
masked this other bug that was in there.

1181
01:04:33,500 --> 01:04:39,000
So I think that's a valuable skill to learn is just going, you know,

1182
01:04:39,000 --> 01:04:42,500
it's experimentation while you're debugging is is actually good.

1183
01:04:43,000 --> 01:04:46,200
Because if you hit upon something, that fixes the bug, that's very

1184
01:04:46,200 --> 01:04:47,400
important information.

1185
01:04:48,600 --> 01:04:50,900
The problem is, don't stop there.

1186
01:04:51,300 --> 01:04:52,700
Make sure you then go.

1187
01:04:52,700 --> 01:04:54,400
Why did it fix the bug?

1188
01:04:54,400 --> 01:04:57,600
Can I prove that this fix is actually the correct fix?

1189
01:04:57,600 --> 01:04:59,500
And not something that hides the bug?

1190
01:04:59,800 --> 01:05:03,100
And if I can't, I'm not done yet, right?

1191
01:05:03,500 --> 01:05:06,700
That's really the only change that has to happen.

1192
01:05:06,800 --> 01:05:11,700
Your intuitive desire, to kind of fiddle and see if it fixes it isn't

1193
01:05:11,700 --> 01:05:12,700
necessarily bad.

1194
01:05:12,700 --> 01:05:14,600
It's don't let that be the end.

1195
01:05:20,000 --> 01:05:20,700
Captain craft.

1196
01:05:20,700 --> 01:05:24,100
Doesn't it go against your philosophy of write the code as you need it

1197
01:05:24,300 --> 01:05:27,700
to make a debugger like this before, the game needs much debugging?

1198
01:05:28,500 --> 01:05:33,700
Well, no, because again, we already have performance counters.

1199
01:05:33,900 --> 01:05:35,600
We had to write those for the renderer.

1200
01:05:37,000 --> 01:05:39,800
I already don't know where the time is being spent in this game.

1201
01:05:39,900 --> 01:05:41,800
I have no idea, right?

1202
01:05:42,100 --> 01:05:47,300
And I don't want to be in a situation where I'm constantly not knowing

1203
01:05:47,300 --> 01:05:51,500
and not having that sort of heads-up of like what's going on.

1204
01:05:52,100 --> 01:05:55,500
So I actually see this as an essential part of the programming, I see

1205
01:05:55,500 --> 01:05:56,800
myself as needing it now.

1206
01:05:57,000 --> 01:05:59,800
I don't see this as being a like, oh, this will come in handy later.

1207
01:06:00,300 --> 01:06:04,100
I see this is like I don't have any situational awareness, right?

1208
01:06:04,100 --> 01:06:06,800
It's like, I'm trying to drive a car, but the windshield has been

1209
01:06:06,800 --> 01:06:08,500
blacked out, right?

1210
01:06:09,100 --> 01:06:11,400
And so, like, I feel like it is something that I need.

1211
01:06:11,400 --> 01:06:17,100
Now that said, I don't actually have a philosophy of write the code as

1212
01:06:17,100 --> 01:06:20,500
I need it, I would not describe My Philosophy necessarily as that way.

1213
01:06:21,300 --> 01:06:26,500
I would describe it as write the code when I know what I, what I know

1214
01:06:26,500 --> 01:06:28,000
what I need, right.

1215
01:06:28,100 --> 01:06:29,600
If I know what I need.

1216
01:06:29,700 --> 01:06:29,900
Then I

1217
01:06:30,000 --> 01:06:33,400
Write that code if I don't know what I need, then that's a bad time to

1218
01:06:33,400 --> 01:06:34,700
write the code, right?

1219
01:06:35,100 --> 01:06:39,200
But if I know I need something just because I'm not necessarily using

1220
01:06:39,200 --> 01:06:42,600
it at that immediate moment doesn't mean, it might not be something I

1221
01:06:42,600 --> 01:06:43,300
choose to write.

1222
01:06:43,300 --> 01:06:46,200
If I think that it will be a nice thing to have earlier rather than

1223
01:06:46,200 --> 01:06:46,600
later.

1224
01:06:46,600 --> 01:06:47,100
Right.

1225
01:06:47,400 --> 01:06:51,100
I don't think there's like only one right time to put debugging into

1226
01:06:51,100 --> 01:06:52,600
the project, right?

1227
01:06:52,900 --> 01:06:55,500
I feel like it's a thing that pays dividends at all times and since I

1228
01:06:55,500 --> 01:06:57,500
know I'm going to have to do it sometime or another.

1229
01:06:57,600 --> 01:06:58,500
I might as well do it.

1230
01:06:58,500 --> 01:06:59,800
Now when I can when

1231
01:07:00,000 --> 01:07:01,600
It can pay dividends the entire time.

1232
01:07:01,700 --> 01:07:05,700
Instead of waiting till we have like, this really overwhelming need

1233
01:07:05,700 --> 01:07:09,100
for it and doing it then because I miss out on being able to use it

1234
01:07:09,100 --> 01:07:10,200
all the rest of the time.

1235
01:07:10,900 --> 01:07:13,300
And I had to, and I had to spend the time to write it either way.

1236
01:07:13,800 --> 01:07:14,300
You know what I mean?

1237
01:07:21,400 --> 01:07:24,200
Our connects is there any way to keep familiar with old code?

1238
01:07:24,200 --> 01:07:27,100
Or is it working with or is working with a frequently, the only way?

1239
01:07:29,100 --> 01:07:32,600
Yeah, I mean, I don't really know any shortcuts there, you know, I

1240
01:07:32,600 --> 01:07:34,400
mean, I write a lot of code.

1241
01:07:35,100 --> 01:07:38,700
I've never actually sat down to try and really measure it, but like, I

1242
01:07:38,700 --> 01:07:39,600
would say that

1243
01:07:40,900 --> 01:07:46,200
You know, in a given day, I usually write like thousands of lines of

1244
01:07:46,200 --> 01:07:46,700
code.

1245
01:07:47,300 --> 01:07:51,000
So there's just no way that I'm going to remember at all.

1246
01:07:51,000 --> 01:07:54,400
It's just not going to happen and so,

1247
01:07:56,800 --> 01:08:00,000
You you you do kind of have to go back and play with the old code and

1248
01:08:00,000 --> 01:08:02,800
sometimes you have to budget sometime, you have to be like you know, I

1249
01:08:02,800 --> 01:08:04,300
got to open up the subsystem.

1250
01:08:04,600 --> 01:08:05,900
I yes, I wrote it.

1251
01:08:06,100 --> 01:08:06,500
Yes.

1252
01:08:06,500 --> 01:08:08,100
I understood it very well at the time.

1253
01:08:08,500 --> 01:08:10,700
No, I don't remember it.

1254
01:08:10,900 --> 01:08:11,400
Right.

1255
01:08:11,400 --> 01:08:14,900
And now I gotta go in there and I know I'm going to spend a day or two

1256
01:08:15,300 --> 01:08:17,800
being very unproductive and I ain't going to write a thousand lines of

1257
01:08:17,800 --> 01:08:22,399
code that day like no thousands of lines of code coming out those days

1258
01:08:22,399 --> 01:08:24,800
because I'm literally just going to be trying to figure out how all

1259
01:08:24,800 --> 01:08:26,200
this kind of complicated stuff worked

1260
01:08:26,300 --> 01:08:34,100
And you know, and you try to minimize that by, you know, keeping your

1261
01:08:34,100 --> 01:08:38,700
programming style saying keeping your name's reasonable, trying to

1262
01:08:38,700 --> 01:08:39,399
clean things up.

1263
01:08:39,399 --> 01:08:41,700
So they're not completely disastrous all the time.

1264
01:08:42,600 --> 01:08:46,000
So that, you know, it's like if this function doesn't read cleanly,

1265
01:08:46,000 --> 01:08:47,500
it's not doing what it should do.

1266
01:08:48,300 --> 01:08:51,399
Like, I'll take a second to kind of maybe fix it before I leave.

1267
01:08:51,399 --> 01:08:53,200
That part of the code for a long time.

1268
01:08:53,200 --> 01:08:55,300
I'll be like, okay, this is really janky.

1269
01:08:55,300 --> 01:08:56,200
Let me see if I can just

1270
01:08:56,300 --> 01:08:59,600
kind of put it into a state that reads more cleanly, that doesn't have

1271
01:08:59,600 --> 01:08:59,899
as many

1272
01:09:00,000 --> 01:09:04,000
Weird special cases if I can do that and leave myself in a better

1273
01:09:04,000 --> 01:09:05,000
position coming back to it.

1274
01:09:05,000 --> 01:09:08,000
You know, maybe I would spend the time to do that whereas, you know,

1275
01:09:08,000 --> 01:09:09,500
did the code really need that to happen.

1276
01:09:09,500 --> 01:09:10,200
Possibly not.

1277
01:09:10,500 --> 01:09:13,000
So there are some things you can do when you're like, okay, I know

1278
01:09:13,000 --> 01:09:14,200
this is complicated system.

1279
01:09:14,399 --> 01:09:16,399
I know this is hard code to understand.

1280
01:09:16,700 --> 01:09:20,000
Maybe there are a few things I can do to make it easier on myself by

1281
01:09:20,000 --> 01:09:23,100
spending a little more time than was necessary to get the code to a

1282
01:09:23,100 --> 01:09:27,200
good place, get it to a like really good place, you know, like over

1283
01:09:27,800 --> 01:09:29,899
over deliver on the quality, like, you know, imagine

1284
01:09:30,000 --> 01:09:32,300
Imagine this, you know, maybe I'll look at the code and say, okay this

1285
01:09:32,300 --> 01:09:36,000
is good enough for what I'm doing right now, but I know I could do

1286
01:09:36,000 --> 01:09:36,600
better.

1287
01:09:37,200 --> 01:09:40,899
Maybe I will choose to do that better spend the extra two days to do

1288
01:09:40,899 --> 01:09:44,600
that extra betterness because then I know when I come back to it later

1289
01:09:45,000 --> 01:09:47,500
it'll be easier for me to pick back up, you know, you can do stuff

1290
01:09:47,500 --> 01:09:48,100
like that.

1291
01:09:48,200 --> 01:09:50,300
Everything in programming is a trade-off, right?

1292
01:09:50,300 --> 01:09:54,100
Everything is always a trade-off and sometimes you may decide that the

1293
01:09:54,100 --> 01:09:57,500
right trade-off to make is to spend a little bit more time now to do a

1294
01:09:57,500 --> 01:09:59,800
little bit better job on this code, then you were going to do.

1295
01:10:00,100 --> 01:10:03,400
Then what you need to do because when you come back to it later you

1296
01:10:03,400 --> 01:10:08,100
feel like you need that, it'll save you that time you know and only a

1297
01:10:08,300 --> 01:10:10,300
really experienced can let you make those decisions.

1298
01:10:10,300 --> 01:10:13,300
Well it's not like there's a magic thing.

1299
01:10:14,600 --> 01:10:18,100
Because by the same token, you could go nuts and over engineer

1300
01:10:18,100 --> 01:10:21,000
something and then you just wasted like three weeks doing a bunch of

1301
01:10:21,000 --> 01:10:23,300
extra work and it turns out to not matter at all, right?

1302
01:10:23,300 --> 01:10:24,500
And that would have been bad decision.

1303
01:10:24,500 --> 01:10:26,800
So it is definitely a litmus test.

1304
01:10:26,800 --> 01:10:32,300
It's a thing that's hard to know what is done at any given time for

1305
01:10:32,300 --> 01:10:32,800
peace code.

1306
01:10:32,800 --> 01:10:33,100
What?

1307
01:10:33,100 --> 01:10:34,300
What constitutes done?

1308
01:10:35,700 --> 01:10:36,900
It is difficult.

1309
01:10:50,100 --> 01:10:55,100
Amy 95 Mark actually found the bug and Andre has K actually figured

1310
01:10:55,100 --> 01:10:58,000
out why it is causing what was happening by looking at the assembly.

1311
01:10:58,200 --> 01:11:02,200
The compiler decided not to inline, the call in the Constructor, and

1312
01:11:02,200 --> 01:11:03,600
inline it in the destructor.

1313
01:11:03,800 --> 01:11:07,000
So the start marker is wrong and the end marker is right.

1314
01:11:07,900 --> 01:11:08,000
Yeah.

1315
01:11:08,000 --> 01:11:11,500
Like I said, you guys did a great job on that that saves a ton of time

1316
01:11:11,500 --> 01:11:14,000
and that would have taken a long time for me to find on stream.

1317
01:11:14,000 --> 01:11:14,800
There's no question.

1318
01:11:15,500 --> 01:11:15,900
Okay.

1319
01:11:15,900 --> 01:11:17,300
So it just decided

1320
01:11:18,800 --> 01:11:25,200
It decided to inline in one place, but then the other place, it

1321
01:11:25,200 --> 01:11:29,700
actually did end up using the shared routine throughout now, why it

1322
01:11:29,700 --> 01:11:31,500
didn't make two different routines because they're two different

1323
01:11:31,500 --> 01:11:33,000
translation because it was marked in line.

1324
01:11:33,700 --> 01:11:34,600
I don't know why that means.

1325
01:11:34,600 --> 01:11:37,000
If it was marked static, it would have worked, right?

1326
01:11:37,000 --> 01:11:38,200
Because it wouldn't have been able to share them.

1327
01:11:38,200 --> 01:11:38,800
I assume

1328
01:11:40,800 --> 01:11:41,700
that's really weird.

1329
01:11:46,300 --> 01:11:50,700
In fact, to be honest, are we sure that's not a compiler bug because

1330
01:11:54,300 --> 01:11:57,000
Because how was it allowed to merge?

1331
01:11:57,000 --> 01:11:59,800
Those two functions when they're not the same.

1332
01:12:03,000 --> 01:12:04,200
That's really kind of weird.

1333
01:12:21,600 --> 01:12:22,400
Stephen last.

1334
01:12:22,400 --> 01:12:25,300
Oh yeah, it did look like I did move for a marker below that you're

1335
01:12:25,300 --> 01:12:25,800
right.

1336
01:12:26,100 --> 01:12:27,100
Let me see about that.

1337
01:12:32,200 --> 01:12:33,200
Yeah, you're correct.

1338
01:12:37,600 --> 01:12:37,800
Yeah.

1339
01:12:37,800 --> 01:12:38,800
So this guy

1340
01:12:44,500 --> 01:12:47,000
Yeah, this guy is technically outside that range.

1341
01:12:54,100 --> 01:12:57,800
So this is yet another reason to, to, like, get rid of that and just

1342
01:12:57,800 --> 01:13:00,300
use the hash table because then we wouldn't have this problem either.

1343
01:13:00,900 --> 01:13:01,400
You know,

1344
01:13:04,000 --> 01:13:04,500
So, I don't know.

1345
01:13:06,800 --> 01:13:08,300
It's not a particularly difficult thing to fix.

1346
01:13:08,300 --> 01:13:09,400
Just this one.

1347
01:13:14,400 --> 01:13:17,200
But yeah, it does move past that to do, right?

1348
01:13:17,200 --> 01:13:20,500
Because we could put it down here and just say if Global deal on

1349
01:13:20,500 --> 01:13:21,000
table,

1350
01:13:25,200 --> 01:13:26,600
I feel like that would be fine.

1351
01:13:28,100 --> 01:13:28,600
Right.

1352
01:13:30,500 --> 01:13:32,200
I feel like that would just work to put it down there.

1353
01:13:45,100 --> 01:13:45,500
Yeah.

1354
01:14:07,500 --> 01:14:10,800
Do you really care about compilations or just threads hash, the thread

1355
01:14:10,800 --> 01:14:11,600
IDs?

1356
01:14:12,100 --> 01:14:14,900
Yeah, we don't actually so compilation units.

1357
01:14:14,900 --> 01:14:15,500
We don't care about it.

1358
01:14:15,500 --> 01:14:18,300
All we were just using it so we could use counter as a unique ID.

1359
01:14:18,300 --> 01:14:22,600
So, what I would like to do, I think at this point is get rid of that

1360
01:14:22,600 --> 01:14:24,800
and just hash the file line number.

1361
01:14:25,900 --> 01:14:28,400
That's that's what we actually want, right?

1362
01:14:28,600 --> 01:14:33,800
So, we just have to file and line number and we do it once, and it

1363
01:14:33,800 --> 01:14:36,800
would just store it in a static right there, right?

1364
01:14:38,300 --> 01:14:40,300
So that's, you know, that's fine.

1365
01:14:41,000 --> 01:14:42,000
So that's what we would do.

1366
01:14:46,800 --> 01:14:48,700
Do you write code for this project off stream?

1367
01:14:49,000 --> 01:14:52,800
Know I everything that I've ever done.

1368
01:14:52,800 --> 01:14:55,600
Any time I've ever touched the files for this project, it is on

1369
01:14:55,600 --> 01:14:58,800
stream, that's the goal of the project is to not have a single thing

1370
01:14:58,800 --> 01:14:59,300
happen.

1371
01:15:00,000 --> 01:15:00,400
Dream.

1372
01:15:00,600 --> 01:15:03,800
So even when I read the forums and people are talking about the code,

1373
01:15:04,900 --> 01:15:09,600
I just say my recollection of it is blah but I don't even look at it,

1374
01:15:09,600 --> 01:15:13,500
really because I try to keep it so that everything I do is is captured

1375
01:15:24,500 --> 01:15:26,900
If I don't have a credit card, is there another way to buy it?

1376
01:15:27,100 --> 01:15:32,500
Well, it supports PayPal, so anything you could use it like you can

1377
01:15:32,500 --> 01:15:36,700
use a bank account with PayPal if you're trying to buy.

1378
01:15:36,700 --> 01:15:40,400
If you're talking about handmade hero you can you can buy it with

1379
01:15:40,400 --> 01:15:45,300
anything that supported by PayPal or stripe, but I think stripe like

1380
01:15:45,300 --> 01:15:46,000
sports credit card.

1381
01:15:46,000 --> 01:15:47,500
So you have to probably use PayPal.

1382
01:15:47,500 --> 01:15:52,900
I think stripe was talking about adding Bitcoin support.

1383
01:15:53,400 --> 01:15:56,100
They did but send owl the purse.

1384
01:15:56,100 --> 01:15:57,900
The actual fulfillment thing for ordering.

1385
01:15:57,900 --> 01:16:01,100
It has an added support for that yet.

1386
01:16:01,100 --> 01:16:01,700
As far as I know.

1387
01:16:01,700 --> 01:16:04,100
So you still can't use Bitcoins yet?

1388
01:16:09,700 --> 01:16:12,500
You brought up your devlog, do you think that writing a devlog is good

1389
01:16:12,500 --> 01:16:14,600
for the writer, the readers or both?

1390
01:16:16,200 --> 01:16:16,900
I don't know.

1391
01:16:19,000 --> 01:16:20,100
I haven't thought much about it.

1392
01:16:25,800 --> 01:16:28,100
It sounds like the debugger is not only a tool to find out what's

1393
01:16:28,100 --> 01:16:28,700
going wrong.

1394
01:16:28,700 --> 01:16:31,500
But to detect when things are going wrong, is that a fair assumption?

1395
01:16:31,800 --> 01:16:34,000
I never thought of it a bug or something that keeps me situationally

1396
01:16:34,000 --> 01:16:34,300
aware.

1397
01:16:34,300 --> 01:16:35,500
That sounds like a great idea.

1398
01:16:35,600 --> 01:16:40,500
Yes, that is exactly what this code that were writing is for you.

1399
01:16:40,500 --> 01:16:44,400
Remember I said this, when we were talking about what we're doing for

1400
01:16:44,400 --> 01:16:48,000
the, when I introduced the concept of debug code, it's for two

1401
01:16:48,000 --> 01:16:51,600
purposes, is to help you find bugs that are hard to find.

1402
01:16:53,000 --> 01:16:54,000
And it's to help.

1403
01:16:54,000 --> 01:16:58,300
You know, when there are bugs, that are hard to know, are there,

1404
01:16:58,800 --> 01:16:59,400
right?

1405
01:17:00,600 --> 01:17:05,000
Things like performance problems in particular, are very difficult to

1406
01:17:05,000 --> 01:17:09,000
know are happening or where they are happening without a lot of

1407
01:17:09,000 --> 01:17:10,200
situational awareness.

1408
01:17:10,700 --> 01:17:12,500
The same is true of memory problems.

1409
01:17:13,400 --> 01:17:16,600
There's just a lot of things that you may not even know our broken

1410
01:17:16,600 --> 01:17:20,300
your game, just runs a little worse and you chalk it up to something

1411
01:17:20,300 --> 01:17:20,600
else.

1412
01:17:20,600 --> 01:17:22,200
Like oh that's just the GPU.

1413
01:17:22,400 --> 01:17:24,500
Slow or something, you know who knows?

1414
01:17:24,500 --> 01:17:25,000
Right.

1415
01:17:25,100 --> 01:17:27,200
But that's not what it was, right?

1416
01:17:28,200 --> 01:17:31,600
And so part of what we're trying to do here is instrument the code in

1417
01:17:31,600 --> 01:17:35,100
ways that we can use all the time.

1418
01:17:35,600 --> 01:17:37,800
And we've got a little ways to go before we get there, but we're

1419
01:17:37,800 --> 01:17:42,300
trying and so hopefully we'll get to the point where we can start

1420
01:17:42,400 --> 01:17:44,500
start using that more reliably.

1421
01:17:46,300 --> 01:17:51,200
All right, we have come to the end of the Stream.

1422
01:17:52,400 --> 01:17:52,900
It's true.

1423
01:17:56,200 --> 01:17:57,000
That's why things down.

1424
01:17:57,500 --> 01:17:59,400
Thank you for everyone for joining me for

1425
01:18:00,200 --> 01:18:04,600
Another episode of handmade hero and thank you particularly to, I

1426
01:18:04,600 --> 01:18:11,200
guess they're listed here at Mach Andreas k for figuring out the bug

1427
01:18:11,700 --> 01:18:12,700
in their own times.

1428
01:18:12,700 --> 01:18:16,400
That we did not actually have to spend nearly as much time as we would

1429
01:18:16,400 --> 01:18:18,600
have had to spend on stream looking into it.

1430
01:18:18,600 --> 01:18:22,800
They pretty much found the Smoking Gun and were like, here it is.

1431
01:18:23,000 --> 01:18:24,000
So that was pretty awesome.

1432
01:18:24,300 --> 01:18:25,800
Thank you very much, guys for that.

1433
01:18:26,700 --> 01:18:29,800
That really helped out a lot and I hope you guys had fun.

1434
01:18:30,000 --> 01:18:30,600
Finding it.

1435
01:18:30,600 --> 01:18:33,400
Those are pretty kind of neat bug, and I'm still not sure.

1436
01:18:33,400 --> 01:18:34,500
I got to go look now to see.

1437
01:18:34,500 --> 01:18:38,400
Whether is that, if the I don't really understand why the compiler was

1438
01:18:38,400 --> 01:18:41,900
actually allowed to do that, but I guess it must have to do with

1439
01:18:42,500 --> 01:18:45,900
inline functions being merged by name without having to verify that

1440
01:18:45,900 --> 01:18:47,500
through the same or something.

1441
01:18:47,500 --> 01:18:49,200
Maybe the spec allows that I don't know.

1442
01:18:49,600 --> 01:18:51,400
Point being that was a little odd.

1443
01:18:51,400 --> 01:18:53,800
It wasn't what I would expect it to be able to do but maybe it's an

1444
01:18:53,800 --> 01:18:54,200
edge case.

1445
01:18:54,200 --> 01:18:59,100
It's actually out either way we found it and thank you very much for

1446
01:18:59,100 --> 01:18:59,800
the help.

1447
01:19:00,600 --> 01:19:05,400
Until next time, if you would like to follow along at home to the

1448
01:19:05,400 --> 01:19:08,600
source code, you can always pre-order handmade hero the game on him, a

1449
01:19:08,600 --> 01:19:11,500
hero dot org and it comes to the source code even now while we are

1450
01:19:11,500 --> 01:19:12,300
working on it.

1451
01:19:12,600 --> 01:19:15,000
So you could follow along at home and play with the source code, do

1452
01:19:15,000 --> 01:19:16,400
your own experiments that sort of thing.

1453
01:19:16,800 --> 01:19:19,000
We also have a forum site, you can go to ask questions if you have

1454
01:19:19,000 --> 01:19:21,800
questions about what you saw on the series and want to ask them but

1455
01:19:21,800 --> 01:19:23,000
didn't get a chance to ask some lives.

1456
01:19:23,000 --> 01:19:23,700
Good place to do it.

1457
01:19:23,700 --> 01:19:24,900
We also have anti depe sewed.

1458
01:19:24,900 --> 01:19:25,700
Guide up up there.

1459
01:19:25,700 --> 01:19:27,400
You can use to watch the series.

1460
01:19:27,400 --> 01:19:29,800
It's easier to jump around in community members.

1461
01:19:29,900 --> 01:19:32,800
Have like marked it up with time markers and stuff so you can figure

1462
01:19:32,800 --> 01:19:33,700
out where stuff happens.

1463
01:19:33,700 --> 01:19:34,400
It's pretty cool.

1464
01:19:34,600 --> 01:19:35,700
We have a patreon page.

1465
01:19:35,700 --> 01:19:39,000
If you want to support the video series, you can subscribe to that and

1466
01:19:39,000 --> 01:19:40,500
we also have a tweet bot.

1467
01:19:40,600 --> 01:19:43,000
The tweetbot will tweet the schedule, so if you want to catch a stream

1468
01:19:43,000 --> 01:19:44,000
live, you can always check it out.

1469
01:19:44,000 --> 01:19:47,800
It tells you when it is going to be live and seeing everyone's going

1470
01:19:47,800 --> 01:19:49,100
to be alive tomorrow.

1471
01:19:49,300 --> 01:19:50,000
5:00 p.m.

1472
01:19:50,000 --> 01:19:53,800
Pacific Daylight Time right here on Twitch, we will start playing

1473
01:19:53,800 --> 01:19:59,000
around with how to get our debug visualization to be faster and more

1474
01:19:59,000 --> 01:19:59,800
useful to us.

1475
01:20:00,400 --> 01:20:04,100
Now, that we are collecting our events properly, we're going to try to

1476
01:20:04,300 --> 01:20:06,200
make them a little more usable.

1477
01:20:06,200 --> 01:20:07,200
Make them a little more useful.

1478
01:20:07,600 --> 01:20:08,400
So that's what we'll be doing.

1479
01:20:08,400 --> 01:20:09,500
Hope hope you'll come back.

1480
01:20:09,500 --> 01:20:12,200
Join me for that, until then have fun programming, and I'll see you

1481
01:20:12,200 --> 01:20:13,100
guys on the internet.

1482
01:20:13,200 --> 01:20:13,900
Take it easy, everyone.

