1
00:00:01,500 --> 00:00:03,700
Hello everyone and welcome to handmade hero.

2
00:00:03,700 --> 00:00:06,200
The show we could complete game live on stream.

3
00:00:07,500 --> 00:00:09,900
It is profiler time.

4
00:00:10,700 --> 00:00:15,200
We actually have our profiler working in kind of meat right now but

5
00:00:15,400 --> 00:00:20,400
it's still not super usable day-to-day at the moment because there's

6
00:00:20,400 --> 00:00:23,300
like to at least two things that I think we still want to be able to

7
00:00:23,300 --> 00:00:30,500
do to make it easy for us to work on it and that is first of all we

8
00:00:30,500 --> 00:00:31,200
want to have a

9
00:00:31,400 --> 00:00:35,300
Like pausing things so that we can like stop what's going on and be

10
00:00:35,300 --> 00:00:39,100
able to use the profiler without it like jittering because like it's

11
00:00:39,100 --> 00:00:40,200
updating every frame.

12
00:00:41,900 --> 00:00:45,600
And the other thing that we want to be able to do too, I think is get

13
00:00:45,600 --> 00:00:47,500
a couple other views in there.

14
00:00:47,800 --> 00:00:51,900
Like right now we don't have a way of just saying what's the total

15
00:00:51,900 --> 00:00:57,400
time for any given frame spent in a particular routine, right?

16
00:00:57,800 --> 00:00:59,300
We don't do any summation stuff.

17
00:00:59,300 --> 00:01:06,300
So we do sort of the, the thread utilization view very well, but we

18
00:01:06,300 --> 00:01:11,300
don't do like, just What's the total time?

19
00:01:11,500 --> 00:01:14,900
Been in various routines that we don't actually draw out the moment.

20
00:01:15,100 --> 00:01:18,500
So be kind of need to just do a little bit more of that stuff and then

21
00:01:18,500 --> 00:01:21,000
I think we're pretty good shape on the profiling front.

22
00:01:21,900 --> 00:01:25,000
So let's take a look at what that is today is day 261.

23
00:01:25,000 --> 00:01:28,900
So day 260 source is what you want to start with if you're trying to

24
00:01:28,900 --> 00:01:36,000
follow along at home here is my project file.

25
00:01:36,500 --> 00:01:37,100
There it is.

26
00:01:38,100 --> 00:01:41,300
So here's the project file and here is

27
00:01:41,400 --> 00:01:48,200
is the currently running state of the profiler.

28
00:01:49,300 --> 00:01:52,600
The other thing is let's make it to I'm sick of it coming up tiny

29
00:01:52,600 --> 00:01:55,200
because right now we initialize like the width is just going to be

30
00:01:55,200 --> 00:02:00,500
last 20 all the time which is stupid because we would never want that

31
00:02:00,500 --> 00:02:01,600
to actually be the case.

32
00:02:01,800 --> 00:02:03,700
So I feel like we should do a thing where

33
00:02:05,200 --> 00:02:11,300
inside the, the initial sort of look at a particular, debug view, I

34
00:02:11,300 --> 00:02:13,300
think we should have a

35
00:02:15,500 --> 00:02:20,200
Way of, where is it a way of initializing it to something else?

36
00:02:20,500 --> 00:02:22,200
So, here's the thread interval graph.

37
00:02:22,200 --> 00:02:26,400
When we get one of these Dimension, things back, I'm just going to do

38
00:02:26,400 --> 00:02:26,700
a thing.

39
00:02:26,700 --> 00:02:27,500
That's like,

40
00:02:32,300 --> 00:02:38,900
You know if you profile graph you know what I kind of want to pull

41
00:02:38,900 --> 00:02:42,200
that out into its own thing actually I think I want to do something

42
00:02:42,200 --> 00:02:49,200
where I can like grab one of these guys out of there so I don't have

43
00:02:49,200 --> 00:02:50,500
to keep typing the whole thing.

44
00:02:50,800 --> 00:02:52,600
So I can say here's the graph.

45
00:02:55,700 --> 00:02:58,600
It's that and then I can just do that.

46
00:02:58,600 --> 00:02:59,900
So then I can

47
00:03:00,200 --> 00:03:04,100
If we haven't have has area kind of a thing.

48
00:03:04,100 --> 00:03:09,000
Well I could also say if graft block dot dim x equals 0,

49
00:03:11,100 --> 00:03:17,500
Oops and graph block dot.

50
00:03:17,500 --> 00:03:19,500
Dim y equals zero.

51
00:03:20,800 --> 00:03:23,500
Then I'm just going to assume that this is the first time that we've

52
00:03:23,500 --> 00:03:29,300
got it and and I'll make it, you know bigger.

53
00:03:29,600 --> 00:03:31,100
So I don't know what I'll make it be.

54
00:03:31,100 --> 00:03:35,000
Lets say that should probably be all the way across the screen for the

55
00:03:35,000 --> 00:03:36,500
most part, I would think

56
00:03:38,700 --> 00:03:39,300
I don't know.

57
00:03:39,800 --> 00:03:44,300
And as far as how big it should be, maybe something like that because

58
00:03:44,300 --> 00:03:46,800
it probably want it to be relatively large.

59
00:03:46,800 --> 00:03:47,500
That'd be my guess.

60
00:03:47,500 --> 00:03:48,000
Anyway.

61
00:03:49,700 --> 00:03:51,900
What are you complaining about?

62
00:03:51,900 --> 00:03:55,600
That's supposed to be an address then you can have an address you

63
00:03:55,600 --> 00:03:57,500
know, calm yourself.

64
00:04:00,600 --> 00:04:01,100
All right.

65
00:04:01,700 --> 00:04:05,800
So now I'm hoping that when we run this, if I expand the profile I'll

66
00:04:05,800 --> 00:04:09,500
get like a yeah, a default size of the profile that that's actually

67
00:04:09,500 --> 00:04:10,200
more usable.

68
00:04:10,200 --> 00:04:10,700
Right?

69
00:04:12,500 --> 00:04:16,800
And so one of these profiles I feel like I maybe want in the profile

70
00:04:16,800 --> 00:04:20,100
window like we I don't really think we've done much in the way of

71
00:04:20,200 --> 00:04:22,700
having some any real buttons or anything.

72
00:04:22,800 --> 00:04:25,400
I feel like we kind of want some buttons in here as well, like some

73
00:04:25,400 --> 00:04:29,600
things to change the view style or something like that.

74
00:04:30,400 --> 00:04:31,200
That sort of thing.

75
00:04:31,700 --> 00:04:33,100
We want to get some of that in there too.

76
00:04:33,100 --> 00:04:36,300
But at least now when we open it it's like a reasonable size which is

77
00:04:36,300 --> 00:04:37,100
obviously better.

78
00:04:37,800 --> 00:04:40,300
So in our drill down is working as well as we can drill down into

79
00:04:40,300 --> 00:04:43,100
something like I said, but we can't go back.

80
00:04:43,100 --> 00:04:44,900
So a back button would be nice there.

81
00:04:45,500 --> 00:04:48,600
So just a couple things like that, that I think we want to be able to,

82
00:04:48,900 --> 00:04:52,000
to do would be would be good.

83
00:04:52,000 --> 00:04:54,200
Yeah, great.

84
00:04:54,600 --> 00:04:55,000
Okay.

85
00:04:55,000 --> 00:04:57,600
So that's all fine.

86
00:04:58,600 --> 00:05:00,000
Let's take a look at

87
00:05:00,300 --> 00:05:01,600
I would need to do.

88
00:05:02,400 --> 00:05:03,300
You know what I, you know what?

89
00:05:03,300 --> 00:05:04,900
I feel like would be kind of nice.

90
00:05:05,200 --> 00:05:07,600
Just, you know, I'm just, I'm just throwing this out there.

91
00:05:08,100 --> 00:05:11,300
You know, it would be kind of nice is if there was a way to view like

92
00:05:11,300 --> 00:05:18,800
per frame stuff in slyke's like Stacks per frame as well, like a

93
00:05:21,100 --> 00:05:25,400
You know, something that was just designed to show us a more.

94
00:05:30,500 --> 00:05:33,500
I want some way of seeing bars over time.

95
00:05:38,000 --> 00:05:40,300
Just just just hear me out on this.

96
00:05:40,300 --> 00:05:45,500
Just just let me let me, let me sort of throw this out there.

97
00:05:45,800 --> 00:05:50,500
This may be really stupid and I apologize if it is but I'm just going

98
00:05:50,500 --> 00:05:51,100
to try.

99
00:05:51,100 --> 00:05:54,200
I just want to try something here as as a different view type as well.

100
00:05:54,500 --> 00:05:56,400
So in draw profile in

101
00:06:01,000 --> 00:06:03,800
So here's drop profile bars right in this thing is the thing that goes

102
00:06:03,800 --> 00:06:09,300
through and does the you know the bar horizontal bar kind of

103
00:06:09,300 --> 00:06:12,900
interested to see like what if we did a slightly different thing that

104
00:06:12,900 --> 00:06:17,300
was like like draw frame bars or something.

105
00:06:17,600 --> 00:06:21,800
And this one was designed to kind of go through like a bunch of like

106
00:06:21,800 --> 00:06:26,000
all the Frame data that we have maybe and it draws like the bars over

107
00:06:26,000 --> 00:06:26,600
time.

108
00:06:27,900 --> 00:06:29,900
I don't know, something like this.

109
00:06:30,100 --> 00:06:32,200
So we could do something where we go.

110
00:06:35,400 --> 00:06:36,600
yeah, like

111
00:06:38,200 --> 00:06:40,400
Basically the same thing here.

112
00:06:40,500 --> 00:06:45,000
Going to start with this, then I'm going to change it up a little bit.

113
00:06:46,000 --> 00:06:48,900
So we come through here and we Loop through the historic events

114
00:06:49,300 --> 00:06:50,800
instead of

115
00:06:52,700 --> 00:06:57,800
of just doing one frame and I guess the problem is when this passes

116
00:06:57,800 --> 00:07:01,000
the node, that's not really what I want either because I want to do

117
00:07:01,000 --> 00:07:02,700
one for each of these

118
00:07:11,300 --> 00:07:12,600
Try to think of how I want to do this.

119
00:07:14,700 --> 00:07:18,400
So what I'm trying to say is here when we call draw a profile in,

120
00:07:18,500 --> 00:07:21,000
we're passing like a particular event.

121
00:07:21,100 --> 00:07:26,600
And that event is we have many frames worth of data for that event,

122
00:07:26,600 --> 00:07:27,200
right?

123
00:07:27,400 --> 00:07:31,900
Meaning we could have instead of picking frame the most recent frame,

124
00:07:31,900 --> 00:07:35,600
we could have picked any like many many frames backwards in time and

125
00:07:35,600 --> 00:07:39,400
so I'm interested to see a version that doesn't work that way.

126
00:07:39,500 --> 00:07:42,400
Like what if I'm just trying to think of like what if we did something

127
00:07:42,400 --> 00:07:43,800
that was more like draw

128
00:07:46,100 --> 00:07:49,900
You know, we'll do draw frame bars here and what this does is when we

129
00:07:49,900 --> 00:07:53,900
called refrain bars we pass it like a debug start event or something

130
00:07:53,900 --> 00:08:01,800
that's like first event maybe and and maybe like, how many events we

131
00:08:01,800 --> 00:08:02,900
want to draw, I don't know.

132
00:08:03,800 --> 00:08:09,400
And then when we go through it, we Loop through each the stored events

133
00:08:09,500 --> 00:08:10,200
profile node.

134
00:08:10,200 --> 00:08:13,900
We Loop through like multiple frames of that and draw them all.

135
00:08:14,500 --> 00:08:15,100
Right.

136
00:08:15,400 --> 00:08:16,700
So something like

137
00:08:19,200 --> 00:08:20,100
Let's see.

138
00:08:21,100 --> 00:08:28,500
Something like we wouldn't have a lame count at the moment.

139
00:08:31,900 --> 00:08:35,299
so, we would just do like

140
00:08:38,100 --> 00:08:39,500
Drop profile bars.

141
00:08:39,900 --> 00:08:41,299
We just do this.

142
00:08:49,800 --> 00:08:50,600
and,

143
00:08:52,800 --> 00:08:58,600
So, for each of these, we would go through all of the children, just

144
00:08:58,600 --> 00:08:59,800
once we would not do it.

145
00:09:00,000 --> 00:09:00,700
Cursive Lee.

146
00:09:00,900 --> 00:09:02,700
So like I wouldn't do

147
00:09:05,500 --> 00:09:06,400
This call.

148
00:09:07,300 --> 00:09:12,000
But I would also right here to the route event,

149
00:09:14,100 --> 00:09:17,700
I would, I would keep chasing the next pointer of the route event to

150
00:09:17,700 --> 00:09:19,100
go from frame to frame.

151
00:09:20,400 --> 00:09:26,000
You know, and I'd probably do something cure like ask how many frames

152
00:09:26,300 --> 00:09:28,000
to draw, you know?

153
00:09:29,200 --> 00:09:30,200
So,

154
00:09:31,700 --> 00:09:34,600
Let's see, and maybe we default to saying, you know, oh, we're going

155
00:09:34,600 --> 00:09:37,900
to draw like a hundred, twenty eight frames or something like that, I

156
00:09:37,900 --> 00:09:38,300
don't know.

157
00:09:39,500 --> 00:09:43,300
So if we were gonna do something like that, then we'd say, okay, like

158
00:09:43,300 --> 00:09:47,700
the total space that each one of these bars takes up, right?

159
00:09:47,700 --> 00:09:53,200
Like the bar with should be the frame count, like whatever the the

160
00:09:53,200 --> 00:09:58,000
dimension is of our profile wreck, it should be the width of that.

161
00:10:02,100 --> 00:10:03,900
/ the frame count.

162
00:10:08,400 --> 00:10:12,500
And obviously, if the frame count is not greater than 0, then we

163
00:10:12,500 --> 00:10:14,400
wouldn't be able to draw anything because they're you know, there's

164
00:10:14,400 --> 00:10:15,200
nothing to draw.

165
00:10:20,800 --> 00:10:25,100
So once we knew that and then we come through here, then I would

166
00:10:25,100 --> 00:10:28,800
probably do roughly the same thing in here, only instead of drawing

167
00:10:28,800 --> 00:10:32,400
like instead of doing the bars, the way we did them up here.

168
00:10:33,500 --> 00:10:37,700
I'd kind of do them the other way around and I probably want this

169
00:10:37,700 --> 00:10:41,900
color table to be outside I suppose, so this is probably something

170
00:10:41,900 --> 00:10:46,300
like Global variable color table.

171
00:10:49,200 --> 00:10:50,300
Keypad color table.

172
00:10:52,000 --> 00:10:56,100
So we do something that's essentially the same as this, right?

173
00:10:56,500 --> 00:11:00,900
And instead of drawing things horizontally we just draw them

174
00:11:00,900 --> 00:11:01,500
vertically.

175
00:11:02,100 --> 00:11:07,100
So I'd still take my cue here where we'd say, okay we've got the root

176
00:11:07,100 --> 00:11:11,000
node and I'm gonna get all the information about that in order to get

177
00:11:11,000 --> 00:11:14,200
that I have to do this basically.

178
00:11:17,100 --> 00:11:18,000
Let's see here.

179
00:11:18,000 --> 00:11:21,400
Yeah, so I get the root node out of the event that we're on.

180
00:11:21,400 --> 00:11:23,800
I compute this span stuff exactly.

181
00:11:23,800 --> 00:11:29,300
The way that I used to only instead of using the width.

182
00:11:29,300 --> 00:11:34,900
Now, I use the height and now when I draw these things, instead of

183
00:11:34,900 --> 00:11:41,500
doing the max x, max, max, Min x, max X4, where the profile stuff

184
00:11:41,500 --> 00:11:41,900
goes.

185
00:11:42,000 --> 00:11:43,600
This would actually be why

186
00:11:44,800 --> 00:11:48,600
But everything else would be essentially the same, right?

187
00:11:53,000 --> 00:11:53,500
Yeah.

188
00:11:54,700 --> 00:11:55,600
And then that's it.

189
00:11:58,000 --> 00:11:59,700
So, all right, so that's it.

190
00:11:59,700 --> 00:11:59,800
That's

191
00:12:00,100 --> 00:12:04,400
I'm really saying and then when we go to create the actual region

192
00:12:04,400 --> 00:12:10,700
rekt, what we would do is say, well, I know what the bar width is and

193
00:12:10,700 --> 00:12:14,500
so for each of these events we would move it forwards.

194
00:12:14,600 --> 00:12:19,100
So I kind of have like a start X or an at X and I would say that

195
00:12:19,100 --> 00:12:22,400
whatever the profile rectangle that we were that we were in.

196
00:12:23,800 --> 00:12:28,200
I would want to start at its minimum and then each time through this

197
00:12:28,200 --> 00:12:29,900
Loop, I'm going to advance by one

198
00:12:30,000 --> 00:12:30,900
one bar with,

199
00:12:34,900 --> 00:12:39,600
Enos, I'm moving over by one, one of those bar with and then inside

200
00:12:39,600 --> 00:12:41,600
here, when I drop to me,

201
00:12:43,400 --> 00:12:47,000
When I draw these, what I'm going to do, is say well, okay.

202
00:12:47,600 --> 00:12:48,800
I need to draw.

203
00:12:51,500 --> 00:12:57,700
I need to draw the bar, starting at this Min Y, and I need to draw it

204
00:12:57,700 --> 00:13:00,600
from addicts to add X plus the bar with

205
00:13:03,300 --> 00:13:05,500
And then I need to stop it at this Max, why?

206
00:13:06,500 --> 00:13:10,500
So now we've just sort of converted to drawing multiple frames in

207
00:13:10,500 --> 00:13:12,300
stock vertical bars, right?

208
00:13:12,400 --> 00:13:15,800
And I'm no longer going to allow Lanes at all.

209
00:13:16,500 --> 00:13:20,000
So what I'd probably do is say that everything has to be in the same

210
00:13:20,000 --> 00:13:23,900
Lane as the first event which would automatically be true if that

211
00:13:23,900 --> 00:13:26,400
event actually existed, right?

212
00:13:27,500 --> 00:13:28,700
So,

213
00:13:31,900 --> 00:13:32,400
Is that true?

214
00:13:36,800 --> 00:13:37,300
Yeah.

215
00:13:39,600 --> 00:13:44,500
So essentially you have to have the first event, you have to kind of

216
00:13:44,500 --> 00:13:51,300
like have that selected because otherwise you'd have multiple threads

217
00:13:51,500 --> 00:13:52,500
all in there.

218
00:13:52,500 --> 00:13:56,900
And I don't, I want to only do one particular thread, right?

219
00:13:57,200 --> 00:14:02,200
So I'm going to do something here, like, say well for any given

220
00:14:02,200 --> 00:14:06,800
profile node that I come through here, I only am interested in ones

221
00:14:06,800 --> 00:14:08,600
whose Lane index is going

222
00:14:08,800 --> 00:14:13,500
Be the same as the one that is sort of the parent, right?

223
00:14:14,300 --> 00:14:20,000
So if the node thread ordinal equals the root nodes thread ordinal,

224
00:14:20,000 --> 00:14:26,000
then I'll proceed but otherwise, I don't want that in here at all.

225
00:14:27,500 --> 00:14:30,600
Now normally that would just automatically be the case but I just

226
00:14:30,600 --> 00:14:33,400
putting because I'm just making sure that if you happen to pass down

227
00:14:33,400 --> 00:14:35,100
that Route, 14 the frame.

228
00:14:35,100 --> 00:14:38,300
It will only draw like the first thread ordinal or something like this

229
00:14:38,300 --> 00:14:42,500
or none as the case may be or maybe, I don't know, maybe that's dumb.

230
00:14:44,500 --> 00:14:45,300
Maybe I'll just leave it.

231
00:14:45,400 --> 00:14:46,000
I'm not sure.

232
00:14:46,100 --> 00:14:47,400
I'm really not sure what to do there.

233
00:14:48,400 --> 00:14:52,500
Basically, the lane stuff is just not relevant because we don't have

234
00:14:52,500 --> 00:14:55,900
room to draw it now and so I'm not sure I was trying to figure out

235
00:14:55,900 --> 00:14:57,200
like what I should do about that.

236
00:14:57,200 --> 00:14:58,800
I'm not 100% sure.

237
00:15:01,400 --> 00:15:02,700
That's the problem with the Reds.

238
00:15:02,900 --> 00:15:06,000
I think you probably want just stacks for each thread.

239
00:15:06,100 --> 00:15:09,200
It's probably what you want would want to do in that case, which is a

240
00:15:09,200 --> 00:15:11,300
little tricky.

241
00:15:13,900 --> 00:15:16,600
So maybe we'll take a look at how we might do that as well.

242
00:15:26,400 --> 00:15:26,800
Okay.

243
00:15:33,000 --> 00:15:35,400
That is true.

244
00:15:35,900 --> 00:15:38,400
Alright, so yeah.

245
00:15:38,400 --> 00:15:41,000
So now, if I run this, we shouldn't see any difference.

246
00:15:41,000 --> 00:15:43,400
Because we're still calling the old one and the old one should still

247
00:15:43,400 --> 00:15:44,000
work fine.

248
00:15:44,000 --> 00:15:44,400
Right?

249
00:15:44,700 --> 00:15:49,400
And so now what I'm going to do is I'm going to try calling the draw

250
00:15:49,400 --> 00:15:50,900
frame bars instead.

251
00:15:55,700 --> 00:15:59,600
So yeah, so instead of this I'm going to try here.

252
00:16:06,800 --> 00:16:07,100
Oops.

253
00:16:14,300 --> 00:16:14,700
Okay.

254
00:16:16,400 --> 00:16:21,900
All right, and the problem that will have is that first we're not set

255
00:16:21,900 --> 00:16:27,000
to anything in particular, so this will actually give us a root node,

256
00:16:27,000 --> 00:16:30,200
that's actually the frames root node and that's a little bit of a

257
00:16:30,200 --> 00:16:30,700
problem, right?

258
00:16:30,700 --> 00:16:37,700
Because that does have multiple threads inside it, but like I said,

259
00:16:37,700 --> 00:16:39,400
we're still drawing those so I guess it's.

260
00:16:39,400 --> 00:16:42,200
The problem is just that they'll draw on top of each other, you know

261
00:16:42,200 --> 00:16:42,700
what I mean?

262
00:16:43,800 --> 00:16:44,900
And that's not great.

263
00:16:46,300 --> 00:16:48,400
Apparently, we drew so many things.

264
00:16:50,600 --> 00:16:51,300
Somehow.

265
00:16:53,800 --> 00:16:55,400
I must be drawing too much stuff.

266
00:16:57,300 --> 00:16:58,200
What did I do here?

267
00:16:58,200 --> 00:17:02,700
Sort of event is first child next to same parent.

268
00:17:03,400 --> 00:17:05,900
So we're going through each of these

269
00:17:10,099 --> 00:17:10,500
We're drawn.

270
00:17:10,500 --> 00:17:11,300
Each of its children.

271
00:17:11,800 --> 00:17:12,800
Is that really too much?

272
00:17:12,800 --> 00:17:13,400
Of course I should.

273
00:17:13,400 --> 00:17:16,400
Also do I need to make the frame index.

274
00:17:26,400 --> 00:17:27,599
The actually Captor.

275
00:17:29,500 --> 00:17:31,700
Index count.

276
00:17:35,400 --> 00:17:37,100
And root 2, then X Y.

277
00:17:37,100 --> 00:17:38,700
So that I can put that in the same place.

278
00:17:42,700 --> 00:17:45,700
So we want to make sure the route event actually exists.

279
00:17:46,900 --> 00:17:48,700
We would like to be able to

280
00:17:50,100 --> 00:17:51,700
Keep the frame index as well.

281
00:17:53,700 --> 00:17:55,300
And make sure that it's whatever it is.

282
00:17:55,300 --> 00:17:58,900
Now I'm going to for easy to bugging, I'll just make it so that right

283
00:17:58,900 --> 00:17:59,800
now, let's say it.

284
00:18:00,000 --> 00:18:00,600
Draws one.

285
00:18:02,700 --> 00:18:05,700
So now we should have absolutely no problem with that.

286
00:18:05,700 --> 00:18:07,800
And hey look, it is an actual stack.

287
00:18:08,000 --> 00:18:08,800
So that's good.

288
00:18:08,900 --> 00:18:14,200
I'm now going to go ahead and change that up to 10 to see what

289
00:18:14,200 --> 00:18:14,800
happens.

290
00:18:16,200 --> 00:18:17,000
And so

291
00:18:18,500 --> 00:18:20,200
Yeah, that's that's not.

292
00:18:21,200 --> 00:18:22,000
Correct.

293
00:18:22,900 --> 00:18:26,500
So I messed up something because what we should be seeing we shouldn't

294
00:18:26,500 --> 00:18:27,700
be seeing depth.

295
00:18:28,000 --> 00:18:33,200
We should be seeing multiple copies of what look essentially like

296
00:18:33,200 --> 00:18:33,700
this.

297
00:18:39,800 --> 00:18:40,400
And you know what?

298
00:18:40,400 --> 00:18:43,800
I guess the other problem is we're not passing at the right kind of

299
00:18:43,800 --> 00:18:44,400
event.

300
00:18:44,400 --> 00:18:48,600
Either we need to be passing it like the first one of something.

301
00:18:53,600 --> 00:18:54,200
Right.

302
00:18:54,300 --> 00:18:59,100
So really in here, draw frame bars, we want to be passing it, instead

303
00:18:59,100 --> 00:19:06,700
of the root node, we actually want to be passing it, you know, this

304
00:19:07,100 --> 00:19:10,400
where we do this search here, we actually don't want to pass that.

305
00:19:10,500 --> 00:19:12,000
We just want to pass it.

306
00:19:12,000 --> 00:19:16,700
The oldest event like we want to pass it way back when you know, the

307
00:19:17,000 --> 00:19:20,700
something it can Loop through and draw more frames of

308
00:19:27,100 --> 00:19:27,500
Hmm.

309
00:19:28,300 --> 00:19:29,000
Hmm.

310
00:19:30,600 --> 00:19:35,900
So I guess I'd have to do this essentially something like that kind of

311
00:19:35,900 --> 00:19:36,800
hack this together.

312
00:19:37,800 --> 00:19:39,500
I need to pass it something.

313
00:19:39,500 --> 00:19:42,000
Like here's the oldest frame.

314
00:19:45,900 --> 00:19:51,700
And I'm just going to grab out of that the root profile note.

315
00:19:59,500 --> 00:20:01,300
And that's but that's not chained together.

316
00:20:09,700 --> 00:20:10,700
So frustrating.

317
00:20:11,800 --> 00:20:16,200
It's like almost right but we don't we just don't quite have it

318
00:20:16,300 --> 00:20:17,300
correct?

319
00:20:17,300 --> 00:20:22,300
Like the frames themselves should have been if we had made the frames

320
00:20:22,300 --> 00:20:23,700
themselves events.

321
00:20:24,900 --> 00:20:29,400
Then you could just use them directly and it would have worked which

322
00:20:29,400 --> 00:20:33,100
seems like better than what I ended up with like these nodes are

323
00:20:33,100 --> 00:20:35,100
synthetic and not chained together.

324
00:20:35,300 --> 00:20:38,900
So now they can't be used in that way.

325
00:20:40,600 --> 00:20:41,800
And that's super lame.

326
00:20:43,600 --> 00:20:44,200
Right.

327
00:20:50,700 --> 00:20:51,500
Let's see here.

328
00:20:52,500 --> 00:20:55,700
So I think we want to kind of push on that a little bit just to clean

329
00:20:55,700 --> 00:20:56,200
that up.

330
00:20:58,100 --> 00:20:58,400
So yeah.

331
00:20:58,400 --> 00:20:59,800
So here we are in

332
00:21:00,000 --> 00:21:03,500
In this part of the code where we get the viewing element stuff.

333
00:21:03,800 --> 00:21:08,000
So if instead of doing this search, I just left it be.

334
00:21:09,500 --> 00:21:14,000
So you know I could do this essentially say we get the viewing element

335
00:21:14,700 --> 00:21:19,000
and once we get the viewing element then we set the root node equal to

336
00:21:19,000 --> 00:21:20,200
the viewing element.

337
00:21:21,500 --> 00:21:22,500
Oldest event.

338
00:21:25,100 --> 00:21:28,600
Now, what should happen is in, you know, normally, when we look at it,

339
00:21:28,600 --> 00:21:29,600
we just look like this.

340
00:21:29,900 --> 00:21:35,200
If we then go to take a particular one of these, right?

341
00:21:35,700 --> 00:21:39,700
I don't know which one may be like, debug collation, then yeah.

342
00:21:39,700 --> 00:21:42,400
And, and then you can see it looks correct.

343
00:21:42,500 --> 00:21:46,900
Well, correct is a strong word here, but it'll draw, you know, us a

344
00:21:46,900 --> 00:21:51,100
series of these over time where we can see on each subsequent frame,

345
00:21:51,200 --> 00:21:53,900
how much time each of them took, right?

346
00:21:54,700 --> 00:21:57,200
And so we can kind of see like frame-to-frame.

347
00:21:58,900 --> 00:22:02,300
And once this space remaining gets down to zero they would scroll

348
00:22:02,300 --> 00:22:03,100
across to.

349
00:22:03,500 --> 00:22:10,300
I can also go in here and say, oh hey, you know, let's let's look at a

350
00:22:10,300 --> 00:22:11,400
few more of these.

351
00:22:15,400 --> 00:22:17,800
So let's say I want like 128 of These Bars.

352
00:22:19,800 --> 00:22:25,500
And then you can kind of see like, again, a more sort of granular view

353
00:22:25,500 --> 00:22:26,800
of like, what's happening over time.

354
00:22:26,800 --> 00:22:30,500
So I'd like, again, I'd like to kind of support that.

355
00:22:30,500 --> 00:22:31,900
I feel like we just need.

356
00:22:31,900 --> 00:22:37,900
I feel like we're just a little bit off from how this should work and

357
00:22:37,900 --> 00:22:40,400
I feel like maybe part of that is just the whole.

358
00:22:40,400 --> 00:22:45,300
Like I do think we may want to do instead of chaining those those

359
00:22:45,300 --> 00:22:49,700
things together and freeing them dynamically like we were I think

360
00:22:49,900 --> 00:22:51,100
We want to do something more.

361
00:22:51,100 --> 00:22:56,100
Like we just allocate a block of, you know, however, many frames of

362
00:22:56,100 --> 00:23:00,200
Back Store, we're going to keep which is like, you know, 128 frames or

363
00:23:00,200 --> 00:23:01,100
something like this.

364
00:23:02,200 --> 00:23:08,000
Or 256 frames and we just keep that many stored events and that way we

365
00:23:08,000 --> 00:23:11,900
can always just like know that we didn't, we don't have to deal with

366
00:23:11,900 --> 00:23:14,300
the chaining right in that way.

367
00:23:19,900 --> 00:23:23,500
And that would just be for a debug element, you know, / debug element.

368
00:23:27,900 --> 00:23:28,400
Yeah.

369
00:23:34,600 --> 00:23:37,200
In fact, really now that I think about it, it's just kind of an index

370
00:23:37,200 --> 00:23:40,500
anyway, because you still can have multiple events on a single frame

371
00:23:40,500 --> 00:23:41,100
for a given.

372
00:23:41,100 --> 00:23:43,900
One of these right, there could be like lots of instances where it

373
00:23:43,900 --> 00:23:45,000
occurred on that frame.

374
00:23:45,400 --> 00:23:47,900
So really you just need a central table at the top.

375
00:23:47,900 --> 00:23:52,300
That's like, for this debug element here is like the 128 times that,

376
00:23:52,600 --> 00:23:55,100
you know, 128 frames or something like that.

377
00:23:55,200 --> 00:23:59,200
And the pointer into the first event that happened on that frame for

378
00:23:59,200 --> 00:23:59,800
this element.

379
00:24:00,300 --> 00:24:04,500
Right that way, you could always Creek quickly scrub around on them

380
00:24:04,500 --> 00:24:05,200
and always know.

381
00:24:05,200 --> 00:24:06,600
I'm trying to draw a particular frame.

382
00:24:07,200 --> 00:24:10,800
Give me the set for that frame, you know what I mean?

383
00:24:13,000 --> 00:24:16,200
And that seems that seems maybe like what the right thing should be.

384
00:24:16,300 --> 00:24:19,600
You still want the chaining like the chaining still makes sense.

385
00:24:19,800 --> 00:24:23,300
It's just, you want the frame index to be there as well.

386
00:24:30,400 --> 00:24:30,800
Yeah.

387
00:24:34,900 --> 00:24:35,900
I think that's true.

388
00:24:37,300 --> 00:24:40,400
And the other thing that I'm wondering to is when we pass down a

389
00:24:40,400 --> 00:24:42,700
stored event here, I'm wondering.

390
00:24:45,500 --> 00:24:46,800
About that a little bit too.

391
00:24:46,800 --> 00:24:48,100
So let's let's take a look at this.

392
00:24:48,100 --> 00:24:50,000
So we're drawing the frame bars.

393
00:24:50,000 --> 00:24:54,000
Here's a iterating over the frame indices, right?

394
00:24:54,600 --> 00:24:58,700
And the what we would probably want to do here is is make it so that

395
00:24:58,700 --> 00:24:59,800
as we

396
00:25:02,000 --> 00:25:06,000
I guess as we go, maybe they would would just kind of sweep around.

397
00:25:06,300 --> 00:25:11,400
So you know however, many frames that we stored, we would go on that,

398
00:25:11,500 --> 00:25:15,200
whatever that element was and we just go through all of the frames

399
00:25:15,600 --> 00:25:16,600
that it held.

400
00:25:17,000 --> 00:25:18,400
I kind of want to play with this.

401
00:25:18,400 --> 00:25:20,800
So I think that's what I'm going to try doing here.

402
00:25:21,400 --> 00:25:23,500
So, inside the debug element,

403
00:25:24,400 --> 00:25:26,700
you can see that right now, it's got this sort of head and tail

404
00:25:26,700 --> 00:25:32,300
pointer for like the each of the events and that's all the events that

405
00:25:32,300 --> 00:25:34,600
happened ever forever in time.

406
00:25:35,300 --> 00:25:36,100
You know what I'm saying?

407
00:25:37,000 --> 00:25:40,600
And if we go up to like debug frames, and we look at frames

408
00:25:40,600 --> 00:25:46,600
themselves, which are here frames, essentially, well, that's not

409
00:25:46,600 --> 00:25:46,900
right.

410
00:25:46,900 --> 00:25:48,200
I don't even know what this is.

411
00:25:48,200 --> 00:25:49,100
Why is he even here?

412
00:25:49,100 --> 00:25:50,200
This is going away.

413
00:25:53,200 --> 00:25:54,300
Simon used anymore.

414
00:25:55,100 --> 00:25:57,100
And Max reasons for frame isn't a thing.

415
00:25:58,100 --> 00:25:59,000
None of that's a thing.

416
00:26:02,000 --> 00:26:02,300
Yeah.

417
00:26:08,700 --> 00:26:14,100
So what I was going to say was for a given frame, right?

418
00:26:14,100 --> 00:26:19,000
We've got these route profile node things and I don't even know like

419
00:26:19,000 --> 00:26:21,100
if we just if we just kind of look at

420
00:26:23,300 --> 00:26:27,400
The way this works, the frame itself doesn't really let us get to the

421
00:26:27,400 --> 00:26:29,000
information that we want.

422
00:26:29,700 --> 00:26:33,800
It's really like we want to just have a frame index and then from any

423
00:26:33,800 --> 00:26:37,700
we don't want have to search this tree basically to find individual

424
00:26:37,700 --> 00:26:38,400
actors.

425
00:26:38,600 --> 00:26:41,700
So what we want to be able to do is say, okay, we've got a frame index

426
00:26:41,700 --> 00:26:44,900
and a debug element, the debug elements, the thing, we're trying to

427
00:26:44,900 --> 00:26:45,600
inspect.

428
00:26:45,600 --> 00:26:50,200
Let's jump right to the elements of the stored events that were for

429
00:26:50,200 --> 00:26:51,800
this element on this Frame.

430
00:26:52,400 --> 00:26:53,000
If that's kind.

431
00:26:53,100 --> 00:26:59,000
of how we actually want it to work, you know I'm saying and so that's

432
00:26:59,400 --> 00:26:59,800
that's really

433
00:27:00,000 --> 00:27:03,700
The the part that I'm concerned about now, what?

434
00:27:03,700 --> 00:27:10,800
I don't super remember is exactly how when we free these.

435
00:27:11,000 --> 00:27:12,500
How do we Loop through?

436
00:27:16,100 --> 00:27:18,900
Like, do we have a way to Loop through a hundred percent of those?

437
00:27:18,900 --> 00:27:20,000
I'm not sure how.

438
00:27:20,700 --> 00:27:24,900
Yeah, we just go through the entire hash and we free individual

439
00:27:24,900 --> 00:27:25,700
element.

440
00:27:26,500 --> 00:27:30,100
Events so that can still work.

441
00:27:30,100 --> 00:27:34,400
So there's really not much that has to happen here to be honest.

442
00:27:40,200 --> 00:27:42,000
Really all we need to introduce.

443
00:27:43,700 --> 00:27:46,400
Is something here that would be called, you know?

444
00:27:49,300 --> 00:27:50,600
Debug element frame.

445
00:27:53,100 --> 00:27:56,500
And the debug element frame would just Ascent, you know, it would just

446
00:27:56,500 --> 00:27:57,700
keep this stuff.

447
00:27:59,800 --> 00:28:03,900
Like so and similarly this would be kind of nice for us as well,

448
00:28:03,900 --> 00:28:08,100
because inside this we could keep how much time it took on this

449
00:28:08,100 --> 00:28:09,100
particular frame.

450
00:28:10,100 --> 00:28:10,700
Right?

451
00:28:11,200 --> 00:28:14,300
So, we could kind of say for this Frame, You Know, What's the total

452
00:28:14,300 --> 00:28:15,800
clocks, right?

453
00:28:18,400 --> 00:28:19,500
In all these events.

454
00:28:19,700 --> 00:28:22,700
So when we run over the events and do the bookkeeping, we can say, oh,

455
00:28:22,700 --> 00:28:25,200
this element on this Frame took this much time.

456
00:28:25,500 --> 00:28:26,900
That would give us a good way to show.

457
00:28:26,900 --> 00:28:30,000
What our top taking elements were as well, which is another thing that

458
00:28:30,000 --> 00:28:31,000
I think would be nice.

459
00:28:32,100 --> 00:28:35,100
so then in here we would just say however, many frames have back

460
00:28:35,100 --> 00:28:36,100
store, we have

461
00:28:40,800 --> 00:28:42,300
we're just going to take, you know,

462
00:28:47,500 --> 00:28:50,100
I think we just want this to be a straight-up array.

463
00:28:55,100 --> 00:28:59,800
And then we can do the exact same thing instead of instead of having

464
00:28:59,900 --> 00:29:01,400
this stuff happen next.

465
00:29:01,400 --> 00:29:05,500
And, and all that, we would also, we would do the exact same thing

466
00:29:05,500 --> 00:29:09,400
with the other with the, with the frame table here.

467
00:29:09,700 --> 00:29:12,900
So, where we've got before where we have a thing where we're like,

468
00:29:12,900 --> 00:29:14,000
okay, here's the

469
00:29:15,600 --> 00:29:16,700
you know, here's the

470
00:29:18,600 --> 00:29:20,400
first frame, oldest friend most recent frame.

471
00:29:20,600 --> 00:29:22,100
We would just have debug frame.

472
00:29:24,200 --> 00:29:25,000
You know, frames.

473
00:29:31,600 --> 00:29:32,100
Like so.

474
00:29:34,100 --> 00:29:35,700
And so I think it would just be.

475
00:29:35,700 --> 00:29:40,000
Yeah, okay so we you know, we have these frames this is this is how

476
00:29:40,000 --> 00:29:42,800
many there are we do the collation?

477
00:29:42,800 --> 00:29:46,400
I don't think we would ever actually need to maintain a free list of

478
00:29:46,400 --> 00:29:50,900
them because that would never actually occur.

479
00:29:51,000 --> 00:29:51,300
Right?

480
00:29:51,300 --> 00:29:55,000
So if you take a look at how this was being managed before, we had a

481
00:29:55,000 --> 00:29:58,400
free list for our frames here, where we were doing, you know, next and

482
00:29:58,400 --> 00:29:59,300
fries and stuff.

483
00:29:59,400 --> 00:29:59,800
We could

484
00:30:00,000 --> 00:30:00,500
Really.

485
00:30:03,600 --> 00:30:10,000
Delete all that and say, you know, we always just have this many.

486
00:30:10,300 --> 00:30:15,000
And however, Mitch the debug frame count is that's how many frames of

487
00:30:15,000 --> 00:30:17,300
back data, we store and that's it.

488
00:30:22,000 --> 00:30:22,900
I don't know, 256.

489
00:30:22,900 --> 00:30:23,400
Let's say

490
00:30:25,300 --> 00:30:31,800
So that's how much back data gets stored, no matter what and then off,

491
00:30:31,800 --> 00:30:32,800
you know, off we go.

492
00:30:34,000 --> 00:30:36,000
so, I think

493
00:30:43,300 --> 00:30:46,700
I think that's really all we would need in terms of structural

494
00:30:46,700 --> 00:30:52,600
changes, is just having the frames now, work in that fashion and the

495
00:30:52,600 --> 00:30:57,100
only slightly tricky thing about it is now getting the frame out that

496
00:30:57,100 --> 00:30:57,900
we're on.

497
00:30:58,600 --> 00:31:01,900
There's the concept of like the total frame index and then there's

498
00:31:01,900 --> 00:31:04,800
also like the frame ordinal which is just something that's going to

499
00:31:04,800 --> 00:31:06,600
wrap around, right?

500
00:31:07,000 --> 00:31:11,500
And so then instead of this Frame count, we would just have a like you

501
00:31:11,500 --> 00:31:11,900
know,

502
00:31:13,100 --> 00:31:18,000
Frame ordinal, which is like, you know, you know next three frame or

503
00:31:18,000 --> 00:31:18,900
something like that.

504
00:31:20,500 --> 00:31:21,800
And it would start out at 0.

505
00:31:21,800 --> 00:31:26,100
So we'd say okay, you know, we're the next time we go to retire a

506
00:31:26,100 --> 00:31:30,700
frame, we would put it in frame 0 and then we increment it and if and

507
00:31:30,700 --> 00:31:32,600
when it gets to the end, it would sort of wrap around.

508
00:31:33,100 --> 00:31:39,400
And so if you wanted to know, you know what the previous frame was,

509
00:31:39,400 --> 00:31:43,900
you would need to look one behind next reframe.

510
00:31:45,000 --> 00:31:45,800
If that makes sense.

511
00:31:48,000 --> 00:31:51,800
So let's see, let me see how bad it would be for us to try to clean up

512
00:31:51,800 --> 00:31:53,900
the system to work that way.

513
00:31:56,200 --> 00:32:00,200
So let's see, so if we're drawing things like in here where we're

514
00:32:00,200 --> 00:32:04,300
doing debug draw elements, what we would want to know, pretty much

515
00:32:04,300 --> 00:32:09,400
always is we'd want to have a notion of what frame we were actually

516
00:32:09,400 --> 00:32:11,100
drawing, right?

517
00:32:11,300 --> 00:32:15,700
So when we come down through something like debug draw element, we

518
00:32:15,700 --> 00:32:19,600
would need to know in addition, you know, when maybe we're coming

519
00:32:19,600 --> 00:32:21,400
through maybe the layout itself.

520
00:32:21,800 --> 00:32:24,600
Could track that piece of information for us.

521
00:32:26,200 --> 00:32:28,100
Or maybe that's stored in the debug state.

522
00:32:28,100 --> 00:32:31,600
So maybe the debug State kind of has that piece of information.

523
00:32:31,600 --> 00:32:35,600
I'm not sure how we want to do that since debugged raw elements.

524
00:32:35,600 --> 00:32:39,200
Something that's probably called as, you know, sort of utility.

525
00:32:39,400 --> 00:32:41,300
I think we would want to do something here.

526
00:32:41,300 --> 00:32:44,200
Like, what is the frame index that we're looking for?

527
00:32:45,700 --> 00:32:46,800
Or the frame word null.

528
00:32:48,700 --> 00:32:50,700
And that's the in, you know, index into that array.

529
00:32:50,700 --> 00:32:54,200
So then what we would say is well, okay, whatever.

530
00:32:54,200 --> 00:32:58,000
The the event is that we, whatever the thing is that we're going to

531
00:32:58,000 --> 00:32:58,700
draw.

532
00:32:58,700 --> 00:32:59,700
We would look

533
00:33:00,000 --> 00:33:01,500
Inside the frame, array.

534
00:33:03,700 --> 00:33:08,300
And we would get out the most recent event from the frame array, and

535
00:33:08,300 --> 00:33:08,900
that's it.

536
00:33:10,600 --> 00:33:11,200
So yeah.

537
00:33:12,800 --> 00:33:18,500
What this part is doing now is well, this part is what we were working

538
00:33:18,500 --> 00:33:21,100
on before, so I'm going to skip over that for just a second.

539
00:33:24,000 --> 00:33:24,900
And let's go down here.

540
00:33:24,900 --> 00:33:28,800
Okay, so now in this code where we're sort of going through and

541
00:33:28,800 --> 00:33:33,000
drawing this, this debug tree, I'm going to say that for draw, debug

542
00:33:33,000 --> 00:33:34,200
draw main menu.

543
00:33:34,300 --> 00:33:38,500
I'm going to say for now, we'll just say that the frame ordinal that

544
00:33:38,500 --> 00:33:43,200
we're using, is going to be the debug State, like, you know, Kurt,

545
00:33:43,200 --> 00:33:48,000
whatever that current ordinal is, so whatever, the one that's next

546
00:33:48,000 --> 00:33:48,500
free.

547
00:33:55,600 --> 00:33:58,600
We don't want to draw that because that's the one replacing the most

548
00:33:58,600 --> 00:34:02,700
recent frame, is going to be the one behind that one, right?

549
00:34:02,700 --> 00:34:06,900
So what we're going to want to do is say, you know, go One backwards.

550
00:34:08,300 --> 00:34:12,100
And then clip to the debug frame count, that's going to be that that

551
00:34:12,100 --> 00:34:16,199
next frame and we'll clean this up a little bit in a second after I

552
00:34:16,199 --> 00:34:19,300
sort of make sure everything is working okay with sort of where we're

553
00:34:19,300 --> 00:34:22,600
going to get that information from because I think this will once we

554
00:34:22,600 --> 00:34:25,000
do this change will also be able to introduce like maybe a little

555
00:34:25,000 --> 00:34:29,000
scrub bar that can scrub back, you know, sort of a little time

556
00:34:29,000 --> 00:34:32,800
scrubber that would allow us to kind of go back to two previous frames

557
00:34:32,800 --> 00:34:35,699
back and and see what's going on, right?

558
00:34:37,199 --> 00:34:38,400
So yeah.

559
00:34:38,400 --> 00:34:41,300
So this is going to draw via the frame ordinal.

560
00:34:43,500 --> 00:34:46,900
When we're interacting with things here is our interaction.

561
00:34:47,100 --> 00:34:51,199
I assume we're always when we're you know what I mean?

562
00:34:51,600 --> 00:34:56,900
Let's let's just do this even right now to make sure that we don't

563
00:34:56,900 --> 00:34:58,200
have to keep typing it all in place.

564
00:34:58,700 --> 00:35:02,000
In addition to the next free frame we'll just do most recent frame

565
00:35:02,000 --> 00:35:03,000
ordinal here.

566
00:35:05,000 --> 00:35:08,200
Which is basically the same thing but we'll just make sure we keep it

567
00:35:08,200 --> 00:35:11,100
updated so that people can reference it when they care.

568
00:35:12,400 --> 00:35:17,700
So really this is just going to be frames.

569
00:35:19,700 --> 00:35:20,600
You back States?

570
00:35:21,200 --> 00:35:22,500
Most recent frame word?

571
00:35:22,500 --> 00:35:22,900
No.

572
00:35:24,700 --> 00:35:26,000
And I guess we could also do this.

573
00:35:30,700 --> 00:35:31,100
Oops.

574
00:35:36,800 --> 00:35:38,400
And that.

575
00:35:40,000 --> 00:35:40,800
Is that?

576
00:35:43,400 --> 00:35:45,700
And it's the same thing in here, right?

577
00:35:45,700 --> 00:35:46,900
So, this is also,

578
00:35:50,500 --> 00:35:56,400
either State most recent frame ordinal and

579
00:36:10,100 --> 00:36:12,600
And this is when we're interacting.

580
00:36:12,800 --> 00:36:14,500
So again exactly the same

581
00:36:25,500 --> 00:36:26,600
Don't remember what I called.

582
00:36:26,600 --> 00:36:33,100
I think I called it for ordinal traction, element frames.

583
00:36:45,600 --> 00:36:56,000
All right, and it's true the most recent frame, all of these will be

584
00:36:56,000 --> 00:36:57,200
fixed in a second.

585
00:36:57,600 --> 00:36:59,400
So let's see.

586
00:36:59,500 --> 00:37:01,100
Oldest event.

587
00:37:02,000 --> 00:37:03,700
So this is the free encode.

588
00:37:03,900 --> 00:37:06,900
So, in the free encode we can basically keep the same other.

589
00:37:06,900 --> 00:37:09,600
The free and code could be made a little bit simpler now.

590
00:37:10,700 --> 00:37:15,100
But yeah, so what we would do here when we Loop over these elements,

591
00:37:15,400 --> 00:37:18,600
And we're going to free an event.

592
00:37:18,700 --> 00:37:22,000
We wouldn't really do it quite the way that we're doing it here

593
00:37:22,100 --> 00:37:22,500
instead.

594
00:37:22,500 --> 00:37:25,300
What we do is say, well, while the

595
00:37:28,600 --> 00:37:33,400
We would want to go to whatever the next free frame was.

596
00:37:33,400 --> 00:37:35,100
Whatever the frame is that we're freeing.

597
00:37:36,700 --> 00:37:38,000
We would want to sort of

598
00:37:40,400 --> 00:37:44,700
free the entire set of stuff in that element under that frames

599
00:37:44,700 --> 00:37:45,300
ordinal.

600
00:37:45,500 --> 00:37:49,200
So instead of doing it this way, we would pass the frame ordinal.

601
00:37:49,200 --> 00:37:53,600
Here we would then say like okay if we're going to free that we don't

602
00:37:53,600 --> 00:37:56,200
need to free this stuff at.

603
00:37:56,200 --> 00:37:57,100
All right.

604
00:37:57,200 --> 00:38:00,100
We do in fact don't even need a free list for frames anymore.

605
00:38:02,100 --> 00:38:02,700
Which is nice.

606
00:38:02,700 --> 00:38:06,400
I just eliminate some code for us, like, that's just gone.

607
00:38:09,400 --> 00:38:12,400
And instead, all we need to do is say, alright when we free the frame,

608
00:38:12,600 --> 00:38:13,700
we go through cure.

609
00:38:14,200 --> 00:38:20,800
And for each element, we just eliminate all of the things that were in

610
00:38:20,800 --> 00:38:21,000
there.

611
00:38:21,000 --> 00:38:28,000
So, essentially, while element frames frame ordinal, oldest event is

612
00:38:28,000 --> 00:38:29,100
equal to something.

613
00:38:29,500 --> 00:38:33,900
Like while, there's anything in there, we're basically going to remove

614
00:38:33,900 --> 00:38:35,600
that element, right?

615
00:38:36,200 --> 00:38:39,000
So we're going to say this guy is the guy to

616
00:38:40,000 --> 00:38:42,500
It will then move across.

617
00:38:45,600 --> 00:38:47,600
I should probably figure out.

618
00:38:47,700 --> 00:38:48,500
Guess debug.

619
00:38:48,500 --> 00:38:49,600
Element frame.

620
00:38:51,000 --> 00:38:51,700
Element frame.

621
00:38:53,900 --> 00:38:55,200
Probably do this, right?

622
00:38:58,300 --> 00:38:59,800
so, when I say element frame oldest,

623
00:39:00,000 --> 00:39:07,400
And we're going to go ahead and free it and move the that pointer for

624
00:39:07,400 --> 00:39:07,900
words.

625
00:39:13,000 --> 00:39:16,800
And I don't think we really care about this part at all because this

626
00:39:16,900 --> 00:39:20,400
whole thing is getting eliminated if that makes sense.

627
00:39:22,800 --> 00:39:24,400
So none of this matters anymore.

628
00:39:25,200 --> 00:39:27,500
So the only thing that we really need to do is make sure that that one

629
00:39:27,500 --> 00:39:30,500
gets put on the DL allocation list.

630
00:39:31,800 --> 00:39:35,700
So, that flushes out that whole thing, and that's it.

631
00:39:36,600 --> 00:39:38,600
So now, when we call free oldest frame,

632
00:39:41,000 --> 00:39:43,700
Which we're going to have to change the criteria for, but when we call

633
00:39:43,700 --> 00:39:49,100
free oldest frame, what we would do is instead of doing this at all.

634
00:39:51,300 --> 00:39:52,400
What we want to do.

635
00:39:59,300 --> 00:40:03,300
Is simply take that next free frame?

636
00:40:04,000 --> 00:40:05,400
Because next three frame.

637
00:40:08,200 --> 00:40:10,200
In fact, really, we don't really need this function.

638
00:40:10,700 --> 00:40:14,700
Free oldest frame is probably not necessary because free oldest frame

639
00:40:14,700 --> 00:40:17,000
like all this stuff where it's got next part and stuff, where do we

640
00:40:17,000 --> 00:40:18,500
don't have to deal with any of that anymore?

641
00:40:18,500 --> 00:40:19,400
That's just done.

642
00:40:19,700 --> 00:40:21,000
So really all that has to happen.

643
00:40:21,000 --> 00:40:23,600
Is we just have to call free frame on the slot that we're going to put

644
00:40:23,600 --> 00:40:24,300
stuff into.

645
00:40:26,000 --> 00:40:29,700
And when we call new frame, whatever we call that.

646
00:40:29,900 --> 00:40:31,200
That's actually

647
00:40:39,100 --> 00:40:44,300
Making a new frame is really just taking the collation frame, putting

648
00:40:44,300 --> 00:40:48,000
it into wherever the slot is.

649
00:40:48,000 --> 00:40:49,300
That is the next frame.

650
00:40:49,300 --> 00:40:52,400
We should place in our array in this array here, right?

651
00:40:52,400 --> 00:40:53,800
We're just writing through that.

652
00:40:53,800 --> 00:40:55,800
It's like a circular buffer frames.

653
00:40:57,200 --> 00:41:00,200
So we never like allocate a new frame.

654
00:41:00,500 --> 00:41:04,900
All we're doing instead is just freeing the old frame that was in that

655
00:41:04,900 --> 00:41:07,000
slot and replacing it with a new one.

656
00:41:07,700 --> 00:41:13,500
And so new frame is really the wrong phrase here, it just be called,

657
00:41:13,500 --> 00:41:19,500
emit frame would really be it and whenever we were calling that we

658
00:41:19,500 --> 00:41:23,000
would need a way of saying, I want to replace what's in a slot.

659
00:41:23,500 --> 00:41:26,500
So we just kind of have to, we just have to do that.

660
00:41:26,600 --> 00:41:27,800
That's, that's really it.

661
00:41:29,500 --> 00:41:33,300
So I'm going to change this to be in it frame.

662
00:41:34,700 --> 00:41:38,200
And that's going to not do any of this stuff anymore.

663
00:41:38,200 --> 00:41:40,000
This is all gone, right?

664
00:41:40,000 --> 00:41:42,400
This is all not a thing anymore.

665
00:41:42,800 --> 00:41:44,800
All we really need is this

666
00:41:46,600 --> 00:41:50,400
and it's going to take whatever the debug frame is that it should

667
00:41:50,400 --> 00:41:53,300
initialize and this is it's going to initialize it like this.

668
00:41:55,400 --> 00:41:58,400
So then I'm going to take a look at what we actually call that.

669
00:41:58,400 --> 00:41:59,200
Does that

670
00:42:03,000 --> 00:42:04,500
Doesn't actually need to return anything there.

671
00:42:04,800 --> 00:42:07,200
And this code, I suppose I should just

672
00:42:08,700 --> 00:42:09,800
Nuke for a minute.

673
00:42:16,600 --> 00:42:17,100
So,

674
00:42:19,300 --> 00:42:22,700
when we go to store an event, we're just going to have to assert on

675
00:42:22,700 --> 00:42:23,900
this for the moment.

676
00:42:24,500 --> 00:42:29,300
So, we're just going to have to say, like invalid code path here.

677
00:42:29,900 --> 00:42:32,800
So, like, if we run out of memory, now, there's not a whole lot, we

678
00:42:32,800 --> 00:42:33,300
could do.

679
00:42:33,300 --> 00:42:34,400
I, well, you know what?

680
00:42:34,400 --> 00:42:35,400
I suppose that's not true.

681
00:42:35,600 --> 00:42:37,400
We could start freeing old frames.

682
00:42:37,400 --> 00:42:41,500
If we run out of memory, we could free old frames faster than we,

683
00:42:41,500 --> 00:42:42,900
otherwise would have had to.

684
00:42:44,200 --> 00:42:45,800
So, I suppose that's fine.

685
00:42:46,600 --> 00:42:48,900
So maybe I should think about that a little.

686
00:42:49,000 --> 00:42:49,400
It more.

687
00:42:49,400 --> 00:42:52,000
So if I did do that, right?

688
00:42:53,600 --> 00:42:58,800
Then we would just say, well, okay, you know, there's there's the next

689
00:42:58,800 --> 00:43:02,700
free frame and the most recent frame ordinal, I can actually Advance

690
00:43:02,700 --> 00:43:04,200
these two things separately.

691
00:43:04,200 --> 00:43:06,100
If that was what I wanted to do.

692
00:43:07,200 --> 00:43:10,800
So when I saw your event, if there isn't room, I suppose I can just do

693
00:43:13,100 --> 00:43:17,000
You know, reintroduce, this function and instead of it moving a free

694
00:43:17,000 --> 00:43:20,500
list around all, it will do is just advance that that thing forward,

695
00:43:20,800 --> 00:43:21,300
right?

696
00:43:23,700 --> 00:43:25,200
So I'll give it a shot.

697
00:43:28,600 --> 00:43:29,200
Yeah.

698
00:43:29,700 --> 00:43:32,800
And in fact I guess I it's really just we don't even really need to

699
00:43:32,800 --> 00:43:33,200
write that.

700
00:43:33,300 --> 00:43:34,100
It's just whatever.

701
00:43:34,100 --> 00:43:35,500
The next free frame was.

702
00:43:37,000 --> 00:43:39,700
It's just going to free that and Advance it.

703
00:43:43,800 --> 00:43:45,300
In fact, I could even just do it like this.

704
00:43:51,000 --> 00:43:51,900
Because that's all it's doing.

705
00:43:51,900 --> 00:43:55,300
It's just going to say alright move the free frame pointer forwards

706
00:43:56,000 --> 00:43:56,800
and off you go.

707
00:43:57,100 --> 00:43:59,500
And I suppose also

708
00:44:01,300 --> 00:44:04,200
This needs to be wrapped, right?

709
00:44:04,300 --> 00:44:06,400
Meaning, debug state.

710
00:44:06,900 --> 00:44:07,800
Next three frame.

711
00:44:10,500 --> 00:44:12,800
Needs to be wrapped to the debug frame count.

712
00:44:19,900 --> 00:44:20,200
Yeah.

713
00:44:21,300 --> 00:44:21,600
Okay.

714
00:44:21,600 --> 00:44:26,800
So now what's going on?

715
00:44:27,800 --> 00:44:29,300
I'm not entirely sure.

716
00:44:30,000 --> 00:44:30,800
Frame index.

717
00:44:30,800 --> 00:44:31,700
Equals debug State.

718
00:44:31,700 --> 00:44:32,200
Collation.

719
00:44:32,200 --> 00:44:33,500
Frame frame index.

720
00:44:37,700 --> 00:44:40,100
That actually doesn't seem bad.

721
00:44:40,100 --> 00:44:41,200
What's the problem with that?

722
00:44:42,900 --> 00:44:45,000
Ah, just that

723
00:44:47,500 --> 00:44:50,100
so, all of these really are going to be dots

724
00:44:51,600 --> 00:44:52,300
Which is fine.

725
00:44:56,300 --> 00:44:59,600
And then the element, whatever the element was is going to have to use

726
00:44:59,600 --> 00:44:59,700
the

727
00:45:00,000 --> 00:45:02,000
Ordinal that we're trying to store.

728
00:45:06,000 --> 00:45:06,600
Right.

729
00:45:09,900 --> 00:45:15,800
And so, I suppose the collation frame has to actually be a slot.

730
00:45:19,000 --> 00:45:24,400
So really this ends up being you 32 collating frame ordinal.

731
00:45:28,600 --> 00:45:33,200
So here is the framework, collating here is the most recent frame,

732
00:45:33,200 --> 00:45:34,900
which is the one that we finish collating.

733
00:45:35,700 --> 00:45:38,800
And then here is the one that's that's actually free.

734
00:45:42,000 --> 00:45:43,300
Which I suppose.

735
00:45:50,600 --> 00:45:53,200
I guess this is actually the oldest frame ordinal.

736
00:45:54,900 --> 00:45:57,300
So, all of these would start out at zero.

737
00:45:59,100 --> 00:46:01,200
And most recent frame ordinal and oldest frame.

738
00:46:01,200 --> 00:46:05,100
Ordinal would actually be probably zero and then cooling framework.

739
00:46:05,100 --> 00:46:11,300
Noble start out as one if that makes sense and then we would need to

740
00:46:11,300 --> 00:46:13,000
move these things forward.

741
00:46:16,600 --> 00:46:20,400
so anytime we went to store an event, we might have to make room

742
00:46:22,400 --> 00:46:23,000
so yeah.

743
00:46:24,100 --> 00:46:28,000
So I'll make this a thing Creole just frame.

744
00:46:35,700 --> 00:46:36,000
Go.

745
00:46:37,300 --> 00:46:38,600
There's the debug State.

746
00:46:41,100 --> 00:46:42,300
And in here, it's a weed-free.

747
00:46:42,300 --> 00:46:46,600
This Frame, it would go away and

748
00:46:51,200 --> 00:46:52,000
That would be fine.

749
00:46:52,300 --> 00:46:55,500
We want to make sure that we're never feeling freeing the collating

750
00:46:55,500 --> 00:46:56,100
frame.

751
00:46:56,700 --> 00:46:59,600
If that was the case, then we've catastrophically run out of memory.

752
00:46:59,600 --> 00:47:02,600
We can't even, we wouldn't even have enough memory to store one frame

753
00:47:03,700 --> 00:47:07,400
and that seems like just a bug, like, you don't really ever want that.

754
00:47:07,400 --> 00:47:08,200
I don't think.

755
00:47:11,800 --> 00:47:13,300
Doesn't, there we go.

756
00:47:14,000 --> 00:47:17,400
So make sure the oldest frame is not equal to the collating frame.

757
00:47:19,800 --> 00:47:20,400
Right.

758
00:47:26,300 --> 00:47:26,700
Oops.

759
00:47:27,700 --> 00:47:30,000
Collation Frank ordinal.

760
00:47:32,000 --> 00:47:35,500
So if the collation frame ordinal, if those aren't equal, then we can

761
00:47:35,500 --> 00:47:37,000
move it forwards, just fine.

762
00:47:37,600 --> 00:47:43,000
And what I'd also like to do is say, well, okay, after we free that,

763
00:47:43,500 --> 00:47:44,700
I'd like to check out.

764
00:47:44,700 --> 00:47:48,500
If the, if the collation frame I'm sorry if the oldest frame.

765
00:47:49,000 --> 00:47:53,200
Ordinal happens to be equal to the most recent frame ordinal.

766
00:48:00,000 --> 00:48:03,400
I need to increment the most recent frame ordinal as well because it

767
00:48:03,400 --> 00:48:04,400
just got deleted.

768
00:48:04,900 --> 00:48:07,800
In either case, I have to do the oldest frame ordinal.

769
00:48:09,600 --> 00:48:11,800
And then we just need them to be modded.

770
00:48:13,200 --> 00:48:16,700
And what I could do is like increment frame, ordinal.

771
00:48:18,500 --> 00:48:20,300
So that that's always going to happen.

772
00:48:22,800 --> 00:48:24,600
so essentially there's just like,

773
00:48:30,200 --> 00:48:31,400
No matter what we're doing.

774
00:48:33,000 --> 00:48:34,600
It's going to be like, ordinal.

775
00:48:36,900 --> 00:48:42,400
Is going to be incremented or I guess I could do equals for Dan'l plus

776
00:48:42,400 --> 00:48:42,900
one.

777
00:48:45,100 --> 00:48:48,500
Mod Max debug frame count.

778
00:48:53,800 --> 00:48:55,200
That seems fair.

779
00:48:56,800 --> 00:48:59,900
I think so.

780
00:48:59,900 --> 00:49:00,400
Yeah.

781
00:49:00,400 --> 00:49:03,800
So this is going to be most recent frame.

782
00:49:09,000 --> 00:49:11,700
And these have to be addresses.

783
00:49:15,700 --> 00:49:17,400
Collation frame.

784
00:49:19,500 --> 00:49:22,400
So whatever this framing this is going to be, it's just a collation

785
00:49:22,400 --> 00:49:23,200
frame ordinal.

786
00:49:27,300 --> 00:49:27,900
Right?

787
00:49:29,100 --> 00:49:32,500
Unless we're trying to store the absolute frame index there.

788
00:49:33,800 --> 00:49:35,200
I guess technically we are

789
00:49:37,000 --> 00:49:37,800
Probably.

790
00:49:39,600 --> 00:49:41,400
so, this would actually be

791
00:49:48,200 --> 00:49:48,700
That.

792
00:49:50,400 --> 00:49:53,100
Not that anyone cares anyway.

793
00:49:55,600 --> 00:49:57,300
And I suppose we could do this as well.

794
00:50:10,300 --> 00:50:12,000
Just so it's easy to get.

795
00:50:13,000 --> 00:50:13,800
What that is?

796
00:50:29,000 --> 00:50:30,600
Let's see here.

797
00:50:34,600 --> 00:50:35,700
so, this

798
00:50:38,000 --> 00:50:39,000
Right here.

799
00:50:44,200 --> 00:50:45,200
And there's two different ways.

800
00:50:45,200 --> 00:50:48,600
I could do this, I could just leave it the same as it is now.

801
00:50:53,100 --> 00:50:56,100
And I'm not sure how I want to do that, right?

802
00:50:56,100 --> 00:50:58,300
Because the other thing I could do is just make it so that every time

803
00:50:58,300 --> 00:50:59,600
we increment that we also

804
00:51:00,000 --> 00:51:01,000
Pointer in there.

805
00:51:01,000 --> 00:51:02,400
Which points to the correct one?

806
00:51:03,700 --> 00:51:04,900
I'm not sure how I feel about that.

807
00:51:04,900 --> 00:51:07,400
I'm going to do it this way for now, but maybe that's a bad idea.

808
00:51:25,200 --> 00:51:25,700
All right.

809
00:51:31,100 --> 00:51:31,900
So let's see.

810
00:51:33,400 --> 00:51:38,100
So in now that we actually know which frame ordinal were on for the

811
00:51:38,100 --> 00:51:44,100
coding frame, we can just do a thing where we treat this and I guess

812
00:51:44,100 --> 00:51:46,100
we can just say, debug element frame.

813
00:51:50,300 --> 00:51:57,100
I am equals element frames, plus whatever the current debug collation

814
00:51:57,100 --> 00:51:58,000
ordinal is.

815
00:52:02,200 --> 00:52:06,200
And then we would just say frame, most recent event.

816
00:52:08,000 --> 00:52:08,500
Rame.

817
00:52:10,000 --> 00:52:12,600
Frame frame.

818
00:52:14,600 --> 00:52:19,100
Like so, yeah, what else though?

819
00:52:20,700 --> 00:52:21,600
Let's see here.

820
00:52:21,600 --> 00:52:23,600
So get element from event.

821
00:52:24,000 --> 00:52:26,100
That's initializing this.

822
00:52:29,300 --> 00:52:31,000
For a particular element.

823
00:52:31,400 --> 00:52:36,500
And I feel like that's just going to have to clear out all of those

824
00:52:36,500 --> 00:52:39,300
frames unfortunately, on the first time through.

825
00:52:39,600 --> 00:52:44,600
So what I might do is do we have when we do a push struct, we can

826
00:52:44,600 --> 00:52:46,100
clear, right?

827
00:52:46,100 --> 00:52:48,600
So I think I might just appeal to that.

828
00:52:52,500 --> 00:52:53,700
Here on push direct.

829
00:52:55,500 --> 00:52:57,100
We can do.

830
00:53:01,400 --> 00:53:03,400
I guess we cleared a 0 by default.

831
00:53:04,600 --> 00:53:09,000
Right, the default Arena params article are so actually this is just

832
00:53:09,000 --> 00:53:11,200
redundant that doesn't actually need to happen at all.

833
00:53:13,300 --> 00:53:20,000
So inside our collation stuff, this is not super necessary at the

834
00:53:20,000 --> 00:53:24,300
moment actually because that's always going to be set to something.

835
00:53:24,300 --> 00:53:25,000
I didn't it time.

836
00:53:25,000 --> 00:53:28,600
We'll have to set it and then it'll always have to be valid.

837
00:53:28,800 --> 00:53:30,900
So this doesn't actually need to occur at all.

838
00:53:33,300 --> 00:53:34,000
And that's fine.

839
00:53:35,400 --> 00:53:36,300
Neither does this.

840
00:53:37,100 --> 00:53:40,900
So what we would want to do here is at the frame marker.

841
00:53:45,500 --> 00:53:48,000
Where do we actually move this guy forward?

842
00:53:58,300 --> 00:53:59,600
Not till the very end.

843
00:54:01,600 --> 00:54:03,600
Basically we move it forwards right here.

844
00:54:06,200 --> 00:54:06,900
So that's fine.

845
00:54:09,100 --> 00:54:10,300
All right, so

846
00:54:15,200 --> 00:54:16,000
we don't need this.

847
00:54:17,400 --> 00:54:22,700
And I assume we can just sort of sadiebug frame relation frame equals

848
00:54:23,100 --> 00:54:27,900
get collation, frame cubic State and then all of this code can be a

849
00:54:27,900 --> 00:54:29,200
little bit nicer, right?

850
00:54:29,200 --> 00:54:33,500
It could just say like okay let's make sure all of these.

851
00:54:39,500 --> 00:54:42,000
Are accessing off of that so they don't have to keep going through

852
00:54:42,000 --> 00:54:44,200
debug state for no reason at all.

853
00:54:47,500 --> 00:54:48,700
Frame bar scale.

854
00:54:48,700 --> 00:54:50,400
I don't care about any of this.

855
00:54:50,900 --> 00:54:53,000
This is not relevant.

856
00:54:54,300 --> 00:54:56,000
We do that in the profile stuff.

857
00:54:56,000 --> 00:54:56,300
Now

858
00:54:59,400 --> 00:55:03,500
I don't think this is necessarily the appropriate Place For Paws,

859
00:55:03,900 --> 00:55:09,900
actually, so I'm pretty sure that that is going to go away.

860
00:55:14,900 --> 00:55:15,900
Let's go through here.

861
00:55:19,300 --> 00:55:21,000
This stuff doesn't need to happen anymore.

862
00:55:23,300 --> 00:55:27,100
This does because that's sort of how many frames total.

863
00:55:27,100 --> 00:55:29,100
There's been, right?

864
00:55:32,100 --> 00:55:37,100
Although there was something about like, total frame count and frame

865
00:55:37,100 --> 00:55:40,800
counts and we really are only we just want Total frame count, I think.

866
00:55:41,900 --> 00:55:44,600
So that's really it, that's actually much nicer.

867
00:55:44,600 --> 00:55:48,400
Now that's actually much simpler and then when we do this stuff we

868
00:55:48,400 --> 00:55:51,400
have to do a frame Advance, right?

869
00:55:51,400 --> 00:55:56,800
So we have to now do a knit frame on the new Coalition frame.

870
00:55:56,800 --> 00:55:59,800
So basically what we have to do is say collation, frame equals get

871
00:55:59,800 --> 00:56:00,600
pollution frame.

872
00:56:03,500 --> 00:56:06,500
And then we would need to do an in it frame on that collation frame.

873
00:56:08,200 --> 00:56:10,700
And right here.

874
00:56:13,800 --> 00:56:17,400
Before we did that, we'd have to move the frame.

875
00:56:17,500 --> 00:56:22,300
You know, move the marker for words for the collation frame and if

876
00:56:22,300 --> 00:56:27,900
that Coalition frame were to hit the oldest frame ordinal, we would

877
00:56:27,900 --> 00:56:30,400
need to delete the oldest frame ordinal.

878
00:56:30,600 --> 00:56:33,400
So what we need to do is say like you know increment, the frame

879
00:56:33,400 --> 00:56:34,000
ordinal.

880
00:56:36,600 --> 00:56:40,400
For whatever our the frame is that we're collating at the moment,

881
00:56:40,900 --> 00:56:41,500
right?

882
00:56:42,400 --> 00:56:49,000
We would also want to say that the debug State most recent frame is

883
00:56:49,000 --> 00:56:52,300
now this one because we just finished collating it, right?

884
00:56:52,300 --> 00:56:54,900
So it's done collating and it's now the most recent one and then

885
00:56:54,900 --> 00:56:58,400
finally we would need to say if we now ran up against.

886
00:56:58,600 --> 00:56:59,800
So if our if our

887
00:57:00,000 --> 00:57:02,500
relation frame ordinal, is now equal to

888
00:57:04,400 --> 00:57:07,700
Whatever the oldest frame ordinal was, we need to delete the oldest

889
00:57:07,700 --> 00:57:08,100
frame.

890
00:57:09,200 --> 00:57:10,400
And move that forward.

891
00:57:12,200 --> 00:57:14,400
To make room because we're about to start writing into it.

892
00:57:16,200 --> 00:57:17,000
That makes sense.

893
00:57:21,000 --> 00:57:25,300
Now, the only problem is I kind of did that in the wrong order, in the

894
00:57:25,300 --> 00:57:27,400
sense, I don't really want to increment yet.

895
00:57:27,400 --> 00:57:33,600
I want to increment after so that I kind of wanted to say is I want to

896
00:57:33,600 --> 00:57:36,000
do the wrapped version of this thing.

897
00:57:38,300 --> 00:57:41,100
I mean you can kind of see what the problem is.

898
00:57:41,400 --> 00:57:46,400
It's that are assertions going to fire, I'll show you what I mean.

899
00:57:54,100 --> 00:57:58,400
This is going to fire because it's exactly what happened, right?

900
00:57:59,600 --> 00:58:00,500
And

901
00:58:04,300 --> 00:58:07,200
I'm tempted to just get rid of it and say the heck with it.

902
00:58:08,800 --> 00:58:11,700
So that it's called I like the calling it that way a little bit better

903
00:58:11,700 --> 00:58:13,700
but we'll see that might come back to bite me.

904
00:58:14,600 --> 00:58:17,300
All right so here's our Co ladybug records again.

905
00:58:18,300 --> 00:58:21,600
Now we have to deal with just this part here where we're not doing a

906
00:58:21,600 --> 00:58:22,400
frame marker.

907
00:58:22,700 --> 00:58:23,600
This is again.

908
00:58:23,600 --> 00:58:24,800
Also pretty trivial.

909
00:58:24,800 --> 00:58:28,800
I think we just grab it out and then wherever we were going to use

910
00:58:28,800 --> 00:58:29,700
collation frame.

911
00:58:29,900 --> 00:58:34,500
We can now just get rid of the debug, the part with the debug state.

912
00:58:34,500 --> 00:58:38,000
In fact, I could probably just do debug State relation frame becomes

913
00:58:38,100 --> 00:58:39,200
Collation frame.

914
00:58:40,500 --> 00:58:41,000
Like so.

915
00:58:46,000 --> 00:58:49,500
No, that just undo them all.

916
00:58:52,500 --> 00:58:53,200
I hope not.

917
00:58:54,900 --> 00:58:57,000
Maybe didn't I don't know what it did.

918
00:58:57,300 --> 00:58:57,800
I don't care.

919
00:58:58,100 --> 00:58:58,600
Anyway.

920
00:59:00,600 --> 00:59:03,600
So, let's see, debug State frame count.

921
00:59:05,700 --> 00:59:07,300
Oh, I did it backwards.

922
00:59:07,300 --> 00:59:08,600
I did it backwards.

923
00:59:08,600 --> 00:59:10,800
I did the replace backwards because I'm stupid.

924
00:59:11,500 --> 00:59:12,700
That's what actually happened.

925
00:59:14,000 --> 00:59:15,100
Yeah, let's try that again.

926
00:59:15,100 --> 00:59:17,600
What I wanted was debug State collation.

927
00:59:17,600 --> 00:59:20,200
Frame just becomes collation frame.

928
00:59:21,600 --> 00:59:22,900
That's what I wanted.

929
00:59:23,400 --> 00:59:24,900
I just did it backwards.

930
00:59:29,400 --> 00:59:29,800
Okay.

931
00:59:31,200 --> 00:59:32,200
Okay.

932
00:59:32,900 --> 00:59:33,800
Much better.

933
00:59:37,100 --> 00:59:39,400
So, now we still have this Frame count situation.

934
00:59:40,800 --> 00:59:43,700
I don't really know what this Frame index is supposed to do.

935
00:59:48,100 --> 00:59:49,000
Really honest with you.

936
00:59:50,700 --> 00:59:52,800
But I think it should just be total frame count.

937
01:00:01,700 --> 01:00:03,100
And let's see what else we got.

938
01:00:04,700 --> 01:00:09,200
This is all nonsense and we don't care about any of it.

939
01:00:10,200 --> 01:00:13,000
So what we actually want to do now is we want to initialize this

940
01:00:13,000 --> 01:00:15,400
stuff, the way that I said that we wanted to.

941
01:00:16,000 --> 01:00:19,100
So we've got these ordinals and they should be set up properly.

942
01:00:19,400 --> 01:00:23,700
So what we want to do is say that the most recent frame is zero--.

943
01:00:24,200 --> 01:00:29,300
The collation frame is actually going to be frame 1 and the oldest

944
01:00:29,300 --> 01:00:32,600
frame ordinal is going to be frame 0.

945
01:00:36,300 --> 01:00:37,500
I think that's what I want.

946
01:00:39,100 --> 01:00:41,500
This is now irrelevant.

947
01:00:41,500 --> 01:00:45,600
The if statement doesn't have to happen anymore because we always have

948
01:00:45,600 --> 01:00:47,100
a frame, we can look at.

949
01:00:48,000 --> 01:00:51,200
So what I could do is say, well, there is a debug frame.

950
01:00:51,200 --> 01:00:53,800
That's the most recent frame, if that's what you want.

951
01:00:53,800 --> 01:00:59,700
That frame is just going to be the debug State frames array, plus the

952
01:00:59,700 --> 01:01:02,000
debug State, most recent frame ordinal,

953
01:01:03,300 --> 01:01:05,900
And you can go ahead and print that to your heart's content.

954
01:01:12,100 --> 01:01:15,300
I don't know why the indentation in for a coder gets so confused.

955
01:01:15,300 --> 01:01:16,000
Sometimes.

956
01:01:18,000 --> 01:01:22,000
It doesn't seem to know about like how to close the parentheses or

957
01:01:22,000 --> 01:01:22,400
something.

958
01:01:22,400 --> 01:01:29,100
It's I need to get back to Allen on a couple things.

959
01:01:29,100 --> 01:01:33,600
It's my fault actually that I have not been backed up on communicates.

960
01:01:34,000 --> 01:01:38,400
I owe him some email so but that's it.

961
01:01:38,400 --> 01:01:41,800
I mean that's all this has to do so we can just get rid of this,

962
01:01:42,300 --> 01:01:42,900
right?

963
01:01:47,700 --> 01:01:52,000
Yeah, now I feel like there's some things, we are probably still

964
01:01:52,000 --> 01:01:56,100
forgetting, so I doubt this is going to work, but at least we got most

965
01:01:56,100 --> 01:01:57,900
of it done and that's fine.

966
01:02:00,300 --> 01:02:04,000
Of course, famous last words, it actually did sort of work this we

967
01:02:04,000 --> 01:02:05,500
obviously, if Stir It Out,

968
01:02:08,600 --> 01:02:09,800
Is this all working?

969
01:02:10,200 --> 01:02:11,100
Got to be kidding me.

970
01:02:13,500 --> 01:02:14,200
Okay.

971
01:02:16,200 --> 01:02:22,500
well, I guess that worked somehow, let's see what happens when we Peg

972
01:02:22,500 --> 01:02:22,900
the

973
01:02:25,600 --> 01:02:26,400
frame.

974
01:02:28,900 --> 01:02:30,000
Size stuff.

975
01:02:31,700 --> 01:02:33,100
Let's see if we crash and burn.

976
01:02:37,900 --> 01:02:40,200
Yeah, that's going to say.

977
01:02:40,700 --> 01:02:42,200
I would be surprised.

978
01:02:44,900 --> 01:02:46,200
We didn't Crash and Burn.

979
01:02:49,500 --> 01:02:51,600
So, where did we crash and burn at?

980
01:02:52,600 --> 01:02:53,400
Exactly.

981
01:03:02,100 --> 01:03:04,100
Of course, that might just be.

982
01:03:24,100 --> 01:03:27,700
That might just be some stupidity with this, which is probably true.

983
01:03:28,100 --> 01:03:30,600
So we've gone through a bunch of frames.

984
01:03:30,600 --> 01:03:33,200
The most recent frame is 252.

985
01:03:34,000 --> 01:03:35,800
The collation frame is 137.

986
01:03:35,800 --> 01:03:38,600
The oldest frame is also 252.

987
01:03:40,800 --> 01:03:42,200
That doesn't make any sense at all.

988
01:03:43,500 --> 01:03:44,200
Nope.

989
01:03:44,600 --> 01:03:46,400
Does not make any sense.

990
01:03:47,800 --> 01:03:50,100
And then they just both keep incrementing up, huh?

991
01:03:53,900 --> 01:03:56,900
Yeah, so that's complete nonsense.

992
01:03:57,700 --> 01:04:00,100
Just in case anyone was wondering.

993
01:04:02,300 --> 01:04:04,000
I'm gonna go ahead and set a breakpoint there.

994
01:04:08,600 --> 01:04:10,400
And I want to see what this is set to now.

995
01:04:11,400 --> 01:04:15,300
So we let it run, we've gotten a frame 255, which is what we would

996
01:04:15,300 --> 01:04:15,800
expect.

997
01:04:15,800 --> 01:04:19,700
We're collating on frame 0 and that was the oldest frame.

998
01:04:19,700 --> 01:04:20,900
So now we have to advance it.

999
01:04:20,900 --> 01:04:22,200
So I just want to see what happens.

1000
01:04:22,200 --> 01:04:26,500
We go into free frame, free frames going to come through here and find

1001
01:04:26,500 --> 01:04:31,600
any elements that are on frame 0, which is what I would want it to do

1002
01:04:31,900 --> 01:04:32,100
here.

1003
01:04:32,100 --> 01:04:33,300
It's got some.

1004
01:04:33,300 --> 01:04:35,200
Let's see there, any events.

1005
01:04:35,200 --> 01:04:37,600
There, there are no events on frames are apparently.

1006
01:04:38,000 --> 01:04:41,300
So, it doesn't actually have anything to free ever get in here.

1007
01:04:42,800 --> 01:04:46,000
It doesn't so it's can actually free anything here because there's

1008
01:04:46,000 --> 01:04:49,300
nothing actually on frame 0, which is actually correct frame 0 would

1009
01:04:49,300 --> 01:04:49,800
be empty.

1010
01:04:49,800 --> 01:04:52,200
Because frame one was the first frame we ever use for collating.

1011
01:04:53,700 --> 01:04:57,100
So, we look at these two, and we see if they are the same.

1012
01:04:58,400 --> 01:05:00,700
Which they should not be right.

1013
01:05:01,600 --> 01:05:03,500
So we don't have to increment the most recent frame.

1014
01:05:03,500 --> 01:05:05,200
We drift increment, the oldest frame.

1015
01:05:05,400 --> 01:05:09,100
So we do and that's good and off we go.

1016
01:05:13,400 --> 01:05:14,400
And that seems right.

1017
01:05:19,800 --> 01:05:22,200
So every frame now we should have to do this.

1018
01:05:23,300 --> 01:05:25,300
This should actually now free some things.

1019
01:05:25,500 --> 01:05:29,800
So, when I come into free frame, this should actually just should

1020
01:05:29,800 --> 01:05:30,300
trigger.

1021
01:05:31,500 --> 01:05:32,200
And it does.

1022
01:05:33,200 --> 01:05:34,500
So let's pull that off.

1023
01:05:34,900 --> 01:05:39,700
Got free event, we're going to be allocate it to Loop through here and

1024
01:05:39,700 --> 01:05:41,100
deallocate a bunch of stuff.

1025
01:05:45,600 --> 01:05:46,400
That's good.

1026
01:05:47,900 --> 01:05:48,400
Good.

1027
01:05:49,800 --> 01:05:51,300
So that's all pretty nice.

1028
01:05:51,600 --> 01:05:53,900
I think that all seems reasonable to me.

1029
01:05:56,400 --> 01:05:59,100
And then we're left with the Collision frame is on one the oldest

1030
01:05:59,100 --> 01:05:59,600
frame.

1031
01:06:00,000 --> 01:06:02,900
Also on one sweet moves up to two and we're good.

1032
01:06:04,700 --> 01:06:05,300
Right.

1033
01:06:06,500 --> 01:06:08,800
So that seems pretty good.

1034
01:06:08,800 --> 01:06:10,100
So I'm not sure.

1035
01:06:13,000 --> 01:06:17,600
where our bug is, I guess our bug is what happens when you can't, when

1036
01:06:17,600 --> 01:06:22,300
you were not freeing through that path, I guess our bug happens when

1037
01:06:22,300 --> 01:06:25,700
we start hitting the system more heavily, when we launched the game,

1038
01:06:25,700 --> 01:06:26,600
part of the game,

1039
01:06:28,000 --> 01:06:30,900
And and we free out of store event.

1040
01:06:31,300 --> 01:06:35,400
So freeing out of here is obviously like this is obviously a problem.

1041
01:06:37,300 --> 01:06:38,700
When we do free all this Frame.

1042
01:06:39,400 --> 01:06:41,900
So I'm going to see what happens when we get there.

1043
01:06:43,200 --> 01:06:45,000
Obviously, it won't happen here.

1044
01:06:45,300 --> 01:06:46,400
Well, it would happen here.

1045
01:06:46,400 --> 01:06:50,500
Eventually, maybe it might not because eventually this will probably

1046
01:06:50,500 --> 01:06:51,300
countdown

1047
01:06:58,100 --> 01:07:01,200
Hmm, you know, that's a little suspicious.

1048
01:07:04,000 --> 01:07:05,800
So, actually, no, I take it back.

1049
01:07:06,100 --> 01:07:07,600
There's some bug here.

1050
01:07:08,200 --> 01:07:11,500
We're not actually freeing all of the memory that we allocate on a

1051
01:07:11,500 --> 01:07:16,300
given frame because this would stop counting down basically.

1052
01:07:16,500 --> 01:07:17,800
When we got to,

1053
01:07:20,100 --> 01:07:23,200
Once we got to the 236 frame because weed-free one frames worth of

1054
01:07:23,200 --> 01:07:24,700
data and add one faint of the data.

1055
01:07:24,700 --> 01:07:28,400
And there's not appreciably more data happening each frame.

1056
01:07:28,700 --> 01:07:30,800
So, we actually still have a bug.

1057
01:07:35,900 --> 01:07:38,900
so something that we allocate,

1058
01:07:40,300 --> 01:07:41,600
Is not getting freed.

1059
01:07:51,300 --> 01:07:53,400
But the question is, what is it?

1060
01:07:55,200 --> 01:07:56,800
So, here we are in free frame.

1061
01:08:00,100 --> 01:08:02,900
We're looking through this particular ordinal which is the one we want

1062
01:08:02,900 --> 01:08:03,400
to free.

1063
01:08:03,900 --> 01:08:07,100
We're taking a look at oldest event which would have all of the stuff

1064
01:08:07,100 --> 01:08:09,400
that we allocated, right?

1065
01:08:10,000 --> 01:08:12,200
Because that's where store frame pulls this data from.

1066
01:08:25,600 --> 01:08:27,300
That sure, looks like it should work.

1067
01:08:35,600 --> 01:08:36,600
although,

1068
01:08:39,200 --> 01:08:40,600
I do have one question.

1069
01:08:48,500 --> 01:08:50,800
What exactly is going on here?

1070
01:08:57,800 --> 01:08:58,700
You know, I'm saying to you.

1071
01:09:00,700 --> 01:09:01,600
Why is that?

1072
01:09:01,600 --> 01:09:03,300
Do we even know why that's a pointer?

1073
01:09:05,500 --> 01:09:06,399
Because I don't.

1074
01:09:07,399 --> 01:09:09,399
I feel like that should be baked into the frame.

1075
01:09:11,000 --> 01:09:13,399
But either way, it sure isn't getting freed.

1076
01:09:21,300 --> 01:09:23,000
And we would need to definitely free it.

1077
01:09:25,600 --> 01:09:27,500
I'm going to see what happens if we just do that.

1078
01:09:30,000 --> 01:09:31,500
You think well, all right.

1079
01:09:33,700 --> 01:09:36,399
When we do free frame, we look at frame ordinal.

1080
01:09:37,100 --> 01:09:39,000
Will go in here and say element frame.

1081
01:09:41,100 --> 01:09:41,800
Not only frame.

1082
01:09:42,399 --> 01:09:50,200
Debug frame frame equals debug State frames plus frame ordinal if

1083
01:09:50,500 --> 01:09:52,700
frame profile node.

1084
01:09:54,400 --> 01:09:55,700
Realist, the allocate.

1085
01:09:58,900 --> 01:10:00,100
Rain route.

1086
01:10:00,100 --> 01:10:00,900
Profound it.

1087
01:10:08,700 --> 01:10:09,700
mmm, I'm saying

1088
01:10:20,000 --> 01:10:22,100
Still chewing through the memory there.

1089
01:10:25,800 --> 01:10:28,200
So I kind of want to know where that's coming from.

1090
01:10:35,000 --> 01:10:36,600
That's not going to be there.

1091
01:10:36,700 --> 01:10:38,000
Of course, I'm way over time here.

1092
01:10:38,000 --> 01:10:39,400
I'm like 10 minutes overtime.

1093
01:10:41,500 --> 01:10:42,900
You know how I get sometimes?

1094
01:10:44,200 --> 01:10:45,800
you just, you know how I get

1095
01:10:58,900 --> 01:10:59,600
What's the problem?

1096
01:10:59,600 --> 01:11:00,100
There we go.

1097
01:11:02,300 --> 01:11:09,200
So I am curious, if this is not freeing everything, what isn't it?

1098
01:11:09,200 --> 01:11:18,000
Freeing is my question and I suppose we should probably look to see.

1099
01:11:27,100 --> 01:11:28,000
Let's take a look.

1100
01:11:29,200 --> 01:11:31,800
So we've got debug trees but those are fine.

1101
01:11:36,700 --> 01:11:38,600
Right, we've got debug views.

1102
01:11:38,600 --> 01:11:41,900
Those are actually also not part of the collation process.

1103
01:11:43,800 --> 01:11:45,000
We have.

1104
01:11:50,000 --> 01:11:51,700
Debug threads.

1105
01:11:55,100 --> 01:11:58,800
Now that in theory should be being handled separately properly.

1106
01:12:00,000 --> 01:12:03,200
And that's also part of the debugger Arena, not the per frame arena.

1107
01:12:03,600 --> 01:12:05,000
In fact I can just look

1108
01:12:07,500 --> 01:12:09,500
at the collation Arena, right?

1109
01:12:18,600 --> 01:12:19,400
Store events.

1110
01:12:22,000 --> 01:12:23,100
Prefer a marina.

1111
01:12:23,700 --> 01:12:26,300
So we only really need to look at what's coming out of the per frame

1112
01:12:26,300 --> 01:12:26,800
Arena.

1113
01:12:34,400 --> 01:12:39,100
And so, we're literally, this is the only place that we take out of

1114
01:12:39,100 --> 01:12:39,800
that Arena.

1115
01:12:40,200 --> 01:12:42,200
That's it, okay?

1116
01:12:43,000 --> 01:12:48,800
And so, if that's the only place is story event, then that means that

1117
01:12:48,800 --> 01:12:55,500
we are somehow storing events that we are never recovering when we try

1118
01:12:55,500 --> 01:12:58,000
to do our free event walk.

1119
01:12:58,300 --> 01:13:02,300
So, I definitely messed this part up right here.

1120
01:13:03,100 --> 01:13:03,900
When we go through the

1121
01:13:04,200 --> 01:13:08,200
Ash and we try to pull out whatever the frame is that were

1122
01:13:10,800 --> 01:13:13,500
That we're going free for whatever reason.

1123
01:13:13,800 --> 01:13:17,700
This is no longer an accurate way I guess of

1124
01:13:23,000 --> 01:13:26,900
Recovering all those events but I'm just not sure why.

1125
01:13:40,500 --> 01:13:43,600
Free event is the oldest event in the frame.

1126
01:13:45,500 --> 01:13:49,100
We then set the oldest event to be whatever came after that and we

1127
01:13:49,100 --> 01:13:51,900
deallocate that one that we were on.

1128
01:13:54,000 --> 01:13:58,300
That should move all of them from that frame out.

1129
01:14:00,800 --> 01:14:04,700
and we do that for everything in the hash,

1130
01:14:15,800 --> 01:14:17,600
What else does that have in it?

1131
01:14:27,700 --> 01:14:28,900
Dare I ask.

1132
01:14:30,900 --> 01:14:32,700
I should probably clear these.

1133
01:14:34,200 --> 01:14:35,000
As well.

1134
01:14:35,900 --> 01:14:38,800
Like after this Frame is is done.

1135
01:14:38,800 --> 01:14:40,800
I should probably do a zero struct, right?

1136
01:14:45,000 --> 01:14:47,100
But that shouldn't have anything to do with it.

1137
01:14:48,500 --> 01:14:49,000
So I don't know.

1138
01:14:49,000 --> 01:14:50,500
This may have to wait till tomorrow.

1139
01:14:50,600 --> 01:14:52,500
I'm not immediately seeing the answer.

1140
01:15:00,900 --> 01:15:04,700
And we may just have to take a closer look, basically, what happens.

1141
01:15:04,700 --> 01:15:07,000
It looks like is we just aren't?

1142
01:15:07,000 --> 01:15:08,700
We're actually leaking that memory.

1143
01:15:08,800 --> 01:15:12,300
So before we were properly freeing it and then I busted it.

1144
01:15:12,300 --> 01:15:15,600
And so now, instead of being able to always free it, when we're done,

1145
01:15:16,900 --> 01:15:18,700
we're leaking it instead.

1146
01:15:20,200 --> 01:15:21,200
If that makes sense.

1147
01:15:23,900 --> 01:15:27,900
So down down, down it goes which it should not be at this point, it

1148
01:15:27,900 --> 01:15:29,300
should not actually be going down.

1149
01:15:31,300 --> 01:15:36,600
And then eventually, when it gets to the end, it will hang presumably.

1150
01:15:38,700 --> 01:15:39,300
Like so.

1151
01:15:42,700 --> 01:15:44,400
Because now it can't free.

1152
01:15:45,000 --> 01:15:51,300
Its trying desperately to try to free memory so that it can allocate

1153
01:15:51,300 --> 01:15:56,000
the next event to store, but it already believes it's freed everything

1154
01:15:56,000 --> 01:15:56,800
that it could free.

1155
01:15:57,600 --> 01:16:01,300
So it's just hunting through the circular buffer forever and it will

1156
01:16:01,300 --> 01:16:03,900
never find anything more to free because it already thinks it freed

1157
01:16:03,900 --> 01:16:04,400
everything.

1158
01:16:05,600 --> 01:16:08,300
So, that's just really perplexing.

1159
01:16:20,700 --> 01:16:21,200
All right.

1160
01:16:25,800 --> 01:16:28,100
I think we'll have to do a little bit more.

1161
01:16:31,200 --> 01:16:33,600
Debugging tomorrow, I'm going to call it for here.

1162
01:17:10,700 --> 01:17:11,300
Any Mouse.

1163
01:17:11,300 --> 01:17:18,400
Do you need to wrap that plus frame ordinal in the free frame

1164
01:17:18,800 --> 01:17:20,100
function?

1165
01:17:22,600 --> 01:17:23,300
Rap.

1166
01:17:24,600 --> 01:17:25,900
Well, there's only two of them.

1167
01:17:25,900 --> 01:17:26,900
There's this one.

1168
01:17:28,000 --> 01:17:29,700
And there's this one.

1169
01:17:31,600 --> 01:17:34,800
But what do you mean by wrapping them?

1170
01:17:37,100 --> 01:17:40,200
We don't need to mod them if that's, you know, because this is always

1171
01:17:40,200 --> 01:17:43,900
inside that range because they're pre-wrapped.

1172
01:17:44,600 --> 01:17:47,800
Like when you're saying free at your passing, an ordinal in which is

1173
01:17:47,800 --> 01:17:48,800
already wrapped.

1174
01:17:48,800 --> 01:17:50,300
I could assert that, right?

1175
01:17:50,300 --> 01:17:52,500
Like we probably should like, right?

1176
01:17:52,500 --> 01:17:56,200
We should probably just say here like hey by the way, if you thought

1177
01:17:56,200 --> 01:17:57,700
you were going to free something,

1178
01:18:02,000 --> 01:18:04,400
That was like, outside of the frame range.

1179
01:18:04,700 --> 01:18:07,800
Presumably, you know, we would get bogus values and know pretty

1180
01:18:07,800 --> 01:18:08,400
quickly.

1181
01:18:09,000 --> 01:18:10,000
But, you know,

1182
01:18:11,900 --> 01:18:13,700
But no one's ever going to pass that in.

1183
01:18:34,700 --> 01:18:40,200
So also, I suppose the other thing that yeah, that's weird.

1184
01:18:40,200 --> 01:18:44,400
I there must be something very simple but subtle that I'm forgetting

1185
01:18:45,100 --> 01:18:45,700
because

1186
01:18:49,800 --> 01:18:51,000
it would seem

1187
01:18:53,000 --> 01:18:54,700
Missy, what store event does?

1188
01:18:56,700 --> 01:18:57,800
I'm supposed collation.

1189
01:18:57,800 --> 01:18:58,800
Frame word null.

1190
01:19:02,800 --> 01:19:07,300
We know how many events restore it were on that frame.

1191
01:19:08,000 --> 01:19:11,100
So the other thing that's kind of interesting is I can assert catch

1192
01:19:11,100 --> 01:19:13,600
this, presumably meaning.

1193
01:19:13,600 --> 01:19:20,400
I should be able to say you know, freed three-day event count and

1194
01:19:20,400 --> 01:19:24,300
every time we move something to the free list, we could count it like

1195
01:19:24,300 --> 01:19:24,800
so.

1196
01:19:25,600 --> 01:19:28,200
And then when we come down here, and we look at what the frame is, we

1197
01:19:28,200 --> 01:19:31,900
can assert that the stored event count for that frame.

1198
01:19:34,700 --> 01:19:36,500
Equals the free to vent count.

1199
01:19:37,400 --> 01:19:39,900
Because then we would know, right?

1200
01:19:43,200 --> 01:19:44,100
If that makes sense.

1201
01:19:46,700 --> 01:19:49,800
Now, this I suppose we also would have to count

1202
01:19:58,400 --> 01:19:59,900
That is madness.

1203
01:20:01,000 --> 01:20:01,800
Okay, there we go.

1204
01:20:01,900 --> 01:20:05,000
I was like, I guess I just hadn't gotten a 256 frames yet.

1205
01:20:05,000 --> 01:20:09,600
I'm like they shouldn't add up and they don't we stored 56.

1206
01:20:10,300 --> 01:20:11,000
We freed fatigue.

1207
01:20:15,000 --> 01:20:15,900
Okay.

1208
01:20:19,600 --> 01:20:21,900
That makes even less sense.

1209
01:20:30,500 --> 01:20:32,900
This is the only place we can get one of those.

1210
01:20:32,900 --> 01:20:34,300
How is that possible?

1211
01:20:36,100 --> 01:20:39,800
Where is the root profile node allocated, by the way?

1212
01:20:57,900 --> 01:20:59,300
Store event.

1213
01:21:00,400 --> 01:21:01,700
No event.

1214
01:21:01,800 --> 01:21:04,600
So it's definitely storing it on the frame.

1215
01:21:08,200 --> 01:21:09,600
What's the element?

1216
01:21:10,200 --> 01:21:13,600
So it is wrapped in an element so that one I didn't actually.

1217
01:21:13,600 --> 01:21:17,100
So that doesn't actually have to be stored.

1218
01:21:21,700 --> 01:21:24,600
So that's, that's not actually I didn't actually distort is stored

1219
01:21:24,600 --> 01:21:25,600
under an element.

1220
01:21:27,700 --> 01:21:29,200
So, this doesn't actually have to happen.

1221
01:21:36,600 --> 01:21:38,600
all right, so if I rebuild that and I run it,

1222
01:21:40,700 --> 01:21:43,900
Now, we should get an assertion that when they differ which if they

1223
01:21:43,900 --> 01:21:45,000
don't ever differ.

1224
01:21:50,900 --> 01:21:52,600
That's what I would expect to see before.

1225
01:21:54,800 --> 01:21:55,800
Let's see if that happens again.

1226
01:21:58,100 --> 01:21:59,200
So it was literally just that.

1227
01:21:59,200 --> 01:22:03,100
I was double free map but we had the bug before I did that.

1228
01:22:04,500 --> 01:22:06,000
That does not make any sense.

1229
01:22:06,500 --> 01:22:09,300
I mean, it makes sense why that was broken because we're moving some

1230
01:22:09,300 --> 01:22:12,900
of the free list of second time which you can't do obviously because

1231
01:22:12,900 --> 01:22:14,000
it breaks the free list.

1232
01:22:14,300 --> 01:22:17,900
But how on Earth was it not working originally?

1233
01:22:19,900 --> 01:22:21,100
That's just bizarre.

1234
01:22:22,700 --> 01:22:23,500
Well, never mind.

1235
01:22:24,200 --> 01:22:25,100
We didn't have a bug.

1236
01:22:25,100 --> 01:22:25,700
I lied.

1237
01:22:25,900 --> 01:22:28,000
I made a bug when trying to fix the bug.

1238
01:22:44,400 --> 01:22:45,800
Let me take a couple Q's here.

1239
01:22:48,900 --> 01:22:50,400
I'm a bit behind on, hit me here.

1240
01:22:50,400 --> 01:22:53,800
But do you typically bypass for something like off, stream coding?

1241
01:22:54,100 --> 01:22:57,700
All the simplified things like, rendering a bitmap.

1242
01:22:58,000 --> 01:23:01,700
Like how you were doing drawbitmap like an episode 39 and go straight

1243
01:23:01,700 --> 01:23:02,600
to the renderer.

1244
01:23:03,200 --> 01:23:05,900
But as well as other things like structured Assets in the like,

1245
01:23:08,400 --> 01:23:11,800
So, I guess what I would say is, yeah, I don't typically go through

1246
01:23:12,700 --> 01:23:19,100
stuff that I already know, isn't the way to do something like, if I

1247
01:23:19,100 --> 01:23:24,900
know that my final code is not going to be drawing a bitmap, you know?

1248
01:23:26,300 --> 01:23:30,000
If I knew that my final things are GPU thing, I'm not going to like

1249
01:23:30,000 --> 01:23:33,300
spend a bunch of time, making a software renderer obviously, right?

1250
01:23:35,200 --> 01:23:37,100
And so a bunch of those things I show in handmade here.

1251
01:23:37,100 --> 01:23:41,500
I'll because I, that is what I did over time.

1252
01:23:41,500 --> 01:23:44,400
Meaning, the first render, I wrote, there was no such thing as a GPU

1253
01:23:44,900 --> 01:23:46,300
in a PC at that time.

1254
01:23:46,600 --> 01:23:49,700
So the first render, I wrote was a software renderer, right?

1255
01:23:50,000 --> 01:23:53,700
In fact, the first several, I wrote were suffer renderers and only

1256
01:23:53,700 --> 01:23:54,100
later.

1257
01:23:54,100 --> 01:23:56,500
Once you've UK onto, I start doing that and I feel like that's an

1258
01:23:56,500 --> 01:23:59,400
important part of your education in game programming.

1259
01:24:00,000 --> 01:24:03,500
Understand how to write things like a software renderer because it

1260
01:24:03,500 --> 01:24:06,600
means that you will actually understand how a GPU renderer Works.

1261
01:24:06,700 --> 01:24:09,200
Whereas you won't understand that, if you've never done it yourself,

1262
01:24:12,000 --> 01:24:14,400
But you wouldn't do that in the course of running.

1263
01:24:14,400 --> 01:24:16,800
If you already know, if you already know how to write a software

1264
01:24:16,800 --> 01:24:20,500
renderer, you wouldn't write one again because you don't need it for

1265
01:24:20,500 --> 01:24:21,000
anything.

1266
01:24:21,000 --> 01:24:24,300
Like unless you add some real bit of reason to do so that not to say

1267
01:24:24,300 --> 01:24:27,300
that you couldn't have such a reason but most of the time, probably

1268
01:24:27,300 --> 01:24:27,700
not.

1269
01:24:29,400 --> 01:24:32,700
As for other stuff like on the debug system.

1270
01:24:32,800 --> 01:24:34,800
I've been legitimately playing around with it.

1271
01:24:35,100 --> 01:24:38,400
Meaning, I did not know exactly how I wanted this to work going into

1272
01:24:38,400 --> 01:24:41,800
it and I've kind of like felt my way around to figure out how I wanted

1273
01:24:41,800 --> 01:24:44,600
to be structured, and that's because I wanted to show how to make a

1274
01:24:44,600 --> 01:24:47,000
complex system experimentally

1275
01:24:48,800 --> 01:24:50,200
And that I still do all the time.

1276
01:24:54,400 --> 01:24:56,000
When I'm trying to design something new.

1277
01:24:57,600 --> 01:25:00,200
I obviously don't have the luxury of having done it before because

1278
01:25:00,200 --> 01:25:01,100
that's what makes it new.

1279
01:25:02,400 --> 01:25:04,500
And so I have to experiment with how to do it.

1280
01:25:04,500 --> 01:25:08,000
And so, you know, I've never done a debug system that works exactly.

1281
01:25:08,000 --> 01:25:11,000
Like this one does that has exactly the same features.

1282
01:25:11,000 --> 01:25:13,700
And so I kind of had been exploring to see how that works, and I'm

1283
01:25:13,700 --> 01:25:16,600
kind of interested in some of the stuff that I've done so far on it.

1284
01:25:19,200 --> 01:25:20,300
That's somewhat educational.

1285
01:25:20,400 --> 01:25:23,700
We can re-enable our profile view, I'll do it tomorrow, but that's

1286
01:25:23,700 --> 01:25:24,400
going to be good.

1287
01:25:27,300 --> 01:25:28,000
Dude, in basement.

1288
01:25:28,000 --> 01:25:30,700
One thoughts on using a static array instead of the lists?

1289
01:25:31,000 --> 01:25:34,300
Yeah, I just felt like I felt like most of the stuff that we're going

1290
01:25:34,300 --> 01:25:39,500
to want to do is very much like wants to jump to a particular frames

1291
01:25:39,700 --> 01:25:42,300
and running through the list, every time to get there.

1292
01:25:42,300 --> 01:25:47,700
Did not seem like a great idea to me, but, you know, maybe maybe it

1293
01:25:47,700 --> 01:25:48,200
would have been fine.

1294
01:25:48,200 --> 01:25:50,100
I just, it looked was starting to get annoying.

1295
01:25:50,300 --> 01:25:54,300
So I want to be able to do stuff like, say, hey draw like this frame

1296
01:25:54,300 --> 01:25:56,400
in the previous frame and I want that to be.

1297
01:25:56,500 --> 01:26:00,800
The or this in the previous five frames or Draw frame for of

1298
01:26:00,800 --> 01:26:03,600
everybody, I just felt like that would be kind of nicer, so that's the

1299
01:26:03,600 --> 01:26:03,900
way I.

1300
01:26:03,900 --> 01:26:04,900
Why did that?

1301
01:26:16,900 --> 01:26:20,100
They blow in Savannah, has this to say inheritance and encapsulation

1302
01:26:20,100 --> 01:26:22,200
to best inventions of mankind.

1303
01:26:22,300 --> 01:26:25,700
Oh my God in sohbat is going rogue.

1304
01:26:26,100 --> 01:26:28,200
That is a horrible thing to say and sohbat.

1305
01:26:31,800 --> 01:26:35,700
Any Mass do you prefer to use modulo or masking for circular indexing,

1306
01:26:35,700 --> 01:26:39,000
do compilers replace module has its bitwise and if the operator

1307
01:26:39,100 --> 01:26:40,800
operand is a power of 2.

1308
01:26:42,200 --> 01:26:45,200
So what I would say about that is

1309
01:26:47,700 --> 01:26:48,600
Not blowing the nose.

1310
01:26:48,600 --> 01:26:50,100
But what I say about that is,

1311
01:26:53,300 --> 01:26:54,700
Modulo should be fine.

1312
01:26:55,200 --> 01:26:59,600
Most of the time if you're doing stuff like debug code or things that

1313
01:26:59,600 --> 01:26:59,800
happened.

1314
01:27:00,000 --> 01:27:03,100
Early and they allow you to make your accounts, be whatever you want,

1315
01:27:03,100 --> 01:27:04,400
which is, oftentimes nice.

1316
01:27:06,200 --> 01:27:09,500
In a speed scenario where I look, I really am worried about how fast

1317
01:27:09,500 --> 01:27:10,200
is going to be.

1318
01:27:10,400 --> 01:27:14,100
You may want to do masking because masking can be faster.

1319
01:27:14,100 --> 01:27:18,600
Since modulo is an integer divide kind of a situation and it can be a

1320
01:27:18,600 --> 01:27:19,200
problem.

1321
01:27:20,300 --> 01:27:25,700
As far as I know, most of the time compilers are smart enough to, to

1322
01:27:25,700 --> 01:27:34,000
replace modulo with bitwise and when it is a power of 2, when the size

1323
01:27:34,000 --> 01:27:34,800
is a power of 2,

1324
01:27:36,200 --> 01:27:41,200
The thing modulo N is a power of 2, but have I tested that extensively

1325
01:27:41,200 --> 01:27:42,400
know most of the time.

1326
01:27:42,400 --> 01:27:44,700
If I care about the speed, I write the mask myself.

1327
01:27:47,300 --> 01:27:52,300
But, you know, I think compilers, yeah, are generally smart enough to

1328
01:27:52,300 --> 01:27:52,800
do that.

1329
01:27:52,900 --> 01:27:55,500
I don't think you have to babysit that particular thing.

1330
01:28:21,300 --> 01:28:22,000
Her Tamina.

1331
01:28:22,000 --> 01:28:24,600
Are we still doing the marathon training camp for the Q and A Menace

1332
01:28:24,600 --> 01:28:24,700
II?

1333
01:28:24,700 --> 01:28:28,600
Don't know that I will, I mean, I reserve the right to do it that way.

1334
01:28:33,000 --> 01:28:34,100
So it's get the profile koti.

1335
01:28:34,100 --> 01:28:35,700
Everything Sarita, what happened to it?

1336
01:28:35,700 --> 01:28:38,000
Some of the things you had implanted like the multiple Lanes here,

1337
01:28:38,000 --> 01:28:40,100
just paired know the multiple Lanes is still there.

1338
01:28:43,500 --> 01:28:44,600
In fact, I can show it to you.

1339
01:28:45,600 --> 01:28:46,600
I guess I would have to.

1340
01:28:46,600 --> 01:28:50,100
I just said, I wasn't going to re-enable this till tomorrow, but I

1341
01:28:50,100 --> 01:28:51,100
could re enable it.

1342
01:28:51,400 --> 01:28:55,300
Let's see rah-rah frame bars.

1343
01:28:59,100 --> 01:29:04,500
So this was the portfolio, we were working on and loop.

1344
01:29:12,100 --> 01:29:15,800
I just need to Port this code, so you need to Forever guess for their

1345
01:29:15,800 --> 01:29:16,100
frames.

1346
01:29:16,100 --> 01:29:17,700
Hey, guess what that to do is now done?

1347
01:29:17,700 --> 01:29:18,800
Because we have an array.

1348
01:29:19,700 --> 01:29:25,600
So what we can do now is say, well, most recent frame ordinal, equals

1349
01:29:26,000 --> 01:29:31,200
whatever the debug State most recent rain ordinal is then when we come

1350
01:29:31,200 --> 01:29:34,300
through here, and we get our viewing element, assuming that it

1351
01:29:34,300 --> 01:29:38,000
actually existed, we can access the root node directly.

1352
01:29:43,300 --> 01:29:45,100
In a variety of ways.

1353
01:29:45,100 --> 01:29:49,900
So the first thing we would do here is say, well, the viewing element.

1354
01:29:51,400 --> 01:29:55,100
Frames oldest event.

1355
01:29:56,800 --> 01:29:59,600
like so, so if we do viewing element,

1356
01:30:00,700 --> 01:30:02,900
Most recent frame ordinal.

1357
01:30:04,300 --> 01:30:11,100
And on the other hand we could say, well, debug State frames, most

1358
01:30:11,100 --> 01:30:14,000
recent frame word and all re-profile note.

1359
01:30:16,400 --> 01:30:16,900
Like so.

1360
01:30:18,800 --> 01:30:20,300
That's not spelled, right?

1361
01:30:24,200 --> 01:30:27,300
Debug frame does not have an overloaded operator, right?

1362
01:30:27,300 --> 01:30:28,200
You are sir.

1363
01:30:31,000 --> 01:30:31,500
All right.

1364
01:30:37,600 --> 01:30:39,300
So here is the current profile code.

1365
01:30:39,300 --> 01:30:41,600
You can see the multiple Lanes here, here's the three lanes, there's

1366
01:30:41,600 --> 01:30:42,400
just nothing happening.

1367
01:30:42,400 --> 01:30:43,100
These other threads.

1368
01:30:43,100 --> 01:30:45,600
If I wanted something to happen threads, we could turn on the software

1369
01:30:45,600 --> 01:30:48,500
renderer and presumably.

1370
01:30:48,500 --> 01:30:48,900
Whoa,

1371
01:30:50,900 --> 01:30:51,800
that's not good.

1372
01:30:53,600 --> 01:30:56,000
This looks like a bug, I must have just recently because we were

1373
01:30:56,000 --> 01:30:59,200
running the multiple frame view just the other day.

1374
01:31:00,800 --> 01:31:02,200
and that's

1375
01:31:05,500 --> 01:31:07,900
Intro rectangle.

1376
01:31:10,800 --> 01:31:12,000
Oh, you know what?

1377
01:31:12,000 --> 01:31:16,400
That's probably just because again, we're draw so much in the draw

1378
01:31:16,400 --> 01:31:17,500
profile in thing.

1379
01:31:17,800 --> 01:31:21,300
That, yeah, we need a way to not draw all the events, because there's

1380
01:31:21,300 --> 01:31:22,500
way too many events.

1381
01:31:22,900 --> 01:31:27,000
When we go to the software renderer, let me just turn off the

1382
01:31:27,000 --> 01:31:29,900
recursion for that for the moment.

1383
01:31:31,900 --> 01:31:35,400
Yeah, we need some way of figuring out how we would ya make?

1384
01:31:35,400 --> 01:31:37,400
That not happen.

1385
01:31:37,400 --> 01:31:40,700
But anyway, so here's the multi-frame.

1386
01:31:40,700 --> 01:31:46,300
The multi-lane view in action because now we actually have multiple

1387
01:31:46,300 --> 01:31:53,000
Lanes going, you know, normally when we are running the GPU renderer

1388
01:31:53,300 --> 01:31:56,300
there's really nothing for the other course, the CPU to do right now

1389
01:31:56,400 --> 01:31:58,800
because we just don't have enough work for frame.

1390
01:31:58,800 --> 01:32:01,400
The GPU is doing a lot of that work, but in

1391
01:32:01,600 --> 01:32:02,100
Offer render.

1392
01:32:02,100 --> 01:32:08,900
You can see now do tiled render work getting called multiple times per

1393
01:32:08,900 --> 01:32:11,600
thread on lots of threads, right?

1394
01:32:13,300 --> 01:32:16,600
So there's all that there's, there's the work that you're that you're

1395
01:32:16,600 --> 01:32:17,600
looking for, right?

1396
01:32:20,300 --> 01:32:22,200
Does that answer the question?

1397
01:32:39,400 --> 01:32:40,300
This is the risk.

1398
01:32:40,300 --> 01:32:44,700
You what if you aren't really learning from here where I've gone

1399
01:32:44,700 --> 01:32:47,100
through episodes one through 28 about four times that I thought, I

1400
01:32:47,100 --> 01:32:50,800
knew how to do so I tried to make the simplified win32 layer to get to

1401
01:32:50,800 --> 01:32:53,100
the independent layer, and I found that I couldn't do it.

1402
01:32:53,300 --> 01:32:57,200
Documentation was rough and I forgot what the things did.

1403
01:32:57,600 --> 01:32:59,500
What would you say to people who find that they aren't learning?

1404
01:33:00,700 --> 01:33:04,300
Well, there's two things that could be the case one is you just need

1405
01:33:04,500 --> 01:33:06,200
to try harder at it, right?

1406
01:33:06,500 --> 01:33:11,300
The other might be that it might be a little too soon for an made

1407
01:33:11,300 --> 01:33:12,100
here, right?

1408
01:33:12,100 --> 01:33:14,700
Handmade hero is not meant for people who have never programmed

1409
01:33:14,700 --> 01:33:15,300
before.

1410
01:33:16,800 --> 01:33:19,000
As I said, you know, sort of the outs of the series.

1411
01:33:19,000 --> 01:33:21,200
It's made for people who know how to program, but just don't know how

1412
01:33:21,200 --> 01:33:24,800
to program games or game engines, I should say.

1413
01:33:25,500 --> 01:33:29,100
So it's designed to take somebody who understands how to program and

1414
01:33:29,200 --> 01:33:29,800
show them how

1415
01:33:30,000 --> 01:33:32,700
A game programming and game, engine programming works.

1416
01:33:34,500 --> 01:33:39,800
So, if you are not at the point where you're comfortable doing a lot

1417
01:33:39,800 --> 01:33:44,400
of programming, you know, handmade hero doesn't have enough

1418
01:33:44,400 --> 01:33:50,000
introductory material in it, probably to get you up to speed

1419
01:33:50,100 --> 01:33:50,900
necessarily.

1420
01:33:52,100 --> 01:33:55,100
So I would say you need to do a quick self assessment to figure out

1421
01:33:55,100 --> 01:33:58,700
whether that's the case and if that's the case then you would want to

1422
01:33:58,700 --> 01:34:03,200
start with more introductory programming materials introductory, see

1423
01:34:03,200 --> 01:34:06,500
materials or introductory Windows programming materials.

1424
01:34:06,900 --> 01:34:10,800
Just to get you up to the point where you're like, okay I'm more

1425
01:34:10,800 --> 01:34:13,400
comfortable this stuff now and then you can do.

1426
01:34:13,400 --> 01:34:18,300
He made here which tends to only spend a lot of time teaching the game

1427
01:34:18,600 --> 01:34:19,700
engine parts.

1428
01:34:19,900 --> 01:34:21,600
Not just what's

1429
01:34:21,700 --> 01:34:26,600
Pointer or stuff like that which you know would be the kinds of things

1430
01:34:26,600 --> 01:34:28,000
that more interaction with Joe would have.

1431
01:34:28,000 --> 01:34:30,900
So you kind of need to figure out which whether that's a problem as

1432
01:34:30,900 --> 01:34:31,200
well.

1433
01:34:31,200 --> 01:34:34,600
And I don't know like since I don't know you and where you're at I

1434
01:34:34,600 --> 01:34:38,600
couldn't necessarily say which one of those would be the case, right?

1435
01:34:52,400 --> 01:34:52,900
But yeah.

1436
01:35:05,600 --> 01:35:07,800
I'm getting pretty excited about getting this profiler.

1437
01:35:07,800 --> 01:35:08,300
Good.

1438
01:35:08,700 --> 01:35:11,300
Because this is going to be, it's getting there, and it's going to be

1439
01:35:11,300 --> 01:35:12,200
pretty sweet.

1440
01:35:14,400 --> 01:35:16,100
All right, I'll see any more cues.

1441
01:35:16,600 --> 01:35:17,800
So I'm going to call it.

1442
01:35:18,300 --> 01:35:19,200
Call it a day.

1443
01:35:29,200 --> 01:35:31,300
Also, I wonder now if we do this.

1444
01:35:47,000 --> 01:35:47,700
Yeah.

1445
01:35:54,500 --> 01:35:58,000
so now, yeah, we're totally set up for tomorrow to go into frame bars

1446
01:35:58,000 --> 01:35:59,900
and that'll just draw like all the frames of a

1447
01:36:00,200 --> 01:36:01,100
Or element that we go to.

1448
01:36:01,100 --> 01:36:03,100
So I'm pretty pretty happy about that.

1449
01:36:10,500 --> 01:36:11,300
All right, folks.

1450
01:36:12,100 --> 01:36:12,900
McCall it

1451
01:36:15,500 --> 01:36:17,800
You know what I should also do should start this loading.

1452
01:36:21,400 --> 01:36:22,000
Is that?

1453
01:36:24,800 --> 01:36:26,000
There's another question for you.

1454
01:36:27,500 --> 01:36:29,300
Where is that was in Jake.

1455
01:36:29,300 --> 01:36:30,600
Owen, where was that at?

1456
01:36:32,800 --> 01:36:35,300
Blackboard, @j work archive.

1457
01:36:36,600 --> 01:36:38,300
Work archive.

1458
01:36:40,500 --> 01:36:42,900
Days, 100 to 199.

1459
01:36:47,300 --> 01:36:49,200
Why is it specifically in there?

1460
01:36:54,600 --> 01:36:56,400
Does that even make any sense to anyone?

1461
01:36:58,200 --> 01:36:59,200
Why is it in there?

1462
01:37:01,700 --> 01:37:04,000
Shouldn't it be out here?

1463
01:37:04,100 --> 01:37:05,300
Well, I don't know if you know what?

1464
01:37:05,300 --> 01:37:05,900
I don't even care.

1465
01:37:06,700 --> 01:37:07,400
Don't know.

1466
01:37:07,700 --> 01:37:08,500
Don't care.

1467
01:37:09,000 --> 01:37:12,500
Just going to keep it doing whatever it's doing and let it do that

1468
01:37:12,500 --> 01:37:12,900
thing.

1469
01:37:14,500 --> 01:37:16,100
I am going to wrap things up.

1470
01:37:17,000 --> 01:37:19,500
Thank you everyone for joining me for another soda and read hero.

1471
01:37:19,900 --> 01:37:20,700
It's been a pleasure coding with you.

1472
01:37:20,700 --> 01:37:23,900
As always, if you would like to follow along at home, you can always

1473
01:37:23,900 --> 01:37:26,900
pre-order the game on a meteorite or going to come to the source code

1474
01:37:27,000 --> 01:37:28,400
which you can use to follow along.

1475
01:37:29,700 --> 01:37:32,400
You can also support us on patreon.

1476
01:37:32,400 --> 01:37:36,000
If you would like using this button, you can go to our forearms using

1477
01:37:36,000 --> 01:37:39,100
this button and ask questions you can find out our schedule by going

1478
01:37:39,100 --> 01:37:42,000
to the Tweet bot which tweets the schedule at you.

1479
01:37:43,400 --> 01:37:47,500
And if you want to use the editor that we use on the series, you just

1480
01:37:47,500 --> 01:37:51,400
called for coder and you can find it by putting for coder into your

1481
01:37:51,400 --> 01:37:52,300
favorite browser.

1482
01:37:53,400 --> 01:37:57,500
And it's this dude right here, it has a patreon page, you can go to

1483
01:37:58,500 --> 01:38:04,600
and if you use the five dollar-a-month pledged here, you can get your

1484
01:38:04,600 --> 01:38:06,600
very own Alpha version of it.

1485
01:38:06,800 --> 01:38:08,400
That's the same as the one that I'm using.

1486
01:38:09,300 --> 01:38:11,400
That's about it.

1487
01:38:12,400 --> 01:38:13,400
I will be back tomorrow.

1488
01:38:13,400 --> 01:38:13,900
5:00 p.m.

1489
01:38:13,900 --> 01:38:14,800
Pacific Daylight time.

1490
01:38:14,800 --> 01:38:16,100
For more profiler fun.

1491
01:38:16,300 --> 01:38:21,800
I'm kind of excited about fancy profiling and I tend to be the only

1492
01:38:21,800 --> 01:38:24,400
person who's ever excited about code, I guess.

1493
01:38:24,400 --> 01:38:29,600
So I don't necessarily know if you are, but that's the problem with

1494
01:38:29,900 --> 01:38:33,500
you not being the people in charge of stream, I get to make all the

1495
01:38:33,500 --> 01:38:33,900
rules.

1496
01:38:34,000 --> 01:38:35,500
So, you know, what can I say?

1497
01:38:35,700 --> 01:38:36,400
We're profiling.

1498
01:38:36,500 --> 01:38:37,300
It's gonna be awesome.

1499
01:38:37,900 --> 01:38:38,800
I will see you guys.

1500
01:38:38,900 --> 01:38:40,100
Here tomorrow for that.

1501
01:38:40,200 --> 01:38:42,400
Until then have fun programming and I'll see you on the internet.

1502
01:38:42,400 --> 01:38:43,300
Take it easy, everyone.

