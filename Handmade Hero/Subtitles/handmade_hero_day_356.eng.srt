1
00:00:01,800 --> 00:00:04,300
Hello everyone, and welcome to handmade hero.

2
00:00:04,300 --> 00:00:07,200
The show we could a complete game live on stream.

3
00:00:07,200 --> 00:00:13,000
We are pretty much wrapped up with what we were trying to do at the

4
00:00:13,000 --> 00:00:17,500
end of the new year and we have to start working on some 3D stuff that

5
00:00:17,500 --> 00:00:18,100
we wanted to do.

6
00:00:18,100 --> 00:00:24,400
However, I did want to spend one more day on a couple clean up things

7
00:00:24,400 --> 00:00:27,600
that I thought would be good to do before we officially move on to a

8
00:00:27,600 --> 00:00:31,600
fairly big new change and that

9
00:00:31,800 --> 00:00:36,200
People who have been trying to compile on llvm, we try to keep our

10
00:00:36,200 --> 00:00:39,100
code pretty clean even though we don't compile on multiple platforms

11
00:00:39,100 --> 00:00:39,500
right now.

12
00:00:39,500 --> 00:00:43,600
We try to keep it pretty clean in terms of allowing people to compile

13
00:00:43,600 --> 00:00:44,600
on any platform they want.

14
00:00:44,600 --> 00:00:47,400
So if you know, you want to compile handmade Hero on Macintosh or

15
00:00:47,400 --> 00:00:51,200
Linux or Android, or anything else we try to make it.

16
00:00:51,200 --> 00:00:53,800
So that all you have to do is just write the platform layer part.

17
00:00:53,900 --> 00:00:57,000
That's specific to your operating system, but all the rest of the

18
00:00:57,000 --> 00:01:00,900
stuff will work just fine and whether people have made like, sdl Port,

19
00:01:00,900 --> 00:01:01,700
so you can even use

20
00:01:01,800 --> 00:01:05,800
Use if the sdl is supported on your not STL.

21
00:01:05,800 --> 00:01:09,700
But sdl, this simple directmedia layer, if that's supported on your

22
00:01:09,700 --> 00:01:11,700
platform, you can use that port and so on.

23
00:01:11,700 --> 00:01:15,900
But one of the problems that we have is just that most other platforms

24
00:01:15,900 --> 00:01:20,700
like, on Windows, even to this day, it's fairly impractical to use

25
00:01:20,700 --> 00:01:24,400
llvm or clang is probably the more correct way to say.

26
00:01:24,400 --> 00:01:31,200
It's llvm is not the compiler part per se, but using clang as the

27
00:01:31,200 --> 00:01:31,600
front end,

28
00:01:31,800 --> 00:01:35,300
Windows while it is getting more and more possible every day to use.

29
00:01:35,300 --> 00:01:40,600
Clang, instead of Visual Studio as your windows development tool, it's

30
00:01:40,600 --> 00:01:43,100
still not quite at the point where that's probably what you would want

31
00:01:43,100 --> 00:01:44,700
to do just yet.

32
00:01:44,700 --> 00:01:47,600
Now, you know, like I said, it gets closer and closer every day.

33
00:01:47,600 --> 00:01:51,300
So at some point that may be something that we consider doing and

34
00:01:51,700 --> 00:01:53,000
there's a very good reason for doing that.

35
00:01:53,000 --> 00:01:55,300
And that is, if you can use the same compiler on all of your

36
00:01:55,300 --> 00:01:58,500
platforms, you might as well because that takes and one whole big

37
00:01:58,500 --> 00:01:59,600
variable out of the

38
00:02:01,000 --> 00:02:01,700
Out of the equation.

39
00:02:02,000 --> 00:02:04,800
Now, you know that you're going to get similar code gen across your

40
00:02:04,800 --> 00:02:05,700
multiple platforms.

41
00:02:05,700 --> 00:02:08,199
You know, that you're going to have the same compiler errors and

42
00:02:08,199 --> 00:02:08,800
warnings.

43
00:02:09,300 --> 00:02:12,500
You know that this what the settings should be on everything and you

44
00:02:12,500 --> 00:02:18,200
know it just it takes some unnecessary work out of the project for you

45
00:02:18,200 --> 00:02:21,800
and that's always good because there's always more to do in

46
00:02:21,800 --> 00:02:24,000
programming than you have time to do and so if there's ways you can

47
00:02:24,000 --> 00:02:25,800
simplify your process it's good to do so.

48
00:02:26,000 --> 00:02:27,400
Clang is certainly a good compiler.

49
00:02:27,400 --> 00:02:29,100
It's it's as good as Visual Studio.

50
00:02:29,700 --> 00:02:30,300
Certainly on any

51
00:02:30,600 --> 00:02:33,500
Check that you might pick now, obviously there's some things Visual

52
00:02:33,500 --> 00:02:34,100
Studio does better.

53
00:02:34,100 --> 00:02:37,300
There's some things that clang does better, but on the whole it's not

54
00:02:37,300 --> 00:02:38,500
like it's a step down.

55
00:02:40,100 --> 00:02:42,300
So if you could switch to clean across all your platforms, that's

56
00:02:42,300 --> 00:02:43,400
probably not a bad idea.

57
00:02:43,400 --> 00:02:46,700
And sometime we may try to do that because like I said, it's getting

58
00:02:46,700 --> 00:02:49,100
closer and closer to the point where you could probably just use clang

59
00:02:49,100 --> 00:02:53,600
for everything on Windows as well, because they've made a lot of

60
00:02:53,600 --> 00:02:56,400
strides in, like, getting it to Output to debug information.

61
00:02:56,400 --> 00:02:59,300
That will work with, like visual Studios at debugger stuff like that.

62
00:02:59,300 --> 00:02:59,600
So,

63
00:03:00,000 --> 00:03:03,900
As those sorts of things start to become more and more usable becomes

64
00:03:03,900 --> 00:03:08,100
more and more plausible to just use clang as your compiler on Linux

65
00:03:08,100 --> 00:03:09,300
Mac Windows.

66
00:03:09,300 --> 00:03:15,100
Android you know, iOS and and windows regular.

67
00:03:15,600 --> 00:03:16,700
That's kind of this nice.

68
00:03:18,000 --> 00:03:19,500
It just this nice uniformity to it.

69
00:03:20,200 --> 00:03:23,800
So so I'm always interested in keeping that build going and for a

70
00:03:23,800 --> 00:03:28,300
while we have had a problem that our debug system if you compile

71
00:03:28,300 --> 00:03:29,800
without the debug system enabled,

72
00:03:30,000 --> 00:03:32,000
Then I don't think we have any problem compiling with clang.

73
00:03:32,000 --> 00:03:32,500
Right now.

74
00:03:32,700 --> 00:03:35,000
If we do, then people haven't told me about it.

75
00:03:35,000 --> 00:03:35,300
Is that?

76
00:03:35,400 --> 00:03:39,700
So, people should tell me, so we can fix it, but if you compile with

77
00:03:39,700 --> 00:03:42,800
the debug system on, then you do have a problem.

78
00:03:42,800 --> 00:03:47,800
And the problem is that the definition of the function macro is

79
00:03:47,800 --> 00:03:48,900
different between the two.

80
00:03:52,400 --> 00:03:56,800
And the way that that works is inside the debug system, we use that

81
00:03:56,800 --> 00:04:00,400
macro to tell us what the name of the function is that the debug

82
00:04:00,400 --> 00:04:03,100
commands that we're issuing are inside, right?

83
00:04:03,100 --> 00:04:07,900
So when we're inside a function, we want our debug counters, like our

84
00:04:07,900 --> 00:04:10,800
our time counters, and our data output stuff.

85
00:04:11,000 --> 00:04:12,400
We want those to be

86
00:04:14,100 --> 00:04:16,500
marked so that we know what function they came from.

87
00:04:16,600 --> 00:04:19,600
It's just makes it easier to read write.

88
00:04:19,899 --> 00:04:25,000
And so if I come in, in fact, let me just load handmade hero and you

89
00:04:25,000 --> 00:04:30,700
can see what I mean, when we come into the code here, here is handmade

90
00:04:30,700 --> 00:04:33,700
hero, and if I run it, you can see that.

91
00:04:33,700 --> 00:04:37,000
Like, if I open up our profile window, for example we get like these

92
00:04:37,000 --> 00:04:39,400
nice function names here, right?

93
00:04:40,200 --> 00:04:41,900
And that's you know what we want?

94
00:04:41,900 --> 00:04:43,200
If we were to just show the

95
00:04:43,400 --> 00:04:44,600
I'll name and line number.

96
00:04:44,800 --> 00:04:45,900
It would be much harder.

97
00:04:45,900 --> 00:04:49,800
Human readability wise to really know what these things were that were

98
00:04:49,800 --> 00:04:50,300
in here.

99
00:04:51,200 --> 00:04:53,800
And so having that function macro makes it a lot nicer.

100
00:04:53,800 --> 00:04:56,600
It automate sit for the programmer, so they don't have to type in and

101
00:04:56,600 --> 00:04:58,200
keep in synchronization.

102
00:04:59,800 --> 00:05:03,800
Any sort of information there about what the the block is timing or

103
00:05:03,800 --> 00:05:08,000
whatever the default is always the going to be usable in that the

104
00:05:08,000 --> 00:05:10,800
default when you time something and use that function macro is it will

105
00:05:10,800 --> 00:05:15,100
say to you exactly what you wanted to see there, which is to say,

106
00:05:15,400 --> 00:05:19,800
it'll say what the function is that was taking the time, right?

107
00:05:20,000 --> 00:05:21,700
And that's the sort of thing that we want.

108
00:05:22,100 --> 00:05:25,100
So using that function macro is important to us and we need to be able

109
00:05:25,100 --> 00:05:25,600
to do it.

110
00:05:25,600 --> 00:05:28,900
However, what we were doing in this,

111
00:05:29,100 --> 00:05:29,600
I'm stance.

112
00:05:31,600 --> 00:05:34,300
Is we were trying to make it so that our debug system had the least

113
00:05:34,300 --> 00:05:39,200
amount of work necessary in order to record a particular debug event,

114
00:05:39,200 --> 00:05:39,600
right?

115
00:05:39,600 --> 00:05:42,300
And so if you take a look at what that is, I'm going to go ahead and

116
00:05:42,300 --> 00:05:47,000
load up handmade Heroes code here and just do a little compiled, just

117
00:05:47,000 --> 00:05:47,700
for good measure.

118
00:05:48,300 --> 00:05:52,000
And if I am here in handmade here and I want to take a look at how the

119
00:05:52,000 --> 00:05:57,100
debug interface stuff works, you know, here it is, right.

120
00:05:57,500 --> 00:05:59,800
And what you can see is that when we record

121
00:06:00,000 --> 00:06:02,100
Of these pieces of information.

122
00:06:03,600 --> 00:06:07,100
You can see it up here, but we want to do is we wanted to keep this

123
00:06:07,100 --> 00:06:09,100
this brief, right?

124
00:06:09,300 --> 00:06:13,500
So in a release mode, build this assert will go away and really all

125
00:06:13,500 --> 00:06:19,800
there is is a one access of this event index bit right here.

126
00:06:20,000 --> 00:06:22,300
After like we first atomic, add it.

127
00:06:22,700 --> 00:06:26,600
And then we basically just mask it off to get which one we're going to

128
00:06:26,600 --> 00:06:32,700
use and then we just go ahead and add that thing the event at that

129
00:06:32,700 --> 00:06:33,100
location.

130
00:06:33,800 --> 00:06:36,500
Right, and you can see that's that sort of Happening Here.

131
00:06:36,900 --> 00:06:39,000
We then snap an are dtsc record.

132
00:06:39,000 --> 00:06:42,100
What type of event it is, which core it was on which we don't have the

133
00:06:42,100 --> 00:06:45,300
ability to do at the moment because we don't have our dtsc p on this

134
00:06:45,300 --> 00:06:45,900
computer.

135
00:06:46,100 --> 00:06:47,500
If we did have already TSC P.

136
00:06:47,500 --> 00:06:49,700
We would have called that and gotten the core index as well.

137
00:06:50,300 --> 00:06:53,600
We grab the thread ID and then we put the Grid in there, right?

138
00:06:53,900 --> 00:06:56,500
And so we were trying to keep that pretty minimal old ready.

139
00:06:56,500 --> 00:06:59,400
That's just kind of a lot of information to write down.

140
00:07:02,700 --> 00:07:04,300
Which is kind of annoying, right?

141
00:07:06,500 --> 00:07:09,300
But unfortunately, if you take a look at it, a lot of this stuff can't

142
00:07:09,300 --> 00:07:14,200
be helped the event type and the grid are the only two things that are

143
00:07:14,200 --> 00:07:16,000
statically known, right?

144
00:07:16,300 --> 00:07:19,500
So really, those are the only we could get away with one less by

145
00:07:19,500 --> 00:07:22,100
folding the type into the grid, right?

146
00:07:23,200 --> 00:07:26,700
But the rest of these what thread we are on what core we are on and

147
00:07:26,700 --> 00:07:28,900
what the Clock Was and where the event goes.

148
00:07:29,100 --> 00:07:30,400
That's the minimum amount of stuff.

149
00:07:30,600 --> 00:07:32,200
Actually kind of need to record.

150
00:07:33,700 --> 00:07:36,700
Because the threat is dynamic, we don't know which thread is entering

151
00:07:36,700 --> 00:07:40,900
this, this function, right?

152
00:07:41,900 --> 00:07:44,900
The clock is dynamic because we don't know what time stamp.

153
00:07:44,900 --> 00:07:49,100
This is executing at ahead of time and the core would be dynamic if we

154
00:07:49,100 --> 00:07:50,800
were getting it from our dtsc P.

155
00:07:52,200 --> 00:07:55,000
So, you know, there's not much we can really do about that.

156
00:07:55,000 --> 00:08:00,100
But the quid and the and the type or two things we can control.

157
00:08:00,500 --> 00:08:03,300
So the way we were doing the Grid in that right, is what

158
00:08:03,500 --> 00:08:07,300
Doing is we concatenate a bunch of things together to produce?

159
00:08:08,900 --> 00:08:10,000
That piece of information.

160
00:08:10,000 --> 00:08:12,100
And so you can kind of see here.

161
00:08:12,100 --> 00:08:16,200
We've got record debug and event and that's what calls this macro.

162
00:08:16,200 --> 00:08:17,800
You can see that we pass it.

163
00:08:17,800 --> 00:08:19,900
Like this thing like debug name, for example, right.

164
00:08:19,900 --> 00:08:24,200
And you can see how debug name works is debug name, concatenates,

165
00:08:24,200 --> 00:08:28,400
these strings together to make a single string and that single string

166
00:08:28,400 --> 00:08:29,300
is made at compile time.

167
00:08:29,300 --> 00:08:34,799
So that way we stuff the file, the line, the counter and whatever the

168
00:08:34,799 --> 00:08:38,100
name part is we stuff all of that stuff in there.

169
00:08:39,000 --> 00:08:42,100
like right and so that allows us

170
00:08:44,600 --> 00:08:48,300
To get all of that information into a single string, that's produced a

171
00:08:48,300 --> 00:08:49,000
compile time.

172
00:08:49,000 --> 00:08:54,500
So that when we hit this debug event, we don't spend any time storing

173
00:08:54,500 --> 00:08:55,300
information.

174
00:08:55,600 --> 00:08:58,700
We didn't need to store, right?

175
00:09:01,100 --> 00:09:03,100
Where's our problem with that?

176
00:09:03,300 --> 00:09:06,600
Well, the problem is that the reason that that works, is this function

177
00:09:06,600 --> 00:09:09,300
macro here that we're using

178
00:09:10,800 --> 00:09:12,000
In visual studio.

179
00:09:12,600 --> 00:09:18,200
And in my opinion correctly, not to play favorites, but I disapprove

180
00:09:18,200 --> 00:09:20,300
of the way clang has decided to do this.

181
00:09:21,700 --> 00:09:26,900
It is correctly, a static known string at compile time, right?

182
00:09:27,500 --> 00:09:33,000
Just like file is right, what that means?

183
00:09:33,000 --> 00:09:37,300
Is that you can use neighbored concatenation on it and it will work.

184
00:09:37,300 --> 00:09:39,500
Now, for those of you who haven't,

185
00:09:40,600 --> 00:09:45,800
Like had a lot of experience with this or, you know, like maybe you've

186
00:09:45,800 --> 00:09:49,600
never taken really much time to consider this because, you know, it's

187
00:09:49,600 --> 00:09:53,600
certainly in the esoterica of C.

188
00:09:53,800 --> 00:09:58,500
But if you know, I was to go ahead and say string equals Foo

189
00:09:59,700 --> 00:10:00,000
Right?

190
00:10:00,000 --> 00:10:03,200
You can see that, there's a line of C code that I might write.

191
00:10:03,700 --> 00:10:06,800
If I was to go in and take a look at what's going on in the debugger

192
00:10:06,800 --> 00:10:09,800
here in handmade dot CPP.

193
00:10:10,300 --> 00:10:11,600
Let's just take a look at right.

194
00:10:11,600 --> 00:10:12,400
What that does.

195
00:10:12,400 --> 00:10:16,500
So here is I'm going to step in here and I'm just going to take a look

196
00:10:16,600 --> 00:10:18,100
at what string is right.

197
00:10:18,200 --> 00:10:21,800
And you can see that with string is is it's just a pointer to a

198
00:10:21,800 --> 00:10:24,100
location in memory that stores Foo, right.

199
00:10:24,100 --> 00:10:25,900
And that's exactly what we would expect, right?

200
00:10:25,900 --> 00:10:27,800
There's the data for it.

201
00:10:27,800 --> 00:10:29,100
In fact, it's for long, right?

202
00:10:29,100 --> 00:10:29,400
Because there's

203
00:10:29,500 --> 00:10:31,700
Mel Terminator that it's going to put on there as well right.

204
00:10:32,800 --> 00:10:37,800
Now, if on the other hand I was to say like, oh also, I would like to

205
00:10:37,800 --> 00:10:39,400
do a bar there.

206
00:10:39,700 --> 00:10:42,800
I can put two strings next to each other in this fashion and the

207
00:10:42,800 --> 00:10:45,600
compiler will automatically weld the two strings together.

208
00:10:45,600 --> 00:10:47,900
Again, this is not being done at runtime.

209
00:10:48,200 --> 00:10:52,000
Like it would be in like PHP or something or with a string class.

210
00:10:52,000 --> 00:10:55,200
This is actually going to compile time, so see if I come in here now.

211
00:10:56,200 --> 00:10:59,500
What you'll see is that actually nothing.

212
00:10:59,800 --> 00:11:02,600
And again we can even look at the disassembly here just to demonstrate

213
00:11:02,600 --> 00:11:03,400
what's going on.

214
00:11:03,600 --> 00:11:04,200
You can see that.

215
00:11:04,200 --> 00:11:07,100
No welding of the strings happens at all.

216
00:11:07,100 --> 00:11:11,500
All we're doing is loading a single constant pointer and when we load

217
00:11:11,500 --> 00:11:14,500
that pointer here is what we're pointing to.

218
00:11:14,700 --> 00:11:18,100
So, the compiler has pre combined those two strings together.

219
00:11:18,100 --> 00:11:23,100
Stuck that into our executable as a piece of data and all we have to

220
00:11:23,100 --> 00:11:23,800
do to access.

221
00:11:23,800 --> 00:11:25,800
It is just load, just one pointer which is

222
00:11:26,000 --> 00:11:28,900
Then exactly what we want in the debug case.

223
00:11:29,600 --> 00:11:32,800
And so what you can see is that if I were to change this to some

224
00:11:32,800 --> 00:11:37,300
pre-processor string like underscore underscore file, then when we

225
00:11:37,300 --> 00:11:40,900
take a look at what happens here and we step in, you can see that it's

226
00:11:40,900 --> 00:11:43,900
actually, well, I can just do it this way.

227
00:11:44,700 --> 00:11:49,400
You can see that it's actually concatenated the file on there, get rid

228
00:11:49,400 --> 00:11:55,000
of that truncation, it's concatenated, the file onto the end of my

229
00:11:55,000 --> 00:11:55,500
string, which is

230
00:11:55,900 --> 00:11:56,200
actly.

231
00:11:56,200 --> 00:11:57,800
What I said it would do, right?

232
00:11:57,800 --> 00:11:59,900
It's like it takes these two strings.

233
00:12:00,000 --> 00:12:02,400
Both of them together puts that as one piece of data into the

234
00:12:02,400 --> 00:12:05,600
executable, and then again, if we look at what has to happen in the

235
00:12:05,600 --> 00:12:07,400
disassembly, nothing happens.

236
00:12:07,400 --> 00:12:08,400
Other than the load.

237
00:12:08,500 --> 00:12:09,800
That's all that happens.

238
00:12:10,500 --> 00:12:15,700
Is we load up a particular constant pointer to this string that's been

239
00:12:15,700 --> 00:12:19,100
stored in our executable already and that's all that has to happen,

240
00:12:19,300 --> 00:12:19,700
right?

241
00:12:21,100 --> 00:12:22,500
No combinations there at all.

242
00:12:23,700 --> 00:12:25,400
So that's very important, right?

243
00:12:26,200 --> 00:12:30,600
And if we want in Visual Studio to do that with function, we can

244
00:12:30,900 --> 00:12:31,400
write.

245
00:12:31,500 --> 00:12:32,700
So there's my function.

246
00:12:33,200 --> 00:12:36,700
And if we look at what it says, now, you can see it just puts game

247
00:12:36,700 --> 00:12:38,600
update and render on the end of that, right?

248
00:12:38,800 --> 00:12:42,100
So, in my opinion, it's kind of obvious that, that's how it should

249
00:12:42,100 --> 00:12:42,400
work.

250
00:12:42,400 --> 00:12:44,400
The reason that I think it's kind of obvious that that's how it should

251
00:12:44,400 --> 00:12:47,000
work is, that's how file worked.

252
00:12:47,200 --> 00:12:49,600
So you would expect underscore underscore function and I was going to

253
00:12:49,600 --> 00:12:50,700
sort of file to be the same

254
00:12:51,000 --> 00:12:53,400
You would like to be able to have this automatic welding

255
00:12:53,400 --> 00:12:57,700
functionality, certainly and it's pretty easy for the programmer if

256
00:12:57,700 --> 00:13:00,500
they want something else to create that something else, if you want it

257
00:13:00,500 --> 00:13:03,500
to be a local variable, it'd be pretty easy for you to generate a

258
00:13:03,500 --> 00:13:05,100
local variable and stick it in there.

259
00:13:05,500 --> 00:13:08,900
Whereas, the reverse is actually impossible, there's no way for you to

260
00:13:08,900 --> 00:13:14,000
turn that into something that is stored without doing actual work at

261
00:13:14,000 --> 00:13:15,500
that point, right?

262
00:13:16,800 --> 00:13:20,000
Now, so that all works great and visual studio, did it the right way,

263
00:13:20,000 --> 00:13:20,700
in my opinion.

264
00:13:20,700 --> 00:13:25,400
However, if we take a look at what happens with function, apparently,

265
00:13:25,400 --> 00:13:30,500
on Vision, clang, rather what happens is,

266
00:13:33,800 --> 00:13:38,100
Function is declared as a variable and it can't be concatenated with

267
00:13:38,100 --> 00:13:39,700
other literals, right?

268
00:13:39,700 --> 00:13:46,600
And so I don't know if there's any documentation that anyone's linked

269
00:13:46,600 --> 00:13:51,600
to here for this doesn't look like it.

270
00:13:51,600 --> 00:13:57,100
But let's see here at GCC that's going to function because I wanted to

271
00:13:57,100 --> 00:13:57,500
kind of show you.

272
00:13:57,500 --> 00:14:02,000
And I since I said, I've never looked at this aspect of clang before

273
00:14:02,000 --> 00:14:03,600
I'm going to go ahead.

274
00:14:03,800 --> 00:14:04,900
See if I can find it.

275
00:14:06,300 --> 00:14:08,600
Okay, so the inner fire underscore underscore function.

276
00:14:08,600 --> 00:14:11,600
Plus the declared by the translator as as if immediately following the

277
00:14:11,600 --> 00:14:14,500
opening brace, which function the Declaration Sadiq Khan scare

278
00:14:14,500 --> 00:14:16,500
underscore underscore Funk equals function name.

279
00:14:16,900 --> 00:14:22,400
Right function is another name for Funk provided for backward,

280
00:14:22,400 --> 00:14:25,600
compatibility with older versions of GCC, right?

281
00:14:26,300 --> 00:14:30,200
So what that means is that when we do underscore underscore function,

282
00:14:30,200 --> 00:14:32,700
and again, I'm looking at the GCC documentation, but only because

283
00:14:32,700 --> 00:14:33,600
clang follows the G.

284
00:14:33,800 --> 00:14:36,000
SEC specs, usually.

285
00:14:39,200 --> 00:14:44,800
What that means is that we don't actually have a way of referring to

286
00:14:44,800 --> 00:14:46,800
this directly, right?

287
00:14:47,200 --> 00:14:51,800
All we have is a way of accessing a faux local variable, right?

288
00:14:52,300 --> 00:14:56,000
So you have to imagine there's a thing that looked effectively like

289
00:14:56,000 --> 00:14:56,400
this.

290
00:14:56,400 --> 00:14:58,900
Now it's not necessarily actually this because like the compiler just

291
00:14:58,900 --> 00:14:59,800
saying it's as if this

292
00:15:00,000 --> 00:15:00,400
True.

293
00:15:00,600 --> 00:15:04,600
So it doesn't mean that it actually is doing static initialization in

294
00:15:04,600 --> 00:15:05,400
exactly this way.

295
00:15:05,500 --> 00:15:07,600
But it sags If This Were true, right?

296
00:15:09,100 --> 00:15:12,500
And so now what you can see is if that was actually what we had,

297
00:15:12,600 --> 00:15:13,100
right?

298
00:15:13,200 --> 00:15:15,000
If that is what we were dealing with here.

299
00:15:15,100 --> 00:15:17,900
Oops, I didn't mean to do that in this window.

300
00:15:19,100 --> 00:15:19,600
My bad.

301
00:15:23,400 --> 00:15:24,000
Close.

302
00:15:25,400 --> 00:15:27,100
Do do there we go.

303
00:15:28,500 --> 00:15:31,200
So, if that's what we actually had their right, if what we were

304
00:15:31,200 --> 00:15:34,000
actually dealing with with something where we said, like, okay, you

305
00:15:34,000 --> 00:15:36,500
know, we've got funk and there it is.

306
00:15:37,000 --> 00:15:37,400
Right?

307
00:15:38,500 --> 00:15:42,700
What you can see is that when we come through here, we can't even

308
00:15:42,700 --> 00:15:43,500
compile this.

309
00:15:43,900 --> 00:15:46,400
And the reason that we can't compile, this is because this is a

310
00:15:46,400 --> 00:15:47,900
variable, right?

311
00:15:47,900 --> 00:15:53,800
This is an actual just a variable, and while C++ is compiler, allows

312
00:15:53,800 --> 00:15:55,000
us to juxtapose two.

313
00:15:55,200 --> 00:15:59,100
Constant strings next to each other and Weld and it will weld them

314
00:15:59,100 --> 00:15:59,600
together.

315
00:15:59,700 --> 00:16:03,500
It does not allow us to to juxtapose two variables together and weld

316
00:16:03,500 --> 00:16:04,100
them together.

317
00:16:04,300 --> 00:16:08,700
Even if one of those variables is a const string, that it can see the

318
00:16:08,700 --> 00:16:10,900
Declaration of for some reason.

319
00:16:10,900 --> 00:16:13,800
And I guess, I don't know why this he'll suspect doesn't allow this.

320
00:16:13,800 --> 00:16:17,000
But for some reason that is disallowed, right?

321
00:16:18,200 --> 00:16:22,200
The spec does not say if the compiler can determine that a string is

322
00:16:22,200 --> 00:16:25,000
constant and knows what the string is then, it can concatenate it.

323
00:16:25,000 --> 00:16:29,100
As if it were a constant ring in that place, it does not say that.

324
00:16:30,000 --> 00:16:35,300
So this is effectively what's happening in our llvm based Builds an

325
00:16:35,300 --> 00:16:38,400
ark Lang based builds is that it seeing this.

326
00:16:38,500 --> 00:16:42,800
It's a seeing it as effectively as if we had done this, right?

327
00:16:43,100 --> 00:16:46,900
And it's it producing compile errors, that might not be exactly this

328
00:16:46,900 --> 00:16:47,700
compile error, but they're

329
00:16:48,000 --> 00:16:51,600
Be basic, basically the same compile, error, same type of compile

330
00:16:51,600 --> 00:16:52,000
error.

331
00:16:52,000 --> 00:16:57,000
Hey, you've placed a constant string next to a string pointer and I

332
00:16:57,000 --> 00:16:58,700
don't know what to do with that.

333
00:16:58,700 --> 00:17:02,100
That is not an operation that I can handle.

334
00:17:02,600 --> 00:17:03,000
Okay?

335
00:17:04,300 --> 00:17:07,599
so that is what's currently preventing our llvm build from working,

336
00:17:08,400 --> 00:17:09,700
started playing bass build

337
00:17:11,900 --> 00:17:13,300
From working out of the box.

338
00:17:15,000 --> 00:17:18,500
And like I said, you can turn the debug system off but if people want

339
00:17:18,500 --> 00:17:22,200
the device system on which, you know, why wouldn't you want the debug

340
00:17:22,200 --> 00:17:23,599
system on if you're debugging?

341
00:17:25,099 --> 00:17:27,599
Then you don't have that opportunity.

342
00:17:28,099 --> 00:17:32,200
So if we take a look at what's going on here, our goal is to figure

343
00:17:32,200 --> 00:17:34,100
out some way to work around this.

344
00:17:35,400 --> 00:17:39,000
And to be honest I'm not really sure what the easiest way to work

345
00:17:39,000 --> 00:17:44,700
around it is obviously there's a very simple workaround and I guess we

346
00:17:44,700 --> 00:17:45,700
can read here in a second.

347
00:17:45,700 --> 00:17:49,100
What the people suggested workarounds are but let me just talk about

348
00:17:49,100 --> 00:17:50,200
it real quickly.

349
00:17:51,100 --> 00:17:53,500
The most straightforward way to work around.

350
00:17:53,500 --> 00:17:57,500
It is to just spend another move on every debug event.

351
00:17:57,500 --> 00:17:59,500
Recording the function name separately.

352
00:18:00,000 --> 00:18:00,500
Right.

353
00:18:01,800 --> 00:18:06,300
Because the only reason we concatenate all these together, rather than

354
00:18:06,300 --> 00:18:11,000
just saving them separately, is to reduce the amount of time that the

355
00:18:11,000 --> 00:18:12,100
processor has to take.

356
00:18:12,100 --> 00:18:15,400
Every time we enter one of these debug events, right?

357
00:18:15,500 --> 00:18:17,000
That was the only reason we were doing that.

358
00:18:19,400 --> 00:18:21,500
That's probably the best approach here.

359
00:18:25,000 --> 00:18:27,100
Because I can't think of what else we would do.

360
00:18:56,100 --> 00:18:57,100
Hmm.

361
00:18:58,200 --> 00:18:59,100
But I'm thinking

362
00:19:14,000 --> 00:19:16,400
yeah, I can't think of really a whole lot else that we can do and

363
00:19:16,400 --> 00:19:18,200
still preserve the function name.

364
00:19:24,000 --> 00:19:25,400
But let's see what people suggest.

365
00:19:28,400 --> 00:19:33,200
Let's see, use the full function signature as grid.

366
00:19:36,000 --> 00:19:36,900
What does that mean?

367
00:19:36,900 --> 00:19:37,500
Let's see.

368
00:19:38,500 --> 00:19:39,600
How about a not selling approach.

369
00:19:39,600 --> 00:19:42,600
In the case of time function, you could just use pretty function in

370
00:19:42,600 --> 00:19:44,900
place of debug name function when compiling Clancy.

371
00:19:44,900 --> 00:19:46,600
It's still subject to the same kind of flirtatious.

372
00:19:46,600 --> 00:19:49,500
It's just a character, but you wouldn't need to concatenate since it

373
00:19:49,500 --> 00:19:52,000
gives you the full function signature, which should be enough to

374
00:19:52,000 --> 00:19:54,900
disambiguate overloads, unless there's another reason to use

375
00:19:54,900 --> 00:19:55,200
debugging.

376
00:19:55,200 --> 00:19:58,500
Macro obviously the resulting output will be somewhat verbose because

377
00:19:58,500 --> 00:20:00,800
it won't be neatly parsed, like the default path, but otherwise,

378
00:20:00,800 --> 00:20:01,300
that's your problem.

379
00:20:01,300 --> 00:20:03,000
So maybe something like pretty function.

380
00:20:03,800 --> 00:20:05,400
So what is pretty function?

381
00:20:05,400 --> 00:20:05,700
Because

382
00:20:05,800 --> 00:20:08,400
I don't think I've ever used that before it looked like it was

383
00:20:08,400 --> 00:20:09,400
mentioned in that page.

384
00:20:09,400 --> 00:20:13,900
I was just looking at moments ago so we can go read about it.

385
00:20:16,600 --> 00:20:18,400
It evaluates the string, top level.

386
00:20:18,900 --> 00:20:21,000
It was it contains the signature of the function as well as bear

387
00:20:21,000 --> 00:20:21,500
named.

388
00:20:21,700 --> 00:20:26,800
For example, this program gives you output void a sub it, okay.

389
00:20:26,800 --> 00:20:32,700
So it's just a, it's all it is, is just more, it's a non-ambiguous

390
00:20:32,700 --> 00:20:34,500
version of the thing, right?

391
00:20:34,500 --> 00:20:38,700
It's it basically includes the return value and the parameters and the

392
00:20:38,700 --> 00:20:39,500
scope.

393
00:20:41,400 --> 00:20:45,000
So, at that point, you would know that, you know, too overloaded

394
00:20:45,000 --> 00:20:47,700
functions would not have the same function name.

395
00:20:49,300 --> 00:20:56,800
So that's not bad, but we might want the file in line number for other

396
00:20:56,800 --> 00:20:58,100
reasons, potentially,

397
00:21:00,500 --> 00:21:02,300
Although maybe we don't, I don't know.

398
00:21:02,800 --> 00:21:04,000
Let's think about that.

399
00:21:10,400 --> 00:21:10,900
I don't know.

400
00:21:10,900 --> 00:21:14,200
I mean that that you can see why that has some attraction because we

401
00:21:14,200 --> 00:21:17,100
would be able to always use that we could still parse it if we wanted

402
00:21:17,100 --> 00:21:21,200
to produce a cleaner function name at the end of the day.

403
00:21:22,000 --> 00:21:24,500
And so then the question is, do we need the file and line number for

404
00:21:24,500 --> 00:21:24,800
anything?

405
00:21:24,800 --> 00:21:27,700
It would be nice to have the file on line number as well.

406
00:21:27,700 --> 00:21:29,000
I feel like butt.

407
00:21:31,000 --> 00:21:31,700
Yeah.

408
00:21:41,300 --> 00:21:42,100
But I could see that.

409
00:21:42,200 --> 00:21:44,100
I mean, so okay, so keep that in mind.

410
00:21:44,100 --> 00:21:44,900
That's something.

411
00:21:46,700 --> 00:21:49,700
It looks like number two is what I just suggested which was okay.

412
00:21:49,700 --> 00:21:53,400
We just save the function value separately, right?

413
00:21:54,800 --> 00:21:58,600
And the final one is just we don't get it, we don't we don't get the

414
00:21:58,600 --> 00:21:59,500
function name at all.

415
00:22:00,700 --> 00:22:03,700
which isn't really a, I wouldn't consider three or really an option

416
00:22:03,700 --> 00:22:05,300
because I definitely want the function name

417
00:22:06,400 --> 00:22:09,800
As far as concatenating function of transmitting, a preprocessor does

418
00:22:09,800 --> 00:22:13,500
not seem like a good idea because I don't really want to go that route

419
00:22:15,400 --> 00:22:17,400
and concatenate the strings at runtime.

420
00:22:17,400 --> 00:22:19,900
I also don't think is necessarily good, although maybe they had a way

421
00:22:19,900 --> 00:22:21,100
to do it, that would be cleaner.

422
00:22:22,600 --> 00:22:25,600
Is there any certain to Define function as a as a very aware than a

423
00:22:25,600 --> 00:22:27,400
macroeconomic state of the poor choice?

424
00:22:29,900 --> 00:22:31,200
Right, that's not.

425
00:22:31,500 --> 00:22:32,600
Where is the concatenated?

426
00:22:32,600 --> 00:22:33,600
Runtime suggestion?

427
00:22:33,600 --> 00:22:34,800
I don't know where that is.

428
00:22:48,900 --> 00:22:51,500
so, I don't know where the suggestion to concatenate them at runtime

429
00:22:51,500 --> 00:22:52,000
is

430
00:22:53,800 --> 00:22:57,700
So it looks like this it looks like this is somebody at this is just

431
00:22:57,700 --> 00:22:58,800
this block of code.

432
00:23:00,300 --> 00:23:00,800
I see.

433
00:23:02,000 --> 00:23:03,500
And so, how did they do that?

434
00:23:10,300 --> 00:23:12,700
So, it looks like what they did.

435
00:23:18,500 --> 00:23:18,900
Hmm.

436
00:23:18,900 --> 00:23:24,200
Okay, but this this joy and strings thing, this is going to have to

437
00:23:24,200 --> 00:23:27,100
happen every time through here which would be awful, right?

438
00:23:27,100 --> 00:23:28,600
We definitely don't want that.

439
00:23:31,200 --> 00:23:31,800
Right?

440
00:23:33,300 --> 00:23:35,700
Because that means every time we enter a time to function, we can

441
00:23:35,700 --> 00:23:37,400
catenate them and that's no good.

442
00:23:38,100 --> 00:23:39,200
So we definitely want to do that.

443
00:23:39,200 --> 00:23:42,200
We could introduce a static initializer that would only happen the

444
00:23:42,200 --> 00:23:44,600
first time through but even that's not great.

445
00:23:53,000 --> 00:23:55,900
Yeah, so I don't know.

446
00:23:55,900 --> 00:23:59,800
It seems like maybe pretty function is the most sensible way.

447
00:24:00,000 --> 00:24:01,400
To go about doing this.

448
00:24:06,300 --> 00:24:11,200
Because yeah, then we can just record still one, only one thing and

449
00:24:11,200 --> 00:24:17,500
let that be the the official signature of the of the op.

450
00:24:19,100 --> 00:24:22,700
I guess, what I'll say is I don't know if pretty function

451
00:24:27,100 --> 00:24:30,900
I don't know if pretty function exists on Visual Studio, probably not

452
00:24:30,900 --> 00:24:34,900
at this point in time, but, you know, maybe it would in the future.

453
00:24:35,100 --> 00:24:38,300
So we'd probably have to still have to sort of paths.

454
00:24:38,300 --> 00:24:42,300
We'd have to support the debug name, the concatenated, version of the

455
00:24:42,300 --> 00:24:49,900
debug name for visual studio, and then pretty function for for GCC /

456
00:24:49,900 --> 00:24:53,400
clang, because I'm assuming that if we wanted to.

457
00:24:53,400 --> 00:24:55,300
And here, there is no.

458
00:24:57,200 --> 00:24:59,000
Like this is not a thing, right?

459
00:25:00,200 --> 00:25:04,700
Yeah, so there's no real way to get that piece of information,

460
00:25:04,700 --> 00:25:06,600
although I guess now I think about it.

461
00:25:06,600 --> 00:25:11,600
I've never looked you know, Visual Studio, may just call it something

462
00:25:11,600 --> 00:25:12,100
else.

463
00:25:12,800 --> 00:25:17,600
So let's take a look and, you know, maybe just see what they have, if

464
00:25:17,600 --> 00:25:18,900
there's anything in particular.

465
00:25:22,300 --> 00:25:25,800
All right, so they've got some specific ones here.

466
00:25:27,400 --> 00:25:31,800
Yeah which are just talking about some other things that are

467
00:25:32,000 --> 00:25:34,900
interesting but not relevant to what we're doing at the moment.

468
00:25:36,400 --> 00:25:42,800
So here this, this looks like it it kind of would be similar.

469
00:25:43,300 --> 00:25:47,300
You can see that the function signature there you go.

470
00:25:47,300 --> 00:25:50,500
Funk Sig Funk Sig looks like roughly

471
00:25:50,700 --> 00:25:51,400
Same thing.

472
00:25:52,000 --> 00:25:59,400
So if we wanted to we could have Funk Sig be what we use instead of

473
00:26:00,200 --> 00:26:05,600
instead of pretty function and then that would keep both paths roughly

474
00:26:05,600 --> 00:26:06,600
equivalent.

475
00:26:07,000 --> 00:26:12,200
So you know, that's it may not be my first choice.

476
00:26:12,200 --> 00:26:16,000
My first choice is I think the way we were doing it here and I again I

477
00:26:16,000 --> 00:26:20,500
would I would say that it's really a black mark on clang to not

478
00:26:20,600 --> 00:26:21,700
Not support that.

479
00:26:21,800 --> 00:26:24,100
You know, it's not hard to Define another.

480
00:26:26,500 --> 00:26:27,500
Variable there.

481
00:26:28,500 --> 00:26:31,100
That's, that's a properly done string.

482
00:26:31,100 --> 00:26:33,600
You know, if you want to keep the static version fine.

483
00:26:33,600 --> 00:26:38,000
But, you know, you should support a way to get it as a as a constant

484
00:26:38,000 --> 00:26:38,900
string, for sure.

485
00:26:39,800 --> 00:26:42,700
And so I feel like that's really something they should fix, I don't

486
00:26:42,700 --> 00:26:44,100
know, maybe it's something we can fix.

487
00:26:44,300 --> 00:26:47,300
Do you think if we just went and downloaded the, the clang source code

488
00:26:47,300 --> 00:26:48,400
and added that in there?

489
00:26:48,400 --> 00:26:52,000
And then set sent a pull request thing with?

490
00:26:52,000 --> 00:26:54,300
Listen, probably not, I'm guessing.

491
00:26:54,300 --> 00:26:56,100
We'd have to go 12 rounds with somebody.

492
00:26:56,300 --> 00:26:59,300
an argue with, with a bunch of people on a mailing list to get that in

493
00:26:59,300 --> 00:26:59,900
there, but

494
00:27:01,200 --> 00:27:06,800
You know, I suppose we could try, but in lieu of that, you know?

495
00:27:06,800 --> 00:27:10,800
So if I was to go in here and say, all right, let's take a look and

496
00:27:10,800 --> 00:27:12,400
see what we can do.

497
00:27:13,900 --> 00:27:14,900
To make this happen.

498
00:27:15,200 --> 00:27:21,600
Let's take a look inside our debug system and just see where we parse

499
00:27:21,600 --> 00:27:22,900
those debug names.

500
00:27:23,000 --> 00:27:23,700
Here you go.

501
00:27:24,500 --> 00:27:28,300
So when we do our debug personname, you can see we do our elected line

502
00:27:28,300 --> 00:27:33,600
number miss here and I'm just curious if we use that for anything.

503
00:27:33,600 --> 00:27:38,900
So, okay, so at the moment, I don't think we do and, and that's good,

504
00:27:38,900 --> 00:27:39,100
right?

505
00:27:39,100 --> 00:27:42,200
Because if we had been making a lot of use of that, then it would be a

506
00:27:42,200 --> 00:27:43,200
bummer if

507
00:27:43,300 --> 00:27:45,100
With that was something that we wanted.

508
00:27:45,400 --> 00:27:48,500
And so since it's not something we're really paying attention to, I

509
00:27:48,500 --> 00:27:55,300
feel like it's, I'm okay, maybe with with having that go away, right?

510
00:27:58,500 --> 00:27:59,100
Okay.

511
00:28:03,100 --> 00:28:07,800
All right, so let's just just see if we go down this route, if we get

512
00:28:07,800 --> 00:28:11,800
to any, if we get to anywhere in particular, that is going to be, you

513
00:28:11,800 --> 00:28:16,500
know, kind of a little bit off-putting then we'll go from there.

514
00:28:16,500 --> 00:28:19,300
But let's let's assume that this is going to work, okay?

515
00:28:19,900 --> 00:28:23,700
And we'll sort of just assume that will go with a function signature

516
00:28:23,900 --> 00:28:25,100
based approach.

517
00:28:25,100 --> 00:28:29,600
And we're just we'll just jettison our previous approach of having it

518
00:28:29,600 --> 00:28:32,700
be file name, line number and so on.

519
00:28:33,300 --> 00:28:36,500
Now, the downside of this again, like I said, you know, one of the

520
00:28:36,500 --> 00:28:40,600
reasons that I would have preferred to have this here is because if

521
00:28:40,600 --> 00:28:43,800
you imagine a more robust debug system, like, so let's say we take our

522
00:28:43,800 --> 00:28:46,200
doing system and we go, we want to make this into a really full fledge

523
00:28:46,200 --> 00:28:46,600
thing.

524
00:28:46,600 --> 00:28:49,300
We're gonna spend a bunch of time on it, in addition, to the time

525
00:28:49,300 --> 00:28:52,900
we've already spent, you know, building it out for some reusable, nice

526
00:28:52,900 --> 00:28:53,400
thing.

527
00:28:53,800 --> 00:28:56,500
One of the things you might imagine wanting to do is click on

528
00:28:56,500 --> 00:29:00,800
something, in the debug system and have it jump to the appropriate

529
00:29:00,800 --> 00:29:02,900
location of that thing.

530
00:29:03,500 --> 00:29:05,600
In the source code.

531
00:29:06,000 --> 00:29:09,700
And right now that's trivial for us to do because when we have the

532
00:29:09,700 --> 00:29:12,900
file name and line number, we can just do that, right?

533
00:29:14,000 --> 00:29:17,900
There's no real thing preventing us from doing that.

534
00:29:19,900 --> 00:29:21,700
so, if we had, for example,

535
00:29:24,000 --> 00:29:25,900
In for coder, let's say.

536
00:29:27,300 --> 00:29:31,300
In fact, I don't know Alan Webster probably isn't here today.

537
00:29:33,000 --> 00:29:43,100
But it does sort of seem like, it would be cool to have a standard way

538
00:29:43,100 --> 00:29:49,800
to send like a Windows message to for a coder that says, I would like

539
00:29:49,800 --> 00:29:51,200
to open this file line.

540
00:29:51,200 --> 00:29:55,000
Number combo to jump to it.

541
00:29:55,100 --> 00:29:56,000
Do you know what I mean?

542
00:29:58,000 --> 00:29:58,900
So, I don't know.

543
00:29:58,900 --> 00:29:59,500
There's that.

544
00:30:00,100 --> 00:30:03,200
That's something that would be kind of cool to have any way, you could

545
00:30:03,200 --> 00:30:06,700
imagine constructing that extremely easily because in our debug

546
00:30:06,700 --> 00:30:10,600
system, at present, we have the ability to do that, right?

547
00:30:10,900 --> 00:30:13,400
We have the ability to say, oh, okay.

548
00:30:13,500 --> 00:30:15,000
Here's the file name.

549
00:30:15,100 --> 00:30:16,100
Here's the line number.

550
00:30:16,100 --> 00:30:24,200
So a IDE of any kind can go ahead and jump there and, you know, it

551
00:30:24,200 --> 00:30:26,000
knows where it is in the source code.

552
00:30:26,700 --> 00:30:29,900
But with out that then you would need

553
00:30:30,000 --> 00:30:33,700
Debug info because all we can provide you is the function signature.

554
00:30:36,000 --> 00:30:42,700
And you know at that point you have to be able to parse the pdb figure

555
00:30:42,700 --> 00:30:45,200
out where that function is and then jump to it.

556
00:30:45,200 --> 00:30:49,400
And even then you're not at the line that the debug output occurred at

557
00:30:49,400 --> 00:30:50,900
your just in the functioning.

558
00:30:51,000 --> 00:31:00,300
And so it's not really the sort of the place where you're going to

559
00:31:00,300 --> 00:31:01,000
have like

560
00:31:02,600 --> 00:31:07,400
I don't know, it's basically not the place where you're going to be

561
00:31:07,400 --> 00:31:09,500
able to jump to.

562
00:31:10,100 --> 00:31:13,000
It's not giving you the information you need for most of your tools,

563
00:31:13,200 --> 00:31:13,400
right?

564
00:31:13,400 --> 00:31:14,300
If that makes sense.

565
00:31:15,500 --> 00:31:15,800
Yeah.

566
00:31:15,800 --> 00:31:20,500
So anyway, let's see I would go to

567
00:31:26,900 --> 00:31:27,900
Maybe leave the sin.

568
00:31:27,900 --> 00:31:31,700
I guess the question is do we want to leave this in as the grid for

569
00:31:31,700 --> 00:31:32,800
the other version?

570
00:31:33,200 --> 00:31:38,300
And the answer is maybe, so what we could do is scan for an or, and if

571
00:31:38,300 --> 00:31:41,900
we don't see the or then don't do it right.

572
00:31:42,000 --> 00:31:45,600
And I don't know, maybe maybe that would work just as it is.

573
00:31:45,600 --> 00:31:47,000
I'm not sure, let's find out.

574
00:31:54,500 --> 00:31:55,300
Let's see here.

575
00:32:05,900 --> 00:32:10,200
So if I was to make groups, it's not going to help if I was to make

576
00:32:10,200 --> 00:32:11,500
two different versions of this.

577
00:32:13,600 --> 00:32:16,100
I could just if around just this one block.

578
00:32:19,800 --> 00:32:22,900
And so, in here, when I do my debug names, right?

579
00:32:22,900 --> 00:32:26,800
I guess what we could do is just say, like, okay, if we've got unique

580
00:32:26,800 --> 00:32:32,200
file counter string, like it's doing here, I could just say that this

581
00:32:32,200 --> 00:32:35,500
doesn't try to concatenate anymore.

582
00:32:37,800 --> 00:32:38,300
Right.

583
00:32:40,500 --> 00:32:42,900
Unique file counter string just uses.

584
00:32:49,200 --> 00:32:49,900
Well, you know.

585
00:32:49,900 --> 00:32:50,500
Okay.

586
00:32:50,500 --> 00:32:51,700
I take it back though.

587
00:32:52,700 --> 00:32:53,900
Now that I think about it.

588
00:32:57,400 --> 00:32:59,800
I don't think this actually is going to work.

589
00:33:01,300 --> 00:33:01,900
Right.

590
00:33:02,700 --> 00:33:05,400
Like in theory, I would say,

591
00:33:10,800 --> 00:33:12,400
Let's see here in theory.

592
00:33:12,400 --> 00:33:15,400
I would say that's fine, but the function signature is not going to be

593
00:33:15,400 --> 00:33:15,800
unique.

594
00:33:15,800 --> 00:33:20,000
If you have multiple timed blocks inside something, right?

595
00:33:23,600 --> 00:33:26,300
That's not going to work because let's say, we have multiple time

596
00:33:26,300 --> 00:33:26,500
blocks.

597
00:33:26,500 --> 00:33:28,800
Those signatures are all going to be the same and it's not going to

598
00:33:28,800 --> 00:33:30,300
end up evaluating to a grid.

599
00:33:35,700 --> 00:33:39,400
So yeah, I I don't think so.

600
00:33:51,400 --> 00:33:54,600
So I guess what I would say is it looks to me like really the only

601
00:33:54,600 --> 00:33:57,600
like pretty function isn't really going to be an option because we

602
00:33:57,600 --> 00:34:00,400
would still have to figure out some way to concatenate, pretty

603
00:34:00,400 --> 00:34:01,500
function with a counter.

604
00:34:02,000 --> 00:34:05,100
And since we can't do that that doesn't really help us.

605
00:34:05,100 --> 00:34:07,100
We still end up having to store two things.

606
00:34:07,400 --> 00:34:10,300
We'd have stored the counter and the grid which is not really good

607
00:34:10,300 --> 00:34:11,699
anymore, the counter and the string.

608
00:34:12,000 --> 00:34:14,800
And once we do that, we might as well just ordered the the function as

609
00:34:14,800 --> 00:34:15,600
a separate thing.

610
00:34:19,000 --> 00:34:22,400
Yeah, so unfortunately I think that's just that's just the way it is.

611
00:34:22,400 --> 00:34:25,800
I don't think there's going to be any way around that, so I guess what

612
00:34:25,800 --> 00:34:28,699
we'll do is we'll just say that the debug system has to store one more

613
00:34:28,699 --> 00:34:30,699
piece of information and that's just the way it is.

614
00:34:31,300 --> 00:34:35,500
So there's basically like an event name in addition to the grid and

615
00:34:35,500 --> 00:34:37,100
we'll just sort of make do with that.

616
00:34:37,100 --> 00:34:39,600
I think that's the only really way that we're going to be able to do

617
00:34:39,600 --> 00:34:44,199
it and then when you do unique file counter string you don't get to

618
00:34:44,199 --> 00:34:45,800
pass the name anymore, right?

619
00:34:45,800 --> 00:34:48,500
That name is not going to be available.

620
00:34:49,600 --> 00:34:52,900
And so that's just gone.

621
00:34:53,300 --> 00:34:57,800
And when you call record debug event, you have to pass the name to

622
00:34:57,800 --> 00:35:01,500
record debug event and it will get passed separately.

623
00:35:02,200 --> 00:35:04,300
I think that's the only really thing we can do.

624
00:35:04,300 --> 00:35:06,200
And so it's going to have to look like this.

625
00:35:08,900 --> 00:35:09,400
Right.

626
00:35:10,000 --> 00:35:12,000
I think that's the only, the only option.

627
00:35:12,200 --> 00:35:17,400
So, I'll put a note here from us, which just says like, hey, you know,

628
00:35:17,400 --> 00:35:19,100
in record debug event the name

629
00:35:24,000 --> 00:35:27,400
Is recorded separately now?

630
00:35:28,600 --> 00:35:31,200
to work around the fact that

631
00:35:34,000 --> 00:35:37,100
GCC and clang, don't Define.

632
00:35:38,800 --> 00:35:41,400
Function, as a constant string.

633
00:35:43,100 --> 00:35:49,500
so it can't be compile-time welded into a,

634
00:35:53,500 --> 00:35:55,500
Along with the file.

635
00:35:56,600 --> 00:35:57,100
Line.

636
00:36:02,900 --> 00:36:04,900
And so at that point we're going to have to do this.

637
00:36:05,100 --> 00:36:08,400
That means that the unique file counter string B.

638
00:36:08,700 --> 00:36:13,900
We can leave this sort of route in place if you will and just not do

639
00:36:13,900 --> 00:36:15,700
the concatenation, right?

640
00:36:15,700 --> 00:36:20,100
So that'll just not actually happen and then we just have to make sure

641
00:36:20,100 --> 00:36:23,100
that we pass it in both places and that way, we could re-enable it

642
00:36:23,100 --> 00:36:25,300
again at some point, potentially

643
00:36:27,600 --> 00:36:28,600
If that makes sense.

644
00:36:29,600 --> 00:36:36,000
So when we do stuff like like here, where we do debug begin, you know,

645
00:36:36,000 --> 00:36:37,200
begin Block in that sort of thing.

646
00:36:37,500 --> 00:36:40,200
So we're going to have to have, you know, the name.

647
00:36:41,600 --> 00:36:43,000
Coming as long as well.

648
00:36:43,000 --> 00:36:44,200
Now, there's the name.

649
00:36:46,300 --> 00:36:52,300
And so, you know, these sort of always always has to be passed along

650
00:36:53,900 --> 00:36:56,300
every every time twice essentially, right?

651
00:36:57,200 --> 00:36:59,300
Although I guess that that one's actually end block.

652
00:37:05,900 --> 00:37:07,900
And anytime we're manually doing this.

653
00:37:15,100 --> 00:37:17,000
How is that working with this care star?

654
00:37:17,000 --> 00:37:19,400
Oh, there's that's the grid itself, okay, right?

655
00:37:19,400 --> 00:37:22,700
So if we have the grid itself come in there, then we call begin block.

656
00:37:22,700 --> 00:37:24,700
We actually don't need anything.

657
00:37:24,700 --> 00:37:28,000
There we can, the name can be zeroed out because we've already

658
00:37:28,000 --> 00:37:29,800
constructed a grid.

659
00:37:29,800 --> 00:37:31,100
That's what we needed.

660
00:37:32,100 --> 00:37:32,500
Right.

661
00:37:37,600 --> 00:37:42,400
And so now I need to add to our debug event.

662
00:37:43,000 --> 00:37:43,800
Here we go.

663
00:37:48,900 --> 00:37:52,000
and here, and

664
00:37:56,500 --> 00:38:02,200
Not enough actual parameters for macro record debug Event, open data

665
00:38:02,200 --> 00:38:03,900
block those data block.

666
00:38:11,400 --> 00:38:15,200
So, I guess, when we pass the name here to debug data block again,

667
00:38:15,200 --> 00:38:19,000
like I feel like so how are we getting this for debug data?

668
00:38:19,000 --> 00:38:21,700
But I guess it just passes that name and the name is all there is so

669
00:38:21,700 --> 00:38:25,600
at that point, I guess we could, we could pass them duel, but I guess

670
00:38:25,600 --> 00:38:27,800
maybe I'll just pass them as zeros here.

671
00:38:28,200 --> 00:38:32,700
The more correct thing perhaps would be to put the well, no.

672
00:38:32,700 --> 00:38:34,500
Okay, we'll just, we'll just leave it at that.

673
00:38:34,500 --> 00:38:35,500
That that seems fine.

674
00:38:38,100 --> 00:38:38,600
So yeah.

675
00:38:39,600 --> 00:38:45,800
I thought just get passed twice and so in debug value not enough

676
00:38:45,800 --> 00:38:46,600
parameters.

677
00:38:46,600 --> 00:38:49,000
So where is debug value?

678
00:38:50,100 --> 00:38:50,700
There we go.

679
00:38:51,600 --> 00:38:55,000
So in here you can see us passing these things.

680
00:38:55,000 --> 00:38:59,400
Again it's just like kind of a waste that exercise right but where

681
00:39:00,700 --> 00:39:01,900
sort of having to

682
00:39:06,900 --> 00:39:08,000
having to make these things.

683
00:39:08,000 --> 00:39:10,700
I don't know if that's going to cause a problem because this may not

684
00:39:10,700 --> 00:39:11,900
be unique anymore.

685
00:39:15,400 --> 00:39:16,200
I don't.

686
00:39:17,300 --> 00:39:19,500
Remember enough about how we were using.

687
00:39:19,500 --> 00:39:24,800
It looks like debug named value is not used anymore so maybe we can

688
00:39:24,800 --> 00:39:25,800
just get rid of it.

689
00:39:26,100 --> 00:39:27,600
Let's find out if that's true.

690
00:39:32,800 --> 00:39:33,100
Yeah.

691
00:39:34,300 --> 00:39:39,200
So, debug begin data, block not enough parameters for debug.

692
00:39:39,300 --> 00:39:42,100
Okay, so we just need again to begin.

693
00:39:44,300 --> 00:39:45,400
Data block.

694
00:39:47,200 --> 00:39:50,500
So, here we are in that, and that looks like it just ends there.

695
00:39:50,500 --> 00:39:52,500
So again, that's probably fine.

696
00:39:53,100 --> 00:39:56,700
We just need to pass that name a second time.

697
00:39:59,800 --> 00:40:00,600
Let's see.

698
00:40:00,700 --> 00:40:05,700
So these are in the debug b32, like, all of those things, right?

699
00:40:05,700 --> 00:40:07,000
When there's get passed down.

700
00:40:07,800 --> 00:40:10,500
So, let's take a look at those Hoops.

701
00:40:11,500 --> 00:40:15,500
Keep you to write.

702
00:40:15,500 --> 00:40:19,600
So, all of these right that are passing the debug name with the pound

703
00:40:19,600 --> 00:40:20,400
value stuff.

704
00:40:20,600 --> 00:40:27,800
Again, I think those just need to be duped out, but that's really all

705
00:40:27,800 --> 00:40:28,600
that they would have to have

706
00:40:28,700 --> 00:40:29,600
I've been I guess.

707
00:40:30,900 --> 00:40:32,200
What else we got here?

708
00:40:32,200 --> 00:40:33,500
UI element.

709
00:40:43,900 --> 00:40:44,300
Here.

710
00:40:47,300 --> 00:40:48,300
Where is that?

711
00:40:49,500 --> 00:40:50,100
About you.

712
00:40:50,100 --> 00:40:50,800
I own it.

713
00:40:51,700 --> 00:40:54,600
Oh yeah, it's just right there.

714
00:41:01,800 --> 00:41:08,100
And let's see, record debug events for here, debug, and data block

715
00:41:08,100 --> 00:41:09,600
that should have handled it automatically.

716
00:41:09,600 --> 00:41:13,800
So I must have messed up the, debug, and data Block B.

717
00:41:14,800 --> 00:41:16,800
Yeah, it looks like it just needs to get past a second.

718
00:41:21,400 --> 00:41:22,900
Let's see.

719
00:41:23,000 --> 00:41:24,900
No Object file generated, not enough.

720
00:41:24,900 --> 00:41:32,400
Actual parameters for macro record, debug event and the semicolon.

721
00:41:32,700 --> 00:41:35,000
So that's frame marker.

722
00:41:39,800 --> 00:41:45,300
All right, so that's just going to pass that as the name a second time

723
00:41:45,300 --> 00:41:45,900
again.

724
00:41:46,400 --> 00:41:51,600
So now everything should get past twice and let's go into the, parse

725
00:41:51,600 --> 00:41:55,900
debug name stuff inside the debug system here.

726
00:41:56,600 --> 00:41:59,900
And essentially, this part is the part that's going to change.

727
00:42:00,000 --> 00:42:00,300
Tried.

728
00:42:00,300 --> 00:42:06,500
Because we were parsing the good before and, you know, sort of keeping

729
00:42:06,500 --> 00:42:11,500
a bunch of track of like, where we are at the different parts and the

730
00:42:11,500 --> 00:42:12,200
parts name.

731
00:42:13,100 --> 00:42:16,000
And so, I think, what we want to do now is just say, like, okay,

732
00:42:17,400 --> 00:42:20,800
when we go through, our are parsed name here.

733
00:42:21,000 --> 00:42:25,400
Instead, our name link stuff is not going to actually be based on this

734
00:42:25,400 --> 00:42:26,000
at all.

735
00:42:26,100 --> 00:42:30,700
Our name, length stuff is going to be based on the name field of the

736
00:42:31,000 --> 00:42:32,400
debug event that comes in.

737
00:42:32,900 --> 00:42:37,400
And so, when we say debug personname, which I guess, if you take a

738
00:42:37,400 --> 00:42:40,900
look here, we have to kind of

739
00:42:45,200 --> 00:42:49,200
We have to pass in a name for it to actually produce the parts name

740
00:42:49,200 --> 00:42:49,800
for us.

741
00:42:50,100 --> 00:42:53,100
So when we do this, it's going to return, it returns a bunch of stuff

742
00:42:53,100 --> 00:42:55,500
like the hash value and things like that.

743
00:42:57,100 --> 00:43:02,600
That we want but it can't actually get us back this part of the name

744
00:43:03,200 --> 00:43:07,100
without us sort of passing that additional value in there, right?

745
00:43:07,900 --> 00:43:11,300
And so what I think we want to do is basically say like, you know,

746
00:43:12,700 --> 00:43:16,600
there's a proper name here that comes in and so when we do this thing,

747
00:43:16,800 --> 00:43:18,300
this is how it used to work.

748
00:43:29,100 --> 00:43:31,300
but instead, we know we've got this

749
00:43:46,100 --> 00:43:48,700
and I think that's mostly it.

750
00:43:49,500 --> 00:43:50,900
Let's see here.

751
00:44:09,400 --> 00:44:09,900
Right.

752
00:44:10,600 --> 00:44:10,900
Yeah.

753
00:44:14,400 --> 00:44:15,700
I think that's mostly it.

754
00:44:18,200 --> 00:44:19,900
Now, I don't know.

755
00:44:21,300 --> 00:44:22,900
If that's everything we need.

756
00:44:25,600 --> 00:44:27,500
We don't allow string lengths of zero.

757
00:44:27,500 --> 00:44:27,900
Okay?

758
00:44:29,700 --> 00:44:31,900
What do I not feel like we should?

759
00:44:33,100 --> 00:44:35,000
In fact, I think I'll probably just support that.

760
00:44:40,600 --> 00:44:41,400
Interface.

761
00:44:44,400 --> 00:44:45,500
I think we just want to do.

762
00:44:48,500 --> 00:44:49,300
Strange.

763
00:44:51,900 --> 00:44:52,200
Yeah.

764
00:44:57,200 --> 00:44:57,700
There we go.

765
00:44:59,100 --> 00:44:59,800
So yeah.

766
00:45:00,500 --> 00:45:02,100
When we?

767
00:45:04,200 --> 00:45:05,000
Collate these.

768
00:45:05,000 --> 00:45:07,900
We want to make sure that we always have something filled into that

769
00:45:07,900 --> 00:45:08,400
field.

770
00:45:08,400 --> 00:45:11,200
I think there was one time that I didn't do that.

771
00:45:11,300 --> 00:45:13,000
Yeah it was here right?

772
00:45:13,100 --> 00:45:15,600
And so I think we always want to sort of

773
00:45:20,500 --> 00:45:24,200
Keep that piece of information present.

774
00:45:24,300 --> 00:45:27,200
I have to see how we actually use time to block.

775
00:45:34,200 --> 00:45:39,600
Cuz you can see that it does the grid, it produces the debug name from

776
00:45:39,600 --> 00:45:43,100
The Grid and then that will lose that actual name.

777
00:45:43,500 --> 00:45:49,600
So I think in here, we probably have to keep the name separate like so

778
00:45:50,800 --> 00:45:52,800
again for the GCC reason.

779
00:45:52,800 --> 00:45:56,000
So I think in here what we'd have to do is say, okay, the name comes

780
00:45:56,000 --> 00:45:59,400
down along with it, right?

781
00:46:00,100 --> 00:46:02,700
So that you kind of have this

782
00:46:02,900 --> 00:46:03,100
This.

783
00:46:04,700 --> 00:46:09,300
Sort of ridiculousness happening where it's like, okay, yep, there's

784
00:46:09,300 --> 00:46:16,300
the name that comes in and we will pass that through to the time

785
00:46:16,300 --> 00:46:16,600
block.

786
00:46:16,600 --> 00:46:17,800
When we construct it.

787
00:46:21,300 --> 00:46:23,000
So let me make sure there's no other ones.

788
00:46:23,000 --> 00:46:26,200
So there is one there where we're getting a name of a data block and

789
00:46:26,200 --> 00:46:28,600
presumably that name just has to be replicated.

790
00:46:28,700 --> 00:46:31,600
Let me just verify when that happens.

791
00:46:32,300 --> 00:46:34,600
So, okay, so there is one of the situation that happens.

792
00:46:34,600 --> 00:46:35,800
It happens here, right?

793
00:46:36,500 --> 00:46:38,600
So we probably want this as well.

794
00:46:43,200 --> 00:46:43,700
Right.

795
00:46:44,700 --> 00:46:46,800
And more specifically, it's really BISS.

796
00:46:54,400 --> 00:46:58,900
so, in theory, that would keep us working properly now, but

797
00:47:01,400 --> 00:47:06,400
Oh, but we got to make sure that we we get our stuff lined up.

798
00:47:06,400 --> 00:47:09,800
So we actually are pulling out from the right places here, which I

799
00:47:09,800 --> 00:47:11,200
don't know that we actually are.

800
00:47:11,700 --> 00:47:13,300
So let's make sure we've got all that stuff.

801
00:47:13,300 --> 00:47:13,800
Handled.

802
00:47:13,800 --> 00:47:16,700
Because yeah, we may be passing incorrect, things down.

803
00:47:17,100 --> 00:47:24,700
Alright, so we've got our debug event names set in there and inside

804
00:47:24,700 --> 00:47:26,000
are handmade debug.

805
00:47:26,200 --> 00:47:30,100
When we scan these, we're getting that proper name past separately and

806
00:47:30,100 --> 00:47:31,100
that's what's going into.

807
00:47:31,400 --> 00:47:32,800
The name length Fields here.

808
00:47:33,700 --> 00:47:35,700
So if I go to debug parse name,

809
00:47:38,000 --> 00:47:43,600
and we're I'm calling that when we do get element from grid,

810
00:47:47,600 --> 00:47:51,400
I think we should never care about that because the grid should always

811
00:47:51,400 --> 00:47:54,000
be sufficient in that circumstance.

812
00:47:54,000 --> 00:47:54,900
As far as I know,

813
00:48:01,500 --> 00:48:02,900
and,

814
00:48:09,300 --> 00:48:11,100
These are pass those down.

815
00:48:13,000 --> 00:48:17,200
Write, debug parse name.

816
00:48:25,700 --> 00:48:31,600
Yeah, so I'm not sure why that would not be properly recording it,

817
00:48:31,900 --> 00:48:37,200
because I feel like event name should be stored correctly at that

818
00:48:37,200 --> 00:48:38,000
point.

819
00:48:39,100 --> 00:48:42,100
But let me go ahead and make sure that that's actually true.

820
00:48:45,400 --> 00:48:46,900
Because I don't actually know that it is.

821
00:48:47,500 --> 00:48:52,000
So let me go ahead and actually take a look at, you know, step through

822
00:48:52,000 --> 00:48:52,700
a couple things here.

823
00:48:52,700 --> 00:48:54,400
So we can actually see if that's the case.

824
00:48:55,300 --> 00:48:59,400
So, hopefully, inside this record, debug event B here.

825
00:49:05,200 --> 00:49:06,000
Of course, it won't.

826
00:49:06,000 --> 00:49:08,500
Let me set a breakpoint there because it's in a macro unfortunately.

827
00:49:10,100 --> 00:49:11,900
Hmm.

828
00:49:13,000 --> 00:49:15,900
Well because I just want to be able to see what these debug events

829
00:49:15,900 --> 00:49:16,100
are.

830
00:49:16,100 --> 00:49:20,400
So let me, let me instead take a look since I can't easily set a

831
00:49:20,400 --> 00:49:22,900
breakpoint there, I should be able to, but of course, it doesn't let

832
00:49:22,900 --> 00:49:26,400
me because probably doesn't record enough debug info to do that.

833
00:49:26,700 --> 00:49:29,400
I just want to take a look at what it does in terms of getting the

834
00:49:29,400 --> 00:49:32,200
results of these parts debug events.

835
00:49:32,200 --> 00:49:33,200
So, let's take a look here.

836
00:49:34,400 --> 00:49:42,300
so that name looks looks correct there and oh, and name starts at

837
00:49:44,400 --> 00:49:48,000
I suppose needs to be set to 0, always here as well.

838
00:49:48,000 --> 00:49:52,800
Which I cousin case, somebody chooses to use the name starts at field,

839
00:49:52,900 --> 00:49:54,100
plus the Grid.

840
00:49:55,500 --> 00:49:57,200
In fact do people do that.

841
00:49:57,900 --> 00:49:58,900
Let me find out

842
00:50:01,300 --> 00:50:03,500
Because we're going to have to get rid of that field basically as well

843
00:50:03,500 --> 00:50:06,300
because the name starts at is not going to be valid anymore.

844
00:50:12,800 --> 00:50:14,900
yes, you can kind of see here like

845
00:50:18,500 --> 00:50:22,600
that is a problem because we essentially shortcutted that

846
00:50:27,100 --> 00:50:29,400
and that's not really going to work, right?

847
00:50:29,400 --> 00:50:31,100
We need to use those separately.

848
00:50:32,100 --> 00:50:33,400
So I guess what happens.

849
00:50:33,400 --> 00:50:37,800
The problem that happens here is we store those strings, right?

850
00:50:37,800 --> 00:50:39,000
You can see us doing it here.

851
00:50:39,000 --> 00:50:41,800
We do a push string on of the grid, right?

852
00:50:41,900 --> 00:50:43,800
And then we store name starts at

853
00:50:46,100 --> 00:50:50,000
So probably what we would want to do, there is just I guess story The

854
00:50:50,000 --> 00:50:57,400
Grid and then do a push string on on the name, right?

855
00:51:01,700 --> 00:51:05,400
Seems like that's probably the smartest thing to do and then get rid

856
00:51:05,400 --> 00:51:14,300
of get you know just make name starts at not a thing anymore because

857
00:51:14,300 --> 00:51:17,000
that's just not something we can actually use, right?

858
00:51:27,000 --> 00:51:31,600
So then name starts at is is not going to be used anywhere and then

859
00:51:31,600 --> 00:51:34,100
anywhere who won who was trying to use it.

860
00:51:34,300 --> 00:51:34,700
Oops.

861
00:51:40,900 --> 00:51:42,300
Wait, that should work, right?

862
00:51:56,300 --> 00:51:59,600
Name is not a member of debug element.

863
00:51:59,700 --> 00:51:59,900
Oh,

864
00:52:03,200 --> 00:52:04,100
good point.

865
00:52:04,600 --> 00:52:05,800
That's actually true.

866
00:52:05,800 --> 00:52:06,500
It isn't

867
00:52:21,300 --> 00:52:21,700
Okay.

868
00:52:25,900 --> 00:52:29,000
So I think that's all good and then we just have to make sure that we

869
00:52:29,000 --> 00:52:31,900
don't ever get in situations where these things are set to 0.

870
00:52:31,900 --> 00:52:37,700
Which, in this case, it looks like it is, looks like and made code

871
00:52:37,700 --> 00:52:38,100
handmade.

872
00:52:38,100 --> 00:52:41,500
Debugs 1941 71 there.

873
00:52:42,500 --> 00:52:45,000
So let's take a look at 1941, handmade debug

874
00:52:48,900 --> 00:52:50,500
So it looks like debug name.

875
00:52:54,000 --> 00:52:56,700
Oh, this is just only for the root profile quid.

876
00:53:03,900 --> 00:53:05,600
So the route Profile Event.

877
00:53:05,600 --> 00:53:08,300
It looks like the problem there that that's just a synthetic one that

878
00:53:08,300 --> 00:53:09,200
we create.

879
00:53:09,500 --> 00:53:14,700
So it looks like as long as we work to set that to one as well, we can

880
00:53:15,800 --> 00:53:16,800
avoid that problem.

881
00:53:16,900 --> 00:53:19,100
That may be our only one because we have to make sure those are never

882
00:53:19,100 --> 00:53:22,200
set to know because now we're actually using the name it always has to

883
00:53:22,200 --> 00:53:24,200
be valid or we can't print or show that

884
00:53:27,000 --> 00:53:28,200
All right, so let's take a look.

885
00:53:29,100 --> 00:53:36,200
So first of all, we have to stop the name starts at bit, so now we

886
00:53:36,200 --> 00:53:37,700
always need to use the name field.

887
00:53:37,700 --> 00:53:41,500
So everyone who was using the name starts at needs to?

888
00:53:41,500 --> 00:53:41,700
Now?

889
00:53:41,700 --> 00:53:43,000
Use name directly.

890
00:53:43,400 --> 00:53:46,600
And so, when we are in here, we can just sort of say like, hey,

891
00:53:47,000 --> 00:53:49,900
instead of doing that, that trickery, you were doing before you can

892
00:53:49,900 --> 00:53:51,000
stop doing that now.

893
00:53:51,500 --> 00:53:54,400
Just use the name pointer and that's fine.

894
00:53:55,100 --> 00:53:56,700
And actually, I suppose we can just do this.

895
00:53:56,800 --> 00:53:59,500
since that's what people are supposed to be doing in a why this

896
00:53:59,500 --> 00:53:59,900
particular

897
00:54:00,000 --> 00:54:04,000
Point in the code wasn't doing that and then maybe we're okay.

898
00:54:04,800 --> 00:54:05,600
So let's take a look.

899
00:54:05,600 --> 00:54:07,400
Okay, so now we've restored that.

900
00:54:07,500 --> 00:54:09,200
But we still have a little bit a problem for.

901
00:54:09,200 --> 00:54:12,700
You can see that like, for example, these guys are listed by counter

902
00:54:12,700 --> 00:54:13,200
value.

903
00:54:13,200 --> 00:54:15,300
So it looks like we're putting the wrong thing.

904
00:54:15,800 --> 00:54:19,700
When we record those, debug events were recording for our data debug

905
00:54:19,700 --> 00:54:20,000
events.

906
00:54:20,000 --> 00:54:23,400
We're recording the wrong piece of information, so rather than the

907
00:54:23,400 --> 00:54:27,000
string we're recording their ordinal, right?

908
00:54:27,800 --> 00:54:32,100
There there underscore our counter and so we just have to take a look

909
00:54:32,100 --> 00:54:35,200
at our is that spelled right by the way.

910
00:54:39,300 --> 00:54:41,700
Yes, so we fixed the bug?

911
00:54:54,200 --> 00:54:58,400
So now inside the system, we just have to make sure that nobody is

912
00:54:58,400 --> 00:55:00,800
passing the incorrect thing down.

913
00:55:01,800 --> 00:55:06,600
And so when you get down here and you're saying like, Okay, you know,

914
00:55:07,800 --> 00:55:08,600
let's take a look.

915
00:55:19,300 --> 00:55:20,200
What are we doing?

916
00:55:20,200 --> 00:55:21,300
That's incorrect here.

917
00:55:21,300 --> 00:55:22,700
So we pass debug value.

918
00:55:22,700 --> 00:55:26,300
It looks like when we call record, debug event,

919
00:55:27,800 --> 00:55:31,000
That we are correctly, passing.

920
00:55:35,400 --> 00:55:42,300
That string eyes value but maybe something else is happening wrong

921
00:55:42,300 --> 00:55:50,100
here, because here's debug be 32, it's passing the type, it's it's

922
00:55:50,100 --> 00:55:55,000
calling debug name to generate the grid as it normally would write and

923
00:55:55,000 --> 00:55:58,300
then it's it's also giving you the name of the value.

924
00:56:01,200 --> 00:56:02,000
Directly there.

925
00:56:02,400 --> 00:56:05,900
So I feel like that should have been doing the right thing.

926
00:56:09,600 --> 00:56:12,900
But I guess it's not and so what I'd like to do is just take a look

927
00:56:14,400 --> 00:56:16,000
here at what's actually going on.

928
00:56:16,400 --> 00:56:20,700
So here's like a debug be 32, it's passing global renderer test, weird

929
00:56:20,700 --> 00:56:24,200
draw, buffer size and so it's should be calling this macro.

930
00:56:24,200 --> 00:56:25,400
It's passing that in here.

931
00:56:25,400 --> 00:56:27,300
So I feel like it should be passing record.

932
00:56:27,300 --> 00:56:31,200
Debug event the right value.

933
00:56:31,600 --> 00:56:35,900
So my question is is it just the printout of these that's wrong?

934
00:56:36,500 --> 00:56:38,300
Or is it the actual thing that's being passed?

935
00:56:38,300 --> 00:56:38,900
That's wrong.

936
00:56:39,700 --> 00:56:40,500
And I'm not sure.

937
00:56:41,200 --> 00:56:46,100
So, again, let me just take a look quickly to see if anyone is using

938
00:56:46,700 --> 00:56:48,900
name starts at, in some kind of

939
00:56:53,100 --> 00:56:57,100
In some kind of way that they shouldn't be and so that we can kind of

940
00:56:57,100 --> 00:56:57,900
figure that out.

941
00:56:58,500 --> 00:56:59,900
So, it looks like the only people

942
00:57:00,000 --> 00:57:01,600
Are really using it are in this.

943
00:57:02,300 --> 00:57:06,600
These locations here, which again, doesn't seem like it should be a

944
00:57:06,600 --> 00:57:07,300
problem.

945
00:57:07,800 --> 00:57:11,400
So yeah, let's find out.

946
00:57:11,400 --> 00:57:14,900
Let me walk through the handmade Hero opening code there.

947
00:57:16,100 --> 00:57:17,900
Where we are

948
00:57:21,500 --> 00:57:22,200
Let's see.

949
00:57:36,300 --> 00:57:40,300
So, here's that Atomic add, let's take a look at the disassembly here

950
00:57:40,300 --> 00:57:42,500
because we're not gonna be able to step into the macro.

951
00:57:44,000 --> 00:57:47,900
So I just want to see if I can get a little bit of a picture of what's

952
00:57:47,900 --> 00:57:49,400
going on with the debug event.

953
00:57:49,400 --> 00:57:51,200
You can see the atomic add happening here.

954
00:57:52,400 --> 00:57:58,000
So cures, a bunch of moves, right, that are happening.

955
00:57:59,700 --> 00:58:00,700
I don't know what.

956
00:58:03,100 --> 00:58:05,500
if any, here's the our dtsc,

957
00:58:07,400 --> 00:58:09,400
Is there any others in here?

958
00:58:11,600 --> 00:58:13,100
There's the get thread ID.

959
00:58:19,300 --> 00:58:23,000
Although where is the get red ID?

960
00:58:23,000 --> 00:58:23,400
Yeah.

961
00:58:23,400 --> 00:58:26,100
All right, so it doesn't look particularly problematic anywhere.

962
00:58:26,100 --> 00:58:30,000
Okay, so once we've worked all this stuff out, you can see generally

963
00:58:30,000 --> 00:58:32,800
we're doing, we're moving all this stuff into position.

964
00:58:33,000 --> 00:58:40,500
We should be able to see what we actually loaded as the as the size.

965
00:58:40,500 --> 00:58:43,400
And so it looks like I'm sorry as the name.

966
00:58:45,500 --> 00:58:46,400
For example.

967
00:58:57,700 --> 00:58:59,000
What's the actual value here?

968
00:58:59,000 --> 00:59:00,000
That we loaded in?

969
00:59:03,500 --> 00:59:06,600
Is This Global render test where a draw bar for size?

970
00:59:06,800 --> 00:59:09,600
So that's the address of oops, not on it.

971
00:59:10,100 --> 00:59:12,600
That's the address of the Boolean I believe.

972
00:59:12,600 --> 00:59:13,100
Right.

973
00:59:13,300 --> 00:59:13,700
Yeah.

974
00:59:14,900 --> 00:59:16,500
So we've loaded in the address of the Boolean.

975
00:59:16,500 --> 00:59:20,800
That's the thing that's going to get Modified by debug set event data.

976
00:59:21,000 --> 00:59:24,900
So we loaded the string somewhere up in here, but I'm not exactly sure

977
00:59:24,900 --> 00:59:29,000
where there's get thread ID, it should have probably loaded just

978
00:59:29,000 --> 00:59:30,400
before that, right?

979
00:59:30,800 --> 00:59:32,600
So we should have loaded the string.

980
00:59:36,800 --> 00:59:37,500
There it is.

981
00:59:39,300 --> 00:59:41,700
We should have loaded the string just before that, and we did Right.

982
00:59:41,700 --> 00:59:44,800
There Is Us loading the string and there is the string.

983
00:59:45,000 --> 00:59:49,700
So presumably the debug event actually has it written down correctly

984
00:59:49,700 --> 00:59:50,100
there.

985
00:59:55,600 --> 00:59:57,600
And, you know, so are ax.

986
00:59:58,300 --> 00:59:59,800
I guess probably holds the value.

987
01:00:00,000 --> 01:00:02,000
Of our debug event at this point.

988
01:00:02,100 --> 01:00:03,400
Let's just take a look here.

989
01:00:12,200 --> 01:00:15,800
And it does so because you can kind of see you could see here, the

990
01:00:15,800 --> 01:00:19,500
pattern of everybody was addressing off of RA X.

991
01:00:19,500 --> 01:00:21,600
So that's how I knew that, right?

992
01:00:21,600 --> 01:00:24,400
Like I was just looking to see like, oh, okay, you know,

993
01:00:27,300 --> 01:00:32,700
I went to write that string into our ax + 18, H and I wrote 1 into re

994
01:00:32,700 --> 01:00:34,500
X Plus 8 and so on, right?

995
01:00:34,700 --> 01:00:37,300
So now we're just like, okay whatever is in our ax right now, the

996
01:00:37,300 --> 01:00:40,700
register r x must hold, you know, where all the strings are and you

997
01:00:40,700 --> 01:00:41,900
can kind of see them here, right?

998
01:00:41,900 --> 01:00:46,500
You got the grid, you've got the name and I'm just trying to figure

999
01:00:46,500 --> 01:00:49,700
out sort of like, if this is what I'm passing down.

1000
01:00:49,700 --> 01:00:52,700
Then it looks like the name has exactly what I would have expected

1001
01:00:53,200 --> 01:00:55,300
when I retire, this debug event and I'm not

1002
01:00:55,400 --> 01:00:56,900
Sure why I wouldn't then.

1003
01:01:03,100 --> 01:01:05,700
Why wouldn't be able to get sort of a?

1004
01:01:08,100 --> 01:01:09,300
you know, a reasonable

1005
01:01:11,300 --> 01:01:12,800
a reasonable parse out of it.

1006
01:01:13,500 --> 01:01:16,700
So the only thing I can think of at that point is that when we are

1007
01:01:16,700 --> 01:01:20,300
creating these debug values that we're doing them, in some way that

1008
01:01:20,300 --> 01:01:24,200
isn't properly a bang parsed name because if the proper name is always

1009
01:01:24,200 --> 01:01:25,200
getting past.

1010
01:01:27,100 --> 01:01:31,000
Down for these data blocks than I would have assumed that, that would

1011
01:01:31,000 --> 01:01:33,600
be sufficient, but I don't actually know.

1012
01:01:33,600 --> 01:01:34,600
So, let's see here.

1013
01:01:36,200 --> 01:01:37,700
It could be this right here.

1014
01:01:57,500 --> 01:01:59,100
Where we sort of copy that name over.

1015
01:02:06,100 --> 01:02:07,500
Hmm, so I don't know.

1016
01:02:07,500 --> 01:02:11,300
This is very intriguing, so we must be copying these out in some way

1017
01:02:11,300 --> 01:02:12,900
that we're not obeying here.

1018
01:02:15,000 --> 01:02:16,000
The that is the path.

1019
01:02:16,000 --> 01:02:17,300
We would have been going through.

1020
01:02:17,500 --> 01:02:22,100
So I guess maybe I can just step through it and see what happens like

1021
01:02:22,100 --> 01:02:23,700
when we restore a vent here,

1022
01:02:32,000 --> 01:02:34,100
Let's just step through there and see what happens because the debug

1023
01:02:34,100 --> 01:02:35,100
systems, pretty complicated.

1024
01:02:35,100 --> 01:02:38,900
As you know, and we never really refined it down to a level of really

1025
01:02:38,900 --> 01:02:41,100
good Simplicity or anything.

1026
01:02:41,100 --> 01:02:44,400
So, you know, there's a little bit too much complexity in there and

1027
01:02:44,700 --> 01:02:48,100
probably just best to take a look at what happens when we call get

1028
01:02:48,100 --> 01:02:49,300
element from event.

1029
01:02:51,300 --> 01:02:52,300
Come through here.

1030
01:02:53,000 --> 01:02:54,900
We're asking for Global pause.

1031
01:02:55,300 --> 01:02:56,400
So that's all good.

1032
01:02:57,200 --> 01:02:59,600
So let's take a look at what happens with our results.

1033
01:03:01,900 --> 01:03:02,900
Here's our results.

1034
01:03:03,100 --> 01:03:05,600
The name is Bilbo, posit is what we want it to be.

1035
01:03:05,700 --> 01:03:10,100
So all that's good and we can do whatever we want to do there.

1036
01:03:10,900 --> 01:03:13,500
So now we end up with an element and we'll just take a look at what

1037
01:03:13,500 --> 01:03:14,500
the element has.

1038
01:03:15,200 --> 01:03:20,100
So for some reason, we're resetting the original grid of this thing to

1039
01:03:20,100 --> 01:03:23,800
be what the element grid was, but I'm not really sure why.

1040
01:03:23,800 --> 01:03:31,100
So, to be honest, I do not understand that that assignment there.

1041
01:03:32,000 --> 01:03:35,500
Because we are pushing that string on and I don't know why we feel the

1042
01:03:35,500 --> 01:03:39,500
need to reassign in that way, right?

1043
01:03:42,600 --> 01:03:44,000
It doesn't make a whole lot of sense to me.

1044
01:03:48,300 --> 01:03:49,600
Fact, I kind of wonder if that should be there.

1045
01:03:49,600 --> 01:03:51,300
Okay, so then we go to store event.

1046
01:03:52,900 --> 01:03:54,700
You can see us during the event here.

1047
01:03:56,300 --> 01:04:00,000
And yeah, in this case, all we're doing is

1048
01:04:04,000 --> 01:04:06,100
It's really figuring out where we're going to put this.

1049
01:04:06,400 --> 01:04:11,600
Assuming that we did put it somewhere, we just copy the event

1050
01:04:11,600 --> 01:04:13,300
wholesale from one to the other.

1051
01:04:14,400 --> 01:04:18,100
I guess the point of the original grid bit is just because we want to

1052
01:04:18,100 --> 01:04:21,100
use that pointer for something later, right?

1053
01:04:22,100 --> 01:04:27,000
But that shouldn't affect the fact that after we do that store, we

1054
01:04:27,000 --> 01:04:29,000
still have the name, correct?

1055
01:04:29,100 --> 01:04:29,600
Right.

1056
01:04:31,200 --> 01:04:33,700
So yeah, so that all looks pretty reasonable.

1057
01:04:33,800 --> 01:04:34,800
all to me, like,

1058
01:04:38,000 --> 01:04:41,300
You know, there's there's one of these guys getting stored and it, you

1059
01:04:41,300 --> 01:04:43,300
know, there it is storing it.

1060
01:04:43,700 --> 01:04:48,300
And when we take a look in here to see what that stored event is,

1061
01:04:55,200 --> 01:04:55,900
there it is.

1062
01:04:57,000 --> 01:04:57,600
Right.

1063
01:05:17,700 --> 01:05:21,000
all right, so let's go over and let's just jump over here to take a

1064
01:05:21,000 --> 01:05:22,300
look at

1065
01:05:23,900 --> 01:05:25,100
where we print those out.

1066
01:05:33,900 --> 01:05:38,500
So let's just see when we're printing them out so we can, you know,

1067
01:05:40,300 --> 01:05:41,900
Try to figure out where we're getting that problem.

1068
01:05:42,700 --> 01:05:44,600
So here we are in debug event to text.

1069
01:05:46,400 --> 01:05:46,900
Excuse me.

1070
01:05:47,900 --> 01:05:51,000
And oh, well, that would do it.

1071
01:05:51,000 --> 01:05:56,700
It looks like we actually were sort of still using old pieces of the

1072
01:05:56,700 --> 01:05:58,200
grid here and just scanning them.

1073
01:05:59,300 --> 01:05:59,800
Right.

1074
01:06:01,000 --> 01:06:03,500
Which is probably not particularly useful.

1075
01:06:04,700 --> 01:06:09,400
And in fact we initialize the name to the element with ID which is not

1076
01:06:09,400 --> 01:06:11,400
what we want to do, right?

1077
01:06:12,300 --> 01:06:15,300
So that's well, that's good enough.

1078
01:06:15,300 --> 01:06:17,500
That's a pretty simple answer to our problem.

1079
01:06:18,700 --> 01:06:21,400
Let's take a look at where names assigned.

1080
01:06:22,000 --> 01:06:23,500
It looks like that's the only place.

1081
01:06:24,500 --> 01:06:25,100
So I suppose.

1082
01:06:25,100 --> 01:06:30,000
What we'll do here is just say like instead of this use name bit here,

1083
01:06:31,600 --> 01:06:33,100
in fact is I don't know.

1084
01:06:36,500 --> 01:06:37,900
Looks like that's not used anywhere.

1085
01:06:37,900 --> 01:06:43,300
Really, so technically we could just probably do this and say instead

1086
01:06:43,300 --> 01:06:48,100
of this bit right here, we could just do like, okay, whatever you're

1087
01:06:48,100 --> 01:06:53,300
going to use for the name, we could just say, let's go ahead and use

1088
01:06:53,300 --> 01:06:55,200
the event quid.

1089
01:06:55,200 --> 01:06:58,400
If you're asking it to show the entire grid, otherwise just show the

1090
01:06:58,400 --> 01:07:01,600
name and off you go, right?

1091
01:07:09,300 --> 01:07:10,500
And that looks much better now.

1092
01:07:10,500 --> 01:07:13,700
We've got our names back and, and we're in pretty good shape there, so

1093
01:07:13,700 --> 01:07:14,800
that's all pretty good.

1094
01:07:15,600 --> 01:07:18,100
No, real downsides there.

1095
01:07:20,000 --> 01:07:21,100
So, there you go.

1096
01:07:24,500 --> 01:07:26,400
And so I guess, let's see how much time you have here.

1097
01:07:26,400 --> 01:07:27,800
We've got it's 12:45.

1098
01:07:28,700 --> 01:07:32,200
So do we start it 11:30?

1099
01:07:33,100 --> 01:07:33,800
I think so.

1100
01:07:33,800 --> 01:07:40,600
We've got till about 1:30 to go, so I think that's good.

1101
01:07:41,800 --> 01:07:46,400
And I guess the only question I have now is did we actually solve this

1102
01:07:46,400 --> 01:07:48,400
problem or didn't we solve the problem?

1103
01:07:48,900 --> 01:07:51,900
Because again, the only reason that we just did all the stuff that we

1104
01:07:51,900 --> 01:07:53,400
just did is

1105
01:07:53,500 --> 01:07:58,000
So that we can compile using llvm, which I don't actually know.

1106
01:07:58,200 --> 01:08:02,300
Again, whether we will or not at this point, it's an open question.

1107
01:08:02,900 --> 01:08:07,500
So yeah, so the thing to figure out here I guess is just

1108
01:08:09,900 --> 01:08:11,100
Are we doing?

1109
01:08:11,100 --> 01:08:13,500
Is that concatenation happening anymore?

1110
01:08:14,600 --> 01:08:15,800
Or isn't it?

1111
01:08:15,900 --> 01:08:17,700
And and I don't know.

1112
01:08:19,600 --> 01:08:22,600
Let's try to double check here but otherwise we'll just have to sort

1113
01:08:22,600 --> 01:08:27,600
of send this code over the fence and say for people who are compiling

1114
01:08:27,600 --> 01:08:34,700
with, with it at the moment, how you know, did that solve the problem,

1115
01:08:34,700 --> 01:08:35,399
or didn't it?

1116
01:08:35,700 --> 01:08:38,600
So you can see inside time function here when we do this,

1117
01:08:39,800 --> 01:08:43,100
It looks like that's really the only place that's happening.

1118
01:08:43,100 --> 01:08:45,700
We also verified because now we can pile without that, that that

1119
01:08:45,700 --> 01:08:46,899
doesn't need to be there.

1120
01:08:47,700 --> 01:08:50,600
So, we've got this one place that functions being used.

1121
01:08:50,600 --> 01:08:53,500
You can see that it's getting passed down to the debug name.

1122
01:08:54,100 --> 01:08:57,300
So, and this field right here inside times lock.

1123
01:08:57,399 --> 01:08:59,000
When name gets passed down,

1124
01:09:00,899 --> 01:09:01,899
Really all that's happening.

1125
01:09:01,899 --> 01:09:08,100
There is that name is getting past eventually through as an actual

1126
01:09:08,100 --> 01:09:10,200
variable to the time block, so, that shouldn't be a problem.

1127
01:09:10,399 --> 01:09:13,100
So, the only question is, whether passing function to debug name would

1128
01:09:13,100 --> 01:09:15,500
create something and the whole point is we try to fix that.

1129
01:09:15,899 --> 01:09:17,300
So, let's just double check that.

1130
01:09:17,300 --> 01:09:18,300
That's actually true.

1131
01:09:18,300 --> 01:09:19,700
So here is debug name.

1132
01:09:20,300 --> 01:09:24,000
And here's when we're actually producing unique file counter string.

1133
01:09:24,200 --> 01:09:28,000
When we get debug name in there, you can see that we pass it as the

1134
01:09:28,000 --> 01:09:30,500
final parameter that final parameter is D which

1135
01:09:30,700 --> 01:09:32,000
Then gets ignored.

1136
01:09:32,100 --> 01:09:38,500
So, in theory, now we're at the point where that is is no longer ever

1137
01:09:38,500 --> 01:09:40,399
tried to concatenate as a string.

1138
01:09:40,399 --> 01:09:45,500
So I'm going to say that that is a good first pass and we'll have them

1139
01:09:45,500 --> 01:09:51,200
test it and see whether they, you know, are okay with that.

1140
01:09:52,000 --> 01:10:00,000
So let's go ahead and say that I believe we fixed this on day 356 but

1141
01:10:00,200 --> 01:10:00,500
we

1142
01:10:00,600 --> 01:10:06,000
Don't really know since we don't compile with lying on the stream.

1143
01:10:08,400 --> 01:10:16,900
I will close the bug for now but please reopen it, if it turns out

1144
01:10:16,900 --> 01:10:19,700
that there are further issues.

1145
01:10:22,000 --> 01:10:26,900
So yeah, as far as I know again I don't know of any other things that

1146
01:10:26,900 --> 01:10:30,100
because I feel like we fixed all the other clang problems because they

1147
01:10:30,100 --> 01:10:30,300
were

1148
01:10:30,700 --> 01:10:32,900
Minor they didn't require any changes.

1149
01:10:32,900 --> 01:10:39,100
They were just really minor issues that that had to be changed.

1150
01:10:39,100 --> 01:10:43,700
And so I don't think we've got anything else in here because we've

1151
01:10:43,700 --> 01:10:48,200
replaced the printf the glue in void pointer stuff.

1152
01:10:48,200 --> 01:10:53,700
We fix this well, so I think that's it and

1153
01:10:55,800 --> 01:10:57,500
We'll call that done for now.

1154
01:11:00,000 --> 01:11:10,000
All right, so that's about all there is to that and I feel like that

1155
01:11:10,000 --> 01:11:12,000
is it for our issues.

1156
01:11:12,500 --> 01:11:16,100
These are all enhancement requests that are for later in the project.

1157
01:11:16,700 --> 01:11:20,100
So I feel like those are all good and we no longer have any more

1158
01:11:20,100 --> 01:11:25,200
issues here to address and in theory we should be running reasonably

1159
01:11:25,200 --> 01:11:25,600
now.

1160
01:11:25,600 --> 01:11:29,700
And the only thing we had to go look at is we had to go look.

1161
01:11:29,900 --> 01:11:34,400
That the camera stuff and see how that is.

1162
01:11:57,300 --> 01:11:59,800
All right, so yeah, I think everything.

1163
01:12:00,000 --> 01:12:01,800
Been restored to regular working order.

1164
01:12:02,100 --> 01:12:06,000
I don't know if there's anything else we need to do here but it seems

1165
01:12:06,000 --> 01:12:07,200
like we're pretty good to go.

1166
01:12:09,200 --> 01:12:11,200
Everything seems to be operating normally

1167
01:12:23,200 --> 01:12:24,100
So that's all good.

1168
01:12:43,700 --> 01:12:46,500
All right, so I think that's it.

1169
01:12:46,900 --> 01:12:47,600
Good good, good.

1170
01:12:49,100 --> 01:12:53,800
All right, so I guess now the only thing I might as well go and debug

1171
01:12:53,800 --> 01:12:56,700
just so again, tomorrow we can start fresh.

1172
01:12:57,300 --> 01:12:59,700
I don't think we have any more issues to address and we could start on

1173
01:12:59,700 --> 01:13:01,700
3D stuff tomorrow or whatever else we want to do.

1174
01:13:03,200 --> 01:13:09,400
But I guess what I would say here is there's I don't know that there's

1175
01:13:09,400 --> 01:13:12,700
much point in it, but we still have the, like camera non-tracking

1176
01:13:12,700 --> 01:13:17,200
thing where we wanted to have like room based cameras and really like,

1177
01:13:17,200 --> 01:13:18,300
maybe it's best to not.

1178
01:13:18,800 --> 01:13:21,700
Fixing that because we're going to move to 3D anyway and we'll

1179
01:13:21,700 --> 01:13:24,700
probably clean out the stuff in that pass.

1180
01:13:26,000 --> 01:13:28,500
But again, since we do have a little bit of time here, I don't know

1181
01:13:28,500 --> 01:13:30,500
that there's anything else that I want to do.

1182
01:13:30,500 --> 01:13:31,600
That's like a

1183
01:13:33,600 --> 01:13:37,000
Any kind of particularly pressing need because I'm pretty sure.

1184
01:13:37,000 --> 01:13:43,000
Everything else is just on the sort of the end of the, the sort of the

1185
01:13:43,000 --> 01:13:44,700
tail end of the 3D stuff here.

1186
01:13:45,100 --> 01:13:46,600
So I don't really know that.

1187
01:13:47,600 --> 01:13:49,700
I don't really know that there's anything else to do.

1188
01:13:50,000 --> 01:13:51,500
That makes sense to do right now.

1189
01:13:52,200 --> 01:13:55,300
So I might just pop over here and take a look and see how that's

1190
01:13:55,300 --> 01:13:55,800
going.

1191
01:13:55,900 --> 01:13:59,400
If I remember correctly, the way that we were doing this as we called

1192
01:13:59,400 --> 01:14:02,700
up a camera for empty movement and in there we tried to

1193
01:14:02,900 --> 01:14:10,700
Out what you know, where the which room The Entity was in.

1194
01:14:11,800 --> 01:14:14,700
And once we figure that out, we just tried to figure out where you

1195
01:14:14,700 --> 01:14:20,400
were relative to that room and move the camera to correspond to that.

1196
01:14:20,400 --> 01:14:23,400
Although, you know, like I said, this is not really, this kind of just

1197
01:14:23,400 --> 01:14:26,000
a key code in this probably not how we're going to do it at all.

1198
01:14:26,600 --> 01:14:27,200
So

1199
01:14:28,900 --> 01:14:32,900
You know, I take that with a grain of salt, but I guess we, I think

1200
01:14:32,900 --> 01:14:37,800
what we figured out first without sort of getting into, how this code

1201
01:14:37,800 --> 01:14:42,800
down here was working, is that when we were taking a look at this code

1202
01:14:42,800 --> 01:14:44,600
here, we never actually.

1203
01:14:44,700 --> 01:14:47,700
And this is why this fix this testing was in here, we never actually

1204
01:14:47,700 --> 01:14:52,600
got any hits so we never found ourselves actually overlapping these

1205
01:14:52,600 --> 01:14:53,400
volumes at all.

1206
01:14:54,100 --> 01:14:57,900
So our problem to start with is just that

1207
01:14:58,800 --> 01:14:59,300
You know.

1208
01:15:00,000 --> 01:15:02,900
We never found any rooms that the player actually was in.

1209
01:15:03,600 --> 01:15:07,400
So, in theory, when we do this update camera to, you know, we've got

1210
01:15:07,400 --> 01:15:09,600
at least have one room that we can find.

1211
01:15:09,600 --> 01:15:12,300
And you can see, like, we're not ever finding a room.

1212
01:15:12,800 --> 01:15:16,100
So, even though the player is clearly inside a room, there's no way we

1213
01:15:16,100 --> 01:15:17,400
can never tell if he goes outside the room.

1214
01:15:17,400 --> 01:15:19,400
If we're never finding that he's in a room at all.

1215
01:15:20,400 --> 01:15:22,900
And so, what we need to do here is sort of stop

1216
01:15:24,200 --> 01:15:28,600
We need to come through here and figure out for things that are room

1217
01:15:28,600 --> 01:15:33,000
based right which in this case like this is a brain room.

1218
01:15:33,700 --> 01:15:40,100
We need to figure out why we're never getting any why we're never

1219
01:15:40,100 --> 01:15:41,800
getting any overlaps at all.

1220
01:15:41,800 --> 01:15:42,300
Right.

1221
01:15:43,000 --> 01:15:46,400
And so let's just take a quick look at what's happening in this in

1222
01:15:46,400 --> 01:15:46,900
these

1223
01:15:49,000 --> 01:15:50,000
Custer teens here.

1224
01:15:50,800 --> 01:15:55,000
You can see that like we're passing a position and that's the position

1225
01:15:55,300 --> 01:15:56,400
of presumably.

1226
01:15:56,400 --> 01:16:00,300
The player that we're testing, am I right about that?

1227
01:16:00,300 --> 01:16:02,400
How are we figuring that out basically?

1228
01:16:03,300 --> 01:16:08,300
There were passing the entity and that entity presumably came from an

1229
01:16:08,300 --> 01:16:10,500
attempt to get the player update.

1230
01:16:10,800 --> 01:16:11,600
Let's see here.

1231
01:16:12,300 --> 01:16:14,500
There's the camera entity, right?

1232
01:16:15,100 --> 01:16:17,000
And that's just to whatever it was fun.

1233
01:16:17,100 --> 01:16:18,200
Whoever it's following.

1234
01:16:18,200 --> 01:16:18,600
We get that.

1235
01:16:18,800 --> 01:16:19,900
Be by ID there.

1236
01:16:20,800 --> 01:16:22,400
So we assume that's the player.

1237
01:16:22,800 --> 01:16:23,100
I guess.

1238
01:16:23,100 --> 01:16:25,600
One thing that I would point out, in fact, let's go ahead.

1239
01:16:25,600 --> 01:16:28,700
And, and before we do that, I just want to know where the player is

1240
01:16:28,700 --> 01:16:29,300
roughly.

1241
01:16:30,500 --> 01:16:33,500
So, here's the player, like let's leave the player where they are and

1242
01:16:33,500 --> 01:16:34,100
presumably.

1243
01:16:34,100 --> 01:16:39,600
The players should be kind of like, very close to 0 0.

1244
01:16:39,600 --> 01:16:40,900
Although, if you look here,

1245
01:16:45,700 --> 01:16:47,800
What what's going on with this?

1246
01:16:59,400 --> 01:17:02,200
Like this is a little suspicious.

1247
01:17:02,200 --> 01:17:02,800
Wouldn't you say it?

1248
01:17:02,800 --> 01:17:04,500
Like, what's going on here?

1249
01:17:05,100 --> 01:17:07,500
Why is this the same region origin?

1250
01:17:08,500 --> 01:17:09,500
Oh, I know why.

1251
01:17:12,300 --> 01:17:16,300
Because we're running multiple SIM regions at the moment and we should

1252
01:17:16,300 --> 01:17:17,200
probably stop that.

1253
01:17:18,600 --> 01:17:21,300
because while we're devoting this and and really these aren't supposed

1254
01:17:21,300 --> 01:17:24,500
to be there at the moment, they were they were just for testing so we

1255
01:17:24,500 --> 01:17:25,700
really don't want

1256
01:17:31,400 --> 01:17:32,400
That stuff going on.

1257
01:17:36,200 --> 01:17:36,700
Right.

1258
01:17:38,500 --> 01:17:42,100
Okay so now we're in a little bit better shape.

1259
01:17:42,300 --> 01:17:46,400
We've got like kind of our origin information here now why the Sim

1260
01:17:46,400 --> 01:17:48,100
Region's origin is

1261
01:17:50,600 --> 01:17:51,400
Is where it is.

1262
01:17:51,400 --> 01:17:52,800
Is a good question to.

1263
01:17:52,800 --> 01:17:55,900
I don't really know where 00 is, I guess.

1264
01:17:55,900 --> 01:17:57,900
00 is the start of this tile.

1265
01:17:58,200 --> 01:17:59,800
We should probably verify that at some point.

1266
01:18:00,700 --> 01:18:03,500
Maybe when we kind of go through and start doing the 3D clean up.

1267
01:18:04,000 --> 01:18:06,500
But anyway, you can kind of see this is now stable, which makes more

1268
01:18:06,500 --> 01:18:07,000
sense.

1269
01:18:08,100 --> 01:18:13,600
And you can see that the offset of the same region,

1270
01:18:15,000 --> 01:18:19,000
From its yeah, from its position, is in keeping with that, right?

1271
01:18:19,800 --> 01:18:21,500
So that seems reasonable

1272
01:18:33,400 --> 01:18:34,700
Is it in keeping with that though?

1273
01:18:36,000 --> 01:18:37,500
Because how big are the chunks?

1274
01:18:40,000 --> 01:18:40,900
Is one question.

1275
01:18:41,200 --> 01:18:43,600
If assuming the chunks are big enough then that might make reasonable

1276
01:18:43,600 --> 01:18:43,900
sense.

1277
01:18:43,900 --> 01:18:45,400
But anyway, leaving the player there.

1278
01:18:46,400 --> 01:18:48,700
Let's go ahead and take a snapshot here.

1279
01:18:48,700 --> 01:18:49,500
What's going on?

1280
01:18:53,400 --> 01:18:56,900
So I think you know I guess I can pretty much say already what I think

1281
01:18:56,900 --> 01:19:00,600
is probably going on which is that I think passing the Sim Center as 0

1282
01:19:00,600 --> 01:19:02,500
is not valid, right?

1283
01:19:06,400 --> 01:19:08,600
Because if we take a look at the same region,

1284
01:19:10,300 --> 01:19:15,800
There's the origin and the origin is definitely not 00 in that sense

1285
01:19:15,800 --> 01:19:18,000
because there's an offset to it, right?

1286
01:19:20,800 --> 01:19:22,700
So that's in the world.

1287
01:19:23,400 --> 01:19:26,600
This P value is relative to that Sim Center origin.

1288
01:19:26,600 --> 01:19:28,400
However, I would assume.

1289
01:19:28,400 --> 01:19:31,600
So let's verify that those coordinates systems are actually what I

1290
01:19:31,600 --> 01:19:35,900
think they are because that's like, obviously, you know, the first

1291
01:19:35,900 --> 01:19:38,900
thing that I want to make sure that I know correctly.

1292
01:19:39,400 --> 01:19:41,900
So you can see me coming down through here.

1293
01:19:41,900 --> 01:19:45,600
And, you know, setting up this stuff where we actually

1294
01:19:47,400 --> 01:19:48,600
Figure out what our bounds are.

1295
01:19:48,600 --> 01:19:52,900
So here's our chunk Right Stuff?

1296
01:19:52,900 --> 01:19:54,300
What's our Min chunk pee?

1297
01:20:04,200 --> 01:20:05,400
Why are we simulating?

1298
01:20:11,300 --> 01:20:12,800
Oh, this is the creation region.

1299
01:20:13,400 --> 01:20:14,800
All right, let's try that one more time.

1300
01:20:17,100 --> 01:20:17,700
There we go.

1301
01:20:17,800 --> 01:20:20,300
That's like we need something that's actually got some area to it.

1302
01:20:20,700 --> 01:20:21,100
Okay.

1303
01:20:21,100 --> 01:20:22,000
And now we have some.

1304
01:20:22,400 --> 01:20:24,000
All right, so that's good.

1305
01:20:24,000 --> 01:20:26,700
So now if we take a look at what the same region origin is that's

1306
01:20:26,700 --> 01:20:29,300
where it believes this part of the same region.

1307
01:20:29,300 --> 01:20:35,900
Origin is when we're pulling these out, you can see in here where we

1308
01:20:35,900 --> 01:20:37,300
do try to figure out where

1309
01:20:39,300 --> 01:20:40,900
Things are relative to the chunk.

1310
01:20:41,300 --> 01:20:45,400
You can kind of see like okay where are things relative to the chunk?

1311
01:20:45,400 --> 01:20:46,300
There they are right?

1312
01:20:46,300 --> 01:20:52,200
That's the difference between this chunks location and wherever the

1313
01:20:52,200 --> 01:20:53,800
the same region itself is right there.

1314
01:20:53,800 --> 01:20:54,700
Some reason origin.

1315
01:20:55,600 --> 01:20:56,500
So that's the chunk Delta.

1316
01:20:56,500 --> 01:20:57,900
That's how far you go to get there.

1317
01:20:58,600 --> 01:20:59,600
We come through.

1318
01:21:00,000 --> 01:21:03,500
We take a look for every entity and we say like, okay, we're just

1319
01:21:03,500 --> 01:21:08,100
going to add that Delta, whatever that Delta is to the, to the

1320
01:21:08,100 --> 01:21:11,600
destination that the entities unpacked.

1321
01:21:12,800 --> 01:21:14,300
Here's the P relative to the chunk.

1322
01:21:14,300 --> 01:21:15,500
It was packed in now.

1323
01:21:15,500 --> 01:21:17,600
Here is it in the space of the same region?

1324
01:21:18,900 --> 01:21:22,400
So I think that is really all we should need.

1325
01:21:23,100 --> 01:21:25,300
So when we pass yeah.

1326
01:21:28,500 --> 01:21:30,700
I think that's really all we should need to pass.

1327
01:21:31,900 --> 01:21:35,600
So then when we go to our next test here where we're going to be

1328
01:21:35,600 --> 01:21:40,800
testing any overlaps rectangle in theory the Sim Center should be just

1329
01:21:41,400 --> 01:21:43,400
just the zero, right?

1330
01:21:48,100 --> 01:21:51,200
But now, when I'm looking at this, it looks like, oh, okay.

1331
01:21:59,200 --> 01:22:03,300
Since this rectangle, this actually again might be part of the

1332
01:22:03,300 --> 01:22:03,800
problem.

1333
01:22:04,100 --> 01:22:05,600
It may be that

1334
01:22:16,300 --> 01:22:18,300
maybe that I miss him interpreting.

1335
01:22:18,300 --> 01:22:21,700
What these are doing because this is basically saying hey does an

1336
01:22:21,700 --> 01:22:25,900
entity at this location with this volume overlap.

1337
01:22:25,900 --> 01:22:29,900
This rectangle and I'm sort of passing the opposite of that, right?

1338
01:22:30,100 --> 01:22:32,600
Which is not what we wanted to do there.

1339
01:22:36,600 --> 01:22:41,900
In fact, so yeah, so that's a little bit busted to say the least, but

1340
01:22:41,900 --> 01:22:43,300
let's just take a look at what happens.

1341
01:22:43,300 --> 01:22:49,000
So, when we look at the grown version, obviously, we would expect this

1342
01:22:49,000 --> 01:22:54,200
to grow because we're taking the volume of the room, which is what we

1343
01:22:54,200 --> 01:22:54,900
passed there.

1344
01:22:55,600 --> 01:22:58,900
So, here's the volume of the room and you can see it's fairly large,

1345
01:22:58,900 --> 01:22:59,400
right?

1346
01:22:59,500 --> 01:23:01,500
It's 23 by 12 by 3.

1347
01:23:01,900 --> 01:23:02,400
Right.

1348
01:23:03,200 --> 01:23:06,200
Which seems about right for one room.

1349
01:23:07,200 --> 01:23:10,700
and then we're going to say like, okay, I'm assuming

1350
01:23:12,200 --> 01:23:14,100
We're going to see whether this thing's in the rectangle.

1351
01:23:14,700 --> 01:23:18,900
We're going to take whatever the offset of the volume is and add it to

1352
01:23:18,900 --> 01:23:19,200
P.

1353
01:23:19,200 --> 01:23:19,500
Yes.

1354
01:23:19,500 --> 01:23:20,900
So you can see right away.

1355
01:23:20,900 --> 01:23:21,000
Why?

1356
01:23:21,000 --> 01:23:22,400
This is basically wrong.

1357
01:23:22,700 --> 01:23:24,800
It's doing the offset in the wrong direction.

1358
01:23:26,100 --> 01:23:29,700
If that makes sense, because what we're doing yet because we basically

1359
01:23:29,700 --> 01:23:33,200
passed these in the opposite order, we were trying to reuse a routine,

1360
01:23:33,200 --> 01:23:37,200
that's really made for something else and that's not what we actually

1361
01:23:37,200 --> 01:23:37,900
want to do.

1362
01:23:38,100 --> 01:23:41,800
So when we call is in rectangle, here you can see, we're going to do

1363
01:23:41,800 --> 01:23:44,900
this test and this test is sort of backwards, right?

1364
01:23:47,000 --> 01:23:50,200
So we want to do is we want to start calling that correctly and that's

1365
01:23:50,200 --> 01:23:52,800
probably most, if not all of our problem there.

1366
01:23:54,300 --> 01:23:56,600
So instead of calling an idea overlapped rectangle, that's really not

1367
01:23:56,600 --> 01:23:57,400
what we want to do.

1368
01:23:57,400 --> 01:23:59,400
What we want to do is just call is in rectangle.

1369
01:24:00,300 --> 01:24:02,900
Want to call is in a rectangle and we just want to see.

1370
01:24:02,900 --> 01:24:07,100
Okay, here is the test and it, he's Collision volume, right?

1371
01:24:07,700 --> 01:24:11,800
And we need to offset that Collision volume to be at the entities

1372
01:24:11,800 --> 01:24:14,200
location so this is the offset.

1373
01:24:14,200 --> 01:24:15,000
We need to do.

1374
01:24:22,900 --> 01:24:23,100
Right?

1375
01:24:23,100 --> 01:24:26,800
We need to offset it so we put the volume for the room in the right

1376
01:24:26,800 --> 01:24:32,800
place, and then we just need to see whether that is relative to the

1377
01:24:32,800 --> 01:24:34,900
entities placement, right?

1378
01:24:34,900 --> 01:24:39,200
So we need to say if this offset in volume is this entities position,

1379
01:24:39,200 --> 01:24:44,200
the the player inside the correctly placed World space Collision

1380
01:24:44,200 --> 01:24:48,000
volume of the room right?

1381
01:24:48,300 --> 01:24:50,700
And that is the actual test we want to perform

1382
01:24:56,200 --> 01:24:59,900
And so, in order to do that, we need to perform the offset.

1383
01:25:00,800 --> 01:25:02,200
And let me just double-check that here.

1384
01:25:11,200 --> 01:25:12,900
And, and so, let's see how we can do that.

1385
01:25:12,900 --> 01:25:15,800
So we want to test the isn't rectangle, so we need to pass the

1386
01:25:15,800 --> 01:25:17,000
rectangle, right?

1387
01:25:17,100 --> 01:25:18,700
And here's the rectangle or the volume.

1388
01:25:18,700 --> 01:25:19,600
I should say that we've got.

1389
01:25:19,600 --> 01:25:23,800
It's actually a, you know, it's a 3D Volume, and we want to test this

1390
01:25:23,800 --> 01:25:24,200
volume.

1391
01:25:24,200 --> 01:25:25,500
We want to offset that volume.

1392
01:25:25,500 --> 01:25:28,100
So we want to pretend that the volume is out in space somewhere, which

1393
01:25:28,100 --> 01:25:32,300
means that we're going to want to subtract a way that entities

1394
01:25:32,300 --> 01:25:34,000
position from The Entity position.

1395
01:25:34,000 --> 01:25:34,500
We're testing.

1396
01:25:34,500 --> 01:25:36,100
So we want to Center The Entity position.

1397
01:25:36,100 --> 01:25:39,200
We're testing around the origin of the entity that we're looking to.

1398
01:25:39,400 --> 01:25:41,000
To enclose, right?

1399
01:25:41,800 --> 01:25:42,600
And off we go.

1400
01:25:59,300 --> 01:26:04,700
What do I actually need to pass with that rectangle 3 V 3.

1401
01:26:04,700 --> 01:26:11,300
So this is a V3 and this total volume is a What entity Collision

1402
01:26:11,300 --> 01:26:11,900
volume.

1403
01:26:14,500 --> 01:26:16,400
So right, we need both of these.

1404
01:26:16,400 --> 01:26:20,800
We need the test entity p, and we need the volume pee.

1405
01:26:32,800 --> 01:26:33,200
Right.

1406
01:26:41,700 --> 01:26:46,100
I assume that that is actually offset not pee.

1407
01:26:47,500 --> 01:26:49,100
Let's just take a look because I don't remember.

1408
01:26:53,500 --> 01:26:55,400
Austin Peay, it was both.

1409
01:27:00,000 --> 01:27:02,500
and so just to make that a little clearer, let's

1410
01:27:03,900 --> 01:27:05,600
create a thing called volume pee.

1411
01:27:07,600 --> 01:27:08,200
Which is this.

1412
01:27:09,200 --> 01:27:12,500
So that's where the volume is right, in World space.

1413
01:27:14,000 --> 01:27:17,100
And so, then we can take the entities position and subtract it away.

1414
01:27:19,300 --> 01:27:20,800
And so,

1415
01:27:23,000 --> 01:27:26,400
The dimension here is not actually a rectangle, right?

1416
01:27:28,900 --> 01:27:29,900
Which is kind of begs.

1417
01:27:29,900 --> 01:27:33,000
The question, why aren't we using rectangles for our Collision

1418
01:27:33,000 --> 01:27:33,500
volumes?

1419
01:27:33,500 --> 01:27:35,300
Like why are they dim offset?

1420
01:27:36,000 --> 01:27:37,400
So that's kind of dumb.

1421
01:27:42,200 --> 01:27:43,000
To say the least.

1422
01:27:43,000 --> 01:27:46,400
I suppose what we could do is just say like, oh, okay,

1423
01:27:52,600 --> 01:27:57,000
Wrecked Center Dim, and just pass.

1424
01:27:59,200 --> 01:28:02,300
These two, but I feel like we're going to want to make that a little

1425
01:28:02,300 --> 01:28:03,100
bit more systemic.

1426
01:28:03,100 --> 01:28:05,600
So we don't have to constantly do that, right?

1427
01:28:05,800 --> 01:28:08,700
So we could just construct the rectangle where it actually is in World

1428
01:28:08,700 --> 01:28:11,500
space and then test the entity Point against it.

1429
01:28:12,100 --> 01:28:13,100
Let me just take a look.

1430
01:28:13,100 --> 01:28:16,200
I need to I don't want a break point there anymore, but I do want to

1431
01:28:16,200 --> 01:28:17,100
ask this one here.

1432
01:28:18,400 --> 01:28:19,400
And so now, hey look.

1433
01:28:19,400 --> 01:28:23,100
Now we actually get a positive result on that.

1434
01:28:23,100 --> 01:28:25,700
So we now we actually do know that we're in a particular room.

1435
01:28:26,000 --> 01:28:27,700
Now, we have an actually probably done everything.

1436
01:28:27,700 --> 01:28:28,900
We need to do to make that work better.

1437
01:28:29,100 --> 01:28:30,600
But at least now it's going to work.

1438
01:28:30,600 --> 01:28:34,000
Probably roughly like it used to work before, right.

1439
01:28:38,400 --> 01:28:41,100
So now you can kind of see also the problems that we'll have with

1440
01:28:41,100 --> 01:28:41,300
this.

1441
01:28:41,300 --> 01:28:43,400
We're like I said we're going to have to kind of clean this up a

1442
01:28:43,400 --> 01:28:44,000
little bit.

1443
01:28:45,100 --> 01:28:48,300
What we're not doing at the moment is a system that really makes much

1444
01:28:48,300 --> 01:28:51,600
sense because we're treating it exactly the way we used to treat it in

1445
01:28:51,600 --> 01:28:54,500
terms of how see here.

1446
01:28:54,500 --> 01:29:00,100
So you can kind of see when it hops between these since all of our

1447
01:29:00,300 --> 01:29:04,200
room based movement before was based on looking where we were in the

1448
01:29:04,200 --> 01:29:07,300
apron and moving it, you end up in this

1449
01:29:07,400 --> 01:29:11,800
Kind of nasty situation where you have to kind of have that movement

1450
01:29:11,800 --> 01:29:17,500
work correctly in order to like, it's all based on those Delta's,

1451
01:29:17,700 --> 01:29:18,200
right?

1452
01:29:19,100 --> 01:29:22,500
So when you're switching between rooms and stuff like that, it ends up

1453
01:29:22,500 --> 01:29:28,300
being a little bit confusing in that respect.

1454
01:29:29,400 --> 01:29:32,800
and you can easily get in places where also you would

1455
01:29:35,800 --> 01:29:40,100
you can get in places where it would be ambiguous as what's going to

1456
01:29:40,100 --> 01:29:43,500
happen because you need to look at the room next, to you, to figure

1457
01:29:43,500 --> 01:29:45,500
out exactly where you should be and all these other sorts of things.

1458
01:29:45,500 --> 01:29:47,800
So, we're going to want to redo this camera code.

1459
01:29:47,800 --> 01:29:51,300
But for now, let's Also, let's just take a second to do a couple more

1460
01:29:51,300 --> 01:29:51,700
things.

1461
01:29:52,100 --> 01:29:55,000
So, if you take a look at the room, Delta stuff, right, where it

1462
01:29:55,000 --> 01:29:55,400
records?

1463
01:29:55,400 --> 01:29:56,700
This piece of information

1464
01:29:58,400 --> 01:29:59,800
at the very least, we would all we

1465
01:30:00,000 --> 01:30:03,500
Start recording this as being something actual, right?

1466
01:30:04,300 --> 01:30:08,600
So what we'd want to do here is say like okay the room, Delta we

1467
01:30:08,600 --> 01:30:10,100
actually know what it is now.

1468
01:30:12,600 --> 01:30:16,700
It's whatever that came back to you know to be right.

1469
01:30:16,700 --> 01:30:21,400
And if you take a look in here where we start to figure out what we're

1470
01:30:21,400 --> 01:30:22,900
looking at, here we go.

1471
01:30:22,900 --> 01:30:26,900
Oh you know where is the entity placement relative to some stuff uh

1472
01:30:26,900 --> 01:30:27,200
blah blah.

1473
01:30:27,200 --> 01:30:33,600
This was all assuming a bunch of a bunch of information about where

1474
01:30:33,600 --> 01:30:37,600
the player would be relative to the rooms and how those were baked in

1475
01:30:37,600 --> 01:30:39,800
and we don't actually know that those are correct anymore.

1476
01:30:39,800 --> 01:30:42,000
So entity P needs to be.

1477
01:30:42,600 --> 01:30:45,600
To the center of this rectangle now, right?

1478
01:30:46,700 --> 01:30:47,600
If that makes sense.

1479
01:30:48,100 --> 01:30:50,000
So essentially what we have is

1480
01:30:56,400 --> 01:31:02,100
another thing which is like room R LP or something like that.

1481
01:31:05,200 --> 01:31:07,100
Where we want to also, write down.

1482
01:31:07,100 --> 01:31:10,200
What this entity p is relative to the volume.

1483
01:31:11,300 --> 01:31:12,700
The volume is location as well.

1484
01:31:12,800 --> 01:31:13,700
Oh, and you know what?

1485
01:31:13,700 --> 01:31:16,400
And I also forgot one other thing here.

1486
01:31:16,700 --> 01:31:20,100
In addition to the offset P, we need the test entities, placement as

1487
01:31:20,100 --> 01:31:20,500
well.

1488
01:31:22,000 --> 01:31:22,300
Right.

1489
01:31:22,300 --> 01:31:24,200
So that computation was wrong as well.

1490
01:31:27,000 --> 01:31:36,300
Okay, so let's just go ahead and say like volume P equals that that's

1491
01:31:36,300 --> 01:31:37,300
where the volume is.

1492
01:31:38,800 --> 01:31:43,600
We create the rectangle intestine it, if it worked then we do room.

1493
01:31:43,600 --> 01:31:46,900
Relative P equals that entity pee.

1494
01:31:49,700 --> 01:31:51,800
- the volume be, right?

1495
01:31:53,400 --> 01:31:55,800
So off we go and that's all good.

1496
01:31:56,400 --> 01:31:59,300
So now when we want to do this testing where we're looking at, sort of

1497
01:31:59,300 --> 01:32:03,300
the room apron, Delta camera nonsense here.

1498
01:32:03,300 --> 01:32:07,100
Right now we can sort of at least restore this a little bit and say

1499
01:32:07,600 --> 01:32:16,400
okay let's go ahead and change entity P for these purposes to be using

1500
01:32:16,400 --> 01:32:17,700
this room relative pee.

1501
01:32:18,400 --> 01:32:22,300
All right, so we want to take nadp here, you can see, we're using it

1502
01:32:22,300 --> 01:32:25,800
in a bunch of places to just feel like room relative pee.

1503
01:32:33,700 --> 01:32:34,200
It Go.

1504
01:32:35,300 --> 01:32:38,500
And then you get these entity P stuff.

1505
01:32:38,500 --> 01:32:39,600
Here is all operating of that.

1506
01:32:39,600 --> 01:32:41,200
It doesn't look at the entity anymore.

1507
01:32:45,600 --> 01:32:46,800
So, I think we should be good to go there.

1508
01:32:47,700 --> 01:32:48,100
Okay.

1509
01:32:50,600 --> 01:32:52,900
So again, not probably how we owe.

1510
01:32:55,000 --> 01:32:55,800
That's interesting.

1511
01:32:59,200 --> 01:32:59,800
Why has Ark?

1512
01:33:00,000 --> 01:33:00,500
I'm Road.

1513
01:33:02,300 --> 01:33:07,000
Was not expecting that our camera now thinks it's like needed to move

1514
01:33:07,000 --> 01:33:08,900
upwards as you notice that.

1515
01:33:09,600 --> 01:33:12,600
Just from having done that room relative p b.

1516
01:33:12,600 --> 01:33:13,100
Right.

1517
01:33:14,600 --> 01:33:17,500
I should probably look to see what the room relative P actually is.

1518
01:33:17,500 --> 01:33:21,400
At that point I suppose I wasn't thinking about the Z quite correctly,

1519
01:33:21,400 --> 01:33:24,200
at that point because the room relative would think that you are

1520
01:33:24,200 --> 01:33:25,700
potentially in a different location out.

1521
01:33:25,700 --> 01:33:26,800
Remember how?

1522
01:33:26,800 --> 01:33:28,600
We aligned those?

1523
01:33:35,500 --> 01:33:40,300
And it's probably, I don't know, but we probably don't want to use the

1524
01:33:40,300 --> 01:33:45,300
offset in volume P for the room necessarily for the room relative p in

1525
01:33:45,300 --> 01:33:47,600
terms of the Z offset.

1526
01:33:48,400 --> 01:33:51,800
So in some sense, that's probably because we need to do this.

1527
01:33:51,900 --> 01:33:56,000
If that makes sense to both have them based around the floor, which is

1528
01:33:56,000 --> 01:33:59,600
how we were doing it before, which is a little weird.

1529
01:34:09,200 --> 01:34:13,800
So that looks like it's still having trouble because it's it's

1530
01:34:13,800 --> 01:34:15,500
basically snapping back.

1531
01:34:24,800 --> 01:34:27,500
And I'm not sure if that's just because of how we're doing.

1532
01:34:27,500 --> 01:34:32,100
This is this code again is like kind of it's really kind of baked in

1533
01:34:32,100 --> 01:34:36,200
and it's all relative which is not particularly useful to me.

1534
01:34:38,400 --> 01:34:40,100
For how we want to do this at the moment.

1535
01:34:40,100 --> 01:34:44,600
Because it means when you move from one room to the other, you kind of

1536
01:34:44,600 --> 01:34:45,300
end up in a

1537
01:34:46,700 --> 01:34:47,800
A bit of a mess.

1538
01:34:49,800 --> 01:34:57,700
So, for just, for a moment, I want to take a look here and see how we

1539
01:34:57,700 --> 01:34:58,700
were doing.

1540
01:35:15,200 --> 01:35:17,900
So at the moment, what I'm going to do here for a second is I'm going

1541
01:35:17,900 --> 01:35:21,900
to turn off any of the relative displacement stuff, and I'm just going

1542
01:35:21,900 --> 01:35:26,800
to say, Hey, whenever we find what, rumor in, we're going to make the

1543
01:35:26,800 --> 01:35:29,000
camera point at the center of that room.

1544
01:35:30,600 --> 01:35:31,400
That makes sense.

1545
01:35:35,200 --> 01:35:37,300
So I'm going to call room campy.

1546
01:35:39,000 --> 01:35:41,500
I'm going to call that be whatever.

1547
01:35:41,500 --> 01:35:44,600
The location of the room entity is right.

1548
01:35:46,900 --> 01:35:51,200
And so, then, rather than doing the applied, Delta B.

1549
01:35:52,600 --> 01:35:54,000
I'm just going to say, hey,

1550
01:36:05,400 --> 01:36:06,700
Actually, I guess I can leave that in there.

1551
01:36:07,900 --> 01:36:09,300
I'm just going to say all right.

1552
01:36:10,900 --> 01:36:20,800
let's make the camera position be a mapping and into chunks face of

1553
01:36:26,800 --> 01:36:29,400
of wherever that room is.

1554
01:36:30,500 --> 01:36:31,000
Right?

1555
01:36:31,900 --> 01:36:36,400
So the room, we know this is a relative position.

1556
01:36:36,800 --> 01:36:41,600
So this room can pee is basically an offset and so I'm just going to

1557
01:36:41,600 --> 01:36:46,300
say I want you to map into chunks space wherever the Sim regions

1558
01:36:46,300 --> 01:36:47,100
origin is

1559
01:36:48,400 --> 01:36:50,300
And then, wherever that room camera is.

1560
01:36:52,100 --> 01:36:52,500
Right.

1561
01:36:52,500 --> 01:36:52,800
Oops.

1562
01:37:03,600 --> 01:37:06,800
And so, now whatever room were looking at whatever room, the player is

1563
01:37:06,800 --> 01:37:08,900
in, we should snap to, right?

1564
01:37:09,000 --> 01:37:09,700
And you can see that.

1565
01:37:09,700 --> 01:37:11,900
Now that we've got our detection working properly.

1566
01:37:11,900 --> 01:37:13,600
That's actually what's going on, right?

1567
01:37:13,600 --> 01:37:18,800
As soon as the player crosses that volume boundary, we immediately

1568
01:37:18,800 --> 01:37:21,200
move the camera and we don't animate the camera at all.

1569
01:37:21,200 --> 01:37:22,500
We just snap it, right?

1570
01:37:22,500 --> 01:37:23,200
Directly there.

1571
01:37:23,200 --> 01:37:24,800
And you can see that that happens.

1572
01:37:25,700 --> 01:37:27,700
That's happening pretty much correctly, right?

1573
01:37:32,100 --> 01:37:33,000
So that's all fine.

1574
01:37:34,000 --> 01:37:36,600
And so then the question is, how would we want to interpolate between

1575
01:37:36,600 --> 01:37:37,000
these two?

1576
01:37:37,000 --> 01:37:41,200
So when we've got one and the other and they're not the same, how do

1577
01:37:41,200 --> 01:37:43,100
we want to run that interpolation?

1578
01:37:44,100 --> 01:37:49,500
And that's kind of, again based more upon that, that sort of notion of

1579
01:37:49,500 --> 01:37:53,100
the apron the apron bit there.

1580
01:37:54,100 --> 01:37:56,400
But so let's get rid of this stuff.

1581
01:37:56,600 --> 01:37:58,000
The applied Delta stuff

1582
01:38:00,700 --> 01:38:03,700
And let's just take a look at it how we want to focus on this.

1583
01:38:04,000 --> 01:38:09,000
So here's our room, relative P placement and we're just going to have

1584
01:38:09,000 --> 01:38:13,000
that the how it was and what we can see here is when we're taking a

1585
01:38:13,000 --> 01:38:16,400
look at that room relative P, we're just going to use the apron of the

1586
01:38:16,400 --> 01:38:16,700
room.

1587
01:38:16,700 --> 01:38:20,100
How close we are to that as how much interpolation we're going to do,

1588
01:38:20,600 --> 01:38:21,100
right?

1589
01:38:25,400 --> 01:38:27,400
And I think that's all we need to do at the moment.

1590
01:38:30,100 --> 01:38:31,700
And I want to take a look at what that is.

1591
01:38:35,000 --> 01:38:37,700
Okay, so now that's much more sane.

1592
01:38:38,300 --> 01:38:42,300
We're getting our interpolation just based on the apron again and that

1593
01:38:42,300 --> 01:38:43,100
should be pretty stable.

1594
01:38:43,100 --> 01:38:45,500
Because again, now we're generating this just from a static.

1595
01:38:45,500 --> 01:38:47,400
Look, where are we in the room?

1596
01:38:47,500 --> 01:38:50,700
If we're close to the apron, let's bounce out, right?

1597
01:38:52,300 --> 01:38:53,000
And off we go.

1598
01:38:54,000 --> 01:38:59,500
Now we have another sort of situation here that we could imagine which

1599
01:38:59,500 --> 01:38:59,900
is, you know,

1600
01:39:00,000 --> 01:39:02,300
What if we created rooms that were different sizes?

1601
01:39:02,900 --> 01:39:06,500
Because now that we support this notion of room boundary, we should be

1602
01:39:06,500 --> 01:39:08,400
able to have rooms of different sizes.

1603
01:39:08,400 --> 01:39:11,500
So that when you exit one room and go into another room, the camera

1604
01:39:11,500 --> 01:39:17,300
will properly go to like how that room should be centered, right?

1605
01:39:18,200 --> 01:39:24,000
And it looks like I've got about 15 minutes if that makes sense to

1606
01:39:24,000 --> 01:39:26,500
sort of go ahead and show what's going on here.

1607
01:39:27,400 --> 01:39:29,800
So let's go ahead and just move.

1608
01:39:30,000 --> 01:39:30,200
Move.

1609
01:39:49,300 --> 01:39:55,000
Okay, so let's say I go back to where we actually create the world,

1610
01:39:55,800 --> 01:39:56,500
which is in here.

1611
01:39:57,800 --> 01:40:02,000
And I got my ad standard room situation, right?

1612
01:40:03,200 --> 01:40:08,100
And the thing with that standard room is when we are creating the the

1613
01:40:08,900 --> 01:40:12,800
rooms, maybe we want to be able to specify what the size of the room

1614
01:40:12,800 --> 01:40:13,100
is.

1615
01:40:13,500 --> 01:40:13,900
Right.

1616
01:40:13,900 --> 01:40:14,300
Like

1617
01:40:16,400 --> 01:40:18,300
Pretty pretty straightforward idea.

1618
01:40:19,900 --> 01:40:24,000
So the question is, can we maybe make rooms that are some size other

1619
01:40:24,000 --> 01:40:25,600
than than this?

1620
01:40:26,400 --> 01:40:29,600
And so if we take a look here and we say, like, what the radius of the

1621
01:40:29,600 --> 01:40:34,200
room is, we could, we could pass something in here that would have

1622
01:40:34,200 --> 01:40:34,300
that.

1623
01:40:34,300 --> 01:40:36,300
Now, the problem is we sort of are cheating, right?

1624
01:40:36,300 --> 01:40:42,700
We're returning back these room positions and stuff like this, that we

1625
01:40:42,700 --> 01:40:45,500
need to have for our when we, when we were using that.

1626
01:40:46,500 --> 01:40:48,100
That information outside.

1627
01:40:48,500 --> 01:40:50,700
And so when I go to look at,

1628
01:40:54,200 --> 01:40:57,900
Where this is used, you can see that it gets back, the standard room

1629
01:40:57,900 --> 01:41:03,000
thing and then it grabs out of the standard room, some information

1630
01:41:03,000 --> 01:41:06,900
that it needs to figure out where it wants to put things like the

1631
01:41:06,900 --> 01:41:09,300
snake and the monstar and whatever, right?

1632
01:41:10,200 --> 01:41:12,200
And that's how it like populates the room.

1633
01:41:12,200 --> 01:41:17,200
And the problem is that if we pass, you know, other sizes here that

1634
01:41:17,200 --> 01:41:20,000
we're going to run out of space in these arrays, but in theory, that's

1635
01:41:20,000 --> 01:41:23,900
okay, you know, we don't have to do this this way.

1636
01:41:24,300 --> 01:41:24,800
Right?

1637
01:41:26,200 --> 01:41:31,100
What we could do instead, if we wanted to is, we could make it so that

1638
01:41:31,800 --> 01:41:36,300
it's the arrays are big enough to hold bigger rooms and then they just

1639
01:41:36,300 --> 01:41:37,500
kind of slide around.

1640
01:41:37,800 --> 01:41:40,900
I also don't know why we chose to use the offset X.

1641
01:41:40,900 --> 01:41:44,600
I guess it's because we wanted to pass the center of a room which is

1642
01:41:44,700 --> 01:41:45,100
it's fine.

1643
01:41:45,100 --> 01:41:45,600
I suppose.

1644
01:41:45,600 --> 01:41:49,600
But so what we might want to do is just make these like bigger, right?

1645
01:41:49,600 --> 01:41:53,400
So you know maybe we want to make these just bigger to be able to hold

1646
01:41:53,400 --> 01:41:53,900
a bunch of

1647
01:41:54,100 --> 01:41:54,600
Stuff.

1648
01:41:54,600 --> 01:41:56,800
And then they just won't hold that stuff.

1649
01:41:57,700 --> 01:41:59,800
If we don't have any stuff in there for them,

1650
01:42:00,000 --> 01:42:03,000
You hold and then what we can do is say like alright.

1651
01:42:03,000 --> 01:42:11,500
Let's suppose we pass in a radius X and a radius Y for the room and

1652
01:42:12,000 --> 01:42:15,800
you know, again, this is just really messy code.

1653
01:42:15,800 --> 01:42:16,700
There's nothing.

1654
01:42:24,100 --> 01:42:26,800
This is not probably how we're going to do any of this stuff when we

1655
01:42:26,800 --> 01:42:30,600
do the world, Jen code path where we're actually trying to make a game

1656
01:42:30,600 --> 01:42:31,000
world.

1657
01:42:31,000 --> 01:42:33,700
But you know, for now it's the simplest thing that would give us the

1658
01:42:33,700 --> 01:42:39,400
ability to change the size of the room and so before you know it we've

1659
01:42:39,400 --> 01:42:40,300
got a what was it?

1660
01:42:40,300 --> 01:42:41,500
An 8 by 4?

1661
01:42:43,100 --> 01:42:43,600
I'm sorry.

1662
01:42:43,900 --> 01:42:44,800
A radius 84.

1663
01:42:44,800 --> 01:42:47,600
So it was a 17 by 9, right?

1664
01:42:48,100 --> 01:42:52,300
And so now, when we call this in theory, oh wait, one more thing, we

1665
01:42:52,300 --> 01:42:52,800
have to do.

1666
01:42:54,300 --> 01:43:01,300
When we place this information here, we have to make sure that we are

1667
01:43:01,300 --> 01:43:04,200
using these correctly, right?

1668
01:43:04,600 --> 01:43:06,400
So we've got a radius x.

1669
01:43:06,400 --> 01:43:06,800
The radius.

1670
01:43:06,800 --> 01:43:07,300
Why?

1671
01:43:07,700 --> 01:43:11,200
We know that this also has to be oops.

1672
01:43:14,200 --> 01:43:17,300
We know that these also have to be adjusted by that.

1673
01:43:17,500 --> 01:43:22,100
So there's basically like a array X or Ray.

1674
01:43:22,100 --> 01:43:22,700
Why.

1675
01:43:23,400 --> 01:43:25,600
And they look like this

1676
01:43:38,100 --> 01:43:40,600
and so, you know, if we get this

1677
01:43:43,400 --> 01:43:44,600
If you get this stuff right.

1678
01:43:50,100 --> 01:43:52,700
Then in theory, we should be able to pack into the array stuff.

1679
01:43:52,700 --> 01:43:55,500
Regardless of what the size of the room is going to be, right?

1680
01:43:56,900 --> 01:43:59,100
And I think that should be roughly correct.

1681
01:43:59,100 --> 01:44:02,400
Although actually the fact that that didn't work means that we've got

1682
01:44:02,400 --> 01:44:06,000
some other problem here, but I think this is right, radius Y is 4.

1683
01:44:06,000 --> 01:44:10,800
So be negative for 24 offset X radius of 8.

1684
01:44:10,800 --> 01:44:13,600
It would be negative 8 to 8, which again, is what we want.

1685
01:44:13,900 --> 01:44:15,500
Those offsets should work properly.

1686
01:44:15,500 --> 01:44:17,400
These are all just based on the offset.

1687
01:44:20,100 --> 01:44:22,300
and,

1688
01:44:27,900 --> 01:44:32,000
I don't see anything else that would be problematic.

1689
01:44:32,000 --> 01:44:34,900
So, in theory, I would think that that would work.

1690
01:44:35,400 --> 01:44:36,700
I don't know if it does.

1691
01:44:44,600 --> 01:44:49,700
Looks like we're creating too many entities, all of a sudden, did I

1692
01:44:49,700 --> 01:44:51,000
mess up my for Loop?

1693
01:45:09,800 --> 01:45:12,400
I may well have messed up my for loop I suppose.

1694
01:45:16,200 --> 01:45:21,100
Or maybe I was using the standard rooms size as something that we

1695
01:45:21,100 --> 01:45:21,800
actually.

1696
01:45:27,700 --> 01:45:29,400
Yep, that's what I was doing.

1697
01:45:31,500 --> 01:45:32,800
So that's not really allowed.

1698
01:45:32,800 --> 01:45:37,200
Obviously I need to have a idea here of how big the room is.

1699
01:45:37,500 --> 01:45:38,200
Right.

1700
01:45:39,000 --> 01:45:39,700
But that's fine.

1701
01:45:39,700 --> 01:45:42,600
So that's not really a big deal.

1702
01:45:42,600 --> 01:45:45,600
You can see how this stuff was going here.

1703
01:45:46,300 --> 01:45:50,500
So really all we need to do is say we need to know how big the room

1704
01:45:50,500 --> 01:45:53,000
actually is this left hole, right?

1705
01:45:53,000 --> 01:45:55,300
Whole stuff is not particularly good.

1706
01:45:55,600 --> 01:45:58,500
In fact, can we get rid of that now that we're not doing that stuff

1707
01:45:58,500 --> 01:46:00,100
anymore for up down?

1708
01:46:02,400 --> 01:46:05,900
Because again, we don't, this is just really, really hacky code that

1709
01:46:05,900 --> 01:46:07,500
we don't really want to be doing here.

1710
01:46:08,100 --> 01:46:09,800
So I would say,

1711
01:46:13,400 --> 01:46:17,000
Let's get rid of it now while we can so we don't have to keep trying

1712
01:46:17,000 --> 01:46:19,200
to make it happen here.

1713
01:46:19,200 --> 01:46:20,500
Target ref.

1714
01:46:21,400 --> 01:46:25,100
Yeah, because we turned off the auto boost, right?

1715
01:46:26,000 --> 01:46:26,500
And

1716
01:46:38,500 --> 01:46:40,100
I'm just going to go ahead and get rid of that.

1717
01:46:40,400 --> 01:46:40,700
Okay.

1718
01:46:41,600 --> 01:46:44,700
So then we don't have to worry about this part for now.

1719
01:46:48,300 --> 01:46:50,000
And then hopefully we'll be okay.

1720
01:46:50,800 --> 01:46:53,600
So then what I need to do is I need to have an idea of how big this

1721
01:46:53,600 --> 01:46:54,100
room is.

1722
01:46:54,700 --> 01:46:58,700
So room, radius X, and

1723
01:47:01,000 --> 01:47:02,900
Oops, room, radius Y.

1724
01:47:03,700 --> 01:47:05,900
And again, I'll just use 8 and 4 here.

1725
01:47:10,700 --> 01:47:16,900
Like so, and I will say that in general that just means that, you

1726
01:47:16,900 --> 01:47:23,200
know, for the room Dimension here we can compute the room with is just

1727
01:47:23,200 --> 01:47:26,100
whatever the radius is 2 times.

1728
01:47:26,100 --> 01:47:31,200
The radius plus 1 and the room height is going to be 2 times the

1729
01:47:31,200 --> 01:47:35,200
radius plus one because again you've got that many squares to the

1730
01:47:35,200 --> 01:47:35,400
left.

1731
01:47:35,400 --> 01:47:37,400
That means Square for the right and the middle Square.

1732
01:47:37,400 --> 01:47:39,400
So that's 2 times this plus one and the same

1733
01:47:39,600 --> 01:47:41,600
The height.

1734
01:47:44,100 --> 01:47:49,400
And so then if we come through here we've got room with sorry height.

1735
01:47:52,000 --> 01:47:56,400
So and I think that's it.

1736
01:47:56,600 --> 01:47:59,800
These tile values since we're in signed integer here at

1737
01:48:00,000 --> 01:48:01,400
How do we be consistent?

1738
01:48:02,400 --> 01:48:03,500
And let's take a look.

1739
01:48:04,800 --> 01:48:06,300
Well, alright, maybe not.

1740
01:48:07,600 --> 01:48:09,100
Looks like we're using all unsigned.

1741
01:48:09,100 --> 01:48:10,800
There we go.

1742
01:48:14,100 --> 01:48:14,700
So yeah.

1743
01:48:14,700 --> 01:48:18,200
So now in theory we're recreating the same the rooms the way that we

1744
01:48:18,200 --> 01:48:19,500
were creating them, right?

1745
01:48:19,600 --> 01:48:21,100
And you can see how that's going here.

1746
01:48:22,100 --> 01:48:26,100
And so what I would like to do potentially is now just try to align

1747
01:48:26,100 --> 01:48:33,800
these rooms like a little bit more cleanly and so that I can change

1748
01:48:33,800 --> 01:48:36,800
this radius to be different something.

1749
01:48:36,800 --> 01:48:37,300
Different

1750
01:48:37,700 --> 01:48:38,100
Right?

1751
01:48:38,800 --> 01:48:42,200
And so if you look at what has to happen here, where we are placing,

1752
01:48:42,200 --> 01:48:44,000
the room is really the important part.

1753
01:48:44,000 --> 01:48:49,000
So when we call this screen X tiles for with screen X, Y tiles for

1754
01:48:49,000 --> 01:48:49,400
height.

1755
01:48:49,500 --> 01:48:51,000
That's not really going to cut it anymore.

1756
01:48:51,000 --> 01:48:53,100
So what I need is like I need a location.

1757
01:48:55,000 --> 01:49:00,100
That I can use as sort of a way of saying, where the room is and so

1758
01:49:01,100 --> 01:49:01,500
yeah.

1759
01:49:01,500 --> 01:49:04,400
So this tiles per with and tiles per

1760
01:49:06,200 --> 01:49:09,800
With tiles for height.

1761
01:49:09,900 --> 01:49:13,600
Thing, here is not going to work anymore that's got to be room with

1762
01:49:13,700 --> 01:49:15,400
and room height, right?

1763
01:49:15,700 --> 01:49:17,300
So this is going to be room with

1764
01:49:23,700 --> 01:49:27,300
Oops room, Heights.

1765
01:49:27,500 --> 01:49:29,000
Both these places.

1766
01:49:31,000 --> 01:49:31,600
so,

1767
01:49:35,300 --> 01:49:36,500
And let's take a look here.

1768
01:50:00,300 --> 01:50:02,800
Okay, so I think that's all we would really need.

1769
01:50:07,600 --> 01:50:10,400
And we also don't need to initialize the camera position.

1770
01:50:11,700 --> 01:50:14,800
I don't think it would just well, I mean, I would probably have to

1771
01:50:14,800 --> 01:50:17,500
initial it to as it something, but the camera following stuff should

1772
01:50:17,500 --> 01:50:20,300
work, so I feel like probably

1773
01:50:24,400 --> 01:50:27,700
Well no, we're going to have to initialize it to elect where the

1774
01:50:27,700 --> 01:50:30,200
player is or something at the very least.

1775
01:50:31,000 --> 01:50:34,800
So, I guess we kind of have to do a little bit of that because it'll

1776
01:50:34,800 --> 01:50:37,500
always snap to the correct room once you find the player.

1777
01:50:37,700 --> 01:50:41,100
So, yeah, there's that anyway.

1778
01:50:41,300 --> 01:50:43,600
So let's, let's take a look here at what we're doing.

1779
01:50:43,600 --> 01:50:46,900
So when we do add standard room, now what we want to do is have a

1780
01:50:46,900 --> 01:50:47,600
position.

1781
01:50:47,600 --> 01:50:49,500
You can see that we've got an AB style X.

1782
01:50:49,500 --> 01:50:52,400
So we want to do like room Center tie.

1783
01:50:52,400 --> 01:50:53,100
Lex

1784
01:50:56,200 --> 01:50:57,700
And room Center tile.

1785
01:50:57,700 --> 01:50:59,700
Why and

1786
01:51:00,000 --> 01:51:04,200
You just want to move that around as we go, right?

1787
01:51:05,700 --> 01:51:07,400
And so, let's go ahead and

1788
01:51:08,800 --> 01:51:10,900
start that initialize to something.

1789
01:51:17,400 --> 01:51:18,500
00 is fine.

1790
01:51:21,500 --> 01:51:24,600
And then as we go, we'll just every time we're done with a room will

1791
01:51:24,600 --> 01:51:28,900
move out of that room by however much.

1792
01:51:28,900 --> 01:51:31,700
We needed it to move by, right?

1793
01:51:32,100 --> 01:51:35,400
And so here, when we do screen X screen, why you can see, the like we

1794
01:51:35,400 --> 01:51:38,000
were previously tracking, this piece of information, we're going to

1795
01:51:38,000 --> 01:51:38,800
get rid of that.

1796
01:51:41,200 --> 01:51:44,100
And just not use that anymore, right?

1797
01:51:58,700 --> 01:52:00,600
Okay, so

1798
01:52:03,700 --> 01:52:06,400
So, when we are updating those here, and then, of course, when we also

1799
01:52:06,400 --> 01:52:06,900
use them here.

1800
01:52:06,900 --> 01:52:09,400
So we've got last screen acts last green lie.

1801
01:52:09,800 --> 01:52:12,900
What we really want to do here is now just say, like, okay, when we do

1802
01:52:12,900 --> 01:52:16,400
camera tiles, let's get rid of all this nonsense here and just to room

1803
01:52:16,400 --> 01:52:18,100
Center Thai, Lex

1804
01:52:19,500 --> 01:52:20,900
And room Center tile.

1805
01:52:20,900 --> 01:52:21,600
Why

1806
01:52:26,700 --> 01:52:29,900
And I guess we put we're saying we are putting the camera there I

1807
01:52:29,900 --> 01:52:32,700
guess is where we're putting it which I guess seems fine.

1808
01:52:32,800 --> 01:52:35,000
So we're putting it on the last room we created.

1809
01:52:35,900 --> 01:52:38,700
I guess that's what we were doing before anyway.

1810
01:52:40,600 --> 01:52:44,000
So let's go ahead and say okay we've got the three necks and the

1811
01:52:44,000 --> 01:52:50,900
screen wine and we need to update those now as if their room Center

1812
01:52:51,600 --> 01:52:55,400
tile X and room Center tile.

1813
01:52:55,400 --> 01:52:55,900
Why?

1814
01:52:56,200 --> 01:52:56,300
And

1815
01:52:56,500 --> 01:53:01,200
Those two together are now going to be updated by like the room with

1816
01:53:01,600 --> 01:53:02,300
and the room.

1817
01:53:03,900 --> 01:53:05,000
Height, right?

1818
01:53:05,000 --> 01:53:06,400
That's how far they're going to move by.

1819
01:53:07,900 --> 01:53:11,600
So let's take a look at what that does now that doesn't look quite

1820
01:53:11,600 --> 01:53:12,000
right.

1821
01:53:12,100 --> 01:53:14,900
But what you gonna do, guess we're putting the player it sort of the

1822
01:53:14,900 --> 01:53:15,700
wrong location.

1823
01:53:18,600 --> 01:53:23,100
We'll, we'll deal with that later, but let's just see if this is

1824
01:53:23,100 --> 01:53:25,500
creating rooms that have properly, but it does.

1825
01:53:25,500 --> 01:53:26,900
So that's good, right?

1826
01:53:27,300 --> 01:53:31,100
And we can take a look at the

1827
01:53:32,700 --> 01:53:34,700
The debug View and see that they properly.

1828
01:53:34,700 --> 01:53:35,600
But right.

1829
01:53:36,500 --> 01:53:39,900
So now let's just see if what we see if we can change the size of the

1830
01:53:39,900 --> 01:53:41,800
rooms a little bit, right?

1831
01:53:42,100 --> 01:53:46,000
And so, what if I was to say that I wanted the room height to be a

1832
01:53:46,000 --> 01:53:47,000
little bit different.

1833
01:53:47,600 --> 01:53:51,800
So, for example, if I said, the room radius could be for, but it could

1834
01:53:51,800 --> 01:53:57,000
also be changed to, you know, to up to six or something.

1835
01:53:57,400 --> 01:53:59,800
So, add two tiles on either side, and

1836
01:54:00,000 --> 01:54:00,800
Happens there.

1837
01:54:04,200 --> 01:54:05,900
It's like we've run out of entities again.

1838
01:54:07,600 --> 01:54:10,800
When we're doing our creation, that really is just because the

1839
01:54:10,800 --> 01:54:15,700
creation phase, we only create one sim region as a cheat.

1840
01:54:15,800 --> 01:54:18,900
When we fix the world creation code, we won't have when we do it a

1841
01:54:18,900 --> 01:54:20,800
little bit differently, we won't have that problem anymore.

1842
01:54:21,800 --> 01:54:25,900
So here are our rooms that are obviously you know, much bigger, right?

1843
01:54:27,000 --> 01:54:28,300
Then the previous room size.

1844
01:54:28,600 --> 01:54:31,000
And so now the question is just like, okay, can we change that

1845
01:54:31,000 --> 01:54:31,900
dynamically, right?

1846
01:54:31,900 --> 01:54:36,900
Can I say like I want the rooms to be sized in a more variable.

1847
01:54:37,400 --> 01:54:42,800
So I'm just going to go ahead and pick a random count here, right?

1848
01:54:47,400 --> 01:54:50,100
and actually, I guess, I don't know what our

1849
01:55:01,900 --> 01:55:05,300
Gum and I don't know what our series is here.

1850
01:55:05,300 --> 01:55:06,400
So it's just that

1851
01:55:08,900 --> 01:55:12,100
So now in theory, we would have different sized rooms in different

1852
01:55:12,100 --> 01:55:13,000
places, right?

1853
01:55:13,000 --> 01:55:17,100
And so, you can see like coming through here, we would have different

1854
01:55:17,100 --> 01:55:19,500
sized rooms, and you can kind of see that they are different sized

1855
01:55:19,500 --> 01:55:19,700
rooms.

1856
01:55:19,700 --> 01:55:21,200
So let's go ahead and

1857
01:55:22,700 --> 01:55:26,000
And turn the let's see here.

1858
01:55:28,200 --> 01:55:28,700
There we go.

1859
01:55:29,600 --> 01:55:32,000
So you can kind of see that like these rooms are now different sizes

1860
01:55:32,000 --> 01:55:35,200
and in theory we could make that be a little bit more dramatic here by

1861
01:55:35,200 --> 01:55:40,000
making both of them have different sizes, right?

1862
01:55:40,000 --> 01:55:41,000
Both parameters.

1863
01:55:41,200 --> 01:55:42,000
Oh, that's no good.

1864
01:55:43,300 --> 01:55:46,000
Initially, we got to make sure we initialize our camera properly.

1865
01:55:46,600 --> 01:55:48,700
That's not going to be good.

1866
01:55:48,700 --> 01:55:49,000
Yeah.

1867
01:55:51,300 --> 01:55:51,800
There we go.

1868
01:55:53,700 --> 01:55:56,100
So yeah.

1869
01:55:58,600 --> 01:56:01,400
So now we have an additional problem, which I hadn't thought of and

1870
01:56:01,400 --> 01:56:02,100
should have thought of.

1871
01:56:02,700 --> 01:56:06,600
And that is just that we have to know the size of both rooms to know

1872
01:56:06,600 --> 01:56:10,500
how far we should go to connect the next room, right?

1873
01:56:11,600 --> 01:56:17,400
So we essentially need a thing that's like room, you know, last room

1874
01:56:17,400 --> 01:56:22,600
with and last room height like so.

1875
01:56:23,200 --> 01:56:27,900
And we need to do a thing where we're basically going to take

1876
01:56:36,700 --> 01:56:39,800
Well, I guess really, we would need to know what the next room height

1877
01:56:39,800 --> 01:56:40,500
was.

1878
01:56:43,800 --> 01:56:45,000
I guess we don't need to know.

1879
01:56:45,000 --> 01:56:46,000
That's not, that's not true.

1880
01:56:46,500 --> 01:56:49,400
So we don't need to know the last room with the last room.

1881
01:56:49,400 --> 01:56:50,400
Height per se.

1882
01:56:50,700 --> 01:56:54,100
What we need to know is what direction we went in, right?

1883
01:56:54,600 --> 01:56:59,100
Because when we do this particular operation here, we can advance by

1884
01:56:59,100 --> 01:56:59,800
however much

1885
01:57:00,100 --> 01:57:03,200
The room with their height was right.

1886
01:57:03,800 --> 01:57:10,400
But then at that point we need we could we could move forward by

1887
01:57:10,400 --> 01:57:14,400
however much we need to for this room and then the next time we have

1888
01:57:14,400 --> 01:57:17,000
to move forward by however much we should for the other room.

1889
01:57:17,500 --> 01:57:21,200
But the problem with doing that is we just don't know how much the

1890
01:57:21,200 --> 01:57:22,400
next room's width.

1891
01:57:22,400 --> 01:57:24,100
And height is going to be so we can't do it at this point.

1892
01:57:24,100 --> 01:57:28,000
So we need to know what the door direction is kind of like looping

1893
01:57:28,000 --> 01:57:29,400
around if that makes sense.

1894
01:57:30,000 --> 01:57:33,100
So really what we mostly need to know here is just what's the door

1895
01:57:33,100 --> 01:57:33,800
Direction.

1896
01:57:36,000 --> 01:57:40,500
That makes sense and that needs to persist across.

1897
01:57:41,400 --> 01:57:49,700
And so when we do here, we're going to want to add the room radius to

1898
01:57:49,700 --> 01:57:52,600
move us that far to get us basically to where we need to be.

1899
01:57:53,800 --> 01:57:58,000
And then the next time around, in fact we can and will do the plus one

1900
01:57:58,000 --> 01:58:02,700
in here for that one interceding tile, and then we'll do a drawer

1901
01:58:02,700 --> 01:58:05,200
Direction 0 or 1 here.

1902
01:58:18,300 --> 01:58:20,000
And we can make up the difference.

1903
01:58:20,100 --> 01:58:23,900
So now we know where our room radius is, we can just add that extra

1904
01:58:23,900 --> 01:58:26,100
bit that we needed to to get us to the right place.

1905
01:58:26,100 --> 01:58:30,900
So we add those two together to get the correct door placement in

1906
01:58:30,900 --> 01:58:31,400
theory.

1907
01:58:40,600 --> 01:58:44,100
And so now in theory all of our rooms will be lined up properly and

1908
01:58:44,100 --> 01:58:45,500
they can be arbitrary sizes.

1909
01:58:45,500 --> 01:58:51,400
And so the only thing that I wanted to do that, we're not doing now

1910
01:58:51,700 --> 01:58:54,100
because now you can see like these rooms are, just whatever size,

1911
01:58:54,100 --> 01:58:56,400
these rooms are and that's all fine.

1912
01:58:57,500 --> 01:59:00,600
But what you can see here is the other thing we're going to have to do

1913
01:59:00,600 --> 01:59:07,200
is that if we were actually, if we're actually in viewing it at game

1914
01:59:07,200 --> 01:59:09,800
distance, we now have to do something where we

1915
01:59:10,000 --> 01:59:12,300
Make sure that the camera zooms out.

1916
01:59:12,300 --> 01:59:15,800
Far enough for whatever room we're trying to be in in order to make

1917
01:59:15,800 --> 01:59:17,500
sure that we see the whole room, right?

1918
01:59:17,900 --> 01:59:20,500
And that's something we can do next time.

1919
01:59:26,900 --> 01:59:27,200
All right.

1920
01:59:27,200 --> 01:59:28,100
Let's go to the Q&A.

1921
02:00:29,100 --> 02:00:29,800
Cisco.

1922
02:00:29,800 --> 02:00:33,200
Hey Casey, is anyone planning on doing a more boiled down version of

1923
02:00:33,200 --> 02:00:36,300
handmade hero to take apart the game and give a breakdown of the

1924
02:00:36,300 --> 02:00:38,300
aspect of each system in the project?

1925
02:00:39,800 --> 02:00:44,100
I don't know that anyone is planning on that at the moment.

1926
02:00:49,700 --> 02:00:50,300
Yeah.

1927
02:00:55,600 --> 02:00:56,900
I think that's a good idea.

1928
02:00:57,800 --> 02:01:01,100
It's something that I was kind of going to consider doing myself but I

1929
02:01:01,100 --> 02:01:03,800
don't know by the time I'm done with handmade hero, I might not want

1930
02:01:03,800 --> 02:01:06,000
to go back and do that, right?

1931
02:01:07,400 --> 02:01:08,600
But I think it's a good idea.

1932
02:01:08,700 --> 02:01:11,000
I just don't think anyone's planning on doing it at the moment.

1933
02:01:13,700 --> 02:01:16,300
Mid low or make the camera pan with in the room?

1934
02:01:16,400 --> 02:01:19,000
Yeah, we could have painting within rooms as well, either.

1935
02:01:19,000 --> 02:01:20,200
One of those would be fine.

1936
02:01:33,400 --> 02:01:35,400
Let's see, longtime archive viewer.

1937
02:01:35,400 --> 02:01:38,500
But first time livestreamer, I have to pre-screen questions, but I

1938
02:01:38,500 --> 02:01:40,400
can't ever make the priests room time.

1939
02:01:40,800 --> 02:01:44,200
Do you have a strong opinion about why in Star p is superior style

1940
02:01:44,200 --> 02:01:46,900
than it star, space p?

1941
02:01:47,300 --> 02:01:49,000
Or are you impartial to whatever the dev?

1942
02:01:49,000 --> 02:01:52,200
Prefers was the first part?

1943
02:01:52,200 --> 02:01:55,900
Second part is does compiler optimizations - oh to guarantee that the

1944
02:01:55,900 --> 02:02:01,000
same output is generated for time, independent code.

1945
02:02:01,300 --> 02:02:01,800
Okay.

1946
02:02:02,200 --> 02:02:02,600
That is

1947
02:02:03,300 --> 02:02:04,800
Out of order processing ever introduced.

1948
02:02:04,800 --> 02:02:08,500
Some nasty logic control flow bugs that OD wouldn't.

1949
02:02:08,900 --> 02:02:11,300
Okay, I'll try to tackle that.

1950
02:02:12,400 --> 02:02:14,200
Let me answer the first one first.

1951
02:02:14,500 --> 02:02:19,100
So a strong opinion about why in Star p is better than insert piece.

1952
02:02:19,100 --> 02:02:19,200
Okay?

1953
02:02:19,200 --> 02:02:22,300
So, what what they're asking about is,

1954
02:02:29,000 --> 02:02:33,300
This like, you know, if I was to declare a variable and put the star

1955
02:02:33,300 --> 02:02:40,000
next to the P or before the p and the question was just do I have a

1956
02:02:40,000 --> 02:02:40,300
strong?

1957
02:02:40,300 --> 02:02:42,300
You know, I write it this way.

1958
02:02:42,800 --> 02:02:43,700
Am I writing it that way?

1959
02:02:43,700 --> 02:02:47,100
Because I feel like there's a really good reason to do so or am I just

1960
02:02:47,100 --> 02:02:48,500
arbitrarily running at that way?

1961
02:02:48,500 --> 02:02:50,000
And I wouldn't care if someone wrote this way.

1962
02:02:50,700 --> 02:02:51,700
It's the latter.

1963
02:02:51,700 --> 02:02:57,400
I don't care between these two so it's really just force of habit, you

1964
02:02:57,400 --> 02:02:57,800
know?

1965
02:02:58,600 --> 02:02:59,700
Code that looks like this.

1966
02:03:00,000 --> 02:03:01,100
Oh, that looks like this.

1967
02:03:01,500 --> 02:03:02,500
It doesn't.

1968
02:03:03,000 --> 02:03:07,000
I can't think of any real reasons why you would prefer one or the

1969
02:03:07,000 --> 02:03:08,700
other like overwhelmingly.

1970
02:03:13,700 --> 02:03:21,600
So I don't know, I guess what I would say is that in space star P

1971
02:03:21,600 --> 02:03:23,500
versus in Star p.

1972
02:03:28,000 --> 02:03:31,700
You know, I could see why someone might prefer the bottom one, which

1973
02:03:31,700 --> 02:03:36,200
is not the style that I use, but I can see why someone might prefer

1974
02:03:36,200 --> 02:03:41,700
the bottom one because they want to see the type information like kind

1975
02:03:41,700 --> 02:03:42,700
of all together.

1976
02:03:52,800 --> 02:03:54,700
Yeah, I guess I don't have a strong opinion.

1977
02:03:54,700 --> 02:03:56,100
I'm sorry I couldn't.

1978
02:03:56,200 --> 02:03:58,700
If you're looking for guidance on which one to do, I would say it's

1979
02:03:58,700 --> 02:04:01,200
probably really just mostly up to your personal preference.

1980
02:04:03,000 --> 02:04:05,400
You know you could imagine situations where you're declaring more than

1981
02:04:05,400 --> 02:04:08,900
one variable and then they do look quite a bit different.

1982
02:04:10,300 --> 02:04:14,300
Because in this one, it kind of looks like Q does not have a star and

1983
02:04:14,300 --> 02:04:18,600
then this one, it looks like Q does have a star, you know, to your eye

1984
02:04:20,700 --> 02:04:21,400
Maybe.

1985
02:04:24,500 --> 02:04:26,300
But I just yeah I'm sorry.

1986
02:04:26,300 --> 02:04:30,900
I don't have a strong opinion on that so I would certainly not tell

1987
02:04:30,900 --> 02:04:34,300
someone to do it one way or the other way for any particular reason.

1988
02:04:34,300 --> 02:04:38,600
But you know other people may have, you know, stronger opinions about

1989
02:04:38,600 --> 02:04:41,200
then I do the second question.

1990
02:04:41,200 --> 02:04:44,200
Does the compiler optimization - oh to guarantee that the same output

1991
02:04:44,200 --> 02:04:45,000
is generated for time?

1992
02:04:45,000 --> 02:04:45,900
Independent code.

1993
02:04:46,000 --> 02:04:48,600
That is that the out of order processing ever introduced some nasty

1994
02:04:48,600 --> 02:04:50,600
logic control flow bugs that OD wouldn't

1995
02:04:53,700 --> 02:04:59,300
The answer there is that it's kind of confusing a little bit because

1996
02:05:00,400 --> 02:05:02,700
it depends on what you mean by.

1997
02:05:02,900 --> 02:05:08,300
Does it produce the same thing obviously 02 + OD produced very

1998
02:05:08,300 --> 02:05:09,900
different code, right?

1999
02:05:09,900 --> 02:05:13,100
Like that's certain and if you look at what happens in the code you

2000
02:05:13,100 --> 02:05:14,600
can see that it's very different.

2001
02:05:17,700 --> 02:05:22,300
And what I would say is that if the code is properly barrier, dad,

2002
02:05:23,900 --> 02:05:27,700
meaning that if you have read and write barriers, and sorted in the

2003
02:05:27,700 --> 02:05:32,900
code for like multi-threading purposes, for example, then to the best

2004
02:05:32,900 --> 02:05:33,600
of my knowledge.

2005
02:05:33,600 --> 02:05:38,100
I can't think of any reason that 02 code, unless the compiler has a

2006
02:05:38,100 --> 02:05:40,100
bug, which compiler sometimes do.

2007
02:05:41,100 --> 02:05:42,500
And sometimes do with O2.

2008
02:05:43,400 --> 02:05:45,500
If the compiler, has a bug, all bets are off, but the compiler doesn't

2009
02:05:45,500 --> 02:05:47,100
have a bug then know in general.

2010
02:05:47,200 --> 02:05:51,600
Roll, the code should always work correctly, in both cases if the code

2011
02:05:51,600 --> 02:05:54,000
does not have barriers in it properly, right?

2012
02:05:54,000 --> 02:05:58,000
So, if the code itself essentially has a bug which is that it doesn't

2013
02:05:58,000 --> 02:05:59,500
have barriers in it, then in a

2014
02:06:00,000 --> 02:06:05,000
Threading context where two threads are operating on the code.

2015
02:06:05,000 --> 02:06:10,300
At the same time, I'm sorry on the date at the same time, then the

2016
02:06:10,300 --> 02:06:14,400
debug compiled version of the code will naturally have the rights

2017
02:06:14,400 --> 02:06:18,300
occurring in the order that they should be occurring in because the

2018
02:06:18,300 --> 02:06:22,500
compiler will just output them exactly the way that they go, right?

2019
02:06:24,700 --> 02:06:29,500
And on the other hand, if you do 02.

2020
02:06:29,500 --> 02:06:29,900
So you

2021
02:06:30,000 --> 02:06:31,200
Optimization sign.

2022
02:06:31,600 --> 02:06:35,100
It could reorder all that stuff around to do it in a whatever the most

2023
02:06:35,100 --> 02:06:41,800
efficient way to do it is and on a machine like x64 which has very

2024
02:06:41,800 --> 02:06:47,800
strong memory ordering guarantees on the CPU side that will very

2025
02:06:47,800 --> 02:06:52,700
likely mean that you could easily see buggy Behavior with 02 on that,

2026
02:06:52,700 --> 02:06:55,700
you won't see with Odeon in a multi-threaded context.

2027
02:06:56,200 --> 02:06:59,400
Again, this is not because the compiler necessarily has a bug.

2028
02:06:59,400 --> 02:06:59,800
It may

2029
02:07:00,800 --> 02:07:01,900
But that's very rare.

2030
02:07:02,300 --> 02:07:05,500
It is probably because you have a bug in the code that just isn't

2031
02:07:05,500 --> 02:07:08,100
exposed until 0202 is run.

2032
02:07:08,300 --> 02:07:09,700
Which does the reordering.

2033
02:07:09,900 --> 02:07:15,100
And then the memory visibility order changes on pieces of information

2034
02:07:15,100 --> 02:07:18,300
you were writing to which causes the bug, right?

2035
02:07:20,000 --> 02:07:25,300
So I feel like that's just worth keeping in mind in general.

2036
02:07:25,300 --> 02:07:29,100
I can't think of any circumstance where properly written code, where

2037
02:07:29,100 --> 02:07:32,900
the behavior will change between OD + O2, in a way, that introduces a

2038
02:07:32,900 --> 02:07:37,000
bug, that doesn't mean that there isn't one again, barring compiler

2039
02:07:37,000 --> 02:07:37,400
errors.

2040
02:07:37,400 --> 02:07:40,200
It just means I can't think of one, but I can think of plenty of

2041
02:07:40,200 --> 02:07:43,300
cases, where bugs, and code can be hidden by o.d.

2042
02:07:43,600 --> 02:07:46,800
and only exposed with O2, that is very easy to have happen.

2043
02:07:48,300 --> 02:07:49,200
That's what I'd say.

2044
02:07:53,000 --> 02:07:53,600
Let's see.

2045
02:08:01,700 --> 02:08:03,600
You said, you didn't want to use pretty function because that wouldn't

2046
02:08:03,600 --> 02:08:06,900
work because duplicate grids with the only place where pretty function

2047
02:08:06,900 --> 02:08:09,800
would have been used in time function, which should never be used more

2048
02:08:09,800 --> 02:08:11,100
than once on any function anyway.

2049
02:08:11,100 --> 02:08:14,300
So, not using debug name and time function would solve the problem.

2050
02:08:14,700 --> 02:08:17,000
All the other calls, the time block was still work with debug name and

2051
02:08:17,000 --> 02:08:18,500
thus use the counter to be unique.

2052
02:08:18,600 --> 02:08:21,600
So I think the extra field for the name is really not necessary.

2053
02:08:22,100 --> 02:08:23,300
Well it isn't it isn't.

2054
02:08:23,300 --> 02:08:26,600
Before Time function would have worked even if you put it multiple

2055
02:08:26,600 --> 02:08:28,300
times in a function, right?

2056
02:08:30,400 --> 02:08:33,800
And you would even have been able to differentiate those two in the

2057
02:08:33,800 --> 02:08:35,800
printout if you'd wanted to because we could have used the line

2058
02:08:35,800 --> 02:08:37,100
number, right?

2059
02:08:38,700 --> 02:08:39,500
So I don't know.

2060
02:08:42,700 --> 02:08:43,500
It's a bummer.

2061
02:08:43,500 --> 02:08:46,000
I would rather just be able to use function like we were using it.

2062
02:08:46,000 --> 02:08:48,900
I think that's the right solution but I don't know any way to really

2063
02:08:48,900 --> 02:08:50,300
like handle it, right?

2064
02:08:55,500 --> 02:08:58,100
Zen Mystic, you talked about, Jesus seek laying, at the start.

2065
02:08:58,100 --> 02:08:58,600
To be clear.

2066
02:08:58,600 --> 02:08:59,700
You will be dropping Visual Studio at

2067
02:09:00,500 --> 02:09:03,100
No, I'm not suggesting that I need to drop Visual Studio.

2068
02:09:03,400 --> 02:09:08,800
I was just pointing out that there are reasons why you might want to

2069
02:09:08,900 --> 02:09:13,000
not bother compiling with Visual Studio, you might just want to

2070
02:09:13,000 --> 02:09:14,300
compile the clang everywhere.

2071
02:09:14,600 --> 02:09:17,800
Because once you can use the same compiler on all platforms, it takes

2072
02:09:17,800 --> 02:09:20,900
a little bit of a headache out of the way for you if you want it,

2073
02:09:20,900 --> 02:09:21,400
right.

2074
02:09:21,800 --> 02:09:25,700
I'm not trying to say that you have to do that or that you'd like

2075
02:09:25,700 --> 02:09:27,300
there's the did that.

2076
02:09:27,300 --> 02:09:29,800
It's like an over W riding like a priority.

2077
02:09:30,000 --> 02:09:33,300
Or anything, it just it there's a good argument for that, right?

2078
02:09:44,300 --> 02:09:45,500
I let's see.

2079
02:09:45,600 --> 02:09:48,300
What is your opinion on minkowski Portal refinement?

2080
02:09:48,300 --> 02:09:49,600
For Collision detection and response.

2081
02:09:49,600 --> 02:09:52,500
I feel it's much nicer as it gives you much of the Collision

2082
02:09:52,500 --> 02:09:53,200
information.

2083
02:09:53,200 --> 02:09:55,700
Like the normal, the depth cetera without having to play an entire

2084
02:09:55,700 --> 02:09:58,900
separate algorithm like judicata does, I have not looked at that?

2085
02:09:59,100 --> 02:09:59,900
So, I don't know.

2086
02:10:01,200 --> 02:10:04,400
I would like to, and obviously, I like minkowski based stuff.

2087
02:10:04,400 --> 02:10:08,000
I mean, gjk is Mankowski based as well, so it might be very good.

2088
02:10:08,000 --> 02:10:12,300
I don't know, I haven't really had much occasion to do a lot of 3D.

2089
02:10:13,000 --> 02:10:16,500
lately because I've been mostly working on 2D stuff and so I just

2090
02:10:16,500 --> 02:10:17,900
don't have

2091
02:10:20,200 --> 02:10:24,200
any practical experience with most of the newer algorithms, and stuff

2092
02:10:24,200 --> 02:10:25,300
that people might be using,

2093
02:10:26,800 --> 02:10:28,900
Have you tried - 0 X4 optimizations?

2094
02:10:28,900 --> 02:10:33,500
I believe it gives even faster code it's a first-hand it's a fast and

2095
02:10:33,500 --> 02:10:34,800
for multiplication Flags.

2096
02:10:35,300 --> 02:10:36,400
No I haven't.

2097
02:10:38,600 --> 02:10:39,600
I don't know.

2098
02:10:48,100 --> 02:10:50,000
Nope, stop help.

2099
02:10:50,500 --> 02:10:51,000
Okay.

2100
02:11:00,300 --> 02:11:01,200
so,

2101
02:11:07,400 --> 02:11:10,000
So we definitely can do it here in 2013.

2102
02:11:11,000 --> 02:11:12,200
Obviously, that's a newer flag.

2103
02:11:12,200 --> 02:11:14,600
Like that was introduced, I don't know.

2104
02:11:17,100 --> 02:11:19,000
To what extent that would change things for us.

2105
02:11:19,800 --> 02:11:23,700
We don't have any good timing test right now, so we wouldn't be able

2106
02:11:23,700 --> 02:11:26,300
to measure the optimizations, but we can certainly see if the code

2107
02:11:26,300 --> 02:11:26,700
still runs.

2108
02:11:26,700 --> 02:11:34,800
Okay with it, just to see how that goes and you know certainly seems

2109
02:11:34,800 --> 02:11:42,800
okay but we are always sink locked to 16 milliseconds so we won't we

2110
02:11:42,800 --> 02:11:45,700
don't have any good speed, you know, perf tests.

2111
02:11:45,700 --> 02:11:46,500
I suppose we

2112
02:11:46,600 --> 02:11:50,900
We should probably have some at some point to be able to get better

2113
02:11:50,900 --> 02:11:52,200
handle on things like that.

2114
02:11:56,500 --> 02:11:59,300
So that's actually pretty reasonable.

2115
02:12:06,500 --> 02:12:07,800
Still with software rendering.

2116
02:12:09,300 --> 02:12:13,600
But yeah, like I said, I don't really know, I don't really know that

2117
02:12:13,600 --> 02:12:15,000
we have anything to run at the moment.

2118
02:12:15,000 --> 02:12:17,900
That would give us a good test to see whether it was better than 02.

2119
02:12:18,500 --> 02:12:19,400
But hey, it works.

2120
02:12:19,400 --> 02:12:20,000
So that's good.

2121
02:12:20,000 --> 02:12:22,400
So we can, when we get down to it, try some of that stuff.

2122
02:12:36,900 --> 02:12:37,400
Hey, Carrie instant.

2123
02:12:37,400 --> 02:12:39,900
I would like to cast my vote that we should do this slide someday.

2124
02:12:40,300 --> 02:12:40,700
Okay.

2125
02:12:40,700 --> 02:12:42,600
Well, we'll try to do the slides someday.

2126
02:12:58,100 --> 02:13:02,100
How long you think it'll take for ji to take over the C++ face in the

2127
02:13:02,100 --> 02:13:02,700
game industry?

2128
02:13:02,700 --> 02:13:05,900
It's not even out yet and I can already say that language is the best

2129
02:13:05,900 --> 02:13:06,600
thing ever.

2130
02:13:06,600 --> 02:13:08,900
Designed okay well there you go.

2131
02:13:10,700 --> 02:13:17,500
I guess what I would say is I really just don't know you know there's

2132
02:13:17,500 --> 02:13:18,700
so many things that

2133
02:13:19,700 --> 02:13:23,300
Affect language adoption that have nothing to do with whether the

2134
02:13:23,300 --> 02:13:24,500
language is good or not.

2135
02:13:24,500 --> 02:13:29,700
You know, like it's not like game developer sit down every year and

2136
02:13:29,700 --> 02:13:33,100
have like a big meeting and go like oh okay you know is C plus plus

2137
02:13:33,100 --> 02:13:34,500
the best thing to develop in guess.

2138
02:13:34,500 --> 02:13:34,800
OK.

2139
02:13:34,800 --> 02:13:35,600
Let's develop in it.

2140
02:13:35,600 --> 02:13:36,900
Like that's not how that works.

2141
02:13:37,300 --> 02:13:41,600
You've got like a very big built-in set of programmers who know how to

2142
02:13:41,600 --> 02:13:42,100
program this thing.

2143
02:13:42,100 --> 02:13:47,400
You've got platforms, that expect it, you've got code bases that are

2144
02:13:47,400 --> 02:13:49,700
like building up over time.

2145
02:13:49,700 --> 02:13:50,200
Time and stuff.

2146
02:13:50,200 --> 02:13:54,200
So I feel like the important thing to remember is that like you can't

2147
02:13:54,200 --> 02:13:55,900
necessarily look at a language and go.

2148
02:13:55,900 --> 02:13:59,500
This language is good or bad or better or worse than what I have.

2149
02:13:59,700 --> 02:14:02,500
So therefore it will like be adopted.

2150
02:14:03,600 --> 02:14:06,600
So I feel like it's impossible to predict something that no matter how

2151
02:14:06,600 --> 02:14:11,000
good of a job, John does nji that that's not necessarily going to

2152
02:14:14,900 --> 02:14:17,500
I'm sure it will affect how the adoption is right?

2153
02:14:17,500 --> 02:14:19,800
It like if it was really bad than the adoption, wouldn't happen.

2154
02:14:19,800 --> 02:14:23,000
But if it's really good that doesn't necessarily mean that adoption

2155
02:14:23,000 --> 02:14:25,400
can happen because there's other barriers to it, right?

2156
02:14:25,600 --> 02:14:28,600
And so I feel like it's embed something that's impossible to predict,

2157
02:14:28,700 --> 02:14:31,600
you know, because it's a social.

2158
02:14:32,700 --> 02:14:33,400
Issue.

2159
02:14:33,400 --> 02:14:35,900
Like, it's about how people are going to behave.

2160
02:14:35,900 --> 02:14:40,300
It's not a asking, you know, is it going to be better for our purposes

2161
02:14:40,300 --> 02:14:44,800
in C++ which is an easier thing to evaluate perhaps more objectively

2162
02:14:55,700 --> 02:14:58,500
Andrei Castor yet we are not using sdl on the Stream.

2163
02:15:00,200 --> 02:15:03,300
Don't have many thoughts in general and sdl because I haven't used it,

2164
02:15:03,800 --> 02:15:06,700
but obviously, lots of games do use it.

2165
02:15:06,700 --> 02:15:12,300
So my assumption would be that while there might be situations where I

2166
02:15:12,300 --> 02:15:16,500
would, you know, be like, oh, I wish it did this this way, or I wish

2167
02:15:16,500 --> 02:15:19,700
it did this this other way or something that it obviously works,

2168
02:15:19,700 --> 02:15:20,200
right?

2169
02:15:20,400 --> 02:15:22,000
Like lots of games ship on it.

2170
02:15:23,100 --> 02:15:26,900
So it's like anything else like Unreal Engine or Unity or these sorts

2171
02:15:26,900 --> 02:15:27,200
of things.

2172
02:15:27,200 --> 02:15:29,900
It's like, you know, while I might not

2173
02:15:30,000 --> 02:15:32,900
Not have design them in a in the way that they're designed or I might

2174
02:15:32,900 --> 02:15:36,200
want to do something differently, they have a good track record,

2175
02:15:36,200 --> 02:15:36,700
right?

2176
02:15:36,700 --> 02:15:43,600
So you know, if you decide to use sdl or something like that you can

2177
02:15:43,600 --> 02:15:48,300
at least be assured that you're not in any worse boat than a lot of

2178
02:15:49,600 --> 02:15:53,400
people out there who have ship successful games, and that's worth a

2179
02:15:53,400 --> 02:15:54,100
lot, right?

2180
02:15:55,200 --> 02:15:59,900
You know, using unproven technology certain, you know, while it may

2181
02:16:00,300 --> 02:16:02,600
Well, there may be reasons to do so because it has things that you

2182
02:16:02,600 --> 02:16:06,500
need or want or you like something about it or you believe it confers,

2183
02:16:07,200 --> 02:16:10,300
some sort of benefits upon you, right?

2184
02:16:13,300 --> 02:16:16,400
I guess, you know, I

2185
02:16:18,100 --> 02:16:21,600
There is something to be said for just going with a majority approach

2186
02:16:21,600 --> 02:16:25,500
like if the majority of things ship on sdl or the majority of things

2187
02:16:25,500 --> 02:16:30,800
ship on X, then at least, you know, you're not in any worst position,

2188
02:16:31,000 --> 02:16:31,500
right?

2189
02:16:31,900 --> 02:16:34,400
It's a, it's a way of bounding your worst case.

2190
02:16:34,900 --> 02:16:38,000
So I guess what I would say is, you know, if you're not very confident

2191
02:16:38,100 --> 02:16:41,799
about how you might want to write your platform layer or you have, if

2192
02:16:41,799 --> 02:16:45,000
you don't have a really good reason why you're going to do something

2193
02:16:45,000 --> 02:16:45,500
else.

2194
02:16:47,799 --> 02:16:51,900
Then it makes a lot of sense to go with something like sdl because you

2195
02:16:52,600 --> 02:16:55,700
don't want to put yourself in a position where your worst case is

2196
02:16:55,700 --> 02:16:57,700
unbounded like that, you know?

2197
02:17:00,000 --> 02:17:00,700
So

2198
02:17:23,000 --> 02:17:30,600
All right, so there's no cues on the other one, on the other chat.

2199
02:17:36,900 --> 02:17:38,100
Did I miss one on here?

2200
02:17:46,900 --> 02:17:47,600
Let's see.

2201
02:17:50,500 --> 02:17:51,500
Oh, I did this one.

2202
02:17:51,500 --> 02:17:56,000
So Zen Mystic was following up and saying, with the question about

2203
02:17:56,000 --> 02:17:58,600
whether I would be switching to clang.

2204
02:18:00,500 --> 02:18:01,200
So it's in Mystic.

2205
02:18:01,200 --> 02:18:02,600
Are you asking about that?

2206
02:18:02,600 --> 02:18:07,200
You mean like on stream or do you mean like at Molly rocket like

2207
02:18:07,200 --> 02:18:12,299
you're talking about for like nine for the for the 1935 4935 game or

2208
02:18:12,299 --> 02:18:14,200
are you talking about on handmade hero?

2209
02:18:16,100 --> 02:18:16,700
Because

2210
02:18:20,200 --> 02:18:24,799
I guess I'd say it's for 1935 it's very unlikely because I don't

2211
02:18:24,799 --> 02:18:27,100
usually like to I think I talked about this last week.

2212
02:18:27,500 --> 02:18:34,400
I don't like to switch Technologies in the middle of a development if

2213
02:18:34,400 --> 02:18:35,200
you can avoid it.

2214
02:18:36,400 --> 02:18:39,500
So I would pretty much always stick with how a plat whatever platform

2215
02:18:39,500 --> 02:18:40,799
setup I'm using on each platform.

2216
02:18:40,799 --> 02:18:43,700
I just keep it that way until the next time and then, you know, I'd

2217
02:18:43,700 --> 02:18:44,799
evaluate it then.

2218
02:18:45,700 --> 02:18:48,100
But for handmade hero, it's a little bit different because since its

2219
02:18:48,100 --> 02:18:51,299
educational things that I wouldn't necessarily do in a main line

2220
02:18:51,299 --> 02:18:55,299
product, I might do, if that makes sense.

2221
02:18:58,299 --> 02:18:58,900
So, I don't know.

2222
02:19:03,000 --> 02:19:06,299
Do you have any thoughts on when to use multiple threads?

2223
02:19:06,700 --> 02:19:09,400
The answer, any more in-depth than when single-threaded isn't fast

2224
02:19:09,400 --> 02:19:09,799
enough?

2225
02:19:12,000 --> 02:19:15,400
No, I don't think the answer is any more in-depth than that, honestly.

2226
02:19:15,600 --> 02:19:19,799
Single threaded code is always the best code in terms of reliability

2227
02:19:19,799 --> 02:19:23,700
and maintainability because there's simply less to think about.

2228
02:19:24,900 --> 02:19:28,799
And so, I think the thing to keep in mind, there is just that.

2229
02:19:30,400 --> 02:19:32,200
While multi-threaded code may be interesting,

2230
02:19:32,400 --> 02:19:32,700
Right.

2231
02:19:32,700 --> 02:19:34,000
As an exercise.

2232
02:19:34,200 --> 02:19:37,100
You never really want to write it if you don't have to, because you're

2233
02:19:37,100 --> 02:19:40,000
really only thing you can do is, introduce bugs, right?

2234
02:19:40,799 --> 02:19:46,600
Multiple threading multi-threaded code is never going to be, you know,

2235
02:19:46,600 --> 02:19:52,200
more sane than single threaded code because it it adds complexity in

2236
02:19:52,200 --> 02:19:53,600
all cases, right?

2237
02:19:54,200 --> 02:19:59,400
And so, usually the answer is exactly, as you put it, if you don't

2238
02:19:59,400 --> 02:20:02,200
feel like, there's a problem with the single threaded code that,

2239
02:20:02,300 --> 02:20:05,400
You have there isn't a reason to switch it to multiple threads.

2240
02:20:05,900 --> 02:20:11,300
However, as with all things in programming, that statement alone is

2241
02:20:11,300 --> 02:20:12,900
still a little complicated.

2242
02:20:13,100 --> 02:20:18,100
And the reason that it's a little bit complicated is because single

2243
02:20:18,100 --> 02:20:19,000
thread code

2244
02:20:21,600 --> 02:20:25,000
When you're writing it the first time depending on how much code

2245
02:20:25,000 --> 02:20:27,900
you're talking about, it, converting it to multi-threaded code,

2246
02:20:28,200 --> 02:20:31,000
depending on the code, can be very difficult sometimes.

2247
02:20:31,500 --> 02:20:34,800
And so if you have a strong suspicion up front, that you will need

2248
02:20:34,800 --> 02:20:38,100
this thing to be performance in a way that requires multiple threads,

2249
02:20:38,400 --> 02:20:41,900
sometimes you may have to start with multiple threads in mind, at

2250
02:20:41,900 --> 02:20:42,400
least.

2251
02:20:42,600 --> 02:20:45,400
And so, even though you might still write it single-threaded first,

2252
02:20:45,400 --> 02:20:47,500
because you probably always want to make sure it runs single fitted

2253
02:20:47,500 --> 02:20:49,000
for us just for testing purposes.

2254
02:20:49,400 --> 02:20:50,500
You may have your eye on

2255
02:20:50,700 --> 02:20:53,900
The fact that you need to multi-thread it and you may be picking the

2256
02:20:53,900 --> 02:20:55,000
algorithm differently.

2257
02:20:55,700 --> 02:20:56,400
Does that make sense?

2258
02:20:56,400 --> 02:20:59,200
So you still also kind of need to have a heads up there sometimes

2259
02:20:59,200 --> 02:20:59,800
because you don't

2260
02:21:00,000 --> 02:21:03,500
Write a big chunk of code with a bunch of assumptions baked into it

2261
02:21:03,500 --> 02:21:06,100
that require single threading and then have a huge headache when you

2262
02:21:06,100 --> 02:21:08,700
want it need to multiply when you need to upgrade to multiple threads.

2263
02:21:08,900 --> 02:21:11,500
So if you know going into it that you're going to be multiple threads,

2264
02:21:11,500 --> 02:21:14,900
that's maybe an argument for not necessarily running it multi-threaded

2265
02:21:14,900 --> 02:21:20,600
but picking the algorithms and picking the structure of the code to

2266
02:21:20,600 --> 02:21:25,000
make that more to facilitate that a little easier.

2267
02:21:26,400 --> 02:21:28,000
Do you still have to do this like you used to?

2268
02:21:28,000 --> 02:21:28,800
Could you show it?

2269
02:21:28,800 --> 02:21:30,700
I'm still on day 110 with the videos?

2270
02:21:30,800 --> 02:21:31,300
Sure.

2271
02:21:34,000 --> 02:21:35,100
Here's The To Do List.

2272
02:21:37,200 --> 02:21:39,200
It basically is the same as the original to-do list, just with some

2273
02:21:39,200 --> 02:21:43,400
things removed that we've done and I guess we added some things too,

2274
02:21:43,400 --> 02:21:43,800
but

2275
02:21:52,600 --> 02:21:55,200
All right, so I'm going to we're out of time here.

2276
02:21:55,200 --> 02:22:01,400
So I'm going to go ahead and and wrap it up, that should be it.

2277
02:22:02,400 --> 02:22:07,800
So yeah, I will go ahead and close it down.

2278
02:22:08,600 --> 02:22:09,600
Let's see here.

2279
02:22:14,000 --> 02:22:15,800
Okay, thank you very much.

2280
02:22:15,800 --> 02:22:17,900
Everyone for joining me for another episode of handmade here.

2281
02:22:17,900 --> 02:22:19,000
It's been a pleasure coding with you.

2282
02:22:19,000 --> 02:22:24,900
As always, if you would like to follow along with the series, you can

2283
02:22:24,900 --> 02:22:28,300
always prove to the source code on handmade here a.org and it comes

2284
02:22:28,300 --> 02:22:33,300
with the source code, which you can use to sort of do experiments or

2285
02:22:33,300 --> 02:22:35,200
practice coding at home, along with the series.

2286
02:22:35,500 --> 02:22:37,000
We also have a forum site, you can go to.

2287
02:22:37,000 --> 02:22:39,800
If you want to ask questions a patreon page, you can use to support

2288
02:22:39,800 --> 02:22:40,500
the video series.

2289
02:22:40,700 --> 02:22:41,400
I'll schedule a bot.

2290
02:22:41,400 --> 02:22:43,700
You can go to, if you would like

2291
02:22:43,900 --> 02:22:48,700
To to me, if you would like to know when the series going to be live

2292
02:22:48,700 --> 02:22:52,500
and then there's a past episode guide which you can use if you want to

2293
02:22:52,500 --> 02:22:57,300
catch up on older episodes and find out what you missed, we will be if

2294
02:22:57,300 --> 02:22:58,500
I refresh it and say it.

2295
02:22:58,500 --> 02:23:02,300
Yep we'll be back again tomorrow.

2296
02:23:02,300 --> 02:23:05,800
Same time, same place eleven, a m-- Pacific Standard Time to do a

2297
02:23:05,800 --> 02:23:06,800
little bit more coding.

2298
02:23:06,900 --> 02:23:09,400
Maybe we'll start 32 tomorrow or maybe we'll play with the camera and

2299
02:23:09,400 --> 02:23:12,900
multiple room size a little bit more but either way we will be back

2300
02:23:12,900 --> 02:23:13,700
here at hopes you

2301
02:23:13,800 --> 02:23:18,000
All there again until then have fun for everyone and I will see you

2302
02:23:18,000 --> 02:23:19,200
folks on the internet.

2303
02:23:19,200 --> 02:23:20,200
Take it easy, everybody.

