1
00:00:00,000 --> 00:00:03,900
Go ahead and flip the recording so we will have a nice clean one for

2
00:00:03,900 --> 00:00:04,800
the YouTubes.

3
00:00:05,900 --> 00:00:10,600
Welcome everybody to handmade hero the live show where we code a

4
00:00:10,600 --> 00:00:14,200
complete professional quality game from scratch, using absolutely

5
00:00:14,200 --> 00:00:14,500
nothing.

6
00:00:14,500 --> 00:00:15,100
No libraries.

7
00:00:15,100 --> 00:00:15,800
No nothing.

8
00:00:16,200 --> 00:00:20,200
So that we can basically see how every little part of a game works and

9
00:00:20,700 --> 00:00:21,700
I've said it multiple times.

10
00:00:21,700 --> 00:00:22,300
I'll say it again.

11
00:00:22,300 --> 00:00:26,500
I think it's absolutely crucial for a good programmers, education to

12
00:00:26,500 --> 00:00:29,400
kind of go in and just see how everything works and really understand

13
00:00:29,400 --> 00:00:29,800
it.

14
00:00:30,200 --> 00:00:33,300
Before you start to do things, like using higher level stuff for using

15
00:00:33,300 --> 00:00:34,600
libraries and stuff like that.

16
00:00:34,800 --> 00:00:37,100
And there's just not a lot of material out there.

17
00:00:37,300 --> 00:00:40,700
The kind of shows how to do every last little thing so that you can

18
00:00:40,700 --> 00:00:45,300
kind of fill in those gaps sort of as you go and become a better game

19
00:00:45,300 --> 00:00:45,800
programmer.

20
00:00:45,800 --> 00:00:48,100
And so, what we're basically trying to do on this stream is build a

21
00:00:48,100 --> 00:00:50,800
game where we build absolutely everything.

22
00:00:51,200 --> 00:00:51,600
And so far.

23
00:00:51,600 --> 00:00:52,600
It's been going pretty well.

24
00:00:52,700 --> 00:00:56,300
We've basically gotten through the win32 interface portion of things.

25
00:00:56,700 --> 00:00:59,400
We're at the point where we're playing sounds and showing bitmap.

26
00:01:00,000 --> 00:01:04,800
Stuff on the screen and abstracting both keyboard and Gamepad input.

27
00:01:04,800 --> 00:01:07,200
So are pretty close to being at the point where we're going to start

28
00:01:07,200 --> 00:01:10,600
actually just working on the game part of the game, which is not too

29
00:01:10,600 --> 00:01:12,800
bad, considering the fact that it has been, I guess.

30
00:01:12,800 --> 00:01:16,700
Let's see 17 hours, which is not a lot of hours.

31
00:01:16,700 --> 00:01:18,200
We only do one hour a day.

32
00:01:18,700 --> 00:01:22,200
So that is not very much to consider how far we have come.

33
00:01:22,200 --> 00:01:24,700
And so I'm pretty happy with our progress and I hope you are too.

34
00:01:24,900 --> 00:01:25,400
Today.

35
00:01:25,400 --> 00:01:29,800
Our primary goal is to sort of finish cleaning up the win32 input.

36
00:01:29,900 --> 00:01:34,000
Stuff just get that nailed down so we can kind of move on and forget

37
00:01:34,000 --> 00:01:37,800
about it and also maybe start to take a look at timing in the game

38
00:01:37,800 --> 00:01:42,000
Loop, which is one more thing that we've kind of got that we've got

39
00:01:42,200 --> 00:01:45,400
sticking around that needs to be cleaned up.

40
00:01:45,400 --> 00:01:47,600
So I'm going to go ahead and jump in here.

41
00:01:48,000 --> 00:01:50,900
Obviously for those of you who have pre-ordered the game you have

42
00:01:50,900 --> 00:01:54,800
access to the full source code if with the link that you got in your

43
00:01:54,800 --> 00:01:58,900
email, if you download that every night it gets updated so you should

44
00:01:58,900 --> 00:01:59,800
have a zip.

45
00:02:00,000 --> 00:02:01,800
You look at what day were on, run 17.

46
00:02:01,800 --> 00:02:04,500
You should have a zip that has all the days Source codes in it.

47
00:02:04,600 --> 00:02:06,500
So you want to unzip day, 16?

48
00:02:07,000 --> 00:02:09,199
Because that is what I'm starting with here on day 17.

49
00:02:09,199 --> 00:02:10,900
We always start with the previous day's source code.

50
00:02:10,900 --> 00:02:14,600
So if you want to follow along at home, unzip that day 16 and you will

51
00:02:14,600 --> 00:02:17,300
be exactly the same place that I am right now.

52
00:02:17,300 --> 00:02:21,000
When I open this up, so where we left off.

53
00:02:21,700 --> 00:02:23,600
Let's just talk about that for a minute.

54
00:02:23,600 --> 00:02:27,900
Basically, what I done is inside wind main, which is our entry point.

55
00:02:28,000 --> 00:02:29,800
I had gone and said, well, I

56
00:02:29,900 --> 00:02:35,100
I want to add keyboard input here and I just kind of quickly did a few

57
00:02:35,100 --> 00:02:37,100
things to get us in position to finish it up today.

58
00:02:37,500 --> 00:02:41,000
Basically, what I did is, I said well inside our wind main, we had a

59
00:02:41,000 --> 00:02:44,000
message Loop where we basically processed our messages from Windows

60
00:02:44,100 --> 00:02:46,100
and I moved that out into its own function here.

61
00:02:46,100 --> 00:02:48,400
It's called win32 process spending messages.

62
00:02:48,700 --> 00:02:52,900
And basically what I do is every time through here, we ask Windows.

63
00:02:52,900 --> 00:02:55,800
If there are any messages to process and as long as there are in our

64
00:02:55,800 --> 00:02:59,400
while loop, we will process those messages now, I didn't want to

65
00:02:59,400 --> 00:02:59,800
actually

66
00:03:00,000 --> 00:03:03,700
Our window Handler, our Windows callback function.

67
00:03:03,700 --> 00:03:04,700
Basically, for our window.

68
00:03:04,700 --> 00:03:08,100
I didn't want to use that to process the keyboard input because I was

69
00:03:08,100 --> 00:03:10,300
pointing out a very important thing about flow control.

70
00:03:10,500 --> 00:03:12,900
Basically, when Windows does its call back.

71
00:03:13,000 --> 00:03:16,500
We have no control over what gets passed to that function are this was

72
00:03:16,500 --> 00:03:18,100
our window callback function here.

73
00:03:18,300 --> 00:03:21,100
Now, we need to have this window callback function because sometimes

74
00:03:21,100 --> 00:03:25,600
Windows calls our window function with stuff directly like the WM

75
00:03:25,600 --> 00:03:29,600
paint a message, will sometimes come in just completely out of the

76
00:03:29,600 --> 00:03:29,800
blue.

77
00:03:30,000 --> 00:03:32,000
Ooh, it won't go through our message processing Loop.

78
00:03:32,000 --> 00:03:35,400
Windows knows because we registered, I don't know if you remember this

79
00:03:35,400 --> 00:03:38,400
way back from like the first or second day, I guess, second day,

80
00:03:38,400 --> 00:03:41,300
probably Windows forced us to register.

81
00:03:41,300 --> 00:03:44,600
A thing called a window class, which talks about the window.

82
00:03:44,800 --> 00:03:45,400
The kind of window.

83
00:03:45,400 --> 00:03:48,900
We're making an in that we gave it a callback and it is actually free

84
00:03:48,900 --> 00:03:51,500
to call that call back anytime it wants to.

85
00:03:51,700 --> 00:03:55,800
So we pretty much have to make sure that we handle some set of Windows

86
00:03:55,800 --> 00:03:58,300
messages in here, that can be dispatched at any time.

87
00:03:58,500 --> 00:03:59,200
However,

88
00:03:59,900 --> 00:04:00,400
Messages.

89
00:04:00,400 --> 00:04:03,400
Do not seem to ever be dispatched out of line like that.

90
00:04:03,400 --> 00:04:08,600
They always go through the actual proper message, loop with our Peak

91
00:04:08,600 --> 00:04:09,300
message, and so on.

92
00:04:09,300 --> 00:04:12,700
So if we want to, we can process the messages right here and just

93
00:04:12,700 --> 00:04:15,100
never bother to have Windows dispatch them.

94
00:04:15,100 --> 00:04:17,899
Because, normally, what would happen when it's not sending out a band

95
00:04:17,899 --> 00:04:20,899
like that is Windows, sends us the message first in this Loop.

96
00:04:20,899 --> 00:04:23,900
It allows us to pull that message off the queue and then it lets us

97
00:04:23,900 --> 00:04:24,300
tell Windows.

98
00:04:24,300 --> 00:04:24,800
Okay.

99
00:04:24,800 --> 00:04:26,900
Now it's time to dispatch it to the windows routine.

100
00:04:26,900 --> 00:04:28,600
Okay, to our window, handling routine.

101
00:04:28,600 --> 00:04:29,700
So let's

102
00:04:29,900 --> 00:04:30,800
Of a little bizarre.

103
00:04:30,900 --> 00:04:32,300
It's like, we pull it off.

104
00:04:32,300 --> 00:04:33,400
We look at it.

105
00:04:33,500 --> 00:04:34,800
We then tell it to dispatch.

106
00:04:35,100 --> 00:04:36,700
That would actually be a nice way to go.

107
00:04:36,700 --> 00:04:39,400
If it weren't for the fact that windows can sometimes just sneak in a

108
00:04:39,400 --> 00:04:40,800
call directly to our window.

109
00:04:41,100 --> 00:04:42,300
So we have to have the window practice.

110
00:04:42,300 --> 00:04:43,100
Nothing we can do about that.

111
00:04:43,100 --> 00:04:45,500
But what we can do is for all the messages that don't get

112
00:04:45,500 --> 00:04:47,100
spontaneously sent like that.

113
00:04:47,200 --> 00:04:50,300
We can choose to process them in here and that's really nice because

114
00:04:50,300 --> 00:04:53,000
what it means is we can actually just have this still be in our

115
00:04:53,000 --> 00:04:56,200
standard control flow, we can control what gets passed to it.

116
00:04:56,400 --> 00:04:57,500
So it's nice and clean.

117
00:04:57,500 --> 00:04:59,800
It could be more functional and of course what I

118
00:05:00,000 --> 00:05:02,500
Bi-functional, we haven't really talked about that on the stream.

119
00:05:02,600 --> 00:05:03,600
Let's something that's worth noting.

120
00:05:03,600 --> 00:05:06,200
So I'll mention it here and I'll mention it again a couple times

121
00:05:06,200 --> 00:05:07,500
because it's something worth understanding.

122
00:05:12,000 --> 00:05:15,200
When you're doing coding, there's kind of two general ways.

123
00:05:15,200 --> 00:05:19,700
You can think about a given function even though there always are

124
00:05:19,700 --> 00:05:21,100
functions and programs.

125
00:05:21,500 --> 00:05:25,000
If I have a function and I will call this functional function.

126
00:05:25,000 --> 00:05:30,000
Let's say this is a functional function and then I have something,

127
00:05:30,000 --> 00:05:32,800
which is a procedural function or whatever.

128
00:05:32,800 --> 00:05:34,500
You want to call it function with side effects.

129
00:05:34,500 --> 00:05:37,000
Let's say function with side effects because side effects are

130
00:05:37,000 --> 00:05:40,000
typically what distinguished something functional from something that

131
00:05:42,100 --> 00:05:46,500
What distinguishes two sets of functions is whether or not into

132
00:05:46,500 --> 00:05:50,000
functional or non-functional, when we use that term basically a

133
00:05:50,000 --> 00:05:56,700
functional function is one, which does not modify anything other than

134
00:05:56,800 --> 00:05:59,300
the stuff that it is past and that it returns.

135
00:05:59,300 --> 00:05:59,800
So basically

136
00:06:00,200 --> 00:06:04,800
It is going to get some some values which are not pointers to things.

137
00:06:04,800 --> 00:06:08,100
They're not references to stuff like graphs that can be crawled or any

138
00:06:08,100 --> 00:06:09,100
of this sort of stuff there.

139
00:06:09,400 --> 00:06:14,200
They are actually getting in values, which themselves are not sort of

140
00:06:14,300 --> 00:06:20,900
writable memory and then it returns something that is the result of

141
00:06:20,900 --> 00:06:21,800
whatever it's going to do.

142
00:06:21,800 --> 00:06:24,800
So, you know, maybe it's going to do this sort of thing.

143
00:06:24,800 --> 00:06:25,300
Right.

144
00:06:25,300 --> 00:06:26,900
And I am going to return that.

145
00:06:27,100 --> 00:06:29,700
Okay, so this is an example of a functional function.

146
00:06:29,700 --> 00:06:29,800
It

147
00:06:30,000 --> 00:06:33,300
It takes two things in two things, which it does not use to go modify

148
00:06:33,300 --> 00:06:34,000
other stuff.

149
00:06:34,100 --> 00:06:36,500
It returns integer never touches any Global variables.

150
00:06:36,600 --> 00:06:40,400
So basically it is entirely, it is functional almost in the

151
00:06:40,400 --> 00:06:43,700
mathematical sense that you would think of a function in math, where

152
00:06:43,700 --> 00:06:47,800
it takes parameters in and outputs a result, but nothing else changes.

153
00:06:47,800 --> 00:06:52,200
The state of the program does not change in any way other than the

154
00:06:52,200 --> 00:06:53,700
fact that this result was computed.

155
00:06:53,700 --> 00:06:54,400
That's it.

156
00:06:55,200 --> 00:06:58,100
Now, when you have something called side effects, in a function, it

157
00:06:58,100 --> 00:06:59,300
ceases to be functional.

158
00:06:59,700 --> 00:06:59,800
And

159
00:07:00,000 --> 00:07:03,700
Basically what that means is, if let's say I did something like this

160
00:07:04,200 --> 00:07:07,500
and then I had something like Foo star Foo.

161
00:07:07,600 --> 00:07:09,500
And here's my Foo, right?

162
00:07:09,500 --> 00:07:10,600
It's got some stuff in it.

163
00:07:10,600 --> 00:07:14,600
Maybe it's got a pointer to a bar and it's got an aunt in it and it's

164
00:07:14,600 --> 00:07:16,400
got a result and all sorts of things.

165
00:07:16,700 --> 00:07:18,400
And in here, I just go.

166
00:07:18,400 --> 00:07:22,500
All right, you know, and maybe I still pass the Y so, you know, I'm

167
00:07:22,500 --> 00:07:26,300
going to go ahead and take the foo Arrow result equals the X Plus Y

168
00:07:26,300 --> 00:07:29,800
and so on, or I might even do something where I look at the bar.

169
00:07:29,900 --> 00:07:34,500
Our and I find out, you know, if the bar Z is equal to 5, I'm going to

170
00:07:34,500 --> 00:07:35,800
do something, right.

171
00:07:35,900 --> 00:07:38,500
This is more typical of C style stuff.

172
00:07:39,100 --> 00:07:42,100
And basically what ends up happening, right, is you can see very

173
00:07:42,100 --> 00:07:46,700
quickly that the understandability of this function becomes much

174
00:07:46,700 --> 00:07:52,100
quicker much more complex when I have, sort of things that fall out of

175
00:07:52,100 --> 00:07:54,500
what that diverge from that functional style.

176
00:07:54,600 --> 00:07:57,700
When I'm not just taking some simple parameters in and having a simple

177
00:07:57,900 --> 00:07:59,800
return, 50 come out I start to

178
00:08:00,000 --> 00:08:04,500
A lot of more complexity into what might happen when you call this

179
00:08:04,500 --> 00:08:05,600
function, right?

180
00:08:05,600 --> 00:08:08,700
Like maybe this function is going to write two Foo result.

181
00:08:08,700 --> 00:08:11,000
Maybe it's only going to write to through result under some

182
00:08:11,000 --> 00:08:11,900
circumstances.

183
00:08:12,200 --> 00:08:13,500
So on and so forth.

184
00:08:13,600 --> 00:08:16,400
And basically what I've produced is something that in order to

185
00:08:16,400 --> 00:08:20,100
understand what happens when you call this function, you have to

186
00:08:20,100 --> 00:08:24,400
actually understand the structure of the data of the program and how

187
00:08:24,400 --> 00:08:26,000
it exists in memory.

188
00:08:26,500 --> 00:08:28,200
You can't just look at it truly and go.

189
00:08:28,200 --> 00:08:29,600
Oh, I see I pass it to

190
00:08:29,900 --> 00:08:31,500
Ames and back comes the result.

191
00:08:31,500 --> 00:08:32,400
That's all that's going to be.

192
00:08:32,400 --> 00:08:35,000
There's nothing's going to change in the state of my program.

193
00:08:35,000 --> 00:08:38,100
The state of my program is effectively immutable to this functional

194
00:08:38,100 --> 00:08:38,600
function.

195
00:08:38,900 --> 00:08:41,100
The program state is identical to when I called it.

196
00:08:41,100 --> 00:08:44,300
The only difference is I got back a result that I can now use to do

197
00:08:44,300 --> 00:08:44,800
something.

198
00:08:45,000 --> 00:08:48,000
Whereas in this one, the state of the, the actual data state of the

199
00:08:48,000 --> 00:08:51,700
program has been mutated by the act of calling the function.

200
00:08:51,700 --> 00:08:52,700
And that's kind of what we mean.

201
00:08:52,700 --> 00:08:54,000
When we say side effects.

202
00:08:54,400 --> 00:08:56,900
It's calling the function changes.

203
00:08:56,900 --> 00:08:59,600
The permanent data store in the program, in a way.

204
00:09:00,100 --> 00:09:03,700
Means that if you called it's a twice in a row or if you inserted a

205
00:09:03,700 --> 00:09:07,200
call to it between two other calls, those calls themselves.

206
00:09:07,200 --> 00:09:11,000
Could also be changed how they operate right to functions with side

207
00:09:11,000 --> 00:09:13,500
effects getting called in opposite.

208
00:09:13,500 --> 00:09:13,800
Orders.

209
00:09:13,800 --> 00:09:17,500
For example, might have a different effect whereas to functional

210
00:09:17,500 --> 00:09:19,100
functions called an opposite orders.

211
00:09:19,100 --> 00:09:21,100
Can't because they don't change anything.

212
00:09:21,200 --> 00:09:24,200
So if I call a function of one function function and another function,

213
00:09:24,200 --> 00:09:27,300
a function, I know that I could swap the order of those calls.

214
00:09:27,300 --> 00:09:29,900
For example, and nothing would change because the only

215
00:09:30,000 --> 00:09:32,500
Only state that they're getting is what's passed in the parameter.

216
00:09:32,500 --> 00:09:35,700
So unless I took the result of one and pass it to the other one.

217
00:09:36,000 --> 00:09:38,800
I know that they have no connection to each other whatsoever.

218
00:09:39,200 --> 00:09:43,100
And so there's just a lot of things that happen when you can boil

219
00:09:43,100 --> 00:09:44,700
something down to a functional function.

220
00:09:45,600 --> 00:09:47,700
And there are programming language that are all about being almost

221
00:09:47,700 --> 00:09:48,600
entirely functional.

222
00:09:48,600 --> 00:09:51,300
For example, like, you know, things like ml.

223
00:09:51,300 --> 00:09:54,200
For example, our programming language is based around this concept.

224
00:09:58,600 --> 00:10:02,300
It's a very limiting way to program, because there are so many

225
00:10:02,300 --> 00:10:03,100
options.

226
00:10:03,100 --> 00:10:06,300
There's so many things, the CPU can do that are off the table.

227
00:10:06,300 --> 00:10:13,100
Now for you, but if you are in a situation where you can make things

228
00:10:13,100 --> 00:10:17,400
more functional without sacrificing something, it is often beneficial

229
00:10:17,400 --> 00:10:22,100
to do so because it makes the understandability of the program and the

230
00:10:22,100 --> 00:10:26,400
reliability program increase in most circumstances because now there

231
00:10:26,400 --> 00:10:28,200
isn't this knowledge of the

232
00:10:28,400 --> 00:10:31,300
Eight of the program that has to be going through the programmers

233
00:10:31,300 --> 00:10:31,600
mind.

234
00:10:31,600 --> 00:10:34,600
When they do things in order to make the program work properly.

235
00:10:34,700 --> 00:10:37,400
They can literally just see a function know that when they call it

236
00:10:37,400 --> 00:10:39,800
does the same thing, no matter where in the program you are.

237
00:10:39,800 --> 00:10:42,000
They don't have to worry about setting something up, shutting

238
00:10:42,000 --> 00:10:44,200
something down, all these sorts of things.

239
00:10:45,000 --> 00:10:51,400
And so what I typically try to do when I am programming is I do try to

240
00:10:51,500 --> 00:10:57,500
push towards functional when it is not prohibitive to do so, so what

241
00:10:57,500 --> 00:10:58,200
does that mean?

242
00:10:58,300 --> 00:11:02,500
It means passing things as parameters, rather than using Global state.

243
00:11:02,500 --> 00:11:05,900
It means passing things by value rather than by reference, if possible

244
00:11:06,200 --> 00:11:08,600
and making them so that they're not going to be changed by the

245
00:11:08,600 --> 00:11:09,100
function.

246
00:11:09,500 --> 00:11:13,000
It means limiting the access of functions to only the things that they

247
00:11:13,000 --> 00:11:13,500
need.

248
00:11:13,500 --> 00:11:16,400
Absolutely need to use so that they're easier to understand.

249
00:11:16,400 --> 00:11:20,400
And I never, really, ever get to a point where my code is super

250
00:11:20,400 --> 00:11:21,200
functional.

251
00:11:21,300 --> 00:11:22,400
That never really happens.

252
00:11:22,400 --> 00:11:23,800
It's not the nature of the kind of code.

253
00:11:23,800 --> 00:11:26,400
I tend to write, but I do try to make.

254
00:11:26,600 --> 00:11:28,300
I do try to follow those steps.

255
00:11:28,400 --> 00:11:32,400
To sort of increase the function honest of the program because every

256
00:11:32,400 --> 00:11:36,900
little bit you do is a bug down the line, a readability plus down the

257
00:11:36,900 --> 00:11:39,300
line that didn't happen, whatever, you know, that sort of thing a

258
00:11:39,300 --> 00:11:41,200
complexity down the line that you'd have to deal with.

259
00:11:41,600 --> 00:11:46,300
And so what I did like to do here is basically there's a more complex

260
00:11:46,300 --> 00:11:48,000
program flow thing that would happen.

261
00:11:48,200 --> 00:11:53,400
The way that we used to do things in our old win32 window Handler.

262
00:11:55,300 --> 00:11:58,200
Sorry finding trouble finding it there in our win32 me.

263
00:11:58,300 --> 00:11:59,800
Nguyen, do call back if this

264
00:12:00,000 --> 00:12:02,500
Processing the keyboard messages here.

265
00:12:02,700 --> 00:12:03,200
Right?

266
00:12:03,300 --> 00:12:05,800
If this were passing the, If This Were pressed processing those

267
00:12:05,800 --> 00:12:09,600
keyboard messages, it would have to have a place to put them, right?

268
00:12:09,600 --> 00:12:13,500
It needs to store the result of those keyboard operations.

269
00:12:13,800 --> 00:12:15,000
And in order to do that.

270
00:12:15,000 --> 00:12:17,100
That means, it would have to have access to the input structure.

271
00:12:17,100 --> 00:12:19,700
But as you can see, I can't pass that in here.

272
00:12:19,900 --> 00:12:23,100
I can't give it the thing that's supposed to be operating on because

273
00:12:23,100 --> 00:12:26,600
Windows has defined the function prototype for this call, and there's

274
00:12:26,600 --> 00:12:29,400
nothing I can do to insert myself in here.

275
00:12:29,500 --> 00:12:29,900
So, in

276
00:12:30,000 --> 00:12:33,000
In order to get in order to basically do the plumbing necessary to get

277
00:12:33,000 --> 00:12:37,500
the keyboard, basically, the place where the keyboard result should be

278
00:12:37,500 --> 00:12:41,600
written, into this function would require a global variable using the

279
00:12:41,600 --> 00:12:43,500
local storage in the window itself.

280
00:12:43,500 --> 00:12:45,000
Using Windows to get inside of property.

281
00:12:45,000 --> 00:12:48,400
For example, I would have to use something that is very much not

282
00:12:48,400 --> 00:12:52,600
functional at all because it would basically be something where the,

283
00:12:53,000 --> 00:12:56,200
where the state was completely implicit and you just had to know.

284
00:12:56,300 --> 00:12:59,600
Oh, hey, by the way, the main window callback just magically knows

285
00:12:59,600 --> 00:12:59,900
what

286
00:13:00,000 --> 00:13:02,400
The right to and it got it from this Global variable and hey, don't

287
00:13:02,400 --> 00:13:02,900
worry about it.

288
00:13:02,900 --> 00:13:03,100
Right?

289
00:13:03,100 --> 00:13:07,000
And I don't like having things like that so I can do much better by

290
00:13:07,000 --> 00:13:10,800
pulling it out into a function that's under my control.

291
00:13:11,100 --> 00:13:13,500
Because while again, it's not going to be functional at all because

292
00:13:13,500 --> 00:13:15,800
it's using a message queue and pulling messages off accused.

293
00:13:15,800 --> 00:13:19,200
So there's nothing functional about this function for the most part,

294
00:13:19,800 --> 00:13:25,400
but I can make it into more of a stable, functional flow control where

295
00:13:25,400 --> 00:13:29,800
I'm still passing the output Place directly in and it's

296
00:13:29,900 --> 00:13:33,100
Anibal very clearly understandable in that functional way.

297
00:13:33,500 --> 00:13:36,300
It's much more easy to understand for the program or what's happening

298
00:13:36,500 --> 00:13:37,100
by saying.

299
00:13:37,100 --> 00:13:38,600
When I do went through, due process messages.

300
00:13:38,600 --> 00:13:41,500
I just pass it directly where I want the stuff to go, and that allows

301
00:13:41,500 --> 00:13:42,900
me to use this function anywhere.

302
00:13:42,900 --> 00:13:47,400
I want to, to basically say, here's where I want you to put the stuff

303
00:13:47,400 --> 00:13:49,900
and anyone else could use that to put stuff in a different place if

304
00:13:49,900 --> 00:13:50,500
they wanted to.

305
00:13:50,500 --> 00:13:51,500
And anyone who calls?

306
00:13:51,500 --> 00:13:53,500
It knows exactly where the results are going.

307
00:13:53,700 --> 00:13:55,600
They're not in this state where they're like, I don't know.

308
00:13:55,600 --> 00:13:58,600
I said I had to set a global variable first and then it figured it out

309
00:13:58,600 --> 00:13:59,200
and so on.

310
00:14:00,100 --> 00:14:04,300
So, something to think about something to think about.

311
00:14:08,000 --> 00:14:09,000
People were saying on this.

312
00:14:09,000 --> 00:14:10,000
I just glanced at the chat.

313
00:14:10,000 --> 00:14:11,500
Just then they're saying I was a little too loud.

314
00:14:11,900 --> 00:14:14,200
We could easily turn the oh, you know what?

315
00:14:14,200 --> 00:14:16,400
I think this was not this was oh wait.

316
00:14:16,400 --> 00:14:17,500
No, that's the microphone.

317
00:14:17,900 --> 00:14:20,600
I think we could set the microphone down a bit though.

318
00:14:21,000 --> 00:14:21,600
I'll do a quick.

319
00:14:21,600 --> 00:14:22,200
Mike check.

320
00:14:22,300 --> 00:14:23,400
Is that is that better?

321
00:14:23,400 --> 00:14:24,500
Is that less clippy?

322
00:14:24,500 --> 00:14:25,200
When I'm talking?

323
00:14:25,400 --> 00:14:26,400
What do you guys think about that?

324
00:14:26,400 --> 00:14:29,400
I'm gonna I'm gonna this is an example of me talking as loud as I

325
00:14:29,400 --> 00:14:29,900
talk.

326
00:14:30,200 --> 00:14:32,400
So there you can tell me in this dream and I glanced back at it to see

327
00:14:32,400 --> 00:14:34,600
if maybe that's a little bit better, if that's less clippy for people

328
00:14:34,600 --> 00:14:34,900
on stream.

329
00:14:34,900 --> 00:14:36,600
Let me know if that's better, if it's harder to hear me.

330
00:14:37,600 --> 00:14:38,000
All right.

331
00:14:38,000 --> 00:14:38,500
There we go.

332
00:14:39,600 --> 00:14:40,000
All right.

333
00:14:40,000 --> 00:14:41,800
So now that you understand why I did that.

334
00:14:42,000 --> 00:14:45,000
What I do need to do now is actually finish the actual keyboard

335
00:14:45,000 --> 00:14:47,600
processing because we didn't actually do hardly any of it.

336
00:14:47,600 --> 00:14:52,200
We didn't actually do the work of getting things into a good state for

337
00:14:52,200 --> 00:14:53,100
using the keyboard.

338
00:14:53,300 --> 00:14:57,000
So the first thing I want to do is I want to kind of look through here

339
00:14:57,000 --> 00:14:59,800
and kind of clean up the way that we're thinking about input.

340
00:15:00,000 --> 00:15:03,600
Because it wasn't set up particularly well in the first place.

341
00:15:03,600 --> 00:15:07,100
So, the first thing I want to do is I want to say, all right, let's

342
00:15:07,100 --> 00:15:11,500
just let's just for now because like we said, when we get down the

343
00:15:11,500 --> 00:15:13,300
line later in the game is more complete.

344
00:15:13,300 --> 00:15:16,500
We will kind of revisit how we're doing input and how we map things

345
00:15:16,500 --> 00:15:17,900
and all sorts of stuff like that.

346
00:15:18,000 --> 00:15:21,100
But for now, what I'd like to do is say, let's give the game.

347
00:15:21,100 --> 00:15:25,700
Basically, let's have the keyboard come in as One controller.

348
00:15:25,800 --> 00:15:27,200
Like it's like a Gamepad, right?

349
00:15:27,200 --> 00:15:29,600
The keyboard comes in as a certain controller its controller 0, let's

350
00:15:29,600 --> 00:15:29,800
say,

351
00:15:30,000 --> 00:15:32,300
Say, and then the first game pad is controller, 1.

352
00:15:32,300 --> 00:15:35,300
In the second game pad is controller to let's make it look like that.

353
00:15:35,400 --> 00:15:38,400
I think that'll be a sane way to do it to start and then later we'll

354
00:15:38,400 --> 00:15:40,700
kind of get into things maybe where we want to do something a little

355
00:15:40,700 --> 00:15:41,800
more complicated than that.

356
00:15:42,100 --> 00:15:46,200
As we see what our game actually wants, but I'm going to go in here

357
00:15:46,300 --> 00:15:49,400
and basically say, oh and the other thing I should probably do is put

358
00:15:49,400 --> 00:15:52,000
this it goes to make sure you don't put anything down in the corner.

359
00:15:52,000 --> 00:15:53,300
I always forget to put my little blocker up.

360
00:15:53,300 --> 00:15:55,100
So I remember not to put any code in the corner.

361
00:15:55,400 --> 00:15:59,400
So let's go in here and just take a look at how we're storing things.

362
00:16:00,000 --> 00:16:02,800
Finally, we've got four controllers mapped in here.

363
00:16:02,800 --> 00:16:04,600
But what I'd rather do is up at 25.

364
00:16:04,600 --> 00:16:07,600
So well for gamepads, and the keyboard is basically how we'll do it.

365
00:16:07,900 --> 00:16:10,500
And so the keyboard controller will be controller 0.

366
00:16:10,800 --> 00:16:13,500
But then we kind of go in here and use these controllers.

367
00:16:13,900 --> 00:16:14,500
Instead.

368
00:16:14,500 --> 00:16:16,300
We're going to actually say, all right.

369
00:16:16,300 --> 00:16:17,600
Let's make this be controller.

370
00:16:18,100 --> 00:16:19,500
This is X input.

371
00:16:19,900 --> 00:16:20,300
I'm sorry.

372
00:16:21,100 --> 00:16:24,900
Basically, our controller index is mapped differently.

373
00:16:25,100 --> 00:16:27,000
So we'll say our controller Index.

374
00:16:27,000 --> 00:16:29,600
Right is going to be the controller index.

375
00:16:30,000 --> 00:16:33,800
Plus one because we're basically leaving space for that keyboard

376
00:16:33,800 --> 00:16:34,200
controller.

377
00:16:34,200 --> 00:16:36,300
So now there are actually five controllers in here.

378
00:16:36,800 --> 00:16:38,200
Not not for.

379
00:16:38,400 --> 00:16:43,100
So when we go in here, we will basically have to modify our check, for

380
00:16:43,100 --> 00:16:46,100
how many controllers we actually think is the maximum.

381
00:16:46,200 --> 00:16:48,400
So basically, what we need to do is we need to say one for the

382
00:16:48,400 --> 00:16:48,900
keyboard.

383
00:16:48,900 --> 00:16:51,500
Plus the excuse me Max count and then we'll just double check if

384
00:16:51,500 --> 00:16:53,500
that's all fits and then off we go.

385
00:16:53,500 --> 00:16:56,600
So that's actually what I wanted to to dupes developments.

386
00:16:56,600 --> 00:16:59,200
Good spelling off to a good start with our spelling today.

387
00:17:00,000 --> 00:17:00,600
Even spell.

388
00:17:01,100 --> 00:17:01,900
So that's good.

389
00:17:02,300 --> 00:17:05,200
Oh, and this is something that I think I forgot to do yesterday.

390
00:17:05,500 --> 00:17:08,700
You'll notice we have a a link warning here.

391
00:17:09,000 --> 00:17:12,599
So basically, I showed yesterday and I think some people missed it

392
00:17:12,599 --> 00:17:14,800
because the stream dropped out and so if you didn't watch the Youtube,

393
00:17:14,800 --> 00:17:15,500
you missed it.

394
00:17:15,800 --> 00:17:19,900
I showed basically here how to on the 32-bit build, how to get it

395
00:17:19,900 --> 00:17:25,700
working on Windows XP, but you can't actually use Windows XP builds if

396
00:17:25,700 --> 00:17:26,800
you are doing.

397
00:17:28,500 --> 00:17:31,800
64 bit because 64-bit builds with the 64-bit compiler.

398
00:17:31,800 --> 00:17:35,100
Don't run on the Windows 51 XP thing as far as I know.

399
00:17:35,700 --> 00:17:39,200
So basically what you want to do is we actually want to have sort of a

400
00:17:39,200 --> 00:17:42,300
32-bit build line, and a 64-bit build line.

401
00:17:42,600 --> 00:17:44,900
And in the future, what we're going to want to do is actually build

402
00:17:44,900 --> 00:17:48,100
both potentially, but like I said, I couldn't do that yesterday

403
00:17:48,100 --> 00:17:51,900
because I have to go do a bunch of stuff getting extracting stuff from

404
00:17:51,900 --> 00:17:54,000
VCRs to call the right compiler directly.

405
00:17:54,000 --> 00:17:56,600
Since you can't use the same compiler to build both in all these other

406
00:17:56,600 --> 00:17:58,000
sorts of things, but

407
00:17:58,100 --> 00:17:59,800
but basically, what we want to do is say

408
00:18:00,000 --> 00:18:01,700
There's going to be to build types, right?

409
00:18:01,700 --> 00:18:02,700
There's going to be one.

410
00:18:03,200 --> 00:18:06,500
That's for when 64 and one that's her win32 so we could do them like

411
00:18:06,500 --> 00:18:06,900
that.

412
00:18:06,900 --> 00:18:09,800
But what I'd like to do is most of the stuff is shared between the two

413
00:18:09,800 --> 00:18:10,200
of them.

414
00:18:10,600 --> 00:18:13,900
So what I'd like to do is I'd like to just take a second and say let's

415
00:18:13,900 --> 00:18:15,100
set a variable here.

416
00:18:15,500 --> 00:18:18,700
That's basically like for now, we'll call it common flags and will

417
00:18:18,700 --> 00:18:22,100
kind of do we'll do some more work with this in the future.

418
00:18:22,100 --> 00:18:25,300
But let's just say, you know, okay, we basically want all of this

419
00:18:25,300 --> 00:18:29,400
stuff for now to be in our common flags, all of this stuff kind of

420
00:18:29,400 --> 00:18:29,900
comes in

421
00:18:30,000 --> 00:18:30,500
Here, right.

422
00:18:30,500 --> 00:18:34,300
That's our common, common compiler Flags.

423
00:18:34,300 --> 00:18:35,000
Let's say.

424
00:18:35,600 --> 00:18:39,500
And then we'll do common Linker flags that are just the things that we

425
00:18:39,500 --> 00:18:44,100
actually wanted to pass to the two different parts.

426
00:18:44,200 --> 00:18:45,200
So what's your grab that?

427
00:18:45,200 --> 00:18:51,200
They're put that up there and say okay that's common Linker flags.

428
00:18:51,500 --> 00:18:56,100
And basically all I'm going to do is say alright, so this subsystem

429
00:18:56,100 --> 00:18:59,100
piece will take that out of the common and we'll stick it in only the

430
00:18:59,100 --> 00:18:59,900
32-bit version.

431
00:19:00,000 --> 00:19:01,100
Then, right?

432
00:19:01,600 --> 00:19:05,300
And then this one here will just be basically the same as that only it

433
00:19:05,300 --> 00:19:06,900
won't have that one piece.

434
00:19:06,900 --> 00:19:09,400
And so then that'll let us do either of them.

435
00:19:09,400 --> 00:19:10,800
I believe.

436
00:19:11,000 --> 00:19:12,600
Oops, it's not right.

437
00:19:12,700 --> 00:19:16,300
I'm missing that is that right?

438
00:19:16,400 --> 00:19:16,900
There we go.

439
00:19:17,400 --> 00:19:20,600
So basically all I did here just made two lines, one for the 32-bit

440
00:19:20,600 --> 00:19:20,900
build.

441
00:19:20,900 --> 00:19:23,900
So basically we've got the 32-bit build here.

442
00:19:24,300 --> 00:19:27,500
And basically, we've got the 64-bit build here and they're going to be

443
00:19:27,500 --> 00:19:29,100
exactly the same except for those things.

444
00:19:29,100 --> 00:19:29,800
We might change.

445
00:19:29,900 --> 00:19:33,100
The things and the future will make another variable here for release

446
00:19:33,100 --> 00:19:33,900
flags as well.

447
00:19:33,900 --> 00:19:36,100
So when we want to turn optimizations, we can do that.

448
00:19:36,400 --> 00:19:38,000
But let's just do that and get that out of the way.

449
00:19:38,200 --> 00:19:38,800
All right.

450
00:19:38,800 --> 00:19:41,800
So now we've got our our controller as well.

451
00:19:41,800 --> 00:19:44,100
I'm going to go ahead and make sure that we didn't mess anything up

452
00:19:44,100 --> 00:19:47,400
there because I kind of was talking about a ton of things there and

453
00:19:47,400 --> 00:19:49,000
hard for me to pay close attention to what's going on.

454
00:19:49,000 --> 00:19:51,200
So I like to run the game periodically to make sure I didn't do

455
00:19:51,200 --> 00:19:51,600
anything.

456
00:19:51,600 --> 00:19:52,400
Horribly bad.

457
00:19:54,100 --> 00:19:54,800
Alright.

458
00:19:54,800 --> 00:19:57,400
So now that we have this, we need to actually process our keyboard

459
00:19:57,400 --> 00:19:59,800
controller for real and so we need to do

460
00:20:00,200 --> 00:20:04,100
Is when we actually take the new state of the keyboard controller.

461
00:20:04,300 --> 00:20:08,300
What we probably want to do is say that it should actually, if we look

462
00:20:08,300 --> 00:20:12,300
here, the way that I've got it, we basically want to preserve some of

463
00:20:12,300 --> 00:20:13,100
the state.

464
00:20:13,400 --> 00:20:13,900
We've got.

465
00:20:13,900 --> 00:20:18,400
The the ended down thing and we have to make sure that the ended down

466
00:20:19,600 --> 00:20:22,800
we have to make sure that if we don't receive any keyboard messages,

467
00:20:22,800 --> 00:20:24,600
this Frame, we are still accurately.

468
00:20:24,600 --> 00:20:27,300
Representing the state of the keyboard, which is not something we're

469
00:20:27,300 --> 00:20:29,300
actually doing at the moment.

470
00:20:29,300 --> 00:20:29,800
We always

471
00:20:29,900 --> 00:20:31,300
Zero out the state of the controller.

472
00:20:31,300 --> 00:20:35,200
So if a key goes down will receive a message will set ended down to be

473
00:20:35,200 --> 00:20:36,800
correct that we implement it.

474
00:20:36,800 --> 00:20:41,700
But we did in to do is actually make sure that it would then persist

475
00:20:41,700 --> 00:20:42,500
to the next frame.

476
00:20:42,500 --> 00:20:44,700
So it would still appear to be down.

477
00:20:44,700 --> 00:20:48,000
And and so that's what we have to actually handle now.

478
00:20:48,000 --> 00:20:51,800
So, what we want to do probably here is basically we only really want

479
00:20:51,800 --> 00:20:53,600
to reset the half transition count.

480
00:20:53,600 --> 00:20:56,500
We want to leave ended down basically the same.

481
00:20:56,500 --> 00:20:59,700
So what we can do, we can do that two different ways, I guess.

482
00:21:00,000 --> 00:21:05,000
Do is I'll clear the keyboard out for now and I will just Loop over

483
00:21:05,000 --> 00:21:06,200
these buttons real quick here.

484
00:21:06,200 --> 00:21:09,000
Basically say that the button index for the keyboard.

485
00:21:09,000 --> 00:21:13,400
You know, I'm going to go over the array count of keyboard controller

486
00:21:13,400 --> 00:21:14,100
buttons.

487
00:21:14,100 --> 00:21:15,800
And from there.

488
00:21:15,800 --> 00:21:19,800
I will basically take each one of those things and I will, I will

489
00:21:19,800 --> 00:21:20,600
basically map.

490
00:21:20,600 --> 00:21:23,800
I will map sort of the old one to the new one.

491
00:21:23,800 --> 00:21:27,600
So, we've got the old input and I've got old keyboard controller, new,

492
00:21:27,600 --> 00:21:28,500
keyboard controller.

493
00:21:28,500 --> 00:21:30,000
And basically, what I'll do,

494
00:21:30,000 --> 00:21:33,100
Do is I'll 0 the new one and you can see what I did here was just make

495
00:21:33,100 --> 00:21:35,000
a blank one and assign it to do a clear.

496
00:21:35,300 --> 00:21:38,100
And you see I did a zeroing macro to do which maybe we'll do today

497
00:21:38,100 --> 00:21:40,000
during the cleanup if we've got time.

498
00:21:40,500 --> 00:21:40,800
Basically.

499
00:21:40,800 --> 00:21:41,900
I'm going to come in through here.

500
00:21:42,400 --> 00:21:46,100
I'm going to take the old keyboard controller and I am going to grab

501
00:21:46,100 --> 00:21:47,800
its buttons here.

502
00:21:48,200 --> 00:21:49,500
So I'm going to get its buttons.

503
00:21:49,700 --> 00:21:55,300
Pull out the button in question and I am going to make its ended down

504
00:21:55,900 --> 00:21:59,500
equal to so I'm going to make the new one I should say.

505
00:22:00,100 --> 00:22:01,500
Equal to the old one.

506
00:22:01,500 --> 00:22:04,900
So this basically just copies whether or not the key was down to the

507
00:22:04,900 --> 00:22:05,400
new one.

508
00:22:06,000 --> 00:22:08,700
So that way we know that when we come in here, our new keyboard

509
00:22:08,700 --> 00:22:11,300
controller has the same ended down state, but we now know that the

510
00:22:11,300 --> 00:22:14,000
half transition count is clear, which is what we want, because we're

511
00:22:14,000 --> 00:22:16,100
supposed to count half transitions per frame.

512
00:22:16,600 --> 00:22:21,000
So when I come up here into the processing Loop, and I look at what

513
00:22:21,000 --> 00:22:21,500
I'm calling.

514
00:22:21,500 --> 00:22:24,000
I'm calling the win32 process keyboard message.

515
00:22:24,200 --> 00:22:28,400
Basically, what happens is, I anytime I get the message I change, I

516
00:22:28,400 --> 00:22:29,800
increment that half transition count.

517
00:22:29,900 --> 00:22:32,400
And then I reset the end of down to the correct thing.

518
00:22:32,500 --> 00:22:33,500
So this basic just count.

519
00:22:33,500 --> 00:22:34,900
How many time we changed it?

520
00:22:35,100 --> 00:22:39,900
I can also assert here that basically, the new state ended down is not

521
00:22:39,900 --> 00:22:43,400
equal to the new is down type, because remember, we're only supposed

522
00:22:43,400 --> 00:22:46,200
to be getting this keyboard message, if the state changed because we

523
00:22:46,200 --> 00:22:47,500
very explicitly check for it.

524
00:22:47,500 --> 00:22:48,200
Right here.

525
00:22:48,800 --> 00:22:51,600
We basically say, we're not going to process the keyboard event.

526
00:22:51,600 --> 00:22:54,100
If it was just saying that a key was down, it was already down.

527
00:22:54,100 --> 00:22:55,300
So that's key, repeat message.

528
00:22:55,400 --> 00:22:58,000
And we don't want to be a slave to Windows key, repeat settings, or do

529
00:22:58,000 --> 00:22:58,700
any stuff like that.

530
00:22:58,700 --> 00:22:59,800
We want to take that out of the equation.

531
00:23:00,000 --> 00:23:00,500
By early.

532
00:23:00,900 --> 00:23:03,100
So basically, we just want to assert that we didn't do something

533
00:23:03,100 --> 00:23:05,600
stupid because oftentimes in programming, you will do something stupid

534
00:23:05,600 --> 00:23:08,200
because you forget what's going on or you make a change and don't

535
00:23:08,200 --> 00:23:09,400
realize what's happening.

536
00:23:09,700 --> 00:23:13,200
So, we want to assert here, just say, hey, look, we want to make sure

537
00:23:13,200 --> 00:23:14,600
that when we get an is down message.

538
00:23:14,600 --> 00:23:16,100
It's actually a difference.

539
00:23:16,100 --> 00:23:19,000
It's either, if it's true that it's down, then it's the key should

540
00:23:19,000 --> 00:23:21,800
already be marked as down because our half transition count would be

541
00:23:21,800 --> 00:23:23,000
wrong at that point.

542
00:23:23,400 --> 00:23:25,300
And we also want to check the opposite.

543
00:23:25,300 --> 00:23:27,400
If the key is saying that it's going up, we want to make sure that it

544
00:23:27,400 --> 00:23:28,200
wasn't already up.

545
00:23:28,700 --> 00:23:29,800
So now when I do that,

546
00:23:29,900 --> 00:23:39,800
At, and fix the, the bugs here, typo typos, and there we go.

547
00:23:40,200 --> 00:23:43,300
Basically, all I need to do is verify that that worked at all.

548
00:23:43,500 --> 00:23:45,100
We'll go in here and there you go.

549
00:23:45,100 --> 00:23:47,500
So that's me pressing the button just like I would have on the

550
00:23:47,500 --> 00:23:49,500
controller and hey, it works perfectly.

551
00:23:49,900 --> 00:23:50,200
Now.

552
00:23:50,200 --> 00:23:53,700
We need to process the directional stick, and that brings up something

553
00:23:53,700 --> 00:23:55,700
that I've been wanting to do for a while, which is we actually need to

554
00:23:55,700 --> 00:23:58,300
kind of finish all of our directional stick stuff because our Gamepad

555
00:23:58,300 --> 00:23:59,800
directional stick stuff still had it.

556
00:24:00,000 --> 00:24:06,200
Any as well, which is basically that we had a we basically had a dead

557
00:24:06,200 --> 00:24:09,100
zone processing to do where we didn't, press the dead zone because we

558
00:24:09,100 --> 00:24:11,400
didn't really talk much about what the dead zone was.

559
00:24:11,400 --> 00:24:14,100
Now the dead zone is basically it.

560
00:24:14,100 --> 00:24:16,300
No, not, it is not a game about zombies.

561
00:24:17,100 --> 00:24:18,900
Although, with the way the game industry is going these days.

562
00:24:18,900 --> 00:24:21,800
It will probably soon be a game about zombies.

563
00:24:21,800 --> 00:24:24,500
Somebody out there right now is maybe taking the handmade hero

564
00:24:25,100 --> 00:24:27,700
platform layer and is turning it into a game about zombies called Dead

565
00:24:27,700 --> 00:24:28,100
Zone.

566
00:24:28,300 --> 00:24:29,400
And that is always

567
00:24:30,000 --> 00:24:30,500
Possibility.

568
00:24:30,500 --> 00:24:35,200
But basically, what what I wanted to talk about is The Dead Zone on a

569
00:24:35,200 --> 00:24:38,600
controller and you can see here is my pink controller.

570
00:24:38,600 --> 00:24:43,400
Basically, what happens is the sticks you have to imagine inside.

571
00:24:43,400 --> 00:24:44,700
In fact, this is translucent.

572
00:24:44,700 --> 00:24:45,900
You probably can't see it.

573
00:24:45,900 --> 00:24:49,500
But inside there's a, you know, that stick basically connects to a

574
00:24:49,500 --> 00:24:51,100
circuit board and it's got some Electronics in it.

575
00:24:51,100 --> 00:24:53,700
I think they're usually potentiometers.

576
00:24:53,700 --> 00:24:54,300
I don't even know.

577
00:24:54,300 --> 00:24:55,100
I'm not a hardware guy.

578
00:24:55,100 --> 00:24:58,300
So to be honest with you, I have no idea what actually goes on in

579
00:24:58,300 --> 00:24:58,500
there.

580
00:24:58,500 --> 00:25:00,000
But what I can tell you is that

581
00:25:00,000 --> 00:25:01,900
The accuracy on these things is awful.

582
00:25:02,300 --> 00:25:05,800
So basically, even though this is back at zero, like we would all

583
00:25:05,800 --> 00:25:09,000
think of that, as not, the stick is not doing anything right now.

584
00:25:09,800 --> 00:25:13,700
That is actually not what the electrical reading is on the stick.

585
00:25:13,900 --> 00:25:17,400
The stick right now, actually thinks it's somewhere entirely else and

586
00:25:17,400 --> 00:25:21,500
basically, we can even demonstrate that by basically going like, okay.

587
00:25:21,800 --> 00:25:23,500
Let's go in here and set a break point.

588
00:25:23,500 --> 00:25:24,300
For example.

589
00:25:25,900 --> 00:25:26,400
Somewhere.

590
00:25:26,400 --> 00:25:27,800
Oops, that's that's not good.

591
00:25:28,700 --> 00:25:29,700
What's going on here?

592
00:25:29,700 --> 00:25:31,600
I didn't mean to actually modify my code.

593
00:25:32,000 --> 00:25:32,200
Yeah.

594
00:25:32,200 --> 00:25:36,100
So basically, I've got the, the stick, the stick is back at its

595
00:25:36,100 --> 00:25:36,900
neutral position.

596
00:25:37,200 --> 00:25:39,900
I'm going to go in here to our code and I'll just take a look at what

597
00:25:39,900 --> 00:25:41,700
happens when we pull it, right?

598
00:25:41,700 --> 00:25:42,600
So I'm going to pull it.

599
00:25:42,600 --> 00:25:43,100
Here we go.

600
00:25:43,100 --> 00:25:44,300
Let's get down in here.

601
00:25:45,100 --> 00:25:49,100
So basically, we pull this thing and what did we actually get back for

602
00:25:49,100 --> 00:25:50,000
our X and Y?

603
00:25:50,200 --> 00:25:52,600
You can see that they are definitely not zero, right?

604
00:25:52,600 --> 00:25:54,000
There's no, he's in there.

605
00:25:54,500 --> 00:25:55,000
And so the

606
00:25:55,700 --> 00:26:01,500
Of the stick when it is quote, unquote centered is actually not zero

607
00:26:01,500 --> 00:26:04,100
and that's not actually a bug.

608
00:26:04,300 --> 00:26:08,500
That's just how that's the tolerances for which these controllers are

609
00:26:08,500 --> 00:26:09,700
designed to operate.

610
00:26:09,700 --> 00:26:12,100
Like they aren't designed to give back an exact zero.

611
00:26:12,100 --> 00:26:13,000
When the thing is centered.

612
00:26:13,000 --> 00:26:16,400
They're designed to be somewhere around zero and the thing is

613
00:26:16,400 --> 00:26:17,000
centered.

614
00:26:19,200 --> 00:26:21,700
So in order to correct for the fact that the player thinks the stick a

615
00:26:21,700 --> 00:26:23,500
center, but the stick is not centered.

616
00:26:23,800 --> 00:26:27,400
But we need to do is apply a dead zone, which is a region around zero

617
00:26:27,400 --> 00:26:30,100
where we will effectively consider it zero.

618
00:26:30,100 --> 00:26:35,100
We are basically widening, our opinion of zero, and you can see that X

619
00:26:35,100 --> 00:26:39,000
input basically defines these values that they want you to use in

620
00:26:39,000 --> 00:26:40,300
order to be compliant.

621
00:26:40,900 --> 00:26:44,400
And, you know, so we will use them basically what they are.

622
00:26:44,800 --> 00:26:47,300
If I can get the msdn documentation with them here.

623
00:26:47,300 --> 00:26:48,500
Let's see.

624
00:26:49,000 --> 00:26:50,400
Whoa, come on.

625
00:26:51,200 --> 00:26:51,700
There we go.

626
00:26:51,700 --> 00:26:52,400
Internet.

627
00:26:52,500 --> 00:26:53,900
Go Go internet.

628
00:26:54,500 --> 00:26:57,700
Basically what happens if I can scroll down to.

629
00:26:57,700 --> 00:26:58,300
There we go.

630
00:26:58,500 --> 00:26:59,500
The Dead Zone here.

631
00:27:00,000 --> 00:27:04,400
So, basically, what we want to do is we want to use that dead zone,

632
00:27:04,400 --> 00:27:06,400
this input Dead Zone thing, which they have.

633
00:27:06,400 --> 00:27:07,500
They have actually defined it.

634
00:27:07,500 --> 00:27:07,900
Again.

635
00:27:07,900 --> 00:27:10,600
I don't know why they actually it was there to find begin with.

636
00:27:10,600 --> 00:27:14,200
I don't know why they did that point being here are the dead zone

637
00:27:14,200 --> 00:27:15,400
values, right?

638
00:27:15,400 --> 00:27:18,600
Basically what these dead zones are saying, is that any value for the

639
00:27:18,600 --> 00:27:19,600
left thumbstick?

640
00:27:19,700 --> 00:27:21,800
That's left, less than seventy eight Forty.

641
00:27:21,800 --> 00:27:22,800
Nine short.

642
00:27:22,800 --> 00:27:24,100
That's a 16-bit value.

643
00:27:24,600 --> 00:27:24,900
Right?

644
00:27:24,900 --> 00:27:29,100
So you can kind of imagine what percentage that actually is.

645
00:27:29,600 --> 00:27:29,900
If

646
00:27:30,000 --> 00:27:31,200
We want to do the calculation.

647
00:27:31,200 --> 00:27:32,900
So oops, help.

648
00:27:33,500 --> 00:27:40,300
So basically if you imagine 32768 is the maximum sign short value -

649
00:27:40,600 --> 00:27:41,500
that it would be.

650
00:27:41,600 --> 00:27:45,900
And so, if we, if we actually look at what percentage that is 32 768,

651
00:27:46,000 --> 00:27:50,500
if we say 78 49, ÷ 32768 like that.

652
00:27:50,800 --> 00:27:54,100
You can see that that's well, you know, if you look at that number,

653
00:27:54,900 --> 00:27:56,300
it's surprisingly large.

654
00:27:56,300 --> 00:27:59,900
It's somewhere between a fifth and a quarter of the stick is just

655
00:28:00,000 --> 00:28:03,100
Flatout being said is not usable, right?

656
00:28:03,100 --> 00:28:07,900
It's like they're the Xbox standard, I guess is basically saying we

657
00:28:07,900 --> 00:28:14,100
are going to manufacture stuff that is up to almost up to a quarter.

658
00:28:14,500 --> 00:28:19,900
A quarter of the range is just gone right in any given Direction and

659
00:28:19,900 --> 00:28:21,500
it's even worse for the right thumbstick.

660
00:28:21,500 --> 00:28:23,600
That's even a little higher, that's closer to a quarter, right?

661
00:28:23,600 --> 00:28:28,600
So that's that's, let's see here, divided by 32 768.

662
00:28:28,700 --> 00:28:29,800
So that's actually over.

663
00:28:29,900 --> 00:28:30,700
Twenty-five percent.

664
00:28:30,700 --> 00:28:35,900
So, that's just to give you an example of how large that dead zone is.

665
00:28:35,900 --> 00:28:36,700
It's big.

666
00:28:37,000 --> 00:28:40,600
So what we want to do here is we want to basically just pretend that

667
00:28:40,600 --> 00:28:45,600
if we get values that are that are in that range, that they are not

668
00:28:45,600 --> 00:28:49,000
really going to be considered valid values.

669
00:28:49,000 --> 00:28:49,500
We're just going to.

670
00:28:49,500 --> 00:28:51,400
If they're, if they're inside that range we're just going to treat

671
00:28:51,400 --> 00:28:52,700
them as zero.

672
00:28:53,300 --> 00:28:56,700
So in order to do that, I'm not sure exactly how I want to do that.

673
00:28:56,700 --> 00:28:58,000
I did the range mapping here.

674
00:28:58,000 --> 00:28:59,800
I feel like they're basically saying that this

675
00:29:00,000 --> 00:29:02,200
Have to be applied in either direction.

676
00:29:02,700 --> 00:29:05,900
They're not really clear on the difference because if you'll notice

677
00:29:05,900 --> 00:29:08,000
the negative range is different than the positive range.

678
00:29:08,000 --> 00:29:09,300
Like I talked before, it's one greater.

679
00:29:09,300 --> 00:29:11,400
So it's a little odd that they're the same.

680
00:29:11,400 --> 00:29:14,200
We don't really know very much about it.

681
00:29:14,200 --> 00:29:17,000
So we're going to have to take their word for it, but it might be nice

682
00:29:17,000 --> 00:29:19,400
if they had done a little more documentation here to talk about the

683
00:29:19,400 --> 00:29:20,800
difference between positive and negative.

684
00:29:20,800 --> 00:29:28,700
In this case, because like I said, - 32 768 is a negative value, 32767

685
00:29:28,700 --> 00:29:29,800
is actually the positive.

686
00:29:29,900 --> 00:29:30,500
You right?

687
00:29:30,500 --> 00:29:33,800
So there is a difference in range there and we're off by one a little

688
00:29:33,800 --> 00:29:33,900
bit.

689
00:29:33,900 --> 00:29:35,900
So it's odd that they didn't respect that.

690
00:29:35,900 --> 00:29:37,900
But those are the dead zone values.

691
00:29:38,000 --> 00:29:40,100
We're going to use them the way they suggest to use them.

692
00:29:40,400 --> 00:29:43,000
Basically, what we're going to do here is we're going to change our

693
00:29:43,000 --> 00:29:47,100
processing to basically start out by saying that the X and the Y are

694
00:29:47,100 --> 00:29:49,000
assumed to be 0.

695
00:29:49,300 --> 00:29:55,500
We will then go ahead and access the excuse me.

696
00:29:55,800 --> 00:29:59,500
We'll go ahead and access these values will say if

697
00:30:00,300 --> 00:30:05,600
The oops, if the pad all you know what I can actually do it just like

698
00:30:05,600 --> 00:30:06,100
this here.

699
00:30:06,300 --> 00:30:12,600
So I can basically say this whole thing is predicated on this being

700
00:30:12,900 --> 00:30:17,000
lower than the dead zone in this direction, right?

701
00:30:17,000 --> 00:30:17,700
Like that.

702
00:30:17,800 --> 00:30:22,700
And this thing is predicated on it being higher than the dead zone.

703
00:30:23,100 --> 00:30:23,400
Now.

704
00:30:23,400 --> 00:30:26,200
I don't remember if they said higher than the dead zone or higher than

705
00:30:26,200 --> 00:30:28,200
or equal to they did say higher.

706
00:30:28,700 --> 00:30:29,300
Yeah.

707
00:30:29,400 --> 00:30:29,900
Now this is

708
00:30:30,600 --> 00:30:31,900
Well, that's an interesting thing.

709
00:30:32,300 --> 00:30:33,900
Oh, the oh, it's a magnitude check.

710
00:30:33,900 --> 00:30:34,700
Okay, that's fine.

711
00:30:35,200 --> 00:30:35,700
We'll talk about that.

712
00:30:35,700 --> 00:30:36,500
It's like, all right.

713
00:30:36,500 --> 00:30:40,300
So anyway, this right here is basically, this right here is just

714
00:30:40,300 --> 00:30:43,300
saying, all right, we were already checking, so that we did the /, the

715
00:30:43,300 --> 00:30:45,300
right value, depending, whether it's positive or negative.

716
00:30:45,600 --> 00:30:48,000
And if we look at what's Happening Here, we can basically say, all

717
00:30:48,000 --> 00:30:48,200
right.

718
00:30:48,200 --> 00:30:52,100
Now, what we're doing is saying don't even set the value of x, unless

719
00:30:52,100 --> 00:30:56,100
the value on the GamePad is already less than the dead zone for - or

720
00:30:56,100 --> 00:30:59,500
already greater than the value for positive.

721
00:30:59,600 --> 00:30:59,900
And so,

722
00:31:00,100 --> 00:31:02,300
Just leave it set at zero otherwise, right?

723
00:31:02,300 --> 00:31:05,300
So you can kind of see the way that that works, right?

724
00:31:05,400 --> 00:31:09,900
And then similarly, we can go down here and set this guy and and do

725
00:31:09,900 --> 00:31:10,800
the exact same thing.

726
00:31:10,800 --> 00:31:13,700
This guy will just be doing the same thing.

727
00:31:13,700 --> 00:31:17,200
This is our left thumb dead zone as well, right?

728
00:31:17,200 --> 00:31:19,900
Like that and Pad s thumb.

729
00:31:19,900 --> 00:31:24,000
L, y greater than and now the only thing that we have to do is is we

730
00:31:24,000 --> 00:31:25,800
have this we want like the - right.

731
00:31:25,800 --> 00:31:29,900
We want to be less than the negative version of The Dead Zone, so

732
00:31:30,000 --> 00:31:31,600
We needed to stick a negative in there, right?

733
00:31:31,600 --> 00:31:34,500
If that makes sense, because otherwise we be checking it was less than

734
00:31:34,500 --> 00:31:36,900
the positive value, The Dead Zone which a negative value always is

735
00:31:36,900 --> 00:31:37,400
going to be.

736
00:31:37,700 --> 00:31:40,300
So we want to make sure we catch the range on either side, right?

737
00:31:40,700 --> 00:31:42,500
So that's that's really it.

738
00:31:42,900 --> 00:31:44,800
There wasn't a whole lot else that I wanted to do there.

739
00:31:44,800 --> 00:31:46,800
But I just want to make sure that we got that in there so we can get

740
00:31:46,800 --> 00:31:47,700
rid of our to do.

741
00:31:48,100 --> 00:31:51,800
And then we can also say, well these two things look very, very

742
00:31:51,800 --> 00:31:52,600
similar, right?

743
00:31:52,600 --> 00:31:53,800
They're almost the same.

744
00:31:53,900 --> 00:31:56,300
So what we could do is we could change this to a went through to

745
00:31:56,300 --> 00:31:57,800
process xinput.

746
00:31:58,100 --> 00:31:59,700
Stick position, right.

747
00:31:59,700 --> 00:31:59,900
Or

748
00:32:00,000 --> 00:32:01,000
Or stick value.

749
00:32:01,100 --> 00:32:02,100
I guess we could call it.

750
00:32:03,500 --> 00:32:07,000
And then we can go and say, all right, we know that we would pass it

751
00:32:07,200 --> 00:32:08,100
the LX.

752
00:32:08,100 --> 00:32:09,100
So basically pass it.

753
00:32:09,100 --> 00:32:10,300
Whatever the value is.

754
00:32:10,700 --> 00:32:11,300
We'd pass it.

755
00:32:11,300 --> 00:32:16,800
The the thumb Dead Zone value, that it should use, and then we pass it

756
00:32:17,100 --> 00:32:20,900
basically the place to write that into which actually is going to be a

757
00:32:20,900 --> 00:32:23,800
little problematic for us because we need to sort of group.

758
00:32:24,000 --> 00:32:27,000
We need to group The the left, and the right stuff, which is a little

759
00:32:27,000 --> 00:32:29,500
tricky based on how we've done it.

760
00:32:29,900 --> 00:32:32,200
I could pass values to each individual one.

761
00:32:32,900 --> 00:32:37,400
Maybe that's the easiest thing to do or I can I can sort of

762
00:32:37,400 --> 00:32:40,700
short-circuits that process for now and not go the full route and just

763
00:32:40,700 --> 00:32:41,500
do this.

764
00:32:41,500 --> 00:32:44,100
So what I could do is say it's say that right.

765
00:32:44,100 --> 00:32:45,200
Hopefully that makes some sense.

766
00:32:45,700 --> 00:32:48,300
So we're basically say, we'll just use that same path and then down

767
00:32:48,300 --> 00:32:53,200
here we would do, you know, this sort of thing Pat with the, with the,

768
00:32:53,200 --> 00:32:56,500
with the ly doing the same thing there for the dead zone.

769
00:32:56,500 --> 00:32:58,800
And you'll notice we're using the same dead zone for X and Y, which

770
00:32:58,800 --> 00:32:59,600
seems weird.

771
00:33:00,700 --> 00:33:02,900
But I guess that's how the controller is supposed to work.

772
00:33:03,300 --> 00:33:04,600
Have the same dead zone for both.

773
00:33:04,600 --> 00:33:08,300
I don't really know but that that appears to be what they are

774
00:33:08,300 --> 00:33:09,300
suggesting.

775
00:33:09,500 --> 00:33:14,700
So I'm going to go ahead and pull that out so that we basically have a

776
00:33:14,700 --> 00:33:17,500
function that does exactly what I just said.

777
00:33:18,000 --> 00:33:22,200
Here we go into our utility function here just so I don't have

778
00:33:22,200 --> 00:33:26,600
multiple copies of this function and that is this.

779
00:33:26,600 --> 00:33:29,600
So it's going to look like something.

780
00:33:30,000 --> 00:33:36,600
Which basically just takes in first, the short I believe is what this

781
00:33:36,600 --> 00:33:37,400
is defined to be.

782
00:33:37,400 --> 00:33:38,900
It is a short.

783
00:33:38,900 --> 00:33:40,500
Is it capital short?

784
00:33:40,500 --> 00:33:41,400
I think is what they are.

785
00:33:41,700 --> 00:33:42,600
Let's take a look.

786
00:33:43,000 --> 00:33:45,300
What is the name here?

787
00:33:45,300 --> 00:33:46,200
It is.

788
00:33:46,200 --> 00:33:51,600
One of those State structures X input State.

789
00:33:51,600 --> 00:33:53,300
Just want to verify that.

790
00:33:53,300 --> 00:33:54,800
It isn't short Capital.

791
00:33:54,800 --> 00:33:58,000
That's what they actually are using for their 16-bit.

792
00:33:58,000 --> 00:34:00,000
We could use in 16 if you wanted to but I was

793
00:34:00,000 --> 00:34:04,300
To use the actual thing that they have defined it to be so too short.

794
00:34:04,400 --> 00:34:05,200
That's what I thought.

795
00:34:05,600 --> 00:34:06,700
So basically up here.

796
00:34:07,000 --> 00:34:08,600
We just want to take that short value.

797
00:34:08,600 --> 00:34:09,600
Whichever one we're taking.

798
00:34:09,600 --> 00:34:17,000
So this is the value and then we are going to take the dead zone value

799
00:34:17,000 --> 00:34:17,600
as well.

800
00:34:18,000 --> 00:34:21,600
We'll call that the dead zone threshold and then, inside the function

801
00:34:21,600 --> 00:34:24,900
we just do exactly what we did before.

802
00:34:25,500 --> 00:34:29,699
We basically, now just use whatever value was passed in as

803
00:34:30,000 --> 00:34:35,100
The go and we use the dead zone instead of that so that we can

804
00:34:35,100 --> 00:34:35,500
control.

805
00:34:35,500 --> 00:34:38,300
If we want to use the other stick, at some point, we can use it.

806
00:34:38,699 --> 00:34:43,400
And then we have the result equal to the value as well.

807
00:34:43,400 --> 00:34:46,900
So that is basically all there is to it.

808
00:34:47,400 --> 00:34:51,500
Nothing more and then we can return that.

809
00:34:51,500 --> 00:34:54,300
So there is our processing for the stick.

810
00:34:54,800 --> 00:34:56,100
Looks pretty good.

811
00:34:56,199 --> 00:34:57,400
I don't know why that happened.

812
00:34:57,400 --> 00:34:59,600
That was cut and paste bug, and so, there we go.

813
00:34:59,600 --> 00:34:59,800
Now we're

814
00:35:00,000 --> 00:35:03,600
Piling and I don't know if we were actually working yet.

815
00:35:04,100 --> 00:35:05,000
We may not be.

816
00:35:05,200 --> 00:35:05,700
Oh, right.

817
00:35:05,700 --> 00:35:09,300
I can't test this yet though because that is on controller one now.

818
00:35:09,300 --> 00:35:12,800
So, what we need to do is now actually in our code that someday will

819
00:35:12,800 --> 00:35:14,700
actually process real controller input.

820
00:35:14,700 --> 00:35:16,500
Hopefully, that'll actually probably be pretty soon.

821
00:35:17,100 --> 00:35:20,300
But basically what we need to do is set that is analog.

822
00:35:20,700 --> 00:35:24,100
So that's set to true and we need to actually check that controller.

823
00:35:24,400 --> 00:35:29,800
So basically, what we're going to do here is maybe we will

824
00:35:29,900 --> 00:35:34,800
Just flat-out, check all the controllers in a for Loop right here.

825
00:35:34,900 --> 00:35:40,400
So basically we'll say controller index equals 0, we will go ahead and

826
00:35:40,400 --> 00:35:40,700
Hoops.

827
00:35:40,700 --> 00:35:41,600
That's no good.

828
00:35:42,600 --> 00:35:46,200
Push to overwrite mode accidentally will basically just check all the

829
00:35:46,200 --> 00:35:48,100
controllers like this.

830
00:35:48,400 --> 00:35:51,600
So that will pick up because we were only picking up the keyboard now

831
00:35:51,600 --> 00:35:55,100
because it's controller zero, so I'd rather just do this.

832
00:35:55,100 --> 00:35:59,700
I'll change input 0 to be controller.

833
00:36:00,000 --> 00:36:04,400
That and we will go ahead and grab every controller in a loop.

834
00:36:04,400 --> 00:36:09,100
And for each controller will basically just do the operations directly

835
00:36:09,100 --> 00:36:09,800
for each one.

836
00:36:09,800 --> 00:36:12,600
Now, that basically won't work for tone Hertz, tone Hertz will get

837
00:36:12,600 --> 00:36:13,100
overwritten.

838
00:36:13,100 --> 00:36:17,500
So, the last controller, whoever the last controller is to report is

839
00:36:17,500 --> 00:36:21,800
analog will overwrite tone hurts, but that's okay, for now.

840
00:36:21,800 --> 00:36:23,000
We don't really care about that.

841
00:36:27,400 --> 00:36:28,100
There we go.

842
00:36:28,800 --> 00:36:29,800
Looks pretty good.

843
00:36:30,000 --> 00:36:34,200
Nice and stable, and that dead zone processing, seems to be working as

844
00:36:34,200 --> 00:36:34,700
well.

845
00:36:34,900 --> 00:36:37,300
There's no Jitter there we can see as well.

846
00:36:37,300 --> 00:36:38,000
When we start up.

847
00:36:38,000 --> 00:36:42,200
We no longer have the occasional, you know joystick is moving problem.

848
00:36:42,700 --> 00:36:44,000
That looks pretty good.

849
00:36:44,200 --> 00:36:47,200
I should also check what happens if I unplug

850
00:36:48,500 --> 00:36:49,000
There we go.

851
00:36:50,000 --> 00:36:53,800
It is unplugged now and now I will plug it back in.

852
00:36:53,900 --> 00:36:54,600
There we go.

853
00:36:58,400 --> 00:36:58,900
There we go.

854
00:37:00,300 --> 00:37:02,100
All right, so that looks pretty good.

855
00:37:02,500 --> 00:37:04,100
However, I don't understand.

856
00:37:05,100 --> 00:37:07,500
I'm not sure why you see that that happens again.

857
00:37:09,200 --> 00:37:10,100
No, it didn't.

858
00:37:10,100 --> 00:37:13,400
I'm not sure why we were having that weird tonal thing happening.

859
00:37:17,600 --> 00:37:22,800
Yeah, well seems, okay, for now that was a little suspicious.

860
00:37:22,800 --> 00:37:25,500
I want to check when we actually go I guess.

861
00:37:25,500 --> 00:37:28,300
When and do sort of more thorough checks on some of this stuff.

862
00:37:28,300 --> 00:37:31,000
We'll see pretty quickly if that's right or wrong, but everything else

863
00:37:31,000 --> 00:37:31,700
seemed to work properly.

864
00:37:31,700 --> 00:37:36,200
So I think we're in good shape anyway, so that is all I really wanted

865
00:37:36,200 --> 00:37:37,100
to do for that.

866
00:37:37,100 --> 00:37:41,300
Now, I want to also make a couple changes to the way the stick stuff

867
00:37:41,300 --> 00:37:42,000
is handled.

868
00:37:42,600 --> 00:37:45,800
And I thought about this, I was kind of, I was lying in bed and I was

869
00:37:45,800 --> 00:37:47,300
thinking and I'm like, oh, okay.

870
00:37:47,400 --> 00:37:50,200
I was falling asleep and I'm like, oh, I should really have done the

871
00:37:50,200 --> 00:37:51,400
stickhandling a little differently.

872
00:37:54,100 --> 00:37:56,600
I realized there was a smarter way to do it, than what I did.

873
00:37:57,500 --> 00:37:59,300
At least, I think there is, I don't know.

874
00:37:59,300 --> 00:38:01,800
It's always every time I write code, I try writing it a little

875
00:38:01,800 --> 00:38:04,100
differently to see if I can get a little better, and sometimes I get

876
00:38:04,100 --> 00:38:06,100
worse and sometimes I don't, it's hard to say.

877
00:38:06,100 --> 00:38:08,700
So I always try to come up with new ideas and be like, oh, maybe let's

878
00:38:08,700 --> 00:38:10,400
see what happens if I try code.

879
00:38:10,500 --> 00:38:12,900
That looks like this and then I go and say, I know I didn't work, I

880
00:38:12,900 --> 00:38:14,700
was bad or oh, there was a good thing there.

881
00:38:14,700 --> 00:38:17,100
I'm gonna remember that and do that part thing again.

882
00:38:18,000 --> 00:38:21,100
So what I was thinking is basically what I'd like to do.

883
00:38:21,900 --> 00:38:24,000
Yes, I'd like to treat for this game.

884
00:38:24,100 --> 00:38:28,200
I think I'd like to treat the stick as if it's always essentially a

885
00:38:28,200 --> 00:38:33,000
d-pad and the things are buttons, but then just have an extra piece of

886
00:38:33,000 --> 00:38:38,100
data that says, what the average motion of the stick was so that if

887
00:38:38,200 --> 00:38:44,000
you are doing sort of motion, it can be smooth on the analog side, but

888
00:38:44,000 --> 00:38:45,500
you can still use it.

889
00:38:45,500 --> 00:38:48,600
You could still look at it as if it was buttons for the purposes of

890
00:38:48,600 --> 00:38:51,500
like double tap, you know, like that Dash thing I was talking about.

891
00:38:51,700 --> 00:38:55,400
Out because what I realized that the min-max thing, this thing that I

892
00:38:55,400 --> 00:38:57,800
was proposing is actually kind of dumb.

893
00:38:57,900 --> 00:38:59,900
It's way harder for the game to use.

894
00:39:00,100 --> 00:39:00,700
As a thing.

895
00:39:00,700 --> 00:39:03,900
And it's way harder for that to capture the thing that we want as

896
00:39:03,900 --> 00:39:08,800
composed as opposed to just doing something like this average X,

897
00:39:09,700 --> 00:39:10,100
right?

898
00:39:10,100 --> 00:39:15,200
Average y for that stick position and basically that's just only if

899
00:39:15,200 --> 00:39:17,900
analog is on, will it get those?

900
00:39:18,600 --> 00:39:22,700
And I could say that this is something like that, right?

901
00:39:23,200 --> 00:39:29,500
Basically, what I should do is have these be defined as as buttons as

902
00:39:29,500 --> 00:39:29,800
well.

903
00:39:30,000 --> 00:39:33,600
Like basically, the up-down left-right should actually be now defined

904
00:39:33,600 --> 00:39:35,400
to be buttons.

905
00:39:35,700 --> 00:39:39,600
The should be d-pad and buttons, should all essentially be treated the

906
00:39:39,600 --> 00:39:40,000
same.

907
00:39:40,200 --> 00:39:42,600
And that way when you look for things like Dash in a direction, you

908
00:39:42,600 --> 00:39:45,700
just look at the half transition count for the direction, and if the

909
00:39:45,700 --> 00:39:49,300
half transition count is four or whatever or three I should say, you

910
00:39:49,300 --> 00:39:50,500
know, that that's a dash.

911
00:39:50,600 --> 00:39:51,200
That's it.

912
00:39:51,300 --> 00:39:52,600
And you can some those over time.

913
00:39:52,600 --> 00:39:53,700
You look at that transition count.

914
00:39:53,700 --> 00:39:56,500
If you get 1/2 transition, you look at like how many have transitions

915
00:39:56,500 --> 00:39:57,300
you got in.

916
00:39:57,300 --> 00:39:59,900
Say a quarter of a second and that

917
00:40:00,000 --> 00:40:03,700
Right there that tells you what your, you know, whether the do dashed

918
00:40:03,700 --> 00:40:04,200
or not.

919
00:40:04,500 --> 00:40:07,400
So I think, I think it's just smarter to do it that way.

920
00:40:07,800 --> 00:40:14,000
And so maybe what I'll do is I'll break these up into stick and button

921
00:40:14,300 --> 00:40:15,300
or something like that.

922
00:40:15,900 --> 00:40:16,400
Right?

923
00:40:16,500 --> 00:40:19,100
I don't really know if it should be but it's like I kind of want

924
00:40:19,100 --> 00:40:23,400
basically, like, a chi, guess action, you know, like that kind of

925
00:40:23,400 --> 00:40:23,800
thing.

926
00:40:23,900 --> 00:40:27,600
There's the action and Direction and move, I guess.

927
00:40:27,600 --> 00:40:28,900
It's so smooth moving action.

928
00:40:28,900 --> 00:40:29,300
That's good.

929
00:40:29,300 --> 00:40:29,800
I like that.

930
00:40:29,900 --> 00:40:33,400
At move up, move down, move left move, right and action up action down

931
00:40:33,400 --> 00:40:34,600
action, left action, right?

932
00:40:34,700 --> 00:40:38,100
That seems a little bit more interesting to me and because then that

933
00:40:38,100 --> 00:40:41,800
way we basically one, two, three, four, five, six, seven, eight, nine,

934
00:40:41,800 --> 00:40:47,000
ten of these are basically just have 10 buttons now and and the stick

935
00:40:47,000 --> 00:40:47,500
average.

936
00:40:47,800 --> 00:40:49,100
So hopefully that makes a little bit sense.

937
00:40:49,100 --> 00:40:50,200
Why I want to do that.

938
00:40:50,300 --> 00:40:51,500
I know it's a little confusing.

939
00:40:52,000 --> 00:40:54,200
I apologize, but it's something I was thinking about and it's like

940
00:40:54,200 --> 00:40:56,300
that's kind of cool try that.

941
00:40:56,500 --> 00:40:58,700
And then we'll see when we go to actually make the movement of our

942
00:40:58,700 --> 00:40:59,800
character, which will be pretty soon.

943
00:41:00,000 --> 00:41:02,700
Probably a couple weeks when we're actually doing movement tuning,

944
00:41:03,800 --> 00:41:05,100
you'll see how I use it.

945
00:41:05,100 --> 00:41:08,500
And hopefully, that'll make a little more sense than to is why I want

946
00:41:08,500 --> 00:41:08,900
to do that.

947
00:41:08,900 --> 00:41:11,900
I'll be able to show like, okay, here's the code of why I think that

948
00:41:11,900 --> 00:41:12,200
was good.

949
00:41:12,200 --> 00:41:14,300
So I think that's a more interesting way to do it.

950
00:41:14,500 --> 00:41:19,700
And it means that basically these become no-brainers, the keyboard now

951
00:41:19,700 --> 00:41:22,200
gets passed through totally directly and correctly.

952
00:41:22,200 --> 00:41:27,200
Since those were they are essentially buttons now, right?

953
00:41:27,200 --> 00:41:29,800
And so there's basically like w is move up,

954
00:41:29,900 --> 00:41:33,300
Right, a is moved left.

955
00:41:33,300 --> 00:41:38,600
S is moved down, and D is move.

956
00:41:38,600 --> 00:41:39,200
Right?

957
00:41:39,200 --> 00:41:39,800
Right.

958
00:41:40,200 --> 00:41:45,600
And then these are now the, the action buttons action up action, left

959
00:41:45,600 --> 00:41:46,400
action down.

960
00:41:46,800 --> 00:41:47,500
Right?

961
00:41:47,500 --> 00:41:51,800
Right, and that is like that's it.

962
00:41:51,800 --> 00:41:53,200
Like that just works pretty much.

963
00:41:53,200 --> 00:41:56,100
I don't think that we even really need to do anything else for the

964
00:41:56,100 --> 00:41:56,300
keyboard.

965
00:41:56,300 --> 00:41:58,700
The keyboard is pretty much done.

966
00:41:58,800 --> 00:41:59,900
And so then all we have

967
00:42:00,000 --> 00:42:04,200
To do is down here, say okay, that changes a little bit, the way that

968
00:42:04,200 --> 00:42:05,200
this thing is handled.

969
00:42:05,400 --> 00:42:10,100
Basically, what we have to decide is what that threshold is for

970
00:42:10,100 --> 00:42:11,600
whether it's moving left, right?

971
00:42:11,600 --> 00:42:12,000
Or up or down.

972
00:42:12,500 --> 00:42:14,900
I guess at first we might say that.

973
00:42:14,900 --> 00:42:17,600
That should be just The Dead Zone if you're outside the dead zone,

974
00:42:17,600 --> 00:42:18,600
that's a left, if you're outside.

975
00:42:18,600 --> 00:42:19,100
It's a right.

976
00:42:19,100 --> 00:42:22,000
So I think, I think that's probably what we want to do.

977
00:42:22,300 --> 00:42:26,000
So basically, what I would say is now we're just going to literally,

978
00:42:26,000 --> 00:42:29,000
we're going to get rid of all this, mid Max stuff entirely.

979
00:42:29,000 --> 00:42:30,000
It doesn't need to be.

980
00:42:30,000 --> 00:42:31,100
Be there at all anymore.

981
00:42:31,100 --> 00:42:33,900
We can directly set these values.

982
00:42:33,900 --> 00:42:36,900
So basically, we can do this sort of thing.

983
00:42:38,200 --> 00:42:39,500
Let's see here.

984
00:42:42,700 --> 00:42:46,600
We can basically directly pull those those sticks and stuff them into

985
00:42:47,000 --> 00:42:52,000
stick, average, X, and stick, average Y, and that's fine.

986
00:42:52,800 --> 00:42:56,900
But the other thing, what we can do then is now say that we are going

987
00:42:56,900 --> 00:42:59,800
to use these average, these stick average things.

988
00:43:00,000 --> 00:43:04,600
To determine whether there was a trigger on one of these buttons.

989
00:43:04,800 --> 00:43:11,300
So basically what we will do there is say, I guess we would do this.

990
00:43:11,300 --> 00:43:17,000
We could even make a synthetic version of, we could even just call

991
00:43:17,000 --> 00:43:21,300
this function, really if we wanted to, we could say, process, digital

992
00:43:21,300 --> 00:43:26,600
buttons with fake move buttons essentially and then actually, just

993
00:43:26,600 --> 00:43:28,000
just full-on pass.

994
00:43:29,400 --> 00:43:29,800
Yeah.

995
00:43:29,900 --> 00:43:31,100
That's not a bad idea.

996
00:43:31,100 --> 00:43:31,700
Let's try that.

997
00:43:31,700 --> 00:43:33,100
I'll say what I'm going to do in a second here.

998
00:43:33,100 --> 00:43:37,400
Let me just finish to make it to making this code change because we

999
00:43:37,400 --> 00:43:41,700
need to actually change these or now action buttons like that.

1000
00:43:41,800 --> 00:43:42,400
There we go.

1001
00:43:43,200 --> 00:43:47,600
And basically I think that's basically it that looks about right?

1002
00:43:47,600 --> 00:43:48,600
Everything's good there.

1003
00:43:48,600 --> 00:43:52,900
Okay, and we should probably, I feel like these guys should come in

1004
00:43:52,900 --> 00:43:55,500
here to while we're cleaning things up.

1005
00:43:55,600 --> 00:43:59,300
I wonder if we should go ahead and say, start and back are in here as

1006
00:43:59,300 --> 00:43:59,600
well.

1007
00:44:00,000 --> 00:44:02,100
Back, let's start.

1008
00:44:02,100 --> 00:44:03,200
So let's do that as well.

1009
00:44:03,200 --> 00:44:04,300
Since we're, you know, it's free.

1010
00:44:04,300 --> 00:44:08,200
It's this is one of the nice things about pulling out code properly is

1011
00:44:08,200 --> 00:44:11,500
basically, you can just kind of get you can, you don't really have to

1012
00:44:11,500 --> 00:44:13,700
do much work to start processing other stuff.

1013
00:44:13,900 --> 00:44:18,800
So there's the start button Loops behind my head.

1014
00:44:18,800 --> 00:44:21,300
Don't want to let that get too far behind my head or you can't see

1015
00:44:21,300 --> 00:44:21,900
what I'm doing.

1016
00:44:22,400 --> 00:44:23,300
So, there we go.

1017
00:44:24,000 --> 00:44:24,700
Alright.

1018
00:44:25,200 --> 00:44:27,500
So let's go ahead and just throw those in there while we're at it

1019
00:44:27,500 --> 00:44:29,800
seems like a good enough reason.

1020
00:44:30,100 --> 00:44:30,900
To do that.

1021
00:44:30,900 --> 00:44:36,000
So this is stick average X and stick average.

1022
00:44:36,000 --> 00:44:38,600
Why just to get those ported.

1023
00:44:38,900 --> 00:44:43,500
We've got action down, and now we got to clean this up.

1024
00:44:43,500 --> 00:44:44,600
So that's fine.

1025
00:44:44,600 --> 00:44:46,200
We will clean that up in a second.

1026
00:44:46,200 --> 00:44:49,400
Is there anything else the start button?

1027
00:44:49,600 --> 00:44:51,400
That's not good game pad.

1028
00:44:51,400 --> 00:44:53,300
Should probably just be starting back out.

1029
00:44:53,300 --> 00:44:55,100
Assume that right?

1030
00:44:55,700 --> 00:44:56,500
Yeah.

1031
00:44:56,600 --> 00:44:59,100
So there we are all ported and now I can just go ahead and do the

1032
00:44:59,100 --> 00:44:59,800
thing that I was going to say.

1033
00:45:00,400 --> 00:45:02,500
Basically, I've already got this function written that does the

1034
00:45:02,500 --> 00:45:04,400
processing for the button exactly the way I want to.

1035
00:45:04,700 --> 00:45:07,900
So what I'm going to do, I think it's just go ahead and use a fake

1036
00:45:07,900 --> 00:45:11,600
value as if we had buttons for these guys, and I'll just set that.

1037
00:45:12,100 --> 00:45:17,300
I'll just set that value to basically, be whatever to be set properly

1038
00:45:17,800 --> 00:45:20,800
in the case where the the sticks are in the position that think they

1039
00:45:20,800 --> 00:45:22,200
should be, and not if they're not.

1040
00:45:22,200 --> 00:45:25,300
So, basically, all I do is say, you know, I've got this stick, average

1041
00:45:25,300 --> 00:45:29,800
X and maybe will basically say, I don't know, I mean, for the purposes

1042
00:45:29,800 --> 00:45:29,900
of

1043
00:45:30,000 --> 00:45:33,600
Dat of of doing dashes and treating it as a button, if it's more than

1044
00:45:33,600 --> 00:45:34,500
halfway.

1045
00:45:34,800 --> 00:45:35,200
I don't know.

1046
00:45:35,200 --> 00:45:38,400
It's basically like we're going to have a threshold value basically,

1047
00:45:38,400 --> 00:45:38,900
right.

1048
00:45:39,400 --> 00:45:42,900
And we've remapped things between 0 & 1 now, so we need a value

1049
00:45:42,900 --> 00:45:43,600
between 0 and 1.

1050
00:45:43,600 --> 00:45:46,300
So halfway would be 0.5., Right?

1051
00:45:46,700 --> 00:45:52,100
And what I could do is say, well, if the stick average X, right, is,

1052
00:45:52,100 --> 00:45:55,400
is less than the negative threshold.

1053
00:45:55,400 --> 00:45:57,600
So, if it's negative point five, right?

1054
00:45:58,000 --> 00:45:59,700
Then then fake move buttons, is

1055
00:46:00,100 --> 00:46:01,400
Otherwise, it's zero, right?

1056
00:46:01,400 --> 00:46:04,600
So, it's basically, in fact, all I'm really doing is this, I'm just

1057
00:46:04,600 --> 00:46:05,500
doing that right there.

1058
00:46:05,500 --> 00:46:06,200
That's it.

1059
00:46:07,100 --> 00:46:08,400
That's, that's all I'm doing.

1060
00:46:08,500 --> 00:46:11,600
And so, I basically made a fake button bit array that set, you know,

1061
00:46:11,600 --> 00:46:13,900
it's got the bottom bit set in the case where it's exceeded the

1062
00:46:13,900 --> 00:46:14,400
threshold.

1063
00:46:14,400 --> 00:46:15,400
And otherwise, it doesn't.

1064
00:46:15,400 --> 00:46:18,700
And I'm just going to say, basically that move left, which would be

1065
00:46:18,700 --> 00:46:19,000
stick.

1066
00:46:19,000 --> 00:46:22,200
Average X, you know, if you're moving left and if you're, if you're a

1067
00:46:22,200 --> 00:46:25,400
stick, a Vertex is negative, then you're moving to the left because -

1068
00:46:25,400 --> 00:46:29,900
is mapped this way and positive mapped to the right basically.

1069
00:46:30,000 --> 00:46:30,300
Lee.

1070
00:46:31,100 --> 00:46:33,800
I think that's mostly all I wanted to do.

1071
00:46:33,900 --> 00:46:35,000
That's that's it.

1072
00:46:35,200 --> 00:46:38,400
So yeah and then I just check for the threshold in the opposite

1073
00:46:38,400 --> 00:46:38,900
direction.

1074
00:46:38,900 --> 00:46:40,200
Do it for y as well.

1075
00:46:40,600 --> 00:46:43,300
And so now I can just call that same function, which does the counting

1076
00:46:43,300 --> 00:46:45,200
properly and that's it.

1077
00:46:45,200 --> 00:46:45,400
Whoops.

1078
00:46:45,400 --> 00:46:46,300
I deleted my threshold.

1079
00:46:46,300 --> 00:46:53,600
That was a mistake threshold equals 0.5 and that reeked 32.

1080
00:46:53,600 --> 00:46:54,500
That's an interesting type.

1081
00:46:54,500 --> 00:46:58,900
Oh, that is really all I wanted to do for the stickhandling there and

1082
00:46:58,900 --> 00:46:59,900
it still works fine on.

1083
00:47:00,000 --> 00:47:00,800
Average.

1084
00:47:00,800 --> 00:47:03,700
Now, of course, we still can't use the keyboard to control anything

1085
00:47:03,700 --> 00:47:06,800
other than just the action buttons because we're only checking for

1086
00:47:06,800 --> 00:47:08,700
analog controllers in here.

1087
00:47:08,700 --> 00:47:11,600
And so we need to also, make sure that we handle keyboard controllers.

1088
00:47:11,800 --> 00:47:14,600
So if the controller is not analog, which is the case of the keyboard,

1089
00:47:14,700 --> 00:47:19,200
what we probably want to do is say all right, let's let's process the

1090
00:47:19,200 --> 00:47:20,600
blue offset, at least.

1091
00:47:20,800 --> 00:47:25,900
So we'll say something like, you know, if that, that controller that

1092
00:47:25,900 --> 00:47:28,500
we're looking at here, which we know is an analog anymore.

1093
00:47:29,300 --> 00:47:29,700
If

1094
00:47:29,900 --> 00:47:34,100
It's let's say so it's stick average.

1095
00:47:34,100 --> 00:47:37,800
So it's if it's, if it's move left, then we will go ahead and

1096
00:47:37,800 --> 00:47:41,500
subtract, you know, something here.

1097
00:47:41,500 --> 00:47:42,400
We'll subtract one.

1098
00:47:42,400 --> 00:47:45,800
Let's say, and if it's, if it's move, right.

1099
00:47:46,100 --> 00:47:47,000
Ended down.

1100
00:47:47,400 --> 00:47:48,400
Would basically do Pat.

1101
00:47:48,400 --> 00:47:52,400
So, basically, if you're holding any of those down, we will we will go

1102
00:47:52,400 --> 00:47:55,000
ahead and update it that way.

1103
00:47:55,200 --> 00:47:55,500
All right.

1104
00:47:55,500 --> 00:47:56,100
There we go.

1105
00:47:56,600 --> 00:47:57,200
So there, you can see.

1106
00:47:57,200 --> 00:47:59,200
Now we've got our keyboard input working.

1107
00:48:00,000 --> 00:48:00,500
Awesome.

1108
00:48:00,900 --> 00:48:06,500
All right, so I think that's basically it for what I want to do input

1109
00:48:06,500 --> 00:48:06,900
cleanup.

1110
00:48:06,900 --> 00:48:11,500
Let's check the to dues a little bit here, just to make sure that

1111
00:48:11,500 --> 00:48:15,500
everything is happy about that.

1112
00:48:16,600 --> 00:48:18,600
Let's see to do d-pad.

1113
00:48:18,600 --> 00:48:22,800
Oh, we can knock out this to do as well with the d-pad.

1114
00:48:22,800 --> 00:48:25,700
We can just treat the d-pad as another one.

1115
00:48:26,700 --> 00:48:29,900
Yeah as basically as forcing our stick.

1116
00:48:30,000 --> 00:48:34,400
Average, if we wanted to write what we could do, right here is just

1117
00:48:34,400 --> 00:48:34,900
overwrite.

1118
00:48:34,900 --> 00:48:39,400
The stick average with the d-pad in the case, where, in the case,

1119
00:48:39,400 --> 00:48:41,300
where someone pushed the d-pad, right?

1120
00:48:41,300 --> 00:48:43,800
So what we can do is say right before we do this with our stick

1121
00:48:43,800 --> 00:48:44,700
average, right?

1122
00:48:44,700 --> 00:48:49,000
What we can do is say, you know, let's say if the if the d-pad up was

1123
00:48:49,000 --> 00:48:53,800
down, right, so they're pushing up, then we just flat-out set the, the

1124
00:48:53,800 --> 00:48:57,000
stick average y to be negative 1, right?

1125
00:48:57,000 --> 00:48:59,700
So, it's just, it's the full on it's as if you're just cranking.

1126
00:49:00,400 --> 00:49:00,900
All the way.

1127
00:49:01,300 --> 00:49:03,800
Although, you know, now that I think about it, I don't know which way,

1128
00:49:04,000 --> 00:49:04,500
I don't know.

1129
00:49:04,700 --> 00:49:06,100
I don't know which way the stick goes.

1130
00:49:06,400 --> 00:49:07,000
Does the stick.

1131
00:49:07,000 --> 00:49:09,300
Oh, is it - for up or positive for up?

1132
00:49:09,300 --> 00:49:10,100
I have no idea.

1133
00:49:10,400 --> 00:49:12,400
It should probably be positive for option.

1134
00:49:12,400 --> 00:49:12,700
It.

1135
00:49:13,300 --> 00:49:13,600
I don't know.

1136
00:49:13,600 --> 00:49:14,400
Let's find out.

1137
00:49:14,800 --> 00:49:18,400
Let's see, of course, the documentation doesn't bother to tell you.

1138
00:49:18,400 --> 00:49:19,600
Because, why would you do that?

1139
00:49:19,600 --> 00:49:20,000
Right?

1140
00:49:20,000 --> 00:49:22,000
Let's see your left each side of it.

1141
00:49:22,000 --> 00:49:23,300
See a sea.

1142
00:49:23,500 --> 00:49:24,800
Okay, so they just put in the wrong place.

1143
00:49:24,800 --> 00:49:28,000
It does tell us - value signify down or to the left.

1144
00:49:28,100 --> 00:49:29,800
So - is down so

1145
00:49:29,900 --> 00:49:31,900
So, stick average, why should be positive?

1146
00:49:31,900 --> 00:49:33,900
If the up button is pressed right?

1147
00:49:33,900 --> 00:49:34,600
Make some sense.

1148
00:49:35,100 --> 00:49:40,300
We'll go ahead and flat-out overwrite, the debt with down as well,

1149
00:49:40,400 --> 00:49:40,800
right?

1150
00:49:40,900 --> 00:49:41,500
Make sense.

1151
00:49:41,600 --> 00:49:43,400
Hopefully, this is self-explanatory.

1152
00:49:43,500 --> 00:49:46,600
And all I'm doing is basically over writing the stick value with the

1153
00:49:46,600 --> 00:49:49,100
d-pad, in the case, that the user used to the d-pad.

1154
00:49:49,200 --> 00:49:51,400
Because, of course, if you moved your hand off and started, using the

1155
00:49:51,400 --> 00:49:54,400
d-pad we'd want to use that because if you were trying to use the

1156
00:49:54,400 --> 00:49:56,800
stick, presumably you wouldn't be fussing with the d-pad.

1157
00:49:57,500 --> 00:49:59,800
So it seems like a pretty low risk way to to.

1158
00:50:00,000 --> 00:50:02,700
Are you to use the d-pad and not have you have to pick?

1159
00:50:02,700 --> 00:50:05,100
You can just use whichever one you want anytime and switch between

1160
00:50:05,100 --> 00:50:06,800
them which seems preferable.

1161
00:50:07,200 --> 00:50:08,400
So, I should be able to do that.

1162
00:50:08,400 --> 00:50:12,300
And now I should actually go to use the d-pad for stuff as well.

1163
00:50:12,300 --> 00:50:13,600
Which I can, there we go.

1164
00:50:13,800 --> 00:50:14,400
All right.

1165
00:50:14,700 --> 00:50:16,900
All right, that's good.

1166
00:50:17,300 --> 00:50:18,800
So, let's take a look at this here.

1167
00:50:19,300 --> 00:50:20,700
What else do we have?

1168
00:50:23,100 --> 00:50:26,000
Yeah, oops, that's not good.

1169
00:50:26,200 --> 00:50:30,200
Alright, so here stick average why I did the - I forgot to take the

1170
00:50:30,200 --> 00:50:31,700
negative out on the positive case.

1171
00:50:31,800 --> 00:50:32,700
So that's not.

1172
00:50:32,700 --> 00:50:33,700
That's not fun at all.

1173
00:50:33,900 --> 00:50:35,300
All right, so there's our move left.

1174
00:50:35,400 --> 00:50:35,800
Okay.

1175
00:50:36,600 --> 00:50:39,900
So basically I think and I got maybe I might have some more bugs in

1176
00:50:39,900 --> 00:50:40,300
here.

1177
00:50:40,700 --> 00:50:41,700
Did that pretty quickly.

1178
00:50:42,000 --> 00:50:44,800
Obviously, we're gonna have to test this and we will be able to test

1179
00:50:44,800 --> 00:50:45,400
it very easily.

1180
00:50:45,400 --> 00:50:47,900
Once we actually have the game up and running will draw out the stick

1181
00:50:47,900 --> 00:50:50,500
positions and kind of go through, run through a little test, to make

1182
00:50:50,500 --> 00:50:52,700
sure that it all moves the way that it should move.

1183
00:50:52,800 --> 00:50:53,100
Move.

1184
00:50:53,300 --> 00:50:54,100
And basically.

1185
00:50:55,400 --> 00:50:59,800
Yeah, I think that's about it that to do is about

1186
00:51:00,000 --> 00:51:03,500
Polling which we will do a little later.

1187
00:51:03,900 --> 00:51:05,000
Let's see here.

1188
00:51:07,100 --> 00:51:08,800
And I think we don't have a to do.

1189
00:51:08,800 --> 00:51:17,800
We should have another to do in here to do Casey need to not pull,

1190
00:51:18,100 --> 00:51:24,900
disconnected controllers to avoid X input frame rate, hit on older

1191
00:51:24,900 --> 00:51:25,900
libraries.

1192
00:51:25,900 --> 00:51:29,200
Just so we know that that needs to happen as well.

1193
00:51:29,300 --> 00:51:29,900
I will be showing

1194
00:51:30,000 --> 00:51:31,900
that how to do that much later in the Stream.

1195
00:51:31,900 --> 00:51:32,400
But yeah.

1196
00:51:32,800 --> 00:51:38,000
So anyway, I think that is mostly all we needed to do.

1197
00:51:38,000 --> 00:51:42,600
We have our keyboard input going, we have our two dues out of there

1198
00:51:42,600 --> 00:51:43,400
for things.

1199
00:51:43,900 --> 00:51:47,500
These are all to do is that we're going to be doing for other stuff.

1200
00:51:47,500 --> 00:51:49,500
We could make that zero memory thing.

1201
00:51:50,300 --> 00:51:52,100
Let's see, need to not pull.

1202
00:51:52,100 --> 00:51:53,400
Disconnected controllers.

1203
00:51:53,400 --> 00:51:56,300
To avoid X input frame rate, Hidalgo libraries that's in there.

1204
00:51:56,300 --> 00:51:57,500
Yes, and we'll do that.

1205
00:51:58,400 --> 00:51:59,800
We'll pack that will check packet number.

1206
00:52:00,000 --> 00:52:03,300
We do that and that, that looks pretty good.

1207
00:52:03,500 --> 00:52:04,700
That looks pretty good.

1208
00:52:04,700 --> 00:52:05,200
I suppose.

1209
00:52:05,200 --> 00:52:09,300
There's one thing we could do more while we're just in here just in

1210
00:52:09,300 --> 00:52:12,500
case it makes our life a little bit easier later, which is we could

1211
00:52:12,500 --> 00:52:18,100
also have is connected, basically, so that we can set whether or not

1212
00:52:18,100 --> 00:52:19,700
there actually is something on there.

1213
00:52:19,700 --> 00:52:20,900
We might as well throw that in now.

1214
00:52:20,900 --> 00:52:23,400
And that way when we're testing things we can actually test that as

1215
00:52:23,400 --> 00:52:26,400
well, just as a little like, you know, get things working in the game.

1216
00:52:26,400 --> 00:52:29,000
And so that it actually does the right thing there.

1217
00:52:29,000 --> 00:52:29,800
So basically, what we

1218
00:52:29,900 --> 00:52:35,300
I can do is say all right, the new keyboard controller is always

1219
00:52:35,300 --> 00:52:38,100
connected because we're just assuming that there's keyboard later on.

1220
00:52:38,100 --> 00:52:41,000
We'll do stuff with that where we actually pull for multiple keyboards

1221
00:52:41,000 --> 00:52:42,300
and all kinds of fun stuff like this.

1222
00:52:42,500 --> 00:52:44,900
But for now, we know we just always have one keyboard and that's fine.

1223
00:52:45,300 --> 00:52:49,000
And here, we basically know that this is connected if we get it.

1224
00:52:49,000 --> 00:52:52,000
So new controller is connected.

1225
00:52:53,200 --> 00:52:59,400
Controller is connected, is true in here whereas it is not true in

1226
00:52:59,400 --> 00:52:59,800
here.

1227
00:53:00,400 --> 00:53:01,100
Right.

1228
00:53:01,500 --> 00:53:02,300
So, there we go.

1229
00:53:02,800 --> 00:53:05,300
So I think that's it.

1230
00:53:05,600 --> 00:53:07,500
I think that's it.

1231
00:53:08,700 --> 00:53:09,900
That is looking good.

1232
00:53:09,900 --> 00:53:10,400
My friends.

1233
00:53:10,400 --> 00:53:11,500
That is looking good.

1234
00:53:11,700 --> 00:53:13,100
But, oh, that's no good.

1235
00:53:13,100 --> 00:53:14,500
That is not looking good.

1236
00:53:15,400 --> 00:53:16,600
That's not good at all.

1237
00:53:17,400 --> 00:53:18,000
What is our?

1238
00:53:18,000 --> 00:53:19,000
What did we do?

1239
00:53:19,000 --> 00:53:19,500
We made it.

1240
00:53:19,500 --> 00:53:20,100
We made it.

1241
00:53:20,100 --> 00:53:21,900
We made a grievous error people.

1242
00:53:23,000 --> 00:53:25,700
And that is, that is not what we should be doing.

1243
00:53:27,000 --> 00:53:28,200
That is unfortunate.

1244
00:53:28,300 --> 00:53:28,700
All right.

1245
00:53:28,700 --> 00:53:32,000
So basically we have, let me just before we go, look at that.

1246
00:53:32,000 --> 00:53:34,300
I wanted to I want to verify what we're doing here.

1247
00:53:34,300 --> 00:53:35,900
Make sure everything's kosher.

1248
00:53:36,000 --> 00:53:38,300
So we did everything that we need to do for our keyboard controller is

1249
00:53:38,500 --> 00:53:39,400
That's all fine.

1250
00:53:39,600 --> 00:53:41,300
We got the input and that's nice.

1251
00:53:42,100 --> 00:53:45,400
We should in theory always have the right number of controllers.

1252
00:53:45,400 --> 00:53:46,600
Do we have that?

1253
00:53:47,000 --> 00:53:49,200
I should also put in some assertions here.

1254
00:53:49,200 --> 00:53:52,400
One thing that I would like to do as well, is for getting the

1255
00:53:52,400 --> 00:53:53,700
controller's out.

1256
00:53:54,100 --> 00:53:56,400
I'd like to go ahead and make a thing for that.

1257
00:53:56,400 --> 00:53:57,800
I'll show you what I mean by that.

1258
00:53:58,000 --> 00:53:59,400
I want to basically make a thing.

1259
00:54:00,400 --> 00:54:01,700
In fact, I can spread it right here.

1260
00:54:01,800 --> 00:54:07,300
Something like this, get controller, and you pass it, the game input

1261
00:54:07,500 --> 00:54:11,500
and then I just say controller index out of that.

1262
00:54:11,500 --> 00:54:15,500
And basically, the only reason I wanted to do that was basically to

1263
00:54:15,500 --> 00:54:18,700
make a bounced check to basically just make sure that people aren't

1264
00:54:18,700 --> 00:54:21,600
asking for stuff that's out of bounds.

1265
00:54:21,700 --> 00:54:25,200
So base owing to do is just assert when we call that that the array

1266
00:54:25,200 --> 00:54:29,900
count of the input controllers is correct because we're

1267
00:54:30,000 --> 00:54:33,000
Starting to be a little fiddly there and I want to sort of make sure

1268
00:54:33,000 --> 00:54:35,300
that that's not going to cause a problem.

1269
00:54:35,700 --> 00:54:39,100
Basically we do that and then assuming that it is then we will

1270
00:54:39,100 --> 00:54:40,700
basically just access the array.

1271
00:54:40,700 --> 00:54:43,500
So this is not this is literally just putting in the kind of thing

1272
00:54:43,500 --> 00:54:46,600
that this is basically like higher-level languages often do this for

1273
00:54:46,600 --> 00:54:53,600
you automatically like bounds checking and just give you an error, we

1274
00:54:53,600 --> 00:54:54,000
can do this.

1275
00:54:54,000 --> 00:54:57,100
Pretty trivial for our own arrays people who write in C plus plus

1276
00:54:57,100 --> 00:54:59,100
might make a templated class for these sorts of things.

1277
00:55:00,000 --> 00:55:02,800
That you bounce tracking and we'll be doing some stuff for that later,

1278
00:55:02,800 --> 00:55:06,600
as we kind of get further on into making our own sorts of Library

1279
00:55:06,600 --> 00:55:07,200
stuff.

1280
00:55:07,200 --> 00:55:10,300
But for now we kind of have to do it the old-fashioned way, which is

1281
00:55:10,300 --> 00:55:12,800
basically just to do the check ourselves.

1282
00:55:12,800 --> 00:55:17,500
So here we go, ahead and say, we've got trailer index and that is

1283
00:55:17,500 --> 00:55:24,000
there, we passed the result back and that should be good that.

1284
00:55:24,000 --> 00:55:28,100
And basically all I want to do is just now make it so that everyone

1285
00:55:28,100 --> 00:55:28,900
has to go through that.

1286
00:55:28,900 --> 00:55:29,800
So what I'm going to do here

1287
00:55:29,900 --> 00:55:33,500
is a little trick that I like to use which is basically like insert a

1288
00:55:33,500 --> 00:55:36,100
bogus character into the definition of something to see where it is

1289
00:55:36,100 --> 00:55:36,800
used.

1290
00:55:36,800 --> 00:55:39,600
So the base of that can just go through all my code that was accessing

1291
00:55:39,600 --> 00:55:43,600
that directly before and basically not access it directly if I don't

1292
00:55:43,600 --> 00:55:45,500
think it should be accessed directly.

1293
00:55:46,000 --> 00:55:49,200
So I look at each individual one and this for example is getting it.

1294
00:55:49,200 --> 00:55:52,900
So I rather do get controller here, pass it, the input and the

1295
00:55:52,900 --> 00:55:56,000
controller index and have that return the value, right?

1296
00:55:57,100 --> 00:55:58,300
Same thing with these guys.

1297
00:55:58,300 --> 00:55:59,700
Those should be get controller.

1298
00:56:00,000 --> 00:56:02,400
Asset the thing and the index.

1299
00:56:02,400 --> 00:56:08,200
Like so same thing here, get controller input, pass the value back,

1300
00:56:08,200 --> 00:56:08,500
right?

1301
00:56:08,500 --> 00:56:11,900
And so that's just, you know, again, this is just basically checking

1302
00:56:11,900 --> 00:56:15,500
for bugs in making it easier for us to find them especially cuz we

1303
00:56:15,500 --> 00:56:16,200
have a bounds over, right?

1304
00:56:16,200 --> 00:56:17,500
We got to go find in a second here.

1305
00:56:18,600 --> 00:56:20,000
That's this is the sort of code.

1306
00:56:20,000 --> 00:56:23,300
We need to start putting in to make sure that we don't make stupid

1307
00:56:23,300 --> 00:56:23,800
mistakes.

1308
00:56:24,700 --> 00:56:26,000
Yeah, when we're doing stuff.

1309
00:56:26,300 --> 00:56:29,300
So, there we go, and we'll get controller here.

1310
00:56:29,900 --> 00:56:31,700
Put controller index.

1311
00:56:31,700 --> 00:56:32,000
There.

1312
00:56:32,000 --> 00:56:32,700
We are.

1313
00:56:33,500 --> 00:56:34,700
And let's take a look.

1314
00:56:34,800 --> 00:56:35,400
Oh, yeah.

1315
00:56:35,400 --> 00:56:37,600
Well, I already spotted the bounds over, right?

1316
00:56:37,800 --> 00:56:39,400
That's kind of obvious.

1317
00:56:39,900 --> 00:56:41,900
You can, you can see what's going on here.

1318
00:56:41,900 --> 00:56:43,200
That's that was just wrong.

1319
00:56:43,200 --> 00:56:45,300
Actually, what we needed fifth.

1320
00:56:45,300 --> 00:56:46,200
This computation was wrong.

1321
00:56:46,200 --> 00:56:46,800
You know, what?

1322
00:56:49,300 --> 00:56:52,800
I will explain it fully I shouldn't go fixing things before.

1323
00:56:52,800 --> 00:56:54,000
I actually say what I'm fixing.

1324
00:56:54,000 --> 00:56:57,300
I saw what the error was because I kind of knew where the air was

1325
00:56:57,300 --> 00:56:59,800
going to be and it was there so I did.

1326
00:57:01,100 --> 00:57:03,900
We'll push that for a second and this is actually I'd rather.

1327
00:57:03,900 --> 00:57:07,900
I'd rather have the nice demo of showing you that this bounds checking

1328
00:57:08,400 --> 00:57:09,500
was valuable.

1329
00:57:09,700 --> 00:57:13,700
So I shouldn't I was, I was saying I'm I'm spoiling my own punch line

1330
00:57:13,700 --> 00:57:15,200
who wants to spoil their own punch.

1331
00:57:15,200 --> 00:57:16,700
Like that's that's just silly.

1332
00:57:16,800 --> 00:57:17,000
Right?

1333
00:57:17,000 --> 00:57:19,200
We don't we don't wish to spoil our own punchlines.

1334
00:57:19,200 --> 00:57:19,800
We list it.

1335
00:57:19,800 --> 00:57:23,000
We wish to have our punchlines land at.

1336
00:57:23,000 --> 00:57:23,900
Exactly right time.

1337
00:57:23,900 --> 00:57:28,100
All right, so I think that was everybody what's going on here.

1338
00:57:28,100 --> 00:57:28,900
Hello emacs.

1339
00:57:28,900 --> 00:57:29,700
Come back there.

1340
00:57:30,000 --> 00:57:30,200
Go.

1341
00:57:31,100 --> 00:57:33,000
All right, so we'll go ahead and build that.

1342
00:57:33,300 --> 00:57:37,300
There we go, and we should bam right there.

1343
00:57:37,700 --> 00:57:39,100
That is exactly what we wanted.

1344
00:57:39,300 --> 00:57:43,300
You can see that our assertion has caught the error and the error is

1345
00:57:43,300 --> 00:57:45,800
that this controller access is out of bounds.

1346
00:57:46,500 --> 00:57:47,800
It is passing a controller index.

1347
00:57:47,800 --> 00:57:48,600
That's too high.

1348
00:57:49,100 --> 00:57:50,700
So why is it doing that?

1349
00:57:50,700 --> 00:57:53,900
Is because when I was fussing with that routine, I sort of slapped in

1350
00:57:53,900 --> 00:57:55,400
something that's just totally erroneous.

1351
00:57:55,900 --> 00:57:59,600
Basically what we want to do here is we want to make sure that we

1352
00:57:59,600 --> 00:57:59,900
don't

1353
00:58:00,000 --> 00:58:03,500
Go above the controller value that bit.

1354
00:58:03,500 --> 00:58:06,300
That is we don't want to sample controllers.

1355
00:58:06,300 --> 00:58:07,700
That would be outside our range.

1356
00:58:07,700 --> 00:58:10,500
So we are saying that will support One keyboard.

1357
00:58:10,500 --> 00:58:13,800
And for gamepads, that was sort of what we were saying the game might

1358
00:58:13,800 --> 00:58:14,600
allow for input.

1359
00:58:14,600 --> 00:58:15,800
So we have five input slots.

1360
00:58:16,100 --> 00:58:19,300
So we want to do is make sure that X User Max count never actually

1361
00:58:19,300 --> 00:58:20,800
goes above that.

1362
00:58:20,800 --> 00:58:23,500
And so what I wanted to do was clip that here.

1363
00:58:23,700 --> 00:58:27,500
So what we could say is the way I was saying as 1 plus Max user

1364
00:58:27,500 --> 00:58:29,800
account that will end up, making it equal 5.

1365
00:58:29,900 --> 00:58:30,300
5.

1366
00:58:30,300 --> 00:58:33,200
So this will actually be a loop of five which then adds one to the

1367
00:58:33,200 --> 00:58:36,300
controller index which allows it to write to the actually the sixth

1368
00:58:36,300 --> 00:58:36,900
entry.

1369
00:58:37,000 --> 00:58:37,900
That's no good.

1370
00:58:38,000 --> 00:58:39,000
That's just a bug.

1371
00:58:39,100 --> 00:58:43,200
What we actually wanted to do here is still only count up to four

1372
00:58:43,600 --> 00:58:46,000
because we're already doing the increment by 1.

1373
00:58:46,200 --> 00:58:47,600
So this needs to clip.

1374
00:58:47,600 --> 00:58:51,100
This needs to be X X User maxed out.

1375
00:58:51,200 --> 00:58:55,800
And we basically need to make sure that the max controller count is

1376
00:58:55,800 --> 00:58:57,400
actually equal to this value.

1377
00:58:57,400 --> 00:58:59,800
Minus 1, we need to be like less.

1378
00:59:00,000 --> 00:59:02,000
The array bounds - the keyboard sighs, right?

1379
00:59:02,000 --> 00:59:03,800
That's what we were actually trying to do.

1380
00:59:04,200 --> 00:59:05,700
So that was kind of just a silly.

1381
00:59:05,700 --> 00:59:07,200
I was just, I was just a mistake.

1382
00:59:07,500 --> 00:59:10,200
And so now we should be back to goodness and you'll notice we don't

1383
00:59:10,200 --> 00:59:11,100
get the assertion anymore.

1384
00:59:11,800 --> 00:59:12,900
So that was good.

1385
00:59:13,000 --> 00:59:16,600
And I think that basically finishes up.

1386
00:59:16,700 --> 00:59:21,700
I don't think we've got anything left to do really there.

1387
00:59:21,700 --> 00:59:25,500
That seems like we've got everything we have all of our input.

1388
00:59:25,500 --> 00:59:28,100
So, you know, one thing we could do in the last seconds here, but

1389
00:59:28,100 --> 00:59:29,500
grows the stream is about over.

1390
00:59:30,100 --> 00:59:36,900
Is we could go ahead and map escape to be back that back button and

1391
00:59:37,000 --> 00:59:39,600
and and and or the start button.

1392
00:59:39,600 --> 00:59:41,900
Let's say and back could be a space.

1393
00:59:41,900 --> 00:59:43,300
I don't know what we want.

1394
00:59:43,400 --> 00:59:45,900
We've got the shoulder buttons for Q and E.

1395
00:59:45,900 --> 00:59:51,200
And then I don't know, I guess back and start back back, could be

1396
00:59:51,200 --> 00:59:51,900
backspace.

1397
00:59:51,900 --> 00:59:54,600
I don't know what on the keyboard should be mapped to the back button.

1398
00:59:55,400 --> 00:59:56,500
Maybe the spacebar.

1399
00:59:56,500 --> 00:59:56,800
I don't know.

1400
00:59:56,800 --> 00:59:58,000
Let's I don't know.

1401
00:59:58,000 --> 00:59:59,800
We'll just first going to map these and we'll change.

1402
01:00:00,000 --> 01:00:02,500
And when, if we need to.

1403
01:00:02,600 --> 01:00:05,000
So, so there we go, just so we have those in there.

1404
01:00:05,700 --> 01:00:08,500
All right, everyone, we ended right on time.

1405
01:00:08,900 --> 01:00:11,400
And we did exactly what we want to do today, which is clean up our

1406
01:00:11,400 --> 01:00:11,700
input.

1407
01:00:11,700 --> 01:00:15,500
So, now we have keyboard input and stick input going through properly

1408
01:00:15,500 --> 01:00:16,600
handling, the dead zone.

1409
01:00:16,600 --> 01:00:19,300
You can use the d-pad, you can use the analog stick.

1410
01:00:19,900 --> 01:00:24,300
We even are tracking transitions for using things like Double Dash.

1411
01:00:24,300 --> 01:00:27,100
So I think I am pretty happy with that.

1412
01:00:27,100 --> 01:00:29,100
Now you may have some bugs in there because we haven't tested it very

1413
01:00:29,100 --> 01:00:29,800
thoroughly yet.

1414
01:00:30,000 --> 01:00:32,700
We will be doing that kind of in the game code will actually put the

1415
01:00:32,700 --> 01:00:35,200
test stuff in there because we're going to want our test stuff to be

1416
01:00:35,200 --> 01:00:37,500
shared across the different platforms, right?

1417
01:00:37,500 --> 01:00:40,700
So you can fire up your Mac port or whatever and take a look and make

1418
01:00:40,700 --> 01:00:42,000
sure the sticks working there as well.

1419
01:00:42,200 --> 01:00:44,600
So we'll take care of that in the platform code next week.

1420
01:00:45,400 --> 01:00:47,300
But for right now, I'm feeling pretty good about that.

1421
01:00:47,300 --> 01:00:48,000
That looks pretty good.

1422
01:00:48,000 --> 01:00:50,100
I don't have any reservations about what we've done there.

1423
01:00:50,300 --> 01:00:51,900
We eliminated a bunch of to dues.

1424
01:00:52,100 --> 01:00:54,700
We still got some in here that we should probably take a look at but

1425
01:00:54,700 --> 01:00:57,700
basically we're down to just a couple things tomorrow.

1426
01:00:57,700 --> 01:00:59,500
We'll focus on the frame timing.

1427
01:01:00,000 --> 01:01:02,400
And then we'll kind of go through here and clean up a lot.

1428
01:01:02,400 --> 01:01:05,400
Some of these other ones what folks on the see if we get frame timing

1429
01:01:05,400 --> 01:01:09,000
done tomorrow, if it might spill into Thursday and then Friday will

1430
01:01:09,000 --> 01:01:10,400
kind of be a general cleanup day.

1431
01:01:10,900 --> 01:01:15,000
And I think we might make it, we might finish up all of our win32

1432
01:01:15,000 --> 01:01:18,200
stuff and be in real good shape by the end of the week, which would be

1433
01:01:18,200 --> 01:01:19,200
pretty awesome.

1434
01:01:19,900 --> 01:01:23,300
Basically the 20-hour completely explained.

1435
01:01:23,700 --> 01:01:29,800
Win32 game, prototyping layer is is a pretty darn good thing.

1436
01:01:29,900 --> 01:01:31,800
Thing, I think we should all be pretty proud of ourselves.

1437
01:01:31,800 --> 01:01:33,100
If you're not proud of yourselves out there.

1438
01:01:33,100 --> 01:01:37,000
Well, you should be because I think we did a lot of stuff in a short

1439
01:01:37,000 --> 01:01:39,600
amount of time and we kept it very concise and the code is looking

1440
01:01:39,600 --> 01:01:40,200
pretty clean.

1441
01:01:41,000 --> 01:01:42,000
Again the important part.

1442
01:01:42,000 --> 01:01:44,900
Like I said is it doesn't matter how gross this winter to layer is

1443
01:01:44,900 --> 01:01:45,400
either.

1444
01:01:46,000 --> 01:01:48,100
We don't have to care about that because interfacing with Windows is

1445
01:01:48,100 --> 01:01:48,900
going to be a little gross.

1446
01:01:48,900 --> 01:01:50,800
All we want to make sure is that this is clean.

1447
01:01:50,800 --> 01:01:53,900
This is nice and clean so that our game can be nice and clean and it

1448
01:01:53,900 --> 01:01:56,000
is I think looking pretty nice so far.

1449
01:01:56,000 --> 01:01:57,600
It's such a clean boundary.

1450
01:01:57,900 --> 01:01:59,000
So I'm pretty excited about that.

1451
01:01:59,000 --> 01:01:59,400
Going forward.

1452
01:01:59,400 --> 01:01:59,800
I think it's gonna be

1453
01:02:00,000 --> 01:02:00,400
Be cool.

1454
01:02:01,000 --> 01:02:04,900
So with that said, we will now go to the questions.

1455
01:02:05,100 --> 01:02:08,500
Please make sure you put see me oratory in the question when you ask

1456
01:02:08,500 --> 01:02:08,600
it.

1457
01:02:08,600 --> 01:02:10,400
So I will see it on the little filter.

1458
01:02:12,200 --> 01:02:12,800
and,

1459
01:02:14,600 --> 01:02:19,000
Also, if you could keep the questions to code, we did today or in some

1460
01:02:19,000 --> 01:02:20,500
previous day, not about code.

1461
01:02:20,500 --> 01:02:22,900
We're going to do in the future because we will be doing the code in

1462
01:02:22,900 --> 01:02:23,400
the future.

1463
01:02:23,400 --> 01:02:25,900
And I will probably answer the questions in the course of actually

1464
01:02:26,300 --> 01:02:28,200
showing you how to do that code.

1465
01:02:28,200 --> 01:02:29,700
So with that, let's go to the questions.

1466
01:02:29,700 --> 01:02:32,300
Let's take a look at what's going on.

1467
01:02:33,000 --> 01:02:34,100
Let's see.

1468
01:02:36,600 --> 01:02:41,300
So it looks like maybe some people caught a bug or typo, they were

1469
01:02:41,300 --> 01:02:46,000
saying maybe there was all move left's, what's going on here.

1470
01:02:48,900 --> 01:02:52,100
Trying to read back through the stream, check the array in the

1471
01:02:52,100 --> 01:02:52,500
buttons.

1472
01:02:52,500 --> 01:02:55,500
Union might want 12 now that you've added start and back.

1473
01:02:55,600 --> 01:02:56,100
Oh, right.

1474
01:02:56,100 --> 01:02:56,300
Yes.

1475
01:02:56,300 --> 01:02:56,900
Thank you.

1476
01:02:57,000 --> 01:02:59,400
That is a good point because we want to be able to handle all these.

1477
01:02:59,400 --> 01:02:59,900
I wish there was

1478
01:03:00,000 --> 01:03:01,800
Away, so okay.

1479
01:03:01,800 --> 01:03:03,300
Let's think about this for a second.

1480
01:03:03,400 --> 01:03:04,400
It'd be interesting to know.

1481
01:03:04,400 --> 01:03:05,400
Is there a good way?

1482
01:03:05,400 --> 01:03:08,800
We can make sure that we could catch this bug like when we add stuff

1483
01:03:08,800 --> 01:03:11,900
in here and we want this array to have all the things, right?

1484
01:03:12,200 --> 01:03:15,600
And so what we want to do, there is basically we'd want to do

1485
01:03:15,600 --> 01:03:17,800
something like when we come in at.

1486
01:03:18,300 --> 01:03:20,200
Well, this exercise should be cross-platform.

1487
01:03:20,600 --> 01:03:24,100
So when we in here, we want to do something where we can sort of

1488
01:03:24,100 --> 01:03:29,900
assert that, for example, I guess the address of the last button we

1489
01:03:30,000 --> 01:03:31,100
We know about, right?

1490
01:03:31,100 --> 01:03:35,900
So button, start equals the ad equals the length of this kind of

1491
01:03:35,900 --> 01:03:36,300
thing.

1492
01:03:36,700 --> 01:03:37,900
I don't know if that makes sense.

1493
01:03:38,100 --> 01:03:44,100
But basically like we might want to say, let's assert that say input.

1494
01:03:45,100 --> 01:03:58,400
Let's see, imput controllers, 0 start, that is equal to well, I guess.

1495
01:03:58,400 --> 01:03:59,100
How can I do that?

1496
01:03:59,100 --> 01:03:59,900
I could

1497
01:04:00,000 --> 01:04:00,900
Racked.

1498
01:04:01,400 --> 01:04:03,000
Yeah, so so I okay.

1499
01:04:03,000 --> 01:04:07,200
So I guess what I would say is, let's say that start the address of

1500
01:04:07,200 --> 01:04:07,900
start.

1501
01:04:09,700 --> 01:04:14,400
This is going to be pretty janky, the address of start plus 1.

1502
01:04:14,600 --> 01:04:17,200
So I'm going, I'm going forwards a little bit there.

1503
01:04:17,400 --> 01:04:22,200
The address the address of start plus 1 or well, like I said, the

1504
01:04:22,200 --> 01:04:26,800
address of start this way, take the address of the start button,

1505
01:04:27,000 --> 01:04:31,700
subtract it from the address of the move button like this.

1506
01:04:31,700 --> 01:04:34,900
Well, I could even just do button zero, right?

1507
01:04:35,800 --> 01:04:43,200
That address of button 0 that should equal the array count of the

1508
01:04:43,200 --> 01:04:44,800
buttons like that.

1509
01:04:46,600 --> 01:04:47,300
So,

1510
01:04:50,200 --> 01:04:55,500
Right now, it's going to be off by one because it's actually should be

1511
01:04:55,500 --> 01:04:56,800
one past that.

1512
01:04:57,200 --> 01:04:58,900
So it should be the array count to the buttons.

1513
01:04:58,900 --> 01:05:02,500
I believe - one that's, that's the actual check.

1514
01:05:02,900 --> 01:05:07,000
I think, game controller input does not have a right Sergeant needed.

1515
01:05:07,400 --> 01:05:09,000
That is actual structure.

1516
01:05:09,500 --> 01:05:12,100
So, based on trying to do is do some point arithmetic here.

1517
01:05:12,700 --> 01:05:13,800
Now, let's see if that works.

1518
01:05:13,900 --> 01:05:14,300
Yes.

1519
01:05:14,300 --> 01:05:15,500
Good caught it.

1520
01:05:15,500 --> 01:05:15,700
Of course.

1521
01:05:15,700 --> 01:05:18,600
I'm not sure if it's actually still correct, but that caught it, and

1522
01:05:18,600 --> 01:05:19,500
then it should be 12.

1523
01:05:19,500 --> 01:05:19,800
Now.

1524
01:05:20,000 --> 01:05:22,400
See if that works properly off we go.

1525
01:05:22,500 --> 01:05:22,800
Yeah.

1526
01:05:23,100 --> 01:05:26,000
So basically what I did here was I just wrote something where I said?

1527
01:05:26,000 --> 01:05:29,300
All right, let's take where the start button is in the layout of the

1528
01:05:29,300 --> 01:05:29,900
structure.

1529
01:05:30,400 --> 01:05:33,500
Let's subtract the base of the button, array from it, which is the the

1530
01:05:33,500 --> 01:05:34,700
start of this whole thing.

1531
01:05:35,000 --> 01:05:35,500
Right?

1532
01:05:35,900 --> 01:05:40,800
And I want to make sure that the number that I get back is equal to

1533
01:05:40,800 --> 01:05:41,600
11, right?

1534
01:05:41,600 --> 01:05:45,600
The number I want it to equal the the array count of these minus 1.

1535
01:05:45,600 --> 01:05:49,500
Because again, we're using the pointer to start is going to point to

1536
01:05:49,600 --> 01:05:49,800
just

1537
01:05:49,900 --> 01:05:52,100
just before the start button structure, right?

1538
01:05:52,100 --> 01:05:53,300
It's pointing to the start of it.

1539
01:05:53,300 --> 01:05:56,000
So if I subtract it from the base, I'm going to get one less than the

1540
01:05:56,000 --> 01:05:58,100
total count that there are.

1541
01:05:59,100 --> 01:05:59,900
And so I'm just

1542
01:06:00,000 --> 01:06:01,100
Make sure that matches.

1543
01:06:01,200 --> 01:06:03,900
Now, this isn't perfect because we can still do this.

1544
01:06:06,600 --> 01:06:07,800
And this won't catch it.

1545
01:06:08,000 --> 01:06:08,500
Right?

1546
01:06:09,000 --> 01:06:09,700
That makes sense.

1547
01:06:11,200 --> 01:06:15,700
But it at least checks that the last button that we know about in here

1548
01:06:16,000 --> 01:06:17,400
is is correct.

1549
01:06:17,400 --> 01:06:19,600
Now we could do something else.

1550
01:06:20,200 --> 01:06:22,900
We could use a get button function that checked.

1551
01:06:22,900 --> 01:06:24,600
I don't know if I want to go that route.

1552
01:06:24,800 --> 01:06:27,100
I'm also not sure if there's any way.

1553
01:06:27,200 --> 01:06:29,000
Oh, you know, duh.

1554
01:06:29,500 --> 01:06:30,900
I've got one way we could do it.

1555
01:06:31,200 --> 01:06:32,700
There's a pretty easy way we can do it.

1556
01:06:32,700 --> 01:06:35,500
In fact, we could just do this.

1557
01:06:35,600 --> 01:06:35,800
I

1558
01:06:39,100 --> 01:06:42,500
Game controller input buttons, duh.

1559
01:06:42,600 --> 01:06:43,600
Why not do it this way?

1560
01:06:43,600 --> 01:06:44,400
Can I do that?

1561
01:06:44,600 --> 01:06:45,700
I don't know if I can do that.

1562
01:06:45,800 --> 01:06:46,200
Yeah.

1563
01:06:46,200 --> 01:06:48,400
I don't know.

1564
01:06:48,400 --> 01:06:49,600
I guess it has to be anonymous.

1565
01:06:49,900 --> 01:06:51,000
It's not going to let me name it.

1566
01:06:51,000 --> 01:06:51,500
Is it?

1567
01:06:54,100 --> 01:06:55,000
That's too bad.

1568
01:06:55,000 --> 01:06:58,100
I was hoping it would let me name it because if it let me name it then

1569
01:06:58,100 --> 01:07:02,200
we could just say the size of this thing, but I can't do that at the

1570
01:07:02,200 --> 01:07:02,900
moment.

1571
01:07:02,900 --> 01:07:03,800
Unfortunately.

1572
01:07:04,100 --> 01:07:06,900
And still keep it Anonymous, which is what we kind of wanted to do.

1573
01:07:07,100 --> 01:07:08,700
Now we could go and make it non and on.

1574
01:07:08,900 --> 01:07:12,700
As we could make it be a thing that actually has a name, right.

1575
01:07:12,700 --> 01:07:14,200
And we access off the name.

1576
01:07:14,600 --> 01:07:18,600
I don't know if we really want to do that seems like a little

1577
01:07:18,600 --> 01:07:21,300
inconvenient, but maybe it's better to keep the bugs.

1578
01:07:22,100 --> 01:07:25,500
You know, if I basically said this then we could just do the assertion

1579
01:07:25,500 --> 01:07:29,600
that this structure was the same size as this array, which is kind of

1580
01:07:29,600 --> 01:07:30,800
what we would like to do.

1581
01:07:31,900 --> 01:07:32,900
Hmm.

1582
01:07:33,900 --> 01:07:34,900
Hmm.

1583
01:07:36,000 --> 01:07:41,200
Well, one of the thing we could do is we could do something like this.

1584
01:07:42,200 --> 01:07:43,700
I'm not happy with any of these.

1585
01:07:45,400 --> 01:07:45,800
Really?

1586
01:07:50,100 --> 01:07:51,500
We could insert a fake button.

1587
01:07:51,500 --> 01:07:52,600
It doesn't mean anything at all.

1588
01:07:53,000 --> 01:07:58,700
And then we could just say well it's that button is got to be equal to

1589
01:07:58,700 --> 01:08:00,500
that the array size, right?

1590
01:08:00,500 --> 01:08:01,800
So it's like a Terminator button.

1591
01:08:01,800 --> 01:08:06,200
And now if we go in and add a button as long as we don't add it below

1592
01:08:06,200 --> 01:08:07,800
the Terminator, right?

1593
01:08:07,800 --> 01:08:12,400
If we always add our buttons up here, then that assert will fire

1594
01:08:12,400 --> 01:08:13,300
properly for us.

1595
01:08:13,300 --> 01:08:13,500
Right.

1596
01:08:13,800 --> 01:08:17,200
Bam, and it's, and it caught the error, so maybe that's good for now.

1597
01:08:17,200 --> 01:08:18,300
I don't have to think about that.

1598
01:08:18,300 --> 01:08:20,100
Maybe we do want to just name it.

1599
01:08:20,200 --> 01:08:23,500
And deal with the name so we can do it more cleanly, so I'll do note,

1600
01:08:23,500 --> 01:08:29,399
Casey all buttons, must be added above this line for now and that's

1601
01:08:29,800 --> 01:08:32,600
that's something so we'll leave it like that for now.

1602
01:08:32,600 --> 01:08:35,700
But thank you for catching that error because that was a good one.

1603
01:08:35,700 --> 01:08:36,500
That would have been annoying.

1604
01:08:39,899 --> 01:08:41,399
Let's see.

1605
01:08:46,500 --> 01:08:47,600
There's a lot of questions.

1606
01:08:47,700 --> 01:08:48,700
We're not going to get to all these.

1607
01:08:48,700 --> 01:08:49,800
There's too many questions.

1608
01:08:55,200 --> 01:08:59,800
Is that some copypasta or is it really supposed to be?

1609
01:09:00,100 --> 01:09:01,500
Move left.

1610
01:09:02,399 --> 01:09:04,300
I don't know.

1611
01:09:04,500 --> 01:09:09,399
So is there somewhere that it's actually actually wrong where we're

1612
01:09:09,399 --> 01:09:13,500
doing move left multiple times and shouldn't be?

1613
01:09:15,000 --> 01:09:16,500
Yes, that is copy pasta.

1614
01:09:16,600 --> 01:09:17,899
That is totally copypasta.

1615
01:09:18,500 --> 01:09:19,399
Thank you for that.

1616
01:09:19,600 --> 01:09:26,800
So basically I just forgot missed these here, d-pad.

1617
01:09:26,800 --> 01:09:28,100
Oh, we didn't test the d-pad yet, right?

1618
01:09:28,100 --> 01:09:28,899
Because we ran out of time.

1619
01:09:28,899 --> 01:09:31,500
So we would have found this and so as soon as we tested the d-pad, I

1620
01:09:31,500 --> 01:09:33,600
was like how can see that, but that's why we have done that yet.

1621
01:09:34,000 --> 01:09:39,399
So basically, I just need to go ahead and make these be the actual

1622
01:09:39,399 --> 01:09:40,899
values that they should be.

1623
01:09:41,399 --> 01:09:42,300
Let's see here.

1624
01:09:42,700 --> 01:09:44,700
Are we said down was - that's what the

1625
01:09:44,899 --> 01:09:50,000
Invitation said, so down Loops down its - get out of my way.

1626
01:09:50,000 --> 01:09:52,700
So I don't hit my head unintended.

1627
01:09:53,000 --> 01:09:54,400
So yeah, that was just copy pasta.

1628
01:09:54,400 --> 01:09:57,100
That was supposed to be that and I can test that now to can't.

1629
01:09:57,100 --> 01:09:58,100
I can test the d-pad.

1630
01:09:58,800 --> 01:09:59,300
There we go.

1631
01:10:03,100 --> 01:10:04,700
Yeah, yeah.

1632
01:10:06,300 --> 01:10:07,100
Should be right.

1633
01:10:07,300 --> 01:10:07,700
Yeah.

1634
01:10:08,000 --> 01:10:08,400
Okay.

1635
01:10:09,400 --> 01:10:10,600
Well, oh, you know what?

1636
01:10:10,600 --> 01:10:12,700
No, I take it back.

1637
01:10:12,900 --> 01:10:16,200
So the reason we didn't catch that is we did test the d-pad.

1638
01:10:16,200 --> 01:10:18,300
The reason we can test that is that's just for the button.

1639
01:10:18,300 --> 01:10:20,100
We don't have anything that test those values.

1640
01:10:20,100 --> 01:10:22,400
That's just for the thing for checking like Dash and that sort of

1641
01:10:22,400 --> 01:10:22,800
stuff.

1642
01:10:23,100 --> 01:10:28,000
So, yeah, unfortunately that yeah, that unfortunately is not actually

1643
01:10:28,000 --> 01:10:31,200
going to that's not going to help us.

1644
01:10:31,200 --> 01:10:32,700
So we're going to actually have to test that later.

1645
01:10:32,900 --> 01:10:35,000
Don't know if that's working properly left, test that later.

1646
01:10:35,000 --> 01:10:37,700
You know, what else we should do while we're on the subject of things

1647
01:10:37,700 --> 01:10:38,500
that could happen.

1648
01:10:39,300 --> 01:10:42,200
Another thing we should do is maybe fake the stick average.

1649
01:10:42,200 --> 01:10:43,200
I don't know you.

1650
01:10:43,200 --> 01:10:45,200
We could now, it's not, it's not do that.

1651
01:10:45,200 --> 01:10:45,800
It's done.

1652
01:10:50,600 --> 01:10:51,400
Well, okay.

1653
01:10:51,500 --> 01:10:53,000
So let me just, let me tell you what I'm thinking here.

1654
01:10:53,600 --> 01:10:57,700
So, when we use the d-pad, we should probably change to say that the

1655
01:10:57,700 --> 01:10:59,100
thing is not analog anymore.

1656
01:10:59,300 --> 01:10:59,900
Right?

1657
01:11:01,400 --> 01:11:01,900
I don't know.

1658
01:11:02,900 --> 01:11:04,400
Don't you think like that way?

1659
01:11:04,400 --> 01:11:07,700
It knows like if we see input from the d-pad, the game should probably

1660
01:11:07,700 --> 01:11:10,300
switch to using the same kind of control scheme as it's using on the

1661
01:11:10,300 --> 01:11:13,400
keyboard where it would do like smoothing and stuff for you.

1662
01:11:13,900 --> 01:11:16,100
So I feel like maybe we want to set this to false.

1663
01:11:16,100 --> 01:11:19,400
If we do any of this nonsense, I think I'm gonna leave that in.

1664
01:11:22,000 --> 01:11:22,800
All right.

1665
01:11:23,000 --> 01:11:24,000
Let's see.

1666
01:11:25,100 --> 01:11:27,100
Could it be good to apply some integration on the digital keys?

1667
01:11:27,100 --> 01:11:29,900
So we don't just set the value to binary negative 11.

1668
01:11:30,900 --> 01:11:35,600
Um, that's a good question.

1669
01:11:35,600 --> 01:11:39,400
I don't think so, because the way I want this to work is, I basically

1670
01:11:39,400 --> 01:11:44,500
want the, I'm only setting the stick average so that it sets the move

1671
01:11:44,500 --> 01:11:45,300
left move, right.

1672
01:11:45,300 --> 01:11:49,800
Move down, move up buttons, and then I'm setting the ins analog and

1673
01:11:49,800 --> 01:11:50,300
I'm going to let the

1674
01:11:50,400 --> 01:11:53,000
The game, use the is analog flag to say.

1675
01:11:53,000 --> 01:11:54,300
Oh, I'm going to start using buttons.

1676
01:11:54,300 --> 01:11:57,600
Now, instead of the analog stick for this controller until it goes

1677
01:11:57,600 --> 01:11:59,900
back to using the analog stick and I'm

1678
01:12:00,000 --> 01:12:04,200
Hoping that that will kind of be the thing that works best there.

1679
01:12:04,400 --> 01:12:09,200
Now that it's a little bit tricky because it's like well, you know,

1680
01:12:11,400 --> 01:12:15,000
We probably also don't want to set is analog to True.

1681
01:12:15,000 --> 01:12:19,300
Unless the stick is actually being used something like this.

1682
01:12:19,800 --> 01:12:26,900
So if the stick average is not equal to 0 or the, the, if the stick

1683
01:12:26,900 --> 01:12:29,500
average in either direction, right?

1684
01:12:30,100 --> 01:12:30,500
Excuse me.

1685
01:12:31,800 --> 01:12:34,400
Is not equal to 0 something like that.

1686
01:12:34,500 --> 01:12:36,200
That is more like, okay.

1687
01:12:36,300 --> 01:12:38,800
Now we've got, you know now we've got something where

1688
01:12:41,100 --> 01:12:43,700
The game really does know whether using the analog stick or the d-pad

1689
01:12:43,700 --> 01:12:45,400
at any given time and it should do.

1690
01:12:45,600 --> 01:12:48,300
So that integration that you're talking about to smooth out using the

1691
01:12:48,300 --> 01:12:48,700
digital.

1692
01:12:48,700 --> 01:12:50,800
That's that's will be done by the game.

1693
01:12:51,900 --> 01:12:53,600
Because could have to do that for the keyboard as well.

1694
01:12:53,900 --> 01:12:55,300
So we want to make that Unified.

1695
01:12:57,500 --> 01:13:01,100
Can you talk about the dead zone being round versus rectangular and at

1696
01:13:01,100 --> 01:13:03,600
Hardware usb hid and xinput?

1697
01:13:06,000 --> 01:13:09,500
Oh, you're saying who I'm not sure, what you mean by at Hardware usb,

1698
01:13:09,500 --> 01:13:12,200
hid, and xinput API layers.

1699
01:13:12,600 --> 01:13:18,000
So, as far as I know, the dead zone is literally something that's only

1700
01:13:18,000 --> 01:13:19,000
software side.

1701
01:13:19,100 --> 01:13:22,600
Like the hardware is reporting, just like it's potentiometer values or

1702
01:13:22,600 --> 01:13:23,000
whatever.

1703
01:13:23,000 --> 01:13:25,200
It's get what, I don't know what they do use nowadays, but whatever

1704
01:13:25,200 --> 01:13:27,200
they're reading their is reporting that

1705
01:13:27,300 --> 01:13:29,100
Ethical level like turned into something.

1706
01:13:30,000 --> 01:13:32,500
And so when you get back the short, it's just a light quanta.

1707
01:13:32,500 --> 01:13:34,800
It's some kind of quantization of the electrical level.

1708
01:13:35,300 --> 01:13:39,600
And so as far as I know on USB it, that's just on the US, on the bus.

1709
01:13:40,200 --> 01:13:41,500
It's just getting passed.

1710
01:13:41,700 --> 01:13:43,100
As part of the hid page.

1711
01:13:43,100 --> 01:13:44,400
Like, here's an x value.

1712
01:13:44,400 --> 01:13:47,000
No, here's a, here's a linear map value.

1713
01:13:47,200 --> 01:13:48,000
And here, it is.

1714
01:13:48,300 --> 01:13:48,900
As far as I know.

1715
01:13:48,900 --> 01:13:51,600
I've never actually looked at what they hid code Pages look like for

1716
01:13:51,600 --> 01:13:55,200
these, but I think it's basically just pass that value through xinput,

1717
01:13:55,200 --> 01:13:55,400
hands.

1718
01:13:55,400 --> 01:13:57,100
It to us and then it's up to us.

1719
01:13:57,300 --> 01:14:00,300
Us to basically do that dead zone processing and xinput as pound to

1720
01:14:00,300 --> 01:14:01,300
find what it says.

1721
01:14:01,300 --> 01:14:04,200
The spec is for The Dead Zone on the controller, but I think that's

1722
01:14:04,200 --> 01:14:04,400
it.

1723
01:14:04,400 --> 01:14:07,600
I don't think there's anything else to it as for round versus

1724
01:14:07,600 --> 01:14:08,500
rectangular.

1725
01:14:09,600 --> 01:14:10,900
I know nothing about that.

1726
01:14:11,600 --> 01:14:16,900
I know that they have defined it to be rectangular and I guess that

1727
01:14:16,900 --> 01:14:18,300
pretty much makes sense.

1728
01:14:18,300 --> 01:14:19,300
If you think about it.

1729
01:14:19,700 --> 01:14:22,700
I don't know the inner construction of this thing, but if you imagine

1730
01:14:22,700 --> 01:14:26,200
that there's essentially two potentiometers or to whatever they use,

1731
01:14:26,200 --> 01:14:27,000
like I said to read it.

1732
01:14:27,300 --> 01:14:31,600
For the horizontal, one for the vertical, then they're both gonna have

1733
01:14:31,700 --> 01:14:33,700
their own error.

1734
01:14:33,900 --> 01:14:36,400
And that error is not going to be circular, right?

1735
01:14:36,400 --> 01:14:39,400
It's not going to be based on how far you've gone to the left

1736
01:14:39,400 --> 01:14:42,400
necessarily, whether the Y is going to be more or less error.

1737
01:14:42,400 --> 01:14:45,300
If they're read independently, the error could very well, be

1738
01:14:45,300 --> 01:14:46,100
rectangular.

1739
01:14:46,200 --> 01:14:49,400
And so if the error is rectangular, then you don't have much of a

1740
01:14:49,400 --> 01:14:52,100
choice but to clip the error rectangular lie.

1741
01:14:52,400 --> 01:14:57,100
Now, what we can do in our own code is we can go,

1742
01:14:57,200 --> 01:14:59,800
Go and try to do some better Dead Zone processing.

1743
01:14:59,800 --> 01:14:59,900
If

1744
01:15:00,000 --> 01:15:01,200
Find it to be a problem.

1745
01:15:01,700 --> 01:15:04,100
This again is the first pass on the input stuff.

1746
01:15:04,100 --> 01:15:09,300
And so we'll have to go look and see basically what we think once

1747
01:15:09,300 --> 01:15:12,600
we're playing it, whether we think it's working well enough for our

1748
01:15:12,600 --> 01:15:13,200
game or not.

1749
01:15:13,200 --> 01:15:18,300
And if it's not we may have to do more fancier stuff, you know, like

1750
01:15:18,300 --> 01:15:21,600
base like like gradual like changing how this works in a sort of

1751
01:15:21,600 --> 01:15:22,500
gradual sense.

1752
01:15:23,100 --> 01:15:25,800
So that basically when you come out of the Dead Zone, that's at zero

1753
01:15:25,800 --> 01:15:28,200
and it eases in instead of right now, when you come to the Zen Zone,

1754
01:15:28,200 --> 01:15:29,600
you're going to be at 0.2.

1755
01:15:30,000 --> 01:15:30,500
Right?

1756
01:15:30,500 --> 01:15:31,200
Because we know the dead.

1757
01:15:31,200 --> 01:15:32,100
That's where the dead zone is.

1758
01:15:32,100 --> 01:15:34,400
So you're going to be the lowest value.

1759
01:15:34,400 --> 01:15:36,600
You can report for movement is 0.2.

1760
01:15:37,100 --> 01:15:38,200
So maybe we don't want that.

1761
01:15:38,200 --> 01:15:41,500
Maybe we want that it to be clipped down and to do the dead zone

1762
01:15:41,500 --> 01:15:42,700
processing in a different way, right?

1763
01:15:42,700 --> 01:15:43,900
Like you could imagine.

1764
01:15:44,800 --> 01:15:47,000
I don't know if we want to do this, but you can imagine.

1765
01:15:50,500 --> 01:15:51,300
Maybe we should do this.

1766
01:15:51,300 --> 01:15:51,500
I don't know.

1767
01:15:51,500 --> 01:15:52,300
I mean, I don't know.

1768
01:15:52,300 --> 01:15:53,200
What do you guys think?

1769
01:15:53,800 --> 01:15:57,500
What I'm trying to say here, is what we could do is it might be better

1770
01:15:57,500 --> 01:15:58,300
to have that value.

1771
01:15:58,300 --> 01:16:02,700
Go smoothly from 0 to 1 instead of jumping up to 0.2., Right?

1772
01:16:03,000 --> 01:16:05,300
So I guess what I'm proposing is, you know, one thing we could do to

1773
01:16:05,300 --> 01:16:06,600
make the dead zone processing work.

1774
01:16:06,600 --> 01:16:09,800
A little better is we could basically say well, alright, we

1775
01:16:09,800 --> 01:16:13,100
essentially know that - DeadZone threshold is not counted.

1776
01:16:13,200 --> 01:16:15,200
So we need to recenter our value.

1777
01:16:15,600 --> 01:16:16,700
So that basically

1778
01:16:18,600 --> 01:16:22,700
The Dead Zone threshold is a subtracted away from the divisor, right?

1779
01:16:23,400 --> 01:16:28,200
And the value itself, which is of course - has Dead Zone added to it,

1780
01:16:28,200 --> 01:16:31,600
to bring it up, 20 in the appropriate scenario, right?

1781
01:16:31,600 --> 01:16:32,900
This is, this is what I'm talking about.

1782
01:16:32,900 --> 01:16:33,800
Does this make sense?

1783
01:16:34,000 --> 01:16:36,400
I don't know if any, if this makes any sense to anyone, I'm just sort

1784
01:16:36,400 --> 01:16:40,000
of proposing this as a thing that we could do.

1785
01:16:40,100 --> 01:16:40,600
Right?

1786
01:16:41,200 --> 01:16:42,000
Does this make sense.

1787
01:16:42,200 --> 01:16:45,200
So basically what I'm saying here is normally what would happen and I

1788
01:16:45,200 --> 01:16:48,200
can go to the diagram for this just to make it a little clearer.

1789
01:16:48,700 --> 01:16:51,100
Go to the diagram because there is actually only one.

1790
01:16:51,100 --> 01:16:53,600
We've actually just always had the same version of paint up, and I

1791
01:16:53,600 --> 01:16:54,500
just clear it every time.

1792
01:16:54,500 --> 01:16:56,100
So literally, there is the diagram.

1793
01:16:56,600 --> 01:16:59,100
Basically, what I was saying is, you know, we've got this scenario

1794
01:16:59,400 --> 01:17:02,800
where basically there's a dead zone here and we've got stick values

1795
01:17:02,900 --> 01:17:05,900
and those stick values, start being, you know, whatever they are.

1796
01:17:06,000 --> 01:17:06,600
Right.

1797
01:17:07,000 --> 01:17:10,200
This sort of thing and we're basically saying that anything in here x

1798
01:17:10,200 --> 01:17:12,000
input has told us is noisy.

1799
01:17:12,200 --> 01:17:12,700
Right?

1800
01:17:12,700 --> 01:17:16,300
We can't, we can't count sick values in here as actually being valid

1801
01:17:16,300 --> 01:17:18,200
movement that the player was trying to do because the

1802
01:17:18,400 --> 01:17:20,500
Just random noise on the line.

1803
01:17:20,800 --> 01:17:25,800
So what happens is, if we look at the stick position, right inside the

1804
01:17:25,800 --> 01:17:29,100
dead zone as it moves outside.

1805
01:17:29,100 --> 01:17:30,700
Let's say he's moving the stick to the, right.

1806
01:17:30,700 --> 01:17:32,700
So he moves in this direction, right?

1807
01:17:32,800 --> 01:17:34,700
What are each of these values, right?

1808
01:17:34,700 --> 01:17:35,800
Here's the dead zone value.

1809
01:17:35,800 --> 01:17:37,500
And I guess we said that was 25%.

1810
01:17:37,500 --> 01:17:38,600
So here's maximum.

1811
01:17:38,600 --> 01:17:39,200
Right.

1812
01:17:39,700 --> 01:17:44,100
What we might want to do if we map it just directly so that this right

1813
01:17:44,100 --> 01:17:48,100
here is zero and this right here is 1.0.

1814
01:17:48,300 --> 01:17:49,000
Got my head in the way.

1815
01:17:49,000 --> 01:17:49,800
They're a little bit down.

1816
01:17:49,800 --> 01:17:50,700
I let's try this again.

1817
01:17:52,400 --> 01:17:53,900
Let's try it again without the Casey head.

1818
01:17:57,600 --> 01:17:58,000
Right.

1819
01:17:58,000 --> 01:17:59,900
So if I'm looking at the x-rays,

1820
01:18:00,000 --> 01:18:00,400
Access.

1821
01:18:00,400 --> 01:18:00,600
Right?

1822
01:18:00,600 --> 01:18:06,800
If I'm looking at this span here, I could map this end to 0 and this

1823
01:18:06,800 --> 01:18:08,500
end to one, right?

1824
01:18:08,600 --> 01:18:11,900
But what would happen there is as the user moves, the stick like this,

1825
01:18:12,500 --> 01:18:15,400
when he crosses the boundary, when that boundary when the when the

1826
01:18:15,400 --> 01:18:19,900
player crosses the boundary, it's going to jump right from being 0,

1827
01:18:19,900 --> 01:18:21,200
which is what we're reporting for the whole time.

1828
01:18:21,200 --> 01:18:24,600
It was in The Dead Zone to being essentially point to or somewhere

1829
01:18:24,600 --> 01:18:25,300
around there, right?

1830
01:18:25,300 --> 01:18:27,200
.25, something like that.

1831
01:18:27,400 --> 01:18:27,800
Right?

1832
01:18:27,800 --> 01:18:29,400
It's gonna jump right to point two five.

1833
01:18:29,400 --> 01:18:29,900
So the only

1834
01:18:30,000 --> 01:18:34,300
only values that the game will ever see our between 0.25 and one,

1835
01:18:34,700 --> 01:18:36,100
which is kind of confusing to the game.

1836
01:18:36,100 --> 01:18:38,500
If you think about it, and basically, then the whole game would have

1837
01:18:38,500 --> 01:18:42,200
to be tuned, assuming that the lowest value is 0.25 on the stick.

1838
01:18:42,300 --> 01:18:43,500
It doesn't make a whole lot of sense.

1839
01:18:43,900 --> 01:18:46,900
So what I was saying is well, let's subtract The Dead Zone variable,

1840
01:18:46,900 --> 01:18:49,500
the very The Dead Zone area away and just treat.

1841
01:18:49,500 --> 01:18:52,400
Just this range here as 0 to 1, right?

1842
01:18:52,900 --> 01:18:54,400
That's what I was trying to do.

1843
01:18:54,800 --> 01:18:56,000
I don't know if that makes sense.

1844
01:18:56,600 --> 01:18:57,400
Let's see here.

1845
01:18:57,700 --> 01:18:58,400
Let's see.

1846
01:19:00,600 --> 01:19:01,900
Hopefully, that makes some sense.

1847
01:19:07,200 --> 01:19:07,900
All right.

1848
01:19:08,900 --> 01:19:13,400
So so yeah, I don't know if that makes sense or not, or if it's if

1849
01:19:13,400 --> 01:19:15,100
it's not an appropriate way to do it.

1850
01:19:15,300 --> 01:19:19,500
Someone was saying they actually do have a round Dead Zone to find.

1851
01:19:19,500 --> 01:19:20,800
Let's see if that's actually true.

1852
01:19:22,600 --> 01:19:23,600
Let's see here.

1853
01:19:24,200 --> 01:19:26,800
If it's actually around Dead Zone, we can do this even better.

1854
01:19:27,500 --> 01:19:28,100
Let's see.

1855
01:19:28,500 --> 01:19:29,000
Wound.

1856
01:19:35,100 --> 01:19:37,800
Can be used as pausing as to filter something in it because they don't

1857
01:19:37,800 --> 01:19:39,300
actually say here.

1858
01:19:40,700 --> 01:19:44,300
They don't actually say well, okay, we can do some extra reading.

1859
01:19:44,300 --> 01:19:45,200
We don't have a whole lot of time.

1860
01:19:45,200 --> 01:19:45,900
Left in the Stream.

1861
01:19:46,000 --> 01:19:49,200
We can do some extra reading, to see whether it's around dead zone, or

1862
01:19:49,200 --> 01:19:50,600
a non round Dead Zone.

1863
01:19:50,600 --> 01:19:53,200
It's been a long time since I've read any xinput documentation.

1864
01:19:53,400 --> 01:19:57,300
So let's just do both and then we'll just use, whichever one we find

1865
01:19:57,300 --> 01:19:58,100
to be correct.

1866
01:19:58,100 --> 01:20:00,300
So let's say this is a round Dead Zone value.

1867
01:20:00,500 --> 01:20:04,000
If it's around DeadZone value, then that basically means the total

1868
01:20:04,000 --> 01:20:08,300
length of the motion on the stick is subject to that dead zone, right?

1869
01:20:08,300 --> 01:20:09,300
I don't know if that makes sense.

1870
01:20:10,200 --> 01:20:10,400
So,

1871
01:20:10,500 --> 01:20:13,500
Basically, what we would have to do is we have to do the dead zone

1872
01:20:13,500 --> 01:20:16,200
processing in up as a pair, right?

1873
01:20:16,200 --> 01:20:20,800
We basically have to say we're going to do a dead zone processing on

1874
01:20:20,800 --> 01:20:22,300
the actual Vector value.

1875
01:20:22,700 --> 01:20:24,800
So that would be something here.

1876
01:20:24,800 --> 01:20:29,400
That would have to look like well, yeah that's going to be Vector.

1877
01:20:29,500 --> 01:20:33,200
You know what that's going to if that's true and it maybe that is

1878
01:20:33,200 --> 01:20:33,400
true.

1879
01:20:33,400 --> 01:20:36,600
We could we could go look and see so this is something that we got.

1880
01:20:36,600 --> 01:20:38,600
I'm not gonna be able to explain that in 10 minutes because I have to

1881
01:20:38,600 --> 01:20:40,300
introduce the concept of euclidean length.

1882
01:20:40,400 --> 01:20:42,500
With, and there's no way that's happening in 10 minutes.

1883
01:20:42,500 --> 01:20:44,200
That's just unrealistic.

1884
01:20:44,500 --> 01:20:50,500
So basically, what I'll say is to do this, this is a square Dead Zone.

1885
01:20:52,500 --> 01:20:57,500
Check X input to verify that the dead zone is circular.

1886
01:20:57,500 --> 01:20:58,800
Someone was posting links.

1887
01:20:58,800 --> 01:20:59,900
I'm assuming that they checked.

1888
01:21:00,100 --> 01:21:00,600
On the stream.

1889
01:21:00,600 --> 01:21:05,600
And that it is circular or well, or, I guess you could say round the

1890
01:21:05,600 --> 01:21:11,400
dead zone is round and show how to do round DeadZone processing.

1891
01:21:12,000 --> 01:21:14,700
But yeah, if that's, that's to it, it's too bad.

1892
01:21:14,700 --> 01:21:15,100
It's round.

1893
01:21:15,100 --> 01:21:17,100
It's actually better for gameplay if it's round.

1894
01:21:17,100 --> 01:21:20,600
So, I hope you're right about that, because that would be nice.

1895
01:21:20,800 --> 01:21:22,700
And the only thing that's the downside there.

1896
01:21:22,700 --> 01:21:25,500
It's going to take me long to explain how to do, round DeadZone

1897
01:21:25,500 --> 01:21:26,000
processing.

1898
01:21:26,400 --> 01:21:29,900
So, yeah, but thank you for writing in that because I was not sure.

1899
01:21:30,000 --> 01:21:33,800
Sure about that since the documentation here, didn't say, as we were

1900
01:21:33,800 --> 01:21:34,500
reading it.

1901
01:21:35,400 --> 01:21:37,500
And that's really all I had to go on.

1902
01:21:38,500 --> 01:21:42,700
Well, we'll have to find some some, some documentation on The Dead

1903
01:21:42,700 --> 01:21:43,100
Zone.

1904
01:21:43,200 --> 01:21:44,500
Let me let me check that page.

1905
01:21:44,500 --> 01:21:47,800
I thought maybe that page before had it, and we'll see if they say

1906
01:21:47,800 --> 01:21:49,000
that it's rounded Zone.

1907
01:21:50,500 --> 01:21:53,600
And then we could we could know assuming that this documentation is

1908
01:21:53,600 --> 01:21:55,300
correct, which of course, we also don't know.

1909
01:21:56,700 --> 01:21:58,800
Just because it says, one way, or the other doesn't actually mean

1910
01:21:58,800 --> 01:21:59,100
anything.

1911
01:21:59,100 --> 01:22:00,200
If we don't check it.

1912
01:22:00,200 --> 01:22:01,600
We should probably check it as well.

1913
01:22:01,800 --> 01:22:03,200
So, let's take a look here.

1914
01:22:05,200 --> 01:22:06,700
The dead zone.

1915
01:22:08,500 --> 01:22:09,100
Okay.

1916
01:22:09,100 --> 01:22:11,000
Yeah, blah blah blah.

1917
01:22:11,100 --> 01:22:11,700
Yes.

1918
01:22:14,200 --> 01:22:18,800
Let's see, not really saying yet.

1919
01:22:18,900 --> 01:22:21,400
We can look at the example and assume that that's correct, but

1920
01:22:23,300 --> 01:22:24,500
Circular Dead Zone.

1921
01:22:25,500 --> 01:22:28,100
Well, it says it allows the enforcement of a circular Dead Zone, but

1922
01:22:28,100 --> 01:22:30,800
does it actually say that it is a circular dead zone?

1923
01:22:38,400 --> 01:22:42,900
Yeah, so unfortunately, I guess you know what?

1924
01:22:42,900 --> 01:22:45,600
We'll just we'll just table this for now and we'll get someone who

1925
01:22:45,600 --> 01:22:46,900
actually knows for sure.

1926
01:22:46,900 --> 01:22:49,000
I will try to contact someone who would know for sure.

1927
01:22:49,200 --> 01:22:52,600
Because this just says they're processing is a circular Dead Zone, but

1928
01:22:52,600 --> 01:22:55,900
that doesn't mean that the hardware has a circular Dead Zone.

1929
01:22:56,100 --> 01:23:00,600
The Dead Zone might still be rectangular in which case us processing.

1930
01:23:00,600 --> 01:23:03,400
Is it circular is only making it worse?

1931
01:23:03,800 --> 01:23:05,800
So we kind of need to actually know.

1932
01:23:06,000 --> 01:23:07,100
They're the input dead.

1933
01:23:07,100 --> 01:23:12,800
Zone is literally circular on the controller and if that makes sense,

1934
01:23:12,800 --> 01:23:14,200
so, I don't know.

1935
01:23:15,300 --> 01:23:17,800
I don't know yet because they're, they're processing it.

1936
01:23:17,800 --> 01:23:20,500
Circular, but that doesn't mean anything that just means that they're

1937
01:23:20,500 --> 01:23:20,900
processing.

1938
01:23:20,900 --> 01:23:21,700
Is it circular?

1939
01:23:22,000 --> 01:23:24,600
But they don't say that the hardware was made with a circular Dead

1940
01:23:24,600 --> 01:23:27,200
Zone because at the hardware is still has a Retailer's ads on.

1941
01:23:27,200 --> 01:23:27,900
Doesn't help us?

1942
01:23:28,300 --> 01:23:29,000
That makes sense.

1943
01:23:29,600 --> 01:23:30,500
I don't know if that makes sense.

1944
01:23:31,400 --> 01:23:34,800
I don't know if that makes sense, but there's some links in here.

1945
01:23:34,800 --> 01:23:35,900
So we'll check them out.

1946
01:23:38,600 --> 01:23:40,000
Let's see.

1947
01:23:41,500 --> 01:23:42,600
I'm 16 days behind.

1948
01:23:42,600 --> 01:23:44,700
Is there a better way to catch up than watching all the days on

1949
01:23:44,700 --> 01:23:45,100
YouTube?

1950
01:23:45,100 --> 01:23:49,000
Yes, there is but only slightly, obviously, everything is important.

1951
01:23:50,000 --> 01:23:51,000
So you got to watch it all.

1952
01:23:51,000 --> 01:23:54,600
But if you go to the news and form, if you go to handmade hero dot-org

1953
01:23:54,600 --> 01:23:57,200
and go to the news and forums link, there's a thing called episode

1954
01:23:57,200 --> 01:23:59,300
guide that has better.

1955
01:24:00,000 --> 01:24:04,000
In on it, so you can go to something like this and it's got jump it

1956
01:24:04,000 --> 01:24:05,300
allows you to jump around the stream.

1957
01:24:05,300 --> 01:24:11,000
So that is better than than the YouTube system, but it's still all

1958
01:24:11,000 --> 01:24:14,100
just watching the YouTube, but it does like to skip things, you

1959
01:24:14,100 --> 01:24:15,400
already know and that sort of stuff.

1960
01:24:16,300 --> 01:24:21,200
All right, boy, there's a lot of questions on here.

1961
01:24:21,200 --> 01:24:24,700
I'm going to miss some for the build-up at you can build for Windows

1962
01:24:24,700 --> 01:24:29,200
XP 64-bit using 5.2 instead of 5.1, but we don't actually need to do

1963
01:24:29,200 --> 01:24:29,700
that.

1964
01:24:30,000 --> 01:24:32,400
Because it's already building for 5.2.

1965
01:24:33,000 --> 01:24:33,800
Also the in line method.

1966
01:24:33,800 --> 01:24:34,700
Forget controller.

1967
01:24:34,800 --> 01:24:37,100
What happens if you pass in negative 1 for index?

1968
01:24:37,800 --> 01:24:42,400
So you can if you want to for this, they were basically saying should

1969
01:24:42,400 --> 01:24:43,500
we check against those?

1970
01:24:44,200 --> 01:24:46,200
You almost never have that bug.

1971
01:24:46,200 --> 01:24:50,500
You can, if you want to, you can you can do one of two things.

1972
01:24:50,500 --> 01:24:52,300
You can either do this, right?

1973
01:24:52,600 --> 01:24:55,500
Which now makes it so that, you know, that the value is always

1974
01:24:55,500 --> 01:24:56,100
unsigned.

1975
01:24:56,100 --> 01:24:58,800
So if they did pass a negative 1, it would fail this array count by

1976
01:24:58,800 --> 01:24:59,800
being way, high up.

1977
01:25:00,000 --> 01:25:05,200
Ffff ever be like, you know, four billion or whatever so you can do

1978
01:25:05,200 --> 01:25:08,800
that or you can assert that controller index is greater than equal to

1979
01:25:08,800 --> 01:25:13,900
0 which ever one floats your boat, but that's that's basically I mean

1980
01:25:14,400 --> 01:25:16,300
that's that's the long and short of it.

1981
01:25:17,600 --> 01:25:19,500
You almost never have buffer under runs though.

1982
01:25:20,800 --> 01:25:23,100
At least I don't I very very rarely have buffer under-run.

1983
01:25:23,100 --> 01:25:24,600
So checking against them is not so important.

1984
01:25:24,600 --> 01:25:25,900
Buffer, overruns you often.

1985
01:25:26,200 --> 01:25:29,500
I find that just the nature of the way that c code tends to work.

1986
01:25:29,800 --> 01:25:31,900
You are very likely to write a buffer overrun.

1987
01:25:31,900 --> 01:25:34,100
You are just not that likely right above or under run because you

1988
01:25:34,100 --> 01:25:36,600
rarely Sebago backwards with pointers.

1989
01:25:36,900 --> 01:25:38,000
And that's just it's weird.

1990
01:25:38,000 --> 01:25:38,700
It's a bias.

1991
01:25:38,700 --> 01:25:40,100
It doesn't really have to be that way.

1992
01:25:40,100 --> 01:25:42,200
But that is just the way that code typically gets written.

1993
01:25:44,600 --> 01:25:45,500
Let's see.

1994
01:25:50,300 --> 01:25:53,500
Can you do struct inner buttons type and still get the benefit?

1995
01:25:53,600 --> 01:25:54,000
Yes.

1996
01:25:54,000 --> 01:25:54,400
Oh, that was all.

1997
01:25:54,400 --> 01:25:55,500
I was trying to do before.

1998
01:25:55,500 --> 01:25:59,900
So for some reason buttons type like this sort of thing.

1999
01:26:00,400 --> 01:26:01,800
It did not work.

2000
01:26:04,900 --> 01:26:10,600
At least it didn't seem to yeah, basically, like giving it a name

2001
01:26:10,600 --> 01:26:14,800
ruins the anonymous of it and makes it so that you can't access the

2002
01:26:14,800 --> 01:26:18,400
interior by without going through it first.

2003
01:26:18,700 --> 01:26:22,200
So basically, you have to do it that way, as far as I can tell.

2004
01:26:24,800 --> 01:26:26,000
I just don't know.

2005
01:26:26,600 --> 01:26:28,200
I don't know any other way to do it.

2006
01:26:28,200 --> 01:26:30,800
Unfortunately, there probably is a C++ 11.

2007
01:26:30,800 --> 01:26:33,900
Anyway, I would think but I'm not sure.

2008
01:26:39,900 --> 01:26:42,700
I don't get using win32 prefix for function names, but compiling to

2009
01:26:42,700 --> 01:26:43,500
64-bit.

2010
01:26:43,600 --> 01:26:44,000
Okay.

2011
01:26:44,100 --> 01:26:45,900
So basically, that's just to tell us that this.

2012
01:26:46,100 --> 01:26:48,500
So this code isn't actually Windows 64-bit.

2013
01:26:48,500 --> 01:26:53,200
It's Windows 32-bit that you can compile as 64-bit.

2014
01:26:53,300 --> 01:26:56,000
So, actually, all of this stuff and we show this on the last stream,

2015
01:26:56,400 --> 01:26:59,900
all of this stuff can be compiled for win32 as well as when

2016
01:27:00,000 --> 01:27:05,500
So it is not win, 64 code is win32 code, but we can compile and 64-bit

2017
01:27:05,500 --> 01:27:08,800
when we want to which we do want to because that's going to be faster.

2018
01:27:09,400 --> 01:27:14,500
So basically it's called win32 because it actually is all win32 clean

2019
01:27:14,500 --> 01:27:15,100
code.

2020
01:27:15,200 --> 01:27:19,500
There's nothing in here that requires when 64 so we are compiling for

2021
01:27:19,500 --> 01:27:21,500
both and that's why the win32.

2022
01:27:21,600 --> 01:27:25,600
If we had a function that only worked on in 64, then would call in 64.

2023
01:27:27,900 --> 01:27:29,100
Let's see.

2024
01:27:30,600 --> 01:27:32,000
Let's see.

2025
01:27:35,600 --> 01:27:38,600
I was thinking about for game processing in put in a separate thread

2026
01:27:38,600 --> 01:27:41,300
so it is frame rate independent, but I heard you could introduce input

2027
01:27:41,300 --> 01:27:41,500
lag.

2028
01:27:41,500 --> 01:27:42,300
Is that true?

2029
01:27:42,500 --> 01:27:45,800
We are, we are probably going to do some pulling potentially a

2030
01:27:45,800 --> 01:27:46,500
separate thread as well.

2031
01:27:46,500 --> 01:27:48,400
It does not introduce input lag.

2032
01:27:49,600 --> 01:27:53,400
It would if you did it poorly, I guess, but as long as they're there

2033
01:27:53,400 --> 01:27:54,800
really isn't any reason.

2034
01:27:57,100 --> 01:27:59,200
I strongly suspect that.

2035
01:27:59,200 --> 01:28:02,700
We will want to potentially at least for educational purposes.

2036
01:28:02,700 --> 01:28:07,500
If not for any real reason, do a separate thread for input polling say

2037
01:28:07,500 --> 01:28:09,000
pulling the xinput sticks.

2038
01:28:09,800 --> 01:28:13,400
And as far as I know, there's no reason why we can't Implement that

2039
01:28:13,400 --> 01:28:14,300
with no lag.

2040
01:28:15,400 --> 01:28:17,700
I cannot think of any reason in my head.

2041
01:28:17,700 --> 01:28:19,000
Why that would have to be laggy.

2042
01:28:19,400 --> 01:28:20,700
I may be forgetting something.

2043
01:28:20,700 --> 01:28:23,700
But basically it would just stuff in a queue and the other thing and

2044
01:28:23,700 --> 01:28:26,500
the main throw pulled out of the queue and you could do a lock freak.

2045
01:28:26,500 --> 01:28:26,700
You

2046
01:28:26,900 --> 01:28:29,900
Even for something as simple as that, so there really wouldn't be

2047
01:28:30,200 --> 01:28:32,800
there would literally not even be a mutex around it.

2048
01:28:32,800 --> 01:28:36,000
So I don't feel like there should be any lag.

2049
01:28:36,000 --> 01:28:37,200
If you did it poorly.

2050
01:28:37,400 --> 01:28:38,500
There'd be a bunch of leg.

2051
01:28:38,800 --> 01:28:40,900
But if you did it properly, I don't think there should be

2052
01:28:46,800 --> 01:28:49,000
You said a circular Dead Zone would be good for gameplay.

2053
01:28:49,000 --> 01:28:50,300
Why don't you just make it circular?

2054
01:28:50,300 --> 01:28:52,200
The Dead Zone would just be a little bit bigger.

2055
01:28:52,200 --> 01:28:55,000
Well, the reason is because then you're just losing information,

2056
01:28:55,200 --> 01:28:55,800
right?

2057
01:28:56,200 --> 01:28:56,900
Basically.

2058
01:28:57,000 --> 01:28:59,800
Like this is why I say I actually want to know what the hardware does

2059
01:28:59,800 --> 01:29:03,200
because I want to actually provide as much data as the hardware gives

2060
01:29:03,200 --> 01:29:03,500
me.

2061
01:29:03,900 --> 01:29:09,200
So if the hardware was specified this way, then I want to pass that to

2062
01:29:09,200 --> 01:29:09,700
the game.

2063
01:29:09,900 --> 01:29:16,000
I don't want to circumscribe a circle like this and take a bunch of

2064
01:29:16,100 --> 01:29:19,900
Valid data that the game could have been getting and throw it out.

2065
01:29:20,000 --> 01:29:23,400
I'm saying it's better for gameplay because a circle means that you

2066
01:29:23,400 --> 01:29:26,600
have the same resolution, no matter what direction you're going in.

2067
01:29:26,800 --> 01:29:29,600
So you don't lose resolution on the stick as you go out here.

2068
01:29:29,600 --> 01:29:31,400
So I'm just saying the joystick is better.

2069
01:29:31,400 --> 01:29:35,600
If it's circular assuming that it's still, if it's so an inscribed

2070
01:29:35,600 --> 01:29:39,200
circle is better than this, which is why I want to know.

2071
01:29:39,700 --> 01:29:45,100
So basically you're saying my if to be 100 explicit, basically, we've

2072
01:29:45,100 --> 01:29:45,900
got some measurement.

2073
01:29:46,000 --> 01:29:48,600
Of the stick we're saying that measurement is noisy.

2074
01:29:48,600 --> 01:29:49,700
It's not accurate.

2075
01:29:49,800 --> 01:29:53,100
So what I want to know is is the noise on both axis.

2076
01:29:53,100 --> 01:29:55,600
So we have a certain bit of noise on this axis and a certain bit of

2077
01:29:55,600 --> 01:29:59,300
noise on this axis, which leads to this dead zone, literally, on the

2078
01:29:59,300 --> 01:29:59,700
hardware.

2079
01:29:59,700 --> 01:29:59,800
And

2080
01:30:00,000 --> 01:30:03,200
Case, that is how we should process it or are we saying that?

2081
01:30:03,200 --> 01:30:05,200
It's just the total distance.

2082
01:30:05,400 --> 01:30:06,400
That is noisy.

2083
01:30:06,500 --> 01:30:08,200
It's just however far you moved it.

2084
01:30:08,200 --> 01:30:10,000
So, no matter what direction you move it in.

2085
01:30:10,000 --> 01:30:11,800
It's still the same amount of noise.

2086
01:30:12,300 --> 01:30:14,600
I find that hard to believe.

2087
01:30:14,700 --> 01:30:19,200
It doesn't sound like how hard we're normally works, but my knowledge

2088
01:30:19,200 --> 01:30:22,400
of joysticks is from like 1990.

2089
01:30:22,600 --> 01:30:25,400
So that could very well be possible.

2090
01:30:25,400 --> 01:30:25,900
Nowadays.

2091
01:30:25,900 --> 01:30:28,000
Maybe they've got better techniques or building joysticks.

2092
01:30:28,300 --> 01:30:29,900
So what I would like to do, I'm

2093
01:30:30,000 --> 01:30:32,600
Not going to go by the msdn code because all that said was we're going

2094
01:30:32,600 --> 01:30:33,000
to process it.

2095
01:30:33,000 --> 01:30:34,500
A circular Dead Zone, but who cares?

2096
01:30:34,500 --> 01:30:35,700
That's not relevant, right?

2097
01:30:35,700 --> 01:30:37,200
We don't care how they process it.

2098
01:30:37,200 --> 01:30:38,400
We care what the hardware does.

2099
01:30:38,500 --> 01:30:41,500
So what I'd like to do is actually go talk to somebody, who knows the

2100
01:30:41,500 --> 01:30:45,900
hardware intimately and say, what actually, what is the actual noise

2101
01:30:45,900 --> 01:30:47,400
profile of this hardware?

2102
01:30:47,500 --> 01:30:49,600
And I'd like to process it that way.

2103
01:30:49,900 --> 01:30:50,600
That makes sense.

2104
01:30:55,600 --> 01:30:57,000
So we're basically out of time here.

2105
01:30:57,000 --> 01:30:57,700
Just trying to quickly.

2106
01:30:57,700 --> 01:31:01,100
See, let's see here.

2107
01:31:02,200 --> 01:31:03,900
Let's see here.

2108
01:31:11,000 --> 01:31:20,100
I don't think there's any more questions that I can get to.

2109
01:31:24,000 --> 01:31:26,300
Looks like mostly everything straight forward.

2110
01:31:26,300 --> 01:31:30,100
We could cover it looks like mostly just discussion of circular versus

2111
01:31:31,000 --> 01:31:34,200
rectangular Dead Zone and I want to go actually get some verification

2112
01:31:34,200 --> 01:31:35,800
of how the hardware Works before I do that.

2113
01:31:35,800 --> 01:31:37,400
But if it does, then we'll just do a circle Dead Zone.

2114
01:31:37,400 --> 01:31:41,800
We might postpone that till I talk about vectors, so we may have to

2115
01:31:41,800 --> 01:31:43,500
postpone circular DeadZone processing.

2116
01:31:43,500 --> 01:31:46,400
If it does turn out to be circular until I talk about vectors, but

2117
01:31:46,400 --> 01:31:47,200
that's about it.

2118
01:31:49,600 --> 01:31:51,900
Let's see, ya.

2119
01:31:55,700 --> 01:31:58,300
Yeah, some of these questions are good.

2120
01:31:58,400 --> 01:32:01,400
Maybe I'll just do let me do an extra five or ten minutes here because

2121
01:32:01,400 --> 01:32:02,500
some of these questions are good.

2122
01:32:03,300 --> 01:32:06,100
There's a question about direct input versus X input.

2123
01:32:06,200 --> 01:32:09,600
X input is easier direct input supports more devices.

2124
01:32:09,800 --> 01:32:13,100
So, if you want to support older Hardware, you need to use either

2125
01:32:13,100 --> 01:32:17,100
direct input or you need to go off the raw input or the hid system.

2126
01:32:17,900 --> 01:32:18,800
Which one we do.

2127
01:32:18,800 --> 01:32:19,600
I won't know.

2128
01:32:19,600 --> 01:32:22,500
I don't know, but we probably should support direct input as well as

2129
01:32:22,500 --> 01:32:23,700
xinput in the end.

2130
01:32:23,900 --> 01:32:25,300
Just so we can support older.

2131
01:32:25,400 --> 01:32:28,500
Is or we can just say, it doesn't really matter.

2132
01:32:28,500 --> 01:32:31,600
It's just an exercise in win32 programming, and maybe that's not a

2133
01:32:31,600 --> 01:32:32,700
useful thing to teach on the stream.

2134
01:32:32,800 --> 01:32:33,200
I don't know.

2135
01:32:33,800 --> 01:32:35,700
Yes, directs input is much Messier.

2136
01:32:36,100 --> 01:32:37,800
No, there isn't much point to it.

2137
01:32:38,100 --> 01:32:40,700
But the bottom line is that xinput just does not support Legacy

2138
01:32:40,700 --> 01:32:41,200
devices.

2139
01:32:41,200 --> 01:32:44,200
So people who have old gamepads, they won't work unless you use x

2140
01:32:44,200 --> 01:32:46,000
input or they can run a program.

2141
01:32:46,000 --> 01:32:50,300
Sometimes that Max maps, direct input, 2x input, but it's nicer.

2142
01:32:50,300 --> 01:32:52,500
If you do it, do it nicely for them, right?

2143
01:32:55,500 --> 01:32:56,400
So, there's that.

2144
01:32:58,900 --> 01:32:59,800
Let's see here.

2145
01:33:02,900 --> 01:33:04,700
Let's see here.

2146
01:33:17,500 --> 01:33:19,400
I deleted the Min and Max Mac.

2147
01:33:19,700 --> 01:33:19,900
Yes.

2148
01:33:19,900 --> 01:33:20,600
That's true.

2149
01:33:20,600 --> 01:33:21,100
I did.

2150
01:33:21,100 --> 01:33:22,700
I had said that I kind of wanted to.

2151
01:33:22,700 --> 01:33:27,700
So, if you remember, basically, in the dead zone processing, I was

2152
01:33:27,700 --> 01:33:32,100
using the, the I sort of said, I wish I should use a Min and Max here,

2153
01:33:32,100 --> 01:33:33,400
but I didn't have one yet.

2154
01:33:33,700 --> 01:33:36,000
And so that was in that was in this code.

2155
01:33:36,700 --> 01:33:38,800
So right here, I was saying I could use that.

2156
01:33:38,800 --> 01:33:41,600
I don't think it's relevant anymore because especially, if we change

2157
01:33:41,600 --> 01:33:42,400
to a circular dead zone.

2158
01:33:42,400 --> 01:33:43,600
That is not relevant anymore.

2159
01:33:45,400 --> 01:33:47,300
So I think we don't actually need that to do anymore.

2160
01:33:47,300 --> 01:33:49,900
But thank you for catching that that could have been appropriate.

2161
01:33:50,400 --> 01:33:52,700
Will get to minute Max macros at some point.

2162
01:33:53,400 --> 01:33:54,200
Certainly.

2163
01:33:55,000 --> 01:33:55,400
Yes.

2164
01:33:55,400 --> 01:33:55,800
Yes.

2165
01:34:03,700 --> 01:34:06,600
So when you use a zero controller, why don't you just do star new

2166
01:34:06,600 --> 01:34:08,500
keyboard controller equals brackets.

2167
01:34:08,700 --> 01:34:11,700
So the answer is because I don't think that used to work.

2168
01:34:13,300 --> 01:34:15,700
Let me let me show you what the person was talking about.

2169
01:34:15,700 --> 01:34:20,900
They were saying when you do this, can you just do that?

2170
01:34:21,000 --> 01:34:24,100
And C++ 11 may allow that?

2171
01:34:24,600 --> 01:34:28,500
Yeah, it does, but I'm pretty sure that didn't used to work.

2172
01:34:33,300 --> 01:34:36,500
I'm contouring is whether how much of those sorts of newer features we

2173
01:34:36,500 --> 01:34:40,900
should be using, but I guess if someone was implementing compiler,

2174
01:34:40,900 --> 01:34:42,500
this is a pretty easy thing to do.

2175
01:34:42,500 --> 01:34:45,500
Just the fact that that clear something so I'm okay with that.

2176
01:34:45,600 --> 01:34:47,100
So yeah, I'm fine with that.

2177
01:34:47,100 --> 01:34:48,200
That's totally cool.

2178
01:34:48,600 --> 01:34:49,700
I don't have a problem with that.

2179
01:34:50,700 --> 01:34:52,000
Yeah, we'll go with that.

2180
01:34:52,100 --> 01:34:52,800
We'll go with that.

2181
01:34:54,300 --> 01:34:55,500
I can, I can live with that.

2182
01:34:55,500 --> 01:34:56,500
I can be happy with that.

2183
01:35:04,600 --> 01:35:05,800
Let's see.

2184
01:35:07,700 --> 01:35:10,500
Looks like someone was asking about normalizing to The Dead Zone to

2185
01:35:10,500 --> 01:35:12,400
Max short thing, which is actually something I just did.

2186
01:35:12,400 --> 01:35:15,100
So yes, I whoever made that suggestion.

2187
01:35:15,100 --> 01:35:16,100
That is a very good suggestion.

2188
01:35:16,100 --> 01:35:17,800
That is exactly what I thought should be good.

2189
01:35:19,000 --> 01:35:20,300
Let's see here.

2190
01:35:30,100 --> 01:35:32,800
Standard def should include offset of you could use that to make your

2191
01:35:32,800 --> 01:35:34,000
assert a little simpler.

2192
01:35:34,000 --> 01:35:34,900
That's true.

2193
01:35:34,900 --> 01:35:36,700
But I'd rather just stick with the point arithmetic.

2194
01:35:36,700 --> 01:35:39,100
So we don't introduce more overhead there.

2195
01:35:39,100 --> 01:35:39,400
Maybe.

2196
01:35:39,400 --> 01:35:42,700
I don't know if we'll use offset of in the future, we might basically

2197
01:35:42,700 --> 01:35:47,200
there's a there's a macro you can do called offset of, I'll show you

2198
01:35:47,200 --> 01:35:48,400
the docs for it here, actually.

2199
01:35:49,200 --> 01:35:53,600
So offset of which simplifies, some of the stuff that I was doing,

2200
01:35:53,900 --> 01:35:55,000
whereas a good reference.

2201
01:35:55,000 --> 01:35:55,500
Here it is.

2202
01:35:56,100 --> 01:35:59,600
So basically, there's a macro called offset of and what offset of is

2203
01:35:59,600 --> 01:35:59,700
it.

2204
01:36:00,000 --> 01:36:03,200
The name of a type and then it takes the name of a member inside that

2205
01:36:03,200 --> 01:36:07,200
type, and it Returns the the Delta between the base of the structure,

2206
01:36:07,200 --> 01:36:08,700
the start of the structure and that type.

2207
01:36:08,700 --> 01:36:10,900
So it's the offset inside the structure.

2208
01:36:11,000 --> 01:36:15,100
So, this code that I had here right, and I'll just go ahead and do it.

2209
01:36:15,800 --> 01:36:18,400
I'm fine with using offset of, I don't have a problem that I guess,

2210
01:36:18,400 --> 01:36:23,100
but basically, if I wanted to, I could make this use less.

2211
01:36:23,300 --> 01:36:27,700
It can be less verbose by basically saying like, Okay, really?

2212
01:36:27,700 --> 01:36:29,600
All we need to know is just the game controller.

2213
01:36:30,000 --> 01:36:32,300
Put instead of having to give a reference to it.

2214
01:36:32,300 --> 01:36:34,700
I just want to say that Terminator, right?

2215
01:36:35,200 --> 01:36:39,500
- the offset of the buttons, array their robes.

2216
01:36:39,600 --> 01:36:44,800
That's not good - knob set of game controller input.

2217
01:36:47,400 --> 01:36:47,900
Buttons.

2218
01:36:50,000 --> 01:36:55,700
That is essentially equivalent to what I had written before, and if

2219
01:36:55,700 --> 01:37:00,500
that makes sense, I don't, I don't really think there's any reason to

2220
01:37:00,500 --> 01:37:00,800
do it.

2221
01:37:00,800 --> 01:37:03,000
And since I have to use the other one for array count, anyway,

2222
01:37:03,000 --> 01:37:04,200
although I could expose, right?

2223
01:37:04,200 --> 01:37:07,100
All right, kind of, but I think, I'd rather just leave it the way that

2224
01:37:07,100 --> 01:37:08,600
it was personally.

2225
01:37:09,600 --> 01:37:13,300
Personally, let's see.

2226
01:37:13,500 --> 01:37:19,800
Let's see anything else.

2227
01:37:20,700 --> 01:37:24,700
Anything else that I missed?

2228
01:37:27,500 --> 01:37:30,100
So we'll get will look at the circular dies on later.

2229
01:37:30,100 --> 01:37:31,600
So I'm not ignoring that we will, we will.

2230
01:37:31,600 --> 01:37:34,800
Absolutely, I'll check later tonight, actually to see if I can find

2231
01:37:34,800 --> 01:37:37,900
someone who can say definitively, what the hardware does Dead Zone

2232
01:37:37,900 --> 01:37:38,400
wise.

2233
01:37:39,700 --> 01:37:40,300
But let's take a look.

2234
01:37:40,300 --> 01:37:45,500
So, is there anything else looks pretty good?

2235
01:37:45,700 --> 01:37:49,100
I think we've covered just about everything that is relevant to

2236
01:37:49,100 --> 01:37:50,600
today's code.

2237
01:37:52,400 --> 01:37:53,300
Yeah.

2238
01:37:53,700 --> 01:37:54,300
Yeah.

2239
01:37:54,900 --> 01:37:55,700
Alright.

2240
01:37:56,000 --> 01:37:58,300
So thank you everyone for joining us.

2241
01:37:58,900 --> 01:38:01,200
Sorry, there were so many questions there that it was hard to make

2242
01:38:01,200 --> 01:38:02,000
sure we got all of them.

2243
01:38:02,000 --> 01:38:06,600
I think I got all of them related to what we do and I want to table

2244
01:38:06,600 --> 01:38:07,700
the circular DeadZone thing.

2245
01:38:07,700 --> 01:38:08,700
It's important.

2246
01:38:09,500 --> 01:38:11,700
Because I do want to model the hardware accurately.

2247
01:38:11,800 --> 01:38:13,000
So it's very important.

2248
01:38:13,000 --> 01:38:14,600
I don't want you to think we're skipping over it.

2249
01:38:14,600 --> 01:38:18,100
We will find out whether it's circular or rectangular Dead Zone and we

2250
01:38:18,100 --> 01:38:19,300
will adjust accordingly.

2251
01:38:19,800 --> 01:38:22,500
But even if it is circular, I gotta say, I'm afraid I'm going to have

2252
01:38:22,500 --> 01:38:25,400
to probably table that for another two weeks till we can do talk about

2253
01:38:25,400 --> 01:38:30,000
vectors because you really, you really need you kill euclidean length

2254
01:38:30,600 --> 01:38:31,900
to do a circular Dead Zone.

2255
01:38:31,900 --> 01:38:34,800
I can't think of any way to do it without that.

2256
01:38:35,100 --> 01:38:37,100
So we're going to have to get to that point before.

2257
01:38:37,100 --> 01:38:39,300
We can preserve it as a but we'll find out.

2258
01:38:39,400 --> 01:38:40,000
Out which one it is.

2259
01:38:40,000 --> 01:38:41,700
I will track down someone who knows for sure.

2260
01:38:41,700 --> 01:38:44,600
How these ghosts how these controllers are made internally, find out

2261
01:38:44,600 --> 01:38:47,700
whether they have circular, or rectangular dead zones and then we will

2262
01:38:47,700 --> 01:38:48,400
go from there.

2263
01:38:48,900 --> 01:38:52,300
That said, thank you very much for joining me for another edition of

2264
01:38:52,300 --> 01:38:53,200
handmade hero.

2265
01:38:53,200 --> 01:38:55,400
I am very pleased with the progress we made.

2266
01:38:55,400 --> 01:38:55,800
Today.

2267
01:38:55,800 --> 01:38:58,600
We have our input layer looking much better than it was before

2268
01:38:58,700 --> 01:38:59,800
probably still some bugs in their cause

2269
01:39:00,000 --> 01:39:02,900
I haven't tested it and you always have bugs until you test.

2270
01:39:03,100 --> 01:39:06,100
So we need to do more testing and we will do more testing in the

2271
01:39:06,100 --> 01:39:06,400
future.

2272
01:39:06,400 --> 01:39:09,600
But for now, I'm pretty happy with how we've got designed how we've

2273
01:39:09,600 --> 01:39:10,300
got it working.

2274
01:39:10,400 --> 01:39:13,300
I think it's really good, and it's going to continue to get better

2275
01:39:13,300 --> 01:39:13,700
over time.

2276
01:39:13,700 --> 01:39:14,700
So that's great.

2277
01:39:14,700 --> 01:39:16,300
We need to work on our frame timing.

2278
01:39:16,300 --> 01:39:17,400
So that'll be tomorrow.

2279
01:39:17,600 --> 01:39:20,400
And then after that, when we get the frame timing done, we're pretty

2280
01:39:20,400 --> 01:39:24,000
much closed in on just final cleanup stuff.

2281
01:39:24,000 --> 01:39:24,700
Some extra stuff.

2282
01:39:24,700 --> 01:39:28,300
I want to get in there for for, for going forwards, with the memory,

2283
01:39:28,300 --> 01:39:29,400
and a little, a couple other things.

2284
01:39:29,600 --> 01:39:29,900
So we'll

2285
01:39:30,000 --> 01:39:32,000
I'll have a Thursday and we'll have stuff to do on Thursday and Friday

2286
01:39:32,000 --> 01:39:32,300
as well.

2287
01:39:32,300 --> 01:39:35,700
Even if we do, finish up frame coming tomorrow, but we are well,

2288
01:39:35,700 --> 01:39:37,200
within reach of closing out.

2289
01:39:37,200 --> 01:39:40,500
The entire platform architecture stuff that we need to do for our

2290
01:39:40,500 --> 01:39:41,500
first pass.

2291
01:39:41,900 --> 01:39:43,600
And I am very excited about that.

2292
01:39:43,600 --> 01:39:46,700
I'm psyched to get to starting to work on the game next week.

2293
01:39:47,000 --> 01:39:48,500
The art is looking awesome.

2294
01:39:48,500 --> 01:39:48,600
Yeah.

2295
01:39:48,600 --> 01:39:52,500
Action does amazing art and I'm really excited to start getting it up

2296
01:39:52,500 --> 01:39:53,400
on the screen too.

2297
01:39:53,700 --> 01:39:54,900
So that's going to be awesome.

2298
01:39:54,900 --> 01:39:59,800
So, thank you everyone for joining me, and, and doing another hour.

2299
01:40:00,000 --> 01:40:00,700
Programming.

2300
01:40:00,900 --> 01:40:04,800
I encourage you to go to handmade here too, or if you hadn't already

2301
01:40:05,400 --> 01:40:07,200
where you can go to this news and forms button.

2302
01:40:07,200 --> 01:40:09,600
It's got like a pretty nice forms on their people in posting, a lot of

2303
01:40:09,600 --> 01:40:10,500
great information.

2304
01:40:10,800 --> 01:40:11,700
There's an episode guide.

2305
01:40:11,700 --> 01:40:14,500
You can use to follow along with the series and there's annotated

2306
01:40:14,500 --> 01:40:17,600
notes and Iker does a bunch of illustrations every week.

2307
01:40:17,600 --> 01:40:18,900
There's just tons of good stuff on there.

2308
01:40:19,100 --> 01:40:20,700
Just go explore and have fun with it.

2309
01:40:21,100 --> 01:40:24,800
It's some crazy web stuff that, you know, I'm not very good at web

2310
01:40:24,800 --> 01:40:25,000
stuff.

2311
01:40:25,000 --> 01:40:27,100
So it's a little janky, but it works.

2312
01:40:27,500 --> 01:40:28,300
So check that out.

2313
01:40:28,300 --> 01:40:29,800
And, of course, if you would like your own copy of

2314
01:40:29,900 --> 01:40:32,800
The source code to play around with, you can pre-order the game by

2315
01:40:32,800 --> 01:40:34,000
just clicking on this button.

2316
01:40:34,700 --> 01:40:36,200
It handles both Skype and PayPal.

2317
01:40:36,200 --> 01:40:39,600
So you will get a link and make sure when you do that, make sure you

2318
01:40:39,600 --> 01:40:40,900
use a valid email address.

2319
01:40:41,400 --> 01:40:43,300
Because, basically, it sends you a link in an email.

2320
01:40:43,300 --> 01:40:46,200
That's where you will always go to redownload the source code every

2321
01:40:46,200 --> 01:40:47,300
night because I updated every night.

2322
01:40:47,300 --> 01:40:50,400
So you want to save that link that comes an email because that's what

2323
01:40:50,400 --> 01:40:52,400
allows you to download the source code and that's also what allow you

2324
01:40:52,400 --> 01:40:53,500
to download the game and the asset.

2325
01:40:53,500 --> 01:40:58,400
So save that every time we do a major build release.

2326
01:40:58,400 --> 01:40:59,800
So as the game goes forwards and we

2327
01:41:00,000 --> 01:41:03,400
In Milestones, I'll send out an email that has a refresher Link in it.

2328
01:41:04,000 --> 01:41:05,600
But just make sure you save that for now.

2329
01:41:05,600 --> 01:41:09,000
So you can always get the source code because I don't know much about

2330
01:41:09,200 --> 01:41:11,700
send Alli don't, they probably is a way to kind of just have them re--

2331
01:41:11,700 --> 01:41:14,500
send you your thing, but I just want to make sure people don't miss

2332
01:41:14,500 --> 01:41:14,800
it.

2333
01:41:15,000 --> 01:41:16,200
So thank you very much for joining us.

2334
01:41:16,400 --> 01:41:17,900
Tomorrow will be 8 p.m.

2335
01:41:18,200 --> 01:41:21,300
Pacific Standard time again, I hope to see you all here.

2336
01:41:21,300 --> 01:41:23,900
It's been wonderful coding with you and it will be.

2337
01:41:24,100 --> 01:41:26,900
I'm really excited to get the frame Loop cleaned up tomorrow because I

2338
01:41:26,900 --> 01:41:28,100
think that's going to be a lot of fun, too.

2339
01:41:28,100 --> 01:41:29,600
So, hope to see you here tomorrow.

2340
01:41:30,000 --> 01:41:31,900
And thank you very much for joining me.

