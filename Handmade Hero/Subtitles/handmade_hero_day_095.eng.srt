1
00:00:01,400 --> 00:00:01,900
There we go.

2
00:00:02,700 --> 00:00:05,100
Hello, everyone and welcome to handmade hero show.

3
00:00:05,100 --> 00:00:09,600
Rico to complete game live on Twitch right before.

4
00:00:10,100 --> 00:00:16,800
All of our very eyes, we are in the middle of doing sort of our own

5
00:00:16,800 --> 00:00:18,600
renderer, which is kind of awesome.

6
00:00:18,600 --> 00:00:21,600
We're basically implementing essentially what a GPU does.

7
00:00:22,400 --> 00:00:26,300
We are implementing that ourselves so that we can see how it all

8
00:00:26,300 --> 00:00:26,700
works.

9
00:00:26,700 --> 00:00:30,700
And I think, one of the things that's been kind of surprising, is it?

10
00:00:30,900 --> 00:00:32,500
Hasn't taken us very long.

11
00:00:32,500 --> 00:00:35,400
Like, you know, it's kind of thinking the back of my head like, oh,

12
00:00:35,400 --> 00:00:36,900
we're going to have to implement, this will render.

13
00:00:36,900 --> 00:00:39,000
And, you know, I mean, I hadn't done much in the way of software

14
00:00:39,000 --> 00:00:42,000
rasterizing in a long time and I was kind of like, wow.

15
00:00:42,000 --> 00:00:43,300
All right, that's going to be a major undertaking.

16
00:00:43,300 --> 00:00:46,400
It turns out like we just kind of blew through a bunch of it and it

17
00:00:46,400 --> 00:00:49,500
was like you know, a couple days and we had all of the sort of

18
00:00:49,500 --> 00:00:51,700
primitive stuff working and it was just weird.

19
00:00:51,700 --> 00:00:54,900
So I hope it continues to go that way.

20
00:00:54,900 --> 00:00:57,000
It was a little surprising but that's how it is.

21
00:00:57,000 --> 00:00:59,000
So we're going to go ahead and continue with that today.

22
00:00:59,100 --> 00:01:00,800
Before I begin, let me remind everyone.

23
00:01:00,800 --> 00:01:02,500
That we are on day 95 today.

24
00:01:02,600 --> 00:01:05,300
So if you are someone who has pre-ordered the game at handmade hero

25
00:01:05,300 --> 00:01:08,500
dot-org and you would like to download the source code so that you'll

26
00:01:08,500 --> 00:01:09,400
be where I am today.

27
00:01:09,400 --> 00:01:13,000
Get that from the link that you got in your email and unpacked a 94

28
00:01:13,500 --> 00:01:14,900
source code into a directory.

29
00:01:14,900 --> 00:01:16,300
That is what I'm starting with today.

30
00:01:16,300 --> 00:01:18,100
And so you will be right with me.

31
00:01:18,100 --> 00:01:23,500
If you would like to be now where we left off, we just did a brief

32
00:01:23,500 --> 00:01:28,100
aside yesterday on gamma correction at the behest of one Chun.

33
00:01:28,800 --> 00:01:30,800
And so basically, what we did is we

34
00:01:30,900 --> 00:01:35,800
He added some gamma correction to our little texture map, texture

35
00:01:35,800 --> 00:01:40,400
mapping routine which allows us to draw a little rotated and scaled

36
00:01:40,400 --> 00:01:43,000
versions of any of our Sprites that we want to.

37
00:01:43,600 --> 00:01:46,600
And so, you know, we kind of wrap that up to some degree.

38
00:01:46,600 --> 00:01:49,700
Now, someone was asking on the pre stream a little bit and I haven't

39
00:01:49,700 --> 00:01:52,100
read, they were referring to something that they posted on the forums

40
00:01:52,100 --> 00:01:52,100
to.

41
00:01:52,100 --> 00:01:53,700
I haven't had a chance to read yet.

42
00:01:53,900 --> 00:01:55,200
I will absolutely read it.

43
00:01:55,500 --> 00:01:58,800
I pretty much read everything on there, you know, sometimes it takes

44
00:01:58,800 --> 00:02:00,700
me to the weekend have time to do so but I always

45
00:02:00,800 --> 00:02:06,000
Go through it all, and they were asking about how the gamma interacts

46
00:02:06,000 --> 00:02:11,600
with premultiplied Alpha and if you take a look at the way that we

47
00:02:11,600 --> 00:02:17,600
were doing things, right, where we did our srgb to linear stuff.

48
00:02:17,700 --> 00:02:19,300
So rgb2 linear.

49
00:02:19,400 --> 00:02:19,800
So it was sorry.

50
00:02:19,800 --> 00:02:22,200
Srgb, 252 linear.

51
00:02:23,800 --> 00:02:26,400
If you took a look at the way we were doing stuff, right?

52
00:02:26,800 --> 00:02:30,700
What we were doing is we were kind of lofting hour.

53
00:02:30,900 --> 00:02:35,300
Our values up and we were doing all of our math and making sure that

54
00:02:35,300 --> 00:02:39,800
we did all of our math in s RGB 255, 255 space, and all these sorts of

55
00:02:39,800 --> 00:02:40,300
stuff.

56
00:02:41,100 --> 00:02:44,400
But there's one thing that we didn't talk about and it's a good thing

57
00:02:44,400 --> 00:02:48,700
to mention, which is that, if you are doing premultiplied Alpha,

58
00:02:49,900 --> 00:02:54,500
Then you kind of have this problem of when exactly do you pre multiply

59
00:02:54,500 --> 00:02:55,800
the alpha, right?

60
00:02:55,900 --> 00:02:59,900
Because this srgb to linear thing it seems like you probably want to

61
00:03:00,000 --> 00:03:04,000
Multiply the alpha you know you want to make sure that when you when

62
00:03:04,000 --> 00:03:07,000
you do your Alpha premultiplication you're doing that.

63
00:03:07,100 --> 00:03:07,500
Presumably.

64
00:03:07,500 --> 00:03:09,300
You want to do that in a linear space, right?

65
00:03:09,300 --> 00:03:12,200
So that you have already converted things out of srgb.

66
00:03:12,900 --> 00:03:15,500
When you're doing your Alpha pre-multiply, you do the pre multiply,

67
00:03:15,500 --> 00:03:18,000
then you do the blend and then, you know, etc, etc.

68
00:03:18,700 --> 00:03:23,100
So it's kind of one of those things where I believe and we didn't

69
00:03:23,100 --> 00:03:24,400
meticulously inspect this.

70
00:03:24,400 --> 00:03:29,700
But I believe we're essentially doing what I would consider to be.

71
00:03:30,000 --> 00:03:32,100
The most correct thing right here.

72
00:03:32,100 --> 00:03:36,300
I believe and it would be nice to have a real rendering Authority.

73
00:03:36,300 --> 00:03:39,700
Take a look at this and verify that that's correct because I'm

74
00:03:39,700 --> 00:03:43,100
certainly not that guy but I believe we're basically doing it as

75
00:03:43,100 --> 00:03:48,500
correct as you might possibly be able to do it but when we kind of

76
00:03:48,500 --> 00:03:53,600
move past what we're doing right now and try to optimize this a little

77
00:03:53,600 --> 00:03:59,500
bit, one of the things that often comes up is how do you deal with?

78
00:04:00,200 --> 00:04:04,000
Storing your your your Alpha values.

79
00:04:04,200 --> 00:04:04,500
Sorry.

80
00:04:04,500 --> 00:04:05,500
How do you deal with storing?

81
00:04:05,500 --> 00:04:09,500
Your color values so that you can store them already pre multiplied,

82
00:04:09,500 --> 00:04:12,500
you know, do you pre multiply first and then convert, you know, du du

83
00:04:12,500 --> 00:04:13,600
pre multiply and linear space.

84
00:04:13,600 --> 00:04:15,400
And then store, srgb and whatever.

85
00:04:15,800 --> 00:04:18,700
And the reason for that is, you know, maybe we don't want to have to

86
00:04:18,700 --> 00:04:21,600
do the alpha pre multiplication in here and so on and so forth.

87
00:04:22,600 --> 00:04:26,800
So there's a bunch of issues in there and I'd rather just tackle those

88
00:04:26,800 --> 00:04:29,800
when we get to them because right now I believe we're doing.

89
00:04:29,900 --> 00:04:30,700
Things correctly.

90
00:04:30,700 --> 00:04:32,200
Where, you know, I have to think about it.

91
00:04:32,200 --> 00:04:34,800
But basically what we're doing right is we're sampling from a texture

92
00:04:34,800 --> 00:04:36,600
which is not premultiplied Alpha.

93
00:04:36,700 --> 00:04:40,400
So it's got the actual srgb values in there and the actual Alpha value

94
00:04:40,400 --> 00:04:41,600
that was using Photoshop.

95
00:04:41,800 --> 00:04:44,800
We're converting out to linear, right?

96
00:04:44,900 --> 00:04:50,000
We are then blending in, you know, non P multiplied, space linearly

97
00:04:50,300 --> 00:04:51,000
right?

98
00:04:52,400 --> 00:04:58,200
And and then we are, we are doing the alpha composite after the fact

99
00:04:59,200 --> 00:04:59,800
now.

100
00:05:00,200 --> 00:05:04,000
The problem I guess now that I think about it, the problem with that

101
00:05:04,000 --> 00:05:10,000
is this by linear blend might actually want to be in premultiplied

102
00:05:10,000 --> 00:05:11,000
Alpha, right?

103
00:05:11,000 --> 00:05:15,600
Because the I think the bi-linear blend like we were talking about

104
00:05:15,600 --> 00:05:21,100
before when you're doing the larps doing larps want to have the

105
00:05:21,100 --> 00:05:24,100
premium the alpha, pre multiplied into them already.

106
00:05:24,500 --> 00:05:29,700
And so if we wanted to make this a little more correct, I suspect what

107
00:05:29,700 --> 00:05:30,200
we would want.

108
00:05:30,200 --> 00:05:35,000
Want to do is take the alpha out of these guys and pre multiply it in

109
00:05:35,500 --> 00:05:38,700
right here after the gamma correction, if that makes sense.

110
00:05:38,900 --> 00:05:42,600
So, it would be something along the lines of, you know, for each of

111
00:05:42,600 --> 00:05:45,700
these textiles because, because we've kind of got it over.

112
00:05:46,700 --> 00:05:49,000
Let's see where we're doing that here.

113
00:05:51,200 --> 00:05:52,100
Let's see.

114
00:05:52,400 --> 00:05:58,200
So, when we load this in, we've got color a times color are times

115
00:05:58,200 --> 00:05:59,200
Texel are

116
00:06:00,100 --> 00:06:01,500
Unless we just okay.

117
00:06:01,500 --> 00:06:02,700
Is it this right here?

118
00:06:02,700 --> 00:06:04,800
RSA know.

119
00:06:04,800 --> 00:06:07,200
So this is did we remove something?

120
00:06:07,700 --> 00:06:08,900
So, this might not be correct.

121
00:06:08,900 --> 00:06:10,600
We may have forgotten something yesterday, because now that I'm

122
00:06:10,600 --> 00:06:12,400
starting to go through it with a fine-tooth comb here.

123
00:06:12,600 --> 00:06:13,200
I'm looking at this.

124
00:06:13,200 --> 00:06:18,800
Where are we actually doing our Alpha multiplied, right?

125
00:06:19,100 --> 00:06:26,300
Because I don't, I don't see it Texel a

126
00:06:27,300 --> 00:06:30,000
I don't see our multiply right.

127
00:06:30,400 --> 00:06:32,000
So I think we're I think it's missing.

128
00:06:33,900 --> 00:06:35,200
Do you guys feel the same way?

129
00:06:35,300 --> 00:06:38,600
I feel like we had it in here and I removed it accidentally.

130
00:06:38,600 --> 00:06:44,300
When we were doing this, I feel like it should be multiplied in here,

131
00:06:44,600 --> 00:06:45,200
right?

132
00:06:46,200 --> 00:06:47,200
And let's take a look.

133
00:06:47,200 --> 00:06:51,800
Let's see about the the the change in appearance that we get from

134
00:06:51,800 --> 00:06:52,100
this.

135
00:06:53,000 --> 00:06:54,900
Let me let me make our little.

136
00:06:56,900 --> 00:07:02,400
We do have a little bit of a of an issue with our Arts tree being

137
00:07:02,800 --> 00:07:06,100
Easy psychedelic right now, which is not going to be conducive for us,

138
00:07:06,100 --> 00:07:08,200
testing some stuff and debugging.

139
00:07:08,200 --> 00:07:11,200
So let's, let's put a little bit of a.

140
00:07:11,800 --> 00:07:13,500
Let's calm down.

141
00:07:13,500 --> 00:07:17,500
If you will this this sort of trippy psychedelic thing that's

142
00:07:17,500 --> 00:07:21,800
happening here with our tree, so that we can concentrate on on.

143
00:07:21,800 --> 00:07:24,600
Just what's happening with the actual renderer?

144
00:07:24,900 --> 00:07:27,700
That seems like probably a good idea to say the least.

145
00:07:27,800 --> 00:07:31,600
So, okay, so if we take a look at what's going on there,

146
00:07:32,700 --> 00:07:36,000
See if we can perceive any difference here as well because again, this

147
00:07:36,000 --> 00:07:39,500
will only really be in the edges for the most part.

148
00:07:39,500 --> 00:07:40,500
So let's take a look.

149
00:07:42,700 --> 00:07:47,400
So, if I come in here and I say, all right, at the very least, this,

150
00:07:47,700 --> 00:07:49,500
we're not doing the pre multiply properly.

151
00:07:49,500 --> 00:07:53,500
So we want, you know, our colors to be pre multiplied here.

152
00:07:53,700 --> 00:07:55,000
We just see what happens there.

153
00:07:55,600 --> 00:07:56,300
So, there we go.

154
00:07:56,400 --> 00:07:59,700
That would be if we, if we actually multiply it in the alpha.

155
00:07:59,700 --> 00:08:04,200
Now it's almost impossible to really see any difference there.

156
00:08:04,200 --> 00:08:07,900
This is an again, this is why I say a lot of times unfortunately, a

157
00:08:07,900 --> 00:08:11,700
lot of this stuff is kind of more about the thief.

158
00:08:11,900 --> 00:08:14,800
Article correctness than actually seeing artifacts on the screen

159
00:08:14,800 --> 00:08:19,800
because sometimes it's almost impossible to actually perceive that

160
00:08:20,000 --> 00:08:20,700
difference.

161
00:08:21,700 --> 00:08:22,400
But yes.

162
00:08:22,400 --> 00:08:24,800
Oh, yeah, can I see that?

163
00:08:24,800 --> 00:08:26,200
Not really.

164
00:08:28,000 --> 00:08:30,500
Yeah, that's that's just not.

165
00:08:31,700 --> 00:08:33,600
That's just not something you can really see.

166
00:08:34,400 --> 00:08:37,400
I know you and if I can't see it, you guys definitely can't see it

167
00:08:37,400 --> 00:08:41,400
because it's going to be kind of blurred out on, on the, on the

168
00:08:41,400 --> 00:08:41,799
stream.

169
00:08:42,100 --> 00:08:47,900
So, yeah, I would say, first of all, I feel like our textiles are not

170
00:08:48,700 --> 00:08:51,100
pre multiply properly here because we are not storing them,

171
00:08:51,100 --> 00:08:52,900
premultiplied was my understanding.

172
00:08:53,000 --> 00:08:54,500
Now, maybe I'm wrong about that.

173
00:08:54,600 --> 00:08:55,400
Let's go.

174
00:08:55,700 --> 00:08:57,200
Let me go look to see.

175
00:08:57,200 --> 00:08:59,300
Maybe we did actually do that.

176
00:08:59,600 --> 00:08:59,900
Like I said,

177
00:09:00,000 --> 00:09:01,000
Been a long time.

178
00:09:01,300 --> 00:09:03,600
So maybe in are loaded bitmap routine.

179
00:09:03,600 --> 00:09:07,700
We are storing them, premultiplied already in which case that is where

180
00:09:07,700 --> 00:09:08,300
that's coming from.

181
00:09:08,300 --> 00:09:09,800
So debug load bitmap.

182
00:09:10,700 --> 00:09:13,500
Are we pre multiplying the alpha in here, right?

183
00:09:14,700 --> 00:09:16,600
Okay, so we are so that's the answer.

184
00:09:17,300 --> 00:09:18,100
The answer is that.

185
00:09:18,100 --> 00:09:21,600
We are storing these guys pretty multiply it already and that's where

186
00:09:21,600 --> 00:09:22,100
that goes.

187
00:09:22,100 --> 00:09:27,400
So yeah if you think about what's happening there, then we are not

188
00:09:27,400 --> 00:09:29,400
doing the most correct thing, right?

189
00:09:29,600 --> 00:09:29,900
Because

190
00:09:30,000 --> 00:09:32,500
Cuz what happens here and at least again, most correct thing.

191
00:09:32,500 --> 00:09:35,700
I'm just saying this from my own personal opinion of the read on it,

192
00:09:35,700 --> 00:09:38,100
you know, like I said you probably want to ask more of rendering

193
00:09:38,100 --> 00:09:38,700
expert.

194
00:09:38,700 --> 00:09:44,400
But what's Happening Here is we're turning our textiles from srgb to

195
00:09:44,400 --> 00:09:48,400
linear but they've already been pre multiplied by the alpha out here.

196
00:09:48,500 --> 00:09:49,100
Right?

197
00:09:49,400 --> 00:09:54,200
And so technically we're not at the edges where we have partial Alpha.

198
00:09:54,400 --> 00:09:58,300
We're not actually getting back the correct srgb values because we're

199
00:09:58,300 --> 00:09:59,800
getting back the srgb values.

200
00:10:00,100 --> 00:10:03,300
They've already been pre multiplied and they were pre multiplied in

201
00:10:03,300 --> 00:10:07,400
srgb space which isn't necessarily what we want, right?

202
00:10:08,200 --> 00:10:13,100
And so, one way that we could sort of, look at handling this, right?

203
00:10:13,100 --> 00:10:15,900
If we wanted to be more correct, what we could do here is we could

204
00:10:15,900 --> 00:10:17,800
say, all right, let's not do that.

205
00:10:18,200 --> 00:10:22,300
So when we load our bitmaps, let's not pre multiply the alpha at.

206
00:10:22,300 --> 00:10:23,100
All right?

207
00:10:23,100 --> 00:10:24,000
Let's not do that.

208
00:10:24,000 --> 00:10:26,700
So if I do that, now obviously we're going to ruin everything else on

209
00:10:26,700 --> 00:10:29,200
the screen that's being blit.

210
00:10:29,200 --> 00:10:29,800
Certainly

211
00:10:30,200 --> 00:10:34,800
So that's a little bit of a problem but here we go.

212
00:10:35,700 --> 00:10:36,500
We start that.

213
00:10:38,900 --> 00:10:43,400
So everything but our tree will be wrong, which is, you know, not the

214
00:10:43,400 --> 00:10:44,000
best thing.

215
00:10:44,600 --> 00:10:48,700
But now in this case, when we are loading our bitmaps, they are

216
00:10:48,900 --> 00:10:51,700
correctly, not pre multiply, right?

217
00:10:52,000 --> 00:10:56,000
And if they're not be multiplied, then what I was saying, now becomes

218
00:10:56,000 --> 00:11:00,200
the correct thing to do, which is to say that when we do these and we

219
00:11:00,200 --> 00:11:04,900
load them and convert them into linear space, then we can do our our

220
00:11:05,000 --> 00:11:06,000
Alpha multiplied.

221
00:11:06,200 --> 00:11:07,800
So that's basically going to be like

222
00:11:08,200 --> 00:11:11,600
The RGB of the guy is going to be multiplied times.

223
00:11:11,600 --> 00:11:16,100
The a right, we convert all these guys from pre multiplied from, non P

224
00:11:16,100 --> 00:11:17,300
multiplied, to pre multiplied.

225
00:11:17,300 --> 00:11:23,300
So convert to premultiplied Alpha here, then the blend will happen

226
00:11:23,300 --> 00:11:27,400
correctly because we are in pre-multiplied space, which is where we

227
00:11:27,400 --> 00:11:29,600
want to do the Blends, so that happens properly.

228
00:11:30,500 --> 00:11:36,100
And then we can do, I believe the rest of this the way that we would

229
00:11:36,100 --> 00:11:37,700
want to do it now,

230
00:11:37,900 --> 00:11:46,700
Now we do have, I guess one other problem, which is thinking about it,

231
00:11:46,800 --> 00:11:56,000
when we output, we're going to want to Output our Alpha, our color

232
00:11:56,000 --> 00:11:58,900
values, want to be not pre multiplied at this point.

233
00:11:58,900 --> 00:11:59,800
So we've got kind of a little

234
00:12:00,000 --> 00:12:03,900
Work to do there, but I believe that that would actually be the

235
00:12:03,900 --> 00:12:06,500
correct thing to be doing there.

236
00:12:07,500 --> 00:12:11,200
If I'm not very much an error, which I might actually be, but I think

237
00:12:11,200 --> 00:12:12,100
that's correct.

238
00:12:12,100 --> 00:12:16,100
Now again it's really you just can't see the difference to allow these

239
00:12:16,100 --> 00:12:16,400
things.

240
00:12:16,400 --> 00:12:20,600
There really isn't any thing to see there, but I believe that would be

241
00:12:20,600 --> 00:12:21,700
more correct, right?

242
00:12:21,800 --> 00:12:24,600
Because now we're converting from srgb to linear.

243
00:12:24,600 --> 00:12:27,200
Then we're pre-multiplying then we're doing the lerp.

244
00:12:27,900 --> 00:12:29,300
Then we're doing the blend.

245
00:12:29,600 --> 00:12:31,800
And that is, I believe actually correct.

246
00:12:31,800 --> 00:12:34,500
Now, the only thing that I was saying that we aren't quite thinking

247
00:12:34,500 --> 00:12:37,800
about yet is what happens on repeated Blends.

248
00:12:37,900 --> 00:12:42,500
So if I'm, you know, kind of repeatedly blending to the screen, like,

249
00:12:42,500 --> 00:12:45,000
when we were producing our ground chunks, for example, where there's

250
00:12:45,000 --> 00:12:47,700
lots of slats that are layered on top of each other.

251
00:12:49,000 --> 00:12:55,500
I have to think about what happens there because I don't know, I don't

252
00:12:55,500 --> 00:12:57,600
think there's anything in particular, we have to

253
00:12:57,700 --> 00:12:59,000
Concerned about with that.

254
00:13:00,900 --> 00:13:05,900
It seems like it'd be correct but the Final Ground Splat I guess it

255
00:13:05,900 --> 00:13:08,400
doesn't really have the Final Ground spot doesn't really have any

256
00:13:08,400 --> 00:13:11,900
transparent Parts but if the grep Final Ground spot had transparent

257
00:13:11,900 --> 00:13:12,300
Parts.

258
00:13:12,500 --> 00:13:16,200
One of the problems that I think we would have right, is the RGB

259
00:13:16,200 --> 00:13:17,100
values in it?

260
00:13:17,100 --> 00:13:21,900
Are we were, we were outputting them as if the whole thing was pre

261
00:13:21,900 --> 00:13:22,600
multiplied.

262
00:13:22,800 --> 00:13:27,600
So that means that the values are actually P multiplied by the

263
00:13:27,600 --> 00:13:31,700
so, which is not what we would have wanted to have happen, right?

264
00:13:33,400 --> 00:13:34,900
So we'd have to kind of think about that, right?

265
00:13:34,900 --> 00:13:38,900
We'd have to kind of think through what that actually means.

266
00:13:39,400 --> 00:13:45,200
So it seems like you're kind of in this nasty situation where you

267
00:13:45,200 --> 00:13:48,800
really want your stuff to all be, premultiplied Alpha because you're

268
00:13:48,800 --> 00:13:52,500
constantly you constantly be fighting this thing of like storing.

269
00:13:53,300 --> 00:13:56,300
You know, incrementally storing to the three-month limit.

270
00:13:56,300 --> 00:13:57,400
Let's I don't know.

271
00:13:57,700 --> 00:14:00,600
Think it through on the white on the Blackboard because to be honest

272
00:14:00,600 --> 00:14:03,800
with you I don't even know really what the correct answer there would

273
00:14:03,800 --> 00:14:08,100
be right because that's pretty complicated and you don't actually do

274
00:14:08,100 --> 00:14:08,900
this in Hardware.

275
00:14:08,900 --> 00:14:12,700
You typically store the things already pre multiplied, that's just how

276
00:14:12,700 --> 00:14:13,300
that works.

277
00:14:14,000 --> 00:14:14,300
All right.

278
00:14:14,300 --> 00:14:19,400
So let's think about this if we were going to do this right?

279
00:14:20,500 --> 00:14:26,300
Then, you know, we've got srgb in a buffer, right?

280
00:14:26,700 --> 00:14:30,300
And we've got a so those are coming in and you know, I don't know will

281
00:14:30,300 --> 00:14:33,500
cause we'll call this color and Alpha or something like that, right?

282
00:14:33,700 --> 00:14:35,800
So this is what comes from the artist.

283
00:14:36,700 --> 00:14:37,100
Yeah.

284
00:14:38,000 --> 00:14:41,700
Now we know that we can do everything properly here if we do it in

285
00:14:41,700 --> 00:14:43,800
light linear space which we've already talked about this, what we

286
00:14:43,800 --> 00:14:44,600
talked about yesterday.

287
00:14:44,600 --> 00:14:48,000
So what we want to do is grab this C value, right?

288
00:14:48,300 --> 00:14:50,100
And we want to take the C value and turn it.

289
00:14:50,200 --> 00:14:51,900
Into linear, right?

290
00:14:52,100 --> 00:14:55,600
So we can do that by, let's say this is C and srgb.

291
00:14:56,000 --> 00:14:59,700
So then we have a c in in linear space, right?

292
00:15:00,000 --> 00:15:04,600
So, the sea and linear space, we can now do anything we want with, but

293
00:15:04,900 --> 00:15:10,100
we already know that our Alpha values don't actually work properly if

294
00:15:10,100 --> 00:15:13,600
we use lerp right without pre multiplying them.

295
00:15:13,900 --> 00:15:17,600
So we need to pre multiply it if we want to go through the lerp

296
00:15:17,600 --> 00:15:18,700
function, right?

297
00:15:19,700 --> 00:15:23,600
So, in order to do that, what we have to do is we have to do CL x a

298
00:15:23,900 --> 00:15:24,400
right?

299
00:15:25,300 --> 00:15:29,800
And we would then have that to work against, you know, some

300
00:15:30,000 --> 00:15:30,700
Um destination.

301
00:15:30,800 --> 00:15:35,600
So we would be producing CL times a and then eventually we would be

302
00:15:35,600 --> 00:15:38,300
writing that you know into a buffer, right?

303
00:15:38,600 --> 00:15:43,600
And that buffer now actually would have effectively premultiplied

304
00:15:43,600 --> 00:15:45,900
Alpha in the buffer, right?

305
00:15:46,200 --> 00:15:50,900
So if we wanted to, then use it in the same context as one of these

306
00:15:51,200 --> 00:15:56,300
artists applied ones, we pretty much would have to multiply by the

307
00:15:56,300 --> 00:15:59,900
inverse of the alpha value in order to

308
00:16:00,000 --> 00:16:01,400
To restore this, right?

309
00:16:01,400 --> 00:16:04,500
I mean because we're producing this because in order to go through

310
00:16:04,500 --> 00:16:05,900
lerp we have to do that.

311
00:16:06,000 --> 00:16:09,600
So if we wanted to put it back into this format, right, there's really

312
00:16:09,600 --> 00:16:13,200
not much we could do about that.

313
00:16:13,600 --> 00:16:19,800
Like, you know, we don't really have the option, I don't think of

314
00:16:21,100 --> 00:16:23,100
doing anything else, they're right?

315
00:16:23,200 --> 00:16:25,900
And that's the dicey proposition because multiplying by the, inverse

316
00:16:25,900 --> 00:16:28,600
of the alpha, the alpha could be 0, right?

317
00:16:28,900 --> 00:16:29,800
And so one over

318
00:16:29,900 --> 00:16:30,300
Zero.

319
00:16:30,300 --> 00:16:34,600
Right is not a value that you want to start having in your code

320
00:16:34,600 --> 00:16:36,600
because then you have to like special case that do all sorts of

321
00:16:36,600 --> 00:16:37,100
things.

322
00:16:37,700 --> 00:16:41,200
So I feel like, we just probably don't want to go this route, right?

323
00:16:41,200 --> 00:16:43,800
We want to store our values premultiplied if we can

324
00:16:45,000 --> 00:16:52,400
So what we could potentially do, I have to think about this but what

325
00:16:52,400 --> 00:16:58,100
we could do is say well what we want to have happen here is we maybe

326
00:16:58,100 --> 00:17:02,400
want to have the linear value from our colors, right?

327
00:17:02,500 --> 00:17:07,300
We want to say if we were to take the value as linear, then multiply

328
00:17:07,300 --> 00:17:10,800
by the alpha, then project it back to srgb.

329
00:17:10,900 --> 00:17:12,000
We'd store that value.

330
00:17:12,000 --> 00:17:14,400
So that when we pull it out, it's linear again.

331
00:17:15,000 --> 00:17:16,099
Right, it's the right thing.

332
00:17:16,099 --> 00:17:19,400
It's the it's a times C linear, right?

333
00:17:19,400 --> 00:17:24,599
Instead of a times c s projected to linear, right?

334
00:17:25,200 --> 00:17:31,300
So we could, you know, if you believe what I just said there, which

335
00:17:31,300 --> 00:17:33,600
you know, like I said, I'm not really rendering guy so I don't like

336
00:17:33,600 --> 00:17:35,300
the state these things, very authoritatively.

337
00:17:36,300 --> 00:17:40,000
Maybe, you know, we can only go by what we can determine on the

338
00:17:40,000 --> 00:17:41,800
Whiteboard and like I said, a lot of these things.

339
00:17:41,800 --> 00:17:44,700
It's hard to see the artifacts so we can't really guide

340
00:17:44,800 --> 00:17:49,100
Can't really use what it looks like as a guide.

341
00:17:49,100 --> 00:17:52,000
We'd have to start thinking about it more mathematically and actually

342
00:17:52,000 --> 00:17:55,600
maybe we could write some little tests that would draw things and test

343
00:17:55,600 --> 00:17:58,600
the values that come out versus some things, we think should happen,

344
00:17:58,600 --> 00:17:59,500
you know, that sort of thing.

345
00:17:59,600 --> 00:17:59,800
But we

346
00:18:00,000 --> 00:18:03,500
It really make much in the way of decisions about whether it's

347
00:18:03,500 --> 00:18:06,500
important for the game because they really just always look the same

348
00:18:06,500 --> 00:18:07,100
some level.

349
00:18:07,900 --> 00:18:11,800
So what we could do is say, alright, let's store the, the

350
00:18:11,800 --> 00:18:13,200
premultiplied alpha values.

351
00:18:13,400 --> 00:18:15,000
But instead of

352
00:18:18,000 --> 00:18:23,200
Storing them the way we were where we multiplied by the alpha value.

353
00:18:23,400 --> 00:18:27,300
Maybe what we do here is we do this sort of lofting where we do the

354
00:18:27,300 --> 00:18:30,200
srgb to linear in here, right?

355
00:18:30,800 --> 00:18:35,300
So we say, alright, let's let's go ahead and read in whatever this the

356
00:18:35,300 --> 00:18:37,900
bitmaps Texel the Texel value is there, right?

357
00:18:39,100 --> 00:18:41,900
Let's go ahead and read that in like, we were reading in the other

358
00:18:41,900 --> 00:18:46,700
stuff and, and where we've got, you know, are red.

359
00:18:46,700 --> 00:18:48,800
The top are green

360
00:18:50,200 --> 00:18:53,800
so, and our blue here like so,

361
00:18:55,000 --> 00:18:59,700
And Alpha, let's read that in and then let's Loft it up.

362
00:18:59,700 --> 00:19:01,500
Just like we were doing before.

363
00:19:01,500 --> 00:19:06,700
So you know, take that textile and turn it into, you know, a textile

364
00:19:06,700 --> 00:19:09,000
that that's that's linear right?

365
00:19:09,400 --> 00:19:14,500
And once we do that, then maybe we say all right, at that point we

366
00:19:14,500 --> 00:19:19,600
take the textile and we multiply the textiles RGB right by it's a.

367
00:19:19,600 --> 00:19:24,600
So we do the pre multiplication for Alpha and then before we store it.

368
00:19:25,000 --> 00:19:26,900
We project it right?

369
00:19:26,900 --> 00:19:28,500
Right on back, right?

370
00:19:28,600 --> 00:19:34,800
We do the linear 12s RGB 255 in there, and then when we store it,

371
00:19:34,800 --> 00:19:38,400
we're storing a value that we know when we pull out the value again,

372
00:19:38,600 --> 00:19:43,500
it's going to give us the correct, premultiplied value in that linear

373
00:19:43,500 --> 00:19:44,900
space, right?

374
00:19:45,400 --> 00:19:46,600
Hopefully, that makes some sense.

375
00:19:46,600 --> 00:19:49,500
I don't know if that made sense to you guys, but hopefully that makes

376
00:19:49,500 --> 00:19:49,900
some sense.

377
00:19:49,900 --> 00:19:53,200
And then we kill this premultiplied Alpha here because we just assume

378
00:19:53,200 --> 00:19:54,600
that they're always in Primo.

379
00:19:54,700 --> 00:19:56,700
It applied Alpha all the time.

380
00:19:56,800 --> 00:19:58,100
Anyway, right.

381
00:19:59,100 --> 00:20:02,300
RGB is not a member.

382
00:20:03,400 --> 00:20:04,300
What

383
00:20:06,100 --> 00:20:06,800
Serious.

384
00:20:06,800 --> 00:20:07,700
Are you serious?

385
00:20:09,700 --> 00:20:12,300
Well, you know it's true, it's not a member.

386
00:20:13,400 --> 00:20:16,200
Well let's let's fix that, I guess.

387
00:20:17,200 --> 00:20:18,400
So, here's our Union.

388
00:20:19,000 --> 00:20:22,300
So I guess what we'd do is we'd say alright let's go ahead and have an

389
00:20:22,300 --> 00:20:24,700
RGB in a relay in there.

390
00:20:26,800 --> 00:20:32,000
Like so I guess although well this a and this, a will collide.

391
00:20:32,000 --> 00:20:35,600
So I guess technically for pushing it a little bit here.

392
00:20:36,100 --> 00:20:38,200
We do this, right?

393
00:20:48,700 --> 00:20:51,700
It's a little gross, it's true but there we go.

394
00:20:53,800 --> 00:20:58,400
So yeah, so that when we load now we should probably verify did a

395
00:20:58,400 --> 00:20:59,300
bunch of stuff there but

396
00:21:00,200 --> 00:21:01,800
That when we load now.

397
00:21:03,200 --> 00:21:04,300
Well, it doesn't look like that.

398
00:21:04,300 --> 00:21:08,800
Quite did what I was hoping.

399
00:21:13,200 --> 00:21:16,800
After that, that looks like the background there is still.

400
00:21:16,900 --> 00:21:20,700
So I guess the, the other thing that I have to think about there is

401
00:21:20,700 --> 00:21:23,100
what that yeah.

402
00:21:23,100 --> 00:21:23,600
So

403
00:21:24,800 --> 00:21:25,900
Now, that I think about it.

404
00:21:25,900 --> 00:21:30,000
That's fine for our routines that are actually gamma aware, but our

405
00:21:30,000 --> 00:21:33,300
routines that aren't gamma where are going to cause a problem now,

406
00:21:33,300 --> 00:21:33,400
right?

407
00:21:33,400 --> 00:21:38,500
Because they don't actually do the conversion back afterwards.

408
00:21:38,500 --> 00:21:44,600
So, you know, this is now going to be a value that produces a blend.

409
00:21:44,600 --> 00:21:47,100
That's kind of a little bit unusual, right?

410
00:21:47,100 --> 00:21:52,200
So we have to we'd have to go and and modify our other routines to be

411
00:21:52,200 --> 00:21:54,600
aware of that which is fine because they're all, we're all going to

412
00:21:54,900 --> 00:21:57,300
To doing all this stuff through that main path.

413
00:21:57,300 --> 00:21:58,900
Anyway, so I suppose that's fine.

414
00:21:59,600 --> 00:22:05,000
We could just say, all right in our drawbitmap call that we have that,

415
00:22:05,100 --> 00:22:10,200
you know, this one right here, we could do that, that that conversion,

416
00:22:10,200 --> 00:22:11,700
that handling as well, right?

417
00:22:11,800 --> 00:22:13,100
That's not that big of a deal.

418
00:22:13,400 --> 00:22:18,400
All we would really have to do is say, all right, when we load the

419
00:22:18,400 --> 00:22:22,800
srgb is here, we could just we could just upconvert them, right?

420
00:22:23,200 --> 00:22:24,200
So yeah.

421
00:22:24,200 --> 00:22:24,700
So

422
00:22:24,800 --> 00:22:27,800
Let's do that, that's not that huge of a deal, right?

423
00:22:27,900 --> 00:22:30,300
And that way will at least be uniform in both past.

424
00:22:30,300 --> 00:22:33,000
I guess the other thing we could do is just ignore it for now.

425
00:22:33,000 --> 00:22:36,800
And until we actually have everything going through drawbitmap slowly,

426
00:22:37,400 --> 00:22:39,100
which I guess is the other thing we could do.

427
00:22:40,700 --> 00:22:42,000
Mmm-hmm.

428
00:22:44,400 --> 00:22:46,100
I think I'm going to just poured it for now.

429
00:22:46,100 --> 00:22:47,300
I think that's the easier thing to do.

430
00:22:47,300 --> 00:22:49,100
So we don't have to get too ahead of ourselves.

431
00:22:50,100 --> 00:22:52,500
So yeah, so alright, what we would do to me

432
00:22:53,400 --> 00:22:58,200
Well we would need to do here is we need to again, load the textiles,

433
00:22:58,200 --> 00:23:00,500
just the way that we have been doing it before, right?

434
00:23:00,500 --> 00:23:04,700
So, we've got all of these guys here and that c Alpha is going to have

435
00:23:04,700 --> 00:23:06,800
to happen down here somewhere, right?

436
00:23:06,800 --> 00:23:11,900
So Texel RGB is going to have to multiply it by C Alpha outside there.

437
00:23:11,900 --> 00:23:19,300
Now so if I go ahead and take this guy here, right, and I've got all

438
00:23:19,300 --> 00:23:22,500
of these guys, real 52, that loops.

439
00:23:23,400 --> 00:23:25,400
Do not real pretty too.

440
00:23:25,600 --> 00:23:27,000
Like so that's their get.

441
00:23:27,000 --> 00:23:32,500
My, our Mig might be and the a value here this.

442
00:23:33,600 --> 00:23:35,200
So we've got all those in the Texel.

443
00:23:35,800 --> 00:23:41,400
I do the srgb to linear of that Texel as always.

444
00:23:41,600 --> 00:23:48,200
So the grab the textile out, we do the srgb to linear we multiply by

445
00:23:48,200 --> 00:23:49,100
the alpha.

446
00:23:49,500 --> 00:23:52,700
And we produce also the

447
00:23:53,300 --> 00:23:54,800
The textile a here.

448
00:23:55,300 --> 00:23:59,000
We don't need to do that / 255 because that's already baked into this

449
00:23:59,000 --> 00:23:59,600
guy now.

450
00:24:00,000 --> 00:24:01,400
um, and

451
00:24:04,300 --> 00:24:07,400
when we, when we compute this, we gotta multiply the RSA by the clf as

452
00:24:07,400 --> 00:24:07,600
well.

453
00:24:07,600 --> 00:24:08,400
So that's fine.

454
00:24:09,000 --> 00:24:11,700
We then go ahead and read out that destination.

455
00:24:12,200 --> 00:24:13,900
The destination.

456
00:24:14,900 --> 00:24:17,500
We would also like to up convert, right?

457
00:24:17,800 --> 00:24:18,300
Because

458
00:24:20,500 --> 00:24:22,200
We said we're doing the frame buffer, that way.

459
00:24:23,400 --> 00:24:29,700
So are dest our desks here whatever we call that D.

460
00:24:30,600 --> 00:24:33,400
That's going to be another one of these reads off we go.

461
00:24:36,000 --> 00:24:36,500
so,

462
00:24:39,000 --> 00:24:44,600
There's our Alpha goes at the end, so there's our g b and a, so, the

463
00:24:44,600 --> 00:24:51,600
RGB and a values, grab those art out, we can then convert that text as

464
00:24:51,600 --> 00:24:51,900
well.

465
00:24:51,900 --> 00:24:56,900
So D equals srgb to linear D, so then we can do everything.

466
00:24:56,900 --> 00:24:58,700
Like we were going to do with the blend.

467
00:24:59,200 --> 00:25:02,500
We do we have checked that math, rarest course.

468
00:25:02,500 --> 00:25:03,300
We're changing the math.

469
00:25:03,300 --> 00:25:08,100
Now then we compute, what we would actually want to do in terms of

470
00:25:08,500 --> 00:25:10,700
Of putting it back.

471
00:25:11,000 --> 00:25:15,900
And in this case, what we really want to do is actually just make this

472
00:25:16,800 --> 00:25:18,400
beep, sort of what we're going to write.

473
00:25:18,400 --> 00:25:20,300
So this is our result right?

474
00:25:20,800 --> 00:25:25,800
In our result, is going to be all these values when you put them in a

475
00:25:25,800 --> 00:25:26,100
vector.

476
00:25:26,100 --> 00:25:29,200
So I can on map them, there's our in.

477
00:25:29,600 --> 00:25:30,200
So

478
00:25:31,500 --> 00:25:31,900
Yeah.

479
00:25:33,700 --> 00:25:41,500
Oops, got my equals and so that that should do it, right?

480
00:25:41,500 --> 00:25:46,000
And then we can just take result and do linear to srgb on it before

481
00:25:46,200 --> 00:25:47,800
writing it out.

482
00:25:48,200 --> 00:25:52,600
And I think that converts that routine if I haven't made some

483
00:25:53,100 --> 00:25:58,400
egregious errors in their into something that will actually write got

484
00:25:58,400 --> 00:26:01,000
to actually use the values that we said we were going.

485
00:26:01,100 --> 00:26:01,800
Hughes.

486
00:26:04,700 --> 00:26:09,300
There's the text will read, text will read Texel.

487
00:26:10,600 --> 00:26:16,100
Green Texel blue, and the RSA RDA.

488
00:26:16,100 --> 00:26:17,800
Those sorts of guys are all good.

489
00:26:18,700 --> 00:26:20,300
What is the problem here?

490
00:26:20,300 --> 00:26:21,100
Oh, that's not dust.

491
00:26:21,100 --> 00:26:22,100
It's Dee.

492
00:26:24,400 --> 00:26:30,600
RDA is Undeclared RDA, in this case is just the destination, a right?

493
00:26:30,600 --> 00:26:33,700
It doesn't have anything special happening to it.

494
00:26:33,700 --> 00:26:36,100
RSA is that reversed?

495
00:26:36,100 --> 00:26:37,000
RSA there.

496
00:26:37,900 --> 00:26:38,300
I'm sorry.

497
00:26:38,300 --> 00:26:42,500
RSA is just the the compounded one.

498
00:26:43,000 --> 00:26:45,200
And then RDA did I do?

499
00:26:45,400 --> 00:26:46,300
What did I do there?

500
00:26:49,700 --> 00:26:50,700
RSA.

501
00:26:51,000 --> 00:26:51,900
Okay that was a typo.

502
00:26:51,900 --> 00:26:53,200
Sorry RSA.

503
00:26:53,200 --> 00:26:58,600
So this should be D A and B should be ta and RSA stays what it was.

504
00:26:59,400 --> 00:26:59,800
So

505
00:27:00,200 --> 00:27:04,500
When we are doing this, we multiply all of these guys out.

506
00:27:04,500 --> 00:27:10,200
So technically RSA, we can just actually do the full multiply here,

507
00:27:10,200 --> 00:27:10,300
right?

508
00:27:10,300 --> 00:27:12,100
Because these are both be multiplied by the same thing.

509
00:27:12,300 --> 00:27:18,100
So we can actually just say textile x, c Alpha and then RSA, right is

510
00:27:18,200 --> 00:27:20,100
is just the same value.

511
00:27:20,100 --> 00:27:22,800
RSA is just Texel that a right.

512
00:27:23,400 --> 00:27:25,900
So, I think that should pretty much do it.

513
00:27:25,900 --> 00:27:28,500
And does that jive with what we're doing up here as well?

514
00:27:29,300 --> 00:27:29,800
I guess we are.

515
00:27:30,000 --> 00:27:32,600
Still doing it here for no apparent reason.

516
00:27:32,600 --> 00:27:35,700
Yeah, no apparent reason whatsoever.

517
00:27:36,000 --> 00:27:38,900
And so really, we can, we can collapse these to do the same stuff and

518
00:27:38,900 --> 00:27:41,500
again, they will be the same eventually, we'll probably have all this

519
00:27:41,500 --> 00:27:42,000
stuff collapse down.

520
00:27:42,000 --> 00:27:46,500
Anyway but you know, for the time being I guess we will kind of avoid

521
00:27:46,500 --> 00:27:46,800
doing that.

522
00:27:46,800 --> 00:27:50,700
So in virus a will leave already a, we'll get rid of we'll just make

523
00:27:50,700 --> 00:27:55,900
this desk dot a and we'll make this desk today and then that RSA is

524
00:27:55,900 --> 00:27:59,800
again just going to be Texel dot, a tech, slow day.

525
00:28:00,300 --> 00:28:01,100
Like so-and-so.

526
00:28:01,700 --> 00:28:02,800
Textile dot a.

527
00:28:03,500 --> 00:28:07,300
Now needs to actually have this done to it, but so does this color a

528
00:28:07,300 --> 00:28:09,500
have happened to have to do the multiplication there.

529
00:28:09,900 --> 00:28:12,800
So, we're just going to do again, that, that exact same thing.

530
00:28:12,800 --> 00:28:16,100
So Texel X, the x equals x tilde

531
00:28:17,500 --> 00:28:18,100
Right.

532
00:28:19,600 --> 00:28:20,900
I'm sorry colored a day.

533
00:28:23,600 --> 00:28:24,000
There we go.

534
00:28:25,700 --> 00:28:31,900
So yeah, I believe that does the same thing on both paths right there.

535
00:28:31,900 --> 00:28:36,700
We've got that c Alpha right looks about right?

536
00:28:37,100 --> 00:28:38,900
The RSA has to be colored Ade.

537
00:28:38,900 --> 00:28:44,600
Now RSA has to be color dot a, I'm sorry, textile dot a, that was a

538
00:28:45,400 --> 00:28:47,700
steak there Texel daughter.

539
00:28:49,800 --> 00:28:52,000
Yeah, so let's see.

540
00:28:52,400 --> 00:28:55,700
See how that's looking whether that's a total nightmare or not.

541
00:28:57,000 --> 00:28:59,100
We should probably stop generating the grant.

542
00:28:59,100 --> 00:28:59,700
Oh dear.

543
00:29:01,600 --> 00:29:02,400
Well, it did not go.

544
00:29:02,400 --> 00:29:06,200
Well, we can say that obviously we're not quite

545
00:29:08,700 --> 00:29:11,500
You gotta love it when you get a full blank screen, right?

546
00:29:11,500 --> 00:29:16,600
You just, you just tweak a few things and all of a sudden, you've got

547
00:29:16,600 --> 00:29:19,100
an entirely blank screen to contend with.

548
00:29:22,200 --> 00:29:23,000
Oh, okay.

549
00:29:23,000 --> 00:29:23,900
No, we're good.

550
00:29:23,900 --> 00:29:24,400
Never mind.

551
00:29:24,400 --> 00:29:27,400
It's just because now everything so much slower, because we have this

552
00:29:27,400 --> 00:29:30,100
ridiculously slow path, it just takes forever to draw all the ground

553
00:29:30,100 --> 00:29:31,400
chunks, so that's fine.

554
00:29:31,900 --> 00:29:33,100
Yeah, no big deal.

555
00:29:33,300 --> 00:29:35,500
And so now you can see we've restored everything back.

556
00:29:35,500 --> 00:29:40,000
Our compositing of the background looks proper and our tree is still

557
00:29:40,000 --> 00:29:43,100
our tree nothing particularly weird happening there.

558
00:29:44,200 --> 00:29:45,400
But yeah.

559
00:29:45,400 --> 00:29:48,800
So so alright I think we're getting a little closer just in terms of

560
00:29:48,800 --> 00:29:51,200
stuff, but now we're super slow, because all of our stuff is

561
00:29:51,600 --> 00:29:52,300
Really slow.

562
00:29:52,600 --> 00:29:55,400
And so, you know, one thing we probably should have to start thinking

563
00:29:55,400 --> 00:29:59,200
about this point is how we're going to make sure our software renderer

564
00:29:59,200 --> 00:29:59,600
runs.

565
00:30:00,000 --> 00:30:00,500
They quickly.

566
00:30:00,500 --> 00:30:07,200
Now, of course, at this point, it may actually be true that that we

567
00:30:07,700 --> 00:30:08,100
doing.

568
00:30:09,700 --> 00:30:15,100
That if we actually asked for compiling with optimizations on, we

569
00:30:15,100 --> 00:30:18,800
would get a pretty good boost here because we're not actually asking

570
00:30:18,800 --> 00:30:19,300
for that at all.

571
00:30:19,300 --> 00:30:21,900
So, let me see, I've got my Saudi there.

572
00:30:21,900 --> 00:30:25,100
Let me let me switch it to 0-2 and see what the difference is.

573
00:30:25,700 --> 00:30:27,900
Because now we've actually got routines that it matters how fast

574
00:30:27,900 --> 00:30:30,500
they're like, wow, what a difference that is.

575
00:30:30,900 --> 00:30:35,900
Look at how fast that runs with optimizations on, right versus how

576
00:30:35,900 --> 00:30:38,100
fast it runs with optimizations off.

577
00:30:38,500 --> 00:30:39,400
Okay, that's

578
00:30:39,600 --> 00:30:41,200
That was on here is off.

579
00:30:42,300 --> 00:30:48,000
But it's it's incredibly slower and and that's because we're actually

580
00:30:48,000 --> 00:30:49,800
doing a bunch of intensive code there.

581
00:30:49,800 --> 00:30:54,100
And so, if the optimizer actually, you know, does some, even just

582
00:30:54,100 --> 00:30:57,100
basic things to, it's probably makes a huge difference.

583
00:30:57,100 --> 00:30:59,300
I mean, look at this, it's not even up yet.

584
00:30:59,500 --> 00:31:02,500
After all this time, kind of ridiculous, right?

585
00:31:03,000 --> 00:31:05,200
And you can see the frame rate is atrocious.

586
00:31:06,000 --> 00:31:08,300
And so, the difference between compiling and debug mode and compiling

587
00:31:08,300 --> 00:31:10,400
an optimization mode.

588
00:31:10,400 --> 00:31:12,000
When you have a situation like this, where

589
00:31:12,100 --> 00:31:15,500
You're manually doing all of these operations to all the pixels on the

590
00:31:15,500 --> 00:31:20,400
screen all the time, debug versus non debug makes a pretty tremendous

591
00:31:20,400 --> 00:31:22,100
difference as you can see.

592
00:31:23,100 --> 00:31:30,500
So you will have to take some steps, probably to make sure that we put

593
00:31:30,500 --> 00:31:33,200
ourselves in a position where we can deal with that relatively.

594
00:31:33,200 --> 00:31:36,000
Well, meaning, we'll have to start making some concessions that allow

595
00:31:36,000 --> 00:31:41,000
us to compile some stuff in, in optimized land as opposed to

596
00:31:41,000 --> 00:31:41,900
non-optimized land.

597
00:31:42,000 --> 00:31:43,600
While not having to compile everything there.

598
00:31:43,600 --> 00:31:50,300
So what we'll probably do is split our build into two files for the

599
00:31:50,300 --> 00:31:52,000
handmade that sleepy.

600
00:31:52,300 --> 00:31:57,000
One of the files will be the renderer pixel routines, which will get

601
00:31:57,000 --> 00:31:58,200
optimizations turned on.

602
00:31:58,200 --> 00:32:01,500
And the rest, won't have it turned on in our normal build so that we

603
00:32:01,500 --> 00:32:03,000
can still have to bugging everywhere else.

604
00:32:05,100 --> 00:32:08,500
If that makes sense, it's kind of annoying.

605
00:32:08,500 --> 00:32:13,500
But unfortunately, the pragma optimize directives, don't seem to

606
00:32:13,500 --> 00:32:17,300
usually give you what you need to turn on heavy optimization in just

607
00:32:17,300 --> 00:32:20,800
one little chunk and so there's really not a lot of ways to deal with

608
00:32:20,800 --> 00:32:25,800
that other than splitting out the optimize routines into one file.

609
00:32:25,800 --> 00:32:26,300
But anyway,

610
00:32:28,400 --> 00:32:29,500
So let's take a look at that.

611
00:32:29,500 --> 00:32:32,700
Again just to just to sort of wrap that up.

612
00:32:33,400 --> 00:32:35,000
So what we're doing here, right?

613
00:32:35,000 --> 00:32:36,900
Is in our draw a rectangle slowly.

614
00:32:37,200 --> 00:32:42,200
We're assuming now that we've stored, our values pre multiplied by the

615
00:32:42,200 --> 00:32:43,600
alpha value, right?

616
00:32:44,400 --> 00:32:47,500
But we've pretty multiplied it in linear space and then convert it

617
00:32:47,500 --> 00:32:48,300
back to srgb.

618
00:32:48,300 --> 00:32:54,300
So this conversion is converting a value that's already in,

619
00:32:54,300 --> 00:32:55,900
premultiplied Alpha in.

620
00:32:55,900 --> 00:32:58,000
That's been baked in srgb back into

621
00:32:58,100 --> 00:32:59,900
Linear where we can do our lips with.

622
00:33:00,000 --> 00:33:02,700
Premultiplied Alpha in there, right?

623
00:33:02,800 --> 00:33:06,200
We then do all of our stuff and then we store it back still

624
00:33:06,200 --> 00:33:07,800
premultiplied, right?

625
00:33:08,300 --> 00:33:12,300
Although it looks like correct me if I'm wrong here but we took care

626
00:33:12,900 --> 00:33:13,700
of know we did.

627
00:33:13,700 --> 00:33:14,500
So that's fine.

628
00:33:14,700 --> 00:33:16,900
The RGB still got to be multiplied there, right?

629
00:33:17,000 --> 00:33:19,900
The color a, we took care of out here, but we didn't take care of the

630
00:33:19,900 --> 00:33:21,000
rest of it, right?

631
00:33:21,900 --> 00:33:22,600
So that's all people.

632
00:33:22,600 --> 00:33:23,400
That's all fine.

633
00:33:23,400 --> 00:33:24,600
That P multiplied is fine.

634
00:33:26,400 --> 00:33:29,900
We could also save a little work here if you think about it, we

635
00:33:30,000 --> 00:33:35,900
We really could just multiply have have pre multiplied color first and

636
00:33:35,900 --> 00:33:38,700
then just done the Straight Ahead multiply, right?

637
00:33:40,800 --> 00:33:41,800
That's something to think about.

638
00:33:41,800 --> 00:33:44,800
Like, for example, this right here could just be

639
00:33:47,100 --> 00:33:47,600
Best.

640
00:33:52,400 --> 00:33:59,600
That would allow us to not have to do that extra multiply of the a

641
00:33:59,600 --> 00:34:04,000
every time because what we would do is we just out here, we'd take

642
00:34:04,000 --> 00:34:07,000
color and pre multiply it first, right?

643
00:34:07,000 --> 00:34:10,199
So we do like pre multiply

644
00:34:11,400 --> 00:34:12,000
Color.

645
00:34:13,900 --> 00:34:16,699
Up front and so we just do.

646
00:34:17,900 --> 00:34:19,800
That right.

647
00:34:20,199 --> 00:34:21,000
And so,

648
00:34:22,400 --> 00:34:25,900
Probably worth doing in my opinion because if you pre multiply the

649
00:34:25,900 --> 00:34:29,400
color up front, then that means that you save One X, the alpha every

650
00:34:29,400 --> 00:34:32,600
time because now you just multiply by the are, which already has color

651
00:34:32,600 --> 00:34:37,400
a multiplied in and so you don't have to both X the A, and by the are

652
00:34:37,699 --> 00:34:40,800
so that just sets us up for, you know, a better time when we actually

653
00:34:40,800 --> 00:34:42,800
go to do the optimization there.

654
00:34:43,000 --> 00:34:44,900
So that seems reasonable right.

655
00:34:46,000 --> 00:34:46,400
Okay.

656
00:34:48,000 --> 00:34:51,800
So yeah, that's all seems pretty good.

657
00:34:51,900 --> 00:34:55,800
We have about 20 minutes left, I'm not sure I want to start doing the

658
00:34:55,800 --> 00:34:57,000
thing that I was going to do.

659
00:34:57,000 --> 00:35:00,900
Just because I took a bunch of time kind of going through that that

660
00:35:00,900 --> 00:35:01,800
premultiplied Alpha stuff.

661
00:35:01,800 --> 00:35:02,700
But yeah.

662
00:35:02,800 --> 00:35:05,000
So let's just continue down here.

663
00:35:05,000 --> 00:35:08,300
So we grabbed our values at which now are already pre multiplied.

664
00:35:08,300 --> 00:35:10,900
When we do our conversion up, we do our lips which should work because

665
00:35:10,900 --> 00:35:12,100
we're in premultiplied space.

666
00:35:12,100 --> 00:35:13,100
Hopefully, that's the goal.

667
00:35:13,100 --> 00:35:15,300
Anyway, we then multiply by our

668
00:35:15,500 --> 00:35:18,000
Modulation color which is basically the color that we use to tint

669
00:35:18,000 --> 00:35:18,600
things here.

670
00:35:18,600 --> 00:35:22,200
Like r g b values that you know we went want to change and the alpha

671
00:35:22,200 --> 00:35:25,700
value which allows us to trains change how transparent this thing is

672
00:35:26,600 --> 00:35:30,600
as a whole we read out whatever is in the current destination and we

673
00:35:30,600 --> 00:35:37,000
assume that that was in srgb as well because you know, we are going to

674
00:35:37,000 --> 00:35:37,800
store it that way.

675
00:35:37,900 --> 00:35:41,300
So we convert that up, we compute the inverse of the alpha.

676
00:35:41,300 --> 00:35:44,400
That's now had both the textiles Alpha and the color is Alpha

677
00:35:44,500 --> 00:35:45,300
multiplied together in there.

678
00:35:45,500 --> 00:35:49,100
Are we do the blend in linear space, right?

679
00:35:49,200 --> 00:35:54,500
We then convert from our linear space, premultiplied back into the

680
00:35:54,500 --> 00:35:55,300
frame buffer.

681
00:35:56,300 --> 00:35:58,600
And we output, right?

682
00:35:59,400 --> 00:35:59,800
So

683
00:36:00,000 --> 00:36:07,000
I believe that is a pretty correct math pipeline but I could be

684
00:36:07,000 --> 00:36:08,100
missing something still, right?

685
00:36:08,100 --> 00:36:11,300
So if there is somebody out there, who's a serious render fellow?

686
00:36:11,900 --> 00:36:13,100
Who sees anything missing?

687
00:36:13,100 --> 00:36:16,300
I would highly appreciate you taking the time to let us know, but

688
00:36:16,300 --> 00:36:18,500
that's seems roughly, right?

689
00:36:20,300 --> 00:36:21,400
Seems roughly, right?

690
00:36:21,700 --> 00:36:25,700
And like I said, one of the big problems with stuff like this is, you

691
00:36:25,700 --> 00:36:30,200
know, it would be nice if we could just run it and see when it was

692
00:36:30,200 --> 00:36:33,700
wrong but we're not going to really have that.

693
00:36:33,700 --> 00:36:36,700
You know, only really gross errors are often going to show up that

694
00:36:36,700 --> 00:36:37,000
way.

695
00:36:37,000 --> 00:36:41,800
And so what we could do down the line when we're kind of done with the

696
00:36:41,800 --> 00:36:46,000
renderer stuff a little bit is we could make some tests if we can

697
00:36:46,000 --> 00:36:50,300
think of any good test to do that would sort of try to suss out.

698
00:36:50,400 --> 00:36:54,700
Any places where we may be doing our conversions wrong, that might be

699
00:36:54,700 --> 00:36:56,800
something we could, we could look at.

700
00:36:56,900 --> 00:36:57,300
All right.

701
00:36:58,300 --> 00:37:02,300
All right, so let's just do a little bit of cleanup then since we have

702
00:37:02,300 --> 00:37:06,600
15 minutes to go, I think probably rather than start something new

703
00:37:06,600 --> 00:37:08,600
what I'd like to do is just clean up a few things.

704
00:37:08,800 --> 00:37:11,700
So if you remember correctly, in our render group, right?

705
00:37:12,800 --> 00:37:17,700
I had said remove the header and removing the header is a good idea.

706
00:37:17,700 --> 00:37:21,000
I think removing the header is something we should probably do.

707
00:37:21,400 --> 00:37:24,700
So, if you remember, we were doing this is we had a buffer where we

708
00:37:24,700 --> 00:37:28,100
would put in all of the things that we wanted to send to the renderer

709
00:37:28,300 --> 00:37:31,400
but each one of them had to have this render group entry header thing

710
00:37:32,000 --> 00:37:34,900
and that's a little error-prone and there's really no reason to do it.

711
00:37:35,300 --> 00:37:38,200
I just kind of did it because we were, you know, that was how it shook

712
00:37:38,200 --> 00:37:39,000
out when we typed it.

713
00:37:39,000 --> 00:37:42,400
But we don't really need that because what we can do instead is

714
00:37:42,600 --> 00:37:45,500
You can just have our stream encode and decode here.

715
00:37:45,500 --> 00:37:48,800
When we push things on to the firm, when we pull them off, we can just

716
00:37:48,800 --> 00:37:51,600
have that know that it looks for a tight first, right?

717
00:37:52,000 --> 00:37:53,500
Really, really straightforward.

718
00:37:53,700 --> 00:37:56,000
So what I would suggest that we do,

719
00:37:58,100 --> 00:38:00,300
Is again, just we go ahead and do that.

720
00:38:00,300 --> 00:38:04,300
So we take a look in here where we're actually pushing stuff on.

721
00:38:04,300 --> 00:38:08,900
First of all, when we push render elements on there and all we have to

722
00:38:08,900 --> 00:38:12,400
do is say, whatever the size is that the person is trying to push on.

723
00:38:12,600 --> 00:38:16,600
Let's just go ahead and increase that size by.

724
00:38:16,600 --> 00:38:21,900
However big the header is right that way when we push it on there we

725
00:38:21,900 --> 00:38:27,800
will sort of get the header right first and then we will also

726
00:38:28,100 --> 00:38:31,900
Get space for for the rest of the thing, right?

727
00:38:32,200 --> 00:38:36,200
And so we can go ahead and set the header and set its type in the

728
00:38:36,200 --> 00:38:38,500
buffer and again, I'm just doing right.

729
00:38:38,500 --> 00:38:43,200
I'm just saying, well, we've got sort of this this buffer here, right?

730
00:38:43,700 --> 00:38:47,500
And what we were doing before is we were pushing something onto it,

731
00:38:47,700 --> 00:38:48,100
right?

732
00:38:48,200 --> 00:38:51,800
That's a took this much size and we knew that the first thing of it

733
00:38:51,800 --> 00:38:53,500
was this header, right?

734
00:38:54,000 --> 00:38:56,900
And so, we would return it and then the caller would go.

735
00:38:56,900 --> 00:38:57,800
Okay, thanks for this.

736
00:38:57,900 --> 00:38:59,900
This header piece, I'm going to set that.

737
00:39:00,200 --> 00:39:01,400
In the thing, right?

738
00:39:01,400 --> 00:39:04,400
It was looking at this guy and what I'm saying now is well, let's just

739
00:39:04,400 --> 00:39:06,900
talk about it in terms of doing two sequential pushes.

740
00:39:06,900 --> 00:39:11,000
So when we push it first, we push the header on and then we push the

741
00:39:11,000 --> 00:39:14,900
data on and then the data people never have to care about the fact

742
00:39:14,900 --> 00:39:15,700
that there was a header at.

743
00:39:15,700 --> 00:39:16,700
All right?

744
00:39:17,100 --> 00:39:20,000
So the header is just in, there is a little sort of thing that the

745
00:39:20,000 --> 00:39:23,700
stream control uses to understand what the what the structure looks

746
00:39:23,700 --> 00:39:24,500
like, right?

747
00:39:25,600 --> 00:39:29,900
So here we go, we push on some, the size of what we of what the person

748
00:39:29,900 --> 00:39:31,700
wanted plus the header.

749
00:39:32,500 --> 00:39:35,400
We then say, okay, make sure we've got enough room for assuming we do.

750
00:39:35,800 --> 00:39:38,500
Now, we find out where the header is by looking at where the push

751
00:39:38,500 --> 00:39:42,700
lever base, is we go ahead and set that type and then we take the

752
00:39:42,700 --> 00:39:43,100
result.

753
00:39:43,100 --> 00:39:46,300
What we're going to return is just going to be the header plus 1,

754
00:39:46,500 --> 00:39:47,200
right?

755
00:39:47,400 --> 00:39:52,600
It's just going to be one like the the next bite after the header is

756
00:39:52,600 --> 00:39:52,900
full-size.

757
00:39:52,900 --> 00:39:55,300
Because remember, in See, it'll do the pointer arithmetic.

758
00:39:55,400 --> 00:39:58,000
Check for us if we have a sized pointer.

759
00:39:58,100 --> 00:39:59,600
So header plus, 1 is whatever.

760
00:39:59,600 --> 00:40:03,100
The byte location is of header, plus the size of the header, right?

761
00:40:03,300 --> 00:40:07,800
And so, you know, we end up again in that situation to make that a

762
00:40:07,800 --> 00:40:08,700
little clearer though.

763
00:40:09,100 --> 00:40:11,000
I could also alternatively write it this way.

764
00:40:11,000 --> 00:40:13,900
So you can see right if I do this,

765
00:40:15,800 --> 00:40:18,200
That's saying like, Okay, take whatever header is and move.

766
00:40:18,200 --> 00:40:22,000
However, many bytes header is size-wise, right?

767
00:40:22,500 --> 00:40:23,300
And off you go.

768
00:40:23,700 --> 00:40:26,200
So then, the headers type is set correctly.

769
00:40:26,300 --> 00:40:28,200
These guys all, get back the correct thing.

770
00:40:28,400 --> 00:40:31,800
So all we would have to fix then I think is this part right here,

771
00:40:32,000 --> 00:40:35,800
which is after we grab that header out, right?

772
00:40:35,900 --> 00:40:40,000
What we want to do is instead of these guys then casting using that

773
00:40:40,000 --> 00:40:43,700
header as a cast their which is not what we want to do, right?

774
00:40:44,100 --> 00:40:45,500
What we'd rather do is

775
00:40:45,600 --> 00:40:50,100
Have them just kind of look at the data which will prepare the pointer

776
00:40:50,100 --> 00:40:53,500
for them to point to the correct place which is right after the

777
00:40:53,500 --> 00:40:53,800
header.

778
00:40:54,100 --> 00:40:54,700
Right?

779
00:40:55,600 --> 00:40:59,300
And so what we'll do is we read the header out and then we say, okay

780
00:40:59,300 --> 00:41:03,800
after the header we've also got a data pointer and that is literally

781
00:41:03,800 --> 00:41:08,100
exactly the same thing that it was before, right?

782
00:41:08,200 --> 00:41:10,300
Like so, so there's our data pointer.

783
00:41:10,300 --> 00:41:10,900
There we go.

784
00:41:13,600 --> 00:41:16,500
And what does this want to do?

785
00:41:16,900 --> 00:41:18,000
Oh, this is returning.

786
00:41:18,000 --> 00:41:21,700
A render group entry header that is not to return to return a void

787
00:41:21,700 --> 00:41:22,100
star.

788
00:41:22,500 --> 00:41:25,700
Because now, it is not turning the header, it's returning that data

789
00:41:25,700 --> 00:41:28,300
corner and so we should probably step through that, make sure it

790
00:41:28,300 --> 00:41:30,300
works, but we could just say, let's go for it now.

791
00:41:30,300 --> 00:41:31,600
Okay, of course not.

792
00:41:31,800 --> 00:41:35,000
So let's go ahead and and step through that and to take a look at how

793
00:41:35,000 --> 00:41:37,800
that's actually working and, and debug it.

794
00:41:38,100 --> 00:41:38,600
So,

795
00:41:40,500 --> 00:41:43,500
I believe the first thing we typically push on as a clear, right?

796
00:41:44,000 --> 00:41:45,800
So let's take a look at how the clear works.

797
00:41:46,100 --> 00:41:52,400
So we come in here and we have the size that the the clear is actually

798
00:41:52,400 --> 00:41:53,500
going to take, right?

799
00:41:53,600 --> 00:41:59,300
This is the render entry clear, I guess structure which is 60 we want

800
00:41:59,300 --> 00:41:59,700
to add

801
00:42:00,000 --> 00:42:02,500
The size of the header, which is 4, bytes long.

802
00:42:02,600 --> 00:42:03,400
So there we go.

803
00:42:03,500 --> 00:42:05,700
We see if we can get that and we can.

804
00:42:06,100 --> 00:42:10,300
So we then grab a pointer to the header, which is going to be the

805
00:42:10,300 --> 00:42:11,900
first thing in the buffer.

806
00:42:12,700 --> 00:42:15,400
We then set the type, which of course is still clear.

807
00:42:15,400 --> 00:42:17,800
It happened to already be zero, so it didn't really change it there.

808
00:42:18,900 --> 00:42:21,700
But then we want to make our result pointer.

809
00:42:21,900 --> 00:42:25,700
We want our result pointer to be 4, bytes after the header.

810
00:42:25,800 --> 00:42:29,200
So hopefully we should see that happen here, which is 5 C, right?

811
00:42:29,200 --> 00:42:29,900
So that's, that's

812
00:42:30,000 --> 00:42:31,100
that's what we wanted to see.

813
00:42:31,800 --> 00:42:39,100
Because now we should be able to see care star results - Kara star.

814
00:42:39,400 --> 00:42:44,000
Header should give us the size of the header right for B, which is

815
00:42:44,000 --> 00:42:44,500
good.

816
00:42:44,900 --> 00:42:47,700
Then we increment everything forward.

817
00:42:47,700 --> 00:42:48,700
So that's all good.

818
00:42:49,800 --> 00:42:52,300
And so I think that's probably working correctly.

819
00:42:53,000 --> 00:42:54,600
What I suspect is not working correctly.

820
00:42:54,600 --> 00:42:58,900
Now that I think about it is we didn't Advance the pointer properly.

821
00:43:00,400 --> 00:43:01,900
I kind of forgot about that.

822
00:43:02,400 --> 00:43:05,700
So when we do our Base address plus equal size of Entry.

823
00:43:05,700 --> 00:43:07,500
Here, we forgot.

824
00:43:07,500 --> 00:43:11,800
I didn't actually increment our Base address for having read the

825
00:43:11,800 --> 00:43:12,800
header, right?

826
00:43:12,800 --> 00:43:16,000
So the Base address here, just needs to be incremented to account for

827
00:43:16,000 --> 00:43:16,600
the header size.

828
00:43:16,600 --> 00:43:19,100
That's probably all that we did not do.

829
00:43:20,300 --> 00:43:23,200
So that's probably it again that just cleans it up a little bit and

830
00:43:23,200 --> 00:43:23,500
makes it.

831
00:43:23,500 --> 00:43:26,200
So that all the code that uses that doesn't have to be aware of any of

832
00:43:26,200 --> 00:43:29,400
that stuff which is nice.

833
00:43:34,300 --> 00:43:35,300
And in man.

834
00:43:35,300 --> 00:43:39,000
Yeah, we sure slow and slow down our bitmap drawing.

835
00:43:39,800 --> 00:43:41,400
But you know what you going to do?

836
00:43:41,600 --> 00:43:42,500
We will have to.

837
00:43:42,700 --> 00:43:45,800
We'll have to take some steps to speed that up pretty soon or we can

838
00:43:45,800 --> 00:43:48,400
start compiling it with optimizations on, but when you start complying

839
00:43:48,400 --> 00:43:50,800
with that positions on it makes it a lot harder to debug stuff.

840
00:43:51,600 --> 00:43:53,600
So that becomes a little bit of an issue.

841
00:43:54,000 --> 00:43:56,100
So anyway, especially for a streamer.

842
00:43:56,100 --> 00:43:58,400
I'm trying to show things we in the debugger, makes it pretty hard

843
00:43:58,400 --> 00:44:02,400
because the instruction pointer tends to jump around and it's just a

844
00:44:02,400 --> 00:44:03,300
little more confusing.

845
00:44:03,600 --> 00:44:04,000
So,

846
00:44:04,500 --> 00:44:07,100
That is in the entirety of that.

847
00:44:07,900 --> 00:44:11,100
Trying to think if there's anything else in particular that I wanted

848
00:44:11,100 --> 00:44:12,100
to clean up in here.

849
00:44:12,100 --> 00:44:13,400
That's a small-scale thing.

850
00:44:13,700 --> 00:44:14,700
That doesn't remove.

851
00:44:14,700 --> 00:44:16,200
That doesn't introduce anything.

852
00:44:16,600 --> 00:44:19,400
New know why we need that comment is kind of useless.

853
00:44:21,900 --> 00:44:27,000
So I think, yeah, I think this is all fine here.

854
00:44:27,900 --> 00:44:31,200
I don't see anything else that needs to happen.

855
00:44:31,400 --> 00:44:33,000
We've got all of our debug code.

856
00:44:33,000 --> 00:44:33,800
We've got this.

857
00:44:34,100 --> 00:44:36,100
Yeah, yeah.

858
00:44:36,600 --> 00:44:37,700
So that's all good.

859
00:44:37,900 --> 00:44:41,700
So I think we're pretty good for right now.

860
00:44:42,400 --> 00:44:43,700
Trying to think of what else.

861
00:44:43,900 --> 00:44:45,600
I might be able to do that.

862
00:44:45,700 --> 00:44:49,700
That wouldn't be, you know, sort of starting something that we can't

863
00:44:49,700 --> 00:44:51,000
really get at all into

864
00:44:51,900 --> 00:44:56,500
We don't really have much on the list here that isn't something that

865
00:44:56,500 --> 00:44:57,600
we would have to start.

866
00:44:58,800 --> 00:44:59,800
I guess what I could do.

867
00:45:00,500 --> 00:45:02,200
Is start doing that.

868
00:45:02,200 --> 00:45:04,700
Pull out so that we can compile those routines.

869
00:45:04,700 --> 00:45:11,200
Like what I could do is say, all right there is handmade optimized dot

870
00:45:11,200 --> 00:45:12,800
CPP or something like this.

871
00:45:13,200 --> 00:45:14,600
You know something II.

872
00:45:14,600 --> 00:45:18,800
Don't know where we are going to stick routines like this one.

873
00:45:20,400 --> 00:45:21,000
Like so.

874
00:45:23,600 --> 00:45:28,200
And we could do that, of course, it's kind of a little nasty because

875
00:45:29,100 --> 00:45:33,500
it's hard for these guys to properly, see all the rest of the things

876
00:45:33,500 --> 00:45:34,900
that we want them to see.

877
00:45:35,700 --> 00:45:38,400
So typically, you don't really want to do this.

878
00:45:38,400 --> 00:45:45,300
Pull out with the optimizations until you actually have these

879
00:45:45,300 --> 00:45:49,100
optimized in sort of a, at anaesthetic more of an assembly level.

880
00:45:49,300 --> 00:45:52,700
Because you run into the situation where, like, okay, if I want to

881
00:45:52,700 --> 00:45:53,200
still use you,

882
00:45:53,400 --> 00:45:55,800
Rebuild that I want to pull these out so that they get up my

883
00:45:55,800 --> 00:45:56,300
separately.

884
00:45:56,300 --> 00:46:00,200
You know, I have to start segregating my inline functions that they

885
00:46:00,200 --> 00:46:03,600
might use right in other things like that which is just kind of

886
00:46:03,600 --> 00:46:08,100
annoying and I don't really like to do it so maybe that's not the best

887
00:46:08,100 --> 00:46:09,000
idea.

888
00:46:09,000 --> 00:46:13,800
I'm not sure what to give you a little bit of perspective on why this

889
00:46:13,800 --> 00:46:15,600
is a problem, right?

890
00:46:16,800 --> 00:46:19,100
There is a way if I wanted to.

891
00:46:19,700 --> 00:46:21,800
I guess this is probably what I could do with rest of the script

892
00:46:21,800 --> 00:46:22,200
stream.

893
00:46:22,200 --> 00:46:23,200
Let me let me not.

894
00:46:23,300 --> 00:46:25,400
Not introduce that file just yet.

895
00:46:26,800 --> 00:46:27,300
There we go.

896
00:46:29,600 --> 00:46:33,700
Okay, let me delete handmade optimized before I go down that that

897
00:46:33,700 --> 00:46:34,300
path.

898
00:46:36,600 --> 00:46:40,500
So, the optimization pragma, right?

899
00:46:41,300 --> 00:46:43,100
I'll show you a couple different things here.

900
00:46:43,500 --> 00:46:45,900
So there is in Visual Studio.

901
00:46:45,900 --> 00:46:49,400
I mean, starting visual C++ in the compiler, there is a way to bracket

902
00:46:49,400 --> 00:46:52,200
things with some optimization directives, right?

903
00:46:52,500 --> 00:46:56,200
So, you can say optimization list on and off and there's like, Global

904
00:46:56,200 --> 00:46:59,500
optimizations shorter, fastest machine code, blah blah blah, right?

905
00:47:00,400 --> 00:47:06,000
But I don't actually know if it will fully optimized stuff to the

906
00:47:06,400 --> 00:47:11,300
We would want it to just by using these with on, I know with off.

907
00:47:11,300 --> 00:47:12,300
You can shut off a lot of things.

908
00:47:12,300 --> 00:47:15,700
I don't know if on will actually turn on all the stuff that we might

909
00:47:15,700 --> 00:47:19,400
want, we could try, but I don't actually know, right?

910
00:47:19,500 --> 00:47:27,100
And furthermore, I'm not sure how you can push, so I guess when you

911
00:47:27,100 --> 00:47:28,200
use the so.

912
00:47:28,200 --> 00:47:31,200
So if you take a look at what this even says here, it suggests that it

913
00:47:31,200 --> 00:47:32,600
won't do that at all right?

914
00:47:33,600 --> 00:47:36,200
When you use the on parameter, it resets the

915
00:47:36,300 --> 00:47:40,600
The optimizations to those, you have specified with the / 0 compiler

916
00:47:40,600 --> 00:47:42,000
option, right?

917
00:47:44,000 --> 00:47:46,900
But oh well, okay, but that's only if the string is null.

918
00:47:46,900 --> 00:47:49,500
So maybe this will work, maybe this will work.

919
00:47:49,500 --> 00:47:51,600
If you can get away with it it would be nice.

920
00:47:53,500 --> 00:47:55,000
Let's try it, who knows?

921
00:47:55,200 --> 00:47:56,500
Because if we could do that, that'd be nice.

922
00:47:56,500 --> 00:47:59,800
Then we wouldn't have to ever worry about splitting the stuff out.

923
00:48:00,000 --> 00:48:02,600
Though we may eventually want to do that anyway but that's kind of a

924
00:48:02,700 --> 00:48:03,500
kind of separate issue.

925
00:48:03,600 --> 00:48:09,500
So let's see if we can get this to actually optimize by just telling

926
00:48:09,500 --> 00:48:11,300
it to turn on everything, right?

927
00:48:11,600 --> 00:48:14,800
So if I want to, I'm not optimistic.

928
00:48:14,900 --> 00:48:18,000
I will tell you that but we'll give it a shot.

929
00:48:18,000 --> 00:48:20,800
So if I tell it, I want to optimize

930
00:48:22,700 --> 00:48:29,700
This routine and and we'll say Global optimizations on, I guess.

931
00:48:29,700 --> 00:48:30,700
Do you have anything else?

932
00:48:31,300 --> 00:48:32,500
There's 20, more of the funds.

933
00:48:32,500 --> 00:48:36,400
So Global optimizations, I think is the only thing shorter fast

934
00:48:36,400 --> 00:48:37,700
sequences machine code.

935
00:48:37,700 --> 00:48:42,400
So I guess I want fast sequences machine code for now.

936
00:48:43,400 --> 00:48:45,600
And yeah.

937
00:48:45,900 --> 00:48:49,100
And so then after we're done with that, after draw a rectangle slowly,

938
00:48:49,600 --> 00:48:51,800
I just want to put in a pragma that.

939
00:48:52,500 --> 00:48:57,900
Also, you can well, I guess I want it sort of around both this and

940
00:48:57,900 --> 00:48:58,600
drawbitmap.

941
00:48:58,600 --> 00:49:02,600
So let me grab drawbitmap and stick that in there as well.

942
00:49:02,800 --> 00:49:08,900
So it said that if I used it with nothing, it would just revert to the

943
00:49:08,900 --> 00:49:10,400
the old optimization settings.

944
00:49:10,600 --> 00:49:12,900
So, I don't know if that actually optimized.

945
00:49:13,500 --> 00:49:17,000
I'm doubting it did, and it certainly doesn't look like it, right?

946
00:49:17,000 --> 00:49:18,300
This is nowhere near.

947
00:49:20,100 --> 00:49:22,900
This is nowhere near the speed that we were getting before.

948
00:49:24,000 --> 00:49:28,600
So, yeah, that really does not seem to do what we needed to do, right?

949
00:49:29,900 --> 00:49:30,700
As far as I can tell.

950
00:49:30,700 --> 00:49:36,900
Anyway, we got pragma optimize GT on and it really didn't optimize our

951
00:49:36,900 --> 00:49:40,200
drawbitmap into anything noteworthy.

952
00:49:40,900 --> 00:49:43,100
I could check and double-check right.

953
00:49:43,100 --> 00:49:49,800
Like turn on visual C Optimizer for just one function.

954
00:49:49,900 --> 00:49:55,900
And and see if anybody has has any information about that.

955
00:49:56,000 --> 00:49:56,700
Let's see here.

956
00:49:59,600 --> 00:50:04,200
There's two optimization frequence, fishes.

957
00:50:07,400 --> 00:50:08,000
To my station.

958
00:50:08,000 --> 00:50:14,000
Decal, specs Now, sort of, let's pull this out a little bit, so we can

959
00:50:14,000 --> 00:50:14,500
read it.

960
00:50:16,200 --> 00:50:19,600
So, let's see on a function, as the ideal for those workers, are

961
00:50:19,600 --> 00:50:22,800
Arabs, Christians when it conforms compiled with optimization, okay?

962
00:50:22,800 --> 00:50:25,300
That's not what we really wanted to hear what we want to do is just

963
00:50:25,300 --> 00:50:29,600
set one of them to be on for more.

964
00:50:29,600 --> 00:50:31,000
Yeah let's see.

965
00:50:32,800 --> 00:50:34,000
This does not.

966
00:50:34,000 --> 00:50:34,900
This is not helpful.

967
00:50:36,900 --> 00:50:39,900
Because most of the time they're thinking disabled optimizations, but

968
00:50:39,900 --> 00:50:42,400
we want to do is enable optimizations.

969
00:50:42,600 --> 00:50:48,500
I guess we could wrap everything else in in a pragma optimize off, but

970
00:50:48,500 --> 00:50:51,000
that doesn't seem like such a good idea.

971
00:50:53,500 --> 00:50:55,100
I don't know, but maybe we could try it.

972
00:50:55,100 --> 00:50:56,800
This is something I've never done before.

973
00:50:57,300 --> 00:50:58,600
So, I don't know.

974
00:50:58,700 --> 00:50:59,700
Maybe, we'll try it.

975
00:51:00,400 --> 00:51:04,700
Rapping just that in a pragma optimize on, doesn't work, maybe

976
00:51:04,700 --> 00:51:07,700
wrapping everything else in a pragma, optimize off.

977
00:51:07,700 --> 00:51:15,800
Would and so, maybe we do this, right?

978
00:51:15,900 --> 00:51:21,900
So we say, pragma on pragma off, like so.

979
00:51:23,200 --> 00:51:29,900
And then we literally in our handmade dot CPP at the very top of the

980
00:51:29,900 --> 00:51:30,100
file.

981
00:51:30,500 --> 00:51:34,300
Return all the optimizations off and then at the bottom of the file,

982
00:51:35,400 --> 00:51:37,100
well, at the bottom file, we don't do anything.

983
00:51:38,400 --> 00:51:39,700
What will that do?

984
00:51:39,900 --> 00:51:40,600
I don't know.

985
00:51:41,600 --> 00:51:43,900
So off the bat, it should do nothing because we don't have any

986
00:51:43,900 --> 00:51:47,200
optimizations enabled so we're in slow mode and so that's fine.

987
00:51:47,800 --> 00:51:53,500
But then if I go into our build and turn optimizations on, what

988
00:51:53,500 --> 00:51:54,100
happens?

989
00:51:56,000 --> 00:51:56,800
I have no idea.

990
00:52:00,700 --> 00:52:03,100
Still totally unoptimized it would appear.

991
00:52:04,100 --> 00:52:04,700
Right.

992
00:52:06,100 --> 00:52:08,700
Like that's not at all, helping us.

993
00:52:11,200 --> 00:52:11,600
Yeah.

994
00:52:13,800 --> 00:52:14,900
Hmm.

995
00:52:15,800 --> 00:52:18,700
I feel like that should have worked though, right?

996
00:52:19,300 --> 00:52:21,200
So I wonder if there's more to it.

997
00:52:21,200 --> 00:52:26,100
I wonder if it's because inline functions that, you know, like perhaps

998
00:52:26,100 --> 00:52:32,000
inline functions can't be optimized if they're in the optimized off or

999
00:52:32,000 --> 00:52:32,400
whatever.

1000
00:52:32,400 --> 00:52:36,000
I'm not sure, but for whatever reason, it looks like we're not going

1001
00:52:36,000 --> 00:52:37,000
to be able to do that.

1002
00:52:37,000 --> 00:52:38,900
So we'll give up.

1003
00:52:39,000 --> 00:52:40,900
It's not absolutely essential what it

1004
00:52:41,000 --> 00:52:45,300
This will have to maybe do some optimization earlier rather than later

1005
00:52:45,300 --> 00:52:49,400
so that we can still compile with optimizations off and be able to

1006
00:52:49,400 --> 00:52:53,900
step through code and sort of show, you know, do that illustrative

1007
00:52:53,900 --> 00:52:54,300
stuff.

1008
00:52:54,300 --> 00:52:57,800
Because the reason that I'm spending so much time differing about this

1009
00:52:57,800 --> 00:53:01,700
is because if I compile with optimizations on all the time, I just

1010
00:53:01,700 --> 00:53:03,800
want to show you what it looks like.

1011
00:53:04,100 --> 00:53:08,000
When you sort of start stepping through like you see what's happening

1012
00:53:08,000 --> 00:53:10,400
there to see how it's jumping around like that.

1013
00:53:11,400 --> 00:53:15,000
You know, it's it's basically because the optimizer has rearranged all

1014
00:53:15,000 --> 00:53:19,700
the code and so it's very hard for me to sort of teach on the stream

1015
00:53:19,700 --> 00:53:20,200
and show.

1016
00:53:20,200 --> 00:53:21,700
Oh, this happened on this happened.

1017
00:53:21,700 --> 00:53:23,300
Then, let's look at the values on the stuff.

1018
00:53:23,500 --> 00:53:27,100
If the IP is, you know, jumping all around like that to cook to

1019
00:53:27,500 --> 00:53:28,500
execute the function.

1020
00:53:28,500 --> 00:53:29,000
Right?

1021
00:53:30,000 --> 00:53:33,300
So, you know, normally you might just be fine with that, and that's

1022
00:53:33,300 --> 00:53:34,300
not really a problem.

1023
00:53:34,300 --> 00:53:38,200
So we just compiled with operations on and we'd be done, but

1024
00:53:38,200 --> 00:53:40,800
unfortunately, that's not probably realistic.

1025
00:53:41,000 --> 00:53:41,900
For handmade hero.

1026
00:53:41,900 --> 00:53:47,900
So we will have to do something to sort of make sure that that that

1027
00:53:47,900 --> 00:53:49,000
that works out.

1028
00:53:49,000 --> 00:53:53,100
And so maybe I will try to split those into two separate files and

1029
00:53:53,100 --> 00:53:53,400
compile.

1030
00:53:53,400 --> 00:53:56,900
One with the optimizations and we'll just pull out the sorts of stuff

1031
00:53:57,100 --> 00:53:59,800
that get needed into handmade optimizations dot h.

1032
00:54:00,100 --> 00:54:04,100
You know, like we'd have handmade optimizations optimized dot h, or

1033
00:54:04,100 --> 00:54:04,400
whatever.

1034
00:54:04,400 --> 00:54:07,900
And that would have the inline functions that we expect to have in

1035
00:54:07,900 --> 00:54:11,600
there and then we'd have the other one as well or something like that.

1036
00:54:11,600 --> 00:54:18,000
So you know, you can, you can Envision it working relatively cleanly,

1037
00:54:18,000 --> 00:54:19,800
so maybe we'll just go ahead and say that.

1038
00:54:19,800 --> 00:54:20,800
That's what we're going to have to do.

1039
00:54:20,800 --> 00:54:23,900
Maybe I'll do that tomorrow, for example, and, and that'll be our

1040
00:54:23,900 --> 00:54:24,200
thing.

1041
00:54:25,000 --> 00:54:33,200
All right, so let's take a look at the Q&A because we're about out of

1042
00:54:33,200 --> 00:54:33,600
time here.

1043
00:54:33,600 --> 00:54:36,500
So, so let's go ahead and go to the Q&A.

1044
00:54:36,500 --> 00:54:41,600
If you do have, if you do have questions, please prefix them with Q:

1045
00:54:41,600 --> 00:54:45,500
starting now, and I will take a look at them.

1046
00:54:48,400 --> 00:54:52,000
Yeah, I really wish there was a way for visual studio.

1047
00:54:52,000 --> 00:54:56,200
You can just say, optimize this function, extremely heavily just this

1048
00:54:56,200 --> 00:55:01,400
function because that would be all you really want here, right?

1049
00:55:02,000 --> 00:55:04,800
And I've encountered that on my own code base as well.

1050
00:55:04,800 --> 00:55:07,900
I prefer to compile in debug mode, most of the time because it just

1051
00:55:07,900 --> 00:55:09,700
makes it easier to view things in the debugger.

1052
00:55:10,300 --> 00:55:13,300
And so I would really like to be able to say, hey, this is a critical

1053
00:55:13,300 --> 00:55:15,600
function just just optimize this one.

1054
00:55:15,600 --> 00:55:16,700
Please, what?

1055
00:55:16,900 --> 00:55:18,400
Pretty awesome, right?

1056
00:55:20,000 --> 00:55:20,400
so,

1057
00:55:22,200 --> 00:55:22,600
Yeah.

1058
00:55:25,000 --> 00:55:28,200
So anyway, does anyone have any questions?

1059
00:55:40,100 --> 00:55:45,800
Arbs felled, why can't you compile opengl code to see to make a

1060
00:55:45,800 --> 00:55:47,000
software renderer?

1061
00:55:48,400 --> 00:55:52,000
I don't think I understand the question.

1062
00:55:52,000 --> 00:55:58,700
You are asking, what is opengl code, in this case.

1063
00:56:01,000 --> 00:56:01,300
Mr.

1064
00:56:01,300 --> 00:56:04,500
Fourth dimension, is it useful to be able to debug with optimizations

1065
00:56:04,500 --> 00:56:04,800
on?

1066
00:56:04,800 --> 00:56:08,000
Do you think you might be able to show how to do that at some point?

1067
00:56:09,600 --> 00:56:13,500
So the first thing you need to do is if you want to, if you want to

1068
00:56:13,500 --> 00:56:17,000
debug with optimizations on, you're never going to really get around

1069
00:56:17,000 --> 00:56:18,800
the fact that it jumps around like that.

1070
00:56:19,800 --> 00:56:22,900
That's just, that's just the nature of the beast.

1071
00:56:23,100 --> 00:56:28,100
But what you can do to make life a little easier on yourself is Visual

1072
00:56:28,100 --> 00:56:29,200
Studio,

1073
00:56:30,900 --> 00:56:35,600
Bug optimizations which I don't remember what the switch is.

1074
00:56:37,100 --> 00:56:40,300
It's in here, so it might be that guy right there.

1075
00:56:40,300 --> 00:56:42,400
Enhance optimized it bugging.

1076
00:56:43,600 --> 00:56:51,400
So I believe this is always off by default and and so I can try to

1077
00:56:51,400 --> 00:56:54,100
give an example of why this, this is something you probably would

1078
00:56:54,100 --> 00:56:54,900
want, will want to know.

1079
00:56:54,900 --> 00:56:57,500
So I'll just show what happens.

1080
00:56:57,700 --> 00:56:59,800
So in our build dot bat, right?

1081
00:57:00,400 --> 00:57:01,900
We've got that 02 in there.

1082
00:57:02,100 --> 00:57:05,100
So, this is an optimized build, it's getting optimized fairly heavily

1083
00:57:05,100 --> 00:57:06,000
by the compiler.

1084
00:57:06,200 --> 00:57:09,900
If I come in here and start to try and do stuff.

1085
00:57:10,000 --> 00:57:13,200
Like let's say, I try to see what Min X is right.

1086
00:57:14,000 --> 00:57:17,500
Well, Min X according to it is is undefined.

1087
00:57:18,000 --> 00:57:20,400
It has no idea what Min X is now.

1088
00:57:20,400 --> 00:57:21,900
It's right there, right?

1089
00:57:22,100 --> 00:57:23,900
But it has no idea what it is.

1090
00:57:24,200 --> 00:57:28,500
So the reason for that is because the way that the compiler chose to

1091
00:57:28,500 --> 00:57:29,800
optimize this code

1092
00:57:30,100 --> 00:57:34,100
There's no longer an easy way for it to look up what the value of Min

1093
00:57:34,100 --> 00:57:35,500
X is right.

1094
00:57:35,600 --> 00:57:38,900
So it just doesn't show it to you, it's like, I don't know, right?

1095
00:57:38,900 --> 00:57:39,700
I have no idea.

1096
00:57:40,000 --> 00:57:42,600
And so, if you wanted to know what my next was and you're in here,

1097
00:57:42,600 --> 00:57:45,800
you'd actually have to go in, and you'd have to go to the disassembly,

1098
00:57:45,800 --> 00:57:46,400
right?

1099
00:57:46,800 --> 00:57:51,600
And you'd have to actually look to see where it had put it like.

1100
00:57:51,600 --> 00:57:56,000
Okay, it's being called in from xmm.

1101
00:57:56,000 --> 00:57:59,800
It's putting it into ebx and then some

1102
00:58:00,000 --> 00:58:06,400
I'm in X-Men X, should still be there, it looks like.

1103
00:58:06,500 --> 00:58:13,400
So if I looked at where ebx was, which is here, this is what that is,

1104
00:58:13,400 --> 00:58:13,600
right?

1105
00:58:13,600 --> 00:58:17,300
Like, it's like, that's the process you'd be going through which is

1106
00:58:17,300 --> 00:58:21,400
really time and efficient and very error-prone, right?

1107
00:58:22,500 --> 00:58:28,000
So, one of the things that they added that was a nice feature.

1108
00:58:28,000 --> 00:58:29,500
I think in 2013,

1109
00:58:30,000 --> 00:58:31,600
Hard to like 2012 or something.

1110
00:58:31,600 --> 00:58:34,300
I don't know that they added at one point it was it was not something

1111
00:58:34,300 --> 00:58:36,800
you could really do before and they added it at one point.

1112
00:58:37,600 --> 00:58:44,800
If we instead go in here and add that zo switch right in theory that

1113
00:58:44,800 --> 00:58:51,300
creates a more extensive debug sort of annotation in the pdb file that

1114
00:58:51,300 --> 00:58:53,600
goes through your executable if you remember way back from the first

1115
00:58:53,600 --> 00:58:57,400
days when we were looking at that stuff, more expensive, annotations.

1116
00:58:57,400 --> 00:58:59,800
So sometimes now when you go through here,

1117
00:59:00,000 --> 00:59:03,600
Here, the the, the debugger can actually tell you.

1118
00:59:03,600 --> 00:59:07,300
Unfortunately, it looks like in this case still can't tell us, right?

1119
00:59:07,300 --> 00:59:12,800
So not particularly useful but at least at least it knows about it now

1120
00:59:12,800 --> 00:59:19,500
and it's going to tell us that it's not available but so sometimes you

1121
00:59:19,500 --> 00:59:20,400
will get more for that.

1122
00:59:20,400 --> 00:59:24,300
Like Source offset is probably one you would not have gotten for

1123
00:59:24,300 --> 00:59:27,400
example like you can see that you can see it now.

1124
00:59:27,400 --> 00:59:29,900
It's 83 I'm I'm going to go ahead and

1125
00:59:30,100 --> 00:59:33,200
A so let's say we can see that's 83 here, I'm going to go ahead and

1126
00:59:33,200 --> 00:59:37,800
say that probably that was one that if we took the zo out, you

1127
00:59:37,800 --> 00:59:39,800
probably wouldn't be able to see, right?

1128
00:59:39,800 --> 00:59:43,800
That's just my guess so you can see identify our source offset X is

1129
00:59:43,800 --> 00:59:44,600
undefined.

1130
00:59:44,700 --> 00:59:50,900
So you know, it gives you something, it allows you to see a bunch of

1131
00:59:50,900 --> 00:59:54,500
values that you wouldn't otherwise see, and that's very good.

1132
00:59:55,000 --> 00:59:58,000
So, minus z0 is something you probably want to add to the build.

1133
00:59:58,000 --> 00:59:59,800
We probably should add it way back in the

1134
01:00:00,100 --> 01:00:01,900
But just didn't think of it.

1135
01:00:02,900 --> 01:00:06,500
So that helps, but that doesn't change the jumpy around Miss.

1136
01:00:06,500 --> 01:00:08,900
And so there's nothing to tell.

1137
01:00:08,900 --> 01:00:10,400
I mean, there's nothing about the debugging.

1138
01:00:10,400 --> 01:00:13,300
It just means the code was rearranged for more optimal execution,

1139
01:00:13,300 --> 01:00:13,700
right?

1140
01:00:15,500 --> 01:00:19,400
But and, and, you know, or collapsed away or all are sorts of things

1141
01:00:19,400 --> 01:00:21,000
that might have happened during optimization.

1142
01:00:21,600 --> 01:00:23,400
So you just have to get used to that and understand.

1143
01:00:23,400 --> 01:00:24,000
That's what's that.

1144
01:00:24,000 --> 01:00:25,400
You're only getting an approximation.

1145
01:00:25,500 --> 01:00:28,800
And you have to kind of drop down to disassembly now and again, and

1146
01:00:28,800 --> 01:00:29,800
this is kind of annoying.

1147
01:00:30,000 --> 01:00:32,900
Yeah, but this is this is a thing where it's not sure which address

1148
01:00:32,900 --> 01:00:37,000
you're actually talking about for debugging, but you can usually do a

1149
01:00:37,000 --> 01:00:37,500
reasonable job.

1150
01:00:37,500 --> 01:00:40,500
I just stepping and then getting back to the place where you're at.

1151
01:00:41,100 --> 01:00:42,300
So you have to kind of look in here.

1152
01:00:42,300 --> 01:00:43,500
Sometimes figure out what's going on.

1153
01:00:43,500 --> 01:00:44,200
It's kind of annoying.

1154
01:00:44,500 --> 01:00:46,500
There's really no tricks to this.

1155
01:00:46,600 --> 01:00:51,200
That's just, it's just hard to debug in optimized land.

1156
01:00:51,200 --> 01:00:53,400
It's much harder to do that than in debug.

1157
01:00:53,600 --> 01:00:58,900
So what I recommend doing by far, is never debug in optimized mode, if

1158
01:00:58,900 --> 01:00:59,800
you can avoid it, right?

1159
01:01:00,000 --> 01:01:04,100
Always try to debug in debug mode when you can and only divided

1160
01:01:04,100 --> 01:01:05,500
optimized code when you have to.

1161
01:01:06,400 --> 01:01:09,100
So, you know, that's that's that's what I'd say about that.

1162
01:01:09,100 --> 01:01:13,600
But you know, when you are it, inevitably happens because you have a

1163
01:01:13,600 --> 01:01:16,100
bug, that only Repros, an optimized mode or it takes too long to run

1164
01:01:16,100 --> 01:01:16,600
and debug mode.

1165
01:01:16,600 --> 01:01:17,700
So you have to run an optimized mode.

1166
01:01:17,700 --> 01:01:20,800
Whatever then that minus z0 is a good thing to know.

1167
01:01:30,500 --> 01:01:31,500
Let's see.

1168
01:01:38,600 --> 01:01:39,400
Glsl.

1169
01:01:39,400 --> 01:01:43,900
Okay, so you were talking about compiling glsl code into a software to

1170
01:01:43,900 --> 01:01:44,800
make the software under.

1171
01:01:46,000 --> 01:01:49,900
So the answer is glsl has nothing to do with rendering at all.

1172
01:01:50,500 --> 01:01:54,300
Really glsl is shading computations.

1173
01:01:54,900 --> 01:01:59,800
So the actual entirety of the renderer is not, none of the renderer is

1174
01:01:59,800 --> 01:02:00,900
actually in GSL.

1175
01:02:00,900 --> 01:02:03,400
Only the shading computations are in there.

1176
01:02:03,400 --> 01:02:07,000
Now, granted shading computations have now grown to Encompass, a lot

1177
01:02:07,000 --> 01:02:08,200
of things that are render as

1178
01:02:08,700 --> 01:02:09,400
Right?

1179
01:02:10,800 --> 01:02:14,500
But the whole superstructure the whole part of the renderer that

1180
01:02:14,500 --> 01:02:18,800
decides what pixels get filled right and sort of the.

1181
01:02:18,800 --> 01:02:20,800
So I guess I should say is let's not use the word.

1182
01:02:20,800 --> 01:02:24,400
Renderer glsl is not a rasterizer, right?

1183
01:02:24,400 --> 01:02:28,300
It does not have anything to do with figuring out what pixels to

1184
01:02:28,300 --> 01:02:28,900
consider.

1185
01:02:29,400 --> 01:02:31,800
All it does, is it figures out?

1186
01:02:32,400 --> 01:02:36,600
What the inputs, the outputs are, and the inputs are two very

1187
01:02:36,800 --> 01:02:38,200
well-defined shading.

1188
01:02:38,400 --> 01:02:42,200
Pipelines that basically take buffers in and push but put buffers out,

1189
01:02:42,200 --> 01:02:44,900
but there's no pixels involved anywhere in there, right?

1190
01:02:46,300 --> 01:02:51,300
And so the superstructure around glsl, which you don't see that's all

1191
01:02:51,300 --> 01:02:55,300
implemented on the card or in the driver is the thing that actually

1192
01:02:55,300 --> 01:02:56,200
determines.

1193
01:02:56,300 --> 01:02:59,800
What pixels are actually getting considered to ever.

1194
01:03:00,000 --> 01:03:03,800
One, the glsl code on those pixels, right?

1195
01:03:04,400 --> 01:03:10,400
And so that's a very small part of our problem because shading code on

1196
01:03:10,400 --> 01:03:11,900
2-D game is very basic.

1197
01:03:11,900 --> 01:03:13,400
Usually, there's really just not that much.

1198
01:03:13,400 --> 01:03:16,800
Maybe you do some normal map lookups, you know for lighting or

1199
01:03:16,800 --> 01:03:19,300
something like this or some other little things in there.

1200
01:03:19,400 --> 01:03:23,500
But for the most part, all of software, rendering tends to be in the

1201
01:03:23,500 --> 01:03:24,200
rasterizer.

1202
01:03:24,200 --> 01:03:25,800
It's figuring out what pixels to fill.

1203
01:03:25,800 --> 01:03:29,900
That's the that's the most of the, the 2D rasterizer part.

1204
01:03:30,000 --> 01:03:30,300
Things.

1205
01:03:30,300 --> 01:03:30,900
Right?

1206
01:03:30,900 --> 01:03:33,600
And so glsl doesn't really help us at all right?

1207
01:03:33,600 --> 01:03:37,700
We don't really have any glsl is just not really a useful thing if we

1208
01:03:37,800 --> 01:03:41,600
wanted to and we for some reason had a bunch of glsl code that we'd

1209
01:03:41,600 --> 01:03:44,300
already written that talked about how we were going to do our Shader

1210
01:03:44,300 --> 01:03:50,000
computations and we didn't feel like rewriting it in intrinsics in the

1211
01:03:50,000 --> 01:03:53,500
compiler we could write a thing that read glsl and outputted

1212
01:03:53,500 --> 01:03:57,100
intrinsics that we could then compile that's certainly possible.

1213
01:03:57,400 --> 01:03:59,900
It's just it's not really much it.

1214
01:04:00,100 --> 01:04:02,900
Really, very little to do with the renderer for a 2-D game.

1215
01:04:03,100 --> 01:04:05,500
It's just a very uninteresting part of it, right?

1216
01:04:05,800 --> 01:04:08,600
Whereas, you know, maybe in a 3D game, there's a lot more of it

1217
01:04:08,600 --> 01:04:11,200
because maybe you've got tessellation shaders in there and geometry

1218
01:04:11,200 --> 01:04:14,100
shaders in there and vertex shaders in there, and then the pixel

1219
01:04:14,100 --> 01:04:16,100
shaders, which are much more complicated because we're doing all kinds

1220
01:04:16,100 --> 01:04:20,800
of crazy stuff in terms of approximating things, and post passes, and

1221
01:04:20,800 --> 01:04:21,600
all these sorts of things.

1222
01:04:21,700 --> 01:04:24,400
So maybe, you know, that makes some sense would make some sense if

1223
01:04:24,400 --> 01:04:29,000
you're doing a software rendered 3D game but even then, I just don't

1224
01:04:29,000 --> 01:04:29,800
know that it buys you anything.

1225
01:04:29,900 --> 01:04:31,100
Thing, because, who cares?

1226
01:04:31,100 --> 01:04:33,800
Glsl is just a programming language, like any other one, why not?

1227
01:04:33,800 --> 01:04:35,400
Just write it in the actual language.

1228
01:04:35,400 --> 01:04:39,400
They're really, there isn't any, you know, use use for that in some

1229
01:04:39,400 --> 01:04:39,700
sense.

1230
01:04:40,200 --> 01:04:43,900
Now, if we were going to have a lot of shaders, one reason you might

1231
01:04:43,900 --> 01:04:46,900
do that is because you don't want to have to rewrite all that code.

1232
01:04:46,900 --> 01:04:50,100
Again when you use when you do Hardware, when you implement in

1233
01:04:50,100 --> 01:04:51,000
Hardware, right?

1234
01:04:51,900 --> 01:04:54,800
And so it's definitely true that if I thought we were going to have a

1235
01:04:54,800 --> 01:04:58,800
ton of shaders then that would be a case where we might want to go.

1236
01:04:58,800 --> 01:05:02,400
Alright, let's make sure that we can do this you know have a Common

1237
01:05:02,400 --> 01:05:07,100
Language describes both but the way to do that might still not be to

1238
01:05:07,100 --> 01:05:10,800
actually look at glsl code as a as a source language and compile it

1239
01:05:10,900 --> 01:05:14,000
what you might want to do is just make a little macro language that

1240
01:05:14,000 --> 01:05:18,400
would expand to glsl or to your own code and just do it that way.

1241
01:05:18,400 --> 01:05:21,500
Like, reading glsl might not be worth your

1242
01:05:21,700 --> 01:05:23,300
While to do right?

1243
01:05:24,300 --> 01:05:26,600
So yeah so I would just say that that's just not a very interesting

1244
01:05:26,600 --> 01:05:27,500
part of this problem.

1245
01:05:27,900 --> 01:05:30,000
We're not going to be spending a ton of time running shaders because

1246
01:05:30,000 --> 01:05:33,400
they're just not that useful in the kind of game we're talking about

1247
01:05:33,400 --> 01:05:35,500
here which is about putting a lot of bitmaps on the screen.

1248
01:05:35,900 --> 01:05:38,200
We just won't probably have a ton of Shader code.

1249
01:05:38,200 --> 01:05:42,200
It's really the most the smallest part of the rendering process and

1250
01:05:42,200 --> 01:05:43,800
the rasterization is the big part.

1251
01:05:49,000 --> 01:05:52,000
should the load bitmap function also be optimized after making changes

1252
01:05:52,000 --> 01:05:53,300
today to do pre multiply

1253
01:05:56,600 --> 01:05:59,800
yeah, I mean probably not because that will probably just get rolled

1254
01:06:00,000 --> 01:06:02,900
To whatever prepares our assets.

1255
01:06:04,200 --> 01:06:07,000
So I'm thinking that that's probably not that useful.

1256
01:06:07,000 --> 01:06:10,100
We don't load very many bitmaps currently so it's probably not taking

1257
01:06:10,500 --> 01:06:11,400
hardly any time.

1258
01:06:11,600 --> 01:06:15,200
It's the ground chunk preparation and the screen bleeding.

1259
01:06:15,200 --> 01:06:17,700
I think that are probably taking all of our time at the moment.

1260
01:06:24,100 --> 01:06:27,200
How would something like a dynamic array and this memory system work?

1261
01:06:27,200 --> 01:06:30,400
Something that is persistent across frames, but able to change size

1262
01:06:30,600 --> 01:06:32,900
holes are not possible in the memory Arenas right now.

1263
01:06:33,900 --> 01:06:37,400
So the answer to that is usually like it depends on the circumstance.

1264
01:06:37,500 --> 01:06:41,600
If you want a dynamic array you can just do you just have to put a

1265
01:06:42,200 --> 01:06:43,100
well I put it this way.

1266
01:06:44,400 --> 01:06:47,900
If you end up wanting something that is totally Dynamic, like a

1267
01:06:47,900 --> 01:06:51,200
dynamic allocator, then you have to write a dynamic alligator.

1268
01:06:51,700 --> 01:06:55,200
Like, that's what Malik and new and all those things are doing under

1269
01:06:55,200 --> 01:06:58,400
the hood there, taking large, chunks of memory and a portion them up

1270
01:06:58,500 --> 01:07:02,100
and what they do there is if they produce holes, they then later, try

1271
01:07:02,100 --> 01:07:05,500
to fill those holes with other allocations that are similarly sized,

1272
01:07:05,500 --> 01:07:06,100
right?

1273
01:07:07,800 --> 01:07:10,700
So if you really do end up wanting something that's totally Dynamic,

1274
01:07:10,700 --> 01:07:14,400
the whole system ends up being cognitively Dynamic, you need a dynamic

1275
01:07:14,400 --> 01:07:15,800
allocator and you could write one of those.

1276
01:07:15,800 --> 01:07:17,600
They're not particularly hard, right?

1277
01:07:18,600 --> 01:07:21,500
But I usually say, why do you need the dynamic array?

1278
01:07:21,800 --> 01:07:24,500
Are you sure that that was the best idea, right?

1279
01:07:24,500 --> 01:07:27,200
Because most of the time, I find that Dynamic arrays are not such a

1280
01:07:27,200 --> 01:07:27,800
good idea.

1281
01:07:29,200 --> 01:07:34,300
Usually, you can, you can write it in a way, that's more predictable

1282
01:07:34,500 --> 01:07:37,000
because any Dynamic, array opens you up to the

1283
01:07:37,100 --> 01:07:41,700
You have memory fragmentation even if you have a dynamic allocator and

1284
01:07:41,700 --> 01:07:47,800
it also opens up to other possibilities that aren't so nice such as

1285
01:07:47,800 --> 01:07:50,300
unpredictability in terms of when allocations happen.

1286
01:07:50,800 --> 01:07:55,700
So I feel like I would I would say you know be sure first of all that

1287
01:07:55,700 --> 01:07:58,500
you really want dynamism in your memory allocation that way because

1288
01:07:58,500 --> 01:07:59,800
it's not always such a good thing.

1289
01:08:04,900 --> 01:08:08,100
Couldn't a compiler translate the opengl commands to see commands and

1290
01:08:08,100 --> 01:08:10,300
wrap them in a loop which iterates over the pixels?

1291
01:08:11,300 --> 01:08:12,700
Well, sure it can.

1292
01:08:13,100 --> 01:08:14,300
But take a look.

1293
01:08:14,300 --> 01:08:15,900
I mean, let me let me try to.

1294
01:08:16,500 --> 01:08:21,000
If you were not convinced by my explanation, let me get show.

1295
01:08:21,000 --> 01:08:24,399
You just literally the code that we wrote.

1296
01:08:25,100 --> 01:08:28,300
Here's draw a rectangle slowly which is most of what we've done so far

1297
01:08:28,300 --> 01:08:29,899
in terms of rendering, right?

1298
01:08:32,500 --> 01:08:33,700
Here is all the code.

1299
01:08:36,200 --> 01:08:39,100
To draw the texture map rectangle, right?

1300
01:08:39,399 --> 01:08:41,000
The part of it, that is the Shader.

1301
01:08:42,899 --> 01:08:44,100
Is right here.

1302
01:08:54,300 --> 01:08:59,800
So this is for multiplies that you would have implemented it in.

1303
01:09:00,000 --> 01:09:02,100
Our glsl pipeline to get.

1304
01:09:03,100 --> 01:09:06,500
The rest of this, this is the blend output, so that wouldn't be there,

1305
01:09:06,500 --> 01:09:06,700
right?

1306
01:09:06,700 --> 01:09:11,600
Because the blend Blends are not programmable in glsl at the moment.

1307
01:09:11,600 --> 01:09:14,200
Anyway, although I feel like someday, that's probably going to happen,

1308
01:09:14,200 --> 01:09:16,500
but right now the blend unit is not a fully programmable unit.

1309
01:09:16,500 --> 01:09:19,200
So this is not in glsl, right?

1310
01:09:19,500 --> 01:09:23,100
This is in the texture unit, so this is not in glsl, right?

1311
01:09:23,600 --> 01:09:29,000
I mean maybe if you were if you call there would be one glsl line

1312
01:09:29,000 --> 01:09:32,800
called texture or something that had to do and it would expand to all

1313
01:09:32,899 --> 01:09:34,200
This stuff right?

1314
01:09:34,500 --> 01:09:36,600
This entire part here, that's all in the texture unit.

1315
01:09:36,600 --> 01:09:38,700
It's not in glsl, right?

1316
01:09:38,800 --> 01:09:40,100
This is in the texture unit.

1317
01:09:40,100 --> 01:09:41,500
It is not in glsl.

1318
01:09:42,600 --> 01:09:46,200
All of this is the selecting the pixels not in glsl, right?

1319
01:09:46,500 --> 01:09:50,800
So, the code that would be in glsl is literally that like, that's the

1320
01:09:50,800 --> 01:09:52,300
part that you would be saving.

1321
01:09:53,100 --> 01:09:55,600
And it just I don't see why you would bother, right?

1322
01:09:55,600 --> 01:09:59,700
It just doesn't make any sense because this is the Shader for this

1323
01:09:59,700 --> 01:10:01,400
effect, which is just tinted thing.

1324
01:10:01,800 --> 01:10:02,700
And so, yeah, that will there be

1325
01:10:02,800 --> 01:10:03,800
Be a little bit more later.

1326
01:10:03,800 --> 01:10:06,500
Probably, they'll be like, a normal map thing or something in there.

1327
01:10:06,500 --> 01:10:06,900
Whatever.

1328
01:10:06,900 --> 01:10:08,200
Like we'll have a little bit more.

1329
01:10:09,300 --> 01:10:11,200
But it's just such a minut part.

1330
01:10:11,200 --> 01:10:14,900
Why would you complicate your code by introducing this whole other

1331
01:10:14,900 --> 01:10:15,800
language?

1332
01:10:15,800 --> 01:10:17,700
This whole other translation process?

1333
01:10:17,700 --> 01:10:19,700
Like why would you do that, right?

1334
01:10:20,000 --> 01:10:23,400
It's just a really bad decision until you know, you're going to have

1335
01:10:23,400 --> 01:10:27,400
tons and tons of code in glsl that you need to translate that way,

1336
01:10:27,400 --> 01:10:27,700
right?

1337
01:10:27,700 --> 01:10:30,400
And I just don't see that being logical.

1338
01:10:34,700 --> 01:10:35,300
Lucas parent.

1339
01:10:35,300 --> 01:10:38,000
Could you explain us how you free all the memory stack when closing

1340
01:10:38,000 --> 01:10:38,600
the game?

1341
01:10:39,600 --> 01:10:40,400
You don't?

1342
01:10:41,300 --> 01:10:45,800
Windows all modern operating systems discard 100% of your memory when

1343
01:10:45,800 --> 01:10:47,600
your clothes so you don't have to free any of it.

1344
01:10:57,000 --> 01:10:59,000
I have a hard time understanding, why srgb?

1345
01:10:59,000 --> 01:11:01,400
Conversions are required for the alpha Channel at all.

1346
01:11:01,700 --> 01:11:04,900
Well, so first of all, they're not happening in the alpha channel.

1347
01:11:05,300 --> 01:11:08,300
So, if you notice srgb, conversions are not happening in the alpha

1348
01:11:08,300 --> 01:11:12,200
Channel, we leave the alpha channel unconverted, it's linear.

1349
01:11:14,700 --> 01:11:16,000
And why your initial code was incorrect.

1350
01:11:16,000 --> 01:11:18,700
The alpha channel is being used to represent a proportion of photons

1351
01:11:18,700 --> 01:11:21,800
from one source and a proportion of photons from another source.

1352
01:11:21,900 --> 01:11:24,400
Wouldn't that be outside of the purview of color curves?

1353
01:11:24,400 --> 01:11:26,400
Because it doesn't technically have anything to do with brightness.

1354
01:11:26,400 --> 01:11:26,800
Yes.

1355
01:11:26,800 --> 01:11:27,100
Oh.

1356
01:11:27,400 --> 01:11:30,100
So you are correct in your intuition.

1357
01:11:30,100 --> 01:11:35,400
The alpha is not an srgb value in our current system, we are not

1358
01:11:35,400 --> 01:11:36,100
converting it.

1359
01:11:40,300 --> 01:11:42,200
You seem to be manipulating colors on a low level.

1360
01:11:42,200 --> 01:11:43,600
How are you pushing pixels?

1361
01:11:43,600 --> 01:11:44,700
Sorry, I'm kind of new.

1362
01:11:45,100 --> 01:11:48,200
You want to go back and take a look at the video archive.

1363
01:11:48,400 --> 01:11:51,500
So, on handmade hero dot-org.

1364
01:11:52,100 --> 01:11:55,300
Actually, if you go to the Forum site is probably the best part place

1365
01:11:55,300 --> 01:11:55,800
to go.

1366
01:11:56,400 --> 01:11:59,400
So if you go to forums, I have made here at or gup there.

1367
01:12:00,000 --> 01:12:04,800
What you can do is you can go to the episode guide.

1368
01:12:05,600 --> 01:12:12,200
And if you take a look at the episode guide, there's there's sound and

1369
01:12:12,200 --> 01:12:13,100
input on window.

1370
01:12:13,100 --> 01:12:14,400
Simple frame buffer on windows.

1371
01:12:14,400 --> 01:12:18,200
So week one, this is what you want to watch that.

1372
01:12:18,200 --> 01:12:19,000
That'll tell you.

1373
01:12:28,400 --> 01:12:34,800
Any reason you write Texel a plus desde - Texel a times desde instead

1374
01:12:34,800 --> 01:12:36,800
of this Envy that's tarde.

1375
01:12:36,800 --> 01:12:40,700
Este times Texel a, which would masturbate, you know.

1376
01:12:41,200 --> 01:12:50,200
No there isn't it's actually just because I worked out the math on the

1377
01:12:50,200 --> 01:12:54,000
Blackboard and this is what it worked out too if I remember correctly.

1378
01:12:54,800 --> 01:12:57,900
So yeah, we can do that if you take a look at what

1379
01:12:58,100 --> 01:12:59,200
What he was suggesting there.

1380
01:13:00,100 --> 01:13:02,700
So if I rearrange this, so I move this.

1381
01:13:03,000 --> 01:13:09,800
Oops, so just you can see, so curious Texel a right, if I move Texel a

1382
01:13:09,800 --> 01:13:10,500
to the end.

1383
01:13:10,500 --> 01:13:12,100
So keep the exact same equation.

1384
01:13:12,900 --> 01:13:21,100
Then, what I can do here is this is just one - Texel a times deste,

1385
01:13:21,600 --> 01:13:23,900
which is in virus a right.

1386
01:13:24,200 --> 01:13:27,900
So, you know, we could just write that much.

1387
01:13:28,000 --> 01:13:29,100
More concisely there.

1388
01:13:29,500 --> 01:13:32,800
I had just copied it down from the Blackboard but that's that is.

1389
01:13:33,000 --> 01:13:36,600
Yeah, definitely it makes perfect sense.

1390
01:13:36,600 --> 01:13:39,700
Why you would want to do that, it makes it much cleaner and more

1391
01:13:40,700 --> 01:13:42,100
definitely easier to read.

1392
01:13:42,100 --> 01:13:42,700
Right?

1393
01:13:44,200 --> 01:13:47,000
The other thing we could do is recognize that because we've gotten

1394
01:13:47,000 --> 01:13:48,400
this down to such a straightforward think.

1395
01:13:48,400 --> 01:13:52,700
Now, if we want to, we can also say, well, this is just in VAR, sa X

1396
01:13:52,700 --> 01:13:55,000
desk, plus Texel, right?

1397
01:13:56,900 --> 01:13:57,900
That's all I was.

1398
01:13:59,600 --> 01:14:02,900
So now it's just it's a little cleaner to read as well I suppose,

1399
01:14:03,300 --> 01:14:04,000
right?

1400
01:14:04,900 --> 01:14:06,500
So that's that's always good.

1401
01:14:07,000 --> 01:14:10,000
We can just keep on keep on keeping on, right?

1402
01:14:12,400 --> 01:14:15,900
Condense them condensed and condensed and so that's kind of fun.

1403
01:14:16,300 --> 01:14:19,900
This also is obviously the hadamard product so we could actually be

1404
01:14:19,900 --> 01:14:23,700
calling, you could actually call Texel equals hadamard.

1405
01:14:25,100 --> 01:14:28,200
Texel X color, right?

1406
01:14:30,500 --> 01:14:36,000
Oops, not plus equals hadamard times color, right?

1407
01:14:36,100 --> 01:14:37,700
And and that's the same.

1408
01:14:39,300 --> 01:14:41,800
I should double-check obviously that the

1409
01:14:43,500 --> 01:14:43,900
See.

1410
01:14:44,800 --> 01:14:46,500
Just double-check that are crazy.

1411
01:14:46,500 --> 01:14:48,000
Psychedelic thing work still.

1412
01:14:49,300 --> 01:14:49,800
There we go.

1413
01:14:52,200 --> 01:14:53,100
Lovely, isn't it?

1414
01:14:54,800 --> 01:14:58,500
So yeah, so so that can all be condensed quite a bit obviously.

1415
01:15:01,500 --> 01:15:02,400
Possibly should be.

1416
01:15:03,800 --> 01:15:07,600
Similarly, we could do this guy down here because it does exact same

1417
01:15:07,600 --> 01:15:08,600
code, right?

1418
01:15:09,700 --> 01:15:14,200
This is is, is the same we Arrangement, right?

1419
01:15:14,300 --> 01:15:17,200
So move the textile to the end, like so.

1420
01:15:18,300 --> 01:15:24,300
And then recognize that this is just one - textile, a times d a, which

1421
01:15:24,300 --> 01:15:30,900
is in virus a right and then that collapses its exact same operation.

1422
01:15:30,900 --> 01:15:33,100
So result is just getting Barse.

1423
01:15:33,600 --> 01:15:35,200
X d + Texel.

1424
01:15:37,100 --> 01:15:41,700
And that is, of course, the only place where, in virus a is used, so

1425
01:15:41,700 --> 01:15:43,900
you can substitute it in like, so,

1426
01:15:45,600 --> 01:15:48,300
So yeah, it just, you know, makes things a little bit cleaner.

1427
01:15:48,500 --> 01:15:49,100
Certainly

1428
01:15:55,400 --> 01:15:58,400
wasn't the alpha Channel authored with nonlinear colors.

1429
01:15:58,900 --> 01:16:04,500
So I don't think so because the alpha channel is typically authored by

1430
01:16:04,500 --> 01:16:09,500
Photoshop by writing the coverage value into each pixel when you paint

1431
01:16:09,500 --> 01:16:10,500
with the brush Strokes.

1432
01:16:10,900 --> 01:16:14,200
So I'm assuming and I don't know this definitively because I don't

1433
01:16:14,200 --> 01:16:16,800
have the source code to photoshop, but I'm assuming that the alpha is

1434
01:16:16,800 --> 01:16:18,700
not srgb encoded.

1435
01:16:25,100 --> 01:16:31,600
All right, so I think that's about it seems like no further questions,

1436
01:16:32,500 --> 01:16:35,700
so I will call it a day.

1437
01:16:37,000 --> 01:16:45,700
All right, ok, in that case, let's go ahead and close these guys and

1438
01:16:45,700 --> 01:16:46,900
save our Blackboard.

1439
01:16:49,300 --> 01:16:51,800
So, there we go.

1440
01:16:53,800 --> 01:16:54,400
All right.

1441
01:16:55,900 --> 01:16:58,400
Okay, that brings us to the end of another episode of handmade hero.

1442
01:16:58,400 --> 01:17:00,400
Thank you very much everyone for joining me today.

1443
01:17:00,400 --> 01:17:04,300
Pleasure coding with you, as always, if you would like to follow along

1444
01:17:04,300 --> 01:17:07,800
at home, you can pre-order the game on handmade hero dot-org, and it

1445
01:17:07,800 --> 01:17:10,000
comes with the source code that you can download every night, so that

1446
01:17:10,000 --> 01:17:13,000
you can turn to Tinker around with it and experiment with some of the

1447
01:17:13,000 --> 01:17:13,700
things that we're doing.

1448
01:17:13,700 --> 01:17:16,100
So that's a really good way to learn if you want to give that a shot.

1449
01:17:16,100 --> 01:17:18,000
We also have a patreon page.

1450
01:17:18,000 --> 01:17:20,900
If you want to support the video series, you can subscribe to that and

1451
01:17:20,900 --> 01:17:22,800
we have a forum site, which you can go to.

1452
01:17:23,200 --> 01:17:25,500
Where if you go to the Forum site, there's a bunch of cool stuff.

1453
01:17:25,700 --> 01:17:31,600
Episode guide, there's a Code discussion and there's a port to Mac and

1454
01:17:31,600 --> 01:17:34,200
Linux all kinds of good stuff there and there's a tweetbot that lets

1455
01:17:34,200 --> 01:17:37,400
you know the schedule I highly recommend checking out the Tweet bot,

1456
01:17:37,700 --> 01:17:39,800
if you are interested in catching the stream live because it always

1457
01:17:39,800 --> 01:17:40,600
tweets the schedule at you.

1458
01:17:40,600 --> 01:17:43,400
So you can always kind of know when it's going to be live so that's a

1459
01:17:43,400 --> 01:17:44,200
good way to do it too.

1460
01:17:44,900 --> 01:17:47,700
So tomorrow we'll sort of pick up I guess.

1461
01:17:47,700 --> 01:17:50,500
Maybe we'll start thinking about how we're going to keep things

1462
01:17:50,500 --> 01:17:51,500
optimized relatively.

1463
01:17:51,500 --> 01:17:54,700
Well, while we go forth, maybe separate some of that code out do

1464
01:17:54,700 --> 01:17:55,500
whatever needs to get done.

1465
01:17:55,600 --> 01:17:55,900
There.

1466
01:17:56,300 --> 01:17:57,900
And then we'll sort of push forward on a render.

1467
01:17:57,900 --> 01:17:59,600
Since I think we're in pretty good shape here.

1468
01:18:00,000 --> 01:18:03,100
Cleaned up some stuff today and we can maybe start adding some stuff

1469
01:18:03,100 --> 01:18:04,400
tomorrow, so that'll be good.

1470
01:18:04,900 --> 01:18:07,100
So yeah, hope to see you tomorrow.

1471
01:18:07,100 --> 01:18:07,600
Same time.

1472
01:18:07,600 --> 01:18:08,300
Same place tomorrow.

1473
01:18:08,300 --> 01:18:08,800
5:00 p.m.

1474
01:18:09,000 --> 01:18:09,700
5:00 p.m.

1475
01:18:10,100 --> 01:18:11,000
Pacific Standard Time.

1476
01:18:11,000 --> 01:18:11,900
Right here on Twitch.

1477
01:18:11,900 --> 01:18:15,800
So, hopefully, we'll see you for that and have a good Wednesday until

1478
01:18:15,800 --> 01:18:16,100
then.

1479
01:18:16,100 --> 01:18:17,000
Take it easy, everyone.

