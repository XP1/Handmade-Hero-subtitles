1
00:00:04,100 --> 00:00:06,500
Hello everyone and welcome to handmade hero.

2
00:00:06,500 --> 00:00:09,200
The show we could have complete game live on stream.

3
00:00:09,600 --> 00:00:14,000
I have modified our friendly timer to work properly with the new to

4
00:00:14,000 --> 00:00:14,800
our streams.

5
00:00:14,800 --> 00:00:21,300
So in theory, if we're lucky day 351 here will be the first test of

6
00:00:21,300 --> 00:00:22,100
the new timer.

7
00:00:23,100 --> 00:00:27,100
I didn't, I literally just hacked two lines of code into it and

8
00:00:27,100 --> 00:00:28,300
recompiled it and run it.

9
00:00:30,500 --> 00:00:32,800
So who knows what it will do.

10
00:00:35,100 --> 00:00:39,400
Anyway, I apologize for yesterday's episode having to day numbers in

11
00:00:39,400 --> 00:00:42,200
it because I realized after that that I couldn't actually do that.

12
00:00:42,600 --> 00:00:45,300
And the reason that I realized I couldn't do that is because the

13
00:00:45,600 --> 00:00:48,800
format on handmade Hero has always been that.

14
00:00:48,800 --> 00:00:53,000
There is a source code drop for every day, so that when you start on a

15
00:00:53,000 --> 00:00:55,500
new day, you know, you can use the previous day's source code, and I

16
00:00:55,500 --> 00:00:58,300
was like, wait, we didn't take a source drop in the middle, so we

17
00:00:58,300 --> 00:01:00,400
can't have a 350 in a 351.

18
00:01:01,600 --> 00:01:03,700
So I just merge the two.

19
00:01:03,900 --> 00:01:07,100
So, it's from yesterday together and call the day 350, and there's a

20
00:01:07,100 --> 00:01:09,600
source code drop for after day 350.

21
00:01:10,800 --> 00:01:16,800
So today will be day 351 and it will be 2 hours continuous.

22
00:01:17,200 --> 00:01:18,900
And there will be one source code drop.

23
00:01:18,900 --> 00:01:22,700
So that's the way we're going to try it anyway so that we don't have

24
00:01:22,700 --> 00:01:27,500
to stop in the middle of programming and snap a source code snapshot

25
00:01:27,500 --> 00:01:29,200
and then continue or whatever else.

26
00:01:29,200 --> 00:01:29,700
Right?

27
00:01:33,200 --> 00:01:35,000
Doesn't seem worth it for any particular reason.

28
00:01:36,200 --> 00:01:38,900
And since the stuff on, the two hour blocks, tend to go together, it

29
00:01:38,900 --> 00:01:39,900
seems like it should be fine.

30
00:01:41,100 --> 00:01:43,200
All right, so that's all the business.

31
00:01:43,900 --> 00:01:45,900
Let's get back to what we were doing yesterday.

32
00:01:45,900 --> 00:01:50,100
I think we mostly did what we wanted to do, but there were some loose

33
00:01:50,100 --> 00:01:50,500
ends.

34
00:01:50,700 --> 00:01:55,300
We wanted to start sort of see what it would take to multi-thread, our

35
00:01:55,600 --> 00:01:59,300
sort of regional updating our game simulation, we did that.

36
00:02:00,000 --> 00:02:04,000
And then there was some things that I thought were really sort of

37
00:02:04,100 --> 00:02:05,800
embedded in the simulation

38
00:02:06,000 --> 00:02:08,699
That probably shouldn't be embedded in the simulation because they're

39
00:02:08,699 --> 00:02:13,800
very specific to choose me certain things.

40
00:02:13,800 --> 00:02:17,300
That happen which don't always happen during simulation like updating

41
00:02:17,300 --> 00:02:19,600
the camera and other things like that.

42
00:02:19,600 --> 00:02:23,000
So we had some notes about what we wanted to investigate there.

43
00:02:23,000 --> 00:02:27,300
And so for the next two hours, I'm just going to investigate those and

44
00:02:27,300 --> 00:02:32,100
I'm going to see to what extent I can make that code look a little bit

45
00:02:32,100 --> 00:02:36,000
more uniform and maybe pull out certain things that are kind of

46
00:02:36,100 --> 00:02:39,200
Embedded in it right now that I feel like it would be better if they

47
00:02:39,200 --> 00:02:40,900
if they were sort of more separated.

48
00:02:43,500 --> 00:02:46,300
okay, so if you remember, we basically just have things running the

49
00:02:46,300 --> 00:02:50,400
way they were running and right now, we have essentially everything is

50
00:02:50,400 --> 00:02:54,200
working the way we expect but we have sort of like

51
00:02:57,000 --> 00:02:57,400
See here.

52
00:02:57,400 --> 00:02:58,600
If we've got it switched on.

53
00:02:58,600 --> 00:02:59,800
Yeah, we have

54
00:03:00,000 --> 00:03:03,100
Of like World simulation getting farmed out here.

55
00:03:03,900 --> 00:03:06,800
So that multiple threads can now work on world simulation.

56
00:03:07,100 --> 00:03:11,000
We are spending a fantastic amount of our time, on debug collation.

57
00:03:11,600 --> 00:03:13,800
And this is kind of a problem for us.

58
00:03:14,100 --> 00:03:17,200
It's definitely, you know, an issue.

59
00:03:17,200 --> 00:03:20,200
I don't know if we want to take a look at that, at some point, it

60
00:03:20,200 --> 00:03:22,900
occurs to me that, you know, one of the things that I decided to do

61
00:03:22,900 --> 00:03:25,100
when we wrote the debug layer because we were just kind of playing

62
00:03:25,100 --> 00:03:27,500
around with it, and it was interesting and I kind of want to show how

63
00:03:27,500 --> 00:03:28,900
to work with some that stuff.

64
00:03:29,600 --> 00:03:29,900
One of the

65
00:03:30,000 --> 00:03:33,500
The things that I kind of did that I think was not very bright, is

66
00:03:33,500 --> 00:03:36,900
that we kind of did a full logging system and while that's kind of a

67
00:03:36,900 --> 00:03:41,200
good idea and it's interesting, the problem with it is that it then

68
00:03:41,200 --> 00:03:43,100
becomes very expensive to actually work with.

69
00:03:43,100 --> 00:03:46,700
You can see that like, you know, the actual amount of time that we're

70
00:03:46,700 --> 00:03:50,200
spending on our game right now, even in debug mode, right?

71
00:03:50,200 --> 00:03:53,000
So, this is the debug build the slowest possible, build.

72
00:03:55,300 --> 00:04:00,600
Even in that mode, you know, we end up in a situation where the game

73
00:04:00,600 --> 00:04:05,800
would be running at 16 at 60 frames a second just fine, right?

74
00:04:06,600 --> 00:04:10,900
But this massive chunk of time, here are spent doing debug event

75
00:04:10,900 --> 00:04:16,399
processing is is just really ways of Statin pretty heavily and you can

76
00:04:16,399 --> 00:04:21,100
kind of see that like it's you know, it's really not that like drawing

77
00:04:21,100 --> 00:04:21,800
part of this.

78
00:04:22,500 --> 00:04:23,900
It's actually literally the

79
00:04:24,300 --> 00:04:29,400
That's the that's the super slow part and you can understand why I

80
00:04:29,400 --> 00:04:33,600
like there's 46,000 events that are getting recorded every frame,

81
00:04:34,000 --> 00:04:34,200
right?

82
00:04:34,200 --> 00:04:38,100
That's what that number up there is telling us and that's just a huge

83
00:04:38,100 --> 00:04:42,200
amount of stuff to process at 60 frames a second.

84
00:04:42,200 --> 00:04:48,100
You know, when you're up in the in the fifty thousand, things to

85
00:04:48,100 --> 00:04:52,500
process at 60 frames a second, you can't just have necessarily super

86
00:04:52,500 --> 00:04:53,900
Cavalier code, right?

87
00:04:54,000 --> 00:04:55,600
Write your code.

88
00:04:55,600 --> 00:04:59,000
Like, for example, in this case, if it's not compiled in release mode

89
00:04:59,000 --> 00:05:01,900
might not be fast enough because, you know, there's just enough busy

90
00:05:01,900 --> 00:05:06,900
work in the bad, debug, sort of code gen, that it's going to put you

91
00:05:06,900 --> 00:05:08,000
over your budget, right?

92
00:05:09,300 --> 00:05:13,800
So, you know, it's not really a cause for concern because you know,

93
00:05:14,100 --> 00:05:15,900
again, it's only the debug code.

94
00:05:15,900 --> 00:05:18,800
We don't really have to worry about it too much because it's like,

95
00:05:18,800 --> 00:05:20,200
well, it doesn't ship in the game.

96
00:05:20,200 --> 00:05:22,000
So it's never going to cause a shipping problem.

97
00:05:22,200 --> 00:05:23,900
And if we do turn on optimization,

98
00:05:24,000 --> 00:05:28,700
And when we run, then we don't really have as much of a problem

99
00:05:28,700 --> 00:05:29,200
anymore.

100
00:05:30,400 --> 00:05:31,100
But

101
00:05:32,800 --> 00:05:35,000
It's still a problem, right?

102
00:05:35,500 --> 00:05:38,000
And if we take a look at what's happening in thread so you can still

103
00:05:38,000 --> 00:05:43,600
see like even in the in the deep in the release mode build, we're

104
00:05:43,600 --> 00:05:45,800
still in a situation where yeah.

105
00:05:45,900 --> 00:05:50,200
Like you know if we looked at how fast our game is running here, it's

106
00:05:50,200 --> 00:05:55,300
going just fine, but this massive kind of blip here is a big problem.

107
00:05:55,500 --> 00:05:59,500
I'm also kind of interested to know there's like this sort of periodic

108
00:06:00,200 --> 00:06:02,000
Spamming that seems to happen there.

109
00:06:02,500 --> 00:06:05,100
I'm not sure where that happened.

110
00:06:05,100 --> 00:06:05,600
Exactly.

111
00:06:05,600 --> 00:06:06,100
But

112
00:06:11,700 --> 00:06:15,300
You can kind of see, like that's a very interesting.

113
00:06:17,800 --> 00:06:20,100
That's a very interesting pattern, right?

114
00:06:20,100 --> 00:06:22,000
And I'm not sure exactly what it is.

115
00:06:22,300 --> 00:06:23,200
That's happening there.

116
00:06:23,500 --> 00:06:24,800
I would like to see

117
00:06:27,400 --> 00:06:28,100
We need to make this.

118
00:06:28,100 --> 00:06:29,000
Thanks Rubble.

119
00:06:35,600 --> 00:06:36,100
There it is.

120
00:06:37,200 --> 00:06:40,500
So like if you take a look at this here I have no idea what happened

121
00:06:40,500 --> 00:06:43,000
there which is not great, right?

122
00:06:43,000 --> 00:06:48,100
Like you know when you have something like this that's like an anomaly

123
00:06:48,100 --> 00:06:48,700
frame.

124
00:06:49,000 --> 00:06:49,800
It's much nicer.

125
00:06:49,800 --> 00:06:53,000
If you can figure out or if you have some idea of like what the actual

126
00:06:53,000 --> 00:06:53,600
problem is,

127
00:06:55,300 --> 00:06:57,500
And the problem is, if we drill down in here, you know there's not

128
00:06:57,500 --> 00:07:00,800
going to be very much data as to what's going on because we just don't

129
00:07:00,800 --> 00:07:02,900
have much marked up at this point.

130
00:07:03,000 --> 00:07:05,800
So it's pretty hard to tell, like what the actual problem is there.

131
00:07:07,300 --> 00:07:11,900
So, you know, that's not great and you can kind of see that in this

132
00:07:11,900 --> 00:07:16,400
situation where you got all of these really long thread times here,

133
00:07:18,200 --> 00:07:22,400
even in that case, like the actual other, the actual part between

134
00:07:22,400 --> 00:07:24,900
begin World, change and World change is like really tiny

135
00:07:25,700 --> 00:07:26,200
Right?

136
00:07:27,200 --> 00:07:31,300
So, you know, it almost suggests to me that maybe people got hung up

137
00:07:31,300 --> 00:07:35,400
on a mutex somehow or some, I mean, I don't really know but it's like,

138
00:07:36,000 --> 00:07:37,500
it's pretty clear from this.

139
00:07:39,700 --> 00:07:42,500
That we've got some issues that we probably are going to need to

140
00:07:42,500 --> 00:07:45,400
figure out how to address because just looking at them here.

141
00:07:46,600 --> 00:07:50,000
It's, you know, we don't even have enough information to know why we

142
00:07:50,000 --> 00:07:54,300
were getting this weird flip and, you know, it's possible that this

143
00:07:54,300 --> 00:07:56,400
was some kind of operating system interference.

144
00:07:56,400 --> 00:08:01,000
You know, it's possible that someone jumped in here and interrupted

145
00:08:01,000 --> 00:08:06,900
us, but at the same time, you know, the reason that I am not that I

146
00:08:06,900 --> 00:08:08,700
wouldn't immediately jump to that conclusion.

147
00:08:09,000 --> 00:08:14,200
Is that when all of our korres you know like this is quite a few

148
00:08:14,200 --> 00:08:15,200
threads here, right?

149
00:08:15,200 --> 00:08:21,500
1, 2 3 4 5 6 7 when all of our cores are in this sort of holding

150
00:08:21,500 --> 00:08:27,500
pattern then it's you know it's less likely that the operating system

151
00:08:27,500 --> 00:08:32,400
evicted our entire application out of all the cores to do something

152
00:08:32,400 --> 00:08:35,700
else unless that's something else was something that needed all the

153
00:08:35,700 --> 00:08:37,500
cores for some reason, right?

154
00:08:38,799 --> 00:08:42,200
But you can kind of see why it's like unclear to me, you know, I mean

155
00:08:42,900 --> 00:08:45,500
we're running open broadcasting system in the background for doing

156
00:08:45,500 --> 00:08:46,000
this dream.

157
00:08:46,000 --> 00:08:48,100
So anything, you know, who knows?

158
00:08:48,900 --> 00:08:52,100
It's certainly possible that it steals a bunch of course, for work

159
00:08:52,200 --> 00:08:54,900
every so often and it's not our fault.

160
00:08:55,000 --> 00:08:58,700
But again, you know, without additional information, I wouldn't be

161
00:08:58,700 --> 00:08:59,800
comfortable saying

162
00:09:00,300 --> 00:09:01,400
Oh, don't worry about it.

163
00:09:01,400 --> 00:09:05,000
It's not our fault because we don't have the information here.

164
00:09:05,000 --> 00:09:08,500
Net, to necessary to actually conclude that, right?

165
00:09:10,500 --> 00:09:14,600
So yeah, so that's just kind of bizarre and I'm not sure.

166
00:09:15,000 --> 00:09:16,500
Yeah, I'm not sure what the deal is there.

167
00:09:17,900 --> 00:09:18,400
But anyway.

168
00:09:18,400 --> 00:09:18,600
Yeah.

169
00:09:18,600 --> 00:09:22,300
So we've got some work to do here on the debug view stuff and in terms

170
00:09:22,300 --> 00:09:24,600
of how we want to mark up our zones probably, as well.

171
00:09:27,400 --> 00:09:28,700
Just in terms of what's going on.

172
00:09:28,700 --> 00:09:32,000
But but anyway, just some stuff to be aware of.

173
00:09:33,000 --> 00:09:36,600
So yeah, we're getting a lot of debug information sunk out there.

174
00:09:37,200 --> 00:09:40,700
And I'm not really sure again, like exactly what's going on with that.

175
00:09:42,200 --> 00:09:45,900
I would be interested to know why so many debug events are getting

176
00:09:45,900 --> 00:09:50,700
generated and I suspect that, you know, it might just be because of

177
00:09:51,200 --> 00:09:53,200
the entity block stuff that we're doing there.

178
00:09:53,500 --> 00:09:56,000
One thing we could do for example in

179
00:09:58,000 --> 00:10:03,900
In the entity sort of render part of things here, where we do our like

180
00:10:03,900 --> 00:10:08,000
begin block, we could start getting rid of this stuff, right?

181
00:10:08,000 --> 00:10:10,900
So just instead of like looking at those individual things because

182
00:10:10,900 --> 00:10:13,800
that's going to open every single entity every time when we do

183
00:10:13,800 --> 00:10:15,300
physics, that's going to happen.

184
00:10:15,800 --> 00:10:19,200
We could start getting rid of some of these guys, right?

185
00:10:21,100 --> 00:10:26,600
And then when we do sort of the debug pick entity stuff for that as

186
00:10:26,600 --> 00:10:27,000
well.

187
00:10:28,900 --> 00:10:30,600
Then we get rid of the debug pick entity.

188
00:10:35,200 --> 00:10:38,400
In here we could just say like okay it's only going to do it if the

189
00:10:38,400 --> 00:10:39,700
debuggers cut surface end of the idea.

190
00:10:39,700 --> 00:10:44,800
So presumably that should generate any traffic either and I feel like

191
00:10:44,800 --> 00:10:47,000
that and cut down on the events to some great do.

192
00:10:47,000 --> 00:10:48,000
Well that didn't really

193
00:10:50,300 --> 00:10:53,100
It would be nice to know like where most of our events are coming from

194
00:10:53,100 --> 00:10:53,500
right?

195
00:10:53,600 --> 00:10:55,400
Like because I don't have a good feel for it.

196
00:11:00,400 --> 00:11:01,400
Let's see here.

197
00:11:07,700 --> 00:11:09,900
Yeah, because I feel like a lot of these things are not going to be

198
00:11:09,900 --> 00:11:11,100
called that often.

199
00:11:26,700 --> 00:11:28,800
Yeah, most of these things, I don't even think should be all that

200
00:11:28,800 --> 00:11:29,500
relevant.

201
00:11:34,200 --> 00:11:38,500
But anyway, so and really I feel like this is just a problem in

202
00:11:38,500 --> 00:11:43,400
general because I feel like that's just that's just seems like way too

203
00:11:43,400 --> 00:11:43,800
many.

204
00:11:44,600 --> 00:11:45,700
I feel like I'm missing something.

205
00:11:45,700 --> 00:11:47,100
Oh, get World chunk internal.

206
00:11:48,300 --> 00:11:48,700
Hi.

207
00:11:48,700 --> 00:11:49,100
Guess what?

208
00:11:49,100 --> 00:11:49,600
This is.

209
00:11:49,600 --> 00:11:53,100
Should be a pretty obvious indicator for me of like what is the

210
00:11:53,100 --> 00:11:53,500
problem?

211
00:11:53,500 --> 00:11:54,300
So, get World chunk.

212
00:11:54,300 --> 00:11:57,500
Internal is getting called a ton of times.

213
00:12:12,700 --> 00:12:18,700
Okay, so that's mostly what that is, all right?

214
00:12:20,400 --> 00:12:24,000
So basically like, you know, let's talk about things here.

215
00:12:24,000 --> 00:12:28,300
Let's just let's just let's point out a few things, a few, a few

216
00:12:28,300 --> 00:12:29,100
issues.

217
00:12:29,800 --> 00:12:30,300
So

218
00:12:33,900 --> 00:12:36,500
First of all, why is get World chunk?

219
00:12:36,500 --> 00:12:38,100
Internal being called so often.

220
00:12:38,500 --> 00:12:40,700
And the answer for that is I think are chunks.

221
00:12:40,700 --> 00:12:42,600
Our world chunks are probably too tiny.

222
00:12:47,700 --> 00:12:50,300
You know, I think we size them.

223
00:12:52,100 --> 00:12:57,400
To be probably pretty, pretty tiny when we create the world.

224
00:12:58,500 --> 00:12:59,000
Right.

225
00:13:00,200 --> 00:13:01,100
And we

226
00:13:06,400 --> 00:13:09,000
Can we make one of these things we pass in this chunk demand meters,

227
00:13:09,000 --> 00:13:09,400
right?

228
00:13:09,400 --> 00:13:12,500
And the chunk dim and meters which I assume

229
00:13:16,600 --> 00:13:18,100
We have Jimmy.

230
00:13:22,400 --> 00:13:28,900
There it is, it's not going to be particularly big, right Grand,

231
00:13:28,900 --> 00:13:29,800
buffer width and ground.

232
00:13:29,800 --> 00:13:32,800
Buffer height are kind of residuals from when we used to render these

233
00:13:32,800 --> 00:13:33,200
things.

234
00:13:45,000 --> 00:13:48,100
And yeah that's that's going to be really tiny, right?

235
00:13:48,500 --> 00:13:51,600
I mean I guess it's not really tiny but it's not particularly big,

236
00:13:51,600 --> 00:13:55,700
there's many of those prescribed so I guess we're probably calling a

237
00:13:55,700 --> 00:13:58,400
tremendous number of those because you think of it we call several

238
00:13:58,400 --> 00:14:03,700
deep and several wide and tall as well.

239
00:14:04,000 --> 00:14:08,400
So yeah it's like probably not the best partition size.

240
00:14:10,400 --> 00:14:12,700
I also since we don't actually need these anymore.

241
00:14:14,000 --> 00:14:18,200
We probably want to set this in some kind of a more intelligent way,

242
00:14:18,500 --> 00:14:19,000
right?

243
00:14:19,800 --> 00:14:23,600
So we probably want to say like okay, you know, how many meters across

244
00:14:23,600 --> 00:14:27,100
the we want one of these things to be you know, and who knows what

245
00:14:27,100 --> 00:14:27,400
that is?

246
00:14:27,400 --> 00:14:31,000
But let's say maybe 10 meters or something?

247
00:14:31,000 --> 00:14:33,100
Is that is the chunk size?

248
00:14:33,400 --> 00:14:34,000
I don't know.

249
00:14:37,200 --> 00:14:44,200
We can certainly set that at our own Leisure, but in terms of how big

250
00:14:44,200 --> 00:14:47,900
those chunks are, that's definitely something that we want to keep

251
00:14:48,600 --> 00:14:52,400
under control because it's supposed to be our spatial partition and we

252
00:14:52,400 --> 00:14:56,900
don't really want a situation where our spatial partition is actually

253
00:14:56,900 --> 00:14:57,200
has.

254
00:14:57,700 --> 00:14:59,800
It's so tiny that it's not actually serving.

255
00:15:00,000 --> 00:15:00,900
Partition things up.

256
00:15:00,900 --> 00:15:03,100
It's just like there's way too many of them, right?

257
00:15:03,700 --> 00:15:08,000
Because at some point, it becomes a cost in and of itself maintaining

258
00:15:08,000 --> 00:15:11,600
such small chunks and we don't want that, we want it to be a

259
00:15:11,600 --> 00:15:12,900
reasonably picked size.

260
00:15:14,100 --> 00:15:18,300
So, you know, we kind of have some control over how much of that is

261
00:15:18,300 --> 00:15:19,200
happening, certainly.

262
00:15:20,100 --> 00:15:23,600
And we can sort of try to keep that more under control as as a number

263
00:15:23,600 --> 00:15:25,700
that we're concerned about, right.

264
00:15:28,000 --> 00:15:32,100
and we can sort of see here, that that's, that's like a totally

265
00:15:34,400 --> 00:15:37,600
That number right there is about half of what it used to be.

266
00:15:37,700 --> 00:15:41,800
So, expanding it by that, much, definitely reduces the number.

267
00:15:42,100 --> 00:15:45,600
However, if we think about what's happening, I guess, you know, in

268
00:15:45,600 --> 00:15:49,500
truth, there's probably just going to be a lot of those chunks.

269
00:15:49,700 --> 00:15:52,600
Well, we probably should do, is draw the chunks in here as well.

270
00:15:53,100 --> 00:15:56,300
Like, take a look at what the the chunk grid actually looks like.

271
00:15:56,600 --> 00:15:57,100
And

272
00:15:59,100 --> 00:16:04,700
you know, if we were to say, let's go into some region here,

273
00:16:05,800 --> 00:16:08,100
I'm trying to think of like what the easiest way to be would be to

274
00:16:08,100 --> 00:16:12,300
draw them, but if we take a look at begin World, change

275
00:16:16,400 --> 00:16:22,600
Here is sort of our code for looping over the chunks, that's in a Sim

276
00:16:22,600 --> 00:16:23,100
region.

277
00:16:23,700 --> 00:16:26,800
So, one thing we could do is have sort of a debug call that says like,

278
00:16:26,800 --> 00:16:29,800
draw all of the chunks that are in this this same region.

279
00:16:35,600 --> 00:16:37,500
So that would probably be something that would be good to be able to

280
00:16:37,500 --> 00:16:37,900
do.

281
00:16:38,000 --> 00:16:40,200
So we'd have some idea of like, where those trunks were.

282
00:16:40,900 --> 00:16:48,700
And if I want to do that, do they, what I would like, is it some way

283
00:16:48,700 --> 00:16:53,200
in those sort of the world code here to have a call?

284
00:16:53,200 --> 00:16:57,000
That gives me back the dimensions of a world chunk.

285
00:16:57,100 --> 00:17:01,400
So I can kind of know, like, hey, if I asked you here is a world

286
00:17:01,400 --> 00:17:04,900
chunk, tell me what the bounds of this world chunk.

287
00:17:05,200 --> 00:17:08,900
actually our that would be something that's nice to have and we don't

288
00:17:08,900 --> 00:17:13,000
have that yet like we have ways and putting things into and taking

289
00:17:13,000 --> 00:17:15,400
them out of chunks, but we don't have anything that's like, hey,

290
00:17:18,300 --> 00:17:21,400
Get World chunk bounds or something like that, you know.

291
00:17:22,200 --> 00:17:27,500
And then we would pass in you know some kind of information about the

292
00:17:27,500 --> 00:17:31,700
world chunk like the chunk XY and z or something like this and

293
00:17:33,600 --> 00:17:36,100
it would do this, you know, the calculations to determine

294
00:17:42,600 --> 00:17:46,200
Much like this does it would do the calculations to determine, you

295
00:17:46,200 --> 00:17:48,900
know, where that chunk was and return it.

296
00:17:48,900 --> 00:17:52,200
So that anyone who wants to know what the bounds of a chunk, you know,

297
00:17:52,200 --> 00:17:53,700
happen to be, they can get that.

298
00:17:54,800 --> 00:17:56,600
So how would we compute this?

299
00:17:56,800 --> 00:17:57,100
Right?

300
00:17:57,100 --> 00:17:59,700
Because we've never actually had to talk about it explicitly

301
00:18:00,500 --> 00:18:04,100
So what we tend to do like get World, chunk internal, right?

302
00:18:04,600 --> 00:18:09,000
What we tend to do is we take these this like, X Y and Z and we just

303
00:18:09,800 --> 00:18:14,000
the way that this code actually works is it doesn't even really have

304
00:18:14,000 --> 00:18:17,100
the notion of a size of a chunk at all.

305
00:18:17,100 --> 00:18:20,300
Anyway, like if you take a look at how this code works, it doesn't

306
00:18:20,300 --> 00:18:22,200
know, it doesn't even really care.

307
00:18:24,700 --> 00:18:29,000
What the size of a chunk is, you know, if you look at what these

308
00:18:29,000 --> 00:18:35,300
things do, they just use the X Y and Z as sort of a ID, really?

309
00:18:39,500 --> 00:18:44,800
For retrieving the data for a particular chunk at no time.

310
00:18:45,000 --> 00:18:48,400
Does anyone ever care how big the chunk actually is.

311
00:18:48,700 --> 00:18:52,200
So, all of this internal code just doesn't care how big the chunk is,

312
00:18:52,200 --> 00:18:55,900
as far as its concerned, the person on the outside, has to know how

313
00:18:55,900 --> 00:19:00,300
these things map and we're just getting in those coordinates, right?

314
00:19:02,400 --> 00:19:05,900
So, really the code, we're looking at is like map into chunks face or

315
00:19:05,900 --> 00:19:10,900
something like this or some similar code, like that, that has to do

316
00:19:11,400 --> 00:19:13,500
with the chunk demand M, right?

317
00:19:13,700 --> 00:19:18,000
Because only when we actually map coordinates into the canonical XYZ

318
00:19:18,000 --> 00:19:22,300
of the chunk, is, that's the only time that we ever really take this

319
00:19:22,300 --> 00:19:23,200
into account.

320
00:19:23,600 --> 00:19:27,000
And the way that we're doing that currently is we're using rounding

321
00:19:27,000 --> 00:19:30,400
after a divided, which means that our chunk coordinates are like

322
00:19:30,400 --> 00:19:31,800
Center coordinates.

323
00:19:32,000 --> 00:19:32,400
Right?

324
00:19:32,500 --> 00:19:40,100
So the the center point of a chunk is where the X y&z refers to as far

325
00:19:40,100 --> 00:19:42,100
as our canonicalization of position.

326
00:19:42,800 --> 00:19:45,700
So that means what we would want to do is take the chunk X.

327
00:19:45,700 --> 00:19:50,200
Y&z, we'd want to use those first as multipliers to put us into a

328
00:19:50,200 --> 00:19:51,200
particular location.

329
00:19:51,300 --> 00:19:54,200
But then, that is like, the center point of a chunk and we would

330
00:19:54,200 --> 00:19:56,300
expand it by that much.

331
00:19:56,300 --> 00:20:00,600
So we would have something like Chuck Center and we would love to

332
00:20:00,600 --> 00:20:01,200
these

333
00:20:01,900 --> 00:20:04,600
Up, like the trunk EX.

334
00:20:07,300 --> 00:20:08,200
The chunk, why?

335
00:20:09,300 --> 00:20:12,500
And the chunk Z we would want these to become.

336
00:20:13,900 --> 00:20:15,600
A center point, right?

337
00:20:15,800 --> 00:20:19,400
And we would want to multiply that Center Point, by the dim, in m to

338
00:20:19,400 --> 00:20:21,500
get it to the actual location where it is, right?

339
00:20:21,500 --> 00:20:23,700
So we're talking about like a hadamard product here, right?

340
00:20:23,700 --> 00:20:28,400
Where we multiply each element of each vector by its neighbor.

341
00:20:28,500 --> 00:20:31,500
Right, by its, by its corresponding element the other Vector.

342
00:20:31,800 --> 00:20:35,500
So, the dim x times a chunk X dim light times chunk, why dim Z times

343
00:20:35,500 --> 00:20:39,800
chunk, see that would move us out to the center point and then when we

344
00:20:39,800 --> 00:20:43,600
want to make the the rectangle, what we would want to do is

345
00:20:43,700 --> 00:20:45,800
Add sort of that chunk Tim.

346
00:20:47,900 --> 00:20:49,800
Right to the center point.

347
00:20:49,800 --> 00:20:53,800
But again, the chunk demand m is the entire set like a diameter and we

348
00:20:53,800 --> 00:20:56,200
want to expand out from the center just by the radius in either

349
00:20:56,200 --> 00:20:56,800
direction.

350
00:20:57,400 --> 00:20:59,400
I don't think we have an ad diameter too.

351
00:21:00,100 --> 00:21:04,100
Yeah, so what we want to do is first just have it, right?

352
00:21:04,100 --> 00:21:08,400
So we just want to use half of it and then we should be able to get

353
00:21:10,300 --> 00:21:10,800
whoops.

354
00:21:14,300 --> 00:21:17,700
Guess we don't have a rectangular yet so we actually want rekt Center

355
00:21:17,900 --> 00:21:18,300
Dim.

356
00:21:20,600 --> 00:21:21,700
So I guess we've already got.

357
00:21:21,700 --> 00:21:23,400
We do already have something that works, the diameter.

358
00:21:25,600 --> 00:21:29,300
So then we've got a way of figuring out like where an individual chunk

359
00:21:29,300 --> 00:21:33,800
is and so now in theory we should be able to draw it right inside

360
00:21:33,800 --> 00:21:37,600
World mode for example where we were sort of doing our current debug

361
00:21:37,600 --> 00:21:41,200
drawing, where we do like our push wrecked outline stuff, it should be

362
00:21:41,200 --> 00:21:44,000
relatively straightforward for us to do something here where we sort

363
00:21:44,000 --> 00:21:46,900
of say like hey get the world chunk bounds.

364
00:21:49,100 --> 00:21:50,500
For some World chunk.

365
00:21:50,500 --> 00:21:52,700
Let's just, we'll iterate over them later.

366
00:21:52,900 --> 00:21:57,400
Let's just say the 000 chunk that's going to give us back a chunk

367
00:21:57,400 --> 00:22:03,300
wrecked, and then we can go ahead and draw that chunk wrecked wherever

368
00:22:03,300 --> 00:22:04,000
we want.

369
00:22:04,000 --> 00:22:04,500
Right?

370
00:22:05,000 --> 00:22:08,400
So we can say like, hey, you know,

371
00:22:10,900 --> 00:22:12,600
Draw the bounds of this thing.

372
00:22:14,200 --> 00:22:14,800
and,

373
00:22:16,800 --> 00:22:19,900
I guess interestingly enough World transform because that's around the

374
00:22:19,900 --> 00:22:20,900
camera P there.

375
00:22:24,300 --> 00:22:27,000
We would want to sort of have this be relative to the camera baby.

376
00:22:27,300 --> 00:22:30,600
I guess it doesn't really much matter how we do this, but we could say

377
00:22:30,600 --> 00:22:34,500
that the offset here for example, was going to be

378
00:22:36,700 --> 00:22:38,000
Get min corner.

379
00:22:39,200 --> 00:22:39,400
Shun.

380
00:22:39,400 --> 00:22:43,000
Correct, although I don't know how we do when we push wrecked outline?

381
00:22:43,100 --> 00:22:44,900
I guess we passed the center point.

382
00:22:45,000 --> 00:22:46,500
So I guess we just do like get Center.

383
00:22:49,800 --> 00:22:50,200
Right.

384
00:22:55,100 --> 00:22:58,800
So get World chunk bounds, needs to take the world obviously, as a

385
00:22:58,800 --> 00:22:59,200
parameter.

386
00:22:59,200 --> 00:23:00,100
So that seems fine.

387
00:23:00,800 --> 00:23:03,100
I should probably pass a color here that makes sense.

388
00:23:04,300 --> 00:23:05,900
I guess this is passing purple.

389
00:23:07,300 --> 00:23:11,000
Maybe like if we've got looks like we've got yellow cyan

390
00:23:12,400 --> 00:23:14,700
And purple for something.

391
00:23:15,200 --> 00:23:18,100
Not exactly sure what color I want to be.

392
00:23:18,400 --> 00:23:19,500
I'll make it white for now.

393
00:23:24,700 --> 00:23:29,500
All right, so that's one chunks Worth, right?

394
00:23:30,800 --> 00:23:33,800
And so if I come out here and I look at

395
00:23:39,600 --> 00:23:42,600
I guess it's going to be one of those things where, like, you know,

396
00:23:42,600 --> 00:23:44,100
it's the center of this thing.

397
00:23:46,900 --> 00:23:51,200
If we take a look at how big that one rectangle is, I guess we can

398
00:23:51,200 --> 00:23:54,700
kind of understand to a certain degree, why there are so many getting

399
00:23:54,700 --> 00:23:55,600
pulled out, right?

400
00:23:55,700 --> 00:23:59,500
Because this entire region is going to get pulled out.

401
00:23:59,600 --> 00:23:59,800
So,

402
00:24:00,000 --> 00:24:04,000
That's going to be something like 64 of these or something like that

403
00:24:04,700 --> 00:24:07,300
and then it's five high.

404
00:24:07,600 --> 00:24:09,400
So that's going to be, you know,

405
00:24:10,400 --> 00:24:14,000
Something like this and then we're doing 16 of them.

406
00:24:14,900 --> 00:24:19,600
So it just multiplies out, like, really quickly to very large numbers.

407
00:24:20,700 --> 00:24:23,700
When we're grabbing that many world chunks, you know what I mean?

408
00:24:26,200 --> 00:24:30,400
And I guess that does also mean, you know, I don't know how well we're

409
00:24:30,400 --> 00:24:35,700
going to hold up, trying to do to simulate five levels down of stuff,

410
00:24:36,000 --> 00:24:40,100
you know, maybe it makes more sense to just simulate one above and one

411
00:24:40,300 --> 00:24:42,100
Below us or something like this, right?

412
00:24:42,500 --> 00:24:47,300
I don't really know what shove those is, is more sensible, but also,

413
00:24:47,300 --> 00:24:50,700
you can even see, like, we're grabbing stuff, pretty far afield here.

414
00:24:51,700 --> 00:24:54,500
And so, maybe, you know, one thing that we need to do to is reconsider

415
00:24:54,500 --> 00:24:55,800
our simulation bounds.

416
00:24:56,000 --> 00:24:57,900
How these things are getting expanded, you know?

417
00:24:57,900 --> 00:25:02,400
Maybe we only do one room in every direction and we don't get anything

418
00:25:02,700 --> 00:25:05,400
sort of one further than that.

419
00:25:07,200 --> 00:25:08,500
It's probably a good idea.

420
00:25:10,900 --> 00:25:13,900
And the other thing too, is we probably want to align our chunk size

421
00:25:13,900 --> 00:25:19,800
in some way to the actual game size, which is probably easier said

422
00:25:19,800 --> 00:25:20,200
than done.

423
00:25:20,200 --> 00:25:23,900
Because if you take a look at how these things work out, you know

424
00:25:23,900 --> 00:25:28,200
123456789

425
00:25:32,800 --> 00:25:39,700
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17.

426
00:25:40,200 --> 00:25:48,800
So you know 17 is a really nasty number of things to have across and I

427
00:25:48,800 --> 00:25:53,100
guess we could have the world chunk just be the size of a room, you

428
00:25:53,100 --> 00:25:56,600
know, because hey, we know we're going to pull in whole rooms at a

429
00:25:56,600 --> 00:25:57,200
time.

430
00:25:57,600 --> 00:25:59,300
So maybe that makes sense.

431
00:26:01,300 --> 00:26:02,200
I don't really know.

432
00:26:02,800 --> 00:26:06,600
But it's one of those things where, you know, it's, you know, we could

433
00:26:06,600 --> 00:26:12,500
subdivide this into three up and down the nine but the 17 is, is not

434
00:26:12,500 --> 00:26:13,100
subdivided.

435
00:26:13,100 --> 00:26:16,000
Belen, any particularly clean way, right?

436
00:26:16,000 --> 00:26:18,400
I mean, you can't is now really not much.

437
00:26:18,400 --> 00:26:21,100
You can do about that, I could, however, just arbitrary, split

438
00:26:21,100 --> 00:26:22,200
something down the middle.

439
00:26:23,500 --> 00:26:26,800
But, you know, in terms of if I wanted it to sort of roughly lineup

440
00:26:26,800 --> 00:26:30,400
with Tiles at all, which you'd think would be a reasonable thing to

441
00:26:30,400 --> 00:26:30,800
do.

442
00:26:32,000 --> 00:26:32,400
It's

443
00:26:32,500 --> 00:26:38,600
not super plausible to do because the price, you know, 17 is like not

444
00:26:38,600 --> 00:26:39,800
divisible by anything, right?

445
00:26:41,200 --> 00:26:50,100
It's Prime so yeah, not great, not fantastic, but that's just, that's

446
00:26:50,100 --> 00:26:52,900
just the way, the cookie crumbles I guess, so.

447
00:26:56,800 --> 00:26:59,900
I guess what I'd say is, if we move on from there and just

448
00:27:00,000 --> 00:27:00,600
Say, well.

449
00:27:00,600 --> 00:27:03,300
Okay let's, let's try making the chunk size.

450
00:27:03,300 --> 00:27:07,600
Maybe be roughly the size of a room.

451
00:27:07,900 --> 00:27:10,100
Let's, let's see what happens if we do that.

452
00:27:11,000 --> 00:27:20,100
So let's go ahead and do chunk demand M and let's just see how big our

453
00:27:20,100 --> 00:27:25,400
tile size is at the moment, which I think we kind of know when we do

454
00:27:26,600 --> 00:27:29,600
our work here like adding

455
00:27:30,000 --> 00:27:30,900
I said, standard room.

456
00:27:34,200 --> 00:27:35,100
So, let's see.

457
00:27:35,100 --> 00:27:42,800
We've got, well, we've got our tile stuff where we convert tiles to

458
00:27:43,500 --> 00:27:44,400
positions.

459
00:27:52,100 --> 00:27:59,200
So tile side in meters, is currently set to 1.4 why we set it.

460
00:27:59,200 --> 00:28:03,400
To one point four is probably lost to the the history of time now.

461
00:28:03,700 --> 00:28:08,000
But about one and a half meters across is how big a tile is in our

462
00:28:08,000 --> 00:28:08,500
current world.

463
00:28:08,500 --> 00:28:11,900
Anyway, which is fine, right?

464
00:28:11,900 --> 00:28:13,400
That's, that's totally fine.

465
00:28:14,000 --> 00:28:17,100
But what that means is that if we did wanted to set it, we'd be

466
00:28:17,100 --> 00:28:20,500
talking about roughly, you know, something that looks like this.

467
00:28:27,700 --> 00:28:31,900
And then our world chunks would roughly align with the size of a room,

468
00:28:33,100 --> 00:28:34,500
and you can kind of see that here.

469
00:28:35,100 --> 00:28:37,100
And if I pull back a little bit as well,

470
00:28:47,300 --> 00:28:51,400
You can see that that guy kind of buckets, all the entities, just

471
00:28:51,400 --> 00:28:51,800
right?

472
00:28:53,200 --> 00:28:57,200
So that that would mean that if we if we wanted to we could now kind

473
00:28:57,200 --> 00:29:01,400
of try and make it so that the simulation boundary is sort of roughly

474
00:29:01,400 --> 00:29:02,400
exact.

475
00:29:02,600 --> 00:29:07,000
We could kind of make it so that when you do a Sim region, you just go

476
00:29:07,100 --> 00:29:13,600
one of those over and then we would have, you know, 9 / simulation

477
00:29:13,600 --> 00:29:16,600
we'd have nine times five floors or 45.

478
00:29:17,100 --> 00:29:20,800
Chunks to pull in, which is probably a more sane thing to do.

479
00:29:22,800 --> 00:29:25,000
I did leave this in, did I not?

480
00:29:28,600 --> 00:29:34,700
Yeah, so yeah, I mean now seems like a reasonable time to do that

481
00:29:34,700 --> 00:29:37,800
since we're looking at things from a from a room based perspective

482
00:29:38,200 --> 00:29:39,800
which is something I want to do before.

483
00:29:40,800 --> 00:29:45,600
So if we were going to do it that way and we were talking about how do

484
00:29:45,600 --> 00:29:47,600
we wanted to expand the same region?

485
00:29:48,900 --> 00:29:53,200
I think what I'd probably say here is this expansion stuff where we

486
00:29:53,200 --> 00:29:55,700
say like safety margins and this sort of thing.

487
00:29:55,900 --> 00:29:58,300
I think I'd probably say now's may be a good time to just, just

488
00:29:58,400 --> 00:29:59,500
Just ice that stuff.

489
00:30:00,000 --> 00:30:05,700
I say we just simulate a room, one rooms worth when we do updates

490
00:30:05,700 --> 00:30:06,700
over, right?

491
00:30:07,600 --> 00:30:10,800
And that's like maybe the responsibility of the calling code to say,

492
00:30:10,900 --> 00:30:14,800
you give us the region that you want simulated and we don't try to

493
00:30:14,800 --> 00:30:15,700
mess with it at all.

494
00:30:16,000 --> 00:30:20,300
So at that point, we'd say, hey yeah, the you know,

495
00:30:22,400 --> 00:30:26,200
The max entity radius thing is only used in here, right?

496
00:30:27,000 --> 00:30:28,600
And so maybe we just say like,

497
00:30:31,600 --> 00:30:32,800
Those things go away.

498
00:30:33,000 --> 00:30:35,200
We don't try to do any of this stuff.

499
00:30:35,200 --> 00:30:41,500
The safety margin stuff is just gone and when we do sort of the

500
00:30:41,900 --> 00:30:44,300
different kind of bounds, there's there's none of that we just pull

501
00:30:44,300 --> 00:30:48,300
the stuff in and we leave it aligned, right?

502
00:30:48,600 --> 00:30:54,400
So we say, Okay, updatable pounds are going to be the same as regular

503
00:30:54,400 --> 00:30:56,600
bounds as far as we're concerned.

504
00:30:57,300 --> 00:30:58,700
So, let's go ahead and say

505
00:31:00,700 --> 00:31:01,800
Some region bounds.

506
00:31:05,300 --> 00:31:09,600
And the same region bounds is just going to be whatever we were told.

507
00:31:12,600 --> 00:31:16,200
For now and we can always change it back if we want to.

508
00:31:16,200 --> 00:31:18,600
But that's basically all we're going to do, right?

509
00:31:20,900 --> 00:31:25,500
Okay, so now if we do that, what we should see at first because now,

510
00:31:25,500 --> 00:31:27,500
no one is passing in anything different here.

511
00:31:27,900 --> 00:31:33,200
What we should see is just that the the game is only actually pulling

512
00:31:33,200 --> 00:31:36,300
in stuff that's in the actual sin bound, right?

513
00:31:36,800 --> 00:31:40,400
So it's only actually pulling in stuff that's inside.

514
00:31:41,800 --> 00:31:42,500
That region.

515
00:31:44,800 --> 00:31:46,000
And you can see that happening here.

516
00:31:47,000 --> 00:31:51,600
Now, what we don't really want to do however, is we don't, I think

517
00:31:51,600 --> 00:31:52,200
alike.

518
00:31:53,600 --> 00:31:55,100
Well, let me see if this is true.

519
00:32:01,300 --> 00:32:05,100
As I say is I feel like we don't really want our Sim region to split

520
00:32:05,700 --> 00:32:09,500
things into into like halves, like it was doing there.

521
00:32:09,700 --> 00:32:12,400
So when we pass in the Sim bounds, we're going to want to pass in a

522
00:32:12,400 --> 00:32:16,100
symbol and that's room aligned I think, but it seems to work.

523
00:32:16,100 --> 00:32:19,000
Okay, even if we don't, which is, I guess a nice thing but I don't

524
00:32:19,000 --> 00:32:20,200
think we want to be doing that.

525
00:32:21,200 --> 00:32:23,900
And this will cut down the number of Road chunks that need to get

526
00:32:23,900 --> 00:32:26,000
pulled in quite dramatically as well.

527
00:32:26,000 --> 00:32:26,800
Which is nice.

528
00:32:27,700 --> 00:32:29,000
So that's also good.

529
00:32:29,800 --> 00:32:31,000
Let's go ahead and take a look.

530
00:32:42,400 --> 00:32:45,800
So here we are taking a look at the Sim bound stuff, and you can see

531
00:32:45,800 --> 00:32:49,900
that that just is, you know, something that we pass pass in, you can

532
00:32:49,900 --> 00:32:52,400
see where we do some bounds expansion here and that's your stuff.

533
00:32:52,400 --> 00:32:53,700
We don't want any of this stuff.

534
00:32:54,000 --> 00:32:58,000
So what we want to do is say like, Hey, we're going to go ahead and do

535
00:32:59,700 --> 00:32:59,800
it.

536
00:33:00,000 --> 00:33:03,700
You can go ahead and do like one rooms worth and maybe that's a value

537
00:33:03,700 --> 00:33:06,600
that we want to save from before where we sort of have a notion of

538
00:33:06,600 --> 00:33:08,900
what the that region is.

539
00:33:10,000 --> 00:33:13,200
So what I want to do is say, okay, if we

540
00:33:16,000 --> 00:33:19,500
If we take the camera Bound in meters and say let's let's stop using

541
00:33:19,500 --> 00:33:20,000
that.

542
00:33:20,100 --> 00:33:22,900
I don't actually know if we want to keep that around for something we

543
00:33:22,900 --> 00:33:25,700
might so I'm not going to delete it at the moment.

544
00:33:26,600 --> 00:33:29,600
But let's say that the camera Bound in M stuff is not really what we

545
00:33:29,600 --> 00:33:30,700
want instead.

546
00:33:30,700 --> 00:33:35,400
What we want to do is take you know, a room based approach and say we

547
00:33:35,400 --> 00:33:39,700
want to do three rooms by three rooms, centered around the player,

548
00:33:39,700 --> 00:33:41,000
that's what we actually want to do.

549
00:33:41,800 --> 00:33:45,600
So we can say like our sin bound is going to start at

550
00:33:45,800 --> 00:33:52,900
Wherever the camera is centered and then we're going to expand outward

551
00:33:52,900 --> 00:33:53,400
from there.

552
00:33:54,100 --> 00:34:00,900
So I kind of want something that's going to be like a rectangle Center

553
00:34:00,900 --> 00:34:01,400
Dim.

554
00:34:03,500 --> 00:34:08,900
And I want to do like the cameras position, and then I want to do, you

555
00:34:08,900 --> 00:34:15,699
know, three times screen or sorry room dimension.

556
00:34:23,500 --> 00:34:26,699
And that's really all I wanted to pass down for the same bounds and

557
00:34:26,699 --> 00:34:30,300
then for the Sim bounds here where we're trying to playing with the

558
00:34:30,300 --> 00:34:34,500
other SIM bounds, this would be fine as well for it to use that size

559
00:34:34,500 --> 00:34:35,800
and just offset it.

560
00:34:36,000 --> 00:34:36,500
Right?

561
00:34:37,500 --> 00:34:41,100
So you know, here's that offset where it just kind of moves it around

562
00:34:41,500 --> 00:34:44,400
for our, you know, Amusement.

563
00:34:45,199 --> 00:34:48,400
So that seems good to me and then I just need a way of figuring out

564
00:34:48,400 --> 00:34:50,500
like where that camera actually is.

565
00:34:51,199 --> 00:34:52,300
I think that

566
00:34:52,900 --> 00:34:56,300
See camera rectangle at Target.

567
00:34:56,300 --> 00:34:58,500
So really just the center point.

568
00:35:02,000 --> 00:35:03,100
Of that camera p.m.

569
00:35:03,700 --> 00:35:04,700
out of that screen.

570
00:35:04,700 --> 00:35:07,500
Bounds is the center point that I want.

571
00:35:14,700 --> 00:35:17,000
Rex engine overly function takes one arguments.

572
00:35:20,300 --> 00:35:23,400
well, to be honest, I didn't think I was passing

573
00:35:25,800 --> 00:35:30,000
One arguments, I thought I was passing to this one and this one.

574
00:35:36,900 --> 00:35:37,700
Am I Wrong?

575
00:35:39,000 --> 00:35:41,400
Oh, it's just because it doesn't pick up this one up.

576
00:35:41,400 --> 00:35:41,900
That's fine.

577
00:35:42,400 --> 00:35:46,100
So as soon as I fix that when it should be fine, so if I go to

578
00:35:46,100 --> 00:35:47,400
standard room dimension,

579
00:35:51,400 --> 00:35:53,100
We already kind of know what that is, right?

580
00:35:53,100 --> 00:35:54,500
Because I sort of did it up here.

581
00:35:55,000 --> 00:35:57,200
It's the world chunk demand M thing.

582
00:35:57,900 --> 00:35:59,800
So what I can do for now she say, okay we've got

583
00:36:00,000 --> 00:36:01,700
Notes and rim dimension.

584
00:36:05,000 --> 00:36:07,300
And that's, you know what it is.

585
00:36:16,900 --> 00:36:18,800
And we're going to want to play around with this a little bit more in

586
00:36:18,800 --> 00:36:20,800
a minute here, but we should be okay.

587
00:36:21,600 --> 00:36:22,500
So, let's see.

588
00:36:23,200 --> 00:36:26,900
This is a V2 which I suppose is, okay.

589
00:36:26,900 --> 00:36:33,600
We just need to sort of expand it out a little bit more and let's take

590
00:36:33,600 --> 00:36:34,800
a look at how that's working.

591
00:36:42,200 --> 00:36:43,700
That's looking pretty good.

592
00:36:45,600 --> 00:36:47,400
Let's go ahead and zoom down there a little bit.

593
00:36:53,100 --> 00:36:53,500
Yeah.

594
00:36:56,000 --> 00:36:58,900
So that's looking pretty good but you can see where accidentally

595
00:36:58,900 --> 00:37:02,800
pulling in an extra some extra chunks here, that I don't want to pull

596
00:37:02,800 --> 00:37:02,900
it.

597
00:37:02,900 --> 00:37:05,800
And that's probably because we're like sort of a little bit off by one

598
00:37:05,800 --> 00:37:08,400
in terms of what our bounds are.

599
00:37:08,400 --> 00:37:13,100
So we probably need to off by one's the wrong term, but I mean you

600
00:37:13,100 --> 00:37:16,700
know, the floating Point accuracy of like pulling in these chunks.

601
00:37:16,700 --> 00:37:17,900
It's probably not quite right.

602
00:37:17,900 --> 00:37:22,700
So I kind of want to go in and monkey with that a little bit.

603
00:37:22,700 --> 00:37:25,900
But for the most part now we're kind of getting down

604
00:37:26,100 --> 00:37:30,500
To what I think is a little bit more reasonable for what we want to be

605
00:37:31,100 --> 00:37:31,800
doing here.

606
00:37:32,700 --> 00:37:37,100
All right, so yeah, now that we're looking at this, we're down to 3400

607
00:37:37,100 --> 00:37:37,500
calls.

608
00:37:37,500 --> 00:37:42,600
That's 10% less than 10% of how many we used to be doing and that's

609
00:37:42,600 --> 00:37:46,800
good that just is, you know, a little bit more of a kind of a

610
00:37:46,800 --> 00:37:49,600
reasonable thing to be doing there and that also means that our debug

611
00:37:49,600 --> 00:37:52,500
collation is kept under control, I don't know what we'd look like in

612
00:37:52,500 --> 00:37:55,800
debug mode at this point, but at least this is, you know,

613
00:37:56,000 --> 00:37:56,800
Little more sane.

614
00:38:01,300 --> 00:38:06,700
Yeah, so still not great in terms of what's going on here, but a lot

615
00:38:06,700 --> 00:38:09,500
of it now is just packed into these functions which is, which is good,

616
00:38:09,500 --> 00:38:11,200
which is what we want, right?

617
00:38:12,700 --> 00:38:15,600
And so inside, do World Sim,

618
00:38:19,600 --> 00:38:22,600
I feel like what's interesting about that is if you take a look at do

619
00:38:22,600 --> 00:38:23,300
World Sim,

620
00:38:26,000 --> 00:38:31,700
I don't think I know, like, right off the bat why that particular

621
00:38:31,700 --> 00:38:33,500
function would be taking so much time.

622
00:38:34,400 --> 00:38:39,300
And so I also do wonder if a lot of that is stall time and that's

623
00:38:39,300 --> 00:38:44,800
something that probably we would want to take a closer look at Wright.

624
00:38:45,300 --> 00:38:49,200
And, you know, this is not a particularly good way to do it, but just

625
00:38:49,200 --> 00:38:55,600
to give you an example, suppose I go down here into the world mode.

626
00:38:55,700 --> 00:38:56,000
Code.

627
00:38:56,000 --> 00:38:59,600
That's, it's doing that world Sam and

628
00:39:00,000 --> 00:39:01,100
That we have to do.

629
00:39:01,400 --> 00:39:06,100
We have to look a little harder at how we're doing these locks because

630
00:39:06,100 --> 00:39:09,000
this was just a quick thing to sort of get ourselves working.

631
00:39:11,100 --> 00:39:17,300
When we do this ticket, mutex what we can do, if we want to is inside

632
00:39:17,300 --> 00:39:17,700
the ticket.

633
00:39:17,700 --> 00:39:20,400
Mutex, if we find that we

634
00:39:22,700 --> 00:39:27,200
if we find that we can't get the mutex when we want it, we can

635
00:39:27,200 --> 00:39:30,800
actually put something in here that's like you know,

636
00:39:32,900 --> 00:39:37,400
Every time you can't take the mutex, let us know, right?

637
00:39:38,200 --> 00:39:45,500
And that's going to have to be, I guess kind of down below the debug

638
00:39:45,600 --> 00:39:47,400
you eye but otherwise it's fine.

639
00:39:48,500 --> 00:39:52,300
And so if we run it now probably what, at least what I'm assuming

640
00:39:52,300 --> 00:39:54,700
we'll see is that everyone is super stalled out.

641
00:39:54,700 --> 00:39:59,300
Like you can kind of see people are just hitting that mutex all the

642
00:39:59,300 --> 00:40:07,600
time and they're trying to take like they're trying to get the mutex

643
00:40:07,600 --> 00:40:10,000
and they can't another way to look at.

644
00:40:10,000 --> 00:40:12,900
It would probably be too instead of looking at the number of times you

645
00:40:12,900 --> 00:40:15,400
go through that Loop will just be how much time do you spend in here?

646
00:40:15,400 --> 00:40:17,000
Because it should be almost no time.

647
00:40:17,300 --> 00:40:18,200
If you were getting the

648
00:40:18,300 --> 00:40:21,400
Next when you needed the mutex, but if you can't, then you're sitting

649
00:40:21,400 --> 00:40:22,500
in there a lot, right?

650
00:40:24,000 --> 00:40:27,300
And so then if we take a look at the threads and we pause one of those

651
00:40:27,300 --> 00:40:31,600
threads, then what we can see here is like, look at that yellow bar,

652
00:40:32,500 --> 00:40:38,800
that yellow bar is how long threads are waiting in line to actually do

653
00:40:38,800 --> 00:40:39,400
their work.

654
00:40:39,600 --> 00:40:44,500
So all of that time, right there, just sitting there going like, hey

655
00:40:44,500 --> 00:40:47,700
man, I need access to the world and they can't get it.

656
00:40:48,300 --> 00:40:48,700
Right.

657
00:40:51,000 --> 00:40:51,500
So

658
00:40:55,900 --> 00:40:58,800
I feel like that's a really good illustration.

659
00:40:58,800 --> 00:41:02,800
Just graphically speaking of why why mutexes are problematic, right?

660
00:41:02,800 --> 00:41:03,900
Why you have to think through these.

661
00:41:03,900 --> 00:41:07,700
Because you know, I said this when we typed in the code but I realized

662
00:41:07,700 --> 00:41:10,200
that when I say something like that, it's kind of a little abstract

663
00:41:10,200 --> 00:41:12,400
sometimes because it's like, well, you know, okay, he said that.

664
00:41:12,400 --> 00:41:13,500
But what does he mean?

665
00:41:14,600 --> 00:41:17,800
And what you can see here is like we've got 6 threads available to do

666
00:41:17,800 --> 00:41:18,400
this work.

667
00:41:18,400 --> 00:41:19,000
On this machine.

668
00:41:19,000 --> 00:41:21,100
This machine has a lot of cores, right?

669
00:41:22,300 --> 00:41:24,700
In fact, we could use even more if you weren't running obs,

670
00:41:25,500 --> 00:41:28,100
And if you look at that, that means that like okay there's a lot of

671
00:41:28,100 --> 00:41:28,800
course here.

672
00:41:29,400 --> 00:41:34,200
And what we've done is we've essentially, you know, we've drastically

673
00:41:34,200 --> 00:41:38,300
reduced the degree to which these chorus can be effective because they

674
00:41:38,300 --> 00:41:42,500
all have to wait in line for this one data structure that we chose to

675
00:41:42,500 --> 00:41:43,900
just lock out, right?

676
00:41:45,900 --> 00:41:46,900
so, the question is,

677
00:41:49,900 --> 00:41:56,500
What can we do to try and you know, alleviate this burden?

678
00:41:57,500 --> 00:41:59,800
How could we make it so that these threads aren't all set?

679
00:42:00,000 --> 00:42:04,200
Around waiting, for their turn.

680
00:42:04,700 --> 00:42:07,500
Because if everyone has to wait for their turn, we might as well, not

681
00:42:07,500 --> 00:42:10,300
have it multi-threaded at all, that makes sense.

682
00:42:11,700 --> 00:42:13,400
So, let's take a look at what we could do here.

683
00:42:14,000 --> 00:42:18,300
So if we go into some region and we take a look at the code here, is

684
00:42:18,300 --> 00:42:19,500
begin World change.

685
00:42:20,000 --> 00:42:23,400
We know that this memory arena is specific to the same region.

686
00:42:24,000 --> 00:42:25,900
So we really don't have to worry about all of.

687
00:42:25,900 --> 00:42:27,400
This stuff is totally multi-threaded.

688
00:42:27,400 --> 00:42:29,800
Also none of this stuff actually needs to be behind a lock.

689
00:42:30,000 --> 00:42:34,100
Then when we're walking through here and we're doing this sort of pull

690
00:42:34,100 --> 00:42:41,000
out operation, this is the only operation that actually needs to be

691
00:42:41,000 --> 00:42:41,500
locked in here.

692
00:42:41,500 --> 00:42:44,700
All the rest of the stuff does not need to be locked, right?

693
00:42:44,700 --> 00:42:46,700
You can kind of see all of this stuff through here is fine.

694
00:42:46,700 --> 00:42:52,100
It's just these, you know, this ad block to free list and add chunk to

695
00:42:52,100 --> 00:42:52,600
free list.

696
00:42:52,600 --> 00:42:56,600
Stuff is is the only stuff that we need to be.

697
00:42:56,600 --> 00:43:00,000
So what we could start by doing is saying well, let's

698
00:43:00,000 --> 00:43:03,500
Let's let begin sim off the hook temporarily.

699
00:43:03,800 --> 00:43:08,700
So let's go ahead and say we wanted to do begin Sim this way.

700
00:43:09,900 --> 00:43:14,600
So we're going to ticket, mutex remove Road chunk, right?

701
00:43:15,700 --> 00:43:17,400
And then we're going to say, alright?

702
00:43:17,400 --> 00:43:18,500
We kind of come down through here.

703
00:43:18,500 --> 00:43:22,200
You can see we do this thing where we do Adblock to free list and then

704
00:43:22,200 --> 00:43:23,300
add chunk to free list.

705
00:43:23,300 --> 00:43:28,800
Right now, what we like to do is we'd like to just have one

706
00:43:28,800 --> 00:43:34,400
corresponding, one of these ticket mutex takers at the end, right like

707
00:43:34,400 --> 00:43:38,500
so, but you look here and then we've got this Adblock to free list

708
00:43:38,500 --> 00:43:38,700
thing.

709
00:43:38,700 --> 00:43:39,600
This thing also,

710
00:43:39,800 --> 00:43:42,800
To view text, but the question is.

711
00:43:43,200 --> 00:43:44,400
Well, wait a minute.

712
00:43:45,300 --> 00:43:48,500
Why are we adding things back to the free list one at a time?

713
00:43:49,300 --> 00:43:52,100
Yes, that may have made sense back when we had single threaded code,

714
00:43:52,100 --> 00:43:52,900
it didn't matter.

715
00:43:53,200 --> 00:43:57,000
But now that we're multi-threaded, we've got this list.

716
00:43:57,300 --> 00:44:00,600
We know the beginning, in the end of it, we only need to like change

717
00:44:00,600 --> 00:44:04,200
the one pointer at the head and one point at the end, to insert the

718
00:44:04,200 --> 00:44:05,900
whole set, right?

719
00:44:06,900 --> 00:44:09,600
So why not figure out how to

720
00:44:09,700 --> 00:44:13,100
add this back in on Moss, right?

721
00:44:13,100 --> 00:44:17,900
So for example, we say while block here right.

722
00:44:18,000 --> 00:44:20,600
What if we said this was first block?

723
00:44:21,200 --> 00:44:25,000
And then said, okay, World entity block block equals first block

724
00:44:26,100 --> 00:44:27,600
Process, all the blocks.

725
00:44:28,700 --> 00:44:29,400
As we did.

726
00:44:31,200 --> 00:44:31,900
and then,

727
00:44:35,100 --> 00:44:39,100
Here, when we say adjunct to free list, right?

728
00:44:39,900 --> 00:44:44,600
Maybe we can have an additional thing here which is like hey, oops.

729
00:44:46,900 --> 00:44:48,100
Take the blocks to.

730
00:44:48,500 --> 00:44:51,600
And we could just call this add to free list and you pass both now

731
00:44:51,600 --> 00:44:53,800
again, why are we merging these two things?

732
00:44:53,800 --> 00:44:55,100
They're two separate operations.

733
00:44:55,100 --> 00:44:56,500
Add some, you know, two different things.

734
00:44:56,500 --> 00:44:57,200
We're adding the free list.

735
00:44:57,200 --> 00:44:59,900
Well, the reason is because we just want to

736
00:45:00,400 --> 00:45:04,300
Reduce the degree to which we're interacting with the system because

737
00:45:04,300 --> 00:45:07,600
we know that it's mutex, it's a shared system and we want to just have

738
00:45:07,600 --> 00:45:08,000
one call.

739
00:45:08,000 --> 00:45:09,400
We're we're like, okay.

740
00:45:09,400 --> 00:45:10,100
Here's the thing.

741
00:45:10,100 --> 00:45:12,700
We need to do, do all the stuff you want to do and do it as fast as

742
00:45:12,700 --> 00:45:13,200
you can.

743
00:45:13,300 --> 00:45:14,600
So we can get out of this mutex.

744
00:45:14,600 --> 00:45:16,300
We're not going to like dilly dally, right?

745
00:45:19,700 --> 00:45:22,800
Furthermore, we can help this guy out because we're walking this list,

746
00:45:23,100 --> 00:45:23,700
right?

747
00:45:24,300 --> 00:45:29,900
So we also know that we have a last block in addition, right?

748
00:45:29,900 --> 00:45:33,900
So every time we come through here, we could say, alright, whenever we

749
00:45:33,900 --> 00:45:37,800
process a block that block is the last block.

750
00:45:38,300 --> 00:45:42,200
So, now, when we come through here, we can say, hey, add this chunk to

751
00:45:42,200 --> 00:45:48,400
the, to the list, and also add, you know, this chain where

752
00:45:48,600 --> 00:45:50,100
Telling you both sides of the chain.

753
00:45:50,300 --> 00:45:54,300
So now you have the option of doing a much faster insert because you

754
00:45:54,300 --> 00:45:56,700
don't have to walk the list again, right?

755
00:45:56,800 --> 00:46:00,200
We already walked the list and we know where it is and better yet, we

756
00:46:00,200 --> 00:46:02,000
walked it outside the mutex.

757
00:46:03,300 --> 00:46:03,800
Right.

758
00:46:06,800 --> 00:46:12,400
So, that's, you know, step a write a, pretty simple step that we can

759
00:46:12,400 --> 00:46:16,000
take to make begin Sim, not be so onerous.

760
00:46:17,900 --> 00:46:19,200
All right, so let's say we do this.

761
00:46:19,700 --> 00:46:20,500
What do we need to do?

762
00:46:20,500 --> 00:46:25,500
Well, the only thing we need to do is to go into our world code and do

763
00:46:25,500 --> 00:46:30,500
add to free list, just has to be sort of expanded because now it's

764
00:46:30,500 --> 00:46:32,000
taking two things, right?

765
00:46:32,100 --> 00:46:34,900
It's taking a world chunk and it's doing that operation with it.

766
00:46:34,900 --> 00:46:36,300
But then it's also taking

767
00:46:37,900 --> 00:46:39,100
Like a first block.

768
00:46:40,900 --> 00:46:41,700
Last block.

769
00:46:46,500 --> 00:46:49,500
And previously, when we were doing ad block to free list, we did this

770
00:46:49,500 --> 00:46:51,800
sort of old next equals world first free block.

771
00:46:52,000 --> 00:46:55,000
And so what we want to do there is say, well let's put that on the

772
00:46:55,000 --> 00:46:57,100
last block, right?

773
00:46:57,400 --> 00:47:00,800
That we want to say the last block next equals the world forestry

774
00:47:00,800 --> 00:47:01,900
block, right?

775
00:47:02,000 --> 00:47:04,400
And we can also say, well let's make sure we actually have a list

776
00:47:04,400 --> 00:47:04,700
here.

777
00:47:10,400 --> 00:47:13,400
So whatever the last block of list is that'll point to our previous

778
00:47:13,400 --> 00:47:16,500
first free and our first Free Will Pro point to the first block.

779
00:47:16,500 --> 00:47:19,300
So that way, instead of doing it piecemeal, we're just inserting the

780
00:47:19,300 --> 00:47:22,100
whole list in one go.

781
00:47:25,400 --> 00:47:26,600
Hopefully, that makes some sense.

782
00:47:34,700 --> 00:47:36,500
Okay, so

783
00:47:41,100 --> 00:47:43,400
why is this?

784
00:47:45,500 --> 00:47:48,800
Fact, we could pretty much just write this this way, now, right?

785
00:47:50,100 --> 00:47:51,900
We could just write this as a, for I Loop.

786
00:47:52,800 --> 00:47:53,600
Where we go.

787
00:47:58,600 --> 00:47:59,200
Like that.

788
00:48:05,800 --> 00:48:08,200
So I think that's really all we need to do.

789
00:48:09,000 --> 00:48:14,500
Add 23 list has to be renamed, but that's about it and now let's see

790
00:48:14,500 --> 00:48:17,200
if that gets us into any better shape.

791
00:48:17,200 --> 00:48:20,700
So let's take a look at the profile now and let's take a look at our

792
00:48:20,700 --> 00:48:25,200
threads and we pause and hey, look at how much better this is already,

793
00:48:25,500 --> 00:48:26,200
right?

794
00:48:28,000 --> 00:48:29,200
It's definitely a lot better.

795
00:48:30,300 --> 00:48:33,000
We're not seeing oops.

796
00:48:36,000 --> 00:48:39,400
We're not seeing nearly as much of those sort of long bars in there,

797
00:48:39,400 --> 00:48:39,600
right?

798
00:48:39,600 --> 00:48:40,700
But we still have

799
00:48:43,400 --> 00:48:45,400
it looks like a little bit of that happening.

800
00:48:47,400 --> 00:48:48,400
Let's take a look here.

801
00:48:57,900 --> 00:49:00,300
So you can see us taking these ticket mutexes.

802
00:49:00,700 --> 00:49:04,000
Most of them are fine, but you can see like a few of them, get a

803
00:49:04,000 --> 00:49:09,000
little bit long in the tooth, right, where the ticket mutex is being

804
00:49:09,600 --> 00:49:11,900
is being a little bit gravier, right?

805
00:49:15,600 --> 00:49:16,200
That makes sense.

806
00:49:17,600 --> 00:49:20,700
And so one of the interesting things about that is that look well, it

807
00:49:20,700 --> 00:49:22,200
looks like up at the head end.

808
00:49:22,200 --> 00:49:23,500
We spend almost no time on it.

809
00:49:23,500 --> 00:49:25,400
And then sort of towards the end we spend more time.

810
00:49:26,100 --> 00:49:31,100
Chances are, if we look at this, we will see that pause

811
00:49:34,700 --> 00:49:37,900
Inside do world's, then we have a second time where we end up taking

812
00:49:38,100 --> 00:49:44,700
this mutex and that time is is in the end World change, right?

813
00:49:44,700 --> 00:49:48,800
When we go to do the end World chain stuff, we take the mutex around

814
00:49:48,800 --> 00:49:49,700
that entire thing.

815
00:49:50,500 --> 00:49:51,700
So we've done a good job.

816
00:49:51,700 --> 00:49:53,300
Reducing These Bars quite a bit.

817
00:49:53,700 --> 00:49:55,900
But then we've kind of got this sort of weird pattern here to be

818
00:49:55,900 --> 00:49:56,300
honest with you.

819
00:49:56,300 --> 00:49:59,600
That's a little bit suspicious I guess the problem is here we drained

820
00:49:59,600 --> 00:50:00,200
out.

821
00:50:02,200 --> 00:50:05,700
And so these are people who probably had actual stuff to process and

822
00:50:05,700 --> 00:50:09,500
these are probably people who didn't and so now we're able to get

823
00:50:09,500 --> 00:50:13,900
those times down to almost nothing so the people who don't really have

824
00:50:13,900 --> 00:50:17,100
much in the way of entities process were reducing their times, so

825
00:50:17,100 --> 00:50:17,600
that's good.

826
00:50:17,600 --> 00:50:20,900
But let's keep pushing on that a little bit more, just so we can get

827
00:50:20,900 --> 00:50:24,700
down to something before we start analyzing it in more detail.

828
00:50:27,600 --> 00:50:27,900
Right.

829
00:50:27,900 --> 00:50:31,200
So we've got these, these mutexes here around remove World chunk.

830
00:50:31,400 --> 00:50:34,000
And so, I think the most logical thing to do here is to start saying,

831
00:50:34,000 --> 00:50:39,200
well, okay, probably what we want to do is push that mutex inside.

832
00:50:39,500 --> 00:50:43,800
So the person who is calling doesn't really necessarily have to think

833
00:50:43,800 --> 00:50:44,900
about that very much.

834
00:50:45,000 --> 00:50:45,800
So we just do.

835
00:50:45,800 --> 00:50:47,300
We do the ticket inside?

836
00:50:50,300 --> 00:50:52,400
Inside the call itself, right?

837
00:50:53,100 --> 00:50:56,200
And then in here, when we're going through it, then same thing for add

838
00:50:56,200 --> 00:50:59,200
back to the free list, which is the other thing that we do.

839
00:51:03,200 --> 00:51:04,300
You make sure that happens here.

840
00:51:06,300 --> 00:51:06,700
Right.

841
00:51:08,000 --> 00:51:09,000
So that's all well and good.

842
00:51:09,000 --> 00:51:11,900
But let's take a look at end World change, which is definitely a

843
00:51:11,900 --> 00:51:13,500
little bit wonky here.

844
00:51:14,400 --> 00:51:17,800
So inside and World change, this is something where we took the mutex

845
00:51:17,800 --> 00:51:19,100
again the entire time.

846
00:51:19,400 --> 00:51:22,600
So if we come back out to World mode,

847
00:51:25,500 --> 00:51:26,500
And we take a look at here.

848
00:51:26,500 --> 00:51:27,300
What's going on?

849
00:51:27,400 --> 00:51:32,300
These mutex is again are things that, you know, we kind of want to.

850
00:51:33,400 --> 00:51:34,800
Let's see and Sam right?

851
00:51:34,800 --> 00:51:36,300
All it's doing is this and real change.

852
00:51:36,300 --> 00:51:38,300
We know this isn't relevant at all.

853
00:51:38,600 --> 00:51:39,800
So it's just this end World change.

854
00:51:39,800 --> 00:51:40,900
It needs to be mute text.

855
00:51:41,100 --> 00:51:44,200
So if we move those in here, and then start to look at what actually

856
00:51:44,200 --> 00:51:48,800
hacks would have to get mu text, if we were a little bit more diligent

857
00:51:48,800 --> 00:51:50,600
about it, let's find out, right?

858
00:51:51,600 --> 00:51:52,100
So,

859
00:51:55,100 --> 00:51:57,900
Looking in here, you can see we've got some stuff like map into

860
00:51:57,900 --> 00:51:58,200
chunks.

861
00:51:58,200 --> 00:52:00,500
Space junk P, it's so on.

862
00:52:00,500 --> 00:52:04,000
Right, chunk Delta, updating the camera entity, all this stuff blah

863
00:52:04,000 --> 00:52:05,300
blah, blah blah, right?

864
00:52:06,100 --> 00:52:09,600
You can see that really the only part of it that actually, we care

865
00:52:09,600 --> 00:52:13,200
about is use trunk space, use trunk space is the only thing that would

866
00:52:13,200 --> 00:52:17,200
actually have to get new text here right now.

867
00:52:17,400 --> 00:52:22,100
The problem with this, is that when we call use chunk space, we're

868
00:52:22,100 --> 00:52:24,200
calling this for every entity, right?

869
00:52:24,900 --> 00:52:28,600
So we could just mutex the one thing we need which is used chunks face

870
00:52:28,600 --> 00:52:34,100
but we do kind of run a real risk here and the risk that we run is

871
00:52:34,100 --> 00:52:36,600
that that's just too many takings of the mutex.

872
00:52:36,900 --> 00:52:41,400
Like we're starting to just have way too much beating on that one,

873
00:52:41,400 --> 00:52:42,500
mutex for this purpose.

874
00:52:47,000 --> 00:52:48,900
And especially if multiple people are trying to execute these in

875
00:52:48,900 --> 00:52:51,100
parallel, it's just going to bounce that cache line all around.

876
00:52:51,100 --> 00:52:53,000
Then it's going to be a disaster, right?

877
00:52:54,400 --> 00:52:57,400
So, let's take a look at what use chunk space does.

878
00:53:04,800 --> 00:53:05,200
Curtis.

879
00:53:07,400 --> 00:53:11,600
So you can see here that we do get World chunk and get World chunk, is

880
00:53:11,600 --> 00:53:17,300
definitely a function that we know is going to be touching things

881
00:53:17,300 --> 00:53:17,900
potentially.

882
00:53:17,900 --> 00:53:20,700
If there isn't a chunk in that place already, right, because it's

883
00:53:20,700 --> 00:53:25,300
going to have to do this sort of operation where we pull stuff off the

884
00:53:25,300 --> 00:53:28,100
free list and that's obviously something that has to be synchronized

885
00:53:28,600 --> 00:53:30,100
and then use trunk space.

886
00:53:32,500 --> 00:53:33,600
Is similar right?

887
00:53:33,800 --> 00:53:38,700
Use chunks face is going to have to pull blocks of energy storage off

888
00:53:38,700 --> 00:53:39,500
as it goes.

889
00:53:41,600 --> 00:53:47,100
So if we look at what's happening here, you can kind of see why this

890
00:53:47,100 --> 00:53:52,000
is a much more problematic thing from a mutex standpoint.

891
00:53:52,000 --> 00:53:57,400
Because it definitely means that we you know from the looks of it at

892
00:53:57,400 --> 00:53:59,700
the start based on what we've done so far.

893
00:54:00,000 --> 00:54:03,700
Um, it does seem like okay, you know, we're going to have to mutex

894
00:54:03,700 --> 00:54:06,300
that thing and that's just going to get called so many times.

895
00:54:06,600 --> 00:54:08,800
It's going to be bad news, right?

896
00:54:09,600 --> 00:54:10,900
That's just going to be bad news.

897
00:54:13,200 --> 00:54:17,600
So, don't panic yet, because actually, we can do quite a bit of stuff

898
00:54:17,700 --> 00:54:20,900
to mitigate this, but I just want to kind of show you like, okay.

899
00:54:20,900 --> 00:54:25,500
We've pushed it down to the lowest place that we probably can and, and

900
00:54:25,500 --> 00:54:27,900
now we can run just fine in, that's good.

901
00:54:28,100 --> 00:54:31,300
But we're still, I think going to see some problems, they're

902
00:54:31,700 --> 00:54:33,500
withholding these mutexes, right?

903
00:54:33,800 --> 00:54:37,500
And again, you can kind of see this this sort of that same sort of

904
00:54:37,500 --> 00:54:38,000
pattern.

905
00:54:38,300 --> 00:54:40,700
Now, we don't really know that these mutex is, are causing as much of

906
00:54:40,700 --> 00:54:42,000
a problem at this point.

907
00:54:42,600 --> 00:54:46,400
One of the problems is our thread view while really good at the over

908
00:54:46,400 --> 00:54:52,400
level is not so good at showing us exactly how these things are

909
00:54:52,400 --> 00:54:52,900
happening here.

910
00:54:52,900 --> 00:54:55,000
So do World Sim begin World.

911
00:54:55,000 --> 00:54:57,000
Change is happening here.

912
00:54:57,000 --> 00:55:02,500
It happens a couple times that through here, and we can't see how much

913
00:55:02,500 --> 00:55:06,600
time we're spending waiting on the mutex until we click down, right?

914
00:55:07,000 --> 00:55:11,300
And when we click down a level, then we can actually at least see how

915
00:55:11,300 --> 00:55:12,300
long we're spending on.

916
00:55:12,400 --> 00:55:16,100
Begin ticket mutex and we can see that sometimes we're spending a fair

917
00:55:16,100 --> 00:55:16,600
bit of time.

918
00:55:16,600 --> 00:55:20,800
I begin to give me a text, but a lot of it is not really all that

919
00:55:20,900 --> 00:55:21,700
problematic.

920
00:55:21,800 --> 00:55:22,300
Right?

921
00:55:24,000 --> 00:55:25,800
Let's take a look at end World, change.

922
00:55:26,800 --> 00:55:27,800
Here's any real change.

923
00:55:29,900 --> 00:55:35,300
I would imagine that what we're seeing here is just like tons of tons

924
00:55:35,300 --> 00:55:36,900
and tons of ticket taking, right?

925
00:55:36,900 --> 00:55:39,800
Like basically every single one of these is a tiny little rectangle

926
00:55:40,100 --> 00:55:41,700
where we're taking a mutex.

927
00:55:42,500 --> 00:55:46,500
And we probably can see that just by going over to clocks, you can

928
00:55:46,500 --> 00:55:47,900
see, like begin ticket.

929
00:55:47,900 --> 00:55:53,200
Mutex is just, you know, we're doing this a ton of times and, you

930
00:55:53,200 --> 00:55:55,800
know, we're not spending that much time in it, so I guess it's not

931
00:55:55,800 --> 00:55:56,600
that big of a deal.

932
00:55:56,600 --> 00:56:01,100
But, you know, you can kind of see the results thereof.

933
00:56:02,000 --> 00:56:03,600
Now, if we take a look at what's Happening Here.

934
00:56:03,600 --> 00:56:07,400
Yeah, and World change, right is taking six percent of that time.

935
00:56:08,400 --> 00:56:10,800
Begin World change, taking 17 percent.

936
00:56:10,800 --> 00:56:12,300
So I don't actually know why.

937
00:56:12,400 --> 00:56:13,000
Why begin World?

938
00:56:13,000 --> 00:56:15,200
Change is quite so expensive.

939
00:56:16,500 --> 00:56:20,100
That's kind of a little bit of a mystery if we take a look inside

940
00:56:20,100 --> 00:56:20,900
their match with problems.

941
00:56:20,900 --> 00:56:25,600
But so this ticket, this begin to compute X and M to commute X here.

942
00:56:25,600 --> 00:56:28,700
It does not seem to be as a really all that expensive.

943
00:56:30,300 --> 00:56:31,300
Which is lucky for us.

944
00:56:32,100 --> 00:56:35,100
But what I was going to say is let's suppose that we did have to care

945
00:56:35,100 --> 00:56:36,300
about this, is there?

946
00:56:36,300 --> 00:56:37,700
Nothing we could do about it.

947
00:56:38,200 --> 00:56:40,800
And the answer is no, there's plenty that we could do about it.

948
00:56:41,500 --> 00:56:45,200
For example, what we could do is say, hey, when we do begin World

949
00:56:45,200 --> 00:56:46,000
change up here,

950
00:56:46,700 --> 00:56:51,400
Right in this code, we know that we're basically pulling a bunch of

951
00:56:51,400 --> 00:56:53,500
stuff that's going to go on to a free list, right?

952
00:56:53,500 --> 00:56:57,300
So when we call remove World chunk were pulling stuff data off of the,

953
00:56:57,300 --> 00:56:59,900
of the world and then what we

954
00:57:00,100 --> 00:57:04,100
Immediately thereafter is, we give it back to the World, by calling,

955
00:57:04,100 --> 00:57:05,000
add to free list.

956
00:57:06,400 --> 00:57:09,000
What that means is we have to take the mutex twice here if they can

957
00:57:09,000 --> 00:57:11,600
meet X first to pull it off and then again to put it back.

958
00:57:12,200 --> 00:57:15,500
Well we're about to come through here.

959
00:57:17,800 --> 00:57:22,300
And do end World change and during n World change, we're going to have

960
00:57:22,900 --> 00:57:27,100
to take the mutex all the time in order to put entities back into the

961
00:57:27,100 --> 00:57:27,800
trunk space.

962
00:57:28,300 --> 00:57:30,400
But what if instead of doing that?

963
00:57:30,600 --> 00:57:32,300
We simply said, hey wait a second.

964
00:57:33,600 --> 00:57:36,000
We know that we just pulled a bunch of data off.

965
00:57:36,300 --> 00:57:39,500
What if we just keep those blocks around local to our thread?

966
00:57:39,900 --> 00:57:43,700
And then when we call use trunk space will just pass it back in and

967
00:57:43,700 --> 00:57:47,300
it'll pull off of that free list first and it won't have to take the

968
00:57:47,300 --> 00:57:49,300
mutex unless it runs out.

969
00:57:49,600 --> 00:57:53,100
And then we'll only have to take the mutex once at the very end when

970
00:57:53,100 --> 00:57:56,300
we go to put it back when we say anything that you didn't use, but

971
00:57:56,300 --> 00:57:56,700
back,

972
00:57:57,600 --> 00:57:58,100
Right.

973
00:58:00,300 --> 00:58:01,800
so if we want to do it that way,

974
00:58:03,400 --> 00:58:06,500
Then we would have a situation where okay, up here, where we say, get

975
00:58:06,500 --> 00:58:09,400
World chunk, right and we call get World, Chuck internal, and we do

976
00:58:09,400 --> 00:58:15,500
this stuff, none of this stuff actually in the hash none of this stuff

977
00:58:15,500 --> 00:58:19,400
actually has to be mutex too closely.

978
00:58:20,500 --> 00:58:22,100
If we don't want to change the hash.

979
00:58:22,200 --> 00:58:25,600
So we could also leave the world chunks in place and don't pull them

980
00:58:25,600 --> 00:58:27,800
out until we actually finish.

981
00:58:28,500 --> 00:58:32,800
So that all of these things could not, could could avoid be mute.

982
00:58:33,000 --> 00:58:33,500
As well.

983
00:58:34,400 --> 00:58:37,200
So we have a lot of options here in terms of like pushing the mutex

984
00:58:37,200 --> 00:58:41,200
down a little it just I guess at this point oddly enough doesn't seem

985
00:58:42,000 --> 00:58:43,600
like it cost us very much to do.

986
00:58:43,900 --> 00:58:52,100
I would have expected to be honest to see that to see this ticket cost

987
00:58:52,100 --> 00:58:57,100
us more, but it just doesn't seem to at the moment.

988
00:58:57,200 --> 00:58:58,800
It just doesn't seem to be a big deal.

989
00:58:59,800 --> 00:59:02,800
It seems to be much more costly to perform.

990
00:59:02,900 --> 00:59:06,800
Our begin World change and to be honest, I'm not super sure why.

991
00:59:06,800 --> 00:59:10,900
That is I guess it's just because it's the thing that actually touches

992
00:59:10,900 --> 00:59:14,100
all of these entities and pulls does all the copying out.

993
00:59:14,400 --> 00:59:18,500
So it's probably the thing that hits the cash, the most, or misses,

994
00:59:18,500 --> 00:59:19,700
the cash, the most I should say.

995
00:59:22,000 --> 00:59:27,700
That could easily be the case and then when we go to do and entity all

996
00:59:27,700 --> 00:59:31,000
the stuff is already warm in the cash because we just did a bunch of

997
00:59:31,000 --> 00:59:36,300
stuff with it and so maybe it just doesn't really cost very much to do

998
00:59:36,300 --> 00:59:37,300
at that point.

999
00:59:37,400 --> 00:59:38,900
I don't know, right?

1000
00:59:39,300 --> 00:59:42,000
But what you can see from the profile pretty clearly is that that's

1001
00:59:42,000 --> 00:59:43,100
that's definitely the case.

1002
00:59:44,400 --> 00:59:45,600
You know that we sort of have

1003
00:59:50,400 --> 00:59:54,600
That we sort of that, you know, at least as far as I can tell, we

1004
00:59:54,600 --> 00:59:59,500
typically just don't don't see that playing itself out very much and

1005
00:59:59,500 --> 00:59:59,700
world.

1006
01:00:00,000 --> 01:00:03,300
Just, just, just not very expensive compared to build begin World

1007
01:00:03,300 --> 01:00:08,100
change, and it doesn't seem like we're spending much time in those

1008
01:00:08,100 --> 01:00:10,000
mutexes, right?

1009
01:00:12,700 --> 01:00:13,600
For whatever reason.

1010
01:00:16,400 --> 01:00:19,200
So yeah, pretty reasonable.

1011
01:00:19,200 --> 01:00:23,200
And so what I assume is happening here is these are the only two World

1012
01:00:23,200 --> 01:00:26,700
Sim calls that actually end up having to do work, right?

1013
01:00:27,000 --> 01:00:27,600
The rest of them.

1014
01:00:27,600 --> 01:00:31,200
Just don't probably have to do very much work so they don't end up

1015
01:00:31,200 --> 01:00:33,900
being particularly problematic at that point.

1016
01:00:34,300 --> 01:00:38,100
And and so, I'm assuming to if we compile this in

1017
01:00:42,300 --> 01:00:43,200
Release mode.

1018
01:00:43,900 --> 01:00:46,700
We would be shrunk down to the point where they're where it's pretty

1019
01:00:46,700 --> 01:00:47,400
straightforward.

1020
01:00:53,200 --> 01:00:53,800
Oh no.

1021
01:00:57,200 --> 01:00:57,900
What happened?

1022
01:01:01,800 --> 01:01:03,300
We have some kind of a deadlock here.

1023
01:01:07,000 --> 01:01:08,200
Although, I'm not really sure why.

1024
01:01:09,200 --> 01:01:10,200
So here is my ticket.

1025
01:01:10,200 --> 01:01:13,600
Mutex, it looks like everyone is blocked on it, right?

1026
01:01:16,000 --> 01:01:17,200
Oh no, they're not.

1027
01:01:17,800 --> 01:01:19,000
Someone is in the world chunk.

1028
01:01:19,000 --> 01:01:19,600
Internal.

1029
01:01:24,300 --> 01:01:28,100
Looks like I must not looks like there must be one thing that I'm not.

1030
01:01:30,800 --> 01:01:31,800
Holding correctly.

1031
01:01:32,000 --> 01:01:35,400
So you can see that someone somehow this list has got corrupted.

1032
01:01:36,500 --> 01:01:40,000
This world chunk list has got corrupted and in the process of this

1033
01:01:40,000 --> 01:01:42,900
world chunk list getting corrupted.

1034
01:01:42,900 --> 01:01:46,600
We end up in a situation where somebody is now just looping through it

1035
01:01:46,600 --> 01:01:51,400
forever which means everyone else can't can't finish, right?

1036
01:01:54,700 --> 01:01:55,500
So, let's take a look.

1037
01:02:08,600 --> 01:02:10,100
I would suspect.

1038
01:02:16,100 --> 01:02:16,500
There we go.

1039
01:02:18,500 --> 01:02:24,600
So one thing that's true is probably we have a situation where get

1040
01:02:24,600 --> 01:02:27,600
World chunk is something that can only be called by remove World

1041
01:02:27,600 --> 01:02:28,700
chunk, right?

1042
01:02:29,300 --> 01:02:32,000
Like like basically get World chunk, is not really something that we

1043
01:02:32,000 --> 01:02:33,600
want anyone to be able to call.

1044
01:02:37,800 --> 01:02:41,900
I would assume except in these two circumstances where we have been

1045
01:02:41,900 --> 01:02:42,500
locked.

1046
01:02:44,100 --> 01:02:44,800
Aha,

1047
01:02:47,000 --> 01:02:49,700
the dangers of having two functions called the same thing.

1048
01:02:50,400 --> 01:02:52,800
Maybe there's something to the see people who say, no function

1049
01:02:52,800 --> 01:02:53,700
overloading, right?

1050
01:02:55,300 --> 01:02:56,600
So there's the problem right there.

1051
01:02:57,300 --> 01:02:57,500
See.

1052
01:02:57,500 --> 01:02:59,700
This was not inside the mutex, I

1053
01:03:00,000 --> 01:03:02,700
It to be but I accidentally put it in this wrong function.

1054
01:03:04,700 --> 01:03:08,900
So as a result when we called get World chunk, there we have this

1055
01:03:08,900 --> 01:03:13,100
problem of it would have updated it to people could have been updating

1056
01:03:13,100 --> 01:03:17,400
the list at the same time and off you go because yeah, because now we

1057
01:03:17,400 --> 01:03:20,700
have this problem where are now we have this requirement essentially

1058
01:03:21,100 --> 01:03:27,200
that these operations have to be done very specifically, they have to

1059
01:03:27,200 --> 01:03:28,800
be done behind the mutex otherwise things.

1060
01:03:28,800 --> 01:03:29,400
Get bad.

1061
01:03:30,300 --> 01:03:30,700
Right.

1062
01:03:31,700 --> 01:03:33,100
All right, so let's take a look at that profile.

1063
01:03:33,100 --> 01:03:35,500
Now again, I pause it.

1064
01:03:38,800 --> 01:03:40,000
So, here's our rough breakdown.

1065
01:03:40,900 --> 01:03:43,800
So our begin real change function still takes a long time.

1066
01:03:44,200 --> 01:03:47,500
So it might be interesting to sort of check, whether it is, we can see

1067
01:03:47,500 --> 01:03:48,500
that our begin ticket.

1068
01:03:48,500 --> 01:03:52,300
Mutex assuming this is relatively accurate, we're not really spending

1069
01:03:52,300 --> 01:03:54,500
although we have to take it a lot because we're doing it.

1070
01:03:54,500 --> 01:03:56,200
Every time we add an entity back in.

1071
01:03:57,600 --> 01:03:59,800
We don't really have too much trouble.

1072
01:04:00,500 --> 01:04:02,100
Stalling out in it, right?

1073
01:04:02,100 --> 01:04:04,800
So even though we call it a ton, it's really just not taking very much

1074
01:04:04,800 --> 01:04:06,000
time which is nice to know.

1075
01:04:07,400 --> 01:04:08,800
So that's all really good.

1076
01:04:09,100 --> 01:04:13,300
And, you know, most of the time in here, we're actually still spending

1077
01:04:13,300 --> 01:04:14,200
on render stuff.

1078
01:04:14,300 --> 01:04:16,900
So it's really, it's just this one begin World.

1079
01:04:16,900 --> 01:04:20,700
Change is really the only thing that's that's particularly expensive

1080
01:04:20,700 --> 01:04:21,300
for us here.

1081
01:04:22,100 --> 01:04:26,900
So and yeah, if we take a look at it, so that's that big green region

1082
01:04:26,900 --> 01:04:27,300
there.

1083
01:04:27,700 --> 01:04:29,800
If we take a look at it, we don't have much visibility.

1084
01:04:30,000 --> 01:04:32,400
Into what's actually going on in that function because we haven't

1085
01:04:32,400 --> 01:04:34,200
marked it up with any additional blocks there.

1086
01:04:36,700 --> 01:04:39,500
Because we haven't really been looking to see why it takes the time

1087
01:04:39,500 --> 01:04:40,100
that it takes.

1088
01:04:41,100 --> 01:04:46,700
So what we could do in here is sort of try to get a little bit more, I

1089
01:04:46,700 --> 01:04:49,100
suppose insight into what it's doing.

1090
01:04:49,500 --> 01:04:54,900
What I will say is inside here now, we probably want to take a look at

1091
01:04:54,900 --> 01:04:58,700
things at a slightly higher level and say, let's look at remove Road

1092
01:04:58,700 --> 01:05:04,000
chunk and and use trunk space because those are the two things that we

1093
01:05:04,000 --> 01:05:04,600
call.

1094
01:05:05,400 --> 01:05:05,800
and,

1095
01:05:08,900 --> 01:05:10,300
Maybe I'd back to free list.

1096
01:05:10,300 --> 01:05:12,900
That's another one of the things that we call, right?

1097
01:05:15,200 --> 01:05:17,800
Oops, I timed the wrong use chunk space again.

1098
01:05:19,400 --> 01:05:19,800
There we go.

1099
01:05:21,300 --> 01:05:23,600
I don't really know why we have two of these.

1100
01:05:23,600 --> 01:05:28,000
I guess we were thinking maybe if we tried to like short-circuit the

1101
01:05:28,000 --> 01:05:28,600
call,

1102
01:05:31,200 --> 01:05:31,600
But, all right.

1103
01:05:31,600 --> 01:05:32,400
So let's take a look.

1104
01:05:32,400 --> 01:05:34,200
First of all, just at the high level.

1105
01:05:34,700 --> 01:05:37,400
Let's take a quick look at what's going on here.

1106
01:05:39,700 --> 01:05:41,300
So inside, begin World change.

1107
01:05:41,300 --> 01:05:44,200
You can see it's still mostly all the times in there.

1108
01:05:44,200 --> 01:05:50,100
It's really not it's really not an issue in terms of like we just

1109
01:05:50,100 --> 01:05:53,500
don't see we don't see that being a problem.

1110
01:05:53,700 --> 01:05:57,200
Like remove Road shank and stuff, these are not

1111
01:05:58,800 --> 01:05:59,800
These are really not expensive.

1112
01:06:01,500 --> 01:06:03,300
So what what is taking the time, right?

1113
01:06:03,300 --> 01:06:04,600
Is it just these copies?

1114
01:06:05,900 --> 01:06:07,900
Let's let's see if it is.

1115
01:06:10,500 --> 01:06:13,000
To be honest, I don't really remember how we do our time Block.

1116
01:06:13,000 --> 01:06:14,000
It's been a long time.

1117
01:06:23,400 --> 01:06:26,700
So it looks like we can just sort of say hey, here's a block.

1118
01:06:27,700 --> 01:06:28,700
You can press.

1119
01:06:30,100 --> 01:06:31,300
To decompress.

1120
01:06:33,500 --> 01:06:34,100
Ends.

1121
01:06:35,000 --> 01:06:37,500
We don't we're not actually doing anything in here.

1122
01:06:37,500 --> 01:06:40,900
We're just doing the copy, but hey, let's find out if that copy is

1123
01:06:40,900 --> 01:06:41,600
expensive.

1124
01:06:43,800 --> 01:06:44,500
Because I'm curious.

1125
01:06:46,700 --> 01:06:50,900
So here's our profile and we do spend a fair amount of time copying

1126
01:06:50,900 --> 01:06:55,300
this out, but it's still not really comparable.

1127
01:06:55,400 --> 01:06:59,300
It's still not really nearly as much as we are spending in here.

1128
01:07:00,300 --> 01:07:03,600
So you know, is it, is it some other portion of it?

1129
01:07:03,600 --> 01:07:04,500
Let's take a look.

1130
01:07:05,300 --> 01:07:07,300
So let's let's maybe.

1131
01:07:07,300 --> 01:07:08,800
Look at a daddy to hash

1132
01:07:15,100 --> 01:07:17,900
So time that guy.

1133
01:07:22,300 --> 01:07:27,700
And then the other part we've got here is get our add brain and maybe

1134
01:07:27,700 --> 01:07:29,800
we can see what's happening there.

1135
01:07:33,900 --> 01:07:34,700
Let's see.

1136
01:07:34,700 --> 01:07:36,600
That would probably be in here, right?

1137
01:07:46,500 --> 01:07:51,000
So those are some things that we're doing, but I don't actually know

1138
01:07:51,000 --> 01:07:55,700
if any of them make much sense in terms of time spent.

1139
01:07:55,900 --> 01:07:56,300
So you can see.

1140
01:07:56,300 --> 01:07:59,100
Begin voting is still one of the most expensive ones.

1141
01:07:59,300 --> 01:08:05,800
Even if we take out the the time to do the decompress and and the time

1142
01:08:05,800 --> 01:08:08,700
to do the add or remove brain

1143
01:08:11,000 --> 01:08:11,700
It's down here.

1144
01:08:15,100 --> 01:08:17,300
So still pretty weird, right?

1145
01:08:19,500 --> 01:08:20,899
If we look at what's going on here.

1146
01:08:24,899 --> 01:08:28,300
I mean, entity overlaps rectangle, doesn't seem like it should be a

1147
01:08:28,300 --> 01:08:30,500
big deal and I don't know.

1148
01:08:30,500 --> 01:08:32,899
I mean if you just take a look at what's going on in here, it's a

1149
01:08:32,899 --> 01:08:33,899
little bit bizarre.

1150
01:08:34,700 --> 01:08:39,800
So I guess one thing to wonder is this, the setup code, particularly

1151
01:08:39,800 --> 01:08:40,200
mutt?

1152
01:08:40,200 --> 01:08:43,899
So, you know, maybe let's change tactics here and say, all right,

1153
01:08:45,100 --> 01:08:48,200
let's make sure that this part of the code is actually the part that's

1154
01:08:48,200 --> 01:08:48,899
taken the time.

1155
01:08:48,899 --> 01:08:51,100
Is it the Preamble that's somehow taken the time?

1156
01:08:52,899 --> 01:08:57,700
You know I'm saying, so I guess we'll do it this way.

1157
01:09:07,800 --> 01:09:12,200
And so we should see, you know, if we're not mistaken chunk processing

1158
01:09:12,200 --> 01:09:13,899
should be at the top of the list, right?

1159
01:09:18,100 --> 01:09:18,899
And it's not.

1160
01:09:22,800 --> 01:09:24,200
So that's really interesting.

1161
01:09:24,200 --> 01:09:28,200
That means that this part up here is is actually the part that's

1162
01:09:28,200 --> 01:09:30,700
taking the majority of the time.

1163
01:09:31,600 --> 01:09:36,000
And so, you know, the push array stuff here is doing no clear.

1164
01:09:36,300 --> 01:09:42,000
This push struct is doing a clear and that, you know, clear does clear

1165
01:09:42,000 --> 01:09:43,100
quite a bit, right?

1166
01:09:43,100 --> 01:09:47,800
It's clearing out this big hash-table stuff here so I don't know.

1167
01:09:47,800 --> 01:09:49,100
Let's push this up.

1168
01:09:50,700 --> 01:09:54,800
A little bit further and just say, hey, is it, is it just that clear

1169
01:09:54,800 --> 01:09:55,800
that's killing us?

1170
01:10:04,000 --> 01:10:05,000
So yeah.

1171
01:10:05,000 --> 01:10:08,600
I mean, if you look at what's happening there, half the time, if we

1172
01:10:08,600 --> 01:10:13,300
are to believe this half the time is spent in this push struct call.

1173
01:10:14,700 --> 01:10:15,500
Half the time.

1174
01:10:21,400 --> 01:10:23,100
I mean, right?

1175
01:10:23,100 --> 01:10:24,300
Did I miss anything there?

1176
01:10:24,300 --> 01:10:27,500
That looks that to me, sort of looks at least.

1177
01:10:30,100 --> 01:10:31,100
Like what that's saying?

1178
01:10:32,100 --> 01:10:34,500
So somehow this push struct.

1179
01:10:36,000 --> 01:10:36,300
Yeah.

1180
01:10:36,300 --> 01:10:37,100
It is a problem.

1181
01:10:38,100 --> 01:10:38,900
By the way.

1182
01:10:38,900 --> 01:10:41,100
I think our timer like totally failed.

1183
01:10:44,300 --> 01:10:46,900
Have you noticed like our timer like where is my little?

1184
01:10:47,200 --> 01:10:49,300
Where's the little head thing?

1185
01:10:50,900 --> 01:10:51,600
It ain't there.

1186
01:10:53,500 --> 01:10:56,200
Timer is buggy buggy timer.

1187
01:11:00,400 --> 01:11:02,300
Although it still thinks we're inside a session.

1188
01:11:06,700 --> 01:11:07,900
We'll have to take a look at it later.

1189
01:11:09,200 --> 01:11:11,100
Anyway, so

1190
01:11:12,800 --> 01:11:15,200
I guess what I would say about this is

1191
01:11:16,600 --> 01:11:21,500
I want to investigate that push struct a little bit more carefully and

1192
01:11:21,500 --> 01:11:25,000
if I kind of go into the memory Arena stuff, oops,

1193
01:11:30,700 --> 01:11:32,400
You know, I can could just say.

1194
01:11:32,800 --> 01:11:35,800
Alright, let's get.

1195
01:11:36,100 --> 01:11:37,600
Let's get some timing on that.

1196
01:11:42,700 --> 01:11:43,400
I don't know.

1197
01:11:44,400 --> 01:11:46,200
You tell me how much time you're spending in there.

1198
01:11:52,900 --> 01:11:53,800
What is the problem?

1199
01:11:56,100 --> 01:11:57,600
Is that too many of these?

1200
01:12:00,200 --> 01:12:01,500
Um yeah.

1201
01:12:01,500 --> 01:12:01,800
Okay.

1202
01:12:01,800 --> 01:12:04,600
So now that I think about it, probably if I put push size in there

1203
01:12:05,100 --> 01:12:06,200
with the clear, it's going to be a bit.

1204
01:12:06,200 --> 01:12:07,300
Let's let's do this.

1205
01:12:10,000 --> 01:12:11,600
Although that's still might be too many.

1206
01:12:16,100 --> 01:12:17,100
Probably is too many.

1207
01:12:18,700 --> 01:12:19,100
Yeah.

1208
01:12:30,700 --> 01:12:32,200
Not sure why.

1209
01:12:37,200 --> 01:12:41,200
It can't so when it tries to do the right here, it's getting a null.

1210
01:12:41,200 --> 01:12:44,800
So I think it's just running out of space.

1211
01:12:44,800 --> 01:12:48,200
I guess that's an interesting one though, just from having one in

1212
01:12:48,200 --> 01:12:48,700
there.

1213
01:12:53,000 --> 01:12:56,000
because I would like to know how much time that's taking

1214
01:12:59,100 --> 01:13:00,500
Like how many of those were calling?

1215
01:13:11,100 --> 01:13:14,700
Well, since I only care about timing this one, I guess what I'll do at

1216
01:13:14,700 --> 01:13:16,600
the moment is, I'll just go this way.

1217
01:13:23,200 --> 01:13:27,700
Rats will call this, you know, send, Marina.

1218
01:13:27,700 --> 01:13:28,200
Clear.

1219
01:13:31,200 --> 01:13:33,700
And then we will just use

1220
01:13:39,900 --> 01:13:40,700
And then we'll just know.

1221
01:13:40,700 --> 01:13:45,100
Okay, how much is just that one clear costing us.

1222
01:13:49,000 --> 01:13:54,000
Yeah, so basically like it's an even split half the time is spent

1223
01:13:54,000 --> 01:13:55,100
doing other stuff.

1224
01:13:55,100 --> 01:13:57,400
Half the time is spent just clearing that buffer.

1225
01:14:01,100 --> 01:14:04,400
Which is pretty crazy, right?

1226
01:14:08,900 --> 01:14:09,700
Yeah.

1227
01:14:11,600 --> 01:14:13,200
So let's start with the obvious.

1228
01:14:13,400 --> 01:14:15,200
Why are we clearing this buffer?

1229
01:14:15,800 --> 01:14:18,900
Well, the reason that we're clearing the buffer is because we need

1230
01:14:18,900 --> 01:14:25,600
some way of knowing whether our hash entries are filled or not, right?

1231
01:14:25,600 --> 01:14:28,300
I mean, that's that's fundamentally what we're trying to do here.

1232
01:14:29,100 --> 01:14:33,900
And so, if you take a look at what happens, we've got this, these IDs

1233
01:14:33,900 --> 01:14:37,900
and the entity pointer and stuff, and we've got a certain size and

1234
01:14:37,900 --> 01:14:40,500
identity, hashed, we're using, we could certainly

1235
01:14:40,700 --> 01:14:47,900
Only reduce the size of the entity hash and, you know, that would

1236
01:14:47,900 --> 01:14:53,600
certainly help because at the moment, if we look at how big that is, I

1237
01:14:53,600 --> 01:14:58,300
guess, you know, we've got the entity pointer editi IDs themselves.

1238
01:14:59,400 --> 01:14:59,800
I don't

1239
01:15:00,000 --> 01:15:01,300
How big they are?

1240
01:15:01,600 --> 01:15:03,600
Let's take a quick look and find out.

1241
01:15:12,200 --> 01:15:12,900
There we go.

1242
01:15:13,000 --> 01:15:15,300
So we've got a u-32 in there.

1243
01:15:15,300 --> 01:15:17,600
So basically, these are going to be, you know,

1244
01:15:19,900 --> 01:15:22,100
12, bytes long.

1245
01:15:23,000 --> 01:15:25,400
And so, if I take a look at how big this is going to be, it's going to

1246
01:15:25,400 --> 01:15:33,100
be 12 b x 4096 entries, and then it's going to be the exact same thing

1247
01:15:34,400 --> 01:15:36,300
12 times 4096.

1248
01:15:36,300 --> 01:15:43,700
Well, 12 times 4096 plus 12

1249
01:15:46,200 --> 01:15:48,400
12 times tips.

1250
01:15:50,300 --> 01:15:52,700
So it's basically got to do a 64k, clear?

1251
01:15:53,500 --> 01:15:54,600
Right at the moment.

1252
01:15:55,500 --> 01:15:58,600
So it's, you know, it's a pretty hefty clear.

1253
01:15:59,000 --> 01:16:03,700
I would say it does seem reasonable but I don't know that it should be

1254
01:16:03,700 --> 01:16:04,500
taking half the time.

1255
01:16:04,500 --> 01:16:09,600
I guess it's since we're not taking that much time to begin with and

1256
01:16:09,600 --> 01:16:11,600
it's overlapped on many threads.

1257
01:16:12,800 --> 01:16:16,200
I suppose that I could see why that would end up costing a fair bit of

1258
01:16:16,200 --> 01:16:19,400
time, but it is a little bit strange, right?

1259
01:16:21,600 --> 01:16:23,900
I think probably since we're at the hour mark, I'm going to take a

1260
01:16:23,900 --> 01:16:26,500
quick bathroom break.

1261
01:16:27,200 --> 01:16:31,400
Our timer should have had a little thing that was like timer thing but

1262
01:16:32,100 --> 01:16:36,100
yeah, you now know what we need to do.

1263
01:16:36,100 --> 01:16:40,500
We need to figure out a way to make this, not be so costly if we want

1264
01:16:40,500 --> 01:16:42,400
to take a look at why that's still taking so much time.

1265
01:16:42,800 --> 01:16:43,700
So, think about that.

1266
01:16:43,700 --> 01:16:45,300
And I will be back in a moment.

1267
01:21:45,400 --> 01:21:46,200
so,

1268
01:21:51,700 --> 01:21:55,400
I'm in an office building when I do handmade hero now obviously,

1269
01:21:55,400 --> 01:21:58,700
because I do it from the office instead of from home.

1270
01:21:58,800 --> 01:22:07,700
And so I have to walk to the bathroom and back in that time.

1271
01:22:09,800 --> 01:22:11,500
I thought of something.

1272
01:22:13,200 --> 01:22:19,500
And what I want to say is, I am going to take a quick few seconds to

1273
01:22:19,500 --> 01:22:25,100
look at the stream chat because I want to know did anyone else during

1274
01:22:25,100 --> 01:22:25,500
break?

1275
01:22:25,500 --> 01:22:28,700
Figure out what's actually wrong with the code?

1276
01:22:30,200 --> 01:22:31,000
Or not.

1277
01:22:54,600 --> 01:22:56,800
Anyone anyone?

1278
01:22:58,300 --> 01:22:59,000
Bueller.

1279
01:23:30,200 --> 01:23:33,700
All right, well, I don't think anyone did but that's okay.

1280
01:23:33,700 --> 01:23:36,100
I mean, I am the person in charge of this code.

1281
01:23:36,100 --> 01:23:38,500
So it is my responsibility to find the problems.

1282
01:23:40,700 --> 01:23:44,100
I already told you what the problem was, I already told me what the

1283
01:23:44,100 --> 01:23:47,600
problem was, but we collectively forgot.

1284
01:23:47,600 --> 01:23:50,600
We didn't forget for long because we only just typed in this code but

1285
01:23:51,500 --> 01:23:52,400
we still forgot.

1286
01:23:53,300 --> 01:23:59,800
if I'm not mistaken, we will get a very rude awakening because hey,

1287
01:24:01,500 --> 01:24:03,500
It's the clear that's taking the time, right?

1288
01:24:03,500 --> 01:24:05,800
Take client coloring 64k with taking the time.

1289
01:24:06,100 --> 01:24:09,900
Well, clearing 64k, today's computers do factoring.

1290
01:24:09,900 --> 01:24:13,500
64k not very much time to clear 64k.

1291
01:24:13,500 --> 01:24:16,700
Not a whole lot of time was a little suspicious, wasn't it?

1292
01:24:16,800 --> 01:24:18,900
So the first thing I was going to probably do is say, hey, how many

1293
01:24:18,900 --> 01:24:20,600
cycles should it take to clear 64k?

1294
01:24:20,600 --> 01:24:22,700
And let's see how far off we are from that and I suspect we're pretty

1295
01:24:22,700 --> 01:24:24,500
far from that but here's the rude awakening.

1296
01:24:24,900 --> 01:24:26,900
What happens if we put no clear in here?

1297
01:24:27,700 --> 01:24:28,200
Okay.

1298
01:24:28,400 --> 01:24:30,300
So now we're not going to do the clear.

1299
01:24:31,100 --> 01:24:33,600
We're going to time this and we're just call it simmering.

1300
01:24:33,600 --> 01:24:35,100
It Alec right.

1301
01:24:35,700 --> 01:24:40,200
And then immediately after the a lock, then I'm going to do the clear

1302
01:24:40,200 --> 01:24:40,900
right here.

1303
01:24:44,200 --> 01:24:45,800
Right can do the clear after the fact.

1304
01:24:46,500 --> 01:24:49,600
So now if it really was the clear, we would expect this to take no

1305
01:24:49,600 --> 01:24:53,700
time and all the time should now be pushed to the outer block, right?

1306
01:24:53,700 --> 01:24:55,300
I mean that's what should happen.

1307
01:24:58,900 --> 01:25:03,000
However, if we actually look at what does happen here?

1308
01:25:03,000 --> 01:25:04,700
Well I guess it's not as bad as I would have thought.

1309
01:25:05,100 --> 01:25:08,200
So 1.6% isn't that.

1310
01:25:08,200 --> 01:25:09,200
Isn't that bad?

1311
01:25:09,200 --> 01:25:11,900
But it's still relatively high, right?

1312
01:25:12,700 --> 01:25:14,100
So now let's time to clear itself.

1313
01:25:19,600 --> 01:25:20,300
50/50.

1314
01:25:32,200 --> 01:25:35,500
So now we can actually see like, okay, how much time does it take us

1315
01:25:35,800 --> 01:25:36,900
to do the Alec?

1316
01:25:36,900 --> 01:25:40,100
It's still a reasonable percentage of the time, which is the part that

1317
01:25:40,100 --> 01:25:40,800
I was concerned about.

1318
01:25:40,800 --> 01:25:42,000
I was thinking was going to be more than this.

1319
01:25:42,000 --> 01:25:43,800
So I guess it's not as bad as I would have thought.

1320
01:25:44,600 --> 01:25:48,400
And then we've got the same Arena clear, which is the separate part of

1321
01:25:48,400 --> 01:25:49,400
the time, right?

1322
01:25:49,800 --> 01:25:53,800
But if we take a look at how long that's taking to clear, in terms of

1323
01:25:53,800 --> 01:25:56,800
Cycles, we should at least verify first that it does that.

1324
01:25:56,800 --> 01:25:59,000
It is actually

1325
01:26:01,100 --> 01:26:04,800
That it does seem like the right amount of time for clearing, right

1326
01:26:04,800 --> 01:26:07,400
just to make sure that it isn't something stupid going on in there.

1327
01:26:09,100 --> 01:26:12,800
Okay, so the first thing that I want to verify, when we do begin World

1328
01:26:12,800 --> 01:26:13,800
change here, right?

1329
01:26:14,400 --> 01:26:16,400
I want to verify that.

1330
01:26:16,400 --> 01:26:20,500
This push truck is not taking too long because of a virtual Alex

1331
01:26:20,500 --> 01:26:21,500
situation, right?

1332
01:26:21,600 --> 01:26:23,900
Because one of the things that I realized when I was walking to and

1333
01:26:23,900 --> 01:26:31,600
from the bathroom is that if I go into World mode and we go to do

1334
01:26:31,600 --> 01:26:35,100
World Sim what we'll see when we do the world.

1335
01:26:35,100 --> 01:26:38,700
Same thing here is that nobody is using

1336
01:26:38,800 --> 01:26:41,900
this memory Arena until the begins him call.

1337
01:26:42,600 --> 01:26:45,800
So what that means is this first call here is going to be a virtual, a

1338
01:26:45,800 --> 01:26:47,400
lock every time.

1339
01:26:48,000 --> 01:26:50,700
Because remember I said we don't we shouldn't really be doing it the

1340
01:26:50,700 --> 01:26:52,500
way that we're doing it, right?

1341
01:26:52,600 --> 01:26:58,300
We shouldn't really be coming in cold.

1342
01:26:58,300 --> 01:26:59,800
We should just have some memory or

1343
01:27:00,000 --> 01:27:00,400
Sound.

1344
01:27:04,000 --> 01:27:09,500
Per thread that it can use, but it turns out not to be as bad as I was

1345
01:27:09,500 --> 01:27:09,900
thinking.

1346
01:27:09,900 --> 01:27:12,200
I was thinking that was going to be probably pretty bad.

1347
01:27:12,300 --> 01:27:17,300
But, you know, at the end of the day that 3% is not that bad.

1348
01:27:17,300 --> 01:27:21,300
So, you know, I guess it's less of a concern than I would have thought

1349
01:27:21,300 --> 01:27:25,500
that it would be, so I take it back, not such a necessary concern.

1350
01:27:26,100 --> 01:27:26,400
All right.

1351
01:27:26,400 --> 01:27:29,700
So now let's move on to the actual clear, which is this part right

1352
01:27:29,700 --> 01:27:30,100
here.

1353
01:27:30,800 --> 01:27:32,800
And again, we probably would want to get rid of this.

1354
01:27:32,800 --> 01:27:33,700
I mean, taking

1355
01:27:33,800 --> 01:27:35,600
Percent of the time to do nothing.

1356
01:27:35,600 --> 01:27:38,900
Essentially like it could just be zero, right?

1357
01:27:39,000 --> 01:27:43,500
Is not great you know we're just flushing Cycles down the the drain

1358
01:27:43,500 --> 01:27:44,500
for no real reason.

1359
01:27:45,800 --> 01:27:46,800
But let's take a look at that.

1360
01:27:46,800 --> 01:27:47,200
Clear.

1361
01:27:48,200 --> 01:27:53,900
So we're taking this clear, we know exactly how many cycles per it's

1362
01:27:53,900 --> 01:27:57,200
taking and you know what's interesting, we should probably print that

1363
01:27:57,200 --> 01:27:59,200
piece of information out because that's a really good piece of

1364
01:27:59,200 --> 01:28:01,300
information to have and we don't have it right now.

1365
01:28:02,000 --> 01:28:08,000
So let's go ahead and say, all right, you know, in the debug interface

1366
01:28:08,000 --> 01:28:08,700
code,

1367
01:28:11,300 --> 01:28:12,900
Let's see, cumulative.

1368
01:28:17,100 --> 01:28:17,600
Sedan.

1369
01:28:20,800 --> 01:28:22,000
I don't know how to spell cumulative.

1370
01:28:23,100 --> 01:28:24,000
George this point.

1371
01:28:27,200 --> 01:28:31,800
so, if we were to add to this something that printed out the cycles

1372
01:28:31,800 --> 01:28:41,100
per, so we could do like, you know, 502, F cycles per

1373
01:28:52,300 --> 01:28:56,000
So now we have the running something in there, and then I also now can

1374
01:28:56,000 --> 01:28:57,300
print out like, all right.

1375
01:28:57,400 --> 01:29:00,700
Here's the the some, right?

1376
01:29:01,200 --> 01:29:03,900
And here's the

1377
01:29:06,100 --> 01:29:10,100
So that's the total number of cycles and then here's the count.

1378
01:29:10,300 --> 01:29:14,600
So if I just divide the sum

1379
01:29:16,500 --> 01:29:17,600
By the count.

1380
01:29:20,100 --> 01:29:23,700
Said look like this, that would produce the number that we're actually

1381
01:29:23,700 --> 01:29:29,100
looking for and we want to do a safe ratio here because that number B,

1382
01:29:29,100 --> 01:29:29,800
b0.

1383
01:29:30,300 --> 01:29:30,800
Right?

1384
01:29:33,000 --> 01:29:35,400
I don't know if we have a yeah, we do.

1385
01:29:35,900 --> 01:29:40,600
So I kind of want to do like more like a safe ratio 0 here.

1386
01:29:45,100 --> 01:29:46,600
And I kind of need this to be.

1387
01:29:48,000 --> 01:29:48,900
That's 64.

1388
01:29:49,300 --> 01:29:52,900
So we might have to go ahead and let you know.

1389
01:29:52,900 --> 01:29:56,500
I I don't want this count numbers to be too high for this.

1390
01:30:03,000 --> 01:30:05,000
So, I just want to make sure I can still call this.

1391
01:30:20,500 --> 01:30:21,000
All right.

1392
01:30:25,200 --> 01:30:27,700
So, let's take a look.

1393
01:30:27,700 --> 01:30:31,400
Now if we can add, how much time that's actually taking so here, I'll

1394
01:30:31,400 --> 01:30:34,600
pause and then to take a look at this.

1395
01:30:34,600 --> 01:30:36,500
So you can see it tells me how many cycles.

1396
01:30:36,500 --> 01:30:39,500
Each course that needs to be, I can't really read that particularly

1397
01:30:39,500 --> 01:30:39,700
well.

1398
01:30:39,700 --> 01:30:43,700
So I kind of want that to be offset from the cursor a little bit.

1399
01:30:44,100 --> 01:30:47,500
So maybe I want to do something more like this.

1400
01:30:58,800 --> 01:31:02,200
And so if I come in here, now I can see how many cycles for some

1401
01:31:02,200 --> 01:31:02,500
Marina.

1402
01:31:02,500 --> 01:31:03,000
Clear.

1403
01:31:04,600 --> 01:31:09,700
so, if you take a look at how many cycles that's taking that's about

1404
01:31:09,700 --> 01:31:11,400
five hundred thousand Cycles,

1405
01:31:12,700 --> 01:31:19,600
So if we go in here, and in fact, I'll I'll just stop right on that

1406
01:31:19,600 --> 01:31:20,200
call.

1407
01:31:27,600 --> 01:31:31,600
So if I was to say hey how big is a Sim region?

1408
01:31:34,000 --> 01:31:43,900
So we're taking 70,000 B is how big this thing is and we're basically

1409
01:31:43,900 --> 01:31:48,500
saying like well we've got around 500 thousand Cycles, to clear it,

1410
01:31:49,000 --> 01:31:52,700
that's sort of seeing that it's taking a seven cycles of B to clear.

1411
01:31:58,000 --> 01:32:02,100
Right, that's almost that's like one cycle per bit.

1412
01:32:03,200 --> 01:32:03,700
To clear.

1413
01:32:10,100 --> 01:32:12,000
Certainly we could do better than that.

1414
01:32:12,100 --> 01:32:17,200
Even at this size I think, because, you know, these are, these are

1415
01:32:17,200 --> 01:32:21,000
clears, their non-temporal kind of, they're not, they don't even need

1416
01:32:21,000 --> 01:32:25,000
to read the cache line in during it's not read modify write.

1417
01:32:25,000 --> 01:32:26,200
It's like, right only.

1418
01:32:27,200 --> 01:32:30,500
So it's literally just plowing out the entire cache line.

1419
01:32:30,500 --> 01:32:32,200
And I'm not really sure why

1420
01:32:33,100 --> 01:32:34,900
It would be taking that long.

1421
01:32:36,200 --> 01:32:36,900
To clear.

1422
01:32:38,200 --> 01:32:42,400
I should not think that that would have been even remotely close to

1423
01:32:43,600 --> 01:32:45,300
the total amount of clear time.

1424
01:32:46,200 --> 01:32:48,900
So I don't know why that is.

1425
01:32:48,900 --> 01:32:51,800
Let's take a look really quickly at just what is the Assembly

1426
01:32:51,800 --> 01:32:52,200
Language?

1427
01:32:52,200 --> 01:32:57,300
Look like because it should just be like a rep and it does look like

1428
01:32:57,300 --> 01:32:59,800
it is so I'm just that's

1429
01:33:00,000 --> 01:33:10,300
And a bizarre to me that that that rep is taking that long to do, it's

1430
01:33:10,300 --> 01:33:12,500
clear, right?

1431
01:33:12,600 --> 01:33:15,000
Because that's this is the entire, that's it right there.

1432
01:33:15,000 --> 01:33:19,400
I mean that's the clear that's the entirety of the clear is just this

1433
01:33:19,400 --> 01:33:21,800
one Assembly Language instruction, right?

1434
01:33:22,000 --> 01:33:25,700
And that Assembly Language instruction is a repeating instruction.

1435
01:33:25,700 --> 01:33:27,000
That's micro coated to just

1436
01:33:28,100 --> 01:33:29,600
clear as big as you told it.

1437
01:33:37,900 --> 01:33:39,500
It really does seem.

1438
01:33:40,500 --> 01:33:42,000
Like that should be faster.

1439
01:33:43,100 --> 01:33:44,900
I'm not sure why it's not.

1440
01:33:46,300 --> 01:33:50,400
And I guess you know without really looking into it more deeply, I'm

1441
01:33:50,400 --> 01:33:50,800
not sure.

1442
01:33:50,800 --> 01:33:53,900
I could really figure out necessarily what that would be.

1443
01:33:54,400 --> 01:34:01,000
I mean I suppose we could just check like quickly a few small things

1444
01:34:01,400 --> 01:34:02,500
like for example,

1445
01:34:04,200 --> 01:34:05,200
I could say.

1446
01:34:05,700 --> 01:34:10,500
All right, you know, let's go in here to sim region.

1447
01:34:11,500 --> 01:34:13,500
And we've got this clear.

1448
01:34:13,600 --> 01:34:18,800
Let's say we did a no clear and we asked for a particular alignment,

1449
01:34:18,900 --> 01:34:19,600
right?

1450
01:34:20,400 --> 01:34:23,200
So inside memory Arena.

1451
01:34:24,100 --> 01:34:28,100
If we asked for, oops, not a ling.

1452
01:34:31,500 --> 01:34:33,100
If we ask for aniline, no clear.

1453
01:34:35,400 --> 01:34:39,100
And we aligned it to 16 byte boundary, right?

1454
01:34:39,400 --> 01:34:42,900
So now I would expect that that would not change the rep because I

1455
01:34:42,900 --> 01:34:44,800
think the rep is micro coded properly.

1456
01:34:44,800 --> 01:34:49,100
I wouldn't think that the rep would care about the alignment, but

1457
01:34:49,100 --> 01:34:50,000
let's just make sure.

1458
01:34:50,500 --> 01:34:53,700
So you can still it's still taking about five hundred thousand Cycles

1459
01:34:54,300 --> 01:34:54,800
to clear.

1460
01:34:56,000 --> 01:34:59,100
So then let's say, okay, we got the aligned no clear, let's go ahead

1461
01:34:59,100 --> 01:35:01,300
and take the size of this.

1462
01:35:05,900 --> 01:35:08,600
And we'll just say, okay, we're getting back one of these same

1463
01:35:08,600 --> 01:35:09,300
regions.

1464
01:35:10,500 --> 01:35:10,800
Oops.

1465
01:35:13,400 --> 01:35:15,900
We're going to get back one of these some regions we'd like to know

1466
01:35:16,200 --> 01:35:21,000
how big it is and we'd like to do like a divided so that we're only

1467
01:35:21,000 --> 01:35:24,900
going to look at in terms of 16, byte chunks.

1468
01:35:28,100 --> 01:35:28,500
Right.

1469
01:35:28,800 --> 01:35:33,200
So we'll say okay, do the Divide find out how many 16 by chunks there

1470
01:35:33,200 --> 01:35:37,500
are and then instead of calling zero struct and having it, do a rep

1471
01:35:37,500 --> 01:35:41,000
stas on there, will actually just clear it ourselves.

1472
01:35:41,000 --> 01:35:42,300
So we'll say, all right,

1473
01:35:46,200 --> 01:35:48,300
Let's do, mmm.

1474
01:35:50,000 --> 01:35:50,700
Store.

1475
01:35:57,200 --> 01:35:58,000
And will do.

1476
01:36:02,200 --> 01:36:03,200
Mmm store.

1477
01:36:06,000 --> 01:36:11,800
To just right you know Cindy registers out to clear this thing one

1478
01:36:11,800 --> 01:36:12,600
after the other.

1479
01:36:14,100 --> 01:36:14,600
So

1480
01:36:16,200 --> 01:36:17,000
Something like this.

1481
01:36:19,200 --> 01:36:19,800
Makes sense.

1482
01:36:21,500 --> 01:36:25,600
Again, not doing this for any reason other than I want to make sure

1483
01:36:25,600 --> 01:36:27,400
there's nothing bizarre here.

1484
01:36:27,400 --> 01:36:29,600
Oops gotta put a nice - in there.

1485
01:36:31,000 --> 01:36:34,500
I just want to make sure that nothing weird is going on and that like

1486
01:36:34,500 --> 01:36:39,600
you know the clear isn't somehow busted or whatever.

1487
01:36:40,100 --> 01:36:43,400
So yeah so you can see that that's that's a marina clear is is no

1488
01:36:43,400 --> 01:36:45,400
faster which is what I wanted to verify.

1489
01:36:45,400 --> 01:36:49,200
So like the Reps tasbeeh is doing what it can do.

1490
01:36:50,900 --> 01:36:54,300
No, no weirdness, no funny business there.

1491
01:36:55,500 --> 01:36:57,700
So that's at least reassuring.

1492
01:36:57,700 --> 01:36:58,700
That's good to know.

1493
01:36:59,200 --> 01:37:02,400
So now, we can sort of say, alright, the clear is as fast as the clear

1494
01:37:02,400 --> 01:37:02,900
is.

1495
01:37:03,900 --> 01:37:08,100
Let's go ahead and see if we can minimize the memory footprint for

1496
01:37:08,100 --> 01:37:12,000
this thing in some way that's going to that's, you know, going to make

1497
01:37:12,000 --> 01:37:13,800
it not so crazy.

1498
01:37:19,400 --> 01:37:19,900
All right.

1499
01:37:21,600 --> 01:37:25,100
so, first things first, if we take a look at what's going on with the

1500
01:37:25,100 --> 01:37:30,000
entity hash in the first place, when we actually add an entity to the

1501
01:37:30,000 --> 01:37:30,600
hash,

1502
01:37:33,300 --> 01:37:36,600
let's take a look at get hash by ADI there.

1503
01:37:37,400 --> 01:37:41,700
So if we look at these, are our two sort of half situations, we've got

1504
01:37:41,800 --> 01:37:45,000
hash for the brains and a hash, for the end of these.

1505
01:37:46,300 --> 01:37:51,000
What's happening there is we're looking at the probe and each time we

1506
01:37:51,000 --> 01:37:54,700
look through it, we're looking to see what the index value is.

1507
01:37:55,000 --> 01:37:58,000
But we never care what the pointer is, right.

1508
01:37:58,000 --> 01:38:00,700
The pointer is just something that ends up getting used.

1509
01:38:03,300 --> 01:38:07,500
As like a separate in a sort of separate pass, right?

1510
01:38:07,700 --> 01:38:13,200
So we've got these things bundled together, and we have to clear them

1511
01:38:13,200 --> 01:38:14,100
as a result.

1512
01:38:14,200 --> 01:38:17,200
But really, the only thing we would have needed to clear, was the

1513
01:38:17,200 --> 01:38:19,000
index entry, right?

1514
01:38:19,000 --> 01:38:21,600
That's the only thing we would actually need to clear their.

1515
01:38:23,400 --> 01:38:29,200
So, you know, that's kind of a, that's kind of an obvious place for us

1516
01:38:29,200 --> 01:38:32,800
to do, an improvement, is to remove the entity pointer from here.

1517
01:38:33,100 --> 01:38:36,300
And to have the entity pointer stored in like some kind of a sideband,

1518
01:38:36,700 --> 01:38:36,900
right?

1519
01:38:36,900 --> 01:38:38,600
So the end of the pointer stored somewhere else.

1520
01:38:39,700 --> 01:38:44,000
The other thing we could do, if we wanted to was we could actually

1521
01:38:44,000 --> 01:38:46,000
instead of using an entity ID,

1522
01:38:47,800 --> 01:38:54,400
as the cleared or not, sort of indicator, what we could also do is say

1523
01:38:54,400 --> 01:38:58,200
what if we just had some other way of indicating whether something was

1524
01:38:58,400 --> 01:38:59,800
in this Lane of the hash lat,

1525
01:39:00,000 --> 01:39:00,800
Or not.

1526
01:39:01,000 --> 01:39:04,700
So that instead of checking like index dot value like we're doing

1527
01:39:04,700 --> 01:39:08,400
here, we actually checked it in some totally different way like

1528
01:39:08,400 --> 01:39:11,200
looking into a bit field, right?

1529
01:39:12,900 --> 01:39:16,700
Because that would be another way to dramatically reduce the clear

1530
01:39:16,700 --> 01:39:17,400
amount.

1531
01:39:17,400 --> 01:39:21,100
Because then we would only have to clear, you know, we'd be going from

1532
01:39:21,100 --> 01:39:26,000
Quick clearing 12 bytes per entry to be clearing one bit per entry.

1533
01:39:26,300 --> 01:39:26,900
Right?

1534
01:39:27,400 --> 01:39:29,900
And so you know if you're thinking about 12,

1535
01:39:30,000 --> 01:39:31,800
B versus one bit.

1536
01:39:31,900 --> 01:39:36,000
It would be 96 times faster, perhaps, right?

1537
01:39:37,100 --> 01:39:38,400
Which hey, that's a good speed up.

1538
01:39:39,200 --> 01:39:43,500
So let's take a look at what happens when we want to do get hash form

1539
01:39:43,500 --> 01:39:43,900
ID.

1540
01:39:43,900 --> 01:39:47,000
Let's take a look at where that's actually going to be used and how

1541
01:39:47,000 --> 01:39:48,200
that's actually getting used.

1542
01:39:50,500 --> 01:39:53,700
So, in get entity by ID.

1543
01:39:57,200 --> 01:40:03,100
It looks like get our add brain and add any to the hash, they're all

1544
01:40:03,100 --> 01:40:04,100
kind of doing.

1545
01:40:06,700 --> 01:40:08,300
Relatively straightforward stuff.

1546
01:40:08,300 --> 01:40:12,800
So in pretty much the only case is a Danity the hash that actually

1547
01:40:12,800 --> 01:40:16,900
needs to do something to the audition process.

1548
01:40:17,300 --> 01:40:22,100
So we should be able to like again make this work in a sort of more,

1549
01:40:23,300 --> 01:40:26,700
we should be able to make this work in a more reasonable way.

1550
01:40:27,000 --> 01:40:28,700
So let's see here.

1551
01:40:32,500 --> 01:40:33,800
Get her ad brain.

1552
01:40:34,300 --> 01:40:39,900
Just uses this hash operation directly, so we could choose to weld

1553
01:40:39,900 --> 01:40:41,400
that one directly in.

1554
01:40:41,700 --> 01:40:42,400
Right?

1555
01:40:43,300 --> 01:40:45,700
So maybe that's the best way to start.

1556
01:40:48,400 --> 01:40:49,200
Hard to say.

1557
01:40:55,800 --> 01:40:57,100
Here's what I think I want to do.

1558
01:40:58,500 --> 01:41:02,800
So we'll take the entity hash bit here and let's just say that we're

1559
01:41:02,800 --> 01:41:06,300
going to go ahead and do this with with a bit field.

1560
01:41:07,100 --> 01:41:12,300
So, if we wanted to do this with a bit field, maybe we do like 64 bits

1561
01:41:12,300 --> 01:41:13,000
at a time.

1562
01:41:13,300 --> 01:41:19,100
And we just say, like entity hash occupancy,

1563
01:41:20,700 --> 01:41:21,300
Right?

1564
01:41:21,600 --> 01:41:24,200
And then we would just say well, however, big

1565
01:41:26,800 --> 01:41:30,900
This thing is, and I guess we could just make this a pound of fines.

1566
01:41:30,900 --> 01:41:32,300
Probably, the easiest way to do it.

1567
01:41:33,200 --> 01:41:33,800
However, big.

1568
01:41:33,800 --> 01:41:39,000
This thing is, we're going to say that if we have 4096 these, we're

1569
01:41:39,000 --> 01:41:41,600
going to divide it by 64 bits per per thing.

1570
01:41:41,700 --> 01:41:44,900
So that's how many entries we need in that.

1571
01:41:46,000 --> 01:41:47,400
In that array, right?

1572
01:41:47,700 --> 01:41:51,000
And similarly, we have like the brain hash occupancy and the Brain.

1573
01:41:51,000 --> 01:41:58,600
Hash occupancy is 256 of those divided out, right?

1574
01:42:00,300 --> 01:42:03,900
And if we did this and we made it work with those then what would

1575
01:42:03,900 --> 01:42:07,700
happen is when we're inside the same region and we're doing like the

1576
01:42:07,700 --> 01:42:08,900
zero struct calls.

1577
01:42:09,200 --> 01:42:12,300
Instead of having to climb the clearer, the wholesome region, which we

1578
01:42:12,300 --> 01:42:14,000
don't actually need to do anymore.

1579
01:42:14,800 --> 01:42:19,200
We can choose to clear just those occupancy entries, right?

1580
01:42:20,400 --> 01:42:24,700
So in that case, that means, since all the rest of this stuff is, is

1581
01:42:25,100 --> 01:42:26,400
already updated.

1582
01:42:26,600 --> 01:42:29,900
We would only have to clear like the null entity.

1583
01:42:30,200 --> 01:42:31,800
Because we would want that to be cleared.

1584
01:42:31,800 --> 01:42:38,300
Obviously we would clear the the entry at the end of the hash

1585
01:42:38,300 --> 01:42:44,200
occupants say and we would clear that brain hash occupancy, right?

1586
01:42:44,200 --> 01:42:45,800
But that's all we would actually need to clear.

1587
01:42:47,200 --> 01:42:50,100
The rest of the stuff could remain no cleared and you know wouldn't

1588
01:42:50,100 --> 01:42:50,800
affect us at all.

1589
01:42:52,200 --> 01:42:55,400
So then all we need to do is actually have a way of using that.

1590
01:42:56,300 --> 01:43:00,400
So when we call get hash from ID here, in this case for Adam to Hash

1591
01:43:00,400 --> 01:43:02,500
this would have to mark it, right?

1592
01:43:02,500 --> 01:43:06,900
So what I think we want to do is have these hash operating functions.

1593
01:43:07,200 --> 01:43:11,300
I think the hash operating functions should return instead of

1594
01:43:11,300 --> 01:43:14,800
returning a pointer, like they were doing before to the end to the

1595
01:43:14,800 --> 01:43:15,600
entity hash

1596
01:43:17,900 --> 01:43:18,900
Well, I guess they can still do that.

1597
01:43:18,900 --> 01:43:23,200
Actually it's just anyone who's actually going to use it to Mark, has

1598
01:43:23,200 --> 01:43:27,500
to like say like Mark or or, you know, Mark occupied or something,

1599
01:43:28,400 --> 01:43:28,900
right?

1600
01:43:29,900 --> 01:43:31,400
It just has to be able to say after the fact.

1601
01:43:31,400 --> 01:43:34,800
Like, hey, there's a mark occupied thing here that you have to do.

1602
01:43:35,500 --> 01:43:38,400
And so that's how we're going to know that.

1603
01:43:38,400 --> 01:43:40,900
A particular thing is occupied, right?

1604
01:43:42,100 --> 01:43:46,500
And similarly like if we go down to the the brain function here,

1605
01:43:46,900 --> 01:43:47,500
where's that at?

1606
01:43:47,700 --> 01:43:52,800
Around brain, when we go to add this thing in here, we have to do Mark

1607
01:43:52,800 --> 01:43:56,700
occupied on the hash, right?

1608
01:43:56,800 --> 01:44:00,300
So in either case, we always have to say like hey you know the thing

1609
01:44:00,300 --> 01:44:02,600
the thing has to be marked as occupied afterwards.

1610
01:44:04,200 --> 01:44:07,900
So then we just change up how these things are working so now we have

1611
01:44:07,900 --> 01:44:10,200
to have a thing that's like you know

1612
01:44:12,600 --> 01:44:13,800
Mark occupied.

1613
01:44:15,100 --> 01:44:16,400
It takes an entity hash

1614
01:44:20,700 --> 01:44:23,700
It's going to have to sim region as well.

1615
01:44:25,200 --> 01:44:28,000
And so then what we have to do just say well, alright, we've got an

1616
01:44:28,000 --> 01:44:28,500
index.

1617
01:44:28,500 --> 01:44:32,400
The index is going to be whatever the entry is - The Entity hash.

1618
01:44:33,600 --> 01:44:33,900
Right?

1619
01:44:33,900 --> 01:44:38,100
That's the one we're talking about and then we just have to figure out

1620
01:44:38,100 --> 01:44:41,900
which entry we are in The Entity hash occupancy.

1621
01:44:42,100 --> 01:44:48,000
So we would say, like, okay, that index / the bits per entry, right?

1622
01:44:48,700 --> 01:44:50,100
Is going to be, which one it's in.

1623
01:44:50,400 --> 01:44:53,900
So this is going to be like the OCH index.

1624
01:44:56,000 --> 01:44:56,200
Right?

1625
01:44:56,200 --> 01:44:58,700
So I'm just trying to figure out where we are in the bit pattern and

1626
01:44:58,700 --> 01:44:59,300
then,

1627
01:45:00,000 --> 01:45:03,200
Addition, I would need to know the bit index and the bit index is just

1628
01:45:03,200 --> 01:45:10,500
going to be that Arc index time 64 again - the original, right?

1629
01:45:10,700 --> 01:45:13,700
The other way to look at it is it's really just the index mod 64,

1630
01:45:13,700 --> 01:45:13,900
right?

1631
01:45:13,900 --> 01:45:14,400
It's whatever.

1632
01:45:14,400 --> 01:45:18,900
The end since that's a power of two, it could turn that into a clean

1633
01:45:19,500 --> 01:45:19,900
operation.

1634
01:45:19,900 --> 01:45:22,700
That's not an actual divided as well if it wants to, right.

1635
01:45:24,100 --> 01:45:26,900
So hey now I know the bit index of the ah, conducts all I have to do

1636
01:45:26,900 --> 01:45:27,200
to Mark.

1637
01:45:27,200 --> 01:45:31,900
Something occupied is say that the entity hash occupants say, right at

1638
01:45:31,900 --> 01:45:39,100
that index is going to we're going to or in whatever B corresponds to

1639
01:45:39,100 --> 01:45:41,000
that entry, right?

1640
01:45:41,700 --> 01:45:42,400
And that's it.

1641
01:45:43,500 --> 01:45:49,700
so really all we have to do their say, okay, let's say we've got

1642
01:45:51,400 --> 01:45:53,800
An array and an index.

1643
01:45:54,100 --> 01:45:57,900
This code is exactly the same no matter what we do, right?

1644
01:46:00,500 --> 01:46:04,000
So then we can say, Mark occupied is just pay Mark the spit off.

1645
01:46:05,800 --> 01:46:06,800
Here is the array.

1646
01:46:10,300 --> 01:46:11,200
Here's the index.

1647
01:46:13,500 --> 01:46:18,000
So now we have one that can be done in either fashion so there's the

1648
01:46:18,000 --> 01:46:18,700
brain hash

1649
01:46:25,800 --> 01:46:26,500
One as well.

1650
01:46:27,500 --> 01:46:28,000
Right.

1651
01:46:30,000 --> 01:46:30,400
Okay.

1652
01:46:34,600 --> 01:46:36,100
And of course, the weird thing is.

1653
01:46:36,100 --> 01:46:39,800
So in these circumstances, it assumes that it's 32-bit integers.

1654
01:46:40,200 --> 01:46:43,600
And this case, that's not what we want.

1655
01:46:44,400 --> 01:46:47,900
We want to make sure that this thing is like a long value, if that

1656
01:46:47,900 --> 01:46:48,500
makes sense.

1657
01:46:49,400 --> 01:46:50,600
We can also do it this way.

1658
01:46:52,000 --> 01:46:54,700
Just to make sure that it knows that makes sense.

1659
01:46:56,500 --> 01:46:57,900
So yeah, so we're almost there.

1660
01:46:57,900 --> 01:47:02,200
The only thing we have to do now is we just have to make sure.

1661
01:47:02,800 --> 01:47:09,800
Oops, we just have to make sure that when we actually go to do our

1662
01:47:09,800 --> 01:47:14,100
hash lookups we now have to check those bits as well.

1663
01:47:14,800 --> 01:47:19,000
So we now know like okay here's what the hash index is.

1664
01:47:19,200 --> 01:47:21,200
So really, all we have to do is say

1665
01:47:25,000 --> 01:47:29,400
If this thing is, occupied is no longer a check on the hash itself.

1666
01:47:34,700 --> 01:47:38,900
Because that value is not going to be initialized at all right?

1667
01:47:39,000 --> 01:47:43,600
So we have to do is say if it's not like we basically have to have an

1668
01:47:43,600 --> 01:47:46,000
is empty call, right?

1669
01:47:47,800 --> 01:47:51,700
And that is empty, call is just going to take whichever and you know,

1670
01:47:51,900 --> 01:47:55,100
are a we're talking about so entity hash occupancy, and then it's

1671
01:47:55,100 --> 01:47:58,600
going to take the index into the hash right?

1672
01:47:59,000 --> 01:47:59,800
Which would be this

1673
01:48:01,800 --> 01:48:07,500
Yeah, I'm saying and and that's really it.

1674
01:48:08,200 --> 01:48:11,300
So in both cases that's all we would really have to do is just you

1675
01:48:11,300 --> 01:48:16,800
know check to see if it's empty by using the the alternative look up.

1676
01:48:17,900 --> 01:48:19,000
rather than

1677
01:48:22,400 --> 01:48:23,800
rather than checking that pointer.

1678
01:48:24,400 --> 01:48:27,700
And so this is exactly the same operation we were doing before, right?

1679
01:48:27,700 --> 01:48:33,400
So before we had Mark bit and now we just have is empty and it's the

1680
01:48:33,400 --> 01:48:35,400
exact same thing only instead.

1681
01:48:35,400 --> 01:48:39,700
Now this instead of setting a bit in there, we're just going to say

1682
01:48:40,200 --> 01:48:43,500
that we want to know if the bit

1683
01:48:45,200 --> 01:48:46,800
Is that right?

1684
01:48:46,800 --> 01:48:49,000
So if the bit is set, then we're good to go.

1685
01:48:52,900 --> 01:48:54,500
What is the problem is not a myth?

1686
01:48:54,500 --> 01:48:55,400
That's true.

1687
01:49:01,000 --> 01:49:01,700
Wrong pointer.

1688
01:49:03,800 --> 01:49:08,800
so that's it for that and of course we don't know if we actually

1689
01:49:10,000 --> 01:49:14,500
getting this properly but so this assertion here is not going to work

1690
01:49:15,100 --> 01:49:21,900
obviously, because we don't clear that anymore we used to so we can if

1691
01:49:21,900 --> 01:49:25,900
we want to do like an assert is empty on

1692
01:49:32,900 --> 01:49:34,700
The index here, right?

1693
01:49:34,900 --> 01:49:37,700
So we could say like, oh yeah, you know.

1694
01:49:43,300 --> 01:49:44,600
Let's subtract those two out.

1695
01:49:44,600 --> 01:49:47,000
And let's, let's let's do the match there and did I do that.

1696
01:49:47,000 --> 01:49:48,100
Subtraction right here?

1697
01:49:48,800 --> 01:49:49,400
I did right.

1698
01:49:49,400 --> 01:49:49,700
I think.

1699
01:49:49,700 --> 01:49:49,900
Yeah.

1700
01:49:53,700 --> 01:50:01,200
Cannot convert argument one from some region to you 6450 fuckin say,

1701
01:50:01,200 --> 01:50:01,700
there we go.

1702
01:50:03,200 --> 01:50:04,400
So I can still do that assertion.

1703
01:50:04,400 --> 01:50:10,600
I just have to assert on the occupancy list and off we go.

1704
01:50:14,500 --> 01:50:17,600
All right, so this is not what we want to see, right?

1705
01:50:17,600 --> 01:50:21,300
This is saying that, that bit actually is set which is no good.

1706
01:50:22,200 --> 01:50:22,700
What?

1707
01:50:23,500 --> 01:50:28,700
I don't know, me, see here, she has a chance, occupancy and entry.

1708
01:50:33,000 --> 01:50:35,600
So the entry we're getting back, here is zero.

1709
01:50:36,900 --> 01:50:38,300
so, it looks like

1710
01:50:40,900 --> 01:50:42,800
looks like I messed something up.

1711
01:50:44,700 --> 01:50:45,400
Let's see.

1712
01:50:45,600 --> 01:50:46,600
So

1713
01:50:48,800 --> 01:50:52,500
the only way we'd get back 0 is if we scan through all of these and

1714
01:50:52,500 --> 01:50:55,300
there was literally no space available, right?

1715
01:50:57,700 --> 01:50:59,800
so really, you know, in theory, this should be

1716
01:51:00,000 --> 01:51:04,000
Cert that result is not zero.

1717
01:51:04,000 --> 01:51:06,900
Because if salt result is 0, that's just bad.

1718
01:51:10,100 --> 01:51:11,700
So there we can see that that's bad.

1719
01:51:12,300 --> 01:51:13,600
So is empty.

1720
01:51:14,300 --> 01:51:19,900
In this case is a case where obviously not doing this operation

1721
01:51:19,900 --> 01:51:21,900
correctly and

1722
01:51:24,100 --> 01:51:25,500
it's because this is backwards.

1723
01:51:26,400 --> 01:51:30,100
So what we want to do is know if this bit is not set, right?

1724
01:51:30,100 --> 01:51:31,700
Because we want the bit to be clean.

1725
01:51:32,800 --> 01:51:36,600
So really we're just looking at like, you know, that that we're

1726
01:51:36,600 --> 01:51:38,600
looking at an and not that makes sense.

1727
01:51:42,700 --> 01:51:48,500
All right, so we still got problems here, although I would like to for

1728
01:51:48,500 --> 01:51:51,600
debugging this, I'd like to plug it in if possible.

1729
01:51:51,600 --> 01:51:55,100
I'd like to debug it in debug mode because right now we're still in

1730
01:51:57,100 --> 01:51:57,500
Here.

1731
01:51:59,200 --> 01:52:00,900
Optimize mode, we go.

1732
01:52:04,500 --> 01:52:07,600
All right, so let's take a look at what's going on here because we

1733
01:52:07,600 --> 01:52:08,900
probably should step through that code.

1734
01:52:08,900 --> 01:52:12,300
And just make sure that it's doing everything reasonably before I get

1735
01:52:12,300 --> 01:52:14,600
too far down the debugging path.

1736
01:52:16,500 --> 01:52:17,000
But

1737
01:52:19,500 --> 01:52:20,600
Head is zero.

1738
01:52:22,000 --> 01:52:23,400
Whereas the body is something.

1739
01:52:23,900 --> 01:52:27,500
So technically this code really should be switching on the head.

1740
01:52:29,200 --> 01:52:32,600
So that's actually kind of a bug in this code but because we've got

1741
01:52:32,600 --> 01:52:37,500
it, I think that's good because we probably want to debug why it's not

1742
01:52:37,500 --> 01:52:38,500
finding that guy.

1743
01:52:39,400 --> 01:52:43,200
So let's take a quick look at why that's going on here.

1744
01:52:48,100 --> 01:52:52,200
So let's see, we look at what our hash value is.

1745
01:52:54,500 --> 01:52:57,400
And we're looking to see if those are empty.

1746
01:53:02,100 --> 01:53:03,300
By looking inside the package.

1747
01:53:03,300 --> 01:53:05,600
I think that looks pretty good to me.

1748
01:53:06,500 --> 01:53:10,500
We look at for our for whatever our index is come back as

1749
01:53:15,400 --> 01:53:18,400
We are looking to see whether or not the array.

1750
01:53:21,700 --> 01:53:23,700
At that location.

1751
01:53:27,600 --> 01:53:32,000
That still looks pretty reasonable for marking something is occupied.

1752
01:53:32,800 --> 01:53:34,700
We're marking the bit.

1753
01:53:37,800 --> 01:53:40,100
That's represented by the entry offset.

1754
01:53:42,200 --> 01:53:46,200
So here's one thing that's kind of nasty about this is that these

1755
01:53:46,200 --> 01:53:51,700
aren't well these aren't these are actually I guess based off of the

1756
01:53:51,700 --> 01:53:55,300
same base pointer so that's supposed to technically work and C as

1757
01:53:55,300 --> 01:53:55,800
well.

1758
01:53:55,800 --> 01:53:56,400
I believe.

1759
01:54:00,500 --> 01:54:04,300
So I think even that index computation should be safe.

1760
01:54:08,700 --> 01:54:11,900
so yeah, that all looks pretty reasonable to me, actually

1761
01:54:18,300 --> 01:54:20,700
So let me take a quick look here at add into two.

1762
01:54:20,700 --> 01:54:24,200
Hash here is something that I want to try.

1763
01:54:27,300 --> 01:54:28,500
I'm just going to say,

1764
01:54:32,300 --> 01:54:34,100
can we validate the hash a little bit here?

1765
01:54:37,300 --> 01:54:41,800
So interestingly enough like validating that hash appears to validate

1766
01:54:41,800 --> 01:54:42,400
properly?

1767
01:54:42,600 --> 01:54:48,900
Meaning we can actually verify that if we ask for the thing twice we

1768
01:54:48,900 --> 01:54:50,000
actually get back.

1769
01:54:50,400 --> 01:54:52,900
What we were expecting if that makes sense.

1770
01:54:53,000 --> 01:54:55,300
Hey this is the timer sort of did work it just for some reason the

1771
01:54:55,300 --> 01:54:58,900
little dude went away little corner window thing.

1772
01:54:59,200 --> 01:55:02,000
We'll just see what I don't really remember what keeps that thing up.

1773
01:55:04,100 --> 01:55:05,700
so, we'll have to check, but

1774
01:55:07,800 --> 01:55:14,600
if we take a look at the code for adding 82 hash are and I stop

1775
01:55:19,500 --> 01:55:20,500
At that location.

1776
01:55:21,400 --> 01:55:22,700
If I come through here,

1777
01:55:25,600 --> 01:55:28,400
It's the very first time it hits the hash so it should get out.

1778
01:55:28,400 --> 01:55:29,200
Exactly.

1779
01:55:29,600 --> 01:55:30,800
Let's see the hash index.

1780
01:55:30,900 --> 01:55:35,500
In this case happens to be 7 which is interesting.

1781
01:55:36,700 --> 01:55:37,500
So let's see here.

1782
01:55:37,500 --> 01:55:42,400
Hash value is 7 as well so it's going to put this guy in there at the

1783
01:55:42,400 --> 01:55:44,900
at location 7 and

1784
01:55:50,500 --> 01:55:53,000
And that looks like it's exactly what we think it should be.

1785
01:56:04,400 --> 01:56:05,800
So that seems like a pretty good start.

1786
01:56:05,800 --> 01:56:08,300
We can validate the hash, even a little bit more.

1787
01:56:10,100 --> 01:56:12,500
Let's validate the brain hash as well because I guess the brain could

1788
01:56:12,500 --> 01:56:13,400
also be part of it.

1789
01:56:13,800 --> 01:56:17,400
But here's, let's also save the test Centre pointer equals entry

1790
01:56:18,100 --> 01:56:18,500
pointer.

1791
01:56:18,500 --> 01:56:20,500
Well, if they're both equal to same thing, we know that.

1792
01:56:20,500 --> 01:56:22,800
So I guess really all I'm trying to do is verify that points to the

1793
01:56:22,800 --> 01:56:23,600
entity itself.

1794
01:56:24,900 --> 01:56:25,400
Right?

1795
01:56:27,100 --> 01:56:29,000
But I assume that's always going to succeed as well.

1796
01:56:29,100 --> 01:56:29,500
Yeah.

1797
01:56:30,500 --> 01:56:32,800
All right, so let's test the brain out.

1798
01:56:37,100 --> 01:56:39,200
So that when we do get a red brain, let's see how that works.

1799
01:56:39,200 --> 01:56:44,400
We get the hash here we are going to return that hash pointer.

1800
01:56:44,700 --> 01:56:53,200
If we do not have a pointer in there, will say okay, put it in.

1801
01:56:53,200 --> 01:56:56,400
So brains a Cool Spring count, right record that in there.

1802
01:56:57,200 --> 01:56:59,900
The hash pointer is going to be set to what we

1803
01:57:00,000 --> 01:57:01,100
It to be pointing to.

1804
01:57:10,300 --> 01:57:11,100
Questions.

1805
01:57:11,100 --> 01:57:11,800
So,

1806
01:57:16,000 --> 01:57:18,900
So, wait a minute, this is a bug.

1807
01:57:21,700 --> 01:57:24,500
Whoever nobody ever sets this brain ID.

1808
01:57:29,200 --> 01:57:29,800
Right.

1809
01:57:38,100 --> 01:57:41,700
So I think this was just a bug that we uncovered that happened to not

1810
01:57:41,700 --> 01:57:47,600
be a problem before, but that brain ID was is what's getting used

1811
01:57:47,600 --> 01:57:49,700
there and that's never getting checked.

1812
01:57:49,700 --> 01:57:51,000
Now why we needed?

1813
01:57:51,000 --> 01:57:53,900
I don't know because the pointer would tell us the ID.

1814
01:57:53,900 --> 01:57:56,800
We could just look through at the ID.

1815
01:57:58,400 --> 01:58:01,500
For verification but that's messed up.

1816
01:58:01,500 --> 01:58:04,400
So this really should have said right?

1817
01:58:04,400 --> 01:58:09,100
Hash ID equals ID so that's probably what the bug is and we just

1818
01:58:09,100 --> 01:58:12,600
uncovered one that was in there the whole time, right?

1819
01:58:12,800 --> 01:58:16,800
So that that's busted, that was, that's totally busted.

1820
01:58:17,300 --> 01:58:17,600
All right.

1821
01:58:17,600 --> 01:58:18,300
So

1822
01:58:20,400 --> 01:58:23,000
So yeah, that's that's real weird.

1823
01:58:24,200 --> 01:58:29,100
That is very strange that we never noticed that problem before, but

1824
01:58:29,100 --> 01:58:30,200
that's definitely the case.

1825
01:58:30,500 --> 01:58:35,700
Now it does seem like I don't really know why we would need these in

1826
01:58:35,700 --> 01:58:40,200
there because like I said, you can look through to the entity pointer

1827
01:58:40,200 --> 01:58:41,700
and find out what its index is.

1828
01:58:41,900 --> 01:58:46,200
So I kind of feel like these in fact there's a few right next to them,

1829
01:58:46,200 --> 01:58:47,700
which is why are we storing them in the hash?

1830
01:58:48,000 --> 01:58:48,900
And I don't know.

1831
01:58:49,600 --> 01:58:52,300
So it kind of feels like those should probably just go away.

1832
01:58:53,900 --> 01:58:55,500
How to avoid having that problem.

1833
01:58:56,300 --> 01:58:59,200
So, I feel like what we want to do here is now that we have that empty

1834
01:58:59,200 --> 01:59:04,900
concept, but we can't say is like, okay the entry instead of looking

1835
01:59:04,900 --> 01:59:09,600
at the index value, just look at the pointer and then see if the ID

1836
01:59:09,600 --> 01:59:11,800
matches, right?

1837
01:59:14,700 --> 01:59:17,400
And then the same thing would be here to here, right?

1838
01:59:18,300 --> 01:59:22,100
So we just say pointer and look

1839
01:59:27,000 --> 01:59:29,800
and that seems like probably the right thing to do.

1840
01:59:36,300 --> 01:59:37,200
And that'd be better.

1841
01:59:38,300 --> 01:59:40,500
Now, we still have obvious problems here.

1842
01:59:40,500 --> 01:59:44,100
Like, like our brains are still not working properly, so we definitely

1843
01:59:44,100 --> 01:59:45,300
didn't quite do it.

1844
01:59:46,100 --> 01:59:50,700
We're in a very bizarre sort of pattern there, but at least we're

1845
01:59:50,700 --> 01:59:51,600
getting a little closer.

1846
01:59:53,100 --> 01:59:57,000
So, now, at this point, I just need to figure out

1847
01:59:59,300 --> 01:59:59,800
Is there any?

1848
02:00:00,000 --> 02:00:03,400
They're problem that we introduced when doing brains.

1849
02:00:06,500 --> 02:00:09,100
All right, so we're clearing out our hash occupancies.

1850
02:00:11,100 --> 02:00:12,100
So that's good.

1851
02:00:17,900 --> 02:00:19,300
And we're clearing out our null in 2D.

1852
02:00:19,300 --> 02:00:20,300
So that's good as well.

1853
02:00:21,900 --> 02:00:24,600
And then I don't think any of these things need to be cleared.

1854
02:00:27,200 --> 02:00:28,900
So because they are all getting set.

1855
02:00:30,100 --> 02:00:32,400
So, I'm pretty sure everything else should be okay.

1856
02:00:41,200 --> 02:00:45,200
And actually if we look at this to, you can see that we've

1857
02:00:45,300 --> 02:00:49,800
successfully solved the problem that we had as well, which is that if

1858
02:00:49,800 --> 02:00:54,100
we look at how long it's taking to do are clear now it's negligible.

1859
02:00:55,300 --> 02:00:58,500
So just by switching to the occupancy to something that we could

1860
02:00:58,500 --> 02:00:58,700
clear.

1861
02:00:58,700 --> 02:01:03,400
Quickly, we completely eliminated that 13% hit that we had.

1862
02:01:04,000 --> 02:01:07,900
And now begin World changes is actually much lower down on the profile

1863
02:01:07,900 --> 02:01:08,500
as well.

1864
02:01:09,200 --> 02:01:10,600
And this is in debug compile.

1865
02:01:10,800 --> 02:01:14,600
So that's, that's the clear in debug, not even the optimized, clear.

1866
02:01:16,900 --> 02:01:21,000
So that's all good news, but we but we're still sort of having a weird

1867
02:01:21,000 --> 02:01:24,500
sort of problem, in terms of assigning things to brain.

1868
02:01:24,500 --> 02:01:29,500
So I'm not we haven't really quite finished yet but it is time for the

1869
02:01:29,500 --> 02:01:30,200
Q&A.

1870
02:01:30,700 --> 02:01:34,800
So I don't know, we may have to leave that as an exercise for the next

1871
02:01:34,800 --> 02:01:37,600
time, unless we can find it relatively quickly.

1872
02:01:37,700 --> 02:01:41,600
So, I'll take a quick look, just to see whether it's obvious what the

1873
02:01:41,600 --> 02:01:45,400
problem is, before we debug it much further, but

1874
02:01:46,200 --> 02:01:47,200
yeah, but

1875
02:01:48,300 --> 02:01:50,500
but that's just the way that is.

1876
02:01:53,200 --> 02:01:53,800
All right.

1877
02:01:53,900 --> 02:01:57,200
So what's interesting about this Behavior pattern here that we can

1878
02:01:57,200 --> 02:01:59,600
kind of see, which is interesting, is that we do get one?

1879
02:01:59,600 --> 02:02:04,000
Brain is worth of work sometimes, right?

1880
02:02:04,000 --> 02:02:07,200
So when I run this thing, oh, this is interesting, even more

1881
02:02:07,200 --> 02:02:07,600
interesting.

1882
02:02:07,600 --> 02:02:10,600
So sometimes you do, and sometimes you don't write.

1883
02:02:10,800 --> 02:02:12,700
So it's like something weird is happening.

1884
02:02:12,700 --> 02:02:17,400
Like there, that that brain update worked, but the rest of the brain

1885
02:02:17,400 --> 02:02:19,700
updates don't work, right?

1886
02:02:21,100 --> 02:02:23,600
And that's particularly, you know, like that's just really weird,

1887
02:02:23,600 --> 02:02:24,000
right?

1888
02:02:24,200 --> 02:02:28,200
So something about finding the brains is very touchy.

1889
02:02:28,200 --> 02:02:29,800
You know, who knows what's going on with it?

1890
02:02:29,800 --> 02:02:30,800
But something weird.

1891
02:02:32,600 --> 02:02:37,300
And so when we call get a red brain here and we passed the brain IDs

1892
02:02:38,300 --> 02:02:43,200
through, we must be doing something odd.

1893
02:02:45,600 --> 02:02:47,400
So maybe let's verify this a little bit.

1894
02:02:48,500 --> 02:02:49,100
So

1895
02:02:53,300 --> 02:02:55,800
here's the get hash from ID for our brain stuff.

1896
02:02:58,900 --> 02:02:59,800
And I guess it's a little premature.

1897
02:03:00,000 --> 02:03:02,300
Sure for me to say that it's definitely in the brain code, right?

1898
02:03:02,300 --> 02:03:04,700
That's just that was just that's really more of a hunch than anything

1899
02:03:04,700 --> 02:03:08,100
else but we compute those hash into season.

1900
02:03:08,100 --> 02:03:11,400
We do the is empty on each of those and then we're asking for the

1901
02:03:11,400 --> 02:03:15,200
storage index thing where we check against the storage index value.

1902
02:03:15,700 --> 02:03:22,200
We're just looking at the the ID of the pointed to brain, right?

1903
02:03:22,900 --> 02:03:25,600
So if it's empty, it'll never check that if it's not empty, if it's

1904
02:03:25,600 --> 02:03:29,800
been marked as occupied, then it's going to go ahead and do that much.

1905
02:03:30,000 --> 02:03:32,800
Right now, are we, I guess we should check to make sure that Mark

1906
02:03:32,800 --> 02:03:34,200
occupied is working properly.

1907
02:03:34,200 --> 02:03:35,100
So, here is our Mark.

1908
02:03:35,100 --> 02:03:35,900
I cried for the brain.

1909
02:03:35,900 --> 02:03:40,200
Hash, we're subtracting it away and we're using the brain occupancy

1910
02:03:40,200 --> 02:03:41,100
table for it.

1911
02:03:41,500 --> 02:03:44,000
And that is, I think roughly what we want to do.

1912
02:03:44,900 --> 02:03:49,200
If we take a look at the brain, not hash occupancy, it is lined up

1913
02:03:49,200 --> 02:03:51,200
properly with the brain hash itself.

1914
02:03:51,800 --> 02:03:54,700
So presumably, that should be pretty safe.

1915
02:03:55,500 --> 02:03:57,300
But you know again, who knows?

1916
02:03:57,300 --> 02:03:59,800
So let's double check here will do.

1917
02:04:00,300 --> 02:04:01,200
An assertion.

1918
02:04:03,400 --> 02:04:09,200
On a couple things will sort that will cert that is empty is correct.

1919
02:04:09,500 --> 02:04:16,000
So we want to make sure that our brain cash occupancy, for whatever

1920
02:04:16,000 --> 02:04:19,700
the the hash indexes here is correct.

1921
02:04:21,100 --> 02:04:27,200
So that would be hash - same region, rain hash, right?

1922
02:04:28,600 --> 02:04:32,100
So now we can at least assert that that we never try to fill something

1923
02:04:32,100 --> 02:04:34,700
that was already filled, that's good.

1924
02:04:34,900 --> 02:04:38,900
When we mark it occupied we could do the opposite.

1925
02:04:48,000 --> 02:04:50,300
So, is marking this as being filled as well.

1926
02:04:53,300 --> 02:04:56,700
So I'm just not sure what what the problem is that we're having, as

1927
02:04:56,700 --> 02:05:02,100
far as being able to resolve those IDs, when we create a new brain, we

1928
02:05:02,100 --> 02:05:06,700
are storing the ID and the type in there, which is what we want.

1929
02:05:07,200 --> 02:05:10,300
But you know what, probably we need to clear this.

1930
02:05:15,500 --> 02:05:17,700
Probably, we do need to clear this actually.

1931
02:05:21,000 --> 02:05:23,100
now, that I think about it because our brains

1932
02:05:28,200 --> 02:05:30,000
In fact that's probably the entirety of it.

1933
02:05:30,600 --> 02:05:35,600
So our brains look like this, they need to know whether their slots

1934
02:05:35,600 --> 02:05:36,500
are filled or not.

1935
02:05:36,700 --> 02:05:42,100
So at the point where we actually go to use this, we would have to

1936
02:05:42,100 --> 02:05:43,500
clear out the brain itself.

1937
02:05:47,700 --> 02:05:49,400
How was that working before?

1938
02:06:06,400 --> 02:06:08,600
It just seems like even that should not have been working before

1939
02:06:08,600 --> 02:06:10,200
without a clear, right?

1940
02:06:10,300 --> 02:06:13,600
Because if you want to look what's in a given slot, when is that even

1941
02:06:13,600 --> 02:06:14,100
getting clear?

1942
02:06:14,100 --> 02:06:15,400
Do we clear it down here?

1943
02:06:15,900 --> 02:06:19,900
And I mean, because I assume that when we push the brain ID, when we

1944
02:06:19,900 --> 02:06:22,900
grab out the brain ideas, you can kind of see here is, we're getting,

1945
02:06:22,900 --> 02:06:27,300
you know, we're getting the brain ideas out and then we're putting

1946
02:06:27,300 --> 02:06:28,000
something in there.

1947
02:06:28,200 --> 02:06:30,100
That's something that we're putting in there though.

1948
02:06:33,000 --> 02:06:37,500
If we if there wasn't something to put in there, how do we even know?

1949
02:06:41,600 --> 02:06:43,200
So it's a little bit crazy.

1950
02:06:46,400 --> 02:06:46,700
Right?

1951
02:06:46,700 --> 02:06:48,900
That those brains are not ever getting cleared.

1952
02:06:51,000 --> 02:06:54,600
It's just a little bit weird so I want to see hold on one second.

1953
02:06:54,700 --> 02:06:57,000
I want to see what happens if we clear these first.

1954
02:07:02,100 --> 02:07:03,600
So that's still not a problem.

1955
02:07:03,600 --> 02:07:05,600
I don't assume that that's not a problem.

1956
02:07:05,600 --> 02:07:08,900
Because now that I think about it, a lot of this memory is going to be

1957
02:07:08,900 --> 02:07:11,300
cleared anyway because we're not recycling it.

1958
02:07:11,300 --> 02:07:15,000
So it's coming from a zero pool, probably, because it comes from

1959
02:07:15,000 --> 02:07:15,800
virtual a lock.

1960
02:07:16,200 --> 02:07:18,500
So that's probably the only reason that's working though.

1961
02:07:19,100 --> 02:07:22,700
I'm kind of surprised that that was working before because you should

1962
02:07:22,700 --> 02:07:24,500
end up getting just garbage values in there.

1963
02:07:24,800 --> 02:07:27,400
Basically, and I think we were probably just getting lucky.

1964
02:07:28,500 --> 02:07:31,600
So when you come through here, right, it probably really.

1965
02:07:33,000 --> 02:07:34,300
That needed to happen.

1966
02:07:35,100 --> 02:07:39,600
Anytime you push one of those brains on but that's not the only

1967
02:07:39,600 --> 02:07:43,400
problem that we're having right, we're still not getting our brains

1968
02:07:43,400 --> 02:07:47,100
are not actually in stuff and we're getting sort of weird behavior and

1969
02:07:50,400 --> 02:07:51,200
in here as well.

1970
02:07:56,600 --> 02:07:56,800
Right.

1971
02:07:56,800 --> 02:07:57,900
Just really weird.

1972
02:07:59,100 --> 02:08:00,700
So, something is still up.

1973
02:08:00,700 --> 02:08:02,200
Something is is still

1974
02:08:04,800 --> 02:08:08,200
In a weird State and what I might want to do as well here.

1975
02:08:08,200 --> 02:08:12,100
Say hey why don't we check to make sure we're getting we're not doing

1976
02:08:12,100 --> 02:08:17,500
something bad, we added this code specifically for this purpose.

1977
02:08:21,200 --> 02:08:24,200
So I want to just check to make sure we don't have some bad memories

1978
02:08:24,200 --> 02:08:25,300
situation going on.

1979
02:08:25,900 --> 02:08:29,500
So what I'm going to do is say like okay let's check for overflows

1980
02:08:29,500 --> 02:08:31,100
here and are precise.

1981
02:08:35,900 --> 02:08:36,900
Let's just turn on overflow.

1982
02:08:36,900 --> 02:08:40,800
Checking everywhere, does anyone have any?

1983
02:08:41,400 --> 02:08:47,700
So we don't seem to be having any overflow problems at the moment, so

1984
02:08:47,700 --> 02:08:48,600
that's good.

1985
02:08:48,600 --> 02:08:54,700
What we do seem to be have not again is a block that's not closed or

1986
02:08:54,700 --> 02:08:55,600
something like that.

1987
02:08:55,600 --> 02:08:56,600
Just disappear.

1988
02:09:00,600 --> 02:09:01,000
Pierce.

1989
02:09:44,000 --> 02:09:45,700
So, I don't know how to come back from that.

1990
02:09:46,500 --> 02:09:51,800
I just have to kind of wait for Windows to decide that it's going to

1991
02:09:51,800 --> 02:09:53,200
suspend my process.

1992
02:09:55,000 --> 02:09:59,500
And we can just sit here and definitely, I suppose, and cross our

1993
02:09:59,500 --> 02:10:00,100
fingers.

1994
02:10:04,000 --> 02:10:04,700
Oh boy.

1995
02:10:20,400 --> 02:10:21,100
There we go.

1996
02:10:57,800 --> 02:10:58,600
All right.

1997
02:11:15,800 --> 02:11:22,300
So yeah, thankfully it eventually seems to have returned to normal.

1998
02:11:26,500 --> 02:11:27,200
Sort of.

1999
02:12:01,000 --> 02:12:03,500
The question is, can anyone actually hear me at this point?

2000
02:12:03,500 --> 02:12:06,000
I think they can I hope they can.

2001
02:12:08,300 --> 02:12:14,600
So yeah what we do know from that also is that our our memory block

2002
02:12:14,600 --> 02:12:16,200
situation is kind of bizarre.

2003
02:12:16,200 --> 02:12:19,800
So something is not getting closed or something like this.

2004
02:12:20,100 --> 02:12:21,200
I'm not really sure.

2005
02:12:21,400 --> 02:12:23,200
We're going to have to take a little bit, look at it and I'm

2006
02:12:23,200 --> 02:12:23,700
intrigued.

2007
02:12:23,700 --> 02:12:24,800
So I'm going to go ahead and look

2008
02:12:26,600 --> 02:12:30,200
Turning on overflow checking, we should probably have something in

2009
02:12:30,200 --> 02:12:34,700
there to catch the fact that if we have a memory leak it will go

2010
02:12:34,700 --> 02:12:35,300
forever.

2011
02:12:35,600 --> 02:12:36,100
Right?

2012
02:12:36,700 --> 02:12:40,900
It'll just keep allocating memory from the system and because the

2013
02:12:40,900 --> 02:12:44,600
arena allocator is in there, it'll just sort of multiply ad infinitum.

2014
02:12:46,100 --> 02:12:49,100
Good news is we didn't seem to have any overflows but we definitely do

2015
02:12:49,100 --> 02:12:53,500
have something bizarre happening with the the memory allocation in the

2016
02:12:53,500 --> 02:12:56,200
same region, probably in the debug.

2017
02:12:56,900 --> 02:12:58,000
Stuff, right?

2018
02:12:59,300 --> 02:13:01,300
But yeah, I'm not sure who it is.

2019
02:13:01,300 --> 02:13:06,400
That's doing that, I'm not sure who is unmatched there, but we're

2020
02:13:06,400 --> 02:13:10,900
definitely having a thing where there's some kind of weird mismatch of

2021
02:13:10,900 --> 02:13:14,800
open and closed blocks or something, because we get this sort of weird

2022
02:13:15,700 --> 02:13:16,900
misalignment.

2023
02:13:18,600 --> 02:13:21,100
that we definitely see showing it up, even

2024
02:13:23,500 --> 02:13:25,300
you know, if we just run the program normally

2025
02:13:28,000 --> 02:13:29,500
In fact here you can see it.

2026
02:13:29,500 --> 02:13:32,300
It just keeps getting more and more.

2027
02:13:34,900 --> 02:13:38,200
Sort of like it just keeps allocating more and more and presumably,

2028
02:13:38,200 --> 02:13:40,400
that's inside the debug stuff.

2029
02:13:40,700 --> 02:13:45,700
But again, yeah, I have no idea who is who is responsible for that and

2030
02:13:45,700 --> 02:13:47,300
we don't know which

2031
02:13:49,700 --> 02:13:51,400
Elements are responsible.

2032
02:13:51,400 --> 02:13:55,200
This like we don't really have a good way at the moment of tracking

2033
02:13:55,500 --> 02:13:59,400
when something is, you know, opened and not closed or something else

2034
02:13:59,400 --> 02:14:00,400
similar like that.

2035
02:14:00,800 --> 02:14:03,100
So I'm not sure how to go about tracking that down at the moment.

2036
02:14:03,100 --> 02:14:08,600
We don't have really any tools for it like at all and and so that's

2037
02:14:08,600 --> 02:14:13,900
kind of a bummer that we don't have any really good way to deal with

2038
02:14:13,900 --> 02:14:14,400
that.

2039
02:14:30,700 --> 02:14:34,300
So let's start with some Basics stuff here.

2040
02:14:34,900 --> 02:14:38,200
Let's suppose that I turned back on clearing for the same region, just

2041
02:14:38,200 --> 02:14:40,000
temporarily to see if there's any change.

2042
02:14:44,400 --> 02:14:44,900
So,

2043
02:14:48,300 --> 02:14:51,400
Something about the Sim region itself.

2044
02:14:52,800 --> 02:14:55,700
There's something in here that we had to clear that we were not

2045
02:14:55,700 --> 02:14:57,900
clearing, right?

2046
02:15:00,100 --> 02:15:00,900
so,

2047
02:15:05,300 --> 02:15:12,900
either the hashes themselves or the hash occupancy is not getting

2048
02:15:12,900 --> 02:15:13,600
cleared.

2049
02:15:14,800 --> 02:15:19,200
sufficiently, but the hash occupancy would seem to have to

2050
02:15:21,100 --> 02:15:26,000
But we now know that not clearing this Sim region is not sufficient.

2051
02:15:26,000 --> 02:15:29,600
Like if we don't clear it we get memory.

2052
02:15:29,600 --> 02:15:33,000
Use that is unbounded and bad behavior.

2053
02:15:33,200 --> 02:15:35,200
If we do clear it we don't.

2054
02:15:35,700 --> 02:15:39,900
So the question is, why are we having that problem, right?

2055
02:15:40,100 --> 02:15:44,800
What is getting cleared in the same region that we actually care

2056
02:15:44,800 --> 02:15:45,400
about?

2057
02:15:45,600 --> 02:15:49,500
If we look through here, we initialize world, we initialize origin

2058
02:15:49,500 --> 02:15:50,000
bounds

2059
02:15:50,200 --> 02:15:52,900
Updatable bounds, The Entity counts, right?

2060
02:15:53,000 --> 02:15:56,700
All get set the brains Get Set Max frankamp.

2061
02:15:56,700 --> 02:15:59,800
Brain, count brains all these get set

2062
02:16:02,500 --> 02:16:07,700
So it's really just the pointers in the entity hashes that presumably

2063
02:16:07,700 --> 02:16:08,700
aren't getting cleared.

2064
02:16:08,900 --> 02:16:12,900
So I guess let's start by saying well okay is that really the case?

2065
02:16:13,100 --> 02:16:16,400
Is it just that we need to clear the stuff that's been The Entity hash

2066
02:16:16,400 --> 02:16:17,000
first.

2067
02:16:26,900 --> 02:16:30,700
So it's clear that we need to, we need to be able to actually clear

2068
02:16:30,700 --> 02:16:31,600
those things.

2069
02:16:31,800 --> 02:16:33,500
Why do they need to be cleared?

2070
02:16:34,200 --> 02:16:34,700
Right?

2071
02:16:34,700 --> 02:16:37,100
What is the point of throwing them?

2072
02:16:38,100 --> 02:16:41,600
And so the first thing to look at I guess is when does anyone actually

2073
02:16:41,600 --> 02:16:42,700
ever do anything else?

2074
02:16:44,200 --> 02:16:47,600
So if we call get entity by ID here, we get back to Centre.

2075
02:16:47,900 --> 02:16:51,200
I suppose the thing well I suppose this is probably it right?

2076
02:16:51,500 --> 02:16:56,000
When we say get entity by ID this is probably return.

2077
02:16:56,200 --> 02:16:59,200
earning an entry even like

2078
02:17:01,100 --> 02:17:04,500
that entry pointer might be an old pointer from a previous frame or

2079
02:17:04,500 --> 02:17:05,000
something.

2080
02:17:05,200 --> 02:17:08,500
If it hasn't been cleared out because we're not checking the occupancy

2081
02:17:08,500 --> 02:17:09,900
here, right?

2082
02:17:10,500 --> 02:17:13,500
When we do get, when we get the brain, we're always doing add or

2083
02:17:13,500 --> 02:17:16,100
create brain, that's actually looking at the occupancy.

2084
02:17:18,799 --> 02:17:21,799
Well, actually, no, even that's not looking at the occupancy.

2085
02:17:22,100 --> 02:17:26,400
So when we call that get hash by that, get hash from ID.

2086
02:17:29,000 --> 02:17:33,600
We're not actually checking to see whether that thing is occupied or

2087
02:17:33,600 --> 02:17:34,200
not.

2088
02:17:35,100 --> 02:17:37,299
You know, that just wasn't something that we were doing.

2089
02:17:39,100 --> 02:17:43,200
So, I suppose, what we could say there is well, when we actually go to

2090
02:17:43,200 --> 02:17:46,100
see if the thing is empty, we could clear it.

2091
02:17:46,200 --> 02:17:50,100
So we could say, like, you know, if this thing is empty, then result

2092
02:17:50,100 --> 02:17:56,900
equals entry and result pointer equals 0, right?

2093
02:17:58,400 --> 02:17:58,600
And then

2094
02:17:58,700 --> 02:17:59,900
then say else if

2095
02:18:01,600 --> 02:18:02,000
You know.

2096
02:18:06,500 --> 02:18:09,500
Storage value is actually valid so we could do it that way and

2097
02:18:09,500 --> 02:18:11,299
maintain our previous Behavior.

2098
02:18:11,400 --> 02:18:16,799
Meaning we clear when we encounter an empty version right?

2099
02:18:17,500 --> 02:18:18,400
If that makes sense.

2100
02:18:20,000 --> 02:18:21,000
We could do that.

2101
02:18:21,200 --> 02:18:24,100
I'm not sure if that's the smartest thing to do, but we could start

2102
02:18:24,299 --> 02:18:28,100
there and then next episode deal with it a little bit further.

2103
02:18:28,799 --> 02:18:29,200
So yeah.

2104
02:18:29,200 --> 02:18:32,900
So that's obviously just that was just sort of a stupid thing on our

2105
02:18:32,900 --> 02:18:33,500
part.

2106
02:18:33,799 --> 02:18:36,799
We probably should have realized that that wasn't going to be

2107
02:18:36,799 --> 02:18:39,700
sufficient because the way we're checking it but we can clean that up

2108
02:18:39,900 --> 02:18:41,200
pretty easily and then be fine.

2109
02:18:41,200 --> 02:18:41,700
I think.

2110
02:18:45,500 --> 02:18:46,299
All right.

2111
02:18:48,500 --> 02:18:52,900
So, you know, now we're at least not doing any of those clears anymore

2112
02:18:53,799 --> 02:18:56,500
and if we go ahead and run this here, let's take a quick look at the

2113
02:18:56,500 --> 02:18:57,100
profile.

2114
02:18:59,100 --> 02:19:04,000
So if we take a look at the profile here in debug mode, we can kind of

2115
02:19:04,000 --> 02:19:06,500
see that exactly what we want to have happening is happening.

2116
02:19:06,900 --> 02:19:09,900
Let's go ahead and switch to the to the debug.

2117
02:19:09,900 --> 02:19:11,600
I mean the optimized build.

2118
02:19:12,500 --> 02:19:13,100
There we go.

2119
02:19:16,299 --> 02:19:19,400
And if I run this guy and we take a look at our profile now and we

2120
02:19:19,400 --> 02:19:20,000
pause.

2121
02:19:21,799 --> 02:19:23,500
So now we're in a situation where?

2122
02:19:23,500 --> 02:19:23,799
Yeah.

2123
02:19:23,799 --> 02:19:24,200
Okay.

2124
02:19:24,200 --> 02:19:28,200
So at least that we moved like some of that stuff out the SIM Arina.

2125
02:19:28,200 --> 02:19:30,100
Alex probably should be lower still.

2126
02:19:33,200 --> 02:19:36,600
And we forced some of that clearing into identity to Hash.

2127
02:19:36,600 --> 02:19:40,400
So we kind of We There is work, we probably want to do to maybe make

2128
02:19:40,400 --> 02:19:42,700
this a little bit more efficient, but we've at least gotten it down to

2129
02:19:42,700 --> 02:19:45,900
the fact where now it's mostly just the entity copying probably.

2130
02:19:46,400 --> 02:19:47,600
That's really an issue.

2131
02:19:48,100 --> 02:19:50,100
And that's good for us, right?

2132
02:19:50,100 --> 02:19:51,900
That's a, that's that's what we want.

2133
02:19:52,900 --> 02:19:54,900
All right, so now I can go to some Q&A.

2134
02:20:18,100 --> 02:20:19,400
Is the stream down though?

2135
02:20:22,100 --> 02:20:24,200
It doesn't look like the stream is down.

2136
02:20:31,700 --> 02:20:34,500
It doesn't think the stream is down, but I guess that doesn't mean the

2137
02:20:34,500 --> 02:20:35,500
stream is actually down.

2138
02:20:45,500 --> 02:20:49,100
But I guess I don't really know any way of doing that.

2139
02:20:49,400 --> 02:20:52,700
I suppose people can't ask questions if they didn't get a chance to

2140
02:20:52,700 --> 02:20:53,700
actually see it.

2141
02:20:56,700 --> 02:20:57,500
But who knows?

2142
02:21:12,400 --> 02:21:16,400
Well I guess we will just wrap it up since the stream apparently.

2143
02:21:16,400 --> 02:21:19,700
When the memory thing went down I guess the stream on Twitch

2144
02:21:19,700 --> 02:21:22,600
permanently disconnected and there's not much I can really do about

2145
02:21:22,600 --> 02:21:22,800
that.

2146
02:21:22,800 --> 02:21:29,900
Unfortunately I don't think there's any way of sort of

2147
02:21:35,300 --> 02:21:36,400
Let's see if that works.

2148
02:21:42,600 --> 02:21:43,800
Maybe it will, or maybe it won't.

2149
02:21:55,700 --> 02:21:59,800
So it looks like what happened and I'm not sure why is OBS just

2150
02:21:59,800 --> 02:22:06,200
decided to stop streaming even though it was still going and didn't

2151
02:22:06,200 --> 02:22:07,400
drop any frames.

2152
02:22:07,800 --> 02:22:11,800
So I think maybe in a because of the fact that when you, when it's

2153
02:22:11,800 --> 02:22:14,000
under memory pressure, it just freaks out.

2154
02:22:14,100 --> 02:22:15,300
It may be just stop streaming.

2155
02:22:15,300 --> 02:22:16,100
I'm not sure.

2156
02:22:24,800 --> 02:22:26,900
But anyway, you guys will have to go.

2157
02:22:27,600 --> 02:22:33,600
I guess, watch the, the YouTube post to find out what happened.

2158
02:22:33,900 --> 02:22:35,800
I don't want to spoil the surprise.

2159
02:22:39,500 --> 02:22:42,000
But I'll still take questions on the first part.

2160
02:22:43,600 --> 02:22:44,500
Of the Stream.

2161
02:22:51,800 --> 02:22:53,400
And yes, I did fix the bug.

2162
02:22:55,800 --> 02:22:57,100
Sorry, we're all good now.

2163
02:23:45,800 --> 02:23:47,500
There's a to do in zero size.

2164
02:23:47,500 --> 02:23:48,800
I'm not sure if you noticed it.

2165
02:24:04,600 --> 02:24:05,200
There it is.

2166
02:24:07,800 --> 02:24:08,100
Yeah.

2167
02:24:08,100 --> 02:24:11,600
So I feel like we kind of did verify that this is the case, so we can

2168
02:24:11,600 --> 02:24:15,300
actually eliminate doubt, it does turn into a rep so that's good.

2169
02:24:23,800 --> 02:24:29,500
The bug was just that there was still people inside so I can show you

2170
02:24:29,500 --> 02:24:30,300
what the bug was.

2171
02:24:31,300 --> 02:24:34,100
So the bug was just that there are still people who were just using

2172
02:24:34,100 --> 02:24:37,100
the entity pointer to see whether or not there was anyone in the hash,

2173
02:24:37,100 --> 02:24:40,000
they'd get back a hash ID and they just feel our get back hash, and be

2174
02:24:40,000 --> 02:24:42,800
like, oh, there's a pointer that it must be valid, which is totally

2175
02:24:42,800 --> 02:24:43,400
not true.

2176
02:24:44,800 --> 02:24:48,600
So, what we, what I did is I just made it temporarily be that when you

2177
02:24:48,600 --> 02:24:49,700
do get hash,

2178
02:24:51,300 --> 02:24:57,700
From ID, it does do the clear when it returns someone to you so that

2179
02:24:57,700 --> 02:25:01,000
this will still work, but what I probably will want to do long-term is

2180
02:25:01,000 --> 02:25:05,400
make it so that this is a faster thing in general.

2181
02:25:05,400 --> 02:25:10,100
So that you just, you know, when it does get entity, by D, it returns

2182
02:25:11,000 --> 02:25:15,200
like get Hashem ID returns, like a Bool that says, whether it was

2183
02:25:15,200 --> 02:25:18,200
found or not, that makes sense.

2184
02:25:26,900 --> 02:25:29,100
We should have something built into the build script that won't let

2185
02:25:29,100 --> 02:25:29,700
you compile.

2186
02:25:29,700 --> 02:25:30,800
The stream has gone down.

2187
02:25:30,800 --> 02:25:32,600
Is this possible do in a batch script?

2188
02:25:35,100 --> 02:25:40,000
Yeah, I mean it's not possible to do in a batch script in the sense

2189
02:25:40,000 --> 02:25:47,400
that obviously there's no command in dose for that, but you could

2190
02:25:48,100 --> 02:25:53,600
create your own function, but your own executable that did that check,

2191
02:25:53,600 --> 02:25:55,200
and then call the executable from the batch.

2192
02:26:06,400 --> 02:26:08,900
I'm personally, I wouldn't spend any time on that because the number

2193
02:26:08,900 --> 02:26:13,500
of times the stream has gone down in 350 streams has been like three.

2194
02:26:14,200 --> 02:26:17,600
So spending any time trying to prevent that from happening, seems like

2195
02:26:17,600 --> 02:26:21,300
sort of a waste of time if that makes sense.

2196
02:27:17,100 --> 02:27:18,800
All right, looks like there's no question.

2197
02:27:18,800 --> 02:27:21,500
So I'm just going to leave a note here.

2198
02:27:25,900 --> 02:27:27,900
Which is like check.

2199
02:27:52,700 --> 02:27:54,700
So yeah.

2200
02:28:01,700 --> 02:28:02,500
I'm just max.

2201
02:28:02,600 --> 02:28:10,400
Is it an option to never clear 20 for Arenas and maybe only clear when

2202
02:28:10,400 --> 02:28:12,100
resetting temporary memory?

2203
02:28:15,900 --> 02:28:20,800
yeah, so what we could do for example, if we, if we wanted to sort of

2204
02:28:20,800 --> 02:28:27,100
make zero, clearing more of a like, first class citizen, we probably

2205
02:28:27,100 --> 02:28:28,900
could do something like

2206
02:28:32,100 --> 02:28:36,900
assume that everything in the arena is zero, because we know that the

2207
02:28:36,900 --> 02:28:40,100
first time we get stuff from Arena, it will be 0 because virtual Alec

2208
02:28:40,100 --> 02:28:41,500
will return 0 and pages.

2209
02:28:42,900 --> 02:28:47,800
And then whenever we get rid of a page if we recycle the page, we

2210
02:28:47,800 --> 02:28:51,300
clear it otherwise we just never clear.

2211
02:28:52,800 --> 02:28:54,800
Because we'd always know that anything we got was clear.

2212
02:29:03,000 --> 02:29:04,100
I mean you could do that.

2213
02:29:04,100 --> 02:29:06,100
I don't think that's a really necessarily a good way to go.

2214
02:29:06,100 --> 02:29:08,600
Just because like if you think about what happens let's suppose

2215
02:29:08,600 --> 02:29:11,000
sometimes you end up doing some, maybe you're doing some image

2216
02:29:11,000 --> 02:29:15,800
processing or something and then you allocate you know 8 megabytes on

2217
02:29:15,800 --> 02:29:18,500
an in an arena that you didn't need to be cleared.

2218
02:29:18,600 --> 02:29:22,000
Well now it's going to think it needed to clear that stuff, right?

2219
02:29:22,800 --> 02:29:28,800
So I think it usually is better to just like, have the Arena's do,

2220
02:29:28,800 --> 02:29:32,700
what they do, where they may be default to clear a

2221
02:29:32,800 --> 02:29:36,900
All To Not Claire doesn't matter but having the code that uses them

2222
02:29:36,900 --> 02:29:41,900
know and specify when it needs things cleared in when it doesn't.

2223
02:29:41,900 --> 02:29:44,900
And it just clear it at that time, I don't know that there's a lot you

2224
02:29:44,900 --> 02:29:47,400
can do beyond that in terms of making things.

2225
02:29:47,400 --> 02:29:48,100
Efficient

2226
02:29:52,700 --> 02:29:54,900
It's certainly something you could explore but I don't know that

2227
02:29:54,900 --> 02:29:57,200
there's a lot to, I don't know if there's a lot, you can do

2228
02:29:57,200 --> 02:29:58,000
systemically there.

2229
02:29:58,000 --> 02:29:59,700
I think you kind of need to know Tate.

2230
02:30:00,400 --> 02:30:01,600
Pretty much all the time.

2231
02:30:01,600 --> 02:30:03,600
What did you whether you want things, clear or not?

2232
02:30:05,200 --> 02:30:05,600
so,

2233
02:30:30,700 --> 02:30:33,700
and you know what else I should probably do before we sign off your

2234
02:30:33,700 --> 02:30:35,700
actually let me go ahead and

2235
02:30:37,900 --> 02:30:40,600
Closest town is.

2236
02:30:45,500 --> 02:30:51,800
Why did the little why did the little head like the window for the

2237
02:30:52,100 --> 02:30:53,200
webcam thing?

2238
02:30:53,900 --> 02:30:55,200
Why did that go away?

2239
02:30:56,300 --> 02:30:58,400
I'll be honest, I don't really know.

2240
02:31:00,400 --> 02:31:02,800
What determines that thing.

2241
02:31:07,600 --> 02:31:11,900
So that thing kind of down window this code is just kind of random so

2242
02:31:11,900 --> 02:31:15,000
I don't I don't really know very much about, I don't remember anything

2243
02:31:15,000 --> 02:31:15,800
about it works.

2244
02:31:26,400 --> 02:31:27,800
so, it looks like

2245
02:31:31,500 --> 02:31:37,000
In theory, anyway, the target window should only fade out when the

2246
02:31:37,000 --> 02:31:38,700
target is not active.

2247
02:31:45,600 --> 02:31:51,100
And the target acted, the, the target active should have been true.

2248
02:31:52,900 --> 02:31:56,600
So, I'm not sure why we were getting that like, the Fate.

2249
02:31:56,600 --> 02:31:58,700
It should have been calling this target.

2250
02:31:58,700 --> 02:32:01,700
Active shouldn't have been false until

2251
02:32:05,400 --> 02:32:09,900
Until this line was true, which is the QA h plus however long the

2252
02:32:09,900 --> 02:32:15,600
queue a minute, it minutes are until we went into that minute is when

2253
02:32:15,600 --> 02:32:19,100
it should have set to false and that, you know.

2254
02:32:20,500 --> 02:32:24,800
That should be two hours after start and it popped it up correctly.

2255
02:32:24,800 --> 02:32:27,500
So I don't really know what happened there.

2256
02:32:27,600 --> 02:32:29,700
I don't know, we'll have to see if it.

2257
02:32:32,700 --> 02:32:34,900
if it happens again, or if it's an anomaly,

2258
02:32:46,600 --> 02:32:49,500
Cuz I have noticed that it's happened occasionally before.

2259
02:32:52,000 --> 02:32:54,400
So yeah, I'll have to keep an eye on it.

2260
02:33:16,900 --> 02:33:20,800
SF Gartner, is there still a benefit to using the same region since

2261
02:33:20,800 --> 02:33:24,400
since chunks are as room-sized and simulation is room based why not

2262
02:33:24,400 --> 02:33:25,300
use chunks directly?

2263
02:33:25,500 --> 02:33:29,300
The answer is because chunks don't actually have the data in them you

2264
02:33:29,300 --> 02:33:30,400
need for stimulation.

2265
02:33:30,800 --> 02:33:37,600
So the reason that we have the same region has nothing to do with the

2266
02:33:38,200 --> 02:33:42,000
with the spatial aspect of what's being simulated.

2267
02:33:42,200 --> 02:33:45,900
It's because we need to put everything into a single

2268
02:33:46,800 --> 02:33:51,900
A single coordinate system for simulation and because we want the

2269
02:33:51,900 --> 02:33:55,400
ability to compress our entity storage when entities get very large

2270
02:33:55,400 --> 02:33:58,900
when the set of things that can be true about any of these gets large,

2271
02:33:58,900 --> 02:33:59,600
right?

2272
02:33:59,600 --> 02:34:10,300
So the fact that we are aligned to rooms and the chunks are room size.

2273
02:34:10,300 --> 02:34:14,300
Doesn't really like the size of the chunks has no bearing on whether

2274
02:34:14,300 --> 02:34:16,000
the same regions necessary or not.

2275
02:34:16,000 --> 02:34:16,700
Might be the way to

2276
02:34:16,900 --> 02:34:24,000
It because the world structure is just there to to stream entities in

2277
02:34:24,000 --> 02:34:26,100
and out and it can store them.

2278
02:34:26,100 --> 02:34:28,400
However, it wants chunks size.

2279
02:34:28,400 --> 02:34:31,000
They could they could even not be chunked, it just needs a way of

2280
02:34:31,000 --> 02:34:33,800
saying, hey, here's a region of space.

2281
02:34:33,800 --> 02:34:36,900
I need to pull all the entities out and put them into a single

2282
02:34:36,900 --> 02:34:38,500
coordinate system for simulation.

2283
02:34:39,300 --> 02:34:41,000
So, that's what the Sim Regents for.

2284
02:34:42,000 --> 02:34:45,300
And furthermore, that decompression step right now is just a copy

2285
02:34:45,300 --> 02:34:46,700
because we don't want to bother with

2286
02:34:46,800 --> 02:34:47,900
with it until we're ready.

2287
02:34:49,100 --> 02:34:56,700
But further down the line that's going to be a actual significant

2288
02:34:56,700 --> 02:34:57,400
operation.

2289
02:34:57,700 --> 02:35:01,200
Meaning, we're going to have these fairly large entity structures, you

2290
02:35:01,200 --> 02:35:03,400
know, 4K / entity, or something like that.

2291
02:35:03,700 --> 02:35:08,200
And we're only going to be storing out, you know, a tenth of that or

2292
02:35:08,200 --> 02:35:13,200
something as the actual information for an entity and so that that

2293
02:35:13,200 --> 02:35:15,300
step is going to be important as well.

2294
02:35:16,000 --> 02:35:16,600
So there is

2295
02:35:16,800 --> 02:35:19,700
We're going to really be any way to simulate things inside the

2296
02:35:19,700 --> 02:35:24,100
compressed chunk version and so we don't want to structure the code

2297
02:35:24,100 --> 02:35:25,100
around doing that.

2298
02:35:25,100 --> 02:35:26,100
We always want to do.

2299
02:35:26,100 --> 02:35:29,600
Like a pullout Sim put back.

2300
02:35:52,400 --> 02:35:54,100
All right, I don't know why.

2301
02:35:54,100 --> 02:35:54,900
This is up.

2302
02:35:55,400 --> 02:35:56,000
There we go.

2303
02:35:56,100 --> 02:35:57,000
I'm going to wrap it up.

2304
02:35:57,000 --> 02:35:58,200
Thank you everyone for joining me.

2305
02:35:58,200 --> 02:35:59,500
For another episode of handmade here.

2306
02:35:59,500 --> 02:35:59,800
It's going to

2307
02:36:00,000 --> 02:36:00,800
Recruiting with you.

2308
02:36:00,800 --> 02:36:04,200
As always, if you would like to follow along series at home, you can

2309
02:36:04,200 --> 02:36:06,000
always pre-order the game on handmade hero dot-org.

2310
02:36:06,700 --> 02:36:11,100
It is the easiest way to get, like the source code and play around

2311
02:36:11,100 --> 02:36:11,600
with it.

2312
02:36:12,700 --> 02:36:14,800
We also have a forum site, you can go to.

2313
02:36:14,800 --> 02:36:18,400
If you want to ask questions a patreon page, want support our video

2314
02:36:18,400 --> 02:36:21,300
series, a schedule bot the tweets, the schedule that you.

2315
02:36:21,300 --> 02:36:23,600
So if you want to know when we're going to be live, that's the way to

2316
02:36:23,600 --> 02:36:27,600
do it and we have an episode guide, if you want to catch up on past

2317
02:36:27,600 --> 02:36:29,800
episodes, that's about

2318
02:36:30,000 --> 02:36:31,600
It for today.

2319
02:36:31,600 --> 02:36:35,400
I will be, it'll probably be two weeks till the next time a hero,

2320
02:36:35,400 --> 02:36:38,100
because next week is handmade calm.

2321
02:36:39,100 --> 02:36:42,800
So, if you haven't already gotten your tickets to handmade con, there

2322
02:36:42,800 --> 02:36:46,600
are a few left but really it's probably too late if you're not in

2323
02:36:46,600 --> 02:36:50,900
Seattle because you'd have to buy a plane ticket I guess.

2324
02:36:53,000 --> 02:36:57,700
But I think there still are about 15 tickets left remaining to

2325
02:36:57,700 --> 02:36:59,900
handmade Khan and so if you do

2326
02:37:00,000 --> 02:37:04,200
Want a last-minute ticket, you can get one, I don't suspect, you will

2327
02:37:04,200 --> 02:37:08,400
sell out because like I said, I think almost everyone who was planning

2328
02:37:08,400 --> 02:37:12,100
to come probably had to plan ahead of time to get one, but that's this

2329
02:37:12,100 --> 02:37:13,000
coming weekend.

2330
02:37:13,200 --> 02:37:15,500
So definitely check that out.

2331
02:37:15,800 --> 02:37:18,900
And and hopefully, I'll see a lot of you folks.

2332
02:37:18,900 --> 02:37:25,000
There will then be back the following weekend with the next actual

2333
02:37:25,000 --> 02:37:29,300
episodes of handmade hero until then have fun programming everyone.

2334
02:37:29,300 --> 02:37:29,800
And I will see

2335
02:37:29,900 --> 02:37:31,000
see you on the internet.

2336
02:37:31,000 --> 02:37:31,600
Take it easy.

