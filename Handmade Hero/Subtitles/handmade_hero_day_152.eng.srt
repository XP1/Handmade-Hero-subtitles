1
00:00:03,600 --> 00:00:05,900
Hello everyone and welcome to handmade hero.

2
00:00:06,000 --> 00:00:09,700
This is the show where we CO2 complete gain live on stream on Twitch.

3
00:00:10,000 --> 00:00:11,600
We don't use any engines or libraries.

4
00:00:11,600 --> 00:00:15,200
We are actually in the process of creating an entire game from scratch

5
00:00:15,200 --> 00:00:18,400
so that you can see the entire development process and know

6
00:00:18,400 --> 00:00:19,100
absolutely.

7
00:00:19,100 --> 00:00:23,600
Every last piece of code that goes into making a game run from the

8
00:00:23,600 --> 00:00:27,400
engine up to the gameplay and everything in between.

9
00:00:27,900 --> 00:00:31,500
Now, right now, we're in the middle of finishing up a change to the

10
00:00:31,500 --> 00:00:32,700
way that we're doing assets.

11
00:00:32,900 --> 00:00:36,200
He had some preliminary stuff in there that would just load assets off

12
00:00:36,200 --> 00:00:38,500
of disk from BMP and wav files.

13
00:00:38,900 --> 00:00:43,900
But now we've kind of made things a lot more Consolidated and we have

14
00:00:43,900 --> 00:00:47,500
a way of building our own asset pack files, which can be easily

15
00:00:48,000 --> 00:00:51,000
transmitted stored, sent traded anything else that you might want to

16
00:00:51,000 --> 00:00:56,200
do with them and those asset files contain all of the data necessary

17
00:00:56,200 --> 00:00:57,600
to run the game.

18
00:00:57,600 --> 00:01:00,100
And in fact, you could have multiple asset files, it would merge the

19
00:01:00,100 --> 00:01:02,600
assets together and stuff like this, and the ass.

20
00:01:02,800 --> 00:01:05,700
The file itself contains all the bitmap data, all the wave data, all

21
00:01:05,700 --> 00:01:08,600
of the metadata, that's required to know what those things are and all

22
00:01:08,600 --> 00:01:10,200
sorts of other good stuff like that.

23
00:01:10,400 --> 00:01:15,000
So that is what we have already done actually and really all we're

24
00:01:15,000 --> 00:01:19,600
doing now is converting it so that our asset streaming system runs on

25
00:01:19,600 --> 00:01:24,100
top of that instead of ever accessing the BMP and wav files directly.

26
00:01:24,100 --> 00:01:28,000
We already did the port to it, but we loaded the whole file at once.

27
00:01:28,000 --> 00:01:32,200
So what we're doing now is we're just kind of cleaning up the platform

28
00:01:32,200 --> 00:01:32,700
epi

29
00:01:32,800 --> 00:01:38,300
My things so that we can get that data asynchronously from the

30
00:01:38,300 --> 00:01:40,800
operating system and not have to load the whole file startup.

31
00:01:43,100 --> 00:01:44,000
That's what we're doing.

32
00:01:45,800 --> 00:01:47,400
And that is what we are going to do today.

33
00:01:47,400 --> 00:01:50,600
So if you would like to follow along at home and you have pre-ordered

34
00:01:50,600 --> 00:01:54,500
the game on handmade hero dot org today is day, 1, 52.

35
00:01:54,500 --> 00:01:59,900
And so if you want to unpack day, 150 ones source code into a

36
00:01:59,900 --> 00:02:03,600
directory, that is what we would be programming on today.

37
00:02:03,800 --> 00:02:06,000
So please go ahead and do that.

38
00:02:06,000 --> 00:02:09,199
If you would like to follow along, if you would not like to follow

39
00:02:09,199 --> 00:02:11,100
along that you just don't have to worry about that.

40
00:02:11,800 --> 00:02:12,800
All right, so here we go.

41
00:02:14,500 --> 00:02:15,900
Where did we leave things?

42
00:02:16,600 --> 00:02:21,700
Well if you remember, we left things where we had almost finished,

43
00:02:21,700 --> 00:02:25,200
porting everything over but there were a couple last little things I

44
00:02:25,200 --> 00:02:26,600
wanted to do first.

45
00:02:26,600 --> 00:02:31,200
So what I wanted to do was get rid of this old sort of notion that we

46
00:02:31,200 --> 00:02:32,800
had to do what we were loading.

47
00:02:33,000 --> 00:02:36,500
Because what I sort of pointed out was that the only reason we

48
00:02:36,500 --> 00:02:39,200
previously had to have two different paths for whether we were loading

49
00:02:39,200 --> 00:02:43,500
a bitmap or a WAV file out of in our previous asset system was

50
00:02:43,600 --> 00:02:46,600
cuz we actually got data from those files like the dimensions of the

51
00:02:46,600 --> 00:02:49,300
bitmap or the number of samples from the WAV file.

52
00:02:49,500 --> 00:02:51,800
And so we had to have two different paths because we had to actually

53
00:02:51,800 --> 00:02:52,900
know what we were working with.

54
00:02:53,000 --> 00:02:55,700
Now that we've moved to the asset file, all of that metadata has been

55
00:02:55,700 --> 00:02:58,800
pulled out into an upper level that we've already loaded.

56
00:02:58,800 --> 00:02:59,800
So, really, when we go,

57
00:03:00,000 --> 00:03:03,100
Get data, we really don't have to do anything.

58
00:03:03,200 --> 00:03:07,000
We already know exactly what's going to be the layout of the data and

59
00:03:07,000 --> 00:03:09,600
everything is perfectly set in place for us.

60
00:03:10,400 --> 00:03:14,800
So what we can do instead is just use a single piece of code that just

61
00:03:14,800 --> 00:03:16,700
loads bits off the drive, basically.

62
00:03:16,900 --> 00:03:19,800
And all we have to do is when we know we need the bitmap, it's or we

63
00:03:19,800 --> 00:03:22,700
know, we need the Sound Table, B just issue the same kind of a

64
00:03:22,700 --> 00:03:23,400
synchronous load.

65
00:03:23,400 --> 00:03:25,500
Either case to say here's the range of B.

66
00:03:25,600 --> 00:03:28,600
Here's where I want you to put them in memory and that's it, right?

67
00:03:28,600 --> 00:03:29,900
We don't actually need

68
00:03:30,000 --> 00:03:32,900
Need anything else from that system?

69
00:03:34,900 --> 00:03:38,600
So I already did that for the bitmap loading code, right?

70
00:03:38,600 --> 00:03:43,300
It's this stuff right here and I already if zeroed that out.

71
00:03:43,300 --> 00:03:46,600
So we're just running off of this sort of load asset.

72
00:03:46,700 --> 00:03:48,600
The standard load asset work stuff, right?

73
00:03:48,600 --> 00:03:50,900
So we already finished this in fast, we can just get rid of this.

74
00:03:50,900 --> 00:03:53,800
I don't think we need it anymore for anything, so we already got rid

75
00:03:53,800 --> 00:03:56,900
of that and we transition bitmaps to using this load asset work but we

76
00:03:56,900 --> 00:04:01,500
haven't done yet is we haven't gone and done the same thing for audio.

77
00:04:01,500 --> 00:04:03,200
So what I'd like to do is do the same thing for

78
00:04:03,300 --> 00:04:06,000
Audio, get rid of this load sound work thing, right?

79
00:04:06,000 --> 00:04:10,300
Just get rid of that and get rid of load sound work the function as

80
00:04:10,300 --> 00:04:11,500
well, right?

81
00:04:11,500 --> 00:04:15,500
So that load sound will work precisely the same way that load bitmap

82
00:04:15,500 --> 00:04:18,600
Works where it sets up what it needs first.

83
00:04:18,899 --> 00:04:22,200
And then it just goes ahead and issues the load for the data and waits

84
00:04:22,200 --> 00:04:23,100
for that to arrive.

85
00:04:23,500 --> 00:04:27,700
Okay, so in load sound work, what were we doing?

86
00:04:27,700 --> 00:04:30,600
Well, we were setting up like the sample count and the channel count

87
00:04:30,600 --> 00:04:31,700
and these sorts of things.

88
00:04:31,900 --> 00:04:33,100
Again, I don't know that we need.

89
00:04:33,200 --> 00:04:33,800
Need that.

90
00:04:34,200 --> 00:04:36,600
Oh, well, I guess we do because we have that loaded sound.

91
00:04:36,600 --> 00:04:41,100
We have this thing, so we have to copy those out of the HHA asset into

92
00:04:41,100 --> 00:04:41,400
here.

93
00:04:41,400 --> 00:04:44,000
Now, I do wonder why we bother copying these things out.

94
00:04:44,000 --> 00:04:46,400
It kind of seems like, maybe we could just use them directly most the

95
00:04:46,400 --> 00:04:48,000
time, but maybe that's not true.

96
00:04:48,100 --> 00:04:50,200
We can cross that bridge when we come to, it certainly, it doesn't

97
00:04:50,200 --> 00:04:51,300
really hurt to copy anything out.

98
00:04:51,300 --> 00:04:53,500
So either way, not really a big deal.

99
00:04:54,100 --> 00:04:57,300
So anyway, what we need to do first is we need to take a look at that

100
00:04:57,300 --> 00:04:59,400
load bitmap function I guess.

101
00:05:00,000 --> 00:05:02,300
And see all the stuff that it does, because we're going to want to do,

102
00:05:02,600 --> 00:05:03,100
basically the

103
00:05:03,300 --> 00:05:05,300
Same stuff that it does, right?

104
00:05:05,300 --> 00:05:06,500
We're going to want to do this.

105
00:05:06,800 --> 00:05:10,800
So in here, right, where we do this, this loud sound work.

106
00:05:10,800 --> 00:05:14,000
Push, we're going to need this to turn into a load asset work push.

107
00:05:14,000 --> 00:05:15,800
And so what's the stuff that stays the same?

108
00:05:15,900 --> 00:05:16,200
Oops.

109
00:05:16,200 --> 00:05:19,600
That's was a bit of a speedy jump there too fast for me.

110
00:05:20,400 --> 00:05:23,200
So when we push one of these load assets, things on the task is the

111
00:05:23,200 --> 00:05:24,000
same thing, right?

112
00:05:24,000 --> 00:05:25,600
Nothing changes there at the assets.

113
00:05:25,600 --> 00:05:26,600
Lots, it doesn't matter.

114
00:05:26,600 --> 00:05:29,900
Whether it's a sound a bit map, slot slot, still the same the file

115
00:05:29,900 --> 00:05:33,100
handle again is 0 just because we haven't done that work.

116
00:05:33,200 --> 00:05:34,800
Yet of actually doing the file load stuff.

117
00:05:34,800 --> 00:05:36,700
So we're going to have to if that's like the platform looking stuff.

118
00:05:36,700 --> 00:05:41,300
We're going to be focusing on after we finish this the offset again.

119
00:05:41,500 --> 00:05:42,200
No difference here.

120
00:05:42,200 --> 00:05:44,800
It's just going to be whatever the asset says it's offset.

121
00:05:44,800 --> 00:05:46,500
Is the memory size will compute.

122
00:05:46,500 --> 00:05:51,000
And second destination is going to be steps, the sound sample data,

123
00:05:51,200 --> 00:05:51,800
right?

124
00:05:52,100 --> 00:05:56,100
So, that's going to be the we can even introduce a sound memory thing

125
00:05:56,100 --> 00:05:56,200
here.

126
00:05:56,200 --> 00:05:59,600
If we wanted to the final state is going to be asset loaded just like

127
00:05:59,600 --> 00:05:59,800
before.

128
00:06:00,400 --> 00:06:04,100
And then though the slot that we actually have here, right?

129
00:06:04,300 --> 00:06:07,200
We're going to want to do that slot sound equals sound sort of a thing

130
00:06:07,200 --> 00:06:10,100
where we kind of say alright and that point so that you're pointing to

131
00:06:10,100 --> 00:06:14,200
the correct thing and we already fixed this stuff here.

132
00:06:14,200 --> 00:06:16,800
When we when we did get bitmap, we already fixed.

133
00:06:16,800 --> 00:06:20,300
Get sound to check to see whether or not the asset state was loaded

134
00:06:20,300 --> 00:06:22,300
and if it was then go ahead and do it.

135
00:06:22,400 --> 00:06:24,800
Now, one thing that I should mention here actually, I think this is

136
00:06:24,800 --> 00:06:29,000
probably something we should do now that I think about it because we

137
00:06:29,000 --> 00:06:29,800
kind of cheese to this.

138
00:06:30,000 --> 00:06:33,000
It's a little cheesy and so I want to go ahead and uncheck use this

139
00:06:33,000 --> 00:06:37,400
just slightly which is to say that really what we wanted to do was

140
00:06:37,400 --> 00:06:40,500
probably something more like this because I did it with a ternary

141
00:06:40,500 --> 00:06:44,100
operator, which is obviously more expedient but the problem of the

142
00:06:44,100 --> 00:06:48,700
ternary operator is really we need to put in a thing here which is

143
00:06:48,700 --> 00:06:51,600
that we want to complete previous reads before future reads here.

144
00:06:51,600 --> 00:06:52,300
Right?

145
00:06:52,300 --> 00:06:55,800
Because what could happen is the compiler could have moved this thing.

146
00:06:55,800 --> 00:06:57,600
The compiler could move this.

147
00:06:57,600 --> 00:06:59,900
Read up above this check and

148
00:07:00,000 --> 00:07:03,800
And we would have an incorrect data situation, right?

149
00:07:05,200 --> 00:07:06,500
So we don't really want that to happen.

150
00:07:09,800 --> 00:07:11,600
We want to make sure it reads this thing first.

151
00:07:11,700 --> 00:07:12,900
So that there's no possibility that.

152
00:07:12,900 --> 00:07:16,200
This thing got red before it was completed, right?

153
00:07:16,800 --> 00:07:19,500
And again, don't know that I have to think about that for a second to

154
00:07:19,500 --> 00:07:22,900
determine whether I thought that was ever actually a possibility on an

155
00:07:22,900 --> 00:07:23,900
Intel chip.

156
00:07:24,100 --> 00:07:27,800
But remember, we won't necessarily only be working on Intel chips.

157
00:07:28,100 --> 00:07:32,500
If we do Port this game eventually to something like Raspberry Pi or,

158
00:07:32,500 --> 00:07:36,800
you know, any kind of like an Android device or something, that we're

159
00:07:36,800 --> 00:07:39,400
going to be probably looking at an ARM device and armed.

160
00:07:39,600 --> 00:07:42,800
Isis are potentially going to have something else, who knows?

161
00:07:42,900 --> 00:07:44,500
Although I think they have strong memory writing as well.

162
00:07:44,500 --> 00:07:47,800
So again, don't really know that we care about this, but I should

163
00:07:47,800 --> 00:07:50,900
write it that way just in case because it doesn't incur any of a speed

164
00:07:50,900 --> 00:07:54,700
difference here and this can just compile away to nothing if that

165
00:07:54,700 --> 00:07:56,400
turns out to be necessary.

166
00:07:56,400 --> 00:07:57,200
So that's fine.

167
00:07:57,600 --> 00:08:00,000
Now, I'm going to go ahead and take a look and make sure that we

168
00:08:00,000 --> 00:08:02,700
actually have one of those cause I don't think we do at the moment.

169
00:08:03,000 --> 00:08:03,300
Yeah.

170
00:08:03,300 --> 00:08:08,800
So, basically, compute previous reads before future reads would be a

171
00:08:08,800 --> 00:08:09,400
read barrier.

172
00:08:09,500 --> 00:08:10,100
We're here.

173
00:08:10,600 --> 00:08:14,700
I don't actually know what that would be on on llvm.

174
00:08:15,000 --> 00:08:19,700
So I feel like I'm going to put it to do here and say not sure.

175
00:08:19,800 --> 00:08:21,600
I guess I can get rid of that.

176
00:08:26,000 --> 00:08:30,300
Yeah, to do other compilers.

177
00:08:33,400 --> 00:08:35,100
So yeah, I don't really know.

178
00:08:36,700 --> 00:08:40,400
This is a full memory barrier and so I'm just gonna go ahead and put

179
00:08:40,400 --> 00:08:48,600
that in here, but I'm going to say, you know, does llvm have real read

180
00:08:48,700 --> 00:08:51,700
specific barriers yet?

181
00:08:52,200 --> 00:08:52,700
I don't know.

182
00:08:53,300 --> 00:08:58,600
So, somebody who works on llvm more often than I do, you know, could

183
00:08:58,600 --> 00:08:59,800
could go ahead and tell us

184
00:09:00,000 --> 00:09:03,500
If they've added something that would allow us to specify, hey this is

185
00:09:03,500 --> 00:09:04,400
a reed barrier.

186
00:09:04,600 --> 00:09:06,200
Not a right barrier guys.

187
00:09:07,400 --> 00:09:07,900
Okay.

188
00:09:08,000 --> 00:09:11,100
So yeah, that's all I wanted to check their I just want to make sure I

189
00:09:11,100 --> 00:09:13,300
think that's a more reasonable thing to do because remember this is an

190
00:09:13,300 --> 00:09:14,100
inline function.

191
00:09:14,100 --> 00:09:17,200
So this could get this code could get slotted into something and get

192
00:09:17,200 --> 00:09:20,500
rearranged all over the place and we really don't we really want to

193
00:09:20,500 --> 00:09:24,000
make sure that the compiler isn't going to do anything speculative

194
00:09:24,000 --> 00:09:24,400
ever.

195
00:09:24,800 --> 00:09:28,100
I don't know that it really could, but since we're not checking the

196
00:09:28,100 --> 00:09:29,400
value of slot,

197
00:09:30,800 --> 00:09:33,400
I feel like it couldn't because doing that access it.

198
00:09:33,400 --> 00:09:36,200
What if this was sort of saying whether slot was valid but it's

199
00:09:36,200 --> 00:09:37,400
accessing office lat.

200
00:09:37,600 --> 00:09:41,700
I don't know, like I said, kind of crazy but I feel like it just it's

201
00:09:41,700 --> 00:09:45,200
safer to write things the the real way that you intend them to be and

202
00:09:45,200 --> 00:09:48,400
put in the barriers when you actually think there is a barrier because

203
00:09:48,400 --> 00:09:50,400
it really can't hurt in that case, right?

204
00:09:51,300 --> 00:09:51,600
All right.

205
00:09:51,600 --> 00:09:55,200
So back to our main back, to our main event here.

206
00:09:55,700 --> 00:09:59,800
Let's go back to getting our load, our loads now

207
00:10:00,000 --> 00:10:00,300
Working.

208
00:10:00,900 --> 00:10:03,400
So what I want to do is I want to do is essentially the exact same

209
00:10:03,400 --> 00:10:07,400
stuff here, where I'm going to pull out the info in, you know, and I'm

210
00:10:07,400 --> 00:10:09,900
going to pull out the sound stuff like so.

211
00:10:10,200 --> 00:10:13,000
And so that we coming here, all of this stuff will work properly.

212
00:10:13,100 --> 00:10:15,400
I'm gonna get rid of all of this, right?

213
00:10:16,000 --> 00:10:18,700
But I'm going to go ahead and add this push struct here.

214
00:10:18,800 --> 00:10:20,200
I'm gonna keep that.

215
00:10:20,200 --> 00:10:23,600
Where I go ahead and say, all right, my loaded sound.

216
00:10:24,700 --> 00:10:25,800
Is going to be a new sound.

217
00:10:25,800 --> 00:10:29,200
I'm going to do a push truck tan to the memory arena there for that,

218
00:10:29,700 --> 00:10:32,700
and that sound is going to be what we set up here.

219
00:10:32,900 --> 00:10:36,900
So I've got to initialize it to point to things that make some sense,

220
00:10:37,100 --> 00:10:37,300
right?

221
00:10:37,300 --> 00:10:40,600
And I also have to do like this computation here right?

222
00:10:40,600 --> 00:10:43,800
Where I compute the memory size that it's going to take, right?

223
00:10:43,900 --> 00:10:47,700
And then, when I actually do this stuff here again, I'm going to use

224
00:10:47,700 --> 00:10:48,700
the exact same thing.

225
00:10:48,800 --> 00:10:51,600
So now we're completely symmetric pretty much in how we're doing

226
00:10:51,600 --> 00:10:53,900
everything I can get rid of that, because that's the same.

227
00:10:55,200 --> 00:10:57,100
And that's that's really about it.

228
00:10:57,200 --> 00:10:58,100
I think right?

229
00:10:58,200 --> 00:11:00,800
I don't know why I'm not 100% certain.

230
00:11:01,300 --> 00:11:01,600
Why?

231
00:11:01,600 --> 00:11:03,100
This is down here.

232
00:11:03,100 --> 00:11:09,100
Oh, I know why this is, this is basically, this is, you know, remove

233
00:11:09,100 --> 00:11:09,700
this.

234
00:11:09,700 --> 00:11:15,700
As soon as we actually load things, this is our little like, hey,

235
00:11:15,700 --> 00:11:17,700
right now we're just letting the whole file start up to make sure

236
00:11:17,700 --> 00:11:18,800
things are working properly.

237
00:11:19,300 --> 00:11:22,000
So that's going to be the same thing here, where we're going to have

238
00:11:22,000 --> 00:11:24,000
to sort of oops.

239
00:11:24,700 --> 00:11:27,000
Sort of make that work out.

240
00:11:27,000 --> 00:11:27,500
Right.

241
00:11:28,100 --> 00:11:32,800
So okay, so let's put that though.

242
00:11:32,800 --> 00:11:35,800
I kind of want to put that up here, I think probably and I'm going to

243
00:11:35,800 --> 00:11:38,000
kind of put that up here as well.

244
00:11:39,100 --> 00:11:41,300
Yeah, that looks a little bit better to me because of what we're going

245
00:11:41,300 --> 00:11:41,900
to do in a second.

246
00:11:42,700 --> 00:11:43,100
Okay.

247
00:11:43,400 --> 00:11:45,100
So I think most of that's good.

248
00:11:45,100 --> 00:11:48,400
We just have to start thinking about the sound now to get the sound

249
00:11:48,400 --> 00:11:49,200
stuff, right?

250
00:11:49,200 --> 00:11:50,500
And here's the loaded sound thing.

251
00:11:50,500 --> 00:11:53,000
So some of its pretty obvious what we would do, right?

252
00:11:53,100 --> 00:11:54,400
The sample count is

253
00:11:54,500 --> 00:11:56,100
Going to come out of that info structure.

254
00:11:56,100 --> 00:11:57,000
There's really nothing.

255
00:11:57,000 --> 00:11:58,400
Interesting that's going to happen there.

256
00:11:58,400 --> 00:11:59,700
The channel count is going to do it.

257
00:11:59,700 --> 00:11:59,900
Exactly.

258
00:12:00,000 --> 00:12:00,700
Same thing.

259
00:12:01,500 --> 00:12:05,200
And then what we're going to do is we're going to Loop over those

260
00:12:05,200 --> 00:12:10,000
channels and we're going to make sure that those channels are point.

261
00:12:10,000 --> 00:12:13,200
You know, that the sample pointers Point into the right location in

262
00:12:13,200 --> 00:12:15,100
memory for once we load it in.

263
00:12:15,700 --> 00:12:17,400
So the first thing we want to do again.

264
00:12:17,700 --> 00:12:18,800
So I just got to rearrange this here.

265
00:12:18,800 --> 00:12:21,000
The first thing you want to do is figure out how much memory were

266
00:12:21,000 --> 00:12:23,200
actually in a need for everything, right?

267
00:12:23,700 --> 00:12:25,600
And so, we're going to want that channel count.

268
00:12:26,000 --> 00:12:29,000
We're going to take the channel count, we're going to multiply it by

269
00:12:29,000 --> 00:12:29,900
the number of

270
00:12:30,000 --> 00:12:33,300
of samples because we know we have the same number of samples in each

271
00:12:33,300 --> 00:12:36,400
Channel and then we're going to multiply it by the size of a sample.

272
00:12:37,600 --> 00:12:38,600
That's a total memory.

273
00:12:38,600 --> 00:12:39,500
We would need right.

274
00:12:39,500 --> 00:12:44,600
Channels, time samples times that in 16, right times, that the size of

275
00:12:44,600 --> 00:12:45,100
the sample,

276
00:12:48,400 --> 00:12:48,800
Okay.

277
00:12:50,000 --> 00:12:52,600
And since we load on a line from this thing, I don't think there's

278
00:12:52,600 --> 00:12:54,900
actually even anything we need to do alignment wise, although, you

279
00:12:54,900 --> 00:12:56,900
know, if we were going to start doing fancy things with alignment,

280
00:12:56,900 --> 00:12:58,100
they would start doing them here.

281
00:12:58,500 --> 00:12:59,000
Right?

282
00:12:59,800 --> 00:13:02,300
So, that's the memory size that we actually need, which means that the

283
00:13:02,300 --> 00:13:07,400
sound memory, that we're going to want, is going to be allocated here.

284
00:13:07,600 --> 00:13:10,100
So, I'm going to want that, that push sighs.

285
00:13:10,100 --> 00:13:11,500
They're going to allocate the sound memory.

286
00:13:11,900 --> 00:13:15,300
Again, this is kind of just mirroring, exactly what was happening.

287
00:13:16,100 --> 00:13:20,300
In load bitmap where we do the push size here to get it out of that

288
00:13:20,300 --> 00:13:21,500
that assets Arena, right?

289
00:13:21,500 --> 00:13:24,800
So we're just providing space for ourselves right?

290
00:13:25,800 --> 00:13:30,700
And then what we're going to do is right after that because we're not

291
00:13:30,700 --> 00:13:31,700
really going to use it.

292
00:13:32,300 --> 00:13:35,200
We're going to go ahead and well you know what I could do?

293
00:13:35,200 --> 00:13:36,600
Even I could just copy.

294
00:13:36,700 --> 00:13:39,400
I could just straight-up copy this as well, right?

295
00:13:39,500 --> 00:13:44,000
I could say oh okay, copy into sound memory, right?

296
00:13:44,400 --> 00:13:45,700
Whatever the contents were here.

297
00:13:46,500 --> 00:13:50,700
So I could I could actually make it exist in the right place in memory

298
00:13:50,700 --> 00:13:54,100
to by just copying it out of the asset file and into the sound memory

299
00:13:54,100 --> 00:13:54,500
location.

300
00:13:54,500 --> 00:14:00,800
Now, I don't remember if we ever actually made a copy function I don't

301
00:14:00,800 --> 00:14:02,200
know that we ever actually did.

302
00:14:02,200 --> 00:14:06,800
We made a zero function right but we never made a copy function out,

303
00:14:06,800 --> 00:14:11,100
think so like mem copy we don't actually have I don't I don't think

304
00:14:11,300 --> 00:14:12,900
any way I could be wrong.

305
00:14:17,300 --> 00:14:21,100
But I am not wrong, we just don't have one.

306
00:14:21,400 --> 00:14:24,000
So if we wanted a simple copy function, again, probably not something

307
00:14:24,000 --> 00:14:27,900
that we're going to use in practice very much.

308
00:14:28,400 --> 00:14:31,700
But, you know, if we want to have one, it's pretty straightforward,

309
00:14:31,800 --> 00:14:32,100
right?

310
00:14:32,100 --> 00:14:35,800
We just have to have something for a memory index.

311
00:14:36,300 --> 00:14:38,700
That's going to be the size to copy, right?

312
00:14:38,700 --> 00:14:42,300
Then we need like a source and a desk like so.

313
00:14:42,900 --> 00:14:47,000
And then we would just do something like the source I probably.

314
00:14:47,200 --> 00:14:51,200
Do it like this, maybe where we just get it by pointer to each one.

315
00:14:55,700 --> 00:14:58,900
Yeah, and the reason that I say, we probably wouldn't use this too

316
00:14:58,900 --> 00:14:59,700
much or at least not.

317
00:15:00,000 --> 00:15:01,500
A lot of cases where we might care.

318
00:15:01,900 --> 00:15:05,000
The reason that I say that is because, you know, usually if you're

319
00:15:05,000 --> 00:15:08,900
going to copy stuff, I would have a little more knowledge of what it

320
00:15:08,900 --> 00:15:09,000
was.

321
00:15:09,000 --> 00:15:12,400
We were copying and we would know whether it was aligned or not, we

322
00:15:12,400 --> 00:15:16,100
would know whether it could be copied in like 128 byte chunks or not.

323
00:15:16,100 --> 00:15:19,200
I'm sorry 128-bit chunks or not to make it faster, you know, stuff

324
00:15:19,200 --> 00:15:19,700
like that.

325
00:15:19,800 --> 00:15:25,500
So, you know, this is kind of, you know, a really just just sort of a

326
00:15:26,400 --> 00:15:27,300
throwaway copy.

327
00:15:27,300 --> 00:15:29,900
It's not something that we would ever call when we actually

328
00:15:30,000 --> 00:15:33,600
Really cared how fast something was being copied, if that makes sense,

329
00:15:34,000 --> 00:15:36,900
because we were in, in those situations, we would almost always have

330
00:15:36,900 --> 00:15:40,500
architected things to know that we could do a very fast job without

331
00:15:40,500 --> 00:15:41,200
even doing a checking.

332
00:15:41,200 --> 00:15:44,900
We could do it very fast job doing the copy properly, right?

333
00:15:46,800 --> 00:15:50,600
So yeah, so I'm just going to go ahead and do the dumbest possible

334
00:15:50,600 --> 00:15:51,300
thing here.

335
00:15:53,200 --> 00:15:55,400
You know, there you go.

336
00:15:56,400 --> 00:15:58,200
That's that's mem copy, right?

337
00:15:59,200 --> 00:16:01,800
Not a whole lot, not a whole lot to it.

338
00:16:03,400 --> 00:16:06,400
You're just going to take two pointers Advance them by the number that

339
00:16:06,400 --> 00:16:10,000
you wanted a copy and put one of the other, right?

340
00:16:10,400 --> 00:16:14,600
So the majority of this function is just casting to au8 if that makes

341
00:16:14,600 --> 00:16:15,000
sense.

342
00:16:15,200 --> 00:16:16,800
Just so that we know we moved by B.

343
00:16:17,700 --> 00:16:20,300
So yeah, we'll go ahead and do that copy.

344
00:16:21,000 --> 00:16:23,400
And then we're going to Loop through the channels

345
00:16:24,700 --> 00:16:29,300
like, so, all right, I'll take a look at the channel count and for

346
00:16:29,300 --> 00:16:30,300
each Channel index,

347
00:16:33,200 --> 00:16:36,100
We will have our sample pointer.

348
00:16:36,500 --> 00:16:42,100
So the samples for that channel are going to be equal to whatever the

349
00:16:42,100 --> 00:16:43,600
sound memory is currently at.

350
00:16:43,600 --> 00:16:43,900
Right?

351
00:16:43,900 --> 00:16:44,500
So

352
00:16:46,300 --> 00:16:50,800
sound at and I guess I could just do this in samples, like so,

353
00:16:53,700 --> 00:16:59,200
So, whatever the sound is currently at, I could go ahead and make that

354
00:16:59,400 --> 00:17:00,400
be where we're pointing.

355
00:17:00,400 --> 00:17:04,599
And then after we use one, we just Advance, however, big the channel

356
00:17:04,599 --> 00:17:09,200
sizes, so we could say, like, you know, Channel size, equals sample

357
00:17:09,200 --> 00:17:10,500
count, right?

358
00:17:12,099 --> 00:17:12,599
Like that.

359
00:17:12,599 --> 00:17:14,500
And so we just Advance my other channel size.

360
00:17:17,200 --> 00:17:22,900
Yeah, so that that lines us all up properly for doing the load and all

361
00:17:22,900 --> 00:17:27,000
of that good stuff and I think that's basically all we have to do and

362
00:17:27,000 --> 00:17:29,700
so this can now be you know, down in here.

363
00:17:30,800 --> 00:17:35,200
All right, so we've got sound memory, equals push sighs.

364
00:17:35,200 --> 00:17:38,400
They'll that stuff we got to actually have the memory pointer.

365
00:17:38,400 --> 00:17:40,000
Now we don't really need the memory pointer.

366
00:17:40,000 --> 00:17:42,300
In fact, I guess we shouldn't bother with that.

367
00:17:42,400 --> 00:17:46,400
I could just say void star memory goes push size, right?

368
00:17:46,600 --> 00:17:46,800
And

369
00:17:46,900 --> 00:17:49,400
Then use it like that because we really don't care.

370
00:17:49,500 --> 00:17:52,700
So it doesn't actually matter because that we don't have to store what

371
00:17:52,700 --> 00:17:53,600
that actually was.

372
00:17:53,900 --> 00:17:58,400
It's only actually getting used here for copying and so on and so

373
00:17:58,400 --> 00:17:59,800
that's going to do the loading.

374
00:18:00,000 --> 00:18:03,300
Assuming that we didn't, you know, fudge it up.

375
00:18:08,200 --> 00:18:15,800
That all sounds good, although I hear a little click Enos there.

376
00:18:26,900 --> 00:18:30,400
I don't love the clicking - I feel like there's a little something

377
00:18:30,400 --> 00:18:34,200
janky going on there, and I'm not sure, right.

378
00:18:34,400 --> 00:18:37,000
I feel like there is a little click Enos, that's okay.

379
00:18:37,000 --> 00:18:39,100
Because we probably should do some sound debugging.

380
00:18:39,100 --> 00:18:42,000
There was some other thing that some was mentioning on the forums, by

381
00:18:42,000 --> 00:18:44,200
the way, that we probably should take a look at some point.

382
00:18:44,500 --> 00:18:46,600
So we might want to do some sound debugging there, but I just want to

383
00:18:46,600 --> 00:18:47,300
double check here.

384
00:18:47,300 --> 00:18:50,700
I want to see if there's anything specific that might be going on.

385
00:18:51,900 --> 00:18:56,800
That I just recently, introduced sample count.

386
00:18:57,500 --> 00:19:04,600
Let's see sound at memory that know that looks reasonably good

387
00:19:05,300 --> 00:19:05,800
restore.

388
00:19:05,800 --> 00:19:06,900
The sample kind of the sound?

389
00:19:06,900 --> 00:19:09,700
Yeah, I don't know, I don't know that it's likely to necessarily be

390
00:19:09,700 --> 00:19:10,300
there.

391
00:19:13,400 --> 00:19:15,800
Yes, I thought that might be a mixer side thing, but I don't know.

392
00:19:15,800 --> 00:19:19,600
We'll check that stuff out when we kind of go check out a couple

393
00:19:19,600 --> 00:19:21,900
things in the sound mixer at some point.

394
00:19:21,900 --> 00:19:22,500
All right.

395
00:19:23,100 --> 00:19:25,100
So I think that's all we really need to do there.

396
00:19:25,100 --> 00:19:28,500
I think load sound, work is not really necessary at this point.

397
00:19:29,100 --> 00:19:33,100
We can kind of go ahead and get rid of it looks like, yeah, this was

398
00:19:33,100 --> 00:19:34,600
doing exact same thing stuff here.

399
00:19:34,600 --> 00:19:36,800
So there wasn't really anything else that happens in there because

400
00:19:36,800 --> 00:19:37,900
that all looks good.

401
00:19:39,200 --> 00:19:41,100
Yeah so that all looks good.

402
00:19:41,300 --> 00:19:43,000
So now we've simplified things down

403
00:19:43,500 --> 00:19:45,400
Quite a bit actually, right?

404
00:19:45,400 --> 00:19:49,200
Because now we only have that one load asset work thing and we also

405
00:19:49,200 --> 00:19:52,700
all of this stuff is now not necessary, right?

406
00:19:52,700 --> 00:19:55,500
This is just all not used.

407
00:19:55,900 --> 00:20:00,000
So, really what we're looking at here, just, you know, to underscore

408
00:20:00,100 --> 00:20:04,600
kind of how awesome this is in terms of, you know, architecting

409
00:20:04,600 --> 00:20:04,800
things.

410
00:20:04,800 --> 00:20:06,700
Well, and getting a lot of bang for the buck.

411
00:20:07,800 --> 00:20:13,700
Is what we've basically got now is a filed that's five hundred lines

412
00:20:13,700 --> 00:20:18,800
of code that does streaming of bitmap assets and sound Assets in the

413
00:20:18,800 --> 00:20:21,700
background including streaming music.

414
00:20:22,700 --> 00:20:27,400
For 500 lines of code and it matches tags so you can have arbitrary

415
00:20:27,400 --> 00:20:30,300
descriptions from the game to the asset system, right?

416
00:20:30,300 --> 00:20:31,600
That's 500 lines of code.

417
00:20:33,000 --> 00:20:34,200
That's pretty darn great.

418
00:20:34,200 --> 00:20:36,300
Considering the fact that some of those lines are also about to go

419
00:20:36,300 --> 00:20:39,600
away because I'm about to simplify this a little bit further when we

420
00:20:39,600 --> 00:20:43,200
no longer have to do the old reading and memory thing.

421
00:20:43,200 --> 00:20:44,500
Oh and hey guess what?

422
00:20:44,700 --> 00:20:48,500
These guys are also gone to right because those all moved to the asset

423
00:20:48,500 --> 00:20:48,900
prep.

424
00:20:50,900 --> 00:20:51,600
So there you go.

425
00:20:52,800 --> 00:20:56,100
430 lines of code for the entire asset streaming system.

426
00:20:56,200 --> 00:20:58,300
Background loading streaming music.

427
00:21:01,600 --> 00:21:02,500
That's pretty darn.

428
00:21:02,500 --> 00:21:03,000
Awesome.

429
00:21:04,300 --> 00:21:06,700
I have a feeling that if you were to look in a commercial engine, it

430
00:21:06,700 --> 00:21:11,500
would not quite be so straight forward, anyway.

431
00:21:12,200 --> 00:21:14,900
Okay, so let's figure out what's going on here.

432
00:21:15,200 --> 00:21:19,500
In terms of the best way to move this, now, to actually reading data

433
00:21:19,500 --> 00:21:22,700
directly from the platform, right?

434
00:21:22,700 --> 00:21:25,400
Because you can see, we pretty much already wrote the code for it.

435
00:21:25,400 --> 00:21:26,900
We just have to go Implement.

436
00:21:27,400 --> 00:21:30,600
You know what has to happen there on the window side of things.

437
00:21:31,100 --> 00:21:33,900
So if we were to take a look at this, what would happen is, you know,

438
00:21:34,100 --> 00:21:35,900
Would any what I could also do?

439
00:21:35,900 --> 00:21:40,700
I could do a copy here of the bitmap memory to get rid of the the

440
00:21:41,400 --> 00:21:42,100
over, right?

441
00:21:42,300 --> 00:21:48,100
So something like this, I would say that and memory size also this

442
00:21:48,100 --> 00:21:50,500
would let me check to make sure our copy was working properly, which I

443
00:21:50,500 --> 00:21:53,800
don't actually know that it is right if our bitmaps look screwed up.

444
00:22:09,300 --> 00:22:12,300
Yeah, so there's definitely a bug in the Audio.

445
00:22:12,300 --> 00:22:13,100
I can hear the click.

446
00:22:13,100 --> 00:22:14,900
So we know there's a bug in the audio.

447
00:22:15,300 --> 00:22:16,800
We definitely have to.

448
00:22:17,100 --> 00:22:18,500
I'm going to put a little to do there.

449
00:22:20,800 --> 00:22:21,900
That's something we should do.

450
00:22:21,900 --> 00:22:23,900
As soon as we're done with this stuff, I would doesn't need to be

451
00:22:23,900 --> 00:22:25,800
attended to now, but if we definitely should do it.

452
00:22:26,800 --> 00:22:30,700
Fix clicking bug at end of samples.

453
00:22:30,800 --> 00:22:33,100
It could have also been something we introduced in the asset

454
00:22:33,100 --> 00:22:34,500
processor, right?

455
00:22:34,900 --> 00:22:37,200
Because we don't know that we were actually clean to the asset

456
00:22:37,200 --> 00:22:37,500
processor.

457
00:22:37,500 --> 00:22:39,500
We haven't really tested hardly any of the stuff, right?

458
00:22:39,500 --> 00:22:39,800
You're right.

459
00:22:39,800 --> 00:22:41,900
We're just kind of putting it all in place and saying, okay,

460
00:22:41,900 --> 00:22:42,500
everything works.

461
00:22:42,500 --> 00:22:43,100
Right?

462
00:22:43,600 --> 00:22:47,000
And now maybe we had to go through and and find the little lurking

463
00:22:47,000 --> 00:22:47,600
buggers.

464
00:22:48,000 --> 00:22:51,700
All right, so everything looks good.

465
00:22:51,700 --> 00:22:55,300
Here we've got the copies and place and they can just be removed.

466
00:22:55,300 --> 00:22:56,500
So basically, what would

467
00:22:56,700 --> 00:22:58,700
In fact, we could just do this, we could do this now.

468
00:22:58,900 --> 00:23:02,000
So if we just go ahead and remove these guys, right if they just go

469
00:23:02,000 --> 00:23:06,800
away, we'd be left in in Terror land where we're actually using the

470
00:23:06,800 --> 00:23:11,400
assets, but we don't have them, so they're just blank or whatever

471
00:23:11,400 --> 00:23:12,900
they're going to be right.

472
00:23:13,200 --> 00:23:14,100
And so that's fine.

473
00:23:14,500 --> 00:23:16,200
But the game still runs just fine.

474
00:23:17,700 --> 00:23:20,800
So now what we need to do is figure out how to get this stuff to work,

475
00:23:20,800 --> 00:23:21,200
right?

476
00:23:21,200 --> 00:23:22,900
We need to have we need to get this stuff to work.

477
00:23:23,600 --> 00:23:26,800
And the way that we need to get this stuff to work is, we need to be

478
00:23:26,800 --> 00:23:28,800
able to actually get these file handles because you notice what

479
00:23:28,800 --> 00:23:29,700
happens if I do now.

480
00:23:29,800 --> 00:23:34,000
If I run it now is will just crash because we don't actually have file

481
00:23:34,000 --> 00:23:35,000
handles, right.

482
00:23:35,100 --> 00:23:37,600
We've just got a zero sitting in there for the file handle so there's

483
00:23:37,600 --> 00:23:38,400
no right.

484
00:23:38,400 --> 00:23:40,600
It's as soon as it tries to actually doing the file handles, never

485
00:23:40,600 --> 00:23:43,300
even going to get to the stub calls in the file layer.

486
00:23:43,300 --> 00:23:46,100
It's just going to crash as soon as it tries to to do you reference

487
00:23:46,100 --> 00:23:46,300
that.

488
00:23:46,300 --> 00:23:47,400
So, what we need to do is figure

489
00:23:47,500 --> 00:23:52,100
Out a way to actually get the file handle here to actually get that

490
00:23:52,100 --> 00:23:53,100
out, right?

491
00:23:57,700 --> 00:23:58,200
So,

492
00:23:59,500 --> 00:23:59,900
in order to

493
00:24:00,000 --> 00:24:05,200
that what we need is, we need to be able to grab the asset and get the

494
00:24:05,200 --> 00:24:07,700
asset to have a

495
00:24:09,200 --> 00:24:11,300
An index to says which file it came from.

496
00:24:11,700 --> 00:24:12,300
Right?

497
00:24:12,600 --> 00:24:17,300
And so I think like I said before, what I realized after we wrote this

498
00:24:17,300 --> 00:24:21,500
and I was saying this, as we saw, it happen is when we load the tag

499
00:24:21,500 --> 00:24:25,000
array, the tag array is totally awesome because it just flat loads

500
00:24:25,000 --> 00:24:27,100
directly in and we can use the tags directly.

501
00:24:27,100 --> 00:24:30,800
So tags, just load directly in its good assets.

502
00:24:30,800 --> 00:24:33,800
Since they need to refer to tags, that doesn't really work.

503
00:24:33,800 --> 00:24:37,800
The assets have to be re based their values have to be rebased with a

504
00:24:37,800 --> 00:24:38,700
point to the correct place in the

505
00:24:39,000 --> 00:24:43,700
You're a right and that's what we were doing right here, right now you

506
00:24:43,700 --> 00:24:45,700
can see us adding that tag base in.

507
00:24:46,200 --> 00:24:49,400
And so what I think I'd like to do here is I'd like to say, okay, so

508
00:24:49,900 --> 00:24:52,700
what we saw was that h.h.

509
00:24:53,100 --> 00:24:53,700
h.h.

510
00:24:53,900 --> 00:25:00,600
a tags are correctly loaded you know, are correct to be loaded

511
00:25:00,600 --> 00:25:04,000
directly but assets that just didn't work, right?

512
00:25:04,000 --> 00:25:04,800
That was not.

513
00:25:04,800 --> 00:25:07,200
We know we tried it again, like, electrician things.

514
00:25:07,200 --> 00:25:08,000
I say we got a try.

515
00:25:08,000 --> 00:25:08,800
We got to see what's going on.

516
00:25:08,900 --> 00:25:14,400
And we saw that really assets, they change contents as they move from

517
00:25:14,400 --> 00:25:16,600
the drive into memory.

518
00:25:16,600 --> 00:25:20,300
And so, what we've got to do is we've got to make the asset structure,

519
00:25:20,300 --> 00:25:24,300
I think we want to pull it back from having it be its own thing.

520
00:25:25,200 --> 00:25:29,100
And we want to kind of make that be something that actually lives in

521
00:25:29,100 --> 00:25:29,700
the correct.

522
00:25:29,800 --> 00:25:33,300
You know, in the correct sort of lives in a different state.

523
00:25:33,600 --> 00:25:34,400
So what?

524
00:25:34,400 --> 00:25:35,100
I don't know.

525
00:25:35,100 --> 00:25:38,800
Now and you can understand my dilemma here because I don't really have

526
00:25:39,000 --> 00:25:40,100
A lot of information to go on.

527
00:25:40,300 --> 00:25:43,700
Well, I don't know he's does it make sense to make a new asset struct

528
00:25:43,700 --> 00:25:46,700
or should it just be part of the assets lat right.

529
00:25:47,000 --> 00:25:51,400
And I really don't know because it's hard to say you know, whether you

530
00:25:51,400 --> 00:25:55,800
want to actually have the assets lot bother to have, you know, any

531
00:25:55,800 --> 00:26:00,700
more information and do we ever actually access that, info part, the

532
00:26:00,700 --> 00:26:04,900
stuff, the the tags because I'm saying is the tags were sort of out

533
00:26:04,900 --> 00:26:05,900
asking for a separately.

534
00:26:06,100 --> 00:26:08,700
So I kind of figure out like I think I want to leave a

535
00:26:08,900 --> 00:26:12,200
set as a separate thing because it seems like the times that we're

536
00:26:12,200 --> 00:26:14,900
using asset are not the same times that we're using assets, lot.

537
00:26:14,900 --> 00:26:17,000
There's only some occasionally when they're used together.

538
00:26:19,000 --> 00:26:20,400
but a lot of times they're just not

539
00:26:21,700 --> 00:26:24,200
Like when you're looking for an asset, you never look at the assets,

540
00:26:24,200 --> 00:26:24,400
lot.

541
00:26:24,400 --> 00:26:27,700
You only look at the actual asset itself to see what the tags are.

542
00:26:27,900 --> 00:26:30,200
And so that whole walk is walking a bunch of assets.

543
00:26:30,200 --> 00:26:32,300
I don't need to pull in their slot and their pointers.

544
00:26:32,300 --> 00:26:33,800
We never need to look at that, right?

545
00:26:35,100 --> 00:26:37,700
So I feel like I'm going to do it this way, right?

546
00:26:38,000 --> 00:26:42,300
And then you know I'm going to have the first tag index here and I'm

547
00:26:42,300 --> 00:26:44,600
going to have the one pass last tag.

548
00:26:44,600 --> 00:26:45,200
I index

549
00:26:46,900 --> 00:26:47,700
And that's fine.

550
00:26:48,100 --> 00:26:51,100
And then what I'm also going to have is I'm going to have the, the

551
00:26:51,100 --> 00:26:51,900
file Index.

552
00:26:52,000 --> 00:26:52,500
Right?

553
00:26:52,600 --> 00:26:54,100
So what file did it come from?

554
00:26:54,500 --> 00:26:58,100
So that way, when we need to load it, we actually know which file

555
00:26:58,100 --> 00:26:59,800
we're going to load it out of right.

556
00:27:00,900 --> 00:27:04,700
And that seems like something that's that that we would want to know.

557
00:27:05,400 --> 00:27:05,800
Okay?

558
00:27:06,200 --> 00:27:07,200
So we also need to know.

559
00:27:07,200 --> 00:27:09,100
It's data-offset, right?

560
00:27:11,000 --> 00:27:14,700
And then we've got some kind of a little straggler here, you know?

561
00:27:14,700 --> 00:27:19,900
We've got some kind of a like, well, we've got 32, you know, we got a

562
00:27:19,900 --> 00:27:24,400
64, and then a 64, and then a 64 we need we need like something else

563
00:27:24,400 --> 00:27:24,500
here.

564
00:27:24,500 --> 00:27:28,200
I don't know if this is pad preserved.

565
00:27:28,900 --> 00:27:31,700
You know, I don't know that there's anything else we need to actually

566
00:27:31,700 --> 00:27:34,400
store there but that's what's going to happen.

567
00:27:34,900 --> 00:27:36,100
So anyway, here we go.

568
00:27:36,100 --> 00:27:37,900
We're going to grab those assets out.

569
00:27:38,000 --> 00:27:40,400
We're going to copy out the data that we need.

570
00:27:40,600 --> 00:27:41,900
So there's data offset.

571
00:27:43,200 --> 00:27:43,900
Right.

572
00:27:44,900 --> 00:27:46,800
And I should put the file next up there.

573
00:27:47,100 --> 00:27:48,100
So there's the data offset.

574
00:27:48,100 --> 00:27:51,200
There's the file index and we know the file index because We're

575
00:27:51,200 --> 00:27:53,500
looping over the file, so we just, we've got that right.

576
00:27:53,500 --> 00:27:55,000
We know exactly which foul came from.

577
00:27:55,200 --> 00:27:59,700
We know the data offset because that's from the AHA asset that we are.

578
00:27:59,700 --> 00:28:02,000
You know basically pulling the data off the drive from

579
00:28:05,900 --> 00:28:08,900
Like so, yeah.

580
00:28:09,400 --> 00:28:11,600
And and really

581
00:28:15,300 --> 00:28:18,300
We're wait a minute, right?

582
00:28:18,300 --> 00:28:22,500
So we actually didn't have this guy yet because we were, it was the

583
00:28:22,500 --> 00:28:23,800
same dude, right?

584
00:28:23,800 --> 00:28:24,900
It was the same, dude.

585
00:28:25,300 --> 00:28:30,300
So what we need to do is this, we need to First make that, you know,

586
00:28:30,300 --> 00:28:35,800
get that ha asset, which is the HHA asset array plus the asset index.

587
00:28:38,200 --> 00:28:39,500
Yeah, for this array.

588
00:28:39,600 --> 00:28:44,200
So this is a little bit, it has a little bit more Funk to it, right?

589
00:28:44,200 --> 00:28:46,000
There's a little bit more Funk there.

590
00:28:46,600 --> 00:28:50,300
So basically this is it looks like this, right?

591
00:28:53,000 --> 00:28:53,700
I believe.

592
00:28:53,900 --> 00:28:56,800
So we're going to iterate from 0 to the number that are for this

593
00:28:56,800 --> 00:28:59,000
particular asset type, right?

594
00:29:01,600 --> 00:29:07,100
And the index for that, in fact, I think probably we could get rid of

595
00:29:07,100 --> 00:29:11,300
all of this notion entirely here and just say it's at like that,

596
00:29:11,400 --> 00:29:11,700
right?

597
00:29:11,700 --> 00:29:14,100
It's the asset count comes in.

598
00:29:14,400 --> 00:29:17,700
Like so, yeah, yeah, that looks kind of better to me, right?

599
00:29:22,200 --> 00:29:26,200
Yeah, sir that's account is less than assets us account.

600
00:29:26,500 --> 00:29:30,600
This could be less than or equal to though I feel like then that would

601
00:29:30,600 --> 00:29:32,600
still be valid so I'm not sure what was that.

602
00:29:32,600 --> 00:29:33,600
What was going on there?

603
00:29:35,000 --> 00:29:37,600
Why would this always be less than?

604
00:29:39,400 --> 00:29:42,400
Does that make sense?

605
00:29:44,500 --> 00:29:48,700
I don't understand that because wouldn't this be equal to asset count?

606
00:29:48,700 --> 00:29:52,100
When we were done and how would this, how is this assertion?

607
00:29:52,400 --> 00:29:53,500
Not firing?

608
00:29:54,800 --> 00:29:55,400
You know what?

609
00:29:55,400 --> 00:29:56,400
So this was just wrong.

610
00:29:56,500 --> 00:29:58,900
It's because we hadn't run this path yet, right?

611
00:29:58,900 --> 00:29:59,800
That's the only reason,

612
00:30:00,000 --> 00:30:00,900
I was working at all.

613
00:30:02,000 --> 00:30:03,900
Because this is we had not run this path yet.

614
00:30:04,400 --> 00:30:11,500
So yeah II assert myself that this was just bogus and never would have

615
00:30:11,500 --> 00:30:12,000
worked.

616
00:30:12,000 --> 00:30:15,900
So really what we want to do is assert this, you know, up here

617
00:30:16,100 --> 00:30:20,500
something like assert that the asset count at the moment is less than

618
00:30:20,500 --> 00:30:25,100
the asset count now and then we increment it and say okay that's the

619
00:30:25,100 --> 00:30:28,100
one we're actually using and then we get rid of this, right?

620
00:30:29,500 --> 00:30:32,400
So that way we're kind of stepping through the thing and going okay

621
00:30:32,400 --> 00:30:35,100
for each of these assets, we're going to fill it out and we fill it

622
00:30:35,100 --> 00:30:38,900
out in here and that pretty much gives us all the stuff that we

623
00:30:38,900 --> 00:30:41,000
actually wanted file index.

624
00:30:41,000 --> 00:30:43,700
What is that one passengers and the pad?

625
00:30:43,700 --> 00:30:44,800
Which we don't care about?

626
00:30:45,300 --> 00:30:47,800
So yeah, that's a little bit more what we want.

627
00:30:47,900 --> 00:30:52,300
And then what we need to do is we need to have the hahha asset array,

628
00:30:52,700 --> 00:30:55,600
which we would use just a load these things into a temporary place,

629
00:30:55,600 --> 00:30:55,700
right?

630
00:30:55,700 --> 00:30:57,800
We're just loading them as temporary information.

631
00:31:00,200 --> 00:31:04,800
Because we don't actually have not actually block loading them into

632
00:31:04,800 --> 00:31:05,600
the HHH.

633
00:31:05,800 --> 00:31:09,100
H.h., a asset array anymore because we don't have a giant hhas a

634
00:31:09,100 --> 00:31:09,700
direct.

635
00:31:10,500 --> 00:31:10,700
Yeah.

636
00:31:10,700 --> 00:31:13,500
So what we would do here is say, okay, we're going to read that data

637
00:31:13,500 --> 00:31:16,000
and we're going to put it in the AHA asset array like.

638
00:31:16,000 --> 00:31:21,200
So and that HHA asset array is going to be something that we need to

639
00:31:21,200 --> 00:31:23,700
allocate as temporary memory, right?

640
00:31:25,600 --> 00:31:28,200
In fact, we only really need it for right here.

641
00:31:29,000 --> 00:31:32,800
So basically that's that's it would be could literally happen right

642
00:31:32,800 --> 00:31:37,300
here where we just do like a push of the temporary, and then we would

643
00:31:37,300 --> 00:31:38,600
do a pop down here.

644
00:31:38,600 --> 00:31:40,200
So we would do in temporary memory.

645
00:31:40,400 --> 00:31:45,700
So basically I'm just need, I just need something to hold these guys

646
00:31:45,700 --> 00:31:46,600
while we read them.

647
00:31:47,200 --> 00:31:51,700
So I'm just going to go ahead and actually create this h.h.

648
00:31:51,700 --> 00:31:52,400
H.h.

649
00:31:53,300 --> 00:31:54,800
a asset.

650
00:31:54,900 --> 00:31:55,200
It's kind of

651
00:31:55,300 --> 00:31:58,400
Alpha, I should have picked things that are easier to say on stream,

652
00:31:58,400 --> 00:31:59,000
you know what I mean?

653
00:31:59,700 --> 00:32:01,700
But yet, so I'm going to begin the temporary memory.

654
00:32:01,800 --> 00:32:03,300
I'm going to go ahead and get that array.

655
00:32:03,700 --> 00:32:07,500
And that's just going to be, you know, enough room to store these

656
00:32:07,500 --> 00:32:07,900
guys.

657
00:32:07,900 --> 00:32:08,500
Exactly.

658
00:32:08,700 --> 00:32:09,100
Right.

659
00:32:09,100 --> 00:32:11,300
So I'm going to go ahead and do that.

660
00:32:11,900 --> 00:32:15,500
And obviously I should probably just use the transient Arena because

661
00:32:15,500 --> 00:32:18,000
that's exactly what it is for.

662
00:32:18,700 --> 00:32:24,800
So it would probably be you know, trance State Tran Arena, right.

663
00:32:25,600 --> 00:32:26,400
Let's see here.

664
00:32:27,400 --> 00:32:30,500
Where's that at asset array?

665
00:32:32,300 --> 00:32:33,100
So, there we go.

666
00:32:36,600 --> 00:32:39,800
And that's really all I would need to do except for the fact that I

667
00:32:39,800 --> 00:32:42,400
don't remember how I wrote begin temporary memory in this one.

668
00:32:42,500 --> 00:32:44,400
I guess that's how we do it temp them.

669
00:32:44,800 --> 00:32:52,800
So and that would do it and temporary memory and Men.

670
00:32:54,500 --> 00:32:54,900
Yeah.

671
00:32:56,700 --> 00:32:59,800
Okay, so moving news.

672
00:33:00,000 --> 00:33:04,600
Sing along, we need to kind of look at what other stuff was going on

673
00:33:04,600 --> 00:33:05,100
in here.

674
00:33:05,800 --> 00:33:09,200
That might be necessary for the asset.

675
00:33:09,300 --> 00:33:09,800
Right?

676
00:33:09,900 --> 00:33:13,700
So if I look at the file format hhas, at let's see what's actually in

677
00:33:13,700 --> 00:33:14,800
there that we might need.

678
00:33:15,200 --> 00:33:21,000
So we have the bitmap and the sound info, and we still need that that

679
00:33:21,000 --> 00:33:22,700
information, right?

680
00:33:24,000 --> 00:33:28,600
So, yeah, I feel like I guess actually, so all of this stuff we still

681
00:33:28,600 --> 00:33:29,800
need, right?

682
00:33:30,000 --> 00:33:33,200
Right, so, I guess I could also do it this way to avoid having to

683
00:33:33,200 --> 00:33:35,700
bother like, knowing all the stuff that was in there.

684
00:33:35,700 --> 00:33:36,500
Exactly.

685
00:33:36,600 --> 00:33:41,300
I could just say that the asset just has one of these, right?

686
00:33:41,800 --> 00:33:44,900
And then, has the file index or something, right?

687
00:33:45,500 --> 00:33:49,400
So it's just on augmented guy or something like this, right?

688
00:33:50,300 --> 00:33:53,000
And that seems like something we that that's kind of back to the way

689
00:33:53,000 --> 00:33:55,800
that we had it before and that just basically allows us to add more

690
00:33:55,800 --> 00:33:57,400
stuff in there, right?

691
00:33:58,500 --> 00:33:59,400
If that makes sense.

692
00:34:00,800 --> 00:34:01,700
So let's take a look.

693
00:34:02,700 --> 00:34:05,300
So that would just be again going kind of back to what we were doing

694
00:34:05,300 --> 00:34:09,300
here where we you know had a little bit of a yeah.

695
00:34:09,300 --> 00:34:11,300
So I guess I would do like that.

696
00:34:14,400 --> 00:34:16,699
And then wherever it wants HHA asset.

697
00:34:16,699 --> 00:34:17,699
We just do asset.

698
00:34:17,699 --> 00:34:20,400
Aha like that, right?

699
00:34:22,699 --> 00:34:24,400
Only now, we can also get it.

700
00:34:24,400 --> 00:34:26,500
Our file index, which is sort of the information.

701
00:34:26,800 --> 00:34:30,400
That's not the same as the what's in the file, right?

702
00:34:31,699 --> 00:34:35,000
Oh, and I would have to actually access the handle so I guess I would

703
00:34:35,000 --> 00:34:36,000
hear go.

704
00:34:36,800 --> 00:34:38,199
Hmm.

705
00:34:38,199 --> 00:34:39,600
How do I want to do that?

706
00:34:40,699 --> 00:34:42,100
I guess I would say.

707
00:34:44,699 --> 00:34:47,900
Well, I guess I just get it directly always, so I decided to get file

708
00:34:47,900 --> 00:34:51,300
handle for something like that, right?

709
00:34:51,900 --> 00:34:53,600
Where I just get, get the file handle.

710
00:34:54,500 --> 00:34:55,100
There we go.

711
00:34:55,400 --> 00:34:57,000
And that would just allow me to check it.

712
00:34:57,000 --> 00:34:58,300
That's really all I was interested in.

713
00:35:00,200 --> 00:35:00,700
There we go.

714
00:35:01,300 --> 00:35:02,700
And now hopefully you guys can see this.

715
00:35:02,700 --> 00:35:05,200
I mean, if you hadn't, you know, if this is, you know, if you haven't

716
00:35:05,200 --> 00:35:08,600
been watching every day, then this probably won't be something that

717
00:35:08,600 --> 00:35:09,500
you just really noticed.

718
00:35:09,500 --> 00:35:12,300
But you can see I kind of went back and forth on one part of this

719
00:35:12,300 --> 00:35:13,200
architecture, right?

720
00:35:13,200 --> 00:35:16,000
Like whether or not the HSA was embedded in a set or whether it was

721
00:35:16,000 --> 00:35:17,600
not whether the separate one or not, right?

722
00:35:17,800 --> 00:35:19,400
Look we did a couple different ways.

723
00:35:19,400 --> 00:35:22,400
We did it both ways with the tags, we've both the assets and I've kind

724
00:35:22,400 --> 00:35:25,500
of settled on looking at the actual requirements or what had to

725
00:35:25,500 --> 00:35:25,800
happen.

726
00:35:25,800 --> 00:35:29,900
It became obvious like what what the types actually were, right?

727
00:35:30,000 --> 00:35:30,200
Right.

728
00:35:30,200 --> 00:35:33,800
It became obvious that like, okay, we actually process it process

729
00:35:33,800 --> 00:35:37,500
assets as we load them, but we don't process tags.

730
00:35:37,700 --> 00:35:41,200
And so that tells me the thing that it is that I actually needed to

731
00:35:41,200 --> 00:35:43,900
know right about how to do the architecture.

732
00:35:44,200 --> 00:35:47,700
And again, that's why, you know, that's why you do it this way.

733
00:35:47,700 --> 00:35:49,500
That's why architecture should be experimental.

734
00:35:49,500 --> 00:35:52,300
Not design a front because design up front, you're never going to get

735
00:35:52,300 --> 00:35:52,900
all those things.

736
00:35:52,900 --> 00:35:54,200
Never ever, ever going to get them.

737
00:35:54,500 --> 00:35:57,000
I've never seen any programmer, the very best programmers.

738
00:35:57,000 --> 00:35:59,500
I've worked with never even try to do that sort of stuff, because they

739
00:35:59,500 --> 00:35:59,800
know it's

740
00:36:00,000 --> 00:36:00,900
Simply not possible.

741
00:36:02,000 --> 00:36:04,700
And so you never ever want to like think that you're just going to

742
00:36:04,700 --> 00:36:06,200
think of all these things up front.

743
00:36:06,400 --> 00:36:08,800
You can just try a couple things and make sure that you know, your

744
00:36:08,800 --> 00:36:10,500
coding style is fast and fluid.

745
00:36:10,500 --> 00:36:13,400
You can go through these experiments and then just don't, you know,

746
00:36:13,400 --> 00:36:17,100
calcify the code base until you know, that you're happy with sort of

747
00:36:17,100 --> 00:36:18,500
the way things seem to be flowing through it.

748
00:36:18,500 --> 00:36:20,000
And then you're at a good place, right?

749
00:36:20,600 --> 00:36:21,100
So, yeah.

750
00:36:22,500 --> 00:36:28,600
Okay, moving on, let's go ahead and finish this stuff up here.

751
00:36:28,600 --> 00:36:30,400
So that's HHA.

752
00:36:31,400 --> 00:36:33,200
That is also an ha.

753
00:36:34,300 --> 00:36:37,300
What else we got here the assets, right?

754
00:36:37,300 --> 00:36:42,300
That's going to be well, this this guy is going away.

755
00:36:42,500 --> 00:36:43,900
All right, we don't have this anymore.

756
00:36:44,300 --> 00:36:46,800
In fact, we don't have any of this stuff anymore.

757
00:36:47,300 --> 00:36:48,200
That's all going away.

758
00:36:48,200 --> 00:36:49,800
Goodbye HHA, contents.

759
00:36:51,100 --> 00:36:54,600
And so now what we've got is we've just got this get file handle for.

760
00:36:54,700 --> 00:36:57,400
It's a kind of obvious function, right?

761
00:36:58,400 --> 00:37:01,200
Get file handle for is just taking whatever the file index.

762
00:37:01,200 --> 00:37:06,000
Is it's going to look up in our array of files, which is right here,

763
00:37:06,500 --> 00:37:07,100
right?

764
00:37:07,300 --> 00:37:09,400
So it's going to take that assets.

765
00:37:11,600 --> 00:37:12,900
And a file index.

766
00:37:14,500 --> 00:37:17,600
And first you know, I mean we want to just assert the fact that you're

767
00:37:17,600 --> 00:37:20,600
not trying to access a completely bogus file handle.

768
00:37:21,000 --> 00:37:21,500
Right.

769
00:37:21,500 --> 00:37:22,800
So will assert that file.

770
00:37:22,800 --> 00:37:25,700
Index is less than assets file count just to make sure

771
00:37:28,200 --> 00:37:34,400
And then, what we want to do is go assets, files file index, that file

772
00:37:34,400 --> 00:37:39,400
handle it just handle showing that handle is the thing we actually

773
00:37:39,400 --> 00:37:40,200
wanted to return?

774
00:37:44,800 --> 00:37:45,100
Oops.

775
00:37:47,000 --> 00:37:48,600
So that's it right?

776
00:37:49,300 --> 00:37:51,700
Nothing particularly fancy going on there but that gets the file

777
00:37:51,700 --> 00:37:52,200
handle.

778
00:37:54,700 --> 00:37:58,600
Yeah, what did I oh, it's game assets.

779
00:37:58,600 --> 00:37:59,400
Sorry my bad.

780
00:38:01,300 --> 00:38:03,200
yeah, so that

781
00:38:06,200 --> 00:38:07,300
Too many different asset.

782
00:38:07,300 --> 00:38:08,500
Assert sorts of things.

783
00:38:08,500 --> 00:38:12,300
That is basically that I don't think I have much else.

784
00:38:12,300 --> 00:38:13,800
I want to do with that.

785
00:38:14,000 --> 00:38:17,600
And so now if we assume that when we actually loaded the files,

786
00:38:19,100 --> 00:38:22,100
We were actually going to get their file handles, I think we would be

787
00:38:22,100 --> 00:38:27,400
good to go and so, I think we can now start to work on this code in

788
00:38:27,400 --> 00:38:31,500
Earnest and actually get it to be working.

789
00:38:32,100 --> 00:38:33,800
So yeah.

790
00:38:37,600 --> 00:38:41,300
Can I convert one for married to a star that's totally reasonable.

791
00:38:42,200 --> 00:38:42,700
Here we go.

792
00:38:43,900 --> 00:38:45,200
Data-offset, right?

793
00:38:45,200 --> 00:38:47,400
These are part of the AHA now.

794
00:38:48,300 --> 00:38:52,600
Like so, and now we don't really have to do anything particular here.

795
00:38:52,600 --> 00:38:57,300
We can just sort of do something like this, right?

796
00:38:57,800 --> 00:38:59,800
And then we can just rebase those.

797
00:39:00,000 --> 00:39:00,400
X.

798
00:39:01,900 --> 00:39:04,100
So now whatever we were going to have in the AHA.

799
00:39:04,100 --> 00:39:08,100
We copy over and then we just rebase just the tag portion of it.

800
00:39:08,800 --> 00:39:12,000
And so I think that's just about all the things that we would actually

801
00:39:12,000 --> 00:39:12,500
need.

802
00:39:12,600 --> 00:39:16,100
Unfortunately this code is we have no idea if it's any good or not?

803
00:39:16,100 --> 00:39:16,400
Right.

804
00:39:16,400 --> 00:39:20,300
We don't really know anything about this code, we don't know.

805
00:39:20,300 --> 00:39:21,600
We haven't ever run it.

806
00:39:21,600 --> 00:39:23,100
It could have tons of bugs in it.

807
00:39:23,400 --> 00:39:27,700
So we're pretty much going to have to do something a little bit nasty

808
00:39:27,700 --> 00:39:29,900
here which is we're going to

809
00:39:30,000 --> 00:39:33,700
Have to do this sort of doubly, unsure, right?

810
00:39:33,900 --> 00:39:37,400
Because we've got this code which we just kind of wrote as the usage

811
00:39:37,400 --> 00:39:37,900
code.

812
00:39:37,900 --> 00:39:40,700
We don't know if it's got its own bugs, right?

813
00:39:40,700 --> 00:39:41,200
Mistakes.

814
00:39:41,200 --> 00:39:43,200
I made typos or just logic errors.

815
00:39:43,200 --> 00:39:43,600
Whatever?

816
00:39:43,800 --> 00:39:44,400
Right.

817
00:39:46,600 --> 00:39:49,700
We don't know if that works but we also won't have any idea whether

818
00:39:49,700 --> 00:39:51,700
our platform file IO code works.

819
00:39:52,900 --> 00:39:56,300
And so when you're doing something this, you have a couple choices one

820
00:39:56,300 --> 00:39:58,200
is, you can choose to try to test one of them.

821
00:39:58,200 --> 00:40:01,000
And so in this case, what we could do is write test code to test our

822
00:40:01,000 --> 00:40:02,400
platform, reading code.

823
00:40:03,400 --> 00:40:07,100
Another one is you could choose to try and test this outer coat but

824
00:40:07,100 --> 00:40:09,100
that would be pretty particularly difficult.

825
00:40:09,100 --> 00:40:10,100
I think, right?

826
00:40:10,400 --> 00:40:13,600
So pretty much you test the file code when you're sure it was working

827
00:40:13,600 --> 00:40:16,100
properly, then you'd move on to debugging this code.

828
00:40:16,900 --> 00:40:20,900
But what I'm probably going to do is just do the whole thing and debug

829
00:40:20,900 --> 00:40:21,500
them together.

830
00:40:21,700 --> 00:40:22,600
And the reason for that,

831
00:40:22,800 --> 00:40:28,000
Because the file code is so simple, that I don't think I'll have

832
00:40:28,000 --> 00:40:32,700
trouble verifying that it is working as we debug.

833
00:40:33,400 --> 00:40:36,900
And so what I'm doing is I'm making a judgment call, I'm making the

834
00:40:36,900 --> 00:40:38,300
Judgment call that the time.

835
00:40:38,300 --> 00:40:43,800
It would take me to write the test code to test the file IO is longer

836
00:40:43,800 --> 00:40:45,300
than the amount of time.

837
00:40:45,300 --> 00:40:49,000
It will take me to manually verify that it is working as part of the

838
00:40:49,000 --> 00:40:50,400
debugging process, right?

839
00:40:51,400 --> 00:40:53,500
And so a lot of people ask about test-driven development and that I'm

840
00:40:53,500 --> 00:40:55,900
just trying to give you some background into how that works.

841
00:40:56,500 --> 00:41:00,500
If your default answer is always one of the other, then you may waste

842
00:41:00,500 --> 00:41:04,100
a lot of development time doing the wrong, one of the two, right?

843
00:41:04,800 --> 00:41:07,300
And so, you kind of have to make judgment calls about those sorts of

844
00:41:07,300 --> 00:41:09,700
things, and determine what your priorities are and what your goals

845
00:41:09,700 --> 00:41:13,000
are, for any particular step in development, and that is really what

846
00:41:13,000 --> 00:41:15,800
informs you as to, whether you should write a test or not, not some

847
00:41:15,800 --> 00:41:18,200
kind of dogmatic thing of like, you should always do test for you, we

848
00:41:18,200 --> 00:41:21,000
shouldn't do test or something like this, right, tester.

849
00:41:21,200 --> 00:41:21,600
Tool.

850
00:41:22,000 --> 00:41:24,400
And you always need to think of him that way and they give you certain

851
00:41:24,400 --> 00:41:26,900
benefits, and they have certain drawbacks and you need to just like

852
00:41:26,900 --> 00:41:29,000
make that trade-off just like everything else in programming.

853
00:41:29,000 --> 00:41:33,400
It's all about the trade-offs and knowing how to make them effectively

854
00:41:33,400 --> 00:41:34,100
and efficiently.

855
00:41:35,700 --> 00:41:38,800
All right, so let's go to handmade platform.

856
00:41:38,800 --> 00:41:39,900
I've actually guess we don't need to do.

857
00:41:39,900 --> 00:41:41,100
We already did the spec work.

858
00:41:41,100 --> 00:41:45,600
So let's go to handmade win32, handmade and implement the functions

859
00:41:45,600 --> 00:41:47,600
that we have not implemented yet, right?

860
00:41:47,700 --> 00:41:50,700
Because we basically spammed out.

861
00:41:51,100 --> 00:41:54,100
These these functions right here with three, if you get all files of

862
00:41:54,100 --> 00:41:57,800
type, begin went through to get all files of type end with three to

863
00:41:57,800 --> 00:41:59,900
open file win32, read data from files.

864
00:42:00,100 --> 00:42:02,100
Can win 3-2 file error, right?

865
00:42:02,700 --> 00:42:05,500
So those were our functions that that were at the platform layer was

866
00:42:05,500 --> 00:42:06,000
using.

867
00:42:06,200 --> 00:42:09,900
I'm sorry that the platform nonspecific code was using to call down to

868
00:42:09,900 --> 00:42:11,300
get file stuff.

869
00:42:11,400 --> 00:42:12,100
We need it.

870
00:42:12,700 --> 00:42:16,700
And so we want to do here is we want to actually Implement these so

871
00:42:16,700 --> 00:42:20,600
that we can, you know, we can actually do exactly what these files

872
00:42:21,000 --> 00:42:21,800
were supposed to do.

873
00:42:22,000 --> 00:42:24,200
We'll do a very simple version of it first and then we'll make a

874
00:42:24,200 --> 00:42:29,000
slightly better one in terms of implementing it in its completeness,

875
00:42:29,000 --> 00:42:29,900
I'll show you kind of what

876
00:42:30,000 --> 00:42:32,000
I'm thinking of they're all right.

877
00:42:32,000 --> 00:42:34,600
So we already know how to do this stuff because we already wrote it.

878
00:42:34,600 --> 00:42:35,200
All right.

879
00:42:35,200 --> 00:42:36,400
We just wrote it in different way.

880
00:42:36,500 --> 00:42:39,500
So here you see we have debug platform read entire file.

881
00:42:39,500 --> 00:42:45,100
So really, all I really wanted to do was have, you know, debug

882
00:42:45,100 --> 00:42:45,600
platform read.

883
00:42:45,600 --> 00:42:48,600
Entire file was really mostly what we actually wanted to have happen,

884
00:42:48,700 --> 00:42:49,300
right?

885
00:42:49,800 --> 00:42:54,200
So when we call win32 open file, right?

886
00:42:54,200 --> 00:42:54,400
Really?

887
00:42:54,400 --> 00:42:56,700
All I'm going to do is split these into two pieces.

888
00:42:57,200 --> 00:42:59,900
So, we've got the one here where I'm going to go ahead.

889
00:43:00,000 --> 00:43:02,400
Read the file like this one, for example, right?

890
00:43:02,400 --> 00:43:03,200
We've got this.

891
00:43:05,200 --> 00:43:06,900
We've got the read file stuff happening.

892
00:43:07,000 --> 00:43:07,500
There we go.

893
00:43:08,600 --> 00:43:11,300
And we've got sort of this with three to open file stuff happening.

894
00:43:11,800 --> 00:43:15,400
So what I want to do now is I just want to go ahead and make win32

895
00:43:15,400 --> 00:43:19,500
open file do just the just the file open part of things and then I'll

896
00:43:19,500 --> 00:43:21,800
scroll through got the clothes handle here which I can go ahead and

897
00:43:22,000 --> 00:43:26,200
and put in, you know what, we Never Close Our file handles.

898
00:43:28,200 --> 00:43:28,600
like,

899
00:43:30,100 --> 00:43:34,100
We just don't because we keep them up in forever.

900
00:43:34,400 --> 00:43:36,600
So I feel like we actually don't need clothes handle.

901
00:43:36,800 --> 00:43:38,800
I could do a thing here.

902
00:43:38,800 --> 00:43:40,300
Just a note, right?

903
00:43:40,400 --> 00:43:43,000
That we have a close handle here, in case we want to do it at some

904
00:43:43,000 --> 00:43:44,900
point in case you want something that clothes.

905
00:43:44,900 --> 00:43:48,300
Like, I don't think it's like some kind of update in place, sort of

906
00:43:48,300 --> 00:43:48,500
thing.

907
00:43:48,500 --> 00:43:52,500
But anyway, so we have like open file, right?

908
00:43:52,500 --> 00:43:56,400
We just have went through to close file or something like that, and it

909
00:43:56,400 --> 00:43:57,900
would be, you know, something like this.

910
00:43:58,100 --> 00:43:59,300
But for now,

911
00:44:01,100 --> 00:44:03,800
We don't actually want to do that because we never close our files,

912
00:44:04,100 --> 00:44:04,700
right?

913
00:44:04,900 --> 00:44:08,400
Okay, so in with today, to open file, we go ahead and do a crate for

914
00:44:08,900 --> 00:44:11,000
create file on some file that we're trying to open.

915
00:44:12,400 --> 00:44:14,900
We check to see whether we've loaded it and we get the file size.

916
00:44:14,900 --> 00:44:18,300
Now, I want to go ahead and look at him a platform and just see what

917
00:44:18,300 --> 00:44:20,100
it is that I'm actually supposed to do.

918
00:44:20,800 --> 00:44:23,700
I return a platform file handle I guess.

919
00:44:25,600 --> 00:44:27,400
And I guess we never need to even know the size.

920
00:44:27,400 --> 00:44:28,600
So really this get file size.

921
00:44:28,600 --> 00:44:31,000
E^x thing is really not relevant.

922
00:44:31,200 --> 00:44:32,300
We really don't need that.

923
00:44:32,300 --> 00:44:35,400
And so really the entirety of what we're doing is just this file

924
00:44:35,400 --> 00:44:36,700
handle thing, right?

925
00:44:36,700 --> 00:44:40,000
So I'm just going to define a struct here, which is the platform file

926
00:44:40,000 --> 00:44:42,300
handle struct for win32.

927
00:44:43,100 --> 00:44:46,700
And so what I'm going to do there is I'm going to put in the handle,

928
00:44:46,800 --> 00:44:47,100
right?

929
00:44:47,100 --> 00:44:52,000
This is the win32 handle for our handle, you know, basically it's the

930
00:44:52,000 --> 00:44:53,300
colonel handle for our handle.

931
00:44:53,300 --> 00:44:55,200
We have kind of like a two layers of handle essentially.

932
00:44:55,600 --> 00:44:58,300
And then we also have an error code, right?

933
00:44:58,300 --> 00:44:59,800
Like had error something like that.

934
00:45:02,100 --> 00:45:03,800
And the reason that we have to do this, right?

935
00:45:03,800 --> 00:45:06,000
I guess I already kind of spec this out, so enough to do that.

936
00:45:06,100 --> 00:45:09,200
So here's platform file handle, hears that struck, right?

937
00:45:09,300 --> 00:45:11,100
So what I can do is just just put that in here.

938
00:45:11,100 --> 00:45:14,300
So we know that we have like the the regular this is this is sort of

939
00:45:14,300 --> 00:45:17,000
the the generic part, right?

940
00:45:17,000 --> 00:45:20,700
If you will will just I don't know what we want to do, call that H.

941
00:45:20,900 --> 00:45:23,200
And then we have the win32 handle down here, right?

942
00:45:23,200 --> 00:45:26,800
So we already have the has are a stuffed spoken for basically.

943
00:45:27,500 --> 00:45:28,800
So, all I have to do here is I go.

944
00:45:28,800 --> 00:45:30,700
Okay, I've got the result.

945
00:45:30,800 --> 00:45:33,400
The result is going to be a platform file handle, right?

946
00:45:33,600 --> 00:45:35,600
And we'll just assume that it's, you know, nothing.

947
00:45:37,000 --> 00:45:38,000
And then we're going to return.

948
00:45:38,400 --> 00:45:43,000
All right and I suppose you know another thing I could choose to do is

949
00:45:43,000 --> 00:45:44,800
I could change the meaning of has errors.

950
00:45:45,000 --> 00:45:48,100
I could I could make the meaning of Hazzard as actually be that it

951
00:45:48,100 --> 00:45:51,800
doesn't have arrows so it's initialized to 0 meaning that we don't

952
00:45:51,800 --> 00:45:54,600
know if it's right yet and then we set it to True when we load it and

953
00:45:54,600 --> 00:45:55,800
I kind of like that.

954
00:45:55,900 --> 00:45:59,400
So I think I might say that's actually no errors like that.

955
00:45:59,600 --> 00:46:00,700
I like that a little bit better.

956
00:46:03,800 --> 00:46:05,400
Yeah, I kind of like that a little bit better.

957
00:46:06,000 --> 00:46:08,400
So what we do here is we assume that we have an error which is that we

958
00:46:08,400 --> 00:46:10,100
couldn't load the file, right?

959
00:46:10,300 --> 00:46:14,100
And then if we actually can then that is when we would set the result,

960
00:46:14,100 --> 00:46:15,500
no errors, right?

961
00:46:15,500 --> 00:46:22,000
So we can do result, you know, win32 handle, we can do it like this,

962
00:46:22,500 --> 00:46:23,100
right?

963
00:46:23,200 --> 00:46:25,300
And we could set, I guess we could set it like this.

964
00:46:27,600 --> 00:46:28,400
Something like that.

965
00:46:29,000 --> 00:46:30,900
And that makes this kind of really nice.

966
00:46:31,300 --> 00:46:33,500
Very, very simple function, right?

967
00:46:33,500 --> 00:46:36,400
Nothing particularly confusing going on there.

968
00:46:36,900 --> 00:46:39,400
Very, very clean, very simple, right?

969
00:46:40,000 --> 00:46:42,800
And these guys would all operate on one of these things like so.

970
00:46:44,000 --> 00:46:46,900
And when we return, the result, we wouldn't return.

971
00:46:46,900 --> 00:46:47,600
This whole result.

972
00:46:47,600 --> 00:46:49,600
Obviously, I guess this is actually what?

973
00:46:49,600 --> 00:46:50,500
Well, you know, what?

974
00:46:50,500 --> 00:46:52,600
This would actually have to be an allocation, right?

975
00:46:52,600 --> 00:46:55,300
Because we need to return a pointer to that thing.

976
00:46:56,500 --> 00:47:01,800
So we actually do need to allocate this, you know, basically from from

977
00:47:01,800 --> 00:47:04,200
our win32 heat or whatever, right?

978
00:47:04,300 --> 00:47:08,400
So this is actually something like a heap, a lock, right?

979
00:47:08,400 --> 00:47:09,800
Where we just going to grab some memory?

980
00:47:09,800 --> 00:47:12,700
That's win32 specific, and it's not memory that we're ever going to

981
00:47:12,700 --> 00:47:15,300
give back, you know, if that makes sense.

982
00:47:15,400 --> 00:47:18,600
It's memory that its memory that were

983
00:47:20,600 --> 00:47:22,300
Yeah, that we're never going to get back.

984
00:47:24,400 --> 00:47:25,600
Because we never close the file handle.

985
00:47:25,600 --> 00:47:27,000
If we did, we would get rid of it.

986
00:47:28,000 --> 00:47:30,500
We could also use Virtual alkanes said since that way, we keep it to

987
00:47:30,500 --> 00:47:33,100
just using virtual lock normally, you probably wouldn't use Virtual

988
00:47:33,100 --> 00:47:34,300
Alec for something so tiny.

989
00:47:35,200 --> 00:47:38,200
But again, just to keep it to since we didn't bother writing any kind

990
00:47:38,200 --> 00:47:39,500
of generic stuff in here.

991
00:47:40,000 --> 00:47:42,100
There's really no reason why we couldn't do it that way.

992
00:47:42,500 --> 00:47:45,200
It's totally fine to do it this way, right?

993
00:47:45,800 --> 00:47:48,300
But the reason for that is going to take up a ton of memory just for

994
00:47:48,300 --> 00:47:49,500
this simple file handle.

995
00:47:50,200 --> 00:47:54,600
And so that's not something you would normally do if you if you were

996
00:47:54,600 --> 00:47:57,600
actually going to be doing anything fancy here, right?

997
00:47:57,700 --> 00:47:58,000
Right.

998
00:47:59,000 --> 00:47:59,400
so,

999
00:48:00,000 --> 00:48:04,400
I can put it to do there as well, which is that if we want someday

1000
00:48:04,400 --> 00:48:10,600
make and actual Arena used by win32 to subdivide out that space.

1001
00:48:11,400 --> 00:48:12,500
But again, don't really care about that.

1002
00:48:12,500 --> 00:48:14,400
It's not really relevant, it's never going to affect anything.

1003
00:48:14,400 --> 00:48:17,200
Because the number of file handles is going to be pretty small, right?

1004
00:48:17,400 --> 00:48:20,900
You know, on the order of 10 would be a large number of asset files

1005
00:48:20,900 --> 00:48:21,800
for us to process.

1006
00:48:22,400 --> 00:48:26,500
So that doesn't seem particularly particularly interesting either way,

1007
00:48:27,000 --> 00:48:27,500
right?

1008
00:48:28,500 --> 00:48:29,300
So that's fine.

1009
00:48:30,000 --> 00:48:34,100
And we can go ahead and do our win32 handle stuff then at that point

1010
00:48:34,300 --> 00:48:38,400
assuming that the result actually worked out, right?

1011
00:48:40,900 --> 00:48:44,100
And then of course we can cast this because it is a platform file

1012
00:48:44,100 --> 00:48:44,600
handle.

1013
00:48:48,400 --> 00:48:50,000
Because that's what begins with.

1014
00:48:51,700 --> 00:48:58,200
All right, so that looks all pretty reasonable to me.

1015
00:48:58,900 --> 00:49:00,100
We've got the allocation

1016
00:49:01,600 --> 00:49:03,600
And like I said, we were about 12 minutes over.

1017
00:49:03,700 --> 00:49:04,600
I think when we started.

1018
00:49:05,000 --> 00:49:06,300
So we want to go to 612.

1019
00:49:06,300 --> 00:49:07,200
That would be an hour.

1020
00:49:08,100 --> 00:49:09,200
So that's all good.

1021
00:49:09,200 --> 00:49:12,900
I think that's fine for reading into that file handle their, I like

1022
00:49:12,900 --> 00:49:13,400
that.

1023
00:49:14,100 --> 00:49:18,100
We then do read data from file read data from file is going to assume

1024
00:49:18,100 --> 00:49:19,700
that it got one of these, right?

1025
00:49:20,400 --> 00:49:23,900
So it's again I'm going to go ahead and look at the at the platform

1026
00:49:23,900 --> 00:49:27,700
here to see what exactly this gets what it takes us.

1027
00:49:28,100 --> 00:49:29,200
It's a parameters.

1028
00:49:29,500 --> 00:49:30,900
So, when we do

1029
00:49:31,400 --> 00:49:32,600
Read data from file.

1030
00:49:32,800 --> 00:49:34,700
We have a source here, right?

1031
00:49:34,700 --> 00:49:37,800
So I'm going to go ahead and do handle equals source.

1032
00:49:39,600 --> 00:49:45,000
Like so and then we've got the offset and the size and so on, right?

1033
00:49:45,800 --> 00:49:49,600
So what we got to do here, we've got two steps.

1034
00:49:49,600 --> 00:49:52,200
Like I said, we've got to do, we don't need allocating memory or

1035
00:49:52,200 --> 00:49:52,500
anything.

1036
00:49:52,500 --> 00:49:54,500
We're just going to read like this.

1037
00:49:55,100 --> 00:49:58,400
And when we do the read file, we're going to do the the file size,

1038
00:49:58,500 --> 00:49:58,800
right?

1039
00:49:58,800 --> 00:50:02,700
So we're going to do the size and then we're going to do the the

1040
00:50:02,700 --> 00:50:05,600
offset we have to do as a Sikh, right?

1041
00:50:05,600 --> 00:50:07,900
Like we actually have to do a seek to get that.

1042
00:50:09,700 --> 00:50:13,400
Because right now read file works exactly the same way again.

1043
00:50:13,500 --> 00:50:17,900
Horrible Epi is when you it's really a bad API when you have a

1044
00:50:17,900 --> 00:50:19,400
location in a file that you have to use.

1045
00:50:19,400 --> 00:50:21,500
Remember I talked about this with every and that sort of stuff.

1046
00:50:21,900 --> 00:50:24,500
So we want to do is we want to do a read that has an offset in the

1047
00:50:24,500 --> 00:50:24,800
size.

1048
00:50:24,800 --> 00:50:29,300
So really read file is not quite what we want or rather this method of

1049
00:50:29,300 --> 00:50:30,700
calling read file is not exactly.

1050
00:50:30,700 --> 00:50:34,300
We want what we want to use is actually the overlap Tayo.

1051
00:50:35,800 --> 00:50:36,200
Parameter.

1052
00:50:36,200 --> 00:50:38,800
So, let's go back here and we didn't talk about this when we

1053
00:50:38,800 --> 00:50:40,500
originally did it, because we didn't use it.

1054
00:50:41,000 --> 00:50:44,700
But if you take a look, read file has this thing called LP overlapped,

1055
00:50:44,800 --> 00:50:45,500
right?

1056
00:50:45,900 --> 00:50:48,900
And the lp overlap structure, is a structure.

1057
00:50:48,900 --> 00:50:54,300
You can optionally pass in and you can actually use this to specify

1058
00:50:54,300 --> 00:50:55,800
more stuff, right?

1059
00:50:56,200 --> 00:50:59,000
And what's interesting about it is, if you look at the overlapped

1060
00:50:59,000 --> 00:50:59,800
struct, what did

1061
00:51:00,000 --> 00:51:03,600
Actually has in it is it has the offset from which you would like to

1062
00:51:03,600 --> 00:51:04,400
read the data.

1063
00:51:05,200 --> 00:51:05,700
Okay?

1064
00:51:06,500 --> 00:51:12,000
And so even though read file in its normal incantation does not let

1065
00:51:12,000 --> 00:51:15,000
you specify where you want to read the data from.

1066
00:51:15,400 --> 00:51:18,800
If you actually use the overlapped portion of it, which is normally

1067
00:51:18,800 --> 00:51:21,300
used to kick off background reads, right?

1068
00:51:24,700 --> 00:51:27,400
If you actually use this portion of the win32 API where you pass the

1069
00:51:27,400 --> 00:51:32,600
overlaps truck, you can get the correct API for file reading out of

1070
00:51:32,600 --> 00:51:32,900
it.

1071
00:51:33,200 --> 00:51:37,000
So again, yeah, it look, may look at first blush, like the colonel

1072
00:51:37,000 --> 00:51:39,800
Windows kernel, didn't implement the right file, read API, but they

1073
00:51:39,800 --> 00:51:40,500
actually secretly.

1074
00:51:40,500 --> 00:51:44,600
Did you just have to know about this overlapped guy at the end here,

1075
00:51:44,600 --> 00:51:45,100
right?

1076
00:51:45,300 --> 00:51:46,800
So what we actually want to do,

1077
00:51:47,900 --> 00:51:50,900
Is we actually want to use one of these overlaps trucks.

1078
00:51:51,400 --> 00:51:54,200
We want to set the overlap structure what we need.

1079
00:51:54,200 --> 00:51:58,600
So we'll go ahead and say overlapped, you know, struck here, clear it

1080
00:51:58,600 --> 00:52:02,600
to zero and then we want to set our offset in our offset high, right?

1081
00:52:02,600 --> 00:52:06,000
So we want to set overlapped offset and overlapped offset.

1082
00:52:06,000 --> 00:52:07,500
High like so.

1083
00:52:08,600 --> 00:52:11,700
And so those are going to be those.

1084
00:52:12,000 --> 00:52:13,500
This offset that we have here.

1085
00:52:13,600 --> 00:52:16,100
Remember this is a 64-bit value.

1086
00:52:16,200 --> 00:52:17,500
So what you want to do here

1087
00:52:17,700 --> 00:52:22,700
No, is we want to basically take this thing and mask off part of it,

1088
00:52:22,700 --> 00:52:23,200
right?

1089
00:52:23,200 --> 00:52:27,600
We want to say, okay, the low part of it is just going to be, you

1090
00:52:27,600 --> 00:52:31,500
know, the value masked off the high part of it is just the value

1091
00:52:31,500 --> 00:52:34,700
shifted down by 32 and then masked off, right?

1092
00:52:36,100 --> 00:52:37,400
And that's how we would get that.

1093
00:52:38,100 --> 00:52:41,400
And then so if we take a look here at what's going to happen, you can

1094
00:52:41,400 --> 00:52:46,200
see it says, you know, okay we've got a point overlap, a parchment

1095
00:52:46,200 --> 00:52:49,300
over the structure is required if was with file flag overlap.

1096
00:52:49,300 --> 00:52:52,000
We are not actually doing that so we don't actually care about that.

1097
00:52:52,300 --> 00:52:55,400
If the H files open with overlap, it point to a valid unique overlap

1098
00:52:55,400 --> 00:52:56,100
blah blah blah.

1099
00:52:56,200 --> 00:52:57,800
We don't care about that because again, we're not using it for

1100
00:52:57,800 --> 00:53:00,500
background stuff just yet for an h-file that supports B offsets.

1101
00:53:00,500 --> 00:53:03,200
If you use this parameter, you must specify a byte offset which to

1102
00:53:03,200 --> 00:53:04,800
start reading from the file device.

1103
00:53:04,800 --> 00:53:05,700
Also survived the off,

1104
00:53:06,000 --> 00:53:10,200
And also at high is what we set and for an eight felt it doesn't it

1105
00:53:10,200 --> 00:53:10,700
doesn't matter.

1106
00:53:10,700 --> 00:53:13,800
But obviously this h-file does that would be if you open like a stream

1107
00:53:13,800 --> 00:53:17,100
or something but assuming you open a file on disk it obviously has the

1108
00:53:17,100 --> 00:53:18,800
ability to seek around so that's fine.

1109
00:53:19,400 --> 00:53:21,100
And that's all we really need to set.

1110
00:53:21,300 --> 00:53:23,800
So basically we can go here and do H file L buffer.

1111
00:53:23,800 --> 00:53:24,700
Right, we could sell this stuff.

1112
00:53:24,700 --> 00:53:25,200
Exactly.

1113
00:53:25,200 --> 00:53:28,500
We used to except now we can set that offset and offset hi.

1114
00:53:28,800 --> 00:53:31,600
So we don't have to worry about seeking which is what we would really

1115
00:53:31,800 --> 00:53:32,500
like to avoid.

1116
00:53:32,500 --> 00:53:35,200
Because we want this to be multi thread safe, we don't want to have to

1117
00:53:35,200 --> 00:53:35,700
issue SQL.

1118
00:53:35,800 --> 00:53:38,300
Commands that might seek somewhere and then have some other thread try

1119
00:53:38,300 --> 00:53:40,300
to seek somewhere else and read at the same time which would be a

1120
00:53:40,300 --> 00:53:41,600
disaster, right?

1121
00:53:42,200 --> 00:53:43,200
So that's all good.

1122
00:53:43,900 --> 00:53:45,800
We've got the destination where we want to put it.

1123
00:53:45,800 --> 00:53:50,100
So the only sticking point is the fact that windows cannot do Reed's

1124
00:53:50,100 --> 00:53:51,900
bigger than 4 gigabytes.

1125
00:53:53,200 --> 00:53:54,300
Don't ask me why?

1126
00:53:54,400 --> 00:53:58,900
I just know that they can't and so there's actually you know just this

1127
00:53:58,900 --> 00:53:59,500
thing.

1128
00:54:00,000 --> 00:54:04,100
Are we will probably have to do the same operation that we were doing,

1129
00:54:04,400 --> 00:54:08,500
where we safe, truncate down first and say, okay we're going to

1130
00:54:08,500 --> 00:54:09,100
change.

1131
00:54:09,100 --> 00:54:15,700
We're going to assume that will never actually get something that's

1132
00:54:15,700 --> 00:54:18,500
going to be too big for us because chances are no asset, no

1133
00:54:18,500 --> 00:54:23,300
individual, no assets, no individual asset in the asset file should

1134
00:54:23,300 --> 00:54:28,800
ever be that large but you know, we'll leave the possibility open that

1135
00:54:28,800 --> 00:54:29,900
someday there would be and

1136
00:54:30,000 --> 00:54:32,900
Then we just have to upgrade this winter to platform layer to handle

1137
00:54:32,900 --> 00:54:34,100
it, right?

1138
00:54:34,400 --> 00:54:35,700
So we're going to a safe truncate there.

1139
00:54:35,700 --> 00:54:39,000
So that we know that, you know, will get in assert if we ever try to

1140
00:54:39,000 --> 00:54:44,200
push that boundary and some bad way and then we will go ahead and keep

1141
00:54:44,200 --> 00:54:45,100
the rest of it.

1142
00:54:45,900 --> 00:54:53,600
Yeah, as is basically, so this right here, file read succeeded, right?

1143
00:54:53,900 --> 00:54:58,700
And this right here, is means that we've got an error, right?

1144
00:54:58,800 --> 00:54:59,900
And so this is going

1145
00:55:00,000 --> 00:55:04,000
to be something where we set the error in the in,

1146
00:55:05,900 --> 00:55:08,300
in the actual, where's it go?

1147
00:55:08,300 --> 00:55:09,400
It's went through.

1148
00:55:09,400 --> 00:55:11,300
Thought it's this guy right here, right?

1149
00:55:11,600 --> 00:55:14,000
This is where we're actually going to call ourselves and just say

1150
00:55:14,000 --> 00:55:18,300
there is a file error, the file error was on this handle and it was

1151
00:55:18,300 --> 00:55:20,000
that read file failed.

1152
00:55:20,900 --> 00:55:22,800
All right, so that's what happened.

1153
00:55:24,100 --> 00:55:28,100
Whether you do file error is really not doing anything at the moment.

1154
00:55:28,500 --> 00:55:33,200
It's really just saying that that that no error is function, right?

1155
00:55:34,100 --> 00:55:36,500
You can see again in platform here.

1156
00:55:37,600 --> 00:55:41,200
The only thing that was supposed to do when we did file error, is it

1157
00:55:41,200 --> 00:55:44,100
supposed to take the handle and what the message was?

1158
00:55:44,200 --> 00:55:46,600
So, really, all we're doing is, we're nearing the message for now.

1159
00:55:46,600 --> 00:55:50,200
Although we could do an output debug string, right?

1160
00:55:50,200 --> 00:55:50,800
Of the message.

1161
00:55:50,800 --> 00:55:58,700
If you wanted to something like this, you know, if handmade internal

1162
00:55:59,900 --> 00:56:01,000
You could output that.

1163
00:56:05,000 --> 00:56:05,800
Something like this.

1164
00:56:14,600 --> 00:56:15,100
Right?

1165
00:56:16,900 --> 00:56:18,900
If we happen to be the internal build, we could speed up the video

1166
00:56:18,900 --> 00:56:21,000
Port later on, we have more debug information, maybe we'll do

1167
00:56:21,000 --> 00:56:25,400
something a little fancier there, I don't know, but what we do know is

1168
00:56:25,400 --> 00:56:29,200
that no errors is going to become false, there will now be errors as

1169
00:56:29,200 --> 00:56:31,900
soon as you call this function, even once there's an error on the

1170
00:56:31,900 --> 00:56:32,700
stream, right?

1171
00:56:32,700 --> 00:56:33,500
So that's over.

1172
00:56:34,800 --> 00:56:38,900
now, what we also could do here, again is say

1173
00:56:41,000 --> 00:56:48,300
Errors we could say platform file no errors on the source and we could

1174
00:56:48,300 --> 00:56:51,700
just avoid ever trying to do any reads as well.

1175
00:56:51,700 --> 00:56:55,500
If we know that the if we've already gotten into a failure State,

1176
00:56:55,700 --> 00:56:58,700
basically we would not try to do anymore reads on that handle because

1177
00:56:58,700 --> 00:56:59,700
who knows what would happen.

1178
00:57:00,600 --> 00:57:05,000
So, we'll just ignore any request to read on a bad handle, if that

1179
00:57:05,000 --> 00:57:05,500
makes sense.

1180
00:57:06,700 --> 00:57:12,100
All right, so I think that's mostly it.

1181
00:57:12,500 --> 00:57:13,200
Let's take a look.

1182
00:57:13,200 --> 00:57:15,800
We got to figure out where we get the file name from, right, but I'm

1183
00:57:15,800 --> 00:57:17,100
going to hard code that for now.

1184
00:57:19,300 --> 00:57:19,800
Let's see.

1185
00:57:19,800 --> 00:57:22,700
No errors is not a member.

1186
00:57:22,800 --> 00:57:25,100
You are correct about that.

1187
00:57:26,300 --> 00:57:30,000
I don't actually remember what the value was there.

1188
00:57:31,200 --> 00:57:34,000
What is the name of that value?

1189
00:57:34,000 --> 00:57:34,600
H.

1190
00:57:35,200 --> 00:57:36,600
Don't ask me why I called it h.

1191
00:57:37,100 --> 00:57:37,700
I don't know.

1192
00:57:38,600 --> 00:57:42,800
So, file name, we don't have win32 handle.

1193
00:57:43,200 --> 00:57:49,800
We do have put in the wrong thing, there file handle, for this, we do

1194
00:57:49,800 --> 00:57:50,500
have that.

1195
00:57:50,500 --> 00:57:55,000
That's just the handle went through to handle like so.

1196
00:57:56,000 --> 00:58:00,600
And that cannot convert a parameter.

1197
00:58:00,900 --> 00:58:06,200
That is true because it would have to be H, right?

1198
00:58:07,900 --> 00:58:10,900
All right, so the file name, what I'm going to do now is I'm just

1199
00:58:10,900 --> 00:58:12,700
going to full-on cheese that out.

1200
00:58:12,700 --> 00:58:14,500
I'm just going to say that the file name.

1201
00:58:16,700 --> 00:58:19,400
You know, this stuff is always going to be complete nonsense here,

1202
00:58:19,400 --> 00:58:19,800
right?

1203
00:58:19,900 --> 00:58:24,100
So what we're going to do is totally cheese this out so that we can

1204
00:58:24,100 --> 00:58:25,100
test the loading.

1205
00:58:25,700 --> 00:58:28,000
So I'm going to do is I'm just going to say that when we have a file

1206
00:58:28,000 --> 00:58:29,500
group, the file count is 1.

1207
00:58:31,300 --> 00:58:35,700
Duke AC actually implement this, right?

1208
00:58:36,700 --> 00:58:40,000
And that's already and then we come in here.

1209
00:58:40,100 --> 00:58:44,700
We're just going to assume that we're always loading that same file,

1210
00:58:44,800 --> 00:58:45,900
right that we're loading.

1211
00:58:46,200 --> 00:58:47,300
Our handmade

1212
00:58:49,100 --> 00:58:53,500
Data, we're going to load that test on, aha, right?

1213
00:58:55,100 --> 00:58:57,300
Does that make sense bouquet?

1214
00:58:57,300 --> 00:58:59,400
See do we implement this?

1215
00:59:02,500 --> 00:59:06,600
Okay, and hey, I capitalized file named differently in two different

1216
00:59:06,600 --> 00:59:07,100
cases.

1217
00:59:07,200 --> 00:59:11,600
I do that all the time and so now what we want to do is just kind of

1218
00:59:11,600 --> 00:59:12,800
start stepping through it a little bit.

1219
00:59:12,800 --> 00:59:15,800
I think we're pretty much done with the stream for today, because

1220
00:59:15,800 --> 00:59:17,800
we're about only a minute or two left.

1221
00:59:18,000 --> 00:59:20,900
So what I want to do is just quickly step through this, but we're

1222
00:59:20,900 --> 00:59:23,700
going to have to basically shut things down and leave them in a

1223
00:59:23,700 --> 00:59:26,000
nonworking State, because there's basically no chance that the stuff

1224
00:59:26,000 --> 00:59:28,100
all worked correctly the first time, right?

1225
00:59:28,200 --> 00:59:29,600
That's totally out of the question.

1226
00:59:30,000 --> 00:59:31,400
So what we want to do is just kind of

1227
00:59:31,800 --> 00:59:35,000
A quick step through and then we'll hold off on any real debugging

1228
00:59:35,000 --> 00:59:36,700
till next time, right?

1229
00:59:37,700 --> 00:59:40,200
Okay, so the file count is 1, which is what I said.

1230
00:59:40,200 --> 00:59:43,200
I wanted to be, we're going to step through their will grab out the

1231
00:59:43,200 --> 00:59:44,800
first file, right?

1232
00:59:46,300 --> 00:59:48,700
Well actually, it's just getting at the destination for the first file

1233
00:59:49,300 --> 00:59:51,200
that we got that tag base, which is set to 0.

1234
00:59:51,200 --> 00:59:54,700
Remember, we got a rebase our tag, so that's what we base, the pointer

1235
00:59:54,700 --> 00:59:55,400
set of the tags.

1236
00:59:56,000 --> 00:59:58,600
So the first thing we're going to do is we got to read out

1237
01:00:00,800 --> 01:00:01,500
Wait a minute.

1238
01:00:03,000 --> 01:00:05,200
What, what is going on here?

1239
01:00:05,400 --> 01:00:07,200
We haven't read the header yet.

1240
01:00:07,900 --> 01:00:10,900
That's just banana cakes, right?

1241
01:00:11,300 --> 01:00:12,100
Did you see that?

1242
01:00:12,700 --> 01:00:13,500
Who wrote that?

1243
01:00:13,900 --> 01:00:16,900
I don't know who wrote that, but whoever wrote that whoever snuck in

1244
01:00:16,900 --> 01:00:19,900
here and wrote that ridiculous code.

1245
01:00:21,200 --> 01:00:22,700
You know, don't do that, right?

1246
01:00:22,700 --> 01:00:25,000
I'm writing all this really good code and then someone comes in and

1247
01:00:25,000 --> 01:00:26,300
puts this Ridiculousness in there.

1248
01:00:26,300 --> 01:00:28,200
I don't know what's going on, right?

1249
01:00:28,400 --> 01:00:29,200
Clearly.

1250
01:00:29,200 --> 01:00:32,600
Some kind of no more Imp in the machinery.

1251
01:00:33,800 --> 01:00:35,900
So yeah, this is what reads the header.

1252
01:00:36,100 --> 01:00:42,600
So obviously the asset type array size that's cannot be computed here,

1253
01:00:42,800 --> 01:00:43,200
right?

1254
01:00:43,200 --> 01:00:46,300
That is something that can only be computed after the header actually

1255
01:00:46,300 --> 01:00:47,700
gets red.

1256
01:00:47,800 --> 01:00:51,400
And I don't know why anyone thought something other than that, was

1257
01:00:51,400 --> 01:00:53,300
going to happen, all right?

1258
01:00:54,000 --> 01:00:54,800
Try it one more time.

1259
01:00:56,600 --> 01:01:00,100
So we coming here, we zero out the file header.

1260
01:01:00,900 --> 01:01:02,400
We try to open the file.

1261
01:01:02,400 --> 01:01:03,300
So there it is.

1262
01:01:03,700 --> 01:01:05,600
Let's see if we were able to open the file.

1263
01:01:06,800 --> 01:01:09,000
Looks like we were oh sorry.

1264
01:01:09,000 --> 01:01:12,600
That was just allocating that the point, the memory for, it will go

1265
01:01:12,600 --> 01:01:16,000
ahead and create the file and do we actually get one?

1266
01:01:16,000 --> 01:01:16,700
We did.

1267
01:01:16,800 --> 01:01:17,600
So are no errors.

1268
01:01:17,600 --> 01:01:19,300
Should be set to 1 which is true.

1269
01:01:19,400 --> 01:01:20,200
So, that's good.

1270
01:01:20,600 --> 01:01:21,400
We come through here.

1271
01:01:21,400 --> 01:01:23,700
We tempt to read data from the file, we see whether we have any

1272
01:01:23,700 --> 01:01:26,300
errors, we didn't, so we grab out our Winthrop.

1273
01:01:26,400 --> 01:01:27,800
To handle, right?

1274
01:01:28,400 --> 01:01:32,900
We take a look at overlapped and we set that to where we are trying to

1275
01:01:32,900 --> 01:01:35,200
read from which is this case happens to be 0 because we're going to

1276
01:01:35,200 --> 01:01:40,100
first thing we're looking to file size which is 44, that should be 1H,

1277
01:01:40,300 --> 01:01:42,900
a headers worth of file.

1278
01:01:43,000 --> 01:01:43,500
Right?

1279
01:01:45,600 --> 01:01:46,300
What is it file?

1280
01:01:46,300 --> 01:01:46,600
Header?

1281
01:01:47,700 --> 01:01:48,100
Isn't there?

1282
01:01:48,100 --> 01:01:48,600
An h.h.

1283
01:01:48,600 --> 01:01:49,000
a header?

1284
01:01:53,100 --> 01:01:54,500
H.h., a header.

1285
01:01:56,400 --> 01:02:01,600
So, just somebody want to tell me why I can't take the size of that.

1286
01:02:03,200 --> 01:02:06,400
What, what is the deal with that?

1287
01:02:06,800 --> 01:02:11,100
All right, well anyway looks like we read it properly.

1288
01:02:12,500 --> 01:02:13,500
So, that's good.

1289
01:02:14,600 --> 01:02:15,900
Oh, awesome.

1290
01:02:16,400 --> 01:02:17,600
I know why that was.

1291
01:02:17,700 --> 01:02:20,600
It's because we were in a different part of the code that didn't have

1292
01:02:20,600 --> 01:02:22,800
h a header compiled into it.

1293
01:02:23,000 --> 01:02:26,200
And so the the debugger felt that it was fine to just not tell us what

1294
01:02:26,200 --> 01:02:26,800
that was.

1295
01:02:27,700 --> 01:02:28,900
That's hilarious.

1296
01:02:29,100 --> 01:02:29,500
Right?

1297
01:02:29,600 --> 01:02:33,200
Because remember this is handmade dot exe and this is handmade tempt

1298
01:02:33,200 --> 01:02:34,000
up, dll.

1299
01:02:34,400 --> 01:02:37,600
And so it was using only the symbols from handmade that exe to look up

1300
01:02:37,600 --> 01:02:40,300
what was in the watch window at that time?

1301
01:02:47,600 --> 01:02:52,400
Are the people who make this product, you can tell if they do

1302
01:02:52,400 --> 01:02:57,200
debugging, they're not very good at it which I guess, you know, would

1303
01:02:57,200 --> 01:02:58,000
be the joke anyway.

1304
01:02:58,100 --> 01:02:59,800
Anyway, so

1305
01:03:00,400 --> 01:03:05,000
Point being, we're going to go ahead and get the the asset type array

1306
01:03:05,000 --> 01:03:07,300
size here, which is just however, many there are 20 for.

1307
01:03:07,300 --> 01:03:08,100
Okay, that's fine.

1308
01:03:09,000 --> 01:03:11,200
And I guess you know what, I should also look and see.

1309
01:03:11,400 --> 01:03:14,500
This is the first time we're looking at us loading the header, right?

1310
01:03:15,100 --> 01:03:19,400
So there's the magic value and stuff, there's the version number,

1311
01:03:19,900 --> 01:03:23,400
there's the tag count, there's the asset type count ass account, that

1312
01:03:23,400 --> 01:03:26,600
all looks relevant, you know, reasonable, you know, nothing too

1313
01:03:26,800 --> 01:03:27,700
ridiculous there.

1314
01:03:28,600 --> 01:03:29,900
So let's read we're going to read in.

1315
01:03:30,000 --> 01:03:31,500
In now, the asset type array.

1316
01:03:31,600 --> 01:03:33,800
We're going to make sure that the magic value in the version match.

1317
01:03:33,800 --> 01:03:34,500
They do.

1318
01:03:34,900 --> 01:03:38,200
We're going to go ahead and add the totals to our asset tag counts.

1319
01:03:38,200 --> 01:03:39,000
That's fine.

1320
01:03:40,300 --> 01:03:41,100
Off we go.

1321
01:03:41,600 --> 01:03:42,200
We're going to end.

1322
01:03:42,200 --> 01:03:46,400
There we are going to push the arrays on.

1323
01:03:46,400 --> 01:03:50,900
We're going to load our tags assuming that we load the tags in here,

1324
01:03:50,900 --> 01:03:51,200
right?

1325
01:03:51,200 --> 01:03:53,800
We've got a, we're going to load into the the tag array.

1326
01:03:55,100 --> 01:04:00,200
However, many there are right at the offset for the tag base, which we

1327
01:04:00,200 --> 01:04:01,300
kind of did up here.

1328
01:04:01,300 --> 01:04:02,700
Where is that tag base file?

1329
01:04:02,700 --> 01:04:02,900
Tag?

1330
01:04:02,900 --> 01:04:03,900
Basis, always attack at.

1331
01:04:03,900 --> 01:04:05,100
Yeah, that looks right.

1332
01:04:05,200 --> 01:04:06,000
It's set up there.

1333
01:04:06,600 --> 01:04:07,200
So that's good.

1334
01:04:07,200 --> 01:04:08,300
We come through here.

1335
01:04:10,600 --> 01:04:12,900
We grabbed the the asset.

1336
01:04:12,900 --> 01:04:13,900
Can't we go through?

1337
01:04:13,900 --> 01:04:18,200
We we looks like we're just going to look through and however many

1338
01:04:18,200 --> 01:04:19,000
types of assets.

1339
01:04:19,000 --> 01:04:19,900
There are right.

1340
01:04:20,000 --> 01:04:23,900
We go through every file for every asset type we then look to see if

1341
01:04:23,900 --> 01:04:25,200
we're still reading, okay?

1342
01:04:25,200 --> 01:04:32,300
From this particular file, we go ahead and grab the asset type array

1343
01:04:32,300 --> 01:04:35,200
for that particular asset type right.

1344
01:04:37,800 --> 01:04:41,800
You read it in and looks like it didn't have any for that which is

1345
01:04:41,800 --> 01:04:47,600
correct, its asset type 0 and that should just go a pace presuming

1346
01:04:47,600 --> 01:04:48,000
Lee.

1347
01:04:48,100 --> 01:04:48,300
Yeah.

1348
01:04:48,300 --> 01:04:48,600
Yeah.

1349
01:04:48,600 --> 01:04:54,400
That should just go till it reads, all the assets of that type, which

1350
01:04:54,400 --> 01:04:57,100
presumably would only happen once for any given file and then it will

1351
01:04:57,100 --> 01:04:57,600
go through.

1352
01:04:57,600 --> 01:04:59,100
All right, so that looks fine.

1353
01:05:00,600 --> 01:05:04,200
But of course, we did not actually get the number of assets that we

1354
01:05:04,200 --> 01:05:05,000
thought we would get.

1355
01:05:06,200 --> 01:05:09,000
We loaded 50 and we expected 51.

1356
01:05:09,500 --> 01:05:13,000
That's actually fine because now that I think about it, the first

1357
01:05:13,000 --> 01:05:16,200
asset is the null asset and that asset would not actually be stored

1358
01:05:16,200 --> 01:05:18,500
anywhere, if I'm not very much mistaken.

1359
01:05:22,900 --> 01:05:23,500
Right.

1360
01:05:24,700 --> 01:05:26,000
I think that's correct.

1361
01:05:29,200 --> 01:05:30,900
So that's kind of interesting.

1362
01:05:33,400 --> 01:05:34,200
So I don't know.

1363
01:05:34,500 --> 01:05:36,100
We got to figure out what we want to do about that.

1364
01:05:36,200 --> 01:05:43,400
I'm going to go ahead and and kind of zip past this particular error

1365
01:05:43,400 --> 01:05:44,400
for the moment.

1366
01:05:44,400 --> 01:05:48,200
There's set next statement and let's run I don't think anything good

1367
01:05:48,500 --> 01:05:50,500
holy cow dude.

1368
01:05:52,300 --> 01:05:57,000
Well, it doesn't quite work correctly because I don't see any Shadows.

1369
01:05:58,400 --> 01:05:59,800
But that was.

1370
01:06:00,000 --> 01:06:00,500
Awesome.

1371
01:06:00,900 --> 01:06:03,000
So now we're streaming out of the asset file.

1372
01:06:05,600 --> 01:06:08,500
Wow, okay, so we've got a little bit of work to do that.

1373
01:06:08,500 --> 01:06:09,800
It's not quite correct yet.

1374
01:06:11,000 --> 01:06:14,500
So we've got some work to do but man that was pretty good, right?

1375
01:06:15,800 --> 01:06:17,300
All right, so you got to do that.

1376
01:06:17,300 --> 01:06:21,900
I also have to wanted to put it to do in here to do Casey Primacy

1377
01:06:21,900 --> 01:06:25,200
numbers for asset files.

1378
01:06:25,800 --> 01:06:30,300
But let's go ahead and go to the Q&A for now because I think we've

1379
01:06:30,300 --> 01:06:32,400
done enough programming for today.

1380
01:06:36,300 --> 01:06:40,900
Yeah, that was kind of crazy that that worked at all.

1381
01:06:40,900 --> 01:06:48,200
Given how much stuff we wrote and we had only one really stupid thing

1382
01:06:48,200 --> 01:06:50,500
in it, which was the fact that asset type array was going to compute

1383
01:06:50,500 --> 01:06:54,100
it above where it should have been, but that was pretty good.

1384
01:06:54,400 --> 01:06:57,600
All right, so if you have questions, now is the time for the Q&A.

1385
01:06:57,600 --> 01:06:58,800
Please ask questions.

1386
01:06:58,800 --> 01:07:00,400
Put a q: in front of them.

1387
01:07:00,400 --> 01:07:02,900
If you have questions about what we did on the stream that you just

1388
01:07:02,900 --> 01:07:04,800
saw and you're confused about anything.

1389
01:07:06,200 --> 01:07:07,100
You saw happen.

1390
01:07:07,100 --> 01:07:09,400
Now, would be a great time to ask that question.

1391
01:07:09,400 --> 01:07:13,900
Put a q: in front of it, and I will answer it.

1392
01:07:19,800 --> 01:07:21,700
Effector streams a bit behind.

1393
01:07:21,700 --> 01:07:23,300
Okay, I will.

1394
01:07:23,300 --> 01:07:24,000
I will.

1395
01:07:24,000 --> 01:07:24,400
Yeah.

1396
01:07:25,400 --> 01:07:28,200
What do you use when you need something more Dynamic than Arenas,

1397
01:07:28,200 --> 01:07:31,000
default to Virtual Alec malloc something completely different?

1398
01:07:31,500 --> 01:07:34,700
The answer there is well first of all, you're actually probably going

1399
01:07:34,700 --> 01:07:40,300
to see that in a second Ron a second and in you know next week

1400
01:07:40,600 --> 01:07:41,600
probably honestly.

1401
01:07:42,800 --> 01:07:46,500
Because we do have one place in our code which needs something more

1402
01:07:46,500 --> 01:07:52,300
Dynamic and that is the asset memory management because the assets

1403
01:07:52,300 --> 01:07:54,300
themselves are dynamically sized.

1404
01:07:55,000 --> 01:07:59,600
And so as we pull them in and out of memory, we will want to try and

1405
01:07:59,600 --> 01:08:04,400
manage a block of memory coherently so that we can pull them in and

1406
01:08:04,400 --> 01:08:04,500
out.

1407
01:08:04,500 --> 01:08:07,700
Like I said, we have like a sea of virtual memory system problem,

1408
01:08:07,800 --> 01:08:11,600
where we need to make that work, right?

1409
01:08:11,800 --> 01:08:12,400
So you will.

1410
01:08:12,600 --> 01:08:14,100
Yes, do something like that.

1411
01:08:14,600 --> 01:08:19,100
But really, what I would say is a general-purpose allocator is totally

1412
01:08:19,100 --> 01:08:20,300
fine to have in your program.

1413
01:08:20,399 --> 01:08:26,500
We just, this is probably the only place that we really need it, which

1414
01:08:26,500 --> 01:08:27,899
is why you haven't seen me right one.

1415
01:08:29,100 --> 01:08:31,300
But there's nothing wrong with a general-purpose allocator.

1416
01:08:31,399 --> 01:08:33,899
What you would typically do is, you would say, how much memory do you

1417
01:08:33,899 --> 01:08:34,100
want?

1418
01:08:34,100 --> 01:08:36,300
The general purpose, I'll character use in general.

1419
01:08:37,000 --> 01:08:40,000
You'd make a block for that and then you just let it general-purpose

1420
01:08:40,000 --> 01:08:42,399
allocate out of there, right?

1421
01:08:42,500 --> 01:08:42,700
Right.

1422
01:08:43,200 --> 01:08:46,000
And so if you literally just don't know what your memory location

1423
01:08:46,000 --> 01:08:48,399
patterns are that is what you would do.

1424
01:08:49,300 --> 01:08:52,100
But 99% of the time, you know, exactly what your memory location

1425
01:08:52,100 --> 01:08:52,700
pattern is.

1426
01:08:53,000 --> 01:08:56,399
And so, what I try to kind of communicate to people is most of your

1427
01:08:56,399 --> 01:08:59,200
stuff can operate on an arena,

1428
01:09:00,000 --> 01:09:00,500
Should.

1429
01:09:01,600 --> 01:09:04,800
Because it's way way faster than a general-purpose alligator, right?

1430
01:09:06,200 --> 01:09:09,000
And way cleaner because you don't have to free individual things, you

1431
01:09:09,000 --> 01:09:12,500
can just free the whole thing as a group and that is actually probably

1432
01:09:12,500 --> 01:09:13,700
the most valuable part of it.

1433
01:09:13,800 --> 01:09:16,000
Because it means you don't have to worry about memory leaks or any of

1434
01:09:16,000 --> 01:09:16,600
this stuff.

1435
01:09:17,399 --> 01:09:19,100
It's just all together and works, right?

1436
01:09:19,600 --> 01:09:23,300
But if you actually have Random Access patterns going, a random

1437
01:09:23,300 --> 01:09:25,100
allocation patterns going on, there's nothing wrong with

1438
01:09:25,100 --> 01:09:26,100
general-purpose alligator.

1439
01:09:27,000 --> 01:09:27,700
It's totally fine.

1440
01:09:33,700 --> 01:09:34,399
Insofar as how.

1441
01:09:34,399 --> 01:09:36,700
Handmade are you going to go on the Linux version?

1442
01:09:37,800 --> 01:09:39,600
Probably not to handmade.

1443
01:09:39,600 --> 01:09:44,000
And the reason for that is Linux is extremely temperamental in terms

1444
01:09:44,000 --> 01:09:45,100
of its support for stuff.

1445
01:09:45,399 --> 01:09:50,300
And so we will probably try to do the thing that most games do, which

1446
01:09:50,300 --> 01:09:53,800
might be writing through sdl, it might be just writing through it

1447
01:09:53,800 --> 01:09:56,400
might be like looking at sdl because I think that's what most came

1448
01:09:56,400 --> 01:09:56,900
ship with.

1449
01:09:56,900 --> 01:10:01,100
I don't know and looking at which Services they're using and try to

1450
01:10:01,100 --> 01:10:02,600
use those same services.

1451
01:10:03,700 --> 01:10:07,000
Because basically Linux is very, very bad at application

1452
01:10:07,000 --> 01:10:07,900
compatibility.

1453
01:10:08,200 --> 01:10:15,100
And so we need to try and do whatever it is that most people are doing

1454
01:10:15,100 --> 01:10:17,300
because I think that's the only chance we really have of running

1455
01:10:17,300 --> 01:10:17,900
reliably.

1456
01:10:19,500 --> 01:10:23,000
So I suspect what we'll do is we'll like look at sdl go this is what

1457
01:10:23,000 --> 01:10:27,200
most games are probably doing how can we, you know, let's let's write,

1458
01:10:28,200 --> 01:10:32,200
you know, let's write to those apis, whatever they are like also or

1459
01:10:32,200 --> 01:10:36,000
pulse or I don't know what they use for sound, you know, and whatever.

1460
01:10:38,500 --> 01:10:40,900
You know, however, they interface with x's how will try to interface

1461
01:10:40,900 --> 01:10:41,300
with x.

1462
01:10:50,400 --> 01:10:52,000
What Squirtle kind of off topic.

1463
01:10:52,000 --> 01:10:53,400
But you usually have that much luck.

1464
01:10:53,400 --> 01:10:54,500
Not getting bugs.

1465
01:10:56,200 --> 01:10:58,600
Yeah, there's usually a well, there is a bug, right?

1466
01:10:58,600 --> 01:11:02,200
The Shadows didn't show up and that's usually, you know, I've been

1467
01:11:02,200 --> 01:11:05,000
programming for long enough that the times when I actually have stuff

1468
01:11:05,000 --> 01:11:05,800
that's just crazy.

1469
01:11:05,800 --> 01:11:07,500
Buggy is actually pretty low.

1470
01:11:08,800 --> 01:11:12,400
Because, you know, I just, I know how to avoid a lot of stuff and in

1471
01:11:12,400 --> 01:11:15,600
my head I'm tracking the right things, I guess, you know, but

1472
01:11:15,600 --> 01:11:17,400
everything's got some bugs, you know.

1473
01:11:17,500 --> 01:11:19,000
Like I said, there's no shadows in this one.

1474
01:11:19,000 --> 01:11:19,800
There's probably other.

1475
01:11:20,000 --> 01:11:22,100
Near that just hasn't reared its head yet, right?

1476
01:11:22,100 --> 01:11:27,000
There's like a hidden bug in there, you know, and so, you know yeah.

1477
01:11:27,000 --> 01:11:28,700
I mean these days like you seen on the stream.

1478
01:11:28,700 --> 01:11:31,500
A lot of times something works the not necessary the first time but

1479
01:11:31,500 --> 01:11:34,200
very close to the first time, that is pretty typical.

1480
01:11:34,200 --> 01:11:36,900
If you've been programming for, well it's not typical if you haven't,

1481
01:11:37,100 --> 01:11:37,400
right?

1482
01:11:37,400 --> 01:11:40,000
If it's if you're new to programming, that is not what will happen

1483
01:11:40,000 --> 01:11:41,800
because your brain isn't used to tracking all this stuff.

1484
01:11:41,800 --> 01:11:45,400
It needs to track, but even when you get to the point where I am,

1485
01:11:45,400 --> 01:11:46,100
where you've been programming.

1486
01:11:46,100 --> 01:11:47,600
So old, you know, you're old and crusty.

1487
01:11:47,600 --> 01:11:48,700
You've been programming so long.

1488
01:11:49,300 --> 01:11:49,800
You don't make

1489
01:11:49,900 --> 01:11:51,500
a lot of those basic mistakes.

1490
01:11:51,600 --> 01:11:52,800
You're still making mistakes.

1491
01:11:52,800 --> 01:11:55,400
So I guarantee you that, you know, there's mistakes in the code, we

1492
01:11:55,400 --> 01:11:57,600
just wrote and we will have to find them.

1493
01:11:58,300 --> 01:11:59,700
It's just as you

1494
01:12:00,000 --> 01:12:00,700
And more and more.

1495
01:12:00,700 --> 01:12:02,500
You will just have a lot less of them.

1496
01:12:02,500 --> 01:12:04,500
Every time you do something, right?

1497
01:12:04,600 --> 01:12:06,600
They'll be a little more subtle, only.

1498
01:12:06,600 --> 01:12:07,800
The subtle bugs will be there.

1499
01:12:07,800 --> 01:12:10,100
Only the non-obvious bugs will be there or whatever, right?

1500
01:12:10,300 --> 01:12:12,500
But that's just the nature of the game.

1501
01:12:12,600 --> 01:12:15,800
And like I said, you'll if you make a lot of, if you have a lot of

1502
01:12:15,800 --> 01:12:18,300
problems getting stuff to work the first time and you're tearing your

1503
01:12:18,300 --> 01:12:22,200
hair out, that's probably an experience thing that will go away as you

1504
01:12:22,200 --> 01:12:25,400
program more, but I don't know.

1505
01:12:25,400 --> 01:12:26,100
Anyone who writes?

1506
01:12:26,100 --> 01:12:28,500
Correct code the first time, no matter how, you know, all the time, no

1507
01:12:28,500 --> 01:12:29,800
matter how great they are.

1508
01:12:30,000 --> 01:12:31,000
It doesn't happen.

1509
01:12:31,500 --> 01:12:32,400
It doesn't happen for me.

1510
01:12:32,400 --> 01:12:33,600
It doesn't happen for anyone, I know.

1511
01:12:33,600 --> 01:12:38,400
So it's like there's a limit to what you'll be able to do in that

1512
01:12:38,500 --> 01:12:41,000
respect but it's fine.

1513
01:12:41,000 --> 01:12:43,300
You know, you can usually get to a place where it's okay and you don't

1514
01:12:43,300 --> 01:12:46,100
have too much and there's not too much to my going to do.

1515
01:13:02,500 --> 01:13:06,300
Do you usually Define an API just by implementing it or do you try to

1516
01:13:06,300 --> 01:13:07,900
define the interface first?

1517
01:13:08,500 --> 01:13:10,500
Plain flavored?

1518
01:13:12,700 --> 01:13:13,500
That.

1519
01:13:14,700 --> 01:13:18,400
Please tell me that you missed the past couple streams.

1520
01:13:19,400 --> 01:13:20,800
Please tell me that you missed all the streams.

1521
01:13:20,800 --> 01:13:22,300
In fact, I know you haven't though, because I've seen your ass

1522
01:13:22,300 --> 01:13:23,000
question before.

1523
01:13:23,300 --> 01:13:25,100
What do I always say?

1524
01:13:25,400 --> 01:13:27,100
What do I always say?

1525
01:13:28,700 --> 01:13:30,900
What do I always say, right?

1526
01:13:30,900 --> 01:13:32,300
The usage coach.

1527
01:13:32,300 --> 01:13:32,800
You know what?

1528
01:13:32,800 --> 01:13:33,900
That's not in big enough.

1529
01:13:37,300 --> 01:13:38,100
Where's my pen?

1530
01:13:42,900 --> 01:13:45,200
What day is today, day?

1531
01:13:45,300 --> 01:13:47,600
Oops, day.

1532
01:13:48,200 --> 01:13:53,400
150 to write the

1533
01:13:54,700 --> 01:13:56,000
Usage.

1534
01:13:57,200 --> 01:13:58,100
Code.

1535
01:14:00,200 --> 01:14:01,400
First.

1536
01:14:04,800 --> 01:14:07,900
This is the thing that you should be doing.

1537
01:14:08,200 --> 01:14:13,000
Always, always, always, always right?

1538
01:14:13,000 --> 01:14:14,300
The usage code first.

1539
01:14:15,300 --> 01:14:17,900
Like the only time I can think of where maybe you wouldn't write the

1540
01:14:17,900 --> 01:14:20,800
usage code first is if you literally have no idea, how the thing

1541
01:14:20,800 --> 01:14:23,900
you're calling works, you might need to experiment a bit to figure out

1542
01:14:23,900 --> 01:14:27,100
what you're actually even trying to build down to the lower level.

1543
01:14:27,200 --> 01:14:29,000
But even then, as soon as you know how it works.

1544
01:14:29,000 --> 01:14:32,000
Like as soon as you learned how the win32 file apis work at all,

1545
01:14:32,400 --> 01:14:37,300
immediately back to the regular code and write the usage code, first

1546
01:14:38,000 --> 01:14:41,600
always write the usage code first.

1547
01:14:41,600 --> 01:14:44,800
That's exactly what we did, right, you notice.

1548
01:14:45,100 --> 01:14:47,900
There was not a single piece of code in here, right?

1549
01:14:47,900 --> 01:14:51,500
I it would say we're just stubs and I had them all stubbed out and I

1550
01:14:51,500 --> 01:14:53,400
was like this is exactly what's going to have to happen.

1551
01:14:53,400 --> 01:14:56,000
Is these things are gonna have to do what they say they do, right?

1552
01:14:56,100 --> 01:14:58,800
Because I wrote the usage code first and then I just went over and

1553
01:14:58,800 --> 01:14:59,800
said that's the API.

1554
01:15:02,000 --> 01:15:05,100
And that is how you always, always, always always do it.

1555
01:15:05,100 --> 01:15:08,700
You write the user code first that defines the API and then you refine

1556
01:15:08,700 --> 01:15:11,000
the API based on things that have to happen.

1557
01:15:11,000 --> 01:15:13,300
When you do the implementation, like the implementation can then say,

1558
01:15:13,300 --> 01:15:14,900
Oh I can't quite support.

1559
01:15:15,000 --> 01:15:18,000
What the best API would have been for some reason, performance

1560
01:15:18,000 --> 01:15:18,400
something.

1561
01:15:18,400 --> 01:15:21,100
So I had to make a slight change and then you back Port that.

1562
01:15:21,200 --> 01:15:26,200
But you always, always, always always 100% of the time you never ever

1563
01:15:26,200 --> 01:15:28,800
do anything other than write, the usage code.

1564
01:15:28,800 --> 01:15:30,800
First that defines the

1565
01:15:31,100 --> 01:15:36,200
Pass API and then you modify it only slightly from there based on your

1566
01:15:36,200 --> 01:15:36,700
experience.

1567
01:15:36,700 --> 01:15:37,200
Implementing it.

1568
01:15:37,200 --> 01:15:39,800
That is what you must absolutely must do.

1569
01:15:49,900 --> 01:15:50,500
Can you cools?

1570
01:15:50,500 --> 01:15:52,200
Okay, now we real done.

1571
01:15:52,200 --> 01:15:56,400
Press question, super dumb like, nuking my non-existing reputation and

1572
01:15:56,400 --> 01:15:58,900
locking it down at the level of atomic dust.

1573
01:15:59,400 --> 01:16:01,100
What is usage code?

1574
01:16:01,100 --> 01:16:04,700
Basically everything down the line that awaits to be fed data, okay.

1575
01:16:04,700 --> 01:16:05,600
So, two things about that.

1576
01:16:05,600 --> 01:16:07,600
First of all, that is not a dumb question.

1577
01:16:08,900 --> 01:16:11,300
Second of all, don't worry about asking dumb questions.

1578
01:16:11,900 --> 01:16:14,900
Because, for example, if plane favorite had, not asked that question.

1579
01:16:14,900 --> 01:16:16,000
That was not a dumb question.

1580
01:16:16,100 --> 01:16:17,100
It was a smart question.

1581
01:16:17,300 --> 01:16:19,100
I was just disappointed because I

1582
01:16:19,200 --> 01:16:22,500
Him to have heard on the previous three me saying that, right?

1583
01:16:23,300 --> 01:16:26,300
It is much better to ask that question so that we can re go over it

1584
01:16:26,300 --> 01:16:30,000
and drill it in because this is really one of the most important

1585
01:16:30,000 --> 01:16:31,000
things in programming.

1586
01:16:32,100 --> 01:16:33,900
You can never really asked that question enough.

1587
01:16:33,900 --> 01:16:36,100
If you haven't internalized it yet, if you haven't internalized,

1588
01:16:36,100 --> 01:16:40,100
something about what I said, please ask those questions because you

1589
01:16:40,100 --> 01:16:41,600
must internalize it.

1590
01:16:41,600 --> 01:16:43,400
It is the most important thing.

1591
01:16:43,600 --> 01:16:45,200
There are plenty of things we do on the stream.

1592
01:16:45,200 --> 01:16:48,200
That maybe you don't internalized or don't have to internalize, or it

1593
01:16:48,200 --> 01:16:49,000
will take you a long time sir.

1594
01:16:49,200 --> 01:16:51,700
This is the one you must internalized.

1595
01:16:51,700 --> 01:16:53,500
It is so important.

1596
01:16:53,600 --> 01:16:55,500
So I will explain what usage code is.

1597
01:16:57,100 --> 01:16:59,600
All right so in this case,

1598
01:17:00,700 --> 01:17:05,800
What we had was we knew we had an asset file, and I wanted to read in

1599
01:17:05,800 --> 01:17:07,700
the data from that asset file and use it.

1600
01:17:07,700 --> 01:17:09,700
That's what I was trying to accomplish.

1601
01:17:10,200 --> 01:17:14,700
I knew I needed a new API on the platform side for that because we had

1602
01:17:14,700 --> 01:17:18,600
never defined a platform API for actually working with files that stay

1603
01:17:18,600 --> 01:17:19,700
open, right?

1604
01:17:19,700 --> 01:17:21,700
The only thing that we have in the platform there were saying that

1605
01:17:21,700 --> 01:17:25,100
reads a whole file in in memory at once and that's exactly what we're

1606
01:17:25,100 --> 01:17:25,700
not trying to do.

1607
01:17:25,700 --> 01:17:27,200
We're trying to read little pieces out.

1608
01:17:27,300 --> 01:17:30,400
So the question was, what new API should I put on.

1609
01:17:30,500 --> 01:17:31,500
Platform layer.

1610
01:17:32,400 --> 01:17:32,900
Right?

1611
01:17:34,000 --> 01:17:35,600
What new API should I use their?

1612
01:17:36,400 --> 01:17:37,200
So, a couple questions.

1613
01:17:37,200 --> 01:17:38,600
How did I know that was the API?

1614
01:17:38,600 --> 01:17:39,300
How did I know that?

1615
01:17:39,300 --> 01:17:42,100
That side of the code was the API and not this side, right?

1616
01:17:42,400 --> 01:17:46,300
Well, the reason is because, which one will get reused, right?

1617
01:17:46,300 --> 01:17:50,000
Which one is like a new little language that we're defining that

1618
01:17:50,000 --> 01:17:52,600
people who want to do something will use again?

1619
01:17:52,800 --> 01:17:55,300
No one's going to use this again, right?

1620
01:17:55,400 --> 01:17:58,200
It's a piece of code, that's entirely self-contained inside this

1621
01:17:58,200 --> 01:17:59,300
allocate game assets thing, right?

1622
01:17:59,300 --> 01:17:59,800
It's not an

1623
01:18:00,000 --> 01:18:03,700
Yeah, it's a whole list of things we're doing to put ourselves into a

1624
01:18:03,700 --> 01:18:04,200
correct position.

1625
01:18:04,200 --> 01:18:06,600
So we know this isn't an API, right?

1626
01:18:07,400 --> 01:18:10,300
The API was this function and we've already got it, right?

1627
01:18:11,300 --> 01:18:14,700
So the other side is the thing that we might use multiple times,

1628
01:18:14,700 --> 01:18:19,100
anytime we need to read a file, we need this API to work, right?

1629
01:18:19,400 --> 01:18:22,500
And so what we want to do is since we know that it might be something

1630
01:18:22,500 --> 01:18:24,300
that gets reused, right?

1631
01:18:24,600 --> 01:18:26,600
We know that it's something that we might need to use multiple times

1632
01:18:26,600 --> 01:18:29,300
in this place, you know, anytime our code needs to call to the

1633
01:18:29,300 --> 01:18:30,600
platform, how to get file stuff.

1634
01:18:30,800 --> 01:18:31,800
It's gonna have to do this.

1635
01:18:32,400 --> 01:18:35,200
What we want to do is make sure that it's set up to be as easy as

1636
01:18:35,200 --> 01:18:39,000
possible for our code, on the use of side to use it so that it fits

1637
01:18:39,000 --> 01:18:41,000
slots in nicely in the Apu API.

1638
01:18:41,100 --> 01:18:41,900
What we want.

1639
01:18:41,900 --> 01:18:44,800
And also so that the part of the code that's written multiple times,

1640
01:18:44,800 --> 01:18:49,300
which is the part that calls the API will be as clean as possible

1641
01:18:49,300 --> 01:18:51,900
because there's only going to be one implementation of the API.

1642
01:18:52,000 --> 01:18:55,000
But, potentially, multiple people who call it, right?

1643
01:18:55,100 --> 01:18:58,100
And in fact, you can see that already, how many calls to read data

1644
01:18:58,100 --> 01:18:58,600
from file?

1645
01:18:58,600 --> 01:19:02,100
Are there already in just our asset loading system?

1646
01:19:02,200 --> 01:19:02,600
Right?

1647
01:19:02,700 --> 01:19:03,400
Look at all those.

1648
01:19:04,100 --> 01:19:06,300
So we want to make that call.

1649
01:19:07,600 --> 01:19:09,900
Easy to do and do the correct thing?

1650
01:19:10,800 --> 01:19:15,500
And we don't care how complicated this is because we only write it

1651
01:19:15,500 --> 01:19:19,700
once when you write something five times in one place and once

1652
01:19:19,700 --> 01:19:20,800
somewhere else, right?

1653
01:19:20,800 --> 01:19:23,500
It's the summer else that you want to be more complicated because you

1654
01:19:23,500 --> 01:19:27,000
want the most complicated stuff to be constructed in debunked once.

1655
01:19:27,500 --> 01:19:31,700
Whereas, if I were to push complexity or ugliness out of this somehow

1656
01:19:32,400 --> 01:19:36,500
into here, I would have multiplied the complexity and the error-prone

1657
01:19:36,500 --> 01:19:38,500
is of that thing times five.

1658
01:19:40,400 --> 01:19:40,900
Okay.

1659
01:19:41,900 --> 01:19:44,600
And that is the crucial thing to understand about API design.

1660
01:19:44,800 --> 01:19:50,800
You need to push the complexity and the error-prone things down into

1661
01:19:50,800 --> 01:19:54,300
where they are written the fewest number of times.

1662
01:19:56,800 --> 01:20:00,700
Okay, so that is how you define who's on which side of an API

1663
01:20:00,700 --> 01:20:04,800
boundary, who is the person who is doing something once, and who is

1664
01:20:04,800 --> 01:20:07,400
the person who's doing it many times, right?

1665
01:20:07,900 --> 01:20:09,800
That is what that is, right?

1666
01:20:09,800 --> 01:20:12,600
It's the caller going to the Kali, okay?

1667
01:20:14,100 --> 01:20:16,600
So that's how we know the call should be going that direction.

1668
01:20:17,500 --> 01:20:18,600
That's how we did that.

1669
01:20:18,800 --> 01:20:21,300
And so what I say by writing the usage code is okay.

1670
01:20:21,500 --> 01:20:26,600
Now what I want to do a lot of people, what they do, a lot of

1671
01:20:26,600 --> 01:20:29,800
programmers, what they do is then they go, okay, I need an API for

1672
01:20:29,800 --> 01:20:30,500
reading files.

1673
01:20:30,500 --> 01:20:33,700
Okay, let's go make a thing for reading files, right?

1674
01:20:33,700 --> 01:20:36,100
And they open up an h-file and they're like doodlee.

1675
01:20:36,100 --> 01:20:39,100
Do you know, file API and they're like, I don't know.

1676
01:20:39,200 --> 01:20:40,800
Let's make something that reads a file.

1677
01:20:40,800 --> 01:20:43,700
So we make a Bool here and I say, you know,

1678
01:20:43,800 --> 01:20:48,300
You file and that's going to take like the the file to read write and

1679
01:20:48,300 --> 01:20:52,400
it's going to take the size of the phyllo and I need to seek, you

1680
01:20:52,400 --> 01:20:55,500
know, things have a seek in file apis, right or whatever.

1681
01:20:55,600 --> 01:20:59,800
And they write some API out and then they go in the implement it.

1682
01:21:00,700 --> 01:21:02,900
We're still, they might implement it and then test it.

1683
01:21:03,000 --> 01:21:05,900
So they spent a tremendous amount of time developing this thing,

1684
01:21:06,300 --> 01:21:06,600
right?

1685
01:21:06,600 --> 01:21:09,300
At least the amount of time that we actually needed to take and then

1686
01:21:09,300 --> 01:21:13,700
plus potentially much more and they have no idea if it actually does

1687
01:21:13,700 --> 01:21:14,500
what they want.

1688
01:21:14,600 --> 01:21:18,500
They have no idea because they have never actually written any code

1689
01:21:18,500 --> 01:21:19,600
that actually uses it.

1690
01:21:19,600 --> 01:21:23,900
They're just going on like some vague cloudy notion in their head

1691
01:21:24,400 --> 01:21:28,600
about what this API might do because what are the capabilities that

1692
01:21:28,600 --> 01:21:29,400
could have, right?

1693
01:21:29,400 --> 01:21:29,800
It's like

1694
01:21:30,000 --> 01:21:31,500
like, I don't know, it's a file API.

1695
01:21:31,500 --> 01:21:32,300
What can files do?

1696
01:21:32,300 --> 01:21:34,400
Let's just start making stuff that files do right?

1697
01:21:35,300 --> 01:21:36,500
Bad, bad bad.

1698
01:21:36,500 --> 01:21:39,500
What you actually want to do if you want are on the other side of the

1699
01:21:39,500 --> 01:21:42,700
API, pretend you have no idea what the API is.

1700
01:21:42,800 --> 01:21:44,600
You don't even know what it.

1701
01:21:44,600 --> 01:21:45,500
You have no idea.

1702
01:21:46,000 --> 01:21:48,600
You just need to get the entire notion of it out of your head.

1703
01:21:48,900 --> 01:21:51,800
And then what you do is you just write the code, you were trying to

1704
01:21:51,800 --> 01:21:55,500
write at the time that you decided you needed this API and you write

1705
01:21:55,500 --> 01:21:57,800
exactly what you want it to do for you.

1706
01:21:58,400 --> 01:21:59,900
And you can see that that was exactly what.

1707
01:22:00,000 --> 01:22:01,300
I did on stream, right?

1708
01:22:01,400 --> 01:22:03,200
I went through here and I said, okay,

1709
01:22:04,300 --> 01:22:05,100
here's what we're going to do.

1710
01:22:05,700 --> 01:22:09,300
I'm going to start writing the code as if I'm writing the actual final

1711
01:22:09,300 --> 01:22:10,100
asset loader.

1712
01:22:10,900 --> 01:22:12,000
What do I want to do?

1713
01:22:12,200 --> 01:22:15,900
I want it to get all of the HHS out of, you know, that this game can

1714
01:22:15,900 --> 01:22:16,200
run.

1715
01:22:16,400 --> 01:22:18,700
So I just flat-out said that right?

1716
01:22:19,000 --> 01:22:22,600
I just flat-out said, get all the files of the type right because I

1717
01:22:22,600 --> 01:22:28,300
don't need the API to expose how that's done and that's crucial,

1718
01:22:28,300 --> 01:22:28,700
right.

1719
01:22:28,700 --> 01:22:31,500
We could have started, fiddling all sorts of stuff in here with like

1720
01:22:31,500 --> 01:22:34,000
okay, open a directory, like

1721
01:22:34,100 --> 01:22:36,800
Give me a path to a directory and iterate the files in the directory.

1722
01:22:37,000 --> 01:22:39,700
That would have been awful because then we're exporting all of these

1723
01:22:39,700 --> 01:22:42,900
Notions of what a directory is, how to iterate over them.

1724
01:22:42,900 --> 01:22:43,500
What happens?

1725
01:22:43,500 --> 01:22:45,700
Then when we want to iterate over h, a files that are in two

1726
01:22:45,700 --> 01:22:48,900
locations, like the person's memory card and their console hard drive

1727
01:22:48,900 --> 01:22:49,400
or something.

1728
01:22:49,400 --> 01:22:52,500
Right now, all of a sudden that has to be bubbled up into the, the

1729
01:22:52,500 --> 01:22:56,000
app, and it has to be the app, has to know how to do that for all the

1730
01:22:56,000 --> 01:22:58,400
possible platforms of, oh, it's a Cloud State.

1731
01:22:58,400 --> 01:23:01,500
Like, there's all the stuff that happens there, we don't want that.

1732
01:23:01,500 --> 01:23:02,100
Right?

1733
01:23:02,300 --> 01:23:03,900
So what instead I'm doing is I'm saying,

1734
01:23:04,100 --> 01:23:05,400
What do I actually want?

1735
01:23:05,400 --> 01:23:07,700
What do I actually need the platform layer to tell me?

1736
01:23:08,100 --> 01:23:09,400
I just needed to tell me?

1737
01:23:09,500 --> 01:23:11,300
What are all the H files?

1738
01:23:11,300 --> 01:23:14,400
I could open, that's all I need, right?

1739
01:23:15,500 --> 01:23:16,700
So, give me those back.

1740
01:23:16,700 --> 01:23:19,200
And then I said, okay, for each one of those, I need you to give me

1741
01:23:19,200 --> 01:23:20,800
the header, right?

1742
01:23:20,800 --> 01:23:21,500
How am I going to get that?

1743
01:23:21,500 --> 01:23:24,400
Well, I need to read data from it, right, and I also going to need the

1744
01:23:24,400 --> 01:23:26,700
asset type array, so I was like, okay, that's the same thing, right?

1745
01:23:26,700 --> 01:23:28,100
I just I don't need two different calls for that.

1746
01:23:28,100 --> 01:23:29,800
I can tell they're the same call, cause I'm just like, well, I'm just

1747
01:23:29,800 --> 01:23:30,700
reading data from a file.

1748
01:23:30,800 --> 01:23:31,900
Here's where I want to read it.

1749
01:23:31,900 --> 01:23:32,300
There's so much.

1750
01:23:32,300 --> 01:23:33,900
I wanna read put it here, right.

1751
01:23:34,100 --> 01:23:34,300
Right?

1752
01:23:35,100 --> 01:23:37,600
So I defined that and of course, yeah, I needed a way to open the

1753
01:23:37,600 --> 01:23:37,800
file.

1754
01:23:37,800 --> 01:23:40,500
So I said, hey, give me a handle the file because I need a way to

1755
01:23:40,500 --> 01:23:41,700
reference this, right?

1756
01:23:41,800 --> 01:23:45,000
I need to way to go from the list of files to a specific file.

1757
01:23:45,100 --> 01:23:46,800
So that's what I typed, right?

1758
01:23:47,200 --> 01:23:50,100
Then at the end I was like, well, okay, I need some way to tell you.

1759
01:23:50,100 --> 01:23:51,600
I'm done right?

1760
01:23:51,600 --> 01:23:54,500
I'm done with this iteration and really, I could have not written

1761
01:23:54,500 --> 01:23:55,000
that.

1762
01:23:55,000 --> 01:23:57,700
And then later we could have ping-pong back when the API and the other

1763
01:23:57,700 --> 01:23:59,900
side says, oh, I kind of need to know when I'm done and then I

1764
01:24:00,000 --> 01:24:02,700
Didn't we could have done that but I just kind of knew from intuition.

1765
01:24:02,700 --> 01:24:05,200
I was like, well, I should probably announce what I'm done so that

1766
01:24:05,200 --> 01:24:07,700
because it's going to be some Resource Management probably on the side

1767
01:24:07,800 --> 01:24:09,900
and it probably would like to know, right?

1768
01:24:09,900 --> 01:24:12,600
So I that was just a courtesy call, really, but we could have left

1769
01:24:12,600 --> 01:24:14,200
that out and then we would have implemented.

1770
01:24:14,200 --> 01:24:17,200
The win32 thing saw that we needed to know when it was done and came

1771
01:24:17,200 --> 01:24:17,600
back here.

1772
01:24:17,600 --> 01:24:19,700
So you didn't you didn't need to know.

1773
01:24:19,700 --> 01:24:22,000
You didn't need to have the experience that I've had a no.

1774
01:24:22,200 --> 01:24:24,000
Oh, I've been planned these sorts of things before do it.

1775
01:24:24,000 --> 01:24:25,900
You could have left that out and you would have ping-pong back here

1776
01:24:25,900 --> 01:24:26,100
and go.

1777
01:24:26,100 --> 01:24:29,900
Okay, now I'll make a slight change to the way I wrote the code just a

1778
01:24:30,000 --> 01:24:31,600
in this one line, right?

1779
01:24:32,500 --> 01:24:33,400
We come down here.

1780
01:24:33,500 --> 01:24:36,700
Everything else I needed was entirely based off of stuff we already

1781
01:24:36,700 --> 01:24:37,300
had right?

1782
01:24:37,400 --> 01:24:38,900
Oh, and the platform, no file errors.

1783
01:24:39,100 --> 01:24:39,700
That was perfect.

1784
01:24:39,700 --> 01:24:40,900
I was like, oh, you know what?

1785
01:24:40,900 --> 01:24:43,700
I don't want to check the error value on every file because I don't

1786
01:24:43,700 --> 01:24:45,100
care which one's of them failed.

1787
01:24:45,200 --> 01:24:47,500
If any of them failed, the game's over, right?

1788
01:24:47,500 --> 01:24:51,400
I can't keep operating on half a red file, that's not going to work,

1789
01:24:51,400 --> 01:24:51,900
right?

1790
01:24:52,000 --> 01:24:55,100
So then I know I don't want these things to reflect like this is

1791
01:24:55,100 --> 01:24:55,400
wrong.

1792
01:24:55,400 --> 01:24:58,100
I don't want this to return a Bool because I'm never gonna look at

1793
01:24:58,100 --> 01:24:58,700
that fool.

1794
01:24:58,700 --> 01:24:59,900
What I wanted to do is remember,

1795
01:25:00,000 --> 01:25:01,700
Number if it ever had a problem.

1796
01:25:01,900 --> 01:25:04,800
And if it had the problem, then I'm just going to stop, right?

1797
01:25:04,800 --> 01:25:06,400
I'm just going to say, okay, that files done.

1798
01:25:06,400 --> 01:25:07,400
We're never touching it again.

1799
01:25:07,400 --> 01:25:08,100
Don't look at it.

1800
01:25:08,100 --> 01:25:09,600
Don't don't breathe on it.

1801
01:25:09,700 --> 01:25:11,500
Don't you know, do anything?

1802
01:25:11,500 --> 01:25:12,700
Don't try to coax it back to the light.

1803
01:25:12,700 --> 01:25:13,300
It's done.

1804
01:25:13,300 --> 01:25:14,100
Right report.

1805
01:25:14,100 --> 01:25:18,000
An error to the user and say, bro, your files are messed, right?

1806
01:25:18,100 --> 01:25:19,300
You got problems.

1807
01:25:21,300 --> 01:25:26,800
I did the little like, you know, who has two thumbs and a corrupt file

1808
01:25:26,800 --> 01:25:27,300
system.

1809
01:25:27,500 --> 01:25:28,100
This guy

1810
01:25:29,400 --> 01:25:31,800
I guess I did guns guns are not the same as the air.

1811
01:25:31,800 --> 01:25:34,700
Well, okay, sorry, my I'm not very, very good, bro.

1812
01:25:34,800 --> 01:25:36,400
I don't even like football, right?

1813
01:25:36,500 --> 01:25:38,400
Like that doesn't work.

1814
01:25:38,600 --> 01:25:40,100
So, anyway, point being

1815
01:25:41,800 --> 01:25:44,800
That's what we did and that is the example of writing the usage code

1816
01:25:44,800 --> 01:25:45,200
first.

1817
01:25:45,200 --> 01:25:49,600
It means write the thing that you were trying to do write it as if you

1818
01:25:49,600 --> 01:25:52,700
have the API that makes the most sense for that code.

1819
01:25:52,900 --> 01:25:54,500
Get that code into a nice.

1820
01:25:55,100 --> 01:25:57,600
Well reading like it looks nice and clean.

1821
01:25:57,600 --> 01:25:59,900
It does all the things you wanted to do it just in the way you want

1822
01:25:59,900 --> 01:26:04,000
them done and then at that moment when you're like, that looks good.

1823
01:26:04,000 --> 01:26:05,200
That's what I'm happy with.

1824
01:26:05,200 --> 01:26:06,100
I could ship this.

1825
01:26:06,100 --> 01:26:10,500
I believe this would be good that is when you then cut and paste these

1826
01:26:10,500 --> 01:26:10,900
API.

1827
01:26:11,100 --> 01:26:14,800
Balls into a new file and that defines the API right there, and that's

1828
01:26:14,800 --> 01:26:15,000
again.

1829
01:26:15,000 --> 01:26:16,300
Exactly did on the stream.

1830
01:26:16,500 --> 01:26:18,900
It was a little more complicated than it normally is because I had to

1831
01:26:18,900 --> 01:26:20,500
make it go through the platform layer.

1832
01:26:20,700 --> 01:26:23,100
So normally we would just cut paste them into directly to see filings

1833
01:26:23,100 --> 01:26:24,300
influence them right there, right?

1834
01:26:24,300 --> 01:26:27,500
So it's a little quicker that way normally, but so we had to give that

1835
01:26:27,500 --> 01:26:30,000
little layer of like how to route them through because it's

1836
01:26:30,000 --> 01:26:32,500
platform-specific but that was it right?

1837
01:26:33,000 --> 01:26:36,600
So hopefully that answers the question and again do not feel

1838
01:26:36,600 --> 01:26:38,500
self-conscious about asking questions about that.

1839
01:26:38,600 --> 01:26:40,900
It is absolutely the most important thing there.

1840
01:26:41,000 --> 01:26:42,600
Is no question about that.

1841
01:26:42,600 --> 01:26:46,000
That is not worth asking if you don't understand, because you have to

1842
01:26:46,000 --> 01:26:48,800
understand that to be a good programmer, and there's so many

1843
01:26:48,800 --> 01:26:50,200
programmers who don't understand it.

1844
01:26:50,200 --> 01:26:54,300
So many most, I would say, most people who make their living as a

1845
01:26:54,300 --> 01:26:58,000
programmer, do not understand that, and it is like the number one

1846
01:26:58,000 --> 01:26:59,800
cause of bad code.

1847
01:27:00,400 --> 01:27:04,500
The number one cause there are plenty of causes but that is the one

1848
01:27:04,500 --> 01:27:08,300
that you absolutely must get, right?

1849
01:27:08,300 --> 01:27:12,000
And it is so prevalent that it is not done correctly.

1850
01:27:12,500 --> 01:27:13,600
That really honestly.

1851
01:27:13,600 --> 01:27:17,500
It is like number one headspace thing for sure.

1852
01:27:23,500 --> 01:27:26,300
Do you feel that a lot of the common programs they have bloated code

1853
01:27:26,600 --> 01:27:30,200
and or that coders need to learn to simplify barebone their code?

1854
01:27:30,600 --> 01:27:31,800
I don't know if I'd say Bare Bones.

1855
01:27:31,800 --> 01:27:34,100
But yes not like most of the code is written.

1856
01:27:34,100 --> 01:27:35,500
Today is massively bloated.

1857
01:27:43,500 --> 01:27:46,900
Gaston 5 doesn't anticipate the usage of the API, required Decades of

1858
01:27:46,900 --> 01:27:47,400
work.

1859
01:27:48,300 --> 01:27:51,100
I don't know that I'd say that obviously, you get better at it over

1860
01:27:51,100 --> 01:27:51,800
time, but

1861
01:27:53,600 --> 01:27:56,200
Not really because you can talk it out, right?

1862
01:27:56,200 --> 01:27:57,400
Like here's an example.

1863
01:27:57,400 --> 01:27:59,500
Let's, let's talk about an example of something.

1864
01:27:59,500 --> 01:28:01,200
Like, if you didn't know it, right?

1865
01:28:01,500 --> 01:28:04,900
So, if you didn't know anything about the game asset file at all,

1866
01:28:05,100 --> 01:28:05,700
right?

1867
01:28:05,800 --> 01:28:09,500
And you, I just asked you to describe to me in English, what was going

1868
01:28:09,500 --> 01:28:10,700
on, right?

1869
01:28:10,800 --> 01:28:13,500
You would have said something like what?

1870
01:28:13,500 --> 01:28:14,800
I wrote for the API, right?

1871
01:28:14,800 --> 01:28:16,100
You would have said, you know?

1872
01:28:16,200 --> 01:28:23,100
Well, okay, first, I need to know what all the, you know.

1873
01:28:23,400 --> 01:28:27,100
Those are that I'm going to load, right?

1874
01:28:27,200 --> 01:28:33,100
You would have said like okay then I need to load the headers of each

1875
01:28:33,100 --> 01:28:37,600
file because I need to know what's in them, right?

1876
01:28:38,300 --> 01:28:44,600
You know so I got a load that right, then I need to allocate space to

1877
01:28:44,600 --> 01:28:45,400
store everything.

1878
01:28:46,500 --> 01:28:47,100
Right.

1879
01:28:47,500 --> 01:28:51,800
Then, I need to load in the tags, right?

1880
01:28:51,800 --> 01:28:52,600
We have the tags.

1881
01:28:53,600 --> 01:28:56,500
Then I need to load in the assets, right?

1882
01:28:57,400 --> 01:29:00,900
And when you look at what you type out, what you just think, if

1883
01:29:00,900 --> 01:29:02,300
through, like what does that have to do?

1884
01:29:02,400 --> 01:29:05,000
It Maps like really close, right?

1885
01:29:05,200 --> 01:29:08,100
I'm like, okay first, I need to know what files going to load.

1886
01:29:08,100 --> 01:29:09,600
We did that right.

1887
01:29:09,700 --> 01:29:12,700
Then I need to go through them and load the headers, which is what we

1888
01:29:12,700 --> 01:29:13,800
did, right?

1889
01:29:13,800 --> 01:29:16,000
And as I'm typing, this

1890
01:29:16,500 --> 01:29:20,600
I have all the things that I needed except for these parts.

1891
01:29:20,700 --> 01:29:21,200
Right.

1892
01:29:21,300 --> 01:29:24,700
So it's not hard to figure out what part is the API.

1893
01:29:24,800 --> 01:29:27,700
It doesn't take Decades of experience for that because it's just as

1894
01:29:27,700 --> 01:29:30,800
soon as you couldn't do something like as soon as I say first, I need

1895
01:29:30,800 --> 01:29:31,300
to know if I lose.

1896
01:29:31,300 --> 01:29:33,700
I'm going to load I'm like, well, wait, we don't have any way to get

1897
01:29:33,700 --> 01:29:34,100
that.

1898
01:29:34,700 --> 01:29:36,200
We have no way to get that, right?

1899
01:29:37,000 --> 01:29:39,200
That's the first API call, right?

1900
01:29:39,200 --> 01:29:40,000
So there it is.

1901
01:29:40,000 --> 01:29:43,700
I was just like, I don't have any way to get that I baited up, right?

1902
01:29:43,800 --> 01:29:45,900
That's when like Snuffleupagus comes over.

1903
01:29:46,300 --> 01:29:48,900
Like your imaginary friend is there and he's whatever you want them to

1904
01:29:48,900 --> 01:29:49,500
be right.

1905
01:29:49,500 --> 01:29:52,600
It's like I don't know how to write any code that does this with what

1906
01:29:52,600 --> 01:29:54,400
we currently have because I don't have those services.

1907
01:29:54,400 --> 01:29:56,500
So I just made it up right.

1908
01:29:57,200 --> 01:29:59,700
Snuffleupagus gets the files, we then start writing.

1909
01:30:00,100 --> 01:30:01,800
I knew how to do the rest of this stuff, right?

1910
01:30:01,800 --> 01:30:04,400
I'm like, okay, I'm assuming that I got back the set of files.

1911
01:30:04,400 --> 01:30:05,700
I don't know what they look like, I don't care.

1912
01:30:05,700 --> 01:30:08,100
So I'm just going to say I got an array Loop over it because we can

1913
01:30:08,100 --> 01:30:09,900
always change this, and we don't care, right?

1914
01:30:10,000 --> 01:30:11,800
It could be anything if the platform layer.

1915
01:30:11,800 --> 01:30:14,200
In fact, when we go and implement this, we may change the

1916
01:30:14,200 --> 01:30:15,400
implementation that it doesn't matter.

1917
01:30:15,400 --> 01:30:17,800
The important part is just this Loop that I can Loop over them

1918
01:30:17,800 --> 01:30:18,300
somehow.

1919
01:30:18,400 --> 01:30:20,300
So I just wrote the simplest possible thing.

1920
01:30:20,600 --> 01:30:21,200
And there we go.

1921
01:30:22,100 --> 01:30:25,100
When I go through your, I'm like, okay, I've gotta open the file like,

1922
01:30:25,100 --> 01:30:27,300
I've got to actually have a way to talk about the file.

1923
01:30:27,500 --> 01:30:29,700
So I need a way to translate the index.

1924
01:30:30,600 --> 01:30:33,100
Of the file that I'm, you know, when I'm looping over these, I have to

1925
01:30:33,300 --> 01:30:39,100
translate the index right into an actual thing I can make requests of.

1926
01:30:39,700 --> 01:30:41,900
And so, again, I don't have any way to do that.

1927
01:30:42,100 --> 01:30:44,700
So Snuffleupagus comes and gets it to me.

1928
01:30:44,800 --> 01:30:46,300
So, I just said platform, open file.

1929
01:30:46,400 --> 01:30:47,200
All right, there we go.

1930
01:30:47,300 --> 01:30:47,700
It's going to.

1931
01:30:48,100 --> 01:30:49,000
I don't know what's going to do.

1932
01:30:49,100 --> 01:30:51,100
I still don't know what's gonna be having implemented it, right?

1933
01:30:51,300 --> 01:30:54,400
I've no idea how Snuffleupagus the file, he just gets it, he pulls it

1934
01:30:54,400 --> 01:30:55,500
out of snout, I don't care.

1935
01:30:55,500 --> 01:30:58,600
The point is, I know that I've got a file group and it has some number

1936
01:30:58,600 --> 01:30:59,100
of files in it.

1937
01:30:59,100 --> 01:30:59,800
So I'm just going to say,

1938
01:31:00,100 --> 01:31:01,000
I need file 5.

1939
01:31:01,500 --> 01:31:03,100
Get it for me, right?

1940
01:31:04,300 --> 01:31:04,800
Same thing here.

1941
01:31:04,800 --> 01:31:06,100
I'm like, I want to read the header.

1942
01:31:06,200 --> 01:31:07,100
How are you the header?

1943
01:31:07,100 --> 01:31:07,700
I don't know.

1944
01:31:07,900 --> 01:31:09,800
We don't have any way to read the header stuff.

1945
01:31:09,800 --> 01:31:11,100
August, read the header.

1946
01:31:11,200 --> 01:31:12,800
That's what this call was, right?

1947
01:31:12,800 --> 01:31:15,800
We could have called it read the header and then later, when I typed

1948
01:31:15,800 --> 01:31:18,700
in read the asset array, I would have been like oh hey these are the

1949
01:31:18,700 --> 01:31:20,300
same call, right?

1950
01:31:20,300 --> 01:31:23,600
They're both just something that takes an offset a size at a thing

1951
01:31:23,600 --> 01:31:26,400
because that's what I do and again you don't need to necessarily know

1952
01:31:26,400 --> 01:31:27,900
anything about a file API to do that.

1953
01:31:28,000 --> 01:31:28,800
You just have to know.

1954
01:31:29,200 --> 01:31:30,700
I need to get this data out of the file.

1955
01:31:31,300 --> 01:31:33,700
Are you get the data from this offset, this much of it.

1956
01:31:33,700 --> 01:31:34,000
I need to

1957
01:31:34,100 --> 01:31:35,900
Here, that's all you need to know.

1958
01:31:36,100 --> 01:31:37,600
That's all I wrote, right?

1959
01:31:37,700 --> 01:31:38,600
Just exactly that.

1960
01:31:38,600 --> 01:31:39,400
Just straight ahead.

1961
01:31:39,400 --> 01:31:40,700
Didn't think anything about it.

1962
01:31:41,800 --> 01:31:43,500
Because anything that I would think about it.

1963
01:31:43,500 --> 01:31:44,500
Just going to complicate it.

1964
01:31:44,600 --> 01:31:47,500
What I want to do is tell Snuffleupagus exactly what I wanted.

1965
01:31:47,900 --> 01:31:50,300
I don't want to think about what stuff is going to have to do.

1966
01:31:51,000 --> 01:31:54,000
I just want to think about what I wanted Snuffleupagus to do I say

1967
01:31:54,000 --> 01:31:58,000
Snuffleupagus, get me the file is that the end of the thinking, right?

1968
01:31:58,100 --> 01:31:59,500
Snuffleupagus, read this part of the file.

1969
01:31:59,500 --> 01:32:00,500
That's the end of the thinking.

1970
01:32:01,500 --> 01:32:05,000
And then later on the second pass through, right?

1971
01:32:05,700 --> 01:32:10,100
We can always fine tune those to reflect the needs of Snuffleupagus.

1972
01:32:10,900 --> 01:32:13,600
Certainly, I don't think, I'm neglecting stop loving us.

1973
01:32:13,900 --> 01:32:16,800
But the first pass on the right, the use of code, we don't think about

1974
01:32:16,800 --> 01:32:17,200
stuff like this.

1975
01:32:17,200 --> 01:32:20,500
You just going to show up and do what we want.

1976
01:32:21,000 --> 01:32:21,600
Right?

1977
01:32:22,200 --> 01:32:27,500
And so again that's the crucial part of it and if you weren't, if you

1978
01:32:27,500 --> 01:32:30,800
don't have very much experience, maybe you type in something here,

1979
01:32:30,800 --> 01:32:33,700
that's like, impossible to fulfill your just like you say something

1980
01:32:33,700 --> 01:32:34,500
that can't happen.

1981
01:32:35,000 --> 01:32:38,000
When you go to do the implementation, you'll find that out and then

1982
01:32:38,000 --> 01:32:39,800
that's a fine time to just refine it.

1983
01:32:39,800 --> 01:32:40,400
So you don't have to

1984
01:32:40,700 --> 01:32:42,000
Hundred percent, right?

1985
01:32:42,600 --> 01:32:44,000
And so that's the thing that I want to.

1986
01:32:44,100 --> 01:32:49,300
It's a very mental, very English, you know, process a logistical

1987
01:32:49,600 --> 01:32:53,100
simple thinking process that's kind of like what you would do in the

1988
01:32:53,100 --> 01:32:53,700
real world.

1989
01:32:53,700 --> 01:32:55,300
I want to do this, I'm gonna do this.

1990
01:32:55,300 --> 01:32:58,300
I'm gonna do this and every time you say that I want to do something

1991
01:32:58,400 --> 01:32:59,800
and you don't have a way to do it.

1992
01:33:00,400 --> 01:33:03,300
That's a new API, right?

1993
01:33:04,400 --> 01:33:05,600
And that's the usage code.

1994
01:33:14,800 --> 01:33:18,500
Can you kill says so basically when you're about to make shoes for

1995
01:33:18,500 --> 01:33:20,400
Monster you don't assume how many legs are toes.

1996
01:33:20,400 --> 01:33:23,400
It has you just let it stop around and then use the footprints to make

1997
01:33:23,400 --> 01:33:24,100
the shoes.

1998
01:33:24,700 --> 01:33:26,400
That's pretty much exactly, right?

1999
01:33:28,300 --> 01:33:28,600
Hmm.

2000
01:33:45,300 --> 01:33:48,900
James Woodman suggestion call this Snuffy oriented programming

2001
01:33:49,600 --> 01:33:51,600
Snuffleupagus oriented programming.

2002
01:33:51,800 --> 01:33:55,200
I would be totally psyched if for some reason, right, the use of code

2003
01:33:55,200 --> 01:33:59,400
first became called Snuffleupagus oriented programming, I would be

2004
01:33:59,400 --> 01:34:03,500
more than happy to to.

2005
01:34:04,000 --> 01:34:09,100
I don't know how you spell that Snuffleupagus.

2006
01:34:15,600 --> 01:34:17,100
so, let's just say,

2007
01:34:22,300 --> 01:34:23,700
So, it's stopped.

2008
01:34:24,800 --> 01:34:25,400
Right.

2009
01:34:33,900 --> 01:34:39,000
This code was written using Snuffleupagus oriented programming,

2010
01:34:39,600 --> 01:34:40,500
something like that.

2011
01:34:51,600 --> 01:34:52,900
All right, all right.

2012
01:34:52,900 --> 01:34:58,500
We are over time because well, frankly, the question that someone

2013
01:34:58,500 --> 01:35:01,000
thought was stupid, none of those questions were stupid.

2014
01:35:01,100 --> 01:35:03,400
They were actually very good and I'm very happy.

2015
01:35:03,400 --> 01:35:06,300
They were asked because I feel like every so often it's very good to

2016
01:35:06,300 --> 01:35:06,700
restate.

2017
01:35:06,700 --> 01:35:09,900
This because again, we talked about a lot of stuff on here, there's a

2018
01:35:10,100 --> 01:35:15,800
lot to learn and it really it doesn't, it doesn't help learning to say

2019
01:35:15,800 --> 01:35:19,100
something once and then just let it sit forever and assume that people

2020
01:35:19,100 --> 01:35:20,800
just magically pick up all the important stuff.

2021
01:35:20,800 --> 01:35:21,100
That's

2022
01:35:21,500 --> 01:35:22,600
How learning works, right?

2023
01:35:22,600 --> 01:35:24,700
Learning works by seeing something multiple times.

2024
01:35:25,300 --> 01:35:27,200
And so it's always good to reinforce these things and go.

2025
01:35:27,200 --> 01:35:30,200
Hey, you know what, we talked about right in the usage code, let's

2026
01:35:30,200 --> 01:35:32,500
talk about it again because if there's one thing we can never talk

2027
01:35:32,500 --> 01:35:34,300
about too much, it's that right?

2028
01:35:34,700 --> 01:35:35,900
And so I think that was very good.

2029
01:35:35,900 --> 01:35:37,100
I'm glad we went over that.

2030
01:35:37,100 --> 01:35:41,900
Hopefully if you had some kind of confusion in your mind about how

2031
01:35:41,900 --> 01:35:44,600
this stuff worked, hopefully we've gotten a little closer now to you

2032
01:35:44,600 --> 01:35:46,100
going like, oh okay, I get it.

2033
01:35:46,100 --> 01:35:48,900
Like that's how I can do this this process.

2034
01:35:49,100 --> 01:35:51,100
And you know, the closer the

2035
01:35:51,300 --> 01:35:53,800
the more you do it, the better you'll get at it and the more you'll

2036
01:35:53,800 --> 01:35:59,000
see how helpful it really is, I use it everyday even in code that I've

2037
01:35:59,000 --> 01:35:59,700
written before

2038
01:36:00,000 --> 01:36:02,900
Always do it this way because everything is a little bit different and

2039
01:36:02,900 --> 01:36:06,500
there's always room for improvement and everything and so I always

2040
01:36:06,500 --> 01:36:09,000
like to kind of revisit that usage code and go okay.

2041
01:36:09,000 --> 01:36:09,800
What can I do here?

2042
01:36:09,800 --> 01:36:10,600
What's this problem?

2043
01:36:10,600 --> 01:36:13,400
Trying to say like how do I want this to work?

2044
01:36:13,500 --> 01:36:15,500
Let me refine the apis even further.

2045
01:36:15,600 --> 01:36:18,500
I constantly revisit that and always think about the usage code.

2046
01:36:18,800 --> 01:36:21,800
So, I always write it first and I always keep it in mind later as I'm

2047
01:36:21,800 --> 01:36:22,600
doing stuff.

2048
01:36:22,600 --> 01:36:23,800
How can I make the users code better?

2049
01:36:23,800 --> 01:36:28,200
Because again every time usage, code happens, many times API code

2050
01:36:28,200 --> 01:36:28,900
happens once.

2051
01:36:29,100 --> 01:36:29,900
So if you can make

2052
01:36:30,000 --> 01:36:34,300
Improvements there you're saving yourself a lot of problem and these

2053
01:36:34,300 --> 01:36:38,300
frustration and bugs and everything, you know, if you can push the

2054
01:36:38,300 --> 01:36:42,900
complexity into the single use code rather than the multi-use code.

2055
01:36:43,800 --> 01:36:47,000
All right, so that said, let's go ahead and wrap up for today.

2056
01:36:50,600 --> 01:36:51,500
Let's see here.

2057
01:36:51,800 --> 01:36:54,100
Close this down our stuff lepidus orange.

2058
01:36:54,300 --> 01:36:55,100
Look at that.

2059
01:36:55,400 --> 01:36:56,400
That was so cute.

2060
01:36:56,800 --> 01:37:00,100
Well Snuffleupagus image from my childhood there.

2061
01:37:01,200 --> 01:37:05,000
I'm so old that Snuffleupagus was still completely imaginary.

2062
01:37:05,000 --> 01:37:07,600
Like he wasn't no one had seen him but big bird.

2063
01:37:07,600 --> 01:37:10,800
I feel like that's not true anymore, but yeah.

2064
01:37:11,300 --> 01:37:14,600
So anyway, okay, we'll go ahead and close up Lagos and the read file

2065
01:37:14,600 --> 01:37:15,200
function.

2066
01:37:16,300 --> 01:37:19,100
Thank you everyone for joining me, for another episode of handmade

2067
01:37:19,100 --> 01:37:19,300
hero.

2068
01:37:19,300 --> 01:37:25,000
It's been a pleasure coding with you, as always, if you know, if you

2069
01:37:25,500 --> 01:37:29,000
are someone who likes to play around with things like to experiment,

2070
01:37:29,800 --> 01:37:32,200
and you would like to play around with a hero source code, you can

2071
01:37:32,200 --> 01:37:33,000
always get it.

2072
01:37:33,200 --> 01:37:36,000
If you preorder handmade Hero on hand a hero to org.

2073
01:37:36,100 --> 01:37:37,200
It comes to the source code.

2074
01:37:37,400 --> 01:37:40,200
So you can go ahead and play around with it at home and learn from it,

2075
01:37:40,400 --> 01:37:42,400
and it's pretty handy way to do that.

2076
01:37:43,100 --> 01:37:44,700
We also have a forum site.

2077
01:37:44,700 --> 01:37:45,900
We can go to ask questions

2078
01:37:46,100 --> 01:37:49,400
And we had also has an entire episode guide stuff like that.

2079
01:37:50,100 --> 01:37:51,000
I highly recommend checking it out.

2080
01:37:51,000 --> 01:37:52,900
It's got ports to Mac and Linux by the community, as well.

2081
01:37:52,900 --> 01:37:55,100
If you're trying to follow along a different platform, we have a

2082
01:37:55,100 --> 01:37:57,300
patreon page, want to just support the video series.

2083
01:37:57,600 --> 01:38:02,200
So as much appreciated it's a place, you can subscribe just to support

2084
01:38:02,200 --> 01:38:02,900
the video series.

2085
01:38:03,300 --> 01:38:05,200
We also have a tweetbot the tweets, the schedule at you.

2086
01:38:05,700 --> 01:38:09,500
So if you would like to be aware of, when we're going to be doing the

2087
01:38:09,500 --> 01:38:13,500
live streams, you know, which days of that week and what hours of

2088
01:38:13,500 --> 01:38:15,700
stuff, the tweetbot has got your back.

2089
01:38:15,700 --> 01:38:15,900
So,

2090
01:38:16,100 --> 01:38:17,000
Check that out.

2091
01:38:17,300 --> 01:38:18,400
It's the right way to go.

2092
01:38:18,900 --> 01:38:20,500
So, thanks everyone for joining me.

2093
01:38:21,000 --> 01:38:22,300
We will be back here again.

2094
01:38:22,300 --> 01:38:23,300
Tomorrow, 5:00 p.m.

2095
01:38:23,300 --> 01:38:25,300
Pacific Standard Time, pacific, daylight time.

2096
01:38:25,300 --> 01:38:32,400
Sorry, and I will also be speaking this Thursday at the Intel Buzz

2097
01:38:32,400 --> 01:38:33,100
Workshop.

2098
01:38:33,100 --> 01:38:36,300
So for any of you who are in Seattle, who want to come by and say hi,

2099
01:38:37,000 --> 01:38:39,500
that's going to be happening this Thursday as well.

2100
01:38:39,800 --> 01:38:44,000
And so hopefully I'll see some people there that maybe watch The

2101
01:38:44,000 --> 01:38:44,400
Stream.

2102
01:38:45,000 --> 01:38:46,000
So until tomorrow,

2103
01:38:46,100 --> 01:38:47,100
I'll see you guys in the internet.

2104
01:38:47,100 --> 01:38:50,800
Have fun programming and have a good rest of your Monday.

2105
01:38:50,800 --> 01:38:51,500
Take it easy, everyone.

