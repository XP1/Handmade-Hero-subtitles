1
00:00:01,800 --> 00:00:03,700
Hello, everyone, and welcome to handmade hero.

2
00:00:03,700 --> 00:00:06,200
The show we could have complete game live on stream.

3
00:00:06,300 --> 00:00:09,900
I it's going to be a slightly shorter stream today than it.

4
00:00:09,900 --> 00:00:14,800
Normally is maybe about 20 minutes shorter or so only because I just

5
00:00:14,800 --> 00:00:16,300
didn't want to push it too long.

6
00:00:16,300 --> 00:00:19,400
I only wanted to stay on stream for about two hours or so, rather than

7
00:00:19,400 --> 00:00:23,400
two-and-a-half or three, which sometimes I do just because I was

8
00:00:23,400 --> 00:00:27,600
pretty sick over the past two days and I'm only now, just just now

9
00:00:27,600 --> 00:00:30,900
feeling better, I was still feeling pretty lousy last night actually,

10
00:00:30,900 --> 00:00:31,300
but

11
00:00:31,600 --> 00:00:34,300
Feeling okay today but I don't want to push it.

12
00:00:35,400 --> 00:00:38,700
So I am going to do it, a little shorter than normal, but other than

13
00:00:38,700 --> 00:00:42,600
that, we should have a normal programming day before I get started, I

14
00:00:42,600 --> 00:00:45,600
did want to re mention I mentioned it last week, but just figured two

15
00:00:45,600 --> 00:00:47,000
weeks just to be sure.

16
00:00:47,500 --> 00:00:52,300
I want to mention that the folks over at handmade Network who as you

17
00:00:52,300 --> 00:00:57,200
know, build the site that we use to post the handmade hero for him.

18
00:00:57,300 --> 00:00:59,100
No, you do not need to show me an ad right now.

19
00:01:01,200 --> 00:01:04,700
They have just finished, adding their open project submission.

20
00:01:05,200 --> 00:01:09,600
And if you are somebody who's working on a project, that you feel like

21
00:01:09,600 --> 00:01:12,600
is appropriate for hosting over here at handmade Network.

22
00:01:12,600 --> 00:01:17,000
So if it's a project that you feel like is about to the kitten

23
00:01:17,000 --> 00:01:19,500
programming and, you know, caring about programming in that sort of

24
00:01:19,500 --> 00:01:25,500
thing, and wanting to spread the sort of that sort of, for better, for

25
00:01:25,500 --> 00:01:26,200
lack of a better term.

26
00:01:26,200 --> 00:01:28,500
The ethics of like, you know, being serious about programming and

27
00:01:28,500 --> 00:01:33,900
trying to do really high quality software that they have got a submit

28
00:01:33,900 --> 00:01:34,800
a project button now.

29
00:01:34,800 --> 00:01:35,000
And

30
00:01:35,200 --> 00:01:38,600
So all you have to do is just register on the site, if you haven't

31
00:01:38,600 --> 00:01:39,600
already, which you may have.

32
00:01:39,600 --> 00:01:42,500
If you've ever used a handmade hero forums, then your username and

33
00:01:42,500 --> 00:01:45,900
password from there, we'll work and they'll be a submit button here.

34
00:01:45,900 --> 00:01:48,700
So you can submit a project for consideration.

35
00:01:48,700 --> 00:01:52,700
And then they, you know, if the project gets picked up it'll get

36
00:01:52,700 --> 00:01:58,500
hosted on here with along with all of these other projects that are on

37
00:01:58,500 --> 00:02:02,300
here, a lot of pretty cool projects already on here, tweet with see is

38
00:02:02,300 --> 00:02:02,700
pretty cool.

39
00:02:02,700 --> 00:02:05,000
It shows how to write a Twitter client, too.

40
00:02:05,200 --> 00:02:11,400
We from C using just using the curl dll, which you can download pretty

41
00:02:11,400 --> 00:02:12,800
easily SUV.

42
00:02:12,800 --> 00:02:16,800
Libraries, of course, Sean Barrett's collection of libraries for doing

43
00:02:16,800 --> 00:02:19,800
all sorts of great stuff that are really easy to integrate for coder.

44
00:02:19,800 --> 00:02:24,300
The editor we use on stream, it was also got Milton on here which is

45
00:02:24,300 --> 00:02:25,000
the drawing package.

46
00:02:25,000 --> 00:02:28,300
We use on stream and we're just here it is.

47
00:02:29,700 --> 00:02:31,000
And so, there's just a lot of stuff on there.

48
00:02:31,000 --> 00:02:31,600
That's pretty cool.

49
00:02:31,600 --> 00:02:32,700
Including a bunch of projects.

50
00:02:32,700 --> 00:02:36,000
I have not checked out yet because a lot of them are still, you know,

51
00:02:36,000 --> 00:02:41,300
there that might be pretty early in, in their development, right.

52
00:02:41,300 --> 00:02:43,800
There is some ones on here that I'm particularly excited about.

53
00:02:43,800 --> 00:02:47,800
Just there's there's a couple of debugging projects and I don't know

54
00:02:47,800 --> 00:02:50,700
how much they'll come to fruition or not, write any time you start a

55
00:02:50,700 --> 00:02:53,100
piece of software, you never know what how it will come out.

56
00:02:53,500 --> 00:02:55,800
But if any of these debugger projects come out.

57
00:02:56,000 --> 00:02:59,000
Well, that's going to be pretty exciting to, I think, because I would

58
00:02:59,000 --> 00:02:59,100
love

59
00:02:59,200 --> 00:02:59,900
of to have more options.

60
00:03:00,000 --> 00:03:03,500
For debugging and windows than I have right now because it's kind of a

61
00:03:03,500 --> 00:03:05,700
little bit constrictive the way it is right now.

62
00:03:05,900 --> 00:03:09,600
Anyway, I just wanted to make everyone aware of that if they weren't

63
00:03:09,600 --> 00:03:10,100
already.

64
00:03:10,500 --> 00:03:12,800
So if you're someone who's working on a project that you think would

65
00:03:12,800 --> 00:03:16,600
be a good fit for the site, you can now just go ahead and submit it.

66
00:03:17,300 --> 00:03:20,200
And that's really all you have to do.

67
00:03:20,900 --> 00:03:21,800
So, that's it for that.

68
00:03:21,800 --> 00:03:24,900
And now we can move on to the handmade heroing.

69
00:03:24,900 --> 00:03:29,700
Today is day 358, we have one minor issue, it was

70
00:03:30,000 --> 00:03:31,500
Just an oversight on my part.

71
00:03:31,500 --> 00:03:35,700
We did all the work for this, but I forgot I even said it that we

72
00:03:35,700 --> 00:03:41,000
needed to cast a particular, we need to cast function from a const to

73
00:03:41,000 --> 00:03:45,600
a non cons care in order to pass it so that we could be clang safe and

74
00:03:45,600 --> 00:03:48,200
we just missed that one issue.

75
00:03:48,200 --> 00:03:50,900
So we're going to take care of that and then we will be on to 3D.

76
00:03:50,900 --> 00:03:53,800
That's again, it'll just take a quick second to oops.

77
00:03:53,800 --> 00:03:54,600
That's not what we want.

78
00:03:54,600 --> 00:03:55,000
It all.

79
00:03:56,600 --> 00:03:58,100
Don't even know why that's still there.

80
00:03:58,600 --> 00:03:59,100
That's a good.

81
00:03:59,200 --> 00:03:59,900
That's a good.

82
00:04:00,000 --> 00:04:01,300
And let's just get rid of that.

83
00:04:01,500 --> 00:04:02,000
There we go.

84
00:04:02,900 --> 00:04:06,200
All right, so let's go ahead and jump in here.

85
00:04:06,200 --> 00:04:10,500
I'm going to go ahead and open up for a coder, and I'm going to grab

86
00:04:10,500 --> 00:04:11,500
that project file.

87
00:04:12,100 --> 00:04:16,300
And again, I'm just going to go in really quickly and change that one.

88
00:04:16,600 --> 00:04:17,700
That's not what I wanted.

89
00:04:17,700 --> 00:04:18,500
That's what I wanted.

90
00:04:18,800 --> 00:04:20,800
I'm going to change that one piece right there.

91
00:04:20,800 --> 00:04:25,300
You can see where we use function because you can sort of see that is

92
00:04:25,300 --> 00:04:28,600
if my head was not in the way you can sort of see, there's almost

93
00:04:28,600 --> 00:04:29,800
nowhere where it gets you.

94
00:04:29,900 --> 00:04:30,300
Used.

95
00:04:32,200 --> 00:04:32,700
Right.

96
00:04:33,200 --> 00:04:34,900
It's only this one location.

97
00:04:35,100 --> 00:04:38,500
And so what I'm going to do is I'm just going to pass the care stars

98
00:04:38,600 --> 00:04:40,100
as necessary in here.

99
00:04:40,800 --> 00:04:44,400
Now the debug name where we pass the care star, this doesn't actually

100
00:04:44,400 --> 00:04:45,900
get used, I believe.

101
00:04:46,300 --> 00:04:50,100
So if you look at what do you bug named, does we stopped using that

102
00:04:50,100 --> 00:04:53,500
thing that gets passed down and we left it in as a vestigial remain

103
00:04:53,500 --> 00:04:56,200
only because we would we would have loved to have been able to put it

104
00:04:56,200 --> 00:04:59,800
there and our whole system was working with it being put there but of

105
00:04:59,800 --> 00:05:01,000
course GCC and clang.

106
00:05:01,000 --> 00:05:01,900
Ruined our fun by making

107
00:05:02,000 --> 00:05:04,300
Can it not be an actual predefined strength?

108
00:05:05,800 --> 00:05:12,100
It's actually a variable, it's actually a like as if it was a static

109
00:05:12,600 --> 00:05:17,700
constant string inside the function that you're in which is kind of a

110
00:05:17,700 --> 00:05:18,100
bummer.

111
00:05:18,600 --> 00:05:21,300
So anyway we had to undo that but here is the only thing that I think

112
00:05:21,300 --> 00:05:22,900
we have to change, and that's it.

113
00:05:22,900 --> 00:05:25,600
So let's just go ahead and get that going.

114
00:05:25,600 --> 00:05:32,300
I'm going to say all right, this should be fixed as a day 358.

115
00:05:32,500 --> 00:05:35,100
Please let me know if it

116
00:05:35,700 --> 00:05:40,900
Doesn't resolve all outstanding playing issues.

117
00:05:42,400 --> 00:05:49,600
Thanks again, Casey Kim has been amazing at telling us the stuff we

118
00:05:49,600 --> 00:05:50,000
need to do.

119
00:05:50,000 --> 00:05:51,900
So, is Martin's up here.

120
00:05:51,900 --> 00:05:55,700
Martin's posted a, I don't remember where it was, but Martin's posted

121
00:05:55,700 --> 00:05:56,000
here.

122
00:05:56,500 --> 00:05:57,300
No, I don't know.

123
00:05:57,300 --> 00:05:58,800
Martin's posted something somewhere else.

124
00:05:58,800 --> 00:05:59,900
I guess, a

125
00:06:00,000 --> 00:06:04,900
The things to fix and it was great because I think now we just

126
00:06:04,900 --> 00:06:07,900
compiled on clang out of the box because we fixed all the things that

127
00:06:07,900 --> 00:06:10,500
were not clang compliant.

128
00:06:11,200 --> 00:06:14,200
And I wanted to do that for the folks who like to compile the code

129
00:06:14,200 --> 00:06:18,100
base on clang because there's no reason for us not to support that the

130
00:06:18,100 --> 00:06:20,900
compilers aren't that different at the end of the day so it's not

131
00:06:20,900 --> 00:06:24,700
really if you're careful it's not in you know if you're careful and

132
00:06:24,700 --> 00:06:27,500
don't use a ton of C++ like advanced stuff.

133
00:06:28,100 --> 00:06:29,700
One of the things that's generally true.

134
00:06:30,100 --> 00:06:32,200
In the past is like Microsoft C.

135
00:06:32,200 --> 00:06:36,700
Compiler tends to not be as compliant with the C++ standards as it

136
00:06:36,700 --> 00:06:40,900
gets updated as does clanging, clangs tends to be really up-to-date on

137
00:06:40,900 --> 00:06:43,500
those sorts of things so you can definitely get into situations.

138
00:06:43,500 --> 00:06:48,500
Usually the other way around where if you know you're super super C++

139
00:06:48,500 --> 00:06:52,300
person in like to use all the latest features on clang, you pretty

140
00:06:52,300 --> 00:06:55,500
much always can on Visual Studio.

141
00:06:55,500 --> 00:06:59,600
You may lag a bit and so when you're you know, if you're on claying

142
00:06:59,600 --> 00:06:59,800
doing

143
00:07:00,000 --> 00:07:03,800
You're crazy C++ stuff and then you bring that code base over to

144
00:07:04,000 --> 00:07:04,800
visual studio.

145
00:07:04,800 --> 00:07:07,800
You may find that a whole bunch of features you were using just aren't

146
00:07:07,800 --> 00:07:10,500
in yet and you can either cross your fingers and hope that they'll

147
00:07:10,500 --> 00:07:13,600
issue an update sometime soon, the fixes them or you just have to stop

148
00:07:13,600 --> 00:07:14,600
using those features, right?

149
00:07:14,600 --> 00:07:19,900
So that does pose a problem, sometimes going the other way is usually

150
00:07:19,900 --> 00:07:22,800
not a problem going, the other way, it's usually just small things

151
00:07:22,800 --> 00:07:23,300
like this.

152
00:07:23,300 --> 00:07:27,600
Like using a couple things that maybe not quite standard and they work

153
00:07:27,600 --> 00:07:29,700
on visual studio and they don't work on.

154
00:07:31,000 --> 00:07:34,700
On on clang, for whatever reason, and you got to kind of sort that out

155
00:07:34,700 --> 00:07:37,800
or there's warnings like clang doesn't like the way you cast something

156
00:07:37,800 --> 00:07:39,300
and visual Studios, okay with it.

157
00:07:39,600 --> 00:07:42,100
So it's usually just more like minutiae like that going the other way.

158
00:07:42,100 --> 00:07:43,800
So usually there's no real reason.

159
00:07:43,900 --> 00:07:46,600
If you're already compiling on Visual Studio, it should be relatively

160
00:07:46,600 --> 00:07:49,700
straightforward for you to make sure that you can compile on clang as

161
00:07:49,700 --> 00:07:52,900
well, because the chances that the compliance on clang are is not as

162
00:07:52,900 --> 00:07:54,700
good as visual Studios low, right?

163
00:07:57,000 --> 00:07:59,000
If you're sticking to just standard stuff.

164
00:08:00,400 --> 00:08:05,700
Okay, so let's talk about where we're at today because I think at this

165
00:08:05,700 --> 00:08:10,000
point, I would like to get started on 3D stuff and just talking about

166
00:08:10,000 --> 00:08:12,500
sort of what our goal is for the next couple weeks.

167
00:08:13,800 --> 00:08:17,100
And this is pretty much the last time I think that I'm going to really

168
00:08:17,100 --> 00:08:18,000
do any work.

169
00:08:18,400 --> 00:08:19,900
That's not gameplay related.

170
00:08:19,900 --> 00:08:22,900
So after this, I think I'm going to go ahead and move on to just

171
00:08:22,900 --> 00:08:24,700
Implement in-game stuff as much as I am loath to do.

172
00:08:24,700 --> 00:08:28,400
So, as I've said many times, I would much prefer to just write engine

173
00:08:28,400 --> 00:08:29,800
code forever and have

174
00:08:29,900 --> 00:08:30,600
Somebody else, right?

175
00:08:30,600 --> 00:08:34,799
The game, but that's not really an option for obvious reasons, since

176
00:08:34,799 --> 00:08:36,400
I'm the only person here.

177
00:08:37,299 --> 00:08:40,500
So, you know, will program the game as well and we'll just, you know,

178
00:08:40,500 --> 00:08:41,299
muddle through it.

179
00:08:42,400 --> 00:08:45,600
I'm sure we'll do a fine job at the programming since I know how to

180
00:08:45,600 --> 00:08:46,000
program.

181
00:08:46,000 --> 00:08:49,000
But you know our game design is not going to be the best game design

182
00:08:49,000 --> 00:08:49,300
in the world.

183
00:08:49,300 --> 00:08:53,100
That's just the way that it goes when you are not a game designer but

184
00:08:53,100 --> 00:08:53,900
I'm okay with that.

185
00:08:53,900 --> 00:08:57,100
The goal for this is to have all the programming documented and to

186
00:08:57,100 --> 00:08:59,700
give good programming resources and hey all the source code will be

187
00:09:00,000 --> 00:09:04,300
So those of you that are Saucy game / designers will always be able to

188
00:09:04,300 --> 00:09:07,900
improve it after it is done as well or make your own games on top of

189
00:09:07,900 --> 00:09:08,300
it.

190
00:09:09,600 --> 00:09:12,500
As I said, many times the source code to the entire game will be

191
00:09:12,500 --> 00:09:13,900
released into the public domain.

192
00:09:14,400 --> 00:09:16,700
No, later than two years after it's released.

193
00:09:16,800 --> 00:09:20,900
So the entire code base can be used for other things at that point as

194
00:09:20,900 --> 00:09:22,100
well, at least at that point.

195
00:09:22,100 --> 00:09:26,200
If not sooner, I could leave myself open to link to releasing it

196
00:09:26,500 --> 00:09:27,100
sooner than that.

197
00:09:27,100 --> 00:09:27,900
Just not later.

198
00:09:29,800 --> 00:09:34,100
So, let's just talk about what I wanted to do here so that it's clear.

199
00:09:37,400 --> 00:09:43,900
So, we implemented a tire Pipeline and that pipeline is partially 3D

200
00:09:43,900 --> 00:09:44,800
partially, too deep.

201
00:09:46,100 --> 00:09:48,300
So what do we what do we essentially do?

202
00:09:48,800 --> 00:09:54,400
So the way that we created things at the present time is we sort of

203
00:09:54,400 --> 00:09:58,700
have an idea of a 3D World and that 3D world is really.

204
00:09:58,700 --> 00:10:03,400
In fact 3D, we actually support like 3D bounding boxes and stuff like

205
00:10:03,400 --> 00:10:05,300
that and 3D Collision.

206
00:10:06,400 --> 00:10:11,900
And a particular person or entity in the game of any kind tree human,

207
00:10:11,900 --> 00:10:17,600
whatever can be at any location in the 3D worlds and they can move in

208
00:10:17,600 --> 00:10:18,000
3D.

209
00:10:18,000 --> 00:10:22,200
So somebody can can literally like hop up in 3D and do sorts of all

210
00:10:22,200 --> 00:10:23,400
sorts of crazy stuff.

211
00:10:23,400 --> 00:10:23,700
Who knows?

212
00:10:23,700 --> 00:10:24,100
What

213
00:10:25,800 --> 00:10:30,000
And then at some point we kind of switched over to 2D and where we

214
00:10:30,000 --> 00:10:32,300
switch over to 2D is a little bit hazy.

215
00:10:33,000 --> 00:10:37,100
Not what I don't mean to say that, we don't understand it because we

216
00:10:37,100 --> 00:10:37,400
wrote it.

217
00:10:37,400 --> 00:10:42,800
So obviously we you know, we know what the transition is but it's hazy

218
00:10:42,800 --> 00:10:46,100
in the sense that it doesn't kind of there isn't like a hard line

219
00:10:46,100 --> 00:10:48,000
where it comes over to from 3D to 2D.

220
00:10:48,200 --> 00:10:51,600
It's sort of just like at the entity boundary where entities get

221
00:10:51,600 --> 00:10:54,900
output and then what happens after that, there's definitely a place

222
00:10:54,900 --> 00:10:55,400
where everything

223
00:10:55,500 --> 00:10:55,900
In 2D.

224
00:10:55,900 --> 00:10:59,400
But there's also kind of a middle crafty area where things are sort of

225
00:10:59,400 --> 00:11:00,800
in 3D sort of in 2D.

226
00:11:02,200 --> 00:11:07,900
Okay, and then we have an entire 2D sort of pipeline where we've got

227
00:11:07,900 --> 00:11:11,200
things like Sprites that that get sorted.

228
00:11:11,200 --> 00:11:16,100
So, you know, we're now looking at the screen and these Sprites get

229
00:11:16,100 --> 00:11:20,200
sorted based on like, where they overlap, and we actually build graphs

230
00:11:20,200 --> 00:11:22,900
to determine, you know, like what the sort order should be, when

231
00:11:22,900 --> 00:11:24,900
multiple things overlap and all this sort of stuff.

232
00:11:25,800 --> 00:11:28,300
And essentially what I found when doing this

233
00:11:31,800 --> 00:11:35,400
And you have to remember, I'm not a 2-D game programmer, I'm really a

234
00:11:35,400 --> 00:11:36,400
3D game programmer.

235
00:11:38,800 --> 00:11:45,500
I've almost never, I've never really worked much on a serious 2D

236
00:11:45,800 --> 00:11:51,600
system and so, you know, I didn't have any idea ahead of time about

237
00:11:51,600 --> 00:11:54,000
how this would go or whether I would like it, right?

238
00:11:54,700 --> 00:11:56,100
Because it was a new thing for me.

239
00:11:56,100 --> 00:11:59,800
I'm used to rendering things in 3D for the most part.

240
00:12:00,400 --> 00:12:05,200
And I'm not used to having a switch to 2D at any point, really.

241
00:12:06,300 --> 00:12:12,200
And so this the to dienes of it ended up being kind of distasteful to

242
00:12:12,200 --> 00:12:13,400
me for a number of reasons.

243
00:12:14,100 --> 00:12:16,400
One is, I did not like the sort.

244
00:12:16,600 --> 00:12:20,100
I thought the sort the the concept that I had to build graphs that

245
00:12:20,100 --> 00:12:23,500
things and sort them is really bad.

246
00:12:23,500 --> 00:12:26,800
And the reason that I think that it's really bad is because I think it

247
00:12:26,800 --> 00:12:28,800
really puts some hard constraints

248
00:12:29,800 --> 00:12:33,200
On the number of Sprites you can have on the screen at once.

249
00:12:33,400 --> 00:12:37,900
And while this doesn't pose a problem presently for us because we're

250
00:12:37,900 --> 00:12:39,200
not really pushing it.

251
00:12:40,400 --> 00:12:43,900
I don't see a lot of options for doing some things that I probably

252
00:12:43,900 --> 00:12:47,400
will want to do in the future, like you no more aggressive use of the

253
00:12:47,400 --> 00:12:50,100
particle systems and things like that.

254
00:12:50,100 --> 00:12:52,900
And right now we don't have a problem because the particle systems

255
00:12:52,900 --> 00:12:56,500
don't spawn, you know, hundreds of particles that are all overlapping.

256
00:12:57,100 --> 00:12:59,500
But if we were to do that, if we were to spawn,

257
00:12:59,600 --> 00:13:03,400
Rules of particles that are all overlapping those would form connected

258
00:13:03,400 --> 00:13:08,300
graphs that have to get sorted and that's just it's just pushing a lot

259
00:13:08,300 --> 00:13:14,800
of logistical sort of work on to the CPU that I'm really nervous about

260
00:13:15,000 --> 00:13:18,300
and I feel like it will just constrain what we can do graphically in

261
00:13:18,300 --> 00:13:18,900
the game.

262
00:13:20,200 --> 00:13:22,000
And so I really didn't like that.

263
00:13:22,000 --> 00:13:25,800
And I also didn't like the fact that we didn't have the ability to use

264
00:13:25,800 --> 00:13:27,200
perspective properly.

265
00:13:28,600 --> 00:13:29,500
I, you know, I've

266
00:13:29,600 --> 00:13:30,900
Kind of gone back and forth on this.

267
00:13:30,900 --> 00:13:35,900
I still don't really know how I feel about it, but I do kind of feel

268
00:13:35,900 --> 00:13:39,500
like I would like at least the option of experimenting more with

269
00:13:39,500 --> 00:13:43,800
allowing, the perspective to actually be more natural than it is.

270
00:13:44,400 --> 00:13:47,900
And for example, having it so that we could do, you know, our dungeon

271
00:13:47,900 --> 00:13:51,600
wall sort of stuff looking more like this sort of thing.

272
00:13:52,400 --> 00:13:56,300
And when you move left to right having it actually shift, I don't

273
00:13:56,300 --> 00:13:56,600
know.

274
00:13:56,600 --> 00:13:59,400
I don't like the fact that we've sort of ham

275
00:13:59,600 --> 00:14:04,700
Ourselves into only being able to do sort of much more rigid upright

276
00:14:04,700 --> 00:14:07,700
stuff because I don't know, just having looked at it and play with a

277
00:14:07,700 --> 00:14:08,000
little bit.

278
00:14:08,000 --> 00:14:10,900
I don't know that that's really the best answer there.

279
00:14:10,900 --> 00:14:13,700
And so I also felt like that was a little constricting.

280
00:14:15,300 --> 00:14:18,400
So what I wanted to do is I want to say all right, look, I'm just

281
00:14:18,400 --> 00:14:20,400
going to call that an experiment that failed.

282
00:14:21,200 --> 00:14:25,700
It's not that there's anything in particular wrong with it because

283
00:14:28,100 --> 00:14:29,400
plenty of games ship this

284
00:14:29,500 --> 00:14:35,500
Sway, you know, all the old arcade games didn't have a z-buffer or

285
00:14:35,500 --> 00:14:41,000
anything like this, so you can trivially continue down this path, and,

286
00:14:41,800 --> 00:14:46,500
and do it this way, and you could ship handmade hero as it is right

287
00:14:46,500 --> 00:14:50,600
now, Graphics wise and still have a fine game, right?

288
00:14:50,800 --> 00:14:53,500
You know, if you take a look at what we've already got here, I'll run

289
00:14:53,500 --> 00:14:56,100
it if you take a look at what this looks like.

290
00:14:56,200 --> 00:14:59,400
You know, if you replace this art with final art,

291
00:14:59,500 --> 00:14:59,900
You know.

292
00:15:00,000 --> 00:15:01,100
This is fine, right?

293
00:15:01,100 --> 00:15:01,700
It's moving.

294
00:15:01,700 --> 00:15:02,700
Totally fine.

295
00:15:02,700 --> 00:15:03,500
And smooth wise.

296
00:15:03,500 --> 00:15:04,400
We're some bugs.

297
00:15:04,400 --> 00:15:08,400
We might clean up or something on there, but that's a totally playable

298
00:15:08,400 --> 00:15:09,600
sort of a thing, right?

299
00:15:09,700 --> 00:15:12,400
So I'm not suggesting that there's anything wrong with the approach,

300
00:15:12,400 --> 00:15:18,600
but in terms of wanting to push some of the other stuff in there, I

301
00:15:18,600 --> 00:15:21,600
just feel like I'm going to want to do stuff like aggressive particle

302
00:15:21,600 --> 00:15:24,600
systems and stuff because we have the capability of doing that now.

303
00:15:24,800 --> 00:15:28,400
And I don't see any reason not to use it, but I just don't see any way

304
00:15:28,400 --> 00:15:29,500
to get there.

305
00:15:30,000 --> 00:15:34,300
With this kind of a back end, I just don't like it and part of that

306
00:15:34,300 --> 00:15:37,800
may just be my naivete in the 2D world.

307
00:15:37,800 --> 00:15:41,000
You know, one of the things that's true about programming is when you

308
00:15:41,000 --> 00:15:45,000
built up a certain amount of experience with a certain type of

309
00:15:45,000 --> 00:15:45,400
pipeline.

310
00:15:45,400 --> 00:15:49,200
In my case, I'm very used to 3D pipelines, then it can be.

311
00:15:50,000 --> 00:15:50,600
It can be that.

312
00:15:50,600 --> 00:15:54,200
Your brain just isn't used to thinking about how to solve the problems

313
00:15:54,700 --> 00:15:56,800
cleverly in the 2D world or something like that.

314
00:15:56,800 --> 00:15:58,400
So it could just be my sort of

315
00:16:00,000 --> 00:16:03,700
Having had a lot more experience with 3D pipelines, but in general,

316
00:16:03,700 --> 00:16:07,100
that's just the perspective that I come to it with.

317
00:16:07,100 --> 00:16:11,600
I don't see a lot of ways of making the 2D system perform as well as I

318
00:16:11,600 --> 00:16:16,300
think the 3D system would if we embraced sort of similar of that Tech

319
00:16:16,300 --> 00:16:19,300
like Z buffers and stuff like that, I was going to avoid them if we

320
00:16:19,300 --> 00:16:19,900
could.

321
00:16:20,100 --> 00:16:24,000
But just when I kind of got down into there and sort of saw what was

322
00:16:24,000 --> 00:16:28,300
necessary if I wanted to have a purely 2D pipeline, it just doesn't

323
00:16:28,300 --> 00:16:29,800
seem like

324
00:16:29,900 --> 00:16:34,100
it can get as far as the 3D pipeline could.

325
00:16:35,800 --> 00:16:40,600
So what I'd like to do is basically back up to this part here.

326
00:16:40,600 --> 00:16:45,200
And there's nothing in particular that I care that I'm upset about

327
00:16:45,200 --> 00:16:47,000
with our 3D the way that we're doing it.

328
00:16:47,000 --> 00:16:50,000
There may be some things we want to improve here over time, but

329
00:16:50,000 --> 00:16:54,000
they're not essential because we do know the 3D position of everyone

330
00:16:54,000 --> 00:16:56,200
in the game right now and that's all we really needed.

331
00:16:56,200 --> 00:17:00,600
So we'll just clean up anywhere in there that we were accidentally not

332
00:17:00,600 --> 00:17:04,300
caring about the 3D position of things we can certainly fix that.

333
00:17:04,300 --> 00:17:05,700
But then also,

334
00:17:05,800 --> 00:17:09,300
I really want to do is sort of start at this point where we were

335
00:17:09,300 --> 00:17:12,400
taking our world in our salmon, all the stuff that we'd already done.

336
00:17:13,099 --> 00:17:16,099
I'm going to leave that pretty much intact and all I'm going to do is

337
00:17:16,099 --> 00:17:19,000
start a little bit of minor surgery on this part here.

338
00:17:19,700 --> 00:17:22,599
I mean, I guess you could call it major surgery but really like the

339
00:17:22,599 --> 00:17:24,300
architecture isn't going to change much.

340
00:17:24,300 --> 00:17:28,099
It's mostly about pulling out things like getting rid of the sort and

341
00:17:28,099 --> 00:17:29,400
turning on a z-buffer.

342
00:17:30,200 --> 00:17:33,800
So really, it's I don't even know how major the surgery is going to

343
00:17:33,800 --> 00:17:34,200
be.

344
00:17:34,600 --> 00:17:35,600
But either way let's just

345
00:17:35,800 --> 00:17:40,200
it's a surgery will leave major and minor to the history books will

346
00:17:40,200 --> 00:17:42,200
see whether it turns out to be major or minor.

347
00:17:43,700 --> 00:17:48,900
And take sort of the stuff that we were doing before and look at how

348
00:17:48,900 --> 00:17:53,500
we can just put everything to the screen in a 3D way, instead of

349
00:17:53,500 --> 00:17:56,100
putting it to the screen in a 2d way.

350
00:17:56,500 --> 00:17:58,600
And that's really all I wanted to do.

351
00:18:01,300 --> 00:18:01,900
All right.

352
00:18:02,300 --> 00:18:08,400
Now even though I think architecture Ali just because of the way that

353
00:18:08,400 --> 00:18:13,300
we've done things, this isn't probably going to be that big of a deal

354
00:18:13,300 --> 00:18:16,600
in terms of changes to the structure of the code base because it's

355
00:18:16,600 --> 00:18:21,900
still going to fundamentally be roughly the same thing happening.

356
00:18:22,700 --> 00:18:25,400
We're still going to have just a push buffer that we put stuff into

357
00:18:25,400 --> 00:18:28,400
and then that's just going to get retired to the rendering API.

358
00:18:28,400 --> 00:18:30,800
It's going to look exactly the same as it does right now.

359
00:18:31,800 --> 00:18:38,000
We may find nonetheless that what we're doing there will require a lot

360
00:18:38,000 --> 00:18:42,100
of work because we're going to have to engage much more dramatically

361
00:18:42,100 --> 00:18:46,200
now with the 3D API because we're not just bleeding Sprites to the

362
00:18:46,200 --> 00:18:46,600
screen.

363
00:18:46,600 --> 00:18:48,000
I mean, that's all we're doing right now.

364
00:18:48,000 --> 00:18:49,800
Like the only thing is we're doing right now.

365
00:18:49,800 --> 00:18:55,900
I mean, we do a little bit of a tiny, little bit of work with the 3D

366
00:18:55,900 --> 00:18:59,500
APA right now because we allow multiple frame buffers for doing that

367
00:18:59,500 --> 00:19:01,000
fade-in fade-out stuff that we're doing.

368
00:19:02,600 --> 00:19:04,900
So we do a little bit of work right now with that, but we're going to

369
00:19:04,900 --> 00:19:08,800
have to engage a little bit more with the 3D API because now we are

370
00:19:08,800 --> 00:19:09,900
going to be in full 3d.

371
00:19:09,900 --> 00:19:11,600
We're going to have to turn on a z-buffer.

372
00:19:11,600 --> 00:19:13,400
We're probably going to want shaders.

373
00:19:13,900 --> 00:19:16,600
We're probably going to want a lot of stuff in there and so we're

374
00:19:16,600 --> 00:19:18,800
going to have to engage a little more with a 3D API.

375
00:19:19,100 --> 00:19:21,300
I don't think there's anything wrong with that because that's what

376
00:19:21,300 --> 00:19:22,600
people have asked for many times.

377
00:19:22,600 --> 00:19:25,600
Anyway, I think people on the stream want to know that stuff because

378
00:19:25,600 --> 00:19:26,200
it's reality of it.

379
00:19:26,200 --> 00:19:30,900
I don't love covering that stuff because it's just so underbaked.

380
00:19:31,000 --> 00:19:36,000
All the time, you'll see when we get into it, just how janky some of

381
00:19:36,000 --> 00:19:38,300
this stuff is it's ill-thought-out.

382
00:19:38,300 --> 00:19:43,400
It doesn't form a cohesive whole, it's plagued with lots of Legacy

383
00:19:43,400 --> 00:19:44,200
stuff.

384
00:19:44,700 --> 00:19:47,800
It's you can see that it doesn't really understand where it's

385
00:19:47,800 --> 00:19:51,700
eventually going and it's not coming together in terms of a unified

386
00:19:51,700 --> 00:19:54,100
architecture for a Computing device.

387
00:19:54,100 --> 00:19:57,200
It's got all these problems that compared to looking at how a CPU

388
00:19:57,200 --> 00:19:57,600
works.

389
00:19:57,600 --> 00:19:59,500
It's just real bad.

390
00:19:59,700 --> 00:20:00,900
And so my

391
00:20:01,100 --> 00:20:01,800
Hope is always that.

392
00:20:01,800 --> 00:20:06,600
Someday that industry kind of consolidates and gets their act together

393
00:20:06,600 --> 00:20:09,700
with defining a real programming model for themselves.

394
00:20:09,900 --> 00:20:13,900
But until that day comes, we are stuck with what we're stuck with.

395
00:20:13,900 --> 00:20:16,600
And so, I kind of hope that I didn't have to dive into some of the

396
00:20:16,600 --> 00:20:20,800
minutiae there because it's really, I hope the kind of thing that in

397
00:20:20,800 --> 00:20:24,600
five years, perhaps no one will have to think, about maybe, 10 years.

398
00:20:24,600 --> 00:20:30,900
I don't know how many will be, but, you know, you know, maybe I

399
00:20:31,000 --> 00:20:33,700
I should just say, well, it's worth teaching anyway, because that's

400
00:20:33,700 --> 00:20:37,400
being really optimistic to think that the industry will come together

401
00:20:37,400 --> 00:20:38,400
before then.

402
00:20:38,400 --> 00:20:39,200
So who knows?

403
00:20:39,600 --> 00:20:42,600
But anyway, so that's unfortunate but that's just probably what we'll

404
00:20:42,600 --> 00:20:46,500
have to do because we're going to want some more control over how

405
00:20:46,500 --> 00:20:48,900
things are being put to the screen at this point.

406
00:20:49,300 --> 00:20:53,100
If for no other reason than the fact that we are still a 2-D game and

407
00:20:53,100 --> 00:20:59,800
so straightforward, 3D polygon rendering is not going to be 100%.

408
00:21:01,600 --> 00:21:03,000
Correct for what we need to do.

409
00:21:03,100 --> 00:21:06,800
We're going to have to play with some Sprite card, sort of stuff.

410
00:21:07,200 --> 00:21:12,900
And so we may need some Shader stuff to do things for us that we would

411
00:21:12,900 --> 00:21:14,300
normally not need.

412
00:21:14,400 --> 00:21:19,800
So even if we don't push the graphics quality too far, so we wouldn't

413
00:21:19,800 --> 00:21:21,100
necessarily need shaders to that.

414
00:21:21,700 --> 00:21:26,800
Just doing things like basic lighting will probably require shaders

415
00:21:27,600 --> 00:21:29,800
because of the nature of our to.

416
00:21:30,000 --> 00:21:34,200
2D world and how we're probably going to have to use it, right?

417
00:21:35,500 --> 00:21:40,500
Okay, so that's fundamentally what we need to do.

418
00:21:41,000 --> 00:21:45,600
Now, let's talk about the difference between Z buffer and sorting, and

419
00:21:45,600 --> 00:21:48,400
I've got about three minutes before the hour break here.

420
00:21:49,100 --> 00:21:50,700
So, let's just talk about this real quick.

421
00:21:50,700 --> 00:21:54,400
And then, we'll maybe try to just go in and turn it on, right?

422
00:21:54,400 --> 00:21:56,600
Because that's the simplest thing we can do to get started.

423
00:21:58,000 --> 00:22:03,600
All right, so let's talk about sorting versus Z buffer.

424
00:22:04,600 --> 00:22:06,100
And this is, this goes back.

425
00:22:06,100 --> 00:22:08,400
Really in gaming to the Quake days.

426
00:22:08,400 --> 00:22:11,100
That's how old this sort of situation is.

427
00:22:11,400 --> 00:22:15,700
And the reason it goes back to their is because Z buffer wasn't a

428
00:22:15,700 --> 00:22:20,800
particularly viable scheme on CPUs, be back in those days.

429
00:22:20,800 --> 00:22:24,800
The 326 CPU wasn't really fast enough for a z-buffer scheme.

430
00:22:24,800 --> 00:22:27,600
So you were always kind of talking more about sorting.

431
00:22:27,800 --> 00:22:29,200
Find it kind of stuff.

432
00:22:31,800 --> 00:22:33,900
Maybe I should say at 286 wasn't, I don't know.

433
00:22:35,400 --> 00:22:37,100
I don't remember what the hardware was at the time.

434
00:22:41,100 --> 00:22:45,200
Yeah, sorry I can't remember but basically like pre quake.

435
00:22:46,800 --> 00:22:49,900
Most things were in this category, there was probably some game

436
00:22:49,900 --> 00:22:52,000
somewhere that used a z-buffer for something.

437
00:22:52,600 --> 00:22:57,000
And folks, who are very Ardent students of 3D rendering and games

438
00:22:57,000 --> 00:23:02,200
history, may be able to point to some places where it was used prior

439
00:23:02,200 --> 00:23:02,800
to Quake.

440
00:23:02,800 --> 00:23:04,000
But Quake is the big one.

441
00:23:04,300 --> 00:23:07,300
So I'll talk about that for a second anyway.

442
00:23:07,300 --> 00:23:11,600
So most of gaming history up until the Quake time period was in the

443
00:23:11,600 --> 00:23:12,500
Sorting camp.

444
00:23:12,600 --> 00:23:15,800
And what this basically meant was, you know, when we were drawing

445
00:23:15,800 --> 00:23:16,200
things to

446
00:23:16,300 --> 00:23:19,000
Bringing, if two things were overlapping, what we tried to do is just

447
00:23:19,000 --> 00:23:21,500
figure out which one of them was in front.

448
00:23:21,800 --> 00:23:25,100
So, you know, if this is a and this is B and it turns out that b is in

449
00:23:25,100 --> 00:23:26,700
front of a, right?

450
00:23:27,600 --> 00:23:29,200
So a is like, back behind it.

451
00:23:29,600 --> 00:23:32,700
Then what we try to do is draw a first, right?

452
00:23:32,700 --> 00:23:33,700
And be S.

453
00:23:34,400 --> 00:23:39,600
So we would draw a in and then we would draw be in to overlap it,

454
00:23:39,600 --> 00:23:40,100
right?

455
00:23:40,700 --> 00:23:44,400
And the reason we did this is because we simply didn't have any time

456
00:23:44,400 --> 00:23:46,200
inside the inner Loops that were drawing these

457
00:23:46,200 --> 00:23:46,500
Things.

458
00:23:46,500 --> 00:23:50,700
Remember, this is all on the CPU to do any sort of anything really.

459
00:23:50,700 --> 00:23:55,800
We just had the kind of make sure that we had the fastest possible

460
00:23:55,800 --> 00:23:59,500
memory copying that we could to get stuff onto the screen.

461
00:24:01,300 --> 00:24:04,900
And then, on top of this, you know, the free storting doesn't really

462
00:24:04,900 --> 00:24:05,700
quite cover.

463
00:24:06,000 --> 00:24:08,700
How advanced people were trying to be with a lot of these things.

464
00:24:08,900 --> 00:24:12,400
There is also entire systems, based around nothing.

465
00:24:13,700 --> 00:24:17,500
I mean, whose entire purpose was to eliminate overdraw.

466
00:24:19,600 --> 00:24:20,100
Right?

467
00:24:20,100 --> 00:24:24,100
Because when you have this kind of sorting, what you can notice very

468
00:24:24,100 --> 00:24:27,200
quickly, is that, if you take a look at what happens, right in here,

469
00:24:28,500 --> 00:24:33,600
you wasted a bunch of time, copying a into this region because B is

470
00:24:33,600 --> 00:24:34,800
just going to overwrite it.

471
00:24:34,800 --> 00:24:38,600
So, unless be happens to be transparent or translucent,

472
00:24:41,100 --> 00:24:44,700
You spent a bunch of time writing things from a that you didn't need

473
00:24:44,700 --> 00:24:45,000
to.

474
00:24:46,400 --> 00:24:50,400
And so, furthermore, you would because again it was so expensive to do

475
00:24:50,400 --> 00:24:51,900
anything on a per pixel basis.

476
00:24:52,300 --> 00:24:54,900
In these days, you would even get things that would try to do much

477
00:24:54,900 --> 00:24:58,300
more advanced stuff, like figure out that a is actually that.

478
00:24:58,500 --> 00:25:00,500
And B is that, right?

479
00:25:00,600 --> 00:25:03,900
And so it could break it up into two, rectangles, for example, sample.

480
00:25:03,900 --> 00:25:04,900
So, here is a 1.

481
00:25:04,900 --> 00:25:09,000
Here is a 2, and then here's B and do it that way, right?

482
00:25:10,300 --> 00:25:13,900
And these took all sorts of forms and even Quake, which is what I was

483
00:25:13,900 --> 00:25:16,700
about to talk about in terms of the transition to having a see buffer

484
00:25:16,900 --> 00:25:22,200
has tremendous amount of work spent the whole system of the bsp and

485
00:25:22,200 --> 00:25:25,800
and how that was divided in portals and all this stuff was designed to

486
00:25:25,800 --> 00:25:28,200
eliminate as much over draws possible as well.

487
00:25:28,800 --> 00:25:33,000
And so again I just want to emphasize the fact that in these days per

488
00:25:33,000 --> 00:25:35,700
pixel cost was incredibly important.

489
00:25:38,200 --> 00:25:41,400
And it you had to really really be careful about that sort of thing.

490
00:25:41,600 --> 00:25:42,800
So this is how things work.

491
00:25:42,800 --> 00:25:46,700
They try to figure out what was that each point in a region on the

492
00:25:46,700 --> 00:25:49,700
screen and then do something that would copy it to that part of the

493
00:25:49,700 --> 00:25:50,800
screen and off you go.

494
00:25:51,800 --> 00:25:52,300
All right?

495
00:25:53,200 --> 00:25:56,000
Now there's a lot of problems with this, right?

496
00:25:56,000 --> 00:25:58,700
And it only, it really, only makes sense.

497
00:26:00,200 --> 00:26:02,300
when that per-pixel cost,

498
00:26:03,600 --> 00:26:04,400
Is so high.

499
00:26:04,400 --> 00:26:09,400
And so dominant that it makes sense for you to start actually doing

500
00:26:09,400 --> 00:26:10,700
the work to split things up.

501
00:26:11,200 --> 00:26:16,000
And as you might imagine, it only really works for things that are

502
00:26:16,000 --> 00:26:19,600
relatively large because if you imagine you have lots of tiny things,

503
00:26:19,900 --> 00:26:20,400
right?

504
00:26:23,300 --> 00:26:25,500
in a case where you've got lots of particles, let's say

505
00:26:28,200 --> 00:26:31,500
she's me in a case where you've got lots of particles or something.

506
00:26:31,500 --> 00:26:32,500
That's fairly tiny.

507
00:26:33,500 --> 00:26:39,400
There really is no way to save the time anymore because as you know as

508
00:26:39,500 --> 00:26:42,700
as the individual objects are dealing with or I should say let me

509
00:26:42,700 --> 00:26:44,300
submit use the word Primitives, right?

510
00:26:44,300 --> 00:26:47,100
Because I don't want to I don't want you to think of objects in the

511
00:26:47,100 --> 00:26:48,100
gameplay sense.

512
00:26:48,400 --> 00:26:51,900
So individual Primitives like particles or triangles or Sprites or

513
00:26:51,900 --> 00:26:52,100
whatever?

514
00:26:52,100 --> 00:26:55,900
They are as Primitives approach the size of pixels.

515
00:26:55,900 --> 00:26:57,800
So when a primitive becomes, you know,

516
00:26:57,900 --> 00:26:59,700
three by three pixels in this in the

517
00:27:00,900 --> 00:27:03,000
Then the cost of filling them.

518
00:27:04,600 --> 00:27:08,800
Ends up being roughly the same as the cost perhaps even less than the

519
00:27:08,800 --> 00:27:12,900
cost of doing complex testing of the intersections of them were trying

520
00:27:12,900 --> 00:27:15,000
to sort them or doing anything else, right?

521
00:27:15,400 --> 00:27:19,700
So it only really make sense doing, you know, / primitive looking in

522
00:27:19,700 --> 00:27:23,500
between Primitives and trying to figure out how to like reduce over on

523
00:27:23,500 --> 00:27:23,700
stuff.

524
00:27:23,800 --> 00:27:28,900
Only makes sense when that work is cheaper than the cost of doing the

525
00:27:28,900 --> 00:27:30,800
actual filling, right?

526
00:27:32,800 --> 00:27:34,500
Once that's no longer true.

527
00:27:36,000 --> 00:27:40,500
Now you put yourself in a situation where all of this work is actually

528
00:27:40,500 --> 00:27:42,400
harming you, right?

529
00:27:42,700 --> 00:27:45,000
And this is what I was afraid of in the handmade here a pipeline.

530
00:27:45,000 --> 00:27:49,300
I saw that happening and I just was like, mmmm, I think this is I

531
00:27:49,300 --> 00:27:51,600
really don't want to be back in this period.

532
00:27:51,600 --> 00:27:54,300
I know we're kind of looking at the game is sort of a bit of a retro

533
00:27:54,300 --> 00:27:58,200
thing, but I don't really want to go that retro because it's just old

534
00:27:58,200 --> 00:28:01,300
Tech and it just doesn't make sense on Modern Hardware.

535
00:28:04,100 --> 00:28:08,800
So what happened during the Quake era was the thing started shifting

536
00:28:08,800 --> 00:28:12,200
over to a z-buffer, even in software, so quick actually uses a

537
00:28:12,200 --> 00:28:18,000
software, a z-buffer, excuse me.

538
00:28:18,500 --> 00:28:19,200
Like I said,

539
00:28:20,400 --> 00:28:23,500
Kind of recovering from illness today, kind of gross.

540
00:28:24,800 --> 00:28:25,200
Okay?

541
00:28:27,000 --> 00:28:27,400
Anyway.

542
00:28:30,600 --> 00:28:33,600
So quick actually uses a software, a z-buffer.

543
00:28:33,600 --> 00:28:35,000
If I remember correctly, it's a right.

544
00:28:35,000 --> 00:28:37,200
Only z-buffer for one of the passes.

545
00:28:38,000 --> 00:28:40,900
So what it's drawing, the world, it writes to the Z buffer, but never

546
00:28:40,900 --> 00:28:43,800
reads from it because it can do a perfect draw of the world.

547
00:28:43,900 --> 00:28:47,300
It knows exactly what it means to draw in what order to make that

548
00:28:47,300 --> 00:28:47,700
work.

549
00:28:48,200 --> 00:28:50,700
But then when it draws characters that uses the z-buffer,

550
00:28:52,900 --> 00:28:54,100
That's what I recall, anyway.

551
00:28:59,800 --> 00:29:02,100
And the reason for that was because since characters it's very much

552
00:29:02,100 --> 00:29:07,000
like a handmade hero since characters could kind of be integrated into

553
00:29:07,000 --> 00:29:09,500
the world in ways that are kind of complex to determine their

554
00:29:09,500 --> 00:29:12,400
relationship between Primitives in the world.

555
00:29:13,700 --> 00:29:17,100
It becomes very difficult to figure out, you know, a character's arm

556
00:29:17,200 --> 00:29:18,800
that passes through a doorway.

557
00:29:19,000 --> 00:29:22,800
Right may need to draw part of the arm on one side of a bunch of world

558
00:29:22,800 --> 00:29:25,800
Primitives, but the rest of the character on the other side of the

559
00:29:25,800 --> 00:29:28,300
world premiere, it just becomes very difficult to get all of those

560
00:29:28,300 --> 00:29:29,400
sorting cases, right?

561
00:29:29,500 --> 00:29:34,700
And you end up writing incredibly expensive code for the polygons of

562
00:29:34,700 --> 00:29:36,000
the character, right?

563
00:29:36,000 --> 00:29:41,500
And what that means is it now puts really difficult constraints on how

564
00:29:41,500 --> 00:29:43,500
many polygons you can have in the character.

565
00:29:43,500 --> 00:29:43,900
Right?

566
00:29:43,900 --> 00:29:46,900
Because again, these sorts of things don't scale.

567
00:29:47,100 --> 00:29:51,100
Once the Primitive start getting smaller, you just sorting time in the

568
00:29:51,100 --> 00:29:55,300
figuring out how to process them becomes very dominant and you end up

569
00:29:55,300 --> 00:29:56,000
in a bad situation.

570
00:29:56,000 --> 00:29:59,200
And so what is z buffer is for those of you who don't already know

571
00:29:59,200 --> 00:29:59,500
what it is.

572
00:29:59,500 --> 00:29:59,800
It is.

573
00:30:00,200 --> 00:30:03,100
It's actually called a z-buffer, z buffer.

574
00:30:03,300 --> 00:30:08,400
If you're Canadian or British, I believes they use the term said 4z,

575
00:30:10,400 --> 00:30:14,100
it's also probably more correctly called a depth buffer.

576
00:30:17,200 --> 00:30:20,600
And because really, it has nothing to do with the Z coordinate.

577
00:30:23,900 --> 00:30:26,000
Just to give you a little bit of perspective here, right?

578
00:30:26,100 --> 00:30:29,200
You know, in our world, we've got stuff that's like, you know, oh,

579
00:30:29,200 --> 00:30:29,800
where's this?

580
00:30:29,800 --> 00:30:32,800
This is the x axis is the y axis, this is the Z axis, and it just so

581
00:30:32,800 --> 00:30:36,100
happens that we tend to go.

582
00:30:36,100 --> 00:30:36,600
Okay?

583
00:30:36,600 --> 00:30:41,200
When we do our transform into screen space, we tend to decide to a

584
00:30:41,200 --> 00:30:45,200
Line-X this way, why this way and Z goes into the screen.

585
00:30:46,900 --> 00:30:47,900
I'm sorry that's not true.

586
00:30:47,900 --> 00:30:51,700
Comes out of the screen depending on whether you're a left-handed or

587
00:30:51,700 --> 00:30:56,000
right-handed, but we tend to think of things this way and we tend to

588
00:30:56,000 --> 00:30:57,600
think of things this way.

589
00:30:57,600 --> 00:31:02,300
So when we're talking about looking at the screen and talking about

590
00:31:02,300 --> 00:31:06,500
how far away, something is at a particular pixel, it happens to be the

591
00:31:06,500 --> 00:31:09,500
Z axis that goes into and out of the screen, right?

592
00:31:09,500 --> 00:31:13,300
Because this is the Y on the screen, this is the X on the screen and

593
00:31:13,300 --> 00:31:15,900
so Z is coming in or out directly.

594
00:31:16,700 --> 00:31:17,300
Of the screen.

595
00:31:18,000 --> 00:31:20,500
But, you know, it's kind of a crude term, what we're really talking

596
00:31:20,500 --> 00:31:23,100
about again is, is the depth, right?

597
00:31:23,100 --> 00:31:24,500
So it doesn't matter XYZ.

598
00:31:24,500 --> 00:31:26,800
Those are just things we use for nominal eicher.

599
00:31:26,800 --> 00:31:28,200
It's happens to be how we use it.

600
00:31:28,200 --> 00:31:31,000
We're just talking about the depth, how deep into the screen?

601
00:31:31,000 --> 00:31:34,800
Something is and so these sorts of things just you could call it a

602
00:31:34,800 --> 00:31:39,800
depth buffer or more properly is really the the term that probably

603
00:31:39,800 --> 00:31:40,700
should be used.

604
00:31:40,700 --> 00:31:43,800
Z buffer is kind of old and old way of saying it.

605
00:31:45,700 --> 00:31:46,800
especially, because

606
00:31:49,000 --> 00:31:51,500
There was something called a w buffer as well, which was using a

607
00:31:51,500 --> 00:31:52,900
different format.

608
00:31:52,900 --> 00:31:55,600
That wasn't really the Z coordinate and all these other sorts of

609
00:31:55,600 --> 00:31:55,800
things.

610
00:31:55,800 --> 00:32:00,900
So again like you know, these are just kind of shorthand names for

611
00:32:00,900 --> 00:32:03,300
this thing that are maybe at first Oracle will talk about them a

612
00:32:03,300 --> 00:32:04,200
little bit more later.

613
00:32:04,500 --> 00:32:09,300
But really the real sort of tangible idea that this thing is is that

614
00:32:09,300 --> 00:32:15,200
it is a buffer that restores that stores the depth of things on the

615
00:32:15,200 --> 00:32:15,500
screen.

616
00:32:15,500 --> 00:32:16,700
And so let's talk about that.

617
00:32:17,600 --> 00:32:23,500
All right, so what we know when we do rendering is that, obviously,

618
00:32:23,500 --> 00:32:25,600
and we've already done this because we already wrote a renderer that

619
00:32:25,600 --> 00:32:30,600
does, this is we have a thing that stores RGB and a at every pixel,

620
00:32:30,900 --> 00:32:31,500
right?

621
00:32:32,300 --> 00:32:35,200
So, typically what we're doing is a reading from some Sprites or

622
00:32:35,200 --> 00:32:38,700
whatever, we're reading from, that's like the source information.

623
00:32:40,000 --> 00:32:43,100
And like we do in handmade hero, we may have some fairly Advanced code

624
00:32:43,100 --> 00:32:46,100
that does, like, bilinear filtering on these things and all sorts of

625
00:32:46,100 --> 00:32:47,000
other nonsense.

626
00:32:47,500 --> 00:32:51,300
Sort of scale and rotate them or do whatever else is going to do.

627
00:32:51,300 --> 00:32:55,900
But eventually we figure out a single rgba color that we're going to

628
00:32:55,900 --> 00:32:57,900
write to a particular pixel location.

629
00:32:58,400 --> 00:32:59,800
And so, then on the screen,

630
00:33:00,000 --> 00:33:01,500
Here's our screen, right?

631
00:33:02,900 --> 00:33:05,700
We typically have some kind of a frame buffer.

632
00:33:07,900 --> 00:33:11,400
And we write this rgba pixel that we figured out what the color should

633
00:33:11,400 --> 00:33:11,700
be.

634
00:33:11,700 --> 00:33:14,200
We write that into a particular location, right?

635
00:33:14,600 --> 00:33:19,700
So our notion of what the screen is, is a buffer that holds at every

636
00:33:19,700 --> 00:33:25,100
pixel value, some RGB and a value right now.

637
00:33:25,100 --> 00:33:29,300
The a value is not super useful to us most of the time in handmade

638
00:33:29,300 --> 00:33:32,500
hero because we don't use its called destination Alpha.

639
00:33:38,500 --> 00:33:39,100
Right.

640
00:33:40,600 --> 00:33:45,600
And, you know, we use the RGB a, we use that Alpha channel on the

641
00:33:45,600 --> 00:33:49,300
input on the source bitmaps, right, on the Sprites, we use that all

642
00:33:49,300 --> 00:33:52,400
the time to determine where they are transparent, and where they are

643
00:33:52,400 --> 00:33:53,200
solid.

644
00:33:53,200 --> 00:33:57,800
So obviously a is very important in our Sprites, but is a important in

645
00:33:57,800 --> 00:33:59,000
our frame buffer.

646
00:33:59,200 --> 00:34:00,300
Not really?

647
00:34:00,300 --> 00:34:03,100
But that's only because we haven't written any algorithms that really

648
00:34:03,100 --> 00:34:03,600
use it.

649
00:34:03,600 --> 00:34:08,100
Now, we could write, we could write rendering algorithms that use

650
00:34:08,300 --> 00:34:11,300
Alpha value to tell us something about how much coverage there's been

651
00:34:11,300 --> 00:34:15,699
at this pixel so far, you can use the destination Alpha for example,

652
00:34:15,699 --> 00:34:19,600
to do things like when you are compositing, if you want a composite in

653
00:34:19,600 --> 00:34:24,000
other orders, besides back to front in order to get transparency to

654
00:34:24,000 --> 00:34:25,400
work properly and stuff like that.

655
00:34:25,400 --> 00:34:28,800
So it's, you know, you can think about this Alpha Channel that's there

656
00:34:28,800 --> 00:34:31,300
in that, you know, this, it's just an extra eight bits.

657
00:34:31,500 --> 00:34:35,000
You can already think about that Alpha channel that we have.

658
00:34:35,000 --> 00:34:38,100
In addition, to our red green and blue color as sort of already

659
00:34:38,199 --> 00:34:41,500
Extending the notion of the frame, buffer to include extra data, we

660
00:34:41,500 --> 00:34:43,100
can use, right?

661
00:34:43,900 --> 00:34:46,000
And that's the core concept that we're looking at here with the depth

662
00:34:46,000 --> 00:34:49,000
buffer, we don't happen to use it on handmade here.

663
00:34:49,000 --> 00:34:50,699
I don't believe in any real Seto.

664
00:34:50,699 --> 00:34:55,400
Wait, no, we do when we make multiple frame buffers, right?

665
00:34:55,500 --> 00:34:57,100
Remember we did that.

666
00:34:57,100 --> 00:35:00,400
That stuff where we wanted to make it so that there was multiple

667
00:35:00,400 --> 00:35:01,000
floors

668
00:35:02,500 --> 00:35:03,100
In the game.

669
00:35:03,300 --> 00:35:05,900
So there was like a floor and you can see through the floor to floor

670
00:35:05,900 --> 00:35:10,100
underneath it through like a hole in the floor and we implanted that

671
00:35:10,100 --> 00:35:13,100
that's an example of where destination Alpha sort of made sense,

672
00:35:13,300 --> 00:35:13,800
right?

673
00:35:13,800 --> 00:35:17,400
We rendered this the sort of this Frame buffer here for the top floor,

674
00:35:17,600 --> 00:35:19,700
and it left an alpha hole in it.

675
00:35:19,700 --> 00:35:23,500
So that when we then blended it on to the final frame buffer, right?

676
00:35:23,600 --> 00:35:24,900
It acted like a sprayed again.

677
00:35:25,100 --> 00:35:26,600
So, we did kind of use destination Alpha.

678
00:35:26,600 --> 00:35:29,900
We just didn't use it in the final frame buffer, right?

679
00:35:30,700 --> 00:35:32,100
Which again, there are rendering.

680
00:35:32,300 --> 00:35:35,900
Seems that even in the, the frame buffer, where your compositing, all

681
00:35:35,900 --> 00:35:38,500
the stuff that you're doing for the final composite even there, you

682
00:35:38,500 --> 00:35:39,200
might use it.

683
00:35:40,700 --> 00:35:42,100
We just didn't have to but okay.

684
00:35:42,100 --> 00:35:46,400
So you did even see you even saw us use destination Alpha again just

685
00:35:46,400 --> 00:35:47,000
to emphasize.

686
00:35:47,000 --> 00:35:49,200
What why I'm sort of driving that point home.

687
00:35:49,500 --> 00:35:50,000
What is that?

688
00:35:50,000 --> 00:35:56,500
Well, that is an extension of of the thing that we're targeting for

689
00:35:56,500 --> 00:35:57,800
our render, our render Target.

690
00:35:59,000 --> 00:35:59,700
Our frame buffer.

691
00:36:00,000 --> 00:36:01,200
That's an extension of the thing.

692
00:36:01,200 --> 00:36:04,800
We're rendering to that in addition to just storing the colors, we

693
00:36:04,800 --> 00:36:05,400
want to store there.

694
00:36:05,400 --> 00:36:09,500
It's also storing additional information that we can use with later

695
00:36:09,500 --> 00:36:14,500
operations to produce an effect that we need that we require for our

696
00:36:14,500 --> 00:36:15,300
final results.

697
00:36:15,300 --> 00:36:16,500
That's what that a is, right?

698
00:36:16,500 --> 00:36:19,000
So it's an augmentation, right?

699
00:36:20,300 --> 00:36:20,800
Alright.

700
00:36:21,100 --> 00:36:23,900
So a depth buffer is nothing more than that.

701
00:36:24,100 --> 00:36:28,100
A depth buffer is just saying, hey we've got an r, a g, a b, and an A

702
00:36:28,100 --> 00:36:28,700
in here.

703
00:36:29,500 --> 00:36:32,400
What if we then just said let's add more.

704
00:36:33,500 --> 00:36:35,700
Let's add more stuff, right?

705
00:36:36,000 --> 00:36:38,500
So maybe these are all eight bits, right?

706
00:36:38,500 --> 00:36:39,300
So we've got 8888.

707
00:36:42,500 --> 00:36:45,300
What if we then said, let's add some more stuff in here.

708
00:36:45,800 --> 00:36:46,800
What if we added?

709
00:36:46,800 --> 00:36:49,300
Some 24-bit value, right?

710
00:36:49,400 --> 00:36:53,500
That was a depth component and often times there's an 8-bit value for

711
00:36:53,500 --> 00:36:54,500
something called a stencil.

712
00:36:54,500 --> 00:36:58,600
This is a way that this is this is kind of old school to be honest.

713
00:37:00,000 --> 00:37:03,000
I don't know that this is really how you would necessarily

714
00:37:03,000 --> 00:37:06,000
conceptualize it as much today, but I'm sort of going to take you back

715
00:37:06,000 --> 00:37:09,000
to the Quake days when 3D Hardware.

716
00:37:09,000 --> 00:37:11,800
First came online to start supporting stuff like Quake, It looked like

717
00:37:11,800 --> 00:37:12,100
this.

718
00:37:13,000 --> 00:37:17,300
So instead of having this is 32 bits, let's augment it with another 32

719
00:37:17,300 --> 00:37:17,600
bits.

720
00:37:17,600 --> 00:37:22,500
So now, we've got essentially 64 bits per pixel, let's say right.

721
00:37:26,000 --> 00:37:26,700
Let's talk about that.

722
00:37:28,800 --> 00:37:31,900
All right, so let's suppose we augment the 64 bits per pixel and now,

723
00:37:31,900 --> 00:37:37,000
whenever we're rendering, what we're going to write to every pixel is.

724
00:37:37,000 --> 00:37:38,000
Yes, the are the G.

725
00:37:38,000 --> 00:37:39,900
The b, in the, a just like we were doing before.

726
00:37:39,900 --> 00:37:41,400
We can store all four of those components.

727
00:37:41,400 --> 00:37:44,200
However, we want to whatever we're doing there for blending or Alpha

728
00:37:44,200 --> 00:37:46,400
blending all those sort of things, whatever it that's working the same

729
00:37:46,400 --> 00:37:47,100
way as it was.

730
00:37:47,900 --> 00:37:51,400
But now, every time we write a pixel, we're also going to write in a

731
00:37:51,400 --> 00:37:54,200
depth value and a stencil value.

732
00:37:56,900 --> 00:37:58,200
We're just going to write those in there.

733
00:37:59,900 --> 00:38:00,800
And what are those?

734
00:38:01,300 --> 00:38:02,900
Well for now, let's just say they're whatever.

735
00:38:02,900 --> 00:38:05,100
We want them to be, we don't need to really talk too much about how

736
00:38:05,100 --> 00:38:08,200
their computer, but we're just going to augment it with that piece of

737
00:38:08,200 --> 00:38:08,900
information.

738
00:38:09,700 --> 00:38:13,200
So that part the writing part will be exactly the same.

739
00:38:13,300 --> 00:38:15,600
When we go to actually store a pixel.

740
00:38:16,100 --> 00:38:20,900
We are doing nothing more than just writing to 32-bit values or one

741
00:38:20,900 --> 00:38:21,600
64-bit value.

742
00:38:21,600 --> 00:38:23,300
If you want to think of this as one big thing,

743
00:38:24,300 --> 00:38:29,300
And we're breaking it up into rgba depth and stencil, okay so it's no

744
00:38:29,300 --> 00:38:31,900
different, it's just running 64-bit pixels at a time.

745
00:38:31,900 --> 00:38:35,200
Instead of 32-bit pixels at a time but there's no other difference.

746
00:38:35,400 --> 00:38:36,700
It's exactly the same.

747
00:38:37,400 --> 00:38:42,600
But now we are going to say let's augment the top part of that right

748
00:38:42,600 --> 00:38:45,000
now you remember how we used to do stuff, right?

749
00:38:46,600 --> 00:38:49,700
So I'm going to talk about sort of our old pixel

750
00:38:51,600 --> 00:38:54,800
Phil first, so our old pixel film.

751
00:38:55,800 --> 00:38:56,700
How did we do that?

752
00:38:56,700 --> 00:38:59,200
Well, we sampled textures right.

753
00:39:02,800 --> 00:39:04,400
And we like, bilinear.

754
00:39:09,500 --> 00:39:11,400
Filtered them, right?

755
00:39:12,100 --> 00:39:14,200
So we would have something like the hero.

756
00:39:16,300 --> 00:39:17,600
And this was in a texture.

757
00:39:19,100 --> 00:39:22,400
You know, or a Sprite is what we call it in the 2D parlance often

758
00:39:22,400 --> 00:39:26,300
times but you know it's a texture and when we implemented the 3D path

759
00:39:26,300 --> 00:39:27,200
for handmade here, right?

760
00:39:27,200 --> 00:39:32,100
We allocated a texture on the card for the Sprite so at the top of our

761
00:39:32,100 --> 00:39:33,600
pixel fill Loop, right?

762
00:39:33,600 --> 00:39:37,700
We would go grab wherever we thought we were in the texture somewhere.

763
00:39:38,400 --> 00:39:41,000
We would grab four pixels, right?

764
00:39:41,300 --> 00:39:46,300
You know, ABCD, we would blend those together with a by linear filter

765
00:39:46,300 --> 00:39:48,500
and we would come up with a source color.

766
00:39:52,700 --> 00:39:53,800
That's how we would do that.

767
00:39:56,000 --> 00:39:59,500
I guess I should draw it like this, we sample the texture, we by

768
00:39:59,500 --> 00:40:02,300
linear filter, it, we come up with a source color, right?

769
00:40:03,200 --> 00:40:08,100
We would then look in fact, I should probably draw this even better.

770
00:40:08,500 --> 00:40:09,800
Let me in fact let me just do this.

771
00:40:09,800 --> 00:40:11,700
Let me do this really much better.

772
00:40:17,200 --> 00:40:17,700
Here we go.

773
00:40:20,600 --> 00:40:21,700
So, we would sample.

774
00:40:22,900 --> 00:40:23,700
From the texture.

775
00:40:28,000 --> 00:40:28,600
Right?

776
00:40:29,400 --> 00:40:30,800
That would produce for us.

777
00:40:31,300 --> 00:40:34,500
This A B C D.

778
00:40:35,000 --> 00:40:37,500
We would then pass that through the bi linear filter.

779
00:40:38,600 --> 00:40:42,700
And the by linear filter again was looking at we're inside that for

780
00:40:42,700 --> 00:40:43,400
Pixel box.

781
00:40:43,400 --> 00:40:47,200
We were and it was blending proportional to that so it would produce a

782
00:40:47,200 --> 00:40:47,900
source color.

783
00:40:47,900 --> 00:40:50,500
So now we just have one color value.

784
00:40:52,400 --> 00:40:54,200
We would then sample the destination.

785
00:40:57,100 --> 00:40:57,800
Right.

786
00:40:58,000 --> 00:40:59,900
So here's the screen, right?

787
00:40:59,900 --> 00:41:01,000
This was the screen.

788
00:41:04,700 --> 00:41:05,300
Whatever it was.

789
00:41:07,200 --> 00:41:08,400
You'd say, where is that going?

790
00:41:09,200 --> 00:41:10,800
And that would produce a desk color.

791
00:41:11,700 --> 00:41:14,800
So we had the place on the screen, we were drawing too, we had the

792
00:41:14,800 --> 00:41:19,000
place in the texture, we was Gruber grabbing from and we would add let

793
00:41:19,000 --> 00:41:24,200
me call that Source we would add the source to the destination using a

794
00:41:24,200 --> 00:41:26,000
blend, right?

795
00:41:26,000 --> 00:41:28,300
And that blend was proportional to the alpha value.

796
00:41:31,000 --> 00:41:34,200
Right, specifically, The Source alphabet value.

797
00:41:35,200 --> 00:41:36,700
So, whatever was in here, right?

798
00:41:36,700 --> 00:41:41,200
Because this Source had an alpha value, whatever was in here, would

799
00:41:41,200 --> 00:41:44,800
guide us to how we would blend together if the alpha value was 255.

800
00:41:44,800 --> 00:41:46,100
Then the source completely replace.

801
00:41:46,100 --> 00:41:48,800
The destination itself value was 0 we did nothing.

802
00:41:48,800 --> 00:41:51,800
The Source got thrown out and it was somewhere in between we would add

803
00:41:51,800 --> 00:41:55,000
the source proportional to that versus the destination for channel.

804
00:41:55,000 --> 00:41:56,100
1 - that right?

805
00:41:56,100 --> 00:41:57,700
So we inversely blend it, right?

806
00:42:00,100 --> 00:42:04,000
And furthermore in here, these are pre multiplied, right?

807
00:42:04,100 --> 00:42:06,000
Not that that matters for this discussion.

808
00:42:07,500 --> 00:42:08,800
But these are pre multiplied.

809
00:42:09,100 --> 00:42:12,800
So we had some other things in here like gamma and pre multiplication,

810
00:42:12,800 --> 00:42:15,600
but that was really only to deal with the color and Alpha channels.

811
00:42:15,600 --> 00:42:18,300
It has nothing to do with the structure of this Loop, right?

812
00:42:18,900 --> 00:42:20,800
So that's the old way we were doing things.

813
00:42:22,000 --> 00:42:26,100
Now, the new way of doing things is almost exactly the same, it just

814
00:42:26,100 --> 00:42:30,100
has an an additional step, right?

815
00:42:31,700 --> 00:42:33,400
So we have a sample texture.

816
00:42:34,000 --> 00:42:39,100
We have a sample texture step and it does produce four of these guys,

817
00:42:39,200 --> 00:42:39,800
right.

818
00:42:42,000 --> 00:42:43,800
And it does going to it is going to do the same stuff.

819
00:42:43,800 --> 00:42:47,700
So it is going to do the bilinear, same exact thing, right?

820
00:42:48,400 --> 00:42:53,000
But in addition to the sample of the texture that comes in, right?

821
00:42:53,100 --> 00:42:54,700
We're also going to get somewhere.

822
00:42:54,700 --> 00:42:57,400
And I, and I guess I should say there was an additional step.

823
00:42:57,400 --> 00:43:01,300
I think, actually, in here that I didn't talk about right, there was a

824
00:43:01,300 --> 00:43:02,700
color interpolation

825
00:43:06,400 --> 00:43:07,500
Right, that came in here.

826
00:43:10,800 --> 00:43:11,400
Right?

827
00:43:11,600 --> 00:43:14,800
Because if you remember correctly, when we would specify our bitmap,

828
00:43:15,000 --> 00:43:15,600
right?

829
00:43:15,600 --> 00:43:21,100
We would specify a color for that bitmap and I don't really know if we

830
00:43:21,100 --> 00:43:22,700
actually interpolated it to be honest.

831
00:43:22,700 --> 00:43:26,000
Maybe we didn't interpolate it but there was a color that came in here

832
00:43:26,200 --> 00:43:29,400
that was we could set when we were drawing the Sprite that would tint

833
00:43:29,400 --> 00:43:30,500
it, right?

834
00:43:30,500 --> 00:43:31,500
It would shade the color.

835
00:43:31,600 --> 00:43:33,300
So we actually had an input.

836
00:43:33,300 --> 00:43:36,400
That was constant, it doesn't come from the texture, it came from

837
00:43:36,400 --> 00:43:37,800
outside, right?

838
00:43:39,500 --> 00:43:42,500
Anyway, this is the part right here that gets replaced with something

839
00:43:42,500 --> 00:43:43,600
more complicated.

840
00:43:44,000 --> 00:43:48,000
So now in here, right, when we have our source color, right?

841
00:43:48,000 --> 00:43:53,000
So we have our source after our texture sample in our by linear, we

842
00:43:53,000 --> 00:43:55,100
have a new thing that comes in from the side.

843
00:43:55,300 --> 00:43:56,700
Yes, we have color.

844
00:43:56,800 --> 00:44:02,400
We would still have that coming in here but we also have Z stencil.

845
00:44:02,900 --> 00:44:04,300
Alright, let's say depth stencil.

846
00:44:10,600 --> 00:44:11,000
Okay.

847
00:44:12,500 --> 00:44:13,700
And what are these two things?

848
00:44:14,200 --> 00:44:18,100
Well, the depth value is wherever we drew this Sprite.

849
00:44:18,100 --> 00:44:20,800
So let's say we were drawing the Sprite somewhere in the world, we've

850
00:44:20,800 --> 00:44:24,000
got handmade hero and, you know, here's the trees or whatever and

851
00:44:24,000 --> 00:44:25,100
we're drawing the Sprite here.

852
00:44:25,700 --> 00:44:29,400
Well, when we specified, where the Sprite was, we specified a z value,

853
00:44:29,400 --> 00:44:32,600
and that Z value might have been different at all of the pixels.

854
00:44:32,600 --> 00:44:36,100
So if this thing is standing up straight in the world, it may be

855
00:44:36,100 --> 00:44:37,900
higher as its top than its bottom.

856
00:44:38,200 --> 00:44:40,200
So maybe the Z value is, you know,

857
00:44:40,300 --> 00:44:42,600
Is, you know, 1.3 here or something.

858
00:44:43,100 --> 00:44:46,300
And the Z value here is like 2.6 or something, right?

859
00:44:46,400 --> 00:44:50,700
And so as you go up the Sprite depending on which row of the Sprite

860
00:44:50,700 --> 00:44:53,800
you were on, it might get to be more, right?

861
00:44:53,900 --> 00:44:57,200
So the middle of this thing here is going to be higher than 1.3 less

862
00:44:57,200 --> 00:44:57,900
than 2.6.

863
00:44:57,900 --> 00:44:58,900
The top is going to be two parts.

864
00:44:58,900 --> 00:44:59,600
Exactly.

865
00:44:59,600 --> 00:44:59,800
And so

866
00:45:00,200 --> 00:45:00,800
Right?

867
00:45:00,800 --> 00:45:05,000
So it will interpolate the Z across the surface of this Sprite and

868
00:45:05,000 --> 00:45:08,000
that's important to remember we'll get back to why that's important is

869
00:45:08,000 --> 00:45:08,400
second

870
00:45:09,700 --> 00:45:10,200
Okay.

871
00:45:10,700 --> 00:45:13,300
And then the stencil value is just going to be a constant thing that

872
00:45:13,300 --> 00:45:14,800
we set, right?

873
00:45:15,100 --> 00:45:18,200
So our stencil value is just something that in addition to setting the

874
00:45:18,200 --> 00:45:20,900
Z, we're going to set the stencil and we're just going to set the

875
00:45:20,900 --> 00:45:23,400
stencil once for the entire thing.

876
00:45:23,400 --> 00:45:26,300
It's not going to be interpolated and we'll talk about what it even is

877
00:45:26,300 --> 00:45:27,300
in a second, right?

878
00:45:30,900 --> 00:45:36,600
Okay, so then when these pieces of information come here, color depth

879
00:45:36,600 --> 00:45:41,600
and stencil we are essentially augmenting this by linear filtered

880
00:45:41,600 --> 00:45:42,100
results.

881
00:45:42,100 --> 00:45:45,000
So it's s Source, color Alpha value.

882
00:45:45,000 --> 00:45:46,600
We now have a depth value.

883
00:45:46,900 --> 00:45:48,600
I guess that's a bad thing to write it.

884
00:45:48,600 --> 00:45:52,900
As I'll write it as Z for now we now have a depth value, right?

885
00:45:53,200 --> 00:45:55,800
And I don't know what I'll write, stencil as let's write it as L.

886
00:45:55,800 --> 00:45:56,400
Let's say.

887
00:45:58,300 --> 00:45:58,900
Right.

888
00:45:59,000 --> 00:46:03,400
We now have an augmented pixel that has in addition to what we sampled

889
00:46:03,400 --> 00:46:04,200
from the texture.

890
00:46:04,500 --> 00:46:09,400
We have now a z value that was wherever we are on the actual Sprite,

891
00:46:09,400 --> 00:46:11,200
its actual Z value, right?

892
00:46:11,500 --> 00:46:14,400
And a stencil value, that's something that was input from the exterior

893
00:46:14,400 --> 00:46:15,700
routine, right?

894
00:46:16,200 --> 00:46:19,100
And so that's very similar to the color in this sense that we just set

895
00:46:19,100 --> 00:46:19,300
it.

896
00:46:19,300 --> 00:46:20,600
It's just an arbitrary thing we set.

897
00:46:20,600 --> 00:46:24,700
Now Z is an arbitrary thing, we said as well to be clear, but it's got

898
00:46:24,700 --> 00:46:26,300
a real, it means something specific.

899
00:46:26,300 --> 00:46:27,400
So even though we could set,

900
00:46:27,600 --> 00:46:28,500
Something arbitrary.

901
00:46:28,700 --> 00:46:30,000
We're not setting up something arbitrary.

902
00:46:30,000 --> 00:46:32,600
We're setting it to something very specific about where it's located

903
00:46:32,600 --> 00:46:33,200
in the world.

904
00:46:33,300 --> 00:46:35,900
Whereas the stencil in the color value are very arbitrary and they

905
00:46:35,900 --> 00:46:38,000
have to do with what we're trying to like, how are we trying to color

906
00:46:38,000 --> 00:46:39,800
this particular Sprite or whatever, right.

907
00:46:40,500 --> 00:46:42,800
And you'll see more about what the stencil value means a second.

908
00:46:44,300 --> 00:46:48,200
Alright, so now that we have an augmented pixel, something that's got

909
00:46:48,200 --> 00:46:49,400
additional information in it.

910
00:46:49,600 --> 00:46:53,800
We now pass it through the real meat of the situation and let me just

911
00:46:53,800 --> 00:46:56,800
say like this is this is the addition part here.

912
00:46:57,400 --> 00:46:59,400
I'm not going to leave that in there cuz I write in what actually, is

913
00:46:59,800 --> 00:47:04,200
this part of then comes exactly the same as well, right?

914
00:47:04,700 --> 00:47:08,100
So at the end, we're going to do exactly the same thing, but it's this

915
00:47:08,100 --> 00:47:11,500
part in here, the changes, okay, so once we have this, we are then

916
00:47:11,500 --> 00:47:13,000
going to sample, the destination.

917
00:47:14,600 --> 00:47:16,400
Just like we did before, right?

918
00:47:17,200 --> 00:47:18,600
And the destination comes in.

919
00:47:18,800 --> 00:47:24,200
Now, remember the destination has the z-buffer, right?

920
00:47:24,200 --> 00:47:27,300
It has the depth buffer information and the stencil buffer information

921
00:47:27,500 --> 00:47:31,400
because it is 64 bits big, right?

922
00:47:31,500 --> 00:47:33,200
Our Sprites are not 64 bits big.

923
00:47:33,200 --> 00:47:36,500
Our Sprites are getting augmented by that input value.

924
00:47:36,500 --> 00:47:39,400
Those additional values that were input when we told it to draw the

925
00:47:39,400 --> 00:47:41,000
Sprite where we told the to draw this, right?

926
00:47:41,000 --> 00:47:41,500
Right.

927
00:47:41,700 --> 00:47:44,200
So our source textures are still 30

928
00:47:44,300 --> 00:47:45,200
B, big.

929
00:47:46,500 --> 00:47:49,200
But our frame buffer remember is 64 bits.

930
00:47:49,500 --> 00:47:52,800
So when we sample the destination, we get a desk color, right?

931
00:47:52,900 --> 00:47:55,000
We get the dust Alpha that we don't care about.

932
00:47:55,000 --> 00:47:59,400
We're not using it right now, but now we get a desk Z in a desk tell.

933
00:48:00,000 --> 00:48:00,700
Right?

934
00:48:00,700 --> 00:48:04,600
So now we have both a source, managed to put an S of of these, we have

935
00:48:04,600 --> 00:48:09,400
a source Z and a source, stencil, and we have a desk Z and a desk

936
00:48:09,400 --> 00:48:10,800
tensile as well.

937
00:48:12,400 --> 00:48:12,900
Okay.

938
00:48:13,800 --> 00:48:16,500
So here is where the big change happens.

939
00:48:16,600 --> 00:48:24,000
Now, before doing this blend operation, what we do is a step and it's

940
00:48:24,000 --> 00:48:26,800
often called kill for some reason.

941
00:48:28,700 --> 00:48:32,800
Because basically it's saying terminate the pipeline early, I guess is

942
00:48:32,800 --> 00:48:39,400
why it's called kill, but it's often called, like, Tech skill or stuff

943
00:48:39,400 --> 00:48:40,000
like this.

944
00:48:40,900 --> 00:48:41,300
Yeah.

945
00:48:43,600 --> 00:48:47,700
It's, I have no idea why these things are called this, but the, the

946
00:48:47,700 --> 00:48:49,400
more correct term for it, I think.

947
00:48:49,400 --> 00:48:52,800
And the one that's used more in the open jails, but spec is pass.

948
00:48:54,700 --> 00:48:56,500
Which sounds a little less threatening as well.

949
00:48:57,400 --> 00:49:00,000
So what we do now is we do comparisons

950
00:49:02,600 --> 00:49:08,400
Okay, we compare the source Z and the desk Z, we can pair the source,

951
00:49:08,600 --> 00:49:10,400
stencil and the desk stencil.

952
00:49:11,000 --> 00:49:16,800
And we produce an idea about whether this pixel operation that we're

953
00:49:16,800 --> 00:49:24,200
about to do passes our criteria for actually occurring, right?

954
00:49:25,500 --> 00:49:31,900
So we do a source Z versus desk Z comparison, right?

955
00:49:32,500 --> 00:49:37,900
and we see whether it passes, we do a store Source, stencil versus

956
00:49:37,900 --> 00:49:40,600
just sensible comparison and we see if it passes

957
00:49:42,700 --> 00:49:47,000
And we can also, even if we would like to, we can do other pass

958
00:49:47,000 --> 00:49:50,000
operations when we start together things, like, based on the alpha

959
00:49:50,000 --> 00:49:52,800
values of things that there's, there's a lot with programmable

960
00:49:52,800 --> 00:49:54,400
shaders, there's all sorts of things you can do here.

961
00:49:54,400 --> 00:49:56,900
So, I'm just kind of talking about the more traditional ones now, but

962
00:49:57,400 --> 00:49:58,200
programmable shaders.

963
00:49:58,200 --> 00:50:00,700
Get into lala land really quickly and you can do all sorts of things

964
00:50:00,700 --> 00:50:00,900
of them.

965
00:50:00,900 --> 00:50:05,000
So, by no means don't take this as the complete set of things that you

966
00:50:05,000 --> 00:50:05,600
can do.

967
00:50:05,700 --> 00:50:09,300
I'm more talking about, just the basic pipeline, what a basic pipeline

968
00:50:09,300 --> 00:50:09,800
does.

969
00:50:11,400 --> 00:50:11,800
Okay.

970
00:50:13,200 --> 00:50:18,000
And what's critical about this is these are actually user settable

971
00:50:19,900 --> 00:50:20,400
Right?

972
00:50:21,000 --> 00:50:25,100
So we can actually choose to say whatever operator we want in here

973
00:50:25,100 --> 00:50:31,400
like greater than, you know, equal to not equal to less than or equal

974
00:50:31,400 --> 00:50:33,100
to any comparison.

975
00:50:33,100 --> 00:50:35,100
We want we can stick in here.

976
00:50:36,400 --> 00:50:36,800
Okay.

977
00:50:40,000 --> 00:50:44,400
So pretty obviously you can see if you just look at the Z part of

978
00:50:44,400 --> 00:50:44,800
this.

979
00:50:45,500 --> 00:50:50,200
Here is where we can get our per pixel sorting, right?

980
00:50:50,400 --> 00:50:53,400
Because if we go back to the example, we originally started with where

981
00:50:53,400 --> 00:50:58,400
I had an A, and A B and I want B to be in front of a right.

982
00:51:00,000 --> 00:51:02,400
In this region, I want B to come first.

983
00:51:02,400 --> 00:51:07,400
I want to see be, I don't want to see a right, well, the Z value for

984
00:51:07,400 --> 00:51:11,500
all of a right wherever I'm drawing that, you know, maybe that's 1.3

985
00:51:11,500 --> 00:51:12,800
or whatever, right?

986
00:51:12,800 --> 00:51:16,100
And let's say Z is 2.6 or whatever something like this.

987
00:51:16,600 --> 00:51:20,300
So in my world z comes close to the further towards the screen.

988
00:51:20,300 --> 00:51:23,600
Let's say, so I want B to be in front.

989
00:51:23,700 --> 00:51:25,900
Well at all of the pixels in here.

990
00:51:25,900 --> 00:51:29,400
What's going to happen is a will have been drawn, right?

991
00:51:29,400 --> 00:51:29,900
Because I'll

992
00:51:30,000 --> 00:51:32,500
Come in here and I'll draw a, there's nothing in the z-buffer yet

993
00:51:32,500 --> 00:51:37,500
because it's just a so whenever we load in whatever, we've cleared our

994
00:51:37,500 --> 00:51:40,400
Z value know, maybe our Z value, when we cleared it with zero.

995
00:51:40,700 --> 00:51:42,900
So everything in the frame buffer is 0.

996
00:51:42,900 --> 00:51:47,200
We come in to draw a and we're drawing 1.3 everywhere, right?

997
00:51:47,300 --> 00:51:48,500
So we just write one point.

998
00:51:48,500 --> 00:51:51,500
Three is in because we're constantly comparing one point three and

999
00:51:51,500 --> 00:51:56,700
zero and saying, oh you know, and in this world what I said, Z Z gets

1000
00:51:56,700 --> 00:51:58,500
bigger as we come closer to the screen.

1001
00:51:58,600 --> 00:51:59,800
So what I'd want to do is to say

1002
00:52:00,000 --> 00:52:03,900
If I want these things to pass, I want the source see to be bigger

1003
00:52:03,900 --> 00:52:06,200
than the destination Z, right?

1004
00:52:06,300 --> 00:52:08,100
So I'd use a greater than here.

1005
00:52:08,300 --> 00:52:10,500
It's what I'd set that to, right?

1006
00:52:10,500 --> 00:52:12,400
I want Source Z greater than Desta Z.

1007
00:52:13,200 --> 00:52:17,100
Let's say so it would come in here and say oh one point three is

1008
00:52:17,100 --> 00:52:17,800
bigger than 0.

1009
00:52:17,800 --> 00:52:20,000
Write it write it, write it, write it, write it, write it, write it.

1010
00:52:20,000 --> 00:52:23,400
And so our whole frame buffer at that point would have 1.3 s all

1011
00:52:23,400 --> 00:52:25,700
throughout here zeros everywhere else.

1012
00:52:26,200 --> 00:52:29,800
Then we come to draw B and in all these areas well it just loads a 0.

1013
00:52:29,900 --> 00:52:34,200
It says, well, 2.6 is bigger than zero in this area, right?

1014
00:52:35,300 --> 00:52:40,500
It loads of 1.3, but 2.6 is still bigger than 1.3.

1015
00:52:40,500 --> 00:52:43,400
So it will draw be first right.

1016
00:52:44,100 --> 00:52:48,500
Now, what's crucial about this is it doesn't matter what order we

1017
00:52:48,500 --> 00:52:50,300
render these 2, right?

1018
00:52:51,000 --> 00:52:55,600
Because if we were to draw be first, it would write 2.6 has all

1019
00:52:55,600 --> 00:53:01,000
through here and then when a rendered it would load the 2.6 has out of

1020
00:53:01,000 --> 00:53:04,900
here and go is 2.6 is 1.3, great enjoy sex know.

1021
00:53:05,600 --> 00:53:07,900
So don't draw the pixel, right?

1022
00:53:08,500 --> 00:53:11,800
So it's testing every pixel and now we don't care.

1023
00:53:12,100 --> 00:53:13,900
This is order independent.

1024
00:53:16,900 --> 00:53:17,500
Right.

1025
00:53:17,600 --> 00:53:21,400
So we get this really nice solution of just being able to dump

1026
00:53:21,400 --> 00:53:22,700
everything down to the GPU.

1027
00:53:22,700 --> 00:53:27,000
If we don't care and it will just do the test per pixel to figure out

1028
00:53:27,000 --> 00:53:29,700
whether or not something should be in front of something else and

1029
00:53:29,700 --> 00:53:33,300
you're done now, this provides a lot of additional power.

1030
00:53:33,300 --> 00:53:36,300
It means that we can not only do we not have to sort because we can

1031
00:53:36,300 --> 00:53:40,900
just throw things down order independently but we can also do stuff

1032
00:53:40,900 --> 00:53:42,900
like have two things that intersect.

1033
00:53:42,900 --> 00:53:46,500
So for example, if we were to look at two objects that

1034
00:53:46,700 --> 00:53:47,700
Lost through each other.

1035
00:53:49,800 --> 00:53:51,500
Like this, right?

1036
00:53:52,900 --> 00:53:56,000
Well, if we were to look at this from here, right?

1037
00:53:56,000 --> 00:53:59,100
We would expect to see something like this.

1038
00:54:01,300 --> 00:54:03,900
If this is a, this is B, right?

1039
00:54:04,000 --> 00:54:10,900
We would expect to see be all through here and a right in here, right?

1040
00:54:11,400 --> 00:54:15,900
Even though a might have existed back here because it's passing

1041
00:54:15,900 --> 00:54:20,600
through it, we want to not see it, and that'll work, just fine because

1042
00:54:20,600 --> 00:54:25,900
since the Z values are interpolated anywhere that a passes in front of

1043
00:54:25,900 --> 00:54:27,700
be a will draw first.

1044
00:54:27,700 --> 00:54:30,900
And everywhere that it passes behind B, it will draw a second.

1045
00:54:31,100 --> 00:54:34,500
Doesn't matter whether they pass directly through each other, so it's

1046
00:54:34,500 --> 00:54:37,500
Freights can just intersect and do everything else and you're still

1047
00:54:37,500 --> 00:54:38,800
fine, right?

1048
00:54:40,000 --> 00:54:40,900
So that's pretty nice.

1049
00:54:44,700 --> 00:54:45,100
Now.

1050
00:54:47,000 --> 00:54:49,100
I'm going to talk about the stencil value next.

1051
00:54:49,100 --> 00:54:52,300
But then I'm going to talk about some caveats here because it's not

1052
00:54:52,300 --> 00:54:52,900
all Rosy.

1053
00:54:52,900 --> 00:54:57,800
There are some issues that you have to be aware of and so I'll give

1054
00:54:57,800 --> 00:55:02,100
kind of a little bit of a just a brief explanation of those but here

1055
00:55:02,100 --> 00:55:05,300
is a additional part of the pipe, right?

1056
00:55:05,300 --> 00:55:06,700
We said there's a stencil value.

1057
00:55:06,900 --> 00:55:07,700
What does that do?

1058
00:55:08,000 --> 00:55:11,100
Well if you think about what happens here this is z value gives you a

1059
00:55:11,100 --> 00:55:13,900
nice way of having a single

1060
00:55:15,200 --> 00:55:20,000
Floating point value that you can use to determine how to sort things.

1061
00:55:20,300 --> 00:55:24,600
But back when SG, I was doing things because way back in the Silicon

1062
00:55:24,600 --> 00:55:26,700
Graphics are I believe that's where the stencil buffer came in.

1063
00:55:26,700 --> 00:55:29,300
I don't know if they invented it but they definitely had them on their

1064
00:55:29,300 --> 00:55:29,900
machines.

1065
00:55:31,200 --> 00:55:33,300
This was an additional thing that allowed you to do.

1066
00:55:33,300 --> 00:55:40,000
Sort of more, I guess, traditional blocking of things if you wanted

1067
00:55:40,000 --> 00:55:40,300
to.

1068
00:55:40,600 --> 00:55:44,100
So what a stencil is is a stencil is an 8-bit value.

1069
00:55:44,300 --> 00:55:44,900
Well, I mean, you know,

1070
00:55:45,000 --> 00:55:45,900
To be really anything.

1071
00:55:45,900 --> 00:55:47,500
But traditionally it was an 8-bit value.

1072
00:55:49,000 --> 00:55:52,200
This just looked at more as binary right?

1073
00:55:52,900 --> 00:55:57,800
And what you could do with it is you could say well okay maybe I want

1074
00:55:57,800 --> 00:56:01,700
to set a thing that says like if the stencil value is equal to some

1075
00:56:01,700 --> 00:56:05,300
value that I want it to be equal to then I'm going to draw and

1076
00:56:05,300 --> 00:56:07,300
otherwise I'm not going to draw, right?

1077
00:56:07,700 --> 00:56:12,700
And so what you could do is you could do essential, effectively raster

1078
00:56:12,700 --> 00:56:16,900
operations on to the frame buffer where you could do stuff like say,

1079
00:56:16,900 --> 00:56:18,400
oh okay, I'm going to

1080
00:56:18,900 --> 00:56:23,900
You know into here A Primitive that just sets the stencil value to

1081
00:56:23,900 --> 00:56:27,500
everywhere in there and then I'm going to set do a rather raster

1082
00:56:27,500 --> 00:56:32,200
operation that sets this value to 1 right now.

1083
00:56:32,200 --> 00:56:35,700
When I render I'm going to do something that well that's actually not

1084
00:56:35,700 --> 00:56:37,700
that useful because those are rectangles so you'd probably do it with

1085
00:56:37,700 --> 00:56:38,000
clipping.

1086
00:56:38,000 --> 00:56:40,700
Let me do that a little bit more crazily.

1087
00:56:44,600 --> 00:56:46,600
Maybe I set this value to 1.

1088
00:56:48,000 --> 00:56:50,100
And this value to 2, right?

1089
00:56:50,200 --> 00:56:53,000
And that's something you can't really do with a straightforward

1090
00:56:53,000 --> 00:56:54,400
viewport clip, right?

1091
00:56:54,500 --> 00:56:57,700
You could do it with a clipping plane, you know, what, I'll go even

1092
00:56:57,700 --> 00:56:59,800
crazier, just to make it unlikely to be

1093
00:57:00,000 --> 00:57:00,900
You're the cutting plane.

1094
00:57:02,000 --> 00:57:03,000
You do this?

1095
00:57:04,200 --> 00:57:06,100
It's a circle a narc.

1096
00:57:08,900 --> 00:57:09,800
So, there's the one.

1097
00:57:11,500 --> 00:57:12,200
There's the two.

1098
00:57:12,500 --> 00:57:13,500
So I can't really set up.

1099
00:57:13,500 --> 00:57:15,400
Any clipping planes or anything like that to do it.

1100
00:57:15,400 --> 00:57:16,000
It's an arc.

1101
00:57:16,000 --> 00:57:17,800
It's harder to do, right?

1102
00:57:18,500 --> 00:57:20,200
Nowadays, hilariously and shaders.

1103
00:57:20,200 --> 00:57:21,600
You could still do that by using.

1104
00:57:23,200 --> 00:57:26,200
Serene space evaluation of a circle to figure it out but it's don't

1105
00:57:26,200 --> 00:57:27,100
just forget it.

1106
00:57:27,100 --> 00:57:28,600
Don't even go there let's not go.

1107
00:57:28,600 --> 00:57:32,100
There point being in the Primitive days back in an STI, you could not

1108
00:57:32,100 --> 00:57:32,500
have done that.

1109
00:57:32,500 --> 00:57:37,700
So you know, stencil buffers are less likely to use these days because

1110
00:57:37,700 --> 00:57:38,700
there's so many other options.

1111
00:57:38,700 --> 00:57:41,900
But in those days I'm just trying to give you the perspective back

1112
00:57:41,900 --> 00:57:45,600
from when these things first sort of happened so you could you could

1113
00:57:45,600 --> 00:57:49,800
do operations on the stencil buffer to set on the part of the buffer

1114
00:57:49,800 --> 00:57:52,300
that stores, the stencil value to set things like this.

1115
00:57:52,300 --> 00:57:52,800
And then you could

1116
00:57:53,000 --> 00:57:56,400
Up basically binary equivalent say hey you know what, what I'm drawing

1117
00:57:56,400 --> 00:57:59,700
here, I only want to draw two places where the sense of I equals 1 and

1118
00:57:59,700 --> 00:58:01,900
then I'm going to do another pass where I draw two things that are

1119
00:58:01,900 --> 00:58:06,800
essentially equals two to sort of create blocks of my scene, right?

1120
00:58:06,800 --> 00:58:10,400
So I can create like, you, I places or picture-in-picture sorts of

1121
00:58:10,400 --> 00:58:13,100
things that can be have fancy outlines.

1122
00:58:13,100 --> 00:58:16,300
They don't have to be like rigidly clip to a rectangle, right?

1123
00:58:17,900 --> 00:58:22,900
And so typically in the old days this road on the same, 32 bits as the

1124
00:58:22,900 --> 00:58:27,000
Z buffer and the hardware to do it was kind of enabled by default if

1125
00:58:27,000 --> 00:58:28,100
z-buffering was on.

1126
00:58:28,300 --> 00:58:31,300
So typically, when you talked about a z-buffer pipeline, you typically

1127
00:58:31,300 --> 00:58:34,800
got stencil sort of for free and it was just this extra little

1128
00:58:34,800 --> 00:58:35,300
technique.

1129
00:58:35,300 --> 00:58:35,900
You had that.

1130
00:58:35,900 --> 00:58:39,900
In addition to a z value, which was this 1624 bit value.

1131
00:58:39,900 --> 00:58:43,500
Depending on the case, you may be also got this 8-bit, stencil value

1132
00:58:43,500 --> 00:58:47,200
to play with as an additional bonus right now.

1133
00:58:47,400 --> 00:58:48,200
Isn't always the case.

1134
00:58:48,200 --> 00:58:51,200
You might have had only a 16-bit z buffer and no stencil it depended

1135
00:58:51,200 --> 00:58:53,000
on again, the hardware in the situation.

1136
00:58:53,200 --> 00:58:55,600
But if you some perspective there that this was this extra thing,

1137
00:58:55,700 --> 00:58:58,400
right, and you can see why those two went together because they're

1138
00:58:58,400 --> 00:58:59,600
basically the same sort of thing.

1139
00:58:59,600 --> 00:59:03,300
They're just this little comparison of the source and the destination

1140
00:59:03,400 --> 00:59:04,700
that just produces a bit.

1141
00:59:04,700 --> 00:59:08,000
Basically, this says, do I want to actually draw here or do I want to

1142
00:59:08,000 --> 00:59:11,600
fail and just stop drawing this pixel all together, right?

1143
00:59:13,800 --> 00:59:14,900
And so that's all that was.

1144
00:59:16,200 --> 00:59:19,000
So that's how a z-buffer pipeline works and you can see how it gets

1145
00:59:19,000 --> 00:59:23,000
rid of the whole problem of having to do sorting, like we did in the

1146
00:59:23,000 --> 00:59:27,800
old pipeline because now the Sorting is done per pixel and so it just

1147
00:59:27,800 --> 00:59:29,100
works, it's nice.

1148
00:59:31,100 --> 00:59:34,500
You can shove as many things you want into it and they'll always get

1149
00:59:34,500 --> 00:59:37,700
sorted correctly because every pixel gets sorted on its own.

1150
00:59:38,900 --> 00:59:42,200
Okay, let's talk about the caveat.

1151
00:59:45,600 --> 00:59:47,600
You know how people say caveat emptor?

1152
00:59:49,900 --> 00:59:51,500
I don't know what that means.

1153
00:59:51,600 --> 00:59:52,600
I've never looked it up.

1154
00:59:53,200 --> 00:59:57,200
I'm going to say like caveat Emperor because that sounds cooler.

1155
00:59:58,400 --> 00:59:59,800
Like maybe the emperor.

1156
01:00:00,700 --> 01:00:04,400
Needs to be aware of this situation because he wasn't thinking about

1157
01:00:04,400 --> 01:00:05,300
it anyway.

1158
01:00:06,500 --> 01:00:11,600
So there is one nasty problem that comes along with this.

1159
01:00:11,600 --> 01:00:12,900
And for handmade hero.

1160
01:00:12,900 --> 01:00:18,000
I don't think it'll be that nasty because of our situation, but

1161
01:00:20,200 --> 01:00:24,800
if you are the sort of Saucy, gentleman that that writes these sort of

1162
01:00:26,800 --> 01:00:33,300
Really Advanced 3D pipelines, like, you know, the crytek engine, the

1163
01:00:33,300 --> 01:00:36,800
Doom engine, these sorts of things that are, you know, super, super

1164
01:00:36,800 --> 01:00:41,600
Advanced kinds of stuff you have to care about this sort of thing and

1165
01:00:41,600 --> 01:00:47,600
it can be a big concern and you've got your ways that you work around

1166
01:00:47,600 --> 01:00:48,300
it, right?

1167
01:00:50,200 --> 01:00:52,600
And so I just want to kind of talk about those a little bit on

1168
01:00:52,600 --> 01:00:53,400
handmade hero.

1169
01:00:53,400 --> 01:00:58,300
I think we'll probably have a lot easier time because we don't have

1170
01:00:58,300 --> 01:01:01,900
the kind of scene complexity, that's something like Doom has, right?

1171
01:01:02,800 --> 01:01:05,900
So anyway, there's a problem that happens here.

1172
01:01:06,500 --> 01:01:08,100
And that problem is with the blending,

1173
01:01:19,000 --> 01:01:22,800
And basically, the problem is that blending is not order independent,

1174
01:01:23,100 --> 01:01:23,600
okay?

1175
01:01:24,600 --> 01:01:27,800
So what I was just saying about the z-buffer, what's really, really

1176
01:01:27,800 --> 01:01:31,100
nice about the Z buffer, is it basically allows your 3D pipeline to

1177
01:01:31,100 --> 01:01:32,700
not care about sorting.

1178
01:01:33,200 --> 01:01:36,900
So now you can render your Primitives in any order that you want,

1179
01:01:37,100 --> 01:01:37,600
right?

1180
01:01:38,500 --> 01:01:42,500
So I can just stack things all over the place, render them in any

1181
01:01:42,500 --> 01:01:43,000
order.

1182
01:01:43,200 --> 01:01:46,800
And if I've got things that are looking like this, right?

1183
01:01:46,800 --> 01:01:48,000
It doesn't matter what.

1184
01:01:48,200 --> 01:01:49,400
I send these things down.

1185
01:01:49,400 --> 01:01:54,000
If this is a, you know, B, C, D, or whatever, it doesn't matter if I

1186
01:01:54,000 --> 01:02:03,000
draw it be CDA or ABCD, your CD a b or B DCA, none of those matter

1187
01:02:03,000 --> 01:02:06,300
because it will always sort correctly because it's using the actual Z

1188
01:02:06,300 --> 01:02:10,800
coordinate of the actual thing relative to the camera to figure out

1189
01:02:11,400 --> 01:02:13,200
how to sort this stuff, right.

1190
01:02:15,100 --> 01:02:20,000
And when we get further, I should also just sort of preface this by

1191
01:02:20,000 --> 01:02:23,500
saying I'm not talking right now, very much about what that Z value

1192
01:02:23,500 --> 01:02:24,100
actually is.

1193
01:02:24,100 --> 01:02:27,900
In this buffer, what that depth value is it actually is a little more

1194
01:02:27,900 --> 01:02:30,400
complicated because you can choose what it actually is.

1195
01:02:30,400 --> 01:02:34,800
There's a lot of different ways you can choose to have it be evaluated

1196
01:02:34,800 --> 01:02:37,300
and so we'll get to that more when we get down to the actual

1197
01:02:37,300 --> 01:02:41,300
nitty-gritty but just there's some depth value in there that we can

1198
01:02:41,300 --> 01:02:44,000
count on and the Sorting just works, right?

1199
01:02:44,700 --> 01:02:47,600
So this allows us to be completely order independent.

1200
01:02:47,600 --> 01:02:50,800
The problem is that blending right?

1201
01:02:50,800 --> 01:02:54,500
That operation we had always been doing where we did one.

1202
01:02:55,300 --> 01:02:59,800
Sorry where we did Source Alpha times Source plus 1 minus source.

1203
01:03:00,000 --> 01:03:00,600
Alpha.

1204
01:03:02,100 --> 01:03:03,700
Times dest, right?

1205
01:03:03,800 --> 01:03:04,400
You remember this?

1206
01:03:04,400 --> 01:03:05,600
This is the linear blend.

1207
01:03:05,600 --> 01:03:06,200
It's the thing.

1208
01:03:06,200 --> 01:03:10,100
That's the backbone of like all game everything, right?

1209
01:03:10,700 --> 01:03:14,900
And this is how we were blending our colors into the display, right?

1210
01:03:15,600 --> 01:03:20,200
Well, what you can see about this is it's not order independent,

1211
01:03:20,200 --> 01:03:20,800
right?

1212
01:03:20,800 --> 01:03:24,000
It's talking about these Alpha values.

1213
01:03:24,100 --> 01:03:31,600
This destination is some previous set of Blends that have happened and

1214
01:03:31,800 --> 01:03:34,100
Sa 1 minus sa right?

1215
01:03:34,100 --> 01:03:34,600
It's in fact.

1216
01:03:34,600 --> 01:03:36,400
This one - sa right here.

1217
01:03:36,700 --> 01:03:41,100
The number of times that something gets multiplied by that 1 minus sa

1218
01:03:41,300 --> 01:03:44,000
changes based on the order, right?

1219
01:03:44,600 --> 01:03:48,400
So if I do things, in one order versus another,

1220
01:03:50,900 --> 01:03:55,300
I may end up with a very different result than if I do them in in a

1221
01:03:55,600 --> 01:03:56,900
different way, right?

1222
01:03:57,600 --> 01:04:03,000
This gets exacerbated, once the Z, buffer is involved for another

1223
01:04:03,000 --> 01:04:06,800
reason, which is that values may actually get killed entirely.

1224
01:04:07,300 --> 01:04:10,500
So let me give you a just, a very simple example of how this becomes a

1225
01:04:10,500 --> 01:04:14,700
problem and you can sort of hopefully see what I mean.

1226
01:04:14,700 --> 01:04:18,400
When I say there's there's a nasty issue here, right?

1227
01:04:19,200 --> 01:04:21,500
So, let's say I've got something.

1228
01:04:22,900 --> 01:04:27,700
In the world that's supposed to be translucent or transparent.

1229
01:04:27,800 --> 01:04:28,200
Right.

1230
01:04:29,400 --> 01:04:30,900
Let's say it's a bubble.

1231
01:04:31,100 --> 01:04:34,200
So here is handmade hero, right?

1232
01:04:34,600 --> 01:04:38,300
And here is a little bubble that handmade hero blue, right?

1233
01:04:38,300 --> 01:04:40,600
So if he's blowing bubbles, here it is.

1234
01:04:42,300 --> 01:04:45,000
In our current handmade hero, this is really just not a problem.

1235
01:04:45,500 --> 01:04:48,600
These things will sort if this is a and this is B, these things will

1236
01:04:48,600 --> 01:04:51,000
sort to the be gets drawn first and egg gets drawn after, that's

1237
01:04:51,000 --> 01:04:52,200
exactly what we want.

1238
01:04:52,300 --> 01:04:55,300
Because the hero is drawn here, right?

1239
01:04:56,800 --> 01:05:01,100
And then this transparent bubble, gets drawn on top.

1240
01:05:01,300 --> 01:05:05,200
What that means is that all of those values for the hero are already

1241
01:05:05,200 --> 01:05:08,000
in the frame buffer, so that when the bubble is drawn, it can pick

1242
01:05:08,000 --> 01:05:10,600
them up blend with them and write them back.

1243
01:05:10,700 --> 01:05:11,700
So it will nicely.

1244
01:05:11,700 --> 01:05:15,600
Shade the hero with the bubbles color which is exactly what we want.

1245
01:05:16,400 --> 01:05:19,700
What will happen in a z-buffer situation.

1246
01:05:20,200 --> 01:05:25,100
Well, first of all, we can no longer just throw everything into the

1247
01:05:25,100 --> 01:05:26,400
same batch and expect

1248
01:05:26,600 --> 01:05:27,100
Work.

1249
01:05:27,500 --> 01:05:28,700
Why can't we do that?

1250
01:05:28,800 --> 01:05:32,500
Well, the reason that we can't do that is because this bubble, if it

1251
01:05:32,500 --> 01:05:37,200
happened to get drawn first would completely erase the hero because

1252
01:05:37,200 --> 01:05:40,500
when the bubble gets drawn, it will draw into the z-buffer.

1253
01:05:40,700 --> 01:05:42,500
Its its values.

1254
01:05:43,100 --> 01:05:46,500
And when it draws its values into the z-buffer, right?

1255
01:05:47,200 --> 01:05:49,100
Nothing else will be able to draw there.

1256
01:05:49,600 --> 01:05:53,800
Now, if the bubble happens to get drawn second, then it's okay because

1257
01:05:53,800 --> 01:05:56,400
when the bubble is getting drawn, it will pick up the Z values of the

1258
01:05:56,500 --> 01:05:57,100
hero.

1259
01:05:57,200 --> 01:05:59,900
And that it will say I'm closer than

1260
01:06:00,000 --> 01:06:04,500
Zero and so I should draw on top and then it'll work but you can see

1261
01:06:04,500 --> 01:06:06,000
that that order dependence.

1262
01:06:06,000 --> 01:06:08,000
Now comes back, right?

1263
01:06:08,200 --> 01:06:11,400
We had gotten rid of it for opaque things but now it comes back for

1264
01:06:11,400 --> 01:06:12,400
transparent things.

1265
01:06:12,600 --> 01:06:17,800
So the only real solution that we have here in the trivial sense of

1266
01:06:17,800 --> 01:06:22,300
the word, if all we have is a z-buffer is we still we get back to sort

1267
01:06:22,300 --> 01:06:23,700
of course sorting

1268
01:06:24,800 --> 01:06:27,200
Which is that all of our transparent objects.

1269
01:06:27,200 --> 01:06:31,200
Have to go into one bin and all of our non transparent objects can go

1270
01:06:31,200 --> 01:06:32,300
into the other bin.

1271
01:06:33,300 --> 01:06:35,200
And then we draw all the non transparent objects.

1272
01:06:35,200 --> 01:06:39,400
First, we draw the transparent object s, right?

1273
01:06:40,500 --> 01:06:43,300
You can see how that would then fix this problem of the bubble

1274
01:06:43,300 --> 01:06:45,900
erasing, the hero entirely, right?

1275
01:06:49,200 --> 01:06:52,300
But even that isn't a complete solution.

1276
01:06:53,200 --> 01:06:55,600
What if we have two bubbles that overlap Each Other?

1277
01:06:56,000 --> 01:07:01,200
Well, if one bubble is closer than the other bubble, it will produce a

1278
01:07:01,200 --> 01:07:04,400
different result than if it was further away because again, the

1279
01:07:04,400 --> 01:07:08,600
shading is not order independent, this is not an order independent

1280
01:07:08,600 --> 01:07:09,000
equation.

1281
01:07:09,000 --> 01:07:10,200
If I apply this,

1282
01:07:10,300 --> 01:07:14,000
Equation, you know, hero bubble one, bubble to.

1283
01:07:14,200 --> 01:07:17,800
I will get a, you know, a different result than if I do hero bubble to

1284
01:07:17,800 --> 01:07:18,500
bubble one.

1285
01:07:19,600 --> 01:07:23,500
So, again, the Sorting actually has to occur again.

1286
01:07:25,000 --> 01:07:30,100
If we want order independent transparency to actually work, it has to

1287
01:07:30,100 --> 01:07:31,700
be sorted, right?

1288
01:07:31,700 --> 01:07:32,800
And I should say, are definite.

1289
01:07:33,500 --> 01:07:34,100
Transparency.

1290
01:07:34,100 --> 01:07:35,800
Always is order dependent.

1291
01:07:35,800 --> 01:07:38,000
So we have to sort it in order to make it work.

1292
01:07:39,400 --> 01:07:40,800
And this is just a real bummer.

1293
01:07:41,300 --> 01:07:45,600
Now, there are ways around this that are non intuitive and there are

1294
01:07:45,600 --> 01:07:48,900
also ways around it that are completely psychotic and you will never

1295
01:07:48,900 --> 01:07:51,900
believe that they actually work, but there are ways of doing them.

1296
01:07:54,500 --> 01:07:55,600
So let me talk about those.

1297
01:07:56,200 --> 01:08:00,700
So one way around this, that's kind of counterintuitive is to change

1298
01:08:00,700 --> 01:08:04,000
this equation to be order independent.

1299
01:08:05,000 --> 01:08:05,500
Right.

1300
01:08:11,200 --> 01:08:13,400
And there actually are proposals for doing this.

1301
01:08:13,400 --> 01:08:14,900
And you can look and see.

1302
01:08:14,900 --> 01:08:16,300
There are papers that talk about.

1303
01:08:16,300 --> 01:08:20,700
Hey, this is a question that depends on the order that I apply it.

1304
01:08:21,000 --> 01:08:24,399
What if I picked an equation that didn't depend on the order in, which

1305
01:08:24,399 --> 01:08:25,100
I apply it?

1306
01:08:25,600 --> 01:08:31,800
Could I then have this work and one way that you can you can imagine

1307
01:08:31,800 --> 01:08:32,600
doing that.

1308
01:08:32,600 --> 01:08:38,200
That is not nuts, is to just talk about additive blending, right?

1309
01:08:38,200 --> 01:08:40,100
One way to do this is get rid of this term.

1310
01:08:40,500 --> 01:08:42,800
If I just do sasc.

1311
01:08:42,800 --> 01:08:43,300
Oops.

1312
01:08:48,600 --> 01:08:49,899
If that's all I do.

1313
01:08:52,100 --> 01:08:53,600
Then I have no problem.

1314
01:08:53,700 --> 01:08:58,399
That's just those are just things that make the screen brighter when I

1315
01:08:58,399 --> 01:08:59,700
operate on it, right?

1316
01:09:00,100 --> 01:09:03,700
And so, one of the things that used to be very common is particles

1317
01:09:03,700 --> 01:09:07,200
that always made things brighter like brightening particles, right?

1318
01:09:07,200 --> 01:09:09,700
And, you know, these kind of Blobby explosion e sorts of particles.

1319
01:09:09,700 --> 01:09:14,700
I just make things brighter that just works because then it doesn't

1320
01:09:14,700 --> 01:09:15,800
matter what order you do this.

1321
01:09:15,800 --> 01:09:19,700
If you think about what happens here, it just becomes a big long, some

1322
01:09:19,700 --> 01:09:22,700
of these values, right?

1323
01:09:22,700 --> 01:09:25,700
It just, you just keep summing them up and it doesn't matter.

1324
01:09:25,700 --> 01:09:29,800
So your result for a pixel is just sasc + sa SC + sasc.

1325
01:09:30,000 --> 01:09:31,600
From from different Sprites, right?

1326
01:09:31,600 --> 01:09:37,000
So it's just that, that darkening, that dimming of, or that lessening

1327
01:09:37,000 --> 01:09:41,200
of the contribution of the underneath color, is the only thing that

1328
01:09:41,200 --> 01:09:43,500
makes it order dependent in the first place.

1329
01:09:43,500 --> 01:09:47,399
So you can choose to use some kind of equation that doesn't have that

1330
01:09:47,399 --> 01:09:47,700
property.

1331
01:09:47,700 --> 01:09:51,300
But the problem is that limits, the kind of composition you can do,

1332
01:09:51,300 --> 01:09:54,200
because you no longer have the option of doing something like that.

1333
01:09:54,200 --> 01:09:57,200
Now, that is not the only one, there was another one.

1334
01:09:57,200 --> 01:09:59,400
I remember there is a paper that proposed ways of doing

1335
01:10:00,000 --> 01:10:03,200
And see that doesn't have the brightening effect all the time.

1336
01:10:03,300 --> 01:10:04,800
That is also order independent.

1337
01:10:04,800 --> 01:10:07,900
I don't remember what it was though, but there was a paper that talked

1338
01:10:07,900 --> 01:10:08,600
about that.

1339
01:10:08,700 --> 01:10:12,200
So there again, there are options there of saying, well, okay, if we

1340
01:10:12,200 --> 01:10:16,100
want to go back to just doing the transparent versus non transparent

1341
01:10:16,100 --> 01:10:19,500
objects, all we do is sort those and then we run it and we let them do

1342
01:10:19,500 --> 01:10:20,200
their thing.

1343
01:10:20,500 --> 01:10:24,200
We could pick a different way of retiring that equation.

1344
01:10:24,300 --> 01:10:24,900
Right?

1345
01:10:26,200 --> 01:10:31,700
But there is another option and this is the pure lunacy option.

1346
01:10:37,000 --> 01:10:40,000
And oddly enough, you can actually do this on gpus.

1347
01:10:40,000 --> 01:10:42,300
That's how far gpus have gotten.

1348
01:10:42,700 --> 01:10:44,400
It's kind of crazy when you think about it.

1349
01:10:46,200 --> 01:10:46,800
All right.

1350
01:10:47,500 --> 01:10:50,100
So what's gpus have introduced?

1351
01:10:50,300 --> 01:10:52,300
Believe it or not is atomics?

1352
01:10:53,600 --> 01:10:54,200
so,

1353
01:10:56,400 --> 01:10:58,100
and maybe I'll call this, you know.

1354
01:11:00,100 --> 01:11:01,500
Frame buffer, atomics.

1355
01:11:04,600 --> 01:11:06,600
And I'll try to give you some perspective on what these are.

1356
01:11:06,600 --> 01:11:09,000
It's completely nuts that you can do this, but it's one of those

1357
01:11:09,000 --> 01:11:11,100
things where it's like gpus have gotten so powerful.

1358
01:11:11,100 --> 01:11:15,700
This point, they're just adding really all kinds of things that you

1359
01:11:15,900 --> 01:11:19,900
wouldn't expect, you know, someone in my position who, you know, saw

1360
01:11:19,900 --> 01:11:23,500
the first 3D effects card and was like, wow, that's really amazing to

1361
01:11:23,500 --> 01:11:26,000
think about the fact that these have atomics frame, buffer operations

1362
01:11:26,000 --> 01:11:28,000
is completely nuts, but it's awesome.

1363
01:11:28,900 --> 01:11:31,700
And so here's where we go down the rabbit hole of like the kinds of

1364
01:11:31,700 --> 01:11:32,600
crazy stuff you can do on

1365
01:11:33,000 --> 01:11:33,600
Is nowadays.

1366
01:11:35,200 --> 01:11:38,000
So if you imagine what happens, what I was talking about there.

1367
01:11:38,000 --> 01:11:38,400
Well,

1368
01:11:40,600 --> 01:11:43,200
Really, the reason that we have that problem again is because we're

1369
01:11:43,200 --> 01:11:45,200
not sorting, right?

1370
01:11:45,200 --> 01:11:47,400
I mean the problem is that we're not sorting anymore.

1371
01:11:47,900 --> 01:11:49,200
Why didn't we want to sort?

1372
01:11:49,200 --> 01:11:52,900
Well, there was a lot of overhead to sorting, and also we kind of need

1373
01:11:52,900 --> 01:11:55,200
to sort things based on the pixel value.

1374
01:11:55,200 --> 01:11:58,400
Because, you know, if we want again, that case to work, where two

1375
01:11:58,400 --> 01:11:59,800
things intersect, right?

1376
01:12:00,500 --> 01:12:04,000
Or we have those kind of nasty problems, like the painters algorithm

1377
01:12:04,600 --> 01:12:08,800
nightmare problem, where you've got, you know, triangles that do this

1378
01:12:08,800 --> 01:12:09,500
sort of thing.

1379
01:12:11,400 --> 01:12:12,800
I'm not going to draw this right, am I?

1380
01:12:21,800 --> 01:12:23,100
That's, that's a terrible drawing.

1381
01:12:29,800 --> 01:12:30,400
Don't know if I can.

1382
01:12:30,400 --> 01:12:31,300
How do I do a racer?

1383
01:12:36,800 --> 01:12:37,400
There we go.

1384
01:12:38,000 --> 01:12:38,800
I did it.

1385
01:12:41,900 --> 01:12:44,800
All right, so if you have one of these situations where you've got

1386
01:12:44,800 --> 01:12:49,100
three, triangles that actually aren't intersecting, but they all

1387
01:12:49,100 --> 01:12:50,300
overlap each other.

1388
01:12:50,400 --> 01:12:53,300
You end up with a cycle that can only be broken by actually splitting

1389
01:12:53,300 --> 01:12:54,700
the triangles, right?

1390
01:12:55,400 --> 01:12:58,400
And again, a z-buffer, totally solves this problem because since its

1391
01:12:58,400 --> 01:13:00,400
operates for Pixel it has, it doesn't even care.

1392
01:13:00,400 --> 01:13:02,400
It just it just works, right?

1393
01:13:02,400 --> 01:13:04,000
You'll get exactly the right result.

1394
01:13:05,100 --> 01:13:08,800
So, we want all of these things, but now we want the ability also, for

1395
01:13:08,800 --> 01:13:11,500
all of our transparent stuff to work, right?

1396
01:13:12,300 --> 01:13:13,900
And it's just like, how we going to do that.

1397
01:13:13,900 --> 01:13:17,400
Well, what they end up doing is they do per pixel sorting.

1398
01:13:19,000 --> 01:13:22,000
And I'm not even making this up, this is actually a real thing.

1399
01:13:24,700 --> 01:13:27,700
So what they will do is they'll say all right.

1400
01:13:27,800 --> 01:13:30,100
What do we need to do to do per pixel sorting?

1401
01:13:30,400 --> 01:13:34,500
Well, what if I was just to record a fragment color or a pixel color,

1402
01:13:34,500 --> 01:13:35,400
I won't use the word fragment.

1403
01:13:35,400 --> 01:13:36,200
Yeah, we'll talk a lot more.

1404
01:13:36,200 --> 01:13:37,400
What fragments are later?

1405
01:13:40,800 --> 01:13:43,500
But what if I was at each pixel location, right?

1406
01:13:43,500 --> 01:13:44,600
Here's a pixel location.

1407
01:13:44,900 --> 01:13:49,100
Instead of, you know, right now I'm doing rgba Z, and maybe stencil or

1408
01:13:49,100 --> 01:13:50,000
something, right?

1409
01:13:50,300 --> 01:13:51,100
What if I said?

1410
01:13:51,100 --> 01:13:55,000
Nah, forget that instead of just storing one of those per pixel, I'm

1411
01:13:55,000 --> 01:13:56,700
actually going to store a linked list.

1412
01:13:57,400 --> 01:14:02,700
So in this pixel, I'm going to store a pointer to one of these rgba

1413
01:14:02,700 --> 01:14:06,200
Z's and then a pointer to the next one.

1414
01:14:06,800 --> 01:14:08,500
And I'm not even making this up.

1415
01:14:08,600 --> 01:14:09,800
It's a linked list.

1416
01:14:10,100 --> 01:14:11,100
Of this stuff.

1417
01:14:12,700 --> 01:14:17,600
Where every time I write to the pixel, I add a new link to the chain,

1418
01:14:18,400 --> 01:14:19,000
right?

1419
01:14:19,200 --> 01:14:22,700
So if I overdraw this thing eight times, if there's eight things

1420
01:14:22,700 --> 01:14:23,800
overlapping, this pixel.

1421
01:14:23,800 --> 01:14:26,400
I'll actually have eight links in the chain.

1422
01:14:28,800 --> 01:14:29,400
Right?

1423
01:14:30,000 --> 01:14:37,500
Then I write a Shader that does a resolution of that buffer, right?

1424
01:14:37,500 --> 01:14:38,100
That resolves.

1425
01:14:38,100 --> 01:14:38,800
That buffer.

1426
01:14:40,000 --> 01:14:43,000
That all it does is after all the rendering is done and every pixel is

1427
01:14:43,000 --> 01:14:47,500
a linked list of values, it then goes through, and sorts the linked

1428
01:14:47,500 --> 01:14:53,800
list at every pixel and then retires, the fragments those pixel values

1429
01:14:53,800 --> 01:14:54,400
in order.

1430
01:14:57,000 --> 01:14:59,800
So that you still get correct order dependent.

1431
01:15:00,000 --> 01:15:04,000
I'm doing even though you've rendered things potentially completely

1432
01:15:04,000 --> 01:15:04,600
out of order.

1433
01:15:07,500 --> 01:15:09,200
I'm not kidding, this actually works.

1434
01:15:09,200 --> 01:15:10,400
You can actually do it.

1435
01:15:10,600 --> 01:15:15,100
Now obviously there's a huge cost to it because you're taking up a lot

1436
01:15:15,100 --> 01:15:18,200
more memory because you have to store, you know.

1437
01:15:18,200 --> 01:15:21,800
However your much overdraw you have on average, you have to store that

1438
01:15:21,800 --> 01:15:24,800
much more data in there, right?

1439
01:15:27,200 --> 01:15:28,200
That's very expensive.

1440
01:15:28,700 --> 01:15:31,300
So it's by no means some kind of Panacea.

1441
01:15:31,300 --> 01:15:35,300
That's just free to do, is still, very expensive, but you can do it.

1442
01:15:35,600 --> 01:15:37,700
So, if you actually want that, you can get it.

1443
01:15:38,300 --> 01:15:39,800
And obviously there's optimizations around.

1444
01:15:39,800 --> 01:15:43,700
This one thing that you'll often see if you were going to approach

1445
01:15:43,700 --> 01:15:43,900
scheme.

1446
01:15:43,900 --> 01:15:47,100
Like this is, well, you really only need the link list for the for

1447
01:15:47,100 --> 01:15:48,100
transparent things.

1448
01:15:48,500 --> 01:15:52,600
The opaque things can also, you can still do that bifurcation, where

1449
01:15:52,600 --> 01:15:56,800
you draw like all the opaque things first so that you just have

1450
01:15:56,900 --> 01:16:00,400
One value in a buffer that's like, here's my screen.

1451
01:16:00,400 --> 01:16:03,100
If there were no transparent objects then you just draw the

1452
01:16:03,100 --> 01:16:07,100
transparent objects into one of these things with the linked list.

1453
01:16:07,100 --> 01:16:12,000
Then you can just at the end know that you never, you never created

1454
01:16:12,000 --> 01:16:15,400
extra links for opaque things because you never need to know opaque

1455
01:16:15,400 --> 01:16:19,200
things past a certain point, right?

1456
01:16:19,500 --> 01:16:22,100
Because you only some explaining, this very well.

1457
01:16:22,300 --> 01:16:24,000
If I have some stack of stuff.

1458
01:16:24,700 --> 01:16:26,000
Let's, let's look at this.

1459
01:16:26,900 --> 01:16:28,800
A single Pixel, let's stack it up.

1460
01:16:28,800 --> 01:16:32,400
Like, it was like we were looking at it from, you know, this

1461
01:16:32,400 --> 01:16:33,700
direction, right?

1462
01:16:34,100 --> 01:16:37,300
And there's just a fantastic amount of things stacked on this pixel,

1463
01:16:37,500 --> 01:16:38,100
right?

1464
01:16:38,400 --> 01:16:40,900
So this is just one pixel we're looking at and we're looking at it

1465
01:16:40,900 --> 01:16:41,400
this way.

1466
01:16:41,400 --> 01:16:44,100
So these are all stacked on top of each other, right?

1467
01:16:44,100 --> 01:16:49,000
ABCDEFG, all stacked on top of each other, right?

1468
01:16:51,200 --> 01:16:56,100
Well if you imagine, let's say that A and B are

1469
01:16:57,400 --> 01:17:03,900
Right, let's say that c and e.

1470
01:17:05,000 --> 01:17:05,500
Are opaque.

1471
01:17:05,500 --> 01:17:08,600
In fact, let me figure out a better way to label these.

1472
01:17:09,300 --> 01:17:13,600
So let's say it's transparent transparent opaque transparent opaque

1473
01:17:13,600 --> 01:17:14,800
opaque transparent.

1474
01:17:16,400 --> 01:17:17,000
Right?

1475
01:17:17,400 --> 01:17:20,600
If I just did the naive thing, I would end up with a linked list that

1476
01:17:20,600 --> 01:17:22,600
was one, two, three, four, five.

1477
01:17:22,900 --> 01:17:26,000
One, two, three, four, five, six, seven.

1478
01:17:26,200 --> 01:17:29,000
I would have seven links in my linked list, right?

1479
01:17:29,000 --> 01:17:32,100
And that's a huge not have to do all that updating and all that work,

1480
01:17:32,200 --> 01:17:32,800
right?

1481
01:17:34,300 --> 01:17:38,400
But if I were to instead do something a little bit more clever and say

1482
01:17:38,400 --> 01:17:41,500
let's draw all the opaque stuff first, right?

1483
01:17:41,900 --> 01:17:45,400
So that means I draw a c e and f.

1484
01:17:45,400 --> 01:17:46,600
I draw them first.

1485
01:17:46,600 --> 01:17:50,900
So what I would end up with in that buffer is just F it's all I would

1486
01:17:50,900 --> 01:17:52,000
have right.

1487
01:17:52,500 --> 01:17:56,900
Then I go to draw my transparent objects, I can use the Z buffer and

1488
01:17:56,900 --> 01:17:59,900
say only add to the linked list if

1489
01:18:00,000 --> 01:18:01,700
My z-buffer passes.

1490
01:18:02,500 --> 01:18:08,000
That means only the stuff in front of f, will pass, which is only one

1491
01:18:08,000 --> 01:18:08,600
thing.

1492
01:18:08,900 --> 01:18:11,600
It's just G, it's just this one thing.

1493
01:18:11,900 --> 01:18:16,900
So I end up with only a linked list of f and g that has to be sorted

1494
01:18:16,900 --> 01:18:20,100
and further more like I was saying, I really don't have to sort this

1495
01:18:20,100 --> 01:18:24,800
part so really I can just have a buffer of things that are the opaque

1496
01:18:24,800 --> 01:18:28,400
backdrop of the scene, that's everything up to the point where the

1497
01:18:28,400 --> 01:18:29,800
opaque objects stopped.

1498
01:18:30,000 --> 01:18:33,900
It and then linked list of transparent things in front of them.

1499
01:18:34,100 --> 01:18:37,900
And again that's free for me to produce Beyond just one level of

1500
01:18:37,900 --> 01:18:38,700
partitioning.

1501
01:18:38,800 --> 01:18:42,600
It's not even really sorting, it's just a partition of transparent

1502
01:18:42,600 --> 01:18:47,400
objects and opaque objects and the opaque objects First Responders.

1503
01:18:47,400 --> 01:18:50,500
It's just a property of their material so I don't even really have to

1504
01:18:50,500 --> 01:18:51,900
look at anything.

1505
01:18:52,200 --> 01:18:54,100
They don't have to form graphs or anything.

1506
01:18:54,300 --> 01:18:56,100
I can just purely partition it.

1507
01:18:56,200 --> 01:18:59,400
Every time I go to render an object, it is this an object that has

1508
01:18:59,400 --> 01:18:59,900
transparency

1509
01:19:00,000 --> 01:19:03,700
You're not based on its material settings, or whatever, and it just

1510
01:19:03,700 --> 01:19:05,700
goes into one buffer, the other, right?

1511
01:19:06,900 --> 01:19:10,600
So you can see how this could be made Fairly efficient, as long as you

1512
01:19:10,600 --> 01:19:13,500
know, you don't have too many transparent things in the scene.

1513
01:19:13,700 --> 01:19:17,200
Now again, particles, make this harder because particles are often

1514
01:19:17,200 --> 01:19:18,700
times want to be transparent.

1515
01:19:18,700 --> 01:19:22,800
And there's lots of them so you typically have to think harder about

1516
01:19:22,800 --> 01:19:26,200
how you're doing stuff like that and there's lots of ways you can work

1517
01:19:26,200 --> 01:19:28,900
with these things when you go down the rabbit hole of modern 3D

1518
01:19:28,900 --> 01:19:32,000
rendering, it's like all these crazy hacks and ways of doing stuff to

1519
01:19:32,000 --> 01:19:33,600
get what you want to have happen.

1520
01:19:36,400 --> 01:19:39,400
It's not clean like Ray tracing where the rendering is very

1521
01:19:39,400 --> 01:19:43,000
straightforward but the spatial partitioning is where the hacking

1522
01:19:43,000 --> 01:19:45,800
comes in and the sampling and all that stuff, right?

1523
01:19:45,800 --> 01:19:49,600
So you know it's different rasterization has a different set of facts,

1524
01:19:49,600 --> 01:19:50,200
right?

1525
01:19:51,500 --> 01:19:53,300
So anyway so that's how that works.

1526
01:19:53,900 --> 01:19:56,300
We're almost out of time but I think I've covered almost everything.

1527
01:19:56,500 --> 01:20:00,200
The only thing I wanted to mention is that overdraw still matters

1528
01:20:07,100 --> 01:20:10,300
And so this is the one other caveat, which is that just because you

1529
01:20:10,300 --> 01:20:12,100
have a z-buffer, it's like yes.

1530
01:20:12,100 --> 01:20:16,500
The Z buffer does solve your sorting problems for you in a lot of ways

1531
01:20:16,500 --> 01:20:19,900
now transparency and translucency, it does not.

1532
01:20:20,000 --> 01:20:22,600
So you still have to come up with other solutions to fix that.

1533
01:20:22,600 --> 01:20:24,200
You're not out of the Sorting woods.

1534
01:20:24,500 --> 01:20:28,300
Yet when you have a lot when you have to a lot of that in the game,

1535
01:20:28,300 --> 01:20:29,300
however, you're dealing with it.

1536
01:20:29,300 --> 01:20:29,800
Right?

1537
01:20:30,000 --> 01:20:34,800
So that's the matter is, it's important to understand but it does

1538
01:20:34,800 --> 01:20:36,700
solve all the other sorting problems for you and it

1539
01:20:36,900 --> 01:20:39,000
Allows things to nest in 3D, really cleanly.

1540
01:20:39,000 --> 01:20:43,400
Because since it's interpolated per pixel, not per object, it ends up

1541
01:20:43,400 --> 01:20:47,600
with a lot of sorting things that would have caused problems when you

1542
01:20:47,600 --> 01:20:51,200
have to do them logistically by bounding boxes are no longer problems

1543
01:20:51,200 --> 01:20:54,300
because now instead of primitive it's per pixel and it can resolve

1544
01:20:54,300 --> 01:20:55,800
things very cleanly like those painter.

1545
01:20:55,800 --> 01:20:57,900
Algorithm Cycles are not a problem anymore.

1546
01:20:57,900 --> 01:20:59,800
Even intersection not a problem anymore.

1547
01:21:00,000 --> 01:21:02,400
You can still handle that cleanly per pixel, right?

1548
01:21:03,800 --> 01:21:06,700
But overdraw still does matter.

1549
01:21:07,300 --> 01:21:09,400
And let's just say what that actually means.

1550
01:21:09,600 --> 01:21:14,500
So what overdraw means is obviously like gpus are fast.

1551
01:21:15,900 --> 01:21:16,900
But not.

1552
01:21:18,100 --> 01:21:19,800
You know, infinitely.

1553
01:21:23,800 --> 01:21:24,400
Fast.

1554
01:21:24,600 --> 01:21:28,500
And so, yes, a GPU does allow you to overdraw the screen many times

1555
01:21:28,700 --> 01:21:31,300
and, and certainly much more powerful than the CPU in terms of filling

1556
01:21:31,300 --> 01:21:33,400
pixels because it's all a GPU is designed to do.

1557
01:21:33,600 --> 01:21:35,500
It's just a giant pixel filling machine.

1558
01:21:35,600 --> 01:21:38,800
So obviously it's really good at that, and you can take advantage of

1559
01:21:38,800 --> 01:21:42,700
that and be a bit sloppy in order to get better rendering stuff out of

1560
01:21:42,700 --> 01:21:43,100
it.

1561
01:21:43,100 --> 01:21:45,200
So that you don't have to think about all the sorting and that sort of

1562
01:21:45,200 --> 01:21:45,300
thing.

1563
01:21:45,300 --> 01:21:46,400
And sloppy is the wrong term.

1564
01:21:46,400 --> 01:21:49,300
Because you're still, you're going towards the strength of what you

1565
01:21:49,300 --> 01:21:52,300
have, which is not really sloppy, but I just mean you be more loose,

1566
01:21:52,300 --> 01:21:53,400
you don't have to do all the sorting and

1567
01:21:53,600 --> 01:21:58,300
That but it still matters how much you overdraw because the GPU can't

1568
01:21:58,300 --> 01:22:00,200
overdraw the screen, an infinite number of times.

1569
01:22:00,500 --> 01:22:03,600
So the speed with which you can draw to the screen is still important

1570
01:22:03,600 --> 01:22:06,800
and one of the things that's really affects, this is not just how many

1571
01:22:06,800 --> 01:22:10,500
times a pixel is filled, but it's how much work you have to do every

1572
01:22:10,500 --> 01:22:12,000
time that you fill one.

1573
01:22:12,000 --> 01:22:16,900
And what that means is let's say this is very important when you get

1574
01:22:16,900 --> 01:22:18,000
into shaders.

1575
01:22:23,100 --> 01:22:25,200
Now, a Shader as you probably know.

1576
01:22:26,500 --> 01:22:31,400
Is basically a piece of code that can be executed on the GPU, for

1577
01:22:31,400 --> 01:22:32,500
example, per pixel.

1578
01:22:32,500 --> 01:22:35,700
So on every pixel you could execute this Shader, that can be a

1579
01:22:35,700 --> 01:22:39,700
relatively expensive complicated set of mathematical operations that

1580
01:22:39,700 --> 01:22:42,300
can do calculations for what that pixel should look like.

1581
01:22:42,500 --> 01:22:45,400
And these can Encompass, a lot of very complicated things.

1582
01:22:45,800 --> 01:22:49,700
This can Encompass things, such as like, complicated, lighting

1583
01:22:49,800 --> 01:22:53,400
equations, that sample, multiple light sources that you shadowing

1584
01:22:53,400 --> 01:22:56,100
information that do transforms to

1585
01:22:56,300 --> 01:22:56,800
You're out.

1586
01:22:56,800 --> 01:22:59,300
What kind of reflectance is happening at this pixel.

1587
01:22:59,500 --> 01:23:02,100
There's lots and lots of things that can happen and you can end up

1588
01:23:02,100 --> 01:23:02,600
with shaders.

1589
01:23:02,600 --> 01:23:03,800
That can be very expensive.

1590
01:23:03,800 --> 01:23:07,100
They're doing lots of operational, GPU using lots of floating-point,

1591
01:23:07,100 --> 01:23:09,700
computations, that can be very, very slow.

1592
01:23:10,300 --> 01:23:13,800
What that means is the more complicated you make these shaders.

1593
01:23:13,800 --> 01:23:17,900
The more expensive, it can be to overdraw the screen because, you

1594
01:23:17,900 --> 01:23:22,200
know, yes, if all you're doing is taking a constant rgba value, from a

1595
01:23:22,200 --> 01:23:25,300
texture, like all your sampling one texture, right?

1596
01:23:25,900 --> 01:23:26,200
And

1597
01:23:26,300 --> 01:23:28,700
Get to the screen, you may be able to overdraw the screen.

1598
01:23:28,700 --> 01:23:31,500
Just put Splat Sprite, some type of Sprites on top of Sprites.

1599
01:23:31,500 --> 01:23:35,400
Facebook ad infinitum and maybe it is basically infinitely fast

1600
01:23:35,400 --> 01:23:39,100
because oh my God, gpus are so powerful per pixel, it doesn't matter,

1601
01:23:39,100 --> 01:23:40,200
you're fine, right.

1602
01:23:40,700 --> 01:23:43,800
But if all of a sudden, instead of sampling from one texture, your

1603
01:23:43,800 --> 01:23:47,800
sampling from 16, textures at a time, you're doing like, you know,

1604
01:23:47,800 --> 01:23:50,400
thousands of math, Ops or something to compute.

1605
01:23:50,400 --> 01:23:53,600
All kinds of complicated shading and combining the results from all

1606
01:23:53,600 --> 01:23:55,600
these textures and surface lighting.

1607
01:23:55,600 --> 01:23:55,900
And

1608
01:23:56,300 --> 01:23:59,500
tons of Shadow maps from tons of lights, and all this sort of thing,

1609
01:23:59,500 --> 01:23:59,800
right?

1610
01:24:00,100 --> 01:24:02,000
Now this cheaters very expensive.

1611
01:24:02,100 --> 01:24:05,700
And if you're trying to overdraw a pixel with that kind of expensive

1612
01:24:05,700 --> 01:24:09,200
Shader, 20 30, 50, 100 times.

1613
01:24:09,200 --> 01:24:12,300
All of a sudden your games performance, consider a crawl because even

1614
01:24:12,300 --> 01:24:15,800
though the GPU has tons of flops at his disposal, it's not infinite.

1615
01:24:15,900 --> 01:24:18,600
It can't just do an infinite number of math operations.

1616
01:24:20,200 --> 01:24:24,700
So even though you have a z-buffer and overdraw as a graphical,

1617
01:24:24,700 --> 01:24:28,000
artifact is no longer a problem and the Sorting doesn't matter, you

1618
01:24:28,000 --> 01:24:29,500
can just draw as many things as you want.

1619
01:24:29,500 --> 01:24:30,700
And they will sort properly.

1620
01:24:31,000 --> 01:24:36,500
You still have to understand that, filling in actual pixel is costly

1621
01:24:37,200 --> 01:24:42,000
what that means is that there are still ways in which you must

1622
01:24:42,000 --> 01:24:45,000
structure your pipeline, if you are going for high performance,

1623
01:24:45,000 --> 01:24:46,900
complicated shaders and stuff like that.

1624
01:24:48,200 --> 01:24:53,100
You may have to make certain concessions in your pipeline designed to

1625
01:24:53,100 --> 01:24:54,300
mitigate this problem.

1626
01:24:54,300 --> 01:24:58,700
And so one example of a way that this often works is what's called a z

1627
01:24:58,700 --> 01:24:59,600
prepass

1628
01:25:03,500 --> 01:25:05,800
and what this is, is, hey,

1629
01:25:07,400 --> 01:25:11,600
I know that I'm going to be using some really complicated shaders that

1630
01:25:11,600 --> 01:25:16,900
are very expensive so I really don't want to worry about that

1631
01:25:16,900 --> 01:25:20,200
situation that I just described where I've got like all these things

1632
01:25:20,200 --> 01:25:20,900
stacked up.

1633
01:25:20,900 --> 01:25:23,200
Like here's all these pixels stocked up on top of each other.

1634
01:25:23,200 --> 01:25:27,100
There's six pixels worth of overdraw there, right?

1635
01:25:27,100 --> 01:25:28,900
6 / shouldn't say 6 pixels.

1636
01:25:28,900 --> 01:25:31,200
Let's just say 6X overdraw.

1637
01:25:33,400 --> 01:25:37,700
I'm going to overdraw this pixel six times, but I've only got enough

1638
01:25:37,700 --> 01:25:43,100
GPU horsepower to execute my Shader like two times, right?

1639
01:25:43,600 --> 01:25:45,600
It's like so, what am I going to do?

1640
01:25:46,100 --> 01:25:48,000
You know, do I start to try and calm?

1641
01:25:48,000 --> 01:25:50,700
I seen more aggressively the, you know, what do I do?

1642
01:25:51,600 --> 01:25:53,800
And the answer is well for opaque stuff.

1643
01:25:53,800 --> 01:25:56,100
Actually, you have another option at your disposal.

1644
01:25:56,300 --> 01:26:00,500
What you can do is draw the scene at six x overdraw, just like you

1645
01:26:00,500 --> 01:26:02,700
were doing, but with no Shader brush,

1646
01:26:02,800 --> 01:26:04,400
Sickly, right?

1647
01:26:04,500 --> 01:26:06,300
Get rid of the Shader, turn it off.

1648
01:26:06,400 --> 01:26:10,600
Instead of filling the color values of the buffer at all, just right

1649
01:26:10,600 --> 01:26:12,700
to the z-buffer, right?

1650
01:26:12,900 --> 01:26:14,400
And this is called a z prepass.

1651
01:26:14,400 --> 01:26:19,000
So what it does is it fills the that Z value buffer with whatever the

1652
01:26:19,000 --> 01:26:22,300
latest buffer value actually was right.

1653
01:26:23,100 --> 01:26:27,100
So even though there are six different things that all overlapped,

1654
01:26:27,100 --> 01:26:31,600
this pixel, I only end up with the Z value of the final one and it was

1655
01:26:31,600 --> 01:26:32,600
pretty cheap for me to do.

1656
01:26:32,800 --> 01:26:35,300
Because no complicated Shader was getting run.

1657
01:26:35,400 --> 01:26:39,900
There were, you know, 10 math Ops in my simple z-pass Shader, not

1658
01:26:39,900 --> 01:26:43,800
1,000 math Ops in my super complicated, Mega lighting Ridiculousness

1659
01:26:43,800 --> 01:26:44,400
Trader.

1660
01:26:44,900 --> 01:26:52,000
Right now, once I have done my zp past and I have that final z-value,

1661
01:26:52,400 --> 01:26:56,200
I do the actual color pass, right?

1662
01:26:56,300 --> 01:26:59,200
Where I do execute the Thousand math op Shader.

1663
01:26:59,400 --> 01:26:59,900
But what I

1664
01:27:00,000 --> 01:27:06,800
Do is I predicate that on Z of being equal.

1665
01:27:08,300 --> 01:27:11,500
To Z right on my source C being equal to my desk Z.

1666
01:27:11,700 --> 01:27:18,600
So I say remember back here at our where we can I get the come?

1667
01:27:18,600 --> 01:27:20,200
How where are we?

1668
01:27:20,200 --> 01:27:21,700
Where I drew it up here somewhere.

1669
01:27:22,400 --> 01:27:23,100
Okay, here it is.

1670
01:27:23,600 --> 01:27:24,200
Right.

1671
01:27:24,200 --> 01:27:27,400
Remember because we've got this this sort of theoretical pipeline

1672
01:27:27,400 --> 01:27:27,800
happening.

1673
01:27:28,000 --> 01:27:32,000
I've got these past comparisons and I'm going to say the source Z has

1674
01:27:32,000 --> 01:27:36,100
to be equal to the destination see of this buffer in order for this

1675
01:27:36,100 --> 01:27:37,400
pixel to pass.

1676
01:27:38,100 --> 01:27:38,400
Right?

1677
01:27:38,900 --> 01:27:42,300
What that means is, I will never draw a pixel.

1678
01:27:43,300 --> 01:27:46,200
If it's not the final one that we would have seen.

1679
01:27:46,200 --> 01:27:50,100
So all those other pixels don't have to be drawn and what's really

1680
01:27:50,100 --> 01:27:55,200
great about modern gpus is they're smart enough to early out.

1681
01:27:55,300 --> 01:28:00,100
So even though this comparison conceptually happens at the end of the

1682
01:28:00,100 --> 01:28:04,700
pipeline, right, in some sense they actually do it up here.

1683
01:28:05,500 --> 01:28:07,900
So what they will do is at the earliest possible

1684
01:28:08,000 --> 01:28:11,900
possible time and of course, depending on how you write your Shader

1685
01:28:11,900 --> 01:28:14,300
shaders can modify the Z value and stuff like this.

1686
01:28:14,300 --> 01:28:18,000
So the earliest possible time may not be right at the beginning, but

1687
01:28:18,100 --> 01:28:22,100
either way at the earliest possible time they can

1688
01:28:23,300 --> 01:28:27,800
They will determine whether or not this pixel will be drawn and if it

1689
01:28:27,800 --> 01:28:32,200
cannot be drawn, they will not bother doing all of these operations.

1690
01:28:33,300 --> 01:28:33,900
Right.

1691
01:28:34,700 --> 01:28:39,100
So that's really, really cool because it means that you can save a lot

1692
01:28:39,100 --> 01:28:40,100
of computation.

1693
01:28:40,300 --> 01:28:44,700
Now it's not quite as rosy as I make it sound.

1694
01:28:44,900 --> 01:28:49,200
And the reason for that is because these things are wide as we've

1695
01:28:49,200 --> 01:28:54,500
talked about before gpus work, the same way as our CPU renderer.

1696
01:28:56,400 --> 01:28:57,000
Worked.

1697
01:28:57,200 --> 01:29:00,600
And if you remember, we fill multiple pixels at a time.

1698
01:29:00,800 --> 01:29:02,000
We filled.

1699
01:29:02,000 --> 01:29:07,500
I think for pixels across, at a time we filled this at a time gpus

1700
01:29:07,500 --> 01:29:08,700
typically will do more.

1701
01:29:08,700 --> 01:29:11,300
Like, you know, this at a time.

1702
01:29:15,100 --> 01:29:15,600
Right.

1703
01:29:15,900 --> 01:29:20,200
So gpus will kind of fill more like a 4 by 4 block or something like

1704
01:29:20,200 --> 01:29:21,100
that at the time.

1705
01:29:23,300 --> 01:29:24,500
Depending on the architecture.

1706
01:29:24,500 --> 01:29:27,500
I don't keep up with this sort of thing so I don't really know how

1707
01:29:27,500 --> 01:29:30,900
many pixels they feel at a time at the moment but they fill a bigger

1708
01:29:30,900 --> 01:29:34,400
swath of pixels at a time to the CPU but basically it's the same thing

1709
01:29:34,900 --> 01:29:38,700
and if you remember how that works is what happens is the entire

1710
01:29:38,700 --> 01:29:44,900
pipeline gets run for all 16 pixels at a time and you can only early

1711
01:29:44,900 --> 01:29:49,300
out if all 16 pixels are not going to pass that Z.

1712
01:29:49,800 --> 01:29:52,900
So what that means is you do end up with some ways.

1713
01:29:53,000 --> 01:29:58,100
it's there because if you did have some of these pixels pass you're

1714
01:29:58,100 --> 01:29:59,900
going to but a bunch of them wouldn't

1715
01:30:00,000 --> 01:30:03,300
Have you're still going to blow all of those thousand math apps

1716
01:30:03,300 --> 01:30:07,800
Computing, the entire four by four even though you only needed a

1717
01:30:07,800 --> 01:30:09,000
little bit of it.

1718
01:30:09,400 --> 01:30:13,500
So to a certain extent it's not as perfect as it would be.

1719
01:30:13,500 --> 01:30:19,100
If every pixel only ran in terms of flops, you're actually talking

1720
01:30:19,100 --> 01:30:23,600
about it on a slightly coarser level, but hopefully things are not

1721
01:30:23,600 --> 01:30:27,300
going in and out quite so closely for Pixel anyway.

1722
01:30:27,400 --> 01:30:29,900
Like presumably your triangles or at least as big

1723
01:30:30,000 --> 01:30:31,400
big as a few of these.

1724
01:30:31,400 --> 01:30:34,300
So, you know, typically a triangle is going to at least take up some

1725
01:30:34,300 --> 01:30:37,800
of that space, let's say, especially when you start getting to higher

1726
01:30:37,800 --> 01:30:38,600
resolutions.

1727
01:30:39,200 --> 01:30:43,200
So you know, a z, prepass is definitely really great and it can

1728
01:30:43,200 --> 01:30:47,200
eliminate certainly all of this crazy far back stuff, but when you

1729
01:30:47,200 --> 01:30:51,600
start to get to the edges of things, it's not quite as, you know, as

1730
01:30:51,600 --> 01:30:54,900
perfect as you would expect if you were thinking of it as a per pixel

1731
01:30:54,900 --> 01:30:57,200
basis, so overdressed still matters.

1732
01:30:57,400 --> 01:30:59,800
And when you're looking at higher end, graphics performance,

1733
01:31:00,000 --> 01:31:04,000
Need to think about it and have a pipeline that acknowledges the fact

1734
01:31:04,000 --> 01:31:06,200
that it is not free to compute pixels.

1735
01:31:06,400 --> 01:31:10,100
So if the pixel color values, your Computing are never shown on the

1736
01:31:10,100 --> 01:31:13,500
screen, you want to take steps to mitigate that.

1737
01:31:13,500 --> 01:31:16,300
Even if you are still requiring, the z-buffer to do, most of that

1738
01:31:16,300 --> 01:31:21,600
coloring for you, you still sort of need to be aware of that.

1739
01:31:21,900 --> 01:31:23,800
So I'll go ahead and take questions.

1740
01:31:23,800 --> 01:31:28,100
We'll probably obviously, we don't have any time for

1741
01:31:32,300 --> 01:31:34,600
To do any code today because we had just a lot of stuff to cover.

1742
01:31:34,600 --> 01:31:37,300
Their didn't know how long I would take to fill that, but there's a

1743
01:31:37,300 --> 01:31:38,100
lot of stuff in there.

1744
01:31:38,800 --> 01:31:41,300
So we'll take a look at actually doing some coding tomorrow.

1745
01:31:41,500 --> 01:31:47,500
Ask if anyone has any questions let me let me just go ahead and

1746
01:31:49,000 --> 01:31:49,500
take a look.

1747
01:31:53,300 --> 01:31:57,400
Disused asks, is it possible to use differing and possibly post

1748
01:31:57,400 --> 01:32:00,900
processing and super resolution for order independent transparency.

1749
01:32:01,500 --> 01:32:03,700
Yes, it is one.

1750
01:32:03,900 --> 01:32:08,100
You know, one way that you used to do transparency in the old days

1751
01:32:08,500 --> 01:32:12,500
order, an event transparency to a certain extent was to do screen

1752
01:32:12,500 --> 01:32:12,900
door.

1753
01:32:12,900 --> 01:32:14,400
What's called the screen door effect?

1754
01:32:14,600 --> 01:32:19,300
And what that is is again you just you basically say well okay you

1755
01:32:19,300 --> 01:32:21,900
know one way to do it is to think of a pixel as the

1756
01:32:22,100 --> 01:32:23,100
Circular color value.

1757
01:32:23,100 --> 01:32:26,400
And I'm just going to try to write to the pixel and do the alpha

1758
01:32:26,400 --> 01:32:27,400
blending per pixel.

1759
01:32:27,600 --> 01:32:31,100
Another way to look at it is let's look at more than one pixel at a

1760
01:32:31,100 --> 01:32:31,600
time.

1761
01:32:31,900 --> 01:32:35,500
So maybe I'm looking at more of a grid of pixels and what I'll do is

1762
01:32:35,500 --> 01:32:39,400
if a thing is transparent, I'll fill in just maybe like every other

1763
01:32:39,400 --> 01:32:44,100
pixel or something like this, you know, in some kind of pattern and

1764
01:32:44,100 --> 01:32:47,000
then I'll hope that when I have other transparent things, they don't

1765
01:32:47,000 --> 01:32:47,900
quite line up.

1766
01:32:48,100 --> 01:32:48,900
Exactly.

1767
01:32:48,900 --> 01:32:51,900
And so I'll fill them in a different order and then those things.

1768
01:32:52,000 --> 01:32:55,300
If I downsample that buffer would blend together and produce sort of a

1769
01:32:55,300 --> 01:32:56,900
transparent effect, right?

1770
01:32:57,600 --> 01:32:59,800
And that is certainly one way of

1771
01:33:00,000 --> 01:33:03,500
Going to approach it and that actually becomes also, again more

1772
01:33:03,500 --> 01:33:07,100
feasible because modern gpus have something called multi sample

1773
01:33:07,100 --> 01:33:10,700
buffers, which are buffers that have per pixel more than one sample

1774
01:33:10,700 --> 01:33:13,200
and their jittered, and you can do some things with that.

1775
01:33:13,200 --> 01:33:17,200
If you want to try to, I don't know that high-end people do that.

1776
01:33:17,200 --> 01:33:20,800
I think they try to do more, the linked list and chunked rendering

1777
01:33:20,800 --> 01:33:24,500
sorts of approaches, but that's not really my area of expertise.

1778
01:33:24,500 --> 01:33:27,000
So I don't feel comfortable saying one way or the other, whether

1779
01:33:27,000 --> 01:33:29,800
that's a technique that people use nowadays in,

1780
01:33:30,000 --> 01:33:31,800
Actual high-end work or not.

1781
01:33:32,700 --> 01:33:37,400
You would have to ask more dedicated rendering sort of person.

1782
01:33:39,600 --> 01:33:43,400
How prevalent a technique like that tends to be these days?

1783
01:33:45,100 --> 01:33:46,400
But it definitely, it's definitely.

1784
01:33:46,400 --> 01:33:48,300
I guess all I'm trying to say is, it's definitely plausible.

1785
01:33:48,500 --> 01:33:51,800
It was used in the past, I just don't know if it's really relevant

1786
01:33:51,800 --> 01:33:52,300
today.

1787
01:33:52,300 --> 01:33:56,000
That's, that's all I'm trying to say was enabled per pixel sorting on

1788
01:33:56,000 --> 01:33:56,800
the graphics card.

1789
01:33:56,900 --> 01:34:00,700
What if any software control is available via shaders?

1790
01:34:00,900 --> 01:34:02,800
Or is it just a hardware optimization?

1791
01:34:03,000 --> 01:34:05,700
That some graphics cards do behind the scenes to handle the opacity

1792
01:34:05,700 --> 01:34:07,900
issue without pre-filter z-buffer?

1793
01:34:09,200 --> 01:34:14,300
Actually it's entirely in shaders, so it's entirely up to you that

1794
01:34:14,300 --> 01:34:14,800
implementation.

1795
01:34:14,900 --> 01:34:18,100
Shouldn't of the linked list thing is actually entirely up to you.

1796
01:34:18,300 --> 01:34:18,600
The

1797
01:34:20,700 --> 01:34:23,700
I guess I was kind of going kind of fast and I sort of skipped this

1798
01:34:23,700 --> 01:34:24,300
part.

1799
01:34:24,300 --> 01:34:25,900
I didn't say why this was important.

1800
01:34:25,900 --> 01:34:29,200
I just said that it was there the point of the atomics.

1801
01:34:29,900 --> 01:34:30,900
Now, you know what atomics are?

1802
01:34:30,900 --> 01:34:33,700
If you've been watching handmade here, atomics our way of multiple

1803
01:34:33,700 --> 01:34:40,200
CPU, cores or multiple CPUs to synchronize their access to memory in a

1804
01:34:40,200 --> 01:34:42,100
way that they don't accidentally overwrite each other.

1805
01:34:42,100 --> 01:34:44,900
And this is very important for multi-threaded programming because at

1806
01:34:44,900 --> 01:34:48,500
the place where those threads have to communicate, you need a way of

1807
01:34:48,500 --> 01:34:50,200
synchronizing them and atomics.

1808
01:34:50,300 --> 01:34:53,000
The only way to do that because otherwise, the two cores would just

1809
01:34:53,000 --> 01:34:55,100
write on each other's memory and have no idea.

1810
01:34:55,200 --> 01:34:57,300
They would not be able to sync up in any real waste.

1811
01:34:57,300 --> 01:35:03,300
You need some way at least one way of being able to cleanly Signal a

1812
01:35:03,300 --> 01:35:06,600
right to a memory that you know, will not get overwritten by somebody

1813
01:35:06,600 --> 01:35:08,900
else, sort of in-flight, right?

1814
01:35:10,600 --> 01:35:13,000
And so, for a long time, GPU is never had anything like that.

1815
01:35:13,000 --> 01:35:16,100
That was accessible to you if they obviously had to deal with this

1816
01:35:16,300 --> 01:35:18,600
internal themselves because they are heavily multi-threaded

1817
01:35:18,600 --> 01:35:19,300
internally.

1818
01:35:19,900 --> 01:35:21,700
But then they started exposing these.

1819
01:35:21,700 --> 01:35:24,300
The shaders I believe amd's, the people are first introduced it

1820
01:35:24,300 --> 01:35:26,500
several years ago, Atomic rights, the frame buffer.

1821
01:35:27,300 --> 01:35:30,600
And what these are is they're just like the things you can do on the

1822
01:35:30,600 --> 01:35:34,200
CPU, like Atomic increment or something like this for Atomic Swap.

1823
01:35:35,500 --> 01:35:36,600
And what they allow you to do.

1824
01:35:36,600 --> 01:35:38,100
I started on Exchange, I should say.

1825
01:35:39,700 --> 01:35:43,400
And what they allow you to do is when you are doing a right to a frame

1826
01:35:43,400 --> 01:35:45,900
buffer, you can actually do that right atomically.

1827
01:35:46,100 --> 01:35:48,700
So you can have two people looking at the frame buffer going.

1828
01:35:49,000 --> 01:35:52,400
I want to put a I shouldn't say frame buffer either.

1829
01:35:52,400 --> 01:35:53,800
Just the destination.

1830
01:35:53,800 --> 01:35:57,200
Whatever the thing is that you're writing to, I want to people to be

1831
01:35:57,200 --> 01:35:58,500
able to access the same time.

1832
01:35:58,700 --> 01:35:59,500
I want them to be able to

1833
01:36:00,000 --> 01:36:03,800
We swap a linked list value in and know that nobody else did that same

1834
01:36:03,800 --> 01:36:05,700
swap the same time, right?

1835
01:36:06,800 --> 01:36:11,300
And so that allows you to in the Shader build the linked list and then

1836
01:36:11,300 --> 01:36:13,200
later you can write a Shader that synchronous.

1837
01:36:13,200 --> 01:36:16,700
So it's not multi-threaded because hey, it's doing it for every pixel.

1838
01:36:16,700 --> 01:36:19,100
So I mean it is multi-threaded, the sense that every thread could be

1839
01:36:19,100 --> 01:36:21,500
operating different pixels but there aren't multiple threads trying to

1840
01:36:21,500 --> 01:36:22,300
talk to the same.

1841
01:36:22,300 --> 01:36:23,300
Talk about the same pixel.

1842
01:36:23,800 --> 01:36:25,300
That one can just be a Shader.

1843
01:36:25,300 --> 01:36:28,500
That literally walks a linked list and these are you write these and

1844
01:36:28,500 --> 01:36:28,800
shaders?

1845
01:36:28,800 --> 01:36:29,800
That's how advanced shade.

1846
01:36:30,000 --> 01:36:30,600
Those are these days.

1847
01:36:30,600 --> 01:36:32,700
Shaders are incredibly incredibly.

1848
01:36:35,100 --> 01:36:37,300
Complicated and Powerful.

1849
01:36:37,300 --> 01:36:43,400
They can do almost everything that you can do in regular C code.

1850
01:36:43,400 --> 01:36:49,600
Really you can do that in the Shader, they're very general purpose.

1851
01:36:51,400 --> 01:36:53,500
They have different performance characteristics but they're very

1852
01:36:53,500 --> 01:36:54,300
general purpose.

1853
01:36:54,500 --> 01:36:55,700
That's why you have.

1854
01:36:55,900 --> 01:36:59,800
I mean you know their stuff that will compile C code to run in and

1855
01:36:59,800 --> 01:37:01,000
shaders, right?

1856
01:37:01,200 --> 01:37:05,900
Compute shaders and so if you're if you're talking about not shaders

1857
01:37:05,900 --> 01:37:09,500
that are in the actual Graphics pipeline you literally can write just

1858
01:37:09,500 --> 01:37:10,800
C code and have it work.

1859
01:37:10,800 --> 01:37:15,300
That's what these opencl and Cuda and stuff.

1860
01:37:15,300 --> 01:37:19,300
Basically, our is their ways of writing, just general purpose code,

1861
01:37:19,800 --> 01:37:21,100
with atomics and everything.

1862
01:37:22,000 --> 01:37:23,300
That just run on the GPU.

1863
01:37:23,300 --> 01:37:26,400
So they're very, very flexible nowadays.

1864
01:37:27,000 --> 01:37:28,300
It's just the like

1865
01:37:30,400 --> 01:37:32,400
it's just the difference.

1866
01:37:32,400 --> 01:37:38,400
There is just that the performance characteristics are different

1867
01:37:38,400 --> 01:37:41,300
between the two, so you have to be aware of that when you're writing

1868
01:37:41,300 --> 01:37:41,800
the code.

1869
01:37:52,300 --> 01:37:52,700
Anonymous.

1870
01:37:52,700 --> 01:37:56,600
519 what do you think of frame buffering like Vulcans Mill box?

1871
01:37:56,600 --> 01:38:00,900
Present mode to decouple the game update rate from the Display

1872
01:38:00,900 --> 01:38:01,700
Devices.

1873
01:38:01,700 --> 01:38:04,900
Refresh rate, you can render as many frames as you want, but only the

1874
01:38:04,900 --> 01:38:08,500
most recently rendered frame is swapped in on vertical, retrace.

1875
01:38:20,000 --> 01:38:22,400
I mean, I guess what I would say about that is

1876
01:38:30,100 --> 01:38:34,700
I mean first of all I would say my opinion is is skewed, something

1877
01:38:34,700 --> 01:38:41,300
like that and I think it's because I have very specific priorities for

1878
01:38:41,300 --> 01:38:42,000
how I.

1879
01:38:42,000 --> 01:38:48,100
What I feel like is important that do not necessarily aligned with

1880
01:38:48,100 --> 01:38:52,500
high-end rendering people's priorities or Gamers priorities

1881
01:38:52,500 --> 01:38:59,100
necessarily right for end and how I would describe my Outlook it is I

1882
01:38:59,100 --> 01:38:59,700
think

1883
01:39:00,000 --> 01:39:01,100
In rate is critical.

1884
01:39:01,500 --> 01:39:06,300
I think it drastically affects the way again, feels.

1885
01:39:06,900 --> 01:39:11,200
And I do not find variable frame rate as an acceptable way of

1886
01:39:11,200 --> 01:39:13,400
displaying graphics.

1887
01:39:14,900 --> 01:39:22,600
That is my opinion and it is not necessarily relevant to a certain

1888
01:39:22,600 --> 01:39:26,200
segment of the gaming population or the developer population.

1889
01:39:26,500 --> 01:39:28,700
Perhaps not even the majority of it, right.

1890
01:39:29,300 --> 01:39:32,100
They may much prefer variable frame rates.

1891
01:39:33,800 --> 01:39:39,200
So in my mind, I would much rather that a game ran at a fixed frame

1892
01:39:39,200 --> 01:39:39,600
rate.

1893
01:39:39,600 --> 01:39:43,000
Whatever the appropriate fixed frame rate was with less graphical

1894
01:39:43,000 --> 01:39:43,800
quality.

1895
01:39:45,000 --> 01:39:48,500
Then one that pushed the graphical quality limit right to the edge.

1896
01:39:48,600 --> 01:39:51,600
And didn't quite always make 30 frames a second.

1897
01:39:51,600 --> 01:39:54,600
So it's swapped it like, you know, sometimes 40 frames per second,

1898
01:39:55,000 --> 01:39:58,600
sometimes, 27 frames a second, you know, that sort of thing.

1899
01:40:00,700 --> 01:40:06,600
So I feel like a 100% consistent frame rate is absolutely critical and

1900
01:40:06,600 --> 01:40:11,000
the most important thing that you can do.

1901
01:40:11,600 --> 01:40:17,000
And so I don't care about things like mailbox mode because that is

1902
01:40:17,000 --> 01:40:20,700
totally not, if your, or if you're in a situation where you can't be

1903
01:40:20,700 --> 01:40:23,900
synced to the refresh rate, so, that you always have a frame ready

1904
01:40:23,900 --> 01:40:28,800
when, when the next predicted frame refresh happens.

1905
01:40:29,500 --> 01:40:36,600
I've already lost the battle and I consider it a failure, right?

1906
01:40:38,500 --> 01:40:42,000
So because of that, that's not a kind of mode that I'm interested in,

1907
01:40:43,000 --> 01:40:46,600
but you can understand why, that mode might be very important to some

1908
01:40:46,600 --> 01:40:48,800
people who have different priorities.

1909
01:40:48,900 --> 01:40:53,800
If your priority is very high graphics quality and you don't want to

1910
01:40:53,800 --> 01:40:59,900
make concessions to maintain a fixed frame rate, right?

1911
01:41:01,000 --> 01:41:04,700
Then you can understand why something like, mailbox mode would be very

1912
01:41:04,700 --> 01:41:05,400
important.

1913
01:41:06,400 --> 01:41:06,900
Right?

1914
01:41:07,900 --> 01:41:14,900
Because it allows you to get that trade-off much more narrowly, right?

1915
01:41:14,900 --> 01:41:19,700
It allows you to really Target 100 percent of the GPU power every

1916
01:41:19,700 --> 01:41:20,300
frame.

1917
01:41:20,800 --> 01:41:23,600
You don't have to leave any slap there, because if you're a little bit

1918
01:41:23,600 --> 01:41:26,800
over a little bit under any time, it doesn't matter because the frame

1919
01:41:26,800 --> 01:41:30,300
rates for swapping will be much closer to accurate.

1920
01:41:31,800 --> 01:41:34,600
So, you can understand the value of something like that.

1921
01:41:34,600 --> 01:41:35,800
It's just not a value.

1922
01:41:35,800 --> 01:41:36,500
I want.

1923
01:41:39,300 --> 01:41:39,900
And the in.

1924
01:41:39,900 --> 01:41:40,500
So yeah.

1925
01:41:40,500 --> 01:41:42,500
And so it's up to every developer.

1926
01:41:44,200 --> 01:41:46,300
To have their own opinion about that.

1927
01:41:46,800 --> 01:41:51,400
And for devs, that are about that maximization.

1928
01:41:52,600 --> 01:41:55,600
Those are the kinds of modes that that really make a lot of sense,

1929
01:41:56,300 --> 01:41:56,800
right?

1930
01:42:06,200 --> 01:42:09,200
And by the way, I should add that, that attitude that I'm talking

1931
01:42:09,200 --> 01:42:13,100
about, that's my preference pervades, like, everything in the

1932
01:42:13,100 --> 01:42:13,700
pipeline.

1933
01:42:13,700 --> 01:42:19,300
So that means, like, for example, I would never make a pipeline that

1934
01:42:19,300 --> 01:42:23,500
was designed to accelerate something like, oh, I'm inside a room.

1935
01:42:23,500 --> 01:42:27,100
So I'm going to call the stuff on the other side of this wall because

1936
01:42:27,100 --> 01:42:30,200
I know that I can't see through it because I know that as soon as I

1937
01:42:30,200 --> 01:42:35,100
step away and look at a mirror at a window where I can see outside

1938
01:42:35,600 --> 01:42:35,800
that.

1939
01:42:36,000 --> 01:42:40,300
Frame rate would just tank if I was relying on that culling to

1940
01:42:40,300 --> 01:42:42,200
eliminate the stuff on the other side, right?

1941
01:42:42,200 --> 01:42:46,800
So I always tend to think about pipelines as I want them to always do

1942
01:42:46,800 --> 01:42:52,800
and exactly predictable amount of work all the time which is a very

1943
01:42:52,800 --> 01:42:55,700
different way of looking at a pipeline van.

1944
01:42:56,500 --> 01:43:00,400
I want to maximize the graphical quality of any given scene that I'm

1945
01:43:00,400 --> 01:43:05,800
in those are really different attitudes and they they they pervade.

1946
01:43:05,900 --> 01:43:07,100
Everything that you do.

1947
01:43:07,200 --> 01:43:14,300
And I don't think that either one is right or wrong, you know, it's

1948
01:43:14,300 --> 01:43:16,000
just about what you value.

1949
01:43:16,200 --> 01:43:19,000
And I really value that consistency.

1950
01:43:19,200 --> 01:43:24,100
Like, I want to work towards the most consistent graphical

1951
01:43:24,100 --> 01:43:25,700
presentation that I can get.

1952
01:43:26,800 --> 01:43:31,300
but that is not going to be the right decision for everyone and so

1953
01:43:31,300 --> 01:43:35,900
other people will want to push the most amount of GPU power every

1954
01:43:35,900 --> 01:43:38,600
frame and we'll make different trade-offs potentially

1955
01:43:52,000 --> 01:43:57,300
Is it valid to render to sub buffers and then render those sub buffers

1956
01:43:57,300 --> 01:43:58,600
to the back buffer.

1957
01:43:59,000 --> 01:44:04,100
So as to be able to render more than one sub buffer at a time,

1958
01:44:06,500 --> 01:44:14,900
I don't necessarily know what you mean by the question, but I guess I

1959
01:44:14,900 --> 01:44:18,800
would just say if I understand it correctly, then not only is the

1960
01:44:18,800 --> 01:44:19,200
answer.

1961
01:44:19,200 --> 01:44:22,500
Yes, but that is exactly what we're doing in handmade here right now

1962
01:44:23,400 --> 01:44:26,000
and so and in the 3D path as well.

1963
01:44:26,500 --> 01:44:32,600
So obviously there's no reason that you can't also do that in 3D if

1964
01:44:32,600 --> 01:44:34,900
you wanted to, if you need multiple passes.

1965
01:44:35,200 --> 01:44:38,200
Which a lot of times you might want to do for a number of reasons.

1966
01:44:40,400 --> 01:44:47,200
it's an eminently, valid technique and I guess I, yeah, I would just

1967
01:44:47,200 --> 01:44:53,900
say definitely yes, but but we're already doing that in handmade hero

1968
01:44:53,900 --> 01:44:58,600
even in the 2D path, that's how we do the floor, the alpha fade of

1969
01:44:58,600 --> 01:44:59,700
the, of the

1970
01:45:00,000 --> 01:45:09,100
Level floor is done in that exact fashion and so if you, if you go

1971
01:45:09,100 --> 01:45:12,700
look at how that's working, that would work exactly the same as if

1972
01:45:12,700 --> 01:45:13,700
everything was rendered.

1973
01:45:13,700 --> 01:45:19,200
3D z-buffer, a, you just have to Z in addition to two color buffers

1974
01:45:19,300 --> 01:45:20,800
you would have to Z buffers as well.

1975
01:45:20,800 --> 01:45:21,500
And that's

1976
01:45:24,600 --> 01:45:25,000
Yeah.

1977
01:45:27,100 --> 01:45:27,700
So yes.

1978
01:45:34,800 --> 01:45:35,500
And so the risk.

1979
01:45:35,500 --> 01:45:37,800
Oh, do not be afraid to ask questions.

1980
01:45:39,500 --> 01:45:42,500
Handmade here is a complex project at this point and so it's easy to

1981
01:45:42,500 --> 01:45:44,600
not really know what's happening in some parts of it.

1982
01:45:48,200 --> 01:45:51,200
but yes, if again, if that was the question, just wanted to make sure

1983
01:45:52,400 --> 01:45:53,300
Then yes we were.

1984
01:45:53,700 --> 01:45:58,400
We're already doing that and moving the 3D does not change that

1985
01:45:58,400 --> 01:45:59,300
calculus at all.

1986
01:45:59,900 --> 01:46:02,800
It's just that we may not have.

1987
01:46:02,800 --> 01:46:07,000
We may not have to do as much of that right now.

1988
01:46:07,000 --> 01:46:10,100
I think we render every floor potentially into a different buffer.

1989
01:46:10,100 --> 01:46:16,500
I can't remember whether we bother doing that or not we might not in

1990
01:46:16,500 --> 01:46:16,800
fact.

1991
01:46:16,800 --> 01:46:20,300
Yeah, we probably don't because the only thing we really need is one

1992
01:46:20,300 --> 01:46:21,900
extra buffer for the

1993
01:46:22,100 --> 01:46:23,300
Faded floor on top.

1994
01:46:23,300 --> 01:46:26,900
So we probably don't really make much use of it now I think about it

1995
01:46:26,900 --> 01:46:30,400
so probably yeah we would probably have a similar situation in 3D

1996
01:46:30,400 --> 01:46:34,400
where we might have two different buffers and one of the buffers is is

1997
01:46:34,400 --> 01:46:35,900
for exactly that purpose, right?

1998
01:46:35,900 --> 01:46:41,100
It's still exactly the same purpose, but we might not have to do it

1999
01:46:41,100 --> 01:46:44,900
because we could use a z-buffer for this in the future potentially in

2000
01:46:44,900 --> 01:46:46,600
a to pass scenario and other sorts of things.

2001
01:46:46,600 --> 01:46:50,800
So it may be possible for us to do it without a sub buffer.

2002
01:46:50,800 --> 01:46:51,900
Now that we've got a z-buffer

2003
01:46:52,100 --> 01:46:55,700
But we may still want to do it to to a subwoofer for other reasons.

2004
01:46:57,700 --> 01:46:58,700
That we don't know yet.

2005
01:46:58,700 --> 01:47:09,500
So I would expect that we would you know, I would expect to to have

2006
01:47:13,300 --> 01:47:16,800
To have at least one extra buffer in the 3D pass as well for even if

2007
01:47:16,800 --> 01:47:19,800
it's just for, like, lighting or who knows what it may not be for the

2008
01:47:19,800 --> 01:47:23,800
alpha, but but we'll probably have still.

2009
01:47:24,000 --> 01:47:29,000
We will still use the multiple render Target stuff, if that makes

2010
01:47:29,000 --> 01:47:29,400
sense.

2011
01:47:31,000 --> 01:47:32,300
All right, I'm going to wrap up here.

2012
01:47:36,300 --> 01:47:37,000
See here.

2013
01:47:44,600 --> 01:47:45,300
There we go.

2014
01:47:47,400 --> 01:47:48,700
Let me click double check.

2015
01:47:50,200 --> 01:47:54,100
Let's see, do you feel you're still on the path to finishing the game

2016
01:47:54,100 --> 01:47:55,800
in six hundred episodes?

2017
01:47:57,100 --> 01:47:58,100
I have no idea.

2018
01:47:58,300 --> 01:47:59,800
But again, six hundred episodes is just

2019
01:48:00,500 --> 01:48:04,800
Purely arbitrary ballpark to State the obvious.

2020
01:48:05,300 --> 01:48:09,200
I this is the first time I've ever done a programming where I've tried

2021
01:48:09,200 --> 01:48:10,300
to do the teaching.

2022
01:48:10,300 --> 01:48:12,500
At the same time on the stream is the programming.

2023
01:48:14,000 --> 01:48:19,200
So I have absolutely no idea even when I started how long it would

2024
01:48:19,200 --> 01:48:21,200
take because you know a lot of what we do.

2025
01:48:21,200 --> 01:48:22,800
Like today's episode, there's no coding.

2026
01:48:22,800 --> 01:48:25,600
We just me explaining stuff so that people would understand what we're

2027
01:48:25,600 --> 01:48:26,200
going to do.

2028
01:48:27,100 --> 01:48:29,100
And so I have no idea how to gauge that sort of thing.

2029
01:48:29,100 --> 01:48:30,200
So 600 was just a

2030
01:48:30,700 --> 01:48:34,400
Ballpark of like a this is how long it may be would take.

2031
01:48:35,400 --> 01:48:40,400
I would say it hasn't actually been that unlikely like it looks like

2032
01:48:40,400 --> 01:48:41,900
that may be roughly true.

2033
01:48:44,400 --> 01:48:45,500
It's really hard to say.

2034
01:48:45,500 --> 01:48:48,000
It's a little different now because we just recently switched to, to

2035
01:48:48,000 --> 01:48:55,200
our streams, on the weekends, twice a weekend and so previously, 350

2036
01:48:55,200 --> 01:49:00,200
of those were an hour apiece and now the next 250 up to

2037
01:49:00,300 --> 01:49:04,200
It will be two hours apiece, that's more time to write.

2038
01:49:05,800 --> 01:49:08,700
So I don't know we've done most of the engine work.

2039
01:49:09,700 --> 01:49:10,500
We're still refining.

2040
01:49:10,500 --> 01:49:13,300
Some things we want to do a little bit of 3D work here before we move

2041
01:49:13,300 --> 01:49:17,800
forward, but we're still going to have about 400 hours of gameplay,

2042
01:49:17,800 --> 01:49:20,700
programming, we can do and that's a lot.

2043
01:49:21,100 --> 01:49:22,300
I'm not a game designer.

2044
01:49:22,300 --> 01:49:24,700
So you know the amount of gameplay program we're going to do.

2045
01:49:24,700 --> 01:49:26,800
I don't know how much we really need to do.

2046
01:49:28,000 --> 01:49:29,500
I don't have that much to say there.

2047
01:49:29,500 --> 01:49:30,200
I'm just going to show how

2048
01:49:30,300 --> 01:49:33,200
Do like architectural stuff and how to program game code cleanly.

2049
01:49:33,200 --> 01:49:36,900
And, you know, try to get that points at those points across, but I'm

2050
01:49:36,900 --> 01:49:37,600
not a game designer.

2051
01:49:37,600 --> 01:49:40,600
So I don't have, I don't have to spend a lot of time, explaining game

2052
01:49:40,600 --> 01:49:42,100
design because I don't know it.

2053
01:49:42,100 --> 01:49:44,900
I'm not going, I don't have anything to say about game design.

2054
01:49:44,900 --> 01:49:47,500
If you want to learn game designer, you have to go talk to somebody

2055
01:49:47,500 --> 01:49:48,100
else, right?

2056
01:49:48,100 --> 01:49:51,100
I'm just talking about how to program the game, assuming that you have

2057
01:49:51,100 --> 01:49:55,500
a design that, you know, that you like and that you think you can

2058
01:49:55,500 --> 01:49:58,300
design again competently and, you know, so you gotta go listen to

2059
01:49:58,300 --> 01:50:00,200
John, Blow or somebody who knows how to design.

2060
01:50:00,300 --> 01:50:03,000
in a game, you know, if you want to design a game,

2061
01:50:05,000 --> 01:50:10,000
And so I think that's the important part to say there and so I yeah,

2062
01:50:10,000 --> 01:50:12,300
six hundred episodes maybe about, right.

2063
01:50:13,400 --> 01:50:16,500
It's only time will tell, you know, like I said, I have no way of

2064
01:50:16,500 --> 01:50:19,200
predicting it at all because it's a totally new experience for me.

2065
01:50:20,400 --> 01:50:21,700
It's not how I normally program.

2066
01:50:21,700 --> 01:50:24,300
I'm not usually talking the whole time, honestly, so I have nothing to

2067
01:50:24,300 --> 01:50:24,900
go by.

2068
01:50:26,600 --> 01:50:27,300
So yeah.

2069
01:50:29,000 --> 01:50:30,300
Do you find the weekends?

2070
01:50:30,300 --> 01:50:32,900
Go by faster with streaming on them and you have you do you have more

2071
01:50:32,900 --> 01:50:33,900
time for 935?

2072
01:50:34,500 --> 01:50:34,900
Yes.

2073
01:50:35,200 --> 01:50:37,300
I find that it was very good to move them to the weekends.

2074
01:50:37,300 --> 01:50:41,200
It's better for work on I-235 for sure and it keeps my schedule a

2075
01:50:41,200 --> 01:50:41,700
little cleaner.

2076
01:50:41,700 --> 01:50:43,300
So it's been it's been a big plus

2077
01:50:51,600 --> 01:50:52,500
Let's see an obvious.

2078
01:50:52,500 --> 01:50:55,200
What if I don't my game to be deterministic or what if my game does

2079
01:50:55,200 --> 01:50:56,200
physics calculations?

2080
01:50:56,400 --> 01:50:59,800
I need to update at a fixed rate for stability, different people, have

2081
01:50:59,800 --> 01:50:59,900
different

2082
01:51:00,000 --> 01:51:01,500
Monitors are different, refresh rates.

2083
01:51:01,500 --> 01:51:06,000
Most people seem to the to then interpolate, but this adds latency

2084
01:51:06,000 --> 01:51:06,800
isn't male boxing.

2085
01:51:06,800 --> 01:51:08,900
The better approach in this situation.

2086
01:51:09,600 --> 01:51:14,300
Well, again, like I was trying to say before I believe that I always

2087
01:51:14,300 --> 01:51:18,800
make concessions for fixed frame rate because I feel like it's very

2088
01:51:18,800 --> 01:51:22,300
important likewise saying everyone makes their own concessions.

2089
01:51:22,500 --> 01:51:26,200
So if we're what you want is a term in ISM, which I never care at all

2090
01:51:26,200 --> 01:51:26,600
about it.

2091
01:51:26,600 --> 01:51:29,400
All right, I've never cared about determinism.

2092
01:51:32,000 --> 01:51:35,800
Then if what you want is determinism, then you have to make other

2093
01:51:35,800 --> 01:51:37,000
concessions, right?

2094
01:51:37,000 --> 01:51:39,500
And you've got a whole bunch of work to do that, you might have to

2095
01:51:39,500 --> 01:51:43,000
make their what the best approach is for determinism.

2096
01:51:43,100 --> 01:51:45,400
I don't know that mailbox necessary the right approach because for

2097
01:51:45,400 --> 01:51:51,100
determinism male boxing is doesn't really give you anything on fixed

2098
01:51:51,100 --> 01:51:52,600
frame rate display is very much, right.

2099
01:51:52,600 --> 01:51:54,300
It's pretty hard to you.

2100
01:51:54,300 --> 01:51:55,800
Not really getting very much out of it.

2101
01:51:56,600 --> 01:51:59,800
All it's doing for you is kind of helping a little bit.

2102
01:52:00,000 --> 01:52:01,200
Once in a while, right?

2103
01:52:01,900 --> 01:52:06,500
It's more useful on displays with, with variable sink and and it

2104
01:52:06,600 --> 01:52:10,400
variable sink is not available in most Gamers machines.

2105
01:52:11,200 --> 01:52:12,900
So so I don't really know.

2106
01:52:13,000 --> 01:52:17,100
But all I can say about that is as a developer who determinism is not

2107
01:52:17,100 --> 01:52:18,600
a primary goal for me at all.

2108
01:52:19,800 --> 01:52:24,900
I don't tend to think about things that way I always just say fixed

2109
01:52:24,900 --> 01:52:27,300
frame rate is, is the the big thing?

2110
01:52:27,700 --> 01:52:29,800
So this can skip this, if you'd like explained it

2111
01:52:29,900 --> 01:52:30,400
Already.

2112
01:52:30,600 --> 01:52:32,700
Could you explain z-fighting and solving it as a problem?

2113
01:52:33,000 --> 01:52:33,800
Not yet.

2114
01:52:34,400 --> 01:52:38,900
I that's a very good question and it is something that we're going to

2115
01:52:38,900 --> 01:52:39,700
talk about.

2116
01:52:39,700 --> 01:52:42,600
But because I haven't gotten to the point where we're actually talking

2117
01:52:42,600 --> 01:52:47,000
about what stored in the z-buffer, it's a little premature because we

2118
01:52:47,000 --> 01:52:50,800
need to talk about what's in the Z buffer before we can talk about why

2119
01:52:50,800 --> 01:52:54,800
z-fighting even exists, but we will get there and it is important.

2120
01:52:54,900 --> 01:52:57,800
I don't know that we'll have too much problem with it on handmade hero

2121
01:52:57,800 --> 01:52:59,800
specifically because I don't know if we'll run into

2122
01:53:00,000 --> 01:53:01,000
Relations where it matters.

2123
01:53:01,500 --> 01:53:05,400
But we we might and depending on how we're doing, what certain

2124
01:53:05,400 --> 01:53:09,500
layering sorts of stuff and so we will definitely address that.

2125
01:53:09,700 --> 01:53:11,000
All right, I'm going to wrap it up now.

2126
01:53:11,000 --> 01:53:11,800
We're over time.

2127
01:53:13,300 --> 01:53:15,500
Thank you everyone for joining me for this episode of handmade hero.

2128
01:53:15,800 --> 01:53:16,900
It's been a pleasure coding with you.

2129
01:53:16,900 --> 01:53:20,700
As always, if you would like to follow along at home, you can always

2130
01:53:20,700 --> 01:53:22,700
pre-order the game on handmade hero dot org.

2131
01:53:22,700 --> 01:53:25,300
It comes with a source code so you can play around with the same sort

2132
01:53:25,300 --> 01:53:29,500
of stuff that we're playing around with on stream and learn from the

2133
01:53:29,500 --> 01:53:30,000
series.

2134
01:53:30,200 --> 01:53:32,000
We also have a forum site, you can go to.

2135
01:53:32,000 --> 01:53:35,100
If you want to ask questions a patreon page, you want to support the

2136
01:53:35,100 --> 01:53:38,600
video series a schedule, but you can use to figure out when we're

2137
01:53:38,600 --> 01:53:40,100
going to be live generally.

2138
01:53:40,100 --> 01:53:43,000
We're on weekends at 11 or 10 depending

2139
01:53:43,100 --> 01:53:47,300
On the the time and we also have an episode guide that you can use to

2140
01:53:47,300 --> 01:53:48,400
catch up on old episodes.

2141
01:53:48,400 --> 01:53:51,200
If you want to see how we've built all the stuff that already exists

2142
01:53:51,200 --> 01:53:52,700
in this area, seems just coming to it.

2143
01:53:52,900 --> 01:53:55,000
Now, that's it for today.

2144
01:53:55,000 --> 01:53:57,900
I'll be back here tomorrow to talk a little bit more about Z and we

2145
01:53:57,900 --> 01:53:58,300
might

2146
01:54:00,000 --> 01:54:04,500
Programming the depth depth, buffer version of the game tomorrow,

2147
01:54:04,500 --> 01:54:06,700
since I think we've covered most of stuff, we need to cover up set the

2148
01:54:06,700 --> 01:54:09,600
talk, a little about how we're going to do 3D transforms and stuff

2149
01:54:09,600 --> 01:54:09,800
like that.

2150
01:54:09,800 --> 01:54:11,300
So that may take a little time as well.

2151
01:54:11,400 --> 01:54:15,300
Depends on where we're at, we may go a different route and turn the

2152
01:54:15,300 --> 01:54:17,900
z-buffer on first and then go to the 3D transform part of it.

2153
01:54:18,300 --> 01:54:19,400
So, it depends on how you want to approach.

2154
01:54:19,400 --> 01:54:20,000
That can't tell.

2155
01:54:20,000 --> 01:54:22,400
Exactly, we'll find out tomorrow when we start to take a look at

2156
01:54:22,400 --> 01:54:24,300
what's the most sensible way to approach it.

2157
01:54:24,800 --> 01:54:26,100
So hope to see everyone back here.

2158
01:54:26,100 --> 01:54:28,100
Tomorrow tomorrow will be 10 a.m.

2159
01:54:28,100 --> 01:54:28,600
again.

2160
01:54:29,000 --> 01:54:29,900
So, same time, same.

2161
01:54:30,000 --> 01:54:34,600
A place until then have fun programming this weekend and I will see

2162
01:54:34,600 --> 01:54:35,600
y'all on the internet.

2163
01:54:35,600 --> 01:54:36,500
Take it easy everybody.

