1
00:00:04,300 --> 00:00:08,100
One of the things that we don't do on handmade hero and the reason we

2
00:00:08,100 --> 00:00:11,700
don't do it is because I don't know anything about it is compression,

3
00:00:11,700 --> 00:00:15,200
and compression is one of those things that is behind the scenes in

4
00:00:15,200 --> 00:00:17,300
basically every game that exists.

5
00:00:17,800 --> 00:00:20,300
In fact, it's behind the scenes and pretty much anything that exists.

6
00:00:20,300 --> 00:00:23,400
Because fundamentally speaking, you're always trying to get a little

7
00:00:23,400 --> 00:00:24,800
bit more out of a little bit less.

8
00:00:25,400 --> 00:00:28,600
And so any game that ships today has a ton of compression in the

9
00:00:28,600 --> 00:00:32,299
backend for you know, where you know, whatever the assets are stored

10
00:00:32,299 --> 00:00:33,700
in is typically has nothing to do.

11
00:00:33,900 --> 00:00:37,100
How they might appear raw when the artists created them.

12
00:00:38,000 --> 00:00:41,800
And so what I wanted to do with this first session is kind of invite

13
00:00:41,800 --> 00:00:44,700
people who are the absolute like experts and compression.

14
00:00:44,700 --> 00:00:48,500
The people that I asked when I'm like, I don't know what to do with

15
00:00:48,500 --> 00:00:50,000
this or how this sort of thing works.

16
00:00:50,000 --> 00:00:50,900
Please explain it to me.

17
00:00:51,400 --> 00:00:55,100
So I asked the folks at Red game tools to come and and give us like

18
00:00:55,100 --> 00:00:57,000
sort of how they think about compression.

19
00:00:57,100 --> 00:00:59,500
If you're someone who's interested in sort of learning more about

20
00:00:59,500 --> 00:01:01,200
compression, how do you frame it?

21
00:01:01,400 --> 00:01:02,600
How do you think about it?

22
00:01:02,700 --> 00:01:03,300
And so,

23
00:01:03,800 --> 00:01:08,100
Today it's it's a real pleasure for me to have Jeff Roberts and Fabian

24
00:01:08,100 --> 00:01:10,300
giessen with me from Brad game tools.

25
00:01:14,800 --> 00:01:17,500
I'm gonna sort of prompt them but I'm going to let them talk as much

26
00:01:17,500 --> 00:01:21,000
as possible because because I'm a compression noob if ever there was

27
00:01:21,000 --> 00:01:21,300
one.

28
00:01:22,500 --> 00:01:25,800
So first of all before we get started, could you guys maybe give me a

29
00:01:25,800 --> 00:01:28,800
little bit background Jeff you you know you started red games was a

30
00:01:28,800 --> 00:01:29,500
long time ago.

31
00:01:29,500 --> 00:01:30,800
How did you get into compression?

32
00:01:30,800 --> 00:01:36,200
What what brought you to this as a you know, a technology Focus, I

33
00:01:36,200 --> 00:01:36,800
guess.

34
00:01:37,300 --> 00:01:41,100
Yeah, Red's been doing this for nearly 30 years and we started the

35
00:01:41,100 --> 00:01:42,200
first thing I ever wrote

36
00:01:42,300 --> 00:01:46,200
It was a an exe compressor which I believe is one of the first

37
00:01:46,200 --> 00:01:48,200
compression things you will.

38
00:01:48,200 --> 00:01:50,800
You didn't you work on crunchy too but you worked on it out.

39
00:01:50,800 --> 00:01:51,500
See compressive.

40
00:01:51,500 --> 00:01:53,300
That was after I do a lot of compression to.

41
00:01:53,400 --> 00:01:53,500
Yeah.

42
00:01:53,500 --> 00:01:58,200
The first thing rat ever sold was a something called pack.

43
00:01:58,200 --> 00:02:01,600
Exe is just compressed and EXC, as you ran it at decoded into memory

44
00:02:01,600 --> 00:02:02,000
and ran.

45
00:02:02,000 --> 00:02:05,600
So this is for executables, like on floppy disks for.

46
00:02:05,600 --> 00:02:07,400
Yeah, it's not really exactly.

47
00:02:07,400 --> 00:02:12,200
So they and like, upx is what people use nowadays, but it

48
00:02:12,300 --> 00:02:17,400
Just a, you know, when you run a run an executable, there's a tiny

49
00:02:17,400 --> 00:02:19,000
little you can set it up.

50
00:02:19,000 --> 00:02:23,500
So a tiny little program runs that expands the big program in memory,

51
00:02:23,500 --> 00:02:26,400
and then you jump into it and it's as if you ran the original program,

52
00:02:26,400 --> 00:02:28,200
but it's just decoding on the Fly.

53
00:02:29,000 --> 00:02:30,400
You sort of have this tube.

54
00:02:30,400 --> 00:02:33,400
It's almost like a bootloader, yes, where you have a tiny program

55
00:02:33,400 --> 00:02:36,500
that's designed to do nothing but decompress the real program, right?

56
00:02:36,500 --> 00:02:36,800
Right.

57
00:02:36,800 --> 00:02:39,100
And so the constraints, there are kind of interesting in the sense

58
00:02:39,100 --> 00:02:42,100
that you can't be a big program because

59
00:02:42,300 --> 00:02:46,200
it's not a program that is installed on the computer all the time.

60
00:02:46,200 --> 00:02:47,900
It's part of the executable itself.

61
00:02:47,900 --> 00:02:53,600
So it's a reasonably pure form of compression in the sense that it's

62
00:02:53,600 --> 00:02:55,000
all packed into one thing.

63
00:02:55,000 --> 00:02:57,600
You know, there's the joke of like, you know, anybody can make a

64
00:02:57,600 --> 00:02:59,900
compressor if you know the data that you're compressing

65
00:03:00,000 --> 00:03:02,400
Because you just put the data that you're pressing in the thing and

66
00:03:02,400 --> 00:03:03,600
you're like, hey, it's magic.

67
00:03:03,600 --> 00:03:04,500
It was one bite.

68
00:03:05,900 --> 00:03:07,200
Do you even need the one bite?

69
00:03:07,500 --> 00:03:11,700
Well, to say, whether it was that one, or if you only need to compress

70
00:03:11,700 --> 00:03:16,400
that one file, you don't need even that one, but if you ever want to

71
00:03:16,400 --> 00:03:20,800
be able to, at least like four appearances, take a second file, and

72
00:03:20,800 --> 00:03:23,700
not compress it, you need to have at least a bit saying, whether this

73
00:03:23,700 --> 00:03:27,200
is the compressed power, not an excellent executable compressor.

74
00:03:27,200 --> 00:03:29,800
Yes, this is, yeah, I mean, that is kind of the joke.

75
00:03:30,000 --> 00:03:36,900
Of of there are certainly part of compression attracts kind of the

76
00:03:36,900 --> 00:03:39,400
Zero Point, Energy loonies.

77
00:03:39,400 --> 00:03:45,300
And there's really, oh, yeah, there's a big crossover in like I'm

78
00:03:45,300 --> 00:03:46,200
sorry, Zero Point Energy.

79
00:03:46,200 --> 00:03:48,200
I think, the only thing that I know this from is from watching movie.

80
00:03:48,200 --> 00:03:52,300
The Incredibles is that he has like a little thing that he moved to

81
00:03:52,300 --> 00:03:52,800
the right.

82
00:03:52,800 --> 00:03:54,100
It's the right term, right?

83
00:03:54,100 --> 00:03:57,100
It's for the people who imagine there's Just Energy floating around.

84
00:03:57,100 --> 00:03:59,800
I think about I think a better analogy is

85
00:04:00,100 --> 00:04:01,500
Because it's pretty much the same people.

86
00:04:01,600 --> 00:04:03,100
It's just perpetual motion machines.

87
00:04:03,100 --> 00:04:05,300
Yeah, people are really into, that was all that stuff.

88
00:04:05,300 --> 00:04:08,800
So they just want to or they feel like they could get like infinite

89
00:04:08,800 --> 00:04:10,000
compression or something like this, right.

90
00:04:10,000 --> 00:04:10,300
Okay.

91
00:04:10,500 --> 00:04:12,100
And then cursive compression, isn't it?

92
00:04:12,100 --> 00:04:15,400
Something that they use as a way to make it sound like like oh you run

93
00:04:15,400 --> 00:04:17,100
it and then you run it again and it's okay.

94
00:04:17,100 --> 00:04:20,500
And by the way this doesn't work is also for the exact same reason.

95
00:04:20,600 --> 00:04:23,200
This is about fundamentally about thermodynamics, okay.

96
00:04:23,500 --> 00:04:29,400
Like it really pretty much is I mean like the way you normally do it

97
00:04:29,400 --> 00:04:29,800
as meth.

98
00:04:29,900 --> 00:04:30,400
Matically.

99
00:04:30,400 --> 00:04:32,600
You just you can just do it by counting.

100
00:04:33,000 --> 00:04:33,400
Okay.

101
00:04:33,500 --> 00:04:37,100
Like say oh if you say I can compress any file.

102
00:04:37,200 --> 00:04:37,500
Yes.

103
00:04:37,500 --> 00:04:41,900
Like, there's just like the size of the number of files of say,

104
00:04:41,900 --> 00:04:42,800
length, up to 100.

105
00:04:42,800 --> 00:04:44,800
Bytes is limited, but he can count them all.

106
00:04:44,900 --> 00:04:46,100
Yeah, you can enumerate them.

107
00:04:46,500 --> 00:04:49,600
And if you can't say, I can compress all of them.

108
00:04:50,000 --> 00:04:52,300
What you're really saying is like, I can take that set that has a

109
00:04:52,300 --> 00:04:56,700
certain size map that to a smaller set because they're all smaller.

110
00:04:56,800 --> 00:04:57,100
Right?

111
00:04:57,200 --> 00:04:59,800
Like somehow not lose anything and it just

112
00:05:00,000 --> 00:05:00,700
Be invertible.

113
00:05:00,800 --> 00:05:03,000
Like that's the entirety of the argument, okay?

114
00:05:03,000 --> 00:05:04,800
Which like there's some thought there.

115
00:05:04,800 --> 00:05:08,000
But this is not fancy mathematics and the kind of people you are

116
00:05:08,000 --> 00:05:10,700
giving within that Community will not accept that argument, right?

117
00:05:10,700 --> 00:05:11,200
Okay.

118
00:05:11,700 --> 00:05:12,900
Better have this program that does.

119
00:05:12,900 --> 00:05:13,200
This, is that?

120
00:05:13,200 --> 00:05:13,600
Yes.

121
00:05:13,600 --> 00:05:16,800
And I can prove without even looking at the program that it can

122
00:05:16,800 --> 00:05:17,800
possibly work.

123
00:05:17,800 --> 00:05:20,900
So this is, this is kind of interesting because it's like I did not

124
00:05:20,900 --> 00:05:23,100
realize that this sort of a thing was a discussion that happened.

125
00:05:23,100 --> 00:05:25,000
I imagine that because compressor happened.

126
00:05:25,000 --> 00:05:26,600
It still happens even today, okay?

127
00:05:26,900 --> 00:05:27,900
There's no way.

128
00:05:28,100 --> 00:05:29,800
The only point of all that was that

129
00:05:29,900 --> 00:05:34,100
At eat the way that you kind of prevent that data leakage because like

130
00:05:34,200 --> 00:05:39,100
you can imagine here a program that compressed a file by taking the

131
00:05:39,100 --> 00:05:41,800
first bite of the file and sticking it on the end of the file name.

132
00:05:41,900 --> 00:05:42,100
Right.

133
00:05:42,100 --> 00:05:42,300
Right.

134
00:05:42,300 --> 00:05:42,600
Right.

135
00:05:42,600 --> 00:05:43,000
The final.

136
00:05:43,000 --> 00:05:43,100
Yeah.

137
00:05:43,100 --> 00:05:45,400
He has a lot of 0 B.

138
00:05:45,400 --> 00:05:51,300
The files tiny but so part of like measuring a compressor to make sure

139
00:05:51,300 --> 00:05:55,200
you're not cheating, is you add in the size of the file that I mean

140
00:05:55,200 --> 00:05:57,600
the the executable itself, not the file name.

141
00:05:57,600 --> 00:05:59,500
Look like the whole thing matters.

142
00:05:59,500 --> 00:05:59,800
Not

143
00:06:00,000 --> 00:06:03,400
Exe compression was nice in that sense of like, it's all part of one.

144
00:06:03,400 --> 00:06:05,500
I series chance for basically, when you said it's a pure form cousin,

145
00:06:05,500 --> 00:06:06,100
kind of what you mean.

146
00:06:06,100 --> 00:06:09,400
Is, there's no hand-waving here because anything that you added, that

147
00:06:09,400 --> 00:06:12,800
was a cheat in the executable is counted in the size automatically

148
00:06:12,800 --> 00:06:15,200
since that executable is the thing, your shipping, right?

149
00:06:15,200 --> 00:06:18,500
Whereas, I suppose if it was an image or something, you could just

150
00:06:18,500 --> 00:06:20,600
make the compressor, bigger and bigger and bigger.

151
00:06:20,600 --> 00:06:23,000
And there's, you know, there's all kinds of tricks you can pull.

152
00:06:23,000 --> 00:06:26,700
So, like, if you do this, theoretically, it looks in theory like

153
00:06:26,700 --> 00:06:29,400
there's this whole notion of a channel, okay?

154
00:06:29,400 --> 00:06:29,800
Just

155
00:06:30,000 --> 00:06:32,400
Medium, you're communicating over like, might be a Folly of writing

156
00:06:32,400 --> 00:06:33,300
stuff into, okay.

157
00:06:33,300 --> 00:06:36,700
And if you're doing compression, obviously, you have to worry about

158
00:06:37,000 --> 00:06:39,100
what exactly constitutes your channel.

159
00:06:39,200 --> 00:06:40,300
It's otherwise, it can treat.

160
00:06:40,400 --> 00:06:44,500
Like, if you say so, for example, like if you're a Windows on, NTFS

161
00:06:44,500 --> 00:06:47,800
files can have multiple streams and like, if you do a directory

162
00:06:47,800 --> 00:06:50,200
listing it'll show you the size of the first stream I.

163
00:06:50,200 --> 00:06:54,100
So one way to do a compressor is to just take the data from the first

164
00:06:54,100 --> 00:06:57,900
stream, move it over to the second stream and like now like if you do

165
00:06:57,900 --> 00:06:59,500
a directory listing it doesn't show up

166
00:07:00,800 --> 00:07:03,700
The data is for your life but like, this kind of stuff happens.

167
00:07:03,700 --> 00:07:05,000
Inadvertently all the time.

168
00:07:05,300 --> 00:07:06,500
Like you can do a compression.

169
00:07:06,500 --> 00:07:10,300
If you have a medium that gives you extra capacity that counts as part

170
00:07:10,300 --> 00:07:11,300
of the channel elsewhere.

171
00:07:11,500 --> 00:07:16,000
So for example, if you're saying, UDP packets over the network, these

172
00:07:16,300 --> 00:07:19,800
have the actual data, bytes you sending, but the length of the packet

173
00:07:19,800 --> 00:07:21,200
is part of the thing, right?

174
00:07:21,200 --> 00:07:22,700
And you get that length back.

175
00:07:22,800 --> 00:07:23,900
That's useful data.

176
00:07:23,900 --> 00:07:24,200
Yeah.

177
00:07:24,200 --> 00:07:28,300
So like one thing you can do, if you're sending, that's an actual

178
00:07:28,300 --> 00:07:29,800
thing that people do in that.

179
00:07:29,900 --> 00:07:30,700
It totally makes sense.

180
00:07:30,700 --> 00:07:33,600
If you're doing say compression compression for your game and you're

181
00:07:33,600 --> 00:07:37,800
sending regular packets, you can try to arrange things, so that last

182
00:07:37,800 --> 00:07:40,300
number of bytes of the packet are usually zeros.

183
00:07:41,300 --> 00:07:44,900
And then you just say implicitly, like if the decompressor keeps

184
00:07:44,900 --> 00:07:47,300
reading after the pack is over, you just feed it zeros.

185
00:07:47,500 --> 00:07:48,000
I see.

186
00:07:48,100 --> 00:07:51,700
So then you can because the size is part of the thing that gets sent

187
00:07:51,700 --> 00:07:54,400
over the network, you can get some data for free, right?

188
00:07:54,400 --> 00:07:56,800
Which you would not really be able to use that size for anything else.

189
00:07:56,800 --> 00:07:59,100
So you're sort of just pushing a little bit of extra information in

190
00:07:59,100 --> 00:07:59,800
there, which is

191
00:08:00,000 --> 00:08:02,100
Is exact, and it's not like, it's huge.

192
00:08:02,100 --> 00:08:06,400
You get a couple bits from there, but like you have to be careful to

193
00:08:06,400 --> 00:08:10,400
honestly Define what your channel is and like these things like file

194
00:08:10,400 --> 00:08:11,300
size or file name.

195
00:08:11,300 --> 00:08:15,200
And so on this extra metadata access permissions, extra streams.

196
00:08:15,500 --> 00:08:20,000
You can put, you can hide data there if you want to, okay, he just got

197
00:08:20,000 --> 00:08:20,600
to be careful.

198
00:08:20,600 --> 00:08:23,200
If somebody tells you, you have the magic machine that makes these

199
00:08:23,200 --> 00:08:24,200
files smaller.

200
00:08:24,500 --> 00:08:26,600
You have to be really careful with it doing.

201
00:08:26,600 --> 00:08:26,800
Yeah?

202
00:08:26,800 --> 00:08:27,400
Okay.

203
00:08:27,600 --> 00:08:29,800
I'm very interested that that came up so quickly.

204
00:08:29,900 --> 00:08:33,700
But if it was like it was kind of like the first thing I want to

205
00:08:33,700 --> 00:08:36,700
discuss with anybody about data compression, this thing comes up

206
00:08:36,700 --> 00:08:37,400
immediately.

207
00:08:37,700 --> 00:08:40,799
You will find somebody who has the same with physics.

208
00:08:40,799 --> 00:08:45,000
Like there's people with their perpetual motion plans and like they

209
00:08:45,000 --> 00:08:46,600
want to talk to you about it someday.

210
00:08:46,600 --> 00:08:47,600
It's going to work, man.

211
00:08:47,600 --> 00:08:50,400
It's just going to keep going and going like the Energizer Bunny.

212
00:08:50,500 --> 00:08:52,600
Yeah, so okay.

213
00:08:52,700 --> 00:08:55,800
Just to get just a little bit more background so that was all great

214
00:08:55,800 --> 00:08:57,300
but I just want soap so you don't know.

215
00:08:57,600 --> 00:08:59,800
So you wrote an exit compressor as the food.

216
00:09:00,000 --> 00:09:06,600
The first thing that we ever in and we were kind of a hardware and

217
00:09:06,600 --> 00:09:10,100
software company then and so that was the first piece of software we

218
00:09:10,100 --> 00:09:12,100
ever sold and resold it to another company.

219
00:09:12,100 --> 00:09:12,700
Who okay?

220
00:09:13,600 --> 00:09:15,100
Can't remember who what they were.

221
00:09:15,100 --> 00:09:18,200
But anyway yeah that's so I started on an early.

222
00:09:18,200 --> 00:09:23,900
I find compression is a specially data compression as opposed to image

223
00:09:23,900 --> 00:09:28,500
and the other stuff is a fairly it's less this way now and we can talk

224
00:09:28,500 --> 00:09:29,800
about that pure.

225
00:09:30,000 --> 00:09:33,300
Her in the sense that you run it and you get a smaller file or you

226
00:09:33,300 --> 00:09:34,000
don't.

227
00:09:35,200 --> 00:09:37,500
And so that was always appealing to me.

228
00:09:37,500 --> 00:09:40,000
It's a fun thing to like it is a thing.

229
00:09:40,000 --> 00:09:43,200
You can get sucked into in this is even when I was talking to check or

230
00:09:43,200 --> 00:09:45,400
wedded compression to his Gamers assembly of a Checkers.

231
00:09:45,400 --> 00:09:45,900
Chris Tucker.

232
00:09:45,900 --> 00:09:50,500
Yeah who like can get sucked into these things of it's just a fun

233
00:09:50,500 --> 00:09:53,800
iterative process and so certainly and I guess you have kind of a

234
00:09:53,800 --> 00:09:57,900
clean number that's like is my program getting better or worse as

235
00:09:57,900 --> 00:09:59,800
opposed to like architecture stuff for you.

236
00:10:00,100 --> 00:10:01,300
Did it get better or worse?

237
00:10:01,300 --> 00:10:01,600
I don't know.

238
00:10:01,600 --> 00:10:05,500
And then, and now recently, that's not recently, but this is always

239
00:10:05,500 --> 00:10:10,800
been true, but it's never been true more than now, is there, is this

240
00:10:10,900 --> 00:10:15,600
extra axi or axis that that exists?

241
00:10:15,600 --> 00:10:19,200
Which is what is, what is the speed trade-off?

242
00:10:19,200 --> 00:10:23,000
You're willing to do for the amount of Corrections, which I guess rad

243
00:10:23,000 --> 00:10:26,800
is, which is where we can live with because of kind of lives a matrix.

244
00:10:26,800 --> 00:10:28,000
Yeah, so anyway, that's okay.

245
00:10:28,000 --> 00:10:29,800
That's so we've done a lot.

246
00:10:29,900 --> 00:10:32,600
Lat Redstone a lot of stuff over the years, but it's, we've always

247
00:10:32,600 --> 00:10:37,600
kind of and a lot of our guys even that our game kind of programmers

248
00:10:37,600 --> 00:10:41,200
have a background in starting compression because I feel like that's a

249
00:10:41,200 --> 00:10:43,600
good place to be and fobbing.

250
00:10:43,600 --> 00:10:45,300
You presumably.

251
00:10:45,500 --> 00:10:48,800
Well, I kind of know you did because I know you but like you did not

252
00:10:48,800 --> 00:10:51,000
start doing compression when you came to rad.

253
00:10:51,000 --> 00:10:53,000
So how did you first?

254
00:10:53,100 --> 00:10:55,500
You know, how did that come about, is something you were interested

255
00:10:55,500 --> 00:10:55,800
in?

256
00:10:56,800 --> 00:10:58,800
I can't hustle issei.

257
00:10:58,800 --> 00:10:59,300
I don't know.

258
00:11:00,100 --> 00:11:03,600
Is this like, weird soon as I knew on video compression, right?

259
00:11:03,600 --> 00:11:07,100
Like, wasn't your dissertation but my diploma thesis was on video

260
00:11:07,100 --> 00:11:07,600
compression stuff.

261
00:11:07,600 --> 00:11:12,600
That was way after when I first started like basically, as soon as I

262
00:11:12,600 --> 00:11:15,800
learned that there was such a thing as data compression, okay?

263
00:11:16,000 --> 00:11:16,400
Like that.

264
00:11:16,400 --> 00:11:20,600
It was a theory to it, and not just like there was you had stuff like,

265
00:11:20,600 --> 00:11:23,100
pkzip that you just knew how to use, right?

266
00:11:23,200 --> 00:11:28,000
And that always seemed a bit magic and then you get at some point.

267
00:11:28,000 --> 00:11:29,800
I got some algorithms book on something that

268
00:11:29,900 --> 00:11:30,100
Planes.

269
00:11:30,100 --> 00:11:31,000
I think Huffman coding.

270
00:11:31,300 --> 00:11:35,200
Okay which is one of the classic algorithms from the 50s to do this

271
00:11:35,200 --> 00:11:35,800
kind of thing.

272
00:11:35,800 --> 00:11:40,000
That's still practically irrelevant and once you learn about that

273
00:11:40,000 --> 00:11:42,300
stuff is like oh that's interesting I'd like to know more.

274
00:11:42,400 --> 00:11:43,500
Then you start getting into it.

275
00:11:45,200 --> 00:11:48,400
Let's start with some compression stuff here, for people, such as

276
00:11:48,400 --> 00:11:50,600
myself who don't really know what's going on.

277
00:11:50,900 --> 00:11:54,000
Jeff sent me some things that he was thinking about in terms of

278
00:11:54,000 --> 00:11:55,700
topics, it looks like.

279
00:11:55,900 --> 00:11:57,100
Bobby has got some too.

280
00:11:57,500 --> 00:11:59,900
I just want to start with one question of mine.

281
00:12:00,100 --> 00:12:02,900
And then we can go with mostly stuff of yours because you guys know

282
00:12:02,900 --> 00:12:04,800
more about how it should probably be laid out.

283
00:12:05,600 --> 00:12:10,700
My fundamental question is just like okay as someone who sort of knows

284
00:12:10,700 --> 00:12:14,400
the buzzword version of compression, like, you know, okay, that's, you

285
00:12:14,400 --> 00:12:17,800
know, LZ compressor something this but really has a very shallow

286
00:12:17,800 --> 00:12:20,000
understanding of it, which is where I'm coming from.

287
00:12:21,200 --> 00:12:26,100
Could you, perhaps give a sort of quick, I don't know, like, guide to

288
00:12:26,100 --> 00:12:29,900
just, what is the way to think about, like the

289
00:12:30,000 --> 00:12:33,200
In family, if you will, because there's lossy and lossless, there's

290
00:12:33,200 --> 00:12:34,400
backend entropy.

291
00:12:34,400 --> 00:12:35,300
There's dictionary.

292
00:12:35,300 --> 00:12:36,000
There's all these things.

293
00:12:36,000 --> 00:12:39,900
And I feel like to start with, sort of a little bit of a taxonomy that

294
00:12:39,900 --> 00:12:43,500
as we go through this discussion, people can sort of understand and,

295
00:12:43,500 --> 00:12:48,900
and like file into a good taxonomy of where these things are fitting

296
00:12:48,900 --> 00:12:52,100
into that process and where those lines are and how they blur.

297
00:12:52,100 --> 00:12:55,200
And so I just feel like that would be great because I maybe have this

298
00:12:55,200 --> 00:12:57,600
one in my head that's probably not real great.

299
00:12:57,600 --> 00:12:59,800
And if you know you could kind of give us one that was better.

300
00:13:00,500 --> 00:13:01,300
That would be awesome.

301
00:13:01,500 --> 00:13:07,200
Yeah, I can talk about maybe start and then so the way I think is a

302
00:13:08,400 --> 00:13:10,800
David Stafford who was a long time compression guy.

303
00:13:10,800 --> 00:13:13,700
And in fact, I think you'll be talking about him tomorrow at the

304
00:13:13,700 --> 00:13:17,500
little bit at the software, rendering stuff, since he was a surly game

305
00:13:17,500 --> 00:13:19,900
guy, just a smart guy been around for a long time.

306
00:13:20,500 --> 00:13:21,500
Used to have this thing.

307
00:13:22,200 --> 00:13:25,100
He'd ask people who worked in compression of what they felt

308
00:13:25,100 --> 00:13:29,700
compression was and you know you might guess.

309
00:13:29,900 --> 00:13:32,500
Whatever, you know, make this little guess and he kind of used it as a

310
00:13:32,500 --> 00:13:35,500
game, to start a conversation and his answer, you say, What

311
00:13:35,500 --> 00:13:36,700
compression was?

312
00:13:36,700 --> 00:13:39,200
Yeah, it should more of a general thing of just like, what do you

313
00:13:39,200 --> 00:13:40,500
think it had?

314
00:13:40,500 --> 00:13:42,100
It means like what's it about?

315
00:13:42,100 --> 00:13:42,300
Yeah.

316
00:13:42,300 --> 00:13:43,000
What's it about?

317
00:13:43,000 --> 00:13:47,100
And and his answer was always prediction like the better of a

318
00:13:47,100 --> 00:13:47,600
predictor.

319
00:13:47,600 --> 00:13:48,700
You are the better compression.

320
00:13:48,700 --> 00:13:51,500
You'll get like just in a very hand wavy way.

321
00:13:51,500 --> 00:13:54,900
And when you say predictor he's basically meaning how well your

322
00:13:54,900 --> 00:13:56,000
compressor guesses.

323
00:13:56,000 --> 00:13:56,500
What will come to?

324
00:13:56,500 --> 00:13:56,900
Yeah.

325
00:13:56,900 --> 00:13:59,800
So so so there's this

326
00:14:01,300 --> 00:14:04,500
So that's kind of what I was going to get to in the in how I think

327
00:14:04,500 --> 00:14:07,100
about compression is there's kind of two halves of it.

328
00:14:07,200 --> 00:14:12,500
There's like the first part is called modeling and that is usually the

329
00:14:12,500 --> 00:14:16,000
prediction part of like your best, guess of what's going to happen in

330
00:14:16,000 --> 00:14:19,300
a data stream or in a video stream or an audio stream or anything, you

331
00:14:19,300 --> 00:14:22,500
make a guess and then you're wrong because you're always a little

332
00:14:22,500 --> 00:14:25,600
wrong, your prediction is a perfect, otherwise we would need it, you

333
00:14:25,600 --> 00:14:29,500
know, it would be much easier problem or in the case of Fabian

334
00:14:29,900 --> 00:14:33,500
Sir that has the one bit that says this is the other stream, right?

335
00:14:33,600 --> 00:14:33,900
Orange.

336
00:14:35,500 --> 00:14:40,600
So so I sort of think about is the modeling part and then there's the

337
00:14:40,600 --> 00:14:44,000
part, the statistical end the part where you have to clean up the

338
00:14:44,200 --> 00:14:45,800
errors, the residuals.

339
00:14:46,000 --> 00:14:46,400
Okay.

340
00:14:46,400 --> 00:14:49,400
So and I think that's where the more interesting problem is because

341
00:14:49,400 --> 00:14:51,900
you're never going to have perfect prediction and the difference

342
00:14:51,900 --> 00:14:53,600
between /, really good prediction.

343
00:14:53,900 --> 00:14:59,200
And okay, prediction is, you get a lot of the way with a not great

344
00:14:59,200 --> 00:14:59,600
thing.

345
00:14:59,600 --> 00:14:59,800
So,

346
00:15:00,000 --> 00:15:03,300
I sort of think of it as those two levels and certainly like anything

347
00:15:03,300 --> 00:15:06,900
else, when you do it for a long time, the big winds come from

348
00:15:06,900 --> 00:15:07,400
blurring.

349
00:15:07,400 --> 00:15:12,000
Those edges of like you start out when you write these things as

350
00:15:12,000 --> 00:15:12,700
you're going to write.

351
00:15:12,700 --> 00:15:14,000
Oh, here's our this.

352
00:15:14,000 --> 00:15:17,900
And here's our back end and then over time they blur together and you

353
00:15:17,900 --> 00:15:21,100
try to make a model, or that gives you things that the residual

354
00:15:21,100 --> 00:15:23,000
compressor can do better on and that kind of thing.

355
00:15:23,200 --> 00:15:27,000
So, here's a like, I guess, if I'm, if I'm going to try to try to

356
00:15:27,000 --> 00:15:27,600
break that down.

357
00:15:27,800 --> 00:15:29,800
So here's what I sort of

358
00:15:30,400 --> 00:15:31,300
Got out of that.

359
00:15:31,300 --> 00:15:36,900
In terms of the thought process, you tend to think of it as when I'm

360
00:15:36,900 --> 00:15:42,700
looking at a compressor, I'm thinking about how I'm modeling what, I

361
00:15:42,700 --> 00:15:46,700
expect this compressor to see in a very efficient likely to be

362
00:15:46,700 --> 00:15:51,700
correct, most of the time way and how I handled the difference between

363
00:15:51,700 --> 00:15:56,100
its guests and the actual data that I was fed and your kind of mapping

364
00:15:56,100 --> 00:15:59,800
the parts of the compressor into a spectrum somewhere on this end.

365
00:16:00,000 --> 00:16:03,800
Presumably, different compressors have different pieces that fall into

366
00:16:03,800 --> 00:16:04,400
those parts.

367
00:16:04,400 --> 00:16:07,400
Some maybe have multiple pieces that chain together, some absolute

368
00:16:07,400 --> 00:16:10,000
things that are multiple levels, where you're predicting at one level

369
00:16:10,000 --> 00:16:14,800
like in a PNG you're predicting pixels and then you follow that up by

370
00:16:14,800 --> 00:16:19,100
a pass that doesn't LZ which was predicting B and then you follow that

371
00:16:19,100 --> 00:16:23,400
up with a statistical end but that's how I break it down in my head

372
00:16:26,400 --> 00:16:27,600
the two stages.

373
00:16:27,600 --> 00:16:29,800
But again like once you're past kind of

374
00:16:29,900 --> 00:16:30,600
Oi stuff.

375
00:16:30,600 --> 00:16:35,600
You start blurring those lines, all over the place and with lossy

376
00:16:35,600 --> 00:16:37,200
versus lossless compression.

377
00:16:37,200 --> 00:16:40,600
Like something like a jpeg versus a pink you.

378
00:16:40,800 --> 00:16:42,700
It sounds like and maybe this is not true.

379
00:16:42,700 --> 00:16:46,200
So correct me if this is Miss statement but sounds like you don't

380
00:16:46,200 --> 00:16:50,300
think of that as a big difference between these things you think of as

381
00:16:50,300 --> 00:16:53,400
more just like, well, I'm going to store all the data or I'm not or

382
00:16:53,400 --> 00:16:56,200
the residual part I'm going to store all of that or I'm not but I

383
00:16:56,200 --> 00:16:58,900
don't think of that as a real defining characteristic of the

384
00:16:58,900 --> 00:16:59,800
compressor or away.

385
00:17:00,000 --> 00:17:03,600
To think about these algorithms, that's more just like it, it's a

386
00:17:03,600 --> 00:17:07,400
critical part and it's how all these algorithms work, but it's not how

387
00:17:07,400 --> 00:17:10,200
I classified in my brain and it might be different for other people.

388
00:17:10,200 --> 00:17:11,000
Okay, awesome.

389
00:17:12,099 --> 00:17:12,500
Gaming.

390
00:17:12,500 --> 00:17:14,900
The whole also stuff is just

391
00:17:16,300 --> 00:17:17,599
They're different applications.

392
00:17:18,900 --> 00:17:22,300
Like if you if you're going to do backups you probably want a lots of

393
00:17:22,300 --> 00:17:22,900
compressor.

394
00:17:24,400 --> 00:17:28,700
I'm gonna have some thick-ass Transit you're backing up true.

395
00:17:30,300 --> 00:17:33,300
Like I mean, also, I can practice like something like 80% of your

396
00:17:33,300 --> 00:17:33,700
backups.

397
00:17:33,700 --> 00:17:34,500
You never gonna look again.

398
00:17:34,600 --> 00:17:34,900
Yeah.

399
00:17:35,000 --> 00:17:37,200
So if your compressor is really good at predicting the parts that they

400
00:17:37,200 --> 00:17:44,000
actually need backed up a good point that will work.

401
00:17:44,100 --> 00:17:46,000
I mean that's basically a name

402
00:17:46,100 --> 00:17:47,100
The game, yes.

403
00:17:50,500 --> 00:17:54,800
That big Watershed between lossless and lossy is not that they use

404
00:17:54,800 --> 00:17:59,800
completely different techniques, it's just that with loss.

405
00:18:00,000 --> 00:18:00,500
Compression.

406
00:18:01,600 --> 00:18:07,900
They, if you look at a basically, if you were to plot a curve, like

407
00:18:07,900 --> 00:18:12,100
how many bits have I sent versus how good is the reconstructed data?

408
00:18:12,100 --> 00:18:13,700
How close is it to the original?

409
00:18:13,700 --> 00:18:15,500
Okay, no losses.

410
00:18:15,500 --> 00:18:18,600
Compressor, you just keep sending bits October.

411
00:18:18,900 --> 00:18:20,000
That error is 0?

412
00:18:20,100 --> 00:18:22,700
Yes, because everything else is not acceptable, okay?

413
00:18:23,200 --> 00:18:24,000
A lossless compressed.

414
00:18:24,000 --> 00:18:26,700
So is one where you willing to stop early, okay?

415
00:18:26,700 --> 00:18:27,500
That's pretty much.

416
00:18:27,500 --> 00:18:29,700
And like, he tried to design the bit stream.

417
00:18:30,200 --> 00:18:36,800
So that at any step of the algorithm, your options are such that you

418
00:18:37,400 --> 00:18:40,800
have a good way to just send a few bits and get a lot of information.

419
00:18:40,800 --> 00:18:42,600
Like reduce the error by a lot, Okay?

420
00:18:43,000 --> 00:18:47,100
And like, if you look at applications, they in a game setting.

421
00:18:47,100 --> 00:18:49,800
Like, for example, for networking, you will usually do lossy

422
00:18:49,800 --> 00:18:52,400
compression like for example, like dead reckoning.

423
00:18:52,400 --> 00:18:56,500
And so, on like the stuff, you send a network packet will not give you

424
00:18:56,500 --> 00:18:57,700
the exact values back.

425
00:18:57,700 --> 00:18:59,900
It has limited resolution and so on because it doesn't

426
00:19:00,200 --> 00:19:00,600
That much.

427
00:19:00,600 --> 00:19:03,300
So you're talking about in a game, a multiplayer game running over the

428
00:19:03,300 --> 00:19:05,600
network and you're sending State packets across.

429
00:19:05,600 --> 00:19:06,000
Yep.

430
00:19:06,100 --> 00:19:10,000
Oftentimes you're saying you will even allow Los Lunas there because

431
00:19:10,000 --> 00:19:12,200
even though it's not an image or something like this, you just don't

432
00:19:12,200 --> 00:19:15,700
care enough about the Precision like this stuff, like whatever the

433
00:19:15,700 --> 00:19:19,400
position of the player will usually have like, whatever 32 it floats.

434
00:19:19,400 --> 00:19:19,900
Yeah.

435
00:19:20,100 --> 00:19:21,200
It's like for three axes.

436
00:19:21,200 --> 00:19:23,900
So every 96 bits of position and usually you will not send that whole

437
00:19:23,900 --> 00:19:24,300
thing.

438
00:19:24,300 --> 00:19:27,800
I see you'll send something that has lost as a form of like all right.

439
00:19:27,800 --> 00:19:29,800
That's yeah that's enforced compliance.

440
00:19:29,900 --> 00:19:34,600
Precious yeah no I mean they got you try to design the format so that

441
00:19:34,600 --> 00:19:37,500
if you lose a packet like that degrades gracefully which is another

442
00:19:37,500 --> 00:19:40,300
form of the modeling, like you have to sort of design that into the

443
00:19:40,300 --> 00:19:46,700
system very interesting and you basically try to distribute the that's

444
00:19:46,700 --> 00:19:48,300
actually for Network game.

445
00:19:48,300 --> 00:19:50,800
That's very much designed in the anything that's important.

446
00:19:50,800 --> 00:19:53,300
Think that's really important that's like State changes.

447
00:19:53,300 --> 00:19:55,800
If you're going over something like UDP which can drop packets.

448
00:19:55,800 --> 00:19:59,600
You just keep presenting that data at little the other.

449
00:20:00,000 --> 00:20:00,900
Sag knowledge that.

450
00:20:00,900 --> 00:20:01,900
Yeah, I've seen that.

451
00:20:02,300 --> 00:20:04,900
You might not resend it every packet, but you have to resent it,

452
00:20:04,900 --> 00:20:07,000
periodically to make sure that eventually they see it.

453
00:20:07,000 --> 00:20:14,400
Yes, that's like again, it's like you just have first up.

454
00:20:14,400 --> 00:20:15,500
There's this notion of error.

455
00:20:15,700 --> 00:20:15,900
Okay.

456
00:20:15,900 --> 00:20:20,400
Lossy compression of like how closest thing I've sent up until now to

457
00:20:20,400 --> 00:20:24,900
what I actually want to have in the end, you can also like

458
00:20:26,000 --> 00:20:29,700
From an application perspective like what does error mean and it's

459
00:20:29,700 --> 00:20:32,300
usually about like either something about the Fidelity of the thing

460
00:20:32,300 --> 00:20:34,900
you're standing or it's just about how important it is.

461
00:20:35,500 --> 00:20:38,300
And so I guess that you're just saying there's a definition of error

462
00:20:38,300 --> 00:20:41,600
which is not necessarily about reproducing the data stream in some

463
00:20:41,600 --> 00:20:42,300
absolute sense.

464
00:20:42,300 --> 00:20:46,800
It's more about like what what kind of differences we care about

465
00:20:46,800 --> 00:20:48,500
versus what kind of difference is, we don't.

466
00:20:48,500 --> 00:20:49,000
Exactly.

467
00:20:49,000 --> 00:20:52,700
I mean, like, in a network game, like if whatever the match is over,

468
00:20:52,800 --> 00:20:55,000
that's important information because that means you got to go back to

469
00:20:55,000 --> 00:20:55,600
the lobby and

470
00:20:55,700 --> 00:20:59,000
You got to keep presenting that because, like, having the other game,

471
00:20:59,000 --> 00:20:59,900
keep continue running.

472
00:21:00,000 --> 00:21:03,000
Game with when all of the players have left is a fairly significant

473
00:21:03,000 --> 00:21:03,300
error.

474
00:21:03,500 --> 00:21:05,700
Yes, they want to make sure not to make that mistake.

475
00:21:05,700 --> 00:21:06,100
Yes.

476
00:21:06,100 --> 00:21:08,700
Well, as other things you might not care like whatever.

477
00:21:08,700 --> 00:21:12,500
It's some might decide.

478
00:21:12,500 --> 00:21:15,100
Like if you have really high traffic, you're okay with dropping trap

479
00:21:15,100 --> 00:21:16,400
messages, for example.

480
00:21:16,600 --> 00:21:17,000
Okay.

481
00:21:17,000 --> 00:21:19,200
Or you might decide that you always want to use because they're

482
00:21:19,200 --> 00:21:19,800
important.

483
00:21:19,800 --> 00:21:23,300
Yes there's stuff like voice packets their stuff like okay whatever

484
00:21:23,300 --> 00:21:26,300
random packets that just tell you to play a sound effect if those get

485
00:21:26,300 --> 00:21:27,200
dropped, whatever.

486
00:21:27,300 --> 00:21:29,800
Not a big deal like would be nice but

487
00:21:30,000 --> 00:21:32,000
and so there's this hierarchy, so,

488
00:21:34,700 --> 00:21:37,700
The lossless world is all about general purpose compression, which

489
00:21:37,700 --> 00:21:39,400
somebody just provides a library.

490
00:21:39,500 --> 00:21:43,600
Like this is the thing that you just given an arbitrary file to, and

491
00:21:43,600 --> 00:21:48,500
then you expect to get that file back to, these are generally not

492
00:21:48,700 --> 00:21:49,200
tuned.

493
00:21:49,200 --> 00:21:52,400
I mean, certainly some lossless compressors are tuned to a particular

494
00:21:52,400 --> 00:21:54,400
datatype assume like text compressors.

495
00:21:54,500 --> 00:21:54,800
Yeah.

496
00:21:54,800 --> 00:21:55,200
Or something.

497
00:21:55,200 --> 00:21:59,100
Like yeah, but it's fairly General and like, because the error always

498
00:21:59,100 --> 00:22:00,900
has to go to zero in the end, right?

499
00:22:00,900 --> 00:22:03,400
They have to be differently.

500
00:22:03,900 --> 00:22:06,500
He gave the people give you back the same thing.

501
00:22:06,500 --> 00:22:10,400
You just might not get as much compression if you have a encoder.

502
00:22:10,400 --> 00:22:14,100
That takes some special liberties with.

503
00:22:14,100 --> 00:22:18,100
How binary data might be structured, other than text data banks of the

504
00:22:18,100 --> 00:22:19,000
Lost Sea World.

505
00:22:19,000 --> 00:22:20,800
It's a lot more application-specific.

506
00:22:21,200 --> 00:22:21,300
Yeah.

507
00:22:21,300 --> 00:22:24,500
So, before we get too far into that.

508
00:22:24,600 --> 00:22:28,500
Did you want to talk about how your mental model of compression as

509
00:22:28,500 --> 00:22:28,700
well?

510
00:22:28,700 --> 00:22:30,000
Because I didn't know if it differs.

511
00:22:30,000 --> 00:22:33,200
I mean, different, you know, perspectives or was Jeff's actually

512
00:22:33,200 --> 00:22:33,700
somewhat similar.

513
00:22:33,800 --> 00:22:36,600
To the way you think about it, it at a high level similar.

514
00:22:36,600 --> 00:22:39,100
I mean they to me it's a lot about just modeling.

515
00:22:39,500 --> 00:22:39,700
Okay.

516
00:22:39,800 --> 00:22:41,100
It's just basically

517
00:22:44,100 --> 00:22:46,500
It's sort of a scientific process more or less.

518
00:22:46,600 --> 00:22:52,400
Like you just tried to build this model of how data behaves okay and

519
00:22:52,400 --> 00:22:58,000
how close or how not close you are is very easy to measure and that

520
00:22:58,000 --> 00:23:02,500
that's the amount of bits you have to spend in one way or another to

521
00:23:02,500 --> 00:23:06,900
just get that prediction with that model which might be good or might

522
00:23:06,900 --> 00:23:09,100
be bad to actually match the real data.

523
00:23:12,000 --> 00:23:15,400
I think that's part of why it is so addictive to some people, okay?

524
00:23:15,400 --> 00:23:17,900
It's just that you have this very objective feedback.

525
00:23:18,000 --> 00:23:18,400
Yes.

526
00:23:18,700 --> 00:23:19,600
Like there's no.

527
00:23:19,600 --> 00:23:22,300
And you also have no absolute answer, like most of the time.

528
00:23:22,300 --> 00:23:23,800
You don't know what the smallest thing is.

529
00:23:23,800 --> 00:23:24,200
I assume.

530
00:23:24,200 --> 00:23:28,200
So there's always this sort of like, reaching for the The Chalice.

531
00:23:28,200 --> 00:23:28,800
Yeah, thing.

532
00:23:28,800 --> 00:23:31,100
Where you think you could maybe get a little bit better?

533
00:23:31,100 --> 00:23:36,600
Yeah, there's a funny thing of with compression, there's no, we don't

534
00:23:36,600 --> 00:23:40,400
even have like, oh, this is, this is entropically.

535
00:23:40,400 --> 00:23:41,500
The smallest this amount of

536
00:23:41,600 --> 00:23:42,100
Right ever.

537
00:23:42,100 --> 00:23:44,300
We don't have a way to even get into that.

538
00:23:44,400 --> 00:23:45,200
We can't even measure.

539
00:23:45,200 --> 00:23:49,700
Even smaller stages of like, in an LZ compressor, you have something

540
00:23:49,700 --> 00:23:52,100
called the parse, which is how you break it apart.

541
00:23:52,100 --> 00:23:53,700
Maybe we'll talk about that a second, okay?

542
00:23:53,700 --> 00:23:58,500
But it's how you jump through a file, we don't even know a way to find

543
00:23:58,500 --> 00:23:59,200
a perfect.

544
00:23:59,200 --> 00:23:59,800
Parse

545
00:24:00,000 --> 00:24:03,700
Given compressor like a good lock, some things down and hand wave we

546
00:24:03,700 --> 00:24:04,000
do.

547
00:24:04,100 --> 00:24:08,600
Well, it depends on, it depends on if your stuff is chain.

548
00:24:08,600 --> 00:24:14,600
If you're, if you're a dynamic system, like you have to like, at some

549
00:24:14,600 --> 00:24:19,300
point estimate that like, all right, I'm going to just call, this is

550
00:24:19,300 --> 00:24:19,800
closed.

551
00:24:19,900 --> 00:24:21,200
It's a practical problem.

552
00:24:21,200 --> 00:24:21,500
Yeah.

553
00:24:22,700 --> 00:24:26,800
Like, at some point you just don't want to spend like, five weeks,

554
00:24:26,800 --> 00:24:28,000
compressing, a 4 kilobyte file.

555
00:24:28,000 --> 00:24:28,300
Right.

556
00:24:28,300 --> 00:24:28,500
Right.

557
00:24:28,500 --> 00:24:29,800
But it's not like, it's not

558
00:24:30,100 --> 00:24:31,700
like you can get close it.

559
00:24:31,700 --> 00:24:32,600
I'm not going to say no.

560
00:24:32,600 --> 00:24:35,700
But some of the stuff you say, like, what's the minimum size for this

561
00:24:35,700 --> 00:24:35,900
file?

562
00:24:35,900 --> 00:24:39,100
Like that's actually mathematically undecidable like that's like

563
00:24:39,100 --> 00:24:42,600
holding problem level bad and you also sort of a suggesting that it

564
00:24:42,600 --> 00:24:43,200
depends.

565
00:24:43,300 --> 00:24:46,200
I mean you're talking about a thing that compresses a certain Corpus

566
00:24:46,200 --> 00:24:48,600
of data as well because like you said, if you're just compressing

567
00:24:48,800 --> 00:24:52,100
purely General data, the answer is you can't compress it.

568
00:24:52,100 --> 00:24:55,300
Like you said you had overall little overall out to the exact same.

569
00:24:55,300 --> 00:24:58,600
But so it's saying how small can this get is like, well what you mean

570
00:24:58,600 --> 00:24:59,900
is how small can this

571
00:25:00,000 --> 00:25:03,300
Of things get on average, we're within this system within this system.

572
00:25:03,300 --> 00:25:07,600
I mean the thing is the stuff that Jeff was talking about were like we

573
00:25:07,600 --> 00:25:09,000
don't know what the optimal LZ.

574
00:25:09,000 --> 00:25:09,400
Parcel.

575
00:25:09,400 --> 00:25:12,000
Something that's not actually true that we can't determine that.

576
00:25:12,000 --> 00:25:15,200
That's just that's literally just a shortest path surgeon.

577
00:25:15,200 --> 00:25:20,000
A graph happens to be a really large graph and very diminishing

578
00:25:20,000 --> 00:25:21,000
returns, okay?

579
00:25:21,000 --> 00:25:24,700
But it's not like that's an that's a completely solvable problem.

580
00:25:24,900 --> 00:25:28,300
That is economically useless to solve because I said, nobody wants to

581
00:25:28,300 --> 00:25:29,800
wait three weeks to compress a 4K.

582
00:25:30,300 --> 00:25:33,800
Okay, but like that is not the same level of we can't do this as they

583
00:25:33,800 --> 00:25:34,900
like deciding.

584
00:25:34,900 --> 00:25:36,500
What's the minimum size for this file?

585
00:25:36,800 --> 00:25:39,900
Outside of this framework of like within this encoding All rights,

586
00:25:39,900 --> 00:25:43,300
like within a given encoding, I see you can usually like there's a

587
00:25:43,300 --> 00:25:46,800
deterministic process, which is little, literally enumerate all

588
00:25:46,800 --> 00:25:47,200
possible.

589
00:25:47,200 --> 00:25:49,200
Encodings up to a given length, right?

590
00:25:49,200 --> 00:25:51,700
I think figure out if that gives you back the file, you want right?

591
00:25:51,700 --> 00:25:51,800
Right.

592
00:25:51,800 --> 00:25:55,300
Like that one always works and it's really shitty way better ways to

593
00:25:55,300 --> 00:25:55,700
do that.

594
00:25:55,700 --> 00:25:56,200
Okay.

595
00:25:56,500 --> 00:25:57,600
Big for the LZ parse.

596
00:25:57,600 --> 00:25:59,800
It's usually not even like that bad if something.

597
00:26:00,400 --> 00:26:04,100
It's like, and to the third power and to the fourth power, we still

598
00:26:04,100 --> 00:26:07,200
want to spend that amount of time, but that's not even an exponential

599
00:26:07,200 --> 00:26:07,500
search.

600
00:26:07,500 --> 00:26:08,500
So it's not that bad.

601
00:26:09,100 --> 00:26:10,900
It's just so you still useful.

602
00:26:12,700 --> 00:26:19,000
So essentially, I guess the thing there is for a given codec yeah we

603
00:26:19,000 --> 00:26:24,400
probably can run some exhaustive procedure, possibly optimized to

604
00:26:24,400 --> 00:26:27,400
eventually determine what the smallest size of something, is if that

605
00:26:27,400 --> 00:26:29,800
thing was within a fairly attractive

606
00:26:29,900 --> 00:26:30,500
Bill bound.

607
00:26:30,500 --> 00:26:30,800
Yep.

608
00:26:30,800 --> 00:26:32,600
Once it gets about that we can and you stand in it.

609
00:26:32,600 --> 00:26:34,800
If the question is, how small can I get in general?

610
00:26:35,300 --> 00:26:39,400
We don't have any idea because that once, once you take a particular

611
00:26:39,400 --> 00:26:42,900
compressor out of the definition, it becomes the fanciful problem.

612
00:26:42,900 --> 00:26:45,800
Once again the general space, you also have to somehow and coat the

613
00:26:45,800 --> 00:26:48,500
decompressor itself because once you have the space of all possible,

614
00:26:48,500 --> 00:26:52,200
encodings yes, you're talking about, oh, I have to have this program,

615
00:26:52,200 --> 00:26:54,300
that's the decompressor and then the data it takes that.

616
00:26:54,300 --> 00:26:56,200
Yes, they these two together produce the output.

617
00:26:56,200 --> 00:26:58,600
Yes, this is kind of the XE compression again, right?

618
00:26:58,600 --> 00:26:59,800
Except when you doing this in the map,

619
00:27:00,000 --> 00:27:00,600
Go framework.

620
00:27:00,600 --> 00:27:03,200
You don't use something crazy like x86 writer.

621
00:27:03,200 --> 00:27:07,100
Like lots of corner cases, use mathematical model, that's nice and

622
00:27:07,100 --> 00:27:09,200
tractable like a turing machine, Okay?

623
00:27:09,600 --> 00:27:12,600
And like, even if I'm in that like, oh, like, there's this notion

624
00:27:12,600 --> 00:27:14,700
called kolmogorov complexity, okay?

625
00:27:14,800 --> 00:27:20,700
Which is just Russian mathematician as always and comig or of justice.

626
00:27:20,900 --> 00:27:21,200
Is that?

627
00:27:21,200 --> 00:27:24,900
Like I said, the good math becomes a lot of some Rush, a lot of

628
00:27:24,900 --> 00:27:28,100
combinatoric, sand graph, Theory stuff and optimization stuff comes

629
00:27:28,100 --> 00:27:28,500
from Russia.

630
00:27:28,500 --> 00:27:29,800
Actually a lot of Moscow.

631
00:27:30,000 --> 00:27:32,700
State University, 50s and 60s 60s, good stuff.

632
00:27:33,000 --> 00:27:34,000
Like a lot of that.

633
00:27:34,100 --> 00:27:38,600
Then, got rediscovered later in the US and like a lot of theorems.

634
00:27:38,700 --> 00:27:43,200
They had this all figured out way before and it just because of the

635
00:27:43,200 --> 00:27:46,400
cold war, we wanted now took a while for that session College to

636
00:27:46,400 --> 00:27:46,800
propagate.

637
00:27:46,800 --> 00:27:49,800
But okay, the stuff that call my Garf that it's just like hey it just

638
00:27:50,400 --> 00:27:55,400
basically has just this definition that you determine a program and

639
00:27:55,400 --> 00:27:58,500
the input data that together produces that output okay?

640
00:27:58,500 --> 00:27:59,800
Which is nice concise.

641
00:27:59,900 --> 00:28:00,500
Definition.

642
00:28:00,500 --> 00:28:02,900
You can write it down easily and it turns out I said is completely

643
00:28:02,900 --> 00:28:03,600
undecidable.

644
00:28:03,700 --> 00:28:06,800
Well, I guess as soon as you include the program that you are into all

645
00:28:06,800 --> 00:28:10,100
of the standards of the, our computer science problems, that you would

646
00:28:10,100 --> 00:28:13,000
have whichever program because presumed that person can do anything

647
00:28:13,000 --> 00:28:14,300
that a person can do.

648
00:28:14,500 --> 00:28:16,600
I mean that's exactly the kind of thing you run into.

649
00:28:19,100 --> 00:28:22,100
Whenever you have and that's a very practical problem to take, get

650
00:28:22,100 --> 00:28:23,100
back into it.

651
00:28:23,300 --> 00:28:24,100
Ground floor here.

652
00:28:24,200 --> 00:28:24,500
Yeah.

653
00:28:24,500 --> 00:28:27,800
It's like not go to abstract the basic problem.

654
00:28:27,800 --> 00:28:31,900
We have with compression is always that you have to sort of trade off

655
00:28:32,300 --> 00:28:34,100
what kind of thing in the going to put in the compressor.

656
00:28:34,600 --> 00:28:36,100
There's lots of things you can do.

657
00:28:36,100 --> 00:28:39,500
This might be really useful to have in there, but it turns out, like,

658
00:28:39,500 --> 00:28:44,300
if you don't have this feature in the bitstream, this enumeration

659
00:28:44,300 --> 00:28:46,500
process, this decision process is really easy.

660
00:28:46,800 --> 00:28:48,700
Okay, once you throw this thing in that,

661
00:28:48,800 --> 00:28:52,700
Like a form of dependency that certainly means that whatever you're

662
00:28:52,700 --> 00:28:55,600
only N squared algorithm or linear time, algorithm doesn't work and

663
00:28:55,600 --> 00:28:57,900
you suddenly falling back to an exponential search.

664
00:28:58,200 --> 00:29:01,100
So you have to trade out like okay, this makes the big stream more

665
00:29:01,100 --> 00:29:06,500
expressive but in a way that means that now all known ways to just

666
00:29:06,500 --> 00:29:08,200
find a good solution don't work.

667
00:29:08,600 --> 00:29:11,600
But if you have, if that's only the stuff that's guaranteed to give

668
00:29:11,600 --> 00:29:14,800
you the optimal solution about them, whatever I still have heuristics

669
00:29:15,400 --> 00:29:17,500
and my heuristic solve

670
00:29:18,800 --> 00:29:22,400
With this more expressive format gives better results than optimal

671
00:29:22,400 --> 00:29:25,200
solve for these less expressive form, and then, he might decide you

672
00:29:25,200 --> 00:29:25,900
want to do that.

673
00:29:26,200 --> 00:29:28,800
So, let me just unpack because we haven't quite gotten down to that

674
00:29:28,800 --> 00:29:29,300
level yet.

675
00:29:29,300 --> 00:29:31,400
So, I want to discover that I think, I know what you're saying, but I

676
00:29:31,400 --> 00:29:32,200
just want to make sure.

677
00:29:33,500 --> 00:29:36,300
So essentially what you're saying is okay, I'm writing a compressor.

678
00:29:36,900 --> 00:29:41,400
And you know, I am creating, you know, the definition of this

679
00:29:41,400 --> 00:29:44,900
compressor means I'm going to have the decompressor is kind of sort, I

680
00:29:44,900 --> 00:29:47,700
guess the definition of the compression.

681
00:29:47,700 --> 00:29:48,200
How it works.

682
00:29:48,200 --> 00:29:48,600
Just like if I

683
00:29:48,700 --> 00:29:49,600
Can write the decompressor.

684
00:29:49,600 --> 00:29:51,400
Now, I have completely specified.

685
00:29:51,400 --> 00:29:55,800
You let this format is in some sense, but although I could make that

686
00:29:55,800 --> 00:29:59,700
thing have arbitrarily complex pieces in it, some of those May

687
00:30:00,000 --> 00:30:07,200
Fly that the compressor in order to pick optimal or good compressions.

688
00:30:07,300 --> 00:30:12,300
Now is somewhat intractable or practically TracFone some way is that

689
00:30:12,500 --> 00:30:14,400
is everything that's on the theoretical thing.

690
00:30:14,400 --> 00:30:16,400
If you look at things like video compression, yes.

691
00:30:16,400 --> 00:30:20,200
Like all the MPEG standards used to be just a specified, the decoder,

692
00:30:20,900 --> 00:30:21,400
right?

693
00:30:21,400 --> 00:30:23,200
They did not have any provisions for.

694
00:30:23,200 --> 00:30:24,200
How do you even think about this?

695
00:30:24,200 --> 00:30:28,800
I see, and for a long time after the specified MPEG, they hit an idea

696
00:30:28,800 --> 00:30:29,900
for how you can write a program.

697
00:30:30,000 --> 00:30:33,200
I'm that generates a valid encoding like there weren't good.

698
00:30:33,500 --> 00:30:34,000
They guess why?

699
00:30:34,000 --> 00:30:35,000
There's no.

700
00:30:35,100 --> 00:30:39,600
Yes, thank the theory of like how to write something that generates a

701
00:30:39,600 --> 00:30:43,200
good output like for a human looking at this like this.

702
00:30:43,200 --> 00:30:48,200
Like this looks kind of close even if you look at like now considered

703
00:30:48,200 --> 00:30:53,300
old codecs like a gwaan by the time they expect a 2 and then the first

704
00:30:53,300 --> 00:30:56,400
parts of impact for or like we hadn't figured out how to do good and

705
00:30:56,400 --> 00:30:59,800
coder frantic to yet, I was what we know now about current video.

706
00:31:00,000 --> 00:31:03,200
That's you can do way better and her friend back to as well, right?

707
00:31:03,200 --> 00:31:06,300
So if you win back now and wrote the encoders, you wouldn't even have

708
00:31:06,300 --> 00:31:08,200
to change like the format for a DVD.

709
00:31:08,200 --> 00:31:10,900
You could just get better looking video because the encoders would

710
00:31:10,900 --> 00:31:13,600
just produce better bit streams and that's also like part of what

711
00:31:13,600 --> 00:31:13,900
happens.

712
00:31:13,900 --> 00:31:18,100
Like, that's why like the even at the same bit rate the video you see

713
00:31:18,100 --> 00:31:20,900
on a DVD will usually be better than what you have in the TV broadcast

714
00:31:20,900 --> 00:31:21,500
scenario.

715
00:31:21,700 --> 00:31:25,000
With the same generate that simply because like if you have, if you

716
00:31:25,000 --> 00:31:28,300
have somebody doing a DVD, a they have more time to spend on the

717
00:31:28,300 --> 00:31:29,800
encoding in general, and be they live

718
00:31:29,900 --> 00:31:32,700
Really just have somebody going over the scenes, like looking at them

719
00:31:32,700 --> 00:31:35,400
individually, like, oh, this needs more bed right here, whatever.

720
00:31:35,600 --> 00:31:38,900
And so, if you're mastering a DVD for a feature film, like having

721
00:31:38,900 --> 00:31:41,600
somebody spent two weeks, looking at every frame of the picture and

722
00:31:41,600 --> 00:31:44,200
this, I know this needs a bit more bits here and like it's lost in the

723
00:31:44,200 --> 00:31:44,600
noise.

724
00:31:44,900 --> 00:31:47,700
There's so many other costs with mastering that it's worthwhile doing

725
00:31:47,700 --> 00:31:50,400
that actually wears on TV broadcasters like no.

726
00:31:50,400 --> 00:31:53,100
Like the street this stream is going out right now and it needs to be

727
00:31:53,100 --> 00:31:56,400
like on screen 15 seconds like you do whatever.

728
00:31:56,500 --> 00:31:56,900
Okay.

729
00:31:57,400 --> 00:31:59,800
So it's kind of just grind the sausage and whatever comes

730
00:32:00,000 --> 00:32:01,100
The other end is dinner.

731
00:32:01,100 --> 00:32:01,900
Yeah, okay.

732
00:32:02,400 --> 00:32:04,500
To put to put it another way, as well.

733
00:32:04,500 --> 00:32:08,400
Is this is something that a lot of times people don't realize is when

734
00:32:08,400 --> 00:32:18,700
you say zip a file, there isn't a exact like you can, you can produce

735
00:32:18,800 --> 00:32:22,700
a zip file, that will decompress to the same file, and they'll be lots

736
00:32:22,700 --> 00:32:24,600
of different fuzzy sizes, right?

737
00:32:24,600 --> 00:32:29,700
Right, because the, the specification is over, is over, generalized

738
00:32:29,700 --> 00:32:29,800
it.

739
00:32:29,900 --> 00:32:32,700
That way, like you can have ones that do different things like that.

740
00:32:32,700 --> 00:32:37,300
So certainly, the compressor, how you make those decisions on what the

741
00:32:39,200 --> 00:32:40,400
what bitstream you feed to.

742
00:32:40,400 --> 00:32:42,900
The decoder makes a big difference and certainly some of the fast

743
00:32:42,900 --> 00:32:46,000
stuff that Charles and Fabien have been working on with doodle is be

744
00:32:46,000 --> 00:32:51,200
kind of taking that to a an extreme of like writing parsers that

745
00:32:51,200 --> 00:32:54,000
generate files that can be decoded quickly, right?

746
00:32:54,000 --> 00:32:57,100
Like is a big part of what that win is.

747
00:32:57,100 --> 00:32:59,800
It isn't just like and certainly you know rad we've

748
00:33:00,000 --> 00:33:04,200
I had this ability you know in the early days it was me when you were

749
00:33:04,200 --> 00:33:08,000
working on granny, I'd help optimize stuff and then we have a Brash

750
00:33:08,000 --> 00:33:09,700
and certain who would work on stuff.

751
00:33:09,700 --> 00:33:12,800
And now we have Fabienne who's better than all of us put together?

752
00:33:12,900 --> 00:33:18,600
Who can always kind of fill up the, you know, can kind of clean things

753
00:33:18,600 --> 00:33:23,200
up and make them fast at the end, but a lot of how you design these

754
00:33:23,200 --> 00:33:28,800
systems is writing things that are by their nature optimizable or like

755
00:33:29,000 --> 00:33:29,800
our Fab

756
00:33:30,000 --> 00:33:32,900
That was a big part of the design of ink to as well, was that, you

757
00:33:32,900 --> 00:33:35,100
know, that was the thing that what you can decode quick.

758
00:33:35,100 --> 00:33:35,600
Yeah.

759
00:33:35,600 --> 00:33:38,100
And then because that's very important and that's like, get the best

760
00:33:38,100 --> 00:33:41,700
compression you can within a game time especially for being too.

761
00:33:41,700 --> 00:33:45,400
I remember like this was basically like the format was to a large

762
00:33:45,400 --> 00:33:48,300
extent dictated by having to decode it on Xbox 360.

763
00:33:48,300 --> 00:33:48,700
Yes.

764
00:33:48,900 --> 00:33:49,400
Yeah.

765
00:33:49,600 --> 00:33:52,600
That was like the worst case of 360 and PS3 really cool.

766
00:33:52,600 --> 00:33:55,700
Yeah, they're not good chips.

767
00:33:58,100 --> 00:33:59,800
I'm glad we don't have sponsors for this cop.

768
00:34:02,400 --> 00:34:06,400
I think, I don't think anybody don't think you'd be sponsored by IBM

769
00:34:06,400 --> 00:34:10,000
and Microsoft and Sony decided to switch to MD for the next sure.

770
00:34:10,000 --> 00:34:10,600
It's a good fit.

771
00:34:10,600 --> 00:34:11,000
There you go.

772
00:34:11,000 --> 00:34:12,100
That's a very good point.

773
00:34:12,100 --> 00:34:12,400
All right.

774
00:34:12,400 --> 00:34:16,900
So let me I don't know what's on your list of audience, so I guess

775
00:34:16,900 --> 00:34:18,300
it's you're going to have okay?

776
00:34:18,300 --> 00:34:21,699
So should I ask some of these then or did you have any topics you and

777
00:34:21,699 --> 00:34:22,300
just go ahead?

778
00:34:22,300 --> 00:34:29,199
Okay, so I guess these were from Jeff's, original email,

779
00:34:29,900 --> 00:34:34,400
And I understood some of them but I didn't understand some of that.

780
00:34:34,800 --> 00:34:38,900
I'll start with one that I did understand, but she was you said

781
00:34:38,900 --> 00:34:42,100
modeling versus statistical it was a topic so you kind of touched on

782
00:34:42,100 --> 00:34:45,600
that a little bit, but it wasn't, you know, sort of directly address.

783
00:34:45,600 --> 00:34:48,100
So what did you want to start saying about that?

784
00:34:48,100 --> 00:34:51,699
Well and it was Audrey but was just separating the idea of prediction

785
00:34:51,699 --> 00:34:54,800
and dealing with the residuals of how you think about compression.

786
00:34:54,800 --> 00:34:58,300
Like when you learn how to do compression, you kind of start down this

787
00:34:58,500 --> 00:34:59,800
path of like, all right, maybe

788
00:35:00,000 --> 00:35:03,300
First thing you do is like, oh, I'm sending all these integers and

789
00:35:03,300 --> 00:35:08,500
they don't all, they're not all 0 to f, f, f, f, f f f.

790
00:35:08,500 --> 00:35:11,400
So like, all right, I'm going to do some little bit packing.

791
00:35:11,400 --> 00:35:13,400
Thing of like this value is only seven bit.

792
00:35:13,400 --> 00:35:16,900
So I'm going to shove 7, B at the top of word and so that you start on

793
00:35:16,900 --> 00:35:19,600
your like learn okay, okay, I made a bit Packer and now I got that

794
00:35:19,600 --> 00:35:22,100
smaller and then maybe you get a little fancier and do like,

795
00:35:22,100 --> 00:35:25,000
multiplicative stuff where you're like, all right, now my value is not

796
00:35:25,000 --> 00:35:26,300
evenly that bit.

797
00:35:26,300 --> 00:35:29,800
I'm like, oh, this is a value from, you know, one

798
00:35:29,900 --> 00:35:30,500
23.

799
00:35:30,500 --> 00:35:33,800
So I want to multiply those out together and so you kind of build on

800
00:35:33,800 --> 00:35:36,300
this and then you start modeling where you're like.

801
00:35:36,300 --> 00:35:39,700
Now I'm just not encoding the data I'm like predicting the data and

802
00:35:39,700 --> 00:35:41,300
then dealing with the the Deltas.

803
00:35:41,300 --> 00:35:45,200
So it's it's so often we don't know because this was actually

804
00:35:45,200 --> 00:35:49,400
something that again and like I said kind of I'm trying to get the

805
00:35:49,400 --> 00:35:51,500
compression from a beginner standpoint because it's not something

806
00:35:51,500 --> 00:35:53,900
recovering here and it's not something that I know.

807
00:35:54,700 --> 00:35:59,400
So this was something that was that I've heard you guys talked about

808
00:35:59,400 --> 00:35:59,800
before.

809
00:36:00,000 --> 00:36:04,200
It was a point that I think was worth internalizing at least for me

810
00:36:04,200 --> 00:36:07,700
because again, a lot of these things, I'm sure are very simple for

811
00:36:07,700 --> 00:36:09,000
people who work on compression.

812
00:36:09,200 --> 00:36:13,700
But before you get into it, it's you don't have any traction on,

813
00:36:13,700 --> 00:36:14,500
really what's going on?

814
00:36:14,500 --> 00:36:17,000
You know, you might read an algorithm and say, oh okay, there's a

815
00:36:17,000 --> 00:36:17,900
Huffman codec.

816
00:36:17,900 --> 00:36:20,700
It does this on the bit stream or here's an LZ thing and it does

817
00:36:20,700 --> 00:36:21,200
whatever.

818
00:36:22,300 --> 00:36:25,500
But the prediction thing, I just like to give an example of that.

819
00:36:25,500 --> 00:36:28,600
Because one of the things that you were saying was like, okay.

820
00:36:28,600 --> 00:36:29,600
So for example,

821
00:36:30,000 --> 00:36:33,100
I have an image that I'm trying to compress like, and maybe we're just

822
00:36:33,100 --> 00:36:36,500
talking about like one small subsection of the image that I'm trying

823
00:36:36,500 --> 00:36:37,600
to put out there.

824
00:36:38,200 --> 00:36:42,000
So a very simple thing that you mentioned was like, okay, oftentimes

825
00:36:42,000 --> 00:36:43,500
you can get much better compression.

826
00:36:43,500 --> 00:36:47,600
If first before you do anything, you just subtract everything from its

827
00:36:47,600 --> 00:36:50,100
neighbor first as a very simple thing because it's very very cheap to

828
00:36:50,100 --> 00:36:50,800
do, right?

829
00:36:51,300 --> 00:36:52,800
So if you're not that, okay?

830
00:36:53,900 --> 00:36:57,600
So could you just give a simple example like that for people who are

831
00:36:57,600 --> 00:36:59,800
more on my side because people out there right now are like AI.

832
00:37:00,000 --> 00:37:02,300
All the stuff and we'll get to the more you know, sort of maybe stuff

833
00:37:02,300 --> 00:37:02,900
that they burn so late.

834
00:37:02,900 --> 00:37:05,500
But I just want for people like me you're kind of like coming out of

835
00:37:05,500 --> 00:37:07,900
first time can you give like a very simple example of that so that

836
00:37:07,900 --> 00:37:11,700
when we say prediction it's not kind of fuzzy and it's more like this

837
00:37:11,700 --> 00:37:12,300
is what we mean.

838
00:37:13,100 --> 00:37:13,400
Okay.

839
00:37:13,500 --> 00:37:15,400
Yeah yes, please just for modeling.

840
00:37:16,100 --> 00:37:19,900
So what that means is you have some concrete expectation of our data

841
00:37:19,900 --> 00:37:23,700
looks like like if you think about the kinds of things, the kinds of

842
00:37:23,800 --> 00:37:27,600
knowledge and so on you can bring into this basically like two

843
00:37:27,600 --> 00:37:28,500
separate universes.

844
00:37:28,500 --> 00:37:29,800
One is kinds of things, you know?

845
00:37:29,900 --> 00:37:32,500
In general about the kind of data you handling.

846
00:37:32,700 --> 00:37:36,400
Yes, if you're dealing with sage Apec, you know like that was

847
00:37:36,400 --> 00:37:38,100
developed for things like photographs.

848
00:37:38,100 --> 00:37:42,100
So like yes, natural imagery, like just digitized whatever.

849
00:37:42,100 --> 00:37:45,500
And that has certain properties such as for example, that adjacent

850
00:37:45,500 --> 00:37:50,400
pixels tend to look similar okay which just means very on a very basic

851
00:37:50,900 --> 00:37:51,400
level.

852
00:37:51,400 --> 00:37:54,200
That if you take the pixel and its immediate neighbor, like the

853
00:37:54,200 --> 00:37:58,200
difference between this and it's likely to be small and you can go a

854
00:37:58,200 --> 00:37:59,800
bit further and look at site.

855
00:38:00,100 --> 00:38:04,300
These pixels are in a statistical sense, are correlated.

856
00:38:04,400 --> 00:38:07,200
I see and if you go a bit further out there still correlate is just a

857
00:38:07,200 --> 00:38:08,200
correlation is weaker.

858
00:38:08,300 --> 00:38:13,400
Okay, once you make that definition mathematically precise and how

859
00:38:13,400 --> 00:38:19,100
that looks you can get to a certain model and just working that chain

860
00:38:19,100 --> 00:38:23,000
of reasoning through the end just that one statement of like there's a

861
00:38:23,000 --> 00:38:25,000
correlation between adjacent pixels.

862
00:38:25,000 --> 00:38:28,100
Yes, that correlation D case and us at a certain rate, once you go

863
00:38:28,100 --> 00:38:29,800
further out, okay just

864
00:38:29,900 --> 00:38:34,900
Once you have that model assumption which sounds fairly reasonable,

865
00:38:35,300 --> 00:38:39,400
you get down to a chain of like, okay, if that is true about the data

866
00:38:39,500 --> 00:38:43,500
then certain properties, hold and then the solutions to these things

867
00:38:43,500 --> 00:38:46,600
on a mattock, mathematical level have a certain shape and there's a

868
00:38:46,600 --> 00:38:49,500
good approximation to doing that kind of transform and that's the

869
00:38:49,500 --> 00:38:52,300
discrete cosine transform which is what jpeg does that, okay?

870
00:38:52,700 --> 00:38:55,500
So there's some mathematical transform that sort of has the right

871
00:38:55,500 --> 00:38:58,000
properties for data that has this shape.

872
00:38:58,100 --> 00:38:59,800
Okay, so that's a very concrete.

873
00:39:00,200 --> 00:39:02,200
The thing you have in text compression is similar.

874
00:39:02,400 --> 00:39:04,800
So there's these things called dictionary methods.

875
00:39:04,900 --> 00:39:05,200
Yes.

876
00:39:05,400 --> 00:39:10,900
And they're the assumption is that if you have text, there's lots of

877
00:39:10,900 --> 00:39:11,800
repetition in there.

878
00:39:12,000 --> 00:39:14,500
And I don't mean repetition at the structural level like, oh, the

879
00:39:14,500 --> 00:39:15,900
sentence or looks like the one before it.

880
00:39:15,900 --> 00:39:19,500
I mean, very literally, like this thing here is a word, the string of

881
00:39:19,500 --> 00:39:20,700
five characters, right?

882
00:39:20,700 --> 00:39:22,200
And we see that word a lot.

883
00:39:22,200 --> 00:39:22,600
Yes.

884
00:39:22,700 --> 00:39:23,400
Might be worth.

885
00:39:23,400 --> 00:39:25,100
Just having a short encoding for this.

886
00:39:25,100 --> 00:39:28,700
Yes, that's where the whole LZ thing comes into this to guys.

887
00:39:28,700 --> 00:39:29,800
Lempel ziv, who did too?

888
00:39:30,000 --> 00:39:36,800
A on this in 1977 1978 called imaginatively lz77 and LT 78.

889
00:39:38,500 --> 00:39:41,000
The definition people generally put their name on stuff.

890
00:39:41,500 --> 00:39:43,500
It's just, that's how everybody decided it.

891
00:39:43,500 --> 00:39:45,700
I don't, I don't think they actually named them that way.

892
00:39:45,700 --> 00:39:49,000
It's like a string substitution method whatever and like, nobody sets

893
00:39:49,000 --> 00:39:49,500
all paper.

894
00:39:49,500 --> 00:39:51,300
So, stuck Bells, isn't this?

895
00:39:51,300 --> 00:39:53,200
The citations lz77 of the name?

896
00:39:53,200 --> 00:39:54,300
Stuck very good.

897
00:39:54,400 --> 00:39:59,500
There's an interesting point there where that was a watershed moment,

898
00:39:59,700 --> 00:39:59,900
when

899
00:40:00,000 --> 00:40:02,400
His papers came out, because there was a funny thing about people,

900
00:40:02,400 --> 00:40:06,000
thinking about compression in terms of Huffman and arithmetic and

901
00:40:06,000 --> 00:40:08,400
getting to the point where we're like, we're doing the best we can.

902
00:40:08,500 --> 00:40:08,800
Okay.

903
00:40:08,800 --> 00:40:12,700
And then these guys came in with these fairly simple algorithms that

904
00:40:12,700 --> 00:40:16,900
were just this huge jump in complexity versus, I mean, that's just, I

905
00:40:16,900 --> 00:40:18,000
mean compression.

906
00:40:18,000 --> 00:40:22,300
So though it was a huge deal and most encoders to this day are lz77

907
00:40:22,300 --> 00:40:27,300
based like well for but you also see ya and like the whole assumption.

908
00:40:27,300 --> 00:40:29,400
There's like you can go down the road.

909
00:40:29,900 --> 00:40:33,400
If you're in the whole statistical compression world, like calm Agora

910
00:40:33,400 --> 00:40:36,000
of Mark reference on that all things, you hear a lot in this context

911
00:40:36,000 --> 00:40:37,600
was all like stochastic switch.

912
00:40:37,700 --> 00:40:40,700
That's what the that's like probability Theory and its modern form

913
00:40:40,700 --> 00:40:41,300
came out of Russia.

914
00:40:41,300 --> 00:40:43,800
So that's also why these Russians are very predominant there.

915
00:40:43,900 --> 00:40:45,900
Okay, that's where that sort of comes from.

916
00:40:45,900 --> 00:40:49,600
If you go down that road you get modern statistical compressors which

917
00:40:49,600 --> 00:40:50,900
are basically just.

918
00:40:51,600 --> 00:40:54,700
You look at data and to try to build a stochastic models.

919
00:40:54,700 --> 00:40:57,100
Like what's the most likely thing to happen next and you get

920
00:40:57,100 --> 00:40:59,800
probabilities and you try to encode that thing back?

921
00:41:00,000 --> 00:41:03,600
Okay, what's called statistical compressors, they look at some form of

922
00:41:03,600 --> 00:41:07,800
this and so the nlds Disciples of statistical compressors like name

923
00:41:07,800 --> 00:41:08,200
wise.

924
00:41:08,200 --> 00:41:11,100
So, the tough even for example, is like a form of statistical

925
00:41:11,100 --> 00:41:11,500
compression.

926
00:41:11,500 --> 00:41:15,500
We look at the statistics of like, How likely are each individual

927
00:41:15,500 --> 00:41:17,000
letter in the alphabet.

928
00:41:17,500 --> 00:41:20,700
The key is a lot more likely than say, why is yes.

929
00:41:20,700 --> 00:41:24,500
So in that case, you want to assign short codes to the letter e and a

930
00:41:24,500 --> 00:41:27,000
very long codesys, a letter Q which is very rare.

931
00:41:27,100 --> 00:41:27,500
Yes,

932
00:41:29,900 --> 00:41:32,600
that kind of thing is under statistical compression and then you can

933
00:41:32,600 --> 00:41:33,400
look at it, I do.

934
00:41:33,400 --> 00:41:36,200
What if I don't look at just a single character, but multiple

935
00:41:36,200 --> 00:41:39,600
characters or I look at a single character, but also consider what?

936
00:41:39,600 --> 00:41:43,500
When just before that character, or you say, like, my model is not

937
00:41:43,500 --> 00:41:44,600
just what happened immediately.

938
00:41:44,600 --> 00:41:44,800
Go.

939
00:41:44,800 --> 00:41:48,300
But also like other data I have seen in that try to infer, complex

940
00:41:48,300 --> 00:41:51,900
properties of the data I've seen so far in this stream, like, the

941
00:41:51,900 --> 00:41:54,600
stuff I mentioned with jpeg is just general, like, things.

942
00:41:54,600 --> 00:41:56,100
I know about the world, right?

943
00:41:56,200 --> 00:41:59,200
Like I know how certain images look and I

944
00:41:59,300 --> 00:41:59,900
Use that to drive.

945
00:42:00,000 --> 00:42:02,000
Compression the stuff with statistical.

946
00:42:02,000 --> 00:42:06,000
Coders was more like, oh, I know about data that it is self-similar

947
00:42:06,000 --> 00:42:06,900
and a certain way.

948
00:42:07,200 --> 00:42:11,000
And I just try to learn properties of the data stream as I go along

949
00:42:11,000 --> 00:42:12,000
and they built a model.

950
00:42:12,100 --> 00:42:17,000
So, how would you define the split between something like an LZ

951
00:42:17,000 --> 00:42:22,600
compressor and something like a Huffman or an arithmetic compressor in

952
00:42:22,600 --> 00:42:22,800
this?

953
00:42:22,800 --> 00:42:24,000
I mean, obviously, it can be used together.

954
00:42:24,000 --> 00:42:27,800
But, I mean those, those separate algorithms because in some sense,

955
00:42:27,800 --> 00:42:29,800
the description that you just gave could sort of apply

956
00:42:30,000 --> 00:42:32,000
I to an LZ compressor, it's can view, right?

957
00:42:32,000 --> 00:42:35,200
It's sort of a system, is just like, as I see things, I know I can

958
00:42:35,200 --> 00:42:37,300
reference things that I've already seen and that there's a certain

959
00:42:37,300 --> 00:42:38,200
cost to that.

960
00:42:38,200 --> 00:42:40,500
So I might adjust my etcetera, etcetera.

961
00:42:40,500 --> 00:42:41,000
Right it.

962
00:42:41,000 --> 00:42:41,700
So how would you?

963
00:42:41,800 --> 00:42:43,200
It's mainly a matter of how you think about it?

964
00:42:43,200 --> 00:42:46,300
Like hell, these can be fully understood as just, this is a form of

965
00:42:46,300 --> 00:42:48,700
so-called Markov model Markov model.

966
00:42:48,700 --> 00:42:52,000
Just means that you predict the data you have right now from data, you

967
00:42:52,000 --> 00:42:54,800
see in the past that's really all that means, okay?

968
00:42:54,800 --> 00:42:58,500
You can go a bit more precise about what that is but that's really all

969
00:42:58,500 --> 00:42:59,900
falls down to, okay.

970
00:43:00,000 --> 00:43:05,300
The Fairly basic thing, but the string matching stuff you have in

971
00:43:05,300 --> 00:43:05,700
compression.

972
00:43:05,700 --> 00:43:10,800
Like, LZ means that you don't have any kind of repetition has to have

973
00:43:10,800 --> 00:43:14,500
a certain structure, you include that in a certain way where you write

974
00:43:14,500 --> 00:43:15,500
down an offset.

975
00:43:15,500 --> 00:43:18,600
Like this is where that string was or you built an explicit dictionary

976
00:43:18,600 --> 00:43:19,400
of words.

977
00:43:19,600 --> 00:43:21,700
I say this word number 351.

978
00:43:21,700 --> 00:43:22,200
Yes.

979
00:43:22,300 --> 00:43:26,500
So that's a bit more explicit than just saying like oh I haven't

980
00:43:26,500 --> 00:43:28,200
General a probability model.

981
00:43:28,300 --> 00:43:29,800
Like I said, Markov models.

982
00:43:29,900 --> 00:43:37,600
As in general, are a very general theory, very general abstraction,

983
00:43:38,300 --> 00:43:40,900
but you can't, you can apply that sort of thing to everything.

984
00:43:42,000 --> 00:43:45,700
The string matching sting and the dictionary thing is a lot more

985
00:43:45,700 --> 00:43:50,200
specialized, but has structure like, oh, that it doesn't break stuff

986
00:43:51,000 --> 00:43:53,300
apart between bites or something like that.

987
00:43:53,500 --> 00:43:54,500
You can do a lot.

988
00:43:54,500 --> 00:43:55,300
Nicer modeling.

989
00:43:55,300 --> 00:43:58,400
You can do a lot like string searching and so on, we have good data

990
00:43:58,400 --> 00:43:59,500
structures for that.

991
00:44:00,000 --> 00:44:02,900
There's lots of Leverage their working at that string level.

992
00:44:03,600 --> 00:44:06,300
So the LZ stuff tends to be a lot faster but like chromatic

993
00:44:06,300 --> 00:44:08,900
mathematical point of view and from a theoretical point of view it's

994
00:44:08,900 --> 00:44:11,800
just a Markov model you it just happens to be the type of Markov model

995
00:44:11,800 --> 00:44:14,100
that's most efficient by an order of magnitude.

996
00:44:14,100 --> 00:44:14,500
Yeah.

997
00:44:14,500 --> 00:44:18,500
Okay I can give it its just talking about prediction versus the

998
00:44:18,500 --> 00:44:21,400
encoding and give you one just a very simple way to think about it.

999
00:44:21,400 --> 00:44:25,500
That's less mathematical of like a specific case of you can imagine an

1000
00:44:25,500 --> 00:44:29,700
image that was just a wash from 0 to 255, okay?

1001
00:44:30,000 --> 00:44:33,700
And you have a very simple back end of your image encoder.

1002
00:44:33,700 --> 00:44:37,300
That is an RL that just encodes runs.

1003
00:44:37,300 --> 00:44:41,600
It says like, okay, there was a zero and there was 25 of them.

1004
00:44:41,700 --> 00:44:42,000
Right?

1005
00:44:42,000 --> 00:44:42,900
Very serviceable thing.

1006
00:44:42,900 --> 00:44:45,000
That's just like, I've been just give account in a value.

1007
00:44:45,000 --> 00:44:45,300
Yeah.

1008
00:44:45,400 --> 00:44:46,500
And we're just going to send it that way.

1009
00:44:46,500 --> 00:44:49,300
If the whole thing was the same color, I just send two things down to

1010
00:44:49,300 --> 00:44:50,500
B down and we're done, right?

1011
00:44:50,500 --> 00:44:53,000
So if you have that back end and you feed it, the wash.

1012
00:44:53,000 --> 00:44:55,300
It's not going to do very well because every pixel is different from

1013
00:44:55,300 --> 00:44:56,200
the previous one.

1014
00:44:56,400 --> 00:44:58,900
So, but if you add some prediction to it and subtract from the

1015
00:44:58,900 --> 00:44:59,800
previous thing,

1016
00:45:00,000 --> 00:45:01,900
Stead of a wash from 0 to 255.

1017
00:45:01,900 --> 00:45:05,100
You end up with all big run you know a 0 and a bunch of ones.

1018
00:45:05,100 --> 00:45:07,800
Okay, so then all of a sudden like okay, now your prediction has

1019
00:45:07,800 --> 00:45:11,000
helped to the backend statistical part have an easier job.

1020
00:45:11,000 --> 00:45:14,300
So that's kind of the split that a very specific simple way of

1021
00:45:14,300 --> 00:45:15,500
thinking about.

1022
00:45:15,500 --> 00:45:19,700
And so in some sense, the predictions and the transforms because the

1023
00:45:19,700 --> 00:45:22,900
transforms are the predict, like you get, I guess it's, Jimmy could

1024
00:45:22,900 --> 00:45:25,500
sick of these similar like, your predictor your transform, whatever it

1025
00:45:25,500 --> 00:45:29,100
is, is the thing that you are using to try and make the data become as

1026
00:45:29,100 --> 00:45:29,900
regular as

1027
00:45:30,000 --> 00:45:31,600
Well, for whatever you're feeding it into.

1028
00:45:31,600 --> 00:45:36,400
Yeah, just something that your back end is you expects to see that

1029
00:45:36,400 --> 00:45:41,200
thing in some sense, moves your highly compressible, stuff around in

1030
00:45:41,200 --> 00:45:41,700
some sense.

1031
00:45:41,700 --> 00:45:44,700
Like meaning I've got, you know, all the things I might never

1032
00:45:44,700 --> 00:45:47,700
compress, there's some things I can press very well and some some

1033
00:45:47,700 --> 00:45:48,900
things that compress very poorly.

1034
00:45:49,200 --> 00:45:51,100
I'm trying with these transforms to move.

1035
00:45:51,100 --> 00:45:54,600
The things I care about in to that good part and the things I don't

1036
00:45:54,600 --> 00:45:55,600
care about out in the thing.

1037
00:45:55,600 --> 00:45:59,400
So, Ergo in that example, if you if that was the only thing, your

1038
00:45:59,400 --> 00:45:59,800
compressor, good.

1039
00:46:00,200 --> 00:46:03,900
You now have a much harder time with something say that.

1040
00:46:04,100 --> 00:46:04,600
Well, I don't know.

1041
00:46:04,600 --> 00:46:07,900
Is there anything that is like this anything that awesome concerning

1042
00:46:07,900 --> 00:46:08,700
you're going to not do well.

1043
00:46:08,800 --> 00:46:11,700
Okay, yeah, I mean compression sort of bean bagging in that way, as

1044
00:46:11,700 --> 00:46:15,200
you try to push in the places that you care about it, bulges out and

1045
00:46:15,200 --> 00:46:17,300
other places and I hope it's in the corner.

1046
00:46:17,400 --> 00:46:17,700
Okay?

1047
00:46:17,700 --> 00:46:19,800
Yeah yeah, I mean that's General process.

1048
00:46:19,800 --> 00:46:25,700
Wouldn't do like any sort of compression task is you initially start

1049
00:46:25,700 --> 00:46:29,700
out with a stream that has lots of discernible structure and it's like

1050
00:46:29,700 --> 00:46:29,800
that

1051
00:46:29,900 --> 00:46:31,600
You just kind of hammer away at.

1052
00:46:32,100 --> 00:46:36,000
And as you do more and more like you have the scream of like this is

1053
00:46:36,000 --> 00:46:38,100
like the structure he extracted and that gives you that structured

1054
00:46:38,100 --> 00:46:38,500
data.

1055
00:46:38,900 --> 00:46:41,700
And then there's the rest and like these residuals like, basically.

1056
00:46:41,700 --> 00:46:46,400
Like at some point you have this dense, neutron star completely random

1057
00:46:46,400 --> 00:46:47,100
looking data.

1058
00:46:47,500 --> 00:46:50,500
I suggest, like, that's all the stuff that just doesn't match any

1059
00:46:50,500 --> 00:46:54,400
prediction and like that's random, like in a fairly strong

1060
00:46:54,400 --> 00:46:55,400
mathematical sense.

1061
00:46:55,400 --> 00:46:59,600
And so like, if you run Randomness tests on this like statistically

1062
00:46:59,600 --> 00:46:59,800
random,

1063
00:47:00,400 --> 00:47:03,600
Various as we use for random number generator, that's what that is.

1064
00:47:03,600 --> 00:47:08,300
It is literally random, like it's unpredictable because whatever this

1065
00:47:08,300 --> 00:47:12,400
latter was you, it's just like, that's all the stuff that didn't match

1066
00:47:12,400 --> 00:47:14,000
any predictions you could make.

1067
00:47:14,000 --> 00:47:17,000
I see, that's the stuff that is really random in the end.

1068
00:47:17,000 --> 00:47:21,500
So in some sense, you could say, after you are done with your

1069
00:47:21,500 --> 00:47:25,200
compressor and you want to know if you found the smallest possible,

1070
00:47:25,300 --> 00:47:28,500
you know thing here you would send it to a cryptographer and if they

1071
00:47:28,500 --> 00:47:29,800
can figure out anything about it,

1072
00:47:29,900 --> 00:47:31,700
It, you didn't do as good as you thought.

1073
00:47:32,100 --> 00:47:32,600
That's correct.

1074
00:47:32,600 --> 00:47:32,900
Yeah.

1075
00:47:34,100 --> 00:47:34,800
All right.

1076
00:47:35,800 --> 00:47:38,600
So do try to move on from there are certain?

1077
00:47:38,600 --> 00:47:41,300
Yeah, I was just, I mean, it's since this is about learning a little

1078
00:47:41,300 --> 00:47:44,600
bit of compression that having that separation between prediction.

1079
00:47:44,600 --> 00:47:49,300
And then the cleanup is, is part of how you get a foothold in this

1080
00:47:49,300 --> 00:47:49,600
stuff.

1081
00:47:49,700 --> 00:47:52,800
Especially when you start looking at this in general, you're kind of

1082
00:47:52,800 --> 00:47:57,100
stepping into, you know, a hundred years of thought about this stuff

1083
00:47:57,100 --> 00:47:59,800
so it's a way to like because there is a way there.

1084
00:48:00,000 --> 00:48:05,300
Can move into this slowly it's not magic.

1085
00:48:05,300 --> 00:48:08,700
Like you know, the joke of all kinds of stuff is when you need

1086
00:48:08,800 --> 00:48:12,400
something to be esoteric and magic in a TV show or any fictional

1087
00:48:12,400 --> 00:48:12,800
setting.

1088
00:48:12,800 --> 00:48:16,500
It's either compression or cryptography and those are and these are

1089
00:48:16,500 --> 00:48:16,800
things.

1090
00:48:16,800 --> 00:48:20,300
You can you you can do the work yourself to.

1091
00:48:20,300 --> 00:48:23,400
I thought, usually physics like is like Quantum, whatever.

1092
00:48:23,400 --> 00:48:26,700
Okay, everybody's friends turned off, if you could just write whatever

1093
00:48:26,700 --> 00:48:27,800
we want to it from there.

1094
00:48:27,800 --> 00:48:29,900
Yeah, just need some fancy equations on

1095
00:48:30,000 --> 00:48:32,700
Aboard and exactly like you say this is quantum something.

1096
00:48:32,700 --> 00:48:36,900
So like why it's like this is an accounting equation of what are you

1097
00:48:36,900 --> 00:48:37,100
doing?

1098
00:48:37,100 --> 00:48:39,600
His will see, that's why it's very good but I don't know any content

1099
00:48:39,600 --> 00:48:42,600
math because this way I can still enjoy the blackboards and TV shows.

1100
00:48:45,300 --> 00:48:51,000
All right, so the next thing that you had on your list there was

1101
00:48:51,000 --> 00:48:52,500
science versus art.

1102
00:48:52,600 --> 00:48:54,600
Oh and I guess I have a fairly good idea.

1103
00:48:54,600 --> 00:48:57,700
Probably what you're talking about whether but yeah I don't use laser

1104
00:48:58,400 --> 00:48:59,800
and this is a

1105
00:49:00,000 --> 00:49:05,800
more hand wavy but it's kind of interesting and I find it fun to think

1106
00:49:05,800 --> 00:49:07,000
about which is just

1107
00:49:09,200 --> 00:49:15,000
like I say most general purpose data compresses are based on an LZ

1108
00:49:15,000 --> 00:49:18,100
style algorithm.

1109
00:49:18,100 --> 00:49:19,600
Well the ones he used they've definitely want.

1110
00:49:19,600 --> 00:49:22,400
Yeah just lots of really really weird stuff.

1111
00:49:22,400 --> 00:49:25,900
Yeah we're talking about stuff that works at amazing rates of tens of

1112
00:49:25,900 --> 00:49:29,100
kilobytes per second write that compresses way better than anything

1113
00:49:29,100 --> 00:49:30,900
you've ever used and he won't do the shit.

1114
00:49:30,900 --> 00:49:31,800
You will love.

1115
00:49:31,800 --> 00:49:32,300
Yeah.

1116
00:49:32,400 --> 00:49:36,900
But but it exists in the the ones that you use in practice are all

1117
00:49:36,900 --> 00:49:38,900
based on this, these

1118
00:49:39,000 --> 00:49:43,900
Accessing things and then, but we have made big strides in compression

1119
00:49:43,900 --> 00:49:45,300
over that period of time too.

1120
00:49:45,700 --> 00:49:51,300
And a lot of that is kind of the, you know, I joke that you know the

1121
00:49:51,300 --> 00:49:54,500
how good a compressor is really is, how long people get to fiddle with

1122
00:49:54,500 --> 00:49:54,700
it.

1123
00:49:54,700 --> 00:49:56,500
Like how many things they can try?

1124
00:49:56,500 --> 00:49:57,100
How many think?

1125
00:49:57,100 --> 00:49:59,300
How many experiments can you run in a given time?

1126
00:49:59,300 --> 00:50:02,500
Because you always have as some point you have to ship but a lot of

1127
00:50:02,500 --> 00:50:08,300
this is the time you take the amount of data sets you have and the

1128
00:50:08,300 --> 00:50:08,800
things you're thinking

1129
00:50:08,900 --> 00:50:14,100
Talking about and in, even now, like, will find surprising things.

1130
00:50:14,100 --> 00:50:19,200
I like a lot of, you know, even as recently as beginning to your

1131
00:50:19,200 --> 00:50:22,400
Charles would discover things in his own algorithms like, oh, hey,

1132
00:50:22,400 --> 00:50:25,000
there's a parse here that I had not anticipated.

1133
00:50:25,000 --> 00:50:28,500
Should we mention the fact that the reason why we don't have all three

1134
00:50:28,500 --> 00:50:31,400
people who work on depression at Brad is because Charles isn't Hawaii

1135
00:50:31,400 --> 00:50:32,500
to us, is in Hawaii.

1136
00:50:32,500 --> 00:50:37,000
Yeah we are we are in the rain here.

1137
00:50:37,300 --> 00:50:38,500
He's in Hawaii.

1138
00:50:38,500 --> 00:50:38,800
That's

1139
00:50:38,900 --> 00:50:39,200
Right.

1140
00:50:39,200 --> 00:50:40,000
Laughing at us.

1141
00:50:40,000 --> 00:50:42,200
He's watching the stream on a beach.

1142
00:50:42,200 --> 00:50:45,700
Yeah, I think I might be going know.

1143
00:50:45,700 --> 00:50:47,000
Okay, so it's wrong.

1144
00:50:47,000 --> 00:50:52,500
Your he forfeits his right to tell you that.

1145
00:50:52,500 --> 00:50:54,500
You said something right on, guys, not here.

1146
00:50:54,600 --> 00:50:56,000
I'm sure he will blog about it.

1147
00:50:56,000 --> 00:50:56,500
Yeah, okay.

1148
00:50:56,600 --> 00:50:59,600
That's a yes,

1149
00:51:00,000 --> 00:51:03,000
Those of you don't know who Jeff is for, don't go to Charles.

1150
00:51:03,000 --> 00:51:09,100
This blog was Charles blue, who is, who is another compression guy,

1151
00:51:09,100 --> 00:51:13,000
who become complicit as his therapist log.

1152
00:51:13,000 --> 00:51:16,300
So if that's not, it's a public service show, okay?

1153
00:51:17,200 --> 00:51:17,700
Yes.

1154
00:51:17,700 --> 00:51:20,600
So anyway, continue with what you were saying.

1155
00:51:20,600 --> 00:51:23,000
So you said Charles found things in his own algorithm.

1156
00:51:23,000 --> 00:51:23,200
Yeah.

1157
00:51:23,200 --> 00:51:23,400
Yeah.

1158
00:51:23,400 --> 00:51:28,600
Like we had a fairly Lumpy

1159
00:51:30,000 --> 00:51:31,300
Mystical compressor, I'm sorry.

1160
00:51:31,300 --> 00:51:33,800
Lumpy oh, I call it.

1161
00:51:33,800 --> 00:51:34,900
That, that's not a thing.

1162
00:51:35,100 --> 00:51:44,800
Well, you don't think so, there's a Continuum from things the that I

1163
00:51:44,900 --> 00:51:49,200
call them, lumpy compressors, but they're things like, lz4 where you

1164
00:51:49,200 --> 00:51:54,800
are doing fairly big symbols, you're sending nibbles or you're sending

1165
00:51:54,800 --> 00:51:55,200
B.

1166
00:51:55,200 --> 00:51:57,300
In this case, Charles was sending full B.

1167
00:51:57,400 --> 00:51:59,800
Okay, not doing individual bit packing stuff.

1168
00:52:00,000 --> 00:52:03,400
Doing encoding big things because then your ride a bike faster than

1169
00:52:03,400 --> 00:52:05,600
you can pack words together and slide it over and shipped them in

1170
00:52:05,600 --> 00:52:06,500
Doraemon all that.

1171
00:52:07,100 --> 00:52:12,300
So the really fast and coders or decoders like lz4 and stuff are like

1172
00:52:12,600 --> 00:52:16,800
make some concessions to compression by not going quite as high a bit

1173
00:52:16,800 --> 00:52:17,100
packing.

1174
00:52:17,100 --> 00:52:19,600
So that's and the most that's like all those lumpy then.

1175
00:52:19,600 --> 00:52:21,700
There's no I just I just get, could I just want to get a little curve

1176
00:52:21,700 --> 00:52:22,100
cushion there?

1177
00:52:22,100 --> 00:52:24,600
Because when you say bit packing, I want to make sure I know what

1178
00:52:24,600 --> 00:52:25,500
you're talking about.

1179
00:52:25,700 --> 00:52:27,100
Are you talking about packing?

1180
00:52:27,100 --> 00:52:29,500
Because I've seen your not talk about packing bits on the output side.

1181
00:52:29,500 --> 00:52:29,700
Remember,

1182
00:52:29,900 --> 00:52:32,600
The splitting up of bits on the input side, on the output side.

1183
00:52:32,600 --> 00:52:35,100
So you can give me a little more because I'm not sure I understood

1184
00:52:35,100 --> 00:52:35,800
that, exactly.

1185
00:52:35,800 --> 00:52:39,000
Okay, so packing, what's an easy way?

1186
00:52:39,000 --> 00:52:45,500
I'm going to be 77 the way these compressors work at the very concept,

1187
00:52:45,500 --> 00:52:50,700
very high conceptual level is you are about to decode a bite or that

1188
00:52:50,700 --> 00:52:51,200
symbol.

1189
00:52:51,400 --> 00:52:55,900
And you look at a bit and it says I am going to send you a literal,

1190
00:52:55,900 --> 00:52:59,200
which is the bite that was in the input stream and just going to send

1191
00:52:59,200 --> 00:52:59,800
it to you, okay?

1192
00:53:00,300 --> 00:53:03,500
I might encode it, but I'm going to send you that or it's a thing that

1193
00:53:03,500 --> 00:53:06,600
says I want you to look backwards in the Stream at this offset and

1194
00:53:06,600 --> 00:53:09,700
this length and copy that data in your straight, right.

1195
00:53:09,800 --> 00:53:10,000
Okay.

1196
00:53:10,000 --> 00:53:16,500
So if you are going back and forth on a single bit, on every symbol

1197
00:53:16,500 --> 00:53:20,600
you have a, that has a lot of ramifications in terms of Branch

1198
00:53:20,600 --> 00:53:22,300
prediction, and then speed, and all this.

1199
00:53:22,700 --> 00:53:28,300
So what Elysee for in and other people do and even even earlier,

1200
00:53:28,400 --> 00:53:29,900
oppressiveness certainly, but whales

1201
00:53:30,100 --> 00:53:31,400
For really, really leaned on.

1202
00:53:31,400 --> 00:53:32,100
It was saying that.

1203
00:53:32,100 --> 00:53:34,600
All right, well, I'm going to encode like in.

1204
00:53:34,600 --> 00:53:37,300
This isn't exactly what the, but like, I'm going to encode for of

1205
00:53:37,300 --> 00:53:39,700
those literal Flags in a in a nibble.

1206
00:53:39,900 --> 00:53:41,200
And then do, okay.

1207
00:53:41,200 --> 00:53:44,800
So we're like you can see things of like or I'm going to try to get

1208
00:53:44,800 --> 00:53:48,100
more out of each little symbol that I'm pulling out of the stream so I

1209
00:53:48,100 --> 00:53:50,800
can do some more stuff for Speed purpose.

1210
00:53:50,800 --> 00:53:54,600
So as a general rule, if you're just outputting a variable number of

1211
00:53:54,600 --> 00:53:57,500
bits at each step, then you just need to, like, read everything with

1212
00:53:57,500 --> 00:53:59,800
get bits, and you need to keep track of

1213
00:54:00,000 --> 00:54:03,700
You are the middle of a bite and so on, that's very complicated, very

1214
00:54:03,700 --> 00:54:04,600
complicated.

1215
00:54:04,700 --> 00:54:05,600
It's like five construct.

1216
00:54:05,600 --> 00:54:09,900
Yes but it's complicated compared to just getting a bite, right?

1217
00:54:09,900 --> 00:54:13,800
So the really fast compressors tried to not have any complicated

1218
00:54:13,800 --> 00:54:16,700
unpacking work as much as they can.

1219
00:54:16,700 --> 00:54:20,500
They just tried to like oh look at this B, do this next, jump into at

1220
00:54:20,500 --> 00:54:24,500
a maybe doing a end like do an addition but that's about the size of

1221
00:54:24,500 --> 00:54:24,700
it.

1222
00:54:24,700 --> 00:54:27,600
Like don't try to keep track of the state in the bit but for whatever

1223
00:54:27,600 --> 00:54:29,800
just don't do any of that I see and so

1224
00:54:30,500 --> 00:54:34,400
Basically what you're saying is okay, I have this decompressor, it's

1225
00:54:34,400 --> 00:54:37,400
reading sort of a hybrid command data stream, right?

1226
00:54:37,400 --> 00:54:40,300
Because it's sort of, you know, it although it's all data some of it

1227
00:54:40,300 --> 00:54:42,700
is telling it sort of what to do and some of it is telling it what to

1228
00:54:42,700 --> 00:54:43,800
do it with you upright.

1229
00:54:44,200 --> 00:54:48,000
And so that is a, you know, you sort of created a new compression

1230
00:54:48,000 --> 00:54:51,000
problem for yourself, inside your old compression problem, which is, I

1231
00:54:51,000 --> 00:54:53,200
now need to figure out how to most efficiently.

1232
00:54:53,200 --> 00:54:57,900
Encode the way that the compressor is supposed to be working, and now

1233
00:54:57,900 --> 00:54:59,800
you are running the same problems by the way.

1234
00:55:00,100 --> 00:55:03,800
You're starting to like every compression scheme as you add more of

1235
00:55:03,800 --> 00:55:06,300
these methods like ways of prediction.

1236
00:55:06,800 --> 00:55:10,300
Like, that's one way that, for example, rich goldrich just like author

1237
00:55:10,300 --> 00:55:12,100
of crunch and like, as written LT happened.

1238
00:55:12,100 --> 00:55:12,700
A couple other things.

1239
00:55:12,700 --> 00:55:16,000
So, another comparison guide, be now like he thinks to tend to think

1240
00:55:16,000 --> 00:55:18,200
of this as basically like specifying a VM.

1241
00:55:18,700 --> 00:55:18,900
Okay.

1242
00:55:18,900 --> 00:55:21,200
Decompressor has like this set of commands that can do.

1243
00:55:21,200 --> 00:55:21,400
Yes.

1244
00:55:21,400 --> 00:55:24,600
And like, it tries to like, this is a compact encoding for telling the

1245
00:55:24,600 --> 00:55:26,100
decompressor what to do, right?

1246
00:55:26,200 --> 00:55:28,900
I like he is thinking of it in terms of Lego, I've read this virtual

1247
00:55:28,900 --> 00:55:29,700
machine and I have to

1248
00:55:29,900 --> 00:55:34,200
basically write this compiler that generates code that the decoder VM

1249
00:55:34,200 --> 00:55:36,600
then runs to reconstruct the data I want, right?

1250
00:55:36,600 --> 00:55:38,000
That's another way of thinking about it.

1251
00:55:38,100 --> 00:55:43,800
Although unlike a traditional compiler, you now care very much about

1252
00:55:43,800 --> 00:55:45,200
the executable size.

1253
00:55:45,200 --> 00:55:48,700
Whereas, maybe before your trade-offs were here, you compilers that go

1254
00:55:48,700 --> 00:55:51,400
in that direction, certain the stuff will go even standard compilers,

1255
00:55:51,500 --> 00:55:54,100
you know, have this option but I mean, this is critical for this kind

1256
00:55:54,100 --> 00:55:54,800
of compiler at that.

1257
00:55:54,800 --> 00:55:57,900
I mean, that there's the specialized language was there's compilers

1258
00:55:57,900 --> 00:55:58,900
that really go towards.

1259
00:55:58,900 --> 00:55:59,800
Like, if we say,

1260
00:56:00,000 --> 00:56:02,000
Optimization on a c compiler.

1261
00:56:02,000 --> 00:56:03,300
That's a very hand wavy thing.

1262
00:56:03,300 --> 00:56:03,900
Yes.

1263
00:56:04,300 --> 00:56:07,600
Because like Optimal is really not very well defined.

1264
00:56:07,600 --> 00:56:11,000
There's more application specific languages and stuff for, like,

1265
00:56:11,000 --> 00:56:13,500
compiler for say, finite State machines and Hardware.

1266
00:56:13,900 --> 00:56:16,700
That when they say optimal, they mean optimal as and like there

1267
00:56:16,700 --> 00:56:20,000
literally is no better solution for the problem as specified in this

1268
00:56:20,000 --> 00:56:21,000
form actually.

1269
00:56:21,100 --> 00:56:23,900
And there's all this is continuing between, okay?

1270
00:56:24,000 --> 00:56:26,000
So thank compiler in that sense, got it.

1271
00:56:26,600 --> 00:56:28,700
Okay, sorry, so control shoe anyway.

1272
00:56:28,700 --> 00:56:29,800
So bit packing.

1273
00:56:29,900 --> 00:56:30,400
You back.

1274
00:56:30,400 --> 00:56:30,700
Okay.

1275
00:56:31,700 --> 00:56:33,500
Charles was looking at things from how he was.

1276
00:56:33,600 --> 00:56:35,300
Yeah, absolutely so much for the.

1277
00:56:35,500 --> 00:56:38,700
So you have these, you know that lumpiness, then you have Huffman,

1278
00:56:38,700 --> 00:56:42,000
which is now pushing bits together, which is still lumpy but less

1279
00:56:42,000 --> 00:56:44,800
lumpy and then you have arithmetic, which is partially bit eating, but

1280
00:56:44,900 --> 00:56:47,100
there's a spectrum of like, how this stuff stored.

1281
00:56:47,100 --> 00:56:51,100
Anyway, in the wrong woman Roberts lumpiness in the mountainous scale.

1282
00:56:51,100 --> 00:56:51,400
Yes.

1283
00:56:51,900 --> 00:56:58,800
So so one of our encoders operates on B and and

1284
00:57:00,000 --> 00:57:06,500
It's very lumpy and it was in January where Charles was like just came

1285
00:57:06,500 --> 00:57:09,400
back and said, hey I'm getting a lot more compression, I'm a lot

1286
00:57:09,400 --> 00:57:12,500
faster and it was just changing the way he thought about the par.

1287
00:57:12,500 --> 00:57:16,300
So there's okay and we think there is in trouble specific things.

1288
00:57:16,300 --> 00:57:19,500
There's are there but this by the way, good moment to introduce what a

1289
00:57:19,500 --> 00:57:20,100
parcel is.

1290
00:57:20,200 --> 00:57:23,600
Yeah, like this LV thing like LZ is just literally about looking for

1291
00:57:23,600 --> 00:57:24,200
string matches.

1292
00:57:24,200 --> 00:57:27,600
Like you look like, oh, I have this string of whatever 5 b, and I

1293
00:57:27,600 --> 00:57:29,600
already saw that early and you just coded

1294
00:57:30,000 --> 00:57:33,400
Reference to where that might be just the position or it's usually an

1295
00:57:33,400 --> 00:57:34,500
offset from the current position.

1296
00:57:34,500 --> 00:57:38,100
So like whatever 4 KB back I saw this, yes, or you have more

1297
00:57:38,100 --> 00:57:41,000
sophisticated thing where like maybe the decoder keeps track of next,

1298
00:57:41,000 --> 00:57:43,000
plus a dictionary like this other ways to coat that?

1299
00:57:43,000 --> 00:57:44,100
Yeah, that's the basic idea.

1300
00:57:44,100 --> 00:57:45,500
So this little parsley.

1301
00:57:45,500 --> 00:57:45,600
Yes.

1302
00:57:45,600 --> 00:57:50,100
Was like, if you have say the work, the in English text, you've seen

1303
00:57:50,100 --> 00:57:54,300
that work more than once in a document of any size like this, lots of

1304
00:57:54,300 --> 00:57:57,600
possible ways to encode the word, the, with a back reference, right?

1305
00:57:57,900 --> 00:57:59,900
And these have different

1306
00:58:00,000 --> 00:58:00,400
Right?

1307
00:58:00,500 --> 00:58:03,700
If you use the one that was in the sentence sentence, right?

1308
00:58:03,700 --> 00:58:08,600
Before versus the one that you saw, like five Wikipedia Pages back.

1309
00:58:08,600 --> 00:58:11,800
Yes, like, they're a different distance from you.

1310
00:58:11,800 --> 00:58:15,200
And the short distances usually make shorter code.

1311
00:58:15,900 --> 00:58:19,500
So you have multiple ways of expressing the exact same data that have

1312
00:58:19,500 --> 00:58:25,000
different costs this LZ Parts thing is about looking at all the

1313
00:58:25,000 --> 00:58:29,200
variance, you have of saying the same thing and trying to choose the

1314
00:58:29,200 --> 00:58:29,800
option

1315
00:58:29,900 --> 00:58:31,100
That is best.

1316
00:58:31,300 --> 00:58:35,500
I, so there's different ways of thinking coding this thing and like,

1317
00:58:36,000 --> 00:58:40,400
oh, like, if I do this, like, if I include this reference to the here,

1318
00:58:40,600 --> 00:58:45,700
like it's just, the three letters, th e, but the word that I'm

1319
00:58:45,700 --> 00:58:46,800
actually trying to encode here.

1320
00:58:46,800 --> 00:58:48,000
So we're thespian.

1321
00:58:48,200 --> 00:58:53,300
I said, like thespian we had like a bit while ago but like it's a much

1322
00:58:53,300 --> 00:58:54,200
longer match.

1323
00:58:54,300 --> 00:58:58,200
Like even though the three letters I see here I could do immediately

1324
00:58:58,600 --> 00:58:59,800
if I just write a song.

1325
00:59:00,000 --> 00:59:04,100
Longer law, offset and like, look a bit further ago, I can quit a lot

1326
00:59:04,100 --> 00:59:05,400
more letters and it's worthwhile.

1327
00:59:05,400 --> 00:59:05,700
I see.

1328
00:59:05,700 --> 00:59:08,400
So it's all about looking at these different ways of encoding, the

1329
00:59:08,400 --> 00:59:11,500
same thing, and trying to decide which option you want to take.

1330
00:59:11,500 --> 00:59:16,100
So the free is not just for then, not just for size, which is usually

1331
00:59:16,100 --> 00:59:16,400
what you do.

1332
00:59:16,400 --> 00:59:20,200
But you might, you might have two things that even you have two

1333
00:59:20,200 --> 00:59:24,200
choices that are the same size and encode it, but one might decode

1334
00:59:24,200 --> 00:59:27,600
with faster because like, oh, it's aligned or it's right, or it's

1335
00:59:27,600 --> 00:59:29,200
close or it's, you did that.

1336
00:59:29,200 --> 00:59:29,800
So there's a lot.

1337
00:59:29,900 --> 00:59:31,300
Lot of hard problems there.

1338
00:59:31,300 --> 00:59:32,100
So sign that is right there.

1339
00:59:32,100 --> 00:59:33,900
I think there's a lot of air in Parsons.

1340
00:59:33,900 --> 00:59:36,600
Like, I think people will - like, if you're looking at it from a

1341
00:59:36,600 --> 00:59:39,900
statistical modeling point of view, the fact that you have multiple

1342
00:59:39,900 --> 00:59:42,100
ways to say the same thing, it's just bad.

1343
00:59:42,300 --> 00:59:42,800
It's a bug.

1344
00:59:43,700 --> 00:59:44,000
Okay?

1345
00:59:44,000 --> 00:59:46,700
From that point of view is like, you shouldn't be like, right?

1346
00:59:46,700 --> 00:59:50,600
That just means that the probability for these letters being phe

1347
00:59:50,600 --> 00:59:52,100
should be higher or lower than it.

1348
00:59:52,100 --> 00:59:54,500
Currently is like the fact that you have multiple ways of saying, that

1349
00:59:54,500 --> 00:59:56,400
means that you're under estimating the probability.

1350
00:59:56,500 --> 00:59:57,400
If you did that, right?

1351
00:59:57,400 --> 00:59:59,800
That wouldn't be the case if would be baked into the model, right?

1352
01:00:01,300 --> 01:00:01,700
I'm sorry.

1353
01:00:01,800 --> 01:00:05,700
So I feel like that's one of those things that when you set it, I'm

1354
01:00:05,700 --> 01:00:10,900
like, yes but then if I think about it I'm like I am not actually

1355
01:00:10,900 --> 01:00:14,200
prepared to re-explain that to anyone because it's a little slippery,

1356
01:00:14,200 --> 01:00:14,400
right?

1357
01:00:14,400 --> 01:00:17,800
Because it's like okay what do you mean by getting the probabilities?

1358
01:00:17,800 --> 01:00:17,900
Right?

1359
01:00:17,900 --> 01:00:20,000
Because in LCD, it's a dictionary thing.

1360
01:00:20,000 --> 01:00:23,700
So you're saying that that just inherently cant encode, this concept

1361
01:00:24,100 --> 01:00:24,500
correctly.

1362
01:00:24,500 --> 01:00:27,500
The dictionary thing is like it's a constraint thing and like the fact

1363
01:00:27,500 --> 01:00:30,100
that there's multiple possible and Coatings for the same thing,

1364
01:00:30,500 --> 01:00:34,900
If you look at it as a Markov model, if you do a full-on statistical

1365
01:00:34,900 --> 01:00:38,300
modeling at each step, I'm going to Crunch the numbers that get the

1366
01:00:38,300 --> 01:00:41,000
Eggheads to figure out what the exact probability of the next letter

1367
01:00:41,000 --> 01:00:41,700
is okay.

1368
01:00:41,800 --> 01:00:43,100
I like encode that properly.

1369
01:00:44,500 --> 01:00:47,500
If you were to do that, this ambiguity would not exist.

1370
01:00:47,500 --> 01:00:48,200
You have the model.

1371
01:00:48,200 --> 01:00:51,200
The model says, this is a prediction and, like, you would work with

1372
01:00:51,200 --> 01:00:52,100
that, okay?

1373
01:00:52,200 --> 01:00:53,100
But thank you.

1374
01:00:53,500 --> 01:00:55,300
Why would they be multiple ways of saying the same thing?

1375
01:00:55,300 --> 01:00:56,600
That's inherently wasteful.

1376
01:00:56,600 --> 01:00:59,600
If you think about it, in terms of like, going back to the way

1377
01:00:59,600 --> 01:01:00,000
beginning,

1378
01:01:00,200 --> 01:01:00,300
Why?

1379
01:01:00,300 --> 01:01:04,500
Yes, you have like, these things of list of things you can say and

1380
01:01:04,500 --> 01:01:08,700
you're mapping these to a different set like having two things in this

1381
01:01:08,700 --> 01:01:12,300
set in the smaller set that say the same thing means says really

1382
01:01:12,300 --> 01:01:15,400
wasted B, because these two things expand to the same thing.

1383
01:01:15,400 --> 01:01:17,800
So that's a redundancy here that we could exploit right because there

1384
01:01:17,800 --> 01:01:19,600
were these are things that I could have encoded.

1385
01:01:19,600 --> 01:01:20,600
That both would have yielded.

1386
01:01:20,600 --> 01:01:24,600
The same result that just fundamentally means I wasted a bit exactly.

1387
01:01:24,600 --> 01:01:25,000
Okay.

1388
01:01:25,200 --> 01:01:28,800
So and with LZ like that's a lot of bits like this, a lot of

1389
01:01:28,800 --> 01:01:29,400
variability.

1390
01:01:29,400 --> 01:01:30,000
Same with MPEG,

1391
01:01:30,900 --> 01:01:34,000
MPEG has all these motion vectors and so on, these are not very well

1392
01:01:34,000 --> 01:01:35,100
specified at all.

1393
01:01:35,200 --> 01:01:39,300
There's even as inside a frame, there's ice.

1394
01:01:39,400 --> 01:01:44,400
I will say, billions, just be aware that this is wrong at the exponent

1395
01:01:44,400 --> 01:01:47,600
by, like, okay, factor of, like, it's like Brilliance is way too

1396
01:01:47,600 --> 01:01:48,300
little, okay?

1397
01:01:48,300 --> 01:01:51,500
There's some like, 10 to the 40 or so different options of coding, a

1398
01:01:51,500 --> 01:01:52,700
single and pack frame.

1399
01:01:52,700 --> 01:01:53,100
Okay?

1400
01:01:53,100 --> 01:01:57,400
Are meaningfully clothes and cost and so on, okay to what you were

1401
01:01:57,400 --> 01:01:59,000
that there's it's ridiculous, right?

1402
01:01:59,000 --> 01:01:59,700
This is there like

1403
01:02:00,100 --> 01:02:03,000
There's thousands of bites and I'd are tons of decisions.

1404
01:02:03,000 --> 01:02:06,000
You make that you really can't justify other than this is what the

1405
01:02:06,000 --> 01:02:07,600
heuristics told me, okay?

1406
01:02:07,600 --> 01:02:10,300
If you were to leave and get into the next frame, which might be

1407
01:02:10,300 --> 01:02:14,000
referencing that ones you might make a worse decision, a better

1408
01:02:14,000 --> 01:02:15,600
decision on this Frame, that hurts you in the law.

1409
01:02:15,600 --> 01:02:17,900
So, we get a time.

1410
01:02:18,000 --> 01:02:19,400
I just want to make sure I know where we are.

1411
01:02:20,000 --> 01:02:21,700
1050, 1050 Decay profile.

1412
01:02:22,000 --> 01:02:23,800
So, sorry, you just have a lot of.

1413
01:02:24,400 --> 01:02:26,900
Should we start talking faster and compress the spring.

1414
01:02:28,200 --> 01:02:29,600
I just wanted to give you guys because this

1415
01:02:30,100 --> 01:02:32,700
Need to make this even density, it ends at 11:15.

1416
01:02:32,700 --> 01:02:34,400
So I want to make sure you guys know you're kind of coming up here

1417
01:02:34,400 --> 01:02:36,900
last 25 minutes and I don't I don't want you to miss anything you

1418
01:02:36,900 --> 01:02:38,100
really want so no keep going.

1419
01:02:38,100 --> 01:02:42,500
Yeah so the whole thing there's all these codecs that in practice like

1420
01:02:42,500 --> 01:02:45,300
they have this massive amount of redundancy we can express the same

1421
01:02:45,300 --> 01:02:50,000
thing and lots of different ways and from a purely compression if you

1422
01:02:50,000 --> 01:02:53,400
care about the minimum size thing, that's a waste, actually turns out.

1423
01:02:53,400 --> 01:02:57,600
We actually like having that kind of redundancy for different reasons.

1424
01:02:57,600 --> 01:02:59,400
Okay, one reason is

1425
01:03:00,000 --> 01:03:04,800
That we might want to write a fast encoder that will never produce be

1426
01:03:04,800 --> 01:03:07,600
able to produce most encodings because like all that subtle subtle

1427
01:03:07,600 --> 01:03:09,200
stuff with a, the versus thespian.

1428
01:03:09,200 --> 01:03:11,700
It's of it just never even consider those just go back.

1429
01:03:11,700 --> 01:03:15,000
We just we just do the first thing we come up with just roll with it.

1430
01:03:15,000 --> 01:03:16,900
This is your example of the TV to live TV.

1431
01:03:16,900 --> 01:03:18,800
Compressor, it's like, look, we just need something that's gonna spit

1432
01:03:18,800 --> 01:03:19,000
out.

1433
01:03:19,000 --> 01:03:19,900
Exactly stream.

1434
01:03:20,000 --> 01:03:21,500
It's just gotta be close enough.

1435
01:03:21,600 --> 01:03:25,500
Exactly if your Facebook whatever, serving like, you press documents,

1436
01:03:25,700 --> 01:03:29,200
you don't care about the squeezing out the last five fights, right?

1437
01:03:29,300 --> 01:03:29,900
If that's gonna make

1438
01:03:30,000 --> 01:03:32,400
Mean you spent like another CPU second of time?

1439
01:03:32,400 --> 01:03:33,400
That's pretty ridiculous.

1440
01:03:33,400 --> 01:03:34,400
You don't care, okay?

1441
01:03:34,400 --> 01:03:37,700
But you would rather this endless fights than more, but you're not

1442
01:03:37,700 --> 01:03:39,900
willing to spend infinite amounts of CPU time on.

1443
01:03:39,900 --> 01:03:42,600
Okay fact, you're not even willing to spend a lot of CPU time.

1444
01:03:42,600 --> 01:03:45,000
Just like you have very limited budget.

1445
01:03:45,000 --> 01:03:50,600
You might have things like, oh, because the way I encode, these things

1446
01:03:50,600 --> 01:03:55,200
as kind of heuristic, I might want to have including is in there that

1447
01:03:55,200 --> 01:03:59,500
I'm never going to use ever, but are useful as stepping stones from

1448
01:04:00,000 --> 01:04:04,100
From a to c because that having that baby step in between, if I if I

1449
01:04:04,100 --> 01:04:07,600
can go from here to here to here and my optimization thing is kind of

1450
01:04:07,600 --> 01:04:10,900
local where it changes from A to B and then B to C.

1451
01:04:11,000 --> 01:04:13,000
And I would never try a to see directly.

1452
01:04:13,100 --> 01:04:16,000
It can be useful to have intermediate steps in that encoding.

1453
01:04:16,000 --> 01:04:19,000
The even though you're not going to use, make it easier to find the

1454
01:04:19,000 --> 01:04:21,500
things that you do want to use and you're talking about this from the

1455
01:04:21,500 --> 01:04:23,000
standpoint of the encoder.

1456
01:04:23,000 --> 01:04:26,400
Yeah, meaning the decoder can't even read this intermediate

1457
01:04:26,400 --> 01:04:27,300
conceptualization.

1458
01:04:27,300 --> 01:04:29,800
I might be using might be a thing that the decoder can

1459
01:04:29,900 --> 01:04:33,200
Repost like if you look at it like on the whole we never ending.

1460
01:04:33,200 --> 01:04:36,300
He was never a good idea, neither care about this thing or this thing.

1461
01:04:36,300 --> 01:04:37,600
And in one case a is the best.

1462
01:04:37,600 --> 01:04:41,000
In one Cassius, the best and be never really make sense, but having

1463
01:04:41,000 --> 01:04:45,600
that thing in there as a potential thing, that the decoder engine just

1464
01:04:45,600 --> 01:04:49,000
getting from A to B that if you have this optimization that tries to

1465
01:04:49,000 --> 01:04:50,000
do incremental changes.

1466
01:04:50,000 --> 01:04:50,900
Yeah, be helpful.

1467
01:04:50,900 --> 01:04:52,300
Have having that in there very soon.

1468
01:04:52,300 --> 01:04:55,000
So what you're saying is essentially getting back to sort of the

1469
01:04:55,500 --> 01:04:58,300
optimal parse concept which if I could restate that because I think I

1470
01:04:58,800 --> 01:04:59,200
you guys

1471
01:05:00,000 --> 01:05:01,000
Sort of summed, it up there.

1472
01:05:01,100 --> 01:05:02,900
Yeah, we just I have a decoder.

1473
01:05:03,000 --> 01:05:04,300
It's got a specific spec.

1474
01:05:04,300 --> 01:05:08,700
I've got an encoder, and I want to basically produce the best possible

1475
01:05:09,300 --> 01:05:13,400
thing for the decoder, given some Metric, which could be, you know,

1476
01:05:13,400 --> 01:05:13,900
speed.

1477
01:05:13,900 --> 01:05:15,600
It could be size, it could be a combination of two.

1478
01:05:15,600 --> 01:05:21,500
Could be anything, who knows what the optimal parse is the thing that

1479
01:05:21,500 --> 01:05:25,600
processes, the input data that, you know, picks those those choices

1480
01:05:25,600 --> 01:05:29,800
for the decoder among equivalent options that, that yields that

1481
01:05:29,900 --> 01:05:30,900
Best possible result.

1482
01:05:30,900 --> 01:05:33,300
And that often is a said, some incremental procedure.

1483
01:05:33,300 --> 01:05:36,100
So you start with some fast and coding, you just use it fast.

1484
01:05:36,100 --> 01:05:38,500
Encoder to get an initial estimate of salt bake.

1485
01:05:38,500 --> 01:05:39,800
This should be yes.

1486
01:05:39,800 --> 01:05:41,900
And then you try to make local changes of TECO.

1487
01:05:41,900 --> 01:05:46,200
If I do this and this and this I get from here to here with less cost

1488
01:05:46,200 --> 01:05:47,000
and that's worthwhile.

1489
01:05:47,000 --> 01:05:49,700
So it's like a permutation based search where we're sort of saying,

1490
01:05:49,700 --> 01:05:51,300
okay, we know this includes the frame.

1491
01:05:51,400 --> 01:05:53,000
Let's see what happens when I try this.

1492
01:05:53,000 --> 01:05:55,300
Now, I see that it got smaller or right.

1493
01:05:55,300 --> 01:05:55,500
Yeah.

1494
01:05:55,500 --> 01:05:57,200
And so that, you know, could you could do that.

1495
01:05:57,200 --> 01:05:59,800
I think the text, for example, I could start changing things in the

1496
01:06:00,000 --> 01:06:01,400
Stream and as it goes.

1497
01:06:01,400 --> 01:06:01,700
Yep.

1498
01:06:02,400 --> 01:06:04,200
Is it fair to characterize the thing?

1499
01:06:04,200 --> 01:06:09,200
You said earlier as being, that there is no such thing as a search for

1500
01:06:09,200 --> 01:06:10,200
an optimal parse.

1501
01:06:10,400 --> 01:06:13,300
If your compressor was perfect in the way you described before

1502
01:06:13,300 --> 01:06:13,600
meeting.

1503
01:06:13,600 --> 01:06:14,000
Yes.

1504
01:06:14,300 --> 01:06:17,300
Just there would only be one way to encode the data because we've

1505
01:06:17,300 --> 01:06:20,900
squeezed every last pot probability piece out of it.

1506
01:06:21,000 --> 01:06:22,700
So now the encoder is just direct.

1507
01:06:22,700 --> 01:06:24,000
It just takes a thing and it goes up.

1508
01:06:24,000 --> 01:06:24,800
There's only one way to encode.

1509
01:06:24,800 --> 01:06:28,000
This only one code, this, the really high end, but that never happens.

1510
01:06:28,000 --> 01:06:29,900
The really high-end statistical compressor.

1511
01:06:30,000 --> 01:06:30,800
Exactly like that.

1512
01:06:30,800 --> 01:06:33,200
Okay, they have a very complicated model that running.

1513
01:06:33,200 --> 01:06:36,100
The decoder has to do almost exactly the same work as the encoder

1514
01:06:36,100 --> 01:06:39,300
because they stay in shaping the same time there where something like

1515
01:06:39,300 --> 01:06:43,500
LZ like, you have to look like the LZ encoder has to look for all the

1516
01:06:43,500 --> 01:06:46,200
possible string matches has to decide which the best one is the

1517
01:06:46,200 --> 01:06:49,500
decoder says, like Okapi string from there this, many bytes, okay,

1518
01:06:49,500 --> 01:06:50,000
Jesse.

1519
01:06:50,000 --> 01:06:54,900
Yes, like LZ is an example for a very so called a symmetric scheme ice

1520
01:06:54,900 --> 01:06:58,400
which means that the decoder has very different workload from the

1521
01:06:58,400 --> 01:06:58,900
encoder.

1522
01:06:59,000 --> 01:06:59,900
So the encoder

1523
01:07:00,000 --> 01:07:03,500
All the string matching, it has to look at the pars has to do all this

1524
01:07:03,500 --> 01:07:06,400
trade-offs that makes us figure out what the red Huffman table to use

1525
01:07:06,400 --> 01:07:08,900
this way to put the split Point, blah, blah, blah, all these kinds of

1526
01:07:08,900 --> 01:07:09,300
things.

1527
01:07:09,500 --> 01:07:11,700
The secret of the says that, oh, here's the supplement table go.

1528
01:07:12,100 --> 01:07:13,800
Oh, copy that many bytes in size.

1529
01:07:14,000 --> 01:07:20,000
So, like, I see something like Zip takes, whatever couple is usually

1530
01:07:20,100 --> 01:07:24,300
something like five times or so faster to decode than it is to encode.

1531
01:07:24,300 --> 01:07:24,700
Yes.

1532
01:07:25,000 --> 01:07:28,100
And that can become arbitrarily large Reef.

1533
01:07:28,100 --> 01:07:29,600
You just let it keep your problem then.

1534
01:07:29,900 --> 01:07:32,800
If you don't use the lip that Google has this compressor.

1535
01:07:32,800 --> 01:07:37,400
For example, for the zip format called softly, okay, that's a heavily

1536
01:07:37,400 --> 01:07:38,800
optimizing zip, compressor.

1537
01:07:38,900 --> 01:07:42,400
Yes, that can take hours to compress it just tries.

1538
01:07:42,500 --> 01:07:46,300
It just tries lots of things that you can dial, how long you want to

1539
01:07:46,300 --> 01:07:48,000
wait and so on, but that's so stuff.

1540
01:07:48,000 --> 01:07:48,600
Like okay.

1541
01:07:48,600 --> 01:07:52,200
They have say the style sheet that they're serving for the Google main

1542
01:07:52,200 --> 01:07:52,800
homepage.

1543
01:07:52,900 --> 01:07:53,400
Yes.

1544
01:07:53,500 --> 01:07:56,700
If they gonna serve it to a billion people a day, right?

1545
01:07:56,700 --> 01:07:58,100
Like saving that one bite.

1546
01:07:58,100 --> 01:07:59,300
Might be worth it, right?

1547
01:07:59,400 --> 01:07:59,800
It's a thing.

1548
01:08:00,100 --> 01:08:03,000
Anything, they don't change that all that off, right?

1549
01:08:03,000 --> 01:08:05,100
Like letting that run for half an hour.

1550
01:08:05,100 --> 01:08:08,300
If they do change the mass, the style sheet or the JavaScript is not a

1551
01:08:08,300 --> 01:08:13,100
big deal for them actually but the 10 B they save doing so I mean it

1552
01:08:13,100 --> 01:08:14,200
just all adds up.

1553
01:08:14,500 --> 01:08:18,100
So would it be fair to say that something like an arithmetic encoder

1554
01:08:18,200 --> 01:08:18,600
right?

1555
01:08:18,600 --> 01:08:24,399
Which is sort of one of the statistical coder back-end ideas is would

1556
01:08:24,399 --> 01:08:25,200
it be fair to say that?

1557
01:08:25,200 --> 01:08:29,800
That is a like compression scheme that has in some sense been

1558
01:08:29,899 --> 01:08:30,800
Finished meaning.

1559
01:08:30,800 --> 01:08:33,300
We have now gotten to the point where for the definition of the

1560
01:08:33,300 --> 01:08:36,899
problem as we suspect it for this codec, we do not need to parse the

1561
01:08:36,899 --> 01:08:40,800
data because it is exactly perfect for the entropy that it's encoding.

1562
01:08:40,800 --> 01:08:41,100
Like it.

1563
01:08:41,100 --> 01:08:44,399
There is nothing left to bring out of its model or is that an unfair

1564
01:08:44,399 --> 01:08:44,899
characterization?

1565
01:08:44,899 --> 01:08:48,300
The arithmetic coding and like all the school things are just like you

1566
01:08:48,300 --> 01:08:50,600
have, these are very mathematical things.

1567
01:08:50,600 --> 01:08:53,200
Yes, is transformed in this, does that thing there's no degree of

1568
01:08:53,200 --> 01:08:56,200
Freedom there, right, there actually is tiny bit of freedom and

1569
01:08:56,200 --> 01:08:57,100
arithmetic coding.

1570
01:08:57,200 --> 01:08:57,600
Okay.

1571
01:08:58,300 --> 01:08:59,800
The way we usually a medical

1572
01:09:00,000 --> 01:09:04,399
Because, okay, there's you have to want to know if you do this.

1573
01:09:04,700 --> 01:09:08,800
Mathematical point of view, you just do this with exact big integer

1574
01:09:08,800 --> 01:09:10,800
arithmetic like, at some point.

1575
01:09:10,800 --> 01:09:15,700
You just deal with 2048 bit integers, Behavior, life, and practice.

1576
01:09:16,000 --> 01:09:18,899
We don't do that because that's horrid and slow.

1577
01:09:18,899 --> 01:09:19,300
Yes.

1578
01:09:19,800 --> 01:09:23,000
So, practice, we just say that gay limit the amount of numbers, we

1579
01:09:23,000 --> 01:09:26,399
deal with, to, like, 32 bits, or 64, bits or less, I see.

1580
01:09:26,399 --> 01:09:27,100
And that means that.

1581
01:09:27,100 --> 01:09:29,800
In some cases you'd like, we run out of precision.

1582
01:09:30,000 --> 01:09:32,800
And in that case, we just agree on a protocol for what the decoder

1583
01:09:32,800 --> 01:09:33,700
encoder do.

1584
01:09:33,899 --> 01:09:37,600
In that case, we just truncate the Precision I see that point you lose

1585
01:09:37,600 --> 01:09:41,800
a few bits and you have again like possible and Coatings that this

1586
01:09:41,800 --> 01:09:45,100
thing will never produce ice because you limited the Precision but

1587
01:09:45,100 --> 01:09:47,100
that's like very very small awesome.

1588
01:09:47,100 --> 01:09:47,300
Yeah.

1589
01:09:47,800 --> 01:09:48,300
Okay.

1590
01:09:48,899 --> 01:09:52,800
So so anyway, that the whole ART versus science a whole point of that

1591
01:09:52,800 --> 01:09:59,000
was that even among our own codex that we wrote, there are new ways to

1592
01:09:59,000 --> 01:09:59,800
him too.

1593
01:10:00,000 --> 01:10:01,600
Dump out stuff within that.

1594
01:10:01,600 --> 01:10:03,900
And that's kind of the that.

1595
01:10:03,900 --> 01:10:05,500
How long can you spend on this?

1596
01:10:05,500 --> 01:10:06,700
Do you discover these things?

1597
01:10:06,700 --> 01:10:09,800
And that's the thing that as a beginner isn't something you think

1598
01:10:09,800 --> 01:10:11,900
about you're just trying to get it working right?

1599
01:10:11,900 --> 01:10:14,700
Get to and you might iterate on trying to make something smaller.

1600
01:10:14,700 --> 01:10:18,200
But not even thinking about these big higher-order more complex things

1601
01:10:18,200 --> 01:10:25,000
that like hey the parse is like a huge part of your huge magic part

1602
01:10:25,000 --> 01:10:27,400
that happens that you kind of take and leave over yujin.

1603
01:10:27,400 --> 01:10:29,800
Since it is in general, it sounds like going to be sort of

1604
01:10:29,900 --> 01:10:32,400
Of a large search, kind of a problem.

1605
01:10:32,400 --> 01:10:34,600
Those are always kind of heuristically.

1606
01:10:34,600 --> 01:10:34,900
Yep.

1607
01:10:34,900 --> 01:10:36,000
Records of things intro.

1608
01:10:36,000 --> 01:10:39,900
And Charles says, like, I feel like there's, it's just an intuition.

1609
01:10:39,900 --> 01:10:42,400
I feel like there's this huge space and I feel like there's other

1610
01:10:42,400 --> 01:10:45,800
unexplored spaces, so they will find that someday.

1611
01:10:45,800 --> 01:10:46,200
All right?

1612
01:10:46,200 --> 01:10:48,900
Well, this will be better compression and a much higher cost for this

1613
01:10:48,900 --> 01:10:50,300
will be much faster with you.

1614
01:10:50,300 --> 01:10:52,300
All anyway, we do have some evidence for this.

1615
01:10:52,300 --> 01:10:54,100
Yeah, and that.

1616
01:10:55,900 --> 01:11:00,200
This is just an experiment like I accidentally nor less ran beginning

1617
01:11:00,200 --> 01:11:04,400
of the year, which was just like, oh, I looked at the file.

1618
01:11:06,200 --> 01:11:09,000
I was like, changed something in the encoding and suddenly the fog of

1619
01:11:09,000 --> 01:11:11,400
mass for the bigger as like what happened?

1620
01:11:11,900 --> 01:11:15,300
It's like, oh and then it prepend a single 0, B, in front of the file.

1621
01:11:15,300 --> 01:11:16,400
Now, it's 4K smaller.

1622
01:11:17,000 --> 01:11:17,600
What the hell?

1623
01:11:17,600 --> 01:11:18,000
Okay.

1624
01:11:20,100 --> 01:11:24,200
There's all kinds of like this, okay, this must be horrible book,

1625
01:11:24,200 --> 01:11:26,800
whatever that tried this with a couple other comparisons to have the

1626
01:11:26,800 --> 01:11:27,500
same effect.

1627
01:11:28,100 --> 01:11:28,600
Okay?

1628
01:11:28,600 --> 01:11:31,900
Always in the same direction mind but you add like a single button

1629
01:11:31,900 --> 01:11:34,500
front of the data stream is suddenly everything changes and it's like

1630
01:11:34,500 --> 01:11:37,400
Mass swings like 10, 20 KB, whatever, okay.

1631
01:11:37,400 --> 01:11:39,800
It's like huge stuff like for a one megabyte file is fairly

1632
01:11:39,800 --> 01:11:40,200
significant.

1633
01:11:40,200 --> 01:11:40,400
Yeah.

1634
01:11:40,400 --> 01:11:43,100
Right in compression terms like yes that's huge.

1635
01:11:43,100 --> 01:11:44,700
We would kill for like 20 kids.

1636
01:11:44,700 --> 01:11:45,000
Yes.

1637
01:11:45,000 --> 01:11:45,700
Yes certainly.

1638
01:11:45,800 --> 01:11:49,000
Oh, we made the input file bigger and it got semi and compression.

1639
01:11:49,000 --> 01:11:49,700
Impersonate, somebody

1640
01:11:49,800 --> 01:11:51,100
He space there that.

1641
01:11:51,100 --> 01:11:53,700
Yeah, a compression person is somebody who thinks that 20 bits has a

1642
01:11:53,700 --> 01:11:54,300
lot of data.

1643
01:11:54,300 --> 01:11:56,600
Yeah, it's a definition of.

1644
01:11:56,600 --> 01:11:59,800
Yeah, pretty much so after it's somebody

1645
01:12:00,000 --> 01:12:03,700
Thinks that perpetual motion is going to happen so that's those are

1646
01:12:03,700 --> 01:12:05,000
the compressions cranks, okay.

1647
01:12:05,700 --> 01:12:06,300
All right.

1648
01:12:06,500 --> 01:12:11,000
But you have that kind of thing and they that's just an artifact of

1649
01:12:12,000 --> 01:12:15,100
there, being all kinds of weird, State, and feedback loops, and these

1650
01:12:15,100 --> 01:12:15,700
encoders.

1651
01:12:16,400 --> 01:12:19,700
So yeah, just turns out I having that slightly different seed of

1652
01:12:19,700 --> 01:12:20,600
having that 10.

1653
01:12:20,600 --> 01:12:24,100
But they're just means that the starting conditions are slightly

1654
01:12:24,100 --> 01:12:26,200
different and it's weird cortical system.

1655
01:12:26,200 --> 01:12:27,500
There's feedback in there.

1656
01:12:27,800 --> 01:12:29,900
It just means that the search ends up in a very different

1657
01:12:30,000 --> 01:12:30,400
Place.

1658
01:12:30,700 --> 01:12:31,100
Yes.

1659
01:12:31,400 --> 01:12:34,900
And just changing that initial condition.

1660
01:12:34,900 --> 01:12:38,800
A tiny bit means you find very different solutions that are better or

1661
01:12:38,800 --> 01:12:39,100
worse.

1662
01:12:39,100 --> 01:12:39,500
Yes.

1663
01:12:40,200 --> 01:12:44,600
So it's very much unstable that since it sometimes, these searches do,

1664
01:12:44,600 --> 01:12:49,400
have a tendency to get stuck in local Maxima and yep, you can just

1665
01:12:49,400 --> 01:12:53,000
happen to do something that kicks it out of that and now all of a

1666
01:12:53,000 --> 01:12:54,400
sudden, you found a much better thing.

1667
01:12:54,400 --> 01:12:58,000
But there's a lot of really do not clear how to actually design it

1668
01:12:58,000 --> 01:12:59,800
warm that up, find that other than

1669
01:13:00,000 --> 01:13:03,500
You said designing very long running ones that do the standard kind of

1670
01:13:03,500 --> 01:13:05,700
like, you know, searching lots of different spaces and all.

1671
01:13:05,700 --> 01:13:09,300
But I mean, just not seeing that kind of stuff happen, but both you

1672
01:13:09,300 --> 01:13:10,600
and everybody else is compressors.

1673
01:13:10,600 --> 01:13:16,400
Just means like, there's no question that there is like a lot of air

1674
01:13:16,400 --> 01:13:20,100
left for compression values of a lot of are like we can get a whole

1675
01:13:20,100 --> 01:13:20,700
person.

1676
01:13:20,700 --> 01:13:21,100
Yeah.

1677
01:13:22,900 --> 01:13:23,700
Not a joke.

1678
01:13:23,800 --> 01:13:25,200
So I think we're getting closer to.

1679
01:13:25,300 --> 01:13:26,400
There's another interesting part.

1680
01:13:26,400 --> 01:13:27,000
Just oh yeah.

1681
01:13:27,000 --> 01:13:27,800
But they're getting pussy.

1682
01:13:27,800 --> 01:13:29,800
And just want to say let's let's uh, do anything that you

1683
01:13:29,900 --> 01:13:30,700
Guys, really want with this.

1684
01:13:30,700 --> 01:13:32,200
It just a yes really quickly.

1685
01:13:32,200 --> 01:13:35,800
I mean the funny thing about this is since the encoders for these

1686
01:13:35,800 --> 01:13:40,100
systems are very complicated and now they're getting more so all the

1687
01:13:40,100 --> 01:13:46,100
time and since the rule is you generate a file that can decode to the

1688
01:13:46,100 --> 01:13:49,300
same file that was given you an input, you can have bugs in there and

1689
01:13:49,300 --> 01:13:53,600
Charles's had bugs in there that were there for a long time because

1690
01:13:53,600 --> 01:13:55,300
they generated correct files.

1691
01:13:55,300 --> 01:13:55,500
Right?

1692
01:13:55,500 --> 01:13:59,600
Right and and it generated an okay Parts not the best parts and then

1693
01:13:59,600 --> 01:13:59,800
later on.

1694
01:14:00,000 --> 01:14:01,000
You find oh shit.

1695
01:14:01,000 --> 01:14:04,900
That level that waiting was wrong or this decision was wrong or

1696
01:14:04,900 --> 01:14:06,700
whatever, but it still works.

1697
01:14:06,700 --> 01:14:08,700
So even aside from the air in the car.

1698
01:14:08,700 --> 01:14:12,600
So you also have like these are incredibly complex systems and like

1699
01:14:12,600 --> 01:14:15,100
it's there's bugs and everything.

1700
01:14:15,100 --> 01:14:20,000
So do you generally I mean I guess it is it just the case that most of

1701
01:14:20,000 --> 01:14:23,700
the data you work with is simply too large to ever try to run.

1702
01:14:23,700 --> 01:14:27,200
Exhaustive searches on anyway, so you literally have nothing to

1703
01:14:27,200 --> 01:14:29,800
compare to you just run the thing.

1704
01:14:29,900 --> 01:14:33,300
It gets the size, it gets and you just really try to look at the total

1705
01:14:33,300 --> 01:14:33,600
size.

1706
01:14:33,600 --> 01:14:34,100
Talk about it.

1707
01:14:34,100 --> 01:14:34,400
Okay.

1708
01:14:34,400 --> 01:14:36,100
That's a magic way to like yeah.

1709
01:14:36,100 --> 01:14:38,200
But how it sounds like you never do.

1710
01:14:38,300 --> 01:14:39,800
You do we ever or do you?

1711
01:14:40,100 --> 01:14:42,000
We have like a noodle there.

1712
01:14:42,000 --> 01:14:46,200
Certain compression levels that exists that we don't even document

1713
01:14:46,800 --> 01:14:49,700
that because they're just too slow to use.

1714
01:14:49,900 --> 01:14:53,100
All right nobody wants to wait that long for like fractal later the

1715
01:14:53,100 --> 01:14:57,200
day exists and some of the encoding and some of the quarters and they

1716
01:14:57,200 --> 01:14:59,800
are literally just there basically as

1717
01:15:00,100 --> 01:15:01,100
Was for us.

1718
01:15:01,100 --> 01:15:04,400
So there is a sort of like, okay let's double-check Ken the like if

1719
01:15:04,400 --> 01:15:07,000
you know really long running one, does it get any better if it does?

1720
01:15:07,000 --> 01:15:08,800
It means maybe we could do a little better with your stick figure.

1721
01:15:08,800 --> 01:15:10,100
That kind thing to give you a little token.

1722
01:15:10,300 --> 01:15:15,300
That's like last year, Charles did a lot of work on one of the

1723
01:15:15,300 --> 01:15:21,400
compressors that was motivated by that are the things we actually ship

1724
01:15:21,400 --> 01:15:22,600
and tell people to use.

1725
01:15:24,800 --> 01:15:28,700
Had certain kinds of files where it was much worse than the way better

1726
01:15:28,700 --> 01:15:30,200
solution that we have lying around.

1727
01:15:30,300 --> 01:15:34,300
I see also ships but that we don't tell people to use and that because

1728
01:15:34,300 --> 01:15:35,700
it's just too slow to be practical.

1729
01:15:35,700 --> 01:15:38,400
I see because it runs at whatever 50 kilobits a second, right?

1730
01:15:38,400 --> 01:15:39,600
Nobody wants to wait that long.

1731
01:15:39,600 --> 01:15:40,000
Yes.

1732
01:15:41,200 --> 01:15:43,100
So we had that kind of thing.

1733
01:15:44,200 --> 01:15:48,400
We're just knew that there is a right way to do this, that will give

1734
01:15:48,400 --> 01:15:51,300
much better results typically yeah.

1735
01:15:51,900 --> 01:15:53,100
The only other thing, I don't know.

1736
01:15:53,100 --> 01:15:54,400
That might be fun to talk about.

1737
01:15:54,500 --> 01:15:57,000
Flee, depending on how much time is just talked about, kind of the

1738
01:15:57,000 --> 01:16:00,300
optimization of these modern decoders.

1739
01:16:00,300 --> 01:16:04,600
Because there's some interesting stuff there that I find fascinating.

1740
01:16:05,300 --> 01:16:06,600
Well, how much time do we have left?

1741
01:16:06,600 --> 01:16:07,700
And yeah, that's good question.

1742
01:16:08,100 --> 01:16:09,700
Just want to make sure minutes 10 minutes.

1743
01:16:09,900 --> 01:16:11,900
Alright, so yeah, ten minutes.

1744
01:16:11,900 --> 01:16:19,200
Okay, well so so one of the things it in and LZ compressor, you have

1745
01:16:19,200 --> 01:16:23,100
these very tight small Loops, they're very tiny or even a Huffman

1746
01:16:23,100 --> 01:16:24,300
decode, their very

1747
01:16:24,400 --> 01:16:28,500
'Well, stages, like there's four or five instructions and you can't

1748
01:16:28,500 --> 01:16:30,800
squeeze a lot of air out of four or five instructions.

1749
01:16:30,800 --> 01:16:34,800
You can go that you're already pretty tight, but in the modern stuff

1750
01:16:34,800 --> 01:16:38,800
that that Fabien and and Charles did they've done a bunch of things

1751
01:16:38,800 --> 01:16:45,100
that rely on really Advanced optimization techniques that are talked

1752
01:16:45,100 --> 01:16:48,900
about a lot of, like, exploiting how CPUs work nowadays, which is,

1753
01:16:49,100 --> 01:16:50,900
they aren't just running one instruction at a time.

1754
01:16:50,900 --> 01:16:53,500
They're doing a lot of wants and I could, you may want you want to

1755
01:16:53,500 --> 01:16:54,300
talk about like,

1756
01:16:54,500 --> 01:16:56,900
Streams of a half instruction level parallelism.

1757
01:16:56,900 --> 01:16:57,100
Yeah.

1758
01:16:57,300 --> 01:17:01,100
Yeah, the concept you think about a lot of parallelism but it's, you

1759
01:17:01,100 --> 01:17:05,700
know, there's that's four or five or six on a modern CPU and some CPUs

1760
01:17:05,700 --> 01:17:07,100
don't even have six cores.

1761
01:17:07,100 --> 01:17:10,800
So like there's a lot to explain in just instruction perilous so just

1762
01:17:10,800 --> 01:17:12,100
to make sure everyone knows what that is.

1763
01:17:12,100 --> 01:17:15,100
Because again like we don't do a lot of optimization on handmade hero.

1764
01:17:15,100 --> 01:17:18,200
Certainly not like any really aggressive stuff at this point.

1765
01:17:18,800 --> 01:17:21,600
So instruction level, parallelism, in fact why don't you guys if you

1766
01:17:21,600 --> 01:17:24,300
want to do it but basically just talking about hey a single

1767
01:17:24,400 --> 01:17:25,100
Of a CPU.

1768
01:17:25,100 --> 01:17:29,300
Just single-threaded has a number of sort of ports, it can use to

1769
01:17:29,300 --> 01:17:34,100
execute things and if you fill all of these ports you know very

1770
01:17:34,100 --> 01:17:37,900
efficiently you know with a little leak and it's not possible.

1771
01:17:37,900 --> 01:17:38,100
Yeah.

1772
01:17:38,200 --> 01:17:43,700
If you fill a good percentage of these ports on every cycle, then you

1773
01:17:43,700 --> 01:17:46,600
are going to get a lot more out of even the single threaded code.

1774
01:17:46,700 --> 01:17:50,300
If you are constantly waiting on one particular portfolio, is that

1775
01:17:50,300 --> 01:17:51,200
that's what we're talking about here.

1776
01:17:51,200 --> 01:17:51,500
Okay?

1777
01:17:51,500 --> 01:17:54,300
And what usually blocks these ports from being filled is

1778
01:17:54,500 --> 01:17:58,100
like, you have us instruction steam, that's dependent on stuff that

1779
01:17:58,100 --> 01:17:59,800
happens before, so it can't

1780
01:18:00,000 --> 01:18:01,100
Do the next instruction.

1781
01:18:01,100 --> 01:18:03,000
Tell that retires the old one and then you're like, all right.

1782
01:18:03,000 --> 01:18:05,900
Well, these are, but so because these are out-of-order processors were

1783
01:18:05,900 --> 01:18:06,500
talking out here.

1784
01:18:06,500 --> 01:18:10,400
So they are looking ahead to find something to execute, but when it

1785
01:18:10,400 --> 01:18:13,100
tries to look ahead, it sees all of the instructions in the window,

1786
01:18:13,300 --> 01:18:16,200
all depend on something that is currently blocked and then all of your

1787
01:18:16,200 --> 01:18:20,000
ports stops as you can imagine with compressed with a with stream, you

1788
01:18:20,000 --> 01:18:22,200
can't decode the next thing till you got this one.

1789
01:18:22,300 --> 01:18:22,600
Awesome.

1790
01:18:22,600 --> 01:18:25,500
So the basic thing is like, if you have running a regular Loop,

1791
01:18:25,500 --> 01:18:29,600
whatever for I equals 1 and I 2 n.

1792
01:18:32,800 --> 01:18:33,600
They just kind of thing.

1793
01:18:33,800 --> 01:18:35,200
We're so gonna run out of room.

1794
01:18:36,100 --> 01:18:37,800
I like that.

1795
01:18:37,800 --> 01:18:42,600
You put the bracket on the in the thing with XVI.

1796
01:18:42,600 --> 01:18:42,900
Right?

1797
01:18:42,900 --> 01:18:43,300
Yeah.

1798
01:18:43,400 --> 01:18:49,700
And this does a thing the whole point of this in out of order

1799
01:18:49,700 --> 01:18:54,700
processor like these different implications of do things like you can

1800
01:18:54,700 --> 01:19:00,700
start do thing of x0 but the process just looks ahead like, oh I'm

1801
01:19:00,700 --> 01:19:00,800
going.

1802
01:19:00,900 --> 01:19:05,200
This, probably with X1 X2, X3 X4, just keep going ahead.

1803
01:19:05,500 --> 01:19:07,200
Like do thing like

1804
01:19:11,600 --> 01:19:14,800
as maybe this thing where they have to do a, then I have to do be

1805
01:19:16,100 --> 01:19:17,500
And then I have to do see it, right?

1806
01:19:18,800 --> 01:19:20,500
And these all take some amount of time.

1807
01:19:20,500 --> 01:19:20,900
Okay.

1808
01:19:21,100 --> 01:19:24,900
I like this might be in completely serial execution, like oh, like

1809
01:19:24,900 --> 01:19:27,800
multiply this by three at to whatever don't care, something like this,

1810
01:19:27,800 --> 01:19:32,300
like some computation, the trick is like, in out of order processor.

1811
01:19:32,600 --> 01:19:34,700
Like if you have like this as 4, x 0,

1812
01:19:36,000 --> 01:19:39,600
I like this use some on resources that there's a lot of weight here.

1813
01:19:39,700 --> 01:19:40,200
Right?

1814
01:19:40,200 --> 01:19:40,600
Sure.

1815
01:19:40,700 --> 01:19:43,100
And then you can also do like, okay, for X of 1,

1816
01:19:44,400 --> 01:19:48,000
I can just start executing that, pretty much as soon as I see this

1817
01:19:48,000 --> 01:19:50,600
Loop the processor can go like, oh, I'm going to run this facts of one

1818
01:19:50,600 --> 01:19:51,100
as well.

1819
01:19:51,600 --> 01:19:54,800
At least the things that well that might be wrong, but it just forces

1820
01:19:54,800 --> 01:19:55,800
on ahead, right?

1821
01:19:55,800 --> 01:19:58,200
And it's like, okay, like this because the loop is large, that's

1822
01:19:58,200 --> 01:20:00,900
probably at least if you cared about the speed of it probably large.

1823
01:20:00,900 --> 01:20:04,400
So you're, you know, as I'd like and then like the next execution is

1824
01:20:04,400 --> 01:20:08,700
going to be like this, and like you have this chain again, ABC, like

1825
01:20:08,700 --> 01:20:09,800
that keeps going before.

1826
01:20:09,800 --> 01:20:13,800
This is even finished and then exercise to can also start

1827
01:20:14,800 --> 01:20:16,100
Whoops, this is terrible.

1828
01:20:20,300 --> 01:20:22,500
Before any of that is finished and so forth.

1829
01:20:22,700 --> 01:20:25,800
So like the you have this weird Cascade where they can all start going

1830
01:20:25,800 --> 01:20:30,500
in parallel because fundamentally this do thing here happens to be

1831
01:20:30,600 --> 01:20:34,900
some operation where there's no dependence between what happens for x0

1832
01:20:34,900 --> 01:20:36,300
X1 and X2, right?

1833
01:20:36,300 --> 01:20:38,800
These can all run in parallel and I do okay.

1834
01:20:39,900 --> 01:20:44,100
If the loop has that shape, the problem in most compressor compresses,

1835
01:20:44,100 --> 01:20:45,800
is that everything has this shape.

1836
01:20:46,900 --> 01:20:47,800
A then B then C.

1837
01:20:48,000 --> 01:20:48,400
Okay.

1838
01:20:48,500 --> 01:20:50,000
It's the entire way through had this.

1839
01:20:50,000 --> 01:20:52,500
Like if you don't really what you're saying is that see kind of Loops

1840
01:20:52,500 --> 01:20:55,500
back up to the next a if we exactly Arrow there.

1841
01:20:55,500 --> 01:20:56,000
Like, we have.

1842
01:20:56,000 --> 01:20:57,100
So it's all just one big days.

1843
01:20:57,100 --> 01:20:57,700
Exactly.

1844
01:20:57,700 --> 01:20:59,800
And like then he has this big daisy chain wear this

1845
01:21:00,000 --> 01:21:01,700
An instruction going at a time.

1846
01:21:01,800 --> 01:21:03,000
It is terrible, right?

1847
01:21:03,200 --> 01:21:06,800
The problem with something like Huffman coding is that okay?

1848
01:21:06,900 --> 01:21:12,800
You have you're looking at a certain number of bits whatever and you

1849
01:21:12,900 --> 01:21:17,400
looking at the bit stream, trying to figure out how, how long that

1850
01:21:17,400 --> 01:21:19,800
code even is because they're variable length, and you can tell that by

1851
01:21:19,800 --> 01:21:20,700
looking at the data.

1852
01:21:21,400 --> 01:21:26,000
So you first figure out how long they could is then, you know, how

1853
01:21:26,000 --> 01:21:29,500
many bits to remove from the bitstream, and after that, you can start

1854
01:21:29,500 --> 01:21:29,800
decoding

1855
01:21:30,000 --> 01:21:30,700
The next thing, right?

1856
01:21:30,700 --> 01:21:33,600
Like after use this code at this thing, there may be other things, you

1857
01:21:33,600 --> 01:21:34,000
do that.

1858
01:21:34,000 --> 01:21:37,400
Go off on the side that are not in the dependency chain, right?

1859
01:21:37,500 --> 01:21:39,900
And like, those can just fill in the blanks, right?

1860
01:21:39,900 --> 01:21:43,000
But most of the stuff you do is just like, okay, this is my current

1861
01:21:43,000 --> 01:21:43,600
value.

1862
01:21:43,600 --> 01:21:45,000
How long is this code?

1863
01:21:45,100 --> 01:21:45,500
Yes.

1864
01:21:45,500 --> 01:21:48,300
Remove these bits from the bit stream and then I can start the next

1865
01:21:48,300 --> 01:21:48,600
value.

1866
01:21:48,600 --> 01:21:51,200
So basically everyone will always block on that step.

1867
01:21:51,200 --> 01:21:54,600
So you can't ever start the next thing you might want to do exactly

1868
01:21:54,600 --> 01:21:56,400
because like, there's don't even have the bits for this.

1869
01:21:56,400 --> 01:21:59,900
Just this long chain of like, look at the code figure out the

1870
01:22:00,300 --> 01:22:01,100
Remove those bits.

1871
01:22:01,100 --> 01:22:02,200
Look at the code, figure out the length.

1872
01:22:02,200 --> 01:22:03,100
Remove those bits.

1873
01:22:03,900 --> 01:22:06,700
Like, that's so there's only so much optimization can do their, you

1874
01:22:06,700 --> 01:22:08,800
squeeze those few instructions, and right, right?

1875
01:22:08,800 --> 01:22:11,900
And we do, those are all handsome, a b, and c can get as fast as a b

1876
01:22:11,900 --> 01:22:14,600
and c, possibly can, but they're never gonna laugh at the next day,

1877
01:22:14,600 --> 01:22:16,500
but, yeah, in the comedy career example.

1878
01:22:16,500 --> 01:22:19,400
Like, on one of the CPUs, this is literally three instructions, right?

1879
01:22:19,400 --> 01:22:19,800
Okay.

1880
01:22:19,900 --> 01:22:22,900
Like literally, okay, so there's that, see, entirety quarter.

1881
01:22:22,900 --> 01:22:24,600
There's just nothing else to do there, okay?

1882
01:22:24,700 --> 01:22:27,200
Like three instructions provide but these are all dependent on each

1883
01:22:27,200 --> 01:22:27,600
other.

1884
01:22:27,800 --> 01:22:27,900
Yeah.

1885
01:22:27,900 --> 01:22:28,800
So your life sucks.

1886
01:22:31,500 --> 01:22:36,500
This is nothing you can do there unless you like, in a regular Loop.

1887
01:22:36,500 --> 01:22:39,900
The CPU looks at this kind of shape, of thing, you're doing.

1888
01:22:40,600 --> 01:22:45,600
I know it's like, oh, I do X of 1, x, 0, x, 1 x sub 2.

1889
01:22:45,800 --> 01:22:46,800
And these are all independent.

1890
01:22:46,800 --> 01:22:48,000
I can just do them in parallel.

1891
01:22:48,000 --> 01:22:49,700
The CPU just does all that for you.

1892
01:22:50,900 --> 01:22:56,500
If you have this kind of problem and it happens to be cereal, like the

1893
01:22:56,500 --> 01:22:59,900
CP there is an actual serial dependency, from here, to here.

1894
01:23:00,100 --> 01:23:00,600
Yeah, right.

1895
01:23:00,900 --> 01:23:04,300
Like that is not imaginary like that has to be respected if the

1896
01:23:04,300 --> 01:23:05,400
program is written with way.

1897
01:23:05,500 --> 01:23:05,800
Yes.

1898
01:23:05,800 --> 01:23:09,700
So if this can be done in parallel then he have to help the CPU by

1899
01:23:09,700 --> 01:23:12,200
writing a different program that has some parallelism.

1900
01:23:12,300 --> 01:23:12,800
Okay?

1901
01:23:12,800 --> 01:23:16,700
So in this case it's like okay well there's an actual dependency chain

1902
01:23:16,700 --> 01:23:18,600
here that I'm going to do three streams

1903
01:23:21,300 --> 01:23:21,800
Right?

1904
01:23:22,700 --> 01:23:31,000
We're just have like stream 0 has ABC ABC, and then stream one has one

1905
01:23:31,100 --> 01:23:32,200
ABC ABC.

1906
01:23:35,200 --> 01:23:38,600
So you're still coding symbols, you're just there just and there's

1907
01:23:38,600 --> 01:23:43,200
multiple ones completely different streams in it within each stream

1908
01:23:43,200 --> 01:23:46,800
their cereal but you're pulling symbols out of each one I say.

1909
01:23:46,800 --> 01:23:50,800
Yeah and you can go to pretty crazy lengths to where what we have six

1910
01:23:50,800 --> 01:23:52,100
streams in some of our stuff.

1911
01:23:52,200 --> 01:23:55,200
So basically what you do is you say all right we want to try and get

1912
01:23:55,200 --> 01:23:56,800
the instruction level parallelism up.

1913
01:23:56,900 --> 01:23:57,400
Yep.

1914
01:23:57,400 --> 01:23:59,800
We know we can't make this thing any less.

1915
01:24:00,000 --> 01:24:03,800
Cereal as an encoding because the whole point of the Huffman is to

1916
01:24:03,800 --> 01:24:07,200
make it so that is cereal because anything we do that, makes it less

1917
01:24:07,200 --> 01:24:08,900
cereal would waste B.

1918
01:24:08,900 --> 01:24:09,400
Yes.

1919
01:24:09,400 --> 01:24:13,900
So, let's just do more Huffman's, break the stream into multiple

1920
01:24:13,900 --> 01:24:17,900
Huffman's and do them all at once that way, you just get, however,

1921
01:24:17,900 --> 01:24:22,100
much structural column as one stream grabbing a simple off another

1922
01:24:22,100 --> 01:24:22,900
grabbing a number there.

1923
01:24:22,900 --> 01:24:24,200
So it looks like I see.

1924
01:24:24,600 --> 01:24:28,400
It looks like you're unrolling a loop, but you're actually unrolling

1925
01:24:28,400 --> 01:24:29,800
it in its

1926
01:24:30,000 --> 01:24:30,600
Really stinks.

1927
01:24:30,700 --> 01:24:32,500
It's six Loops running in parallel, right?

1928
01:24:32,500 --> 01:24:32,800
Yes.

1929
01:24:32,900 --> 01:24:33,500
And that gives you.

1930
01:24:33,500 --> 01:24:36,600
Those are links to write R and S Y6.

1931
01:24:36,600 --> 01:24:39,900
It happens that this Loop like this critical path here.

1932
01:24:40,300 --> 01:24:45,000
This part A beans and see like, it just happens in this case.

1933
01:24:45,000 --> 01:24:46,100
Like why is its extremes?

1934
01:24:46,100 --> 01:24:48,100
Because this year happens to take six cycles.

1935
01:24:48,100 --> 01:24:50,200
That has a shape that can start every cycle.

1936
01:24:50,700 --> 01:24:51,100
I see.

1937
01:24:51,700 --> 01:24:53,700
So you need six streams.

1938
01:24:54,100 --> 01:24:57,700
So this whole thing works out, it's just and the thing is like,

1939
01:24:57,700 --> 01:24:59,800
there's other things you can do that go.

1940
01:25:00,000 --> 01:25:01,700
Of along a similar vein where to go.

1941
01:25:01,700 --> 01:25:04,500
I can do this using Cindy operations and do four streams at a time

1942
01:25:05,400 --> 01:25:09,200
they have the same problem like, oh the simply stop also has a Slayton

1943
01:25:09,200 --> 01:25:09,400
season.

1944
01:25:09,400 --> 01:25:11,000
These latencies are actually larger.

1945
01:25:11,000 --> 01:25:11,800
They're worse, right?

1946
01:25:11,800 --> 01:25:12,000
Right.

1947
01:25:12,000 --> 01:25:12,400
Yes.

1948
01:25:12,900 --> 01:25:16,500
So, with send me stuff, it's actually like you can do the same thing

1949
01:25:16,700 --> 01:25:19,000
but the parallelism stuff doesn't go away, right?

1950
01:25:19,000 --> 01:25:23,000
You can also do that on top of the vicinity so you know that okay you

1951
01:25:23,000 --> 01:25:26,500
do 8 W mg of these and it turns out the last sees, get worse.

1952
01:25:26,600 --> 01:25:28,300
So you need eight streams of 8 W?

1953
01:25:28,300 --> 01:25:29,800
MD like you can totally

1954
01:25:29,900 --> 01:25:30,600
We do that.

1955
01:25:30,700 --> 01:25:32,200
We have actually for Huffman's.

1956
01:25:32,200 --> 01:25:32,500
Yes.

1957
01:25:32,500 --> 01:25:33,800
You would have 64 Huffman.

1958
01:25:33,800 --> 01:25:35,400
So that's a lot of overhead.

1959
01:25:35,400 --> 01:25:36,800
Yes, walk down on a single stream.

1960
01:25:36,800 --> 01:25:37,100
Yes.

1961
01:25:37,100 --> 01:25:38,100
But you could totally do that.

1962
01:25:38,200 --> 01:25:38,600
I said.

1963
01:25:39,500 --> 01:25:43,000
So there's a lot of air left that kind of thing.

1964
01:25:44,100 --> 01:25:48,700
But it's just having to have these streams to begin with just means

1965
01:25:48,700 --> 01:25:50,500
you have to invest upfront.

1966
01:25:50,500 --> 01:25:54,600
And like having these extremes means you need to Signal more stuff in

1967
01:25:54,600 --> 01:25:55,500
the encoder.

1968
01:25:56,000 --> 01:25:59,500
At the very least, you need to make sure like each of these streams

1969
01:25:59,500 --> 01:25:59,800
needs to be

1970
01:26:00,000 --> 01:26:03,500
So, if you take arbitrary data from the network or from disc, you need

1971
01:26:03,500 --> 01:26:04,000
to check that.

1972
01:26:04,000 --> 01:26:07,500
There's no buffer overflows, whatever that all needs to be safe, that

1973
01:26:07,500 --> 01:26:08,900
validation is per stream.

1974
01:26:09,200 --> 01:26:11,700
So having more streams means you do more of that work.

1975
01:26:12,900 --> 01:26:17,000
It means that you have more overhead since you need to denote in the

1976
01:26:17,000 --> 01:26:18,500
Stream that keeps the native 470.

1977
01:26:18,500 --> 01:26:20,100
Here's the data for someone, right?

1978
01:26:20,100 --> 01:26:21,900
Like all that stuff gets worse.

1979
01:26:22,200 --> 01:26:25,100
So you do have to make sure that this is actually what you want and

1980
01:26:25,100 --> 01:26:28,400
the decode speed isn't that also means that like you would rather like

1981
01:26:29,200 --> 01:26:29,800
this kind of scale,

1982
01:26:29,900 --> 01:26:33,200
Taylor thing, if you do it, where you have actual separate streams,

1983
01:26:33,700 --> 01:26:36,300
you can do something with that on every CPU, even if they don't have

1984
01:26:36,300 --> 01:26:38,800
good Cindy, if they can run multiple instructions.

1985
01:26:38,800 --> 01:26:43,400
At the same time, having more work is that you can do in the same unit

1986
01:26:43,400 --> 01:26:48,000
interval will help you on any CPU, that can, can execute instruction

1987
01:26:48,000 --> 01:26:50,800
that can start executing instructions faster than it, can complete

1988
01:26:50,800 --> 01:26:51,200
them.

1989
01:26:51,300 --> 01:26:54,700
Yeah, because there's most because you would Target stuff like memory

1990
01:26:54,700 --> 01:26:55,200
operations.

1991
01:26:55,200 --> 01:26:57,800
For example, like this load here, like pretty much.

1992
01:26:57,800 --> 01:26:59,800
Every major CPU can start a new low.

1993
01:27:00,000 --> 01:27:02,900
Operation every single clock cycle, but they take multiple clock

1994
01:27:02,900 --> 01:27:03,900
Cycles to complete.

1995
01:27:03,900 --> 01:27:07,300
Yes, which means these dependency chains are multiple cycles Long and

1996
01:27:07,300 --> 01:27:08,500
there's just gaps in there.

1997
01:27:08,600 --> 01:27:11,900
Even if it's not a CPU, that does multiple instructions at once.

1998
01:27:12,300 --> 01:27:15,000
If you can't, if it's, if you could do multiple instruction at once,

1999
01:27:15,000 --> 01:27:16,300
of course, it's even worse, right?

2000
01:27:16,300 --> 01:27:18,500
Because not only do you have this Gap during this Gap.

2001
01:27:18,500 --> 01:27:20,100
Like you could do three instruct, right?

2002
01:27:20,100 --> 01:27:20,400
Yes.

2003
01:27:20,400 --> 01:27:22,200
Instead of, so, you have a lot more waste.

2004
01:27:22,700 --> 01:27:26,900
So they do these kind of things is less about compression itself, but

2005
01:27:26,900 --> 01:27:29,800
just how bout week, modern ones are

2006
01:27:30,000 --> 01:27:31,500
So unfortunately, we are out of time.

2007
01:27:31,900 --> 01:27:33,300
That is all fantastic.

2008
01:27:33,700 --> 01:27:35,400
Thank you guys so much for being here.

2009
01:27:35,400 --> 01:27:36,500
That was at least Friday.

2010
01:27:36,500 --> 01:27:38,800
Rachel for me, hopefully for everyone else as well.

2011
01:27:39,100 --> 01:27:39,700
Thank you so much.

