1
00:00:00,500 --> 00:00:01,700
And start recording.

2
00:00:02,500 --> 00:00:03,000
Okay.

3
00:00:03,400 --> 00:00:05,600
Hello everyone and welcome to handmade hero.

4
00:00:05,600 --> 00:00:09,200
The show where we Cody complete game live on the air from scratch.

5
00:00:09,200 --> 00:00:10,400
Using nothing new libraries.

6
00:00:10,400 --> 00:00:13,400
No engine so that we can see how absolutely everything in a game

7
00:00:13,400 --> 00:00:18,200
pipeline works right down to the pixels and all the way up to the high

8
00:00:18,200 --> 00:00:19,100
level game code.

9
00:00:19,400 --> 00:00:23,600
And right now we are working on what is essentially going to be our

10
00:00:23,600 --> 00:00:25,400
primary character movement code.

11
00:00:25,600 --> 00:00:29,900
And so I really wanted to be able to kind of start using

12
00:00:30,000 --> 00:00:33,100
Saying, you know, the basic sorts of math that we use in game

13
00:00:33,100 --> 00:00:35,700
development, just basic Vector, math, that sort of stuff.

14
00:00:35,700 --> 00:00:39,200
I want to start using that but we had not actually covered that yet on

15
00:00:39,200 --> 00:00:39,600
the stream.

16
00:00:39,600 --> 00:00:42,200
And so last night, I kind of gave a little bit of a math overview, to

17
00:00:42,200 --> 00:00:44,900
sort of say what types of math are involved in game development.

18
00:00:44,900 --> 00:00:47,900
And tonight we're going to do our first kind of like experimentation

19
00:00:48,200 --> 00:00:49,100
with some of that math.

20
00:00:49,100 --> 00:00:52,200
I'm basically to show how to use 2D Vector math.

21
00:00:52,200 --> 00:00:54,900
Just trying to, you know, give you the background of basically how it

22
00:00:54,900 --> 00:00:59,200
works and show you kind of how we use it to allow a character to move

23
00:00:59,200 --> 00:00:59,900
around that sort of

24
00:01:00,200 --> 00:01:03,900
And that will kick off our work on getting some good character

25
00:01:03,900 --> 00:01:05,600
movement into the game.

26
00:01:05,800 --> 00:01:09,800
Now, before I go any further detail on that, if you would like to

27
00:01:09,800 --> 00:01:12,900
follow along at home and you preorder the source code on handmade hero

28
00:01:12,900 --> 00:01:13,600
dot-org.

29
00:01:13,900 --> 00:01:16,400
You should have gotten a link in your email where you can download the

30
00:01:16,400 --> 00:01:17,200
source code.

31
00:01:17,300 --> 00:01:21,500
And if you take a look in that zip, it basically has a they're coated

32
00:01:21,500 --> 00:01:22,200
by day.

33
00:01:22,400 --> 00:01:26,400
You could basically grab the zip for day 41 and unzip it and you will

34
00:01:26,400 --> 00:01:28,300
be exactly where I am today.

35
00:01:28,300 --> 00:01:29,600
Now, of course, you can also grab the

36
00:01:30,000 --> 00:01:31,900
It formed a 40 since we didn't do any coding yesterday.

37
00:01:31,900 --> 00:01:36,000
It was just a math over you day, but for, you know, for completeness

38
00:01:36,000 --> 00:01:37,900
sake, I still upload a zip every night.

39
00:01:38,100 --> 00:01:39,400
So there is a day, 41, zip.

40
00:01:39,400 --> 00:01:40,300
It's the same as the day for it.

41
00:01:40,300 --> 00:01:42,100
Is it Anyway?

42
00:01:42,700 --> 00:01:45,800
So let's go ahead and get started here and take a look at this stuff.

43
00:01:46,300 --> 00:01:48,500
I will go ahead and I'm using the pain.

44
00:01:48,500 --> 00:01:52,100
I'm seeing if I can use the pen instead of a mouse since I was using

45
00:01:52,100 --> 00:01:54,200
it for drawing and I feel like I might have to draw diagrams and

46
00:01:54,200 --> 00:01:54,400
stuff.

47
00:01:54,400 --> 00:01:54,900
So we'll see.

48
00:01:54,900 --> 00:01:58,300
It may come to a screeching halt if I decide that it's too much of a

49
00:01:58,300 --> 00:01:59,800
pain, but we're going to try it maybe.

50
00:02:00,000 --> 00:02:00,800
At least for one episode.

51
00:02:00,800 --> 00:02:01,900
We'll see if I can get used to it.

52
00:02:02,400 --> 00:02:02,800
All right.

53
00:02:02,800 --> 00:02:07,600
So basically if you remember correctly, this is where we left things,

54
00:02:08,100 --> 00:02:11,000
where we had done a bunch of work on basic stuff.

55
00:02:11,000 --> 00:02:14,400
We, you know, we tested scrolling, we allowed ourselves to make a tile

56
00:02:14,400 --> 00:02:14,600
map.

57
00:02:14,600 --> 00:02:15,800
That could be huge.

58
00:02:16,200 --> 00:02:18,400
And so, you know, we did sparse, tilemap storage.

59
00:02:18,400 --> 00:02:20,600
We did a bunch of stuff, but we got to the point where we need to

60
00:02:20,600 --> 00:02:22,400
start thinking about moving our guy around.

61
00:02:22,600 --> 00:02:25,000
And right now, our guy has the worst movement code ever.

62
00:02:25,000 --> 00:02:28,200
It's the most basic most annoying movement code, and I'm not even

63
00:02:28,200 --> 00:02:29,800
talking about

64
00:02:30,000 --> 00:02:30,700
Animation.

65
00:02:30,700 --> 00:02:33,000
I'm not even talking about the fact that he doesn't animate yet

66
00:02:33,200 --> 00:02:35,100
because that's something that we want to fix as well.

67
00:02:35,100 --> 00:02:37,900
But I'm even just talking about at a much lower level than that, which

68
00:02:37,900 --> 00:02:41,100
is just the act of moving him around, doesn't feel very good.

69
00:02:41,100 --> 00:02:43,400
And there's a number of reasons why that is true.

70
00:02:43,500 --> 00:02:46,400
Some of which are going to be obvious to people who've worked on games

71
00:02:46,400 --> 00:02:46,700
before.

72
00:02:46,700 --> 00:02:48,800
But if you haven't worked on days before, they may not be obvious to

73
00:02:48,800 --> 00:02:49,100
you.

74
00:02:49,400 --> 00:02:51,800
You may just kind of notice that it doesn't feel good.

75
00:02:52,300 --> 00:02:55,300
And one of the big ones is the character doesn't have any momentum at.

76
00:02:55,300 --> 00:02:56,900
All right now, right?

77
00:02:57,000 --> 00:02:59,700
So, if you see, basically, all that's happening, is when I push down

78
00:02:59,700 --> 00:02:59,800
on,

79
00:03:00,000 --> 00:03:03,100
He's really, he just moves while I'm holding down the key at a

80
00:03:03,100 --> 00:03:04,000
resolved rate.

81
00:03:04,000 --> 00:03:07,100
And then as soon as I let go of a key, you know, he just stops, right?

82
00:03:07,500 --> 00:03:08,000
Furthermore.

83
00:03:08,000 --> 00:03:09,400
It's got some Oddities in it.

84
00:03:09,500 --> 00:03:12,600
For example, if I'm going right, I go at a certain speed.

85
00:03:12,600 --> 00:03:14,700
If I'm going down, I go at the same speed.

86
00:03:14,900 --> 00:03:18,400
But if I go right and down at the same time, I actually go at the

87
00:03:18,400 --> 00:03:20,100
combination of those two speeds.

88
00:03:20,200 --> 00:03:22,900
So I basically go the full, the full speed to the right and the full

89
00:03:22,900 --> 00:03:24,200
speed down at the same time.

90
00:03:24,500 --> 00:03:25,100
Right?

91
00:03:25,400 --> 00:03:27,200
And so that's also kind of another weirdness.

92
00:03:27,200 --> 00:03:29,600
Because basically means that on the diagonals,

93
00:03:30,000 --> 00:03:33,100
The character moves at sort of an accelerated rate, which is also kind

94
00:03:33,100 --> 00:03:33,600
of weird.

95
00:03:33,600 --> 00:03:36,300
So there's a number of things about that that are unsatisfying.

96
00:03:36,700 --> 00:03:41,200
If I go up our kind of virtual door ladder, there and go up to the,

97
00:03:41,200 --> 00:03:43,200
the sort of next layer of the tile map here.

98
00:03:43,600 --> 00:03:47,600
Also, you will note, when I kind of go through a doorway or something

99
00:03:47,600 --> 00:03:48,300
like that.

100
00:03:48,300 --> 00:03:52,000
If I am going through them the long way, I'll speed my guy up here so

101
00:03:52,000 --> 00:03:55,300
I can kind of go up somewhere that has a doorway going upward, which

102
00:03:55,300 --> 00:03:56,200
is what I want show you.

103
00:03:56,900 --> 00:03:59,900
I get sort of another really annoying thing that happens that we

104
00:04:00,000 --> 00:04:00,800
Look out eventually.

105
00:04:00,800 --> 00:04:02,900
And this is kind of a little further down the road, but just to

106
00:04:02,900 --> 00:04:03,500
underscore our bad.

107
00:04:03,500 --> 00:04:06,300
The player movement code is right now, I get stuck on just about

108
00:04:06,300 --> 00:04:06,800
anything.

109
00:04:06,800 --> 00:04:08,200
Like I can get stuck right there.

110
00:04:08,300 --> 00:04:10,400
It's really hard for me to get through this doorway.

111
00:04:10,400 --> 00:04:10,600
Right?

112
00:04:10,600 --> 00:04:11,500
It's really annoying.

113
00:04:12,300 --> 00:04:15,400
Any, any little misalignment causes me to stop entirely.

114
00:04:15,600 --> 00:04:18,399
And so basically there's just a lot of things that are really lousy

115
00:04:19,000 --> 00:04:22,900
about this player movement code, and all of those are things that we

116
00:04:22,900 --> 00:04:24,000
want to improve.

117
00:04:24,800 --> 00:04:28,300
So there's that and then of course, on top of that, what we want to do

118
00:04:28,300 --> 00:04:29,800
is we want to make it

119
00:04:29,900 --> 00:04:32,500
It more interesting for the player to move their character around

120
00:04:32,500 --> 00:04:34,400
because moving their character around in a game.

121
00:04:34,400 --> 00:04:36,500
Like this is something they're doing all the time.

122
00:04:36,500 --> 00:04:39,400
They're always moving their character around on every single screen.

123
00:04:39,500 --> 00:04:42,400
They're moving from left to right there, dodging, enemy shots, or

124
00:04:42,400 --> 00:04:42,700
whatever.

125
00:04:42,700 --> 00:04:43,200
They're doing.

126
00:04:43,400 --> 00:04:43,900
They're moving.

127
00:04:43,900 --> 00:04:46,500
The character around is a primary operation that they're going to do.

128
00:04:46,600 --> 00:04:50,000
And one of the things that that ends up happening, if that's the case

129
00:04:50,200 --> 00:04:53,700
is you want to provide a lot of good visual.

130
00:04:54,200 --> 00:04:54,500
Sorry.

131
00:04:54,500 --> 00:04:58,500
Visceral feedback, basically while they're moving around because

132
00:04:58,500 --> 00:04:59,800
that's one of the things that will make your

133
00:05:00,000 --> 00:05:04,000
I'm engaging like, I mean, at the, at the risk of stating the obvious,

134
00:05:04,300 --> 00:05:08,400
one of the things that's crucial in making a video game is making good

135
00:05:08,400 --> 00:05:10,100
audio visual feedback for everything.

136
00:05:10,800 --> 00:05:13,800
And a lot of people will say stuff, like, you know, what's all about

137
00:05:13,800 --> 00:05:16,600
the gameplay, or whatever, but those statements are kind of nebulous

138
00:05:16,600 --> 00:05:20,200
because we all know that a video game is different from a board game

139
00:05:20,200 --> 00:05:21,800
in that there is audio visual feedback.

140
00:05:21,800 --> 00:05:24,000
That's what makes it a video game.

141
00:05:24,000 --> 00:05:27,500
And so, a lot of what you're trying to do in terms of

142
00:05:28,600 --> 00:05:31,400
In terms of making the game, fun and engaging.

143
00:05:31,900 --> 00:05:34,100
Yes, there's a ton of stuff that's important in terms of game

144
00:05:34,100 --> 00:05:37,400
mechanics and all of the stuff that exists, one level up from the the

145
00:05:37,400 --> 00:05:41,400
pure audio visual feedback, but at that base level the audio visual

146
00:05:41,400 --> 00:05:44,300
feedback is really what makes the game immediately engaging.

147
00:05:44,300 --> 00:05:47,900
And it's what allows the players to be interested enough in playing

148
00:05:47,900 --> 00:05:51,200
the game to get to those deeper things that you're putting in there,

149
00:05:51,200 --> 00:05:53,300
in terms of your game, mechanics and whatever, it's what allows you

150
00:05:53,300 --> 00:05:53,500
get to.

151
00:05:53,500 --> 00:05:55,700
The next step of of design in terms of Interest.

152
00:05:55,700 --> 00:05:57,800
Otherwise, you just have a game that feels off.

153
00:05:58,000 --> 00:05:59,900
How to play that, maybe if someone's willing to suffer.

154
00:06:00,000 --> 00:06:03,600
Through the awful feel they will discover the fact that you designed

155
00:06:03,600 --> 00:06:03,700
it.

156
00:06:03,700 --> 00:06:04,300
Well, right.

157
00:06:04,300 --> 00:06:07,400
And so it's really crucial that we avoid that as well.

158
00:06:07,400 --> 00:06:10,000
So what we want to do is make it really fun to move the guy around.

159
00:06:10,000 --> 00:06:12,700
So we want to make him feel really nice and you can see he's a little

160
00:06:12,700 --> 00:06:14,400
fellow that doesn't have any arms and legs.

161
00:06:14,400 --> 00:06:17,100
And so one of the things that we'll want to do is kind of make him

162
00:06:17,100 --> 00:06:18,100
have a nice kind of hop.

163
00:06:18,100 --> 00:06:21,700
I want them to basically be able to hop around and have that hopping

164
00:06:21,700 --> 00:06:23,200
feel really nice instead of right now.

165
00:06:23,200 --> 00:06:25,500
It just feels really boring and uninteresting, right?

166
00:06:25,500 --> 00:06:29,500
So that's our goal over the next, however, many days it takes as we

167
00:06:29,500 --> 00:06:29,800
sort of

168
00:06:30,000 --> 00:06:30,900
Learn about how to do.

169
00:06:30,900 --> 00:06:33,800
Our Vector math is I'm going to basically be showing you how to do

170
00:06:33,800 --> 00:06:38,000
basic Vector math through the lens of improving, this guy's motion, so

171
00:06:38,000 --> 00:06:41,900
that he is able to move in a smooth, satisfying way for the player.

172
00:06:42,100 --> 00:06:46,400
And so that his the visual feedback to the player receives while the

173
00:06:46,400 --> 00:06:50,400
character is moving, is very engaging and satisfying, and makes you

174
00:06:50,400 --> 00:06:51,200
want to do it.

175
00:06:51,200 --> 00:06:53,700
It makes you want to just move them around like it just feels really

176
00:06:53,700 --> 00:06:54,100
good.

177
00:06:54,900 --> 00:06:58,000
And so, that's, that's basically what we're we're, we're we're going

178
00:06:58,000 --> 00:06:59,600
with all this, okay.

179
00:07:00,200 --> 00:07:03,200
So let's get started with some basic stuff.

180
00:07:03,700 --> 00:07:05,700
Let's get started with that.

181
00:07:05,700 --> 00:07:06,400
Moat first thing.

182
00:07:06,400 --> 00:07:10,000
That was the very easiest thing to fix that momentum problem that I

183
00:07:10,000 --> 00:07:12,100
was talking about before I was saying that he doesn't have any

184
00:07:12,100 --> 00:07:15,900
momentum, you just stops on a dime and he starts at full speed, right?

185
00:07:16,100 --> 00:07:18,000
So let's let's fix that momentum problem.

186
00:07:18,200 --> 00:07:20,700
And while we're at it, let's take a look and see if we can fix the

187
00:07:20,700 --> 00:07:24,200
fact that he moves faster on the diagonals, then when he's going up

188
00:07:24,200 --> 00:07:27,200
down left and right alone, right?

189
00:07:27,400 --> 00:07:29,700
And so, those are things that if we learn some basic,

190
00:07:29,900 --> 00:07:32,500
Vector math, we can solve very easily.

191
00:07:32,600 --> 00:07:33,700
So let's go ahead and do it.

192
00:07:36,500 --> 00:07:39,300
So the first thing I want to talk about is just for the people who are

193
00:07:39,300 --> 00:07:42,800
very, very beginner at this, at this sort of stuff.

194
00:07:42,800 --> 00:07:45,300
I just want to kind of remind everything everyone.

195
00:07:45,300 --> 00:07:48,500
What we're talking about when we talk about vectors.

196
00:07:49,200 --> 00:07:52,200
So basically you've already seen in the code, right?

197
00:07:52,700 --> 00:07:56,100
If I load up the handmade hero code base here, and I go in here and

198
00:07:56,300 --> 00:07:59,200
look at my, my handmade dot CPP.

199
00:08:00,000 --> 00:08:03,200
This is the code that we were using to move the player, right?

200
00:08:03,400 --> 00:08:04,100
And as you can see,

201
00:08:04,500 --> 00:08:06,700
In here, we basically we're saying all right.

202
00:08:06,700 --> 00:08:08,600
We want to pick a new position for the player.

203
00:08:09,200 --> 00:08:11,600
We want to basically take his old position which is what we're doing

204
00:08:11,600 --> 00:08:11,900
here.

205
00:08:12,300 --> 00:08:15,100
We're going to assign it to a temporary variable and then we're going

206
00:08:15,100 --> 00:08:19,300
to add to its offset X and offset Y, which is basically how far he is

207
00:08:19,300 --> 00:08:21,400
away from whatever sent the center of whatever tile.

208
00:08:21,400 --> 00:08:25,300
He's on, we're going to go ahead and add, however, much time has

209
00:08:25,300 --> 00:08:28,200
elapsed for this Frame, or a supposed to elapse over the course of

210
00:08:28,200 --> 00:08:28,600
this Frame.

211
00:08:28,600 --> 00:08:29,200
I should say.

212
00:08:30,000 --> 00:08:32,500
We're going to take whatever his motion is in the X direction.

213
00:08:32,500 --> 00:08:34,100
We multiply that and add it to the offset x 0.

214
00:08:34,200 --> 00:08:35,500
We're gonna do the same thing for y.

215
00:08:36,400 --> 00:08:39,500
Now, if you take a look at what happens here, you will notice that

216
00:08:39,500 --> 00:08:44,000
this sort of thing, tends to be very common across a lot of the stuff

217
00:08:44,000 --> 00:08:44,800
that we've already written.

218
00:08:45,000 --> 00:08:48,000
You will notice that the X and Y tend to be handled together in a

219
00:08:48,000 --> 00:08:48,900
number of ways.

220
00:08:49,000 --> 00:08:51,200
These are they're both getting multiplied, my player speed here.

221
00:08:51,200 --> 00:08:52,700
They're both get set to 0 here.

222
00:08:52,700 --> 00:08:55,400
We do the same thing to all of them here as well.

223
00:08:55,700 --> 00:08:59,000
And similarly, if we go into handmade tile, which still is holding

224
00:08:59,000 --> 00:08:59,600
some of our

225
00:09:00,000 --> 00:09:02,700
If we weren't sure exactly where to put, if we look at kind of what

226
00:09:02,700 --> 00:09:06,100
happens in here to offset X and offset y, you will also see stuff

227
00:09:06,100 --> 00:09:09,200
where a lot of times those get processed in the exact same way.

228
00:09:09,200 --> 00:09:10,100
You can see them getting crossed.

229
00:09:10,100 --> 00:09:11,300
Exact same way here.

230
00:09:11,600 --> 00:09:14,000
You can see them getting in process in the exact same way here.

231
00:09:14,200 --> 00:09:17,500
So a lot of times you just get this sort of pattern that you would see

232
00:09:17,500 --> 00:09:19,800
if you didn't know anything about vectors, you know anything about the

233
00:09:19,800 --> 00:09:23,600
math behind or anything, you would start to see this very clear

234
00:09:23,600 --> 00:09:27,800
pattern in your code where you're constantly doing the same stuff.

235
00:09:28,800 --> 00:09:32,200
Two pairs of variables, your exes, and your why, you know, the

236
00:09:32,200 --> 00:09:33,800
horizontal and the vertical movement.

237
00:09:39,000 --> 00:09:41,000
And that is really where this notion.

238
00:09:42,100 --> 00:09:44,600
Of vectors in game development come from.

239
00:09:44,600 --> 00:09:48,500
It's the reason that we start turning two vectors is because we do

240
00:09:48,500 --> 00:09:52,400
start to have a lot of variables whose behavior is interrelated.

241
00:09:52,400 --> 00:09:54,100
They are not really separate anymore.

242
00:09:54,300 --> 00:09:54,800
Right?

243
00:09:54,800 --> 00:09:58,100
They are always handled together and they form sort of a coherent

244
00:09:58,100 --> 00:10:02,300
notion in and of themselves such that if we start to look at all the

245
00:10:02,300 --> 00:10:03,900
operations that we perform on them.

246
00:10:03,900 --> 00:10:08,700
We will find that we can boil those down to a set of basic operations,

247
00:10:08,800 --> 00:10:11,700
that make it much easier and much faster to work with them.

248
00:10:12,400 --> 00:10:13,400
And it just so happens.

249
00:10:13,400 --> 00:10:16,200
That obviously, mathematicians beat us to this concept a long time

250
00:10:16,200 --> 00:10:16,600
ago.

251
00:10:17,200 --> 00:10:19,700
And I've already defined all of the sorts of stuff you might want to

252
00:10:19,700 --> 00:10:22,900
do with vectors and already worked out kind of everything for us.

253
00:10:22,900 --> 00:10:27,300
And so really, that is what this sort of vector stuff in terms of how,

254
00:10:27,300 --> 00:10:28,600
why we care about it.

255
00:10:28,600 --> 00:10:31,100
That's really what it boils down to is we have a bunch of operations

256
00:10:31,100 --> 00:10:34,100
that we're going to constantly do with this notion of points and

257
00:10:34,100 --> 00:10:38,300
directions and stuff that have both X and Y and potentially Z

258
00:10:38,300 --> 00:10:41,700
components to them and we want to start thinking of those.

259
00:10:41,800 --> 00:10:44,600
As coherent things that have operations on them.

260
00:10:44,600 --> 00:10:47,300
It makes sense as a unit, right?

261
00:10:48,600 --> 00:10:51,900
And so, you'll note, actually, this is a good point here.

262
00:10:52,000 --> 00:10:56,100
One of the reasons I didn't want to fix this, this diagonal movement

263
00:10:56,100 --> 00:10:59,600
problem member, I was saying the thing about the diagonal movement, I

264
00:10:59,600 --> 00:11:03,600
wanted to wait is because that's a perfect example of when the actual

265
00:11:03,600 --> 00:11:08,200
coupling between the objects between the X and the Y starts to be

266
00:11:08,200 --> 00:11:09,300
important, right?

267
00:11:10,300 --> 00:11:11,500
It's no longer something.

268
00:11:11,500 --> 00:11:11,700
That's

269
00:11:12,100 --> 00:11:13,800
Care that's handle in isolation.

270
00:11:13,800 --> 00:11:16,700
So it starts to be something that's about the actual combat

271
00:11:17,100 --> 00:11:19,600
combination of both the X and the Y at the same time.

272
00:11:20,200 --> 00:11:24,300
And so, what we could do to start off to give sort of an example of

273
00:11:24,300 --> 00:11:25,000
what's going to happen.

274
00:11:25,000 --> 00:11:29,100
There is, you could think about what we actually want to have occur.

275
00:11:29,300 --> 00:11:32,800
And we can sort of back out, maybe into what we, what we're going to

276
00:11:32,800 --> 00:11:35,600
do based on sort of thinking about it a little bit, right?

277
00:11:36,600 --> 00:11:39,900
So, if I were to draw again, not even talking about vectors yet,

278
00:11:39,900 --> 00:11:40,100
right?

279
00:11:40,100 --> 00:11:41,700
Not even saying the word.

280
00:11:41,800 --> 00:11:47,200
Even if I were to draw what was going on, then in that diagonal case,

281
00:11:47,200 --> 00:11:47,800
right?

282
00:11:47,900 --> 00:11:51,400
We were basically saying, okay, the guys here and we know that he has

283
00:11:51,400 --> 00:11:54,700
some amount of X motion that's going to happen over this Frame so over

284
00:11:54,700 --> 00:11:56,100
the course of one frame, right?

285
00:11:56,100 --> 00:11:59,400
And that's that's, that's this code right here, right?

286
00:11:59,400 --> 00:11:59,800
Input, d.

287
00:12:00,000 --> 00:12:01,000
For frame times player.

288
00:12:01,000 --> 00:12:03,900
X the offset X, I'm adding.

289
00:12:04,000 --> 00:12:05,900
So I'm adding this right here.

290
00:12:06,000 --> 00:12:07,200
That's this quantity.

291
00:12:07,200 --> 00:12:07,700
Right?

292
00:12:08,300 --> 00:12:11,600
If I'm going to add that and then I'm also, it turns out that he has a

293
00:12:11,600 --> 00:12:14,600
deep layer, why I'm also going to add that to his offset Y, which is

294
00:12:14,600 --> 00:12:15,800
this of course, right?

295
00:12:15,800 --> 00:12:18,800
So I'm also going to add something that's moving in the same direction

296
00:12:18,800 --> 00:12:19,900
this way, right?

297
00:12:20,300 --> 00:12:25,400
And so if I wanted him to move at a constant rate, no matter what

298
00:12:25,400 --> 00:12:28,100
direction he was going in, I wanted to make sure he never exceeded

299
00:12:28,100 --> 00:12:29,000
that, right?

300
00:12:29,100 --> 00:12:29,700
Well, you can see the

301
00:12:30,000 --> 00:12:33,000
Problem with what I'm doing here in terms of getting that result.

302
00:12:33,000 --> 00:12:35,400
He's we're going to add both of these together.

303
00:12:35,400 --> 00:12:37,200
So the combined motion, right?

304
00:12:37,200 --> 00:12:39,900
If you think about where it's going to end up, is going to be here,

305
00:12:40,000 --> 00:12:40,800
right?

306
00:12:41,000 --> 00:12:42,400
And how long is that Vector?

307
00:12:42,400 --> 00:12:44,900
You can kind of see if I rotate it up to here.

308
00:12:44,900 --> 00:12:45,200
Right?

309
00:12:45,200 --> 00:12:48,800
If I do like a rotation, it's longer than either of these two vectors

310
00:12:48,800 --> 00:12:53,600
and it's longer because it's involving the contribution of both the X

311
00:12:53,600 --> 00:12:55,600
and the Y at the same time, right?

312
00:12:56,300 --> 00:12:57,700
Now it's not twice as long.

313
00:12:58,100 --> 00:13:01,100
Okay, but it is longer.

314
00:13:01,200 --> 00:13:04,200
Okay, and exactly how long it is is something that we'll talk about in

315
00:13:04,200 --> 00:13:04,700
a second.

316
00:13:10,500 --> 00:13:10,900
Okay.

317
00:13:13,300 --> 00:13:16,300
And you may ask yourself also, why isn't it twice as long?

318
00:13:17,100 --> 00:13:20,800
And the reason that of course it's not twice as long is because he is

319
00:13:20,800 --> 00:13:24,500
not actually in as far as the viewer is concerned, right?

320
00:13:24,500 --> 00:13:26,900
We here's one way to think about it.

321
00:13:26,900 --> 00:13:29,900
The path that he took is in some sense twice.

322
00:13:29,900 --> 00:13:34,200
As long, he walked this way for how for that for that length.

323
00:13:34,200 --> 00:13:34,400
Right?

324
00:13:34,400 --> 00:13:37,100
Because member these are both the same length and then he walked this

325
00:13:37,100 --> 00:13:38,000
way for that length.

326
00:13:38,000 --> 00:13:39,800
That's essentially what I had him do, right.

327
00:13:39,800 --> 00:13:41,800
I had him walk that way and then

328
00:13:42,600 --> 00:13:43,000
This way.

329
00:13:43,000 --> 00:13:43,800
So I had him walk.

330
00:13:43,800 --> 00:13:46,500
Actually, I guess, I should say he walked this way and then this way

331
00:13:46,500 --> 00:13:50,000
he walked X first and then Y, and that would be twice the length,

332
00:13:50,000 --> 00:13:50,700
right?

333
00:13:50,800 --> 00:13:55,000
But the player doesn't see that motion, the player doesn't see him.

334
00:13:55,000 --> 00:13:58,600
Walk in a stair-step, the player just sees his final location because

335
00:13:58,600 --> 00:14:01,000
remember, we haven't drawn him in between here and here.

336
00:14:01,300 --> 00:14:01,700
Instead.

337
00:14:01,700 --> 00:14:03,100
We just added the two together.

338
00:14:03,600 --> 00:14:06,500
So the players just going to see him at this final location and in the

339
00:14:06,500 --> 00:14:11,000
players mind, they are going to reconstruct the motion of the guy to

340
00:14:11,000 --> 00:14:11,700
have been this.

341
00:14:11,900 --> 00:14:13,400
Diagonal line, right?

342
00:14:13,500 --> 00:14:16,200
The player will never think about the fact that we actually moved him

343
00:14:16,200 --> 00:14:16,600
along X.

344
00:14:16,600 --> 00:14:20,600
And then Y in terms of what we did to the variables that contain his

345
00:14:20,600 --> 00:14:21,600
location, they will.

346
00:14:21,600 --> 00:14:25,800
Instead just see the fact that he moved from here to here and because

347
00:14:25,800 --> 00:14:28,900
they are human, they will assume that motion happened along the

348
00:14:28,900 --> 00:14:32,800
shortest path in between those two totally reasonable as assumption,

349
00:14:33,400 --> 00:14:36,500
but that's where the Phantom distance distance comes from.

350
00:14:36,600 --> 00:14:39,700
It would be twice as long if the player thought of it that way but

351
00:14:39,700 --> 00:14:41,500
it's not, they think of it this way.

352
00:14:41,500 --> 00:14:41,800
And this

353
00:14:41,900 --> 00:14:44,800
Is a shorter distance because he's going straight between the two

354
00:14:44,800 --> 00:14:47,000
points instead of taking that detour.

355
00:14:47,200 --> 00:14:48,900
So hopefully that makes some sense there.

356
00:14:52,500 --> 00:14:52,900
so,

357
00:14:56,200 --> 00:14:57,100
We could ask ourselves.

358
00:14:57,100 --> 00:14:59,800
Of course, if you remember your high school.

359
00:15:00,600 --> 00:15:01,800
I want to say it's geometry.

360
00:15:01,800 --> 00:15:03,200
I don't know if it's in trigonometry geometry.

361
00:15:03,200 --> 00:15:04,400
I'm not sure when they teach this.

362
00:15:05,000 --> 00:15:05,900
I don't really remember.

363
00:15:06,000 --> 00:15:09,800
But if you wanted to know, precisely how fast this was, right?

364
00:15:09,900 --> 00:15:12,400
I'm basically saying that I have some distance d, right?

365
00:15:12,400 --> 00:15:15,000
That he traveled and he traveled D&D, right?

366
00:15:15,000 --> 00:15:17,300
He traveled D this way and D that way.

367
00:15:17,500 --> 00:15:20,800
And then we want to know this thing that the player observed, right?

368
00:15:20,900 --> 00:15:21,400
I don't know what?

369
00:15:21,400 --> 00:15:21,900
We'll call this.

370
00:15:21,900 --> 00:15:24,800
Exactly will call this will call this m.

371
00:15:25,100 --> 00:15:29,000
I don't know why we want to know how if we wanted to know how long am

372
00:15:29,000 --> 00:15:29,600
was right.

373
00:15:29,600 --> 00:15:30,100
We want to say.

374
00:15:30,200 --> 00:15:30,700
What?

375
00:15:30,800 --> 00:15:34,300
What actually is the speed that the player ended up moving at, right?

376
00:15:34,500 --> 00:15:35,100
Who knows?

377
00:15:35,400 --> 00:15:38,300
Because we knew we moved him, d-des Direction D, and D this direction.

378
00:15:38,600 --> 00:15:40,900
So if the player was thinking about it in the stair, stair steps

379
00:15:41,400 --> 00:15:44,000
fashion, he would think he moved to d, right?

380
00:15:44,000 --> 00:15:46,500
He would move D, plus d.

381
00:15:46,500 --> 00:15:48,700
That's How far the player appears to have moved.

382
00:15:49,300 --> 00:15:51,100
But in this case they see this line.

383
00:15:51,100 --> 00:15:52,100
So, how big is that line?

384
00:15:52,100 --> 00:15:52,700
Right.

385
00:15:52,900 --> 00:15:57,100
Well, this is that Pythagorean theorem that maybe you you would have

386
00:15:57,100 --> 00:15:59,900
remembered from your from your grade school math.

387
00:16:00,200 --> 00:16:02,100
You notice, there is a Pythagorean theorem.

388
00:16:02,100 --> 00:16:04,700
It's a thing that basically says, if you have a triangle that looks

389
00:16:04,700 --> 00:16:05,900
like this, right?

390
00:16:05,900 --> 00:16:08,000
And you want, and it's a right triangle.

391
00:16:08,900 --> 00:16:12,900
Let's say so it looks like that right in a right triangle.

392
00:16:12,900 --> 00:16:16,500
I know that I can make sort of the Pythagorean theorem tells me that I

393
00:16:16,500 --> 00:16:19,200
can make it a quality about the lengths of the sides.

394
00:16:19,200 --> 00:16:19,500
Right?

395
00:16:19,500 --> 00:16:23,800
And that is the a squared plus b squared equals c squared that

396
00:16:23,800 --> 00:16:25,600
everyone hopefully can remember.

397
00:16:25,600 --> 00:16:27,300
It's a very famous thing, right?

398
00:16:27,300 --> 00:16:28,900
This is the Pythagorean theorem right here.

399
00:16:29,400 --> 00:16:30,100
Well, that would give

400
00:16:30,200 --> 00:16:31,700
Exactly the answer we want, right?

401
00:16:31,700 --> 00:16:33,600
We have exactly that are only differences.

402
00:16:33,600 --> 00:16:35,700
That are amd's actually happen to be the same.

403
00:16:35,700 --> 00:16:38,000
So we actually have an even weaker problem to solve here.

404
00:16:38,500 --> 00:16:42,200
So basically, if you think about it, we basically got D squared plus d

405
00:16:42,200 --> 00:16:44,600
squared equals m squared right?

406
00:16:44,700 --> 00:16:47,300
Is is a essentially what we would need to solve.

407
00:16:47,600 --> 00:16:51,600
And so that's just to D squared equals m squared, right?

408
00:16:52,400 --> 00:16:54,500
Or if we want to rearrange those terms.

409
00:16:54,500 --> 00:16:57,600
We need to basically solve for r m because that's what we want and

410
00:16:57,600 --> 00:16:58,300
it's squared here.

411
00:16:58,300 --> 00:17:00,000
So if we want to know what it actually,

412
00:17:00,100 --> 00:17:03,100
We m is we just have to square root this side, right?

413
00:17:03,100 --> 00:17:07,099
We just have to square root that and say well, it's to D Squared but

414
00:17:07,099 --> 00:17:08,500
square rooted, right?

415
00:17:09,099 --> 00:17:12,400
And what you'll see is that since this is already squared in here.

416
00:17:12,599 --> 00:17:13,200
Right?

417
00:17:13,500 --> 00:17:16,500
What you will see is actually this, we can simplify it even further

418
00:17:16,500 --> 00:17:20,599
and just pull the things out and say, well, to D Squared, we can pull

419
00:17:20,599 --> 00:17:23,000
the D out of the square root by actually Square rooting it.

420
00:17:23,000 --> 00:17:25,700
And just say that it's D route to, right?

421
00:17:25,700 --> 00:17:28,800
We can't really simplify that any more because root 2 is not going to

422
00:17:28,800 --> 00:17:30,100
be a whole number that's going to be, you know.

423
00:17:30,900 --> 00:17:33,100
An actual long, long decimal.

424
00:17:34,100 --> 00:17:36,400
But that, that right there is the answer.

425
00:17:36,600 --> 00:17:39,400
And so, what you can see, is, if you have a movement where you're

426
00:17:39,400 --> 00:17:44,000
moving by x and by Y, in by a certain amount, which is D, then the

427
00:17:44,000 --> 00:17:47,000
actual movement, when the player starts walking by the diagonal, the

428
00:17:47,000 --> 00:17:51,300
actual movement that they will appear to have is root 2 when they

429
00:17:51,300 --> 00:17:53,300
start walking on the diagonal, right?

430
00:17:53,300 --> 00:17:55,900
And so route to if we actually do that.

431
00:17:55,900 --> 00:17:58,600
Jump over here for Emax fans, and do quick cow.

432
00:17:58,700 --> 00:17:59,700
I don't know if it can do this.

433
00:17:59,700 --> 00:17:59,900
I

434
00:18:00,000 --> 00:18:01,200
The square root of two.

435
00:18:01,900 --> 00:18:03,600
It can 1.4.

436
00:18:04,000 --> 00:18:04,300
Right?

437
00:18:04,300 --> 00:18:05,700
Is roughly where it's at.

438
00:18:06,100 --> 00:18:10,500
So basically, they're moving at one point for roughly 1 .4 X.

439
00:18:10,500 --> 00:18:14,300
The, the speed that they should be moving at when we're, when they're

440
00:18:14,300 --> 00:18:16,300
going in that direction, right?

441
00:18:17,300 --> 00:18:17,800
So there you go.

442
00:18:17,800 --> 00:18:22,300
Very, very simple, you know, really really basic math, like anything.

443
00:18:22,400 --> 00:18:24,000
Like I said, it's something that you would have learned in high

444
00:18:24,000 --> 00:18:26,900
school, but it's, you know, that's just that's game development.

445
00:18:26,900 --> 00:18:28,800
Even very, very basic math is important.

446
00:18:32,000 --> 00:18:33,300
So that's how fast our guys going.

447
00:18:33,300 --> 00:18:37,900
Now, what we would like to do is say that, for example, he always goes

448
00:18:37,900 --> 00:18:38,300
D.

449
00:18:38,700 --> 00:18:41,700
So if he goes this way, he goes D, if it goes that way, he goes D and

450
00:18:41,700 --> 00:18:44,200
if he goes on the diagonal, he still goes D.

451
00:18:44,200 --> 00:18:47,300
So we're going to basically say we wanted to kind of be on a circle

452
00:18:47,700 --> 00:18:51,400
and we want to kind of make it so that you know, we truncate off, we

453
00:18:51,400 --> 00:18:53,500
get rid of this extra that we were adding there.

454
00:18:53,500 --> 00:18:56,300
We want to make that Vector actually be length d.

455
00:18:57,300 --> 00:19:01,500
So, here's a question for you without doing any Vector stuff without

456
00:19:01,500 --> 00:19:03,000
doing anything yet.

457
00:19:03,800 --> 00:19:05,200
Let's ask the question.

458
00:19:06,200 --> 00:19:07,500
What would we do?

459
00:19:07,700 --> 00:19:10,000
And you guys should all be able to answer this yourselves if you want

460
00:19:10,000 --> 00:19:12,300
to just pause the stream for a second if you want to go think about it

461
00:19:12,300 --> 00:19:13,500
because you might take a little while.

462
00:19:13,500 --> 00:19:15,300
But what would you do again?

463
00:19:15,300 --> 00:19:16,200
Just using high school math.

464
00:19:16,200 --> 00:19:16,900
Nothing fancy here.

465
00:19:16,900 --> 00:19:18,400
Don't even need to use the term vector.

466
00:19:19,500 --> 00:19:20,400
What would we do?

467
00:19:21,200 --> 00:19:24,800
If we actually wanted to figure out how far to move the guy when he

468
00:19:24,800 --> 00:19:25,500
was on the diagonal?

469
00:19:25,500 --> 00:19:27,600
So we're actually just put with we're just going to straight up put an

470
00:19:27,600 --> 00:19:30,900
if statement in our code and say, if the guys moving on a diagonal we

471
00:19:30,900 --> 00:19:32,700
will reduce D.

472
00:19:32,800 --> 00:19:36,500
So instead of moving him by D player, XD player, why we'll move him

473
00:19:36,500 --> 00:19:39,700
by, like some portion of player ex-player.

474
00:19:39,700 --> 00:19:41,600
White will just will straight up multiply this.

475
00:19:41,600 --> 00:19:42,600
In the case of a diagonal.

476
00:19:42,900 --> 00:19:48,900
What would be multiplying by to make it be only D law, right?

477
00:19:49,200 --> 00:19:50,700
We want this to be D long.

478
00:19:52,600 --> 00:19:55,100
Now, I'll give people second puzzle stream if they wish to, and then

479
00:19:55,100 --> 00:19:57,000
I'll go ahead and talk about that.

480
00:20:03,100 --> 00:20:03,600
All right.

481
00:20:04,800 --> 00:20:05,400
All right, ready?

482
00:20:08,000 --> 00:20:08,400
There we go.

483
00:20:10,000 --> 00:20:12,200
Okay, so basically what we're talking about here.

484
00:20:14,400 --> 00:20:16,900
Is we have a situation?

485
00:20:18,800 --> 00:20:19,400
Right.

486
00:20:19,600 --> 00:20:20,800
We've got D here.

487
00:20:20,900 --> 00:20:21,900
We've got D here.

488
00:20:22,200 --> 00:20:23,200
That's what we've been doing.

489
00:20:23,400 --> 00:20:26,000
And now we want to construct another d, right.

490
00:20:26,000 --> 00:20:28,900
We want to construct a d, but we want to construct it.

491
00:20:28,900 --> 00:20:30,100
Well, that's an awful Circle.

492
00:20:30,200 --> 00:20:31,000
We want to construct it.

493
00:20:31,000 --> 00:20:33,800
So, essentially, we have another d,

494
00:20:35,000 --> 00:20:36,400
Right here, right?

495
00:20:36,400 --> 00:20:40,600
So, we want to be able to construct the diagonal, the X and Y.

496
00:20:40,700 --> 00:20:43,600
That will give us after they move the stair step pattern.

497
00:20:43,800 --> 00:20:48,400
Right will actually give us a total length of D instead of each side

498
00:20:48,400 --> 00:20:49,300
of the triangle being D.

499
00:20:49,300 --> 00:20:52,800
Because before what we had right is we had each side of the triangle

500
00:20:52,800 --> 00:20:55,800
being D and that's what lid that, you know, this was D and this was D

501
00:20:55,800 --> 00:20:58,000
and that's what led us to the problem.

502
00:20:58,600 --> 00:20:59,900
And so basically what we want to do is

503
00:21:00,000 --> 00:21:03,800
Okay, for this tiny triangle here, where D is actually here.

504
00:21:04,800 --> 00:21:06,200
What would we have to make these?

505
00:21:06,400 --> 00:21:08,700
Well, like I said, I already told you the answer.

506
00:21:08,800 --> 00:21:09,200
Actually.

507
00:21:09,200 --> 00:21:11,000
I just didn't want to give away too much of a hint, right?

508
00:21:11,000 --> 00:21:13,900
But I already said a squared plus b squared equals c squared

509
00:21:13,900 --> 00:21:15,400
Pythagorean theorem, right?

510
00:21:15,600 --> 00:21:18,700
So we know that we have that a triangle again.

511
00:21:18,700 --> 00:21:21,300
We know that we have our triangle here again, right?

512
00:21:21,900 --> 00:21:24,100
We saying that we want this to be D.

513
00:21:24,300 --> 00:21:27,200
And now I'm asking you, what would I put here in here?

514
00:21:27,400 --> 00:21:29,300
Well, we know we want to move on the diagonal.

515
00:21:29,300 --> 00:21:29,700
Exactly.

516
00:21:29,700 --> 00:21:29,800
So,

517
00:21:30,000 --> 00:21:32,500
We know that they're going to be the same value, right?

518
00:21:32,600 --> 00:21:36,300
And so whatever this value is, I'll call it V I guess I don't know.

519
00:21:36,700 --> 00:21:37,800
Unless you want something else.

520
00:21:39,400 --> 00:21:41,500
I can just use the Pythagorean theorem again, just in the other

521
00:21:41,500 --> 00:21:44,500
direction before I used it to figure out what D was from the two

522
00:21:44,500 --> 00:21:46,600
sides, but I could just do the reverse right?

523
00:21:46,600 --> 00:21:50,300
I can just say well now V squared plus v squared equals c squared

524
00:21:50,400 --> 00:21:50,600
right?

525
00:21:50,600 --> 00:21:53,900
Again because this is my a this is my B and this is my C, right.

526
00:21:54,300 --> 00:21:56,300
Sorry D Squared, right?

527
00:21:56,300 --> 00:21:59,800
Just just copying those cut and paste it into the equation.

528
00:22:00,000 --> 00:22:04,500
Cutting copypasta Works in math just like it does in encode.

529
00:22:04,500 --> 00:22:05,000
Right?

530
00:22:05,200 --> 00:22:09,100
So basically just got to V squared equals D Squared or V squared

531
00:22:09,500 --> 00:22:11,900
equals D Squared over 2, right?

532
00:22:11,900 --> 00:22:17,500
Or b equals root D Squared over 2, right.

533
00:22:19,100 --> 00:22:19,800
And that's all real.

534
00:22:19,800 --> 00:22:20,800
That's that's it.

535
00:22:20,800 --> 00:22:22,100
That's all we really talking about.

536
00:22:22,200 --> 00:22:25,000
That's the entirety of that's the entirety of thing.

537
00:22:25,100 --> 00:22:26,400
And again, I'm really bad at math.

538
00:22:26,400 --> 00:22:29,200
I say this all the time but I mean it I make mistakes in these sorts

539
00:22:29,200 --> 00:22:29,800
of things a lot.

540
00:22:29,900 --> 00:22:33,000
So I'll just go ahead and even reinforce that by saying, let's plug it

541
00:22:33,000 --> 00:22:36,100
back in and make sure, make sure I didn't make a careless error in

542
00:22:36,300 --> 00:22:37,000
copying the terms.

543
00:22:37,000 --> 00:22:39,700
Because like I said, I will, if you don't see me, make one on the

544
00:22:39,700 --> 00:22:40,100
stream.

545
00:22:40,100 --> 00:22:40,800
I will be shocked.

546
00:22:40,800 --> 00:22:42,400
I will, I will make them often.

547
00:22:43,200 --> 00:22:46,800
And so anyway, if I have D Squared over 2 squared, I'm just taking

548
00:22:46,800 --> 00:22:47,800
this equation.

549
00:22:48,600 --> 00:22:54,100
Plus D Squared over 2 squared that should equal D Squared, right?

550
00:22:54,600 --> 00:22:57,300
So, squaring this guy, it just removes the square root.

551
00:22:57,300 --> 00:22:59,800
So I have D Squared over 2, plus D Squared.

552
00:23:00,000 --> 00:23:02,300
Over 2 equals D Squared, right.

553
00:23:03,200 --> 00:23:06,500
And then I could multiply Everyone by 2.

554
00:23:06,500 --> 00:23:07,300
I think here.

555
00:23:07,300 --> 00:23:08,100
Is that correct?

556
00:23:08,100 --> 00:23:08,500
Well, oh no.

557
00:23:08,500 --> 00:23:09,800
These guys add together, right?

558
00:23:09,800 --> 00:23:16,300
So then I have basically two D Squared over 2, equals D Squared and

559
00:23:16,300 --> 00:23:17,700
then I multiply that out.

560
00:23:17,900 --> 00:23:18,700
And that's, that's right.

561
00:23:18,700 --> 00:23:21,800
I mean you can you can cross out the twos cross out the squared equals

562
00:23:21,800 --> 00:23:22,200
D.

563
00:23:22,200 --> 00:23:26,400
And that's that's yeah, so that that seems that seems right to me.

564
00:23:27,000 --> 00:23:28,000
Let's, let's assume that.

565
00:23:28,000 --> 00:23:29,800
That's a, that's good enough match.

566
00:23:29,900 --> 00:23:30,400
Checking for now.

567
00:23:30,400 --> 00:23:33,100
But those of you who are good at math on the stream.

568
00:23:33,100 --> 00:23:37,000
You will have to basically take note since I don't want to cheat and

569
00:23:37,000 --> 00:23:39,500
look at the stream, take notes on everything I do here and you're

570
00:23:39,500 --> 00:23:40,800
welcome to basically post at the end.

571
00:23:40,800 --> 00:23:44,000
Maybe on a forums like here is Corrections where Casey made a mistake

572
00:23:44,000 --> 00:23:46,300
that would be probably pretty helpful for people trying to learn.

573
00:23:46,300 --> 00:23:49,200
So, anyway, if we wanted to implement something, we remove the right

574
00:23:49,200 --> 00:23:49,500
speed.

575
00:23:49,500 --> 00:23:50,500
We now know what we would do.

576
00:23:50,500 --> 00:23:53,300
We would use D Squared over 2 square root it.

577
00:23:53,300 --> 00:23:54,000
Basically.

578
00:23:54,000 --> 00:23:57,900
And that actually, again, can be simplified further if we wanted to

579
00:23:57,900 --> 00:23:59,900
because that square root we can

580
00:24:00,000 --> 00:24:00,700
Pull out.

581
00:24:00,700 --> 00:24:03,900
We could basically treat that as a 1/2 D Squared, right?

582
00:24:03,900 --> 00:24:07,100
That's what that is, which means we can pull out the, the D again,

583
00:24:07,100 --> 00:24:07,900
just like we did.

584
00:24:08,000 --> 00:24:13,000
So it's basically just d square root of 1/2, right?

585
00:24:13,500 --> 00:24:18,000
So all that means is since we're already doing the D quote unquote,

586
00:24:18,000 --> 00:24:18,200
right?

587
00:24:18,200 --> 00:24:19,000
This is our D.

588
00:24:19,000 --> 00:24:19,500
In this case.

589
00:24:19,500 --> 00:24:22,200
This is the amount we wanted to move by in the case that he was

590
00:24:22,200 --> 00:24:22,500
moving.

591
00:24:22,500 --> 00:24:23,200
Diagonally.

592
00:24:23,300 --> 00:24:28,400
All we really have to do is figure out what's this square root of 1/2,

593
00:24:28,400 --> 00:24:29,000
right?

594
00:24:29,100 --> 00:24:29,800
So, what's this?

595
00:24:30,000 --> 00:24:32,100
Square root of 0.5., Right?

596
00:24:32,100 --> 00:24:32,500
That's all.

597
00:24:32,500 --> 00:24:33,600
We actually need to know.

598
00:24:33,600 --> 00:24:34,100
Can that gooey?

599
00:24:34,100 --> 00:24:35,300
Paste that in there, yet?

600
00:24:36,000 --> 00:24:40,500
Basically, that's all we need to do is multiply our value by this, in

601
00:24:40,500 --> 00:24:41,800
the case where he's moving diagonal.

602
00:24:41,800 --> 00:24:43,700
We just say, okay if he's moving to agonal.

603
00:24:43,800 --> 00:24:47,900
We just multiply our values by that value, right?

604
00:24:49,800 --> 00:24:50,300
There we go.

605
00:24:51,400 --> 00:24:57,100
And so, we'll say, if, if D player X and D player, why?

606
00:24:59,100 --> 00:25:02,800
Right, or I'll maybe I'll be a little more explicit here if they're

607
00:25:02,800 --> 00:25:04,000
not equal to 0.

608
00:25:06,100 --> 00:25:09,100
So, if both of them are set, then we'll do that.

609
00:25:09,100 --> 00:25:11,700
And that would actually, I believe, if we've done the math correctly,

610
00:25:12,100 --> 00:25:13,900
that will correct that motion.

611
00:25:13,900 --> 00:25:18,100
And now, you can kind of see how he basically goes at a much slower

612
00:25:18,100 --> 00:25:22,800
rate than he was going before when he moves downward.

613
00:25:23,000 --> 00:25:23,500
There we go.

614
00:25:24,300 --> 00:25:27,300
So, now, of course, I can't actually say whether it's exactly correct

615
00:25:27,300 --> 00:25:31,700
or not because, well, kind of hard to eyeball these things.

616
00:25:32,400 --> 00:25:33,300
To be honest with you.

617
00:25:33,700 --> 00:25:34,600
I think he is.

618
00:25:34,600 --> 00:25:35,700
I don't know.

619
00:25:36,200 --> 00:25:39,300
It's hard to say, maybe he is.

620
00:25:42,400 --> 00:25:44,700
I wish there was some way I could easily tell.

621
00:25:46,200 --> 00:25:47,000
But I don't really know.

622
00:25:49,100 --> 00:25:54,700
Yeah, hard to say hard to say, but there you go.

623
00:25:56,800 --> 00:25:57,700
I'll double-check the Stream.

624
00:26:03,000 --> 00:26:05,700
Yeah, it looks like looks like nobody.

625
00:26:05,700 --> 00:26:06,300
None of the math.

626
00:26:06,300 --> 00:26:07,800
People are like, oh my God, what did he do?

627
00:26:07,800 --> 00:26:09,300
So I think that's a good, good sign.

628
00:26:09,800 --> 00:26:10,000
All right.

629
00:26:10,000 --> 00:26:13,400
So, anyway, now that we've got that straightened out, we can get back

630
00:26:13,400 --> 00:26:14,500
to sort of the topic at hand.

631
00:26:14,500 --> 00:26:17,100
Although that all kind of was leading up to the topic at hand, which

632
00:26:17,100 --> 00:26:20,400
is again, if you look at this, if you keep looking at this, we're

633
00:26:20,400 --> 00:26:23,300
constantly talking about these two valuables variables together.

634
00:26:23,300 --> 00:26:26,700
And so again that kind of motivates us to start thinking about them a

635
00:26:26,700 --> 00:26:28,200
little more cleanly.

636
00:26:28,600 --> 00:26:31,600
So basically what we like to do with vectors is we like to start

637
00:26:31,600 --> 00:26:32,600
having ways of

638
00:26:32,800 --> 00:26:35,500
Not having to do all of this work all the time.

639
00:26:35,800 --> 00:26:37,400
Just to do basic operations.

640
00:26:37,400 --> 00:26:39,600
Like, make sure that something is the right length, right?

641
00:26:39,600 --> 00:26:40,000
Ideally.

642
00:26:40,000 --> 00:26:43,700
What we'd like to do is be able to say, let's create a system of tools

643
00:26:43,700 --> 00:26:45,300
that allow us to quickly do this.

644
00:26:45,300 --> 00:26:46,500
So we don't have to be writing math.

645
00:26:46,500 --> 00:26:47,000
All the time.

646
00:26:47,000 --> 00:26:49,500
We can just have basically a series of operations.

647
00:26:49,500 --> 00:26:53,900
We can conceptualize that are things like make this be this long or

648
00:26:53,900 --> 00:26:57,400
make this be perpendicular to that, you know, those sorts of things.

649
00:26:57,400 --> 00:26:59,300
We want to be able to start thinking about them in those ways.

650
00:26:59,300 --> 00:26:59,800
And that is a

651
00:27:00,300 --> 00:27:03,500
Of what vectors also give us is that sort of mental good, conceptual

652
00:27:03,500 --> 00:27:05,500
and semantic, sort of simplification.

653
00:27:05,500 --> 00:27:08,000
So that when we're working on game code, we don't have to think at

654
00:27:08,000 --> 00:27:09,700
this low level, right?

655
00:27:13,000 --> 00:27:16,300
We can think at a higher level kind of like see helps us go a little

656
00:27:16,300 --> 00:27:17,900
faster than assembly right.

657
00:27:18,200 --> 00:27:21,400
Basically going up two vectors helps us be faster than its what's

658
00:27:21,400 --> 00:27:24,900
called scalar scalar is when you're doing it as a single values

659
00:27:24,900 --> 00:27:26,900
instead of being combined.

660
00:27:27,200 --> 00:27:28,600
All right, so let's talk about those.

661
00:27:28,800 --> 00:27:30,300
Let's talk about vectors little bit.

662
00:27:30,800 --> 00:27:35,300
So basically, like, as I've already alluded to vectors are very much

663
00:27:35,300 --> 00:27:39,500
just about putting together, multiple pieces of information that are

664
00:27:39,500 --> 00:27:41,800
coupled in some way, because you want to operate on them and work on

665
00:27:41,800 --> 00:27:42,000
them.

666
00:27:42,200 --> 00:27:42,500
Other.

667
00:27:42,600 --> 00:27:45,000
And so, you've already kind of see me draw the diagram because we just

668
00:27:45,000 --> 00:27:47,100
started talking about it, even though I wasn't saying Vector,

669
00:27:47,100 --> 00:27:49,100
specifically, we are actually already just to draw one.

670
00:27:49,500 --> 00:27:53,900
If I have something like that Vector, for the diagonal motion, where

671
00:27:53,900 --> 00:27:56,400
basically, you can think about a stair step, right?

672
00:27:56,400 --> 00:27:59,500
A stair-step that stair, step pattern that right angle stepping

673
00:27:59,500 --> 00:28:00,000
pattern.

674
00:28:00,700 --> 00:28:03,600
That basically is an X movement followed by.

675
00:28:03,600 --> 00:28:06,200
A why movement that gets to me to my final location.

676
00:28:07,000 --> 00:28:09,600
Well, basically what vectors are doing is they're letting us start to

677
00:28:09,600 --> 00:28:11,900
think about the this part.

678
00:28:12,100 --> 00:28:12,800
Instead.

679
00:28:12,800 --> 00:28:15,400
So instead of thinking about things in terms of this stair, step.

680
00:28:15,400 --> 00:28:18,400
We can now just start thinking of them as the as the direct motion

681
00:28:18,800 --> 00:28:23,400
from the origin directly, to whatever the final destination is, right?

682
00:28:23,500 --> 00:28:25,900
And that works the same pretty much, no matter.

683
00:28:25,900 --> 00:28:27,500
How many dimensions you want to have.

684
00:28:27,700 --> 00:28:31,300
In terms of we're just talking about basic euclidean basic Cartesian

685
00:28:31,300 --> 00:28:34,100
coordinates or whatever, you know, simple as long as things are

686
00:28:34,100 --> 00:28:34,900
relatively simple.

687
00:28:34,900 --> 00:28:37,400
And we're not talking about on the surface of a sphere or on the

688
00:28:37,400 --> 00:28:40,300
surface of a Klein bottle or God knows what else might be happening in

689
00:28:40,600 --> 00:28:41,700
in real math world.

690
00:28:41,700 --> 00:28:41,900
If we

691
00:28:42,100 --> 00:28:44,400
What kind of talking about this at a basic level?

692
00:28:45,000 --> 00:28:46,800
This actually works pretty cleanly.

693
00:28:46,800 --> 00:28:48,100
No matter how many dimensions you have.

694
00:28:48,100 --> 00:28:50,400
So, you know, if we wanted to start talking about three-dimensional

695
00:28:50,400 --> 00:28:51,200
stuff as well.

696
00:28:51,700 --> 00:28:54,600
The principal is pretty much exactly the same nothing really changes.

697
00:28:55,000 --> 00:28:58,300
You just have a third axis and you third stair, step pattern.

698
00:28:58,400 --> 00:29:02,800
So instead of me just going along X and then up along Y, and calling

699
00:29:02,800 --> 00:29:04,400
that the point, right?

700
00:29:04,500 --> 00:29:08,600
I also now, move out, along, Z some distance and get a diagonal point,

701
00:29:08,600 --> 00:29:11,700
that goes from the origin out to wherever that is, right, so, it's

702
00:29:11,700 --> 00:29:12,000
basically,

703
00:29:12,100 --> 00:29:15,000
Be like 123 kind of a thing, right?

704
00:29:15,500 --> 00:29:18,100
Where there's two right angle, stair, steps, that happen.

705
00:29:18,500 --> 00:29:20,100
And then I finally get out to a vector.

706
00:29:20,400 --> 00:29:23,400
But the at the end of the day, the concept is still exactly the same.

707
00:29:23,400 --> 00:29:26,100
It's just a motion along X motion along, y motion along Z.

708
00:29:27,000 --> 00:29:31,000
And so no matter how long, our Vector gets right, no matter how many

709
00:29:31,000 --> 00:29:34,100
elements we have ABCDEFG, right?

710
00:29:34,100 --> 00:29:37,200
You know, so maybe we have vectors that are XYZ vectors and that's

711
00:29:37,200 --> 00:29:39,200
what we're used to dealing with in games, but we can have them as long

712
00:29:39,200 --> 00:29:41,900
as we want and we can conceptualize those as multi.

713
00:29:42,100 --> 00:29:44,900
Dimensional things even that go up to four, five, six, seven, eight,

714
00:29:44,900 --> 00:29:48,400
how our main Dimensions, we want that are all just about that same

715
00:29:48,400 --> 00:29:49,600
process, right?

716
00:29:49,700 --> 00:29:51,900
And again, there's lots of other ways to conceptualize vectors.

717
00:29:51,900 --> 00:29:54,800
They don't have to be about these sort of right angle coordinate

718
00:29:54,800 --> 00:29:56,200
systems that I'm talking about.

719
00:29:56,200 --> 00:29:57,500
They can be a lot of other things, too.

720
00:29:57,500 --> 00:29:58,800
Depending on what you need them to do.

721
00:30:00,200 --> 00:30:03,500
but this is really what we care about for our purposes is vectors that

722
00:30:03,500 --> 00:30:06,200
are constructed at these right angle or there's called orthogonal when

723
00:30:06,200 --> 00:30:11,600
you basically have these coordinate systems that are nicely sort of

724
00:30:12,100 --> 00:30:15,200
right at right angles to each other where X y&z or are all right

725
00:30:15,200 --> 00:30:17,900
angles to each other and they make this nice stair, step pattern that

726
00:30:17,900 --> 00:30:20,600
you can conceptualize again, doesn't have to be the case for

727
00:30:20,600 --> 00:30:22,800
coordinate systems, but it's the kind that we typically deal with

728
00:30:25,300 --> 00:30:27,500
Because they have a lot of nice properties that make them easy to deal

729
00:30:27,500 --> 00:30:27,800
with.

730
00:30:28,700 --> 00:30:33,800
All right, so all we're really doing when we say Vector right is we're

731
00:30:33,800 --> 00:30:35,000
talking about that combination.

732
00:30:35,000 --> 00:30:38,500
So in this case, we want to start talking about X combined with Y and

733
00:30:38,500 --> 00:30:41,200
the typical way of writing it is like this where it with two vertical

734
00:30:41,200 --> 00:30:41,600
bars.

735
00:30:41,600 --> 00:30:42,800
And then the things go vertically.

736
00:30:44,000 --> 00:30:45,900
To be completely honest with you.

737
00:30:45,900 --> 00:30:50,600
I don't really know the history of why vertical is more more.

738
00:30:50,600 --> 00:30:54,200
Typically the way that like vectors and points in 3D space are

739
00:30:54,200 --> 00:30:54,600
written.

740
00:30:55,100 --> 00:30:56,600
As opposed to horizontal.

741
00:30:56,600 --> 00:31:00,200
Like, this is also a vector, right?

742
00:31:00,800 --> 00:31:03,000
Basically, you can think of them as matrices.

743
00:31:03,000 --> 00:31:05,600
Write a matrix is basically you make two bars, right?

744
00:31:05,600 --> 00:31:07,600
And you start filling in entries into it and it could be two

745
00:31:07,600 --> 00:31:09,200
dimensional or even more.

746
00:31:09,200 --> 00:31:10,400
Could be three-dimensional, whatever.

747
00:31:10,600 --> 00:31:12,600
And a vector is, kind of like a matrix.

748
00:31:12,600 --> 00:31:14,700
That only has a row or a column.

749
00:31:14,700 --> 00:31:17,500
Now why you would pick rows or columns specifically?

750
00:31:18,900 --> 00:31:22,900
I mean, there's no real difference between the two, it just inverts

751
00:31:22,900 --> 00:31:25,600
kind of how you look at all your operations as you'll see as we will

752
00:31:25,600 --> 00:31:26,700
see when we go forward.

753
00:31:27,000 --> 00:31:30,400
And so somebody at some point and if you know, math history, I'm sure

754
00:31:30,400 --> 00:31:31,600
you would probably know this.

755
00:31:31,600 --> 00:31:35,900
And I like I said, I don't somebody picked this as the preferred

756
00:31:35,900 --> 00:31:39,800
method for talking about vectors in 3D space.

757
00:31:40,000 --> 00:31:41,700
And in fact, this.

758
00:31:41,700 --> 00:31:44,400
So so this is what you would typically expect to see written.

759
00:31:44,600 --> 00:31:46,900
And when you see this, you're actually talking about a different type

760
00:31:46,900 --> 00:31:48,200
of vector and we can talk about that.

761
00:31:48,500 --> 00:31:53,900
More a little bit later, but basically, once you decide what your

762
00:31:53,900 --> 00:31:57,500
convention is for, how you're going to write, if you write things

763
00:31:57,500 --> 00:32:00,600
vertically, then writing things horizontally actually mean something

764
00:32:00,600 --> 00:32:01,100
different.

765
00:32:01,100 --> 00:32:02,500
And if you think about it, it makes some sense.

766
00:32:02,500 --> 00:32:04,000
Again, jumping ahead a little bit.

767
00:32:04,200 --> 00:32:08,000
But if you have a, let's say I had a matrix, you know, a two-by-two

768
00:32:08,100 --> 00:32:08,800
array of numbers.

769
00:32:08,800 --> 00:32:14,700
Let's say this is a column of that Matrix, but this would be a row of

770
00:32:14,700 --> 00:32:15,300
that Matrix.

771
00:32:15,300 --> 00:32:18,300
And so you can kind of think of this as being like the

772
00:32:18,400 --> 00:32:21,600
L'm of a matrix and this is being like a row of a matrix.

773
00:32:21,800 --> 00:32:25,400
And so when we actually talked about doing operations on these later,

774
00:32:25,400 --> 00:32:28,500
it matters whether you're talking about something that's like a column

775
00:32:28,500 --> 00:32:33,300
or like a row in terms of who affects who when they are operated on.

776
00:32:33,700 --> 00:32:36,000
And so that's why I say the notation is a little bit.

777
00:32:36,000 --> 00:32:37,600
It could be a little bit daunting.

778
00:32:37,600 --> 00:32:38,500
It can be a little bit tricky.

779
00:32:38,500 --> 00:32:39,100
It's true.

780
00:32:39,400 --> 00:32:41,800
But basically for right now all you really need to know until we get a

781
00:32:41,800 --> 00:32:42,800
little bit further up.

782
00:32:42,900 --> 00:32:45,600
Is that the way that we want to write these for now to be consistent?

783
00:32:45,600 --> 00:32:48,300
Mostly with mathematics, is that we're going to put them?

784
00:32:48,400 --> 00:32:49,400
I'm vertically like that.

785
00:32:49,500 --> 00:32:51,500
It's annoying in code because you can't make code vertical because

786
00:32:51,500 --> 00:32:55,300
editors are from 1970 and can't write a stupid vertical Vector, in the

787
00:32:55,300 --> 00:32:57,800
middle of your code for some reason, but that's where we are.

788
00:32:58,200 --> 00:32:59,800
All right, so basically,

789
00:33:00,000 --> 00:33:03,500
Talk about again is putting starting talk about this object and we're

790
00:33:03,500 --> 00:33:04,900
going to write this object like this.

791
00:33:05,000 --> 00:33:08,700
Whatever its X step is and whatever its why step is we put the X in

792
00:33:08,700 --> 00:33:11,400
the top and the y in the bottom and that's our Vector, right?

793
00:33:11,500 --> 00:33:12,300
Everyone's happy.

794
00:33:13,000 --> 00:33:16,000
And then once we have that, we can start to Define operations on this

795
00:33:16,000 --> 00:33:17,500
thing as an object.

796
00:33:17,900 --> 00:33:22,400
For example, let's suppose that we had two of these, right?

797
00:33:22,400 --> 00:33:25,000
So I'm going to call this x sub 2 x sub.

798
00:33:25,000 --> 00:33:26,600
Well, actually, let's make it x sub 1.

799
00:33:26,600 --> 00:33:29,900
This is the first one x sub 1, and then I'm going to talk.

800
00:33:30,000 --> 00:33:30,900
About another one here.

801
00:33:30,900 --> 00:33:32,900
That's x sub 2, y sub 2.

802
00:33:33,000 --> 00:33:33,500
Right?

803
00:33:33,500 --> 00:33:37,000
So, here's my x sub 1, here's my x sub 1 there, and let's say I have

804
00:33:37,000 --> 00:33:38,300
another Vector, right?

805
00:33:38,300 --> 00:33:40,100
That's like this actually, let me make it a little bit.

806
00:33:40,100 --> 00:33:43,500
What whackier, let's say that it's pointing, like almost straight up.

807
00:33:43,500 --> 00:33:45,200
So it's like this, right?

808
00:33:45,400 --> 00:33:47,000
And so here is my right.

809
00:33:47,000 --> 00:33:48,800
Here's my x sub 2, right?

810
00:33:48,800 --> 00:33:50,000
It kind of goes over that way.

811
00:33:50,500 --> 00:33:53,900
And here's my y sub 2, which is almost as close as close to.

812
00:33:53,900 --> 00:33:55,600
It's a little bit less than that one, right?

813
00:33:56,500 --> 00:33:59,100
Well, again, like I said, we're just talking about the object here.

814
00:33:59,100 --> 00:34:04,700
But the point, that's very useful to sort of emphasize at this point

815
00:34:04,800 --> 00:34:07,600
is even once we sort of talked about these as being composite like

816
00:34:07,600 --> 00:34:07,800
this.

817
00:34:07,800 --> 00:34:10,300
We can already start to do some interesting operations with them.

818
00:34:10,400 --> 00:34:11,400
For example, right?

819
00:34:11,400 --> 00:34:13,199
We can add two vectors together.

820
00:34:14,000 --> 00:34:16,699
And basically that just does exactly what you would expect.

821
00:34:16,699 --> 00:34:20,500
It puts one vector at the tip of another vector and finds the

822
00:34:20,500 --> 00:34:21,300
resulting point, right?

823
00:34:21,300 --> 00:34:22,800
It would basically move this guy.

824
00:34:23,100 --> 00:34:26,100
It would say, what if he was at the end of x sub 1, right?

825
00:34:26,199 --> 00:34:30,699
To start at x sub 1 y sub 1 and I'm going to move by this amount,

826
00:34:30,699 --> 00:34:30,900
right?

827
00:34:30,900 --> 00:34:32,100
Which is this Vector here.

828
00:34:32,199 --> 00:34:35,199
So my new point is here and the resulting Vector, right?

829
00:34:35,199 --> 00:34:38,000
Which I'll call x sub 3, y sub 3, right?

830
00:34:38,100 --> 00:34:39,300
The resulting Vector.

831
00:34:39,800 --> 00:34:41,000
Is this Vector right here?

832
00:34:42,199 --> 00:34:46,699
Right now, you know, this intuitively because we already have done

833
00:34:46,699 --> 00:34:47,800
this in the code to some degree.

834
00:34:47,800 --> 00:34:48,900
We've already done.

835
00:34:48,900 --> 00:34:51,199
X's, plus, X, is equals x is y, is plus y.

836
00:34:51,199 --> 00:34:52,000
Equals y is, right.

837
00:34:52,000 --> 00:34:53,500
That's how we removing our guy.

838
00:34:54,000 --> 00:34:55,699
So, we already expect this to be true.

839
00:34:55,699 --> 00:34:59,300
We already expect to be able to take some point in 3D space and add

840
00:34:59,300 --> 00:35:04,700
some other point basically and have them be a raid tip to tip like

841
00:35:04,700 --> 00:35:05,100
that.

842
00:35:05,900 --> 00:35:08,300
Now, it's worth noting that sometimes there's a distinction between

843
00:35:08,300 --> 00:35:10,800
points and vectors and we can kind of get into that a little bit

844
00:35:10,800 --> 00:35:11,800
later, but for now,

845
00:35:12,000 --> 00:35:17,300
Can kind of think as vectors as defining either a point or a like a

846
00:35:17,300 --> 00:35:18,500
Delta, right?

847
00:35:18,700 --> 00:35:23,400
So we could think of this as being a point and this as being like a

848
00:35:23,400 --> 00:35:26,600
Delta and we are applying the Delta to the point, right?

849
00:35:26,600 --> 00:35:29,200
But really they're both the same type of object as far as we're

850
00:35:29,200 --> 00:35:31,800
concerned and they can be they can be interchangeable.

851
00:35:32,300 --> 00:35:34,700
That's not strictly true in all mathematics.

852
00:35:34,700 --> 00:35:37,900
And depending on how you want to talk about these things.

853
00:35:37,900 --> 00:35:38,500
Formerly.

854
00:35:38,800 --> 00:35:41,800
You may actually have a difference between points and vectors.

855
00:35:41,900 --> 00:35:46,100
For example, that that make them behave differently, but we're not

856
00:35:46,100 --> 00:35:47,300
really going to look at that right now.

857
00:35:47,300 --> 00:35:49,000
That's kind of a little bit past.

858
00:35:49,000 --> 00:35:54,100
What we're trying to do at the moment, but it's worth mentioning.

859
00:35:55,300 --> 00:35:57,300
So we basically got a single type of object that we're using to

860
00:35:57,300 --> 00:35:58,300
represent both of these.

861
00:35:59,200 --> 00:35:59,800
All right.

862
00:36:00,100 --> 00:36:02,800
Um, so again, same would be true for some traction.

863
00:36:03,000 --> 00:36:03,400
Basically.

864
00:36:03,400 --> 00:36:06,600
What subtraction would do is it says, what if I go in the opposite

865
00:36:06,600 --> 00:36:07,200
direction, right?

866
00:36:07,200 --> 00:36:11,500
So if I'm subtracting x sub 2, y sub 2, right from somebody, then, all

867
00:36:11,500 --> 00:36:12,800
I'm doing is I'm taking this Vector.

868
00:36:12,800 --> 00:36:14,100
I'm flipping it, right?

869
00:36:14,100 --> 00:36:17,200
I'm flipping both its directions around and then I'm going to put it

870
00:36:17,200 --> 00:36:18,200
at the end and move here.

871
00:36:18,200 --> 00:36:20,800
So that result would be somewhere down here, right?

872
00:36:21,800 --> 00:36:24,300
Make sense again, very very straightforward.

873
00:36:24,700 --> 00:36:28,000
So addition and subtraction very, very simple.

874
00:36:28,100 --> 00:36:29,900
They make a lot of sense.

875
00:36:29,900 --> 00:36:32,500
Now, the other thing that's easy to understand and makes a lot of

876
00:36:32,500 --> 00:36:34,800
sense is scalar multiplication.

877
00:36:35,000 --> 00:36:40,200
If I had some amount of times I wanted to move like let's say I've got

878
00:36:40,200 --> 00:36:43,900
this Vector here and I want to go two or three times its length.

879
00:36:43,900 --> 00:36:47,200
So however, far I would go from the origin of my coordinate system,

880
00:36:47,200 --> 00:36:49,300
which is that basic that zero zero point.

881
00:36:49,500 --> 00:36:51,500
How far would I go if

882
00:36:51,500 --> 00:36:53,700
I did three times this motion.

883
00:36:53,800 --> 00:36:57,600
Well, I just go once I put the same Vector on the end of itself and go

884
00:36:57,600 --> 00:36:58,300
again, right?

885
00:36:58,300 --> 00:36:59,200
And again, right?

886
00:36:59,200 --> 00:37:01,100
So scalar multiplication.

887
00:37:01,100 --> 00:37:05,900
If I want to just say like 2 times x sub 1 y sub 1 scalar

888
00:37:05,900 --> 00:37:10,300
multiplication is basically just adding the vector to itself just like

889
00:37:10,300 --> 00:37:12,200
you would do just just like two times.

890
00:37:12,200 --> 00:37:16,600
Some number is just saying that number plus itself, you know, twice

891
00:37:16,600 --> 00:37:17,000
right?

892
00:37:17,400 --> 00:37:19,100
The same is true here two times.

893
00:37:19,100 --> 00:37:21,500
Something is saying exactly the same thing.

894
00:37:21,500 --> 00:37:23,600
Nothing, it's saying I just want to add, right?

895
00:37:24,300 --> 00:37:27,100
So all of those things are very should hopefully be pretty intuitive

896
00:37:27,100 --> 00:37:27,300
to.

897
00:37:27,300 --> 00:37:29,600
You should make a lot of sense because basically, they're just things

898
00:37:29,600 --> 00:37:31,100
you would have done with the scalars already.

899
00:37:31,100 --> 00:37:33,800
And all we're talking about doing is bundling them together so that we

900
00:37:33,800 --> 00:37:36,400
can type and think about things more easily because we can start to

901
00:37:36,400 --> 00:37:39,300
think about points in three dimensional space, more easily.

902
00:37:39,500 --> 00:37:43,400
Now, what's going to be a little more confusing?

903
00:37:43,400 --> 00:37:48,100
However, is when we start to talk about multiplication because

904
00:37:48,100 --> 00:37:51,400
multiplication, actually, in Vector space gets

905
00:37:51,600 --> 00:37:54,600
A lot trickier, so let's talk about that briefly.

906
00:37:54,900 --> 00:37:55,900
And then maybe we'll going to.

907
00:37:55,900 --> 00:37:57,500
We're going to go implement the basic thing.

908
00:37:57,500 --> 00:37:58,800
It says we only got about 20 minutes left.

909
00:37:58,800 --> 00:38:02,600
So I'm not really going to do much multiplication today, but let's go

910
00:38:02,600 --> 00:38:04,200
and think about oops.

911
00:38:04,500 --> 00:38:08,100
Let's go and think about that multiplication now, so alright, so here

912
00:38:08,100 --> 00:38:09,200
is my coordinate system again.

913
00:38:09,200 --> 00:38:11,800
Again, this is the origin of our coordinate system with a 0-0.

914
00:38:11,800 --> 00:38:15,100
Let's say this is our x-axis or y-axis.

915
00:38:15,600 --> 00:38:17,300
Here is one of our vectors.

916
00:38:17,800 --> 00:38:21,400
Okay, and then I have some other vector.

917
00:38:21,500 --> 00:38:22,300
Fire up here.

918
00:38:24,000 --> 00:38:28,400
All right, and now I want to multiply these two together.

919
00:38:28,400 --> 00:38:31,600
And so I'm going to start actually talking about these again.

920
00:38:31,600 --> 00:38:32,600
Just I'll put them right here.

921
00:38:32,600 --> 00:38:36,600
I'll say this is x sub 1 y sub 1 and this is x sub 2.

922
00:38:36,800 --> 00:38:38,700
Y sub 2 again just like we did before.

923
00:38:40,300 --> 00:38:43,200
Now, if I want to multiply these two vectors together, you might say,

924
00:38:43,300 --> 00:38:47,300
well, why don't you just do the exact same thing you did before with,

925
00:38:47,300 --> 00:38:53,000
with addition, just if I want to have x sub 1 y sub 1 x which we don't

926
00:38:53,000 --> 00:38:55,900
actually know what that actually is yet, but I was going to write it x

927
00:38:55,900 --> 00:38:58,200
sub 2 y sub 2 then Casey.

928
00:38:58,200 --> 00:38:59,900
Why don't you just do exactly.

929
00:39:00,000 --> 00:39:04,100
Only what you did before and just do it as if you were doing it to

930
00:39:04,100 --> 00:39:05,000
each component.

931
00:39:05,000 --> 00:39:07,200
Because, remember, when I did addition, right?

932
00:39:07,400 --> 00:39:08,400
That's all I did.

933
00:39:08,400 --> 00:39:10,400
I basically didn't do anything fancy.

934
00:39:10,400 --> 00:39:13,400
I didn't seem to invoke any real math fanciness there.

935
00:39:13,400 --> 00:39:15,200
I just did to the components.

936
00:39:15,700 --> 00:39:17,800
What I would have done if they were scalar.

937
00:39:17,800 --> 00:39:21,500
I just did, okay, you want to add, then add the exes, add the wise and

938
00:39:21,500 --> 00:39:23,500
put the results in the X and the Y slot.

939
00:39:23,600 --> 00:39:23,900
Right?

940
00:39:23,900 --> 00:39:24,500
That's it.

941
00:39:24,500 --> 00:39:27,600
And I did the exact same thing with some traction change that to a -

942
00:39:27,600 --> 00:39:29,200
you just change these two - right.

943
00:39:29,400 --> 00:39:29,900
So why not?

944
00:39:30,000 --> 00:39:31,800
Not do the same thing with multiplication, right?

945
00:39:31,800 --> 00:39:36,000
If this four times, right, you know, in there, why would I just stick

946
00:39:36,000 --> 00:39:36,800
a times in there?

947
00:39:37,900 --> 00:39:40,500
Well, the answer is because it doesn't really do anything that you

948
00:39:40,500 --> 00:39:41,600
want it to do.

949
00:39:46,100 --> 00:39:47,400
So this does have a name.

950
00:39:48,400 --> 00:39:50,800
If I'm not mistaken, this is called the hadamard product.

951
00:39:56,000 --> 00:40:00,300
It does have a name and it is a valid Vector operation.

952
00:40:00,500 --> 00:40:01,300
It's defined.

953
00:40:01,300 --> 00:40:04,600
It's something you could do, but what you will find if you actually

954
00:40:04,600 --> 00:40:05,700
try to program with this.

955
00:40:06,900 --> 00:40:08,700
Is that it's really only useful for colors.

956
00:40:09,000 --> 00:40:12,300
And it's basically something that you end up doing to like, you know,

957
00:40:12,600 --> 00:40:16,000
you've got some gray level and you want to multiply it by a color to

958
00:40:16,000 --> 00:40:17,000
get out the color thing.

959
00:40:17,000 --> 00:40:20,200
Or, you know, you got some kind of, it's really, you're not going to

960
00:40:20,200 --> 00:40:25,200
see a lot of use of it in code for actually doing positioning and

961
00:40:25,200 --> 00:40:26,900
movement things, which is what we're trying to do.

962
00:40:26,900 --> 00:40:30,900
And the reason why that is the case, it's because the actual operation

963
00:40:30,900 --> 00:40:31,900
that this implies

964
00:40:33,500 --> 00:40:35,500
Doesn't really make any spatial sense.

965
00:40:36,300 --> 00:40:37,800
If you look at what's going to happen.

966
00:40:38,000 --> 00:40:42,800
We're going to take however far we are along one of these, right?

967
00:40:42,800 --> 00:40:44,300
Axes like so, take X.

968
00:40:44,500 --> 00:40:46,900
We're going to take however long the other one is and we're going to

969
00:40:46,900 --> 00:40:50,400
multiply those together to get some multiplicate multiplied thing

970
00:40:50,400 --> 00:40:51,500
here, right?

971
00:40:51,800 --> 00:40:54,400
And then similarly we're going to do the same thing on this one to get

972
00:40:54,400 --> 00:40:57,100
some multiplied thing here and we're going to get a result that's like

973
00:40:57,100 --> 00:40:59,300
out there right now.

974
00:40:59,300 --> 00:41:02,500
This result here isn't if you actually go and apply.

975
00:41:03,000 --> 00:41:05,900
Well, I should, I should say that for one second.

976
00:41:05,900 --> 00:41:08,800
Let's say that till the till the next thing we talked about, but

977
00:41:08,800 --> 00:41:12,900
basically, this actual result, when you do these things doesn't have

978
00:41:12,900 --> 00:41:15,600
really any properties that we would care about.

979
00:41:15,700 --> 00:41:19,200
It's not something that's the two lengths of the vectors X.

980
00:41:19,200 --> 00:41:19,800
Each other.

981
00:41:19,800 --> 00:41:21,300
Really, it's not something.

982
00:41:21,400 --> 00:41:22,900
It doesn't really give you.

983
00:41:23,600 --> 00:41:27,600
It doesn't really give us anything that we would ever actually do in

984
00:41:27,600 --> 00:41:28,200
practice.

985
00:41:28,200 --> 00:41:28,500
Right?

986
00:41:28,500 --> 00:41:32,500
And you'll notice that we've never done this anywhere in the

987
00:41:32,600 --> 00:41:33,700
actual code either.

988
00:41:33,700 --> 00:41:36,300
Like it's just not something that happens, very frequently.

989
00:41:36,600 --> 00:41:39,000
So, typically the only time again that you see it is something with

990
00:41:39,000 --> 00:41:42,100
like colors or something where you have like where you've just packed

991
00:41:42,100 --> 00:41:46,300
things in in some way like this, you have an x-ray in ayr8 that you

992
00:41:46,300 --> 00:41:48,000
want things to happen at and you've packed the main.

993
00:41:48,000 --> 00:41:48,900
I don't know, weird stuff.

994
00:41:48,900 --> 00:41:51,500
It's just, it's just not that common, right?

995
00:41:52,300 --> 00:41:52,700
The other time.

996
00:41:52,700 --> 00:41:53,200
You might see.

997
00:41:53,200 --> 00:41:56,200
It is like some kind of a knockout filter.

998
00:41:56,200 --> 00:41:58,600
Like you've got something where you've got, like a mask kind of a

999
00:41:58,600 --> 00:41:59,800
thing where, like, oh, I

1000
00:42:00,000 --> 00:42:01,500
I want to knock out the Y component.

1001
00:42:01,500 --> 00:42:02,900
So I'm multiplying by this thing.

1002
00:42:03,000 --> 00:42:05,900
You know, there's there's weird weird circumstances.

1003
00:42:05,900 --> 00:42:07,200
You will see this sort of thing happen.

1004
00:42:07,200 --> 00:42:07,600
Certainly.

1005
00:42:07,600 --> 00:42:09,800
I don't want to say that it's never used but it's just not that

1006
00:42:09,800 --> 00:42:10,200
common.

1007
00:42:10,400 --> 00:42:13,400
And the reason is because unlike these other things like addition and

1008
00:42:13,400 --> 00:42:17,800
subtraction had very obvious things that we would want to do that made

1009
00:42:17,800 --> 00:42:20,700
sense like moving well on one in the moving, along the other or those

1010
00:42:20,700 --> 00:42:22,500
sorts of things are very common operations.

1011
00:42:22,500 --> 00:42:23,800
We'd want to do positionally

1012
00:42:24,500 --> 00:42:27,800
So the hadamard product is not really something that we want to focus

1013
00:42:27,800 --> 00:42:28,100
on.

1014
00:42:28,100 --> 00:42:29,100
Although we could implement it.

1015
00:42:29,400 --> 00:42:32,100
What we're actually going to do eventually is we're going to do the

1016
00:42:32,100 --> 00:42:34,700
dot and perf dot products.

1017
00:42:34,700 --> 00:42:35,500
Right?

1018
00:42:35,500 --> 00:42:39,400
Which are other types of ways of multiplying vectors together.

1019
00:42:39,400 --> 00:42:43,200
This would actually be more like a cross product in three dimensions

1020
00:42:43,200 --> 00:42:45,700
and these are terms, which you don't know yet.

1021
00:42:45,700 --> 00:42:47,800
If you don't know, Vector math, if you do not Vector, Matthew,

1022
00:42:47,800 --> 00:42:50,000
probably tuned out already because this stuff is very basic for you.

1023
00:42:50,000 --> 00:42:54,500
But basically, we will be talking about other kinds of

1024
00:42:54,600 --> 00:42:55,900
Of multiplication of vectors.

1025
00:42:56,300 --> 00:42:59,500
Because one of the things that's very interesting about Matrix about

1026
00:42:59,500 --> 00:43:02,700
linear algebra General on but Matrix math, is that because you have

1027
00:43:02,700 --> 00:43:07,700
lots of values you can start to Define ways in which they interact

1028
00:43:07,700 --> 00:43:10,300
that are more complicated than just going straight across.

1029
00:43:10,300 --> 00:43:14,200
And it turns out that those different methods that you use can get

1030
00:43:14,200 --> 00:43:17,300
you, some very powerful tools, but we're going to have to save that

1031
00:43:17,600 --> 00:43:18,700
for Tuesday.

1032
00:43:18,800 --> 00:43:21,100
Sorry, not Tuesday for Wednesday.

1033
00:43:23,100 --> 00:43:24,000
Wednesday.

1034
00:43:24,200 --> 00:43:26,200
So, come back tomorrow if you want to talk about those products and

1035
00:43:26,200 --> 00:43:26,900
that's what we'll be doing them.

1036
00:43:26,900 --> 00:43:27,100
For.

1037
00:43:27,100 --> 00:43:27,600
Now.

1038
00:43:27,800 --> 00:43:33,300
What I want to do is just do the basic work of replacing the scalar

1039
00:43:33,300 --> 00:43:33,500
code.

1040
00:43:33,500 --> 00:43:37,000
We've got at the moment with some Vector code, right?

1041
00:43:37,000 --> 00:43:38,200
That's all I really wanted to do.

1042
00:43:38,200 --> 00:43:39,400
Just very, very simple.

1043
00:43:40,200 --> 00:43:43,900
So what I'm going to do is I'm going to make, I guess, maybe a

1044
00:43:43,900 --> 00:43:45,800
handmade math.h.

1045
00:43:46,100 --> 00:43:48,900
I'm just going to stick it in here because I basically just want some

1046
00:43:48,900 --> 00:43:51,400
place to start dumping our math code.

1047
00:43:51,400 --> 00:43:52,800
And I am going to make

1048
00:43:52,900 --> 00:43:53,600
Structure.

1049
00:43:53,900 --> 00:43:58,600
That is going to be a one of these things that we just sort of talked

1050
00:43:58,600 --> 00:44:00,300
about the thing that I just walked all the way through.

1051
00:44:00,300 --> 00:44:03,100
I just want to make something like that and I want to go ahead and

1052
00:44:03,100 --> 00:44:06,300
replace our code that we were using before with that.

1053
00:44:06,400 --> 00:44:06,800
Right?

1054
00:44:06,800 --> 00:44:11,600
And this is the place where we'll finally use a C++ feature that, you

1055
00:44:11,600 --> 00:44:13,700
know, that's not a non-trivial CSS feature.

1056
00:44:13,700 --> 00:44:14,900
Like I've said on the stream multiple times.

1057
00:44:14,900 --> 00:44:17,100
I'm like, we're going to use operator overloading running separately

1058
00:44:17,200 --> 00:44:18,500
will probably use it here.

1059
00:44:21,100 --> 00:44:22,300
I find that vectors.

1060
00:44:22,900 --> 00:44:27,100
Are one of the few things where I really like operator overloading and

1061
00:44:27,100 --> 00:44:27,600
most places.

1062
00:44:27,600 --> 00:44:28,200
I find it.

1063
00:44:28,200 --> 00:44:31,600
It's just not that useful but in vectors, it's kind of nice because

1064
00:44:31,600 --> 00:44:34,800
you can get code to look a little more like math even though it still

1065
00:44:34,800 --> 00:44:35,800
doesn't quite get you all the way there.

1066
00:44:36,100 --> 00:44:38,100
So really, all I want to do is encapsulate.

1067
00:44:38,100 --> 00:44:40,000
Exactly the stuff that we have been doing before.

1068
00:44:40,000 --> 00:44:45,000
I just want to say essentially that we do have, you know, an X and A

1069
00:44:45,000 --> 00:44:45,600
Y, right?

1070
00:44:45,600 --> 00:44:49,100
And I would like that ideally to be accessible in both ways.

1071
00:44:49,100 --> 00:44:52,900
So I want to basically say that I have an X and A Y, so if I want to

1072
00:44:52,900 --> 00:44:56,700
To type dot X, or Y to access the x or y component, I can do that.

1073
00:44:56,700 --> 00:44:59,800
And then I also want to be able to say, okay, I've

1074
00:45:00,000 --> 00:45:05,400
Element here and E which is going to have two components so that I can

1075
00:45:05,400 --> 00:45:06,700
access it procedurally.

1076
00:45:06,700 --> 00:45:11,000
And, you know, use a 0 or a 1 index to index into the element.

1077
00:45:11,000 --> 00:45:14,000
If I want to only if I want to though.

1078
00:45:14,000 --> 00:45:17,200
So that's going to be my my Vector structure.

1079
00:45:17,300 --> 00:45:18,700
That's really all I wanted to do there.

1080
00:45:18,700 --> 00:45:22,400
And then I'm going to define those operations on it that I wanted,

1081
00:45:22,400 --> 00:45:22,900
right.

1082
00:45:23,000 --> 00:45:26,600
I would like to be able to Define an operator to do that plus that we

1083
00:45:26,600 --> 00:45:27,500
saw happen, right?

1084
00:45:27,500 --> 00:45:29,300
So I want to take an A and A B.

1085
00:45:30,100 --> 00:45:32,200
And I want to be able to add those two together.

1086
00:45:32,200 --> 00:45:34,400
So I want to be able to basically say okay.

1087
00:45:34,400 --> 00:45:38,800
I've got a result and the result is going to be equal to you know,

1088
00:45:38,800 --> 00:45:40,900
again exactly the thing.

1089
00:45:41,200 --> 00:45:42,000
Where's my pen?

1090
00:45:42,300 --> 00:45:42,700
Exactly.

1091
00:45:42,700 --> 00:45:44,300
The thing that we did right here, right?

1092
00:45:44,300 --> 00:45:48,000
I just want to basically say, add the exes, add the wise and subtract

1093
00:45:48,000 --> 00:45:49,800
the excess subtract the wise, right.

1094
00:45:50,700 --> 00:45:52,400
So let's see.

1095
00:45:52,400 --> 00:45:53,500
Here we go.

1096
00:45:54,200 --> 00:45:56,800
So I want to be able to do, you know, that sort of thing.

1097
00:45:58,000 --> 00:46:00,200
I want to be able to subtract again.

1098
00:46:00,200 --> 00:46:03,100
This is really really simple, you know, I want to be able to subtract.

1099
00:46:03,700 --> 00:46:06,800
I'd like to be able to do a unary minus if that makes sense.

1100
00:46:06,800 --> 00:46:11,000
I'd like to be able to just say that a vector equals its - which is

1101
00:46:11,000 --> 00:46:12,100
that flipping operation.

1102
00:46:12,100 --> 00:46:14,000
Like I said before, just flipping a vector around.

1103
00:46:14,000 --> 00:46:18,300
So so to getting both of them and I believe in see, it's been so long,

1104
00:46:18,300 --> 00:46:22,700
but I hardly ever program anything fancy, but I believe you can.

1105
00:46:22,700 --> 00:46:24,700
Do you know what I think?

1106
00:46:24,900 --> 00:46:26,400
Can you still do that outside?

1107
00:46:26,400 --> 00:46:27,600
I don't know if you can do that outside.

1108
00:46:28,100 --> 00:46:29,300
Let's let's find out.

1109
00:46:30,000 --> 00:46:33,400
Can I do that outside to something or does it have to be in the class,

1110
00:46:34,000 --> 00:46:36,500
you know, can can result equals negative a?

1111
00:46:37,000 --> 00:46:38,000
I'm just curious.

1112
00:46:38,100 --> 00:46:38,800
Let's find out.

1113
00:46:38,900 --> 00:46:41,500
I thought I for some reason, I got that twinge in my head.

1114
00:46:41,500 --> 00:46:43,400
That was like, you got to put that inside the class, but I don't

1115
00:46:43,400 --> 00:46:44,800
actually know if that's true.

1116
00:46:44,800 --> 00:46:49,000
So let's find out handmade math.h.

1117
00:46:50,300 --> 00:46:53,800
And that probably, actually, I made that H.

1118
00:46:53,900 --> 00:46:56,000
That's probably something that we're going to want to use everywhere.

1119
00:46:56,100 --> 00:46:56,700
I assume.

1120
00:46:59,000 --> 00:47:01,200
Certainly, at least by here, okay.

1121
00:47:04,900 --> 00:47:05,400
Oops.

1122
00:47:08,000 --> 00:47:12,300
Oh, yeah, sorry, didn't quite finish typing that in there.

1123
00:47:13,200 --> 00:47:14,300
That was wishful thinking.

1124
00:47:15,200 --> 00:47:16,600
Okay, so I can do that outside.

1125
00:47:16,600 --> 00:47:17,200
So that's good.

1126
00:47:17,600 --> 00:47:17,900
Alright.

1127
00:47:17,900 --> 00:47:22,500
So basically I've got the ability to, you know, be able to say, you

1128
00:47:22,500 --> 00:47:25,000
know, b equals negative a that's what that guy does.

1129
00:47:25,200 --> 00:47:26,900
I can say a plus b.

1130
00:47:27,100 --> 00:47:31,100
And I can say a minus B like that, so, that's all good.

1131
00:47:31,200 --> 00:47:35,600
And then I also probably want like, like I said, the ability to

1132
00:47:35,600 --> 00:47:36,800
multiply by a scalar.

1133
00:47:36,800 --> 00:47:37,600
So I want to be able to

1134
00:47:37,800 --> 00:47:44,600
Say something like, you know, I've got an A and and a float of some

1135
00:47:44,600 --> 00:47:45,500
kind, right.

1136
00:47:45,500 --> 00:47:48,400
So I guess it would be something like this if that makes sense.

1137
00:47:49,000 --> 00:47:56,600
So then I've got a result and I do result dot x equals b .x x that a

1138
00:47:58,400 --> 00:47:58,800
Yeah.

1139
00:48:00,300 --> 00:48:01,800
Return result.

1140
00:48:02,000 --> 00:48:03,200
And so, you can just kind of see that.

1141
00:48:03,200 --> 00:48:08,000
All I'm really doing is just making some really, really basic vector,

1142
00:48:08,200 --> 00:48:10,600
vector math, routines, that are doing exactly those things, that I

1143
00:48:10,600 --> 00:48:15,100
just went over, on the, on the sort of, I don't know, the on the crito

1144
00:48:15,100 --> 00:48:18,600
Whiteboard, if you will, so now, if I want to actually start putting

1145
00:48:18,600 --> 00:48:21,500
that in the code, I can just look for the places where a previously I

1146
00:48:21,500 --> 00:48:24,500
was doing those sort of X and Y operations, right?

1147
00:48:24,700 --> 00:48:29,300
And I can start to actually, you know, make them a little more

1148
00:48:29,600 --> 00:48:29,900
concise.

1149
00:48:30,000 --> 00:48:30,300
Nice.

1150
00:48:30,500 --> 00:48:32,500
So what I can do is I can look through here.

1151
00:48:32,500 --> 00:48:35,200
I'm just kind of randomly sampling through the code and thinking.

1152
00:48:35,200 --> 00:48:35,900
All right.

1153
00:48:36,500 --> 00:48:39,500
I've basically got, you know, this this player ex-player.

1154
00:48:39,500 --> 00:48:41,000
Why thing here, right?

1155
00:48:41,000 --> 00:48:42,400
I can I could turn that certainly.

1156
00:48:42,400 --> 00:48:43,100
That's the one we were looking at.

1157
00:48:43,100 --> 00:48:47,300
Before I can basically say that I've got one of those that's going to

1158
00:48:47,300 --> 00:48:51,500
be cleared at the start and then if I just compile it, all I have to

1159
00:48:51,500 --> 00:48:56,000
really do is is now go every place that I was doing something to one

1160
00:48:56,000 --> 00:48:56,800
of the components.

1161
00:48:56,900 --> 00:48:59,800
I can just kind of do do it.

1162
00:49:00,000 --> 00:49:03,200
To the scalar and any place that I was doing something to both.

1163
00:49:03,500 --> 00:49:07,600
I can just make it operate on all of them and I can go add that star

1164
00:49:07,600 --> 00:49:08,300
equals as well.

1165
00:49:08,300 --> 00:49:10,500
Looks like that would be something that would be useful right?

1166
00:49:10,700 --> 00:49:11,600
So I can do that.

1167
00:49:11,600 --> 00:49:15,600
Certainly, that'd be easy to add and then here I've got this guy.

1168
00:49:15,600 --> 00:49:17,600
And again, this is like now a double.

1169
00:49:17,600 --> 00:49:21,900
Add it go and you can see that the code almost doesn't change at all.

1170
00:49:22,200 --> 00:49:22,600
Really.

1171
00:49:22,600 --> 00:49:26,400
All that's happening is is if I start to get rid of these, I start to

1172
00:49:26,400 --> 00:49:29,400
basically just get one line of code in a lot of places.

1173
00:49:29,900 --> 00:49:33,400
That I used to have two and that's really, you know, that's really

1174
00:49:33,500 --> 00:49:36,900
almost the entirety in the entirety of it.

1175
00:49:37,200 --> 00:49:37,900
So, let's take a look.

1176
00:49:37,900 --> 00:49:41,400
I need that x equals because I'm using that, and I also need to go

1177
00:49:41,500 --> 00:49:42,700
make handmade tile.

1178
00:49:42,700 --> 00:49:47,100
.H make that offset D of e 2 as well, so, there we go.

1179
00:49:47,700 --> 00:49:51,400
And now, let's go ahead and here and start to look at it again.

1180
00:49:51,400 --> 00:49:54,600
I can just quickly poured it by doing the dot, oops.

1181
00:49:54,800 --> 00:49:58,400
I mean to do that right there and then here, this is actually kind of

1182
00:49:58,400 --> 00:49:59,000
interesting.

1183
00:49:59,300 --> 00:49:59,800
So this

1184
00:50:00,500 --> 00:50:05,200
Looks a lot to me, like, something where I could simplify.

1185
00:50:05,200 --> 00:50:07,800
I mean, that's that's doing the exact same math there, right?

1186
00:50:07,800 --> 00:50:12,200
That's just a - be there and detail X detail.

1187
00:50:12,200 --> 00:50:14,800
Why I could just make this right here.

1188
00:50:14,900 --> 00:50:16,400
Also be a vector to, right?

1189
00:50:16,400 --> 00:50:20,500
So I could basically say that I have something like this, right.

1190
00:50:20,600 --> 00:50:20,900
Oops.

1191
00:50:23,000 --> 00:50:26,000
I could basically turn this into Vector math as well.

1192
00:50:26,000 --> 00:50:27,400
So there's that detail X.

1193
00:50:28,200 --> 00:50:31,800
And now that's basically the detail X Y, if you will, right?

1194
00:50:31,800 --> 00:50:37,100
And so, now detail XY plus a offset - be offset, actually can directly

1195
00:50:37,100 --> 00:50:40,400
do the result dxy in the tile map difference.

1196
00:50:40,700 --> 00:50:43,400
So, basically, there's, there's now one of those, right?

1197
00:50:43,500 --> 00:50:45,400
And you can start to see that maybe, okay.

1198
00:50:45,400 --> 00:50:48,500
Well, there's also a DZ, I don't know, should we maybe, you know,

1199
00:50:48,500 --> 00:50:49,500
we'll have to start thinking about.

1200
00:50:49,500 --> 00:50:50,700
Extending this the 3D, right?

1201
00:50:50,700 --> 00:50:51,900
But again, one thing at a time.

1202
00:50:52,700 --> 00:50:54,600
So let's keep going here, too.

1203
00:50:54,600 --> 00:50:55,900
Many initializers.

1204
00:50:55,900 --> 00:50:57,500
Why is it to manage the oh

1205
00:50:59,100 --> 00:50:59,700
Right.

1206
00:51:00,500 --> 00:51:06,100
That's true to think about how to get around that because I want to be

1207
00:51:06,100 --> 00:51:11,800
able to initialize that the union makes things a little bit grimly

1208
00:51:11,800 --> 00:51:12,100
there.

1209
00:51:12,100 --> 00:51:12,800
Doesn't it?

1210
00:51:13,100 --> 00:51:16,900
Because I can't quite do the initialization the way I would want to

1211
00:51:17,400 --> 00:51:19,900
because I think C++ in its infinite testing.

1212
00:51:19,900 --> 00:51:23,700
Ilysm doesn't let you just initialize the first thing in the union or

1213
00:51:23,700 --> 00:51:25,500
something equally awesome like that.

1214
00:51:26,500 --> 00:51:27,600
Well, that's no bother.

1215
00:51:27,900 --> 00:51:29,800
I can I can fix that pretty easily.

1216
00:51:30,300 --> 00:51:33,300
We can just basically say, oh and also these also should presumably

1217
00:51:33,300 --> 00:51:35,400
all be in lines there trivial operations.

1218
00:51:35,400 --> 00:51:37,000
That the compiler should just kind of throw in there.

1219
00:51:37,700 --> 00:51:40,200
So yeah, let me just clean this up a little bit here.

1220
00:51:40,900 --> 00:51:41,200
Yeah.

1221
00:51:42,000 --> 00:51:45,100
So what I'll do is I'll just basically say okay fine if that's the way

1222
00:51:45,100 --> 00:51:45,700
you want it.

1223
00:51:45,800 --> 00:51:46,400
Mr.

1224
00:51:46,700 --> 00:51:47,700
Lousy language.

1225
00:51:48,100 --> 00:51:48,900
That's fine.

1226
00:51:49,400 --> 00:51:53,200
We'll just say but basically we initialize them this way.

1227
00:51:55,700 --> 00:51:58,000
And we will do it like that.

1228
00:51:58,800 --> 00:51:59,100
Okay.

1229
00:52:00,900 --> 00:52:04,000
So now I've got a way to make them so I can basically say, all right,

1230
00:52:04,300 --> 00:52:04,900
here you go.

1231
00:52:05,300 --> 00:52:10,000
There's my V2, which is the kind of makes me grumpy have to think

1232
00:52:10,000 --> 00:52:10,300
about it.

1233
00:52:10,300 --> 00:52:15,300
I traffic if I fix that kind of thing in my own code before I feel

1234
00:52:15,300 --> 00:52:16,100
like I did.

1235
00:52:18,600 --> 00:52:19,800
But how did I do it?

1236
00:52:23,800 --> 00:52:24,100
You know what?

1237
00:52:24,100 --> 00:52:24,900
I probably did.

1238
00:52:25,700 --> 00:52:27,700
You know what I do.

1239
00:52:27,700 --> 00:52:29,700
I think I probably do know what I did.

1240
00:52:32,000 --> 00:52:35,200
Here's what I probably did because I think I have done this before.

1241
00:52:35,600 --> 00:52:39,300
What I probably did was, I probably did that, right?

1242
00:52:39,500 --> 00:52:44,000
And then I probably did something like this.

1243
00:52:47,700 --> 00:52:54,600
Like, you know, this sort of thing or or like, operator brackets, you

1244
00:52:54,600 --> 00:52:59,700
know, one of these things into index and I probably did something

1245
00:52:59,700 --> 00:53:04,900
like, you know, don't don't try this at home, kids, write that sort of

1246
00:53:04,900 --> 00:53:05,200
thing.

1247
00:53:06,200 --> 00:53:12,500
I probably did something like this, just guessing not really entirely

1248
00:53:12,500 --> 00:53:14,400
sure, but let's take a look.

1249
00:53:14,500 --> 00:53:15,700
So I think what I probably did

1250
00:53:15,900 --> 00:53:22,900
Something where I would go, okay, you know, take the address of X and

1251
00:53:22,900 --> 00:53:26,200
then and then get a particular index off of it, right?

1252
00:53:26,400 --> 00:53:28,400
So that basically you end up with a thing.

1253
00:53:29,200 --> 00:53:29,300
Yeah.

1254
00:53:29,300 --> 00:53:31,100
I'll talk about that in one second.

1255
00:53:31,600 --> 00:53:34,100
But yeah, let's finish our Port first and then I'll talk about that

1256
00:53:34,100 --> 00:53:37,600
because basically I like to be able to initialise things with this

1257
00:53:37,600 --> 00:53:41,400
syntax where I can just do my sander bracket syntax and so unions.

1258
00:53:41,400 --> 00:53:43,000
Unfortunately, don't let you do that.

1259
00:53:43,000 --> 00:53:45,400
And so you kind of have to walk her work around them a little bit.

1260
00:53:45,900 --> 00:53:46,500
All right.

1261
00:53:46,700 --> 00:53:48,100
So let's take a look here.

1262
00:53:48,100 --> 00:53:50,100
Let me finish all of my porting this.

1263
00:53:50,400 --> 00:53:53,300
So, I've got to have that x equals, which we haven't done yet.

1264
00:53:53,700 --> 00:53:55,900
So, let's go ahead and make a x equals.

1265
00:53:55,900 --> 00:53:56,300
Those.

1266
00:53:56,300 --> 00:53:59,800
I believe do have to be member functions, if I'm not very much.

1267
00:54:00,300 --> 00:54:00,800
Mistaken.

1268
00:54:00,800 --> 00:54:06,600
So basically, we do need a x equals and the x equals is going to be by

1269
00:54:06,600 --> 00:54:07,700
a scalar in this case.

1270
00:54:08,200 --> 00:54:10,000
And so that will be again.

1271
00:54:10,000 --> 00:54:13,500
Just I guess we could just call one of these guys.

1272
00:54:13,500 --> 00:54:15,500
Probably I don't actually know if that's true.

1273
00:54:21,400 --> 00:54:24,600
I feel like it should be.

1274
00:54:25,400 --> 00:54:25,800
Oops.

1275
00:54:26,600 --> 00:54:30,700
Relatively straightforward to implement one of those.

1276
00:54:30,900 --> 00:54:31,500
There we go.

1277
00:54:32,200 --> 00:54:34,000
So if I want to do

1278
00:54:36,300 --> 00:54:41,500
Yeah, I feel like, can I not just do star this goes a, that sort of

1279
00:54:41,500 --> 00:54:41,900
thing.

1280
00:54:42,200 --> 00:54:48,700
I feel like I should be able to do this times a U-turn start of this.

1281
00:54:49,800 --> 00:54:51,100
So any reason I can't do that.

1282
00:54:54,100 --> 00:55:00,500
Let's have it least one formal parameter of Class Type.

1283
00:55:01,700 --> 00:55:02,200
Operator.

1284
00:55:02,200 --> 00:55:05,300
Oh, and it's got to be a member function.

1285
00:55:05,300 --> 00:55:05,800
Certainly.

1286
00:55:06,600 --> 00:55:09,200
No operator found which takes a left hand type of V2.

1287
00:55:10,800 --> 00:55:11,700
That's correct.

1288
00:55:11,900 --> 00:55:13,500
Sorry having the wrong order.

1289
00:55:14,500 --> 00:55:15,100
Let's see.

1290
00:55:15,100 --> 00:55:15,800
There we go.

1291
00:55:15,800 --> 00:55:18,600
And then plus equals is the same thing.

1292
00:55:18,600 --> 00:55:22,900
So I also need to be able to make that plus equals happen as well.

1293
00:55:23,500 --> 00:55:24,200
So there we go.

1294
00:55:25,000 --> 00:55:26,300
And again, I'm not really doing anything.

1295
00:55:26,300 --> 00:55:27,500
Particularly interesting here.

1296
00:55:28,300 --> 00:55:29,300
That's why I'm not talking.

1297
00:55:29,300 --> 00:55:31,300
A whole heck of a lot is just because

1298
00:55:31,500 --> 00:55:33,200
This is just a bunch of Grimble work.

1299
00:55:33,500 --> 00:55:35,600
There's really nothing particularly exciting about it.

1300
00:55:36,400 --> 00:55:38,700
I'm just sort of going through and saying, okay, what are all the math

1301
00:55:38,700 --> 00:55:39,200
operations?

1302
00:55:39,200 --> 00:55:42,500
I was currently using and then let me go ahead and Implement them in

1303
00:55:42,500 --> 00:55:44,100
the most straightforward way possible.

1304
00:55:44,700 --> 00:55:47,100
And basically all I'm doing with these plus equals guys is I'm just

1305
00:55:47,100 --> 00:55:49,000
calling the same code.

1306
00:55:49,000 --> 00:55:53,000
I just wrote, but C++ is too dumb to figure that out.

1307
00:55:53,200 --> 00:55:56,000
But you could just use a plus to make a plus equals.

1308
00:55:56,200 --> 00:55:59,800
I mean, how could you possibly ever, imagine that could work?

1309
00:56:02,400 --> 00:56:04,800
So anyway, you have to write it yourself and basically, all I did was

1310
00:56:04,800 --> 00:56:09,600
say, hey, by the way, just call the plus operator on on you, right?

1311
00:56:10,300 --> 00:56:11,600
Which is all I really wanted to do.

1312
00:56:12,400 --> 00:56:13,200
So anyway,

1313
00:56:14,900 --> 00:56:15,700
Let's see here.

1314
00:56:15,800 --> 00:56:16,400
What did I forget?

1315
00:56:16,600 --> 00:56:18,500
I forgot that that address sign.

1316
00:56:18,500 --> 00:56:20,000
There we go.

1317
00:56:20,800 --> 00:56:23,000
And so again, just going through and finishing the port here.

1318
00:56:23,000 --> 00:56:26,900
So we're going to, this is an actual modification of, just the X

1319
00:56:26,900 --> 00:56:27,200
parameter.

1320
00:56:27,200 --> 00:56:28,500
So, that's actually okay.

1321
00:56:29,700 --> 00:56:34,400
And again, this is going to be one of these guys.

1322
00:56:35,800 --> 00:56:36,400
Let's see.

1323
00:56:39,100 --> 00:56:45,000
And I guess this that looks very similar as well.

1324
00:56:48,100 --> 00:56:49,000
Let's see here.

1325
00:56:49,000 --> 00:56:51,900
So although this one does look like it's actually because it has to

1326
00:56:51,900 --> 00:56:54,400
flip the why we may want to write that in a slightly different way.

1327
00:56:55,700 --> 00:56:59,000
But all of those could probably collapse down now to like, you can

1328
00:56:59,000 --> 00:56:59,800
take a look at that, right?

1329
00:57:00,000 --> 00:57:01,200
Like them in X-Men, why?

1330
00:57:01,200 --> 00:57:02,800
Those are getting handled almost identically.

1331
00:57:02,800 --> 00:57:04,700
Those could all just actually be Vector 2's.

1332
00:57:04,900 --> 00:57:06,400
So we've got a, it's kind of a rich.

1333
00:57:06,600 --> 00:57:09,800
It's a fertile ground here at the moment for things, but I'm just

1334
00:57:09,800 --> 00:57:13,600
going to go ahead and and, and finish porting them that way, just to

1335
00:57:13,600 --> 00:57:14,800
make sure that we're still running.

1336
00:57:14,800 --> 00:57:16,200
Okay, there we are.

1337
00:57:17,100 --> 00:57:18,000
Everyone's happy.

1338
00:57:18,300 --> 00:57:19,900
It looks like we're still working properly.

1339
00:57:20,900 --> 00:57:22,500
No, big problems.

1340
00:57:22,800 --> 00:57:23,800
So that's all good.

1341
00:57:24,100 --> 00:57:28,900
Okay, and then, just taking a look now at the stuff that we could do

1342
00:57:28,900 --> 00:57:29,500
here.

1343
00:57:30,200 --> 00:57:35,100
Again, Min X Min Y is kind of looks like and same with sin x and y.

1344
00:57:35,100 --> 00:57:40,500
So basically, if I take a look at that sin x and y stuff, basically,

1345
00:57:40,500 --> 00:57:43,500
this looks like a big old V 2 to be as well, right.

1346
00:57:43,800 --> 00:57:47,500
This is something where I'm Computing, two values, and then I'm about

1347
00:57:47,500 --> 00:57:50,100
to use them as if they were vectors basically everywhere else.

1348
00:57:50,500 --> 00:57:52,800
So this Min right?

1349
00:57:54,400 --> 00:57:59,000
This men could easily be computed basically like that.

1350
00:58:01,500 --> 00:58:05,000
The only question is I need this tile side and pixels as one so this

1351
00:58:05,000 --> 00:58:09,500
is basically tile side is its own vector?

1352
00:58:11,200 --> 00:58:23,500
So here we go, and so tile side and the max will also be side down,

1353
00:58:23,800 --> 00:58:26,400
cleans that up a little bit and the tile side and pixels.

1354
00:58:26,400 --> 00:58:29,800
We actually probably almost always use in this way.

1355
00:58:29,800 --> 00:58:32,200
We almost always uses the vector to we could collapse a lot of the

1356
00:58:32,200 --> 00:58:35,800
stuff down to Vector but still and so then our draw rectangle call.

1357
00:58:35,800 --> 00:58:37,500
We could also do the exact same thing.

1358
00:58:38,800 --> 00:58:40,600
We could start taking points there as well.

1359
00:58:41,100 --> 00:58:45,900
Could basically say all right, we've got our RV Min, something like

1360
00:58:45,900 --> 00:58:48,900
that, and our RV Max.

1361
00:58:51,400 --> 00:58:52,000
Right.

1362
00:58:52,600 --> 00:58:56,200
And that makes that function a lot easier to read now to and so, in

1363
00:58:56,200 --> 00:58:59,800
here, when we're actually doing the rounding, we could just go ahead

1364
00:59:00,300 --> 00:59:04,800
and do it out that, and that way, now people who call us don't have

1365
00:59:04,800 --> 00:59:05,200
any trouble.

1366
00:59:05,200 --> 00:59:06,900
It's no harder for us to deal with.

1367
00:59:07,100 --> 00:59:08,300
So we're all good.

1368
00:59:08,800 --> 00:59:13,700
And then this just takes Min and Max that

1369
00:59:16,500 --> 00:59:17,200
What did I do?

1370
00:59:17,400 --> 00:59:17,900
Here we go.

1371
00:59:18,600 --> 00:59:20,200
And so this one.

1372
00:59:20,300 --> 00:59:20,900
Let's see.

1373
00:59:20,900 --> 00:59:24,000
This is player left and player top.

1374
00:59:24,000 --> 00:59:26,600
So this is like basically player left top.

1375
00:59:26,600 --> 00:59:29,200
We can now basically say it, just say it like that.

1376
00:59:30,200 --> 00:59:30,700
Right?

1377
00:59:31,900 --> 00:59:34,100
And it looks like we are out of time.

1378
00:59:34,300 --> 00:59:37,200
So there's our player left top and then here we've actually got a

1379
00:59:37,200 --> 00:59:40,500
thing where I guess that's our player left top.

1380
00:59:40,500 --> 00:59:41,900
Plus this other Vector here.

1381
00:59:41,900 --> 00:59:45,500
And so we could actually say player with height, right?

1382
00:59:47,100 --> 00:59:49,500
Is actually going to be another Vector here that we can Define.

1383
00:59:50,000 --> 00:59:56,200
So, layer with layer height, and then we can actually just say it's

1384
00:59:56,200 --> 00:59:56,500
player.

1385
00:59:56,500 --> 00:59:59,800
Left top plus, m, 2 pixels x player with tight.

1386
01:00:00,600 --> 01:00:04,000
Right, and basically they can see how we turn that into a nice vector

1387
01:00:04,000 --> 01:00:07,200
equation there by just saying, well M particular to pixels, we were

1388
01:00:07,200 --> 01:00:08,300
multiplying everything by that.

1389
01:00:08,300 --> 01:00:10,900
So now we just kind of fold that into a multiply and again, just kind

1390
01:00:10,900 --> 01:00:13,700
of folding things down, really, really, pretty, pretty straightforward

1391
01:00:13,700 --> 01:00:14,300
stuff.

1392
01:00:14,500 --> 01:00:17,700
We're coming to the end of the stream here, so I got to stop but let's

1393
01:00:17,700 --> 01:00:17,800
see.

1394
01:00:17,800 --> 01:00:22,900
What did I do there that I should not have done, cannot convert from

1395
01:00:22,900 --> 01:00:26,900
initializer list to real 32, right?

1396
01:00:26,900 --> 01:00:29,600
These guys are supposed to be effective choose.

1397
01:00:30,500 --> 01:00:31,200
So, there we go.

1398
01:00:31,800 --> 01:00:34,100
And and again, we haven't like, you can see, we haven't changed

1399
01:00:34,100 --> 01:00:34,600
anything.

1400
01:00:34,800 --> 01:00:39,400
It's all working exactly the way that it was no, no real changes.

1401
01:00:39,600 --> 01:00:42,200
And so really all we're starting to do is start to fold that code down

1402
01:00:42,200 --> 01:00:45,100
into something that's a little more concise and also helps us avoid

1403
01:00:45,100 --> 01:00:45,800
the typos.

1404
01:00:46,100 --> 01:00:48,700
The more we can sort of compress things down into logical objects,

1405
01:00:48,700 --> 01:00:50,500
like that or we've kind of.

1406
01:00:50,900 --> 01:00:52,000
And I might say obvious.

1407
01:00:52,000 --> 01:00:55,400
I mean, mathematical objects, not programming objects, just to be

1408
01:00:55,400 --> 01:00:57,900
clear, although you could think of them as programming objects as

1409
01:00:57,900 --> 01:00:58,200
well.

1410
01:00:58,200 --> 01:01:00,200
I mean, this is, despite the fact that it's

1411
01:01:00,300 --> 01:01:01,200
Not in a class, right?

1412
01:01:01,200 --> 01:01:03,500
It certainly is an object, you sort of thing.

1413
01:01:03,500 --> 01:01:05,100
For those of you, like, object-oriented programming.

1414
01:01:05,100 --> 01:01:07,000
Hopefully, that's something that would be relatively happy.

1415
01:01:07,200 --> 01:01:09,300
I mean, I guess you probably wouldn't like the fact that I've got my X

1416
01:01:09,300 --> 01:01:13,000
and Y sitting out there instead of being like protected or in the

1417
01:01:13,000 --> 01:01:15,000
private section or something like this, but at the same time, it's

1418
01:01:15,000 --> 01:01:17,100
like, yeah, you know, it's it's the kind of thing.

1419
01:01:17,100 --> 01:01:19,100
You might think about as an object in programming as well, in the

1420
01:01:19,100 --> 01:01:22,600
sense that it's a bundle of things together that we're kind of moving

1421
01:01:22,600 --> 01:01:25,900
around and thinking about as a unit, right?

1422
01:01:26,000 --> 01:01:27,700
And so, that's basically what we've got.

1423
01:01:28,100 --> 01:01:30,100
I will go ahead and go over to the Q&A.

1424
01:01:30,300 --> 01:01:33,300
Out rather than continuing to go through and start to compress the

1425
01:01:33,300 --> 01:01:36,700
stuff down further, even though there's a lot of things we could do

1426
01:01:37,100 --> 01:01:40,200
now that we finally have a vector to class even though it only has

1427
01:01:40,200 --> 01:01:43,700
addition and subtraction in it, and it's multiplication by a scalar.

1428
01:01:44,400 --> 01:01:46,900
There's still a ton of code that we could start to collapse now that

1429
01:01:46,900 --> 01:01:49,500
we've got that and so maybe that's something that I'll pick up again

1430
01:01:49,500 --> 01:01:52,000
tomorrow and we'll talk about the dot product and the cross product at

1431
01:01:52,000 --> 01:01:53,300
that time for now.

1432
01:01:54,400 --> 01:01:56,800
Let's go ahead and end up.

1433
01:01:56,900 --> 01:01:57,900
Turn on the Q&A.

1434
01:01:57,900 --> 01:01:59,900
Please prefix or questions with

1435
01:02:00,300 --> 01:02:03,000
: and so I can see them.

1436
01:02:03,000 --> 01:02:04,700
And also, please try to keep your questions of stuff.

1437
01:02:04,700 --> 01:02:06,600
We've done today stream or on a previous Stream.

1438
01:02:06,600 --> 01:02:08,300
So most thing I spelled height wrong.

1439
01:02:11,300 --> 01:02:12,200
I don't actually know.

1440
01:02:14,400 --> 01:02:15,300
Where is that?

1441
01:02:16,100 --> 01:02:17,100
Where is it?

1442
01:02:18,300 --> 01:02:19,600
You spelled height wrong.

1443
01:02:19,700 --> 01:02:20,200
Did I?

1444
01:02:21,600 --> 01:02:22,600
How did I spell it?

1445
01:02:23,600 --> 01:02:25,900
But anyway, let's go ahead and here.

1446
01:02:29,600 --> 01:02:33,100
How do Union types work in C++ and what were the drawbacks of using

1447
01:02:33,100 --> 01:02:33,500
them?

1448
01:02:34,400 --> 01:02:36,200
So the reso unions.

1449
01:02:36,500 --> 01:02:39,000
I like a lot, I think unions are great.

1450
01:02:40,700 --> 01:02:45,800
Basically, what I had wanted to do was say that I wanted to add to

1451
01:02:46,000 --> 01:02:48,600
what I want to do is basically put two things in one spot, right?

1452
01:02:48,600 --> 01:02:52,600
I wanted to say that you could access the same two floating Point

1453
01:02:52,600 --> 01:02:54,200
values, either as a DOT X.

1454
01:02:54,200 --> 01:02:56,500
Delta y, or as a DOT e, brackets.

1455
01:02:56,500 --> 01:02:57,600
A number, right?

1456
01:02:58,500 --> 01:02:59,300
And I love that.

1457
01:02:59,300 --> 01:02:59,900
And I think it's

1458
01:03:00,800 --> 01:03:02,700
I think unions are very, very important.

1459
01:03:03,000 --> 01:03:04,400
I am of that camp.

1460
01:03:04,600 --> 01:03:06,700
I want to say that there's a bunch of category.

1461
01:03:06,700 --> 01:03:09,800
Theory starts with people who talk about discriminated unions, a lot

1462
01:03:09,800 --> 01:03:11,900
to, and how they're the basis of all good programming and stuff like

1463
01:03:11,900 --> 01:03:12,200
this.

1464
01:03:12,400 --> 01:03:13,300
I am in their Camp.

1465
01:03:13,300 --> 01:03:17,600
I think discriminated unions are actually extremely important and

1466
01:03:17,600 --> 01:03:19,200
that's a whole separate topic as well.

1467
01:03:20,200 --> 01:03:21,300
But basically I love unions.

1468
01:03:21,300 --> 01:03:24,200
Unfortunately C++ has support for unions is absolutely awful.

1469
01:03:25,200 --> 01:03:28,200
And so you can't even do like the basic thing that I wanted to do.

1470
01:03:28,200 --> 01:03:34,500
Because as soon as you do this, you can no longer initialise things

1471
01:03:34,500 --> 01:03:35,500
with this syntax.

1472
01:03:35,500 --> 01:03:40,800
You can no longer do like V 2A, equals 5, comma 3, but that's what I

1473
01:03:40,800 --> 01:03:41,100
wanted.

1474
01:03:41,100 --> 01:03:42,400
I wanted to be able to do that.

1475
01:03:42,400 --> 01:03:45,700
And so you would have to basically introduce your own syntax like a

1476
01:03:45,700 --> 01:03:49,700
Constructor for them or something syntax, which I don't love because

1477
01:03:49,700 --> 01:03:49,900
then it

1478
01:03:50,100 --> 01:03:52,900
Different from everybody else for no reason or you can make a function

1479
01:03:52,900 --> 01:03:54,700
that returns one, but then it still looks different.

1480
01:03:54,700 --> 01:03:55,200
I just want it.

1481
01:03:55,200 --> 01:03:58,600
So it looks the same and so what I did is I actually just said, all

1482
01:03:58,600 --> 01:03:58,900
right.

1483
01:03:58,900 --> 01:04:01,700
Well fine, I'll make like a bracket operator so you can access it.

1484
01:04:01,700 --> 01:04:02,100
That way.

1485
01:04:02,100 --> 01:04:06,100
You don't have to say dot e, so if you have a V2 a you'll just do a

1486
01:04:06,100 --> 01:04:10,300
DOT e to you know, where you would have typed that you'll just type

1487
01:04:10,300 --> 01:04:11,100
that instead.

1488
01:04:11,200 --> 01:04:13,800
It's like that's a, you know, totally fine compromise.

1489
01:04:13,800 --> 01:04:14,400
I don't mind.

1490
01:04:14,900 --> 01:04:16,800
And so that's that's what I chose to do.

1491
01:04:21,200 --> 01:04:23,800
Had height spelled wrong in that last bit of code.

1492
01:04:25,800 --> 01:04:26,500
There it is.

1493
01:04:27,000 --> 01:04:27,600
There we go.

1494
01:04:28,500 --> 01:04:29,200
Thank you.

1495
01:04:34,300 --> 01:04:34,600
Okay.

1496
01:04:41,900 --> 01:04:42,800
Let's see.

1497
01:04:43,800 --> 01:04:47,500
Pseudonym 73 is actually posting a thing about saying, who

1498
01:04:47,500 --> 01:04:49,000
standardized on what Victor Matrix.

1499
01:04:49,000 --> 01:04:53,100
Convention Circa 1993 1993.

1500
01:04:54,200 --> 01:04:55,200
There's no way math.

1501
01:04:55,300 --> 01:04:57,200
Only standardized in 1993.

1502
01:04:57,200 --> 01:04:58,000
Did it really?

1503
01:04:59,300 --> 01:05:03,500
I feel like math has been using vectors for column vectors for points

1504
01:05:03,500 --> 01:05:05,300
in space for a long time before that.

1505
01:05:05,500 --> 01:05:06,300
Is that not true?

1506
01:05:07,300 --> 01:05:07,800
All right.

1507
01:05:08,200 --> 01:05:10,100
In the first version of E2 with the Union weren't you?

1508
01:05:10,100 --> 01:05:14,000
Simply missing an anonymous struct around X Y, it looked like X Y,

1509
01:05:14,000 --> 01:05:16,800
where overlapping would it have worked that the way you wanted?

1510
01:05:16,800 --> 01:05:18,200
Oh, you know what?

1511
01:05:18,200 --> 01:05:21,900
You're right, but I don't think it helps meaning.

1512
01:05:21,900 --> 01:05:23,400
Yeah, I type that wrong.

1513
01:05:23,500 --> 01:05:25,600
It should have looked like this.

1514
01:05:28,900 --> 01:05:33,500
Like that, but I don't think it actually works still.

1515
01:05:33,500 --> 01:05:34,300
Maybe it does.

1516
01:05:34,400 --> 01:05:38,200
I don't know, we could find out but you're right.

1517
01:05:38,200 --> 01:05:39,100
That's a good catch.

1518
01:05:39,400 --> 01:05:41,500
You do need to bundle those in Anonymous struct.

1519
01:05:41,800 --> 01:05:44,300
So I'm not actually sure, but if that, if that works, if it were, if

1520
01:05:44,300 --> 01:05:45,100
it works, that's cool.

1521
01:05:45,100 --> 01:05:48,200
Okay, so that does actually work, does it actually work?

1522
01:05:48,500 --> 01:05:49,500
Let's hope that that works.

1523
01:05:49,800 --> 01:05:50,500
So that does work.

1524
01:05:50,500 --> 01:05:51,400
I can get rid of this.

1525
01:05:53,200 --> 01:05:55,100
Well, alright, so I take it back.

1526
01:05:55,100 --> 01:05:55,900
So we're good.

1527
01:05:56,000 --> 01:05:58,300
I just had to wrap that guy up a little bit now.

1528
01:05:59,000 --> 01:05:59,800
Well, I guess so there.

1529
01:06:00,000 --> 01:06:04,500
One downside, which is, is this, the thing again, that only works in

1530
01:06:04,500 --> 01:06:07,800
visual studio and you get complaints on it in llvm because we had this

1531
01:06:07,800 --> 01:06:08,700
problem before.

1532
01:06:09,700 --> 01:06:13,400
When I did it, I did this here.

1533
01:06:15,000 --> 01:06:15,700
Where is it?

1534
01:06:15,900 --> 01:06:21,400
I did this here where I had an anonymous struct inside there and my

1535
01:06:21,400 --> 01:06:26,100
understanding was that llvm complained about that is that not true?

1536
01:06:26,300 --> 01:06:28,100
I know some people wrote in about that.

1537
01:06:28,200 --> 01:06:31,400
And so I don't know, like, maybe we maybe we still don't actually want

1538
01:06:31,400 --> 01:06:33,300
to do this because it may be only Visual Studio.

1539
01:06:33,300 --> 01:06:34,000
That's happy about.

1540
01:06:34,000 --> 01:06:36,500
If I don't know, we can leave it like that for now because that's what

1541
01:06:36,500 --> 01:06:37,500
I wanted to write.

1542
01:06:38,900 --> 01:06:42,100
And and so I would like to, I would like to be able to leave it that

1543
01:06:42,100 --> 01:06:42,500
way.

1544
01:06:43,100 --> 01:06:44,400
Like I said, C++ is really

1545
01:06:44,500 --> 01:06:48,200
We bad about unions so they are problematic.

1546
01:06:48,200 --> 01:06:52,900
But you know in this limited case, I feel like if it compiles and

1547
01:06:52,900 --> 01:06:56,300
works on both compilers, I'd be okay with using it because we're not

1548
01:06:56,300 --> 01:06:58,000
going to ask it to do anything fancy.

1549
01:06:58,500 --> 01:07:00,700
So hopefully it would be okay.

1550
01:07:00,700 --> 01:07:02,900
Like these guys are never going to have Constructors or any weird

1551
01:07:02,900 --> 01:07:03,400
stuff like that.

1552
01:07:03,400 --> 01:07:06,400
So we don't need to worry about what's going to do as far as that's

1553
01:07:06,400 --> 01:07:06,800
concerned.

1554
01:07:06,800 --> 01:07:09,900
So maybe we'll just maybe we'll just cross our fingers and hope that

1555
01:07:09,900 --> 01:07:12,000
it's not a problem for the all of them people because I'm not

1556
01:07:12,000 --> 01:07:13,200
compiling on llvm.

1557
01:07:13,400 --> 01:07:14,300
I'm not compile this code up.

1558
01:07:14,400 --> 01:07:15,500
I am right now, so I'm not sure.

1559
01:07:24,300 --> 01:07:26,100
How do you remember all these commands and stuff?

1560
01:07:26,100 --> 01:07:27,000
I'm super new decoding.

1561
01:07:27,000 --> 01:07:28,300
I don't like.

1562
01:07:28,300 --> 01:07:30,500
That was just you saw that mistake that I just had to correct.

1563
01:07:30,500 --> 01:07:31,100
Their right.

1564
01:07:31,200 --> 01:07:34,200
I often times will make mistakes because like I'll just look at

1565
01:07:34,200 --> 01:07:36,600
something quickly and you know, I mean, granted like on the stream.

1566
01:07:36,600 --> 01:07:39,300
I definitely make more mistakes than I would normally, but I still

1567
01:07:39,300 --> 01:07:40,200
make mistakes all the time.

1568
01:07:40,200 --> 01:07:42,600
I'm just, I can't remember whether something works.

1569
01:07:42,600 --> 01:07:43,500
Well, one way or not.

1570
01:07:43,600 --> 01:07:46,000
And so, instead of looking for a bug when it was like this.

1571
01:07:46,000 --> 01:07:47,300
I just assumed it was like, oh, right.

1572
01:07:47,300 --> 01:07:49,200
There's all these problems with C++ and unions.

1573
01:07:49,200 --> 01:07:50,200
And I just kind of was like,

1574
01:07:51,000 --> 01:07:52,900
All right, I'll move on and I'll do a different solution that I know

1575
01:07:52,900 --> 01:07:53,400
works.

1576
01:07:53,800 --> 01:07:56,400
And sometimes I don't remember like wait, no seedless should be able

1577
01:07:56,400 --> 01:07:58,700
to handle that case, what's going on?

1578
01:07:58,700 --> 01:07:59,000
And then go.

1579
01:07:59,000 --> 01:07:59,500
Oh, right.

1580
01:07:59,500 --> 01:08:01,200
There's like a typo here or something, right?

1581
01:08:01,600 --> 01:08:05,400
And so it you can't remember it all, like, you often times forget.

1582
01:08:07,300 --> 01:08:10,000
Yeah, and unfortunately, all not only do you often times forget.

1583
01:08:10,000 --> 01:08:14,400
But unlike on this, this long, like unlike on handmade here are you

1584
01:08:14,400 --> 01:08:17,399
don't have a group of people watching you on a stream, who can remind

1585
01:08:17,399 --> 01:08:17,700
you?

1586
01:08:17,899 --> 01:08:20,600
Because there are like someone on the stream, will remember the wait,

1587
01:08:20,800 --> 01:08:23,100
It no or catch the typo or whatever, right?

1588
01:08:23,300 --> 01:08:25,200
And normally when your program you don't have that you're just program

1589
01:08:25,200 --> 01:08:26,200
by yourself, right?

1590
01:08:26,300 --> 01:08:28,700
And so you do, you know, it's true.

1591
01:08:28,700 --> 01:08:30,100
It's hard to remember all this stuff.

1592
01:08:30,100 --> 01:08:33,300
But you know, you like anything else, the stuff that you do most

1593
01:08:33,300 --> 01:08:34,899
frequently see is sticks with you.

1594
01:08:34,899 --> 01:08:36,700
So you won't make mistakes on that, right?

1595
01:08:36,700 --> 01:08:37,399
The stuff that you type.

1596
01:08:37,399 --> 01:08:38,200
Most frequently.

1597
01:08:38,300 --> 01:08:39,800
I don't type this that frequently.

1598
01:08:39,800 --> 01:08:42,800
So, you know, it's easy for me to get

1599
01:08:43,899 --> 01:08:44,500
Big mistake.

1600
01:08:48,700 --> 01:08:51,399
Is there a performance reason not to use a Constructor for v2?

1601
01:08:51,399 --> 01:08:52,700
Or is it just stylistic?

1602
01:08:52,800 --> 01:08:53,800
It's mostly just stylistic.

1603
01:08:53,800 --> 01:08:58,899
I don't like to have to have Constructors for them, but it's also

1604
01:08:58,899 --> 01:08:59,899
because you start to get

1605
01:09:00,000 --> 01:09:01,100
Proliferation of stuff.

1606
01:09:01,100 --> 01:09:02,700
It's not performance concern.

1607
01:09:02,700 --> 01:09:04,600
Like the compiler should be smart enough to take care of it.

1608
01:09:04,600 --> 01:09:05,100
Totally.

1609
01:09:06,600 --> 01:09:08,899
The reason that I don't like it is once you start to have a

1610
01:09:08,899 --> 01:09:12,100
Constructor, you have to write multiple Constructors.

1611
01:09:12,300 --> 01:09:19,000
So, for example, if I want to in C++ with the bracket syntax, I can

1612
01:09:19,000 --> 01:09:22,899
omit them entirely, and that'll initialize it, right, but I couldn't

1613
01:09:22,899 --> 01:09:23,300
do that.

1614
01:09:23,300 --> 01:09:25,899
If I started adding Constructors here because it would want me to call

1615
01:09:25,899 --> 01:09:26,500
one of the Constructor.

1616
01:09:26,500 --> 01:09:28,200
So I have to start adding a Constructor.

1617
01:09:28,800 --> 01:09:29,500
I have to add the null.

1618
01:09:30,000 --> 01:09:30,500
Actor as well.

1619
01:09:30,500 --> 01:09:33,300
I have to like, and then you can't just declare one that isn't

1620
01:09:33,300 --> 01:09:33,899
constructed.

1621
01:09:33,899 --> 01:09:36,700
Like, you can't just say that because then you have to have a default

1622
01:09:36,700 --> 01:09:39,000
Constructor and is the default Constructor construct the zero.

1623
01:09:39,000 --> 01:09:39,200
Okay.

1624
01:09:39,200 --> 01:09:41,500
Well, it doesn't, then I got to make one that constructs, it 2-0.

1625
01:09:41,500 --> 01:09:43,300
Like it's just this kind of annoying thing.

1626
01:09:43,300 --> 01:09:46,300
Whereas cephas the normal Syntax for declaring variables.

1627
01:09:46,300 --> 01:09:46,600
Actually.

1628
01:09:46,600 --> 01:09:47,700
Let me do everything I want to do.

1629
01:09:47,700 --> 01:09:48,399
I just want the u.s.

1630
01:09:48,399 --> 01:09:49,200
To stay out of my way.

1631
01:09:49,600 --> 01:09:52,700
And so, basically, with with the without the constructors, I can do

1632
01:09:52,700 --> 01:09:55,500
exactly what I want, which is that is uninitialized.

1633
01:09:55,600 --> 01:09:59,900
That is cleared to 0, this has the first thing set and then the

1634
01:10:00,000 --> 01:10:00,800
Set to 0.

1635
01:10:00,900 --> 01:10:04,000
This has two things that that's all the stuff that I want.

1636
01:10:04,000 --> 01:10:05,300
You just automatically creates for me.

1637
01:10:05,300 --> 01:10:08,200
And so that's way nicer to, I don't have to type a bunch of extra

1638
01:10:08,200 --> 01:10:09,300
stuff in there for no reason.

1639
01:10:15,800 --> 01:10:17,200
Let's see.

1640
01:10:17,800 --> 01:10:20,700
When would the fact that an object's members are public or private

1641
01:10:20,700 --> 01:10:22,400
come into play in Game Dev.

1642
01:10:23,100 --> 01:10:26,300
Well, I never use private personally.

1643
01:10:26,300 --> 01:10:29,400
So it never comes into play in my game development, but other people

1644
01:10:29,400 --> 01:10:35,000
like to use it to prevent basically they like to try an inch in sure

1645
01:10:35,400 --> 01:10:40,400
if you will or should say the goal of private is to ensure that only a

1646
01:10:40,400 --> 01:10:44,000
limited set of places in the code can touch.

1647
01:10:44,200 --> 01:10:45,800
The members of that class.

1648
01:10:46,200 --> 01:10:51,400
And so it's a way of confining the set of people who can touch

1649
01:10:51,400 --> 01:10:54,200
something down to a known smaller set.

1650
01:10:54,600 --> 01:10:59,300
And so it's basically just a tool that some programmers use to prevent

1651
01:10:59,300 --> 01:11:04,200
themselves or other programmers from modifying parts of objects and

1652
01:11:04,200 --> 01:11:06,300
places that they don't want them to be modified.

1653
01:11:07,700 --> 01:11:10,000
So it's an attempt to try and not have bugs happen.

1654
01:11:10,000 --> 01:11:11,800
If you didn't ever have any bugs in your code.

1655
01:11:11,900 --> 01:11:13,600
There'd never be a reason to type private.

1656
01:11:13,600 --> 01:11:13,800
It's

1657
01:11:14,100 --> 01:11:18,300
Only for the programmer, it has no bearing on the quality of the code

1658
01:11:18,300 --> 01:11:18,800
or anything.

1659
01:11:19,800 --> 01:11:22,900
It's strictly about trying to prevent bugs from happening.

1660
01:11:23,200 --> 01:11:24,000
If that makes sense.

1661
01:11:24,700 --> 01:11:25,500
The reason I don't use it.

1662
01:11:25,500 --> 01:11:27,800
It's because it basically makes it harder to work with the class

1663
01:11:27,800 --> 01:11:31,700
because you have less options, external, code, can't operate on it, in

1664
01:11:31,700 --> 01:11:32,600
an easy way.

1665
01:11:32,600 --> 01:11:36,500
And so I prefer not to use it, but other people like it.

1666
01:11:46,200 --> 01:11:49,100
So do we already fix the height thing or is there another?

1667
01:11:49,300 --> 01:11:49,600
Yeah, okay.

1668
01:11:49,600 --> 01:11:50,700
So I think we fixed the height thing.

1669
01:11:50,700 --> 01:11:55,600
Just making sure or yeah.

1670
01:12:05,700 --> 01:12:08,600
Okay, so saying that, you should be able to have compound assignments,

1671
01:12:08,600 --> 01:12:09,900
outside the object.

1672
01:12:10,800 --> 01:12:13,900
So, basically, I was thinking that you maybe had to put them in here

1673
01:12:14,200 --> 01:12:17,700
and there is someone on stream saying that I could if I wanted to not

1674
01:12:17,700 --> 01:12:21,100
do that and I would probably prefer not to do that.

1675
01:12:21,400 --> 01:12:25,100
So what they were saying is that as long as I Do's a reference member

1676
01:12:25,100 --> 01:12:28,300
for my first one, I should be able to do it.

1677
01:12:28,400 --> 01:12:30,800
And so, basically, you're saying this, right?

1678
01:12:30,900 --> 01:12:31,900
Is this what you were saying?

1679
01:12:31,900 --> 01:12:32,800
I should be able to do.

1680
01:12:42,900 --> 01:12:43,500
Okay, here we go.

1681
01:12:44,600 --> 01:12:46,900
Oh, right, and then of course, I need to return a

1682
01:12:51,400 --> 01:12:53,400
Okay, so it looks like that's true as well.

1683
01:12:53,400 --> 01:12:57,600
So I can get rid of those guys and I can go ahead and put them outside

1684
01:12:58,000 --> 01:12:58,400
we go.

1685
01:12:59,700 --> 01:13:02,800
Like I said, it's I almost never program C++ stuff anymore.

1686
01:13:03,000 --> 01:13:06,100
So I forget a lot of the notation notation stuff.

1687
01:13:06,100 --> 01:13:07,500
Like I used to, right?

1688
01:13:07,500 --> 01:13:08,600
Tons of templates and stuff.

1689
01:13:08,600 --> 01:13:10,900
But I bet like, if I tried to write a template, now, it would take me

1690
01:13:10,900 --> 01:13:16,100
forever to write a template because I just feel, like, wait a minute.

1691
01:13:16,100 --> 01:13:19,100
Where does the, how do I read the thing?

1692
01:13:23,600 --> 01:13:24,200
What did I do?

1693
01:13:24,200 --> 01:13:27,300
Wrong there a times B.

1694
01:13:27,300 --> 01:13:28,000
Oh, right.

1695
01:13:28,500 --> 01:13:29,200
It's

1696
01:13:31,700 --> 01:13:32,300
A bat.

1697
01:13:50,100 --> 01:13:53,400
Alright, still seems roughly correct to me.

1698
01:13:54,700 --> 01:13:55,300
All right.

1699
01:14:03,200 --> 01:14:07,100
If you're using vertical bars in your Matrix and Vector notation, what

1700
01:14:07,100 --> 01:14:10,300
will you use to denote the determinant in my linear algebra text, or a

1701
01:14:10,300 --> 01:14:14,500
square braces, are used on matrices and vectors and vertical bars are

1702
01:14:14,500 --> 01:14:17,000
used to denote the determinant.

1703
01:14:18,100 --> 01:14:23,500
Um, so my recollection and I could be wrong about this, but my

1704
01:14:23,500 --> 01:14:27,300
recollection is that I used to see oops.

1705
01:14:29,200 --> 01:14:31,600
I usually see it written like this.

1706
01:14:35,400 --> 01:14:39,500
But also typically determinant is like debt and then they, right.

1707
01:14:40,600 --> 01:14:41,500
Stuff like that too.

1708
01:14:41,900 --> 01:14:46,800
So I don't know, but in general determinant is not something you write

1709
01:14:46,800 --> 01:14:52,800
very frequently in most like we will take many determinants at all.

1710
01:14:52,900 --> 01:14:54,000
I would suspect.

1711
01:14:54,200 --> 01:14:57,000
So it's not really something that I would ever optimize around because

1712
01:14:57,000 --> 01:14:59,800
the frequency with, which you write determinant is so low.

1713
01:15:00,100 --> 01:15:01,500
Compared with the frequency, right?

1714
01:15:01,500 --> 01:15:05,600
Everything else that you know, I would I always would make sure that

1715
01:15:05,600 --> 01:15:07,700
vectors are the simplest possible thing.

1716
01:15:08,200 --> 01:15:11,300
So just straight line for Vector would be absolutely what I would

1717
01:15:11,300 --> 01:15:12,000
always prefer.

1718
01:15:20,800 --> 01:15:22,400
Let's see.

1719
01:15:25,200 --> 01:15:29,800
Can't you make the whole thing a union instead of having a struct

1720
01:15:29,800 --> 01:15:30,500
union structure?

1721
01:15:30,500 --> 01:15:32,800
Oh, I don't know.

1722
01:15:33,000 --> 01:15:33,900
That's a good question.

1723
01:15:34,500 --> 01:15:37,800
They were basically asking, could I just make it all the whole thing?

1724
01:15:37,800 --> 01:15:40,500
Be Union, V2 like that?

1725
01:15:40,900 --> 01:15:41,500
And I don't know.

1726
01:15:43,200 --> 01:15:44,800
The answer apparently is yes.

1727
01:15:49,000 --> 01:15:49,800
It would appear.

1728
01:15:49,800 --> 01:15:53,700
So I've never, I don't think I've ever tried that before.

1729
01:15:54,600 --> 01:15:58,700
I mean, I've had bear unions before, but I've never, I've never, if

1730
01:15:58,700 --> 01:15:59,700
you'd asked me.

1731
01:15:59,900 --> 01:16:04,000
Could you put, could you do operator overloading on unions like that?

1732
01:16:04,000 --> 01:16:05,700
I would have to say, I've never tried it before.

1733
01:16:05,700 --> 01:16:07,800
I guess I would have assumed it would work but I've never actually

1734
01:16:07,800 --> 01:16:08,400
tried it before.

1735
01:16:08,700 --> 01:16:09,500
So I guess the answer is.

1736
01:16:09,500 --> 01:16:10,500
Yes, you could do that.

1737
01:16:11,400 --> 01:16:12,000
So there you go.

1738
01:16:12,600 --> 01:16:13,400
We'll leave it like that.

1739
01:16:13,400 --> 01:16:14,700
Till something breaks because it looks like it works.

1740
01:16:14,700 --> 01:16:15,200
Just fine.

1741
01:16:15,800 --> 01:16:18,400
I assume that it's a, you knew just the same as a struct in that way,

1742
01:16:18,400 --> 01:16:19,200
but I'm not sure.

1743
01:16:30,800 --> 01:16:33,300
Does the altered V to work now?

1744
01:16:33,300 --> 01:16:38,900
If you comment out the Constructor Oh you mean this this isn't

1745
01:16:38,900 --> 01:16:39,900
actually a Constructor.

1746
01:16:40,900 --> 01:16:43,800
This was just a utility function that you can use to construct two of

1747
01:16:43,800 --> 01:16:44,100
them.

1748
01:16:44,400 --> 01:16:45,200
You definitely don't need it.

1749
01:16:45,200 --> 01:16:49,200
We're not calling it anywhere, but I usually like to have that around

1750
01:16:49,900 --> 01:16:53,900
anyway, so that what I can do is if I want to declare like we're going

1751
01:16:53,900 --> 01:16:56,200
to use this eventually, I just just didn't use it yet.

1752
01:16:56,200 --> 01:16:58,600
It's not a Constructor Constructor would have to look like that.

1753
01:17:01,300 --> 01:17:02,700
That's what a Constructor looks like.

1754
01:17:03,200 --> 01:17:04,500
This is not a Constructor.

1755
01:17:04,600 --> 01:17:08,100
This is just a utility function that happens to return a V2.

1756
01:17:08,300 --> 01:17:10,500
So it kind of looks like Constructor, but it's not a Constructor.

1757
01:17:10,500 --> 01:17:11,800
It's just the thing that makes one.

1758
01:17:13,200 --> 01:17:16,400
And so, basically, what I would do is, you know, some place in the

1759
01:17:16,400 --> 01:17:17,000
middle of code.

1760
01:17:17,000 --> 01:17:21,900
If I wanted to make one of these, I just could make one like, right

1761
01:17:21,900 --> 01:17:23,300
when I was going to call a function or something.

1762
01:17:23,300 --> 01:17:24,900
And it would be clear what I was making.

1763
01:17:25,800 --> 01:17:29,000
And that's kind of old school because I think C, plus plus 11x,

1764
01:17:29,000 --> 01:17:29,500
whatever.

1765
01:17:29,600 --> 01:17:29,900
/.

1766
01:17:30,100 --> 01:17:30,800
I don't even know.

1767
01:17:31,000 --> 01:17:35,800
I think there's now ways that you can just do this, right?

1768
01:17:35,800 --> 01:17:37,800
I think you can write this now.

1769
01:17:39,900 --> 01:17:43,000
If that makes sense, in fact, let's test it.

1770
01:17:45,200 --> 01:17:46,100
Or I thought you could write.

1771
01:17:46,100 --> 01:17:48,100
I thought you could write something like this.

1772
01:17:48,400 --> 01:17:49,200
I don't remember.

1773
01:17:49,500 --> 01:17:54,900
I thought there was a thing where you could where you could sort of

1774
01:17:55,300 --> 01:17:58,800
actually still now do what this allows you to do, but in the old days

1775
01:17:58,800 --> 01:17:59,800
you couldn't so I

1776
01:18:00,100 --> 01:18:01,200
To make one of these guys.

1777
01:18:01,700 --> 01:18:04,700
I think there's something you can do nowadays in mind more in the like

1778
01:18:04,700 --> 01:18:06,400
modern standards that allow you to do that.

1779
01:18:09,700 --> 01:18:11,100
What libs are you using?

1780
01:18:11,200 --> 01:18:12,500
We are not using any Libs.

1781
01:18:18,300 --> 01:18:20,400
Just tested the be to structure an xcode using llvm.

1782
01:18:20,400 --> 01:18:21,300
It compiles find.

1783
01:18:21,300 --> 01:18:22,000
Okay, cool.

1784
01:18:22,700 --> 01:18:24,600
I don't know what people were talking about before.

1785
01:18:24,600 --> 01:18:26,500
I just remember, there were some people who were having trouble with

1786
01:18:26,500 --> 01:18:33,400
this for some reason, I thought so, yeah, so hopefully, it's just, it

1787
01:18:33,400 --> 01:18:35,500
was a fluke or something, and we're not going to have a problem with

1788
01:18:35,500 --> 01:18:35,800
it.

1789
01:18:40,600 --> 01:18:43,700
Although DRT walk says, if I remember correctly.

1790
01:18:43,700 --> 01:18:46,600
GCC and clang will both complain about the union.

1791
01:18:46,600 --> 01:18:47,300
Struck thing.

1792
01:18:47,400 --> 01:18:49,800
I did something similar in a Vic three object a few weeks ago and

1793
01:18:49,800 --> 01:18:50,900
ended up having to use.

1794
01:18:50,900 --> 01:18:51,800
Operator brackets.

1795
01:18:51,800 --> 01:18:55,100
Anyway, so yeah, so we may have to turn this into an operator

1796
01:18:55,100 --> 01:18:55,500
brackets.

1797
01:18:55,500 --> 01:18:58,000
I don't know getting conflicting things here from people.

1798
01:18:58,000 --> 01:18:59,900
It probably depends on what warning level you're on or maybe what

1799
01:18:59,900 --> 01:19:00,600
version of compiler.

1800
01:19:00,600 --> 01:19:01,100
I don't know.

1801
01:19:03,600 --> 01:19:04,500
I don't know.

1802
01:19:14,000 --> 01:19:19,700
Can you explain how to use Boolean equations used in intro to

1803
01:19:19,700 --> 01:19:20,800
programming?

1804
01:19:21,800 --> 01:19:24,400
Sorry, I'm not sure what that means.

1805
01:19:24,600 --> 01:19:25,600
Can you be more specific?

1806
01:19:25,600 --> 01:19:28,600
Are you talking about my little test dream?

1807
01:19:28,600 --> 01:19:28,800
I did.

1808
01:19:28,800 --> 01:19:31,800
But that's entered a c or some other intro to programming thing.

1809
01:19:33,900 --> 01:19:36,200
Do you have any book recommendations for Vector math?

1810
01:19:36,600 --> 01:19:40,600
I'm not sure if I do, or if I don't, I could tell you what book, I

1811
01:19:40,600 --> 01:19:45,000
used to learn, but I don't know that I necessarily recommend it,

1812
01:19:45,000 --> 01:19:48,700
because there may be better books, but I'll simply say that.

1813
01:19:50,900 --> 01:19:53,500
Basically, this was I believe.

1814
01:19:54,900 --> 01:19:55,100
No.

1815
01:19:55,100 --> 01:19:56,700
Wait, that's the harder core one.

1816
01:19:56,700 --> 01:19:58,000
Just is this.

1817
01:19:58,000 --> 01:19:59,500
It introduction to?

1818
01:20:03,400 --> 01:20:04,200
Hold on a second.

1819
01:20:14,700 --> 01:20:16,300
Please open for me.

1820
01:20:17,100 --> 01:20:20,000
Open my web page open it.

1821
01:20:21,700 --> 01:20:23,100
Well, this is the book.

1822
01:20:25,400 --> 01:20:26,600
That I learned from.

1823
01:20:27,000 --> 01:20:28,600
Of course, the web page is not available.

1824
01:20:28,600 --> 01:20:33,000
Apparently, I don't know if that means that the stream is down as

1825
01:20:33,000 --> 01:20:33,500
well.

1826
01:20:35,300 --> 01:20:36,100
Let's see here.

1827
01:20:37,200 --> 01:20:39,500
Does, it doesn't seem like the streams having too much trouble

1828
01:20:39,500 --> 01:20:40,900
necessarily, but who knows?

1829
01:20:41,600 --> 01:20:45,200
Why can we not reload the web page where it is?

1830
01:20:46,600 --> 01:20:51,500
So this was the actual book I learned out of although it wasn't the

1831
01:20:51,500 --> 01:20:52,000
fourth edition.

1832
01:20:52,000 --> 01:20:54,100
It was probably like the Third Edition or something.

1833
01:20:55,400 --> 01:20:59,900
And it was pretty good book, but I've heard from other people.

1834
01:21:00,000 --> 01:21:02,400
I'll bet there are better, linear algebra books to learn out of.

1835
01:21:02,700 --> 01:21:05,400
And so you may want to go look at.

1836
01:21:05,400 --> 01:21:08,900
There was, if you go to Hameed here at Oregon, go to news and Forum

1837
01:21:08,900 --> 01:21:10,800
site for a while.

1838
01:21:10,800 --> 01:21:14,300
I believed there was a discussion about this on code discussion.

1839
01:21:15,100 --> 01:21:18,600
I don't really probably should pin it or something because, you know,

1840
01:21:18,600 --> 01:21:22,300
it kind of goes in and out but there's basically like something where

1841
01:21:22,300 --> 01:21:27,600
people were kind of were like talking about about books and I don't

1842
01:21:27,600 --> 01:21:29,900
know, there might be there might be some good stuff.

1843
01:21:30,000 --> 01:21:30,700
Tough in there or not.

1844
01:21:30,700 --> 01:21:34,400
But again, it's really unfortunately something that I don't have the

1845
01:21:34,400 --> 01:21:37,900
definitive answer for because I don't really know what the I haven't

1846
01:21:37,900 --> 01:21:40,300
gone and looked at what books are out there at the moment.

1847
01:21:40,500 --> 01:21:41,500
So let's take a look here.

1848
01:21:43,000 --> 01:21:47,400
So here's like here's the actual if you want to copy that web address

1849
01:21:47,400 --> 01:21:51,100
down here was the thread that people were talking about.

1850
01:21:51,600 --> 01:21:56,600
I don't actually know like yeah, if it really came too much in terms

1851
01:21:56,600 --> 01:21:59,800
of people sort of definitively knowing what books to buy or what.

1852
01:22:00,000 --> 01:22:01,900
It's not to buy, but there you go.

1853
01:22:13,500 --> 01:22:14,400
Let's see.

1854
01:22:16,000 --> 01:22:19,000
Will you define vector and scalar addition?

1855
01:22:21,100 --> 01:22:23,500
Probably not because that's not really a math.

1856
01:22:23,500 --> 01:22:24,200
Operation.

1857
01:22:24,500 --> 01:22:25,900
Are you talking about?

1858
01:22:27,400 --> 01:22:31,200
So are you talking about this operation?

1859
01:22:38,300 --> 01:22:40,500
So I'm assuming this is what you're talking about, which is to say

1860
01:22:40,500 --> 01:22:47,300
that you have a vector and you have a scalar and you want to add them

1861
01:22:47,300 --> 01:22:47,900
together.

1862
01:22:48,800 --> 01:22:49,400
And

1863
01:22:52,100 --> 01:22:58,100
I think maybe in my, in my earlier days when my math was better.

1864
01:22:58,100 --> 01:23:00,900
Like when I did a lot more math on a daily basis.

1865
01:23:00,900 --> 01:23:04,800
I don't do nearly as much math on a daily basis as I used to, I may

1866
01:23:04,800 --> 01:23:08,900
have had some pedantic reason why I would say that this doesn't make

1867
01:23:08,900 --> 01:23:14,600
any sense because basically like a vector and a scalar don't really

1868
01:23:14,600 --> 01:23:17,100
add together in terms of the way.

1869
01:23:17,100 --> 01:23:22,000
MathWorks addition, is defined really usually between two

1870
01:23:22,200 --> 01:23:25,400
Actors or, like, based on between two things of the same Dimension.

1871
01:23:26,600 --> 01:23:29,000
So, basically, in the same way that you can't add a vector to a

1872
01:23:29,000 --> 01:23:29,600
matrix.

1873
01:23:29,600 --> 01:23:34,100
Like, for example, if I have something that looks like this, I can't

1874
01:23:34,100 --> 01:23:35,900
add something that looks like that.

1875
01:23:36,200 --> 01:23:40,700
That's typically not defined in math, at least, as far as I know, far

1876
01:23:40,700 --> 01:23:41,500
as I'd ever seen.

1877
01:23:42,400 --> 01:23:46,000
And so, typically encode, I don't Define them either but really you're

1878
01:23:46,000 --> 01:23:47,300
free to make your own rules.

1879
01:23:47,400 --> 01:23:49,100
It's whatever is going to be useful to you.

1880
01:23:49,100 --> 01:23:52,000
So if you think it's useful to be able to

1881
01:23:52,100 --> 01:23:55,900
Turn this into something like, say that you were trying to turn it

1882
01:23:55,900 --> 01:23:56,900
into doing this.

1883
01:23:57,300 --> 01:23:57,700
Oops.

1884
01:23:59,500 --> 01:23:59,800
Then.

1885
01:24:00,200 --> 01:24:02,300
You know, go for it, right?

1886
01:24:03,300 --> 01:24:06,800
But I would caution to say that there are usually reasons why math

1887
01:24:06,800 --> 01:24:08,000
doesn't do these things.

1888
01:24:08,100 --> 01:24:13,200
And so, for example, in this case, hopefully it's kind of you could

1889
01:24:13,200 --> 01:24:14,900
kind of see why you wouldn't actually do this.

1890
01:24:14,900 --> 01:24:16,600
Because what does this do in practice?

1891
01:24:16,800 --> 01:24:17,400
Right?

1892
01:24:18,300 --> 01:24:22,300
Well, what it does is, it would essentially pretend that you had a

1893
01:24:22,300 --> 01:24:24,900
vector that was 55, right?

1894
01:24:25,000 --> 01:24:28,100
And then it would add it to some Vector that you had that was

1895
01:24:28,100 --> 01:24:29,400
existing, which in this case is

1896
01:24:30,000 --> 01:24:31,000
Me too, right?

1897
01:24:31,000 --> 01:24:31,700
Which is here.

1898
01:24:31,900 --> 01:24:32,700
So there's my two.

1899
01:24:32,700 --> 01:24:34,100
There's my three, right?

1900
01:24:34,300 --> 01:24:37,400
So you'd essentially be adding this Vector to this Vector, right?

1901
01:24:37,900 --> 01:24:42,400
But why, you know, when do you really want this?

1902
01:24:42,500 --> 01:24:46,600
When is it common for you to want to spam a single value out to all

1903
01:24:46,600 --> 01:24:48,200
the elements of the vector like that?

1904
01:24:50,100 --> 01:24:52,100
It's just not a very common operation.

1905
01:24:52,100 --> 01:24:57,600
And so typically you will find that this would probably induce a lot

1906
01:24:57,600 --> 01:24:59,100
more just typos in your code.

1907
01:24:59,100 --> 01:24:59,500
Where you

1908
01:25:00,000 --> 01:25:01,000
We add a scalar to a vector.

1909
01:25:01,000 --> 01:25:02,200
You didn't mean to do that.

1910
01:25:03,000 --> 01:25:06,400
And so I would caution perhaps against implementing that unless you

1911
01:25:06,400 --> 01:25:07,400
had a really good reason.

1912
01:25:16,300 --> 01:25:19,200
Any particular reason for not supporting both scalar, Vector,

1913
01:25:19,200 --> 01:25:21,800
operators and Vector scalar operators?

1914
01:25:25,600 --> 01:25:26,900
Not really.

1915
01:25:29,100 --> 01:25:34,800
I would say that I'm fine with, I'd be fine with with this.

1916
01:25:36,900 --> 01:25:39,400
Right, if you would like to do that.

1917
01:25:41,500 --> 01:25:42,700
I think that's totally fine.

1918
01:25:43,200 --> 01:25:48,900
In fact, I might even say just do this, right, assuming, that's what

1919
01:25:48,900 --> 01:25:49,800
you're talking about.

1920
01:25:49,900 --> 01:25:50,400
I'm not sure.

1921
01:25:50,400 --> 01:25:52,000
That's, that's what you're talking about.

1922
01:25:52,000 --> 01:25:55,200
But basically so, yeah, if you want to be able to write five times

1923
01:25:55,200 --> 01:26:01,300
vector or vector times 5, I believe that's totally math, fine as far

1924
01:26:01,300 --> 01:26:01,900
as I know.

1925
01:26:02,300 --> 01:26:03,800
And so that's totally fine with me.

1926
01:26:03,900 --> 01:26:05,900
I can't think of a particular reason not to do it.

1927
01:26:20,300 --> 01:26:22,900
so, someone is saying that the struct name syntax, the thing that I

1928
01:26:22,900 --> 01:26:25,000
was doing where I said, oh, if you do this

1929
01:26:26,900 --> 01:26:29,100
There are saying that that's maybe only see 99.

1930
01:26:30,200 --> 01:26:31,700
So I guess you can't do it in C++.

1931
01:26:31,700 --> 01:26:32,700
Maybe not sure.

1932
01:26:33,700 --> 01:26:35,700
But anyway, I know that there's something like that that you can do

1933
01:26:35,700 --> 01:26:37,300
now in fancier stuff.

1934
01:26:39,500 --> 01:26:43,800
Does not returning real 32, instead of V2 in x equal operator, trim

1935
01:26:44,200 --> 01:26:46,100
your y value.

1936
01:26:50,300 --> 01:26:54,200
Okay, what does that mean exactly x equal?

1937
01:26:58,600 --> 01:26:59,800
so, which

1938
01:27:00,000 --> 01:27:00,800
Do you touch you?

1939
01:27:04,100 --> 01:27:09,000
Does not returning real 32 instead of V 2 in x equal operator, trim

1940
01:27:09,000 --> 01:27:10,300
your y value.

1941
01:27:10,300 --> 01:27:11,800
I don't really know what that means.

1942
01:27:12,200 --> 01:27:15,100
But basically, all I can say, is this, what this does right here, is

1943
01:27:15,100 --> 01:27:16,600
it just calls the operator?

1944
01:27:16,600 --> 01:27:18,400
We wrote right here, right?

1945
01:27:18,400 --> 01:27:21,400
Which does the full multiply of scalar times both elements.

1946
01:27:21,900 --> 01:27:26,200
So for example, if I was to step into that code you can see what it

1947
01:27:26,200 --> 01:27:26,800
does.

1948
01:27:27,400 --> 01:27:32,100
Let me go ahead and and set a breakpoint their weak point.

1949
01:27:32,100 --> 01:27:33,100
Can I do operator?

1950
01:27:33,200 --> 01:27:35,700
Equals, oops, that's not what I meant.

1951
01:27:36,100 --> 01:27:37,000
That's not what I meant to do.

1952
01:27:37,300 --> 01:27:39,000
Readers x equals.

1953
01:27:39,800 --> 01:27:40,300
There we go.

1954
01:27:41,200 --> 01:27:44,600
So if I, if I stepped into this code, you can see that it just calls

1955
01:27:44,600 --> 01:27:45,000
this.

1956
01:27:45,500 --> 01:27:48,100
So really all this is, is just shorthand to not write this again.

1957
01:27:48,100 --> 01:27:51,300
So that we know that our scalar times Vector, multiplication all goes

1958
01:27:51,300 --> 01:27:54,000
to the same path, which is what I wanted to ensure.

1959
01:27:54,000 --> 01:27:58,200
So you'll notice I wrote these two guys, both the, the one for the

1960
01:27:58,200 --> 01:28:00,800
reverse where you have the scalar on the right side and sew the left

1961
01:28:00,800 --> 01:28:03,000
side, and the one where you do,

1962
01:28:03,200 --> 01:28:04,000
It as x equals.

1963
01:28:04,000 --> 01:28:07,500
I just wrote them in terms of one single multiplier.

1964
01:28:08,000 --> 01:28:12,000
And so that this is, this is just telling it to call this, right.

1965
01:28:12,100 --> 01:28:12,500
That's all.

1966
01:28:12,500 --> 01:28:13,400
That's all that's happening.

1967
01:28:26,500 --> 01:28:28,900
Okay, so finally are on the hopefully, this is correct.

1968
01:28:29,000 --> 01:28:32,700
Someone was saying in the Stream, So in c99, like I was just saying

1969
01:28:32,700 --> 01:28:33,400
someone was saying that.

1970
01:28:33,400 --> 01:28:39,300
See this was c99 syntax and somebody else was saying that in regular,

1971
01:28:39,300 --> 01:28:41,000
see, you can do it this way.

1972
01:28:41,800 --> 01:28:42,900
So I don't actually know if that's true.

1973
01:28:42,900 --> 01:28:43,900
Let's find out.

1974
01:28:44,700 --> 01:28:45,200
Yeah, okay.

1975
01:28:45,200 --> 01:28:45,800
So there you go.

1976
01:28:46,300 --> 01:28:49,900
So here's the way we can do it in C++ 11.

1977
01:28:51,300 --> 01:28:53,600
Which maybe would make it so that we don't have to type this anymore

1978
01:28:53,800 --> 01:28:54,600
and that's kind of nice.

1979
01:28:54,600 --> 01:28:55,300
Potentially.

1980
01:28:55,400 --> 01:28:59,200
Although it does mean that we have to be C plus plus 11, which I don't

1981
01:28:59,200 --> 01:29:01,900
actually know if we would want to do necessarily but it seems well

1982
01:29:01,900 --> 01:29:02,100
enough.

1983
01:29:02,100 --> 01:29:04,300
So we could, we could consider doing that.

1984
01:29:04,500 --> 01:29:13,400
So I'll say consider this as our as our syntax and who knows, right?

1985
01:29:16,100 --> 01:29:17,500
Almost almost out of time.

1986
01:29:31,700 --> 01:29:33,600
Let's see.

1987
01:29:41,900 --> 01:29:43,500
Let's see.

1988
01:29:44,300 --> 01:29:44,900
Do we question?

1989
01:29:44,900 --> 01:29:47,000
Don't you need some sort of Graphics Library display stuff.

1990
01:29:47,000 --> 01:29:48,400
Not in a console with C.

1991
01:29:48,500 --> 01:29:49,500
No, you do not.

1992
01:29:49,500 --> 01:29:50,800
In fact, handmade hero.

1993
01:29:51,400 --> 01:29:55,500
I don't know if you preorder The Source or not.

1994
01:29:55,600 --> 01:29:56,600
I can pre-order the game or not.

1995
01:29:56,600 --> 01:29:58,500
If you preorder the game, it comes with source code.

1996
01:29:58,700 --> 01:29:59,800
So if you come on here and you pre-order.

1997
01:30:00,000 --> 01:30:02,400
Name and then you'll get a link to download the source code.

1998
01:30:02,400 --> 01:30:04,800
The source code actually has 100% of the code in it.

1999
01:30:04,800 --> 01:30:07,300
That's displaying the stuff on the screen, all of it.

2000
01:30:07,300 --> 01:30:08,600
There's no libraries used at all.

2001
01:30:09,900 --> 01:30:13,700
And so, if you want to see how to put graphs up on the screen, you can

2002
01:30:13,700 --> 01:30:14,000
do that.

2003
01:30:14,000 --> 01:30:16,600
And also, obviously, you can go to the video archive where I talk

2004
01:30:16,600 --> 01:30:17,800
about how to put stuff on the screen.

2005
01:30:18,300 --> 01:30:22,000
In fact, if you take a look at the video archive here, in fact, or you

2006
01:30:22,000 --> 01:30:24,800
know, what you can do, actually, if you go to forums that handmade

2007
01:30:24,800 --> 01:30:27,200
hero dot-org and you go to the episode guy, that's a better place for

2008
01:30:27,200 --> 01:30:27,500
it.

2009
01:30:27,600 --> 01:30:28,700
Can see them all listed here.

2010
01:30:29,100 --> 01:30:29,900
I believe you can

2011
01:30:30,000 --> 01:30:32,900
jump to allocating it back buffer and animating the back buffer that

2012
01:30:32,900 --> 01:30:35,200
just shows how to put that's like when we were talking about how to

2013
01:30:35,200 --> 01:30:37,100
put cracks on screen opening win32 window.

2014
01:30:37,100 --> 01:30:38,600
Also just shows the basics.

2015
01:30:39,000 --> 01:30:41,700
So basically days one through five is like how to get graphics on the

2016
01:30:41,700 --> 01:30:43,200
screen in Windows using know libraries.

2017
01:30:43,500 --> 01:30:44,800
And again, each day is only an hour.

2018
01:30:44,800 --> 01:30:49,200
So basically it's only five hours of code of listening to explain how

2019
01:30:49,200 --> 01:30:51,800
to do it, entirely yourself with no libraries whatsoever.

2020
01:30:52,600 --> 01:30:54,100
And so it's really not that hard.

2021
01:30:54,800 --> 01:30:58,600
It's basic, it's less than a day's worth of work to do.

2022
01:30:58,600 --> 01:30:59,800
You'd certainly don't need a library.

2023
01:31:05,000 --> 01:31:06,600
Let's see.

2024
01:31:07,200 --> 01:31:08,300
Let's see here.

2025
01:31:14,000 --> 01:31:14,800
A lot of questions.

2026
01:31:14,800 --> 01:31:15,500
Oh my God.

2027
01:31:15,600 --> 01:31:15,900
Okay.

2028
01:31:15,900 --> 01:31:16,600
Let's see here.

2029
01:31:16,700 --> 01:31:16,900
Mass.

2030
01:31:16,900 --> 01:31:17,500
Couple more.

2031
01:31:20,800 --> 01:31:23,500
His 2015 time to update your copyright notice.

2032
01:31:25,200 --> 01:31:25,500
I guess.

2033
01:31:25,500 --> 01:31:26,100
That's true.

2034
01:31:26,100 --> 01:31:28,600
Although, isn't it copyrighted for when it's first published?

2035
01:31:29,100 --> 01:31:29,500
I don't know.

2036
01:31:29,500 --> 01:31:35,800
But we could I guess we can go in here to our to our misc.

2037
01:31:37,000 --> 01:31:42,400
See emacs go 2014.

2038
01:31:43,100 --> 01:31:43,700
There we go.

2039
01:31:46,600 --> 01:31:49,100
Alright, it's done from now.

2040
01:31:49,100 --> 01:31:49,300
On.

2041
01:31:49,300 --> 01:31:50,700
It'll be any new files.

2042
01:31:50,700 --> 01:31:52,500
We make 2015 copyright.

2043
01:31:54,600 --> 01:31:55,800
Let's see here.

2044
01:32:00,900 --> 01:32:01,700
Saudi Seven Samurai.

2045
01:32:01,700 --> 01:32:04,700
We did end up being able to initialize the union using brackets.

2046
01:32:05,100 --> 01:32:06,500
So that was just me with a typo.

2047
01:32:06,500 --> 01:32:09,100
So I was thinking it was causing me more trouble than it had to.

2048
01:32:09,400 --> 01:32:10,600
It was just getting confused.

2049
01:32:12,300 --> 01:32:14,300
I'm not really sure why it was getting confused.

2050
01:32:16,100 --> 01:32:17,000
But, no matter.

2051
01:32:18,600 --> 01:32:19,700
Let's see.

2052
01:32:20,600 --> 01:32:25,300
Do you have used for constant such as V 2 1 and V, 2 up cetera.

2053
01:32:26,900 --> 01:32:30,000
So, basically, what the person is asking, is, do I ever Define

2054
01:32:30,000 --> 01:32:31,200
constants of these?

2055
01:32:31,200 --> 01:32:34,500
And sometimes I do, sometimes, I'll do stuff like, I'll basically

2056
01:32:34,500 --> 01:32:37,500
Define Global's that are of the form.

2057
01:32:38,900 --> 01:32:43,500
You know, like using the syntax that we've got here.

2058
01:32:43,700 --> 01:32:47,900
I'll do something like, you know, Global x axis or something like

2059
01:32:47,900 --> 01:32:48,400
that.

2060
01:32:48,800 --> 01:32:52,900
And I'll do something like this or Global X2, you know, like that.

2061
01:32:52,900 --> 01:32:54,500
And I'll do something like this.

2062
01:32:55,000 --> 01:32:57,200
Sometimes I do that stuff.

2063
01:32:58,800 --> 01:32:59,200
Oops.

2064
01:33:04,500 --> 01:33:09,600
That sort of thing, but more often than not, I just don't bother more

2065
01:33:09,600 --> 01:33:10,300
often than not.

2066
01:33:10,300 --> 01:33:12,700
I just put the stuff directly in the code because it's not like the

2067
01:33:12,700 --> 01:33:15,200
x-axis or the zero Vector ever going to change.

2068
01:33:15,200 --> 01:33:17,300
And so, sometimes it's better for people just be able to see them.

2069
01:33:18,500 --> 01:33:19,100
So, I don't know.

2070
01:33:19,100 --> 01:33:22,800
So, I mean, they're not bad ideas necessarily, but but I just don't

2071
01:33:22,800 --> 01:33:24,900
actually tend to get that much use out of them in practice.

2072
01:33:27,300 --> 01:33:27,900
So, I don't know.

2073
01:33:32,900 --> 01:33:33,800
Let's see.

2074
01:33:40,700 --> 01:33:43,700
Looks like that's just about everything.

2075
01:33:46,500 --> 01:33:47,900
think we've got,

2076
01:33:51,400 --> 01:33:54,600
Pseudo cutter says copyright should cover all years in which content

2077
01:33:54,600 --> 01:33:56,000
was contributed.

2078
01:33:56,800 --> 01:33:57,500
Okay.

2079
01:33:59,200 --> 01:34:05,200
Well, so I don't know, our does that mean we have to put like 2014

2080
01:34:06,100 --> 01:34:07,800
Dash 2015 or something?

2081
01:34:08,700 --> 01:34:08,900
I don't know.

2082
01:34:08,900 --> 01:34:10,400
I'm just gonna leave it like that for now.

2083
01:34:11,900 --> 01:34:13,400
Copyright lasts for so long.

2084
01:34:13,400 --> 01:34:16,300
It's like 70 years or something like that.

2085
01:34:16,300 --> 01:34:20,400
Anyway, I feel like I'll be so dead and buried by the time that would

2086
01:34:20,400 --> 01:34:23,200
matter, and I'm going to release the code into the public domain 2

2087
01:34:23,200 --> 01:34:24,500
years after the game ships.

2088
01:34:24,600 --> 01:34:26,100
I've already stated that publicly.

2089
01:34:26,800 --> 01:34:28,900
So basically, yeah, why would I care?

2090
01:34:29,000 --> 01:34:29,400
That's true.

2091
01:34:29,400 --> 01:34:30,300
I don't have to care at all.

2092
01:34:30,400 --> 01:34:34,100
Everything could just be 2015, because copyright lasts so much longer

2093
01:34:34,100 --> 01:34:38,300
than we are actually going to need copyright to last on this code,

2094
01:34:39,300 --> 01:34:41,200
because it will become free for everyone.

2095
01:34:41,200 --> 01:34:41,500
In

2096
01:34:42,200 --> 01:34:43,700
Much less than 70 years.

2097
01:34:47,000 --> 01:34:47,900
Let's see here.

2098
01:34:49,600 --> 01:34:53,100
How about adding const references to function parameters to avoid copy

2099
01:34:53,100 --> 01:34:53,900
by value?

2100
01:34:54,600 --> 01:34:56,900
I don't really ever find const to be useful.

2101
01:34:58,800 --> 01:35:03,500
I've made zero constant stakes in the past.

2102
01:35:04,000 --> 01:35:04,800
Let's see.

2103
01:35:07,100 --> 01:35:09,700
I want to say in the past 14 years of coding.

2104
01:35:09,800 --> 01:35:12,300
I've never had a time when cons would have caught an error and I never

2105
01:35:12,300 --> 01:35:16,200
type const on the stream because I'm less concentrated.

2106
01:35:16,200 --> 01:35:19,900
I have made one error that costs would have caught but we it was an

2107
01:35:19,900 --> 01:35:22,200
immediate type of thing that we saw right away.

2108
01:35:22,200 --> 01:35:25,400
So it wouldn't have even constant really have saved at any time.

2109
01:35:26,400 --> 01:35:29,300
So maybe later on the stream if I find that I'm making some con

2110
01:35:29,300 --> 01:35:31,100
stairs, which I don't really ever make.

2111
01:35:31,500 --> 01:35:32,600
Normally when I'm coding.

2112
01:35:33,400 --> 01:35:36,400
I would consider starting to use const but only on the stream in

2113
01:35:36,400 --> 01:35:36,700
Normal.

2114
01:35:36,900 --> 01:35:39,300
I never use constants completely Superfluous.

2115
01:35:39,600 --> 01:35:40,100
I find.

2116
01:35:54,600 --> 01:35:58,000
Doesn't contest, help the compiler, optimize s enemy Mouse.

2117
01:35:59,400 --> 01:35:59,700
So the

2118
01:36:00,000 --> 01:36:02,800
It is not really so.

2119
01:36:05,000 --> 01:36:12,900
There is one specific case that technically, the compiler can optimize

2120
01:36:12,900 --> 01:36:14,000
when you put constant.

2121
01:36:15,200 --> 01:36:18,600
I don't actually know if any compilers actually do and it's a case.

2122
01:36:18,600 --> 01:36:25,800
That's so kind of uninteresting that it's unclear.

2123
01:36:26,400 --> 01:36:27,600
Why you would even care.

2124
01:36:27,900 --> 01:36:30,800
I mean, maybe once in a great while you would care about this with

2125
01:36:30,800 --> 01:36:34,500
this case, but 99% of the time, constant doesn't help.

2126
01:36:34,700 --> 01:36:36,100
The optimizer.

2127
01:36:36,500 --> 01:36:43,000
Because basically, if there are any pointers going on, then basically,

2128
01:36:43,000 --> 01:36:45,900
the only time that cost can help them is if it's a non.

2129
01:36:45,900 --> 01:36:48,800
If it's something that could never have had that.

2130
01:36:48,800 --> 01:36:55,200
The compiler can verify by looking that no one can ever have gotten a

2131
01:36:55,200 --> 01:36:57,200
pointer to that thing.

2132
01:36:57,800 --> 01:36:58,400
Right?

2133
01:36:59,200 --> 01:37:03,200
And so basically has to be something that is passed or declared on the

2134
01:37:03,200 --> 01:37:04,500
stack by

2135
01:37:04,600 --> 01:37:08,700
Value inside the function, you have to declare it const.

2136
01:37:08,800 --> 01:37:12,300
And then you have to call a function with a pointer to it.

2137
01:37:13,400 --> 01:37:15,200
That could modify it.

2138
01:37:15,900 --> 01:37:21,200
And that is the only case where where constant actually helps the

2139
01:37:21,200 --> 01:37:24,200
optimizer potentially and more specifically.

2140
01:37:24,200 --> 01:37:25,800
It's probably not the optimizer that it helps.

2141
01:37:25,800 --> 01:37:31,300
It helps the front end pass a better thing to the optimizer if you

2142
01:37:31,300 --> 01:37:31,600
will.

2143
01:37:32,700 --> 01:37:36,400
But but yeah, so people think const helps in optimization, but that's

2144
01:37:36,400 --> 01:37:37,300
not actually true.

2145
01:37:37,700 --> 01:37:41,100
It's very, very rare that cost helps optimization at all.

2146
01:37:41,700 --> 01:37:44,400
But yeah, if for some reason we had that one case that I'm talking

2147
01:37:44,400 --> 01:37:47,300
about and we actually had it in a performance critical part of the

2148
01:37:47,300 --> 01:37:47,800
code.

2149
01:37:48,500 --> 01:37:53,100
Maybe I would consider putting cost in there but I don't think I've

2150
01:37:53,100 --> 01:37:56,300
ever hit that case in practice because if I was actually optimizing

2151
01:37:56,300 --> 01:37:58,600
the thing, it would be an intrinsic or something and we wouldn't be

2152
01:37:58,600 --> 01:38:00,200
talking about that kind of a thing anyway.

2153
01:38:12,800 --> 01:38:15,100
So I think that's basically it.

2154
01:38:15,800 --> 01:38:22,800
I am going to to wrap up the stream now, hopefully everyone was okay

2155
01:38:22,800 --> 01:38:24,500
with the math that we did today.

2156
01:38:24,800 --> 01:38:26,800
It was pretty I think pretty simple.

2157
01:38:26,800 --> 01:38:28,700
I don't think we did anything to ridiculous.

2158
01:38:28,700 --> 01:38:31,700
Hopefully it was a pretty straightforward and basically ties directly

2159
01:38:31,700 --> 01:38:33,600
back to the code that you already saw working.

2160
01:38:33,600 --> 01:38:37,800
So they're really we didn't really do anything far out or weird.

2161
01:38:37,800 --> 01:38:38,400
I think.

2162
01:38:38,500 --> 01:38:40,600
So, hopefully if you know the pathet, if you knew the Pythagorean

2163
01:38:40,600 --> 01:38:41,700
theorem from

2164
01:38:41,900 --> 01:38:42,600
School math.

2165
01:38:43,100 --> 01:38:46,200
And you saw the stuff that we've been doing so far in the code.

2166
01:38:46,400 --> 01:38:49,500
I think that you'd probably be pretty comfortable with all the stuff

2167
01:38:49,500 --> 01:38:51,700
we did today in our math code.

2168
01:38:52,100 --> 01:38:55,000
And so hopefully that's a nice gentle introduction to vectors and you

2169
01:38:55,400 --> 01:38:58,800
will be be nice and ready for us to start getting into some more.

2170
01:39:00,100 --> 01:39:02,600
Complex, Vector stuff tomorrow, but you know what?

2171
01:39:02,600 --> 01:39:04,400
We don't even necessarily have to get into more complex, such

2172
01:39:04,400 --> 01:39:04,600
tomorrow.

2173
01:39:04,600 --> 01:39:10,200
What we could do tomorrow is just do some real basic stuff and and get

2174
01:39:10,200 --> 01:39:12,500
our momentum stuff working because that would be a pretty good thing

2175
01:39:12,500 --> 01:39:12,800
to do.

2176
01:39:12,800 --> 01:39:14,000
So, maybe that's what we'll do tomorrow.

2177
01:39:14,000 --> 01:39:15,500
We'll work on that momentum stuff.

2178
01:39:16,400 --> 01:39:19,500
And that'll be a pretty good way to sort of keep the math, very light,

2179
01:39:19,700 --> 01:39:22,200
but still make some bags, meaningful, progress in our code.

2180
01:39:22,600 --> 01:39:28,700
So hopefully you will all come back tomorrow, 8:00 p.m.

2181
01:39:28,700 --> 01:39:29,700
Pacific Standard Time.

2182
01:39:30,600 --> 01:39:34,000
When we will go ahead and Implement that momentum code using our

2183
01:39:34,000 --> 01:39:37,900
brand-new shiny Vector to structure that we create today.

2184
01:39:37,900 --> 01:39:38,600
Although it's a union.

2185
01:39:38,600 --> 01:39:42,800
Now, even, our Vector to Union, again, 8 p.m.

2186
01:39:42,800 --> 01:39:44,100
Pacific Standard time tomorrow.

2187
01:39:44,700 --> 01:39:47,200
If you would like to pre-order the game and follow along with the

2188
01:39:47,200 --> 01:39:50,800
source code, you can do that at handmade hero dot org, and that comes

2189
01:39:50,800 --> 01:39:52,800
with a link that has a source code from every single day.

2190
01:39:53,000 --> 01:39:55,900
So you can go ahead and follow along with PBS days if you wanted to as

2191
01:39:55,900 --> 01:39:56,200
well.

2192
01:39:56,500 --> 01:39:57,500
We also have a patreon.

2193
01:39:57,500 --> 01:39:59,700
If you want to support the series, you could subscribe there.

2194
01:40:00,500 --> 01:40:03,000
And finally, we have the Forum site, which I pointed out a little

2195
01:40:03,000 --> 01:40:05,200
earlier in the Q&A, which is basically a great place to go for

2196
01:40:05,200 --> 01:40:07,200
information or for learning about stuff.

2197
01:40:07,200 --> 01:40:08,000
That's in the series.

2198
01:40:08,000 --> 01:40:08,800
There's discussion board.

2199
01:40:08,800 --> 01:40:11,200
You can ask questions on a coding resources page, that's ports to

2200
01:40:11,200 --> 01:40:13,900
Linux, and mac, and a bunch of other resources.

2201
01:40:13,900 --> 01:40:14,900
You might want to check out there.

2202
01:40:14,900 --> 01:40:18,300
There's an episode guide for catching up on the past episodes and

2203
01:40:18,300 --> 01:40:21,600
there's also the schedule which is posted here every day.

2204
01:40:22,500 --> 01:40:25,300
Basically it's posted on Monday for the whole week so you can see when

2205
01:40:25,300 --> 01:40:26,400
the different Broncos going to be.

2206
01:40:27,200 --> 01:40:27,800
So that's it.

2207
01:40:27,800 --> 01:40:29,900
I highly recommend checking it out, if you get a chance.

2208
01:40:30,800 --> 01:40:32,500
That is it for today.

2209
01:40:33,000 --> 01:40:33,300
Again.

2210
01:40:33,300 --> 01:40:35,100
Hope see you tomorrow at 8:00 p.m.

2211
01:40:35,100 --> 01:40:36,000
Pacific Standard time.

2212
01:40:36,600 --> 01:40:39,900
And yeah, for anyone who's new to Vector math.

2213
01:40:39,900 --> 01:40:43,000
I hope that was a pretty reasonable introduction and that you will

2214
01:40:43,000 --> 01:40:46,800
take a little time to play around with it yourself and see, just how

2215
01:40:46,800 --> 01:40:49,100
easy it can be to sort of ease yourself into it.

2216
01:40:49,600 --> 01:40:52,200
And then, you'll be surprised just how far we can go with taking

2217
01:40:52,200 --> 01:40:53,300
little baby steps.

2218
01:40:54,000 --> 01:40:58,300
Just along along the way, all the math will suddenly start to pile up

2219
01:40:58,300 --> 01:40:59,100
and it'll be like, whoa.

2220
01:40:59,100 --> 01:40:59,800
I know all this math.

2221
01:40:59,800 --> 01:41:00,100
Now.

2222
01:41:00,600 --> 01:41:03,500
Alright, so, thank you everyone for joining me and I hope to see you

2223
01:41:03,500 --> 01:41:04,000
tomorrow.

