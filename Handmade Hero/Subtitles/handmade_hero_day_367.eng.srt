1
00:00:03,900 --> 00:00:06,500
Hello everybody and welcome to handmade hero.

2
00:00:06,500 --> 00:00:10,400
The show we could have complete game live on stream today.

3
00:00:10,400 --> 00:00:14,400
I think, I guess, I don't really know what we should be doing today

4
00:00:14,400 --> 00:00:22,800
necessarily but I think today we will do is we will go hunt down some

5
00:00:22,800 --> 00:00:27,700
bugs and possibly play a little bit with how we're submitting

6
00:00:27,700 --> 00:00:33,100
Primitives because I don't necessarily want to start today on.

7
00:00:34,000 --> 00:00:37,300
Sort of the shaders multi sample buffer, sort of stuff.

8
00:00:37,600 --> 00:00:42,000
We're going to have to upgrade the opengl part for right now.

9
00:00:42,000 --> 00:00:48,100
I was only using, you know, slightly extended opengl to the old-school

10
00:00:48,100 --> 00:00:51,400
one that's you know that you can just link to on Windows and run.

11
00:00:51,400 --> 00:00:56,000
We only query a handful of extended functions and those were both

12
00:00:56,000 --> 00:00:59,600
basically only for using srgb.

13
00:01:00,600 --> 00:01:01,900
Instead of you know

14
00:01:03,600 --> 00:01:06,200
To basically to have light linear color operation.

15
00:01:07,100 --> 00:01:12,600
And so, we were doing that very specifically because I didn't want to

16
00:01:12,600 --> 00:01:17,600
teach a bunch of open shell minutiae if we weren't necessarily going

17
00:01:17,600 --> 00:01:20,700
to use it, but we probably are at this point.

18
00:01:20,700 --> 00:01:22,700
So it's a good time to go.

19
00:01:22,700 --> 00:01:28,000
Alright, let's take a look at how you initialize open.

20
00:01:28,000 --> 00:01:29,400
Jill in a more modern way.

21
00:01:29,400 --> 00:01:32,300
Where, you know, we're going to load a Vertex Shader in a pixel

22
00:01:32,300 --> 00:01:33,300
Shader, at least,

23
00:01:33,900 --> 00:01:40,000
Possibly not, we could even use more shaders at the head end, like

24
00:01:40,200 --> 00:01:46,000
geometry, shaders, and stuff like this in order to produce our Sprite

25
00:01:46,000 --> 00:01:48,900
since that, you know, send down more compact information for our

26
00:01:48,900 --> 00:01:49,100
Sprites.

27
00:01:49,100 --> 00:01:50,500
For example, we could do that

28
00:01:52,100 --> 00:01:56,500
I don't know that we will or should but we'll sort of do that work.

29
00:01:56,500 --> 00:02:00,000
And we also need to because we are actually using the Z buffer.

30
00:02:00,000 --> 00:02:03,200
Now, we need to go ahead and use some slightly more advanced features

31
00:02:03,200 --> 00:02:07,100
like multi sample, anti-aliasing, and Alpha 2 coverage.

32
00:02:07,500 --> 00:02:13,300
Just to make sure that we can do the least amount of on CPU work, to

33
00:02:13,300 --> 00:02:15,400
get our Sprites sorting properly.

34
00:02:15,400 --> 00:02:20,700
And again, a lot of this stuff is just to eliminate visual artifacts

35
00:02:20,700 --> 00:02:21,700
of compositing.

36
00:02:21,900 --> 00:02:26,700
Alpha Blended 2D Sprites week, you can see them how it how it is.

37
00:02:26,700 --> 00:02:32,200
At the moment, you can see a lot of this stuff here with the Z buffer

38
00:02:32,200 --> 00:02:36,300
and the fringing and that sort of stuff, that is what I'm talking

39
00:02:36,300 --> 00:02:36,900
about.

40
00:02:36,900 --> 00:02:40,300
We need to eliminate those for visual quality purposes.

41
00:02:40,300 --> 00:02:46,200
Everything else is fine for our purposes in terms of Z, buffer wise.

42
00:02:46,900 --> 00:02:49,200
And, you know, the only other thing that I thought were going to have

43
00:02:49,200 --> 00:02:51,600
to do is because, you know, our Sprites are stacked on top of each

44
00:02:51,600 --> 00:02:51,700
other.

45
00:02:51,800 --> 00:02:55,200
Other at such an oblique angle.

46
00:02:56,500 --> 00:02:59,700
I guess steep angle, I don't know what you want to call that at, such

47
00:02:59,700 --> 00:02:59,900
a steal.

48
00:03:00,000 --> 00:03:00,600
Angle.

49
00:03:01,100 --> 00:03:04,500
We're going to have to potentially fudge the Z coordinate, so that

50
00:03:04,500 --> 00:03:10,600
things rise up out of the plane faster than they would in Geometry

51
00:03:10,600 --> 00:03:12,700
terms when they're accessing the z-buffer.

52
00:03:13,000 --> 00:03:17,400
So that's basically like the last set of stuff we have to do to move

53
00:03:17,400 --> 00:03:23,300
over to 3D and to get visual quality and you know get rid of like the

54
00:03:23,300 --> 00:03:25,400
flickery B and the fringing.

55
00:03:26,800 --> 00:03:28,600
That's that's really what we have to do there.

56
00:03:28,700 --> 00:03:29,800
And what we can do is

57
00:03:30,000 --> 00:03:33,600
Is will will try to coincide that with updating to the new art as

58
00:03:33,600 --> 00:03:34,000
well.

59
00:03:34,400 --> 00:03:38,500
Basically the holdup on that as I have to go process it out of

60
00:03:38,500 --> 00:03:41,300
Photoshop and put it into like our format and stuff like that, which

61
00:03:41,300 --> 00:03:44,900
is kind of a bit of work for me on the side.

62
00:03:44,900 --> 00:03:49,000
But that's really what we have to do for that as well.

63
00:03:50,100 --> 00:03:54,900
So that's really all we are looking at here that will not be

64
00:03:55,600 --> 00:03:57,700
particularly difficult work at all.

65
00:03:58,500 --> 00:04:02,200
It's just time consuming because any time you're working with sort of

66
00:04:02,200 --> 00:04:07,500
a black box in, like, we are with opengl where we can't step directly

67
00:04:07,500 --> 00:04:08,500
into the code.

68
00:04:09,200 --> 00:04:12,800
We are at a severe disadvantage for obvious reasons.

69
00:04:12,800 --> 00:04:16,399
We aren't able to easily track down bugs.

70
00:04:16,399 --> 00:04:20,000
We might have because we can't watch what happens to things.

71
00:04:20,000 --> 00:04:21,000
We send down the pipeline.

72
00:04:21,000 --> 00:04:24,400
So, you know, if you take a look at something like, multi sample

73
00:04:24,400 --> 00:04:28,200
anti-aliasing, you know, we can go through the special magic Mojo.

74
00:04:28,300 --> 00:04:31,700
Of turning it on and resolving our buffers and whatever.

75
00:04:32,000 --> 00:04:36,400
And you know maybe it works, maybe it doesn't work if it doesn't work.

76
00:04:36,400 --> 00:04:37,200
How do you solve it?

77
00:04:37,200 --> 00:04:37,700
Right?

78
00:04:38,000 --> 00:04:41,200
And so you have to kind of go through this process of like sending

79
00:04:41,200 --> 00:04:44,000
down structured art and looking at what happens to it and making sure

80
00:04:44,000 --> 00:04:49,100
that it verifies and that sort of stuff in order to really be able to

81
00:04:49,200 --> 00:04:50,700
get well working programs here.

82
00:04:51,600 --> 00:04:56,300
So we may also at that point have to switch to a different computer.

83
00:04:57,600 --> 00:04:58,100
The reason

84
00:04:58,300 --> 00:05:03,100
In for that is just that one of the things that aids debugging greatly

85
00:05:03,900 --> 00:05:09,600
with something like opengl is having the ability to use one of the

86
00:05:09,700 --> 00:05:15,800
inspection tools like nsight or one of the other tools that allows you

87
00:05:15,800 --> 00:05:20,400
to look at what your opengl instruction stream is doing.

88
00:05:21,300 --> 00:05:27,200
And I don't, I mean, we could try on this machine to do it, but I'm

89
00:05:27,200 --> 00:05:28,200
not optimistic.

90
00:05:28,300 --> 00:05:30,300
Like that, we will get any of them to work.

91
00:05:30,300 --> 00:05:33,100
We certainly can't use n site because it's got an AMD card in it.

92
00:05:33,300 --> 00:05:35,500
But I don't know that we'd even be able to use.

93
00:05:36,700 --> 00:05:41,300
I never remember the name of there's a public, there's a non

94
00:05:41,300 --> 00:05:46,800
vendor-specific one whose name I always forget but that would work on

95
00:05:46,800 --> 00:05:50,700
AMD cards but we can't probably use that one either just because the

96
00:05:50,700 --> 00:05:56,500
graphics card on this machine is so old that I would be surprised if

97
00:05:56,500 --> 00:05:57,100
the

98
00:05:59,000 --> 00:05:59,900
if the tools can really,

99
00:06:00,000 --> 00:06:01,200
Work on it, effectively.

100
00:06:04,200 --> 00:06:08,200
Because it's a graphics card from seven years ago.

101
00:06:09,200 --> 00:06:11,900
And I just don't know that anyone's bothering to keep anything up to

102
00:06:11,900 --> 00:06:13,000
date on that.

103
00:06:13,600 --> 00:06:18,100
So if I knew what it was called, I would mention it.

104
00:06:18,100 --> 00:06:22,600
But I'm assuming that if we tried that, it wouldn't work and

105
00:06:22,600 --> 00:06:23,800
fundamentally speaking.

106
00:06:24,300 --> 00:06:27,500
It's not generally a great idea to do development work on Old

107
00:06:27,500 --> 00:06:27,900
Hardware.

108
00:06:27,900 --> 00:06:31,600
Anyway, just because again, you're making life a little harder for

109
00:06:31,600 --> 00:06:32,200
yourself.

110
00:06:32,300 --> 00:06:33,900
The time took play around

111
00:06:34,000 --> 00:06:37,300
With older Hardware, is when you're getting closer to shipping and

112
00:06:37,300 --> 00:06:41,000
just want to do compatibility work, not, when you're trying to get

113
00:06:41,000 --> 00:06:46,000
stuff working and you're fighting the hardware, in addition to working

114
00:06:46,000 --> 00:06:46,800
on the new code.

115
00:06:47,100 --> 00:06:47,600
So,

116
00:06:50,100 --> 00:06:55,600
all that being said, we pretty much finished the Cube stuff.

117
00:06:55,600 --> 00:06:57,800
We don't have any textures to put on the cube.

118
00:06:58,800 --> 00:07:01,800
So I'm going to go ahead and just start some debugging and start some

119
00:07:01,800 --> 00:07:05,200
refinement of this and next week because I'm assuming we'll have

120
00:07:05,200 --> 00:07:06,400
enough work to do today.

121
00:07:06,600 --> 00:07:10,400
I just kind of going through that stuff that we won't have to start

122
00:07:10,400 --> 00:07:13,600
with you'll stuff, but maybe we could do the multi sample buffer.

123
00:07:13,600 --> 00:07:15,600
In fact, I guess one thing we could do.

124
00:07:17,100 --> 00:07:22,800
If we wanted to was tried to turn on Multi sample anti-aliasing today,

125
00:07:25,100 --> 00:07:28,800
because that would be separate from loading any shaders or anything

126
00:07:28,800 --> 00:07:29,400
like that.

127
00:07:29,900 --> 00:07:31,200
So we could try that as well.

128
00:07:31,200 --> 00:07:32,900
In fact, maybe that's what we should try.

129
00:07:34,100 --> 00:07:36,400
We could try that an alpha 2 coverage.

130
00:07:36,700 --> 00:07:37,300
So

131
00:07:39,000 --> 00:07:40,000
Maybe let's do that.

132
00:07:41,000 --> 00:07:43,500
I'm going to go ahead and turn off the the textures.

133
00:07:43,900 --> 00:07:46,200
Let's go ahead and do that here.

134
00:07:46,900 --> 00:07:49,500
Since we don't have a texture for the cubes there, and it's going to

135
00:07:49,500 --> 00:07:53,500
be a little distracting to have that that sort of nonsense in there.

136
00:07:54,400 --> 00:08:00,300
So I'm going to go ahead into open, Jill the renderer portion of the

137
00:08:00,300 --> 00:08:01,800
opengl renderer portion of the code.

138
00:08:02,600 --> 00:08:06,800
And I'm going to go ahead and take out the texturing.

139
00:08:12,900 --> 00:08:16,500
So all I'm doing is I'm placing a disabled at the top and an enable at

140
00:08:16,500 --> 00:08:16,900
the bottom.

141
00:08:16,900 --> 00:08:20,600
And again, since this still is using the fixed function pipeline at

142
00:08:20,600 --> 00:08:24,500
least until next week we can still monkey around like that.

143
00:08:25,800 --> 00:08:31,200
So this is the cubes being drawn just with a white color.

144
00:08:31,400 --> 00:08:35,400
Obviously what I'd like to do here is again since we're just talking

145
00:08:35,400 --> 00:08:37,799
something in so that we can see it, okay?

146
00:08:37,799 --> 00:08:40,799
And we will kind of deal with this when we get to the new art we can.

147
00:08:40,799 --> 00:08:42,400
We can fuss a little bit more.

148
00:08:42,600 --> 00:08:43,900
How we want to specify our cubes.

149
00:08:44,200 --> 00:08:46,600
What I'm going to do here, is something a little bit bizarre.

150
00:08:48,600 --> 00:08:52,500
You can see where I've got this, this P0 P1 P2 P3 stuff.

151
00:08:52,500 --> 00:08:55,900
Here, we created this to talk about our Cube.

152
00:08:55,900 --> 00:08:59,300
We can see that there's these negative Z points, the four, five, six,

153
00:08:59,300 --> 00:08:59,700
seven,

154
00:09:00,000 --> 00:09:01,900
All points with the lower Z value.

155
00:09:02,100 --> 00:09:05,600
The 0 1, 2 3 are all the points with the higher Z value.

156
00:09:06,100 --> 00:09:09,500
I'm going to go ahead and just do a couple kind of bizarre things

157
00:09:09,500 --> 00:09:09,900
here.

158
00:09:10,100 --> 00:09:14,100
So and this is just to get something visually reasonable that we can

159
00:09:14,100 --> 00:09:17,900
use and I'll complain a little bit about what it is.

160
00:09:17,900 --> 00:09:20,900
I just want to set it up first and you can see it and it's just a way

161
00:09:20,900 --> 00:09:24,400
of sort of getting something that you can look at that, will be sort

162
00:09:24,400 --> 00:09:27,300
of a little bit more of a proper Q prepper visual cue.

163
00:09:28,000 --> 00:09:29,900
So if you take a look at what's going on,

164
00:09:30,000 --> 00:09:35,100
Here we know that everything that's a p 0 through 3 is the top face of

165
00:09:35,100 --> 00:09:35,700
the cube.

166
00:09:36,000 --> 00:09:36,600
Right?

167
00:09:36,600 --> 00:09:39,000
And so you can see here this GL quad.

168
00:09:39,000 --> 00:09:40,400
This is the top quad because it's p.

169
00:09:40,400 --> 00:09:41,600
0 1, 2 3.

170
00:09:41,600 --> 00:09:44,100
And those are all ones that have positive Z.

171
00:09:44,300 --> 00:09:47,300
So we know they're the top faces that the highest of faces.

172
00:09:47,600 --> 00:09:52,500
So what I want to do is I just want to make the top of the cube, I'm

173
00:09:52,500 --> 00:09:54,000
going to just change this.

174
00:09:54,000 --> 00:09:58,800
So that instead of it being colored by these sort of random colors I

175
00:09:58,800 --> 00:09:59,500
put on here.

176
00:09:59,600 --> 00:09:59,900
I'm going to

177
00:10:00,000 --> 00:10:02,800
Make that be this thing called top color, right?

178
00:10:03,800 --> 00:10:06,300
And then, what I'm going to do is I'm going to assign the rest of

179
00:10:06,300 --> 00:10:06,700
these.

180
00:10:06,900 --> 00:10:09,700
So we know the bottom one is, well, we know, right?

181
00:10:09,700 --> 00:10:13,100
It's 4 5 6 7 so we can see here.

182
00:10:13,100 --> 00:10:18,000
4 5, 6 7, this is the bottom Cube, we could have a bottom color of our

183
00:10:18,000 --> 00:10:19,100
cubes as well.

184
00:10:19,600 --> 00:10:24,200
Although it for our present purposes anyway, we can't see that.

185
00:10:24,400 --> 00:10:29,100
So the bottom color is largely Irrelevant for all of our you know,

186
00:10:29,100 --> 00:10:29,800
actual purpose.

187
00:10:29,900 --> 00:10:30,500
Is here.

188
00:10:31,400 --> 00:10:34,800
So I'm going to set the top color to the premultiplied color, the

189
00:10:34,800 --> 00:10:39,500
bottom color did nothing just black and no Alpha I guess.

190
00:10:39,500 --> 00:10:40,100
Well you know what?

191
00:10:40,100 --> 00:10:41,700
I'll make it actually solid black.

192
00:10:41,700 --> 00:10:44,800
So I will give it Alpha and then we'll have that Prima color.

193
00:10:44,800 --> 00:10:50,300
And then what I'm going to do here is I'm going to make a gradient on

194
00:10:50,300 --> 00:10:52,000
the other sides of the cube.

195
00:10:52,100 --> 00:10:58,600
Now again, I'm just going to make these instead of like this c0 C1 C2

196
00:10:58,600 --> 00:10:59,200
C3.

197
00:10:59,500 --> 00:10:59,800
I'm just

198
00:11:00,000 --> 00:11:02,600
Make two of those like so.

199
00:11:04,100 --> 00:11:07,200
And what I'm going to do here is I'm going to say, all right for the

200
00:11:07,200 --> 00:11:11,300
c-01, I'm basically what I'm going to want a color wash that whatever

201
00:11:11,300 --> 00:11:14,900
the top Colour of the cube is I'm going to have that be the brightest

202
00:11:15,200 --> 00:11:15,600
version.

203
00:11:15,600 --> 00:11:18,800
So when the person specifies that they want to keep a certain color,

204
00:11:18,800 --> 00:11:22,600
they're going to get that on top of the cube, then on the sides of the

205
00:11:22,600 --> 00:11:23,000
cube.

206
00:11:23,000 --> 00:11:26,000
I want a dimmer color and I want that color to get dimmer.

207
00:11:26,000 --> 00:11:27,500
The lower it goes.

208
00:11:27,700 --> 00:11:29,800
So it'll start out a little dimmer than the top.

209
00:11:29,800 --> 00:11:32,000
And then by the time you get to the bottom, it'll be much dimmer,

210
00:11:32,600 --> 00:11:33,000
okay?

211
00:11:34,300 --> 00:11:37,800
And so what I'd like to do there is I'd like to say okay whatever the

212
00:11:37,800 --> 00:11:40,500
top colors RGB was right.

213
00:11:40,900 --> 00:11:44,700
I want a dim that down a little bit and I'm going to keep the top

214
00:11:44,700 --> 00:11:48,700
colors Alpha value, I guess I should do it this way, so that we so

215
00:11:48,700 --> 00:11:51,400
that you can specify transparent cubes if you really want to.

216
00:11:53,400 --> 00:11:57,600
So, basically, I'm just going to take a gradient here by saying, I

217
00:11:57,600 --> 00:11:59,800
want whatever the top color was.

218
00:12:02,000 --> 00:12:06,800
I want 75% of that, so, just make it a little darker at the top, and

219
00:12:06,800 --> 00:12:12,700
then 25% of it at the bottom, so much darker and I'll use the CT and

220
00:12:12,700 --> 00:12:13,600
CP for that.

221
00:12:13,800 --> 00:12:16,500
And then I'm just going to look through here and say, all right, so I

222
00:12:16,500 --> 00:12:20,700
know, 0, 1, 2 3, are the points that are at the top, so I'm going to

223
00:12:20,700 --> 00:12:23,900
call that color top and I'm going to call the other ones, color

224
00:12:23,900 --> 00:12:25,300
bottom, right.

225
00:12:26,800 --> 00:12:32,100
So basically four and five, which we know are like Down Below on the

226
00:12:32,100 --> 00:12:34,400
bottom of the cube, they get the bottom color.

227
00:12:35,000 --> 00:12:41,400
And so, you know, to is Top, This is bottom, bottom top, top bottom,

228
00:12:41,400 --> 00:12:47,100
bottom top bottom top, sorry bottom top top.

229
00:12:47,700 --> 00:12:52,500
And then now, we've essentially got a procedural assignment of colors

230
00:12:52,500 --> 00:12:53,300
to the cubes.

231
00:12:53,500 --> 00:12:56,200
Okay, now, what you can see hopefully

232
00:12:56,900 --> 00:13:01,900
When I did that right is now we've got a way of looking at these cubes

233
00:13:02,100 --> 00:13:06,000
that's just visually easy to parse right.

234
00:13:06,200 --> 00:13:10,400
It may not be useful for our final game but we don't care about that

235
00:13:10,400 --> 00:13:11,200
at the moment.

236
00:13:11,300 --> 00:13:15,300
What it does is it cues the eye in visually to what's going on in a

237
00:13:15,300 --> 00:13:16,000
reasonable way.

238
00:13:16,000 --> 00:13:20,200
Like we can read that landscape pretty well and so if we want these to

239
00:13:20,200 --> 00:13:25,200
be grass, wish, just for the current time and again, this is not final

240
00:13:25,200 --> 00:13:25,500
art.

241
00:13:25,500 --> 00:13:26,100
This is a

242
00:13:26,300 --> 00:13:29,900
All, it's just because we're going to put whatever the art work says

243
00:13:29,900 --> 00:13:30,900
we should put on there.

244
00:13:33,000 --> 00:13:36,200
When we create these guys and we add a piece on here, we can just

245
00:13:36,200 --> 00:13:40,500
specify like, okay, we want some color value here, you know.

246
00:13:40,500 --> 00:13:42,700
That's going to be some kind of a green.

247
00:13:43,400 --> 00:13:46,500
I don't know what that should be exactly.

248
00:13:47,000 --> 00:13:50,100
But, you know, there's a green that's an awful green.

249
00:13:50,300 --> 00:13:52,400
That's probably the worst idea ever.

250
00:13:53,500 --> 00:13:57,000
Let's, let's try to maybe make that more of a pure green.

251
00:13:57,800 --> 00:13:59,100
I don't know why I did that.

252
00:13:59,700 --> 00:14:00,500
That way.

253
00:14:01,900 --> 00:14:06,100
That's that's like to Green, you know what, why don't I just use color

254
00:14:06,100 --> 00:14:06,600
cop?

255
00:14:07,900 --> 00:14:09,300
Five color cop on this machine.

256
00:14:10,100 --> 00:14:13,900
I love color cop killer cops, my favorite little color utility.

257
00:14:15,000 --> 00:14:17,300
So let's see what color green I want here.

258
00:14:24,000 --> 00:14:25,700
The guy want sort of a brownish green.

259
00:14:28,800 --> 00:14:29,600
All right.

260
00:14:31,500 --> 00:14:33,200
So color cups, great.

261
00:14:33,200 --> 00:14:36,500
Because the thing that I like about it is you can specify the mode and

262
00:14:36,500 --> 00:14:38,500
you can say RGB float, for example.

263
00:14:38,700 --> 00:14:43,600
And it'll just like, give you the the correct values to paste into the

264
00:14:43,600 --> 00:14:46,400
program, which is like, it's just a nice thing of for a Color Picker

265
00:14:46,400 --> 00:14:47,400
to have, you know, I'm saying?

266
00:14:48,500 --> 00:14:49,600
So there we go.

267
00:14:51,600 --> 00:14:53,800
There is a color that will least be somewhat reasonable.

268
00:14:57,900 --> 00:14:59,800
Oh, but you know what those are.

269
00:15:01,000 --> 00:15:09,000
Not those are not Alpha, those are not srgb corrected.

270
00:15:09,000 --> 00:15:12,800
So in order to do that, I do have to

271
00:15:16,100 --> 00:15:20,200
I do have to convert them so because these are linear colors.

272
00:15:20,200 --> 00:15:21,100
I believe.

273
00:15:27,600 --> 00:15:28,000
Yeah.

274
00:15:32,500 --> 00:15:33,600
Oh yeah.

275
00:15:33,600 --> 00:15:41,000
But that also converts to 255 mmm-hmm well

276
00:15:43,700 --> 00:15:44,800
I guess this'll do.

277
00:15:46,300 --> 00:15:49,200
We should probably make a function for this because since we have to

278
00:15:49,200 --> 00:15:56,300
specify colors in linear space here, not srgb space.

279
00:15:56,900 --> 00:16:02,300
We should probably make a way of inputting them properly in srgb

280
00:16:02,300 --> 00:16:02,800
space.

281
00:16:05,100 --> 00:16:06,600
Still feel like that should be

282
00:16:08,300 --> 00:16:10,300
Just still feels a little too light.

283
00:16:10,400 --> 00:16:13,500
I want to see though if we've got that right, come back to me.

284
00:16:13,500 --> 00:16:14,200
Killer cop.

285
00:16:15,800 --> 00:16:18,800
But we did get that right so that was just it was we just need the

286
00:16:18,800 --> 00:16:21,300
that srgb conversion there.

287
00:16:23,000 --> 00:16:25,100
And you'll notice I didn't really do us for to be conversion.

288
00:16:25,100 --> 00:16:26,700
I just did squaring it.

289
00:16:26,700 --> 00:16:30,900
Because in the app right now, we don't actually do a real srgb curve.

290
00:16:30,900 --> 00:16:33,800
We probably should now that we're using opengl in our software.

291
00:16:33,800 --> 00:16:37,700
Renderer, we decided it was too expensive to use real srgb.

292
00:16:37,700 --> 00:16:41,000
So we just used the squared curve, which is, you know, close enough

293
00:16:41,000 --> 00:16:43,500
good enough for government work as they say.

294
00:16:43,500 --> 00:16:47,800
But not, it's not right?

295
00:16:47,800 --> 00:16:52,600
Because the grand, the graphics Hardware can actually do a more

296
00:16:52,600 --> 00:16:52,700
accurate

297
00:16:53,000 --> 00:16:53,500
Version.

298
00:16:54,100 --> 00:16:55,200
Let's try this.

299
00:16:57,000 --> 00:16:59,400
just a darker, maybe even darker still

300
00:17:08,000 --> 00:17:08,500
I don't know.

301
00:17:10,700 --> 00:17:12,500
And let's go ahead and make that.

302
00:17:14,400 --> 00:17:15,500
that math function to

303
00:17:30,200 --> 00:17:31,600
so in this case, we want

304
00:17:40,800 --> 00:17:43,000
we want to basically make a

305
00:17:44,700 --> 00:17:45,900
result value here.

306
00:17:46,700 --> 00:17:51,200
That's just going to square the values and give us our srgb

307
00:17:51,800 --> 00:17:57,600
approximation at approximation of on srg being the srgb inputs.

308
00:17:57,600 --> 00:17:59,600
We would get from a program like color cop.

309
00:18:00,700 --> 00:18:02,500
So, we just want something like that.

310
00:18:02,800 --> 00:18:10,000
So I can say, you know, srgb linearize and maybe we do one for extra

311
00:18:10,000 --> 00:18:13,100
added convenience, right?

312
00:18:14,700 --> 00:18:16,000
I could also say here.

313
00:18:17,200 --> 00:18:17,700
Well.

314
00:18:19,100 --> 00:18:24,200
The reason we'd be using this in most cases is for a hand coded value.

315
00:18:24,300 --> 00:18:33,200
So maybe we make an srgb, linearize that takes in our g b and a and

316
00:18:33,200 --> 00:18:34,500
Returns the V4.

317
00:18:35,200 --> 00:18:41,000
And so then we can just do you know the input equals rgba?

318
00:18:42,200 --> 00:18:47,200
The result equals srgb lunar eyes of the input and then return that

319
00:18:47,200 --> 00:18:47,800
result.

320
00:18:48,900 --> 00:18:52,700
And so that is also kind of handy because then we can sort of say well

321
00:18:52,700 --> 00:18:56,300
if we were going to be doing this, we can now just do this instead.

322
00:18:59,400 --> 00:19:03,400
And pass in hand coded values essentially.

323
00:19:04,000 --> 00:19:07,200
So let's go ahead and and run that.

324
00:19:09,500 --> 00:19:10,200
There we go.

325
00:19:11,100 --> 00:19:14,100
And that's not particularly attractive, but that is what I want

326
00:19:14,100 --> 00:19:16,900
roughly for being able to see what's going on, right?

327
00:19:19,000 --> 00:19:21,700
And so I said, I would explain what I was doing here.

328
00:19:21,700 --> 00:19:22,400
And why?

329
00:19:23,600 --> 00:19:27,700
So the reason that this ends up being an easier thing to see, right?

330
00:19:28,000 --> 00:19:34,400
Is because it sort of does a very simple approximation to what will

331
00:19:34,400 --> 00:19:40,400
often be, how things will look in the real world without actually

332
00:19:40,400 --> 00:19:42,700
taking the time to figure them out.

333
00:19:43,300 --> 00:19:46,600
So let me give you just a little bit of an explanation of what was

334
00:19:46,600 --> 00:19:48,000
going on there and

335
00:19:48,200 --> 00:19:52,300
That produces a more visually parsable result here on day.

336
00:19:54,500 --> 00:19:56,000
367.

337
00:19:58,400 --> 00:20:08,200
So, on day 367, we are dealing with fake.

338
00:20:11,600 --> 00:20:12,600
Cube.

339
00:20:14,600 --> 00:20:15,300
Lighting.

340
00:20:17,500 --> 00:20:19,300
I think my Milton has gone into it.

341
00:20:19,500 --> 00:20:22,600
Can't read the pen mode, one second here.

342
00:20:30,200 --> 00:20:30,900
Where is Martin?

343
00:20:30,900 --> 00:20:31,400
There it is.

344
00:20:33,400 --> 00:20:33,900
There we go.

345
00:20:37,200 --> 00:20:38,200
so, we've got

346
00:20:41,300 --> 00:20:42,400
Something that looks like this.

347
00:20:43,300 --> 00:20:44,000
Right.

348
00:20:45,000 --> 00:20:49,000
And what I was doing was saying, well, alright, I know that these

349
00:20:49,000 --> 00:20:52,800
things are going to be stacked on top of each other a lot or right

350
00:20:52,800 --> 00:20:53,700
next to each other, right?

351
00:20:53,700 --> 00:20:56,700
So we're going to have a lot of situations where, you know, we've got

352
00:20:56,700 --> 00:20:58,700
things that look like this or whatever.

353
00:21:00,000 --> 00:21:04,200
And, and stuff like that, if we were to draw all of these at the same

354
00:21:04,200 --> 00:21:05,600
color, right?

355
00:21:05,600 --> 00:21:09,800
If they're all green or whatever, the exact same green, then we just

356
00:21:09,800 --> 00:21:14,200
get one big, solid mass of color and you can't see anything, right?

357
00:21:14,200 --> 00:21:15,700
That's when I did it.

358
00:21:15,700 --> 00:21:18,500
When I first, did it with white, it was just a mass of white and you

359
00:21:18,500 --> 00:21:19,700
can't to see anything.

360
00:21:19,700 --> 00:21:22,100
So it doesn't give you any information visually.

361
00:21:22,100 --> 00:21:23,600
You can't tell what you're looking at it all.

362
00:21:25,600 --> 00:21:30,400
Now, in the real world, if everything was flat white like that, you

363
00:21:30,400 --> 00:21:32,300
would still be able to tell exactly what was going on.

364
00:21:32,300 --> 00:21:34,800
And the reason is, of course, because of this, it's because of

365
00:21:34,800 --> 00:21:37,100
lighting light strikes, these services.

366
00:21:37,100 --> 00:21:41,000
So even if they were all the same material, the same white material

367
00:21:41,200 --> 00:21:44,800
and had no defects on them, whatever and they're all exactly the same

368
00:21:44,800 --> 00:21:47,500
uniform tone, you would still be able to see it because the lighting

369
00:21:47,500 --> 00:21:50,200
would change so much across the scene.

370
00:21:50,800 --> 00:21:54,700
And so, what did I do to try to approximate that given that we didn't

371
00:21:54,700 --> 00:21:55,200
actually do any

372
00:21:55,400 --> 00:21:58,800
Lighting in the answer is if we assume that there's something up in

373
00:21:58,800 --> 00:22:04,700
the sky, like the sun, shining down on us roughly, then what we know

374
00:22:04,700 --> 00:22:09,900
is the amount of light reaching this surface is going to be quite

375
00:22:09,900 --> 00:22:10,500
high, right?

376
00:22:10,500 --> 00:22:12,800
The top is going to get most of this sun.

377
00:22:12,800 --> 00:22:16,800
Rays are going to hit it and are going to bounce off.

378
00:22:16,800 --> 00:22:18,500
Favorably, towards us, right?

379
00:22:18,500 --> 00:22:22,800
Because if we assume a fairly typical surface, you know, if you look

380
00:22:22,800 --> 00:22:25,300
at the surface from the side, for example, and you've

381
00:22:25,400 --> 00:22:29,700
Got sort of light coming in in this direction then it tends to bounce

382
00:22:29,700 --> 00:22:32,500
out, you know, fairly uniformly.

383
00:22:32,900 --> 00:22:36,600
It bounces maybe a little more up here and a little less towards the

384
00:22:36,600 --> 00:22:37,100
sides.

385
00:22:37,100 --> 00:22:41,600
Let's say a little stronger at the you know, it bounces little

386
00:22:41,600 --> 00:22:45,500
stronger at the exact reflection angles depending on the surface and

387
00:22:45,500 --> 00:22:46,100
stuff like this.

388
00:22:46,300 --> 00:22:48,800
But generally speaking you know you're the more light, you're getting

389
00:22:48,800 --> 00:22:52,500
in the more you're bouncing out for a fairly diffuse kind of surface.

390
00:22:53,700 --> 00:22:55,300
And then if you think about what

391
00:22:55,400 --> 00:22:56,100
On the sides.

392
00:22:56,100 --> 00:22:59,900
Well the sides aren't getting as much of that sun, right?

393
00:23:00,000 --> 00:23:03,800
Because the sun's high up in the sky and the amount of light that's

394
00:23:03,800 --> 00:23:05,200
hitting these Services is less.

395
00:23:05,500 --> 00:23:10,200
So the sides you know should be darker and if we were being even

396
00:23:10,200 --> 00:23:10,900
snootier.

397
00:23:11,000 --> 00:23:11,300
Mr.

398
00:23:11,300 --> 00:23:16,300
Snoot with this new dating and we were actually talking about the

399
00:23:16,300 --> 00:23:18,100
real, like, lighting from the sun.

400
00:23:18,100 --> 00:23:24,000
We would pick kind of, we would have sides that were brighter than

401
00:23:24,000 --> 00:23:25,300
other sides because the Sun

402
00:23:25,400 --> 00:23:26,700
Is directional in that sense.

403
00:23:26,700 --> 00:23:27,300
Right?

404
00:23:27,900 --> 00:23:32,800
But what I did is, I did more like a sky lighting, which is to say,

405
00:23:33,100 --> 00:23:34,200
hey yeah.

406
00:23:34,200 --> 00:23:37,600
The Sun in the sky is obviously a very strong point, light source but

407
00:23:37,600 --> 00:23:40,000
there's also overcast days, right?

408
00:23:40,100 --> 00:23:43,100
And then it's kind of more uniform where the lights coming from but

409
00:23:43,100 --> 00:23:45,900
the light is still coming from the top, right?

410
00:23:45,900 --> 00:23:50,300
So anything that's facing upward and is exposed to the top is going to

411
00:23:50,300 --> 00:23:54,400
get most of the light from a big hemisphere of the sky, right?

412
00:23:55,600 --> 00:23:59,700
Meanwhile, the sides are going to get less because any given side it.

413
00:24:00,000 --> 00:24:04,800
Only see one part of that hemisphere right if you imagine looking at

414
00:24:04,800 --> 00:24:06,900
the cube like this.

415
00:24:08,200 --> 00:24:13,100
And here's my hemisphere radiating light down onto it, my sky, right?

416
00:24:13,400 --> 00:24:17,200
Well this top surface can see the whole sky, right?

417
00:24:17,200 --> 00:24:21,500
It can see everything but this can only see one little portion of the

418
00:24:21,500 --> 00:24:22,100
sky.

419
00:24:22,200 --> 00:24:22,800
Right.

420
00:24:22,800 --> 00:24:27,200
You know maybe maybe like that and so it's going to be correspondingly

421
00:24:27,200 --> 00:24:29,700
darker than the top surface.

422
00:24:31,100 --> 00:24:31,800
Does that make sense?

423
00:24:32,000 --> 00:24:35,500
So making the top a brighter color and the sides are darker.

424
00:24:35,500 --> 00:24:37,500
Color is a good way to start.

425
00:24:37,500 --> 00:24:43,600
Approximating a skylight uniform like sort of in radiant gray, sky

426
00:24:43,600 --> 00:24:45,500
light like an overcast day.

427
00:24:46,400 --> 00:24:50,400
And then what I did furthermore is I made them get darker as they went

428
00:24:50,400 --> 00:24:50,900
down.

429
00:24:50,900 --> 00:24:52,900
So I started with a value.

430
00:24:52,900 --> 00:24:56,400
That was a little bit dimmer up here but then when we got down to here

431
00:24:56,600 --> 00:24:57,700
it was a lot dimmer.

432
00:24:58,000 --> 00:25:00,400
And why they do that well again

433
00:25:01,400 --> 00:25:03,300
There's other things at play here.

434
00:25:03,600 --> 00:25:07,600
These are cubes that are stacked next to each other and when cubes are

435
00:25:07,600 --> 00:25:11,400
stuck next to each other, they start to reduce the light visible to

436
00:25:11,400 --> 00:25:13,400
each other as they get deeper down.

437
00:25:13,400 --> 00:25:14,500
Typically, right?

438
00:25:14,600 --> 00:25:19,000
So if I have something like this, where there's a valley here, as I

439
00:25:19,000 --> 00:25:23,600
get further down here, this will be occluding more of the sky from me.

440
00:25:23,700 --> 00:25:27,600
So it's just a guess that oftentimes those things get lower, there's

441
00:25:27,600 --> 00:25:29,800
more stuff blocking them, right?

442
00:25:30,300 --> 00:25:31,000
None of this

443
00:25:31,100 --> 00:25:34,600
Is accurate to any kind of simulation of our scene.

444
00:25:34,600 --> 00:25:39,600
I have done, no actual lighting, but what I did is baked in the way

445
00:25:39,600 --> 00:25:46,000
that lighting normally would react in an average circumstance, right?

446
00:25:46,100 --> 00:25:50,500
Something that sort of does add visual effect like that and we get

447
00:25:50,500 --> 00:25:54,100
something that's easy to, parse visually, would you want this to be

448
00:25:54,100 --> 00:25:54,900
your final lighting?

449
00:25:54,900 --> 00:25:56,000
Absolutely not.

450
00:25:56,000 --> 00:25:56,900
And why not?

451
00:25:57,300 --> 00:26:00,900
Well, you want it to be more accurate?

452
00:26:01,000 --> 00:26:02,500
To what's actually going on, right?

453
00:26:02,500 --> 00:26:05,400
What we'd like to do is have our lighting take into account.

454
00:26:05,400 --> 00:26:09,900
The fact that, you know, here is a big tall Edge next to a lower Edge.

455
00:26:09,900 --> 00:26:13,300
There's probably some light getting removed in this area right from

456
00:26:13,300 --> 00:26:14,200
this blocker.

457
00:26:15,800 --> 00:26:17,700
So you know, that things should get dimmer in here.

458
00:26:18,200 --> 00:26:21,600
And you know, maybe we want some of that directional sunlight as well,

459
00:26:21,600 --> 00:26:21,800
right?

460
00:26:21,800 --> 00:26:23,700
You know, to give it some kind of more color.

461
00:26:23,700 --> 00:26:28,200
So there's, you know, if we wanted to do real lighting even even hacky

462
00:26:28,300 --> 00:26:30,900
real lighting, there's a lot of hacking we

463
00:26:31,000 --> 00:26:33,600
Could do there that would produce better results.

464
00:26:33,800 --> 00:26:37,000
So this is by no means how you would want to do lighting it a real

465
00:26:37,000 --> 00:26:37,400
game.

466
00:26:37,600 --> 00:26:41,200
But in terms of just a quick way to get something you can visually

467
00:26:41,200 --> 00:26:44,100
understand, which is exactly what I needed in this case.

468
00:26:45,000 --> 00:26:49,900
We're you know, that is a really good way to do it, right?

469
00:26:56,300 --> 00:26:59,800
Okay, so now we need to move on too.

470
00:27:00,400 --> 00:27:04,000
The main event which was the multi sample anti-aliasing.

471
00:27:04,900 --> 00:27:08,900
This is one of those things that you do like once and you forget about

472
00:27:08,900 --> 00:27:11,500
it often times unless you're wondering guy.

473
00:27:11,500 --> 00:27:13,200
So this is one of those ones where we're going to have to crawl

474
00:27:13,200 --> 00:27:17,400
through the documentation to find, how to turn it on in the first

475
00:27:17,400 --> 00:27:17,900
place.

476
00:27:18,700 --> 00:27:21,200
But, you know, I can explain the basic idea.

477
00:27:22,800 --> 00:27:26,200
Because that's not so hard to understand going and finding the right

478
00:27:26,700 --> 00:27:30,100
magical, incantation, sauces, and opengl, and so on, might be a little

479
00:27:30,100 --> 00:27:30,600
bit harder.

480
00:27:31,400 --> 00:27:34,200
All right, so let's talk about Ms.

481
00:27:34,200 --> 00:27:34,800
Oops.

482
00:27:36,800 --> 00:27:38,400
Msaa.

483
00:27:39,900 --> 00:27:41,300
And multi sample.

484
00:27:45,000 --> 00:27:46,700
I've lost pressure control again.

485
00:27:47,200 --> 00:27:47,600
I don't know.

486
00:27:47,600 --> 00:27:49,900
I feel like Milton when you switch away from it.

487
00:27:49,900 --> 00:27:52,400
Oftentimes, this is pressure control but I'm not sure why.

488
00:27:54,000 --> 00:27:54,400
Did it?

489
00:27:55,000 --> 00:27:55,900
No, it didn't.

490
00:27:57,500 --> 00:28:00,000
Oh, and I switched back and it came back.

491
00:28:03,500 --> 00:28:04,700
Interesting.

492
00:28:05,700 --> 00:28:06,100
Huh.

493
00:28:07,100 --> 00:28:10,300
I feel like there's a easy to resolve bug there.

494
00:28:11,500 --> 00:28:15,200
But if you could just watch what was happening, it would be easier to

495
00:28:15,200 --> 00:28:18,500
find because that it was just off and then it came back, which is kind

496
00:28:18,500 --> 00:28:19,200
of interesting.

497
00:28:20,500 --> 00:28:20,900
All right.

498
00:28:20,900 --> 00:28:27,400
Anyway, so multi sample and saying, oh and I got so distracted.

499
00:28:27,400 --> 00:28:31,400
By that, I wrote the wrong thing and alpha-2 coverage.

500
00:28:53,200 --> 00:28:55,300
All right, so what do these terms mean?

501
00:28:55,300 --> 00:28:58,600
Why do we care msaa?

502
00:28:58,600 --> 00:29:02,600
You may even if you have never programmed with it before and have no

503
00:29:02,600 --> 00:29:04,600
idea what it would mean in the graphical context.

504
00:29:04,600 --> 00:29:07,900
Necessarily you may actually also already know what it means because

505
00:29:07,900 --> 00:29:12,200
it gets too stuck discussed, very frequently in terms of gaming and

506
00:29:12,200 --> 00:29:13,500
graphics cards and stuff like that.

507
00:29:13,500 --> 00:29:17,200
So you may actually have already learned it and know what it means

508
00:29:17,200 --> 00:29:21,100
anyway, even though you never dealt with it in a programming context,

509
00:29:21,100 --> 00:29:22,400
Alpha to coverage, probably not.

510
00:29:23,000 --> 00:29:25,400
that you probably only heard of if you've dealt one apartment complex,

511
00:29:25,400 --> 00:29:26,000
but

512
00:29:27,100 --> 00:29:28,700
Mother sample anti-aliasing.

513
00:29:29,100 --> 00:29:34,700
Obviously the term anti-aliasing is something that we've talked about

514
00:29:34,700 --> 00:29:39,300
on handmade hero before aliasing is a general term.

515
00:29:39,800 --> 00:29:43,100
It comes from signal processing, I believe, right.

516
00:29:43,500 --> 00:29:49,500
And aliasing is basically, when you are getting sort of like an error,

517
00:29:52,300 --> 00:29:54,700
In discretization.

518
00:29:59,400 --> 00:29:59,800
and maybe I'll

519
00:30:00,100 --> 00:30:01,400
An apparent error.

520
00:30:04,400 --> 00:30:09,100
And so, what this basically means is, you know, if you imagine let's

521
00:30:09,100 --> 00:30:11,300
say an audio is a very common example of it.

522
00:30:11,300 --> 00:30:15,800
If you imagine, you have a sound wave or whatever and you're trying to

523
00:30:15,800 --> 00:30:19,200
represent this sound wave, that's an actual continuous thing in the

524
00:30:19,200 --> 00:30:19,900
real world.

525
00:30:19,900 --> 00:30:23,300
Let's say, well, continuous is hard to say given that we have

526
00:30:23,300 --> 00:30:26,900
molecular and Quantum things and whatever, but, you know, at the

527
00:30:27,200 --> 00:30:29,400
degree to, which humans can perceive it, there is no aliasing.

528
00:30:29,400 --> 00:30:29,900
Let's say,

529
00:30:34,600 --> 00:30:37,000
And so, we're talking about something that we're introducing as an

530
00:30:37,000 --> 00:30:41,700
artifact, if we are to sample this at regular intervals, right?

531
00:30:50,000 --> 00:30:54,000
Then when it ends up happening, is at those regular intervals, you may

532
00:30:54,000 --> 00:30:57,600
end up producing a curve that is nothing like the existing curve,

533
00:30:58,200 --> 00:30:58,800
right?

534
00:31:00,100 --> 00:31:03,400
And so what ends up happening is, when you take something continuous

535
00:31:03,400 --> 00:31:06,500
and you turn it into something discreet, like, we have to in

536
00:31:06,500 --> 00:31:12,300
Computing, usually, you end up with the possibility of creating

537
00:31:12,300 --> 00:31:16,700
artifacts, you know, and apparent errors that are apparent to the

538
00:31:16,700 --> 00:31:18,800
person who's using, whatever it is trying to listen to the

539
00:31:19,000 --> 00:31:20,300
Audio or view the graphics.

540
00:31:21,700 --> 00:31:26,900
You end up introducing error that has nothing to do with any that has

541
00:31:26,900 --> 00:31:30,100
nothing to do with how you're actually simulating anything internally.

542
00:31:30,300 --> 00:31:32,200
You may be doing everything, right?

543
00:31:32,300 --> 00:31:35,800
It's just when you actually get to the point where you need to display

544
00:31:35,800 --> 00:31:39,900
it somehow or put it out, the audio speakers, you only have a limited

545
00:31:39,900 --> 00:31:42,900
number of sample points to work with and when you produce those sample

546
00:31:42,900 --> 00:31:46,600
points, you end up with this error even though they're accurate,

547
00:31:46,600 --> 00:31:46,800
right?

548
00:31:46,800 --> 00:31:49,500
Like, even though we're talking when I sample this curve, I didn't

549
00:31:49,500 --> 00:31:51,200
sample it wrong, I sampled

550
00:31:51,400 --> 00:31:55,100
Exactly where it should be, but it just isn't enough information.

551
00:31:55,100 --> 00:31:58,200
I needed like all these other points in here to capture the Peaks and

552
00:31:58,200 --> 00:32:01,400
troughs and I just didn't have a high enough sample rate, right?

553
00:32:02,600 --> 00:32:05,500
This is called temporal aliasing, by the way, which is when you have

554
00:32:05,500 --> 00:32:07,900
an aliasing artifact in time, right?

555
00:32:07,900 --> 00:32:09,800
Because here's time.

556
00:32:10,200 --> 00:32:12,100
Here's amplitude.

557
00:32:12,900 --> 00:32:13,500
Right?

558
00:32:13,700 --> 00:32:14,400
My sound wave.

559
00:32:15,400 --> 00:32:17,500
The same sorts of things happens in graphics.

560
00:32:17,500 --> 00:32:20,800
And it happens in graphics when we discretize to the pixel grid,

561
00:32:20,900 --> 00:32:21,500
right?

562
00:32:21,900 --> 00:32:23,500
We've got these pixels.

563
00:32:27,800 --> 00:32:29,100
And I want to draw a triangle.

564
00:32:29,100 --> 00:32:32,400
Well, the triangle is just like our audio waveform over here.

565
00:32:32,800 --> 00:32:36,400
The triangle has infinitely precise edges, we can describe in.

566
00:32:36,400 --> 00:32:37,500
Mathematical terms.

567
00:32:37,700 --> 00:32:39,600
That is what we're actually trying to draw.

568
00:32:39,600 --> 00:32:44,600
However, when we go to convert those infinitely, precise edges into

569
00:32:44,600 --> 00:32:46,100
actual discrete pixels.

570
00:32:46,200 --> 00:32:48,200
A number of discretization steps occur.

571
00:32:48,300 --> 00:32:50,800
First of all, we only have floating point which is not infinitely

572
00:32:50,800 --> 00:32:52,500
precise, that's not that big of a deal.

573
00:32:52,500 --> 00:32:55,000
It is still precise enough these days floating point.

574
00:32:55,700 --> 00:32:57,900
Is plenty accurate for our purposes.

575
00:32:57,900 --> 00:32:59,100
In the old days when it was fixed point.

576
00:32:59,100 --> 00:32:59,800
This was something that was much.

577
00:33:00,000 --> 00:33:04,300
Trickier obviously, but so when we're using floating point, we know

578
00:33:04,300 --> 00:33:07,000
that we're going to get a very accurate location in terms of pixels.

579
00:33:07,000 --> 00:33:08,700
So no real harm there.

580
00:33:08,700 --> 00:33:12,300
But then when we actually go to rasterize at every given pixel, you

581
00:33:12,300 --> 00:33:17,200
know, if we only wanted to produce that much of a triangle but we have

582
00:33:17,200 --> 00:33:20,800
to make a decision as to whether to fill this whole pixel or not you

583
00:33:20,800 --> 00:33:24,100
can see how we get the same kind of aliasing artifacts, maybe we

584
00:33:24,100 --> 00:33:26,600
decide to fill this one right.

585
00:33:26,600 --> 00:33:30,000
But we don't decide to fill this one and then we do decide to

586
00:33:30,000 --> 00:33:30,800
To fill this one.

587
00:33:30,900 --> 00:33:35,200
You get these like, stair-steppy little like crispy pixel patterns on

588
00:33:35,200 --> 00:33:37,900
the edges and nobody likes that, right?

589
00:33:37,900 --> 00:33:44,100
That is not a sexy thing to see these crispy little, you know, sort of

590
00:33:44,100 --> 00:33:46,400
hard pixel edges as you go.

591
00:33:48,000 --> 00:33:53,000
So that's the aliasing that we're talking about, in terms of msaa.

592
00:33:53,900 --> 00:33:59,100
So anti-aliasing obviously are techniques designed to combat the

593
00:33:59,100 --> 00:34:05,000
objectionable visual artifacts that are produced from this process of

594
00:34:05,000 --> 00:34:09,300
discretizing, to whatever it could be, you know, audio or the Grid or

595
00:34:09,300 --> 00:34:09,699
whatever.

596
00:34:09,699 --> 00:34:11,699
But anything where the the

597
00:34:13,000 --> 00:34:17,500
Regular sampling destroys or just sampling in general, sampling of a

598
00:34:17,500 --> 00:34:21,900
signal with more Precision than the sampling produces objection.

599
00:34:21,900 --> 00:34:24,400
All artifacts to the viewer or listener whatever.

600
00:34:25,600 --> 00:34:29,100
So anti-aliasing obviously yet techniques designed to prevent these

601
00:34:29,100 --> 00:34:31,500
aliasing problems from being a parent.

602
00:34:31,600 --> 00:34:35,400
Obviously we can't increase the pixel resolution we only have whatever

603
00:34:35,400 --> 00:34:39,100
resolution the monitor has but we can maybe do things to help improve

604
00:34:39,100 --> 00:34:39,199
it.

605
00:34:39,199 --> 00:34:42,500
Now what we've done in handmade hero so far,

606
00:34:43,000 --> 00:34:44,699
Is to do our anti-aliasing.

607
00:34:44,699 --> 00:34:49,199
What we do is, we say, okay, let's just say that in the alpha channel,

608
00:34:49,199 --> 00:34:49,500
right?

609
00:34:49,500 --> 00:34:52,699
We're going to encode RGB a

610
00:34:54,500 --> 00:34:55,800
In the alpha Channel.

611
00:34:56,500 --> 00:35:00,300
Let's go ahead and code rather than just an RGB value.

612
00:35:00,300 --> 00:35:04,100
That says, what the color should be when we're dealing with stuff.

613
00:35:05,400 --> 00:35:09,000
Let's also encode a value that says how much of the pixel we were

614
00:35:09,000 --> 00:35:12,600
trying to cover and the way that we did that is we said let's have a

615
00:35:12,600 --> 00:35:16,700
Sprite and the Sprites going to have the graphics in it and all around

616
00:35:16,700 --> 00:35:18,500
the edge of the Sprite.

617
00:35:18,600 --> 00:35:21,100
The alpha values will indicate.

618
00:35:21,100 --> 00:35:22,400
How much was covered there?

619
00:35:22,600 --> 00:35:26,500
This way, when we draw the Sprite to the screen we can blend in just

620
00:35:26,500 --> 00:35:31,500
just that amount of color that sort of simulates, a pixel being shared

621
00:35:31,600 --> 00:35:34,700
between the Sprite and what was underneath the Sprite, right?

622
00:35:34,700 --> 00:35:35,100
And that's

623
00:35:35,200 --> 00:35:37,000
We got those nice soft edges.

624
00:35:38,200 --> 00:35:38,700
Right.

625
00:35:38,700 --> 00:35:42,600
But now we can't do that same technique anymore.

626
00:35:42,600 --> 00:35:42,900
Why?

627
00:35:42,900 --> 00:35:45,500
Because that requires us to sort.

628
00:35:45,500 --> 00:35:49,700
In order to do that technique properly, we would have to sort our

629
00:35:49,700 --> 00:35:52,700
Sprites and the whole point is we don't want to sort them.

630
00:35:52,700 --> 00:35:56,300
We don't want to know what order we draw our Sprites and we just want

631
00:35:56,300 --> 00:35:57,100
them to work.

632
00:35:57,100 --> 00:35:59,900
Okay, so what we'd like to

633
00:36:00,000 --> 00:36:04,200
Do is have a technique that allows us to draw in Sprites.

634
00:36:04,400 --> 00:36:10,300
We're we're saying that we only cover a piece of a pixel sometimes but

635
00:36:10,300 --> 00:36:12,700
have that still work, right?

636
00:36:13,900 --> 00:36:18,800
Well it turns out the 3D graphics cards have to handle, not

637
00:36:18,800 --> 00:36:23,000
necessarily this case as their primary case but a different case

638
00:36:23,000 --> 00:36:26,400
that's related and the case that they have to handle is exactly this

639
00:36:26,400 --> 00:36:27,500
one, right?

640
00:36:27,600 --> 00:36:29,800
Most of the time when we talk about

641
00:36:30,000 --> 00:36:31,800
Multi sample anti-aliasing.

642
00:36:32,400 --> 00:36:33,600
As we'll see you in a second.

643
00:36:33,600 --> 00:36:37,400
What 3D graphics cards are trying to solve is they're trying to solve

644
00:36:37,400 --> 00:36:40,000
the problem of drawing actual triangles.

645
00:36:40,000 --> 00:36:44,200
Because remember, we are drawing Sprites but 3D, graphic cards are

646
00:36:44,200 --> 00:36:47,100
more about drawing shapes, right?

647
00:36:47,100 --> 00:36:51,700
And yes they cover those shapes with actual textures and stuff like

648
00:36:51,700 --> 00:36:55,900
that, but a lot of times they don't have Alpha necessarily they are

649
00:36:55,900 --> 00:36:59,900
solid in terms of the texturing on them and

650
00:37:00,000 --> 00:37:03,400
Part that gives them form is the fact that there's you know, millions

651
00:37:03,400 --> 00:37:07,000
of triangles making up the actual shape of the thing, but somebody

652
00:37:07,000 --> 00:37:09,500
modeled in mud brush or whatever, right?

653
00:37:10,600 --> 00:37:11,600
But brush, that's good.

654
00:37:12,200 --> 00:37:16,700
I combined mudbox and zbrush into one tool called Mud brush.

655
00:37:17,000 --> 00:37:18,000
That doesn't exist.

656
00:37:18,600 --> 00:37:18,900
Sorry.

657
00:37:18,900 --> 00:37:22,100
The someone modeled in mudbox or is he brush?

658
00:37:23,700 --> 00:37:28,300
Or mud brush the new tool for modeling.

659
00:37:28,300 --> 00:37:28,800
3D.

660
00:37:29,200 --> 00:37:29,500
All right.

661
00:37:29,500 --> 00:37:34,700
Anyway, so what they have to do is they have to try and figure out how

662
00:37:34,700 --> 00:37:39,400
to get rid of those crispy edges of the triangles themselves, what

663
00:37:39,400 --> 00:37:44,200
that means is they need, and again, they have exactly, they're dealing

664
00:37:44,200 --> 00:37:45,600
with exactly the same problem.

665
00:37:45,600 --> 00:37:51,200
We are in terms of the aliasing, just not with Sprites.

666
00:37:51,600 --> 00:37:53,400
They've got the same problem of the edges.

667
00:37:53,500 --> 00:37:57,600
And they also don't want to sort, right?

668
00:37:57,600 --> 00:38:02,900
They don't want to try and sort triangles in sort of the gpus that

669
00:38:02,900 --> 00:38:07,200
that handle anti-icing this way they want to draw the triangles in,

670
00:38:07,200 --> 00:38:11,300
whatever order they came in and then still get a reasonable result for

671
00:38:11,300 --> 00:38:14,700
a pixel where a triangle only covered part of it.

672
00:38:15,300 --> 00:38:19,300
And more specifically, perhaps, where many triangles crossed, right?

673
00:38:19,300 --> 00:38:20,600
Like maybe I've got

674
00:38:21,500 --> 00:38:27,700
Multiple triangles coming through a single Pixel and each one only is

675
00:38:27,700 --> 00:38:30,200
covering a certain place, right?

676
00:38:30,200 --> 00:38:33,600
And I still want something reasonable to happen here, right?

677
00:38:33,600 --> 00:38:40,700
So the way that the graphics cards handle this is, well, there's been

678
00:38:40,700 --> 00:38:44,200
multiple techniques of the years but msaa is the current technique

679
00:38:44,200 --> 00:38:48,900
that is mostly used its multi sample anti-aliasing, what it means, as

680
00:38:48,900 --> 00:38:51,500
its name implies is rather than only

681
00:38:51,600 --> 00:38:56,300
We tracking one Z value Z buffer, and color value.

682
00:38:57,500 --> 00:38:59,400
depth, buffer, and color value for a

683
00:39:00,200 --> 00:39:04,800
Let's distribute some samples in a pixel and track them.

684
00:39:04,800 --> 00:39:06,500
All right.

685
00:39:06,800 --> 00:39:14,700
And this is when you see 4X msaa, 16x msaa, you've seen these terms,

686
00:39:14,700 --> 00:39:19,400
probably the term, the number plus the X.

687
00:39:19,600 --> 00:39:23,100
What that's telling you is, how many samples were talking about.

688
00:39:23,400 --> 00:39:28,200
So if I'm doing 4X msaa, it means that for every pixel I've got for

689
00:39:28,500 --> 00:39:29,800
you, no points.

690
00:39:30,000 --> 00:39:31,000
It's in that pixel.

691
00:39:31,000 --> 00:39:32,100
I'm actually tracking.

692
00:39:32,600 --> 00:39:37,000
What that means is that when I have something like this case,

693
00:39:38,200 --> 00:39:39,500
Now I know.

694
00:39:39,500 --> 00:39:44,700
Okay this triangle here that passed through it, it colored this pixel

695
00:39:44,700 --> 00:39:47,200
and this sample and only this sample.

696
00:39:47,400 --> 00:39:51,900
So this sample was actually filled right here by this triangle.

697
00:39:51,900 --> 00:39:53,600
A let's say right?

698
00:39:53,700 --> 00:39:54,300
This triangle.

699
00:39:54,300 --> 00:39:59,100
Be hit this one right and this triangle see hit these

700
00:40:01,500 --> 00:40:07,800
Now, A and B, A also hit this one and be also hit this one, right?

701
00:40:08,100 --> 00:40:13,100
So we still have the same problem at our samples, and whichever one

702
00:40:13,100 --> 00:40:14,200
had a z-buffer value.

703
00:40:14,200 --> 00:40:18,900
That was higher, will be the one that wrote in to this location.

704
00:40:19,800 --> 00:40:23,600
So, it's not like it does the blending properly at the samples, it

705
00:40:23,600 --> 00:40:27,000
does the same problematic non blend.

706
00:40:27,000 --> 00:40:28,200
It doesn't do.

707
00:40:29,400 --> 00:40:33,300
Order independent blending at the samples, but now we don't

708
00:40:33,300 --> 00:40:38,000
necessarily care because now we can produce a blended value that, we

709
00:40:38,000 --> 00:40:46,800
know should be 1/4 a 1/4, be and 2/4 or 1/2 C, right?

710
00:40:47,300 --> 00:40:50,700
At this pixel because we only have two output a single color for the

711
00:40:50,700 --> 00:40:51,300
pixel.

712
00:40:51,500 --> 00:40:56,500
And so now we've sort of reconstituted, a proper order independent

713
00:40:56,500 --> 00:40:58,300
blend out of

714
00:40:59,300 --> 00:41:02,600
Dependent samples, right?

715
00:41:04,700 --> 00:41:07,400
So that gets you out of the Sorting business.

716
00:41:07,400 --> 00:41:11,100
So long as the number of samples you need is not too high.

717
00:41:13,100 --> 00:41:17,900
Now remember, in order to produce the exact same output as a blend

718
00:41:17,900 --> 00:41:22,100
would produce, we would need 256 samples.

719
00:41:23,100 --> 00:41:23,700
Why?

720
00:41:23,800 --> 00:41:29,100
Because there are 256 levels of color in our output

721
00:41:30,000 --> 00:41:31,500
Now that's getting even worse.

722
00:41:32,100 --> 00:41:36,500
Uh, D or well, I don't remember what they call them, but the new

723
00:41:36,500 --> 00:41:40,700
displays that are HDR High dynamic range, and can support, you know,

724
00:41:40,700 --> 00:41:42,900
10 B, 16 bit color.

725
00:41:43,500 --> 00:41:48,300
Any of these sort of higher color depths then, even 256 is not enough,

726
00:41:48,300 --> 00:41:51,400
you know, this would have to be 65 thousand samples, right to

727
00:41:51,400 --> 00:41:53,200
reconstitute a value like that.

728
00:41:54,400 --> 00:41:59,700
But chances are, if we're only talking about just the edges of things.

729
00:42:00,000 --> 00:42:06,600
This amount of blending for samples are probably 16 if we if we're

730
00:42:06,600 --> 00:42:11,100
going hog-wild 16 times over sampling is definitely going to be

731
00:42:11,100 --> 00:42:16,400
sufficient to produce just a reasonable soft blend at the edge, right?

732
00:42:16,700 --> 00:42:19,300
Because we don't need the full 256.

733
00:42:19,600 --> 00:42:23,000
You know, we don't need that precise of alpha Bunny at just the edges.

734
00:42:24,000 --> 00:42:27,900
Other things might need it like smoothly, fading in and out stuff,

735
00:42:28,000 --> 00:42:29,800
wouldn't work because you'd have only

736
00:42:30,000 --> 00:42:31,700
sixteen steps of fade.

737
00:42:31,700 --> 00:42:36,000
So it would have to be a fade that occurred over at a speed where 60

738
00:42:36,000 --> 00:42:36,900
frames a second.

739
00:42:37,200 --> 00:42:38,400
It would have to be

740
00:42:42,500 --> 00:42:46,500
So at 60 frames a second and 16 of these, it would have to be

741
00:42:46,500 --> 00:42:55,200
something that covered 256 in only 16 steps.

742
00:42:55,200 --> 00:42:56,300
So it would have to do.

743
00:42:56,500 --> 00:43:00,400
It would have to be fading at 16 color values per second, right?

744
00:43:00,800 --> 00:43:06,000
Which I pers per frame, right?

745
00:43:06,000 --> 00:43:11,000
And so at 60 frames a second, that would be what

746
00:43:11,700 --> 00:43:14,000
960 a second.

747
00:43:14,000 --> 00:43:20,500
So something that went from zero to one color wise in in

748
00:43:24,200 --> 00:43:26,900
a quarter of a second roughly, right?

749
00:43:27,200 --> 00:43:29,800
And so something fading, extremely fast would work, okay?

750
00:43:29,800 --> 00:43:33,300
Because you wouldn't be able to perceive the difference there, but in

751
00:43:33,300 --> 00:43:35,700
general, something that was supposed to be smoothly, fading in and

752
00:43:35,700 --> 00:43:38,400
out, it was not, you know, going to handle it.

753
00:43:38,900 --> 00:43:44,200
You're going to see that step pattern as you get, you know, multiple

754
00:43:44,200 --> 00:43:48,200
frames and they all resolved to the same value because you only got 16

755
00:43:48,200 --> 00:43:52,100
values to resolve to, and then it would stop down and stop down again.

756
00:43:53,200 --> 00:43:56,800
All right, so multi sample into a listing, all that's all it is.

757
00:43:57,200 --> 00:43:57,900
That's it.

758
00:43:58,500 --> 00:44:01,800
And so, all we have to do, you know, is is basically Wade through the

759
00:44:01,800 --> 00:44:06,100
opengl mumbo jumbo to turn it on, but that's all we really need to

760
00:44:06,100 --> 00:44:08,700
know about in terms of sampling, it's that simple.

761
00:44:09,200 --> 00:44:12,300
So what typically happens, the way that this is set up in terms of

762
00:44:12,300 --> 00:44:18,900
GPU, apis is what you do is you say okay, you know, create a Target

763
00:44:20,000 --> 00:44:26,800
With MSA, a right to render to, then you render to that Target.

764
00:44:26,800 --> 00:44:31,900
And what it does, is it renders all of the samples.

765
00:44:31,900 --> 00:44:33,600
So, it's a lot more expensive.

766
00:44:33,600 --> 00:44:38,500
It's 16 times more expensive in terms of number of pieces of

767
00:44:38,500 --> 00:44:39,600
information has to fill.

768
00:44:39,600 --> 00:44:42,200
It's not 16 times more expensive throughout the entire pipeline

769
00:44:42,200 --> 00:44:43,900
because a bunch of stuff doesn't change.

770
00:44:43,900 --> 00:44:47,200
Like the triangle set up phase like vertex, shaders, don't have to

771
00:44:47,200 --> 00:44:47,600
change.

772
00:44:47,600 --> 00:44:49,800
This is only a pixel operation, but it

773
00:44:50,000 --> 00:44:54,200
Makes your pixel operations, a lot more expensive potentially right?

774
00:44:55,500 --> 00:44:57,700
And there's things you can do to mitigate that in our case.

775
00:44:57,700 --> 00:44:59,400
Like, we don't have complicated shaders.

776
00:45:00,300 --> 00:45:02,500
You know, maybe we will eventually have to think about this more.

777
00:45:02,700 --> 00:45:05,500
We don't have complicated shaders right now, so we don't have to worry

778
00:45:05,500 --> 00:45:09,200
about our pixel cost as much, but you can imagine if you have very

779
00:45:09,200 --> 00:45:13,300
expensive shaders, this is where stuff like deferred shading, right

780
00:45:13,400 --> 00:45:15,700
starts to become even more important.

781
00:45:15,700 --> 00:45:18,700
Because now you're talking about 16 times more pixel Shader

782
00:45:18,700 --> 00:45:21,100
evaluations that are happening there.

783
00:45:21,200 --> 00:45:24,700
And so, oftentimes what you want to do is make sure that you're only

784
00:45:24,700 --> 00:45:27,700
actually executing those for the final Z.

785
00:45:30,000 --> 00:45:34,600
People so easy prepass or deferred shading, these things that get more

786
00:45:34,600 --> 00:45:38,100
important as you start cranking up that pixel count.

787
00:45:38,100 --> 00:45:40,800
But anyway, so then you render to that Target and that renders, you

788
00:45:40,800 --> 00:45:44,400
know, 16x more pixels basically more pixels.

789
00:45:45,800 --> 00:45:49,400
But the reason that we don't call them pixels is now should become a

790
00:45:49,400 --> 00:45:53,500
parent to finally because we've often use the term fragment and it's

791
00:45:53,500 --> 00:45:55,300
like why are they called fragments?

792
00:45:56,000 --> 00:45:59,500
Well, oftentimes, they're not actually pixels that are rendering.

793
00:45:59,800 --> 00:46:02,900
Right, in this case, now you can really see.

794
00:46:02,900 --> 00:46:05,500
They are actually these little samples.

795
00:46:05,700 --> 00:46:09,700
So the phrase fragment is just the what opengl uses to say, hey,

796
00:46:10,500 --> 00:46:13,100
depending on how you've got your rendering setup, we don't know that

797
00:46:13,100 --> 00:46:14,300
this has anything to do with pixel.

798
00:46:14,300 --> 00:46:16,500
So calling this a pixel Shader is not right?

799
00:46:16,500 --> 00:46:20,800
It's a fragment Shader, it produces basically Point sampled color

800
00:46:20,800 --> 00:46:23,300
values but we don't know how those are going to be used.

801
00:46:23,300 --> 00:46:25,700
They might be, they might be output to pixels.

802
00:46:25,700 --> 00:46:28,700
They might be output to samples.

803
00:46:28,700 --> 00:46:29,400
There could be it.

804
00:46:29,600 --> 00:46:33,800
You know, so it really is this sort of other idea and it's sort of a

805
00:46:33,900 --> 00:46:37,900
stage of the output that we don't know exactly what what it's and use

806
00:46:37,900 --> 00:46:41,200
is going to be when we're talking about it, we it could be any number

807
00:46:41,200 --> 00:46:42,600
of things you want to do with it.

808
00:46:42,700 --> 00:46:46,500
Hence, they invent the term fragment to, you know, refer to that more

809
00:46:46,500 --> 00:46:47,200
specifically

810
00:46:48,900 --> 00:46:53,300
Anyway, so we create a chart with most a thing we render that Target,

811
00:46:53,300 --> 00:46:55,300
and then there's a thing called a resolved.

812
00:46:58,200 --> 00:47:01,900
And the resolve pass is just a pass that says, all right, at some

813
00:47:01,900 --> 00:47:04,100
point, I have to take these multiple samples.

814
00:47:04,300 --> 00:47:08,500
I have to crunch them down into an actual pixel value.

815
00:47:08,600 --> 00:47:11,000
So I need to go from 16 samples to one sample.

816
00:47:11,000 --> 00:47:11,900
How am I going to do that?

817
00:47:11,900 --> 00:47:15,600
And the answer is with the resolve, the resolve will take that Target

818
00:47:15,900 --> 00:47:16,700
and it resolves.

819
00:47:16,700 --> 00:47:21,200
The target to the, you know, to the output buffer to the actual like

820
00:47:21,200 --> 00:47:22,100
display buffer.

821
00:47:24,700 --> 00:47:26,900
And you have some control there, right?

822
00:47:27,100 --> 00:47:30,400
You can do because you might want to do different things with the, you

823
00:47:30,400 --> 00:47:32,500
might want to depending on what kind of rendering algorithms are

824
00:47:32,500 --> 00:47:33,000
using.

825
00:47:33,100 --> 00:47:35,500
You might want to do different things with the multi samples, the

826
00:47:35,500 --> 00:47:36,700
multiple samples that you have.

827
00:47:36,700 --> 00:47:40,800
We don't because we want to do just straightforward anti-aliasing,

828
00:47:40,800 --> 00:47:44,000
like all were doing, is trying to do the very basic anti-aliasing, but

829
00:47:44,000 --> 00:47:47,100
you can imagine whenever you introduce features, like, multi, sample,

830
00:47:47,300 --> 00:47:50,000
testing, and other things like this, the people out there who are

831
00:47:50,000 --> 00:47:53,000
trying to do the photo realistic renderers, you know, like, you know,

832
00:47:53,000 --> 00:47:53,900
or like the new

833
00:47:54,000 --> 00:47:59,400
Doom engine or, you know, the latest version of unreal or whatever.

834
00:48:00,000 --> 00:48:03,900
You're constantly trying to use these features to do all sorts of

835
00:48:03,900 --> 00:48:05,400
advanced graphical things.

836
00:48:05,600 --> 00:48:10,300
So, you know, you don't want to pre, tell them how they have to

837
00:48:10,300 --> 00:48:13,600
resolve their samples because if you allow them a little control

838
00:48:13,600 --> 00:48:16,400
there, they can get more mileage out of their algorithms and do more

839
00:48:16,400 --> 00:48:19,900
stuff with these than, you know, just simple anti-aliasing.

840
00:48:20,200 --> 00:48:23,400
So, you know, msaa, we're using it for literally.

841
00:48:23,400 --> 00:48:26,100
The way it was designed just take multiple samples, blend them

842
00:48:26,100 --> 00:48:29,800
together, outputting the screen, get us some basic Edge anti-aliasing.

843
00:48:30,000 --> 00:48:32,800
And in an order independent way, that's all we're trying to do.

844
00:48:32,800 --> 00:48:37,500
Not super complicated but you can understand why that

845
00:48:39,800 --> 00:48:39,900
Why?

846
00:48:39,900 --> 00:48:45,300
That sort of thing is a little bit more programmable in certain cases

847
00:48:45,300 --> 00:48:48,000
where you want to have more control, dare to do more advanced

848
00:48:48,000 --> 00:48:49,200
rendering things potentially.

849
00:48:49,800 --> 00:48:54,400
So this is all we have to do for multi sample and hissing, but as

850
00:48:54,400 --> 00:49:00,400
those of you as the sharp independently, motivated viewer will have

851
00:49:00,400 --> 00:49:01,300
already noticed.

852
00:49:01,300 --> 00:49:06,800
I'm sure if you actually take a look at our pipeline, we did not

853
00:49:06,800 --> 00:49:08,700
address a very important aspect.

854
00:49:08,900 --> 00:49:12,600
Act, which is where are we getting the coverage information?

855
00:49:12,900 --> 00:49:19,000
Because this is how they're getting the coverage information in the

856
00:49:19,000 --> 00:49:20,200
case of triangles.

857
00:49:20,400 --> 00:49:24,500
And so, if you take a look at what was happening here, and I gave this

858
00:49:24,500 --> 00:49:27,800
diagram of having four samples on a pixel and some triangles come

859
00:49:27,800 --> 00:49:30,800
through, and you can see which triangles cover which samples.

860
00:49:30,800 --> 00:49:33,100
And so, that makes very good sense, how you would render these.

861
00:49:34,800 --> 00:49:38,600
We don't have any such information, we are not drawing.

862
00:49:38,800 --> 00:49:43,600
Any triangles we are drawing Sprites that have, you know, big areas of

863
00:49:43,600 --> 00:49:44,300
coverage.

864
00:49:44,300 --> 00:49:48,800
And it's inside the Primitive itself deep inside the Primitive itself,

865
00:49:48,800 --> 00:49:52,600
potentially where the value actually is, and it's that Alpha channel,

866
00:49:52,800 --> 00:49:53,300
right?

867
00:49:54,200 --> 00:49:58,800
It's the alpha Channel, that's telling us where that's coming from

868
00:49:58,800 --> 00:50:00,200
where the coverage is coming from.

869
00:50:00,900 --> 00:50:05,500
And so, that's where this other technique comes in, which is called

870
00:50:05,500 --> 00:50:06,600
Alpha 2 coverage.

871
00:50:06,700 --> 00:50:08,600
What Alpha 2 coverage does is

872
00:50:08,800 --> 00:50:13,700
The cover it says, let's read the alpha value and pretend the alpha

873
00:50:13,700 --> 00:50:17,900
value says, Which percentage of these samples are covered.

874
00:50:18,000 --> 00:50:22,400
So if I see an alpha value of one, I know that all of them are

875
00:50:22,400 --> 00:50:26,500
covered, but if I see an alpha value of 0.5, I know that only half of

876
00:50:26,500 --> 00:50:27,400
them are covered.

877
00:50:27,500 --> 00:50:29,900
And so I'll fill in that number.

878
00:50:30,900 --> 00:50:37,300
Now, at this point, we get to a sort of finesse element of this

879
00:50:37,300 --> 00:50:37,900
technique.

880
00:50:43,800 --> 00:50:47,500
There's a tremendous amount of subtlety.

881
00:50:52,300 --> 00:50:55,900
In knowing, where are the samples?

882
00:51:02,500 --> 00:51:08,900
because if I take a pixel right and I say this is 4X msaa,

883
00:51:10,800 --> 00:51:17,700
It's like well, okay, if it's 4X msaa, I could just make it be like a

884
00:51:17,700 --> 00:51:19,200
sub grid of pixels, right?

885
00:51:19,200 --> 00:51:24,000
I could just just divide this pixel into four pieces.

886
00:51:24,600 --> 00:51:25,600
One, two, three, four.

887
00:51:25,600 --> 00:51:27,700
There's my sample right?

888
00:51:28,100 --> 00:51:35,100
Or I could randomly distribute them around right in, maybe like a blue

889
00:51:35,100 --> 00:51:39,600
noises found a fashion, I could do more of a white noise fashion, or

890
00:51:39,600 --> 00:51:40,100
whatever.

891
00:51:40,600 --> 00:51:47,300
Any of these all of this still easily comports with the notion.

892
00:51:48,400 --> 00:51:54,200
That I've got four samples inside a pixel somewhere, but it's not at

893
00:51:54,200 --> 00:51:55,200
all clear.

894
00:51:55,300 --> 00:51:58,300
You know, how to distribute them?

895
00:51:58,600 --> 00:52:02,700
Furthermore, if I've got two pixels next to each other,

896
00:52:04,200 --> 00:52:08,800
There's nothing to say that I couldn't distribute these pixels in ways

897
00:52:08,800 --> 00:52:09,800
that are designed.

898
00:52:09,800 --> 00:52:13,700
So that when I compute the value for this pixel, maybe I use a bigger

899
00:52:13,700 --> 00:52:17,300
region than the pixel itself, maybe I reach into neighboring pixels

900
00:52:17,300 --> 00:52:19,300
for part of the values, right?

901
00:52:19,400 --> 00:52:21,200
I mean, this is anti-aliasing after all.

902
00:52:24,100 --> 00:52:30,100
So there's a tremendous amount of finesse that goes into understanding

903
00:52:30,400 --> 00:52:34,800
how to get the most bang for the buck out of how the samples are

904
00:52:34,800 --> 00:52:41,900
distributed and it may sound very difficult to pick arbitrary

905
00:52:41,900 --> 00:52:46,400
locations for how you put your samples in.

906
00:52:46,400 --> 00:52:46,800
Right.

907
00:52:47,100 --> 00:52:50,400
You know when we had pixels and they're rectilinear, it's like oh it's

908
00:52:50,400 --> 00:52:52,400
very easy to see how triangle fills them.

909
00:52:52,800 --> 00:52:54,100
How do I deal with it?

910
00:52:54,100 --> 00:52:57,100
If it's like in these weird offset positions, how do I even do that?

911
00:52:57,100 --> 00:53:02,100
Well, remember, this is one of the big reasons that the sort of

912
00:53:02,100 --> 00:53:06,600
implicit surface rasterization version of triangle filling is very

913
00:53:06,600 --> 00:53:07,100
useful.

914
00:53:07,200 --> 00:53:11,500
Remember how we wrote hours where we actually just took a rectangular

915
00:53:11,500 --> 00:53:16,500
region and we used the edge functions of the triangle, to determine

916
00:53:16,500 --> 00:53:17,500
what was filled.

917
00:53:17,500 --> 00:53:18,000
Right.

918
00:53:18,100 --> 00:53:19,000
Do you remember this?

919
00:53:20,700 --> 00:53:22,600
Well, that's the same technique you can use.

920
00:53:22,700 --> 00:53:23,200
Use here.

921
00:53:23,200 --> 00:53:26,200
So when you actually write the rasterizer you don't have to really do

922
00:53:26,200 --> 00:53:27,800
any more work you just have.

923
00:53:27,800 --> 00:53:31,200
I mean you do tiny little bit for your samples, you just have an

924
00:53:31,200 --> 00:53:36,500
offset that you know, you apply to the X and Y for that pixel.

925
00:53:36,700 --> 00:53:39,200
And then you just everything else in the routine operates.

926
00:53:39,200 --> 00:53:40,900
Exactly the same, right?

927
00:53:41,000 --> 00:53:47,300
You just go ahead and, and offset those values to the Jitter whatever

928
00:53:47,300 --> 00:53:47,600
it is.

929
00:53:47,600 --> 00:53:51,900
It could be a regular Jitter could be an odd, you know, sort of spread

930
00:53:51,900 --> 00:53:52,500
out Jitter or

931
00:53:52,700 --> 00:53:53,200
Whatever.

932
00:53:53,700 --> 00:53:56,700
And then you just evaluate the edge functions just like you would and

933
00:53:56,700 --> 00:53:59,500
that tells you whether you're inside or outside at that point,

934
00:54:00,900 --> 00:54:05,400
Because of that sort of implicit rasterization structure.

935
00:54:06,000 --> 00:54:10,000
It means that it's really very easy to provide this additional feature

936
00:54:10,000 --> 00:54:10,400
on top.

937
00:54:10,400 --> 00:54:13,800
Whereas, if it was more of a pixel marching algorithm, that would be

938
00:54:13,800 --> 00:54:15,500
very difficult, right?

939
00:54:15,700 --> 00:54:17,000
To make that be efficient.

940
00:54:18,600 --> 00:54:22,300
What that means, is that in a lot of cases.

941
00:54:22,600 --> 00:54:26,600
It's not hard to even allow the user to prescribe what this is.

942
00:54:26,600 --> 00:54:31,700
If you wanted it to right now, that's not necessarily super useful but

943
00:54:31,700 --> 00:54:34,000
you can imagine just setting up tables yourself.

944
00:54:34,200 --> 00:54:38,400
However, it's important to note that often times you want a pattern

945
00:54:38,700 --> 00:54:42,600
that changes from Pixel to pixel because if you don't do that, you can

946
00:54:42,600 --> 00:54:46,600
get aliasing again when things line up with however, you've jittered

947
00:54:46,600 --> 00:54:47,900
your samples, right?

948
00:54:48,100 --> 00:54:51,400
And this gets into a lot of sampling theory that I don't really want

949
00:54:51,400 --> 00:54:53,500
to try to dive into it this point.

950
00:54:53,900 --> 00:54:56,600
But basically, you can think of it sort of as

951
00:54:59,700 --> 00:55:01,300
any regular pattern.

952
00:55:02,800 --> 00:55:05,200
That you use in your sampling.

953
00:55:06,600 --> 00:55:11,900
There will be primitive structures but you will push down to try to

954
00:55:11,900 --> 00:55:15,900
render that will expose that pattern and show visual artifacts.

955
00:55:16,400 --> 00:55:19,600
So what you're trying to do when you design, something like multi

956
00:55:19,600 --> 00:55:22,700
sample anti-aliasing, is you're trying to place your samples in ways

957
00:55:22,700 --> 00:55:26,300
that have no obvious visual artifacts in that way.

958
00:55:27,000 --> 00:55:29,700
This is where blue noise comes in blue noises.

959
00:55:29,700 --> 00:55:35,200
The most favorable pattern for placing samples in all cases.

960
00:55:36,000 --> 00:55:36,200
So,

961
00:55:36,500 --> 00:55:39,400
You know, a lot of times when you're looking at something like trying

962
00:55:39,400 --> 00:55:41,800
to produce the best sampling for multi sample and saying, what you're

963
00:55:41,800 --> 00:55:44,100
trying to do is get as close to Blue noise as you can without having

964
00:55:44,100 --> 00:55:45,800
to actually do the complete work of blue noise.

965
00:55:47,900 --> 00:55:49,200
We'll leave that for a different day.

966
00:55:51,100 --> 00:55:53,200
all right, so

967
00:55:56,500 --> 00:55:59,800
given all of that, Alpha 2 coverage.

968
00:56:00,100 --> 00:56:04,700
What that does is that says, all right, I need to fill these samples

969
00:56:04,700 --> 00:56:07,000
and I've got some Alpha value, right?

970
00:56:08,800 --> 00:56:14,800
And then Alpha value, in this case would be like one point seven five

971
00:56:14,800 --> 00:56:17,300
point five and .25, right?

972
00:56:17,400 --> 00:56:21,600
As I get up from 02 to 0.25, maybe I don't cover anything from point

973
00:56:21,600 --> 00:56:23,800
for to add 5x over 1.5 275.

974
00:56:23,800 --> 00:56:26,100
You know what's actually probably more like buckets like that.

975
00:56:26,800 --> 00:56:27,600
Or something you know?

976
00:56:27,600 --> 00:56:31,200
Who knows how you do it but point being, you figure out how many

977
00:56:31,200 --> 00:56:34,000
you're going to fill based on how many samples there are in with the

978
00:56:34,000 --> 00:56:37,400
alpha value is and you fill those in, but which samples

979
00:56:40,000 --> 00:56:40,500
Right.

980
00:56:41,000 --> 00:56:46,900
And the answer is, I have absolutely no idea at all.

981
00:56:47,300 --> 00:56:53,900
I have literally never looked I would my blind guess is that it would

982
00:56:53,900 --> 00:56:58,400
use some kind of a function of the X and Y

983
00:57:00,300 --> 00:57:04,500
Location of the, well, it couldn't use the Alexa, why location the

984
00:57:04,500 --> 00:57:06,900
pixel because then everyone would choose the same ones for the same

985
00:57:06,900 --> 00:57:07,600
Alpha value.

986
00:57:10,100 --> 00:57:13,100
But it could, it could use the X & Y, location of the pixel, plus the

987
00:57:13,100 --> 00:57:17,100
alpha value itself to determine, which one's it was going to fill in

988
00:57:18,500 --> 00:57:19,700
but I don't really know.

989
00:57:20,000 --> 00:57:22,400
So, I am curious.

990
00:57:23,900 --> 00:57:26,900
This is the first time I've ever really be using Alpha to coverage in

991
00:57:26,900 --> 00:57:30,200
any way where I care about it dramatically.

992
00:57:31,600 --> 00:57:35,300
And so I'm kind of curious where the opengl extension is for it.

993
00:57:36,500 --> 00:57:39,800
To see if it even specifies because it might not.

994
00:57:56,800 --> 00:57:58,200
Okay.

995
00:58:09,600 --> 00:58:10,800
Let's see.

996
00:58:24,200 --> 00:58:25,300
The built in Israel.

997
00:58:25,300 --> 00:58:28,300
Same physician contains the position of the current sample, right?

998
00:58:29,500 --> 00:58:32,900
If I'm practicing straighter outputs, the built-in integer rage,

999
00:58:32,900 --> 00:58:35,300
you'll see a mass can be used to change the sample coverage for

1000
00:58:35,300 --> 00:58:36,800
fragment from within the shooter.

1001
00:58:38,100 --> 00:58:41,800
Number of us in the raised seal sr3 to where s is the maximum personal

1002
00:58:41,800 --> 00:58:43,100
supported by the invitation.

1003
00:58:50,100 --> 00:58:53,700
So this looks like we would have to Output it ourself though, so I

1004
00:58:53,700 --> 00:58:55,900
guess there's no fixed function way to turn it on.

1005
00:59:27,000 --> 00:59:29,000
So it does have sample Alpha to coverage.

1006
00:59:43,700 --> 00:59:46,600
But which extension actually introduce that value?

1007
00:59:48,200 --> 00:59:49,300
Because it wasn't this one.

1008
01:00:01,000 --> 01:00:02,400
It probably was this one.

1009
01:00:10,400 --> 01:00:12,000
Yeah, fragment coverage to color.

1010
01:00:42,000 --> 01:00:42,600
so, we want the

1011
01:00:44,300 --> 01:00:46,500
Opposite of that is the only thing.

1012
01:00:55,800 --> 01:00:56,500
Come on, guys.

1013
01:00:56,500 --> 01:00:58,000
Someone must have this in here.

1014
01:01:10,100 --> 01:01:15,500
Well somewhere, somebody must have first proposed it and when they did

1015
01:01:15,500 --> 01:01:19,100
they had to specify either how it worked or that everyone could do it

1016
01:01:19,100 --> 01:01:25,300
differently and I just want to find wherever the first one was, but

1017
01:01:25,300 --> 01:01:27,700
unfortunately, well, okay.

1018
01:01:28,000 --> 01:01:29,700
We're attributes sampled.

1019
01:01:29,700 --> 01:01:31,200
That's probably not going to help us.

1020
01:01:50,700 --> 01:01:53,900
This is not giving me the answer that I want.

1021
01:02:26,400 --> 01:02:29,600
I just, I just want.

1022
01:02:47,200 --> 01:02:50,900
I just want someone to show me the extension for this.

1023
01:02:51,400 --> 01:02:52,400
I feel like

1024
01:02:53,700 --> 01:02:55,200
That shouldn't be that hard to find.

1025
01:02:56,900 --> 01:02:57,200
Right.

1026
01:02:57,200 --> 01:02:58,800
I mean, shouldn't that be pretty easy?

1027
01:02:58,900 --> 01:02:59,900
I feel like that should be pretty.

1028
01:03:00,100 --> 01:03:00,400
Z.

1029
01:03:26,000 --> 01:03:26,500
Well.

1030
01:03:28,500 --> 01:03:33,100
Maybe we'll just have to let it not be known until next week because I

1031
01:03:33,100 --> 01:03:36,300
don't really feel like spending too much stream time trying to find it

1032
01:03:36,600 --> 01:03:39,200
but point being somewhere.

1033
01:03:39,500 --> 01:03:45,600
Somebody at some point will have had to have said how it determines

1034
01:03:45,800 --> 01:03:52,700
which samples to cover, and I'm not sure what that, if that is

1035
01:03:53,800 --> 01:03:58,000
specified in a rid, like, rigid way, like if you're implementing

1036
01:03:58,200 --> 01:04:03,400
Opengl you have to do this or whether it's, you know, more ad hoc

1037
01:04:03,400 --> 01:04:07,200
where they're like anything, anybody who wants to invent something

1038
01:04:07,200 --> 01:04:08,800
that does something reasonable can.

1039
01:04:09,200 --> 01:04:10,700
So it's just a the ideas.

1040
01:04:10,700 --> 01:04:12,200
It just has to cover this many samples.

1041
01:04:12,200 --> 01:04:14,300
It doesn't matter which of the samples are covered.

1042
01:04:15,000 --> 01:04:16,400
So that's I don't know.

1043
01:04:16,700 --> 01:04:20,200
You can see why it would matter because if you have two Sprites that

1044
01:04:20,200 --> 01:04:22,500
are covering the same square and they both have an alpha value of

1045
01:04:22,500 --> 01:04:25,100
something, you want to know what happens.

1046
01:04:25,800 --> 01:04:28,000
So, it's important, it's not an irrelevant.

1047
01:04:28,100 --> 01:04:30,200
A situation.

1048
01:04:30,500 --> 01:04:34,700
So I don't really know why there isn't, I was expecting to find.

1049
01:04:34,700 --> 01:04:37,900
I guess it might have been because it's in maybe because it's in

1050
01:04:39,100 --> 01:04:44,400
Opengl 1.3, maybe it was introduced as the part of the spec itself and

1051
01:04:44,400 --> 01:04:48,100
was never an extension or maybe not.

1052
01:05:01,600 --> 01:05:04,000
But if it was an extension, I can't find it.

1053
01:05:06,000 --> 01:05:06,800
Unfortunately.

1054
01:05:12,200 --> 01:05:14,100
But oh well.

1055
01:05:15,800 --> 01:05:19,200
So anyway that's that's the entirety of it.

1056
01:05:20,200 --> 01:05:23,500
Notwithstanding the fact that I don't know where to find a definition

1057
01:05:23,500 --> 01:05:25,400
of exactly how it chooses, how to fill.

1058
01:05:27,000 --> 01:05:28,300
That is what will happen.

1059
01:05:29,400 --> 01:05:34,200
So for our purposes we need to be able to do all of those things.

1060
01:05:34,400 --> 01:05:35,000
Right?

1061
01:05:35,400 --> 01:05:40,500
Some are easier than others, obviously, GL sample coverage and

1062
01:05:40,800 --> 01:05:43,700
enabling that is the easier of the two.

1063
01:05:43,700 --> 01:05:45,600
So it looks like we don't have to use a Shader for that.

1064
01:05:45,600 --> 01:05:47,000
We can use the older version.

1065
01:05:47,000 --> 01:05:50,400
I wasn't sure if there was an old version of alpha to coverage.

1066
01:05:50,400 --> 01:05:52,900
I thought there was but I never used it myself.

1067
01:05:52,900 --> 01:05:56,200
So I didn't know if it, you know, if it was something that was only

1068
01:05:56,200 --> 01:05:56,700
possible for

1069
01:05:56,800 --> 01:05:57,300
Schrader.

1070
01:05:59,200 --> 01:05:59,800
Looks like that's not.

1071
01:06:01,200 --> 01:06:08,000
So when we are in here, we certainly can Jill enable this and turn on.

1072
01:06:08,300 --> 01:06:12,500
Exactly those values, we have to get them obviously, but we should be

1073
01:06:12,500 --> 01:06:13,000
okay.

1074
01:06:13,200 --> 01:06:16,800
So, if we take a look at GL sample, Alfred coverage, we should be able

1075
01:06:16,800 --> 01:06:18,200
to find docs for it.

1076
01:06:19,900 --> 01:06:21,400
Even if we can't find,

1077
01:06:25,500 --> 01:06:26,300
Anything else here.

1078
01:06:27,300 --> 01:06:33,300
This is not exactly what I want but multi-sample above, I actually

1079
01:06:33,300 --> 01:06:34,600
just want

1080
01:06:42,500 --> 01:06:44,000
The set of enables for this.

1081
01:06:45,700 --> 01:06:48,500
When most of those LGL enabled, with argument Geo, multi sample, a

1082
01:06:48,500 --> 01:06:51,300
fragment mask Expedia for each pregnant, that's fine.

1083
01:06:52,000 --> 01:06:53,900
If Rusev is mass is enabled.

1084
01:06:54,400 --> 01:06:56,900
After coverage, fragment alcohol is used to generate a temporary

1085
01:06:56,900 --> 01:06:59,100
modification Mass which is and it with fragrant mask.

1086
01:06:59,900 --> 01:07:03,700
Again, that's the part that I was trying to find the definition of

1087
01:07:03,700 --> 01:07:08,400
because we would like to know what that model if there are rules for

1088
01:07:08,400 --> 01:07:13,300
that modification mask or not and you know, off we go after your

1089
01:07:13,300 --> 01:07:15,000
version of alpha values to

1090
01:07:15,100 --> 01:07:20,600
Specimen values is enabled the the fragments Alpha is set to the

1091
01:07:20,600 --> 01:07:22,000
maximum allowable value.

1092
01:07:24,400 --> 01:07:24,800
That's right.

1093
01:07:24,800 --> 01:07:28,000
Get that part after conversion of alpha values to masks.

1094
01:07:28,300 --> 01:07:32,700
If replacement of Alphas is enabled, she'll enabled with argument GL

1095
01:07:32,700 --> 01:07:34,000
sample Alpha.

1096
01:07:35,100 --> 01:07:41,800
21 the fragments Alpha is set to the maximum allowable value, okay,

1097
01:07:42,500 --> 01:07:45,200
don't think we actually need that.

1098
01:07:45,700 --> 01:07:49,700
Finally, if fragment Mass modification is enabled GL, sample coverage

1099
01:07:49,700 --> 01:07:52,000
defines an additional modification mask.

1100
01:07:54,100 --> 01:07:57,800
Oh, no, we do want that, I see what that's saying because we don't

1101
01:07:57,800 --> 01:08:00,200
actually want blending to occur here, right?

1102
01:08:00,200 --> 01:08:02,900
We're trying to not actually do blending anymore.

1103
01:08:03,100 --> 01:08:08,000
So that this that takes the samples Alpha value, and Jack's it to 1 so

1104
01:08:08,000 --> 01:08:10,000
that it won't do any blending.

1105
01:08:10,500 --> 01:08:12,800
It's only using the alpha for the coverage.

1106
01:08:12,800 --> 01:08:14,900
So we probably want all of those, right?

1107
01:08:17,399 --> 01:08:21,899
So we want GL sample, Alpha to coverage.

1108
01:08:27,100 --> 01:08:30,700
We want Jill sampe Alpha sample, Alpha 2 1.

1109
01:08:34,200 --> 01:08:40,399
And we want Geo, multi sample as well.

1110
01:08:40,399 --> 01:08:46,100
I think we want all of those enabled because they're all useful for

1111
01:08:46,100 --> 01:08:46,300
us.

1112
01:08:51,300 --> 01:08:53,700
So the only one we don't need is DL sample coverage.

1113
01:08:54,000 --> 01:08:58,399
G else ample coverage would have us specifically The Mask more

1114
01:08:58,399 --> 01:08:58,899
directly.

1115
01:08:58,899 --> 01:08:59,800
So that would allow us

1116
01:09:00,000 --> 01:09:04,300
Say, hey, we're trying to fuss with the mass for this drawing pass in

1117
01:09:04,300 --> 01:09:07,200
some way globally and we don't need to do that.

1118
01:09:08,100 --> 01:09:09,500
So I think that's it.

1119
01:09:11,100 --> 01:09:12,200
For what we would need.

1120
01:09:12,300 --> 01:09:16,200
I'm assuming these values are not present at the moment, but I could

1121
01:09:16,200 --> 01:09:18,000
be wrong, I am not wrong.

1122
01:09:18,700 --> 01:09:20,500
So we need to be able to get those.

1123
01:09:21,100 --> 01:09:27,800
We can get those out of the GL Corps, our food,

1124
01:09:33,200 --> 01:09:34,700
Here is all of these guys.

1125
01:09:37,399 --> 01:09:43,500
I'll just grab them out and drop them in here, so that's all we need

1126
01:09:43,500 --> 01:09:49,000
in terms of enabling those this again allows us to turn this stuff on.

1127
01:09:49,200 --> 01:09:52,700
So I believe that's all we really have to do to get Alpha 2 coverage

1128
01:09:52,700 --> 01:09:57,200
and multi sample working in terms of telling the render, like the

1129
01:09:57,200 --> 01:10:03,800
actual rasterization phase to do it but that will not actually

1130
01:10:06,100 --> 01:10:10,400
Enable multi sampling in our case, due to the fact that we haven't set

1131
01:10:10,400 --> 01:10:12,000
up a multi sample buffer yet.

1132
01:10:12,400 --> 01:10:16,500
So you know, when we when we render this we're not going to get none

1133
01:10:16,500 --> 01:10:19,100
of those effects even though we're calling Jian able on them.

1134
01:10:19,400 --> 01:10:23,200
None of those effects are actually going to work because we don't

1135
01:10:23,200 --> 01:10:28,700
actually have anything creating the buffer, the backing buffer for

1136
01:10:28,700 --> 01:10:29,000
them.

1137
01:10:29,800 --> 01:10:31,900
But hopefully that makes some sense there.

1138
01:10:32,000 --> 01:10:33,900
What I did want to say real quickly,

1139
01:10:37,900 --> 01:10:40,100
Is, I believe we had a question about screen door.

1140
01:10:40,100 --> 01:10:41,100
Transparency.

1141
01:10:49,800 --> 01:10:53,700
And I just wanted to point out that screen door transparency and this

1142
01:10:53,700 --> 01:10:58,100
are basically the same technique right Alpha to coverage is screened

1143
01:10:58,100 --> 01:10:59,200
or transparency.

1144
01:10:59,300 --> 01:11:02,800
It's just screened or transparency being done at a resolution higher

1145
01:11:02,800 --> 01:11:06,300
than the screen resolution so that you don't see it as screen door

1146
01:11:06,300 --> 01:11:07,000
transparency.

1147
01:11:07,000 --> 01:11:10,800
You see it as Blended color values right because screen dark pants.

1148
01:11:10,800 --> 01:11:14,200
Transparency is basically saying well all right, you know, I'll fill

1149
01:11:14,200 --> 01:11:17,800
every other pixel with this render.

1150
01:11:18,100 --> 01:11:22,400
When I'm rendering guy, one when Brendan guy to I'll fill the opposite

1151
01:11:22,400 --> 01:11:25,900
mask and then I'll get some transparency in there because you'll be

1152
01:11:25,900 --> 01:11:28,400
able to see both of them, but you'll see it as kind of a stippling

1153
01:11:28,400 --> 01:11:28,900
pattern.

1154
01:11:29,200 --> 01:11:34,500
Well, if I do this, but then blend these two together right now, I

1155
01:11:34,500 --> 01:11:36,100
don't see that simple powder anymore.

1156
01:11:36,100 --> 01:11:40,800
I might see some art of some discoloration that indicates this Tuple

1157
01:11:40,800 --> 01:11:44,100
pattern, if I don't use enough samples or the samples are two regular.

1158
01:11:44,400 --> 01:11:47,400
But again it's basically just doing screen door, transparency at a

1159
01:11:47,400 --> 01:11:47,800
resolution.

1160
01:11:47,900 --> 01:11:50,200
I'm higher than the screen resolution and then down sampling it,

1161
01:11:50,200 --> 01:11:50,700
right?

1162
01:11:51,400 --> 01:11:53,500
That's really all Alpha to coverage does.

1163
01:11:55,900 --> 01:11:59,600
Alright, so we have to set up a Geo multi sample buffer.

1164
01:12:00,000 --> 01:12:04,500
Or I should say a buffer that's suitable for multi sampling.

1165
01:12:05,500 --> 01:12:07,700
And again this is one of those things like I said, I haven't done it

1166
01:12:07,700 --> 01:12:14,200
in a really long time so I'm going to have to blindly search for

1167
01:12:14,200 --> 01:12:14,900
Stuff.

1168
01:12:17,200 --> 01:12:19,400
To, to find our multi sample.

1169
01:12:20,600 --> 01:12:22,500
So I think

1170
01:12:25,500 --> 01:12:27,800
there's two ways we can go with it.

1171
01:12:28,600 --> 01:12:33,300
One way you can go with it is you can set up your main render Target

1172
01:12:33,300 --> 01:12:34,100
as a multi sample.

1173
01:12:34,100 --> 01:12:36,100
Render Target the other way you can go with.

1174
01:12:36,100 --> 01:12:39,600
It is just render into textures that are multi, sample textures, and

1175
01:12:39,600 --> 01:12:41,400
then leave your output buffer regular.

1176
01:12:41,400 --> 01:12:45,200
I think we want to do the, the texture version.

1177
01:12:45,500 --> 01:12:49,400
So I believe what we want to do is something like this.

1178
01:12:51,800 --> 01:12:56,200
So you can see here if you remember when we were because we already

1179
01:12:56,200 --> 01:12:57,800
did some render Target stuff.

1180
01:12:58,400 --> 01:13:00,300
We didn't do it for multi sampling.

1181
01:13:00,900 --> 01:13:05,700
But we you know, essentially wanted to render to something that we

1182
01:13:05,700 --> 01:13:10,100
could then use as a texture later and you can see here me doing it.

1183
01:13:10,100 --> 01:13:14,000
I find a frame buffer and then I called Yellow Frame buffer texture 2D

1184
01:13:14,200 --> 01:13:18,000
and I pass a texture handle and say this is what we're going to render

1185
01:13:18,000 --> 01:13:19,500
to, right?

1186
01:13:21,100 --> 01:13:25,000
So what you can imagine is if we wanted to create, if we want to do

1187
01:13:25,000 --> 01:13:28,000
the same thing, but we wanted that to be multi sample.

1188
01:13:28,500 --> 01:13:31,300
Well, where do we create this texture handle, right?

1189
01:13:31,800 --> 01:13:34,600
We call opengl allocate texture which is routine.

1190
01:13:34,600 --> 01:13:36,700
We wrote and you can see right here.

1191
01:13:36,700 --> 01:13:40,900
What we do is we call GL text image, 2D to specify a texture with some

1192
01:13:40,900 --> 01:13:43,400
data and that data just happens to be 0, right?

1193
01:13:43,400 --> 01:13:45,700
So we just don't give it any data so it knows.

1194
01:13:45,700 --> 01:13:48,000
Well, we're not trying to nationalize this to anything but here's what

1195
01:13:48,000 --> 01:13:48,500
it is.

1196
01:13:50,200 --> 01:13:51,700
so, in our case,

1197
01:13:53,500 --> 01:13:58,500
What we want to do here is we want to set up a multi sample version of

1198
01:13:58,500 --> 01:13:59,000
that.

1199
01:13:59,200 --> 01:14:02,400
And so you can see that the way that we do that is we call GL text,

1200
01:14:02,400 --> 01:14:08,700
image, 2D multi sample and in this case we have exactly the same

1201
01:14:08,700 --> 01:14:14,000
information, but instead of it being similar to a texture creation

1202
01:14:14,000 --> 01:14:19,300
call, it can optionally pass data, it can no longer be past data,

1203
01:14:19,600 --> 01:14:20,100
right?

1204
01:14:21,600 --> 01:14:22,900
All right, so let's take a look at this call.

1205
01:14:23,100 --> 01:14:25,800
We have the target, which is obviously just going to be the Multiverse

1206
01:14:25,800 --> 01:14:27,000
the 2D multi sample.

1207
01:14:28,300 --> 01:14:31,400
We've got the

1208
01:14:33,400 --> 01:14:35,400
The sample count, right?

1209
01:14:36,200 --> 01:14:39,900
We've got the internal format which is going to be the same thing as

1210
01:14:39,900 --> 01:14:40,400
it was.

1211
01:14:41,000 --> 01:14:43,100
We've got the width and the height, and we've got the fixed sample

1212
01:14:43,100 --> 01:14:46,600
locations, and the fixed sample locations is just saying whether or

1213
01:14:46,600 --> 01:14:53,400
not whether the whether the sample locations are dependent on where

1214
01:14:53,400 --> 01:14:56,400
the image on where in the image you are right.

1215
01:14:59,700 --> 01:14:59,800
so,

1216
01:15:01,500 --> 01:15:04,800
I'm assuming that there's nothing specifically weird to this.

1217
01:15:04,800 --> 01:15:10,000
I can't remember anything about it in particular, but I believe that's

1218
01:15:10,000 --> 01:15:15,400
all we would really have to do there and then we should be able to use

1219
01:15:15,400 --> 01:15:16,900
it as part of the frame buffer.

1220
01:15:17,100 --> 01:15:18,600
So I believe

1221
01:15:20,700 --> 01:15:21,800
I'll leave this page up.

1222
01:15:36,600 --> 01:15:38,800
I believe.

1223
01:15:42,100 --> 01:15:43,800
That we can still just use the same call.

1224
01:15:44,800 --> 01:15:46,800
Just making sure there's no other ones that I need to do.

1225
01:15:47,400 --> 01:15:50,400
So I believe, when we do buying frame buffer texture,

1226
01:15:52,700 --> 01:15:54,300
Let's load up opengl three there.

1227
01:15:55,000 --> 01:15:59,700
I believe when we do G 0, by in framework for texture, we can use a

1228
01:15:59,700 --> 01:16:06,900
multi, sample Target their right type of texture in Texas.

1229
01:16:06,900 --> 01:16:08,600
Barbecue Master face be attached.

1230
01:16:09,000 --> 01:16:13,200
So I believe, in this case, we should be able to do.

1231
01:16:13,300 --> 01:16:14,600
Gosh, there's a lot of stuff in here.

1232
01:16:17,500 --> 01:16:19,400
Temperatures are too short for cubemetricks visits.

1233
01:16:19,400 --> 01:16:21,100
The face is to be attached.

1234
01:16:21,800 --> 01:16:25,100
So I believe, in this case, we can just specify the multi sample one

1235
01:16:25,100 --> 01:16:26,600
and we'd be fine, right?

1236
01:16:26,600 --> 01:16:31,600
I don't think there's anything particularly bizarre about that, so I

1237
01:16:31,600 --> 01:16:33,700
think that's pretty much all.

1238
01:16:33,700 --> 01:16:37,800
We would have to do to start turning on the multi sample Miss of it

1239
01:16:37,800 --> 01:16:38,200
all

1240
01:16:41,400 --> 01:16:43,000
But again, like I said, it's been a long time.

1241
01:16:43,000 --> 01:16:43,900
I can't quite remember.

1242
01:16:43,900 --> 01:16:49,600
So I don't really know if that's true.

1243
01:16:51,600 --> 01:16:58,000
All right, so we also need to turn off our Alpha clipping for this.

1244
01:16:58,300 --> 01:17:03,000
We were previously doing a thing that we wouldn't draw if it was

1245
01:17:03,000 --> 01:17:04,400
greater than 0, I guess.

1246
01:17:04,600 --> 01:17:07,000
Well, you know what, that can stay in because that's an alpha Funk.

1247
01:17:07,000 --> 01:17:11,400
That basically only kills areas, we shouldn't be working with at all,

1248
01:17:11,800 --> 01:17:12,700
so that can stay in.

1249
01:17:12,700 --> 01:17:14,700
It was this one that would have been bad.

1250
01:17:14,700 --> 01:17:19,500
So we have to, we have to stick with this one now for reals.

1251
01:17:20,500 --> 01:17:20,900
All right.

1252
01:17:20,900 --> 01:17:21,200
So when

1253
01:17:21,400 --> 01:17:25,600
Doing Ermac render Target thing and recalling opengl allocate texture

1254
01:17:25,600 --> 01:17:26,100
here.

1255
01:17:26,800 --> 01:17:29,600
What we're going to have to do now is change this to something that

1256
01:17:29,600 --> 01:17:32,000
allocates a multi sample.

1257
01:17:34,600 --> 01:17:36,600
Buffer basically, right.

1258
01:17:38,500 --> 01:17:43,700
And what I'm not sure about to is when we want to actually do our

1259
01:17:44,200 --> 01:17:46,200
final bake down.

1260
01:17:46,600 --> 01:17:54,300
I'm not sure exactly how to set up the that resolved if in jail

1261
01:17:54,300 --> 01:17:56,900
multi-sample texture resolved.

1262
01:17:57,600 --> 01:17:59,500
Because again, when we've got

1263
01:18:02,400 --> 01:18:06,000
When you've got this situation where we have our texture, which is the

1264
01:18:06,000 --> 01:18:08,400
multi sample texture and we rendered to it.

1265
01:18:08,400 --> 01:18:12,300
So now it has multiple samples in it.

1266
01:18:12,500 --> 01:18:17,300
We have to be able to then render from that texture into a non multi

1267
01:18:17,300 --> 01:18:21,600
sampled frame buffer and have that work properly, right?

1268
01:18:22,500 --> 01:18:23,900
Let me see.

1269
01:18:25,800 --> 01:18:28,800
What the Press is here.

1270
01:18:33,000 --> 01:18:34,800
Let's see.

1271
01:18:47,600 --> 01:18:51,100
Christmas is linear blit of that is not lace effects as a mulch.

1272
01:18:51,100 --> 01:18:54,400
A resolved, I just want some good at data here.

1273
01:18:56,400 --> 01:19:01,100
Let me see if I can get anything lit frame buffer.

1274
01:19:05,900 --> 01:19:08,900
Probably would be sufficient but what if we want to read from them as

1275
01:19:08,900 --> 01:19:09,700
textures?

1276
01:19:11,500 --> 01:19:13,600
Do we have to resolve them first entirely?

1277
01:19:17,500 --> 01:19:18,900
I guess I'll take a look at this first.

1278
01:19:23,500 --> 01:19:23,900
There we go.

1279
01:19:31,200 --> 01:19:32,700
Yeah, that shouldn't be necessary.

1280
01:19:32,700 --> 01:19:36,500
I want to read from visas textures and I feel like I should be able to

1281
01:19:36,500 --> 01:19:40,400
do that, or at least resolve them without having to two round-trip

1282
01:19:40,400 --> 01:19:40,900
through there.

1283
01:19:40,900 --> 01:19:42,000
So, that doesn't seem

1284
01:19:44,400 --> 01:19:45,500
Like what I wanted at all.

1285
01:19:45,600 --> 01:19:47,100
So let's take a look at this as a better.

1286
01:19:50,300 --> 01:19:51,900
So this is exactly what I wanted.

1287
01:19:51,900 --> 01:19:53,600
And this is exactly what I just said.

1288
01:19:54,000 --> 01:19:56,800
So this all comports nicely with what we were talking about there.

1289
01:19:59,300 --> 01:20:01,700
Once you've rendered your scenes, must use can spray the entire

1290
01:20:01,700 --> 01:20:04,100
episodes here by putting your mother sampling frame buffer object to

1291
01:20:04,100 --> 01:20:07,000
the back buffer, using giblet frame buffer.

1292
01:20:08,300 --> 01:20:12,700
So that is, if we just want to splay it but what if I want to use it

1293
01:20:12,700 --> 01:20:17,600
for rendering, surely there is a way to resolve it into a texture

1294
01:20:17,600 --> 01:20:18,000
know.

1295
01:20:26,700 --> 01:20:28,000
So I guess I don't know.

1296
01:20:34,000 --> 01:20:36,100
I guess we'll try it this way first and see.

1297
01:20:36,400 --> 01:20:42,100
I mean one thing that is true is so if GL blipped frame buffer is the

1298
01:20:42,100 --> 01:20:46,200
only path that can resolve a multi sample buffer, we still could

1299
01:20:46,200 --> 01:20:50,000
generate textures with that because since we are binding, both frame

1300
01:20:50,000 --> 01:20:51,500
buffers, right?

1301
01:20:54,100 --> 01:20:58,000
if we're binding, both frame buffers, then we should be able to

1302
01:21:01,000 --> 01:21:02,000
when we bind,

1303
01:21:05,300 --> 01:21:08,800
When we bind the read frame, buffer will bind our custom frame buffer

1304
01:21:08,800 --> 01:21:10,000
that has a texture loaded.

1305
01:21:10,000 --> 01:21:14,000
When we bind our draw frame buffer instead of binding the the default

1306
01:21:14,000 --> 01:21:17,900
frame buffer, we could just bind another custom frame buffer that had

1307
01:21:18,000 --> 01:21:20,300
our texture as a Target, right?

1308
01:21:20,600 --> 01:21:22,600
So we can do the resolve that way.

1309
01:21:22,700 --> 01:21:26,100
Maybe that's the way they want us to resolve from a texture to another

1310
01:21:26,100 --> 01:21:28,600
texture but I don't really know.

1311
01:21:29,300 --> 01:21:34,900
Like I said don't really recall but that is certainly possible, Right?

1312
01:21:35,000 --> 01:21:37,900
That would give us the ability to specify that, that's what we wanted

1313
01:21:37,900 --> 01:21:38,200
to have happen.

1314
01:21:38,200 --> 01:21:45,500
What I would point out here is that since we're going to be going down

1315
01:21:45,500 --> 01:21:49,000
this route, this also gives us the opportunity to get rid of some of

1316
01:21:49,000 --> 01:21:55,200
the srgb stuff potentially because if we can get GL blit frame buffer

1317
01:21:55,200 --> 01:21:58,000
to do the srgb conversion there.

1318
01:21:58,000 --> 01:22:02,900
That would mean that we do good, we don't actually need to do to get

1319
01:22:02,900 --> 01:22:05,000
an srgb back before.

1320
01:22:05,000 --> 01:22:08,000
Buffer from Windows, which would eliminate some of the code on that

1321
01:22:08,000 --> 01:22:10,300
side and would be nice, right?

1322
01:22:12,000 --> 01:22:14,000
So there's that.

1323
01:22:21,500 --> 01:22:22,200
So let's see here.

1324
01:22:22,200 --> 01:22:23,600
Default it should be window system.

1325
01:22:23,600 --> 01:22:26,000
Frame buffer is non blorp Hardware lost book.

1326
01:22:26,000 --> 01:22:27,900
Serrations used to pass feel blah, blah blah.

1327
01:22:28,000 --> 01:22:30,100
No I know what I want.

1328
01:22:45,600 --> 01:22:50,100
so basically, what I want to know is Will blit frame buffer do an srgb

1329
01:22:50,100 --> 01:22:53,200
conversion if the two buffers are set up,

1330
01:22:54,400 --> 01:22:57,400
As such, I don't know if that makes sense.

1331
01:22:57,600 --> 01:22:58,200
What I'm saying?

1332
01:22:58,200 --> 01:22:58,700
But

1333
01:23:19,900 --> 01:23:22,700
An application which has is nonlinear Vector data.

1334
01:23:37,600 --> 01:23:39,200
And by the way, you can kind of see

1335
01:23:42,000 --> 01:23:44,500
I mentioned at the outset of this episode that there's a bunch of

1336
01:23:44,500 --> 01:23:50,600
black box next to it, and I guess I'll just sort of drive that point

1337
01:23:50,600 --> 01:23:51,200
home here.

1338
01:23:52,000 --> 01:23:57,100
So, again, this is one of the reasons that I find GPU programming.

1339
01:23:57,100 --> 01:23:59,000
So, and satisfying to, is that

1340
01:24:00,000 --> 01:24:02,500
Of times really mostly?

1341
01:24:02,500 --> 01:24:04,500
What you're doing is just spec jockeying.

1342
01:24:05,000 --> 01:24:12,200
Like it's not like, I don't know what I would go right to write the

1343
01:24:12,200 --> 01:24:15,000
rasterizer that did this multi sample result.

1344
01:24:15,000 --> 01:24:18,500
And I would know whether I was going to put srgb in that resolve or

1345
01:24:18,500 --> 01:24:19,000
not.

1346
01:24:19,100 --> 01:24:21,200
It's very straightforward, right?

1347
01:24:22,600 --> 01:24:29,100
But because it's this crazy non-orthogonal hodgepodge of like, mush

1348
01:24:29,100 --> 01:24:33,800
together stuff and all the graphs apis are different and all the gpus

1349
01:24:33,800 --> 01:24:34,200
are different.

1350
01:24:34,200 --> 01:24:36,700
They're not really programmable Hardware in the traditional sense.

1351
01:24:36,700 --> 01:24:38,700
They're like spot programmable, right?

1352
01:24:39,500 --> 01:24:43,400
You end up in this weird case of like all the you have to just hunt

1353
01:24:43,400 --> 01:24:45,700
down all these special features all the time.

1354
01:24:45,700 --> 01:24:47,500
It's really annoying because it's like

1355
01:24:49,700 --> 01:24:54,000
It spends a ton of time not doing anything that involves solving a

1356
01:24:54,000 --> 01:24:54,600
problem.

1357
01:24:54,800 --> 01:24:58,100
Like it's not like, I don't know where the srgb conversion should

1358
01:24:58,100 --> 01:25:02,900
happen, I would like it to happen there, and if I wrote that code, I

1359
01:25:02,900 --> 01:25:04,100
could just go put it in.

1360
01:25:04,300 --> 01:25:07,500
But instead I'm constantly having to go like, oh, can it do it here

1361
01:25:07,600 --> 01:25:08,000
Willie?

1362
01:25:08,000 --> 01:25:08,500
I don't know.

1363
01:25:08,500 --> 01:25:09,500
Let me look at the speck.

1364
01:25:09,500 --> 01:25:11,700
Okay, well that work on most Hardware are there bugs there?

1365
01:25:11,700 --> 01:25:13,400
Okay, maybe I shouldn't put it.

1366
01:25:13,400 --> 01:25:14,700
Their mission put it somewhere else.

1367
01:25:14,800 --> 01:25:15,900
Can I put it somewhere else?

1368
01:25:15,900 --> 01:25:16,800
Can I even put it here?

1369
01:25:16,800 --> 01:25:17,400
I don't know yet.

1370
01:25:17,400 --> 01:25:19,300
If what, if if I enable frame buffer

1371
01:25:19,500 --> 01:25:20,900
Srgb or not.

1372
01:25:20,900 --> 01:25:24,200
Will that is that going to take into account here and it's just like

1373
01:25:24,200 --> 01:25:27,300
it's just a basically, a complete waste of programmer time, right?

1374
01:25:27,500 --> 01:25:29,000
That at no point.

1375
01:25:29,100 --> 01:25:31,500
Are you actually dealing with the problem?

1376
01:25:31,600 --> 01:25:33,500
The problem is Trivial.

1377
01:25:33,500 --> 01:25:38,100
We already know what it is and it's simple to understand and solve so

1378
01:25:38,100 --> 01:25:43,500
it's really it's this really nasty like it's not, it makes me always

1379
01:25:43,500 --> 01:25:46,800
whenever I deal with it really appreciate x86.

1380
01:25:48,100 --> 01:25:50,800
And x64 as architectures where it's just like look.

1381
01:25:51,300 --> 01:25:54,100
Here's the instructions said, here's what it does right out, whatever

1382
01:25:54,100 --> 01:25:54,700
you want.

1383
01:25:55,500 --> 01:25:56,900
Go nuts, right?

1384
01:25:57,900 --> 01:25:59,200
And it's very easy understand.

1385
01:25:59,200 --> 01:26:00,200
It's very well specified.

1386
01:26:00,200 --> 01:26:03,000
I know exactly what's going on in a given time and it's really nice

1387
01:26:03,300 --> 01:26:05,900
whereas with the GPU stuff, it is nothing like that.

1388
01:26:05,900 --> 01:26:09,500
It's like most of your time is just spent figuring out the magic

1389
01:26:09,500 --> 01:26:13,300
incantation to do something whether that will work on the machine

1390
01:26:13,300 --> 01:26:15,200
you're working on at all right.

1391
01:26:15,200 --> 01:26:17,400
Now, whether it will work on the end users machines,

1392
01:26:18,000 --> 01:26:20,300
Whether there's some other way of doing it that would have been more

1393
01:26:20,300 --> 01:26:23,700
efficient but you didn't know about it, you know, and it's just very

1394
01:26:23,700 --> 01:26:24,500
unsatisfying.

1395
01:26:24,500 --> 01:26:28,500
I find this whole thing to be very unsatisfying and I definitely long

1396
01:26:28,500 --> 01:26:33,000
for the day when gpus kind of go away is a thing and it's just another

1397
01:26:33,000 --> 01:26:36,000
programmable piece but we're still not there.

1398
01:26:37,700 --> 01:26:39,400
Maybe someday maybe before I'm dead.

1399
01:26:39,500 --> 01:26:40,700
Although I'm getting pretty old.

1400
01:26:41,900 --> 01:26:49,300
So anyway, if we want to get started on this anyway that the blind

1401
01:26:49,300 --> 01:26:51,700
here with the srgb, I'm not sure what it will do.

1402
01:26:51,700 --> 01:26:53,900
So we'll have to take a look at that, a little more carefully.

1403
01:26:54,800 --> 01:26:59,700
But for starters, we can certainly create GL, text 2D multi-sample

1404
01:27:00,500 --> 01:27:03,100
And also we've got here on the opengl wiki.

1405
01:27:03,300 --> 01:27:06,900
We've got an example of at least what the opengl wiki, people think to

1406
01:27:06,900 --> 01:27:09,800
be the right way to do it, and it is showing exactly what we were

1407
01:27:09,800 --> 01:27:12,300
expecting here in this case.

1408
01:27:12,700 --> 01:27:17,300
Now for creating our drawable,

1409
01:27:20,600 --> 01:27:21,300
Textures here.

1410
01:27:21,300 --> 01:27:25,600
I'm going to stop calling opengl allocate texture and start.

1411
01:27:27,200 --> 01:27:28,700
Putting this in line.

1412
01:27:32,000 --> 01:27:33,600
Because in this case,

1413
01:27:40,900 --> 01:27:42,300
I think we've got hoops.

1414
01:27:44,700 --> 01:27:48,400
in this case, I think we want to start treating this very differently

1415
01:27:48,500 --> 01:27:52,200
from our normal texture allocation case because since it's going to be

1416
01:27:52,500 --> 01:27:55,800
a 2d multi sample buffer, it's going to be very different

1417
01:27:58,800 --> 01:28:03,000
in this case here, where we're taking the multiple samples, I feel

1418
01:28:03,000 --> 01:28:03,500
like

1419
01:28:09,500 --> 01:28:10,200
That's interesting.

1420
01:28:20,700 --> 01:28:21,800
Why are we?

1421
01:28:31,300 --> 01:28:34,700
Why are we not passing srgb there?

1422
01:29:00,000 --> 01:29:02,000
I don't like the fact that my head is in the way I'm going to switch

1423
01:29:02,000 --> 01:29:02,800
over to the side.

1424
01:29:10,200 --> 01:29:10,600
like,

1425
01:29:19,800 --> 01:29:24,000
We've got this opengl default, internal texture format.

1426
01:29:32,700 --> 01:29:33,900
Oh, okay.

1427
01:29:35,400 --> 01:29:35,800
Whoo.

1428
01:29:35,900 --> 01:29:38,200
Alright I got nervous there for a second.

1429
01:29:40,200 --> 01:29:43,200
I looked at this and thought that, that was that I forgot that there's

1430
01:29:43,200 --> 01:29:47,100
the internal texture format and the submission texture format, which

1431
01:29:47,100 --> 01:29:47,800
are different.

1432
01:29:49,000 --> 01:29:49,800
So that's fine.

1433
01:29:50,300 --> 01:29:58,000
Okay, sorry, I got got real nervous there so I believe we can just

1434
01:29:58,000 --> 01:29:59,700
pass srgb.

1435
01:30:00,000 --> 01:30:05,000
Multi sample format and then it will still do the linear to srgb

1436
01:30:05,000 --> 01:30:06,000
conversion for us.

1437
01:30:06,600 --> 01:30:08,300
We know what the width and height are

1438
01:30:11,200 --> 01:30:12,900
And we don't want regular sampling.

1439
01:30:13,100 --> 01:30:15,900
We want irregular sampling because that'll give us less artifacts.

1440
01:30:15,900 --> 01:30:17,100
Like I was talking about before.

1441
01:30:17,900 --> 01:30:24,100
So I believe here we want a GL false value and for number of samples,

1442
01:30:24,200 --> 01:30:28,200
I guess for at the moment, we'll go hog-wild and say 16.

1443
01:30:28,200 --> 01:30:34,300
But I don't know whether this card support 16 multi sampling to be

1444
01:30:34,300 --> 01:30:34,800
honest.

1445
01:30:34,900 --> 01:30:39,600
In fact, I guess we should probably call a GL get to determine

1446
01:30:40,800 --> 01:30:46,600
How many samples of can actually do, or what it's, what its best

1447
01:30:47,300 --> 01:30:48,300
sample type is.

1448
01:30:56,000 --> 01:31:00,100
Because I'm assuming that there is a Max sample.

1449
01:31:09,300 --> 01:31:09,800
Here we go.

1450
01:31:12,300 --> 01:31:13,800
So let's see.

1451
01:31:13,800 --> 01:31:16,600
Do do do do.

1452
01:31:22,800 --> 01:31:25,700
So I believe it would be g l samples.

1453
01:31:45,700 --> 01:31:47,800
I don't know if that's actually true or not, but I'm going to go ahead

1454
01:31:47,800 --> 01:31:50,500
and try to get g l samples and just see what it is.

1455
01:31:50,600 --> 01:31:51,900
So we can have an idea.

1456
01:32:03,300 --> 01:32:04,600
I believe this is an integer.

1457
01:32:08,900 --> 01:32:11,700
And I don't know that we've ever really done a Jill get before.

1458
01:32:12,700 --> 01:32:13,200
Have we?

1459
01:32:17,200 --> 01:32:18,800
Yeah, we've never really done one before.

1460
01:32:19,200 --> 01:32:20,300
You've never checked a cap.

1461
01:32:21,400 --> 01:32:23,800
So opengl has a bunch of these

1462
01:32:30,900 --> 01:32:31,800
Jill, get calls.

1463
01:32:33,200 --> 01:32:35,500
And so you can kind of see how they work here, right?

1464
01:32:35,800 --> 01:32:38,200
You say what kind of a thing you're trying to retrieve?

1465
01:32:38,200 --> 01:32:40,800
So in this case we're trying to get an integer, right?

1466
01:32:43,400 --> 01:32:45,700
And the V is just because it's taking a pointer.

1467
01:32:45,700 --> 01:32:48,700
So it might be numerous it depending on which one you pass or you

1468
01:32:48,700 --> 01:32:49,800
might get back more than one.

1469
01:32:51,400 --> 01:32:55,700
So I'm going to go ahead and say, you know, Max sample count and I'm

1470
01:32:55,700 --> 01:32:57,100
going to see what it tells me.

1471
01:32:58,100 --> 01:32:58,600
Right.

1472
01:33:03,000 --> 01:33:03,900
Get rid of all this.

1473
01:33:05,000 --> 01:33:08,100
And so I'm going to say that we'll just ask for the mass sample count

1474
01:33:08,100 --> 01:33:13,400
at the moment, but maybe not if it's, we might clamp it.

1475
01:33:13,700 --> 01:33:17,800
So I might be like, if Mac sample count is greater than 16, max ammo,

1476
01:33:17,800 --> 01:33:20,600
count equal 16, because it don't want to go above that, certainly,

1477
01:33:27,600 --> 01:33:30,000
And so let's try to get this path working with a step through it.

1478
01:33:31,300 --> 01:33:34,400
So, in this case, we also need the GL texture, 2D mother sample,

1479
01:33:34,400 --> 01:33:36,600
Define everything else.

1480
01:33:36,600 --> 01:33:38,300
I think we're good with.

1481
01:33:38,500 --> 01:33:40,900
So in this case we've got our texture handle coming back here.

1482
01:33:42,900 --> 01:33:44,400
Expand this detector handle.

1483
01:33:48,200 --> 01:33:53,600
Like so and we're using get with draw region.

1484
01:33:53,600 --> 01:33:55,900
Get height for our region as the size of these.

1485
01:33:56,300 --> 01:33:57,700
So I'll paste those in here.

1486
01:34:05,900 --> 01:34:06,400
There we go.

1487
01:34:07,200 --> 01:34:12,300
And so now all we need is to get the actual API stuff that we need for

1488
01:34:12,300 --> 01:34:15,100
multi sample and put it in here, right?

1489
01:34:16,200 --> 01:34:21,200
And to do that, we're going to have to get the specification for

1490
01:34:21,200 --> 01:34:21,500
these.

1491
01:34:21,500 --> 01:34:26,100
And again, usually what I do for that is just grab them from the ARB.

1492
01:34:26,300 --> 01:34:27,000
No oops.

1493
01:34:32,300 --> 01:34:33,200
I think I closed.

1494
01:34:34,500 --> 01:34:34,800
Yeah.

1495
01:34:36,400 --> 01:34:39,200
So I usually just go to the core our header file.

1496
01:34:41,900 --> 01:34:43,000
and we need,

1497
01:34:52,300 --> 01:34:53,400
Multi sample.

1498
01:34:54,600 --> 01:34:57,100
Texture, what was it called?

1499
01:34:58,600 --> 01:34:59,900
Texture 2D multi sample.

1500
01:35:06,400 --> 01:35:08,800
So, we really just need only this one.

1501
01:35:13,200 --> 01:35:14,700
and then we do need the

1502
01:35:17,900 --> 01:35:18,900
function as well.

1503
01:35:21,900 --> 01:35:22,300
Oops.

1504
01:35:33,000 --> 01:35:36,500
So here is GL text image, Trudy multi sample.

1505
01:35:38,400 --> 01:35:44,400
If we take a look at that sausage gentlemen, we then need someplace to

1506
01:35:44,400 --> 01:35:44,800
oops.

1507
01:35:48,200 --> 01:35:49,500
Some place to put that.

1508
01:35:52,700 --> 01:35:57,900
What usually goes in here, although it looks like, do we not?

1509
01:36:06,600 --> 01:36:09,600
Do we not have any opengl extension functions yet?

1510
01:36:09,600 --> 01:36:10,600
Besides wiggle?

1511
01:36:14,000 --> 01:36:14,900
Is that really true?

1512
01:36:24,400 --> 01:36:24,900
Huh.

1513
01:36:27,800 --> 01:36:28,500
We were pretty.

1514
01:36:28,500 --> 01:36:29,900
We were pretty clean.

1515
01:36:31,300 --> 01:36:32,100
That's interesting.

1516
01:36:39,200 --> 01:36:40,100
But here's our wiggle.

1517
01:36:40,400 --> 01:36:41,700
Get proc address calls.

1518
01:36:43,300 --> 01:36:44,700
And so yeah, I guess that was all.

1519
01:36:44,700 --> 01:36:45,600
We actually did.

1520
01:36:47,000 --> 01:36:47,200
Hm.

1521
01:36:49,700 --> 01:36:50,300
Interesting.

1522
01:36:51,900 --> 01:36:55,900
Well, either way, I'm going to start making some here that are in the

1523
01:36:55,900 --> 01:36:59,900
opengl area because in general, we're going to want them on all the

1524
01:36:59,900 --> 01:37:02,100
platforms, not just windows.

1525
01:37:02,600 --> 01:37:06,300
So, the typedef for these guys, which, you know, is the same kind that

1526
01:37:06,300 --> 01:37:07,400
kind of comes out here.

1527
01:37:08,300 --> 01:37:11,400
You can see, I'm going to go ahead and

1528
01:37:15,600 --> 01:37:17,300
Start a place for these to get to fine.

1529
01:37:21,100 --> 01:37:28,200
And we'll call this g l text image, 2D multi sample as the type and

1530
01:37:28,200 --> 01:37:31,100
then we'll put in, you know, all of these things as they are.

1531
01:37:31,900 --> 01:37:36,400
And then down here, we'll just say, okay, we've got one of those.

1532
01:37:36,900 --> 01:37:37,900
That is this function.

1533
01:37:44,200 --> 01:37:44,800
Variable.

1534
01:37:46,300 --> 01:37:47,400
And now we can call it.

1535
01:37:47,400 --> 01:37:52,500
Of course, it'll be set to zero at the moment, which obviously is not

1536
01:37:52,500 --> 01:37:54,000
the best thing to have it be set to.

1537
01:37:54,600 --> 01:37:56,400
So we need to enter win32.

1538
01:37:56,400 --> 01:37:59,100
We need to go ahead and grab the multi sample.

1539
01:38:17,200 --> 01:38:18,600
so, I think

1540
01:38:24,700 --> 01:38:27,100
That should get us initialized so that we can actually create the

1541
01:38:27,100 --> 01:38:30,000
buffer that were that we need.

1542
01:38:30,900 --> 01:38:34,100
But of course, we haven't actually done anything with that buffer yet

1543
01:38:34,100 --> 01:38:37,200
so we do have more work to do as you'll see in a second.

1544
01:38:38,500 --> 01:38:42,000
I'm going to go ahead and set a breakpoint in there though because I

1545
01:38:42,000 --> 01:38:44,200
would like to before we go any further.

1546
01:38:44,800 --> 01:38:47,400
Take a look at that sample value that's coming back and just see

1547
01:38:47,400 --> 01:38:49,300
whether or not that function works at all.

1548
01:38:50,000 --> 01:38:51,500
So I'm going to set a breakpoint here.

1549
01:38:55,200 --> 01:38:59,900
oh, and I guess we have to before I do that I'm going to have

1550
01:39:00,000 --> 01:39:00,700
Force it.

1551
01:39:00,700 --> 01:39:04,400
I thought we were still creating one extra sample, one extra layer but

1552
01:39:04,400 --> 01:39:07,500
I guess because there's nothing because we got rid of that stacking

1553
01:39:07,500 --> 01:39:08,000
stuff.

1554
01:39:08,600 --> 01:39:11,300
There's nothing happening there at the moment.

1555
01:39:12,100 --> 01:39:12,900
All right, so

1556
01:39:15,100 --> 01:39:17,100
if that's the case that I'm going to have to force it.

1557
01:39:17,100 --> 01:39:20,000
I want this to happen with the max render Target stuff.

1558
01:39:20,000 --> 01:39:24,100
I want that to happen for the render targets.

1559
01:39:24,300 --> 01:39:28,600
I need to create, even the first one has to create a render Target,

1560
01:39:28,600 --> 01:39:29,200
right?

1561
01:39:30,000 --> 01:39:34,300
Which means that use render targets kind of has to work if that makes

1562
01:39:34,300 --> 01:39:34,800
sense.

1563
01:39:36,200 --> 01:39:38,400
So we probably want to do here that says

1564
01:39:41,500 --> 01:39:45,100
Error dialog in platform layer.

1565
01:39:46,400 --> 01:39:47,900
If use render targets.

1566
01:39:49,100 --> 01:39:50,200
Can't happen.

1567
01:39:54,200 --> 01:39:55,600
Because we're going to need that now.

1568
01:39:55,600 --> 01:39:59,100
Because if our entire pipeline is going to be based on Multi sample,

1569
01:39:59,100 --> 01:40:02,000
we need to be able to create a render Target at least one render

1570
01:40:02,000 --> 01:40:02,300
Target.

1571
01:40:02,300 --> 01:40:05,000
That's the multi sample render Target, right?

1572
01:40:06,300 --> 01:40:10,200
I suppose, I could try to get a multi sample.

1573
01:40:10,700 --> 01:40:17,100
Render Target from Windows as the default one, but I'm pretty sure

1574
01:40:17,100 --> 01:40:19,900
there's no such thing as Hardware that supports multi sample

1575
01:40:19,900 --> 01:40:21,100
anti-aliasing.

1576
01:40:24,100 --> 01:40:28,400
This method that doesn't also support render to texture.

1577
01:40:30,500 --> 01:40:31,900
I could be wrong about that though.

1578
01:40:34,900 --> 01:40:39,500
So anyway, if we want to do is render targets, we use, we can just say

1579
01:40:39,500 --> 01:40:43,700
that has to happen when we use max render Target index.

1580
01:40:45,500 --> 01:40:48,900
We can now make that sort of forcibly happen.

1581
01:40:48,900 --> 01:40:51,500
Although I think, in this case, we don't really need multiple render

1582
01:40:51,500 --> 01:40:53,300
targets at the moment anymore.

1583
01:40:53,300 --> 01:41:00,200
Anyway, but where is global frame before count?

1584
01:41:06,200 --> 01:41:10,000
So, our Global frame of account situation, now needs to allocate the

1585
01:41:10,000 --> 01:41:11,400
first frame buffer.

1586
01:41:11,400 --> 01:41:15,700
Like it would allocate any of the other frame buffers as well, right?

1587
01:41:16,700 --> 01:41:20,200
And so, basically, all of our frame buffers would be the same in this

1588
01:41:20,200 --> 01:41:22,500
case and Global frame.

1589
01:41:22,500 --> 01:41:24,600
Buffer count would start off at zero.

1590
01:41:25,200 --> 01:41:31,100
When we find these frame buffers as we sort of go through them, we

1591
01:41:31,100 --> 01:41:35,800
would no longer do sort of a differing set of

1592
01:41:36,000 --> 01:41:38,300
We would always essentially do.

1593
01:41:42,600 --> 01:41:43,900
That in all cases.

1594
01:41:44,200 --> 01:41:48,300
And then only when we actually, you know, sort of draw the final frame

1595
01:41:48,300 --> 01:41:48,800
buffer.

1596
01:41:49,300 --> 01:41:56,800
Would we call the final GL viewport to the drum in drum acts, right?

1597
01:41:58,000 --> 01:41:59,500
So basically at the end of this,

1598
01:42:00,200 --> 01:42:05,700
What we would have to do is this is where we would sort of do our, our

1599
01:42:05,700 --> 01:42:07,500
final draw down.

1600
01:42:07,500 --> 01:42:11,100
And this is where we would do our GL, put frame buffer call.

1601
01:42:21,000 --> 01:42:23,900
All right, so assuming that we're going to do that now, we should get

1602
01:42:23,900 --> 01:42:27,900
forced into here because even just having it a zero with frame buffer

1603
01:42:28,400 --> 01:42:34,900
where we have one frame buffer is is sufficient to trigger it in here

1604
01:42:34,900 --> 01:42:42,700
where I go get integer vgl samples so oh man does this card not have

1605
01:42:42,700 --> 01:42:44,400
multi sampling that can't be true.

1606
01:42:49,300 --> 01:42:49,900
Hmm.

1607
01:42:55,600 --> 01:43:00,500
this might not be the maximum sample, count, this might just be how

1608
01:43:00,500 --> 01:43:02,700
many are currently

1609
01:43:06,100 --> 01:43:08,200
Currently bound, if that makes sense.

1610
01:43:08,900 --> 01:43:11,100
Let me I'm actually interested to know.

1611
01:43:18,400 --> 01:43:20,000
if I move this over here,

1612
01:43:22,500 --> 01:43:23,500
does this do anything?

1613
01:43:25,100 --> 01:43:27,200
Although, that's not going to actually bind it.

1614
01:43:43,300 --> 01:43:45,300
So let's see here.

1615
01:43:45,700 --> 01:43:50,000
First trans exception, status equals frame buffer in complete so we

1616
01:43:50,000 --> 01:43:52,100
don't get a free complete frame buffer.

1617
01:43:52,100 --> 01:43:55,100
After we have bound this we did get a texture back but that's going to

1618
01:43:55,100 --> 01:43:55,500
happen.

1619
01:43:55,500 --> 01:43:58,300
Regardless when we called this, we don't know whether this actually

1620
01:43:58,300 --> 01:43:59,200
worked or not, right?

1621
01:43:59,200 --> 01:44:01,700
This might have worked or it might not have worked.

1622
01:44:15,600 --> 01:44:16,800
so, when we

1623
01:44:21,700 --> 01:44:24,800
when we do Global frame, buffer handles,

1624
01:44:30,200 --> 01:44:32,200
We presumably got one and we did.

1625
01:44:32,900 --> 01:44:36,100
So all of this looks like it's working properly but the validation

1626
01:44:36,100 --> 01:44:37,800
step does not actually work.

1627
01:44:38,200 --> 01:44:38,900
Right?

1628
01:44:39,800 --> 01:44:43,800
And the validation step, not actually working is probably because I

1629
01:44:43,800 --> 01:44:45,900
tried to do the multi sample.

1630
01:44:45,900 --> 01:44:46,400
Bind.

1631
01:44:46,400 --> 01:44:50,800
Oh well, not necessarily the GL frame buffer called cure.

1632
01:44:51,200 --> 01:44:55,800
We forgot to update it with 2D multi sample and that's required as

1633
01:44:55,800 --> 01:44:56,200
well.

1634
01:44:58,600 --> 01:44:59,800
So, let's see how we do here.

1635
01:45:02,900 --> 01:45:03,800
Not so good.

1636
01:45:06,200 --> 01:45:08,000
Let's see what that status actually is.

1637
01:45:10,600 --> 01:45:11,000
No.

1638
01:45:12,000 --> 01:45:13,300
360 55.

1639
01:45:17,400 --> 01:45:19,500
Well, looks like we're going to need and hacks, my friends.

1640
01:45:24,500 --> 01:45:25,800
Eight cd7.

1641
01:45:31,900 --> 01:45:34,300
Incomplete missing attachment.

1642
01:45:35,100 --> 01:45:35,700
Hmm.

1643
01:45:36,500 --> 01:45:39,900
So I don't know if that's actually true.

1644
01:45:41,100 --> 01:45:41,500
Oops.

1645
01:45:45,800 --> 01:45:48,900
Because we shouldn't need another attachment than that should we?

1646
01:45:48,900 --> 01:45:53,900
But if our, if we can't actually create a 16 x multi sample, that

1647
01:45:53,900 --> 01:45:56,700
might be sufficient to have that happen, right?

1648
01:45:59,200 --> 01:46:00,000
Let's double-check

1649
01:46:03,700 --> 01:46:04,500
that there's nothing else.

1650
01:46:04,500 --> 01:46:06,300
Particularly odd going on here.

1651
01:46:07,300 --> 01:46:10,000
So you can see here is the G Elgin texture call.

1652
01:46:10,000 --> 01:46:13,900
Here's the bind texture call and the text 2D multi-sample, right?

1653
01:46:15,500 --> 01:46:17,800
And that's exactly what we're doing here.

1654
01:46:17,800 --> 01:46:20,300
I don't think we're doing anything weird there.

1655
01:46:20,300 --> 01:46:24,300
At least hopefully not with the generating, the frame buffers.

1656
01:46:27,000 --> 01:46:29,600
That already got done up here, right?

1657
01:46:34,400 --> 01:46:36,900
And so we're just going through and specifying them and we're

1658
01:46:36,900 --> 01:46:41,100
specifying them pretty much exactly the same way that it's find them

1659
01:46:41,100 --> 01:46:41,500
here.

1660
01:46:41,500 --> 01:46:44,000
So I don't expect there's anything particularly worried about that.

1661
01:46:44,400 --> 01:46:49,500
So the only question is really whether or not there's no way to create

1662
01:46:49,500 --> 01:46:51,900
multi sample on this particular Beast.

1663
01:46:51,900 --> 01:46:57,300
I'm not sure I suppose we can check to see if it supports multi

1664
01:46:57,300 --> 01:47:02,600
sampling at all, but it pretty much we know it has to because if it

1665
01:47:02,600 --> 01:47:04,100
didn't support multi sample,

1666
01:47:04,500 --> 01:47:10,600
Then she'll text image 2D multi sample would not actually exist,

1667
01:47:11,000 --> 01:47:11,500
right?

1668
01:47:12,000 --> 01:47:16,500
Presumably wouldn't let us call GL text image, 2D multi sample on a

1669
01:47:16,500 --> 01:47:19,800
card that didn't support any multi sampling.

1670
01:47:19,800 --> 01:47:22,400
I wouldn't think it wouldn't have found that

1671
01:47:24,100 --> 01:47:25,900
function, right?

1672
01:47:26,500 --> 01:47:29,900
And if we take a look at our g l extension string, I'm just imagining.

1673
01:47:29,900 --> 01:47:30,700
We could also

1674
01:47:33,400 --> 01:47:34,900
verify that, that was there.

1675
01:47:42,900 --> 01:47:46,000
so if I go ahead and cut and paste this over and scratch buffer,

1676
01:47:52,100 --> 01:47:53,700
So, GL are multi.

1677
01:47:53,700 --> 01:47:56,600
Sample is in theory supported.

1678
01:47:58,200 --> 01:47:59,700
so, I feel like

1679
01:48:03,300 --> 01:48:04,700
Nope, that's not what I wanted.

1680
01:48:07,000 --> 01:48:08,800
I feel like this should be okay.

1681
01:48:10,000 --> 01:48:10,600
Right.

1682
01:48:52,500 --> 01:48:55,000
Don't see the actual extension here, unfortunately.

1683
01:49:10,500 --> 01:49:14,400
G l, Max samples, that looks what I was looking for.

1684
01:49:16,000 --> 01:49:17,000
Do we have g l?

1685
01:49:17,000 --> 01:49:18,100
Max samples.

1686
01:49:18,100 --> 01:49:21,300
Is that in core ARB.

1687
01:49:28,100 --> 01:49:31,000
GM Max, that's what I wanted.

1688
01:49:31,700 --> 01:49:36,700
So it looks like I just queried the wrong value but this doesn't help

1689
01:49:36,700 --> 01:49:38,900
us determine why we were having the bug.

1690
01:49:39,100 --> 01:49:41,600
I just really wanted to know what that value actually was because I

1691
01:49:41,600 --> 01:49:42,400
have no idea on this car.

1692
01:49:42,400 --> 01:49:43,300
It's a really old card.

1693
01:49:43,300 --> 01:49:45,100
I have no idea what it can and can't do.

1694
01:49:45,200 --> 01:49:46,200
I'm totally

1695
01:49:49,200 --> 01:49:50,200
Totally no idea.

1696
01:49:51,400 --> 01:49:54,200
So, let's go ahead and put this back in.

1697
01:49:55,900 --> 01:49:57,200
Max sample count.

1698
01:50:00,100 --> 01:50:03,600
and it's saying that it has to be Max samples - 1

1699
01:50:12,700 --> 01:50:16,400
is that implying that I need to bind a different texture for each.

1700
01:50:18,900 --> 01:50:20,000
Sampler, something.

1701
01:50:21,100 --> 01:50:25,100
Because that's that can't be true but it says sample specifies.

1702
01:50:25,100 --> 01:50:27,600
The number of samples in the image and must be in the range.

1703
01:50:27,600 --> 01:50:29,100
0 2, gee, L Max samples.

1704
01:50:29,400 --> 01:50:33,100
So that sounds less like a sample count and more like a Max sample

1705
01:50:33,100 --> 01:50:34,700
number, right?

1706
01:50:34,700 --> 01:50:38,700
Because if it was a count 0 wouldn't make any sense.

1707
01:50:38,900 --> 01:50:42,300
Like, you can't have a buffer that has no samples in it, right?

1708
01:50:42,600 --> 01:50:43,900
So that's a bit weird.

1709
01:50:47,300 --> 01:50:49,600
I don't really know what to make of that.

1710
01:50:51,000 --> 01:50:55,400
But we'll take them at their word for now since we're almost out of

1711
01:50:55,400 --> 01:50:56,000
time anyway.

1712
01:50:56,000 --> 01:50:59,600
And will maybe take a look at this in a little more detail later.

1713
01:51:04,100 --> 01:51:06,300
So I'm going to go ahead and take a look and see what happens at the

1714
01:51:06,300 --> 01:51:07,400
max sample count.

1715
01:51:10,600 --> 01:51:13,100
Query here and see if we can't actually get a value now.

1716
01:51:17,700 --> 01:51:18,800
Let's go just back out of X.

1717
01:51:19,500 --> 01:51:23,500
So here it seems that we'd have 8X multi sampling, right?

1718
01:51:24,400 --> 01:51:26,300
So our sample count is going to be 8.

1719
01:51:26,300 --> 01:51:30,300
In this case, we're going to pass seven to their, I guess is what

1720
01:51:30,300 --> 01:51:31,200
we're going to get.

1721
01:51:31,300 --> 01:51:33,100
I don't know if that'll actually do anything.

1722
01:51:33,100 --> 01:51:35,400
Like I said, we have no way of really knowing if that worked.

1723
01:51:35,800 --> 01:51:39,300
And then here we get a status that we don't have the, we have

1724
01:51:39,300 --> 01:51:40,500
insufficient attachments.

1725
01:51:41,200 --> 01:51:42,300
But again, I'm not sure why?

1726
01:51:42,300 --> 01:51:44,100
Because we created a multi sample,

1727
01:51:46,000 --> 01:51:47,400
Buffer, just like before.

1728
01:51:49,800 --> 01:51:53,400
And I don't see anything particularly unusual about that, right?

1729
01:51:54,400 --> 01:51:56,500
That all looks pretty straightforward.

1730
01:51:59,000 --> 01:52:01,200
And it is in the color attachment and there shouldn't be any

1731
01:52:01,200 --> 01:52:02,700
requirement for us to put.

1732
01:52:02,700 --> 01:52:06,600
We're going to have to put a depth texture in here because we do use

1733
01:52:06,600 --> 01:52:10,100
the depth buffer now, but there shouldn't have been any requirement

1734
01:52:10,100 --> 01:52:14,600
for us to do that in order just to get a complete frame buffer, right?

1735
01:52:14,600 --> 01:52:16,900
That is not something we should have had to do.

1736
01:52:25,300 --> 01:52:27,400
So, I'm not really sure what the deal is with that.

1737
01:52:29,600 --> 01:52:31,000
So, a little bit of stumper there.

1738
01:52:35,900 --> 01:52:37,500
But I guess it's time to go to the Q&A anyway.

1739
01:52:38,400 --> 01:52:41,100
So I'm going to have to leave it there and we will have to

1740
01:52:43,000 --> 01:52:45,500
we'll have to pick it up next week.

1741
01:52:46,700 --> 01:52:47,500
What?

1742
01:52:51,000 --> 01:52:53,300
What would happen if I pass zero here?

1743
01:53:01,200 --> 01:53:07,900
so any any call to jail, text image, 2D multi, sample is a bug as far

1744
01:53:07,900 --> 01:53:08,900
as its concerned

1745
01:53:11,300 --> 01:53:13,000
Can I replace that?

1746
01:53:17,600 --> 01:53:19,200
With a regular text image call.

1747
01:53:24,400 --> 01:53:26,500
And get something reasonable.

1748
01:53:40,000 --> 01:53:40,400
Oops.

1749
01:53:48,900 --> 01:53:58,800
So it's only if I call GL texture, 2D multi sample that it is grumpy

1750
01:53:58,900 --> 01:53:59,800
about.

1751
01:54:05,600 --> 01:54:07,600
I guess here's a question for you.

1752
01:54:08,000 --> 01:54:11,000
And again this is just not remembering very well.

1753
01:54:11,400 --> 01:54:17,000
I wonder if what we have to do here is when we actually bind the

1754
01:54:17,000 --> 01:54:21,900
texture, we have to bind the texture to the multi sample slot.

1755
01:54:25,600 --> 01:54:26,100
Right.

1756
01:54:34,600 --> 01:54:35,100
Nope.

1757
01:54:40,000 --> 01:54:40,900
Not so much.

1758
01:54:47,500 --> 01:54:50,000
Although I am curious about that because it would seem like you should

1759
01:54:50,000 --> 01:54:50,500
do that.

1760
01:54:50,500 --> 01:54:53,100
Did they do that in the example?

1761
01:54:53,200 --> 01:54:53,800
Yeah, they do.

1762
01:54:53,900 --> 01:54:55,000
So I'm going to leave it that way.

1763
01:54:58,800 --> 01:55:02,300
So if I do slot and I'm just going to abstract slot away to hear,

1764
01:55:02,500 --> 01:55:03,000
right?

1765
01:55:20,000 --> 01:55:23,000
so, if I essentially make this code path work in both directions,

1766
01:55:36,200 --> 01:55:38,100
Then that would allow me in theory.

1767
01:55:38,100 --> 01:55:42,400
Anyway, to switch between the two past pretty easily, right?

1768
01:55:42,600 --> 01:55:44,500
So I can do GL texture.

1769
01:55:44,500 --> 01:55:45,300
2D

1770
01:55:55,500 --> 01:55:59,700
Or multi sample now, and I just want to make sure that I can actually

1771
01:55:59,700 --> 01:56:01,000
do that, right?

1772
01:56:05,800 --> 01:56:11,100
So there's that path which works properly and here's the multi sample

1773
01:56:11,100 --> 01:56:13,100
path, which does not work properly.

1774
01:56:17,100 --> 01:56:21,500
and we're not sure what it's actually grumpy about in this particular

1775
01:56:21,500 --> 01:56:22,400
case, but

1776
01:56:23,700 --> 01:56:28,000
at least now we've got both path so we can easily check them against

1777
01:56:28,000 --> 01:56:28,600
each other.

1778
01:56:29,100 --> 01:56:33,200
So I feel like this is the appropriate call structure.

1779
01:56:33,200 --> 01:56:36,300
It looks like now that I'm binding to the correct place by and

1780
01:56:36,300 --> 01:56:42,800
textures Jen and bind, I don't assume you need because again they

1781
01:56:42,800 --> 01:56:46,000
don't seem to suggest on the opengl wiki and current US anyway.

1782
01:56:47,400 --> 01:56:49,800
They don't seem to suggest that there is anything in particular.

1783
01:56:49,800 --> 01:56:52,600
You would have to do to generate one of them because it's just a

1784
01:56:52,600 --> 01:56:53,200
regular texture.

1785
01:56:53,500 --> 01:56:54,200
Like everything else.

1786
01:56:54,400 --> 01:56:57,800
You do bind it differently, right?

1787
01:57:01,300 --> 01:57:06,500
But everything else is pretty much the same and yeah, I don't, I don't

1788
01:57:06,500 --> 01:57:07,500
really see any other.

1789
01:57:09,200 --> 01:57:11,300
I see any other fussiness there.

1790
01:57:11,700 --> 01:57:15,100
It looks pretty straightforward to me, unless there's something wrong

1791
01:57:15,100 --> 01:57:17,700
with calling these texts parameter things.

1792
01:57:18,000 --> 01:57:19,700
One thing I could ask as well.

1793
01:57:19,900 --> 01:57:20,800
It's, I could do a GL.

1794
01:57:20,800 --> 01:57:21,500
Get error.

1795
01:57:22,400 --> 01:57:24,100
Just to verify what?

1796
01:57:25,900 --> 01:57:27,000
Was actually happening here.

1797
01:57:27,000 --> 01:57:28,800
Jill get her will tell me whether there's an error.

1798
01:57:28,800 --> 01:57:32,600
Not so I can do G, will get error.

1799
01:57:34,000 --> 01:57:35,700
In multiple places like this.

1800
01:57:44,200 --> 01:57:48,200
And then what I can do is just say like, hey, why don't you tell me

1801
01:57:48,200 --> 01:57:53,300
when the first time is that you saw the error if there was one at all

1802
01:57:54,800 --> 01:57:55,700
and we'll go from there.

1803
01:57:57,300 --> 01:57:58,500
What did you say?

1804
01:57:59,900 --> 01:58:00,200
Oh,

1805
01:58:05,700 --> 01:58:07,000
Just to see if there are any.

1806
01:58:07,900 --> 01:58:10,600
And so this is kind of what I would expect.

1807
01:58:11,500 --> 01:58:15,300
You can see that we don't have an error so I can actually bracket the

1808
01:58:15,300 --> 01:58:18,700
error exactly and say because I was guessing that the problem is

1809
01:58:18,700 --> 01:58:21,200
Margie, I'll text image to the multi sample fails

1810
01:58:23,900 --> 01:58:25,200
So you can see right here.

1811
01:58:25,400 --> 01:58:28,700
There is no, opengl are at this point, but when we get to hear there

1812
01:58:28,700 --> 01:58:33,300
is so we know that this call failed, right rgl text image, shooting

1813
01:58:33,300 --> 01:58:34,800
multifamily sample failed.

1814
01:58:35,700 --> 01:58:37,900
Now, we believe we've got it, okay?

1815
01:58:37,900 --> 01:58:40,200
Because we're using a slot that's Jill, texture, you much

1816
01:58:40,200 --> 01:58:45,800
multi-sample, we're passing what we believe to be reasonable values,

1817
01:58:46,300 --> 01:58:47,900
but hey, we don't really know.

1818
01:58:49,300 --> 01:58:53,600
And, and so, you know, it's, I guess it's a potentially open.

1819
01:58:54,000 --> 01:58:56,100
The default internal texture format.

1820
01:58:58,900 --> 01:59:02,300
You know, we could try not asking for srgb.

1821
01:59:02,300 --> 01:59:10,000
If somehow srgb is messing it up we can use exactly the syntax used in

1822
01:59:10,000 --> 01:59:15,900
here rather than using srgb and I don't know if that's, I wouldn't

1823
01:59:15,900 --> 01:59:18,500
assume that that would have anything to do with it but you never know.

1824
01:59:19,600 --> 01:59:20,000
Oops.

1825
01:59:22,500 --> 01:59:23,400
What did I just do?

1826
01:59:28,500 --> 01:59:31,600
First chance exception access violation.

1827
01:59:36,200 --> 01:59:37,800
What is the access violation?

1828
01:59:45,600 --> 01:59:47,700
Opengl render commands.

1829
01:59:50,900 --> 01:59:56,200
So we're calling into this pointer and it's got an access violation in

1830
01:59:56,700 --> 01:59:58,100
ati's driver.

1831
01:59:59,000 --> 01:59:59,600
How is that?

1832
02:00:00,000 --> 02:00:02,000
We're not calling anything.

1833
02:00:03,100 --> 02:00:04,700
We're not passing anything.

1834
02:00:06,800 --> 02:00:10,200
Right, I mean, all we're doing is calling text image, 2D multi sample.

1835
02:00:19,500 --> 02:00:20,000
Wow.

1836
02:00:22,100 --> 02:00:30,700
so basically, we can crash amd's driver by specifying a sample count

1837
02:00:30,700 --> 02:00:33,300
within the parameters that it gave us

1838
02:00:37,800 --> 02:00:38,600
Weird.

1839
02:00:41,200 --> 02:00:44,200
So if I specify anything other than 0 here,

1840
02:00:46,400 --> 02:00:48,100
nope, I can specify one.

1841
02:00:48,700 --> 02:00:50,000
How about two?

1842
02:00:52,400 --> 02:00:52,800
Two's.

1843
02:00:52,800 --> 02:00:56,600
Okay, but three is not on the table, my friends.

1844
02:01:06,700 --> 02:01:08,400
Three is just not on the table.

1845
02:01:08,900 --> 02:01:12,700
So the instant we call GL text image multi sample with three.

1846
02:01:12,800 --> 02:01:14,500
We are we are toasted.

1847
02:01:14,700 --> 02:01:19,300
We are we are access violating, presumably, anything above 3.

1848
02:01:19,400 --> 02:01:20,300
Also fails.

1849
02:01:23,900 --> 02:01:26,400
No, so for is okay.

1850
02:01:32,700 --> 02:01:34,000
Five is not.

1851
02:01:34,400 --> 02:01:38,000
So, let's see if Max sample count without the minus one, which is what

1852
02:01:38,000 --> 02:01:40,700
I would have expected to pass in the first place is actually, okay,

1853
02:01:40,700 --> 02:01:41,300
and it is.

1854
02:01:41,800 --> 02:01:45,300
So I think those docks are just probably a little misleading.

1855
02:01:45,800 --> 02:01:50,100
It looks like because they said it had to be max ammo, count minus 1.

1856
02:01:50,100 --> 02:01:54,900
It looks like it actually has to be Max sample count, unless a tti's

1857
02:01:54,900 --> 02:01:57,300
driver is busted, which could also be true.

1858
02:01:57,300 --> 02:02:02,300
I suppose, I'm guessing that that means that specify

1859
02:02:02,500 --> 02:02:08,800
Srgb as the internal format is not acceptable because it seems like

1860
02:02:08,800 --> 02:02:11,400
trying to specify that is just not working.

1861
02:02:13,100 --> 02:02:19,600
I don't know what that means for us because that means we can't have

1862
02:02:21,500 --> 02:02:23,800
an srgb back buffer.

1863
02:02:24,600 --> 02:02:25,900
In this case,

1864
02:02:27,300 --> 02:02:29,800
I guess, I don't know.

1865
02:02:30,300 --> 02:02:33,700
But anyway, I guess I will go to the Q&A now because we're over time

1866
02:02:33,700 --> 02:02:37,000
already, at least now we know how this works.

1867
02:02:38,200 --> 02:02:43,300
I don't know what is going on with that driver though, because that

1868
02:02:43,300 --> 02:02:45,000
seems real weird.

1869
02:02:51,900 --> 02:02:55,200
That seems real weird to me, I don't know what you guys think about

1870
02:02:55,200 --> 02:02:58,800
that, but that does not.

1871
02:03:01,800 --> 02:03:06,000
That does not seem like proper behavior.

1872
02:03:10,200 --> 02:03:13,600
I mean far be it from me, I'm not an opengl expert or anything but

1873
02:03:13,600 --> 02:03:16,200
that just does not make a lot of sense.

1874
02:03:27,500 --> 02:03:32,200
Can you check if the status is changed after updating blind texture,

1875
02:03:34,100 --> 02:03:37,500
which bind texture, do you mean

1876
02:03:39,400 --> 02:03:40,000
This one.

1877
02:03:42,800 --> 02:03:44,100
Or do you mean the actual bind?

1878
02:03:44,300 --> 02:03:46,100
I'm not sure what you mean by the buying texture.

1879
02:03:53,700 --> 02:03:56,000
Did you remember to prefix your GL text image?

1880
02:03:56,000 --> 02:04:00,200
Multi sample to D with a win API AKA Center called prefix.

1881
02:04:00,200 --> 02:04:02,100
I thought I did but I might not have

1882
02:04:05,700 --> 02:04:06,600
Yeah, I did.

1883
02:04:13,200 --> 02:04:15,800
Also, I don't think that would do anything because this is x64.

1884
02:04:20,900 --> 02:04:23,000
I suppose this, in this case, I also

1885
02:04:35,900 --> 02:04:39,900
I also sort of have this problem of the renderer stuff here, kind of I

1886
02:04:39,900 --> 02:04:46,900
guess needs to be here because that win API is a platform specific

1887
02:04:47,000 --> 02:04:47,900
situation.

1888
02:04:47,900 --> 02:04:54,200
So I suppose I actually need that to be here.

1889
02:05:02,200 --> 02:05:05,800
Oh so now we've got so there's GL Vine frame buffer, where is that

1890
02:05:05,800 --> 02:05:07,800
getting getting gotten?

1891
02:05:13,700 --> 02:05:15,600
Win32 in it, opengl.

1892
02:05:21,500 --> 02:05:23,500
So, I put that other guy in the wrong place.

1893
02:05:26,100 --> 02:05:29,400
That's probably not that, that could be part of it.

1894
02:05:32,800 --> 02:05:34,700
I felt like something had to be up there.

1895
02:05:41,400 --> 02:05:44,500
So, that was wrong because we were calling that on the wrong.

1896
02:05:46,900 --> 02:05:48,400
We were calling that in the wrong way.

1897
02:05:48,900 --> 02:05:52,400
We were getting it before we had made the right context current, so I

1898
02:05:52,400 --> 02:05:55,700
don't know if that might have been part of our problem.

1899
02:05:56,600 --> 02:05:57,600
Let's take a look.

1900
02:06:04,700 --> 02:06:05,800
Can we do this now?

1901
02:06:07,300 --> 02:06:08,000
Probably not.

1902
02:06:08,000 --> 02:06:08,400
But

1903
02:06:10,700 --> 02:06:11,000
yeah.

1904
02:06:11,200 --> 02:06:13,900
Oh well thought it was worth a shot.

1905
02:06:37,000 --> 02:06:38,500
Mansfield out your text parameter.

1906
02:06:38,500 --> 02:06:41,600
I needs to use Jill texture slot between most of our yes, good.

1907
02:06:41,600 --> 02:06:42,800
That's a very good point.

1908
02:06:42,900 --> 02:06:46,200
I don't think that'll probably have anything to do with our current

1909
02:06:46,200 --> 02:06:47,000
bugs butt.

1910
02:06:48,600 --> 02:06:50,200
It would cause problems in the future.

1911
02:06:52,500 --> 02:06:54,900
These all always need to be slot.

1912
02:06:59,200 --> 02:07:00,700
That should work the same as it was.

1913
02:07:00,800 --> 02:07:01,100
Whoa.

1914
02:07:05,400 --> 02:07:09,100
Although it didn't there is an error there, I guess.

1915
02:07:09,200 --> 02:07:17,300
Oh, you know, you probably can't set the filtering.

1916
02:07:20,100 --> 02:07:20,900
To linear.

1917
02:07:22,700 --> 02:07:24,300
Multi sample buffers, I bet.

1918
02:07:28,300 --> 02:07:28,600
Hmm.

1919
02:07:31,000 --> 02:07:33,000
Or maybe you just can't set these at all.

1920
02:07:53,700 --> 02:07:56,300
Yes, it might be that you can't set these at all.

1921
02:07:58,500 --> 02:07:59,500
Now, there it is.

1922
02:08:02,600 --> 02:08:05,100
So I would paint a Target on a texture.

1923
02:08:05,100 --> 02:08:06,000
Jill, 2D.

1924
02:08:06,200 --> 02:08:07,000
All their sample.

1925
02:08:13,400 --> 02:08:15,700
So, I feel like we should have been able to specify those.

1926
02:08:18,200 --> 02:08:19,400
But we are not able to.

1927
02:08:23,900 --> 02:08:25,400
so, I'm not sure why that is

1928
02:08:36,700 --> 02:08:39,700
Is there a way to debug or have a visual example of the multi sampling

1929
02:08:39,700 --> 02:08:40,400
process?

1930
02:08:44,500 --> 02:08:49,900
I mean you can sort of hack one together that draws like different

1931
02:08:49,900 --> 02:08:53,500
parts of it to try and figure out what's going on but not not the way

1932
02:08:53,500 --> 02:08:54,700
you might want.

1933
02:08:55,400 --> 02:08:56,600
Not really no.

1934
02:08:58,600 --> 02:08:59,600
You kind of have to construct it.

1935
02:09:03,400 --> 02:09:07,000
Maybe we should use GL, debug message, call back and Jill and able GL,

1936
02:09:07,000 --> 02:09:08,300
debug, synchronous some time.

1937
02:09:08,300 --> 02:09:12,200
Then we can ascertain the Callback and were able to just see where the

1938
02:09:12,200 --> 02:09:13,300
GL are, is the debugger.

1939
02:09:13,500 --> 02:09:17,400
Yeah, I agree with that and probably we should now that we're going to

1940
02:09:17,400 --> 02:09:18,700
be doing more opengl stuff.

1941
02:09:18,700 --> 02:09:21,500
I didn't bother doing that before because we weren't doing much with

1942
02:09:21,500 --> 02:09:21,900
opengl.

1943
02:09:21,900 --> 02:09:23,400
But now that we are we probably should

1944
02:09:29,100 --> 02:09:32,100
Yeah, you can't set sample state so I guess even we just can't set

1945
02:09:32,100 --> 02:09:32,900
them at all.

1946
02:09:33,400 --> 02:09:38,300
So we probably can set the clamping, only or maybe we can't set the

1947
02:09:38,300 --> 02:09:39,000
clamping even.

1948
02:09:39,000 --> 02:09:41,400
So if we can't set any of those, then it doesn't even matter.

1949
02:09:45,100 --> 02:09:46,200
I suppose in that case,

1950
02:09:50,100 --> 02:09:51,400
But yeah, that's kind of weird.

1951
02:09:51,400 --> 02:09:53,300
I don't know why we can't set srgb there.

1952
02:09:53,300 --> 02:09:54,400
That's very strange.

1953
02:09:56,800 --> 02:09:57,300
But yeah.

1954
02:10:07,100 --> 02:10:07,900
Storing tortoise.

1955
02:10:07,900 --> 02:10:10,600
You mentioned in a previous episode that one of the reasons for moving

1956
02:10:10,600 --> 02:10:12,700
to 3D was due to Performance research with a sorting.

1957
02:10:12,700 --> 02:10:15,800
Would it have been a viable alternative to keep the Sorting results in

1958
02:10:15,800 --> 02:10:19,900
permanent storage and then each frame only re sort the entities that

1959
02:10:19,900 --> 02:10:20,700
have moved.

1960
02:10:20,700 --> 02:10:23,100
Just considering that many entities like trees and to Russell's don't

1961
02:10:23,100 --> 02:10:23,600
move.

1962
02:10:24,100 --> 02:10:25,100
I don't think it would be.

1963
02:10:25,100 --> 02:10:30,500
And the reason for that is that I wasn't changing to Z buffer because

1964
02:10:30,500 --> 02:10:33,300
I was afraid about the number of Sprites we have on the screen.

1965
02:10:33,300 --> 02:10:36,800
Currently, I was changing because I was afraid about how I would deal.

1966
02:10:36,900 --> 02:10:40,000
The number of spread screen, I wanted eventually and some of those

1967
02:10:40,000 --> 02:10:42,400
things are like particle systems, right?

1968
02:10:42,600 --> 02:10:45,200
Like if I want to have like thousands of particles on the screen or

1969
02:10:45,200 --> 02:10:48,200
tens of thousands of particles on the screen, I don't want to sort all

1970
02:10:48,200 --> 02:10:49,700
those and those are all moving.

1971
02:10:50,100 --> 02:10:50,600
Right?

1972
02:10:51,500 --> 02:10:55,700
So I don't think it's a very viable technique to use the Sorting.

1973
02:10:56,200 --> 02:10:57,800
I just don't think it's viable.

1974
02:10:58,200 --> 02:11:03,500
I think there's a reason we don't sort things in 3D and unless we

1975
02:11:03,500 --> 02:11:06,600
absolutely have to and the reason is because it just doesn't

1976
02:11:06,900 --> 02:11:08,200
Divided enough performance.

1977
02:11:10,100 --> 02:11:11,700
And it's very inflexible, right?

1978
02:11:12,400 --> 02:11:15,400
Having to sort a primitive doesn't handle the case where you know

1979
02:11:15,400 --> 02:11:19,600
painters algorithm style break it, you know, cycles and stuff like

1980
02:11:19,600 --> 02:11:19,900
this.

1981
02:11:20,800 --> 02:11:23,800
It doesn't really handle that properly because it can't split

1982
02:11:23,800 --> 02:11:24,800
Primitives either.

1983
02:11:26,300 --> 02:11:32,300
So I think it's just it's not just like the performance that we were

1984
02:11:32,300 --> 02:11:35,000
getting was a problem because it wasn't, we were running fast enough

1985
02:11:35,000 --> 02:11:35,600
as we were.

1986
02:11:35,600 --> 02:11:37,800
It's just there so many red flags there.

1987
02:11:37,800 --> 02:11:38,900
For me, I felt like

1988
02:11:40,300 --> 02:11:41,500
that I didn't want to do it.

1989
02:11:52,700 --> 02:11:58,900
So yeah, I'm confused as to why we cannot request an srgb internal

1990
02:11:58,900 --> 02:11:59,800
format for Gia.

1991
02:12:00,000 --> 02:12:03,500
Text image, 2D multi sample and that is problematic.

1992
02:12:03,700 --> 02:12:06,500
It could just be because this card is ancient.

1993
02:12:07,900 --> 02:12:11,500
So, I will probably have to order a new graphics card to plug into

1994
02:12:11,500 --> 02:12:12,300
this machine.

1995
02:12:13,000 --> 02:12:17,800
One that, you know, is somewhat more modern, but

1996
02:12:29,900 --> 02:12:30,300
Michelle.

1997
02:12:30,300 --> 02:12:33,700
This is Casey, I have started working on handmade Vulcan Port earlier

1998
02:12:33,700 --> 02:12:36,200
today is that okay?

1999
02:12:36,800 --> 02:12:41,600
Well, you know, whatever your whatever back-end you want to use,

2000
02:12:48,000 --> 02:12:51,400
I mean, look, we don't have a whole lot of use of the graphics API and

2001
02:12:51,400 --> 02:12:51,900
handmade hear us.

2002
02:12:51,900 --> 02:12:54,100
So presumably wouldn't be too hard.

2003
02:12:54,100 --> 02:12:57,000
But you're going to have to do a bunch of stuff to manage like getting

2004
02:12:57,000 --> 02:13:00,900
the rectangle data down there because you're going to have to like,

2005
02:13:01,600 --> 02:13:04,700
actually deal with buffers and when they are used and stuff like that,

2006
02:13:04,700 --> 02:13:07,200
which we don't have to do because we're going through open Jill's sort

2007
02:13:07,200 --> 02:13:10,600
of more straightforward does stuff for you pipeline.

2008
02:13:31,100 --> 02:13:32,200
So, yeah, I don't know.

2009
02:13:32,200 --> 02:13:33,400
I'm curious.

2010
02:13:33,900 --> 02:13:35,300
I'm really curious, though.

2011
02:13:35,300 --> 02:13:39,400
If there's some other thing magic thing we're missing there, that's

2012
02:13:39,400 --> 02:13:40,700
the reason why.

2013
02:14:51,900 --> 02:14:55,900
So at least somebody else reports this having the same problem.

2014
02:14:57,100 --> 02:14:57,900
but,

2015
02:15:24,500 --> 02:15:24,900
Yeah.

2016
02:15:33,000 --> 02:15:35,500
That's the other so Alpha to coverage does order independent

2017
02:15:35,500 --> 02:15:36,900
transparency, just like that.

2018
02:15:36,900 --> 02:15:38,100
Any serious limitations?

2019
02:15:38,100 --> 02:15:40,200
You can think of yet?

2020
02:15:40,200 --> 02:15:43,700
Well it's again it's not really.

2021
02:15:45,300 --> 02:15:47,200
High resolution enough, right?

2022
02:15:48,400 --> 02:15:53,600
So, you know if you want to turn on 16x multi-sample anti-aliasing

2023
02:15:53,800 --> 02:15:57,700
then, you know, first of all, you're taking a big hit for that, right?

2024
02:15:57,800 --> 02:16:00,800
And on handmade hero, we can probably afford it because we're not

2025
02:16:00,800 --> 02:16:05,300
trying to do a bunch of complex 3D geometry stuff.

2026
02:16:06,800 --> 02:16:10,300
We're just layering some Sprites on the screen and, you know, probably

2027
02:16:10,300 --> 02:16:12,100
we could turn on something like 16 x.

2028
02:16:12,500 --> 02:16:15,600
But, you know, that's usually very expensive to turn on.

2029
02:16:15,800 --> 02:16:19,800
So first of all, you get that and then even if you turn that on the

2030
02:16:19,800 --> 02:16:26,000
transparency, only has a resolution of 16 steps, right at best

2031
02:16:27,000 --> 02:16:31,000
probably less because, you know, the you'll get collisions of the sort

2032
02:16:31,000 --> 02:16:32,900
of dithering pattern basically

2033
02:16:34,000 --> 02:16:38,700
So, it's not really a substitute for sorting yet, right?

2034
02:16:38,700 --> 02:16:41,900
It has to would have to have a lot higher resolution to really be a

2035
02:16:41,900 --> 02:16:47,700
substitute for sorting, so it's more fourth, it's more for handling,

2036
02:16:47,700 --> 02:16:50,200
the edges of things.

2037
02:16:50,200 --> 02:16:53,100
Where, you know, that the number of alpha value steps is pretty low

2038
02:16:53,100 --> 02:16:58,299
anyway and you're trying to just get like a reasonable sort of pattern

2039
02:16:58,299 --> 02:16:58,900
on the edge.

2040
02:16:58,900 --> 02:17:02,200
That's not going to be a harsh Edge it.

2041
02:17:02,200 --> 02:17:03,600
I don't you know

2042
02:17:03,700 --> 02:17:06,700
I don't think we could lean on it to do stuff like actually

2043
02:17:06,700 --> 02:17:10,799
transparent Sprites and stuff like that, you know, where we're trying

2044
02:17:10,799 --> 02:17:15,299
to have like colored transparency and stuff like that Regional levels

2045
02:17:15,299 --> 02:17:18,299
that fade in and out or something that I don't think it's going to be

2046
02:17:18,299 --> 02:17:19,200
able to do.

2047
02:17:21,500 --> 02:17:23,299
Stuff to that level of fidelity.

2048
02:17:24,000 --> 02:17:29,299
But yeah, otherwise it does you know for for the limited case, it does

2049
02:17:29,299 --> 02:17:31,100
handle it order independent.

2050
02:17:33,500 --> 02:17:36,299
But again, it does have some real limitations.

2051
02:17:36,299 --> 02:17:41,000
It's not an instant saw, it doesn't, it doesn't solve everything.

2052
02:17:49,299 --> 02:17:51,100
Snoring tortoise.

2053
02:17:51,100 --> 02:17:54,200
For those of us who are very interested in engine development.

2054
02:17:54,200 --> 02:17:58,400
What are some of the more advanced platform features that you would

2055
02:17:58,400 --> 02:17:58,799
recommend?

2056
02:18:01,799 --> 02:18:04,200
Can you be a little more specific there?

2057
02:18:04,200 --> 02:18:07,000
I'm not sure what that means.

2058
02:19:33,600 --> 02:19:35,700
Alright, doesn't look like there's any other questions coming in.

2059
02:19:35,700 --> 02:19:37,900
So I'm going to go ahead and close these down.

2060
02:19:39,200 --> 02:19:43,500
I really wish we had some idea about whether this was correct or

2061
02:19:43,500 --> 02:19:44,299
incorrect.

2062
02:19:44,799 --> 02:19:52,600
That it doesn't allow multi-sample buffers in srgb because that's real

2063
02:19:52,600 --> 02:19:54,000
weird, my opinion.

2064
02:19:56,800 --> 02:19:59,500
I'm really not sure to make what to make of that.

2065
02:20:11,600 --> 02:20:16,300
And the fact that we wouldn't be able to use srgb, there would be

2066
02:20:16,300 --> 02:20:17,200
pretty annoying.

2067
02:20:17,200 --> 02:20:20,500
I mean we don't really need srgb to be fair.

2068
02:20:20,500 --> 02:20:24,600
The only reason we ever did it is because Juan insisted that we do it.

2069
02:20:29,600 --> 02:20:32,500
so, I guess I would say

2070
02:20:36,200 --> 02:20:40,300
I'm just not sure if it's unreliable to be able to set a multi sample

2071
02:20:40,300 --> 02:20:40,800
buffer.

2072
02:20:41,100 --> 02:20:42,700
That's also srgb.

2073
02:20:42,700 --> 02:20:44,400
I'm not sure where that leaves us.

2074
02:20:48,500 --> 02:20:52,000
And I how I don't even know how that could be unreliable because all

2075
02:20:52,000 --> 02:20:56,500
major games have to be able to do that, everyone uses multi sampling

2076
02:20:56,900 --> 02:20:58,900
and they definitely use srgb.

2077
02:20:59,500 --> 02:20:59,800
So,

2078
02:21:01,000 --> 02:21:02,900
I'm kind of confused as to what's going on there.

2079
02:21:02,900 --> 02:21:07,900
It could just because this card is too old and maybe that's the

2080
02:21:07,900 --> 02:21:09,800
reason, but it's just kind of weird.

2081
02:21:26,100 --> 02:21:29,100
Snoring tortoises on the platform side, like any debugging features.

2082
02:21:29,100 --> 02:21:33,800
You mentioned a while ago, that 1935 was light years ahead, in that it

2083
02:21:33,800 --> 02:21:34,900
is far more advanced.

2084
02:21:35,200 --> 02:21:35,500
Yeah.

2085
02:21:35,500 --> 02:21:36,400
Well so

2086
02:21:38,200 --> 02:21:43,900
I mean, basically, like the the thing to think about in terms of

2087
02:21:44,400 --> 02:21:46,200
engine stuff is just

2088
02:21:48,700 --> 02:21:54,000
Platform layer wise, we do on handmade hero the stuff that we have to

2089
02:21:54,000 --> 02:21:55,900
do, right?

2090
02:21:58,000 --> 02:22:01,900
So basically we implement the features that we need to the extent that

2091
02:22:01,900 --> 02:22:04,700
we need them, but it basically means that any time.

2092
02:22:04,800 --> 02:22:08,000
If we were going to do something more something different we would

2093
02:22:08,000 --> 02:22:12,600
have to extend or change that how we were doing things, right?

2094
02:22:12,900 --> 02:22:17,700
So you know, if we wanted to write

2095
02:22:19,600 --> 02:22:24,400
Some code in the handmade hero, you know, using the handmade hero

2096
02:22:24,400 --> 02:22:30,200
platform layer for example that did something like iterate over a

2097
02:22:30,200 --> 02:22:35,200
directory tree somewhere and do a bunch of processing on the files

2098
02:22:35,200 --> 02:22:36,900
there and stuff like that.

2099
02:22:37,200 --> 02:22:42,500
It just doesn't really have that you know it has a very limited way to

2100
02:22:42,500 --> 02:22:45,700
just get what our art asset files are and that's like all I can do,

2101
02:22:45,700 --> 02:22:46,200
right?

2102
02:22:47,300 --> 02:22:53,900
So a lot of the time savings that we get on handmade hero for being

2103
02:22:53,900 --> 02:22:58,300
able to implement stuff from scratch is because we do what we need to

2104
02:22:58,300 --> 02:23:03,600
do and not a complete implementation of things that would handle a

2105
02:23:03,600 --> 02:23:04,900
wide variety of cases.

2106
02:23:04,900 --> 02:23:11,100
So if you want to create a platform for creating arbitrary stuff, you

2107
02:23:11,100 --> 02:23:13,100
have more and more work that you have to do.

2108
02:23:14,800 --> 02:23:18,500
So I wouldn't say there's anything in particular that like jumps out,

2109
02:23:18,500 --> 02:23:21,800
that's like oh, you know, the platform layer that were used at Molly

2110
02:23:21,800 --> 02:23:30,100
now is, you know, has this specific feature and this is something

2111
02:23:30,100 --> 02:23:32,100
that's important to look at it's more.

2112
02:23:32,100 --> 02:23:35,500
The difference between the two is the one that we use at Molly.

2113
02:23:35,500 --> 02:23:39,600
Now is designed to basically be the platform on which we build

2114
02:23:39,600 --> 02:23:44,200
everything, you know, editing, tools, tools for press.

2115
02:23:44,400 --> 02:23:51,600
Sing the art assets is designed to handle, you know, pretty much

2116
02:23:51,700 --> 02:23:52,900
anything that you throw at it.

2117
02:23:52,900 --> 02:23:55,700
So you can basically write everything to this platform layer and it

2118
02:23:55,700 --> 02:23:58,100
always will work.

2119
02:23:58,400 --> 02:23:59,800
And you know,

2120
02:24:00,300 --> 02:24:08,500
It handles Unicode and it handles, you know, there's no hard limits on

2121
02:24:08,500 --> 02:24:09,800
path sizes.

2122
02:24:09,800 --> 02:24:11,800
There's no, you know, so it's basically just like doing the

2123
02:24:11,800 --> 02:24:16,700
engineering properly for anything, just ends up being a pretty big

2124
02:24:16,700 --> 02:24:20,500
difference in terms of what it can handle and what it can't.

2125
02:24:21,500 --> 02:24:29,500
But I would not, I would not say there's any particular one feature or

2126
02:24:29,500 --> 02:24:29,900
another.

2127
02:24:30,100 --> 02:24:33,100
It's like the thing that makes a difference between an advanced

2128
02:24:33,100 --> 02:24:35,500
platform layer and it not advanced level or it's more about

2129
02:24:35,500 --> 02:24:40,700
completeness and lack of limitations if that makes sense.

2130
02:24:51,800 --> 02:24:53,100
hi like PEB cack

2131
02:24:57,400 --> 02:24:59,500
problem exists between Kronos and Casey.

2132
02:25:02,600 --> 02:25:05,000
I wouldn't say that it's not that I don't like KRON us, it's that I

2133
02:25:05,000 --> 02:25:10,700
don't I just don't agree with a lot of the design philosophies all

2134
02:25:19,500 --> 02:25:23,400
All right, let's go ahead and close everything down.

2135
02:25:25,900 --> 02:25:28,600
Thank you everyone for joining me, for another episode of handmade

2136
02:25:28,600 --> 02:25:28,700
here.

2137
02:25:28,700 --> 02:25:29,800
It's been a pleasure coding with you.

2138
02:25:29,800 --> 02:25:33,000
As always, if you would like to follow along at home, you can always

2139
02:25:33,000 --> 02:25:34,700
pre-order the game on handmade here at Oregon.

2140
02:25:34,700 --> 02:25:35,700
Come to the source code.

2141
02:25:36,700 --> 02:25:40,300
We also have a forum site, you can go to if you want to ask questions

2142
02:25:40,300 --> 02:25:41,400
a patreon page, go to.

2143
02:25:41,400 --> 02:25:45,600
If you want to support the video series, a schedule bot, you can use

2144
02:25:45,600 --> 02:25:48,600
if you want to find out where we're going to be live in an episode

2145
02:25:48,600 --> 02:25:51,000
guide for trying to catch up on past stuff.

2146
02:25:52,400 --> 02:25:55,100
We, I guess technically we did get the

2147
02:25:55,200 --> 02:26:00,400
Other sample working in theory with the caveat that it doesn't support

2148
02:26:00,400 --> 02:26:01,500
srgb.

2149
02:26:01,700 --> 02:26:10,000
So, I suppose next weekend when we're back, I will be able to actually

2150
02:26:10,000 --> 02:26:15,900
do the resolved and start actually using the alpha to coverage.

2151
02:26:17,000 --> 02:26:20,700
In theory, but again, like everything else when you're programming on

2152
02:26:20,700 --> 02:26:21,600
Graphics apis.

2153
02:26:21,600 --> 02:26:23,100
It's just a complete crap.

2154
02:26:23,100 --> 02:26:25,600
Shoot and it's always unstable.

2155
02:26:25,600 --> 02:26:26,600
It's always very buggy.

2156
02:26:26,600 --> 02:26:30,700
It's always unpredictable it often times doesn't work on multiple

2157
02:26:30,700 --> 02:26:34,200
machines the same way and it's so he's really unsatisfying, which is

2158
02:26:34,200 --> 02:26:37,800
why I don't like it, but we will try it anyway next weekend.

2159
02:26:37,800 --> 02:26:41,300
So I hope to see you here for that where we'll see if we can actually

2160
02:26:41,900 --> 02:26:45,000
use the multi sample stuff that in theory, we now do have working

2161
02:26:45,000 --> 02:26:46,600
properly, although again, we can't see,

2162
02:26:46,800 --> 02:26:50,300
To see any reason why the srgb doesn't work, can only suspect that

2163
02:26:50,300 --> 02:26:53,400
it's an AMD driver issue, although it maybe have something to do with

2164
02:26:53,400 --> 02:26:55,500
the card being too old.

2165
02:26:55,500 --> 02:27:00,700
So maybe I'll try to order a more modern car to stick in there so we

2166
02:27:00,700 --> 02:27:01,700
can check it out.

2167
02:27:02,200 --> 02:27:03,300
Alright, that's about it.

2168
02:27:03,700 --> 02:27:06,400
I hope to see you back here next week for that until then have fun

2169
02:27:06,400 --> 02:27:07,400
programming everyone.

2170
02:27:07,400 --> 02:27:08,900
And I will see you on the internet.

2171
02:27:09,000 --> 02:27:09,800
Take it easy, everybody.

