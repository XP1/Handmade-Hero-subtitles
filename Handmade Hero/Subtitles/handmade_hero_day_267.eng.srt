1
00:00:02,100 --> 00:00:04,100
Hello everyone and welcome to handmade hero.

2
00:00:04,100 --> 00:00:07,500
The show we go to complete Street a complete stream live on game.

3
00:00:07,500 --> 00:00:08,200
That's good.

4
00:00:09,100 --> 00:00:10,300
I don't know what that would mean.

5
00:00:10,400 --> 00:00:14,400
I guess we would like code some kind of a streaming service while

6
00:00:14,400 --> 00:00:15,800
playing a game or something like that.

7
00:00:15,900 --> 00:00:19,300
What I meant to say was Cody complete game live on stream but

8
00:00:19,300 --> 00:00:22,400
apparently it's a it's a very spoon rise today to day.

9
00:00:23,700 --> 00:00:29,200
Anyway, point being today, we are going to make some improvements to

10
00:00:29,200 --> 00:00:34,600
our debug top list, which we are profiling list, which shows the top

11
00:00:34,600 --> 00:00:39,700
time, takers in the game and we implemented it yesterday and we don't

12
00:00:39,700 --> 00:00:41,700
have like all the features that we might want in there.

13
00:00:41,700 --> 00:00:45,400
So this is the time for that.

14
00:00:45,400 --> 00:00:47,200
So that's what we're doing.

15
00:00:47,500 --> 00:00:51,600
If you would like to follow along day 266 is the day to unpack day,

16
00:00:51,600 --> 00:00:52,700
267.

17
00:00:53,700 --> 00:00:59,900
Is the day today, so do that and follow along at home.

18
00:01:00,500 --> 00:01:06,200
All right, so one thing I maybe do want to do though is because we

19
00:01:06,500 --> 00:01:14,100
indulged sssss McGrath the other day about executables that patch

20
00:01:14,100 --> 00:01:14,900
themselves.

21
00:01:15,200 --> 00:01:20,600
But I don't actually ever want that happening in in handmade hero.

22
00:01:20,600 --> 00:01:23,300
So I'm going to go ahead and get rid of this because I don't

23
00:01:23,500 --> 00:01:24,900
Actually ever want that to occur.

24
00:01:24,900 --> 00:01:30,800
But you know, that's that's for the McGrath's of the world to, to

25
00:01:30,900 --> 00:01:32,300
worry about it, not me.

26
00:01:32,900 --> 00:01:37,800
So what I want to do is I want to go to our debug code and make some

27
00:01:37,800 --> 00:01:38,700
improvements.

28
00:01:38,700 --> 00:01:41,900
Here is the piece of code that I am talking about.

29
00:01:42,700 --> 00:01:46,600
If you see what happens here, when we run, I don't actually want any

30
00:01:46,600 --> 00:01:50,900
of these breakpoints anymore when we run, we end up in a situation

31
00:01:50,900 --> 00:01:53,300
where we can get this topless, but there's a bunch of things.

32
00:01:53,500 --> 00:01:55,500
The top list doesn't do right now.

33
00:01:55,700 --> 00:01:58,800
First of all, it looks like sprintf is wonky and isn't obeying or with

34
00:01:58,800 --> 00:01:59,800
specifications.

35
00:01:59,900 --> 00:02:03,800
So I don't know, doesn't really matter because I, we can print these

36
00:02:03,800 --> 00:02:07,400
out in columns are self ourselves, so we could do that.

37
00:02:07,500 --> 00:02:10,500
The other thing is we're not constraining it to fall inside a window.

38
00:02:10,500 --> 00:02:14,900
So like if we you know, this is ostensibly the window for the top list

39
00:02:14,900 --> 00:02:17,800
and it's not, we're just drawing, we're not even like paying attention

40
00:02:17,800 --> 00:02:18,400
to that.

41
00:02:18,600 --> 00:02:23,200
So we might want to make some stuff for that and then the other thing

42
00:02:23,200 --> 00:02:23,300
and

43
00:02:23,400 --> 00:02:26,100
By far, the more important thing, the one that I think we're going to

44
00:02:26,100 --> 00:02:31,000
start with first is that as we are looking at this top list, we're

45
00:02:31,000 --> 00:02:34,100
actually seeing things that include their children.

46
00:02:34,100 --> 00:02:39,000
So when this says that, it took 23 million Cycles to execute what that

47
00:02:39,000 --> 00:02:42,600
means, is this entire block, including all the children took that but

48
00:02:42,600 --> 00:02:45,600
of course game update and render is included in the game update block.

49
00:02:45,600 --> 00:02:49,400
So it's not a really very helpful thing to view because we want to

50
00:02:49,400 --> 00:02:52,500
know, you know the primary use for something like this.

51
00:02:53,900 --> 00:02:58,200
is obviously twofold one is to say, show me the breakdown of things in

52
00:02:58,200 --> 00:02:59,900
the program, but honestly, you know,

53
00:03:00,000 --> 00:03:02,400
We already have a lot of ways, you know, we can look at this and kind

54
00:03:02,400 --> 00:03:03,800
of see what's going on with that.

55
00:03:03,800 --> 00:03:06,900
Certainly so you know, we have a way of getting a rough break down

56
00:03:06,900 --> 00:03:11,100
over time and things like that but you know if we look at this, what

57
00:03:11,100 --> 00:03:12,800
we want to see is where do we go.

58
00:03:12,800 --> 00:03:15,300
If we want to optimize that we're kind of just, you know, we just want

59
00:03:15,300 --> 00:03:15,800
to see a thing.

60
00:03:15,800 --> 00:03:17,200
It's like who's taking the most time.

61
00:03:17,600 --> 00:03:21,300
And so showing me game update taking the most time isn't really very

62
00:03:21,300 --> 00:03:24,900
helpful, because I can't go optimize game update.

63
00:03:24,900 --> 00:03:28,000
Game update is like four or five lines of code or something probably,

64
00:03:28,000 --> 00:03:29,800
and then some calls out to other code.

65
00:03:30,000 --> 00:03:33,600
Oh, and so what I wanted to know is what slow in the other code.

66
00:03:33,600 --> 00:03:35,300
Like, tell me where in the code.

67
00:03:35,300 --> 00:03:39,700
I actually, you know, tell me where I actually need to go optimize.

68
00:03:39,800 --> 00:03:41,700
That's what I want to know, right?

69
00:03:42,500 --> 00:03:45,700
So for the topless, what I'd like to be able to do is produce a list

70
00:03:45,700 --> 00:03:51,600
that has not just a percentage of the time total, but a percentage of

71
00:03:51,600 --> 00:03:54,200
the time not counting the children.

72
00:03:54,400 --> 00:03:59,700
So if something happens to take 22% of the time but you know, 21% of

73
00:03:59,700 --> 00:03:59,800
it

74
00:03:59,900 --> 00:04:03,500
I was actually in the children, then it's only gonna show up as one

75
00:04:03,500 --> 00:04:05,600
percent of the time, you know.

76
00:04:05,600 --> 00:04:08,700
Well, that's not right, but you get what I mean, if something shows up

77
00:04:08,700 --> 00:04:12,300
as 23 million Cycles, but 22 millions of those Cycles are acting the

78
00:04:12,300 --> 00:04:15,300
children, it should show up as 1 million Cycles, right?

79
00:04:15,400 --> 00:04:19,000
That's what I actually want to have happen here.

80
00:04:19,700 --> 00:04:21,399
So how can we do that?

81
00:04:21,399 --> 00:04:24,000
And I thought of some interesting things, by the way, after last

82
00:04:24,000 --> 00:04:27,400
night's stream, kind of, when I, you know, shut it off and went away

83
00:04:27,900 --> 00:04:29,800
some stuff occurred to me and we'll maybe play

84
00:04:29,900 --> 00:04:32,000
If that a little bit as well because there are some interesting stuff

85
00:04:32,000 --> 00:04:32,700
I thought we could do.

86
00:04:32,700 --> 00:04:36,800
But so what I want to do is extend the collation phase that.

87
00:04:36,800 --> 00:04:40,700
We when we're doing our collation, we actually are in a good position

88
00:04:40,700 --> 00:04:45,400
to compute stuff like child times but we just don't actually do it,

89
00:04:45,400 --> 00:04:45,700
right?

90
00:04:45,700 --> 00:04:48,300
So we don't actually look at any of that information.

91
00:04:48,500 --> 00:04:52,100
So all I want to do is extend our thing by adding 1 64 bit counter.

92
00:04:52,100 --> 00:04:56,200
Which is the exclusive time actually we don't even 64-bit, probably

93
00:04:56,200 --> 00:04:57,600
32-bit would be fine.

94
00:04:59,300 --> 00:05:02,500
Because nothing takes 4 billion cycles by itself at the moment.

95
00:05:04,500 --> 00:05:06,100
But whatever, I don't really care about the memory.

96
00:05:06,100 --> 00:05:06,900
We can be picky.

97
00:05:08,000 --> 00:05:08,800
In fact.

98
00:05:10,900 --> 00:05:13,500
Just to prove how piggy we can be, you know, I'm saying?

99
00:05:14,500 --> 00:05:15,200
So I don't care.

100
00:05:15,200 --> 00:05:18,200
So I'm just going to say that in here, when we create one of these

101
00:05:18,200 --> 00:05:22,100
profile notes will create a duration, and we'll just make two

102
00:05:22,100 --> 00:05:25,800
different kinds will do duration, including children, and we'll do

103
00:05:25,800 --> 00:05:31,300
well, actually will do duration and duration of children.

104
00:05:33,700 --> 00:05:37,900
Okay, and so all we would need to do now is if we want to know the

105
00:05:37,900 --> 00:05:41,700
total duration, we just use it as we have been, but if we want to know

106
00:05:41,700 --> 00:05:45,900
the duration without the children, we can remove this value so we can

107
00:05:45,900 --> 00:05:48,300
just subtract that away, okay?

108
00:05:49,500 --> 00:05:52,900
And so, all we have to do to make that is when we're actually creating

109
00:05:52,900 --> 00:05:54,700
one of these, do you like profile nodes?

110
00:05:55,900 --> 00:05:59,800
This is not the function, I actually want to be in here.

111
00:06:04,400 --> 00:06:04,800
All right.

112
00:06:05,400 --> 00:06:09,000
Yeah, when we're actually dealing with these profile nodes when I

113
00:06:09,000 --> 00:06:10,100
first create one.

114
00:06:11,000 --> 00:06:14,800
So when we're doing the collation here, when I first create one of

115
00:06:14,800 --> 00:06:19,000
these nodes you can see me doing that here, right, there's here and

116
00:06:19,000 --> 00:06:20,900
here are the two places where I do that.

117
00:06:21,300 --> 00:06:24,800
When we initialize the duration, 20, we can just also initialize the

118
00:06:24,800 --> 00:06:26,300
duration of children to zero.

119
00:06:27,300 --> 00:06:33,300
And so in here where we do duration of children,

120
00:06:35,000 --> 00:06:39,000
We now know that we start out with with nothing in there, and if we

121
00:06:39,000 --> 00:06:42,400
come to something like an end block, where we're going to compute,

122
00:06:42,400 --> 00:06:46,300
what the duration actually was, then, at this time, what I'd like to

123
00:06:46,300 --> 00:06:51,500
do is say, whoever the block was that was above us, right?

124
00:06:52,600 --> 00:06:54,100
That profile mode.

125
00:06:54,200 --> 00:06:56,000
I would like it to

126
00:06:57,700 --> 00:07:02,000
I would like to include this nodes duration into that block

127
00:07:02,000 --> 00:07:04,400
automatically right now.

128
00:07:04,400 --> 00:07:07,400
Obviously we could do this by just going to first child.

129
00:07:07,400 --> 00:07:10,600
Summing up all the durations and subtracting them but I'd rather just

130
00:07:10,600 --> 00:07:11,400
have it in one place.

131
00:07:11,400 --> 00:07:15,800
So I'm just going to do that while we go right again there.

132
00:07:15,800 --> 00:07:17,400
Yeah there's two ways we could do it.

133
00:07:17,500 --> 00:07:21,000
We could go to first child sum them all up and maybe that's a smart

134
00:07:21,000 --> 00:07:24,100
thing to do but I just want to I don't want that to have to keep

135
00:07:24,100 --> 00:07:25,200
happening, right?

136
00:07:25,400 --> 00:07:27,200
So I'm just going to have it happen right here.

137
00:07:27,500 --> 00:07:30,700
So the way I'm going to do that is inside deallocate open, debug

138
00:07:30,700 --> 00:07:31,200
block.

139
00:07:32,900 --> 00:07:34,500
I believe what happens here.

140
00:07:34,600 --> 00:07:36,900
Is it pops the block, right?

141
00:07:37,000 --> 00:07:42,000
So, if I go to, if I call deallocate open, debug block, then this

142
00:07:42,000 --> 00:07:45,900
first open code block, is now going to point to some other block,

143
00:07:46,100 --> 00:07:46,600
right?

144
00:07:46,700 --> 00:07:49,900
So if I check and say, okay, what's the new first open code block,

145
00:07:49,900 --> 00:07:51,100
assuming that there is one

146
00:07:53,000 --> 00:07:54,900
I can then get out its profile mode.

147
00:07:55,500 --> 00:07:59,600
Okay, so here is the parent node for the node that I was in.

148
00:08:00,400 --> 00:08:02,900
It's going to be thread.

149
00:08:04,000 --> 00:08:05,300
First open code block.

150
00:08:08,800 --> 00:08:09,800
Node profile node.

151
00:08:10,800 --> 00:08:12,000
That parent node.

152
00:08:15,300 --> 00:08:19,400
As soon as Alan gets a better indentation support into for coder, I'm

153
00:08:19,400 --> 00:08:21,000
going to be so happy.

154
00:08:21,000 --> 00:08:23,300
I keep having to like undo indent things.

155
00:08:23,500 --> 00:08:25,000
It's one of the only things I notice now.

156
00:08:25,000 --> 00:08:28,800
It's that and the tab completion, other than that, it's been like

157
00:08:28,900 --> 00:08:29,300
yeah.

158
00:08:30,500 --> 00:08:33,200
I'm so looking forward to Summer of for coder, by the way.

159
00:08:33,900 --> 00:08:35,799
Since obviously Alan esta actually go to school.

160
00:08:35,799 --> 00:08:40,799
Like doesn't have very much time to program client but I'm hoping this

161
00:08:40,799 --> 00:08:43,299
summer will be will be very fur coat or tastic.

162
00:08:43,299 --> 00:08:43,799
Anyway,

163
00:08:44,800 --> 00:08:45,500
At node.

164
00:08:45,900 --> 00:08:49,400
I if I've got one which I do in the case, you know, if this if this if

165
00:08:49,400 --> 00:08:53,200
it was true that parent node, I know that the duration of children is

166
00:08:53,200 --> 00:08:57,400
just the thing that I can Som to, and I can add whatever the duration

167
00:08:57,400 --> 00:08:58,100
was a my node.

168
00:08:58,100 --> 00:08:59,900
And now I've got the

169
00:09:00,000 --> 00:09:01,600
Duration in there, right?

170
00:09:01,600 --> 00:09:05,800
So now I know exactly what that duration is of all the children.

171
00:09:06,000 --> 00:09:10,700
So if I want to change our top list to be exclusive of the children, I

172
00:09:10,700 --> 00:09:11,200
can do that.

173
00:09:11,200 --> 00:09:14,000
Trivially just by taking the duration.

174
00:09:14,400 --> 00:09:20,700
And let's go up here, taking that duration, and subtracting a way that

175
00:09:20,900 --> 00:09:21,700
child portion.

176
00:09:21,900 --> 00:09:24,800
So, for example, if I wanted to do that in here, right?

177
00:09:24,800 --> 00:09:29,400
I could do, let's see.

178
00:09:30,700 --> 00:09:32,900
Clocks, without children.

179
00:09:33,300 --> 00:09:34,900
It's like Doctors Without Borders.

180
00:09:35,700 --> 00:09:36,900
Only less altruistic.

181
00:09:37,400 --> 00:09:40,400
So if I want to do that, I can just say like okay.

182
00:09:40,600 --> 00:09:43,100
And maybe I do like clocks with children.

183
00:09:43,700 --> 00:09:48,500
So that's clocks with children clocks without children is just you

184
00:09:48,500 --> 00:09:52,500
take the total number of clocks and we take the ratio of children out

185
00:09:52,500 --> 00:09:55,400
of it and so I could just quickly change this over to.

186
00:09:55,400 --> 00:09:59,300
So you know, now we're doing it without that.

187
00:09:59,300 --> 00:10:02,100
So now we're only going to look at the actual blocks themselves

188
00:10:02,100 --> 00:10:06,000
without their children and you can already see.

189
00:10:06,000 --> 00:10:11,200
We get just from that a much clearer picture of where our time is

190
00:10:11,200 --> 00:10:12,900
actually being spent, right?

191
00:10:12,900 --> 00:10:13,700
Because now

192
00:10:13,800 --> 00:10:18,300
We're not double triple quadruple counting Cycles in our percentages.

193
00:10:18,400 --> 00:10:21,200
Now, our percentages are actually showing us the percentage of time

194
00:10:21,200 --> 00:10:23,000
spent in a block uniquely.

195
00:10:23,700 --> 00:10:26,900
And so we can see that essentially, this is exactly what we would

196
00:10:26,900 --> 00:10:32,200
expect for the cutscene essentially are, our code takes no time at all

197
00:10:32,600 --> 00:10:36,000
because nothing's happening, we're just putting a cutscene out to the

198
00:10:36,000 --> 00:10:36,600
GPU.

199
00:10:36,800 --> 00:10:40,600
So, pretty much 100% of our time is spent in the debug system, which

200
00:10:40,600 --> 00:10:42,700
has a ton of work to do because it goes and does all this stuff and

201
00:10:42,700 --> 00:10:43,500
renders everything and

202
00:10:43,700 --> 00:10:47,000
Whatever and in the graphics card, basically, like which is either

203
00:10:47,000 --> 00:10:48,900
doing the rendering or waiting for the V blank.

204
00:10:50,800 --> 00:10:51,400
Right?

205
00:10:51,600 --> 00:10:54,500
If we now switch to actually playing the game then we'll see a more

206
00:10:54,500 --> 00:10:56,000
balanced output.

207
00:10:56,000 --> 00:10:56,400
Right?

208
00:10:56,400 --> 00:10:57,400
So now we can see that.

209
00:10:57,400 --> 00:11:00,900
Okay, now in game update and render, we are taking 20% of the time,

210
00:11:00,900 --> 00:11:01,600
right?

211
00:11:02,000 --> 00:11:05,300
Still not much because still like most of the time is being spent in

212
00:11:05,300 --> 00:11:08,200
other things but because you know we got like the debug system eating

213
00:11:08,200 --> 00:11:11,900
up a ton of that time but you can still see in general.

214
00:11:18,000 --> 00:11:21,400
You know, we're getting more reasonable understanding of what's

215
00:11:21,400 --> 00:11:22,100
Happening Here.

216
00:11:22,500 --> 00:11:25,800
So for example, now that game update block, which is a nothing Block,

217
00:11:25,800 --> 00:11:26,200
it's just in.

218
00:11:26,200 --> 00:11:27,900
The outside is down here somewhere.

219
00:11:27,900 --> 00:11:29,000
In fact, where is it?

220
00:11:29,500 --> 00:11:30,700
It's right there, right?

221
00:11:30,800 --> 00:11:32,000
It takes nothing right.

222
00:11:32,000 --> 00:11:35,200
Remember, that was the top function before it's nothing now and

223
00:11:35,200 --> 00:11:38,200
properly game, update and render, which we haven't really spent any

224
00:11:38,200 --> 00:11:41,700
time putting blocks inside of to break down is taking all the time,

225
00:11:41,900 --> 00:11:42,500
right?

226
00:11:42,500 --> 00:11:44,000
And we can see that begins him.

227
00:11:44,100 --> 00:11:46,600
Tim is a similar thing where it takes a fair bit of time.

228
00:11:46,900 --> 00:11:49,900
So you know, we might ask, why is game update and render taking so

229
00:11:49,900 --> 00:11:50,700
much time.

230
00:11:50,800 --> 00:11:54,400
You know, that's a pretty fair thing to want to know and we could

231
00:11:54,400 --> 00:11:54,600
figure it.

232
00:11:54,600 --> 00:11:55,800
Start to figure that out now, right?

233
00:11:55,800 --> 00:11:58,300
We can go into handmade dot CPP.

234
00:11:58,500 --> 00:11:59,800
Go into game update and renovate.

235
00:12:00,500 --> 00:12:04,400
And here is the code that we're timing.

236
00:12:04,400 --> 00:12:07,900
There's the time function there and you can kind of see all the stuff

237
00:12:08,000 --> 00:12:08,700
that I might be doing.

238
00:12:08,700 --> 00:12:12,500
There's initialization code there and this sort of stuff I would

239
00:12:12,500 --> 00:12:16,100
assume actually though that most of the time is going to be spent in

240
00:12:16,100 --> 00:12:19,800
these guys title screens cutscene or the world render.

241
00:12:20,300 --> 00:12:22,800
And we can again start to sort of figure that out.

242
00:12:22,800 --> 00:12:28,800
So if I went into World mode dot CPP, Now update and render world, I

243
00:12:28,800 --> 00:12:29,900
can make this a Time function.

244
00:12:30,000 --> 00:12:33,400
Ocean just to confirm my suspicions, right?

245
00:12:33,600 --> 00:12:35,700
And I don't really remember how this stuff works.

246
00:12:35,700 --> 00:12:36,200
I do.

247
00:12:36,200 --> 00:12:37,400
I have to give it a name.

248
00:12:39,400 --> 00:12:40,300
I don't, right?

249
00:12:41,100 --> 00:12:41,500
Yeah.

250
00:12:42,900 --> 00:12:45,800
So if we unpause now and start to take a look at what the new looks

251
00:12:45,800 --> 00:12:46,400
like, you can see.

252
00:12:46,400 --> 00:12:50,800
Okay, as we expected update and render world is taking 13% of the

253
00:12:50,800 --> 00:12:51,800
time, right?

254
00:12:51,800 --> 00:12:56,800
And so that's, you know, that's more what we would expect to see and

255
00:12:56,800 --> 00:13:00,100
it's not game update and render but game update and render.

256
00:13:00,400 --> 00:13:02,900
Oddly enough that doesn't really add up quite the same.

257
00:13:06,300 --> 00:13:07,600
Let's scroll back a bit.

258
00:13:09,800 --> 00:13:13,000
So, game update and render is taking 11.

259
00:13:14,000 --> 00:13:15,400
I should put some commas in here.

260
00:13:15,600 --> 00:13:18,800
11 million cycles for game update and render.

261
00:13:20,400 --> 00:13:21,000
but,

262
00:13:25,200 --> 00:13:26,400
That's real weird.

263
00:13:28,100 --> 00:13:29,500
But when we move,

264
00:13:31,100 --> 00:13:32,700
To update and render world.

265
00:13:32,700 --> 00:13:35,800
It's still taking the exact same number of Cycles, but the percentage

266
00:13:35,800 --> 00:13:36,400
changes

267
00:13:39,200 --> 00:13:42,700
because the time changed quite a bit as well.

268
00:13:49,000 --> 00:13:50,100
That's real weird.

269
00:13:52,400 --> 00:13:55,100
Is that just because of all this extra stuff we have to draw.

270
00:14:00,600 --> 00:14:05,600
Oh, it's because it has to draw two of these because since we changed,

271
00:14:05,700 --> 00:14:06,800
oh, that's hilarious.

272
00:14:07,100 --> 00:14:13,300
Since our system doesn't uses the grids as line numbers.

273
00:14:13,300 --> 00:14:16,100
After we change that file, we get secondary stuff.

274
00:14:16,100 --> 00:14:18,000
That doesn't seem like a good thing.

275
00:14:19,300 --> 00:14:20,900
That seems like a bad thing.

276
00:14:21,000 --> 00:14:26,800
I wonder if we want to change that aspect of the grid system in some

277
00:14:26,800 --> 00:14:27,300
way.

278
00:14:28,000 --> 00:14:32,600
I'm not sure like you know you saw what happened there, right?

279
00:14:35,100 --> 00:14:36,400
Where is that grid system?

280
00:14:37,200 --> 00:14:37,900
Where is mr.

281
00:14:37,900 --> 00:14:38,800
Grid system.

282
00:14:39,800 --> 00:14:41,300
That's in interface.

283
00:14:42,200 --> 00:14:46,300
So right now we unique, if I things quite a bit we use like the file

284
00:14:46,300 --> 00:14:48,200
and the line and the counter.

285
00:14:48,900 --> 00:14:52,200
And I wonder if we maybe don't want to use LINE anymore.

286
00:14:56,600 --> 00:14:59,300
I wonder if we even just don't want to use.

287
00:15:00,000 --> 00:15:01,100
In or counter.

288
00:15:02,900 --> 00:15:07,200
If we just want to use name, it's hard to say, like, I don't know, I

289
00:15:07,200 --> 00:15:10,600
don't know how, you know, it's hard to say how unique you want, these

290
00:15:10,600 --> 00:15:12,500
things to be right.

291
00:15:12,800 --> 00:15:17,000
And and maybe the right answer here is you do want those things to be

292
00:15:17,000 --> 00:15:19,100
unique across reloads.

293
00:15:20,000 --> 00:15:24,300
And what we really want is when we specify a debug UI element, instead

294
00:15:24,300 --> 00:15:28,600
of using debug name, we just use regular name, you know, maybe that's

295
00:15:28,600 --> 00:15:29,100
the right thing.

296
00:15:29,100 --> 00:15:31,700
Since a UI element shouldn't get duplicated.

297
00:15:32,900 --> 00:15:34,600
I'm not sure, I really don't know.

298
00:15:34,600 --> 00:15:37,900
Like I said, that's our decision to make, but I don't know which we

299
00:15:37,900 --> 00:15:38,600
want to do.

300
00:15:39,200 --> 00:15:42,600
But certainly like, if I rebuild the game, I don't want to duplicate

301
00:15:42,600 --> 00:15:42,800
these.

302
00:15:42,800 --> 00:15:47,100
And so now they won't be, because they'll be using their name more

303
00:15:47,100 --> 00:15:49,300
specifically, right?

304
00:15:51,000 --> 00:15:51,400
Okay.

305
00:15:51,500 --> 00:15:54,200
So, anyway, like I was saying, if we want to investigate this now that

306
00:15:54,200 --> 00:15:55,700
I figured out what was going on there.

307
00:15:56,200 --> 00:15:59,300
We can see that, you know, update and render world is taking all the

308
00:15:59,300 --> 00:16:00,900
time, which is what we would expect.

309
00:16:01,000 --> 00:16:02,100
So what we could do is we could go

310
00:16:02,200 --> 00:16:09,000
We into that function now and see what it calls mode.

311
00:16:10,700 --> 00:16:13,800
We could sort of see what it might be calling and maybe test a little

312
00:16:13,800 --> 00:16:18,000
bit of these regions of code because you can see all the code in here

313
00:16:18,300 --> 00:16:21,900
for the world stuff and just so we can maybe figure out what it is.

314
00:16:21,900 --> 00:16:26,100
That actually takes the time so that we don't have to guess, right?

315
00:16:27,600 --> 00:16:33,000
So you know, we could go in and say maybe there's a timer in here.

316
00:16:38,100 --> 00:16:41,800
So that's the ground chunks happening.

317
00:16:43,300 --> 00:16:46,700
This is the controller stuff, which I don't think is going to be

318
00:16:46,700 --> 00:16:48,700
particularly unusual.

319
00:16:51,400 --> 00:16:54,700
Here's the Sim stuff, but that's all pretty reasonable.

320
00:16:55,000 --> 00:16:57,100
This is the rendering Loop.

321
00:16:57,400 --> 00:17:01,000
So this I could probably push and think it already says move this out

322
00:17:01,000 --> 00:17:03,000
into handmade entity, that CPP.

323
00:17:03,000 --> 00:17:04,900
So we're already sort of thinking about that, but I'll put a Time

324
00:17:04,900 --> 00:17:07,000
Block in here, which is like entity render.

325
00:17:16,700 --> 00:17:20,500
And then we've got some residuals from a we're doing testing the

326
00:17:20,500 --> 00:17:23,700
graphics but I don't really suspect that that's going to be a big

327
00:17:23,700 --> 00:17:24,200
deal.

328
00:17:24,900 --> 00:17:28,099
So let's go ahead and see what where that leaves us.

329
00:17:28,400 --> 00:17:33,200
So right now, we're spending 20% of our time in ground chunks on

330
00:17:33,800 --> 00:17:34,400
right?

331
00:17:34,700 --> 00:17:37,200
Like what the fudge is happening in there.

332
00:17:37,200 --> 00:17:40,600
That's probably just old residual stuff that we shouldn't even be

333
00:17:40,600 --> 00:17:41,100
caring about.

334
00:17:41,100 --> 00:17:42,500
I don't even want the ground checks anymore.

335
00:17:42,500 --> 00:17:44,400
The design of the game turned out not to use them.

336
00:17:44,900 --> 00:17:47,500
My bad but I'm just curious to know.

337
00:17:47,700 --> 00:17:48,500
So what is it?

338
00:17:48,500 --> 00:17:51,800
Is it how it's because there's so many ground buffers probably its

339
00:17:51,800 --> 00:17:53,200
base is what it boils down to.

340
00:17:53,400 --> 00:17:57,400
So if we just nuke this because I want to Nuke it anyway we'll get a

341
00:17:57,400 --> 00:17:59,800
ton of speed back because this is all garbage.

342
00:18:00,000 --> 00:18:01,600
Basically what it boils down to, right?

343
00:18:04,700 --> 00:18:05,100
Yeah.

344
00:18:06,500 --> 00:18:09,200
Now, we're down to just ten percent of the time being spent in begin

345
00:18:09,200 --> 00:18:11,700
Sim and pretty much everything else is in the debug system.

346
00:18:11,800 --> 00:18:14,900
So that's better to say the least, right?

347
00:18:15,000 --> 00:18:18,800
And if we take a look at our and this is in debug mode, so we get a

348
00:18:18,800 --> 00:18:21,900
lot faster in release mode as well but now that looks much better.

349
00:18:21,900 --> 00:18:25,800
So got the D about collation the frame display, the game update taking

350
00:18:25,800 --> 00:18:29,800
their time there and if I look inside a game update, I can see that.

351
00:18:29,800 --> 00:18:33,100
It's pretty much all in game update and render which is all in update

352
00:18:33,100 --> 00:18:34,500
and render world.

353
00:18:35,000 --> 00:18:35,800
So, off we go,

354
00:18:36,500 --> 00:18:37,700
Right in here.

355
00:18:37,700 --> 00:18:39,200
We've got begins in this.

356
00:18:39,200 --> 00:18:41,300
Debug system is amazingly cool.

357
00:18:45,000 --> 00:18:46,000
Come on people.

358
00:18:46,000 --> 00:18:47,700
That's just so cool.

359
00:18:49,000 --> 00:18:49,900
God.

360
00:18:50,700 --> 00:18:51,400
Alright.

361
00:18:53,800 --> 00:18:54,200
Yeah.

362
00:18:55,500 --> 00:18:58,300
If this would be one of the things that I'd spend another month on

363
00:18:58,300 --> 00:19:02,900
probably of real-time, like this is just like you can probably this is

364
00:19:02,900 --> 00:19:06,700
be a cool product like I could see selling this thing, right?

365
00:19:06,700 --> 00:19:09,700
You just make a really great viewer for it as an external application.

366
00:19:10,600 --> 00:19:11,700
I mean it's cool.

367
00:19:12,000 --> 00:19:14,500
This thing is going to be so so cool anyway.

368
00:19:15,400 --> 00:19:15,700
All right.

369
00:19:15,700 --> 00:19:18,900
So because I mean like basically like with just a, with just a week of

370
00:19:18,900 --> 00:19:20,000
full-time programming time.

371
00:19:20,000 --> 00:19:22,400
Think of how awesome you could make these windows right there.

372
00:19:22,400 --> 00:19:25,200
So, zygo dish now because I only have like, oh, I

373
00:19:25,300 --> 00:19:27,500
Ten minutes here and there to like throw it like changing some of the

374
00:19:27,500 --> 00:19:28,100
rendering code.

375
00:19:28,100 --> 00:19:29,900
But you know, if you actually spent some time on it,

376
00:19:30,900 --> 00:19:32,400
anyway, so

377
00:19:33,700 --> 00:19:36,900
this stuff here is starting to look pretty good and you can see, we

378
00:19:36,900 --> 00:19:38,300
can already use it to find problems.

379
00:19:38,300 --> 00:19:41,700
We just found a huge problem and we can get rid of that problem really

380
00:19:41,700 --> 00:19:42,300
easily, right?

381
00:19:42,300 --> 00:19:45,400
And this will continue to be true as we go forward.

382
00:19:45,500 --> 00:19:47,600
So that's all well and good.

383
00:19:47,600 --> 00:19:49,600
That's all fine, and nice and dandy.

384
00:19:49,800 --> 00:19:53,900
So I think that's pretty much all I really wanted to do with that went

385
00:19:53,900 --> 00:19:57,400
with this window and so mostly what I think I would do now I want to

386
00:19:57,400 --> 00:20:01,700
just clean up the rendering aspect of it so that it's not, you know,

387
00:20:01,700 --> 00:20:03,300
extending outside of what the

388
00:20:03,500 --> 00:20:07,500
Nouns are of it and and that sort of thing, right?

389
00:20:08,700 --> 00:20:11,200
I think that's really all we need to do and I'm not going to go crazy

390
00:20:11,200 --> 00:20:14,000
with it like we could do a lot more fancy stuff here and I won't

391
00:20:14,000 --> 00:20:14,800
bother with that.

392
00:20:15,300 --> 00:20:19,000
I'll just, you know, do sort of a reasonable pass.

393
00:20:20,500 --> 00:20:21,600
And then gosh.

394
00:20:26,500 --> 00:20:28,500
I don't know what else we have left to do really

395
00:20:34,900 --> 00:20:35,400
anyway.

396
00:20:35,900 --> 00:20:40,900
So let's take a look at at at making this we could do a sort of a poor

397
00:20:40,900 --> 00:20:43,400
man's clip to this thing.

398
00:20:43,400 --> 00:20:49,500
If we wanted to, that'd be real easy like without having to actually

399
00:20:49,500 --> 00:20:51,800
add the ability to expose the clipping rectangle.

400
00:20:51,900 --> 00:20:56,200
Do we expose the clipping rectangle from the render group, you know,

401
00:20:56,200 --> 00:20:59,700
we should have, but I don't know that we ever did because we support,

402
00:21:00,000 --> 00:21:03,500
But we don't actually know if we actually ever do that.

403
00:21:03,900 --> 00:21:05,100
So where's the clip?

404
00:21:05,100 --> 00:21:05,700
Rect.

405
00:21:07,800 --> 00:21:12,500
Yeah so we never actually allow you to set that cliprect which is

406
00:21:12,500 --> 00:21:14,000
something we probably should have done.

407
00:21:14,200 --> 00:21:16,100
So I'm just going to do Portman slipping for now.

408
00:21:16,100 --> 00:21:19,900
I don't think this is enough of a reason to expose the cliprect API

409
00:21:19,900 --> 00:21:20,400
wise

410
00:21:21,800 --> 00:21:23,200
So we'll skip that for now.

411
00:21:27,600 --> 00:21:28,100
All right.

412
00:21:30,600 --> 00:21:31,000
Your name.

413
00:21:34,700 --> 00:21:36,400
So, let's take a look at what's going on here.

414
00:21:37,900 --> 00:21:41,400
What I want to do in handmade debug dot CPP in the top clocks list.

415
00:21:41,400 --> 00:21:42,500
I'm just going to say that.

416
00:21:42,500 --> 00:21:46,300
Well, we're starting in the window and we're drawing, right?

417
00:21:46,300 --> 00:21:49,100
So here is the thing that goes through and drawers everything, right?

418
00:21:49,100 --> 00:21:52,200
This is the text buffer, just does like out out out, right.

419
00:21:53,200 --> 00:21:57,000
All I want to do here is I'm just going to say well, alright, I'm

420
00:21:57,000 --> 00:22:00,800
starting you know, we've got this thing that starts at a particular at

421
00:22:00,800 --> 00:22:01,300
Value.

422
00:22:01,500 --> 00:22:04,900
Right here is the thing that starts at a particular at Value.

423
00:22:05,400 --> 00:22:09,300
And if I just said, well okay, I don't, why do I always close the

424
00:22:09,300 --> 00:22:09,600
game?

425
00:22:09,600 --> 00:22:11,100
By the way I always forget that.

426
00:22:11,100 --> 00:22:13,500
This thing hot reloads and it's like a force of habit.

427
00:22:14,600 --> 00:22:16,500
Anyway, you can see it draws off the end here.

428
00:22:16,500 --> 00:22:18,900
And the reason it draws off the end here is because it just blissfully

429
00:22:18,900 --> 00:22:22,100
it doesn't ever check to see whether it's off the end, right?

430
00:22:22,300 --> 00:22:22,900
So what we could do,

431
00:22:23,100 --> 00:22:29,300
Instead is say that we only want to keep going in the case, where the

432
00:22:29,300 --> 00:22:41,300
at y plus, whatever the line advances, we only want.

433
00:22:41,300 --> 00:22:44,000
Oh, sorry - what have line of ants is, so, whatever.

434
00:22:44,000 --> 00:22:45,400
The next line would be.

435
00:22:47,000 --> 00:22:52,300
We want that to be greater than the profile wrecked Min y, right?

436
00:22:52,300 --> 00:22:54,500
We don't want to keep drawing.

437
00:22:54,700 --> 00:22:57,400
If we get in a situation where we think we're going to be outside the

438
00:22:57,400 --> 00:23:01,100
bounds, oops, missing a adopter.

439
00:23:03,000 --> 00:23:07,900
And so now what you can see is it stops, you know, it stops actually

440
00:23:07,900 --> 00:23:11,800
drawing when we're outside the window in this direction, but it

441
00:23:11,800 --> 00:23:12,800
doesn't stop drawing.

442
00:23:12,800 --> 00:23:14,700
If we're outside the window in the other direction.

443
00:23:14,900 --> 00:23:21,300
And, similarly, you notice it sort of clears itself a little early.

444
00:23:21,500 --> 00:23:24,400
So we'll always get rid of the thing before it would have clipped at

445
00:23:24,400 --> 00:23:25,000
all.

446
00:23:26,100 --> 00:23:29,500
And we could make it a little bit better because actually, we don't

447
00:23:29,500 --> 00:23:31,800
really care about this part so much.

448
00:23:31,800 --> 00:23:32,000
It's

449
00:23:32,200 --> 00:23:35,200
more like, whether the Baseline

450
00:23:37,600 --> 00:23:41,000
Whether or not we would be drawing yet.

451
00:23:42,500 --> 00:23:48,100
If we would be drawing such that, the font that we're about to draw

452
00:23:48,200 --> 00:23:52,000
will go below, it doesn't matter where we actually advance to because

453
00:23:52,000 --> 00:23:53,700
that's actually too far, right?

454
00:23:54,600 --> 00:23:59,800
So in order to fix any more of that, part of it, we would need to

455
00:24:01,100 --> 00:24:02,300
Use the clipping rectangle.

456
00:24:02,600 --> 00:24:05,700
Now, maybe we should use the clipping rectangle, I don't know.

457
00:24:07,400 --> 00:24:10,600
We could, I mean maybe let's take a quick look because it's probably

458
00:24:10,600 --> 00:24:12,300
something worth discussing, right?

459
00:24:12,400 --> 00:24:15,700
Do you think it would be nice as making this Grabber handle bigger?

460
00:24:15,700 --> 00:24:17,200
Because honestly, I can never grab it.

461
00:24:17,200 --> 00:24:19,100
I always miss these days is too tiny.

462
00:24:20,200 --> 00:24:22,000
That's pretty easy too.

463
00:24:25,700 --> 00:24:26,100
To do.

464
00:24:26,100 --> 00:24:27,000
I suspect

465
00:24:33,100 --> 00:24:36,300
that is in here somewhere.

466
00:24:41,600 --> 00:24:46,200
Yeah, so this thing when it draws, these guys that size box is this

467
00:24:46,200 --> 00:24:50,500
thing over here, what I want to do is make the size of box, be

468
00:24:50,500 --> 00:24:51,500
expanded more.

469
00:24:51,500 --> 00:24:55,100
So I think this would be like an ad radius to situation kind of a

470
00:24:55,100 --> 00:24:55,500
thing.

471
00:24:56,500 --> 00:24:59,300
So after I make this rectangle, oops,

472
00:25:04,900 --> 00:25:08,600
I you know, give me an extra four pixels like make the thing big

473
00:25:08,600 --> 00:25:09,100
please.

474
00:25:13,300 --> 00:25:14,700
What are you complaining about?

475
00:25:18,300 --> 00:25:20,900
Ah, so you're telling me I can actually control it in both.

476
00:25:20,900 --> 00:25:21,800
Well, I don't care.

477
00:25:21,800 --> 00:25:22,700
That's all I really wanted.

478
00:25:22,700 --> 00:25:25,600
Anyway, and why did I close the game?

479
00:25:25,600 --> 00:25:28,000
Again, I always close the game for no reason.

480
00:25:28,700 --> 00:25:31,900
Anyway, now I've got a bigger thing to grab onto which is what I

481
00:25:31,900 --> 00:25:32,600
wanted.

482
00:25:33,800 --> 00:25:34,600
So that's nice.

483
00:25:36,200 --> 00:25:37,800
So yeah, so that's all good.

484
00:25:37,800 --> 00:25:40,200
And we can we can keep that from drawing outside.

485
00:25:40,200 --> 00:25:43,300
If we want to take a look at drawing, one more than we should have,

486
00:25:44,000 --> 00:25:45,700
and I'll show you what that looks like.

487
00:25:46,200 --> 00:25:48,700
And then we can take a look to see what the clip Breck situation is.

488
00:25:50,000 --> 00:25:53,600
So we'll all that would basically be is in here.

489
00:25:53,600 --> 00:25:56,500
What we would say is is at y itself.

490
00:26:02,600 --> 00:26:05,800
It's at why itself below the Min why level?

491
00:26:09,400 --> 00:26:12,100
Actually no, that's not quite right because we still might see a

492
00:26:12,100 --> 00:26:13,700
little bit of the font protruding.

493
00:26:14,100 --> 00:26:19,900
So we still want to do is at y - you know, with the next one that

494
00:26:19,900 --> 00:26:20,700
we're going to do.

495
00:26:28,100 --> 00:26:28,700
Right.

496
00:26:29,700 --> 00:26:30,500
I shouldn't say the next one.

497
00:26:31,200 --> 00:26:32,400
I guess what I'm trying to say is

498
00:26:34,400 --> 00:26:35,100
As follows.

499
00:26:51,100 --> 00:26:55,100
All I'm trying to say is here is our rectangle and we're trying to

500
00:26:55,100 --> 00:26:56,000
draw inside this.

501
00:26:57,000 --> 00:26:59,000
We might have the pointer to at why.

502
00:26:59,000 --> 00:26:59,800
But what?

503
00:27:00,000 --> 00:27:03,500
Her were at, you know, we're going to draw something because, you

504
00:27:03,500 --> 00:27:05,200
know, maybe the text is at the Baseline.

505
00:27:05,400 --> 00:27:09,500
We don't know whether this is going to protrude up into here, right?

506
00:27:09,800 --> 00:27:15,500
So rather, what I would like to see is I want to know if the previous

507
00:27:15,500 --> 00:27:18,100
one would have been there, right?

508
00:27:18,200 --> 00:27:19,500
If the previous one is here.

509
00:27:19,500 --> 00:27:20,800
That means the next one was here.

510
00:27:20,800 --> 00:27:23,300
And there's no way that we could possibly draw because we know we

511
00:27:23,300 --> 00:27:24,600
won't draw above the previous.

512
00:27:24,800 --> 00:27:28,600
So I just want to make sure there's no chance that the line that we're

513
00:27:28,600 --> 00:27:29,900
currently drawing, could have purchased

514
00:27:30,000 --> 00:27:30,600
at rooted.

515
00:27:31,600 --> 00:27:32,400
Right.

516
00:27:33,100 --> 00:27:37,800
And so you know, after we advance, I guess what I want to do is say

517
00:27:37,800 --> 00:27:44,700
well in fact I guess I could say something like this.

518
00:27:48,000 --> 00:27:49,200
B32.

519
00:27:50,600 --> 00:27:56,500
Clipped what I could say is clipped is going to be is the current at

520
00:27:56,500 --> 00:28:03,700
why the one before we do the advance is it already outside, right?

521
00:28:03,700 --> 00:28:07,600
So is at y already less than the profile wrecked.

522
00:28:08,100 --> 00:28:14,300
Minn dot y if it is then after the advanced we would break

523
00:28:17,500 --> 00:28:19,600
And in fact, I guess I could just do it here.

524
00:28:19,600 --> 00:28:23,900
I could say if the at Y is less than the Min y, then after the

525
00:28:23,900 --> 00:28:25,600
advanced we definitely don't care.

526
00:28:26,200 --> 00:28:29,200
So we just do envelope here.

527
00:28:30,100 --> 00:28:35,200
So now I believe what we should have gotten out of that, is that this

528
00:28:35,200 --> 00:28:37,600
should draw a little bit outside, right?

529
00:28:37,600 --> 00:28:44,400
So you can kind of see like it always draws one past the one that's

530
00:28:44,400 --> 00:28:45,800
completely contained.

531
00:28:46,000 --> 00:28:50,200
Is what we want because once we put clipping in, we're going to clip

532
00:28:50,200 --> 00:28:51,900
out the part that you shouldn't see.

533
00:28:52,100 --> 00:28:55,000
And so we want to leave, we still want that to draw.

534
00:28:55,000 --> 00:28:58,400
Otherwise, we would leave like kind of an empty Gap there, instead of

535
00:28:58,400 --> 00:29:01,600
seeing a little bit of what comes after it, which is what I would have

536
00:29:01,600 --> 00:29:02,700
preferred, right?

537
00:29:04,700 --> 00:29:10,300
Okay, so clipping rectangles, adding those to our system, I don't

538
00:29:10,300 --> 00:29:12,200
really think would be particularly difficult.

539
00:29:13,300 --> 00:29:16,100
I'll show you roughly, what that boils down to.

540
00:29:16,600 --> 00:29:18,200
So, inside the render group, right?

541
00:29:18,200 --> 00:29:21,700
We kind of have this concept of a camera transform at the moment.

542
00:29:21,900 --> 00:29:25,500
And so what we can do with the camera transform is, we could say, in

543
00:29:25,500 --> 00:29:30,300
addition to, you know, in fact we could also do it with an object

544
00:29:30,300 --> 00:29:32,500
transform, but we can do it in either place.

545
00:29:33,800 --> 00:29:34,100
We're just

546
00:29:34,300 --> 00:29:36,900
In addition to telling you how we want to transform the coordinates,

547
00:29:36,900 --> 00:29:40,100
we could also tell you how we want to clip them, right?

548
00:29:40,700 --> 00:29:44,000
So in the camera transform, we could say that there's a rectangle 2

549
00:29:44,200 --> 00:29:47,500
and this is the clip rect and by default that will be set to the whole

550
00:29:47,500 --> 00:29:51,200
screen, but if you ever want to narrow that region down you can

551
00:29:52,600 --> 00:29:53,100
Right?

552
00:29:53,100 --> 00:29:58,100
And so any place that we were previously dealing with the camera

553
00:29:58,100 --> 00:29:59,700
transform, we would now want to set that.

554
00:30:00,000 --> 00:30:00,600
Correct.

555
00:30:00,900 --> 00:30:03,600
So, you know, camera transform.

556
00:30:03,800 --> 00:30:04,900
You can see them in here.

557
00:30:08,300 --> 00:30:12,200
Yeah, like perspective orthographic and so on, right?

558
00:30:12,700 --> 00:30:13,500
The other thing

559
00:30:19,400 --> 00:30:23,700
You know, to be honest, let me just think this through, let me write

560
00:30:23,700 --> 00:30:26,400
the usage code first because I'm thinking that I'm there.

561
00:30:27,500 --> 00:30:32,700
I may want to track the cliprect separately for ease of use on the

562
00:30:32,700 --> 00:30:33,800
person side.

563
00:30:35,200 --> 00:30:37,500
Like I may want you be able to like push and Pop That.

564
00:30:37,500 --> 00:30:42,500
In fact I probably do so I think what I probably want is something

565
00:30:42,500 --> 00:30:48,000
like inside the render group, there's the clip rect and the clip.

566
00:30:48,000 --> 00:30:49,000
Rect is going to have to get

567
00:30:49,200 --> 00:30:50,200
Recorded.

568
00:30:50,200 --> 00:30:57,500
So essentially whenever you push something on to the, to the stack,

569
00:30:58,800 --> 00:31:00,200
it's going to have to have that in there.

570
00:31:00,400 --> 00:31:04,100
So when we do render entry bitmap or render entry rectangle,

571
00:31:07,300 --> 00:31:08,900
that's going to have to be included.

572
00:31:08,900 --> 00:31:13,400
So for rectangle it's not such a big deal because rectangle we can

573
00:31:13,400 --> 00:31:17,400
just clip already so we can just click the rectangle and store the

574
00:31:17,400 --> 00:31:18,200
rectangle by itself.

575
00:31:18,200 --> 00:31:21,300
But for bitmap we would actually need the clip.

576
00:31:21,300 --> 00:31:24,000
Rect to be set properly if that makes sense.

577
00:31:25,000 --> 00:31:27,600
And the other thing, I guess we could do if we wanted to and I have to

578
00:31:27,600 --> 00:31:31,200
think about whether we want to, but one thing we could do is inside

579
00:31:31,200 --> 00:31:33,600
here, we could also make the cliprect be something that just goes into

580
00:31:33,600 --> 00:31:34,400
the stream.

581
00:31:35,400 --> 00:31:35,900
And I know know how

582
00:31:36,100 --> 00:31:39,200
Feel about that, but that could be one way to one way to do it.

583
00:31:39,200 --> 00:31:40,300
That might be interesting.

584
00:31:41,000 --> 00:31:44,500
We're like, essentially, you you, you know, you that's actually one of

585
00:31:44,500 --> 00:31:47,700
the stream records is here's the new clipping, rectangle.

586
00:31:56,200 --> 00:31:57,600
I don't know that I love that, though.

587
00:31:59,400 --> 00:32:01,200
I think I would probably prefer.

588
00:32:03,600 --> 00:32:06,100
I think I would probably prefer it if that were not the case.

589
00:32:11,500 --> 00:32:13,000
Yeah, so I'm not going to do that.

590
00:32:13,300 --> 00:32:14,200
I'm not going to do that.

591
00:32:16,000 --> 00:32:21,500
Okay, so what I want to do here, I'm going to do sort of the simpler

592
00:32:21,500 --> 00:32:24,900
method first and then I'm going to do more complicated methods.

593
00:32:24,900 --> 00:32:26,000
Subsequent to that.

594
00:32:26,000 --> 00:32:29,500
I think because I think we should probably clean this up a little bit

595
00:32:29,700 --> 00:32:30,200
as well.

596
00:32:30,200 --> 00:32:35,000
Anyway, and what I would like to do here, is just say, okay, we know

597
00:32:35,000 --> 00:32:37,200
that render a direct route could just be clip directly.

598
00:32:37,400 --> 00:32:40,800
So the question is render entry bitmap, it can't be Cliff directly.

599
00:32:40,800 --> 00:32:44,800
And the reason for that is that although it's got a p and a size, we

600
00:32:44,800 --> 00:32:45,600
don't have any way.

601
00:32:45,700 --> 00:32:49,200
Way, if we were to we could we change that pee in the size to still

602
00:32:49,600 --> 00:32:53,900
basically create the right rectangle app, you know, pre clipped and

603
00:32:53,900 --> 00:32:55,400
store the clipped version of it.

604
00:32:55,500 --> 00:32:58,800
What we couldn't do is say how the texture coordinates had to be

605
00:32:58,800 --> 00:32:59,800
offset to a

606
00:33:00,000 --> 00:33:01,600
For the fact that it got clipped.

607
00:33:01,800 --> 00:33:02,300
Right?

608
00:33:02,900 --> 00:33:04,900
So well.

609
00:33:04,900 --> 00:33:06,000
And I guess now, I think about it.

610
00:33:06,100 --> 00:33:09,500
Maybe that's just all I should really store, right?

611
00:33:09,500 --> 00:33:12,800
Maybe that's the most useful thing to store, like, maybe the most

612
00:33:12,800 --> 00:33:16,100
useful thing to store is to store UV offset.

613
00:33:16,400 --> 00:33:20,400
And then what I can do is when we draw this bitmap, it'll just offset

614
00:33:20,400 --> 00:33:23,900
the UVS by that amount, and that'll be the end of it, right?

615
00:33:24,300 --> 00:33:26,100
So let's try that.

616
00:33:27,500 --> 00:33:29,800
When we do a push bitmap call,

617
00:33:30,000 --> 00:33:32,400
All, and we write one of those things on there.

618
00:33:36,000 --> 00:33:37,200
Here's our push bitmap.

619
00:33:39,100 --> 00:33:43,400
I'm just going to do entry UV offset, and that UV offset.

620
00:33:43,400 --> 00:33:46,300
I'll make be 00.

621
00:33:49,600 --> 00:33:54,300
Now, what I need to do is first, we have to do the opengl version cry

622
00:33:54,300 --> 00:33:56,700
because we have to render past now, both of which would have to be

623
00:33:56,700 --> 00:33:57,500
correct.

624
00:33:58,400 --> 00:34:02,300
So when we render a bitmap and we call open Jill rectangle, you can

625
00:34:02,300 --> 00:34:04,700
see, we've got the menu V and the max UV like.

626
00:34:04,700 --> 00:34:12,400
So and so, what I would want to do here is I want to offset those by

627
00:34:12,400 --> 00:34:14,000
whatever the offset actually is.

628
00:34:20,500 --> 00:34:22,199
I think that should be really straightforward.

629
00:34:22,400 --> 00:34:27,300
Now, the only question is, should we record the offset in the textile

630
00:34:27,300 --> 00:34:28,000
space?

631
00:34:31,400 --> 00:34:35,600
You know what space basically, should we encode the offset in?

632
00:34:35,900 --> 00:34:39,000
And I feel like, probably what we want to do is encode the offset and

633
00:34:39,000 --> 00:34:40,600
pixel space to be honest.

634
00:34:41,000 --> 00:34:42,900
That seems a little more sensible to me.

635
00:34:43,500 --> 00:34:46,300
And in fact, if we wanted to, we could maybe make this a little bit

636
00:34:46,300 --> 00:34:48,400
more sensible by doing like,

637
00:34:50,000 --> 00:34:52,000
You know, something like this.

638
00:34:55,400 --> 00:34:58,200
Where we just because we know that we can't have any bitmaps that are

639
00:34:58,200 --> 00:35:01,000
greater than 64 K wide or tall.

640
00:35:01,300 --> 00:35:05,000
What we could do here is say well, alright, you know, we create our

641
00:35:05,000 --> 00:35:09,100
one Texel thing and we create our menu V and R Max UV that were

642
00:35:09,100 --> 00:35:10,400
drawing for the rectangle.

643
00:35:10,600 --> 00:35:13,500
Well, now once we have this rectangle,

644
00:35:16,500 --> 00:35:21,600
We just need some information about how that's going to get clipped.

645
00:35:23,300 --> 00:35:23,600
You know what?

646
00:35:23,600 --> 00:35:24,500
Not to think about it.

647
00:35:25,200 --> 00:35:28,000
That's not enough information because I'm thinking about clipping off

648
00:35:28,000 --> 00:35:31,500
of one side and we don't really know that.

649
00:35:31,500 --> 00:35:34,800
So we're probably will probably have to actually score this as a real

650
00:35:35,400 --> 00:35:36,800
more as a real rectangle.

651
00:35:37,800 --> 00:35:42,000
Because because essentially what will happen is what if we have a

652
00:35:42,000 --> 00:35:43,200
clipping rectangle.

653
00:35:43,200 --> 00:35:47,000
You know, that's like this big and the thing we draw as like here but

654
00:35:47,000 --> 00:35:48,200
offsets not going to do it.

655
00:35:48,300 --> 00:35:50,500
So I think we're going to have to store this as a real thing, so

656
00:35:50,500 --> 00:35:51,000
that's fine.

657
00:35:51,000 --> 00:35:52,400
Because this is not a particularly good.

658
00:35:52,500 --> 00:35:56,200
way to store this anyway, to be completely honest with you, you know,

659
00:35:56,500 --> 00:35:59,800
because we're basically doing UV rendering, it seems like it would

660
00:36:00,000 --> 00:36:01,900
Would be way easier.

661
00:36:02,400 --> 00:36:10,000
If, when we do a bitmap that we render, we store enough information to

662
00:36:10,000 --> 00:36:11,300
actually do all the stuff we can do.

663
00:36:11,300 --> 00:36:15,900
Like, for example, this doesn't even have a rotation in it, right?

664
00:36:17,000 --> 00:36:20,400
We like so are our thing that we're pushing on here doesn't even

665
00:36:20,400 --> 00:36:22,900
support some of the things that we can actually do.

666
00:36:23,200 --> 00:36:25,300
So I think it would might be more interesting to say.

667
00:36:25,300 --> 00:36:27,800
All right, if we're going to like make this more real, that's actually

668
00:36:27,800 --> 00:36:28,700
make it more real.

669
00:36:28,900 --> 00:36:29,800
So what would we

670
00:36:30,000 --> 00:36:33,200
Need in order to do the full version.

671
00:36:34,100 --> 00:36:36,500
Well, we could do something like

672
00:36:39,700 --> 00:36:41,400
A base P, right?

673
00:36:42,000 --> 00:36:45,400
Where we store, you know, a corner and I guess maybe I'll draw this

674
00:36:45,400 --> 00:36:45,600
out.

675
00:36:45,600 --> 00:36:48,400
So, everyone's on the same page the way we were doing it before is we

676
00:36:48,400 --> 00:36:52,200
kind of had like a base fee and then we had you know a vector here you

677
00:36:52,200 --> 00:36:56,500
know in a vector here and this sort of filled itself in, right?

678
00:36:57,700 --> 00:37:02,300
And that could be a reason way to go.

679
00:37:02,300 --> 00:37:05,700
It's just a little over a specified, it would have allows you to turn

680
00:37:05,700 --> 00:37:07,800
this sort of stuff around when

681
00:37:08,200 --> 00:37:12,800
You normally wouldn't be able to like, you know, allows you to squish

682
00:37:12,800 --> 00:37:16,800
things in a way that we don't really want to support probably because

683
00:37:16,800 --> 00:37:21,000
it will create weird artifacts in how the text is interpolated.

684
00:37:21,200 --> 00:37:24,900
So we could do something where we have like a, you know, a vector here

685
00:37:25,200 --> 00:37:28,500
and a vector here, and I don't.

686
00:37:28,500 --> 00:37:31,500
And, you know, we might want to support non-uniform scaling, so we may

687
00:37:31,500 --> 00:37:36,800
need like just a one to one of these and then a multiplier for this,

688
00:37:36,800 --> 00:37:37,800
that says, how big this one?

689
00:37:37,900 --> 00:37:38,800
Is right?

690
00:37:38,800 --> 00:37:46,100
So, it would be something like a p-value, you know, and x-axis and a

691
00:37:46,100 --> 00:37:52,400
y-axis coefficient and so you just, it's just the perpendicular to the

692
00:37:52,400 --> 00:37:55,200
x-axis, but then it's multiplied by this to allow you to do

693
00:37:55,300 --> 00:37:57,400
non-uniform scale, right?

694
00:37:59,200 --> 00:38:02,600
So that would allow us to do any rectangle, we wanted, but it wouldn't

695
00:38:02,600 --> 00:38:03,900
allow us to say, what part of the bitmap.

696
00:38:03,900 --> 00:38:06,700
We actually want to show in their right.

697
00:38:07,900 --> 00:38:12,800
And furthermore, if we actually allow this rotation to happen like

698
00:38:12,800 --> 00:38:16,300
this, this makes it so that we can't actually clip it, right?

699
00:38:16,400 --> 00:38:17,000
You know what I mean?

700
00:38:17,300 --> 00:38:20,500
So this kind of makes the problem of well, if we wanted to clip it

701
00:38:20,500 --> 00:38:23,000
like this, this is no longer a rectangle.

702
00:38:23,100 --> 00:38:25,600
So we would accept to have to do the clipping ourselves which we

703
00:38:25,600 --> 00:38:28,200
probably don't want to do so that.

704
00:38:28,900 --> 00:38:31,500
Now that I've worked through pretty much answers the question for me,

705
00:38:31,500 --> 00:38:35,000
I think what we would want to do is have the clipping rectangle stored

706
00:38:35,000 --> 00:38:36,100
as part of the stream.

707
00:38:36,200 --> 00:38:38,300
So that you can just set a clipping rectangle, dump a bunch of things.

708
00:38:38,300 --> 00:38:41,700
And then unclip because otherwise, I feel like it's just going to be

709
00:38:41,700 --> 00:38:44,200
too much data stored per bitmap entry.

710
00:38:44,300 --> 00:38:46,900
And if we want to increase the throughput of that, we want to make it

711
00:38:46,900 --> 00:38:49,200
so that we can push a lot of bitmaps, it's just going to become

712
00:38:49,200 --> 00:38:49,800
problem.

713
00:38:50,600 --> 00:38:54,200
So I think that's probably what we would want to do.

714
00:38:54,300 --> 00:38:57,300
So that means I can hold off on editing this at all, at the moment.

715
00:38:59,100 --> 00:38:59,600
and,

716
00:39:00,000 --> 00:39:01,100
We will want to do that eventually.

717
00:39:01,100 --> 00:39:04,400
I think, and what I'll do here is say that there's a render group

718
00:39:04,400 --> 00:39:08,900
entry type render entry clip,

719
00:39:10,600 --> 00:39:11,100
Right?

720
00:39:12,400 --> 00:39:16,900
And so inside here, we just have a render entry clip rect

721
00:39:18,300 --> 00:39:20,400
Like so and the render entry clip.

722
00:39:20,400 --> 00:39:27,200
Rect is just going to be what region we are allowing at the moment and

723
00:39:27,200 --> 00:39:33,200
that should probably be not sure exactly how I suppose.

724
00:39:33,200 --> 00:39:37,200
These should probably be in pixels because I believe everything we

725
00:39:37,200 --> 00:39:38,900
store is currently in pixels.

726
00:39:39,400 --> 00:39:44,200
So I think we want to just do a Min and a Max and probably we could

727
00:39:44,200 --> 00:39:46,700
just do it as a rectangle to, right?

728
00:39:52,800 --> 00:39:56,700
Alexa could just call this clip.

729
00:39:59,200 --> 00:40:03,400
And so that would set the clip rect specifically and that would be all

730
00:40:03,400 --> 00:40:04,200
we would have to do.

731
00:40:05,100 --> 00:40:08,200
So if we're going to do that all of this stuff stays the same, the

732
00:40:08,200 --> 00:40:11,600
only difference now is when we end up with one of these render group

733
00:40:11,600 --> 00:40:17,300
entry types render entry clip, then all we have to do is say well,

734
00:40:20,800 --> 00:40:22,900
Whoops, whenever we get one of these.

735
00:40:24,500 --> 00:40:25,500
We read it out.

736
00:40:37,600 --> 00:40:39,200
Now, see, this isn't going to work either.

737
00:40:39,400 --> 00:40:41,500
This is really tricky adding clip Rex in here.

738
00:40:42,100 --> 00:40:46,100
The reason this isn't actually, this wouldn't actually work is because

739
00:40:46,100 --> 00:40:49,100
the render and the render groups get sorted.

740
00:40:49,400 --> 00:40:54,600
So, we really do need to know per entry what the clipping is, because

741
00:40:54,600 --> 00:40:59,600
they get moved around in order to depth sort, so we can't do that

742
00:40:59,600 --> 00:41:00,000
either.

743
00:41:01,000 --> 00:41:03,300
It seems like we really do need one per bitmap.

744
00:41:03,300 --> 00:41:07,500
If we wanted to support arbitrary clip regions which is pretty nasty,

745
00:41:07,600 --> 00:41:12,200
although I guess it doesn't really matter that much a modern-day GPU.

746
00:41:12,200 --> 00:41:15,900
Probably doesn't care and our software renderer certainly doesn't

747
00:41:15,900 --> 00:41:16,400
care.

748
00:41:17,900 --> 00:41:19,800
It's just, it's just more traffic.

749
00:41:25,100 --> 00:41:26,400
It's just a lot more traffic.

750
00:41:43,400 --> 00:41:46,500
I don't know folks maybe someone out there has a bright idea.

751
00:41:47,200 --> 00:41:49,800
I mean it could be that you know you'd want to re Arctic architect the

752
00:41:49,800 --> 00:41:52,900
rendering a little bit if you really cared about clip Breck's a lot

753
00:41:56,500 --> 00:41:57,100
and I don't know.

754
00:41:58,200 --> 00:41:59,600
and it seems, it certainly seems like a

755
00:42:00,200 --> 00:42:06,200
Right to have a ton of cliprect information packed in here for no real

756
00:42:06,200 --> 00:42:10,600
reason but on the other hand like I said I'm not sure.

757
00:42:11,800 --> 00:42:15,500
How you get around that if you want to do a render, that does sorting

758
00:42:16,200 --> 00:42:17,000
which we do.

759
00:42:26,100 --> 00:42:28,100
Well, I guess we'll just do it this way for now.

760
00:42:30,500 --> 00:42:31,700
and, you know,

761
00:42:33,600 --> 00:42:34,700
That's how that'll work.

762
00:42:36,100 --> 00:42:40,800
So, inside here in render entry bitmap, I guess what we would have to

763
00:42:40,800 --> 00:42:42,500
do for every bitmap that we output.

764
00:42:42,500 --> 00:42:47,400
We'd have to check the cliprect to see whether or not a news to

765
00:42:47,400 --> 00:42:48,200
change.

766
00:42:48,300 --> 00:42:48,500
I guess.

767
00:42:48,500 --> 00:42:51,500
One thing we could do to make this a little bit better is have the

768
00:42:51,500 --> 00:42:54,500
clip Rex actually just be indexed and then check the clip back index

769
00:42:54,500 --> 00:42:57,400
to see if it's changed and only if it's changed, set the clip rect

770
00:42:57,400 --> 00:42:58,000
differently.

771
00:42:59,800 --> 00:43:02,100
And in fact, you could do it like this.

772
00:43:07,300 --> 00:43:10,100
You could do something like this where every header has a clip, rect

773
00:43:10,100 --> 00:43:10,600
index.

774
00:43:10,800 --> 00:43:14,200
So when you come off the header, you would say something.

775
00:43:14,200 --> 00:43:24,500
Like, you 32 cliprect index equals zero and then we'd say, if header

776
00:43:24,900 --> 00:43:31,300
cliprect index is not equal to cliprect index, then we actually do it,

777
00:43:31,500 --> 00:43:32,000
right?

778
00:43:32,300 --> 00:43:33,900
We actually set the clip region.

779
00:43:36,000 --> 00:43:37,500
We actually praise it this way.

780
00:43:49,100 --> 00:43:56,100
So if the cliprect index is equal to the, the one that this header

781
00:43:56,100 --> 00:43:58,400
wants that, we don't have to do anything, but if it's not, then we do

782
00:43:58,400 --> 00:43:59,000
have to do something.

783
00:43:59,000 --> 00:43:59,900
So let's do it.

784
00:44:00,100 --> 00:44:02,400
The other thing we could do is we could make this so we don't actually

785
00:44:02,400 --> 00:44:04,300
expand the size of these either.

786
00:44:04,300 --> 00:44:05,200
We could do this.

787
00:44:06,700 --> 00:44:07,300
Right?

788
00:44:07,500 --> 00:44:10,700
Because that would be totally fine and so that leaves it as still just

789
00:44:10,700 --> 00:44:12,500
a just one d word entry.

790
00:44:13,300 --> 00:44:16,100
So we don't expand the, the traffic on the, on the group at all.

791
00:44:16,800 --> 00:44:19,600
So assuming that it's not what we need to do here is we need to call

792
00:44:19,600 --> 00:44:25,900
GL scissor in order to sort of restrict the bounds of of what's going

793
00:44:25,900 --> 00:44:26,200
to happen.

794
00:44:26,200 --> 00:44:29,400
Now, you haven't seen Jill scissor before, I don't think because I

795
00:44:29,400 --> 00:44:32,300
don't think we've ever called it by default, it will just be set to

796
00:44:32,300 --> 00:44:33,000
the right thing.

797
00:44:33,300 --> 00:44:34,900
So let me show you GL scissor.

798
00:44:34,900 --> 00:44:35,300
I never

799
00:44:35,600 --> 00:44:37,300
Amber opengl.

800
00:44:37,300 --> 00:44:39,200
There's like a dock stocks dot Geo.

801
00:44:39,200 --> 00:44:41,800
I was like, there's a place that people said to go that has prettier

802
00:44:41,800 --> 00:44:42,900
docks for us to use.

803
00:44:43,200 --> 00:44:44,200
I think this is it.

804
00:44:45,000 --> 00:44:50,100
And so GL scissor is the way for us to and I guess we can just look at

805
00:44:50,100 --> 00:44:50,800
the old cell.

806
00:44:50,900 --> 00:44:55,900
Yeah, GL scissor is a way of saying exactly what it is.

807
00:44:55,900 --> 00:44:59,800
We want to say it's saying let's set the region.

808
00:45:00,000 --> 00:45:05,200
We're going to draw inside of and by default it's set to the whole

809
00:45:05,200 --> 00:45:09,000
window but when we want to restrict the window, this is the way we

810
00:45:09,000 --> 00:45:10,300
would do it, right?

811
00:45:10,700 --> 00:45:13,000
And so, all we need to do is pass it.

812
00:45:13,000 --> 00:45:15,300
Those bounds and off we go.

813
00:45:15,800 --> 00:45:17,600
So, I'm going to say that.

814
00:45:17,600 --> 00:45:20,300
In addition, when we have our thing here, where we've got game render

815
00:45:20,300 --> 00:45:24,400
commands that game render commands, which I believe is in the platform

816
00:45:24,400 --> 00:45:24,900
thing.

817
00:45:28,900 --> 00:45:31,400
That game render commands in addition to the push.

818
00:45:31,400 --> 00:45:37,800
Buffer base thing, it's going to have some number of Clips like

819
00:45:37,800 --> 00:45:38,600
clipping.

820
00:45:40,900 --> 00:45:41,600
What's running for?

821
00:45:41,800 --> 00:45:45,700
It's going to have some number of clip, rectangles, and that needs to

822
00:45:45,700 --> 00:45:46,800
be specified in here.

823
00:45:47,000 --> 00:45:49,800
So in addition to all this stuff, there's basically a thing that's

824
00:45:49,800 --> 00:45:56,400
like, you know, cliprect count and a, some kind of a

825
00:46:03,200 --> 00:46:05,300
Guess, I don't know if you want to specify this.

826
00:46:06,600 --> 00:46:10,600
I don't think rectangle twos or actually specified here, right?

827
00:46:11,000 --> 00:46:12,900
But what we want to do is have a thing that's like clip.

828
00:46:12,900 --> 00:46:17,500
Rex, write something like this and so that gets passed through and

829
00:46:17,500 --> 00:46:20,000
that's how that gets rendered now.

830
00:46:21,700 --> 00:46:27,200
Yeah, so I guess we could do something like this struct game render

831
00:46:27,200 --> 00:46:28,200
cliprect.

832
00:46:28,400 --> 00:46:29,800
You could do something like that.

833
00:46:30,600 --> 00:46:32,500
Right, or something of that nature.

834
00:46:33,700 --> 00:46:35,800
So that would pass these through.

835
00:46:35,800 --> 00:46:39,800
And then what we could do is say, all right, let's grab whatever the

836
00:46:39,800 --> 00:46:40,300
clip wreck.

837
00:46:40,300 --> 00:46:43,500
Is that the new cliprect we need out of this thing.

838
00:46:44,500 --> 00:46:46,100
So this is the new clip.

839
00:46:47,800 --> 00:46:51,600
So we're going to take our commands clip Rex groups.

840
00:46:54,300 --> 00:46:57,800
And we're going to add to it, whatever the cliprect index is then

841
00:46:57,800 --> 00:46:59,400
we're going to do GL scissor.

842
00:46:59,600 --> 00:47:01,600
And what we can do is make this clip.

843
00:47:01,600 --> 00:47:06,900
Rect basically be exactly what we would pass to one of these things.

844
00:47:06,900 --> 00:47:11,000
So you know, something like that, I don't know, we can change that

845
00:47:11,000 --> 00:47:11,500
doesn't matter.

846
00:47:11,500 --> 00:47:13,800
As long as we can translate it, into one of these calls we're fine.

847
00:47:14,400 --> 00:47:17,100
So that will go through and that'll set the cliprect accordingly.

848
00:47:18,700 --> 00:47:23,400
And another thing we could do I suppose is say that Cliff tricks 0.

849
00:47:23,500 --> 00:47:27,400
Yeah well I mean we just say that clip rx0 has to be the whole screen.

850
00:47:41,700 --> 00:47:46,800
that way on Entry, we can just do the

851
00:47:48,200 --> 00:47:51,000
Well, you know, we could do to we don't even have to do that.

852
00:47:51,300 --> 00:47:52,100
I think about it.

853
00:47:52,300 --> 00:47:55,100
All we have to do is set clip rectangle next to something that isn't

854
00:47:55,100 --> 00:47:57,600
possible, Right?

855
00:48:00,900 --> 00:48:03,500
So if we want to we can separate a message saying that can't possibly

856
00:48:03,500 --> 00:48:04,000
be true.

857
00:48:04,100 --> 00:48:07,800
So every time through we'll set it, we probably also want to assert

858
00:48:07,800 --> 00:48:13,100
that the cliprect index is less than the number that we that they say

859
00:48:13,100 --> 00:48:16,600
we have so that we can check for out of bounds accesses their where

860
00:48:16,700 --> 00:48:19,600
somebody's passing at bogus cliprect Index, right?

861
00:48:21,300 --> 00:48:22,400
But that's about it.

862
00:48:23,500 --> 00:48:28,700
So if we if we go with that so now we have a little thing of clip.

863
00:48:28,700 --> 00:48:33,700
Rex anyone can reference a clip rect and off we go then I've got a

864
00:48:33,700 --> 00:48:36,300
bunch of changes now that I need to make to support that.

865
00:48:37,100 --> 00:48:40,000
So we know that this is going to be a u16 in here.

866
00:48:40,300 --> 00:48:41,100
That's all fine.

867
00:48:42,500 --> 00:48:45,600
And I guess what I should also do is when we do that push render

868
00:48:45,600 --> 00:48:50,200
element, I'll do cliprect index and that cliprect index will be like

869
00:48:50,200 --> 00:48:53,000
the group current cliprect index

870
00:48:53,200 --> 00:48:54,200
Something like that.

871
00:49:02,100 --> 00:49:05,300
And that should be sufficient.

872
00:49:05,400 --> 00:49:10,100
I think I think so.

873
00:49:10,100 --> 00:49:11,300
Yeah we'll say that.

874
00:49:11,300 --> 00:49:13,100
We don't have that yet and that's fine.

875
00:49:13,100 --> 00:49:14,800
UV offset is nonsense.

876
00:49:14,800 --> 00:49:15,800
We got rid of that.

877
00:49:16,900 --> 00:49:27,300
And so now in here this thing to actually exist that can be in render

878
00:49:27,300 --> 00:49:27,900
group.

879
00:49:29,500 --> 00:49:30,500
So our render group can have

880
00:49:30,600 --> 00:49:35,200
This thing here that we call a game render clip.

881
00:49:35,200 --> 00:49:35,700
Rect

882
00:49:37,000 --> 00:49:39,500
It could just be called a Red Roof, but since it's exposed externally,

883
00:49:39,500 --> 00:49:40,800
I called it that don't ask me why?

884
00:49:40,800 --> 00:49:44,700
I don't know why that's just this stuff.

885
00:49:46,800 --> 00:49:47,200
Right.

886
00:49:50,300 --> 00:49:50,900
And that's it.

887
00:49:51,900 --> 00:49:56,300
So we're basically, you know, done with the actual support part of it,

888
00:49:56,300 --> 00:49:59,400
but what we want to and we now have to go through and actually do some

889
00:49:59,400 --> 00:50:02,000
of the clean up some of those details.

890
00:50:02,000 --> 00:50:02,500
Right.

891
00:50:02,500 --> 00:50:05,500
So now we need a way of people for people to actually specify these

892
00:50:05,500 --> 00:50:06,000
things.

893
00:50:06,100 --> 00:50:09,900
So inside the render group, we have to have a thing in here, which is

894
00:50:09,900 --> 00:50:12,100
like current cliprect index.

895
00:50:12,900 --> 00:50:16,100
And that current cliprect index is going to have to get initialized to

896
00:50:16,100 --> 00:50:17,200
0, right?

897
00:50:17,500 --> 00:50:19,100
So when we have like,

898
00:50:20,800 --> 00:50:24,600
The generation ID or whatever getting set here and we initialize this

899
00:50:24,600 --> 00:50:27,500
stuff like here is the begin render group stuff in there.

900
00:50:27,500 --> 00:50:32,700
We have to do current cliprect index equals zero and we're also going

901
00:50:32,700 --> 00:50:34,000
to have to do a push.

902
00:50:34,300 --> 00:50:41,200
We got to push data onto the push buffer or we have to reserve some

903
00:50:41,200 --> 00:50:46,800
room for actually having, you know, some of these

904
00:50:48,600 --> 00:50:51,600
Some of these clip Rex, like we need an actual array for them.

905
00:50:52,200 --> 00:50:59,800
So, we've got a game render commands thing, but I'm not sure who

906
00:51:00,000 --> 00:51:06,500
Actually where we actually get the clip direct stuff from.

907
00:51:07,700 --> 00:51:11,900
So we're when we actually push, who pushes where do we push?

908
00:51:11,900 --> 00:51:13,300
We push a render element.

909
00:51:19,000 --> 00:51:22,500
So when we push on, when we push these on, we just use the push,

910
00:51:22,500 --> 00:51:25,500
buffer base, plus the push, buffer size, so we're just kind of putting

911
00:51:25,500 --> 00:51:28,100
it onto the end of the push buffer, right?

912
00:51:28,100 --> 00:51:29,900
So nobody allocates any memory.

913
00:51:29,900 --> 00:51:32,700
There's no it doesn't call isn't using Arena or any of that stuff.

914
00:51:32,700 --> 00:51:34,800
It just does the pushing manually.

915
00:51:35,000 --> 00:51:38,000
It's how that works, right?

916
00:51:38,100 --> 00:51:39,300
Which doesn't make a whole lot of sense.

917
00:51:39,300 --> 00:51:41,100
I don't know why we didn't bother just using the arena.

918
00:51:41,100 --> 00:51:43,800
Maybe we wrote this before the arena and not sure doesn't really

919
00:51:43,800 --> 00:51:46,000
matter but point being that's how that goes.

920
00:51:46,300 --> 00:51:48,500
So what we could do there is we

921
00:51:48,700 --> 00:51:52,600
I would say that when we initially get the push, before we push one on

922
00:51:52,600 --> 00:51:56,200
there, or what we could do, we could even just hard code, the limit if

923
00:51:56,200 --> 00:51:57,100
we wanted to.

924
00:51:57,300 --> 00:52:00,400
I don't know if that's a good idea because we probably want to support

925
00:52:00,400 --> 00:52:02,300
an arbitrary number of clip rectangles.

926
00:52:05,300 --> 00:52:09,000
So, I'm not sure what the best trade-off is here.

927
00:52:09,900 --> 00:52:10,900
Ideally,

928
00:52:21,500 --> 00:52:22,500
I'm having a thought.

929
00:52:24,800 --> 00:52:28,000
I'm having a thought and it's kind of crazy.

930
00:52:29,400 --> 00:52:31,100
But I had it.

931
00:52:31,100 --> 00:52:32,000
So here it comes.

932
00:52:33,100 --> 00:52:35,800
You ready for this because it's banana cakes.

933
00:52:36,500 --> 00:52:40,600
So, what I want to do is I want to support an arbitrary number of

934
00:52:40,600 --> 00:52:44,200
clip, Rex up to the amount that would fit in our push buffer space.

935
00:52:44,200 --> 00:52:47,500
So if we have, you know, a big old hunk of memory for the push buffer,

936
00:52:47,500 --> 00:52:50,100
if you want to use up some of that for generating clip, Rex, I want

937
00:52:50,100 --> 00:52:50,900
that to just work.

938
00:52:52,200 --> 00:52:56,700
So what I'm going to do is I'm going to say well okay let's suppose

939
00:52:56,800 --> 00:52:59,100
let's just I'll give you a for instance here.

940
00:52:59,500 --> 00:53:05,700
Let's suppose we have an actual pushable push wrecked so I mean a

941
00:53:05,700 --> 00:53:06,000
clip.

942
00:53:06,000 --> 00:53:09,800
Rect so like I said before we actually have one on here

943
00:53:13,200 --> 00:53:14,500
and this is a record of a clip.

944
00:53:14,500 --> 00:53:15,000
Rect

945
00:53:22,600 --> 00:53:27,200
And the clip bricks stores and actual game render cliprect that's the

946
00:53:27,200 --> 00:53:30,700
data and then it also stores render entry clip.

947
00:53:30,700 --> 00:53:32,200
Rect that's whatever the next clip.

948
00:53:32,200 --> 00:53:32,800
Rect is.

949
00:53:35,400 --> 00:53:35,900
Okay.

950
00:53:37,600 --> 00:53:41,400
so that means in here when we do current cliprect index,

951
00:53:43,000 --> 00:53:46,700
All I would say is, all right.

952
00:53:46,700 --> 00:53:50,400
I'm going to do a push render element.

953
00:53:50,400 --> 00:53:52,800
I'm going to do a push render elements or rather.

954
00:53:52,800 --> 00:53:56,600
I'm just going to do a push cliprect, right?

955
00:53:56,600 --> 00:53:59,500
And in fact, I guess I'll do it this way.

956
00:53:59,500 --> 00:53:59,700
I'll

957
00:54:00,100 --> 00:54:05,700
Chris cliprect who are, I'll do, push clip rect and the push cliprect

958
00:54:05,700 --> 00:54:07,900
will be the whole screen.

959
00:54:10,700 --> 00:54:12,400
I guess, one problem here is, I don't really know what the whole

960
00:54:12,400 --> 00:54:15,500
screen is quite yet.

961
00:54:22,700 --> 00:54:23,700
That's a little dicey.

962
00:54:24,600 --> 00:54:25,500
I admit that.

963
00:54:27,000 --> 00:54:27,900
Let's go in here.

964
00:54:29,100 --> 00:54:30,600
And deal with that for one second.

965
00:54:33,800 --> 00:54:37,700
Okay, so this is the first place I can actually do this, right?

966
00:54:38,600 --> 00:54:45,000
So once we're in here, I would have to do something like, okay, the

967
00:54:45,000 --> 00:54:45,900
render group,

968
00:54:52,300 --> 00:54:55,000
the render group at this point can do

969
00:54:58,900 --> 00:55:03,300
the actual operation that I want once it gets to this point, so I can

970
00:55:03,300 --> 00:55:05,300
push a clip rect on

971
00:55:07,300 --> 00:55:09,500
And the clip, rect can be the entire window.

972
00:55:17,100 --> 00:55:19,800
okay, so that

973
00:55:20,900 --> 00:55:28,400
I think is what I want and in here in addition to current cliprect

974
00:55:28,400 --> 00:55:34,800
index, I need another thing which is that total or Clipper count, all

975
00:55:34,800 --> 00:55:36,400
right, and now I think I'm done.

976
00:55:36,900 --> 00:55:41,600
So here's the way I think this should work in when we actually do our

977
00:55:41,600 --> 00:55:46,800
pushes of things like up in here where we have like push this push

978
00:55:46,800 --> 00:55:47,400
that.

979
00:55:47,900 --> 00:55:50,500
So here is like a push wrecked.

980
00:55:52,000 --> 00:55:52,800
Call.

981
00:55:57,500 --> 00:56:01,500
Before we do our push wrecked, we're going to have Push clip rect

982
00:56:03,200 --> 00:56:05,700
and that's not going to have any transforms or anything.

983
00:56:05,800 --> 00:56:09,400
It's just going to have what is the region that you are expecting to

984
00:56:09,400 --> 00:56:09,900
clip?

985
00:56:10,200 --> 00:56:10,800
Right?

986
00:56:12,200 --> 00:56:14,400
Although, I guess if I wanted to, I could make it so that they go

987
00:56:14,400 --> 00:56:15,300
through the transform.

988
00:56:16,400 --> 00:56:18,500
I guess why not now that, I think about it.

989
00:56:25,800 --> 00:56:31,000
so I could actually have one of these but then I will also have Push

990
00:56:31,000 --> 00:56:31,700
clip rect

991
00:56:33,800 --> 00:56:34,900
What does the direct one?

992
00:56:38,300 --> 00:56:41,000
So this one's just going to be like, you know,

993
00:56:48,400 --> 00:56:50,200
so, when I push the render element,

994
00:56:53,400 --> 00:56:55,000
I'm going to get back a render attribute clip.

995
00:56:55,000 --> 00:56:55,500
Rect

996
00:57:00,800 --> 00:57:04,800
And I don't care what the sort key is the sort can be, whatever.

997
00:57:04,800 --> 00:57:06,200
It doesn't matter, right?

998
00:57:06,200 --> 00:57:08,500
The sort key is irrelevant and I'll show you why in a second.

999
00:57:09,100 --> 00:57:10,700
So I'm going to do is going to push this on there.

1000
00:57:11,500 --> 00:57:14,200
I now have a place to record the clip rect properly.

1001
00:57:16,400 --> 00:57:18,400
Any here, I will track.

1002
00:57:28,800 --> 00:57:29,100
Where?

1003
00:57:29,100 --> 00:57:30,000
The last, whatever?

1004
00:57:30,000 --> 00:57:30,700
The last one.

1005
00:57:31,000 --> 00:57:32,700
Wait, I don't even need that.

1006
00:57:32,900 --> 00:57:33,600
I'm an idiot.

1007
00:57:34,400 --> 00:57:35,600
I don't even need that at all.

1008
00:57:35,700 --> 00:57:37,300
In fact, all we need is this.

1009
00:57:37,400 --> 00:57:38,600
We don't even need the entry.

1010
00:57:38,600 --> 00:57:39,900
This is getting ridiculous.

1011
00:57:40,100 --> 00:57:41,500
How crazy this is going to be.

1012
00:57:41,700 --> 00:57:42,800
We don't even need this at all.

1013
00:57:43,700 --> 00:57:44,500
That's not there.

1014
00:57:46,300 --> 00:57:50,200
So I could actually I guess I could say, let's call this.

1015
00:57:50,800 --> 00:57:52,700
Let's not call it that anymore.

1016
00:57:52,700 --> 00:57:54,400
Will literally just make it be.

1017
00:57:57,400 --> 00:57:58,300
One of these things.

1018
00:58:06,800 --> 00:58:07,300
Okay.

1019
00:58:08,700 --> 00:58:11,400
So we're going to want to push on one of these render into clip Rex.

1020
00:58:11,500 --> 00:58:13,100
So here is US pushing it on.

1021
00:58:13,300 --> 00:58:20,000
And then once we have it, we just set the x to the X and we just

1022
00:58:20,000 --> 00:58:21,900
truncate the values, right?

1023
00:58:22,000 --> 00:58:25,000
Because we know that, the screen can't be any bigger than that.

1024
00:58:25,900 --> 00:58:28,700
And so, we're just going to assume that that's fine.

1025
00:58:30,100 --> 00:58:32,600
Like if you were actually sitting in cliprect out in the middle of

1026
00:58:32,600 --> 00:58:35,400
nowhere, you wouldn't see it on the screen anyway.

1027
00:58:35,600 --> 00:58:37,800
And so we don't care if the value is got truncated.

1028
00:58:39,500 --> 00:58:41,400
In fact, that's just an error, I don't even care.

1029
00:58:42,200 --> 00:58:46,100
So we call Push cliprect we put that on there and we don't care

1030
00:58:46,100 --> 00:58:46,500
anymore.

1031
00:58:46,900 --> 00:58:50,500
Now the one thing we do care about is that this clip rect has to have

1032
00:58:50,500 --> 00:58:51,100
a number.

1033
00:58:51,200 --> 00:58:54,800
So every time, we push one of those on, we have to go to our group

1034
00:58:55,400 --> 00:58:56,500
cliprect count.

1035
00:58:58,700 --> 00:59:01,100
We need to know what the cliprect was.

1036
00:59:01,900 --> 00:59:06,200
So we have a result value that result value is going to be whatever

1037
00:59:06,200 --> 00:59:07,700
the cliprect count was.

1038
00:59:08,700 --> 00:59:11,700
So the only thing I really need to do here is store these two things.

1039
00:59:12,800 --> 00:59:15,800
So we store, you know, we say whatever the one you pushed as you get

1040
00:59:15,800 --> 00:59:16,800
back that one.

1041
00:59:16,800 --> 00:59:18,800
So the first time you push it is put is the perfect 0.

1042
00:59:18,800 --> 00:59:20,300
Next time is one blah blah.

1043
00:59:20,500 --> 00:59:24,400
So that happens and anytime you want to put your clip, rect on that

1044
00:59:24,500 --> 00:59:27,300
obeys, the object transform, you could do that as well.

1045
00:59:29,100 --> 00:59:32,100
Like so and that'll just follow the same path.

1046
00:59:32,100 --> 00:59:36,700
So you push it, you know, you push a p on there and

1047
00:59:43,700 --> 00:59:47,600
yeah, you get back all the rest of this nonsense and then you just

1048
00:59:47,600 --> 00:59:51,900
say, all right, we've got the, the wrecked, the the entry basis, the p

1049
00:59:51,900 --> 00:59:58,700
and the dim, so all we would need to do now is translate those into

1050
01:00:01,200 --> 01:00:02,200
Integer coordinates.

1051
01:00:02,500 --> 01:00:03,600
So we can hear what we would do.

1052
01:00:03,600 --> 01:00:07,800
We wouldn't ever do this part, we just once we determined that the

1053
01:00:07,800 --> 01:00:14,900
basis was valid, we would do the push cliprect with the actual values

1054
01:00:14,900 --> 01:00:15,900
that we computed.

1055
01:00:16,400 --> 01:00:18,300
So it's like he's 0.

1056
01:00:20,700 --> 01:00:22,400
Round real 32 and 32.

1057
01:00:23,900 --> 01:00:26,900
And so, all we're going to do here is just hoops.

1058
01:00:35,200 --> 01:00:37,900
All we're going to do here is just round these guys out.

1059
01:00:41,200 --> 01:00:47,100
So we got p 0 or I guess we could say PX and DMX.

1060
01:00:50,300 --> 01:00:54,700
Stop typing troubles and py and dim why?

1061
01:00:56,800 --> 01:00:59,300
And that pushes the cliprect on through a transform.

1062
01:00:59,300 --> 01:01:03,100
So if you want to use the standard notation that we've been using, you

1063
01:01:03,100 --> 01:01:04,400
can get that transform as well.

1064
01:01:05,000 --> 01:01:06,700
Alright, so,

1065
01:01:09,400 --> 01:01:13,300
Whenever you're actually doing stuff, you can do your cliprect in the

1066
01:01:13,300 --> 01:01:14,600
in clip.

1067
01:01:14,600 --> 01:01:20,400
Rect index nonsense and obviously these things are going to have to be

1068
01:01:20,400 --> 01:01:21,200
truncated.

1069
01:01:21,400 --> 01:01:23,000
We can't assert here.

1070
01:01:23,400 --> 01:01:32,000
In fact we could do a safe truncate to you 16 and that way it would it

1071
01:01:32,000 --> 01:01:33,000
would assert for us.

1072
01:01:36,700 --> 01:01:37,500
Nowhere.

1073
01:01:51,200 --> 01:01:56,700
Okay, so this would take a un 32 and it will assert that it's less

1074
01:01:56,700 --> 01:02:00,500
than the maximum value for the u16, and then it would actually convert

1075
01:02:00,500 --> 01:02:00,800
it.

1076
01:02:03,100 --> 01:02:03,500
Right.

1077
01:02:04,900 --> 01:02:08,400
Okay, so

1078
01:02:11,300 --> 01:02:12,500
Why that's result in there.

1079
01:02:13,400 --> 01:02:15,500
So now we have the ability to push the clip rex on

1080
01:02:17,500 --> 01:02:20,500
I'm over time or and I, I should take the pig head off because I'm not

1081
01:02:20,500 --> 01:02:21,600
really being piggy right now.

1082
01:02:22,200 --> 01:02:22,900
To be honest.

1083
01:02:25,500 --> 01:02:30,600
all right, so we've got the to push clip Rex and

1084
01:02:32,400 --> 01:02:37,000
what is the these guys are basically correct except for the fact that

1085
01:02:37,000 --> 01:02:38,400
they don't have the render group,

1086
01:02:41,700 --> 01:02:43,300
Under the head edit right there.

1087
01:02:44,700 --> 01:02:45,800
Didn't even need to see it.

1088
01:02:47,800 --> 01:02:50,000
Game render cliprect unknown size.

1089
01:02:50,000 --> 01:02:52,400
That's true because this now no longer a thing.

1090
01:02:53,700 --> 01:02:59,800
This is actually render entry cliprect.

1091
01:03:00,800 --> 01:03:04,100
Go and the platform code.

1092
01:03:07,900 --> 01:03:14,200
Wherever that is happening, is actually going to be render entry

1093
01:03:14,200 --> 01:03:15,000
clipart.

1094
01:03:16,500 --> 01:03:21,300
All right, so now I think we're all most there.

1095
01:03:21,700 --> 01:03:24,400
The only thing that we have to do is the weird stuff that I was

1096
01:03:24,400 --> 01:03:26,500
alluding to where I was like, this is going to be crazy.

1097
01:03:27,000 --> 01:03:30,400
So what I've done is I wanted to make it so that any time during the

1098
01:03:30,400 --> 01:03:32,100
rendering you can just record a clip.

1099
01:03:32,100 --> 01:03:32,600
Rect.

1100
01:03:32,600 --> 01:03:34,200
So that's what we do, right.

1101
01:03:34,200 --> 01:03:37,200
Anytime there's a clip rect comes in a new one, we stick it in the

1102
01:03:37,200 --> 01:03:40,700
render entry like we stick it in the push buffer as everything else is

1103
01:03:40,700 --> 01:03:41,800
going right?

1104
01:03:42,000 --> 01:03:45,500
And we remember what number it is like which ordinal it is so that we

1105
01:03:45,500 --> 01:03:46,200
can refer to

1106
01:03:46,300 --> 01:03:48,400
Anyone who wants to clip to it right?

1107
01:03:48,900 --> 01:03:50,800
But the problem is now what do we do?

1108
01:03:50,800 --> 01:03:54,900
We need a an array of those that we can access do random access to

1109
01:03:54,900 --> 01:03:57,200
really quickly and we want them all compacted together.

1110
01:03:57,200 --> 01:03:59,600
So they're nice and fit in the cache and we can just grab them out

1111
01:03:59,600 --> 01:04:00,500
really quickly as necessary.

1112
01:04:00,500 --> 01:04:02,000
Like we want it all nice and whatever.

1113
01:04:02,000 --> 01:04:02,500
Right?

1114
01:04:02,800 --> 01:04:03,900
Well, hey guess what?

1115
01:04:06,000 --> 01:04:13,600
Actually, when we are doing our rendering, you can actually see this

1116
01:04:13,600 --> 01:04:14,500
stuff occur.

1117
01:04:14,600 --> 01:04:15,200
Right.

1118
01:04:15,200 --> 01:04:22,400
We Loop through and we do our entry sorting that stuff actually has to

1119
01:04:22,400 --> 01:04:27,000
go through all of the entries to prepare them for that.

1120
01:04:27,000 --> 01:04:27,400
Right?

1121
01:04:27,500 --> 01:04:32,100
I mean we actually we had to actually do that work.

1122
01:04:32,100 --> 01:04:33,900
At some point I believe.

1123
01:04:39,200 --> 01:04:40,100
I could be wrong about that.

1124
01:04:40,100 --> 01:04:45,400
In fact, maybe this is not as smart as I thought it was because we do

1125
01:04:45,400 --> 01:04:47,200
we actually build those simultaneously.

1126
01:04:48,400 --> 01:04:49,600
There's going to be a big letdown.

1127
01:04:56,500 --> 01:04:57,400
Mmm.

1128
01:04:57,800 --> 01:04:59,000
Yeah, we do.

1129
01:05:00,100 --> 01:05:01,200
Oh, that's so sad.

1130
01:05:05,600 --> 01:05:06,100
Hmm.

1131
01:05:06,100 --> 01:05:08,400
So we put the sort at the end.

1132
01:05:09,200 --> 01:05:11,200
Well it's not really that big of a letdown.

1133
01:05:11,200 --> 01:05:12,000
I guess it just means.

1134
01:05:12,000 --> 01:05:14,900
I have to use the next pointer that I didn't really want to use,

1135
01:05:15,400 --> 01:05:15,900
right?

1136
01:05:16,000 --> 01:05:19,500
I was hoping that I wouldn't have to do that but I did.

1137
01:05:20,500 --> 01:05:23,000
That's not a starter huge deal, but I thought it was going to be

1138
01:05:23,000 --> 01:05:23,600
cooler.

1139
01:05:24,100 --> 01:05:25,900
Wasn't as cool as I thought it was going to be.

1140
01:05:28,300 --> 01:05:29,900
Whine, whine, whine.

1141
01:05:29,900 --> 01:05:30,200
All right.

1142
01:05:30,200 --> 01:05:34,300
So when we do an end render group, I guess it just assumes that the

1143
01:05:34,300 --> 01:05:36,000
commands are correct.

1144
01:05:37,200 --> 01:05:43,600
When we go to render them, it's going to have to do the sort, right?

1145
01:05:44,000 --> 01:05:44,800
And

1146
01:05:47,800 --> 01:05:49,400
And so, who actually does?

1147
01:05:52,300 --> 01:05:53,100
That op.

1148
01:05:57,600 --> 01:05:58,600
Tell me who does it?

1149
01:06:01,900 --> 01:06:06,800
Inside render dot CPP, when we call render commands to bitmap who

1150
01:06:06,800 --> 01:06:07,700
actually does that.

1151
01:06:07,700 --> 01:06:09,500
So, when third your handmade us, you pee

1152
01:06:14,600 --> 01:06:15,300
So it's right here.

1153
01:06:16,700 --> 01:06:21,100
So you can see we generate the render commands and then we come out of

1154
01:06:21,100 --> 01:06:24,300
here and we do the audio,

1155
01:06:25,300 --> 01:06:28,800
and then finally, at the end,

1156
01:06:43,100 --> 01:06:43,700
Here it is.

1157
01:06:45,700 --> 01:06:47,900
So here's the bit that does that rendering.

1158
01:06:48,500 --> 01:06:53,000
So you can kind of see here we come through and we make the sort stuff

1159
01:06:53,000 --> 01:06:56,800
we call win32 display, buffer in window.

1160
01:07:00,800 --> 01:07:04,600
And so this stuff right here is either going to call opengl renderer

1161
01:07:04,600 --> 01:07:05,300
commands.

1162
01:07:05,600 --> 01:07:07,300
So it's sort entries right here.

1163
01:07:07,300 --> 01:07:08,600
Does the sort

1164
01:07:10,100 --> 01:07:12,200
And what that what sort of entries?

1165
01:07:14,400 --> 01:07:18,200
Just like what, with what sort of entries does, we can do the same

1166
01:07:18,200 --> 01:07:18,900
thing.

1167
01:07:21,400 --> 01:07:22,400
With the clip Rex.

1168
01:07:22,700 --> 01:07:27,600
So basically what we do is say okay, there's sort memory, right?

1169
01:07:28,400 --> 01:07:30,100
And there's cliprect memory.

1170
01:07:32,400 --> 01:07:36,800
And we need to just linear rely, linearize, our clip, Rex.

1171
01:07:36,900 --> 01:07:38,900
So we need to like copy clip Rex

1172
01:07:45,000 --> 01:07:45,200
Right.

1173
01:07:47,100 --> 01:07:49,400
For when you're a step for X.

1174
01:07:49,800 --> 01:07:55,200
So that would pull them out and put them into a buffer that can hold

1175
01:07:55,200 --> 01:07:58,900
them in a linear fashion and be done.

1176
01:08:00,200 --> 01:08:01,000
So, yeah.

1177
01:08:01,000 --> 01:08:02,700
Lets you display buffer and window.

1178
01:08:08,900 --> 01:08:10,500
This is basically the same.

1179
01:08:12,200 --> 01:08:13,600
The exact same stuff.

1180
01:08:15,600 --> 01:08:19,000
It's probably something we should make a little bit more carefully.

1181
01:08:19,000 --> 01:08:23,000
Meaning this should just be probably utility because this is just

1182
01:08:23,000 --> 01:08:23,800
going to get copied.

1183
01:08:23,800 --> 01:08:24,300
Exactly.

1184
01:08:24,300 --> 01:08:27,300
And that's probably not so useful.

1185
01:08:29,700 --> 01:08:30,500
Fact, I'll do it.

1186
01:08:36,399 --> 01:08:39,000
So really we just need needed clip memory.

1187
01:08:45,700 --> 01:08:46,700
I spelled it wrong.

1188
01:08:51,600 --> 01:08:52,100
There we go.

1189
01:08:55,200 --> 01:08:57,700
so, this is

1190
01:09:00,399 --> 01:09:02,399
Going to give us the memory that we need.

1191
01:09:03,100 --> 01:09:07,500
And all I really need here is, I need to have a variable to store

1192
01:09:07,500 --> 01:09:07,899
that.

1193
01:09:07,899 --> 01:09:10,700
So in addition to the current sort memory, right?

1194
01:09:10,800 --> 01:09:13,200
I've got the current clip memory.

1195
01:09:27,100 --> 01:09:29,000
And yet those are adaptable.

1196
01:09:29,200 --> 01:09:31,899
I don't really know why at some point, we can probably say that

1197
01:09:31,899 --> 01:09:36,500
they're just not but, you know, for the moment they are

1198
01:09:39,000 --> 01:09:41,100
And if we didn't need to store that, I guess they wouldn't have to be,

1199
01:09:42,300 --> 01:09:45,399
but then when we come in here, we just passed the clip memory in and

1200
01:09:45,399 --> 01:09:45,899
back in.

1201
01:09:47,200 --> 01:09:48,000
Linearize it.

1202
01:09:53,100 --> 01:09:59,600
So I suppose the other thing, you know, one way of avoiding having to

1203
01:09:59,600 --> 01:10:03,400
do all this was I could have made it so that each one of the headers

1204
01:10:03,400 --> 01:10:05,200
has a pointer to its cliprect.

1205
01:10:05,200 --> 01:10:08,600
The problem is I just felt like that was really adding way too much

1206
01:10:08,600 --> 01:10:10,400
data to the system.

1207
01:10:10,800 --> 01:10:16,000
At that point, I don't know like it may be that that was a smarter way

1208
01:10:16,000 --> 01:10:19,900
to do it but you just point back into there but I don't know.

1209
01:10:20,000 --> 01:10:20,800
That's just what I

1210
01:10:22,000 --> 01:10:24,600
Just sort of my gut feeling on that.

1211
01:10:25,800 --> 01:10:27,100
So yeah, so hard to say.

1212
01:10:27,400 --> 01:10:28,100
But anyway,

1213
01:10:29,400 --> 01:10:30,400
sort entries.

1214
01:10:33,400 --> 01:10:36,300
Here is our linearize clip Rex.

1215
01:10:43,500 --> 01:10:47,400
And all this would do is exactly what I just said.

1216
01:10:47,400 --> 01:10:52,900
So it's just going to take essentially like a pointer to the game

1217
01:10:52,900 --> 01:10:57,600
entry cliprect version and it's going to walk those pointers, right?

1218
01:10:57,800 --> 01:11:00,500
So it's going to go like okay, game entry.

1219
01:11:16,600 --> 01:11:19,200
like Sam, and it's going to take

1220
01:11:27,400 --> 01:11:29,100
And it will overwrite.

1221
01:11:29,200 --> 01:11:32,000
Well, not really over, right, but set in the first place.

1222
01:11:37,400 --> 01:11:38,400
This pointer.

1223
01:11:46,200 --> 01:11:47,000
Where is it at?

1224
01:11:51,700 --> 01:11:52,900
It'll set this pointer.

1225
01:11:54,600 --> 01:11:55,500
To point to it.

1226
01:11:55,800 --> 01:11:59,800
So the commands clip Rex I guess.

1227
01:12:00,000 --> 01:12:02,000
At the outset, in fact, you could do it.

1228
01:12:06,900 --> 01:12:07,500
This way.

1229
01:12:17,500 --> 01:12:22,800
So it starts off for the pointer to one of these things, it Loops

1230
01:12:22,800 --> 01:12:28,200
through them and essentially what it does is it takes them and just

1231
01:12:28,200 --> 01:12:31,900
linearizes them into a flat list, that's it.

1232
01:12:31,900 --> 01:12:35,700
Like, so and that's it.

1233
01:12:35,700 --> 01:12:37,600
That's the entirety of that.

1234
01:12:37,600 --> 01:12:38,700
So it's just taking them.

1235
01:12:38,700 --> 01:12:41,300
So they're spread out in the bush buffer, it compacts them down into

1236
01:12:41,300 --> 01:12:45,200
some temporary memory that it can use as a lookup table and it's a

1237
01:12:45,200 --> 01:12:47,300
little piggy because now we need that next pointer.

1238
01:12:47,500 --> 01:12:49,100
I didn't actually want to put in there.

1239
01:12:49,100 --> 01:12:54,000
We can strip that out when we do the copy, but I won't have time to do

1240
01:12:54,000 --> 01:12:54,400
that right now.

1241
01:12:54,400 --> 01:12:55,600
So we could do that later.

1242
01:12:55,600 --> 01:13:02,200
But at the moment we can so render it could fucking needs the next

1243
01:13:02,200 --> 01:13:02,800
pointer in there.

1244
01:13:02,800 --> 01:13:06,700
Like I was saying and that also means that the render group needs to

1245
01:13:06,700 --> 01:13:07,200
track those.

1246
01:13:07,200 --> 01:13:11,900
So the render group needs to have a render entry cliprect first

1247
01:13:11,900 --> 01:13:13,300
wrecked kind of a thing.

1248
01:13:13,300 --> 01:13:17,200
And and really what we'll do instead of actually

1249
01:13:17,500 --> 01:13:22,500
We keeping that is, it'll be in the render commands effectively.

1250
01:13:23,100 --> 01:13:24,100
So,

1251
01:13:31,200 --> 01:13:33,300
Since multiple people can write to this.

1252
01:13:40,300 --> 01:13:43,900
since multiple people can write to this, I think these actually also

1253
01:13:43,900 --> 01:13:45,300
want to be in

1254
01:13:48,400 --> 01:13:49,500
In the commands only.

1255
01:13:50,600 --> 01:13:51,400
Is the other thing.

1256
01:13:51,800 --> 01:13:55,200
So I think inside the platform,

1257
01:13:56,900 --> 01:14:00,100
Struct since multiple people can open and close this.

1258
01:14:00,400 --> 01:14:05,200
The cliprect count needs to be kept entirely in here and this

1259
01:14:05,200 --> 01:14:08,600
probably, you know, since we don't super care, how big this struct is.

1260
01:14:10,900 --> 01:14:12,000
It seems Maybe?

1261
01:14:15,400 --> 01:14:17,500
I'll just expand it to make it a little clearer.

1262
01:14:18,500 --> 01:14:20,400
And that way there's no like confusion.

1263
01:14:23,000 --> 01:14:26,300
So in here, we'll just say, okay, we do first wrecked.

1264
01:14:27,100 --> 01:14:31,900
And off we go, this stuff all works exactly the same way and this

1265
01:14:31,900 --> 01:14:34,100
sets, the that memory up properly.

1266
01:14:34,900 --> 01:14:39,200
And so, then all I really need to do now is I just need to track this

1267
01:14:39,200 --> 01:14:40,400
inside render group,

1268
01:14:44,000 --> 01:14:46,900
so inside render group when we actually set these up,

1269
01:14:52,100 --> 01:14:53,800
when I do a push clip, rect

1270
01:14:59,100 --> 01:14:59,700
In here.

1271
01:15:03,000 --> 01:15:06,600
This is actually going to be looking at the commands and it's gonna

1272
01:15:06,600 --> 01:15:10,400
get the flipper account under there and similarly it's going to do the

1273
01:15:10,400 --> 01:15:12,000
daisy-chaining in here as well.

1274
01:15:12,800 --> 01:15:16,600
So the wrecked next pointer is going to get initialized and we're

1275
01:15:16,600 --> 01:15:19,600
going to do a standard doubly linked list on the sky.

1276
01:15:20,000 --> 01:15:22,400
So the commands first clip rect

1277
01:15:28,000 --> 01:15:29,700
let's do last wrecked.

1278
01:15:31,300 --> 01:15:35,200
We're just going to check to see if there have been any yet.

1279
01:15:35,600 --> 01:15:37,200
Then we just change it on to the end.

1280
01:15:37,200 --> 01:15:40,400
If there haven't been, then this is becomes, you know, both our first

1281
01:15:40,400 --> 01:15:42,800
in our last, you seen this pattern many times.

1282
01:15:42,800 --> 01:15:45,400
This is just a singly linked list that keeps a tail pointer.

1283
01:15:50,300 --> 01:15:51,500
And that should do it.

1284
01:15:51,900 --> 01:15:55,800
Now, this should not actually use these at all.

1285
01:15:59,300 --> 01:16:00,200
At the moment.

1286
01:16:02,000 --> 01:16:04,900
And I suppose we're probably not actually using

1287
01:16:07,300 --> 01:16:07,800
My bad.

1288
01:16:11,600 --> 01:16:13,100
Wrote that code incorrectly.

1289
01:16:16,000 --> 01:16:22,200
So this should actually be that.

1290
01:16:24,200 --> 01:16:26,600
Um, so yeah.

1291
01:16:28,600 --> 01:16:33,100
This should not do anything at the moment and yeah.

1292
01:16:33,100 --> 01:16:39,000
So inside our processing routines in opengl renderer commands, we want

1293
01:16:39,000 --> 01:16:44,400
to skip these guys so I'm not sure what the best way to do that is we

1294
01:16:44,400 --> 01:16:49,700
just don't ever even want these entered into the sort stream.

1295
01:16:50,600 --> 01:16:52,300
So really all we would do.

1296
01:16:52,300 --> 01:16:56,800
We're all we want to do is just push some space on for them.

1297
01:16:57,800 --> 01:17:03,200
And so I might actually not call the push entry stuff because now that

1298
01:17:03,200 --> 01:17:06,200
I'm not doing the little trick that I was saying that I was going to

1299
01:17:06,200 --> 01:17:10,000
do what I want to do here, instead is just say like okay.

1300
01:17:15,100 --> 01:17:19,100
Instead of calling push render element, I probably just want to push.

1301
01:17:22,600 --> 01:17:26,800
I really just want to do this, just this operation here, right?

1302
01:17:27,300 --> 01:17:28,400
So I want to do

1303
01:17:39,900 --> 01:17:40,100
No.

1304
01:17:40,100 --> 01:17:40,500
Header

1305
01:17:52,900 --> 01:17:54,300
There's some interesting stuff to that.

1306
01:17:54,300 --> 01:17:56,600
We should think about now that I'm thinking about too.

1307
01:17:58,300 --> 01:17:59,800
I wonder if we might want to play with the renderer,

1308
01:18:00,200 --> 01:18:00,800
Little bit.

1309
01:18:02,500 --> 01:18:03,300
Next week.

1310
01:18:04,200 --> 01:18:07,500
Now that we go through those sort entries for everything, it would

1311
01:18:07,500 --> 01:18:11,700
probably make more sense for the sort entry stuff, since we're doing

1312
01:18:11,700 --> 01:18:15,800
the sort to put the type field out in the sort entry.

1313
01:18:16,400 --> 01:18:17,300
You know what I mean?

1314
01:18:18,500 --> 01:18:24,700
Because you could put the type in like the top four bits of the index

1315
01:18:25,100 --> 01:18:28,900
and then you wouldn't have to jump in and then look

1316
01:18:29,700 --> 01:18:31,700
At you would have to do the read in the look.

1317
01:18:32,400 --> 01:18:35,000
That's just a, you know, it's things.

1318
01:18:35,000 --> 01:18:36,100
I think about sorry.

1319
01:18:37,000 --> 01:18:43,800
So, like the sword entry we could do get rid of this, this, the header

1320
01:18:45,000 --> 01:18:48,200
could, could not bother storing that, right?

1321
01:18:48,400 --> 01:18:55,100
So we could do like to do Casey don't store type here store in sort

1322
01:18:55,100 --> 01:18:55,700
index.

1323
01:18:57,800 --> 01:18:59,900
Something about anyway.

1324
01:18:59,900 --> 01:19:04,500
So in here, what I was thinking is if we were to do a render entry,

1325
01:19:06,000 --> 01:19:06,200
Clip.

1326
01:19:06,200 --> 01:19:13,700
Rect and grab one of these guys.

1327
01:19:15,300 --> 01:19:20,000
And don't bother initializing any of this stuff at all and we don't

1328
01:19:20,000 --> 01:19:21,100
put in one of these.

1329
01:19:21,300 --> 01:19:27,900
So all we would do is is grab some of the space.

1330
01:19:28,300 --> 01:19:32,700
So literally all we're doing would be guarding against overflow,

1331
01:19:33,000 --> 01:19:33,500
right?

1332
01:19:49,300 --> 01:19:50,600
So I just want that.

1333
01:19:50,700 --> 01:19:52,600
So assuming we can fit this thing in here.

1334
01:19:53,100 --> 01:19:56,100
The size is obviously going to be the size of the render entry.

1335
01:19:56,100 --> 01:19:56,500
Oops.

1336
01:20:02,800 --> 01:20:04,400
Assuming that this can fit.

1337
01:20:07,400 --> 01:20:10,300
That's all we need to know and then we've got it.

1338
01:20:13,800 --> 01:20:16,000
And everything else would work as normal?

1339
01:20:19,800 --> 01:20:24,800
So yeah, and I guess we do group commands.

1340
01:20:27,700 --> 01:20:29,000
And we're into commands.

1341
01:20:34,600 --> 01:20:35,900
And this needs to be cast.

1342
01:20:47,000 --> 01:20:47,500
Now.

1343
01:20:50,200 --> 01:20:55,800
I think that should remove them entirely from that list and so now we

1344
01:20:55,800 --> 01:20:58,900
should be indexing into our clip, Brooks properly which means we could

1345
01:20:58,900 --> 01:20:59,900
add more of them if

1346
01:21:00,000 --> 01:21:04,400
I wanted to write, I literally have two minutes left so I don't know

1347
01:21:04,400 --> 01:21:08,600
that we'll have time to do any of that, but if we wanted to try it we

1348
01:21:08,600 --> 01:21:13,000
could try pushing cliprect on here just to see if it did anything.

1349
01:21:13,300 --> 01:21:16,400
So if I was to say go in here and do

1350
01:21:21,300 --> 01:21:26,100
Let's say, where's the push wrecked?

1351
01:21:27,700 --> 01:21:28,700
There it is.

1352
01:21:29,000 --> 01:21:34,000
So if I was to do a push for to call that just took a rectangle.

1353
01:21:36,100 --> 01:21:37,200
So like this case.

1354
01:21:38,200 --> 01:21:41,700
So would you push cliprect clip rect

1355
01:21:44,700 --> 01:21:48,300
Obviously these things don't have a z to them.

1356
01:21:49,800 --> 01:21:52,000
Not the one that anyone that we care about anyway.

1357
01:21:52,000 --> 01:21:56,300
Oh I guess they know they do because they can be they could be sized

1358
01:21:56,300 --> 01:21:57,300
if we wanted them to be.

1359
01:21:58,000 --> 01:21:59,200
They just don't have a color.

1360
01:22:03,200 --> 01:22:06,500
So that would allow us to push a clip rect of a rectangle so I could

1361
01:22:06,500 --> 01:22:07,200
try.

1362
01:22:13,400 --> 01:22:14,300
Making that happen.

1363
01:22:26,000 --> 01:22:26,400
Okay.

1364
01:22:29,300 --> 01:22:34,900
yeah, so now inside debug dot CPP, if I wanted to actually do one of

1365
01:22:34,900 --> 01:22:38,500
these push Rex, I could try

1366
01:22:39,900 --> 01:22:40,900
I'm sure it won't work.

1367
01:22:41,000 --> 01:22:43,900
So you know, we'll have to debug it tomorrow and actually make it

1368
01:22:43,900 --> 01:22:44,300
work.

1369
01:22:45,300 --> 01:22:49,500
But what we would do is when we come in here to say, draw top clocks

1370
01:22:49,500 --> 01:22:53,000
list, what we would do in here when we actually create this element

1371
01:22:53,000 --> 01:22:56,800
rectangle and we do the push wrecked for it.

1372
01:22:59,800 --> 01:23:03,600
for the back and transform we would then immediately set the clip rect

1373
01:23:03,600 --> 01:23:05,600
so we do push clip rect

1374
01:23:07,800 --> 01:23:08,300
and,

1375
01:23:15,200 --> 01:23:20,200
I think that's yeah we do a push clip clip rect and for now we'll just

1376
01:23:20,200 --> 01:23:22,500
do it manually in place but we'll make a little utility for this in a

1377
01:23:22,500 --> 01:23:25,000
second, but we'll do like old clip rect.

1378
01:23:25,500 --> 01:23:29,400
And this will be our render group current clip.

1379
01:23:29,400 --> 01:23:30,000
Rect

1380
01:23:31,900 --> 01:23:35,800
And then we'll say okay the render group current cliprect index is

1381
01:23:35,800 --> 01:23:38,300
going to be this new clip, rect which we will push.

1382
01:23:38,600 --> 01:23:44,100
Here is the render group we use exactly.

1383
01:23:46,200 --> 01:23:49,500
The values were using to draw the rectangle.

1384
01:23:49,500 --> 01:23:55,300
So you want to basically clip to the same thing that we've got, right?

1385
01:23:56,000 --> 01:23:56,900
Doesn't need a color

1386
01:24:01,100 --> 01:24:06,800
Like so and then we would just restore it afterwards.

1387
01:24:15,200 --> 01:24:16,500
It's like a push and pop kind of thing.

1388
01:24:22,600 --> 01:24:24,300
Uninitialized variable.

1389
01:24:26,600 --> 01:24:27,800
That is true.

1390
01:24:28,400 --> 01:24:29,800
How did that end up happening?

1391
01:24:29,800 --> 01:24:31,800
Did I accidentally delete something in there?

1392
01:24:33,800 --> 01:24:34,800
Where are you at?

1393
01:24:42,700 --> 01:24:44,000
oh, it's because

1394
01:24:46,800 --> 01:24:49,000
it's because this is actually a different dim.

1395
01:24:49,200 --> 01:24:52,200
So it's that dim and then this is like,

1396
01:24:55,500 --> 01:24:58,100
This is the bassist Tim going to be.

1397
01:25:01,200 --> 01:25:02,700
Thank you, compiler, that was handy.

1398
01:25:08,400 --> 01:25:11,000
So, yeah, so that's where we're at at the moment.

1399
01:25:11,000 --> 01:25:13,300
And like I said, we're not working, right?

1400
01:25:13,300 --> 01:25:16,600
Because this, if we were working, that would clip, right?

1401
01:25:16,600 --> 01:25:18,800
So, we would see like that, right?

1402
01:25:18,800 --> 01:25:23,000
There would be clipping properly and at the moment, it's not.

1403
01:25:23,600 --> 01:25:28,300
So that's what we can debug tomorrow and we can also do questions, are

1404
01:25:28,400 --> 01:25:28,800
valid.

1405
01:25:28,800 --> 01:25:30,200
Maybe I'll do a couple questions about weep.

1406
01:25:30,200 --> 01:25:33,900
I don't have very much time for them so we can do questions on all of

1407
01:25:33,900 --> 01:25:34,800
that stuff as well.

1408
01:25:35,400 --> 01:25:36,900
So we can see in here.

1409
01:25:37,100 --> 01:25:42,900
When we do have our clipping right, see what the clip actually set to.

1410
01:25:45,700 --> 01:25:50,500
That's the full screen, which is what we might expect to see we, then

1411
01:25:50,500 --> 01:25:51,800
come in with a different clip.

1412
01:25:51,800 --> 01:25:54,600
Rect index of one.

1413
01:25:55,200 --> 01:25:56,800
It's also the same though.

1414
01:26:00,800 --> 01:26:03,300
So here is one that's trying to clip to something else.

1415
01:26:04,200 --> 01:26:05,900
Oh you know what?

1416
01:26:06,200 --> 01:26:07,900
We never enable GL Caesar.

1417
01:26:09,000 --> 01:26:12,600
So GL scissor is one of those things that doesn't actually take effect

1418
01:26:12,700 --> 01:26:14,000
unless you enable it.

1419
01:26:14,400 --> 01:26:19,200
So when we do our enables and we set up our like initial state

1420
01:26:23,500 --> 01:26:26,700
we never actually handle that, so maybe

1421
01:26:29,500 --> 01:26:31,400
Might be scissor test.

1422
01:26:33,900 --> 01:26:39,200
Yeah, maybe that will clue us in a little.

1423
01:26:39,200 --> 01:26:39,800
Hey look.

1424
01:26:41,100 --> 01:26:44,800
So actually that whole thing did work the first time, which is

1425
01:26:44,800 --> 01:26:45,500
ridiculous.

1426
01:26:46,600 --> 01:26:47,500
But hey, there you go.

1427
01:26:48,000 --> 01:26:52,600
So now we have clipping and the only thing we aren't that we would

1428
01:26:52,600 --> 01:26:53,400
need to do tomorrow.

1429
01:26:53,400 --> 01:26:57,900
Then is make the software renderer obey it as well, right?

1430
01:26:57,900 --> 01:26:59,800
So in here if

1431
01:27:00,300 --> 01:27:03,200
Do the platform control.

1432
01:27:03,500 --> 01:27:05,500
So if we switch to the software renderer,

1433
01:27:11,200 --> 01:27:13,100
What the heck?

1434
01:27:13,200 --> 01:27:14,000
Oh, right.

1435
01:27:14,000 --> 01:27:17,500
Because the GL says, ER, is still enabled, right?

1436
01:27:18,600 --> 01:27:19,200
You can see that.

1437
01:27:19,200 --> 01:27:20,500
It's not actually doing it.

1438
01:27:20,600 --> 01:27:22,200
Let me fix that one.

1439
01:27:23,900 --> 01:27:24,300
Choose me.

1440
01:27:27,700 --> 01:27:32,500
when we do opengl blit to screen or whatever it is open, till this

1441
01:27:32,500 --> 01:27:35,100
needs to GL disabled fuel sensor test,

1442
01:27:36,100 --> 01:27:38,400
If we don't want that test enabled, when we're doing that.

1443
01:27:42,200 --> 01:27:49,300
My point was, if I go in here and I set it to the other, renderer, you

1444
01:27:49,300 --> 01:27:52,400
can kind of see how we don't clip anymore.

1445
01:27:53,500 --> 01:27:54,100
Right.

1446
01:27:54,400 --> 01:27:58,200
So our software renderer isn't properly clipping to that region and

1447
01:27:58,200 --> 01:28:01,800
that's because we haven't told it about it, but and maybe I should

1448
01:28:01,800 --> 01:28:03,700
just go ahead and do it because we're, you know, I'm kind of in the

1449
01:28:03,700 --> 01:28:04,300
mood.

1450
01:28:05,000 --> 01:28:07,300
So when we do render commands to bitmap, right,

1451
01:28:09,700 --> 01:28:11,000
And we do draw a rectangle.

1452
01:28:11,200 --> 01:28:14,300
You can see that we pass the cliprect in here, right?

1453
01:28:14,300 --> 01:28:18,000
So we have we are we are often times passing the cliprect.

1454
01:28:18,200 --> 01:28:22,600
You can see the clip Brooke getting past but the clip rect is not

1455
01:28:23,700 --> 01:28:27,600
actually being used or rather the clip.

1456
01:28:27,600 --> 01:28:30,600
Rect is only being used for are tiled renderer, but we're not actually

1457
01:28:30,600 --> 01:28:32,400
ever updating it to anything different.

1458
01:28:33,200 --> 01:28:37,300
So we could call this our base cliprect if we wanted to, for example.

1459
01:28:38,700 --> 01:28:41,400
And then what we can do is every time we get the header, we can do the

1460
01:28:41,400 --> 01:28:42,800
exact same thing we did before.

1461
01:28:43,100 --> 01:28:45,700
And instead just take our

1462
01:28:48,700 --> 01:28:51,600
Take our actual clip, rect from the base cliprect.

1463
01:28:52,100 --> 01:28:55,400
Keep the same exact thing we were doing in the opengl renderer where

1464
01:28:55,400 --> 01:29:00,600
we said, like hey, you know, as we go through anytime you see in the

1465
01:29:00,600 --> 01:29:04,800
header a different clip, rect than the one we had what we'll do in

1466
01:29:04,800 --> 01:29:07,200
that case is will just update the one we have.

1467
01:29:07,200 --> 01:29:10,400
So instead of making some call the GL to update cliprect will actually

1468
01:29:10,400 --> 01:29:12,100
update our cliprect instead.

1469
01:29:12,100 --> 01:29:14,100
Now what we have to do to do that, right?

1470
01:29:14,100 --> 01:29:17,100
Because we've got an existing clip, practice the tiled.

1471
01:29:17,300 --> 01:29:17,600
Region.

1472
01:29:17,600 --> 01:29:20,700
Remember we drew we render the screen in our software, renderer in

1473
01:29:20,700 --> 01:29:24,300
tiles, so that each thread can render different tile, right?

1474
01:29:24,400 --> 01:29:26,500
So, you know, someone's rendering this, someone's rendering this,

1475
01:29:26,500 --> 01:29:27,000
whatever.

1476
01:29:27,300 --> 01:29:30,800
So we need to clip it to this but now, we also have some cliprect that

1477
01:29:30,800 --> 01:29:34,300
specified for the, for the actual rendering that's, that's been

1478
01:29:34,300 --> 01:29:35,000
specified.

1479
01:29:35,200 --> 01:29:39,200
So what we need to do is we need to intersect these two regions,

1480
01:29:39,200 --> 01:29:39,800
right?

1481
01:29:39,800 --> 01:29:44,100
So what we need to do is say alright, what we want to do is whatever

1482
01:29:44,100 --> 01:29:47,000
the cliprect that's coming out of this thing is, right.

1483
01:29:47,200 --> 01:29:48,200
Right, this thing here.

1484
01:29:49,800 --> 01:29:51,600
We want to do intersection of those.

1485
01:29:52,100 --> 01:29:54,000
Now is rectangle to eye.

1486
01:29:55,700 --> 01:29:59,100
we, you know, we could just use these rectangle to eyes and look, we

1487
01:29:59,100 --> 01:29:59,900
already have an

1488
01:30:00,500 --> 01:30:01,400
So I'm going to do that.

1489
01:30:01,800 --> 01:30:04,300
So I'm going to say, okay, our clip, rect

1490
01:30:05,900 --> 01:30:07,400
Is just the intersection.

1491
01:30:08,400 --> 01:30:09,000
I didn't even know.

1492
01:30:09,000 --> 01:30:11,300
We had rectangle, two eyes in this clip.

1493
01:30:11,300 --> 01:30:12,100
Code base.

1494
01:30:13,300 --> 01:30:15,600
We're going to take our base clip, rect and we're going to intersect

1495
01:30:15,600 --> 01:30:20,400
it with the one that's coming from from this thing.

1496
01:30:24,800 --> 01:30:27,500
Okay, and that's what we're going to do.

1497
01:30:29,000 --> 01:30:32,000
So I'm going to say that and what's going to happen here is we're

1498
01:30:32,000 --> 01:30:35,600
going to have to change because I would rather do it this way.

1499
01:30:36,300 --> 01:30:41,100
We're going to change our render group stuff to actually use rectangle

1500
01:30:41,100 --> 01:30:42,200
to I in here.

1501
01:30:43,800 --> 01:30:44,300
Like so.

1502
01:30:47,400 --> 01:30:47,900
Okay.

1503
01:30:48,100 --> 01:30:52,000
And so in here, what I'll do is we have our wrecked and our wrecked

1504
01:30:52,000 --> 01:30:52,900
has a min

1505
01:30:57,000 --> 01:30:57,800
Like so.

1506
01:31:05,400 --> 01:31:09,300
And all this is going to be is us just taking exactly the same values

1507
01:31:09,300 --> 01:31:13,100
that you had before and encoding them slightly differently, right?

1508
01:31:19,800 --> 01:31:23,900
What, what is rectangled to buy than math that h?

1509
01:31:25,300 --> 01:31:27,400
Oh, so we actually store them directly.

1510
01:31:30,000 --> 01:31:30,500
Okay.

1511
01:31:31,900 --> 01:31:34,700
And so then, all we have to do is translate the GL scissor to that.

1512
01:31:35,000 --> 01:31:43,400
So Minix and Max are end and mean why are the same, but the width is

1513
01:31:43,400 --> 01:31:44,600
now in coded differently.

1514
01:31:44,600 --> 01:31:48,000
So we'll have to compute that by taking the max X and subtracting them

1515
01:31:48,000 --> 01:31:48,500
in Acts.

1516
01:31:51,600 --> 01:31:52,800
Same thing with the why.

1517
01:32:02,000 --> 01:32:04,700
So let's check to see to make sure I didn't mess up the opengl

1518
01:32:04,700 --> 01:32:06,700
renderer by switching that to that.

1519
01:32:08,300 --> 01:32:08,900
There we go.

1520
01:32:10,200 --> 01:32:13,900
And now let's go back to our software renderer.

1521
01:32:15,400 --> 01:32:16,600
And see if that works now.

1522
01:32:17,600 --> 01:32:17,900
Hey, look.

1523
01:32:17,900 --> 01:32:18,400
It does.

1524
01:32:21,000 --> 01:32:21,700
So, there we go.

1525
01:32:21,700 --> 01:32:26,000
Now we've got clipping in both renderers and everyone's happy.

1526
01:32:30,500 --> 01:32:32,300
I will take the briefest of brief q and A's.

1527
01:33:43,900 --> 01:33:47,000
I wonder why debug and takes so much time.

1528
01:33:47,300 --> 01:33:50,000
Shouldn't the time be taken in debug collation.

1529
01:33:52,600 --> 01:33:55,200
Because I don't know exactly what's happening at debug and that would

1530
01:33:55,200 --> 01:33:56,200
make it take more time.

1531
01:33:56,200 --> 01:33:59,000
But oh wait, no, debug and test a draw.

1532
01:33:59,000 --> 01:34:01,700
It's doing all this construction stuff.

1533
01:34:11,900 --> 01:34:16,800
Popcorn 0, x 90, what are top three reasons for fps to go down?

1534
01:34:18,100 --> 01:34:18,400
What?

1535
01:34:20,800 --> 01:34:21,800
I don't know.

1536
01:34:22,200 --> 01:34:27,300
What do you mean you mean across all games ever?

1537
01:34:27,300 --> 01:34:28,000
Or

1538
01:34:34,700 --> 01:34:35,500
Or what?

1539
01:34:36,900 --> 01:34:41,000
Some of the right will cliprect be used outside of debug and where

1540
01:34:41,900 --> 01:34:50,100
might be like, I mean, I don't know but it could be used.

1541
01:34:51,300 --> 01:34:52,800
In the game somewhere.

1542
01:34:52,800 --> 01:34:57,900
It depends if we upgrade our render, at some point to do fancier

1543
01:34:57,900 --> 01:35:00,600
things like Matt cats and stuff.

1544
01:35:02,200 --> 01:35:05,400
Where, you know, we might want to limit the region that's rendered

1545
01:35:05,400 --> 01:35:08,000
because we're rendering some stuff that's going to get composited or

1546
01:35:08,000 --> 01:35:12,600
whatever, even if we didn't update the renderer, you could imagine.

1547
01:35:12,700 --> 01:35:16,500
Like, let's say that your your rendering, there's like a hole in the

1548
01:35:16,500 --> 01:35:19,500
floor and you can see down to something else, well, rather than render

1549
01:35:19,500 --> 01:35:20,900
the whole thing under.

1550
01:35:21,100 --> 01:35:24,900
Hind there and then render the thing with just the hole in the floor

1551
01:35:24,900 --> 01:35:29,000
and it like overdraw the whole screen you could clip out those regions

1552
01:35:30,000 --> 01:35:31,500
for efficiency obviously.

1553
01:35:31,500 --> 01:35:32,100
But

1554
01:35:46,000 --> 01:35:49,000
Can you elaborate on the OD plan to replace your drag function with

1555
01:35:49,000 --> 01:35:49,700
and move entity?

1556
01:35:49,900 --> 01:35:50,900
Not at the moment?

1557
01:35:50,900 --> 01:35:56,100
Obviously, that's that's a topic for when we go to replace it and I'll

1558
01:35:56,100 --> 01:35:57,900
show how to derive it and so on.

1559
01:36:00,500 --> 01:36:03,400
If you con, how about making the topless scrollable?

1560
01:36:03,800 --> 01:36:08,000
Since now we clip it it can be painful when you start profiling a lot

1561
01:36:08,000 --> 01:36:12,700
more so we can do that just as an exercise in how to make something

1562
01:36:12,700 --> 01:36:13,500
scrollable.

1563
01:36:13,800 --> 01:36:18,300
But in truth, we only ever care about the top couple of entries.

1564
01:36:18,300 --> 01:36:23,800
Anyway, you never care about anything that's down here, right?

1565
01:36:23,800 --> 01:36:28,400
I mean, maybe in some academic sense, you might, but for the most part

1566
01:36:28,400 --> 01:36:30,100
it's just not relevant, right?

1567
01:36:30,800 --> 01:36:35,200
So, what actually happens is, you only ever look at these things

1568
01:36:35,500 --> 01:36:37,300
because these are where all your time is being spent.

1569
01:36:37,300 --> 01:36:38,400
So you don't care anything.

1570
01:36:38,400 --> 01:36:39,900
That's anything that's below.

1571
01:36:40,100 --> 01:36:42,600
1% is so irrelevant that you just don't care.

1572
01:36:50,200 --> 01:36:51,100
Blah 238.

1573
01:36:51,100 --> 01:36:54,200
When does clipping overdrawn areas cost more than just drawing them?

1574
01:36:54,400 --> 01:36:54,800
Never

1575
01:36:57,000 --> 01:36:57,900
it never crossed more.

1576
01:36:59,300 --> 01:37:03,900
It can only not save you time but it never costs you more.

1577
01:37:03,900 --> 01:37:06,300
Because everything always has to be clipped anyway.

1578
01:37:06,500 --> 01:37:08,500
It has to be clipped to the screen area.

1579
01:37:08,800 --> 01:37:12,300
So, narrowing, the clipping can only save you time.

1580
01:37:12,400 --> 01:37:15,600
You don't ever, you always had to steal clip.

1581
01:37:18,300 --> 01:37:22,100
in certain older in scenarios that

1582
01:37:24,800 --> 01:37:25,800
That don't bear much.

1583
01:37:25,800 --> 01:37:28,100
Resemblance to how we render things today.

1584
01:37:29,900 --> 01:37:34,900
When clipping was more about doing geometric, clipping on stuff, then

1585
01:37:34,900 --> 01:37:39,000
it's possible that it could be more expensive because you subdivide

1586
01:37:39,000 --> 01:37:40,600
more triangles more times.

1587
01:37:41,800 --> 01:37:46,900
But that's that's very unlikely in the way today's render as work.

1588
01:37:48,200 --> 01:37:50,600
But in the old days when you did a lot of geometric triangle clipping,

1589
01:37:50,900 --> 01:37:54,600
having to do all the clipping for the triangles could have been more

1590
01:37:54,600 --> 01:37:55,300
expensive.

1591
01:37:56,700 --> 01:37:59,100
Obviously, that's not so relevant in the thing where you got a bunch

1592
01:37:59,100 --> 01:38:02,500
of rectangles, but it imagine like a 3D in a more of a 3D rendering

1593
01:38:02,500 --> 01:38:03,200
kind of scenario.

1594
01:38:12,200 --> 01:38:15,000
SS SS McGrath that's not entirely true.

1595
01:38:15,000 --> 01:38:17,200
The state change on the clip isn't free.

1596
01:38:17,600 --> 01:38:20,100
If the size changes minor it's probably not worth it.

1597
01:38:22,500 --> 01:38:23,900
Yeah, I guess that's probably true.

1598
01:38:23,900 --> 01:38:27,100
Like if you were literally clip changing clipping, rectangles all the

1599
01:38:27,100 --> 01:38:32,800
time for no real reason then maybe just the traffic of like hey

1600
01:38:34,000 --> 01:38:39,400
I had to like update these four registers you know, on the GPU or not

1601
01:38:39,400 --> 01:38:43,000
registers but these four entries and memory on the GPU or whatever,

1602
01:38:43,400 --> 01:38:46,100
that could be something you might care about.

1603
01:39:12,200 --> 01:39:14,900
When you switch between the renderers, the viewing frame time is

1604
01:39:14,900 --> 01:39:17,500
obviously affected are the clocks in our newly clipped box.

1605
01:39:17,500 --> 01:39:19,000
Also affected by the renderers.

1606
01:39:19,000 --> 01:39:20,500
I ordered distributed differently.

1607
01:39:20,700 --> 01:39:25,600
Yeah, so I mean, first of all one thing I probably should do we have

1608
01:39:25,600 --> 01:39:28,600
it tested in a while and I should probably do this is you know if

1609
01:39:28,600 --> 01:39:31,700
we're looking at profiling data you know generally you wouldn't be

1610
01:39:31,700 --> 01:39:36,100
looking at profiling data much in the unoptimized build.

1611
01:39:36,100 --> 01:39:40,700
So I'd probably first start by saying like let's at least turn that on

1612
01:39:41,100 --> 01:39:41,700
and I could

1613
01:39:42,000 --> 01:39:44,400
So turn on turn off handmade slow.

1614
01:39:44,400 --> 01:39:46,000
So we weren't asserting and stuff.

1615
01:39:46,000 --> 01:39:49,300
So, we had a, you know, a lot less code happening there as well.

1616
01:39:50,800 --> 01:39:52,300
And then we can look at the profile.

1617
01:39:52,600 --> 01:39:55,400
And now we can sort of see a more realistic view of like, okay.

1618
01:39:55,400 --> 01:39:58,300
In the actual thing that ships to somebody, what would it look like?

1619
01:39:58,300 --> 01:39:59,700
And okay, that's what it looks like.

1620
01:40:00,200 --> 01:40:05,200
So now if I come here and I turn on the software, renderer, you can

1621
01:40:05,200 --> 01:40:11,700
now see a more realistic sort of version of how expensive it is to do

1622
01:40:12,300 --> 01:40:13,800
some of these things, right?

1623
01:40:13,900 --> 01:40:17,700
And so you can see that now, 50% of our time is spent just rendering

1624
01:40:17,700 --> 01:40:19,400
stuff in software, right?

1625
01:40:23,300 --> 01:40:26,000
And and that's what you would expect.

1626
01:40:26,800 --> 01:40:28,800
Because that's what almost all the time is.

1627
01:40:29,300 --> 01:40:37,600
So in the actual game right in here, amusingly enough, debug collation

1628
01:40:37,600 --> 01:40:40,400
still dominates the time, which is pretty hilarious.

1629
01:40:40,400 --> 01:40:44,200
Actually, I guess that's because we call pixel fills so many times,

1630
01:40:44,700 --> 01:40:48,700
not sure whether we would really want to do that, that's probably

1631
01:40:52,400 --> 01:40:54,100
Let me, let me take that out.

1632
01:40:55,700 --> 01:40:58,300
Because that's generating a ton of things which we probably don't want

1633
01:40:58,300 --> 01:40:59,000
to generate.

1634
01:40:59,700 --> 01:41:01,700
So inside handmade render.

1635
01:41:04,800 --> 01:41:08,400
I'm going to take these ignored time function stuff, and I'm going to

1636
01:41:08,400 --> 01:41:10,100
go ahead and actually make them ignored

1637
01:41:20,700 --> 01:41:21,000
oh,

1638
01:41:43,400 --> 01:41:43,700
Okay.

1639
01:41:47,600 --> 01:41:55,300
Alright, so now I think we won't be spending so much time on that

1640
01:41:55,300 --> 01:41:55,900
collation.

1641
01:41:55,900 --> 01:41:59,400
So here's our, you know, Hardware rendered profile

1642
01:42:00,100 --> 01:42:01,800
Here's our software rendered profile.

1643
01:42:02,400 --> 01:42:05,200
So you can see, you know, basically all the time being spent in do

1644
01:42:05,200 --> 01:42:07,800
Todd render work, which that is what we would expect.

1645
01:42:07,900 --> 01:42:11,600
You can see our frame rate is not particularly great, but again, some

1646
01:42:11,600 --> 01:42:17,100
of that's actually it's counting having to render all this stuff as

1647
01:42:17,100 --> 01:42:17,300
well.

1648
01:42:17,300 --> 01:42:20,300
Which so isn't quite Fair because there's a bunch there, this is just

1649
01:42:20,300 --> 01:42:25,100
a lot of rendering that it wouldn't otherwise Pat be having to do, so

1650
01:42:25,100 --> 01:42:26,000
that's a little bit.

1651
01:42:27,600 --> 01:42:29,800
You know, what we could do is do something more like this.

1652
01:42:30,000 --> 01:42:31,300
This, right?

1653
01:42:32,300 --> 01:42:37,300
And then go in here and say pause and scroll back, you can see the

1654
01:42:37,300 --> 01:42:38,900
difference in the frame times.

1655
01:42:40,500 --> 01:42:45,600
Like, you know, there's a, this is a 24 Ms frame, 27, Ms, frame.

1656
01:42:45,900 --> 01:42:48,900
And then you get out to the ones where it's on, and it's 45

1657
01:42:48,900 --> 01:42:49,600
milliseconds.

1658
01:42:49,600 --> 01:42:54,500
So, it's quite a bit different when you are an art rendering stuff in

1659
01:42:54,500 --> 01:42:55,400
the profile view.

1660
01:42:56,200 --> 01:42:58,400
This is just a lot of work for under because all of these are little

1661
01:42:58,400 --> 01:43:00,000
these are all little texture map.

1662
01:43:00,000 --> 01:43:04,100
Fills you know, if we wanted to optimize that in software, we do a

1663
01:43:04,100 --> 01:43:06,300
bunch of rectilinear Blitz type stuff.

1664
01:43:06,300 --> 01:43:09,200
That was highly optimized for fonts or something so that we could draw

1665
01:43:09,200 --> 01:43:15,100
this a lot faster, but we don't really care about that, you know,

1666
01:43:15,300 --> 01:43:19,100
because you know, this isn't really part of part of it for us.

1667
01:43:20,000 --> 01:43:24,700
But anyway, so then if we go into the game code here, like so,

1668
01:43:26,200 --> 01:43:28,000
You can see that we're still even with that.

1669
01:43:28,000 --> 01:43:31,200
We're doing pretty good on render.

1670
01:43:31,200 --> 01:43:36,500
Time should probably clear the screen but it's pretty good.

1671
01:43:36,500 --> 01:43:37,100
Right?

1672
01:43:37,500 --> 01:43:42,800
And if you look at what's actually taking the time, it's kind of a

1673
01:43:42,800 --> 01:43:44,900
little bit odd to be honest.

1674
01:43:49,200 --> 01:43:53,000
I'm not sure I really understand why frame display is taking so much

1675
01:43:53,000 --> 01:43:53,500
time.

1676
01:43:54,300 --> 01:43:56,800
Oh well actually we did determine this.

1677
01:43:57,200 --> 01:44:01,200
It's actually it is it's just Windows eats up a ton of our time.

1678
01:44:04,200 --> 01:44:08,000
Yeah, that actually is Windows being crappy.

1679
01:44:10,100 --> 01:44:12,400
Why is draw a rectangle still?

1680
01:44:15,900 --> 01:44:17,300
Being clocked separately.

1681
01:44:25,000 --> 01:44:26,400
And that's a lot of rectangles.

1682
01:44:29,500 --> 01:44:31,500
18,000 rectangles.

1683
01:44:33,200 --> 01:44:35,800
Why are there 18000, rectangles?

1684
01:44:37,900 --> 01:44:40,100
Is that really a reasonable number of rectangles?

1685
01:44:41,900 --> 01:44:43,800
I mean, there's a lot of rectangles here.

1686
01:44:45,200 --> 01:44:49,800
And then there's all these rectangles in here, but 18,000 of them.

1687
01:44:51,500 --> 01:44:54,600
I don't know if I believe 18,000 rectangle, drawers.

1688
01:44:54,600 --> 01:44:55,300
Got called.

1689
01:45:28,700 --> 01:45:30,500
So, these should actually always be time.

1690
01:45:32,600 --> 01:45:36,400
All right, 18,000 does not sound right to me.

1691
01:45:40,600 --> 01:45:41,200
that's,

1692
01:45:44,600 --> 01:45:45,600
that's weird.

1693
01:45:47,800 --> 01:45:48,700
I feel like,

1694
01:45:52,600 --> 01:45:53,700
I feel like something's up there.

1695
01:45:56,500 --> 01:46:00,700
We should probably actually keep timing stuff like that and do a

1696
01:46:00,700 --> 01:46:04,300
little bit of a thing to try and ascertain why.

1697
01:46:04,300 --> 01:46:06,100
So many rectangles are being called

1698
01:46:21,300 --> 01:46:22,200
Yeah, that's really weird.

1699
01:46:28,100 --> 01:46:32,000
Anyway, you can see how long the this is just a tremendous amount of

1700
01:46:32,000 --> 01:46:35,300
time that it takes before Windows actually gets like we're done in

1701
01:46:35,300 --> 01:46:39,900
half the time and windows takes a long time to get us to the screen.

1702
01:46:40,200 --> 01:46:43,200
I don't know if that's because of the vsync or some other weird

1703
01:46:43,200 --> 01:46:45,900
because there's a one frame lag or I don't know what's going on, but

1704
01:46:45,900 --> 01:46:46,800
it's kind of interesting.

1705
01:46:47,200 --> 01:46:49,200
Like we'd actually be hitting 60 hertz right now.

1706
01:46:49,200 --> 01:46:50,100
If it wasn't for this.

1707
01:46:52,400 --> 01:46:53,300
That's so darn cool.

1708
01:46:53,300 --> 01:46:53,900
By the way.

1709
01:46:59,500 --> 01:47:00,000
Yeah.

1710
01:47:14,300 --> 01:47:14,700
Long billion.

1711
01:47:14,700 --> 01:47:17,100
What does opengl do when you enable GL scissor test?

1712
01:47:17,800 --> 01:47:20,200
It's basically saying that.

1713
01:47:22,200 --> 01:47:27,300
Instead of clipping to the window boundary clip to the boundary, that

1714
01:47:27,300 --> 01:47:30,900
you've specified because opengl always is actually clipping.

1715
01:47:30,900 --> 01:47:34,400
Obviously I mean, it doesn't corrupt memory and right into a no man's

1716
01:47:34,400 --> 01:47:34,900
land.

1717
01:47:35,200 --> 01:47:36,300
So you know,

1718
01:47:37,700 --> 01:47:38,800
Here is the screen.

1719
01:47:40,100 --> 01:47:42,100
Here is the scissor, right?

1720
01:47:42,100 --> 01:47:46,700
This is whatever you passed a GL scissor if you GL enable.

1721
01:47:49,000 --> 01:47:50,400
GL scissor test.

1722
01:47:53,900 --> 01:47:56,900
Then it's actually going to use what you pass, you'll says are.

1723
01:47:56,900 --> 01:47:59,300
Otherwise it'll just always use the whole screen.

1724
01:48:00,300 --> 01:48:03,100
So it's basically just saying do you want this rectangle on or not?

1725
01:48:03,400 --> 01:48:05,800
I don't even know why they have that but

1726
01:48:06,800 --> 01:48:09,600
it's just kind of I guess the weight opengl does things like enable

1727
01:48:09,600 --> 01:48:10,200
and disable.

1728
01:48:10,200 --> 01:48:13,000
I would have just said you always have to set the scissor so if you

1729
01:48:13,000 --> 01:48:16,000
don't want to clear that set it to the whole screen, right?

1730
01:48:18,400 --> 01:48:19,300
but, you know,

1731
01:48:22,700 --> 01:48:27,100
alright, I am going to wrap it up because I want to eat dinner.

1732
01:48:27,100 --> 01:48:28,500
I don't really know when dinner is

1733
01:48:29,800 --> 01:48:30,700
I didn't make it today.

1734
01:48:32,500 --> 01:48:33,300
So, let's see.

1735
01:48:35,900 --> 01:48:37,100
Close this out here.

1736
01:48:40,000 --> 01:48:41,200
And made.

1737
01:48:47,000 --> 01:48:48,300
Switch back to debug.

1738
01:48:50,800 --> 01:48:55,100
And I'm going to go to the to-do list and I'm going to say and I think

1739
01:48:55,100 --> 01:48:59,700
we certainly got logging in there and thread visualization.

1740
01:49:10,600 --> 01:49:11,800
I want to know.

1741
01:49:14,800 --> 01:49:18,800
What's the deal with 18,000 rectangles?

1742
01:49:26,900 --> 01:49:28,100
So, I don't know what's going on with that.

1743
01:49:30,000 --> 01:49:30,500
All right.

1744
01:49:32,800 --> 01:49:33,700
Okay.

1745
01:49:37,000 --> 01:49:39,100
Thank you everyone for joining me for this episode of handmade here.

1746
01:49:39,100 --> 01:49:40,200
It's been a pleasure coding with you.

1747
01:49:40,200 --> 01:49:44,800
As always, if you would like to follow along, with series at home, you

1748
01:49:44,800 --> 01:49:46,100
can always pre-order the game.

1749
01:49:46,800 --> 01:49:50,300
It is available on how many here at org and it comes with the source

1750
01:49:50,300 --> 01:49:54,400
code, so you can play around, even as we develop it, we also have

1751
01:49:54,400 --> 01:49:54,900
Forum site.

1752
01:49:54,900 --> 01:50:00,100
You can go to where you can ask questions and that Forum site will be

1753
01:50:00,100 --> 01:50:04,300
going down this weekend because we are transferring it over to the

1754
01:50:04,300 --> 01:50:05,400
hand, were handmade.

1755
01:50:05,800 --> 01:50:10,200
Network people, they have graciously offered to maintain it.

1756
01:50:10,200 --> 01:50:13,400
I don't like maintaining web stuff as you know.

1757
01:50:14,000 --> 01:50:16,800
So the folks on handmade Network are going to be taking it over this

1758
01:50:16,800 --> 01:50:21,200
weekend, that means it will be unavailable for a couple days while

1759
01:50:21,200 --> 01:50:25,800
like it gets moved over and tested basically so that everyone so that

1760
01:50:25,900 --> 01:50:28,700
it's not obviously busted or anything like that.

1761
01:50:30,700 --> 01:50:33,900
So that will be happening this weekend so you won't be able to access

1762
01:50:33,900 --> 01:50:35,300
the forms for two days or so.

1763
01:50:35,500 --> 01:50:38,800
So, but then next week the forums will be back as normal.

1764
01:50:38,800 --> 01:50:41,800
They'll just be hosted on handmade Network and I believe they're

1765
01:50:41,800 --> 01:50:43,300
planning on cleaning them up a bit too.

1766
01:50:43,300 --> 01:50:45,100
So hopefully, the forms won't be so janky.

1767
01:50:45,100 --> 01:50:48,800
They might be a little bit nicer because they'll be running on a

1768
01:50:49,000 --> 01:50:51,600
cleaner for him system, then the stupid Joomla one.

1769
01:50:51,600 --> 01:50:53,300
That was the one that was running before.

1770
01:50:54,300 --> 01:50:57,600
We also have a patreon page if you want to support the video series,

1771
01:50:58,000 --> 01:50:59,800
which we, of course always provide free of charge

1772
01:51:00,500 --> 01:51:01,600
You can do that at patreon.

1773
01:51:01,600 --> 01:51:03,100
We also have a tweetbot, the tweets cut.

1774
01:51:03,100 --> 01:51:05,600
You, if you wanted when we live in the next summer, going to be live.

1775
01:51:07,300 --> 01:51:09,500
Will be next week because tomorrow is the day off.

1776
01:51:09,800 --> 01:51:11,700
It's my rocket movie day.

1777
01:51:12,600 --> 01:51:14,500
So we probably won't be around for the stream.

1778
01:51:15,600 --> 01:51:16,800
That is about it.

1779
01:51:16,800 --> 01:51:20,400
I hope everyone has a good full weekend of programming.

1780
01:51:21,000 --> 01:51:23,500
I'll see you back here probably on Monday but check the Tweet before

1781
01:51:23,500 --> 01:51:26,600
the schedule until then have fun coding and I'll see you guys on the

1782
01:51:26,600 --> 01:51:27,000
internet.

1783
01:51:27,000 --> 01:51:27,900
Take it easy everyone.

