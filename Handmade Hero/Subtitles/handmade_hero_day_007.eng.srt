1
00:00:00,500 --> 00:00:01,300
Recording.

2
00:00:02,600 --> 00:00:04,500
And there we go.

3
00:00:05,100 --> 00:00:10,300
Hello everybody and welcome to what is I guess day 7 of handmade here.

4
00:00:10,300 --> 00:00:13,600
It is hard to believe that we have already gone through seven days,

5
00:00:13,600 --> 00:00:14,600
but we have got a lot done.

6
00:00:14,600 --> 00:00:20,100
We now have our own window rendering and we actually have our input

7
00:00:20,100 --> 00:00:21,500
working even on gamepads.

8
00:00:21,700 --> 00:00:22,800
There is before I get the sound.

9
00:00:22,800 --> 00:00:23,100
Today.

10
00:00:23,100 --> 00:00:25,100
We're going to we're going to try and get sound working today,

11
00:00:25,100 --> 00:00:25,800
probably take today.

12
00:00:25,800 --> 00:00:26,300
And tomorrow.

13
00:00:26,300 --> 00:00:28,600
I'm guessing to get sound working, but we're going to give it a shot

14
00:00:28,900 --> 00:00:29,600
before we go to that.

15
00:00:29,600 --> 00:00:32,299
I had a couple of Corrections I wanted to make from

16
00:00:32,400 --> 00:00:33,700
Emails that came in.

17
00:00:34,000 --> 00:00:36,700
There were some good points that were brought up and a couple things I

18
00:00:36,700 --> 00:00:38,700
just wanted to show real quickly, based on the email.

19
00:00:38,700 --> 00:00:40,000
I think everyone should see.

20
00:00:40,200 --> 00:00:41,600
It's great getting email from everyone.

21
00:00:41,600 --> 00:00:41,900
Actually.

22
00:00:41,900 --> 00:00:45,800
It's it's really satisfying because, you know, having more eyes on the

23
00:00:45,800 --> 00:00:46,200
code.

24
00:00:46,200 --> 00:00:50,600
Is almost always good because people see you'll catch much things and

25
00:00:50,600 --> 00:00:52,500
people are trying different things and all that sort of stuff.

26
00:00:52,500 --> 00:00:56,600
So, first thing I want to point out, someone notice that in, this is a

27
00:00:56,600 --> 00:01:00,400
good idea is basically that when I wrote These, I was kind of.

28
00:01:00,600 --> 00:01:02,300
I was, I was a little absent-minded when I wrote.

29
00:01:02,400 --> 00:01:03,600
The stub functions here.

30
00:01:03,800 --> 00:01:07,200
The stub functions for our fake xinput calls.

31
00:01:07,200 --> 00:01:11,200
So when X input isn't actually found on the machine and you want to,

32
00:01:11,600 --> 00:01:14,400
you know, have those sub calls in place so that you don't crash.

33
00:01:15,000 --> 00:01:16,200
What we probably want to do.

34
00:01:16,200 --> 00:01:20,100
Here is actually return the error code that says that the devices

35
00:01:20,100 --> 00:01:22,600
aren't connected, because right now we're returning zero.

36
00:01:22,600 --> 00:01:27,000
And that's normally in my world, 0 means, you know, the call failed,

37
00:01:27,200 --> 00:01:30,000
but in Windows world because they do the whole thing where the error

38
00:01:30,000 --> 00:01:32,000
codes are actually sort of

39
00:01:33,000 --> 00:01:37,300
A series of different integers that can get returned 0.

40
00:01:37,300 --> 00:01:40,600
I is actually defined as error success, I believe.

41
00:01:41,200 --> 00:01:45,600
So, you know what we what we want to avoid doing is returning a value

42
00:01:45,600 --> 00:01:49,500
that would make the caller to the stub code think that it actually had

43
00:01:49,500 --> 00:01:49,700
one.

44
00:01:49,700 --> 00:01:53,500
You can see right here Eric success error success is actually 0.

45
00:01:53,900 --> 00:01:57,500
So what we'd rather do is take a look at xinput, get State and see

46
00:01:57,500 --> 00:02:00,800
what we can return that will make whoever's calling the sub function

47
00:02:00,800 --> 00:02:02,200
think that there is no controller.

48
00:02:02,300 --> 00:02:02,400
Has.

49
00:02:02,400 --> 00:02:04,000
Hey, at the library is not loaded effectively.

50
00:02:04,000 --> 00:02:07,600
There isn't so error device not connected is a better thing for us to

51
00:02:07,600 --> 00:02:08,300
return here.

52
00:02:08,500 --> 00:02:11,400
That'll result in us working a little more.

53
00:02:11,600 --> 00:02:15,100
Similarly, in seamlessly, in the case where the stub function gets

54
00:02:15,100 --> 00:02:15,300
called.

55
00:02:15,300 --> 00:02:17,200
Hopefully that makes good sense based that was just me being

56
00:02:17,200 --> 00:02:20,200
absent-minded forgetting that zeros, my kind of error code to return,

57
00:02:20,200 --> 00:02:21,200
not Windows, Windows.

58
00:02:21,500 --> 00:02:23,300
0 means success, in that particular case.

59
00:02:23,300 --> 00:02:23,900
It doesn't always.

60
00:02:23,900 --> 00:02:25,300
But in that case it does often times.

61
00:02:25,300 --> 00:02:27,300
It doesn't, you know, different parts of Windows written by different

62
00:02:27,300 --> 00:02:27,600
people.

63
00:02:27,600 --> 00:02:29,700
So it's not a lot of consistency there.

64
00:02:30,300 --> 00:02:30,600
All right.

65
00:02:30,600 --> 00:02:32,300
So the other thing I wanted to talk about was right.

66
00:02:32,400 --> 00:02:35,200
Here, someone was saying, and I didn't actually know this, this was

67
00:02:35,200 --> 00:02:36,000
completely news to me.

68
00:02:36,000 --> 00:02:38,800
I've never, I don't really have any experience with Windows 8, because

69
00:02:38,800 --> 00:02:42,700
I haven't shift a game in modern times, when Windows 8 was around,

70
00:02:42,700 --> 00:02:45,600
last time I was involved in looking at code that was shipping.

71
00:02:45,600 --> 00:02:50,400
It was Windows 7, and so, basically, this call will actually fail on

72
00:02:50,400 --> 00:02:53,900
Windows 8 because it does not have X input 1.3.

73
00:02:54,000 --> 00:02:56,400
It has X input one plate for only.

74
00:02:56,700 --> 00:02:59,700
So, basically seven is likely to only have one point three.

75
00:03:00,100 --> 00:03:02,000
Is likely to only have one point for.

76
00:03:02,700 --> 00:03:06,500
So what I'm going to do here is basically put in a to do that says,

77
00:03:06,800 --> 00:03:10,700
you know, test this on Windows 8 at some point when I can.

78
00:03:11,000 --> 00:03:13,500
But also what I'm going to do is I'm going to go ahead and do a

79
00:03:13,500 --> 00:03:17,200
layered approach here where I'm going to ask for 1.4 first because we

80
00:03:17,200 --> 00:03:23,200
can use 1.4 and then after that assuming that we cannot actually load

81
00:03:23,200 --> 00:03:27,200
that because it can't find it then we will try to load one point

82
00:03:27,200 --> 00:03:27,700
three.

83
00:03:27,700 --> 00:03:29,900
So basically I'm just going to make it so we try.

84
00:03:30,000 --> 00:03:32,200
Or we try one point four, which is the more recent version.

85
00:03:32,200 --> 00:03:35,300
We try one point three and then assuming that we get either one of

86
00:03:35,300 --> 00:03:39,300
those this, this will evaluate to true and then we'll be able to get

87
00:03:39,300 --> 00:03:42,100
the functions that we want for pulling the X input device.

88
00:03:42,100 --> 00:03:43,400
Now, there's two other things.

89
00:03:43,400 --> 00:03:44,800
I wanted to mention and these are not things.

90
00:03:44,800 --> 00:03:46,400
We're actually going to fix right now because we're going to get to

91
00:03:46,400 --> 00:03:47,200
them a little later.

92
00:03:47,500 --> 00:03:50,300
But thing we should mention ciske up and down.

93
00:03:50,700 --> 00:03:54,200
Those are actually where the alt f4 for closing the window comes in.

94
00:03:54,500 --> 00:03:58,300
So if you were upset about the fact that your window now low no longer

95
00:03:58,300 --> 00:03:59,800
closes when he'd have, felt if for it.

96
00:04:00,000 --> 00:04:02,800
You have to go and use the actual close button.

97
00:04:03,400 --> 00:04:05,700
You can actually come in here and well I said I was going to fix it.

98
00:04:05,700 --> 00:04:07,200
But you know what, I could totally fix it.

99
00:04:07,500 --> 00:04:09,900
Let's say you want to come in here and make alt f4.

100
00:04:10,000 --> 00:04:13,700
Still close the window while since we are now handling that ciske up

101
00:04:13,700 --> 00:04:14,300
down.

102
00:04:14,500 --> 00:04:17,500
We are the people who are going to have to choose to handle alt f4.

103
00:04:17,500 --> 00:04:23,100
So if we decide that the that the VK code, equals V, K, F 4.

104
00:04:23,400 --> 00:04:25,600
Then what we're going to do is we're going to set that Global running

105
00:04:25,600 --> 00:04:29,200
equal to false to kill our application, but we also need to do one

106
00:04:29,200 --> 00:04:29,800
other check here.

107
00:04:29,900 --> 00:04:30,400
Right?

108
00:04:30,400 --> 00:04:33,800
Because we need to make sure that the ALT key was downright.

109
00:04:33,800 --> 00:04:36,400
We need some way of figuring out whether the all key was down.

110
00:04:36,500 --> 00:04:39,400
So what we're going to do is we're going to take a quick look over at

111
00:04:39,400 --> 00:04:42,500
the actual documentation here, because I believe the ALT key is just

112
00:04:42,500 --> 00:04:46,100
in the codes that get passed for this actual message.

113
00:04:46,100 --> 00:04:47,900
And so we won't really have to do much work.

114
00:04:48,100 --> 00:04:51,900
We'll just be able to look at one of the bits, I believe and see it.

115
00:04:52,200 --> 00:04:56,800
So let's take a look here indicates whether the keys an extended key

116
00:04:56,800 --> 00:04:58,600
reserves, not use the context code.

117
00:04:58,600 --> 00:04:59,800
The value is one of the ALT key.

118
00:05:00,000 --> 00:05:03,200
Is down 0, if it is not.

119
00:05:03,500 --> 00:05:04,300
Let's see.

120
00:05:05,600 --> 00:05:07,300
Let's see.

121
00:05:07,300 --> 00:05:08,700
I think that's right.

122
00:05:08,700 --> 00:05:09,100
I don't know.

123
00:05:09,100 --> 00:05:09,700
Let's find out.

124
00:05:09,700 --> 00:05:13,000
That's a little weird, the way they have phrase that there, but let's

125
00:05:13,000 --> 00:05:13,800
give it a shot.

126
00:05:14,200 --> 00:05:15,800
So that is actually in the L /.

127
00:05:15,800 --> 00:05:20,900
Am so the L Purim is going to have is going to have that bit set.

128
00:05:20,900 --> 00:05:24,100
Basically if if the ALT key is down.

129
00:05:24,100 --> 00:05:27,000
So I'm just going to check to see if that bit is set.

130
00:05:27,200 --> 00:05:29,800
And if that bit actually is set then we

131
00:05:29,900 --> 00:05:32,200
Going to see if that if that BK.

132
00:05:32,300 --> 00:05:36,300
Oops, that's not good white boy off to a good start to get today.

133
00:05:36,300 --> 00:05:36,800
People.

134
00:05:36,900 --> 00:05:38,300
I don't even know what I'm looking at here.

135
00:05:38,400 --> 00:05:41,400
Let's try that again, you know, some days on the stream, you get a

136
00:05:41,400 --> 00:05:42,500
little absent-minded.

137
00:05:42,500 --> 00:05:42,800
I tell you.

138
00:05:42,800 --> 00:05:44,900
It's hard to always keep in Focus.

139
00:05:44,900 --> 00:05:47,100
So let's make sure that's right, 29, that's good.

140
00:05:47,300 --> 00:05:48,100
So we're just going to check.

141
00:05:48,100 --> 00:05:48,900
If that bit is down.

142
00:05:48,900 --> 00:05:51,700
And if that bit is down, we are good to go.

143
00:05:51,700 --> 00:05:54,300
And I'm going to do this guy again, just so we don't get a performance

144
00:05:54,300 --> 00:05:56,900
warning on the pool, which we would if we were pulling another mode,

145
00:05:57,200 --> 00:05:59,200
save that story for a different day.

146
00:05:59,400 --> 00:05:59,800
All right.

147
00:06:00,000 --> 00:06:03,800
So let's go over to Deb em and take a look at what happens when we hit

148
00:06:03,800 --> 00:06:04,200
F4.

149
00:06:04,200 --> 00:06:06,800
Just to make sure that we're actually feeling it properly.

150
00:06:07,600 --> 00:06:08,600
Let's take a look here.

151
00:06:09,200 --> 00:06:10,000
Off we go.

152
00:06:10,100 --> 00:06:13,100
So the first thing I'm going to do is I'm going to hit F4, just to

153
00:06:13,100 --> 00:06:15,200
make sure note that did not work at all.

154
00:06:15,300 --> 00:06:16,300
What's going on here?

155
00:06:16,300 --> 00:06:18,500
ALT key was down, is set to true.

156
00:06:19,900 --> 00:06:21,600
That's so that's not.

157
00:06:22,000 --> 00:06:23,700
That is not what we wanted at all.

158
00:06:23,700 --> 00:06:24,800
What am I missing there?

159
00:06:25,200 --> 00:06:27,000
I feel like that should not have happened.

160
00:06:27,100 --> 00:06:28,600
Am I misinterpreting the documentation?

161
00:06:28,800 --> 00:06:29,900
The value is one of the

162
00:06:30,000 --> 00:06:34,100
ALT key is down when the key is pressed so it should have not been

163
00:06:34,500 --> 00:06:35,200
one.

164
00:06:35,400 --> 00:06:36,600
That's a little bit weird.

165
00:06:36,600 --> 00:06:38,400
Let's double-check just make sure we're not going.

166
00:06:38,400 --> 00:06:38,700
Crazy.

167
00:06:38,700 --> 00:06:42,000
Here could be the that documentation is wrong, could be again, but I'm

168
00:06:42,000 --> 00:06:43,100
out to lunch on this stream.

169
00:06:43,100 --> 00:06:43,900
It's going to happen.

170
00:06:44,200 --> 00:06:45,300
If it doesn't happen today.

171
00:06:45,300 --> 00:06:46,500
It's going to happen eventually.

172
00:06:46,700 --> 00:06:47,800
So let's take a look.

173
00:06:48,000 --> 00:06:50,200
You know, we want to see what the W Prime is.

174
00:06:50,200 --> 00:06:52,600
We're taking a look at the 29th bit.

175
00:06:53,300 --> 00:06:54,300
So let's see here.

176
00:06:54,600 --> 00:06:57,400
So that's not actually said, what did I do wrong?

177
00:06:57,400 --> 00:06:58,700
I did something.

178
00:06:58,700 --> 00:06:59,000
Oh,

179
00:07:00,800 --> 00:07:01,600
Let's see here.

180
00:07:02,200 --> 00:07:03,500
I must have done this wrong.

181
00:07:03,500 --> 00:07:04,500
Shift it up 120.

182
00:07:04,900 --> 00:07:05,400
Awesome.

183
00:07:05,600 --> 00:07:05,900
Yep.

184
00:07:05,900 --> 00:07:06,900
We are out to lunch today.

185
00:07:06,900 --> 00:07:09,100
Ladies and gentlemen, so that was interesting.

186
00:07:09,100 --> 00:07:10,400
Let's, let's make sure that's the problem.

187
00:07:10,400 --> 00:07:12,400
First is I'm going to explain that because that's actually a good

188
00:07:12,400 --> 00:07:13,100
thing to explain.

189
00:07:13,200 --> 00:07:15,000
You may run into that yourself when you're coding.

190
00:07:15,000 --> 00:07:15,800
Yeah, much better.

191
00:07:16,100 --> 00:07:17,400
So basically what happened there.

192
00:07:18,000 --> 00:07:19,400
I'm sure that was going to be easy to miss.

193
00:07:19,400 --> 00:07:21,600
So I'm going to go over a little bit more slowly because that's a

194
00:07:21,800 --> 00:07:23,400
that's a bit of a snafu that you're going to.

195
00:07:23,400 --> 00:07:24,700
You're going to fall in tune out again.

196
00:07:25,200 --> 00:07:26,400
It's easy to do sometimes.

197
00:07:26,600 --> 00:07:28,200
So basically we take a look here at all.

198
00:07:28,200 --> 00:07:29,300
Key was down, what I

199
00:07:29,400 --> 00:07:32,500
I actually had written again because of the out to lunch.

200
00:07:32,500 --> 00:07:33,600
Notice that we talked about.

201
00:07:33,800 --> 00:07:37,200
I had actually written it, missing one of the parentheses that I had

202
00:07:37,200 --> 00:07:37,900
intended to put.

203
00:07:37,900 --> 00:07:39,500
So I wrote it like that.

204
00:07:39,500 --> 00:07:41,600
Now in C and C++.

205
00:07:41,600 --> 00:07:44,800
There's a thing called operator precedence, which means that certain

206
00:07:44,800 --> 00:07:49,400
operators, get evaluated, first and certain operators, get evaluated

207
00:07:49,400 --> 00:07:49,800
second.

208
00:07:49,800 --> 00:07:51,300
And so on third, fourth, fifth.

209
00:07:51,400 --> 00:07:54,100
Now we talked about this the intro to see stream and I pointed out the

210
00:07:54,100 --> 00:07:56,300
fact that multiplication will happen before addition.

211
00:07:56,600 --> 00:07:58,500
Well, the same is true of any other operators.

212
00:07:58,500 --> 00:07:59,300
So like this not equal.

213
00:07:59,500 --> 00:08:04,500
Here and this shift, and this end, they all have precedence to now.

214
00:08:04,500 --> 00:08:07,400
We properly wrapped our shift in parentheses.

215
00:08:07,400 --> 00:08:08,500
So there's no ambiguity.

216
00:08:08,500 --> 00:08:11,700
No matter what the operator precedence is, that's going to get done

217
00:08:11,700 --> 00:08:12,300
first.

218
00:08:12,300 --> 00:08:13,200
So that's fine.

219
00:08:13,200 --> 00:08:16,900
But once we get out here, once this is evaluated, so, that's, that's

220
00:08:16,900 --> 00:08:18,600
equal to something right.

221
00:08:19,100 --> 00:08:21,900
Once that's evaluated, see, is going to look at this and it's going to

222
00:08:21,900 --> 00:08:24,100
go, the compiler is going to say, well, I've got two operators here

223
00:08:24,100 --> 00:08:26,400
and, and I've got not equal to.

224
00:08:26,400 --> 00:08:29,200
I'm going to evaluate whichever one has higher precedence now,

225
00:08:29,400 --> 00:08:32,400
In our case, this ended up having the higher precedence.

226
00:08:32,400 --> 00:08:33,799
That's just how it's defined.

227
00:08:34,700 --> 00:08:37,799
And so that ended up meaning that it would do this operation eval not

228
00:08:37,799 --> 00:08:41,400
equal to 0 then it was going to end that with the L.

229
00:08:41,400 --> 00:08:41,600
/.

230
00:08:41,600 --> 00:08:44,900
Am I guess is what ended up happening and of course since eval not

231
00:08:44,900 --> 00:08:48,400
equal to 0 will equal 0 or 1, the L frame, probably had the low bits

232
00:08:48,400 --> 00:08:48,900
set.

233
00:08:48,900 --> 00:08:50,200
I don't know if that's likely or not.

234
00:08:50,200 --> 00:08:53,600
Let's take a look, the repeat cap for the message which so it was

235
00:08:53,600 --> 00:08:56,800
probably one, which is exactly what we would have expected on the

236
00:08:56,800 --> 00:08:58,000
second time through that Loop.

237
00:08:58,000 --> 00:08:59,300
For example, the peak can't would.

238
00:08:59,400 --> 00:08:59,900
Ben one.

239
00:09:00,400 --> 00:09:01,900
So that will evaluate to true.

240
00:09:01,900 --> 00:09:05,900
So all we had to do to fix it was to actually wrap the thing in the

241
00:09:05,900 --> 00:09:09,400
parentheses that I was trying to type in before and totally failed to

242
00:09:09,400 --> 00:09:09,800
do.

243
00:09:09,900 --> 00:09:13,300
So, we make that extra parentheses say we got to do this and first and

244
00:09:13,300 --> 00:09:16,600
then we check for the not equal to 0 which again turns it into a 0 or

245
00:09:16,600 --> 00:09:17,000
1.

246
00:09:17,200 --> 00:09:20,900
And that's something that actually I don't often do that extra not

247
00:09:20,900 --> 00:09:21,900
equal to 01.

248
00:09:22,400 --> 00:09:24,100
Maybe now's a good time to talk about that too.

249
00:09:24,100 --> 00:09:26,400
Just while we're on this first little Preamble.

250
00:09:26,600 --> 00:09:28,700
So usually what I do is I don't use Bool.

251
00:09:29,000 --> 00:09:29,900
I don't usually use

252
00:09:30,100 --> 00:09:33,700
Pool because Bool is defined in C++ to have some kind of odd

253
00:09:33,700 --> 00:09:34,300
semantics.

254
00:09:34,500 --> 00:09:35,100
Basically.

255
00:09:35,100 --> 00:09:39,700
It's defined to have to kind of be either 0 or 1, in some sense.

256
00:09:40,300 --> 00:09:44,400
The reason that I say this is because if you notice when we've got

257
00:09:44,400 --> 00:09:47,100
statements, that are like this, when we do, the pool was down.

258
00:09:47,400 --> 00:09:50,000
If I were to get rid of this, and I don't know, if this still happens,

259
00:09:50,000 --> 00:09:52,700
this is something that at least happened in the old days.

260
00:09:52,700 --> 00:09:57,400
I'll show you what happens when we try to compile our code with

261
00:09:57,400 --> 00:09:59,900
optimizations on basically, so let me load up that

262
00:10:00,000 --> 00:10:03,400
At build up that file whereas our build bat file code.

263
00:10:03,400 --> 00:10:04,300
Build that bat.

264
00:10:05,600 --> 00:10:07,700
So if I want to do optimizations, I don't know.

265
00:10:07,700 --> 00:10:09,300
If 02 does optimizations.

266
00:10:09,300 --> 00:10:10,700
It's been a long time since I've done that.

267
00:10:10,700 --> 00:10:11,200
Maybe not.

268
00:10:11,200 --> 00:10:11,800
Maybe W.

269
00:10:11,800 --> 00:10:13,400
All does that.

270
00:10:13,600 --> 00:10:18,000
Let's see if we've got it here to do.

271
00:10:18,000 --> 00:10:18,500
Here you go.

272
00:10:18,500 --> 00:10:21,700
So this is the warning that you will get basically.

273
00:10:21,900 --> 00:10:25,700
It says forcing value Bool to true or false performance warning.

274
00:10:26,000 --> 00:10:30,200
So basically what that means is if you take a look at what would

275
00:10:30,200 --> 00:10:34,000
happen in the case that I wrote here, if you take a look at what would

276
00:10:34,000 --> 00:10:34,700
happen here.

277
00:10:35,100 --> 00:10:38,500
What it's going to do is it's going to end the value of L per annum

278
00:10:38,900 --> 00:10:41,600
with one shifted up by 30, so the 30th bit.

279
00:10:41,600 --> 00:10:46,000
So the result of this is either going to be 0 or the value of the 30th

280
00:10:46,000 --> 00:10:47,000
bit being set.

281
00:10:47,100 --> 00:10:48,600
It's not going to be 0 or 1.

282
00:10:48,800 --> 00:10:52,800
So, if you assign this to a Bool, C++ has to generate code that

283
00:10:52,800 --> 00:10:56,900
basically checks to see whether the value is 0 or not.

284
00:10:56,900 --> 00:11:01,000
And if it's not zero, change it from that 30th bit being set to just

285
00:11:01,000 --> 00:11:01,700
being one.

286
00:11:02,100 --> 00:11:02,300
Now.

287
00:11:02,300 --> 00:11:04,600
The kicker is we didn't care.

288
00:11:04,800 --> 00:11:06,100
We were going to do this.

289
00:11:06,600 --> 00:11:07,800
This comparison here.

290
00:11:07,800 --> 00:11:08,300
Right?

291
00:11:09,200 --> 00:11:09,600
Well, I guess.

292
00:11:09,600 --> 00:11:10,100
So in this case.

293
00:11:10,100 --> 00:11:10,600
No, okay.

294
00:11:10,600 --> 00:11:11,900
I don't feel so bad about this one.

295
00:11:11,900 --> 00:11:13,900
I don't feel that we were going to actually do it because we're going

296
00:11:13,900 --> 00:11:14,800
to do a not equals here.

297
00:11:15,000 --> 00:11:19,000
So, in this case, we actually did care what it actually was in,

298
00:11:19,000 --> 00:11:21,500
because we want to be able to compare the two, but in a lot of cases,

299
00:11:21,500 --> 00:11:22,100
we don't care.

300
00:11:22,100 --> 00:11:25,800
So for in this case, for example, we don't actually care week.

301
00:11:25,800 --> 00:11:28,300
This just has to be something that's nonzero.

302
00:11:28,400 --> 00:11:32,600
So we're actually wasting some time by actually doing it that way.

303
00:11:32,800 --> 00:11:34,700
So typically, what I'll do is

304
00:11:34,900 --> 00:11:38,000
Will actually just Define my own type there.

305
00:11:38,000 --> 00:11:39,700
I'll define basically a Bool.

306
00:11:39,700 --> 00:11:42,100
That's that's actually an integer and to Bool.

307
00:11:42,100 --> 00:11:46,100
So, you know, I will do something that looks like this type def in 32,

308
00:11:46,200 --> 00:11:50,300
rule 32 and basically, so the only thing I'm doing there is I'm

309
00:11:50,300 --> 00:11:54,100
saying, hey, by the way, whoever's programming this, I intend this

310
00:11:54,100 --> 00:11:56,200
just to be a zero or nonzero value.

311
00:11:56,400 --> 00:11:59,800
I don't want to care necessarily about what the value is, but I

312
00:12:00,000 --> 00:12:04,200
Optical power to keep shoving it into this 0 or 1 state.

313
00:12:04,300 --> 00:12:07,300
So I will often do that and then I'll just omit this.

314
00:12:07,300 --> 00:12:08,600
That's what I will typically do.

315
00:12:09,000 --> 00:12:11,700
So maybe we should start doing that because that's what I normally do.

316
00:12:12,100 --> 00:12:14,800
So maybe I'll just put that here just so you can see it.

317
00:12:14,800 --> 00:12:16,100
That's something that I typically do.

318
00:12:16,200 --> 00:12:17,500
There's another thing that I typically do.

319
00:12:17,500 --> 00:12:20,500
I don't know if I'm going to do on this stream because it doesn't seem

320
00:12:20,500 --> 00:12:22,400
like it's necessarily such a good idea.

321
00:12:22,400 --> 00:12:23,200
So I'm going to leave.

322
00:12:23,300 --> 00:12:25,600
I'm going to say that that's probably all we really need to do for

323
00:12:25,600 --> 00:12:26,000
now.

324
00:12:26,200 --> 00:12:28,900
Have that extra Boule in there and then we'll go forward from there.

325
00:12:29,000 --> 00:12:29,800
All right, we're going to

326
00:12:30,000 --> 00:12:34,700
Turn off that wall because man looks like you really can't compile

327
00:12:34,700 --> 00:12:36,500
with wall and include those windows header files.

328
00:12:36,500 --> 00:12:39,100
Those windows header files are just filled with warnings.

329
00:12:39,100 --> 00:12:39,900
Look at all that.

330
00:12:40,000 --> 00:12:40,400
I don't know.

331
00:12:40,400 --> 00:12:42,500
Maybe you got to turn on something else to get that to go away.

332
00:12:42,500 --> 00:12:45,000
I'm not sure that looks new used to be able to compile with what w

333
00:12:45,000 --> 00:12:45,200
all.

334
00:12:45,200 --> 00:12:46,700
I thought maybe not.

335
00:12:46,900 --> 00:12:49,000
Anyway, Windows header files, causing a little problem.

336
00:12:49,000 --> 00:12:49,200
There.

337
00:12:49,200 --> 00:12:50,200
Not much we can do about it.

338
00:12:50,200 --> 00:12:53,000
But in the future, maybe we'll just get rid of Windows of H and solve

339
00:12:53,000 --> 00:12:53,500
that problem.

340
00:12:54,500 --> 00:12:57,600
Okay, so we are now at the point where we should be handling.

341
00:12:57,600 --> 00:12:59,300
I believe our alt f4 a properly.

342
00:12:59,300 --> 00:13:00,600
So F4 does not exit.

343
00:13:00,600 --> 00:13:01,200
Alt f4.

344
00:13:01,200 --> 00:13:03,100
Does that is what we wanted?

345
00:13:03,200 --> 00:13:04,800
So I said I wasn't going to show how to handle it.

346
00:13:04,800 --> 00:13:05,400
But I did it.

347
00:13:05,400 --> 00:13:06,900
Anyway, there you go.

348
00:13:06,900 --> 00:13:10,900
So the reason we had to do that again was just because basically

349
00:13:11,200 --> 00:13:17,200
Windows is only going to send you that ciske down message because it

350
00:13:17,200 --> 00:13:20,200
doesn't actually know if you maybe had something in particular, you

351
00:13:20,200 --> 00:13:22,200
want to do with the alt +, F4 keys, and so on.

352
00:13:22,200 --> 00:13:23,400
So he doesn't want to be presumptuous.

353
00:13:23,400 --> 00:13:23,900
So it's actually

354
00:13:24,000 --> 00:13:25,200
The deaf window prop.

355
00:13:25,200 --> 00:13:29,500
It's this thing that actually picks up the alt f4, closes the window

356
00:13:29,500 --> 00:13:29,800
for you.

357
00:13:29,800 --> 00:13:34,300
So once you start handling, WS W, M6 key up and ciske down.

358
00:13:34,500 --> 00:13:36,100
Then you have to do that stuff.

359
00:13:36,100 --> 00:13:38,200
That deaf window proc was doing for you.

360
00:13:38,200 --> 00:13:40,800
Now, you could just called if window prop but we don't really want it

361
00:13:40,800 --> 00:13:42,200
to do any other Sisk.

362
00:13:42,200 --> 00:13:43,100
He's probably.

363
00:13:43,200 --> 00:13:46,300
So I say it's better to just handle it ourselves and leave it at that

364
00:13:46,400 --> 00:13:48,700
especially because we may not want a cold exit on this.

365
00:13:48,700 --> 00:13:50,200
We may want to do something here.

366
00:13:50,300 --> 00:13:50,700
Who knows?

367
00:13:50,900 --> 00:13:53,100
So that's probably the best way to do it in my opinion.

368
00:13:53,100 --> 00:13:53,800
So that's what we should do.

369
00:13:54,000 --> 00:13:56,100
Do last point of clarification.

370
00:13:56,900 --> 00:13:57,700
Down in here.

371
00:13:58,500 --> 00:14:01,300
Someone brought those up and their right to bring it up, but it's just

372
00:14:01,300 --> 00:14:02,700
something we weren't going to get to yet.

373
00:14:03,000 --> 00:14:07,200
So I want to wait and hold off on talking about it till we get to it.

374
00:14:07,200 --> 00:14:11,900
We're just so, if anyone's else is concerned, there is a bug in xinput

375
00:14:12,000 --> 00:14:15,300
a really bad performance bug and actually, as far as I know, I'm the

376
00:14:15,300 --> 00:14:18,500
first person who actually complained about it.

377
00:14:18,600 --> 00:14:21,400
There is a post on Molly rocket from a long, long time ago where I was

378
00:14:21,400 --> 00:14:21,600
like.

379
00:14:21,600 --> 00:14:23,900
Did anyone else notice the fact that this goes

380
00:14:25,000 --> 00:14:29,200
Basically, what happens is when you call get xinput, get state.

381
00:14:29,400 --> 00:14:33,200
If you do not get back in a controller.

382
00:14:33,200 --> 00:14:34,500
Like if there was no control.

383
00:14:34,500 --> 00:14:37,100
Remember we're going through all four controllers here and pulling

384
00:14:37,100 --> 00:14:42,000
them if no controller is plugged in for that particular index.

385
00:14:42,000 --> 00:14:45,800
So, if there's no controller 3, there's no controller for xinput, at

386
00:14:45,800 --> 00:14:49,400
least on certain versions of X input will stall.

387
00:14:49,400 --> 00:14:51,700
And it'll stall for several milliseconds or something.

388
00:14:51,700 --> 00:14:54,700
It's a really bad stall, it eats up a lot of CPU time.

389
00:14:54,800 --> 00:14:58,200
I'm and so you really don't want to actually do this when we actually

390
00:14:58,200 --> 00:14:59,100
do our perf.

391
00:15:00,000 --> 00:15:02,900
We are going to have to get rid of this call.

392
00:15:02,900 --> 00:15:06,400
Every time we only want to pull the ones that are actually connected.

393
00:15:07,100 --> 00:15:09,700
Now, the documentation suggests doing something that is actually not

394
00:15:09,700 --> 00:15:13,600
what I would suggest which is pulling every so often, but that just

395
00:15:13,600 --> 00:15:15,000
leads to a spiky frame rate.

396
00:15:15,000 --> 00:15:16,200
You don't want to do that.

397
00:15:16,300 --> 00:15:16,900
In my opinion.

398
00:15:16,900 --> 00:15:22,800
The better way to do it is usually to use the actual hid notifications

399
00:15:22,800 --> 00:15:25,900
that come in when devices are plugged in unplugged because there you

400
00:15:25,900 --> 00:15:29,600
can actually see exactly when a device is connected or disconnected.

401
00:15:30,000 --> 00:15:32,700
Didn't want to go into that yet, which is why you can cover it, but we

402
00:15:32,700 --> 00:15:33,400
will be covering it.

403
00:15:33,400 --> 00:15:34,600
So don't you worry about that.

404
00:15:34,700 --> 00:15:37,100
When we get to Performance, we will get to all these things and they

405
00:15:37,100 --> 00:15:38,200
will get ironed out.

406
00:15:38,200 --> 00:15:39,200
But just in case you were worried.

407
00:15:39,200 --> 00:15:40,400
Don't worry about that.

408
00:15:40,400 --> 00:15:41,100
Leave it for now.

409
00:15:41,100 --> 00:15:42,200
You may get those stalls.

410
00:15:42,200 --> 00:15:42,800
They're fine.

411
00:15:42,900 --> 00:15:43,200
Again.

412
00:15:43,200 --> 00:15:45,200
We are not trying to be on the fast path right now.

413
00:15:45,200 --> 00:15:47,900
We're just trying to get everything running, so I can show you how to

414
00:15:47,900 --> 00:15:48,600
build everything.

415
00:15:48,800 --> 00:15:51,600
And then we will start to be concerned about the speed of the various

416
00:15:51,600 --> 00:15:54,600
things that I, you know, I already kind of know, we will have to

417
00:15:54,600 --> 00:15:56,200
improve when we get there.

418
00:15:56,500 --> 00:15:59,900
It's usually best to not crank the, you know, turn that optimization.

419
00:16:00,000 --> 00:16:02,200
Ratchet though, until you've got everything working because your

420
00:16:02,400 --> 00:16:05,600
optimization is a very precise, very serious thing that takes a lot of

421
00:16:05,600 --> 00:16:08,600
attention and you don't want to be going at it willy-nilly and you

422
00:16:08,600 --> 00:16:11,100
don't want to be doing it in code that you don't absolutely.

423
00:16:11,100 --> 00:16:11,300
No.

424
00:16:11,300 --> 00:16:13,300
You're going to keep because you're going to waste a lot of time if

425
00:16:13,300 --> 00:16:14,000
you do that.

426
00:16:14,100 --> 00:16:16,600
Alright, that is the end of the clarification.

427
00:16:16,600 --> 00:16:18,100
So it is almond milk time.

428
00:16:18,100 --> 00:16:20,600
I think pretty much without a doubt.

429
00:16:21,300 --> 00:16:22,100
Almond milk time.

430
00:16:24,000 --> 00:16:27,500
And then we will get started on Direct sound.

431
00:16:28,700 --> 00:16:29,300
Heaven, Help Us.

432
00:16:33,800 --> 00:16:35,400
Okay, a little bit trippy there.

433
00:16:35,400 --> 00:16:36,700
That was not the cleanest almond milk.

434
00:16:36,700 --> 00:16:40,200
Take I'm going to admit that, you know, sometimes this kind of like I

435
00:16:40,200 --> 00:16:41,700
didn't type in those parentheses correctly.

436
00:16:41,700 --> 00:16:44,100
Sometimes the almond milk, gets a little away from you.

437
00:16:44,300 --> 00:16:45,100
That's what happens.

438
00:16:45,300 --> 00:16:46,100
All right.

439
00:16:46,100 --> 00:16:50,100
So basically what we need to do is first and this is why I say, it's

440
00:16:50,100 --> 00:16:50,800
gonna be a little rough.

441
00:16:50,800 --> 00:16:51,100
First.

442
00:16:51,100 --> 00:16:52,800
I'm even going to do a little sketching here.

443
00:16:52,800 --> 00:16:56,000
The sketching is brought to you, of course, and by, you know what, I

444
00:16:56,000 --> 00:16:57,500
even think I still have his name written down.

445
00:16:57,600 --> 00:16:59,800
This is brought to you by Kurt Car to let cartel.

446
00:16:59,800 --> 00:17:00,400
Teppei.

447
00:17:00,500 --> 00:17:03,400
In fact, the person who actually sent an email and told

448
00:17:03,600 --> 00:17:07,000
How to fix OBS so that I could actually run at a reasonable frame rate

449
00:17:07,000 --> 00:17:08,400
with tooltip still capturing.

450
00:17:08,900 --> 00:17:13,800
And so I think I can actually draw somewhat speedily enough to

451
00:17:13,800 --> 00:17:15,000
actually do a diagram here.

452
00:17:15,000 --> 00:17:16,500
Yeah, that's pretty bad.

453
00:17:17,200 --> 00:17:18,099
I don't know, it's not great.

454
00:17:18,099 --> 00:17:20,300
But I'm going to drive draw anyway, it's better than it was.

455
00:17:20,400 --> 00:17:21,200
So that's something.

456
00:17:21,800 --> 00:17:22,000
All right.

457
00:17:22,000 --> 00:17:24,800
So what I'm going to do here is just give you a little bit of insight

458
00:17:24,800 --> 00:17:27,900
in how we're actually going to be, outputting sound because it's a

459
00:17:27,900 --> 00:17:29,000
little bit wonky.

460
00:17:29,100 --> 00:17:30,400
We're going to be using direct sound.

461
00:17:30,400 --> 00:17:33,200
So that will have reasonable compatibility with older systems.

462
00:17:33,500 --> 00:17:35,900
Like I said, I kind of wanted to show you how to get things running on

463
00:17:35,900 --> 00:17:37,000
Windows XP as well.

464
00:17:37,000 --> 00:17:39,600
Just to show you how to give you a little practice with kind of

465
00:17:39,600 --> 00:17:41,600
reaching back and doing backwards compatibility.

466
00:17:42,100 --> 00:17:44,500
Does that mean you actually have to charge it Windows XP when you're

467
00:17:44,500 --> 00:17:45,200
actually shipping a game?

468
00:17:45,200 --> 00:17:46,000
Probably not.

469
00:17:46,000 --> 00:17:48,800
I think the user numbers are down to something like seven percent.

470
00:17:49,500 --> 00:17:52,800
So it's really not that big of a concern, but I'm trying to keep it

471
00:17:52,800 --> 00:17:55,800
that way because there's not a lot of cost to us to actually do that.

472
00:17:55,800 --> 00:17:57,100
At least for the majority of the code.

473
00:17:57,100 --> 00:17:59,300
So we're doing it anyway, so I'm going to use direct sound, which is

474
00:17:59,300 --> 00:17:59,800
an older age.

475
00:18:00,000 --> 00:18:01,900
I there are newer audio apis.

476
00:18:02,000 --> 00:18:03,600
I don't think any of them are particularly good.

477
00:18:03,600 --> 00:18:06,200
Anyway, they're probably all six of one half-dozen the other but you

478
00:18:06,200 --> 00:18:08,800
might get slightly better latency and things like that with going with

479
00:18:08,800 --> 00:18:09,300
the newer one.

480
00:18:09,300 --> 00:18:13,700
I'm not sure point being the way the direct sound output works in the

481
00:18:13,700 --> 00:18:14,900
way that we're going to be doing it.

482
00:18:15,000 --> 00:18:19,400
It's basically you allocate a buffer of sound, this is my buffer.

483
00:18:19,400 --> 00:18:21,900
This is, you know, the zeroth bite of the buffer and this is, you

484
00:18:21,900 --> 00:18:23,600
know, some some number and out of there.

485
00:18:23,600 --> 00:18:23,700
Wow.

486
00:18:23,700 --> 00:18:24,600
This is really slow.

487
00:18:25,700 --> 00:18:27,400
Thought it was going to be good, but it wasn't good.

488
00:18:27,600 --> 00:18:29,900
And basically this this buffer is,

489
00:18:30,000 --> 00:18:31,700
Circular, so, what's going to happen?

490
00:18:31,800 --> 00:18:35,200
Is basically direct sound, you know, we'll play along and it'll play

491
00:18:35,200 --> 00:18:37,700
along, and I'll play the sound and, you know, essentially, the

492
00:18:37,700 --> 00:18:40,300
hardware, whatever your sound, however, it is playing the song, and

493
00:18:40,300 --> 00:18:43,000
when it gets to the end, it just comes right back around to the

494
00:18:43,000 --> 00:18:43,800
beginning again.

495
00:18:43,900 --> 00:18:46,200
So it's just going to be constantly looping, this buffer.

496
00:18:46,400 --> 00:18:48,400
So we're basically going to allocate a buffer.

497
00:18:48,400 --> 00:18:50,400
That's maybe, you know, it's pretty long, you know, maybe it's like

498
00:18:50,400 --> 00:18:51,200
two seconds long.

499
00:18:51,200 --> 00:18:54,100
Let's say a nice, big buffer that's like two seconds long.

500
00:18:54,300 --> 00:18:58,700
And, you know, audio D's days of you can see on most things is like 48

501
00:18:58,700 --> 00:18:59,700
khz, right.

502
00:19:00,000 --> 00:19:00,400
Oh gosh.

503
00:19:00,400 --> 00:19:01,200
What is that?

504
00:19:01,300 --> 00:19:02,000
What is happening?

505
00:19:02,000 --> 00:19:03,400
This is just, this is awful.

506
00:19:03,400 --> 00:19:04,100
All right, there we go.

507
00:19:05,400 --> 00:19:08,700
Audio is basically 48 khz these days which is 48,000 samples per

508
00:19:08,700 --> 00:19:09,100
second.

509
00:19:09,100 --> 00:19:09,300
Right?

510
00:19:09,300 --> 00:19:12,600
So basically we're going to have either 48 kilohertz, either 48,000

511
00:19:12,700 --> 00:19:14,100
samples in this buffer.

512
00:19:14,400 --> 00:19:18,200
If we do one second or we're going to have what is that does night.

513
00:19:18,200 --> 00:19:21,100
96,000 in there.

514
00:19:21,300 --> 00:19:23,700
Basically, we're going to have some some large number of samples.

515
00:19:24,400 --> 00:19:26,100
And of course, what we're doing is, we're going to be running this

516
00:19:26,100 --> 00:19:29,800
game at 30 frames a second or 60 frames a second depending on the CPU.

517
00:19:29,900 --> 00:19:32,600
You and all sorts of other system, things the resolution running, at

518
00:19:32,600 --> 00:19:33,300
that sort of stuff.

519
00:19:33,700 --> 00:19:36,400
So we're looking at outputting, you know, something like I don't want

520
00:19:36,400 --> 00:19:38,400
to, I want to say like 800 or something like this.

521
00:19:38,400 --> 00:19:38,800
I don't know.

522
00:19:39,200 --> 00:19:42,900
We're basically going to be outputting once, you know, forty eight,

523
00:19:42,900 --> 00:19:44,300
thousand divided by 60.

524
00:19:44,300 --> 00:19:47,200
In fact, you know what, I could actually just do that if I really

525
00:19:47,200 --> 00:19:51,800
wanted to, I suppose, if I was being was being diligent here 48,000,

526
00:19:52,600 --> 00:19:55,700
/, 6800 or I guess I didn't need to do it.

527
00:19:55,800 --> 00:19:59,400
We're going to be outputting about eight hundred samples per frame.

528
00:20:00,000 --> 00:20:01,400
To line up with the video, right?

529
00:20:01,400 --> 00:20:04,300
Because the video is showing for 1/60 of a second.

530
00:20:04,300 --> 00:20:07,200
Let's say, and we're going to Output 800 samples for that.

531
00:20:07,400 --> 00:20:09,400
That is roughly what we're going to be doing.

532
00:20:09,400 --> 00:20:13,300
But we cannot obviously, wherever direct sound is playing, you know,

533
00:20:13,300 --> 00:20:14,700
wherever direct sound happens to be.

534
00:20:14,700 --> 00:20:16,500
Lets say direct sounds that though.

535
00:20:16,500 --> 00:20:20,100
I shouldn't say Direction on the hardware is at a particular location.

536
00:20:20,100 --> 00:20:20,800
Let's say, right?

537
00:20:20,800 --> 00:20:21,500
Let's say the hardware.

538
00:20:21,500 --> 00:20:22,700
Is there something like this?

539
00:20:23,000 --> 00:20:26,800
Well, if the hardware is there, we can't actually write directly into

540
00:20:26,800 --> 00:20:29,700
their, because if we write wrote directly into their

541
00:20:29,900 --> 00:20:33,300
We would basically have a problem where this would the where it was

542
00:20:33,300 --> 00:20:36,900
playing would get past where we were trying to write before we finish

543
00:20:36,900 --> 00:20:37,500
writing into it.

544
00:20:37,500 --> 00:20:37,600
Right?

545
00:20:37,600 --> 00:20:40,100
Because there's a bunch of latency and just the writing as well.

546
00:20:40,600 --> 00:20:44,200
So what we actually need to do is we need to write a little bit ahead

547
00:20:44,200 --> 00:20:46,200
of wherever it actually is, right.

548
00:20:46,200 --> 00:20:48,500
So we're basically going to have direct sound is going to be playing

549
00:20:48,500 --> 00:20:48,900
in the harbor.

550
00:20:48,900 --> 00:20:51,500
Is going to be playing somewhere and we're going to be writing

551
00:20:51,500 --> 00:20:52,600
somewhere ahead of it.

552
00:20:52,600 --> 00:20:55,500
We're going to write in our new samples that go along with the frames

553
00:20:55,500 --> 00:20:59,800
that were outputting and then when, you know, actually as direct sound

554
00:21:00,000 --> 00:21:00,300
Is up.

555
00:21:00,300 --> 00:21:02,000
It'll just play through those and off we go.

556
00:21:02,000 --> 00:21:05,400
So, we're always a little bit ahead right now.

557
00:21:05,400 --> 00:21:09,000
When we talk about the game Loop, when we actually go back and do the,

558
00:21:09,000 --> 00:21:10,600
the full-on gameloop stuff.

559
00:21:10,600 --> 00:21:13,100
Probably starting next week, maybe the week after that.

560
00:21:13,200 --> 00:21:16,000
There's a little more subtlety here because it deals with how you

561
00:21:16,000 --> 00:21:16,700
structure thing.

562
00:21:17,200 --> 00:21:19,800
Things their stuff to think about like, where you're actually going to

563
00:21:19,800 --> 00:21:21,100
do the page flip, right?

564
00:21:21,100 --> 00:21:23,900
Because you can imagine if you're viewing some frame.

565
00:21:23,900 --> 00:21:26,800
Let's say that you're viewing a particular frame that got flipped

566
00:21:26,900 --> 00:21:27,800
somewhere around here.

567
00:21:27,800 --> 00:21:29,700
So the user is viewing, a frame.

568
00:21:30,000 --> 00:21:30,900
Of the video.

569
00:21:31,600 --> 00:21:33,800
Got this drawing is so amazingly awful.

570
00:21:34,100 --> 00:21:35,500
I gotta have to tune this sometime.

571
00:21:35,500 --> 00:21:37,900
Maybe we'll do a practice room sometime where I try to get the setting

572
00:21:37,900 --> 00:21:38,900
so they can actually draw.

573
00:21:39,000 --> 00:21:42,200
So if we're viewing a frame and we're going to view this Frame, let's

574
00:21:42,200 --> 00:21:44,100
say this is 1/60 of a second here.

575
00:21:44,100 --> 00:21:46,800
So this is 1/60 of a second, right?

576
00:21:47,000 --> 00:21:50,100
That's what's going, you know, and it's even Windows, that's ruining

577
00:21:50,100 --> 00:21:50,500
my stream.

578
00:21:50,500 --> 00:21:51,600
It's this stupid.

579
00:21:51,700 --> 00:21:52,500
It's that thing.

580
00:21:52,600 --> 00:21:53,700
I don't want that thing.

581
00:21:53,700 --> 00:21:57,000
That's all I got turned off pan and put I guess maybe we'll just go

582
00:21:57,000 --> 00:21:58,600
right to the mouse and just do it this way.

583
00:21:58,700 --> 00:21:59,200
There we go.

584
00:22:00,400 --> 00:22:02,200
So this is 1/60 of a second in here.

585
00:22:02,200 --> 00:22:05,700
Let's say right the user is going to be staring at this picture for

586
00:22:05,700 --> 00:22:07,400
that full 1/60 of a second.

587
00:22:07,600 --> 00:22:10,700
And so what we're going to do is we're going to be building the next

588
00:22:10,700 --> 00:22:12,900
frame like in here in this time.

589
00:22:13,000 --> 00:22:16,000
This is where we're calculating the next picture, right?

590
00:22:16,000 --> 00:22:19,100
We're doing the rendering and the game updating and all that stuff to

591
00:22:19,100 --> 00:22:20,400
generate this picture.

592
00:22:20,700 --> 00:22:24,600
So we would also want to Output this piece of sound.

593
00:22:24,700 --> 00:22:28,100
So we want to Output a p, this picture and this sound together.

594
00:22:28,200 --> 00:22:29,700
And ideally, we would be

595
00:22:29,900 --> 00:22:34,100
Writing into the location of the buffer that lines up with where we

596
00:22:34,100 --> 00:22:36,200
expect to page flip, right?

597
00:22:36,400 --> 00:22:37,300
The problem with this.

598
00:22:37,300 --> 00:22:41,100
It's actually really hard to do that because the page flipping happens

599
00:22:41,100 --> 00:22:44,300
usually on the V blank in the old days, but could actually happen

600
00:22:44,300 --> 00:22:47,700
anytime now with like in videos crazy sinking stuff and there's a deep

601
00:22:47,700 --> 00:22:49,100
pipeline sometimes involved.

602
00:22:49,100 --> 00:22:51,300
So we actually don't know where these are going to be shown.

603
00:22:51,400 --> 00:22:53,000
There's all this kind of stuff that gets in there.

604
00:22:53,000 --> 00:22:55,900
That makes it a more complicated than that, but it's just something to

605
00:22:55,900 --> 00:22:59,500
be aware of like, trying to think about the audio sync on any given

606
00:22:59,500 --> 00:22:59,800
frame.

607
00:23:00,000 --> 00:23:02,400
Are Computing the picture that it's going to get flipped at some

608
00:23:02,400 --> 00:23:04,700
point, going to start being shown in the audio that's going to play

609
00:23:04,700 --> 00:23:05,300
behind it?

610
00:23:05,300 --> 00:23:08,100
Ideally, and that's kind of the way to think about it.

611
00:23:08,200 --> 00:23:10,600
So basically, what we're going to try to do today is just open a

612
00:23:10,600 --> 00:23:13,800
handle to direct sound and get this buffer up.

613
00:23:13,800 --> 00:23:17,200
This thing where and and have direct sound just kind of do this

614
00:23:17,300 --> 00:23:19,900
infinite loop on it, where it just plays it over and over and over

615
00:23:19,900 --> 00:23:20,200
again.

616
00:23:20,300 --> 00:23:21,200
That's where we're going for.

617
00:23:21,200 --> 00:23:23,700
I don't know if we'll get it today, but that's where we're going for.

618
00:23:23,700 --> 00:23:24,900
So, hopefully that makes some sense.

619
00:23:24,900 --> 00:23:25,800
It's pretty straightforward.

620
00:23:25,800 --> 00:23:28,300
And again, it's just memory that we're just writing into just like the

621
00:23:28,300 --> 00:23:29,800
bitmap, its exact same.

622
00:23:29,900 --> 00:23:32,600
Same thing we did with the bitmap or just open up a buffer that we can

623
00:23:32,600 --> 00:23:33,800
write our own sound into.

624
00:23:34,000 --> 00:23:37,800
And then that sound, we'll just play out the speakers, which is what

625
00:23:37,800 --> 00:23:38,500
we want.

626
00:23:39,600 --> 00:23:43,000
I'm just going to close this awful gimp because that was horrible.

627
00:23:43,100 --> 00:23:45,900
I got to figure out what's wrong with that before someone email me to

628
00:23:45,900 --> 00:23:47,100
remind me if you think about it.

629
00:23:47,400 --> 00:23:54,800
Just man to fix that because that drawing was horrid, okay.

630
00:23:56,900 --> 00:23:59,700
So, what we need to do here, if I remember.

631
00:24:00,100 --> 00:24:01,100
And we'll have to look at the Docks.

632
00:24:01,100 --> 00:24:04,100
But if I remember correctly, you can't really get your direct sound

633
00:24:04,100 --> 00:24:04,500
going.

634
00:24:04,500 --> 00:24:06,800
I think until you have a window.

635
00:24:06,900 --> 00:24:08,600
So basically we don't want to do it up here.

636
00:24:08,600 --> 00:24:10,900
We can load X input we can load it anytime.

637
00:24:10,900 --> 00:24:13,700
So that was a good good time to do that, but we can't actually do that

638
00:24:13,700 --> 00:24:14,100
with directs.

639
00:24:14,100 --> 00:24:16,300
I think we want to do that a little later.

640
00:24:16,600 --> 00:24:19,800
So basically down in here after we actually know that we do have a

641
00:24:19,800 --> 00:24:22,100
window in the window is actually open.

642
00:24:22,700 --> 00:24:24,800
Then we're going to do a win32.

643
00:24:27,100 --> 00:24:29,800
I guess we're going to call it Lodi sound because we got a load it.

644
00:24:30,000 --> 00:24:31,900
And then we also got to open it as well.

645
00:24:32,200 --> 00:24:33,600
So we'll basically call it that.

646
00:24:33,600 --> 00:24:37,900
Maybe I'll call it a win32 in it D sound because to some degree,

647
00:24:37,900 --> 00:24:40,800
that's a little more accurate since we're doing more than than just

648
00:24:40,800 --> 00:24:41,700
loading it.

649
00:24:42,000 --> 00:24:43,700
So, anyway, we're going to have this here.

650
00:24:43,800 --> 00:24:46,000
Maybe it'll return something eventually, but base, we're gonna have a

651
00:24:46,000 --> 00:24:48,400
little function here to initialize direct sound.

652
00:24:48,800 --> 00:24:51,500
And what that's going to have to do is it's going to have to do a

653
00:24:51,500 --> 00:24:52,300
couple things.

654
00:24:52,300 --> 00:24:54,600
So, the first thing that we're going to have to do is we're going to

655
00:24:54,600 --> 00:24:58,200
have to actually load the library, which is what we did before, right?

656
00:24:58,500 --> 00:24:59,900
We're going to actually load D sound.

657
00:25:00,100 --> 00:25:04,900
Because again, you know, if for some reason D sound wasn't installed

658
00:25:04,900 --> 00:25:05,400
on the machine.

659
00:25:05,400 --> 00:25:08,200
It's unlikely but let's say it wasn't there's no reason to not be able

660
00:25:08,200 --> 00:25:08,900
to play the game.

661
00:25:08,900 --> 00:25:11,400
You have to play the game without sound but at least the game will

662
00:25:11,400 --> 00:25:12,100
still run.

663
00:25:12,200 --> 00:25:13,500
So we don't want to say that.

664
00:25:13,500 --> 00:25:15,300
You have to absolutely have D sound.

665
00:25:18,400 --> 00:25:19,500
So, we're gonna have to do that.

666
00:25:19,600 --> 00:25:24,800
Then we're going to have to get a direct sound object because

667
00:25:24,800 --> 00:25:27,300
basically direct sound is object oriented.

668
00:25:27,500 --> 00:25:29,200
That is the way they chose to implement it.

669
00:25:29,200 --> 00:25:29,800
Unfortunately.

670
00:25:29,800 --> 00:25:30,900
It's kind of a calm.

671
00:25:31,000 --> 00:25:33,300
It's this thing, the component object model.

672
00:25:33,300 --> 00:25:37,600
It's a whole thing in Windows, that I'd rather not actually have to

673
00:25:37,900 --> 00:25:39,400
have to go into if we can avoid it.

674
00:25:39,400 --> 00:25:40,800
So, it's just a nightmare.

675
00:25:40,800 --> 00:25:42,600
It's basically a thing that they decided to do.

676
00:25:43,000 --> 00:25:47,500
That was about trying to sort of have an object oriented model for how

677
00:25:47,500 --> 00:25:48,200
things are called.

678
00:25:48,300 --> 00:25:52,000
Windows and where you can ask about what interfaces thing support and

679
00:25:52,000 --> 00:25:53,300
all this kind of jazz.

680
00:25:53,300 --> 00:25:57,300
It was a complete train wreck awful, just absolutely awful bad idea.

681
00:25:57,300 --> 00:26:01,400
But unfortunately, that is the way that these apis were exposed at the

682
00:26:01,400 --> 00:26:01,700
time.

683
00:26:01,700 --> 00:26:02,800
That's just how they wrote them.

684
00:26:02,900 --> 00:26:05,400
They were not clean, like the xinput one where you just get a couple

685
00:26:05,400 --> 00:26:06,200
calls and it works.

686
00:26:06,800 --> 00:26:08,000
This is a lot Messier.

687
00:26:08,000 --> 00:26:09,900
So we're gonna have to get a direct sound object.

688
00:26:10,000 --> 00:26:15,500
We are going to have to essentially create a primary buffer, which is

689
00:26:15,500 --> 00:26:16,400
basically

690
00:26:18,200 --> 00:26:22,900
Sort of it's holdover from the original version of direct sound where

691
00:26:22,900 --> 00:26:26,000
you wrote directly to the sound card in some sense.

692
00:26:26,800 --> 00:26:29,800
They don't really let you do that anymore, but you still have to

693
00:26:29,800 --> 00:26:32,400
create a primary buffer, which was supposed to be think those on the

694
00:26:32,400 --> 00:26:36,500
sound card so that you can set the mode of that in the old school, way

695
00:26:36,500 --> 00:26:39,700
of doing things, and then we're going to create a secondary buffer,

696
00:26:39,700 --> 00:26:40,200
which is the thing.

697
00:26:40,200 --> 00:26:43,600
We're actually going to write to if that makes sense.

698
00:26:43,700 --> 00:26:47,900
And then after that, we will just start it playing.

699
00:26:48,300 --> 00:26:49,600
Then we should be good to go.

700
00:26:49,600 --> 00:26:53,100
That should actually give us sound on Windows in theory.

701
00:26:53,200 --> 00:26:55,900
If I'm not if I'm not forgetting a step.

702
00:26:55,900 --> 00:26:58,400
And in here, there's a couple things like there's a there's a

703
00:26:58,400 --> 00:26:59,900
Cooperative mode that

704
00:27:00,000 --> 00:27:00,700
To set that.

705
00:27:00,700 --> 00:27:03,400
It's kind of tells it what you're doing and these sorts of other

706
00:27:03,400 --> 00:27:03,800
things.

707
00:27:04,100 --> 00:27:04,400
All right.

708
00:27:04,400 --> 00:27:05,900
So first of all, we need to load the library.

709
00:27:05,900 --> 00:27:08,900
We already know how to do that for basically, doing that exactly the

710
00:27:08,900 --> 00:27:11,600
same way that we did it for X input.

711
00:27:11,600 --> 00:27:12,800
When you look up here, right?

712
00:27:12,900 --> 00:27:14,100
We're doing that exact same thing.

713
00:27:14,100 --> 00:27:17,600
So we're just going to load Library, D sound dll.

714
00:27:17,600 --> 00:27:18,800
If I'm not very much mistaken.

715
00:27:18,800 --> 00:27:22,000
We're just going to go ahead and load that up and then assuming that

716
00:27:22,000 --> 00:27:26,200
we actually find the library, then we're going to do these additional

717
00:27:26,200 --> 00:27:26,900
steps here.

718
00:27:27,100 --> 00:27:29,900
So in order to get a direct sound object, I

719
00:27:30,000 --> 00:27:33,200
We have to get proc address on Direct sound create.

720
00:27:33,300 --> 00:27:36,500
So, basically, this this thing right here, that we were doing this

721
00:27:36,500 --> 00:27:39,900
sort of situation from before we got to do that.

722
00:27:40,000 --> 00:27:41,600
And I think it's called direct sound create.

723
00:27:41,600 --> 00:27:46,600
I'm going to take a look and make sure that's actually true because I

724
00:27:46,600 --> 00:27:48,700
don't remember a lot of these things by heart.

725
00:27:48,700 --> 00:27:50,100
I got to got to be honest with you.

726
00:27:50,100 --> 00:27:55,500
So, direct Sam create much like I was doing before I basically want to

727
00:27:55,500 --> 00:27:58,100
verify all this with the with the actual.

728
00:27:58,800 --> 00:27:59,000
Yeah.

729
00:27:59,000 --> 00:27:59,800
This is this is it.

730
00:28:00,400 --> 00:28:01,600
With the actual documentation.

731
00:28:01,600 --> 00:28:03,700
Unfortunately, this isn't the actual documentation.

732
00:28:03,700 --> 00:28:06,100
This is someone asking about the actual documentation.

733
00:28:06,500 --> 00:28:08,300
That's direct sound create a Twitch.

734
00:28:08,300 --> 00:28:10,600
I didn't actually want because we don't want to require a.

735
00:28:10,600 --> 00:28:16,400
We have absolutely no reason to require it but it doesn't look like

736
00:28:16,400 --> 00:28:18,000
I've got a lot of other reference here.

737
00:28:18,000 --> 00:28:19,100
This does actually look right.

738
00:28:19,100 --> 00:28:21,600
But I'd rather read the actual documentation.

739
00:28:22,500 --> 00:28:24,000
That's a little unfortunate.

740
00:28:24,200 --> 00:28:25,400
Well, what are you going to do?

741
00:28:25,400 --> 00:28:27,200
I guess we'll muddle through this the old-fashioned way.

742
00:28:27,200 --> 00:28:28,700
Like I said it was going to be rough.

743
00:28:28,900 --> 00:28:29,900
We're using an older version.

744
00:28:30,000 --> 00:28:33,100
The API which means you kind of end up in some sticky situations

745
00:28:33,100 --> 00:28:33,700
sometimes.

746
00:28:33,700 --> 00:28:39,500
So let's go ahead and include D sound .h here, I guess and make sure

747
00:28:39,500 --> 00:28:41,600
that we actually have it and we do.

748
00:28:41,600 --> 00:28:42,300
So that's good.

749
00:28:42,300 --> 00:28:45,800
And then I'm going to go up here and I'm going to just go right ahead

750
00:28:45,800 --> 00:28:46,700
and open that up.

751
00:28:46,700 --> 00:28:50,500
We'll just say, let's see what it's got in it because that'll help us

752
00:28:50,500 --> 00:28:50,700
out.

753
00:28:50,700 --> 00:28:53,300
So let's take a look at direct sound create.

754
00:28:53,300 --> 00:28:54,800
Here we go.

755
00:28:54,800 --> 00:28:57,000
This is the actual call that we wanted.

756
00:28:57,000 --> 00:28:59,900
Looks like so I'm going to cut and paste that out of

757
00:29:00,000 --> 00:29:00,400
Here.

758
00:29:00,700 --> 00:29:04,800
And I'm going to go ahead and do our standard get proc address

759
00:29:04,800 --> 00:29:07,900
maneuver exactly the way that we did these guys.

760
00:29:08,100 --> 00:29:13,800
So, I'm going to say pound Define H result when a twin API and then

761
00:29:13,800 --> 00:29:15,000
we're going to do a name here.

762
00:29:15,400 --> 00:29:20,200
And this is basically our direct sound creates.

763
00:29:20,200 --> 00:29:23,900
And so we give it a name and that will initialize it right there.

764
00:29:24,100 --> 00:29:25,600
It's going to take one of those.

765
00:29:25,600 --> 00:29:29,400
It's going to take one of those and it is going to take one of those

766
00:29:29,400 --> 00:29:29,800
now.

767
00:29:30,100 --> 00:29:33,700
One of the things you may ask me to do and I don't blame you is to

768
00:29:33,700 --> 00:29:37,400
explain to you what these extra things are like pyung kaotar.

769
00:29:38,200 --> 00:29:43,500
And I am, perhaps disappointed, perhaps pleased to say have absolutely

770
00:29:43,500 --> 00:29:44,800
no idea.

771
00:29:44,900 --> 00:29:48,100
I know it has something to do with the cam, interface thing that weird

772
00:29:48,200 --> 00:29:51,300
old thing that used to do, but I have never actually had to use those

773
00:29:51,300 --> 00:29:51,700
things.

774
00:29:51,900 --> 00:29:57,700
I have never had to use that pointer for anything and so I'm happy to

775
00:29:57,700 --> 00:29:58,000
say.

776
00:29:58,000 --> 00:29:59,800
I have just always left at zero.

777
00:30:00,100 --> 00:30:01,100
I'm sure it has an explanation.

778
00:30:01,100 --> 00:30:03,700
I'm sure the documentation will tell you if you're curious, but I

779
00:30:03,700 --> 00:30:04,400
can't tell you.

780
00:30:08,000 --> 00:30:10,400
The the grid device on the other hand is pretty straightforward.

781
00:30:10,400 --> 00:30:12,200
That's just what sound card you were trying to open.

782
00:30:13,500 --> 00:30:15,100
We're actually in the past 0 for both of those.

783
00:30:15,100 --> 00:30:16,900
But anyway, so here we go.

784
00:30:16,900 --> 00:30:17,600
This is the thing.

785
00:30:17,600 --> 00:30:19,300
We actually need to get that back.

786
00:30:20,500 --> 00:30:23,800
So we're going to call Direct sound create, and then we're going to do

787
00:30:23,800 --> 00:30:25,400
exactly the same things that we did here.

788
00:30:25,400 --> 00:30:26,600
We made our macro.

789
00:30:26,900 --> 00:30:28,700
We're going to make a pointer to it.

790
00:30:28,700 --> 00:30:31,200
Basically, direct sound creates.

791
00:30:31,600 --> 00:30:34,900
We are going to make, well, we don't actually need to stub call,

792
00:30:34,900 --> 00:30:37,000
actually, because this isn't going to get called from anywhere.

793
00:30:37,000 --> 00:30:37,600
We don't even

794
00:30:37,700 --> 00:30:39,200
It to be Global.

795
00:30:39,200 --> 00:30:42,400
Actually, we just need to type def because what we're going to do is

796
00:30:42,400 --> 00:30:44,700
we're just going to use it to create it just that one time.

797
00:30:44,800 --> 00:30:47,400
So we actually only need the pointer in here.

798
00:30:47,400 --> 00:30:48,600
We're never going to call that create.

799
00:30:48,600 --> 00:30:48,900
Again.

800
00:30:48,900 --> 00:30:51,800
I don't think now, if we change our mind we can always move it out to

801
00:30:51,800 --> 00:30:53,300
be a universal function that's called.

802
00:30:53,300 --> 00:30:55,300
But since we don't need it, universally yet.

803
00:30:55,300 --> 00:30:57,300
I'm not going to bother putting a universal because that will only

804
00:30:57,300 --> 00:30:59,700
lead to maybe people calling it accidentally or who knows what else.

805
00:31:00,000 --> 00:31:03,300
So if we get the library will go ahead and do the direct sound, create

806
00:31:03,300 --> 00:31:06,200
call and we'll make sure we actually get that back.

807
00:31:06,300 --> 00:31:07,500
Assuming we get that back.

808
00:31:07,700 --> 00:31:10,900
And then we will actually try to call it like this.

809
00:31:10,900 --> 00:31:12,900
I guess we'll just go ahead and call it right in here.

810
00:31:14,100 --> 00:31:19,100
If we don't get it back, this would might be a good place to just give

811
00:31:19,100 --> 00:31:21,900
a give a quick Diagnostic and I'm going to just put these in here

812
00:31:21,900 --> 00:31:24,400
because will eventually have a logging system where will log arrows

813
00:31:24,700 --> 00:31:26,100
and so I might just add those in there.

814
00:31:26,100 --> 00:31:27,900
So we know and I'm going to put them up here as well.

815
00:31:27,900 --> 00:31:31,600
Just so we kind of know, this might be a good place for a diagnostic

816
00:31:31,600 --> 00:31:32,100
as well.

817
00:31:32,200 --> 00:31:34,600
Just so you know, which version of xinput was running in case.

818
00:31:34,600 --> 00:31:37,300
There's stuff, you know, we might print out kind of which version we

819
00:31:37,300 --> 00:31:38,600
loaded, that sort of stuff.

820
00:31:39,100 --> 00:31:41,500
You know, these these might be good that sort of thing.

821
00:31:41,500 --> 00:31:43,700
So just just kind of put some to dues in there so that when we come

822
00:31:43,800 --> 00:31:44,400
Through here.

823
00:31:44,500 --> 00:31:45,600
When we do have a logging system.

824
00:31:45,600 --> 00:31:47,200
We can add them in a code will still work.

825
00:31:47,200 --> 00:31:47,900
Just fine.

826
00:31:48,600 --> 00:31:49,800
Even though we don't have Diagnostics.

827
00:31:49,800 --> 00:31:51,800
Those are just for error-checking later when we're trying to do

828
00:31:51,800 --> 00:31:52,700
compatibility testing.

829
00:31:52,700 --> 00:31:55,700
Sometimes it helps to have some way of looking at a log and seeing

830
00:31:55,700 --> 00:31:56,500
what went wrong.

831
00:31:59,600 --> 00:32:04,200
Okay, so I got to set the Co-operative level here.

832
00:32:04,400 --> 00:32:05,700
I'm pretty sure that's what we do.

833
00:32:05,700 --> 00:32:07,000
Direct sound create.

834
00:32:07,000 --> 00:32:08,400
We don't care which device it is.

835
00:32:08,900 --> 00:32:10,900
We need to create one of those.

836
00:32:11,400 --> 00:32:13,600
Basically, the way that it works is we call Direct sound.

837
00:32:13,700 --> 00:32:16,400
Wait, and it's going to give us it's going to give us back or turn

838
00:32:16,400 --> 00:32:17,800
code that we're going to have to check here.

839
00:32:18,800 --> 00:32:22,400
And and then we're going to do is we're actually not going to it's not

840
00:32:22,400 --> 00:32:24,900
going to return to us that direct sound handle.

841
00:32:25,300 --> 00:32:29,300
What it's actually going to do is it's going to to give us back the

842
00:32:29,300 --> 00:32:32,000
pointer in an out parameter this this thing right here.

843
00:32:32,000 --> 00:32:33,600
This LP direct sound.

844
00:32:33,700 --> 00:32:35,800
So basically what we're going to have is we're going to have a direct

845
00:32:35,800 --> 00:32:37,600
sound object, right?

846
00:32:37,600 --> 00:32:39,700
We're going to have a direct sound object pointer.

847
00:32:40,100 --> 00:32:42,000
So basically this is direct sound, right?

848
00:32:42,000 --> 00:32:42,600
Like that.

849
00:32:43,000 --> 00:32:43,600
We're going to have this.

850
00:32:43,800 --> 00:32:47,800
Direct sound pointer and we are going to pass it, the address of that

851
00:32:47,800 --> 00:32:51,700
pointer and it's going to fill in the address assuming it was

852
00:32:51,700 --> 00:32:52,400
successful.

853
00:32:52,600 --> 00:32:54,500
Then it's going to return this H result.

854
00:32:54,700 --> 00:32:57,400
And because of the way they decided to do this in DirectX.

855
00:32:57,600 --> 00:32:59,800
You have to use this macro this Mac.

856
00:33:00,000 --> 00:33:02,900
Succeeded to see whether the thing actually worked.

857
00:33:03,000 --> 00:33:04,400
It's absolutely ludicrous.

858
00:33:04,600 --> 00:33:06,000
It makes no sense whatsoever.

859
00:33:06,000 --> 00:33:09,100
They were just making things worse as they went.

860
00:33:09,100 --> 00:33:10,200
But that's that's what happened.

861
00:33:10,200 --> 00:33:14,700
And you can actually see what it is here in the actual things.

862
00:33:14,700 --> 00:33:15,800
I think it should be defined.

863
00:33:15,800 --> 00:33:18,700
All those probably actually defined outside of here.

864
00:33:18,900 --> 00:33:20,900
I don't know where I don't know how to actually show you where, it's

865
00:33:20,900 --> 00:33:24,400
too fine because it's it's going to be up in some kind of other API

866
00:33:24,400 --> 00:33:27,500
definition, but basically, all it's doing, is it's checking the return

867
00:33:27,500 --> 00:33:29,800
code of this for a specific value.

868
00:33:30,000 --> 00:33:33,100
Like the kind that we were doing before when we said we had to check

869
00:33:33,600 --> 00:33:35,400
for for that device.

870
00:33:35,400 --> 00:33:39,700
Not connected kind of a thing, this sort of a thing and error success.

871
00:33:39,800 --> 00:33:42,700
Remember that it's doing that kind of just it's doing that kind of

872
00:33:42,700 --> 00:33:45,400
check basically, but I think they managed to make it even more

873
00:33:45,400 --> 00:33:47,200
complicated than that.

874
00:33:47,200 --> 00:33:47,400
Perhaps.

875
00:33:47,400 --> 00:33:49,500
Potentially, if you're curious go go look it up.

876
00:33:49,500 --> 00:33:50,400
Do a grep in the files.

877
00:33:50,400 --> 00:33:52,500
But basically that's all it's doing is figuring out where the direct

878
00:33:52,500 --> 00:33:54,700
sound create call actually worked or not.

879
00:33:54,900 --> 00:33:56,800
So assuming that we actually do get one back.

880
00:33:56,800 --> 00:33:59,800
We gotta set the Co-operative level and so set cooperatively.

881
00:34:00,000 --> 00:34:03,700
We can also guess get right out of here, set Cooperative level.

882
00:34:04,100 --> 00:34:05,300
So there it is.

883
00:34:05,700 --> 00:34:06,500
This is the methods.

884
00:34:06,500 --> 00:34:07,500
In fact, you can see here.

885
00:34:07,500 --> 00:34:08,500
This is the interface.

886
00:34:08,500 --> 00:34:10,199
This is the, I direct sound interface.

887
00:34:10,199 --> 00:34:12,199
Actually, that's it right there.

888
00:34:13,600 --> 00:34:14,600
So actually, that's interesting.

889
00:34:14,800 --> 00:34:16,400
I wonder if this is it.

890
00:34:16,400 --> 00:34:17,699
Does this actually compile properly?

891
00:34:17,800 --> 00:34:18,699
No, it doesn't.

892
00:34:19,000 --> 00:34:20,300
So, what is the actual?

893
00:34:21,300 --> 00:34:22,699
What is the actual?

894
00:34:22,900 --> 00:34:25,699
Let's take a look here, type that we should be using it.

895
00:34:25,699 --> 00:34:29,800
Just I direct sound, I direct sound.

896
00:34:29,900 --> 00:34:35,300
And eight I'm not entirely certain level P.

897
00:34:35,300 --> 00:34:36,800
Direct sound is any direct sound.

898
00:34:36,800 --> 00:34:40,300
But what is this actually defined to be is this just always defined to

899
00:34:40,300 --> 00:34:41,100
be 8.

900
00:34:41,900 --> 00:34:43,900
Hmm?

901
00:34:44,900 --> 00:34:47,300
I'm just trying to figure out which type of object, we're defining

902
00:34:47,300 --> 00:34:47,400
here.

903
00:34:47,400 --> 00:34:54,100
So there's an eye direct sound, and then there's a, yeah, I'm not

904
00:34:54,100 --> 00:34:54,699
certain.

905
00:34:54,800 --> 00:34:56,300
I am not certain about that.

906
00:34:57,100 --> 00:34:57,600
Hmm.

907
00:34:57,600 --> 00:35:00,300
So I guess we'll just use their actual definition.

908
00:35:00,300 --> 00:35:02,000
I'm trying to decide what would be basically.

909
00:35:02,000 --> 00:35:05,100
What I want to know here is what's the most proper way to actually do

910
00:35:05,100 --> 00:35:05,400
this.

911
00:35:05,400 --> 00:35:08,100
LP direct sound is a pointer to a direct sound but I was wondering

912
00:35:08,300 --> 00:35:11,300
what direct sound is to find 2.2 exactly.

913
00:35:12,300 --> 00:35:14,200
If it's if it's designed to point to a specific one.

914
00:35:14,400 --> 00:35:15,200
Or if it's design.

915
00:35:15,300 --> 00:35:17,400
Yeah, I was a little hazy on that like it's been a long time since

916
00:35:17,400 --> 00:35:18,300
I've heard anything like this.

917
00:35:19,000 --> 00:35:21,600
We should be fine because we don't actually call anything specific.

918
00:35:22,000 --> 00:35:24,000
We're just calling the very generic directsound stuff.

919
00:35:24,000 --> 00:35:27,200
So I guess the probably the best thing to do is just to use the type

920
00:35:27,200 --> 00:35:29,800
that they originally defined, which is LP direct sound, which is just

921
00:35:29,800 --> 00:35:33,000
saying a pointer to a direct sound object and we're passing address to

922
00:35:33,000 --> 00:35:33,400
that.

923
00:35:33,400 --> 00:35:35,800
And if the header happens to Define that to only be eight, that should

924
00:35:35,800 --> 00:35:38,800
be fine for our purposes because eight ships on Windows XP, I believe.

925
00:35:38,800 --> 00:35:40,300
So we should be good to go with everything.

926
00:35:41,000 --> 00:35:44,000
I don't know if we need for some reason, directsound 7, but I'm not

927
00:35:44,000 --> 00:35:44,100
sure.

928
00:35:44,300 --> 00:35:45,000
It's something we'll check.

929
00:35:45,000 --> 00:35:48,100
So maybe we'll slap it to do in here and say double check.

930
00:35:48,100 --> 00:35:55,300
That this works on XP directsound 847 because we're not actually sure.

931
00:35:55,300 --> 00:35:57,200
And I think it you know, we're going to want to actually test it.

932
00:35:57,200 --> 00:35:59,800
So it will no conjecture is not going to is not going to

933
00:36:00,000 --> 00:36:03,400
For a lot of these things Windows compatibility is always a lot of

934
00:36:03,400 --> 00:36:03,700
fun.

935
00:36:04,000 --> 00:36:04,300
All right.

936
00:36:04,300 --> 00:36:07,000
So anyway, if we're going to go do the we don't do that.

937
00:36:07,000 --> 00:36:08,100
We need to do the set.

938
00:36:08,100 --> 00:36:11,300
The compatibility mode thing that I think set Cooperative level.

939
00:36:11,700 --> 00:36:13,100
So set Cooperative level.

940
00:36:13,200 --> 00:36:15,200
I don't think there's anything special that we have to say.

941
00:36:15,200 --> 00:36:17,600
We're just going to set the normal level, but I think you have to do

942
00:36:17,600 --> 00:36:17,900
it.

943
00:36:18,000 --> 00:36:18,900
If I remember correctly.

944
00:36:18,900 --> 00:36:20,800
I don't I don't know if that's actually true anymore.

945
00:36:20,800 --> 00:36:23,500
But I'm pretty sure you have to actually say this and say which one

946
00:36:23,500 --> 00:36:24,300
you're going to do.

947
00:36:24,700 --> 00:36:27,500
And so we don't actually need anything in particular.

948
00:36:28,700 --> 00:36:29,900
Oh, you know, okay so we actually

949
00:36:30,000 --> 00:36:33,700
Do so if you look here normal is what I was saying.

950
00:36:33,700 --> 00:36:36,100
Oh, maybe we just do normal, but I don't think we actually do that.

951
00:36:36,100 --> 00:36:40,000
What we want to do is do priority probably so that we can actually set

952
00:36:40,000 --> 00:36:43,300
the sound output format to be equal to the format that all of our

953
00:36:43,300 --> 00:36:44,100
sounds are in.

954
00:36:44,100 --> 00:36:47,900
Like I said, we want to do 48 khz probably and we want to do like

955
00:36:47,900 --> 00:36:49,300
stereo 48 khz up like that.

956
00:36:49,300 --> 00:36:51,700
So we want to be able to set the sound card to be outputting in that.

957
00:36:51,800 --> 00:36:54,000
Now in the old days, that matter don't know if that matters so much

958
00:36:54,000 --> 00:36:56,900
anymore because it may be that all the stuff just goes to the colonel

959
00:36:56,900 --> 00:36:57,200
mixer.

960
00:36:57,200 --> 00:36:59,700
Anyway, and they all get smudged and all that stuff is fine, but

961
00:37:00,000 --> 00:37:01,200
We're at least going to do it in a way.

962
00:37:01,200 --> 00:37:03,200
That was correct at the time.

963
00:37:03,200 --> 00:37:04,600
So we're going to go ahead and pass.

964
00:37:05,200 --> 00:37:07,600
We're going to go ahead and pass that priority as well.

965
00:37:07,600 --> 00:37:10,800
So as you can see here, like I was saying there's actually a

966
00:37:12,800 --> 00:37:15,300
Oops, that was not the right thing to copy its the window.

967
00:37:15,700 --> 00:37:17,200
So we're going to need the window handle here.

968
00:37:17,200 --> 00:37:21,600
If you remember, I was saying, we actually need to to have a window up

969
00:37:21,600 --> 00:37:23,800
before we do the things that we want to do.

970
00:37:24,000 --> 00:37:26,000
So, that's exactly why, right?

971
00:37:26,000 --> 00:37:29,200
We've got to tell it what window handle we are so that when we tell it

972
00:37:29,200 --> 00:37:31,600
we want priority, I guess it ties That to the window had also that

973
00:37:31,600 --> 00:37:34,900
when our window is active I'm assuming basically what it does is when

974
00:37:34,900 --> 00:37:36,000
our window is active.

975
00:37:36,000 --> 00:37:38,200
It'll make sure that the sound card is playing in that format and so

976
00:37:38,200 --> 00:37:38,500
on.

977
00:37:38,900 --> 00:37:40,000
So we're going to do that.

978
00:37:40,000 --> 00:37:42,000
I don't think we're going to actually check that return code.

979
00:37:42,200 --> 00:37:44,900
Because honestly, if they're if it can't set it, there's not really

980
00:37:44,900 --> 00:37:46,400
much we're going to be able to do about it.

981
00:37:46,500 --> 00:37:49,900
So what we could do is we could go here and say and say, you know, if

982
00:37:49,900 --> 00:37:53,700
it didn't succeed, if it didn't do it, succeeded thing then.

983
00:37:53,900 --> 00:37:56,400
Well, our guests will do if it succeeded in else, will put a

984
00:37:56,400 --> 00:37:57,200
diagnostic here.

985
00:37:57,200 --> 00:38:01,100
Just so we can say, oh, hey, by the way, we weren't able to set the

986
00:38:01,100 --> 00:38:03,500
the buffer format, but we're still going to continue with the rest of

987
00:38:03,500 --> 00:38:04,700
the stuff we were going to do.

988
00:38:05,000 --> 00:38:08,500
So if we want to set the buffer format, I think that's where we have

989
00:38:08,500 --> 00:38:10,100
to do this primary buffer thing.

990
00:38:10,200 --> 00:38:11,900
So I'm going to go read the docs here because

991
00:38:12,100 --> 00:38:16,500
I said, don't remember this stuff that well, but but yeah, so we're

992
00:38:16,500 --> 00:38:18,700
going to, we're going to take a look at how you actually do the creep

993
00:38:18,700 --> 00:38:19,100
over here.

994
00:38:19,100 --> 00:38:20,200
Let's sink this.

995
00:38:21,100 --> 00:38:28,300
I'm assuming we can sink this for, I direct sound correct, sound 8,

996
00:38:28,700 --> 00:38:32,600
and we should be able to get all the calls that we actually have to

997
00:38:32,600 --> 00:38:33,100
call.

998
00:38:33,600 --> 00:38:37,600
So, basically, I think what I want is just create sound buffer here.

999
00:38:37,900 --> 00:38:39,200
I think that's all we really need.

1000
00:38:39,800 --> 00:38:42,000
And that's basically another one of these kind of semis.

1001
00:38:42,200 --> 00:38:42,600
Eric calls.

1002
00:38:42,600 --> 00:38:44,200
It's going to pass a buffer description.

1003
00:38:44,400 --> 00:38:45,900
It's going to give us back.

1004
00:38:46,000 --> 00:38:48,200
It's exactly analogous to this call right here.

1005
00:38:48,200 --> 00:38:51,600
We pass it in a pointer and I'm not sure if I need to create the

1006
00:38:51,600 --> 00:38:53,400
primary buffer if we can't set the format.

1007
00:38:53,400 --> 00:38:56,400
So I'm gonna do it in here for now, but then we'll take a look so

1008
00:38:56,400 --> 00:38:56,600
base.

1009
00:38:56,600 --> 00:38:58,100
So we're going to try and create this buffer.

1010
00:38:58,400 --> 00:38:59,900
We're going to have a pointer to a direct.

1011
00:39:00,000 --> 00:39:01,500
By far, this is the primary buffer.

1012
00:39:01,700 --> 00:39:05,000
We're going to pass that in and it's going to give us back the pointer

1013
00:39:05,000 --> 00:39:05,300
again.

1014
00:39:05,300 --> 00:39:06,800
We don't need that Unk outer.

1015
00:39:06,900 --> 00:39:09,200
That's calm, more of that calm nonsense.

1016
00:39:09,200 --> 00:39:12,600
We don't actually need but we probably do need the buffer description.

1017
00:39:12,800 --> 00:39:14,800
That's something that we actually do need to do.

1018
00:39:15,000 --> 00:39:18,300
So we're going to have to Define this buffer description here and

1019
00:39:18,300 --> 00:39:21,400
we're going to have to give that a bunch of attention because I think

1020
00:39:21,400 --> 00:39:22,600
it's got a number of members in it.

1021
00:39:22,600 --> 00:39:25,500
So assuming that that we can create this and I believe this is another

1022
00:39:25,500 --> 00:39:29,900
succeeded if I'm not very much an error then we'll be able to set its

1023
00:39:30,000 --> 00:39:30,200
Or Matt.

1024
00:39:30,200 --> 00:39:35,300
So in the DS, buffer desk structure, it's got a few things.

1025
00:39:35,800 --> 00:39:37,000
It's got the size.

1026
00:39:37,200 --> 00:39:40,200
So Prime about 4.3, but every size and the size is basically just

1027
00:39:40,200 --> 00:39:40,800
equal to.

1028
00:39:42,500 --> 00:39:42,700
Well.

1029
00:39:42,700 --> 00:39:43,000
You know what?

1030
00:39:43,000 --> 00:39:44,400
When I do it in here, that's the wrong place.

1031
00:39:46,600 --> 00:39:50,100
I'm probably going to use a little trickier, I think so, I think if

1032
00:39:50,100 --> 00:39:52,000
I'm not very much mistaken, let's take a look.

1033
00:39:52,900 --> 00:39:56,400
I think they often tell you, you got a zero these things before you

1034
00:39:56,400 --> 00:39:57,200
actually use them.

1035
00:39:57,200 --> 00:39:58,300
I'm not sure if that's true.

1036
00:39:58,300 --> 00:39:59,800
But I feel like they often.

1037
00:40:00,500 --> 00:40:03,700
Do yes application?

1038
00:40:03,700 --> 00:40:04,000
No.

1039
00:40:04,000 --> 00:40:04,200
Well.

1040
00:40:04,200 --> 00:40:04,900
No, that's not it.

1041
00:40:04,900 --> 00:40:05,300
Let's see.

1042
00:40:05,300 --> 00:40:06,400
Let's see here.

1043
00:40:06,400 --> 00:40:08,800
I'm gonna, I'm gonna look at them, the web at large.

1044
00:40:08,800 --> 00:40:13,400
So let's take a look at create sound buffer and zero struct.

1045
00:40:13,400 --> 00:40:15,600
I feel like or whatever, zero memory.

1046
00:40:15,600 --> 00:40:18,600
I think it's called take a look here.

1047
00:40:19,100 --> 00:40:23,300
I believe that this is the convention that you always have to actually

1048
00:40:23,300 --> 00:40:23,900
do.

1049
00:40:24,700 --> 00:40:25,700
Yeah, it does so.

1050
00:40:25,800 --> 00:40:28,500
So I don't know why they didn't say this in the Docks, but they almost

1051
00:40:28,500 --> 00:40:29,800
always force you to do this.

1052
00:40:30,000 --> 00:40:33,900
They force you to clear the thing, 20 before you actually pass it.

1053
00:40:33,900 --> 00:40:37,000
They always say to do this and they do it in all their docks.

1054
00:40:37,400 --> 00:40:41,000
I don't actually really know why I think it's so that if they extend

1055
00:40:41,000 --> 00:40:42,800
the structure later, your code won't break.

1056
00:40:42,800 --> 00:40:45,800
You'll be able to recompile it and it'll just work and clear the extra

1057
00:40:45,800 --> 00:40:47,000
things, 20.

1058
00:40:47,000 --> 00:40:48,000
I'm not really sure.

1059
00:40:48,000 --> 00:40:50,400
But basically, I'm going to cheat and do a little shorthand here.

1060
00:40:50,400 --> 00:40:53,900
Since the sides is the first member always of the structure.

1061
00:40:54,100 --> 00:40:57,200
I'm just going to go ahead and do this because basically what that'll

1062
00:40:57,200 --> 00:40:59,300
do is, that'll stick the size of the thing in there, and then it'll

1063
00:40:59,300 --> 00:40:59,900
clear the rest of

1064
00:41:00,000 --> 00:41:01,600
20 off we go.

1065
00:41:01,800 --> 00:41:02,500
Lovely, isn't it?

1066
00:41:02,500 --> 00:41:05,700
Kind of a bit weird but might as well do it.

1067
00:41:05,800 --> 00:41:06,100
All right.

1068
00:41:06,100 --> 00:41:07,500
So then we got the flags.

1069
00:41:07,900 --> 00:41:09,200
Let's see if there's any flags that.

1070
00:41:09,200 --> 00:41:11,400
We think we need to set in here.

1071
00:41:11,400 --> 00:41:11,800
Let's see.

1072
00:41:11,800 --> 00:41:12,300
3D.

1073
00:41:12,300 --> 00:41:14,300
We don't need frequency control.

1074
00:41:14,300 --> 00:41:17,400
We don't actually need effects processing.

1075
00:41:17,400 --> 00:41:19,300
We don't need, we don't need pan.

1076
00:41:19,500 --> 00:41:21,000
We don't need volume.

1077
00:41:21,100 --> 00:41:22,800
We don't need position notification.

1078
00:41:22,800 --> 00:41:24,700
We don't need Global Focus.

1079
00:41:26,500 --> 00:41:27,500
Let's see.

1080
00:41:29,000 --> 00:41:29,800
Let's see.

1081
00:41:29,900 --> 00:41:32,500
See, no not.

1082
00:41:32,600 --> 00:41:33,400
Well, I mean, I don't know.

1083
00:41:33,400 --> 00:41:34,400
Do we want Global Focus.

1084
00:41:34,400 --> 00:41:36,400
We want the thing to keep playing, probably not.

1085
00:41:36,400 --> 00:41:37,100
I don't really know.

1086
00:41:37,100 --> 00:41:38,300
We'll get think about that one.

1087
00:41:38,500 --> 00:41:40,500
I'll put it to do in there to take a look at that one.

1088
00:41:40,700 --> 00:41:41,300
I don't actually know.

1089
00:41:41,300 --> 00:41:44,500
I don't recall ever using that one, but maybe I did, I'm not sure.

1090
00:41:45,500 --> 00:41:49,100
See if we want that one lakh, defer to her resource that plate, the

1091
00:41:49,100 --> 00:41:52,500
buffer can be assigned to her, or when this is called.

1092
00:41:52,800 --> 00:41:54,000
I'm not sure about that one.

1093
00:41:54,000 --> 00:41:57,900
We don't care about these whether their Hardware or software.

1094
00:41:57,900 --> 00:41:59,700
I'm not sure why we would actually have to call those.

1095
00:42:00,000 --> 00:42:03,400
Primary buffer that one we do need to call because this is the primary

1096
00:42:03,400 --> 00:42:03,900
buffer.

1097
00:42:04,200 --> 00:42:06,600
So that's one of our flags, for sure.

1098
00:42:09,000 --> 00:42:10,300
And let's see.

1099
00:42:10,300 --> 00:42:12,000
We don't know whether it's on board.

1100
00:42:12,100 --> 00:42:17,300
Sticky Focus still audible exertion of direction of the buffers muted

1101
00:42:17,300 --> 00:42:20,100
true play position to return the birds.

1102
00:42:20,100 --> 00:42:23,200
True play position only valid in Windows Vista.

1103
00:42:24,000 --> 00:42:24,500
All right.

1104
00:42:24,500 --> 00:42:25,000
I don't know.

1105
00:42:25,200 --> 00:42:27,000
It's a bit of a crap shoot here with these flags.

1106
00:42:27,000 --> 00:42:28,400
We may have to play around with a little bit.

1107
00:42:28,400 --> 00:42:30,800
Not a lot of great documentation there.

1108
00:42:31,000 --> 00:42:34,500
Anyway, the size of the buffer, invites, again, pretty straightforward

1109
00:42:34,700 --> 00:42:38,300
that is again, like I kind of explained in the in the diagram that was

1110
00:42:38,500 --> 00:42:40,200
Extremely slowly, because of gimp.

1111
00:42:40,400 --> 00:42:44,600
Basically, what I want to do here is I want to allocate about two

1112
00:42:44,600 --> 00:42:46,400
seconds worth of audio.

1113
00:42:46,400 --> 00:42:50,200
So what I'll do just to be a little bit more flexible is whoever

1114
00:42:50,200 --> 00:42:53,900
actually calls this can decide what that's going to be.

1115
00:42:54,200 --> 00:42:54,400
Now.

1116
00:42:54,400 --> 00:42:57,200
My only question though is I don't know whether I need to do it on the

1117
00:42:57,200 --> 00:42:59,500
primary, but for the secondary buffer, I think you want to do that in

1118
00:42:59,500 --> 00:43:00,600
the secondary buffer.

1119
00:43:00,700 --> 00:43:04,900
So I think the primary buffer is actually going to be set to 0 would

1120
00:43:04,900 --> 00:43:05,800
be my guess.

1121
00:43:06,000 --> 00:43:08,300
Let's double check that and see if

1122
00:43:08,400 --> 00:43:13,400
If that's actually true for the primary buffer, okay, the deerflies

1123
00:43:13,400 --> 00:43:15,300
member contains the same Flags used by the buff.

1124
00:43:15,300 --> 00:43:18,900
For the only difference is I just got structure blah, blah, blah,

1125
00:43:18,900 --> 00:43:20,400
according to location of the buffer.

1126
00:43:20,700 --> 00:43:23,700
These flags are optional used to force the either Hardware.

1127
00:43:23,900 --> 00:43:24,300
Okay.

1128
00:43:24,300 --> 00:43:26,200
Yeah, so we don't, we don't need any of those things.

1129
00:43:26,200 --> 00:43:27,300
What about this guy here?

1130
00:43:27,300 --> 00:43:30,200
What does this guy say when creating private option at the buffer, B

1131
00:43:30,200 --> 00:43:30,800
member 20?

1132
00:43:30,800 --> 00:43:31,000
Okay.

1133
00:43:31,000 --> 00:43:32,500
That's what I wanted confirmation on.

1134
00:43:32,600 --> 00:43:35,200
So, basically, on this guy that's still going to be 0.

1135
00:43:35,300 --> 00:43:37,900
That's going to be something that later when we create our secondary

1136
00:43:37,900 --> 00:43:38,300
buffer.

1137
00:43:38,600 --> 00:43:43,100
The secondary buffer will set this equal to the the buffer size

1138
00:43:43,100 --> 00:43:43,800
basically.

1139
00:43:43,900 --> 00:43:46,900
So we're going to pass that in someone else can tell us what our

1140
00:43:46,900 --> 00:43:47,800
buffer size is.

1141
00:43:48,100 --> 00:43:50,800
So basically, we don't have to worry about that at all.

1142
00:43:50,800 --> 00:43:56,200
So in the buffer desk back here on the buffer desk, let's take a look.

1143
00:43:56,500 --> 00:44:02,200
We have a reserved, a format, an address of a waveform, a TX for

1144
00:44:02,200 --> 00:44:06,800
specifying, the format for the buffer, this buffer must this.

1145
00:44:06,900 --> 00:44:07,100
Okay?

1146
00:44:07,100 --> 00:44:08,000
Must be null for

1147
00:44:08,400 --> 00:44:08,900
Re buffers.

1148
00:44:08,900 --> 00:44:12,300
Alright, so again all know so it looks kind of like basically.

1149
00:44:12,300 --> 00:44:16,400
The only thing we're setting here is the size and the primary buffer

1150
00:44:16,400 --> 00:44:16,900
caps.

1151
00:44:17,600 --> 00:44:19,000
That's a bit odd.

1152
00:44:19,700 --> 00:44:20,200
I don't know.

1153
00:44:20,200 --> 00:44:22,200
I'm also thinking maybe I want to do this.

1154
00:44:22,200 --> 00:44:24,600
This is not how I normally do it, but I'm thinking maybe I want to do

1155
00:44:24,600 --> 00:44:26,600
it like this just to be a little more careful.

1156
00:44:26,600 --> 00:44:30,200
Just because that way if they move the Dow size for a someday, we'll

1157
00:44:30,200 --> 00:44:31,900
be in good shape for that as well.

1158
00:44:31,900 --> 00:44:35,100
If I just stick it in here, then maybe they could rearrange the

1159
00:44:35,100 --> 00:44:35,500
struct.

1160
00:44:35,500 --> 00:44:38,000
I don't think they ever would but just in case they do, maybe it's a

1161
00:44:38,000 --> 00:44:38,200
bad.

1162
00:44:38,400 --> 00:44:39,300
Habit show people.

1163
00:44:39,300 --> 00:44:40,800
So let's just leave that like that.

1164
00:44:40,800 --> 00:44:45,100
Okay, so I think that's all we actually needed to fill out according

1165
00:44:45,100 --> 00:44:46,700
to documentation, seems a little sparse.

1166
00:44:46,700 --> 00:44:47,300
But who knows?

1167
00:44:47,700 --> 00:44:49,600
I guess we can see whether we got it or not.

1168
00:44:53,500 --> 00:44:56,300
Again, we're only creating this primary buffer so that we can set the

1169
00:44:56,300 --> 00:44:56,900
format on it.

1170
00:44:56,900 --> 00:44:58,600
Once we actually create it.

1171
00:44:58,600 --> 00:44:59,900
I believe we can call.

1172
00:45:00,000 --> 00:45:00,600
The function.

1173
00:45:00,800 --> 00:45:04,400
There's a literally a function called set format and it's on the

1174
00:45:04,400 --> 00:45:05,100
actual buffer.

1175
00:45:05,100 --> 00:45:09,400
So when we get back this buffer, which is me, I think there's just a

1176
00:45:09,400 --> 00:45:13,200
call that allows us to set the format that it is playing in.

1177
00:45:13,200 --> 00:45:14,700
That's get format.

1178
00:45:14,700 --> 00:45:16,300
That is set format.

1179
00:45:16,300 --> 00:45:16,900
There we go.

1180
00:45:17,900 --> 00:45:21,800
And so if I want to call set format, there's the primary buffer will

1181
00:45:21,800 --> 00:45:25,100
call set format on waveform at X is the thing that it wants.

1182
00:45:25,100 --> 00:45:26,600
So we got to fill this out here.

1183
00:45:27,500 --> 00:45:28,700
So there we go.

1184
00:45:28,900 --> 00:45:29,800
Wait for Matty.

1185
00:45:30,000 --> 00:45:33,300
X waveform at that.

1186
00:45:33,300 --> 00:45:33,700
Again.

1187
00:45:33,700 --> 00:45:35,900
We're going to go ahead and utilize that to zero because that seems to

1188
00:45:35,900 --> 00:45:38,200
be what they want us to do to everything.

1189
00:45:38,400 --> 00:45:38,900
Can't hurt.

1190
00:45:38,900 --> 00:45:41,800
This is not performance code at all clearing things.

1191
00:45:41,800 --> 00:45:44,800
20 can only help us avoid bugs.

1192
00:45:44,800 --> 00:45:48,700
So you might as well do it when you don't care about the Cycles.

1193
00:45:49,200 --> 00:45:53,300
So there we go, and then we will call set format with that.

1194
00:45:53,700 --> 00:45:55,300
And, and there we go.

1195
00:45:55,300 --> 00:45:59,800
Alright, so w format tag, that is the format, basically.

1196
00:46:00,000 --> 00:46:01,100
Only support one.

1197
00:46:01,100 --> 00:46:06,300
It looks like for our purposes, which is the PCM format there, which

1198
00:46:06,300 --> 00:46:07,400
is basically just the straight.

1199
00:46:07,400 --> 00:46:07,900
Straight ahead.

1200
00:46:07,900 --> 00:46:09,700
Audio one or two channel PCM.

1201
00:46:09,700 --> 00:46:10,600
That's what we've got.

1202
00:46:12,500 --> 00:46:14,800
I assume that's true.

1203
00:46:15,500 --> 00:46:16,900
I assume.

1204
00:46:17,500 --> 00:46:18,800
That's what we're going to go with for now.

1205
00:46:18,800 --> 00:46:21,300
Again, like I said, it's going to be rough with audio so many things

1206
00:46:21,300 --> 00:46:23,700
to set for such a simple thing channels.

1207
00:46:23,800 --> 00:46:26,400
I think we want stereo sound at the very least.

1208
00:46:26,400 --> 00:46:28,600
We want to play our music and stereo, but we're probably also one or

1209
00:46:28,600 --> 00:46:29,800
sound effects to kind of maybe

1210
00:46:29,900 --> 00:46:33,400
A little bit that sort of thing samples per second again.

1211
00:46:33,400 --> 00:46:37,500
We're going to let that be passed in probably just in case it wants to

1212
00:46:37,500 --> 00:46:38,300
be configurable.

1213
00:46:38,300 --> 00:46:42,700
No sense and enforcing that when we can make it parametric just in

1214
00:46:42,700 --> 00:46:45,500
case we want to change it average, B for second.

1215
00:46:46,800 --> 00:46:50,700
That seems like it's just going to be however, big.

1216
00:46:51,200 --> 00:46:54,200
Yeah, however, big, the buffer is in that many in.

1217
00:46:54,200 --> 00:46:56,800
However, May samples per second times.

1218
00:46:56,800 --> 00:47:00,100
The number of seconds seems like that would be well in times the size

1219
00:47:00,100 --> 00:47:00,500
of the thing.

1220
00:47:00,500 --> 00:47:01,500
So, let's take a look at your B.

1221
00:47:01,500 --> 00:47:07,000
Let's finish this out bits per sample is the number equal to 8 or 16.

1222
00:47:07,200 --> 00:47:11,500
So, basically per sample, we can decide whether we want 8-bit audio or

1223
00:47:11,500 --> 00:47:14,800
16 bit audio, and we're going to use 16-bit audio and that's what a CD

1224
00:47:14,800 --> 00:47:15,300
is, Right.

1225
00:47:15,300 --> 00:47:15,800
Everything is

1226
00:47:16,000 --> 00:47:20,100
16 bits in audio and we'll kind of I don't really want to get too much

1227
00:47:20,100 --> 00:47:22,800
into How Sound is recorded yet because we're going to talk about that

1228
00:47:22,800 --> 00:47:25,100
when we actually write our mixer which is where we're going to be

1229
00:47:25,100 --> 00:47:26,400
dealing with sound samples, a lot more.

1230
00:47:26,400 --> 00:47:29,600
So, suffice to say, just like a CD, we're going to use 16-bit audio.

1231
00:47:31,800 --> 00:47:34,200
Not 8-bit audio because why not might as well get the extra

1232
00:47:34,200 --> 00:47:35,500
resolution, it'll sound nicer.

1233
00:47:36,800 --> 00:47:40,800
The block of alignment is the Minnetonka of data for the W format, tag

1234
00:47:40,800 --> 00:47:45,300
format type block might equal to the product of n channels, and bits

1235
00:47:45,300 --> 00:47:47,200
per sample, divided by 8.

1236
00:47:47,200 --> 00:47:49,900
So it's basically just the number of channels.

1237
00:47:49,900 --> 00:47:51,600
We have per sample, right?

1238
00:47:51,600 --> 00:47:53,700
Which is to left and right channels per sample.

1239
00:47:53,700 --> 00:47:56,400
They're kind of packed in there times, the bits per sample.

1240
00:47:56,500 --> 00:47:59,800
So that is how many bits there are four a

1241
00:48:00,000 --> 00:48:03,900
But one for each channel, so be 32 bits and then we're going to divide

1242
00:48:04,200 --> 00:48:06,100
basically by the number of bits in a byte.

1243
00:48:06,200 --> 00:48:08,400
So that's the that's the calculation it wants to do.

1244
00:48:08,500 --> 00:48:10,200
So just to be more explicit about that.

1245
00:48:10,300 --> 00:48:12,600
Basically what we're doing is we're creating some memory and we're

1246
00:48:12,600 --> 00:48:14,200
going to write samples into it.

1247
00:48:14,200 --> 00:48:18,700
We're going to write in 16 samples in 16-bit samples for our audio and

1248
00:48:18,700 --> 00:48:22,200
those samples are basically the wave form their how high the waveform

1249
00:48:22,200 --> 00:48:23,900
is at that point of the sound, right?

1250
00:48:23,900 --> 00:48:26,000
So just like it's basically we're making a little graph of the

1251
00:48:26,000 --> 00:48:26,600
waveform.

1252
00:48:27,200 --> 00:48:29,300
And so basically we're going to write in 16, so we're going to write

1253
00:48:29,300 --> 00:48:29,800
them in like

1254
00:48:30,000 --> 00:48:33,700
Left right, left, right left, right like interleaved like that.

1255
00:48:33,800 --> 00:48:35,300
We're not going to have two separate buffers.

1256
00:48:35,300 --> 00:48:36,900
Once the Left Channel, 14 the right channel.

1257
00:48:37,500 --> 00:48:39,500
It looks like we're just going to, you know, there's nothing wrong

1258
00:48:39,500 --> 00:48:40,100
with that as well.

1259
00:48:40,100 --> 00:48:42,300
But looks like, this is the way they want to specify in here.

1260
00:48:42,400 --> 00:48:43,500
So this way, we're going to do it.

1261
00:48:43,800 --> 00:48:47,200
So, basically, what they're doing is, they're basically asking us to

1262
00:48:47,200 --> 00:48:51,400
do the computation of how many bytes per sample there are, and the

1263
00:48:51,400 --> 00:48:53,500
number of bytes per sample is the number of bit.

1264
00:48:53,500 --> 00:48:57,600
I'm sorry how many bytes per single unit,

1265
00:48:58,700 --> 00:49:01,700
Of the channel, so including the left and the right.

1266
00:49:01,800 --> 00:49:05,100
So basically in this thing where we were like, left right, left, right

1267
00:49:05,100 --> 00:49:06,100
left, right?

1268
00:49:06,100 --> 00:49:10,300
They wanted us to say, how big is this in B, right?

1269
00:49:10,300 --> 00:49:14,100
And so, if this one's 16 bits in this one's 16 bits, you add those

1270
00:49:14,100 --> 00:49:16,900
together, you get 32 bits, and then they want it in B, so we got

1271
00:49:16,900 --> 00:49:19,300
divided by eight, right, which is going to basically be equal to 4.

1272
00:49:19,800 --> 00:49:21,800
So all that is going to boil down to 4.

1273
00:49:22,100 --> 00:49:25,600
Then what they want to do is they want the end block aligned times the

1274
00:49:25,600 --> 00:49:28,300
samples per second for the average bytes per second, right?

1275
00:49:28,500 --> 00:49:29,700
However, many samples per second.

1276
00:49:29,700 --> 00:49:32,300
There are times basically the size of one whole sample.

1277
00:49:33,000 --> 00:49:35,900
Yeah, although the other thing about that is they're kind of mixing

1278
00:49:35,900 --> 00:49:37,300
words there if that's actually true.

1279
00:49:37,600 --> 00:49:40,300
Because if they're calling a sample in here, they're saying there's a

1280
00:49:40,300 --> 00:49:43,700
16 bits per sample, but really, they mean, 16 bits per half, a sample

1281
00:49:43,700 --> 00:49:45,900
in that sense because they're only talking about half the channel, but

1282
00:49:45,900 --> 00:49:49,400
I'm pretty sure what they definitely set it.

1283
00:49:49,400 --> 00:49:50,600
At least of the documentation.

1284
00:49:50,800 --> 00:49:54,200
They said, n channels and bits per sample, divided by 8.

1285
00:49:54,700 --> 00:49:57,100
So that's, that's kind of missing the words.

1286
00:49:57,100 --> 00:49:58,400
They're in some

1287
00:49:58,400 --> 00:50:03,700
Sense, I would think I don't know about that.

1288
00:50:04,400 --> 00:50:05,900
I don't know about that.

1289
00:50:05,900 --> 00:50:08,100
It's a little bit hazy.

1290
00:50:09,800 --> 00:50:10,900
I don't love it.

1291
00:50:11,100 --> 00:50:13,400
I don't love it people, but that's the documentation.

1292
00:50:13,400 --> 00:50:17,500
Say, we have no extra information at appended to the end of this.

1293
00:50:17,500 --> 00:50:19,500
We don't have an extension ratings for get rid of that.

1294
00:50:20,100 --> 00:50:23,200
So basically, we have one problem, if we fill out the structure and

1295
00:50:23,200 --> 00:50:26,800
Order, of course, Microsoft do us the favor of basically making a bug

1296
00:50:26,800 --> 00:50:28,300
if we actually fill out the sample the

1297
00:50:28,500 --> 00:50:30,700
Structure in the order that they told us to fill it out in.

1298
00:50:31,400 --> 00:50:33,000
Well, we've got a problem.

1299
00:50:33,000 --> 00:50:36,200
We're referencing block aligned before we actually write it.

1300
00:50:36,200 --> 00:50:38,300
So we got to flip that around in order to make it.

1301
00:50:38,300 --> 00:50:39,900
So that block lines actually filled out.

1302
00:50:39,900 --> 00:50:43,100
By the time, we actually need it to compute the average bytes per

1303
00:50:43,100 --> 00:50:43,800
second.

1304
00:50:44,100 --> 00:50:44,400
Okay.

1305
00:50:44,400 --> 00:50:46,000
So then we're going to set the format there.

1306
00:50:46,000 --> 00:50:49,000
We're going to set the format on the primary buffer and I believe that

1307
00:50:49,000 --> 00:50:51,600
that's all we actually have to call is just that give it the pointer

1308
00:50:52,100 --> 00:50:55,400
and that's going to do succeeded as well.

1309
00:50:55,400 --> 00:50:56,400
So there we go.

1310
00:50:56,800 --> 00:50:58,000
We're going to basically have

1311
00:50:58,400 --> 00:50:59,200
Diagnostics.

1312
00:51:00,000 --> 00:51:00,200
Here.

1313
00:51:00,200 --> 00:51:01,800
Because there's so many things that could fail.

1314
00:51:01,800 --> 00:51:04,700
That is one of the things that you absolutely don't want in.

1315
00:51:04,700 --> 00:51:07,600
Apis is tons and tons of failure points, but Microsoft has that in

1316
00:51:07,600 --> 00:51:10,100
Spades, unfortunately, and we are left to deal with it.

1317
00:51:10,500 --> 00:51:12,800
Basically, every game programmers left to deal with it.

1318
00:51:15,100 --> 00:51:15,800
What can you do?

1319
00:51:17,500 --> 00:51:24,500
Okay, so, in here, now, we have finally set the format's of the

1320
00:51:24,500 --> 00:51:25,300
primary buffer.

1321
00:51:25,300 --> 00:51:29,600
So that's a good thing, and we will be leaving that, and then we are

1322
00:51:29,600 --> 00:51:29,900
going

1323
00:51:30,000 --> 00:51:32,300
NG to and I should actually put in the comment.

1324
00:51:32,300 --> 00:51:35,600
That was said we're going to do that is up here, create the primary

1325
00:51:35,600 --> 00:51:39,600
buffer then we are going to go ahead and create the secondary buffer

1326
00:51:40,000 --> 00:51:41,800
which is the buffer will actually play in.

1327
00:51:41,900 --> 00:51:45,600
So really again, the only reason for all of this stuff was literally

1328
00:51:45,600 --> 00:51:49,600
just to make it so that we could set that format of.

1329
00:51:49,600 --> 00:51:52,000
So that wouldn't be doing any upsampling or down sampling.

1330
00:51:52,000 --> 00:51:54,700
Now again, I think the colonel makes her just does that stuff

1331
00:51:54,700 --> 00:51:55,200
nowadays?

1332
00:51:55,200 --> 00:51:57,600
So I'm not sure that's actually helping on anything other than older

1333
00:51:57,600 --> 00:51:58,200
machines.

1334
00:51:58,600 --> 00:51:59,900
It's probably not actually.

1335
00:52:00,000 --> 00:52:02,900
Doing much on newer machines, but what can you do?

1336
00:52:03,500 --> 00:52:07,500
All right, so to create the secondary buffer, it's the exact same

1337
00:52:07,500 --> 00:52:08,000
thing.

1338
00:52:08,100 --> 00:52:09,700
Nothing, particularly odd.

1339
00:52:09,900 --> 00:52:10,300
I think.

1340
00:52:10,300 --> 00:52:13,500
Since we basically want the exact same format in both cases.

1341
00:52:13,500 --> 00:52:17,500
I'm going to go ahead and promote this guy basically, out to here so

1342
00:52:17,500 --> 00:52:22,400
that we actually have the same thing when we go to create this buffer.

1343
00:52:22,600 --> 00:52:23,500
Now, I don't know.

1344
00:52:24,100 --> 00:52:27,100
The other thing that I'm wondering is, if you can just duplicate the

1345
00:52:27,100 --> 00:52:29,800
primary buffer because you'll notice there was actually a

1346
00:52:29,900 --> 00:52:34,300
Duplication call here that basically basically allows you to say, hey,

1347
00:52:34,300 --> 00:52:36,600
I want a copy duplicate sound buffer.

1348
00:52:37,600 --> 00:52:39,700
So I think we might actually just be able to call that.

1349
00:52:40,400 --> 00:52:41,800
Let's take a look.

1350
00:52:42,900 --> 00:52:43,500
What does it say?

1351
00:52:43,500 --> 00:52:44,400
The two pockets on both.

1352
00:52:44,400 --> 00:52:46,700
America's a new secondary bar, that shares, the original buffers

1353
00:52:46,700 --> 00:52:47,700
memory now, right?

1354
00:52:47,700 --> 00:52:48,700
So that we can't do.

1355
00:52:49,100 --> 00:52:50,200
That's no good.

1356
00:52:50,500 --> 00:52:51,600
That is not useful.

1357
00:52:51,700 --> 00:52:53,500
All right, so we're just going to have to create a new.

1358
00:52:53,500 --> 00:52:54,000
It looks like.

1359
00:52:54,000 --> 00:52:55,100
That's not a problem.

1360
00:52:55,200 --> 00:52:57,400
It just means we're going to have to use a different buffer

1361
00:52:57,400 --> 00:52:58,300
description here.

1362
00:52:58,700 --> 00:52:59,800
So, here in the second.

1363
00:53:00,000 --> 00:53:03,400
Buffer, we're going to have to pass different buffer description, that

1364
00:53:03,400 --> 00:53:04,800
buffer description will presume.

1365
00:53:04,800 --> 00:53:06,400
We have more things filled out in it.

1366
00:53:06,600 --> 00:53:11,200
So then we're going to go ahead and, and go ahead and pass that, get

1367
00:53:11,200 --> 00:53:13,000
that going to the succeeded.

1368
00:53:13,100 --> 00:53:13,400
Oops.

1369
00:53:13,500 --> 00:53:16,100
It's no good to the succeeded and then the set format.

1370
00:53:16,100 --> 00:53:18,400
Well, we want to set format this time because I think we can just pass

1371
00:53:18,400 --> 00:53:21,100
it in the buffer description because remember the reason we didn't do

1372
00:53:21,100 --> 00:53:25,800
that before was basically just that we don't, you think.

1373
00:53:26,800 --> 00:53:32,100
Just that we couldn't actually say to the primary buffer, that we

1374
00:53:32,100 --> 00:53:34,300
actually wanted it that we had to use the set format call.

1375
00:53:34,300 --> 00:53:37,500
It's just the way it was defined for no, no apparent reason.

1376
00:53:38,000 --> 00:53:41,900
All right, so in here, if we can create our sound buffer, I'm going to

1377
00:53:41,900 --> 00:53:45,800
actually start it playing as well, which will be kind of amusing.

1378
00:53:45,900 --> 00:53:49,400
It'll just be complete silence because we'll probably clear the memory

1379
00:53:49,400 --> 00:53:49,900
as well.

1380
00:53:49,900 --> 00:53:50,500
Oh, no, you know what?

1381
00:53:50,500 --> 00:53:51,800
We won't have locked it yet.

1382
00:53:51,800 --> 00:53:54,800
So we'll probably want to do will probably actually want to have a

1383
00:53:54,800 --> 00:53:56,200
second call to start it playing.

1384
00:53:56,700 --> 00:53:57,800
So I'm actually not going to do that.

1385
00:53:57,800 --> 00:53:58,900
I'm going to hold off of starting playing.

1386
00:53:58,900 --> 00:53:59,800
I'm going to put that somewhere else.

1387
00:54:00,100 --> 00:54:02,500
So I'm gonna go here and just finish our secondary buffer description.

1388
00:54:03,300 --> 00:54:06,300
I'm going to take a look at that buffer desk again and see which

1389
00:54:06,300 --> 00:54:09,400
values we want in the secondary buffer because obviously, there's a

1390
00:54:09,400 --> 00:54:09,900
bunch up.

1391
00:54:09,900 --> 00:54:12,300
That's, that's not it at all.

1392
00:54:12,600 --> 00:54:13,800
Buffer desk.

1393
00:54:13,900 --> 00:54:15,100
Why are you nuts?

1394
00:54:15,600 --> 00:54:19,200
Why are you not getting found buffer desk?

1395
00:54:21,800 --> 00:54:23,600
Where are you?

1396
00:54:23,600 --> 00:54:24,700
You are not there.

1397
00:54:24,700 --> 00:54:25,100
All right.

1398
00:54:25,100 --> 00:54:25,900
Well, that's fine.

1399
00:54:26,100 --> 00:54:29,900
I'll just look at create sound buffer and then we'll get

1400
00:54:30,000 --> 00:54:33,500
Get off of that because that's easy enough to do.

1401
00:54:33,600 --> 00:54:34,700
Alright, so here we go.

1402
00:54:34,700 --> 00:54:36,300
DS, buffer desk.

1403
00:54:36,800 --> 00:54:39,500
No, that's why, because I've named it wrong.

1404
00:54:39,600 --> 00:54:41,200
I, that was my fault.

1405
00:54:41,400 --> 00:54:42,600
That was entirely my fault.

1406
00:54:42,600 --> 00:54:44,000
Those should be DS, buffer, desk.

1407
00:54:44,000 --> 00:54:47,400
Looks like looks like to me.

1408
00:54:47,500 --> 00:54:47,900
Okay.

1409
00:54:48,700 --> 00:54:50,900
So basically what I'm going to do here is I'm just going to double

1410
00:54:50,900 --> 00:54:54,100
check to see what values we need because we are not the primary

1411
00:54:54,100 --> 00:54:54,400
buffer.

1412
00:54:54,400 --> 00:54:55,600
So we have to set the flags.

1413
00:54:55,800 --> 00:54:58,900
Get this is the size and the wave format.

1414
00:54:59,100 --> 00:54:59,800
So it looks like

1415
00:55:00,500 --> 00:55:01,400
Yeah, see what I said.

1416
00:55:01,400 --> 00:55:03,400
I knew we wouldn't quite get it all done today.

1417
00:55:03,500 --> 00:55:04,500
We're pretty close, though.

1418
00:55:04,500 --> 00:55:05,700
We'll probably get it done tomorrow.

1419
00:55:06,100 --> 00:55:08,600
Depending on whether we hit some bugs or not.

1420
00:55:09,000 --> 00:55:10,800
You never know when those bugs will happen.

1421
00:55:10,900 --> 00:55:12,700
All right, so we got a buffer description in there.

1422
00:55:13,200 --> 00:55:15,900
And basically we just gotta set these flags to something.

1423
00:55:15,900 --> 00:55:16,600
That's useful.

1424
00:55:17,200 --> 00:55:19,500
That seems like the primary thing that we're going to have to do.

1425
00:55:19,800 --> 00:55:24,100
So the Caps, let's see in the flags.

1426
00:55:24,600 --> 00:55:26,200
We don't want 3D or frequency.

1427
00:55:26,200 --> 00:55:27,400
We didn't want any of these things.

1428
00:55:27,400 --> 00:55:28,400
We didn't want any of that.

1429
00:55:28,400 --> 00:55:29,700
We don't curb Global Focus.

1430
00:55:29,900 --> 00:55:32,700
Maybe, I don't know if we want a global Focus or not.

1431
00:55:32,700 --> 00:55:34,700
We still don't know, lock Taffer.

1432
00:55:34,700 --> 00:55:36,000
Don't need any of that stuff.

1433
00:55:36,000 --> 00:55:40,900
Static don't know if we want any of that sticky Focus that we I don't

1434
00:55:40,900 --> 00:55:42,300
know that we want any of these.

1435
00:55:42,800 --> 00:55:50,200
It doesn't really look like anything we care about but freeze the new

1436
00:55:50,200 --> 00:55:50,800
behaviors.

1437
00:55:50,800 --> 00:55:53,200
Like her sir in the first version direct sound up liquor.

1438
00:55:53,200 --> 00:55:56,200
So it's significantly ahead of the actual playing sound on emulated

1439
00:55:56,200 --> 00:55:58,800
sound cards is directly behind the right cursor.

1440
00:55:59,000 --> 00:55:59,800
Now if

1441
00:56:00,000 --> 00:56:01,100
Flag is Justified.

1442
00:56:01,100 --> 00:56:03,400
We don't care because we really only need that right cursor.

1443
00:56:03,400 --> 00:56:04,700
Probably.

1444
00:56:05,700 --> 00:56:07,400
Yeah.

1445
00:56:07,700 --> 00:56:08,100
All right.

1446
00:56:08,100 --> 00:56:11,700
Well, I don't know, we could take think about about using that for

1447
00:56:11,700 --> 00:56:13,300
potentially some accuracy purposes.

1448
00:56:13,800 --> 00:56:15,200
So we'll just drop that in there.

1449
00:56:15,200 --> 00:56:17,800
But it looks like we don't really need much in the way of flags.

1450
00:56:18,100 --> 00:56:19,300
We might not need anything.

1451
00:56:19,800 --> 00:56:20,800
So, let's take a look.

1452
00:56:21,000 --> 00:56:23,000
All right, so create sound buffer up.

1453
00:56:23,000 --> 00:56:25,600
I just forgot that's actually off of the direct sound object.

1454
00:56:25,600 --> 00:56:28,000
That's that's a, that's a method call.

1455
00:56:28,000 --> 00:56:29,500
So we got to call it off of there.

1456
00:56:30,100 --> 00:56:35,300
DS buffer desk, let's see cannot convert it to oh, that's great.

1457
00:56:35,300 --> 00:56:36,200
That's not the right thing.

1458
00:56:36,200 --> 00:56:37,500
I meant waveform at.

1459
00:56:37,600 --> 00:56:38,100
There we go.

1460
00:56:38,100 --> 00:56:38,500
Again.

1461
00:56:38,500 --> 00:56:40,600
Static typing catches, a lot of bugs for you.

1462
00:56:41,200 --> 00:56:43,100
We have to pass the window handle here.

1463
00:56:43,600 --> 00:56:46,200
And then it's the that is not what I wanted to do.

1464
00:56:46,200 --> 00:56:47,900
We don't have an h-file for that yet.

1465
00:56:48,400 --> 00:56:50,200
Then I want to go double check.

1466
00:56:50,200 --> 00:56:51,100
Let's see.

1467
00:56:51,100 --> 00:56:54,000
What is that went through to in it direct D sound.

1468
00:56:54,500 --> 00:56:57,300
I want to pass a samples per second, which we said for now will be

1469
00:56:57,300 --> 00:56:59,800
48,000 and the buffer size which

1470
00:57:00,000 --> 00:57:07,400
We'll also be, let's see that times the size of an inch 16 times 2, so

1471
00:57:07,400 --> 00:57:09,200
we'll just we'll just ask for that.

1472
00:57:09,200 --> 00:57:12,800
Now, we'll kind of deal with how we want to do audio, start up farther

1473
00:57:12,800 --> 00:57:14,400
in the future when we actually know what's going on.

1474
00:57:14,400 --> 00:57:15,300
But there we go.

1475
00:57:15,300 --> 00:57:16,700
Will actually try the in it.

1476
00:57:17,200 --> 00:57:21,500
And, and before the before our time is up, we can at least run it and

1477
00:57:21,500 --> 00:57:23,500
see if we crash a horrible death.

1478
00:57:23,900 --> 00:57:25,600
See if any of these calls actually work.

1479
00:57:25,600 --> 00:57:28,300
And so, will kind of know what, what kind of shape are in for

1480
00:57:28,300 --> 00:57:28,800
tomorrow.

1481
00:57:28,800 --> 00:57:29,800
Well, we got the library.

1482
00:57:30,000 --> 00:57:30,800
That was good.

1483
00:57:31,200 --> 00:57:33,500
We got a candle directs and create.

1484
00:57:33,800 --> 00:57:33,900
It.

1485
00:57:33,900 --> 00:57:36,600
Looks like we actually got the direct sound create as well.

1486
00:57:37,000 --> 00:57:40,300
The Co-operative mode was set properly, we succeeded in creating the

1487
00:57:40,300 --> 00:57:41,200
primary buffer.

1488
00:57:41,700 --> 00:57:44,500
Well, I should have put something in here so we could actually see if

1489
00:57:44,500 --> 00:57:45,400
that succeeded.

1490
00:57:45,500 --> 00:57:48,900
Unfortunately, we may be out of register now, so I don't even know but

1491
00:57:48,900 --> 00:57:50,500
fill this out and that one.

1492
00:57:50,500 --> 00:57:53,500
All right, so the only thing I'm going to do just before we before we

1493
00:57:53,500 --> 00:57:54,900
run out of time completely.

1494
00:57:54,900 --> 00:57:56,200
We only have about three minutes left side.

1495
00:57:56,200 --> 00:57:59,800
It's going to print out a diagnostic directly to debug just to see

1496
00:58:00,100 --> 00:58:01,600
50s actually worked.

1497
00:58:01,900 --> 00:58:07,500
So output, debug string, a primary buffer format was set.

1498
00:58:08,100 --> 00:58:17,800
And then here also, we will say secondary buffer, created successfully

1499
00:58:17,900 --> 00:58:19,100
spelling.

1500
00:58:19,500 --> 00:58:20,000
All right.

1501
00:58:20,000 --> 00:58:20,700
There we go.

1502
00:58:21,800 --> 00:58:26,200
And let's see how we did if those both actually worked.

1503
00:58:26,600 --> 00:58:27,900
Let's take a look here.

1504
00:58:29,300 --> 00:58:33,500
No, I do not see, I do not see anything there.

1505
00:58:33,500 --> 00:58:35,100
Ladies and gentlemen, I don't know about you.

1506
00:58:35,400 --> 00:58:36,700
I did not see anything.

1507
00:58:37,300 --> 00:58:39,800
So that does not fill me with confidence.

1508
00:58:39,800 --> 00:58:44,900
We may have still went so well, they're at first, didn't actually

1509
00:58:44,900 --> 00:58:45,300
work.

1510
00:58:45,500 --> 00:58:46,700
All right, let's take a look here.

1511
00:58:47,500 --> 00:58:51,400
So we went in here, that's exceeded that succeeded, but that did not.

1512
00:58:51,600 --> 00:58:52,100
Succeed.

1513
00:58:52,100 --> 00:58:56,600
So, set format did not actually succeed and maybe I'm totally wrong.

1514
00:58:56,600 --> 00:58:59,600
That you can even do that and that did not succeed either.

1515
00:58:59,600 --> 00:59:02,300
So we were unable to create that buffer format.

1516
00:59:02,300 --> 00:59:03,800
So we still have some problems.

1517
00:59:04,200 --> 00:59:06,700
Basically, what I'm going to go ahead and do then, is I'm going to

1518
00:59:06,700 --> 00:59:09,100
print out what the error code is just so we can see it.

1519
00:59:09,500 --> 00:59:12,000
And then again, like I said, well kind of know what shape were in.

1520
00:59:12,100 --> 00:59:13,900
I'm sure we just have a couple things set wrong.

1521
00:59:13,900 --> 00:59:15,900
There was a lot of stuff we had to fill out.

1522
00:59:16,000 --> 00:59:20,200
So as you can imagine there's there's a lot of accidental things.

1523
00:59:20,200 --> 00:59:21,300
We probably set wrong.

1524
00:59:21,500 --> 00:59:25,400
Maybe some of you even caught them on the stream and in which case,

1525
00:59:25,400 --> 00:59:27,000
it'll be easier for us to debug later.

1526
00:59:27,400 --> 00:59:30,900
But basically, if you didn't, it's okay, we will be debugging it

1527
00:59:30,900 --> 00:59:31,300
tomorrow.

1528
00:59:31,300 --> 00:59:34,200
And I think we will have plenty of time to make that work.

1529
00:59:34,200 --> 00:59:39,900
So I'm just going to pull this out here so we can actually give me see

1530
00:59:39,900 --> 00:59:41,700
what those error messages are again.

1531
00:59:41,700 --> 00:59:45,100
So that we will maybe give us a little bit of a hint as to what we did

1532
00:59:45,100 --> 00:59:47,000
wrong among the Myriad of things.

1533
00:59:47,000 --> 00:59:47,900
We might have done.

1534
00:59:47,900 --> 00:59:49,100
Yeah, so, that fails.

1535
00:59:49,300 --> 00:59:50,700
So basically looking at that.

1536
00:59:50,800 --> 00:59:51,100
Oops,

1537
00:59:51,600 --> 00:59:54,500
It's no good looking at that error code.

1538
00:59:54,700 --> 00:59:56,300
What is that error code?

1539
00:59:56,500 --> 00:59:58,500
The error code is invalid.

1540
00:59:58,500 --> 00:59:59,800
Argh one or more out.

1541
01:00:00,000 --> 01:00:01,300
Comments are invalid.

1542
01:00:01,600 --> 01:00:02,500
All right, great.

1543
01:00:02,500 --> 01:00:04,400
That's awfully specific.

1544
01:00:04,800 --> 01:00:06,600
That doesn't really help us at all.

1545
01:00:06,700 --> 01:00:07,600
How much you want to bet.

1546
01:00:07,600 --> 01:00:10,300
The next one is the same and it is.

1547
01:00:10,300 --> 01:00:12,600
So basically, all we know is we filled out something in this

1548
01:00:12,600 --> 01:00:14,700
structures incorrectly.

1549
01:00:14,700 --> 01:00:16,100
That's about all we get.

1550
01:00:16,300 --> 01:00:18,500
And we're not going to have a lot more to go on now.

1551
01:00:18,500 --> 01:00:20,300
Hopefully, it's just something real simple.

1552
01:00:20,500 --> 01:00:23,000
So, you know, again, like I said, it's been a long time since I've

1553
01:00:23,000 --> 01:00:23,600
done this.

1554
01:00:23,800 --> 01:00:26,200
I will go like double check my own code.

1555
01:00:26,300 --> 01:00:29,100
It's probably just something really simple, so we should have no

1556
01:00:29,100 --> 01:00:29,600
problem getting

1557
01:00:30,000 --> 01:00:31,200
Sound up and running tomorrow.

1558
01:00:31,200 --> 01:00:34,700
That's the good news because this is basically all the work there was

1559
01:00:35,200 --> 01:00:37,800
once we get this loading properly, then you can go ahead and use the

1560
01:00:37,800 --> 01:00:41,100
lock command to just write the sound buffer and sound will play.

1561
01:00:41,200 --> 01:00:43,200
And that's, that's most of it right there.

1562
01:00:46,900 --> 01:00:47,400
Again.

1563
01:00:49,000 --> 01:00:50,700
Not a great API, it is true.

1564
01:00:50,700 --> 01:00:53,600
But the thing I want to keep emphasizing is meant, you know, it's that

1565
01:00:53,700 --> 01:00:56,900
many lines of code, you know, a lot of people, they always say it's so

1566
01:00:56,900 --> 01:00:57,700
complicated.

1567
01:00:57,700 --> 01:00:58,900
And why would you write it yourself?

1568
01:00:58,900 --> 01:01:00,700
But at the same time, it's like man.

1569
01:01:02,100 --> 01:01:04,200
How long does it take to just write that function?

1570
01:01:04,400 --> 01:01:05,700
I mean, that is just not that long.

1571
01:01:05,700 --> 01:01:07,500
We'll have it to bugged and running by tomorrow.

1572
01:01:07,500 --> 01:01:10,100
And you know, I don't know if I wasn't explaining things on the

1573
01:01:10,100 --> 01:01:10,300
stream.

1574
01:01:10,300 --> 01:01:13,700
For example, how much a time investing, is that 30 minutes an hour?

1575
01:01:13,900 --> 01:01:15,600
You got to debug it the first time, maybe.

1576
01:01:15,600 --> 01:01:18,600
So maybe figure, even even a day, but then you've got

1577
01:01:18,700 --> 01:01:19,200
Forever.

1578
01:01:19,200 --> 01:01:21,700
You never have to use 8,000 different libraries and all that sort of

1579
01:01:21,700 --> 01:01:21,900
stuff.

1580
01:01:21,900 --> 01:01:24,800
So, there's just, you know, I just want people to understand I guess

1581
01:01:24,800 --> 01:01:26,000
and I try to keep hammering home.

1582
01:01:26,200 --> 01:01:29,000
Well, there's while it's always fine to use engines and libraries and

1583
01:01:29,000 --> 01:01:31,900
you should do, whatever makes you the most efficient when you're

1584
01:01:31,900 --> 01:01:32,600
programming.

1585
01:01:32,700 --> 01:01:36,900
I also think that people need to be more realistic about actually how

1586
01:01:36,900 --> 01:01:39,700
little work there is in doing some of these things.

1587
01:01:39,700 --> 01:01:43,200
You don't really need to be that afraid of writing your own platform

1588
01:01:43,200 --> 01:01:43,700
code.

1589
01:01:43,700 --> 01:01:46,300
It's a couple of weeks of work per platform, a lot of times.

1590
01:01:46,300 --> 01:01:48,600
It's really just not that big a deal and once you do it once,

1591
01:01:48,700 --> 01:01:51,800
Once you're in a very good position to maintain that going forwards,

1592
01:01:52,200 --> 01:01:54,600
you know, sometimes they'll come along and they'll do something like

1593
01:01:54,600 --> 01:01:58,200
Windows 8, that really screws you up, but a lot of times it's fine,

1594
01:01:58,200 --> 01:02:00,900
and you can just keep on rolling and nobody plays games on Windows 8

1595
01:02:00,900 --> 01:02:03,100
anyway, so you didn't have to care when stuff like, that happens lot

1596
01:02:03,100 --> 01:02:03,400
of time.

1597
01:02:03,400 --> 01:02:05,000
So that's a benefit as well.

1598
01:02:05,600 --> 01:02:08,500
So anyway, that is it for handmade hero today.

1599
01:02:08,500 --> 01:02:11,600
We are going to do some Q&A now, that is all the code that we will

1600
01:02:11,600 --> 01:02:13,400
have time to, to get in there.

1601
01:02:13,500 --> 01:02:14,700
But I think it went pretty well.

1602
01:02:14,700 --> 01:02:16,500
There wasn't a lot of confusion there.

1603
01:02:16,500 --> 01:02:18,500
And actually we had very few errors.

1604
01:02:19,000 --> 01:02:19,800
In the actual class.

1605
01:02:19,800 --> 01:02:21,600
I think we'll be able to bug them really quickly tomorrow.

1606
01:02:21,600 --> 01:02:23,700
So be sure to join us again.

1607
01:02:24,000 --> 01:02:27,300
Tomorrow is going to be since today was was Tuesday.

1608
01:02:28,500 --> 01:02:31,800
Tomorrow is Wednesday, Thursday, Friday are basically the Thanksgiving

1609
01:02:31,800 --> 01:02:34,500
holiday here in in the United States.

1610
01:02:34,500 --> 01:02:36,600
So, we are going to be streaming at 11 a.m.

1611
01:02:37,000 --> 01:02:38,400
For the next three days.

1612
01:02:38,400 --> 01:02:39,600
There's got to be a morning stream.

1613
01:02:40,000 --> 01:02:43,200
So hopefully some people in some other time zones can catch up with

1614
01:02:43,200 --> 01:02:44,100
using our holiday hours.

1615
01:02:44,100 --> 01:02:45,900
They can actually come to the live stream, which is, you know, if this

1616
01:02:45,900 --> 01:02:48,000
was airing in the middle, the night where you are you couldn't you

1617
01:02:48,000 --> 01:02:48,600
didn't have the

1618
01:02:48,700 --> 01:02:51,200
That so hopefully we'll see some new faces to a little bit in the

1619
01:02:51,200 --> 01:02:52,000
morning stream.

1620
01:02:52,300 --> 01:02:55,700
And the other thing that I wanted to point out is that we should have

1621
01:02:56,000 --> 01:02:59,700
hopefully sometime soon at handmade hero dot-org.

1622
01:03:00,000 --> 01:03:03,300
If you go there, obviously, you can still do the standard stuff.

1623
01:03:03,300 --> 01:03:05,400
If you want to get that the source code you can pre-order.

1624
01:03:05,400 --> 01:03:08,400
If you want to get to like the Twitter accounts or that any of the

1625
01:03:08,400 --> 01:03:09,200
stuff, quick links are.

1626
01:03:09,200 --> 01:03:12,000
All right here, but soon very soon.

1627
01:03:12,000 --> 01:03:15,900
Hopefully, maybe later tonight, maybe tomorrow, this email a question

1628
01:03:15,900 --> 01:03:16,200
button.

1629
01:03:16,200 --> 01:03:18,500
Should hopefully turn into a forums button.

1630
01:03:18,800 --> 01:03:20,300
We are trying to get that working.

1631
01:03:20,800 --> 01:03:26,100
We are wrangling some some ornery Joomla and other nonsense to get

1632
01:03:26,100 --> 01:03:28,500
sort of a forums, Wiki thing up and running.

1633
01:03:28,600 --> 01:03:29,800
It'll be a little janky but

1634
01:03:30,000 --> 01:03:32,700
At least they'll be a place for people to go and congregate because I

1635
01:03:32,700 --> 01:03:35,500
know a lot of people be asking about that and asking for places where

1636
01:03:35,500 --> 01:03:38,200
they could sort of store all the information and make a nice way that

1637
01:03:38,200 --> 01:03:39,600
it could all be linked and worked on.

1638
01:03:40,100 --> 01:03:41,100
So we're working on that.

1639
01:03:41,100 --> 01:03:42,900
Hopefully we'll have that up sometime soon.

1640
01:03:42,900 --> 01:03:44,200
Hopefully to buy it by tomorrow.

1641
01:03:44,600 --> 01:03:45,900
So thank you everyone for joining us.

1642
01:03:45,900 --> 01:03:48,400
And now let's take questions.

1643
01:03:48,400 --> 01:03:52,700
Please be sure to put at senior ettore in the question somewhere so

1644
01:03:52,700 --> 01:03:55,800
that I will see it because I have a little filter that only shows

1645
01:03:55,800 --> 01:03:58,100
those for the question for the Q&A part of things.

1646
01:04:01,900 --> 01:04:03,600
Let's take a look.

1647
01:04:07,300 --> 01:04:08,400
Oh, yes.

1648
01:04:08,700 --> 01:04:10,700
Okay, you guys totally caught this?

1649
01:04:10,900 --> 01:04:12,100
Thank you much.

1650
01:04:12,100 --> 01:04:15,800
Like I said, we had to rearrange these Microsoft again, did them in

1651
01:04:15,800 --> 01:04:16,800
exactly the wrong order.

1652
01:04:16,800 --> 01:04:18,500
So you're liable to make that mistake.

1653
01:04:18,600 --> 01:04:20,400
I don't know why we didn't get a warning.

1654
01:04:20,900 --> 01:04:23,400
Oh, because we initialize it to 0, I guess.

1655
01:04:23,400 --> 01:04:26,500
One thing that might have been smart to do was that first because if

1656
01:04:26,500 --> 01:04:29,900
we had done that first, even though we want to clear it to 0, it would

1657
01:04:29,900 --> 01:04:31,500
have told us that, that was uninitialized.

1658
01:04:31,600 --> 01:04:33,000
And we could have moved it up here.

1659
01:04:33,000 --> 01:04:35,500
So that probably would a little bit been a little bit smarter.

1660
01:04:36,100 --> 01:04:37,100
Come to think about it.

1661
01:04:37,200 --> 01:04:37,400
I don't know.

1662
01:04:37,400 --> 01:04:40,300
Was that was that the only bug we had?

1663
01:04:42,100 --> 01:04:43,300
That would be amusing?

1664
01:04:44,100 --> 01:04:45,300
Holy cow, dude.

1665
01:04:45,900 --> 01:04:46,700
That was it.

1666
01:04:46,700 --> 01:04:47,200
So just me.

1667
01:04:47,200 --> 01:04:47,700
Miss placing.

1668
01:04:47,700 --> 01:04:48,200
The structure thing.

1669
01:04:48,200 --> 01:04:50,700
That was that was it and the stream caught it.

1670
01:04:50,700 --> 01:04:51,800
How awesome is that?

1671
01:04:52,100 --> 01:04:55,300
But I tell you programming with the stream behind you is pretty

1672
01:04:55,300 --> 01:04:55,900
awesome.

1673
01:04:56,200 --> 01:04:59,300
You make a little error like that and you might have to go hunt for it

1674
01:04:59,300 --> 01:05:01,200
for a few minutes and be like, what happened?

1675
01:05:01,200 --> 01:05:01,300
And I

1676
01:05:01,600 --> 01:05:04,600
Depth through, and look at it like tomorrow when we step through.

1677
01:05:04,600 --> 01:05:06,800
I would have to go through every line looking like, oh, right.

1678
01:05:06,800 --> 01:05:08,100
It's wrong here.

1679
01:05:08,100 --> 01:05:09,600
You just go to the stream, Just Nails it.

1680
01:05:10,200 --> 01:05:14,500
So this again, just to underscore this when you're making an API,

1681
01:05:14,500 --> 01:05:16,200
don't do stuff like that.

1682
01:05:16,200 --> 01:05:18,800
You're just, you know, setting yourself up for failure.

1683
01:05:18,800 --> 01:05:21,400
You want to initialize the variables in the order.

1684
01:05:21,400 --> 01:05:22,500
They appear in the structure?

1685
01:05:22,700 --> 01:05:27,000
Don't stick variables, you know, down somewhere and then tell the user

1686
01:05:27,000 --> 01:05:31,400
to use them in a line that happens before that member

1687
01:05:31,600 --> 01:05:33,000
Just asking for bugs.

1688
01:05:33,200 --> 01:05:36,100
I mean, you know, help help the users out, right?

1689
01:05:36,100 --> 01:05:38,500
Like, you know, help them succeed.

1690
01:05:38,700 --> 01:05:41,500
If you can don't set them up for failure.

1691
01:05:42,200 --> 01:05:43,500
It's a simple bug.

1692
01:05:43,500 --> 01:05:45,000
It's only going to take a few minutes to fix.

1693
01:05:45,000 --> 01:05:45,900
It's not a huge deal.

1694
01:05:45,900 --> 01:05:47,100
But why would you do it?

1695
01:05:47,100 --> 01:05:48,200
You know, I mean, why?

1696
01:05:49,000 --> 01:05:50,400
Yeah, it doesn't really make much sense.

1697
01:05:50,400 --> 01:05:51,500
But that's pretty awesome.

1698
01:05:51,500 --> 01:05:52,800
Thank you stream for catching that.

1699
01:05:52,900 --> 01:05:54,400
It looks like now we're initialized properly.

1700
01:05:54,400 --> 01:05:55,100
So that's pretty awesome.

1701
01:05:55,100 --> 01:05:56,400
That was the only but we have that whole thing.

1702
01:05:56,400 --> 01:05:57,000
That was great.

1703
01:05:57,200 --> 01:05:57,700
Awesome.

1704
01:06:01,000 --> 01:06:02,500
Let's see.

1705
01:06:03,500 --> 01:06:04,200
Do do, do do.

1706
01:06:08,800 --> 01:06:11,100
Do you think data structures while making a game like linked list?

1707
01:06:11,100 --> 01:06:12,000
Binary trees?

1708
01:06:12,000 --> 01:06:12,300
Sure.

1709
01:06:12,400 --> 01:06:14,500
We will be using data structures all over the place, but wait till we

1710
01:06:14,500 --> 01:06:15,100
get there.

1711
01:06:17,000 --> 01:06:21,800
Let's see, trying to look at questions on the code as we did it.

1712
01:06:24,100 --> 01:06:26,500
What keyboard do we use Das Keyboard for?

1713
01:06:27,200 --> 01:06:27,300
You?

1714
01:06:27,300 --> 01:06:28,600
Can have to put up a fact on the keyboard.

1715
01:06:28,600 --> 01:06:30,600
I get so many questions about that as well as these.

1716
01:06:30,600 --> 01:06:32,300
There are many active risk braces.

1717
01:06:32,500 --> 01:06:33,500
I don't know if they still sell them.

1718
01:06:35,700 --> 01:06:36,500
Can you explain again?

1719
01:06:36,500 --> 01:06:39,000
Why you need two buffers instead of just doing everything in one?

1720
01:06:39,000 --> 01:06:40,000
Yeah, I can't.

1721
01:06:40,000 --> 01:06:40,900
Well, okay.

1722
01:06:41,300 --> 01:06:43,200
I can't really explain it.

1723
01:06:43,300 --> 01:06:45,200
I can say the words again.

1724
01:06:45,600 --> 01:06:48,600
But really the explanation is because Windows is weird.

1725
01:06:48,600 --> 01:06:51,000
That's kind of more the real answer.

1726
01:06:54,000 --> 01:06:54,600
but,

1727
01:06:55,900 --> 01:07:01,300
The explanation is because one of them is creating a buffer.

1728
01:07:01,700 --> 01:07:07,400
The other one is really just getting a handle to the actual sound card

1729
01:07:07,400 --> 01:07:08,100
in some sense.

1730
01:07:08,100 --> 01:07:10,900
That's really what in theory is more like happening.

1731
01:07:11,400 --> 01:07:14,400
So basically, this right here where we create a sound buffer, the

1732
01:07:14,400 --> 01:07:17,600
second quote, unquote s a bar that's actually our sound buffer.

1733
01:07:17,700 --> 01:07:20,600
That is the buffer into which we will actually write things.

1734
01:07:20,700 --> 01:07:24,500
Okay, so that's really, that's the thing that creates, the buffer.

1735
01:07:25,500 --> 01:07:30,600
This thing up here is a strictly optional perhaps entirely

1736
01:07:30,600 --> 01:07:31,500
anachronistic.

1737
01:07:31,500 --> 01:07:36,500
At this point thing that you used to have to do in order to make sure

1738
01:07:36,600 --> 01:07:42,700
that this buffer actually played out the sound card without getting

1739
01:07:42,700 --> 01:07:43,800
resampled.

1740
01:07:43,800 --> 01:07:47,200
So in the old days the sound card used to be playing at a certain

1741
01:07:47,200 --> 01:07:48,100
sample rate.

1742
01:07:48,200 --> 01:07:52,500
So basically the sound card might be set to 44.1 khz, or it might be

1743
01:07:52,500 --> 01:07:55,100
set to 48 khz and if

1744
01:07:55,200 --> 01:07:58,500
We're trying to play your sounds at 48, khz while the sound card was

1745
01:07:58,500 --> 01:08:00,100
set at 44.1 khz.

1746
01:08:00,200 --> 01:08:03,700
It would always go through a resampling, which makes it sound worse

1747
01:08:03,800 --> 01:08:07,700
and it's waste time right now.

1748
01:08:07,700 --> 01:08:09,400
A lot of that stuff isn't true anymore.

1749
01:08:09,700 --> 01:08:11,300
I don't even know these days.

1750
01:08:11,300 --> 01:08:12,700
What the typical sound chips.

1751
01:08:12,700 --> 01:08:13,100
Do.

1752
01:08:13,800 --> 01:08:15,500
I've never even seen anyone discuss it.

1753
01:08:15,500 --> 01:08:20,100
I'm not sure, but basically, for back in those days, so the way that

1754
01:08:20,100 --> 01:08:22,100
you actually told windows.

1755
01:08:22,399 --> 01:08:25,000
I need you to set the sound card into this.

1756
01:08:25,100 --> 01:08:28,399
Format that I'm going to using a place sound was to call this create

1757
01:08:28,399 --> 01:08:31,300
sound buffer, call a skit for the primary buffer.

1758
01:08:31,500 --> 01:08:35,600
So it's essentially returning you a handle, the primary output device.

1759
01:08:36,100 --> 01:08:38,000
Then you just call set form on it to say.

1760
01:08:38,100 --> 01:08:39,200
Hey, I'm setting.

1761
01:08:39,200 --> 01:08:42,700
The format of this primary buffer to the waveform at that.

1762
01:08:42,700 --> 01:08:46,100
I know I'm going to be playing that's all this buffer is.

1763
01:08:46,100 --> 01:08:48,899
It's not actually a sound but we're never going to touch it.

1764
01:08:49,000 --> 01:08:50,399
We're never going to ask it a question.

1765
01:08:50,500 --> 01:08:52,800
We're never going to send data at all.

1766
01:08:52,899 --> 01:08:55,100
It's strictly getting that handle so that we can call.

1767
01:08:55,100 --> 01:08:56,100
All set format.

1768
01:08:56,100 --> 01:08:56,899
That's it.

1769
01:08:56,899 --> 01:08:59,800
So really, it's the secondary buffer down here is the is

1770
01:09:00,000 --> 01:09:03,500
The only buffer and you'll see that's the only thing we'll ever call

1771
01:09:03,800 --> 01:09:04,200
tomorrow.

1772
01:09:04,200 --> 01:09:07,000
When we actually output some sound will just be calling lock on that

1773
01:09:07,000 --> 01:09:10,100
buffer writing into it and then letting go that's it.

1774
01:09:14,300 --> 01:09:15,600
Let's see.

1775
01:09:18,700 --> 01:09:22,100
What's the command to compile on your emacs configuration all t'aime?

1776
01:09:24,200 --> 01:09:27,000
Are there any case where we would want more than two channels for this

1777
01:09:27,000 --> 01:09:27,399
game?

1778
01:09:27,399 --> 01:09:29,600
No, because it's a 2-D game.

1779
01:09:30,200 --> 01:09:31,500
So I praten.

1780
01:09:31,600 --> 01:09:34,800
And I don't have a full-time sound guy or anything.

1781
01:09:34,800 --> 01:09:39,200
So we're mostly going to be having stereo sound 2-D game, but you

1782
01:09:39,200 --> 01:09:46,399
could imagine if you were doing a more 3D game, like a not just 3D but

1783
01:09:46,399 --> 01:09:47,500
immersive 3D.

1784
01:09:47,500 --> 01:09:50,899
So, you know, you are in the world looking around like first person or

1785
01:09:50,899 --> 01:09:51,399
something.

1786
01:09:52,399 --> 01:09:56,200
Then you may want to Output more Channel sound because for people who

1787
01:09:56,200 --> 01:10:01,300
have those crazy setups, like the Dolby 7.1 or 5.1 like those sorts of

1788
01:10:01,300 --> 01:10:03,700
things where there's much, lots of speakers all around.

1789
01:10:04,200 --> 01:10:07,200
You can actually output stuff to all the different speakers.

1790
01:10:07,200 --> 01:10:08,000
I believe.

1791
01:10:08,300 --> 01:10:13,200
Like so, you know, I for example, when like, when you use the mouse

1792
01:10:13,200 --> 01:10:15,800
sound system for like the rad game tools product for that.

1793
01:10:16,100 --> 01:10:18,500
They've done have a bunch of stuff in there for like, you know, oh

1794
01:10:18,500 --> 01:10:21,900
targeting 7.1 sound and that sort of stuff and this.

1795
01:10:22,200 --> 01:10:26,600
Particularly useful for a 2-D game but it could be for like immersive

1796
01:10:26,600 --> 01:10:29,500
game where you're trying to play sounds that are like surrounding the

1797
01:10:29,500 --> 01:10:31,800
user in a meaningful way so they can hear.

1798
01:10:31,900 --> 01:10:33,300
Oh, The Gunshot happened behind me.

1799
01:10:33,300 --> 01:10:36,100
I got to turn around or that sort of stuff, if that makes sense.

1800
01:10:36,400 --> 01:10:39,600
So you do want more than two channels sometimes for us.

1801
01:10:39,600 --> 01:10:42,300
We're not going to really have any data that we can actually make use

1802
01:10:42,300 --> 01:10:42,800
of it.

1803
01:10:43,200 --> 01:10:46,400
But, you know, there's there's nothing that says that too, is the

1804
01:10:46,400 --> 01:10:50,900
right number 7 might be the right number for, you know, for whatever

1805
01:10:50,900 --> 01:10:51,900
purposes or eight.

1806
01:10:52,100 --> 01:10:52,300
Eight.

1807
01:10:56,500 --> 01:10:58,100
Let's see.

1808
01:11:02,900 --> 01:11:03,600
Um,

1809
01:11:06,700 --> 01:11:09,800
if the frame rate, whatever drop can there, be audio dropouts?

1810
01:11:09,800 --> 01:11:12,700
Yes, so here's two things about that.

1811
01:11:15,200 --> 01:11:17,900
I snuck it in there and I didn't really just describe it.

1812
01:11:19,200 --> 01:11:21,300
Let's go back to.

1813
01:11:21,300 --> 01:11:21,500
Well.

1814
01:11:21,500 --> 01:11:23,500
I can't cuz I close the Gimp diagram.

1815
01:11:24,200 --> 01:11:26,800
So you remember, when I draw the awful, give diagram that, hopefully

1816
01:11:26,800 --> 01:11:27,300
I'll fix.

1817
01:11:27,800 --> 01:11:29,700
Well, I don't know how we're going to do it maybe after the stream and

1818
01:11:29,700 --> 01:11:32,100
today we'll just leave the stream on and I'll play with the settings

1819
01:11:32,100 --> 01:11:34,400
will start stream stops to start the shooting stops until we actually

1820
01:11:34,400 --> 01:11:36,100
figure out how to get drawing properly.

1821
01:11:36,600 --> 01:11:40,100
But basically, the reason I was saying we're going to make a big

1822
01:11:40,100 --> 01:11:42,300
buffer, you know, as I said, a big buffer.

1823
01:11:42,700 --> 01:11:43,800
I said two seconds.

1824
01:11:44,100 --> 01:11:46,300
Well, why would you want the buffer to be two seconds?

1825
01:11:46,300 --> 01:11:48,000
Doesn't make any sense, right?

1826
01:11:48,600 --> 01:11:53,300
Well, the reason is because audio dropouts, there's two ways that you

1827
01:11:53,300 --> 01:11:54,600
can kind of approach them.

1828
01:11:54,700 --> 01:11:55,300
Right?

1829
01:11:55,600 --> 01:11:59,700
One way you can approach them is writing way ahead of where the game

1830
01:11:59,700 --> 01:11:59,800
is.

1831
01:12:00,100 --> 01:12:02,700
But then you've got a lot of latency or you've got a lot of over

1832
01:12:02,700 --> 01:12:04,800
writing that's going to happen.

1833
01:12:05,200 --> 01:12:05,900
One of the other.

1834
01:12:06,300 --> 01:12:10,100
The other thing you can do is set yourself up so that in general, you

1835
01:12:10,100 --> 01:12:12,900
only write maybe one additional frame ahead.

1836
01:12:13,000 --> 01:12:15,700
So if you miss one frame, you're fine, but if you missed a lot, you'd,

1837
01:12:15,800 --> 01:12:17,700
you know, you'd skip.

1838
01:12:18,200 --> 01:12:20,900
But instead of it doing what normally happens.

1839
01:12:20,900 --> 01:12:23,700
Where is the audio dropout, that you here, where you hear the like,

1840
01:12:23,800 --> 01:12:24,500
it's going like that.

1841
01:12:24,500 --> 01:12:27,500
Then it hit that that, like, that, that thing that you can really hear

1842
01:12:27,500 --> 01:12:29,800
that it when it Loops really quickly.

1843
01:12:30,000 --> 01:12:30,200
Lee.

1844
01:12:31,300 --> 01:12:34,600
That's because they had too narrow of a buffer.

1845
01:12:34,600 --> 01:12:38,900
So it was playing the same like 800 samples or 600 samples over and

1846
01:12:38,900 --> 01:12:41,700
over again, which is immediately audible to the ear as a bad sound.

1847
01:12:41,700 --> 01:12:43,200
You're like, oh it dropped out.

1848
01:12:43,600 --> 01:12:47,400
If you have a two second buffer, you can actually just full-on, stop

1849
01:12:47,400 --> 01:12:48,200
sending samples.

1850
01:12:48,500 --> 01:12:52,700
And the stuff that's in the buffer, is whatever happened for the past

1851
01:12:52,700 --> 01:12:55,900
two seconds, and you'll get a little bit.

1852
01:12:55,900 --> 01:12:58,100
You can sometimes notice if there was like a big thing, like a

1853
01:12:58,100 --> 01:13:00,300
splosion happening or something that happened right there.

1854
01:13:00,300 --> 01:13:00,900
Maybe you'll hear.

1855
01:13:01,100 --> 01:13:05,000
Jump in suddenly, but you won't actually hear any objection or things.

1856
01:13:05,000 --> 01:13:07,600
It'll actually stay smooth and just sound like you were still playing

1857
01:13:07,600 --> 01:13:09,800
from before until you come back.

1858
01:13:10,500 --> 01:13:13,600
And so one of the things that I found is very effective.

1859
01:13:13,700 --> 01:13:17,400
He's always have a giant buffer because then even if your game gets

1860
01:13:17,400 --> 01:13:21,600
just hammered for some reason, there's a disasterous, the CD-ROM drive

1861
01:13:21,600 --> 01:13:25,200
opens and windows halt, your process, and whatever else you'll still

1862
01:13:25,200 --> 01:13:25,800
actually be fine.

1863
01:13:25,800 --> 01:13:26,500
It'll sound fine.

1864
01:13:26,500 --> 01:13:29,600
It can play Forever on that to Second buffer on there will only be one

1865
01:13:29,600 --> 01:13:30,900
skip point and it won't really be

1866
01:13:31,000 --> 01:13:34,000
At noticeable, so it's just a little trick and something that we did.

1867
01:13:34,500 --> 01:13:35,500
You'll see it later.

1868
01:13:40,700 --> 01:13:42,200
Let's see.

1869
01:13:42,600 --> 01:13:45,100
The real silliness is a 10-block a line in average by per second or

1870
01:13:45,100 --> 01:13:46,000
redundant.

1871
01:13:46,100 --> 01:13:46,400
Yes.

1872
01:13:46,400 --> 01:13:49,200
That is true info.

1873
01:13:49,200 --> 01:13:49,800
That's John.

1874
01:13:49,900 --> 01:13:50,200
Hello.

1875
01:13:50,200 --> 01:13:55,800
John, John says the end block, aligning and average b/s are redundant.

1876
01:13:55,800 --> 01:13:57,500
And that is true.

1877
01:13:57,800 --> 01:14:01,400
Basically, you know it, you have to kind of Wonder a little bit.

1878
01:14:01,900 --> 01:14:05,200
If this is something that the documentation basically told you to

1879
01:14:05,200 --> 01:14:09,000
compute, why don't they just compute it themselves?

1880
01:14:09,600 --> 01:14:12,700
And I don't know.

1881
01:14:13,100 --> 01:14:14,300
That's a good question.

1882
01:14:14,300 --> 01:14:19,100
I assume that it is there primarily because they wanted to support

1883
01:14:19,100 --> 01:14:22,000
extended sound formats where this wouldn't necessarily be true.

1884
01:14:22,300 --> 01:14:24,800
But again, maybe they should just let us.

1885
01:14:24,800 --> 01:14:26,600
They should just let us pass zero in that case.

1886
01:14:27,000 --> 01:14:28,500
Maybe they do but it wasn't documented.

1887
01:14:28,500 --> 01:14:29,600
So they can just let us pass zero.

1888
01:14:29,600 --> 01:14:33,600
And then we wouldn't have to do all this Ridiculousness, to be honest.

1889
01:14:33,600 --> 01:14:36,100
This like I don't even know why this is here.

1890
01:14:36,100 --> 01:14:37,200
I mean, it knows the channels.

1891
01:14:37,200 --> 01:14:38,800
It knows the bits per sample.

1892
01:14:39,300 --> 01:14:41,500
It's none of this stuff should have to be filled out.

1893
01:14:41,500 --> 01:14:43,000
You should be able to set it all 20, so I don't know.

1894
01:14:43,000 --> 01:14:45,100
Maybe you can maybe you can't but that's just dumb.

1895
01:14:45,700 --> 01:14:48,200
Well, we kind of know you can't because we accidentally sent 120 and

1896
01:14:48,200 --> 01:14:48,800
it didn't work.

1897
01:14:48,800 --> 01:14:50,200
So it should have just let us do that.

1898
01:14:50,300 --> 01:14:52,700
It is just dumb and John is correct.

1899
01:14:53,400 --> 01:14:54,000
Let's see.

1900
01:14:56,800 --> 01:14:59,800
Let's see on Linux will be doing.

1901
01:15:00,000 --> 01:15:02,700
Sir, or higher level like pulseaudio Jack.

1902
01:15:02,900 --> 01:15:05,800
So I don't know probably just all set because that works on the most

1903
01:15:05,800 --> 01:15:06,200
platforms.

1904
01:15:06,200 --> 01:15:09,800
And all we need is one output stream, but we'll see when we get there.

1905
01:15:10,000 --> 01:15:12,700
I'm not a line X Linux platform expert.

1906
01:15:13,200 --> 01:15:17,700
So probably I will consult some Linux platform experts and I will get

1907
01:15:17,700 --> 01:15:20,600
their opinion, and we'll just have to go with that because I am not

1908
01:15:20,600 --> 01:15:21,600
shipped games on Linux.

1909
01:15:22,400 --> 01:15:26,000
I mostly have running on Linux for my own development purposes.

1910
01:15:26,000 --> 01:15:27,300
That's why I usually run on Linux.

1911
01:15:27,800 --> 01:15:29,800
And so I feel like my

1912
01:15:30,000 --> 01:15:33,800
My ability to really judge that would not be that good.

1913
01:15:33,800 --> 01:15:36,600
So I will probably defer to some people who have had a lot of

1914
01:15:36,600 --> 01:15:37,200
experience with that.

1915
01:15:37,200 --> 01:15:40,400
I'll probably ask some of the valve guys who did steam Linux who are

1916
01:15:40,400 --> 01:15:44,800
friends of mine to basically, you know, give me what's going to be the

1917
01:15:44,800 --> 01:15:47,100
steam the what's going to be the same length path.

1918
01:15:47,100 --> 01:15:50,400
That's probably what we'll do on Linux in the hopes that that sort of

1919
01:15:50,400 --> 01:15:53,500
initiative will kind of get some momentum next year and maybe get some

1920
01:15:53,500 --> 01:15:55,000
more links gaining gaming happening.

1921
01:15:55,000 --> 01:15:58,500
That be my preference, just do whatever steam Linux wants done.

1922
01:16:00,700 --> 01:16:01,400
What newer?

1923
01:16:01,400 --> 01:16:03,500
Assad API would you recommend a set of old direct sound?

1924
01:16:03,500 --> 01:16:04,100
I don't know.

1925
01:16:04,100 --> 01:16:06,900
I still direct sound is totally fine for my purposes.

1926
01:16:07,000 --> 01:16:09,100
I like to do all my sound mixing myself.

1927
01:16:09,600 --> 01:16:10,100
I don't know.

1928
01:16:10,100 --> 01:16:14,400
So, I I've heard people say x audios the thing that people use now,

1929
01:16:14,900 --> 01:16:15,600
but I don't know.

1930
01:16:16,400 --> 01:16:21,100
Yeah, I feel like feel like X audios, probably it but I'm not sure.

1931
01:16:21,100 --> 01:16:24,200
I don't do any programming in the newer sound API.

1932
01:16:24,200 --> 01:16:26,400
So I'm not really in a position to say whether they're good or bad

1933
01:16:26,400 --> 01:16:26,800
ideas.

1934
01:16:26,800 --> 01:16:29,300
It may be that they're just more work than to do.

1935
01:16:29,300 --> 01:16:29,900
And why bother.

1936
01:16:30,100 --> 01:16:32,300
But it may be that you get better latency and that sort of stuff and

1937
01:16:32,300 --> 01:16:32,900
then it's worth it.

1938
01:16:32,900 --> 01:16:33,500
I'm not sure.

1939
01:16:36,900 --> 01:16:38,100
Let's see.

1940
01:16:45,400 --> 01:16:46,200
What is a?

1941
01:16:47,200 --> 01:16:47,600
Let's see.

1942
01:16:47,600 --> 01:16:49,500
The two second buffer doesn't sound acceptable.

1943
01:16:49,500 --> 01:16:49,800
Not know.

1944
01:16:49,800 --> 01:16:52,800
So if you're playing music, I found that it did I found that was very

1945
01:16:52,800 --> 01:16:55,900
most people did not notice at least on Sushi.

1946
01:16:56,200 --> 01:16:57,500
It worked pretty well.

1947
01:16:59,600 --> 01:17:00,600
It's not again.

1948
01:17:00,600 --> 01:17:02,800
It's not what you want to have happen.

1949
01:17:03,000 --> 01:17:08,000
Like you wouldn't choose to have your audio dropout ever, but compared

1950
01:17:08,000 --> 01:17:10,100
to the repeating sound which is Harsh and awful.

1951
01:17:10,400 --> 01:17:15,500
It's much better to have it do this way, and I found that it was

1952
01:17:15,500 --> 01:17:18,000
actually very difficult, especially while they're playing in that

1953
01:17:18,000 --> 01:17:20,200
thing's super close attention to things necessarily.

1954
01:17:23,800 --> 01:17:25,200
Let's see.

1955
01:17:28,700 --> 01:17:31,100
Have or do you work in the industry?

1956
01:17:31,500 --> 01:17:32,500
Yes, I do.

1957
01:17:32,500 --> 01:17:33,300
Work in the industry.

1958
01:17:33,300 --> 01:17:38,000
I've worked in the industry since I was nine since I was see, 1995.

1959
01:17:38,000 --> 01:17:43,500
So since I was 18, and I've been in the game history ever since.

1960
01:17:45,600 --> 01:17:47,600
Don't know that I necessarily recommend it.

1961
01:17:47,600 --> 01:17:57,300
But but I was let's see to do how I thought about guess programmers

1962
01:17:57,300 --> 01:17:59,700
tagging to teach things like Linux or whatever topics their expertise.

1963
01:17:59,700 --> 01:17:59,700
I

1964
01:18:00,000 --> 01:18:02,100
I have thought about that and I do like that idea.

1965
01:18:02,100 --> 01:18:06,200
The only problem is, I don't know how practical it actually is at the

1966
01:18:06,200 --> 01:18:07,600
very, very least.

1967
01:18:08,400 --> 01:18:13,700
We will certainly get expert opinions on things as much as I can for

1968
01:18:13,700 --> 01:18:17,900
areas where I would prefer someone who's more experienced at it.

1969
01:18:18,000 --> 01:18:19,200
At that particular thing.

1970
01:18:19,400 --> 01:18:21,900
We will certainly get that before we do whatever we're going to do

1971
01:18:21,900 --> 01:18:23,600
whether or not someone else will actually stream.

1972
01:18:23,600 --> 01:18:24,200
I don't know.

1973
01:18:24,900 --> 01:18:27,000
But but, you know, definitely something about

1974
01:18:29,900 --> 01:18:31,300
Let's see.

1975
01:18:36,200 --> 01:18:37,300
I think that is it.

1976
01:18:37,300 --> 01:18:38,200
So there's one other thing.

1977
01:18:38,200 --> 01:18:39,300
I want to talk about that.

1978
01:18:39,300 --> 01:18:40,300
I've got good at the beginning of the stream.

1979
01:18:40,300 --> 01:18:41,800
Since there doesn't seem to be any more questions.

1980
01:18:41,800 --> 01:18:47,700
I'm going to go ahead and actually look here at the thing that I

1981
01:18:47,700 --> 01:18:48,900
wanted to double-check.

1982
01:18:48,900 --> 01:18:55,600
So someone pointed out that this mem commit here in the virtual Alec.

1983
01:18:57,400 --> 01:19:01,400
Someone pointed out that this actually probably should be both a

1984
01:19:01,400 --> 01:19:02,800
reserve and the commit.

1985
01:19:02,900 --> 01:19:06,400
So if you pass mem commit to Virtual, Alec will reserve and commit the

1986
01:19:06,400 --> 01:19:10,400
memory for you at the same time, but technically apparently, that's

1987
01:19:10,400 --> 01:19:11,900
not really correct.

1988
01:19:12,000 --> 01:19:14,700
Like it does it and it works.

1989
01:19:15,000 --> 01:19:17,900
But you're technically supposed to do Reserve as well.

1990
01:19:18,600 --> 01:19:22,200
And apparently, there is a post by Raymond Chen that said that this

1991
01:19:22,200 --> 01:19:22,900
was the thing.

1992
01:19:23,400 --> 01:19:26,400
And so if Raymond Chen says it, it's

1993
01:19:26,900 --> 01:19:27,900
Probably true.

1994
01:19:27,900 --> 01:19:31,600
I mean, the dude knows Windows better than probably anybody else in

1995
01:19:31,600 --> 01:19:32,300
the world.

1996
01:19:32,800 --> 01:19:35,300
So I'm going to say that's probably true.

1997
01:19:35,900 --> 01:19:38,000
So we probably want to do that.

1998
01:19:38,100 --> 01:19:39,600
If that is the more correct way.

1999
01:19:39,700 --> 01:19:42,600
Like I said, it doesn't actually change the behavior as far as I know,

2000
01:19:43,100 --> 01:19:46,700
but it's worth noting that that is probably a little more correct than

2001
01:19:46,700 --> 01:19:49,200
just saying them commit and having Windows do the right thing.

2002
01:19:49,200 --> 01:19:53,000
Anyway, I thought you only had to pass commit, but I guess you

2003
01:19:53,000 --> 01:19:55,500
actually more technically should tell it to do reserve it commits,

2004
01:19:55,800 --> 01:19:56,700
explicitly.

2005
01:19:56,800 --> 01:19:59,400
Okay, so just something to think about.

2006
01:20:00,700 --> 01:20:02,800
That was basically a question from the previous stream and someone

2007
01:20:02,800 --> 01:20:03,100
wrote in.

2008
01:20:03,100 --> 01:20:04,800
And it was basically saying, I don't think so.

2009
01:20:04,800 --> 01:20:07,700
And here's a Raymond Chen thing, and if Raymond Chen says it, it's

2010
01:20:07,700 --> 01:20:08,400
probably right.

2011
01:20:08,500 --> 01:20:09,600
So, I would stick with that.

2012
01:20:10,300 --> 01:20:12,400
Like I said, don't think it'll actually make a difference, but just

2013
01:20:12,400 --> 01:20:14,500
you might as well be more correct.

2014
01:20:14,500 --> 01:20:16,700
If you can be just in case there's some edge cases where it actually

2015
01:20:16,700 --> 01:20:17,300
does matter.

2016
01:20:19,300 --> 01:20:20,700
Let's see.

2017
01:20:23,700 --> 01:20:24,700
Looking through here.

2018
01:20:25,800 --> 01:20:28,200
Why wouldn't you recommend game programming as a career field?

2019
01:20:28,300 --> 01:20:30,600
I'm not saying I wouldn't recommend it as a career field.

2020
01:20:30,600 --> 01:20:34,100
I'm just saying, you know, it's like anything else.

2021
01:20:36,700 --> 01:20:38,700
It has its pluses and minuses.

2022
01:20:38,800 --> 01:20:42,300
I do like a lot of aspects of game development.

2023
01:20:42,900 --> 01:20:45,600
But at the same time it makes you a lot.

2024
01:20:45,600 --> 01:20:49,300
Less able to play and enjoy games like anything else.

2025
01:20:49,300 --> 01:20:52,300
The more you see how something is made and the more you become

2026
01:20:52,300 --> 01:20:55,400
critical of various aspects of it the harder time.

2027
01:20:55,600 --> 01:20:57,300
You have enjoying a game.

2028
01:20:58,300 --> 01:20:59,900
I mean if I think about the games that

2029
01:21:00,000 --> 01:21:01,500
Enjoyed when I was 16.

2030
01:21:01,500 --> 01:21:05,500
And I think about how much I would say that they sucked today.

2031
01:21:06,200 --> 01:21:10,200
I think a lot of that has to do with having been in the industry and

2032
01:21:10,200 --> 01:21:12,300
thinking, critically about games for a long time, and their

2033
01:21:12,300 --> 01:21:14,100
implementation and all this other sort of stuff.

2034
01:21:14,700 --> 01:21:17,600
I feel like that's just something that happens when you get into it.

2035
01:21:17,600 --> 01:21:21,100
So, if you're someone who really enjoys games, the answer is not

2036
01:21:21,100 --> 01:21:21,800
always.

2037
01:21:22,200 --> 01:21:24,100
Well, if I really enjoy games, I should go make them.

2038
01:21:24,100 --> 01:21:26,300
That's not necessarily always true.

2039
01:21:26,400 --> 01:21:26,700
Right?

2040
01:21:26,700 --> 01:21:28,900
I mean, if you really enjoy chocolate, it doesn't mean you should be a

2041
01:21:28,900 --> 01:21:29,600
chocolatier.

2042
01:21:29,600 --> 01:21:29,700
You

2043
01:21:30,000 --> 01:21:32,900
it just be someone who really likes chocolate and you should go, do

2044
01:21:32,900 --> 01:21:37,700
whatever you find that you enjoy doing for money and then buy

2045
01:21:37,700 --> 01:21:38,400
chocolate.

2046
01:21:39,000 --> 01:21:43,500
But you know, like I said, it depends if you really like technical

2047
01:21:43,500 --> 01:21:46,500
things like what I'm doing here and you like the sorts of things that

2048
01:21:46,500 --> 01:21:48,600
we're doing on the stream, then you probably would like game growing

2049
01:21:48,600 --> 01:21:50,900
quite a bit and then you should be in the game industry.

2050
01:21:50,900 --> 01:21:52,600
And if you like this sort of things we're doing in the Stream, you'll

2051
01:21:52,600 --> 01:21:56,000
probably very good at it because these are the sorts of things that

2052
01:21:56,000 --> 01:21:59,300
basically, only detail-oriented people are going to like, and people

2053
01:21:59,300 --> 01:21:59,800
who enjoy,

2054
01:22:00,000 --> 01:22:00,900
Electoral curiosity.

2055
01:22:00,900 --> 01:22:02,800
Only those sorts of people are going to like the things that we're

2056
01:22:02,800 --> 01:22:03,700
doing on the Stream.

2057
01:22:03,800 --> 01:22:06,300
So if you find yourself gravitating toward it and thinking it's cool.

2058
01:22:06,400 --> 01:22:09,500
If you thought it was cool, that we drew our own buffer before you are

2059
01:22:09,500 --> 01:22:11,200
probably someone, who would enjoy a game programming.

2060
01:22:11,200 --> 01:22:15,100
It's one of the few programming Fields left where people actually care

2061
01:22:15,100 --> 01:22:16,200
about that sort of stuff.

2062
01:22:16,200 --> 01:22:19,600
And we're actually does make a difference in the quality of the game.

2063
01:22:19,600 --> 01:22:23,100
If you know how to do Advanced things and get better performance and

2064
01:22:23,100 --> 01:22:26,500
so on, you will be very valuable to an engine team somewhere.

2065
01:22:26,700 --> 01:22:29,600
If you know these sorts of things and that is not true in a lot of

2066
01:22:29,600 --> 01:22:29,800
other disciplines.

2067
01:22:29,900 --> 01:22:32,500
Open to other disciplines are very lacks, in terms of performance.

2068
01:22:32,500 --> 01:22:35,600
A very lacks in terms of resource consumption now compared to games

2069
01:22:35,900 --> 01:22:39,200
and truth be told the reason that it's that way in games.

2070
01:22:39,200 --> 01:22:42,700
It just because games have to perform at 30 or 60 frames a second.

2071
01:22:42,800 --> 01:22:44,400
They can't be latched those things.

2072
01:22:44,800 --> 01:22:47,000
They have to fit in limited memory on consoles.

2073
01:22:47,000 --> 01:22:51,200
They have to do these things and since they have to they do and so

2074
01:22:51,200 --> 01:22:52,100
that's just the way it goes.

2075
01:22:55,200 --> 01:22:56,600
Let's see.

2076
01:22:58,500 --> 01:23:02,700
Will we show how to use bone animations or will we use Sprite sheets,

2077
01:23:03,000 --> 01:23:07,300
so bone animations and Sprite seats are not mutually exclusive that.

2078
01:23:07,300 --> 01:23:13,200
That is a slight that is that is that is a question that presupposes,

2079
01:23:13,200 --> 01:23:15,400
an answer that isn't actually necessary.

2080
01:23:16,400 --> 01:23:19,900
You can have a Sprite sheet that has a bunch of pictures on it.

2081
01:23:19,900 --> 01:23:24,200
And then you can assign bones to those things that will manipulate the

2082
01:23:24,200 --> 01:23:25,400
Sprites in the spreadsheet.

2083
01:23:25,500 --> 01:23:28,100
If you mean, will we use bones to animate things?

2084
01:23:28,300 --> 01:23:30,600
Other than strictly using direct copies.

2085
01:23:31,300 --> 01:23:33,800
I have not 100% decided yet.

2086
01:23:34,300 --> 01:23:41,000
We will probably support some sort of bending, depending on how we end

2087
01:23:41,000 --> 01:23:41,900
up doing the renderer.

2088
01:23:41,900 --> 01:23:45,300
It's really a about the renderer there, whether or not we support

2089
01:23:45,300 --> 01:23:45,500
that.

2090
01:23:45,500 --> 01:23:51,400
So it's it remains to be seen, but we the answer is probably going to

2091
01:23:51,400 --> 01:23:52,000
be yes.

2092
01:23:55,200 --> 01:23:57,500
Willie preload, all the audio files are stream from disk.

2093
01:23:57,500 --> 01:23:59,400
We will stream from disk.

2094
01:24:02,200 --> 01:24:03,400
Do I count between taking drinks?

2095
01:24:03,400 --> 01:24:04,500
That seems to be on a certain timing?

2096
01:24:04,500 --> 01:24:05,400
No, I do not.

2097
01:24:05,400 --> 01:24:06,400
It would be interesting if it was a time.

2098
01:24:06,400 --> 01:24:07,700
You just when I get thirsty.

2099
01:24:08,800 --> 01:24:09,700
speaking of which,

2100
01:24:16,500 --> 01:24:18,700
Is there a name to the double buffer technique?

2101
01:24:18,700 --> 01:24:21,400
I still don't understand the concept and want to do further reading

2102
01:24:21,500 --> 01:24:23,200
the double buffer technique.

2103
01:24:23,600 --> 01:24:26,400
Are you talking about the primary secondary buffer thing?

2104
01:24:26,400 --> 01:24:27,700
If so, I just want to emphasize again.

2105
01:24:27,700 --> 01:24:29,100
It is not double buffering.

2106
01:24:29,800 --> 01:24:31,700
We are not creating two buffers.

2107
01:24:32,000 --> 01:24:36,500
All this buffer call is doing is getting a handle to the primary sound

2108
01:24:36,500 --> 01:24:41,300
device so that we can set its format which puts the sound card into a

2109
01:24:41,300 --> 01:24:44,200
mode that allows it to play in the format.

2110
01:24:44,200 --> 01:24:44,900
We want.

2111
01:24:44,900 --> 01:24:45,500
That's it.

2112
01:24:45,500 --> 01:24:45,700
This is

2113
01:24:45,900 --> 01:24:49,900
Not a buffer, not a buffer do not think of this as a buffer, think it

2114
01:24:49,900 --> 01:24:52,000
was like a handle to the sound card.

2115
01:24:52,700 --> 01:24:54,300
It's purely old in.

2116
01:24:54,300 --> 01:24:56,700
Can't have stuff that we're doing here.

2117
01:24:57,500 --> 01:24:58,500
Just telling Windows.

2118
01:24:58,900 --> 01:24:59,800
This is the sound format.

2119
01:24:59,800 --> 01:25:00,500
We want to play.

2120
01:25:00,600 --> 01:25:01,500
That's all we're doing.

2121
01:25:01,500 --> 01:25:02,800
There are not two buffers.

2122
01:25:03,000 --> 01:25:04,600
This buffer is not really a buffer.

2123
01:25:04,600 --> 01:25:06,100
We will never use it as a buffer.

2124
01:25:12,800 --> 01:25:14,000
Let's see.

2125
01:25:14,100 --> 01:25:15,500
Are we going to get into concurrent programming?

2126
01:25:15,500 --> 01:25:16,200
Yes.

2127
01:25:19,400 --> 01:25:21,500
Do we think we'll use any of the kinds of metaprogramming stuff?

2128
01:25:21,500 --> 01:25:22,600
I do these days for this project.

2129
01:25:22,600 --> 01:25:23,500
Probably not.

2130
01:25:24,200 --> 01:25:26,800
I don't think we will have time to really get into that sort of thing.

2131
01:25:27,900 --> 01:25:29,600
Maybe we will a little bit but I don't know.

2132
01:25:32,100 --> 01:25:33,300
Let's see.

2133
01:25:34,100 --> 01:25:37,700
How much do optimizations matter in game programming.

2134
01:25:38,200 --> 01:25:41,500
Is it mainly about, making the game work or to game partner was also

2135
01:25:41,500 --> 01:25:44,000
worried about optimizing the game for the hardware during the

2136
01:25:44,000 --> 01:25:44,800
development?

2137
01:25:46,300 --> 01:25:49,200
Not sure, I understand the second part, but optimization matters a

2138
01:25:49,200 --> 01:25:49,800
ton.

2139
01:25:51,400 --> 01:25:56,400
Basically, like either you optimize your game or you wrote on top of

2140
01:25:56,400 --> 01:25:59,500
an engine, which was optimized, and does a bunch of work to optimize

2141
01:25:59,500 --> 01:26:02,900
for you but optimization matters a lot.

2142
01:26:03,500 --> 01:26:09,000
I mean, you know, try to run the original Binding of Isaac on a laptop

2143
01:26:09,000 --> 01:26:11,700
and the thing is like super slow, right, or whatever.

2144
01:26:12,400 --> 01:26:15,600
And that's an example of what happens when you build something on top

2145
01:26:15,600 --> 01:26:16,000
of something that

2146
01:26:16,400 --> 01:26:20,000
A game system that wasn't optimized to do what games do rights Flash?

2147
01:26:22,300 --> 01:26:27,100
Those sorts of things, you know, you get this all the time where

2148
01:26:27,100 --> 01:26:29,300
something is not fast enough and totally should be.

2149
01:26:29,300 --> 01:26:30,700
Computers are very fast these days.

2150
01:26:30,700 --> 01:26:33,500
They're certainly fast enough to run any 2D game.

2151
01:26:33,500 --> 01:26:35,000
We probably might want to write.

2152
01:26:35,000 --> 01:26:38,300
And so, you really do have to care about optimization in a lot of

2153
01:26:38,300 --> 01:26:38,700
cases.

2154
01:26:38,700 --> 01:26:40,800
Now, there's some code that doesn't have to be optimal.

2155
01:26:41,800 --> 01:26:43,000
Well, none of the cars gonna be op old.

2156
01:26:43,000 --> 01:26:45,800
There's some code that doesn't have to be optimized because it just

2157
01:26:45,800 --> 01:26:48,800
doesn't execute it enough to actually warrant it.

2158
01:26:48,800 --> 01:26:50,800
But a lot of the codes, certainly, the renderer

2159
01:26:51,200 --> 01:26:53,800
Probably some of the sound stuff in certain depending on the

2160
01:26:53,800 --> 01:26:57,800
circumstances and and probably some of the entity updating stuff in

2161
01:26:57,800 --> 01:26:59,800
physics and that sort of things depending on how many entities.

2162
01:27:00,000 --> 01:27:04,000
Have do need to get a do need to have some serious optimizations on

2163
01:27:04,000 --> 01:27:04,900
them often times.

2164
01:27:05,000 --> 01:27:08,300
And again, sometimes that can be the engine can help you with that.

2165
01:27:08,800 --> 01:27:09,700
It's not perfect.

2166
01:27:09,700 --> 01:27:12,100
Like, you know, a lot of times you'll actually have a situation where

2167
01:27:12,100 --> 01:27:15,000
scripting is taking a ton of the time in a game and the engine can't

2168
01:27:15,000 --> 01:27:15,900
do that much about it.

2169
01:27:15,900 --> 01:27:18,800
There's actually a lot of initiatives I think with unity and with

2170
01:27:18,800 --> 01:27:21,500
unreal like unreal just switch to compiled scripts and things like

2171
01:27:21,500 --> 01:27:21,700
this.

2172
01:27:21,700 --> 01:27:24,800
Like to actually, you know, I think they actually compile and see now

2173
01:27:24,800 --> 01:27:26,600
instead of having a scripting language, something like this.

2174
01:27:26,600 --> 01:27:27,900
I don't follow that stuff.

2175
01:27:27,900 --> 01:27:29,300
But point being

2176
01:27:30,500 --> 01:27:32,200
You do actually get in circumstances.

2177
01:27:32,200 --> 01:27:35,500
Where actually the game code is the problem that the higher level game

2178
01:27:35,500 --> 01:27:35,700
called.

2179
01:27:35,700 --> 01:27:38,400
It's just saying what entities do and that's our stuff actually is

2180
01:27:38,400 --> 01:27:39,900
causing performance problems.

2181
01:27:40,100 --> 01:27:43,000
So, at all levels, you kind of do have to think about that before

2182
01:27:43,000 --> 01:27:47,100
mites games at by their very nature are about responsiveness,

2183
01:27:47,300 --> 01:27:48,800
low-latency these sorts of things.

2184
01:27:48,800 --> 01:27:51,700
And so you just can't have piggy code sitting around because it'll

2185
01:27:51,700 --> 01:27:53,000
bite you sooner or later.

2186
01:27:57,800 --> 01:28:00,300
Why don't we use the second buffer to grab the handle instead of

2187
01:28:00,300 --> 01:28:00,700
create something?

2188
01:28:00,700 --> 01:28:01,600
Just to grab the handle.

2189
01:28:01,600 --> 01:28:03,700
It's because of this flag right here.

2190
01:28:03,900 --> 01:28:08,700
Basically Windows either returns, you a buffer, you can use, which is

2191
01:28:08,700 --> 01:28:11,900
what we do down here or it returns you the magical special handle the

2192
01:28:11,900 --> 01:28:16,400
primary buffer if you pass this, so we need to set the format on the

2193
01:28:16,400 --> 01:28:18,700
primary effort to tell the sound card.

2194
01:28:18,800 --> 01:28:20,200
What format it should play in.

2195
01:28:20,700 --> 01:28:23,400
So that is what this is doing is saying, hey Windows, give us back the

2196
01:28:23,400 --> 01:28:26,600
special secret, awesome buffer so that we can set the format on it.

2197
01:28:26,800 --> 01:28:27,400
It says, okay.

2198
01:28:27,600 --> 01:28:28,200
Here it is.

2199
01:28:28,300 --> 01:28:29,400
We set the format.

2200
01:28:29,500 --> 01:28:30,600
We're done with that buffer.

2201
01:28:30,800 --> 01:28:34,300
Then we say, okay now give us back a handle, do an actual buffer.

2202
01:28:34,300 --> 01:28:36,500
We can actually use that has nothing to do with the primary buffer.

2203
01:28:36,700 --> 01:28:38,300
And then that's the one we can actually write into.

2204
01:28:38,600 --> 01:28:40,000
There's no Rhyme or Reason to this.

2205
01:28:40,100 --> 01:28:43,700
It's just Legacy in some sense because basically you used to actually

2206
01:28:43,700 --> 01:28:46,100
write into the primary, but for the first version of direct sound you

2207
01:28:46,100 --> 01:28:47,600
wrote directly to the sound card.

2208
01:28:47,600 --> 01:28:51,100
So there only was a primary buffer and secondary buffers were for

2209
01:28:51,100 --> 01:28:51,700
doing things.

2210
01:28:51,700 --> 01:28:54,600
Like sounds that the primary buffer would use to stream in there.

2211
01:28:54,600 --> 01:28:55,100
There.

2212
01:28:55,100 --> 01:28:57,400
There was actually a little more logic to it.

2213
01:28:57,500 --> 01:28:59,200
It now, it's completely banana cakes.

2214
01:28:59,300 --> 01:28:59,600
Really?

2215
01:28:59,600 --> 01:29:03,300
All you should have is a call on Direct sound to set the format.

2216
01:29:03,400 --> 01:29:04,600
That would make a lot more sense.

2217
01:29:04,600 --> 01:29:07,400
So this is just kind of busted but it's still the way it works.

2218
01:29:07,400 --> 01:29:09,300
And I know it's a little hard to understand because it doesn't make a

2219
01:29:09,300 --> 01:29:10,100
lot of logical sense.

2220
01:29:10,100 --> 01:29:11,000
That's just the way it works.

2221
01:29:13,900 --> 01:29:15,900
Is there some way of figuring out how many CPU operations we have

2222
01:29:15,900 --> 01:29:18,200
available per frame and optimizing the game code based on that number?

2223
01:29:18,200 --> 01:29:21,400
Yes, and that is exactly what we will do but wait till we get there.

2224
01:29:24,500 --> 01:29:25,700
Let's see.

2225
01:29:26,900 --> 01:29:29,500
Isn't this learning how to carve Stone using a chisel over using

2226
01:29:29,500 --> 01:29:30,400
Modern Machinery?

2227
01:29:30,500 --> 01:29:33,800
No, because basically, right now, we don't have Modern Machinery.

2228
01:29:34,100 --> 01:29:36,000
One of the things I said in one of the other stream, someone said, why

2229
01:29:36,000 --> 01:29:36,700
reinvent the wheel?

2230
01:29:36,700 --> 01:29:38,600
My argument is we don't have any Wheels right now.

2231
01:29:38,800 --> 01:29:42,000
I don't think engines game engines today are very good.

2232
01:29:42,300 --> 01:29:44,100
I'm not trying to spare the people who work on them.

2233
01:29:44,100 --> 01:29:47,500
I think they probably do an excellent job for what they are trying to

2234
01:29:47,500 --> 01:29:51,000
do, but we just don't have the technology right now to actually write

2235
01:29:51,300 --> 01:29:53,700
the kinds of things that we want to write for building game.

2236
01:29:53,800 --> 01:29:57,800
Games, so I think we have a long way to go to actually build the

2237
01:29:57,800 --> 01:29:58,200
tools.

2238
01:29:58,200 --> 01:29:59,800
We need to make games.

2239
01:30:00,200 --> 01:30:03,300
So that there isn't any reason to ever do this low-level code again.

2240
01:30:03,600 --> 01:30:08,000
So basically what I'm trying to with this series is sort of show a new

2241
01:30:08,000 --> 01:30:11,500
set of programmers, how to do this low-level programming because

2242
01:30:11,500 --> 01:30:14,600
without more low-level programmers, doing this kind of programming, we

2243
01:30:14,600 --> 01:30:16,300
will never build the actual tools.

2244
01:30:16,300 --> 01:30:20,900
We actually need like, we are so far from being done building Modern

2245
01:30:20,900 --> 01:30:22,600
Machinery, as a two term you use.

2246
01:30:22,600 --> 01:30:26,600
Like, for example, just to just to put it in complete analogy terms to

2247
01:30:26,600 --> 01:30:27,300
what you said.

2248
01:30:27,500 --> 01:30:29,900
It's like you told me when you

2249
01:30:30,000 --> 01:30:33,700
up the horse and buggy that you're like, why are you teaching people

2250
01:30:33,800 --> 01:30:37,300
to study how to build like axles and like gearing's and stuff.

2251
01:30:37,300 --> 01:30:39,000
We have a horse-drawn carriage.

2252
01:30:39,000 --> 01:30:39,700
It's perfect.

2253
01:30:39,700 --> 01:30:42,700
You're like, dude, we need like airplanes.

2254
01:30:42,700 --> 01:30:45,000
Okay, we need race cars.

2255
01:30:45,100 --> 01:30:46,200
We need trains.

2256
01:30:46,200 --> 01:30:47,300
We need Rockets.

2257
01:30:47,500 --> 01:30:49,800
Like we're not anywhere near there.

2258
01:30:50,300 --> 01:30:54,200
So don't pick up a game engine and think you are using a rocket, you

2259
01:30:54,200 --> 01:30:55,900
are using a horse-drawn carriage.

2260
01:30:56,000 --> 01:30:59,000
And what we need to get to over time.

2261
01:30:59,400 --> 01:30:59,700
Is we

2262
01:30:59,900 --> 01:31:01,700
To get to the rocket.

2263
01:31:01,700 --> 01:31:03,700
We need to get to the race car.

2264
01:31:03,700 --> 01:31:06,900
We need to get to those things so someday.

2265
01:31:07,400 --> 01:31:11,300
Yes, that will be an okay mentality to have why reinvent the wheel?

2266
01:31:11,700 --> 01:31:13,300
Why not use Modern Machinery?

2267
01:31:13,600 --> 01:31:14,300
Someday?

2268
01:31:14,300 --> 01:31:17,200
We are nowhere near that day.

2269
01:31:17,200 --> 01:31:19,900
We are not even 10 years from that day.

2270
01:31:19,900 --> 01:31:22,900
We are like 50 years from that day, if we're lucky.

2271
01:31:23,300 --> 01:31:26,700
So I think it's imperative that we get a whole new generation of

2272
01:31:26,700 --> 01:31:29,400
programmers, working at the low level stuff so that they will be

2273
01:31:29,400 --> 01:31:29,900
writing their own.

2274
01:31:29,900 --> 01:31:30,800
Our own tools.

2275
01:31:30,800 --> 01:31:32,500
They were writing their own engines.

2276
01:31:32,500 --> 01:31:34,200
They will create the next unities.

2277
01:31:34,200 --> 01:31:35,800
They will create the next on reels.

2278
01:31:35,800 --> 01:31:36,400
They will correct.

2279
01:31:36,400 --> 01:31:40,500
The next Source engines and we will keep building better and better

2280
01:31:40,500 --> 01:31:41,100
things.

2281
01:31:41,400 --> 01:31:45,200
So that the people who don't know how to do this stuff, can use them.

2282
01:31:45,400 --> 01:31:47,800
And so that someday we can put this to rest.

2283
01:31:47,800 --> 01:31:50,200
Finally, and say, we pretty much got this under control.

2284
01:31:50,900 --> 01:31:51,500
We're done.

2285
01:31:51,900 --> 01:31:54,300
So that is the end of the stream.

2286
01:31:54,900 --> 01:31:56,600
I think that's about it.

2287
01:31:57,100 --> 01:31:59,200
We are at 9:30, and that is the end.

2288
01:31:59,200 --> 01:31:59,600
Thank you.

2289
01:31:59,600 --> 01:31:59,800
So,

2290
01:32:00,000 --> 01:32:00,900
For joining me.

2291
01:32:01,600 --> 01:32:02,600
Hope to see you here.

2292
01:32:02,600 --> 01:32:05,500
Tomorrow bright and early in the morning 11:00 a.m.

2293
01:32:05,900 --> 01:32:08,600
I hope some of you will be up for that and maybe we'll be getting some

2294
01:32:08,600 --> 01:32:09,700
people from different time zone.

2295
01:32:09,700 --> 01:32:11,000
So we'll see some fresh faces in here.

2296
01:32:11,000 --> 01:32:12,000
That'll be great.

2297
01:32:12,300 --> 01:32:14,400
Again, as always, you can go to handmade here.com.

2298
01:32:14,400 --> 01:32:16,100
If you want the source code you can pre-order.

2299
01:32:16,400 --> 01:32:17,500
If you want to ask question.

2300
01:32:17,500 --> 01:32:20,500
You can use the email a question button and hopefully that'll be for

2301
01:32:20,500 --> 01:32:21,800
him sometime very soon.

2302
01:32:22,000 --> 01:32:22,300
Obviously.

2303
01:32:22,300 --> 01:32:26,200
There's a Twitter feed, you could subscribe to if you want to see the

2304
01:32:26,200 --> 01:32:26,600
schedule.

2305
01:32:26,600 --> 01:32:29,800
I usually tweet several hours before the schedule and one hour before.

2306
01:32:29,900 --> 01:32:33,300
Oh the schedule just as notifications and you can click on the live

2307
01:32:33,300 --> 01:32:35,000
button, but you're already there watching on Twitch.

2308
01:32:35,000 --> 01:32:39,600
Presumably you can click on that like button if you want to follow on

2309
01:32:39,600 --> 01:32:42,700
Twitch so that you'll get email notifications when the stream goes

2310
01:32:42,700 --> 01:32:43,100
live.

2311
01:32:43,400 --> 01:32:44,700
Thank you so much for joining me.

2312
01:32:44,700 --> 01:32:45,100
Everybody.

2313
01:32:45,100 --> 01:32:49,600
It has been a pleasure as always and I will see you tomorrow morning

2314
01:32:49,600 --> 01:32:52,400
when we will actually start playing some sounds out of our sound

2315
01:32:52,400 --> 01:32:52,800
buffer.

