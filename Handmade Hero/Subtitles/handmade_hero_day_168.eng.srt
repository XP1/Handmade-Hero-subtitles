1
00:00:00,200 --> 00:00:01,100
Start recording.

2
00:00:02,000 --> 00:00:03,800
Hello everyone and welcome to handmade hero.

3
00:00:03,800 --> 00:00:08,000
The show we could complete game live on stream on Twitch, no engines

4
00:00:08,000 --> 00:00:08,900
and no libraries.

5
00:00:10,200 --> 00:00:15,700
It's just us here programming, and today we are going to do a little

6
00:00:15,700 --> 00:00:16,500
font work.

7
00:00:16,900 --> 00:00:21,000
Now, we already did work to extract fonts in our asset processing

8
00:00:21,000 --> 00:00:21,600
utility.

9
00:00:22,500 --> 00:00:24,500
And we actually showed how to use a library there as well.

10
00:00:24,500 --> 00:00:26,900
So we actually have two paths in our asset.

11
00:00:26,900 --> 00:00:30,200
Packer one that doesn't use any libraries in case you want to go full,

12
00:00:30,200 --> 00:00:33,800
no library and then another one that shows how to use Shawn Barrett's.

13
00:00:33,900 --> 00:00:39,400
Excellent, font library in case you would like to use that instead, we

14
00:00:39,400 --> 00:00:43,600
did that in honor of his birthday and also because a lot of people ask

15
00:00:43,600 --> 00:00:45,900
me if there was a library to use, what would it be?

16
00:00:45,900 --> 00:00:49,300
And Shawn's libraries are always the answer to that question.

17
00:00:50,600 --> 00:00:52,200
So we did all that and

18
00:00:52,300 --> 00:00:55,000
You got that in there, but all that does for us, whether you use a

19
00:00:55,000 --> 00:01:01,200
library or not, is it only gets out the information about the glyphs,

20
00:01:01,800 --> 00:01:06,100
what we haven't written yet being either path, is any way to get out

21
00:01:06,100 --> 00:01:10,500
the actual metrics for the text, such as how to space letters between

22
00:01:10,500 --> 00:01:14,200
each other called kerning, which we discussed on the introduction of

23
00:01:14,200 --> 00:01:16,800
fonts or where the Baseline is.

24
00:01:16,800 --> 00:01:20,800
For example, like how the font should sit on a horizontal line, that

25
00:01:20,800 --> 00:01:21,400
sort of thing.

26
00:01:21,800 --> 00:01:22,200
So we

27
00:01:22,300 --> 00:01:25,600
We haven't done any of that work in, either the path that I showed,

28
00:01:25,600 --> 00:01:28,200
how to use a Champs library, or in the path that uses, no libraries

29
00:01:28,200 --> 00:01:30,800
where we call into Windows to extract that information.

30
00:01:31,400 --> 00:01:34,500
And so, what we need to do today is we need to start working on that

31
00:01:34,500 --> 00:01:38,300
so that we can augment our asset pack file to include this

32
00:01:38,300 --> 00:01:39,100
information.

33
00:01:39,200 --> 00:01:42,900
So that when we process a font for use in the game, it will have the

34
00:01:42,900 --> 00:01:47,800
metrics necessary for the engine to then align the font in a sensible

35
00:01:47,800 --> 00:01:48,100
way.

36
00:01:48,100 --> 00:01:51,100
So that it looks like what the font designer intended when they

37
00:01:51,100 --> 00:01:52,100
created the font,

38
00:01:53,900 --> 00:01:57,600
And you know, it will have a relatively attractive appearance on the

39
00:01:57,600 --> 00:01:58,700
screen as a result.

40
00:01:58,700 --> 00:01:59,800
That's the goal anyway.

41
00:02:00,800 --> 00:02:04,500
So if you haven't already watched the introduction video to fonts you

42
00:02:04,500 --> 00:02:06,800
probably want to do so because I'll be referring to things like

43
00:02:06,800 --> 00:02:08,800
kerning and I'm going to expect that, you know what they mean?

44
00:02:08,900 --> 00:02:11,400
I'll try to give a brief refresher where appropriate, but you really

45
00:02:11,400 --> 00:02:13,900
probably want to know some stuff about fonts, not too much.

46
00:02:13,900 --> 00:02:17,800
You don't have to be a typographer, but you just want to know some

47
00:02:17,800 --> 00:02:19,400
basic terms as we go.

48
00:02:20,000 --> 00:02:22,000
So we're going to be doing coding today for sure.

49
00:02:22,500 --> 00:02:22,600
So,

50
00:02:22,800 --> 00:02:24,300
Is one day 168.

51
00:02:24,300 --> 00:02:28,500
If you would please, if you're one of the people who pre-ordered the

52
00:02:28,500 --> 00:02:32,200
source code on handmade here at up org, please unpack day 167 source

53
00:02:32,200 --> 00:02:33,100
code into a directory.

54
00:02:33,100 --> 00:02:35,100
That is the source code that I will be starting with today.

55
00:02:35,100 --> 00:02:38,600
So if you would like to follow along at home, that's the way to do it.

56
00:02:39,000 --> 00:02:40,400
So, here we go.

57
00:02:42,500 --> 00:02:45,300
What I'm going to do, which is a little bit odd.

58
00:02:45,300 --> 00:02:48,400
Potentially is, I'm not even going to open up the asset processor just

59
00:02:48,400 --> 00:02:48,900
yet.

60
00:02:49,200 --> 00:02:51,500
And the reason that I'm not going to open up the asset processor just

61
00:02:51,500 --> 00:02:56,100
yet, is because again, like I say, many times always write the usage

62
00:02:56,100 --> 00:02:56,700
code for something.

63
00:02:56,700 --> 00:02:57,000
First.

64
00:02:57,000 --> 00:02:59,800
If you can, that is a classic thing.

65
00:03:00,000 --> 00:03:02,200
That we're going to see right now.

66
00:03:02,600 --> 00:03:07,200
Basically, I mean, I kind of do know what I need for fonts, because

67
00:03:07,200 --> 00:03:09,800
I've written them so many times before but on handmade hero, even when

68
00:03:09,800 --> 00:03:11,200
I know what I'd already, right?

69
00:03:11,200 --> 00:03:14,800
I try to still show you the way to go about it properly so that when

70
00:03:14,800 --> 00:03:16,900
you're doing it yourself and maybe you haven't done this before,

71
00:03:16,900 --> 00:03:19,400
you're tackling a new problem, which I still do every day.

72
00:03:19,400 --> 00:03:20,100
I often times.

73
00:03:20,100 --> 00:03:24,300
Tackle any problems, I want to make sure you see the correct way to

74
00:03:24,400 --> 00:03:28,100
approach a programming problem in and don't just see me sort of typing

75
00:03:28,100 --> 00:03:28,500
out stuff.

76
00:03:28,500 --> 00:03:29,900
I already know how to do right, which is

77
00:03:30,000 --> 00:03:30,800
A particularly useful.

78
00:03:32,000 --> 00:03:36,000
So, in this case, I know that I need information about these fonts to

79
00:03:36,000 --> 00:03:37,300
line them up, right?

80
00:03:37,500 --> 00:03:40,500
And yes, because I've done font program before I could probably guess

81
00:03:40,500 --> 00:03:42,900
exactly what those things might be and how I might need them.

82
00:03:42,900 --> 00:03:45,300
And I could go into the asset processor and just do it.

83
00:03:45,900 --> 00:03:48,700
But if this was your first van system you wouldn't know that.

84
00:03:48,900 --> 00:03:52,300
And so you'd be left in a situation where you're like I don't even

85
00:03:52,300 --> 00:03:56,300
really know what data I should store with the fonts to do this

86
00:03:56,300 --> 00:03:57,100
alignment.

87
00:03:57,100 --> 00:03:59,900
And so when you find yourself in that situation that's when I

88
00:04:00,000 --> 00:04:03,600
Say, make sure you write the usage code first because the usage code

89
00:04:03,600 --> 00:04:04,400
will guide you.

90
00:04:04,600 --> 00:04:08,300
So what I'm going to do is I'm going to go in and write the actual

91
00:04:08,300 --> 00:04:12,700
routines that display text on the screen as if we have the information

92
00:04:12,700 --> 00:04:14,600
necessary to line them up.

93
00:04:15,400 --> 00:04:18,600
And by looking at how that code comes out, I will then be able to

94
00:04:18,600 --> 00:04:20,000
essentially reverse.

95
00:04:20,200 --> 00:04:22,500
I will be able to look back solve, right?

96
00:04:22,600 --> 00:04:26,000
For the information will actually need in the asset file and how I

97
00:04:26,000 --> 00:04:27,600
want that information structured.

98
00:04:27,600 --> 00:04:28,100
Right.

99
00:04:29,200 --> 00:04:29,800
So that's pretty

100
00:04:29,900 --> 00:04:30,300
Handy.

101
00:04:35,200 --> 00:04:36,600
And I say that a lot, that's what I mean.

102
00:04:36,600 --> 00:04:38,700
When I say it was right, the user code first, when you find yourself

103
00:04:38,700 --> 00:04:43,100
in a situation where there's one side of the code that you do know how

104
00:04:43,100 --> 00:04:43,700
to write.

105
00:04:43,700 --> 00:04:46,400
And really, I guess I should say it's kind of a more general statement

106
00:04:46,400 --> 00:04:47,900
even than always write the usage code for us.

107
00:04:47,900 --> 00:04:51,200
What I really mean, is always write the code, you know how to write

108
00:04:51,300 --> 00:04:53,100
first, right?

109
00:04:53,500 --> 00:04:56,000
It sounds kind of obvious when you say it, but most people actually

110
00:04:56,000 --> 00:04:57,200
don't do it, it's weird.

111
00:04:57,900 --> 00:05:02,800
They tend to like if they know how, you know, if they have something

112
00:05:02,800 --> 00:05:04,200
that they're going to go implement.

113
00:05:05,200 --> 00:05:07,700
They tend to like start writing the interface for it first or

114
00:05:07,700 --> 00:05:11,900
something, without reading the implementation code, and that leads to

115
00:05:11,900 --> 00:05:12,400
problems.

116
00:05:12,500 --> 00:05:15,100
If they have something where they know what the interface is that they

117
00:05:15,100 --> 00:05:15,700
actually want.

118
00:05:15,700 --> 00:05:19,500
But they, but they, you know, haven't written anything to it.

119
00:05:19,500 --> 00:05:21,300
Yet they'll go do the implementation for its.

120
00:05:21,300 --> 00:05:23,600
We're it like you getting these weird situations where it's like, you

121
00:05:23,600 --> 00:05:26,900
write the wrong side of the code and someday I should probably try to

122
00:05:26,900 --> 00:05:30,000
figure out a good way to like formally explain exactly the process

123
00:05:30,000 --> 00:05:33,400
that you want to go through but the long and short of it is when

124
00:05:33,400 --> 00:05:34,400
you're about to start.

125
00:05:34,500 --> 00:05:35,100
Ting something.

126
00:05:35,900 --> 00:05:39,600
If there's a mystery, if there's a piece with a question mark over it

127
00:05:39,700 --> 00:05:44,400
right, don't start their start at the place you actually know and

128
00:05:44,400 --> 00:05:48,300
crawl into like push into the question mark that will allow you to

129
00:05:48,300 --> 00:05:51,500
make sure that you're on firm footing as you go in there rather than

130
00:05:51,500 --> 00:05:54,700
starting in the question mark and working your way out because that is

131
00:05:54,700 --> 00:05:57,100
really what causes a lot of problems because then you find that you've

132
00:05:57,100 --> 00:05:59,800
done something that doesn't really fit the

133
00:06:00,100 --> 00:06:03,800
Of the system that you had because you had all these known things that

134
00:06:03,800 --> 00:06:05,600
you know, that it had to work with, right?

135
00:06:06,000 --> 00:06:07,300
So that's what we're going to do here.

136
00:06:07,300 --> 00:06:09,000
We know that we have to write this stuff.

137
00:06:09,000 --> 00:06:11,900
I don't know what data store, so I'm just going to go write the

138
00:06:11,900 --> 00:06:12,300
functions.

139
00:06:12,300 --> 00:06:15,600
I know that I want for like display, some text on the screen.

140
00:06:15,900 --> 00:06:18,200
I'm going to write them in the way that I want them to work and then

141
00:06:18,200 --> 00:06:22,000
I'm going to see what falls out of that in terms of the data and the

142
00:06:22,000 --> 00:06:24,600
functions that the asset system should provide for getting that back

143
00:06:24,600 --> 00:06:24,900
to me.

144
00:06:26,700 --> 00:06:29,600
So let's start with a pretty simple task, something that should be

145
00:06:29,600 --> 00:06:31,800
very easy for us to do, right?

146
00:06:32,000 --> 00:06:38,700
Right now if you look at win32 handmade you'll note that we have some

147
00:06:38,900 --> 00:06:39,400
stuff in here.

148
00:06:39,400 --> 00:06:42,000
In fact I don't even remember where it is.

149
00:06:42,000 --> 00:06:46,000
We did it a long time ago, but we had these little debug timers,

150
00:06:46,100 --> 00:06:46,600
right?

151
00:06:46,600 --> 00:06:47,600
You can see them here.

152
00:06:48,400 --> 00:06:52,700
And the way that those debug timers worked is, you know, if you had

153
00:06:52,700 --> 00:06:55,400
handmade internal defined then these debug

154
00:06:55,700 --> 00:07:00,800
Hers would like, do a bunch of stuff that's that's not actually the

155
00:07:00,800 --> 00:07:01,700
one that I'm thinking of there.

156
00:07:01,700 --> 00:07:02,700
That is a debug timer.

157
00:07:02,700 --> 00:07:03,900
That's not the one I meant.

158
00:07:04,100 --> 00:07:06,000
I meant those little debug timers.

159
00:07:06,500 --> 00:07:07,400
Let's see here.

160
00:07:07,500 --> 00:07:08,300
Where are they?

161
00:07:09,000 --> 00:07:09,600
You know, the ones.

162
00:07:09,600 --> 00:07:11,900
I mean, they were like cycle counters.

163
00:07:11,900 --> 00:07:13,700
These right here, right?

164
00:07:14,100 --> 00:07:17,300
You see these guys, so we have some debug cycle counters.

165
00:07:17,500 --> 00:07:19,300
It was a really, very basic system.

166
00:07:19,300 --> 00:07:22,100
I was just showing some really, really rudimentary ways.

167
00:07:22,100 --> 00:07:24,000
You could time some code, right?

168
00:07:24,300 --> 00:07:25,500
And we didn't have

169
00:07:25,600 --> 00:07:27,200
have any way to display this at all.

170
00:07:27,200 --> 00:07:31,800
So we just had the win32 platform layer, dump it out to the debug

171
00:07:31,800 --> 00:07:32,700
Port, right?

172
00:07:33,300 --> 00:07:36,300
So, what I would like to do is I'd like to make a way for us to

173
00:07:36,300 --> 00:07:36,700
display.

174
00:07:36,700 --> 00:07:38,200
Those debug counters on the screen.

175
00:07:38,200 --> 00:07:39,200
Write something very simple.

176
00:07:39,200 --> 00:07:41,700
So that when we open the game, we can see those debug counters

177
00:07:41,700 --> 00:07:43,200
updating on top of the frame.

178
00:07:43,200 --> 00:07:46,900
As we go write something that would be a very straightforward part of

179
00:07:46,900 --> 00:07:49,100
what we want to do in terms of debug display.

180
00:07:49,200 --> 00:07:50,100
That's very simple.

181
00:07:50,700 --> 00:07:54,200
So if I take a look at how these are being displayed right now, we can

182
00:07:54,200 --> 00:07:55,500
kind of see debug cycle.

183
00:07:58,000 --> 00:08:02,300
Here is how Beckett's you know dumped out right at the moment.

184
00:08:02,500 --> 00:08:05,400
And so what I want to do is kind of start down that path and I want to

185
00:08:05,400 --> 00:08:07,200
imagine that we had a way to print this out.

186
00:08:07,200 --> 00:08:13,800
Now, there's two parts of printing this out that we have to write one

187
00:08:13,800 --> 00:08:15,200
of them we care about right now in one of them.

188
00:08:15,200 --> 00:08:19,200
We don't sew the two parts of it are first of all, we need a way to

189
00:08:19,200 --> 00:08:20,400
actually put fonts on the screen.

190
00:08:20,400 --> 00:08:23,500
That's the part we care about and then there's the part about how to

191
00:08:23,500 --> 00:08:26,800
actually convert numbers like numerical values.

192
00:08:28,300 --> 00:08:32,000
In the text and that part, we don't care about quite yet, we will care

193
00:08:32,000 --> 00:08:32,500
about it once.

194
00:08:32,500 --> 00:08:34,799
We actually want the, debug counters to actually start printing.

195
00:08:35,299 --> 00:08:37,200
But for the moment, we don't care about that because we're working on

196
00:08:37,200 --> 00:08:39,200
the font part of things first.

197
00:08:39,600 --> 00:08:42,700
So what I want to do is I want to take this routine, right at that,

198
00:08:42,700 --> 00:08:43,700
you can see right here.

199
00:08:44,100 --> 00:08:48,800
And what I want to do is I want to go into our game and I want to

200
00:08:48,800 --> 00:08:49,600
start printing.

201
00:08:49,700 --> 00:08:52,300
I want to start imagining, I guess it's, I can't quite put it yet.

202
00:08:52,300 --> 00:08:53,500
I want to start imagining that.

203
00:08:53,500 --> 00:08:56,000
I was able to print this out to the screen.

204
00:08:56,500 --> 00:08:57,700
And so what I'm going to do

205
00:08:57,800 --> 00:08:59,900
do is I'm going to make a little function here.

206
00:09:00,600 --> 00:09:01,800
In handmade dot CPP.

207
00:09:01,800 --> 00:09:04,300
And again, handmade dot CPP is kind of just are dumping ground for

208
00:09:04,300 --> 00:09:06,000
things that don't have a home yet.

209
00:09:06,600 --> 00:09:09,300
Things kind of grow in handmade CPP and then we move them out into

210
00:09:09,300 --> 00:09:14,100
their own files, sort of, as we determine what forms a coherent system

211
00:09:14,100 --> 00:09:17,100
and what stuff we want to think about together, right?

212
00:09:17,600 --> 00:09:21,500
So if I have this here, I'm going to just call this overlay cycle

213
00:09:21,500 --> 00:09:23,800
counts or something, or cycle counters.

214
00:09:25,800 --> 00:09:28,000
And so the overlay cycle counters function.

215
00:09:28,300 --> 00:09:31,600
Obviously it needs to take the game memory so that it can Loop over

216
00:09:31,600 --> 00:09:32,300
these things.

217
00:09:32,800 --> 00:09:35,700
And when it Loops over these things, we don't have the ability of

218
00:09:35,700 --> 00:09:37,200
doing output debug string.

219
00:09:37,200 --> 00:09:40,100
Because now we're, you know, we're not in the platform layer.

220
00:09:40,200 --> 00:09:42,800
And so, what we want to do is replace those calls to Output debug

221
00:09:42,800 --> 00:09:43,800
string, right?

222
00:09:43,800 --> 00:09:48,100
With our own way of, you know, our own font overlay system.

223
00:09:48,400 --> 00:09:51,800
So, in order to do that, obviously we need a renderer like we need to

224
00:09:51,800 --> 00:09:54,500
be able to Target a bitmap and all these

225
00:09:54,700 --> 00:09:55,500
They're sorts of things.

226
00:09:56,200 --> 00:10:01,100
So what I'd like to do is I'd like to go ahead and assume that we're

227
00:10:01,100 --> 00:10:03,200
going to be passed a renderer here, right?

228
00:10:03,200 --> 00:10:06,400
One of our, one of our render groups, something that can do that

229
00:10:06,400 --> 00:10:07,600
rendering, right?

230
00:10:08,500 --> 00:10:11,800
So in here I'm just going to assume temporarily, okay?

231
00:10:11,800 --> 00:10:15,200
We're going to get a render group and the render group, right?

232
00:10:17,400 --> 00:10:19,700
Is the thing that will do the output for us.

233
00:10:20,100 --> 00:10:23,100
And so when we come through here, we're going to want to do basically

234
00:10:23,100 --> 00:10:24,300
this the same stuff.

235
00:10:24,900 --> 00:10:29,600
So what I, you know what, I'll probably say is well for now let's just

236
00:10:29,600 --> 00:10:32,600
assume that we have something that's like you know render string for

237
00:10:32,600 --> 00:10:34,000
something like this, right?

238
00:10:34,100 --> 00:10:35,900
And you can pass a string to be rendered.

239
00:10:39,300 --> 00:10:40,800
So I want to do a render string.

240
00:10:41,200 --> 00:10:43,000
I think we were doing push basically, right?

241
00:10:43,000 --> 00:10:47,600
So maybe push text is a better one, something like that.

242
00:10:47,700 --> 00:10:52,000
And so here's my render group and when I do these debug cycle counts

243
00:10:52,000 --> 00:10:52,400
thing, right?

244
00:10:52,400 --> 00:10:55,200
I'm just kind of going to push that that text on there and thing that

245
00:10:55,300 --> 00:10:56,200
it doesn't really say.

246
00:10:56,200 --> 00:10:59,500
It doesn't really specify is where the text should actually show up,

247
00:10:59,700 --> 00:11:00,200
right?

248
00:11:00,300 --> 00:11:05,100
So that's kind of a little thing that we kind of going to need to

249
00:11:05,100 --> 00:11:06,200
address, right?

250
00:11:06,200 --> 00:11:06,800
So we'll talk about that.

251
00:11:07,000 --> 00:11:07,700
In a second.

252
00:11:07,900 --> 00:11:10,500
But for now let's just assume that we're going to have some way of

253
00:11:10,500 --> 00:11:11,400
dumping that text.

254
00:11:12,100 --> 00:11:16,400
We Loop over the counters that we have and just like before we just

255
00:11:16,400 --> 00:11:19,500
check, you know, if this counter ever got hit, then what we're going

256
00:11:19,500 --> 00:11:21,000
to do is we're going to print it out.

257
00:11:21,900 --> 00:11:25,200
We don't have any way to do this yet.

258
00:11:25,200 --> 00:11:28,400
We don't have a way to do this as printf because that's again, a

259
00:11:28,400 --> 00:11:30,700
Windows platform thing.

260
00:11:30,800 --> 00:11:34,700
That's happening there, a CRT Windows sort of thing and we're not,

261
00:11:34,700 --> 00:11:36,500
we're trying not to lose any libraries in handmade hero.

262
00:11:36,500 --> 00:11:36,800
So, we

263
00:11:36,900 --> 00:11:37,900
Want to call that.

264
00:11:38,100 --> 00:11:41,600
So what I'd rather do is I'd rather temporarily say, okay until we

265
00:11:41,600 --> 00:11:44,300
have a replacement for that, what I'm going to do is assume that that

266
00:11:44,300 --> 00:11:46,700
text buffer thing, right?

267
00:11:47,900 --> 00:11:51,500
I'm going to assume that that text buffer part of it is actually just

268
00:11:51,500 --> 00:11:52,300
going to be

269
00:11:54,000 --> 00:11:57,700
Whatever the debug counter part of it was, oh wait.

270
00:11:57,700 --> 00:11:59,500
But these don't even have any names do they.

271
00:12:00,000 --> 00:12:00,900
That's kind of weird.

272
00:12:02,300 --> 00:12:04,100
I guess we never gave these names.

273
00:12:04,700 --> 00:12:06,500
We just never we just never bothered with that.

274
00:12:06,500 --> 00:12:09,000
I guess because we were just doing other things at the time.

275
00:12:09,600 --> 00:12:10,600
That's kind of weird.

276
00:12:10,700 --> 00:12:12,300
Well, that's something that we want to do.

277
00:12:12,300 --> 00:12:17,600
So, you know, we'll just say to do Casey give these things names soon,

278
00:12:18,100 --> 00:12:18,600
right?

279
00:12:19,700 --> 00:12:22,600
But we can actually just sort of cheese the names in here pretty

280
00:12:22,600 --> 00:12:23,700
trivially, right?

281
00:12:24,000 --> 00:12:27,600
All we would have to do is just do something like name table and say,

282
00:12:27,600 --> 00:12:28,000
all right.

283
00:12:28,000 --> 00:12:31,700
Well you know we know that these counters all have specific values so

284
00:12:31,700 --> 00:12:31,900
we're just

285
00:12:32,100 --> 00:12:35,000
Going to go ahead and tell you what the names are right here.

286
00:12:35,200 --> 00:12:37,900
Again, not what we would like to do long-term because we don't want to

287
00:12:37,900 --> 00:12:40,600
have to be involved in the like sort of fussy management of these

288
00:12:40,600 --> 00:12:41,100
things.

289
00:12:41,600 --> 00:12:43,600
So, we'll look for a better solution to that later.

290
00:12:43,700 --> 00:12:47,100
There's a lot of things we could do to fix that, but again, not really

291
00:12:47,100 --> 00:12:47,900
important right now.

292
00:12:48,600 --> 00:12:52,000
So for the moment we'll just do the super cheesy and not particularly

293
00:12:52,000 --> 00:12:56,100
good thing of saying that will take the name table and we'll use the

294
00:12:56,100 --> 00:12:59,900
counter index that we're talking about and that will allow us to go

295
00:12:59,900 --> 00:13:01,900
ahead and push that string on there.

296
00:13:02,000 --> 00:13:05,100
And then what we want to do again besides just the nanny part is we

297
00:13:05,100 --> 00:13:08,200
would like to eventually tackle the part where we print it out so that

298
00:13:08,200 --> 00:13:10,800
we can actually see the values of those performance counters.

299
00:13:13,200 --> 00:13:14,000
That's the end goal.

300
00:13:16,000 --> 00:13:16,400
Okay.

301
00:13:18,100 --> 00:13:19,600
Now there's the matter of resetting.

302
00:13:19,600 --> 00:13:21,900
Our stuff here, which is not something I want to do in here because

303
00:13:21,900 --> 00:13:23,000
this is just the overlay.

304
00:13:23,400 --> 00:13:25,700
So we'll still let that reset happen in the platform layer.

305
00:13:25,700 --> 00:13:28,600
But eventually again, that to a lot of this stuff, we're going to

306
00:13:28,600 --> 00:13:32,400
start hoisting out because the only reason those debug cycle Counters

307
00:13:33,200 --> 00:13:35,800
work, sort of getting dealt with it all in the platform layer was

308
00:13:35,800 --> 00:13:37,800
because that's the only place that we can output them.

309
00:13:37,800 --> 00:13:42,500
So as we're sort of like those of you who've been watching, no in our

310
00:13:42,500 --> 00:13:45,000
sort of to-do list situation as we going through things.

311
00:13:47,100 --> 00:13:48,200
Oh, hey, look at that.

312
00:13:48,200 --> 00:13:53,200
We sort of finish that one, we're in the, the debug code section.

313
00:13:53,500 --> 00:13:56,700
So what we want to do here is we're sort of going through all this

314
00:13:56,700 --> 00:13:57,600
stuff that we need.

315
00:13:57,700 --> 00:14:01,200
And so the first thing that we're doing is the fonts but the idea is

316
00:14:01,200 --> 00:14:03,800
stuff like this debug cycle, counters will be adding lots of stuff

317
00:14:03,800 --> 00:14:08,200
like this over the course of the next few weeks and we want them all

318
00:14:08,200 --> 00:14:14,100
to sort of be nicely contained in the, the handmade hero code proper

319
00:14:14,100 --> 00:14:15,000
and not in like a

320
00:14:15,100 --> 00:14:16,200
Formally or anything like that.

321
00:14:16,800 --> 00:14:17,500
So anyway,

322
00:14:19,400 --> 00:14:23,700
While we're in here we're going to do these push texts and then

323
00:14:23,700 --> 00:14:27,000
eventually we'll sort of tackle this guy but for now this will just do

324
00:14:27,000 --> 00:14:28,500
that kind of simple print out thing.

325
00:14:28,500 --> 00:14:31,500
Now like I said what we don't quite know here is we don't actually

326
00:14:31,500 --> 00:14:34,700
know where those those texts.

327
00:14:34,700 --> 00:14:36,500
Things go is the thing right?

328
00:14:36,500 --> 00:14:42,200
We don't actually know where those are being sort of pushed and right

329
00:14:42,200 --> 00:14:44,400
because normally there'd be like some coordinates here, or something

330
00:14:44,400 --> 00:14:45,000
like that.

331
00:14:45,200 --> 00:14:47,800
Now what we could do obviously is we could introduce something here.

332
00:14:47,900 --> 00:14:51,400
Where I have to start specifying coordinates and all that stuff, but

333
00:14:51,400 --> 00:14:55,500
that's not particularly good because you know, if we're talking about

334
00:14:55,500 --> 00:14:59,000
debug code, I don't want to have to spend a lot of mental energy or

335
00:14:59,000 --> 00:14:59,800
pass a bunch of things.

336
00:15:00,000 --> 00:15:03,900
Through my code in order to do debug print outs.

337
00:15:04,100 --> 00:15:07,900
So what I'd rather do is make it so that the thing that draws fonts in

338
00:15:07,900 --> 00:15:13,400
the engine for debug stuff is actually like pretty clearly labeled as

339
00:15:13,400 --> 00:15:13,600
such.

340
00:15:13,600 --> 00:15:16,600
So instead of a push text, I'm going to go ahead and say that we have

341
00:15:16,600 --> 00:15:19,600
something else, which is kind of like a way of

342
00:15:22,200 --> 00:15:23,200
saying that I'm

343
00:15:24,600 --> 00:15:28,900
saying that I'm doing like a line of debug text, right?

344
00:15:28,900 --> 00:15:32,000
And then I'm just going to expect at the moment.

345
00:15:32,000 --> 00:15:36,900
I'm just going to expect that the render group has these debug

346
00:15:36,900 --> 00:15:40,400
Services built into it, so it just knows that every time I open a

347
00:15:40,400 --> 00:15:44,100
debug text line I kind of just want them to like feed down the screen

348
00:15:44,100 --> 00:15:47,800
and later we'll kind of maybe augment that with some better ways of

349
00:15:47,800 --> 00:15:49,900
saying what gets categorized in different ways.

350
00:15:49,900 --> 00:15:52,200
So when we have too much of this stuff, it doesn't just kind of

351
00:15:52,200 --> 00:15:53,000
overflow things.

352
00:15:53,000 --> 00:15:54,400
But at the moment like I just

353
00:15:54,600 --> 00:15:56,000
Start basically with that.

354
00:15:56,100 --> 00:15:59,900
Whereas, if we were doing something more for graphics work, which we

355
00:15:59,900 --> 00:16:01,800
will do a little bit with our fonts, because we're probably going to

356
00:16:01,800 --> 00:16:04,500
display strings once in a while in the actual game, right?

357
00:16:06,300 --> 00:16:09,600
That would be something that we'd want to do with with coordinates

358
00:16:09,600 --> 00:16:10,700
like put the text here.

359
00:16:11,700 --> 00:16:13,300
So what do I want this?

360
00:16:13,300 --> 00:16:16,000
Debug text line to look like, right?

361
00:16:16,500 --> 00:16:18,700
So if I go into handmade render group,

362
00:16:21,600 --> 00:16:25,600
And kind of see here that you know, we've got this render transform

363
00:16:26,000 --> 00:16:28,400
and the render transform is clearly something, right?

364
00:16:28,400 --> 00:16:33,100
That's going to be used to do you know the actual rendering for the

365
00:16:33,100 --> 00:16:34,000
game at that time.

366
00:16:34,500 --> 00:16:38,800
So what I want to kind of introduce separately is maybe like a render

367
00:16:38,800 --> 00:16:42,900
transform that is used for debugging that separate, right?

368
00:16:42,900 --> 00:16:46,700
So it's not using the same one as for the game, it's using like a

369
00:16:46,700 --> 00:16:49,500
separate render transform that it, you know, does in a completely

370
00:16:49,500 --> 00:16:50,100
different way.

371
00:16:50,300 --> 00:16:51,400
Something like that, right?

372
00:16:52,400 --> 00:16:55,700
And furthermore, I'm thinking that probably what we would like to do.

373
00:16:55,700 --> 00:16:58,500
I mean essentially what we'd like to do is have a whole another render

374
00:16:58,500 --> 00:17:01,200
group that's just for debug stuff, right?

375
00:17:02,100 --> 00:17:05,900
And I wonder too now that I think about it, I wonder too.

376
00:17:05,900 --> 00:17:09,900
If we want to just make that render group be implicit, it's some kind

377
00:17:09,900 --> 00:17:10,800
of global variable.

378
00:17:10,800 --> 00:17:12,300
That's always available for debugging.

379
00:17:12,300 --> 00:17:14,000
You don't have to pass it around anywhere.

380
00:17:14,000 --> 00:17:17,000
It's just, it's just, there's a way to get it because since it's only

381
00:17:17,000 --> 00:17:20,099
for debugging and we will be trying,

382
00:17:20,200 --> 00:17:23,800
compile it out, you know, at the end of the of the

383
00:17:25,000 --> 00:17:26,099
How the development cycle?

384
00:17:29,500 --> 00:17:32,100
I do wonder if maybe that's not an easier way to go.

385
00:17:32,100 --> 00:17:35,000
Because we want everyone to be able to access the debug Services, no

386
00:17:35,000 --> 00:17:37,500
matter where they are in their code, whether or not they've been

387
00:17:37,500 --> 00:17:40,000
handed a render group, right?

388
00:17:40,300 --> 00:17:43,000
So I'm thinking, maybe what we really want, is something more like

389
00:17:43,000 --> 00:17:46,800
this, where you can kind of do the debug text line thing, and that

390
00:17:46,800 --> 00:17:50,400
just kind of has a magical Global that it always knows.

391
00:17:50,400 --> 00:17:55,700
It can get at that's going to allow it to get its debug information

392
00:17:55,700 --> 00:17:57,500
properly, you know, properly.

393
00:17:57,500 --> 00:17:58,200
Displayed

394
00:17:59,100 --> 00:17:59,900
so, I think I'll

395
00:18:00,000 --> 00:18:01,200
Make that a little bit better.

396
00:18:01,300 --> 00:18:04,800
So I think I like it so that we can just kind of pass the sort of

397
00:18:04,800 --> 00:18:08,100
debug text line stuff we can sort of just past those directly.

398
00:18:10,000 --> 00:18:10,800
And so, let's try that.

399
00:18:10,800 --> 00:18:12,100
Let's at least try that.

400
00:18:12,300 --> 00:18:16,800
So if I'm going to have that, then what I would like to do here, right

401
00:18:16,800 --> 00:18:17,100
is.

402
00:18:17,100 --> 00:18:20,500
I'd like to have something that was like Global variable which is like

403
00:18:20,500 --> 00:18:22,700
a render Group which is like the debug render group.

404
00:18:24,700 --> 00:18:25,500
Something like this.

405
00:18:26,900 --> 00:18:29,600
And in fact I guess, you know, if you think about it it doesn't even

406
00:18:29,600 --> 00:18:31,900
necessarily have to be a render group.

407
00:18:32,000 --> 00:18:35,800
It could be its own like sort of debug Gathering thing.

408
00:18:36,300 --> 00:18:39,300
But for now I'm going to make it a renderer because I'm not sure.

409
00:18:39,400 --> 00:18:43,000
So we may change that to be something slightly different instead of a

410
00:18:43,000 --> 00:18:43,700
render group.

411
00:18:47,000 --> 00:18:49,500
You know what, I think just thinking about it in my head I feel like

412
00:18:49,500 --> 00:18:53,600
we're going to want it to be separate because like here's what I'm

413
00:18:53,600 --> 00:18:56,000
thinking and I'm not sure.

414
00:18:58,700 --> 00:19:01,400
This is a tough one, this is really a tough one.

415
00:19:01,800 --> 00:19:06,400
So what I'm thinking is suppose we have like lots of code and all the

416
00:19:06,400 --> 00:19:08,800
code has debug output in it.

417
00:19:09,500 --> 00:19:12,100
Obviously you're going to want to be able to pick what debug your

418
00:19:12,100 --> 00:19:13,800
viewing and what debug you're not viewing.

419
00:19:14,600 --> 00:19:16,500
So you know what I'm going to do that is it just gets buffered up in

420
00:19:16,500 --> 00:19:18,800
this in this debug SIS thing and then you can like pick which one

421
00:19:18,800 --> 00:19:23,100
you're viewing or whatever, but you probably could do that when in a

422
00:19:23,100 --> 00:19:27,000
forward feeding fashion as well, where it's just like it just throws

423
00:19:27,000 --> 00:19:27,900
out all the calls.

424
00:19:28,900 --> 00:19:32,300
That that are, you know, would be filtered out by the current

425
00:19:32,300 --> 00:19:33,700
selection of what you want to view.

426
00:19:34,800 --> 00:19:38,400
So we could still do it, something that immediately kind of renders to

427
00:19:38,400 --> 00:19:39,200
a render group.

428
00:19:40,000 --> 00:19:40,900
So I don't know.

429
00:19:41,200 --> 00:19:42,200
It's a pretty tough.

430
00:19:42,200 --> 00:19:43,400
It's a pretty tough thing.

431
00:19:44,100 --> 00:19:47,200
I guess, I'll stick with render group for the moment and we'll see

432
00:19:47,200 --> 00:19:48,000
what happens.

433
00:19:48,200 --> 00:19:50,800
I guess as we go, and who knows?

434
00:19:53,400 --> 00:19:53,900
All right.

435
00:19:56,000 --> 00:19:59,900
So if we have our debug render group here, then we're just going to

436
00:19:59,900 --> 00:20:04,200
assume that when we come in to game update and render that we, you

437
00:20:04,200 --> 00:20:07,900
know, we'll sort of initialize that guy before anything significant

438
00:20:07,900 --> 00:20:09,300
happens, right?

439
00:20:09,500 --> 00:20:13,400
So that there is a place where the debug stuff can actually go to.

440
00:20:13,800 --> 00:20:14,100
Yeah.

441
00:20:14,900 --> 00:20:19,600
And so, if we assume that that's the case, then we can take our debug

442
00:20:19,600 --> 00:20:21,500
text line, we can say.

443
00:20:21,500 --> 00:20:25,600
Okay, we've got our debug text line here, and it's going to take a

444
00:20:25,600 --> 00:20:25,800
strip.

445
00:20:26,000 --> 00:20:30,600
And that's supposed to output and what we would like to do now is we

446
00:20:30,600 --> 00:20:33,700
would like to go through and convert that to actually drawing stuff.

447
00:20:33,700 --> 00:20:36,300
Now we know how to draw strings, right?

448
00:20:36,300 --> 00:20:38,700
Because we kind of have our nothing's Fountain happening here.

449
00:20:39,300 --> 00:20:42,000
So we kind of know that we can draw a text this way.

450
00:20:42,000 --> 00:20:45,200
Already just using the rudimentary stuff that we kind of

451
00:20:46,700 --> 00:20:47,600
Pulled out before.

452
00:20:47,800 --> 00:20:51,800
It's not particularly pretty, but it works, right?

453
00:20:52,600 --> 00:20:56,000
So let's start by doing that will start by using that exact same

454
00:20:56,000 --> 00:20:56,400
thing.

455
00:20:57,300 --> 00:20:59,300
And what we can do here is say okay,

456
00:21:00,200 --> 00:21:03,600
You know, whatever the value in the string is that's the Unicode code

457
00:21:03,600 --> 00:21:06,900
point that we would want will still make these that match vectors

458
00:21:06,900 --> 00:21:07,300
here.

459
00:21:07,400 --> 00:21:13,600
So we did initialize those match vectors and we would say that we want

460
00:21:13,600 --> 00:21:20,200
to Loop over the string sort of getting the best math best match

461
00:21:20,700 --> 00:21:23,000
bitmap from each, right?

462
00:21:24,400 --> 00:21:27,400
So yeah, so we set the tag Unicode code Point.

463
00:21:27,400 --> 00:21:29,800
Wait to something we would then Loop

464
00:21:30,000 --> 00:21:32,000
Over the string.

465
00:21:33,600 --> 00:21:38,200
And as we Loop over the string, we look for the bitmap that

466
00:21:38,200 --> 00:21:40,700
corresponds to each individual setting.

467
00:21:41,200 --> 00:21:42,800
So to do that again.

468
00:21:42,800 --> 00:21:47,000
Also, we would need the Assets in order to sort of grab those those

469
00:21:47,000 --> 00:21:52,000
asset bitmaps which would also, you know, now that I think about it.

470
00:21:54,200 --> 00:21:59,300
I feel like the render group is always supposed to have that in it as

471
00:21:59,300 --> 00:22:02,300
well, but the assets are actually right in there, right?

472
00:22:02,400 --> 00:22:05,600
So really, this should just be this could just be debug render group

473
00:22:05,600 --> 00:22:06,300
assets, right?

474
00:22:06,400 --> 00:22:06,800
Like, so,

475
00:22:08,400 --> 00:22:09,400
So that's how that works.

476
00:22:10,100 --> 00:22:12,200
That would get the bitmap that we actually need.

477
00:22:12,700 --> 00:22:18,500
And similarly, we should be able to actually push that bitmap.

478
00:22:18,500 --> 00:22:21,900
Now using the push bitmap call, right?

479
00:22:23,100 --> 00:22:30,700
So push bitmap, here we go, and that's pretty basic it's just like how

480
00:22:30,700 --> 00:22:35,700
big we want the bitmap to be and then like you know where we want the

481
00:22:35,700 --> 00:22:37,100
bitmap to be right?

482
00:22:37,300 --> 00:22:38,000
And that's that's really

483
00:22:38,200 --> 00:22:38,700
About it.

484
00:22:39,800 --> 00:22:45,600
So there we go and guess we also technically have the ability to

485
00:22:45,600 --> 00:22:47,900
colorize it, so we might as well.

486
00:22:51,000 --> 00:22:55,800
Okay, so when we do this push bitmap right again, this is just really

487
00:22:55,800 --> 00:22:56,500
pretty basic.

488
00:22:56,500 --> 00:22:59,100
We're not really, we're not getting very far here or anything like

489
00:22:59,100 --> 00:22:59,300
that.

490
00:22:59,300 --> 00:23:01,100
We're just kind of doing the really, really simple stuff.

491
00:23:01,100 --> 00:23:03,100
I'm just trying to get some minimal thing working.

492
00:23:03,400 --> 00:23:06,200
Let me go ahead and compile this, see where we're at?

493
00:23:09,500 --> 00:23:10,100
Let's see.

494
00:23:10,100 --> 00:23:11,600
Is it not Global?

495
00:23:11,600 --> 00:23:13,800
Is that not the name of our thing?

496
00:23:16,500 --> 00:23:18,400
let's see, internal

497
00:23:19,800 --> 00:23:21,000
Global variable.

498
00:23:25,500 --> 00:23:26,100
So let's see.

499
00:23:26,100 --> 00:23:28,800
Render group does not have an overloaded member function.

500
00:23:29,200 --> 00:23:30,100
That's true.

501
00:23:30,600 --> 00:23:31,400
You are correct.

502
00:23:31,400 --> 00:23:34,200
I guess what I could do though is is actually just make one here

503
00:23:34,200 --> 00:23:37,000
render group equals debug render group.

504
00:23:39,500 --> 00:23:42,400
And then do that.

505
00:23:44,700 --> 00:23:50,300
Okay, so that would actually output all of the bitmaps not in any

506
00:23:50,300 --> 00:23:54,800
particular place and not at any particular size of use to anyone, but

507
00:23:55,000 --> 00:23:56,500
it's getting us started.

508
00:23:58,700 --> 00:23:59,200
Okay.

509
00:24:00,800 --> 00:24:04,700
So let's see what we can do here if anything.

510
00:24:06,200 --> 00:24:09,600
So in here, what I'd like to do is at the very end of everything when

511
00:24:09,600 --> 00:24:11,400
we get all the way down to the bottom.

512
00:24:11,600 --> 00:24:12,300
Right.

513
00:24:12,700 --> 00:24:17,500
What I'd like to do is I guess perhaps even outside the time block I'm

514
00:24:17,500 --> 00:24:23,600
not sure that's kind of a good question but you know I want to Overlay

515
00:24:23,600 --> 00:24:29,700
those cycle counters on here and and see if we can't get them to sort

516
00:24:29,700 --> 00:24:30,300
of do.

517
00:24:31,700 --> 00:24:35,200
Do something overlaying our system, right?

518
00:24:35,400 --> 00:24:39,100
So if I call that, what should happen now is, we should, we should

519
00:24:39,100 --> 00:24:41,300
either we should crash or assert right away, right?

520
00:24:41,300 --> 00:24:44,700
Because we have initialized that debug render group, right?

521
00:24:44,700 --> 00:24:50,500
So if I read it, now, as soon as anyone tries to do anything, right in

522
00:24:50,500 --> 00:24:54,500
here, this is just we haven't set it up, right?

523
00:24:54,900 --> 00:24:57,800
So in order to get this to start working at all, the first thing that

524
00:24:57,800 --> 00:25:00,600
we're going to have to do is we're going to have to set up that.

525
00:25:00,800 --> 00:25:01,700
Debug render group.

526
00:25:02,100 --> 00:25:04,200
So, if we wanted to set up a debug render group,

527
00:25:05,800 --> 00:25:09,700
What we need to do is we need to have some memory for it, right?

528
00:25:09,700 --> 00:25:12,400
Because we don't have anything like that at all.

529
00:25:13,000 --> 00:25:18,300
And so, if we take a look at at the render group itself, when we

530
00:25:18,300 --> 00:25:20,200
initialize a render group, right?

531
00:25:20,200 --> 00:25:22,300
This stuff can all just live in the global, right?

532
00:25:22,300 --> 00:25:25,900
Look, all this stuff lives in the Global's, but it's this push buffer

533
00:25:26,500 --> 00:25:28,300
that actually needs space, right?

534
00:25:28,300 --> 00:25:32,100
The push buffer has to exist somewhere for the debug render group.

535
00:25:32,800 --> 00:25:34,900
So when we do our allocate render group,

536
00:25:35,900 --> 00:25:39,600
You can see that what we do is we have to pass it in Arena and then

537
00:25:39,600 --> 00:25:44,500
the arena it will actually allocate its face from right like that.

538
00:25:45,100 --> 00:25:46,600
So you can kind of see how that goes.

539
00:25:47,200 --> 00:25:50,300
And in fact, the render group in this case is actually a like it

540
00:25:50,300 --> 00:25:53,200
returns a pointer because it will allocate into that Arena.

541
00:25:53,200 --> 00:25:55,000
It'll actually allocate itself as well.

542
00:25:56,400 --> 00:25:56,900
So yeah,

543
00:25:58,300 --> 00:26:01,200
So I guess that means really, we could just do it like this.

544
00:26:01,500 --> 00:26:02,900
You could do something like this.

545
00:26:03,500 --> 00:26:08,500
If we've got the debug render group, then use it kind of a thing,

546
00:26:08,800 --> 00:26:09,300
right?

547
00:26:09,500 --> 00:26:11,500
And that would certainly prevent us from crashing, but it's not going

548
00:26:11,500 --> 00:26:12,700
to help us overlay anything.

549
00:26:14,500 --> 00:26:17,100
So right, so that's fine.

550
00:26:17,500 --> 00:26:20,100
So what we'd like to do now is we'd like to actually initialize that

551
00:26:20,100 --> 00:26:23,400
render group and so we want to do is when we first start up I guess if

552
00:26:23,400 --> 00:26:27,800
you want to just steal a little bit of space from say the

553
00:26:28,200 --> 00:26:32,800
And Arena where we can initialize that debugger Arena and have it

554
00:26:32,800 --> 00:26:34,300
actually work, right?

555
00:26:34,800 --> 00:26:37,700
So what we'll do is we'll say debug render group, equals allocate

556
00:26:37,700 --> 00:26:43,500
render group will throw it some memory from the transient Arena and

557
00:26:43,500 --> 00:26:46,000
then we can can go from there.

558
00:26:46,500 --> 00:26:47,700
So handmade render group.

559
00:26:47,700 --> 00:26:49,400
It needs an asset system to.

560
00:26:49,400 --> 00:26:52,800
I guess we probably want to do it like this where we know that will

561
00:26:52,800 --> 00:26:54,100
actually have some assets.

562
00:26:55,300 --> 00:26:57,700
We don't really know what the push, buffer size should be.

563
00:26:58,100 --> 00:26:59,800
We're kind of just making stuff up.

564
00:27:00,200 --> 00:27:03,000
And we'll go ahead and say that this doesn't render in the background

565
00:27:03,000 --> 00:27:06,000
because well, well it's not gonna render in the background.

566
00:27:07,300 --> 00:27:08,000
So anyway,

567
00:27:09,600 --> 00:27:12,700
If we actually get that, now, our debug render group should actually

568
00:27:12,700 --> 00:27:13,500
do something.

569
00:27:14,300 --> 00:27:14,700
Of course.

570
00:27:14,700 --> 00:27:16,900
The interesting thing about the debug render group, right?

571
00:27:16,900 --> 00:27:21,400
Is this not actually going to do anything until we actually call

572
00:27:21,400 --> 00:27:23,600
render group to Output, right?

573
00:27:24,100 --> 00:27:28,500
And so, if we want to at the end of this, after we, after we do our

574
00:27:28,500 --> 00:27:32,700
overlay cycle counter stuff, we can come in here and do render to

575
00:27:32,700 --> 00:27:35,400
grouped output with our debug render group.

576
00:27:35,700 --> 00:27:38,100
So we can even do something like this where we say, you know,

577
00:27:40,000 --> 00:27:44,500
If there is one, we would like that to happen.

578
00:27:44,800 --> 00:27:47,400
The output Target should still be valid.

579
00:27:47,700 --> 00:27:48,500
Oddly enough.

580
00:27:51,100 --> 00:27:58,500
Don't actually know draw buffer and presumably we can just slap our

581
00:27:58,500 --> 00:28:02,000
stuff right on top of the game surface right by just saying, hey,

582
00:28:02,100 --> 00:28:05,200
render on top of the thing that was already there.

583
00:28:05,800 --> 00:28:09,900
Presumably, now we have a problem, which is that when we do render

584
00:28:09,900 --> 00:28:15,000
group to Output, you will notice that when we call that, we don't

585
00:28:15,000 --> 00:28:16,100
actually have

586
00:28:22,100 --> 00:28:25,500
Jimmy and I guess we could even do it tiled.

587
00:28:25,500 --> 00:28:28,600
If we wanted to write we could we could do this threaded I'm not sure

588
00:28:28,600 --> 00:28:31,600
which one we want to do but either one would work, right?

589
00:28:33,300 --> 00:28:36,200
I don't know where, where is, where is the render queue?

590
00:28:36,200 --> 00:28:37,700
I guess it's the high priority queue.

591
00:28:38,000 --> 00:28:38,600
So, there we go.

592
00:28:40,600 --> 00:28:44,600
So yeah, we can do this tile if we want to and all that.

593
00:28:44,600 --> 00:28:48,400
But basically, what's going to happen at the end of this, this finish

594
00:28:48,400 --> 00:28:50,800
render group thing will be call.

595
00:28:50,800 --> 00:28:53,100
Which does that sort of the end generation bit?

596
00:28:53,500 --> 00:28:54,400
What's interesting about?

597
00:28:54,400 --> 00:28:57,900
This is the render group itself would need to get recreated at this

598
00:28:57,900 --> 00:29:00,000
point and to some degree.

599
00:29:00,000 --> 00:29:02,600
We don't actually want that to happen, right?

600
00:29:03,000 --> 00:29:06,600
We would rather have it so that we can have a render group that we can

601
00:29:06,600 --> 00:29:07,800
kind of reuse.

602
00:29:07,900 --> 00:29:12,400
I feel like and so what I'd kind of rather do is have like, you know,

603
00:29:12,400 --> 00:29:18,300
something like begin render pass or something, or begin render, you

604
00:29:18,300 --> 00:29:23,600
know, an end render something like this, where, when you call begin

605
00:29:23,600 --> 00:29:29,000
render, that's when it actually does a generation ID, you know,

606
00:29:29,500 --> 00:29:30,500
something like this.

607
00:29:34,200 --> 00:29:38,400
And then you know, maybe the certs even oops assets that's good.

608
00:29:39,000 --> 00:29:43,900
Maybe the search that it's not doing that so it doesn't assert this

609
00:29:44,000 --> 00:29:48,500
equals zero and then when you end render it asserts is not equal to 0

610
00:29:48,500 --> 00:29:51,100
and we could make it so that the asset system doesn't generally

611
00:29:51,100 --> 00:29:51,500
return.

612
00:29:51,500 --> 00:29:52,900
0, I don't know.

613
00:29:53,200 --> 00:29:54,600
Probably can't always do that.

614
00:29:54,600 --> 00:29:57,700
So we won't actually say that that's true, but we can certainly assert

615
00:29:57,700 --> 00:29:58,500
this one, right?

616
00:30:00,600 --> 00:30:01,200
so anyway,

617
00:30:04,200 --> 00:30:09,900
so if we do it, beginning to renan, begin render and render, then that

618
00:30:09,900 --> 00:30:11,100
will all work nicely.

619
00:30:11,100 --> 00:30:14,500
And the only thing that we would have to do to make this reset itself.

620
00:30:14,800 --> 00:30:17,200
Because remember, if you take a look at this, the only thing that

621
00:30:17,200 --> 00:30:20,800
actually tracks where we are in the render group is just the push

622
00:30:20,800 --> 00:30:23,100
buffer size, right?

623
00:30:23,100 --> 00:30:25,200
So if we wanted to, we could just reset the push.

624
00:30:25,200 --> 00:30:29,200
Buffer size 20 and now, we've cleared the render group and can just

625
00:30:29,200 --> 00:30:30,900
use it again, right?

626
00:30:31,600 --> 00:30:33,600
So we can just do an end render here.

627
00:30:34,400 --> 00:30:35,800
On the debug render group.

628
00:30:37,100 --> 00:30:39,900
And everything is magical and fine, right?

629
00:30:40,100 --> 00:30:45,000
And as long as we do a, corresponding begin render before we start

630
00:30:45,600 --> 00:30:49,600
everything again, just just peachy, you know, it's kind of like it's

631
00:30:49,600 --> 00:30:54,000
peachy and so we would have to do that again immediately after

632
00:30:54,000 --> 00:30:55,600
initializing the transient Arena.

633
00:30:55,600 --> 00:30:59,200
So that's, you know, we'd want to start the rendering like so,

634
00:31:01,000 --> 00:31:04,200
but off you go, and we could also make a Boolean here, even for

635
00:31:04,200 --> 00:31:06,600
debugging, which, you know, I mean, we could do something like this

636
00:31:06,600 --> 00:31:14,500
inside, render that and say, you know, assert group inside render

637
00:31:16,300 --> 00:31:17,000
and,

638
00:31:19,600 --> 00:31:20,600
Inside render.

639
00:31:23,200 --> 00:31:26,200
So we can just do something like this, right, where we say.

640
00:31:27,900 --> 00:31:30,900
Okay, assert that you're not inside a render.

641
00:31:31,200 --> 00:31:32,500
And then now, you are

642
00:31:33,800 --> 00:31:34,300
Right.

643
00:31:35,700 --> 00:31:38,500
And similarly here, assert that you are inside a render.

644
00:31:38,500 --> 00:31:41,300
And now, you aren't

645
00:31:42,500 --> 00:31:46,800
Something like that, you know I'm saying and if furthermore the other

646
00:31:46,800 --> 00:31:51,200
thing we could do is anytime anyone tried to push to something, right?

647
00:31:51,400 --> 00:31:55,200
So you know, if we took a look in here at like push render elements,

648
00:31:55,500 --> 00:31:58,400
we could just make sure that anyone who ever tries to do this.

649
00:31:59,500 --> 00:32:02,700
We just assert that we're inside.

650
00:32:03,100 --> 00:32:06,700
So that no one can do it outside of one of these these passes.

651
00:32:06,900 --> 00:32:10,100
And, you know, just giving myself a little security buffer, right?

652
00:32:10,100 --> 00:32:12,200
Just just trying to give myself a little bit.

653
00:32:12,400 --> 00:32:16,000
Of a safety net in case I make a mistake somewhere.

654
00:32:17,900 --> 00:32:21,900
Okay, same would be true for all of this stuff, right?

655
00:32:23,300 --> 00:32:28,200
Just making sure we always have, you know, a render group that's been

656
00:32:28,200 --> 00:32:29,100
properly set up.

657
00:32:30,300 --> 00:32:30,900
So okay.

658
00:32:31,100 --> 00:32:32,600
So suppose we do that, right?

659
00:32:32,600 --> 00:32:36,300
Then we do begin and render for the render group, we could just keep

660
00:32:36,300 --> 00:32:39,200
rendering to it and reusing it over and over again, which is kind of

661
00:32:39,200 --> 00:32:42,500
nice and, and that's all good, right?

662
00:32:42,900 --> 00:32:45,800
So, let's see inside render here.

663
00:32:48,900 --> 00:32:50,100
Off the wrong pointer.

664
00:32:50,200 --> 00:32:50,800
There we go.

665
00:32:51,300 --> 00:32:58,300
Same with this guy and now for these dudes, right?

666
00:32:58,700 --> 00:32:59,400
When we do our

667
00:33:01,100 --> 00:33:01,800
Render group.

668
00:33:01,800 --> 00:33:06,200
We now need to do a beginner Ender on the render group, right?

669
00:33:06,500 --> 00:33:07,100
Like so.

670
00:33:07,600 --> 00:33:10,700
And now this turns into an end render on the render group.

671
00:33:14,400 --> 00:33:17,400
Yeah, finish render group same thing.

672
00:33:17,400 --> 00:33:20,500
This is going to be an end render and then up where we did the

673
00:33:20,500 --> 00:33:22,700
allocate, we're just going to do a begin render.

674
00:33:25,500 --> 00:33:29,100
And now we have the option of saving this as well, rather than

675
00:33:29,100 --> 00:33:34,600
allocating it every time, which we might want to do to kind of up to

676
00:33:34,600 --> 00:33:34,900
us.

677
00:33:36,800 --> 00:33:39,700
Okay let's start.

678
00:33:39,800 --> 00:33:45,200
Oh say so is that that's may not be initialized as well as the other

679
00:33:45,200 --> 00:33:46,000
thing, right?

680
00:33:46,000 --> 00:33:49,400
We didn't actually initialize that in our allocate, which I should do

681
00:33:51,100 --> 00:33:51,600
Here we go.

682
00:33:52,300 --> 00:33:58,700
So in here, we want results in render equals false so that we know,

683
00:34:04,100 --> 00:34:05,900
We are not starting inside render.

684
00:34:06,400 --> 00:34:06,900
Certainly

685
00:34:11,000 --> 00:34:13,199
Okay, so that's all fine.

686
00:34:15,300 --> 00:34:19,800
Now, what we need to do is we need to actually start setting up our

687
00:34:19,800 --> 00:34:25,000
render group, so that the render group will, you know,

688
00:34:26,199 --> 00:34:29,000
Be able to display the bitmaps be able to say the debug bitmaps.

689
00:34:29,800 --> 00:34:33,000
So, what I want to do first is create an orthographic display and I

690
00:34:33,000 --> 00:34:37,000
remember there are two types of ways of transforming that we talked

691
00:34:37,000 --> 00:34:39,600
about on handmade hero perspective, where things that are further

692
00:34:39,600 --> 00:34:44,500
away, get smaller and orthographic where they don't, right?

693
00:34:44,699 --> 00:34:47,500
And so for our debug output, we just want things to be orthographic

694
00:34:47,500 --> 00:34:50,300
because we're just trying to make like a flat overlay on the screen.

695
00:34:50,800 --> 00:34:54,600
So when we initialize our debug render, we want to set an

696
00:34:54,600 --> 00:34:55,699
orthographic.

697
00:34:56,000 --> 00:35:00,000
Render group here so that we're just flat drawing to the screen with

698
00:35:00,000 --> 00:35:02,300
nothing weird happening, right?

699
00:35:02,900 --> 00:35:05,800
So if I set an orthographic display for the render group,

700
00:35:07,300 --> 00:35:11,400
We know that our screen has a particular size, right?

701
00:35:12,800 --> 00:35:16,200
I guess, I don't know at this point, whether the the screen has

702
00:35:16,200 --> 00:35:19,900
actually been set like the draw, buffer itself has been set, it

703
00:35:19,900 --> 00:35:20,700
probably hasn't.

704
00:35:20,700 --> 00:35:22,900
So I think I want to use buffer directly there.

705
00:35:24,000 --> 00:35:25,500
Like so right.

706
00:35:25,800 --> 00:35:29,700
So we've got buffer width height.

707
00:35:30,100 --> 00:35:34,000
So and then we've got our m, 2 pixels, m.

708
00:35:34,000 --> 00:35:36,700
2 pixels, of course, is a little bit weird.

709
00:35:39,600 --> 00:35:42,700
For these purposes because now we're not really thinking about any

710
00:35:42,700 --> 00:35:44,500
kind of real world units.

711
00:35:46,300 --> 00:35:49,100
But if we have a meter, how many pixels should it be?

712
00:35:49,100 --> 00:35:51,600
You know, we can pretty much pick an arbitrary thing.

713
00:35:51,600 --> 00:35:55,000
I don't know, let's say 100 depends on how we want.

714
00:35:55,100 --> 00:35:59,600
How scaled we want our author orthographic text display to

715
00:36:00,100 --> 00:36:02,000
Be right, but that's about it.

716
00:36:03,100 --> 00:36:04,300
So, let's see what happens.

717
00:36:04,300 --> 00:36:10,900
Now, you can actually see right here, that's actually drawing to the

718
00:36:10,900 --> 00:36:14,500
00, location a bunch of the font stuff of, right?

719
00:36:15,300 --> 00:36:18,100
So, we're already seeing the results of that debug render.

720
00:36:18,400 --> 00:36:21,700
You can see that happens even before I launch a hero, right?

721
00:36:21,700 --> 00:36:25,300
So those are just the, you know, the sort of the letters that were

722
00:36:25,300 --> 00:36:25,900
talking about.

723
00:36:27,400 --> 00:36:30,400
Okay, so the next thing that we want to do is actually get those

724
00:36:30,400 --> 00:36:34,100
displaying in a way that looks more like an actual usable thought the

725
00:36:34,100 --> 00:36:37,200
other thing that we don't really know about here is in terms of like

726
00:36:37,200 --> 00:36:39,600
what we all want these actual sizes to be.

727
00:36:39,600 --> 00:36:43,300
I don't know what to think about that a little bit more, but let's

728
00:36:43,300 --> 00:36:47,200
press on a little bit first, just so we can get more stuff happening

729
00:36:47,700 --> 00:36:50,400
before we try to make any of those decisions, right?

730
00:36:51,800 --> 00:36:55,500
So if I want to display this, debug text line here, then what I want

731
00:36:55,500 --> 00:36:59,700
to do is I need some way like this is just drawing them all at 0-0.

732
00:36:59,700 --> 00:37:04,900
I need some way of actually sort of drawing them across on the screen,

733
00:37:04,900 --> 00:37:05,100
right?

734
00:37:05,100 --> 00:37:10,300
I need them to line up as as letters, so, I'm just going to introduce

735
00:37:10,600 --> 00:37:15,500
like a variable here at X, and that's just going to, I'm going to move

736
00:37:15,500 --> 00:37:19,200
it like, you know, from left to right as I draw a letters pretty

737
00:37:19,200 --> 00:37:20,300
straightforward, right?

738
00:37:20,500 --> 00:37:21,200
So if I put that

739
00:37:21,300 --> 00:37:24,500
In here and I just you know and I was to add something to the value

740
00:37:24,500 --> 00:37:25,000
here.

741
00:37:25,200 --> 00:37:28,400
Then what I could do is say okay you know, how big are these guys

742
00:37:28,400 --> 00:37:30,000
right there some kind of scale value?

743
00:37:30,200 --> 00:37:30,500
I don't know.

744
00:37:30,500 --> 00:37:33,600
They looked like way too big before so I've got some kind of scale

745
00:37:33,600 --> 00:37:35,100
value here right?

746
00:37:35,100 --> 00:37:39,600
And I'm just going to add whatever the scale value is and you know if

747
00:37:39,600 --> 00:37:43,200
you figured that that scale value was somehow related to the bitmap,

748
00:37:43,700 --> 00:37:46,300
we'll figure out how much we should Advance by in a second.

749
00:37:48,000 --> 00:37:48,700
So, there we go.

750
00:37:50,000 --> 00:37:52,900
Hey look, we're starting to get some debug text in there, so that's

751
00:37:52,900 --> 00:37:54,400
pretty good, right?

752
00:37:55,300 --> 00:37:58,700
But, you know, it's in the center of the screen and, and it being in

753
00:37:58,700 --> 00:38:02,100
the center of the screen is not really what we want, right?

754
00:38:02,200 --> 00:38:04,000
That doesn't help us super much.

755
00:38:04,400 --> 00:38:07,300
So what we would probably rather have is some way of like having it

756
00:38:07,300 --> 00:38:11,300
start to display itself like up in the corner and furthermore every

757
00:38:11,300 --> 00:38:15,200
time we get a new one, we want to move down to the next line, right?

758
00:38:16,400 --> 00:38:17,700
So what I'd like to do is say

759
00:38:17,800 --> 00:38:22,500
Okay, I've got an at y variable as well the at y variable.

760
00:38:22,500 --> 00:38:30,300
I'll Advance every time, you know, we get to a new to a new line of

761
00:38:30,300 --> 00:38:31,200
debug text.

762
00:38:31,500 --> 00:38:34,800
Now, what you can tell though is that since this is this is just a

763
00:38:34,800 --> 00:38:38,300
function that renders a single line he by text, I don't actually know

764
00:38:38,400 --> 00:38:40,300
when that happens, right?

765
00:38:40,700 --> 00:38:45,100
So at that point we need some additional piece of information here and

766
00:38:45,100 --> 00:38:46,900
hopefully you can kind of see where this is going.

767
00:38:48,300 --> 00:38:51,000
In a second we need another variable right?

768
00:38:51,000 --> 00:38:57,100
We need an at y variable here to store whatever the Y Line is and we

769
00:38:57,100 --> 00:38:59,600
would need that to actually reset itself.

770
00:39:00,000 --> 00:39:05,300
Time, we restart every time we moved to a new frame, right?

771
00:39:05,900 --> 00:39:08,300
Because otherwise it'll just move up right off the screen and that

772
00:39:08,300 --> 00:39:09,200
would be the end of it.

773
00:39:09,300 --> 00:39:10,400
But at the end of this, right?

774
00:39:10,400 --> 00:39:11,000
We would know.

775
00:39:11,000 --> 00:39:14,700
Okay, we just gotta move down a line, right?

776
00:39:14,700 --> 00:39:16,400
I'll actually get since y goes up.

777
00:39:16,600 --> 00:39:21,300
We would move, you know, we'd subtract to go downward, right?

778
00:39:22,000 --> 00:39:25,200
And so what we would need here is we need something like internal

779
00:39:26,200 --> 00:39:27,400
void, oops.

780
00:39:30,000 --> 00:39:33,700
Reset or like debug reset, or something like that, right?

781
00:39:35,500 --> 00:39:40,100
And that would have to reset this at y equal to 0 because if we don't

782
00:39:40,100 --> 00:39:40,700
do that, right?

783
00:39:40,700 --> 00:39:42,500
Just so you can understand what I'm talking about here.

784
00:39:42,600 --> 00:39:45,200
If we don't do that, then it just runs off the bottom of the screen

785
00:39:45,200 --> 00:39:46,100
will never see it again.

786
00:39:46,100 --> 00:39:49,200
Like it's already gone before we even start for the even assets are

787
00:39:49,200 --> 00:39:49,500
loaded.

788
00:39:49,500 --> 00:39:50,700
It's gone right?

789
00:39:51,500 --> 00:39:55,600
So we need something that's going too deep to do that reset for us and

790
00:39:55,600 --> 00:39:57,700
so we know right?

791
00:39:57,700 --> 00:40:02,700
We know when that would be we know that at the end you know sort of

792
00:40:02,800 --> 00:40:04,200
when we're all done with everything.

793
00:40:04,500 --> 00:40:07,600
We do this and render that we could do our research here and it would

794
00:40:07,600 --> 00:40:08,700
clear thing out.

795
00:40:09,200 --> 00:40:10,500
Now, we could also do it at the beginning.

796
00:40:10,500 --> 00:40:12,200
It turns how we want to structure it.

797
00:40:14,300 --> 00:40:14,900
There we go.

798
00:40:21,600 --> 00:40:27,900
Right now we're getting closer, we got to move it up here and also you

799
00:40:27,900 --> 00:40:30,100
may notice that we get a bunch of Z's in here.

800
00:40:30,900 --> 00:40:32,600
The reason for that is we haven't put.

801
00:40:33,000 --> 00:40:36,000
This is kind of the fun part of our router asset matcher.

802
00:40:36,700 --> 00:40:39,000
It's like we don't have any lowercase letters.

803
00:40:39,700 --> 00:40:43,800
So it just thinks like oh I should just get the closest ASCII to that.

804
00:40:45,800 --> 00:40:47,800
It doesn't understand lowercase in capital letters.

805
00:40:48,000 --> 00:40:51,500
Maybe we should make it do so and knows to just get the, the uppercase

806
00:40:51,500 --> 00:40:52,100
version of something.

807
00:40:52,100 --> 00:40:53,700
If it can't find a lowercase, right.

808
00:40:54,300 --> 00:40:55,300
But we're getting closer, right?

809
00:40:55,300 --> 00:40:56,600
We're getting closer to a font.

810
00:40:58,800 --> 00:41:01,400
So okay, so probably right that scale value.

811
00:41:01,400 --> 00:41:03,300
It looks like it would need a little more spacing.

812
00:41:03,400 --> 00:41:06,100
You know, it looks like maybe it needs something more like that.

813
00:41:06,300 --> 00:41:09,700
In order for the line Heights to be correct there.

814
00:41:09,700 --> 00:41:11,100
You can kind of see they're a little bit better.

815
00:41:11,100 --> 00:41:14,600
Maybe just even a little bit more something like this, right?

816
00:41:15,600 --> 00:41:21,200
And so there, that's a, that's a better-looking, debug display there.

817
00:41:21,800 --> 00:41:25,200
And so you know what, what the heck?

818
00:41:25,300 --> 00:41:26,700
We're having a little party here.

819
00:41:26,800 --> 00:41:28,500
Why don't we just go and have it?

820
00:41:28,600 --> 00:41:29,100
Weird.

821
00:41:29,100 --> 00:41:33,200
The lowercase letters to write because right now we don't actually do

822
00:41:33,200 --> 00:41:35,000
the uppercase letters.

823
00:41:35,200 --> 00:41:39,800
So when we do the glyph extraction, I don't actually remember how we

824
00:41:39,800 --> 00:41:40,500
even did this.

825
00:41:40,500 --> 00:41:41,600
It's in here somewhere.

826
00:41:42,700 --> 00:41:43,300
Let's see.

827
00:41:43,300 --> 00:41:48,100
There it is right and so if you were doing this here, what I'd like to

828
00:41:48,100 --> 00:41:51,600
do is make it so that we have more stuff than just those.

829
00:41:52,500 --> 00:41:55,800
And so I'm going to go ahead and say we've got something like

830
00:41:57,600 --> 00:41:59,800
you know, you 32 care.

831
00:42:00,100 --> 00:42:05,500
Range to like something like this.

832
00:42:06,100 --> 00:42:12,100
And then we do you know you know you know what I'm talking about this

833
00:42:12,100 --> 00:42:12,900
sort of thing.

834
00:42:17,900 --> 00:42:18,400
Right?

835
00:42:19,200 --> 00:42:24,900
Just making a little thing so I can output a bunch of ranges of

836
00:42:24,900 --> 00:42:25,500
characters.

837
00:42:25,500 --> 00:42:29,800
So we don't have any punctuation in there, but, you know, we could

838
00:42:29,800 --> 00:42:33,600
look at the ASCII table and see ASCII table.

839
00:42:36,100 --> 00:42:39,500
And if we look in here, right, the ASCII table is of course the we've

840
00:42:39,500 --> 00:42:41,000
talked about it multiple times in the Stream.

841
00:42:41,000 --> 00:42:44,300
It's basically a numeric table that says, what the numbers are that,

842
00:42:44,300 --> 00:42:46,500
correspond to the letters, right?

843
00:42:46,800 --> 00:42:48,300
Um, that we care about.

844
00:42:48,300 --> 00:42:51,000
And so, if you take a look in here, you can see that like, we'd really

845
00:42:51,000 --> 00:42:53,100
don't care about most of this stuff.

846
00:42:53,800 --> 00:42:57,400
We don't need Carriage returns or cancels, or file separators, or

847
00:42:57,400 --> 00:42:59,200
whatever these things are, who knows?

848
00:43:00,200 --> 00:43:02,400
All we really need is this stuff over here.

849
00:43:03,500 --> 00:43:08,100
And so if you take a look at what these are like 33 so you know

850
00:43:08,100 --> 00:43:13,600
exclamation point if you look from exclamation point honestly we

851
00:43:13,600 --> 00:43:16,600
probably just want everything that's in there all the way up to

852
00:43:16,700 --> 00:43:17,500
2 tilde.

853
00:43:17,700 --> 00:43:20,800
So what I probably could do is I probably could just not even bother

854
00:43:21,000 --> 00:43:23,200
and just do that, right?

855
00:43:24,100 --> 00:43:25,400
And that's probably fine.

856
00:43:27,100 --> 00:43:29,700
So let's give it a shot and see how that works.

857
00:43:30,500 --> 00:43:31,800
Hopefully it works.

858
00:43:31,800 --> 00:43:32,400
Okay.

859
00:43:32,800 --> 00:43:38,500
And so if I run test asset Builder on this, presumably now we'll get a

860
00:43:38,500 --> 00:43:39,600
little more lettering.

861
00:43:39,900 --> 00:43:40,700
There we go.

862
00:43:41,600 --> 00:43:43,300
You can see it all nice there.

863
00:43:44,100 --> 00:43:47,000
And yeah that's exactly what we wanted.

864
00:43:53,500 --> 00:43:54,600
Debug cycle count.

865
00:43:54,600 --> 00:43:59,800
So for space we don't have space now I don't know that we want to

866
00:43:59,800 --> 00:44:02,700
actually store a glyph for space because we know that it's not there.

867
00:44:03,200 --> 00:44:06,200
So I think probably what we want to do is actually just special case

868
00:44:06,200 --> 00:44:10,300
space because we don't need to ever actually draw it, right?

869
00:44:10,600 --> 00:44:14,700
So that seems like what we would want to do is something more like

870
00:44:14,700 --> 00:44:15,300
this.

871
00:44:20,000 --> 00:44:25,400
You know, and that way we, you know, actually get spaces in there

872
00:44:25,400 --> 00:44:25,900
properly.

873
00:44:27,200 --> 00:44:28,100
So there we go.

874
00:44:29,800 --> 00:44:32,100
We've we've got

875
00:44:33,600 --> 00:44:34,300
Some funds.

876
00:44:35,700 --> 00:44:36,800
So next thing is next.

877
00:44:37,500 --> 00:44:41,000
Let's move that guy up to the corner, which is something we wanted.

878
00:44:41,000 --> 00:44:44,000
And then I think we'll be ready to start talking about font metrics

879
00:44:44,000 --> 00:44:47,800
because there's a bunch of things as you've already seen that, we

880
00:44:47,800 --> 00:44:51,200
would want to fix if we were trying to make this font output actually

881
00:44:51,200 --> 00:44:51,900
look nice.

882
00:44:52,700 --> 00:44:54,800
So what do we want to do here?

883
00:44:55,700 --> 00:44:58,200
First of all, like I said, got to move it up to the corner so in order

884
00:44:58,200 --> 00:44:59,500
to move it up to the corner I need

885
00:45:00,000 --> 00:45:03,900
Of initializing at X and at y, to actually be something up in the

886
00:45:03,900 --> 00:45:07,900
corner and that sort of that to me suggests that, the debug reset

887
00:45:07,900 --> 00:45:13,100
wants to go up at the top, right, because that's sort of where it

888
00:45:13,100 --> 00:45:15,800
would, it get where it would actually set that up, right?

889
00:45:16,100 --> 00:45:20,600
So, somewhere in here, it would do that and maybe we include sort of,

890
00:45:20,600 --> 00:45:22,100
with, that debug reset.

891
00:45:22,300 --> 00:45:23,900
We sort of include

892
00:45:27,400 --> 00:45:30,100
Orthographic in there, right?

893
00:45:30,300 --> 00:45:34,500
And so what that would do is it would take maybe that buffer width and

894
00:45:34,500 --> 00:45:35,500
height, right?

895
00:45:35,500 --> 00:45:38,100
So we'd have with it the the width.

896
00:45:40,800 --> 00:45:42,300
And the height like so.

897
00:45:43,000 --> 00:45:44,100
And

898
00:45:45,700 --> 00:45:51,400
That would give us probably buffer with buffer height.

899
00:45:52,000 --> 00:45:54,400
What the information is that we actually need to move things to the

900
00:45:54,400 --> 00:45:55,900
corner as well, right?

901
00:45:55,900 --> 00:46:00,000
Because if we do that orthographic, we now know that this is the width

902
00:46:00,000 --> 00:46:00,700
and height of the thing.

903
00:46:00,700 --> 00:46:03,200
And we know that this is the m 2 pixels, right?

904
00:46:03,400 --> 00:46:05,700
So what we could do is we can set at, why, right?

905
00:46:05,700 --> 00:46:08,000
If we do m 2 pixels,

906
00:46:10,500 --> 00:46:13,100
In fact, when you think about it, m, 2 pixels.

907
00:46:13,200 --> 00:46:18,400
If we just set that to 1 m is really not M, it's World units, right?

908
00:46:18,400 --> 00:46:21,900
It's just the units were passing in our stuff as which happens to be M

909
00:46:21,900 --> 00:46:22,300
everywhere.

910
00:46:22,300 --> 00:46:23,700
So that's why we call it m 2 pixels.

911
00:46:24,100 --> 00:46:28,000
But we could say that we just wanted pixels to pixels, right?

912
00:46:28,600 --> 00:46:30,300
So we could just set this to 1.

913
00:46:31,100 --> 00:46:34,500
Then we know that the screen is with wide and we start at the center.

914
00:46:34,600 --> 00:46:38,300
So if we wanted to go up to the top, right, it'd be pretty trivial.

915
00:46:38,900 --> 00:46:42,300
Just do like - half the height, right?

916
00:46:45,500 --> 00:46:46,300
Seems pretty simple.

917
00:46:47,500 --> 00:46:50,300
And we could also do a thing here, where we said like left Edge,

918
00:46:51,000 --> 00:46:51,500
right?

919
00:46:52,400 --> 00:46:54,200
And left Edge, we could set as well.

920
00:46:55,000 --> 00:46:56,500
I don't know why I'm bothering set these 20.

921
00:46:56,500 --> 00:47:01,600
There's no point in that, but you can imagine doing left edge here and

922
00:47:01,900 --> 00:47:05,800
and left Edge is what x would get initialized to.

923
00:47:05,800 --> 00:47:07,600
So we can that would allow us to move it as well.

924
00:47:07,600 --> 00:47:08,800
So let's let's take a look at this.

925
00:47:08,800 --> 00:47:10,000
Let's get this working first.

926
00:47:12,100 --> 00:47:13,500
Where is my text?

927
00:47:15,100 --> 00:47:19,900
Where's my text of course the scale is totally going to be wrong now,

928
00:47:23,400 --> 00:47:24,000
right?

929
00:47:24,200 --> 00:47:27,900
Because if m 2 pixels is 1, then it's the like a single letter is

930
00:47:27,900 --> 00:47:30,200
going to be like huge right?

931
00:47:33,700 --> 00:47:34,500
Is that correct?

932
00:47:36,000 --> 00:47:37,600
Meters to pixels.

933
00:47:40,700 --> 00:47:41,200
So,

934
00:47:43,200 --> 00:47:45,400
Assuming we actually wrote the code right in the renderer.

935
00:47:49,500 --> 00:47:54,200
right, so if we have M to pixels,

936
00:47:55,500 --> 00:47:56,100
Right.

937
00:47:56,300 --> 00:47:58,900
Then this m is what we're inputting things.

938
00:47:58,900 --> 00:47:59,400
As

939
00:48:00,600 --> 00:48:05,900
So if we said that we wanted something to be 1.0 high, right then what

940
00:48:05,900 --> 00:48:08,200
that means is it would be one pixel High.

941
00:48:09,700 --> 00:48:12,800
So I'm assuming that what that means is that our scale would now be

942
00:48:12,800 --> 00:48:13,500
drastically.

943
00:48:14,000 --> 00:48:14,600
Small.

944
00:48:15,100 --> 00:48:18,400
So we would actually need our scale to be much, much bigger than it

945
00:48:18,400 --> 00:48:19,700
was before, right?

946
00:48:21,300 --> 00:48:23,200
In order to make it the right size.

947
00:48:25,100 --> 00:48:27,500
First, we didn't actually see anything, so that's not a good sign.

948
00:48:28,600 --> 00:48:32,300
I also make it so that we're not actually initializing at wide take

949
00:48:32,500 --> 00:48:34,100
first things first, right?

950
00:48:35,900 --> 00:48:36,200
Yeah.

951
00:48:38,700 --> 00:48:42,600
So, there is everything and I want to also see, I'm going to lean on

952
00:48:42,600 --> 00:48:44,400
the loop live coding, a little bit here.

953
00:48:44,800 --> 00:48:48,700
I just want to see what happens when we change this scale, right?

954
00:48:49,000 --> 00:48:51,700
So if I change the scale, does that do anything?

955
00:48:52,400 --> 00:48:53,000
It does.

956
00:48:54,000 --> 00:48:54,900
So that's good.

957
00:48:58,000 --> 00:48:59,200
However, oddly it.

958
00:49:02,000 --> 00:49:03,200
It doesn't seem.

959
00:49:05,800 --> 00:49:09,400
Like, how is it possible that it goes away and then comes back?

960
00:49:10,200 --> 00:49:11,400
That's a bit weird, right?

961
00:49:11,500 --> 00:49:12,200
Wouldn't you say?

962
00:49:21,600 --> 00:49:24,800
Although, I suppose the loop live coding because it's a global.

963
00:49:26,700 --> 00:49:30,600
We can't actually use the loop live coding for stuff in a global.

964
00:49:31,700 --> 00:49:34,000
So that's mmm-hmm.

965
00:49:38,300 --> 00:49:38,900
But there we go.

966
00:49:38,900 --> 00:49:40,100
So it does Scout properly.

967
00:49:41,600 --> 00:49:43,100
So, I wonder if we can.

968
00:49:44,600 --> 00:49:47,000
it wouldn't be too hard to just kind of

969
00:49:52,000 --> 00:49:54,200
To move that around, right?

970
00:49:56,200 --> 00:49:59,400
It would actually it would be relatively straightforward for us to fix

971
00:49:59,400 --> 00:49:59,900
that.

972
00:50:00,400 --> 00:50:01,700
And I feel like we should.

973
00:50:02,700 --> 00:50:04,700
And the other thing that I was going to say here.

974
00:50:04,800 --> 00:50:08,400
So I was kind of leading up to wrapping these guys.

975
00:50:08,400 --> 00:50:13,500
So, fix this for looped Live code editing, because I'd like to do that

976
00:50:13,500 --> 00:50:15,400
as well, and it's pretty simple for us to do.

977
00:50:15,400 --> 00:50:17,700
So, I think we want to do that as well, but I won't do that quite yet,

978
00:50:17,700 --> 00:50:20,100
because that's kind of leading up to some things there that I want to

979
00:50:20,100 --> 00:50:20,300
do.

980
00:50:20,300 --> 00:50:21,400
And so I don't want to

981
00:50:21,700 --> 00:50:25,600
Disrupt that train point being scale works fine now, so that's good.

982
00:50:25,700 --> 00:50:29,100
We're going to leave it at 20, which I believe would be about 20

983
00:50:29,100 --> 00:50:33,300
pixels right tall and that looks sort of, right?

984
00:50:33,400 --> 00:50:36,600
So what I want to do now is I want to figure out a way to move at why

985
00:50:36,600 --> 00:50:37,500
up properly.

986
00:50:38,300 --> 00:50:42,900
So, when it gets reset, it would actually use again, half the height

987
00:50:43,100 --> 00:50:44,600
and move that up to the top.

988
00:50:44,600 --> 00:50:46,500
And that way when it comes, it would move down.

989
00:50:46,700 --> 00:50:51,400
Now, I guess we're actually moving up that far so something like this.

990
00:50:53,500 --> 00:50:55,000
And there we go up there.

991
00:50:55,000 --> 00:50:58,400
Now, of course it's a little bit off the screen because we're moving,

992
00:50:58,400 --> 00:50:59,900
half the height and there were drawing at the

993
00:51:00,000 --> 00:51:01,100
Detroit of that thing.

994
00:51:01,800 --> 00:51:04,900
So really it's going to be that you know, plus the font scale or

995
00:51:04,900 --> 00:51:06,300
something like that, right?

996
00:51:06,600 --> 00:51:09,300
So if I have a thing up here where I was like, Global variable font

997
00:51:09,300 --> 00:51:09,900
scale,

998
00:51:12,200 --> 00:51:16,800
like so and I say, you know, font scale equals 20

999
00:51:18,200 --> 00:51:19,100
Something like this.

1000
00:51:19,700 --> 00:51:23,900
Then I would want to kind of move down by half the font scale as well,

1001
00:51:24,200 --> 00:51:24,700
right?

1002
00:51:25,600 --> 00:51:29,900
And that would line me up with where I wanted to be.

1003
00:51:34,800 --> 00:51:37,100
Okay, so there we go.

1004
00:51:37,100 --> 00:51:41,200
Now we're at the top of the screen like we wanted to be and similarly

1005
00:51:41,200 --> 00:51:44,100
I kind of want to fix that left Edge nonsense, but this is going to be

1006
00:51:44,100 --> 00:51:45,900
the exact same thing, right?

1007
00:51:46,200 --> 00:51:50,100
It's just going to be subtracting a way the width to get us to the

1008
00:51:50,100 --> 00:51:54,400
edge and then adding back in like one characters Worth or whatever to

1009
00:51:54,400 --> 00:51:58,700
get us to the left Edge and so then, you know, we should be in the

1010
00:51:58,700 --> 00:52:01,100
right place or not.

1011
00:52:02,600 --> 00:52:03,800
Oh, what's that?

1012
00:52:03,800 --> 00:52:05,700
Why I met left Edge.

1013
00:52:05,900 --> 00:52:06,400
There we go.

1014
00:52:10,200 --> 00:52:14,700
Okay, so now we've got roughly what I wanted happening, right?

1015
00:52:14,700 --> 00:52:18,300
We've got it lined up where we want it and we've got it printing out

1016
00:52:18,600 --> 00:52:24,200
where we wanted, but there's a ton of things that we haven't, but we

1017
00:52:24,200 --> 00:52:26,300
don't have that we want, right?

1018
00:52:26,500 --> 00:52:29,300
So even before we talk about how to get like the numbers and stuff in

1019
00:52:29,300 --> 00:52:31,400
here, we're ready to start talking about.

1020
00:52:31,400 --> 00:52:34,400
The font part is a number of things that you can see.

1021
00:52:36,700 --> 00:52:39,100
I think I might leave them until tomorrow.

1022
00:52:39,300 --> 00:52:40,100
To point out.

1023
00:52:40,200 --> 00:52:42,500
Because since tomorrow is the day when we'll be addressing all of

1024
00:52:42,500 --> 00:52:44,400
them, it seems a little weird for me to point them all out.

1025
00:52:44,400 --> 00:52:47,800
Now, but point being, you can see like lowercase letters are as tall

1026
00:52:47,800 --> 00:52:51,000
as capital letters, It's mono spaced.

1027
00:52:51,100 --> 00:52:54,300
So things that are like small, you know, at the same amount of spacing

1028
00:52:54,300 --> 00:52:58,800
in between them, all sorts of stuff is not what we would want here.

1029
00:52:59,500 --> 00:53:02,800
So even though we're, you know, we're getting a little bit further,

1030
00:53:02,800 --> 00:53:05,500
there's a bunch of stuff that we want to do, and so tomorrow, we'll

1031
00:53:05,500 --> 00:53:09,100
start tackling those those metrics a little more specific.

1032
00:53:09,200 --> 00:53:11,800
We but hopefully now you've seen it's pretty straightforward how the

1033
00:53:11,800 --> 00:53:14,600
debug Tech stuff would actually work and off we go.

1034
00:53:14,900 --> 00:53:20,900
Now there's another thing here which is this is too slow for text at

1035
00:53:20,900 --> 00:53:21,700
the moment.

1036
00:53:22,700 --> 00:53:26,300
So we also want to think a little bit about the fact that calling this

1037
00:53:26,300 --> 00:53:30,600
get Matt best match bitmap from every time is not perhaps the best

1038
00:53:30,600 --> 00:53:31,200
idea.

1039
00:53:31,400 --> 00:53:34,900
And so that's something we want to think about as well, but that's

1040
00:53:34,900 --> 00:53:36,800
about it for today.

1041
00:53:36,800 --> 00:53:39,000
I think we're just about out of time.

1042
00:53:39,500 --> 00:53:42,300
So I'm going to go ahead and go to the Q&A because we're at a good

1043
00:53:42,300 --> 00:53:45,500
stopping point and tomorrow, we can tackle all of the stuff we

1044
00:53:45,500 --> 00:53:47,900
actually want to do to turn this stuff.

1045
00:53:48,100 --> 00:53:51,100
Which as you can see, is just me writing the the simplest possible

1046
00:53:51,100 --> 00:53:53,200
thing and getting it to the point where it's working.

1047
00:53:53,400 --> 00:53:57,400
Turn this stuff into a more useful system, first of all, addressing

1048
00:53:57,400 --> 00:53:57,900
some of that.

1049
00:53:57,900 --> 00:53:59,900
But also, all of these things in here, there's

1050
00:54:00,000 --> 00:54:03,500
These hard-coded constants, how do we start moving those into the font

1051
00:54:03,500 --> 00:54:05,900
system so that we can get that information from the fonts, right?

1052
00:54:05,900 --> 00:54:06,800
That's what we doing tomorrow.

1053
00:54:06,800 --> 00:54:12,200
As the next step in our font metrics exploration, but I'll go to ahead

1054
00:54:12,200 --> 00:54:13,100
and go to the Q&A now.

1055
00:54:13,100 --> 00:54:16,500
So, if you have questions now would be a great time to ask me them,

1056
00:54:16,500 --> 00:54:22,000
put a q: in front of it, and I will be able to see it if you don't put

1057
00:54:22,000 --> 00:54:22,700
a coup in front of it.

1058
00:54:22,700 --> 00:54:23,000
Well,

1059
00:54:24,000 --> 00:54:26,600
It will be lost to the sands of time.

1060
00:54:34,900 --> 00:54:37,800
Colombian will you be addressing the subscript superscript?

1061
00:54:37,900 --> 00:54:41,400
N space m space at other types of space tomorrow as well.

1062
00:54:41,900 --> 00:54:43,000
Probably not.

1063
00:54:43,000 --> 00:54:44,700
So it's handmade here.

1064
00:54:44,700 --> 00:54:46,900
Will not really have any took typography in it.

1065
00:54:47,000 --> 00:54:48,900
It is not a typography kind of thing.

1066
00:54:50,100 --> 00:54:52,800
So we will not be doing any advanced typography like we won't be

1067
00:54:52,800 --> 00:54:55,800
caring about like whether the left and right double quotes lineup or

1068
00:54:55,800 --> 00:54:59,800
any of that sort of stuff that's happening that physically hard to do.

1069
00:55:00,200 --> 00:55:03,900
But it's not relevant because pretty much almost all the handmade

1070
00:55:03,900 --> 00:55:04,000
here.

1071
00:55:04,200 --> 00:55:06,200
Text is going to probably be debug text.

1072
00:55:06,300 --> 00:55:08,100
There's not going to be a lot of text in the game.

1073
00:55:09,100 --> 00:55:10,800
So if this game were about text,

1074
00:55:12,300 --> 00:55:16,400
well, you would want to spend a lot of time on your typography but

1075
00:55:16,400 --> 00:55:20,300
since we are not doing that we won't be I won't be writing any of

1076
00:55:20,300 --> 00:55:20,600
that.

1077
00:55:20,800 --> 00:55:23,900
However hopefully you can see just from what I've done so far.

1078
00:55:23,900 --> 00:55:27,400
There's no mystery to it if you want something that's going to be

1079
00:55:27,400 --> 00:55:30,500
subscript, well you just need to move it down, right?

1080
00:55:30,700 --> 00:55:33,500
And if you want it to be subscript in smaller, you move it down and

1081
00:55:33,500 --> 00:55:35,400
you change the scale, right?

1082
00:55:35,700 --> 00:55:40,100
So, there isn't like, there isn't like anything magical about fonts.

1083
00:55:40,100 --> 00:55:42,000
They're just bitmaps like everything else.

1084
00:55:42,100 --> 00:55:45,600
Put your drawing to the screen and you can manipulate them exactly the

1085
00:55:45,600 --> 00:55:46,100
same way.

1086
00:55:46,300 --> 00:55:49,300
And so, if you want different space sizes, different Dash sizes, that

1087
00:55:49,300 --> 00:55:52,000
sort of stuff, there's no mystery to it, that it's just putting

1088
00:55:52,000 --> 00:55:53,200
bitmaps next to each other.

1089
00:55:53,800 --> 00:55:57,100
And so really, the only thing that differentiates fonts from

1090
00:55:57,100 --> 00:55:59,900
everything else is the lookups that you have to do because you're

1091
00:55:59,900 --> 00:56:03,500
trying to translate some kind of encoding of like streams of them.

1092
00:56:03,500 --> 00:56:05,500
So there's like the Unicode to glyph thing.

1093
00:56:05,500 --> 00:56:06,800
Like there's that, right?

1094
00:56:07,200 --> 00:56:10,400
And then the meta information that you need about how you want to do

1095
00:56:10,400 --> 00:56:11,100
that lining up.

1096
00:56:11,100 --> 00:56:11,900
Like where should a

1097
00:56:12,000 --> 00:56:15,900
Per strip character Go versus absurd character, you know how much

1098
00:56:15,900 --> 00:56:17,600
current and should there be between two letters.

1099
00:56:17,900 --> 00:56:19,700
But otherwise, there's no mystery to it.

1100
00:56:19,700 --> 00:56:22,200
You can just get in there and any font effect you want.

1101
00:56:22,200 --> 00:56:23,700
It's just like writing anything else.

1102
00:56:23,700 --> 00:56:24,500
We've written on him in here.

1103
00:56:24,500 --> 00:56:26,200
There's nothing magic about fonts.

1104
00:56:33,500 --> 00:56:34,200
Spring Cruiser.

1105
00:56:34,200 --> 00:56:36,400
Will you add edges to the font?

1106
00:56:37,800 --> 00:56:39,300
You mean like it like an outline?

1107
00:56:44,400 --> 00:56:49,400
I wasn't planning on it, since I don't know that we would want that

1108
00:56:49,400 --> 00:56:51,000
for anything in particular, but

1109
00:56:52,500 --> 00:56:53,500
Is that what you mean by edges?

1110
00:56:53,500 --> 00:56:56,200
I'm not sure what you mean by edges actually.

1111
00:57:01,100 --> 00:57:04,400
What's the difference between making a game and C++ and making a game

1112
00:57:04,400 --> 00:57:05,200
in Java?

1113
00:57:06,100 --> 00:57:09,400
Well C++ is a language for writing code.

1114
00:57:09,400 --> 00:57:15,600
That gets compiled into actual x64 Assembly Language or machine code I

1115
00:57:15,600 --> 00:57:20,200
should say and so you know you're running a game directly on the

1116
00:57:20,200 --> 00:57:22,900
hardware when you write in C plus plus Java.

1117
00:57:22,900 --> 00:57:27,000
Is a language that compiles to a virtual machine, a virtual byte code,

1118
00:57:27,200 --> 00:57:29,000
so it never actually does that.

1119
00:57:29,600 --> 00:57:30,400
And it's about

1120
00:57:30,600 --> 00:57:32,100
Telling the virtual machine what to do.

1121
00:57:32,600 --> 00:57:36,100
And then typically because that's, you know, obviously very slow.

1122
00:57:36,100 --> 00:57:39,200
Typically, what happens in Java is, you then have a thing called a

1123
00:57:39,200 --> 00:57:45,900
jit, which is a thing that takes that that code and turns it into like

1124
00:57:46,000 --> 00:57:49,500
x64 assembly, you know, when you're actually trying to run the game

1125
00:57:49,500 --> 00:57:50,300
and that sort of stuff.

1126
00:57:51,800 --> 00:57:54,400
And I mean you probably could do pre compiled Java as well, right?

1127
00:57:54,400 --> 00:57:57,400
If you wanted to, that's not typically how to use, but you could do it

1128
00:57:57,400 --> 00:57:57,900
that way.

1129
00:57:58,600 --> 00:58:00,200
Of course, Java doesn't actually allow

1130
00:58:00,600 --> 00:58:01,900
Memory access and stuff as much.

1131
00:58:01,900 --> 00:58:07,100
It's more about, you know, it's more about having references to things

1132
00:58:07,100 --> 00:58:09,400
and this sort of stuff and it doesn't, it's not really about sort of

1133
00:58:09,400 --> 00:58:10,900
manipulating bits at the low level.

1134
00:58:11,100 --> 00:58:13,200
That's not what they wanted you to do with it.

1135
00:58:13,900 --> 00:58:17,200
Although again, like everything else, there's always some way

1136
00:58:17,200 --> 00:58:19,100
eventually to make it happen if you really wanted to.

1137
00:58:20,100 --> 00:58:24,200
So, making a game in Java is mostly, it's usually something reserved

1138
00:58:24,200 --> 00:58:28,100
more for people who are trying to do, sort of less low-level

1139
00:58:28,100 --> 00:58:28,800
programming.

1140
00:58:30,700 --> 00:58:32,500
Even though, you know, honestly, I don't know.

1141
00:58:33,400 --> 00:58:36,200
I don't want to disparage Java too much because I don't program in

1142
00:58:36,200 --> 00:58:39,900
Java and so you know, I probably shouldn't do something that I don't

1143
00:58:39,900 --> 00:58:40,400
use.

1144
00:58:41,200 --> 00:58:45,500
But on the whole honestly I don't really know what the point is of is

1145
00:58:45,500 --> 00:58:47,100
it's not a good high level language.

1146
00:58:47,100 --> 00:58:51,300
It's higher level than you know, see but it's not a good higher level,

1147
00:58:51,500 --> 00:58:52,400
it's just arbitrary.

1148
00:58:52,400 --> 00:58:52,800
It's like it.

1149
00:58:52,800 --> 00:58:56,400
Introduces, this annoying VM that doesn't do anything good for you and

1150
00:58:57,200 --> 00:58:59,200
it doesn't have very powerful language constructs.

1151
00:58:59,200 --> 00:58:59,700
So

1152
00:59:00,700 --> 00:59:03,500
you know, I don't super understand people's decision.

1153
00:59:03,500 --> 00:59:05,800
When they decide to program in Java doesn't make a whole lot of sense

1154
00:59:05,800 --> 00:59:06,200
to me.

1155
00:59:06,600 --> 00:59:09,300
I would say if you're going to go with a high-level language, I pick

1156
00:59:09,300 --> 00:59:10,000
something else.

1157
00:59:10,100 --> 00:59:12,400
You know, there are better higher level languages out there, I would

1158
00:59:12,400 --> 00:59:12,900
think.

1159
00:59:13,600 --> 00:59:16,700
But for me, I like the low the lower level, the better usually.

1160
00:59:16,700 --> 00:59:19,700
So I prefer C and C++ because they give me a lot more control over

1161
00:59:19,700 --> 00:59:20,400
what's going on.

1162
00:59:20,600 --> 00:59:24,500
And I don't have to worry about what the, you know, how the pipeline

1163
00:59:24,500 --> 00:59:29,600
goes from like my Java code to a VM to the jit to the execution, like

1164
00:59:29,600 --> 00:59:30,400
none of that.

1165
00:59:30,600 --> 00:59:31,300
I'm in control.

1166
00:59:31,300 --> 00:59:34,600
I don't have to worry about all these sort of other things that I

1167
00:59:34,600 --> 00:59:35,800
don't have control about.

1168
00:59:40,700 --> 00:59:44,100
Bryan crews are yes outlines I wasn't expecting to add outlines to the

1169
00:59:44,100 --> 00:59:44,600
fonts?

1170
00:59:46,200 --> 00:59:46,600
Is there?

1171
00:59:47,200 --> 00:59:49,800
I mean if you want to add outlines to the fonts then your it's just a

1172
00:59:49,800 --> 00:59:51,200
bit would be a bitmap operation.

1173
00:59:51,200 --> 00:59:55,400
You'd probably do there or you'd have to go do your own truetype like

1174
00:59:55,400 --> 00:59:59,100
line rasterization which you could hack into like sdb truetype if

1175
00:59:59,100 --> 00:59:59,800
that's what you really wanted.

1176
01:00:06,900 --> 01:00:07,400
Robbie.

1177
01:00:07,400 --> 01:00:08,700
Hi Casey question on the array.

1178
01:00:08,700 --> 01:00:10,200
You typed and pulled out again.

1179
01:00:10,400 --> 01:00:11,300
You 32 care.

1180
01:00:11,300 --> 01:00:11,800
Brackets.

1181
01:00:11,800 --> 01:00:14,900
Brackets to is this an array with pairs of you 32s?

1182
01:00:14,900 --> 01:00:15,700
Yes, it is.

1183
01:00:16,500 --> 01:00:19,300
I would have expected, you 32 brackets, brackets 0.

1184
01:00:19,500 --> 01:00:20,500
So in see,

1185
01:00:23,400 --> 01:00:25,900
You were talking about this part right here, then I realized I didn't

1186
01:00:25,900 --> 01:00:33,300
have to do it, but in see the way that you do an array or a 2d array,

1187
01:00:33,500 --> 01:00:34,000
right?

1188
01:00:34,400 --> 01:00:38,500
Is you keep stacking brackets on.

1189
01:00:38,600 --> 01:00:40,700
In fact, you can do as many as you want.

1190
01:00:41,800 --> 01:00:42,300
Right?

1191
01:00:43,200 --> 01:00:48,100
And the way that they work, is it starts with the furthest one out.

1192
01:00:48,200 --> 01:00:52,800
So for example, if I have this many and I did something like this,

1193
01:00:57,200 --> 01:00:57,700
Right?

1194
01:00:57,800 --> 01:01:00,500
Although you wouldn't have an array of one but you get the idea.

1195
01:01:01,400 --> 01:01:06,700
So if I had something like this, what that means is the first array in

1196
01:01:06,700 --> 01:01:09,300
the, the rightmost array Index.

1197
01:01:09,400 --> 01:01:09,700
Right.

1198
01:01:09,700 --> 01:01:13,600
This one right here is the one that increments in memory by the

1199
01:01:13,600 --> 01:01:14,600
smallest amount.

1200
01:01:14,700 --> 01:01:19,100
So, effectively, if you were to look at these you 32s, well, heck I

1201
01:01:19,100 --> 01:01:19,800
can just show you

1202
01:01:23,500 --> 01:01:25,900
So in here, I'm going to make this array.

1203
01:01:27,300 --> 01:01:27,900
Right?

1204
01:01:28,300 --> 01:01:29,500
And I'm going to do some stuff to it.

1205
01:01:29,500 --> 01:01:34,900
So here, let's clear it and then I'm going to do some addressing into

1206
01:01:34,900 --> 01:01:35,200
it.

1207
01:01:41,400 --> 01:01:41,900
Right.

1208
01:01:54,800 --> 01:01:59,200
Okay, so I'm going to look at in each case.

1209
01:02:00,300 --> 01:02:03,600
I'm just going to go one unit along each of these guys.

1210
01:02:04,300 --> 01:02:04,800
Right?

1211
01:02:05,600 --> 01:02:06,700
Does that seem reasonable?

1212
01:02:07,800 --> 01:02:09,300
And and there we go.

1213
01:02:09,600 --> 01:02:11,600
So in fact, I guess I could just do it this way.

1214
01:02:12,900 --> 01:02:13,400
A

1215
01:02:15,500 --> 01:02:23,300
B, c, d, e f, right?

1216
01:02:25,100 --> 01:02:28,100
So, the way this works in see, is this is the the ones are closest

1217
01:02:28,100 --> 01:02:30,100
together, is that the rightmost edge?

1218
01:02:30,200 --> 01:02:31,800
And this is the ones that are farthest.

1219
01:02:31,800 --> 01:02:34,000
Apart that index will move you the furthest apart.

1220
01:02:34,100 --> 01:02:39,000
So, this is like saying I have an array of seven arrays of six arrays

1221
01:02:39,000 --> 01:02:46,000
of five arrays of for arrays of three, arrays of to you went 32s all

1222
01:02:46,000 --> 01:02:48,200
the way back to the other end, right?

1223
01:02:49,700 --> 01:02:54,300
And so, if I compile that guy down and I set a breakpoint there,

1224
01:02:54,500 --> 01:02:57,700
R at the debug text line.

1225
01:03:02,500 --> 01:03:05,900
We can see the array in memory.

1226
01:03:10,200 --> 01:03:10,700
Happens.

1227
01:03:10,700 --> 01:03:14,700
Like so, oops that didn't work.

1228
01:03:14,900 --> 01:03:15,500
Come on.

1229
01:03:18,000 --> 01:03:22,200
Why, why will you not copy copy my value?

1230
01:03:23,700 --> 01:03:24,400
Copy it.

1231
01:03:25,300 --> 01:03:27,700
I do not know why you will not copy my value.

1232
01:03:28,300 --> 01:03:28,800
Fine.

1233
01:03:28,800 --> 01:03:30,900
Oh, X31 5980.

1234
01:03:31,200 --> 01:03:31,700
There you go.

1235
01:03:31,700 --> 01:03:33,600
Happy now fantastic.

1236
01:03:34,500 --> 01:03:39,800
All right, so if you look at me writing into this guy, this will write

1237
01:03:39,800 --> 01:03:41,700
in an a to that location.

1238
01:03:43,400 --> 01:03:43,800
Know why?

1239
01:03:43,800 --> 01:03:45,200
That did not show up.

1240
01:03:46,100 --> 01:03:47,000
You did actually go there.

1241
01:03:47,000 --> 01:03:48,800
Did you not find a zero?

1242
01:03:50,000 --> 01:03:52,000
There's my a right right there.

1243
01:03:52,900 --> 01:03:54,400
So these are you 32s?

1244
01:03:54,400 --> 01:03:54,800
You know what?

1245
01:03:54,800 --> 01:03:57,600
I should probably do them as, uh, just so it's a little easier to see.

1246
01:03:58,100 --> 01:03:58,500
There we go.

1247
01:04:02,200 --> 01:04:02,700
All right.

1248
01:04:03,600 --> 01:04:05,000
All right, one more time.

1249
01:04:05,300 --> 01:04:06,100
How come I wasn't?

1250
01:04:06,100 --> 01:04:08,400
How come I'm not like what's going on there?

1251
01:04:08,600 --> 01:04:10,000
Does anyone know why it's doing that?

1252
01:04:10,000 --> 01:04:11,800
But I can't drag that value down.

1253
01:04:12,300 --> 01:04:13,300
It's weird, right?

1254
01:04:14,400 --> 01:04:17,900
So there's my a and you can see that I have a 1 here, so if this was a

1255
01:04:17,900 --> 01:04:19,500
0 it would have put it right here.

1256
01:04:19,700 --> 01:04:23,800
But because I moved, I said move one, you know on the lowest index it

1257
01:04:23,800 --> 01:04:24,400
moved it.

1258
01:04:24,400 --> 01:04:25,300
One bite over.

1259
01:04:25,400 --> 01:04:28,000
So these are basically sequential right the lowest index.

1260
01:04:28,000 --> 01:04:31,000
Is sequential the next up.

1261
01:04:31,000 --> 01:04:31,900
The next highest in.

1262
01:04:32,100 --> 01:04:36,700
Next up is going to be by however many this this one was, right?

1263
01:04:36,700 --> 01:04:38,100
So this is 2, bytes each.

1264
01:04:38,100 --> 01:04:41,800
So moving one on this guy will move two bytes each time, right?

1265
01:04:41,800 --> 01:04:46,000
So now we would expect it to move to B forward, which would be like

1266
01:04:46,000 --> 01:04:48,500
over here, right next sense.

1267
01:04:49,000 --> 01:04:52,500
Now, this one's going to move three times to B for it, because it's

1268
01:04:52,500 --> 01:04:55,400
moving three arrays of to forward.

1269
01:04:55,400 --> 01:04:56,200
So that's going to move.

1270
01:04:56,200 --> 01:04:58,900
Six forward, just buy an index of one here.

1271
01:04:58,900 --> 01:04:59,100
Right?

1272
01:04:59,100 --> 01:05:01,900
1 2 3 4 5 6, right?

1273
01:05:02,100 --> 01:05:02,800
And there you go.

1274
01:05:04,000 --> 01:05:05,100
And then, let's see.

1275
01:05:05,700 --> 01:05:07,000
Where is this guy?

1276
01:05:07,000 --> 01:05:08,000
This is one.

1277
01:05:08,100 --> 01:05:11,500
So, this is going to be five arrays of for arrays of three, arrays of

1278
01:05:11,500 --> 01:05:11,900
to.

1279
01:05:12,000 --> 01:05:12,900
So that's 5 times.

1280
01:05:12,900 --> 01:05:15,100
4 is 20, right?

1281
01:05:16,900 --> 01:05:17,900
That is the one we're doing, right?

1282
01:05:17,900 --> 01:05:18,300
Yeah.

1283
01:05:18,600 --> 01:05:21,500
So 5 arrays of 4 is 20.

1284
01:05:22,000 --> 01:05:24,800
Times 3 is 60 times 2 is 120.

1285
01:05:25,100 --> 01:05:27,100
I don't even want to count that's going to be down here somewhere,

1286
01:05:27,300 --> 01:05:27,800
right?

1287
01:05:29,100 --> 01:05:29,600
In theory.

1288
01:05:35,300 --> 01:05:41,300
See, 5 times 4 times, 3 times 2 is 120.

1289
01:05:42,300 --> 01:05:49,700
So where is the array at its at a zero that seems 1 2 3 4 5 6 7 8 9

1290
01:05:49,700 --> 01:05:51,100
10, 11 12.

1291
01:05:51,200 --> 01:05:52,400
That doesn't seem right.

1292
01:05:54,400 --> 01:05:56,600
Oh, I'm off by one.

1293
01:05:57,900 --> 01:05:59,600
Because of this thing I was Catholic.

1294
01:06:00,500 --> 01:06:03,900
I'm off by one, it's only the fourth one up.

1295
01:06:03,900 --> 01:06:04,800
Okay, good.

1296
01:06:04,800 --> 01:06:06,200
I was like, what's going on?

1297
01:06:06,500 --> 01:06:09,400
So it's 4 times 3 times 2 is all, it was, so that's it.

1298
01:06:09,400 --> 01:06:13,100
6 times 4 is 24, so that's totally fine right now.

1299
01:06:13,100 --> 01:06:15,300
It's the 120 that one should be down here.

1300
01:06:15,300 --> 01:06:15,900
There we go.

1301
01:06:16,700 --> 01:06:18,200
That could reasonably 120.

1302
01:06:18,200 --> 01:06:19,100
I could buy that.

1303
01:06:19,400 --> 01:06:22,700
And then this one's going to be 6 times, 5 times, 4 times, 3, times 2.

1304
01:06:22,700 --> 01:06:24,100
So who are you?

1305
01:06:24,100 --> 01:06:24,900
Who knows what that is?

1306
01:06:24,900 --> 01:06:26,400
Something way down there, right?

1307
01:06:29,200 --> 01:06:29,800
So, that's how those

1308
01:06:30,000 --> 01:06:31,600
Are red in general.

1309
01:06:31,600 --> 01:06:34,700
The way that you read a see declaration is pretty bizarre.

1310
01:06:36,000 --> 01:06:40,100
It's always go as far right as you can first until you hit a

1311
01:06:40,100 --> 01:06:42,200
parentheses or the end.

1312
01:06:42,200 --> 01:06:45,600
Go as far left as you can till you hit a parentheses or the end,

1313
01:06:46,000 --> 01:06:48,300
repeat this process, right?

1314
01:06:49,800 --> 01:06:52,200
I know what I said, sounds weird, but that's what it is.

1315
01:06:52,200 --> 01:06:58,300
It's go as far right as you can until you hit that.

1316
01:06:58,900 --> 01:06:59,900
Go as far.

1317
01:07:00,000 --> 01:07:04,400
Left as you can until you hit that, right?

1318
01:07:04,500 --> 01:07:05,300
That's how you read them.

1319
01:07:05,900 --> 01:07:11,400
So if I say array this, then I have well and we'll get things a little

1320
01:07:11,400 --> 01:07:12,000
simpler here.

1321
01:07:12,900 --> 01:07:17,700
If I say a ray that I've got an array of three arrays of to, and now,

1322
01:07:17,700 --> 01:07:19,600
I've hit the end, there's nothing left.

1323
01:07:19,600 --> 01:07:22,100
So imagine there's an imaginary parentheses at the end.

1324
01:07:23,700 --> 01:07:27,600
So an array of three arrays of to, then I start over going to the to

1325
01:07:27,600 --> 01:07:28,500
the left.

1326
01:07:28,900 --> 01:07:29,700
You eights.

1327
01:07:29,800 --> 01:07:36,500
So this is an array of three arrays of to uh right.

1328
01:07:36,700 --> 01:07:37,800
Start at the name.

1329
01:07:38,100 --> 01:07:40,800
Go, right, right, can't go right anymore.

1330
01:07:40,900 --> 01:07:42,000
Back to where I was.

1331
01:07:42,000 --> 01:07:46,200
Go to the left done, this can get very complicated and you can make

1332
01:07:46,200 --> 01:07:47,900
all kinds of ridiculous stuff.

1333
01:07:47,900 --> 01:07:50,000
For example, what is this?

1334
01:07:51,100 --> 01:07:51,900
Anybody know.

1335
01:07:53,700 --> 01:07:59,400
Well, it's an array of three arrays of to got the end pointers to you

1336
01:07:59,400 --> 01:08:00,900
eights, right?

1337
01:08:00,900 --> 01:08:01,800
So this

1338
01:08:03,200 --> 01:08:10,300
is an array of three array of to raise of two pointers to you ate,

1339
01:08:10,800 --> 01:08:11,400
right?

1340
01:08:12,200 --> 01:08:13,000
But what,

1341
01:08:14,200 --> 01:08:16,899
Is that anybody know?

1342
01:08:18,899 --> 01:08:21,600
Just do what I said, start in the name.

1343
01:08:22,899 --> 01:08:26,899
It's, you know, her a or I should say something like Foo.

1344
01:08:29,200 --> 01:08:30,200
Foo is.

1345
01:08:31,500 --> 01:08:33,899
So Foo is, is it an array?

1346
01:08:34,500 --> 01:08:35,300
Not yet.

1347
01:08:35,700 --> 01:08:38,000
Foo is I hit a parentheses?

1348
01:08:38,100 --> 01:08:39,600
So now I go backwards.

1349
01:08:39,800 --> 01:08:41,200
Foo is a pointer

1350
01:08:42,399 --> 01:08:44,300
Right now, I hit another parentheses.

1351
01:08:44,399 --> 01:08:48,700
So now I go to the right again, to an array of three.

1352
01:08:49,000 --> 01:08:52,100
Keep going to the right array of two.

1353
01:08:54,500 --> 01:08:57,700
And I hit the end, go back to beginning you Eights.

1354
01:09:00,500 --> 01:09:01,100
Right?

1355
01:09:01,899 --> 01:09:03,100
You want to make it more complicated?

1356
01:09:03,100 --> 01:09:04,300
Go ahead and make it more complicated.

1357
01:09:04,300 --> 01:09:05,600
Let's print the size this.

1358
01:09:07,300 --> 01:09:07,800
Right?

1359
01:09:08,899 --> 01:09:10,000
In fact we can make it even more.

1360
01:09:10,000 --> 01:09:11,600
Ridiculous, how about that?

1361
01:09:13,000 --> 01:09:13,800
How about this?

1362
01:09:15,700 --> 01:09:20,700
Right now, we've got Foo is hit the right, paren?

1363
01:09:21,200 --> 01:09:22,899
Go to the left, got the pointer.

1364
01:09:23,300 --> 01:09:25,899
Oops, come back.

1365
01:09:26,000 --> 01:09:26,800
What just happened?

1366
01:09:29,700 --> 01:09:30,700
What just happened?

1367
01:09:30,800 --> 01:09:31,399
Okay, there we go.

1368
01:09:32,300 --> 01:09:34,899
Mmm foo is go to the right.

1369
01:09:35,000 --> 01:09:35,700
Hit the prin.

1370
01:09:35,800 --> 01:09:37,800
Go to the left who is a pointer.

1371
01:09:40,899 --> 01:09:41,700
Hit this paren.

1372
01:09:41,700 --> 01:09:45,500
Go to the right to an array of three.

1373
01:09:46,399 --> 01:09:49,399
Hit the paren, go to the left, hit the print again.

1374
01:09:49,600 --> 01:09:54,000
I guess we have a redundant set of parentheses there that pair.

1375
01:09:54,000 --> 01:09:56,000
I guess doesn't really need to be there.

1376
01:09:56,300 --> 01:09:58,200
You get rid of that right?

1377
01:09:59,100 --> 01:10:01,000
Ture of three, hit the right paren.

1378
01:10:01,000 --> 01:10:04,000
Go back to the you 83 you ate.

1379
01:10:07,100 --> 01:10:10,200
And this whole thing is an array of too.

1380
01:10:12,600 --> 01:10:13,100
Right?

1381
01:10:13,100 --> 01:10:15,500
There's two of that whole thing.

1382
01:10:15,900 --> 01:10:16,600
So,

1383
01:10:18,700 --> 01:10:21,200
Is an array of two.

1384
01:10:24,700 --> 01:10:27,700
Pointers to arrays of 3.

1385
01:10:27,700 --> 01:10:28,400
U 8.

1386
01:10:30,100 --> 01:10:30,800
Who knows?

1387
01:10:31,400 --> 01:10:32,600
Why would you have that?

1388
01:10:32,900 --> 01:10:36,600
I don't know, but you can have it if you want it, right?

1389
01:10:39,800 --> 01:10:42,000
So that's, you know, that's what that is.

1390
01:10:43,100 --> 01:10:43,800
Happy birthday.

1391
01:10:49,300 --> 01:10:50,800
Foo Undeclared identifier.

1392
01:10:51,300 --> 01:10:52,100
Are you talking about?

1393
01:11:00,900 --> 01:11:02,200
Why are you grumpy about that?

1394
01:11:03,200 --> 01:11:05,000
Pointer to an array of three.

1395
01:11:06,600 --> 01:11:08,200
Array of 2.

1396
01:11:17,500 --> 01:11:18,500
Why don't you like that?

1397
01:11:19,400 --> 01:11:20,900
Feel like I should be able to do that.

1398
01:11:20,900 --> 01:11:21,900
Maybe I can't.

1399
01:11:27,300 --> 01:11:28,800
I feel like I should be able to do that.

1400
01:11:30,200 --> 01:11:31,500
Maybe I actually can't.

1401
01:11:34,100 --> 01:11:38,000
This is not a variable declaration style, I would ever use, but Foo is

1402
01:11:38,000 --> 01:11:44,000
a pointer to an array of three you ate.

1403
01:11:45,100 --> 01:11:47,200
I guess you're not actually now that I think about it.

1404
01:11:47,400 --> 01:11:48,800
That's actually not legal.

1405
01:11:49,900 --> 01:11:51,000
You can read it.

1406
01:11:52,100 --> 01:11:53,700
But you can't actually write it.

1407
01:11:55,200 --> 01:11:59,200
because that completes the definition already and you can't really add

1408
01:11:59,200 --> 01:11:59,700
the array of

1409
01:12:00,000 --> 01:12:00,500
In there.

1410
01:12:01,200 --> 01:12:04,000
So if you wanted to do the thing that I said, you'd actually have to

1411
01:12:04,000 --> 01:12:07,000
put the two there, if that makes sense.

1412
01:12:07,000 --> 01:12:13,800
I think so that it would be like Foo is an array of two pointers to

1413
01:12:13,800 --> 01:12:14,800
arrays of three.

1414
01:12:14,800 --> 01:12:17,100
You ate right like that?

1415
01:12:18,600 --> 01:12:22,600
That's the only way you could actually do that declaration because

1416
01:12:22,600 --> 01:12:25,700
once you actually wrap it up you're not really allowed to then make

1417
01:12:25,700 --> 01:12:27,700
that ba3 thing again.

1418
01:12:28,000 --> 01:12:29,000
Not sure why.

1419
01:12:30,200 --> 01:12:32,800
I guess that's just because the way the see parser is written.

1420
01:12:33,200 --> 01:12:35,600
It doesn't have the ability to take that.

1421
01:12:39,000 --> 01:12:41,300
For whatever reason, right?

1422
01:12:41,400 --> 01:12:46,900
It's like it it it can't handle you wrapping the type up in there

1423
01:12:47,300 --> 01:12:53,200
because array subscripts in the parser have to be parsed before the

1424
01:12:53,200 --> 01:12:54,600
final type of the thing.

1425
01:12:55,500 --> 01:12:59,000
So when you actually do that, I assume you kind of would need another

1426
01:12:59,000 --> 01:13:03,100
type, their write, something like that and of course you can't that

1427
01:13:03,100 --> 01:13:03,900
doesn't actually work.

1428
01:13:03,900 --> 01:13:08,300
So they pretty much only allow you to actually put the array subscript

1429
01:13:08,300 --> 01:13:08,700
in there.

1430
01:13:09,500 --> 01:13:13,500
I don't know how I got off on this tangent but point being that's how

1431
01:13:13,500 --> 01:13:14,900
to read see decorations.

1432
01:13:17,000 --> 01:13:17,900
If that makes any sense.

1433
01:13:27,000 --> 01:13:29,800
Will you implement colored text Will colored?

1434
01:13:29,800 --> 01:13:33,700
Text is just you can just tint it using the renderer that we already

1435
01:13:33,700 --> 01:13:34,000
wrote.

1436
01:13:34,000 --> 01:13:34,500
Right?

1437
01:13:34,500 --> 01:13:38,600
So if you wanted the text to be colored, you know if this is what's

1438
01:13:38,600 --> 01:13:44,100
happening currently where it's white, if you want to color it you can

1439
01:13:44,100 --> 01:13:48,200
just say oh you know you wanted red you just change the tint the color

1440
01:13:48,200 --> 01:13:53,000
that you pass the renderer to be read write and then it's red.

1441
01:13:55,600 --> 01:13:58,600
So because that we've already gotten color modulation built into the

1442
01:13:58,600 --> 01:14:00,000
renderer so you can just pass it.

1443
01:14:00,000 --> 01:14:00,800
If you're passing it, a wipe.

1444
01:14:00,800 --> 01:14:01,100
It map.

1445
01:14:01,100 --> 01:14:03,100
It's free to just color change it.

1446
01:14:09,000 --> 01:14:12,100
Kubrick Caleb do programmers, actually use that crazy race Mannix that

1447
01:14:12,100 --> 01:14:15,300
you also know, as, as evidence, by the fact that I accidentally

1448
01:14:15,300 --> 01:14:20,700
constructed something that you can't even actually type in C, I never

1449
01:14:20,700 --> 01:14:22,500
type anything, even remotely that complicated.

1450
01:14:22,500 --> 01:14:26,600
It's just I happened to remember how to generally read those because

1451
01:14:26,600 --> 01:14:30,900
sometimes you have to, but, I mean, to say the very least, your goal

1452
01:14:30,900 --> 01:14:33,200
should be to never have to know that stuff.

1453
01:14:33,200 --> 01:14:36,700
I just said because if you actually, it's more for reading other

1454
01:14:36,700 --> 01:14:38,700
people's code, when they've done something crazy,

1455
01:14:39,200 --> 01:14:43,900
I wouldn't I never you know hopefully you never do that.

1456
01:14:44,400 --> 01:14:45,900
Use some type deaths or something.

1457
01:14:45,900 --> 01:14:46,700
If you have to

1458
01:15:05,800 --> 01:15:08,900
Insofar as you didn't answer the bit about how if the color info would

1459
01:15:08,900 --> 01:15:15,100
be embedded in the text as control codes, know that doesn't sound like

1460
01:15:15,100 --> 01:15:16,200
fun to me at all.

1461
01:15:16,500 --> 01:15:20,300
You're talking about basically like just putting I mean I guess if you

1462
01:15:20,300 --> 01:15:23,300
were trying to write like a text editor or something but I don't know

1463
01:15:23,300 --> 01:15:23,900
why.

1464
01:15:24,300 --> 01:15:25,600
I mean you can always just

1465
01:15:27,600 --> 01:15:31,700
If you want to you can certainly have a thing where in here you parse

1466
01:15:31,700 --> 01:15:33,500
and see if you get something right?

1467
01:15:33,500 --> 01:15:34,900
Like if you wanted to be mr.

1468
01:15:34,900 --> 01:15:36,900
Does ridiculous stuff all the time?

1469
01:15:37,200 --> 01:15:42,400
You could do something like, oh, you know, if you know, I do this.

1470
01:15:51,800 --> 01:15:54,100
That I'm going to change the color or something like that.

1471
01:15:57,300 --> 01:16:00,100
I mean, it's really, really straightforward.

1472
01:16:00,800 --> 01:16:04,900
If you want this, you can do it.

1473
01:16:05,800 --> 01:16:08,000
It's not my jam at all.

1474
01:16:08,200 --> 01:16:13,300
So you know, I wouldn't be something I would be doing but you

1475
01:16:13,300 --> 01:16:19,700
certainly can, you know, you certainly can do it if that's what you

1476
01:16:19,700 --> 01:16:22,700
want, right?

1477
01:16:27,000 --> 01:16:33,300
That what you're looking for, you know, if that's your jam, go nuts.

1478
01:16:35,600 --> 01:16:40,200
You know, do do, whatever you got to do to make yourself, you know, a

1479
01:16:40,200 --> 01:16:41,000
happy puppy.

1480
01:16:42,600 --> 01:16:46,200
If you want to, I suppose you could do, you know, some kind of

1481
01:16:46,300 --> 01:16:47,000
ridiculous thing.

1482
01:16:47,000 --> 01:16:51,400
We're like okay you know I saw a backslash in the text or something

1483
01:16:52,100 --> 01:16:56,300
and so when I see a backslash in the text I'm going to like read out

1484
01:16:56,300 --> 01:16:59,700
some kind of a like code at this point.

1485
01:17:00,200 --> 01:17:05,200
So it's like okay you know if if the if the thing

1486
01:17:05,400 --> 01:17:06,200
Is.

1487
01:17:07,400 --> 01:17:09,600
You know, looks like that.

1488
01:17:10,400 --> 01:17:14,400
Then what I'm going to do is I'm going to assume that the at three is

1489
01:17:14,400 --> 01:17:17,600
going to be like the these are going to be like color values or

1490
01:17:17,600 --> 01:17:18,400
something.

1491
01:17:19,300 --> 01:17:30,200
So you know, maybe I'll double check also that you know at to is is

1492
01:17:30,700 --> 01:17:35,300
not zero just to make sure that I'm not the end of the string.

1493
01:17:36,700 --> 01:17:39,500
Or something, right?

1494
01:17:40,900 --> 01:17:45,500
So it's like, okay, just make sure that there's a backslash followed

1495
01:17:45,500 --> 01:17:48,600
by the pound followed by.

1496
01:17:49,600 --> 01:17:52,200
Three characters of some kind, right?

1497
01:17:52,200 --> 01:17:57,700
And so then we just say like okay you know, assuming that that happens

1498
01:17:57,700 --> 01:17:59,600
then I'm just going to take those three.

1499
01:18:00,000 --> 01:18:02,900
Doctors write whatever they are.

1500
01:18:03,400 --> 01:18:08,800
I'm going to assume that they were like you know numbers from 0 to 29

1501
01:18:09,500 --> 01:18:10,100
or something.

1502
01:18:10,600 --> 01:18:12,000
I don't know, right?

1503
01:18:12,000 --> 01:18:15,900
I'll just assume that their numbers from 0 to 9 because why not?

1504
01:18:20,800 --> 01:18:22,400
And that'll just be my color value.

1505
01:18:23,400 --> 01:18:23,900
Right.

1506
01:18:28,800 --> 01:18:30,100
That's going to produce a number, right?

1507
01:18:30,100 --> 01:18:31,500
Because the ASCII character is 0.

1508
01:18:31,500 --> 01:18:33,300
1 2 3, 4 5 6 9, they go sequentially.

1509
01:18:33,300 --> 01:18:35,600
So if I subtract the character value from zero, I'll get a number

1510
01:18:35,600 --> 01:18:38,300
between 0 and 9 and actually integer, right?

1511
01:18:39,500 --> 01:18:43,600
And so, then I just want to scale that I want to turn that to an R32

1512
01:18:43,600 --> 01:18:48,600
and I just want to scale that into a 0 to 1 range, right?

1513
01:18:48,700 --> 01:18:50,700
And so, thus, the color scale there, right?

1514
01:18:50,700 --> 01:18:54,100
Is just going to be 1 over 9, because I wanted to convert a number

1515
01:18:54,100 --> 01:18:56,700
between 0 and 9 to add a few 0 & 1.

1516
01:18:59,900 --> 01:19:02,700
So if that's like I said, if that's your jam.

1517
01:19:05,700 --> 01:19:06,700
I got you covered.

1518
01:19:08,200 --> 01:19:09,400
You're looking at something like that.

1519
01:19:11,200 --> 01:19:11,800
Probably.

1520
01:19:12,900 --> 01:19:14,900
I'm guessing that's like off the top of my head.

1521
01:19:16,600 --> 01:19:19,400
So then, you know, if you wanted I don't know what you're what you're

1522
01:19:19,400 --> 01:19:20,500
thinking here.

1523
01:19:21,000 --> 01:19:23,800
But if you want something like that, then you're just like, okay.

1524
01:19:23,800 --> 01:19:25,700
You know, I want I want red.

1525
01:19:28,000 --> 01:19:29,000
For that.

1526
01:19:30,300 --> 01:19:30,800
and,

1527
01:19:32,600 --> 01:19:33,700
You know, get some green.

1528
01:19:35,300 --> 01:19:35,900
In there.

1529
01:19:37,500 --> 01:19:38,100
Yellow.

1530
01:19:39,000 --> 01:19:39,500
I don't know.

1531
01:19:45,000 --> 01:19:46,100
That we're talking about.

1532
01:19:48,100 --> 01:19:49,900
So yeah, pretty straightforward.

1533
01:19:50,200 --> 01:19:52,100
Obviously, we don't want to print the control codes.

1534
01:19:52,100 --> 01:19:55,300
So after we eat them, just skip them,

1535
01:20:03,900 --> 01:20:05,700
Except I forgot that it would skip this one.

1536
01:20:06,700 --> 01:20:10,900
If you're going to do it that way you'd probably I'd probably I'd

1537
01:20:10,900 --> 01:20:14,000
probably go ahead and do that, but yeah.

1538
01:20:22,000 --> 01:20:25,300
In some object oriented languages thing is, can become that

1539
01:20:25,300 --> 01:20:29,300
complicated after what that means, what?

1540
01:20:29,300 --> 01:20:31,800
Printing text to a separate background, be easier than putting it

1541
01:20:31,800 --> 01:20:34,900
straight on top of the game background, I don't know.

1542
01:20:34,900 --> 01:20:36,300
That would be any easier.

1543
01:20:38,100 --> 01:20:40,100
Maybe there's some other reason you might want to do it.

1544
01:20:41,100 --> 01:20:45,100
But yeah, insofar as nice that was very quick to implement.

1545
01:20:45,100 --> 01:20:46,000
Yes it is.

1546
01:20:46,100 --> 01:20:47,300
I mean there's nothing to it, right?

1547
01:20:47,300 --> 01:20:49,300
It's really basic.

1548
01:20:50,800 --> 01:20:54,300
How about a 2d array of function pointers might have been why a few of

1549
01:20:54,300 --> 01:20:56,700
those variants didn't compile because it thought you were, declaring a

1550
01:20:56,700 --> 01:20:58,700
function pointer array star Foo.

1551
01:21:00,800 --> 01:21:04,400
Maybe around how many more episodes until you the switch from

1552
01:21:04,400 --> 01:21:05,800
suffering to Hardware rendering.

1553
01:21:06,100 --> 01:21:08,700
I don't know that we'll ever switch to Hardware rendering until like

1554
01:21:08,700 --> 01:21:09,400
the end.

1555
01:21:12,100 --> 01:21:15,800
I mean I would I would rather always do software rendering so it's

1556
01:21:15,800 --> 01:21:19,500
only for Speed purposes that we would do the other one.

1557
01:21:21,200 --> 01:21:21,600
Right.

1558
01:21:23,700 --> 01:21:26,100
Can you rotate and transform the text?

1559
01:21:26,800 --> 01:21:27,800
Well, sure.

1560
01:21:28,100 --> 01:21:30,400
I mean it's just going through the bitmap just like everything else

1561
01:21:30,400 --> 01:21:31,000
is, right?

1562
01:21:31,100 --> 01:21:34,100
So if you wanted to, you could rotate and transform the text, I think

1563
01:21:34,100 --> 01:21:37,500
our Bush bitmap call, doesn't take one of those.

1564
01:21:37,500 --> 01:21:43,200
Additionally, so you'd have to change the transform, right?

1565
01:21:44,200 --> 01:21:45,700
You'd have to look at the spin it.

1566
01:21:47,400 --> 01:21:49,900
But obviously you could do that, right?

1567
01:21:49,900 --> 01:21:51,300
So you know, if your

1568
01:21:52,900 --> 01:21:56,800
you're in here in the render transform and, you know, you've got

1569
01:21:58,700 --> 01:21:59,800
sort of the, the

1570
01:22:02,300 --> 01:22:03,700
Awesome scales of narrow.

1571
01:22:03,900 --> 01:22:07,700
So I guess in our render transform, we don't actually use interesting.

1572
01:22:07,700 --> 01:22:10,800
We don't actually use the we can actually put axes in there.

1573
01:22:14,400 --> 01:22:17,700
So basically like right now we yeah right now we don't actually expose

1574
01:22:17,700 --> 01:22:19,000
any pushes for that.

1575
01:22:19,200 --> 01:22:23,500
So we would need to First actually have a push for that, right?

1576
01:22:25,400 --> 01:22:30,000
Because right now, when we push bitmap, we don't actually push an axis

1577
01:22:30,000 --> 01:22:31,900
system on there, right?

1578
01:22:31,900 --> 01:22:34,900
So we need to add that if that makes sense.

1579
01:22:36,400 --> 01:22:40,700
Because right now, we support it, but if you look in here, when we do,

1580
01:22:40,900 --> 01:22:44,300
when we actually draw the bitmap right here, you can see that.

1581
01:22:44,300 --> 01:22:48,400
We actually just always specify the like the axis right here.

1582
01:22:48,900 --> 01:22:52,400
So we need to just grab those axes out of out of the actual push

1583
01:22:52,400 --> 01:22:52,800
buffer.

1584
01:22:54,000 --> 01:22:55,500
That would be the only thing that have to happen there.

1585
01:22:57,100 --> 01:22:59,700
Obviously, you can change the scale if you want to, to write.

1586
01:23:01,000 --> 01:23:05,000
If you want to be mister mister and code stuff in their code, which

1587
01:23:05,000 --> 01:23:08,000
seemed like what people wanted to do, you know, you can

1588
01:23:09,300 --> 01:23:11,800
Go nuts have a party.

1589
01:23:25,700 --> 01:23:26,200
Right.

1590
01:23:37,700 --> 01:23:38,600
Something like this.

1591
01:23:42,200 --> 01:23:42,800
Probably.

1592
01:23:44,300 --> 01:23:44,800
Discussing.

1593
01:23:50,600 --> 01:23:52,800
So you know if you want to change the scale we could change the

1594
01:23:52,800 --> 01:23:54,100
rotation to but we didn't.

1595
01:23:54,200 --> 01:23:55,800
We don't actually have in the renderer.

1596
01:23:55,800 --> 01:23:57,100
We don't have the pushover stuff.

1597
01:23:57,100 --> 01:23:59,800
All of our rotation code was just in.

1598
01:24:00,000 --> 01:24:02,600
Code should probably add some rotating stuff soon.

1599
01:24:02,800 --> 01:24:06,500
Just we can make sure we never break it but yeah I mean if you want to

1600
01:24:06,500 --> 01:24:10,000
like we could make counts be tiny now, right?

1601
01:24:11,700 --> 01:24:12,400
Probably.

1602
01:24:16,900 --> 01:24:19,200
Oops, got to actually pass it.

1603
01:24:23,000 --> 01:24:23,400
There we go.

1604
01:24:27,100 --> 01:24:30,900
Right now counts as a little tiny baby counts.

1605
01:24:31,500 --> 01:24:32,800
That might be a little too small.

1606
01:24:33,600 --> 01:24:34,500
Let's be honest.

1607
01:24:37,800 --> 01:24:38,600
Go half size.

1608
01:24:42,900 --> 01:24:43,400
Right.

1609
01:24:50,500 --> 01:24:52,600
All right, stream is ended.

1610
01:24:53,600 --> 01:24:58,300
And if the stream is ended, its ended folks, you know, nothing about

1611
01:24:58,300 --> 01:24:58,800
that.

1612
01:24:59,500 --> 01:25:02,300
Let's go ahead and close down.

1613
01:25:07,700 --> 01:25:08,700
Close it down.

1614
01:25:12,200 --> 01:25:15,500
Okay, everyone, thank you for joining me for another episode of

1615
01:25:15,500 --> 01:25:16,100
handmade hero.

1616
01:25:16,100 --> 01:25:17,200
It's been a pleasure coding with you.

1617
01:25:17,200 --> 01:25:22,400
As always, we got our fonts going today, but like I said, we kind of

1618
01:25:22,400 --> 01:25:25,400
just put in some hacked in values right now, which was the goal of

1619
01:25:25,400 --> 01:25:26,100
today's episode.

1620
01:25:26,100 --> 01:25:30,600
In fact, so what we want to do tomorrow is we want to now go and look

1621
01:25:30,600 --> 01:25:31,700
at what those hack values.

1622
01:25:31,700 --> 01:25:36,400
All were and then go into our asset processor to sort of start

1623
01:25:36,400 --> 01:25:40,000
providing those actual values from the Faust themselves, so that our

1624
01:25:40,000 --> 01:25:41,400
fonts will look nicer and

1625
01:25:41,500 --> 01:25:43,000
Be lined up, appropriately.

1626
01:25:43,500 --> 01:25:44,900
That's what we want to do tomorrow.

1627
01:25:45,000 --> 01:25:46,700
Hopefully you'll join me for that.

1628
01:25:47,000 --> 01:25:49,500
We'll be right back here at the same time, same place, 5 p.m.

1629
01:25:49,500 --> 01:25:52,200
Pacific Daylight Time right here on Twitch.

1630
01:25:52,300 --> 01:25:53,800
So hope to see you for that until then.

1631
01:25:53,800 --> 01:25:56,900
If you want to play around with the source code yourself at home, it's

1632
01:25:56,900 --> 01:25:58,200
pretty easy to do.

1633
01:25:58,600 --> 01:26:01,900
If you pre-order the game at handmade, he wrote up or you can download

1634
01:26:01,900 --> 01:26:02,600
it every night.

1635
01:26:02,600 --> 01:26:06,900
I upload the latest changes for the day and you can grab them.

1636
01:26:07,500 --> 01:26:08,800
So if you want to do that, check it out.

1637
01:26:08,900 --> 01:26:11,100
And we also have a patreon page if you want to support our video

1638
01:26:11,100 --> 01:26:11,300
series.

1639
01:26:11,400 --> 01:26:13,800
These if you like watching the show, please check it out.

1640
01:26:14,300 --> 01:26:15,400
And we also have a forum site.

1641
01:26:15,400 --> 01:26:19,000
You can go to ask questions on the forums or if you want to get

1642
01:26:19,100 --> 01:26:22,500
Community Resources like porous to Mac and Linux people have been

1643
01:26:22,500 --> 01:26:26,600
working on or anti depe sewed guide that people have been working on.

1644
01:26:26,800 --> 01:26:29,500
Those are up there and we also have a tweetbot the tweets the

1645
01:26:29,500 --> 01:26:29,800
schedule.

1646
01:26:29,800 --> 01:26:32,100
So if you're trying to catch the stream live you like watching it live

1647
01:26:32,100 --> 01:26:35,500
you like asking the questions that is the place to go, subscribe to

1648
01:26:35,500 --> 01:26:36,300
that or just check it.

1649
01:26:36,300 --> 01:26:39,600
Periodically it tells you what the schedule B every day.

1650
01:26:40,100 --> 01:26:40,900
That's about it.

1651
01:26:40,900 --> 01:26:41,300
Thanks so much.

1652
01:26:41,400 --> 01:26:42,300
Much for joining me.

1653
01:26:42,300 --> 01:26:43,500
We will be back here tomorrow.

1654
01:26:43,500 --> 01:26:46,800
Hope to see you all here, until then have fun coding.

1655
01:26:46,800 --> 01:26:49,400
And I will see you guys on the internet.

1656
01:26:49,500 --> 01:26:49,800
Take it easy.

