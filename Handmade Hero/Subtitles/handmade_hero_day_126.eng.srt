1
00:00:00,000 --> 00:00:02,700
Hello, everyone, and welcome to handmade hero.

2
00:00:02,700 --> 00:00:05,700
The show where we code a complete game live on stream.

3
00:00:05,700 --> 00:00:08,400
No engines, no, libraries.

4
00:00:08,400 --> 00:00:17,900
And a lot of people ask me, they say, Casey how are you able to talk

5
00:00:17,900 --> 00:00:19,600
while you are programming?

6
00:00:19,600 --> 00:00:26,100
I find it's really hard to do that and the answer is that actually

7
00:00:26,100 --> 00:00:29,600
it's really easy to talk while you're programming if you

8
00:00:30,200 --> 00:00:31,500
Up all the programming.

9
00:00:32,800 --> 00:00:38,400
So today we have our friend, the owl of Shame here to tell us a little

10
00:00:38,400 --> 00:00:44,600
something about multi-threading that Casey totally didn't do yesterday

11
00:00:45,400 --> 00:00:50,000
and which we absolutely have to do if we don't want to have kind of an

12
00:00:50,000 --> 00:00:52,300
ugly situation arise in our code,

13
00:00:54,500 --> 00:00:56,000
I knew you were going to get me one of these days.

14
00:00:56,000 --> 00:00:58,400
I'll I see you looking at me over there all the time.

15
00:00:59,600 --> 00:01:05,000
Anyway, let's let's take a look at this at this particular piece of

16
00:01:05,000 --> 00:01:05,600
Shame here.

17
00:01:06,700 --> 00:01:09,700
This is I think the first really legitimate L is shame.

18
00:01:10,100 --> 00:01:14,300
The al-sham doesn't appear that often but he appears once in a while

19
00:01:14,300 --> 00:01:20,700
but this one is like I think absolutely like it's an incontrovertible

20
00:01:20,700 --> 00:01:22,700
Al of Shame, whatever that means.

21
00:01:23,600 --> 00:01:28,500
Like if ever there was a time like no one, I think we'll ever argue

22
00:01:28,500 --> 00:01:28,700
that.

23
00:01:28,700 --> 00:01:29,200
This is not it.

24
00:01:29,400 --> 00:01:31,800
Appropriate time for the Isle of Shame.

25
00:01:32,800 --> 00:01:37,800
So here we are in the thread code, right here, we are in the Superfund

26
00:01:37,800 --> 00:01:38,500
thread code.

27
00:01:39,200 --> 00:01:45,000
And what we see right here is that I check to see whether or not the

28
00:01:45,000 --> 00:01:48,600
entry count is less than xn fee to do.

29
00:01:49,300 --> 00:01:52,000
And if it is, then I go, I'm sorry, I check to see if they actually do

30
00:01:52,000 --> 00:01:53,100
is less than the entry count.

31
00:01:53,100 --> 00:01:53,900
Meaning, is there anything in the Q?

32
00:01:53,900 --> 00:01:55,700
And if there is, I take something off the queue.

33
00:01:56,100 --> 00:02:00,500
I never actually check to see whether there's another thread that may

34
00:02:00,500 --> 00:02:01,600
have come in here.

35
00:02:02,700 --> 00:02:04,200
And stolen something off the queue.

36
00:02:04,200 --> 00:02:05,400
I wrote this.

37
00:02:06,500 --> 00:02:08,900
And this is actually literally, what I was thinking.

38
00:02:08,900 --> 00:02:13,500
The entire time to I wrote this as if it was single producer, single

39
00:02:13,500 --> 00:02:17,900
consumer, but this is single producer multiple consumer which means

40
00:02:17,900 --> 00:02:21,200
multiple people could be doing this interlocked increment, which means

41
00:02:21,200 --> 00:02:22,700
this code is totally bogus.

42
00:02:23,900 --> 00:02:24,400
Right.

43
00:02:26,400 --> 00:02:28,100
So that is a definite out of Shame.

44
00:02:28,100 --> 00:02:32,600
And it's kind of a double Olive shame because the very first thing I

45
00:02:32,600 --> 00:02:36,200
said, when we talked about multi-threaded coding, I set it on the

46
00:02:36,200 --> 00:02:36,900
stream.

47
00:02:37,100 --> 00:02:41,100
I was like what we should do is we should use interlocked compare

48
00:02:41,100 --> 00:02:44,600
exchange because it lets you do the right thing easily.

49
00:02:44,900 --> 00:02:47,300
Instead of trying to be clever, I said that.

50
00:02:47,400 --> 00:02:50,200
And then later I was like oh I'll just show how to use interlocked

51
00:02:50,200 --> 00:02:52,000
increment here and use that instead.

52
00:02:52,100 --> 00:02:53,100
Well, guess what?

53
00:02:53,100 --> 00:02:53,500
That was.

54
00:02:53,700 --> 00:02:57,000
Totally not acceptable because interlocked increment is not going to

55
00:02:57,000 --> 00:02:59,800
work in this fashion.

56
00:03:00,400 --> 00:03:03,400
Because two threads could get here at the same time both who have

57
00:03:03,400 --> 00:03:06,800
already done this check and then both who increment and now one person

58
00:03:07,000 --> 00:03:09,500
finds that they have a number which is actually outside the bounds of

59
00:03:09,500 --> 00:03:12,500
the queue already right and how does that work?

60
00:03:12,500 --> 00:03:14,000
Now the whole scheme is borked.

61
00:03:14,900 --> 00:03:16,500
So, we do not want to do that.

62
00:03:16,600 --> 00:03:17,600
That is totally not.

63
00:03:17,600 --> 00:03:20,000
Okay, right, instead?

64
00:03:20,000 --> 00:03:25,500
What we would much rather do is we much rather use an interlock

65
00:03:25,500 --> 00:03:27,100
compare exchange, right?

66
00:03:29,000 --> 00:03:31,100
Because that will prevent us from making this error.

67
00:03:31,100 --> 00:03:32,800
And we don't even have to think hard about it.

68
00:03:32,800 --> 00:03:36,800
Like, we don't have to be clever and that would keep us from being in

69
00:03:36,800 --> 00:03:38,000
bad shape, right?

70
00:03:38,000 --> 00:03:40,600
So, interlocked compare exchange, here it is, we talked about it

71
00:03:40,600 --> 00:03:44,100
already, you give it a destination, right?

72
00:03:44,300 --> 00:03:46,900
And you give it a thing that you want to put in that destination.

73
00:03:47,300 --> 00:03:51,100
And you give it this extra thing called compare and write or

74
00:03:51,100 --> 00:03:51,600
comprehend.

75
00:03:51,600 --> 00:03:52,300
I don't know you pronounce that.

76
00:03:52,300 --> 00:03:55,000
The thing you're comparing two is what it means, right?

77
00:03:55,700 --> 00:03:58,500
And as you can see here by the description, it's like

78
00:03:58,600 --> 00:03:58,900
Paris.

79
00:03:58,900 --> 00:04:01,700
The destination about the compare end, if the destination value is

80
00:04:01,800 --> 00:04:05,600
equal to the comparing value, The Exchange value is stored in the

81
00:04:05,600 --> 00:04:06,500
address specified.

82
00:04:06,500 --> 00:04:09,500
Otherwise, no operation is is performed, right?

83
00:04:09,700 --> 00:04:14,600
And so the long here, right, it returns, whatever the value was that

84
00:04:14,600 --> 00:04:16,300
was there at the time.

85
00:04:18,100 --> 00:04:21,800
So what we can do if we want to is we can do this check and say o is

86
00:04:21,800 --> 00:04:22,500
the Q.

87
00:04:22,500 --> 00:04:25,000
You know, what's up with the cue is it, is there anything in the

88
00:04:25,000 --> 00:04:25,600
queue?

89
00:04:25,900 --> 00:04:29,300
And then we could do interlock compare exchange, right?

90
00:04:30,900 --> 00:04:35,200
Same exact code where we just say, Okay, do an interlocked compare

91
00:04:35,200 --> 00:04:39,200
exchange that will actually return us the index that we should use

92
00:04:39,400 --> 00:04:39,900
right?

93
00:04:40,900 --> 00:04:45,900
And then what we want to actually pass in, there is whatever next

94
00:04:45,900 --> 00:04:48,700
entry to do was before, right?

95
00:04:48,700 --> 00:04:55,100
So this is like original next entry to do right here we go.

96
00:04:57,000 --> 00:04:58,900
So assuming that that is less than the Q count.

97
00:04:58,900 --> 00:05:00,300
We do the interlock compare exchange.

98
00:05:00,300 --> 00:05:02,600
We want to put in there, right?

99
00:05:03,200 --> 00:05:06,200
We want to put in their original, like why could I not?

100
00:05:06,200 --> 00:05:09,700
Why did that not indent indent emacs indent

101
00:05:11,100 --> 00:05:11,600
There we go.

102
00:05:12,300 --> 00:05:15,400
I had an extra parentheses in there so you do not compare exchange.

103
00:05:15,400 --> 00:05:18,600
We say Okay I want to take this memory address.

104
00:05:18,800 --> 00:05:24,000
I want to replace what is there by incrementing the value by 1, right.

105
00:05:24,300 --> 00:05:28,800
And then what I want to do is I want you to make sure that the value

106
00:05:28,800 --> 00:05:31,900
that's actually there is the one that I thought should be there.

107
00:05:32,100 --> 00:05:34,900
So I know that nobody else came in here and incremented it right?

108
00:05:35,200 --> 00:05:36,800
Then I just go.

109
00:05:36,800 --> 00:05:40,000
Oh okay, if I happen to be,

110
00:05:40,200 --> 00:05:45,500
The situation where the index that I got back, right, equals the one

111
00:05:45,500 --> 00:05:50,000
that I thought it should be then, I know, we're okay, right?

112
00:05:50,300 --> 00:05:53,800
But if I get back a different index, then I know that another thread

113
00:05:53,800 --> 00:05:57,500
has beaten me to the increment and I should not do anything, right?

114
00:05:57,600 --> 00:05:58,800
I should not do anything.

115
00:06:00,900 --> 00:06:02,300
So that's what we actually want to do.

116
00:06:03,200 --> 00:06:05,700
And I would set result is valid equal to false there.

117
00:06:05,700 --> 00:06:09,200
Right now, we've got a little bit of extra work to do when we do this

118
00:06:09,300 --> 00:06:12,800
because that means now there's a case where we could fail even when

119
00:06:12,800 --> 00:06:15,300
there actually is work to do, right?

120
00:06:15,500 --> 00:06:17,900
So, what we could do here, I think this will simplify out a little

121
00:06:17,900 --> 00:06:18,400
bit.

122
00:06:19,500 --> 00:06:24,300
I think this will actually simplify things more, but we actually do

123
00:06:24,300 --> 00:06:25,500
need to do as well.

124
00:06:25,500 --> 00:06:27,900
Write is, we need to basically Loop over this.

125
00:06:27,900 --> 00:06:29,900
If we want to maintain how this particular,

126
00:06:30,200 --> 00:06:35,000
Function actually worked right, but we don't actually have to do that

127
00:06:35,000 --> 00:06:37,200
because hold on a second.

128
00:06:37,200 --> 00:06:38,600
I want to grab out the render group.

129
00:06:38,700 --> 00:06:45,900
We change the API at the end of last last stream and we actually don't

130
00:06:45,900 --> 00:06:46,500
want it to work.

131
00:06:46,500 --> 00:06:48,600
The way that I had factored it quite yet.

132
00:06:48,800 --> 00:06:51,400
I was kind of sort of pulling things out into a platform nonspecific

133
00:06:51,400 --> 00:06:53,300
way, but then we decided to just do it this way.

134
00:06:53,700 --> 00:06:57,500
We decided that what we wanted was just an add entry and a complete

135
00:06:57,500 --> 00:06:58,900
all work, right?

136
00:06:59,700 --> 00:07:00,000
That's

137
00:07:00,100 --> 00:07:01,400
We actually wanted to have happen.

138
00:07:05,200 --> 00:07:06,300
so what I'd like to do,

139
00:07:07,800 --> 00:07:12,400
Is go ahead and pull, you know, basically restructure things to make

140
00:07:12,400 --> 00:07:15,300
them into this structure so that they're working off of this, which

141
00:07:15,300 --> 00:07:17,000
they almost are at the moment.

142
00:07:17,000 --> 00:07:21,300
But just get it restructured and then go and worry about actually

143
00:07:21,300 --> 00:07:22,100
cleaning this up.

144
00:07:22,100 --> 00:07:26,400
But hopefully everyone understands my shame Al situation there.

145
00:07:26,400 --> 00:07:30,400
Right basically I was counting on the fact that I was only having one

146
00:07:30,400 --> 00:07:31,500
thread that was D queuing.

147
00:07:32,800 --> 00:07:36,000
Which coincidentally, the reason I was thinking about that is because

148
00:07:37,800 --> 00:07:40,500
The thing I was thinking of, in my head was a time when I wrote an

149
00:07:40,500 --> 00:07:43,800
asset loader, which had a background thread, and it would just sit

150
00:07:43,800 --> 00:07:45,400
there waiting for stuff to be told to do.

151
00:07:45,600 --> 00:07:48,400
And in that case, interlock increment Works quite nicely because you

152
00:07:48,400 --> 00:07:49,600
have to worry about that, right?

153
00:07:50,200 --> 00:07:52,700
But when you have multiple people who are all looking at the same

154
00:07:52,700 --> 00:07:57,600
queue, interlock compare exchange is way better because it allows you

155
00:07:57,600 --> 00:08:01,100
to very simply without having to really do anything more fancy.

156
00:08:01,300 --> 00:08:02,700
It allows you to very simply go.

157
00:08:02,700 --> 00:08:07,100
Okay, just here's what I think the value was and I did.

158
00:08:07,200 --> 00:08:10,700
All my preparations assuming that this was the value.

159
00:08:10,900 --> 00:08:12,300
And now we're going to go for it.

160
00:08:12,300 --> 00:08:15,200
But if that value is not what's in there, then, just don't do it,

161
00:08:15,200 --> 00:08:15,800
right?

162
00:08:15,800 --> 00:08:20,400
So you don't have to worry about the fact that no matter what you, you

163
00:08:20,400 --> 00:08:22,800
don't have to worry about the fact that the operation that you're

164
00:08:22,800 --> 00:08:24,600
about to do is always going to complete.

165
00:08:24,600 --> 00:08:26,900
You can abort it, basically, which is kind of nice.

166
00:08:27,300 --> 00:08:28,300
It's a little bit like that.

167
00:08:28,300 --> 00:08:31,000
Transactional, memory stuff in a sense, it's like transactional,

168
00:08:31,000 --> 00:08:35,100
memory for one single, for one single value, right?

169
00:08:38,200 --> 00:08:40,000
Rhonda almond milk today and it's pretty delicious.

170
00:08:40,000 --> 00:08:40,500
All right.

171
00:08:42,200 --> 00:08:46,600
Okay, so let's see if we can wrap this up here, because I'd like to

172
00:08:46,600 --> 00:08:48,400
try running the renderer today if possible.

173
00:08:48,800 --> 00:08:53,100
So let me see if I can go ahead and wrap this up so that we've got the

174
00:08:53,100 --> 00:08:56,300
renderer working in the way that that I suggest that I wanted to work

175
00:08:56,300 --> 00:08:58,600
when I kind of wrote out this API here, right?

176
00:08:59,300 --> 00:08:59,800
So what

177
00:09:00,000 --> 00:09:03,300
To do here is we're going to say that there's a call to the platform

178
00:09:03,300 --> 00:09:07,100
layer, that allows it to add an entry to Q, right?

179
00:09:07,600 --> 00:09:09,800
And so we're going to go ahead and say that, you know, you pass a work

180
00:09:09,800 --> 00:09:11,400
queue in here, here's the queue.

181
00:09:12,200 --> 00:09:13,200
And then you pass in.

182
00:09:13,200 --> 00:09:16,800
There's a, some kind of a function and the function signature, I

183
00:09:16,800 --> 00:09:17,100
guess.

184
00:09:17,100 --> 00:09:18,100
Just looks like this.

185
00:09:18,600 --> 00:09:21,800
Maybe it also gets the queue that it was working on Just for

186
00:09:21,800 --> 00:09:25,500
completeness sake and then it takes some kind of a pointer and that

187
00:09:25,500 --> 00:09:26,200
pointer is

188
00:09:27,900 --> 00:09:31,900
That pointer is whatever the program, whatever.

189
00:09:31,900 --> 00:09:35,100
The program wanted it to be for like data, whatever the thing should

190
00:09:35,100 --> 00:09:36,100
be using, basically.

191
00:09:37,100 --> 00:09:38,000
So that's what we're looking at.

192
00:09:38,000 --> 00:09:40,200
Here are so we essentially have a typedef, right?

193
00:09:40,200 --> 00:09:47,300
We've got a function signature called do work queue or work queue.

194
00:09:47,500 --> 00:09:49,200
Callback something like that.

195
00:09:49,800 --> 00:09:53,200
Which is something where you can kind of register and say, okay, come

196
00:09:53,200 --> 00:09:56,500
give me, give me slices off of a thread or something like this, right?

197
00:09:57,700 --> 00:10:03,500
And what I want to do is say, okay, we'll take that call back as part

198
00:10:03,500 --> 00:10:06,100
of the work queue Edition, and we'll take the data that we're going to

199
00:10:06,100 --> 00:10:11,000
pass to it and that will be how we add entries to the list, right?

200
00:10:11,500 --> 00:10:13,400
And a work queue entry storage.

201
00:10:13,400 --> 00:10:18,400
Therefore will just be whoever should have been called back, right?

202
00:10:18,400 --> 00:10:22,600
Like the Callback and whatever the data pointer should have been,

203
00:10:22,800 --> 00:10:23,100
right?

204
00:10:23,100 --> 00:10:25,200
So it's just going to store those two things.

205
00:10:25,200 --> 00:10:26,200
That's all it's going to do.

206
00:10:27,000 --> 00:10:29,000
So, when we want to add entry, right?

207
00:10:29,000 --> 00:10:32,200
It's going to be just exactly this code that we already wrote.

208
00:10:32,200 --> 00:10:33,300
So that's all good.

209
00:10:33,600 --> 00:10:35,000
We've got this at entry here.

210
00:10:35,700 --> 00:10:38,800
It's going to do all of the same stuff and remember, only one person

211
00:10:38,800 --> 00:10:40,300
at the moment can write to it.

212
00:10:43,600 --> 00:10:46,700
If we wanted to, I guess it would be possible to make it so multiple

213
00:10:46,700 --> 00:10:50,200
people could write to it all, we would really have to do.

214
00:10:50,200 --> 00:10:54,100
There is again, use an interlocked compare exchange on the entry

215
00:10:54,100 --> 00:10:56,300
count, so I'll add it to do here.

216
00:10:57,000 --> 00:11:03,600
basically, like switch to interlock compare exchange eventually so

217
00:11:03,600 --> 00:11:05,500
that any thread can add

218
00:11:07,400 --> 00:11:11,200
Because maybe we want to just try that out and see if that works,

219
00:11:11,200 --> 00:11:11,400
okay?

220
00:11:11,400 --> 00:11:16,600
Because if it does then you know we could just allow people to add

221
00:11:16,600 --> 00:11:18,800
work cues from any thread that they want to.

222
00:11:19,500 --> 00:11:22,700
Maybe that's a little too crazy but you know we could try it if it

223
00:11:22,700 --> 00:11:25,500
gets crazy and we get bugs, and it's crashy and weird or whatever,

224
00:11:25,700 --> 00:11:28,900
you're not to do it, you know, he's back up anyway.

225
00:11:28,900 --> 00:11:32,800
So this adds the entry in Here and Now what we need to do is we need

226
00:11:32,800 --> 00:11:36,100
to make sure again that we write all of that entry information before

227
00:11:36,100 --> 00:11:36,700
we

228
00:11:36,700 --> 00:11:38,500
And the entry count.

229
00:11:39,400 --> 00:11:43,700
So what I want to do here is I want to grab out that work, you entry.

230
00:11:44,800 --> 00:11:46,900
I go and grab the work queue entry.

231
00:11:48,100 --> 00:11:50,600
That is the the one in question.

232
00:11:51,200 --> 00:11:54,700
I, then set its data member to the one that was passed in.

233
00:11:58,200 --> 00:11:59,900
and it's call back member this

234
00:12:00,000 --> 00:12:01,100
Have to be here anymore.

235
00:12:01,500 --> 00:12:04,300
And it's callback member to the one that was passed in as well.

236
00:12:04,300 --> 00:12:07,000
So we're really just copying those two in there.

237
00:12:07,800 --> 00:12:08,500
So, there we go.

238
00:12:09,200 --> 00:12:10,500
So we copy those in there.

239
00:12:10,700 --> 00:12:12,500
We make sure that they're written out.

240
00:12:12,700 --> 00:12:16,200
We then increment and technically, I guess we don't really need this

241
00:12:16,200 --> 00:12:21,000
anymore because we have read that Visual Studio will treat the S fence

242
00:12:21,000 --> 00:12:24,300
as a right barrier, but I'll even both in there because it can't hurt

243
00:12:25,000 --> 00:12:27,000
so, okay, we've got the queue entry count.

244
00:12:27,000 --> 00:12:29,600
We're going to increment it, then we increment the semaphore.

245
00:12:30,000 --> 00:12:31,900
That should be all we need to really do.

246
00:12:34,000 --> 00:12:35,200
For add entry now.

247
00:12:35,200 --> 00:12:39,000
I guess, this stuff right here is going to start giving us errors, if

248
00:12:39,000 --> 00:12:40,300
I don't start piping it through.

249
00:12:40,900 --> 00:12:43,500
So let me go ahead and actually pipe it through.

250
00:12:44,300 --> 00:12:44,900
Let's see here.

251
00:12:44,900 --> 00:12:47,100
So we got a platform work you render queue.

252
00:12:47,100 --> 00:12:51,300
So let's go to handmade platform.

253
00:12:52,600 --> 00:12:58,900
And when we pass in the game memory here, I guess, maybe what I'll do

254
00:12:58,900 --> 00:13:00,900
is, I'll stick some work cues in here.

255
00:13:01,300 --> 00:13:05,200
So we'll basically have a platform work queue the platform work.

256
00:13:05,200 --> 00:13:10,000
You will just have the render queue for now and we'll leave that like

257
00:13:10,000 --> 00:13:10,400
so.

258
00:13:17,900 --> 00:13:24,100
And when we compile this, then we will actually need to I guess have

259
00:13:24,400 --> 00:13:25,000
that definition.

260
00:13:25,000 --> 00:13:27,000
Of course, we're not going to Define this is going to be blind.

261
00:13:27,000 --> 00:13:29,000
So I guess I'll just go ahead and do struct Platform.

262
00:13:29,000 --> 00:13:32,900
Work you like so or not.

263
00:13:32,900 --> 00:13:33,300
That's right.

264
00:13:33,300 --> 00:13:39,200
We're going to have to have a pointer there mmm-hmm because I have

265
00:13:39,200 --> 00:13:41,200
this thing where I'm calling off of it.

266
00:13:41,700 --> 00:13:43,600
Well, that's okay, that's no big deal.

267
00:13:45,100 --> 00:13:47,200
Because we have to find a way we want to be able to

268
00:13:47,400 --> 00:13:52,200
Get this function essentially because we're calling back the platform

269
00:13:52,200 --> 00:13:55,500
layer and we want to have some way of being able to know what that

270
00:13:55,500 --> 00:13:56,100
call is.

271
00:13:56,300 --> 00:13:59,900
Now, I suppose we could make that some kind of a thing that just gets

272
00:13:59,900 --> 00:14:04,800
assigned, like a global variable kind of a situation and really, we

273
00:14:04,800 --> 00:14:11,100
could do that for anything that we want everyone to be able to call.

274
00:14:14,900 --> 00:14:18,000
Because it would be nicer if we could just do this, right?

275
00:14:18,600 --> 00:14:22,300
And that way, this is completely blind thing that the operating system

276
00:14:22,300 --> 00:14:23,900
can the platform America defined.

277
00:14:23,900 --> 00:14:26,500
However, it wants, which I think I prefer.

278
00:14:27,300 --> 00:14:31,200
So, I think I may leave it that way for now, like so.

279
00:14:31,900 --> 00:14:34,800
So, will basically have a platform at entry

280
00:14:36,900 --> 00:14:38,400
And platform complete all work.

281
00:14:39,100 --> 00:14:45,100
And we'll just have those be some things that are globally defined in

282
00:14:45,100 --> 00:14:47,100
handmade .h, right?

283
00:14:47,800 --> 00:14:51,500
So, in handmade .h, essentially, everyone will able to use them.

284
00:14:51,500 --> 00:14:54,500
They're just Global because there's only one possible, one, they can

285
00:14:54,500 --> 00:14:57,700
never call and it'll just be set by the game layer.

286
00:14:58,000 --> 00:14:59,000
So that seems fine to me.

287
00:14:59,000 --> 00:14:59,800
I don't have problems.

288
00:15:00,500 --> 00:15:01,900
So this is a global variable.

289
00:15:03,400 --> 00:15:07,100
It's going to be platform at entry.

290
00:15:08,800 --> 00:15:10,200
It's a pointer to that function.

291
00:15:11,100 --> 00:15:14,200
We also have platform complete all work.

292
00:15:18,700 --> 00:15:19,300
Like so.

293
00:15:20,100 --> 00:15:22,700
And so, we'll get those pointers.

294
00:15:22,700 --> 00:15:28,000
Will get those pointers from the handmade platform.

295
00:15:28,000 --> 00:15:31,400
So again, anything that calls back, right?

296
00:15:31,400 --> 00:15:35,600
Anything that calls into our platform layer, we need to actually pass

297
00:15:35,600 --> 00:15:37,600
into the game because that's just how we structured things basically

298
00:15:37,600 --> 00:15:41,000
all of the platform Services get passed in at startup time.

299
00:15:41,000 --> 00:15:44,400
We don't have any implicit finding stuff that happens with the

300
00:15:44,400 --> 00:15:45,300
operating system or anything like that.

301
00:15:45,300 --> 00:15:49,900
So we're going to go ahead and do these two here which means I need to

302
00:15:49,900 --> 00:15:50,100
type

303
00:15:50,200 --> 00:15:52,100
If these two guys, right?

304
00:15:52,200 --> 00:15:52,700
Like so.

305
00:15:57,300 --> 00:15:57,800
There we go.

306
00:15:59,300 --> 00:16:04,800
And really, it looks like these only take some very rudimentary stuff.

307
00:16:04,800 --> 00:16:06,300
It takes a platform work queue.

308
00:16:08,600 --> 00:16:11,300
It takes a one of those functions.

309
00:16:12,400 --> 00:16:15,900
Let's take a look at put that in here, but I got to hoist that out.

310
00:16:17,200 --> 00:16:17,700
There we go.

311
00:16:18,900 --> 00:16:20,100
So this is a platform work.

312
00:16:20,100 --> 00:16:21,000
You call back.

313
00:16:22,200 --> 00:16:25,900
So platform, add entry takes a platform work, you call back.

314
00:16:28,200 --> 00:16:30,600
And it takes a void star.

315
00:16:30,900 --> 00:16:31,500
There we go.

316
00:16:31,900 --> 00:16:33,600
People were saying that was a good ship named.

317
00:16:33,700 --> 00:16:35,000
It was actually a company named.

318
00:16:35,200 --> 00:16:36,700
There is a company called void star.

319
00:16:37,600 --> 00:16:41,100
I don't know if anyone knows that it's true.

320
00:16:42,700 --> 00:16:46,600
So, all right, so we've got our type dips here for operating on the

321
00:16:46,600 --> 00:16:49,200
work cues and that's really all we need.

322
00:16:50,200 --> 00:16:51,400
I think that's basically it.

323
00:16:56,600 --> 00:16:58,900
So over here, we got the platform work to call back.

324
00:16:59,700 --> 00:17:02,900
We've got platform call back, there we go.

325
00:17:03,500 --> 00:17:07,400
And I think we typically have a prefix these things with win32 so we

326
00:17:07,400 --> 00:17:09,700
know which ones we're dealing with.

327
00:17:09,700 --> 00:17:12,300
So we've kind of got a win32 add entry in a win32.

328
00:17:14,700 --> 00:17:19,900
Well this is going to have to be a win32 complete all work I guess.

329
00:17:20,400 --> 00:17:21,000
Like so.

330
00:17:23,200 --> 00:17:26,300
So yeah, so I don't really know.

331
00:17:26,300 --> 00:17:29,600
I mean, this is the tricky part, right?

332
00:17:29,700 --> 00:17:35,900
I think we probably want to work cues like maybe like a high priority

333
00:17:35,900 --> 00:17:38,200
queue and a low priority queue or something like that.

334
00:17:39,100 --> 00:17:40,900
I don't really know, right?

335
00:17:41,600 --> 00:17:45,300
So I think maybe what I'll do here is say that this is the like high

336
00:17:45,400 --> 00:17:48,700
priority queue or something so it's like everything comes off.

337
00:17:48,700 --> 00:17:51,800
This is like high priority stuff and then we'd have like another

338
00:17:52,700 --> 00:17:57,100
That we would use maybe in the future for lower priority work.

339
00:17:57,200 --> 00:17:57,700
I don't know.

340
00:17:58,000 --> 00:17:59,800
I'm that's totally speculative, but I

341
00:18:00,000 --> 00:18:03,600
I want to make sure I don't want to like fences in or anything.

342
00:18:03,800 --> 00:18:07,300
So I just kind of want to make sure that we have the ability to do

343
00:18:07,300 --> 00:18:07,500
that.

344
00:18:07,500 --> 00:18:10,500
So I'm going to make sure that these always talk about a specific Q

345
00:18:10,500 --> 00:18:11,300
all the time.

346
00:18:12,500 --> 00:18:15,500
Just so the platform layer knows which Q you're talking about.

347
00:18:15,800 --> 00:18:18,800
I think I feel a little more comfortable with that happening.

348
00:18:19,500 --> 00:18:22,600
All right, so we've got 13 to complete all work and that's got to

349
00:18:22,600 --> 00:18:23,400
basically be

350
00:18:25,500 --> 00:18:27,400
You know, this, this is actually not what this is.

351
00:18:27,400 --> 00:18:29,300
We're gonna we're gonna have to refactor some of this stuff a little

352
00:18:29,300 --> 00:18:29,800
bit.

353
00:18:30,100 --> 00:18:31,800
It's going to massage it around a little bit.

354
00:18:32,500 --> 00:18:36,600
So what we need to do here is we need to kind of take this stuff that

355
00:18:36,600 --> 00:18:38,700
we had like, the thread proc, right?

356
00:18:39,300 --> 00:18:42,100
We need to take all this stuff and we need to factor it out so that we

357
00:18:42,100 --> 00:18:44,400
can make it work with the API that we had.

358
00:18:44,600 --> 00:18:47,300
Right, that we want, because we figured out how everything needs to

359
00:18:47,300 --> 00:18:51,400
work, but we need to make sure that that we, that we can actually do

360
00:18:51,400 --> 00:18:52,100
it, right?

361
00:18:52,200 --> 00:18:54,100
And we can actually do it in the way we want.

362
00:18:54,400 --> 00:18:55,100
So, when 32,

363
00:18:55,300 --> 00:18:56,200
We all work.

364
00:18:57,800 --> 00:19:01,200
I don't know why work queue entry completed that I didn't mean to do

365
00:19:01,200 --> 00:19:02,400
that state.

366
00:19:04,000 --> 00:19:05,400
This is just a void, right?

367
00:19:06,500 --> 00:19:06,800
Yes.

368
00:19:07,400 --> 00:19:11,200
So I'm going to go ahead and down here, I'm going to say that this

369
00:19:11,800 --> 00:19:16,000
code right here, right, which we were used to be doing which waits to

370
00:19:16,000 --> 00:19:20,400
see to it, you know which basically does the sort of like do work from

371
00:19:20,400 --> 00:19:23,400
the queue until all of the work has been done, right?

372
00:19:23,500 --> 00:19:26,200
I'm going to say that that is when three to complete all work, right?

373
00:19:26,200 --> 00:19:27,900
Because that's essentially what that is.

374
00:19:28,300 --> 00:19:32,000
So when three to complete all work right with that has to do, is that

375
00:19:32,000 --> 00:19:34,900
us to sit there and do this check right?

376
00:19:34,900 --> 00:19:36,100
Which just go ahead and

377
00:19:36,400 --> 00:19:39,200
I'll make it right in line again because we only pulled that out

378
00:19:39,200 --> 00:19:42,400
because I was thinking like, oh, maybe the platform layer will call it

379
00:19:42,400 --> 00:19:44,900
but in this case we don't have that problem anymore.

380
00:19:44,900 --> 00:19:47,700
So I'm just going to let that be inlined and remove this.

381
00:19:48,400 --> 00:19:51,000
So while you know, while the intricate is not equal to the completion

382
00:19:51,000 --> 00:19:55,300
count, meaning while there's still work to do right then we can can do

383
00:19:55,300 --> 00:19:55,900
that.

384
00:19:55,900 --> 00:19:56,600
Do that work.

385
00:19:58,900 --> 00:20:02,900
And what I want to do here is I want to structure this so that the

386
00:20:02,900 --> 00:20:08,000
other call that we have basically this win32 complete all work, just

387
00:20:08,000 --> 00:20:13,400
like it was doing before, can share the do worker work stuff with the

388
00:20:14,400 --> 00:20:15,800
with the thread proc, right?

389
00:20:15,800 --> 00:20:18,800
So whatever the thread proc does will be the same.

390
00:20:22,700 --> 00:20:23,100
Okay.

391
00:20:25,800 --> 00:20:31,800
So in other words, these two functions here want to be able to do

392
00:20:31,800 --> 00:20:32,800
exactly the same thing.

393
00:20:32,800 --> 00:20:38,000
So this guy wants to be able to figure out if there's an entry in the

394
00:20:38,000 --> 00:20:41,800
queue to do and if it is he does it otherwise.

395
00:20:42,500 --> 00:20:45,300
Well, I guess he just keeps spinning actually, right?

396
00:20:45,700 --> 00:20:47,300
So really we want to do here.

397
00:20:47,300 --> 00:20:50,200
It's like do next work queue entry.

398
00:20:50,700 --> 00:20:52,600
I think that's really all we have to do.

399
00:20:52,600 --> 00:20:54,300
I don't think we have to break it out anymore.

400
00:20:55,000 --> 00:20:57,300
So we can just do do next work.

401
00:20:57,300 --> 00:20:59,800
You entry while the entry count is

402
00:21:00,500 --> 00:21:01,000
Correct.

403
00:21:01,000 --> 00:21:02,400
It will do it, right?

404
00:21:02,700 --> 00:21:04,000
Because this is the live thread.

405
00:21:04,000 --> 00:21:05,600
The one that's just going to keep going.

406
00:21:06,500 --> 00:21:09,800
And then all the other threads, what they're going to do is they're

407
00:21:09,800 --> 00:21:11,200
going to say oh okay.

408
00:21:13,500 --> 00:21:15,300
I want to do the same thing.

409
00:21:15,300 --> 00:21:21,700
Do the next work queue entry and if do next work queue entry returns.

410
00:21:21,700 --> 00:21:25,100
Let's say just returns true, then we go to sleep.

411
00:21:25,200 --> 00:21:29,100
So basically, it will tell us whether to go to sleep or not, right?

412
00:21:29,900 --> 00:21:30,500
That makes sense.

413
00:21:31,700 --> 00:21:32,400
So that's it.

414
00:21:33,300 --> 00:21:34,200
And that's really it.

415
00:21:34,200 --> 00:21:35,500
So we could

416
00:21:37,700 --> 00:21:39,200
We could get rid of this as well.

417
00:21:39,400 --> 00:21:39,900
There we go.

418
00:21:40,400 --> 00:21:44,300
And so I think that's again, much cleaner now, right?

419
00:21:44,600 --> 00:21:46,000
So win32 do the next work.

420
00:21:46,000 --> 00:21:48,700
Queue entry win32 - no next,

421
00:21:50,100 --> 00:21:50,500
Oops.

422
00:21:52,700 --> 00:21:53,500
Q entry.

423
00:21:54,500 --> 00:21:57,400
Yeah, the red info cute.

424
00:21:59,000 --> 00:22:03,100
And then in the future, you know, we can make this so that it tries to

425
00:22:03,100 --> 00:22:05,200
do work from either Q, right?

426
00:22:08,300 --> 00:22:09,500
Right, you could imagine.

427
00:22:11,500 --> 00:22:15,500
Us doing something where we did win three to do next work queue entry.

428
00:22:16,500 --> 00:22:21,500
And if that and went through to, you know, other Q, right?

429
00:22:21,500 --> 00:22:23,800
We could pull from multiple queues here and we always pull from this

430
00:22:23,800 --> 00:22:24,700
one first blah blah blah.

431
00:22:24,700 --> 00:22:27,700
So we could we could extend that to work with the multiple threads

432
00:22:27,700 --> 00:22:28,800
pretty easily, I think.

433
00:22:30,200 --> 00:22:30,800
So okay.

434
00:22:31,300 --> 00:22:32,100
With three to do next.

435
00:22:32,100 --> 00:22:33,900
Work queue entry, all that stuff.

436
00:22:33,900 --> 00:22:36,700
Seems reasonable to me.

437
00:22:38,000 --> 00:22:40,400
So what I'm going to do now is I'm just going to write this function

438
00:22:40,400 --> 00:22:43,100
out of the pieces that we have before, which is actually pretty close

439
00:22:43,100 --> 00:22:44,600
to what we originally had to do.

440
00:22:45,200 --> 00:22:47,400
So we're kind of back to where we started, which is good.

441
00:22:47,400 --> 00:22:48,400
I find that I do that a lot.

442
00:22:48,400 --> 00:22:51,900
Sometimes I go on a little diversion and I learned something or I see

443
00:22:51,900 --> 00:22:54,500
this not quite what I wanted, and I pull back and it's good.

444
00:22:55,500 --> 00:22:56,000
So yeah.

445
00:22:56,200 --> 00:22:58,100
Don't ever be worried about that sort of thing.

446
00:22:58,100 --> 00:22:59,800
That's kind of the essence of programming.

447
00:23:00,100 --> 00:23:02,200
It's very hard to foresee things.

448
00:23:02,800 --> 00:23:05,700
So you want to kind of play with them, until you can see it coalesce.

449
00:23:05,700 --> 00:23:08,300
And then you're like, okay, yes, I'm sure this is good now.

450
00:23:09,000 --> 00:23:11,000
And again, you could kind of see how I did that.

451
00:23:11,000 --> 00:23:15,400
I went over to write the usage code and that really educated me,

452
00:23:15,400 --> 00:23:15,700
right?

453
00:23:15,700 --> 00:23:18,900
It was like, oh right, this really could be done, very simply on this

454
00:23:18,900 --> 00:23:21,700
side by just doing this so, you know, maybe that's what we should do.

455
00:23:21,700 --> 00:23:23,600
And it turns out that I think that's going to be good.

456
00:23:23,600 --> 00:23:26,900
So again, the usage code is always a great guide, it's always

457
00:23:26,900 --> 00:23:28,900
something you should look to when you're like, I don't know what the

458
00:23:28,900 --> 00:23:29,800
design is here.

459
00:23:29,900 --> 00:23:31,900
Here, let me see what the usage code is.

460
00:23:31,900 --> 00:23:34,000
Almost always the right decision.

461
00:23:35,900 --> 00:23:42,600
All right, so in do next entry here, obviously, we don't have to do

462
00:23:42,600 --> 00:23:44,900
this completed as valid interlocked increment thing anymore.

463
00:23:44,900 --> 00:23:47,900
We can actually do that down in here, right?

464
00:23:47,900 --> 00:23:49,800
So we don't have, we don't have to worry about any of this stuff.

465
00:23:50,300 --> 00:23:53,100
We don't have to worry about this guy anymore, which is nice as well.

466
00:23:54,400 --> 00:23:57,400
And we could actually now name this actually work queue entry which is

467
00:23:57,400 --> 00:23:58,500
actually kind of nice.

468
00:23:59,000 --> 00:23:59,400
So this is

469
00:24:00,000 --> 00:24:01,200
Merc Q platform work.

470
00:24:01,200 --> 00:24:02,000
Queue entry.

471
00:24:02,300 --> 00:24:05,400
Like some on platform.

472
00:24:05,400 --> 00:24:06,800
Work queue entry.

473
00:24:07,200 --> 00:24:07,800
There we go.

474
00:24:09,800 --> 00:24:16,900
So yeah, platform work queue entry.

475
00:24:18,400 --> 00:24:23,100
Starting to look okay, I should probably go fix this stuff first house

476
00:24:23,100 --> 00:24:24,300
so I can actually compile.

477
00:24:24,700 --> 00:24:29,400
All right, so in here, where we at, where are we at platform?

478
00:24:29,400 --> 00:24:31,500
Work queue platform were cute.

479
00:24:31,600 --> 00:24:35,100
Rick you call back are both defined.

480
00:24:35,100 --> 00:24:39,200
Are they not what we need a little void in.

481
00:24:39,200 --> 00:24:41,200
There we go.

482
00:24:43,900 --> 00:24:45,300
What is the problem?

483
00:24:45,300 --> 00:24:47,100
Why are you complaining?

484
00:24:47,200 --> 00:24:48,900
What are you complaining about?

485
00:24:51,000 --> 00:24:53,000
Typedef void platform work.

486
00:24:53,000 --> 00:24:55,600
You call back and that is correct.

487
00:24:55,800 --> 00:24:56,400
Typedef.

488
00:24:56,400 --> 00:24:58,400
Void platform, add entry.

489
00:24:59,600 --> 00:25:00,000
oh,

490
00:25:01,300 --> 00:25:02,300
so good spelling.

491
00:25:02,800 --> 00:25:03,200
There we go.

492
00:25:04,400 --> 00:25:08,500
So platform add entry cannot convert argument to, from odor load

493
00:25:08,500 --> 00:25:09,500
function platform.

494
00:25:09,500 --> 00:25:11,000
Work you call back.

495
00:25:13,000 --> 00:25:14,100
Is that really true?

496
00:25:14,100 --> 00:25:15,600
What is the problem here?

497
00:25:15,600 --> 00:25:18,000
Let's see and handmade out H.

498
00:25:18,300 --> 00:25:22,000
We have added platform, add entry and platform complete all work, so

499
00:25:22,000 --> 00:25:22,800
that's good.

500
00:25:24,800 --> 00:25:30,400
In handmade H, we have platform at entry, should take a cue, it should

501
00:25:30,400 --> 00:25:33,600
take a call back and it should take some data.

502
00:25:35,200 --> 00:25:38,800
Oh, it's because this guy is not thing.

503
00:25:38,800 --> 00:25:42,200
So, here is where I would like to use the macro again.

504
00:25:42,200 --> 00:25:44,600
People don't really like the macro version.

505
00:25:44,900 --> 00:25:50,800
So I wasn't going to do them for these two guys, but you can kind of

506
00:25:50,800 --> 00:25:53,000
see why this is Handy if we're going to start to have these.

507
00:25:53,000 --> 00:25:53,800
So I want to do this.

508
00:25:54,000 --> 00:26:00,200
Least for this guy platform work, you call back and you give it a name

509
00:26:00,800 --> 00:26:01,400
and then it does.

510
00:26:01,400 --> 00:26:04,400
This guy look so right.

511
00:26:04,900 --> 00:26:07,900
And that way I can do it much more succinctly here.

512
00:26:07,900 --> 00:26:09,900
I can say typedef platform work.

513
00:26:09,900 --> 00:26:13,300
You call back and do it like that.

514
00:26:14,200 --> 00:26:15,600
So, I've got my typedef in there.

515
00:26:17,200 --> 00:26:23,300
and now I can make sure that everyone always does this stuff properly

516
00:26:23,300 --> 00:26:23,700
now,

517
00:26:25,000 --> 00:26:28,400
I probably want to do internal here.

518
00:26:28,800 --> 00:26:29,200
All right?

519
00:26:29,300 --> 00:26:30,100
Like so

520
00:26:36,100 --> 00:26:36,600
There we go.

521
00:26:37,200 --> 00:26:42,100
All right, so I think this can now go away, right?

522
00:26:42,100 --> 00:26:43,400
That disappears.

523
00:26:44,400 --> 00:26:44,800
Go.

524
00:26:45,800 --> 00:26:48,400
And now, we just have to make sure that we actually pass this render

525
00:26:48,400 --> 00:26:52,900
crew Q through and so infill, ground chunk.

526
00:26:52,900 --> 00:26:57,400
It would need to take the cue to use right for this.

527
00:27:00,900 --> 00:27:05,300
And we can totally just store that in our game state or anything else

528
00:27:05,300 --> 00:27:09,300
that we want to in our transient state so we can just use the

529
00:27:09,300 --> 00:27:10,400
translate for that.

530
00:27:10,900 --> 00:27:17,400
For example, we can just do trance State render queue look so on and I

531
00:27:17,400 --> 00:27:20,800
can also do that in the exact same way over here.

532
00:27:22,600 --> 00:27:24,100
No, not there.

533
00:27:24,300 --> 00:27:24,900
There we go.

534
00:27:25,500 --> 00:27:27,400
And state render queue.

535
00:27:28,900 --> 00:27:32,600
And then in the transient State, I'll just go ahead and stick that in

536
00:27:32,600 --> 00:27:32,800
there.

537
00:27:32,800 --> 00:27:33,700
Render queue.

538
00:27:36,600 --> 00:27:38,300
Oops, platform.

539
00:27:38,300 --> 00:27:39,200
Work here.

540
00:27:41,100 --> 00:27:41,700
Render queue.

541
00:27:45,900 --> 00:27:48,200
Compilations process is running.

542
00:27:48,200 --> 00:27:48,700
Kill it.

543
00:27:48,700 --> 00:27:50,300
Yes, I don't know why.

544
00:27:50,300 --> 00:27:52,800
That was asking me that okay.

545
00:27:54,500 --> 00:27:58,600
So now I just have to kind of avoid some of these guys out here.

546
00:27:58,600 --> 00:28:01,200
I shouldn't say hoist them out, but actually, like copy them out.

547
00:28:01,300 --> 00:28:04,900
So when we come in right, if we're not initialized, we want to do a

548
00:28:04,900 --> 00:28:05,800
couple things here.

549
00:28:06,100 --> 00:28:08,600
First of all, if we're not alishan initialized, we want to take

550
00:28:08,600 --> 00:28:10,000
platform, add entry.

551
00:28:10,000 --> 00:28:12,800
And we want that to be equal to memory platform.

552
00:28:12,800 --> 00:28:15,700
At entry, we want to do Platform, finish all work.

553
00:28:15,700 --> 00:28:19,600
We want that to be copied out as well.

554
00:28:19,600 --> 00:28:22,500
And then finally, in the trance State, when we initialize the

555
00:28:22,500 --> 00:28:23,900
transfer, transient state,

556
00:28:24,300 --> 00:28:24,700
Right?

557
00:28:24,700 --> 00:28:28,300
We want to make that have the render queue be in there.

558
00:28:28,300 --> 00:28:32,600
Trance, State render, Q, equals memory, lender Q, right?

559
00:28:32,900 --> 00:28:35,000
I think it was hype called high priority queue.

560
00:28:35,100 --> 00:28:35,700
So, there we go.

561
00:28:36,900 --> 00:28:39,500
So now we just have to finish porting out this stuff.

562
00:28:40,200 --> 00:28:44,100
So we have to do Platform work queue here and make sure all of this

563
00:28:44,100 --> 00:28:45,600
stuff is that way.

564
00:28:45,800 --> 00:28:46,800
It is boiling hot.

565
00:28:46,800 --> 00:28:50,100
In here, by the way, this room gets hot with the computers in the

566
00:28:50,100 --> 00:28:50,500
summer.

567
00:28:51,600 --> 00:28:53,800
It is going to be a sweating Casey.

568
00:28:54,100 --> 00:28:55,100
All right, so

569
00:28:56,900 --> 00:28:59,600
Now we just have win32 do next work queue entry.

570
00:28:59,600 --> 00:29:02,800
Like I was saying before we do our interlocked, compare exchange, we

571
00:29:02,800 --> 00:29:06,000
figure out what index we want to do, assuming that there was one that

572
00:29:06,000 --> 00:29:07,900
we wanted to do now with three to do next.

573
00:29:07,900 --> 00:29:12,100
Work entry, we are now counting on this guy to basically return true

574
00:29:12,300 --> 00:29:14,700
if we should sleep, right?

575
00:29:15,600 --> 00:29:20,400
So we should sleep is going to be false and we're going to return.

576
00:29:20,400 --> 00:29:22,300
We should sleep like, so on.

577
00:29:23,300 --> 00:29:26,200
And the only time that we know that we should sleep

578
00:29:27,100 --> 00:29:32,400
Is if we actually saw these things being equal, right?

579
00:29:33,000 --> 00:29:34,100
We're just like, okay,

580
00:29:40,200 --> 00:29:44,000
if we saw these things being equal, then we should sleep.

581
00:29:44,900 --> 00:29:49,600
Otherwise, we should not sleep because either we did some work, right?

582
00:29:51,200 --> 00:29:56,200
Or we week like tried to do work with somebody else narked us.

583
00:29:56,200 --> 00:29:58,000
And we don't actually know what the state of the queue is.

584
00:29:58,000 --> 00:29:59,800
So we should try again, right?

585
00:30:00,100 --> 00:30:03,800
So we want to make sure that we only sleep when we absolutely are

586
00:30:03,800 --> 00:30:05,500
positive, right?

587
00:30:05,500 --> 00:30:09,900
That we absolutely super double plus know for sure what's going on.

588
00:30:11,300 --> 00:30:15,500
All right, so I'm gonna go ahead and dequeue this entry here, right?

589
00:30:15,500 --> 00:30:17,900
I'm going to say, grab out the entry.

590
00:30:18,000 --> 00:30:20,100
That's in the queue at that location.

591
00:30:21,500 --> 00:30:25,800
you know, the one that was that we were on, we're going to go ahead

592
00:30:25,800 --> 00:30:29,700
and actually dispatch there

593
00:30:30,800 --> 00:30:36,300
So, when I do the dispatch, I should probably actually do a read write

594
00:30:36,300 --> 00:30:37,200
barrier here.

595
00:30:39,700 --> 00:30:41,700
And mmm fence.

596
00:30:42,300 --> 00:30:46,600
And the reason that I say this is because the code that's operating in

597
00:30:46,600 --> 00:30:47,500
here.

598
00:30:47,700 --> 00:30:51,900
Probably, we want to make sure had the opportunity to finish all of

599
00:30:51,900 --> 00:30:53,400
its rights before we keep going.

600
00:30:53,900 --> 00:30:56,200
So I suspect we probably want that.

601
00:30:56,700 --> 00:30:57,800
I could put it to do in here.

602
00:30:57,800 --> 00:31:02,100
This is a double check, this isn't problematic performance wise but

603
00:31:02,100 --> 00:31:04,300
I'm pretty sure there's no way it could be.

604
00:31:05,800 --> 00:31:07,000
Oh no, you know what?

605
00:31:07,100 --> 00:31:09,300
I don't have to do that because interlocked increment.

606
00:31:09,300 --> 00:31:11,500
Does that fence for me, right?

607
00:31:11,600 --> 00:31:15,100
So never mind, interlocked increment, does the fence that we need,

608
00:31:15,900 --> 00:31:16,300
okay?

609
00:31:17,800 --> 00:31:20,100
So we're fine, we're already automatically fencing, so it won't

610
00:31:20,100 --> 00:31:20,500
matter.

611
00:31:21,200 --> 00:31:24,100
So what I want to do now is I got to do the call back, I gotta do the

612
00:31:24,100 --> 00:31:27,500
Callback, passive, the queue, and pass it, the data that it wanted,

613
00:31:27,800 --> 00:31:28,100
right?

614
00:31:28,100 --> 00:31:31,100
And that's basically all I think that we needed to do.

615
00:31:32,500 --> 00:31:35,400
Now, we just have to go make sure that we can fix all the rest of the

616
00:31:35,400 --> 00:31:37,800
stuff that was like our test code and whatever.

617
00:31:38,700 --> 00:31:42,300
So here we go, platform work queue.

618
00:31:42,300 --> 00:31:44,700
There's the queue nothing.

619
00:31:44,700 --> 00:31:46,600
Weird happening their platform.

620
00:31:46,600 --> 00:31:47,400
Go, we don't need that.

621
00:31:47,600 --> 00:31:48,100
More.

622
00:31:48,400 --> 00:31:48,900
All right.

623
00:31:50,900 --> 00:31:55,700
Let's see when 32 thread info platform work.

624
00:31:55,700 --> 00:32:01,900
You, that's looks all fine.

625
00:32:02,600 --> 00:32:03,100
Work.

626
00:32:03,100 --> 00:32:05,900
You entry do worker work.

627
00:32:05,900 --> 00:32:06,600
So, do work.

628
00:32:06,600 --> 00:32:12,200
Our work is now going to take a void Star, right?

629
00:32:13,900 --> 00:32:19,600
Data will actually I'll just use the this use the macro that I made.

630
00:32:21,200 --> 00:32:24,000
So here's our do worker work, which is just our little test function.

631
00:32:26,200 --> 00:32:26,800
Internal.

632
00:32:28,200 --> 00:32:33,500
And that is just going to print out whatever we have.

633
00:32:33,500 --> 00:32:35,500
We don't know the logical thread index anymore.

634
00:32:35,700 --> 00:32:38,700
Unfortunately, although we could actually have that passed in

635
00:32:41,500 --> 00:32:42,500
In fact, why not?

636
00:32:44,200 --> 00:32:50,100
I guess there's really no reason not to well, let's, let's

637
00:32:51,800 --> 00:32:55,400
Let's let's chill on that for a second.

638
00:32:55,400 --> 00:32:56,400
Well you know what?

639
00:32:56,400 --> 00:32:58,600
For our test code we totally could do it this way.

640
00:32:58,800 --> 00:32:59,600
In fact.

641
00:33:00,100 --> 00:33:01,800
And for our test code, let's go ahead and do this.

642
00:33:02,000 --> 00:33:04,600
Get current Red ID.

643
00:33:07,400 --> 00:33:13,600
So, get current thread ID will at least give us a thread to print.

644
00:33:13,700 --> 00:33:16,500
It will not be the kind of thread number we were using before because

645
00:33:16,500 --> 00:33:19,400
it will be whatever the operating system assigned, right?

646
00:33:19,400 --> 00:33:23,600
But that will tell us something we can see here to see which threads

647
00:33:24,000 --> 00:33:24,900
we're doing what?

648
00:33:25,100 --> 00:33:26,400
So that's fine.

649
00:33:27,000 --> 00:33:30,000
So here's our data, we can do that, right?

650
00:33:30,000 --> 00:33:34,900
But debug string, everything looks fine here, push string, no longer

651
00:33:34,900 --> 00:33:36,600
needs to be that we can just

652
00:33:37,000 --> 00:33:41,300
Wait up call, win32, add entry, right?

653
00:33:42,000 --> 00:33:44,300
Because that's, that's all we're actually talking about here.

654
00:33:44,300 --> 00:33:46,900
So push string becomes 13 to add entry.

655
00:33:50,700 --> 00:33:52,300
And let's see.

656
00:33:52,300 --> 00:33:54,500
Work queue is now platform work queue.

657
00:33:56,000 --> 00:34:00,800
And win32 add entry now, has to take the Callback as well.

658
00:34:00,800 --> 00:34:04,200
So that's a take do worker work, right?

659
00:34:05,200 --> 00:34:08,900
So I'm going to go ahead and replace this with do worker work.

660
00:34:12,400 --> 00:34:12,800
Oops.

661
00:34:18,400 --> 00:34:19,600
That's kind of amazing.

662
00:34:19,699 --> 00:34:25,600
I missed the I accidentally forgot to leave the thing and it made this

663
00:34:25,600 --> 00:34:27,600
nice striped pattern without the quote.

664
00:34:29,000 --> 00:34:29,900
About the double quote.

665
00:34:34,500 --> 00:34:34,900
There we go.

666
00:34:36,600 --> 00:34:39,000
Okay, so went through to complete.

667
00:34:39,000 --> 00:34:41,900
All work takes the cue.

668
00:34:44,000 --> 00:34:46,900
Okay, so let's see where we're at.

669
00:34:46,900 --> 00:34:49,400
Here, we should probably step through this because we made a ton of

670
00:34:49,400 --> 00:34:52,199
money modifications to it.

671
00:34:52,400 --> 00:34:57,000
We also need to make a quick trip into the initialization code here

672
00:34:57,000 --> 00:35:01,100
because the initialization code before it calls, anything needs to

673
00:35:01,100 --> 00:35:04,400
properly set these values, right?

674
00:35:04,400 --> 00:35:09,300
So what we need to do here is when we set up game memory, right?

675
00:35:11,100 --> 00:35:13,000
And we set those debug calls.

676
00:35:13,000 --> 00:35:17,200
Now we actually have to do like the the different things that we said

677
00:35:17,200 --> 00:35:20,600
we were going to set these guys have to all be in there so we need to

678
00:35:20,800 --> 00:35:22,400
provide a high priority queue.

679
00:35:23,500 --> 00:35:29,900
We need to provide platform at entry platform complete all work right.

680
00:35:32,400 --> 00:35:32,900
Like so.

681
00:35:35,300 --> 00:35:36,100
That's win32.

682
00:35:36,100 --> 00:35:38,000
Add entry went through to complete all work.

683
00:35:38,500 --> 00:35:43,500
And then this right here can literally just be this Q so we can

684
00:35:43,500 --> 00:35:44,900
actually call it Q.

685
00:35:45,300 --> 00:35:47,600
So that's, we can even use that one, right?

686
00:35:48,300 --> 00:35:54,100
And the only problem that we have so far is that now we don't actually

687
00:35:54,500 --> 00:35:55,500
RQ.

688
00:35:55,900 --> 00:35:57,900
Never resets, right?

689
00:35:58,800 --> 00:35:59,800
So for the time being

690
00:36:00,000 --> 00:36:02,500
And this is not the way that I actually want to do it eventually but

691
00:36:02,500 --> 00:36:06,900
for the time, being whenever work is completed, so all the work in the

692
00:36:06,900 --> 00:36:08,200
queue has been completed.

693
00:36:08,600 --> 00:36:11,800
I will go ahead and at that time, reset the queue

694
00:36:13,000 --> 00:36:13,500
Right.

695
00:36:17,100 --> 00:36:22,100
So right then I'll just do queue entry, count completion, count.

696
00:36:22,900 --> 00:36:28,800
Q next entry to do you area, right?

697
00:36:29,800 --> 00:36:33,900
So that's it for the moment, nothing else going on their platform

698
00:36:33,900 --> 00:36:34,700
work.

699
00:36:34,700 --> 00:36:36,000
You, here we go.

700
00:36:37,500 --> 00:36:41,800
So yeah, so I'll just run it, just for fun, but we kind of need to

701
00:36:41,800 --> 00:36:44,300
step through its now and make sure that we're doing anything,

702
00:36:44,300 --> 00:36:45,600
resembling anything really?

703
00:36:47,200 --> 00:36:47,800
So, okay.

704
00:36:50,500 --> 00:36:52,000
So, here we go.

705
00:36:52,000 --> 00:36:54,000
We've got our threads, their printing stuff out.

706
00:36:54,300 --> 00:36:55,700
Looks like we actually did work.

707
00:36:55,700 --> 00:36:59,000
One, two, three, four.

708
00:36:59,300 --> 00:37:03,100
Yeah, it looks looks good and we have a bunch of different Fred's

709
00:37:03,100 --> 00:37:05,000
doing their thing so that's all fine.

710
00:37:06,300 --> 00:37:11,400
And hey you know, surprisingly enough the game actually worked which

711
00:37:11,400 --> 00:37:12,100
is weird.

712
00:37:12,100 --> 00:37:12,700
There we go.

713
00:37:12,700 --> 00:37:15,900
I was expecting something to go poorly there, right?

714
00:37:15,900 --> 00:37:18,600
I'm expecting this thing to kind of died.

715
00:37:18,600 --> 00:37:20,100
A horrible death, but, but

716
00:37:20,300 --> 00:37:20,900
For some reason.

717
00:37:20,900 --> 00:37:21,600
It wasn't.

718
00:37:22,500 --> 00:37:22,700
Yeah.

719
00:37:22,700 --> 00:37:24,000
And I don't know why it's not dying.

720
00:37:24,000 --> 00:37:24,500
A horrible death.

721
00:37:24,500 --> 00:37:25,100
There we go.

722
00:37:26,400 --> 00:37:28,200
I was going to say, it should die.

723
00:37:28,200 --> 00:37:29,200
A horrible death.

724
00:37:29,200 --> 00:37:30,100
It is not dying.

725
00:37:30,100 --> 00:37:30,900
A horrible death.

726
00:37:31,000 --> 00:37:31,900
I don't know why.

727
00:37:32,900 --> 00:37:37,000
Oh my goodness pixel is like totally garbage.

728
00:37:37,600 --> 00:37:38,600
So that's always fun.

729
00:37:39,400 --> 00:37:44,100
Anyway, so we've got work to do to clean this up but already, we're

730
00:37:44,100 --> 00:37:45,700
actually at least working.

731
00:37:45,900 --> 00:37:49,700
So this is running through the threads which is nice, right?

732
00:37:50,200 --> 00:37:56,000
So so we're not we're not totally broken, we're just, we're just not

733
00:37:56,400 --> 00:38:00,600
really good, one might say so.

734
00:38:00,600 --> 00:38:03,000
Okay, so let's take a look here.

735
00:38:10,200 --> 00:38:14,300
I guess one thing so I already know is wrong.

736
00:38:14,300 --> 00:38:18,200
I mean we'll just start taking taking a look at things.

737
00:38:19,200 --> 00:38:24,000
So before I do any debugging here, what I would also like to do is I

738
00:38:24,000 --> 00:38:25,100
would probably liked.

739
00:38:25,100 --> 00:38:27,600
I would like to probably convert this guy.

740
00:38:27,700 --> 00:38:28,200
Like what?

741
00:38:28,200 --> 00:38:29,100
Here's what I'm thinking?

742
00:38:29,900 --> 00:38:32,600
Instead of stepping through this and validating that all works, and

743
00:38:32,600 --> 00:38:35,700
then changing it to a circular buffer and introducing more bugs and

744
00:38:35,700 --> 00:38:37,900
then debugging that, I'm wondering, if I shouldn't just change it to

745
00:38:37,900 --> 00:38:38,800
the circular buffer first.

746
00:38:38,800 --> 00:38:39,800
And then start to

747
00:38:40,000 --> 00:38:43,500
Hang it so that we're only debugging one thing which seems a little

748
00:38:43,500 --> 00:38:43,900
bit.

749
00:38:46,000 --> 00:38:47,000
More sane.

750
00:38:47,000 --> 00:38:51,700
Also, this isn't thread safe right now so you know, because this

751
00:38:51,700 --> 00:38:55,100
hasn't guaranteed that people have gone to sleep, for example, right?

752
00:38:55,100 --> 00:38:58,800
So so what I would like to do is I'd like to do that first.

753
00:38:58,800 --> 00:38:59,900
So I mean that even,

754
00:39:00,000 --> 00:39:02,300
Is a cause of a bug that we could have, right?

755
00:39:02,700 --> 00:39:03,300
So anyway,

756
00:39:04,900 --> 00:39:08,700
so let's see what we can do to make this into a circular buffer,

757
00:39:09,200 --> 00:39:09,700
right?

758
00:39:10,300 --> 00:39:13,100
So what we want to do for a circular buffer is we want to have

759
00:39:13,100 --> 00:39:17,500
essentially two, we want to sort of change the nomenclature a little

760
00:39:17,500 --> 00:39:22,500
bit here to just say, we have, you know, a place where writing to a

761
00:39:22,500 --> 00:39:25,800
place where reading from and then we have a completion that's in

762
00:39:25,800 --> 00:39:30,100
between their right and we want these to be able to kind of wrap

763
00:39:30,200 --> 00:39:34,600
around potentially into into the buffer, right?

764
00:39:35,500 --> 00:39:39,000
so, one thing I could do in theory,

765
00:39:43,200 --> 00:39:49,400
Like the cheesy way to do this would be to just change this to a un 64

766
00:39:49,500 --> 00:39:52,900
and always just mod into the entry table, right?

767
00:39:53,000 --> 00:39:54,200
That would always work, just fine.

768
00:39:55,500 --> 00:40:01,600
But since we are already doing an interlocked compare exchange, I

769
00:40:01,600 --> 00:40:06,500
think and I can't think of any reason why this wouldn't be true.

770
00:40:07,100 --> 00:40:14,700
I think, if we just use interlock compare Exchange in both cases, we

771
00:40:14,700 --> 00:40:19,000
should be able to just handle the wrapping and it shouldn't be a big

772
00:40:19,000 --> 00:40:19,500
deal.

773
00:40:26,000 --> 00:40:27,000
Lisa seems that way.

774
00:40:27,300 --> 00:40:28,800
So let's let's take a look.

775
00:40:29,200 --> 00:40:31,300
Let's just take a look at doing it that way, so that we don't have to

776
00:40:31,300 --> 00:40:34,900
worry about Q rapping, being an issue.

777
00:40:36,300 --> 00:40:40,300
So here's what I'm going to change these to be called, right?

778
00:40:40,300 --> 00:40:42,700
I'm going to call entry completion.

779
00:40:42,700 --> 00:40:52,400
Count will actually be like something like probably next entry to

780
00:40:52,400 --> 00:40:53,200
complete.

781
00:40:55,100 --> 00:41:00,200
Right or, or first, uncompleted entry about that, right?

782
00:41:01,500 --> 00:41:09,700
Then we're going to have next entry to use or something, or to fill to

783
00:41:09,700 --> 00:41:12,700
write and next entry to read

784
00:41:15,500 --> 00:41:16,300
Something like this.

785
00:41:17,000 --> 00:41:20,900
And so I just want these guys to constantly go through the buffer and

786
00:41:20,900 --> 00:41:22,300
wrap around, right?

787
00:41:22,600 --> 00:41:24,600
So when we do win32, add entry,

788
00:41:26,200 --> 00:41:31,300
What I actually want to do here is I want to assert that the next

789
00:41:31,300 --> 00:41:35,600
entry to write is not equal to.

790
00:41:36,800 --> 00:41:40,900
I want to basically assert that if I was going to write something, if

791
00:41:40,900 --> 00:41:42,700
I was going to write something into the buffer,

792
00:41:45,600 --> 00:41:48,900
That we haven't like wrapped around, right?

793
00:41:50,700 --> 00:41:54,900
So, in order to do that, what I would need to do is say that.

794
00:41:55,700 --> 00:41:58,800
If the next if by writing into this entry,

795
00:42:00,500 --> 00:42:03,400
I would overwrite an entry that's already there.

796
00:42:04,700 --> 00:42:07,400
Then that would be a problem, right?

797
00:42:07,800 --> 00:42:10,700
I'm trying to think of what the easiest way to do that would be, I

798
00:42:10,700 --> 00:42:15,700
mean because it seems a little bit ugly to try and do that.

799
00:42:23,000 --> 00:42:26,700
I'm trying to think of what the easiest way to do that would be for

800
00:42:29,400 --> 00:42:32,800
not leaving space in between the two of them, right?

801
00:42:37,100 --> 00:42:42,200
It's been a long day, it has been a long day circular buffers at the

802
00:42:42,200 --> 00:42:43,200
end of a long day.

803
00:42:44,800 --> 00:42:45,600
It's a little rough.

804
00:42:48,000 --> 00:42:51,600
I'm going to pop over to the Blackboard so that I can think this

805
00:42:51,600 --> 00:42:52,000
through.

806
00:42:53,700 --> 00:42:54,900
so, circular

807
00:42:57,000 --> 00:42:57,900
Fifo here.

808
00:43:00,700 --> 00:43:01,200
so,

809
00:43:03,700 --> 00:43:04,500
Here we go.

810
00:43:04,800 --> 00:43:06,600
We've got this dude, right.

811
00:43:06,600 --> 00:43:08,000
He's got a bunch of entries in him.

812
00:43:09,000 --> 00:43:15,500
And what we want to do is we want to say, you know, if I have to read

813
00:43:15,500 --> 00:43:19,000
and, you know, if this is the read location, right?

814
00:43:19,700 --> 00:43:22,900
I need something that sort of says, where I'm reading.

815
00:43:23,200 --> 00:43:28,900
I need something that says like, where the the you know where I'm

816
00:43:28,900 --> 00:43:32,100
where I'm writing to, right, so I keep adding entries.

817
00:43:32,400 --> 00:43:35,200
That point in moving, this forward and the read.

818
00:43:35,200 --> 00:43:37,500
All the other threads are pulling things off of this buffer.

819
00:43:37,500 --> 00:43:39,600
So the Reed is moving forwards, right?

820
00:43:40,800 --> 00:43:45,300
And what I wanted to figure out is, well, when these guys are wrapped

821
00:43:45,300 --> 00:43:46,200
around, right?

822
00:43:46,200 --> 00:43:49,000
Like when the right, if the right corner comes around here, I just

823
00:43:49,000 --> 00:43:50,200
wanted to be able to assert that.

824
00:43:50,200 --> 00:43:53,800
It doesn't go past the read pointer, you know what I'm saying?

825
00:43:56,300 --> 00:44:01,600
And so I guess I will just leave a space and say if the right pointer

826
00:44:02,300 --> 00:44:05,700
Moving the right pointer would collide with the read pointer you can't

827
00:44:05,700 --> 00:44:09,300
write like that's you've overflowed the Q right?

828
00:44:10,700 --> 00:44:12,600
So I think that's just what I want to say.

829
00:44:12,600 --> 00:44:17,600
I think I want to say if the next entry to write plus 1, right?

830
00:44:20,000 --> 00:44:21,900
Madhvi the entry count.

831
00:44:26,800 --> 00:44:27,300
so,

832
00:44:30,900 --> 00:44:38,600
If moving one forward, would make me equal to whatever the next entry

833
00:44:38,600 --> 00:44:39,400
is to read.

834
00:44:41,500 --> 00:44:42,900
Then I'm going to just consider that.

835
00:44:42,900 --> 00:44:47,100
That's that's bogus, you've put yourself in a bad condition.

836
00:44:47,100 --> 00:44:51,900
I've technically you still, you still could run in that configuration,

837
00:44:51,900 --> 00:44:52,500
right?

838
00:44:52,500 --> 00:44:59,100
You it's the one after that that would be bogus but I don't want to it

839
00:44:59,100 --> 00:44:59,500
puts the

840
00:45:00,100 --> 00:45:03,300
To an invalid state in because the pointers are now pointing to the

841
00:45:03,300 --> 00:45:04,300
same place simply that.

842
00:45:04,700 --> 00:45:06,500
So I'll just leave it that way.

843
00:45:08,900 --> 00:45:12,700
So assuming that that's okay, then the one that we're going to get is

844
00:45:12,700 --> 00:45:14,100
the next entry to, right?

845
00:45:14,700 --> 00:45:18,400
We're going to write into it then we're going to increment the next

846
00:45:18,400 --> 00:45:21,700
entry to right and we're going to release a semaphore, right?

847
00:45:22,600 --> 00:45:25,300
But when we increment the next entry to right, now what we would like

848
00:45:25,300 --> 00:45:30,600
to do is say if the cues next entry to write equals the the array

849
00:45:30,600 --> 00:45:35,100
count, we want it to jump back to zero, right?

850
00:45:35,600 --> 00:45:38,400
So in some sense, what we want to say is this

851
00:45:39,200 --> 00:45:44,900
IQ extension to write plus 1 mod array, count entries.

852
00:45:46,200 --> 00:45:48,000
Right, which is the thing we wrote above.

853
00:45:48,000 --> 00:45:55,000
So I think what I'll probably do is just say, oh okay, new next entry,

854
00:45:55,600 --> 00:45:56,300
right?

855
00:45:56,700 --> 00:46:00,700
I'll just say this is what it's going to be right, that's what we're

856
00:46:00,700 --> 00:46:01,600
going to do.

857
00:46:02,600 --> 00:46:07,200
And so I'll say, make sure that the new next entry to write isn't

858
00:46:07,200 --> 00:46:09,300
equal to the next entry to read.

859
00:46:09,300 --> 00:46:11,800
Because if it is, that would be bad news, right?

860
00:46:14,000 --> 00:46:16,100
So that seems okay, right?

861
00:46:16,800 --> 00:46:17,100
I know.

862
00:46:17,300 --> 00:46:21,800
I don't see anything problematic there that seems fine.

863
00:46:28,000 --> 00:46:31,100
Yeah, that seems totally fine.

864
00:46:31,700 --> 00:46:34,700
So now, this guy is a little bit trickier, right?

865
00:46:34,700 --> 00:46:37,200
First, uncompleted entry is a little bit trickier.

866
00:46:38,000 --> 00:46:42,300
I'm fact, I think first uncompleted entry might not be like when we

867
00:46:42,300 --> 00:46:45,100
start making this Q, be able to have more people in it.

868
00:46:45,100 --> 00:46:47,600
We're going to have to actually have these things be able to external.

869
00:46:47,600 --> 00:46:50,800
So this is I think this is still going to be like completion, count

870
00:46:51,000 --> 00:46:54,900
like a different thing and we're going to have completion, count be

871
00:46:54,900 --> 00:46:57,000
something that actually does reset in that way.

872
00:46:57,900 --> 00:46:58,300
Right.

873
00:46:59,800 --> 00:47:00,500
So okay.

874
00:47:02,600 --> 00:47:10,000
So, if we do all of that, then we because we're going to have to do is

875
00:47:10,000 --> 00:47:11,100
have multiple completion counts.

876
00:47:11,100 --> 00:47:13,400
So everyone who has a job will have to have a separate completion

877
00:47:13,400 --> 00:47:16,900
counter, everyone who has like a set of jobs that they need to wait on

878
00:47:16,900 --> 00:47:19,400
will have to have like a separate, completion counter basically right,

879
00:47:19,400 --> 00:47:21,700
if they're in the same queue.

880
00:47:21,700 --> 00:47:28,400
So, anyway, now we can do the exact same thing.

881
00:47:28,400 --> 00:47:31,600
We were doing here, which is to say original index entry to do.

882
00:47:33,900 --> 00:47:36,400
Q next entry to do, right?

883
00:47:36,900 --> 00:47:38,700
And that's the one that it's going to read from.

884
00:47:38,700 --> 00:47:44,800
So it still does exactly the same thing but instead, it does new next

885
00:47:44,800 --> 00:47:48,700
entry to do and it's really an extension to read now, right next entry

886
00:47:48,700 --> 00:47:49,400
to read.

887
00:47:51,400 --> 00:47:54,800
We go original next entry to read.

888
00:47:57,200 --> 00:47:59,800
Your next entry to read and the news.

889
00:48:00,000 --> 00:48:01,100
Century to read.

890
00:48:03,600 --> 00:48:08,100
Is just the same as the same as this complication up here, right?

891
00:48:08,400 --> 00:48:09,300
We're just doing this.

892
00:48:10,700 --> 00:48:15,600
Next entry to read + 1 and remaining by the entries.

893
00:48:16,400 --> 00:48:17,500
So we do that.

894
00:48:17,500 --> 00:48:20,800
We do the original next entry to read, we do next Century to read like

895
00:48:20,800 --> 00:48:21,200
so,

896
00:48:22,800 --> 00:48:26,800
we check to make sure that the original next entry to read is not

897
00:48:26,800 --> 00:48:27,500
equal to

898
00:48:28,700 --> 00:48:32,200
Q next entry to write so that it has not caught up to the right

899
00:48:32,200 --> 00:48:32,700
cursor.

900
00:48:34,000 --> 00:48:38,400
We then go ahead and do that exchange new next entry to read with

901
00:48:38,500 --> 00:48:43,600
original next entry to read like so and then assuming that the one

902
00:48:43,600 --> 00:48:46,200
that came back was the original next entry to read.

903
00:48:46,200 --> 00:48:49,400
We go ahead and we do it.

904
00:48:50,700 --> 00:48:53,600
And we think the completion can't, right?

905
00:48:54,700 --> 00:49:00,200
And so that now, I think should be a little bit more in line with,

906
00:49:00,200 --> 00:49:01,700
with doing the circular buffer stuff.

907
00:49:03,200 --> 00:49:04,000
So this is hoops.

908
00:49:04,000 --> 00:49:05,900
This is q and trees.

909
00:49:06,200 --> 00:49:06,800
Look so

910
00:49:10,000 --> 00:49:16,900
Next entry to write new next entry to write that's a typo next entry

911
00:49:16,900 --> 00:49:17,600
to do.

912
00:49:19,100 --> 00:49:21,300
Next entry to read.

913
00:49:23,000 --> 00:49:24,600
and,

914
00:49:26,400 --> 00:49:29,800
Q, did you count?

915
00:49:32,500 --> 00:49:33,900
He's like to entry completion.

916
00:49:33,900 --> 00:49:34,400
Count.

917
00:49:34,700 --> 00:49:35,300
Ah.

918
00:49:41,200 --> 00:49:44,300
So again like I said, these are going to have to be a little more

919
00:49:44,300 --> 00:49:44,900
General.

920
00:49:45,400 --> 00:49:48,100
So what we want to do here is have some way of knowing when a batch of

921
00:49:48,100 --> 00:49:49,400
jobs has completed.

922
00:49:49,800 --> 00:49:53,900
So what we really want is something that's sort of, you know, it's

923
00:49:53,900 --> 00:49:57,500
like we've got a completion.

924
00:49:58,700 --> 00:50:03,000
You know, goal and a completion Target basically.

925
00:50:03,700 --> 00:50:05,500
So we've got like our completion goal.

926
00:50:05,500 --> 00:50:08,300
Every time we add an entry, right?

927
00:50:08,400 --> 00:50:10,500
We need that to increase.

928
00:50:11,200 --> 00:50:13,600
So, you know, every time through here, right?

929
00:50:13,600 --> 00:50:17,400
We would want to Ink the completion goal and later they'd be different

930
00:50:17,400 --> 00:50:18,400
completion goals.

931
00:50:18,800 --> 00:50:22,900
And then every time in here, we the completion count.

932
00:50:23,000 --> 00:50:27,200
We then just want to see, while the completion goal is not equal to

933
00:50:27,200 --> 00:50:28,300
the completion count.

934
00:50:28,700 --> 00:50:29,300
Right.

935
00:50:34,200 --> 00:50:36,600
So I think that's roughly correct.

936
00:50:39,700 --> 00:50:40,900
But yeah, we're going to have to test.

937
00:50:40,900 --> 00:50:42,600
That does not look good.

938
00:50:43,000 --> 00:50:46,200
It does not look good ladies and gentlemen, but I think that's roughly

939
00:50:46,200 --> 00:50:46,600
correct.

940
00:50:47,200 --> 00:50:48,900
So let's go ahead and take a look at it.

941
00:50:50,400 --> 00:50:52,000
Oh, but this part work, just fine.

942
00:50:52,100 --> 00:50:53,100
Which is a little bit odd.

943
00:50:53,300 --> 00:50:56,800
I wasn't expecting one of them to work properly in the other one, not

944
00:50:56,800 --> 00:50:59,600
two, but I guess that just means are wrapping

945
00:51:00,000 --> 00:51:01,700
Not working properly, right?

946
00:51:03,200 --> 00:51:07,400
So what I'd like to do is to test the rapping, I would like to set

947
00:51:07,400 --> 00:51:11,400
this down to a level where the wrapping is going to happen more

948
00:51:11,400 --> 00:51:13,100
frequently, right?

949
00:51:13,700 --> 00:51:18,500
So I want to do something where we'll guarantee that we will wrap and

950
00:51:18,500 --> 00:51:20,300
then, you know, in our test code.

951
00:51:20,300 --> 00:51:23,200
So what I'm going to do is I'm just going to make it so that we will

952
00:51:23,200 --> 00:51:27,300
definitely wrap, right, I'll make it so we only had like ten entries

953
00:51:27,300 --> 00:51:29,200
in here or something like this.

954
00:51:29,800 --> 00:51:32,600
And then you know, when I run it in theory that

955
00:51:32,800 --> 00:51:36,400
Make whatever is going to happen, happen, like right away, right?

956
00:51:37,400 --> 00:51:39,900
If that makes sense, least that's the Hope.

957
00:51:39,900 --> 00:51:40,300
Anyway.

958
00:51:44,900 --> 00:51:45,300
Well.

959
00:51:47,800 --> 00:51:53,000
I guess not because that's in the renderer so the wrapping actually

960
00:51:53,200 --> 00:51:55,400
didn't fail there.

961
00:51:57,400 --> 00:52:00,600
Which is kind of annoying but okay.

962
00:52:00,700 --> 00:52:03,600
Anyway, what you gonna do?

963
00:52:03,700 --> 00:52:07,200
I'm gonna step through the code so that I can see what's wrong with

964
00:52:07,200 --> 00:52:07,500
it.

965
00:52:08,000 --> 00:52:11,400
I was kind of hoping that we would be able to make the bug happen

966
00:52:11,400 --> 00:52:12,000
right there.

967
00:52:12,000 --> 00:52:16,600
But I guess the answer is when you start the day off with an owl, the

968
00:52:16,600 --> 00:52:19,300
shame you don't deserve things to go your way.

969
00:52:19,300 --> 00:52:21,500
Potentially could be one way to think of it.

970
00:52:22,100 --> 00:52:24,500
All right, so let's take a look inside win32.

971
00:52:24,500 --> 00:52:25,300
Add entry.

972
00:52:26,300 --> 00:52:26,900
Is our cue.

973
00:52:28,700 --> 00:52:29,500
There it is.

974
00:52:30,800 --> 00:52:32,700
It only has a few entries here.

975
00:52:33,400 --> 00:52:37,200
So we come through and we push the first thing on their there is the

976
00:52:37,200 --> 00:52:38,600
first thing that we picked.

977
00:52:38,800 --> 00:52:41,200
We now have a completion goal of one, because there's one thing in the

978
00:52:41,200 --> 00:52:42,300
queue that needs to get done.

979
00:52:43,100 --> 00:52:45,400
We update the next entry to write moving it forward.

980
00:52:45,400 --> 00:52:47,600
So we also kick off a thread, right?

981
00:52:47,700 --> 00:52:48,500
So that's fine.

982
00:52:49,200 --> 00:52:50,500
Let's jump back in here.

983
00:52:51,100 --> 00:52:52,400
Take another, look at the queue.

984
00:52:52,800 --> 00:52:56,600
You can see we've already read what entry so that already got done

985
00:52:56,600 --> 00:52:58,100
that entry already happened.

986
00:52:58,900 --> 00:53:00,400
So we come through here, we push on.

987
00:53:00,600 --> 00:53:02,900
Pull back, we do the fence.

988
00:53:03,300 --> 00:53:06,800
We take a look at the new next entry to right, and that's going to

989
00:53:06,800 --> 00:53:08,900
update, so that's looking fine.

990
00:53:08,900 --> 00:53:12,500
I'm going to go ahead and jump ahead here to the part where we get to

991
00:53:12,500 --> 00:53:13,800
the wrapping boundary.

992
00:53:15,300 --> 00:53:17,100
So we come in here, right?

993
00:53:17,200 --> 00:53:19,900
And we now have an extension to write of 9.

994
00:53:20,100 --> 00:53:24,100
So the new next entry to write should be 0 and it is, we come through

995
00:53:24,100 --> 00:53:24,700
here?

996
00:53:25,500 --> 00:53:28,400
We set that next integer, right?

997
00:53:28,400 --> 00:53:30,400
Is 0, completion, goal got increment.

998
00:53:30,500 --> 00:53:32,600
It again as it should have.

999
00:53:33,700 --> 00:53:37,200
So now we're going to do that sleep 1000, all of these threads printed

1000
00:53:37,200 --> 00:53:38,700
out all the strings that we have there.

1001
00:53:39,300 --> 00:53:43,600
So our completion goal and our account, or both 10, which is what we

1002
00:53:43,600 --> 00:53:46,500
would expect, we're on the zeroeth guy.

1003
00:53:47,200 --> 00:53:50,800
So that's we wrapped around the Q which is what we would also expect.

1004
00:53:52,000 --> 00:53:57,200
So yeah, we've added in each one of these guys goes ahead and adds in

1005
00:54:00,000 --> 00:54:05,000
Exactly as we would expect and wraps around again the completion goal

1006
00:54:05,300 --> 00:54:07,100
finishes up and off.

1007
00:54:07,100 --> 00:54:07,700
We go.

1008
00:54:08,400 --> 00:54:09,700
So how many of these did we get?

1009
00:54:09,700 --> 00:54:12,300
1 2 3 4 5 6 7 8.

1010
00:54:12,300 --> 00:54:16,700
9 10 1 2 3 4 5 6 7 8 9 10.

1011
00:54:16,900 --> 00:54:18,500
Yeah so

1012
00:54:20,700 --> 00:54:21,900
that all looks good.

1013
00:54:24,000 --> 00:54:25,200
Which is kind of bizarre.

1014
00:54:27,400 --> 00:54:29,500
So, yeah.

1015
00:54:30,400 --> 00:54:31,100
Yeah.

1016
00:54:31,100 --> 00:54:33,300
We've got something sudden more subtle.

1017
00:54:34,100 --> 00:54:36,200
That is wrong, I guess.

1018
00:54:37,700 --> 00:54:39,000
But I don't know what it is.

1019
00:54:39,700 --> 00:54:44,500
So I guess the other thing I can test is just to see if there's any

1020
00:54:44,500 --> 00:54:49,300
chance we can make it more be clearly about the wrapping or not is

1021
00:54:49,300 --> 00:54:50,600
make it very large.

1022
00:54:52,500 --> 00:54:56,500
So this just doesn't seem to be about the wrapping at all.

1023
00:54:59,200 --> 00:55:02,800
We're just full on not completing right?

1024
00:55:02,800 --> 00:55:04,500
So that seems like it's about.

1025
00:55:04,500 --> 00:55:10,300
It's more about our that seems like it's more about our completion

1026
00:55:10,300 --> 00:55:14,600
code not about are our actual wrapping code which is not what I would

1027
00:55:14,600 --> 00:55:15,400
have expected.

1028
00:55:16,600 --> 00:55:17,000
Okay?

1029
00:55:17,000 --> 00:55:21,000
So let's see here, we are in the main thread.

1030
00:55:21,600 --> 00:55:22,700
We're inside complete.

1031
00:55:22,700 --> 00:55:23,300
All work.

1032
00:55:23,600 --> 00:55:26,400
At the completion goal is 16 to completion.

1033
00:55:26,400 --> 00:55:28,200
Counties 17.

1034
00:55:29,500 --> 00:55:30,700
Ha ha.

1035
00:55:31,400 --> 00:55:34,000
So we still got a race condition in here.

1036
00:55:34,500 --> 00:55:36,800
So, okay, so this is good.

1037
00:55:36,800 --> 00:55:37,800
We've pared it down.

1038
00:55:37,900 --> 00:55:42,400
We now know what are, you know what our Target is?

1039
00:55:42,600 --> 00:55:44,700
The completion goal code that I just sloppily added.

1040
00:55:44,700 --> 00:55:46,200
There is not correct.

1041
00:55:47,000 --> 00:55:50,500
Well, the completion goal code is correct or has no indication that

1042
00:55:50,500 --> 00:55:50,800
it's wrong.

1043
00:55:50,800 --> 00:55:51,200
Yet.

1044
00:55:51,600 --> 00:55:52,600
This is the problem.

1045
00:55:52,600 --> 00:55:57,000
Our completion count is not is not operating correctly.

1046
00:55:59,000 --> 00:56:01,000
So, let's take a look at what's happening there.

1047
00:56:01,000 --> 00:56:03,600
So we know that when we come into this guy, this is the guy who does

1048
00:56:03,600 --> 00:56:05,500
all the adding, this is the producer or comes in here.

1049
00:56:05,500 --> 00:56:10,000
So we know that completion goal kind of has to be set correctly by

1050
00:56:10,000 --> 00:56:11,300
that point, right.

1051
00:56:11,300 --> 00:56:12,200
Because we said it,

1052
00:56:13,700 --> 00:56:16,800
And then completion count when we're checking against him and doing

1053
00:56:16,800 --> 00:56:21,300
operations, somehow, either in the threads or elsewhere.

1054
00:56:21,500 --> 00:56:27,900
This actually increment to the value One X, one more time than it

1055
00:56:27,900 --> 00:56:30,200
should have been allowed to do.

1056
00:56:30,200 --> 00:56:31,500
So, how does that happen?

1057
00:56:31,800 --> 00:56:33,700
We have an interlock compare exchange.

1058
00:56:35,200 --> 00:56:38,900
We are trying to exchange the entry to read with this new one, which

1059
00:56:38,900 --> 00:56:41,200
is incremented by 1, right?

1060
00:56:42,600 --> 00:56:43,000
We are

1061
00:56:43,200 --> 00:56:49,200
Are giving it the original one that we saw that was in there, right?

1062
00:56:49,200 --> 00:56:51,100
The one that we think is there,

1063
00:56:54,300 --> 00:56:57,600
And then only if that was the value, that was still in there.

1064
00:56:57,800 --> 00:56:59,800
Are we going to actually do the work?

1065
00:57:00,000 --> 00:57:01,900
Batch right.

1066
00:57:04,600 --> 00:57:09,100
So, how does that end up?

1067
00:57:09,100 --> 00:57:11,700
Incrementing too many times.

1068
00:57:21,200 --> 00:57:25,900
How does it happen original next entry to read equals Q next entry to

1069
00:57:25,900 --> 00:57:26,500
read?

1070
00:57:27,800 --> 00:57:28,900
If they're not equal.

1071
00:57:30,700 --> 00:57:32,900
We're going to try the interlock compare exchange.

1072
00:57:34,100 --> 00:57:37,700
We're going to try it with the next entry that we computed.

1073
00:57:38,700 --> 00:57:40,400
So that will replace these two.

1074
00:57:40,600 --> 00:57:43,700
It will return us whatever was there, right?

1075
00:57:44,700 --> 00:57:47,300
And this is what we're expecting to see there.

1076
00:57:49,300 --> 00:57:50,600
And as long as that's true.

1077
00:57:50,800 --> 00:57:53,800
Ah, man, you know

1078
00:57:55,900 --> 00:57:56,800
Multi-threading.

1079
00:57:58,600 --> 00:58:01,000
Hard to do on stream, it turns out.

1080
00:58:02,500 --> 00:58:07,300
So once I read that once I can't I have to make sure I read the

1081
00:58:07,300 --> 00:58:09,500
correct one obviously.

1082
00:58:11,300 --> 00:58:11,700
Yeah.

1083
00:58:11,800 --> 00:58:17,100
So I don't actually know that was the bug but that was a bug because I

1084
00:58:17,100 --> 00:58:21,700
was reading this value twice, and I need to only read this value.

1085
00:58:21,700 --> 00:58:25,400
Once I need to look at it once and the new, all my computation based

1086
00:58:25,400 --> 00:58:28,100
on it because if I look at it multiple times, I could get different

1087
00:58:28,100 --> 00:58:28,300
values.

1088
00:58:28,400 --> 00:58:33,100
Is each time and then the whole thing comes comes falling down, right?

1089
00:58:33,800 --> 00:58:37,400
So I need to read that once and then never again, right?

1090
00:58:38,000 --> 00:58:40,200
So let me actually verify that, I never read it again.

1091
00:58:40,200 --> 00:58:42,000
In fact, right groups

1092
00:58:44,900 --> 00:58:46,700
So let's take a look at everything that reads from Q.

1093
00:58:46,700 --> 00:58:51,000
Here we read from next entry to read once next entry to write once,

1094
00:58:51,200 --> 00:58:52,900
and then we target Next Century to read.

1095
00:58:53,600 --> 00:58:56,800
That is how that should be okay?

1096
00:59:00,300 --> 00:59:02,400
And hey, that turns out that actually was the bug.

1097
00:59:03,900 --> 00:59:04,900
Bizarre.

1098
00:59:06,400 --> 00:59:12,300
So hey, you know, this is actually pretty cool because we are now

1099
00:59:12,300 --> 00:59:13,600
rendering multi-threaded.

1100
00:59:13,900 --> 00:59:16,700
I don't know if you noticed that but it's totally true.

1101
00:59:18,200 --> 00:59:21,400
We are totally rendering multi-threaded people.

1102
00:59:22,700 --> 00:59:23,500
That is awesome.

1103
00:59:24,600 --> 00:59:27,200
Now, how much of the processor we're actually using.

1104
00:59:27,200 --> 00:59:30,000
We've actually Rex using quite a bit more than we were before, which

1105
00:59:30,000 --> 00:59:30,700
is kind of cool.

1106
00:59:31,300 --> 00:59:34,900
We are not maxing it out and that's by Design, but we have roughly

1107
00:59:34,900 --> 00:59:36,100
tripled how much we're using.

1108
00:59:36,300 --> 00:59:38,100
I suspect at this point though.

1109
00:59:38,400 --> 00:59:42,300
We couldn't actually go any faster because we're not doing enough of a

1110
00:59:42,300 --> 00:59:44,800
workload at this point, right?

1111
00:59:46,600 --> 00:59:49,500
Meaning, we're only going to render at 30 frames a second because we

1112
00:59:49,500 --> 00:59:52,300
actually wait for the vertical blank and all that other.

1113
00:59:52,500 --> 00:59:54,300
We actually do is the sleep in there, right?

1114
00:59:54,400 --> 00:59:56,900
So we're never going to go faster than that.

1115
00:59:57,400 --> 00:59:59,900
So I think that means we're rendering at 30 frames.

1116
01:00:00,000 --> 01:00:00,300
Second.

1117
01:00:00,300 --> 01:00:02,400
We'll have to do some friends X and see how we're doing.

1118
01:00:02,600 --> 01:00:03,300
Start timing.

1119
01:00:03,300 --> 01:00:06,900
The overall thing, but we're getting there.

1120
01:00:06,900 --> 01:00:11,200
People, we are rendering multi-threaded, it's true, it's actually

1121
01:00:11,200 --> 01:00:11,700
true.

1122
01:00:12,200 --> 01:00:15,500
Now, you have a couple of things we got to work on, we got to set up

1123
01:00:15,500 --> 01:00:19,300
this tile stuff properly and we have a problem with how we're handling

1124
01:00:19,300 --> 01:00:20,600
the edges of things as well.

1125
01:00:20,800 --> 01:00:23,500
Now that we're multi-threaded, that wasn't a problem before we

1126
01:00:23,500 --> 01:00:24,000
multi-threaded.

1127
01:00:24,000 --> 01:00:24,500
So we got that.

1128
01:00:24,500 --> 01:00:25,100
Look at that.

1129
01:00:25,600 --> 01:00:28,100
But next week, it looks like we can tidy this up and

1130
01:00:29,400 --> 01:00:32,400
we've got a pretty pretty cool thing going on here.

1131
01:00:32,600 --> 01:00:35,900
I feel like I'm pretty excited about this.

1132
01:00:35,900 --> 01:00:40,900
Can we create can we crank our resolution to 1920 by 1080 at this

1133
01:00:40,900 --> 01:00:41,600
point?

1134
01:00:42,800 --> 01:00:48,100
You kind of It kind of asks if you can I don't know that that's a good

1135
01:00:48,100 --> 01:00:49,500
idea in general but

1136
01:00:51,200 --> 01:00:51,800
I don't know.

1137
01:00:54,000 --> 01:00:56,900
I mean, you might as well try it, right?

1138
01:01:01,900 --> 01:01:08,300
It's not quite as fast but it's still running and boy it looks pretty

1139
01:01:08,300 --> 01:01:09,200
good too, huh?

1140
01:01:11,200 --> 01:01:12,600
Let's see what happens if we just use.

1141
01:01:12,600 --> 01:01:17,200
Just I know you guys don't want me to use more threads because you

1142
01:01:17,200 --> 01:01:20,400
know, it ruins the stream, but I just really just, let me just put it

1143
01:01:20,400 --> 01:01:23,600
up, 2213 threads or 11.

1144
01:01:23,700 --> 01:01:25,000
Okay, 12 threads.

1145
01:01:25,900 --> 01:01:28,600
Okay, that's want to see how we do.

1146
01:01:29,700 --> 01:01:31,400
That's pretty darn good.

1147
01:01:31,600 --> 01:01:33,300
That's pretty darn good.

1148
01:01:33,800 --> 01:01:40,800
I mean that's kind of crazy when you think about it, 1920 by 1080,

1149
01:01:43,100 --> 01:01:44,000
that's pretty darn.

1150
01:01:44,000 --> 01:01:44,500
Cool.

1151
01:01:44,700 --> 01:01:47,300
I mean can you imagine how slow this was?

1152
01:01:47,500 --> 01:01:51,200
I mean we weren't even running we were running at some ungodly.

1153
01:01:51,200 --> 01:01:56,500
Like one frame is second on the quarter-sized and here's the full-size

1154
01:01:56,500 --> 01:01:59,200
running in like a totally playable framerate.

1155
01:01:59,500 --> 01:02:01,600
That is some really cool stuff right there.

1156
01:02:01,600 --> 01:02:05,000
And we're not even finished yet, right?

1157
01:02:05,700 --> 01:02:07,500
That is super cool.

1158
01:02:08,100 --> 01:02:09,200
That is just awesome.

1159
01:02:11,700 --> 01:02:12,800
That is so cool.

1160
01:02:16,400 --> 01:02:17,100
All right.

1161
01:02:18,800 --> 01:02:20,200
I'll turn it back down.

1162
01:02:20,200 --> 01:02:20,900
Yeah, yeah, yeah.

1163
01:02:20,900 --> 01:02:21,900
I'll turn it back down.

1164
01:02:22,400 --> 01:02:22,800
All right.

1165
01:02:22,800 --> 01:02:26,100
Let's go to Q&A here.

1166
01:02:27,200 --> 01:02:30,300
And remember this machine is from 2010 as well.

1167
01:02:30,800 --> 01:02:32,900
This machine is an old machine.

1168
01:02:33,000 --> 01:02:34,600
This machine is 5 years old.

1169
01:02:34,900 --> 01:02:38,300
It was a good machine at the time, though, but it was old.

1170
01:02:56,900 --> 01:02:59,800
What's, since the?

1171
01:03:00,000 --> 01:03:01,200
Clothes don't complete in order.

1172
01:03:01,200 --> 01:03:04,400
What if one workload takes very long while the other threads wrap

1173
01:03:04,400 --> 01:03:07,500
around in the Q, such that a new workload over rights, the slot with

1174
01:03:07,500 --> 01:03:08,700
the one that is still running.

1175
01:03:09,500 --> 01:03:11,000
So that's definitely a problem.

1176
01:03:11,700 --> 01:03:13,600
And essentially,

1177
01:03:18,300 --> 01:03:21,400
What we need to do and there's a lot of different ways you can choose

1178
01:03:21,400 --> 01:03:25,700
to approach this, but the way that I usually try to approach it is I

1179
01:03:25,700 --> 01:03:28,800
just make it so that I shouldn't be chewing up that much work

1180
01:03:28,800 --> 01:03:29,900
basically, right?

1181
01:03:30,900 --> 01:03:34,300
So, for example, in the circumstance that we have here, the renderer

1182
01:03:34,300 --> 01:03:37,300
we know, it's just going to kick off a fixed number of tiles and then

1183
01:03:37,300 --> 01:03:39,600
it needs to have all those tiles completed before it moves on.

1184
01:03:39,900 --> 01:03:42,800
So we can very easily just construct one high priority queue that we

1185
01:03:42,800 --> 01:03:45,500
know always has enough space and it to store a full render set of

1186
01:03:45,500 --> 01:03:47,900
tiles and that's never going to be a problem, right?

1187
01:03:48,700 --> 01:03:52,600
For out of order for like, background loading and stuff like that.

1188
01:03:52,700 --> 01:03:56,100
We can have a separate queue and we can just make sure that we always,

1189
01:03:56,200 --> 01:03:59,100
we don't try to launch new asset loads.

1190
01:03:59,200 --> 01:04:01,300
If the Q looks like it's getting filled, right?

1191
01:04:01,300 --> 01:04:02,700
That's not too hard to do.

1192
01:04:03,600 --> 01:04:08,900
And so what we can do and what I'll probably do is make a win32 add

1193
01:04:08,900 --> 01:04:10,000
entry, kind of a thing.

1194
01:04:10,000 --> 01:04:14,300
I'll make this return a Bool and it will just fail to do the ad.

1195
01:04:14,500 --> 01:04:17,500
And, and you'll then know the calling color know I'm like, okay, the

1196
01:04:17,500 --> 01:04:17,900
cues

1197
01:04:18,000 --> 01:04:20,700
full, I won't try to like launch any more background asset loads or

1198
01:04:20,700 --> 01:04:21,600
something, right?

1199
01:04:21,700 --> 01:04:23,100
So that's probably how we'll handle that.

1200
01:04:26,900 --> 01:04:29,600
Now that we're multi-threaded could be compiled in debug mode and have

1201
01:04:29,600 --> 01:04:31,500
the game run at a reasonable frame rate.

1202
01:04:31,900 --> 01:04:33,100
Oh my god dude.

1203
01:04:33,700 --> 01:04:34,500
Do you know what?

1204
01:04:35,100 --> 01:04:37,300
That was the debug build.

1205
01:04:39,200 --> 01:04:41,400
That was the debug build.

1206
01:04:42,300 --> 01:04:44,600
I want to turn it on optimization.

1207
01:04:49,400 --> 01:04:50,300
Dude.

1208
01:04:51,600 --> 01:04:56,400
With only eight, with only eight of the threads, we are running in

1209
01:04:56,400 --> 01:04:59,100
real time in 1920 by 1080 right now.

1210
01:05:00,500 --> 01:05:03,500
And that's doing full Blitz to we're not filling the ground chunks

1211
01:05:03,500 --> 01:05:08,100
right now because I turned that off, but it's actually bleeding, the

1212
01:05:08,100 --> 01:05:10,800
whole screen to and then playing the trees on top of it and then the

1213
01:05:10,800 --> 01:05:12,200
characters on top of that.

1214
01:05:12,700 --> 01:05:14,100
So it's not that different.

1215
01:05:14,100 --> 01:05:17,000
Like, we're gonna have to add a lot more complexity in there.

1216
01:05:17,000 --> 01:05:19,100
So I mean, it's not like we can send like, oh my God.

1217
01:05:19,100 --> 01:05:22,800
The the 1920 by 1080 software rendering is totally going to work for

1218
01:05:22,800 --> 01:05:25,300
handmade hero, because we've got a lot of complexity that we're going

1219
01:05:25,300 --> 01:05:25,900
to throw at it.

1220
01:05:25,900 --> 01:05:27,800
And I don't know that it's ready for that, right?

1221
01:05:28,900 --> 01:05:29,800
But dude,

1222
01:05:29,900 --> 01:05:33,000
dude, and it's sub-pixel accurate everywhere.

1223
01:05:34,200 --> 01:05:36,100
And it does scaling and rotation.

1224
01:05:36,300 --> 01:05:38,500
We've got some serious stuff going on here.

1225
01:05:40,100 --> 01:05:42,100
Not to mention, we're not even clipping the bitmaps.

1226
01:05:42,100 --> 01:05:42,600
Yet.

1227
01:05:42,600 --> 01:05:45,700
The bitmaps themselves are actually putting bigger than they need to

1228
01:05:45,700 --> 01:05:46,300
be too.

1229
01:05:46,600 --> 01:05:48,900
I'm going to turn on the ground chunks.

1230
01:05:53,000 --> 01:05:53,900
Because, why not?

1231
01:06:08,400 --> 01:06:10,500
Dude, this is awesome.

1232
01:06:15,500 --> 01:06:18,300
This is just so stupid, cool.

1233
01:06:19,800 --> 01:06:22,800
Machines, our computers are so darn fast.

1234
01:06:23,400 --> 01:06:27,500
Like this is literally not using the graphics card as anything other

1235
01:06:27,500 --> 01:06:32,700
than a dumb frame buffer and we're totally running this game in real

1236
01:06:32,700 --> 01:06:33,200
time.

1237
01:06:35,000 --> 01:06:36,100
This is going to be so darn.

1238
01:06:36,100 --> 01:06:36,700
Cool.

1239
01:06:37,700 --> 01:06:40,800
Doesn't this just get too excited though because now it's like when

1240
01:06:40,800 --> 01:06:44,000
you see stuff like this to, it's like it feels like

1241
01:06:45,200 --> 01:06:48,000
there's so much just more ownership of it to like,

1242
01:06:51,200 --> 01:06:55,200
It feels so good to succeed at something, even if it's not like, I

1243
01:06:55,200 --> 01:06:57,000
mean we didn't do anything round breaking, right?

1244
01:06:57,000 --> 01:07:00,100
We just did the basic stuff that we have to do, but like the fact that

1245
01:07:00,100 --> 01:07:01,600
we work through it all and then it's working.

1246
01:07:01,600 --> 01:07:08,500
So, nicely is just so satisfying because now like it's, we're

1247
01:07:08,500 --> 01:07:10,900
intimately connected with that speed.

1248
01:07:10,900 --> 01:07:14,200
It's not like, we just, like, brought up an engine, and we're like,

1249
01:07:14,200 --> 01:07:15,800
oh, hey, it runs as fast it runs.

1250
01:07:15,800 --> 01:07:17,300
I don't know, whatever.

1251
01:07:17,400 --> 01:07:18,600
Now it's like, no, no, man.

1252
01:07:18,600 --> 01:07:20,800
Like we did all that and it's a different

1253
01:07:21,000 --> 01:07:24,000
It's a different feeling it's just it is just different than if you

1254
01:07:24,000 --> 01:07:27,300
just took someone's code and ran it and like cross your fingers right

1255
01:07:27,700 --> 01:07:30,800
and so you know I don't know, I think it's something people should

1256
01:07:30,800 --> 01:07:31,400
experience.

1257
01:07:31,400 --> 01:07:35,400
It's why I do this project is because it's that feeling that you don't

1258
01:07:35,400 --> 01:07:38,300
get from just buying someone's thing and using it.

1259
01:07:38,300 --> 01:07:38,900
Right?

1260
01:07:39,300 --> 01:07:42,100
And again there's nothing wrong with doing that.

1261
01:07:43,200 --> 01:07:44,800
It's a fine way to make a game.

1262
01:07:45,700 --> 01:07:47,400
But you lose something.

1263
01:07:47,400 --> 01:07:50,700
When you do it, you lose that feeling of like holy cow.

1264
01:07:50,700 --> 01:07:51,700
Like this is so cool.

1265
01:07:51,700 --> 01:07:52,800
That all that worked.

1266
01:07:53,300 --> 01:07:57,300
It's just kind of neat and again it didn't take that long.

1267
01:07:57,300 --> 01:08:00,900
I mean, how many hours did we spend 30 hours 40 hours?

1268
01:08:00,900 --> 01:08:03,600
I don't know how long we spent on the optimized renderer.

1269
01:08:03,600 --> 01:08:05,600
Not even that probably 40 hours.

1270
01:08:05,700 --> 01:08:09,900
That's only one week that's not long to spend to get such a cool

1271
01:08:09,900 --> 01:08:11,100
experience, right?

1272
01:08:11,200 --> 01:08:12,900
I feel like it's, it's worth it.

1273
01:08:13,100 --> 01:08:15,300
You know, if you care about,

1274
01:08:15,400 --> 01:08:19,200
You know, kind of your own happiness as opposed to just how fast can I

1275
01:08:19,200 --> 01:08:21,700
get this thing done at a bare minimum or whatever, right?

1276
01:08:23,300 --> 01:08:24,700
That is darn cool.

1277
01:08:27,399 --> 01:08:28,600
Can we tell how much faster it is?

1278
01:08:28,600 --> 01:08:31,399
Now that is multi-threaded, we can I whole kind of hoped I would have

1279
01:08:31,399 --> 01:08:35,500
been done a little sooner today, so that I could time this

1280
01:08:38,200 --> 01:08:40,800
But you know, I was going to put in a little, a little query

1281
01:08:40,800 --> 01:08:42,399
performance, counter framerate.

1282
01:08:43,200 --> 01:08:45,600
We could we could probably I think we have an old one in there that I

1283
01:08:45,600 --> 01:08:48,500
could turn on me.

1284
01:08:48,500 --> 01:08:52,600
Turn the ground chunks off so that those aren't taking up some random

1285
01:08:52,600 --> 01:08:55,899
spurious time, but yeah.

1286
01:08:57,700 --> 01:08:59,700
So win32 add entry.

1287
01:09:00,899 --> 01:09:01,600
All this stuff.

1288
01:09:01,600 --> 01:09:04,399
We probably should clean up a little bit of some of that stuff, but,

1289
01:09:04,399 --> 01:09:07,300
let's take a look here at the frame time.

1290
01:09:07,600 --> 01:09:11,200
I think, I don't know if I can re-enable, this maybe I can.

1291
01:09:12,000 --> 01:09:12,800
Let's find out.

1292
01:09:14,500 --> 01:09:15,200
So there we go.

1293
01:09:17,500 --> 01:09:19,500
33 milliseconds of frame to remove.

1294
01:09:19,700 --> 01:09:20,200
All right.

1295
01:09:20,300 --> 01:09:24,000
Yeah, and we've got Cycles here.

1296
01:09:24,399 --> 01:09:28,899
This is actually also telling us the whole cycle count to, but yeah,

1297
01:09:28,899 --> 01:09:33,399
we are totally running at 33 milliseconds per frame, which is kind of

1298
01:09:33,399 --> 01:09:34,000
insane.

1299
01:09:34,200 --> 01:09:39,000
If I turn off, I just want to I'm just going to see what happens at

1300
01:09:39,000 --> 01:09:43,700
1920 by 1080 if I turn off multi-threading.

1301
01:09:45,399 --> 01:09:47,200
What happens, right?

1302
01:09:47,399 --> 01:09:49,399
Because it's really easy for me to do that.

1303
01:09:49,899 --> 01:09:51,800
I can just I can do that.

1304
01:09:59,500 --> 01:09:59,800
Right?

1305
01:09:59,800 --> 01:10:02,300
So instead of queuing these, we just do them.

1306
01:10:04,000 --> 01:10:05,900
So, I passed the render queue.

1307
01:10:06,200 --> 01:10:09,100
I passed detailed work and I passed the work and I just call this

1308
01:10:09,100 --> 01:10:11,100
thing directly, right?

1309
01:10:14,700 --> 01:10:15,400
Like that.

1310
01:10:20,700 --> 01:10:22,400
It doesn't, you're right.

1311
01:10:22,500 --> 01:10:23,100
Doesn't

1312
01:10:26,200 --> 01:10:30,000
So this is without multi-threading on so you can see it's kind of

1313
01:10:30,000 --> 01:10:31,700
poke, right?

1314
01:10:33,200 --> 01:10:40,500
It's actually pretty good though it's not terrible you know I mean it

1315
01:10:40,500 --> 01:10:46,200
isn't awful so we weren't actually that bad at 1920 by 1080 anyway so

1316
01:10:46,200 --> 01:10:50,200
we don't again because we do you know what I could take out that sleep

1317
01:10:51,400 --> 01:10:52,400
That's another thing I could do.

1318
01:10:52,400 --> 01:10:55,200
So and went through two, handmade, I could take out the sleep.

1319
01:10:57,200 --> 01:10:59,500
So you know,

1320
01:11:00,900 --> 01:11:04,300
On the wall clock, if I was to crank this up.

1321
01:11:04,900 --> 01:11:07,700
So I basically said something like, you know,

1322
01:11:09,700 --> 01:11:14,600
what's the target frames per second target game, update hurts Macho,

1323
01:11:14,600 --> 01:11:15,600
refresh rate.

1324
01:11:15,700 --> 01:11:19,500
So let's say, I went ahead and crank it up to 60, right?

1325
01:11:19,600 --> 01:11:22,600
So we just said, whatever the monitor refresh rate is, that's what

1326
01:11:22,600 --> 01:11:23,200
we're going to do.

1327
01:11:28,300 --> 01:11:29,100
What happened?

1328
01:11:33,200 --> 01:11:33,600
We go.

1329
01:11:34,500 --> 01:11:39,200
So if I crank it up to 60 right now, maybe we'll be able to see a

1330
01:11:39,200 --> 01:11:40,000
little bit better.

1331
01:11:41,300 --> 01:11:42,200
So here we go.

1332
01:11:43,600 --> 01:11:48,800
Now, we're running the dude, run at 60, but we're only hitting 50, I'm

1333
01:11:48,800 --> 01:11:49,000
sorry.

1334
01:11:49,000 --> 01:11:52,400
We're only, we're 50 milliseconds, not 16 milliseconds.

1335
01:11:52,400 --> 01:11:53,600
So we're at 50 milliseconds.

1336
01:11:53,800 --> 01:11:56,200
Now, if I turn on multi-threading, do we hit 60?

1337
01:11:57,700 --> 01:11:59,400
Again, really what we should be doing is just timing.

1338
01:11:59,400 --> 01:11:59,900
How long everything?

1339
01:12:00,000 --> 01:12:00,200
Take.

1340
01:12:00,200 --> 01:12:03,700
So I should add that in but I don't have time to do that right now in

1341
01:12:03,700 --> 01:12:04,300
the Q&A.

1342
01:12:07,200 --> 01:12:12,200
Holy cow, dude, I think we're actually just hitting 60 frames per

1343
01:12:12,200 --> 01:12:17,000
second at 1920 by 1080 in the software renderer sub-pixel.

1344
01:12:20,200 --> 01:12:21,700
Dude, we totally are.

1345
01:12:24,200 --> 01:12:26,500
That is crazy.

1346
01:12:28,100 --> 01:12:30,400
Computers are so fast.

1347
01:12:31,500 --> 01:12:33,500
That's unbelievable.

1348
01:12:33,500 --> 01:12:35,000
How fast they go.

1349
01:12:36,200 --> 01:12:40,500
And we haven't even like, I mean we just did a rudimentary version of

1350
01:12:40,500 --> 01:12:42,000
an optimized renderer, right?

1351
01:12:42,000 --> 01:12:46,800
Like we didn't spend five months sitting here playing with pit so

1352
01:12:46,800 --> 01:12:48,900
Compares we haven't even looked at the cash yet.

1353
01:12:51,500 --> 01:12:52,100
Man.

1354
01:13:04,400 --> 01:13:07,100
Robot chocolate Dino, instead of asserting that the Q doesn't

1355
01:13:07,100 --> 01:13:07,500
overflow.

1356
01:13:07,500 --> 01:13:09,800
In adding an entry would be better to just wait for an entry to be

1357
01:13:09,800 --> 01:13:10,000
red.

1358
01:13:10,000 --> 01:13:13,500
If there is no space to write, I don't really like to do that.

1359
01:13:13,500 --> 01:13:17,200
If I can avoid it, because it means that it could just stall the game

1360
01:13:17,400 --> 01:13:20,400
in the middle of a frame or something, right?

1361
01:13:20,400 --> 01:13:23,300
And so, I like to just have a constant time insertion as much as

1362
01:13:23,300 --> 01:13:24,000
possible.

1363
01:13:27,100 --> 01:13:28,900
Would you call this a thread pool?

1364
01:13:31,900 --> 01:13:34,900
I don't know, you know, I don't think I've ever read what people

1365
01:13:34,900 --> 01:13:36,100
actually call a thread pool.

1366
01:13:36,100 --> 01:13:37,600
It is sort of that way I guess.

1367
01:13:44,800 --> 01:13:47,600
When stepping through multi-threaded code, all the other thread stop

1368
01:13:47,600 --> 01:13:48,000
as well.

1369
01:13:48,000 --> 01:13:48,800
I take it.

1370
01:13:49,200 --> 01:13:51,300
So I think you can actually set that

1371
01:13:54,600 --> 01:13:59,100
To be honest with you, I feel like that's actually something that is

1372
01:13:59,600 --> 01:14:01,100
in here.

1373
01:14:10,500 --> 01:14:15,100
Okay, so no, it's it's processes that that you can control, which

1374
01:14:15,100 --> 01:14:15,800
one's break.

1375
01:14:15,800 --> 01:14:16,500
So yeah.

1376
01:14:16,900 --> 01:14:19,400
So I guess they all always will stop.

1377
01:14:22,200 --> 01:14:22,800
I think.

1378
01:14:25,800 --> 01:14:29,700
To be so I guess, I don't let me put this way, I don't know, there

1379
01:14:29,700 --> 01:14:31,800
might be an option to make that happen.

1380
01:14:31,800 --> 01:14:35,600
What I do know is that you can freeze and unfreeze threads.

1381
01:14:36,100 --> 01:14:39,900
So once you are broke into the debugger, right?

1382
01:14:40,300 --> 01:14:44,100
And you have multiple threads, you can go in here and like freeze and

1383
01:14:44,100 --> 01:14:48,900
thaw Fred's to stop them from from going or to continue whether you

1384
01:14:48,900 --> 01:14:51,200
can let some run while you're doing other stuff.

1385
01:14:51,200 --> 01:14:52,500
Maybe that's not possible.

1386
01:14:52,500 --> 01:14:53,100
I don't know.

1387
01:14:53,600 --> 01:14:54,900
It might be that processes as a

1388
01:14:55,100 --> 01:14:58,000
Whole might just stop and you can't stop an individual thread.

1389
01:14:58,700 --> 01:14:59,300
I'm not sure.

1390
01:15:10,900 --> 01:15:14,200
Can you make the number of threads and in-game configuration option?

1391
01:15:14,800 --> 01:15:18,100
We, I don't know that will do that, but we will make it dependent on

1392
01:15:18,100 --> 01:15:20,000
the number of threads in your processor.

1393
01:15:33,600 --> 01:15:35,700
How long until the render is sorted?

1394
01:15:36,800 --> 01:15:37,500
I don't know.

1395
01:15:37,500 --> 01:15:40,100
I don't I just don't care about the Sorting very much.

1396
01:15:40,100 --> 01:15:42,200
I want everything else to be done for us but it's so much more

1397
01:15:42,200 --> 01:15:46,000
important but we could we could play with the Sorting sometime soon.

1398
01:15:57,700 --> 01:15:59,100
Oh, man, did I swear?

1399
01:16:00,800 --> 01:16:03,000
I didn't mean to I just got carried away.

1400
01:16:11,000 --> 01:16:15,000
Is the we should sleep still right after you change the, if condition

1401
01:16:15,000 --> 01:16:16,600
around, I don't know.

1402
01:16:16,700 --> 01:16:17,600
Let's check it.

1403
01:16:17,600 --> 01:16:18,400
Check it out.

1404
01:16:19,800 --> 01:16:23,400
Because yeah, just one of the things like, you know, you might expect

1405
01:16:23,400 --> 01:16:24,100
me to say, no.

1406
01:16:24,100 --> 01:16:26,900
Obviously, it's correct because the code is running multi-threaded

1407
01:16:26,900 --> 01:16:30,700
code can have bugs in it that hide for a long time, right?

1408
01:16:30,700 --> 01:16:33,400
So, just because our code is working, doesn't actually mean that it's

1409
01:16:33,400 --> 01:16:39,000
a bug-free q because there's so many fancy little bizarre things that

1410
01:16:39,000 --> 01:16:41,400
can happen in multi-threading, when the multiple things are doing

1411
01:16:41,400 --> 01:16:43,300
things, and different times it's very unpredictable.

1412
01:16:43,300 --> 01:16:44,900
So, it's always best to.

1413
01:16:45,200 --> 01:16:47,300
If someone has a question or if you think there might be something

1414
01:16:47,300 --> 01:16:48,200
wrong, it's always best to go.

1415
01:16:48,200 --> 01:16:48,800
Read the code.

1416
01:16:48,900 --> 01:16:52,100
And because they're made to be a bug in it that just just did you

1417
01:16:52,100 --> 01:16:52,300
know?

1418
01:16:52,300 --> 01:16:55,700
It just hasn't shown up yet but it's there, you know and it's just

1419
01:16:55,700 --> 01:16:58,600
waiting for the right combination of thread things to happen before it

1420
01:16:58,600 --> 01:16:59,200
strikes.

1421
01:17:02,200 --> 01:17:04,000
So yes, we should sleep.

1422
01:17:04,000 --> 01:17:05,200
Does look correct to me.

1423
01:17:05,500 --> 01:17:07,800
Basically, what happens is we set, we should sleep to false because

1424
01:17:07,800 --> 01:17:10,300
the default is we're just going to always try to keep doing stuff.

1425
01:17:10,900 --> 01:17:14,700
We look to see whether or not the next entry that we're going to read

1426
01:17:14,700 --> 01:17:16,200
is equal to an extension of, right.

1427
01:17:16,200 --> 01:17:17,200
If they are equal.

1428
01:17:17,200 --> 01:17:19,300
That means we sleep cuz there's nothing in the queue.

1429
01:17:20,500 --> 01:17:22,800
If they're not, then we try to dequeue something.

1430
01:17:22,800 --> 01:17:26,000
If we can't dequeue something, we don't want to sleep.

1431
01:17:26,100 --> 01:17:29,300
Because the reason that we didn't DQ it is because some other thread

1432
01:17:29,300 --> 01:17:30,300
got there first.

1433
01:17:30,300 --> 01:17:30,600
So that

1434
01:17:30,700 --> 01:17:35,300
That means we really don't have any idea whether or not there's more

1435
01:17:35,300 --> 01:17:35,700
in the Q.

1436
01:17:35,700 --> 01:17:38,600
So we should re-enter this thing and do it again, right?

1437
01:17:38,600 --> 01:17:41,400
So what will happen is, we'll just let it pop back out and this and

1438
01:17:41,400 --> 01:17:43,300
either do this check or do this check.

1439
01:17:43,800 --> 01:17:46,200
Well, this does this one doesn't do a check, it'll either do this

1440
01:17:46,200 --> 01:17:49,900
check if it's this guy to see whether it should end the whole deal, or

1441
01:17:49,900 --> 01:17:52,000
it'll come through here and redo it again.

1442
01:17:56,000 --> 01:17:59,800
Why do you use pound if 0 instead of slashed a source said?

1443
01:18:00,000 --> 01:18:03,100
Comments, because we can turn them on and off, you know.

1444
01:18:05,900 --> 01:18:09,500
So, we can turn them on and on, and off is the reason.

1445
01:18:11,700 --> 01:18:15,000
Because, if you take a look like, for example, the stuff that I just

1446
01:18:15,000 --> 01:18:19,100
did in render group, you know, now, we've got one here that we can

1447
01:18:19,100 --> 01:18:25,600
just do like, you know, note Casey, this is the multi-threaded path,

1448
01:18:26,700 --> 01:18:29,300
this is the single threaded path, right?

1449
01:18:29,300 --> 01:18:33,200
And I can just with changing one character, I can do that, right?

1450
01:18:34,000 --> 01:18:35,500
And the other benefit to it is.

1451
01:18:35,800 --> 01:18:39,800
That they nest properly comments, don't always Nest properly.

1452
01:18:39,800 --> 01:18:43,300
So if you do like this and I want to take out some code that already

1453
01:18:43,300 --> 01:18:43,800
has it.

1454
01:18:43,800 --> 01:18:47,700
Like so, you know, if this was commented out, right?

1455
01:18:47,800 --> 01:18:49,700
And then I want to comment this out.

1456
01:18:51,500 --> 01:18:55,800
It actually ends up being bogus, right?

1457
01:18:55,900 --> 01:19:00,100
It doesn't, comment these out, you know, I'm saying it's an error.

1458
01:19:00,800 --> 01:19:05,000
So you want something that Nest properly and and the ifs Nest

1459
01:19:05,000 --> 01:19:05,600
properly,

1460
01:19:09,600 --> 01:19:11,000
Can you show for K?

1461
01:19:11,100 --> 01:19:16,200
Of course not I only have a 1920 by 1080 monitor here and I don't have

1462
01:19:16,700 --> 01:19:19,800
any way to broadcast that twitch doesnt even do for our K.

1463
01:19:19,800 --> 01:19:20,300
Does it?

1464
01:19:20,400 --> 01:19:20,600
I don't know.

1465
01:19:20,600 --> 01:19:21,500
Maybe it does.

1466
01:19:40,500 --> 01:19:40,900
Oh good.

1467
01:19:40,900 --> 01:19:41,900
Okay, so I didn't swear.

1468
01:19:41,900 --> 01:19:44,400
I was hoping I didn't swear but I don't know.

1469
01:19:47,000 --> 01:19:49,800
Is multi-threaded code less reliable than single threaded code.

1470
01:19:49,900 --> 01:19:50,500
Yes!

1471
01:19:51,200 --> 01:19:52,500
Yes, yes, yes.

1472
01:19:52,500 --> 01:19:57,400
And yes, that is why most good programmers that I know.

1473
01:20:00,900 --> 01:20:07,700
We'll try to come up with good systems that make it so that you only

1474
01:20:07,700 --> 01:20:12,000
do the multi threading in a very tightly controlled way, because if

1475
01:20:12,000 --> 01:20:16,600
you just go Hog Wild with multi-threading and let it just proliferate,

1476
01:20:18,100 --> 01:20:21,000
it can be bad news, right?

1477
01:20:21,800 --> 01:20:22,900
I really just don't know.

1478
01:20:22,900 --> 01:20:25,700
Programmers, who are so darn good that they just can write

1479
01:20:25,700 --> 01:20:26,400
multi-threaded code.

1480
01:20:26,400 --> 01:20:29,500
That's tons of threads happening all over the place and doing whatever

1481
01:20:29,500 --> 01:20:29,700
in it.

1482
01:20:29,700 --> 01:20:30,400
It just works.

1483
01:20:30,600 --> 01:20:32,800
Like that's usually not the case.

1484
01:20:37,600 --> 01:20:40,400
So is the circular buffer recycling, threads after they are done

1485
01:20:40,400 --> 01:20:41,300
processing a tile.

1486
01:20:41,300 --> 01:20:43,400
I wasn't clear on why a circular buffer was chosen.

1487
01:20:44,300 --> 01:20:46,300
So the circular buffer has nothing to do with the threads.

1488
01:20:46,300 --> 01:20:49,300
The circular buffer is just the Q and the reason I did that is so that

1489
01:20:49,300 --> 01:20:53,600
you can just keep stuffing things in the queue ad infinitum, and

1490
01:20:53,600 --> 01:20:55,400
they'll always just keep getting done.

1491
01:21:12,000 --> 01:21:12,700
Okay.

1492
01:21:12,700 --> 01:21:14,300
So in theory,

1493
01:21:16,400 --> 01:21:17,200
We're back.

1494
01:21:18,900 --> 01:21:19,600
Accidentally bumped.

1495
01:21:19,600 --> 01:21:20,600
The power cord.

1496
01:21:22,200 --> 01:21:23,000
It's a problem.

1497
01:21:24,000 --> 01:21:27,000
The power cord is right next to where the microphone plugs in, so, and

1498
01:21:27,000 --> 01:21:31,000
I have this little tiny microphone cable, so it's pretty tough.

1499
01:21:31,400 --> 01:21:32,600
It's not a good situation.

1500
01:21:33,000 --> 01:21:38,200
Anyway, I just wanted to see if the code got ruined at all, just so we

1501
01:21:38,200 --> 01:21:42,100
can know whether we have to repair anything that didn't say, I suspect

1502
01:21:42,100 --> 01:21:45,200
it probably did save but

1503
01:21:47,000 --> 01:21:47,700
Let's see.

1504
01:21:53,700 --> 01:21:55,100
Yeah, so we're totally good.

1505
01:21:55,300 --> 01:21:56,300
So we didn't really lose anything.

1506
01:21:56,300 --> 01:21:56,900
I don't think.

1507
01:21:57,100 --> 01:21:58,100
I think we're good to go.

1508
01:21:59,800 --> 01:22:00,400
So yeah.

1509
01:22:01,600 --> 01:22:03,900
So let's just double check

1510
01:22:06,000 --> 01:22:07,900
To make sure that we're still running.

1511
01:22:07,900 --> 01:22:08,300
Well,

1512
01:22:17,500 --> 01:22:20,000
Flog them hamsters flog them.

1513
01:22:22,600 --> 01:22:24,200
So, this is the thing, right?

1514
01:22:24,200 --> 01:22:24,600
That

1515
01:22:26,700 --> 01:22:30,200
Like did you see how long it took like when I click on file?

1516
01:22:30,200 --> 01:22:33,300
It's like an eternity and then it eventually popped up the window or

1517
01:22:33,300 --> 01:22:33,800
whatever.

1518
01:22:36,700 --> 01:22:39,600
That's one of the what you kind of saw today is one of the reasons I

1519
01:22:39,600 --> 01:22:41,600
think I'm always so grumpy, like, look at this.

1520
01:22:42,900 --> 01:22:44,100
Like what was that?

1521
01:22:45,000 --> 01:22:49,700
We were just rendering 1920 by 1080 software rendered, 60 frames.

1522
01:22:49,700 --> 01:22:55,200
A second sub pixel accurate with full transforms on this processor.

1523
01:22:55,900 --> 01:22:59,800
Using only 8 of the 16 cores that it has

1524
01:23:01,500 --> 01:23:05,000
And like the people who wrote this couldn't figure out a way to just

1525
01:23:05,000 --> 01:23:06,600
have it load up right away.

1526
01:23:06,800 --> 01:23:10,000
That was like they had no idea like what was going to happen there,

1527
01:23:10,000 --> 01:23:12,400
they were like I don't know but I don't see how we could load a text

1528
01:23:12,400 --> 01:23:14,200
file and display it in that period time.

1529
01:23:14,200 --> 01:23:20,000
It's an unfathomable to me, you know, how would that happen?

1530
01:23:20,000 --> 01:23:22,200
I don't even know how that would happen that you're talking about

1531
01:23:22,200 --> 01:23:23,400
future technology.

1532
01:23:29,600 --> 01:23:32,800
But hey, yeah, so that's looking really darn sweet.

1533
01:23:34,300 --> 01:23:39,200
I think we are probably gated by Windows now actually, because again,

1534
01:23:39,200 --> 01:23:41,700
we're using kind of a janky way to put this stuff to the screen.

1535
01:23:41,700 --> 01:23:45,200
So I think we're probably if we if we switch to going through say

1536
01:23:45,700 --> 01:23:50,900
direct3d and opengl to do our blit just giving just doing all still

1537
01:23:50,900 --> 01:23:55,600
doing our render ourselves, but to do our Blythe that way, we'd

1538
01:23:55,600 --> 01:23:56,300
probably be fine.

1539
01:23:57,600 --> 01:23:59,000
I don't even know what to do now.

1540
01:23:59,000 --> 01:23:59,800
Did does that.

1541
01:24:00,000 --> 01:24:03,900
We set the target for the software enter to be 1920 by 1080 60.

1542
01:24:03,900 --> 01:24:07,100
I feel like we can't because once we get more stuff on here it's not

1543
01:24:07,100 --> 01:24:08,300
going to work right?

1544
01:24:09,400 --> 01:24:11,100
I don't know what to say.

1545
01:24:11,800 --> 01:24:14,200
I'm just going to leave it like that till it gets slow and then we'll

1546
01:24:14,200 --> 01:24:15,100
drop it down.

1547
01:24:17,400 --> 01:24:18,800
All right, back to questions.

1548
01:24:19,500 --> 01:24:19,900
Sorry.

1549
01:24:19,900 --> 01:24:22,600
So so is the circular buffer recycling threads after they were done

1550
01:24:22,600 --> 01:24:23,400
processing.

1551
01:24:24,100 --> 01:24:26,000
I wasn't clear on why a circular buffer was chosen.

1552
01:24:26,400 --> 01:24:32,100
Okay, so the reason that I wanted to choose a circularbuffer, let's go

1553
01:24:32,100 --> 01:24:33,400
ahead and open up Blackboard.

1554
01:24:33,800 --> 01:24:36,700
The reason I wanted to choose a circular buffer is because I didn't

1555
01:24:36,700 --> 01:24:39,600
want people to think.

1556
01:24:41,600 --> 01:24:43,000
We did lose a little bit of our drawing.

1557
01:24:43,400 --> 01:24:45,500
I didn't want people to in the code.

1558
01:24:45,500 --> 01:24:47,700
I don't want them to have to think too hard about what's going on,

1559
01:24:48,000 --> 01:24:48,600
right?

1560
01:24:49,100 --> 01:24:52,100
So the reason I chose a circular buffer is basically what we need

1561
01:24:52,100 --> 01:24:53,000
here, right?

1562
01:24:53,000 --> 01:24:58,200
Is, we need something where we're going to put stuff into it that

1563
01:24:58,200 --> 01:25:00,400
needs to be done, right?

1564
01:25:01,600 --> 01:25:04,900
And then stuff is going to come out of it asynchronously, right?

1565
01:25:04,900 --> 01:25:08,900
So we're putting stuff in and then we're grabbing stuff out, right?

1566
01:25:09,900 --> 01:25:13,600
So we like putting a, we grab out a, we put in B we grab out B and so

1567
01:25:13,600 --> 01:25:14,300
on, right?

1568
01:25:14,900 --> 01:25:20,200
And what happens is these things we want to be able to happen over a

1569
01:25:20,200 --> 01:25:20,800
long period of time.

1570
01:25:20,800 --> 01:25:24,500
Potentially like let's say we want to use this for background

1571
01:25:24,500 --> 01:25:27,500
decompress or like filling those ground buffer chunks.

1572
01:25:27,500 --> 01:25:29,300
We want that to happen in the background.

1573
01:25:29,300 --> 01:25:33,200
So if we have a queue where we don't know how long things take,

1574
01:25:33,200 --> 01:25:37,600
there's never a point where we're going to complete them all in the

1575
01:25:37,600 --> 01:25:38,100
render queue.

1576
01:25:38,100 --> 01:25:41,200
We did stuff where we just like, queued up a bunch of stuff and then

1577
01:25:41,200 --> 01:25:43,000
said, go and everything gets cleared out.

1578
01:25:43,000 --> 01:25:44,600
If that were the case, we wouldn't

1579
01:25:44,900 --> 01:25:48,600
We need the circular buffer but since we have things that we want to

1580
01:25:48,600 --> 01:25:52,000
just take arbitrary amounts of time and we just kind of have a ruling

1581
01:25:52,000 --> 01:25:53,500
Q of stuff that needs to happen.

1582
01:25:53,500 --> 01:25:57,500
We don't ever have a single point in time where we're going to clear

1583
01:25:57,500 --> 01:25:57,500
everything.

1584
01:25:57,500 --> 01:26:01,400
We're constantly adding new things in as we're pulling old things off,

1585
01:26:01,400 --> 01:26:02,400
and it just goes forever.

1586
01:26:02,400 --> 01:26:06,000
And so, in that, I want to be able to, you know, the circular buffer

1587
01:26:06,000 --> 01:26:10,600
is so that I can just keep having that rolling window of things that

1588
01:26:10,600 --> 01:26:13,600
threads are supposed to take, when we go to use this queue for stuff

1589
01:26:13,600 --> 01:26:14,500
like background art.

1590
01:26:14,900 --> 01:26:15,800
And stuff like that.

1591
01:26:33,200 --> 01:26:36,700
I just saw you where you're sleeping threads if there was no work, are

1592
01:26:36,700 --> 01:26:38,900
you still using semaphore is to block and wake up threads or did you

1593
01:26:38,900 --> 01:26:40,100
switch to sleeping threads?

1594
01:26:40,600 --> 01:26:42,900
So sleeping is a bad term.

1595
01:26:44,500 --> 01:26:49,000
We're not using any sleeps in on the threads, they're actually waiting

1596
01:26:49,000 --> 01:26:50,900
on a signal so I should say wait.

1597
01:27:11,700 --> 01:27:13,100
See if there's any more questions.

1598
01:27:14,800 --> 01:27:16,300
Is the archive, in a saved correctly.

1599
01:27:16,800 --> 01:27:23,500
We can get it from twitch, if it doesn't, but we would hopefully it

1600
01:27:23,500 --> 01:27:24,600
did, but I don't know.

1601
01:27:40,500 --> 01:27:43,100
Would it be easier to implement the queue as a linked list?

1602
01:27:43,100 --> 01:27:44,700
So it has no maximum size.

1603
01:27:44,700 --> 01:27:47,600
Since we never need to Traverse the list, it should still be fast.

1604
01:27:48,500 --> 01:27:52,200
Well, it mean linked list has a maximum size, right?

1605
01:27:52,300 --> 01:27:53,500
It's the size of memory.

1606
01:27:54,900 --> 01:27:57,300
And if you allocate the memory every time, then you're incurring a

1607
01:27:57,300 --> 01:28:01,500
bunch of costs to in queueing things so you don't really gain

1608
01:28:01,500 --> 01:28:01,800
anything.

1609
01:28:01,800 --> 01:28:05,900
Like unless you actually want to have unbounded cues.

1610
01:28:06,900 --> 01:28:11,200
It's strictly a lose to switch to a system that doesn't enforce a

1611
01:28:11,200 --> 01:28:12,300
maximum size, right?

1612
01:28:12,300 --> 01:28:14,500
Because everything is worse in that system.

1613
01:28:14,900 --> 01:28:19,300
The only thing you gain is no maximum size, so we have to ask

1614
01:28:19,300 --> 01:28:23,400
ourselves, do we ever want an unbounded Lee growing Q?

1615
01:28:23,800 --> 01:28:26,100
What were the circumstances be under, which that occurred?

1616
01:28:26,100 --> 01:28:28,100
And why would we want to allow it to occur?

1617
01:28:28,400 --> 01:28:31,100
And as far as I can think of there's never a case where we actually

1618
01:28:31,100 --> 01:28:32,300
want that to happen.

1619
01:28:32,700 --> 01:28:35,600
So it seems better to me just to not allow it and let everything else

1620
01:28:35,600 --> 01:28:36,100
be better.

1621
01:28:56,400 --> 01:29:00,000
In the ruling buffer, you check the entry to be filled before writing

1622
01:29:00,100 --> 01:29:08,800
a new one in and otherwise skip to the next slot know, right now, we

1623
01:29:08,800 --> 01:29:13,100
actually just it's a hard error, it's considered an error to right

1624
01:29:13,100 --> 01:29:17,800
into the queue if you in that circumstance.

1625
01:29:19,800 --> 01:29:21,500
So right now it's just an error.

1626
01:29:22,800 --> 01:29:23,600
Totally in error.

1627
01:29:24,700 --> 01:29:25,100
so,

1628
01:29:31,800 --> 01:29:32,200
All right.

1629
01:29:32,200 --> 01:29:33,800
Looks like we're done with questions.

1630
01:29:36,400 --> 01:29:39,800
I will now start the process of figuring out if the video is good or

1631
01:29:39,800 --> 01:29:41,500
not, who knows.

1632
01:29:41,600 --> 01:29:43,100
It might be, might not be.

1633
01:29:44,000 --> 01:29:45,000
We'll find out.

1634
01:29:46,000 --> 01:29:49,500
And to answer the question of why I have to do it this way, it's

1635
01:29:49,500 --> 01:29:52,400
because people complained, that the audio quality had clicking in it

1636
01:29:52,400 --> 01:29:57,600
and they were correct when I plugged the microphone into the front

1637
01:29:57,600 --> 01:29:59,800
Port of the computer because apparently the

1638
01:30:00,000 --> 01:30:03,200
Port produces that clicking sound, although it doesn't actually

1639
01:30:03,200 --> 01:30:03,800
produce a look inside.

1640
01:30:03,800 --> 01:30:06,700
It's only when OBS is capturing that Port that it produces the

1641
01:30:06,700 --> 01:30:07,300
clicking sound.

1642
01:30:07,300 --> 01:30:09,000
So it's like something with OBS in that Port.

1643
01:30:09,000 --> 01:30:11,100
So I have to plug into the back, which means I have to plug into the

1644
01:30:11,100 --> 01:30:13,200
power cable, which means I can pump the power cable.

1645
01:30:13,200 --> 01:30:16,300
If I have to tighten it and it's a disaster.

1646
01:30:17,900 --> 01:30:18,900
Modern Computing.

1647
01:30:19,200 --> 01:30:21,100
Yes, these are unsolved problems.

1648
01:30:21,100 --> 01:30:22,400
Why is this ever a problem?

1649
01:30:22,400 --> 01:30:24,600
Why doesn't the front port on the computer work?

1650
01:30:24,700 --> 01:30:28,300
I have no idea because that's Computing these days.

1651
01:30:28,600 --> 01:30:29,100
Anyway,

1652
01:30:30,600 --> 01:30:31,900
That is confusing these days.

1653
01:30:32,200 --> 01:30:36,100
But there are small things that are always fun and reassuring like

1654
01:30:36,100 --> 01:30:41,500
having your software renderer run at 1920 by 1080 by 60 hertz, which

1655
01:30:41,500 --> 01:30:42,700
is pretty darn cool.

1656
01:30:42,700 --> 01:30:45,900
So there's, at least something awesome happening.

1657
01:30:47,000 --> 01:30:47,900
Anyway,

1658
01:30:51,500 --> 01:30:53,300
I'm going to wrap that up for today.

1659
01:30:54,200 --> 01:30:56,600
Yes, I know Chrome didn't shut down properly.

1660
01:30:56,600 --> 01:31:01,500
That's because the power went out on the computer, but thank you very

1661
01:31:01,500 --> 01:31:03,800
much for joining me for another episode of handmade hero.

1662
01:31:03,800 --> 01:31:07,600
We were able to wrap up our multi-threading of the renderer today,

1663
01:31:07,600 --> 01:31:09,400
which is awesome and it worked really well.

1664
01:31:09,900 --> 01:31:13,000
So, next week, what we're going to do is we're going to go through and

1665
01:31:13,000 --> 01:31:16,500
do a Polish pass on some of this stuff where we'll actually do some

1666
01:31:16,500 --> 01:31:20,800
timings and we have to go in and make it so that our tiles are well.

1667
01:31:21,000 --> 01:31:25,500
Lines that we don't have to do all the nonsense with the clipping them

1668
01:31:25,500 --> 01:31:28,400
and and the stuff that we're kind of doing in there right now.

1669
01:31:28,900 --> 01:31:30,300
So we got some clean up stuff to do.

1670
01:31:30,300 --> 01:31:32,200
So, next week, I'll definitely be clean up week on that one.

1671
01:31:32,200 --> 01:31:36,000
Will try to polish everything up and make it nice and pretty, but it's

1672
01:31:36,000 --> 01:31:37,900
running darn fast right now.

1673
01:31:38,000 --> 01:31:39,800
So I'm pretty psyched about that.

1674
01:31:40,000 --> 01:31:42,500
That is pretty pretty, darn cool people.

1675
01:31:42,700 --> 01:31:43,700
So I hope you're happy about that.

1676
01:31:43,700 --> 01:31:47,200
I know I am I hope but see you back here next week when we can kind of

1677
01:31:47,200 --> 01:31:49,800
play around with things and get everything tidied up.

1678
01:31:50,300 --> 01:31:50,900
Because I think it's

1679
01:31:51,000 --> 01:31:54,500
A pretty sweet renderer now actually all things considered.

1680
01:31:55,300 --> 01:31:58,400
So yeah, come back on Monday, we'll do it.

1681
01:31:58,600 --> 01:31:59,900
We'll get it, we'll get it going.

1682
01:32:00,800 --> 01:32:04,100
In the meantime, if you would like to follow along with a source code

1683
01:32:04,100 --> 01:32:06,700
at home, you can pre-order the game and it comes with a source code.

1684
01:32:06,700 --> 01:32:10,600
You can download it every night after I'm done working on it and play

1685
01:32:10,600 --> 01:32:11,100
around with it.

1686
01:32:11,100 --> 01:32:13,100
Just, you know, it's a good way to learn.

1687
01:32:13,300 --> 01:32:15,400
We also have a forum site, you can go to ask questions.

1688
01:32:15,900 --> 01:32:17,500
We've got a patreon page.

1689
01:32:17,800 --> 01:32:20,800
If you want to support the video series, we've got a tweetbot that we

1690
01:32:21,000 --> 01:32:21,700
Schedule.

1691
01:32:22,400 --> 01:32:24,800
And of course we've got a little button that tells you when the next

1692
01:32:24,800 --> 01:32:27,900
one's coming and of course, I don't up this update schedule, till

1693
01:32:27,900 --> 01:32:28,900
usually Sunday.

1694
01:32:29,400 --> 01:32:32,900
So the next button doesn't really help you till then but then it will

1695
01:32:32,900 --> 01:32:36,500
tell you every day of the week when the next handmade hero will be.

1696
01:32:36,500 --> 01:32:39,900
So that's pretty handy to thanks very much for joining me and don't

1697
01:32:39,900 --> 01:32:42,800
forget one of your esteemed, moderators Abner Cohen.

1698
01:32:42,800 --> 01:32:47,500
Bray is giving a lecture on Twitch on Sunday, 5:00 p.m.

1699
01:32:47,600 --> 01:32:48,900
Eastern Standard time.

1700
01:32:50,000 --> 01:32:50,800
So that's actually

1701
01:32:50,900 --> 01:32:51,900
Ali, to p.m.

1702
01:32:51,900 --> 01:32:53,100
our time I believe.

1703
01:32:54,000 --> 01:33:00,800
And that's it, that's a twitch.tv slash Abner, Cumbre, a be any RC o

1704
01:33:00,800 --> 01:33:03,500
IM bre but you can always check the handmade hero.

1705
01:33:03,500 --> 01:33:03,800
Twitter.

1706
01:33:03,800 --> 01:33:05,400
I'll retweet it if he tweets it out.

1707
01:33:05,800 --> 01:33:06,100
All right.

1708
01:33:06,100 --> 01:33:06,900
Thanks everyone.

1709
01:33:07,200 --> 01:33:07,900
Take it easy.

