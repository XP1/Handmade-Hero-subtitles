1
00:00:02,900 --> 00:00:04,900
Hello, everyone and welcome to handmade hero.

2
00:00:04,900 --> 00:00:07,900
The show Rico to complete game live on stream no engines, and no

3
00:00:07,900 --> 00:00:12,200
libraries just like a lot of furious typing.

4
00:00:13,300 --> 00:00:17,100
Sometimes not that Furious and drawing on the Whiteboard.

5
00:00:17,500 --> 00:00:19,800
It's actually a Blackboard because it's a black backdrop but, you

6
00:00:19,800 --> 00:00:20,200
know, it is

7
00:00:24,000 --> 00:00:27,300
We are going to try and finish up our sparse, Unicode support today.

8
00:00:28,100 --> 00:00:32,400
We basically did all of the thinking for it on Friday, but we did not

9
00:00:32,400 --> 00:00:35,400
finish the actual code because we had a bunch of things, we kind of

10
00:00:35,400 --> 00:00:39,200
had to switch around and so that's all I'm gonna do today.

11
00:00:39,600 --> 00:00:44,000
We're just going to get that that all finished up day 175.

12
00:00:44,400 --> 00:00:47,000
So if you are following along with the source code, if you preorder

13
00:00:47,000 --> 00:00:50,100
the game on handmade hero dot-org, day 174 is source.

14
00:00:50,100 --> 00:00:50,900
Code is the source code.

15
00:00:50,900 --> 00:00:51,500
You want to start with.

16
00:00:51,500 --> 00:00:53,500
That's a source code that I'm going to be starting with.

17
00:00:53,900 --> 00:00:59,000
Today and so that is the source code that you yourself should start

18
00:00:59,000 --> 00:00:59,400
with.

19
00:00:59,600 --> 00:01:04,700
If you would like to be in lockstep your own, your very own home

20
00:01:04,700 --> 00:01:08,800
version of handmade hero if you would like to follow along.

21
00:01:09,400 --> 00:01:10,000
All right.

22
00:01:10,200 --> 00:01:16,000
So where we sort of start stopped is we did not quite get to the point

23
00:01:16,000 --> 00:01:20,800
where I think I was where I was even sort of satisfied that we had

24
00:01:20,800 --> 00:01:23,200
finished doing the test asset Builder.

25
00:01:23,800 --> 00:01:25,800
Stuff modifications that needed to happen.

26
00:01:26,300 --> 00:01:29,500
So I'm going to go ahead and just take a walk through that.

27
00:01:29,800 --> 00:01:31,800
Make sure that everything is actually done.

28
00:01:31,800 --> 00:01:35,400
Because I suspect, we probably didn't quite finish, a bunch of it, and

29
00:01:35,400 --> 00:01:39,600
just make sure that everything is, at least, at a certain level of

30
00:01:39,600 --> 00:01:44,000
completion before I ever tried to load anything in on the other side,

31
00:01:44,000 --> 00:01:44,600
right?

32
00:01:44,700 --> 00:01:45,000
Okay.

33
00:01:45,000 --> 00:01:46,100
So here we go.

34
00:01:46,600 --> 00:01:49,000
I think I moved everything out to the outer side.

35
00:01:49,000 --> 00:01:49,500
Yes, I did.

36
00:01:49,500 --> 00:01:53,500
So, in the H file here, we have our loaded font in the loaded font.

37
00:01:53,500 --> 00:01:53,600
We

38
00:01:53,800 --> 00:01:56,700
Storing the stuff sort of non sparsely.

39
00:02:00,000 --> 00:02:00,500
Right.

40
00:02:01,700 --> 00:02:07,000
So you can kind of see we have our our tables here where we're going

41
00:02:07,000 --> 00:02:10,600
to store the glyphs that's actually going to be sparse.

42
00:02:10,800 --> 00:02:15,300
Then we're going to have our horizontal Advance which is not I guess

43
00:02:15,300 --> 00:02:16,900
necessarily going to be

44
00:02:19,600 --> 00:02:22,200
Going to be sparse, right?

45
00:02:22,200 --> 00:02:24,700
Because it's going to be what it's going to actually be this way.

46
00:02:24,800 --> 00:02:28,600
So, we have the horizontal Advanced is not quite sparse.

47
00:02:28,700 --> 00:02:32,000
It's sparse along one dimension, but not along the other because we

48
00:02:32,000 --> 00:02:34,300
don't know how many glyphs the users going to add.

49
00:02:34,300 --> 00:02:36,000
We kind of left it so that the user.

50
00:02:36,900 --> 00:02:37,500
Oh, good.

51
00:02:37,700 --> 00:02:39,200
The next wants me to update right now.

52
00:02:39,200 --> 00:02:44,200
You know what, I'm in the middle of a stream, so we've got that and

53
00:02:44,200 --> 00:02:45,000
then we have to write it out.

54
00:02:45,000 --> 00:02:47,500
And then we also have this glyph index from code Point thing which is

55
00:02:47,500 --> 00:02:49,300
basically a translation table on the

56
00:02:49,400 --> 00:02:52,700
Ian table allows us to go from a particular Unicode code point.

57
00:02:52,700 --> 00:02:54,000
So this is not sparse again.

58
00:02:54,000 --> 00:02:57,200
It's like well, I shouldn't say, it's not sparse, I'm saying that a

59
00:02:57,200 --> 00:02:57,800
little bit wrong.

60
00:02:58,100 --> 00:02:59,700
This is sparse right?

61
00:02:59,700 --> 00:02:59,900
It's

62
00:03:00,000 --> 00:03:00,500
Dense.

63
00:03:00,600 --> 00:03:04,900
Horizontal Advance is sparse and one axis dense in the other glyphs is

64
00:03:04,900 --> 00:03:05,200
dense.

65
00:03:05,200 --> 00:03:05,800
Just period.

66
00:03:05,800 --> 00:03:09,500
It's just the, the the ones that are actually being used stacked one

67
00:03:09,500 --> 00:03:12,000
on top of each other and that's it, right?

68
00:03:12,500 --> 00:03:15,900
So we've got all that and then when we actually store the stuff, we

69
00:03:15,900 --> 00:03:18,600
store for each individual font, Cliff, we store whatever the code

70
00:03:18,600 --> 00:03:20,300
point is for that Fang Cliff, right?

71
00:03:25,100 --> 00:03:26,400
So now we're remembering.

72
00:03:27,400 --> 00:03:29,400
And we're going to store that in the HHA as well.

73
00:03:30,000 --> 00:03:31,700
And so that's all relatively sane.

74
00:03:32,100 --> 00:03:35,900
Let's go ahead and take a look at everything to make sure that that I

75
00:03:35,900 --> 00:03:39,300
feel like we, it's at least passes some sort of a sniff test.

76
00:03:40,100 --> 00:03:42,700
Here's load font inside the load font.

77
00:03:42,700 --> 00:03:43,800
We go ahead and load it all up.

78
00:03:43,800 --> 00:03:48,100
We return the loaded font thing back, you know.

79
00:03:48,100 --> 00:03:49,200
So it's like that way.

80
00:03:49,200 --> 00:03:50,600
Everything's wrapped up in that struct.

81
00:03:50,600 --> 00:03:53,900
So we can have multiple fonts if you want to and so on, we do our

82
00:03:53,900 --> 00:03:55,200
select object to put it in.

83
00:03:55,200 --> 00:03:56,200
There we go.

84
00:03:56,200 --> 00:03:57,100
Ahead and do our

85
00:03:57,300 --> 00:04:02,000
Spliff count in the max with count is just saying like, hey go ahead

86
00:04:02,000 --> 00:04:05,000
and assume we're not going to have more than that, but users never

87
00:04:05,000 --> 00:04:06,000
gonna send us more than that.

88
00:04:10,200 --> 00:04:12,000
And you know cross your fingers.

89
00:04:12,700 --> 00:04:15,500
This is only in the asset processor so we could always up it to it's

90
00:04:15,500 --> 00:04:17,000
not a runtime thing.

91
00:04:17,899 --> 00:04:21,500
So then we go in through here and we're talking about the the rest of

92
00:04:21,500 --> 00:04:22,600
the cliff stuff, right?

93
00:04:22,800 --> 00:04:28,600
So we say, how many of the loaded fonts are there going to be for the

94
00:04:28,600 --> 00:04:31,800
maximum number of code points that we might have, right?

95
00:04:33,200 --> 00:04:35,200
And this doesn't

96
00:04:36,100 --> 00:04:38,800
This doesn't make any sense, right?

97
00:04:38,900 --> 00:04:42,500
I don't think loaded, we don't want a loaded font for each of those,

98
00:04:42,600 --> 00:04:43,000
right?

99
00:04:43,000 --> 00:04:44,100
That doesn't make any sense.

100
00:04:44,300 --> 00:04:48,300
Glyph index from code Point size is supposed to be one of these,

101
00:04:48,500 --> 00:04:49,000
right?

102
00:04:52,100 --> 00:04:52,600
There you go.

103
00:04:54,500 --> 00:04:57,400
Yeah, this is why I like to use, you'll notice.

104
00:04:57,800 --> 00:04:59,200
Did you see what the bug is there?

105
00:05:01,100 --> 00:05:05,500
You will notice that in the actual code, I do this stuff for a reason,

106
00:05:05,500 --> 00:05:06,100
right?

107
00:05:08,000 --> 00:05:09,600
Just push array, you notice.

108
00:05:09,600 --> 00:05:12,800
It does like the Typecast and it passes the count and then it uses

109
00:05:12,800 --> 00:05:14,100
size of the same type.

110
00:05:14,300 --> 00:05:17,200
That's like, a way of sort of, adding a little bit of type safety to

111
00:05:17,200 --> 00:05:21,500
these sorts of things so that you can get the same thing as you would

112
00:05:21,500 --> 00:05:24,900
get in a stronger type thing like like with a new or whatever.

113
00:05:24,900 --> 00:05:25,400
Right.

114
00:05:25,600 --> 00:05:29,700
And so that's just the kind of bug that you can avoid by doing it this

115
00:05:29,700 --> 00:05:29,800
way.

116
00:05:29,800 --> 00:05:33,400
That's why in the real code, I tend to be careful about that sort of

117
00:05:33,400 --> 00:05:34,900
thing present as it processes.

118
00:05:34,900 --> 00:05:36,000
Like a throwaway test things.

119
00:05:36,000 --> 00:05:37,000
So I don't care.

120
00:05:37,800 --> 00:05:41,600
Just since it happened, I'm just kind of like taking that opportunity

121
00:05:41,600 --> 00:05:45,500
to point out its handy, right?

122
00:05:45,500 --> 00:05:47,100
It's a handy thing that can catch errors for you.

123
00:05:50,600 --> 00:05:53,700
All right, a really kind of prevent you from making them in the first

124
00:05:53,700 --> 00:05:54,000
place.

125
00:05:54,000 --> 00:05:57,500
Not so much, catch them, but they don't happen because since it's

126
00:05:57,500 --> 00:05:59,800
based on taking the right size and returning the right,

127
00:06:01,100 --> 00:06:03,900
So, anyway, we grab one of those, that's all good.

128
00:06:03,900 --> 00:06:08,300
We clear it and that's important because we need to basically get rid

129
00:06:08,300 --> 00:06:12,100
of them all up front, right?

130
00:06:12,600 --> 00:06:17,300
We also kind of need, you know, we don't have yet, you know, looking

131
00:06:17,300 --> 00:06:21,000
through this, we don't have a null glyph, which we kind of would like

132
00:06:21,000 --> 00:06:21,700
to have.

133
00:06:21,700 --> 00:06:23,200
So we got to think about that in a second.

134
00:06:23,200 --> 00:06:25,600
But all right, we've got our font Cliffs here.

135
00:06:26,100 --> 00:06:27,500
We Malik.

136
00:06:28,000 --> 00:06:30,000
However, many glyphs there are going to be

137
00:06:30,200 --> 00:06:31,800
Which is the matter of her me there.

138
00:06:31,800 --> 00:06:33,000
Maximally could be

139
00:06:35,900 --> 00:06:37,700
We allocate those and that's fine.

140
00:06:38,800 --> 00:06:42,300
We go ahead and do a squared version of that for our horizontal

141
00:06:42,300 --> 00:06:48,900
Advanced is so I guess the horizontal the horizontal Advanced actually

142
00:06:49,000 --> 00:06:50,800
is dense on both axes.

143
00:06:56,400 --> 00:07:01,000
Ah, I see it's dense, but it leaves some extra room, because it's

144
00:07:01,000 --> 00:07:03,800
based on the Mac Swift count, not the actual growth count.

145
00:07:04,200 --> 00:07:07,000
So it's got, like, sort of, it's like a sub-sub rectangle.

146
00:07:07,000 --> 00:07:08,500
Inside a larger rectangle.

147
00:07:08,700 --> 00:07:11,100
That's fine, we allocate that.

148
00:07:11,100 --> 00:07:13,000
And we clear that as well.

149
00:07:13,200 --> 00:07:16,700
All right, so that all seems totally fine, but like I said, our glyph

150
00:07:16,700 --> 00:07:21,800
count is kind of a little bit wrong in some sense because we want to

151
00:07:21,800 --> 00:07:23,300
reserve a no glyph, right?

152
00:07:23,300 --> 00:07:25,800
We want we want to do something like Reserves.

153
00:07:26,000 --> 00:07:30,200
Is for the null glyph, right?

154
00:07:30,200 --> 00:07:34,600
So I want to say that glyph count, you know, actually equals 1.

155
00:07:34,800 --> 00:07:37,900
So the like the zeroth glyph is it's not actually used and then

156
00:07:37,900 --> 00:07:40,300
there's these actual glyphs themselves.

157
00:07:40,900 --> 00:07:45,900
I would want to, you know, sort of set that zeroth Cliff to something

158
00:07:45,900 --> 00:07:46,500
meaningful.

159
00:07:46,800 --> 00:07:47,500
Right?

160
00:07:48,000 --> 00:07:55,000
And those are, those are based on where's that those are based on.

161
00:07:57,300 --> 00:08:02,100
HHA font glyph which is the thing that we're actually storing in the

162
00:08:02,100 --> 00:08:02,500
file.

163
00:08:03,400 --> 00:08:07,300
And so what I want to do is set the Unicode code point to something

164
00:08:07,400 --> 00:08:11,700
that I, you know, I'm never going to use and I want to set the bitmap

165
00:08:11,700 --> 00:08:15,900
ID also to something that says it clearly invalid, right?

166
00:08:16,300 --> 00:08:22,600
So that's just to give space there to make sure that glyph 0 is is

167
00:08:22,600 --> 00:08:25,200
never actually used for anything, right?

168
00:08:28,900 --> 00:08:31,800
So, I think that's better.

169
00:08:32,600 --> 00:08:33,100
Okay?

170
00:08:34,000 --> 00:08:35,400
In finalized font kerning.

171
00:08:35,400 --> 00:08:36,500
Let's see what we do here.

172
00:08:36,799 --> 00:08:40,900
We go ahead and get those kerning pairs for all of our fonts, right?

173
00:08:40,900 --> 00:08:46,400
We then go through each individual pair, we look to see for each one

174
00:08:46,400 --> 00:08:47,000
of them.

175
00:08:49,500 --> 00:08:51,900
Well, you can kind of see that this is a little bit wrong to write for

176
00:08:51,900 --> 00:08:52,800
each one of them.

177
00:08:53,000 --> 00:08:55,100
We just make sure that they're valid code points.

178
00:08:55,100 --> 00:08:56,000
Assuming that they are.

179
00:08:56,000 --> 00:08:59,600
We look them up but then we don't actually check to see whether

180
00:09:00,100 --> 00:09:05,800
Not equal to 0 because only if the first is not equal to 0, you know,

181
00:09:05,800 --> 00:09:09,800
and the second or I guess either of them, I guess it wouldn't be a

182
00:09:09,800 --> 00:09:13,800
problem if one of them was equal to 0, I suppose because you're

183
00:09:13,800 --> 00:09:17,100
sitting like 04 the current tail, but I think we never want anything

184
00:09:17,100 --> 00:09:20,600
to current with r0 with glyph because that's the null if we don't

185
00:09:20,600 --> 00:09:23,000
really want anything to Kermit that I can't think of a reason why we

186
00:09:23,000 --> 00:09:23,600
would want to do that.

187
00:09:23,600 --> 00:09:28,800
So I think we want to say anything where the pair itself is not

188
00:09:28,800 --> 00:09:29,900
actually relevant to

189
00:09:30,000 --> 00:09:33,100
To us, we wouldn't want to touch because we just be meaning.

190
00:09:33,100 --> 00:09:38,100
We be incrementing a meaningless entry in this table and at worst, we

191
00:09:38,100 --> 00:09:38,800
would mess something up.

192
00:09:38,800 --> 00:09:43,700
So I feel like we just want to kill any, any sort of chance of that do

193
00:09:43,700 --> 00:09:46,300
anything in this last van, TC.

194
00:09:46,800 --> 00:09:50,600
Yeah, this is just making sure that we can actually use the font d.c.

195
00:09:50,600 --> 00:09:51,100
that since.

196
00:09:51,100 --> 00:09:53,900
Now it's getting reused, it just sets up the basic one that we need,

197
00:09:54,300 --> 00:09:55,300
and that's all fine.

198
00:09:56,800 --> 00:09:58,600
And look glyph bitmap.

199
00:09:59,400 --> 00:10:01,400
Let's see our Cliff index.

200
00:10:01,400 --> 00:10:03,800
We take a look at the code point there.

201
00:10:03,800 --> 00:10:04,100
I don't know.

202
00:10:04,100 --> 00:10:05,300
Do we actually set that?

203
00:10:05,300 --> 00:10:10,200
Let's make sure that we always set the code Point assume there's a

204
00:10:10,800 --> 00:10:12,700
setting call in here that sets.

205
00:10:12,700 --> 00:10:15,700
It looks like that is true.

206
00:10:16,100 --> 00:10:20,100
So oops so it goes ahead and sets the Unicode code point.

207
00:10:20,100 --> 00:10:25,900
It sets the bitmap ID and then it sets that look up for the sparse

208
00:10:25,900 --> 00:10:26,400
look upset.

209
00:10:26,600 --> 00:10:27,600
It's the glyph index.

210
00:10:27,600 --> 00:10:30,900
There we come through and we do our standard thing.

211
00:10:30,900 --> 00:10:33,100
We're still looking at the code Point here, which is what we want,

212
00:10:33,100 --> 00:10:36,800
because we're supposed to pass the regular Unicode over to Windows.

213
00:10:36,800 --> 00:10:39,000
So it's going to go ahead and do that.

214
00:10:39,000 --> 00:10:43,500
Happy birthday Windows, have a little party there it will go ahead and

215
00:10:43,500 --> 00:10:44,600
produce the font for us.

216
00:10:44,600 --> 00:10:45,900
We do all that nonsense.

217
00:10:45,900 --> 00:10:50,000
Then after we're done, we come through and we say alright, let's go

218
00:10:50,000 --> 00:10:51,700
ahead and see what the character with this.

219
00:10:51,700 --> 00:10:54,000
And then we go through the other glyph index.

220
00:10:55,100 --> 00:10:56,400
All through every other glyphs,

221
00:10:56,500 --> 00:10:58,800
There is, and we update.

222
00:11:02,200 --> 00:11:03,400
This is kind of stupid.

223
00:11:03,700 --> 00:11:07,000
If we don't want to do other glyph and X being 0, we might as well

224
00:11:07,000 --> 00:11:11,000
just start the loop at one pretty easy to do.

225
00:11:11,000 --> 00:11:12,400
I would think right?

226
00:11:12,700 --> 00:11:14,300
Unless for some reason, well,

227
00:11:15,900 --> 00:11:18,300
I guess we need to do it here.

228
00:11:18,300 --> 00:11:21,900
But is that still true care Advanced my screen change?

229
00:11:21,900 --> 00:11:23,100
Well, I'll leave it that way.

230
00:11:23,100 --> 00:11:26,500
I assume we did that to fix some of the kerning, and we had to do a

231
00:11:26,500 --> 00:11:28,600
bunch of stuff to make sure we were kind of lining up with windows.

232
00:11:28,600 --> 00:11:30,700
So, I guess I won't do that anyway.

233
00:11:31,500 --> 00:11:35,300
So, in here, we're working strictly with glyph indices, so that we'd,

234
00:11:35,300 --> 00:11:37,300
so no one should have to go through the translation table and they

235
00:11:37,300 --> 00:11:38,600
don't, so, that's good.

236
00:11:39,400 --> 00:11:43,400
And so, I feel like that's probably all fine and good.

237
00:11:44,500 --> 00:11:44,800
Yeah.

238
00:11:44,800 --> 00:11:45,600
So that should be it.

239
00:11:45,700 --> 00:11:49,400
It I feel like that's relatively sane when we're actually running it

240
00:11:49,400 --> 00:11:50,000
out.

241
00:11:50,200 --> 00:11:51,400
We finalized the font kerning.

242
00:11:51,400 --> 00:11:55,800
When we write the fonts out we go through each one here we say okay

243
00:11:55,800 --> 00:11:56,900
we've got the size.

244
00:11:57,200 --> 00:11:59,300
However big each individual,

245
00:12:04,300 --> 00:12:04,500
Yeah.

246
00:12:04,500 --> 00:12:05,100
Hover big.

247
00:12:05,100 --> 00:12:07,000
Each individual just going to be, we write them all out.

248
00:12:07,000 --> 00:12:11,100
We then go through the horizontal Advanced and we say, we're going to

249
00:12:11,100 --> 00:12:13,500
write it out row by row because we only write out a portion of the

250
00:12:13,500 --> 00:12:13,700
road.

251
00:12:13,700 --> 00:12:16,300
Obviously, we leave their space at the end, that's not used.

252
00:12:17,000 --> 00:12:20,000
So we only write out, however, many there actually were a glyph.

253
00:12:20,000 --> 00:12:24,300
We write that and we advance by the max lift count, because that's

254
00:12:24,300 --> 00:12:25,500
actually how many there are per row.

255
00:12:25,500 --> 00:12:28,600
So this is just like a bitmap, a subject blit, basically, that we're

256
00:12:28,600 --> 00:12:29,300
doing there.

257
00:12:30,300 --> 00:12:33,800
And that, is it really right?

258
00:12:33,800 --> 00:12:34,000
I mean,

259
00:12:34,200 --> 00:12:35,100
That is.

260
00:12:36,900 --> 00:12:38,300
That is all she wrote.

261
00:12:38,700 --> 00:12:46,400
And so I think that's fine looking over the in it code.

262
00:12:47,300 --> 00:12:52,200
Do we ever initialize the font DC we do?

263
00:12:55,500 --> 00:12:57,200
And yeah,

264
00:12:58,900 --> 00:13:01,800
Yeah, everything else looks kind of fine.

265
00:13:01,800 --> 00:13:03,300
What's our error here?

266
00:13:03,500 --> 00:13:04,500
Oh, that's good.

267
00:13:05,200 --> 00:13:06,100
Bitmap ID.

268
00:13:08,400 --> 00:13:08,900
Sarah.

269
00:13:12,100 --> 00:13:12,700
That.

270
00:13:14,700 --> 00:13:20,000
All right, so that's going to do our font nonsense so I'm going to go

271
00:13:20,000 --> 00:13:22,900
ahead and run the actual asset filter as well.

272
00:13:23,400 --> 00:13:25,900
Let's go ahead and run that see what it does.

273
00:13:26,600 --> 00:13:27,400
Who knows what it did?

274
00:13:27,400 --> 00:13:28,300
We have no idea.

275
00:13:28,300 --> 00:13:33,500
Of course we just wrote out some data, happy birthday and if we go

276
00:13:33,500 --> 00:13:37,500
into handmade data, we can at least inspect everything.

277
00:13:38,000 --> 00:13:41,400
So so it doesn't look particularly unusual.

278
00:13:41,400 --> 00:13:43,900
It wasn't like something disasters happened but you know,

279
00:13:44,000 --> 00:13:44,800
I really don't know.

280
00:13:44,800 --> 00:13:48,900
We, you know, we're just were kind of just Flying Blind here to say

281
00:13:48,900 --> 00:13:49,500
the least.

282
00:13:50,000 --> 00:13:50,300
All right?

283
00:13:50,300 --> 00:13:55,300
So when we go to load Assets, Now things are a little bit different

284
00:13:55,500 --> 00:13:57,300
than they used to be.

285
00:13:57,900 --> 00:14:01,700
Obviously, when we load the bitmap indices that part is still pretty

286
00:14:01,700 --> 00:14:02,700
much the same.

287
00:14:03,200 --> 00:14:06,800
So all of this, you know, the bitmap part of this didn't change, but

288
00:14:06,800 --> 00:14:11,000
when we go to load the font loading, the font is going to be a bit

289
00:14:11,300 --> 00:14:11,800
different.

290
00:14:11,800 --> 00:14:13,700
I think, let's take a look at the

291
00:14:14,100 --> 00:14:16,200
file format here now.

292
00:14:16,500 --> 00:14:19,200
And so now we have the glyph count, the Ascender height, the descender

293
00:14:19,200 --> 00:14:20,900
height, the external letting right.

294
00:14:21,200 --> 00:14:24,000
And then we've got, we've got this stuff, and then we've got the

295
00:14:24,000 --> 00:14:28,100
Unicode code point for our for each glyph, okay.

296
00:14:30,900 --> 00:14:31,400
Now.

297
00:14:32,900 --> 00:14:37,400
Before these were directly addressed, they can no longer be directly

298
00:14:37,400 --> 00:14:38,100
addressed.

299
00:14:38,500 --> 00:14:41,100
And so, when we do our loading, right?

300
00:14:41,100 --> 00:14:45,600
You can see here, we load in the table of the horizontal Advanced and

301
00:14:45,600 --> 00:14:47,400
then we load in the table of the code points.

302
00:14:47,700 --> 00:14:49,300
This is no longer correct.

303
00:14:49,700 --> 00:14:52,700
The code Point size is not a thing anymore, right?

304
00:14:52,700 --> 00:14:54,500
This thing is not a thing anymore.

305
00:14:54,500 --> 00:14:57,300
Actually, what this is, is our glyphs eyes.

306
00:14:59,700 --> 00:14:59,800
Right.

307
00:15:02,000 --> 00:15:07,800
And we've got to go ahead and read that in HHH fonts cliff and you

308
00:15:07,800 --> 00:15:13,200
know that's that's that's all fine and good but hoops.

309
00:15:16,300 --> 00:15:20,700
But when we actually load these in now, we've got a dense glyph.

310
00:15:20,700 --> 00:15:25,000
Table is, of course, a problem for us and that dense dense Cliff table

311
00:15:25,000 --> 00:15:28,800
actually needs to be like unpacked in some sense, right?

312
00:15:29,600 --> 00:15:33,700
Because we know what, all the bitmap IDS are and what their

313
00:15:33,700 --> 00:15:37,200
corresponding Unicode code points are, but we don't have a table that

314
00:15:37,200 --> 00:15:40,900
actually lets us get from a Unicode code point, which is what the user

315
00:15:40,900 --> 00:15:44,000
is going to be like typing in, you know, we don't have a way.

316
00:15:44,000 --> 00:15:45,000
Well, we're not actually

317
00:15:45,300 --> 00:15:50,400
Doing a typing in but that's what the asset language pack, whatever

318
00:15:50,400 --> 00:15:53,400
the source code is probably going to want to be in Unicode for

319
00:15:53,400 --> 00:15:54,100
convenience.

320
00:15:58,200 --> 00:15:59,100
so,

321
00:16:00,900 --> 00:16:06,700
You know, I feel like we need to keep it that way.

322
00:16:07,100 --> 00:16:10,100
So we need a table that's going to map from Unicode code points to our

323
00:16:10,100 --> 00:16:11,300
glyphs, right?

324
00:16:11,500 --> 00:16:15,300
Which basically is the inverse basically taking this dense table and

325
00:16:15,300 --> 00:16:17,000
making it sparse again, right?

326
00:16:18,200 --> 00:16:23,000
And so when we load the font, what we would also like to do is make

327
00:16:23,000 --> 00:16:26,900
sort of that Unicode mapping table, the problem with making that

328
00:16:26,900 --> 00:16:29,900
Unicode mapping table is it's going to be pretty big, right?

329
00:16:30,600 --> 00:16:33,900
We know that we could fit a basically, a 16-bit index.

330
00:16:33,900 --> 00:16:37,800
Let's see how big this is going to be, how many of those, those

331
00:16:39,000 --> 00:16:40,200
Unicode code points?

332
00:16:40,200 --> 00:16:43,100
Did we say there was going to be oops, would be here.

333
00:16:43,100 --> 00:16:44,600
I want to load up.

334
00:16:46,800 --> 00:16:47,400
This guy.

335
00:16:48,300 --> 00:16:50,100
So, how many do we say there was going to be?

336
00:16:50,100 --> 00:16:51,200
I think it was this.

337
00:16:51,200 --> 00:16:54,400
So it's, this is how many Unicode code points there are.

338
00:16:54,700 --> 00:16:59,800
And so, if we were going to to actually have the entire table, it

339
00:16:59,800 --> 00:17:01,900
would be a 2, MB lookup table.

340
00:17:03,200 --> 00:17:03,700
Right.

341
00:17:08,300 --> 00:17:11,099
You know, it's not fabulous.

342
00:17:11,700 --> 00:17:16,099
So what I would say is we should start with the 2, MB lookup table.

343
00:17:17,200 --> 00:17:21,500
But we kind of want to keep our eye on it and say well in the future,

344
00:17:21,500 --> 00:17:22,700
could we do a range space?

345
00:17:22,700 --> 00:17:23,300
Look up

346
00:17:25,400 --> 00:17:27,400
Or should we switch to like a binary search?

347
00:17:28,000 --> 00:17:33,500
Because remember, these are going to be sorted or rather, we could

348
00:17:33,500 --> 00:17:34,300
always sort these.

349
00:17:34,300 --> 00:17:36,900
It would be free for us to sort them by Unicode code point.

350
00:17:36,900 --> 00:17:40,200
I think they are currently going to be basically, by Unicode code

351
00:17:40,200 --> 00:17:43,200
Point probably, but maybe not exactly.

352
00:17:43,200 --> 00:17:44,700
So we'd have to sort them or something.

353
00:17:44,800 --> 00:17:47,500
We could do something like a binary search or some kind of other

354
00:17:47,500 --> 00:17:50,500
clever range, based search, kind of a thing or something like this.

355
00:17:51,200 --> 00:17:55,100
So, you know, a 2 MB, lookup table isn't great, but

356
00:17:55,300 --> 00:17:55,700
Initially.

357
00:17:56,200 --> 00:17:59,800
So, I think though, what I would like to do is start with that.

358
00:18:00,800 --> 00:18:04,700
And then, you know, as we, when it becomes necessary to do.

359
00:18:04,700 --> 00:18:09,500
So we'll try to do something smarter there but to get it working and

360
00:18:09,500 --> 00:18:12,500
also probably for a while we would want to use that because that's

361
00:18:12,500 --> 00:18:15,600
more of a late later stage thing, when we're actually totally sure

362
00:18:15,600 --> 00:18:18,100
that everything is doing what we wanted to do.

363
00:18:18,300 --> 00:18:21,200
That would probably be the right time for that, right?

364
00:18:22,300 --> 00:18:25,800
But yeah, but binary search might be better because you never really

365
00:18:25,800 --> 00:18:29,600
know like just just having the less memory footprint and then having

366
00:18:29,600 --> 00:18:34,500
the slower search may still be better because the castle usage or

367
00:18:34,500 --> 00:18:39,900
because of, you know, this, the less purely less code, be executed.

368
00:18:40,300 --> 00:18:43,400
It's really hard to say and I don't pretend to know that answer in

369
00:18:43,400 --> 00:18:43,900
advance.

370
00:18:44,700 --> 00:18:49,500
So off we go, let's say that.

371
00:18:49,500 --> 00:18:51,600
That is going to be

372
00:18:51,900 --> 00:18:52,800
There we go.

373
00:18:53,400 --> 00:18:58,100
And I'm going to add an additional thing here because now we sort of

374
00:18:58,100 --> 00:18:59,500
got the glyph size.

375
00:19:00,100 --> 00:19:01,300
So we're going to put that on here.

376
00:19:03,000 --> 00:19:06,800
The size total right is actually going to have one more thing in it

377
00:19:06,800 --> 00:19:12,000
which is going to be like the the Unicode map and that's just going to

378
00:19:12,000 --> 00:19:13,100
be purely.

379
00:19:13,400 --> 00:19:18,100
You know, one of these you sixteens because we know we don't have we

380
00:19:18,100 --> 00:19:22,700
know we could have more than 256 glyphs in a font.

381
00:19:22,700 --> 00:19:27,500
We know we won't have more than 64,000 lifts in a font so that's going

382
00:19:27,500 --> 00:19:32,400
to be times the maximum Unicode code point which actually I

383
00:19:32,600 --> 00:19:36,600
Is we need to pull out of test asset Builder, where it is at the

384
00:19:36,600 --> 00:19:44,800
moment and actually have that be in our file format or in our asset

385
00:19:44,900 --> 00:19:46,200
category, right?

386
00:19:46,200 --> 00:19:49,400
So that's, that's our our Max Unicode code point.

387
00:19:49,800 --> 00:19:53,100
So there we've, you know, we've allocated that mapping table.

388
00:19:53,300 --> 00:19:57,100
The other thing that we could do and, you know, this might be a

389
00:19:57,100 --> 00:19:57,900
smarter thing.

390
00:19:57,900 --> 00:20:02,000
So this, this might, this might get us out of a little bit of a jam.

391
00:20:02,500 --> 00:20:02,800
Oh well.

392
00:20:05,600 --> 00:20:08,500
Not really, but but I mean, here's your just something, I'll throw out

393
00:20:08,500 --> 00:20:08,800
there.

394
00:20:09,400 --> 00:20:14,000
Another thing that you could do is we could say in the AHA, just just

395
00:20:14,000 --> 00:20:17,500
to save us some trouble on the, on the ASCII side of things.

396
00:20:17,800 --> 00:20:21,400
For wider sets of things, it doesn't really help that much, but we

397
00:20:21,400 --> 00:20:22,300
could do it this way.

398
00:20:22,900 --> 00:20:25,400
We could say, one Past

399
00:20:27,400 --> 00:20:30,100
Highest code point, right?

400
00:20:31,900 --> 00:20:38,000
Like that and then we would know that that we could just use that.

401
00:20:38,100 --> 00:20:42,100
And so we would never have to have a map that was bigger than that,

402
00:20:42,200 --> 00:20:42,700
right?

403
00:20:43,700 --> 00:20:44,700
That's something we could do.

404
00:20:44,700 --> 00:20:46,100
So let's let's do that.

405
00:20:46,600 --> 00:20:47,900
Seems like a reasonable thing to do.

406
00:20:47,900 --> 00:20:49,200
Let's just go ahead and do that.

407
00:20:49,400 --> 00:20:53,800
And in the test asset Builder, it's pretty easy for us to, you know,

408
00:20:53,800 --> 00:20:54,800
account for that.

409
00:20:54,800 --> 00:20:57,000
All we have to do is in the

410
00:20:57,200 --> 00:20:58,900
The in the loaded font, right?

411
00:20:59,200 --> 00:20:59,900
We just have

412
00:21:00,000 --> 00:21:05,200
Here, you know, one passed last one, past highest code point, right?

413
00:21:06,100 --> 00:21:08,700
And then, when we load the font,

414
00:21:10,200 --> 00:21:19,700
we just initialize that to zero and every time we use, you know, every

415
00:21:19,700 --> 00:21:20,800
time we use something,

416
00:21:23,800 --> 00:21:27,300
From the, let's see where it is from like load.

417
00:21:27,300 --> 00:21:29,900
Like actually we could do it in add character asset.

418
00:21:30,000 --> 00:21:35,500
Every time we use one, we just say, you know, if whatever the value is

419
00:21:35,500 --> 00:21:37,700
that we're actually using, whatever the code point is that we're

420
00:21:37,700 --> 00:21:46,500
using, if that code point is, is ever greater than or equal to the

421
00:21:46,700 --> 00:21:49,100
highest code point, we would just

422
00:21:50,000 --> 00:21:57,400
Set them like so right another way to do it would be to say oh I guess

423
00:21:57,400 --> 00:22:01,200
this a if one pass the highest code point is less than or equal to

424
00:22:01,200 --> 00:22:02,100
code point.

425
00:22:03,500 --> 00:22:06,400
Then we want to make it equal to co point but plus one, we always want

426
00:22:06,400 --> 00:22:06,900
to be higher.

427
00:22:10,600 --> 00:22:11,000
Okay.

428
00:22:12,300 --> 00:22:15,000
So that would you know, that would solve that problem.

429
00:22:15,000 --> 00:22:15,700
Presumably.

430
00:22:17,300 --> 00:22:22,300
For us one past Max font code Point.

431
00:22:22,300 --> 00:22:24,400
Why is that not

432
00:22:25,800 --> 00:22:31,900
Undeclared identifier, I put it in in handmade file format, study H,

433
00:22:31,900 --> 00:22:32,600
did I not

434
00:22:34,600 --> 00:22:36,700
What, where did I put it?

435
00:22:40,000 --> 00:22:41,100
Where did I put that?

436
00:22:48,400 --> 00:22:50,500
Seriously, seriously.

437
00:22:53,600 --> 00:22:54,600
I could have sworn.

438
00:22:54,600 --> 00:22:55,600
I got pasted that.

439
00:22:56,000 --> 00:22:58,000
That is one of those like on stream.

440
00:22:58,000 --> 00:23:01,000
Fundus has it got deleted?

441
00:23:04,500 --> 00:23:05,800
Oh, duh.

442
00:23:05,900 --> 00:23:06,400
Hi.

443
00:23:06,400 --> 00:23:11,000
I'm I'm it's genius day here at handmade hero.

444
00:23:11,200 --> 00:23:11,800
Right?

445
00:23:11,900 --> 00:23:14,900
I I was just like, oh, I don't need it anymore.

446
00:23:14,900 --> 00:23:16,300
Well, I need it in the asset.

447
00:23:16,300 --> 00:23:18,900
Packer duh, fantastic.

448
00:23:20,000 --> 00:23:21,600
Yeah, that was, that was pretty smooth.

449
00:23:22,300 --> 00:23:24,200
I am a professional programmer.

450
00:23:25,000 --> 00:23:25,900
All right, there we go.

451
00:23:27,000 --> 00:23:33,600
My mommy says, I'm very good at programming, so loaded, font does not

452
00:23:33,600 --> 00:23:34,800
have that glyphs.

453
00:23:34,800 --> 00:23:35,500
That's true.

454
00:23:35,500 --> 00:23:36,400
It doesn't.

455
00:23:36,500 --> 00:23:38,300
And then in here, we need that Unicode map.

456
00:23:38,300 --> 00:23:39,600
So, let's just finish this up.

457
00:23:39,600 --> 00:23:41,100
We've got the Unicode Map size.

458
00:23:41,100 --> 00:23:47,800
We're going to go ahead and do our acquire assets memory on that.

459
00:23:47,800 --> 00:23:52,000
So we have to take that Unicode Map size and put it in there.

460
00:23:53,200 --> 00:23:53,900
Map size.

461
00:23:55,900 --> 00:23:57,200
Oh, actually, it doesn't go in.

462
00:23:57,200 --> 00:23:58,800
There goes right there.

463
00:24:00,100 --> 00:24:02,200
So the data size is, this is what it loads.

464
00:24:02,200 --> 00:24:06,200
And then the size total, this is what we actually want to have extra

465
00:24:06,200 --> 00:24:07,800
sort of for it, if that makes sense.

466
00:24:08,400 --> 00:24:13,500
And that Unicode map is just going to go right after, you know, right

467
00:24:13,500 --> 00:24:14,900
after the horizontal Advanced.

468
00:24:14,900 --> 00:24:16,100
So that's just going to be

469
00:24:19,400 --> 00:24:21,300
This sort of thing, right?

470
00:24:26,900 --> 00:24:28,300
U16 star.

471
00:24:30,100 --> 00:24:30,800
Plus.

472
00:24:32,400 --> 00:24:33,800
Horizontal band size.

473
00:24:36,000 --> 00:24:39,200
And by the way, just to make a note of this.

474
00:24:40,000 --> 00:24:44,500
So this is some kind of fiddly like pointer alignment stuff, right?

475
00:24:44,500 --> 00:24:48,800
It's like, oh, I'm basically sub allocating out of this thing, a bunch

476
00:24:48,800 --> 00:24:52,800
of extra stuff and because there's very little of it.

477
00:24:52,800 --> 00:24:55,700
Like I'm just doing it three times one for each asset type.

478
00:24:56,200 --> 00:24:59,400
I didn't go ahead and make a system for doing that in cases where you

479
00:24:59,400 --> 00:25:00,200
do a lot of this.

480
00:25:00,200 --> 00:25:04,300
I always make it a system for it and like, you know, if I do that a

481
00:25:04,300 --> 00:25:05,700
lot in allocating

482
00:25:05,900 --> 00:25:07,100
I'm doing these like some brake.

483
00:25:07,100 --> 00:25:08,400
I just make a thing that does it for me.

484
00:25:10,400 --> 00:25:12,500
It makes it less error-prone and it's easier to type.

485
00:25:14,600 --> 00:25:18,100
But at this point, the amount that I foresee us doing is so low that I

486
00:25:18,100 --> 00:25:20,000
just don't feel, it's worth it to go do that.

487
00:25:20,000 --> 00:25:22,900
But, you know, just throwing it out there.

488
00:25:23,800 --> 00:25:26,600
That's something I would do in a code base where I was going to do

489
00:25:26,600 --> 00:25:29,000
more of this sort of thing.

490
00:25:30,100 --> 00:25:33,400
Anyway so that's how that's going to work.

491
00:25:33,400 --> 00:25:38,100
And then we need to make our loaded font actually have any of this

492
00:25:38,100 --> 00:25:38,600
stuff.

493
00:25:39,600 --> 00:25:46,600
You 16 Unicode map where we are and the code points are now glyphs and

494
00:25:46,600 --> 00:25:50,200
the glyphs are now HHA font glyph, right?

495
00:25:54,200 --> 00:25:57,700
And I think that's most of it.

496
00:25:57,900 --> 00:26:02,000
The destination is going to start by.

497
00:26:03,900 --> 00:26:05,200
Loading into here.

498
00:26:13,400 --> 00:26:15,300
Code points is not a member of loaded font.

499
00:26:15,300 --> 00:26:15,900
You are correct.

500
00:26:15,900 --> 00:26:19,600
So I think is that actually it I think that's it.

501
00:26:19,600 --> 00:26:24,100
Now we have one problem which is that nobody actually builds that

502
00:26:24,100 --> 00:26:25,300
Unicode mapping table.

503
00:26:26,000 --> 00:26:29,800
And so what we want to do after we allocate that when we do load asset

504
00:26:29,800 --> 00:26:33,100
work directly you know after we do read data from file and the data

505
00:26:33,100 --> 00:26:38,000
comes back we need to actually or we really want to prep that data if

506
00:26:38,000 --> 00:26:41,800
it's a font and so we can in load asset work, we can have a little

507
00:26:41,800 --> 00:26:43,000
thing here with says like

508
00:26:43,100 --> 00:26:44,700
Additional work to do or something.

509
00:26:45,200 --> 00:26:49,000
And I think I rather than having two different ones of these or well,

510
00:26:49,000 --> 00:26:51,700
you know what, we could just make two ones of these.

511
00:26:51,700 --> 00:26:54,900
We could just do something like that, right?

512
00:26:56,400 --> 00:26:59,800
Could do it like this, where we do load asset work directly and then

513
00:27:00,000 --> 00:27:02,700
Then here well no because we don't want the state till we've mapped it

514
00:27:02,700 --> 00:27:03,200
properly.

515
00:27:03,500 --> 00:27:06,500
So I guess what I would say is after this, I do a little switch

516
00:27:06,500 --> 00:27:10,000
statement and I just say, okay, if there's something else to do here,

517
00:27:11,000 --> 00:27:16,200
you know, finalize, type or something, or finalized operation.

518
00:27:17,000 --> 00:27:18,900
And then I just do, you know,

519
00:27:21,600 --> 00:27:22,500
Something like this.

520
00:27:25,300 --> 00:27:26,500
Maybe even something like this.

521
00:27:27,700 --> 00:27:34,700
You know I'm load asset work finalized, operation finalized, none.

522
00:27:43,100 --> 00:27:44,700
And then, finalize asset.

523
00:27:46,800 --> 00:27:47,200
Bonk.

524
00:27:49,800 --> 00:27:53,700
and I guess we don't really store anything else in here so I could

525
00:27:53,700 --> 00:27:57,700
just say, okay yeah we're good with that and so if it's none,

526
00:28:01,300 --> 00:28:02,100
Nothing to do.

527
00:28:04,000 --> 00:28:07,000
And if it's font, we got to build that mapping table.

528
00:28:08,200 --> 00:28:08,600
Yeah.

529
00:28:10,400 --> 00:28:12,300
So, how do we build the mapping table?

530
00:28:13,500 --> 00:28:16,000
Well, it's pretty simple, right?

531
00:28:16,000 --> 00:28:17,200
There's almost nothing to it.

532
00:28:17,800 --> 00:28:20,700
We know that we've got some number of glyphs like.

533
00:28:20,700 --> 00:28:24,700
So we know that the 0 glyph is special so we don't care about that

534
00:28:24,700 --> 00:28:25,100
cliff.

535
00:28:31,000 --> 00:28:37,100
So we can just go through them and we can say, okay for all the glyphs

536
00:28:37,100 --> 00:28:39,800
in this font and first of all, I guess we need to actually have the

537
00:28:39,800 --> 00:28:40,700
font but that's okay.

538
00:28:40,700 --> 00:28:45,100
We've got it right here, right in the the asset as it is.

539
00:28:45,700 --> 00:28:48,500
I guess that does bring up the question though.

540
00:28:49,000 --> 00:28:50,800
Does the asset have its header?

541
00:28:50,800 --> 00:28:51,500
It does.

542
00:28:51,800 --> 00:28:54,500
And so the header has the loaded font in it so I can get the

543
00:28:54,500 --> 00:28:57,100
information that I actually need just wanted to make sure that was

544
00:28:57,100 --> 00:28:57,900
actually true.

545
00:28:58,500 --> 00:28:59,900
So the loaded font

546
00:29:00,600 --> 00:29:04,000
Just comes from saying, whatever the asset is that we were going to

547
00:29:04,000 --> 00:29:04,600
work on.

548
00:29:06,200 --> 00:29:06,600
And you know what?

549
00:29:06,600 --> 00:29:07,700
I should probably do as well.

550
00:29:07,700 --> 00:29:11,900
Here is, I should should say we should only do this if we actually

551
00:29:11,900 --> 00:29:13,400
loaded, right?

552
00:29:13,900 --> 00:29:18,100
Because if we didn't load that, that is probably not a very sensible

553
00:29:18,100 --> 00:29:19,900
thing to do, right?

554
00:29:22,300 --> 00:29:26,800
At least, that would be my assumption and in fact we might want to

555
00:29:26,800 --> 00:29:27,500
clear.

556
00:29:27,500 --> 00:29:30,600
Well, yeah, yeah, yeah, yeah.

557
00:29:32,800 --> 00:29:33,500
Well, I think it's fine.

558
00:29:33,700 --> 00:29:39,500
All right, anyway, so when we finalize the font and we grab a the the

559
00:29:39,800 --> 00:29:43,200
header out of here, we should be able to just grab go right to the

560
00:29:43,200 --> 00:29:43,700
font, right?

561
00:29:43,700 --> 00:29:47,600
So there's the asset, there's the header and then the header has the

562
00:29:47,600 --> 00:29:52,700
font so that font will give us the list of assets.

563
00:29:52,900 --> 00:29:54,800
So the loaded font for example,

564
00:29:57,500 --> 00:29:58,300
Oh, but you know what?

565
00:29:58,300 --> 00:29:58,600
We need.

566
00:29:58,600 --> 00:29:59,800
The info is

567
00:30:00,000 --> 00:30:02,800
All right, which we don't actually have.

568
00:30:03,800 --> 00:30:11,100
We need the asset info and we don't have the asset info GE, you can

569
00:30:11,100 --> 00:30:12,400
kind of see right.

570
00:30:16,500 --> 00:30:17,500
Well, is that true?

571
00:30:18,500 --> 00:30:20,200
I don't know, we've got it right here.

572
00:30:20,500 --> 00:30:21,700
I don't know why I'm freaking out.

573
00:30:21,900 --> 00:30:22,900
I've got it right here.

574
00:30:23,300 --> 00:30:24,100
No problem.

575
00:30:24,500 --> 00:30:27,100
HHH, HHH a font.

576
00:30:29,500 --> 00:30:31,400
Let's go ahead and grab that as well.

577
00:30:34,300 --> 00:30:38,400
So, the ha4 that is just there.

578
00:30:39,300 --> 00:30:40,700
And so now we can do

579
00:30:42,700 --> 00:30:44,700
HHH, dark lift count.

580
00:30:45,000 --> 00:30:46,500
Go through every single glyph.

581
00:30:46,600 --> 00:30:47,000
Right?

582
00:30:47,100 --> 00:30:51,900
HHH h.h., a font glyph, glyph equals work.

583
00:30:54,300 --> 00:30:55,000
Asset.

584
00:31:01,400 --> 00:31:02,000
That's not true.

585
00:31:02,000 --> 00:31:05,500
I did this for a reason font glyphs with index.

586
00:31:06,800 --> 00:31:09,100
That gives us out the particular glyph.

587
00:31:09,300 --> 00:31:11,900
We then just have to go the glyph code point.

588
00:31:13,800 --> 00:31:17,500
which is actually called Unicode code point, I believe,

589
00:31:19,300 --> 00:31:20,800
Unicode code point.

590
00:31:22,800 --> 00:31:23,900
so, the code point,

591
00:31:26,200 --> 00:31:28,600
We want to set that member of the table.

592
00:31:28,600 --> 00:31:29,800
We could also assert it.

593
00:31:29,800 --> 00:31:36,100
It's a assert that it's less than the fonts maximum one you know one

594
00:31:36,100 --> 00:31:37,400
past highest code point.

595
00:31:44,000 --> 00:31:48,100
So we do that, we then inside the table for this font.

596
00:31:48,100 --> 00:31:54,200
So, in font Unicode map in that location, we just store the glyph

597
00:31:54,200 --> 00:31:56,900
index and now we have unpacked the table, right?

598
00:31:56,900 --> 00:32:01,600
We had a dense table of glyphs and we just are now sort of mapping it

599
00:32:01,600 --> 00:32:04,100
out into the Unicode space.

600
00:32:04,200 --> 00:32:07,000
So this thing is Giant and sparse and this thing is dense.

601
00:32:07,500 --> 00:32:12,000
Now, in order to fill all the zeros in that I probably ahead of time,

602
00:32:12,000 --> 00:32:12,300
right?

603
00:32:12,500 --> 00:32:13,600
Want to just clear it.

604
00:32:14,400 --> 00:32:18,500
So when we actually are in here and we acquire that asset to memory,

605
00:32:18,600 --> 00:32:22,300
what I would like to do at that point is I would like to clear out

606
00:32:23,200 --> 00:32:25,600
everything in the whereas that's load sound.

607
00:32:25,600 --> 00:32:27,500
I want load font.

608
00:32:27,500 --> 00:32:28,000
There it is.

609
00:32:28,700 --> 00:32:30,200
I want to do a clear.

610
00:32:30,700 --> 00:32:35,800
So I want to do a zero size after we get it so zero size the Unicode

611
00:32:35,800 --> 00:32:36,300
map.

612
00:32:37,800 --> 00:32:38,900
We have a zero array.

613
00:32:45,700 --> 00:32:46,300
You don't.

614
00:32:47,400 --> 00:32:48,500
We don't do.

615
00:32:48,500 --> 00:32:49,900
You know what we do now?

616
00:32:55,200 --> 00:32:58,800
Yeah, you feeling that I think that's pretty good idea.

617
00:33:00,300 --> 00:33:01,600
Can't think of a reason not.

618
00:33:09,000 --> 00:33:10,100
Seems like a good idea now.

619
00:33:13,300 --> 00:33:18,400
That way, we can just say, Okay, 0, this array, we knew that we have,

620
00:33:18,700 --> 00:33:22,700
however, many glyphs there were there or Unicode, impasse is code

621
00:33:22,700 --> 00:33:23,200
Point.

622
00:33:23,700 --> 00:33:24,400
Although, you know what?

623
00:33:24,400 --> 00:33:27,400
Now I think about it, although I want that in this case, I that was

624
00:33:27,400 --> 00:33:27,800
dumb.

625
00:33:27,800 --> 00:33:30,900
I don't really need it because I already have the, the size already

626
00:33:30,900 --> 00:33:32,900
computed because I'd do the layout, so that's fine.

627
00:33:34,900 --> 00:33:37,900
But still I do like having that.

628
00:33:38,800 --> 00:33:40,700
Okay, so let's go ahead and set this.

629
00:33:40,700 --> 00:33:43,300
Now here's the finalized operation.

630
00:33:49,300 --> 00:33:49,800
Excuse me.

631
00:33:50,800 --> 00:33:52,100
And

632
00:33:56,500 --> 00:33:57,500
Header as a pointer.

633
00:34:00,400 --> 00:34:01,100
Let's see.

634
00:34:01,100 --> 00:34:06,400
Ehhh assets cannot convert to H font.

635
00:34:06,400 --> 00:34:07,300
That's true.

636
00:34:10,400 --> 00:34:14,300
And the Unicode map right to glyph index.

637
00:34:14,300 --> 00:34:19,100
Here I says we got to convert that down to 16 so I'll also do an

638
00:34:19,100 --> 00:34:26,000
insert that the glyph index is or rather that you 16 glyph at index

639
00:34:26,000 --> 00:34:30,699
equals glyph index just so we know that it didn't overflow.

640
00:34:33,600 --> 00:34:36,100
And now we have to actually do the lookup.

641
00:34:36,100 --> 00:34:39,300
That's not particularly difficult but I do want to do before then just

642
00:34:39,300 --> 00:34:42,400
to make sure I don't forget though is that when we load this we now

643
00:34:42,400 --> 00:34:44,199
need to add that finalize up.

644
00:34:44,500 --> 00:34:48,100
So we have this sort of work finalized, right?

645
00:34:50,000 --> 00:34:56,199
And that's going to be finalized asset none in all the cases other

646
00:34:56,199 --> 00:34:58,400
than the font, right?

647
00:34:59,300 --> 00:35:03,600
Don't ask me why, let's see.

648
00:35:05,300 --> 00:35:07,800
Here we go and you can see this is again remember I've said that this

649
00:35:07,800 --> 00:35:10,000
is kind of boilerplate e and that's why I wanted to do so you can see

650
00:35:10,000 --> 00:35:10,900
like this is just stupid.

651
00:35:10,900 --> 00:35:13,400
You don't want to have to do all this every time.

652
00:35:13,400 --> 00:35:18,100
So that's something that that I would like to change when we get a

653
00:35:18,100 --> 00:35:18,500
chance.

654
00:35:18,900 --> 00:35:24,400
Anyway, so okay there we've got our code compiling, probably not

655
00:35:24,400 --> 00:35:27,400
fantastically awesome but it's at least compiling.

656
00:35:27,900 --> 00:35:31,100
And that what we have to do is we have to fix anything.

657
00:35:31,300 --> 00:35:34,900
Wear something passes in a code point because

658
00:35:35,100 --> 00:35:37,300
Is when something passes in a code point.

659
00:35:37,500 --> 00:35:41,000
We want to actually talk about a glyph instead, right?

660
00:35:41,200 --> 00:35:43,200
And so, we have get horizontal Advance.

661
00:35:43,200 --> 00:35:48,100
We have get bitmap for glyph and we want those to start dealing with

662
00:35:48,100 --> 00:35:48,600
glyphs.

663
00:35:48,700 --> 00:35:51,600
So, we want this to be pre of glyph, right?

664
00:35:53,300 --> 00:35:55,500
Like, so and glyph.

665
00:35:58,300 --> 00:35:59,800
so, in here, we want

666
00:36:00,000 --> 00:36:01,100
To be pre of glyph.

667
00:36:02,500 --> 00:36:03,100
Glass.

668
00:36:03,700 --> 00:36:06,400
And so when this when you do get clamp code Point, really?

669
00:36:06,400 --> 00:36:09,600
All I want to do is change that to like get glyph from code point.

670
00:36:12,700 --> 00:36:13,300
Right?

671
00:36:14,000 --> 00:36:17,000
So we pass in those code points and that's fine.

672
00:36:17,000 --> 00:36:18,500
Then there's the code Point again.

673
00:36:19,200 --> 00:36:22,100
And so in here we say you know what, it's not a code Point anymore,

674
00:36:22,100 --> 00:36:23,000
it's a glyph.

675
00:36:23,700 --> 00:36:26,500
Thank you very much then in our font code points,

676
00:36:31,700 --> 00:36:32,800
Becomes Funk lifts.

677
00:36:35,500 --> 00:36:38,400
The glyph, and it's a bitmap ID.

678
00:36:39,100 --> 00:36:42,700
And then in here, we just are going to against a get glyph from code

679
00:36:42,700 --> 00:36:43,300
point.

680
00:36:43,600 --> 00:36:45,700
This becomes get glyph from code point.

681
00:36:49,000 --> 00:36:50,200
It takes a font.

682
00:36:53,700 --> 00:36:57,900
Like so, and I'm not sure.

683
00:37:00,600 --> 00:37:02,200
I think that's just how that's going to go.

684
00:37:02,800 --> 00:37:03,800
Pretty much exactly.

685
00:37:05,000 --> 00:37:05,300
Okay.

686
00:37:05,300 --> 00:37:11,900
And so everything in here looks fine, except these guys have to pass

687
00:37:11,900 --> 00:37:15,000
the font, which they'll do.

688
00:37:16,000 --> 00:37:17,100
Yeah.

689
00:37:17,600 --> 00:37:18,700
Yeah.

690
00:37:18,700 --> 00:37:19,900
So that's all good.

691
00:37:19,900 --> 00:37:21,100
Everyone's happy.

692
00:37:21,100 --> 00:37:26,500
The values being offset, like, it should be, so that's all good.

693
00:37:26,500 --> 00:37:28,800
Now, if we do get Cliff from code point, now we have to actually

694
00:37:28,800 --> 00:37:29,600
implement it.

695
00:37:30,400 --> 00:37:32,300
So the result is going to be the glyph index.

696
00:37:32,300 --> 00:37:33,600
First, we check to see

697
00:37:34,800 --> 00:37:40,100
Whether or not the code Point Falls within the range of code points.

698
00:37:40,100 --> 00:37:42,900
So we'd have to check to see one passed.

699
00:37:43,000 --> 00:37:48,000
Last one, past has code Point, assuming it does, we then want to just

700
00:37:48,200 --> 00:37:53,600
the glyph index is assumed to just be whatever the fonts Unicode map

701
00:37:53,600 --> 00:37:56,100
says, it is at that point, right?

702
00:37:58,500 --> 00:38:03,700
And then, you know, we could also assert here that the result is going

703
00:38:03,700 --> 00:38:06,900
to be less than the total glyph count of that font.

704
00:38:08,500 --> 00:38:11,200
Because we know we're never allowed to look up something past that,

705
00:38:12,500 --> 00:38:15,500
get glyph from code point.

706
00:38:17,600 --> 00:38:19,100
Future money from Xin there.

707
00:38:21,500 --> 00:38:23,900
An extra from does not actually make it any better people.

708
00:38:24,900 --> 00:38:25,400
Yeah.

709
00:38:25,500 --> 00:38:26,100
What can I say?

710
00:38:27,300 --> 00:38:29,100
All right and now we got to debug.

711
00:38:29,700 --> 00:38:34,700
We got 15 minutes left for debugging so whoops got actually

712
00:38:36,800 --> 00:38:38,400
Rerun the asset Packer as well.

713
00:38:39,100 --> 00:38:40,700
Build test asset Builder.

714
00:38:43,600 --> 00:38:47,600
Off we go, and let's just take a benchmark and say, where are we at?

715
00:38:47,600 --> 00:38:48,700
Like what's actually happening here?

716
00:38:48,700 --> 00:38:49,900
We're going to crash what's going to happen.

717
00:38:49,900 --> 00:38:50,400
Let's see.

718
00:38:51,600 --> 00:38:57,000
So we don't crash oddly enough but we do not get any fonts, right?

719
00:38:57,100 --> 00:38:58,100
So nothing on the screen.

720
00:38:58,800 --> 00:38:59,800
All right, so let's start.

721
00:39:00,000 --> 00:39:01,800
By taking a look at the load.

722
00:39:03,000 --> 00:39:06,300
And see if we can see what's going on with the load, right?

723
00:39:06,600 --> 00:39:10,300
And to do that, what I'd like to step into first is I'd like to step

724
00:39:10,300 --> 00:39:11,000
into

725
00:39:12,700 --> 00:39:13,700
load font.

726
00:39:15,300 --> 00:39:17,200
Wherever you come out, come out wherever you are.

727
00:39:18,300 --> 00:39:20,700
No, there we are.

728
00:39:24,200 --> 00:39:25,600
Here we go into load font.

729
00:39:26,500 --> 00:39:29,100
I'm going to take a look at what some of these sizes and what some of

730
00:39:29,100 --> 00:39:32,900
these info values say so I can get a little bit of a heads up.

731
00:39:33,600 --> 00:39:39,600
Well, that is not helpful and of course, we pretty much know exactly

732
00:39:39,600 --> 00:39:40,100
why that is.

733
00:39:40,100 --> 00:39:43,200
It's because I track that value bunch and then I never actually

734
00:39:43,200 --> 00:39:44,400
bothered to write it out.

735
00:39:44,800 --> 00:39:48,900
So it is unsurprising that it is not such anything meaningful, because

736
00:39:48,900 --> 00:39:52,900
if you don't actually set a value, it turns out it doesn't set its

737
00:39:53,000 --> 00:39:53,600
self.

738
00:39:54,100 --> 00:39:57,500
Shocking that I know but it turns out, you know what you gonna do?

739
00:39:57,500 --> 00:40:01,500
You learn something new every day.

740
00:40:01,800 --> 00:40:06,600
So, okay, in here, when we're setting the thought stuff, where is my

741
00:40:06,600 --> 00:40:09,800
file formats nhj font?

742
00:40:10,000 --> 00:40:15,700
So really this was just me being dumb is basically what what this

743
00:40:15,700 --> 00:40:17,500
boils down to, right?

744
00:40:19,400 --> 00:40:21,800
Because the font itself.

745
00:40:22,800 --> 00:40:25,000
Already got written out, I guess.

746
00:40:27,500 --> 00:40:28,700
At that point.

747
00:40:31,000 --> 00:40:33,400
So, when did we actually

748
00:40:34,400 --> 00:40:39,500
Does this never actually remember where it's actual font as but it's

749
00:40:39,500 --> 00:40:43,000
backing font asset actually, was it?

750
00:40:43,000 --> 00:40:44,100
Looks like it doesn't

751
00:40:45,400 --> 00:40:49,800
Right, there's no way to get from this guy to the actual font which is

752
00:40:49,800 --> 00:40:51,900
what we want, right?

753
00:40:55,500 --> 00:40:56,000
Right.

754
00:40:56,100 --> 00:41:00,100
So you can see in here, we like set a bunch of this stuff, but we

755
00:41:00,100 --> 00:41:02,500
never record that in the loaded font.

756
00:41:02,700 --> 00:41:05,200
So the loaded font has like no idea.

757
00:41:08,800 --> 00:41:09,400
You know what?

758
00:41:09,400 --> 00:41:10,600
It's fine to set it here.

759
00:41:10,600 --> 00:41:13,400
I guess because of our weird order thing but it's not great.

760
00:41:13,400 --> 00:41:15,300
You can see that it's kind of a little bit janky.

761
00:41:15,700 --> 00:41:20,300
Not the facet Packer isn't like super janky to begin with but yeah.

762
00:41:30,400 --> 00:41:34,900
Okay, let's try that one more time, this time.

763
00:41:34,900 --> 00:41:37,200
Can I actually have some fonts, please?

764
00:41:38,900 --> 00:41:39,400
There we go.

765
00:41:40,000 --> 00:41:46,800
Okay, so 32,000 is the highest listed code point and I want to see if

766
00:41:46,800 --> 00:41:49,600
that's a reasonable highest list of code Point.

767
00:41:50,500 --> 00:41:51,600
Let's find out.

768
00:41:52,000 --> 00:41:54,800
So add character asset.

769
00:41:56,800 --> 00:41:59,800
So, the High Assistant could point should be this, right?

770
00:42:00,000 --> 00:42:03,400
The highest of these for obviously these guys are all super low.

771
00:42:04,600 --> 00:42:09,400
So if I was going to place that in here, hey look, that's exactly

772
00:42:09,400 --> 00:42:10,100
right.

773
00:42:10,400 --> 00:42:11,300
So that's good.

774
00:42:11,300 --> 00:42:14,500
Now I feel a bit better about things, so we're going to allocate that

775
00:42:14,500 --> 00:42:15,300
nonsense.

776
00:42:16,600 --> 00:42:20,400
It's pretty big unfortunately, but that's just how it goes sometimes,

777
00:42:20,600 --> 00:42:21,100
right?

778
00:42:21,900 --> 00:42:26,300
So off we go, we allocate, we're going to do the work here.

779
00:42:26,800 --> 00:42:29,800
I'm gonna go ahead and set another breakpoint so I can hop to the

780
00:42:30,000 --> 00:42:32,200
The thread that's going to actually unpack this guy.

781
00:42:35,500 --> 00:42:38,100
Or not, as the case may be.

782
00:42:40,700 --> 00:42:41,800
that's,

783
00:42:44,200 --> 00:42:44,600
oh,

784
00:42:46,100 --> 00:42:47,400
another stupid bug.

785
00:42:48,500 --> 00:42:52,500
You can see that I didn't check that properly.

786
00:42:55,100 --> 00:42:57,800
This is supposed to be assuming there are no file errors.

787
00:42:59,800 --> 00:43:00,400
Much better.

788
00:43:01,300 --> 00:43:02,400
Okay, so let's hop back in.

789
00:43:02,400 --> 00:43:05,900
There we go, through the glyphs, one by one.

790
00:43:06,400 --> 00:43:07,100
Here we go.

791
00:43:07,800 --> 00:43:09,800
And so, let's just take sanity check.

792
00:43:09,800 --> 00:43:14,100
See if these glyphs make any sense, or if they're just totally bogus,

793
00:43:15,100 --> 00:43:16,500
that looks exactly right.

794
00:43:16,500 --> 00:43:18,300
So totally fine with that.

795
00:43:20,100 --> 00:43:21,100
Let's keep going here.

796
00:43:22,300 --> 00:43:23,900
Oh hey in our font is back.

797
00:43:24,100 --> 00:43:28,200
So that's good news and it seems to be rendering totally fine.

798
00:43:28,800 --> 00:43:29,100
I guess.

799
00:43:29,100 --> 00:43:35,200
At this point it would make sense for us to maybe try to put some of

800
00:43:35,200 --> 00:43:36,900
those good points there.

801
00:43:36,900 --> 00:43:39,500
Like maybe put our little owl back in.

802
00:43:41,700 --> 00:43:44,800
Now that we did the work to try and get it out, that seems like a

803
00:43:44,800 --> 00:43:46,200
reasonable reasonable thing.

804
00:43:46,200 --> 00:43:53,800
So, let's test our Unicode, let's test our Unicode here, debug text

805
00:43:53,800 --> 00:43:54,300
line,

806
00:43:55,700 --> 00:44:02,400
so in here, when we do all this, I guess what we could do is in that

807
00:44:02,400 --> 00:44:04,900
sort of ridiculousness where we were doing,

808
00:44:06,500 --> 00:44:11,900
The at stuff here in here we could do this is so janky.

809
00:44:12,000 --> 00:44:15,400
Like this is the Janka stuff but people, you guys made me do this.

810
00:44:15,400 --> 00:44:20,500
You egg me on and now you're like making me egg further, right?

811
00:44:23,500 --> 00:44:25,300
You know why you doing that?

812
00:44:26,200 --> 00:44:29,200
So what we could do here is we could just have it so that if you do

813
00:44:29,400 --> 00:44:31,500
that in a string you can print a Unicode thing.

814
00:44:31,600 --> 00:44:32,800
I don't love it at all.

815
00:44:32,800 --> 00:44:41,400
I do not love it but yeah you know can't believe I'm about to do this

816
00:44:41,400 --> 00:44:42,900
but

817
00:44:46,300 --> 00:44:47,300
I can't believe them.

818
00:44:47,300 --> 00:44:48,200
I can't believe I'm doing this.

819
00:44:49,100 --> 00:44:50,500
All right, here it goes.

820
00:44:53,600 --> 00:44:57,200
Here goes people, it's just getting weirder by the second in here.

821
00:45:06,800 --> 00:45:10,800
So, if you see it, followed by for hexes or something like this,

822
00:45:11,100 --> 00:45:11,700
right?

823
00:45:17,500 --> 00:45:19,400
It'll output that Unicode code point.

824
00:45:20,700 --> 00:45:21,400
I guess.

825
00:45:23,100 --> 00:45:24,100
Totally ridiculous.

826
00:45:24,800 --> 00:45:25,900
But that's just the way it goes.

827
00:45:25,900 --> 00:45:30,400
And so when we look at that with an I could do is say okay the actual

828
00:45:30,400 --> 00:45:35,200
code point is going to be some ridiculous nonsense like this.

829
00:45:35,900 --> 00:45:39,000
Get hex at one.

830
00:45:43,100 --> 00:45:44,900
Get up 0.

831
00:45:48,300 --> 00:45:48,800
Or.

832
00:45:50,200 --> 00:45:51,500
You see where this is going, right?

833
00:45:51,900 --> 00:45:52,500
You see this?

834
00:45:52,500 --> 00:45:53,400
What you made me do.

835
00:45:55,200 --> 00:45:55,900
So, there you go.

836
00:45:59,000 --> 00:46:02,100
And if I get the hex for each of these and then I just shift it up.

837
00:46:02,100 --> 00:46:04,200
So the first one is the first year the first four bits.

838
00:46:04,200 --> 00:46:05,100
The next one, the next verb.

839
00:46:05,100 --> 00:46:06,900
It's the next one is the next verb.

840
00:46:06,900 --> 00:46:11,600
It's, and then finally there, we now can do a full 16 bit utf-16 which

841
00:46:11,600 --> 00:46:16,100
for our testing purposes, gives us all the things we needed so we

842
00:46:16,100 --> 00:46:16,900
could do that.

843
00:46:16,900 --> 00:46:20,900
All we need to do is Implement is hex and get hex and like I said, I

844
00:46:20,900 --> 00:46:22,700
can't believe I'm doing this but here it goes.

845
00:46:23,100 --> 00:46:25,600
So is hex is going to return a Boolean, right?

846
00:46:27,300 --> 00:46:28,200
For my character.

847
00:46:29,900 --> 00:46:36,100
and all that's going to do is say, you know, if care is greater than

848
00:46:36,100 --> 00:46:43,200
or equal to 0 and Care is less than equal to 9 or

849
00:46:45,400 --> 00:46:52,300
Same thing but from you know, a through f.

850
00:46:54,500 --> 00:46:57,700
And if it is well I can just say that that's the result, really,

851
00:46:58,700 --> 00:46:59,200
right?

852
00:47:05,100 --> 00:47:08,800
Okay, then if we need to actually do get hex.

853
00:47:10,100 --> 00:47:13,600
From a character, we just do.

854
00:47:15,800 --> 00:47:20,000
You 32 results, zero-turn result.

855
00:47:21,800 --> 00:47:22,600
And all we're going to do.

856
00:47:22,600 --> 00:47:27,200
There is say, alright, if the character is greater than equal to 0 and

857
00:47:27,200 --> 00:47:31,200
the character is less than equal to 9 same, exact test, right?

858
00:47:31,800 --> 00:47:34,900
We're going to do one thing, if it's

859
00:47:36,700 --> 00:47:38,200
Not right.

860
00:47:39,200 --> 00:47:41,500
We're going to check the other range assuming it is.

861
00:47:41,500 --> 00:47:44,400
We just do results equals care - 0.

862
00:47:45,000 --> 00:47:52,100
Assuming that it is here, we do care - A and we add 0 XA to it.

863
00:47:54,300 --> 00:47:54,800
Right.

864
00:47:57,500 --> 00:47:58,300
It seemed reasonable.

865
00:48:01,400 --> 00:48:01,900
Yeah.

866
00:48:02,700 --> 00:48:11,600
Okay so that's completely absurd but I just did and I'm not proud of

867
00:48:11,600 --> 00:48:17,100
it but sometimes you know desperate times call for desperate measures

868
00:48:17,100 --> 00:48:20,000
or something, something like that.

869
00:48:20,300 --> 00:48:20,600
All right.

870
00:48:20,600 --> 00:48:25,100
So what I'd like to do is just I just all I'm doing is testing to see

871
00:48:25,600 --> 00:48:29,000
if our handmade owl line works at all.

872
00:48:29,000 --> 00:48:29,700
So I'm just

873
00:48:30,100 --> 00:48:33,000
Going to stack those guys up one after the other.

874
00:48:36,600 --> 00:48:38,400
Right that's it.

875
00:48:39,700 --> 00:48:46,400
And then I'm going to step in to see what that does in the in is hex

876
00:48:46,700 --> 00:48:47,800
nonsense.

877
00:48:48,600 --> 00:48:50,200
This this that's there.

878
00:48:51,300 --> 00:48:56,100
So I'll scroll down here and we'll just go ahead and do this.

879
00:48:56,800 --> 00:49:00,100
We'll see if we ever actually hit it, we did not hit it.

880
00:49:00,800 --> 00:49:04,500
So that means we've got a bug in that

881
00:49:07,000 --> 00:49:09,500
In the is hex part of it, right?

882
00:49:15,200 --> 00:49:15,800
No, we don't.

883
00:49:15,800 --> 00:49:16,900
I'm just stupid.

884
00:49:18,200 --> 00:49:21,900
Well if I still have a bug but as going to say we only used capital

885
00:49:21,900 --> 00:49:22,200
letters.

886
00:49:22,200 --> 00:49:23,400
There we go.

887
00:49:25,200 --> 00:49:27,100
All right, so what I'm going to do is I'm going to make this the first

888
00:49:27,100 --> 00:49:27,500
thing

889
00:49:30,800 --> 00:49:34,300
and now when I run it, it that should be the first one that we get to

890
00:49:34,300 --> 00:49:34,700
the book.

891
00:49:34,700 --> 00:49:37,600
It should be like the literally, the very first character, right?

892
00:49:39,700 --> 00:49:40,400
There's app.

893
00:49:42,300 --> 00:49:45,900
And there's what's coming.

894
00:49:46,000 --> 00:49:48,400
So let's go into is hex.

895
00:49:48,800 --> 00:49:50,000
It's a zero.

896
00:49:51,300 --> 00:49:52,200
The result is one.

897
00:49:52,300 --> 00:49:54,000
That's good, there's is hex.

898
00:49:55,700 --> 00:49:57,700
Oh, I forgot the 0x.

899
00:49:58,800 --> 00:49:59,400
Duh.

900
00:50:01,200 --> 00:50:02,400
That's not supposed to be there.

901
00:50:07,200 --> 00:50:08,300
Alright, one more time.

902
00:50:09,800 --> 00:50:10,900
One more time.

903
00:50:12,400 --> 00:50:13,500
All right, let's see.

904
00:50:13,600 --> 00:50:14,300
There we go.

905
00:50:15,100 --> 00:50:16,000
Code Point.

906
00:50:16,800 --> 00:50:18,100
What is the code point?

907
00:50:21,900 --> 00:50:24,200
F0 C 5 that's wrong, isn't it?

908
00:50:26,800 --> 00:50:27,600
and of course,

909
00:50:29,400 --> 00:50:31,600
Just get can't catch a break today.

910
00:50:31,600 --> 00:50:34,700
Although I guess in all seriousness just dropping something this

911
00:50:34,700 --> 00:50:36,500
ridiculous as in that quickly.

912
00:50:36,500 --> 00:50:40,900
Of course, we read them the highest one comes first right in the

913
00:50:40,900 --> 00:50:42,600
in-text so.

914
00:50:44,300 --> 00:50:45,300
But there we go.

915
00:50:45,300 --> 00:50:46,500
I think that works now.

916
00:50:46,600 --> 00:50:47,900
Now does the Font work?

917
00:50:47,900 --> 00:50:48,500
I don't know.

918
00:50:49,100 --> 00:50:50,600
Oh right, we got to advance.

919
00:50:52,800 --> 00:50:53,700
Yeah.

920
00:50:53,700 --> 00:50:59,100
So if we're going to advance by that, we would then suck up that code.

921
00:50:59,200 --> 00:50:59,900
Point.

922
00:51:00,000 --> 00:51:03,600
We would add two apps for things, right?

923
00:51:03,600 --> 00:51:05,000
We'd move forward by four.

924
00:51:10,700 --> 00:51:16,800
So it's there but it's not kerned properly.

925
00:51:17,200 --> 00:51:18,400
I guess is what I would say.

926
00:51:19,600 --> 00:51:24,000
Like, I can't imagine that's how it's intended to be current.

927
00:51:25,200 --> 00:51:30,500
but everything looks right and so I don't know if that's just a case

928
00:51:30,500 --> 00:51:31,500
of

929
00:51:36,300 --> 00:51:38,200
Our work to try and line things up.

930
00:51:38,200 --> 00:51:40,000
Doesn't jive properly with

931
00:51:44,100 --> 00:51:46,200
with how that works or whether there's a bug in our table or

932
00:51:46,200 --> 00:51:46,800
something.

933
00:51:47,200 --> 00:51:49,600
Although there's a bug in the table, you'd think these guys would be

934
00:51:49,600 --> 00:51:51,300
current wrong and they're not

935
00:51:54,400 --> 00:51:57,700
So, I don't know, but I would consider that pretty darn successful.

936
00:51:57,700 --> 00:51:59,700
We pretty much did everything that we needed to do.

937
00:52:01,000 --> 00:52:02,100
So I'm going to go to bed.

938
00:52:02,100 --> 00:52:06,900
Go, go ahead and go to the Q&A, but we may have to do at some point

939
00:52:06,900 --> 00:52:10,300
another spin through the kerning just to like figure out if there's a

940
00:52:10,300 --> 00:52:13,600
way to extract it from Windows that where we can have our precise

941
00:52:13,600 --> 00:52:16,300
alignment and then still also do the other one.

942
00:52:20,800 --> 00:52:23,100
so, yeah, if you have any questions about what we did, go ahead and

943
00:52:23,100 --> 00:52:23,600
put

944
00:52:25,200 --> 00:52:29,600
Go ahead and put a q: front of them and then go ahead and ask but

945
00:52:29,600 --> 00:52:31,000
that's, that's pretty darn good.

946
00:52:31,400 --> 00:52:32,300
I'm happy with that.

947
00:52:32,700 --> 00:52:36,200
There's our little fancy characters.

948
00:52:36,200 --> 00:52:41,100
And yeah, and they're all look, they look pretty pretty reasonable.

949
00:52:41,300 --> 00:52:41,900
I'd say

950
00:53:13,000 --> 00:53:18,800
yeah, I just wish that windows or true type was had better like

951
00:53:20,400 --> 00:53:23,900
Kerning information because I feel like well it might not be true

952
00:53:23,900 --> 00:53:24,100
types.

953
00:53:24,100 --> 00:53:24,700
Fault.

954
00:53:24,700 --> 00:53:27,500
It might be just the way that the fonts end up getting authored.

955
00:53:31,000 --> 00:53:34,300
but that whole thing about us having to find the actual left margin

956
00:53:34,300 --> 00:53:37,500
because it's not actually what the font says it is and stuff is just

957
00:53:40,000 --> 00:53:40,700
Colonel Dragon.

958
00:53:40,700 --> 00:53:42,400
So are we done with the fonts?

959
00:53:42,400 --> 00:53:44,200
Now, moving on to other parts of the debug?

960
00:53:44,800 --> 00:53:46,700
Well, except for the fact that these are current wrong,

961
00:53:48,300 --> 00:53:52,800
so I feel like that, I feel like we should figure out why that is

962
00:53:55,800 --> 00:53:56,800
and I feel like,

963
00:53:58,800 --> 00:53:59,500
because I feel like,

964
00:54:01,600 --> 00:54:04,700
Like it could be that they're reporting their ABC what's wrong or that

965
00:54:04,700 --> 00:54:07,500
we're interpreting them wrong or something.

966
00:54:11,100 --> 00:54:13,300
But like, that's not correct.

967
00:54:33,000 --> 00:54:34,000
Criminal Dragon.

968
00:54:34,000 --> 00:54:35,900
So are we done with fans now?

969
00:54:35,900 --> 00:54:36,600
Just one food.

970
00:54:36,600 --> 00:54:38,100
So what will be moving on to next week?

971
00:54:38,200 --> 00:54:41,900
Well, we got to do the actual debug code now, right?

972
00:54:41,900 --> 00:54:45,300
We have fonts for displaying debug code and so we should do our debug

973
00:54:45,300 --> 00:54:45,700
code.

974
00:54:46,700 --> 00:54:50,500
So, we'll spend, you know, a couple weeks on that making a bunch of,

975
00:54:50,500 --> 00:54:54,100
like, debug Biz stuff that so we can see, you know, our memory layout

976
00:54:54,100 --> 00:54:59,200
and our thread activity, you know, are perf that sort of stuff.

977
00:55:04,000 --> 00:55:05,200
It's must have been asked so many times.

978
00:55:05,200 --> 00:55:06,400
I couldn't locate a FAQ.

979
00:55:06,900 --> 00:55:10,400
There are actually I think the Bots will answer the question for you

980
00:55:10,400 --> 00:55:11,600
about the gloves.

981
00:55:14,100 --> 00:55:16,400
Any chance you could use a different font for the editor hard to tell

982
00:55:16,400 --> 00:55:18,000
the difference between zeros and eight?

983
00:55:20,100 --> 00:55:24,800
No I mean that's this is the font I tend to I'm pretty used to so it's

984
00:55:24,800 --> 00:55:27,100
probably what I will end up you know.

985
00:55:27,100 --> 00:55:29,600
I don't want to switch to a different font, really

986
00:55:35,000 --> 00:55:38,100
Manic the nobody is, it's possible that that's how it's supposed to be

987
00:55:38,100 --> 00:55:38,500
current.

988
00:55:38,600 --> 00:55:40,800
I really don't think so.

989
00:55:44,600 --> 00:55:45,100
I mean.

990
00:55:47,100 --> 00:55:52,400
You know we can check what Windows is reporting by putting it in here,

991
00:55:52,500 --> 00:55:53,100
right?

992
00:55:54,300 --> 00:55:58,000
And so you know if we look at

993
00:56:01,000 --> 00:56:06,600
At actually, I guess do we already have the jtech for owl and there's

994
00:56:06,600 --> 00:56:07,300
no, it's not.

995
00:56:07,900 --> 00:56:09,700
So we looked it up, right?

996
00:56:10,400 --> 00:56:13,900
And we said that we wanted to do this one.

997
00:56:15,200 --> 00:56:15,500
You know?

998
00:56:16,700 --> 00:56:20,500
So there it is and you can see that they like it.

999
00:56:20,600 --> 00:56:21,800
It's basically Mah.

1000
00:56:21,800 --> 00:56:22,500
No space.

1001
00:56:22,600 --> 00:56:23,500
As far as I can tell,

1002
00:56:25,000 --> 00:56:29,700
you know, it doesn't really even look current to me, to be honest.

1003
00:56:29,700 --> 00:56:33,200
I feel like it's possibly not current about know.

1004
00:56:33,700 --> 00:56:39,200
And so, I don't know what, you know, maybe we're missing some thing

1005
00:56:39,200 --> 00:56:42,600
that we should be taking into account, or maybe I don't know, it's

1006
00:56:42,600 --> 00:56:45,000
but, but we've got some problem here.

1007
00:56:45,400 --> 00:56:46,900
And so I feel like we should debug that

1008
00:56:57,800 --> 00:56:59,800
Maybe it's just twitch but the letters in red.

1009
00:57:00,000 --> 00:57:01,800
A bit off on the edges.

1010
00:57:02,800 --> 00:57:04,700
Well, so there's a couple things.

1011
00:57:05,100 --> 00:57:06,300
We need a zoom.

1012
00:57:06,300 --> 00:57:07,600
We need to zoom tool.

1013
00:57:08,600 --> 00:57:15,400
I really should get a good zoom tool, but you can kind of see here.

1014
00:57:15,800 --> 00:57:17,500
What's going on on the edges?

1015
00:57:19,800 --> 00:57:22,800
And like, remember right now, we're not doing anything to try.

1016
00:57:22,800 --> 00:57:24,200
Look, we're not using any hinting.

1017
00:57:24,600 --> 00:57:28,300
So all of the edges are going to be Alpha Blended a little bit, right?

1018
00:57:29,100 --> 00:57:34,500
Just however, they ended up lining up when we did them and we also

1019
00:57:34,500 --> 00:57:37,200
don't I don't know that we've actually done any work to ensure that

1020
00:57:37,200 --> 00:57:38,600
they're going to be exactly one to one.

1021
00:57:38,600 --> 00:57:40,700
Look, we haven't tested the renderer to make sure that it's not

1022
00:57:40,700 --> 00:57:43,200
introducing some extra stuff there.

1023
00:57:43,200 --> 00:57:43,600
But

1024
00:57:50,800 --> 00:57:53,900
I would say based on looking at it.

1025
00:57:56,800 --> 00:57:58,200
I would say.

1026
00:58:07,900 --> 00:58:08,400
Well.

1027
00:58:15,600 --> 00:58:20,500
I would say that we probably have a well,

1028
00:58:22,300 --> 00:58:26,500
Like it doesn't make sense that there's that many Alpha Blended pixels

1029
00:58:26,600 --> 00:58:28,600
coming off the edge, you know.

1030
00:58:32,000 --> 00:58:33,000
That's a bit weird.

1031
00:58:34,500 --> 00:58:37,900
But I'm not 100% certain.

1032
00:58:40,100 --> 00:58:42,400
I think about how that even would happen.

1033
00:58:53,600 --> 00:58:56,500
Well now that that's plausible, I got to find someplace that's like

1034
00:58:56,500 --> 00:58:57,300
Smoking Gun.

1035
00:58:57,300 --> 00:58:58,100
Implausible

1036
00:59:06,400 --> 00:59:11,800
I feel like that is probably like I feel like we're probably not

1037
00:59:11,800 --> 00:59:15,800
exactly one to one on the free blit and we're getting a little extra

1038
00:59:15,800 --> 00:59:19,400
blur, a little more blur from the bilinear than we should.

1039
00:59:21,200 --> 00:59:23,500
And so that's like a thing we could test out in the renderer for

1040
00:59:23,500 --> 00:59:24,400
example, right?

1041
00:59:26,800 --> 00:59:28,500
but I feel like

1042
00:59:39,500 --> 00:59:40,400
Might be a basic question.

1043
00:59:40,400 --> 00:59:42,100
But why do we need our own font rendering?

1044
00:59:42,100 --> 00:59:44,100
Doesn't Windows have its own font rendering functions?

1045
00:59:44,100 --> 00:59:44,800
We could call.

1046
00:59:45,100 --> 00:59:52,500
No, so we can't because we would not be able to Port the game at that

1047
00:59:52,500 --> 00:59:53,300
point, right?

1048
00:59:53,700 --> 00:59:56,800
If we don't render the fonts ourselves, then when we would run on a

1049
00:59:56,800 --> 00:59:59,900
different platform like Mac or Linux, or

1050
01:00:00,000 --> 01:00:01,600
Our Xbox or whatever.

1051
01:00:02,000 --> 01:00:07,300
First of all that platform may not have a fun system like when we when

1052
01:00:07,300 --> 01:00:09,200
we do our Raspberry Pi 1 for example.

1053
01:00:09,200 --> 01:00:11,000
We don't know that it's going to have any font support at.

1054
01:00:11,000 --> 01:00:12,000
All right?

1055
01:00:12,000 --> 01:00:14,600
In fact when we do the one that we boot directly, you won't have any

1056
01:00:14,600 --> 01:00:15,400
thoughts for it.

1057
01:00:15,600 --> 01:00:18,800
So there's nothing to call but also even on ones where there is

1058
01:00:18,800 --> 01:00:22,500
something to call, we don't know that it'll behave the same way and so

1059
01:00:22,500 --> 01:00:23,800
it will introduce a difference.

1060
01:00:23,800 --> 01:00:27,400
In the way, our game looks across the platforms, which we don't want.

1061
01:00:27,400 --> 01:00:29,900
Write a game is fundamentally an artistic medium, right?

1062
01:00:30,000 --> 01:00:30,000
Right?

1063
01:00:30,000 --> 01:00:30,700
It's got art.

1064
01:00:30,700 --> 01:00:36,200
We make the art, we tune the art and so we want the game to look the

1065
01:00:36,200 --> 01:00:36,800
same everywhere.

1066
01:00:36,800 --> 01:00:38,500
We want it to be rendered the same everywhere.

1067
01:00:38,500 --> 01:00:41,800
We don't want it to look different on a Mac than on a PC because they

1068
01:00:41,800 --> 01:00:43,800
have two different underlying font systems, right?

1069
01:00:44,600 --> 01:00:48,800
And we also don't want to introduce the unreliability of like, does

1070
01:00:48,800 --> 01:00:51,200
that, you know, who knows, they update the operating system and now

1071
01:00:51,200 --> 01:00:54,100
our fonts are broken or all kinds of weird stuff like that, right?

1072
01:01:16,000 --> 01:01:18,900
I saw you were wearing something around your forearms.

1073
01:01:18,900 --> 01:01:21,000
Is that to treat tendonitis?

1074
01:01:22,200 --> 01:01:24,500
Yes, it is for from for tendonitis.

1075
01:01:25,200 --> 01:01:27,800
I don't get them when I wear the braces after coin.

1076
01:01:27,800 --> 01:01:30,400
Bray people don't understand why a fun training.

1077
01:01:30,400 --> 01:01:34,700
Some can be complex because they think in terms of pixels

1078
01:01:40,800 --> 01:01:42,200
Any comments on this?

1079
01:01:45,900 --> 01:01:47,600
I guess I don't understand the question.

1080
01:01:49,000 --> 01:01:51,500
Because they think in terms of pixels.

1081
01:01:54,900 --> 01:01:58,300
Yeah, I could, can you elaborate on that perhaps a little bit?

1082
01:02:00,300 --> 01:02:02,300
Can you check if your numbers are mono space?

1083
01:02:02,300 --> 01:02:05,900
For example, 11111 should be the same with this 99999.

1084
01:02:06,500 --> 01:02:08,200
Yes, we could check that pretty easily.

1085
01:02:08,700 --> 01:02:10,500
You're sure that they're mono space in Ariel.

1086
01:02:10,500 --> 01:02:11,300
I actually don't know.

1087
01:02:13,000 --> 01:02:15,600
It would make sense, but I don't actually know

1088
01:02:31,700 --> 01:02:34,100
So they are definitely not taking up the same space.

1089
01:02:35,100 --> 01:02:38,000
I would also ask the question,

1090
01:02:45,400 --> 01:02:46,600
What font is this?

1091
01:02:46,600 --> 01:02:48,000
That's not the same font.

1092
01:02:48,900 --> 01:02:50,900
Somehow we got set to Arial black.

1093
01:02:57,200 --> 01:02:58,200
I don't know how that happened.

1094
01:03:01,000 --> 01:03:05,700
so it is not the this is not a mono spaced font so

1095
01:03:07,600 --> 01:03:08,800
we are correct.

1096
01:03:09,600 --> 01:03:10,900
as far as the pain is concerned,

1097
01:03:17,800 --> 01:03:18,900
What happened to zoom it?

1098
01:03:18,900 --> 01:03:19,400
I don't know.

1099
01:03:19,400 --> 01:03:21,700
Yeah, didn't we did I thought?

1100
01:03:21,700 --> 01:03:23,500
Yeah, I thought we went over this as well.

1101
01:03:23,500 --> 01:03:24,200
Where is zoom?

1102
01:03:24,200 --> 01:03:24,500
It.

1103
01:03:27,400 --> 01:03:29,600
I don't know, is it?

1104
01:03:31,700 --> 01:03:33,900
do we have any kind of

1105
01:03:44,600 --> 01:03:45,300
I don't know.

1106
01:03:46,300 --> 01:03:47,500
I don't, I don't know.

1107
01:03:51,100 --> 01:03:51,900
I don't know what happened.

1108
01:03:51,900 --> 01:03:53,700
I thought we settled the zoom issue but

1109
01:03:54,700 --> 01:03:55,200
I don't know.

1110
01:04:21,800 --> 01:04:23,600
Not a question, but zooming is just on desktop.

1111
01:04:23,600 --> 01:04:25,400
So it's over here somewhere.

1112
01:04:29,500 --> 01:04:30,200
Of course it is.

1113
01:04:31,000 --> 01:04:33,400
I don't remember how to use it, unfortunately.

1114
01:04:36,200 --> 01:04:36,700
Whoa.

1115
01:04:38,600 --> 01:04:39,600
Well, that doesn't work.

1116
01:04:41,200 --> 01:04:41,800
I tried.

1117
01:04:43,200 --> 01:04:43,900
I failed.

1118
01:04:45,600 --> 01:04:46,500
Control one.

1119
01:04:49,200 --> 01:04:49,800
There we go.

1120
01:05:03,100 --> 01:05:06,100
Yeah, I can't tell we should we should look at these bitmaps directly,

1121
01:05:06,900 --> 01:05:11,200
which we can do a little bit later to see whether what the actual

1122
01:05:11,200 --> 01:05:12,600
bitmap that we're getting out of Windows.

1123
01:05:12,600 --> 01:05:18,300
Actually is because I don't know, this may be what we're getting from

1124
01:05:18,300 --> 01:05:23,800
them, it may not be and so we have to we'll have to see

1125
01:05:32,400 --> 01:05:33,100
All right.

1126
01:05:49,100 --> 01:05:52,400
the ones that nice don't line up the same way in game and in Notepad

1127
01:05:55,400 --> 01:05:55,800
Well.

1128
01:06:04,000 --> 01:06:05,000
There is the ones.

1129
01:06:06,400 --> 01:06:08,400
And like I said, we are a little off.

1130
01:06:08,400 --> 01:06:11,100
We know we're a little off on the kerning, we never quite had it

1131
01:06:11,100 --> 01:06:14,100
exactly what Microsoft specified.

1132
01:06:14,900 --> 01:06:16,900
That also looks slightly.

1133
01:06:18,700 --> 01:06:20,000
I don't know that we have the size.

1134
01:06:20,000 --> 01:06:20,400
Exactly.

1135
01:06:20,400 --> 01:06:20,900
Right either.

1136
01:06:20,900 --> 01:06:23,600
Because this isn't points, right?

1137
01:06:26,600 --> 01:06:30,100
So there's that but it's pretty darn close.

1138
01:06:35,600 --> 01:06:39,900
And that is almost exact so I don't know.

1139
01:06:39,900 --> 01:06:42,300
We're quite close we never quite got it.

1140
01:06:42,300 --> 01:06:43,400
Exactly right.

1141
01:06:43,400 --> 01:06:46,600
When we once we wanted to do the like line up with the left Edge flush

1142
01:06:46,600 --> 01:06:51,400
thing because then we kind of have to back solve for some stuff that

1143
01:06:51,400 --> 01:06:52,800
wasn't exactly right but

1144
01:06:58,300 --> 01:07:00,300
How do you have the background black and mischief?

1145
01:07:01,800 --> 01:07:02,200
I don't know.

1146
01:07:02,200 --> 01:07:03,000
I just said it.

1147
01:07:04,500 --> 01:07:05,100
I don't remember.

1148
01:07:05,100 --> 01:07:06,000
I remember it not be.

1149
01:07:06,000 --> 01:07:07,800
I just, I just was like an option or something.

1150
01:07:18,800 --> 01:07:21,300
How do you prefer to Traverse trees Loops or recursion?

1151
01:07:21,300 --> 01:07:24,400
Why I'll use recursion?

1152
01:07:24,700 --> 01:07:26,100
If I'm lazy.

1153
01:07:26,100 --> 01:07:28,500
And I don't care too much about it because it's usually easier to

1154
01:07:28,500 --> 01:07:29,100
write.

1155
01:07:29,300 --> 01:07:32,300
But if it's something important, I use a loop, because it's way, way

1156
01:07:32,300 --> 01:07:34,900
way, way faster and more reliable than recursion.

1157
01:07:46,800 --> 01:07:50,300
If you want to start your own game product, you start from scratch,

1158
01:07:50,500 --> 01:07:54,800
use Frameworks API sdks, or use an engine, custom made by you or one

1159
01:07:54,800 --> 01:07:55,800
that already exists.

1160
01:07:58,200 --> 01:08:02,000
I mean, you use what you think is the best choice for the project,

1161
01:08:02,100 --> 01:08:02,700
right?

1162
01:08:06,200 --> 01:08:07,100
Just like everything else.

1163
01:08:07,100 --> 01:08:09,700
It depends on what you're trying to make if you're trying to make

1164
01:08:09,700 --> 01:08:13,100
something that's exactly, like something that already had been made.

1165
01:08:13,400 --> 01:08:16,200
You know, if you're trying to make a first person shooter that's a lot

1166
01:08:16,200 --> 01:08:19,899
like unreal then, the Unreal Engine is probably a pretty good choice,

1167
01:08:20,399 --> 01:08:20,899
right?

1168
01:08:24,800 --> 01:08:27,800
If you're not your mileage, may vary, or if you have specific things,

1169
01:08:27,800 --> 01:08:31,700
you you, that are going to cause problems for you based on the way

1170
01:08:31,700 --> 01:08:34,700
that those engines do things or stuff like that.

1171
01:08:36,100 --> 01:08:36,500
You know.

1172
01:08:42,500 --> 01:08:44,300
But why not one?

1173
01:08:44,300 --> 01:08:45,700
They don't let it flow to each other, though.

1174
01:08:45,700 --> 01:08:49,000
Yes, but that's intentional because we actually do proper left

1175
01:08:49,000 --> 01:08:51,300
alignment now, right?

1176
01:08:51,500 --> 01:08:52,399
And they don't.

1177
01:08:52,800 --> 01:08:56,500
So, if you take a look at what happens here, right?

1178
01:08:57,700 --> 01:08:59,800
They, this is what we, I went out of my way.

1179
01:09:00,000 --> 01:09:06,200
Do you can see that they don't left align their text, right?

1180
01:09:06,300 --> 01:09:10,100
And so we wanted to be able to left align our text.

1181
01:09:10,500 --> 01:09:14,300
And so that's why these don't want to that's intentional.

1182
01:09:19,200 --> 01:09:20,500
That was part of the test.

1183
01:09:26,600 --> 01:09:29,600
Instant Kafka any plans to add scripting or modding hooks.

1184
01:09:29,600 --> 01:09:30,200
No.

1185
01:09:32,000 --> 01:09:34,500
because you're supposed to edit the source code, this is an

1186
01:09:34,500 --> 01:09:35,600
educational project

1187
01:09:36,700 --> 01:09:38,000
You are supposed to go.

1188
01:09:39,100 --> 01:09:40,200
And edit the source code.

1189
01:09:41,899 --> 01:09:42,800
It comes with it.

1190
01:09:49,700 --> 01:09:50,300
Is that it?

1191
01:09:54,200 --> 01:09:55,500
Cuba Caleb off topic.

1192
01:09:55,500 --> 01:09:59,300
How do you grow up with your emacs and fig it's just ask Apex to bring

1193
01:09:59,300 --> 01:10:01,500
up the prompt and then I type G.

1194
01:10:02,200 --> 01:10:04,200
I don't have it bound to a hop key.

1195
01:10:17,000 --> 01:10:19,300
All right, that's all she wrote.

1196
01:10:42,400 --> 01:10:43,700
Under Cambridgeshire.

1197
01:10:43,700 --> 01:10:46,800
Some reasonably think of the screen as a grid of pixels and that font

1198
01:10:46,800 --> 01:10:49,100
rendering is directly Plastering that font on the screen.

1199
01:10:49,100 --> 01:10:53,500
So NVM they just haven't understood Beyond bitmap fonts.

1200
01:10:53,500 --> 01:10:59,300
Well and that is that is to the for the most part correct.

1201
01:10:59,300 --> 01:11:02,900
If you're talking about like a systems like we have where we're

1202
01:11:02,900 --> 01:11:09,100
building bitmap fonts, the thing that is hidden in that is that if you

1203
01:11:09,100 --> 01:11:12,300
don't want your father to be monospaced you have

1204
01:11:12,400 --> 01:11:15,300
You have a bunch of awareness of the typography like how big

1205
01:11:15,300 --> 01:11:17,500
characters are how they go next to each other and all that sort of

1206
01:11:17,500 --> 01:11:18,300
stuff, right?

1207
01:11:19,000 --> 01:11:20,800
And so that's where the complexity comes in.

1208
01:11:20,800 --> 01:11:24,100
If you just want a monospaced font then that is true.

1209
01:11:24,100 --> 01:11:29,400
You just Plastering a thing on there, go to town but assuming that you

1210
01:11:29,400 --> 01:11:33,700
want to actually have some, it doesn't look awful, you gotta know the

1211
01:11:33,700 --> 01:11:36,400
rest of the typography and actually account for it.

1212
01:11:46,800 --> 01:11:47,300
All right.

1213
01:11:47,300 --> 01:11:48,800
What font to use an e Max.

1214
01:11:48,800 --> 01:11:50,200
It's I think it's called

1215
01:11:54,100 --> 01:11:55,400
Liberation mono.

1216
01:12:20,100 --> 01:12:21,200
Nick Rolfe.

1217
01:12:21,300 --> 01:12:24,700
Why did he use glyph index from code Point, instead of an array of

1218
01:12:24,700 --> 01:12:29,200
mostly null pointers to achieve sparseness, because it most the array

1219
01:12:29,200 --> 01:12:30,600
of pointers would have been four times lighter.

1220
01:12:32,900 --> 01:12:33,500
Right.

1221
01:12:34,200 --> 01:12:39,300
So a pointer is 8, bytes and a 16-bit index is 2, bytes.

1222
01:12:39,700 --> 01:12:44,300
And so when you're talking about a table that has 30 plus thousand,

1223
01:12:44,300 --> 01:12:46,300
sixty thousand entries in it, whatever it is.

1224
01:12:46,900 --> 01:12:47,400
Right?

1225
01:12:50,300 --> 01:12:54,300
Or I guess in this case was like 38,000 something that you don't want

1226
01:12:54,300 --> 01:12:58,300
to multiply that number to be 24 times larger than it should have

1227
01:12:58,300 --> 01:12:59,100
been, right?

1228
01:12:59,200 --> 01:13:01,500
It's just wasting a ton of cash bandwidth.

1229
01:13:02,600 --> 01:13:04,100
And so I didn't want to do that.

1230
01:13:19,900 --> 01:13:20,100
Mr.

1231
01:13:20,100 --> 01:13:20,700
Fourth dimension.

1232
01:13:20,700 --> 01:13:23,800
How valuable do you think non monospaced fonts would be in say an

1233
01:13:23,800 --> 01:13:24,200
editor?

1234
01:13:24,200 --> 01:13:25,200
I think they are.

1235
01:13:25,200 --> 01:13:28,200
Obviously the right choice for an editor and the only reason that we

1236
01:13:28,200 --> 01:13:30,500
don't use them for editors is because editors are so dumb, they don't

1237
01:13:30,500 --> 01:13:33,300
know how to line up text properly, right?

1238
01:13:35,600 --> 01:13:40,300
There's never been like literally there's no case ever except for

1239
01:13:40,300 --> 01:13:44,900
numbers in like tabular numbers were you ever want monospace?

1240
01:13:44,900 --> 01:13:45,900
It's always worse.

1241
01:13:47,500 --> 01:13:48,300
So

1242
01:13:49,300 --> 01:13:49,700
You know.

1243
01:13:51,100 --> 01:13:53,600
It's just because editors don't understand the code and can't lay it

1244
01:13:53,600 --> 01:13:54,200
out properly.

1245
01:13:54,200 --> 01:13:58,400
But you would never use a monospace font if your editor, actually knew

1246
01:13:58,400 --> 01:14:01,000
what it was laying out type of graphically speaking.

1247
01:14:11,100 --> 01:14:12,700
Could you recommend a website?

1248
01:14:14,400 --> 01:14:16,500
Or YouTuber that could teach me coding.

1249
01:14:16,500 --> 01:14:18,200
I really want to learn

1250
01:14:21,200 --> 01:14:23,700
Honestly I don't really know of one that teaches programming from from

1251
01:14:23,700 --> 01:14:28,200
the ground up, I'm sure there are a bunch they're probably not

1252
01:14:28,200 --> 01:14:31,700
fabulous and so I don't know necessarily wanted to say, oh yeah, this

1253
01:14:31,700 --> 01:14:32,200
is a good one.

1254
01:14:32,200 --> 01:14:33,300
You should go follow it.

1255
01:14:35,000 --> 01:14:38,800
Handmade here is obviously a little bit on the like, okay, we assume

1256
01:14:38,800 --> 01:14:40,100
you already know how to program.

1257
01:14:40,300 --> 01:14:42,300
Now, we're just going to talk about how you program a game.

1258
01:14:43,500 --> 01:14:45,900
And so, I don't know of the thing.

1259
01:14:45,900 --> 01:14:47,700
That's like a nice on-ramp kind of thing.

1260
01:14:47,700 --> 01:14:49,800
Was like, I wanted to start programming in general, right?

1261
01:15:09,000 --> 01:15:09,400
Armenia.

1262
01:15:09,400 --> 01:15:13,300
If, if people are sort of shocked to hear me say that monospace fonts

1263
01:15:13,300 --> 01:15:17,400
and useful, like, like, literally, what is if it was easier to read

1264
01:15:17,400 --> 01:15:18,400
monospaced fonts?

1265
01:15:18,600 --> 01:15:20,200
That's what everything would be type set in.

1266
01:15:21,300 --> 01:15:21,500
Right?

1267
01:15:21,500 --> 01:15:24,000
But it's not like in the history of mankind.

1268
01:15:24,000 --> 01:15:25,000
No one has ever gone.

1269
01:15:25,000 --> 01:15:27,900
I wish you'd keep these things - faced, right?

1270
01:15:29,100 --> 01:15:31,600
People always prefer to read proportionally spaced fonts.

1271
01:15:31,700 --> 01:15:35,700
It just looks nicer on the eyes and it helps further distinguish

1272
01:15:35,700 --> 01:15:39,000
letters from each other because letters have width again, instead of

1273
01:15:39,000 --> 01:15:44,400
the letters all being artificially, stretched out to fit in this

1274
01:15:44,400 --> 01:15:47,900
space, that makes it more difficult for you to recognize words at a

1275
01:15:47,900 --> 01:15:49,100
time, you know.

1276
01:15:52,800 --> 01:15:55,300
So, I mean, maybe I'm wrong because, you know, it's not like I have

1277
01:15:55,300 --> 01:16:01,100
the option to actually use one but it's so, it would be so strange if

1278
01:16:01,100 --> 01:16:04,000
somehow programming, which is all.

1279
01:16:04,000 --> 01:16:08,300
Just just text was somehow the one thing that was easier to read

1280
01:16:08,300 --> 01:16:13,000
monospaced and novels throughout history like have always, you know,

1281
01:16:13,000 --> 01:16:14,700
are so different in some weird way.

1282
01:16:14,700 --> 01:16:16,600
That's like those should be proportional, right?

1283
01:16:16,900 --> 01:16:18,900
It doesn't make sense like either Mah.

1284
01:16:18,900 --> 01:16:21,500
No space is easier to read or proportionally as an, it should be

1285
01:16:21,500 --> 01:16:22,000
easier to read.

1286
01:16:22,200 --> 01:16:25,900
where it shouldn't be like, oh, because code is

1287
01:16:27,200 --> 01:16:29,000
Has some symbols in it.

1288
01:16:29,000 --> 01:16:29,700
It's different.

1289
01:16:29,700 --> 01:16:30,800
I mean, it doesn't

1290
01:16:31,900 --> 01:16:33,200
It just doesn't stand to reason.

1291
01:16:35,500 --> 01:16:37,100
You know, it doesn't stand to reason.

1292
01:16:45,800 --> 01:16:49,000
I'd like to limit the scope of my functions to be defined, only where

1293
01:16:49,000 --> 01:16:49,800
there used.

1294
01:16:49,800 --> 01:16:50,500
How do you work around?

1295
01:16:50,500 --> 01:16:53,100
The fact that c doesn't have locally defined functions to use

1296
01:16:53,100 --> 01:16:53,800
functors?

1297
01:16:54,700 --> 01:16:56,800
I don't really care about that.

1298
01:17:00,000 --> 01:17:03,200
I mean, there isn't really, I don't know of any particular downside of

1299
01:17:03,200 --> 01:17:06,500
then like the occasional name Collision or something, there's really

1300
01:17:06,500 --> 01:17:07,000
no.

1301
01:17:10,000 --> 01:17:10,300
Digital.

1302
01:17:10,900 --> 01:17:14,700
I don't find the scope scoping, it problem at all, I would like to be

1303
01:17:14,700 --> 01:17:16,600
able to do

1304
01:17:18,300 --> 01:17:18,900
You know.

1305
01:17:20,800 --> 01:17:22,800
I don't want to, I don't want to say Lambda functions because that's

1306
01:17:22,800 --> 01:17:23,700
not really true.

1307
01:17:24,000 --> 01:17:27,200
But basically, you know, something like a Lambda function where it

1308
01:17:27,200 --> 01:17:31,300
could access the stack of anak of an enclosing function, kind of a

1309
01:17:31,300 --> 01:17:31,700
thing.

1310
01:17:32,200 --> 01:17:37,100
I would like to have had that feature C++ recently added it and it's

1311
01:17:37,100 --> 01:17:39,200
all messed up the way they always do.

1312
01:17:39,200 --> 01:17:42,900
But, you know, if that had been in the original, see, I think it would

1313
01:17:42,900 --> 01:17:44,600
have been nice and clean and would have been useful.

1314
01:17:49,100 --> 01:17:52,300
Constantinople vertical Chris or navigation is easier to follow in a

1315
01:17:52,300 --> 01:17:53,200
mono font.

1316
01:17:54,500 --> 01:17:57,600
I mean, I guess marginally but I don't find I mean I work on text

1317
01:17:57,600 --> 01:17:59,400
documents and I don't find that to be a problem.

1318
01:18:06,100 --> 01:18:10,800
Super Caleb tried to use grep in emacs the program crashed.

1319
01:18:11,200 --> 01:18:11,400
Yep.

1320
01:18:11,400 --> 01:18:14,700
That's that's the modern editors for you.

1321
01:18:27,500 --> 01:18:30,400
How do you handle introspection metadata to build your editor

1322
01:18:30,400 --> 01:18:31,800
inspection tools?

1323
01:18:35,100 --> 01:18:39,700
You're talking about in like a, my normal engine at Molly rocket.

1324
01:18:41,600 --> 01:18:45,400
We have a meta programming system that does that for me.

1325
01:18:59,500 --> 01:19:00,800
Looks like that's about it.

1326
01:19:08,000 --> 01:19:11,700
All right, I'm going to wind its down.

1327
01:19:13,000 --> 01:19:14,400
Yay, fonts.

1328
01:19:15,600 --> 01:19:16,300
Yay.

1329
01:19:23,100 --> 01:19:26,000
Okay, thank you everyone for joining me for this episode of handmade

1330
01:19:26,000 --> 01:19:26,100
here.

1331
01:19:26,100 --> 01:19:27,200
It's been a pleasure coding with you.

1332
01:19:27,200 --> 01:19:30,800
As always, if you want to follow along at home you can always

1333
01:19:30,800 --> 01:19:32,700
pre-order the game on handmade here at Oregon.

1334
01:19:32,700 --> 01:19:34,100
It comes with a source code every night.

1335
01:19:34,100 --> 01:19:37,500
So while we are doing development, you can play around with it

1336
01:19:37,500 --> 01:19:41,800
yourself and learn from it do experiments and so on, if you want to do

1337
01:19:41,800 --> 01:19:42,900
that, that's a mighty rhetoric.

1338
01:19:42,900 --> 01:19:44,400
It's also got some handy buttons.

1339
01:19:44,400 --> 01:19:47,100
You might be interested in, there's a forum site which has stuff like

1340
01:19:47,100 --> 01:19:50,500
Community ports, to Mac and Linux and formed ask questions and a

1341
01:19:50,500 --> 01:19:51,900
community anti depa sewed guy.

1342
01:19:51,900 --> 01:19:52,800
That's people have been working.

1343
01:19:52,900 --> 01:19:55,800
Only hard on actually you should check it out if you're trying to

1344
01:19:55,800 --> 01:19:59,200
catch up with old episodes, there is a patreon page.

1345
01:19:59,200 --> 01:20:01,700
If you want to support the video series, you can subscribe to that.

1346
01:20:01,700 --> 01:20:03,000
It's always much appreciated.

1347
01:20:03,200 --> 01:20:05,300
And then we also have a tweetbot which treats the schedule.

1348
01:20:05,300 --> 01:20:07,000
So if you're trying to catch the series live, that's the place to

1349
01:20:07,000 --> 01:20:08,300
check out the schedule for the week.

1350
01:20:09,400 --> 01:20:14,200
And that's about it, that's it for the week because this is packs

1351
01:20:14,200 --> 01:20:14,400
weak.

1352
01:20:14,400 --> 01:20:18,800
So, I decided we just want to finish up the fonts and then we'll let

1353
01:20:18,800 --> 01:20:20,500
it rest for a week and we'll come back here.

1354
01:20:20,900 --> 01:20:22,200
So we'll be back on Monday.

1355
01:20:22,900 --> 01:20:23,500
Same time.

1356
01:20:23,500 --> 01:20:24,500
Same place, 5 p.m.

1357
01:20:24,500 --> 01:20:25,800
Pacific Daylight Time.

1358
01:20:27,000 --> 01:20:29,700
On Monday, I believe.

1359
01:20:29,700 --> 01:20:32,500
But always check that tweetbot because that's got the most up-to-date

1360
01:20:32,500 --> 01:20:33,000
information.

1361
01:20:33,000 --> 01:20:35,000
So if you want to win the series lab, that's the place to check.

1362
01:20:35,000 --> 01:20:41,600
It is definitive until then have a good week of programming and I will

1363
01:20:41,600 --> 01:20:43,600
talk to you guys on the internet.

1364
01:20:43,700 --> 01:20:44,700
Take it easy, everyone.

