1
00:00:03,700 --> 00:00:06,100
Hello, everyone, and welcome to handmade hero.

2
00:00:06,100 --> 00:00:09,000
Sure, we code a complete game live on stream.

3
00:00:09,300 --> 00:00:14,200
Yesterday we did some debugging of our Z bias function among other

4
00:00:14,200 --> 00:00:18,700
things, transform related and I actually learned something new.

5
00:00:19,700 --> 00:00:23,400
I suppose it wasn't really something new in the sense of it was just

6
00:00:23,400 --> 00:00:27,500
math that I already understood certainly, but I didn't understand it.

7
00:00:27,500 --> 00:00:29,700
Deeply enough was clearly the case because

8
00:00:30,500 --> 00:00:31,700
It kind of surprised me when I woke up.

9
00:00:31,700 --> 00:00:35,100
I was like, oh, I never thought of that before, and it was kind of an

10
00:00:35,100 --> 00:00:35,800
interesting moment.

11
00:00:35,800 --> 00:00:38,200
So I highly recommend taking a look at that to bugging, if you're

12
00:00:38,200 --> 00:00:41,100
interested in those sorts of things, it was pretty interesting to me.

13
00:00:41,100 --> 00:00:42,400
I was like, okay, yeah, that's right.

14
00:00:42,400 --> 00:00:44,600
If you want to do this either by his properly, you got to do it this

15
00:00:44,600 --> 00:00:47,700
other way, not the way that I was thinking about it, which was, which

16
00:00:47,700 --> 00:00:48,400
was wrong.

17
00:00:49,700 --> 00:00:54,200
That's because Z is kind of a special value since it's actually

18
00:00:54,200 --> 00:00:59,300
produced to work specifically with the Z buffer in a way that is.

19
00:01:01,600 --> 00:01:06,000
Unlike the X and Y coordinates, since it is the one that contributes

20
00:01:06,000 --> 00:01:10,800
to the W term, so you can't really think of Z the same as you think of

21
00:01:10,800 --> 00:01:13,500
it as X and W even though obviously they'll go through the Matrix.

22
00:01:13,500 --> 00:01:18,700
The same way when you're just like conceptualizing it because it's the

23
00:01:18,700 --> 00:01:20,700
one that determines the prospective divide amount.

24
00:01:20,700 --> 00:01:23,800
There's a there's consequences there when you follow the math through

25
00:01:23,800 --> 00:01:23,900
that.

26
00:01:23,900 --> 00:01:27,100
If you haven't done it yet, haven't tried to do Z biasing yet.

27
00:01:27,100 --> 00:01:28,100
You may not have thought of.

28
00:01:28,300 --> 00:01:29,100
So that's been interesting.

29
00:01:29,100 --> 00:01:31,100
Today, we're just going to take a look at

30
00:01:31,400 --> 00:01:35,200
Couple things one, we're going to probably play with the shaders, a

31
00:01:35,200 --> 00:01:38,000
little, just to sort of show, how to get some effects back that we

32
00:01:38,000 --> 00:01:38,800
wanted to get back.

33
00:01:39,900 --> 00:01:43,200
And then another thing that we'd like to do is we'd like to get back

34
00:01:43,500 --> 00:01:47,200
the ability to work with the camera properly.

35
00:01:47,200 --> 00:01:50,600
And this is something that I guess we've never really had in handmade

36
00:01:50,600 --> 00:01:50,800
hero.

37
00:01:50,800 --> 00:01:54,200
We've always kind of just hacked the camera, and now that we're in

38
00:01:54,200 --> 00:01:57,400
full 3d, I think we want to pretty soon enough time to get to it

39
00:01:57,400 --> 00:02:01,100
today, probably not, if you're playing with shaders too much but

40
00:02:01,600 --> 00:02:05,400
We want to get to the point where the camera movement is very logical

41
00:02:05,400 --> 00:02:09,199
and clean and now that we're in 3D, we have a pretty easy way to do

42
00:02:09,199 --> 00:02:09,699
that.

43
00:02:10,800 --> 00:02:14,300
We can just have our room definitions in the game.

44
00:02:14,300 --> 00:02:18,100
As we do now, specify sort of where the camera should be.

45
00:02:18,300 --> 00:02:22,600
And then we can just interpolate the camera to be at those locations

46
00:02:22,900 --> 00:02:23,600
as necessary.

47
00:02:23,600 --> 00:02:26,700
And so, I think we can make a nice clean camera setup.

48
00:02:26,700 --> 00:02:31,600
Now that we have sort of, a more coherent idea of where things are and

49
00:02:31,600 --> 00:02:34,700
what they are in space anyway, I don't know if we'll get that today,

50
00:02:34,700 --> 00:02:37,400
that might be a next weekend thing, but today is day, 375.

51
00:02:37,400 --> 00:02:39,400
So, if you want to follow along with what we're doing today, you want

52
00:02:39,400 --> 00:02:40,400
to start with a 37.

53
00:02:40,500 --> 00:02:44,400
84 in terms of source code, let me go ahead and load up for coder

54
00:02:44,400 --> 00:02:44,800
here.

55
00:02:45,500 --> 00:02:47,600
And I'm going to go ahead and open the project.

56
00:02:48,800 --> 00:02:53,200
Let's go ahead and compile, and you can see that where we left off,

57
00:02:53,400 --> 00:02:57,900
we've got sort of this, this two layer situation going on here.

58
00:02:57,900 --> 00:02:59,800
And if I switch the debug camera and pull out

59
00:03:00,400 --> 00:03:04,800
You can see we've sort of got two stacks of rooms on each other and

60
00:03:04,800 --> 00:03:08,600
the top room, we allow rooms of what other sizes here.

61
00:03:08,600 --> 00:03:13,400
So, you know, these rooms are just kind of generically created and the

62
00:03:13,400 --> 00:03:17,000
room right now on top, is a little bit bigger than the room on the

63
00:03:17,000 --> 00:03:17,500
bottom.

64
00:03:18,300 --> 00:03:24,000
Now what I'm going to do just just for our sort of use with the Shader

65
00:03:24,000 --> 00:03:29,000
situation that I was just discussing is when we actually do the screen

66
00:03:29,000 --> 00:03:29,800
count here,

67
00:03:30,000 --> 00:03:33,800
I'm going to just stack up a bunch of rooms on top of each other.

68
00:03:34,400 --> 00:03:35,900
That just keep going down.

69
00:03:37,300 --> 00:03:38,300
Ad infinitum.

70
00:03:39,200 --> 00:03:41,900
So if you take a look at what we've got here, you can see, we've just

71
00:03:41,900 --> 00:03:44,700
got a stack of rooms that goes down.

72
00:03:44,900 --> 00:03:49,400
It goes down 10, actual rooms deep, but at the moment, we're only

73
00:03:49,400 --> 00:03:54,200
drawing four of them because the simulation region only picks up that

74
00:03:54,200 --> 00:03:56,200
deeps worth of rooms, right?

75
00:03:57,200 --> 00:04:01,000
But if I were to actually go down, we would pick up another room so if

76
00:04:01,000 --> 00:04:03,600
I was to, you know, kind of go down here now we don't have a way of

77
00:04:03,600 --> 00:04:04,700
going down at the moment.

78
00:04:04,700 --> 00:04:06,700
I think we took those stairwell situation.

79
00:04:06,900 --> 00:04:07,300
Out.

80
00:04:07,400 --> 00:04:12,300
I think we could probably now put stairwells back in, but we haven't

81
00:04:12,300 --> 00:04:13,900
really taken too much of a look at that.

82
00:04:13,900 --> 00:04:17,600
So we'll have to play a little around a little bit more with that for

83
00:04:17,600 --> 00:04:17,899
now.

84
00:04:18,600 --> 00:04:22,000
Anyway, all I really want to do here is observe the fact that when I'm

85
00:04:22,000 --> 00:04:25,100
looking at this, you can kind of see that I've got this hole here, and

86
00:04:25,100 --> 00:04:29,700
there's some, you know, some stuff going on below here.

87
00:04:29,700 --> 00:04:33,500
And you know, that's, that's this part of the room down there, right?

88
00:04:33,800 --> 00:04:36,600
And what we can sort of also see is this

89
00:04:36,800 --> 00:04:41,000
Room doesn't itself have a hole there and I would like it to have a

90
00:04:41,000 --> 00:04:41,600
hole there.

91
00:04:41,800 --> 00:04:45,900
So again, I'm just going to hack are really crappy temp room,

92
00:04:45,900 --> 00:04:47,100
Generation stuff here.

93
00:04:49,100 --> 00:04:50,500
To always have one.

94
00:04:52,800 --> 00:04:54,500
Where is that 0 standard rooms?

95
00:04:54,500 --> 00:04:55,000
What I'm looking for.

96
00:04:55,000 --> 00:04:56,400
Sorry, not simple room.

97
00:04:57,100 --> 00:04:59,800
So here's the ad standard room, call and inside.

98
00:04:59,800 --> 00:05:02,900
Here, you could see us kind of going through it and we have this like

99
00:05:02,900 --> 00:05:04,200
left hole right whole thing.

100
00:05:04,500 --> 00:05:07,500
I'm just going to stuff left hole to be one always

101
00:05:11,200 --> 00:05:13,700
I mean, I suppose why not might as well just put both on there?

102
00:05:18,500 --> 00:05:20,800
And so, now you can see down more levels, right?

103
00:05:20,800 --> 00:05:24,800
You can see, we've got one, two, three, four levels of you here.

104
00:05:25,600 --> 00:05:27,500
And this is the sort of standard camera angle.

105
00:05:27,500 --> 00:05:28,500
I can pull back more.

106
00:05:28,500 --> 00:05:31,500
You can kind of see what's going on here but now there's like you know

107
00:05:31,500 --> 00:05:34,600
there's a hole that goes kind of straight through it there for

108
00:05:34,600 --> 00:05:36,200
whatever that's worth right.

109
00:05:37,100 --> 00:05:39,800
And you can kind of see some stuff that we're going to now have to

110
00:05:39,800 --> 00:05:43,100
start to clean up and this is good because we want to start a fuck.

111
00:05:43,100 --> 00:05:45,300
Start to finalize all these parts of the code.

112
00:05:45,900 --> 00:05:48,000
You can notice, if you look down at the bottom here, you can.

113
00:05:48,100 --> 00:05:51,300
Can see that this room here.

114
00:05:51,600 --> 00:05:57,500
Only some of the of the actual tiles are present in the room, right?

115
00:05:57,500 --> 00:05:59,800
You can see that and you might like, like fours,

116
00:06:00,000 --> 00:06:03,000
There's a tree here, but there's nothing under the tree, right?

117
00:06:03,000 --> 00:06:07,200
The tree does not actually possess a block underneath it and like, how

118
00:06:07,200 --> 00:06:08,000
is that possible?

119
00:06:08,700 --> 00:06:12,400
And the answer is because our room, you know, our simulation region

120
00:06:12,400 --> 00:06:14,700
only extends down to about like here.

121
00:06:15,300 --> 00:06:20,300
So anything that's below that won't get picked up so any entities that

122
00:06:20,300 --> 00:06:24,000
comprise the floor, I'm sorry.

123
00:06:24,000 --> 00:06:26,300
But that is that correct?

124
00:06:26,300 --> 00:06:27,200
That's not the correct usage.

125
00:06:27,200 --> 00:06:28,000
Comprise is it?

126
00:06:28,000 --> 00:06:28,800
I never know.

127
00:06:30,000 --> 00:06:31,900
Let's just, let's just pause for one second.

128
00:06:39,200 --> 00:06:41,100
Yeah, if that's the wrong, use of comprised.

129
00:06:41,200 --> 00:06:42,900
So pretend I didn't say that.

130
00:06:43,900 --> 00:06:47,000
What I what I should have said, is the floor is comprised of these

131
00:06:47,000 --> 00:06:49,300
blocks that would have been a proper usage.

132
00:06:50,500 --> 00:06:54,300
When I said the the blocks that comprise the floor that's the

133
00:06:54,300 --> 00:06:56,400
incorrect usage of comprised so don't do that.

134
00:06:56,400 --> 00:06:57,800
That was just a bad idea.

135
00:07:02,200 --> 00:07:02,700
Anyway.

136
00:07:05,000 --> 00:07:08,300
So basically what happens here is that we get up, we pull in the stuff

137
00:07:08,300 --> 00:07:12,700
to the simulation region, we don't pull in Far Enough down and get all

138
00:07:12,700 --> 00:07:12,900
these.

139
00:07:12,900 --> 00:07:15,100
Now that's not necessarily a problem, but it's something that just to

140
00:07:15,100 --> 00:07:15,900
be aware of.

141
00:07:15,900 --> 00:07:19,300
We may want to move to a more room Centric model in terms of what we

142
00:07:19,300 --> 00:07:19,800
pull in.

143
00:07:19,800 --> 00:07:23,200
You know, we've got a flexibility there and we need to start

144
00:07:23,200 --> 00:07:24,600
finalizing how that stuff works.

145
00:07:24,600 --> 00:07:27,200
As we move into gameplay code, we don't want a lot of that stuff up in

146
00:07:27,200 --> 00:07:28,200
the air, probably

147
00:07:29,700 --> 00:07:32,700
so what I'm going to look at today is before, if you remember, we have

148
00:07:32,700 --> 00:07:36,000
the ability to have this stuff down here, have sort of a distance

149
00:07:36,000 --> 00:07:42,200
based fog to it, whereas, you got further down, you ended up with, you

150
00:07:42,200 --> 00:07:48,600
know, these these rooms below us were darkening out, and they would go

151
00:07:48,600 --> 00:07:52,000
out to like the gray, this gray background color, for example,

152
00:07:53,700 --> 00:07:57,600
these things would kind of fade out to that color and the way that we

153
00:07:57,600 --> 00:08:03,500
had to do that was very tortured and strange, if you remember, it was

154
00:08:03,500 --> 00:08:10,400
this sort of really error-prone procedure of actually bucketing

155
00:08:10,400 --> 00:08:15,200
entities in the entity render Loop into which room

156
00:08:16,500 --> 00:08:22,100
We thought they were in and setting their color to that to the like to

157
00:08:22,100 --> 00:08:26,500
be modulated so that it was going to fade to Grey and each slice of

158
00:08:26,500 --> 00:08:29,600
the room faded to gray at a different level, right?

159
00:08:29,600 --> 00:08:30,900
So each one of each

160
00:08:32,400 --> 00:08:37,100
Room slice, as you went down, would set it to a different color,

161
00:08:37,200 --> 00:08:37,400
right?

162
00:08:37,400 --> 00:08:41,400
So we'd end up with this one up here being full color.

163
00:08:41,600 --> 00:08:42,900
This one would be a little grayer.

164
00:08:42,900 --> 00:08:43,799
This would be a little gray.

165
00:08:43,799 --> 00:08:46,300
This one would be completely great out, right?

166
00:08:47,100 --> 00:08:49,500
And then as you move down, they would, you know, reduce those grade

167
00:08:49,500 --> 00:08:50,000
levels.

168
00:08:51,400 --> 00:08:55,800
Now, thankfully for us, we now have a full 3d pipeline in place, which

169
00:08:55,800 --> 00:08:58,400
means we can do a lot more stuff there.

170
00:08:58,700 --> 00:08:59,800
We don't have to be.

171
00:09:00,000 --> 00:09:04,100
So constrained, as we were to just listen colors at the head end

172
00:09:04,400 --> 00:09:06,800
because we actually know the depth of everything now.

173
00:09:07,100 --> 00:09:11,700
So we know actually how deep each of these things is on the screen,

174
00:09:11,900 --> 00:09:12,100
right?

175
00:09:12,100 --> 00:09:15,600
We know basically the the distance from the camera, if you will.

176
00:09:18,200 --> 00:09:22,000
Because in order to implement the z-buffer, we needed to know that.

177
00:09:22,200 --> 00:09:28,000
So the Z buffer is, if you think about it, a literal encoding of how

178
00:09:28,000 --> 00:09:32,500
far everything is from the camera, that's exactly what it means,

179
00:09:32,700 --> 00:09:33,200
right?

180
00:09:35,000 --> 00:09:39,600
And I don't really know, you know, I don't suppose there's any good

181
00:09:39,600 --> 00:09:43,900
way to do this, just because we don't have the ability.

182
00:09:45,000 --> 00:09:48,600
At the moment to do any kind of frame capture here.

183
00:09:48,800 --> 00:09:53,000
That would be really great if we could but at the moment I don't we

184
00:09:53,000 --> 00:09:53,800
can't.

185
00:09:54,100 --> 00:09:59,500
And so we don't have, you know, any sort of way to to look at what the

186
00:09:59,500 --> 00:10:00,500
depth buffer is.

187
00:10:00,900 --> 00:10:04,600
Now we could try in the opengl renderer, I don't know.

188
00:10:05,500 --> 00:10:09,700
It'd probably be too much of a waste of time to do this but we've got

189
00:10:09,700 --> 00:10:11,200
this depth attachment here.

190
00:10:12,500 --> 00:10:16,300
And it's this text handle one that were looking at here, right?

191
00:10:16,500 --> 00:10:20,600
And this Frame buffer gets gets this this texture handle what we could

192
00:10:20,600 --> 00:10:24,900
do is is actually resolve that texture handle instead, and

193
00:10:24,900 --> 00:10:28,500
unfortunately I would be negative 1 to 1, which would mean it wouldn't

194
00:10:28,500 --> 00:10:29,600
quite look right.

195
00:10:30,200 --> 00:10:31,700
But we could try it.

196
00:10:31,700 --> 00:10:32,900
Let me just see, right?

197
00:10:33,100 --> 00:10:34,000
If I can

198
00:10:35,800 --> 00:10:41,100
If I can do that, just just to give you an idea, I don't think it's

199
00:10:41,100 --> 00:10:42,900
going to work but you know I might as well.

200
00:10:42,900 --> 00:10:44,100
Try it quickly just in case.

201
00:10:46,600 --> 00:10:52,100
so we've got these Global frame buffer handles here and I think

202
00:10:55,100 --> 00:10:57,500
when we do the blit frame buffer.

203
00:10:58,500 --> 00:10:58,800
Yeah.

204
00:10:58,800 --> 00:11:00,300
So we're not really, hmm.

205
00:11:07,000 --> 00:11:09,900
So I'm just trying to think if there's any real wages.

206
00:11:09,900 --> 00:11:14,000
I think maybe if I did an open Jill rectangle I could this does their

207
00:11:14,000 --> 00:11:20,700
resolve but the resolve doesn't really yeah.

208
00:11:20,700 --> 00:11:23,300
It doesn't really help us with the depth part of things.

209
00:11:30,700 --> 00:11:34,700
So if we did here, if we had the frame buffer, I don't know if depth

210
00:11:34,700 --> 00:11:37,800
buffer bit, I don't think, I think the problem if I do depth buffer

211
00:11:37,800 --> 00:11:41,800
bit here, it would just lit the depth buffer to the other depth

212
00:11:41,800 --> 00:11:42,200
buffer.

213
00:11:42,200 --> 00:11:45,600
I don't think it's going to it would not blit the depth buffer to the

214
00:11:45,600 --> 00:11:46,900
color buffer, right?

215
00:11:46,900 --> 00:11:47,900
Just take a quick look here.

216
00:11:51,700 --> 00:11:53,400
But it would be nice to be able to show.

217
00:11:53,700 --> 00:11:54,000
Oops.

218
00:11:58,000 --> 00:11:59,800
It would be able to nice to be able to show.

219
00:12:00,500 --> 00:12:03,400
If you've, if you're on a machine that's at all modern, you can run

220
00:12:03,400 --> 00:12:07,600
something like render dock or nvidia's, and site and this would work,

221
00:12:07,800 --> 00:12:11,100
but you could just, you could just view the depth buffer in there.

222
00:12:16,100 --> 00:12:19,300
But I was taken from the read buffer of the read frame, buffer and

223
00:12:19,300 --> 00:12:22,700
written to the draw buffers of the draw frame buffer.

224
00:12:22,700 --> 00:12:27,100
So I wonder if I could just swap them swap out the

225
00:12:32,300 --> 00:12:40,400
I think I could probably just swap these around, maybe that could

226
00:12:40,400 --> 00:12:40,800
work.

227
00:12:40,800 --> 00:12:42,300
So if I look in here,

228
00:12:48,000 --> 00:12:50,600
so we've got Global frame, buffer textures.

229
00:12:51,700 --> 00:12:52,200
Right.

230
00:12:52,500 --> 00:12:54,400
And you can see us storing that one.

231
00:12:58,600 --> 00:13:02,500
If I just do Global frame, buffer textures here.

232
00:13:12,600 --> 00:13:16,900
Can store this in theory, I could do something.

233
00:13:19,200 --> 00:13:19,900
Like this.

234
00:13:22,600 --> 00:13:23,200
Maybe.

235
00:13:28,900 --> 00:13:33,600
I am totally making this up just in case anyone was wondering.

236
00:13:35,000 --> 00:13:37,500
I have no idea if this will work at all.

237
00:13:41,900 --> 00:13:47,100
So if I went ahead and said, okay, the depth attachment for this thing

238
00:13:48,100 --> 00:13:49,000
is nothing.

239
00:14:01,100 --> 00:14:01,600
Right.

240
00:14:03,900 --> 00:14:08,200
So, in here, I basically said, okay, the depth attachment is nothing

241
00:14:08,400 --> 00:14:09,800
the color attachment.

242
00:14:15,700 --> 00:14:19,400
Is going to be the depth buffer that we were previous rain to as if it

243
00:14:19,400 --> 00:14:21,200
was depth, right?

244
00:14:22,800 --> 00:14:27,800
Then what we're going to do is do the do the blit to the screen so

245
00:14:27,800 --> 00:14:31,100
that it will read out of this Global depth over here.

246
00:14:32,100 --> 00:14:34,100
And then what I'll do is I'll swap them back.

247
00:14:36,100 --> 00:14:40,400
Right, so I'll just say, like, okay, yeah, now that you did that.

248
00:14:40,400 --> 00:14:41,000
Thank you.

249
00:14:41,000 --> 00:14:41,900
That's good.

250
00:14:42,500 --> 00:14:43,900
Let's go ahead and

251
00:14:47,800 --> 00:14:48,900
And reroute that.

252
00:14:51,800 --> 00:14:55,900
Now, I don't expect this to work at all but I figured it was worth a

253
00:14:55,900 --> 00:14:56,200
5.

254
00:14:56,200 --> 00:14:57,800
Second try, right.

255
00:15:07,500 --> 00:15:08,000
It's not sure.

256
00:15:08,000 --> 00:15:09,600
I totally understood that error message.

257
00:15:11,400 --> 00:15:15,900
Oops and I accidentally have pinned it GL frame.

258
00:15:15,900 --> 00:15:19,200
Buffer texture to do failed because the image cannot be attached to

259
00:15:19,200 --> 00:15:21,400
the referenced attachment point.

260
00:15:22,500 --> 00:15:23,700
That's unfortunate.

261
00:15:26,700 --> 00:15:27,600
How do I undo?

262
00:15:29,400 --> 00:15:30,700
How do I get this out of here?

263
00:15:31,700 --> 00:15:32,200
There it is.

264
00:15:33,700 --> 00:15:36,900
Nope, there we go.

265
00:15:37,600 --> 00:15:38,200
All right.

266
00:15:39,000 --> 00:15:43,900
So that's giving me an error on this one here.

267
00:15:44,300 --> 00:15:48,100
So the depth buffer can't be attached to the color attachment.

268
00:15:48,300 --> 00:15:49,000
It looks like

269
00:15:51,100 --> 00:15:55,500
I guess so I guess there's really no way to do this without actually

270
00:15:55,500 --> 00:15:56,900
invoke invoking.

271
00:15:56,900 --> 00:15:58,400
A Shader call here.

272
00:15:58,400 --> 00:16:02,400
I guess, you know, we definitely could read from this in a Shader.

273
00:16:02,400 --> 00:16:04,700
I guess we just can't read from it here.

274
00:16:05,100 --> 00:16:07,800
Although it since it's a multi sample, I would have thought we would

275
00:16:07,800 --> 00:16:09,200
have had to resolve it.

276
00:16:10,500 --> 00:16:15,200
Although maybe what we'd have to do is, do the do the frame buffer, do

277
00:16:15,200 --> 00:16:16,800
the blitz flame effort to resolve it?

278
00:16:20,200 --> 00:16:23,800
And then read from the depth of her, I guess, I'm not sure.

279
00:16:25,300 --> 00:16:26,000
It's a good question.

280
00:16:31,300 --> 00:16:31,800
All right.

281
00:16:32,000 --> 00:16:32,400
Well,

282
00:16:34,500 --> 00:16:35,400
so much for that.

283
00:16:36,200 --> 00:16:39,200
All I will say is at some point, if I can upgrade this machine or

284
00:16:39,200 --> 00:16:45,300
something to a machine that can have a capture program on it, it's

285
00:16:45,300 --> 00:16:48,200
pretty easy to you don't have to do what I'm doing here.

286
00:16:49,000 --> 00:16:52,200
A lot of times it's, you know, building in debug stuff into your code

287
00:16:52,200 --> 00:16:54,700
where you can visualize stuff like the depth, buffer is always good.

288
00:16:55,300 --> 00:16:58,200
But there's actually tools that can do this for you now so that you

289
00:16:58,200 --> 00:17:03,100
don't have to do you know, instrument your code all the time with

290
00:17:03,100 --> 00:17:04,000
stuff like that.

291
00:17:04,300 --> 00:17:09,000
Try to get it working because what you can do if you have rendered

292
00:17:09,000 --> 00:17:14,200
duck or nsight is you can just run the program under those and they

293
00:17:14,200 --> 00:17:17,200
will capture a frame for you and then they will allow you to inspect

294
00:17:17,200 --> 00:17:18,000
your textures.

295
00:17:18,599 --> 00:17:19,300
And so since

296
00:17:21,700 --> 00:17:24,800
Since we just have those textures right there that represent the depth

297
00:17:24,800 --> 00:17:27,599
buffer, you can just click on them in the program and it will show

298
00:17:27,599 --> 00:17:27,900
you.

299
00:17:28,400 --> 00:17:30,400
I'm not going to waste any time trying to get that working.

300
00:17:30,400 --> 00:17:32,900
I know we could we just have to figure out the right path of like

301
00:17:32,900 --> 00:17:36,200
resolved and then then we probably have to draw a rectangle to the

302
00:17:36,200 --> 00:17:37,700
screen that had the texture on it.

303
00:17:37,700 --> 00:17:40,600
That converted the depth values over to color values and so on we

304
00:17:40,600 --> 00:17:41,400
could definitely do it.

305
00:17:41,400 --> 00:17:44,800
So it's possible in here it's just probably a little time consuming

306
00:17:47,900 --> 00:17:48,400
Anyway.

307
00:17:50,600 --> 00:17:56,800
We can do the same thing and what we want here, you know, is very

308
00:17:56,800 --> 00:17:58,400
similar to a death buffer, right?

309
00:17:59,200 --> 00:17:59,900
If we want to

310
00:18:00,000 --> 00:18:01,900
Out of have that Fade Out effect happen.

311
00:18:03,000 --> 00:18:08,800
What we really need is, just some way of figuring out how, you know,

312
00:18:09,100 --> 00:18:10,000
far away.

313
00:18:10,000 --> 00:18:13,600
Something is from the camera when we're drawing, and changing its

314
00:18:13,600 --> 00:18:14,600
color based on that.

315
00:18:14,700 --> 00:18:17,500
And now that we have access to shaders, that's not particularly

316
00:18:17,500 --> 00:18:18,500
difficult for us to do.

317
00:18:18,500 --> 00:18:21,000
Right here is our vertex code for example.

318
00:18:21,900 --> 00:18:25,400
And what you can see in the vertex code, is that the vertex code right

319
00:18:25,400 --> 00:18:29,200
now, sends down the color, that's just whatever we specified.

320
00:18:29,200 --> 00:18:31,000
So, whenever we push the bitmap on.

321
00:18:31,000 --> 00:18:32,500
Remember, we're specifying some colors,

322
00:18:33,500 --> 00:18:36,900
It just sends down one color per vertex and that color per vertex is

323
00:18:36,900 --> 00:18:38,900
passed directly through that color.

324
00:18:38,900 --> 00:18:42,300
Then gets modulated here with the texture to produce the final color.

325
00:18:43,800 --> 00:18:45,100
It's very straightforward.

326
00:18:45,700 --> 00:18:49,200
And so if we want to modify how this color is being computed, we could

327
00:18:49,200 --> 00:18:52,000
and we could certainly use the Z value at this point to do.

328
00:18:52,000 --> 00:18:54,700
So because if you look at what happens here, we have access, not only

329
00:18:54,700 --> 00:18:57,800
to the world z but also to the transform Z.

330
00:18:58,000 --> 00:19:01,000
So if you take a look at what's passing here, we have the modified Z

331
00:19:01,000 --> 00:19:04,000
value, that modified Z value is in Clips base.

332
00:19:04,300 --> 00:19:07,700
So this modified Z value is a value from negative 1 to 1 that tells us

333
00:19:07,700 --> 00:19:13,500
how deep we are and furthermore that modified Z

334
00:19:13,600 --> 00:19:14,300
Right.

335
00:19:14,900 --> 00:19:15,200
Actually.

336
00:19:15,200 --> 00:19:16,000
That's sorry.

337
00:19:16,000 --> 00:19:16,900
That's not quite true.

338
00:19:17,400 --> 00:19:19,700
This is not from negative one to one yet because it hasn't been

339
00:19:19,700 --> 00:19:21,200
divided, right?

340
00:19:21,600 --> 00:19:24,800
If we were to divide it by Zeman transform, then it would be from

341
00:19:24,800 --> 00:19:26,400
negative 1 to 1, right?

342
00:19:27,700 --> 00:19:34,900
So all we really have to do is decide where we want this fog in our

343
00:19:35,000 --> 00:19:36,900
current setup, right?

344
00:19:37,800 --> 00:19:42,200
We just need to produce some function that says for the distance away

345
00:19:42,200 --> 00:19:45,900
from the camera and perhaps do it in Clips face, right?

346
00:19:47,600 --> 00:19:51,800
How, you know, for this distance of the camera, what do we actually,

347
00:19:52,200 --> 00:19:55,000
what do we want this fog to look like, like, what's the curve that we

348
00:19:55,000 --> 00:19:56,100
want the fog to look like?

349
00:19:56,900 --> 00:19:58,900
And we can have a linear fall-off for the curve.

350
00:19:58,900 --> 00:20:01,000
We could have a, you know, exponential fall off.

351
00:20:01,000 --> 00:20:02,600
The curb could do whatever we want.

352
00:20:02,900 --> 00:20:06,800
But basically we just need some way of computing, a fog, darkening

353
00:20:06,800 --> 00:20:07,400
value, so

354
00:20:07,600 --> 00:20:11,800
Really, what we're talking about here, you're the days.

355
00:20:11,800 --> 00:20:17,600
375, is we want something where you've got the distance from the

356
00:20:17,600 --> 00:20:19,000
camera, right?

357
00:20:22,000 --> 00:20:26,800
And then you've got some color value here, which is, you know, I guess

358
00:20:26,800 --> 00:20:28,600
we would say fog amount.

359
00:20:32,200 --> 00:20:35,500
Going up, maybe I should put that over here.

360
00:20:42,200 --> 00:20:46,100
And so, you know, we could say that zero is no fog and one is full

361
00:20:46,100 --> 00:20:46,500
fog.

362
00:20:46,500 --> 00:20:50,000
So one is like just the color of fog you would see nothing you just

363
00:20:50,000 --> 00:20:52,100
see gray and 0.

364
00:20:53,300 --> 00:20:57,700
Is a mix between the two and calling it fog in quotes here because

365
00:20:57,700 --> 00:20:59,800
really, we're just talking about a distance fade.

366
00:21:00,000 --> 00:21:00,900
Just an effect.

367
00:21:00,900 --> 00:21:04,600
We're trying to have we're not really trying to say that it is fog

368
00:21:05,200 --> 00:21:08,400
because fog is a separate physical phenomena that we might want to

369
00:21:08,400 --> 00:21:09,800
simulate in specific ways.

370
00:21:10,000 --> 00:21:12,800
We're looking down on things and you don't typically have fog looking

371
00:21:12,800 --> 00:21:17,800
down on things so it's more like dust or like just you know we're

372
00:21:17,800 --> 00:21:21,900
talking just more about a generic effect that's used to distinguish

373
00:21:21,900 --> 00:21:26,800
layers of the level from other layers which does not necessarily imply

374
00:21:26,800 --> 00:21:29,900
that we're trying to simulate actual fog because

375
00:21:30,000 --> 00:21:33,300
Actual fog would be a separate thing that has a bunch of physical

376
00:21:33,300 --> 00:21:36,400
properties that we would want to study before we went trying to do it.

377
00:21:36,800 --> 00:21:41,600
So this is not, this is fog and quotes not fog in the real world.

378
00:21:44,100 --> 00:21:48,300
So, you know, at first, let's just do this kind of basic thing, right?

379
00:21:48,300 --> 00:21:51,700
Let's just do something that looks like this where we say, like, as

380
00:21:51,700 --> 00:21:55,200
the distance gets greater, the fog gets greater and that's really all

381
00:21:55,200 --> 00:21:57,500
we need to know, right?

382
00:21:58,100 --> 00:22:01,300
And we could do this in a number of spaces, we can do this in World

383
00:22:01,300 --> 00:22:01,600
space.

384
00:22:01,600 --> 00:22:02,900
We could do this in camera space.

385
00:22:02,900 --> 00:22:03,900
We could do whatever I want.

386
00:22:04,000 --> 00:22:06,000
I'm going to say, let's do it in World space.

387
00:22:08,200 --> 00:22:08,700
Why?

388
00:22:09,200 --> 00:22:12,300
Because it's the cleanest thing for us to represent really.

389
00:22:13,300 --> 00:22:17,700
It doesn't require any sort of thinking on the part of the user, the

390
00:22:17,700 --> 00:22:21,800
user can just specify fog values in a very straightforward way and off

391
00:22:21,800 --> 00:22:27,200
you go and this procedure will be almost exactly the same thinking as

392
00:22:27,200 --> 00:22:30,700
we were doing with the transform when we did on Project, right?

393
00:22:31,100 --> 00:22:36,400
So what we want to do is we want to try and map this onto the camera

394
00:22:36,900 --> 00:22:37,500
somewhere

395
00:22:38,800 --> 00:22:40,600
so, if this is our camera,

396
00:22:44,000 --> 00:22:48,600
And this is the getting, you know, further away farther.

397
00:22:48,600 --> 00:22:49,500
This is getting

398
00:22:51,100 --> 00:22:53,500
further away here.

399
00:22:55,500 --> 00:23:00,800
What we want to do is say well you know in between here and here let's

400
00:23:00,800 --> 00:23:04,000
say is maybe, you know, not fog.

401
00:23:05,200 --> 00:23:05,500
Right?

402
00:23:05,500 --> 00:23:09,800
Because we don't really want this is again, this is not supposed to be

403
00:23:09,800 --> 00:23:12,100
an effect of physical fog effect.

404
00:23:12,100 --> 00:23:15,900
It was a physical fog effect would probably want, you know, particles

405
00:23:15,900 --> 00:23:18,100
or something to tell us where it was.

406
00:23:19,600 --> 00:23:21,400
But this is more of a depth cueing.

407
00:23:21,400 --> 00:23:24,200
It's a depth cueing effect for the players so they can tell the

408
00:23:24,200 --> 00:23:27,100
difference between different levels of the game, different levels of

409
00:23:27,100 --> 00:23:28,700
the room, right?

410
00:23:30,000 --> 00:23:33,800
So in the levels that's right in front of them, we don't really want

411
00:23:33,800 --> 00:23:37,200
to fog it because we want them to see that level as it is.

412
00:23:38,100 --> 00:23:43,000
And so what we really want is sort of a start and end, right?

413
00:23:43,500 --> 00:23:47,600
What we want is sort of a distance where the fog starts, right?

414
00:23:47,600 --> 00:23:53,200
And maybe I'll call this fog start and fog and right.

415
00:23:53,700 --> 00:23:57,700
And so what I want to do is I want to Define distances preferably in

416
00:23:57,700 --> 00:23:59,000
World space, right?

417
00:23:59,800 --> 00:23:59,900
where,

418
00:24:00,000 --> 00:24:05,000
It's like the fog start distance is from here to here and the fog and

419
00:24:05,000 --> 00:24:06,500
distance is from here to here.

420
00:24:07,100 --> 00:24:09,400
So we kind of know how far away from the camera.

421
00:24:09,400 --> 00:24:12,100
The fog starts and how far away the ends.

422
00:24:12,500 --> 00:24:16,800
We would then do a standard, you know, just T mapping like we do in

423
00:24:16,800 --> 00:24:17,900
the game all the time.

424
00:24:19,500 --> 00:24:20,900
Where we'd say, all right.

425
00:24:22,700 --> 00:24:25,500
Let's measure the distance from the camera, right?

426
00:24:25,500 --> 00:24:26,800
So we have some point.

427
00:24:26,900 --> 00:24:30,100
Let's figure out where it is on the distance from the camera.

428
00:24:30,600 --> 00:24:34,100
And let's compare that to this range.

429
00:24:34,100 --> 00:24:36,100
Let's say, let's put it into this range.

430
00:24:36,200 --> 00:24:38,800
If it's on this side of this range, we won't fog it.

431
00:24:38,900 --> 00:24:41,600
If it's on this side of this range, we will fa get completely.

432
00:24:41,700 --> 00:24:45,800
And if it's anywhere inside the range then we will map it to an amount

433
00:24:45,800 --> 00:24:48,300
of fog proportional to how far it has gone.

434
00:24:48,400 --> 00:24:49,000
Right?

435
00:24:50,300 --> 00:24:56,100
And at the moment we won't actually do any kind of curve here.

436
00:24:56,400 --> 00:24:59,400
But once we have this as a t-value, right?

437
00:24:59,400 --> 00:25:00,800
That's telling us how far in between there.

438
00:25:00,800 --> 00:25:04,700
We are we could pull plug it through any kind of function that we

439
00:25:04,700 --> 00:25:05,300
want.

440
00:25:05,400 --> 00:25:10,400
If we later wish to have something, you know, wacky going on in terms

441
00:25:10,400 --> 00:25:14,500
of how the fog gets interpolated, because we think it's better, or who

442
00:25:14,500 --> 00:25:15,400
knows, what?

443
00:25:15,700 --> 00:25:18,400
But for right now, we'll just have it be linear fog.

444
00:25:18,400 --> 00:25:19,700
So the further away you are the more

445
00:25:19,800 --> 00:25:21,200
Fog, you are directly.

446
00:25:21,200 --> 00:25:23,300
There's no sort of

447
00:25:25,700 --> 00:25:29,600
There's there's no modification to how that falls off, if that makes

448
00:25:29,600 --> 00:25:30,000
sense.

449
00:25:31,100 --> 00:25:35,200
So if you think about what would happen here to do that, what we

450
00:25:35,200 --> 00:25:38,300
really want to do is inside this camera, transform?

451
00:25:38,300 --> 00:25:38,700
Right.

452
00:25:39,100 --> 00:25:46,100
We kind of have the information that we need already and so in a sense

453
00:25:46,100 --> 00:25:50,600
really we probably don't need to pass very much down but we will need

454
00:25:50,600 --> 00:25:54,200
to do a couple additional things.

455
00:25:54,500 --> 00:25:56,200
Just to give us the information.

456
00:25:56,200 --> 00:25:59,200
We need to produce the results from the fog, right?

457
00:26:00,500 --> 00:26:05,600
So the basic things we're going to need here is a fog color, right?

458
00:26:05,900 --> 00:26:08,900
And then when we when we're down here, producing our fraud color, what

459
00:26:08,900 --> 00:26:12,500
we're going to want to do is we're going to want to do our sort of our

460
00:26:12,500 --> 00:26:13,700
lerp Command, right?

461
00:26:13,800 --> 00:26:19,000
So you remember, we've got this lip command here and we've got 80 be

462
00:26:19,300 --> 00:26:21,300
where we're going from one thing to another thing.

463
00:26:21,300 --> 00:26:25,900
So we want to go from the vertex color based on the T fog which is

464
00:26:25,900 --> 00:26:28,600
we're going to compute the higher that gets.

465
00:26:28,600 --> 00:26:30,200
We're going to go more towards a fog.

466
00:26:30,300 --> 00:26:31,400
Color right.

467
00:26:33,100 --> 00:26:34,500
So we're going to Loop between these two.

468
00:26:34,500 --> 00:26:37,800
Now we have a problem which is that we defined this lerp function,

469
00:26:37,900 --> 00:26:38,400
right?

470
00:26:38,900 --> 00:26:42,100
And so one thing we could do here, if we wanted to is we could just

471
00:26:42,100 --> 00:26:42,800
implement this.

472
00:26:42,800 --> 00:26:46,300
This in the Shader we could literally copy and paste this and change

473
00:26:46,300 --> 00:26:50,500
this, you know, remove the inline, but otherwise it Shader code is

474
00:26:50,500 --> 00:26:51,500
very close to C code.

475
00:26:51,500 --> 00:26:54,200
We could actually just put this indirectly, right?

476
00:26:54,600 --> 00:26:58,600
But it just so happens that that lerp because it's such a common

477
00:26:58,600 --> 00:26:59,800
function in

478
00:27:00,000 --> 00:27:00,400
Graphics.

479
00:27:00,400 --> 00:27:02,100
Remember I said it was like the one function.

480
00:27:02,100 --> 00:27:04,400
I'd take to a desert island with me because you need it for basically

481
00:27:04,400 --> 00:27:06,200
everything in games.

482
00:27:08,500 --> 00:27:11,200
Lerp actually is built-in.

483
00:27:11,500 --> 00:27:15,900
It's just not called lerp and so I guess I don't have that quick runs

484
00:27:15,900 --> 00:27:16,000
up.

485
00:27:16,000 --> 00:27:17,400
It's actually called mix.

486
00:27:17,800 --> 00:27:18,600
So hold on a second.

487
00:27:18,600 --> 00:27:25,700
Let me let me show you that we are sorry, glsl quick reference card.

488
00:27:30,300 --> 00:27:35,300
So this is a remember I showed you you guys this before, but you

489
00:27:35,300 --> 00:27:36,900
should probably always have it up.

490
00:27:36,900 --> 00:27:40,200
I just tend to close it for whatever reason, you can see all the

491
00:27:40,200 --> 00:27:42,000
built-in functions that you have to work with here.

492
00:27:42,000 --> 00:27:45,300
And this one right here is the one I'm talking about.

493
00:27:45,600 --> 00:27:48,500
It's called mix and you can see that it kind of has a couple of

494
00:27:48,500 --> 00:27:53,700
different versions here, you can look at, you can also see that

495
00:27:53,700 --> 00:27:55,600
they've got some other versions.

496
00:27:55,700 --> 00:27:57,800
So, mix is a linear blend.

497
00:27:57,800 --> 00:27:58,400
They also have

498
00:27:58,800 --> 00:28:04,000
Step, which is like, a, you know, sort of a curve that looks like this

499
00:28:04,500 --> 00:28:07,200
and then there's step which is just the hard Edge.

500
00:28:07,400 --> 00:28:11,400
So, they actually have some, some built-in sort of curves that you can

501
00:28:11,400 --> 00:28:12,600
play with that.

502
00:28:12,600 --> 00:28:16,000
You don't have to implement yourself whether there any faster than

503
00:28:16,000 --> 00:28:18,700
employing themselves, depends greatly probably on the hardware,

504
00:28:19,100 --> 00:28:21,400
because a lot of times our Hardware probably just expands us out to

505
00:28:21,400 --> 00:28:22,800
the actual linear blend code.

506
00:28:22,800 --> 00:28:26,000
I don't know that there's a lot of direct Shader support for it

507
00:28:26,000 --> 00:28:26,600
necessarily.

508
00:28:31,100 --> 00:28:32,300
but if there was

509
00:28:33,300 --> 00:28:34,000
You would get it.

510
00:28:34,000 --> 00:28:37,500
So, you know, if it does what you want better to use the built-in

511
00:28:37,500 --> 00:28:42,600
probably because the built-ins always going to have the greatest

512
00:28:42,600 --> 00:28:46,100
chance of being actually implemented in the hardware and some fast

513
00:28:46,100 --> 00:28:46,500
way.

514
00:28:47,700 --> 00:28:49,700
You know, the only time that isn't true is if you're going to do

515
00:28:49,700 --> 00:28:51,000
something approximated.

516
00:28:51,400 --> 00:28:55,200
So for example you know if you're going to call sign or something and

517
00:28:55,200 --> 00:28:58,800
maybe this Hardware or a lot of Harvard doesn't have really much in

518
00:28:58,800 --> 00:28:59,600
the way of sign.

519
00:28:59,600 --> 00:29:02,100
Maybe you need to do some kind of approximate sign or something like

520
00:29:02,100 --> 00:29:02,800
this, you know?

521
00:29:03,500 --> 00:29:06,400
Those are usually the only times is if you if you suspect that you

522
00:29:06,400 --> 00:29:11,800
need a very approximated value, that is going to be significantly

523
00:29:11,800 --> 00:29:14,300
worse than what the Shader is required to produce.

524
00:29:14,300 --> 00:29:18,100
Then maybe in that case you know don't call the built-in but for

525
00:29:18,100 --> 00:29:20,900
something as simple as lerp you pretty much always want to call the

526
00:29:20,900 --> 00:29:21,300
built-in.

527
00:29:21,300 --> 00:29:24,900
Because it's I mean at least as far as I've ever experienced gonna be

528
00:29:24,900 --> 00:29:27,400
the most reasonable way to ensure that the compiler knows exactly what

529
00:29:27,400 --> 00:29:29,300
to do to get you the right thing on that platform.

530
00:29:30,100 --> 00:29:33,000
So in our header code here, all I'm going to do is I'm just going to

531
00:29:33,100 --> 00:29:37,600
Define so that we can still use our own terms everywhere in the code,

532
00:29:37,900 --> 00:29:38,800
including in shaders.

533
00:29:38,800 --> 00:29:41,600
I'm just going to pound to find some stuff up here.

534
00:29:41,800 --> 00:29:42,900
And so, some of the things we can do.

535
00:29:42,900 --> 00:29:47,200
For example, is we can Define our RF 32 to be float.

536
00:29:47,200 --> 00:29:51,200
So now we can actually make these BF 32s, right?

537
00:29:51,800 --> 00:29:58,200
Furthermore, we can Define all of our Vector ideas to be there, Vector

538
00:29:58,200 --> 00:29:58,800
ideas,

539
00:30:04,400 --> 00:30:04,900
Right.

540
00:30:06,800 --> 00:30:08,000
So that's pretty handy as well.

541
00:30:09,800 --> 00:30:13,700
So now, these will actually look like our code rather than their code

542
00:30:13,900 --> 00:30:16,700
and that's kind of nice because then you can cut and paste in between

543
00:30:17,000 --> 00:30:20,900
your shaders and your C code and it mostly just works, right?

544
00:30:21,500 --> 00:30:24,000
You'll notice that pretty much everything here would just work, and in

545
00:30:24,000 --> 00:30:26,500
fact, it will work even more if we do something like this.

546
00:30:32,000 --> 00:30:35,700
So now we can even use our initialization style, right?

547
00:30:36,800 --> 00:30:38,900
And that's pretty nice as well.

548
00:30:40,200 --> 00:30:42,200
So, yeah, if you start to look at this, you can see it.

549
00:30:42,200 --> 00:30:44,000
Kind of just looks like our code now, which is nice.

550
00:30:44,000 --> 00:30:45,100
And then there's a lip here.

551
00:30:45,100 --> 00:30:48,800
And we just need to define the lerp, in our lerp.

552
00:30:48,800 --> 00:30:53,500
We structure it, ATB they have mix and you can see, mix is actually

553
00:30:53,500 --> 00:30:53,800
different.

554
00:30:53,800 --> 00:30:55,200
It's a becomes first.

555
00:30:55,200 --> 00:30:57,600
And then, the T value comes last.

556
00:30:57,600 --> 00:31:01,400
Actually, you probably can't see that because it's too darn small.

557
00:31:01,400 --> 00:31:04,900
Let me go ahead and make it a little bit larger there so you can see

558
00:31:04,900 --> 00:31:05,300
it.

559
00:31:06,900 --> 00:31:08,400
So, this is what we're talking about here.

560
00:31:08,800 --> 00:31:12,500
You can see there's an X and Y, and a, and the a value is the one that

561
00:31:12,500 --> 00:31:13,600
we're talking about here.

562
00:31:14,300 --> 00:31:16,000
So you can do whatever you want.

563
00:31:16,000 --> 00:31:20,800
Here, vectors or floating Point values mix.

564
00:31:20,900 --> 00:31:21,800
Accepts them all.

565
00:31:22,700 --> 00:31:26,700
So you just need some tea, you just need two things of the same type,

566
00:31:26,700 --> 00:31:28,200
and then a t-value to blend between them.

567
00:31:29,100 --> 00:31:34,500
So we want to change it from a TB to ABT and then the lerp is lined up

568
00:31:34,500 --> 00:31:35,100
properly.

569
00:31:35,900 --> 00:31:36,400
And what we

570
00:31:36,600 --> 00:31:39,400
Right now is to calculate that t fog value.

571
00:31:39,400 --> 00:31:42,700
Now, to start off with, I'm not going to do any fucking at all.

572
00:31:42,900 --> 00:31:47,700
I'm just going to leave it, you know, on modified their.

573
00:31:49,000 --> 00:31:51,500
Oops, did I do wrong?

574
00:31:51,500 --> 00:31:52,100
I was gonna say,

575
00:31:55,000 --> 00:31:56,800
So that we can verify that everything.

576
00:31:59,000 --> 00:32:04,600
Is working properly, but I have, I have committed some egregious

577
00:32:04,600 --> 00:32:05,000
error.

578
00:32:05,000 --> 00:32:08,900
I suppose it may be because this value is not being bound, although we

579
00:32:08,900 --> 00:32:10,700
should have got a compilation error there.

580
00:32:19,000 --> 00:32:19,500
Yeah.

581
00:32:20,500 --> 00:32:22,800
So what did I don't think I did anything there.

582
00:32:22,800 --> 00:32:23,300
Did I

583
00:32:27,500 --> 00:32:28,800
I should also probably do this.

584
00:32:34,100 --> 00:32:35,700
All I did was change these pound.

585
00:32:35,700 --> 00:32:38,900
Defiance, I didn't think I did anything, particularly weird here.

586
00:32:39,000 --> 00:32:43,100
We've got this slurp to the fog color but the tea fog value is 0.

587
00:32:43,300 --> 00:32:47,600
I think I put these in the right order for mix ABT.

588
00:32:47,600 --> 00:32:49,200
I assume it goes from A to B.

589
00:32:49,200 --> 00:32:49,500
I guess.

590
00:32:49,500 --> 00:32:51,000
I don't actually know that that's true.

591
00:32:51,200 --> 00:32:53,900
If that wasn't true, I suppose that would do it.

592
00:32:54,900 --> 00:32:57,100
So I guess I should probably test that.

593
00:32:57,100 --> 00:32:59,800
Let me just take a look at what the mix.

594
00:33:00,000 --> 00:33:00,400
Is.

595
00:33:06,100 --> 00:33:09,200
so, if I take a look in here with the mix value actually does,

596
00:33:11,200 --> 00:33:15,500
It doesn't actually tell me which direction mix goes.

597
00:33:16,100 --> 00:33:20,200
So let me just double check that before I go any further.

598
00:33:24,800 --> 00:33:28,300
Mix performs a linear interpolation between X and Y.

599
00:33:28,300 --> 00:33:31,100
Using a two-way between them, their terms of icelanders x times 1

600
00:33:31,100 --> 00:33:32,400
minus a plus y times.

601
00:33:32,400 --> 00:33:34,200
A that's so that is what I thought.

602
00:33:35,000 --> 00:33:37,200
So I would have assumed that that would have worked nicely.

603
00:33:37,200 --> 00:33:40,500
I'll go ahead and pull this out for a moment.

604
00:33:42,800 --> 00:33:46,500
Just to see if I did something else horribly wrong.

605
00:33:46,500 --> 00:33:48,200
There we go.

606
00:33:54,300 --> 00:33:55,900
So I've done something weird.

607
00:33:56,500 --> 00:33:57,700
I'm just not sure what.

608
00:33:58,700 --> 00:34:03,500
So if I go ahead and Skip fog color here and say instead that I've got

609
00:34:03,500 --> 00:34:10,199
a tea fog value like so and then I've got a fog color value and let's

610
00:34:10,199 --> 00:34:14,900
just say that that fog color value is 1 1 1, if I was then to lerp

611
00:34:14,900 --> 00:34:20,900
between them using the T fog value, I would expect that vert color to

612
00:34:20,900 --> 00:34:23,600
just stay what it was because this is zero and so whatever.

613
00:34:23,699 --> 00:34:26,900
I put here for fog color should just not have any effect, right?

614
00:34:27,800 --> 00:34:28,400
So let's see.

615
00:34:28,400 --> 00:34:29,400
We got an error here.

616
00:34:29,400 --> 00:34:31,600
So let's take a look error message.

617
00:34:37,300 --> 00:34:39,000
Undeclared in Far fog color.

618
00:34:40,500 --> 00:34:41,100
Is that true?

619
00:34:41,500 --> 00:34:42,100
Oh yeah.

620
00:34:42,100 --> 00:34:42,900
That is kind of true.

621
00:34:46,800 --> 00:34:47,300
There we go.

622
00:34:54,900 --> 00:34:55,300
There we go.

623
00:34:56,900 --> 00:34:58,300
So that's fine.

624
00:34:59,000 --> 00:35:02,600
So the problem was just that when I put it up here it was not so fine.

625
00:35:10,700 --> 00:35:13,500
You know what to, this is going to be uniform.

626
00:35:13,700 --> 00:35:17,400
So that's the incorrect vertex stream value so that probably could

627
00:35:17,400 --> 00:35:18,300
have caused some bad things.

628
00:35:18,300 --> 00:35:18,900
Yeah, there we go.

629
00:35:19,900 --> 00:35:24,400
Sorry, uniforms are things you set once as we discussed before and in

630
00:35:24,400 --> 00:35:27,300
values are ones that are actually coming from the vertex stream.

631
00:35:28,100 --> 00:35:30,900
And we're obviously not supplying a fog color per vertex.

632
00:35:30,900 --> 00:35:33,300
We're just applying a fog color generically

633
00:35:35,100 --> 00:35:38,000
All right, so if we continue now now on here.

634
00:35:38,000 --> 00:35:40,000
Now we can also say like all right.

635
00:35:40,800 --> 00:35:45,400
If we wanted to again, we could just replace fog color with something

636
00:35:45,400 --> 00:35:49,000
like white here and then what we could do or actually, you know what,

637
00:35:49,000 --> 00:35:53,900
I'll just I'll just use a gray for the time being and then if we

638
00:35:53,900 --> 00:35:58,300
wanted to again, we could just test this by blending halfway and now

639
00:35:58,300 --> 00:35:59,800
we should see our game kind of

640
00:36:00,000 --> 00:36:02,100
Can by that amount.

641
00:36:02,100 --> 00:36:04,900
What's the can't modify you from?

642
00:36:05,500 --> 00:36:06,000
All right, fine.

643
00:36:16,300 --> 00:36:17,400
Why you can't modify any?

644
00:36:17,400 --> 00:36:18,100
I have no idea.

645
00:36:19,100 --> 00:36:22,500
So, here you can see us blending between these two colors, right?

646
00:36:22,700 --> 00:36:30,700
So, we've basically combined the two and that's a little bit odd only

647
00:36:30,700 --> 00:36:31,900
because

648
00:36:33,900 --> 00:36:38,700
Looking at that, it for whatever reason, the cubes seem to be fogged,

649
00:36:38,700 --> 00:36:49,200
much more aggressively than the bitmaps are, which I'm not sure why,

650
00:36:49,200 --> 00:36:50,500
that would be right?

651
00:36:50,600 --> 00:36:52,100
So, when reading from,

652
00:36:55,700 --> 00:36:58,700
When reading from a texture, that's not 1111.

653
00:37:01,500 --> 00:37:06,100
We're kind of getting a very different result there than when we are

654
00:37:06,600 --> 00:37:07,600
not doing that.

655
00:37:07,900 --> 00:37:10,500
I'm not sure why that would be right.

656
00:37:10,500 --> 00:37:18,900
That's let me just crank that up to a full one value so that it's

657
00:37:18,900 --> 00:37:20,700
literally completely fog.

658
00:37:21,700 --> 00:37:22,000
Yeah.

659
00:37:22,000 --> 00:37:24,300
So that's kind of weird, right?

660
00:37:24,300 --> 00:37:29,800
Like we should be seeing everybody getting completely fogged but we're

661
00:37:29,800 --> 00:37:30,900
actually not

662
00:37:32,200 --> 00:37:34,200
Seeing everybody get completely fogged.

663
00:37:34,200 --> 00:37:34,500
Oh,

664
00:37:36,600 --> 00:37:37,000
Don't know why.

665
00:37:37,000 --> 00:37:39,500
The fog color is Alpha value would be different.

666
00:37:43,200 --> 00:37:49,300
So the fact that there's the, the bitmaps come through with no

667
00:37:49,400 --> 00:37:53,800
apparent modification, doesn't make a lot of sense to me because

668
00:37:53,800 --> 00:37:58,500
here's the texture sample, right?

669
00:37:58,500 --> 00:38:04,800
Where we're taking that samp, the color value from the texture that

670
00:38:04,800 --> 00:38:06,200
comes out into text sample.

671
00:38:06,600 --> 00:38:09,300
And you can see that what we're doing with that is, you know, we

672
00:38:09,300 --> 00:38:09,900
Square it.

673
00:38:09,900 --> 00:38:10,800
If we have

674
00:38:13,100 --> 00:38:16,300
If we don't have the srgb, we should have the srgb.

675
00:38:16,300 --> 00:38:17,700
So the squaring shouldn't be happening.

676
00:38:17,700 --> 00:38:21,300
So we're just taking the texture sample which will have been mapped to

677
00:38:21,300 --> 00:38:24,800
linear Colour space where then taking the result color as being,

678
00:38:24,800 --> 00:38:27,700
whatever the fragments color was times the texture sample.

679
00:38:28,300 --> 00:38:31,600
And then that's what we output directly now.

680
00:38:31,600 --> 00:38:36,300
The weird part about that is, you know, the frag color here, right

681
00:38:36,500 --> 00:38:41,000
should be the same for everybody, right?

682
00:38:47,000 --> 00:38:49,200
I mean, we're taking whatever the vertex color is.

683
00:38:51,700 --> 00:38:52,900
And we're producing.

684
00:38:55,800 --> 00:38:59,800
a blend between them now, I assume

685
00:39:00,000 --> 00:39:05,600
and I guess I don't know, but if I was just to assign, oops, if I was

686
00:39:05,600 --> 00:39:08,300
just to assign the frag color,

687
00:39:10,500 --> 00:39:15,300
As the fog color itself then you know I would have expected.

688
00:39:23,800 --> 00:39:25,100
What is it talking about?

689
00:39:26,700 --> 00:39:31,000
Geo and able vertex, array a tributary parameter index has an invalid

690
00:39:31,000 --> 00:39:33,400
value of 0xffff.

691
00:39:33,400 --> 00:39:34,200
Oh really?

692
00:39:39,400 --> 00:39:39,800
ah,

693
00:39:41,200 --> 00:39:47,900
so if I never use the, the vert color then it doesn't need to be

694
00:39:47,900 --> 00:39:48,900
specified.

695
00:39:51,800 --> 00:39:54,200
That's kind of unfortunate because it's like, okay, I'm still

696
00:39:54,200 --> 00:39:54,700
specifying here.

697
00:39:54,700 --> 00:39:57,300
I'm just trying to do some debugging to keep that out of here.

698
00:39:57,300 --> 00:40:00,100
I suppose we probably can run with that error.

699
00:40:04,800 --> 00:40:06,900
I can just set the next statement to here.

700
00:40:08,700 --> 00:40:10,300
But it's going to happen every time, right?

701
00:40:10,300 --> 00:40:10,600
Yeah.

702
00:40:11,200 --> 00:40:13,300
So I pretty much have to have a way around that.

703
00:40:14,400 --> 00:40:19,500
I guess what I could do is try to pretend that it was being used, but

704
00:40:19,500 --> 00:40:21,200
I don't know how I could really do that.

705
00:40:21,400 --> 00:40:27,200
Like, you know, if I sign to it here like so it's probably going to

706
00:40:27,200 --> 00:40:29,600
get optimized out by the compiler, because the compiler is going to

707
00:40:29,600 --> 00:40:31,400
know that it gets overwritten by fog color.

708
00:40:31,600 --> 00:40:33,300
So you're still going to probably get the same thing.

709
00:40:33,300 --> 00:40:33,500
Oh no.

710
00:40:33,500 --> 00:40:34,200
OK, there we are.

711
00:40:36,000 --> 00:40:41,300
So here we are doing our bitmap drawing, right, and you can kind of

712
00:40:41,300 --> 00:40:45,300
see that we're getting even though I'm setting the fragment color

713
00:40:45,300 --> 00:40:48,800
specifically to what the fog is.

714
00:40:49,400 --> 00:40:53,000
In this case we're getting it, modulated there?

715
00:40:57,800 --> 00:40:58,000
Okay.

716
00:40:58,000 --> 00:41:01,300
Start, I think about that's actually not wrong though.

717
00:41:13,500 --> 00:41:16,000
So I think that's actually not incorrect.

718
00:41:16,000 --> 00:41:19,600
Now, I think about it so because there's no textures on the cube

719
00:41:19,600 --> 00:41:23,500
though the cube will always just be what the frag color is.

720
00:41:23,800 --> 00:41:27,100
And so since it's modulated, since we're multiplying the two together,

721
00:41:27,200 --> 00:41:29,800
I guess that's actually exactly what you would expect to have happen.

722
00:41:30,200 --> 00:41:31,200
Maybe it's just a slow morning.

723
00:41:31,200 --> 00:41:32,500
I'm not sure why I thought that was wrong.

724
00:41:33,000 --> 00:41:36,700
Because yeah, if we replace the fog, if we are entirely at fog color,

725
00:41:37,100 --> 00:41:37,600
right?

726
00:41:39,300 --> 00:41:41,700
Then it just means we're going to get half values for everything.

727
00:41:43,100 --> 00:41:46,500
So what I really want is not exactly that, right.

728
00:41:46,500 --> 00:41:49,100
What I really want to do here is I want to have something that will

729
00:41:49,100 --> 00:41:53,000
completely replace these values and that's not what this modulation is

730
00:41:53,000 --> 00:41:54,700
going to do for me, right?

731
00:41:55,900 --> 00:41:59,800
So I really need more information in here in order to do

732
00:42:00,200 --> 00:42:04,200
This work properly, I suppose, I could do the lerp directly in the

733
00:42:04,200 --> 00:42:06,500
pixel Shader, which seems a little bit more expensive.

734
00:42:06,500 --> 00:42:11,500
But, you know, it's and I probably could do it be a little more clever

735
00:42:11,500 --> 00:42:12,600
and not have that happen.

736
00:42:14,700 --> 00:42:17,900
but basically what that would involve is me saying, well, okay, so

737
00:42:17,900 --> 00:42:21,600
there's a fragment color here and there's also, you know,

738
00:42:25,200 --> 00:42:29,600
Oops, there's also a fog color.

739
00:42:29,600 --> 00:42:31,400
The fog color would actually be in here.

740
00:42:35,800 --> 00:42:36,300
Right?

741
00:42:36,300 --> 00:42:40,200
And so, then addition to the fog color, we just say like, okay, we've

742
00:42:40,200 --> 00:42:45,400
got a smooth in F32, that's going to be the fog amount and then we

743
00:42:45,400 --> 00:42:47,400
would actually do the lerp in here.

744
00:42:47,500 --> 00:42:51,300
So we do our frag color times, our texture sample and Wheeler pin here

745
00:42:51,300 --> 00:42:55,700
and say, okay, that is going to go from T fog to fog color.

746
00:42:55,700 --> 00:43:02,200
Like so right, we then have the fog color defined in here because

747
00:43:02,200 --> 00:43:04,000
again we're not going to specify quite yet.

748
00:43:04,000 --> 00:43:05,800
Although eventually what we'll do is we'll pass it in from the

749
00:43:05,800 --> 00:43:05,800
outside.

750
00:43:05,900 --> 00:43:06,400
Outside.

751
00:43:06,900 --> 00:43:09,600
And then in here, we're just determining what the actual tea fog value

752
00:43:09,600 --> 00:43:10,000
is.

753
00:43:10,200 --> 00:43:14,000
And so we're going to pass that value from the vertex Shader to the

754
00:43:14,000 --> 00:43:16,300
pixel Shader through one of these interpolators.

755
00:43:16,300 --> 00:43:16,800
Right?

756
00:43:17,500 --> 00:43:20,800
So we have a smooth out, fog amount in that corresponds to the flute

757
00:43:21,000 --> 00:43:22,400
fog amount smooth in here.

758
00:43:22,600 --> 00:43:26,400
So it comes, you know, it gets assigned here and then that means the

759
00:43:26,400 --> 00:43:29,500
fragment color is still just a Vertex color and we don't touch it.

760
00:43:29,900 --> 00:43:33,900
And this, this is, you know, we could also call it frag fog, but we

761
00:43:33,900 --> 00:43:35,600
don't have to keep calling it frag and

762
00:43:35,800 --> 00:43:36,000
nothing.

763
00:43:36,000 --> 00:43:38,300
If we don't want to, that's just sort of the convention, I had

764
00:43:38,300 --> 00:43:38,900
adopted.

765
00:43:39,200 --> 00:43:41,800
And so then our lerp will be done in the pixel Shader and we could do

766
00:43:41,800 --> 00:43:42,500
whatever we want.

767
00:43:42,500 --> 00:43:46,300
Their we could you know, after we get the the Texel

768
00:43:48,400 --> 00:43:49,400
Know what was going on there.

769
00:43:57,400 --> 00:44:00,100
Under credit party fog, that's true.

770
00:44:04,800 --> 00:44:05,300
Here we go.

771
00:44:09,700 --> 00:44:11,800
And so this is now what I would expect to see.

772
00:44:12,300 --> 00:44:15,000
And so now if I change the fog amount to something else,

773
00:44:18,900 --> 00:44:20,100
I should get less of it.

774
00:44:20,300 --> 00:44:21,100
Perfect.

775
00:44:21,100 --> 00:44:24,800
Okay, so now we've got more what I actually wanted for fog and that's

776
00:44:24,800 --> 00:44:25,500
all good.

777
00:44:25,500 --> 00:44:27,800
However, I still need.

778
00:44:27,800 --> 00:44:32,000
Now, a way to make that fog, be based on how far away you are from the

779
00:44:32,000 --> 00:44:32,500
camera.

780
00:44:33,000 --> 00:44:36,900
So, what I need to do is I need to compute compute, fog amount in some

781
00:44:36,900 --> 00:44:37,700
reasonable way.

782
00:44:38,100 --> 00:44:42,500
Right now, I know that the Z axis

783
00:44:45,000 --> 00:44:48,600
I know where the z-axis is in this transform, right?

784
00:44:49,200 --> 00:44:54,400
Because I know that it's the third row of the of the transform

785
00:44:54,400 --> 00:44:54,900
normally.

786
00:44:55,100 --> 00:44:57,800
However, it's already been modified with the it's already been

787
00:44:57,800 --> 00:44:59,800
smooshed down in the projection Matrix and all these others.

788
00:45:00,000 --> 00:45:00,500
Two things.

789
00:45:01,500 --> 00:45:05,600
And it's relatively cheap for me to specify uniforms here because we

790
00:45:05,600 --> 00:45:07,800
only have true to draw calls total

791
00:45:09,400 --> 00:45:10,700
I think something like that.

792
00:45:10,800 --> 00:45:14,500
I'm not to dropped calls two batches program changes.

793
00:45:18,100 --> 00:45:22,400
so I think I'm just going to keep things simple for now rather than

794
00:45:22,400 --> 00:45:25,400
prematurely optimize anything and just say, look

795
00:45:26,600 --> 00:45:29,600
What I need is a fog start.

796
00:45:31,000 --> 00:45:37,000
I guess I could just do a camera p and then I need a fog start.

797
00:45:38,000 --> 00:45:38,700
Distance.

798
00:45:40,600 --> 00:45:42,900
In a fog end distance.

799
00:45:46,700 --> 00:45:49,000
I then need a vector to measure along.

800
00:45:55,900 --> 00:45:57,200
And that should be my complete.

801
00:45:57,200 --> 00:45:59,100
That's all I really need for fog, right?

802
00:45:59,100 --> 00:46:00,800
I need to know where I am.

803
00:46:01,100 --> 00:46:03,400
I need to know the direction along which I'm measuring.

804
00:46:03,800 --> 00:46:08,500
And I need to know how far the start and the end are right.

805
00:46:09,900 --> 00:46:11,600
So now it's very simple to measure this.

806
00:46:11,700 --> 00:46:15,900
Again, this is just a set it a billion times on handmade hero, so I'm

807
00:46:15,900 --> 00:46:19,600
not going to say it on the on the Blackboard again, you should just

808
00:46:19,600 --> 00:46:21,100
know how to do this operation.

809
00:46:21,100 --> 00:46:23,600
This is when we've done many many many times, right?

810
00:46:24,100 --> 00:46:27,100
We know the location of the vertex, right?

811
00:46:27,700 --> 00:46:31,300
It's going to be and we probably want to use RZ biased one.

812
00:46:31,300 --> 00:46:34,600
So that, you know, the fake Z coordinate, is the one we actually use.

813
00:46:34,700 --> 00:46:36,500
So we have our Z vertex here.

814
00:46:38,200 --> 00:46:42,400
What we want to do is take our xever, Texas XYZ coordinate, right?

815
00:46:42,400 --> 00:46:45,700
We want to figure out how far along that axis it is.

816
00:46:45,700 --> 00:46:48,900
So, first of all, we're going to say, let's subtract the camera

817
00:46:49,000 --> 00:46:50,500
location, right?

818
00:46:50,500 --> 00:46:53,500
So, that gives us a vector from the camera to the vertex

819
00:46:54,700 --> 00:46:56,800
Then we want to dot product it, right?

820
00:46:57,100 --> 00:46:58,700
And you know I don't know what they called.

821
00:46:58,700 --> 00:46:59,700
A proctor shaders welcomes.

822
00:46:59,700 --> 00:47:02,500
I think it's just dot but I'm going to Define it to be ours.

823
00:47:04,300 --> 00:47:08,600
We want a DOT product that with the direction, you know, so that now

824
00:47:08,600 --> 00:47:11,400
we've measured along this direction that will give us.

825
00:47:11,400 --> 00:47:16,600
Because again, remember a b cosine Theta, that will give us how far

826
00:47:16,600 --> 00:47:17,900
along this fog direction.

827
00:47:17,900 --> 00:47:20,600
We are assuming the fogger X is unit length, which of course, we will

828
00:47:20,600 --> 00:47:22,900
always make it because we're specifying it ourselves.

829
00:47:23,900 --> 00:47:28,300
So that's our distance and then we now know that we have some value.

830
00:47:28,300 --> 00:47:30,000
That's how far along that you are.

831
00:47:30,100 --> 00:47:33,700
We just need to map it in between these two, right?

832
00:47:33,800 --> 00:47:39,300
And again they actually have I think the function we want, here's the

833
00:47:39,300 --> 00:47:39,900
clamp.

834
00:47:42,500 --> 00:47:43,500
Let's see.

835
00:47:43,500 --> 00:47:48,400
Do they have one that does a clamp plus normalize?

836
00:47:49,600 --> 00:47:50,400
I don't know if they do.

837
00:47:58,600 --> 00:47:59,800
It does not look.

838
00:48:00,000 --> 00:48:01,300
Like they do.

839
00:48:10,400 --> 00:48:13,500
At least I don't see it.

840
00:48:23,900 --> 00:48:27,000
So I'm going to guess that they don't just because I don't see it.

841
00:48:27,400 --> 00:48:31,500
So we're going to have to implement clamp the clamp range stuff

842
00:48:31,500 --> 00:48:35,000
ourselves as far as I can tell, because they do have the basic clamp,

843
00:48:35,000 --> 00:48:39,000
so we can, we can do the initial clamp correctly, but we can't turn it

844
00:48:39,000 --> 00:48:44,400
into a value between 0 and 1 correctly as far as you can.

845
00:48:44,400 --> 00:48:45,700
So, although well,

846
00:48:51,400 --> 00:48:54,700
This sort of does it, although we don't really want.

847
00:48:54,700 --> 00:48:58,800
The smooth part is the only problem.

848
00:49:04,900 --> 00:49:07,100
Yeah, so I don't know I don't see it there.

849
00:49:07,100 --> 00:49:09,800
So I'm going to assume that they don't have it because I don't see.

850
00:49:13,500 --> 00:49:14,200
I don't see it.

851
00:49:14,700 --> 00:49:21,200
So we're going to need our this is the clamp normalized map to range,

852
00:49:21,200 --> 00:49:21,700
right?

853
00:49:23,900 --> 00:49:24,300
This one.

854
00:49:26,600 --> 00:49:29,700
So we need to implement this function because we don't really have it

855
00:49:29,700 --> 00:49:30,200
yet.

856
00:49:30,500 --> 00:49:33,100
So it's not really a pound of fine like these other ones were.

857
00:49:33,700 --> 00:49:36,500
So we want to basically put this again in our header code so our

858
00:49:36,500 --> 00:49:37,600
shaders can use it.

859
00:49:38,600 --> 00:49:43,000
So here's our F 32 F 3 to F 32.

860
00:49:43,800 --> 00:49:45,600
And we got to implement this.

861
00:49:45,600 --> 00:49:47,400
This sausage gentlemen.

862
00:49:48,100 --> 00:49:50,700
We're going to use the same code here, but we can do it a little bit

863
00:49:50,800 --> 00:49:52,000
fancier, right?

864
00:49:52,100 --> 00:49:55,000
Because clamp 021 does actually exist.

865
00:49:56,200 --> 00:49:56,800
In a sense.

866
00:49:57,100 --> 00:50:02,200
So if we want to, we can do clamp 0 to 1 that can be defined, you

867
00:50:02,200 --> 00:50:05,600
know, that takes a t-value and that just issues there clamp command.

868
00:50:06,900 --> 00:50:08,500
However, what is it?

869
00:50:08,500 --> 00:50:10,000
Clamp min max.

870
00:50:10,000 --> 00:50:12,300
So, it's been Max, right?

871
00:50:13,700 --> 00:50:17,000
And then clamp, which is our clamp

872
00:50:20,100 --> 00:50:23,100
Is min T Max.

873
00:50:27,800 --> 00:50:29,000
Or I guess I should say.

874
00:50:30,500 --> 00:50:32,100
Yes, I'm leaving these location now.

875
00:50:33,300 --> 00:50:37,300
That's a clamp T min max, right?

876
00:50:38,900 --> 00:50:43,700
So I think in this case we probably don't want to bother checking the

877
00:50:43,700 --> 00:50:47,800
range here because we'll just assume that in shaders.

878
00:50:47,800 --> 00:50:50,700
We since we're trying to do performant code here, we're not going to

879
00:50:50,700 --> 00:50:55,200
be passing down ranges that don't have anything in them.

880
00:50:55,600 --> 00:50:57,200
So we're just going to assume

881
00:50:59,100 --> 00:50:59,800
that this works.

882
00:51:03,900 --> 00:51:07,700
And so now we've got a clamp map to range which is going to work just

883
00:51:07,700 --> 00:51:09,100
fine for our purposes.

884
00:51:10,500 --> 00:51:15,000
It just basically does the divide and re-centering, so there's our

885
00:51:15,000 --> 00:51:16,700
clamps are to unmapped arranged.

886
00:51:17,100 --> 00:51:21,400
So now what we should be able to do is say, well, this whatever this

887
00:51:21,400 --> 00:51:22,700
value here is what?

888
00:51:22,700 --> 00:51:25,000
Well you know let's let's do it here.

889
00:51:25,700 --> 00:51:27,400
Let's just call this fog distance.

890
00:51:29,400 --> 00:51:31,500
and then we can say that the fog amount

891
00:51:37,800 --> 00:51:39,900
Is this going to be a clamp map to range?

892
00:51:42,900 --> 00:51:48,500
And that range that were using here is the fog start distance, and the

893
00:51:48,500 --> 00:51:50,900
fog and distance, right?

894
00:51:51,800 --> 00:51:53,500
And so that should just do it.

895
00:51:53,500 --> 00:51:56,400
The problem now is that we're not actually specifying any of these

896
00:51:56,400 --> 00:51:57,900
uniforms, right?

897
00:51:58,400 --> 00:52:00,800
So we don't actually have the ability to do anything.

898
00:52:00,800 --> 00:52:06,200
Now, if I run this, I should get nonsense results because we don't

899
00:52:06,200 --> 00:52:08,600
actually have any of those uniform specified, right?

900
00:52:09,300 --> 00:52:10,800
Let's fix our compiler errors.

901
00:52:11,100 --> 00:52:11,800
Oh yeah, inner.

902
00:52:11,800 --> 00:52:12,300
We've got a

903
00:52:12,500 --> 00:52:13,000
Fine.

904
00:52:16,200 --> 00:52:18,800
So let's take a look at what the dot product is inner.

905
00:52:19,100 --> 00:52:22,200
Maybe think it's just not a b but I'm not sure.

906
00:52:24,300 --> 00:52:25,200
Yeah.a be.

907
00:52:32,500 --> 00:52:35,800
Okay, so I'm going to go ahead and assume that nothing is incorrect

908
00:52:35,800 --> 00:52:36,000
there.

909
00:52:36,000 --> 00:52:39,800
Although we don't know, there might be other incorrect things in there

910
00:52:40,600 --> 00:52:43,900
but we don't haven't specified any of this stuff and we need to start

911
00:52:43,900 --> 00:52:44,900
specifying this stuff.

912
00:52:45,300 --> 00:52:49,000
So let's start by look wiring that stuff up because that's something

913
00:52:49,000 --> 00:52:51,900
that we're going to have to do regardless and then we'll debug

914
00:52:51,900 --> 00:52:52,300
anything.

915
00:52:52,300 --> 00:52:54,300
That might also be buggy in addition.

916
00:52:55,100 --> 00:52:58,100
So you can see, we've got all these get a trip location on census

917
00:52:58,100 --> 00:52:58,500
here.

918
00:52:58,800 --> 00:53:02,100
That's fine because we can just go ahead and

919
00:53:02,300 --> 00:53:03,400
Exact same thing.

920
00:53:05,300 --> 00:53:09,900
So, in terms of all of these values, wait, this is not its uniform.

921
00:53:10,000 --> 00:53:11,500
These are uniforms not verdict.

922
00:53:11,500 --> 00:53:12,100
AB, there we go.

923
00:53:13,700 --> 00:53:16,500
So now we just need for our basic Z bias program.

924
00:53:17,300 --> 00:53:19,800
We now need to just pass these down again.

925
00:53:19,800 --> 00:53:23,500
These are actually in the fragment Shader but we're asking for them in

926
00:53:23,500 --> 00:53:27,200
the program in general, because you asked for uniform locations for

927
00:53:27,200 --> 00:53:28,900
the final compiled result.

928
00:53:29,000 --> 00:53:33,200
Not for individual shaders, but rather for the linked version.

929
00:53:34,200 --> 00:53:34,700
So we want

930
00:53:34,900 --> 00:53:35,900
We're all of this stuff.

931
00:53:35,900 --> 00:53:37,900
Is we want to know where the camera p is.

932
00:53:41,900 --> 00:53:43,700
We want to know where the fog direction is.

933
00:53:45,600 --> 00:53:50,700
Oops, we want to know where the fog start distances.

934
00:53:52,200 --> 00:53:55,100
And we want to know where the fog and the distance is.

935
00:54:00,900 --> 00:54:03,300
And that's really all we're doing here.

936
00:54:05,900 --> 00:54:10,700
And then once we've got these obviously, I need to have these

937
00:54:16,700 --> 00:54:18,200
In here, so we can store them.

938
00:54:31,500 --> 00:54:32,000
There we go.

939
00:54:34,000 --> 00:54:37,500
Once we've got these, we just need to actually set them to something.

940
00:54:38,100 --> 00:54:42,100
So when we actually turn on that program and you can see us doing

941
00:54:42,100 --> 00:54:44,300
that, right here, we've set up.

942
00:54:44,300 --> 00:54:50,200
One uniform are sorry to uniforms one for the Matrix, one for the, the

943
00:54:50,200 --> 00:54:51,000
texture, sampler.

944
00:54:51,200 --> 00:54:55,200
All we really need to do now is just set them all to stuff that we

945
00:54:55,200 --> 00:54:56,400
want, right?

946
00:54:57,600 --> 00:55:02,600
And the hardest part here is just us, it's going to be the routing is

947
00:55:02,600 --> 00:55:04,400
figuring out how to get that information in here.

948
00:55:19,300 --> 00:55:21,400
alright, so here's our

949
00:55:23,500 --> 00:55:24,600
our problem, right?

950
00:55:25,000 --> 00:55:26,300
We don't know where that's going.

951
00:55:30,600 --> 00:55:33,800
Fog direction is what a1f I think.

952
00:55:35,300 --> 00:55:36,600
No, it was a 3F.

953
00:55:46,800 --> 00:55:48,200
This is the one f.

954
00:55:50,300 --> 00:55:51,600
Start distance.

955
00:56:08,100 --> 00:56:12,200
And as you can see, our problem here is like we need some way to

956
00:56:12,200 --> 00:56:14,500
figure out where this stuff is going to come from now.

957
00:56:18,800 --> 00:56:19,600
if you've ever,

958
00:56:23,900 --> 00:56:27,900
If you've ever tried doing like, say like you have like a television

959
00:56:29,300 --> 00:56:35,700
or something, I guess maybe you have telephone cable or something like

960
00:56:35,700 --> 00:56:36,100
this.

961
00:56:47,400 --> 00:56:52,500
in the real world, I've seen, like, for example, the apartment that I

962
00:56:52,500 --> 00:56:53,300
live in now,

963
00:56:54,900 --> 00:56:59,000
And they I see this very commonly now in New they build new buildings

964
00:56:59,000 --> 00:56:59,400
in Seattle.

965
00:56:59,400 --> 00:56:59,900
I think this

966
00:57:00,000 --> 00:57:03,600
How they build them because they figure everyone has like a fancy

967
00:57:03,600 --> 00:57:04,900
entertainment center or something.

968
00:57:06,800 --> 00:57:12,200
So what they do is you've got some kind of a conduit through the wall

969
00:57:12,700 --> 00:57:16,200
that wires run and you know maybe the telephone cable runs through

970
00:57:16,200 --> 00:57:19,900
there in some cases or stuff like that or in a television station of

971
00:57:19,900 --> 00:57:21,700
the HDMI cable runs through or whatever.

972
00:57:23,500 --> 00:57:26,600
And it's very hard to like get stuff through there, right?

973
00:57:26,600 --> 00:57:29,000
It's hard to like put things through these conduits.

974
00:57:30,600 --> 00:57:34,400
So, one of the things that you'll often do is, if you already have one

975
00:57:34,500 --> 00:57:38,700
cable through there, what you'll do is you unplug that cable and you

976
00:57:38,700 --> 00:57:43,900
tie two or three cables to it, then you pull it through and it pulls

977
00:57:43,900 --> 00:57:45,000
all the cables through.

978
00:57:46,000 --> 00:57:49,300
And then now you've got more cables going through the conduit, right?

979
00:57:49,500 --> 00:57:52,700
It's kind of this, like, cheap way to thread things through

980
00:57:55,700 --> 00:57:59,100
And so if you want to do something like that, or use string or

981
00:57:59,100 --> 00:58:01,700
whatever, you know, what you're doing is based saying, well I've

982
00:58:01,700 --> 00:58:02,900
already got one.

983
00:58:03,000 --> 00:58:04,900
I already know how to get one thing through here.

984
00:58:05,100 --> 00:58:06,500
It's already through there.

985
00:58:06,600 --> 00:58:09,800
Let me just like sort of piggyback these other things on the route it

986
00:58:09,800 --> 00:58:10,400
took.

987
00:58:11,100 --> 00:58:12,900
So I don't have to try and figure it out again.

988
00:58:12,900 --> 00:58:15,300
Like open up this wall and lay a new thing or whatever.

989
00:58:15,300 --> 00:58:17,000
I'm just going to use its path, right?

990
00:58:18,500 --> 00:58:19,900
That's not too similar to the situation.

991
00:58:19,900 --> 00:58:20,800
We have right now.

992
00:58:21,700 --> 00:58:24,400
So what we're looking at here in our render group, right?

993
00:58:25,300 --> 00:58:31,300
Is we have this idea of a clip rect which now is not really a

994
00:58:31,300 --> 00:58:32,100
cliprect, right?

995
00:58:32,100 --> 00:58:34,400
And you can see we've got a note here to rename it specifically

996
00:58:34,400 --> 00:58:35,700
because it's become more than a clip.

997
00:58:35,700 --> 00:58:40,300
Rect you can see that we've got essentially the conduit that we want

998
00:58:40,300 --> 00:58:45,000
is this thing because it's like for example where we get our camera

999
00:58:45,000 --> 00:58:48,600
transform and obviously the fog setup and the camera transform, our

1000
00:58:48,600 --> 00:58:49,900
kind of intimately linked together.

1001
00:58:49,900 --> 00:58:51,300
They're going to be basically the same

1002
00:58:51,600 --> 00:58:52,100
Thing.

1003
00:58:53,500 --> 00:58:55,900
right, so when you look at that,

1004
00:58:57,600 --> 00:59:01,100
It starts to make some good sense that render entry clip.

1005
00:59:01,100 --> 00:59:07,200
Rect is kind of more like a setup for this textured quads, right?

1006
00:59:08,100 --> 00:59:09,700
It's more like what this is going to do.

1007
00:59:10,700 --> 00:59:13,800
And what's interesting about that is, at this point, it's starting to

1008
00:59:13,800 --> 00:59:18,800
look more like we really don't need these two things, right?

1009
00:59:19,000 --> 00:59:23,300
It looks more like we don't really need the clip rect and the these to

1010
00:59:23,300 --> 00:59:27,100
be different because the only reason that we had to specify clip Rex

1011
00:59:27,600 --> 00:59:31,400
in the first place as separate entities, a separate entries into the

1012
00:59:31,400 --> 00:59:34,700
render stream was because we had to specify one primitive of time like

1013
00:59:34,700 --> 00:59:36,200
one bitmap at a time, right?

1014
00:59:36,500 --> 00:59:40,000
But if we wanted to now, we could simplify all of this stuff down.

1015
00:59:40,500 --> 00:59:44,700
By just saying the render entry textured quads is the only thing that

1016
00:59:44,700 --> 00:59:46,400
we really specify to the renderer.

1017
00:59:47,600 --> 00:59:52,200
For the most part, we've got this rendering to blend Target situation

1018
00:59:52,200 --> 00:59:53,400
that we are not really using any more.

1019
00:59:53,400 --> 00:59:56,900
We might bring it back at some point, but for the moment and even if

1020
00:59:56,900 --> 00:59:59,600
we did, it's so infrequent it could specify everything it needed in

1021
00:59:59,600 --> 01:00:00,000
there as well.

1022
01:00:00,500 --> 01:00:03,500
It starts to become a question about like, wait a minute, why are we

1023
01:00:03,500 --> 01:00:06,300
even having this as a separate thing, right?

1024
01:00:06,300 --> 01:00:08,400
Look, why do we even have all this nonsense?

1025
01:00:08,400 --> 01:00:12,100
That's happening to check whether clip brakes are the same and all

1026
01:00:12,100 --> 01:00:12,700
this stuff.

1027
01:00:12,800 --> 01:00:15,600
This is all just cruft at this point, right?

1028
01:00:15,600 --> 01:00:19,500
It's all just crufty and instead what we could do is just have this

1029
01:00:19,500 --> 01:00:23,600
batch which is this thing right here just specify everything it needs

1030
01:00:23,700 --> 01:00:26,400
and then the batch is just very large, right?

1031
01:00:27,800 --> 01:00:31,600
Because the batches are very large now they're like there's only two

1032
01:00:31,600 --> 01:00:32,000
of them.

1033
01:00:32,200 --> 01:00:36,200
So I mean large is relative term, but I mean, in terms of how many of

1034
01:00:36,200 --> 01:00:37,700
our Primitives we fit per batch.

1035
01:00:37,700 --> 01:00:38,700
It's a large number

1036
01:00:46,100 --> 01:00:48,200
So what I think I'm going to do first is I'm going to piggyback this

1037
01:00:48,200 --> 01:00:49,100
information on the clip.

1038
01:00:49,100 --> 01:00:52,800
Rect and then what I'm going to do is ask the cliprect by merging it

1039
01:00:52,800 --> 01:00:55,300
up into the render at your text, would quads.

1040
01:00:55,700 --> 01:00:59,200
And then we'll be able to simplify that system even further, which is

1041
01:00:59,200 --> 01:01:02,400
always good news, in my opinion, right?

1042
01:01:03,500 --> 01:01:08,800
I also don't know, is any of this stuff, is any of this stuff anything

1043
01:01:08,800 --> 01:01:10,400
anymore at all?

1044
01:01:10,700 --> 01:01:16,100
I don't think it actually is, for example, does anyone even use these?

1045
01:01:17,000 --> 01:01:17,800
I'm curious.

1046
01:01:27,900 --> 01:01:28,700
The answer is no.

1047
01:01:34,400 --> 01:01:39,700
The answer is still, no, this is all just a craft that we had in there

1048
01:01:39,700 --> 01:01:41,300
at one point and got rid of right.

1049
01:01:48,300 --> 01:01:50,500
And so you can kind of see where we're going with this, right?

1050
01:01:50,500 --> 01:01:53,500
And eventually, what that means is our renderer can be simplified

1051
01:01:53,500 --> 01:01:57,400
dramatically at that point because we'll end up having probably just

1052
01:01:57,400 --> 01:02:01,600
only like, two things like particle systems and bitmaps, right?

1053
01:02:03,000 --> 01:02:05,200
Or we could even just have one thing.

1054
01:02:05,300 --> 01:02:09,400
And in that thing, it just has a Boolean that says, are you changing

1055
01:02:09,400 --> 01:02:13,900
textures per entity or not, right?

1056
01:02:13,900 --> 01:02:17,300
Because that's the only difference now between our between

1057
01:02:17,500 --> 01:02:21,800
What are particles might want to do and what our batches of regular

1058
01:02:21,800 --> 01:02:24,100
quads would want to do is, it's just that, right?

1059
01:02:24,100 --> 01:02:25,600
That's the only real difference there.

1060
01:02:26,800 --> 01:02:27,300
So, yeah.

1061
01:02:32,700 --> 01:02:33,200
All right.

1062
01:02:38,600 --> 01:02:41,500
So let's take a look at the stuff here and by the way there's another

1063
01:02:41,500 --> 01:02:44,800
kind of nice aspect of specifying these separate from the viewing

1064
01:02:44,800 --> 01:02:49,300
Matrix in addition to just it being a little bit easier to understand

1065
01:02:49,300 --> 01:02:51,400
for us so that we don't have to try and reverse engineer stuff from a

1066
01:02:51,400 --> 01:02:54,700
matrix that may have had multiple things amongst into it.

1067
01:02:55,000 --> 01:02:57,600
We can be more direct and it's easier to determine whether we've done

1068
01:02:57,600 --> 01:02:58,400
it correctly or not.

1069
01:02:59,500 --> 01:02:59,600
In.

1070
01:03:00,000 --> 01:03:03,000
That's at a Simplicity there's actually another benefit which is that.

1071
01:03:03,000 --> 01:03:06,100
Now we can view the world from different directions and see the fog as

1072
01:03:06,100 --> 01:03:07,500
it was coming from another Direction.

1073
01:03:08,400 --> 01:03:11,300
And again, that helps with the debug view, it means that we can leave

1074
01:03:11,300 --> 01:03:11,800
the fog.

1075
01:03:11,800 --> 01:03:16,800
So that the fog always comes from the game camera even as we view from

1076
01:03:16,800 --> 01:03:17,700
a debug camera.

1077
01:03:17,700 --> 01:03:20,800
So that allows us again to have that dual specification, which eases

1078
01:03:20,800 --> 01:03:24,200
development, so that we can inspect things more closely without

1079
01:03:24,200 --> 01:03:25,500
changing them as respecting.

1080
01:03:25,500 --> 01:03:27,800
We're not going to Heisenberg them as we go.

1081
01:03:28,500 --> 01:03:29,000
So,

1082
01:03:34,900 --> 01:03:37,900
Let's go ahead and put in what we need here, right?

1083
01:03:37,900 --> 01:03:41,600
We need a camera P fog Direction.

1084
01:03:43,600 --> 01:03:49,600
Bugs, start distance and a fog and distance.

1085
01:03:49,900 --> 01:03:51,700
That's what we actually need in the clip.

1086
01:03:51,700 --> 01:03:52,400
Rect

1087
01:03:54,800 --> 01:03:58,500
and then in here, what I'm going to do is say okay, those are all

1088
01:03:58,500 --> 01:04:04,200
going to come from the the current cliprect what we want here, where

1089
01:04:04,200 --> 01:04:06,500
we've got this clip, rect index.

1090
01:04:06,900 --> 01:04:07,800
And we pull that out.

1091
01:04:07,800 --> 01:04:12,300
What I'd like to do is just always have that around, right?

1092
01:04:13,200 --> 01:04:16,500
So you know I want to be able to access that cliprect it in its

1093
01:04:16,500 --> 01:04:19,000
entirety here and I think I can do that.

1094
01:04:19,800 --> 01:04:20,700
Pretty clearly there.

1095
01:04:21,500 --> 01:04:24,200
So then what I'm going to do is I'm going to in here I'm going to just

1096
01:04:24,400 --> 01:04:26,200
Ask for this pieces and will soon.

1097
01:04:26,200 --> 01:04:27,100
We'll fill them in.

1098
01:04:29,000 --> 01:04:29,900
In the render group.

1099
01:04:30,600 --> 01:04:32,400
So there's that fog Direction.

1100
01:04:32,900 --> 01:04:33,400
Fuck spits.

1101
01:04:33,400 --> 01:04:36,500
I'm just pulling them out of this structure here.

1102
01:04:36,900 --> 01:04:37,600
Like, so,

1103
01:04:41,700 --> 01:04:42,300
There we go.

1104
01:04:43,700 --> 01:04:45,800
And I think that's all good.

1105
01:04:45,800 --> 01:04:49,000
Now, we don't have any of these uniform functions and that's fine.

1106
01:04:49,700 --> 01:04:53,700
We'll just grab them from core ARB and I think we're mostly we should

1107
01:04:53,700 --> 01:04:57,100
hopefully be roughly at the end of the stuff that we need from crore.

1108
01:04:57,100 --> 01:04:59,700
Because now we're pretty much able to specify most of the things that

1109
01:04:59,700 --> 01:05:00,800
we want to specify.

1110
01:05:05,100 --> 01:05:06,600
Famous last words, I guess.

1111
01:05:10,700 --> 01:05:14,300
Let's jump down here, do do there we go.

1112
01:05:15,200 --> 01:05:17,500
So you can see all these things here.

1113
01:05:17,600 --> 01:05:20,000
I don't really care too much about

1114
01:05:22,500 --> 01:05:23,400
Some of these.

1115
01:05:23,700 --> 01:05:27,000
But let's just grab these guys here.

1116
01:05:35,500 --> 01:05:37,000
and this guy,

1117
01:05:43,800 --> 01:05:46,600
I sense that usually maps to the way you would way we would most

1118
01:05:46,600 --> 01:05:47,600
easily call them.

1119
01:05:48,100 --> 01:05:49,600
Those are the ones that I'll pick.

1120
01:06:05,900 --> 01:06:07,700
and then in here, we'll just do type

1121
01:06:10,000 --> 01:06:11,000
and I think we're good.

1122
01:06:12,100 --> 01:06:15,200
Alright, so here we've got these other ones.

1123
01:06:15,200 --> 01:06:16,600
We've got the 1f.

1124
01:06:16,800 --> 01:06:18,900
We've got the oops.

1125
01:06:18,900 --> 01:06:20,200
That's not where I want to do that.

1126
01:06:20,500 --> 01:06:21,200
Want to do it here.

1127
01:06:24,900 --> 01:06:27,700
So, GL uniform, what f?

1128
01:06:29,500 --> 01:06:33,600
And then I had to fv3 FV and 4fv, right?

1129
01:06:38,700 --> 01:06:40,000
What is the complaint here?

1130
01:06:41,400 --> 01:06:42,400
Redefinition.

1131
01:06:44,100 --> 01:06:45,400
Oh, we've already got four.

1132
01:06:45,400 --> 01:06:45,900
Fe

1133
01:06:48,100 --> 01:06:49,700
We do already have for Fe never mind.

1134
01:06:49,700 --> 01:06:50,400
So I don't need that.

1135
01:06:50,400 --> 01:06:54,700
When I just need those other in between ones.

1136
01:07:04,300 --> 01:07:05,000
All right.

1137
01:07:05,400 --> 01:07:08,100
And it wants to know how many vectors we have in that array.

1138
01:07:08,100 --> 01:07:09,700
And in this case, we have one

1139
01:07:13,800 --> 01:07:16,800
Cannot convert, argument to type float.

1140
01:07:19,800 --> 01:07:20,100
Yeah.

1141
01:07:22,200 --> 01:07:24,500
And so now we just need to actually get those.

1142
01:07:25,300 --> 01:07:28,300
So what we want to do here is again just where we're doing.

1143
01:07:28,300 --> 01:07:31,400
Our, we will get proc address stuff.

1144
01:07:31,600 --> 01:07:33,200
Oops, that's in winter, too.

1145
01:07:46,200 --> 01:07:47,600
Not there, there it is.

1146
01:07:50,400 --> 01:07:54,900
So, what we want to do here is just use our little helper macro there,

1147
01:07:54,900 --> 01:07:55,700
which is very handy.

1148
01:07:55,700 --> 01:07:57,100
I should transform all of these to that.

1149
01:07:57,100 --> 01:08:01,800
Now, that we've got, it's much better than the alternative one we were

1150
01:08:01,800 --> 01:08:02,400
doing there.

1151
01:08:03,500 --> 01:08:04,800
I think that's everything.

1152
01:08:06,100 --> 01:08:08,800
So now we'll have those functions and we should be able to call them.

1153
01:08:09,300 --> 01:08:12,000
Of course, we're still not setting those value to everything, but at

1154
01:08:12,000 --> 01:08:15,400
least we are passing everything through the pipeline properly.

1155
01:08:16,300 --> 01:08:19,000
So now the question is just well, when we're actually pushing one of

1156
01:08:19,000 --> 01:08:22,800
these things on, we need to actually have some way of storing it.

1157
01:08:23,200 --> 01:08:25,200
And so, the push setup situation here.

1158
01:08:28,700 --> 01:08:31,300
Needs to actually store these so you can see where we're doing our

1159
01:08:31,300 --> 01:08:32,899
kind of group situation here.

1160
01:08:37,200 --> 01:08:40,399
And updating our Rex this stuff has to now keep all of that

1161
01:08:40,399 --> 01:08:41,100
information.

1162
01:08:41,800 --> 01:08:44,899
Now what I want to do here is I want to prepare myself for the

1163
01:08:44,899 --> 01:08:45,300
changes.

1164
01:08:45,300 --> 01:08:47,500
I'm going to make two just to keep things simple.

1165
01:08:48,100 --> 01:08:50,899
So the render entry cliprect, you can see that it's got a bunch of

1166
01:08:50,899 --> 01:08:52,000
information in here.

1167
01:08:53,500 --> 01:08:57,500
What I'd like to do is rather than storing all of this stuff, the way

1168
01:08:57,500 --> 01:08:58,600
that we're storing it now.

1169
01:09:00,000 --> 01:09:02,700
I'd rather go ahead and just have the render entry clip.

1170
01:09:02,700 --> 01:09:06,100
Brackets stealth just store the last one you pushed on there.

1171
01:09:06,700 --> 01:09:11,600
So in other words, rather than all of this stuff, I'd rather just have

1172
01:09:12,000 --> 01:09:20,800
render entry cliprect have like, last set up on it, like so.

1173
01:09:21,899 --> 01:09:25,700
Something like this and then I'd like everyone to just use that,

1174
01:09:26,500 --> 01:09:27,100
right?

1175
01:09:28,000 --> 01:09:33,200
So when you specify one of these and it actually works, right, you

1176
01:09:33,200 --> 01:09:37,399
will go okay, whatever the last one was, I'm sorry, whatever.

1177
01:09:37,399 --> 01:09:42,500
This one was, we're going to remember that next time.

1178
01:09:44,500 --> 01:09:48,000
Okay, so that's what I want to have actually happened here and then

1179
01:09:48,000 --> 01:09:51,200
this stuff doesn't actually occur at all right.

1180
01:09:51,200 --> 01:09:55,700
That stuff just doesn't happen and off you go, right?

1181
01:09:56,800 --> 01:10:00,500
So then it's going to cause a bunch of work for us obviously, but

1182
01:10:00,500 --> 01:10:01,300
that's okay.

1183
01:10:01,800 --> 01:10:03,600
And so, you can kind of end.

1184
01:10:03,600 --> 01:10:07,200
We may need the, the current cliprect index made still need to stay

1185
01:10:07,200 --> 01:10:07,400
there.

1186
01:10:07,400 --> 01:10:10,300
Actually, let me just see for temporarily.

1187
01:10:14,700 --> 01:10:15,600
Take a quick look.

1188
01:10:18,400 --> 01:10:19,400
Yeah, so we're going to need.

1189
01:10:19,400 --> 01:10:21,500
We also need the current effective index.

1190
01:10:22,100 --> 01:10:23,000
That's got to stay there.

1191
01:10:23,800 --> 01:10:28,100
Okay, so here we got like last render Target right now.

1192
01:10:28,100 --> 01:10:32,200
What I'm basically saying is that, you know, since that's on here, I'm

1193
01:10:32,200 --> 01:10:38,600
just going to say the group last wrecked or whatever it is.

1194
01:10:38,600 --> 01:10:39,800
Render Target index.

1195
01:10:42,800 --> 01:10:46,000
And similarly group last wrecked.

1196
01:10:46,700 --> 01:10:49,500
Dot prod, right?

1197
01:10:49,900 --> 01:10:51,400
Oops, it's not a strict.

1198
01:10:51,400 --> 01:10:54,300
What is it last set up?

1199
01:10:57,500 --> 01:11:00,200
so you can always just pass whatever the last thing was, if you didn't

1200
01:11:00,200 --> 01:11:02,400
want to change it which is really all these are for

1201
01:11:03,800 --> 01:11:07,700
And then I just got to finish doing that exact same thing, right?

1202
01:11:07,700 --> 01:11:11,500
So okay, so when you call puts it up here, you can see that we're sort

1203
01:11:11,500 --> 01:11:15,400
of passing to push set up since we store them in the max, I'm going to

1204
01:11:15,400 --> 01:11:19,000
change this to actually just passing them since that's what's actually

1205
01:11:19,000 --> 01:11:19,700
stored.

1206
01:11:23,800 --> 01:11:26,200
so instead of the width and the height, we're just going to do you

1207
01:11:26,200 --> 01:11:27,700
know, Min Min

1208
01:11:29,000 --> 01:11:31,200
Max Max.

1209
01:11:35,700 --> 01:11:39,900
And then when we do push set up everywhere, instead of passing those

1210
01:11:39,900 --> 01:11:45,700
bounds, I'm going to actually pass the the Min and Max properly.

1211
01:11:46,800 --> 01:11:48,100
So here's the Minix.

1212
01:11:54,500 --> 01:11:55,600
Here's the max axe.

1213
01:11:59,100 --> 01:11:59,500
Oops.

1214
01:12:00,300 --> 01:12:00,800
Then why?

1215
01:12:04,400 --> 01:12:05,300
Max Max.

1216
01:12:05,300 --> 01:12:05,700
Why?

1217
01:12:16,900 --> 01:12:17,400
There we go.

1218
01:12:19,100 --> 01:12:21,300
And that's like,

1219
01:12:22,900 --> 01:12:24,500
Makes this pretty easy as well.

1220
01:12:25,000 --> 01:12:29,900
So inside push set up here, this is always going to be last setup Min

1221
01:12:29,900 --> 01:12:32,000
X Plus setup.

1222
01:12:32,500 --> 01:12:35,200
And why set up Max X?

1223
01:12:35,900 --> 01:12:37,100
That's set up Max?

1224
01:12:37,100 --> 01:12:39,400
Why setup?

1225
01:12:41,800 --> 01:12:45,600
I'm going to Target index and same here.

1226
01:13:04,800 --> 01:13:05,300
Okay.

1227
01:13:07,400 --> 01:13:09,100
So, that should be good.

1228
01:13:10,000 --> 01:13:10,900
It's not

1229
01:13:13,200 --> 01:13:14,500
Oh, it's the wrecked.

1230
01:13:14,500 --> 01:13:15,000
I see.

1231
01:13:20,000 --> 01:13:22,300
And really we could just pass the rec directly here.

1232
01:13:22,300 --> 01:13:25,400
In fact we probably should be doing that and not sure why we're not.

1233
01:13:27,500 --> 01:13:28,800
Maybe I'll change that as well.

1234
01:13:36,600 --> 01:13:42,800
So now all that stuff like flows through properly, which is good, but

1235
01:13:42,800 --> 01:13:44,600
again it's still a little cumbersome.

1236
01:13:44,600 --> 01:13:46,900
So I think what we want to do is just clean this up a little bit

1237
01:13:46,900 --> 01:13:47,500
further.

1238
01:13:48,600 --> 01:13:54,900
And probably say something, like, when you push a set up on you, just

1239
01:13:54,900 --> 01:13:57,500
give it the new setup, right?

1240
01:13:58,500 --> 01:14:00,600
And so you can see where I'm going with this.

1241
01:14:00,700 --> 01:14:03,200
This render every clip, rect is just going to end up being a setup

1242
01:14:03,200 --> 01:14:05,300
struct basically pretty soon here.

1243
01:14:08,500 --> 01:14:11,500
So it'll be something like this where you just say push set up and you

1244
01:14:11,500 --> 01:14:13,400
get the new set up, right?

1245
01:14:14,100 --> 01:14:17,800
And then we do this push we just to say you know we're going to push

1246
01:14:17,800 --> 01:14:19,000
this render element on.

1247
01:14:19,000 --> 01:14:21,500
We get back a render entry cliprect.

1248
01:14:21,800 --> 01:14:25,300
We've got a I guess it maintains you know like these next pointers and

1249
01:14:25,300 --> 01:14:26,100
stuff, right?

1250
01:14:26,100 --> 01:14:31,100
But everything else we just set ourselves so you can kind of see like

1251
01:14:31,100 --> 01:14:32,800
there's you know everything else in here.

1252
01:14:32,800 --> 01:14:37,000
Besides the next pointer is just set by us and it's set by us right in

1253
01:14:37,000 --> 01:14:37,400
here.

1254
01:14:40,000 --> 01:14:43,500
So really all we have to do in this case is is update.

1255
01:14:43,500 --> 01:14:46,200
A couple things and you can see what those things are.

1256
01:14:46,400 --> 01:14:49,800
So here's the the last wrecked stuff, right?

1257
01:14:56,900 --> 01:14:58,200
Here's the last wreck stuff.

1258
01:14:59,200 --> 01:14:59,800
Here's the max.

1259
01:15:00,000 --> 01:15:00,700
Target Index.

1260
01:15:00,700 --> 01:15:02,300
This can now be done here.

1261
01:15:08,800 --> 01:15:11,500
So, we need to update these two, but all the rest of this stuff is

1262
01:15:11,500 --> 01:15:13,100
actually not that way, right?

1263
01:15:13,100 --> 01:15:14,600
All of this stuff can go.

1264
01:15:17,300 --> 01:15:20,000
And so, really, all we need to do here is just say that.

1265
01:15:21,900 --> 01:15:22,400
Right.

1266
01:15:23,600 --> 01:15:25,000
And then everything is fine.

1267
01:15:25,600 --> 01:15:30,200
So I think that is a more saying we do this because you can see API

1268
01:15:30,200 --> 01:15:30,500
wise.

1269
01:15:30,500 --> 01:15:32,400
Now, it's going to be really easy for people to update.

1270
01:15:32,400 --> 01:15:33,200
Only what they want.

1271
01:15:33,200 --> 01:15:34,300
I'll show you that in a second.

1272
01:15:36,900 --> 01:15:40,700
In fact, I guess they could do it in an even easier way than that.

1273
01:15:40,700 --> 01:15:42,100
Now that I think about it.

1274
01:15:43,700 --> 01:15:44,200
Yeah.

1275
01:15:44,200 --> 01:15:46,300
Okay, so I'm I don't even need this.

1276
01:15:46,700 --> 01:15:49,100
So what I can really do here is just say

1277
01:15:53,400 --> 01:15:55,900
Well, no, you're going to have to do that copy, either way.

1278
01:16:04,000 --> 01:16:06,000
I'll think about this a little more carefully, but

1279
01:16:08,100 --> 01:16:09,400
Let's just leave it like this for now.

1280
01:16:09,700 --> 01:16:11,900
So, here's the first set of call, we're going to pass the new setup

1281
01:16:11,900 --> 01:16:12,300
in.

1282
01:16:12,600 --> 01:16:15,400
There's a way to avoid a double copy here, but we don't really have to

1283
01:16:15,400 --> 01:16:16,300
worry about the moment.

1284
01:16:18,600 --> 01:16:20,000
And you talk about that a little bit later.

1285
01:16:21,900 --> 01:16:25,900
So, all we really need to do is grab out this render Target from the

1286
01:16:25,900 --> 01:16:30,000
new set up, so we can take a look, well, or the wrecked and Target

1287
01:16:30,000 --> 01:16:30,600
index.

1288
01:16:32,200 --> 01:16:32,700
There we go.

1289
01:16:33,600 --> 01:16:36,500
So, we make sure we track that Max and now push setup, just always

1290
01:16:36,500 --> 01:16:37,600
works that way.

1291
01:16:38,300 --> 01:16:40,800
So, the reason I thought this was interesting is because now, what we

1292
01:16:40,800 --> 01:16:44,300
can do is, we can say, oh, okay, so you've got a render entry clip.

1293
01:16:44,300 --> 01:16:49,900
Rect is the new setup is just going to be whatever the old setup was

1294
01:16:51,300 --> 01:16:52,400
That's what you're going to start with.

1295
01:16:52,600 --> 01:16:56,300
And then you just modify the parts you actually care about, right?

1296
01:17:11,100 --> 01:17:11,300
Right.

1297
01:17:11,300 --> 01:17:14,000
So now you just say, okay, it's whatever the last setup was, here's

1298
01:17:14,000 --> 01:17:16,600
the new setup and then when I push the setup, I just say there it is.

1299
01:17:16,800 --> 01:17:19,100
So then I don't have to like, specify any of that stuff.

1300
01:17:19,100 --> 01:17:20,200
And it's just nice and clean.

1301
01:17:20,300 --> 01:17:24,400
I just do whatever the new setup is that I actually wanted, right.

1302
01:17:27,400 --> 01:17:28,900
And I think that's really much easier.

1303
01:17:29,300 --> 01:17:31,500
So then here, same thing applies, right?

1304
01:17:31,700 --> 01:17:36,400
I go and I need to set this situation where I was setting the new

1305
01:17:36,400 --> 01:17:37,500
clip, rect up or whatever.

1306
01:17:37,500 --> 01:17:38,000
It was.

1307
01:17:38,900 --> 01:17:40,200
Speaking of that, is there a reason?

1308
01:17:44,600 --> 01:17:45,500
Is that push up again?

1309
01:17:46,600 --> 01:17:47,200
Anyway.

1310
01:17:47,400 --> 01:17:49,600
So when I'm actually doing the setup here, same thing would apply

1311
01:17:49,600 --> 01:17:50,100
here, right?

1312
01:17:50,100 --> 01:17:53,200
When I push the setup, instead of specifying, all these last set of

1313
01:17:53,200 --> 01:17:57,000
things, this is the only thing I'm actually trying to modify, right?

1314
01:17:58,200 --> 01:17:59,800
So, what I can do here is again,

1315
01:18:00,000 --> 01:18:00,800
Back, same thing.

1316
01:18:03,100 --> 01:18:07,200
When I go to actually create this, I can just say, oh okay, I just

1317
01:18:07,200 --> 01:18:07,800
need that forward.

1318
01:18:07,800 --> 01:18:10,500
Transform is the only thing that I'm actually trying to set here.

1319
01:18:10,700 --> 01:18:15,300
So when I do that set up, I'll just do a render entry cliprect new

1320
01:18:15,300 --> 01:18:19,100
setup and that new setup will just equal the old setup.

1321
01:18:20,300 --> 01:18:26,600
Then the new setups projection is going to Loops want to do.

1322
01:18:28,800 --> 01:18:32,100
It's going to equal this one that I computed, and then I just push it

1323
01:18:32,100 --> 01:18:32,200
on

1324
01:18:33,600 --> 01:18:34,300
And off I go.

1325
01:18:36,000 --> 01:18:36,500
Right.

1326
01:18:41,700 --> 01:18:43,300
The same exact thing is true here.

1327
01:18:45,100 --> 01:18:46,500
For pushing the render Target.

1328
01:18:56,700 --> 01:18:57,800
And then, I just push on.

1329
01:19:01,300 --> 01:19:01,900
The new value.

1330
01:19:04,000 --> 01:19:07,100
And I think that's really all there is to it.

1331
01:19:07,300 --> 01:19:10,100
Now that means we can even use the utility functions here now which we

1332
01:19:10,100 --> 01:19:10,700
couldn't do before.

1333
01:19:10,700 --> 01:19:18,300
So that's actually kind of nice to this is a rectangle to of some

1334
01:19:18,300 --> 01:19:18,900
kind.

1335
01:19:20,300 --> 01:19:22,300
Right rectangle, to eye.

1336
01:19:27,300 --> 01:19:29,700
Do we have any rectangle with tight calls for these guys?

1337
01:19:36,500 --> 01:19:39,500
Wrecked min max.

1338
01:19:40,300 --> 01:19:42,500
So we don't have one of those for rectangle to eye.

1339
01:19:42,500 --> 01:19:49,600
It looks like because we had like all of these right Min dim min max

1340
01:19:50,000 --> 01:19:52,700
we had all of these but we didn't do them for the to II version.

1341
01:19:53,000 --> 01:19:55,800
Unfortunately, which we should write.

1342
01:19:55,800 --> 01:19:56,700
We should have those

1343
01:20:01,000 --> 01:20:02,800
and so, all of these I guess are just

1344
01:20:04,100 --> 01:20:05,000
Going to be.

1345
01:20:13,100 --> 01:20:13,800
That.

1346
01:20:16,100 --> 01:20:20,500
And I don't know that we ever did a vector type for for integers,

1347
01:20:20,800 --> 01:20:21,200
right?

1348
01:20:21,300 --> 01:20:22,700
We don't have like a V2.

1349
01:20:22,700 --> 01:20:25,600
I do we or do we not?

1350
01:20:25,600 --> 01:20:26,100
We don't.

1351
01:20:27,100 --> 01:20:28,700
So those are going to have to

1352
01:20:32,700 --> 01:20:34,200
I feel a little bit more clever.

1353
01:20:34,200 --> 01:20:37,800
So these are going to have to take like Min Ax Men.

1354
01:20:37,800 --> 01:20:38,400
Why?

1355
01:20:39,700 --> 01:20:44,000
Max x max y, although typically

1356
01:20:48,000 --> 01:20:48,300
Yeah.

1357
01:20:55,900 --> 01:20:56,500
There we go.

1358
01:20:58,600 --> 01:20:59,900
And again, all of

1359
01:21:00,000 --> 01:21:00,900
You were just going to be.

1360
01:21:02,600 --> 01:21:03,500
Completely Road.

1361
01:21:13,000 --> 01:21:16,100
I don't know that we want Center Half Dome here because since its

1362
01:21:16,100 --> 01:21:20,000
integer half versions or a little bit squirrely, ER because it's like

1363
01:21:20,000 --> 01:21:22,500
how did you want around the half and stuff like that.

1364
01:21:22,600 --> 01:21:24,900
So you probably don't want to fuss with that quite yet.

1365
01:21:28,300 --> 01:21:29,900
So we have someone actually using it.

1366
01:21:32,700 --> 01:21:36,300
So now we can actually have sort of a more standardized way of talking

1367
01:21:36,300 --> 01:21:37,600
about these, which is nice.

1368
01:21:37,900 --> 01:21:42,100
And in here, we could just say new set of wrecked equals recommend

1369
01:21:42,100 --> 01:21:46,200
dim, and then pass all this junk to it.

1370
01:21:46,800 --> 01:21:47,900
That we had

1371
01:21:52,400 --> 01:21:53,100
And off again.

1372
01:21:53,700 --> 01:21:57,000
So what is this is render group?

1373
01:22:02,800 --> 01:22:05,000
And what is this?

1374
01:22:05,000 --> 01:22:06,400
This is for the first one.

1375
01:22:07,200 --> 01:22:10,500
So, in this case, what we should be able to do again, is just push on

1376
01:22:12,100 --> 01:22:20,300
render entry cliprect initial setup and that initial setup proj can be

1377
01:22:20,300 --> 01:22:26,400
the identity, the initial setup wrecked and be erect Min.

1378
01:22:26,800 --> 01:22:28,300
Jim of 00.

1379
01:22:31,900 --> 01:22:33,400
Excellent pixel height.

1380
01:22:37,200 --> 01:22:40,600
Not that anyone uses this but there it is initialized.

1381
01:22:40,700 --> 01:22:44,700
Anyway, so we still in theory won't see anything because everything is

1382
01:22:44,700 --> 01:22:48,800
all black, since all of that fog stuff is not set and properly it yet,

1383
01:22:49,100 --> 01:22:52,100
but we just basically reorganize the code to make it so that multiple

1384
01:22:52,100 --> 01:22:54,100
things can trivially flow through everyone now.

1385
01:22:54,900 --> 01:22:57,600
So now we can preserve those fog values.

1386
01:22:59,900 --> 01:23:04,800
Okay, so I would assume that we would want to do here.

1387
01:23:14,100 --> 01:23:17,400
Is set the fog of something that doesn't do anything if you don't want

1388
01:23:17,400 --> 01:23:18,700
it too, right?

1389
01:23:20,300 --> 01:23:26,600
So in theory, if the fog start distance was you know one and the fog

1390
01:23:26,600 --> 01:23:27,500
and distance

1391
01:23:29,900 --> 01:23:37,100
Was to or something like this or even if it's just 0 and 1, then if

1392
01:23:37,100 --> 01:23:40,000
the you know, the other things in here will be cleared.

1393
01:23:40,400 --> 01:23:44,800
So the dot product with the fog direction will always produce nothing

1394
01:23:46,400 --> 01:23:49,800
that should prevent the fog from kicking in and we should be able to

1395
01:23:49,800 --> 01:23:52,200
debug that down if it doesn't work yet.

1396
01:23:52,700 --> 01:23:56,400
So all I did, there was just make sure that the fog distance had some

1397
01:23:56,400 --> 01:23:59,000
actual range because I think the reason we're seeing Zero there

1398
01:23:59,500 --> 01:23:59,800
because remember,

1399
01:24:00,000 --> 01:24:00,700
In initial setup.

1400
01:24:00,700 --> 01:24:03,200
Now we've analyzed, everything is 0 that will flow through the entire

1401
01:24:03,200 --> 01:24:03,500
time.

1402
01:24:03,500 --> 01:24:06,800
Every time we put a clip, rect on all of that stuff will be fine,

1403
01:24:06,800 --> 01:24:07,000
right?

1404
01:24:07,000 --> 01:24:10,400
We'll just always copy those same values which are just 0 for the

1405
01:24:10,400 --> 01:24:12,400
composition and 0 for the fog Direction.

1406
01:24:12,700 --> 01:24:13,600
What that means

1407
01:24:15,600 --> 01:24:18,900
is that every time we do that dot product will get nothing back.

1408
01:24:19,000 --> 01:24:22,400
So we get 0 which means that as long as the fog start distance is at

1409
01:24:22,400 --> 01:24:27,200
zero or greater, we should never see any fog except when fog and

1410
01:24:27,200 --> 01:24:30,700
distance is also 0 because then that range has shrunk to 0 and we're

1411
01:24:30,700 --> 01:24:33,600
going to be dividing by 0, which is undefined, which is why I think we

1412
01:24:33,600 --> 01:24:34,400
were getting black there.

1413
01:24:35,000 --> 01:24:38,700
So any value here at all, doesn't really matter what it is, as long as

1414
01:24:38,700 --> 01:24:43,200
it's not the same as the fog, start distance, would be fine, right?

1415
01:24:44,200 --> 01:24:46,300
And so that's all we needed to make sure we were doing.

1416
01:24:47,500 --> 01:24:49,900
Okay, so our next question is just all right we've got the fog.

1417
01:24:49,900 --> 01:24:52,600
Start distance, plug-in in distance set up, probably.

1418
01:24:52,600 --> 01:24:54,000
So now you can have no fog.

1419
01:24:54,100 --> 01:24:56,500
What if we now want to actually turn the fog on?

1420
01:24:56,600 --> 01:24:56,800
Right?

1421
01:24:56,800 --> 01:24:59,600
So we actually want to have some way of putting some actual fog in

1422
01:24:59,600 --> 01:24:59,900
there.

1423
01:25:01,100 --> 01:25:01,500
Jimmy.

1424
01:25:02,900 --> 01:25:07,300
So when we do set orthographic, for example, we know that we don't

1425
01:25:07,300 --> 01:25:13,700
want to have any of this fog in here, I'm going to put this up here so

1426
01:25:13,700 --> 01:25:14,800
we can fuss with it.

1427
01:25:17,100 --> 01:25:20,500
I'm going to say like okay so when we're doing Ortho we want the fog

1428
01:25:20,500 --> 01:25:25,800
direction to be 0 just so we never get any fog.

1429
01:25:27,400 --> 01:25:32,400
And regardless of what we do, obviously we want the new setups camera

1430
01:25:32,400 --> 01:25:32,800
pee.

1431
01:25:36,800 --> 01:25:38,900
To be reflected properly.

1432
01:25:38,900 --> 01:25:39,500
So

1433
01:25:43,400 --> 01:25:44,400
We want that to come through.

1434
01:25:45,600 --> 01:25:48,900
So now, the only question is fog Direction, and so what we want to do

1435
01:25:48,900 --> 01:25:54,100
here is again, save that fog direction, we want that camera Z, it's

1436
01:25:54,100 --> 01:25:54,600
like this.

1437
01:25:57,700 --> 01:25:59,900
We want to measure along the negative Z axis, right?

1438
01:25:59,900 --> 01:26:03,600
So the Z axis comes back at the viewer, we want to fog to get larger

1439
01:26:03,600 --> 01:26:04,600
as it goes into the screen.

1440
01:26:04,800 --> 01:26:08,900
So we want the fog direction to be along the negative Z axis, right?

1441
01:26:08,900 --> 01:26:11,600
So now we'd actually be measuring the fog correctly when we're not in

1442
01:26:11,600 --> 01:26:15,000
an orthographic scenario, and we can also set the fog.

1443
01:26:15,000 --> 01:26:18,700
Start, and end here to something and play around with it, right?

1444
01:26:19,100 --> 01:26:22,900
If we want to, we could say, well the fog starts 10 away and ends, you

1445
01:26:22,900 --> 01:26:23,300
know.

1446
01:26:25,800 --> 01:26:27,700
50, you a, I don't know making this up.

1447
01:26:28,700 --> 01:26:30,900
I guess we'll let's do it shorter so we can see it better.

1448
01:26:36,800 --> 01:26:40,100
and now we're actually passing down some real values and so if you

1449
01:26:40,100 --> 01:26:42,400
look at what's going on there, you can actually see now that we're

1450
01:26:42,400 --> 01:26:42,900
getting

1451
01:26:46,000 --> 01:26:49,300
The fog applied exactly, as we would expect it to be applied in terms

1452
01:26:49,300 --> 01:26:49,800
of distance.

1453
01:26:49,800 --> 01:26:52,200
Anyway, you can see that the first layer down gets a little bit.

1454
01:26:52,200 --> 01:26:56,500
The next are done gets more and then, finally get a lot more and, you

1455
01:26:56,500 --> 01:26:59,800
know, maybe that's not, you know, maybe we want that a little closer.

1456
01:27:00,000 --> 01:27:04,200
No, like maybe the fog start distance should be more like eight, so

1457
01:27:04,200 --> 01:27:06,200
that the fog is a little bit more pronounced there.

1458
01:27:06,200 --> 01:27:06,800
Who knows?

1459
01:27:07,200 --> 01:27:10,700
Maybe this should be back a bit more, I'm not sure, but you can get

1460
01:27:10,700 --> 01:27:11,100
the idea.

1461
01:27:11,100 --> 01:27:13,700
Now we've got the ability to set that distance big fog and you could

1462
01:27:13,700 --> 01:27:14,600
tune it however you want.

1463
01:27:14,600 --> 01:27:19,300
I'm sure we'll tune it when we're further along and fussing with sort

1464
01:27:19,300 --> 01:27:22,700
of like policy Graphics sort of stuff but you can see that's working

1465
01:27:22,700 --> 01:27:23,600
exactly as we want.

1466
01:27:23,600 --> 01:27:26,500
Now the only thing we don't have at the moment is really any idea what

1467
01:27:26,500 --> 01:27:27,700
the fog color is.

1468
01:27:30,100 --> 01:27:33,200
So, if you take a look at in our render group here, you notice, we're

1469
01:27:33,200 --> 01:27:37,300
not specifying any color information for the fog and that's a bit of a

1470
01:27:37,300 --> 01:27:37,800
problem.

1471
01:27:37,800 --> 01:27:40,400
I think we just forgot to do that in here.

1472
01:27:40,400 --> 01:27:42,400
We're not specifying any fog color.

1473
01:27:42,700 --> 01:27:44,700
We need some way of controlling the color of the fuck.

1474
01:27:44,900 --> 01:27:48,700
We could hard-code the color of the fog certainly, right?

1475
01:27:48,700 --> 01:27:52,700
We could you know in here we can certainly set the color of the fog.

1476
01:27:52,700 --> 01:27:55,000
To be something specific if that's what people prefer.

1477
01:27:57,500 --> 01:27:59,500
But in general I don't think we want that because

1478
01:28:01,100 --> 01:28:01,500
Hmm.

1479
01:28:03,700 --> 01:28:07,900
We may want the fog to change with depending on like whether you're

1480
01:28:07,900 --> 01:28:09,800
inside or outside or stuff like that.

1481
01:28:10,500 --> 01:28:14,700
So even though I can sort of tune it in here to a specific file color,

1482
01:28:14,700 --> 01:28:19,200
I think we want this to be an actual value passed down to the Shader

1483
01:28:19,200 --> 01:28:20,600
from the external code.

1484
01:28:21,000 --> 01:28:24,700
So I think we want something like this, where the pixel Shader

1485
01:28:24,700 --> 01:28:28,600
actually gets a fog color Vector for from the exterior code.

1486
01:28:28,600 --> 01:28:31,500
And then, that way, we can set it to whatever it is that we actually

1487
01:28:31,500 --> 01:28:32,100
want.

1488
01:28:32,200 --> 01:28:33,300
Now, remember, this is not an

1489
01:28:33,500 --> 01:28:34,200
RGB value.

1490
01:28:34,200 --> 01:28:38,100
This is an actual linear color, linear light value and that's

1491
01:28:38,100 --> 01:28:39,100
important to remember.

1492
01:28:39,500 --> 01:28:43,200
So we kind of have to keep that in mind but yeah that's that's really

1493
01:28:43,200 --> 01:28:44,900
all we need to worry about there.

1494
01:28:46,600 --> 01:28:51,000
And similarly in here we can sort of set that fog color to something.

1495
01:28:51,300 --> 01:28:54,200
I don't know what we want it to be set to

1496
01:28:56,100 --> 01:28:57,800
But let's just say, it's something like that.

1497
01:28:59,400 --> 01:29:02,700
It's also not clear to me that we really want the fog to have Alpha.

1498
01:29:03,400 --> 01:29:07,000
So it might be better to just call this a V3 and then when we're doing

1499
01:29:07,000 --> 01:29:13,700
this lerp, we could say that, you know the result color Alpha value

1500
01:29:14,000 --> 01:29:20,000
is, oh he's going to be, you know, maybe something like this where we

1501
01:29:20,000 --> 01:29:20,900
just say, you know,

1502
01:29:21,800 --> 01:29:25,200
We're going to take the modulated color here.

1503
01:29:28,700 --> 01:29:30,200
And we're going to.

1504
01:29:31,800 --> 01:29:33,700
Only blend part of it.

1505
01:29:36,500 --> 01:29:44,900
So the alpha value flows through unchanged and it's only the RGB I

1506
01:29:44,900 --> 01:29:46,900
think you can do this too, right?

1507
01:29:48,700 --> 01:29:49,600
Yeah, I'm doing it right here.

1508
01:29:50,300 --> 01:29:56,800
It's the RGB will come through looped but the result the a will come

1509
01:29:56,800 --> 01:29:57,200
through.

1510
01:29:57,200 --> 01:29:59,800
The alpha value will come through unmodified, right?

1511
01:30:00,700 --> 01:30:01,800
So something like that.

1512
01:30:02,900 --> 01:30:03,200
Okay.

1513
01:30:03,200 --> 01:30:08,800
So then the fog color is is just a multiplier on the on the r g and B.

1514
01:30:09,500 --> 01:30:12,100
I'm sorry, just a looped value for the r g and B.

1515
01:30:14,400 --> 01:30:18,200
And that I think makes a lot more sense to me.

1516
01:30:19,500 --> 01:30:22,700
So, okay, so that means in here, we need a fog color.

1517
01:30:28,300 --> 01:30:30,300
And we also now need some way.

1518
01:30:32,600 --> 01:30:35,400
Of setting that into the opengl pipeline.

1519
01:30:35,400 --> 01:30:38,300
So again, that's going to have to be in here, right?

1520
01:30:38,800 --> 01:30:41,600
We've got the fog Direction and now we also want a fog color

1521
01:30:44,800 --> 01:30:45,500
Like so.

1522
01:30:47,200 --> 01:30:50,100
And the way that we set it up is going to be exactly the same.

1523
01:30:50,900 --> 01:30:52,500
So it's just going to be one of these.

1524
01:30:56,800 --> 01:30:57,500
And off we go.

1525
01:31:05,000 --> 01:31:06,600
So that's really all that it takes.

1526
01:31:07,200 --> 01:31:10,700
And in theory now we can set the font color soon.

1527
01:31:10,700 --> 01:31:18,100
As I do bug, our Shader connector with 3 component, Vector float,

1528
01:31:22,200 --> 01:31:23,300
What are you talking about?

1529
01:31:25,000 --> 01:31:27,800
Show me that Shader again, sir.

1530
01:31:34,000 --> 01:31:34,400
Ah,

1531
01:31:35,900 --> 01:31:36,300
there we go.

1532
01:31:41,600 --> 01:31:44,800
So now we can set that fog color programmatically as well.

1533
01:31:45,300 --> 01:31:50,400
And so you know, if I want to I can do that at run time now because

1534
01:31:50,400 --> 01:31:53,100
that's getting set here in the the render group.

1535
01:31:54,000 --> 01:31:57,900
So you know, if we wanted to to, you know, you can imagine it having

1536
01:31:57,900 --> 01:32:01,200
colored so there's a like, a purpley fog, right?

1537
01:32:02,200 --> 01:32:06,600
And I don't know what our clear color is right now, to be completely

1538
01:32:06,600 --> 01:32:10,900
honest with you, I don't really remember what

1539
01:32:11,100 --> 01:32:13,900
We're doing, we're wise.

1540
01:32:15,000 --> 01:32:16,800
So our background color is this.

1541
01:32:16,800 --> 01:32:19,100
So I'm just curious if I set it to the same thing as the background

1542
01:32:19,100 --> 01:32:20,200
color, what would happen?

1543
01:32:21,300 --> 01:32:23,900
Should sort of appear to fade out a little Boop's.

1544
01:32:30,400 --> 01:32:33,900
So that should be kind of more of a fading out to the background sort

1545
01:32:33,900 --> 01:32:34,500
of a thing.

1546
01:32:35,000 --> 01:32:40,100
Let me go ahead and see where is the fog and distance.

1547
01:32:40,100 --> 01:32:40,700
There it is.

1548
01:32:42,900 --> 01:32:45,200
I'ma set that fade really close.

1549
01:32:45,900 --> 01:32:48,300
That doesn't seem to quite work.

1550
01:32:48,300 --> 01:32:50,800
So I'm a little so I wonder if that's

1551
01:32:54,500 --> 01:32:58,600
I would like to know why that's doing that.

1552
01:32:58,600 --> 01:32:59,800
This is another one of those color.

1553
01:33:00,000 --> 01:33:04,400
Started to be spatial sort of issues here.

1554
01:33:08,200 --> 01:33:11,100
So you can kind of see that that should be fading out to the same

1555
01:33:11,100 --> 01:33:14,300
color as the clear color but it isn't.

1556
01:33:14,300 --> 01:33:17,000
So I want to double-check, I want to see what's happening with the

1557
01:33:17,000 --> 01:33:17,600
clear color.

1558
01:33:17,600 --> 01:33:20,600
So when I say clear, what actually happens there,

1559
01:33:22,100 --> 01:33:25,300
It just sets the clear color to that color, okay?

1560
01:33:25,900 --> 01:33:27,800
So what happens with that clear color

1561
01:33:39,000 --> 01:33:41,800
So it sets the clear Colour keyer and writes it into the frame.

1562
01:33:41,800 --> 01:33:43,900
Buffer at the question is, does it do?

1563
01:33:44,800 --> 01:33:50,700
Does it do an srgb transform on that clear, right.

1564
01:33:51,400 --> 01:33:53,700
This is always the annoying part about srgb.

1565
01:33:53,700 --> 01:33:57,300
Is the stupid like fact that it's never you always have to like dig

1566
01:33:57,300 --> 01:34:00,100
through the doctor figure out who's supposed to be doing srgb

1567
01:34:00,100 --> 01:34:03,000
transforms and who's not and what state is, blah, blah blah.

1568
01:34:03,900 --> 01:34:06,500
You want just two things which is like, here's a clear.

1569
01:34:07,900 --> 01:34:11,000
It's going to write these values in and here's a clear that's, you

1570
01:34:11,000 --> 01:34:12,100
know, going to go through srgb.

1571
01:34:12,300 --> 01:34:12,700
I guess.

1572
01:34:12,700 --> 01:34:14,400
I ask you really probably only want one.

1573
01:34:18,400 --> 01:34:19,000
Maybe not.

1574
01:34:24,200 --> 01:34:26,100
Hard to say, anyway.

1575
01:34:31,600 --> 01:34:33,300
So, I don't know which one of those is doing.

1576
01:34:36,000 --> 01:34:40,500
I would like to know, I don't know, we have our srgb, linearize stuff

1577
01:34:40,500 --> 01:34:41,100
in here.

1578
01:34:41,600 --> 01:34:43,600
And so one of the things I could do is

1579
01:34:46,200 --> 01:34:49,000
Take it from srgb to linear to see if that needed to happen.

1580
01:34:49,000 --> 01:34:53,900
I could also do the opposite which is to take it back which would be

1581
01:34:53,900 --> 01:34:55,000
the square rooting version.

1582
01:34:56,700 --> 01:34:59,100
so, let me just see what happens if I do either of those

1583
01:35:05,100 --> 01:35:07,200
So that's with srgb linearize.

1584
01:35:08,500 --> 01:35:11,600
On, which doesn't seem to have really changed it.

1585
01:35:18,500 --> 01:35:19,800
Oops, that's not a thing.

1586
01:35:36,700 --> 01:35:40,500
Yeah, so I'm not really sure what's going on there, if I square rooted

1587
01:35:40,500 --> 01:35:44,300
the values because that's what's actually going to happen to the

1588
01:35:44,300 --> 01:35:44,600
values.

1589
01:35:44,600 --> 01:35:48,000
Inside that Shader, is there going to be applied in linear light

1590
01:35:48,000 --> 01:35:49,400
space, and they're going to come out?

1591
01:35:49,500 --> 01:35:53,100
So if the other one wasn't linear, then what I would need to do here

1592
01:35:53,100 --> 01:35:55,900
is I need to like fun, linearize, which I don't actually have.

1593
01:35:57,000 --> 01:35:58,200
So, I would need

1594
01:36:04,100 --> 01:36:06,500
I would need like linear to srgb.

1595
01:36:08,600 --> 01:36:09,200
Right.

1596
01:36:11,400 --> 01:36:16,900
I don't know if I have doing that, but something like this.

1597
01:36:20,700 --> 01:36:22,500
Oh wait but I'm changing the wrong one here.

1598
01:36:22,500 --> 01:36:23,700
I didn't actually want to change that one.

1599
01:36:23,700 --> 01:36:28,400
That's the one that's actually affecting the clear color, my bad.

1600
01:36:29,000 --> 01:36:30,600
It's actually this one I want to do.

1601
01:36:33,600 --> 01:36:35,200
so, if I want to square these

1602
01:36:36,400 --> 01:36:37,900
Let's just see what each of these would do.

1603
01:36:42,600 --> 01:36:43,200
There we go.

1604
01:36:43,900 --> 01:36:45,100
So that is exactly what it was.

1605
01:36:45,100 --> 01:36:46,000
Its srgb.

1606
01:36:47,600 --> 01:36:48,900
Oh srgb.

1607
01:36:52,900 --> 01:36:54,200
So basically what that tells us.

1608
01:36:56,400 --> 01:37:00,400
Is that guess that, that clear does not go through srgb?

1609
01:37:06,700 --> 01:37:08,400
I should really start labeling these.

1610
01:37:09,000 --> 01:37:11,400
So that we know, since we have to figure it out.

1611
01:37:11,400 --> 01:37:20,900
Every time probably better to have these, this color is not

1612
01:37:22,400 --> 01:37:27,600
In linear space is in srgb space directly.

1613
01:37:28,700 --> 01:37:31,000
That seems to be the case, right?

1614
01:37:31,400 --> 01:37:32,700
Because if that's the clear color,

1615
01:37:41,000 --> 01:37:44,400
These right here are getting square rooted on the way out to go, back

1616
01:37:44,400 --> 01:37:49,800
to srgb, right there getting squared on the way in and square rooted

1617
01:37:49,800 --> 01:37:51,500
on the way out there getting square rooted.

1618
01:37:54,600 --> 01:37:55,700
Right here, right?

1619
01:37:55,700 --> 01:38:01,300
Because here is where the value is getting used the fog color and so

1620
01:38:01,300 --> 01:38:03,500
everything gets squared in an instant.

1621
01:38:03,600 --> 01:38:08,300
Again in the case where we actually have real srgb, it's not which is

1622
01:38:08,300 --> 01:38:09,300
actually on this card.

1623
01:38:09,500 --> 01:38:12,800
It's not really squaring exactly it's a, not quite a squared curve.

1624
01:38:12,800 --> 01:38:16,500
It's a 2.2 gamma curve or the some junk on the end.

1625
01:38:18,600 --> 01:38:22,200
So you know but approximately speaking it's squaring it and then

1626
01:38:22,200 --> 01:38:23,900
Square rooting it on the way out.

1627
01:38:24,000 --> 01:38:26,800
So what we know is that square root, right?

1628
01:38:26,800 --> 01:38:29,500
Puts it back into srgb color space.

1629
01:38:30,100 --> 01:38:33,300
So it's linear here and then the square root puts it into srgb color

1630
01:38:33,300 --> 01:38:35,100
space since I had to square.

1631
01:38:37,500 --> 01:38:39,000
The value for my fog color.

1632
01:38:41,200 --> 01:38:45,000
That suggests to me that in order to match the clear color, that's

1633
01:38:45,000 --> 01:38:47,100
just the me that the clear colors being applied directly.

1634
01:38:47,200 --> 01:38:50,500
So the clear does not go through even if the frame buffer was set to

1635
01:38:50,500 --> 01:38:52,300
srgb, is the clear?

1636
01:38:52,300 --> 01:38:54,600
Does not actually obey that setting.

1637
01:38:54,700 --> 01:38:56,400
The clear just writes the value directly.

1638
01:38:56,400 --> 01:38:59,600
Without going through the srgb transform first.

1639
01:39:00,000 --> 01:39:00,500
Right?

1640
01:39:01,800 --> 01:39:03,100
So happy birthday.

1641
01:39:03,600 --> 01:39:04,400
That's how that goes.

1642
01:39:05,400 --> 01:39:08,300
So what we could do is lock these two colors together to which

1643
01:39:08,300 --> 01:39:13,400
probably is a good idea for now borrowing you know, later on decisions

1644
01:39:13,400 --> 01:39:14,600
that we might want to do.

1645
01:39:15,100 --> 01:39:16,500
If I just said okay.

1646
01:39:17,900 --> 01:39:19,800
Let's go up here to the clear call.

1647
01:39:20,000 --> 01:39:25,500
When we set that clear color, I'm going to set the group, oops.

1648
01:39:31,200 --> 01:39:35,000
Let's set up at that point so that everyone after this they will get a

1649
01:39:35,000 --> 01:39:35,800
fog color.

1650
01:39:36,500 --> 01:39:39,300
That is just the squared version of whatever these are.

1651
01:39:46,100 --> 01:39:46,600
I like that.

1652
01:39:46,600 --> 01:39:47,100
Like so.

1653
01:39:49,100 --> 01:39:54,600
Okay, so now maybe possibly in theory but I'm not 100% sure.

1654
01:39:54,600 --> 01:39:58,200
It doesn't seem to be quite still exactly correct.

1655
01:39:58,400 --> 01:39:59,000
Right.

1656
01:40:09,700 --> 01:40:13,000
And it right now you can also see we're not since that there's only

1657
01:40:13,000 --> 01:40:17,600
one last setup and we don't change it for the to the fog is always

1658
01:40:17,600 --> 01:40:19,100
sort of doing its thing here.

1659
01:40:19,100 --> 01:40:21,200
I don't know why is that doing black?

1660
01:40:23,800 --> 01:40:24,700
Did I mess something up?

1661
01:40:24,700 --> 01:40:25,200
When I

1662
01:40:41,000 --> 01:40:42,800
what did I do wrong there?

1663
01:40:42,800 --> 01:40:46,600
I think maybe this clear, is this clear happening?

1664
01:40:46,600 --> 01:40:47,900
When is this clear happening?

1665
01:41:06,400 --> 01:41:06,800
Aha.

1666
01:41:06,900 --> 01:41:09,600
It's happening before the set camera transform.

1667
01:41:09,700 --> 01:41:11,800
So that's not great, right?

1668
01:41:12,400 --> 01:41:15,700
We would want that to happen for it at the moment.

1669
01:41:16,600 --> 01:41:19,100
Just kind of a drink it way of setting that right.

1670
01:41:19,100 --> 01:41:19,600
There we go.

1671
01:41:22,600 --> 01:41:24,800
All right, so that seems quite good now.

1672
01:41:26,100 --> 01:41:26,400
Right.

1673
01:41:26,400 --> 01:41:28,500
That fogging feels feels quite good.

1674
01:41:30,800 --> 01:41:32,500
It goes out to the background properly.

1675
01:41:32,500 --> 01:41:33,400
You can kind of see it.

1676
01:41:33,400 --> 01:41:38,200
It sort of Fades, everybody out exactly the way that we would want.

1677
01:41:38,400 --> 01:41:41,900
And, you know, it's distance wise, it's set pretty wonky right now.

1678
01:41:41,900 --> 01:41:45,600
It's just exaggerated but that's, you know, not a huge deal.

1679
01:41:48,000 --> 01:41:51,300
So, we've kind of got this start distance and distance here, and then

1680
01:41:51,300 --> 01:41:54,500
we're setting those inside the camera to be, you know, these values

1681
01:41:54,500 --> 01:41:54,900
here.

1682
01:41:55,300 --> 01:41:55,700
So

1683
01:41:55,800 --> 01:41:58,800
Probably, you know, wants to be a little bit more generous with the

1684
01:41:58,800 --> 01:41:59,400
fog.

1685
01:42:00,200 --> 01:42:03,600
I'm just guessing because you probably don't want to well I don't

1686
01:42:03,600 --> 01:42:03,700
know.

1687
01:42:03,700 --> 01:42:05,000
Maybe you do want them out that much.

1688
01:42:05,000 --> 01:42:07,800
I feel like these levels should probably be further down one way or

1689
01:42:07,800 --> 01:42:09,900
the other, but that's neither here nor there I guess.

1690
01:42:11,100 --> 01:42:13,800
So, all right, so now we've got our fog in there.

1691
01:42:13,800 --> 01:42:15,800
And that's exactly what I wanted to do today.

1692
01:42:15,800 --> 01:42:17,000
So that's all good.

1693
01:42:17,700 --> 01:42:20,300
So the other question is we still got a little time, live my life,

1694
01:42:20,500 --> 01:42:23,500
like probably like, 15 minutes left.

1695
01:42:23,500 --> 01:42:24,100
Right.

1696
01:42:30,900 --> 01:42:33,400
So, we have another question to address here.

1697
01:42:35,800 --> 01:42:36,900
Which has to do with Alpha.

1698
01:42:43,400 --> 01:42:44,300
This was kind of interesting.

1699
01:42:50,800 --> 01:42:52,500
We probably won't have time to do it in 15 minutes.

1700
01:42:52,500 --> 01:42:53,800
We can least start talking about

1701
01:42:54,900 --> 01:42:59,000
So the other thing that we want to be able to do is if the hero was

1702
01:42:59,400 --> 01:43:06,500
on, you know, one level of the game and you know, there was something,

1703
01:43:06,600 --> 01:43:11,900
there was another level above him as he was maybe moving up and down.

1704
01:43:11,900 --> 01:43:15,900
That was kind of interesting and you didn't want that level you want a

1705
01:43:15,900 --> 01:43:18,200
little too kind of fade in as it came down.

1706
01:43:20,500 --> 01:43:23,500
Sort of like an alpha out as it comes up, right?

1707
01:43:24,400 --> 01:43:24,800
So like

1708
01:43:27,100 --> 01:43:31,100
we probably want to create a stairwell again, but the hero can kind of

1709
01:43:31,100 --> 01:43:37,300
hop down to demonstrate this a little bit more.

1710
01:43:39,100 --> 01:43:40,400
Let me go ahead and stop that case.

1711
01:43:44,300 --> 01:43:45,100
So we can see it.

1712
01:43:53,200 --> 01:43:56,800
So what I want to do here is like, you know, we still don't really

1713
01:43:56,800 --> 01:43:59,000
have our room band stuff set up at all properly.

1714
01:43:59,000 --> 01:44:01,200
So we kind of need to do that pretty soon here.

1715
01:44:02,300 --> 01:44:05,900
But we want this guy to be able to hop down these cubes, right?

1716
01:44:06,200 --> 01:44:09,700
And right now, there's no way for him to get down there at all

1717
01:44:10,100 --> 01:44:15,000
because, and besides the fact that the camera we don't have proper

1718
01:44:15,000 --> 01:44:16,100
camera bound stuff set up.

1719
01:44:16,100 --> 01:44:20,100
So we don't track where he is properly, which will do probably next

1720
01:44:20,100 --> 01:44:20,400
weekend.

1721
01:44:22,800 --> 01:44:25,200
We don't have any cubes from to hop down here, right?

1722
01:44:25,200 --> 01:44:28,400
We'd like to have cubes from to hop down here so that he can get to

1723
01:44:28,400 --> 01:44:29,200
the next level.

1724
01:44:29,700 --> 01:44:32,800
I had pulled those out sort of because of I thought sorting why, as we

1725
01:44:32,800 --> 01:44:35,600
weren't gonna be able to handle it, maybe we can't handle it now

1726
01:44:35,600 --> 01:44:38,700
because we've actually done the full 3d stuff visually.

1727
01:44:38,700 --> 01:44:40,800
I don't know that that's necessarily true, but it might be true.

1728
01:44:41,200 --> 01:44:42,700
So we might as well try it.

1729
01:44:44,800 --> 01:44:45,400
And see.

1730
01:44:48,300 --> 01:44:50,400
Let's take a look here.

1731
01:44:52,300 --> 01:44:53,400
Ad standard room.

1732
01:44:55,400 --> 01:44:59,200
because before you know we had sort of an effect, you know what, let

1733
01:44:59,200 --> 01:44:59,800
me let me take

1734
01:45:00,000 --> 01:45:05,800
It's out temporarily as well as so that sort of note you know room

1735
01:45:05,800 --> 01:45:06,200
noise.

1736
01:45:06,200 --> 01:45:08,900
You can kind of see here now is this is what it would look like if all

1737
01:45:08,900 --> 01:45:11,300
of the cubes were leveled.

1738
01:45:12,700 --> 01:45:15,000
So I want to see if I can put some cubes in there.

1739
01:45:15,000 --> 01:45:18,000
It's like a stairwell, he can kind of go down, right?

1740
01:45:20,800 --> 01:45:21,500
and,

1741
01:45:25,300 --> 01:45:28,000
We sort of had code in here.

1742
01:45:28,700 --> 01:45:30,500
Here's the right hole.

1743
01:45:31,500 --> 01:45:32,200
If

1744
01:45:34,200 --> 01:45:39,900
You know, we wanted to make this stuff still happen, we just need

1745
01:45:39,900 --> 01:45:43,500
these Z values to drop down a bit, right?

1746
01:45:43,500 --> 01:45:45,500
Or to go up a bit, one of the other

1747
01:45:52,400 --> 01:45:55,800
and so I feel like in here, you know, we should be able to kind of do

1748
01:45:55,800 --> 01:45:57,000
something like

1749
01:46:11,400 --> 01:46:15,400
Looking at this, you got this kind of P offset thing.

1750
01:46:15,400 --> 01:46:20,100
So if I was to go ahead and say that inside the right hole, the P

1751
01:46:20,100 --> 01:46:24,100
offset for these things is going to be some random thing.

1752
01:46:26,700 --> 01:46:27,800
Let me just see what that does.

1753
01:46:27,800 --> 01:46:28,500
It should give us.

1754
01:46:28,500 --> 01:46:31,300
Yeah, so you can see like now we've got some cubes in here and they've

1755
01:46:31,300 --> 01:46:33,100
got random Heights.

1756
01:46:33,100 --> 01:46:36,100
So maybe I go now and say like, okay let's make the height be

1757
01:46:36,100 --> 01:46:38,400
proportional to

1758
01:46:38,800 --> 01:46:42,900
The offset Y, and it starts at, you know, it starts at negative 2

1759
01:46:42,900 --> 01:46:43,200
there.

1760
01:46:43,200 --> 01:46:44,500
So I'll just say, like, okay,

1761
01:46:47,500 --> 01:46:55,500
The offset y, plus 2, is the start of this thing and I'm just going to

1762
01:46:55,900 --> 01:46:59,200
take that value as a floating point value, which so that will go from

1763
01:46:59,200 --> 01:47:00,600
zero to four or whatever.

1764
01:47:01,600 --> 01:47:03,200
We'll just multiply it by something.

1765
01:47:03,200 --> 01:47:04,600
I don't know what it should be yet.

1766
01:47:05,200 --> 01:47:07,700
And I guess maybe I want it to go downward to, I guess.

1767
01:47:07,700 --> 01:47:09,100
Now, I think about it, I'm not sure.

1768
01:47:10,500 --> 01:47:11,000
But you can see.

1769
01:47:11,000 --> 01:47:13,700
Now I'm starting to get a little bit of a stairwell situation going in

1770
01:47:13,700 --> 01:47:14,000
there.

1771
01:47:15,800 --> 01:47:16,900
Great that I can hop on.

1772
01:47:18,600 --> 01:47:19,300
Right?

1773
01:47:20,000 --> 01:47:23,200
So let me just take a look at that.

1774
01:47:26,000 --> 01:47:30,500
So yeah, I don't want a random bilateral anymore.

1775
01:47:30,500 --> 01:47:35,100
I just want the offset to be the offset that it is.

1776
01:47:37,200 --> 01:47:40,700
So there's a stairwell going up and I guess I sort of want this

1777
01:47:40,700 --> 01:47:42,200
stairwell to go down.

1778
01:47:42,200 --> 01:47:47,800
Probably, I guess for our present purposes, I mean, doesn't really

1779
01:47:47,800 --> 01:47:48,300
matter.

1780
01:47:48,300 --> 01:47:49,200
But, you know,

1781
01:47:54,900 --> 01:47:58,800
So there's a stairwell going down, I don't think it goes down enough.

1782
01:48:00,400 --> 01:48:01,700
Not sure, maybe it does.

1783
01:48:06,600 --> 01:48:07,400
I guess it does.

1784
01:48:08,800 --> 01:48:09,700
I take it back.

1785
01:48:19,300 --> 01:48:22,500
All right, so now in theory this dude can hop down here.

1786
01:48:24,100 --> 01:48:26,700
You can see we still have problems because he's too tall.

1787
01:48:28,500 --> 01:48:32,200
For his location but you know that might be something we can fix.

1788
01:48:34,500 --> 01:48:37,100
You can kind of see that he hopped down there, right?

1789
01:48:37,500 --> 01:48:38,400
And he ended up here.

1790
01:48:38,400 --> 01:48:40,200
We need those to be like a little lower.

1791
01:48:40,800 --> 01:48:41,800
We also need the room.

1792
01:48:41,900 --> 01:48:42,500
I feel like the room.

1793
01:48:42,500 --> 01:48:44,400
Height needs to be, you know, we could do

1794
01:48:50,400 --> 01:48:54,600
What we could do in this case is we could say is this one?

1795
01:48:54,800 --> 01:48:56,200
Is this value here?

1796
01:48:56,200 --> 01:48:59,200
A probably the height of these cubes.

1797
01:48:59,200 --> 01:49:02,500
I'm interested to know if I can just shorten these cubes up a bit.

1798
01:49:07,700 --> 01:49:10,700
So that's maybe a little bit easier for us to deal with, right?

1799
01:49:10,700 --> 01:49:13,400
You can kind of see what's going on there, just as a sort of

1800
01:49:13,400 --> 01:49:14,400
placeholder situation.

1801
01:49:15,100 --> 01:49:19,400
So let me go ahead and kind of move these guys down a little bit more.

1802
01:49:21,500 --> 01:49:22,000
All right.

1803
01:49:24,000 --> 01:49:27,400
So now that's a little bit more sensible, do poops.

1804
01:49:32,500 --> 01:49:33,800
Amanda Castle my way.

1805
01:49:35,000 --> 01:49:36,400
Dude, get out of there.

1806
01:49:36,400 --> 01:49:36,800
Okay.

1807
01:49:36,800 --> 01:49:38,100
Come on guys, come over here.

1808
01:49:39,500 --> 01:49:42,200
All right, good stupid familiars.

1809
01:49:45,100 --> 01:49:45,500
Here we go.

1810
01:49:49,700 --> 01:49:50,200
All right.

1811
01:49:53,000 --> 01:49:55,400
So basically what we're talking about here, and I guess this is

1812
01:49:55,400 --> 01:49:55,800
goodbye.

1813
01:49:55,800 --> 01:49:57,300
This is where I can end it for today.

1814
01:50:00,000 --> 01:50:02,300
So, that's probably still a little bit too much.

1815
01:50:02,700 --> 01:50:05,500
Basically, we're talking about here is just getting the alpha in place

1816
01:50:06,000 --> 01:50:12,300
so that we can so that we can make this process work.

1817
01:50:12,400 --> 01:50:16,400
So, when you hop down here, you want that top floor to Alpha out,

1818
01:50:16,600 --> 01:50:17,100
right?

1819
01:50:18,900 --> 01:50:19,400
And

1820
01:50:22,200 --> 01:50:24,700
Because once you're down here, you can't see yourself at all.

1821
01:50:24,900 --> 01:50:28,300
And as you as that level kind of comes up towards you, we want it to

1822
01:50:28,300 --> 01:50:29,100
Alpha out.

1823
01:50:29,200 --> 01:50:31,400
So that's the next effect that we want to put in there.

1824
01:50:32,000 --> 01:50:35,400
And that's not really as much a Shader effect as it is a render pass

1825
01:50:35,400 --> 01:50:35,800
effect.

1826
01:50:35,800 --> 01:50:41,200
But, you know, we can, we can sort of cover how that works tomorrow.

1827
01:50:41,500 --> 01:50:42,400
This is kind of funny.

1828
01:50:45,100 --> 01:50:49,300
It's funny looking at something from this angle when the Sprites stay

1829
01:50:49,300 --> 01:50:52,600
at their other angle, kind of cracks me up a little bit.

1830
01:50:53,200 --> 01:50:53,900
Alright, anyway,

1831
01:50:56,800 --> 01:50:58,500
So yeah, so that's all we're talking about here.

1832
01:50:58,500 --> 01:50:59,800
I'm going to go ahead and put in this.

1833
01:51:00,000 --> 01:51:03,200
Minimization back because it makes it easier to see the grid.

1834
01:51:04,800 --> 01:51:08,800
Yeah, so yeah, I think that's where I'll stop for today.

1835
01:51:08,800 --> 01:51:13,000
And then next weekend, we'll start tackling the room based stuff and

1836
01:51:13,100 --> 01:51:15,200
and clean up sort of some of this Dimension stuff.

1837
01:51:15,200 --> 01:51:18,900
So that we'll have all that working properly because I think that's

1838
01:51:18,900 --> 01:51:20,800
pretty reasonable now, right?

1839
01:51:22,700 --> 01:51:23,200
All right.

1840
01:51:25,500 --> 01:51:26,000
Okay.

1841
01:51:26,400 --> 01:51:27,400
Oh you know what I could do?

1842
01:51:27,400 --> 01:51:30,700
Since I've got the 10 minutes, let me go ahead and make that change to

1843
01:51:30,700 --> 01:51:35,000
the cliprect stuff so that that's not something that gets pushed on

1844
01:51:35,000 --> 01:51:35,800
periodically.

1845
01:51:37,200 --> 01:51:38,200
I want to change that.

1846
01:51:38,900 --> 01:51:41,500
So let's just do that while since I have a little bit extra time

1847
01:51:41,500 --> 01:51:42,100
today.

1848
01:51:42,800 --> 01:51:44,600
I don't want to start something new, let me do that.

1849
01:51:44,800 --> 01:51:47,700
So let's call this this clip.

1850
01:51:47,700 --> 01:51:52,400
Rect thing, let's get rid of this and call this like render setup or

1851
01:51:52,400 --> 01:51:54,000
something, right?

1852
01:51:55,300 --> 01:51:57,600
This is the setup for the rendering which says, here's the clip.

1853
01:51:57,600 --> 01:51:58,200
Rect

1854
01:51:59,600 --> 01:52:00,200
Right.

1855
01:52:00,300 --> 01:52:01,500
Here's the render Target.

1856
01:52:01,500 --> 01:52:02,800
Here's projection Matrix.

1857
01:52:02,800 --> 01:52:07,700
Here's the values for the Shader, have a party and then we can say, is

1858
01:52:07,700 --> 01:52:13,500
well, a render entry, textured quads just has the setup, but it's

1859
01:52:13,500 --> 01:52:15,700
going to use in it, right?

1860
01:52:17,200 --> 01:52:22,300
So that's just all it needs to know, is it just gets that in there?

1861
01:52:22,600 --> 01:52:26,500
And then we don't need any more of this stuff where we've got, like a

1862
01:52:26,500 --> 01:52:29,000
cliprect index situation coming on here.

1863
01:52:30,400 --> 01:52:34,200
And yeah, I don't really even know that we're going to need this type

1864
01:52:34,200 --> 01:52:35,200
field anymore.

1865
01:52:36,000 --> 01:52:41,000
We'll have to see what ends up happening when yeah, when we get there.

1866
01:52:41,600 --> 01:52:44,900
But, you know, it may be the case that that doesn't really have to

1867
01:52:44,900 --> 01:52:45,400
happen.

1868
01:52:48,100 --> 01:52:48,900
We'll find out.

1869
01:52:49,700 --> 01:52:53,000
So anyway, we could get rid of clip Rex and then those just don't have

1870
01:52:53,000 --> 01:52:54,000
to get pushed on anymore.

1871
01:52:54,000 --> 01:52:55,100
Those just aren't a thing.

1872
01:52:55,100 --> 01:52:58,100
They're like off and they're unrelated, right?

1873
01:52:58,900 --> 01:53:01,400
And, which is nice because it means now that people don't have to skip

1874
01:53:01,400 --> 01:53:06,000
those, and everything is just kind of hunky dory there, right?

1875
01:53:06,800 --> 01:53:07,400
I also don't know.

1876
01:53:07,400 --> 01:53:08,800
Are we even using this anymore?

1877
01:53:09,500 --> 01:53:10,900
The render transform thing.

1878
01:53:11,400 --> 01:53:12,600
Oh yeah, we are down here.

1879
01:53:13,200 --> 01:53:17,000
So we could start using this setup stuff and have a game set up in a

1880
01:53:17,000 --> 01:53:17,700
debug setup.

1881
01:53:18,100 --> 01:53:20,300
Separate as well.

1882
01:53:20,700 --> 01:53:23,400
I don't know if you really want to do that or not, but we have options

1883
01:53:23,400 --> 01:53:24,100
there obviously.

1884
01:53:25,400 --> 01:53:25,900
All right.

1885
01:53:28,700 --> 01:53:33,400
So let's see, we don't care about this much.

1886
01:53:33,400 --> 01:53:39,100
We can just change it to render setup, that's pretty easy cliprect.

1887
01:53:39,100 --> 01:53:43,100
Indexes no longer have to be a thing at all and in fact that can just

1888
01:53:43,100 --> 01:53:45,600
go away, that's just not there.

1889
01:53:47,400 --> 01:53:50,700
Current cliprect index and transient cliprect this.

1890
01:53:50,800 --> 01:53:54,100
This stuff is just not relevant anymore.

1891
01:53:54,100 --> 01:53:56,400
I don't think the only person who

1892
01:54:01,000 --> 01:54:04,200
Actually cares about that to debug system, but we can support it

1893
01:54:04,200 --> 01:54:04,900
pretty easily.

1894
01:54:05,500 --> 01:54:06,800
All, we would need to do

1895
01:54:08,100 --> 01:54:13,600
In here is just say like, okay well, whatever the last setups one was

1896
01:54:13,600 --> 01:54:15,000
we just need to store.

1897
01:54:16,000 --> 01:54:18,300
It's actual rectangle, right?

1898
01:54:23,300 --> 01:54:26,800
So we would just say, okay the old cliprect equals whatever the render

1899
01:54:26,800 --> 01:54:27,400
group,

1900
01:54:29,800 --> 01:54:33,700
Last set up cliprect was is what we need, right?

1901
01:54:34,700 --> 01:54:38,100
And so then later after you do, whatever it is that you're going to

1902
01:54:38,100 --> 01:54:40,400
do, we just need to restore it.

1903
01:54:41,700 --> 01:54:44,200
We also need to push on a new

1904
01:54:46,500 --> 01:54:50,400
Set of quads because the quad things just kind of Aggregates those

1905
01:54:50,400 --> 01:54:51,900
quads together, right?

1906
01:55:12,900 --> 01:55:13,300
Okay.

1907
01:55:21,000 --> 01:55:23,900
Where is the render group thing here?

1908
01:55:29,300 --> 01:55:31,200
I just want the push clip.

1909
01:55:31,200 --> 01:55:31,900
Rect

1910
01:55:35,700 --> 01:55:39,000
So what I want here, I just I guess that really all I want to do is do

1911
01:55:39,000 --> 01:55:41,900
a push set up, right?

1912
01:55:45,900 --> 01:55:47,200
So I'm going to call Push setup.

1913
01:55:48,000 --> 01:55:49,800
I'm going to say for this render group.

1914
01:55:51,000 --> 01:55:52,100
Here's the new setup.

1915
01:55:56,100 --> 01:55:57,300
Render setup.

1916
01:55:59,900 --> 01:56:03,400
It was Brenda group last setup.

1917
01:56:07,300 --> 01:56:07,900
Old clip.

1918
01:56:07,900 --> 01:56:11,100
Rect equals new setup clip.

1919
01:56:11,100 --> 01:56:13,100
Rect right.

1920
01:56:13,100 --> 01:56:15,300
So I'm just preserving the old one here.

1921
01:56:16,500 --> 01:56:21,400
I'm setting it to a new one here and then off we go and then I'm just

1922
01:56:21,400 --> 01:56:23,500
going to do the exact same thing on the way out.

1923
01:56:27,200 --> 01:56:31,500
So here I'm going to say, let me get whatever the last one was and

1924
01:56:31,500 --> 01:56:32,600
then let me set.

1925
01:56:34,000 --> 01:56:38,000
The new one to whatever it was before off we go.

1926
01:56:39,600 --> 01:56:41,200
Same thing is true here.

1927
01:56:43,500 --> 01:56:45,000
Really know this.

1928
01:56:45,000 --> 01:56:46,400
This is not a thing now.

1929
01:56:48,000 --> 01:56:50,400
So when you get rid of that although I guess no wait.

1930
01:56:50,400 --> 01:56:53,500
You know, I could I just wouldn't do the push setup.

1931
01:56:53,500 --> 01:56:57,800
So if you wanted to do it you could I just instead I just do

1932
01:57:10,700 --> 01:57:12,100
So I just save the clip.

1933
01:57:12,100 --> 01:57:13,800
Rect that is currently the case.

1934
01:57:13,800 --> 01:57:16,900
I just don't push a new one on, so you could use the that call

1935
01:57:16,900 --> 01:57:19,600
structure if you wanted to as well, I suppose.

1936
01:57:20,100 --> 01:57:23,600
All right, so push setup needs to be in here.

1937
01:57:23,600 --> 01:57:24,100
Now,

1938
01:57:25,600 --> 01:57:30,100
another interesting thing about push setup, though, is that it doesn't

1939
01:57:30,100 --> 01:57:31,800
actually have to

1940
01:57:36,600 --> 01:57:37,700
Push anything?

1941
01:57:38,700 --> 01:57:39,500
That's separate issue.

1942
01:57:39,500 --> 01:57:41,200
This is going to be a bigger change that I thought was going to be I

1943
01:57:41,200 --> 01:57:42,200
probably shouldn't have done this right?

1944
01:57:42,200 --> 01:57:43,800
The industry and this might go a little late.

1945
01:57:44,600 --> 01:57:46,200
All right, so push that up.

1946
01:57:54,300 --> 01:57:55,900
Just got to change the name of this guy.

1947
01:57:57,100 --> 01:57:57,700
Here we are.

1948
01:58:00,500 --> 01:58:03,200
Again, all of these are just render setup.

1949
01:58:06,900 --> 01:58:08,600
unfortunately, we don't yes so these

1950
01:58:10,600 --> 01:58:15,900
Really all push setup does is if you look at what's going on in push

1951
01:58:15,900 --> 01:58:21,800
bitmap, when you do get current quads right, you can kind of see well,

1952
01:58:21,800 --> 01:58:27,000
okay, whatever the current quads, are that gets cleared, every time we

1953
01:58:27,000 --> 01:58:29,600
push a render element on, right?

1954
01:58:33,900 --> 01:58:34,600
Right here.

1955
01:58:35,400 --> 01:58:39,600
But all we really have to do is every time we do a push set up, call

1956
01:58:40,000 --> 01:58:40,700
that set up.

1957
01:58:40,700 --> 01:58:43,700
Now, invalidates, the quads that we had set because we're basically

1958
01:58:43,700 --> 01:58:46,100
taking these quads and we're buffering up more quads.

1959
01:58:46,100 --> 01:58:49,400
As we go, anytime, we change the setup, you can't continue to buffer

1960
01:58:49,400 --> 01:58:51,000
quads because you have to use a new set up.

1961
01:58:51,000 --> 01:58:51,900
Now, for those quads.

1962
01:58:52,200 --> 01:58:54,400
So every time we do a new setup, we would just clear.

1963
01:58:54,400 --> 01:58:58,800
The current quads at that point, we now don't need to push anything

1964
01:58:58,800 --> 01:59:00,100
anymore, right?

1965
01:59:01,600 --> 01:59:04,600
All were doing is this, that's it.

1966
01:59:05,000 --> 01:59:07,300
We don't chain these guys together.

1967
01:59:07,300 --> 01:59:08,600
There's no next pointer.

1968
01:59:08,600 --> 01:59:14,500
Anyway, so, the only thing we actually want to do is is this right?

1969
01:59:16,000 --> 01:59:20,200
We checked to make sure we didn't need to have a one more render

1970
01:59:20,200 --> 01:59:25,500
targets but otherwise the only thing we do is we say okay thank you

1971
01:59:25,500 --> 01:59:26,200
for the new setup.

1972
01:59:26,200 --> 01:59:27,000
That's great.

1973
01:59:27,100 --> 01:59:30,800
And then we say that we need new more quads, right?

1974
01:59:33,600 --> 01:59:34,400
But that's it.

1975
01:59:36,400 --> 01:59:39,500
And I think you could probably also see that this is

1976
01:59:41,700 --> 01:59:44,400
we could optimize out this copy entirely because people now if they

1977
01:59:44,400 --> 01:59:47,000
want to can just access the exact setup,

1978
01:59:50,400 --> 01:59:50,800
Directly.

1979
01:59:50,800 --> 01:59:53,600
So this is going to, this is going to optimize away to nothing.

1980
01:59:53,700 --> 01:59:56,400
Basically, after we've done this, which is pretty cool.

1981
01:59:57,400 --> 01:59:59,800
So anyway, so looking at here, yeah, we got this.

1982
02:00:00,100 --> 02:00:01,600
New setup, render Target index.

1983
02:00:01,600 --> 02:00:02,300
That's all fine.

1984
02:00:02,300 --> 02:00:04,900
So we have to make sure that we actually pay attention to that.

1985
02:00:09,100 --> 02:00:12,900
And that should be fine.

1986
02:00:13,700 --> 02:00:15,600
This is not a render into clip rack.

1987
02:00:15,600 --> 02:00:16,800
This is a render setup.

1988
02:00:17,900 --> 02:00:18,300
Okay.

1989
02:00:20,400 --> 02:00:21,000
Let's see.

1990
02:00:21,000 --> 02:00:30,900
Push setup doesn't take a value anymore and similarly all these guys

1991
02:00:31,000 --> 02:00:32,800
are just like render setup.

1992
02:00:36,200 --> 02:00:36,500
Clip.

1993
02:00:36,500 --> 02:00:37,100
Rect

1994
02:00:46,500 --> 02:00:47,900
and,

1995
02:00:57,100 --> 02:00:59,200
Just keeping it going again.

1996
02:00:59,200 --> 02:01:01,000
Do an absolutely nothing interesting here.

1997
02:01:02,200 --> 02:01:03,400
Just pulling out old code.

1998
02:01:28,000 --> 02:01:28,500
Okay.

1999
02:01:30,100 --> 02:01:32,000
So hopefully you can see what I'm doing here again.

2000
02:01:32,000 --> 02:01:33,900
Really straightforward Transformations.

2001
02:01:33,900 --> 02:01:37,600
This is just me, looking at that code and noticing that really it was

2002
02:01:37,600 --> 02:01:39,000
just doing a bunch of busy work.

2003
02:01:39,100 --> 02:01:41,900
And so I'm just getting rid of all that and saying, look, we don't

2004
02:01:41,900 --> 02:01:43,200
have to aggregate these anymore.

2005
02:01:43,200 --> 02:01:45,900
We're just pushing down quads so we can make this a much more

2006
02:01:45,900 --> 02:01:47,200
streamlined operation.

2007
02:01:48,600 --> 02:01:50,400
So that's all I'm doing, right?

2008
02:01:52,200 --> 02:01:53,300
Really, really basic.

2009
02:01:55,000 --> 02:01:55,300
Okay.

2010
02:01:55,300 --> 02:01:56,900
So here are some stuff.

2011
02:01:56,900 --> 02:01:58,200
This is using a trim.

2012
02:01:58,200 --> 02:02:01,800
This is a transient cliprect situation right here, right?

2013
02:02:01,800 --> 02:02:03,100
So I'm just going to do transient clip.

2014
02:02:03,100 --> 02:02:03,600
Rect

2015
02:02:10,500 --> 02:02:15,200
And it looks like, I don't know who's actually changing the cliprect,

2016
02:02:15,200 --> 02:02:20,900
though to a default, clipped Rex.

2017
02:02:20,900 --> 02:02:24,500
So I guess I just want to do that.

2018
02:02:33,400 --> 02:02:37,700
Like so and we're going to actually have to make those not be indices

2019
02:02:37,700 --> 02:02:40,000
anymore if that makes sense, but that's that's fine.

2020
02:02:43,000 --> 02:02:44,600
Again, this is another transition clip.

2021
02:02:44,600 --> 02:02:45,100
Rect

2022
02:02:53,300 --> 02:02:54,800
And that's just going to be the render group.

2023
02:02:56,500 --> 02:02:58,000
And really what I want here.

2024
02:02:58,000 --> 02:02:59,800
So what you can see developing Curacao

2025
02:03:00,200 --> 02:03:06,400
Is this render group call now when I push a Transit Krypton there and

2026
02:03:06,400 --> 02:03:07,800
go to pass a rectangle 2.

2027
02:03:07,800 --> 02:03:08,200
I.

2028
02:03:08,700 --> 02:03:12,200
So what I actually want here is I want this object transform thing,

2029
02:03:12,200 --> 02:03:15,700
instead of doing this, I don't actually want it to do this at all.

2030
02:03:15,800 --> 02:03:17,200
Like that's not useful to me.

2031
02:03:17,500 --> 02:03:20,500
Really what I want is, you know, get clip.

2032
02:03:20,500 --> 02:03:21,000
Rect.

2033
02:03:23,100 --> 02:03:27,500
Like so and I want that to produce the rectangle to I that I should

2034
02:03:27,600 --> 02:03:28,800
actually use.

2035
02:03:29,000 --> 02:03:29,600
Right?

2036
02:03:29,700 --> 02:03:33,000
So what I want here is I want a rectangle to I result.

2037
02:03:36,600 --> 02:03:42,200
It's going to produce this rectangle after doing the transform and

2038
02:03:42,200 --> 02:03:43,500
just return it to the caller.

2039
02:03:43,500 --> 02:03:48,300
So now they can use it anywhere they want to because now you don't

2040
02:03:48,300 --> 02:03:50,800
have to generate a clip rect from it, right?

2041
02:03:52,000 --> 02:03:52,600
So,

2042
02:04:04,700 --> 02:04:08,800
So, now when they do Transit clip practices, like, okay, like I don't

2043
02:04:08,800 --> 02:04:11,900
need to do any of this stuff anymore, it's all gone.

2044
02:04:12,100 --> 02:04:14,700
All I have to do is just say, hey, get me the clip, rect

2045
02:04:16,200 --> 02:04:16,700
Right.

2046
02:04:19,300 --> 02:04:23,000
This is the clip brick that I'm going to use so get me that clip rect

2047
02:04:23,400 --> 02:04:27,900
and then it'll automatically get, you know, handled.

2048
02:04:29,500 --> 02:04:37,300
So this result is gone now because we're not doing that kind and yeah

2049
02:04:37,300 --> 02:04:38,400
and this one's the same way.

2050
02:04:38,400 --> 02:04:44,600
So we've got this default cliprect in here in the debug .h.

2051
02:04:46,900 --> 02:04:49,800
The practice and that's a rectangle to I.

2052
02:04:49,800 --> 02:04:50,300
Now

2053
02:04:55,500 --> 02:04:57,900
This is going to be the same thing, transient clip rect.

2054
02:05:01,200 --> 02:05:02,600
Things are going to block the project.

2055
02:05:03,400 --> 02:05:03,600
Okay.

2056
02:05:03,600 --> 02:05:03,900
Clip.

2057
02:05:03,900 --> 02:05:04,400
Rect

2058
02:05:06,500 --> 02:05:07,200
And there it is.

2059
02:05:11,800 --> 02:05:12,100
Right?

2060
02:05:12,100 --> 02:05:13,000
So, that'll get that clip.

2061
02:05:13,000 --> 02:05:14,800
Rect and then we don't need this anymore.

2062
02:05:20,000 --> 02:05:21,500
The default cliprect here.

2063
02:05:21,500 --> 02:05:28,100
I guess again, could just be last set up with bricks.

2064
02:05:35,600 --> 02:05:38,400
Oh I guess I actually meant render group.

2065
02:05:38,700 --> 02:05:39,100
Is that what?

2066
02:05:39,100 --> 02:05:39,400
Yeah.

2067
02:05:39,500 --> 02:05:41,100
Sorry, render group.

2068
02:05:45,300 --> 02:05:46,400
Last set.

2069
02:05:59,500 --> 02:05:59,800
Okay.

2070
02:06:01,300 --> 02:06:07,100
So that's actually all of the changes that we need except for one in

2071
02:06:07,100 --> 02:06:08,900
the actual game code.

2072
02:06:09,100 --> 02:06:12,500
We've actually excised all that stuff now, but the render entry

2073
02:06:12,500 --> 02:06:15,600
texture quads needs to have the render setup remembered for it.

2074
02:06:15,700 --> 02:06:19,200
So whenever we do get current quads now,

2075
02:06:21,000 --> 02:06:22,700
To push one of these on here, right?

2076
02:06:22,700 --> 02:06:26,800
You do get current quads, you can see, we've got the current quads

2077
02:06:26,800 --> 02:06:31,400
being pushed on, we need it to to suck in that transfer, right?

2078
02:06:32,000 --> 02:06:38,800
So when it does this, the situation here, I guess, yeah, this is just

2079
02:06:38,800 --> 02:06:40,800
double checking to see whether we have enough room.

2080
02:06:41,000 --> 02:06:43,600
So assuming that all of this works, okay?

2081
02:06:44,800 --> 02:06:47,300
If we don't have current quads, what we need to do is just say

2082
02:06:47,300 --> 02:06:48,800
whatever that setup was

2083
02:06:51,100 --> 02:06:52,600
But the group is currently using.

2084
02:06:52,600 --> 02:06:54,900
That's what we're going to use for the group when we push it on.

2085
02:06:55,500 --> 02:06:58,800
So it just kind of copies that into that struct, so that's it.

2086
02:06:59,300 --> 02:06:59,900
All right.

2087
02:06:59,900 --> 02:07:02,800
So then what we need to do is get rid of all of this stuff because you

2088
02:07:02,800 --> 02:07:05,000
know, basically the stuff doesn't need to happen anymore.

2089
02:07:05,000 --> 02:07:14,900
So cliprect index and as a concept just goes away and all of this code

2090
02:07:15,400 --> 02:07:18,400
here actually comes down into

2091
02:07:23,200 --> 02:07:27,900
In fact, I don't really know why this switch statement here is inside

2092
02:07:28,700 --> 02:07:29,900
that check.

2093
02:07:30,800 --> 02:07:31,800
It seems a bit weird.

2094
02:07:32,300 --> 02:07:35,500
Like if you use render targets or clip Rex render targeting, this is

2095
02:07:35,500 --> 02:07:37,600
listening because I guess that's just a kills it.

2096
02:07:37,700 --> 02:07:42,100
And anyway, taking a look at these right this clip.

2097
02:07:42,100 --> 02:07:46,100
Directing that stuff all of these things don't have to happen anymore.

2098
02:07:46,800 --> 02:07:50,300
Like nothing that has to do with cliprect counts or indices or any of

2099
02:07:50,300 --> 02:07:52,800
that has to occur at all.

2100
02:07:52,900 --> 02:07:53,500
Right.

2101
02:07:55,200 --> 02:07:59,100
So basically all we have to do is just this this work right here that

2102
02:07:59,100 --> 02:08:03,600
we were actually doing to set up like the scissor and those sorts of

2103
02:08:03,600 --> 02:08:05,300
things is all we really need.

2104
02:08:05,900 --> 02:08:10,200
So what we want to do is just move this down, I think here too.

2105
02:08:10,200 --> 02:08:15,200
When we are actually going to use the textured quads and so once we

2106
02:08:15,200 --> 02:08:19,900
get those texture quads out, then we can do all of this work, right?

2107
02:08:21,300 --> 02:08:22,700
And we'll take a look at that in a second.

2108
02:08:23,100 --> 02:08:24,400
In the meantime, we no longer

2109
02:08:24,600 --> 02:08:27,600
Anything we have to do with clip Rex here, so those will go away

2110
02:08:27,600 --> 02:08:28,300
entirely.

2111
02:08:29,100 --> 02:08:30,500
And so all of this stuff.

2112
02:08:34,300 --> 02:08:35,900
Can kind of get sucked out one level.

2113
02:08:37,100 --> 02:08:37,700
There we go.

2114
02:08:39,000 --> 02:08:41,100
And so now we really just have two cases.

2115
02:08:41,100 --> 02:08:45,200
One is when we are trying to do a render Target blend and we're going

2116
02:08:45,200 --> 02:08:47,600
to deal with that at some point in the future potentially.

2117
02:08:48,900 --> 02:08:52,700
When we actually re-enable those if we if we re enable them

2118
02:09:01,200 --> 02:09:06,800
Okay, but then I render enter entry textured quads here.

2119
02:09:08,400 --> 02:09:11,000
That is the place where we're going to actually do this setup.

2120
02:09:11,100 --> 02:09:15,100
So if use render targets, that's actually going to be the thing that

2121
02:09:15,100 --> 02:09:16,600
does the buying frame buffer here.

2122
02:09:18,100 --> 02:09:20,900
I think at this point, there's no way to not use render targets

2123
02:09:20,900 --> 02:09:24,300
because we pretty much always use them but we'll leave that in place

2124
02:09:24,300 --> 02:09:25,200
for the moment.

2125
02:09:26,500 --> 02:09:31,400
So we'll just go ahead and say that we've got the render setup here.

2126
02:09:35,300 --> 02:09:38,600
And that's going to be what we're going to look at.

2127
02:09:38,800 --> 02:09:42,800
So what we're going to say is if the setup render Target index is less

2128
02:09:42,800 --> 02:09:44,700
than or equal to the max render Target index.

2129
02:09:44,700 --> 02:09:48,900
Then we're assuming that we can proceed with this call.

2130
02:09:57,300 --> 02:09:57,800
Right.

2131
02:10:00,400 --> 02:10:07,000
This and so and we kind of need to think about this because if we're

2132
02:10:08,100 --> 02:10:11,400
what we really want to say is this render Target index.

2133
02:10:11,700 --> 02:10:12,000
Yeah.

2134
02:10:12,000 --> 02:10:14,400
Let the think about this a little bit more because this this switch

2135
02:10:14,400 --> 02:10:15,300
doesn't actually work.

2136
02:10:22,700 --> 02:10:26,500
So anyway, we come in here, R transpose is still going to be correct

2137
02:10:26,500 --> 02:10:28,600
right to get that projection Matrix out.

2138
02:10:28,600 --> 02:10:31,800
Although now we don't really need to transpose it because if you look

2139
02:10:31,800 --> 02:10:35,300
at what happens to proj, it actually only gets used in one place,

2140
02:10:35,500 --> 02:10:36,100
right?

2141
02:10:36,400 --> 02:10:41,100
It actually only gets used down here where we're loading it in.

2142
02:10:41,900 --> 02:10:47,100
So if we want to we can just have that do the transpose for us.

2143
02:10:47,300 --> 02:10:50,600
So instead of transposing it GL, uniform Matrix 4fv.

2144
02:10:51,100 --> 02:10:53,700
We were previously having that do the transpose.

2145
02:10:56,100 --> 02:10:58,400
I'm sorry to not do the transpose.

2146
02:11:06,000 --> 02:11:07,900
Where is it?

2147
02:11:18,400 --> 02:11:21,900
So here that is and you can see we had a transpose flag there, and we

2148
02:11:21,900 --> 02:11:25,400
were passing in false for it, so we could just pass through and not do

2149
02:11:25,400 --> 02:11:26,900
the transpose, right?

2150
02:11:27,600 --> 02:11:31,800
So that's all good inside here, we've got our clip Breck situation so

2151
02:11:31,800 --> 02:11:34,600
that just pulls the cliprect out directly from the set up.

2152
02:11:37,800 --> 02:11:39,900
We can look at this here, where we're finding the targets.

2153
02:11:39,900 --> 02:11:44,100
I'm going to go ahead and say what if we just did this?

2154
02:11:47,900 --> 02:11:49,100
Maybe that's a little bit better.

2155
02:11:53,400 --> 02:11:56,500
And then everything else should kind of just flow through, right?

2156
02:11:56,500 --> 02:11:58,600
We were going to say all right, here's the clip.

2157
02:11:58,600 --> 02:11:59,300
Rect

2158
02:12:02,400 --> 02:12:05,300
They're here is our render Target stuff.

2159
02:12:05,300 --> 02:12:07,900
So all of this stuff should just work, right?

2160
02:12:07,900 --> 02:12:10,600
We're just checking to see if we need to bind a new Target.

2161
02:12:11,300 --> 02:12:12,400
We're only going to do this.

2162
02:12:12,400 --> 02:12:16,400
Presumably, if we were going to bind a new Target, if we weren't, then

2163
02:12:16,400 --> 02:12:17,300
we won't.

2164
02:12:18,800 --> 02:12:19,800
So we go ahead and do that.

2165
02:12:19,800 --> 02:12:21,200
We do our cliprect.

2166
02:12:21,400 --> 02:12:27,800
We get that out of the set up like so we do our use render targets

2167
02:12:29,200 --> 02:12:30,800
Like I said, I'm not really sure we want it.

2168
02:12:30,800 --> 02:12:33,700
We kind of need to revamp how this works, but that's okay for now,

2169
02:12:33,700 --> 02:12:34,700
it'll, it'll be okay.

2170
02:12:34,700 --> 02:12:35,500
It'll be fine.

2171
02:12:36,800 --> 02:12:40,800
We set the GL scissor, then we come through here and we don't need

2172
02:12:40,800 --> 02:12:41,600
that anymore.

2173
02:12:41,900 --> 02:12:46,200
We have just set up for everything so we don't need clip anymore.

2174
02:12:49,400 --> 02:12:52,200
And again all that just comes out of Arkham and it's really nice,

2175
02:12:52,500 --> 02:12:52,900
right?

2176
02:12:54,800 --> 02:12:58,900
Okay, so now in here, we still have this clip rep problem.

2177
02:12:58,900 --> 02:13:02,400
For our, I'm just going to Nuke this because again we have to redo our

2178
02:13:02,400 --> 02:13:09,100
software renderer at some point and we'll sort of cross that bridge

2179
02:13:09,100 --> 02:13:09,900
when we come to it.

2180
02:13:11,700 --> 02:13:12,800
There's no sense maintaining it.

2181
02:13:12,800 --> 02:13:17,700
Now when we're still kind of working on what they should look like, so

2182
02:13:17,700 --> 02:13:20,100
now we don't need linearized clip Rex anymore.

2183
02:13:20,200 --> 02:13:21,000
That's just gone.

2184
02:13:22,000 --> 02:13:24,800
Which means we don't need prep for render anymore, because we're not

2185
02:13:24,800 --> 02:13:28,300
sorting and we're not linearizing, the clip Rex, which is great

2186
02:13:28,600 --> 02:13:30,300
because that means all this stuff goes away.

2187
02:13:33,000 --> 02:13:35,300
It means you have prep for render is just gone.

2188
02:13:37,600 --> 02:13:38,600
Which is fantastic.

2189
02:13:39,500 --> 02:13:45,600
It means when we call prep anything that was taking a prep, no longer

2190
02:13:45,600 --> 02:13:46,600
takes a prep.

2191
02:13:50,000 --> 02:13:52,100
So again, just really simplifying the stuff down.

2192
02:13:52,100 --> 02:13:53,200
It's really nice.

2193
02:13:54,200 --> 02:13:59,300
Let me go ahead and jump to those so software render commands.

2194
02:14:00,000 --> 02:14:01,100
Where is that?

2195
02:14:01,200 --> 02:14:02,700
That is

2196
02:14:04,100 --> 02:14:04,700
Here.

2197
02:14:13,000 --> 02:14:14,500
Let's just get rid of that everywhere.

2198
02:14:32,200 --> 02:14:33,900
And now we just need the opengl version.

2199
02:14:37,700 --> 02:14:38,200
Okay.

2200
02:14:39,700 --> 02:14:41,900
Now, the end of a stream is not a good time to do that.

2201
02:14:42,100 --> 02:14:43,700
I guess I just forgot how much it would be.

2202
02:14:43,700 --> 02:14:46,100
I was assuming that wouldn't work at all, and it actually just work,

2203
02:14:46,100 --> 02:14:46,800
just great.

2204
02:14:47,500 --> 02:14:51,400
So that's nice again, just a very simple mechanical transformation of

2205
02:14:51,400 --> 02:14:52,700
how the things were structured.

2206
02:14:52,700 --> 02:14:53,100
Their.

2207
02:14:54,200 --> 02:14:58,200
But turns out to be really kind of nice because what you can see now

2208
02:14:58,200 --> 02:14:59,800
is, we're getting a much cleaner.

2209
02:15:00,100 --> 02:15:02,600
Of going through to do our render commands.

2210
02:15:02,600 --> 02:15:05,600
Now basically, we just set up our rent, those render targets.

2211
02:15:06,600 --> 02:15:11,800
And now we're just looping through really just sets of quad batches

2212
02:15:11,800 --> 02:15:14,800
and the quad batches have in them, everything that we need to set up

2213
02:15:14,800 --> 02:15:20,200
the program, specify the vertex data and off we go, right?

2214
02:15:20,300 --> 02:15:23,400
And it just gets us out of a lot of bookkeeping that we really didn't

2215
02:15:23,400 --> 02:15:24,000
need anymore.

2216
02:15:24,000 --> 02:15:25,900
We don't need any of these anymore, right?

2217
02:15:25,900 --> 02:15:28,100
We don't need the cliprect situation.

2218
02:15:28,100 --> 02:15:29,800
We don't need these firsts and

2219
02:15:30,000 --> 02:15:31,200
Blasts anymore.

2220
02:15:31,600 --> 02:15:33,200
Those can all go away.

2221
02:15:35,100 --> 02:15:37,100
Let me go ahead and take this game.

2222
02:15:37,100 --> 02:15:39,300
Render prep structure goes away.

2223
02:15:40,000 --> 02:15:44,200
Sort entries, obviously should have gone away a long time ago, but

2224
02:15:44,200 --> 02:15:48,800
we're just getting that, you know, nice sort of spring cleaning out of

2225
02:15:48,800 --> 02:15:52,600
the way where things now can be just a lot more straightforward.

2226
02:15:53,800 --> 02:15:57,300
And again, no loss of functionality here, so that's good.

2227
02:15:57,300 --> 02:16:00,100
I'll go to a brief Q&A since I took up the time there.

2228
02:16:08,300 --> 02:16:09,100
So we're all good.

2229
02:16:09,100 --> 02:16:09,400
Yeah.

2230
02:16:13,600 --> 02:16:15,300
And again.

2231
02:16:18,400 --> 02:16:19,800
Mmm, that's a bit odd.

2232
02:16:20,400 --> 02:16:22,400
I'm not sure.

2233
02:16:27,400 --> 02:16:28,200
Oh right.

2234
02:16:28,600 --> 02:16:31,300
As you say I was like, why is the framerate 60 frames a second at the

2235
02:16:31,300 --> 02:16:31,700
moment?

2236
02:16:31,700 --> 02:16:35,600
Because it's supposed to be starting that because of the game Sims

2237
02:16:35,900 --> 02:16:38,600
Point query thing is slow, but I was like, oh, it's because we only

2238
02:16:38,600 --> 02:16:40,200
created two levels.

2239
02:16:40,299 --> 02:16:42,900
So it's not doing as many of those super slow Point queries.

2240
02:16:42,900 --> 02:16:44,000
We never optimized.

2241
02:16:50,600 --> 02:16:53,400
Has the framerate tanked after employing fog or was that a wrong

2242
02:16:53,400 --> 02:16:55,000
impression mind that is definite.

2243
02:16:55,000 --> 02:16:56,900
Very definitely, a very wrong impression of yours.

2244
02:16:57,400 --> 02:17:00,200
The frame rate is currently unrelated to rendering completely.

2245
02:17:02,600 --> 02:17:06,400
So essentially what happens.

2246
02:17:06,400 --> 02:17:11,299
First of all, even in that case, if you just compiled without with

2247
02:17:11,299 --> 02:17:16,799
optimizations on your at 60 locked, right?

2248
02:17:17,100 --> 02:17:20,100
So we currently don't have any frame rate

2249
02:17:20,299 --> 02:17:22,000
Albums at the moment.

2250
02:17:22,400 --> 02:17:25,900
However, really, it's all of our time is actually spent in some

2251
02:17:25,900 --> 02:17:27,500
unoptimized World Point creates off.

2252
02:17:27,500 --> 02:17:28,299
That's N squared.

2253
02:17:28,299 --> 02:17:31,000
So as you add more entities, the world it just gets infinitely slow

2254
02:17:31,299 --> 02:17:36,299
right and we just haven't done any work to look at those things yet,

2255
02:17:36,299 --> 02:17:38,200
because we haven't been working on that code.

2256
02:17:40,799 --> 02:17:45,400
But I think even if you create a bunch of levels, if you're in, if

2257
02:17:45,400 --> 02:17:48,299
you're in an optimized build, you're still fine because hey, computers

2258
02:17:48,299 --> 02:17:49,500
are just fast these days.

2259
02:17:49,799 --> 02:17:52,400
Yeah, so you're still 60 frames a second.

2260
02:17:54,100 --> 02:17:56,000
According to this 16 milliseconds there.

2261
02:17:56,600 --> 02:17:59,400
Again, with OBS on, you get some variability in the frame rate and

2262
02:17:59,400 --> 02:17:59,700
stuff.

2263
02:17:59,700 --> 02:17:59,799
I find

2264
02:18:00,000 --> 02:18:03,299
But, you know, for the most part, 60 frames per second, just fine.

2265
02:18:03,700 --> 02:18:08,299
However, if you have this many levels where we've got 10 levels coming

2266
02:18:08,299 --> 02:18:10,799
down, so you've got a full for with all of those entities hopping

2267
02:18:10,799 --> 02:18:11,500
around on them.

2268
02:18:12,700 --> 02:18:15,799
What ends up happening, is, if you don't compile with optimizations

2269
02:18:15,799 --> 02:18:17,799
on, there's a really slow function.

2270
02:18:17,799 --> 02:18:23,299
We've got that does checking of what's around an entity that really

2271
02:18:23,299 --> 02:18:23,900
tanks.

2272
02:18:23,900 --> 02:18:27,400
So you can see that frame rate, they're just really tanking again.

2273
02:18:27,400 --> 02:18:29,900
Nothing to do with the rendering, we have to

2274
02:18:30,000 --> 02:18:32,299
enable our profile view soon.

2275
02:18:32,299 --> 02:18:33,200
We'll do that.

2276
02:18:34,299 --> 02:18:36,799
When we get to it, you can see that that on top.

2277
02:18:36,799 --> 02:18:41,100
We also have the debug stuff takes a lot of time, but I think it's

2278
02:18:41,100 --> 02:18:42,000
really that point query.

2279
02:18:42,000 --> 02:18:46,799
Mostly you can turn off the debug stuff if you want to like so.

2280
02:18:46,799 --> 02:18:48,600
And see how much of a difference that makes?

2281
02:18:51,299 --> 02:18:54,100
Yeah, but you can see it's still slow, right?

2282
02:18:54,200 --> 02:18:57,799
So it's really mostly just the fact that that point query that

2283
02:18:57,799 --> 02:19:01,799
unoptimized point query just takes all the time and it just so happens

2284
02:19:01,799 --> 02:19:04,500
that if you compile with optimizations on that function gets

2285
02:19:04,500 --> 02:19:07,900
considerably faster and then you're at 60 frames a second again.

2286
02:19:08,200 --> 02:19:10,500
So, at the moment rendering just isn't an issue.

2287
02:19:10,799 --> 02:19:14,600
Even on this is tenure, I'm not sorry, this is seven-year-old Hardware

2288
02:19:15,000 --> 02:19:18,100
but even if that, it's just, we're just not putting enough on the

2289
02:19:18,100 --> 02:19:20,900
screen for rendering to be the problem.

2290
02:19:21,200 --> 02:19:21,700
Right.

2291
02:19:24,400 --> 02:19:25,000
so,

2292
02:19:49,300 --> 02:19:51,900
alright, let's take a look at some questions here cuz we have quite a

2293
02:19:51,900 --> 02:19:52,100
few.

2294
02:19:52,100 --> 02:19:53,000
I'll try to get through them.

2295
02:19:54,200 --> 02:19:58,100
May blow ask now that we're full 3d may be may be worth extending the

2296
02:19:58,100 --> 02:20:00,500
debug visualization rectangles into the third dimension.

2297
02:20:00,800 --> 02:20:03,300
Yes, I think you are probably quite correct.

2298
02:20:03,300 --> 02:20:05,600
We have not had a chance to do that yet but that would be a very good

2299
02:20:05,600 --> 02:20:09,000
idea because it would allow us to draw bounding boxes.

2300
02:20:09,000 --> 02:20:12,900
Basically which is probably more what we're going to want to see.

2301
02:20:13,400 --> 02:20:16,800
So yes, I do agree that that would be a good idea.

2302
02:20:19,400 --> 02:20:25,500
Nicola asked the framerate question and the fault of that was, why

2303
02:20:25,500 --> 02:20:28,100
would you in this case compiled without optimizations?

2304
02:20:28,100 --> 02:20:30,900
I don't get how it changes that much your frame rate.

2305
02:20:30,900 --> 02:20:32,500
Sorry if this is a dumb question.

2306
02:20:34,700 --> 02:20:42,400
The answer is basically because well this is really a question that

2307
02:20:42,400 --> 02:20:43,300
probably deserves.

2308
02:20:43,300 --> 02:20:47,600
It's not a dumb question at all, you

2309
02:20:48,700 --> 02:20:53,000
You're asking a good question, the, there's just a lot to it and I'm,

2310
02:20:53,500 --> 02:20:55,700
you know, since we're kind of over time there at the end that this

2311
02:20:55,700 --> 02:20:57,200
would be AB is a bad day for me too.

2312
02:20:59,600 --> 02:20:59,800
Try.

2313
02:21:00,000 --> 02:21:01,900
This question, but I'll do the best I can.

2314
02:21:01,900 --> 02:21:03,600
And recently, we've pretty time.

2315
02:21:04,100 --> 02:21:06,800
So what ends up happening, right?

2316
02:21:07,000 --> 02:21:11,000
If we take a look in some region, I can't remember the name of this

2317
02:21:11,000 --> 02:21:12,400
function, exactly.

2318
02:21:12,400 --> 02:21:14,800
The one that is really slow here.

2319
02:21:15,400 --> 02:21:16,400
Let's take a look.

2320
02:21:20,200 --> 02:21:25,200
Doo-doo-doo-doo-doo-doo doo-doo-doo-doo-doo doo-doo-doo-doo.

2321
02:21:26,100 --> 02:21:26,700
Here it is.

2322
02:21:28,900 --> 02:21:32,000
All right, so let's just take a look here at what's going on.

2323
02:21:32,000 --> 02:21:34,500
I'm just going to try to give you a little bit of a feel for this

2324
02:21:34,500 --> 02:21:37,200
because it is important to understand and a like I said it's

2325
02:21:37,400 --> 02:21:38,600
definitely not a dumb question.

2326
02:21:38,600 --> 02:21:42,400
It is a very good question and I would like to try to explain it.

2327
02:21:42,600 --> 02:21:44,200
So here you can see the game running.

2328
02:21:44,200 --> 02:21:45,200
I've stacked up a bunch of rooms.

2329
02:21:45,200 --> 02:21:46,500
You can see, the game is running.

2330
02:21:46,500 --> 02:21:51,000
It's actually less than even 30 so it's not even quite hitting 30

2331
02:21:51,000 --> 02:21:53,900
frames a second in this current state.

2332
02:21:53,900 --> 02:21:55,500
This is a the unoptimized build.

2333
02:21:55,800 --> 02:21:58,300
Now we know that we turn optimization on were at 60 frames a

2334
02:21:58,500 --> 02:21:59,700
And everything's hunky-dory.

2335
02:22:00,100 --> 02:22:01,900
And in, you know, off we go.

2336
02:22:02,900 --> 02:22:05,800
So the question is, you know, a first u.s.

2337
02:22:05,800 --> 02:22:08,800
question, why wouldn't I just always compiled optimizations on, right?

2338
02:22:08,800 --> 02:22:09,600
So, that's one path.

2339
02:22:09,600 --> 02:22:09,900
Question.

2340
02:22:10,100 --> 02:22:13,600
The other half of the question is, well, why does comparing with that

2341
02:22:13,600 --> 02:22:16,100
citations on make such a big difference, the frame rate?

2342
02:22:16,700 --> 02:22:20,000
And so the answer here is like so let's start by taking just a few

2343
02:22:20,000 --> 02:22:21,700
observables that we could see about the game.

2344
02:22:21,700 --> 02:22:24,800
So we know it's taking 40 milliseconds to frame right now in this

2345
02:22:24,800 --> 02:22:27,800
debug build I'm going to go ahead and take get closest reversible.

2346
02:22:29,100 --> 02:22:30,000
And I'm just going to tell it.

2347
02:22:30,000 --> 02:22:30,700
It can't run.

2348
02:22:31,300 --> 02:22:34,700
So what we're going to do here is we're going to say look, you know,

2349
02:22:35,500 --> 02:22:40,600
we're always going to return just a result that that is is saying we

2350
02:22:40,600 --> 02:22:44,300
looked for an closest traversal and we couldn't find it right

2351
02:22:46,800 --> 02:22:47,200
unfortunately.

2352
02:22:47,200 --> 02:22:50,100
Guess now that I think about it, I don't know that everyone can handle

2353
02:22:50,100 --> 02:22:51,300
this never happening.

2354
02:22:55,900 --> 02:22:56,700
That's a good question.

2355
02:22:56,700 --> 02:22:58,900
I don't know if I can actually because people need to be placed

2356
02:22:58,900 --> 02:23:00,300
somewhere in the world initially.

2357
02:23:04,200 --> 02:23:05,300
You know what, here's what I'll do.

2358
02:23:07,900 --> 02:23:08,600
Let's try this.

2359
02:23:12,300 --> 02:23:13,600
I'm going to make a global variable.

2360
02:23:15,700 --> 02:23:20,600
Well, kill switch, and I'm going to set it to 1.

2361
02:23:22,400 --> 02:23:24,400
And then I'm just going to say if kill switch.

2362
02:23:26,400 --> 02:23:27,800
Do this, right?

2363
02:23:37,000 --> 02:23:39,000
And I guess I could have done this with hot code reloading as well.

2364
02:23:39,000 --> 02:23:43,900
I didn't quite think about that but, you know, well, so here we are

2365
02:23:43,900 --> 02:23:47,300
running the game again, like it's taking 40 milliseconds of frame and

2366
02:23:47,300 --> 02:23:51,300
and right, so you know, if you think about there's 1,000 milliseconds

2367
02:23:51,300 --> 02:23:52,400
in a second, right?

2368
02:23:52,600 --> 02:23:55,600
So if you wanted to hit 60 frames a second, you want to be at sixteen

2369
02:23:55,600 --> 02:23:55,900
point.

2370
02:23:55,900 --> 02:23:58,600
Six, six milliseconds should be how long the frame takes because that

2371
02:23:58,600 --> 02:23:59,800
means you're just waiting for the

2372
02:24:00,200 --> 02:24:03,500
At that refresh at that point, which is what you want, right?

2373
02:24:04,400 --> 02:24:07,400
So now, if I come in here, and I say, well, okay, let's set a

2374
02:24:07,400 --> 02:24:08,300
breakpoint there.

2375
02:24:10,200 --> 02:24:10,900
We're in some region.

2376
02:24:10,900 --> 02:24:13,000
Yeah, let's go down to get closer to reversible.

2377
02:24:15,000 --> 02:24:17,600
So here's your host reversible, I'm going to set a breakpoint in here

2378
02:24:18,100 --> 02:24:19,400
and I'm just going to set kill switch.

2379
02:24:19,400 --> 02:24:25,000
Now it was was one, I'm going to set to zero so that code path won't

2380
02:24:25,000 --> 02:24:25,600
run anymore.

2381
02:24:25,900 --> 02:24:28,000
So this code path just is not running anymore.

2382
02:24:28,400 --> 02:24:31,100
That means nobody can move now, right?

2383
02:24:31,200 --> 02:24:35,200
So they're just not able to actually go anywhere at all, right?

2384
02:24:35,700 --> 02:24:38,600
And you can see what's happened to our profile.

2385
02:24:38,700 --> 02:24:42,300
We've actually gone down 15 mil whole Ms.

2386
02:24:42,700 --> 02:24:43,200
Right.

2387
02:24:43,200 --> 02:24:44,100
We used to have 40.

2388
02:24:44,300 --> 02:24:48,400
now, at 25 and that was just from this one function,

2389
02:24:49,800 --> 02:24:52,100
that's all we did was take out this one function.

2390
02:24:52,700 --> 02:24:58,200
So that one function alone, just one was taking as much time as his

2391
02:24:58,200 --> 02:25:05,100
entire frame takes to do the 16 millisecond, frame in a 60 frame per

2392
02:25:05,100 --> 02:25:05,700
second game.

2393
02:25:06,500 --> 02:25:08,300
Okay, just this one function.

2394
02:25:10,000 --> 02:25:10,800
Now why?

2395
02:25:11,600 --> 02:25:12,100
Okay?

2396
02:25:12,300 --> 02:25:13,400
Why is that happening?

2397
02:25:13,700 --> 02:25:14,600
How is that possible?

2398
02:25:14,600 --> 02:25:15,600
Doesn't make any sense, right?

2399
02:25:15,600 --> 02:25:18,300
You looking at the code, look at how tiny it is, right?

2400
02:25:18,600 --> 02:25:19,900
How many lines is that?

2401
02:25:20,000 --> 02:25:25,500
It's only, you know what, 943, 2975 with 30 lines of code, something

2402
02:25:25,500 --> 02:25:26,100
like that.

2403
02:25:28,000 --> 02:25:31,800
So, let's turn that kill switch back on again, right?

2404
02:25:31,800 --> 02:25:33,300
So now we are running this again.

2405
02:25:35,700 --> 02:25:37,100
And we're back up so you can see.

2406
02:25:37,300 --> 02:25:41,900
So very clearly just this, this part of the code is taking all the

2407
02:25:41,900 --> 02:25:42,400
time.

2408
02:25:43,500 --> 02:25:45,000
And so let's take a look at why.

2409
02:25:45,400 --> 02:25:51,800
Well, if we step in here, we can see that what this is doing is it's

2410
02:25:51,800 --> 02:25:55,600
doing a loop first for get close to Roseville.

2411
02:25:55,800 --> 02:25:59,600
It's doing a loop over all of the entities in the entire Sim region

2412
02:25:59,800 --> 02:26:02,100
and that's 1339 right.

2413
02:26:02,100 --> 02:26:05,400
So, that's actually that's actually

2414
02:26:05,500 --> 02:26:10,200
Did entities, that's looping over, write everything in the same

2415
02:26:10,200 --> 02:26:10,600
region.

2416
02:26:11,000 --> 02:26:12,700
It's going to Loop over 1,300 and Annie's.

2417
02:26:12,700 --> 02:26:15,300
And for each one of those, it's going to Loop over there traversals

2418
02:26:15,300 --> 02:26:15,500
now.

2419
02:26:15,500 --> 02:26:17,700
That's okay, because this is not much of a loop.

2420
02:26:17,700 --> 02:26:20,800
Most things either have one or zero traversable, but then what it's

2421
02:26:20,800 --> 02:26:23,300
going to do is it's going to go through here and it's going to do some

2422
02:26:23,300 --> 02:26:24,400
fairly straightforward.

2423
02:26:24,400 --> 02:26:27,300
Just pulling pointers out, so that's not too expensive, right?

2424
02:26:27,800 --> 02:26:32,400
And then it's going to do a little bit of a length test here and it's

2425
02:26:32,400 --> 02:26:34,100
going to get the one that found.

2426
02:26:35,400 --> 02:26:40,000
So when we look at what this is doing, it's doing 100, 1339

2427
02:26:40,000 --> 02:26:42,800
operations, and those operations aren't too bad, right?

2428
02:26:42,900 --> 02:26:48,400
So you might think, well, 100 1100, operator, sorry.

2429
02:26:48,500 --> 02:26:50,600
That was not the right number 13:39.

2430
02:26:54,900 --> 02:26:57,200
You might think well 13 39, that's not that many operations.

2431
02:26:57,200 --> 02:26:59,300
How could that possibly be taking all that time?

2432
02:26:59,400 --> 02:26:59,900
Well, if

2433
02:27:00,300 --> 02:27:04,000
Just go up, one more level, right?

2434
02:27:04,000 --> 02:27:08,400
So let's go out here and see where this is getting called, right?

2435
02:27:08,700 --> 02:27:13,900
And this is getting called inside the, the execute brain call, right?

2436
02:27:13,900 --> 02:27:17,000
Can see this call, where excuse the brain type.

2437
02:27:17,200 --> 02:27:21,400
If we step out and see how many of those were doing, you can see that

2438
02:27:21,400 --> 02:27:24,600
we're doing 13 of those, right?

2439
02:27:25,700 --> 02:27:29,900
So we're actually doing 13 times 13.

2440
02:27:30,400 --> 02:27:36,800
Nine, right, or seventeen thousand of those operations, right?

2441
02:27:36,900 --> 02:27:40,900
Every time we want to simulate, we're doing 17,000 of those

2442
02:27:40,900 --> 02:27:41,600
operations.

2443
02:27:42,000 --> 02:27:43,400
So now we have to ask ourselves.

2444
02:27:43,400 --> 02:27:48,200
Well, how many cycles does this processor actually have to work with

2445
02:27:48,800 --> 02:27:51,000
in a 60th of a second, right?

2446
02:27:51,000 --> 02:27:53,200
How much would it actually have?

2447
02:27:53,900 --> 02:27:55,600
Well, we can actually do that math.

2448
02:27:57,100 --> 02:28:00,800
I need to get to the little thing that, no, we don't need to go to

2449
02:28:00,800 --> 02:28:01,400
send owl.

2450
02:28:02,300 --> 02:28:05,000
Where's the, where's the computer?

2451
02:28:05,000 --> 02:28:06,400
Can I get properties on that?

2452
02:28:06,600 --> 02:28:10,200
Yeah, so if you look at the process properties of the processor, well,

2453
02:28:10,200 --> 02:28:14,100
this is a 3.19 gigahertz processor, right?

2454
02:28:14,100 --> 02:28:16,100
That's, that's how fast it's running.

2455
02:28:17,200 --> 02:28:22,500
So, in a single thread of code, that means I have 3.19 GHz are 1000

2456
02:28:22,500 --> 02:28:26,100
times 1000 times, 1000 Cycles, right?

2457
02:28:26,200 --> 02:28:26,600
That's how many

2458
02:28:26,800 --> 02:28:27,100
Cycles.

2459
02:28:27,100 --> 02:28:27,700
There are

2460
02:28:29,000 --> 02:28:33,000
Okay, so did I do that right 1000 times?

2461
02:28:33,000 --> 02:28:35,100
1000 times 1000, right?

2462
02:28:35,100 --> 02:28:37,600
That's a gigahertz x 3, .19.

2463
02:28:37,900 --> 02:28:38,400
There we go.

2464
02:28:39,000 --> 02:28:43,200
Now, that's how many cycles in one second.

2465
02:28:43,200 --> 02:28:44,800
This processor will execute.

2466
02:28:44,900 --> 02:28:48,600
Now we know that we have to hit 60 frames a second so that means we

2467
02:28:48,600 --> 02:28:50,600
have 530.

2468
02:28:50,700 --> 02:28:51,200
Well okay.

2469
02:28:51,200 --> 02:28:56,200
So 53 million write Cycles, 53 million

2470
02:28:57,500 --> 02:28:59,700
So you can start taking a look at these two numbers.

2471
02:29:00,000 --> 02:29:03,700
Next to each other, to give you a little sense of scale.

2472
02:29:04,500 --> 02:29:07,800
So 17,000 versus 53 million.

2473
02:29:08,200 --> 02:29:08,700
Right?

2474
02:29:09,900 --> 02:29:10,300
All right.

2475
02:29:10,300 --> 02:29:16,300
So now let's ask the question if we have to do 17,000 operations and

2476
02:29:16,300 --> 02:29:20,500
we have 53 million total operations, 53 million, total Cycles.

2477
02:29:20,700 --> 02:29:22,500
How many cycles per operation.

2478
02:29:22,700 --> 02:29:23,700
Do we get

2479
02:29:24,700 --> 02:29:27,000
For 17,000 operations, right?

2480
02:29:27,100 --> 02:29:32,500
So I'm going to divide by 17 407 3054.

2481
02:29:34,100 --> 02:29:39,500
Now, 3054 Cycles isn't that many cycles anymore, right?

2482
02:29:39,800 --> 02:29:44,500
So that means the interior of this Loop that we were talking about

2483
02:29:44,500 --> 02:29:44,900
here.

2484
02:29:47,200 --> 02:29:49,700
This one right here, let me jump back to it so you can see it.

2485
02:29:50,300 --> 02:29:58,900
The interior of this Loop has to execute in only 3054 A Cycles.

2486
02:29:59,100 --> 02:29:59,800
Now, remember,

2487
02:30:00,200 --> 02:30:03,300
Something as simple as missing the cash.

2488
02:30:04,100 --> 02:30:04,600
Right?

2489
02:30:05,100 --> 02:30:07,800
Could take hundreds of Cycles.

2490
02:30:10,100 --> 02:30:11,300
Hundreds of Cycles.

2491
02:30:12,000 --> 02:30:15,400
So now we have to go through here and look well, okay, so what is this

2492
02:30:15,400 --> 02:30:15,900
doing?

2493
02:30:16,000 --> 02:30:17,800
Let's go to the disassembly, right?

2494
02:30:19,300 --> 02:30:22,100
So here you can see the disassembly of a routine, right?

2495
02:30:22,100 --> 02:30:24,100
And it's actually fairly substantial.

2496
02:30:24,100 --> 02:30:25,300
Right, what's going on here?

2497
02:30:25,400 --> 02:30:26,800
Got all sorts of things in here.

2498
02:30:26,800 --> 02:30:29,700
We're making calls out to operator, - right.

2499
02:30:30,200 --> 02:30:32,900
We've got, you know, a bunch of stuff in here.

2500
02:30:32,900 --> 02:30:36,600
That's, that's, you know, making calls out to get some space

2501
02:30:36,600 --> 02:30:37,800
reversible, all this stuff.

2502
02:30:38,100 --> 02:30:41,300
So, we take a look at how many cycles we expect this to be.

2503
02:30:41,300 --> 02:30:43,000
There's just a lot of stuff going on here.

2504
02:30:43,000 --> 02:30:45,400
Let's see how many times we call something.

2505
02:30:45,800 --> 02:30:47,400
We call the block timer to enter it.

2506
02:30:47,400 --> 02:30:48,500
Well, that's, that's not inside the loop.

2507
02:30:48,500 --> 02:30:48,900
So what

2508
02:30:49,100 --> 02:30:52,100
We won't look at that one at the moment.

2509
02:30:52,800 --> 02:30:53,800
So let's look at all these here.

2510
02:30:54,100 --> 02:30:56,700
So let's look at all the times we call out to a separate routine the

2511
02:30:56,700 --> 02:30:57,100
assembly.

2512
02:30:57,100 --> 02:30:59,000
Here's one call, right?

2513
02:31:00,900 --> 02:31:04,800
Here's another call to operate a - here's another call to length

2514
02:31:04,800 --> 02:31:05,500
squared.

2515
02:31:08,000 --> 02:31:10,500
Here's another well, that's the called the end the block, right?

2516
02:31:11,100 --> 02:31:13,200
So we're going through all this assembly code here.

2517
02:31:13,200 --> 02:31:14,600
Here's what we actually have to do.

2518
02:31:14,600 --> 02:31:16,500
Here's the work that actually has to get done, right?

2519
02:31:16,500 --> 02:31:17,700
So we're doing work here.

2520
02:31:17,800 --> 02:31:20,300
Each one of these is going to take potentially multiple Cycles

2521
02:31:20,300 --> 02:31:22,300
depending on the circumstances, some of them overlap.

2522
02:31:22,300 --> 02:31:24,700
So it's kind of hard to know necessarily but you can see what's going

2523
02:31:24,700 --> 02:31:24,900
on.

2524
02:31:25,600 --> 02:31:27,900
We're going to make an actual call out here to get some traits of rest

2525
02:31:27,900 --> 02:31:28,100
will.

2526
02:31:28,100 --> 02:31:29,700
Look at all this code that has to happen.

2527
02:31:29,800 --> 02:31:33,500
Here's a bunch of set up that has to occur in order to make this work.

2528
02:31:33,500 --> 02:31:36,800
We're setting up the stack frame for this function that we just called

2529
02:31:36,800 --> 02:31:37,700
in to get some face.

2530
02:31:37,800 --> 02:31:38,500
Reversible.

2531
02:31:38,600 --> 02:31:42,000
Look at all this stuff were clearing out this whole value, right?

2532
02:31:42,000 --> 02:31:44,000
We're doing all this work blah blah blah blah.

2533
02:31:44,000 --> 02:31:46,100
We're making another call out to get reversible.

2534
02:31:46,200 --> 02:31:47,100
That's going to set the stock.

2535
02:31:47,100 --> 02:31:51,400
Again, we're calling out to operator plus equals on this thing.

2536
02:31:51,400 --> 02:31:52,700
Look at all this code.

2537
02:31:52,900 --> 02:31:56,400
I mean, are you looking at all of this code that calls out to operator

2538
02:31:56,400 --> 02:32:00,900
plus which sets up the stack frame for that, right?

2539
02:32:02,200 --> 02:32:06,100
Tons, and tons and tons of work being done here, right?

2540
02:32:06,500 --> 02:32:08,900
Just tons plus, not to mention.

2541
02:32:08,900 --> 02:32:09,800
Look at this stuff.

2542
02:32:09,800 --> 02:32:12,300
The insert a security cookie.

2543
02:32:12,300 --> 02:32:17,900
Check call in here to do some kind of nonsense that the compiler

2544
02:32:17,900 --> 02:32:22,200
wanted to do to check the stack for security purposes or something,

2545
02:32:22,200 --> 02:32:22,700
right?

2546
02:32:24,400 --> 02:32:25,800
Look at all that stuff.

2547
02:32:26,100 --> 02:32:32,000
Okay, so compare and contrast that let's now do the exact same thing

2548
02:32:32,000 --> 02:32:34,500
and remember all of that everything that we're looking through there

2549
02:32:34,500 --> 02:32:37,600
plus all the other calls everything on this epic to only three

2550
02:32:37,600 --> 02:32:39,200
thousand Cycles, it had to happen.

2551
02:32:39,200 --> 02:32:39,500
It

2552
02:32:40,900 --> 02:32:41,500
Right?

2553
02:32:41,600 --> 02:32:46,200
And that's if it had all the time in the frame total so nothing else

2554
02:32:46,200 --> 02:32:47,200
could have happened.

2555
02:32:48,400 --> 02:32:51,600
And so you can start to see how that's just too slow, right?

2556
02:32:51,600 --> 02:32:54,400
That has to be a small for that function has to be a small fraction of

2557
02:32:54,400 --> 02:32:55,100
our frame time.

2558
02:32:55,400 --> 02:32:58,900
It would easily take the whole frame time, right?

2559
02:32:58,900 --> 02:32:59,800
Because all that stuff.

2560
02:33:00,300 --> 02:33:03,800
But now, let's look at what happens if we actually compiled our code

2561
02:33:03,800 --> 02:33:05,400
in release mode instead.

2562
02:33:09,800 --> 02:33:10,200
Okay.

2563
02:33:10,800 --> 02:33:13,500
Now let's go down to that kill switch.

2564
02:33:18,100 --> 02:33:18,600
Here we go.

2565
02:33:23,700 --> 02:33:25,300
And let's take a look at this function again.

2566
02:33:25,700 --> 02:33:27,400
So now we're coming in through here.

2567
02:33:29,500 --> 02:33:30,600
I'm going to go disassembly.

2568
02:33:32,700 --> 02:33:34,200
And let's take a look at what happens.

2569
02:33:34,700 --> 02:33:37,300
So first, let's go through and Mark all the places that we call

2570
02:33:37,300 --> 02:33:39,600
something right, just like we did before.

2571
02:33:44,400 --> 02:33:47,100
I'm marking all the places that we call out to something.

2572
02:33:49,300 --> 02:33:50,700
Every single one of them, right?

2573
02:33:52,500 --> 02:33:53,900
I've not skipped a single one.

2574
02:33:58,300 --> 02:34:00,500
You noticed something, I didn't mark anything.

2575
02:34:01,700 --> 02:34:02,800
Why didn't I Mark anything?

2576
02:34:02,800 --> 02:34:06,300
Well, I didn't mark anything because we didn't call anything, why?

2577
02:34:06,400 --> 02:34:09,800
Because when you turn optimizations on the compiler will in line all

2578
02:34:09,800 --> 02:34:13,800
small functions and remove all of that extra Croft.

2579
02:34:14,100 --> 02:34:18,200
So now we have something that went from having tons of extra code that

2580
02:34:18,200 --> 02:34:22,400
got pulled in to having all of those functions fuse together into a

2581
02:34:22,400 --> 02:34:26,400
nice clean series of mathematical operations that can all happen in a

2582
02:34:26,400 --> 02:34:28,600
nice little tight Loop, right?

2583
02:34:29,000 --> 02:34:31,300
So now, if we step through here, you look

2584
02:34:31,600 --> 02:34:32,300
It's happening.

2585
02:34:32,400 --> 02:34:34,000
It's very straightforward.

2586
02:34:34,000 --> 02:34:36,600
It's just moving in those pointers instead of calling a bunch of

2587
02:34:36,600 --> 02:34:37,600
functions to get them.

2588
02:34:38,900 --> 02:34:40,900
It's doing the math right here.

2589
02:34:41,100 --> 02:34:45,900
Right loading in the map and doing the math to do the comparisons on

2590
02:34:45,900 --> 02:34:47,700
the, on the difference, right?

2591
02:34:49,700 --> 02:34:53,000
There's the multiply it flies in the ads and so on and then it's

2592
02:34:53,000 --> 02:34:55,400
storing the results as it should, right?

2593
02:34:55,400 --> 02:34:57,200
It's just doing it all in one.

2594
02:34:57,200 --> 02:34:58,500
Nice, little tiny space.

2595
02:34:58,800 --> 02:35:02,700
So now, even though this function, is still super unoptimized because

2596
02:35:02,700 --> 02:35:05,700
it's checking all entities for no reason, even though it should be

2597
02:35:05,700 --> 02:35:08,500
doing a nice tight, spatial query, the optimized

2598
02:35:08,700 --> 02:35:13,400
Has gotten rid of all of that cruft, and so it's able to run well

2599
02:35:13,400 --> 02:35:14,600
within the budget.

2600
02:35:14,600 --> 02:35:19,100
So let's not even close to the, you know, 3,000.

2601
02:35:19,100 --> 02:35:23,400
Again would have been what it would have to do, in order to hit 60

2602
02:35:23,400 --> 02:35:24,700
seconds, if it was all that was running.

2603
02:35:24,800 --> 02:35:27,700
It's probably now able to run in just a couple hundred Cycles, right?

2604
02:35:27,700 --> 02:35:31,600
So it's completely out of our way unlike before when it was just this

2605
02:35:31,600 --> 02:35:33,200
huge falling mess, right?

2606
02:35:34,300 --> 02:35:36,400
So hopefully what you can see there.

2607
02:35:36,900 --> 02:35:38,700
Let me get rid of that kill switch, because now we don't need it

2608
02:35:38,700 --> 02:35:39,200
anymore.

2609
02:35:40,600 --> 02:35:44,100
So hopefully, what you can see there is optimized, code makes a

2610
02:35:44,100 --> 02:35:49,000
massive difference unoptimized code when you add, when you, when the

2611
02:35:49,000 --> 02:35:51,500
compiler is not told to optimize the code at all.

2612
02:35:52,100 --> 02:35:56,200
What ends up happening is, it's just going to literally do every last

2613
02:35:56,200 --> 02:35:57,400
thing you told it to do.

2614
02:35:57,600 --> 02:35:59,700
So, if you have an inline function,

2615
02:36:00,000 --> 02:36:02,700
It's not going to do that because that's an optimization.

2616
02:36:02,800 --> 02:36:05,900
It's just going to actually call out to that function actually set up

2617
02:36:05,900 --> 02:36:07,600
the stack frame, blah, blah blah.

2618
02:36:08,000 --> 02:36:08,700
Why is that?

2619
02:36:08,700 --> 02:36:09,400
The case, even?

2620
02:36:09,400 --> 02:36:11,600
Because in line would be very simple for it to do, right?

2621
02:36:11,700 --> 02:36:12,600
Even quickly.

2622
02:36:14,100 --> 02:36:17,300
Well, that now gets to the answer to your first part of question,

2623
02:36:17,300 --> 02:36:20,000
which is why don't you always compile an optimization without two

2624
02:36:20,000 --> 02:36:24,000
losses on the reason is because if you compile with optimizations on,

2625
02:36:24,200 --> 02:36:28,100
you are no longer able to inspect your code through the debugger very

2626
02:36:28,100 --> 02:36:28,800
effectively.

2627
02:36:29,200 --> 02:36:29,900
What do I mean by that?

2628
02:36:30,000 --> 02:36:30,100
That.

2629
02:36:30,100 --> 02:36:32,700
Well, let's take a look at that exact function that we know how to a

2630
02:36:32,700 --> 02:36:33,900
lot of stuff happen in it.

2631
02:36:34,000 --> 02:36:36,700
Let's go ahead and see what happens when we try to step into it,

2632
02:36:37,000 --> 02:36:37,500
right?

2633
02:36:37,600 --> 02:36:38,900
I wanted to bug that function.

2634
02:36:38,900 --> 02:36:39,600
It's not working.

2635
02:36:39,600 --> 02:36:41,600
Let's say, I mean it is working right now but it's let's say it

2636
02:36:41,600 --> 02:36:42,200
wasn't.

2637
02:36:42,700 --> 02:36:46,500
Well, first of all, when I step I'm stepping, look at what's going on.

2638
02:36:46,700 --> 02:36:49,000
It's not even going in order, right?

2639
02:36:49,000 --> 02:36:50,200
Why wasn't it going in order?

2640
02:36:50,200 --> 02:36:51,600
Well, it's because it's optimized code.

2641
02:36:51,600 --> 02:36:55,900
So now the optimizer has rearranged a bunch of the operations and you

2642
02:36:55,900 --> 02:36:58,500
can no longer expect them to happen in the order in which they're

2643
02:36:58,500 --> 02:36:59,800
listed that makes it pretty.

2644
02:37:00,000 --> 02:37:03,200
Placated to debug right there because you're Jumping All Around, which

2645
02:37:03,200 --> 02:37:04,500
is pretty uncomfortable.

2646
02:37:04,500 --> 02:37:07,400
If you're trying to just look at where errors occur in the program,

2647
02:37:07,400 --> 02:37:12,800
write the next problem we get is well, okay, how about I look at tests

2648
02:37:12,800 --> 02:37:14,100
entity, right?

2649
02:37:14,800 --> 02:37:16,600
And I want to look at something in test entity, right?

2650
02:37:16,600 --> 02:37:18,400
Okay, so I'm taking a look at that in there.

2651
02:37:18,700 --> 02:37:22,000
When I'm looking at that, I have no guarantee that the place that I'm

2652
02:37:22,000 --> 02:37:25,600
at actually is referencing that properly at all, right?

2653
02:37:25,600 --> 02:37:28,300
Because we don't know what the state is of these up to this point.

2654
02:37:28,300 --> 02:37:29,800
It may not have written to it yet.

2655
02:37:29,900 --> 02:37:32,200
Even though it looks like it should have, or something like that,

2656
02:37:32,200 --> 02:37:34,200
because doesn't have to, to point would be.

2657
02:37:34,200 --> 02:37:36,900
Another example, let's say, I want to look at what the value of 2

2658
02:37:36,900 --> 02:37:37,200
point.

2659
02:37:37,200 --> 02:37:39,200
Is this PP - frumpy?

2660
02:37:39,200 --> 02:37:41,500
Well, I put into the background, says it's undefined.

2661
02:37:41,900 --> 02:37:42,900
Well, no, it's not.

2662
02:37:42,900 --> 02:37:43,700
It's right there, right?

2663
02:37:44,200 --> 02:37:47,300
Well, not really and, the reason for that is because when the compiler

2664
02:37:47,300 --> 02:37:51,700
compiles, the optimizations on its free to remove temporary variables

2665
02:37:51,700 --> 02:37:52,900
or not.

2666
02:37:52,900 --> 02:37:53,800
Remember what they were.

2667
02:37:53,800 --> 02:37:56,900
If it's fused all the operations together in a way, that's hard to

2668
02:37:56,900 --> 02:37:57,900
extract, right?

2669
02:37:57,900 --> 02:37:59,900
So now I can't even look at

2670
02:38:00,000 --> 02:38:01,000
The values of my program.

2671
02:38:01,000 --> 02:38:02,300
I can't even tell what they are.

2672
02:38:02,400 --> 02:38:07,000
Same will probably be true of death square of testdisk U squared,

2673
02:38:07,000 --> 02:38:07,100
right?

2674
02:38:07,100 --> 02:38:10,300
If I ask for that value, I get it just doesn't know, right?

2675
02:38:10,300 --> 02:38:12,800
It's like, I have no idea optimized all that away.

2676
02:38:12,800 --> 02:38:19,200
It's all kind of messed in there in one big thing right now.

2677
02:38:19,200 --> 02:38:21,900
Even, I might be able to get closest distance squared.

2678
02:38:24,500 --> 02:38:27,600
Yeah, so I can observe the results.

2679
02:38:27,600 --> 02:38:28,700
So I know.

2680
02:38:28,800 --> 02:38:32,800
Now, looking at the result of this, I do know that it did compute test

2681
02:38:32,800 --> 02:38:37,400
these squared and that it was 30 2.1, 2:00 to 6:00, but the debugger

2682
02:38:37,400 --> 02:38:40,000
totally lost track of where that was because again, the compiler

2683
02:38:40,000 --> 02:38:43,600
optimize that whole sequence out and it can't remember how to

2684
02:38:43,600 --> 02:38:45,000
correlate those, right?

2685
02:38:46,400 --> 02:38:51,700
Now better debuggers are able to more to extract data more cleanly

2686
02:38:51,700 --> 02:38:52,700
here, right?

2687
02:38:53,200 --> 02:38:58,300
But in the case of optimized code, there's a limit to what they can

2688
02:38:58,300 --> 02:38:59,900
do, even very good debuggers, and a lot of

2689
02:39:00,100 --> 02:39:02,100
The buggers like visual Studios isn't that good?

2690
02:39:02,600 --> 02:39:05,900
The debug information doesn't necessarily track stuff like, oh, I

2691
02:39:05,900 --> 02:39:09,000
computed this and I put it in a register and I never store it back out

2692
02:39:09,000 --> 02:39:09,400
of the stack.

2693
02:39:09,400 --> 02:39:11,100
So if you want to know where it is, you got to go look at this

2694
02:39:11,100 --> 02:39:14,500
register because that's where it's hanging out right now or whatever,

2695
02:39:14,700 --> 02:39:15,100
right?

2696
02:39:17,100 --> 02:39:19,400
So that's why I typically compiled without optimization.

2697
02:39:19,400 --> 02:39:22,400
So I'm Because, unless I'm actually trying to look at performance,

2698
02:39:22,600 --> 02:39:24,400
it's a lot easier to step through the code.

2699
02:39:24,400 --> 02:39:27,400
Furthermore that goes doubly true on handmade hero.

2700
02:39:27,400 --> 02:39:30,100
Because on handmade here, I'm trying to teach people stuff on stream.

2701
02:39:30,400 --> 02:39:31,800
It's very hard to teach people stuff.

2702
02:39:31,800 --> 02:39:34,800
When I would constantly have to be saying, oh yeah, you can't see this

2703
02:39:34,800 --> 02:39:36,200
value because the optimizer opt-outs it out.

2704
02:39:36,200 --> 02:39:39,300
Or oh these are jumping around lines about trying to show you how this

2705
02:39:39,300 --> 02:39:41,200
is working but it's like jumping all over the place.

2706
02:39:41,200 --> 02:39:43,000
I'm like yeah that's because it rearranges or whatever.

2707
02:39:43,200 --> 02:39:46,400
That's just not very helpful.

2708
02:39:46,600 --> 02:39:47,100
Right.

2709
02:39:48,400 --> 02:39:50,000
So hopefully that answers the question for you.

2710
02:39:52,900 --> 02:39:54,000
All right, let's see.

2711
02:39:55,500 --> 02:39:57,900
Master Yoda says, how do you feel about uniform buffer objects?

2712
02:39:57,900 --> 02:40:00,700
Am I right to assume the render setup struck could be past the Shader

2713
02:40:00,700 --> 02:40:03,100
as a uniform buffer object instead of separate uniforms?

2714
02:40:03,100 --> 02:40:08,000
Yes that is exactly true I like that stuff it's just not always

2715
02:40:08,000 --> 02:40:15,000
supported everywhere the best you know the best stuff is usually when

2716
02:40:15,000 --> 02:40:17,300
you can just write to some memory and then hand it to the driver and

2717
02:40:17,300 --> 02:40:20,400
say Hey give this to the Shader so the closer you get to that the

2718
02:40:20,400 --> 02:40:20,800
better it is.

2719
02:40:21,000 --> 02:40:22,000
Always, in my opinion.

2720
02:40:25,100 --> 02:40:25,500
And mess.

2721
02:40:25,500 --> 02:40:28,200
I said, how does the hero know if it should hop to the lower level?

2722
02:40:28,200 --> 02:40:30,400
Instead of the upper level at the end of the stairs?

2723
02:40:30,400 --> 02:40:31,500
Where is the code for that?

2724
02:40:31,800 --> 02:40:34,900
That is just in the thing that says get closest reversible.

2725
02:40:35,200 --> 02:40:36,000
In fact, I think it was the thing.

2726
02:40:36,000 --> 02:40:39,900
We were just literally just looking at I believe it just looks for

2727
02:40:39,900 --> 02:40:41,300
whatever the closest one is.

2728
02:40:41,300 --> 02:40:44,800
So the reason that it hops to the one that's the lower one.

2729
02:40:44,800 --> 02:40:47,700
Read the higher one is because it's been going down in Z and the

2730
02:40:47,700 --> 02:40:51,000
closest one was always down a little more and so by the time it gets

2731
02:40:51,000 --> 02:40:53,500
to the lowest are it's down so far that the

2732
02:40:54,000 --> 02:40:54,200
Ones.

2733
02:40:54,200 --> 02:40:56,900
Nearby it on the lower level are closer than the ones on the upper

2734
02:40:56,900 --> 02:40:57,300
level.

2735
02:41:11,400 --> 02:41:13,600
What does the software vendor look like at this?

2736
02:41:13,600 --> 02:41:16,100
At the moment you can't really run the software under at the moment

2737
02:41:16,100 --> 02:41:18,400
because we've changed the formats all around.

2738
02:41:18,400 --> 02:41:20,400
So at some point we'll have to go through there and kind of just re

2739
02:41:20,400 --> 02:41:21,300
clean that up.

2740
02:41:23,100 --> 02:41:24,500
Probably don't want to do that anytime soon.

2741
02:41:24,500 --> 02:41:27,100
But you know, someday when we want to do like another pass in the

2742
02:41:27,100 --> 02:41:29,700
suffer under, we could go do it and it would be fun.

2743
02:41:29,700 --> 02:41:30,300
I think.

2744
02:41:33,600 --> 02:41:36,800
Christ says, 42, I assume the problems you solve in handmade here are

2745
02:41:36,800 --> 02:41:39,100
fairly representative of problems we face as a Game Dev.

2746
02:41:39,100 --> 02:41:42,400
Can you comment about any social aspects of being gamed a VG, how

2747
02:41:42,400 --> 02:41:45,500
collaborative or supportive the community is, or what it's like

2748
02:41:45,700 --> 02:41:47,600
sharing code base with a number of others.

2749
02:41:49,400 --> 02:41:52,100
I guess, what I would say is that's it's like anything else, it just

2750
02:41:52,100 --> 02:41:53,400
depends on the team, you know.

2751
02:41:53,400 --> 02:41:56,300
Some teams work really well together and others don't.

2752
02:41:57,200 --> 02:41:59,800
And so, you know,

2753
02:42:00,000 --> 02:42:02,600
It's really just a question of the mix of personalities.

2754
02:42:02,600 --> 02:42:04,600
I would say there's nothing specific in game.

2755
02:42:04,800 --> 02:42:07,900
There's nothing really different in game development, compared to

2756
02:42:07,900 --> 02:42:08,900
anything else.

2757
02:42:11,300 --> 02:42:15,900
So, you know, much like you might work at a company, you know, I don't

2758
02:42:15,900 --> 02:42:16,400
know.

2759
02:42:16,400 --> 02:42:21,500
Let you go work at a company that does something you work at Starbucks

2760
02:42:21,500 --> 02:42:24,500
corporate or something on a managerial team or something.

2761
02:42:24,900 --> 02:42:25,500
I would imagine.

2762
02:42:25,500 --> 02:42:28,800
It's exactly the same, some of those teams, just they all the

2763
02:42:28,800 --> 02:42:32,800
personalities, like, get along pretty well with each other and it just

2764
02:42:32,800 --> 02:42:35,900
works nicely other times.

2765
02:42:35,900 --> 02:42:39,500
It's a disaster and some people are like, you know, don't get along

2766
02:42:39,500 --> 02:42:40,500
with other people and

2767
02:42:40,800 --> 02:42:44,500
You know, in fighting and and its belligerent and whatever.

2768
02:42:45,500 --> 02:42:48,800
And I don't really think the game industry is any different, you know,

2769
02:42:48,800 --> 02:42:50,700
some teams you get are just really great teams.

2770
02:42:50,700 --> 02:42:53,700
They're fun to work on and you get along well and you are a good

2771
02:42:53,700 --> 02:42:55,300
version of yourself on that team.

2772
02:42:55,300 --> 02:42:58,300
Other teams, you just can't stand it and you're a bad influence on the

2773
02:42:58,300 --> 02:43:01,000
team or other people are bad influence on you or you fight with people

2774
02:43:01,000 --> 02:43:06,100
or who knows and you know the older devs get and the better they get

2775
02:43:06,100 --> 02:43:08,600
at working with other people, you know?

2776
02:43:08,600 --> 02:43:09,400
It's similar.

2777
02:43:09,400 --> 02:43:11,500
Like I said also to other companies, right?

2778
02:43:11,500 --> 02:43:14,100
It's like people get better at working with people.

2779
02:43:14,100 --> 02:43:15,500
So over time sometimes

2780
02:43:15,500 --> 02:43:16,600
Times that improves.

2781
02:43:17,600 --> 02:43:22,100
But just in general, I think it is just about a mix of personalities

2782
02:43:22,100 --> 02:43:24,300
and there really isn't a lot.

2783
02:43:24,300 --> 02:43:33,900
You can say, beyond that game development isn't special, so everything

2784
02:43:33,900 --> 02:43:37,600
that would normally apply to whether or workplace works well, or not,

2785
02:43:37,600 --> 02:43:38,700
it applies here.

2786
02:43:38,700 --> 02:43:44,900
And somebody who's a horrible employee in on one team might be great

2787
02:43:44,900 --> 02:43:45,300
on another.

2788
02:43:45,500 --> 02:43:48,800
Team just because the mix is different and they get along with the

2789
02:43:48,800 --> 02:43:52,000
people better, you know, and that kind of stuff that's just true.

2790
02:43:53,900 --> 02:43:57,500
You know, and I really don't think game development special.

2791
02:43:57,600 --> 02:43:58,500
I really don't.

2792
02:44:19,000 --> 02:44:22,200
If you want to know the line count on handmade here, we actually have

2793
02:44:22,800 --> 02:44:24,100
that somewhere here, right?

2794
02:44:25,900 --> 02:44:27,300
I don't know how to run this thing.

2795
02:44:30,700 --> 02:44:31,300
There you go.

2796
02:44:33,200 --> 02:44:36,400
So it's about 20 thousand lines of code, I guess.

2797
02:44:48,300 --> 02:44:49,200
And keep in mind, right?

2798
02:44:49,200 --> 02:44:51,800
That is all-inclusive.

2799
02:44:52,200 --> 02:44:55,600
So there's no libraries in here, right?

2800
02:44:57,300 --> 02:44:59,100
That has everything.

2801
02:45:00,500 --> 02:45:01,600
In its entirety.

2802
02:45:02,700 --> 02:45:06,700
Loading bitmaps initialize, the renderer, the software, renderer, the

2803
02:45:06,700 --> 02:45:10,900
simulation everything.

2804
02:45:13,000 --> 02:45:16,400
Sound playback, there's no libraries at all.

2805
02:45:16,400 --> 02:45:19,300
So we are that is every line of code.

2806
02:45:21,000 --> 02:45:25,200
The only thing right now that we don't have in our own code is like a

2807
02:45:25,200 --> 02:45:25,900
couple math.

2808
02:45:25,900 --> 02:45:29,100
Functions are calling the C runtime Library like sine and cosine.

2809
02:45:31,100 --> 02:45:31,800
But that's it.

2810
02:45:37,500 --> 02:45:39,400
And we don't use any data structures from anyone else.

2811
02:45:39,400 --> 02:45:40,400
Either we don't use

2812
02:45:41,900 --> 02:45:44,100
Like all the data structures we write ourselves so we write our own

2813
02:45:44,100 --> 02:45:46,200
linked list or on hash table, whatever.

2814
02:45:46,200 --> 02:45:49,100
We don't use anything so 20,000 all inclusive.

2815
02:45:54,400 --> 02:45:57,700
And we could get that number down it's bigger than it needs to be at

2816
02:45:57,700 --> 02:45:58,400
the moment.

2817
02:46:03,900 --> 02:46:06,900
We could we could certainly slim things down to fourteen thousand

2818
02:46:06,900 --> 02:46:07,200
lines.

2819
02:46:07,200 --> 02:46:11,000
Probably I would I would imagine pretty easily also that includes the

2820
02:46:11,000 --> 02:46:11,800
software renderer

2821
02:46:13,300 --> 02:46:17,400
Right, so the software renderer is in there as well.

2822
02:46:17,900 --> 02:46:23,200
We haven't updated it to the new format yet, but it has a complete

2823
02:46:23,200 --> 02:46:24,100
software renderer

2824
02:46:25,600 --> 02:46:28,900
Capable of rendering the game when it was in 2D at 60 frames a second,

2825
02:46:29,100 --> 02:46:30,800
actually, in software.

2826
02:46:31,400 --> 02:46:32,400
So that was in there too.

2827
02:46:51,600 --> 02:46:54,600
So yeah, we could get that down a bit and maybe we will try at some

2828
02:46:54,600 --> 02:47:00,900
point but it's also going to get larger separately because we're going

2829
02:47:00,900 --> 02:47:03,200
to have to put a bunch of game code in there, right?

2830
02:47:03,200 --> 02:47:06,000
Because we're going to have to put a bunch of monster code in a bunch

2831
02:47:06,000 --> 02:47:07,100
of world, gencode in there.

2832
02:47:07,400 --> 02:47:11,000
And that code tends to be a little big because it's just a bunch of

2833
02:47:11,000 --> 02:47:15,000
random, you know, human decided things.

2834
02:47:15,700 --> 02:47:17,200
This monster does this thing.

2835
02:47:17,200 --> 02:47:20,200
And he, you know, hits you for this, many points of damage and all

2836
02:47:20,200 --> 02:47:20,900
that sort of stuff.

2837
02:47:21,500 --> 02:47:24,000
So, you know, that's going to increase the line count.

2838
02:47:24,000 --> 02:47:25,100
When we start putting that stuff in there,

2839
02:47:27,800 --> 02:47:28,300
As well.

2840
02:47:34,300 --> 02:47:34,800
All right.

2841
02:47:39,100 --> 02:47:39,500
Okay.

2842
02:47:43,600 --> 02:47:44,800
I'm a wind on down.

2843
02:47:54,600 --> 02:47:57,000
Thank you everyone for joining me for this episode of handmade hero.

2844
02:47:57,000 --> 02:47:58,200
It's been a pleasure coding with you.

2845
02:47:58,200 --> 02:47:59,700
As always, if you

2846
02:48:00,000 --> 02:48:02,400
Want following the series at home, you can always pre-order the game

2847
02:48:02,400 --> 02:48:06,500
on handmade hero dot org and it comes with the source code so you can

2848
02:48:06,500 --> 02:48:07,600
play around with it at home.

2849
02:48:08,500 --> 02:48:10,900
We also have a forum so I can go to if you want to ask questions a

2850
02:48:10,900 --> 02:48:13,800
patreon page, if you want support the video series, schedule bot you

2851
02:48:13,800 --> 02:48:14,300
can use.

2852
02:48:14,300 --> 02:48:17,400
If you want to know when we're going to be live and an episode guide,

2853
02:48:17,700 --> 02:48:22,400
you can go to if you want to catch up on past episodes, that's about

2854
02:48:22,400 --> 02:48:23,700
it for today.

2855
02:48:24,000 --> 02:48:27,900
We will be back next week at which point we will probably do.

2856
02:48:30,800 --> 02:48:34,300
I think probably want to do the alpha fading level stuff.

2857
02:48:34,300 --> 02:48:36,700
So I think probably what we'll do is a break that into two parts.

2858
02:48:36,700 --> 02:48:39,700
One is, will clean up the camera code and try to make that kind of

2859
02:48:39,700 --> 02:48:43,500
final and then we'll sort of do the instrumentation of the render code

2860
02:48:43,500 --> 02:48:44,700
to make that work properly.

2861
02:48:45,200 --> 02:48:49,800
And at that point, I think we're in pretty good shape because then

2862
02:48:49,800 --> 02:48:51,800
we're kind of night in pretty smooth territory.

2863
02:48:51,800 --> 02:48:57,300
In terms of 3D this, we still have a few problems to iron out at the

2864
02:48:57,300 --> 02:48:58,400
moment, they're really not so much.

2865
02:48:58,600 --> 02:49:00,800
Problems with the structure of the code or anything, they're really

2866
02:49:00,800 --> 02:49:02,700
just more aesthetic problems.

2867
02:49:03,000 --> 02:49:06,200
I don't really know what we're going to do about sort of the problems

2868
02:49:06,200 --> 02:49:12,200
with how Sprites are, you know, sorted in the world with with blocks

2869
02:49:12,200 --> 02:49:13,000
and that sort of stuff.

2870
02:49:13,300 --> 02:49:15,900
Now that we have the Z buffer in the Z bias in there, it's pretty good

2871
02:49:15,900 --> 02:49:17,200
but we still have some problems.

2872
02:49:19,000 --> 02:49:21,700
When things pass through other things and I don't know, we might have

2873
02:49:21,700 --> 02:49:24,200
to think about it a little bit harder or we may need to shrink things

2874
02:49:24,200 --> 02:49:26,800
down a little bit so that they fit in the world a little bit cleaner.

2875
02:49:27,100 --> 02:49:27,500
I don't know.

2876
02:49:27,500 --> 02:49:30,600
We've got some work to do there and that's just some stuff that's it's

2877
02:49:30,600 --> 02:49:31,700
really just about decision.

2878
02:49:31,700 --> 02:49:35,500
Making about how we want to sort of fit the two dienes into the 3D

2879
02:49:35,900 --> 02:49:38,100
world that's about it.

2880
02:49:38,100 --> 02:49:41,200
I hope to see you back here next week for that until then have fun

2881
02:49:41,400 --> 02:49:44,400
program everyone and I'll see you all on the internet.

2882
02:49:44,500 --> 02:49:45,300
Take it easy, everybody.

