1
00:00:00,100 --> 00:00:01,800
And start recording.

2
00:00:02,900 --> 00:00:04,900
Hello everyone and welcome to handmade here on the show.

3
00:00:04,900 --> 00:00:07,100
Rico to complete game live on Twitch.

4
00:00:07,600 --> 00:00:09,900
No engines, no libraries.

5
00:00:10,000 --> 00:00:14,400
It's just us and absolutely all the code with the exception of

6
00:00:14,400 --> 00:00:18,300
Windows, which, you know, it gets in our way it does but it's the

7
00:00:18,300 --> 00:00:20,600
platform you got to shift on what can I say.

8
00:00:20,800 --> 00:00:25,500
So here we are writing on top of Windows someday and I hope that day

9
00:00:25,500 --> 00:00:27,100
is it's feasible down.

10
00:00:27,100 --> 00:00:30,900
The line will work on a platform where we can get rid of the operating

11
00:00:30,900 --> 00:00:32,200
system because that

12
00:00:32,700 --> 00:00:35,600
To be really homemade and, you know, I'm looking forward to it.

13
00:00:35,600 --> 00:00:37,600
But if you're a game developer,

14
00:00:38,700 --> 00:00:41,500
There's no getting around the truth, your daughter's ship on Windows.

15
00:00:41,500 --> 00:00:42,700
It's where all the games are purchased.

16
00:00:42,700 --> 00:00:46,300
So if you want to feed your family, you got to shift their.

17
00:00:46,600 --> 00:00:47,100
So

18
00:00:49,600 --> 00:00:54,900
Here we are shipping here and we are in the middle of well honestly.

19
00:00:55,900 --> 00:00:58,300
We're not really in the middle of anything.

20
00:00:58,300 --> 00:01:01,500
We did a bunch of optimization stuff and it was actually very light

21
00:01:01,500 --> 00:01:02,300
optimization stuff.

22
00:01:02,300 --> 00:01:05,500
I just showed how to do 70, and then multi-threading, we didn't really

23
00:01:05,500 --> 00:01:08,700
try to push it too far, but it turned out to actually be extremely

24
00:01:08,700 --> 00:01:11,400
fast because processors are extremely fast these days, it was kind of

25
00:01:11,400 --> 00:01:15,600
surprising, but we wanted to start to do some other things and kind of

26
00:01:15,600 --> 00:01:18,600
push forward into some of the areas that we hadn't quite finished yet

27
00:01:19,200 --> 00:01:23,100
and sort of let that come back around to optimization so that we could

28
00:01:23,300 --> 00:01:25,600
really crank things down a little bit more in a separate path.

29
00:01:26,100 --> 00:01:28,500
So right now we're doing is a little more architecture work.

30
00:01:29,300 --> 00:01:32,600
We're just trying to push the render a little bit further forward into

31
00:01:32,600 --> 00:01:35,600
a state where I feel like I'm comfortable saying.

32
00:01:35,600 --> 00:01:39,000
This is what it does and we can probably live with this for the entire

33
00:01:39,000 --> 00:01:39,900
project, you know?

34
00:01:39,900 --> 00:01:42,900
I mean, we don't have to lock it down, we can always go back and add

35
00:01:42,900 --> 00:01:43,200
things.

36
00:01:43,200 --> 00:01:46,500
But just something that I would reasonably believed, you could write

37
00:01:46,500 --> 00:01:49,500
all of handmade hero in and not be hamstrung or anything.

38
00:01:49,800 --> 00:01:51,700
So we're just doing a little bit of that pushing.

39
00:01:51,700 --> 00:01:55,600
So it's a little bit, helter-skelter a little bit, anything goes for a

40
00:01:55,600 --> 00:01:55,800
while.

41
00:01:56,000 --> 00:01:59,000
Well, we kind of go through and, and push on all the pieces and get

42
00:01:59,000 --> 00:02:00,300
them to line up.

43
00:02:00,300 --> 00:02:03,400
And one of the things that we wanted to do was get ground chunks,

44
00:02:03,400 --> 00:02:05,200
rendering separate thread.

45
00:02:05,200 --> 00:02:07,600
And there's some things that we have to be able to do to do that

46
00:02:07,800 --> 00:02:10,000
because there's some parts of the engine that we haven't built out yet

47
00:02:10,000 --> 00:02:11,000
that are required to do that.

48
00:02:11,000 --> 00:02:13,800
And so that's what we're probably going to take a look at today.

49
00:02:13,900 --> 00:02:14,400
So

50
00:02:16,100 --> 00:02:17,100
Let's get started.

51
00:02:17,300 --> 00:02:20,100
If you would like to follow along with me at home, please remember

52
00:02:20,100 --> 00:02:24,100
today is day 131, which means you want to unzip day, 130 source code,

53
00:02:24,600 --> 00:02:26,400
if you would like to follow along with me.

54
00:02:26,400 --> 00:02:29,600
So, if you ordered the game on handmade here at org and downloaded the

55
00:02:29,600 --> 00:02:33,200
source code unzip, one 30-day 130 is zip.

56
00:02:33,200 --> 00:02:35,300
That's what I'm starting with right now.

57
00:02:35,700 --> 00:02:39,600
Okay, so here we go, here we go.

58
00:02:40,300 --> 00:02:42,300
We had sort of an amusing thing that happened.

59
00:02:42,300 --> 00:02:45,800
If you remember at the end of last dream, we were zoomed out.

60
00:02:45,900 --> 00:02:49,100
Here in kind of a looking at things.

61
00:02:49,600 --> 00:02:52,400
So if you take a look at what's going on here, there's two things that

62
00:02:52,400 --> 00:02:55,700
we wanted to start taking a look at one is that, you know, you can see

63
00:02:55,700 --> 00:02:58,200
that we're doing these ground chunks on-demand, right?

64
00:02:58,200 --> 00:02:59,800
And the little yellow ring.

65
00:03:00,000 --> 00:03:02,400
Is that we're kind of zoomed out for debugging purposes.

66
00:03:02,700 --> 00:03:07,100
The yellow rectangle here is where the the screen would actually be

67
00:03:07,100 --> 00:03:09,600
when we're at normal size when we're not zoomed out.

68
00:03:09,700 --> 00:03:11,700
So that's what the user, the gate, that's what the player will

69
00:03:11,700 --> 00:03:13,000
actually be seeing is what's in there.

70
00:03:13,800 --> 00:03:16,700
And so our goal is obviously to make sure that we always have ground

71
00:03:16,700 --> 00:03:19,900
chunks available for the player when they go through there.

72
00:03:19,900 --> 00:03:23,700
Now, we have a problem, it's not that much of a problem because our

73
00:03:23,700 --> 00:03:26,700
render is a lot faster now, but you can see, we get a slight frame

74
00:03:26,700 --> 00:03:27,200
rate hiccup.

75
00:03:27,200 --> 00:03:28,200
Just a slight one.

76
00:03:28,600 --> 00:03:29,800
When we create those new

77
00:03:30,000 --> 00:03:31,200
Ground Chuck's, right?

78
00:03:31,300 --> 00:03:35,100
And we could fix that into one of two ways, right?

79
00:03:35,400 --> 00:03:38,500
One way, we could fix that is just by making it a little less brain

80
00:03:38,500 --> 00:03:42,200
dead when we create those ground chunks because right now we're

81
00:03:42,200 --> 00:03:45,100
actually doing that in a really stupid way that revolves a lot more

82
00:03:45,100 --> 00:03:46,700
Graphics work than it ought to.

83
00:03:46,700 --> 00:03:51,700
But what I'd rather do is I would rather go ahead and multi-thread

84
00:03:51,700 --> 00:03:54,000
that just because I know we're going to want to do some

85
00:03:54,000 --> 00:03:56,300
multi-threading of this forum where we have things that are working in

86
00:03:56,300 --> 00:03:57,000
the background.

87
00:03:57,400 --> 00:03:59,800
And so I think it's probably a good time to

88
00:04:00,000 --> 00:04:03,300
Get something like that working again because we are trying to nail

89
00:04:03,300 --> 00:04:06,800
down all of our engine stuff and that is an engine thing.

90
00:04:07,100 --> 00:04:10,400
So in order to make sure that our engine is is looking like I want it

91
00:04:10,400 --> 00:04:17,500
to look before we start doing game stuff, I want to make sure that

92
00:04:17,500 --> 00:04:20,399
we've got a few things happening in that overlapped fashion.

93
00:04:20,700 --> 00:04:25,500
So what we want to do is we want to start being able to run that on a

94
00:04:25,500 --> 00:04:28,000
separate thread and let's take a look at the reasons why we couldn't

95
00:04:28,000 --> 00:04:28,400
do that.

96
00:04:28,400 --> 00:04:29,700
Now, the first thing that,

97
00:04:29,900 --> 00:04:34,500
We need to do is a little bit of cleanup because we actually didn't do

98
00:04:34,500 --> 00:04:38,400
this and it was total luck that it was working at all.

99
00:04:39,000 --> 00:04:40,700
It just so happened that we were aligned.

100
00:04:40,700 --> 00:04:46,700
Now, for those of you who don't remember this pad thing, right here is

101
00:04:46,700 --> 00:04:48,400
the only thing saving us from faulting.

102
00:04:48,400 --> 00:04:51,100
So let's say, I compiled our code and it doesn't have the pad in it,

103
00:04:51,100 --> 00:04:51,300
right?

104
00:04:51,300 --> 00:04:52,300
So the path is not there.

105
00:04:52,800 --> 00:04:53,600
I go ahead and run this.

106
00:04:53,600 --> 00:04:59,400
You'll notice we we go ahead and we get a certian trigger here because

107
00:04:59,400 --> 00:04:59,800
our

108
00:05:00,000 --> 00:05:00,700
Is not aligned.

109
00:05:00,700 --> 00:05:04,300
And of course, if I remember is not aligned in our optimized, renderer

110
00:05:04,400 --> 00:05:05,600
rendering code won't work.

111
00:05:07,000 --> 00:05:11,100
So, the only reason that that was turning out to be true that are,

112
00:05:11,100 --> 00:05:15,700
that are renders, could could could work on the tiles on those ground

113
00:05:15,700 --> 00:05:17,800
chunks was because they happened.

114
00:05:17,800 --> 00:05:20,400
They just happened to be aligned.

115
00:05:21,100 --> 00:05:23,100
Now, we knew the frame buffer was aligned because we made sure the

116
00:05:23,100 --> 00:05:25,500
frame buffer was aligned, so that was an issue.

117
00:05:26,000 --> 00:05:28,800
But when we go to render to those tile, chunks, those ground chunks.

118
00:05:29,200 --> 00:05:30,400
Those were not aligned.

119
00:05:30,800 --> 00:05:33,300
And so, what we want to do is make it so that if I don't have this

120
00:05:33,300 --> 00:05:36,700
padding here because remember, the transient state is that the state

121
00:05:36,800 --> 00:05:39,000
start of the transient buffer and then we kind of just push things

122
00:05:39,000 --> 00:05:39,900
onto that buffer.

123
00:05:39,900 --> 00:05:44,100
Those ground chunks, where they are, alignment, wise is affected by

124
00:05:44,100 --> 00:05:46,900
how big transient state is, okay?

125
00:05:47,700 --> 00:05:50,800
So what we want to do is make it so that we can run it this way and

126
00:05:50,800 --> 00:05:56,500
not have this assertion fire and not have it, of course crash because

127
00:05:56,500 --> 00:05:59,500
again if I commented out that assertion it's not like it would just

128
00:05:59,500 --> 00:05:59,800
work.

129
00:06:00,000 --> 00:06:02,700
It would actually just crash a little later on, right?

130
00:06:03,600 --> 00:06:08,500
So if I, if I take this out, right, and I run this code will crash

131
00:06:08,500 --> 00:06:12,100
when we actually go to do it, because this load isn't aligned load,

132
00:06:12,700 --> 00:06:16,700
and aligned loads will fault if their destination is not actually a

133
00:06:16,700 --> 00:06:20,800
line, and the same would have been true down here for our store.

134
00:06:20,800 --> 00:06:23,700
You can see that our store is also an aligned store.

135
00:06:23,700 --> 00:06:27,000
Remember store without a u is aligned store loads out of you.

136
00:06:27,200 --> 00:06:29,700
If this restore you it's unaligned and then it's fine.

137
00:06:30,000 --> 00:06:33,300
But we wanted to use those aligned stores and loads.

138
00:06:33,700 --> 00:06:35,000
That's the instructions we want to use.

139
00:06:35,000 --> 00:06:37,300
So we're using those and that was fine because everything was aligned

140
00:06:37,300 --> 00:06:40,100
and we had other reasons for doing that that had to do with cash,

141
00:06:40,100 --> 00:06:42,200
contention and and race conditions.

142
00:06:42,300 --> 00:06:44,400
Hopefully you watched all that, you know why that is we went through

143
00:06:44,400 --> 00:06:45,300
it in a lot of detail.

144
00:06:45,900 --> 00:06:49,800
So the first question is, how do we fix this problem?

145
00:06:49,900 --> 00:06:54,400
How do we make sure that those tiles are going to be aligned properly?

146
00:06:54,400 --> 00:06:58,300
Now, we know right, when we create these ground chunks.

147
00:06:58,600 --> 00:06:59,800
So we have our

148
00:07:00,000 --> 00:07:02,800
Transient you know stuff here right?

149
00:07:03,600 --> 00:07:04,900
We have our transient stuff.

150
00:07:05,000 --> 00:07:09,000
We know when we're calling this make empty bitmap stuff that we

151
00:07:09,000 --> 00:07:12,100
probably want to make sure that these things are aligned.

152
00:07:12,100 --> 00:07:15,400
But what we don't have is a way to actually make sure they're aligned.

153
00:07:15,700 --> 00:07:19,400
So when we go in to say make empty bitmap here, if we wanted to make

154
00:07:19,400 --> 00:07:23,500
sure that this was a lined, we know right here when we do our push

155
00:07:23,500 --> 00:07:27,600
sighs, we could tell that allocator that we needed to be aligned if

156
00:07:27,600 --> 00:07:29,800
only there was a way to do that.

157
00:07:29,900 --> 00:07:33,800
At and unfortunately, there is no way to do that but what we can do

158
00:07:33,900 --> 00:07:35,400
obviously is we can write 1.

159
00:07:35,700 --> 00:07:38,400
If we go in here and we take a look at push sighs.

160
00:07:38,600 --> 00:07:39,900
Let's go ahead up here.

161
00:07:39,900 --> 00:07:40,700
Precise.

162
00:07:41,700 --> 00:07:45,700
What we could do is say oh okay, let's go ahead and say that.

163
00:07:45,700 --> 00:07:48,500
There's another parameter that comes in here which is just the

164
00:07:48,500 --> 00:07:53,100
alignment, which is what kind, you know, what alignment you want.

165
00:07:53,100 --> 00:07:55,700
And how many bytes did you want this to be a line too?

166
00:07:58,100 --> 00:07:59,800
And we'll say this has to be a power of 2.

167
00:08:00,900 --> 00:08:01,500
Right?

168
00:08:02,000 --> 00:08:04,400
And we'll just default it to for, will say that.

169
00:08:04,400 --> 00:08:08,900
D, word alignment is the default alignment and that if anything else

170
00:08:09,200 --> 00:08:14,700
if you want any other element, then you have to ask for it explicitly.

171
00:08:15,200 --> 00:08:18,400
So what I can do then is I can say, all right,

172
00:08:19,800 --> 00:08:20,800
We've got our result here.

173
00:08:20,800 --> 00:08:22,300
This is what our pointer would be.

174
00:08:23,300 --> 00:08:26,100
We've got our base in this, this stuff here.

175
00:08:26,100 --> 00:08:26,600
Right.

176
00:08:27,400 --> 00:08:31,100
What I want to do now is see if there has to be some kind of

177
00:08:31,100 --> 00:08:32,700
adjustment, right.

178
00:08:32,799 --> 00:08:36,100
And we've done this code before we've done alignment code before,

179
00:08:36,100 --> 00:08:36,400
right?

180
00:08:36,400 --> 00:08:39,799
Because if you remember, when we were actually doing our draw

181
00:08:39,799 --> 00:08:41,400
rectangle quickly,

182
00:08:42,799 --> 00:08:43,500
We did code.

183
00:08:43,500 --> 00:08:45,300
That looked a lot like this, right?

184
00:08:45,500 --> 00:08:49,100
When we came in here to do our clipping, we did stuff like oh is this

185
00:08:49,100 --> 00:08:49,600
a line?

186
00:08:49,600 --> 00:08:50,900
24 pixels.

187
00:08:51,000 --> 00:08:52,800
Remember, that's the way we were doing this here.

188
00:08:52,900 --> 00:08:53,500
Is this a line?

189
00:08:53,500 --> 00:08:54,400
24 pixels?

190
00:08:54,500 --> 00:08:57,500
If it's not aligned 24 pixels and we were doing and three, they're

191
00:08:57,500 --> 00:08:59,700
like art remember and 33

192
00:09:00,000 --> 00:09:01,600
To bottom bit set, right?

193
00:09:01,600 --> 00:09:03,300
The one bit and the to bit add them together.

194
00:09:03,300 --> 00:09:03,800
You get three.

195
00:09:03,800 --> 00:09:04,600
That's what three is.

196
00:09:04,600 --> 00:09:06,200
It's the two bottom bits are set.

197
00:09:06,200 --> 00:09:09,300
So we're saying are either of the two bottom bit set, if they are,

198
00:09:09,300 --> 00:09:11,500
then this thing ain't line 24, right?

199
00:09:11,500 --> 00:09:14,800
Because anything aligned to for will have both bottom, B a0.

200
00:09:15,800 --> 00:09:19,200
So, we'll go ahead and check those and we'll do something about it if

201
00:09:19,200 --> 00:09:20,500
they're not there, right?

202
00:09:21,200 --> 00:09:22,500
So that's what we want to do.

203
00:09:22,800 --> 00:09:27,200
And specifically, we want to, we want to move up because remember, we

204
00:09:27,200 --> 00:09:29,800
can't move backwards to a line because that would move into memory.

205
00:09:30,000 --> 00:09:30,900
That's already being used.

206
00:09:30,900 --> 00:09:34,300
So we need to move upwards to put us at the next boundary.

207
00:09:34,900 --> 00:09:39,200
So what I want to do is say, okay, we've got this Arena base, right?

208
00:09:39,200 --> 00:09:45,900
So we can say this alignment that we have here, we can say we can do

209
00:09:45,900 --> 00:09:48,300
exactly the thing we were doing before, right?

210
00:09:48,300 --> 00:09:53,500
We can say that if that I guess I should explain this part a little

211
00:09:53,500 --> 00:09:58,400
bit, will make an alignment Mass care and I don't know if I don't know

212
00:09:58,400 --> 00:09:59,900
if we've gone over this before.

213
00:10:00,800 --> 00:10:05,500
I think I've done it before about know, if I, if I really actually

214
00:10:05,500 --> 00:10:06,500
talked about explicitly.

215
00:10:06,500 --> 00:10:08,800
So I'll just go ahead and draw a real quick.

216
00:10:09,100 --> 00:10:11,600
Since this is the first time, maybe that we're really talking about it

217
00:10:11,600 --> 00:10:13,200
in the memory context explicitly.

218
00:10:14,500 --> 00:10:17,800
But if you have some binary number, right?

219
00:10:17,800 --> 00:10:23,100
In this case, let's say, I've got, I want to align to that for right?

220
00:10:24,300 --> 00:10:27,400
Well, hopefully, you guys will remember your binary here.

221
00:10:27,500 --> 00:10:28,400
So, here is a bite.

222
00:10:28,400 --> 00:10:29,800
Let's just do a bite.

223
00:10:30,100 --> 00:10:31,300
Remember what the bits in?

224
00:10:31,300 --> 00:10:32,800
This is the one, B, two B.

225
00:10:32,800 --> 00:10:37,700
For a bit 8-bit 16-bit 32-bit 64-bit and 128-bit, right?

226
00:10:38,300 --> 00:10:41,200
So, if all of them are set, you'd add them all together, you get 255,

227
00:10:41,200 --> 00:10:43,400
which is the maximum height can store, right?

228
00:10:44,300 --> 00:10:46,600
And if you add any other combination together, you can produce any

229
00:10:46,600 --> 00:10:48,400
other number between 0 and 255.

230
00:10:49,000 --> 00:10:52,600
So, if you come in and you see something set as for, then you would

231
00:10:52,600 --> 00:10:53,600
expect to see.

232
00:10:53,900 --> 00:10:57,700
This right, the for bit is set and the other bits are not set.

233
00:10:58,000 --> 00:11:03,600
So now if we want to know if a given value is aligned to 4 B

234
00:11:03,600 --> 00:11:07,000
boundaries and we're saying that that means that these have to be 0.

235
00:11:07,100 --> 00:11:07,800
Right?

236
00:11:08,000 --> 00:11:11,600
What we're looking for, is a mask that allows us to test to see if

237
00:11:11,600 --> 00:11:15,800
these bites are set and a trivial way, we can do that for a power of

238
00:11:15,800 --> 00:11:18,800
two is by subtracting 1 from the value.

239
00:11:18,800 --> 00:11:21,500
Because if we subtract one, right, what will happen?

240
00:11:21,500 --> 00:11:23,700
Is this will turn into a 1

241
00:11:23,900 --> 00:11:26,700
This will turn into one and this will turn into a 0, right?

242
00:11:26,700 --> 00:11:32,800
It will borrow over, you know, 100 minus 1, where each of these is

243
00:11:32,800 --> 00:11:35,400
binary will keep borrowing from itself it.

244
00:11:35,400 --> 00:11:40,500
Oh, it had to borrow, you know, a to write had to borrow again, a two

245
00:11:40,500 --> 00:11:41,600
and then it borrowed.

246
00:11:42,000 --> 00:11:43,300
And so you end up with a

247
00:11:44,600 --> 00:11:50,100
You end up with the 100 minus 0 0, 1 equals right 011.

248
00:11:50,600 --> 00:11:56,200
It's analogous to how you do it in decimal, but unfortunately, it's

249
00:11:56,200 --> 00:11:57,600
hard to imagine.

250
00:11:57,600 --> 00:11:59,800
Because normally, if I do this,

251
00:12:00,000 --> 00:12:00,500
Right?

252
00:12:01,200 --> 00:12:04,100
You would think of me doing 100 minus 1.

253
00:12:04,200 --> 00:12:07,900
You're thinking of going like, oh okay, I've got to borrow, you know,

254
00:12:07,900 --> 00:12:08,500
this way.

255
00:12:08,500 --> 00:12:11,600
I'm borrowing this and turning this into a 10 or something like that,

256
00:12:11,600 --> 00:12:12,200
right?

257
00:12:13,100 --> 00:12:16,800
But of course, in this case, the highest number you can actually have

258
00:12:17,200 --> 00:12:18,900
is, is a one in a column.

259
00:12:18,900 --> 00:12:21,200
So, borrowing, something from the next one just gives you a to.

260
00:12:21,500 --> 00:12:24,000
I don't know if that makes any sense, probably doesn't.

261
00:12:25,100 --> 00:12:25,300
I know?

262
00:12:25,300 --> 00:12:27,900
It's a little bit confusing but hopefully you understand what I'm

263
00:12:27,900 --> 00:12:29,900
talking about in binary, you can

264
00:12:30,000 --> 00:12:31,700
Also see that this makes sense logically.

265
00:12:31,700 --> 00:12:35,600
If I have four and I subtract 1 from it, I would expect to get three,

266
00:12:35,800 --> 00:12:36,400
right?

267
00:12:36,700 --> 00:12:40,800
And of course, three is the bottom two bits set 1 and 1, right?

268
00:12:41,600 --> 00:12:44,300
So hopefully, you can also see that that just makes sense.

269
00:12:44,300 --> 00:12:47,200
Logically, just in terms of the encoding, even if you're uncomfortable

270
00:12:47,200 --> 00:12:50,900
of doing the math in binary, you can see that it works just in decimal

271
00:12:50,900 --> 00:12:52,200
and then if you re encode it back.

272
00:12:52,800 --> 00:12:56,600
So all we have to do to take a power of 2 and turn it into a mask is

273
00:12:56,600 --> 00:12:59,800
just subtract 1 from it and that will produce the mask of the

274
00:13:00,000 --> 00:13:03,000
It's that should not be set if we're a line to it.

275
00:13:03,900 --> 00:13:08,800
So, what we can do here is say, okay, if we have a situation where the

276
00:13:08,800 --> 00:13:13,000
base pointer is not aligned to the alignment mask, the first thing

277
00:13:13,000 --> 00:13:17,600
that we do is we can push up, we can push up that alignment, right?

278
00:13:21,100 --> 00:13:25,400
And the way that will do that is, I'll say, okay, I've got a memory

279
00:13:25,400 --> 00:13:27,900
index which is my alignment offset.

280
00:13:29,900 --> 00:13:34,800
And at the end of this whole situation, what I will actually do is I

281
00:13:34,800 --> 00:13:44,300
will take the arena bass and I will do the arena base plus the

282
00:13:44,300 --> 00:13:45,600
alignment offset.

283
00:13:48,500 --> 00:13:49,600
So, do you read a base?

284
00:13:49,600 --> 00:13:51,400
Plus the arena used?

285
00:13:51,400 --> 00:13:52,300
Oh, you know what?

286
00:13:53,100 --> 00:13:57,400
I actually have to look at Arena used as well.

287
00:13:58,000 --> 00:13:59,400
Hmm.

288
00:13:59,400 --> 00:14:02,700
Alright so I've got to actually do this a little more slightly here

289
00:14:02,700 --> 00:14:05,400
because I have to the way that we've encoded this has to go this way.

290
00:14:06,600 --> 00:14:07,200
All right.

291
00:14:08,900 --> 00:14:13,800
so, let's talk about the basically, the pointer the results, pointer

292
00:14:15,600 --> 00:14:20,600
All right, so if we take a look at what happens here, this is the base

293
00:14:20,600 --> 00:14:21,700
pointer for the arena.

294
00:14:21,800 --> 00:14:25,000
This is how many bytes have been used and so if I add those two

295
00:14:25,000 --> 00:14:26,200
together, right?

296
00:14:26,200 --> 00:14:29,800
I get what the actual result pointer will be.

297
00:14:30,300 --> 00:14:33,800
And so, what I want to do now is make sure that I can actually align

298
00:14:33,800 --> 00:14:40,100
that so that, you know, the the result will be aligned to the value

299
00:14:40,100 --> 00:14:40,800
that we passed in.

300
00:14:41,600 --> 00:14:44,700
So, I produced that alignment mask and these are the B that these are

301
00:14:44,700 --> 00:14:45,300
the bits that

302
00:14:45,400 --> 00:14:46,300
I know can't be set.

303
00:14:46,300 --> 00:14:49,500
I take a look to see if any of them are set, if they are set.

304
00:14:49,500 --> 00:14:53,900
What I want to do is I want to go ahead and move up, however, many it

305
00:14:53,900 --> 00:14:56,700
would take me to produce the alignment, right?

306
00:14:56,700 --> 00:14:59,700
So, the way I'll do that is I'll just say, oh,

307
00:15:08,900 --> 00:15:13,000
Let us say the alignment offset is going to be whatever the alignment

308
00:15:13,000 --> 00:15:14,500
was, right?

309
00:15:15,400 --> 00:15:20,100
Because if I was at zero, I'd add the whole thing - whatever sort of

310
00:15:20,100 --> 00:15:21,100
that oops,

311
00:15:22,900 --> 00:15:28,000
- whatever portion of it we've already gone, right?

312
00:15:28,000 --> 00:15:30,300
So I want to go the whole way to the alignment and I'm just going to

313
00:15:30,300 --> 00:15:32,500
take whatever portion of it, we found there.

314
00:15:32,900 --> 00:15:34,400
I'm going to go ahead and subtract that away.

315
00:15:34,600 --> 00:15:37,400
All right, so that's the offset that we would need to add.

316
00:15:38,600 --> 00:15:41,800
So what I want to do here is then say okay the size that they

317
00:15:41,800 --> 00:15:47,800
requested I now have to assume that I want that size to be inflated by

318
00:15:47,800 --> 00:15:50,900
however much I need to align because remember we are trying to see.

319
00:15:50,900 --> 00:15:53,100
We're trying to make sure that we have enough room in the buffer.

320
00:15:53,100 --> 00:15:57,300
We need to include however much motion we're doing for that alignment

321
00:15:57,300 --> 00:15:58,900
so that we can properly track the size.

322
00:15:59,400 --> 00:16:01,000
So we go ahead and move the size up there.

323
00:16:01,300 --> 00:16:03,800
We did assert to make sure that we have still room in our Arena

324
00:16:03,800 --> 00:16:06,100
because remember we don't allocate any more space currently we just

325
00:16:06,100 --> 00:16:07,000
use the space that we have.

326
00:16:07,000 --> 00:16:07,800
So if anyone

327
00:16:08,600 --> 00:16:11,500
Overflows that that means we've hit an error condition and things are

328
00:16:11,500 --> 00:16:12,200
very bad.

329
00:16:14,200 --> 00:16:16,000
And so then off we go, right?

330
00:16:16,900 --> 00:16:22,100
So when we do this, our result pointer, then the actual, the actual

331
00:16:22,100 --> 00:16:25,000
result value is just going to be the result pointer plus the alignment

332
00:16:25,000 --> 00:16:26,400
offset, right?

333
00:16:27,100 --> 00:16:30,200
And that's going to be turned into a void pointer.

334
00:16:30,700 --> 00:16:31,100
Here we go.

335
00:16:32,800 --> 00:16:37,400
What what are you complaining about Arena base?

336
00:16:37,600 --> 00:16:38,100
Yes, right.

337
00:16:38,200 --> 00:16:40,700
Sorry, forgot to change that into result pointer.

338
00:16:41,200 --> 00:16:41,700
There we go.

339
00:16:44,100 --> 00:16:46,300
And result pointer.

340
00:16:48,700 --> 00:16:51,000
Okay, so just going over this one more time.

341
00:16:51,000 --> 00:16:52,500
And we can make this a little bit more efficient.

342
00:16:52,500 --> 00:16:55,900
But this is we don't necessarily care a huge amount how efficient this

343
00:16:55,900 --> 00:16:57,900
particular routine is at least not at the moment.

344
00:16:58,600 --> 00:17:01,300
So again, we just want to take a look at where we would put this

345
00:17:01,300 --> 00:17:01,600
thing.

346
00:17:01,600 --> 00:17:03,700
This is the current location that it would go.

347
00:17:04,400 --> 00:17:07,400
We want to make sure that we can actually align it.

348
00:17:07,400 --> 00:17:11,300
So, we say, okay, if there is some residual there, if it's not

349
00:17:11,300 --> 00:17:15,099
aligned, see how much we'd have to add to bring it up to alignment,

350
00:17:15,200 --> 00:17:15,700
right?

351
00:17:15,900 --> 00:17:17,800
We then increase the size by that much.

352
00:17:19,500 --> 00:17:23,099
And then we just do our assertion to make sure that we can fit that,

353
00:17:23,700 --> 00:17:24,599
you know, in here.

354
00:17:25,800 --> 00:17:30,000
We then add in the that new amount as the amount that's actually used

355
00:17:30,000 --> 00:17:35,500
in the arena and we return that pointer so we can go ahead and run

356
00:17:35,500 --> 00:17:43,300
that election step through that routine just to maybe show you what's

357
00:17:43,300 --> 00:17:47,000
happening in the actual binary code.

358
00:17:47,100 --> 00:17:50,800
I feel like we're probably still building in 02.

359
00:17:50,800 --> 00:17:53,400
Let's switch this downshift to debug here.

360
00:17:56,600 --> 00:17:59,700
Okay, so here we are in push size, right?

361
00:18:00,800 --> 00:18:04,100
And if we take a look at what that result pointer would be right.

362
00:18:04,100 --> 00:18:05,000
Here's the soups.

363
00:18:05,000 --> 00:18:06,100
Here's the result pointer.

364
00:18:08,900 --> 00:18:11,100
I'm going to go ahead and also show.

365
00:18:11,100 --> 00:18:12,800
Here we go.

366
00:18:12,900 --> 00:18:14,100
There's that result pointer.

367
00:18:14,800 --> 00:18:18,000
And I'm going to also show the memory Arena, right.

368
00:18:18,000 --> 00:18:20,200
So you can see, this is how big it is.

369
00:18:20,200 --> 00:18:23,200
We haven't used any of it yet, and this is the base pointer, which is

370
00:18:23,200 --> 00:18:24,700
where we're at the moment.

371
00:18:24,900 --> 00:18:27,800
So we come through here, we build that alignment, Mass, where I like I

372
00:18:27,800 --> 00:18:30,900
said, it's three exactly what we're expecting for an alignment of for.

373
00:18:31,800 --> 00:18:34,100
We take a look to see if there's any residual, there isn't because

374
00:18:34,100 --> 00:18:36,400
this is already aligned 24.

375
00:18:37,100 --> 00:18:38,300
So we don't add

376
00:18:38,500 --> 00:18:39,000
Into the size.

377
00:18:39,000 --> 00:18:41,800
And we basically end up doing exactly what we're going to do and we

378
00:18:41,800 --> 00:18:43,300
produce a buffer pointer.

379
00:18:43,300 --> 00:18:47,800
That's that's right, where where the base is, right?

380
00:18:48,200 --> 00:18:51,000
And so I feel like that's probably working just fine, but then, of

381
00:18:51,000 --> 00:18:53,500
course, we still haven't solved our problem because we're not actually

382
00:18:53,500 --> 00:18:54,800
passing an alignment in there.

383
00:18:55,000 --> 00:18:58,400
We're just letting everything be aligned to 4 and we need those ground

384
00:18:58,400 --> 00:19:01,100
tiles to be aligned to 16.

385
00:19:01,700 --> 00:19:03,900
So let's go ahead and do that in make empty bitmap.

386
00:19:03,900 --> 00:19:06,900
When we do this precise here, what I'd like to do.

387
00:19:07,900 --> 00:19:08,300
Let's go.

388
00:19:08,400 --> 00:19:11,500
Back in to hammer that H, we take a look at the push size here.

389
00:19:11,500 --> 00:19:15,300
Now, I want to make sure we can use this VAR.

390
00:19:15,600 --> 00:19:19,900
Make make sure we can use these push sizes.

391
00:19:20,400 --> 00:19:21,800
We can always specify an alignment.

392
00:19:21,800 --> 00:19:24,100
So what I'm going to do is say that after the things that you have to

393
00:19:24,100 --> 00:19:29,800
specify in these macros, what I'd like to do is specify the VAR args

394
00:19:29,800 --> 00:19:30,300
stuff.

395
00:19:30,700 --> 00:19:33,200
I'd like to specify you know put whatever you want the end of this

396
00:19:33,200 --> 00:19:36,200
macro and it'll just get sort of stuck on to the end.

397
00:19:36,500 --> 00:19:38,300
Now if I'm not

398
00:19:38,400 --> 00:19:39,100
Mistaken.

399
00:19:39,100 --> 00:19:42,600
There's some nonsense that only happens with msv.

400
00:19:42,600 --> 00:19:49,900
See it's like you need to use the paste operator or something like

401
00:19:49,900 --> 00:19:59,300
this, or maybe it's GCC and it's, yeah, it's this syntax right here.

402
00:19:59,700 --> 00:20:07,300
So, I do not remember which one doesn't work, and which one does work?

403
00:20:08,400 --> 00:20:14,000
Whether it's VCC where the weather's ccrm SVC, but point being,

404
00:20:14,300 --> 00:20:18,700
there's a special case that happens when you don't when someone might

405
00:20:18,700 --> 00:20:23,200
not include any additional arguments and there's different ways that

406
00:20:23,200 --> 00:20:23,800
you do it.

407
00:20:23,800 --> 00:20:26,600
And so I believe this is the one that works on everything.

408
00:20:26,900 --> 00:20:30,000
It's what I remember and it looks like bunch of random people on stock

409
00:20:30,000 --> 00:20:31,000
exchange, or talking about.

410
00:20:31,000 --> 00:20:35,500
I don't know, or sorry, stock overflow, so I'm not entirely certain,

411
00:20:35,800 --> 00:20:37,600
but that was my recollection anyway.

412
00:20:38,400 --> 00:20:43,300
So that's the way we're going to do it for now but we'll have to rely

413
00:20:43,300 --> 00:20:47,100
on some people who compiled on other platforms to tell us if that's

414
00:20:47,100 --> 00:20:47,400
okay.

415
00:20:47,400 --> 00:20:52,300
So there you go, we've got our VAR spacing and and that's just I don't

416
00:20:52,300 --> 00:20:54,400
even know exactly why this syntax came about.

417
00:20:54,400 --> 00:20:57,000
But basically just saying take these guys and stick them on the end

418
00:20:57,000 --> 00:20:57,300
here.

419
00:20:59,100 --> 00:20:59,900
All right, so now I

420
00:21:00,000 --> 00:21:05,600
Able to say 16 there and I should be able to run more properly.

421
00:21:05,600 --> 00:21:08,800
Hopefully, at least that's the goal and it looks like we're fine now.

422
00:21:08,800 --> 00:21:09,900
So we stop crashing course.

423
00:21:09,900 --> 00:21:10,600
We're in debug mode.

424
00:21:10,600 --> 00:21:15,200
So those ground buffers take extra long to render but that's actually

425
00:21:15,200 --> 00:21:15,400
good.

426
00:21:15,400 --> 00:21:19,400
Because now we can start to look at taking getting things

427
00:21:19,400 --> 00:21:23,200
multi-threaded which we want to do to sort of overlap that work

428
00:21:23,200 --> 00:21:23,500
anyway.

429
00:21:23,500 --> 00:21:26,600
So hopefully we can use the fact that they take a long time actually

430
00:21:27,200 --> 00:21:29,500
to sort of be a little bit of a help to us.

431
00:21:30,000 --> 00:21:31,300
In that endeavor.

432
00:21:31,600 --> 00:21:33,400
All right so hopefully everyone understands how that works.

433
00:21:33,400 --> 00:21:34,200
It's really simple.

434
00:21:34,600 --> 00:21:37,900
You can do this a little bit more efficiently bitwise so that you

435
00:21:37,900 --> 00:21:40,200
don't have to maybe do as much work there.

436
00:21:40,200 --> 00:21:45,200
But hopefully it's fine that way.

437
00:21:45,900 --> 00:21:47,600
It's not that frequently called thing.

438
00:21:47,600 --> 00:21:50,000
So I think leaving an explicit so you can see exactly what's

439
00:21:50,000 --> 00:21:50,500
happening.

440
00:21:50,800 --> 00:21:51,900
It's probably a good idea.

441
00:21:52,100 --> 00:21:52,800
So, there we go.

442
00:21:52,800 --> 00:21:53,800
There's the push size.

443
00:21:55,000 --> 00:22:01,800
All right, so the next thing that we need to address is we don't have

444
00:22:01,800 --> 00:22:05,500
really when we make our transient state right now, we don't really

445
00:22:05,500 --> 00:22:09,800
have any notion of temporary buffers that people can use.

446
00:22:10,300 --> 00:22:15,200
And so the problem that we would run into very quickly if you take a

447
00:22:15,200 --> 00:22:18,100
look at what happens with, with Phil ground chunk here.

448
00:22:19,800 --> 00:22:23,300
Right, what we want to do is we want to be able to call this thing,

449
00:22:23,900 --> 00:22:24,200
right?

450
00:22:24,200 --> 00:22:29,400
We want to be able to call a function that would do work on a cue and

451
00:22:29,400 --> 00:22:33,200
we want the work that's done on the Queue to essentially be this this

452
00:22:33,200 --> 00:22:34,300
whole routine, right?

453
00:22:34,300 --> 00:22:39,200
We want this whole routine to happen on a cue so in some sense what

454
00:22:39,200 --> 00:22:40,000
we're looking for?

455
00:22:40,000 --> 00:22:45,800
Here is something that probably I mean I you know, I don't even know I

456
00:22:45,800 --> 00:22:48,200
guess we could really just do the entire thing.

457
00:22:50,000 --> 00:22:53,300
On it, I'm not sure, but I'm going to I'm going to partition it a

458
00:22:53,300 --> 00:22:57,700
little bit at the moment just because I'm not sure how much we wanted

459
00:22:57,700 --> 00:23:03,400
to do, but basically what I'd like to do is say, okay, I'm assuming

460
00:23:03,400 --> 00:23:07,200
that it would not be that just queuing this stuff up is not really a

461
00:23:07,200 --> 00:23:08,400
problem, right?

462
00:23:09,000 --> 00:23:13,600
Meaning if what we did, I guess I'll I'll take this guy back out again

463
00:23:13,600 --> 00:23:15,000
here for a second, right?

464
00:23:16,900 --> 00:23:20,200
If what we did was just queue up all the push bitmap things and then

465
00:23:20,200 --> 00:23:22,400
just didn't ever render them, right?

466
00:23:22,400 --> 00:23:24,300
We just didn't ever do anything there.

467
00:23:24,700 --> 00:23:28,000
I'm guessing that if we did that, we would not actually have any

468
00:23:28,000 --> 00:23:29,300
pauses, right?

469
00:23:29,400 --> 00:23:30,600
That's just my assumption.

470
00:23:31,000 --> 00:23:31,700
And I guess, you know what?

471
00:23:31,700 --> 00:23:31,900
I could.

472
00:23:31,900 --> 00:23:34,900
Also, let me, let me go ahead and put ourselves back in here just so I

473
00:23:34,900 --> 00:23:39,400
could be double sure that we wouldn't have any pauses or anything like

474
00:23:39,400 --> 00:23:42,200
this, so, get render entity basis.

475
00:23:42,800 --> 00:23:43,500
Let's go ahead and

476
00:23:45,200 --> 00:23:45,900
Back in there.

477
00:23:47,200 --> 00:23:48,100
And so, here we go.

478
00:23:48,100 --> 00:23:49,300
We're walking around.

479
00:23:50,800 --> 00:23:52,500
And I don't feel like we've got any problems.

480
00:23:52,500 --> 00:23:56,800
I'll go ahead and compile in 02 as well.

481
00:24:02,000 --> 00:24:03,600
And I feel like we're pretty good there, right?

482
00:24:03,600 --> 00:24:07,900
We're definitely not hitting any of those really big long hiccups so I

483
00:24:07,900 --> 00:24:11,900
think we're probably fine there so that's all good.

484
00:24:12,400 --> 00:24:16,300
So what that means is we could we can leave part of what we're doing

485
00:24:16,600 --> 00:24:19,900
synchronous, which might be beneficial to us, depending on how we want

486
00:24:19,900 --> 00:24:23,200
to do things because we might not want to have to lock areas of the

487
00:24:23,200 --> 00:24:25,700
simulation or other things like this, that might be involved.

488
00:24:25,700 --> 00:24:29,300
When we're actually pulling out this stuff like right now, we could

489
00:24:29,300 --> 00:24:31,700
totally do all of this asynchronous, but in the future,

490
00:24:31,900 --> 00:24:34,800
If we were looking at things like where entities were in drawing stuff

491
00:24:34,800 --> 00:24:38,700
like that that might cause us have to lock some things that we don't

492
00:24:38,700 --> 00:24:40,300
want to lock or who knows what else.

493
00:24:40,600 --> 00:24:44,000
And so I would like to make it so that this could run synchronous

494
00:24:44,100 --> 00:24:49,300
produce the sort of the the the thing that needs to actually get

495
00:24:49,300 --> 00:24:51,000
spawned and then spawn it.

496
00:24:51,900 --> 00:24:56,900
So essentially what will happen is just this part right here will get

497
00:24:56,900 --> 00:25:00,200
pushed onto the separate thread and then we'll be fine.

498
00:25:00,500 --> 00:25:01,600
And what you can see though,

499
00:25:01,800 --> 00:25:05,300
Oh, is if you take a look at how this is working, you can see why this

500
00:25:05,300 --> 00:25:09,200
would be a problem because right now, we've sort of created temporary

501
00:25:09,200 --> 00:25:14,000
memory for this render group to store those commands, Okay?

502
00:25:14,300 --> 00:25:18,000
And then we end the temporary memory block right after we do this.

503
00:25:18,000 --> 00:25:20,100
This tiled render group to Output.

504
00:25:20,400 --> 00:25:24,300
So if this were to become an overlapped operation, that's going to

505
00:25:24,300 --> 00:25:29,000
execute for a period of time, we can't very well release the memory

506
00:25:29,000 --> 00:25:29,400
for it.

507
00:25:29,400 --> 00:25:31,500
Right after we spawn that sort of

508
00:25:32,000 --> 00:25:32,400
Running.

509
00:25:32,400 --> 00:25:33,000
Right?

510
00:25:33,000 --> 00:25:36,000
Because we basically be getting rid of the memory out from under it

511
00:25:36,000 --> 00:25:39,100
and it'll still be using that memory and it'll just go crash or who

512
00:25:39,100 --> 00:25:41,700
know because it will read garbage from there or something as we

513
00:25:41,700 --> 00:25:42,400
overwrite it.

514
00:25:46,000 --> 00:25:52,600
So, what we need to do there is we need to have some way.

515
00:25:54,100 --> 00:25:59,200
To have like a temporary storage area, where we can put these things

516
00:25:59,600 --> 00:26:06,200
so that the background task is capable of doing it without having, you

517
00:26:06,200 --> 00:26:09,100
know, without essentially getting overwritten, if that makes sense.

518
00:26:10,400 --> 00:26:14,200
So if we want to do that, it's not probably going to be too difficult

519
00:26:14,200 --> 00:26:14,600
to do.

520
00:26:14,600 --> 00:26:17,300
Let's just take a look at how we might go about doing that.

521
00:26:17,500 --> 00:26:21,500
If we go take a look at the transient State here, right?

522
00:26:22,000 --> 00:26:25,400
What I'd like to do is just say well, okay, we've got the transient

523
00:26:25,400 --> 00:26:27,400
State and we have a memory arena in there.

524
00:26:27,800 --> 00:26:32,000
What I'd like to do is introduce the concept of sub Arenas that work

525
00:26:32,000 --> 00:26:34,000
inside a single Arena, right?

526
00:26:34,200 --> 00:26:37,100
So basically, I can take it Arena and I can break it up into smaller

527
00:26:37,100 --> 00:26:37,500
Arenas.

528
00:26:37,500 --> 00:26:39,900
So that if I have people who are doing work and needs,

529
00:26:40,100 --> 00:26:43,300
Space for it but they all need to be operating at the same time, I can

530
00:26:43,300 --> 00:26:46,600
just pre segment up my memory into a couple different chunks and they

531
00:26:46,600 --> 00:26:49,100
can each have a chunk and do whatever they want in there and I know

532
00:26:49,100 --> 00:26:51,000
that they won't conflict, right?

533
00:26:51,200 --> 00:26:54,100
So there doesn't have to be any locking or any thinking about it.

534
00:26:54,300 --> 00:26:55,900
There doesn't have to be any overhead introduced.

535
00:26:55,900 --> 00:26:59,100
I know that I can just if I have some bounds on how much space those

536
00:26:59,100 --> 00:26:59,900
people might need.

537
00:27:00,200 --> 00:27:02,700
I know I can just pre segments and let them go and they'll be no

538
00:27:02,700 --> 00:27:05,500
performance penalties for me, right?

539
00:27:06,800 --> 00:27:10,100
And also no possibilities for bugs with like synchronization or

540
00:27:10,100 --> 00:27:10,900
something like this.

541
00:27:12,100 --> 00:27:14,900
So what I want to do is start introducing this, so I want to have a

542
00:27:14,900 --> 00:27:20,500
memory Arena here, that's going to basically you know, maybe and maybe

543
00:27:20,500 --> 00:27:24,200
even a couple of them which will be foreground chunk filling, right?

544
00:27:24,200 --> 00:27:27,900
And so we'll call this something like you know this memory Arena will

545
00:27:27,900 --> 00:27:33,300
be the ground chunk render groups or something.

546
00:27:34,000 --> 00:27:36,200
Arena's ground chunk.

547
00:27:37,500 --> 00:27:42,600
Arena's, I'm not sure but we can basically say we want a couple of

548
00:27:42,600 --> 00:27:43,100
these.

549
00:27:43,500 --> 00:27:47,600
We want a few Arenas in here that we'll use for ground chunks, right?

550
00:27:48,700 --> 00:27:51,400
and then what I'd like to do is

551
00:27:53,900 --> 00:27:59,300
Have some notion of a rolling count, hear something that will allow me

552
00:27:59,300 --> 00:28:01,300
to cycle through using these Arena.

553
00:28:01,300 --> 00:28:05,300
So that I can fill a couple of them, like, I can kick off a couple of

554
00:28:05,300 --> 00:28:08,400
them and know that they'll get worked on.

555
00:28:08,400 --> 00:28:12,000
And then, as they are retired, I want to be able to know when I can

556
00:28:12,000 --> 00:28:14,200
use another one, right?

557
00:28:15,200 --> 00:28:16,000
If that makes sense.

558
00:28:16,900 --> 00:28:22,600
So I don't have any specific idea about how I want to do that.

559
00:28:24,700 --> 00:28:26,200
Maybe something like this?

560
00:28:26,200 --> 00:28:26,600
I don't know.

561
00:28:26,600 --> 00:28:30,400
I mean, I don't actually I could just even make it so that it's always

562
00:28:30,400 --> 00:28:32,100
just at the beginning of the Arena.

563
00:28:32,200 --> 00:28:36,600
I'm not sure you think about this for a second.

564
00:28:39,400 --> 00:28:42,500
Hmm.

565
00:28:43,800 --> 00:28:44,700
Hmm.

566
00:28:47,200 --> 00:28:52,900
Yeah, well I'm going to push ahead on this a little bit.

567
00:28:55,300 --> 00:28:59,100
But I'm starting to get a slight sense that I want to do something a

568
00:28:59,100 --> 00:29:00,600
little more interesting here, but will.

569
00:29:00,900 --> 00:29:02,400
In fact, I'm just going to go ahead and say this.

570
00:29:02,600 --> 00:29:06,600
I'm going to say that we want something that's like, you know, a task

571
00:29:06,600 --> 00:29:08,100
with memory or something like that.

572
00:29:08,600 --> 00:29:11,200
And I want to just go ahead and put that in here, right?

573
00:29:11,400 --> 00:29:15,600
So it basically has an arena that it can use to do stuff.

574
00:29:17,100 --> 00:29:21,000
And then it can have like, you know, a being used, right?

575
00:29:21,000 --> 00:29:26,700
So something that says whether it is actually currently in use or not,

576
00:29:26,900 --> 00:29:27,500
right?

577
00:29:28,700 --> 00:29:31,700
And so we'll go ahead and say that we have a, you know, task with

578
00:29:31,700 --> 00:29:35,800
memory and then we'll just have some some tasks here.

579
00:29:36,300 --> 00:29:39,200
And I just, you know, I want some of those I want four of those or

580
00:29:39,200 --> 00:29:40,000
something like this.

581
00:29:40,700 --> 00:29:46,200
So if I have something like that, then I can go ahead and make sure

582
00:29:46,300 --> 00:29:49,600
That I can, you know, create some tasks and I can kind of Spawn them

583
00:29:49,600 --> 00:29:50,200
off there.

584
00:29:50,400 --> 00:29:53,700
And then I know that that, you know, I can, when there are some of

585
00:29:53,700 --> 00:29:55,700
these that are free, I can use them, right?

586
00:29:55,700 --> 00:29:57,800
And we can make more of them as we need.

587
00:29:58,600 --> 00:29:59,900
So let me go ahead and

588
00:30:00,000 --> 00:30:02,500
Just crew make a thing that creates one of those.

589
00:30:04,500 --> 00:30:05,200
Let's see here.

590
00:30:05,800 --> 00:30:10,400
So when I do this initialize Arena stuff, what I want to do now is I

591
00:30:10,400 --> 00:30:14,000
want to say, I want to be able to make a bunch of these tasks.

592
00:30:14,000 --> 00:30:18,700
In fact, I might go ahead and put that up here at sort of a more, you

593
00:30:18,700 --> 00:30:22,500
know, right after we do this initialization, what I want to do now is

594
00:30:22,500 --> 00:30:24,000
actually create those, right?

595
00:30:24,000 --> 00:30:26,000
So I'll go through and I'll say

596
00:30:28,200 --> 00:30:36,600
Okay, for each task, that I have I'm going to go through and that's

597
00:30:36,600 --> 00:30:40,200
how our maybe these are re count everybody I have.

598
00:30:42,200 --> 00:30:45,700
And for each one, I want to initialize this thing.

599
00:30:45,700 --> 00:30:51,800
So task with memory, so we have a task, trance State, tasks, plus task

600
00:30:51,800 --> 00:30:52,300
index.

601
00:30:53,400 --> 00:30:58,400
So for each task we're going to say that it's not being used obviously

602
00:30:58,800 --> 00:31:02,200
and it's a Rena is going to be whatever.

603
00:31:02,200 --> 00:31:06,800
This this guy has here, this trance this Tran Arena.

604
00:31:07,000 --> 00:31:10,300
What I want to do is have something where I can I can specify that.

605
00:31:10,300 --> 00:31:12,000
I want to have a Submariner, right?

606
00:31:12,100 --> 00:31:15,900
So I want to take that transient Arena and I want to base to be able

607
00:31:15,900 --> 00:31:19,600
to carve out some subsection of it, right?

608
00:31:19,600 --> 00:31:22,900
So, you know, maybe I want my task to have a 1

609
00:31:23,100 --> 00:31:26,600
Like stack effectively that they can work with, right?

610
00:31:27,300 --> 00:31:30,700
That they can some allocate out of and so that will create that,

611
00:31:30,700 --> 00:31:31,000
right?

612
00:31:31,000 --> 00:31:34,700
That will create that that's ever Rena and I guess to keep it in line

613
00:31:34,700 --> 00:31:35,900
with the way that I was doing it before.

614
00:31:35,900 --> 00:31:39,600
It looks like we basically point to an arena and say fill this out.

615
00:31:40,800 --> 00:31:42,200
And so that's what this would do here.

616
00:31:44,200 --> 00:31:44,500
All right.

617
00:31:44,500 --> 00:31:47,100
So hopefully that's pretty clear how that would work.

618
00:31:47,600 --> 00:31:50,500
And so when I do feel ground chunk, right?

619
00:31:51,300 --> 00:31:54,900
And we take a look at how that actually works at the moment.

620
00:31:54,900 --> 00:31:57,800
We don't this this routine again is kind of placeholder.

621
00:31:57,800 --> 00:32:00,600
It's just kind of a silly routine so we won't really play with how

622
00:32:00,600 --> 00:32:02,100
these are getting kicked off yet.

623
00:32:02,300 --> 00:32:05,400
We'll think about how we want to do those maybe a little bit later on,

624
00:32:05,700 --> 00:32:08,500
but we'll assume that once someone has called Phil ground chunk.

625
00:32:08,600 --> 00:32:12,200
What we essentially want to do now, is when we call Phil ground Chunk,

626
00:32:12,200 --> 00:32:13,900
we want to get

627
00:32:14,300 --> 00:32:16,100
Unavailable task, right?

628
00:32:16,200 --> 00:32:19,800
And then what we want to do is is our begin temporary memory and

629
00:32:19,800 --> 00:32:21,300
temporary memory stuff.

630
00:32:21,300 --> 00:32:26,500
We actually want that to be part of the task sort of completion

631
00:32:26,500 --> 00:32:27,500
notion, right?

632
00:32:28,900 --> 00:32:33,700
so we want to do is say alright let's go ahead and have maybe two

633
00:32:33,700 --> 00:32:38,200
things here which is you know,

634
00:32:39,400 --> 00:32:40,600
Trying to think of how to say this.

635
00:32:40,800 --> 00:32:46,500
So essentially what I want to do is make it implicit in how this thing

636
00:32:46,500 --> 00:32:47,900
works, right?

637
00:32:47,900 --> 00:32:52,000
That I'll just when I begin a task, all the memory is going to be

638
00:32:52,000 --> 00:32:54,300
temporary because when the task is over or that memory will get

639
00:32:54,300 --> 00:32:55,700
flushed, right?

640
00:32:55,700 --> 00:32:57,100
That's what I want to have happen.

641
00:32:57,800 --> 00:32:59,600
So what I'm going to do here is it might ask with

642
00:33:00,000 --> 00:33:05,300
Thing, I take the temporary memory and this will just be like, the,

643
00:33:05,400 --> 00:33:07,900
the memory flush or something.

644
00:33:08,700 --> 00:33:12,100
What I want to do is, you know, when you say begin task, they'll be a

645
00:33:12,100 --> 00:33:13,600
way to begin a task here.

646
00:33:16,000 --> 00:33:18,000
And then they'll be a way to end the task.

647
00:33:20,100 --> 00:33:20,600
Memory.

648
00:33:22,800 --> 00:33:23,400
Like so.

649
00:33:24,200 --> 00:33:27,500
And so, what I want to do is this begin temporary memory stuff here.

650
00:33:27,800 --> 00:33:31,400
That will not actually be happening outside in the ground chunk.

651
00:33:31,400 --> 00:33:34,100
That will be happening when we do the begin test with memory.

652
00:33:34,300 --> 00:33:37,300
So in the transient State, I'll take the trance State.

653
00:33:37,300 --> 00:33:40,100
Here will do this.

654
00:33:40,100 --> 00:33:43,800
Begin task will actually do the Contemporary somewhere else and then

655
00:33:43,800 --> 00:33:48,100
we'll do this and temporary memory somewhere else as well like.

656
00:33:48,100 --> 00:33:48,500
So

657
00:33:49,400 --> 00:33:54,000
Yeah, and so, then our call back here that actually does this work,

658
00:33:54,300 --> 00:33:58,500
the to tiled render, work stuff, that will actually happen.

659
00:34:00,900 --> 00:34:04,800
When that actually does the work, it will call end task with memory

660
00:34:05,100 --> 00:34:05,700
when it's done.

661
00:34:06,400 --> 00:34:09,600
Okay, so we'll get rid of this, okay?

662
00:34:10,900 --> 00:34:19,400
Okay, so what I want to do is I want to go ahead and say that

663
00:34:21,000 --> 00:34:26,400
This thing when I do feel ground chunk, I'm going to use this begin

664
00:34:26,400 --> 00:34:27,699
task with memory thing.

665
00:34:28,000 --> 00:34:29,900
I'm going to use an if around it.

666
00:34:30,199 --> 00:34:35,300
So I'm going to say if begin tasked with memory then we will actually

667
00:34:35,300 --> 00:34:38,500
do this ground buffer filling stuff here, right?

668
00:34:39,600 --> 00:34:40,699
And off we go.

669
00:34:42,199 --> 00:34:44,199
Wish I had some tissues here but I don't know.

670
00:34:44,199 --> 00:34:46,100
Well, I guess I'll just remain stuffy.

671
00:34:48,600 --> 00:34:49,300
You know how it is.

672
00:34:50,199 --> 00:34:53,600
Anyway, so we've got a couple things that we want to look at here, but

673
00:34:53,600 --> 00:34:55,100
I'll take them one at a time.

674
00:34:55,699 --> 00:34:58,300
But basically, what I want to do is say begin to ask memory and only

675
00:34:58,300 --> 00:34:59,300
if that returns true.

676
00:34:59,300 --> 00:35:02,500
Do I actually do the work of filling the ground chunk?

677
00:35:02,600 --> 00:35:07,900
Okay, the reason that I want to do it that way is because when I do

678
00:35:07,900 --> 00:35:09,300
begin task with memory,

679
00:35:10,300 --> 00:35:14,600
It's possible that there are already too many tasks running and I

680
00:35:14,600 --> 00:35:19,000
don't want to just launch like a ton of tasks, I only want to launch a

681
00:35:19,000 --> 00:35:23,000
certain amount of tasks enough task that I have time to do or whatever

682
00:35:23,000 --> 00:35:24,500
so I want to keep it limited.

683
00:35:24,500 --> 00:35:27,600
So what I'd like to do is make it so that when you go to spawn a task

684
00:35:27,600 --> 00:35:30,700
you may or may not be able to spawn that task and you just have to

685
00:35:30,700 --> 00:35:31,300
deal with it, right?

686
00:35:31,300 --> 00:35:35,500
So if you're trying to put on work into a background Q, you can't just

687
00:35:35,500 --> 00:35:36,500
Spam it out there.

688
00:35:36,500 --> 00:35:38,100
You've got to actually think about it a little bit.

689
00:35:38,100 --> 00:35:40,000
Now we could do stuff that

690
00:35:40,300 --> 00:35:42,800
And involve that like we could make it so that they're just build up a

691
00:35:42,800 --> 00:35:43,200
work queue.

692
00:35:43,200 --> 00:35:46,700
But if that's the case, you know, you run the risk of like how do you

693
00:35:46,700 --> 00:35:49,100
know that thing isn't growing out of control and so on and so forth.

694
00:35:49,100 --> 00:35:51,300
So I'm going to keep it a little bit more under control in that for

695
00:35:51,300 --> 00:35:56,000
now and just say if you, you know this will basically tell you if you

696
00:35:56,000 --> 00:35:59,400
are able to get a task or if you are not okay.

697
00:36:01,200 --> 00:36:05,500
And so what we'll do is we'll just Loop in here, we'll Loop over the

698
00:36:05,500 --> 00:36:09,000
tests that are available, so we'll say, task, invests from from there

699
00:36:09,000 --> 00:36:11,100
to the task count, right?

700
00:36:13,600 --> 00:36:15,000
Right count, there we go.

701
00:36:16,500 --> 00:36:17,900
Plus plus task index.

702
00:36:19,000 --> 00:36:22,500
And what we'll do is, we'll go ahead and grab one of those tasks

703
00:36:22,500 --> 00:36:25,500
memories out of there and we'll see.

704
00:36:27,900 --> 00:36:29,100
For each one of those.

705
00:36:33,100 --> 00:36:36,100
We will see if it's being used.

706
00:36:37,000 --> 00:36:37,600
Right?

707
00:36:38,800 --> 00:36:42,700
And if it's being I should say, if it's not being used, if it's not

708
00:36:42,700 --> 00:36:44,500
being used, then we will say that.

709
00:36:44,500 --> 00:36:48,700
We have found a task that we can use and that is the one that we will

710
00:36:48,700 --> 00:36:49,100
use.

711
00:36:49,200 --> 00:36:49,600
Right?

712
00:36:49,600 --> 00:36:52,200
In fact, I guess the found task thing, what I really probably want to

713
00:36:52,200 --> 00:36:55,000
do here is say task with memory, right?

714
00:36:56,600 --> 00:36:57,800
Probably want to do it this way.

715
00:36:57,800 --> 00:37:01,300
Instead of a pool probably want to just return the task, right?

716
00:37:01,700 --> 00:37:02,200
So there's the

717
00:37:02,600 --> 00:37:04,000
Ask right?

718
00:37:04,600 --> 00:37:13,100
And this go ahead and does found task equals task and off we go,

719
00:37:13,400 --> 00:37:13,800
right?

720
00:37:14,300 --> 00:37:18,100
So assuming that it finds the task, it'll also do it can also do it

721
00:37:18,100 --> 00:37:18,600
here.

722
00:37:19,400 --> 00:37:23,900
It'll begin the temporary memory for the task, so we have test memory

723
00:37:23,900 --> 00:37:27,600
flush right, memory flush.

724
00:37:29,000 --> 00:37:30,700
Oops, Arena.

725
00:37:31,800 --> 00:37:33,100
So there's that task Arena.

726
00:37:33,300 --> 00:37:37,100
I'll basically say I'm starting a new temporary memory set for this

727
00:37:37,100 --> 00:37:37,500
guy.

728
00:37:37,900 --> 00:37:41,300
I could also here if I wanted to probably I suppose this could

729
00:37:41,300 --> 00:37:46,100
actually be where I also do the end temporary memory but yeah I don't

730
00:37:46,100 --> 00:37:48,100
know if that's AI, don't know if I want to do it that way.

731
00:37:48,100 --> 00:37:49,400
I think I'm gonna not do it that way.

732
00:37:49,600 --> 00:37:53,000
Anyway, so when we find a task, we then go ahead and say we're going

733
00:37:53,000 --> 00:37:54,000
to start using

734
00:37:56,200 --> 00:37:57,300
Sorry memory flash.

735
00:37:57,300 --> 00:37:59,400
We're going to start temporary memory block.

736
00:37:59,400 --> 00:38:02,700
So this whole Arena can get flushed at the end of things and then you

737
00:38:02,700 --> 00:38:06,300
know, when we're done here and we do the end task of memory will do

738
00:38:06,300 --> 00:38:08,300
the memory flush here, like so

739
00:38:12,000 --> 00:38:12,500
Right.

740
00:38:14,800 --> 00:38:16,800
And that will just go ahead and flush that out.

741
00:38:19,200 --> 00:38:23,500
And so that's really mostly what I need to do here, right?

742
00:38:23,500 --> 00:38:27,900
And it will return that task with memory back to the guy so that it

743
00:38:27,900 --> 00:38:29,500
can do whatever it wants to do with it.

744
00:38:30,300 --> 00:38:33,200
And if it doesn't find one that it's just going to return 0, right?

745
00:38:33,900 --> 00:38:39,000
So then when I do that, that Grand Funk, I've got the task with

746
00:38:39,000 --> 00:38:41,000
memory, here's my task.

747
00:38:41,500 --> 00:38:45,400
And so if I get the task then I'm going to go ahead and do this stuff

748
00:38:45,400 --> 00:38:47,100
that I'm going to do, right.

749
00:38:48,400 --> 00:38:48,800
Okay.

750
00:38:49,700 --> 00:38:53,700
So we've got some things that we'll have to deal with a little bit of,

751
00:38:53,900 --> 00:38:55,200
you know, as well in there.

752
00:38:55,200 --> 00:38:57,800
We'll talk about this a little bit later, but then when we go to do,

753
00:38:58,200 --> 00:38:59,800
tile render group to out,

754
00:39:00,000 --> 00:39:03,600
What we want to do is this is the thing that we wanted to put kind of

755
00:39:03,600 --> 00:39:07,300
on the other the background threads here.

756
00:39:07,400 --> 00:39:10,600
Right, what we want to do is make this the on the background threads,

757
00:39:10,800 --> 00:39:13,700
what I'd like to do is well, when we do the tiled render group to

758
00:39:13,700 --> 00:39:18,700
Output, I don't know if we have not think we have any way to do it non

759
00:39:18,700 --> 00:39:19,600
tiled right now.

760
00:39:20,000 --> 00:39:23,400
So what I'd like to do is also have it so you can see that we kind of

761
00:39:23,400 --> 00:39:27,500
kept it in here, we kept it so that it was possible for it to do it.

762
00:39:28,500 --> 00:39:30,700
Non tiled still, right?

763
00:39:30,700 --> 00:39:35,400
So if we do tiled render group to Output, we can actually do, we could

764
00:39:35,400 --> 00:39:36,400
actually do something here.

765
00:39:36,400 --> 00:39:38,600
Where we do, you know, render group to output.

766
00:39:38,600 --> 00:39:42,600
And we can actually have a pool here which is like tiled, you know, or

767
00:39:42,700 --> 00:39:46,200
multi-threaded or something like this, right?

768
00:39:47,100 --> 00:39:49,600
And what we can do is assuming that we do want to do it

769
00:39:49,600 --> 00:39:51,800
multi-threaded, or if we don't want to do it multi-threaded, we can

770
00:39:51,800 --> 00:39:54,300
actually do it.

771
00:39:54,600 --> 00:39:56,600
Essentially both ways, right?

772
00:39:56,700 --> 00:39:58,100
We can have a thing that does does both.

773
00:39:58,300 --> 00:40:03,100
Times trying to think of what the easiest way to do that is I wonder

774
00:40:03,100 --> 00:40:05,400
if it's easier to just actually have a separate routine.

775
00:40:05,500 --> 00:40:06,700
I think it might be though.

776
00:40:06,900 --> 00:40:09,300
So, looking at it, it looks like it's actually easier to have a

777
00:40:09,300 --> 00:40:11,500
separate routine, so I would leave that as tiled.

778
00:40:11,800 --> 00:40:16,600
I'm thinking and go in here and say, all right, there's also just

779
00:40:17,100 --> 00:40:20,300
render group to Output that's non tiled, right?

780
00:40:20,800 --> 00:40:24,900
The way we sort of had it before, and what that does is it still does

781
00:40:24,900 --> 00:40:27,900
the same stuff but now it's not gonna

782
00:40:28,400 --> 00:40:29,100
Actually.

783
00:40:30,500 --> 00:40:31,800
Do any tiles here at all?

784
00:40:32,000 --> 00:40:32,500
Right.

785
00:40:32,800 --> 00:40:34,300
So it doesn't do any of this stuff.

786
00:40:34,800 --> 00:40:39,900
It'll still at least verify the output memory, is the same there.

787
00:40:41,500 --> 00:40:42,400
Let's see here.

788
00:40:42,600 --> 00:40:49,000
We could also assert that the width is proper, I guess the way I could

789
00:40:49,000 --> 00:40:53,800
do this is is actually do it like this right where we just say that.

790
00:40:55,500 --> 00:40:58,800
So, keep these guys in there, get rid of these.

791
00:41:00,700 --> 00:41:02,600
Still do that alignment there.

792
00:41:02,900 --> 00:41:11,800
Get rid of these entirely like so and there we go.

793
00:41:13,800 --> 00:41:14,400
Right.

794
00:41:14,700 --> 00:41:18,300
So this would be the path that does things.

795
00:41:18,800 --> 00:41:27,800
I guess I need one of these work guys so work and this is just me

796
00:41:27,800 --> 00:41:31,100
calling it the same exact thing single-threaded, right?

797
00:41:31,800 --> 00:41:38,400
So we're basically just saying we want the whole region to be in the

798
00:41:38,400 --> 00:41:41,500
cliprect we don't actually care.

799
00:41:41,800 --> 00:41:43,100
I guess this actually

800
00:41:43,700 --> 00:41:44,800
It goes like this.

801
00:41:48,900 --> 00:41:51,200
So I want to pass all that which actually no.

802
00:41:51,200 --> 00:41:53,400
I look at it looks like we don't even need this tile with it.

803
00:41:53,400 --> 00:41:57,200
Looks like that was more something that was done here to make sure

804
00:41:57,200 --> 00:41:59,700
that as we strided, we were always aligned

805
00:42:00,400 --> 00:42:03,400
As we went from tile to tile so actually we don't actually need this.

806
00:42:03,400 --> 00:42:05,100
It looks like we're just good.

807
00:42:05,100 --> 00:42:06,600
We just have to set up a cliff Trek.

808
00:42:06,600 --> 00:42:10,200
That's the whole screen screen in this case, it's the ground buffer

809
00:42:10,200 --> 00:42:11,000
but you know what I mean?

810
00:42:11,900 --> 00:42:16,400
And so then we just fake it and we do tiled render work as if we were

811
00:42:16,400 --> 00:42:17,800
doing a tile.

812
00:42:17,800 --> 00:42:21,000
But really, we don't ever do it actual pile that make sense.

813
00:42:22,100 --> 00:42:29,700
So, we do call this here right, and we can even pass because we're

814
00:42:29,700 --> 00:42:29,900
not,

815
00:42:30,000 --> 00:42:31,800
Using the render queue, right?

816
00:42:31,800 --> 00:42:34,000
The render queue could be passed as 0 here.

817
00:42:34,000 --> 00:42:38,700
If we wanted to, in fact, I guess what we could do is do it like this,

818
00:42:39,000 --> 00:42:39,600
right?

819
00:42:39,600 --> 00:42:43,700
Just so we know that you don't need a render queue to do this, so,

820
00:42:43,700 --> 00:42:44,400
there we go.

821
00:42:46,000 --> 00:42:49,700
And that yeah, that looks more.

822
00:42:49,700 --> 00:42:50,100
Correct.

823
00:42:50,100 --> 00:42:52,800
So you said the runner group there, I mean, a Target.

824
00:42:53,500 --> 00:42:59,900
So, this now needs a way of being called, again, sort of like this,

825
00:42:59,900 --> 00:43:04,000
this needs a way of being called as a separate task so that it can do

826
00:43:04,000 --> 00:43:07,100
everything that needs to do and this guy, of course, also, we never

827
00:43:07,100 --> 00:43:08,200
quite finished.

828
00:43:08,200 --> 00:43:11,000
This impasse with memory, this guy needs to be passed the task, so

829
00:43:11,000 --> 00:43:13,800
they could do this, it needs to flush the memory and then it also

830
00:43:13,800 --> 00:43:15,600
needs to set being used equal to 4.

831
00:43:16,400 --> 00:43:20,600
Right, for good measure, we should probably do one of those complete

832
00:43:20,800 --> 00:43:21,500
things here.

833
00:43:21,500 --> 00:43:25,500
We would probably want to put one one of those complete, you know,

834
00:43:25,500 --> 00:43:30,900
previous rights before future rights, kind of thing that we were doing

835
00:43:30,900 --> 00:43:31,200
right.

836
00:43:31,200 --> 00:43:36,000
One of those read barriers and I feel like

837
00:43:37,500 --> 00:43:42,200
I'm trying to think if we if how necessary that actually is, but it

838
00:43:42,200 --> 00:43:45,300
seems like provided that we actually switch this to be an inline,

839
00:43:45,300 --> 00:43:48,000
which it probably could, because it's very small, right?

840
00:43:48,500 --> 00:43:53,700
It does seem like we probably want that to be in here right now.

841
00:43:53,700 --> 00:43:57,400
That doesn't actually do anything on again on MSNBC, but it's

842
00:43:57,400 --> 00:44:01,000
something that we might want to put in there, you know, a barrier.

843
00:44:01,400 --> 00:44:02,600
Well, you know what it does.

844
00:44:02,900 --> 00:44:04,200
Like I shouldn't say that MSP.

845
00:44:04,200 --> 00:44:05,400
See, it does mean something.

846
00:44:05,600 --> 00:44:07,200
It's just a XXX.

847
00:44:07,300 --> 00:44:09,400
For it doesn't, but it's the read barrier on msv.

848
00:44:09,400 --> 00:44:14,400
See, so if we take a look in here in our handmade platform stuff, and

849
00:44:14,400 --> 00:44:19,300
we want to start sort of putting some things in there to Define these

850
00:44:19,300 --> 00:44:20,800
intrinsics, right.

851
00:44:22,200 --> 00:44:24,900
Actually, I guess we also have an intrinsic, handmade intrinsics file.

852
00:44:25,300 --> 00:44:27,500
We could put them in here as well, right?

853
00:44:27,800 --> 00:44:33,300
So in our handmade intrinsics, we can do a compiler, M SV C and then

854
00:44:33,300 --> 00:44:37,200
we'll do an else where we don't actually know what this thing is yet.

855
00:44:37,500 --> 00:44:38,700
We don't know what it is here.

856
00:44:39,000 --> 00:44:42,100
We should probably could put an error but I'll let it compiled for now

857
00:44:42,300 --> 00:44:43,000
and just put it to do.

858
00:44:43,000 --> 00:44:50,600
Here need to Define these on GCC llvm which is probably the only

859
00:44:50,600 --> 00:44:51,600
platforms that we

860
00:44:51,800 --> 00:44:53,400
Clea also be compiling on besides.

861
00:44:53,400 --> 00:44:54,200
I'm SEC.

862
00:44:54,800 --> 00:44:58,300
So incomplete previous rights before before future rights.

863
00:44:58,700 --> 00:44:59,700
We know that that's

864
00:45:00,100 --> 00:45:02,600
You know right there and we know that that's this guy right?

865
00:45:02,600 --> 00:45:03,300
Right barrier.

866
00:45:06,400 --> 00:45:10,400
I know I put a tea under there, I think I've been working in another

867
00:45:10,400 --> 00:45:14,000
code base a little bit too much, so let's keep going here.

868
00:45:14,000 --> 00:45:16,500
I think we've got about 15 minutes left, according to the clock

869
00:45:16,500 --> 00:45:19,600
because we went pretty late when we were starting.

870
00:45:20,400 --> 00:45:23,900
So do tiled, render work, do tiled render work.

871
00:45:23,900 --> 00:45:27,900
We need to cannot convert.

872
00:45:27,900 --> 00:45:30,700
Argument to write that just needs to be an address.

873
00:45:32,700 --> 00:45:34,200
Already has a body.

874
00:45:34,200 --> 00:45:34,900
That's correct.

875
00:45:34,900 --> 00:45:35,400
It does.

876
00:45:35,400 --> 00:45:37,500
This is actually filled ground chunk work.

877
00:45:39,500 --> 00:45:43,200
And we have to Define these, so that's all good and in tests of memory

878
00:45:43,200 --> 00:45:44,100
needs to take the task.

879
00:45:44,100 --> 00:45:46,800
So, alright, so we're basically putting ourselves in Striking Distance

880
00:45:46,800 --> 00:45:50,900
now to start doing these tasks, which is what we wanted.

881
00:45:51,400 --> 00:45:51,900
All right?

882
00:45:52,000 --> 00:45:54,500
So if you imagine what happens here, we're going to be doing this,

883
00:45:54,600 --> 00:45:56,600
begin task memory stuff, right?

884
00:45:57,100 --> 00:46:00,100
And what we need to do here is when we do this allocate render group

885
00:46:00,400 --> 00:46:02,100
instead of using the Train Arena, right?

886
00:46:02,100 --> 00:46:04,300
There's only this is where the memory was coming from.

887
00:46:04,800 --> 00:46:07,500
We wanted to allocate this, this transitory nothing.

888
00:46:08,000 --> 00:46:08,600
What we want to do.

889
00:46:08,800 --> 00:46:14,300
Now, is we want to go ahead and allocate the render group instead from

890
00:46:14,300 --> 00:46:15,500
the tasks Arena.

891
00:46:15,900 --> 00:46:18,600
So the tasks arena is what we're going to use.

892
00:46:20,100 --> 00:46:24,300
And we probably want to allocate for the render group since we're not

893
00:46:24,300 --> 00:46:25,200
doing anything else.

894
00:46:25,400 --> 00:46:30,400
We probably want to allocate like everything that's in the task Arena,

895
00:46:30,600 --> 00:46:31,100
right?

896
00:46:31,300 --> 00:46:32,400
Because there's nothing else.

897
00:46:32,400 --> 00:46:35,200
We probably want the whole however much the task Arena has.

898
00:46:35,600 --> 00:46:37,900
So when we do the allocate render group, you probably want to do is

899
00:46:37,900 --> 00:46:43,600
like get Arena sighs remaining or something and we'll just allocate

900
00:46:43,600 --> 00:46:45,900
the entire thing to the render group because this doesn't actually

901
00:46:45,900 --> 00:46:47,300
ever allocate anything else.

902
00:46:47,800 --> 00:46:49,600
So it's not like it would ever actually

903
00:46:49,900 --> 00:46:54,600
Need anything else to do, it's rendering so that so that's fine.

904
00:46:55,200 --> 00:46:58,400
So then what we would need to do here inside that task as well.

905
00:47:00,400 --> 00:47:03,300
And I guess that's where our other allocation would come from.

906
00:47:03,700 --> 00:47:06,600
We would need something that allows this to do its work, right?

907
00:47:06,600 --> 00:47:11,500
So we would need a fill ground chunk work structure and that would

908
00:47:11,500 --> 00:47:14,700
have to have the things in it here that we would actually need and you

909
00:47:14,700 --> 00:47:17,700
can see exactly what those are because I've already written out what I

910
00:47:17,700 --> 00:47:19,100
want them to do, right?

911
00:47:19,200 --> 00:47:22,400
So all we need to do is actually have a way of getting those in there,

912
00:47:22,500 --> 00:47:23,100
right?

913
00:47:23,700 --> 00:47:28,100
So you know, render group, we've got the output buffer.

914
00:47:28,200 --> 00:47:29,900
I don't even remember what this thing is.

915
00:47:31,200 --> 00:47:37,000
What's an output buffer render group bitmap buffer?

916
00:47:37,100 --> 00:47:38,200
Is it just buffer?

917
00:47:38,500 --> 00:47:40,000
Is that all we were renting to?

918
00:47:41,000 --> 00:47:42,600
Yeah, I guess it is just buffer.

919
00:47:43,100 --> 00:47:45,700
Yeah, so I guess it's loaded bitmap buffer.

920
00:47:47,100 --> 00:47:50,600
Yeah, I guess looks that way.

921
00:47:51,600 --> 00:47:54,900
So these are the actual things that I need, right?

922
00:47:55,100 --> 00:47:58,300
So if I go ahead and say that, you know, the thing that you pass to

923
00:47:58,300 --> 00:47:59,800
this fill ground chuck,

924
00:48:00,000 --> 00:48:04,300
Work is one of, you know, one of these sort of structs that's got the

925
00:48:04,300 --> 00:48:07,500
stuff in it that it needs then I can just go ahead and pull those out

926
00:48:07,800 --> 00:48:12,500
as it goes and it can do it sort of like clean up at the end.

927
00:48:12,800 --> 00:48:17,200
And of course this thing has to be the last thing because it's going

928
00:48:17,200 --> 00:48:20,400
to sort of it's going to self-destruct basically you know this this

929
00:48:20,400 --> 00:48:22,800
sort of self destructs everything.

930
00:48:22,900 --> 00:48:25,200
So there's no way to recover after that.

931
00:48:25,200 --> 00:48:27,000
Like that's got to be the last thing you do.

932
00:48:28,200 --> 00:48:29,000
When you do stuff.

933
00:48:29,300 --> 00:48:34,300
All right, so if we come down here now, well, actually, yes.

934
00:48:34,300 --> 00:48:38,400
We don't need to do anything in particular quite yet, but we just need

935
00:48:38,400 --> 00:48:39,400
to fill out one of these.

936
00:48:39,400 --> 00:48:42,600
That's thing that tells, you know, that's basically got our work

937
00:48:42,600 --> 00:48:43,400
requests in it.

938
00:48:43,700 --> 00:48:46,400
And so, what I want to do is take the task Arena and I want to just

939
00:48:46,400 --> 00:48:49,200
allocate from that first, so that task Arena.

940
00:48:49,200 --> 00:48:52,600
I'm going to go ahead and do a push struct on the task arena for one

941
00:48:52,600 --> 00:48:56,500
of these feel ground, chunkworks, and then I have that and then I can

942
00:48:56,500 --> 00:48:57,600
fill it out with the things that

943
00:48:57,700 --> 00:48:58,800
Need later on.

944
00:48:59,400 --> 00:49:02,800
So when we get down to the bottom right before everything's over, I

945
00:49:02,800 --> 00:49:06,600
can basically put everything in it so I can put it in the buffer I can

946
00:49:06,600 --> 00:49:07,900
put in the render group.

947
00:49:09,600 --> 00:49:13,000
And I can put in the task, right?

948
00:49:14,300 --> 00:49:15,300
So if I do that,

949
00:49:17,300 --> 00:49:21,700
I should be able to now do exactly what we did in the render group

950
00:49:22,000 --> 00:49:26,700
when we responding a task where we do this sort of thing where I do a

951
00:49:26,700 --> 00:49:27,800
platform at entry.

952
00:49:28,000 --> 00:49:28,600
Right.

953
00:49:29,200 --> 00:49:31,800
I do a platform add entry to the trance State.

954
00:49:31,900 --> 00:49:35,200
We've got that low priority queue, that's for stuff.

955
00:49:35,200 --> 00:49:38,600
That's, that's, you know, happening sort of in the background, I've

956
00:49:38,600 --> 00:49:41,500
got, do Phil Gramm chunk work or whatever it is.

957
00:49:41,500 --> 00:49:42,600
So Phil Gramm chunk.

958
00:49:43,800 --> 00:49:44,300
Work.

959
00:49:45,000 --> 00:49:47,000
And I've got the work order that it needs to do.

960
00:49:47,700 --> 00:49:48,400
So, there we go.

961
00:49:52,000 --> 00:49:53,500
What is he has an address that we go?

962
00:49:54,500 --> 00:49:58,000
So now I just need to implement the other functions that I said that.

963
00:49:58,000 --> 00:50:01,000
I wanted that I haven't actually implemented for the arena.

964
00:50:01,000 --> 00:50:05,000
They're actually pretty straightforward right there.

965
00:50:05,800 --> 00:50:07,000
See if we take a look here.

966
00:50:07,600 --> 00:50:09,400
So here is our Arena structure.

967
00:50:09,400 --> 00:50:11,300
We have a size and a used.

968
00:50:11,500 --> 00:50:15,500
So in order to do a get Arena size, remaining, sort of a thing,

969
00:50:16,000 --> 00:50:18,800
there's not really anything in particular, we would have to do there.

970
00:50:19,100 --> 00:50:20,100
We can just go ahead.

971
00:50:20,500 --> 00:50:24,200
And compute that directly say get Arena size remaining, there's the

972
00:50:24,200 --> 00:50:26,400
arena, right?

973
00:50:27,200 --> 00:50:29,900
And you know, the result,

974
00:50:31,600 --> 00:50:38,300
Is just going to be the used amount, right less.

975
00:50:38,600 --> 00:50:41,200
The used amount is going to be subtracted away from the total size

976
00:50:41,200 --> 00:50:42,000
that it had.

977
00:50:42,000 --> 00:50:45,300
And that's how much space that there is left.

978
00:50:45,300 --> 00:50:50,200
Now, it's a little confusing because actually when I do get a Rena

979
00:50:50,200 --> 00:50:55,200
size remaining, technically, you also need to know what the alignment

980
00:50:55,200 --> 00:50:57,600
is of the thing that you are going to use was.

981
00:50:57,900 --> 00:50:59,800
So I'm going to make this mirror it like this.

982
00:51:00,700 --> 00:51:05,900
So that you can sort of say okay if we were going to do the alignment

983
00:51:05,900 --> 00:51:11,600
also and you know adjust the size that way, what would happen there,

984
00:51:11,600 --> 00:51:11,700
right?

985
00:51:11,700 --> 00:51:14,800
If it was going to be a line because remember alignment can eat up a

986
00:51:14,800 --> 00:51:16,000
little bit of that.

987
00:51:16,200 --> 00:51:20,200
And so you know, if I was to do that, what I want to do here is

988
00:51:20,200 --> 00:51:25,200
essentially I'd want this code to give me some indication.

989
00:51:26,200 --> 00:51:29,200
And I want to be able to reuse this code, basically, right.

990
00:51:29,400 --> 00:51:30,800
You can see when I do this.

991
00:51:31,500 --> 00:51:34,300
It produces an alignment offset, right?

992
00:51:34,400 --> 00:51:38,100
And the alignment offsets, what I do is what I use for everything.

993
00:51:38,800 --> 00:51:42,000
So what I'd like to do is have a thing that's like, you know, inline

994
00:51:42,000 --> 00:51:47,700
memory index, get alignment, offset, something like that which goes

995
00:51:47,700 --> 00:51:49,900
ahead and does this computation for me.

996
00:51:52,300 --> 00:51:56,000
And it can also do this in here, right?

997
00:51:56,900 --> 00:52:00,400
Like so and yeah.

998
00:52:00,400 --> 00:52:05,000
So then result pointer I'd have to in here, I'd have to also do

999
00:52:08,200 --> 00:52:09,400
This operation again.

1000
00:52:11,200 --> 00:52:11,600
so,

1001
00:52:13,000 --> 00:52:13,800
Base for interviews.

1002
00:52:13,800 --> 00:52:15,300
Do you know what I could do to?

1003
00:52:15,300 --> 00:52:18,500
Well, not only need to do that so we can basically do it this way,

1004
00:52:18,500 --> 00:52:18,900
right?

1005
00:52:19,800 --> 00:52:22,900
And that should I think work?

1006
00:52:23,200 --> 00:52:24,600
Yes, that'll work, fine.

1007
00:52:25,400 --> 00:52:26,700
So actually, this will just work.

1008
00:52:26,700 --> 00:52:27,900
Now we go.

1009
00:52:28,700 --> 00:52:29,800
So if I do that,

1010
00:52:32,200 --> 00:52:35,500
And I have get alignment offset, I can now make sure that I always

1011
00:52:35,500 --> 00:52:38,600
account for that when I'm doing operations that involve thinking about

1012
00:52:38,600 --> 00:52:41,400
the size, because this will come back properly.

1013
00:52:42,200 --> 00:52:46,300
And so, then I guess I need to do this equals get alignment offset

1014
00:52:46,300 --> 00:52:46,900
Arena.

1015
00:52:47,800 --> 00:52:51,000
Then we grab the alignment offset here to add to the sighs.

1016
00:52:51,200 --> 00:52:52,700
I didn't mean to copy that out.

1017
00:52:53,200 --> 00:52:57,000
And so this just needs to learn return, that alignment offset.

1018
00:52:57,100 --> 00:53:01,600
And now what I can do is say that the result is going to be, you know,

1019
00:53:01,700 --> 00:53:07,900
Rina size equals this - you're the, the part that's used plus any

1020
00:53:07,900 --> 00:53:11,300
amount that it would take to move me up to the alignment that the

1021
00:53:11,300 --> 00:53:14,500
person is trying to ask about, right?

1022
00:53:15,600 --> 00:53:17,600
Oops, that's not what I meant to do.

1023
00:53:19,100 --> 00:53:20,900
Too many errant Keys.

1024
00:53:21,000 --> 00:53:21,400
Okay?

1025
00:53:23,000 --> 00:53:29,300
So there we go and we just need the alignment offset now to be

1026
00:53:29,300 --> 00:53:32,400
initialized to 0 and we should be good.

1027
00:53:33,700 --> 00:53:38,600
Go and this takes the alignment.

1028
00:53:39,500 --> 00:53:40,700
So does this?

1029
00:53:41,300 --> 00:53:42,900
Oops, not the alignment offset.

1030
00:53:45,000 --> 00:53:46,400
And off we go.

1031
00:53:46,900 --> 00:53:50,300
So this needs an address on it.

1032
00:53:51,800 --> 00:53:58,000
And conversion from size T to you and 32 possible data loss.

1033
00:53:59,200 --> 00:53:59,800
Is that so,

1034
00:54:00,300 --> 00:54:10,500
Oh, is that so tell me who is saying this is true.

1035
00:54:10,900 --> 00:54:13,500
Get Arena size remaining.

1036
00:54:16,000 --> 00:54:16,600
Where is that?

1037
00:54:16,600 --> 00:54:17,400
There it is.

1038
00:54:17,700 --> 00:54:19,400
It's producing a memory index.

1039
00:54:19,900 --> 00:54:22,200
Let me indexes, it's all of doing memories.

1040
00:54:22,200 --> 00:54:23,500
But who's complaining about this?

1041
00:54:25,500 --> 00:54:27,300
Argument conversion of science to you, Aunt.

1042
00:54:27,300 --> 00:54:31,300
32, of course it doesn't actually tell me who it is.

1043
00:54:31,300 --> 00:54:35,400
So maybe it's allocate render group that's complaining about that

1044
00:54:35,800 --> 00:54:36,900
probably is.

1045
00:54:37,200 --> 00:54:42,100
Let's go take a look and see what allocate render group is expecting

1046
00:54:42,100 --> 00:54:42,700
to see.

1047
00:54:43,200 --> 00:54:45,800
That is exactly what the problem is.

1048
00:54:45,800 --> 00:54:48,700
They're so let's go ahead and make that a memory index.

1049
00:54:50,900 --> 00:54:53,700
Okay, and these guys should be as well.

1050
00:54:53,700 --> 00:54:54,500
I suspect.

1051
00:54:55,000 --> 00:54:56,200
Oh, well, you know what?

1052
00:54:56,600 --> 00:54:57,500
I think about it.

1053
00:55:00,600 --> 00:55:04,200
I don't know if that's actually true because do we really want our Max

1054
00:55:04,200 --> 00:55:06,000
push buffer size to BU n?

1055
00:55:06,000 --> 00:55:08,300
32 have to expand to be.

1056
00:55:08,500 --> 00:55:12,200
You went 64's, probably not.

1057
00:55:13,600 --> 00:55:17,600
So I think actually what I wanted I think that's not actually what I

1058
00:55:17,600 --> 00:55:18,400
want to do.

1059
00:55:19,300 --> 00:55:21,500
So I think I do actually want to cast this.

1060
00:55:23,700 --> 00:55:32,000
So I think what I'm going to do is something like, you know, you went

1061
00:55:32,000 --> 00:55:34,400
32, you know, cast this to enter to.

1062
00:55:34,700 --> 00:55:37,400
I'm only, I'm a little bit nervous about that, so I wanted to be a

1063
00:55:37,400 --> 00:55:40,000
saturation here.

1064
00:55:40,400 --> 00:55:43,700
You know, what I want to do is I want to do like,

1065
00:55:46,300 --> 00:55:49,500
You know, something where I'm going to do, either the UN 32 version or

1066
00:55:49,500 --> 00:55:50,500
ffmf.

1067
00:55:50,500 --> 00:55:55,500
If it's over, I'm going to, I'm going to say also to do here.

1068
00:55:56,000 --> 00:55:56,500
Do here.

1069
00:55:56,800 --> 00:56:00,600
Safecast from memory.

1070
00:56:00,600 --> 00:56:03,700
You went to Unit 32.

1071
00:56:05,000 --> 00:56:07,900
It won't be a problem at the moment but I'm worried that eventually it

1072
00:56:07,900 --> 00:56:09,300
might go over or something like that.

1073
00:56:09,300 --> 00:56:10,600
And then we would be sad.

1074
00:56:12,700 --> 00:56:16,500
All right, so submarine has are very straightforward.

1075
00:56:17,000 --> 00:56:18,800
These are really really easy for us to do.

1076
00:56:19,500 --> 00:56:23,100
So if I come in here and I want to make one of these sub Arenas, all I

1077
00:56:23,100 --> 00:56:26,000
have to do is say, okay, I've got a memory Arena.

1078
00:56:26,400 --> 00:56:28,000
I want to make a sub Arena out of it.

1079
00:56:29,200 --> 00:56:33,200
So I pass in the main Arena and I have the result.

1080
00:56:33,900 --> 00:56:37,000
The result is going to be

1081
00:56:40,100 --> 00:56:40,700
Same here.

1082
00:56:41,500 --> 00:56:46,700
So the result size is going to be whatever the size is that's passed

1083
00:56:46,700 --> 00:56:48,500
in because Serena's have to have sizes.

1084
00:56:48,500 --> 00:56:51,700
So there's the memory, you ain't right sighs?

1085
00:56:51,700 --> 00:56:53,300
That's their size.

1086
00:56:54,000 --> 00:56:59,500
The result base is going to be me pushing that size, right?

1087
00:57:01,000 --> 00:57:04,200
And I guess I probably should have an alignment here as well, right.

1088
00:57:05,400 --> 00:57:08,100
A base alignment, although I could just force all of these.

1089
00:57:08,100 --> 00:57:11,300
Since for submarine has submarine has maybe want to always have an

1090
00:57:11,300 --> 00:57:14,800
alignment that's like going to be the full alignment, you know.

1091
00:57:15,000 --> 00:57:19,800
So I don't know how how true that really is that we need that to be in

1092
00:57:19,800 --> 00:57:20,100
there.

1093
00:57:20,100 --> 00:57:22,600
I don't know, we'd have to think about that but I'll leave it just as

1094
00:57:22,600 --> 00:57:23,700
a big alignment for now.

1095
00:57:25,700 --> 00:57:27,200
So yeah, so we've got the size in there.

1096
00:57:27,200 --> 00:57:31,100
We've got the base, which is going to be us, grabbing the the that

1097
00:57:31,100 --> 00:57:35,300
amount we're going to have the used, which is none, and the temp

1098
00:57:35,300 --> 00:57:36,600
count, which is also none.

1099
00:57:36,600 --> 00:57:39,300
So actually those can just remain uninitialized and that's a sub

1100
00:57:39,300 --> 00:57:40,600
Arena, that's all we need.

1101
00:57:41,300 --> 00:57:44,100
That will basically create a sub-region that gets sub allocated out of

1102
00:57:44,600 --> 00:57:45,200
separately.

1103
00:57:45,700 --> 00:57:49,100
So memory index, that's what I actually wanted.

1104
00:57:52,000 --> 00:57:54,900
Don't know why I said, never you in probably should never you.

1105
00:57:54,900 --> 00:57:56,100
It's a little more descriptive.

1106
00:57:57,000 --> 00:57:57,500
Anyway.

1107
00:57:58,800 --> 00:58:00,800
Oh, but it's not a un I guess, actually memory in t.

1108
00:58:01,200 --> 00:58:01,900
Well, either way.

1109
00:58:02,900 --> 00:58:03,300
Okay.

1110
00:58:03,300 --> 00:58:04,400
So, let's see.

1111
00:58:04,400 --> 00:58:05,100
Push size.

1112
00:58:05,100 --> 00:58:05,700
Comes back.

1113
00:58:05,700 --> 00:58:08,300
I gotta make this be you in a pointer.

1114
00:58:08,300 --> 00:58:09,000
That's fine.

1115
00:58:09,700 --> 00:58:12,800
We've got our severinus happening here.

1116
00:58:13,000 --> 00:58:13,700
Oh, right.

1117
00:58:13,700 --> 00:58:17,900
I said that I wanted this to be this way, right?

1118
00:58:17,900 --> 00:58:20,500
Because I want it to be nearer the way the other one worked.

1119
00:58:20,900 --> 00:58:21,800
So that's fine.

1120
00:58:21,800 --> 00:58:22,800
No, big deal there.

1121
00:58:23,500 --> 00:58:26,800
But if we do that, that means we have to initialize all the variables.

1122
00:58:27,400 --> 00:58:28,400
So we'll have to do it.

1123
00:58:28,800 --> 00:58:29,600
Like that.

1124
00:58:30,400 --> 00:58:36,000
Okay, so I think that's just about all of it.

1125
00:58:37,100 --> 00:58:39,700
Unfortunately, there's still so

1126
00:58:42,100 --> 00:58:44,200
Yeah, there's still a bunch of stuff.

1127
00:58:44,200 --> 00:58:47,100
We're just about out of time, but there's still a bunch of stuff that

1128
00:58:47,100 --> 00:58:48,900
we haven't quite covered yet.

1129
00:58:49,000 --> 00:58:54,500
In terms of how we would probably want to button these tab things task

1130
00:58:54,500 --> 00:58:58,900
things up, but we're sort of getting, you know, we're getting a little

1131
00:58:58,900 --> 00:59:02,100
bit, we're getting a little bit closer to having something where we

1132
00:59:02,100 --> 00:59:07,300
can just use it to do generic work instead of, you know, only that,

1133
00:59:07,300 --> 00:59:07,900
that sort of

1134
00:59:10,100 --> 00:59:13,600
It's very specific render workload that we designed it to do, but

1135
00:59:13,600 --> 00:59:16,300
hopefully, you can kind of see how this is starting to work out.

1136
00:59:16,300 --> 00:59:16,800
Right?

1137
00:59:17,100 --> 00:59:19,400
So, you know, when we come in here to fill Crown, chunk what we're

1138
00:59:19,400 --> 00:59:22,400
doing now is we're using the separate Arena that we have just for the,

1139
00:59:22,500 --> 00:59:25,100
for this particular task that we're going to launch off, we put

1140
00:59:25,100 --> 00:59:26,200
everything into that.

1141
00:59:27,200 --> 00:59:29,700
And then we go ahead and say, hey, put that in the low priority,

1142
00:59:29,700 --> 00:59:33,800
queue, get to it when you get to it, and we're all fine, and then we

1143
00:59:33,800 --> 00:59:34,100
leave.

1144
00:59:34,100 --> 00:59:37,700
And so we can queue up for of those at a time and they can just be

1145
00:59:37,700 --> 00:59:39,400
doing, whatever it is that they're doing.

1146
00:59:39,600 --> 00:59:43,900
And then when they're done, they'll get released back to the system by

1147
00:59:43,900 --> 00:59:48,700
saying that they no longer do anything by using this being used.

1148
00:59:48,800 --> 00:59:49,700
Taking that out.

1149
00:59:50,700 --> 00:59:54,700
It's not anything fancy at the moment but it should put us into a

1150
00:59:54,700 --> 00:59:57,600
situation where we could actually debug it and get it working.

1151
00:59:58,600 --> 00:59:59,700
At least that's the theory.

1152
01:00:00,200 --> 01:00:00,600
Okay.

1153
01:00:00,700 --> 01:00:04,200
So what am I looking at here?

1154
01:00:05,300 --> 01:00:06,800
I don't know what I'm looking at here.

1155
01:00:13,400 --> 01:00:14,300
Hold on a second.

1156
01:00:16,200 --> 01:00:19,500
Not sure that we should start to bugging this or whether we should try

1157
01:00:19,500 --> 01:00:22,100
to do it tomorrow, but let's take a look.

1158
01:00:22,300 --> 01:00:28,300
All right, so I'm having an issue here, where my chunk is a nonsense

1159
01:00:28,300 --> 01:00:31,300
situation look here.

1160
01:00:34,800 --> 01:00:36,800
She probably compile and debug mode.

1161
01:00:38,700 --> 01:00:39,000
Yeah.

1162
01:00:44,700 --> 01:00:48,200
All right, so let me take a look at where we're at here.

1163
01:00:51,800 --> 01:00:56,200
I am in the middle of the ad wall stuff so this is just coming

1164
01:00:56,200 --> 01:00:57,100
through.

1165
01:00:58,400 --> 01:01:02,100
So I obviously broke something because this has nothing to do with our

1166
01:01:02,100 --> 01:01:05,100
threading when I was doing the arena stuff.

1167
01:01:05,100 --> 01:01:07,500
I obviously broke something with our Arenas because you can kind of

1168
01:01:07,500 --> 01:01:08,200
see in here.

1169
01:01:09,000 --> 01:01:13,400
We haven't actually done any of the ground chunk stuff yet by the time

1170
01:01:13,400 --> 01:01:14,300
we come in here.

1171
01:01:14,900 --> 01:01:20,900
So this is actually just some kind of separate some kind of very

1172
01:01:20,900 --> 01:01:25,300
separate error so I probably broke something when I did the alignment.

1173
01:01:25,300 --> 01:01:27,700
So I'm going to go in to push size and

1174
01:01:27,900 --> 01:01:30,500
What I broke because I did that pretty quickly and I probably just

1175
01:01:30,500 --> 01:01:31,100
ruined it.

1176
01:01:31,800 --> 01:01:32,600
So, let's see here.

1177
01:01:33,300 --> 01:01:34,500
Alignment offset is zero.

1178
01:01:34,500 --> 01:01:35,400
That's good.

1179
01:01:35,800 --> 01:01:37,000
The size is something.

1180
01:01:37,000 --> 01:01:38,200
So that's going to happen.

1181
01:01:38,900 --> 01:01:40,300
We go ahead and do that.

1182
01:01:40,400 --> 01:01:44,000
We generate a result pointer and we come out.

1183
01:01:44,200 --> 01:01:46,200
What's that allocating the world?

1184
01:01:46,300 --> 01:01:49,900
Let's take a look at the world so that just totally failed.

1185
01:01:49,900 --> 01:01:50,300
Right?

1186
01:01:50,300 --> 01:01:50,800
Oh wait, no.

1187
01:01:51,000 --> 01:01:51,200
Sorry.

1188
01:01:52,600 --> 01:01:54,200
So that's all good chunk.

1189
01:01:54,200 --> 01:01:55,500
Doing M looks good.

1190
01:01:55,500 --> 01:01:56,600
The chunk hash is there.

1191
01:01:56,600 --> 01:01:58,800
There's chunk hash everyone loves the trunk cash.

1192
01:01:59,800 --> 01:02:03,400
So we come through here, we're calling push size.

1193
01:02:03,400 --> 01:02:04,700
Again, what's the alignment offset?

1194
01:02:04,700 --> 01:02:06,300
Now, it's nothing again.

1195
01:02:07,000 --> 01:02:07,800
That's good.

1196
01:02:07,800 --> 01:02:11,300
Size is all good, Irina used.

1197
01:02:11,300 --> 01:02:12,600
See what we're looking at here.

1198
01:02:14,300 --> 01:02:16,000
So we've used some of it.

1199
01:02:16,000 --> 01:02:18,800
We're still using some more off we go.

1200
01:02:21,500 --> 01:02:24,200
This all looks pretty reasonable.

1201
01:02:29,300 --> 01:02:29,900
Okay.

1202
01:02:31,500 --> 01:02:33,400
So, let's come out here.

1203
01:02:35,100 --> 01:02:39,300
And see load in some bitmaps.

1204
01:02:40,300 --> 01:02:41,400
It's all good.

1205
01:02:43,500 --> 01:02:46,500
so now, let's take a look at

1206
01:02:49,100 --> 01:02:51,900
I came State see what we're looking at here.

1207
01:02:53,100 --> 01:02:54,400
Here's that World Arena.

1208
01:02:54,800 --> 01:02:57,700
It's hasn't really gotten filled up at all, yet.

1209
01:02:57,700 --> 01:02:58,900
Still got plenty of room.

1210
01:03:00,500 --> 01:03:02,000
and so in, we come here,

1211
01:03:06,700 --> 01:03:08,300
add standard room.

1212
01:03:09,500 --> 01:03:11,500
And when do we start crashing?

1213
01:03:12,700 --> 01:03:15,500
We don't crash for a while actually.

1214
01:03:15,800 --> 01:03:22,500
So we're adding walls just fine, you know, off we go, no real, big

1215
01:03:22,500 --> 01:03:26,300
deal and we're adding walls, we're adding walls.

1216
01:03:26,300 --> 01:03:29,900
So what does it look like when we actually get to the point when we

1217
01:03:29,900 --> 01:03:36,100
crash at Ground identity at wall game, update and render?

1218
01:03:37,200 --> 01:03:39,200
So it's not like we're out of space or anything.

1219
01:03:39,200 --> 01:03:42,300
We have plenty of space and where

1220
01:03:42,500 --> 01:03:46,400
Looking at some stuff that looks pretty valid.

1221
01:03:46,400 --> 01:03:52,600
We come down into ad wall, we're adding a ground identity here which

1222
01:03:53,000 --> 01:03:56,100
is just our way of adding something that has collision with it, right?

1223
01:03:56,500 --> 01:04:00,800
So we've got it, our entity low happening change into location.

1224
01:04:01,700 --> 01:04:04,400
So, that's taking a look to see if it's going into a place.

1225
01:04:04,400 --> 01:04:07,500
It is so it goes ahead and does that it does get World chunk.

1226
01:04:08,100 --> 01:04:10,700
The chunk comes back that shot comes back.

1227
01:04:10,700 --> 01:04:12,300
Okay, so

1228
01:04:12,400 --> 01:04:13,200
That's fine.

1229
01:04:13,600 --> 01:04:19,000
Actually and well, no, I shouldn't say that we're inside.

1230
01:04:19,000 --> 01:04:20,900
Get real chunk at the moment.

1231
01:04:21,500 --> 01:04:24,200
The chunk location.

1232
01:04:27,200 --> 01:04:28,100
Is all good.

1233
01:04:33,900 --> 01:04:36,600
But the chunk hash plus the hash lat.

1234
01:04:38,200 --> 01:04:39,000
Is not.

1235
01:04:41,800 --> 01:04:42,700
Mmm.

1236
01:04:43,400 --> 01:04:46,000
Well, it could have been because of the next in hash as well.

1237
01:04:46,000 --> 01:04:50,600
I suppose, we don't actually know which of those it did.

1238
01:04:50,600 --> 01:04:53,300
Let's take a look hash lat.

1239
01:04:54,700 --> 01:04:55,400
Is 3.

1240
01:04:55,900 --> 01:04:59,000
So World chunk Cash.

1241
01:04:59,400 --> 01:05:00,500
Plus hash lat.

1242
01:05:02,700 --> 01:05:03,800
So that's valid.

1243
01:05:03,800 --> 01:05:08,600
It's next in hash that is not valid, right?

1244
01:05:09,400 --> 01:05:13,200
That's totally totally bogus totally bogus.

1245
01:05:13,800 --> 01:05:15,900
So I wonder if this is messing up.

1246
01:05:16,600 --> 01:05:18,200
I'm just going to go ahead and see if it does.

1247
01:05:20,700 --> 01:05:24,000
So that was not the problem as far as I can tell.

1248
01:05:24,800 --> 01:05:25,700
So, all right.

1249
01:05:28,500 --> 01:05:33,800
Next thing to try, when we do our push sighs I'm going to assert some

1250
01:05:33,800 --> 01:05:34,500
things here.

1251
01:05:35,700 --> 01:05:39,800
So when we're done doing our push sighs, I'm going to assert that the

1252
01:05:39,800 --> 01:05:40,800
size.

1253
01:05:41,400 --> 01:05:43,400
So this thing I'm going to do is size in it.

1254
01:05:44,400 --> 01:05:49,100
All right so the initial size would take the memory index here sizing

1255
01:05:49,100 --> 01:05:49,500
it.

1256
01:05:50,600 --> 01:05:56,100
All right so I'm going to assert that the size is greater than equal

1257
01:05:56,100 --> 01:05:56,600
to size in it.

1258
01:05:56,600 --> 01:05:58,100
So we're reserving at least

1259
01:05:58,300 --> 01:05:59,500
And as much memory.

1260
01:06:01,000 --> 01:06:03,300
As you know, was requested of us.

1261
01:06:03,800 --> 01:06:04,400
Oh

1262
01:06:05,700 --> 01:06:07,400
Nice, that's lovely.

1263
01:06:09,100 --> 01:06:12,000
Well, that would, that would do it.

1264
01:06:12,100 --> 01:06:14,100
That's, that's, that's great.

1265
01:06:15,000 --> 01:06:18,200
I don't know what to say about that but you saw the problem there,

1266
01:06:18,200 --> 01:06:18,500
right?

1267
01:06:18,500 --> 01:06:23,300
I put the thing that advances in the wrong spot, I don't know.

1268
01:06:24,500 --> 01:06:26,000
Yeah, that was, that was pretty dumb.

1269
01:06:26,500 --> 01:06:29,700
All right, so let's see here, where are we at?

1270
01:06:31,100 --> 01:06:36,100
Got an assertion and I'll keep render group Next push, buffer size.

1271
01:06:36,200 --> 01:06:41,200
Ah, so this is the maximum size, but it also needs to take the struct

1272
01:06:41,200 --> 01:06:41,800
into account.

1273
01:06:41,800 --> 01:06:43,300
So, I'm going to go ahead and say that.

1274
01:06:43,300 --> 01:06:49,400
When you do allocate render group there allocate render group, let's

1275
01:06:49,400 --> 01:06:51,400
see, and made under group.

1276
01:06:51,900 --> 01:06:53,000
How can I do this?

1277
01:06:53,000 --> 01:06:57,600
I want this to basically allocate to take into account that Max push.

1278
01:06:57,600 --> 01:06:58,400
My oversized.

1279
01:06:58,600 --> 01:07:00,300
I want to take into account that this

1280
01:07:00,600 --> 01:07:02,900
But that it needs to not have this in here.

1281
01:07:03,100 --> 01:07:05,600
I could have it subtract within the meaning of this means something

1282
01:07:05,600 --> 01:07:06,200
else.

1283
01:07:07,300 --> 01:07:08,500
I don't really know.

1284
01:07:10,900 --> 01:07:11,700
Hmm.

1285
01:07:12,200 --> 01:07:13,800
I'm not sure what I want to do there.

1286
01:07:14,900 --> 01:07:16,400
I'm not sure.

1287
01:07:17,800 --> 01:07:21,600
So maybe if you do allocate render group and the max push buffer, size

1288
01:07:21,600 --> 01:07:24,000
is zero then it does the one for you.

1289
01:07:24,000 --> 01:07:25,600
That's kind of janky.

1290
01:07:25,800 --> 01:07:30,100
I don't love that but you know, you could do this right.

1291
01:07:32,600 --> 01:07:37,400
If Max pushed on for size equals zero, Max push the oversized equals

1292
01:07:37,400 --> 01:07:38,000
get a ring size.

1293
01:07:38,000 --> 01:07:45,900
Remaining that I don't love it, but I didn't see a lot of other

1294
01:07:45,900 --> 01:07:49,900
options at the immediate moment, right?

1295
01:07:51,300 --> 01:07:53,200
So that's that's what we're going with.

1296
01:07:54,100 --> 01:07:55,300
That's what we're going with.

1297
01:07:56,600 --> 01:07:59,500
Okay, so let's see here.

1298
01:08:00,200 --> 01:08:00,700
Push Truck.

1299
01:08:00,700 --> 01:08:05,500
Fill ground shook task Arena so that actually looks like we're almost

1300
01:08:05,500 --> 01:08:06,000
running here.

1301
01:08:06,000 --> 01:08:06,600
So, I don't know.

1302
01:08:06,600 --> 01:08:10,700
I'm sorry about taking up too much of the Q&A, really, but I kind of

1303
01:08:10,700 --> 01:08:13,900
wanted to see what was I kind of wanted to see how far away we were,

1304
01:08:13,900 --> 01:08:15,400
and we don't seem to be that far.

1305
01:08:16,000 --> 01:08:21,100
So, if I take a look at the task Arena here, it's all filled up and

1306
01:08:21,100 --> 01:08:22,300
looks like a temp count is 2.

1307
01:08:22,300 --> 01:08:25,700
So it's like, it never did the end here.

1308
01:08:26,200 --> 01:08:27,300
um,

1309
01:08:29,000 --> 01:08:30,800
I never said it to being used today.

1310
01:08:32,300 --> 01:08:34,000
That's kind of stupid.

1311
01:08:34,700 --> 01:08:37,399
So that's obviously not going to work either.

1312
01:08:38,300 --> 01:08:42,500
When I do begin test with memory, obviously I need to Mark the task

1313
01:08:42,500 --> 01:08:43,700
before I return it.

1314
01:08:43,700 --> 01:08:46,899
I need to say that it is being used, right?

1315
01:08:48,000 --> 01:08:50,399
Otherwise, it'll just be tried to use again.

1316
01:08:51,100 --> 01:08:51,600
All right.

1317
01:08:52,600 --> 01:08:53,300
All right.

1318
01:08:53,800 --> 01:08:54,700
So anyway,

1319
01:08:56,899 --> 01:08:57,399
yeah.

1320
01:08:57,600 --> 01:08:59,800
Anyway let's go ahead and see.

1321
01:09:00,100 --> 01:09:06,700
Now, how we're doing here, let's take that build-up back and change it

1322
01:09:06,700 --> 01:09:10,200
to a know to go ahead and run.

1323
01:09:10,899 --> 01:09:15,000
So now we've got some stuff happening, the background and rendering,

1324
01:09:15,899 --> 01:09:20,500
and like, we're not really giving it enough of a lead time to always

1325
01:09:20,500 --> 01:09:21,000
hit.

1326
01:09:21,600 --> 01:09:25,100
So, we've kind of got a problem there, but we've seem to have taken

1327
01:09:25,100 --> 01:09:26,600
care of our really long stalls.

1328
01:09:26,600 --> 01:09:29,899
So that's good and those ground chunks are rendering in

1329
01:09:30,000 --> 01:09:32,100
The background now, which is what we wanted.

1330
01:09:32,899 --> 01:09:33,399
So, yeah.

1331
01:09:33,399 --> 01:09:34,200
So that's good.

1332
01:09:34,200 --> 01:09:40,399
And we can also go ahead and maybe now and paying back over here.

1333
01:09:41,000 --> 01:09:45,200
Now, that we have those operating in the background, we can also sort

1334
01:09:45,200 --> 01:09:52,399
of come in and, and, and change that get render into the basis to be

1335
01:09:53,800 --> 01:09:55,100
debug Style.

1336
01:09:56,400 --> 01:09:57,100
So here we go.

1337
01:09:59,800 --> 01:10:03,900
Do do do, do do do so yeah.

1338
01:10:05,200 --> 01:10:09,000
Basically, all we really need to do now is query a little wider and we

1339
01:10:09,000 --> 01:10:13,300
should be pretty much good to go on the background background tasking

1340
01:10:13,900 --> 01:10:14,400
right.

1341
01:10:15,600 --> 01:10:18,900
Background tasking to do.

1342
01:10:18,900 --> 01:10:20,400
Do, do do.

1343
01:10:24,900 --> 01:10:25,300
Yeah.

1344
01:10:30,300 --> 01:10:31,000
Oh good.

1345
01:10:31,400 --> 01:10:33,400
So like I said, we got a couple things we can cover.

1346
01:10:33,400 --> 01:10:36,700
Like, right now, we're drawing from those bitmaps at the same time

1347
01:10:36,700 --> 01:10:41,400
that we're riding into them, which is not super cool because like,

1348
01:10:41,400 --> 01:10:45,100
right, we don't guarantee that they're actually done before we start

1349
01:10:45,100 --> 01:10:48,200
bleeding them so we probably want to put a little trap in there.

1350
01:10:48,800 --> 01:10:52,600
Something that says, hey I'm actually I've been finished and if that's

1351
01:10:52,600 --> 01:10:57,500
not set, like don't draw me because that would be bad, right?

1352
01:10:58,200 --> 01:10:59,500
So you know stuff like that.

1353
01:10:59,600 --> 01:11:04,800
But but yeah, so hopefully you can see that working pretty well now

1354
01:11:05,100 --> 01:11:08,000
and we've gotten rid of our hiccups, so we're maintaining a nice

1355
01:11:08,000 --> 01:11:11,500
smooth frame rate, which is what we want, no matter what the situation

1356
01:11:11,500 --> 01:11:11,700
is.

1357
01:11:11,700 --> 01:11:12,600
So that's all good.

1358
01:11:13,800 --> 01:11:17,200
So let's go ahead and do a quick Q&A.

1359
01:11:17,200 --> 01:11:20,200
Don't have a lot of time, but we'll do a little bit at least.

1360
01:11:20,900 --> 01:11:22,700
Let's go ahead and switch to Q&A.

1361
01:11:26,700 --> 01:11:30,200
I'm glad the handmade he robot actually listens to my queue a request

1362
01:11:30,200 --> 01:11:33,500
now because before it definitely did not.

1363
01:11:46,500 --> 01:11:49,500
Let's see, does anyone have any questions about what we did today?

1364
01:11:51,200 --> 01:11:55,800
Does anyone have any questions about what we did today?

1365
01:12:02,100 --> 01:12:05,600
If one of the tasks with memory which has several tasks with memory in

1366
01:12:05,600 --> 01:12:08,500
front of it calls and test and every first will this stuff in front of

1367
01:12:08,500 --> 01:12:12,000
it be screwed up or this case is no not possible because I have

1368
01:12:12,000 --> 01:12:13,600
feelings, I don't understand something.

1369
01:12:14,900 --> 01:12:21,900
So, I think you're thinking about what would happen if all of the

1370
01:12:21,900 --> 01:12:25,000
tasks were using the same Arena, but they're each using their own

1371
01:12:25,000 --> 01:12:25,400
Arena.

1372
01:12:25,400 --> 01:12:27,100
So, here's what actually happened.

1373
01:12:27,100 --> 01:12:30,100
Just so you can see here is the transient Arena.

1374
01:12:31,000 --> 01:12:31,500
Mischief.

1375
01:12:31,500 --> 01:12:32,700
Please keep up with me.

1376
01:12:34,300 --> 01:12:36,100
Waiting for you.

1377
01:12:36,600 --> 01:12:37,100
There we go.

1378
01:12:38,400 --> 01:12:40,000
So this is the transient Arena.

1379
01:12:41,400 --> 01:12:42,000
Right?

1380
01:12:42,000 --> 01:12:44,300
And this is allocated on Startup to be some giant.

1381
01:12:44,300 --> 01:12:46,100
It's like how much memory is the machine will take it.

1382
01:12:46,100 --> 01:12:47,500
All right, so I don't know.

1383
01:12:47,500 --> 01:12:48,500
Give me four gigabytes.

1384
01:12:48,500 --> 01:12:49,300
However, much you got.

1385
01:12:49,400 --> 01:12:50,900
What's the, what's the player got in there?

1386
01:12:50,900 --> 01:12:52,300
We're going to use it for something.

1387
01:12:52,300 --> 01:12:53,800
We'll find something to use it for.

1388
01:12:54,500 --> 01:12:56,500
So we allocate the memory that's in the machine.

1389
01:12:56,700 --> 01:12:58,500
And now we're going to divide it up, right?

1390
01:12:58,600 --> 01:13:00,600
So first, we put some stuff in there, right?

1391
01:13:00,600 --> 01:13:04,000
Like, you know, some stuff gets loaded in here, so this is other

1392
01:13:04,000 --> 01:13:04,900
things, right?

1393
01:13:04,900 --> 01:13:08,800
Who knows what they are the Tran the the actual trans States and here

1394
01:13:08,800 --> 01:13:10,200
at the top, right?

1395
01:13:10,500 --> 01:13:11,000
But other things,

1396
01:13:11,400 --> 01:13:17,100
Whatever then oh and the ground like there's there's the round chunks

1397
01:13:17,100 --> 01:13:18,900
themselves are stored in here, right?

1398
01:13:18,900 --> 01:13:19,700
The ground chunk.

1399
01:13:19,900 --> 01:13:21,300
Bitmaps are stored in here.

1400
01:13:22,900 --> 01:13:27,900
So you do this stuff and then what I did is, I said, oh, okay, I'm

1401
01:13:27,900 --> 01:13:32,400
going to slice this part up and make some separate Arenas, right?

1402
01:13:32,500 --> 01:13:34,600
So this is Task zeros Arena.

1403
01:13:35,700 --> 01:13:36,600
This is Task ones.

1404
01:13:36,600 --> 01:13:38,400
This is Task, 2 is this is test 3s.

1405
01:13:38,700 --> 01:13:41,700
So these are rinas are actually totally separate.

1406
01:13:41,800 --> 01:13:47,600
So all four tasks can be totally asynchronous and happen in any order.

1407
01:13:47,600 --> 01:13:50,800
They get their own memory playground to play in so they don't need to

1408
01:13:50,800 --> 01:13:51,600
talk to anybody.

1409
01:13:51,600 --> 01:13:52,600
They don't need to synchronize.

1410
01:13:52,800 --> 01:13:56,800
Anybody they can do whatever they want, as long as they do it entirely

1411
01:13:56,800 --> 01:13:57,700
inside this Arena.

1412
01:13:58,200 --> 01:14:01,400
So when we go to kick off a ground Chunk, we stick all the render

1413
01:14:01,400 --> 01:14:03,400
group stuff into the arena for the task.

1414
01:14:03,400 --> 01:14:05,400
That's about to get spawned, right.

1415
01:14:05,500 --> 01:14:06,600
We then spawn the task.

1416
01:14:06,600 --> 01:14:10,500
We let it run to completion and then when it's done, it just sets a

1417
01:14:10,500 --> 01:14:12,300
little marker, right?

1418
01:14:13,000 --> 01:14:17,000
So remember up here, in the trance State, we have a, those being used

1419
01:14:17,600 --> 01:14:18,200
right?

1420
01:14:18,200 --> 01:14:22,100
Say, whether the task is being used or not, we have those.

1421
01:14:22,700 --> 01:14:26,500
It just sets one of those little being used things to 1 or 0.

1422
01:14:26,600 --> 01:14:27,500
It sets it to 0.

1423
01:14:27,500 --> 01:14:30,300
So we know that that one is no longer being used and every time we go

1424
01:14:30,300 --> 01:14:34,100
to kick off a task, we just look for one of these that has its being

1425
01:14:34,100 --> 01:14:36,500
used set to 0, right?

1426
01:14:36,500 --> 01:14:38,300
And if we find one, that's the one we kick off.

1427
01:14:38,800 --> 01:14:41,400
So everyone's totally segregated memory-wise.

1428
01:14:41,600 --> 01:14:45,100
And that's why we don't have to care who ends firsts or whatever, it

1429
01:14:45,100 --> 01:14:45,700
doesn't matter.

1430
01:14:49,800 --> 01:14:52,600
We already had memory reserved for the ground buffers.

1431
01:14:52,600 --> 01:14:54,900
Why couldn't we just use that memory for the threaded stuff?

1432
01:14:54,900 --> 01:14:56,300
Well, that's where the bitmap goes.

1433
01:14:56,300 --> 01:14:59,500
So we can't use the same memory for the

1434
01:15:00,700 --> 01:15:04,200
As we use for the render group, right?

1435
01:15:04,200 --> 01:15:06,200
And also we have a lot more of them, right?

1436
01:15:06,300 --> 01:15:10,300
So there's something like 256 ground chunks on 128 ground chunks,

1437
01:15:10,400 --> 01:15:11,000
right?

1438
01:15:13,200 --> 01:15:17,000
Right, there's 180 ground chunks and that's the memory for the bitmap.

1439
01:15:17,000 --> 01:15:19,200
It's a 256 by 256 bit map.

1440
01:15:19,600 --> 01:15:24,700
Okay so where were you going to put that render group stack?

1441
01:15:25,100 --> 01:15:26,300
Which I don't know how big it is.

1442
01:15:26,300 --> 01:15:28,900
Lets you know, 10K or something.

1443
01:15:29,000 --> 01:15:30,200
Where were you going to put that?

1444
01:15:30,300 --> 01:15:32,600
You can't put it in here because this is what you're rendering to.

1445
01:15:32,600 --> 01:15:36,300
You would overwrite the render group in the act of filling in the

1446
01:15:36,300 --> 01:15:37,500
bitmap, right?

1447
01:15:37,700 --> 01:15:42,600
If you stuck it on the beginning, then all 128, ground chunks.

1448
01:15:43,100 --> 01:15:45,100
Bigger by whatever that is 16k.

1449
01:15:45,100 --> 01:15:48,900
Who knows how much it is get bigger by that even though will only ever

1450
01:15:48,900 --> 01:15:50,200
use four of them at a time.

1451
01:15:50,400 --> 01:15:54,600
So that's a huge waste of a ton of memory, right?

1452
01:15:55,100 --> 01:15:56,200
So we don't want to do that.

1453
01:15:56,300 --> 01:15:59,100
So what we did is we made memory for the chunks, that's only made

1454
01:15:59,100 --> 01:16:02,400
memory for the tasks themselves per task, so that things that only

1455
01:16:02,400 --> 01:16:06,300
live the life time of a task can go in there and not take up permanent

1456
01:16:06,300 --> 01:16:08,500
storage and things where there's a lot more of them.

1457
01:16:11,800 --> 01:16:13,900
What are the lines on the screen?

1458
01:16:17,400 --> 01:16:18,700
Let's see.

1459
01:16:21,500 --> 01:16:25,600
Why are there lines on the screen?

1460
01:16:25,600 --> 01:16:28,500
Are you talking about these lines?

1461
01:16:28,700 --> 01:16:32,000
These are in our debug mode so that we can see.

1462
01:16:32,300 --> 01:16:34,600
This is where the camera would see.

1463
01:16:34,700 --> 01:16:38,300
This is where the simulation region is and this is where the outer

1464
01:16:38,300 --> 01:16:41,000
bounds of collision consideration are, right?

1465
01:16:41,100 --> 01:16:43,200
So the user never sees any of that stuff.

1466
01:16:43,600 --> 01:16:46,000
The user sees this

1467
01:16:47,000 --> 01:16:47,600
Right.

1468
01:16:48,800 --> 01:16:52,500
This is how the user excuse it and of course this yellow line would

1469
01:16:52,500 --> 01:16:53,000
not be there.

1470
01:16:53,000 --> 01:16:56,100
That's the yellow line that's showing the camera bounds, right?

1471
01:16:58,400 --> 01:16:59,200
Yeah, if that makes sense.

1472
01:16:59,200 --> 01:17:02,800
That actually reminds me of something, pretty handmade.

1473
01:17:03,100 --> 01:17:08,500
But I wanted to see stretch TI B.

1474
01:17:09,400 --> 01:17:10,500
Let's see.

1475
01:17:13,200 --> 01:17:14,400
I'm not sure.

1476
01:17:16,400 --> 01:17:17,200
I feel like,

1477
01:17:18,300 --> 01:17:20,000
Is that the edge what?

1478
01:17:20,000 --> 01:17:20,600
I don't know.

1479
01:17:20,600 --> 01:17:22,300
I think we have some kind of weird thing.

1480
01:17:22,300 --> 01:17:26,100
I guess I do have some kind of weird alignment bug or something.

1481
01:17:26,400 --> 01:17:30,300
I feel like we shouldn't be seeing that unless we're calling this.

1482
01:17:30,800 --> 01:17:32,300
Are we calling this path?

1483
01:17:34,900 --> 01:17:36,200
Why would he be calling this path?

1484
01:17:36,200 --> 01:17:41,200
Though if window width is greater than equal to buffer with times to,

1485
01:17:41,800 --> 01:17:45,500
I feel like we shouldn't be calling that path, right?

1486
01:17:47,200 --> 01:17:48,400
But let's, let's find out.

1487
01:17:48,400 --> 01:17:49,700
Let's find out if we are not.

1488
01:17:50,800 --> 01:17:52,000
So I'm going to change it.

1489
01:17:52,000 --> 01:17:54,300
To only have an offset there.

1490
01:17:56,500 --> 01:17:57,400
Nope, that's it.

1491
01:17:57,400 --> 01:17:59,800
So we are we're calling the wrong path.

1492
01:18:03,200 --> 01:18:04,300
I don't know why.

1493
01:18:08,300 --> 01:18:12,700
Is the buffer width set to so is the buffer with is probably rounded

1494
01:18:12,800 --> 01:18:14,000
up now.

1495
01:18:15,700 --> 01:18:17,500
Or something like that.

1496
01:18:17,500 --> 01:18:18,800
Oh, no, it shouldn't be though.

1497
01:18:19,300 --> 01:18:20,900
Yeah, I don't understand.

1498
01:18:22,600 --> 01:18:23,900
The window width.

1499
01:18:25,500 --> 01:18:28,600
Is greater than, or equal to the buffer with times two.

1500
01:18:29,200 --> 01:18:33,500
Oh, I see it's because, actually, that's this is just the case for

1501
01:18:33,500 --> 01:18:37,600
stretching, which we didn't want to do and okay.

1502
01:18:37,600 --> 01:18:37,900
Okay.

1503
01:18:37,900 --> 01:18:38,200
Okay.

1504
01:18:38,200 --> 01:18:38,900
Never mind.

1505
01:18:39,000 --> 01:18:40,600
I just confused there for a second.

1506
01:18:41,700 --> 01:18:42,700
So really?

1507
01:18:42,700 --> 01:18:45,800
Yeah, like really what we want to do is we need another path here

1508
01:18:45,800 --> 01:18:47,200
where they're equivalent.

1509
01:18:47,700 --> 01:18:51,500
So I'm going to go ahead and just for now, comment these out until we

1510
01:18:51,500 --> 01:18:52,900
do something smarter here.

1511
01:18:54,300 --> 01:18:55,000
So we'll just

1512
01:18:55,700 --> 01:18:58,000
We'll just go ahead and actually, I guess I'll do it this way.

1513
01:18:58,500 --> 01:19:00,400
Yeah, I was wondering what was going on there.

1514
01:19:00,800 --> 01:19:01,700
It's kind of annoying.

1515
01:19:04,300 --> 01:19:06,400
I think Chris Hecker was mentioning it to, he was, like, why are there

1516
01:19:06,400 --> 01:19:06,900
black bars?

1517
01:19:06,900 --> 01:19:10,000
And like, I, we've got the windows side code is doing some stuff.

1518
01:19:11,000 --> 01:19:13,000
So let's go ahead and get rid of those.

1519
01:19:13,500 --> 01:19:14,000
There we go.

1520
01:19:14,300 --> 01:19:17,500
So now as you can, you can see it correctly, that that's the yellow

1521
01:19:17,500 --> 01:19:21,000
boundary that we were looking at when we zoom out that just shows

1522
01:19:21,000 --> 01:19:22,200
where the camera is going to show.

1523
01:19:29,300 --> 01:19:31,600
So, you basically start to the task will foreground chunks to run

1524
01:19:31,600 --> 01:19:34,200
another thread, can you use this mechanism for other types of tasks as

1525
01:19:34,200 --> 01:19:34,600
well?

1526
01:19:34,800 --> 01:19:36,200
Yes, that's why I did it that way.

1527
01:19:36,700 --> 01:19:39,600
So we can, we can put back any kind of background tasks we want on

1528
01:19:39,600 --> 01:19:39,900
there.

1529
01:19:40,400 --> 01:19:42,900
And, of course, the renderer also runs through that same task system,

1530
01:19:42,900 --> 01:19:44,600
but it just doesn't need the temporary storage.

1531
01:19:44,600 --> 01:19:45,600
It's an immediate thing.

1532
01:19:46,200 --> 01:19:48,900
So that's why we never had to make any temporary storage for that.

1533
01:19:50,300 --> 01:19:53,000
Why not put the stuff at the top of the transient Arena into the

1534
01:19:53,000 --> 01:19:55,400
permanent storage ground?

1535
01:19:55,400 --> 01:19:56,000
Chuck bitmaps?

1536
01:19:56,200 --> 01:19:57,800
Because they're not really permanent, right?

1537
01:19:57,800 --> 01:20:00,800
They can be recreated in any time so we could actually throw them

1538
01:20:00,800 --> 01:20:01,100
away.

1539
01:20:01,100 --> 01:20:03,300
If like the operating system says, you need to go into a low memory

1540
01:20:03,300 --> 01:20:05,400
state or something, we can throw them away and then recreate them.

1541
01:20:05,500 --> 01:20:06,700
That's why the transient

1542
01:20:10,500 --> 01:20:12,000
Why does it flash magenta once in a while?

1543
01:20:12,000 --> 01:20:13,800
Is it because we're drawing without the working finished?

1544
01:20:13,800 --> 01:20:14,600
Yes, that was the thing.

1545
01:20:14,600 --> 01:20:18,900
I was saying before where we probably want to do that locking their

1546
01:20:19,800 --> 01:20:23,000
although technically we could just never bother doing the Locking

1547
01:20:23,000 --> 01:20:27,200
because our goal should be to, oh, he's cue up those regions before

1548
01:20:27,200 --> 01:20:28,300
they'd ever be seen.

1549
01:20:28,700 --> 01:20:31,500
So you would never actually get into that situation in the first

1550
01:20:31,500 --> 01:20:31,800
place.

1551
01:20:32,300 --> 01:20:35,900
But yeah, that is what's happening right now since we don't ask for

1552
01:20:35,900 --> 01:20:36,700
them early enough.

1553
01:20:41,600 --> 01:20:41,900
All right.

1554
01:20:41,900 --> 01:20:44,300
Looks like we're done with questions.

1555
01:20:45,300 --> 01:20:48,400
All right, so I will wrap things up.

1556
01:20:49,100 --> 01:20:50,600
I will wrap it up.

1557
01:20:52,400 --> 01:20:54,200
Okay, let's close down.

1558
01:20:54,200 --> 01:20:56,200
Close it down.

1559
01:20:56,200 --> 01:20:59,600
Save everybody's favorite.

1560
01:21:00,000 --> 01:21:03,800
If all right, thank you, everyone for joining me for another episode

1561
01:21:03,800 --> 01:21:04,400
of handmade here.

1562
01:21:04,400 --> 01:21:05,500
It's been a pleasure coding with you.

1563
01:21:05,500 --> 01:21:08,900
As always, we now have a bunch of things that run a multi-threaded,

1564
01:21:08,900 --> 01:21:09,900
and that's kind of cool.

1565
01:21:09,900 --> 01:21:13,100
We've shown both how to do optimization with all this reading and also

1566
01:21:13,100 --> 01:21:15,500
how to get rid of lag with multi-threading.

1567
01:21:16,200 --> 01:21:18,600
And so we kind of got both of those working now and that's pretty

1568
01:21:18,600 --> 01:21:18,800
cool.

1569
01:21:18,800 --> 01:21:20,000
And they're both working through the same.

1570
01:21:20,000 --> 01:21:21,300
Very very simple test system.

1571
01:21:21,300 --> 01:21:24,300
We built in the operating system that's just a few lines of code in

1572
01:21:24,300 --> 01:21:25,100
the operating system layer.

1573
01:21:25,100 --> 01:21:26,400
So that's very satisfying as well.

1574
01:21:26,400 --> 01:21:29,800
It just shows you don't need a whole lot to build.

1575
01:21:30,000 --> 01:21:33,400
Multi-threading, it's actually very, very simple if you just don't

1576
01:21:33,400 --> 01:21:34,800
over complicate things for yourself.

1577
01:21:34,800 --> 01:21:35,300
So

1578
01:21:36,700 --> 01:21:37,700
That's the good news.

1579
01:21:39,300 --> 01:21:42,500
The bad news is we still have more to go because we gotta go look now

1580
01:21:42,500 --> 01:21:44,400
at some other renderer Z staff.

1581
01:21:44,400 --> 01:21:46,700
So we still have more work to do before we can call our rendering

1582
01:21:46,700 --> 01:21:47,400
stuff done.

1583
01:21:47,800 --> 01:21:50,400
So we want to go work on that and that's what we will be doing

1584
01:21:50,400 --> 01:21:52,300
tomorrow and I hope to see you here for that.

1585
01:21:52,300 --> 01:21:53,700
Same time, same place, 5 p.m.

1586
01:21:53,700 --> 01:21:58,000
Pacific Daylight time on Twitch and I hope to see you all there.

1587
01:21:58,000 --> 01:22:00,100
In the meantime, if you would like to play around at home of the

1588
01:22:00,100 --> 01:22:03,000
source code, if you preorder the game it comes to the source code.

1589
01:22:03,000 --> 01:22:05,500
So if you go to handmade here at Oregon pre-order the game you can

1590
01:22:05,500 --> 01:22:05,900
download the source.

1591
01:22:06,100 --> 01:22:08,200
Go and play around with it at home, which is great for learning or

1592
01:22:08,200 --> 01:22:09,100
doing whatever else.

1593
01:22:09,600 --> 01:22:12,800
Just if you want to sort of experiment with it, go to go nuts.

1594
01:22:13,200 --> 01:22:14,900
Anyway, we also have a forum site.

1595
01:22:14,900 --> 01:22:18,000
We can go to ask questions and we can also get ports to Mac and Linux

1596
01:22:18,000 --> 01:22:19,300
there that community members have done.

1597
01:22:19,300 --> 01:22:20,600
If you're trying to do that yourself.

1598
01:22:20,800 --> 01:22:22,300
That's a good place to check that out.

1599
01:22:22,400 --> 01:22:26,100
We have a patreon page, you can go, if you want to support the video

1600
01:22:26,100 --> 01:22:27,500
series, you can subscribe there.

1601
01:22:28,100 --> 01:22:30,300
And also if you want to know what the schedule is going to be because

1602
01:22:30,300 --> 01:22:32,300
we're trying to catch it live, we have a tweet Bob little tweet the

1603
01:22:32,300 --> 01:22:35,600
schedule at you so you can go ahead and follow him and he will take

1604
01:22:35,600 --> 01:22:35,900
care of

1605
01:22:36,000 --> 01:22:36,200
Things.

1606
01:22:36,200 --> 01:22:37,000
Or maybe it's a her.

1607
01:22:37,000 --> 01:22:38,700
I don't actually know the gender of the Tweet.

1608
01:22:38,700 --> 01:22:41,900
But to be completely honest with you, all we really know is that it's

1609
01:22:42,100 --> 01:22:43,700
going to eventually become sentient.

1610
01:22:44,500 --> 01:22:47,000
You know, when people like Ray Kurzweil talk about the singularity

1611
01:22:47,000 --> 01:22:49,200
that's they're talking about the talking, about the tweetbot, the

1612
01:22:49,200 --> 01:22:52,400
handmade hero tweetbot, which will eventually become sentient, be able

1613
01:22:52,400 --> 01:22:55,900
to self modify, replicate and destroy all of mankind.

1614
01:22:56,100 --> 01:23:00,100
But until that happens, like I said, we'll be back here tomorrow,

1615
01:23:00,600 --> 01:23:04,900
coding handmade here, an event, to try to finish a nice game engine,

1616
01:23:04,900 --> 01:23:05,900
and a nice game on top of

1617
01:23:06,500 --> 01:23:09,800
Before the tweetbot becomes sentient destroys the world so I hope to

1618
01:23:09,800 --> 01:23:10,900
have your help for that.

1619
01:23:11,000 --> 01:23:15,400
I'd love to see here, have a great time until then take it easy

1620
01:23:15,400 --> 01:23:17,200
everyone and I will see you tomorrow.

