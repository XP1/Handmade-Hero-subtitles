1
00:00:00,000 --> 00:00:03,300
Go ahead and start the actual recording here.

2
00:00:04,600 --> 00:00:05,100
Okay.

3
00:00:05,100 --> 00:00:11,100
Hello everyone and welcome to the Thanksgiving Day stream of handmade

4
00:00:11,100 --> 00:00:11,600
hero.

5
00:00:12,500 --> 00:00:14,200
I am feeling a little bit better today.

6
00:00:14,200 --> 00:00:15,100
I'm pleased to report.

7
00:00:15,100 --> 00:00:19,500
I'm hoping that I am actually starting to recover from my illness not

8
00:00:19,500 --> 00:00:20,300
entirely yet.

9
00:00:20,300 --> 00:00:20,800
That's true.

10
00:00:20,800 --> 00:00:22,000
But we're getting a little better.

11
00:00:22,600 --> 00:00:24,400
So I'm hoping that maybe pretty soon here.

12
00:00:24,400 --> 00:00:27,900
I will actually be able to stream to you completely illness free maybe

13
00:00:27,900 --> 00:00:28,400
next week.

14
00:00:28,400 --> 00:00:29,000
Who knows.

15
00:00:29,700 --> 00:00:33,600
Anyway, we are going to be doing are finishing up our sound

16
00:00:33,600 --> 00:00:34,200
programming today.

17
00:00:34,400 --> 00:00:37,300
Just taking a look at the sound output code that we made and you know,

18
00:00:37,300 --> 00:00:39,900
basically trying to go in there and inspect it and make sure that we

19
00:00:39,900 --> 00:00:40,800
don't have bugs in there.

20
00:00:40,800 --> 00:00:45,200
So the sound output code is kind of finicky, direct sounds a bit, a

21
00:00:45,200 --> 00:00:47,200
bit finicky the way that you actually have to use it.

22
00:00:47,200 --> 00:00:49,500
And so we want to kind of go through that and just Shore it up, make

23
00:00:49,500 --> 00:00:53,100
sure that everything is working properly and the and then after that,

24
00:00:53,100 --> 00:00:54,900
if we get done with that, we'll be looking at timers.

25
00:00:54,900 --> 00:00:57,800
So if you're following along today, and you've pre-ordered The Source,

26
00:00:58,400 --> 00:01:00,900
the pre-order, the game and want to follow, along with the source

27
00:01:00,900 --> 00:01:04,200
code, you're going to want to go and get the the

28
00:01:04,300 --> 00:01:09,700
07 zip that is yesterday's source code and you can follow along with

29
00:01:09,900 --> 00:01:14,100
with us on the stream by using that source code here on day eight.

30
00:01:14,900 --> 00:01:15,500
Okay.

31
00:01:15,900 --> 00:01:18,500
So basically, we're just going to jump right back to where we were

32
00:01:18,500 --> 00:01:19,300
yesterday.

33
00:01:20,100 --> 00:01:22,000
I've got a couple of clean up things.

34
00:01:22,000 --> 00:01:24,600
I wanted to talk about that, don't have anything to do with audio, but

35
00:01:24,600 --> 00:01:25,500
we'll get to them later.

36
00:01:25,500 --> 00:01:28,400
If we get to them, they're kind of, on my notebook of just things to

37
00:01:28,400 --> 00:01:31,500
talk about that where I didn't get to yesterday when I was talking

38
00:01:31,500 --> 00:01:34,200
about, because we went right up to the end with sound.

39
00:01:34,500 --> 00:01:36,800
So, here we go.

40
00:01:38,000 --> 00:01:40,000
Here we go.

41
00:01:40,500 --> 00:01:45,500
Basically yesterday what we did is we learned how to basically lock,

42
00:01:45,600 --> 00:01:49,100
our direct sound buffer, which basically asked direct sound to allow

43
00:01:49,100 --> 00:01:52,800
us to write into it to update the contents of the sound, that's being

44
00:01:52,800 --> 00:01:56,000
outputted by the sound card.

45
00:01:56,600 --> 00:02:00,500
And then what we did is we wrote a square wave into it and then we

46
00:02:00,500 --> 00:02:04,000
told directsound to unlock that, basically, saying we're done writing

47
00:02:04,000 --> 00:02:04,600
into it.

48
00:02:04,600 --> 00:02:06,000
You can continue playing now.

49
00:02:06,400 --> 00:02:07,600
Now, the other thing we did, right.

50
00:02:07,800 --> 00:02:11,100
End of the stream in the QA people were asking why there is a pause.

51
00:02:11,100 --> 00:02:15,400
We waited until we actually filled the buffer once in order to play

52
00:02:15,600 --> 00:02:16,300
the sound.

53
00:02:16,400 --> 00:02:19,300
So that, that's why this thing down here was true, because before we

54
00:02:19,300 --> 00:02:21,300
were starting it before, we had actually filled it at all, which

55
00:02:21,300 --> 00:02:22,500
causes a delay and so on.

56
00:02:23,000 --> 00:02:25,700
And so, basically, what we're doing is make sure we had it filled,

57
00:02:25,700 --> 00:02:28,100
then we start kicking it off and we go from there.

58
00:02:28,600 --> 00:02:31,500
So the thing that I want to do today, first of all, is a square.

59
00:02:31,500 --> 00:02:33,100
Wave is a, rather harsh wave.

60
00:02:33,700 --> 00:02:37,300
And so it's a little bit harder to hear if there are bugs in the sound

61
00:02:37,300 --> 00:02:37,600
output.

62
00:02:37,700 --> 00:02:40,600
One of the things, I'll tell you a little story here on the

63
00:02:40,600 --> 00:02:41,500
Thanksgiving stream.

64
00:02:44,100 --> 00:02:46,600
We are not particularly time constrain today, by the way, so we could

65
00:02:46,600 --> 00:02:49,200
go a little longer if we wanted to I'll try not to but we could.

66
00:02:49,900 --> 00:02:55,600
So one of the things that's actually kind of weird about audio and

67
00:02:55,600 --> 00:02:58,900
that you kind of have to just decide to take it on faith when I tell

68
00:02:58,900 --> 00:02:59,400
you this.

69
00:02:59,400 --> 00:02:59,900
If you

70
00:03:00,000 --> 00:03:02,400
Had this experience yourself, then it may sound a little hard to

71
00:03:02,400 --> 00:03:04,300
believe but you're just gonna have to trust me.

72
00:03:04,300 --> 00:03:09,200
It's true and I'll tell you a story so long time ago.

73
00:03:10,100 --> 00:03:12,700
I don't know how many years it was now probably eight years something

74
00:03:12,700 --> 00:03:13,200
like this.

75
00:03:13,600 --> 00:03:14,700
Quite some time ago.

76
00:03:15,400 --> 00:03:19,700
We used to do a thing called the indie game jam and the indie game Jam

77
00:03:19,700 --> 00:03:24,500
was actually the very first game Jam that ever existed.

78
00:03:24,600 --> 00:03:26,500
It was a thing that a bunch of us started.

79
00:03:26,500 --> 00:03:29,800
The very first one was held at Chris Hecker and Sean.

80
00:03:30,000 --> 00:03:35,500
Barrett actually organized it, out of a barn in in Oakland,

81
00:03:35,700 --> 00:03:36,500
California.

82
00:03:37,000 --> 00:03:40,700
And basically it was, it was a long time ago in a bunch of us were

83
00:03:40,700 --> 00:03:44,500
sort of emailing about how computers had just gotten fast enough to

84
00:03:44,500 --> 00:03:45,600
maybe do.

85
00:03:45,700 --> 00:03:49,800
Maybe if we tried, they could maybe render.

86
00:03:50,300 --> 00:03:53,100
I think it was 10,000, or was it a hundred thousand?

87
00:03:54,000 --> 00:03:59,000
It was either 10,000 or 100,000 Sprites on the screen just Sprites

88
00:03:59,000 --> 00:04:00,200
like old-school Sprites.

89
00:04:00,800 --> 00:04:04,600
And so, what we were talking about is well, what kind of games could

90
00:04:04,600 --> 00:04:07,200
you make with 100,000 guys?

91
00:04:07,400 --> 00:04:09,900
And so out of that was born the idea of.

92
00:04:09,900 --> 00:04:13,700
Why don't we just get all the game developers that we know, you know,

93
00:04:13,700 --> 00:04:17,700
all of this kind of the friendly game developers who are all kind of

94
00:04:17,700 --> 00:04:18,100
profession.

95
00:04:18,100 --> 00:04:18,600
They were all.

96
00:04:18,600 --> 00:04:20,100
Everyone was working on AAA games that time.

97
00:04:20,100 --> 00:04:21,700
There was no such thing as an indie scene.

98
00:04:22,000 --> 00:04:23,000
I don't know when this was

99
00:04:23,400 --> 00:04:26,200
2099 something like this, probably the year.

100
00:04:26,200 --> 00:04:27,800
Probably 2000 or 2001.

101
00:04:27,800 --> 00:04:28,300
I would say.

102
00:04:29,200 --> 00:04:34,100
So basically, we got everyone together and we said, all right.

103
00:04:34,200 --> 00:04:37,400
Let's see if everyone comes down for a long weekend.

104
00:04:37,600 --> 00:04:41,100
How many games we could make that just play with the idea of having a

105
00:04:41,100 --> 00:04:42,300
hundred thousand guys?

106
00:04:42,600 --> 00:04:45,500
And so I worked on the engine, for that jam.

107
00:04:45,700 --> 00:04:48,400
I think I did like, a couple things like the camera code and the

108
00:04:48,400 --> 00:04:50,500
loader that loaded, Doom wad files.

109
00:04:50,500 --> 00:04:53,300
That's where we got the Sprites from, and then like,

110
00:04:53,900 --> 00:04:56,500
Sean Barrett did like the renderer for it and stuff.

111
00:04:56,600 --> 00:04:59,900
That would actually try to push 100,000 guys, at once and so on and so

112
00:04:59,900 --> 00:05:03,300
that when everyone got there, there was basically this code that could

113
00:05:03,300 --> 00:05:07,100
go ahead and actually render 100,000 guys and people could sort of

114
00:05:07,100 --> 00:05:08,100
make games with it.

115
00:05:08,300 --> 00:05:10,600
And that was the very first game Jam that there ever was.

116
00:05:10,900 --> 00:05:14,800
And since since then, there's been lots of that, that idea of having a

117
00:05:14,800 --> 00:05:18,200
game Jam or everyone just kind of packs in and makes a bunch of games

118
00:05:18,200 --> 00:05:22,900
has kind of caught on and and there's been lots of game jams, but that

119
00:05:22,900 --> 00:05:23,300
was the first

120
00:05:23,400 --> 00:05:26,800
first one, I think that ever actually existed a concept of a game Jam.

121
00:05:27,800 --> 00:05:31,700
But anyway, a couple years down the road, we had done multiple of

122
00:05:31,700 --> 00:05:32,600
these game jams.

123
00:05:32,600 --> 00:05:36,400
And we got two particular one, the fact, the last one that was ever

124
00:05:36,400 --> 00:05:37,100
held.

125
00:05:37,300 --> 00:05:38,600
I believe it was the last one.

126
00:05:38,600 --> 00:05:42,200
I think it's the last one that was ever held was an audio game jam.

127
00:05:42,800 --> 00:05:49,500
And the idea was games that use audio to basically, to capture the

128
00:05:49,500 --> 00:05:49,900
gameplay.

129
00:05:49,900 --> 00:05:53,300
So the gameplay was going to be or audio oriented and the guy.

130
00:05:53,400 --> 00:05:56,800
Was doing the engine for that one because again, the pattern for the

131
00:05:56,800 --> 00:05:58,800
game jams following that first one was always.

132
00:05:58,800 --> 00:05:59,900
We built an engine before.

133
00:06:00,000 --> 00:06:00,500
Hand.

134
00:06:00,500 --> 00:06:03,100
So that's not part of the jam so that everyone they show up already

135
00:06:03,100 --> 00:06:06,500
has a code base and they're just writing the game piece on top of that

136
00:06:06,500 --> 00:06:07,200
basically.

137
00:06:07,500 --> 00:06:11,000
So, you know, people would volunteer to kind of work on the engine and

138
00:06:11,000 --> 00:06:11,700
that sort of stuff.

139
00:06:12,700 --> 00:06:15,900
So basically what happened is, the person who is going to write the

140
00:06:15,900 --> 00:06:21,100
engine for that one was actually ottman binstock who you may know.

141
00:06:21,100 --> 00:06:21,400
Now.

142
00:06:21,400 --> 00:06:24,600
He's like the Chief Architect at Oculus Rift.

143
00:06:24,800 --> 00:06:28,900
He used to work for valve and then he left to go do Oculus stuff at

144
00:06:28,900 --> 00:06:29,600
Oculus to do.

145
00:06:29,600 --> 00:06:30,500
The 3D headsets.

146
00:06:31,100 --> 00:06:36,000
Anyway, he was writing the sound engine and he was living in Japan at

147
00:06:36,000 --> 00:06:39,800
the time and I had never been to Japan and I had always wanted to go.

148
00:06:39,800 --> 00:06:42,200
So I went out to visit him shortly.

149
00:06:42,500 --> 00:06:44,300
For the indie game.

150
00:06:44,300 --> 00:06:48,500
Jam was supposed to be held and so he was showing me at a cafe in

151
00:06:48,500 --> 00:06:49,200
Japan.

152
00:06:49,600 --> 00:06:52,200
I don't know what's going on because I can't really speak Japanese and

153
00:06:52,200 --> 00:06:52,800
all this stuff.

154
00:06:52,800 --> 00:06:53,900
I'm just, I think it's awesome.

155
00:06:53,900 --> 00:06:54,500
I love Japan.

156
00:06:54,500 --> 00:06:57,700
It was like, probably one of my favorite trips.

157
00:06:57,700 --> 00:07:01,200
If not my favorite trip of all time, go and go into Japan.

158
00:07:02,500 --> 00:07:08,200
So where there were in a cafe in Japan and basically, we sit down and,

159
00:07:08,200 --> 00:07:11,600
of course, since we're in a cafe, the only way to listen to sound is

160
00:07:11,600 --> 00:07:12,100
on the

161
00:07:12,400 --> 00:07:15,300
The the headphones, right?

162
00:07:15,600 --> 00:07:18,600
That are plugged into Ottomans laptop and he's was just like showing

163
00:07:18,600 --> 00:07:19,300
me the engine.

164
00:07:19,300 --> 00:07:22,200
He's like, here's the stuff I built for the audio engine, you know,

165
00:07:22,200 --> 00:07:27,000
got this go at that and he has some pair of headphones that are like

166
00:07:27,000 --> 00:07:31,700
the standard 30 dollar headphones, you know, just random headphones

167
00:07:31,700 --> 00:07:35,300
that you might buy, or that come with them and iPod or something like

168
00:07:35,300 --> 00:07:37,300
that, and iPhone.

169
00:07:38,100 --> 00:07:42,400
And I've got actually quite some time before I actually

170
00:07:42,600 --> 00:07:44,200
I spent quite a bit of money.

171
00:07:44,200 --> 00:07:49,000
I had bought some professional grade headphones when I was working on

172
00:07:49,000 --> 00:07:50,500
sound quite some time ago.

173
00:07:50,500 --> 00:07:52,100
I had actually asked some friends.

174
00:07:52,600 --> 00:07:55,500
I think it was, it might have been John Blow who first recommended

175
00:07:55,500 --> 00:07:56,100
them to me.

176
00:07:56,200 --> 00:07:59,700
He basically said, you know these they're called a domotics there, a

177
00:07:59,700 --> 00:08:00,600
headphone company.

178
00:08:00,600 --> 00:08:03,000
They make these like, you know, headphones or whatever.

179
00:08:03,000 --> 00:08:04,700
They're really, really good, but they're expensive.

180
00:08:05,000 --> 00:08:08,100
So I had bought some and I have them and they are really great.

181
00:08:08,100 --> 00:08:09,300
They're amazing headphones.

182
00:08:09,300 --> 00:08:11,500
I've had the same pair for like a decade now.

183
00:08:12,600 --> 00:08:15,500
And so, he's like, showing this to me and I'm, and he's like, okay,

184
00:08:15,500 --> 00:08:22,200
listen to this and I plug my headphones into his, you know, laptop

185
00:08:22,200 --> 00:08:22,600
Jack.

186
00:08:23,200 --> 00:08:26,600
And I listened to it, and I go ottoman.

187
00:08:27,100 --> 00:08:28,800
You've got a, you've got a bug.

188
00:08:28,800 --> 00:08:32,000
Like you're not quite aligned right on the buffer or something.

189
00:08:32,100 --> 00:08:33,299
You've got a bug, I can hear it.

190
00:08:33,299 --> 00:08:33,900
I can hear.

191
00:08:33,900 --> 00:08:35,799
There's a little click there.

192
00:08:36,700 --> 00:08:40,500
And he like plugs his in because he's got his headphones and heat like

193
00:08:40,500 --> 00:08:42,600
we unplug my earplugs because like I don't know what you're talking

194
00:08:42,600 --> 00:08:44,000
about, the sounds right?

195
00:08:44,300 --> 00:08:47,900
So I'm like, okay, here you go and I give him my headphones.

196
00:08:47,900 --> 00:08:48,900
He puts them in.

197
00:08:49,200 --> 00:08:53,300
He puts the thing into the Jack, he listens for a couple seconds and

198
00:08:53,300 --> 00:08:53,700
goes.

199
00:08:55,100 --> 00:08:56,600
I got to get a better set of headphones.

200
00:08:57,700 --> 00:08:59,600
the moral of this story is,

201
00:09:00,000 --> 00:09:05,200
Would be surprised at exactly how much variance there is in the sound

202
00:09:05,200 --> 00:09:07,800
that comes out of both speakers and headphones.

203
00:09:08,200 --> 00:09:09,200
When you plug them in.

204
00:09:09,200 --> 00:09:13,600
There are different kinds of effects that happen to the sound on the

205
00:09:13,600 --> 00:09:17,200
way out when you plug in a crappy headphones.

206
00:09:17,200 --> 00:09:20,900
Crappy speakers or even good speakers that are going through a system.

207
00:09:20,900 --> 00:09:25,700
Designed to make sound sound, better or smoother or warmer or whatever

208
00:09:25,700 --> 00:09:27,200
you want to call it.

209
00:09:27,500 --> 00:09:29,800
There's a bunch of essentially filtering.

210
00:09:30,000 --> 00:09:35,300
There's a bunch of mutation to the sound that happens and that

211
00:09:35,300 --> 00:09:39,300
mutation, while it may make the sound sound better, or make sound

212
00:09:39,300 --> 00:09:40,300
sound worse, who knows?

213
00:09:41,000 --> 00:09:45,900
Obscures the truth of what is actually getting put out of the lung,

214
00:09:46,000 --> 00:09:47,900
putting put out the line by the computer.

215
00:09:48,100 --> 00:09:52,000
So if you have very subtle bugs that result in very subtle artifacts

216
00:09:52,000 --> 00:09:52,800
in the sound.

217
00:09:53,000 --> 00:09:55,500
It's entirely possible that your sound setup.

218
00:09:55,600 --> 00:09:58,300
May not even allow you to hear them.

219
00:09:58,500 --> 00:09:59,800
That is, how finicky

220
00:10:00,500 --> 00:10:04,400
That's this sort of stuff is small errors in how you feel the sound

221
00:10:04,400 --> 00:10:04,900
buffer.

222
00:10:05,000 --> 00:10:10,000
Small Gap, small differences, can produce frequencies that you can

223
00:10:10,000 --> 00:10:11,600
actually hear on.

224
00:10:12,500 --> 00:10:13,400
And artifacts.

225
00:10:13,400 --> 00:10:18,000
You can actually here on very, very good frequency response, audio

226
00:10:18,800 --> 00:10:21,500
output like, you know headphones speakers whatever.

227
00:10:22,100 --> 00:10:26,200
But that you actually can't hear on Lower quality or smoothing stuff

228
00:10:26,200 --> 00:10:28,300
stuff that that sort of munches with the sound.

229
00:10:28,700 --> 00:10:29,900
And so one thing that's definitely

230
00:10:30,000 --> 00:10:35,900
Certainly true is that if you really, really want to know, if you've

231
00:10:35,900 --> 00:10:40,200
got sound bug Beyond being able to inspect the code and try to verify

232
00:10:40,200 --> 00:10:41,000
things as much as you can.

233
00:10:41,000 --> 00:10:45,500
But if you really want to debug sound code, strangely enough, you kind

234
00:10:45,500 --> 00:10:51,500
of got to invest in a pair of headphones that have really really good

235
00:10:51,600 --> 00:10:53,200
accurate frequency response.

236
00:10:53,200 --> 00:10:56,500
That really accurately produce, the sound reproduce sound because you

237
00:10:56,500 --> 00:10:58,900
may miss the bugs entirely.

238
00:10:59,600 --> 00:10:59,800
Anyway,

239
00:11:00,000 --> 00:11:01,100
Hoffman did fix the bug.

240
00:11:01,100 --> 00:11:04,100
So it was gone by the time of the jam but only because of the

241
00:11:04,100 --> 00:11:05,100
automatic headphones.

242
00:11:05,100 --> 00:11:09,400
So you got to give them props for putting out a good product.

243
00:11:09,400 --> 00:11:09,800
I guess.

244
00:11:09,900 --> 00:11:12,300
Anyway, that's a little story for you, at the beginning of the Stream.

245
00:11:16,800 --> 00:11:19,100
I hope you all enjoyed it.

246
00:11:19,100 --> 00:11:20,500
I'm not much of a Storyteller.

247
00:11:20,800 --> 00:11:24,400
So I'm sure it could have been done in a more exciting way possibly

248
00:11:24,400 --> 00:11:25,200
with visuals.

249
00:11:25,800 --> 00:11:26,400
But you know, what?

250
00:11:26,400 --> 00:11:27,000
Can I say?

251
00:11:27,300 --> 00:11:30,200
All right, so I'm going to go ahead and we'll open up emacs here.

252
00:11:30,200 --> 00:11:33,800
Just so we have our source code at hand in the editor as well.

253
00:11:34,900 --> 00:11:38,400
And then I'm basically going to take a second to talk about and think

254
00:11:38,400 --> 00:11:42,500
about how I want to go about verifying that this code works.

255
00:11:42,700 --> 00:11:44,300
So we've got a lot of moving parts.

256
00:11:44,500 --> 00:11:44,600
R.

257
00:11:44,600 --> 00:11:47,000
There's a lot of things that we have to think about.

258
00:11:47,100 --> 00:11:49,600
First of all, when we come through it, the first time we fill the

259
00:11:49,600 --> 00:11:54,200
entire buffer basically to give it something to play and and then

260
00:11:54,200 --> 00:11:57,200
we're going to go ahead and and kick that off.

261
00:11:57,200 --> 00:11:59,800
So that means as soon as we fill the buffer the first time,

262
00:12:00,000 --> 00:12:01,900
This then we kick it off the playing here.

263
00:12:01,900 --> 00:12:05,600
It starts, playing the sound, which means that that play cursor.

264
00:12:05,600 --> 00:12:08,500
The thing that we're chasing essentially is going to start moving

265
00:12:08,500 --> 00:12:09,500
through the buffer.

266
00:12:09,700 --> 00:12:11,900
It's going to start moving through the buffer and direct sounds going

267
00:12:11,900 --> 00:12:16,200
to be playing what's in that buffer as the play cursor, moves, and

268
00:12:16,200 --> 00:12:19,200
basically our job then because we filled the entire buffer.

269
00:12:19,200 --> 00:12:21,400
So basically our right position is back to zero.

270
00:12:22,200 --> 00:12:26,200
Our job is basically to go look at where that play cursor went to and

271
00:12:26,200 --> 00:12:28,800
then go ahead and and fill up to there.

272
00:12:29,200 --> 00:12:29,800
Now there's some

273
00:12:30,000 --> 00:12:32,400
Complexities and how we do this obviously.

274
00:12:32,900 --> 00:12:35,600
And there's some things that I want to point out that maybe aren't

275
00:12:35,600 --> 00:12:36,500
quite right.

276
00:12:36,600 --> 00:12:39,300
I'll give you an example of something that we're doing here that may

277
00:12:39,300 --> 00:12:40,100
be wrong.

278
00:12:40,200 --> 00:12:42,200
And so maybe we start to clean this code up.

279
00:12:42,200 --> 00:12:44,900
We start to think about these cases, starting to bug it and make sure

280
00:12:44,900 --> 00:12:45,400
what's going on.

281
00:12:45,400 --> 00:12:48,000
But like it was kind of a little hacky, you know, it's test code,

282
00:12:48,000 --> 00:12:48,500
that's fine.

283
00:12:48,500 --> 00:12:50,500
But you know, we're trying to actually pull this out and something

284
00:12:50,500 --> 00:12:51,500
we're going to use eventually.

285
00:12:51,500 --> 00:12:53,100
We got to start thinking about these things.

286
00:12:53,700 --> 00:12:56,700
So one of the things that we're doing, for example, is we get the play

287
00:12:56,700 --> 00:12:57,500
cursor, here.

288
00:12:57,600 --> 00:12:58,600
We take a look at the play.

289
00:12:58,600 --> 00:12:59,800
Cursor is equal to the bite.

290
00:13:00,000 --> 00:13:00,300
Lock.

291
00:13:00,300 --> 00:13:02,600
We assume that we're basically starting out.

292
00:13:02,600 --> 00:13:05,600
Everything's at zero and we're just going to fill now.

293
00:13:05,600 --> 00:13:07,400
Why might that be wrong, right?

294
00:13:09,900 --> 00:13:13,900
Well, one reason, it might be wrong, is because the B to lock and the

295
00:13:13,900 --> 00:13:14,700
play cursor.

296
00:13:15,300 --> 00:13:16,800
Well, we know what B to lock will be.

297
00:13:16,800 --> 00:13:20,000
After we're done, if we write the whole secondary, buffer size.

298
00:13:20,400 --> 00:13:23,100
Then B to lock is basically going to be back at zero, right?

299
00:13:23,100 --> 00:13:25,800
Because it's going to advance one whole buffer size worth, but we're

300
00:13:25,800 --> 00:13:27,300
modding by the buffer size.

301
00:13:27,500 --> 00:13:29,900
So every time we advance it one whole buffer size.

302
00:13:30,000 --> 00:13:32,200
It's back to the exact same position was where it started, which in

303
00:13:32,200 --> 00:13:33,900
this case would be zero.

304
00:13:34,200 --> 00:13:38,100
So if the play cursor has not moved the, next time we get back to

305
00:13:38,100 --> 00:13:39,600
through this Loop, if the play cursor.

306
00:13:39,700 --> 00:13:43,400
Back where it was, we would refill the whole buffer again, which is

307
00:13:43,400 --> 00:13:45,900
totally wrong because the buffer hasn't actually been played.

308
00:13:46,800 --> 00:13:47,600
Does that make sense?

309
00:13:48,200 --> 00:13:51,800
And that could very legitimately happen depending on the system?

310
00:13:51,800 --> 00:13:55,900
Because let's say that we are on a system whose play cursor reporting

311
00:13:56,100 --> 00:13:57,300
isn't particularly accurate.

312
00:13:57,300 --> 00:14:01,300
You have to remember the play cursor is basically an estimate of where

313
00:14:01,400 --> 00:14:04,100
the sound card is, in terms of playing out.

314
00:14:04,100 --> 00:14:08,000
The sound on the speakers in some sense, but we don't actually know

315
00:14:08,000 --> 00:14:09,500
how that's being computed, that

316
00:14:09,700 --> 00:14:13,000
Has a lot to do with what the sound output chip is on your actual

317
00:14:13,000 --> 00:14:13,600
computer.

318
00:14:13,600 --> 00:14:16,800
What the drivers are doing, how frequently they update with direct

319
00:14:16,800 --> 00:14:17,300
sound.

320
00:14:17,300 --> 00:14:18,700
How direct sound in the kernel mixer?

321
00:14:18,700 --> 00:14:21,300
Decide how they're going to report those values when they're going to

322
00:14:21,300 --> 00:14:23,900
report those values, when they're going to service those values.

323
00:14:24,200 --> 00:14:27,500
We have no idea what's going on here and certainly in the old days

324
00:14:27,800 --> 00:14:31,200
that play cursor used to actually be updated very infrequently.

325
00:14:31,200 --> 00:14:32,500
In fact, nowadays.

326
00:14:32,500 --> 00:14:35,100
I suspect it's probably a lot more frequent, the updates that are

327
00:14:35,100 --> 00:14:38,500
coming through it, but it's worth remembering that it could actually

328
00:14:38,500 --> 00:14:39,500
happen that

329
00:14:39,700 --> 00:14:40,600
Doesn't actually advance.

330
00:14:40,600 --> 00:14:43,400
So that's kind of a bug waiting to happen in my opinion.

331
00:14:43,700 --> 00:14:48,200
So this we need a more accurate.

332
00:14:48,200 --> 00:14:52,200
Check van B to lock equals play cursor.

333
00:14:52,600 --> 00:14:55,600
Basically, what we kind of want to do is maybe write something that's

334
00:14:55,600 --> 00:14:58,800
a little more intelligent and looks to see wants to see that play

335
00:14:58,800 --> 00:14:59,800
cursor advance of

336
00:15:00,000 --> 00:15:04,700
It and know that it has actually been updated before we actually fill

337
00:15:04,700 --> 00:15:05,100
it again.

338
00:15:05,100 --> 00:15:07,700
Like one thing we could do trivially perhaps to increase the

339
00:15:07,800 --> 00:15:11,200
reliability of this code would be to check to make sure that in two

340
00:15:11,200 --> 00:15:12,400
times through the loop.

341
00:15:12,500 --> 00:15:16,400
We have seen a different play cursor, like don't take any action until

342
00:15:16,400 --> 00:15:19,200
we actually see that play cursor move because the play cursor hasn't

343
00:15:19,200 --> 00:15:20,200
moved then.

344
00:15:20,200 --> 00:15:23,500
We are in a situation where we really don't know what's going on and

345
00:15:23,500 --> 00:15:25,400
we probably shouldn't be touching the buffer.

346
00:15:28,000 --> 00:15:28,600
Excuse me.

347
00:15:30,100 --> 00:15:32,700
Still sick getting better, but still sick.

348
00:15:33,800 --> 00:15:34,400
It is true.

349
00:15:36,200 --> 00:15:39,500
Okay, so that's something that we need to take a look at certainly

350
00:15:39,800 --> 00:15:40,900
something to think about.

351
00:15:40,900 --> 00:15:42,200
The other thing that I want to do.

352
00:15:42,200 --> 00:15:44,200
And the first thing that I think we're going to do here, is that a

353
00:15:44,200 --> 00:15:50,000
square wave is actually not a particularly good wave for hearing

354
00:15:50,400 --> 00:15:50,900
errors.

355
00:15:50,900 --> 00:15:52,900
And the reason it's a very harsh wave.

356
00:15:53,100 --> 00:15:56,100
You can actually just tell just by looking at the square wave.

357
00:15:56,100 --> 00:15:59,700
And for those of you here yesterday, you know what the square wave is

358
00:15:59,700 --> 00:16:02,600
but I'll I'll just bring it up again just to refresh your memory.

359
00:16:02,900 --> 00:16:05,700
A square wave is basically completely harsh cut.

360
00:16:06,000 --> 00:16:10,000
It's full-on followed by full off, Paul by full-on, or I should say,

361
00:16:10,000 --> 00:16:12,100
full positive, followed by full -.

362
00:16:12,900 --> 00:16:16,100
And if you think about that, that basically introduces, this really

363
00:16:16,100 --> 00:16:16,500
hard.

364
00:16:16,500 --> 00:16:17,800
It's very unnatural.

365
00:16:17,800 --> 00:16:19,400
That's not something that you're probably ever.

366
00:16:19,400 --> 00:16:20,800
Actually going to see in the real world.

367
00:16:20,800 --> 00:16:21,200
Right?

368
00:16:21,200 --> 00:16:22,900
Sound is a lot smoother, normally.

369
00:16:23,500 --> 00:16:25,200
And so that's just a bad thing to test against.

370
00:16:25,200 --> 00:16:27,700
We don't really know what that should sound like intuitively.

371
00:16:28,100 --> 00:16:30,100
We probably can't hear errors and it very well.

372
00:16:30,200 --> 00:16:33,000
So, the first thing that I want to do and I didn't do this originally

373
00:16:33,000 --> 00:16:35,700
because I didn't want to try to, I didn't want to complicate the

374
00:16:36,000 --> 00:16:39,300
Well Nation by starting to talk about transcendentals and and things

375
00:16:39,300 --> 00:16:42,700
like this is we're going to actually switch to a sine wave, a sine

376
00:16:42,700 --> 00:16:43,000
wave.

377
00:16:43,000 --> 00:16:46,000
Obviously is very familiar to most people and you've probably seen it.

378
00:16:46,000 --> 00:16:49,600
If you've ever taken high school math, at least in the United States.

379
00:16:49,700 --> 00:16:52,600
Typically everyone has to go through trigonometry, which means that

380
00:16:52,600 --> 00:16:54,400
you'll have seen something like a sine wave.

381
00:16:54,700 --> 00:16:58,300
A sine wave is basically a continuous periodic wave that just kind of

382
00:16:58,300 --> 00:16:59,300
Loops up and down.

383
00:17:00,000 --> 00:17:03,900
Very smooth, very continuous and it is up sounds to your ear like a

384
00:17:03,900 --> 00:17:05,300
very pure tone.

385
00:17:06,000 --> 00:17:10,200
Is like the most pure sounding tone that you can really hear.

386
00:17:10,200 --> 00:17:10,700
It's like this.

387
00:17:10,700 --> 00:17:11,599
Perfect.

388
00:17:11,700 --> 00:17:12,800
Smooth.

389
00:17:12,800 --> 00:17:14,000
No noise.

390
00:17:14,099 --> 00:17:16,000
No you, no, harshness to it.

391
00:17:16,099 --> 00:17:18,099
It's like a very warm pure tone.

392
00:17:18,599 --> 00:17:21,500
And so what I'd like to do is basically just first switch over to a

393
00:17:21,500 --> 00:17:25,000
sine wave because I think we'll have an easier time hearing the

394
00:17:25,000 --> 00:17:25,700
errors.

395
00:17:26,099 --> 00:17:30,600
If we switch over to a sine wave for, for our, for our

396
00:17:32,300 --> 00:17:33,400
For our sound output.

397
00:17:33,400 --> 00:17:34,800
So that's the first thing we're going to do.

398
00:17:35,100 --> 00:17:36,300
And in order to do that.

399
00:17:36,300 --> 00:17:38,900
We need to change the way that we're Computing our sample value.

400
00:17:38,900 --> 00:17:41,900
Because remember, our sample value is currently being computed as a

401
00:17:41,900 --> 00:17:42,600
square wave.

402
00:17:42,600 --> 00:17:46,500
So we're going to go ahead and and change this Square wave period to

403
00:17:46,500 --> 00:17:48,600
just wave period and a half Square.

404
00:17:48,600 --> 00:17:51,500
Wave period to half wave period because now we're going to actually

405
00:17:51,700 --> 00:17:53,700
not be talking about a square wave anymore.

406
00:17:54,000 --> 00:17:56,800
We are going to be talking about a sine wave.

407
00:17:56,900 --> 00:17:59,800
So if we actually go in here, the first thing that

408
00:18:00,000 --> 00:18:02,700
Have to understand is basically we're going to be seeing

409
00:18:02,700 --> 00:18:04,900
floating-point numbers for the first time.

410
00:18:07,500 --> 00:18:10,500
And I'm not going to try to explain them fully here because we don't

411
00:18:10,500 --> 00:18:12,400
really need to understand them fully to do this.

412
00:18:13,100 --> 00:18:15,500
But there's something that's going to come up again in the Stream

413
00:18:15,500 --> 00:18:18,700
actually fairly soon that we will have to start understanding in a

414
00:18:18,700 --> 00:18:19,600
little more detail.

415
00:18:19,600 --> 00:18:21,600
So this is just your first introduction to them.

416
00:18:21,900 --> 00:18:25,100
Don't worry about them too much, but try to start getting acquainted.

417
00:18:25,400 --> 00:18:28,000
Basically, what I like to do, like everything else is, I like to have

418
00:18:28,000 --> 00:18:31,300
a typedef for them because I like to be able to specify the size.

419
00:18:31,300 --> 00:18:37,100
Explicitly, basically, the types that I use for them are real 32.

420
00:18:37,500 --> 00:18:39,800
And real 64.

421
00:18:40,000 --> 00:18:43,900
Those are those are the two types that I use and basically, they

422
00:18:43,900 --> 00:18:48,900
correspond to the two built-in types for C and C++, which are float

423
00:18:49,000 --> 00:18:54,700
and double now, afloat is 32 bits wide and a double is 64 bits wide on

424
00:18:54,700 --> 00:18:56,400
the machines that we're talking about here.

425
00:18:56,900 --> 00:19:01,000
And basically, that is usually true across a lot of platforms because

426
00:19:01,200 --> 00:19:05,500
there's a thing called the IEEE standard for floating point and it

427
00:19:05,500 --> 00:19:06,500
actually specifies.

428
00:19:06,700 --> 00:19:07,100
How that

429
00:19:07,200 --> 00:19:10,200
At how the floats work and how they work in 32 bit.

430
00:19:10,500 --> 00:19:12,200
So you can actually take a look here.

431
00:19:14,000 --> 00:19:16,000
If you look this up, you can actually see.

432
00:19:16,000 --> 00:19:19,200
There's, there's a whole spec for these sorts of things that you can

433
00:19:19,200 --> 00:19:20,300
look at this.

434
00:19:20,400 --> 00:19:26,600
It's it's not, it's basically it's, it's a very rigorously defined

435
00:19:26,600 --> 00:19:26,800
thing.

436
00:19:26,800 --> 00:19:27,100
I guess.

437
00:19:27,100 --> 00:19:28,100
It's how I would say it.

438
00:19:28,100 --> 00:19:32,700
So there's not a lot of flexibility across platforms with how the

439
00:19:32,700 --> 00:19:34,100
actual math works out.

440
00:19:34,100 --> 00:19:35,600
When you're operating on these values.

441
00:19:35,600 --> 00:19:37,100
There's they're actually a very rigorous

442
00:19:37,300 --> 00:19:40,200
This definition for how all the math has to be worked out.

443
00:19:40,200 --> 00:19:43,700
There's reasons behind all of it will refer to some of it as we go

444
00:19:43,700 --> 00:19:44,600
through the stream.

445
00:19:44,900 --> 00:19:48,700
But a lot of the minutiae here, there's a lot of minutiae to floating

446
00:19:48,700 --> 00:19:49,400
Point math.

447
00:19:49,400 --> 00:19:52,600
There will probably never get to stuff that you only really care about

448
00:19:52,600 --> 00:19:56,300
in scientific Computing or very delicate numerical algorithms, where

449
00:19:56,300 --> 00:20:00,500
you care about stuff like, is something positive or negative zero.

450
00:20:00,500 --> 00:20:03,000
And yes, ladies gentleman, there is such a thing as positive or

451
00:20:03,000 --> 00:20:06,400
negative zero, and the IEEE, and there's good reasons for it to

452
00:20:06,600 --> 00:20:07,100
reasons that.

453
00:20:07,200 --> 00:20:11,300
That I don't necessarily pretend to understand very deeply because

454
00:20:11,400 --> 00:20:12,900
some of the people who came up with this stuff.

455
00:20:12,900 --> 00:20:16,300
We're really crazy good at thinking about computer math and all of the

456
00:20:16,300 --> 00:20:18,900
ramifications of it for computing, actual math.

457
00:20:19,000 --> 00:20:22,400
It's scary how much thought went into some of these things and if

458
00:20:22,400 --> 00:20:26,200
you're into that sort of stuff, I highly recommend reading about the

459
00:20:26,200 --> 00:20:27,000
history of it.

460
00:20:27,000 --> 00:20:29,900
And so on it's it's actually very fascinating but we're not going to

461
00:20:29,900 --> 00:20:33,700
go into that today or possibly ever.

462
00:20:33,700 --> 00:20:36,100
We're only going to kind of touch on them a little bit.

463
00:20:37,600 --> 00:20:38,400
Further out.

464
00:20:38,500 --> 00:20:41,100
So we are going to go ahead and include math.h.

465
00:20:41,300 --> 00:20:45,300
And this is just something again for test code in the actual code that

466
00:20:45,300 --> 00:20:46,400
we actually right.

467
00:20:46,900 --> 00:20:51,200
We are probably going to take the time to not use the C runtime

468
00:20:51,200 --> 00:20:57,500
library for for floating Point operations that we're about to use the

469
00:20:57,500 --> 00:20:58,700
C runtime library for here.

470
00:20:58,700 --> 00:20:59,800
They're built in

471
00:21:00,000 --> 00:21:04,000
Basically, if you want to call sign, if you want to call cosine, to

472
00:21:04,000 --> 00:21:07,900
want to called tangent or anti tangent, these sorts of things, they

473
00:21:07,900 --> 00:21:12,100
are actually built into the C runtime library and sometimes they are

474
00:21:12,100 --> 00:21:12,800
built into the CPU.

475
00:21:12,800 --> 00:21:16,500
But some of them aren't built into the CPU.

476
00:21:16,500 --> 00:21:20,400
And one of the things that I was kept harping on on the stream over

477
00:21:20,400 --> 00:21:22,100
and over is that we're not going to use any libraries.

478
00:21:22,100 --> 00:21:26,400
And so even though some of these may be built in some of them may not

479
00:21:26,400 --> 00:21:27,500
be built in etcetera, Etc.

480
00:21:27,500 --> 00:21:29,900
What I want to do sort of

481
00:21:30,100 --> 00:21:32,900
The stream proper after we get out of the platform layer because I

482
00:21:32,900 --> 00:21:35,500
want to actually show you how to implement some of these things

483
00:21:35,600 --> 00:21:37,000
yourself directly.

484
00:21:37,300 --> 00:21:40,400
So for, at the moment because we're focusing on sound, we're going to

485
00:21:40,400 --> 00:21:43,800
go ahead and allow ourselves to use that sign function for testing

486
00:21:43,800 --> 00:21:44,400
purposes.

487
00:21:44,400 --> 00:21:47,600
But when we actually go to implement the actual game, when we want to

488
00:21:47,600 --> 00:21:51,600
sign a cosine, I'm going to show you a little bit more about how those

489
00:21:51,600 --> 00:21:52,800
things are computed.

490
00:21:52,900 --> 00:21:56,400
And the things that we should actually be aware of to implement them

491
00:21:56,400 --> 00:21:57,100
ourselves.

492
00:21:57,100 --> 00:21:58,200
I think that'd be a good idea.

493
00:21:58,200 --> 00:21:59,900
I realize it's a little bit Overkill a lot of

494
00:22:00,000 --> 00:22:01,900
People watching the stream or probably like, that's ridiculous.

495
00:22:01,900 --> 00:22:04,800
But, you know, like I said, we're trying to use know libraries.

496
00:22:04,900 --> 00:22:09,800
So we'll probably actually not use any libraries, but for test code,

497
00:22:09,800 --> 00:22:11,000
you're allowed to call anything you want.

498
00:22:11,000 --> 00:22:15,700
If you want to test code, is just basically about testing stuff as

499
00:22:15,700 --> 00:22:16,700
efficiently as possible.

500
00:22:16,900 --> 00:22:20,400
And so if you've got it, you can use it that is totally fine much.

501
00:22:20,400 --> 00:22:21,600
Like here in the platform layer.

502
00:22:21,600 --> 00:22:24,300
We use all courts sorts things like output debug string.

503
00:22:25,300 --> 00:22:28,300
When you're on a particular platform, always feel free to use whatever

504
00:22:28,300 --> 00:22:29,700
that platform gives you.

505
00:22:30,000 --> 00:22:33,100
Get your test code up and running and that sort of stuff that is

506
00:22:33,100 --> 00:22:33,900
always totally fine.

507
00:22:33,900 --> 00:22:34,900
Obviously as well.

508
00:22:35,200 --> 00:22:38,100
And in general like I've said sorry to harp on this but using

509
00:22:38,100 --> 00:22:39,500
libraries and stuff is fine too.

510
00:22:40,000 --> 00:22:42,500
Some people have been getting the impression that I say don't ever use

511
00:22:42,500 --> 00:22:44,200
libraries and I think that that's not true.

512
00:22:44,800 --> 00:22:47,800
The only reason we're not using any libraries on this stream is just

513
00:22:47,800 --> 00:22:49,700
because I want to show you how everything is done.

514
00:22:49,900 --> 00:22:51,800
Not because I think there's anything wrong with libraries there.

515
00:22:51,800 --> 00:22:55,200
A couple libraries that I even like and I use Sean Barrett's libraries

516
00:22:55,200 --> 00:22:58,200
the stb libraries I've used in code many times and I love them.

517
00:22:58,700 --> 00:22:59,900
So yeah, there's nothing wrong with

518
00:23:00,000 --> 00:23:02,600
Libraries, it's just we're going to be trying to make sure that we

519
00:23:02,600 --> 00:23:05,400
really don't rely on any interactional game code because I just want

520
00:23:05,400 --> 00:23:07,500
to show you how to build your own stuff.

521
00:23:07,700 --> 00:23:11,900
Okay, so we want to compute a sample value, that's going to be a sine

522
00:23:11,900 --> 00:23:12,400
wave.

523
00:23:12,400 --> 00:23:16,500
So basically how this actually works is, we're going to have one of

524
00:23:16,500 --> 00:23:18,500
our floating Point values here.

525
00:23:18,600 --> 00:23:21,200
That's going to be the sine value that comes back, right?

526
00:23:21,600 --> 00:23:22,800
We are going to have a signed value.

527
00:23:22,800 --> 00:23:23,800
That's in floating point.

528
00:23:23,900 --> 00:23:26,000
The reason that we're going to do that is because all of these

529
00:23:26,000 --> 00:23:29,100
advanced math functions of transcendental, sine cosine, tangent, those

530
00:23:29,100 --> 00:23:29,600
sorts of things.

531
00:23:30,100 --> 00:23:33,900
They do not operate on integers by default because all of these

532
00:23:33,900 --> 00:23:36,900
things, the mathematical definition for them is stuff like, you know,

533
00:23:36,900 --> 00:23:41,700
sign returns a value between negative one and one that is just the

534
00:23:41,700 --> 00:23:45,300
mathematical definition typically of how signed works you pass in an

535
00:23:45,300 --> 00:23:46,400
angle, right?

536
00:23:46,400 --> 00:23:49,000
If you remember your trigonometry you pass in an angle, the angle is

537
00:23:49,000 --> 00:23:52,300
usually in radians, but you could also think of the angle is being in

538
00:23:52,300 --> 00:23:55,500
degrees and then convert to radians computers work in radians, but

539
00:23:55,500 --> 00:23:58,400
sometimes math classes teach things in degrees.

540
00:23:58,400 --> 00:23:59,800
So six of one half dozen of the other.

541
00:24:00,000 --> 00:24:00,900
Is convert between them.

542
00:24:00,900 --> 00:24:04,400
A point being you pass in an angle in radians, and you get back.

543
00:24:06,800 --> 00:24:09,500
From that a value between negative 1 and 1.

544
00:24:09,900 --> 00:24:13,300
So obviously an integer would not be a very useful thing to return

545
00:24:13,300 --> 00:24:17,900
this in because it only has negative 1 0 and 1 as values.

546
00:24:17,900 --> 00:24:20,200
And you need all the values in between, you need all those fractional

547
00:24:20,200 --> 00:24:20,600
values.

548
00:24:20,600 --> 00:24:23,500
Now one thing they could have done is decided to multiply it out, so

549
00:24:23,500 --> 00:24:27,000
that it actually returned like - 4 billion to positive, 4 billion or

550
00:24:27,000 --> 00:24:31,500
sorry - 2 billion to positive 2 billion as the values and then, you

551
00:24:31,500 --> 00:24:34,500
know, blah, blah, blah, but because if you're using sine and cosine,

552
00:24:34,500 --> 00:24:35,200
you're almost.

553
00:24:35,200 --> 00:24:35,700
Oh, he's

554
00:24:36,400 --> 00:24:40,200
With very mathy code and mathy code is almost always written in

555
00:24:40,200 --> 00:24:41,100
floating Point.

556
00:24:41,200 --> 00:24:44,300
All of the math functions natively work in floating Point as well.

557
00:24:44,300 --> 00:24:46,400
And we are mostly going to be doing our math and floating-point to

558
00:24:46,400 --> 00:24:52,000
because modern processors have a lot, a lot of horsepower designed to

559
00:24:52,000 --> 00:24:55,400
facilitate floating Point math, and we want to take advantage of that.

560
00:24:55,400 --> 00:24:57,700
It used to be in the old days.

561
00:24:57,700 --> 00:25:00,900
In fact, when I was growing up, my favorite computer to program on to

562
00:25:00,900 --> 00:25:01,000
get.

563
00:25:01,000 --> 00:25:02,300
This is a very Marie under extreme today.

564
00:25:02,300 --> 00:25:03,200
That's by Design.

565
00:25:03,400 --> 00:25:05,700
I apologize for boring people with my stories, but I'm going to

566
00:25:05,800 --> 00:25:06,000
Tell him.

567
00:25:06,000 --> 00:25:08,700
Anyway, sometimes it's the coffee.

568
00:25:08,800 --> 00:25:09,400
I had some coffee.

569
00:25:09,400 --> 00:25:11,200
This morning makes me very loquacious.

570
00:25:11,200 --> 00:25:11,700
It's true.

571
00:25:13,900 --> 00:25:15,900
I think coffee has a similar effect of alcohol.

572
00:25:15,900 --> 00:25:18,300
Perhaps where you start to think your stories are really interesting

573
00:25:18,300 --> 00:25:20,200
even though they're no more interesting than before you drank the

574
00:25:20,200 --> 00:25:20,800
coffee.

575
00:25:21,000 --> 00:25:21,800
But here's the thing.

576
00:25:22,500 --> 00:25:23,900
I used to have an Amiga computer.

577
00:25:23,900 --> 00:25:26,200
I said this on the stream before and I loved programming on that

578
00:25:26,200 --> 00:25:28,300
thing, but one of the interesting things about computers that time

579
00:25:28,300 --> 00:25:30,100
specially home, computers at that time.

580
00:25:30,300 --> 00:25:33,000
They oftentimes didn't have any floating Point operations in the

581
00:25:33,000 --> 00:25:37,200
actual Hardware, the 68000 CPU, which is what power the original Amiga

582
00:25:37,200 --> 00:25:40,400
Amiga 500 Mega 2000, Mega 1000.

583
00:25:40,900 --> 00:25:42,000
Those did not have

584
00:25:42,100 --> 00:25:44,500
Have what's called a floating Point Unit and FPU.

585
00:25:44,700 --> 00:25:46,000
They did not have one in there.

586
00:25:46,000 --> 00:25:48,600
And so they actually could not natively compute.

587
00:25:48,800 --> 00:25:51,900
Anything in floating Point, all of their computations were done with

588
00:25:51,900 --> 00:25:52,500
integer.

589
00:25:52,600 --> 00:25:55,500
And if you wanted floating Point operations, that meant it had to be

590
00:25:55,500 --> 00:25:56,000
implemented.

591
00:25:56,000 --> 00:25:59,900
Essentially, using integer arithmetic that simulated, the floating

592
00:25:59,900 --> 00:26:01,800
Point math, which is obviously very expensive.

593
00:26:01,800 --> 00:26:05,500
Much more expensive because you're doing a lot of operations to

594
00:26:05,500 --> 00:26:05,900
simulate.

595
00:26:05,900 --> 00:26:08,600
Essentially, one operation, you want to do a floating-point multiply

596
00:26:08,900 --> 00:26:11,400
you got to do a bunch of integer work to make that happen.

597
00:26:11,400 --> 00:26:12,000
You're basically doing

598
00:26:12,100 --> 00:26:14,100
What the CPU would be doing internally.

599
00:26:15,200 --> 00:26:17,900
So in the old days people used what was called fixed point.

600
00:26:18,100 --> 00:26:21,300
And what fixed point is, is it's basically a way of dividing up your

601
00:26:21,300 --> 00:26:23,000
integer into pieces.

602
00:26:23,000 --> 00:26:23,800
And you know, what?

603
00:26:23,900 --> 00:26:24,900
Because it's sort of worked.

604
00:26:24,900 --> 00:26:27,900
And I'm not going to use the word so well, because so, well would be

605
00:26:27,900 --> 00:26:32,200
kind of kind of overstating the case, but because it worked at all,

606
00:26:32,200 --> 00:26:35,700
let's just use that phrase because it worked at all for our audio.

607
00:26:35,700 --> 00:26:38,000
The other day, when I was drawing out to you, what we were doing.

608
00:26:38,000 --> 00:26:40,500
I'm going to go ahead and go over here to the diagram and just kind of

609
00:26:40,500 --> 00:26:43,200
draw out for you, what I mean, so that's a little clearer.

610
00:26:43,900 --> 00:26:44,900
So if you imagine

611
00:26:45,000 --> 00:26:48,400
And basically we've got I like drawing these little hash marks with

612
00:26:48,400 --> 00:26:48,800
either side.

613
00:26:48,800 --> 00:26:51,700
As you know, everything can be that this was a sound buffer yesterday

614
00:26:51,700 --> 00:26:51,900
today.

615
00:26:51,900 --> 00:26:55,900
This is going to be a 32-bit integer, right?

616
00:26:57,200 --> 00:26:59,800
So basically what happens in a 32-bit integer, right?

617
00:27:00,200 --> 00:27:02,100
And, you know, usually look at him.

618
00:27:02,100 --> 00:27:04,800
This is going to be the 31st bit up here.

619
00:27:05,600 --> 00:27:09,100
And this is going to be the zeroeth, bit down here, right?

620
00:27:09,200 --> 00:27:10,200
That's where we're at.

621
00:27:10,300 --> 00:27:14,800
And we've got, we can basically chunk this up into even parts that are

622
00:27:14,800 --> 00:27:15,800
8 Bits, each.

623
00:27:16,100 --> 00:27:17,700
This is B 0, right.

624
00:27:17,700 --> 00:27:20,800
This is b, 1 b, 2, and B 3, right?

625
00:27:20,900 --> 00:27:22,000
That's what we've got.

626
00:27:22,200 --> 00:27:22,900
Basically.

627
00:27:23,200 --> 00:27:24,900
These are B here, each one's 8 Bits.

628
00:27:25,500 --> 00:27:28,600
So if you take a look at this, 32-bit integer, there's a number of

629
00:27:28,600 --> 00:27:29,900
ways that we could imagine.

630
00:27:30,000 --> 00:27:32,100
Ajan, that it was divided.

631
00:27:32,100 --> 00:27:32,700
Right?

632
00:27:32,800 --> 00:27:36,900
What we've been doing so far is we've either been assuming that it's

633
00:27:36,900 --> 00:27:40,700
unsigned, which means that all of the bits just act together to give

634
00:27:40,700 --> 00:27:41,500
you one value.

635
00:27:41,500 --> 00:27:46,600
So there's the 0 B, the one, the sorry, there's the, the one bit that

636
00:27:46,600 --> 00:27:49,300
there's the bit that if it is, set it equals 1, then the one that's

637
00:27:49,300 --> 00:27:55,700
equal 2, then 4, then 8, then 16 32 64 128, 256, 512 etcetera,

638
00:27:55,700 --> 00:27:56,700
etcetera, right?

639
00:27:56,900 --> 00:27:59,100
And you add all those up together and that's your number.

640
00:27:59,200 --> 00:27:59,800
So if you have the

641
00:28:00,000 --> 00:28:04,100
Item, 3, B, set, you know that your actual value is the one plus, the

642
00:28:04,100 --> 00:28:05,500
2 plus the for, right?

643
00:28:05,500 --> 00:28:07,000
We went over this in the intro to see stream.

644
00:28:07,000 --> 00:28:09,400
Hopefully, everyone's familiar with the binary encoding there.

645
00:28:09,700 --> 00:28:11,100
That's how we been doing it.

646
00:28:11,300 --> 00:28:14,100
And then sometimes we've used negative numbers and negative numbers

647
00:28:14,100 --> 00:28:15,400
use, what's called two's complement.

648
00:28:15,400 --> 00:28:19,000
And that's basically where you have the high bit is set, you know,

649
00:28:19,000 --> 00:28:22,200
it's a negative number and then the rest of these are encoded in a way

650
00:28:22,200 --> 00:28:22,900
that basically makes.

651
00:28:22,900 --> 00:28:24,500
So, the mass still works out for negatives.

652
00:28:24,500 --> 00:28:25,700
You interpret them say differently.

653
00:28:25,700 --> 00:28:27,600
We didn't actually talk about to accomplish on the stream.

654
00:28:27,600 --> 00:28:29,600
We should probably do a string about that at some point.

655
00:28:29,900 --> 00:28:31,700
But it's not germane at the moment.

656
00:28:31,700 --> 00:28:33,900
So we're just going to skip that bleeping.

657
00:28:33,900 --> 00:28:34,800
That's all we've done though.

658
00:28:34,800 --> 00:28:35,400
So far.

659
00:28:36,200 --> 00:28:38,700
Now there's other things we could have done with our 32-bit integer.

660
00:28:39,000 --> 00:28:43,600
Let's say that we actually wanted to store some fractional Precision

661
00:28:43,600 --> 00:28:43,900
here.

662
00:28:44,100 --> 00:28:49,400
Let's say that we wanted to do something like have a number, so we

663
00:28:49,400 --> 00:28:50,600
have a number, right?

664
00:28:50,600 --> 00:28:55,100
Like we would in math, but with a decimal point and then a fractional

665
00:28:55,100 --> 00:28:57,400
part that comes after it, right?

666
00:28:57,800 --> 00:28:59,800
Well, one thing that we could do, if we

667
00:29:00,000 --> 00:29:05,400
To do that is we could imagine that we just separated up our bits into

668
00:29:05,400 --> 00:29:10,000
this part, right and this part so we could say, we could just

669
00:29:10,000 --> 00:29:11,200
arbitrarily say, okay.

670
00:29:11,200 --> 00:29:15,000
Let's say the bottom eight bits, are the fraction, right?

671
00:29:15,600 --> 00:29:19,300
And then the top 24 bits are the number, right?

672
00:29:19,300 --> 00:29:23,200
So this is a number up here this 24-bit number, which means it can be

673
00:29:23,200 --> 00:29:24,700
up to like 16 million, right?

674
00:29:24,700 --> 00:29:29,800
So, we have zero to 16 million in the top part and then down here we

675
00:29:29,900 --> 00:29:31,300
Of zero to 256.

676
00:29:31,500 --> 00:29:35,900
And so we just assume that we have a well 255 I should say, right?

677
00:29:35,900 --> 00:29:40,000
So we just assume that we have whatever this number is in the top, 20

678
00:29:40,000 --> 00:29:40,500
for a b.

679
00:29:40,700 --> 00:29:44,100
And then we have a fraction that is essentially whatever this number

680
00:29:44,100 --> 00:29:45,100
is will call this.

681
00:29:45,100 --> 00:29:45,900
Number F.

682
00:29:45,900 --> 00:29:47,000
Let's say for fraction.

683
00:29:47,100 --> 00:29:50,300
We have F over 256.

684
00:29:50,500 --> 00:29:52,200
So our number is whatever.

685
00:29:52,200 --> 00:29:56,500
Our number is in the top 24 bits, this thing, plus whatever.

686
00:29:56,500 --> 00:29:58,700
This thing was divided by 256.

687
00:29:59,000 --> 00:29:59,800
You see how we could we

688
00:30:00,100 --> 00:30:03,800
Would encode it that way and you can see how that be pretty easy to

689
00:30:03,800 --> 00:30:06,300
abstract a to extract as well.

690
00:30:06,500 --> 00:30:08,800
If we wanted to just know what the top number is.

691
00:30:08,900 --> 00:30:11,900
We could just shift this down, shift this down by eight.

692
00:30:11,900 --> 00:30:12,400
Right?

693
00:30:12,400 --> 00:30:15,100
So the whole number we'll call the entire number W.

694
00:30:15,100 --> 00:30:19,900
Let's say, if the whole number was shifted down by eight bits, it

695
00:30:19,900 --> 00:30:23,200
would knock out the fraction and leave us with just the actual number.

696
00:30:23,200 --> 00:30:26,600
So we know our whole number very quickly, that's called truncation.

697
00:30:26,600 --> 00:30:28,500
It gets rid of the fraction entirely, right?

698
00:30:28,500 --> 00:30:29,800
It just gives us back the number.

699
00:30:30,000 --> 00:30:34,100
We could also round the number if we wanted to, we could add right

700
00:30:34,200 --> 00:30:34,900
half of this.

701
00:30:34,900 --> 00:30:38,900
We could add 256 over 2 or whatever, right?

702
00:30:39,200 --> 00:30:42,000
Actually, it's actually technically 255 over 2.

703
00:30:42,000 --> 00:30:43,600
So P 127, right?

704
00:30:43,700 --> 00:30:50,300
We could add 127 to the bottom, which would mean that if it was 128 or

705
00:30:50,300 --> 00:30:51,700
higher, right?

706
00:30:52,200 --> 00:30:57,000
It would wrap and add one into here, it would carry into their right

707
00:30:57,000 --> 00:30:58,900
and that would increment our whole number by one.

708
00:30:59,400 --> 00:30:59,900
If it

709
00:31:00,400 --> 00:31:03,500
If it was less than that, then it wouldn't carry.

710
00:31:03,500 --> 00:31:04,700
It would just stay in here.

711
00:31:04,700 --> 00:31:08,800
When we did the ad, we could do that ad, then do the shift which would

712
00:31:08,800 --> 00:31:11,400
have the effect of rounding, right?

713
00:31:11,400 --> 00:31:14,000
So truncation would be this.

714
00:31:14,000 --> 00:31:15,700
This is truncation right here, right?

715
00:31:15,700 --> 00:31:16,600
That's truncation.

716
00:31:17,000 --> 00:31:19,400
And rounding is just W.

717
00:31:19,600 --> 00:31:25,700
Plus the fraction total over 2, then we shift it down by eight, right?

718
00:31:26,200 --> 00:31:28,700
Hopefully, I'm, you know, I'm this is not a complete explanation

719
00:31:28,700 --> 00:31:28,900
either.

720
00:31:28,900 --> 00:31:29,800
Hopefully that kind of makes them.

721
00:31:29,900 --> 00:31:31,100
Sense, right.

722
00:31:31,600 --> 00:31:34,300
You see how that could kind of work and then we're basically doing a

723
00:31:34,300 --> 00:31:36,700
bunch of math on numbers that are encoded this way.

724
00:31:36,700 --> 00:31:38,600
There's some other stuff you have to do with multiplication.

725
00:31:38,600 --> 00:31:40,800
You have to worry about the shifting because you've got an extra

726
00:31:40,800 --> 00:31:42,300
decimal place and all this sort stuff.

727
00:31:42,400 --> 00:31:43,400
I won't really cover that.

728
00:31:43,400 --> 00:31:46,600
But basically, this is called fixed point, right?

729
00:31:46,700 --> 00:31:48,200
Oops, fixed point.

730
00:31:49,400 --> 00:31:53,000
Fixed Point math, and this was something that people did back in the

731
00:31:53,000 --> 00:31:57,400
day in order to avoid doing really expensive, floating Point math,

732
00:31:57,400 --> 00:32:00,100
when they didn't have a floating-point coprocessor, that is fixed

733
00:32:00,100 --> 00:32:00,300
Point.

734
00:32:00,300 --> 00:32:01,200
That's how that works.

735
00:32:01,300 --> 00:32:05,300
It's called fixed point because you have set an arbitrary fixed place

736
00:32:05,500 --> 00:32:08,700
where the decimal occurs in your number, that is how it works.

737
00:32:08,900 --> 00:32:12,400
You can never have more than 256.

738
00:32:14,100 --> 00:32:17,400
Levels of your fraction, no matter what the number is and you can

739
00:32:17,400 --> 00:32:21,300
never have any more than 6 B 6 million here because you only had 24

740
00:32:21,300 --> 00:32:21,700
bits.

741
00:32:21,800 --> 00:32:25,400
So, wherever you pick, you could change that decision by moving this

742
00:32:25,400 --> 00:32:28,600
around, but whatever the line is that you pick to write your math.

743
00:32:28,600 --> 00:32:33,100
At you, basically are fixing the amount of fraction versus the size of

744
00:32:33,100 --> 00:32:34,100
the number that you can have.

745
00:32:34,200 --> 00:32:35,000
Does that make sense?

746
00:32:36,000 --> 00:32:39,100
So what floating point is is floating point is a more powerful

747
00:32:39,100 --> 00:32:44,300
representation that basically allows you more flexibility at the cost

748
00:32:44,300 --> 00:32:47,700
of having the Precision of your operations vary depending on the

749
00:32:47,700 --> 00:32:48,900
values involved.

750
00:32:49,500 --> 00:32:53,400
And basically what it is is it's a different way of dividing up those

751
00:32:53,400 --> 00:32:53,900
bits.

752
00:32:54,300 --> 00:32:57,300
So, floating-point works completely differently.

753
00:32:57,700 --> 00:32:59,800
It's actually completely different.

754
00:33:00,100 --> 00:33:01,800
Conceptually then fixed Point.

755
00:33:01,800 --> 00:33:03,900
Really how it works.

756
00:33:04,200 --> 00:33:08,200
Is this divided up in a way that looks sort of like this.

757
00:33:08,500 --> 00:33:13,200
We have a thing called the mantissa which goes down here and that is

758
00:33:13,200 --> 00:33:13,600
back.

759
00:33:13,700 --> 00:33:20,500
This is basically a number that tells us only a fraction of one.

760
00:33:20,900 --> 00:33:24,200
So it's basically a number between 0 and 1.

761
00:33:24,600 --> 00:33:25,900
That is, that is how that works.

762
00:33:25,900 --> 00:33:27,900
Essentially, in here.

763
00:33:27,900 --> 00:33:29,000
It's shouldn't say.

764
00:33:29,000 --> 00:33:29,800
It's not sure how to

765
00:33:30,000 --> 00:33:30,400
Explain this.

766
00:33:30,400 --> 00:33:33,700
Well, it's not really a number between 0 and 1.

767
00:33:34,400 --> 00:33:37,000
It's basically a value here.

768
00:33:37,000 --> 00:33:39,400
Here's how you know, what, here's how say this is, this is this is

769
00:33:39,400 --> 00:33:40,900
much clearer to what it actually is.

770
00:33:41,400 --> 00:33:45,900
If you imagine a number, that's like one point something and there's a

771
00:33:45,900 --> 00:33:47,500
decimal out here, right?

772
00:33:47,600 --> 00:33:51,700
So we basically have one point, you know, two, three, five nine, four,

773
00:33:51,700 --> 00:33:54,200
seven, eight, six, whatever, right?

774
00:33:54,200 --> 00:33:56,000
Some some fraction out here.

775
00:33:56,500 --> 00:33:59,300
We're the mantissa is a bunch of bits that stores.

776
00:33:59,300 --> 00:33:59,800
This

777
00:34:00,100 --> 00:34:01,600
It's the part that stores, the fraction.

778
00:34:01,600 --> 00:34:03,100
The one is not stored.

779
00:34:03,200 --> 00:34:04,500
It's just assumed to be there.

780
00:34:04,600 --> 00:34:06,200
So it's just the fractional part.

781
00:34:06,300 --> 00:34:09,100
That's the mantissa, a fraction of this one.

782
00:34:09,100 --> 00:34:15,400
Okay, then so the mantissa is here and then we have the exponent up

783
00:34:15,400 --> 00:34:15,800
here.

784
00:34:16,400 --> 00:34:18,100
This is an exponent.

785
00:34:18,100 --> 00:34:21,100
So basically this is if, you know like an exponent, if you have

786
00:34:21,100 --> 00:34:25,100
something like x to the fourth power, that is an exponent, right?

787
00:34:25,100 --> 00:34:27,000
It's something that raises something ^.

788
00:34:27,100 --> 00:34:28,400
So, we have the exponent.

789
00:34:29,100 --> 00:34:30,600
And then we have the sign bit.

790
00:34:31,400 --> 00:34:34,100
The sign bit is either 0 or 1 depending if the thing is negative or

791
00:34:34,100 --> 00:34:35,100
positive, right?

792
00:34:35,100 --> 00:34:35,500
That's based.

793
00:34:35,500 --> 00:34:36,300
That's all that.

794
00:34:36,300 --> 00:34:36,699
That's all.

795
00:34:36,699 --> 00:34:37,199
That means.

796
00:34:37,400 --> 00:34:42,199
The exponent is a power of 2 that says how big this number is.

797
00:34:42,199 --> 00:34:45,699
So essentially, whatever this exponent is here, whatever this,

798
00:34:45,699 --> 00:34:46,699
whatever this value is.

799
00:34:46,900 --> 00:34:50,300
It's basically saying, if, you know, if this is n, it's 2 to the N,

800
00:34:50,600 --> 00:34:52,400
that's, that's what it is, right?

801
00:34:53,000 --> 00:34:56,900
And then this is the actual, this is the actual fractional value.

802
00:34:57,400 --> 00:34:58,800
What this allows you to do.

803
00:34:58,900 --> 00:35:03,900
You, is it basically allows you to separate the degree of precision

804
00:35:03,900 --> 00:35:07,700
you have, in specifying the number, which is always going to be,

805
00:35:07,700 --> 00:35:12,300
however, big, the mantissa is from the scale of the value, which is

806
00:35:12,300 --> 00:35:14,300
specified here in the exponent.

807
00:35:14,300 --> 00:35:20,600
So, this tells you the magnitude of the number expressed as a power of

808
00:35:20,600 --> 00:35:25,900
2, and this tells you the actual value of the number, which will

809
00:35:25,900 --> 00:35:28,800
become bigger or smaller depending on,

810
00:35:28,900 --> 00:35:29,700
On what this is.

811
00:35:29,800 --> 00:35:33,600
So if this is high right, if the exponent is high.

812
00:35:35,700 --> 00:35:40,500
Then basically the mantissa encodes a much lower amount of precision

813
00:35:40,500 --> 00:35:41,900
for the value, right?

814
00:35:41,900 --> 00:35:44,300
Because whatever the fraction is, however, much Precision.

815
00:35:44,300 --> 00:35:48,600
The fraction has in here, you're basically moving it up to a place in

816
00:35:48,600 --> 00:35:51,100
the number based on this end, right?

817
00:35:51,100 --> 00:35:53,500
So let's say this n is like 50 or something, right?

818
00:35:53,500 --> 00:35:56,700
That then you're taking two to the 50th, right?

819
00:35:56,700 --> 00:35:57,700
That's a very Heart.

820
00:35:57,700 --> 00:35:59,900
High number and you're multiplying this other value.

821
00:36:00,000 --> 00:36:01,000
You buy that.

822
00:36:01,100 --> 00:36:05,200
So even if it had a lot of fractional B even had a lot of even though

823
00:36:05,200 --> 00:36:07,400
that fraction is very specific.

824
00:36:07,400 --> 00:36:11,100
It's moving up into the whole number part because of this giant

825
00:36:11,100 --> 00:36:16,100
multiplication on the other hand, right if this number is negative,

826
00:36:16,200 --> 00:36:16,500
right?

827
00:36:16,500 --> 00:36:19,900
Because this this, this exponent can be negative as well.

828
00:36:19,900 --> 00:36:20,300
Right?

829
00:36:20,400 --> 00:36:23,800
If this number is negative, then you're moving it down because again

830
00:36:23,800 --> 00:36:26,000
to to like the negative n, right?

831
00:36:26,000 --> 00:36:29,200
To to a negative number is basically creating the opposite.

832
00:36:29,200 --> 00:36:29,900
It's making

833
00:36:30,000 --> 00:36:34,500
Optional values it's making its dividing out because that's the way

834
00:36:34,500 --> 00:36:35,200
exponents work.

835
00:36:35,200 --> 00:36:36,000
And this is just a suit.

836
00:36:36,000 --> 00:36:37,700
I'm assuming you basically no exponents here.

837
00:36:38,000 --> 00:36:41,300
So what you're doing with that exponent is your sort of sliding this

838
00:36:41,300 --> 00:36:43,100
decimal point around.

839
00:36:43,200 --> 00:36:47,100
So what ends up happening with the floating Point representation is

840
00:36:47,100 --> 00:36:51,100
you basically have a situation where you've got one point, you know,

841
00:36:51,100 --> 00:36:57,300
2359 847, whatever you've got some fractional value here and you're

842
00:36:57,300 --> 00:36:59,400
taking the point with that exponent.

843
00:36:59,400 --> 00:36:59,800
This is this

844
00:37:00,000 --> 00:37:01,500
Specified in the mantissa, right?

845
00:37:01,500 --> 00:37:04,600
So this is just, this is just represented in the mantissa.

846
00:37:04,900 --> 00:37:09,100
You're taking this point, and you're sliding it by that exponent.

847
00:37:09,300 --> 00:37:11,400
However, many places the exponent is.

848
00:37:11,400 --> 00:37:14,800
So if the exponent is negative, right, you're sliding it this way,

849
00:37:14,800 --> 00:37:16,500
you're making it more of a fraction.

850
00:37:16,500 --> 00:37:20,100
You're making it point zero zero zero zero zero, zero one or

851
00:37:20,100 --> 00:37:21,300
something, right?

852
00:37:21,400 --> 00:37:22,500
If the exponent is negative.

853
00:37:22,500 --> 00:37:25,600
This is a negative exponent, and if the exponent is positive, you're

854
00:37:25,600 --> 00:37:27,100
sliding it this way, right?

855
00:37:27,100 --> 00:37:28,300
So you're making it bigger.

856
00:37:28,300 --> 00:37:29,800
You're making it 1 million.

857
00:37:29,900 --> 00:37:31,700
In something, blah, blah, blah, right, or whatever.

858
00:37:32,200 --> 00:37:35,500
And that's why it's called floating point is because the decimal point

859
00:37:35,500 --> 00:37:36,900
is essentially, floats.

860
00:37:37,100 --> 00:37:38,600
It's no longer fixed.

861
00:37:38,700 --> 00:37:40,100
It's not fixed Point anymore.

862
00:37:40,200 --> 00:37:41,200
It's floating point.

863
00:37:41,300 --> 00:37:44,100
And what that means is when you do math with floating Point, you're

864
00:37:44,100 --> 00:37:48,400
basically always guaranteed the same amount of relative Precision.

865
00:37:48,600 --> 00:37:52,900
No matter what your values are, right, you're always essentially

866
00:37:52,900 --> 00:37:55,600
getting the same amount of significant figures.

867
00:37:55,600 --> 00:37:59,800
If you will write, if you ever saw that term, you're sort of getting

868
00:38:00,000 --> 00:38:03,000
That sort of equivalent of scientific significant figures in some

869
00:38:03,000 --> 00:38:06,500
sense where you're saying, however, many bits of mantissa, the

870
00:38:06,500 --> 00:38:07,400
floating Point format.

871
00:38:07,400 --> 00:38:08,900
You're using happens to have.

872
00:38:08,900 --> 00:38:11,400
And again, you can see there's, there's 32 bit floating point 64 bit

873
00:38:11,400 --> 00:38:11,800
floating point.

874
00:38:11,800 --> 00:38:15,000
So the size, the Precision varies, depending on how big, the total

875
00:38:15,000 --> 00:38:19,400
thing was, basically you're getting a certain amount of significant

876
00:38:19,400 --> 00:38:21,000
figures, which depends.

877
00:38:21,000 --> 00:38:24,300
Let me test a size, a certain degree of scale, possibilities,

878
00:38:24,300 --> 00:38:26,800
depending on how many bits are in the exponent, right?

879
00:38:26,900 --> 00:38:29,800
And then you can do math at any, any scale allows.

880
00:38:29,900 --> 00:38:33,000
Allowed by that exponent will have the same number of relatives and if

881
00:38:33,000 --> 00:38:33,600
configures.

882
00:38:33,700 --> 00:38:37,800
So, if it's a very high number, right, let's say, you know, it's some,

883
00:38:37,900 --> 00:38:42,600
again, we have to 3598, 47, whatever, and this is some really big

884
00:38:42,600 --> 00:38:43,500
number, right?

885
00:38:43,500 --> 00:38:44,200
It's some number.

886
00:38:44,200 --> 00:38:44,800
That's huge.

887
00:38:44,800 --> 00:38:45,400
Like this.

888
00:38:46,000 --> 00:38:49,900
We're still getting the same number of significant figures essentially

889
00:38:50,000 --> 00:38:54,000
right here, as we would, if we encoded that in a in a different way.

890
00:38:54,000 --> 00:38:55,600
That was very very small, right?

891
00:38:55,600 --> 00:38:58,800
If we use the different exponent for it, right?

892
00:38:58,900 --> 00:38:59,800
Here's the same.

893
00:39:00,000 --> 00:39:00,500
Number.

894
00:39:00,500 --> 00:39:02,200
But we slid it down quite a bit.

895
00:39:02,200 --> 00:39:02,700
Right?

896
00:39:02,700 --> 00:39:05,700
We have the exact same number of significant figures, no matter what

897
00:39:05,700 --> 00:39:06,600
the scale is.

898
00:39:06,600 --> 00:39:08,400
We're never getting any more than that.

899
00:39:08,400 --> 00:39:10,200
We don't, once we get up to the scale.

900
00:39:10,200 --> 00:39:11,400
We can't even encode.

901
00:39:11,400 --> 00:39:12,300
What the values are that?

902
00:39:12,300 --> 00:39:13,200
Go all the way, the decimal point.

903
00:39:13,200 --> 00:39:15,900
There might be tons of zeros here and we have no idea what they should

904
00:39:15,900 --> 00:39:18,300
have been because we can encode that and same as here.

905
00:39:18,300 --> 00:39:20,500
We can't know what any of these things are because we've pushed it

906
00:39:20,500 --> 00:39:23,100
down too far, but that's basically how that works.

907
00:39:23,100 --> 00:39:24,900
Right now again, I'm drawing this.

908
00:39:24,900 --> 00:39:25,700
All in decimal.

909
00:39:25,900 --> 00:39:29,400
I'm writing .000 as if they're decimals and then these are all decimal

910
00:39:29,400 --> 00:39:29,800
numbers.

911
00:39:30,000 --> 00:39:32,700
Right, and that's not really the case because this is all binary.

912
00:39:32,800 --> 00:39:37,800
So really these would be things like point 0, 0, 1 0 1 0 0, 1 0 1, you

913
00:39:37,800 --> 00:39:40,100
know that sort of stuff but you get the idea.

914
00:39:40,100 --> 00:39:41,200
It works exactly the same.

915
00:39:41,200 --> 00:39:45,900
You're still moving a decimal point around that has to do with that.

916
00:39:46,500 --> 00:39:49,200
So hopefully that makes some sense.

917
00:39:52,400 --> 00:39:53,200
Oh, I'm sorry.

918
00:39:53,300 --> 00:39:54,200
I just checked the stream.

919
00:39:54,200 --> 00:39:56,400
I'm I guess I'm talking too loudly today.

920
00:39:56,500 --> 00:39:58,800
I should I should quiet myself down perhaps.

921
00:39:58,900 --> 00:39:59,100
Maybe.

922
00:39:59,100 --> 00:40:00,800
I'm getting a little to cough it up.

923
00:40:00,800 --> 00:40:02,500
Getting a little too caffeine and I'm clipping.

924
00:40:03,000 --> 00:40:03,800
Sorry about that.

925
00:40:03,800 --> 00:40:05,000
I'll try to calm down.

926
00:40:05,400 --> 00:40:06,900
Make it much calmer tone.

927
00:40:07,200 --> 00:40:07,700
Okay.

928
00:40:08,200 --> 00:40:13,400
So basically that that is basically the the way that floating-point

929
00:40:13,400 --> 00:40:17,300
works and we'll talk about this a little bit more as we go.

930
00:40:17,300 --> 00:40:19,700
So I can kind of explain what's going on with the floating Point

931
00:40:19,700 --> 00:40:21,300
numbers, and why you have

932
00:40:21,500 --> 00:40:24,800
Understand some of these things because obviously this is all kind of

933
00:40:24,800 --> 00:40:25,200
minutiae.

934
00:40:25,200 --> 00:40:27,100
The processor is doing it for you now.

935
00:40:27,300 --> 00:40:30,900
So basically, what we are able to do with modern processors, that we

936
00:40:30,900 --> 00:40:34,000
couldn't do say on the Amiga, which didn't have an FPU.

937
00:40:34,100 --> 00:40:36,200
They actually later added one in the 60, 80 30.

938
00:40:36,200 --> 00:40:39,900
So if you bought like an Amiga 3000, which was a later version of the

939
00:40:39,900 --> 00:40:43,000
Amigas, they had FB use that could do some floating Point math.

940
00:40:46,600 --> 00:40:47,500
Nowadays.

941
00:40:48,700 --> 00:40:50,200
Everything does floating Point math.

942
00:40:50,400 --> 00:40:52,100
Your graphics card does floating Point math.

943
00:40:52,100 --> 00:40:53,700
Your CPU can do floating Point math.

944
00:40:53,700 --> 00:40:57,200
And in fact, most of the Computing horsepower in your computer is

945
00:40:57,200 --> 00:41:00,300
often dedicated to doing floating Point math, because floating Point.

946
00:41:00,300 --> 00:41:02,700
Math is where most calculations happen.

947
00:41:02,700 --> 00:41:03,100
Now.

948
00:41:03,600 --> 00:41:06,600
Certainly all 3D Graphics runs through floating Point math.

949
00:41:07,100 --> 00:41:09,400
Almost every stage of the pipeline is very heavily.

950
00:41:09,400 --> 00:41:10,000
Floating-point.

951
00:41:10,000 --> 00:41:13,000
Now certainly all scientific Computing.

952
00:41:13,000 --> 00:41:14,700
Almost always uses floating Point math.

953
00:41:14,700 --> 00:41:17,400
Although, there are certain cases where integer math gets used and so

954
00:41:17,400 --> 00:41:17,600
on.

955
00:41:18,100 --> 00:41:18,400
So,

956
00:41:18,500 --> 00:41:22,100
Any point, map is one of the most important features of a CPU now,

957
00:41:22,100 --> 00:41:23,800
even though they couldn't do them the old days.

958
00:41:23,800 --> 00:41:26,600
They now have tons of horsepower for horsepower for it.

959
00:41:28,300 --> 00:41:31,900
So again, even though we're taking a very handmade approach to this

960
00:41:31,900 --> 00:41:37,100
fixed Point even in that case is a very bad idea because really what

961
00:41:37,100 --> 00:41:37,800
you want to be doing.

962
00:41:37,800 --> 00:41:41,600
Now, if you're trying to be efficient and trying to be down to the to

963
00:41:41,600 --> 00:41:44,300
the CPU level is you want to be using floating point because that is

964
00:41:44,300 --> 00:41:47,700
where the horsepower exist at almost every level of computing.

965
00:41:47,700 --> 00:41:48,300
Now, is that

966
00:41:48,400 --> 00:41:49,200
Floating point.

967
00:41:50,400 --> 00:41:54,000
We may we're going to encounter some some problems on the Raspberry

968
00:41:54,000 --> 00:41:54,400
Pi.

969
00:41:54,400 --> 00:41:57,500
I think because I know there's some Delicacies with floating point

970
00:41:57,500 --> 00:41:57,700
there.

971
00:41:57,700 --> 00:41:59,800
So that'll be a bit of a battle.

972
00:42:00,000 --> 00:42:03,500
Certainly, but for the most part in, any modern thing that you would

973
00:42:03,500 --> 00:42:06,900
ship a game on, there is a ton of floating-point horsepower.

974
00:42:06,900 --> 00:42:11,600
Even mobile devices, have a ton of floating-point, floating-point

975
00:42:11,600 --> 00:42:12,100
horsepower.

976
00:42:16,200 --> 00:42:16,800
All right.

977
00:42:18,900 --> 00:42:24,200
We're gonna going to end that their clothes are mspaint session and we

978
00:42:24,200 --> 00:42:27,000
are going to go back to creating our sine wave.

979
00:42:27,000 --> 00:42:28,900
Now, a sine wave is obviously very simple.

980
00:42:28,900 --> 00:42:32,700
I showed you what it looked like, all we need to do to get our sine

981
00:42:32,700 --> 00:42:38,100
value is, we just have to call sign and we have to call it with where

982
00:42:38,100 --> 00:42:41,100
we were in in the period of the sine function.

983
00:42:41,100 --> 00:42:43,500
Basically another's two versions of sign.

984
00:42:43,700 --> 00:42:45,000
I can show you what they are.

985
00:42:45,300 --> 00:42:48,400
There's sign and I sign f.

986
00:42:48,800 --> 00:42:50,800
Hoping if I do sign FL come up with both of them.

987
00:42:50,900 --> 00:42:51,500
Yeah, here we go.

988
00:42:51,500 --> 00:42:53,400
Here's in the msdn documentation.

989
00:42:53,700 --> 00:42:54,700
So you can see here.

990
00:42:54,700 --> 00:42:56,400
Here's the sine functions, right?

991
00:42:56,600 --> 00:43:00,300
There's basically a sign F, which takes a float and returns a float.

992
00:43:00,300 --> 00:43:01,000
Those are 32.

993
00:43:01,000 --> 00:43:02,300
That's a 32-bit sign.

994
00:43:02,600 --> 00:43:05,800
And then there's a double sign which is a 64-bit version of the same

995
00:43:05,800 --> 00:43:06,100
thing.

996
00:43:06,100 --> 00:43:07,300
There's 64 bit floating point.

997
00:43:07,300 --> 00:43:11,100
When you want more precision, and there's a 32-bit when you don't need

998
00:43:11,100 --> 00:43:14,900
as much, we will probably never really use 64-bit Precision for most

999
00:43:14,900 --> 00:43:17,700
stuff in the game, but it's worth noting that it's there.

1000
00:43:17,700 --> 00:43:18,600
It's slower.

1001
00:43:18,700 --> 00:43:20,400
Always pretty much there.

1002
00:43:20,400 --> 00:43:23,300
It's very rare that you can do 64.

1003
00:43:23,300 --> 00:43:26,500
Bit floating Point math, as fast as you can do, 32 bit floating Point

1004
00:43:26,500 --> 00:43:27,000
math.

1005
00:43:27,100 --> 00:43:32,600
Usually, that's true these days because basically of Cindy, we won't

1006
00:43:32,600 --> 00:43:33,400
get into that too much.

1007
00:43:33,400 --> 00:43:36,100
But basically, you can you tend to be able to do twice, as many

1008
00:43:36,100 --> 00:43:39,100
floating Point operations, as you can double operations, because of

1009
00:43:39,100 --> 00:43:42,700
the way the processors work nowadays, so, it's usually best not to go

1010
00:43:42,700 --> 00:43:43,200
double.

1011
00:43:43,300 --> 00:43:45,500
Unless you really know, you need that extra precision.

1012
00:43:45,700 --> 00:43:48,100
And in this case, we definitely don't and foremost, the game, we

1013
00:43:48,100 --> 00:43:48,600
aren't.

1014
00:43:48,800 --> 00:43:49,300
Going to need it.

1015
00:43:49,300 --> 00:43:51,300
So you probably want to stay away from that.

1016
00:43:51,300 --> 00:43:55,300
So we're going to call sign F, and we basically need to know where we

1017
00:43:55,300 --> 00:43:55,800
are.

1018
00:43:56,000 --> 00:43:57,600
We basically are in some position.

1019
00:43:58,800 --> 00:44:01,900
In the sine wave which typically in math is called T.

1020
00:44:01,900 --> 00:44:05,600
Usually T is the you know the value that's kind of the running time

1021
00:44:05,600 --> 00:44:06,700
value for your sign.

1022
00:44:06,900 --> 00:44:08,900
So we need to compute whatever that is.

1023
00:44:08,900 --> 00:44:11,600
But once we get our sine value back, remember our sine value is going

1024
00:44:11,600 --> 00:44:15,900
to be a number between 0 and negative 1 and 1, but we actually want a

1025
00:44:15,900 --> 00:44:19,100
value, that goes between tone volume and negative tone volume.

1026
00:44:19,300 --> 00:44:23,400
So, what we need to do is we basically need to cast to an inch 16, but

1027
00:44:23,400 --> 00:44:28,400
we first need to take our sine value and we need to multiply

1028
00:44:28,500 --> 00:44:33,300
Apply it by the volume so that it will take it from us negative one to

1029
00:44:33,300 --> 00:44:35,200
one version of our sine value.

1030
00:44:35,300 --> 00:44:36,500
And why is it doing that?

1031
00:44:36,500 --> 00:44:37,000
Why are you?

1032
00:44:37,200 --> 00:44:40,600
Why are my keyboard is overzealous today?

1033
00:44:40,800 --> 00:44:42,500
I don't know why that's very interesting.

1034
00:44:43,500 --> 00:44:45,300
Is that there we go a little bit better.

1035
00:44:45,800 --> 00:44:46,200
Okay.

1036
00:44:46,300 --> 00:44:49,500
So basically what we're trying to do is basically just scale R sine

1037
00:44:49,500 --> 00:44:54,000
wave from negative 1 to 1 up to the the tone volume so that it can be

1038
00:44:54,000 --> 00:44:56,200
mapped into the 16-bit space properly.

1039
00:44:56,300 --> 00:44:56,900
That makes sense.

1040
00:45:00,200 --> 00:45:00,600
Okay.

1041
00:45:01,700 --> 00:45:06,700
So basically what we want to do here is we want to say okay we're

1042
00:45:06,700 --> 00:45:07,400
going to do that.

1043
00:45:07,400 --> 00:45:10,100
We're going to let that go ahead and put that back into our sample

1044
00:45:10,100 --> 00:45:10,500
value.

1045
00:45:10,500 --> 00:45:11,800
We don't care about rounding at this point.

1046
00:45:11,800 --> 00:45:12,700
So we're going to ignore.

1047
00:45:12,700 --> 00:45:14,400
We're going to talk about that at the moment.

1048
00:45:14,700 --> 00:45:17,700
And basically we don't need this anymore, which is R square wave

1049
00:45:17,700 --> 00:45:20,100
generator and we'll go ahead and copy this down here.

1050
00:45:20,100 --> 00:45:20,600
After we're done.

1051
00:45:20,600 --> 00:45:22,800
We need to collapse these two Loops eventually Hazard to do.

1052
00:45:22,900 --> 00:45:23,900
That's our to do says.

1053
00:45:24,300 --> 00:45:25,800
So basically in our T.

1054
00:45:26,000 --> 00:45:29,700
We know that we already have running sample index, which

1055
00:45:30,000 --> 00:45:31,300
Keeps going up and up and up.

1056
00:45:31,300 --> 00:45:33,100
So that is essentially our T value.

1057
00:45:33,200 --> 00:45:37,700
But if we were to use that as the T value, the period of sine, right?

1058
00:45:38,000 --> 00:45:41,900
I believe is pie, right?

1059
00:45:42,100 --> 00:45:43,600
Let's let's let's take a look here.

1060
00:45:43,600 --> 00:45:48,900
So sign if you take a look at the actual scale of this thing, you can

1061
00:45:48,900 --> 00:45:53,200
see that the the, the period will the half period is pi, right?

1062
00:45:53,200 --> 00:45:57,200
So one cycle is pie, and two cycles is 2 pi.

1063
00:45:57,300 --> 00:45:58,900
So are half period.

1064
00:45:59,000 --> 00:45:59,900
I guess we don't have to

1065
00:46:00,000 --> 00:46:02,400
More about a half period, we can literally just go with our period.

1066
00:46:02,400 --> 00:46:06,000
Now since our period is going to be 2 pi, right?

1067
00:46:06,100 --> 00:46:12,100
Basically, what we want to do is say as this thing goes up to whatever

1068
00:46:12,100 --> 00:46:16,800
the whatever the actual period was going to be, which we computed

1069
00:46:16,800 --> 00:46:17,000
right.

1070
00:46:17,000 --> 00:46:18,900
Here's our wave period, whatever.

1071
00:46:18,900 --> 00:46:21,300
Our and we don't actually need this value anymore.

1072
00:46:21,300 --> 00:46:23,500
The halfway period just doesn't need to be used.

1073
00:46:23,800 --> 00:46:29,200
So whatever our wave period is basically we have to say the

1074
00:46:30,700 --> 00:46:33,100
The running sample index /.

1075
00:46:33,100 --> 00:46:34,400
The wave, period.

1076
00:46:34,400 --> 00:46:34,700
Right.

1077
00:46:34,700 --> 00:46:40,800
Gives going to map that into a number from 0 to 1, you know, as we go

1078
00:46:40,800 --> 00:46:41,800
through the wave, it'll be zero.

1079
00:46:41,800 --> 00:46:44,300
One, two, three, four, just like we did before the divide that tells

1080
00:46:44,300 --> 00:46:45,900
us where we are in the period.

1081
00:46:45,900 --> 00:46:49,300
But what we want to do here is we want to actually convert these two

1082
00:46:49,300 --> 00:46:52,900
floating Point first, so that now, we actually have smooth values that

1083
00:46:52,900 --> 00:46:57,700
run from 0 to 1 fractional as we go through, I may have to diagram.

1084
00:46:57,700 --> 00:46:58,300
It's out for you.

1085
00:46:58,300 --> 00:46:59,700
I realize this is a little complicated and we

1086
00:47:00,000 --> 00:47:01,800
Done stuff like this before.

1087
00:47:01,900 --> 00:47:04,500
So I'm going to actually, I'm going to do it to do.

1088
00:47:04,900 --> 00:47:08,500
Draw this out for people, so they can see it.

1089
00:47:08,600 --> 00:47:10,300
And then we need to multiply by the period.

1090
00:47:10,300 --> 00:47:13,600
We actually wanted, which was to pie.

1091
00:47:13,700 --> 00:47:13,900
Now.

1092
00:47:13,900 --> 00:47:16,700
We don't actually have a value for pi yet.

1093
00:47:16,800 --> 00:47:21,300
So the other thing we need to do is actually do a pound defined for

1094
00:47:21,300 --> 00:47:21,800
pie.

1095
00:47:21,900 --> 00:47:26,600
So here is our pi32 that's going to be some real 32 value.

1096
00:47:27,000 --> 00:47:29,800
And basically, what we need to do is get the digits of pi.

1097
00:47:29,900 --> 00:47:32,000
By and put them in there.

1098
00:47:32,200 --> 00:47:32,300
Now.

1099
00:47:32,300 --> 00:47:35,200
I don't know exactly how many digits we need for a floating-point pie.

1100
00:47:35,400 --> 00:47:37,500
I'm going to go ahead and see if that's enough.

1101
00:47:38,700 --> 00:47:39,500
Let's see here.

1102
00:47:40,300 --> 00:47:41,500
Why do I always reverse?

1103
00:47:41,500 --> 00:47:45,300
The order of things doesn't matter, compiler is catch to it.

1104
00:47:45,300 --> 00:47:46,000
So it's good.

1105
00:47:46,000 --> 00:47:48,500
So basically, what we're doing here is we're just transforming the

1106
00:47:48,500 --> 00:47:51,600
period of running sample index into the period of sine.

1107
00:47:51,700 --> 00:47:52,700
We're calling sign.

1108
00:47:52,800 --> 00:47:55,900
We're multiplying it by the tone volume, and that's our sample value.

1109
00:47:56,100 --> 00:47:57,800
Print should be pretty straightforward.

1110
00:47:57,900 --> 00:47:59,800
I don't think they'll be too much confusion.

1111
00:48:00,000 --> 00:48:02,400
Using there, but again, finicky code.

1112
00:48:02,400 --> 00:48:04,800
I make a lot of stupid errors when I write code like this, even when

1113
00:48:04,800 --> 00:48:06,000
I'm not streaming.

1114
00:48:06,500 --> 00:48:09,300
So we may have to do a little bit of debugging here.

1115
00:48:09,400 --> 00:48:10,500
Everyone brace, your ears.

1116
00:48:10,500 --> 00:48:13,500
It is time to listen to our sound, which could be totally messed up.

1117
00:48:13,700 --> 00:48:15,700
Let's see what it sounds like.

1118
00:48:16,400 --> 00:48:17,700
Why am I not hearing anything?

1119
00:48:17,900 --> 00:48:18,600
What did I do?

1120
00:48:19,100 --> 00:48:19,700
Did I do something?

1121
00:48:19,800 --> 00:48:20,800
Oh, yes.

1122
00:48:21,200 --> 00:48:23,900
We forgot to actually increment R value.

1123
00:48:24,200 --> 00:48:26,300
I should just leave that down there as we play with this.

1124
00:48:27,000 --> 00:48:27,700
There we go.

1125
00:48:30,200 --> 00:48:30,800
There we go.

1126
00:48:31,400 --> 00:48:35,200
So I can hear immediately A scratchiness in that, right?

1127
00:48:35,500 --> 00:48:38,800
And that is, I mean, obviously we could have messed up our sine value,

1128
00:48:38,800 --> 00:48:39,500
certainly.

1129
00:48:39,800 --> 00:48:45,100
But assuming that, that is actually, assuming that that scratchiness

1130
00:48:45,100 --> 00:48:49,400
is actually in there without the fact that we've messed up the sine

1131
00:48:49,400 --> 00:48:52,900
value that is sort of revealing, the fact that there is clearly a bug

1132
00:48:53,100 --> 00:48:55,600
in our wave output, which is what I wanted to do because that's pretty

1133
00:48:55,600 --> 00:48:56,400
sure there was.

1134
00:48:56,900 --> 00:48:59,700
But you know, I wanted to actually make sure that we knew that.

1135
00:49:00,200 --> 00:49:03,700
So now we can actually go about starting to bug.

1136
00:49:03,700 --> 00:49:07,000
That's the first thing to do, is to verify that our sine wave makes

1137
00:49:07,000 --> 00:49:07,500
some sense.

1138
00:49:12,300 --> 00:49:12,800
Okay.

1139
00:49:13,900 --> 00:49:18,300
So one thing we could actually do if we wanted, to is actually draw

1140
00:49:18,300 --> 00:49:22,200
the sine wave out on the screen, which is probably what I would do in

1141
00:49:22,200 --> 00:49:23,400
a normal circumstance.

1142
00:49:23,500 --> 00:49:25,800
And I'm not sure if I want to do it now and because we'll have to sort

1143
00:49:25,800 --> 00:49:28,500
of explain a bunch of drawing things to get there.

1144
00:49:28,900 --> 00:49:31,700
But the other thing that we can do is we can kind of look at this

1145
00:49:31,700 --> 00:49:35,500
code, inspection wise, first of all, just step through it once.

1146
00:49:35,800 --> 00:49:37,700
Make sure that we understand what's going on.

1147
00:49:37,800 --> 00:49:40,000
The other thing we can do is not fill the buffer.

1148
00:49:40,400 --> 00:49:43,400
So basically, we know we had a one second buffer.

1149
00:49:43,700 --> 00:49:47,100
So the very first thing I'm going to do is just never fill it again.

1150
00:49:47,600 --> 00:49:50,800
So basically what I'm going to do here is this sound is playing this

1151
00:49:50,800 --> 00:49:53,800
thing that says if not sound is playing that sound is playing.

1152
00:49:53,800 --> 00:49:57,800
I'm just going to use that as a latch to only update the buffer once.

1153
00:49:58,100 --> 00:50:00,600
So basically what we do is here is say instead of calling get

1154
00:50:00,600 --> 00:50:01,000
competition.

1155
00:50:01,000 --> 00:50:06,100
I'm going to say if the sound is not playing and you are able to get

1156
00:50:06,100 --> 00:50:10,300
that cursor position, then go ahead and fill that buffer, right?

1157
00:50:10,300 --> 00:50:11,700
So basically I'm going to do this.

1158
00:50:13,100 --> 00:50:14,100
So what you can hear?

1159
00:50:14,100 --> 00:50:15,100
Now, please.

1160
00:50:15,100 --> 00:50:16,200
I hope you can hear this.

1161
00:50:16,800 --> 00:50:17,900
If you can hear it.

1162
00:50:18,000 --> 00:50:22,100
We hear only one skip to hear that.

1163
00:50:23,300 --> 00:50:25,300
Solid tone and Skip and how far is it?

1164
00:50:25,300 --> 00:50:25,800
Apart?

1165
00:50:25,800 --> 00:50:32,800
1, s 1 2 3 4 5 here that, right.

1166
00:50:33,500 --> 00:50:37,200
So when you hear that, what we now know what that has determined

1167
00:50:37,300 --> 00:50:38,000
right?

1168
00:50:38,000 --> 00:50:43,500
Is that we have a bug in how we fill the buffers, where the sign lines

1169
00:50:43,500 --> 00:50:45,500
up when we fill those buffers, right?

1170
00:50:45,500 --> 00:50:49,600
We know that our sine wave is actually outputting correctly because

1171
00:50:49,600 --> 00:50:51,800
our sine wave when we listen to it.

1172
00:50:52,500 --> 00:50:56,100
When we when we listen to the sine wave just filling the buffer.

1173
00:50:56,100 --> 00:50:59,300
Once it sounds like a pure tone, correct, and the only time it has a

1174
00:50:59,300 --> 00:50:59,800
skip

1175
00:51:00,000 --> 00:51:04,600
Is at the end of that one second buffer, which is where it Should

1176
00:51:04,600 --> 00:51:04,800
Skip.

1177
00:51:04,800 --> 00:51:07,800
Because the, we didn't do anything to make sure that the sine wave

1178
00:51:07,900 --> 00:51:10,300
wraps properly from the end of the buffer to the beginning.

1179
00:51:10,300 --> 00:51:11,500
So, there's a hard Gap there.

1180
00:51:11,500 --> 00:51:12,000
Right?

1181
00:51:12,500 --> 00:51:15,900
So, basically, we've now determined rather definitively that, at least

1182
00:51:15,900 --> 00:51:19,500
our sign out, put this code right here is working properly.

1183
00:51:19,500 --> 00:51:22,700
What's not working properly is either the way that these two things

1184
00:51:22,700 --> 00:51:25,200
are Gap together because remember, we're only testing one path.

1185
00:51:25,200 --> 00:51:28,500
In fact, we can sort of see that here when we come through and do this

1186
00:51:28,500 --> 00:51:29,800
the first time, right?

1187
00:51:30,000 --> 00:51:30,400
Right?

1188
00:51:30,800 --> 00:51:34,700
When we get this back, our region R2 region sizes.

1189
00:51:34,700 --> 00:51:36,400
Let's take a look at those here region.

1190
00:51:36,400 --> 00:51:39,100
One size region to size.

1191
00:51:39,300 --> 00:51:42,000
You can see that because we're locking the whole buffer that first

1192
00:51:42,000 --> 00:51:44,300
time through, because it's not playing yet, and we're just filling the

1193
00:51:44,300 --> 00:51:45,100
whole thing up.

1194
00:51:45,500 --> 00:51:48,900
You can see that we only do one region feel so we're only doing this

1195
00:51:48,900 --> 00:51:49,300
Phil.

1196
00:51:49,600 --> 00:51:52,200
So we could have a bug here as well.

1197
00:51:52,500 --> 00:51:53,700
That's entirely on the table.

1198
00:51:53,700 --> 00:51:55,300
We have not real that out.

1199
00:51:55,500 --> 00:51:59,200
But we know that we either have a bug there, or we have a bug in how

1200
00:51:59,200 --> 00:51:59,800
this stuff is.

1201
00:52:00,000 --> 00:52:04,200
Dating because we're basically saying when we start to actually fill

1202
00:52:04,200 --> 00:52:08,300
the buffer up incrementally afterwards, we're introducing a lot of

1203
00:52:08,300 --> 00:52:08,800
Skips.

1204
00:52:09,000 --> 00:52:10,500
That should not be there.

1205
00:52:10,600 --> 00:52:11,100
Right?

1206
00:52:11,100 --> 00:52:11,900
Does that make sense?

1207
00:52:12,100 --> 00:52:14,900
And so there's a bunch of things that could be wrong about that one.

1208
00:52:15,100 --> 00:52:19,000
Is that we could be doing this, Phil wrong one, is that we could be

1209
00:52:19,700 --> 00:52:22,900
incrementing, our sample index that wrong so that we're thinking we

1210
00:52:22,900 --> 00:52:26,300
should be when the place that we're actually writing into is not the

1211
00:52:26,300 --> 00:52:27,700
place that we should actually be.

1212
00:52:27,700 --> 00:52:29,200
According to where we are on the sine wave.

1213
00:52:29,200 --> 00:52:29,800
There's a lot of things.

1214
00:52:29,900 --> 00:52:31,300
Things we could be doing wrong.

1215
00:52:31,500 --> 00:52:34,100
And so now we have to kind of go figure out what those are.

1216
00:52:37,700 --> 00:52:38,300
Okay.

1217
00:52:40,500 --> 00:52:46,600
So, first thing we want to check is just let's go through the code and

1218
00:52:46,600 --> 00:52:49,800
just verify that we actually think we know what's going on here.

1219
00:52:50,000 --> 00:52:54,800
We know we have basically a buffer that's going to be 48,000 samples

1220
00:52:54,800 --> 00:53:00,000
long, which is going to be 48 thousand times for because in terms of

1221
00:53:00,000 --> 00:53:00,800
bytes, right?

1222
00:53:00,800 --> 00:53:02,500
That's the that's the bytes per sample.

1223
00:53:02,800 --> 00:53:06,800
So when we init.d sound were expecting to pass 48,000 here and

1224
00:53:06,800 --> 00:53:08,600
Forty-Eight thousand times for here.

1225
00:53:09,000 --> 00:53:10,200
So, let's go ahead and just

1226
00:53:10,300 --> 00:53:13,900
Ben and will kind of walk through the code will sort of analyze it

1227
00:53:13,900 --> 00:53:17,100
line by line to make sure that we understand what's going on.

1228
00:53:17,500 --> 00:53:19,100
Have to actually start it running again.

1229
00:53:19,200 --> 00:53:19,800
There we go.

1230
00:53:20,300 --> 00:53:22,700
So when we pass it in here, let's take a look.

1231
00:53:22,800 --> 00:53:24,100
That should be 48,000.

1232
00:53:24,100 --> 00:53:26,000
I'm going to switch out a hexadecimal display here.

1233
00:53:26,500 --> 00:53:29,000
Samples per second, should be 48,000.

1234
00:53:29,000 --> 00:53:31,900
It is secondary, buffer size should be four times that that looks

1235
00:53:31,900 --> 00:53:34,300
about right for X 48,000.

1236
00:53:34,300 --> 00:53:34,700
Yep.

1237
00:53:34,700 --> 00:53:35,700
That looks right.

1238
00:53:35,700 --> 00:53:36,700
That's what we expect.

1239
00:53:36,700 --> 00:53:39,500
So, our buffer is one second long, and it's playing at 48.

1240
00:53:40,200 --> 00:53:41,600
Which is what we wanted.

1241
00:53:41,700 --> 00:53:42,700
We come in here.

1242
00:53:42,800 --> 00:53:46,500
We process our messages and then we're going to go here to fill our

1243
00:53:46,500 --> 00:53:46,800
buffer.

1244
00:53:46,800 --> 00:53:47,800
The sound is not playing.

1245
00:53:47,800 --> 00:53:50,800
Yet we go in here to fill the buffer are running.

1246
00:53:50,800 --> 00:53:55,700
Sample index should be 0 and it is our bites per sample should be for.

1247
00:53:56,000 --> 00:53:56,600
Now.

1248
00:53:56,600 --> 00:53:59,800
Why is this not parenthetical though?

1249
00:54:00,300 --> 00:54:03,300
That bothers me a little bit because that should be, that should be a

1250
00:54:03,300 --> 00:54:05,100
parenthesis right there.

1251
00:54:06,300 --> 00:54:10,000
And that's, that is not, that is not how I would normally write that

1252
00:54:10,000 --> 00:54:10,300
code.

1253
00:54:10,300 --> 00:54:13,700
So II messed that up because the operator precedence, to be honest

1254
00:54:13,700 --> 00:54:13,900
with you.

1255
00:54:13,900 --> 00:54:15,300
I don't even remember what the operator.

1256
00:54:15,300 --> 00:54:16,800
Precedence is between these two operators.

1257
00:54:16,800 --> 00:54:19,500
I would never leave that be.

1258
00:54:19,500 --> 00:54:22,300
So let's double-check our operator precedence there since it came up.

1259
00:54:22,400 --> 00:54:24,100
Operator precedence.

1260
00:54:24,400 --> 00:54:25,100
See

1261
00:54:26,500 --> 00:54:28,100
And let's see if it's got it here.

1262
00:54:28,700 --> 00:54:29,700
Where is the mod?

1263
00:54:29,700 --> 00:54:30,900
Operator people?

1264
00:54:31,000 --> 00:54:31,800
Where is it?

1265
00:54:31,800 --> 00:54:32,600
It's right there.

1266
00:54:32,900 --> 00:54:34,100
So these are left to right.

1267
00:54:34,100 --> 00:54:37,900
So in theory, that's not a bug but it's so it would have been

1268
00:54:37,900 --> 00:54:40,300
operating properly but I don't like that at all.

1269
00:54:40,300 --> 00:54:42,200
I don't like to leave things like that to chance.

1270
00:54:42,200 --> 00:54:45,600
I don't like to be the kind of person who just memorizes the operator

1271
00:54:45,600 --> 00:54:48,200
precedence, and always embeds that in the code.

1272
00:54:48,200 --> 00:54:52,000
I think it's a lot easier for other people, as well as yourself to

1273
00:54:52,000 --> 00:54:52,400
read code.

1274
00:54:52,400 --> 00:54:53,400
That looks like that.

1275
00:54:53,400 --> 00:54:56,100
So, you know, unequivocally that's what they meant, and there's

1276
00:54:56,300 --> 00:54:59,100
Problem that don't worry about the five-minute warning today people

1277
00:54:59,100 --> 00:55:02,100
because like I said, this is going to be am kind of Meandering stream

1278
00:55:02,100 --> 00:55:02,900
on a holiday.

1279
00:55:03,200 --> 00:55:05,000
So we're going to go ahead and blow straight through that.

1280
00:55:05,000 --> 00:55:06,400
There will be a Q&A.

1281
00:55:06,400 --> 00:55:08,800
We will probably just take our the whole Q&A, right?

1282
00:55:08,800 --> 00:55:11,900
The Whole 30 minutes normally for you a to finish what we were doing

1283
00:55:12,400 --> 00:55:17,200
just kind of get comfortable and then we will have a Q&A after that as

1284
00:55:17,200 --> 00:55:17,600
well.

1285
00:55:17,800 --> 00:55:20,900
Alright, so basically we've got the bites to lock here.

1286
00:55:21,800 --> 00:55:25,800
That looks like a correct computation to me the b 2 lakh rather they

1287
00:55:25,800 --> 00:55:26,100
see what

1288
00:55:26,200 --> 00:55:29,200
Are doing is you're saying, whatever our sample index was times the

1289
00:55:29,200 --> 00:55:32,800
number of bytes per sample, modded by the entire buffer size should

1290
00:55:32,800 --> 00:55:34,800
be, where we are in the buffer.

1291
00:55:34,800 --> 00:55:37,500
That seems like a solid computation to me.

1292
00:55:38,300 --> 00:55:42,000
I feel like that that is relatively straightforward.

1293
00:55:42,100 --> 00:55:45,200
I'm going to go ahead and recompile that here and then I am going to

1294
00:55:45,200 --> 00:55:46,200
step back to here.

1295
00:55:46,400 --> 00:55:48,800
And I am actually, oh, you know, the thing I would do is I'm going to

1296
00:55:48,800 --> 00:55:53,800
remove our check there so that we actually can step through twice.

1297
00:55:53,800 --> 00:55:56,100
Because what I'd like to do is I'd like to verify

1298
00:55:56,300 --> 00:55:59,400
I that this wraps around 20 again the second time through.

1299
00:55:59,400 --> 00:56:02,900
So the first time through we compute that b to lock and it's 0 the

1300
00:56:02,900 --> 00:56:08,500
second time through, I would like to verify that it's zero again and

1301
00:56:08,500 --> 00:56:09,000
it is.

1302
00:56:09,000 --> 00:56:09,800
So that's good.

1303
00:56:10,100 --> 00:56:13,200
That's what I wanted to see and want to make sure that the sample

1304
00:56:13,200 --> 00:56:17,200
index would go up by 48k and it did and that all looks roughly,

1305
00:56:17,200 --> 00:56:17,700
correct.

1306
00:56:17,700 --> 00:56:18,300
Okay.

1307
00:56:18,400 --> 00:56:20,200
So let's move on to thinking about something else.

1308
00:56:20,200 --> 00:56:23,400
So I think that running sample index looks kind of okay to me so far.

1309
00:56:23,400 --> 00:56:26,100
You never do know if the bite to lock.

1310
00:56:26,200 --> 00:56:27,200
Equals the play cursor.

1311
00:56:27,200 --> 00:56:30,100
That should only happen that one time at the moment.

1312
00:56:30,100 --> 00:56:31,100
Like I said, it's a little iffy.

1313
00:56:31,100 --> 00:56:33,400
We've got the to do in there, but I'm going to go ahead and try to

1314
00:56:33,400 --> 00:56:34,600
verify that.

1315
00:56:34,600 --> 00:56:36,100
It only happens the one time.

1316
00:56:36,600 --> 00:56:37,400
Oh, no.

1317
00:56:38,300 --> 00:56:39,200
See, look at that.

1318
00:56:39,200 --> 00:56:40,500
We've already found a problem.

1319
00:56:40,900 --> 00:56:42,100
Why is that happening?

1320
00:56:42,600 --> 00:56:45,300
Why is the play cursor and the B to lock?

1321
00:56:45,800 --> 00:56:46,800
Always the same?

1322
00:56:47,300 --> 00:56:48,600
Oh, you know, huh?

1323
00:56:49,700 --> 00:56:50,500
Oh, that's funny.

1324
00:56:51,700 --> 00:56:52,800
That is very interesting.

1325
00:56:52,800 --> 00:56:56,800
So I think basically, what's happening is exactly what this to do,

1326
00:56:56,800 --> 00:56:58,600
said would happen.

1327
00:56:58,600 --> 00:56:59,800
Basically, we are writing.

1328
00:57:00,000 --> 00:57:06,200
Up to the play cursor and then we always find that the play cursor has

1329
00:57:06,200 --> 00:57:07,100
not Advanced.

1330
00:57:07,100 --> 00:57:08,400
By the time we get through the loop.

1331
00:57:08,400 --> 00:57:09,200
The second time.

1332
00:57:09,400 --> 00:57:10,200
That is what's happening.

1333
00:57:10,200 --> 00:57:11,500
I think so really.

1334
00:57:11,500 --> 00:57:15,700
We just have to make sure that the bite to lock is behind the play

1335
00:57:15,700 --> 00:57:16,100
cursor.

1336
00:57:16,100 --> 00:57:20,400
Always, if it is not, so if it's above the play cursor, that's okay.

1337
00:57:20,400 --> 00:57:21,700
That means the play cursor.

1338
00:57:22,000 --> 00:57:23,200
We have sort of wrapped around it.

1339
00:57:23,200 --> 00:57:27,000
But if we're equal to the play cursor, that's actually something that

1340
00:57:27,000 --> 00:57:29,300
maybe we're going to have to start, just not doing anything because

1341
00:57:29,300 --> 00:57:29,900
we're assuming that

1342
00:57:30,000 --> 00:57:31,900
We've already caught up and we're fine.

1343
00:57:32,100 --> 00:57:34,200
So really that should probably look like this.

1344
00:57:34,800 --> 00:57:36,600
So we're going to do a little bit of a hack here.

1345
00:57:37,000 --> 00:57:38,200
If sound is playing.

1346
00:57:40,300 --> 00:57:42,200
If sound is not playing, we're going to do that and I'm just going to

1347
00:57:42,200 --> 00:57:44,100
double-check what that sounds like real quick.

1348
00:57:47,900 --> 00:57:50,700
Okay, so that already eliminated, one of our problems.

1349
00:57:50,800 --> 00:57:52,900
You can tell that it's very different already.

1350
00:57:53,100 --> 00:57:55,900
We still got problems, but that was definitely wrong.

1351
00:57:56,100 --> 00:57:58,300
So, alright, so let's think about this for a second.

1352
00:57:58,400 --> 00:58:01,300
So what we should probably do is start pulling this out into a little

1353
00:58:01,300 --> 00:58:04,300
bit less hacky a little bit more correct code, so that we can do stuff

1354
00:58:04,300 --> 00:58:07,500
like fill our buffer control, how we're feeling our buffer, a little

1355
00:58:07,500 --> 00:58:10,400
more explicitly so we can call it in here.

1356
00:58:10,400 --> 00:58:11,500
So let's go ahead.

1357
00:58:11,500 --> 00:58:12,800
I'm just going to pull this out here.

1358
00:58:12,900 --> 00:58:14,400
I'm going to make a little struct.

1359
00:58:14,700 --> 00:58:19,300
Called struct and then 32 sound output.

1360
00:58:19,300 --> 00:58:22,000
And I'm just going to wrap these values up in there.

1361
00:58:22,000 --> 00:58:24,200
I'm going to pull them out of there, so that we can have a little more

1362
00:58:24,200 --> 00:58:26,500
granular control over what's going on.

1363
00:58:26,500 --> 00:58:29,500
So all of these sound values that we had, they're all going to come

1364
00:58:29,500 --> 00:58:31,100
out into here.

1365
00:58:31,200 --> 00:58:31,800
Right?

1366
00:58:31,800 --> 00:58:36,200
And I'm going to actually have those default set set outside.

1367
00:58:36,200 --> 00:58:36,900
So here we go.

1368
00:58:36,900 --> 00:58:39,800
And some code we got to set up our stuff here.

1369
00:58:39,900 --> 00:58:44,100
So if we make a win32 sound output, this is our sound output

1370
00:58:44,100 --> 00:58:44,500
structure.

1371
00:58:44,600 --> 00:58:48,200
T', we can go ahead and then output are sorry.

1372
00:58:48,200 --> 00:58:48,800
Set.

1373
00:58:48,800 --> 00:58:52,700
All the values to what we were setting them to like this.

1374
00:58:53,900 --> 00:58:54,700
Here we go.

1375
00:58:54,900 --> 00:58:59,600
Set the wave period, set the B 4 sample set, the buffer size.

1376
00:58:59,700 --> 00:59:00,400
There we go.

1377
00:59:00,700 --> 00:59:03,600
And these guys now have to be based on this.

1378
00:59:03,800 --> 00:59:04,400
There we go.

1379
00:59:04,600 --> 00:59:06,300
So we're going to set all that stuff up.

1380
00:59:06,600 --> 00:59:07,500
So that's good.

1381
00:59:07,600 --> 00:59:12,900
And then we are going to go ahead and make this initialization code

1382
00:59:13,100 --> 00:59:13,900
happened down there.

1383
00:59:13,900 --> 00:59:14,500
So let's get

1384
00:59:14,600 --> 00:59:17,200
Of these because you can't actually do those.

1385
00:59:17,200 --> 00:59:18,700
You can't funnily enough.

1386
00:59:18,700 --> 00:59:19,800
You could actually leave those in.

1387
00:59:19,800 --> 00:59:23,200
I think now that I think they added the C++, 11 standard added, some

1388
00:59:23,200 --> 00:59:25,600
abilities to to specify default values like that.

1389
00:59:25,600 --> 00:59:27,800
So you could have you could have actually left that in there

1390
00:59:27,800 --> 00:59:28,500
technically.

1391
00:59:29,000 --> 00:59:31,800
So we're going to go ahead and move that down into here.

1392
00:59:32,400 --> 00:59:35,000
So, basically, we're going to create one of these and we're going to

1393
00:59:35,000 --> 00:59:37,000
fill it out like that.

1394
00:59:38,500 --> 00:59:39,400
So that's good.

1395
00:59:40,100 --> 00:59:48,400
We are going to now call win32 and it D sound with those values.

1396
00:59:48,400 --> 00:59:51,000
So now, we'll initialize them straight out of the sound output.

1397
00:59:51,000 --> 00:59:51,700
And that's fine.

1398
00:59:51,700 --> 00:59:54,500
And then what we'll do is, we're going to make our buffer fill stuff.

1399
00:59:54,500 --> 00:59:59,000
We're going to actually make that buffer fill stuff, be something that

1400
00:59:59,000 --> 00:59:59,300
we can call.

1401
01:00:00,000 --> 01:00:03,800
And we can give it a little bit more of guidance about what we

1402
01:00:03,800 --> 01:00:05,000
actually want to do.

1403
01:00:05,100 --> 01:00:07,400
So this buffer fill stuff right here.

1404
01:00:07,900 --> 01:00:09,900
Basically this part right here.

1405
01:00:10,100 --> 01:00:16,200
We are going to pull out into something that can kind of be called in

1406
01:00:16,200 --> 01:00:19,500
different ways at different times so that we can be a little more

1407
01:00:19,500 --> 01:00:21,600
explicit about it and see what's going on.

1408
01:00:22,100 --> 01:00:26,700
So, let's see when three to fill sound buffer, like this.

1409
01:00:27,100 --> 01:00:29,700
And that's going to take one of these sound outputs.

1410
01:00:30,400 --> 01:00:32,300
Like that, there we go.

1411
01:00:33,100 --> 01:00:37,400
And then it will take the two parameters that were passed here before

1412
01:00:37,400 --> 01:00:39,900
the B to lock and the B to, right?

1413
01:00:39,900 --> 01:00:42,800
It'll basically pass those in here, right?

1414
01:00:42,800 --> 01:00:43,500
See that?

1415
01:00:43,700 --> 01:00:46,000
So we're basically just extracting that code out again.

1416
01:00:46,000 --> 01:00:49,800
I like I said, I'm a big fan of just pulling things out when you need

1417
01:00:49,800 --> 01:00:50,100
them.

1418
01:00:50,800 --> 01:00:52,300
Instead of trying design step up front.

1419
01:00:52,300 --> 01:00:55,100
You just see what the patterns are that emerge and then you pull out.

1420
01:00:55,200 --> 01:00:59,100
It's a good way to keep yourself in a good state to the code.

1421
01:00:59,100 --> 01:00:59,800
So he's actually doing

1422
01:01:00,000 --> 01:01:02,900
Nothing useful and you're not wasting a lot of time with abstractions

1423
01:01:02,900 --> 01:01:04,300
that don't actually do anything for you.

1424
01:01:04,600 --> 01:01:06,100
So that's the way I like to do it.

1425
01:01:06,100 --> 01:01:08,900
Always pull out start with the code, pull it out.

1426
01:01:08,900 --> 01:01:13,300
Alright, so basically what we've got here is we've got a function now,

1427
01:01:13,300 --> 01:01:17,200
that'll do this fill for us, and we just need to basically reference

1428
01:01:17,200 --> 01:01:20,000
the sound output for all the parameters that we used to use.

1429
01:01:20,800 --> 01:01:25,300
So B for sample was one, we've got running sample, index.

1430
01:01:25,300 --> 01:01:26,000
That's one.

1431
01:01:26,400 --> 01:01:27,700
We've got our wave period.

1432
01:01:27,700 --> 01:01:29,600
That's one dark tone volume.

1433
01:01:30,400 --> 01:01:32,500
That's looks like bout it.

1434
01:01:32,700 --> 01:01:38,300
We've got that, we've got this and we've got that.

1435
01:01:38,400 --> 01:01:43,300
Okay, so that should basically give us what we had before.

1436
01:01:43,600 --> 01:01:46,100
Let's go ahead and compile that make sure that works that missed a

1437
01:01:46,100 --> 01:01:46,500
couple.

1438
01:01:46,500 --> 01:01:52,200
There's one, there's another and there we go.

1439
01:01:52,300 --> 01:01:52,900
Alright.

1440
01:01:53,000 --> 01:01:56,100
So now down in here, what we need to do is we need to actually call

1441
01:01:56,100 --> 01:01:57,300
this function, right?

1442
01:01:57,300 --> 01:01:59,300
We need to actually call our fill function.

1443
01:02:00,000 --> 01:02:03,000
Down in here and we will do that.

1444
01:02:03,600 --> 01:02:04,800
And there we go.

1445
01:02:05,000 --> 01:02:08,700
Now, we will call the sound output with that.

1446
01:02:08,700 --> 01:02:11,300
We will use our B to lock in place to write and now this should

1447
01:02:11,300 --> 01:02:13,700
basically give us the same code with the same bug.

1448
01:02:13,800 --> 01:02:18,300
It's just a all we did was pull it out into another function.

1449
01:02:18,300 --> 01:02:20,400
That's the only thing that we've done so far.

1450
01:02:20,700 --> 01:02:22,300
So there's our sound output.

1451
01:02:22,400 --> 01:02:25,100
Let's take a compiled here and just fix our compile errors.

1452
01:02:25,400 --> 01:02:26,500
Sound output.

1453
01:02:26,600 --> 01:02:28,200
Oops, sound output.

1454
01:02:28,400 --> 01:02:29,100
There we go.

1455
01:02:29,900 --> 01:02:31,400
That and that.

1456
01:02:31,900 --> 01:02:36,800
So let's go ahead and just get that indented properly and last, but

1457
01:02:36,800 --> 01:02:37,500
not least.

1458
01:02:37,500 --> 01:02:38,000
There we go.

1459
01:02:38,000 --> 01:02:41,600
So this should give us the same exact thing we had before same bug,

1460
01:02:41,600 --> 01:02:42,500
same everything.

1461
01:02:43,400 --> 01:02:46,000
Yes, and that is exactly what we get.

1462
01:02:46,200 --> 01:02:46,900
So that's fine.

1463
01:02:47,100 --> 01:02:47,800
All right.

1464
01:02:47,800 --> 01:02:50,900
So now what we can do is we can make this stuff a little bit cleaner.

1465
01:02:50,900 --> 01:02:54,100
What we can do is we can say, all right, the first time through after

1466
01:02:54,100 --> 01:02:58,700
we in it, let's go ahead and do a little bit of a fill.

1467
01:02:58,800 --> 01:02:59,800
So let's go down here.

1468
01:03:00,000 --> 01:03:04,100
And say, all right, we've got we've got our Wind Through to fill sound

1469
01:03:04,100 --> 01:03:04,500
buffer.

1470
01:03:04,700 --> 01:03:08,700
Let's go ahead and fill the sound buffer at startup, and then we can

1471
01:03:08,700 --> 01:03:13,000
also do our play at startup as well, so we can kick the sound buffer

1472
01:03:13,000 --> 01:03:14,000
off right here.

1473
01:03:14,000 --> 01:03:15,100
That gets rid of that.

1474
01:03:15,100 --> 01:03:18,400
Sound is playing variable, that's gone and we could just basically

1475
01:03:18,400 --> 01:03:19,100
kick it off right here.

1476
01:03:19,100 --> 01:03:21,300
So what we're going to do is we're going to fill our sound buffer.

1477
01:03:23,300 --> 01:03:23,800
Excuse me.

1478
01:03:24,300 --> 01:03:27,200
We're going to fill our sound buffer and we're basically to pass it

1479
01:03:27,200 --> 01:03:29,800
the first bite and we're going to pass it, I guess.

1480
01:03:30,000 --> 01:03:35,000
Guess, we'll just do for the B to write will do the entire, the entire

1481
01:03:35,000 --> 01:03:36,000
secondary buffer size.

1482
01:03:36,000 --> 01:03:37,300
So that'll fill the buffer.

1483
01:03:37,400 --> 01:03:38,400
Like we said before.

1484
01:03:38,500 --> 01:03:42,300
Now, what should happen here again is we should basically get exactly

1485
01:03:42,300 --> 01:03:44,300
the thing that we got before.

1486
01:03:44,800 --> 01:03:46,000
Let's do go ahead and do this.

1487
01:03:46,000 --> 01:03:48,100
We should get the same exact bug that we got before.

1488
01:03:49,600 --> 01:03:50,300
Hello.

1489
01:03:51,700 --> 01:03:54,000
Now, we are back to a pure tone, ladies and gentlemen.

1490
01:03:55,900 --> 01:03:57,500
In fact, a perfectly pure tone.

1491
01:03:58,500 --> 01:04:01,300
So basically that that check there was bogus.

1492
01:04:02,000 --> 01:04:03,200
Why was that the case?

1493
01:04:03,400 --> 01:04:04,500
That's very interesting.

1494
01:04:06,400 --> 01:04:07,300
Let's take a look.

1495
01:04:09,900 --> 01:04:11,100
Oh, even better.

1496
01:04:11,200 --> 01:04:13,200
That was just a national uninitialized variable.

1497
01:04:13,400 --> 01:04:14,200
That's all that was.

1498
01:04:14,700 --> 01:04:16,200
That was our entirety of our bug.

1499
01:04:16,300 --> 01:04:17,500
We forgot to do.

1500
01:04:19,500 --> 01:04:20,000
That.

1501
01:04:22,100 --> 01:04:22,700
That was it.

1502
01:04:23,200 --> 01:04:24,000
No other problem.

1503
01:04:24,600 --> 01:04:26,500
That was the entirety of our sound output problem.

1504
01:04:27,200 --> 01:04:27,700
Awesome.

1505
01:04:28,100 --> 01:04:30,600
So basically the only problem is when we went ahead, we had our

1506
01:04:30,600 --> 01:04:32,800
problem of not catching up to the play cursor.

1507
01:04:33,100 --> 01:04:34,200
So we had to fix that.

1508
01:04:34,300 --> 01:04:37,200
But when I did our test for that, we fail to we failed actually

1509
01:04:37,200 --> 01:04:41,300
initialize to zero again, one of the reasons to start pulling code out

1510
01:04:41,300 --> 01:04:45,300
and start making things cleaner cleaner, code has less stupid mistakes

1511
01:04:45,300 --> 01:04:46,000
in it, right?

1512
01:04:46,300 --> 01:04:49,000
And that's a very good way to kind of look at that and maybe we should

1513
01:04:49,000 --> 01:04:50,900
have actually finished licenses are here, but the same time.

1514
01:04:51,000 --> 01:04:52,200
Was actually gentleman bug.

1515
01:04:52,500 --> 01:04:55,800
One of the things that that's interesting about.

1516
01:04:55,800 --> 01:04:59,900
That is I think maybe this is this might be a case where we want to

1517
01:04:59,900 --> 01:05:01,700
start turning up our warning level as well.

1518
01:05:02,400 --> 01:05:03,400
We should probably look at that.

1519
01:05:03,400 --> 01:05:05,300
I'm going to write that down as maybe something to talk about next

1520
01:05:05,300 --> 01:05:08,400
dream getting the warning level up to something proper, because the

1521
01:05:08,400 --> 01:05:11,000
compiler should warn us about a lot of things, not necessarily that

1522
01:05:11,000 --> 01:05:14,500
one, but we're currently working without a lot of warnings turned on a

1523
01:05:14,500 --> 01:05:16,000
lot of usually, when I compile my code.

1524
01:05:16,000 --> 01:05:18,600
I have a lot of warnings turned on, so, something to think about.

1525
01:05:18,600 --> 01:05:20,900
But anyway, point being now all of our cases.

1526
01:05:21,000 --> 01:05:23,700
Has actually initialize the variable properly and hey, what a

1527
01:05:23,700 --> 01:05:25,600
surprise, our sound output works.

1528
01:05:27,500 --> 01:05:30,100
Works perfectly sounds lovely, doesn't it?

1529
01:05:32,100 --> 01:05:33,300
This isn't that pure tone.

1530
01:05:34,200 --> 01:05:35,200
Are you loving that?

1531
01:05:37,100 --> 01:05:38,000
Are you loving that?

1532
01:05:38,900 --> 01:05:42,400
I'm loving that but yeah, that's something that we want the power to

1533
01:05:42,400 --> 01:05:43,100
catch for us.

1534
01:05:43,700 --> 01:05:47,100
And so maybe I don't know, we're kind of I feel like we could still

1535
01:05:47,100 --> 01:05:50,300
make the stream, be limited to an hour because we've done what we

1536
01:05:50,300 --> 01:05:53,400
wanted to do today, which is to bug our sound output that has worked.

1537
01:05:53,600 --> 01:05:55,100
We're pretty happy about that.

1538
01:05:55,100 --> 01:05:57,700
And one of the interesting things is, if you look at the latency here,

1539
01:05:57,800 --> 01:05:59,800
our latency is now going to be the entire buffer.

1540
01:06:00,000 --> 01:06:00,900
Earth, right.

1541
01:06:01,000 --> 01:06:05,500
Our latency is going to be one whole buffers worth of sound because

1542
01:06:05,500 --> 01:06:07,700
we're always writing up to the play cursor.

1543
01:06:07,900 --> 01:06:09,300
What we could do in the future.

1544
01:06:09,300 --> 01:06:13,500
And what we probably will do is write less into the buffer.

1545
01:06:13,600 --> 01:06:14,000
Right?

1546
01:06:14,000 --> 01:06:17,600
Instead of being we're now one full second latent which would be very

1547
01:06:17,600 --> 01:06:21,500
bad for a game because we're writing a full buffers worth it, head of

1548
01:06:21,500 --> 01:06:26,000
that play cursor, but what we could do is basically say, let's not do

1549
01:06:26,000 --> 01:06:26,500
that.

1550
01:06:26,600 --> 01:06:29,800
Let's write up to someplace short of that basically, right?

1551
01:06:30,000 --> 01:06:30,200
Right.

1552
01:06:30,200 --> 01:06:32,000
Let's take a look at the play cursor.

1553
01:06:32,000 --> 01:06:35,200
Let's move only a certain amount ahead of it.

1554
01:06:35,500 --> 01:06:36,700
And let's write it to that.

1555
01:06:36,700 --> 01:06:38,900
So, we'll look at that a little bit later, too.

1556
01:06:38,900 --> 01:06:39,700
If that makes sense.

1557
01:06:41,300 --> 01:06:43,300
When it comes time to actually play sound effects.

1558
01:06:43,500 --> 01:06:45,200
That is something that will be looking at.

1559
01:06:47,500 --> 01:06:52,400
So what we'll do here is we'll say to do basically we want to change

1560
01:06:52,400 --> 01:06:58,500
this to using a lower latency offset from the play cursor.

1561
01:06:58,500 --> 01:07:03,900
When we actually start having sound effects, right?

1562
01:07:03,900 --> 01:07:07,100
This sort of thing would be fine for music streaming because it's not

1563
01:07:07,100 --> 01:07:10,500
particularly accurate in terms of latent.

1564
01:07:10,500 --> 01:07:17,000
But basically what we want to do is yeah, is change that before we get

1565
01:07:17,000 --> 01:07:17,300
to sound.

1566
01:07:17,700 --> 01:07:19,800
So I think we have actually accomplished what we want to do for the

1567
01:07:19,800 --> 01:07:21,300
day, even though it was a Meandering stream.

1568
01:07:21,300 --> 01:07:23,200
We actually did exactly what we wanted.

1569
01:07:23,400 --> 01:07:24,500
So that's pretty exciting.

1570
01:07:24,800 --> 01:07:30,100
The only thing I would do want to note is to do Implement sign

1571
01:07:30,400 --> 01:07:33,400
ourselves because that would be that would be nice.

1572
01:07:33,400 --> 01:07:36,600
If you notice if we go ahead and remove math.h here, you will notice

1573
01:07:36,600 --> 01:07:41,400
we get an undefined identifier error because there is no sign F

1574
01:07:41,800 --> 01:07:43,600
actually implemented.

1575
01:07:43,700 --> 01:07:47,000
So what I'd like to do is eventually Implement that ourselves, we can

1576
01:07:47,600 --> 01:07:51,600
Look to if we go in here to the sign code, where is it?

1577
01:07:52,000 --> 01:07:53,100
Let's see here.

1578
01:07:53,600 --> 01:07:54,400
Phil buffer.

1579
01:07:54,500 --> 01:07:58,700
If we go in here and take a look at what it does, we can step into the

1580
01:07:58,700 --> 01:08:02,200
Assembly Language, and actually take a look at what that's going to

1581
01:08:02,200 --> 01:08:02,700
do.

1582
01:08:03,100 --> 01:08:08,600
So if you take a look here, it literally does call a function called

1583
01:08:08,600 --> 01:08:09,400
sign F.

1584
01:08:09,600 --> 01:08:10,100
Right.

1585
01:08:10,300 --> 01:08:11,800
I don't know if you can see that there.

1586
01:08:12,400 --> 01:08:13,400
Let's, let's take a look.

1587
01:08:13,400 --> 01:08:13,700
Here.

1588
01:08:14,200 --> 01:08:15,400
I'll be a little bit more specific.

1589
01:08:15,400 --> 01:08:17,000
We just we just called that one.

1590
01:08:17,500 --> 01:08:19,000
Let's go back around the loop.

1591
01:08:19,200 --> 01:08:21,700
Whereas our jump jump people jump.

1592
01:08:21,700 --> 01:08:22,399
There it is.

1593
01:08:23,000 --> 01:08:24,300
So we jump back to top of the loop.

1594
01:08:24,300 --> 01:08:27,399
We come down here and you can see we call into this sign.

1595
01:08:27,399 --> 01:08:29,800
F function, here is the sign F function.

1596
01:08:30,399 --> 01:08:34,300
Oh well, now it's as them and I guess it's not going to show us the

1597
01:08:34,300 --> 01:08:36,899
sign F function because we don't have a source, but we can look at the

1598
01:08:36,899 --> 01:08:38,100
Ross assembly for it.

1599
01:08:38,700 --> 01:08:39,700
Let's take a look here.

1600
01:08:41,000 --> 01:08:46,899
Doing a compare doing load, doing a bunch of testing doing a bunch of

1601
01:08:46,899 --> 01:08:50,000
moles blah blah blah blah blah.

1602
01:08:50,100 --> 01:08:50,700
You can look at that.

1603
01:08:50,700 --> 01:08:52,399
That's a pretty expensive sign.

1604
01:08:52,399 --> 01:08:52,700
Actually.

1605
01:08:52,700 --> 01:08:56,100
It looks like I don't know if that's the most we may want to that.

1606
01:08:56,100 --> 01:08:58,399
We may be able to implement a more efficient sign because we know that

1607
01:08:58,399 --> 01:08:59,899
we only care about certain things as

1608
01:09:00,000 --> 01:09:02,399
Well, so that's, yeah, that's definitely something.

1609
01:09:02,399 --> 01:09:05,700
We probably don't want to just leave to chance.

1610
01:09:05,700 --> 01:09:08,600
So, we will probably do something with that ourselves.

1611
01:09:09,700 --> 01:09:10,300
All right.

1612
01:09:10,500 --> 01:09:14,399
Anyway, I think that is basically all we wanted to get done today.

1613
01:09:14,399 --> 01:09:17,000
We will do timers tomorrow.

1614
01:09:17,200 --> 01:09:19,200
And then finally, on next week.

1615
01:09:19,200 --> 01:09:22,500
We'll actually, I think we're in really good shape next week.

1616
01:09:22,500 --> 01:09:24,200
We should be out of Windows code.

1617
01:09:24,300 --> 01:09:27,000
We still will probably do a little bit with file loading in the

1618
01:09:27,000 --> 01:09:29,800
windows code and will be massaging the windows platform layer a bit.

1619
01:09:30,000 --> 01:09:33,300
Next week as we go through it, but I think I think that's it.

1620
01:09:33,300 --> 01:09:36,600
Tomorrow will do timers and then we are good to go.

1621
01:09:36,600 --> 01:09:39,600
Ladies and gentlemen, we have been remarkably on time with the stream

1622
01:09:39,600 --> 01:09:41,800
the first day or two.

1623
01:09:41,800 --> 01:09:44,899
Not the first day, the second day I think was the only day we really

1624
01:09:44,899 --> 01:09:46,899
didn't get to as much as we wanted to.

1625
01:09:46,899 --> 01:09:48,000
This has been amazing.

1626
01:09:49,300 --> 01:09:49,700
I don't know.

1627
01:09:49,700 --> 01:09:52,500
Give yourselves a pat on the back for our, for our punctuality.

1628
01:09:52,500 --> 01:09:53,399
I think that's about it.

1629
01:09:53,399 --> 01:09:54,400
So, let's go ahead.

1630
01:09:55,500 --> 01:09:59,800
Let's go ahead and go to the day 9 q a yeah.

1631
01:10:00,100 --> 01:10:01,900
Let's keep our keep our streak going here.

1632
01:10:01,900 --> 01:10:02,700
Let's take a look.

1633
01:10:07,600 --> 01:10:08,700
Uplink coder, indeed.

1634
01:10:08,700 --> 01:10:09,800
This bug could not have happened.

1635
01:10:09,800 --> 01:10:11,000
He always initialize variables.

1636
01:10:11,000 --> 01:10:14,300
Yes, and I actually try to do that myself as well.

1637
01:10:14,300 --> 01:10:15,100
A lot of times.

1638
01:10:16,300 --> 01:10:21,000
The only problem is sometimes, so what I like to do a lot of times and

1639
01:10:21,000 --> 01:10:23,200
and you know, I'm going to go ahead and point this out here.

1640
01:10:23,200 --> 01:10:25,400
Actually in our code, you'll notice what I like to do.

1641
01:10:25,400 --> 01:10:29,400
A lot of times is stuff like this.

1642
01:10:30,000 --> 01:10:35,300
I like to, I like to always just initialize to zero at the opening in

1643
01:10:35,300 --> 01:10:35,800
code.

1644
01:10:35,800 --> 01:10:36,200
That's not

1645
01:10:36,400 --> 01:10:37,100
Worms critical.

1646
01:10:37,100 --> 01:10:39,600
I like to just initialize to zero because I feel like it catches a lot

1647
01:10:39,600 --> 01:10:42,800
of bugs for you and you just always assumed that things are zero.

1648
01:10:42,800 --> 01:10:45,400
So you just, you don't even clear values that are going to be 0 and

1649
01:10:45,400 --> 01:10:47,700
you try to make as many values default to zero as possible.

1650
01:10:47,900 --> 01:10:49,200
A very good way to do things.

1651
01:10:49,400 --> 01:10:50,900
So I I like that.

1652
01:10:50,900 --> 01:10:52,300
I would probably like that aspect of D.

1653
01:10:52,300 --> 01:10:55,200
I have not program D myself, but I do think that's a good idea.

1654
01:10:55,700 --> 01:10:58,700
What would be nice is the something basically where you always assume

1655
01:10:58,700 --> 01:11:02,200
that values are initialized and then you ask for them not to be

1656
01:11:02,200 --> 01:11:04,200
initialized, would be the better way to go.

1657
01:11:04,200 --> 01:11:06,200
So that in the case, where you care about the performance and

1658
01:11:06,300 --> 01:11:07,700
don't want default values.

1659
01:11:07,700 --> 01:11:11,000
You just say that that's probably something that would be a good idea

1660
01:11:11,000 --> 01:11:12,700
and languages or at least give the programmer.

1661
01:11:12,700 --> 01:11:16,200
The ability to basically say with a struct here is I expect this to be

1662
01:11:16,200 --> 01:11:19,100
initialized to 0 all the time, unless the person ask not for it to be,

1663
01:11:19,300 --> 01:11:20,400
would be a nice keyword.

1664
01:11:20,400 --> 01:11:21,000
For example.

1665
01:11:21,200 --> 01:11:24,500
Now, the thing that I do want to emphasize here though is that this is

1666
01:11:24,500 --> 01:11:27,000
not really about catching a bug.

1667
01:11:29,100 --> 01:11:32,900
What I wanted the compiler to do, was not to initialize b 2, right?

1668
01:11:32,900 --> 01:11:35,300
Because we still had a bug in a sense.

1669
01:11:35,800 --> 01:11:39,200
Yes, zero happened to be the right value there.

1670
01:11:39,300 --> 01:11:41,800
So it seems like it would have been catching the bug.

1671
01:11:42,000 --> 01:11:43,500
But actually, what would have happened?

1672
01:11:43,500 --> 01:11:47,400
Is it would just been hiding the fact that our logic was buggy.

1673
01:11:48,200 --> 01:11:51,200
And so what I would rather have had happened there and what I think

1674
01:11:51,200 --> 01:11:54,200
the compiler would have done if we had turned our warning level up,

1675
01:11:54,200 --> 01:11:56,600
which is why I wrote that down is something to do very soon.

1676
01:11:56,600 --> 01:11:58,000
Maybe Monday will do that.

1677
01:11:58,200 --> 01:11:59,800
That is what I want that.

1678
01:12:00,000 --> 01:12:03,200
Is to tell me that there was a hole in the logic, tell me, not all

1679
01:12:03,200 --> 01:12:07,100
paths, initialize B to, right before it's used that would have

1680
01:12:07,100 --> 01:12:08,200
actually been what I want.

1681
01:12:08,300 --> 01:12:11,600
I don't want to silently initialize, the value and hide.

1682
01:12:11,600 --> 01:12:14,100
The fact that our logic was buggy because our logic was buggy.

1683
01:12:14,200 --> 01:12:16,000
We did this, right?

1684
01:12:17,100 --> 01:12:20,900
We did is sound playing or whatever something like this, right?

1685
01:12:20,900 --> 01:12:24,700
We did a thing where we typed in something here, but we didn't have an

1686
01:12:24,700 --> 01:12:25,100
else.

1687
01:12:25,400 --> 01:12:27,500
I want to tell me that else was missing.

1688
01:12:27,600 --> 01:12:29,100
That's what I actually wanted.

1689
01:12:29,400 --> 01:12:29,800
So,

1690
01:12:30,000 --> 01:12:33,300
So and I think the C compiler will actually do that most of the time

1691
01:12:33,400 --> 01:12:36,000
on a higher warning level which is kind of why I brought that up.

1692
01:12:36,100 --> 01:12:36,800
That's the thing.

1693
01:12:36,800 --> 01:12:39,900
We actually want the compiler to do for us, not silently, initialize

1694
01:12:39,900 --> 01:12:44,100
the value because this value doesn't have a default value.

1695
01:12:44,400 --> 01:12:48,400
It needs a specific value for every possible case and I want the

1696
01:12:48,400 --> 01:12:53,100
compiler to hold us to that and to say you've got a bug here, if you

1697
01:12:53,100 --> 01:12:54,400
didn't initialize it in every case.

1698
01:12:54,400 --> 01:12:58,400
That's what I actually want and that is why I didn't write this to

1699
01:12:58,400 --> 01:12:59,100
begin with.

1700
01:13:00,000 --> 01:13:01,800
Because I actually didn't want that.

1701
01:13:02,000 --> 01:13:04,100
So that's something to keep in mind there.

1702
01:13:07,600 --> 01:13:10,000
Let's take a look at what we've got in the Stream.

1703
01:13:10,400 --> 01:13:12,100
I'm going to blow my nose, apologize.

1704
01:13:14,300 --> 01:13:15,300
I'm still sick.

1705
01:13:15,900 --> 01:13:16,700
It is true.

1706
01:13:18,900 --> 01:13:19,500
Let's see.

1707
01:13:21,800 --> 01:13:25,700
Okay, doot doot.

1708
01:13:25,700 --> 01:13:25,800
Doot.

1709
01:13:25,800 --> 01:13:26,100
Do do.

1710
01:13:26,100 --> 01:13:28,900
Doot starting back at the beginning.

1711
01:13:28,900 --> 01:13:29,500
Pop up.

1712
01:13:31,400 --> 01:13:32,600
Let's see.

1713
01:13:37,900 --> 01:13:41,900
How do you know that b to lock is far enough ahead of the play cursor?

1714
01:13:42,200 --> 01:13:44,300
So we don't really know anything about it yet.

1715
01:13:44,400 --> 01:13:48,300
All we know is that we have a one-second, long buffer and we're

1716
01:13:48,300 --> 01:13:52,900
updating our buffer, every frame, which means that basically our game

1717
01:13:52,900 --> 01:13:55,200
would have to stall for an entire second.

1718
01:13:55,200 --> 01:13:57,900
In order for the play cursor to lupus.

1719
01:13:58,800 --> 01:14:00,100
So, we will never know.

1720
01:14:00,100 --> 01:14:03,300
And that is one of the bad parts of using direct sound that may be

1721
01:14:03,300 --> 01:14:04,900
fixed in later versions of the API.

1722
01:14:04,900 --> 01:14:08,500
But that was even fixed in wave out, which was actually the older API,

1723
01:14:08,500 --> 01:14:11,100
but you can't use because of, for various other reasons.

1724
01:14:13,100 --> 01:14:16,500
Basically, you do have a problem that if you did stall for one second,

1725
01:14:16,500 --> 01:14:18,200
you would know it.

1726
01:14:18,200 --> 01:14:20,900
Would, you know, if the buffer wrapped, if the play Chris are wrapped

1727
01:14:20,900 --> 01:14:24,600
around in the time, it took you to get around to another frame, you

1728
01:14:24,600 --> 01:14:25,100
would be.

1729
01:14:25,100 --> 01:14:27,500
You would be totally busted.

1730
01:14:27,500 --> 01:14:28,500
You would have no idea what went.

1731
01:14:28,600 --> 01:14:28,900
Not.

1732
01:14:29,000 --> 01:14:32,800
And so that is one argument to, you know, we could go up here and say,

1733
01:14:33,800 --> 01:14:37,300
you know, is is one second enough, right?

1734
01:14:37,900 --> 01:14:44,500
You know, should we actually say, you know, maybe make this like 10

1735
01:14:44,500 --> 01:14:48,000
seconds, you know, or 30 seconds.

1736
01:14:48,100 --> 01:14:49,100
How about 60 seconds?

1737
01:14:49,100 --> 01:14:50,800
Make it a minute, right?

1738
01:14:52,700 --> 01:14:55,600
Maybe make it so long that there's no conceivable way.

1739
01:14:55,800 --> 01:14:58,700
No matter what happened, the game could ever pause for that long, so

1740
01:14:58,700 --> 01:14:59,800
that we can always see.

1741
01:15:00,000 --> 01:15:04,300
Very clearly where that play cursor is, and that's something to think

1742
01:15:04,300 --> 01:15:04,800
about.

1743
01:15:15,600 --> 01:15:18,600
Could be forced multiple regions by setting a maximum buffer, lock

1744
01:15:18,600 --> 01:15:21,000
size to be a fraction of the sound buffer.

1745
01:15:22,700 --> 01:15:23,300
Sorry, I'm not sure.

1746
01:15:23,300 --> 01:15:24,500
I understand that question.

1747
01:15:31,300 --> 01:15:33,000
Let's see.

1748
01:15:38,200 --> 01:15:39,500
Sorry, just reading through everything.

1749
01:15:42,000 --> 01:15:45,700
Try W4 if it's not too much trouble, W3 will talk about that on

1750
01:15:45,700 --> 01:15:46,300
Monday.

1751
01:15:46,300 --> 01:15:48,700
I wanted to wait until the next plane, how warnings work and how you

1752
01:15:48,700 --> 01:15:49,700
turn them on and off and stuff.

1753
01:15:49,700 --> 01:15:50,600
So we'll get to that.

1754
01:15:53,200 --> 01:15:54,800
Let's see.

1755
01:15:56,100 --> 01:15:59,200
Where do I look for standard C function, documentation like printf or

1756
01:15:59,200 --> 01:16:00,000
size of?

1757
01:16:01,200 --> 01:16:01,400
Yeah.

1758
01:16:01,400 --> 01:16:02,700
And like, sign for example.

1759
01:16:02,700 --> 01:16:07,100
So typically you should actually be able to do msdn printf and you can

1760
01:16:07,100 --> 01:16:10,300
actually still use the msdn for that.

1761
01:16:10,400 --> 01:16:11,600
It's got them all in there.

1762
01:16:12,100 --> 01:16:14,700
You can also look in other places like when you just search for

1763
01:16:14,700 --> 01:16:18,400
printf, you will get a C++ reference that comes up.

1764
01:16:19,100 --> 01:16:19,800
Usually.

1765
01:16:20,400 --> 01:16:20,800
You can.

1766
01:16:20,800 --> 01:16:23,900
So you can see that there as well, but msdn is actually perfectly fine

1767
01:16:24,200 --> 01:16:25,600
for looking at stuff up as well.

1768
01:16:29,900 --> 01:16:30,800
If that makes sense.

1769
01:16:33,600 --> 01:16:34,800
Let's take a look.

1770
01:16:40,600 --> 01:16:43,700
I think you can now remove, if B lock equals play cursor, check.

1771
01:16:43,700 --> 01:16:45,500
It will be handled by the else case.

1772
01:16:46,100 --> 01:16:47,000
Let's take a look.

1773
01:16:47,500 --> 01:16:49,000
Yes, I believe that's correct as if they're.

1774
01:16:49,000 --> 01:16:49,900
Yes, you're right.

1775
01:16:49,900 --> 01:16:53,900
We could just do this because now, since we're Computing everything

1776
01:16:53,900 --> 01:16:55,600
we're doing the fill outside.

1777
01:16:55,900 --> 01:16:58,700
We should basically always be correct, like we were, that's how we

1778
01:16:58,700 --> 01:17:00,700
wrote it initially, but we added that thing in there.

1779
01:17:00,700 --> 01:17:02,600
It's kind of a hack to fill the buffer.

1780
01:17:02,800 --> 01:17:04,000
Let's listen very carefully.

1781
01:17:08,800 --> 01:17:13,000
Okay, I guess the other thing we could do is while we're on stream

1782
01:17:13,000 --> 01:17:13,400
here.

1783
01:17:14,400 --> 01:17:16,600
If I go to OBS settings.

1784
01:17:16,900 --> 01:17:22,600
I don't actually know if I can change these offhand, but basically is

1785
01:17:22,600 --> 01:17:25,500
there some way to change the volume?

1786
01:17:25,700 --> 01:17:30,500
That's of the game coming out.

1787
01:17:30,800 --> 01:17:32,000
We could test that on the stream.

1788
01:17:32,000 --> 01:17:33,900
Maybe we'll do that in a separate test stream.

1789
01:17:34,000 --> 01:17:38,100
I'll just write that down basically, like audio Valium.

1790
01:17:38,100 --> 01:17:38,300
And

1791
01:17:38,600 --> 01:17:41,300
Yes, that's something to think about because people are saying it's

1792
01:17:41,300 --> 01:17:42,400
too loud or whatever.

1793
01:17:42,600 --> 01:17:44,100
So we probably want to take care of that.

1794
01:17:44,100 --> 01:17:45,900
Especially when we're not working on sound code.

1795
01:17:45,900 --> 01:17:48,900
We don't want that blasting, every time we play something, so that's

1796
01:17:48,900 --> 01:17:49,800
something to think about.

1797
01:17:50,700 --> 01:17:51,300
Okay?

1798
01:17:53,300 --> 01:17:54,100
- that again.

1799
01:17:59,200 --> 01:17:59,800
Will be used.

1800
01:18:00,000 --> 01:18:01,000
Find the actual game.

1801
01:18:01,000 --> 01:18:02,500
No will be playing.

1802
01:18:02,600 --> 01:18:05,000
We probably will never use the sine value in the actual game.

1803
01:18:08,100 --> 01:18:10,600
It's autocomplete intellisense a bad idea for a programmer.

1804
01:18:10,600 --> 01:18:12,500
Un John do not seem to use it.

1805
01:18:13,700 --> 01:18:16,400
Well, I don't think intellisense is a bad thing.

1806
01:18:18,200 --> 01:18:19,700
I do use autocomplete.

1807
01:18:19,700 --> 01:18:24,400
So I use basically, you know, I do B to right hit tab or something II

1808
01:18:24,400 --> 01:18:27,400
do that right, a lot, which is sort of like intellisense.

1809
01:18:28,000 --> 01:18:30,500
But the reason that I don't like intellisense in Visual Studio is I

1810
01:18:30,500 --> 01:18:34,300
hate the way that the input actually works with that it locks up your

1811
01:18:34,300 --> 01:18:36,000
up and down arrow in a bad way.

1812
01:18:36,600 --> 01:18:38,400
So basically, I don't think that's necessarily a bad thing.

1813
01:18:38,400 --> 01:18:41,000
I would just say if you can and I've never looked into this, but if

1814
01:18:41,000 --> 01:18:45,500
you can and you're in Visual Studio, I would say look into rebinding

1815
01:18:45,500 --> 01:18:46,600
the keys, a little bit there.

1816
01:18:46,600 --> 01:18:48,500
If you can, I don't know if intellisense lets you do that.

1817
01:18:48,500 --> 01:18:51,800
But if you can rebind the key so that it's not locking up your arrow

1818
01:18:51,800 --> 01:18:55,100
keys if you could do something there, but I'll think it tells us

1819
01:18:55,100 --> 01:18:56,000
necessary bad.

1820
01:18:56,400 --> 01:18:56,800
I don't know that.

1821
01:18:56,800 --> 01:18:58,400
It's necessarily all that useful though either.

1822
01:19:02,700 --> 01:19:07,100
Let's see to to do to do.

1823
01:19:08,700 --> 01:19:12,100
I got to do a better job of keeping my place in the Stream.

1824
01:19:12,100 --> 01:19:15,800
I need like a little tool that lets me know where we were.

1825
01:19:15,800 --> 01:19:18,800
So so we just ask the you and John did not seem to use it one.

1826
01:19:19,100 --> 01:19:20,300
Where is that?

1827
01:19:20,300 --> 01:19:20,600
There it is?

1828
01:19:20,600 --> 01:19:21,000
Okay.

1829
01:19:24,000 --> 01:19:25,100
Let's see.

1830
01:19:26,700 --> 01:19:28,800
I don't think it had to do with uninitialized variable.

1831
01:19:28,800 --> 01:19:32,100
Wouldn't that mean you would do a huge right writing past the end of

1832
01:19:32,100 --> 01:19:34,700
the buffer is because you were overriding the region with the Lakers

1833
01:19:34,700 --> 01:19:35,600
in the right cursor.

1834
01:19:36,100 --> 01:19:40,200
So yes, I mean technically that is what was happening, but it was

1835
01:19:40,200 --> 01:19:42,100
because of the uninitialized variable.

1836
01:19:42,300 --> 01:19:47,600
What we wanted to do was write 0 B, in the case, where the play cursor

1837
01:19:47,700 --> 01:19:51,100
and the B to lock, where we're at the same place, because there's no

1838
01:19:51,100 --> 01:19:51,900
need to write any more.

1839
01:19:51,900 --> 01:19:52,800
We'd caught up.

1840
01:19:53,000 --> 01:19:56,300
But what we were doing instead was writing an undefined.

1841
01:19:56,400 --> 01:19:57,600
/ of B, right.

1842
01:19:57,600 --> 01:20:00,300
We were writing some whatever the value of B to write actually

1843
01:20:00,300 --> 01:20:01,800
happened to be garbage.

1844
01:20:01,800 --> 01:20:02,100
Right?

1845
01:20:02,400 --> 01:20:06,600
We were, we were writing that many essentially and, of course, it

1846
01:20:06,600 --> 01:20:09,400
didn't overwrite, the end of the buffer, because when we call lock,

1847
01:20:09,400 --> 01:20:12,900
direct sound will clip that number down to the buffer size, presumably

1848
01:20:12,900 --> 01:20:14,900
or something else will happen there.

1849
01:20:15,000 --> 01:20:17,900
So basically, we were getting a cascading failure from the fact that

1850
01:20:17,900 --> 01:20:21,500
this value was initialized and it was causing us to do a right.

1851
01:20:21,500 --> 01:20:23,700
When we didn't want to actually do one at all.

1852
01:20:23,700 --> 01:20:25,400
Our logic was supposed to say, don't do the right.

1853
01:20:25,400 --> 01:20:26,400
And that was the initial idea.

1854
01:20:26,400 --> 01:20:28,700
Has value variable, that was causing that problem.

1855
01:20:31,200 --> 01:20:31,700
Excuse me.

1856
01:20:37,200 --> 01:20:38,600
Still quite sick.

1857
01:20:38,600 --> 01:20:41,900
Unfortunately, hoping this will go away by tomorrow.

1858
01:20:41,900 --> 01:20:44,400
Maybe I was feeling a little bit better today.

1859
01:20:44,600 --> 01:20:46,900
So I was hoping it would would start to lessen up anyway.

1860
01:20:50,900 --> 01:20:54,600
Is it possible for B to spill over two variables in neighboring

1861
01:20:54,600 --> 01:20:55,100
variables?

1862
01:20:55,100 --> 01:20:56,400
When bit shifting ends or something?

1863
01:20:56,400 --> 01:20:57,000
Like, okay.

1864
01:20:57,000 --> 01:20:57,700
I see what you're saying.

1865
01:20:58,600 --> 01:20:59,600
The answer is no.

1866
01:21:00,100 --> 01:21:03,300
So the reason that that b cannot spill in when you're doing, when

1867
01:21:03,300 --> 01:21:06,700
you're doing shifts and stuff like that is because when you are doing

1868
01:21:06,700 --> 01:21:10,900
things like that, you have to remember that the Assembly Language is

1869
01:21:10,900 --> 01:21:12,500
doing very specific things.

1870
01:21:12,800 --> 01:21:15,900
So basically when we come in here, let's take let me type a little

1871
01:21:15,900 --> 01:21:18,800
example in here for you to answer your question more specifically.

1872
01:21:19,300 --> 01:21:23,400
So let's say you want to know if I have something like this and this

1873
01:21:23,500 --> 01:21:24,000
right?

1874
01:21:24,900 --> 01:21:28,200
You want to know if repeatedly shifting X will accidentally get into

1875
01:21:28,200 --> 01:21:29,400
why right?

1876
01:21:30,000 --> 01:21:32,700
So if I do something like this, right?

1877
01:21:32,700 --> 01:21:36,400
If I shift this up, one, how many times can I do that before it shifts

1878
01:21:36,400 --> 01:21:38,000
into why something like that?

1879
01:21:38,000 --> 01:21:38,200
Right?

1880
01:21:38,200 --> 01:21:41,700
That's what you're asking essentially, if that makes sense.

1881
01:21:42,000 --> 01:21:46,700
So what happens in this circumstance is you have to remember that

1882
01:21:46,700 --> 01:21:48,000
these things are on the stack.

1883
01:21:48,000 --> 01:21:49,800
Yes, and they are next to each other.

1884
01:21:49,800 --> 01:21:50,800
That's also true.

1885
01:21:50,900 --> 01:21:54,300
So if I look at these two things and I look at the address of X and

1886
01:21:54,300 --> 01:21:55,600
we'll get the address of Y.

1887
01:21:55,700 --> 01:21:58,800
You will note that they are, you know, sort of close to each other.

1888
01:21:58,800 --> 01:21:59,800
They're a little further apart.

1889
01:22:00,000 --> 01:22:01,100
You may have expected right there.

1890
01:22:01,100 --> 01:22:03,000
Not right right next to each other.

1891
01:22:03,000 --> 01:22:05,200
They're actually quite a bit apart.

1892
01:22:05,200 --> 01:22:06,100
If you look at that.

1893
01:22:06,200 --> 01:22:09,700
I don't know if that's some kind of a padding check or something like

1894
01:22:09,700 --> 01:22:09,800
that.

1895
01:22:09,800 --> 01:22:13,000
I'm not sure why, they're, so why they're as far apart there as they

1896
01:22:13,000 --> 01:22:17,100
are but point being they are still both on the stack, but they can

1897
01:22:17,100 --> 01:22:20,400
never write into each other with a shift because what actually

1898
01:22:20,400 --> 01:22:22,500
happens, if you look at the Assembly Language code, you have to

1899
01:22:22,500 --> 01:22:25,700
remember stuff doesn't get operated on in memory.

1900
01:22:25,900 --> 01:22:28,000
It gets operated on in a register.

1901
01:22:28,300 --> 01:22:29,500
So what happens here is

1902
01:22:29,900 --> 01:22:34,500
Order to shift, left X by one first, the processor loads wherever X

1903
01:22:34,500 --> 01:22:36,500
was, and it loads it into a register.

1904
01:22:36,500 --> 01:22:39,800
So, if you click on the registers window again, if you don't have your

1905
01:22:39,800 --> 01:22:42,900
register windows open, you can go to debug windows and then it's in

1906
01:22:42,900 --> 01:22:43,700
here, registers.

1907
01:22:44,000 --> 01:22:47,200
You can go into your registers and you can look eax.

1908
01:22:47,300 --> 01:22:47,900
Right?

1909
01:22:47,900 --> 01:22:49,000
Is this value here?

1910
01:22:49,000 --> 01:22:53,000
Basically, it's called our ax and said, well, I can also do all this.

1911
01:22:53,400 --> 01:22:55,300
Looks like we have initialized our register window.

1912
01:22:55,300 --> 01:22:58,000
You can right click in here and get all the actual stuff you might

1913
01:22:58,000 --> 01:22:58,500
want.

1914
01:22:58,600 --> 01:22:59,800
There you are.

1915
01:23:00,000 --> 01:23:04,800
Ax is basically the the 64-bit version of eax.

1916
01:23:04,900 --> 01:23:07,600
So when I load this, it's going to load into the low part.

1917
01:23:07,600 --> 01:23:10,000
E ax is the lower 32 bits of our ax.

1918
01:23:10,200 --> 01:23:14,000
So I do that and you can see, I load it in the value, right?

1919
01:23:15,200 --> 01:23:19,200
What's going to happen now is, I'm going to shift left the register.

1920
01:23:19,600 --> 01:23:23,800
So you're not shifting left, the memory location X, you're shifting

1921
01:23:23,800 --> 01:23:25,000
left the register.

1922
01:23:25,200 --> 01:23:26,900
So the register shifts up, right?

1923
01:23:26,900 --> 01:23:29,300
And it went to, to just like we would expect, right?

1924
01:23:29,300 --> 01:23:29,800
You can actually

1925
01:23:29,900 --> 01:23:31,400
do this in your watch window as well.

1926
01:23:31,400 --> 01:23:35,700
You can type in our ax, the actual thing or even eax.

1927
01:23:35,700 --> 01:23:36,200
I think.

1928
01:23:36,200 --> 01:23:38,200
Yeah, and you can see what eax is.

1929
01:23:38,200 --> 01:23:40,600
That's the low 32 bits of our ax, right?

1930
01:23:40,700 --> 01:23:44,900
You can do that and you can even do comma B if you want to because

1931
01:23:45,000 --> 01:23:47,600
this didn't work in the intro to see stream, the comma B didn't work

1932
01:23:47,600 --> 01:23:50,400
because we were using an older version of Visual Studio, but now that

1933
01:23:50,400 --> 01:23:53,500
we're using 2013, we can do comma B, which shows binary, which is

1934
01:23:53,500 --> 01:23:55,600
really helpful, especially for teaching purposes.

1935
01:23:55,600 --> 01:23:58,500
There's the binary 64-bit register.

1936
01:23:58,700 --> 01:23:59,800
And as we go through, you'll see.

1937
01:24:00,300 --> 01:24:03,500
It does the shift left right now.

1938
01:24:03,500 --> 01:24:06,100
It writes the value that's in the register.

1939
01:24:06,300 --> 01:24:10,100
It writes the low 32 bits of that, register out to X.

1940
01:24:10,600 --> 01:24:13,800
So, the address of X, you'll see still has one in it.

1941
01:24:14,200 --> 01:24:17,700
It did not get shifted yet, until we do this, move to write the

1942
01:24:17,700 --> 01:24:19,400
register about value back.

1943
01:24:19,700 --> 01:24:20,700
There it is, right?

1944
01:24:20,700 --> 01:24:21,500
You see that there.

1945
01:24:21,600 --> 01:24:23,900
So, now, the register value got written back to X.

1946
01:24:24,400 --> 01:24:24,900
Now.

1947
01:24:25,100 --> 01:24:27,500
And again, this is very unoptimized code.

1948
01:24:28,000 --> 01:24:29,800
The optimizer, would normally go to town on this.

1949
01:24:30,000 --> 01:24:32,100
This and it would just change it into a single shift in a right or

1950
01:24:32,100 --> 01:24:32,700
something like that.

1951
01:24:32,700 --> 01:24:33,200
Right?

1952
01:24:33,500 --> 01:24:36,300
But since this is unoptimized code, if you turn the optimizer off,

1953
01:24:36,300 --> 01:24:38,600
literally just outputs explicitly.

1954
01:24:38,600 --> 01:24:42,600
What you told it to do and what you told it to do was to load X into a

1955
01:24:42,600 --> 01:24:45,300
register shift, it left by one and then put it back out to the

1956
01:24:45,300 --> 01:24:45,700
register.

1957
01:24:45,900 --> 01:24:47,200
So now it's going to do the exact same thing.

1958
01:24:47,200 --> 01:24:50,800
Again load back in the value, which it did shift it, right?

1959
01:24:50,800 --> 01:24:52,500
It out, load shift, right?

1960
01:24:52,500 --> 01:24:54,500
Load shift, right, load shift, right?

1961
01:24:54,500 --> 01:24:57,700
And basically what that does is that just keep doing exactly that load

1962
01:24:57,700 --> 01:24:58,400
shift, right?

1963
01:24:58,400 --> 01:24:59,800
Keeps updating X and so on.

1964
01:25:00,000 --> 01:25:00,600
So forth.

1965
01:25:00,900 --> 01:25:05,600
When you get to the end of X, when you get to the end of the 64 bits

1966
01:25:05,600 --> 01:25:06,900
and shift it out the top.

1967
01:25:06,900 --> 01:25:09,800
Or in this case, when we get into 32 bits and shift it out the top

1968
01:25:09,800 --> 01:25:10,200
again.

1969
01:25:10,200 --> 01:25:13,200
It's just going to take the 32 bits of the register and write them

1970
01:25:13,200 --> 01:25:13,600
out.

1971
01:25:13,700 --> 01:25:16,800
So there was no way to shift it into some other memory.

1972
01:25:16,900 --> 01:25:18,200
This is in the register.

1973
01:25:18,300 --> 01:25:21,000
The only thing that can happen is when you shift, I think there's like

1974
01:25:21,000 --> 01:25:24,700
a carry flag that gets set in the processor that you could test.

1975
01:25:24,900 --> 01:25:27,000
So you do know whether you shifted a one-out.

1976
01:25:27,000 --> 01:25:29,500
I think there's a basically a thing.

1977
01:25:29,900 --> 01:25:33,700
In here, if you look in registers, there's a Flags thing down here,

1978
01:25:33,800 --> 01:25:34,400
right?

1979
01:25:34,600 --> 01:25:36,900
There's there's that gets set sometimes and stuff like that.

1980
01:25:36,900 --> 01:25:38,900
But you can't access those flags from see.

1981
01:25:39,100 --> 01:25:39,900
They're opaque to you.

1982
01:25:39,900 --> 01:25:41,200
They're not actually exposed.

1983
01:25:41,500 --> 01:25:42,800
So basically that's what happens.

1984
01:25:43,000 --> 01:25:46,600
So that's why you can never write values into other values like that.

1985
01:25:46,700 --> 01:25:49,300
The only time you would have an overwrite is, if you were writing to a

1986
01:25:49,300 --> 01:25:52,300
pointer and you wrote too many bits to the pointer, which you could

1987
01:25:52,300 --> 01:25:53,100
do, right?

1988
01:25:53,100 --> 01:25:57,500
You could, you could have a pointer and write 64 bits out to it, but

1989
01:25:57,500 --> 01:25:59,800
you are pointing at a 32-bit value, and then you would corrupt.

1990
01:26:00,000 --> 01:26:02,500
The thing next to that thing in memory, that makes sense.

1991
01:26:03,200 --> 01:26:04,500
Hopefully that clears that up a bit.

1992
01:26:10,200 --> 01:26:11,400
Let's see.

1993
01:26:18,400 --> 01:26:20,800
I don't think it had to do with uninitialized variable.

1994
01:26:20,800 --> 01:26:23,300
Wouldn't that mean you would be doing a huge right writing pass in the

1995
01:26:23,300 --> 01:26:23,600
buffer?

1996
01:26:23,600 --> 01:26:26,300
I think it's because we're right we did that is possibly spillover.

1997
01:26:27,000 --> 01:26:28,600
Will use the same audio buffer to have overlay?

1998
01:26:28,600 --> 01:26:29,100
Several sounds.

1999
01:26:29,100 --> 01:26:29,400
Yes.

2000
01:26:29,400 --> 01:26:31,800
We only need one output buffer and we can mix all the sounds

2001
01:26:31,800 --> 01:26:34,600
ourselves, which I'll show you how to do later on changed her.

2002
01:26:34,600 --> 01:26:35,300
It's on a button.

2003
01:26:35,300 --> 01:26:36,700
Press the bug will resurface.

2004
01:26:37,200 --> 01:26:40,100
Know that bug will not resurfaced.

2005
01:26:40,400 --> 01:26:41,000
What you're seeing.

2006
01:26:41,000 --> 01:26:43,800
There is the fact that you cannot instantaneously change the hurts

2007
01:26:43,800 --> 01:26:47,600
like that and expect to not have a sound clip there.

2008
01:26:47,800 --> 01:26:51,000
Is two reasons, you will get that sound clip one is that you are

2009
01:26:51,000 --> 01:26:55,300
harshly changing the, the frequency right away and that will cause an

2010
01:26:55,300 --> 01:26:55,700
artifact.

2011
01:26:55,700 --> 01:26:59,300
But the more serious artifact is, you'll notice basically, what we

2012
01:26:59,300 --> 01:26:59,800
have here.

2013
01:27:00,200 --> 01:27:02,900
Is is the well, you know what?

2014
01:27:02,900 --> 01:27:04,100
This is going to be a long stream today.

2015
01:27:04,100 --> 01:27:06,400
Anyway, I think because we've got extra time.

2016
01:27:06,500 --> 01:27:08,700
I'm just going to go ahead and show you because that's a very good

2017
01:27:08,700 --> 01:27:09,300
question.

2018
01:27:09,500 --> 01:27:12,400
That's a very good point that basically, that you brought up and I

2019
01:27:12,400 --> 01:27:15,200
think if we explore it, it may be educational.

2020
01:27:15,200 --> 01:27:16,600
So let's go ahead and explore it.

2021
01:27:16,900 --> 01:27:20,300
What the person writing instead is they want to change the pitch based

2022
01:27:20,300 --> 01:27:23,600
on what the controller was doing whether you push the a button for

2023
01:27:23,600 --> 01:27:26,900
example, so what he was saying is for example, he wants to do if a

2024
01:27:26,900 --> 01:27:27,300
button

2025
01:27:28,400 --> 01:27:29,900
Right, then.

2026
01:27:29,900 --> 01:27:34,000
Basically this tone Hertz is going to change its going to change up to

2027
01:27:34,200 --> 01:27:38,100
something else like double that let's say 512 or something, right?

2028
01:27:38,100 --> 01:27:41,400
So we're going to go in here and we're going to set that to 512.

2029
01:27:41,600 --> 01:27:42,400
So that makes sense.

2030
01:27:42,400 --> 01:27:43,900
I think this is what the person was saying.

2031
01:27:44,300 --> 01:27:47,700
And so we kind of push that button we do that, right.

2032
01:27:54,300 --> 01:27:55,200
Why am I not hearing that?

2033
01:27:55,200 --> 01:27:56,100
What did I do wrong?

2034
01:27:56,200 --> 01:27:57,000
That is the a button.

2035
01:27:57,000 --> 01:27:57,600
Is it not?

2036
01:27:59,300 --> 01:28:03,900
Did I type that properly tone hurts 512?

2037
01:28:04,600 --> 01:28:09,000
Well, that was, that was not as dramatic as I hoped.

2038
01:28:09,000 --> 01:28:09,700
It would be.

2039
01:28:10,700 --> 01:28:12,700
I feel like that should have done it.

2040
01:28:12,700 --> 01:28:14,300
Sound output tone hurt, though.

2041
01:28:14,400 --> 01:28:15,000
Well, duh.

2042
01:28:15,600 --> 01:28:17,700
We have to recompute our period as well.

2043
01:28:18,700 --> 01:28:19,400
Hmm.

2044
01:28:19,800 --> 01:28:21,200
So, how do I want to do that?

2045
01:28:22,300 --> 01:28:24,200
This is not a particularly good way to do that.

2046
01:28:24,200 --> 01:28:27,400
I don't want to have to recompute all the dependent values every time

2047
01:28:27,400 --> 01:28:28,900
we should make that into a function or something.

2048
01:28:29,500 --> 01:28:31,300
But let's let's do it again here.

2049
01:28:35,600 --> 01:28:37,300
So, I don't know if you could hear that.

2050
01:28:37,300 --> 01:28:39,400
I'll run it one more time, so that you can kind of hear it.

2051
01:28:39,700 --> 01:28:43,800
When I push down the a button, you can hear the click that happens

2052
01:28:43,900 --> 01:28:45,600
just on the changeover, right?

2053
01:28:45,800 --> 01:28:48,500
And I assume that's what the person meant when they said that the bug

2054
01:28:48,500 --> 01:28:49,000
or services.

2055
01:28:49,000 --> 01:28:50,200
But that's not a bug.

2056
01:28:50,600 --> 01:28:53,200
I mean, it is a bug, but it's not a bug in our in our code that we

2057
01:28:53,200 --> 01:28:53,600
wrote.

2058
01:28:53,700 --> 01:28:55,300
It's a bug in this idea.

2059
01:28:55,700 --> 01:28:56,800
This doesn't work.

2060
01:28:56,800 --> 01:28:58,000
The reason that it doesn't work.

2061
01:28:58,000 --> 01:29:01,400
It's because you have to remember we re compute where we are in the

2062
01:29:01,400 --> 01:29:03,200
sine wave every time.

2063
01:29:03,400 --> 01:29:04,200
So if you look at how this

2064
01:29:04,300 --> 01:29:05,100
Works up here.

2065
01:29:05,300 --> 01:29:08,000
Basically, what we're doing is we're using the running sample index

2066
01:29:08,100 --> 01:29:11,400
and we're dividing by the wave period, every time.

2067
01:29:11,700 --> 01:29:14,200
That means our sound will only be continuous.

2068
01:29:14,300 --> 01:29:18,100
If wave period was continuous if wave periods.

2069
01:29:18,100 --> 01:29:20,600
Suddenly changes to something else.

2070
01:29:20,700 --> 01:29:24,800
We will have a sound glitch right at the point where it changed.

2071
01:29:24,900 --> 01:29:28,400
So what you actually would want to do if you were trying to change the

2072
01:29:28,400 --> 01:29:28,700
pitch?

2073
01:29:28,700 --> 01:29:33,400
Continuously is instead of storing running sample index, you actually

2074
01:29:33,400 --> 01:29:34,100
need to store.

2075
01:29:34,200 --> 01:29:37,500
Where you are in the sine wave, you need to store T sign.

2076
01:29:37,500 --> 01:29:40,600
Basically up here in win32 sound output.

2077
01:29:40,600 --> 01:29:44,300
And then what you would do is instead of computing, this value a new

2078
01:29:44,300 --> 01:29:50,000
every time basically you just add at the end, you know, something else

2079
01:29:50,400 --> 01:29:50,900
to it.

2080
01:29:51,000 --> 01:29:55,200
So basically we'd say sound output, T sine plus equals.

2081
01:29:55,200 --> 01:29:58,900
However far we want to go and how far we want to go.

2082
01:29:58,900 --> 01:29:59,700
Is basically

2083
01:30:00,000 --> 01:30:02,100
One samples Worth, right?

2084
01:30:02,100 --> 01:30:03,900
It's basically one.

2085
01:30:05,400 --> 01:30:09,200
Samples worth over that.

2086
01:30:09,200 --> 01:30:10,400
That period.

2087
01:30:10,500 --> 01:30:15,500
So that way just the increment is now going to change by the way Ferry

2088
01:30:15,500 --> 01:30:16,100
it right?

2089
01:30:16,200 --> 01:30:19,600
That is what we would actually want to do if you wanted to avoid the

2090
01:30:19,600 --> 01:30:20,200
glitch.

2091
01:30:20,300 --> 01:30:22,100
So our code was totally correct.

2092
01:30:22,200 --> 01:30:25,800
You were just doing something that is not that is going to produce a

2093
01:30:25,800 --> 01:30:29,400
glitch with the way that we chose to represent our sine wave, but the

2094
01:30:29,400 --> 01:30:33,200
buffer code is still valid and now we should be able to basically get

2095
01:30:33,200 --> 01:30:33,700
something.

2096
01:30:33,900 --> 01:30:34,100
Whoops.

2097
01:30:34,100 --> 01:30:35,100
We need to actually say

2098
01:30:35,300 --> 01:30:40,700
Sound output T sign here because we are now outputting without that t.

2099
01:30:40,800 --> 01:30:42,300
So we do that, right?

2100
01:30:43,800 --> 01:30:44,500
There we go.

2101
01:30:45,200 --> 01:30:49,100
And now we should be able to hear that no glitch anymore.

2102
01:30:49,300 --> 01:30:49,800
Right?

2103
01:30:50,500 --> 01:30:52,800
And so I hope you guys understand what was happening there.

2104
01:30:52,800 --> 01:30:56,200
I don't know if you do or not again, since it's a long stream.

2105
01:30:56,300 --> 01:30:59,500
I feel like it can't hurt just to solidify that in your heads a little

2106
01:30:59,500 --> 01:31:00,800
bit with a lovely.

2107
01:31:00,800 --> 01:31:03,300
One of these Microsoft Paint diagrams.

2108
01:31:03,300 --> 01:31:04,600
I think everyone loves them.

2109
01:31:04,700 --> 01:31:06,200
I think everyone knows they love them.

2110
01:31:06,300 --> 01:31:08,900
So I'm going to go ahead and just put this out here.

2111
01:31:09,600 --> 01:31:10,200
Okay.

2112
01:31:10,400 --> 01:31:11,200
Let's take a look.

2113
01:31:11,500 --> 01:31:12,200
Here we go.

2114
01:31:13,600 --> 01:31:17,400
So, if you think about what was happening, we had a sine wave at a

2115
01:31:17,400 --> 01:31:19,400
certain period that is the worst sine wave.

2116
01:31:19,400 --> 01:31:20,600
Probably anyone's ever seen.

2117
01:31:20,600 --> 01:31:22,100
But this is Microsoft Paint.

2118
01:31:22,400 --> 01:31:23,500
What do you want from me people?

2119
01:31:23,500 --> 01:31:24,700
What do you want?

2120
01:31:24,700 --> 01:31:27,300
And so from Peak to Peak right there?

2121
01:31:27,400 --> 01:31:32,000
Basically, that is the value that we're looking at that is the period

2122
01:31:32,100 --> 01:31:33,200
of the sine wave.

2123
01:31:33,200 --> 01:31:37,500
And we had a period that we were saying was, well.

2124
01:31:37,800 --> 01:31:40,000
Yeah man, this is so bad.

2125
01:31:40,000 --> 01:31:42,900
I really want, I really want to solve this.

2126
01:31:43,300 --> 01:31:44,600
It's got to be something.

2127
01:31:44,600 --> 01:31:45,700
We do pretty soon.

2128
01:31:45,700 --> 01:31:48,200
I got to get a better diagramming situation here better.

2129
01:31:48,500 --> 01:31:49,800
I got to get a better story.

2130
01:31:50,300 --> 01:31:50,900
All right.

2131
01:31:50,900 --> 01:31:54,500
Anyway, point being we basically have them to me.

2132
01:31:55,200 --> 01:31:59,300
We basically have a period here of our sine wave and what we were

2133
01:31:59,300 --> 01:32:03,400
doing before is we were just taking the absolute index.

2134
01:32:03,500 --> 01:32:07,100
So basically we have a buffer and the buffer is actually only this

2135
01:32:07,100 --> 01:32:08,000
big, right?

2136
01:32:08,200 --> 01:32:11,300
But we essentially retreating it as a giant linear buffer because

2137
01:32:11,300 --> 01:32:13,100
running sample Index, right?

2138
01:32:13,200 --> 01:32:19,000
Running sample index was essentially incrementing ad infinitum.

2139
01:32:19,000 --> 01:32:20,600
It's just getting bigger and bigger and bigger.

2140
01:32:20,800 --> 01:32:21,200
Right?

2141
01:32:21,300 --> 01:32:23,600
And we were modding it by the buffer size to figure out where we were

2142
01:32:23,600 --> 01:32:24,300
in the buffer size.

2143
01:32:24,300 --> 01:32:27,800
But we were just using this value directly to compute where we were in

2144
01:32:27,800 --> 01:32:28,600
the sine wave.

2145
01:32:28,600 --> 01:32:32,300
So, our position in the sine wave was also equal to running some

2146
01:32:32,400 --> 01:32:37,500
sample index, and we were just using the period as a divisor to map us

2147
01:32:37,500 --> 01:32:39,600
into where we should be in the same way.

2148
01:32:39,600 --> 01:32:42,700
What that essentially does is it means we are just direct mapping.

2149
01:32:43,200 --> 01:32:45,200
Our sine wave into this buffer.

2150
01:32:45,200 --> 01:32:46,900
It's a direct mapping, right?

2151
01:32:46,900 --> 01:32:51,100
That just basically fills fills the sine wave as we go into our giant

2152
01:32:51,100 --> 01:32:53,900
sort of virtual linear buffer and we were just kind of mapping it

2153
01:32:53,900 --> 01:32:55,000
circulate, right?

2154
01:32:55,300 --> 01:32:58,900
So what happens if you were to suddenly change the divisor because

2155
01:32:58,900 --> 01:32:59,800
there's a divisor here.

2156
01:33:00,000 --> 01:33:02,400
Dividing by the period of the sine right to do this.

2157
01:33:04,000 --> 01:33:06,700
If you suddenly change that divisor, right?

2158
01:33:06,700 --> 01:33:08,100
We were here in the sound wave.

2159
01:33:08,100 --> 01:33:10,500
Let's say what you wanted to do.

2160
01:33:10,500 --> 01:33:13,900
What you were trying to do is change the sign to a different period.

2161
01:33:13,900 --> 01:33:16,100
Can I make for the love of God?

2162
01:33:16,100 --> 01:33:16,400
People?

2163
01:33:16,400 --> 01:33:18,700
Can we make a bigger eraser?

2164
01:33:19,100 --> 01:33:19,400
Oh God.

2165
01:33:19,400 --> 01:33:23,600
This program is this is not this is not a good drawing program.

2166
01:33:23,600 --> 01:33:25,600
I need to figure out how to get a real drunk room in here.

2167
01:33:25,600 --> 01:33:25,900
Alright.

2168
01:33:25,900 --> 01:33:27,300
Anyway, what you going to do?

2169
01:33:27,900 --> 01:33:29,900
So if you wanted what you wanted to do was

2170
01:33:30,300 --> 01:33:32,400
What you're trying to do and you push that a button to make a nice

2171
01:33:32,400 --> 01:33:33,100
continuous tone.

2172
01:33:33,100 --> 01:33:36,800
That doesn't have a skip, is you were trying to do this, right?

2173
01:33:36,800 --> 01:33:40,000
You were trying to just at that point start oscillating, more

2174
01:33:40,000 --> 01:33:44,200
frequency frequently, but what you actually did is you essentially

2175
01:33:44,200 --> 01:33:47,500
just you had because you just change the period right out from under

2176
01:33:47,500 --> 01:33:47,800
it.

2177
01:33:47,900 --> 01:33:52,700
You can imagine there was basically two sine waves, one with one

2178
01:33:52,700 --> 01:33:56,100
period, one with the other, you have the slow period sine wave, right?

2179
01:33:56,100 --> 01:33:59,000
And then you had a fast period sine wave, right?

2180
01:33:59,100 --> 01:33:59,800
And what you did.

2181
01:34:00,000 --> 01:34:04,200
Instead instead of starting where you were and just changing the

2182
01:34:04,200 --> 01:34:06,700
frequency of oscillation, which is what we wanted.

2183
01:34:06,900 --> 01:34:11,200
You were taking wherever you were in the Stream and jumping right to

2184
01:34:11,200 --> 01:34:11,500
wear.

2185
01:34:11,500 --> 01:34:16,000
This other sine wave would have been at that point if it had been the

2186
01:34:16,000 --> 01:34:19,300
only sine wave that you were ever playing, that means you would

2187
01:34:19,300 --> 01:34:22,200
discontinuously jump from here to here.

2188
01:34:22,300 --> 01:34:24,500
And then start oscillating, right?

2189
01:34:24,500 --> 01:34:26,100
That causes the skip.

2190
01:34:26,600 --> 01:34:29,600
That is the skip because now you've got a discontinuity in your sine

2191
01:34:29,600 --> 01:34:29,800
wave.

2192
01:34:29,900 --> 01:34:34,400
And discontinuities sign sound like when you hear them, it's basically

2193
01:34:34,400 --> 01:34:37,500
a very high frequency because you have to imagine what that actually

2194
01:34:37,500 --> 01:34:42,300
turns into is a very high frequency Spike one little tiny sine wave

2195
01:34:42,300 --> 01:34:45,200
that moved you up to their essentially it's a very high frequency

2196
01:34:45,200 --> 01:34:45,800
Spike.

2197
01:34:45,900 --> 01:34:48,300
So if you looked at it on a graphic equalizer, you know, you'd be

2198
01:34:48,300 --> 01:34:51,000
getting here is your normal tone that you were trying to get.

2199
01:34:51,000 --> 01:34:53,600
And there's this really high frequency Spike here, that just kind of

2200
01:34:53,600 --> 01:34:56,600
quickly jumped in to make you move and that's no good.

2201
01:34:57,000 --> 01:34:57,700
So you don't want that.

2202
01:34:57,700 --> 01:34:58,300
That's bad.

2203
01:34:59,600 --> 01:35:00,700
Bad, bad bad bad.

2204
01:35:01,600 --> 01:35:02,800
So that's what's happening there.

2205
01:35:02,800 --> 01:35:05,900
And that's why I said what you have to do is you have to track where

2206
01:35:05,900 --> 01:35:10,200
you were in the sine wave, because then you can just accelerate that

2207
01:35:10,700 --> 01:35:13,700
tracking and you'll always stay, you'll always know that you were

2208
01:35:14,100 --> 01:35:15,400
starting from the same position.

2209
01:35:15,400 --> 01:35:19,400
You can change the pitch, all you want basically and we could, you

2210
01:35:19,400 --> 01:35:21,500
know, we could go nuts with that obviously, right?

2211
01:35:21,500 --> 01:35:24,000
You could, you could map the pitch if you wanted to.

2212
01:35:24,800 --> 01:35:27,200
You could map the pitch to one of the sticks, right?

2213
01:35:27,200 --> 01:35:29,300
You could say, oh, you know, the

2214
01:35:29,400 --> 01:35:34,600
Which is something like the the stick X or something.

2215
01:35:34,600 --> 01:35:37,100
Let's say right or the stick, why, let's do stick, why?

2216
01:35:37,700 --> 01:35:42,300
So, you know, we could say, okay, there hurts is something like the

2217
01:35:42,300 --> 01:35:47,300
stick y, divided by whatever the stick.

2218
01:35:47,300 --> 01:35:48,800
Why can possibly be?

2219
01:35:48,800 --> 01:35:51,600
So that's, you know, 32,000 or something like this.

2220
01:35:52,500 --> 01:35:57,200
It's a it's 65536 divided by 2, but I'm just going to say stick /

2221
01:35:57,200 --> 01:35:58,000
30,000.

2222
01:35:58,000 --> 01:35:59,200
So there's a change.

2223
01:35:59,400 --> 01:35:59,600
Those two.

2224
01:36:00,000 --> 01:36:04,200
But as we do float math, to get basically a value between negative 1

2225
01:36:04,200 --> 01:36:08,800
and 1 here and will basically say that it's, it's 512 is the tone

2226
01:36:08,800 --> 01:36:13,300
hurts plus some value that more than that.

2227
01:36:13,300 --> 01:36:19,200
So we can we can do 256 up or down times that and then we'll cast it

2228
01:36:19,200 --> 01:36:21,300
back to an integer.

2229
01:36:21,300 --> 01:36:22,500
I think that's what it was.

2230
01:36:22,600 --> 01:36:24,300
I don't remember what that actual value was.

2231
01:36:24,300 --> 01:36:25,200
What was that value?

2232
01:36:25,200 --> 01:36:28,600
Let's take a look at what we actually Define it to be.

2233
01:36:28,600 --> 01:36:29,400
It was an integer.

2234
01:36:29,400 --> 01:36:29,800
So we'll know.

2235
01:36:30,000 --> 01:36:31,000
Look at that, back to ensure.

2236
01:36:31,000 --> 01:36:34,900
So we could do something like this and this will actually allow us to

2237
01:36:34,900 --> 01:36:36,100
go ahead and control it.

2238
01:36:36,100 --> 01:36:37,700
I believe with the stick.

2239
01:36:38,400 --> 01:36:39,300
Let's take a look here.

2240
01:36:40,800 --> 01:36:41,900
If that actually works.

2241
01:36:47,300 --> 01:36:49,400
Which stick that I do actually?

2242
01:36:52,600 --> 01:36:53,400
That's work.

2243
01:36:53,700 --> 01:36:54,200
What am I doing?

2244
01:36:54,200 --> 01:36:55,800
Oh, the a button has to be down.

2245
01:36:56,000 --> 01:36:57,100
If you don't actually want that.

2246
01:36:57,100 --> 01:36:58,700
Let's get let's just get rid of that a button check.

2247
01:36:58,700 --> 01:37:01,200
I don't want to have to hold that down while I do the stick thing.

2248
01:37:08,000 --> 01:37:11,700
Right, make sense.

2249
01:37:13,600 --> 01:37:16,100
So, the other thing that we might want to do now is we might want to

2250
01:37:16,100 --> 01:37:18,300
get that latency down because now we've actually attach something to

2251
01:37:18,300 --> 01:37:19,000
controller.

2252
01:37:19,200 --> 01:37:23,000
And so what we probably want to do is when we fill that buffer, when

2253
01:37:23,000 --> 01:37:26,900
we do the global fill buffer, we probably don't want to fill the sound

2254
01:37:26,900 --> 01:37:28,700
buffer, quite so far.

2255
01:37:29,100 --> 01:37:33,000
So what we would want to do here is we want to introduce another

2256
01:37:33,300 --> 01:37:33,800
variable.

2257
01:37:33,800 --> 01:37:37,900
That's basically saying where we would actually like to be relative to

2258
01:37:37,900 --> 01:37:38,900
that play cursor.

2259
01:37:39,200 --> 01:37:42,500
So basically what we can say is we can say basically our latency.

2260
01:37:43,000 --> 01:37:43,900
Sample count.

2261
01:37:44,000 --> 01:37:47,300
Let's say how many samples ahead of the play cursor.

2262
01:37:47,400 --> 01:37:50,100
We would like to be in general.

2263
01:37:50,200 --> 01:37:50,800
Right?

2264
01:37:51,200 --> 01:37:54,900
And what we can do is we can introduce that value in a way that makes

2265
01:37:54,900 --> 01:37:55,800
some sense to us.

2266
01:37:56,000 --> 01:37:59,700
We can say that the sound output latency sample count is basically

2267
01:37:59,700 --> 01:38:02,400
going to be equal to the samples per second.

2268
01:38:02,400 --> 01:38:04,700
Let's say divided by 60.

2269
01:38:04,700 --> 01:38:08,000
So 1/60 of a second is how far ahead we want want to be.

2270
01:38:08,000 --> 01:38:10,100
Let's say that's might be a little aggressive.

2271
01:38:10,200 --> 01:38:12,300
Let's do let's do a fifteenth of a second.

2272
01:38:12,400 --> 01:38:12,500
If

2273
01:38:12,600 --> 01:38:15,900
Ventually, we probably want that to be high much, much higher like a

2274
01:38:15,900 --> 01:38:18,500
60th of a second, so that we're constantly really good.

2275
01:38:18,500 --> 01:38:21,000
But then what we might get dropouts a week, so we're gonna have to do

2276
01:38:21,000 --> 01:38:24,600
a little more stuff when we actually get down to it and tighten the

2277
01:38:24,600 --> 01:38:25,600
ratchet on the sound code.

2278
01:38:25,600 --> 01:38:26,900
But let's let's do this now.

2279
01:38:26,900 --> 01:38:29,300
So that if you're running at 15 frames per second or higher, you

2280
01:38:29,300 --> 01:38:30,500
wouldn't get any dropouts.

2281
01:38:30,900 --> 01:38:35,400
So, then when we go in here and we actually compute those values, what

2282
01:38:35,400 --> 01:38:38,900
will actually do is say that the play cursor itself.

2283
01:38:39,400 --> 01:38:42,500
What we're trying the place that we're trying to write to is not going

2284
01:38:42,500 --> 01:38:42,600
to

2285
01:38:42,700 --> 01:38:47,900
Be that play cursor instead that value is going to be something else.

2286
01:38:47,900 --> 01:38:54,000
It's going to let's say B, you know, the target cursor or something

2287
01:38:54,000 --> 01:38:54,600
like that.

2288
01:38:54,600 --> 01:38:57,500
And that Target cursor is going to be the play cursor.

2289
01:38:58,200 --> 01:38:59,800
We want to we want to write to

2290
01:39:00,100 --> 01:39:04,700
At least the play cursor plus however much the the latency is going to

2291
01:39:04,700 --> 01:39:05,100
be.

2292
01:39:05,600 --> 01:39:07,200
So what would, what did we say?

2293
01:39:07,200 --> 01:39:09,000
That was that was sound.

2294
01:39:09,000 --> 01:39:12,300
That's a that's this here.

2295
01:39:12,600 --> 01:39:17,600
That is the latency sample count.

2296
01:39:18,900 --> 01:39:20,500
So base, we're going to take wherever it's playing.

2297
01:39:20,700 --> 01:39:23,200
We're going to say, we want to be a fifteenth of a second ahead of

2298
01:39:23,200 --> 01:39:24,900
where it's playing all the time.

2299
01:39:25,000 --> 01:39:25,900
That's our goal.

2300
01:39:26,000 --> 01:39:27,800
And then instead of play cursor.

2301
01:39:27,900 --> 01:39:30,800
We're just going to change that to Target cursor, right?

2302
01:39:30,800 --> 01:39:31,300
We're just going to.

2303
01:39:31,300 --> 01:39:34,000
We're just going to look at the Target cursor and say, that's what

2304
01:39:34,000 --> 01:39:37,100
we're writing to not the play Chris or anymore make sense.

2305
01:39:37,300 --> 01:39:38,400
Hopefully that makes some sense.

2306
01:39:38,700 --> 01:39:41,000
And then what we do when we initially kick off.

2307
01:39:41,000 --> 01:39:43,700
Our buffer is in, we kick off our buffer.

2308
01:39:43,700 --> 01:39:45,200
Instead of writing the whole buffer.

2309
01:39:45,500 --> 01:39:48,000
We will actually write the latency.

2310
01:39:50,200 --> 01:39:54,500
Count times the B first bites for sample again, will actually write

2311
01:39:54,500 --> 01:39:58,000
that many bytes ahead so that we start off head as well.

2312
01:39:58,100 --> 01:39:59,500
And we just try to stay ahead.

2313
01:40:03,000 --> 01:40:04,100
We're still getting a little.

2314
01:40:07,400 --> 01:40:09,000
Getting a little bit of a quip there.

2315
01:40:15,200 --> 01:40:16,800
You can see we're right on target now.

2316
01:40:17,400 --> 01:40:20,600
So, basically, I don't know if I introduced a bug by quickly doing

2317
01:40:20,600 --> 01:40:24,900
that or not, but it could also be that that's just not enough ahead of

2318
01:40:24,900 --> 01:40:26,400
the play cursor, to make it actually work.

2319
01:40:26,400 --> 01:40:26,900
Okay.

2320
01:40:27,400 --> 01:40:28,500
I'm not sure which one that is.

2321
01:40:28,500 --> 01:40:33,200
Let's make sure that this was sort of at least roughly.

2322
01:40:33,200 --> 01:40:35,000
Correct if that makes sense.

2323
01:40:35,500 --> 01:40:36,600
Do.

2324
01:40:38,200 --> 01:40:39,800
This is probably not the way to introduce that.

2325
01:40:39,800 --> 01:40:42,600
Code was to Blitz it out like that, but I felt like we

2326
01:40:42,700 --> 01:40:44,500
Kind of going that direction.

2327
01:40:44,500 --> 01:40:45,100
So we might as well.

2328
01:40:45,100 --> 01:40:46,400
So let's double check here.

2329
01:40:46,700 --> 01:40:50,200
Let's say that let's let's double check and make sure that if we just

2330
01:40:50,200 --> 01:40:53,100
say that, it's the latency sample count, is the samples per second.

2331
01:40:53,100 --> 01:40:55,300
We should be back to where we were before.

2332
01:40:56,900 --> 01:40:57,300
So there you go.

2333
01:40:57,300 --> 01:41:01,600
So, I did introduce a bug because basically, that that shouldn't

2334
01:41:01,600 --> 01:41:02,800
change anything, right?

2335
01:41:02,900 --> 01:41:03,900
Oh, duh.

2336
01:41:04,000 --> 01:41:04,400
Yeah.

2337
01:41:04,500 --> 01:41:07,200
I was even thinking this when I wrote it one of the problems again.

2338
01:41:07,200 --> 01:41:10,100
I say this a lot on the stream, I think about things but then my mind

2339
01:41:10,100 --> 01:41:12,500
is occupied with explaining and it forgets the things that supposed to

2340
01:41:12,700 --> 01:41:15,900
Do in fact, we had that just just yesterday with the unlock as well.

2341
01:41:15,900 --> 01:41:18,000
Remember, I said we've got to unlock that buffer.

2342
01:41:18,100 --> 01:41:19,900
And then I never remembered unlock the buffer.

2343
01:41:19,900 --> 01:41:22,300
So, so the problem here is the target cursor.

2344
01:41:22,300 --> 01:41:24,700
When we do that thing, it could wrap around.

2345
01:41:24,800 --> 01:41:27,700
So when we get to the end of the buffer, we tart crust will be past

2346
01:41:27,700 --> 01:41:28,500
the end of the buffer.

2347
01:41:28,600 --> 01:41:30,600
And we actually need to be back around.

2348
01:41:30,600 --> 01:41:33,400
So, basically all we need to do here is do that mod.

2349
01:41:33,400 --> 01:41:37,000
Again, we need to make sure that we're always in range of the buffer,

2350
01:41:37,400 --> 01:41:39,800
when we actually asked a lock that that's that's it.

2351
01:41:40,400 --> 01:41:42,500
That's the only pretty sure that's the only thing I've got.

2352
01:41:42,700 --> 01:41:46,200
That take this code, should not be too hard to add in and I don't

2353
01:41:46,200 --> 01:41:46,500
think it is.

2354
01:41:46,500 --> 01:41:48,000
So, basically, just need to do that.

2355
01:41:48,000 --> 01:41:50,700
That move it, move it out to where you think is going to be map it

2356
01:41:50,700 --> 01:41:53,900
back into the buffer and then treat that like the play cursor and now

2357
01:41:53,900 --> 01:41:55,600
it should, it should be correct.

2358
01:41:55,600 --> 01:41:58,000
Its I've gotten a semicolon there.

2359
01:41:58,200 --> 01:41:58,800
All right.

2360
01:42:02,600 --> 01:42:06,200
yeah, and so now we can go ahead and go back and drop that latency

2361
01:42:06,600 --> 01:42:10,700
back down to something aggressive like 15, and now we've got, you

2362
01:42:10,700 --> 01:42:16,000
know, not super low latency sound output, but it appears, you know,

2363
01:42:16,000 --> 01:42:18,300
like to me, for example, you can see

2364
01:42:24,300 --> 01:42:24,900
Right.

2365
01:42:25,500 --> 01:42:26,200
So there you go.

2366
01:42:28,400 --> 01:42:28,800
So there you go.

2367
01:42:30,600 --> 01:42:33,000
Now we've got about, you know, I figured this would be a two hour

2368
01:42:33,000 --> 01:42:33,300
stream.

2369
01:42:33,300 --> 01:42:34,400
We've still got 20 minutes.

2370
01:42:34,400 --> 01:42:35,700
Let me cover a couple of things.

2371
01:42:35,700 --> 01:42:37,400
Well, I'll double-check with the thing for see, if there's any

2372
01:42:37,400 --> 01:42:38,200
questions here.

2373
01:42:40,300 --> 01:42:41,200
Let's take a look here.

2374
01:42:42,900 --> 01:42:43,200
Hmm.

2375
01:42:47,100 --> 01:42:48,600
Let's see.

2376
01:42:50,400 --> 01:42:52,500
If we can live with a slightly less accurate sign, it can be

2377
01:42:52,500 --> 01:42:53,600
approximate with polynomials.

2378
01:42:53,600 --> 01:42:55,100
We don't actually need to do that.

2379
01:42:56,800 --> 01:42:58,500
Well, I mean, we do actually kind of need to do that.

2380
01:42:58,500 --> 01:43:01,000
You'll see what we'll end up doing is, will actually write something

2381
01:43:01,000 --> 01:43:07,200
that generates the sign using the sse2 instructions will be totally

2382
01:43:07,200 --> 01:43:07,400
fine.

2383
01:43:07,400 --> 01:43:09,400
And we will, we won't really be approximating.

2384
01:43:09,400 --> 01:43:11,700
It will actually be Computing it to floating Point Precision probably

2385
01:43:11,700 --> 01:43:12,500
most of the time.

2386
01:43:12,600 --> 01:43:14,300
Although we could do a less accurate one as well.

2387
01:43:14,800 --> 01:43:17,800
But because basically you have to remember approximating something

2388
01:43:17,900 --> 01:43:20,100
actually ends up being exact as far as

2389
01:43:20,200 --> 01:43:21,200
Computers concerned.

2390
01:43:21,300 --> 01:43:24,300
If you can do it out to the number of bits that are in the actual

2391
01:43:24,300 --> 01:43:25,200
floating point value.

2392
01:43:25,300 --> 01:43:26,700
Because, yeah, that's not exact.

2393
01:43:26,700 --> 01:43:28,100
But neither is the floating point value.

2394
01:43:28,100 --> 01:43:30,300
The floating point value can never represent even pie.

2395
01:43:30,300 --> 01:43:30,500
Right?

2396
01:43:30,500 --> 01:43:31,900
Pisan infinitely repeating.

2397
01:43:32,500 --> 01:43:34,900
It's got an infinite number of digits, right?

2398
01:43:35,300 --> 01:43:38,600
It just keeps going and so you can never accurately represent things

2399
01:43:38,600 --> 01:43:39,200
in floating point.

2400
01:43:39,200 --> 01:43:42,000
So we only have to when we actually compute sign, we only have to

2401
01:43:42,000 --> 01:43:44,800
compute it out to the number of points that the mantissa has in the

2402
01:43:44,800 --> 01:43:48,800
first place, which is only like 24, I think, 24 bits.

2403
01:43:52,900 --> 01:43:53,600
I don't know if that's actually true.

2404
01:43:53,600 --> 01:43:54,900
That might be more than 24 bits.

2405
01:43:54,900 --> 01:43:56,100
How many bits is the mantissa?

2406
01:43:56,200 --> 01:43:57,100
The 24 bits.

2407
01:43:57,200 --> 01:43:57,500
Some reason.

2408
01:43:57,500 --> 01:43:58,600
I think it's 24 bits.

2409
01:43:58,800 --> 01:43:59,700
Let's take a look.

2410
01:44:00,500 --> 01:44:03,800
Floating-point, 32-bit mantissa.

2411
01:44:06,400 --> 01:44:07,800
I think it's 24 bits.

2412
01:44:07,800 --> 01:44:08,600
Let's take a look.

2413
01:44:11,800 --> 01:44:19,000
Man, this a say what the spec spec should say, here it is.

2414
01:44:20,100 --> 01:44:23,600
Let's take a look internal representation.

2415
01:44:25,200 --> 01:44:27,600
Okay, so it looks like it's actually 23.

2416
01:44:27,800 --> 01:44:30,400
So it's not actually 24 bits.

2417
01:44:31,300 --> 01:44:34,000
Oh, but it's well as 24 because of the implicit one, I guess is what

2418
01:44:34,000 --> 01:44:34,400
they're saying.

2419
01:44:34,400 --> 01:44:34,900
I don't know.

2420
01:44:36,000 --> 01:44:36,700
So there you go.

2421
01:44:37,500 --> 01:44:37,900
There you go.

2422
01:44:37,900 --> 01:44:39,000
That's the table right there.

2423
01:44:39,200 --> 01:44:40,000
And in W.

2424
01:44:40,000 --> 01:44:46,300
Basically, you get you get double that right plus a little more little

2425
01:44:46,300 --> 01:44:49,400
more than double that because they assign less to the exponent

2426
01:44:49,400 --> 01:44:50,100
proportionally.

2427
01:44:50,600 --> 01:44:54,700
Anyway, yeah, not really important right now, but point but point

2428
01:44:54,700 --> 01:44:55,000
being

2429
01:44:58,400 --> 01:44:59,800
Let's see, okay.

2430
01:45:01,500 --> 01:45:03,800
What about lead time between play cursor?

2431
01:45:03,800 --> 01:45:05,100
And B to lock?

2432
01:45:07,300 --> 01:45:07,800
Sorry, not sure.

2433
01:45:07,800 --> 01:45:08,700
I understand that question.

2434
01:45:08,800 --> 01:45:10,000
Well, the art and audio for the game.

2435
01:45:10,000 --> 01:45:11,300
Be released into the public domain.

2436
01:45:11,300 --> 01:45:13,000
No, not for a while.

2437
01:45:13,000 --> 01:45:16,100
Anyway, do we get them for paying now while we are following along?

2438
01:45:16,100 --> 01:45:18,100
Yes, all of the art.

2439
01:45:18,100 --> 01:45:21,200
I mean, basically the game you'll get access to the full game if you

2440
01:45:21,200 --> 01:45:21,800
pre-order.

2441
01:45:22,000 --> 01:45:26,600
So basically you'll get all the art resources to play the game because

2442
01:45:26,600 --> 01:45:28,600
they're actually playable versions of the game released.

2443
01:45:28,700 --> 01:45:29,800
Once we actually have it up.

2444
01:45:30,000 --> 01:45:31,700
And running and those will come with the art.

2445
01:45:31,700 --> 01:45:33,600
So if you're following along at home with the code, you will also be

2446
01:45:33,600 --> 01:45:37,600
able to load the art from the game builds that ship because people

2447
01:45:37,600 --> 01:45:39,200
will start actually playing the game build to have.

2448
01:45:39,200 --> 01:45:40,600
You don't even necessarily follow with the code.

2449
01:45:40,600 --> 01:45:42,900
And so, yes, that aren't will come with that, but it will not be

2450
01:45:42,900 --> 01:45:44,100
released into the public domain.

2451
01:45:45,200 --> 01:45:47,700
If it does, it may eventually get release in the public domain, but it

2452
01:45:47,700 --> 01:45:51,000
won't necessarily be coincident with the code being released.

2453
01:45:51,000 --> 01:45:54,200
The code will definitely be released in the public domain and it will

2454
01:45:54,200 --> 01:45:56,600
be released, presumably sooner.

2455
01:45:57,000 --> 01:45:58,900
If the artwork to be later.

2456
01:46:00,400 --> 01:46:01,200
So that's it.

2457
01:46:02,500 --> 01:46:03,500
What is going on here?

2458
01:46:04,500 --> 01:46:05,000
Okay.

2459
01:46:05,600 --> 01:46:06,200
Alright.

2460
01:46:06,800 --> 01:46:08,800
Let's go back to the chat.

2461
01:46:12,800 --> 01:46:14,000
Okay.

2462
01:46:21,100 --> 01:46:23,800
Is it a good idea to use fixed Point math for games that require

2463
01:46:23,800 --> 01:46:26,500
deterministic simulation for multiplayer, or is it actually feasible

2464
01:46:26,500 --> 01:46:29,000
to get consistent results with floating Point math across different

2465
01:46:29,000 --> 01:46:29,400
systems.

2466
01:46:30,200 --> 01:46:31,200
It's a good question.

2467
01:46:31,300 --> 01:46:32,600
There's people who've done it.

2468
01:46:32,600 --> 01:46:35,400
I think Bungie actually did it that way.

2469
01:46:36,600 --> 01:46:40,300
Basically, what I would say is it is entirely possible to use floating

2470
01:46:40,300 --> 01:46:43,200
Point values to get determinism because floating point is very

2471
01:46:43,200 --> 01:46:48,300
rigorously defined and most processors have to do it specifically in a

2472
01:46:48,300 --> 01:46:49,300
particular way and all that.

2473
01:46:50,000 --> 01:46:54,700
But there's a really huge problem that you run into and that is the

2474
01:46:54,700 --> 01:47:00,200
optimizer floating Point operations won't come out to equal the same

2475
01:47:00,200 --> 01:47:05,500
values if the optimizer rearranges the code because let's say for

2476
01:47:05,500 --> 01:47:08,200
example, just to in this is not very realistic, but I'm just giving

2477
01:47:08,200 --> 01:47:13,600
you a very trivial example, let's say that I have, you know, a couple

2478
01:47:13,600 --> 01:47:18,100
of values and a couple operations between them, obviously math can be

2479
01:47:18,100 --> 01:47:19,200
rearranged in different ways.

2480
01:47:19,200 --> 01:47:19,700
I can do it.

2481
01:47:19,900 --> 01:47:23,400
First, I can do a divide s that sort of thing, depending on what's

2482
01:47:23,400 --> 01:47:25,100
happening on the platform.

2483
01:47:25,500 --> 01:47:29,900
You may end up in a circumstance where you get a different orders of

2484
01:47:29,900 --> 01:47:32,300
operations happening, which produce different results because of

2485
01:47:32,300 --> 01:47:34,500
rounding, the floating Point values have to get rounded.

2486
01:47:34,500 --> 01:47:38,600
Obviously, because when you do floating Point math, you end up with a

2487
01:47:38,600 --> 01:47:41,600
number that's more precise and you can shove back into the 32 bits.

2488
01:47:41,800 --> 01:47:45,200
So, you basically have to round that last bit, one way, or the other.

2489
01:47:45,600 --> 01:47:47,600
And so if you do the operation of the episode, you can get different

2490
01:47:47,600 --> 01:47:47,800
things.

2491
01:47:47,900 --> 01:47:49,600
There's also a thing called operator, whew,

2492
01:47:49,800 --> 01:47:53,900
Asian which is when like let's say one platform has a multiply add.

2493
01:47:54,000 --> 01:47:56,500
So a single instruction that is a multiply and add together.

2494
01:47:56,700 --> 01:47:59,700
And then another platform doesn't well up in.

2495
01:48:00,000 --> 01:48:03,600
It has a single multiply add could do it at higher Precision than one

2496
01:48:03,600 --> 01:48:05,200
that has to do a multiply round then.

2497
01:48:05,200 --> 01:48:05,700
Add.

2498
01:48:05,900 --> 01:48:07,200
Right because that's the store the value back.

2499
01:48:07,200 --> 01:48:08,500
It's got to do that round.

2500
01:48:08,500 --> 01:48:12,300
So it'll do multiply round and round instead of multiply add round.

2501
01:48:12,500 --> 01:48:13,500
And that's a problem too.

2502
01:48:14,000 --> 01:48:16,300
So this is a huge problem.

2503
01:48:16,600 --> 01:48:20,000
So could fix point B, and answer to that, it could

2504
01:48:22,300 --> 01:48:22,900
I don't know.

2505
01:48:22,900 --> 01:48:23,500
I mean.

2506
01:48:24,900 --> 01:48:27,300
It depends how you want to set up your multiplayer architecture.

2507
01:48:27,400 --> 01:48:29,000
I am not an expert at such things.

2508
01:48:29,300 --> 01:48:32,000
I think different people will have different arguments about how you

2509
01:48:32,000 --> 01:48:35,200
shouldn't shouldn't go about structuring code that way, but it's

2510
01:48:35,200 --> 01:48:38,700
something to be aware of certainly, it's a good question and it does

2511
01:48:38,700 --> 01:48:41,100
have ramifications is really the answer.

2512
01:48:41,100 --> 01:48:44,300
I can give you and different people choose to attack that problem,

2513
01:48:44,300 --> 01:48:44,900
different ways.

2514
01:48:49,000 --> 01:48:50,800
If someone is just Bull and Summer, She's rule 32.

2515
01:48:50,800 --> 01:48:51,200
Mostly.

2516
01:48:51,200 --> 01:48:52,600
I was because I was on the stream, really?

2517
01:48:52,600 --> 01:48:53,800
I don't ever want pool.

2518
01:48:54,100 --> 01:48:56,800
So basically, we can actually go in here and just replace Loops.

2519
01:48:56,900 --> 01:48:58,200
We can just replace Brule with rule.

2520
01:48:58,200 --> 01:48:58,600
32.

2521
01:48:58,600 --> 01:49:00,200
I don't ever really want fool.

2522
01:49:00,900 --> 01:49:03,500
If I don't, I don't ever use Blu in my own code.

2523
01:49:03,500 --> 01:49:06,500
I was doing that for a while because of the stream, but I never

2524
01:49:06,500 --> 01:49:11,100
actually do that in real life so we can we can just get rid of that

2525
01:49:11,100 --> 01:49:11,700
entirely.

2526
01:49:11,800 --> 01:49:14,600
You'll never see me type of pool again, unless I forget again that I'm

2527
01:49:14,600 --> 01:49:15,800
supposed to be doing code my way.

2528
01:49:15,800 --> 01:49:16,600
Now, not like the

2529
01:49:16,700 --> 01:49:17,400
Courtesy stream.

2530
01:49:21,400 --> 01:49:22,600
Let's see.

2531
01:49:22,600 --> 01:49:23,800
There is a red volume slider, right?

2532
01:49:23,800 --> 01:49:25,000
On the OBS main window.

2533
01:49:25,000 --> 01:49:25,500
Okay, cool.

2534
01:49:25,500 --> 01:49:27,600
I will, I will go investigate that after we're done.

2535
01:49:27,600 --> 01:49:28,100
Thank you.

2536
01:49:29,200 --> 01:49:30,100
Let's see.

2537
01:49:31,200 --> 01:49:34,400
Are you going to use ET W de la context which is for the game.

2538
01:49:35,000 --> 01:49:36,100
That is a funny joke.

2539
01:49:36,400 --> 01:49:38,600
No, because it's insane.

2540
01:49:39,500 --> 01:49:41,200
It's such an awful API.

2541
01:49:43,200 --> 01:49:43,600
Is this.

2542
01:49:43,600 --> 01:49:45,900
The audio API will be using in the final version of the game.

2543
01:49:45,900 --> 01:49:46,500
Yes.

2544
01:49:46,800 --> 01:49:50,000
We direct sound is perfectly usable to ship games.

2545
01:49:50,300 --> 01:49:53,400
It's pretty reliable and it runs on just everything you can run on

2546
01:49:53,400 --> 01:49:54,000
Windows XP.

2547
01:49:54,000 --> 01:49:54,700
It'll work.

2548
01:49:55,100 --> 01:49:56,600
So we probably will ship the game on this.

2549
01:49:56,600 --> 01:49:58,200
We don't really need anything else.

2550
01:49:59,000 --> 01:49:59,600
I don't think.

2551
01:50:01,900 --> 01:50:02,800
Giving directions actually.

2552
01:50:02,800 --> 01:50:03,500
Common interfaces.

2553
01:50:03,500 --> 01:50:06,400
Is it a safe thing to call in the interfaces without going through the

2554
01:50:06,400 --> 01:50:08,800
cam layer, especially without even initializing?

2555
01:50:08,800 --> 01:50:09,400
Calm?

2556
01:50:09,500 --> 01:50:10,000
Yes.

2557
01:50:10,300 --> 01:50:13,600
It's the direct sound create call does the initialization for you?

2558
01:50:15,300 --> 01:50:16,800
Try paint.net for drawing.

2559
01:50:17,000 --> 01:50:17,400
Okay.

2560
01:50:17,400 --> 01:50:20,200
I will let's see.

2561
01:50:26,800 --> 01:50:28,400
Target cursor, doesn't wrap the buffer size.

2562
01:50:28,400 --> 01:50:28,600
Yes.

2563
01:50:28,600 --> 01:50:31,400
Whoever Caboose 2311 you were right on target there.

2564
01:50:34,500 --> 01:50:36,200
Let's see.

2565
01:50:36,300 --> 01:50:38,200
Let's see.

2566
01:50:44,400 --> 01:50:47,400
I think that's everything.

2567
01:50:47,900 --> 01:50:49,500
Can we do an episode on emacs any techniques?

2568
01:50:49,500 --> 01:50:51,700
Yes, we will do that.

2569
01:50:51,700 --> 01:50:52,900
That's already on my list.

2570
01:50:53,700 --> 01:50:55,000
We will absolutely do that.

2571
01:50:57,300 --> 01:50:59,500
Alright, we've got 10 minutes left now.

2572
01:51:00,200 --> 01:51:06,000
So I am going to go ahead and talk about talk about basically.

2573
01:51:06,200 --> 01:51:07,200
Let's see here.

2574
01:51:07,500 --> 01:51:12,000
One more thing, two more things.

2575
01:51:12,400 --> 01:51:14,300
Two more things.

2576
01:51:14,300 --> 01:51:14,700
Yeah.

2577
01:51:14,700 --> 01:51:21,900
So 2/3, know we've got three more things that I want to talk about on

2578
01:51:21,900 --> 01:51:23,000
the stream real quick.

2579
01:51:23,100 --> 01:51:25,100
Just real quick, really simple stuff.

2580
01:51:25,200 --> 01:51:27,000
Should not take any time at all.

2581
01:51:27,100 --> 01:51:28,400
We've got 10 minutes left.

2582
01:51:28,400 --> 01:51:29,900
So I'm just going to go ahead and cover the

2583
01:51:30,000 --> 01:51:32,900
Those will get them in here and I can cross them off my list of things

2584
01:51:32,900 --> 01:51:33,900
to talk about.

2585
01:51:34,100 --> 01:51:36,100
So, apparently, our direct input.

2586
01:51:36,100 --> 01:51:37,500
I mean, our xinput stuff.

2587
01:51:37,500 --> 01:51:39,300
There's even another Library.

2588
01:51:39,300 --> 01:51:42,300
People were saying was, sometimes the only one that was on their

2589
01:51:42,300 --> 01:51:42,900
machine.

2590
01:51:43,300 --> 01:51:46,000
Basically, it was called X input.

2591
01:51:46,400 --> 01:51:46,900
What is it?

2592
01:51:46,900 --> 01:51:47,500
114?

2593
01:51:48,600 --> 01:51:49,600
I don't even remember what let's.

2594
01:51:49,600 --> 01:51:51,700
Let's go ahead and take this is ridiculous.

2595
01:51:51,700 --> 01:51:56,400
You'll see why it's ridiculous as X and put Library versions.

2596
01:51:56,400 --> 01:51:57,900
Let's see if we can get a thing here.

2597
01:51:59,600 --> 01:52:00,200
All right.

2598
01:52:00,600 --> 01:52:02,300
So there's xinput 1.4.

2599
01:52:02,700 --> 01:52:07,200
There's egg put 1.3, and there's also xinput 9.10.

2600
01:52:08,900 --> 01:52:09,700
I am not kidding.

2601
01:52:09,700 --> 01:52:13,100
You ladies and gentlemen, those are the versions of X input that they

2602
01:52:13,100 --> 01:52:13,600
shipped.

2603
01:52:14,600 --> 01:52:17,800
That is the way Windows goes nowadays.

2604
01:52:17,800 --> 01:52:19,900
It's absolutely ridiculous.

2605
01:52:20,400 --> 01:52:21,500
But that is how it works.

2606
01:52:21,800 --> 01:52:24,300
And basically some people said that only that one was available

2607
01:52:24,300 --> 01:52:25,900
sometimes on certain machines.

2608
01:52:26,200 --> 01:52:29,200
And so what we'd like to do here is just further explode.

2609
01:52:29,700 --> 01:52:36,700
Our set of checks and basically say well, okay, excuse me.

2610
01:52:37,200 --> 01:52:39,700
Let's try and load that one as well.

2611
01:52:39,700 --> 01:52:39,800
Now.

2612
01:52:39,800 --> 01:52:42,800
I'm not sure what the actual file name of that is.

2613
01:52:42,800 --> 01:52:45,800
So I'm going to attempt to look for it and see which one.

2614
01:52:45,800 --> 01:52:50,200
I don't know if it's on this machine, let's go ahead and go over here

2615
01:52:50,200 --> 01:52:53,700
to windows again and just do again.

2616
01:52:53,700 --> 01:52:56,300
That Dura, /s, X input star.

2617
01:52:56,600 --> 01:52:59,100
Let's just see what versions there are.

2618
01:52:59,300 --> 01:53:00,800
So it's got its on this machine.

2619
01:53:00,800 --> 01:53:03,000
We've got this one xinput 91.

2620
01:53:03,300 --> 01:53:06,700
So let's go ahead and see if we can load that one as well.

2621
01:53:07,200 --> 01:53:08,400
And that way, we've just covered.

2622
01:53:08,400 --> 01:53:13,300
Absolutely all our bases, no matter what Microsoft decided to poop out

2623
01:53:13,500 --> 01:53:15,000
into their Windows operating system.

2624
01:53:15,000 --> 01:53:18,100
We will hopefully have coverage there.

2625
01:53:18,200 --> 01:53:21,600
So, let's take a look at that and double check that that works in the

2626
01:53:21,600 --> 01:53:22,000
controller.

2627
01:53:22,000 --> 01:53:22,500
Still works.

2628
01:53:22,500 --> 01:53:25,100
If we load that library, because I've never actually tried lien that

2629
01:53:25,100 --> 01:53:26,100
library before.

2630
01:53:26,600 --> 01:53:29,200
Let's take a look load that library and it

2631
01:53:29,400 --> 01:53:34,200
Loaded and the controller Works a okay.

2632
01:53:34,200 --> 01:53:35,500
All right, so we're good there.

2633
01:53:36,800 --> 01:53:38,500
No issues with that.

2634
01:53:39,100 --> 01:53:42,100
So that's one thing off the list, not much, again.

2635
01:53:42,100 --> 01:53:45,200
Nothing to talk about their just had to make sure we covered all the

2636
01:53:45,200 --> 01:53:45,700
bases.

2637
01:53:46,100 --> 01:53:48,500
Let's thing I want to do is talk about the dead zone.

2638
01:53:49,100 --> 01:53:51,400
I realized I did something stupid.

2639
01:53:52,200 --> 01:53:54,700
This would not have been a problem when we actually went to handle

2640
01:53:54,700 --> 01:53:55,700
this stuff for real.

2641
01:53:55,800 --> 01:53:59,900
But the, but the joke code, I I typed in here was

2642
01:54:00,000 --> 01:54:04,000
Dumb and I didn't want to leave it in there without an explanation of

2643
01:54:04,000 --> 01:54:06,800
why it was done, just in case people internalize it and didn't think

2644
01:54:06,800 --> 01:54:07,600
about the dumbness.

2645
01:54:08,200 --> 01:54:08,600
Basically.

2646
01:54:08,600 --> 01:54:11,600
What I did is I shifted this down because I was just like, oh, I want

2647
01:54:11,600 --> 01:54:13,200
to kill the low.

2648
01:54:13,700 --> 01:54:16,700
I want to make it a very low value, so that when you push the side,

2649
01:54:16,700 --> 01:54:20,400
it's not scrolling by infinitely fast because this is a 16-bit value.

2650
01:54:20,400 --> 01:54:24,400
So it'll go between 32,000 - 32,000 something like that and we're

2651
01:54:24,400 --> 01:54:27,800
scrolling in pixels when we, when we do our X offset.

2652
01:54:27,800 --> 01:54:29,100
So we that's way too many.

2653
01:54:29,100 --> 01:54:29,900
I mean, our whole

2654
01:54:30,000 --> 01:54:34,100
So is only going to be like 1920, pixels wide at best and we were

2655
01:54:34,100 --> 01:54:36,900
right now using just only 1280 by 720.

2656
01:54:37,000 --> 01:54:40,300
So, scrolling by 30,000, which would wrap the screen tons of times in

2657
01:54:40,300 --> 01:54:41,100
one scroll.

2658
01:54:41,200 --> 01:54:42,400
So I try to scroll that down.

2659
01:54:42,400 --> 01:54:45,100
Now, the problem is this is perfectly valid shifting down by 12.

2660
01:54:45,100 --> 01:54:48,500
That's basically the same as dividing by 2 to the 12th, right?

2661
01:54:50,300 --> 01:54:54,700
There is a cash to catch occurs when there is a negative number by

2662
01:54:54,700 --> 01:54:58,900
default when you shift and see, I believe it does sign extension.

2663
01:54:59,300 --> 01:55:03,100
And what that means is, if the number was -, so if that high bit was

2664
01:55:03,100 --> 01:55:07,300
set and you shift it down, it continues to shift in the high bit that

2665
01:55:07,300 --> 01:55:10,400
leaves the number - if it was - before.

2666
01:55:10,800 --> 01:55:13,700
Now I wanted to I want to just show you what that means because I

2667
01:55:13,700 --> 01:55:16,900
realized a little complicated understand but we come in here.

2668
01:55:17,700 --> 01:55:19,500
First time through, right?

2669
01:55:19,500 --> 01:55:21,200
And we take a look at what goes on.

2670
01:55:21,700 --> 01:55:26,700
We have an X offset and a y offset, and you can see excuse me.

2671
01:55:33,400 --> 01:55:35,200
Ah, man.

2672
01:55:36,900 --> 01:55:44,300
The coughing, it never stops of zeros and we are going to add to those

2673
01:55:44,300 --> 01:55:44,800
zeros.

2674
01:55:45,800 --> 01:55:47,100
How much you want to offset by.

2675
01:55:50,600 --> 01:55:54,200
Now, stick offset, I'm sorry, X offset, and wife that are both zero,

2676
01:55:54,200 --> 01:55:58,500
like I said, so what we would expect to have happen here, right?

2677
01:55:59,300 --> 01:56:04,700
Is we would expect to see 2035 shifted down by 12, which is 0, right?

2678
01:56:04,700 --> 01:56:07,200
Because that's basically there's a, what's called a dead zone on the

2679
01:56:07,200 --> 01:56:07,900
controller.

2680
01:56:08,500 --> 01:56:11,000
The controller is basically kind of noisy.

2681
01:56:11,000 --> 01:56:12,400
The inputs aren't perfect.

2682
01:56:13,600 --> 01:56:17,100
And when the controller is back at zero, it may not be right at 0.

2683
01:56:17,100 --> 01:56:18,400
It may be anything from like

2684
01:56:18,500 --> 01:56:20,400
4,000 to positive four thousand or something.

2685
01:56:20,400 --> 01:56:22,400
There's like a huge range of what?

2686
01:56:22,400 --> 01:56:24,600
What centered might be in the controller.

2687
01:56:25,300 --> 01:56:30,000
So basically that shift by 12 should have totally killed that noise

2688
01:56:30,000 --> 01:56:31,700
because the two values that are on the controls.

2689
01:56:31,700 --> 01:56:31,900
Are you?

2690
01:56:31,900 --> 01:56:33,700
Notice are both zero, right?

2691
01:56:33,800 --> 01:56:36,900
But, when we actually go to compute these lines, you'll notice that's

2692
01:56:36,900 --> 01:56:38,000
not what we get.

2693
01:56:38,000 --> 01:56:40,800
We get negative 1 and zero, right?

2694
01:56:40,800 --> 01:56:45,100
Which is what causes that persistent scroll.

2695
01:56:45,100 --> 01:56:46,900
I was just saying, oh, this controller is broken because I thought the

2696
01:56:46,900 --> 01:56:47,700
controller was broken.

2697
01:56:47,800 --> 01:56:48,300
That's not the case.

2698
01:56:48,400 --> 01:56:49,800
Case that was just me being dumb.

2699
01:56:49,900 --> 01:56:51,500
Basically, What's Happening Here?

2700
01:56:51,500 --> 01:56:59,900
If You Look is if we see what actually happens when we do this.

2701
01:57:00,000 --> 01:57:02,800
Shift when we do this shift right here, right?

2702
01:57:02,900 --> 01:57:04,400
If we look at what actually happens there.

2703
01:57:04,600 --> 01:57:06,700
We will see the problem.

2704
01:57:07,600 --> 01:57:10,600
The problem is that that value?

2705
01:57:11,000 --> 01:57:13,300
When it gets shifted, there's my to bugger.

2706
01:57:13,400 --> 01:57:14,700
Where is my to bugger?

2707
01:57:14,700 --> 01:57:14,900
There?

2708
01:57:14,900 --> 01:57:17,700
It is that value when it gets shifted.

2709
01:57:17,700 --> 01:57:18,900
This is a binary value.

2710
01:57:18,900 --> 01:57:19,100
Right?

2711
01:57:19,100 --> 01:57:22,700
If we look at the binary value, that's a two's complement value.

2712
01:57:22,700 --> 01:57:25,900
The high bit is set at means it is - what's going to happen when it

2713
01:57:25,900 --> 01:57:28,800
shifts it is, it's going to shift in the sign bit.

2714
01:57:29,000 --> 01:57:29,800
The reason it has to

2715
01:57:30,000 --> 01:57:33,300
Shift in the sign bit that high bit, that's one that's going to be

2716
01:57:33,300 --> 01:57:33,500
one.

2717
01:57:33,500 --> 01:57:37,700
Anytime that the number is negative is because if it shifted in a 0,

2718
01:57:38,300 --> 01:57:40,900
the number would flip from negative to positive.

2719
01:57:41,200 --> 01:57:41,700
Right?

2720
01:57:41,800 --> 01:57:45,700
So what it does is it shifts in a - it shifts in that want the the -

2721
01:57:45,700 --> 01:57:49,800
to keep the number remaining - and that's just 2's complement which we

2722
01:57:49,800 --> 01:57:50,800
didn't really cover too much.

2723
01:57:50,800 --> 01:57:52,300
But that's what's going to actually happen.

2724
01:57:52,600 --> 01:57:53,700
When that happens.

2725
01:57:54,000 --> 01:57:58,700
You will notice that we basically end up producing a value.

2726
01:57:58,800 --> 01:57:59,800
That's all.

2727
01:58:00,300 --> 01:58:04,100
What, you know, when we shift it down, it's going to be all once

2728
01:58:04,100 --> 01:58:07,200
because we shifted it down enough to knock out.

2729
01:58:07,200 --> 01:58:09,300
We shifted down 12 places, right?

2730
01:58:09,400 --> 01:58:11,800
And this thing is only 16 bits long.

2731
01:58:11,900 --> 01:58:14,800
So basically we ended up with just these ones that were here and we

2732
01:58:14,800 --> 01:58:16,100
shift it in, once for the rest.

2733
01:58:16,100 --> 01:58:18,300
So, these ones are those ones, right?

2734
01:58:18,300 --> 01:58:20,800
They got went down there and we shift it in a 1 for everything else.

2735
01:58:21,400 --> 01:58:24,400
No matter how far down, we shift the negative value.

2736
01:58:24,400 --> 01:58:26,500
It'll never go to 0.

2737
01:58:26,500 --> 01:58:28,300
It only goes to negative one.

2738
01:58:28,600 --> 01:58:29,900
So it's not really the same.

2739
01:58:30,100 --> 01:58:34,100
Him as an integer divide at that point, that is a crucial thing to

2740
01:58:34,100 --> 01:58:34,700
remember.

2741
01:58:34,800 --> 01:58:37,900
And I just kind of, I didn't even think about it and I just kind of

2742
01:58:37,900 --> 01:58:38,800
crap that in there.

2743
01:58:39,900 --> 01:58:41,000
That was a bad idea.

2744
01:58:41,400 --> 01:58:42,600
So that's not good.

2745
01:58:42,600 --> 01:58:46,500
What we actually wanted to do, is we actually wanted to use a real

2746
01:58:46,500 --> 01:58:47,400
divide here.

2747
01:58:47,700 --> 01:58:51,700
We actually wanted to use something that was basically, you know, 2 to

2748
01:58:51,700 --> 01:58:52,200
the 12th.

2749
01:58:52,200 --> 01:58:54,500
Let's say something like that.

2750
01:58:54,700 --> 01:58:59,200
And that's going to be what 256 with, for more extra place.

2751
01:58:59,200 --> 01:59:01,400
So 265 1220 2048.

2752
01:59:01,400 --> 01:59:02,700
So it's going to be something like 2048.

2753
01:59:02,700 --> 01:59:04,000
Let's say, right now.

2754
01:59:04,000 --> 01:59:06,500
We're going to do that divide, something like that.

2755
01:59:06,700 --> 01:59:09,200
Maybe not sure what we actually want to be.

2756
01:59:09,200 --> 01:59:09,600
Maybe we want.

2757
01:59:09,700 --> 01:59:10,800
4096.

2758
01:59:12,900 --> 01:59:15,300
I think it's 4,000 is because there's actually one extra shift.

2759
01:59:15,400 --> 01:59:16,600
So this is actually a little more.

2760
01:59:18,800 --> 01:59:20,500
But that's to look totally fine value.

2761
01:59:28,700 --> 01:59:31,700
And I can feel that that's not quite all the dead zone.

2762
01:59:31,700 --> 01:59:34,400
You see how it sort of, it's got still a little bit, sometimes of a

2763
01:59:34,400 --> 01:59:35,300
bit that's happening there.

2764
01:59:35,500 --> 01:59:40,900
So I think the dead zone is probably somewhere around 4096 and I think

2765
01:59:40,900 --> 01:59:43,700
if we actually look, so I'm going to, I'm going to stick with the

2766
01:59:43,700 --> 01:59:44,600
higher number that whoops.

2767
01:59:44,600 --> 01:59:49,300
That's the wrong editor, tell immediately when you type into it 4096

2768
01:59:49,300 --> 01:59:52,000
4096 and that should handle the dead zone properly.

2769
01:59:52,000 --> 01:59:53,100
I suspect.

2770
02:00:12,900 --> 02:00:14,600
All right, looks good.

2771
02:00:14,800 --> 02:00:20,000
The only thing I wanted to check as well is whether or not what the

2772
02:00:20,000 --> 02:00:22,100
xinput, definition of The Dead Zone was because if I remember

2773
02:00:22,100 --> 02:00:24,100
correctly, they say with the dead zone isn't here and like I said,

2774
02:00:24,100 --> 02:00:26,900
we're going to handle the dead zone properly.

2775
02:00:27,100 --> 02:00:29,100
This is not proper, handling of the dead zone at all.

2776
02:00:29,400 --> 02:00:35,400
We're going to handle the prop, the The Dead Zone in later.

2777
02:00:35,400 --> 02:00:39,400
Editions more properly than this, but you can see actually the left

2778
02:00:39,400 --> 02:00:41,800
and right have much higher dead zones actually even than 4

2779
02:00:42,100 --> 02:00:45,400
As in 96, those are really high there.

2780
02:00:45,600 --> 02:00:49,800
So technically actually, we would want to kill any number, you know,

2781
02:00:49,800 --> 02:00:51,300
that was that was above those.

2782
02:00:51,400 --> 02:00:52,600
So keep that in mind.

2783
02:00:52,600 --> 02:00:56,700
We'll deal with that actually a little bit a little bit later.

2784
02:00:56,700 --> 02:00:57,200
Okay.

2785
02:00:57,900 --> 02:01:01,200
So basically that's just something to just something to keep in mind.

2786
02:01:01,200 --> 02:01:02,600
In fact, you what, I'll go ahead and put it to do in there.

2787
02:01:02,600 --> 02:01:03,700
So people can see it.

2788
02:01:05,400 --> 02:01:06,700
And know that it's okay.

2789
02:01:06,700 --> 02:01:10,300
And we're going to get to that later, note, or to do Casey.

2790
02:01:11,700 --> 02:01:22,000
We will do DeadZone handling prop later using X input Gamepad and

2791
02:01:22,000 --> 02:01:22,800
there we go.

2792
02:01:22,900 --> 02:01:23,500
Alright.

2793
02:01:24,100 --> 02:01:26,900
So basically we will, we will actually do that later.

2794
02:01:26,900 --> 02:01:31,100
You'll see that happen later on, and when we actually process this

2795
02:01:31,100 --> 02:01:35,000
joystick to shove it into our actual game properly.

2796
02:01:35,200 --> 02:01:35,300
Right.

2797
02:01:35,300 --> 02:01:36,500
So, that's the dead zone thing.

2798
02:01:36,700 --> 02:01:39,600
And then the final thing was just one bit of cleanup, which was the

2799
02:01:39,600 --> 02:01:40,200
deaf window.

2800
02:01:40,200 --> 02:01:42,300
Proc technically should have been deaf window.

2801
02:01:42,300 --> 02:01:43,000
Proc a, again.

2802
02:01:43,000 --> 02:01:45,900
This is just cleaning up things that for people who want to compile

2803
02:01:45,900 --> 02:01:47,000
and unicode, anytime.

2804
02:01:47,000 --> 02:01:48,400
You see one that I've missed.

2805
02:01:48,600 --> 02:01:50,600
We're just trying to make it so that if anyone does it compile, it

2806
02:01:50,600 --> 02:01:52,200
does compile it and unicode Mode.

2807
02:01:52,200 --> 02:01:52,800
Nothing breaks.

2808
02:01:52,800 --> 02:01:54,500
Basically, so, there we go.

2809
02:01:55,000 --> 02:01:55,800
All good.

2810
02:01:55,800 --> 02:01:58,200
I think we have come to the end of the stream.

2811
02:01:59,100 --> 02:02:01,800
I don't think we've got anything else.

2812
02:02:02,500 --> 02:02:04,200
Looks like, that's the end of the questions, too.

2813
02:02:04,200 --> 02:02:04,800
So, thank you.

2814
02:02:05,100 --> 02:02:09,300
Everyone for joining us for this special to our holiday Thanksgiving

2815
02:02:09,300 --> 02:02:12,300
holiday episode of handmade hero.

2816
02:02:13,000 --> 02:02:15,600
I am, I am delighted to see that.

2817
02:02:15,600 --> 02:02:17,300
So many people actually joined us.

2818
02:02:17,700 --> 02:02:20,800
I was figuring today, would be a not many people on the stream because

2819
02:02:20,900 --> 02:02:23,500
of the Thanksgiving holiday, but it looks like we still got quite a

2820
02:02:23,500 --> 02:02:23,900
few people.

2821
02:02:23,900 --> 02:02:27,600
So thank you so much for coming and hanging out with us while we got

2822
02:02:27,600 --> 02:02:30,600
our sound code working, and we did some other kind of fun stuff as

2823
02:02:30,600 --> 02:02:30,900
well.

2824
02:02:30,900 --> 02:02:33,000
Talked about floating point and all kinds of other good stuff.

2825
02:02:33,100 --> 02:02:34,300
If you would like,

2826
02:02:35,500 --> 02:02:38,300
Again, to preorder the game, you can get the full source code here and

2827
02:02:38,300 --> 02:02:40,100
that will come with art assets as well.

2828
02:02:40,100 --> 02:02:41,600
Like we talked about on the stream.

2829
02:02:41,600 --> 02:02:42,100
If you want that.

2830
02:02:42,100 --> 02:02:43,200
You can pre-order it here.

2831
02:02:43,600 --> 02:02:44,800
If you want to email a question.

2832
02:02:44,800 --> 02:02:45,600
You can email it here.

2833
02:02:45,600 --> 02:02:46,700
We're still working on the Forum.

2834
02:02:46,700 --> 02:02:48,500
So hopefully that will soon be a forums button.

2835
02:02:48,500 --> 02:02:51,400
You can actually go and talk to other members of the community as

2836
02:02:51,400 --> 02:02:51,800
well.

2837
02:02:52,000 --> 02:02:53,000
Again, the Twitter stream.

2838
02:02:53,000 --> 02:02:56,500
I usually post when the things are going to be as well so that you can

2839
02:02:56,500 --> 02:02:58,400
get updates on when the next stream is going to be.

2840
02:02:58,400 --> 02:02:59,800
And of course the YouTube video

2841
02:03:00,000 --> 02:03:01,800
So go to handmade, hero dot-org.

2842
02:03:01,800 --> 02:03:02,600
If you need anything.

2843
02:03:02,600 --> 02:03:05,100
We've probably tried to put most of stuff there that you need and and

2844
02:03:05,100 --> 02:03:07,200
the forums will be coming soon, which will have even more stuff.

2845
02:03:07,200 --> 02:03:08,100
So, that should be good.

2846
02:03:08,500 --> 02:03:08,800
Thank you.

2847
02:03:08,800 --> 02:03:10,000
Everyone for joining us.

2848
02:03:10,000 --> 02:03:11,300
Tomorrow will be 11 a.m.

2849
02:03:11,300 --> 02:03:14,000
Again, then Monday will be going back to 8 p.m.

2850
02:03:14,000 --> 02:03:15,600
So we'll be back on regular hours.

2851
02:03:15,700 --> 02:03:18,800
Friday's will probably always be sometime in the morning though, so

2852
02:03:18,800 --> 02:03:20,100
that people in Europe can join in.

2853
02:03:20,100 --> 02:03:23,200
So Friday's will be early in the mornings from now on basically, but

2854
02:03:23,200 --> 02:03:25,200
Monday through Thursday will be back at 8 p.m.

2855
02:03:25,700 --> 02:03:26,600
For next week.

2856
02:03:26,600 --> 02:03:28,100
Thank you everyone for joining us.

2857
02:03:28,100 --> 02:03:29,900
It was great to see you and I hope.

2858
02:03:30,000 --> 02:03:30,900
To see you again.

2859
02:03:30,900 --> 02:03:33,600
Tomorrow, have a Happy Thanksgiving, for those of you who celebrate

2860
02:03:33,600 --> 02:03:34,000
it.

2861
02:03:34,200 --> 02:03:36,500
And for those of you don't just have a good rest of your day.

