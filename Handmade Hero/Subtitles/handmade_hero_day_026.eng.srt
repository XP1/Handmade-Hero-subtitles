1
00:00:00,700 --> 00:00:01,600
Start recording.

2
00:00:02,700 --> 00:00:03,600
Okay, everyone.

3
00:00:03,600 --> 00:00:11,400
Hello and welcome to what is really, I guess, in some sense, the very

4
00:00:11,400 --> 00:00:15,300
first day of handmade hero programming, where we're actually going to

5
00:00:15,300 --> 00:00:19,300
be talking about programming the actual game because obviously, we had

6
00:00:19,300 --> 00:00:21,900
to spend what I guess is about 25.

7
00:00:21,900 --> 00:00:24,000
I guess there's a little, maybe a little more than that, but something

8
00:00:24,000 --> 00:00:29,400
like 26, 27 hours, writing ourselves a prototyping layer that we could

9
00:00:29,400 --> 00:00:29,800
use on.

10
00:00:30,400 --> 00:00:31,700
Which we have mostly done.

11
00:00:31,800 --> 00:00:34,200
I mean, there's plenty of things that I would probably if I was

12
00:00:34,200 --> 00:00:35,300
programming full-time.

13
00:00:35,300 --> 00:00:36,500
In my real life.

14
00:00:36,800 --> 00:00:40,000
I would clean up a ton of stuff, probably still in the, in the

15
00:00:40,000 --> 00:00:43,400
prototyping layer, even though it is just a prototyping layer, but for

16
00:00:43,400 --> 00:00:45,500
the moment, it's plenty good for our purposes.

17
00:00:45,500 --> 00:00:50,700
And since I know, we will be going back there and doing a real like

18
00:00:50,700 --> 00:00:52,000
serious pass on it later.

19
00:00:52,000 --> 00:00:54,800
When we go to make a fully shippable win32 layer.

20
00:00:54,800 --> 00:00:57,700
I figured I don't really want to belabor the point, you know, cleaning

21
00:00:57,700 --> 00:00:58,400
up stuff in the platform.

22
00:00:58,400 --> 00:01:00,300
We're at this point, specifically the

23
00:01:00,400 --> 00:01:04,599
Obviously we kind of it wants a couple more days of like solid work to

24
00:01:04,599 --> 00:01:08,900
like nail everything down and also to kind of you maybe use on

25
00:01:08,900 --> 00:01:11,800
platforms where Core Audio exists and stuff like that, you know, to

26
00:01:11,800 --> 00:01:15,200
use it because the direct sound latency was pretty darn high, and I'd

27
00:01:15,200 --> 00:01:18,100
be interested to know if we could get a lower latency outputs that

28
00:01:18,100 --> 00:01:18,600
sort of stuff.

29
00:01:18,600 --> 00:01:22,200
But for the most part, I mean, for the most part, we've got a pretty

30
00:01:22,200 --> 00:01:25,100
solid prototyping layer that we can easily use to make the game.

31
00:01:25,100 --> 00:01:27,800
It's just not the kind of thing you would ever ship to end users

32
00:01:27,800 --> 00:01:29,400
because again, it's for prototyping.

33
00:01:29,400 --> 00:01:30,000
So we

34
00:01:30,400 --> 00:01:33,800
Done the work necessary to make a really shippable win32 platform

35
00:01:33,800 --> 00:01:36,000
layer and we'll be looking at that in a bit.

36
00:01:36,000 --> 00:01:40,600
But for the next couple of months, what we're going to be doing is

37
00:01:40,600 --> 00:01:45,100
actually making the game, which is kind of the, the most interesting

38
00:01:45,100 --> 00:01:46,100
part of the programming.

39
00:01:46,100 --> 00:01:48,900
I think, almost always because playing around with platforms.

40
00:01:49,200 --> 00:01:50,500
Sometimes it can be fun.

41
00:01:50,800 --> 00:01:54,900
But a lot of times it's just drudge work of trying to basically figure

42
00:01:54,900 --> 00:01:58,500
out exactly how to get something that, you know, is possible to happen

43
00:01:58,500 --> 00:02:00,100
on the platform and your kind of

44
00:02:00,300 --> 00:02:03,900
Ending a lot of your time working around or experimenting with some

45
00:02:03,900 --> 00:02:05,200
stuff that some other programmer, wrote.

46
00:02:05,200 --> 00:02:07,800
You might not have been any good and isn't very well documented and

47
00:02:07,800 --> 00:02:08,500
blahblahblog.

48
00:02:08,500 --> 00:02:09,900
So that's a lot less.

49
00:02:09,900 --> 00:02:10,600
Satisfying.

50
00:02:10,800 --> 00:02:14,700
It's also even it's harder for me to to sort of do these streams

51
00:02:14,700 --> 00:02:16,400
because these are educational streams.

52
00:02:16,700 --> 00:02:21,000
And when I am explaining something that we wrote entirely ourselves, I

53
00:02:21,000 --> 00:02:23,700
can do a much better job of explaining to you, why everything works

54
00:02:23,700 --> 00:02:24,500
the way it does.

55
00:02:24,600 --> 00:02:27,000
Whereas obviously when we're doing, it went through two platform layer

56
00:02:27,000 --> 00:02:29,200
or a Linux platform layer or Mac platform layer.

57
00:02:29,400 --> 00:02:30,200
I wasn't the

58
00:02:30,300 --> 00:02:33,100
The guy who wrote the operating system.

59
00:02:33,200 --> 00:02:36,900
So when we get to a certain point where ever that point is in, you

60
00:02:36,900 --> 00:02:41,400
know, sort of, you know, when we go down the levels of what's

61
00:02:41,400 --> 00:02:45,600
happening in, you know, in the code, there's a certain point at which,

62
00:02:45,800 --> 00:02:48,300
you know, I have to just go and we don't know, we call windows and

63
00:02:48,300 --> 00:02:49,300
this seems to be what it does.

64
00:02:49,300 --> 00:02:50,800
So that's what it does, right?

65
00:02:51,000 --> 00:02:53,000
And that's that's just kind of unsatisfying.

66
00:02:55,100 --> 00:02:59,800
So I guess that's just a very long-winded way of saying now, we are.

67
00:03:00,000 --> 00:03:02,900
Finally getting to the point where we will know everything that

68
00:03:02,900 --> 00:03:08,100
happens because we have put ourselves in a position to basically write

69
00:03:08,100 --> 00:03:10,100
everything ourselves with without having to.

70
00:03:10,100 --> 00:03:12,200
Now think about any platform in any way.

71
00:03:12,400 --> 00:03:15,800
And since we'll be doing the first version of the renderer in software

72
00:03:15,800 --> 00:03:16,700
ourselves as well.

73
00:03:16,700 --> 00:03:20,700
That means even rendering will not be hand wavy, because we will not

74
00:03:20,700 --> 00:03:23,200
be relying on anyone's driver or GPU to do.

75
00:03:23,200 --> 00:03:24,700
The rendering for us will be doing ourselves.

76
00:03:24,700 --> 00:03:27,600
So we can literally know how every last little pixel.

77
00:03:27,600 --> 00:03:29,900
Got onto the screen, why it was there, why it looks?

78
00:03:30,000 --> 00:03:33,100
Like it does how it was, computed where it came from.

79
00:03:33,100 --> 00:03:35,200
Everything will be something that we can look at.

80
00:03:35,200 --> 00:03:37,100
And I'm much more excited about that because I think that's going to

81
00:03:37,100 --> 00:03:39,100
be really where the interesting stuff.

82
00:03:39,100 --> 00:03:40,200
Lies me platforms.

83
00:03:40,200 --> 00:03:43,400
Come and go and there's a million platforms out there.

84
00:03:43,400 --> 00:03:44,400
They'll be a million more.

85
00:03:44,800 --> 00:03:47,400
And so really that's not that exciting of a part but it's just

86
00:03:47,400 --> 00:03:48,500
something kind of have to do.

87
00:03:48,800 --> 00:03:52,600
So with all of that.

88
00:03:53,200 --> 00:03:54,600
I guess I should do the standard p.m.

89
00:03:54,600 --> 00:03:56,300
On case, we do some code today.

90
00:03:56,700 --> 00:03:58,300
Welcome to handmade hero.

91
00:03:58,300 --> 00:03:59,800
We are on Day 26.

92
00:04:00,100 --> 00:04:03,700
Right now, which means we're about 26 hours into programming this

93
00:04:03,700 --> 00:04:04,100
game.

94
00:04:04,500 --> 00:04:07,400
If the, I guess if it was a Monday that we started.

95
00:04:07,400 --> 00:04:10,500
We're on Thursday or something in the working week, something like

96
00:04:10,500 --> 00:04:10,900
that.

97
00:04:11,000 --> 00:04:13,200
If we are program in 7 hours a day or something like this.

98
00:04:13,800 --> 00:04:15,300
I don't know how much you guys program a day.

99
00:04:15,300 --> 00:04:16,500
But however, much you program a day.

100
00:04:16,500 --> 00:04:19,200
You can figure out where in the week that is after, you know, 26 some

101
00:04:19,200 --> 00:04:19,800
odd hours.

102
00:04:21,200 --> 00:04:24,200
We are building an entire game from scratch and we are building it

103
00:04:24,200 --> 00:04:27,100
from scratch for two reasons, one, because it's a lot of fun.

104
00:04:27,200 --> 00:04:27,700
Actually.

105
00:04:27,700 --> 00:04:29,800
And I think as we now kind of get

106
00:04:29,900 --> 00:04:32,800
Away from the win32 side of things to which, you know, like I said,

107
00:04:32,800 --> 00:04:34,300
makes things definitely hairier.

108
00:04:34,300 --> 00:04:35,700
Now, that we're in our own code.

109
00:04:36,000 --> 00:04:38,000
It's going to be a lot more fun because everything is under our

110
00:04:38,000 --> 00:04:41,200
control, but it's just kind of fun to have complete control over thing

111
00:04:41,200 --> 00:04:43,200
and to be able to do whatever you want.

112
00:04:43,200 --> 00:04:45,200
I feel is like really very empowering.

113
00:04:45,200 --> 00:04:46,200
I kind of like that a lot.

114
00:04:46,200 --> 00:04:47,200
So I think it's a lot more fun.

115
00:04:47,200 --> 00:04:49,000
And also, I think it's very educational.

116
00:04:49,000 --> 00:04:53,000
So one of the big reasons I want to do this, obviously this series

117
00:04:53,400 --> 00:04:56,100
where we did everything from scratch was because I really want to be

118
00:04:56,100 --> 00:04:59,700
able to show how every level a little last thing works because it's so

119
00:05:00,000 --> 00:05:02,200
Things sometimes to find out how these things work, and a lot of

120
00:05:02,200 --> 00:05:02,500
times.

121
00:05:02,500 --> 00:05:06,600
Now, if you just use a Prefab game engine or something like that, you

122
00:05:06,600 --> 00:05:09,700
don't really ever get to see all of the stuff that happens, so you

123
00:05:09,700 --> 00:05:10,700
don't get to learn about it.

124
00:05:10,700 --> 00:05:14,100
Also, you know, I think it's really an important thing for everyone to

125
00:05:14,100 --> 00:05:17,200
do, who's a, who's a, you know, game programmer to do, once to kind of

126
00:05:17,200 --> 00:05:18,100
do the whole pipeline.

127
00:05:18,100 --> 00:05:19,400
Once they can just kind of see it.

128
00:05:19,500 --> 00:05:21,100
It's super educational and cool.

129
00:05:21,100 --> 00:05:22,300
I think so.

130
00:05:22,600 --> 00:05:24,800
Yeah, so I'm looking forward to it and I hope you are too.

131
00:05:25,000 --> 00:05:29,200
If you pre-ordered the game on handmade hero dot-org, you should have

132
00:05:29,200 --> 00:05:29,800
gotten an email.

133
00:05:29,900 --> 00:05:32,600
Email with a link that allows you to download the source code anytime

134
00:05:32,600 --> 00:05:34,000
you want that source.

135
00:05:34,000 --> 00:05:39,300
Code ZIP has days in it each day corresponds to one of the days you on

136
00:05:39,300 --> 00:05:39,800
the stream here.

137
00:05:39,800 --> 00:05:44,000
So we're on Day 26, so you will want to unzip yesterday's Source day

138
00:05:44,000 --> 00:05:48,300
25 unzip that into a directory and you will be in the exact same state

139
00:05:48,400 --> 00:05:49,400
that I am in right now.

140
00:05:49,400 --> 00:05:52,700
So if you want to follow along at home, that's the easiest way to do

141
00:05:52,700 --> 00:05:54,900
it and you will be all set to go.

142
00:05:55,700 --> 00:05:59,800
Okay, so I have a bunch of things that I want to talk about tonight.

143
00:06:00,000 --> 00:06:02,800
And like I said, I don't know how much coding will get to.

144
00:06:02,800 --> 00:06:04,500
I said that was talking about this in the freestream.

145
00:06:04,500 --> 00:06:07,700
I have a bunch of things that I want to explain because I think that

146
00:06:07,700 --> 00:06:13,400
game architecture is not very well understood by a lot of people.

147
00:06:13,400 --> 00:06:16,800
And I would also say that just architecture software architecture in

148
00:06:16,800 --> 00:06:19,100
general is really not understood that.

149
00:06:19,100 --> 00:06:22,300
Well by a lot of people, a lot of a lot of people in the programming

150
00:06:22,300 --> 00:06:24,700
world and I think there's a lot of misconceptions.

151
00:06:24,700 --> 00:06:28,600
I think there are a lot of dogmas out there that can be very

152
00:06:28,600 --> 00:06:30,000
counterintuitive and

153
00:06:30,000 --> 00:06:35,400
And also perhaps harmful to productivity that yield a worse and

154
00:06:35,400 --> 00:06:39,300
product and so I kind of just wanted to talk a little bit about

155
00:06:39,300 --> 00:06:43,800
software architecture, what it means, what the actual sensible things

156
00:06:43,800 --> 00:06:47,700
are there and kind of then move from there into game architecture

157
00:06:47,700 --> 00:06:49,600
specifically and kind of how to think about it.

158
00:06:52,700 --> 00:06:53,200
Okay.

159
00:06:54,600 --> 00:07:01,500
So what I want you to think about for a second if you will, is the

160
00:07:01,500 --> 00:07:02,900
term architecture.

161
00:07:03,600 --> 00:07:07,100
Because what's interesting about the term architecture is if you

162
00:07:07,100 --> 00:07:08,400
actually consider.

163
00:07:10,500 --> 00:07:11,800
Am I going to painting mode here?

164
00:07:11,800 --> 00:07:12,400
There we go.

165
00:07:12,800 --> 00:07:13,300
There we go.

166
00:07:13,800 --> 00:07:18,000
If you actually consider what the term architecture comes from, right?

167
00:07:18,400 --> 00:07:22,500
It was something that that comes obviously from building buildings,

168
00:07:23,300 --> 00:07:24,200
but if you think about the

169
00:07:24,300 --> 00:07:24,800
Process.

170
00:07:24,800 --> 00:07:28,600
What happens when you build a building is an architect, right?

171
00:07:28,800 --> 00:07:33,500
They the person who does architecture they make a blueprint, right?

172
00:07:33,600 --> 00:07:36,100
They make they make designs for the building.

173
00:07:36,200 --> 00:07:37,700
They make a bunch of These Blueprints.

174
00:07:38,200 --> 00:07:39,100
I don't know if you've ever seen them.

175
00:07:39,100 --> 00:07:40,400
They're, they're all in a big roll.

176
00:07:40,400 --> 00:07:43,500
There's, there's sometimes they're printed out by the hundreds for

177
00:07:43,500 --> 00:07:46,100
complex buildings and like one blueprint will have like where the,

178
00:07:46,100 --> 00:07:47,500
where the plumbing supposed to go.

179
00:07:47,500 --> 00:07:52,700
And another blueprint will have things like, you know, how the floor

180
00:07:52,700 --> 00:07:54,100
is laid out or where the

181
00:07:54,200 --> 00:07:55,100
Asset egos, who knows?

182
00:07:55,100 --> 00:07:57,300
They've got blueprints for all sorts of things.

183
00:07:57,900 --> 00:08:00,700
Well, the Architects make These Blueprints, right, nowadays, they make

184
00:08:00,700 --> 00:08:01,700
them on CAD things.

185
00:08:02,400 --> 00:08:04,200
And then what happens is, at some point.

186
00:08:04,200 --> 00:08:06,400
They hand these blue printers off to like, you know, like a

187
00:08:06,400 --> 00:08:07,500
contractor, right?

188
00:08:07,600 --> 00:08:10,800
There's a contractor and they've got carpenters and stuff, and they

189
00:08:10,800 --> 00:08:13,700
actually build the building using materials, right?

190
00:08:13,900 --> 00:08:17,800
So the contractor actually builds the building and building the

191
00:08:17,800 --> 00:08:20,200
building, involves lots of stuff, right, building in the building

192
00:08:20,200 --> 00:08:22,900
involves like nailing stuff in, right?

193
00:08:24,500 --> 00:08:26,500
Stuff together, right?

194
00:08:26,600 --> 00:08:31,300
It involves like, you know masonry involves cranes and Hauling stuff

195
00:08:31,300 --> 00:08:32,000
around.

196
00:08:32,299 --> 00:08:36,400
So when people say architect, you know, and and they are talking about

197
00:08:36,400 --> 00:08:38,900
what we're doing in programming.

198
00:08:39,200 --> 00:08:43,600
It's kind of a little it's kind of a little confusing to understand

199
00:08:43,600 --> 00:08:48,500
really what this means, and I think that it may be puts up a few

200
00:08:48,500 --> 00:08:52,100
barriers to understanding, because one of the things that's true, if

201
00:08:52,100 --> 00:08:54,000
you take a look at this whole process,

202
00:08:54,400 --> 00:08:58,300
In sort of, in the world of construction and we were trying to, like,

203
00:08:58,300 --> 00:08:59,700
use the metaphor directly.

204
00:09:00,300 --> 00:09:02,000
Is that this right here?

205
00:09:02,100 --> 00:09:05,100
Pretty much tells you everything you need to know to build the

206
00:09:05,100 --> 00:09:07,500
building for the most part.

207
00:09:07,700 --> 00:09:11,700
Like, if I hand two different, you know, two different contractors,

208
00:09:11,700 --> 00:09:17,400
the same set of blueprints modulo like, how much, you know, how

209
00:09:17,400 --> 00:09:20,200
detail-oriented they were when they're like nailing a stuff in like,

210
00:09:20,200 --> 00:09:23,000
you know, what other little gaps or something like this, you know, how

211
00:09:23,000 --> 00:09:24,500
carefully they are doing their job.

212
00:09:24,700 --> 00:09:28,000
I'm substantially going to get the same building out the other side,

213
00:09:28,000 --> 00:09:28,500
right?

214
00:09:28,500 --> 00:09:30,000
Like I'm not going to

215
00:09:30,100 --> 00:09:33,800
A situation where like, you know, one of the buildings was, you know,

216
00:09:33,800 --> 00:09:35,200
sort of this long rectangular thing.

217
00:09:35,200 --> 00:09:37,600
And another one was like some kind of spherical Omni Dome.

218
00:09:37,900 --> 00:09:40,400
When I hand it off the same blueprint, right?

219
00:09:41,000 --> 00:09:46,500
And so if you think about that and what that entails, a lot of people

220
00:09:46,500 --> 00:09:50,600
who talk about software architecture, take that metaphor kind of

221
00:09:50,600 --> 00:09:54,400
literally, like, if you think about things like uml diagrams.

222
00:09:54,400 --> 00:09:56,300
I don't know if you've ever seen these sort of things.

223
00:09:57,300 --> 00:09:59,700
Basically, there's a bunch of architecture software.

224
00:10:00,000 --> 00:10:03,900
Architecture methodologies that really do try to reproduce this

225
00:10:03,900 --> 00:10:04,600
process.

226
00:10:04,700 --> 00:10:07,900
They try to make it so that when you are doing the work of software

227
00:10:07,900 --> 00:10:09,400
architecture, whatever that means.

228
00:10:09,400 --> 00:10:12,300
And we haven't really even defined what I think it means yet, but when

229
00:10:12,300 --> 00:10:17,300
you are doing what they think that word means, they essentially

230
00:10:17,300 --> 00:10:22,600
believe you are producing a thing, which when handed to people who

231
00:10:22,600 --> 00:10:26,700
literally do not have any knowledge about what you were trying to do

232
00:10:26,700 --> 00:10:29,900
with the architecture, potentially or how you wanted it done.

233
00:10:31,200 --> 00:10:36,000
Which subsequently build the same essential program out of it, right?

234
00:10:36,000 --> 00:10:42,300
So the blueprint is essentially the the program, you know, definition

235
00:10:42,400 --> 00:10:43,800
or spec, right?

236
00:10:43,900 --> 00:10:48,900
This is basically, you know, the family of architecture that a lot of

237
00:10:48,900 --> 00:10:53,200
sort of like hardcore object-oriented style stuff goes a lot of

238
00:10:53,200 --> 00:10:57,200
Hardcore like pre-planning diagramming all that sort of stuff.

239
00:10:57,600 --> 00:10:59,900
That is how they look at it, right.

240
00:11:01,100 --> 00:11:05,500
Now in my mind, I don't think that makes much sense at all.

241
00:11:05,500 --> 00:11:06,200
Personally.

242
00:11:06,900 --> 00:11:10,800
The reason that I don't think that much makes very much sense is

243
00:11:10,800 --> 00:11:16,500
because if you look at how this tends to play out in practice, really,

244
00:11:16,600 --> 00:11:19,100
what ends up happening when you try to do things this way?

245
00:11:19,800 --> 00:11:24,200
Is that programs are so complicated and involves so many moving parts

246
00:11:24,500 --> 00:11:29,000
that if you could actually make a blueprint that actually does specify

247
00:11:29,000 --> 00:11:29,900
the program.

248
00:11:30,200 --> 00:11:32,800
To a sufficient degree in necessary to make it.

249
00:11:32,800 --> 00:11:35,800
So there isn't any variability in what comes out the other end.

250
00:11:36,500 --> 00:11:40,600
Then you have essentially just written the program like these sorts of

251
00:11:40,600 --> 00:11:41,100
things.

252
00:11:41,100 --> 00:11:44,700
If you were to actually diagram them out to the level necessary, which

253
00:11:44,700 --> 00:11:47,800
allow some people actually do with these crazy tools, right?

254
00:11:48,300 --> 00:11:52,100
You would essentially have something that is more or less the program.

255
00:11:52,100 --> 00:11:54,700
Like a programming language.

256
00:11:54,700 --> 00:11:59,000
Sufficiently Advanced could probably just spit out the actual end

257
00:11:59,000 --> 00:11:59,700
result.

258
00:12:00,000 --> 00:12:01,700
On that process, right?

259
00:12:02,700 --> 00:12:06,200
And I feel like and I could be wrong about this, but I feel like,

260
00:12:06,200 --> 00:12:08,900
nowadays certainly in game programming.

261
00:12:09,200 --> 00:12:11,900
But also, I think the sentiment that I've heard from most of the

262
00:12:11,900 --> 00:12:16,400
people who watch handmade hero is, they either explicitly or

263
00:12:16,400 --> 00:12:20,600
intuitively and someone implicitly have that feeling as well.

264
00:12:20,600 --> 00:12:24,000
Like, if they've seen these sorts of things, they have had the

265
00:12:24,000 --> 00:12:26,800
experience that these do not tend to work very well, and that they

266
00:12:26,800 --> 00:12:28,500
caused basically a lot of upfront work.

267
00:12:28,500 --> 00:12:29,800
That just doesn't pay off very much.

268
00:12:30,000 --> 00:12:30,600
Each, right.

269
00:12:31,100 --> 00:12:34,000
And I feel very strongly about that because everything that I've ever

270
00:12:34,000 --> 00:12:37,500
seen that tries to go in that direction where you have this sort of

271
00:12:37,700 --> 00:12:42,200
heavy upfront, architecting of things tends to fail at producing good

272
00:12:42,200 --> 00:12:45,300
quality programs in a reasonable amount of time in my experience.

273
00:12:45,300 --> 00:12:48,800
They tend to take too long to produce to pour of a program.

274
00:12:49,800 --> 00:12:56,800
So, what I would actually propose is that this, this phrase architect

275
00:12:57,000 --> 00:12:59,800
or architecture, right is actually

276
00:13:00,300 --> 00:13:03,100
Kind of bad and misleading just to begin with.

277
00:13:03,400 --> 00:13:07,000
And if it were up to me, I don't think we would even ever use that

278
00:13:07,000 --> 00:13:07,500
phrase.

279
00:13:07,900 --> 00:13:12,500
So what I want to propose, oh dear, I don't know.

280
00:13:12,500 --> 00:13:14,700
I'm new to this this drawing program.

281
00:13:14,700 --> 00:13:16,700
So let's see fill with background color.

282
00:13:16,700 --> 00:13:17,200
There we go.

283
00:13:18,400 --> 00:13:23,100
So what I would like to propose is just briefly a way of sort of

284
00:13:24,100 --> 00:13:25,100
Thinking about this.

285
00:13:26,800 --> 00:13:30,200
If you were in the same metaphor, I'd like to say where I actually

286
00:13:30,200 --> 00:13:35,200
think the sort of the, the act of software architecture comes in.

287
00:13:35,200 --> 00:13:39,500
Basically what I think it comes in, as more like urban planner,

288
00:13:39,700 --> 00:13:41,100
honestly, right?

289
00:13:41,200 --> 00:13:44,600
Like, I think urban planner is actually the job that we're actually

290
00:13:44,600 --> 00:13:48,800
doing when we talk about software architecture architect, right?

291
00:13:48,900 --> 00:13:49,200
Whatever.

292
00:13:49,200 --> 00:13:51,400
The architecture is Right.

293
00:13:51,500 --> 00:13:51,800
Wow.

294
00:13:52,000 --> 00:13:53,600
We're just, we're just having all kinds of

295
00:13:56,600 --> 00:13:59,300
I don't even I don't even know how to erase that we're having like

296
00:13:59,300 --> 00:14:00,500
spelling problems.

297
00:14:00,800 --> 00:14:01,500
All right, let's see.

298
00:14:01,500 --> 00:14:02,600
Do we have an eraser tool?

299
00:14:02,600 --> 00:14:03,800
Is there a way to erase things?

300
00:14:03,800 --> 00:14:06,100
I don't even know if there is help me.

301
00:14:06,300 --> 00:14:09,300
Help me create a, I should really practice with this program first.

302
00:14:09,300 --> 00:14:12,200
It's the only one that seemed to actually be working for us.

303
00:14:12,900 --> 00:14:15,600
So I assume that it's the one.

304
00:14:15,700 --> 00:14:16,700
Is that not selection.

305
00:14:16,900 --> 00:14:18,100
How do we select things?

306
00:14:19,500 --> 00:14:20,200
I don't even know.

307
00:14:22,100 --> 00:14:22,900
All right, fine.

308
00:14:22,900 --> 00:14:26,000
We'll just we'll just undo their you've made me do it.

309
00:14:26,000 --> 00:14:26,400
Carita.

310
00:14:26,500 --> 00:14:27,200
Okay, there we go.

311
00:14:28,800 --> 00:14:34,300
So if I have architect, wow, it's just like I can't draw today.

312
00:14:34,600 --> 00:14:35,400
All right, there we go.

313
00:14:35,600 --> 00:14:38,700
So if we have an urban planner, we have Architects, we have

314
00:14:38,700 --> 00:14:40,300
contractors, right?

315
00:14:43,100 --> 00:14:46,300
I actually think of what people call software architecture as being up

316
00:14:46,300 --> 00:14:46,700
here.

317
00:14:47,000 --> 00:14:50,200
I think that this is like programming, right?

318
00:14:51,600 --> 00:14:53,100
This is design.

319
00:14:54,000 --> 00:14:54,600
Right?

320
00:14:55,200 --> 00:14:57,700
And this is like the compiler, right?

321
00:14:57,700 --> 00:14:59,800
So basically like the stuff where the stuff.

322
00:15:00,000 --> 00:15:02,400
The thing where things actually get built, that's the compiler.

323
00:15:02,400 --> 00:15:05,000
It's basically taking the blueprint, which is our code and it's

324
00:15:05,000 --> 00:15:08,300
turning it into actual something you can actually use.

325
00:15:08,400 --> 00:15:08,800
Right.

326
00:15:08,800 --> 00:15:12,000
So I say this is the compiler, it's not programmers taking a blueprint

327
00:15:12,000 --> 00:15:12,800
from a designer.

328
00:15:12,900 --> 00:15:15,200
This is actually what the compiler does.

329
00:15:15,600 --> 00:15:19,500
The architect job in real in like real life where you're making this

330
00:15:19,500 --> 00:15:20,900
blueprint that's programming.

331
00:15:21,300 --> 00:15:24,000
And the reason that I think that's like, actually what we do day to

332
00:15:24,000 --> 00:15:27,300
day when we sit down to program is because programs are very, very

333
00:15:27,300 --> 00:15:28,700
malleable, right?

334
00:15:28,700 --> 00:15:29,900
The reason that architects

335
00:15:30,000 --> 00:15:34,000
In the real world don't program, you know, don't change their

336
00:15:34,000 --> 00:15:35,200
blueprints continuously.

337
00:15:35,200 --> 00:15:37,300
As they build a building is because it's impossible to do.

338
00:15:37,300 --> 00:15:38,500
So, it's much too costly.

339
00:15:40,600 --> 00:15:42,800
It's not because it's better, right?

340
00:15:42,900 --> 00:15:47,200
It's not because it's easier to have to pre-plan entire building.

341
00:15:47,600 --> 00:15:51,900
Before you build it, if cost was an time were no issue at all.

342
00:15:52,200 --> 00:15:54,900
You would much rather have the architect.

343
00:15:54,900 --> 00:15:57,900
Be able to just constantly fuss with the structure of the building

344
00:15:57,900 --> 00:15:59,900
through its entire production.

345
00:16:00,000 --> 00:16:01,900
So they could build the lobby.

346
00:16:01,900 --> 00:16:05,600
See that the lobby was like oriented, not quite right to the Sun.

347
00:16:05,800 --> 00:16:09,100
So like change it and just move the lobby over to a new place so that

348
00:16:09,100 --> 00:16:10,300
it gets better sought, right.

349
00:16:10,300 --> 00:16:11,000
That's what they would.

350
00:16:11,100 --> 00:16:14,100
They would love to be able to do that, but they can't because building

351
00:16:14,100 --> 00:16:17,100
things in the real world is just cost, too much money and takes too

352
00:16:17,100 --> 00:16:17,800
much time.

353
00:16:18,000 --> 00:16:21,900
So the act of pre-planning, the architecture of a building is entirely

354
00:16:21,900 --> 00:16:25,500
because of real-world constraints in programming, we have much more

355
00:16:25,500 --> 00:16:26,400
malleable.

356
00:16:27,400 --> 00:16:28,600
Structures of things.

357
00:16:29,100 --> 00:16:32,600
So the concept that we would want to do what they do and fix, you

358
00:16:32,600 --> 00:16:36,300
know, sort of the blueprint ahead of time just doesn't hold water.

359
00:16:36,300 --> 00:16:39,400
We want our thing to always be malleable because we will be able to do

360
00:16:39,400 --> 00:16:40,700
a much better job.

361
00:16:40,800 --> 00:16:43,700
Just like an architect would be able to do a much better job designing

362
00:16:43,700 --> 00:16:48,600
their building if they had the ability to constantly mutate it, right.

363
00:16:48,900 --> 00:16:51,300
So I think that's actually what we're doing here.

364
00:16:51,500 --> 00:16:55,200
And I think we would apply the same principles during programming.

365
00:16:55,300 --> 00:16:56,800
Like I talk a lot about

366
00:16:58,000 --> 00:17:00,200
You know compression oriented programming right?

367
00:17:00,200 --> 00:17:03,000
Where we sort of just flat things out and then we see how they take

368
00:17:03,000 --> 00:17:05,500
shape and then we sort of abstract them as necessary.

369
00:17:05,500 --> 00:17:08,599
And like, you know, rework things, all that sort of stuff very fluid.

370
00:17:08,700 --> 00:17:09,599
I think that's the same way.

371
00:17:09,599 --> 00:17:10,300
You would build a building.

372
00:17:10,300 --> 00:17:13,099
If you could write, it just would result in buildings that were so

373
00:17:13,099 --> 00:17:16,700
much better than what we have today for the same basic amount of time

374
00:17:16,800 --> 00:17:21,599
because again mutating code isn't really that difficult as long as you

375
00:17:21,599 --> 00:17:25,200
don't try to prematurely sort of factor it into pieces.

376
00:17:26,000 --> 00:17:27,700
So this is actually

377
00:17:27,800 --> 00:17:31,200
Part when we talk about architecture and I feel like you're really

378
00:17:31,200 --> 00:17:32,600
more like an urban planner, right?

379
00:17:32,600 --> 00:17:35,600
You're really one level above blueprint.

380
00:17:35,600 --> 00:17:37,200
You're not talking about a specific building.

381
00:17:37,400 --> 00:17:40,600
You're talking about like how the City Works in some sense like

382
00:17:40,600 --> 00:17:41,300
zoning.

383
00:17:42,500 --> 00:17:43,400
This type of thing.

384
00:17:43,400 --> 00:17:46,500
How tall one building can be versus another because of various

385
00:17:46,500 --> 00:17:47,800
concerns that sort of stuff.

386
00:17:48,800 --> 00:17:49,800
Why do I say that?

387
00:17:50,200 --> 00:17:50,800
I say that.

388
00:17:50,800 --> 00:17:54,100
Because if you look at how people normally talk about software

389
00:17:54,100 --> 00:17:57,700
architecture, when they like just talk about, I'm an architect.

390
00:17:57,700 --> 00:17:58,300
This thing.

391
00:17:58,300 --> 00:17:59,800
I'm telling you about the architecture of thing.

392
00:18:00,000 --> 00:18:01,000
What do they draw?

393
00:18:01,100 --> 00:18:04,100
They draw, they don't draw things and look anything like blueprints

394
00:18:04,100 --> 00:18:05,700
compared to code, right?

395
00:18:05,700 --> 00:18:08,100
They don't, they don't draw something that essentially sketches out

396
00:18:08,100 --> 00:18:12,700
the exact structure of the program as the CPU X would execute it or

397
00:18:12,700 --> 00:18:13,500
anything like that.

398
00:18:13,800 --> 00:18:16,500
What they do is they draw these kind of diagrams, they'll do stuff

399
00:18:16,500 --> 00:18:19,100
like they'll draw something that looks like this, right?

400
00:18:19,100 --> 00:18:22,400
They'll say, oh, here's the win32 part, you know, and here's the

401
00:18:22,400 --> 00:18:24,000
engine, right?

402
00:18:24,400 --> 00:18:28,100
And here is the, you know, the, this is the game and here is this

403
00:18:28,100 --> 00:18:29,800
library that we licensed or

404
00:18:30,000 --> 00:18:32,300
Whatever and it calls down to this, right?

405
00:18:32,300 --> 00:18:37,100
They draw what essentially look like street maps, right?

406
00:18:37,100 --> 00:18:38,900
I mean, that's that's what people do.

407
00:18:38,900 --> 00:18:40,200
When they talk about architecture.

408
00:18:40,200 --> 00:18:45,900
They make diagrams that are very much about traffic flow and the rough

409
00:18:45,900 --> 00:18:49,200
relationship of things to each other and what their responsibilities

410
00:18:49,200 --> 00:18:49,500
are.

411
00:18:49,500 --> 00:18:49,900
That's it.

412
00:18:49,900 --> 00:18:51,700
That's what they really talk about when they're talking about

413
00:18:51,700 --> 00:18:52,400
architecture.

414
00:18:52,400 --> 00:18:52,900
Right?

415
00:18:54,100 --> 00:18:57,900
And I think that's the natural intuitive thing to do and I think it's

416
00:18:57,900 --> 00:18:59,200
the right thing to do.

417
00:18:59,300 --> 00:18:59,900
So when you're thinking

418
00:19:00,000 --> 00:19:02,900
Thinking about architecture in software.

419
00:19:03,000 --> 00:19:04,600
Don't think about architect.

420
00:19:04,600 --> 00:19:07,700
Don't, don't think about that in the real world.

421
00:19:07,700 --> 00:19:08,000
Right?

422
00:19:08,000 --> 00:19:10,000
Don't think about that metaphor, because it's wrong.

423
00:19:10,300 --> 00:19:11,800
When we talk about sore for architecture.

424
00:19:11,800 --> 00:19:14,600
Unfortunately, we're talking actually about a completely different

425
00:19:14,600 --> 00:19:16,100
thing in the real world.

426
00:19:16,200 --> 00:19:21,300
We're talking about the high-level zoning and traffic strategy for our

427
00:19:21,300 --> 00:19:22,300
Virtual City, right?

428
00:19:22,300 --> 00:19:27,700
We're talking about thinking through roughly where each thing has to

429
00:19:27,700 --> 00:19:29,800
be and what it should do and

430
00:19:29,900 --> 00:19:32,500
And how much it's going to cost us and how efficient it's going to be

431
00:19:32,500 --> 00:19:36,200
for us to move things between them, that is really what we're talking

432
00:19:36,200 --> 00:19:36,500
about.

433
00:19:36,500 --> 00:19:37,100
Right?

434
00:19:37,100 --> 00:19:41,700
And I feel like that's an important thing to kind of get straight

435
00:19:41,700 --> 00:19:45,100
especially if you're a beginner, because a lot of times, you're going

436
00:19:45,100 --> 00:19:49,600
to see people use this architecture term and they're using it to talk

437
00:19:49,600 --> 00:19:51,900
about many different things that aren't all the same.

438
00:19:51,900 --> 00:19:54,800
And some of them are good things to pay attention to.

439
00:19:54,800 --> 00:19:57,300
Some of them are actually very deleterious and you should avoid.

440
00:19:57,300 --> 00:19:59,300
And so I just want to kind of

441
00:20:00,000 --> 00:20:01,000
It a little bit differently.

442
00:20:01,000 --> 00:20:03,000
That's typically framed as we go into this.

443
00:20:03,400 --> 00:20:05,900
So that it's a little clearer in people's heads who maybe aren't

444
00:20:05,900 --> 00:20:07,400
familiar with some of these processes.

445
00:20:11,000 --> 00:20:11,500
Okay.

446
00:20:14,500 --> 00:20:17,200
So what are we trying to do?

447
00:20:17,200 --> 00:20:21,500
I'm going to now going to go ahead and get a little more specific.

448
00:20:21,500 --> 00:20:22,800
We're in metaphor land here.

449
00:20:22,800 --> 00:20:26,700
And I'm I only wanted to do that because people are often talking in

450
00:20:26,700 --> 00:20:29,600
these metaphors and I kind of wanted to confront those up front.

451
00:20:29,600 --> 00:20:32,100
But from now on we don't really need much in the way of metaphor.

452
00:20:32,100 --> 00:20:33,700
It's because I can talk about actual specifics.

453
00:20:33,700 --> 00:20:35,300
Now that you know, that we're trying to do.

454
00:20:36,700 --> 00:20:40,800
So, basically in software architecture, just architecture in general.

455
00:20:41,600 --> 00:20:48,200
You are trying to come up with strategies for doing what essentially

456
00:20:48,200 --> 00:20:51,300
amounts to separation of code.

457
00:20:51,300 --> 00:20:52,000
Right?

458
00:20:52,000 --> 00:20:55,000
And there's a number of reasons that we do this but basically

459
00:20:55,000 --> 00:20:59,600
separation or boundaries, right?

460
00:21:00,000 --> 00:21:02,000
Great, depending on how you want to think of this.

461
00:21:02,400 --> 00:21:06,600
This is mostly what we're doing when we're talking about code.

462
00:21:06,600 --> 00:21:08,200
And again it fits with the urban planning thing.

463
00:21:08,200 --> 00:21:09,000
Very concisely.

464
00:21:09,000 --> 00:21:12,900
It's about drawing that property map that says, here's where

465
00:21:12,900 --> 00:21:14,200
everything is going to live.

466
00:21:14,200 --> 00:21:17,800
They don't overlap cures, the traffic patterns that connect them,

467
00:21:17,900 --> 00:21:18,500
right?

468
00:21:19,000 --> 00:21:23,100
And here is what each thing is supposed to be about.

469
00:21:23,100 --> 00:21:24,200
You know, what is this?

470
00:21:24,200 --> 00:21:25,500
What is this section of our city?

471
00:21:25,500 --> 00:21:26,600
Do you know that sort of thing?

472
00:21:27,200 --> 00:21:31,200
Architecture is mostly about defining these and the reason that you

473
00:21:31,200 --> 00:21:37,200
want to Define them are usually for either reuse, right?

474
00:21:37,200 --> 00:21:40,000
That's a big one because I want to be able to have components that are

475
00:21:40,000 --> 00:21:44,000
easy to reuse for example, so maybe I want to separate my code in a

476
00:21:44,000 --> 00:21:48,300
way that, for example, on handmade hero with our win32 prototyping

477
00:21:48,300 --> 00:21:49,500
layer, right now.

478
00:21:49,500 --> 00:21:52,200
It really doesn't know very much about the game whatsoever.

479
00:21:52,200 --> 00:21:55,300
So, if we wanted to turn that into a reusable platform layer, it

480
00:21:55,300 --> 00:21:56,900
wouldn't take very much work because

481
00:21:57,200 --> 00:22:00,100
Done a good job, separating it out from, what's going to be the game.

482
00:22:00,600 --> 00:22:04,200
So, if you think about that, that is a compelling reason to draw

483
00:22:04,200 --> 00:22:09,300
separation, you know, to put hard separation into large chunks of your

484
00:22:09,300 --> 00:22:13,000
code because then you can take those and reuse them and don't have to

485
00:22:13,000 --> 00:22:13,700
write them again.

486
00:22:13,800 --> 00:22:18,600
That's one reason, right, another reason is division of labor.

487
00:22:18,900 --> 00:22:19,400
Right?

488
00:22:19,800 --> 00:22:23,800
So basically, if I think about, you know, trying to write this code,

489
00:22:23,800 --> 00:22:25,900
handmade hero, I'm writing it all by myself.

490
00:22:26,500 --> 00:22:27,000
So that's

491
00:22:27,100 --> 00:22:28,700
It's, you know, not really a problem.

492
00:22:28,700 --> 00:22:33,200
But let's say I had two, three, four programmers on this team or, you

493
00:22:33,200 --> 00:22:36,500
know, worst-case, you've got some like, project that's like an

494
00:22:36,500 --> 00:22:37,300
operating system product.

495
00:22:37,300 --> 00:22:39,100
It's got 500 people on it or something.

496
00:22:39,700 --> 00:22:43,000
Well, we need to kind of have different people working on different

497
00:22:43,000 --> 00:22:48,100
stuff so that the communication requirements between them doesn't

498
00:22:48,100 --> 00:22:50,600
overwhelm the entire project, right?

499
00:22:50,600 --> 00:22:54,100
If each of us is all working on, whatever code we want, anytime we

500
00:22:54,100 --> 00:22:56,900
want, when things start to get,

501
00:22:57,200 --> 00:22:59,800
Scale up in the number of programmers that becomes prohibitively

502
00:22:59,800 --> 00:23:02,900
expensive because we would constantly not know what each person is

503
00:23:02,900 --> 00:23:04,800
doing and we constantly work at Cross purposes.

504
00:23:05,100 --> 00:23:06,100
So division of labor is.

505
00:23:06,100 --> 00:23:08,900
Another reason that software architecture typically comes to place

506
00:23:09,800 --> 00:23:14,300
another one is simply like mental Clarity, right?

507
00:23:14,800 --> 00:23:19,000
And it's weird to list that one but it really is a sort of important

508
00:23:19,000 --> 00:23:24,000
part of things which is that when you tackle very large programs and

509
00:23:24,000 --> 00:23:27,000
this actually is true, regardless of how many people you have.

510
00:23:27,100 --> 00:23:29,800
Whether there is a division of labor or not, when you tackle, very

511
00:23:29,800 --> 00:23:30,800
large programs.

512
00:23:31,900 --> 00:23:38,000
There is a challenge to most people, most programmers in keeping the

513
00:23:38,000 --> 00:23:39,800
entire thing in your head.

514
00:23:40,500 --> 00:23:44,300
As you get up to larger and larger programs in larger larger

515
00:23:44,300 --> 00:23:45,200
complexities.

516
00:23:45,600 --> 00:23:51,800
Sometimes your architecture is more about keeping things separate so

517
00:23:51,800 --> 00:23:54,400
you don't have to consider them at once.

518
00:23:55,100 --> 00:23:57,000
And the reason I say that is because if you imagine

519
00:23:57,100 --> 00:23:59,900
that there was no separation between anything in the code and every

520
00:24:00,000 --> 00:24:03,600
Little thing has a bearing on something else and how it works.

521
00:24:04,200 --> 00:24:09,200
If I'm if that is constantly in flux, then any change I make to my

522
00:24:09,200 --> 00:24:13,900
program has consequences for the rest of the program and that is

523
00:24:13,900 --> 00:24:16,400
essentially you could think of it as an N squared.

524
00:24:16,400 --> 00:24:17,500
We haven't talked about this yet.

525
00:24:17,500 --> 00:24:20,900
But for those of you who know what that is, you could think of this as

526
00:24:20,900 --> 00:24:25,700
an N squared problem for your brain, your brain, every time it makes a

527
00:24:25,700 --> 00:24:29,200
change, has to go consider all other possible.

528
00:24:29,200 --> 00:24:29,800
Port parts.

529
00:24:30,000 --> 00:24:30,600
The code.

530
00:24:31,100 --> 00:24:34,900
And so for every, you know, for the total number of changes that you

531
00:24:34,900 --> 00:24:38,700
have to do for the project, each piece of code that you make a change

532
00:24:38,700 --> 00:24:40,500
to essentially affects all the other pieces of code.

533
00:24:40,500 --> 00:24:45,500
So if the pieces of code were numbered n then each, you know, if you

534
00:24:45,500 --> 00:24:49,600
have to do a change to however my I guess it's it's it's and square

535
00:24:49,600 --> 00:24:52,100
but it's really, I guess you might even say it's worse than N squared

536
00:24:52,200 --> 00:24:54,600
because if n is the number of pieces of code and M is the number of

537
00:24:54,600 --> 00:24:57,100
changes which is often actually higher than n.

538
00:24:57,800 --> 00:24:59,800
So it's really actually worse than N squared, but it's

539
00:25:00,000 --> 00:25:00,900
Easton squared.

540
00:25:01,300 --> 00:25:04,400
Because the number of changes times, the number of pieces of code is

541
00:25:04,400 --> 00:25:07,700
what you end up with as you get towards the end of the project is, is

542
00:25:07,700 --> 00:25:09,400
crazy complicated, right?

543
00:25:09,500 --> 00:25:11,900
Every time you make a change, you have to consider every piece of code

544
00:25:11,900 --> 00:25:13,500
in the system and how it might affect it.

545
00:25:13,800 --> 00:25:19,000
So, sometimes we do that kind of Separation simply not because there's

546
00:25:19,000 --> 00:25:23,900
any actual practical reason, but rather just because doing anything

547
00:25:23,900 --> 00:25:29,100
less would be simply too much brain power for to make progress.

548
00:25:29,300 --> 00:25:29,600
And

549
00:25:29,900 --> 00:25:32,400
Either you will spend too much time thinking about each individual

550
00:25:32,400 --> 00:25:35,300
change and that will slow your rate down or you'll just make mistakes

551
00:25:35,400 --> 00:25:38,200
because you forget to consider certain pieces of the code that are

552
00:25:38,200 --> 00:25:39,600
depending on the thing that you're changing.

553
00:25:43,400 --> 00:25:43,800
Okay.

554
00:25:45,800 --> 00:25:48,900
So this is typically why, right?

555
00:25:48,900 --> 00:25:52,500
This is why we do suffer architecture, right?

556
00:25:53,700 --> 00:25:56,400
And then we also have other things to think about here.

557
00:25:57,100 --> 00:26:02,800
Which if that's the why this is sort of the how, which is things we

558
00:26:02,800 --> 00:26:08,700
want to accomplish or I should say how it's not really how this is

559
00:26:08,700 --> 00:26:10,500
sort of, like, our goals.

560
00:26:10,500 --> 00:26:15,300
I guess you might say in terms of like while we are when we are doing

561
00:26:15,300 --> 00:26:16,900
these things, right?

562
00:26:17,700 --> 00:26:20,700
When we are trying to accomplish these things, even goals is a bad

563
00:26:20,700 --> 00:26:21,100
word.

564
00:26:21,200 --> 00:26:22,300
I don't know what I'm going to call this.

565
00:26:22,500 --> 00:26:23,100
I'm going to list them.

566
00:26:23,300 --> 00:26:26,400
First and then maybe we can think of what the word is because I'm not

567
00:26:26,400 --> 00:26:29,100
sure what the word is that quite encompasses, what I'm talking about.

568
00:26:30,800 --> 00:26:32,600
But basically, I guess, you know what?

569
00:26:32,600 --> 00:26:35,500
We could say, me could maybe say there are some metrics, there are

570
00:26:35,500 --> 00:26:37,300
some things we could measure right.

571
00:26:37,300 --> 00:26:40,900
There are some measurements that we're trying to think about.

572
00:26:40,900 --> 00:26:46,300
As we're doing this, that have some bearing on when we do these, these

573
00:26:46,300 --> 00:26:47,800
sorts of separations.

574
00:26:48,800 --> 00:26:53,100
And typically, these are things like, like, sort of temporal,

575
00:26:53,100 --> 00:26:55,200
coupling, for example, right?

576
00:26:55,300 --> 00:26:59,800
Like when I am making, and you can think of this, this is

577
00:27:00,000 --> 00:27:03,000
Like, thinking about the sort of the quality of our little city that

578
00:27:03,000 --> 00:27:03,700
we're building here.

579
00:27:05,300 --> 00:27:07,700
One thing we could think about when we're actually doing this thing,

580
00:27:07,700 --> 00:27:10,500
and we're kind of starting to break up stuff into pieces.

581
00:27:11,300 --> 00:27:14,100
We have a bunch of different things that we need to think about

582
00:27:14,300 --> 00:27:15,400
between those pieces.

583
00:27:15,500 --> 00:27:19,600
So, temporal, coupling is like, I have two pieces that I've sort of

584
00:27:19,800 --> 00:27:20,500
separated.

585
00:27:20,500 --> 00:27:22,200
I've drawn boundaries between them.

586
00:27:23,700 --> 00:27:25,100
When they occur.

587
00:27:25,300 --> 00:27:28,800
And I mean literally the time at which they can occur in the program

588
00:27:30,100 --> 00:27:32,100
that may not be arbitrary.

589
00:27:32,600 --> 00:27:37,600
An example would be lets say I have a physics system and I've drawn a

590
00:27:37,600 --> 00:27:40,000
boundary around that, right?

591
00:27:40,000 --> 00:27:41,700
I've said this is one component.

592
00:27:41,700 --> 00:27:43,700
So I've separated it out, right?

593
00:27:43,900 --> 00:27:46,500
And I have a renderer, right?

594
00:27:47,700 --> 00:27:49,300
And I've separated that out.

595
00:27:49,300 --> 00:27:52,300
Oops, renderer, right?

596
00:27:52,300 --> 00:27:56,100
So this is responsible for drawing the game, you know, and this is

597
00:27:56,100 --> 00:27:58,200
responsible for moving the things in the game.

598
00:27:58,700 --> 00:27:59,200
Okay.

599
00:28:00,200 --> 00:28:02,900
Well, if that's the case, then.

600
00:28:02,900 --> 00:28:07,000
Obviously, I can't just run these two things completely randomly.

601
00:28:07,400 --> 00:28:11,500
There's some kind of a temporal coupling between these two that says

602
00:28:11,500 --> 00:28:16,500
something along the lines of this has to produce data, right?

603
00:28:16,500 --> 00:28:17,400
That this can read.

604
00:28:17,800 --> 00:28:19,000
Or something, right?

605
00:28:19,000 --> 00:28:21,700
Because if this is what's moving things and this has to render them,

606
00:28:21,900 --> 00:28:24,700
then, we know that we can't render the stuff for a frame until the

607
00:28:24,700 --> 00:28:25,100
physics.

608
00:28:25,100 --> 00:28:28,600
Has computed, what that thing has done for the frame, right?

609
00:28:29,100 --> 00:28:32,300
So there's all there's often a temporal coupling in there.

610
00:28:32,500 --> 00:28:33,200
Similarly.

611
00:28:33,500 --> 00:28:35,600
There's like layout coupling as well.

612
00:28:35,800 --> 00:28:36,400
Right?

613
00:28:37,000 --> 00:28:41,800
Like, basically, if, if this has to spit out stuff that this can read,

614
00:28:41,800 --> 00:28:44,800
well then there's a directional coupling, this way that basically

615
00:28:44,800 --> 00:28:47,400
says, ok, whatever data this.

616
00:28:47,600 --> 00:28:48,600
Spits out.

617
00:28:48,700 --> 00:28:52,500
This thing is now dependent on that format of the data and that could

618
00:28:52,500 --> 00:28:54,000
have implications for performance.

619
00:28:54,000 --> 00:28:56,400
Maybe this thing wanted in a different way, and this thing wants it in

620
00:28:56,400 --> 00:28:56,900
a different way.

621
00:28:56,900 --> 00:28:59,600
And now we have to figure out, do we translate between the two ways or

622
00:28:59,600 --> 00:29:02,200
it is we try to make one work with the other ones way and blah blah

623
00:29:02,200 --> 00:29:02,900
blah, right?

624
00:29:03,100 --> 00:29:06,700
So we can have a coupling like in the layout

625
00:29:07,600 --> 00:29:09,400
Of things, right?

626
00:29:09,800 --> 00:29:14,500
We can also, you know, have some other metrics up here, right?

627
00:29:14,900 --> 00:29:18,700
Which is sort of, just the, I don't know what you want to call it.

628
00:29:18,800 --> 00:29:23,000
We could call it sort of an ideological coupling, right?

629
00:29:23,200 --> 00:29:26,400
Which is to say that we met, especially when it comes down to this

630
00:29:26,400 --> 00:29:27,300
reuse thing.

631
00:29:27,800 --> 00:29:32,300
We may have some things to think about that are just about how, what,

632
00:29:32,300 --> 00:29:37,200
what is sort of the way in general, that these things work and

633
00:29:37,400 --> 00:29:40,700
Does that have a bearing on where we could possibly use them?

634
00:29:40,700 --> 00:29:43,700
Some examples of that would be like, you know, is this thing

635
00:29:43,700 --> 00:29:46,300
multi-threaded does it have to work with a job system?

636
00:29:46,300 --> 00:29:47,200
That sort of thing?

637
00:29:47,600 --> 00:29:48,600
There may be stuff.

638
00:29:48,600 --> 00:29:53,200
That's just how you wrote the code in general internal to this has

639
00:29:53,400 --> 00:29:58,600
sort of a bearing on what sorts of systems it can slot into just you

640
00:29:58,600 --> 00:29:59,700
know, you know.

641
00:30:00,000 --> 00:30:03,800
Basis, another one would be, you know, so some examples there would be

642
00:30:03,800 --> 00:30:07,200
like threading memory.

643
00:30:07,200 --> 00:30:10,100
Like how, what kind of weight is look at memory.

644
00:30:10,100 --> 00:30:13,100
How does it use that width of computation?

645
00:30:13,100 --> 00:30:14,300
So like, is it Cindy?

646
00:30:14,300 --> 00:30:16,100
Does it use SSE, these sorts of things?

647
00:30:16,100 --> 00:30:17,600
Can it, you know, those sorts of things?

648
00:30:17,900 --> 00:30:18,600
When we write things.

649
00:30:18,600 --> 00:30:22,700
We've got a bunch of things that, that sort of have to that may tie

650
00:30:22,700 --> 00:30:27,500
code down, to a particular way of working that we need to be aware of,

651
00:30:27,500 --> 00:30:28,100
right?

652
00:30:28,100 --> 00:30:29,800
So we have lots of, you know, stuff,

653
00:30:30,000 --> 00:30:30,500
To think about here.

654
00:30:30,500 --> 00:30:33,300
And this is by no means exhaustive, but it's just an example of the

655
00:30:33,300 --> 00:30:37,300
sorts of stuff that we're thinking about when we go to actually do

656
00:30:37,300 --> 00:30:38,700
sort of the software architecture.

657
00:30:38,700 --> 00:30:39,200
If you will.

658
00:30:40,500 --> 00:30:42,800
Now, there's one more that I'm going to put on here, which is not a

659
00:30:42,800 --> 00:30:44,400
coupling thing and this is the metrics.

660
00:30:45,000 --> 00:30:49,800
But this is basically like I'm going to just say fluidity, right?

661
00:30:50,300 --> 00:30:54,800
Fluidity is very abstract and difficult to measure.

662
00:30:54,800 --> 00:30:57,900
It's one of those things where you know, it when you see it, but it's

663
00:30:57,900 --> 00:30:59,800
pretty hard to say like what you would

664
00:31:00,000 --> 00:31:05,700
Sure, exactly or how you could really say ahead of time what it what

665
00:31:05,700 --> 00:31:07,000
would or would not be fluid?

666
00:31:09,400 --> 00:31:14,600
But what I mean by that is there are architectures that may do very

667
00:31:14,600 --> 00:31:19,100
well by all of the metrics that you might look at here like in terms

668
00:31:19,100 --> 00:31:22,900
of coupling and you know, they perform well, they're efficient.

669
00:31:22,900 --> 00:31:24,800
They were written well internally, that sort of thing.

670
00:31:24,800 --> 00:31:26,700
So everything about them is good.

671
00:31:27,000 --> 00:31:27,800
There's nothing.

672
00:31:28,700 --> 00:31:32,400
The architecture is not doing anything wrong in terms of providing

673
00:31:32,800 --> 00:31:39,100
these things to that in terms of setting the stage for the particular.

674
00:31:39,200 --> 00:31:43,400
Parts that it didn't have to get implemented inside that architecture.

675
00:31:43,600 --> 00:31:44,400
It's done a good job.

676
00:31:44,400 --> 00:31:47,900
Setting the stage for it to all be successful and it can be written

677
00:31:47,900 --> 00:31:49,900
very successfully and you're done.

678
00:31:49,900 --> 00:31:50,500
Right?

679
00:31:51,000 --> 00:31:59,500
But it might be very fragile or I should say perhaps to sort of stuck

680
00:32:00,000 --> 00:32:01,900
in the way that it's designed such that.

681
00:32:01,900 --> 00:32:05,400
If for some reason, some of those architecture decisions, turn out to

682
00:32:05,400 --> 00:32:06,200
be wrong.

683
00:32:07,800 --> 00:32:11,700
Changing them becomes disastrously difficult, right?

684
00:32:11,800 --> 00:32:13,000
It could be that you've made it.

685
00:32:13,000 --> 00:32:14,500
Such that everything has to work.

686
00:32:14,500 --> 00:32:17,200
The way, the architecture was designed and any change to it.

687
00:32:17,200 --> 00:32:18,500
Everything comes crashing down.

688
00:32:18,900 --> 00:32:23,800
Then there may be other architectures, which, you know, maybe don't

689
00:32:23,800 --> 00:32:26,000
score, quite as highly on some of the other things you might measure

690
00:32:26,000 --> 00:32:29,900
but they may have a great deal of fluidity in them where they can

691
00:32:29,900 --> 00:32:32,600
basically handle like, oh, we got kind of part way through it and

692
00:32:32,600 --> 00:32:33,000
turned out.

693
00:32:33,000 --> 00:32:34,000
This was a bad idea.

694
00:32:34,000 --> 00:32:37,100
And so we, you know, could rework it very quickly, that sort of thing.

695
00:32:38,000 --> 00:32:41,400
That can be very, very valuable on projects, especially if you're not

696
00:32:41,400 --> 00:32:42,700
sure what the architecture should be.

697
00:32:42,700 --> 00:32:45,500
And the first time you do any type of system.

698
00:32:45,600 --> 00:32:47,800
You're probably not sure what the architecture is going to be.

699
00:32:47,800 --> 00:32:52,000
And so that fluidity much like with, you know, when I say this sort of

700
00:32:52,000 --> 00:32:55,300
the semantic, the sort of the compression oriented programming, right?

701
00:32:56,700 --> 00:32:59,700
Having the ability to constantly rework things quickly.

702
00:33:00,000 --> 00:33:02,500
In your architecture is very valuable as well.

703
00:33:02,500 --> 00:33:03,400
If you can get it.

704
00:33:03,400 --> 00:33:06,300
Now sometimes because you're at such a you're talking about such big

705
00:33:06,300 --> 00:33:09,600
pieces that may not be easy to do.

706
00:33:09,600 --> 00:33:10,500
That may be very difficult.

707
00:33:10,500 --> 00:33:15,200
And so it's by no means necessarily true that a architecture that

708
00:33:15,200 --> 00:33:16,900
isn't fluid anymore is bad.

709
00:33:16,900 --> 00:33:19,500
It may be just that you've gotten to the point of complexity where

710
00:33:19,500 --> 00:33:20,900
fluid, he's just not possible anymore.

711
00:33:20,900 --> 00:33:25,200
And so again, one of the things you try to do much like with the

712
00:33:25,200 --> 00:33:29,300
Samantha programming approach, is you try not to lock things down in

713
00:33:29,300 --> 00:33:29,400
the

714
00:33:30,000 --> 00:33:33,500
Sure any earlier than you have to until you've sort of tried some

715
00:33:33,500 --> 00:33:39,400
things and seeing you know that they work at least in one case before

716
00:33:39,400 --> 00:33:41,900
you start to make steps in those directions, specifically for the

717
00:33:41,900 --> 00:33:46,000
same, the same exact reason you don't do it when you're when you're

718
00:33:46,000 --> 00:33:48,400
talking about just regular ordinary code, right?

719
00:33:52,200 --> 00:33:57,600
So, with that in mind, let's talk about a few specific sorts of things

720
00:33:57,600 --> 00:33:57,900
here.

721
00:33:59,500 --> 00:34:01,300
I think it's, I think that's a good enough.

722
00:34:01,300 --> 00:34:05,600
Sort of a good quick background on software architecture.

723
00:34:05,600 --> 00:34:06,100
And what?

724
00:34:06,100 --> 00:34:07,300
What sort of going on there.

725
00:34:07,500 --> 00:34:10,100
So I'm going to talk about the actual game architecture now.

726
00:34:10,699 --> 00:34:12,300
And and sort of how all that applies.

727
00:34:13,500 --> 00:34:17,500
All right, so game architecture, you now.

728
00:34:17,500 --> 00:34:20,300
No one part of how I think game architecture should go.

729
00:34:20,600 --> 00:34:23,900
And again, like architecture is one of those things that you kind of

730
00:34:24,199 --> 00:34:28,699
build up over time techniques on how you like to architect things much

731
00:34:28,699 --> 00:34:31,600
like how you build up over time techniques on how you like to write

732
00:34:31,600 --> 00:34:34,300
code at the lower levels.

733
00:34:34,500 --> 00:34:38,600
So what I wanted to kind of talk about is how that sort of game

734
00:34:38,600 --> 00:34:39,800
architecture process works.

735
00:34:40,100 --> 00:34:42,699
And one thing that you've already seen, though is you've kind of seen

736
00:34:42,699 --> 00:34:47,900
me cheat a little bit and this is because I don't even know how to not

737
00:34:47,900 --> 00:34:50,300
do the cheating anymore, but basically

738
00:34:50,500 --> 00:34:54,800
I already know what I think, is a good architecture for a prototyping

739
00:34:54,800 --> 00:34:56,500
layer and a platform layer both.

740
00:34:57,200 --> 00:35:01,700
So, you know, we have down at the very bottom of everything, right?

741
00:35:01,800 --> 00:35:03,300
We've got win32.

742
00:35:03,800 --> 00:35:08,100
And we've got, you know, opengl or direct3d these sorts of things,

743
00:35:08,300 --> 00:35:08,800
right?

744
00:35:09,100 --> 00:35:11,100
Oops, direct3d.

745
00:35:12,000 --> 00:35:16,300
So we basically have some stuff underneath us that we can't do

746
00:35:16,300 --> 00:35:17,000
anything about it.

747
00:35:17,000 --> 00:35:19,800
It's there and it's designed the way it's designed, right?

748
00:35:20,500 --> 00:35:22,500
I already showed you how to basically make.

749
00:35:22,800 --> 00:35:24,300
There's a platform layer here.

750
00:35:24,400 --> 00:35:25,000
Right?

751
00:35:25,900 --> 00:35:29,500
And I already showed you basically, how I think that thing should be

752
00:35:29,500 --> 00:35:30,100
designed that.

753
00:35:30,100 --> 00:35:32,700
We didn't code a proper platform layer because like I said, we only

754
00:35:32,700 --> 00:35:35,400
did the Prototype version will do the more proper version down the

755
00:35:35,400 --> 00:35:39,800
line, but the architecture the way it's structured is roughly what I

756
00:35:39,800 --> 00:35:43,800
would normally do, you know this platform layer talks to in 32 and

757
00:35:43,800 --> 00:35:46,200
talks to whatever the graphics library is eventually right?

758
00:35:46,200 --> 00:35:46,300
Now.

759
00:35:46,300 --> 00:35:48,000
We don't, we are fortunate in that.

760
00:35:48,000 --> 00:35:50,300
We don't actually have to really do that because we're just pushing a

761
00:35:50,400 --> 00:35:50,900
a bitmap.

762
00:35:50,900 --> 00:35:53,300
So we're kind of just doing it to the win32 API, but eventually, we'll

763
00:35:53,300 --> 00:35:55,600
have to deal with that because we're going to need to use one of these

764
00:35:55,600 --> 00:35:56,900
guys for Hardware acceleration.

765
00:35:57,600 --> 00:35:59,200
So eventually this will be there.

766
00:36:00,100 --> 00:36:04,600
But, you know, we wrote this code and we basically had two ports in

767
00:36:04,600 --> 00:36:08,900
it, you know, there's game update and render was right, was game.

768
00:36:09,300 --> 00:36:15,600
I saved game update and render say, guar game update and render,

769
00:36:15,800 --> 00:36:16,400
right?

770
00:36:16,800 --> 00:36:21,700
We have game update and render and we have get sound samples, right?

771
00:36:21,800 --> 00:36:26,600
Those were the two things really where data is flowing back and forth.

772
00:36:26,900 --> 00:36:29,200
And you might actually I don't know how you

773
00:36:30,000 --> 00:36:33,200
I never find these diagrams to be all that necessary to be specific.

774
00:36:33,300 --> 00:36:35,200
I'm just going to point to them, to talk about parts.

775
00:36:35,400 --> 00:36:37,700
So I don't even care, which direction these arrows are going.

776
00:36:37,700 --> 00:36:41,700
But one way we might say, is that it actually looks like this, right?

777
00:36:41,700 --> 00:36:43,700
Because really game update, and render these things.

778
00:36:43,700 --> 00:36:45,300
Go back to the game, right?

779
00:36:45,300 --> 00:36:46,800
And get sound samples.

780
00:36:47,000 --> 00:36:47,300
Yeah.

781
00:36:48,000 --> 00:36:52,000
So basically these things call into the game.

782
00:36:52,900 --> 00:36:57,400
But really with no loss of resolution here, this is essentially what

783
00:36:57,400 --> 00:36:58,300
we've already done.

784
00:36:58,400 --> 00:36:58,900
Right?

785
00:36:59,000 --> 00:37:00,000
We have the operating system.

786
00:37:00,000 --> 00:37:01,800
This was written by Microsoft.

787
00:37:01,900 --> 00:37:05,400
All right, we have this platform layer, which we wrote the Prototype

788
00:37:05,400 --> 00:37:09,200
of, and we wrote that for the first 25 hours, right?

789
00:37:09,200 --> 00:37:10,100
That's what we did.

790
00:37:10,500 --> 00:37:14,100
And now, we're going to talk about doing this part right here, right?

791
00:37:14,600 --> 00:37:17,800
So the reason I said that I cheated is because I didn't have to go

792
00:37:17,800 --> 00:37:18,300
through this.

793
00:37:18,300 --> 00:37:22,000
The learning steps on this screen on the stream rather of how to

794
00:37:22,000 --> 00:37:22,500
design a

795
00:37:22,700 --> 00:37:23,500
In platform layer.

796
00:37:23,600 --> 00:37:25,800
I just already know how to do it because I've done it.

797
00:37:28,500 --> 00:37:30,400
Probably something like 15 times.

798
00:37:30,400 --> 00:37:30,800
I don't know.

799
00:37:30,800 --> 00:37:33,200
I've written a lot of platform layers in my day.

800
00:37:33,400 --> 00:37:37,300
So I pretty much know what makes me happy about a platform layer and I

801
00:37:37,300 --> 00:37:39,800
pretty much know exactly how I want it to look.

802
00:37:39,900 --> 00:37:43,200
So when I sit down to write a new one, it's really kind of just a rope

803
00:37:43,200 --> 00:37:44,100
process at this point.

804
00:37:44,100 --> 00:37:46,600
I just know what it should look like and what it should do.

805
00:37:46,800 --> 00:37:49,800
And it's just a question of me fussing with the OS to get it to do it.

806
00:37:49,800 --> 00:37:51,200
That's it, right.

807
00:37:52,300 --> 00:37:58,200
So I really couldn't show you anything about the architecture process

808
00:37:58,400 --> 00:38:02,200
in here because it was just a given and I couldn't even really there's

809
00:38:02,200 --> 00:38:06,300
be no way for even me to really pretend that I didn't already have a

810
00:38:06,300 --> 00:38:09,600
goal in mind because I do right with the game.

811
00:38:09,600 --> 00:38:13,100
We're going to be much more fortunate in that respect because I have

812
00:38:13,100 --> 00:38:15,300
no idea how to architect this game.

813
00:38:15,300 --> 00:38:20,400
I mean, that's not entirely true because since I've written game code

814
00:38:20,400 --> 00:38:21,900
before engaging,

815
00:38:22,100 --> 00:38:24,200
System code specifically.

816
00:38:24,600 --> 00:38:31,000
I do have experience architecting games, but every games architecture

817
00:38:31,000 --> 00:38:34,500
is usually a bit different depending on sort of what genre the game

818
00:38:34,500 --> 00:38:36,300
is, what sorts of stuff it needs to do.

819
00:38:37,000 --> 00:38:41,900
And so I don't know a priori exactly how this games architecture

820
00:38:41,900 --> 00:38:42,400
should look.

821
00:38:42,400 --> 00:38:45,900
So over the next several months as we build the game.

822
00:38:46,500 --> 00:38:49,900
I will be going through the same sort of steps that I normally go

823
00:38:49,900 --> 00:38:51,800
through to improve and

824
00:38:52,000 --> 00:38:58,900
Refine on architectures specifically, as sort of like part of the core

825
00:38:58,900 --> 00:38:59,300
gold.

826
00:38:59,300 --> 00:38:59,800
The stream is

827
00:39:00,000 --> 00:39:01,100
Show that kind of stuff.

828
00:39:01,100 --> 00:39:05,400
So we will actually be doing a lot more talking about that as we go.

829
00:39:05,600 --> 00:39:08,700
So, the only thing that I really want to talk about tonight in our

830
00:39:08,700 --> 00:39:12,000
last 20 minutes is sort of what are some of the principles of game

831
00:39:12,000 --> 00:39:15,000
architecture, things, you know, that I have learned and that I kind of

832
00:39:15,000 --> 00:39:20,300
think are true from past experience to sort of set us up for as we

833
00:39:20,300 --> 00:39:22,700
start to go through and do this kind of programming.

834
00:39:23,000 --> 00:39:24,600
What are we looking at?

835
00:39:24,600 --> 00:39:27,000
What are we trying by default first?

836
00:39:27,000 --> 00:39:29,000
What are some of the techniques that were going to use that sort of

837
00:39:29,000 --> 00:39:29,300
stuff?

838
00:39:29,300 --> 00:39:30,000
So I'm just going to

839
00:39:30,000 --> 00:39:31,200
to talk about that a little bit.

840
00:39:34,000 --> 00:39:34,500
Okay.

841
00:39:36,300 --> 00:39:41,600
So, inside the game, oops, what is the hotkey for fill with background

842
00:39:41,600 --> 00:39:41,900
color?

843
00:39:42,000 --> 00:39:42,600
Backspace?

844
00:39:43,200 --> 00:39:43,600
There we go.

845
00:39:44,500 --> 00:39:45,100
All right.

846
00:39:45,400 --> 00:39:51,400
So let's talk about that big old block, that just said game on it.

847
00:39:51,400 --> 00:39:51,800
Right?

848
00:39:51,800 --> 00:39:52,900
That big old block that we had.

849
00:39:52,900 --> 00:39:54,300
We're now inside that block.

850
00:39:54,500 --> 00:39:55,100
Right?

851
00:39:55,600 --> 00:39:59,600
Well, so one thing that I talked about originally or that I did I

852
00:39:59,600 --> 00:40:04,000
should say is game update and render, right?

853
00:40:05,500 --> 00:40:07,200
That's our one of our M3 points.

854
00:40:07,400 --> 00:40:07,900
Right?

855
00:40:07,900 --> 00:40:11,400
In fact, I'm going to keep using guar from now on, I think.

856
00:40:11,900 --> 00:40:14,500
So, we kind of know, right?

857
00:40:14,600 --> 00:40:16,300
I'm going to invert this from the diagram before.

858
00:40:16,300 --> 00:40:18,200
So we can have kind of a downward flow of things.

859
00:40:18,200 --> 00:40:20,500
Or maybe, you know, what, maybe we'll do, maybe don't miss, I don't

860
00:40:20,500 --> 00:40:20,800
know.

861
00:40:21,400 --> 00:40:24,100
So we're going to get a game update and render call from the app,

862
00:40:24,100 --> 00:40:24,600
right?

863
00:40:24,600 --> 00:40:27,300
So we basically now know that our game update.

864
00:40:27,300 --> 00:40:28,000
I'm sorry are

865
00:40:29,500 --> 00:40:34,000
Our game architecture is based around getting a call that says, you

866
00:40:34,000 --> 00:40:40,000
know, here's a T4, how, you know, how much time basically has elapsed,

867
00:40:40,000 --> 00:40:41,900
how much time do we need to advance things by?

868
00:40:42,200 --> 00:40:45,400
So, we basically need to do a tea update to advance the state of the

869
00:40:45,400 --> 00:40:46,600
game, right?

870
00:40:46,700 --> 00:40:48,000
We need to do a rendering.

871
00:40:48,000 --> 00:40:51,500
So we need to render to the to the bitmap that it gives us, right.

872
00:40:53,400 --> 00:40:57,300
That sort of stuff and implicit in this, here in this tea update

873
00:40:57,300 --> 00:41:01,000
Advance is that we have to process the user input that it passed us,

874
00:41:01,000 --> 00:41:01,100
right?

875
00:41:01,100 --> 00:41:04,500
Because it's going to pass us, the keyboard control and the GamePad

876
00:41:04,500 --> 00:41:06,000
control, right?

877
00:41:07,100 --> 00:41:08,500
That's that's what's going to happen here.

878
00:41:09,000 --> 00:41:10,600
In that sort of advanced thing.

879
00:41:11,000 --> 00:41:14,000
We're going to run to the bitmap and then when we get really we don't

880
00:41:14,000 --> 00:41:16,900
even have to do you think of this as a separate call, you know, we

881
00:41:16,900 --> 00:41:19,900
have to be able to handle them separate call, but the get sound

882
00:41:19,900 --> 00:41:22,300
samples stuff really is just an

883
00:41:22,300 --> 00:41:25,000
Extension of this, if I would have preferred it.

884
00:41:25,000 --> 00:41:28,800
And in fact, we had it this way, originally, if I felt like, we could

885
00:41:28,800 --> 00:41:31,700
get away with it and maybe we will eventually depending on how we go.

886
00:41:32,000 --> 00:41:34,800
I would actually have this be right here.

887
00:41:35,000 --> 00:41:40,200
I'd actually have output sound samples actually be something that just

888
00:41:40,200 --> 00:41:44,300
happens as part of the game update render call and not have a separate

889
00:41:44,300 --> 00:41:44,600
calls.

890
00:41:44,600 --> 00:41:48,300
So, really, I like to think of the game as getting a single sort of,

891
00:41:48,300 --> 00:41:50,300
you know, point in time where it goes.

892
00:41:50,300 --> 00:41:52,300
Okay, Now's the Time to do all your work.

893
00:41:52,300 --> 00:41:56,100
Work from the platform layer, and there's nothing else is going to go

894
00:41:56,100 --> 00:41:56,300
on here.

895
00:41:56,300 --> 00:41:56,900
Right?

896
00:41:56,900 --> 00:41:59,800
So let's talk about these things because I think

897
00:42:00,000 --> 00:42:03,500
They're basically endemic to all games and I'm going to sort of I'm

898
00:42:03,500 --> 00:42:06,200
going to look well.

899
00:42:06,200 --> 00:42:07,700
I guess I'll keep them separate for now.

900
00:42:07,700 --> 00:42:10,900
You say AV output can kind of usually be lumped together because

901
00:42:10,900 --> 00:42:12,300
they're very similar processes.

902
00:42:12,800 --> 00:42:15,900
Sound is usually basic a subset of the complexity of graphical

903
00:42:15,900 --> 00:42:16,300
rendering.

904
00:42:16,300 --> 00:42:21,500
But so what actually has to go on in these things and what is our game

905
00:42:21,500 --> 00:42:23,300
architecture going to be concerned about?

906
00:42:23,400 --> 00:42:27,400
So I'll just State some pretty straightforward stuff right off the

907
00:42:27,400 --> 00:42:27,900
bat.

908
00:42:28,500 --> 00:42:29,900
So, regardless of how much money

909
00:42:30,000 --> 00:42:33,300
Multi-threading, we do or anything else we might do, right.

910
00:42:33,700 --> 00:42:38,800
We know that essentially, if our game Loop has user input in it.

911
00:42:39,200 --> 00:42:40,800
We want to process the user input.

912
00:42:40,800 --> 00:42:41,300
First.

913
00:42:41,300 --> 00:42:44,900
We want to update the state of the world and we want to render right

914
00:42:45,400 --> 00:42:47,300
now, the user input.

915
00:42:47,300 --> 00:42:50,400
We always want to process as close to the updating as possible to

916
00:42:50,400 --> 00:42:52,000
reduce input lag, right?

917
00:42:52,100 --> 00:42:55,800
You could imagine us processing the input like we could update the

918
00:42:55,800 --> 00:42:58,100
world render the game, right?

919
00:42:58,100 --> 00:42:59,900
Not do this at the outset and

920
00:43:00,000 --> 00:43:02,200
Take a look at the input and process it here.

921
00:43:02,700 --> 00:43:06,000
If we did that, we would essentially be introducing a frame of lag.

922
00:43:06,100 --> 00:43:06,700
Right?

923
00:43:06,900 --> 00:43:10,300
Because we did an update even without considering input that we

924
00:43:10,300 --> 00:43:11,500
actually had at the time.

925
00:43:12,300 --> 00:43:13,800
So definitely what we want to do.

926
00:43:13,900 --> 00:43:14,200
Right?

927
00:43:14,200 --> 00:43:18,000
Is we always want to basically say, Okay input gets integrated in the

928
00:43:18,000 --> 00:43:20,000
update right away, right?

929
00:43:20,000 --> 00:43:20,900
We don't want to hold it over.

930
00:43:20,900 --> 00:43:24,200
So we know that basically this update, whatever we do to update the

931
00:43:24,200 --> 00:43:24,800
world.

932
00:43:25,000 --> 00:43:27,700
We're going to have to take into account the the input right there.

933
00:43:28,700 --> 00:43:30,700
So the question is right?

934
00:43:31,000 --> 00:43:34,000
Or I shouldn't say the question is, but basically, we know that if we

935
00:43:34,000 --> 00:43:37,400
look at our sequence of operations, we know that the ferry first thing

936
00:43:37,400 --> 00:43:39,800
we're going to do is look at that user input.

937
00:43:40,000 --> 00:43:40,600
Right?

938
00:43:41,200 --> 00:43:44,800
And then the next thing that we're going to do, is, is something else,

939
00:43:44,900 --> 00:43:45,100
right?

940
00:43:45,100 --> 00:43:47,200
And we don't know exactly what's going to be, but we know that we want

941
00:43:47,200 --> 00:43:49,100
this to be as close to the Head end as possible.

942
00:43:49,200 --> 00:43:49,600
Right?

943
00:43:50,500 --> 00:43:53,800
So, let's talk about update and render, a lot of games will do

944
00:43:53,800 --> 00:43:56,500
something where they have like update, right?

945
00:43:56,500 --> 00:43:58,200
And that's that's something that they do.

946
00:43:58,500 --> 00:44:01,700
Up, and then they actually have another step that's like render.

947
00:44:01,700 --> 00:44:05,000
So, rendering and updating are totally separate, right?

948
00:44:05,900 --> 00:44:13,200
I can appreciate that from a ideological standpoint, certainly saying

949
00:44:13,200 --> 00:44:15,400
that I want to be able to update the game separately from rendering

950
00:44:15,400 --> 00:44:15,800
it.

951
00:44:19,900 --> 00:44:20,900
Makes sense.

952
00:44:21,800 --> 00:44:25,600
In terms of a desired set of operations.

953
00:44:25,800 --> 00:44:27,700
I might want to update the game.

954
00:44:27,800 --> 00:44:29,800
I might want to render the game.

955
00:44:29,800 --> 00:44:31,700
Maybe I don't want to do one of the other.

956
00:44:31,700 --> 00:44:33,700
Maybe I want to do both that sort of thing.

957
00:44:34,300 --> 00:44:37,000
Maybe I want to update the game two times and then only render it

958
00:44:37,000 --> 00:44:37,400
once.

959
00:44:37,400 --> 00:44:38,300
Blah blah blah blah blah.

960
00:44:40,200 --> 00:44:45,800
So, if you think about what this means, you may write the code, the

961
00:44:45,800 --> 00:44:49,000
way I just said, where you've got an update step that you call

962
00:44:49,000 --> 00:44:50,300
separately, right?

963
00:44:50,400 --> 00:44:53,500
And a render step that you call separately, and these are different

964
00:44:53,500 --> 00:44:54,100
functions.

965
00:44:54,300 --> 00:44:56,600
So essentially, when we start to think about the things I was talking

966
00:44:56,600 --> 00:44:59,800
about in the architecture, your drawing one of those

967
00:45:00,100 --> 00:45:02,700
You're drawing a boundary between update and render.

968
00:45:03,800 --> 00:45:07,300
I never draw that boundary if I can help it.

969
00:45:08,400 --> 00:45:13,700
And here's why if you think about the way modern computers work.

970
00:45:13,800 --> 00:45:22,200
A lot of the times is they have very high penalty for missing the

971
00:45:22,200 --> 00:45:22,700
cash.

972
00:45:22,700 --> 00:45:22,900
Right?

973
00:45:22,900 --> 00:45:27,200
A CPU really likes to be able to do things in its cache.

974
00:45:27,200 --> 00:45:27,700
Right?

975
00:45:28,000 --> 00:45:30,100
A CPU has some amount of cash.

976
00:45:31,000 --> 00:45:35,300
However much it is it pulls things into that cash when it's working on

977
00:45:35,300 --> 00:45:35,700
them.

978
00:45:35,800 --> 00:45:40,200
And while they're in that cash, if they do not get evicted as long as

979
00:45:40,200 --> 00:45:41,400
you could press up within that cash.

980
00:45:41,400 --> 00:45:44,800
You get massively faster, you know, you're talking 10 20 times faster

981
00:45:44,800 --> 00:45:49,000
sometimes more, because the time it takes to go out and get stuff from

982
00:45:49,000 --> 00:45:50,400
memory is very long.

983
00:45:50,400 --> 00:45:53,000
So unless you can accurately predict exactly what memory you're going

984
00:45:53,000 --> 00:45:55,500
to need quite a bit before you need it.

985
00:45:55,500 --> 00:45:59,400
There's not a lot you can do to work around those kinds of problems.

986
00:46:00,300 --> 00:46:01,600
Since that is true.

987
00:46:01,700 --> 00:46:06,500
I usually find that it is not a good idea to say that as an

988
00:46:06,500 --> 00:46:10,400
architectural decision, you're updating and rendering are split.

989
00:46:11,700 --> 00:46:13,100
Take for a very simple example.

990
00:46:13,200 --> 00:46:16,400
Let's say I have some kind of fancy particle system in my game.

991
00:46:17,100 --> 00:46:22,500
And so there's 16,000 particles and I have to Loop through all 16

992
00:46:22,500 --> 00:46:25,500
thousand particles and I need to do some kind of physics update on

993
00:46:25,500 --> 00:46:25,900
them.

994
00:46:26,100 --> 00:46:31,300
And then I need to produce some stuff in a Vertex buffer, that's going

995
00:46:31,300 --> 00:46:33,400
to get sent to a graphics card to render them.

996
00:46:33,700 --> 00:46:34,200
Right?

997
00:46:35,300 --> 00:46:39,800
Well, if I actually Loop over all of those things twice, once in the

998
00:46:39,800 --> 00:46:40,800
update to update,

999
00:46:41,000 --> 00:46:43,600
Are and then once in the renderer to render them?

1000
00:46:44,700 --> 00:46:48,300
At the, very least position and probably velocity, probably,

1001
00:46:48,300 --> 00:46:53,000
potentially, also color are getting pulled into the cache and evicted

1002
00:46:53,000 --> 00:46:55,500
from the cache two times, right?

1003
00:46:55,600 --> 00:46:59,700
They're getting done on the update pass and on the render pass, so it

1004
00:46:59,700 --> 00:47:01,400
would be much more efficient.

1005
00:47:01,500 --> 00:47:05,500
If we just did it in one pass to produce both things, right?

1006
00:47:05,900 --> 00:47:10,800
And so I do not like to draw that boundary for some things.

1007
00:47:10,800 --> 00:47:14,400
It's fine to have that boundary happen but at the game

1008
00:47:14,600 --> 00:47:18,000
Architecture level, I never draw that boundary.

1009
00:47:18,100 --> 00:47:19,200
I don't like to put it there.

1010
00:47:19,500 --> 00:47:20,900
I like to have update.

1011
00:47:20,900 --> 00:47:21,500
Render.

1012
00:47:21,800 --> 00:47:24,800
Basically be one coherent step, right?

1013
00:47:24,900 --> 00:47:27,500
That happens together, if that makes sense.

1014
00:47:28,500 --> 00:47:31,200
So this is actually what I do.

1015
00:47:31,200 --> 00:47:32,100
I do not ever.

1016
00:47:32,100 --> 00:47:36,500
Do, you know something that looks like this.

1017
00:47:38,400 --> 00:47:43,800
I never do that if I can avoid it because basically I feel like this

1018
00:47:43,800 --> 00:47:47,200
is a much saner way to go in terms of when you need to actually start

1019
00:47:47,200 --> 00:47:50,600
optimizing for performance acknowledging.

1020
00:47:50,600 --> 00:47:53,500
The fact that there are many types of things that want to get updated

1021
00:47:53,500 --> 00:47:56,600
and rendered together, and render is kind of a difficult term here

1022
00:47:56,600 --> 00:47:59,900
because render in the final version of the game.

1023
00:48:00,000 --> 00:48:04,100
Name is not really about rendering, it's about stuffing things in

1024
00:48:04,100 --> 00:48:09,500
buffers that eventually go off to a GPU, but you know what, I mean, so

1025
00:48:09,700 --> 00:48:15,200
sort of this term render think of that more as render prep because

1026
00:48:15,200 --> 00:48:17,800
nobody actually does rendering anymore.

1027
00:48:18,400 --> 00:48:22,100
And in our case, we won't really be doing that either.

1028
00:48:22,100 --> 00:48:24,600
It's up input, update render.

1029
00:48:24,600 --> 00:48:27,800
And then like, you know, GPU or whatever is doing.

1030
00:48:27,800 --> 00:48:28,300
Its thing.

1031
00:48:28,700 --> 00:48:29,900
We will also have that.

1032
00:48:30,000 --> 00:48:31,100
That step right?

1033
00:48:31,100 --> 00:48:32,100
Only in our case.

1034
00:48:32,100 --> 00:48:34,900
We implemented, we will be implementing the actual code that, you

1035
00:48:34,900 --> 00:48:36,000
know, and on the CPU.

1036
00:48:36,000 --> 00:48:37,900
So it won't be on a GPU, right?

1037
00:48:38,200 --> 00:48:39,700
So really, there's that final step.

1038
00:48:39,700 --> 00:48:41,800
So when I say render, I just want to make it clear what I'm talking

1039
00:48:41,800 --> 00:48:42,000
about.

1040
00:48:42,000 --> 00:48:46,100
I'm talking about the thing that prepares all of the buffers for the

1041
00:48:46,100 --> 00:48:49,600
graphics subsystem to handle, which is normally, on a GPU.

1042
00:48:49,700 --> 00:48:54,000
But in our case, for the first couple months, it's going to be our own

1043
00:48:54,000 --> 00:48:54,400
renderer.

1044
00:48:58,100 --> 00:48:58,600
Okay.

1045
00:49:00,400 --> 00:49:09,700
So this runs sort of in parallel with another part of the game

1046
00:49:09,900 --> 00:49:10,800
architecture, right?

1047
00:49:10,800 --> 00:49:14,300
So we have our input, that's got to come in and be integrated first.

1048
00:49:14,300 --> 00:49:17,200
That may be integrated directly into this, but I think, actually

1049
00:49:17,200 --> 00:49:18,800
probably most of the time it won't be.

1050
00:49:18,800 --> 00:49:22,000
I think it'll be a separate step that happens here, just because

1051
00:49:22,000 --> 00:49:24,200
there's not a lot to do with input processing.

1052
00:49:24,200 --> 00:49:25,600
It's not a performance critical thing.

1053
00:49:25,600 --> 00:49:30,000
Usually you're just setting some State then gets used by the update.

1054
00:49:30,200 --> 00:49:32,400
Later, so this will probably be a separate part.

1055
00:49:32,400 --> 00:49:34,500
That's just like the player control code that, you know, the next

1056
00:49:34,500 --> 00:49:37,000
question like that, you did the update and render.

1057
00:49:37,500 --> 00:49:40,900
And then basically, we do now know that architecturally speaking,

1058
00:49:41,100 --> 00:49:43,700
we're going to get some other call down here.

1059
00:49:43,700 --> 00:49:47,000
That's a separate list of things that have to happen, which is you

1060
00:49:47,000 --> 00:49:48,200
know, sound output.

1061
00:49:49,900 --> 00:49:50,400
Right.

1062
00:49:51,900 --> 00:49:54,200
And so these things have to pull from somewhere.

1063
00:49:54,300 --> 00:49:56,800
So what I want to talk about now is where these things pull from.

1064
00:49:57,000 --> 00:49:57,500
Basically.

1065
00:49:58,200 --> 00:49:58,800
I really wish.

1066
00:49:58,800 --> 00:50:02,300
I knew how to erase stuff in a diagram.

1067
00:50:02,600 --> 00:50:05,600
I realized that maybe too much to ask here.

1068
00:50:05,700 --> 00:50:06,400
Take a look.

1069
00:50:06,500 --> 00:50:07,200
Nope.

1070
00:50:07,300 --> 00:50:08,000
That's not it.

1071
00:50:08,000 --> 00:50:08,600
Try again.

1072
00:50:08,600 --> 00:50:09,500
There we go.

1073
00:50:10,100 --> 00:50:13,100
Can I select like deselect stuff?

1074
00:50:14,700 --> 00:50:15,400
Is that on the table?

1075
00:50:15,400 --> 00:50:17,200
Select control shift.

1076
00:50:17,200 --> 00:50:19,600
A troll ship day?

1077
00:50:19,600 --> 00:50:20,100
There we go.

1078
00:50:21,300 --> 00:50:22,400
oops, close

1079
00:50:24,300 --> 00:50:24,800
There we go.

1080
00:50:25,500 --> 00:50:27,500
All right, so

1081
00:50:29,400 --> 00:50:32,800
Basically, I'm saying that our architecture would draw boundaries

1082
00:50:32,800 --> 00:50:34,900
roughly like this, right?

1083
00:50:34,900 --> 00:50:37,400
We have to draw this bound because the platform layer do it for us.

1084
00:50:37,500 --> 00:50:41,400
We have to draw this boundary because this is Art.

1085
00:50:41,400 --> 00:50:43,400
We don't draw this boundary, but I'm saying, I probably will.

1086
00:50:44,100 --> 00:50:47,800
So there's another boundary that we have that is kind of a parallel

1087
00:50:47,800 --> 00:50:48,900
style boundary.

1088
00:50:49,600 --> 00:50:53,900
And what I want you to think about is basically where this stuff is

1089
00:50:53,900 --> 00:50:55,900
getting its data from, right?

1090
00:50:56,100 --> 00:50:58,800
So there's one form of game architecture.

1091
00:51:00,000 --> 00:51:04,800
Which is sort of the loading screen architecture, I would call it.

1092
00:51:07,200 --> 00:51:11,900
Okay, the loading screen architecture is the one where you have some

1093
00:51:11,900 --> 00:51:16,000
event, which is your change level or something event.

1094
00:51:16,400 --> 00:51:19,900
And you go into some kind of a loading screen and the loading screen

1095
00:51:19,900 --> 00:51:23,300
then goes through all the assets that it thinks that's going to need,

1096
00:51:23,300 --> 00:51:25,100
for whatever it is that it's doing, whatever.

1097
00:51:25,100 --> 00:51:28,100
It's about to do like, whatever game level, you're about to play that

1098
00:51:28,100 --> 00:51:28,600
sort of thing.

1099
00:51:28,800 --> 00:51:31,100
And the user gets to sit there and watch a little spinning thing.

1100
00:51:31,100 --> 00:51:33,900
In a quote, from one of the characters in the game or something like

1101
00:51:33,900 --> 00:51:36,700
this or a pro tip like press real.

1102
00:51:36,900 --> 00:51:39,800
Would quickly to reload quicker or something like that.

1103
00:51:40,700 --> 00:51:41,800
During that time.

1104
00:51:41,800 --> 00:51:46,100
What happens is the resources for the game are being loaded from

1105
00:51:46,100 --> 00:51:47,500
somewhere, right?

1106
00:51:47,600 --> 00:51:49,500
So resources are coming in.

1107
00:51:49,600 --> 00:51:53,000
Usually they're coming in off of a disk of some kind, oftentimes its

1108
00:51:53,000 --> 00:51:57,800
Optical if you're on a console, but then it's like HD or SD drive.

1109
00:51:58,200 --> 00:52:01,100
If you're you know on a if you're on a PC, right?

1110
00:52:01,100 --> 00:52:02,000
These things are coming in.

1111
00:52:02,000 --> 00:52:04,700
Sometimes they can even come over a network and get a little close to

1112
00:52:04,700 --> 00:52:05,400
my head there.

1113
00:52:06,100 --> 00:52:06,700
I don't know if I can.

1114
00:52:07,200 --> 00:52:07,600
There we go.

1115
00:52:08,800 --> 00:52:14,600
So essentially what happens is, at some point, you've got to get these

1116
00:52:14,600 --> 00:52:17,700
resources out because steps here, depend on it.

1117
00:52:17,800 --> 00:52:20,400
At least this step does, right?

1118
00:52:20,600 --> 00:52:24,100
And possibly this Step 2, depending on where how we choose to do our

1119
00:52:24,100 --> 00:52:25,400
sound output, whether it's buffered.

1120
00:52:25,400 --> 00:52:29,800
But if we decide to do a way where the output just does a quick thing,

1121
00:52:29,800 --> 00:52:33,900
there would be a three in here, which is sound prep, Right Where It

1122
00:52:33,900 --> 00:52:36,600
prepares the output for what this will get handed back.

1123
00:52:36,900 --> 00:52:41,300
So either way somebody, you know, sound-wise is pulling off of these

1124
00:52:41,300 --> 00:52:42,000
resources.

1125
00:52:42,000 --> 00:52:44,800
So basically we have AV resources here, right?

1126
00:52:44,800 --> 00:52:45,900
At the very least.

1127
00:52:45,900 --> 00:52:47,200
Now, we may have other things.

1128
00:52:47,200 --> 00:52:48,300
This is a procedural game.

1129
00:52:48,300 --> 00:52:49,700
So we probably won't.

1130
00:52:50,400 --> 00:52:55,500
But so in addition to AV you may have d as well audio video and just

1131
00:52:55,500 --> 00:52:56,200
data, right?

1132
00:52:56,200 --> 00:52:59,400
Like gameplay we could call it G like level structures that sort of

1133
00:52:59,400 --> 00:53:01,800
stuff that that can be in there too.

1134
00:53:01,800 --> 00:53:02,200
Right?

1135
00:53:02,300 --> 00:53:03,800
So we've got these resources.

1136
00:53:04,000 --> 00:53:05,900
Make a call mess structural resources.

1137
00:53:05,900 --> 00:53:06,700
I don't know because they could be.

1138
00:53:06,800 --> 00:53:07,900
Structural for audio videos.

1139
00:53:07,900 --> 00:53:12,200
Well, like here is a graph of different meshes that have to get

1140
00:53:12,200 --> 00:53:13,100
loaded, you know, who knows?

1141
00:53:14,200 --> 00:53:20,100
So this resource part is also an architectural part and I'll kind of

1142
00:53:20,100 --> 00:53:24,000
try to explain why in the loading screen style of doing things.

1143
00:53:24,300 --> 00:53:26,700
There really is no architecture concern.

1144
00:53:26,700 --> 00:53:30,100
As far as the loading part goes.

1145
00:53:30,100 --> 00:53:32,200
I mean there is a little bit, but not very much.

1146
00:53:32,300 --> 00:53:36,500
The reason is because essentially you're not talking about one

1147
00:53:36,500 --> 00:53:37,600
integrated system.

1148
00:53:37,600 --> 00:53:41,000
You're talking about two systems that run completely separately.

1149
00:53:41,000 --> 00:53:42,900
So there isn't much of an architecture concern.

1150
00:53:43,200 --> 00:53:43,800
When you

1151
00:53:44,000 --> 00:53:45,200
To load you.

1152
00:53:45,200 --> 00:53:47,900
Load and none of this stuff is happening.

1153
00:53:48,100 --> 00:53:48,600
Right?

1154
00:53:49,500 --> 00:53:53,100
And when you are done, loading, you do this and then you never load in

1155
00:53:53,100 --> 00:53:53,500
here.

1156
00:53:53,700 --> 00:53:54,300
Right?

1157
00:53:54,300 --> 00:53:57,700
So, the full on loading screen mentality is one where you basically

1158
00:53:57,700 --> 00:53:59,800
don't really have to think too hard.

1159
00:54:00,000 --> 00:54:02,700
About how this architecture is going to work.

1160
00:54:03,600 --> 00:54:07,000
But there's another way of doing this, which is the streaming

1161
00:54:07,000 --> 00:54:08,300
mentality, right?

1162
00:54:08,700 --> 00:54:12,500
So if I go ahead and say let's not do that, you know, oops, never

1163
00:54:12,500 --> 00:54:13,500
gonna get used to that.

1164
00:54:13,700 --> 00:54:15,800
Let's say we don't want to do that.

1165
00:54:17,400 --> 00:54:21,100
So what we want to do is we want to do streaming now.

1166
00:54:21,100 --> 00:54:24,400
It's streaming is is streaming is something where we say.

1167
00:54:24,400 --> 00:54:24,800
Okay.

1168
00:54:24,800 --> 00:54:28,800
I don't want the user to have to sit through a loading screen and I

1169
00:54:28,800 --> 00:54:29,700
want to be able to maybe

1170
00:54:30,000 --> 00:54:31,600
Have very large worlds as well.

1171
00:54:31,600 --> 00:54:34,200
So I don't want them to have to like, hit Parts in the world where

1172
00:54:34,200 --> 00:54:37,600
they like have to stop and it loads like, you know, I don't know the

1173
00:54:37,600 --> 00:54:40,300
old Half-Life kind of a walk Round a corner and you go, it's got a

1174
00:54:40,300 --> 00:54:41,300
load, you know, whatever.

1175
00:54:42,400 --> 00:54:45,600
I don't want to, you know, have any that I want the game to just Boot

1176
00:54:45,600 --> 00:54:49,600
and run and it always just goes and get the resources that it needs

1177
00:54:49,600 --> 00:54:52,500
kind of in the background using, you know, because there's obviously

1178
00:54:52,500 --> 00:54:54,800
lots of resources now, for doing that sort of thing on the computer.

1179
00:54:54,800 --> 00:54:58,500
There's a lot more Firepower that you have in terms of being able to

1180
00:54:58,500 --> 00:54:59,700
run things, concurrently.

1181
00:55:00,500 --> 00:55:05,000
So assuming that that's the case you want to make money streaming

1182
00:55:05,000 --> 00:55:09,200
things, you do now have another architectural boundary that you have

1183
00:55:09,200 --> 00:55:10,100
to draw here.

1184
00:55:10,400 --> 00:55:10,900
Right?

1185
00:55:11,400 --> 00:55:14,000
You've got an architectural boundary, where there's essentially a

1186
00:55:14,000 --> 00:55:15,400
two-way communication.

1187
00:55:15,700 --> 00:55:20,100
There's this side of things has to be able to tell this side of

1188
00:55:20,100 --> 00:55:21,300
things, what it needs.

1189
00:55:21,700 --> 00:55:24,700
And then when those things are ready, there has to be a way to

1190
00:55:24,700 --> 00:55:28,200
communicate back so that it can actually know that they're there and

1191
00:55:28,200 --> 00:55:30,000
can use them right now.

1192
00:55:30,200 --> 00:55:34,000
Is a fuzzy back and forth because what you choose to do their effects,

1193
00:55:34,000 --> 00:55:36,000
how you might think of those arrows.

1194
00:55:36,100 --> 00:55:40,400
But this is basically, you know, the situation, you've got a, you've

1195
00:55:40,400 --> 00:55:44,400
kind of bi-directional linkage that goes with these sorts of things.

1196
00:55:45,000 --> 00:55:50,800
This is going to be a very, very important part of our architecture to

1197
00:55:50,800 --> 00:55:54,700
think about as well because a lot of people do this very poorly this

1198
00:55:54,700 --> 00:55:59,500
part and it's also where, you know, I know a lot of people have asked

1199
00:55:59,500 --> 00:56:00,100
about is

1200
00:56:00,200 --> 00:56:03,600
I am gooey, right immediate mode graphical user interface.

1201
00:56:04,500 --> 00:56:10,100
Well, I am GUI, is really just a special case of I am design, like,

1202
00:56:10,100 --> 00:56:13,800
you can design any architecture to be IM or RM.

1203
00:56:13,800 --> 00:56:16,800
Basically, I am is immediate mode.

1204
00:56:19,400 --> 00:56:23,700
Those of you don't know and our m is retained mode.

1205
00:56:25,300 --> 00:56:25,800
Okay.

1206
00:56:27,200 --> 00:56:35,100
Immediate mode is is a way of describing an API boundary where the

1207
00:56:35,100 --> 00:56:38,600
calling side does not have to remember.

1208
00:56:39,700 --> 00:56:43,400
Handles to the Target side.

1209
00:56:43,900 --> 00:56:47,700
So the classic example here would be like in a rendering API where

1210
00:56:47,700 --> 00:56:50,200
these terms first came from to the best of my knowledge.

1211
00:56:50,300 --> 00:56:50,700
Are?

1212
00:56:50,700 --> 00:56:57,100
I am nrm, if I have to call you to make sup like a scene graph.

1213
00:56:57,100 --> 00:56:59,800
I say like create a node in my scene and it

1214
00:57:00,000 --> 00:57:02,900
This transform and give this mesh and then create another node.

1215
00:57:02,900 --> 00:57:04,300
That's a child of that mesh.

1216
00:57:04,500 --> 00:57:08,100
And I create this like seeing graph and then I say render right at the

1217
00:57:08,100 --> 00:57:11,400
end and it the library is responsible for doing all that traversal and

1218
00:57:11,400 --> 00:57:12,300
rendering scene graph.

1219
00:57:12,600 --> 00:57:17,500
That's an example of retained mode because basically, the retain is

1220
00:57:17,500 --> 00:57:20,400
talking about what happens on the other side of the boundary, its

1221
00:57:20,400 --> 00:57:25,100
retaining, all the structure, basically that you shouldn't even say it

1222
00:57:25,100 --> 00:57:25,600
that way.

1223
00:57:28,100 --> 00:57:34,200
So I want to just slightly finish this, but we're going to talk about

1224
00:57:34,200 --> 00:57:36,600
this in a lot more detail on future stream.

1225
00:57:36,600 --> 00:57:40,400
So I won't belabor the point the term retained mode and median mode

1226
00:57:40,400 --> 00:57:41,500
are actually bad.

1227
00:57:41,500 --> 00:57:44,900
I mean, I'll say that out up front because this retained part is

1228
00:57:44,900 --> 00:57:46,100
actually not important.

1229
00:57:46,100 --> 00:57:52,200
It's the API part that's important and I will be showing you this in

1230
00:57:52,200 --> 00:57:55,800
very explicit detail later on when we actually do some of these

1231
00:57:55,800 --> 00:57:57,800
systems, but basically the way

1232
00:57:58,200 --> 00:58:03,500
Think about this is probably not too quite, think about it, the way I

1233
00:58:03,500 --> 00:58:07,700
just said, unfortunately, the way to think about it is actually about

1234
00:58:07,700 --> 00:58:08,600
lifetimes.

1235
00:58:09,000 --> 00:58:09,300
Right?

1236
00:58:09,300 --> 00:58:12,300
And I was trying to explain it the way that these things originally

1237
00:58:12,300 --> 00:58:14,500
worked in renderers, which would have been true for the way I was

1238
00:58:14,500 --> 00:58:17,600
saying it, but I'm not going to use them that way because it's kind of

1239
00:58:17,600 --> 00:58:18,200
weak sauce.

1240
00:58:18,400 --> 00:58:20,100
So, we'll have to wait till we actually get there.

1241
00:58:20,200 --> 00:58:22,300
But the right way to think about these things, actually lifetimes.

1242
00:58:22,600 --> 00:58:27,300
So, in immediate mode, the calling side does is unaware of the

1243
00:58:27,300 --> 00:58:27,900
lifetime.

1244
00:58:28,100 --> 00:58:29,600
I'm of anything in the system.

1245
00:58:29,800 --> 00:58:31,400
They just don't know, right?

1246
00:58:31,400 --> 00:58:34,400
They are unaware of how long something exists.

1247
00:58:35,200 --> 00:58:38,000
But in immediate in a retain mode they are.

1248
00:58:38,400 --> 00:58:42,500
So again, the example would be in that scene node architecture, or

1249
00:58:42,500 --> 00:58:44,700
anything else, really you could even imagine.

1250
00:58:45,700 --> 00:58:49,100
In fact, we could we could do a pretty good example with say opengl or

1251
00:58:49,100 --> 00:58:53,000
a direct3d if I have to create a texture binding, right?

1252
00:58:53,000 --> 00:58:55,200
I have to say, I want to create a texture binding.

1253
00:58:55,400 --> 00:58:57,700
Please give me a handle to a texter and later on.

1254
00:58:57,700 --> 00:58:58,000
I'll tell

1255
00:58:58,100 --> 00:58:59,600
I need to release that texture.

1256
00:58:59,900 --> 00:59:02,500
That's definitely retained mode, right?

1257
00:59:02,600 --> 00:59:07,200
Because I have to mirror across the boundary this notion of this

1258
00:59:07,200 --> 00:59:08,100
object lifetime.

1259
00:59:08,200 --> 00:59:10,600
The application that's calling direct through.

1260
00:59:10,600 --> 00:59:15,200
Your opengl is aware of and manages, the lifetime of that thing and

1261
00:59:15,200 --> 00:59:16,200
that's retained mode.

1262
00:59:16,600 --> 00:59:18,400
Immediate mode are like.

1263
00:59:18,400 --> 00:59:21,600
So those parts of like opengl and direct3d are retained mode.

1264
00:59:21,800 --> 00:59:24,200
Immediate mode is when I don't have to care.

1265
00:59:24,400 --> 00:59:27,900
So for example, let's say I do something like in the old

1266
00:59:30,100 --> 00:59:33,400
Fixed function pipeline where in opengl directed.

1267
00:59:33,400 --> 00:59:36,400
Yeah, I would say, I want to set this blending mode, right?

1268
00:59:36,400 --> 00:59:38,300
I would say here's what the blending mode is.

1269
00:59:39,200 --> 00:59:42,400
Well, when I set that blending mode, I don't have to care how long

1270
00:59:42,400 --> 00:59:43,800
that's true for, right?

1271
00:59:43,900 --> 00:59:47,000
I just know that I set this blending mode and I do some operations and

1272
00:59:47,000 --> 00:59:48,600
the operations that are done.

1273
00:59:49,100 --> 00:59:51,700
We'll have that blending mode later on.

1274
00:59:51,700 --> 00:59:54,600
Someone else will change the blend mode to something when they want to

1275
00:59:54,600 --> 00:59:57,900
do a different operation, but I don't have to actually

1276
00:59:58,100 --> 00:59:59,800
I'll undo that blend.

1277
01:00:00,000 --> 01:00:00,400
Set.

1278
01:00:00,400 --> 01:00:04,600
I don't have to like destroy the blend mode after I'm done with it or

1279
01:00:04,600 --> 01:00:05,400
anything like this.

1280
01:00:05,600 --> 01:00:08,400
I just say I need it and it's there and later on.

1281
01:00:08,400 --> 01:00:10,100
Someone else says they need something else and it's there.

1282
01:00:10,500 --> 01:00:12,100
That's like immediate mode.

1283
01:00:12,900 --> 01:00:16,400
These things have a lot of consequences, your choices, of which of

1284
01:00:16,400 --> 01:00:20,800
those two things you pick any point in any one of the layer boundaries

1285
01:00:21,200 --> 01:00:24,900
is definitely going to be crucially important to how well the system

1286
01:00:24,900 --> 01:00:29,900
functions because there's tons of trade-offs that occur for each.

1287
01:00:30,000 --> 01:00:33,000
One of the decisions that you make so we will be harping on this.

1288
01:00:33,000 --> 01:00:35,400
A lot will be harping on it.

1289
01:00:35,400 --> 01:00:38,500
Here will be harping a lot on it in here as well.

1290
01:00:40,500 --> 01:00:42,700
And so that will get a little more detail.

1291
01:00:42,700 --> 01:00:43,200
All right.

1292
01:00:43,200 --> 01:00:44,500
I think we're out of time.

1293
01:00:44,500 --> 01:00:48,300
I saw the timer pop up there and the timer like I said, does not lie.

1294
01:00:48,700 --> 01:00:51,300
So, I believe we are now officially out of time.

1295
01:00:51,500 --> 01:00:52,600
So I will finish.

1296
01:00:52,800 --> 01:00:53,900
I will say that that is all.

1297
01:00:53,900 --> 01:00:56,500
We're going to talk about architecture wise today.

1298
01:00:56,700 --> 01:00:59,700
Hopefully, you've got a reasonable idea of what I'm talking about now

1299
01:00:59,700 --> 01:00:59,800
on.

1300
01:01:00,000 --> 01:01:01,000
About architecture things.

1301
01:01:01,700 --> 01:01:05,400
So, really the next thing that we have to talk about is sort of how

1302
01:01:05,400 --> 01:01:10,100
we're going to structure these sorts of things and that will, again be

1303
01:01:10,100 --> 01:01:11,700
something that we can actually start doing code.

1304
01:01:11,700 --> 01:01:15,900
So tomorrow we should be able to actually start doing coding on these

1305
01:01:15,900 --> 01:01:20,200
things because this is like I said, I don't really like to do

1306
01:01:20,200 --> 01:01:24,000
architecture like a super high level pre-planning sort of thing.

1307
01:01:24,300 --> 01:01:27,700
I like to sort of do it more organically like I do the rest of my code

1308
01:01:27,700 --> 01:01:29,800
structuring so that's okay, but

1309
01:01:29,900 --> 01:01:33,100
But I felt like it was important to kind of give this General overview

1310
01:01:33,200 --> 01:01:36,700
of how we're thinking about things, just so we can sort of have a

1311
01:01:36,700 --> 01:01:37,800
little bit of hang out.

1312
01:01:37,800 --> 01:01:40,100
So tomorrow, I'll start off by redrawing.

1313
01:01:40,100 --> 01:01:43,600
This diagram, basically in a little more detail of just how we're

1314
01:01:43,600 --> 01:01:46,600
going to try to approach things and then we'll Court of dive into

1315
01:01:46,600 --> 01:01:48,900
doing code on this sort of stuff.

1316
01:01:49,200 --> 01:01:54,800
All right, that brings us to question time, please.

1317
01:01:54,800 --> 01:01:59,700
If you could keep your questions to things that we covered in today's

1318
01:01:59,700 --> 01:01:59,800
stream.

1319
01:02:00,000 --> 01:02:05,400
Or in previous streams and put seem your ettore in the questions so

1320
01:02:05,400 --> 01:02:09,200
that I can see it because I've got a little thing that basically says,

1321
01:02:10,100 --> 01:02:14,400
you know that filters questions for me based on on whether or not my

1322
01:02:14,400 --> 01:02:15,000
name is in them.

1323
01:02:15,000 --> 01:02:17,500
So I won't see it if you if you don't.

1324
01:02:20,600 --> 01:02:23,700
Okay, let's see.

1325
01:02:25,700 --> 01:02:29,200
Let us see questions.

1326
01:02:29,700 --> 01:02:31,100
Does anybody have them?

1327
01:02:31,300 --> 01:02:32,100
There's no questions.

1328
01:02:32,100 --> 01:02:33,600
We all go home early tonight.

1329
01:02:35,700 --> 01:02:38,000
Remember it's not handmade hero with the app.

1330
01:02:38,000 --> 01:02:40,900
It's senior ettore handmade hero.

1331
01:02:40,900 --> 01:02:42,800
I won't see although you know what I should just start scanning for

1332
01:02:42,800 --> 01:02:43,400
that as well.

1333
01:02:43,500 --> 01:02:45,800
So it's like should I'm going to make a note of that.

1334
01:02:56,400 --> 01:02:57,000
All right.

1335
01:03:01,000 --> 01:03:01,400
Is it beat?

1336
01:03:01,400 --> 01:03:02,300
It may retain mode.

1337
01:03:02,300 --> 01:03:05,200
Like ioc dependency injection?

1338
01:03:06,300 --> 01:03:08,900
Inversion of control, dependency injection.

1339
01:03:08,900 --> 01:03:12,600
I'm afraid, I don't, I'm not familiar with those terms so I could not

1340
01:03:12,600 --> 01:03:13,000
tell you.

1341
01:03:15,700 --> 01:03:18,800
The one qualms, I still have with the fixed time step style update

1342
01:03:18,800 --> 01:03:19,100
render.

1343
01:03:19,100 --> 01:03:21,500
We're using is that I don't understand how it reacts to missing is

1344
01:03:21,500 --> 01:03:22,600
Target frame rate.

1345
01:03:23,000 --> 01:03:26,200
What if the end user machine is slow enough that we missed 30, 60, or

1346
01:03:26,200 --> 01:03:27,000
30 FPS.

1347
01:03:27,000 --> 01:03:28,700
Can we build in say cards about that?

1348
01:03:29,200 --> 01:03:29,900
So no.

1349
01:03:30,000 --> 01:03:33,800
Basically if you can't run at 30 frames a second, you shouldn't be

1350
01:03:33,800 --> 01:03:37,700
running a game because anything less than 30 frames a second.

1351
01:03:38,600 --> 01:03:39,600
We'll look choppy.

1352
01:03:39,800 --> 01:03:41,800
So you shouldn't do that.

1353
01:03:41,900 --> 01:03:43,800
Ever never write a game that

1354
01:03:44,000 --> 01:03:48,400
Runs less than 30 frames a second, unless you are intentionally doing

1355
01:03:48,400 --> 01:03:53,300
some kind of strategy game that just doesn't care, I guess.

1356
01:03:54,600 --> 01:03:58,000
And the way I would say that was, if we were going to plan on running

1357
01:03:58,000 --> 01:04:01,300
at sub 30, we would, at the very least, still run the game at 30.

1358
01:04:01,300 --> 01:04:04,200
We'd only we'd have the renderer in, like a separate thread or

1359
01:04:04,200 --> 01:04:04,800
something.

1360
01:04:05,000 --> 01:04:09,200
That would update the graphical bitmap, only every other frame, or

1361
01:04:09,200 --> 01:04:12,900
something like that, but you never, ever, ever, ever ever, ever, ever

1362
01:04:13,200 --> 01:04:13,800
want to

1363
01:04:13,900 --> 01:04:18,500
We run the input at less than 30 for sure, but I would argue you never

1364
01:04:18,500 --> 01:04:20,700
want to run the graphics at less than 30 either.

1365
01:04:21,300 --> 01:04:23,300
What I would point out though is we're not.

1366
01:04:24,400 --> 01:04:26,900
Architecting the game around a fixed time step.

1367
01:04:27,900 --> 01:04:30,800
The time step will take the T.

1368
01:04:30,800 --> 01:04:34,200
So our game can actually run it any frame rate.

1369
01:04:35,800 --> 01:04:36,600
Just to be clear.

1370
01:04:36,800 --> 01:04:40,800
The game architecture runs at any frame rate because if you are Pat,

1371
01:04:40,800 --> 01:04:45,700
you're going to pass in a T2 to update the game with.

1372
01:04:46,200 --> 01:04:49,600
So you would be able to run the game of 50 frames a second.

1373
01:04:49,600 --> 01:04:50,500
Just don't.

1374
01:04:52,600 --> 01:04:57,700
If that makes sense and if its graphical quality that is that is

1375
01:04:57,700 --> 01:04:59,100
causing you to not hit 30.

1376
01:04:59,500 --> 01:05:02,300
What you want to do is you want to scale back the graphics so that you

1377
01:05:02,300 --> 01:05:04,800
do hit 30, that make sense.

1378
01:05:07,500 --> 01:05:10,400
Are you going to work with virtual file systems to store data

1379
01:05:10,400 --> 01:05:11,300
resources?

1380
01:05:11,400 --> 01:05:16,600
Well, I mean, sort of the phrase virtual file system is really

1381
01:05:17,900 --> 01:05:21,000
a little bit of a pet peeve of mine, like almost no games ship with

1382
01:05:21,000 --> 01:05:22,100
virtual file systems.

1383
01:05:22,100 --> 01:05:24,900
A file system, is a very like specific thing that has a bunch of

1384
01:05:25,100 --> 01:05:26,000
capabilities.

1385
01:05:26,200 --> 01:05:29,200
Usually, what people do is, they just essentially have a zip file, you

1386
01:05:29,200 --> 01:05:32,500
know, they have like a pack like where they pack things end-to-end.

1387
01:05:32,500 --> 01:05:33,800
That's not really a file system.

1388
01:05:35,900 --> 01:05:38,200
I understand your argument for blending update and render for

1389
01:05:38,200 --> 01:05:39,200
particles in general.

1390
01:05:39,200 --> 01:05:41,500
Don't, you want many things to update before rendering though?

1391
01:05:41,500 --> 01:05:45,200
For example, if we update and render the player only to later update

1392
01:05:45,200 --> 01:05:46,900
the bullet and find it hits the player.

1393
01:05:47,000 --> 01:05:49,400
The players reaction animation is a frame off.

1394
01:05:49,700 --> 01:05:50,700
So I think

1395
01:05:52,500 --> 01:05:56,400
I would caution against thinking about updating in that way, because

1396
01:05:56,400 --> 01:05:59,800
you've basically baked into that question the assumption that the

1397
01:06:00,200 --> 01:06:03,200
That you update things like bullets and players is that you Loop

1398
01:06:03,200 --> 01:06:05,900
through a set of entities and whoever happens to be first in the list,

1399
01:06:05,900 --> 01:06:07,200
gets updated first or something.

1400
01:06:07,700 --> 01:06:10,400
That's usually not a very good way to write your update loop.

1401
01:06:10,400 --> 01:06:12,600
I realized that is the way a lot of games right there, update Loop,

1402
01:06:12,600 --> 01:06:14,800
but I would never do it that way.

1403
01:06:15,300 --> 01:06:19,000
So when we get to sort of how we write those things, I'll show you how

1404
01:06:19,000 --> 01:06:19,800
to structure things.

1405
01:06:19,800 --> 01:06:21,900
So that we update things correctly.

1406
01:06:23,900 --> 01:06:24,800
Because the other way too.

1407
01:06:24,900 --> 01:06:29,100
I would I would point out that in that situation.

1408
01:06:29,100 --> 01:06:32,000
You talked about you actually have another bug which is that?

1409
01:06:32,200 --> 01:06:36,700
What if you were to like, what if you were to update the player,

1410
01:06:36,800 --> 01:06:37,500
right?

1411
01:06:38,000 --> 01:06:42,300
And then you update the bullet and you find out that the thing that

1412
01:06:42,300 --> 01:06:46,300
has happened with the bullet, should imply, that the player couldn't

1413
01:06:46,300 --> 01:06:48,600
have moved to where they're going to move, like the bullet hits a

1414
01:06:48,600 --> 01:06:52,700
button, that opens a door and the player hit the door.

1415
01:06:53,700 --> 01:06:54,900
When they were updated.

1416
01:06:54,900 --> 01:06:57,900
So at that point, when the player would have been going through the

1417
01:06:57,900 --> 01:07:00,800
door, they actually stopped, which is a bug, right?

1418
01:07:01,000 --> 01:07:03,000
So you can't just think about things.

1419
01:07:03,000 --> 01:07:06,400
Even in terms of update than render, you have update dependencies in

1420
01:07:06,400 --> 01:07:08,800
general and update dependencies, have to be handled.

1421
01:07:08,800 --> 01:07:10,900
It usually has nothing to do with rendering or not.

1422
01:07:11,100 --> 01:07:14,400
So if you have things that are dependent on their order of resolution

1423
01:07:14,400 --> 01:07:17,500
and you care, those have to be baked into the update understanding

1424
01:07:17,500 --> 01:07:20,800
itself, and it really doesn't have much to do with rendering and you

1425
01:07:20,800 --> 01:07:22,900
can leave rendering out of it entirely and you still have that

1426
01:07:22,900 --> 01:07:23,000
problem.

1427
01:07:30,500 --> 01:07:33,400
How strong is the notion that you perform the update and render steps

1428
01:07:33,400 --> 01:07:34,000
together?

1429
01:07:34,200 --> 01:07:36,800
What about, a situation where update order requirements differ from

1430
01:07:36,800 --> 01:07:38,000
render order requirements?

1431
01:07:38,700 --> 01:07:42,200
Well, so, the idea is not that it's a strong division.

1432
01:07:42,500 --> 01:07:45,800
The idea is, I'm sorry, but it's a strong blending.

1433
01:07:46,000 --> 01:07:48,000
The idea is that architectural.

1434
01:07:48,000 --> 01:07:52,500
You don't make the distinction, so you don't want to pre say a

1435
01:07:52,500 --> 01:07:55,100
priority that update and render can't happen together.

1436
01:07:55,700 --> 01:07:59,300
And so that way, anything who can be updated rendered correctly

1437
01:07:59,300 --> 01:07:59,900
together.

1438
01:08:00,200 --> 01:08:03,900
B and anything that can't won't be right.

1439
01:08:04,000 --> 01:08:08,300
But there's a great many things that can be and so not making an

1440
01:08:08,300 --> 01:08:12,000
architectural division, there helps you increase performance.

1441
01:08:16,000 --> 01:08:17,000
Let's see.

1442
01:08:21,200 --> 01:08:27,100
Okay, so Jonathan Blow is asking to explain the variable in this

1443
01:08:27,100 --> 01:08:27,600
session.

1444
01:08:28,100 --> 01:08:32,500
And one of the things that I didn't talk about when we talked about

1445
01:08:32,500 --> 01:08:37,000
game architecture, obviously, was where the variable fits into all of

1446
01:08:37,000 --> 01:08:37,399
this.

1447
01:08:37,700 --> 01:08:42,100
The reason that I didn't do that is because still, I mean, I've been

1448
01:08:42,100 --> 01:08:45,100
programming games for like 30 years now, I guess.

1449
01:08:45,100 --> 01:08:47,899
I mean, you know, I was little when I started, so I don't know 20

1450
01:08:47,899 --> 01:08:49,000
years professionally.

1451
01:08:50,000 --> 01:08:54,700
I've never actually seen a game engine successfully create a variable

1452
01:08:54,700 --> 01:08:58,200
for more than, like, you know, a fraction of a second.

1453
01:08:58,200 --> 01:08:59,800
So, we really just have not been able to

1454
01:09:00,000 --> 01:09:03,800
Study these variables if they even really exist.

1455
01:09:03,800 --> 01:09:06,399
I mean, we only see them indirectly, right?

1456
01:09:06,800 --> 01:09:11,000
So again, Jonathan, it's a good question, obviously, but I just don't,

1457
01:09:11,100 --> 01:09:15,300
I feel like it's impossible to really explain its like a frontier of

1458
01:09:15,300 --> 01:09:16,100
computer science.

1459
01:09:20,200 --> 01:09:23,500
How do you handle update versus render for a game that can run 60 or

1460
01:09:23,500 --> 01:09:25,800
120 FPS depending on the user's display?

1461
01:09:27,500 --> 01:09:28,800
Well, it doesn't really matter.

1462
01:09:30,800 --> 01:09:31,100
I guess.

1463
01:09:31,100 --> 01:09:35,100
There's so there's some, if you are concerned about wanting the game

1464
01:09:35,100 --> 01:09:38,899
to always run at the same time step, even if their rendering is having

1465
01:09:38,899 --> 01:09:41,600
a different time step, then that's a sort of separate question.

1466
01:09:41,600 --> 01:09:43,700
But assuming you just mean 60 or 120 FPS.

1467
01:09:43,700 --> 01:09:45,700
It's just this T variable right.

1468
01:09:45,800 --> 01:09:49,600
Either the T variable comes in as 1 over 60.

1469
01:09:49,700 --> 01:09:52,399
As the amount to update or one over 120.

1470
01:09:52,399 --> 01:09:54,300
That's the only difference between the two scenarios you just

1471
01:09:54,300 --> 01:09:55,000
described.

1472
01:09:55,300 --> 01:09:58,200
So you don't really have to change anything.

1473
01:10:01,300 --> 01:10:03,600
When you say you like to do update ran together, are you implying that

1474
01:10:03,600 --> 01:10:05,700
you do it on a per object entity basis?

1475
01:10:06,000 --> 01:10:09,900
No, you do it at whatever granularity makes sense for the system.

1476
01:10:10,500 --> 01:10:14,200
So, like for particle systems, for example, you would do it for the

1477
01:10:14,200 --> 01:10:16,700
particle system at once for objects.

1478
01:10:16,700 --> 01:10:20,200
There may be a dependency graph that has to get traversed for the

1479
01:10:20,200 --> 01:10:20,900
update.

1480
01:10:21,000 --> 01:10:21,700
You never know.

1481
01:10:21,900 --> 01:10:26,600
So it's, it's about not drawing an architectural distinction, so that

1482
01:10:26,600 --> 01:10:30,800
every sub portion of every portion of the update code.

1483
01:10:31,100 --> 01:10:34,400
Choose to have the rendering Bound in or happen later depending on

1484
01:10:34,400 --> 01:10:35,200
which one it wants.

1485
01:10:38,600 --> 01:10:40,900
Are we planning on networking with the game Loop?

1486
01:10:41,600 --> 01:10:48,000
Well, we we may do networking as a separate stream some day after the

1487
01:10:48,000 --> 01:10:49,500
game is done, but no there will be no.

1488
01:10:49,500 --> 01:10:51,500
We're not going to do networking because networking is a whole

1489
01:10:51,500 --> 01:10:55,800
separate topic that I don't feel like we'll really have time to do

1490
01:10:55,800 --> 01:11:00,100
within any reasonable sort of size of this stream.

1491
01:11:02,300 --> 01:11:03,000
How are you going to handle?

1492
01:11:03,000 --> 01:11:04,500
Shaders in handmade hero?

1493
01:11:04,700 --> 01:11:06,900
Well, we will cover shaders when we get to shaders.

1494
01:11:11,900 --> 01:11:14,000
But see what language are using primarily.

1495
01:11:14,000 --> 01:11:14,700
Is there somewhere.

1496
01:11:14,700 --> 01:11:16,000
We can review these streams.

1497
01:11:16,300 --> 01:11:18,400
We are using C with a little bit of C++.

1498
01:11:18,600 --> 01:11:24,500
And yes, if you go to handmade hero dot-org you can go to a number of

1499
01:11:24,500 --> 01:11:25,000
places.

1500
01:11:25,100 --> 01:11:28,800
There's a video archive, which is the direct YouTube archive, for all

1501
01:11:28,800 --> 01:11:29,400
the things.

1502
01:11:30,100 --> 01:11:34,900
And you can also go to this news and forums link, which has for some

1503
01:11:35,100 --> 01:11:38,800
it lags a bit because people actually manually do this work and

1504
01:11:38,800 --> 01:11:39,600
there's a lot of work.

1505
01:11:40,000 --> 01:11:41,500
But on the episode guide here.

1506
01:11:42,200 --> 01:11:45,600
If you click on these reforms and episode guide, these are annotated

1507
01:11:45,800 --> 01:11:48,900
ones where you can actually see stuff like timelines of what was

1508
01:11:48,900 --> 01:11:49,400
covered.

1509
01:11:49,700 --> 01:11:53,100
So if you would check here first, if you're trying to catch up with

1510
01:11:53,100 --> 01:11:57,600
older episodes because these have a lot more information in them than

1511
01:11:57,600 --> 01:11:59,800
just viewing it directly on the YouTube, but if you're trying to

1512
01:12:00,000 --> 01:12:01,700
Look at one that just got posted.

1513
01:12:01,700 --> 01:12:03,700
They aren't quite in the episode archive yet.

1514
01:12:03,700 --> 01:12:04,000
So

1515
01:12:11,200 --> 01:12:13,900
Would a memory mapped virtual file system?

1516
01:12:13,900 --> 01:12:14,900
Ba.

1517
01:12:14,900 --> 01:12:18,000
Ba s move them?

1518
01:12:23,000 --> 01:12:24,900
I have no idea what that means.

1519
01:12:25,100 --> 01:12:26,400
Sorry, I do not know.

1520
01:12:27,600 --> 01:12:29,700
Oh, bad would be a bad move.

1521
01:12:32,300 --> 01:12:35,000
Well, memory map virtual file systems, have some problems.

1522
01:12:35,100 --> 01:12:39,100
The first thing that that there's a problem is you can't run on 32-bit

1523
01:12:40,400 --> 01:12:45,200
because if you have more than four gigs of audio visual data and you

1524
01:12:45,200 --> 01:12:48,500
want to run a 32-bit system, well, you can't memory map the file.

1525
01:12:49,700 --> 01:12:53,100
Right, so you'd have to memory map the file in chunks.

1526
01:12:53,100 --> 01:12:55,100
And if you remember having the following chunks, you might as well

1527
01:12:55,100 --> 01:12:58,800
just load it right with traditional, loading code.

1528
01:12:59,400 --> 01:13:02,600
So very at virtual file system.

1529
01:13:02,700 --> 01:13:03,300
I don't know.

1530
01:13:03,300 --> 01:13:06,400
I mean on 64-bit memory mapping.

1531
01:13:07,100 --> 01:13:08,300
I don't know if I like it.

1532
01:13:08,800 --> 01:13:11,600
You don't have control over when the operation was doing that paging.

1533
01:13:11,600 --> 01:13:12,400
So I don't know.

1534
01:13:12,400 --> 01:13:14,600
I don't love memory mapped files.

1535
01:13:14,600 --> 01:13:15,500
To be honest with you.

1536
01:13:16,100 --> 01:13:17,000
I like them for certain things.

1537
01:13:17,000 --> 01:13:18,300
We use them in the recording.

1538
01:13:19,500 --> 01:13:21,700
Certain things they make sense when you actually have something that's

1539
01:13:21,700 --> 01:13:23,600
basically memory backed by a file.

1540
01:13:24,300 --> 01:13:28,200
But in this case, that's not exactly what we have because we never

1541
01:13:28,200 --> 01:13:29,300
right to it even.

1542
01:13:29,300 --> 01:13:33,800
So it's a little, it's a little unnecessary and if you lose a little

1543
01:13:33,800 --> 01:13:36,900
control of when the operating system goes to do the actual reeds.

1544
01:13:41,300 --> 01:13:45,400
Will handmade go with a loading screen or streaming method resources

1545
01:13:45,400 --> 01:13:46,000
streaming.

1546
01:13:49,900 --> 01:13:52,900
So definitely definitely not loading screen.

1547
01:13:54,200 --> 01:13:57,100
Can you go over how streaming fits into the guar?

1548
01:13:57,400 --> 01:14:02,800
Yes, so basically, what will happen here and we'll see this in a

1549
01:14:02,800 --> 01:14:03,400
second.

1550
01:14:03,600 --> 01:14:07,500
But what will happen on the diagram is very much.

1551
01:14:07,500 --> 01:14:08,600
Like what I've drawn here.

1552
01:14:08,900 --> 01:14:12,000
We will be in the inside guar, right?

1553
01:14:12,000 --> 01:14:16,600
And I talked about this way back when I talked about the platform

1554
01:14:16,600 --> 01:14:18,500
layer, very at the very beginning.

1555
01:14:19,600 --> 01:14:22,200
And if you remember, I talked about that we had.

1556
01:14:22,200 --> 01:14:23,400
We Implement like a debug.

1557
01:14:23,700 --> 01:14:28,700
In file, debug save file thing that we have in there for now and

1558
01:14:28,700 --> 01:14:31,800
that's what we'll be using to load assets just to start with.

1559
01:14:32,100 --> 01:14:35,200
But when we go to actually do our streaming, what will happen is

1560
01:14:35,200 --> 01:14:37,800
basically there will be a queue exposed.

1561
01:14:37,800 --> 01:14:41,800
So when the guar calls in, it's not passing one currently, it'll pass

1562
01:14:41,800 --> 01:14:49,700
a queue in here that the game can write to that basically will allow a

1563
01:14:49,700 --> 01:14:53,500
threaded resource loader in the background to load things.

1564
01:14:53,600 --> 01:14:54,700
Things for the game.

1565
01:14:55,400 --> 01:14:57,900
So a cube will come in here and it'll do rights to that q.

1566
01:14:58,100 --> 01:14:59,200
That is how it will.

1567
01:14:59,500 --> 01:14:59,800
It will.

1568
01:15:01,200 --> 01:15:03,200
That's how it will kind of come in on Gwar.

1569
01:15:11,200 --> 01:15:14,100
Game engines, often Run update and render prep in separate threads in

1570
01:15:14,100 --> 01:15:15,100
order to exploit Hardware.

1571
01:15:15,100 --> 01:15:15,700
Parallelism.

1572
01:15:15,700 --> 01:15:17,700
If you combine update and render will that prevent you from doing

1573
01:15:17,700 --> 01:15:18,000
this?

1574
01:15:18,100 --> 01:15:19,100
No, and often.

1575
01:15:19,100 --> 01:15:22,600
That is not a very good way to split those two things actually because

1576
01:15:22,600 --> 01:15:24,800
of the cache coherency problem.

1577
01:15:24,800 --> 01:15:25,700
I just mentioned.

1578
01:15:26,000 --> 01:15:30,700
So if you imagine, I mean, it depends in streaming scenarios, maybe

1579
01:15:30,700 --> 01:15:31,200
doesn't matter.

1580
01:15:31,200 --> 01:15:34,100
So I shouldn't say it's that says, that was I over spoke.

1581
01:15:34,400 --> 01:15:35,400
I wouldn't say it was bad.

1582
01:15:35,600 --> 01:15:37,400
I'll simply say that it's not relevant.

1583
01:15:38,600 --> 01:15:44,300
In terms of performance, the reason why is because if I want to write,

1584
01:15:44,700 --> 01:15:48,200
if I have something where I've got a bunch of stuff that has to get

1585
01:15:48,200 --> 01:15:49,500
updated, right?

1586
01:15:49,900 --> 01:15:51,500
I can choose to split it.

1587
01:15:51,500 --> 01:15:52,300
Either way.

1588
01:15:52,500 --> 01:15:55,900
I can either say, like, you know, each, one of these things has to get

1589
01:15:55,900 --> 01:15:57,800
updated and rendered, right?

1590
01:15:57,800 --> 01:16:02,400
So I've simply got, you know, object 0, 1, 2 3, whatever they are

1591
01:16:02,400 --> 01:16:04,200
particles, who cares, right?

1592
01:16:05,200 --> 01:16:07,100
So I've got update and render.

1593
01:16:08,900 --> 01:16:12,900
If I choose to do what I choose to do my threading, I can do that.

1594
01:16:12,900 --> 01:16:13,900
In one of two ways.

1595
01:16:14,200 --> 01:16:17,500
I can do it using one of these vertical lines here like and you could

1596
01:16:17,500 --> 01:16:18,100
almost imagine.

1597
01:16:18,100 --> 01:16:19,100
It's not updated render.

1598
01:16:19,100 --> 01:16:22,000
You could imagine this was any number of tasks, right?

1599
01:16:22,000 --> 01:16:25,100
You've got you could you can think of it like a matrix?

1600
01:16:26,700 --> 01:16:28,200
Let me just draw this out for you.

1601
01:16:28,700 --> 01:16:30,300
I think it's pretty important to understand.

1602
01:16:30,800 --> 01:16:32,000
So I'm going to go ahead and draw it.

1603
01:16:33,700 --> 01:16:38,500
Okay, so you got your code right and you wrote it single-threaded.

1604
01:16:38,500 --> 01:16:39,500
So you just wrote it.

1605
01:16:39,500 --> 01:16:42,200
You got it working right now.

1606
01:16:42,200 --> 01:16:43,100
You want to think about it?

1607
01:16:43,100 --> 01:16:46,000
In terms of how do you get threading performance out of this code,

1608
01:16:46,500 --> 01:16:47,100
right?

1609
01:16:51,100 --> 01:16:57,500
So here are the like elements so I have element zero element 1,

1610
01:16:57,500 --> 01:16:59,300
element 2, element 3.

1611
01:16:59,300 --> 01:17:02,300
And these can be whatever they are right there objects.

1612
01:17:02,300 --> 01:17:03,000
They're particles.

1613
01:17:03,000 --> 01:17:05,400
I don't care what you then have steps.

1614
01:17:05,400 --> 01:17:11,300
There's step 0, Step 1, Step 2, and so on.

1615
01:17:11,500 --> 01:17:12,100
Right?

1616
01:17:13,600 --> 01:17:19,300
So all of these sorts of things, each one of these boxes has to happen

1617
01:17:19,600 --> 01:17:20,700
in single threaded code.

1618
01:17:21,400 --> 01:17:23,900
You can think of traversing The Matrix like this.

1619
01:17:25,000 --> 01:17:25,700
Right.

1620
01:17:27,200 --> 01:17:28,900
I start with them at zero, I do Step Zero.

1621
01:17:28,900 --> 01:17:30,900
I do step one of you step, two, I go to Emma one.

1622
01:17:30,900 --> 01:17:32,200
I do step 02, step one.

1623
01:17:32,200 --> 01:17:36,300
I do step to write whatever those steps are and these steps, you know,

1624
01:17:36,400 --> 01:17:38,000
maybe it's just updating render.

1625
01:17:38,000 --> 01:17:42,400
So there's only two, maybe it's update render and like, you know,

1626
01:17:43,100 --> 01:17:44,000
write to disk.

1627
01:17:44,000 --> 01:17:46,400
I mean, I don't know, who knows, right?

1628
01:17:46,400 --> 01:17:47,200
Whatever it is.

1629
01:17:47,500 --> 01:17:54,800
I've got three steps here update, you know, frob indicate because that

1630
01:17:54,800 --> 01:17:55,500
happens.

1631
01:17:55,700 --> 01:17:56,800
Obviously everyone from Decatur.

1632
01:17:57,000 --> 01:17:58,300
Things once in awhile and then render.

1633
01:17:58,300 --> 01:17:59,800
So I've got I've got steps that can be

1634
01:18:00,000 --> 01:18:00,800
What up, right.

1635
01:18:01,600 --> 01:18:03,000
So one way, is that zigzag pattern?

1636
01:18:03,000 --> 01:18:04,100
That's the single-threaded way.

1637
01:18:04,100 --> 01:18:06,500
And that's obviously the slowest way because you're not taking

1638
01:18:06,500 --> 01:18:09,600
advantage of any of the cores, the processor, but sometimes, that's

1639
01:18:09,600 --> 01:18:12,700
the best way to do it because if, you know, you have lots of things,

1640
01:18:12,800 --> 01:18:13,700
other things that we're going on.

1641
01:18:13,700 --> 01:18:14,600
At the same time.

1642
01:18:14,700 --> 01:18:16,600
There may be no reason to write something multi-threaded.

1643
01:18:16,600 --> 01:18:18,800
So obviously, you always want to think about first, whether there's

1644
01:18:18,800 --> 01:18:22,200
even a reason in your particular game, given your in your target

1645
01:18:22,200 --> 01:18:25,800
platform profiles of stuff, whether you need to, but this is single

1646
01:18:25,800 --> 01:18:27,000
threaded, right?

1647
01:18:27,000 --> 01:18:27,900
That's how that looks.

1648
01:18:28,500 --> 01:18:29,900
Then if you

1649
01:18:30,000 --> 01:18:32,800
Read the way you were suggesting where you say, you split them into

1650
01:18:32,800 --> 01:18:33,400
two parts.

1651
01:18:33,400 --> 01:18:35,200
That looks like this, right?

1652
01:18:35,800 --> 01:18:37,800
The threads, go and columns here.

1653
01:18:38,000 --> 01:18:38,200
Right?

1654
01:18:38,200 --> 01:18:40,000
So one thread does the update one thread.

1655
01:18:40,000 --> 01:18:42,000
Does the Frog indicate one thread?

1656
01:18:42,000 --> 01:18:44,100
Does the render, right?

1657
01:18:45,000 --> 01:18:45,700
So there you go.

1658
01:18:46,800 --> 01:18:48,200
That was the thing that you were suggesting.

1659
01:18:48,600 --> 01:18:51,800
Well, I don't think that's a particularly compelling way to do it one

1660
01:18:51,800 --> 01:18:54,500
because we know there's a dependency here, right?

1661
01:18:54,600 --> 01:18:59,600
So now I have to have job control understand that this update has to

1662
01:18:59,600 --> 01:18:59,900
happen.

1663
01:19:00,000 --> 01:19:03,700
For this fraud indicate, which means that I can't even actually run

1664
01:19:03,700 --> 01:19:04,200
them together.

1665
01:19:04,200 --> 01:19:08,100
Like you were suggesting, they can't actually be paralyzed because the

1666
01:19:08,100 --> 01:19:09,500
updates have to happen before the from.

1667
01:19:09,500 --> 01:19:12,800
Okay, it's happened and the renders have to happen before or after the

1668
01:19:12,800 --> 01:19:13,000
fraud.

1669
01:19:13,000 --> 01:19:13,600
Mc8.

1670
01:19:13,600 --> 01:19:16,900
So job control is actually going to have to serialize these things to

1671
01:19:16,900 --> 01:19:19,500
a large extent, which doesn't sound particularly good to me, right?

1672
01:19:19,500 --> 01:19:20,400
So that's bad.

1673
01:19:20,600 --> 01:19:21,300
The other thing that's bad.

1674
01:19:21,300 --> 01:19:23,100
Is it pulls it into the cache multiple times?

1675
01:19:23,300 --> 01:19:26,900
So, whatever, element zeros data was any data that might have been

1676
01:19:26,900 --> 01:19:29,800
shared between these two things now has to get pulled in by each.

1677
01:19:29,900 --> 01:19:33,000
Thread, so it's gonna get pulled in twice right or three times.

1678
01:19:33,000 --> 01:19:36,800
Potentially furthermore, if update produces any residuals that frog

1679
01:19:36,800 --> 01:19:38,400
indicate needed, right?

1680
01:19:38,400 --> 01:19:41,000
Let's say it computed something that fraud mc8 also would need to

1681
01:19:41,000 --> 01:19:41,700
compute.

1682
01:19:42,000 --> 01:19:44,700
Well, either it writes it out to element which now burns are right

1683
01:19:44,700 --> 01:19:47,700
because it would have just been on the stack or it.

1684
01:19:48,900 --> 01:19:51,400
It has to be recomputed in front of Kate which wastes a bunch of

1685
01:19:51,400 --> 01:19:52,600
Cycles, right?

1686
01:19:52,900 --> 01:19:56,000
So I don't love, you know, sometimes that's appropriate but I don't

1687
01:19:56,000 --> 01:19:59,400
really love that the doing it that way.

1688
01:19:59,500 --> 01:19:59,800
What I

1689
01:20:00,000 --> 01:20:02,700
Fur to do is break it up this way.

1690
01:20:03,200 --> 01:20:03,800
Right?

1691
01:20:03,900 --> 01:20:08,000
So basically there's somebody doing one zigzag that way and then

1692
01:20:08,000 --> 01:20:10,400
somebody doing a zigzag this way, right?

1693
01:20:10,800 --> 01:20:12,100
Basically break it up.

1694
01:20:12,100 --> 01:20:12,700
Bye.

1695
01:20:12,700 --> 01:20:13,200
Bye.

1696
01:20:13,400 --> 01:20:14,800
Bye rose, right.

1697
01:20:14,900 --> 01:20:18,900
Because this way, the dependency is inside the code still and it looks

1698
01:20:18,900 --> 01:20:22,200
exactly like the single threaded code looked, right, but now you just

1699
01:20:22,200 --> 01:20:23,500
break it up by.

1700
01:20:23,600 --> 01:20:26,500
Which one is by what group of elements.

1701
01:20:26,500 --> 01:20:29,400
It's actually working on so, I don't know.

1702
01:20:29,600 --> 01:20:29,800
So,

1703
01:20:29,900 --> 01:20:34,200
So personally, I tend to prefer writing it that way if you can, if for

1704
01:20:34,200 --> 01:20:37,800
some reason you have to write it this way, well, okay, but I feel like

1705
01:20:37,800 --> 01:20:39,800
a lot of times it's better to write it the other way.

1706
01:20:50,800 --> 01:20:55,000
Since the human eye can only see at 70 frames per second.

1707
01:20:55,000 --> 01:20:57,700
Is it worth it to put in a Max FPS allowed?

1708
01:20:57,700 --> 01:20:59,800
Well, we will put in a Max FPS, but

1709
01:21:00,000 --> 01:21:04,600
Because of that reason will be putting in a Max FPS because at some

1710
01:21:04,600 --> 01:21:06,900
point are floating Point values, will break down.

1711
01:21:07,200 --> 01:21:10,600
And so we need to make sure that our time step is not doesn't get any

1712
01:21:10,600 --> 01:21:13,900
smaller than whatever that is, but I would point out that the human

1713
01:21:13,900 --> 01:21:16,600
eye can actually see greater than 70 frames per second.

1714
01:21:16,600 --> 01:21:17,900
It can see at least 90.

1715
01:21:19,200 --> 01:21:24,500
So, you know, I wouldn't, I wouldn't go so far as to say that 7B

1716
01:21:24,500 --> 01:21:27,200
frames per second would be a maximum anyway, but yeah.

1717
01:21:28,800 --> 01:21:30,700
How are you going to handle vsync?

1718
01:21:31,700 --> 01:21:33,400
Well, we already kind of do handle.

1719
01:21:33,400 --> 01:21:36,500
These think, in some sense, meaning that we have the code structured,

1720
01:21:36,500 --> 01:21:40,000
so that when we switch to D3 and opengl, it'll just kind of work

1721
01:21:40,500 --> 01:21:43,100
because we're actually doing our own spin lock.

1722
01:21:43,300 --> 01:21:46,700
There waiting for the mythical 60th of a second.

1723
01:21:46,800 --> 01:21:49,100
But what we will do in the future is just actually called d3d or

1724
01:21:49,100 --> 01:21:52,500
opengl, and it will do the vsync on the flip.

1725
01:21:52,700 --> 01:21:54,200
So our codes already set up to handle it.

1726
01:21:54,200 --> 01:21:56,100
So we won't really have to do much to make that work.

1727
01:21:57,900 --> 01:21:58,900
Let's see.

1728
01:22:09,700 --> 01:22:10,600
For avoiding cache.

1729
01:22:10,600 --> 01:22:13,500
Misses when you separate up it rendering, can't you store the same

1730
01:22:13,500 --> 01:22:15,000
types of components together in memory.

1731
01:22:15,000 --> 01:22:17,600
So, for example, you would Loop through and update the physics

1732
01:22:17,600 --> 01:22:18,100
components.

1733
01:22:18,100 --> 01:22:20,200
And then the render components for all entities will know because

1734
01:22:20,200 --> 01:22:22,100
they're the same components, right?

1735
01:22:22,500 --> 01:22:27,500
Whatever physics is creating, right physics is going to, right?

1736
01:22:28,000 --> 01:22:30,300
I'm going to do the physics code, right?

1737
01:22:30,500 --> 01:22:35,400
I have to update the position the velocity right at the very least, to

1738
01:22:35,400 --> 01:22:38,200
possibly some other things, the position and the velocity are probably

1739
01:22:38,200 --> 01:22:38,500
need to buy.

1740
01:22:38,700 --> 01:22:41,800
Under the position at least is needed to know where to render the

1741
01:22:41,800 --> 01:22:42,300
thing.

1742
01:22:42,400 --> 01:22:42,900
Right?

1743
01:22:43,400 --> 01:22:45,600
So I need the position velocity is probably needed.

1744
01:22:45,600 --> 01:22:47,900
If I'm doing any kind of motion blur or other sorts of effects.

1745
01:22:48,000 --> 01:22:49,300
I might need that as well.

1746
01:22:49,700 --> 01:22:52,000
So they're not separate sets of data.

1747
01:22:52,700 --> 01:22:54,200
They're the same set of data.

1748
01:22:54,200 --> 01:22:57,100
Now, there are some things that the physics will use that, the

1749
01:22:57,100 --> 01:22:58,200
rendering won't use.

1750
01:22:58,300 --> 01:23:02,100
And so yes, that part you don't have to worry about because you're not

1751
01:23:02,100 --> 01:23:06,200
polluting the cash with that, in the, in the multi in the case where

1752
01:23:06,200 --> 01:23:08,300
we're doing like this, but you are

1753
01:23:09,200 --> 01:23:12,600
You are definitely wasting cash band with reloading these things.

1754
01:23:13,100 --> 01:23:16,100
So it's just not, it's not as efficient.

1755
01:23:16,100 --> 01:23:19,600
If you can make it work, if you can do it this way instead.

1756
01:23:26,900 --> 01:23:28,100
You said tasks?

1757
01:23:28,100 --> 01:23:30,300
Does that mean a sink job system?

1758
01:23:31,000 --> 01:23:34,700
I don't know if this game will actually need an async job system per

1759
01:23:34,700 --> 01:23:35,300
se.

1760
01:23:36,200 --> 01:23:43,100
I think this game is probably going to be scoped such that it doesn't

1761
01:23:43,100 --> 01:23:45,300
require a full async job system.

1762
01:23:45,300 --> 01:23:49,700
And the reason for that is because, of course, one of our Target

1763
01:23:49,700 --> 01:23:51,500
platforms, which is the Raspberry Pi.

1764
01:23:52,400 --> 01:23:54,600
Has one core, if I remember correctly.

1765
01:23:54,900 --> 01:23:58,400
So we really can't go crazy with multi-core.

1766
01:23:58,400 --> 01:23:59,800
We've got to kind of stick to

1767
01:24:00,800 --> 01:24:01,800
Something reasonable.

1768
01:24:02,400 --> 01:24:04,700
So the things that will multi-thread or mostly going to be like the

1769
01:24:04,700 --> 01:24:09,300
renderer and stuff that will then use GPU on other platforms and that

1770
01:24:09,300 --> 01:24:12,700
sort of thing and asset streaming which is not really about threading

1771
01:24:12,700 --> 01:24:14,500
so much as about overlapping disk I/O.

1772
01:24:14,500 --> 01:24:14,900
So

1773
01:24:20,200 --> 01:24:20,900
Let's see Panda.

1774
01:24:20,900 --> 01:24:21,300
Tipper.

1775
01:24:21,300 --> 01:24:23,700
When will we see you actually creating the game.

1776
01:24:24,400 --> 01:24:26,500
Well, we'll start programming the game tomorrow.

1777
01:24:28,600 --> 01:24:30,500
So I'm not sure what you mean by creating the game.

1778
01:24:31,500 --> 01:24:34,500
But starting program in the game tomorrow, but we're going to be doing

1779
01:24:34,500 --> 01:24:36,400
rendering work as well interleave.

1780
01:24:36,400 --> 01:24:39,300
So will I mean, if you're talking about when will we actually be

1781
01:24:39,300 --> 01:24:41,700
mostly working on just game code?

1782
01:24:41,700 --> 01:24:45,200
It'll still be quite a while because we got to do rendering work

1783
01:24:45,600 --> 01:24:49,100
interleaved with our game work at the moment.

1784
01:24:50,200 --> 01:24:52,000
Because we haven't written any rendering code yet.

1785
01:24:53,600 --> 01:24:55,800
Will you be making a physics engine during the series?

1786
01:24:55,900 --> 01:25:00,600
Yes, but not I mean it depends what you mean by physics engine will be

1787
01:25:00,700 --> 01:25:04,200
making a gay any engine that does the physical stuff that we needed to

1788
01:25:04,200 --> 01:25:05,300
do for this game.

1789
01:25:06,500 --> 01:25:09,600
But, you know, we're not trying to make Havoc or something like this,

1790
01:25:09,800 --> 01:25:11,200
since this is a 2-D game.

1791
01:25:11,300 --> 01:25:12,400
It wouldn't be 3D physics.

1792
01:25:12,400 --> 01:25:14,000
Anyway, it's 2D physics.

1793
01:25:15,200 --> 01:25:15,800
That makes sense.

1794
01:25:18,200 --> 01:25:23,200
Is there any issue with posting AJ's HTML5 port on my GitHub?

1795
01:25:23,700 --> 01:25:32,800
Um, so basically, the way that the code is still copyrighted until

1796
01:25:32,800 --> 01:25:35,700
eventually, we release it into the public domain, which I put a time

1797
01:25:35,700 --> 01:25:39,100
limit on that has to be two years from when the game ships or earlier,

1798
01:25:39,100 --> 01:25:42,900
basically, so you're not supposed to be posting handmade hero code to

1799
01:25:42,900 --> 01:25:43,500
GitHub.

1800
01:25:43,800 --> 01:25:46,800
If you're just trying to post a ported platform layer that you did,

1801
01:25:46,900 --> 01:25:47,800
then be my guest.

1802
01:25:48,200 --> 01:25:50,600
Because hey, you wrote that platform layer, right?

1803
01:25:51,300 --> 01:25:54,600
And I don't have any interest in stopping you from posting it because

1804
01:25:54,600 --> 01:25:55,900
other people can learn from it.

1805
01:25:55,900 --> 01:25:57,500
And you know, that's been great.

1806
01:25:57,500 --> 01:25:59,800
So there's been a bunch of people who have posted platform layers.

1807
01:25:59,900 --> 01:26:02,500
They all asked me for permission and I said yes to all of them.

1808
01:26:03,300 --> 01:26:07,000
So, I would basically say that posting platform layers is okay.

1809
01:26:07,000 --> 01:26:10,200
Please send me a note and let me know where it is because we probably

1810
01:26:10,200 --> 01:26:13,800
will want to put it on the handmade hero site and point to it.

1811
01:26:14,700 --> 01:26:17,800
But what I would like to avoid is posting this

1812
01:26:17,900 --> 01:26:21,600
Source code to the game anywhere that's not allowed primarily because

1813
01:26:21,600 --> 01:26:23,500
that's like one of the benefits you get for pre-ordering.

1814
01:26:23,500 --> 01:26:26,200
So that's like part of the product is the source code.

1815
01:26:26,300 --> 01:26:29,100
So that is not supposed to get ported posted anywhere, if that makes

1816
01:26:29,100 --> 01:26:29,500
sense.

1817
01:26:29,900 --> 01:26:31,900
When things do get released into the public domain.

1818
01:26:31,900 --> 01:26:33,200
I will make it very clear.

1819
01:26:33,300 --> 01:26:35,400
So I will be announcing any time.

1820
01:26:35,600 --> 01:26:37,700
I take a chunk of code and released to the public to make us some.

1821
01:26:38,000 --> 01:26:40,200
I may release some code earlier into the public domain.

1822
01:26:41,100 --> 01:26:45,300
I will, you know, make it very clear what that is and the license dot

1823
01:26:45,300 --> 01:26:46,600
txt file in the

1824
01:26:47,900 --> 01:26:52,200
Distribution will change to reflect, which files are are allowed to be

1825
01:26:52,400 --> 01:26:52,900
sort of done.

1826
01:26:52,900 --> 01:26:54,400
What with what you will.

1827
01:27:00,000 --> 01:27:00,300
Right.

1828
01:27:00,300 --> 01:27:03,600
Looks like we are done with questions right on time.

1829
01:27:03,600 --> 01:27:05,100
29, 28.

1830
01:27:05,900 --> 01:27:09,600
All right, thank you everyone for tuning into handmade hero for

1831
01:27:09,600 --> 01:27:11,600
architecture discussion tomorrow.

1832
01:27:11,600 --> 01:27:14,800
We will start actually programming the game structure.

1833
01:27:14,800 --> 01:27:19,100
So will kind of be like making some little things and kind of, you

1834
01:27:19,100 --> 01:27:23,200
know building the architecture by doing the same kind of process that

1835
01:27:23,200 --> 01:27:24,100
I was encouraging for.

1836
01:27:24,100 --> 01:27:27,700
Just writing the, you know, the basic game, the basic platform error

1837
01:27:27,700 --> 01:27:29,800
code, where you just kind of write the first thing.

1838
01:27:30,000 --> 01:27:32,200
That comes to mind when you're trying to build something and then you

1839
01:27:32,200 --> 01:27:34,800
kind of Loft it up into an architecture as we go.

1840
01:27:34,800 --> 01:27:36,800
We'll be taking that exact same approach.

1841
01:27:37,200 --> 01:27:39,500
And as we go, I'll be constantly referring to the stuff that we talked

1842
01:27:39,500 --> 01:27:42,500
about today in terms of reasons why I'm making certain decisions as we

1843
01:27:42,500 --> 01:27:43,300
do the lofting.

1844
01:27:44,100 --> 01:27:45,600
So I hope you'll join me tomorrow.

1845
01:27:45,600 --> 01:27:47,500
It is going to be at an odd time.

1846
01:27:47,500 --> 01:27:50,500
And let me explain one thing really quickly to people since we're on

1847
01:27:50,500 --> 01:27:51,100
holiday hours.

1848
01:27:51,100 --> 01:27:57,000
Now at any time, if you go to the news and forums link here on the

1849
01:27:57,000 --> 01:27:59,800
front page, the very front page always has

1850
01:28:00,000 --> 01:28:00,600
Schedule.

1851
01:28:00,700 --> 01:28:04,500
So if you want to know what time it's going to be, you can kind of see

1852
01:28:04,500 --> 01:28:07,100
basically, what the what the times are.

1853
01:28:07,300 --> 01:28:07,700
You'll notice.

1854
01:28:07,700 --> 01:28:09,000
This one is at 8:00 a.m.

1855
01:28:09,000 --> 01:28:09,500
Tomorrow.

1856
01:28:09,500 --> 01:28:12,100
So we have a very early stream happening tomorrow morning.

1857
01:28:12,700 --> 01:28:15,000
So be aware that tomorrow stream 8 a.m.

1858
01:28:15,500 --> 01:28:16,900
Which again, is because of holiday hours.

1859
01:28:16,900 --> 01:28:20,700
I've got events during this week, that will be taking place at times,

1860
01:28:20,700 --> 01:28:22,700
that would have been normally where the stream would normally be.

1861
01:28:22,900 --> 01:28:25,500
So they have to be moved a little bit and then for the rest of the

1862
01:28:25,500 --> 01:28:27,000
week, it will be at 10 a.m.

1863
01:28:27,400 --> 01:28:29,500
So it's definitely going to be a lot of earlier times.

1864
01:28:29,500 --> 01:28:29,800
Now, if

1865
01:28:29,900 --> 01:28:33,900
If you can't make those on Twitch, no problem, everything gets updated

1866
01:28:33,900 --> 01:28:34,900
immediately thereafter.

1867
01:28:34,900 --> 01:28:39,500
So, in fact, the stream should be uploaded to YouTube and watchable on

1868
01:28:39,500 --> 01:28:40,000
YouTube.

1869
01:28:40,000 --> 01:28:43,700
Even not even on Twitches replay, but on YouTube, by the time, the

1870
01:28:43,700 --> 01:28:44,800
normal 8 p.m.

1871
01:28:44,800 --> 01:28:47,400
Slot rolls around, so you should be able to watch it, just as normal

1872
01:28:47,400 --> 01:28:49,700
it just unfortunately, you won't be able to ask you a.

1873
01:28:50,000 --> 01:28:53,000
But if you do have Q&A, you can always go to the code discussion thing

1874
01:28:53,000 --> 01:28:56,600
here that we have and you can you can put it in right there.

1875
01:28:57,000 --> 01:28:59,400
Okay, so if you would like

1876
01:29:00,000 --> 01:29:01,200
To work along at home.

1877
01:29:01,200 --> 01:29:03,600
With the source code, you can pre-order the game and you'll get a

1878
01:29:03,600 --> 01:29:06,000
download link that allows you to download the source code.

1879
01:29:06,500 --> 01:29:09,200
And if you just want to support the video series, we have a patreon

1880
01:29:09,200 --> 01:29:12,500
that you can subscribe to, I think that is absolutely everything.

1881
01:29:12,500 --> 01:29:13,200
That's on this page.

1882
01:29:13,200 --> 01:29:13,500
Obviously.

1883
01:29:13,500 --> 01:29:15,700
There's the Twitter feed which I try to tweet whenever things are

1884
01:29:15,700 --> 01:29:18,600
happening and the live link to twitch, but you must already know where

1885
01:29:18,600 --> 01:29:20,300
that is because you are here.

1886
01:29:20,700 --> 01:29:22,400
Thank you everyone for joining me.

1887
01:29:23,700 --> 01:29:26,600
I'm kind of excited to about tomorrow to start typing in some game

1888
01:29:26,600 --> 01:29:27,000
code.

1889
01:29:27,000 --> 01:29:29,700
I think it's going to be pretty fun, and we

1890
01:29:29,900 --> 01:29:30,800
Will ya?

1891
01:29:30,800 --> 01:29:32,500
I think we will probably make pretty good progress.

1892
01:29:32,500 --> 01:29:35,300
I'd it only took us 25 hours to do the prototyping layer.

1893
01:29:35,300 --> 01:29:35,800
Roughly.

1894
01:29:36,100 --> 01:29:37,000
That's pretty good time.

1895
01:29:37,000 --> 01:29:39,800
Like I said, that's not even a week worth of full of a full-time

1896
01:29:39,800 --> 01:29:40,500
coders time.

1897
01:29:41,300 --> 01:29:44,300
So, I'm interested to see how much progress we make on the game code.

1898
01:29:44,300 --> 01:29:47,100
I'm interested to see how long it takes because I've never programmed

1899
01:29:47,200 --> 01:29:48,700
livestream game code before.

1900
01:29:48,900 --> 01:29:52,300
So I don't know what the, you know, the time difference will be but I

1901
01:29:52,300 --> 01:29:55,900
think it'll probably go pretty well, but we will also be trying to

1902
01:29:55,900 --> 01:29:59,300
take it slow so we can explain absolutely everything unlike the win32

1903
01:29:59,300 --> 01:29:59,800
platform.

1904
01:30:00,000 --> 01:30:02,500
It's not really that important to understand how Windows works,

1905
01:30:02,500 --> 01:30:06,000
because it's just a just yet another platform into multiple platforms.

1906
01:30:06,000 --> 01:30:09,100
You have to ship on and nobody ever understands all the complexes or

1907
01:30:09,100 --> 01:30:11,600
went through to anyway, we will certainly be spending more time on

1908
01:30:11,900 --> 01:30:16,400
explaining stuff in the streams for the gameplay code, just because

1909
01:30:16,400 --> 01:30:19,900
it's stuff that you can understand completely and we will be writing

1910
01:30:19,900 --> 01:30:20,900
all the source code for yourself.

1911
01:30:20,900 --> 01:30:22,800
So I think that'll probably be pretty interesting too.

1912
01:30:23,100 --> 01:30:26,200
So thank you very much for joining me and I hope to see you all

1913
01:30:26,200 --> 01:30:28,200
tomorrow bright and early at 8 a.m.

1914
01:30:28,600 --> 01:30:29,800
But I suspect I may end up.

1915
01:30:30,000 --> 01:30:32,700
Mostly seeing people from Europe who are already up at that hour.

1916
01:30:32,700 --> 01:30:36,200
But either way, if I do, see a good if not, I hope to catch you on the

1917
01:30:36,200 --> 01:30:39,300
replay and thank you very much for joining me.

