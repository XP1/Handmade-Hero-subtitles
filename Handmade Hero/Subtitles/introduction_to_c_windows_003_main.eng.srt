1
00:00:03,600 --> 00:00:05,900
Okay, welcome everyone.

2
00:00:06,400 --> 00:00:11,100
This is the third day of the test stream here, where I am sort of

3
00:00:11,700 --> 00:00:13,900
practicing to make sure everything is working properly.

4
00:00:13,900 --> 00:00:17,000
And so that everyone kind of can give me feedback on how the streams

5
00:00:17,000 --> 00:00:21,700
are going in preparation for Monday's, start of handmade hero.

6
00:00:22,100 --> 00:00:28,100
And so what I wanted to do today, if you remember where we left off, I

7
00:00:28,100 --> 00:00:31,600
was just showing you some Assembly Language and starting to talk about

8
00:00:31,600 --> 00:00:32,400
what the C code was actually.

9
00:00:32,500 --> 00:00:34,300
You doing today?

10
00:00:34,300 --> 00:00:37,700
I hope will be a pretty exciting stream.

11
00:00:38,200 --> 00:00:42,500
I am hoping that that, basically, this will kind of start to tie

12
00:00:42,500 --> 00:00:43,100
things together.

13
00:00:43,100 --> 00:00:45,100
Because what I've done in the past, two streams is life.

14
00:00:45,200 --> 00:00:48,900
I've kind of had to throw a bunch of stuff at you and sort of give you

15
00:00:48,900 --> 00:00:52,600
the general idea and hope that a lot of that stuff kind of sticks, but

16
00:00:52,900 --> 00:00:57,700
I haven't been able to really get to a coherent sort of model that you

17
00:00:57,700 --> 00:01:00,400
can use in your head because I needed to kind of get some things out

18
00:01:00,400 --> 00:01:00,500
there.

19
00:01:00,500 --> 00:01:00,800
First.

20
00:01:00,800 --> 00:01:02,300
There's so many things involved.

21
00:01:02,700 --> 00:01:08,100
In a program that it's kind of hard to really start from from scratch

22
00:01:08,100 --> 00:01:10,600
in that sense to kind of have to give you a little bit and then go

23
00:01:10,600 --> 00:01:11,300
back and go.

24
00:01:11,300 --> 00:01:11,600
Okay.

25
00:01:11,600 --> 00:01:14,500
Now that you've sort of seen some things, let's let's actually talk

26
00:01:14,500 --> 00:01:15,600
about the holistic view.

27
00:01:16,400 --> 00:01:21,900
So what I wanted to talk about today finally was memory because memory

28
00:01:21,900 --> 00:01:26,400
is actually the fundamental thing that we work with in programming.

29
00:01:26,900 --> 00:01:31,200
And the reason that I say that it's very fundamental is because even

30
00:01:31,200 --> 00:01:32,300
though nowadays in higher

31
00:01:32,500 --> 00:01:35,600
The languages we start to work with abstractions and things like this

32
00:01:35,600 --> 00:01:39,200
where we're not really thinking necessarily about the memory that

33
00:01:39,200 --> 00:01:40,500
we're using or what it's doing.

34
00:01:41,000 --> 00:01:43,900
The important thing to remember is that a CPU itself.

35
00:01:43,900 --> 00:01:47,700
The thing that we are actually programming and a GPU for that matter.

36
00:01:47,900 --> 00:01:52,000
If you're working on a graphics card, those things are all about

37
00:01:52,000 --> 00:01:55,100
taking in memory modifying them and putting them back out to memory.

38
00:01:55,500 --> 00:01:59,200
This is true to such an extent that actually anything that you want to

39
00:01:59,200 --> 00:01:59,500
do.

40
00:01:59,500 --> 00:02:02,300
I don't care if it's audio or video or things that seem completely.

41
00:02:02,400 --> 00:02:03,000
Leon memory.

42
00:02:03,000 --> 00:02:07,500
Like they are actually all just about putting things into memory where

43
00:02:07,500 --> 00:02:09,600
other things can see that memory and use it.

44
00:02:09,600 --> 00:02:13,400
So, if I want to do graphics on a graphics card, and there's all this

45
00:02:13,400 --> 00:02:16,600
Hardware in there, that's designed to turn things into images that go

46
00:02:16,600 --> 00:02:20,800
out on, you know, even an analog, you know, old school to a CRT or

47
00:02:20,800 --> 00:02:23,700
something, where there was no digital transmission, even everything

48
00:02:23,700 --> 00:02:28,400
that happens up to that point is about putting the right stuff into

49
00:02:28,400 --> 00:02:28,800
memory.

50
00:02:28,800 --> 00:02:31,600
So that that Hardware component can read the memory

51
00:02:32,500 --> 00:02:36,400
Turn it into the proper electrical signal to produce a picture on a

52
00:02:36,400 --> 00:02:37,700
television or something like that.

53
00:02:37,700 --> 00:02:38,100
Right?

54
00:02:38,700 --> 00:02:43,500
So fundamentally programming always comes back to understanding.

55
00:02:43,600 --> 00:02:46,300
What is happening with the CPU.

56
00:02:46,300 --> 00:02:47,200
And the memory.

57
00:02:47,300 --> 00:02:51,300
What is this EP you doing to change that memory and how and that is

58
00:02:51,300 --> 00:02:54,700
the basis for all of the design of the code that you should do?

59
00:02:54,700 --> 00:02:57,100
You should be thinking about that because that is what you are doing

60
00:02:57,100 --> 00:02:58,000
at a core level.

61
00:02:58,100 --> 00:02:59,800
That's the basis of all the optimizations.

62
00:03:00,000 --> 00:03:01,100
Into the code you will do.

63
00:03:01,300 --> 00:03:04,600
And it's the basis of all the debugging that you will do because

64
00:03:04,600 --> 00:03:08,300
absolutely everything at the end of the day is a CPU instruction.

65
00:03:08,300 --> 00:03:09,400
That changes some memory.

66
00:03:09,600 --> 00:03:11,300
So nothing that you ever do.

67
00:03:11,300 --> 00:03:15,800
No matter how abstract can ever really get away from the truth of the

68
00:03:15,800 --> 00:03:18,300
matter that it is all about modifying memory.

69
00:03:18,600 --> 00:03:21,600
And so there are definitely abstractions that help us and we will be

70
00:03:21,600 --> 00:03:24,400
doing a lot of abstracting as we go where we start to think of things

71
00:03:24,400 --> 00:03:27,400
at a higher level than just each individual bit and how it's being

72
00:03:27,400 --> 00:03:28,000
set.

73
00:03:28,200 --> 00:03:29,900
But if you lose sight in,

74
00:03:30,000 --> 00:03:33,900
By early of the fact that it is all about that, you start to go very

75
00:03:33,900 --> 00:03:36,600
wrong in the way that you design and Implement things.

76
00:03:36,600 --> 00:03:39,400
Because you start to think of terms things in terms of their

77
00:03:39,400 --> 00:03:41,100
efficiency for the abstraction.

78
00:03:41,400 --> 00:03:43,800
And if you start to think of terms of things in terms of efficiency

79
00:03:43,800 --> 00:03:46,000
for the distractions, that is what leads to slow code.

80
00:03:46,000 --> 00:03:47,500
It's what leads to Buggy code.

81
00:03:47,500 --> 00:03:50,600
It's what leads to things that I don't really consider to be very good

82
00:03:50,600 --> 00:03:50,900
software.

83
00:03:50,900 --> 00:03:55,000
That's why I don't like when people sort of divorce themselves from an

84
00:03:55,000 --> 00:03:56,700
understanding of what happens on the computer.

85
00:03:56,700 --> 00:03:59,900
Now, if someday, someone develops, a machine that can execute

86
00:04:00,000 --> 00:04:03,500
You abstractions somehow then great.

87
00:04:03,500 --> 00:04:06,400
We can all learn how to program abstractions, and that'll be good.

88
00:04:06,400 --> 00:04:09,300
But until that day, I think it's a fundamental part of every

89
00:04:09,300 --> 00:04:13,300
programmers job to understand exactly how the machine works.

90
00:04:13,500 --> 00:04:17,100
And, you know, you don't have to get crazy with it.

91
00:04:17,100 --> 00:04:20,100
I don't pretend to know everything that happens at Intel CPU because

92
00:04:20,100 --> 00:04:22,600
oh my God, they are fantastically complicated.

93
00:04:22,600 --> 00:04:24,700
So yes, just like you'll never know.

94
00:04:24,700 --> 00:04:26,300
All of the things you need to know about math.

95
00:04:26,300 --> 00:04:28,300
Are all of the things you need to know about anything in particular,

96
00:04:28,300 --> 00:04:29,700
that's related to programming, you'll never know.

97
00:04:29,900 --> 00:04:30,400
Nothing.

98
00:04:30,700 --> 00:04:33,700
The point is to educate yourself enough, that you have an idea of the

99
00:04:33,700 --> 00:04:34,600
things that you need to know.

100
00:04:34,600 --> 00:04:36,800
You have an idea of how to drill down further into them when it's

101
00:04:36,800 --> 00:04:40,400
necessary and you have enough understanding to know how deep you

102
00:04:40,400 --> 00:04:43,600
should understand things for any particular purpose.

103
00:04:44,100 --> 00:04:44,800
And so today.

104
00:04:44,800 --> 00:04:47,800
I really want to kind of open that up and start to talk about exactly

105
00:04:47,800 --> 00:04:51,400
what's happening in the memory for The Limited piece of C code that we

106
00:04:51,400 --> 00:04:55,200
kind of work through the, for the past two days.

107
00:04:55,600 --> 00:04:58,600
So, if you remember correctly, we had our little entry point here.

108
00:04:58,600 --> 00:04:59,800
That Windows was calling.

109
00:04:59,900 --> 00:05:04,300
And we had a little thing where we set a variable equal to 255 and we

110
00:05:04,300 --> 00:05:05,000
added 12.

111
00:05:05,000 --> 00:05:05,900
It was very exciting.

112
00:05:05,900 --> 00:05:10,300
I know everyone out there with sight but I was very heartened to see

113
00:05:10,300 --> 00:05:11,000
that.

114
00:05:11,000 --> 00:05:14,000
Actually people were pretty excited when we opened up the Assembly

115
00:05:14,000 --> 00:05:17,600
Language window when I actually ran to this line of code here.

116
00:05:17,600 --> 00:05:21,400
And I went to go to disassembly here.

117
00:05:21,400 --> 00:05:24,700
And I showed that here are the actual instructions that the CPU is

118
00:05:24,700 --> 00:05:24,800
executing.

119
00:05:24,800 --> 00:05:27,900
So I found that very heartening because I'm glad to see that people

120
00:05:27,900 --> 00:05:29,900
were interested to see that because of

121
00:05:29,900 --> 00:05:32,700
Honestly, I think that stuff is fascinating to and that's the sort of

122
00:05:32,700 --> 00:05:34,900
stuff that I want to sort of sprinkle throughout the series so that

123
00:05:34,900 --> 00:05:36,800
people get it, an idea of what's going on.

124
00:05:37,400 --> 00:05:40,400
Now, before I do that, I'll notice there are some warnings in our are

125
00:05:40,400 --> 00:05:44,000
compiled, their I'm going to rebuild it so I can see what they are.

126
00:05:44,000 --> 00:05:44,700
Yeah, you could see.

127
00:05:44,900 --> 00:05:48,200
So are compiled has some warnings and they're all about unreferenced,

128
00:05:48,200 --> 00:05:49,300
local variable.

129
00:05:49,800 --> 00:05:52,300
And and the reason for that is because you can see we defined a bunch

130
00:05:52,300 --> 00:05:54,900
of things here because I was trying to teach you about the different

131
00:05:54,900 --> 00:05:59,600
sizes that you can use for, you know, variables that you store and

132
00:05:59,600 --> 00:05:59,800
since

133
00:06:00,000 --> 00:06:00,600
Ever reference.

134
00:06:00,600 --> 00:06:03,600
Any of them, you will notice that the compiler is sort of giving us a

135
00:06:03,600 --> 00:06:06,100
little warning saying, hey, you define something here.

136
00:06:06,100 --> 00:06:08,800
You said you were going to talk about a particular value, but you

137
00:06:08,800 --> 00:06:10,100
never talked about it.

138
00:06:10,200 --> 00:06:10,900
Was that a mistake.

139
00:06:10,900 --> 00:06:13,100
So it's a warning sign an error because it can still produce the code

140
00:06:13,100 --> 00:06:15,400
just fine, but it's a warning to let you know that.

141
00:06:15,400 --> 00:06:20,000
So what I'm going to do here is I am going to delete this for the time

142
00:06:20,000 --> 00:06:22,100
being or actually, you know, what I'll do.

143
00:06:22,400 --> 00:06:25,200
I'll use a comment because I haven't taught you about if that's really

144
00:06:25,200 --> 00:06:25,600
yet.

145
00:06:25,600 --> 00:06:27,400
So I'm going to use a comment to get rid of that.

146
00:06:27,400 --> 00:06:28,100
So that's gone.

147
00:06:28,100 --> 00:06:29,400
Now, it's commented out.

148
00:06:29,400 --> 00:06:29,800
And now, when I

149
00:06:30,000 --> 00:06:32,700
Compile, I won't get any warning so they won't distract us from what

150
00:06:32,700 --> 00:06:33,500
we're trying to do.

151
00:06:34,300 --> 00:06:34,900
All right.

152
00:06:35,300 --> 00:06:38,800
So the first question that I want you to ask yourselves and that I am

153
00:06:38,800 --> 00:06:43,500
going to answer or hopefully try to answer for you is I told you what

154
00:06:43,500 --> 00:06:44,000
this did.

155
00:06:44,000 --> 00:06:47,700
I said care unsigned test was going to give us eight bits.

156
00:06:47,700 --> 00:06:50,500
That were going to be treated in an unsigned fashion.

157
00:06:50,500 --> 00:06:54,800
Meaning that if I was to add one to the highest value, which is 255.

158
00:06:54,800 --> 00:06:55,800
It would wrap around 20.

159
00:06:55,800 --> 00:06:57,400
I could not represent negative numbers.

160
00:06:57,400 --> 00:06:59,900
There were no negative numbers involved so it has

161
00:07:00,000 --> 00:07:00,900
Assign to it.

162
00:07:00,900 --> 00:07:05,500
It's always it's always positive or zero and what I want you to ask

163
00:07:05,500 --> 00:07:06,400
yourself though.

164
00:07:07,000 --> 00:07:10,200
He's where is that value?

165
00:07:10,200 --> 00:07:11,700
Where are those bits?

166
00:07:11,800 --> 00:07:12,100
Right?

167
00:07:12,100 --> 00:07:13,400
I said there were eight bits.

168
00:07:13,400 --> 00:07:16,000
There were eight ones and zeros, but where are they?

169
00:07:16,900 --> 00:07:20,600
And the first thing that we can actually do to figure out where they

170
00:07:20,600 --> 00:07:27,100
are in some sort of, you know, rather rather topical sense is when I

171
00:07:27,100 --> 00:07:28,600
come in here to the code.

172
00:07:29,200 --> 00:07:29,800
In fact, you know what I'll do.

173
00:07:29,900 --> 00:07:32,200
I'll just do this in code for you because I want to introduce these.

174
00:07:32,200 --> 00:07:36,800
Anyway, I'm going to introduce a new thing here, which is a pointer.

175
00:07:37,000 --> 00:07:41,400
And I'm going to run that here so that we can inspect the values.

176
00:07:41,400 --> 00:07:41,900
So you'll note.

177
00:07:41,900 --> 00:07:42,600
I've set a breakpoint.

178
00:07:42,600 --> 00:07:42,800
Again.

179
00:07:42,800 --> 00:07:44,700
I told you how to set breakpoints last week.

180
00:07:44,700 --> 00:07:46,800
I've set a breakpoint and I've stopped on this line of code.

181
00:07:47,300 --> 00:07:50,400
And what I want to show you, is this new construct that I have created

182
00:07:50,400 --> 00:07:51,600
here, this new line of code.

183
00:07:51,600 --> 00:07:54,900
And you know what, we won't even I'm not even go one further than

184
00:07:54,900 --> 00:07:55,100
that.

185
00:07:55,100 --> 00:07:57,100
Breakouts are polite because I don't want to talk about in line

186
00:07:57,100 --> 00:07:57,900
decorations yet.

187
00:07:57,900 --> 00:07:58,900
So there we go.

188
00:07:59,000 --> 00:07:59,800
Sometimes it's easy to get

189
00:08:00,000 --> 00:08:02,200
Of myself because I'm like, oh, yes, I'll just I'll just do this

190
00:08:02,200 --> 00:08:03,900
thing, but it's like I have explained that yet.

191
00:08:03,900 --> 00:08:04,700
Let's not go there.

192
00:08:05,100 --> 00:08:08,800
So anyway, what I want to show you here is that in C.

193
00:08:08,800 --> 00:08:11,900
And this is a departure from a lot of languages that people program in

194
00:08:12,100 --> 00:08:15,700
these days in see, memory is a first class citizen.

195
00:08:15,900 --> 00:08:20,300
So you always are able to actually find out things like the question

196
00:08:20,300 --> 00:08:22,800
that I just asked, which is, where is this value?

197
00:08:23,000 --> 00:08:25,900
The actual location of the value is something that is integral to see.

198
00:08:26,000 --> 00:08:29,000
And is something that you can trivially, find out manipulate used to

199
00:08:29,000 --> 00:08:29,800
your advantage.

200
00:08:29,900 --> 00:08:32,100
And those are things called pointers in C.

201
00:08:32,100 --> 00:08:36,299
Basically, you can take the address of a variable or anything else in

202
00:08:36,299 --> 00:08:36,799
C.

203
00:08:37,100 --> 00:08:40,400
And the address is basically a number, which tells you where in the

204
00:08:40,400 --> 00:08:44,600
memory of the machine that thing is stored and you can have a thing

205
00:08:44,600 --> 00:08:47,900
called a pointer which is basically something that just holds and

206
00:08:47,900 --> 00:08:48,200
address.

207
00:08:48,200 --> 00:08:49,300
It's like any other number.

208
00:08:49,300 --> 00:08:53,500
But the number is used to reference a piece of memory and see will

209
00:08:53,500 --> 00:08:57,000
allow you to use that number to do things, like go and see what's in

210
00:08:57,000 --> 00:08:58,100
the memory that it's point to.

211
00:08:58,100 --> 00:08:59,800
You can move them around 2.2.

212
00:09:00,000 --> 00:09:01,300
Things you can increment them.

213
00:09:01,300 --> 00:09:02,600
So they point to later values.

214
00:09:02,600 --> 00:09:06,000
You can decrement them to point to earlier values and basically what

215
00:09:06,000 --> 00:09:09,800
this means is that unlike some languages where memory is not something

216
00:09:09,800 --> 00:09:13,400
you're really allowed to touch, so you can't actually go in and ask

217
00:09:13,400 --> 00:09:16,500
about the actual address of something or go into an address and and

218
00:09:16,500 --> 00:09:17,100
touch it change.

219
00:09:17,100 --> 00:09:18,600
What's values are those sorts of things.

220
00:09:18,600 --> 00:09:21,900
You always have to be using variables that are known to the compiler

221
00:09:21,900 --> 00:09:23,000
and they're known what they are?

222
00:09:23,000 --> 00:09:24,700
And, you know, their types are known.

223
00:09:24,700 --> 00:09:25,500
That sort of stuff.

224
00:09:25,700 --> 00:09:27,000
That is not true and C.

225
00:09:27,000 --> 00:09:29,900
C is very fungible with memory allows you to do all the stuff that

226
00:09:30,000 --> 00:09:30,400
You want to do.

227
00:09:30,400 --> 00:09:33,700
And that's one of the reasons that I picked C and C++ to do this

228
00:09:33,700 --> 00:09:37,300
project in first of all, it's the language that I prefer to program

229
00:09:37,300 --> 00:09:37,400
in.

230
00:09:37,400 --> 00:09:40,600
So that's a no-brainer but it's also because it allows me to show you

231
00:09:40,600 --> 00:09:42,000
all of those low-level things.

232
00:09:42,100 --> 00:09:46,000
Unlike something like that was a little higher level, you know, in PHP

233
00:09:46,000 --> 00:09:48,000
or something or Java.

234
00:09:48,000 --> 00:09:48,600
Probably.

235
00:09:48,600 --> 00:09:50,000
Although I've never actually anything Java.

236
00:09:50,500 --> 00:09:52,500
You don't have that kind of low-level access.

237
00:09:52,500 --> 00:09:54,500
So there's a bunch of things that I just couldn't show you.

238
00:09:55,200 --> 00:09:59,800
So the syntax this little star right here, just face.

239
00:09:59,900 --> 00:10:04,500
Lee says, that the thing that I'm defining, instead of being the type

240
00:10:04,500 --> 00:10:08,300
that I actually put in, like I made this beak are unsigned the exact

241
00:10:08,300 --> 00:10:08,500
site.

242
00:10:08,500 --> 00:10:09,700
Same type as test.

243
00:10:09,700 --> 00:10:12,700
So 8 B unsigned and it's a number.

244
00:10:12,700 --> 00:10:17,500
Well, when I actually did this, this right here, I didn't actually

245
00:10:17,500 --> 00:10:19,800
want another 8-bit value.

246
00:10:19,800 --> 00:10:24,300
What I wanted, is the ability to talk about the location in memory of

247
00:10:24,300 --> 00:10:25,300
an 8-bit value.

248
00:10:25,300 --> 00:10:26,800
And that is what this star does.

249
00:10:26,800 --> 00:10:29,700
The star turns some type that

250
00:10:29,900 --> 00:10:32,000
You've said here, when you're talking to the compiler.

251
00:10:32,000 --> 00:10:34,200
It says well that type that I'm talking about.

252
00:10:34,200 --> 00:10:38,500
I actually now want to talk about where a thing of that type is.

253
00:10:38,700 --> 00:10:43,100
Not that the type is that and so that's what it that's really all you

254
00:10:43,100 --> 00:10:44,800
have to do and anything that you put over here.

255
00:10:44,800 --> 00:10:48,000
I could have put anything I could have used in like we did before, I

256
00:10:48,000 --> 00:10:50,300
wanted to point to test.

257
00:10:50,300 --> 00:10:52,600
So that is the reason that I use the type of test.

258
00:10:53,300 --> 00:10:54,200
But oops.

259
00:10:55,500 --> 00:10:57,700
Sorry, all these code changes in.

260
00:10:57,700 --> 00:10:59,800
It wants to recompile obviously.

261
00:11:00,800 --> 00:11:06,400
So basically what happens is once I have that I can use a new operator

262
00:11:06,400 --> 00:11:09,400
in Co-operators are the things like plus that tell, you know, that

263
00:11:09,400 --> 00:11:10,900
allow us to construct code.

264
00:11:11,000 --> 00:11:12,700
There are things that operate on our variables.

265
00:11:12,900 --> 00:11:16,800
I can use a new operator, which is the address operator.

266
00:11:17,100 --> 00:11:20,500
It's this little a sand here and what it means is that every time that

267
00:11:20,500 --> 00:11:24,700
I put a variable or something else and I put the Ampersand in front of

268
00:11:24,700 --> 00:11:25,100
it.

269
00:11:25,300 --> 00:11:29,800
What that means is I would like to know where this is in memory.

270
00:11:29,800 --> 00:11:32,600
I want to know what location in memory.

271
00:11:32,700 --> 00:11:33,900
You have stored this thing.

272
00:11:34,200 --> 00:11:36,800
And in this case, I'm going to put it into this test pointer here that

273
00:11:36,800 --> 00:11:37,400
I made.

274
00:11:37,700 --> 00:11:40,600
So we can go into the watch window, which hopefully you remember how

275
00:11:40,600 --> 00:11:42,900
we how we use that bum from the past.

276
00:11:42,900 --> 00:11:43,200
Two days.

277
00:11:43,200 --> 00:11:45,700
We can type in a name and of one of our variables or something.

278
00:11:45,700 --> 00:11:47,300
And we can see the value of it.

279
00:11:47,500 --> 00:11:49,900
You can see that we have not executed this line yet.

280
00:11:49,900 --> 00:11:54,300
But when we execute this line, you will see that test is 255.

281
00:11:54,300 --> 00:11:55,100
Just like, we thought,

282
00:11:55,200 --> 00:11:59,000
It was going to be just like it was last time, but now we could also

283
00:11:59,000 --> 00:11:59,800
inspect test.

284
00:12:00,000 --> 00:12:02,000
Enter and test pointer.

285
00:12:03,400 --> 00:12:05,500
Is actually you can see it's a hexadecimal value.

286
00:12:05,500 --> 00:12:08,400
These things keep keep popping up, but we don't actually have to look

287
00:12:08,400 --> 00:12:09,600
at it as hexadecimal value.

288
00:12:09,600 --> 00:12:12,100
I can actually do a little black magic here.

289
00:12:12,100 --> 00:12:15,500
That's a little bit further than what we want to actually get the heck

290
00:12:15,500 --> 00:12:18,400
out of there, but it is just a number.

291
00:12:18,600 --> 00:12:23,200
And what that number is is it is literally the number of bytes which

292
00:12:23,200 --> 00:12:27,200
are 8-bit values, is the number of bytes from the bottom of memory,

293
00:12:27,300 --> 00:12:31,900
the very first piece of memory all the way up to where it decided to

294
00:12:31,900 --> 00:12:32,900
store test.

295
00:12:33,200 --> 00:12:38,200
This is literally where in memory, we are storing this, this

296
00:12:38,200 --> 00:12:39,200
particular value.

297
00:12:39,300 --> 00:12:41,700
Okay, that's the memory of the computer.

298
00:12:41,700 --> 00:12:42,500
That's where it is.

299
00:12:43,000 --> 00:12:47,800
Now, when I say that there's a little bit of a catch to it and the

300
00:12:47,800 --> 00:12:49,300
catch is actually important.

301
00:12:49,300 --> 00:12:51,800
So unlike a lot of catches when I say I'll delay this and I'm going to

302
00:12:51,800 --> 00:12:52,500
talk about later.

303
00:12:52,500 --> 00:12:56,300
I'm actually going to talk about the, the catch right off the bat.

304
00:12:56,500 --> 00:12:59,000
And the catch is that in the old days.

305
00:12:59,100 --> 00:13:02,400
If I were teaching you this course in 1980 or something like that?

306
00:13:03,100 --> 00:13:03,800
On a home computer.

307
00:13:03,800 --> 00:13:07,300
Let's say I was teaching it in 1986 on an Amiga, which is one of my

308
00:13:07,300 --> 00:13:08,600
favorite computers of all time.

309
00:13:09,500 --> 00:13:12,900
If I was teaching it to their that what I just said would be literally

310
00:13:12,900 --> 00:13:13,400
true.

311
00:13:13,400 --> 00:13:16,800
It would literally be like a number that reference, the actual

312
00:13:16,800 --> 00:13:18,500
physical memory of the machine.

313
00:13:19,300 --> 00:13:20,900
But nowadays, that's no longer true.

314
00:13:20,900 --> 00:13:24,100
And the reason that is no longer true is because machines today use

315
00:13:24,100 --> 00:13:28,200
something called virtual memory and what virtual memory is is it's a

316
00:13:28,200 --> 00:13:32,700
way to allow processes to things that you run your computer.

317
00:13:32,700 --> 00:13:32,800
The

318
00:13:33,100 --> 00:13:36,300
I would just sort of cooperate with each other because if you think

319
00:13:36,300 --> 00:13:39,600
about it, if all of the things that you ran on your computer, in a

320
00:13:39,600 --> 00:13:40,800
multitasking operating system.

321
00:13:40,800 --> 00:13:43,200
And there are a lot if I bring up that process image, look at all

322
00:13:43,200 --> 00:13:44,000
these things.

323
00:13:44,300 --> 00:13:45,700
Look at all these things running on my computer.

324
00:13:45,700 --> 00:13:47,500
I don't even know what half of these things are.

325
00:13:47,800 --> 00:13:49,000
These are all these SPC.

326
00:13:49,000 --> 00:13:50,300
Host Services running machine out.

327
00:13:50,300 --> 00:13:51,100
Know what those are.

328
00:13:51,200 --> 00:13:52,700
Here's the Wacom tablet driver.

329
00:13:52,700 --> 00:13:53,500
I guess.

330
00:13:53,600 --> 00:13:54,100
I don't know.

331
00:13:54,100 --> 00:13:55,000
I don't even know what that is.

332
00:13:55,000 --> 00:13:57,300
Pain Services, Maybe here's a networking thing.

333
00:13:57,600 --> 00:13:59,800
God Only Knows Chrome is running three things.

334
00:13:59,800 --> 00:14:00,600
Probably for memory.

335
00:14:00,600 --> 00:14:01,200
Isolation.

336
00:14:01,200 --> 00:14:01,600
I don't know.

337
00:14:01,600 --> 00:14:03,000
It's it's a it's a

338
00:14:03,100 --> 00:14:04,200
Free-for-all out here, right?

339
00:14:04,200 --> 00:14:05,100
Look at all that stuff.

340
00:14:07,700 --> 00:14:08,500
It's totally bananas.

341
00:14:08,500 --> 00:14:12,900
So what you may ask is hey, if you can write all these programs that

342
00:14:12,900 --> 00:14:13,900
they can just work at memory.

343
00:14:13,900 --> 00:14:16,400
Like I was just showing you like, OKC, lets me poke it memory.

344
00:14:16,400 --> 00:14:18,500
Lets me do these things, if that's true.

345
00:14:18,600 --> 00:14:22,700
How do we avoid having these programs step on each other's memory or

346
00:14:22,700 --> 00:14:23,900
like a bug in one program?

347
00:14:23,900 --> 00:14:27,300
Overwrite something else or a security concern where say like one of

348
00:14:27,300 --> 00:14:31,700
these programs like audio, d, g, dot exe, whatever that is decides to

349
00:14:31,700 --> 00:14:33,900
read my password out of memory or something like that.

350
00:14:33,900 --> 00:14:35,100
How do we stop that?

351
00:14:35,300 --> 00:14:36,200
And furthermore?

352
00:14:36,300 --> 00:14:36,700
How do we deal?

353
00:14:36,800 --> 00:14:40,000
Deal with the fact that maybe we start running all these processes and

354
00:14:40,200 --> 00:14:43,300
each process wants to use all four gigabytes of memory in the machine

355
00:14:43,300 --> 00:14:44,200
wants to use them all.

356
00:14:44,800 --> 00:14:48,200
Well, where does the memory that the other process was using?

357
00:14:48,200 --> 00:14:48,900
Where does it go?

358
00:14:48,900 --> 00:14:50,700
Where the other processes, where their memory?

359
00:14:50,700 --> 00:14:52,000
Where does their memory go to the programmer?

360
00:14:52,000 --> 00:14:53,300
Have to deal with that, what happens?

361
00:14:53,700 --> 00:14:56,600
And the answer is that personal computers?

362
00:14:56,600 --> 00:14:59,800
Probably since the late 80s and certainly in the 90s and

363
00:15:00,000 --> 00:15:01,800
Words, I don't actually remember the exact chronology.

364
00:15:01,800 --> 00:15:05,200
Even the Amiga got an mmu, which is a memory management unit sometime

365
00:15:05,200 --> 00:15:06,700
in the 1990.

366
00:15:06,700 --> 00:15:07,600
I don't even remember.

367
00:15:07,600 --> 00:15:09,800
I won't I won't try to pretend that.

368
00:15:09,800 --> 00:15:14,300
I can remember these things but certainly by today almost every

369
00:15:14,300 --> 00:15:17,800
processor you're likely to encounter has a thing called virtual

370
00:15:17,800 --> 00:15:21,800
memory, which is basically allowing a given piece of code that is

371
00:15:21,800 --> 00:15:27,100
running to see what appears to be the memory of the machine.

372
00:15:27,800 --> 00:15:29,900
But what is actually not the

373
00:15:30,000 --> 00:15:32,600
Real memory of the machine in terms of layout.

374
00:15:32,800 --> 00:15:37,000
And the way this works is that it divides memory into pages and those

375
00:15:37,000 --> 00:15:42,100
pages are essentially chunks, there, a certain range say 4096 bytes

376
00:15:42,200 --> 00:15:44,300
4K, if you will for KB.

377
00:15:45,600 --> 00:15:48,600
Those pages exists in physical memory.

378
00:15:48,600 --> 00:15:51,400
So there are some number of pages in physical memory.

379
00:15:51,900 --> 00:15:57,500
But each process actually has its own concept of these pages.

380
00:15:57,800 --> 00:16:01,200
And it thinks the memory is laid out in a particular way, but those

381
00:16:01,200 --> 00:16:05,800
pages, that it is accessing only exists when it actually acts as them

382
00:16:05,800 --> 00:16:06,600
necessarily.

383
00:16:07,300 --> 00:16:12,000
The operating system is in charge of basically, shuttling, physical

384
00:16:12,000 --> 00:16:14,500
memory out to say, a hard drive or something.

385
00:16:14,600 --> 00:16:20,000
Like this or rearranging the layout of things using a table that is

386
00:16:20,000 --> 00:16:23,000
maintained on the CPU and that the CPU does.

387
00:16:23,000 --> 00:16:27,600
The translation automatically that allows each processes view of these

388
00:16:27,600 --> 00:16:32,100
pages to be dynamically mapped to where they actually are in physical

389
00:16:32,100 --> 00:16:32,500
memory.

390
00:16:32,500 --> 00:16:35,900
And that is the virtual memory system of an operating system.

391
00:16:35,900 --> 00:16:39,700
So, what happens is when I talk about a particular location in memory

392
00:16:39,700 --> 00:16:40,900
in my code.

393
00:16:41,000 --> 00:16:44,600
What I'm actually talking about is its address in my virtual.

394
00:16:44,700 --> 00:16:45,600
Memory space.

395
00:16:45,600 --> 00:16:48,700
Which looks like a real memory space to me, but really, it could be

396
00:16:48,700 --> 00:16:51,700
all mapped crazy to different parts of the physical memory.

397
00:16:51,800 --> 00:16:54,500
Some of it may not be in physical memory at the time because it got

398
00:16:54,500 --> 00:16:55,900
swapped out to disk.

399
00:16:55,900 --> 00:16:58,600
And when I go to try and actually access that memory the operating

400
00:16:58,600 --> 00:17:03,400
system will actually come swap it back in to where I was trying to use

401
00:17:03,400 --> 00:17:04,700
it and then it's like, oh, okay.

402
00:17:04,700 --> 00:17:05,300
Now it works.

403
00:17:06,099 --> 00:17:09,800
And so in order to support this, there's a bunch of stuff in the

404
00:17:09,800 --> 00:17:11,000
actual Processing Unit.

405
00:17:11,099 --> 00:17:13,000
There's a thing called a translation lookaside buffer.

406
00:17:13,000 --> 00:17:14,500
There's these memory memory tables.

407
00:17:14,599 --> 00:17:17,800
It's all sorts of things in there that allow it to basically go.

408
00:17:17,800 --> 00:17:18,400
Okay.

409
00:17:18,599 --> 00:17:22,099
This guy was talking about this memory location, but that's not really

410
00:17:22,099 --> 00:17:24,400
where in memory that Paige is right now.

411
00:17:24,400 --> 00:17:28,400
So I'm going to actually secretly change the location he asked for

412
00:17:28,400 --> 00:17:32,300
when it goes out to fetch the memory and I'm going to actually give

413
00:17:32,300 --> 00:17:36,100
him back the rights, the stuff that he is right as far as he's

414
00:17:36,100 --> 00:17:38,700
concerned, but he'll never have to know that, that's what happened.

415
00:17:39,300 --> 00:17:41,500
Okay, so hopefully that makes a little bit of sense to you and that's,

416
00:17:41,500 --> 00:17:42,800
that's what virtual memory is.

417
00:17:43,200 --> 00:17:44,500
But for all intents and purposes.

418
00:17:44,700 --> 00:17:48,500
Is when we are coding, we can always think of our memory addresses as

419
00:17:48,500 --> 00:17:52,100
being actual, physical memory addresses for the most part, but it is

420
00:17:52,100 --> 00:17:54,600
important to understand that those things are happening under the hood

421
00:17:54,600 --> 00:17:57,900
because we can run into a lot of problems if we don't manage things

422
00:17:57,900 --> 00:17:58,500
properly.

423
00:17:58,500 --> 00:17:59,800
So, for example, one of the things I

424
00:18:00,000 --> 00:18:03,500
I said is that sometimes you may have to operate system, may have to

425
00:18:03,500 --> 00:18:05,200
swap that memory out or something like that.

426
00:18:05,200 --> 00:18:07,800
For example, if we use too much of it, or if another process comes in

427
00:18:07,800 --> 00:18:10,900
and is using memory and need some memory to give some of our memory to

428
00:18:10,900 --> 00:18:12,800
that process, Etc, the physical memory.

429
00:18:12,800 --> 00:18:16,300
I mean, then what can happen is if we're not aware that those things

430
00:18:16,300 --> 00:18:17,200
are happening under the hood.

431
00:18:17,200 --> 00:18:20,200
We may run into performance problems in our code that have to do with

432
00:18:20,200 --> 00:18:20,900
that swapping.

433
00:18:21,100 --> 00:18:23,700
And so it's very important for us to always be aware of it and to

434
00:18:23,700 --> 00:18:24,800
manage those things.

435
00:18:24,900 --> 00:18:28,500
When the time comes, when we have to actually deal with things like

436
00:18:28,500 --> 00:18:28,700
this.

437
00:18:28,700 --> 00:18:29,800
It's important for us to understand.

438
00:18:30,000 --> 00:18:30,800
That those things are going on.

439
00:18:30,800 --> 00:18:33,600
So we are aware and we're not just totally confused if something like

440
00:18:33,600 --> 00:18:34,500
that starts to happen.

441
00:18:35,200 --> 00:18:38,200
So we'll talk about that more in the mainstream because we're

442
00:18:38,200 --> 00:18:40,200
certainly not going to hit that with any of our code here.

443
00:18:40,700 --> 00:18:43,000
So, anyway, now that you have a little bit of are saying about that, I

444
00:18:43,000 --> 00:18:44,100
want to get back to the pointers.

445
00:18:44,600 --> 00:18:47,000
So the way that these pointers work, like I said, is they basically

446
00:18:47,000 --> 00:18:47,900
give you this value Here.

447
00:18:47,900 --> 00:18:53,000
And Now, normally the way that they are, the way that they show up is,

448
00:18:53,000 --> 00:18:54,200
As a hexadecimal value.

449
00:18:54,200 --> 00:18:58,400
And I talked a little bit about the base of values, how their can

450
00:18:58,400 --> 00:18:59,800
basically be octal, which is based.

451
00:19:00,100 --> 00:19:02,900
Hexadecimal, which is Basics teen binary, which is based to all these

452
00:19:02,900 --> 00:19:06,400
bases pointers because they tend to be relatively large numbers since

453
00:19:06,400 --> 00:19:07,400
they refer to memory ranges.

454
00:19:07,400 --> 00:19:09,600
In memory is huge pointers.

455
00:19:09,600 --> 00:19:12,700
Actually tend to be displayed in hexadecimal by default.

456
00:19:12,700 --> 00:19:16,400
So one of the reasons that I had to basically turn it into it, I had

457
00:19:16,400 --> 00:19:19,400
to force the watch window to turn it into an integer to show you.

458
00:19:19,400 --> 00:19:24,100
The actual number is because the even if I don't have it set to

459
00:19:24,100 --> 00:19:26,500
hexadecimal display, there's a menu here that can change everything to

460
00:19:26,500 --> 00:19:27,500
access also, if I want to.

461
00:19:27,500 --> 00:19:29,600
But even if I don't have it set to hexadecimal display.

462
00:19:29,900 --> 00:19:35,100
The see, the visual studio debugger will always actually use

463
00:19:35,100 --> 00:19:36,100
hexadecimal stay for pointers.

464
00:19:36,100 --> 00:19:38,900
Anyway, so like I said, it's a little bit hard to read if you're not

465
00:19:38,900 --> 00:19:40,200
used to reading Basics.

466
00:19:40,200 --> 00:19:40,500
Dean.

467
00:19:40,500 --> 00:19:42,800
Obviously, I'm not even that great at reading base, 16, but

468
00:19:42,800 --> 00:19:46,300
fortunately, you rarely actually have to read pointers and be all that

469
00:19:46,300 --> 00:19:47,200
explicit about it.

470
00:19:47,400 --> 00:19:50,500
You, you know, if you want to, you can do arithmetic on them to even

471
00:19:50,500 --> 00:19:52,800
find out sort of if two pointers are close to each other in that sort

472
00:19:52,800 --> 00:19:53,000
of stuff.

473
00:19:53,000 --> 00:19:53,900
So I'll be all sorts that we can do.

474
00:19:53,900 --> 00:19:56,600
So, don't sweat it too much if you can't read hexadecimal, but

475
00:19:56,600 --> 00:19:58,900
eventually through programming, if you're doing it at a low level and

476
00:19:58,900 --> 00:19:59,800
you're seeing them enough fuel

477
00:20:00,000 --> 00:20:01,100
Probably get a little bit familiar.

478
00:20:01,100 --> 00:20:05,500
So anyway, that is the actual memory location in our procedures

479
00:20:05,500 --> 00:20:09,200
virtual address space which is not actually physical memory.

480
00:20:09,200 --> 00:20:11,900
That is where this value is actually stored.

481
00:20:12,300 --> 00:20:15,400
Now, the interesting part about that is we can actually use this

482
00:20:15,400 --> 00:20:19,600
little plus here because Visual Studio will let us see what is

483
00:20:19,600 --> 00:20:22,700
actually in the memory location very easily by just opening it up and

484
00:20:22,700 --> 00:20:23,700
you can see there it is.

485
00:20:23,700 --> 00:20:25,000
There's the value 255.

486
00:20:25,000 --> 00:20:26,400
So here is the value of our variable.

487
00:20:26,400 --> 00:20:29,800
Here is the value of what's pointed at and since we know that we

488
00:20:29,900 --> 00:20:31,500
We made this pointer point.

489
00:20:31,500 --> 00:20:32,800
At that value.

490
00:20:32,900 --> 00:20:34,500
They should be the same and they are.

491
00:20:34,600 --> 00:20:38,400
And when I do this line of code here and you can see that test got

492
00:20:38,400 --> 00:20:40,600
incremented by 1, it got incremented.

493
00:20:40,600 --> 00:20:45,100
It wrapped 20 just like we saw yesterday, but now it also wrapped here

494
00:20:45,100 --> 00:20:47,000
and that is the crucial thing to understand about.

495
00:20:47,000 --> 00:20:47,600
Pointers.

496
00:20:47,700 --> 00:20:52,600
This pointer is pointing at the same actual memory as this thing.

497
00:20:52,600 --> 00:20:56,800
So anytime we change test the stuff pointed to, by test point to where

498
00:20:56,800 --> 00:20:59,500
also change because they're the same thing.

499
00:21:00,000 --> 00:21:03,800
Two ways of referencing the exact same piece of memory.

500
00:21:04,100 --> 00:21:06,400
Okay, so hopefully that's very clear what's going on there.

501
00:21:06,700 --> 00:21:08,300
Now, you can go a little bit further.

502
00:21:08,500 --> 00:21:11,100
If you'd like, to inside the debug window.

503
00:21:11,100 --> 00:21:13,700
There is a Windows thing here that you can go.

504
00:21:13,700 --> 00:21:17,000
And you can find memory and much like the watch window.

505
00:21:17,000 --> 00:21:19,400
There are a couple different kinds of memory.

506
00:21:20,100 --> 00:21:23,700
Each one is the exact same type of window, but they gave you four of

507
00:21:23,700 --> 00:21:24,100
them.

508
00:21:24,200 --> 00:21:27,600
So, if I go to memory window, one, I can have one of those open and if

509
00:21:27,600 --> 00:21:29,800
I go to memory window to it, is a

510
00:21:30,000 --> 00:21:33,100
A different view of memory, they're different, but that the same

511
00:21:33,100 --> 00:21:34,100
memory that we're looking at.

512
00:21:34,100 --> 00:21:36,200
It's just, they decided to give us for Windows.

513
00:21:36,200 --> 00:21:41,000
So, if I am to pull out this little guy here, this is the memory of

514
00:21:41,000 --> 00:21:43,400
the computer as far as our processes contrast.

515
00:21:43,400 --> 00:21:46,700
This is a virtual memory, not the physical memory, the virtual memory

516
00:21:46,700 --> 00:21:47,500
of the computer.

517
00:21:47,900 --> 00:21:50,000
And if I want to, I can look at this location.

518
00:21:50,000 --> 00:21:51,100
I can take this value.

519
00:21:51,100 --> 00:21:55,400
I can copy it, I can drop it on in here, paste and I can hit return.

520
00:21:55,800 --> 00:21:56,900
And now, you can see over here.

521
00:21:56,900 --> 00:21:59,900
We've got the location in memory of the thing that we wanted.

522
00:22:00,000 --> 00:22:00,600
Right.

523
00:22:00,600 --> 00:22:05,100
Now, this is each individual bite of the memory of our computer

524
00:22:05,100 --> 00:22:06,100
displayed in hexadecimal.

525
00:22:06,100 --> 00:22:08,500
This is just the other stuff that's around.

526
00:22:08,500 --> 00:22:09,700
It's just a stuff that's around.

527
00:22:09,900 --> 00:22:11,300
Hello, their memory.

528
00:22:11,300 --> 00:22:13,000
We're all having a good day today.

529
00:22:13,500 --> 00:22:16,700
So what I want you to be able to see here if I actually scroll a

530
00:22:16,700 --> 00:22:21,400
little bit right now, 3, C, F9, a F3 C, F9 AF right there.

531
00:22:21,400 --> 00:22:22,400
I'm going to leave the cursor on it.

532
00:22:22,400 --> 00:22:23,500
So we can remember where it is.

533
00:22:23,900 --> 00:22:26,000
That is the location of our special value.

534
00:22:26,200 --> 00:22:26,800
Right?

535
00:22:26,800 --> 00:22:29,500
And so if I go in here, one of the things that's kind of cool about

536
00:22:29,500 --> 00:22:29,700
this.

537
00:22:29,900 --> 00:22:34,100
Watch window is I can actually sort of change values in here and the

538
00:22:34,200 --> 00:22:35,800
debugger, what the debugger will actually do.

539
00:22:35,800 --> 00:22:40,500
My application is Frozen right now, so it can't do anything, but the

540
00:22:40,500 --> 00:22:44,600
debugger can reach in to its memory and poke at it and change the

541
00:22:44,600 --> 00:22:46,900
values out from under it, which is something, we'll probably use

542
00:22:46,900 --> 00:22:48,600
during your service because kind of handy when you're debugging things

543
00:22:48,600 --> 00:22:51,400
to be able to poke like that if I'm to poke a new value in there,

544
00:22:51,400 --> 00:22:53,300
let's say 16, right?

545
00:22:53,500 --> 00:22:58,000
You will notice that the memory changed there it is, right?

546
00:22:58,000 --> 00:22:59,800
And remember, its hexadecimal base.

547
00:23:00,000 --> 00:23:04,500
So 16 is 10, kind of kind of confusing.

548
00:23:04,500 --> 00:23:05,600
I know, but that's how it goes.

549
00:23:05,800 --> 00:23:08,200
But if we want to, we can make it a little easier on ourselves by

550
00:23:08,200 --> 00:23:09,400
turning off hexadecimal display.

551
00:23:09,400 --> 00:23:13,400
I think, I don't know if that's actually true unsigned display.

552
00:23:13,400 --> 00:23:14,200
There it is.

553
00:23:14,200 --> 00:23:16,900
Hey unsigned display 9af.

554
00:23:16,900 --> 00:23:17,600
Where is that again?

555
00:23:17,600 --> 00:23:18,800
We gotta find our memory.

556
00:23:20,500 --> 00:23:21,700
We just go ahead and have it.

557
00:23:21,700 --> 00:23:23,600
Do that for Boom.

558
00:23:24,200 --> 00:23:25,600
So, there is our 9af.

559
00:23:25,600 --> 00:23:29,000
Just like we wanted and you can see now there is the 16 I could change

560
00:23:29,000 --> 00:23:29,600
it again.

561
00:23:30,700 --> 00:23:33,000
And it changes, right?

562
00:23:33,000 --> 00:23:36,600
Pretty cool, but it gets even cooler than that, because this is the

563
00:23:36,600 --> 00:23:37,600
thing that I really love about.

564
00:23:37,600 --> 00:23:40,200
See, I can do anything I want.

565
00:23:40,200 --> 00:23:41,300
It's my program.

566
00:23:41,300 --> 00:23:42,100
I wrote it.

567
00:23:42,100 --> 00:23:43,200
I don't need Java.

568
00:23:43,200 --> 00:23:44,800
Telling me what I can and can't do.

569
00:23:45,100 --> 00:23:46,100
I decide what I can?

570
00:23:46,100 --> 00:23:46,600
And can't do.

571
00:23:46,600 --> 00:23:49,600
And the nice thing about see, is anything that you want to do, you can

572
00:23:49,600 --> 00:23:50,200
do it.

573
00:23:50,300 --> 00:23:54,500
So, if I want to, I can actually just take that pointer test pointer.

574
00:23:54,500 --> 00:23:56,000
It's pointing to here, right?

575
00:23:56,000 --> 00:23:58,600
If I want to, in the watch window, I can type.

576
00:23:59,000 --> 00:23:59,700
You know, I can't type.

577
00:24:00,000 --> 00:24:03,300
Eco, but I can type some things if I want to I can move it one bite

578
00:24:03,300 --> 00:24:04,500
forward, right?

579
00:24:04,500 --> 00:24:07,100
It's just pointing at one bite forward now and you can see that the

580
00:24:07,100 --> 00:24:10,200
value that's actually in there, right is 204 which is exactly what

581
00:24:10,200 --> 00:24:14,500
we'd expect because hey, there's the next bite 204 just like we

582
00:24:14,500 --> 00:24:17,100
thought I can just mess with that value to.

583
00:24:17,200 --> 00:24:18,600
You know, what, I want that value.

584
00:24:18,600 --> 00:24:19,400
Be something else.

585
00:24:19,400 --> 00:24:22,600
I want that value to be 12, Bingo.

586
00:24:22,600 --> 00:24:23,300
It's 12.

587
00:24:23,600 --> 00:24:26,400
So I have free Reign Over the memory.

588
00:24:26,400 --> 00:24:27,900
That's my process is using.

589
00:24:27,900 --> 00:24:29,900
I can do whatever I want, and

590
00:24:30,000 --> 00:24:33,500
The only thing that I can't do is I can't start poking into memory

591
00:24:33,600 --> 00:24:35,200
that I haven't told the operating system.

592
00:24:35,200 --> 00:24:36,100
I'm using yet.

593
00:24:36,900 --> 00:24:40,100
The reason that's the case is because basically what happens is at the

594
00:24:40,100 --> 00:24:40,500
outset.

595
00:24:40,500 --> 00:24:43,400
Like I said, the memory that we have for a prostitute virtual it's

596
00:24:43,400 --> 00:24:45,900
this sort of fake address space that the operating system sets up and

597
00:24:45,900 --> 00:24:47,200
maps to virtual memory for us.

598
00:24:47,500 --> 00:24:49,900
So one of the things that we'll see and I'm not going to cover this in

599
00:24:49,900 --> 00:24:50,500
the beginner stream.

600
00:24:50,500 --> 00:24:53,800
This is going to be covered in the main handmade the hero stream, but

601
00:24:53,800 --> 00:24:56,200
I'll just give you a little quick preview.

602
00:24:56,800 --> 00:24:59,800
One of the things that we need to always do before we actually use

603
00:25:00,100 --> 00:25:02,800
Is we have to tell the operating system that a particular thing, a

604
00:25:02,800 --> 00:25:05,200
particular location is going to start being used by US, a particular

605
00:25:05,200 --> 00:25:06,600
block of memory and say, hey, operating system.

606
00:25:06,800 --> 00:25:09,500
We need two megabytes of memory right now.

607
00:25:09,500 --> 00:25:11,800
Can you please give them back to us and say, yes, I have reserved

608
00:25:11,900 --> 00:25:14,800
Reserve this part of the virtual address space for you and then we can

609
00:25:14,800 --> 00:25:15,400
start using it.

610
00:25:15,400 --> 00:25:18,400
But once we have that back in the options, we can do whatever we want.

611
00:25:18,400 --> 00:25:21,200
And that is just an absolutely great thing about see, love.

612
00:25:21,200 --> 00:25:22,300
It, can't give it up.

613
00:25:26,100 --> 00:25:30,100
Now on to even more fun stuff.

614
00:25:30,200 --> 00:25:31,900
I hope this isn't too confusing for people.

615
00:25:31,900 --> 00:25:34,200
I think it's pretty straightforward when you actually just look at it

616
00:25:34,200 --> 00:25:36,900
directly yourself and see that there's no mystery there, right?

617
00:25:37,000 --> 00:25:37,700
There's no abstraction.

618
00:25:37,700 --> 00:25:38,900
We're just dealing with the hardware.

619
00:25:38,900 --> 00:25:41,200
We're dealing with what the hardware does and that makes things a lot

620
00:25:41,200 --> 00:25:41,400
easier.

621
00:25:41,400 --> 00:25:43,400
And yeah, there's an OS in our way in this doing some things that

622
00:25:43,400 --> 00:25:45,900
maybe I wish it wouldn't do because we make it easier for me to show

623
00:25:45,900 --> 00:25:46,600
you things directly.

624
00:25:46,600 --> 00:25:49,300
But for the most part this is what programming is to me, honestly the

625
00:25:49,300 --> 00:25:52,600
base level, it's me figuring out ways in which I want to do this kind

626
00:25:52,600 --> 00:25:55,500
of stuff and having that connection back to the hardware is so good

627
00:25:55,500 --> 00:25:55,700
for sir.

628
00:25:55,900 --> 00:25:56,700
Types of programmers.

629
00:25:56,800 --> 00:26:00,900
I'm one of them and I just really like having that ability to kind of

630
00:26:00,900 --> 00:26:01,800
do it at that level.

631
00:26:01,900 --> 00:26:05,100
And honestly, I think you know, there's people that are way further

632
00:26:05,100 --> 00:26:06,600
down that line than me even, right.

633
00:26:06,600 --> 00:26:08,700
I'm not even I'm not a beachhead in that.

634
00:26:08,700 --> 00:26:10,800
I'm not a I'm not a super low programmer.

635
00:26:10,800 --> 00:26:12,100
I'm a medium level programmer.

636
00:26:12,500 --> 00:26:15,900
But even for me it really makes it into a much more fun and

637
00:26:15,900 --> 00:26:16,800
interesting experience.

638
00:26:17,200 --> 00:26:17,800
So, okay.

639
00:26:18,400 --> 00:26:23,200
So what I want to say before we finish this is what is this memory

640
00:26:23,200 --> 00:26:24,300
here that we had?

641
00:26:24,300 --> 00:26:25,700
Because I just said that stuff.

642
00:26:25,800 --> 00:26:26,600
About the operating system.

643
00:26:26,600 --> 00:26:32,300
Well, we wrote this whole program and you know, I mean, where did we

644
00:26:32,300 --> 00:26:33,300
ask the operations for memory?

645
00:26:33,300 --> 00:26:34,300
We didn't ask for any memory.

646
00:26:34,300 --> 00:26:37,900
I just said, you know, you heard the words come out of my mouth that

647
00:26:37,900 --> 00:26:39,800
we can't use memory, the operations and give us.

648
00:26:39,800 --> 00:26:41,100
So who gave us the memory?

649
00:26:41,100 --> 00:26:45,400
Who told us that 3cf 9af was some location?

650
00:26:45,400 --> 00:26:47,900
We could start writing to and that would work.

651
00:26:47,900 --> 00:26:50,300
That was even going to be backed by physical memory at all or that,

652
00:26:50,300 --> 00:26:53,000
you know, wouldn't just be riding off into some illegal location or

653
00:26:53,000 --> 00:26:54,100
God knows what else could happen.

654
00:26:54,100 --> 00:26:54,700
Right?

655
00:26:55,000 --> 00:26:55,700
Well, the answer is

656
00:26:55,800 --> 00:26:59,500
Is that we are writing to a very special location, a very special type

657
00:26:59,500 --> 00:26:59,900
of location.

658
00:27:00,000 --> 00:27:04,700
And called the stack and really, it's the same memory as anything

659
00:27:04,700 --> 00:27:04,800
else.

660
00:27:04,800 --> 00:27:08,700
There's nothing mysterious about it at a low level, but it has a very

661
00:27:08,700 --> 00:27:09,100
special.

662
00:27:09,100 --> 00:27:14,200
It's a very special thing in terms of programming because in

663
00:27:14,200 --> 00:27:18,300
programming the stack is something that you don't explicitly asked

664
00:27:18,300 --> 00:27:18,500
for.

665
00:27:18,500 --> 00:27:23,300
It is something that you get automatically and the actual Act of

666
00:27:23,300 --> 00:27:28,200
asking the operating system for it is actually done for you inside the

667
00:27:28,200 --> 00:27:28,500
system.

668
00:27:28,500 --> 00:27:29,800
So basically you

669
00:27:30,000 --> 00:27:31,100
Don't micro right?

670
00:27:31,100 --> 00:27:34,700
You don't actually write the code yourself that actually gets you the

671
00:27:34,700 --> 00:27:35,700
memory from the stack.

672
00:27:35,800 --> 00:27:39,800
That code is actually done for you by the compiler, where necessary

673
00:27:39,800 --> 00:27:40,400
and so on.

674
00:27:40,600 --> 00:27:44,600
So it's just built into the actual Act of compiling something in see.

675
00:27:44,800 --> 00:27:46,600
Now that would not be true.

676
00:27:46,600 --> 00:27:48,400
If you were writing and completely low-level code.

677
00:27:48,400 --> 00:27:50,800
If you were writing completely level assembly, you would actually have

678
00:27:50,800 --> 00:27:53,700
to even get the stack yourself and you'd get it in the same way that

679
00:27:53,700 --> 00:27:58,700
we're going to show how to get memory later in the mainstream, but for

680
00:27:58,700 --> 00:27:59,800
all intents and purposes, it

681
00:28:00,100 --> 00:28:03,400
All you have to understand that this point is that the compiler is

682
00:28:03,400 --> 00:28:06,300
doing the work for asking for the memory, but after that it's exactly

683
00:28:06,300 --> 00:28:06,900
the same kind of memory.

684
00:28:06,900 --> 00:28:08,000
So where does that happen?

685
00:28:08,000 --> 00:28:08,600
And why?

686
00:28:08,900 --> 00:28:13,000
Well, the way that it happens is, since everything that you write in

687
00:28:13,000 --> 00:28:19,000
code, in C is built upon the notion that things go deeper and then

688
00:28:19,000 --> 00:28:23,300
shallower in a very consistent way using the function calls that we

689
00:28:23,300 --> 00:28:28,300
talked about on the very first day when I enter a function and I asked

690
00:28:28,300 --> 00:28:29,600
for memory by

691
00:28:29,900 --> 00:28:32,100
In a way that is just declaring a variable.

692
00:28:32,100 --> 00:28:34,600
That's just saying, I want a variable please.

693
00:28:35,300 --> 00:28:38,900
Well, what happens there is basically, it just starts grabbing

694
00:28:38,900 --> 00:28:41,900
additional memory at the bottom or the top, depending on the direction

695
00:28:41,900 --> 00:28:42,200
it grows.

696
00:28:42,200 --> 00:28:44,800
We'll talk about that, a little later, but it starts grabbing memory

697
00:28:44,800 --> 00:28:45,700
at the end.

698
00:28:45,700 --> 00:28:50,000
Let's say of this thing called the stack, and the stack grows a little

699
00:28:50,000 --> 00:28:53,200
bit, and when we call a new function, when we go into that function,

700
00:28:53,200 --> 00:28:56,600
when it has a variable that it needs, it grows a little more.

701
00:28:56,600 --> 00:28:58,000
So it's getting bigger and bigger.

702
00:28:58,100 --> 00:28:59,800
But when we get to the end of a

703
00:29:00,000 --> 00:29:04,800
In it returns to the previous function and then the stack shrinks to

704
00:29:04,800 --> 00:29:07,900
remove the local variables that existed there.

705
00:29:08,100 --> 00:29:11,500
So, basically what happens is you're talking almost like you if you

706
00:29:11,500 --> 00:29:17,100
could imagine almost like the volume bar on some kind of a of an audio

707
00:29:17,100 --> 00:29:17,900
device, right?

708
00:29:18,000 --> 00:29:20,900
It kind of it grows, it grows it grows it grows it grows, but then as

709
00:29:20,900 --> 00:29:22,000
they get spider, it goes back down.

710
00:29:22,000 --> 00:29:22,400
And then it grows.

711
00:29:22,400 --> 00:29:23,500
Grows grows because I've down.

712
00:29:23,900 --> 00:29:25,900
And the important thing to understand about that and what makes it a

713
00:29:25,900 --> 00:29:29,800
stack is nothing ever goes away from the middle of it.

714
00:29:30,100 --> 00:29:33,900
It always goes from, you know, starting at nothing to getting bigger,

715
00:29:33,900 --> 00:29:37,800
getting smaller bigger smaller always as one continuous chunk.

716
00:29:38,000 --> 00:29:41,400
And the reason that can work, of course, is because of that call flow

717
00:29:41,400 --> 00:29:43,100
of always, We call we return.

718
00:29:43,100 --> 00:29:45,800
We call call, call return return call return.

719
00:29:46,000 --> 00:29:47,900
We're always doing call return.

720
00:29:47,900 --> 00:29:51,600
We can never call through some functions then get rid of the local

721
00:29:51,600 --> 00:29:54,200
variable sum sum function in the middle, right?

722
00:29:54,200 --> 00:29:56,900
We're never going to call a bunch of functions that have a middle

723
00:29:56,900 --> 00:29:57,300
function.

724
00:29:57,300 --> 00:29:58,300
Go away first.

725
00:29:58,300 --> 00:29:59,800
Because what would those functions?

726
00:30:00,000 --> 00:30:01,800
Turn to if I actually do that, right?

727
00:30:01,800 --> 00:30:02,400
If I go here.

728
00:30:02,400 --> 00:30:04,700
Void bar, right?

729
00:30:05,300 --> 00:30:09,600
Wow, typing skills today, too much talking not enough typing Casey.

730
00:30:09,700 --> 00:30:10,300
I hear you.

731
00:30:11,000 --> 00:30:15,000
If I ever make one here, if I make a function bar here and here is my

732
00:30:15,000 --> 00:30:16,200
variable, right?

733
00:30:17,500 --> 00:30:18,600
I call that from this guy.

734
00:30:18,600 --> 00:30:20,200
So now what we're going to do, right?

735
00:30:20,200 --> 00:30:23,700
We're going to go in here and we're going to say test, right?

736
00:30:23,700 --> 00:30:25,800
I want to call Foo I call Foo.

737
00:30:25,900 --> 00:30:27,500
I hope you can see the little arrow there.

738
00:30:28,300 --> 00:30:29,800
I don't know if it comes through on the chat.

739
00:30:29,800 --> 00:30:34,800
Okay, we're going into Foo, you can see bar and now we go into bar.

740
00:30:34,800 --> 00:30:36,000
We return back out to Foo.

741
00:30:36,000 --> 00:30:38,400
We return back out to Main and we're done with the program.

742
00:30:38,400 --> 00:30:38,600
Right?

743
00:30:38,600 --> 00:30:39,900
It's always like Russian nesting dolls.

744
00:30:39,900 --> 00:30:42,700
Again, it goes in and it comes back out.

745
00:30:43,100 --> 00:30:43,500
One thing.

746
00:30:43,500 --> 00:30:44,700
Actually, you know what to?

747
00:30:44,700 --> 00:30:47,000
I'm just going to, I'm gonna do lazy internet here.

748
00:30:47,500 --> 00:30:51,500
If someone knows how to make this highlight this lot, the line that

749
00:30:51,500 --> 00:30:54,700
I'm on really boldly when we're stepping through, so people can watch

750
00:30:54,700 --> 00:30:58,600
it on Lower quality streams easier, please email me because I would

751
00:30:58,600 --> 00:31:01,200
love to set that up, but I don't know Visual Studio settings that

752
00:31:01,200 --> 00:31:04,100
well, and I can see this little arrow just fine, but other people

753
00:31:04,100 --> 00:31:05,000
might not be able to see it.

754
00:31:05,000 --> 00:31:08,100
So if someone has an idea for that, please send it to me for next

755
00:31:08,100 --> 00:31:09,600
stream, I'd love to get that in there.

756
00:31:09,900 --> 00:31:12,500
So anyway, so that is how a stack works.

757
00:31:12,600 --> 00:31:15,900
And what's so interesting about this is we can actually just see that

758
00:31:15,900 --> 00:31:16,800
in action right now.

759
00:31:16,800 --> 00:31:17,200
It doesn't have

760
00:31:17,400 --> 00:31:21,700
The abstract for you, basically, what happens is we go in here and

761
00:31:21,700 --> 00:31:24,400
we're going to look at test pointer and we're going to see where test

762
00:31:24,400 --> 00:31:26,700
pointer was now, okay.

763
00:31:27,800 --> 00:31:30,500
And we're going to set that to 55 value and we can see it right here.

764
00:31:30,500 --> 00:31:32,100
There is our value, right?

765
00:31:32,400 --> 00:31:34,500
So now the interesting thing, well, you know what?

766
00:31:34,600 --> 00:31:35,400
Let me let me back up.

767
00:31:35,400 --> 00:31:36,300
Just one step.

768
00:31:36,300 --> 00:31:37,500
I want to make this a lot clearer.

769
00:31:37,500 --> 00:31:39,900
So I'm going to go ahead and get rid of some of these things here that

770
00:31:39,900 --> 00:31:41,200
we were playing with before.

771
00:31:41,600 --> 00:31:43,400
So that I can show you something a little clearer.

772
00:31:44,300 --> 00:31:46,000
So we're going to make Barbie 100.

773
00:31:47,000 --> 00:31:48,000
I have that variable there.

774
00:31:48,100 --> 00:31:49,600
We're going to make another variable here.

775
00:31:51,500 --> 00:31:52,700
You call this food variable.

776
00:31:52,800 --> 00:31:56,100
We're going to make that be 200 will call this bar variable.

777
00:31:56,300 --> 00:31:56,800
There we go.

778
00:31:57,600 --> 00:32:00,100
And we're going to have our test, which is out here.

779
00:32:00,200 --> 00:32:00,600
Right?

780
00:32:01,000 --> 00:32:01,600
Makes sense.

781
00:32:01,700 --> 00:32:03,100
Pretty straightforward.

782
00:32:04,000 --> 00:32:04,900
Oh, you know what?

783
00:32:04,900 --> 00:32:05,500
I'm doing it again.

784
00:32:05,500 --> 00:32:07,100
I always do those in line declarations.

785
00:32:07,200 --> 00:32:08,000
And I apologize.

786
00:32:08,300 --> 00:32:08,900
We're not.

787
00:32:08,900 --> 00:32:10,100
It's nothing special.

788
00:32:10,100 --> 00:32:12,200
It's just actually does the assignment on the same line as the

789
00:32:12,200 --> 00:32:12,900
Declaration.

790
00:32:13,000 --> 00:32:14,900
We will talk about it in eventually.

791
00:32:15,400 --> 00:32:15,900
It'll be fine.

792
00:32:15,900 --> 00:32:16,800
But you get the idea.

793
00:32:16,800 --> 00:32:17,800
There we go, separate lines.

794
00:32:17,800 --> 00:32:18,000
Now.

795
00:32:18,000 --> 00:32:18,700
Everyone's happy.

796
00:32:19,000 --> 00:32:20,800
Okay, so I'm going to go ahead.

797
00:32:21,000 --> 00:32:24,000
Run this and we get down and we stopped at our familiar location.

798
00:32:24,000 --> 00:32:25,600
And I'm going to look at that address.

799
00:32:25,600 --> 00:32:28,400
Going to say, please give me the address where we're going to assign

800
00:32:28,400 --> 00:32:28,700
it.

801
00:32:28,700 --> 00:32:31,400
We step over that line and we see the 255.

802
00:32:31,400 --> 00:32:31,900
There it is.

803
00:32:31,900 --> 00:32:35,100
Just like what we wanted, but now we can see a little bit more when we

804
00:32:35,100 --> 00:32:37,800
step into Foo right here I go.

805
00:32:38,000 --> 00:32:40,900
I'm going to set this food variable to equal to 200.

806
00:32:40,900 --> 00:32:44,700
And so now what should be happening, if the stack thing that I said is

807
00:32:44,700 --> 00:32:46,700
true that I just told you about, right?

808
00:32:47,100 --> 00:32:50,800
I should be able to find where it's going to stick that.

809
00:32:50,900 --> 00:32:54,400
You and it should be close by because all we did was kind of grow a

810
00:32:54,400 --> 00:32:55,000
little bit there.

811
00:32:55,000 --> 00:32:56,300
So, let's see if we can find it.

812
00:32:56,700 --> 00:32:58,200
I don't know if it'll actually save it for us.

813
00:33:00,500 --> 00:33:04,400
To do that is Foo variable.

814
00:33:05,200 --> 00:33:07,400
It is at 79 T.

815
00:33:07,700 --> 00:33:10,900
So, whereas 790, 790 would be right there.

816
00:33:11,100 --> 00:33:12,700
So there it is, right.

817
00:33:12,700 --> 00:33:15,600
You can actually see it right there and our previous value that we

818
00:33:15,600 --> 00:33:20,500
were looking at before the test burner value was 87, F, which is right

819
00:33:20,500 --> 00:33:21,400
down here.

820
00:33:21,400 --> 00:33:22,000
Right?

821
00:33:22,400 --> 00:33:24,100
And it's at zero because we wrapped it.

822
00:33:24,100 --> 00:33:27,500
So, there is the value that we had written to in this function.

823
00:33:27,500 --> 00:33:29,100
That was where it was on the stack.

824
00:33:29,700 --> 00:33:30,100
And then

825
00:33:30,300 --> 00:33:32,200
Here is the next location on the stack.

826
00:33:32,500 --> 00:33:36,800
Now, you may notice that there is full banana cake stuff happening

827
00:33:36,800 --> 00:33:37,300
here.

828
00:33:37,300 --> 00:33:39,500
Like where did all this other stuff happened?

829
00:33:39,500 --> 00:33:41,400
Why did it, why did put them so far apart?

830
00:33:41,400 --> 00:33:44,900
If the stock is just growing in the answer to that is actually because

831
00:33:44,900 --> 00:33:48,800
there's all kinds of shenanigans that actually go on with the stack,

832
00:33:48,900 --> 00:33:53,600
in debug mode, when we're which is what we're compiling in here, where

833
00:33:53,600 --> 00:33:56,400
you can, you know, basically the compiler has settings, which puts

834
00:33:56,400 --> 00:34:00,100
stuff in there that try to help you from making a mistake.

835
00:34:00,300 --> 00:34:03,400
Take it'll basically put in stack frame checking and padding regions

836
00:34:03,400 --> 00:34:07,600
and all these other things to try and help you from errors where you

837
00:34:07,600 --> 00:34:09,100
might be writing if you're actually doing.

838
00:34:09,100 --> 00:34:10,800
So this pointer manipulation that I was doing.

839
00:34:11,100 --> 00:34:13,300
So a bunch of this stuff, we don't need to worry about now, but

840
00:34:13,300 --> 00:34:15,699
basically what's happening is when it pushes the stack even though it

841
00:34:15,699 --> 00:34:19,600
really only needed to go a little bit to store this one, simple

842
00:34:19,600 --> 00:34:21,600
integer, which is only 32 bits or whatever.

843
00:34:22,400 --> 00:34:23,100
We only need to start.

844
00:34:23,100 --> 00:34:23,900
That one thing.

845
00:34:24,100 --> 00:34:27,400
The reason that it was actually the reason that it was actually

846
00:34:27,400 --> 00:34:29,800
pushing so much stuff on is because of all that extra stuff that

847
00:34:29,800 --> 00:34:30,199
happens.

848
00:34:30,300 --> 00:34:34,900
So I have maybe just a little bit of time left before I go to the next

849
00:34:34,900 --> 00:34:35,900
thing that I want to talk about.

850
00:34:35,900 --> 00:34:39,699
So I'm just going to see if quickly and this the reason I say messy of

851
00:34:39,699 --> 00:34:43,199
quick links is I don't use visual studio for compiling, hardly ever at

852
00:34:43,199 --> 00:34:44,400
all like I saying before.

853
00:34:44,400 --> 00:34:48,000
So it's going to be a little hard for me to find the right thing to

854
00:34:48,000 --> 00:34:48,300
set here.

855
00:34:48,300 --> 00:34:53,100
But if I can go in here and set to an optimized build, I may be able

856
00:34:53,100 --> 00:34:55,500
to show you that stack a little more concisely.

857
00:34:55,500 --> 00:34:57,800
So I'm going to see about that.

858
00:34:57,800 --> 00:35:00,000
I'm going to try to compile the

859
00:35:00,700 --> 00:35:01,800
And hopefully it didn't in line.

860
00:35:01,800 --> 00:35:05,300
Everything here for me, but we'll see if it actually did or not.

861
00:35:05,300 --> 00:35:06,600
It probably did, didn't it?

862
00:35:06,600 --> 00:35:08,000
Yeah, it did.

863
00:35:08,500 --> 00:35:09,500
It did.

864
00:35:09,500 --> 00:35:13,800
Unfortunately which, you know, the the optimizer is going to be rather

865
00:35:13,800 --> 00:35:14,200
aggressive.

866
00:35:14,200 --> 00:35:14,600
Yeah.

867
00:35:14,700 --> 00:35:14,900
Yeah.

868
00:35:15,600 --> 00:35:21,300
So what I might be able to do is I might be able to turn that the just

869
00:35:21,300 --> 00:35:24,000
the stack stuff off in the debug build so I can show you.

870
00:35:24,000 --> 00:35:26,600
So I said I'll spend a little more time on it, but then I'm going to

871
00:35:26,600 --> 00:35:28,700
move ahead because I don't want to get bogged down in that.

872
00:35:28,700 --> 00:35:30,100
And I don't know where they put.

873
00:35:30,300 --> 00:35:32,300
All these things in the in the GUI.

874
00:35:32,700 --> 00:35:35,300
So let's take a look inside.

875
00:35:35,300 --> 00:35:37,100
See passes optimizations.

876
00:35:37,500 --> 00:35:42,300
Let's see if I enable intrinsic functions favor sighs sweet omit frame

877
00:35:42,300 --> 00:35:47,600
pointers is there like that frame pointers is really going to do it.

878
00:35:47,600 --> 00:35:52,300
I want something more than that string pulling around timeline.

879
00:35:52,300 --> 00:35:58,500
Very basic runtime checks could be in there for security check.

880
00:36:00,000 --> 00:36:00,400
I don't know.

881
00:36:00,600 --> 00:36:03,500
I think this is going to be it's probably one of these.

882
00:36:03,500 --> 00:36:04,700
I am not going to actually try it.

883
00:36:04,700 --> 00:36:05,500
I think it's a little too much.

884
00:36:05,500 --> 00:36:08,600
So we're going to let we're going to let that wait till a different

885
00:36:08,600 --> 00:36:10,700
time when I have time to look it up ahead of time, which is where I

886
00:36:10,700 --> 00:36:11,400
actually set it in there.

887
00:36:11,400 --> 00:36:12,600
Just make it stop doing that.

888
00:36:12,600 --> 00:36:15,900
But suffice to say, what is happening in there, is that it's pushing

889
00:36:15,900 --> 00:36:17,000
extra stuff on the stock.

890
00:36:17,300 --> 00:36:20,100
So that is where all our memory is coming from.

891
00:36:20,500 --> 00:36:23,200
And one thing that you may have noticed, is when I ran this program,

892
00:36:23,200 --> 00:36:26,100
multiple times, the memory that we looked up the last time.

893
00:36:26,100 --> 00:36:29,400
Like, remember last time it was there, this time our memory is

894
00:36:29,400 --> 00:36:29,800
incomplete.

895
00:36:30,000 --> 00:36:30,700
A different place.

896
00:36:30,800 --> 00:36:34,100
And you may wonder why that is that seems kind of odd, right?

897
00:36:34,100 --> 00:36:36,300
Because I don't know aren't computers deterministic.

898
00:36:36,300 --> 00:36:37,900
Why is it randomly picking memory?

899
00:36:38,100 --> 00:36:43,100
The answer is because of security used to be the case that if I ran

900
00:36:43,100 --> 00:36:45,700
the program multiple times, the memory would be in the same place and

901
00:36:45,700 --> 00:36:48,500
this was actually very convenient for debugging and sometimes it's a

902
00:36:48,500 --> 00:36:50,100
good idea to shut off the feature.

903
00:36:50,100 --> 00:36:52,600
I'm about to talk about specifically because it makes me bugging

904
00:36:52,600 --> 00:36:58,600
easier because all your memory will be in the same place, but what

905
00:36:58,600 --> 00:36:59,600
happens nowadays?

906
00:37:00,300 --> 00:37:04,800
Is that because the fixed layout of things in their virtual memory

907
00:37:04,800 --> 00:37:08,200
space, when they would run allowed hackers to be able to do stuff

908
00:37:08,200 --> 00:37:12,000
like, know exactly where an important thing in memory for that process

909
00:37:12,000 --> 00:37:13,900
was and use code exploits to go.

910
00:37:13,900 --> 00:37:14,200
Grab.

911
00:37:14,200 --> 00:37:15,500
What's in that memory or reset.

912
00:37:15,500 --> 00:37:16,200
What's in that memory?

913
00:37:16,200 --> 00:37:19,400
Or do other things like this or to know the place to Branch to encode

914
00:37:19,400 --> 00:37:20,100
to do things?

915
00:37:20,300 --> 00:37:22,800
Basically, it allowed them extra flexibility that they wouldn't have

916
00:37:22,800 --> 00:37:27,600
had otherwise because of that it became a thing that they do now where

917
00:37:27,600 --> 00:37:30,000
they randomize where your program actually runs.

918
00:37:30,300 --> 00:37:34,900
I think it's called address randomization extension at, let's take a

919
00:37:34,900 --> 00:37:35,300
look.

920
00:37:35,700 --> 00:37:37,200
It's got a name in Windows.

921
00:37:37,200 --> 00:37:40,300
They gave it a name, address space layout randomization.

922
00:37:40,800 --> 00:37:43,800
And basically, what that does is it makes sure that your code, and

923
00:37:43,800 --> 00:37:47,300
your stack and your allocations and everything come back at different

924
00:37:47,300 --> 00:37:48,700
locations, somewhat randomly.

925
00:37:48,700 --> 00:37:51,200
I guess I'm not sure what their actual scheme for randomizing it is,

926
00:37:51,500 --> 00:37:54,600
but it makes it so that it's harder for hackers to exploit that.

927
00:37:54,800 --> 00:37:57,300
So that is why we get different members, excuse time.

928
00:37:57,400 --> 00:38:00,000
And we may look at turning that off in the future just on the dev.

929
00:38:00,100 --> 00:38:03,000
Of side of things so that we don't have to actually deal with those

930
00:38:03,000 --> 00:38:03,100
in.

931
00:38:03,100 --> 00:38:04,900
They'll be at the same place which will make me, make it a little

932
00:38:04,900 --> 00:38:05,900
easier for me to show things.

933
00:38:06,700 --> 00:38:08,700
So that is how that works.

934
00:38:08,700 --> 00:38:11,100
Hopefully, you're very comfortable with this now and you've seen.

935
00:38:11,100 --> 00:38:13,100
It's not that mysterious to understand these things.

936
00:38:13,100 --> 00:38:14,400
It's really straightforward.

937
00:38:14,700 --> 00:38:16,900
We can just look at what's happening in the memory.

938
00:38:16,900 --> 00:38:18,700
We can look at how our program is working in.

939
00:38:19,100 --> 00:38:20,900
I'll be honest with you, every single thing.

940
00:38:20,900 --> 00:38:24,400
We do starting Monday, everything we do for the year or two, that it

941
00:38:24,400 --> 00:38:26,300
takes us to make a huge awesome game.

942
00:38:26,300 --> 00:38:27,100
That's going to be cool.

943
00:38:28,100 --> 00:38:30,000
Every last thing we do is just that

944
00:38:30,400 --> 00:38:32,900
Like that is the only thing you really have to understand is we've got

945
00:38:32,900 --> 00:38:35,100
pointers to memory and we're going to fuss with the values.

946
00:38:35,200 --> 00:38:36,500
I know it sounds crazy.

947
00:38:36,500 --> 00:38:38,200
But that is all we will do.

948
00:38:38,200 --> 00:38:41,800
And so I really want to drill these kind of fundamentals in for anyone

949
00:38:41,800 --> 00:38:45,000
who's unfamiliar with them because once you get them, you're like

950
00:38:45,000 --> 00:38:45,600
super powerful.

951
00:38:45,600 --> 00:38:48,100
You can do anything you want and you can build your own anything you

952
00:38:48,100 --> 00:38:48,400
want.

953
00:38:48,400 --> 00:38:50,800
And from then on you don't have to deal with other people's

954
00:38:50,800 --> 00:38:51,600
distractions.

955
00:38:51,600 --> 00:38:54,400
If you want abstractions, you can make your own and you can make what

956
00:38:54,400 --> 00:38:55,300
up, what the rules are.

957
00:38:55,300 --> 00:38:56,900
You don't have to follow someone else's rules.

958
00:38:56,900 --> 00:38:58,900
You don't have to follow what the people who design Java thought were

959
00:38:58,900 --> 00:38:59,400
good.

960
00:38:59,400 --> 00:38:59,800
You can follow

961
00:39:00,000 --> 00:39:03,100
You think is good and that to me is very empowering and it's, it's

962
00:39:03,100 --> 00:39:03,800
really great.

963
00:39:03,800 --> 00:39:08,300
So the other thing that I wanted to do today, besides kind of showing

964
00:39:08,300 --> 00:39:11,400
you where that's actually going, so you can understand understand what

965
00:39:11,400 --> 00:39:15,200
that is, is to quickly mention that we talked before, when we went to

966
00:39:15,200 --> 00:39:16,500
the to the assembly, right?

967
00:39:16,500 --> 00:39:17,500
We did this.

968
00:39:17,500 --> 00:39:20,300
And I went to the assembly and I said that we're going to talk about.

969
00:39:20,500 --> 00:39:23,100
As I mentioned, again, a little later this number right here.

970
00:39:23,500 --> 00:39:25,600
It's also a hexadecimal location in memory.

971
00:39:25,600 --> 00:39:29,800
So if you want to, you can actually copy this piece of

972
00:39:30,100 --> 00:39:30,800
Thing as well.

973
00:39:30,900 --> 00:39:33,800
And you can go to one of those memory viewer windows that I was

974
00:39:33,800 --> 00:39:37,800
talking about and you can paste in the location of the code.

975
00:39:37,900 --> 00:39:41,000
So you can actually say, oh, I want to see my code now, right?

976
00:39:41,000 --> 00:39:46,300
Oh, and I awesome as I say that apparently that's a total lie.

977
00:39:46,500 --> 00:39:50,200
Apparently, you can't actually look at the code, presumably because

978
00:39:50,200 --> 00:39:53,400
that is actually not allowed by the memory protection of this

979
00:39:53,400 --> 00:39:54,200
particular thing.

980
00:39:55,800 --> 00:39:58,700
All right, do I actually go unprotect the memory?

981
00:40:02,100 --> 00:40:02,800
6:44.

982
00:40:02,800 --> 00:40:03,700
I can't I can't do it.

983
00:40:03,700 --> 00:40:06,400
Okay, so I'll simply say why you weren't able to do that.

984
00:40:06,400 --> 00:40:09,400
And then maybe I'll go do that for the next for the stream tomorrow

985
00:40:09,400 --> 00:40:09,600
night.

986
00:40:09,600 --> 00:40:10,700
So we can actually look at it.

987
00:40:10,900 --> 00:40:14,000
So I am thwarted by the virtual memory system.

988
00:40:14,000 --> 00:40:18,500
Basically, what happens is if you have actual extra memory, that's

989
00:40:18,500 --> 00:40:22,600
executed in the old days again and even not too long ago, maybe even

990
00:40:22,600 --> 00:40:23,100
10 years ago.

991
00:40:23,100 --> 00:40:24,100
Let's say five years ago.

992
00:40:24,100 --> 00:40:24,500
I don't know.

993
00:40:25,100 --> 00:40:26,300
I would have that would've worked.

994
00:40:26,300 --> 00:40:27,400
And I've done that before.

995
00:40:27,400 --> 00:40:28,300
I haven't done it recently.

996
00:40:28,300 --> 00:40:30,900
From, you know, I've actually done it recently with code that but it

997
00:40:31,000 --> 00:40:33,400
I worked there for a totally different reason that I won't go into.

998
00:40:34,400 --> 00:40:36,900
So, basically, the reason that I can't do that now he's again, because

999
00:40:36,900 --> 00:40:39,500
of security and what they often do at least I'm assuming, that's why I

1000
00:40:39,500 --> 00:40:41,900
have to go investigate to verify this way, but I'm assuming, that's

1001
00:40:41,900 --> 00:40:45,800
why what they actually do with the virtual memory system, is each of

1002
00:40:45,800 --> 00:40:48,900
those pages that I talked about and we'll talk about this a lot in the

1003
00:40:48,900 --> 00:40:52,600
mainstream actually, but each of those pages actually has things on

1004
00:40:52,600 --> 00:40:52,800
it.

1005
00:40:52,800 --> 00:40:56,300
That the CPU understands that are called flags and those Flags allow

1006
00:40:56,300 --> 00:40:57,200
Access Control.

1007
00:40:57,400 --> 00:41:00,500
They basically allow you to Mark a page as being readable by a

1008
00:41:00,500 --> 00:41:00,900
process.

1009
00:41:01,000 --> 00:41:04,900
Is writable by a process, executable by a process and what they do now

1010
00:41:04,900 --> 00:41:08,600
to prevent again, more hacking problems is they will Mark the pages of

1011
00:41:08,600 --> 00:41:12,900
your code that our executable as not being readable or writable.

1012
00:41:13,200 --> 00:41:16,900
So what happens is you actually take that page, you know, whatever

1013
00:41:16,900 --> 00:41:19,200
that page is that you're trying to exit the codon and you make it to

1014
00:41:19,200 --> 00:41:23,000
the process itself can even access it and that helps it to make it so

1015
00:41:23,000 --> 00:41:26,400
that you can't do Shenanigans where you write things into code to

1016
00:41:26,400 --> 00:41:28,600
change what the code is doing when you're when you're hacking.

1017
00:41:28,900 --> 00:41:29,900
So yeah.

1018
00:41:29,900 --> 00:41:30,900
Sorry, that was a little bit of

1019
00:41:31,000 --> 00:41:31,400
Let down.

1020
00:41:31,400 --> 00:41:33,100
I was kind of hoping to show you that but it's okay.

1021
00:41:33,100 --> 00:41:36,700
You wouldn't actually see anything except for the binary encoding of

1022
00:41:36,700 --> 00:41:39,200
the Assembly Language, but it would be a nice thing to see.

1023
00:41:39,200 --> 00:41:42,000
So maybe I'll just go ahead and write a little app sometime, not on

1024
00:41:42,000 --> 00:41:44,600
the stream, but just something that actually virtual and protects the

1025
00:41:44,600 --> 00:41:49,000
page for you so that we can go see that some of the time, anyway, wha

1026
00:41:49,000 --> 00:41:53,400
very disappointing, but security, I can appreciate its necessary, you

1027
00:41:53,400 --> 00:41:54,800
know, security is good.

1028
00:41:55,100 --> 00:41:56,100
Hawk, soaring is bad.

1029
00:41:56,300 --> 00:41:56,800
So,

1030
00:41:58,500 --> 00:41:59,700
now, we get to

1031
00:42:00,100 --> 00:42:04,400
The very special, very exciting part that I was alluding to on the

1032
00:42:04,400 --> 00:42:07,400
Twitter, which is that we have pictures today.

1033
00:42:07,500 --> 00:42:08,500
We have pictures.

1034
00:42:08,600 --> 00:42:10,600
So instead of just, just the code window.

1035
00:42:10,800 --> 00:42:14,600
I'm going to do something now which which will see if it works on the

1036
00:42:14,600 --> 00:42:14,800
string.

1037
00:42:14,800 --> 00:42:16,000
And hopefully it works on the stream.

1038
00:42:16,200 --> 00:42:19,200
You guys have to tell me if it does or doesn't, but we are going to

1039
00:42:19,200 --> 00:42:23,700
get a little bit Pulp Fiction here, and we are going to bring out the

1040
00:42:23,700 --> 00:42:24,300
Gimp.

1041
00:42:25,700 --> 00:42:30,000
Yes, it is in gentlemen, gimp the image manipulation program canoe

1042
00:42:30,000 --> 00:42:32,000
image manipulation program, whatever it stands for.

1043
00:42:32,600 --> 00:42:39,200
So I I mentioned this on the, on the, on the Twitter's on tweeting and

1044
00:42:39,200 --> 00:42:42,500
what I said is today's stream was going to feature the motherboard

1045
00:42:42,500 --> 00:42:46,700
from the trailer and one of the things I did when I was trying to, you

1046
00:42:46,700 --> 00:42:49,200
know, I've been I've been sort of working on this project.

1047
00:42:49,300 --> 00:42:51,300
Getting this project going for about a month or two.

1048
00:42:51,500 --> 00:42:53,800
I don't remember how long since people asked me to start doing

1049
00:42:53,800 --> 00:42:54,200
streams.

1050
00:42:54,200 --> 00:42:54,700
Basically.

1051
00:42:54,700 --> 00:42:55,300
I was trying to do it.

1052
00:42:55,500 --> 00:42:57,000
Could do for streamers, like I got a good idea.

1053
00:42:57,000 --> 00:43:01,100
I think, what I want to do, two for the trailer, was to kind of make

1054
00:43:01,100 --> 00:43:05,700
something exciting, that would sort of get across the handmade part of

1055
00:43:05,700 --> 00:43:09,000
things, but I couldn't really show anything in the code because the

1056
00:43:09,000 --> 00:43:10,800
whole point of it was we're going to write all the code from scratch

1057
00:43:10,800 --> 00:43:11,200
together.

1058
00:43:11,200 --> 00:43:14,700
So I can't start the project until after the projects already live.

1059
00:43:14,700 --> 00:43:15,700
And so, how do you make a trailer?

1060
00:43:15,700 --> 00:43:18,900
So I decided to do it by assembling hardware and of course, I love to

1061
00:43:18,900 --> 00:43:19,500
assemble Hardware.

1062
00:43:19,500 --> 00:43:20,800
I've assembled many machines.

1063
00:43:21,100 --> 00:43:23,300
This is one of the few machines I didn't assemble because it was a

1064
00:43:23,300 --> 00:43:25,300
machine from from work, from rad.

1065
00:43:25,800 --> 00:43:28,400
And it was built by, I guess Del it was ordered from or whatever.

1066
00:43:28,400 --> 00:43:32,300
But I build all the machines that I use myself and it's not hard to

1067
00:43:32,300 --> 00:43:32,600
do.

1068
00:43:32,800 --> 00:43:35,000
Probably do a little bit on that in later in the series for people who

1069
00:43:35,000 --> 00:43:36,000
want to build their own machines.

1070
00:43:36,000 --> 00:43:36,600
Super easy.

1071
00:43:36,600 --> 00:43:40,100
If you like order parts from new eggs and assemble them, but this is a

1072
00:43:40,100 --> 00:43:44,300
photograph that I took today at work of the motherboard that I used in

1073
00:43:44,300 --> 00:43:44,900
the trailer.

1074
00:43:45,800 --> 00:43:47,400
And you can see what I've done here.

1075
00:43:47,500 --> 00:43:49,800
Is, I've removed the heatsink from the processor.

1076
00:43:50,000 --> 00:43:52,000
So this is the CPU.

1077
00:43:52,000 --> 00:43:54,000
That's that's the actual Intel CPU.

1078
00:43:55,200 --> 00:43:55,400
I

1079
00:43:55,500 --> 00:43:58,500
Remember exactly what processor that particular motherboard had in it.

1080
00:43:58,800 --> 00:44:03,500
I think it was a Coke or to do quad.

1081
00:44:04,000 --> 00:44:05,400
I think it was a Core 2 quad.

1082
00:44:05,400 --> 00:44:08,900
I'm going to say that it was a core to Claude, but I don't actually

1083
00:44:08,900 --> 00:44:11,400
know that was Core 2 quad, but I think it was a Core 2 quad anyway,

1084
00:44:11,800 --> 00:44:14,100
and what you can see here, is that the thermal this, this is the stuff

1085
00:44:14,100 --> 00:44:14,500
in here.

1086
00:44:14,500 --> 00:44:16,300
Is that gray stuff is thermal grease.

1087
00:44:16,600 --> 00:44:19,600
It's basically something that allows the heatsink to bind to the

1088
00:44:19,600 --> 00:44:20,200
processor.

1089
00:44:20,200 --> 00:44:23,800
It fills in the little crevices, in the metal so that it can vent heat

1090
00:44:23,800 --> 00:44:24,400
more easily.

1091
00:44:24,400 --> 00:44:24,500
Get it.

1092
00:44:24,500 --> 00:44:25,300
Get it out because the processor

1093
00:44:25,400 --> 00:44:26,800
Sir, obviously gets very hot.

1094
00:44:27,500 --> 00:44:30,700
And so I've removed the heat sink so you can see the CPU and I put a

1095
00:44:30,700 --> 00:44:31,500
ruler on it.

1096
00:44:31,600 --> 00:44:32,700
And you might ask.

1097
00:44:32,700 --> 00:44:35,000
Why did you want to measure the motherboard?

1098
00:44:35,000 --> 00:44:35,800
Like, you can see?

1099
00:44:35,800 --> 00:44:36,800
How big is the motherboard?

1100
00:44:36,800 --> 00:44:37,100
I don't know.

1101
00:44:37,100 --> 00:44:39,000
It's 20 cm or something, right?

1102
00:44:39,000 --> 00:44:39,500
It's not.

1103
00:44:39,500 --> 00:44:40,200
It's not that big.

1104
00:44:40,200 --> 00:44:41,000
It's pretty small.

1105
00:44:41,600 --> 00:44:43,600
And so why did you want to measure that and what did you want to talk

1106
00:44:43,600 --> 00:44:43,900
about?

1107
00:44:43,900 --> 00:44:45,700
Well, what I want to talk about it, since now, I've introduced you,

1108
00:44:45,700 --> 00:44:46,400
the concept of memory.

1109
00:44:46,400 --> 00:44:51,000
I wanted to tell you where the memory is and why you should care where

1110
00:44:51,000 --> 00:44:51,800
the memory is.

1111
00:44:52,100 --> 00:44:54,600
So, here's a memory, these big things here.

1112
00:44:55,500 --> 00:44:56,600
These things that you put in.

1113
00:44:56,600 --> 00:44:58,500
And if anyone's out, there is built a computer themselves.

1114
00:44:58,500 --> 00:44:59,100
They know what they are.

1115
00:44:59,100 --> 00:44:59,800
There's these long kind,

1116
00:45:00,000 --> 00:45:01,100
Text a slot in there.

1117
00:45:01,300 --> 00:45:05,600
They're a sort of a commodity type of Hardware that you buy separately

1118
00:45:05,600 --> 00:45:08,200
and you can put in a machine and machines have some number of slots.

1119
00:45:08,700 --> 00:45:13,400
And basically what has to happen is every time the CPU wants to read

1120
00:45:13,400 --> 00:45:14,500
or write from that memory.

1121
00:45:14,800 --> 00:45:18,200
It has to go a long wires over to here.

1122
00:45:18,500 --> 00:45:21,800
It has to look in here at, you know, it has to get some bits out.

1123
00:45:21,800 --> 00:45:23,800
And those bits have to be sent back and they're sent back over

1124
00:45:23,800 --> 00:45:27,800
something called a bus, you know, not a very creative name, but a bus,

1125
00:45:27,800 --> 00:45:29,800
something that transfers B back and forth, right?

1126
00:45:30,000 --> 00:45:30,300
Right.

1127
00:45:30,400 --> 00:45:34,500
So that's the physical thing that actually happens in your computer is

1128
00:45:34,500 --> 00:45:38,100
the processor has to go out along with some wires on the bus.

1129
00:45:38,200 --> 00:45:40,700
It's got a use, a memory controller, which is thing that does this,

1130
00:45:41,200 --> 00:45:42,300
it's got to do that stuff.

1131
00:45:42,600 --> 00:45:46,000
Get the memory, bring it back and then it can operate on it.

1132
00:45:46,000 --> 00:45:46,500
Right.

1133
00:45:46,800 --> 00:45:47,400
Now.

1134
00:45:47,400 --> 00:45:52,000
What I want to get across to you here is that this is a non-trivial

1135
00:45:52,000 --> 00:45:52,700
problem.

1136
00:45:53,100 --> 00:45:55,200
Now, again, when you're working at very high levels of abstraction,

1137
00:45:55,200 --> 00:45:58,500
you don't necessarily think about this that much, but this is a long

1138
00:45:58,500 --> 00:45:59,900
way to go to get

1139
00:46:00,000 --> 00:46:00,600
That memory.

1140
00:46:00,600 --> 00:46:00,900
Okay.

1141
00:46:00,900 --> 00:46:02,000
That's far.

1142
00:46:02,200 --> 00:46:05,400
I don't know how far that is because we don't know exactly how the

1143
00:46:05,500 --> 00:46:06,900
routing goes on this motherboard.

1144
00:46:06,900 --> 00:46:09,300
Look, I don't actually know the route that it takes to get there.

1145
00:46:09,300 --> 00:46:12,100
But even if it just went straight from Center to Center, let's say

1146
00:46:12,500 --> 00:46:16,600
that's like a 10 right there on the thing and that's like an 18,

1147
00:46:16,800 --> 00:46:17,100
right?

1148
00:46:17,100 --> 00:46:21,600
So that's 8 cm that it has to go to get those bits and you're like,

1149
00:46:22,300 --> 00:46:24,000
eight centimeters its electricity.

1150
00:46:24,000 --> 00:46:25,600
It goes 8 centimeters in no time, right?

1151
00:46:25,600 --> 00:46:26,200
It's fast.

1152
00:46:26,200 --> 00:46:27,100
It's super fast.

1153
00:46:27,100 --> 00:46:27,900
Who cares.

1154
00:46:27,900 --> 00:46:29,800
Casey, you know, who?

1155
00:46:29,900 --> 00:46:30,400
Who cares?

1156
00:46:30,400 --> 00:46:33,400
And the answer is that physics cares?

1157
00:46:33,500 --> 00:46:35,900
Unfortunately physics cares, one time.

1158
00:46:35,900 --> 00:46:39,400
I got some friends at Intel and I, you know, I'll ask them.

1159
00:46:39,400 --> 00:46:41,800
I don't know a damn thing about Hardware, man.

1160
00:46:41,800 --> 00:46:43,600
I don't know anything about Hardware, right?

1161
00:46:43,700 --> 00:46:45,000
I don't know how to design a chip.

1162
00:46:45,100 --> 00:46:46,600
I don't know how they work these days.

1163
00:46:46,800 --> 00:46:51,700
I I watched an intro lecture from MIT course where that was taught by

1164
00:46:51,700 --> 00:46:55,300
game guy named I think Gill Pratt and it was like a how to build let

1165
00:46:55,300 --> 00:46:57,000
you know, Adder circuits and stuff.

1166
00:46:57,300 --> 00:46:59,800
And so I can sort of build an Adder circuit maybe if I'm

1167
00:47:00,000 --> 00:47:01,900
Real lucky, but I probably forgot most of it.

1168
00:47:01,900 --> 00:47:03,900
So so I don't know anything about modern Harbor.

1169
00:47:03,900 --> 00:47:06,100
They're so complicated and fantastically wild.

1170
00:47:06,200 --> 00:47:07,700
I certainly don't pretend to know anything about that.

1171
00:47:07,700 --> 00:47:10,100
But I'm just going to show you what a Layman who knows nothing about

1172
00:47:10,100 --> 00:47:14,200
Hardware can can know about memory and why it's a hard problem, right?

1173
00:47:14,200 --> 00:47:14,700
So, I don't know.

1174
00:47:14,700 --> 00:47:16,100
I got no special knowledge.

1175
00:47:16,100 --> 00:47:17,300
I'm in the same boat as you here.

1176
00:47:17,300 --> 00:47:18,300
I do nothing.

1177
00:47:18,700 --> 00:47:22,200
But let's just take the fastest thing in the world that we know about

1178
00:47:22,200 --> 00:47:24,300
the speed of light, right?

1179
00:47:24,300 --> 00:47:25,300
How fast is it?

1180
00:47:25,300 --> 00:47:26,500
Well, that's how fast it is.

1181
00:47:26,600 --> 00:47:29,800
It's 300 million meters per second right now.

1182
00:47:29,900 --> 00:47:31,400
Sounds pretty fast, right?

1183
00:47:31,600 --> 00:47:34,100
But there's a catch to that.

1184
00:47:34,200 --> 00:47:36,300
Even if we were the fastest thing in the world.

1185
00:47:36,300 --> 00:47:38,300
What is this number right here.

1186
00:47:38,500 --> 00:47:41,800
That is the clock speed of the CPU that's in this machine.

1187
00:47:41,800 --> 00:47:44,800
It is 3.2 GHz.

1188
00:47:45,300 --> 00:47:48,200
So what's 3.2 GHz, right.

1189
00:47:48,200 --> 00:47:49,300
Oops, didn't you do that?

1190
00:47:50,500 --> 00:47:52,500
3.2 GHz, right?

1191
00:47:52,500 --> 00:47:55,100
Is 3.2 x 1024.

1192
00:47:55,200 --> 00:47:59,800
So that would be khz x, 1024, which would be MHz times, 10.

1193
00:48:00,000 --> 00:48:03,300
Or so now we are actually up to gigahertz, right?

1194
00:48:03,500 --> 00:48:04,700
So there's the number.

1195
00:48:05,400 --> 00:48:08,700
So, take a look at that number for a second, right?

1196
00:48:08,900 --> 00:48:11,200
And now take a look at this number for a second.

1197
00:48:11,600 --> 00:48:14,600
It's not looking so great anymore.

1198
00:48:14,900 --> 00:48:18,500
And if we actually have Google do this math and I think it can

1199
00:48:18,500 --> 00:48:19,000
actually do it.

1200
00:48:19,000 --> 00:48:20,700
Directly speed of light.

1201
00:48:21,700 --> 00:48:24,900
/ 3.2 GHz, right.

1202
00:48:26,100 --> 00:48:28,400
We end up with that number nine.

1203
00:48:28,400 --> 00:48:30,000
Point three centimeters.

1204
00:48:30,300 --> 00:48:30,700
Okay.

1205
00:48:31,000 --> 00:48:32,200
Now just to be clear.

1206
00:48:32,200 --> 00:48:35,100
What a gigahertz is, is that's the smallest.

1207
00:48:35,100 --> 00:48:39,500
It's called a clock basically CPUs have sort of ticks where they do

1208
00:48:39,500 --> 00:48:40,400
their operations.

1209
00:48:40,600 --> 00:48:44,500
So basically inside of one clock, right?

1210
00:48:44,500 --> 00:48:48,000
One single tick of the CPU is the fastest that it really can do

1211
00:48:48,000 --> 00:48:48,500
anything.

1212
00:48:48,600 --> 00:48:50,700
It can't do stuff at faster than a clock.

1213
00:48:50,700 --> 00:48:53,000
Sometimes it can do two things in one clock cycle.

1214
00:48:53,000 --> 00:48:55,700
If it has started multiple of them, going

1215
00:48:55,900 --> 00:48:59,200
Work an issue multiple things, but they the results won't come in for,

1216
00:48:59,200 --> 00:49:00,400
at least one clock cycle.

1217
00:49:00,400 --> 00:49:03,100
So like, but between the time, whereas to start something and the time

1218
00:49:03,100 --> 00:49:05,800
when asked to finish, it's going to be like at least one clock

1219
00:49:05,800 --> 00:49:06,200
usually.

1220
00:49:06,200 --> 00:49:08,100
Unless there's crazy Shenanigans going on in there.

1221
00:49:08,500 --> 00:49:13,000
So what that means is that the CPU can actually at least possibly do

1222
00:49:13,100 --> 00:49:16,900
one thing or possibly a couple things depending on the circumstances.

1223
00:49:17,600 --> 00:49:18,200
It can do.

1224
00:49:18,200 --> 00:49:25,700
One thing at that speed 3.2, you know 3.2 billion times a second.

1225
00:49:26,000 --> 00:49:29,300
So what I'm going to look at here, when I divided the speed of light

1226
00:49:29,600 --> 00:49:32,500
by that speed, which is 3.2 billion.

1227
00:49:33,200 --> 00:49:39,100
I wanted to see how fast does light go in the amount of time that it

1228
00:49:39,100 --> 00:49:43,500
would take the processor to do one thing and the answer was, you know,

1229
00:49:43,500 --> 00:49:45,000
something like nine centimeters.

1230
00:49:45,000 --> 00:49:47,800
Now, I suck at how resign and I also suck at math.

1231
00:49:47,900 --> 00:49:49,600
So I may have typed soon wrong or whatever.

1232
00:49:49,600 --> 00:49:52,400
But I think that's about right people out there who are good at math.

1233
00:49:52,400 --> 00:49:53,400
You're welcome to correct me.

1234
00:49:53,400 --> 00:49:55,500
One of the things that people often say is that people who are good at

1235
00:49:55,500 --> 00:49:55,600
can

1236
00:49:55,800 --> 00:49:57,200
Programming a good at math is not true.

1237
00:49:57,200 --> 00:49:58,300
I suck at man.

1238
00:49:58,500 --> 00:50:05,200
Anyway, if we go back to our ruler here, have that 99 is like there to

1239
00:50:05,200 --> 00:50:05,700
there.

1240
00:50:06,000 --> 00:50:07,300
That's the speed of light.

1241
00:50:07,400 --> 00:50:10,200
It's like, can only go from here to there in that time.

1242
00:50:10,200 --> 00:50:12,500
It can't even get back in the time.

1243
00:50:12,500 --> 00:50:14,300
It takes the CPU to do something.

1244
00:50:14,400 --> 00:50:14,900
Okay.

1245
00:50:15,300 --> 00:50:18,600
So when you count up all the actual logic that has to happen in the

1246
00:50:18,600 --> 00:50:21,500
fact that it's not a straight line and it's got to go through stuff in

1247
00:50:21,500 --> 00:50:22,000
here.

1248
00:50:22,000 --> 00:50:22,200
Right?

1249
00:50:22,200 --> 00:50:23,800
And it's got to go through stuff in here.

1250
00:50:24,100 --> 00:50:25,600
That's crazy expensive.

1251
00:50:25,800 --> 00:50:26,200
Civ.

1252
00:50:26,200 --> 00:50:30,300
Even if it all, even if there were, it was literally a part of photon

1253
00:50:30,500 --> 00:50:33,400
could not make it there and back in the time, it takes the processor

1254
00:50:33,400 --> 00:50:34,700
to actually do something.

1255
00:50:34,900 --> 00:50:38,000
And the reason that I think it's important for you to understand that

1256
00:50:38,000 --> 00:50:42,100
is because that is why memory is such a big deal in optimization.

1257
00:50:42,100 --> 00:50:46,200
Now, going out and getting things from memory is a huge deal.

1258
00:50:46,200 --> 00:50:49,700
And what to finish the story I have friends at Intel and one of the

1259
00:50:49,700 --> 00:50:52,600
things that I asked one of them to time, I just said, you know, why is

1260
00:50:52,600 --> 00:50:54,100
memory so slow?

1261
00:50:54,100 --> 00:50:55,700
Still why is memory such a

1262
00:50:55,800 --> 00:50:56,300
I'll neck.

1263
00:50:56,300 --> 00:50:57,600
What's the actual hang up?

1264
00:50:58,200 --> 00:50:59,800
And the answer that came back was?

1265
00:51:00,100 --> 00:51:03,100
Wires, they were like the amount of time.

1266
00:51:03,100 --> 00:51:04,300
It just it's physically.

1267
00:51:04,300 --> 00:51:08,400
Far away is the problem and you know, no surprise.

1268
00:51:08,400 --> 00:51:10,400
One of the things that people are working on technologically right

1269
00:51:10,400 --> 00:51:11,900
now, for future Generations CPUs.

1270
00:51:11,900 --> 00:51:12,900
I don't know if it will happen or not.

1271
00:51:12,900 --> 00:51:15,500
But certainly I think you know I'm video is doing it and Intel's doing

1272
00:51:15,500 --> 00:51:16,500
a bunch of people working on it.

1273
00:51:16,700 --> 00:51:20,300
It's something called stacked D Ram, which is basically Ram that sits

1274
00:51:20,300 --> 00:51:24,000
on the CPU so it doesn't have to go out here to get it.

1275
00:51:24,000 --> 00:51:28,100
And so the question is can they get sufficient amounts of ram, you

1276
00:51:28,100 --> 00:51:29,800
know stuck on this right on the CPU?

1277
00:51:30,000 --> 00:51:35,100
So that, that, that sort of speed can can be, can be improved.

1278
00:51:35,200 --> 00:51:35,700
Right?

1279
00:51:36,300 --> 00:51:39,600
And so what, I also want to say here is, I got another picture.

1280
00:51:39,600 --> 00:51:43,100
This is the same motherboard, but it's a rotated at 90 degrees and

1281
00:51:43,100 --> 00:51:45,900
placed the, the the ruler going the other way.

1282
00:51:46,200 --> 00:51:51,800
So, this piece right here, that thing that is where the graphics card

1283
00:51:51,800 --> 00:51:52,200
sits.

1284
00:51:52,300 --> 00:51:54,100
You plug the graphics card into their.

1285
00:51:54,400 --> 00:51:55,000
All right.

1286
00:51:55,000 --> 00:51:58,300
So if you want to send something to the graphics card, well you got to

1287
00:51:58,300 --> 00:51:59,800
do it's got to go out to the men.

1288
00:51:59,900 --> 00:52:03,900
We first probably unless there's direct bus stuff that happens to the

1289
00:52:03,900 --> 00:52:05,500
graphics card, which would be you know, here to here.

1290
00:52:05,500 --> 00:52:06,600
Let's say or something like that.

1291
00:52:06,600 --> 00:52:09,200
It's got to go out to the memory and then it's good.

1292
00:52:09,200 --> 00:52:10,400
Got to go to the graphics card.

1293
00:52:10,400 --> 00:52:12,700
Probably it's going to have to do some round trips there or if it

1294
00:52:12,700 --> 00:52:14,100
could do some kind of weird bus Mastery.

1295
00:52:14,100 --> 00:52:16,700
So I don't even like I said, don't know how our design not gonna

1296
00:52:16,700 --> 00:52:19,800
pretend I know but basically you're dealing with something that

1297
00:52:19,800 --> 00:52:23,600
operates in this triangle and that's huge again speed of light again,

1298
00:52:23,600 --> 00:52:24,500
huge problem.

1299
00:52:24,500 --> 00:52:29,200
So that is why you have also huge bottlenecks in terms of the speed at

1300
00:52:29,200 --> 00:52:29,600
which you can

1301
00:52:29,900 --> 00:52:32,800
Actually get something to the graphics card in back is also a huge

1302
00:52:32,800 --> 00:52:33,300
problem.

1303
00:52:33,400 --> 00:52:35,700
There's all these sorts of things that conspire against you when

1304
00:52:35,700 --> 00:52:38,000
you're talking about these physical separations and it makes things

1305
00:52:38,200 --> 00:52:38,900
pretty hard to do.

1306
00:52:38,900 --> 00:52:43,300
Now the the final thing I wanted to say before I move to the next

1307
00:52:43,300 --> 00:52:47,500
picture we've got here is there's two things to keep in mind.

1308
00:52:47,500 --> 00:52:49,200
I'm going to talk about them a lot in the mainstream.

1309
00:52:49,200 --> 00:52:51,800
So I'll explain them more later in a lot more detail, but there's two

1310
00:52:51,800 --> 00:52:55,200
things, one is called latency.

1311
00:52:56,300 --> 00:53:02,700
Look at the handwriting and two is called throughput, right?

1312
00:53:04,400 --> 00:53:06,700
Also closely related bandwidth.

1313
00:53:08,600 --> 00:53:12,500
These are words that you want to know, and what these basically do.

1314
00:53:12,500 --> 00:53:13,800
The reason that I'm just sort of bringing them up.

1315
00:53:13,800 --> 00:53:15,100
I'm not going to Define them right now.

1316
00:53:15,100 --> 00:53:15,400
Really.

1317
00:53:15,400 --> 00:53:16,600
I'm just gonna sort of throw it out.

1318
00:53:16,600 --> 00:53:20,800
There is that there's two things we might want to know when we start

1319
00:53:20,800 --> 00:53:23,100
talking about, man.

1320
00:53:23,100 --> 00:53:23,500
I got it.

1321
00:53:23,500 --> 00:53:25,000
I'm do a lot to erase that out.

1322
00:53:25,100 --> 00:53:26,100
So latency and bandwidth.

1323
00:53:26,100 --> 00:53:27,200
The reason Earth latency and throughput.

1324
00:53:27,200 --> 00:53:28,900
The reason we care about this because there's two things wouldn't want

1325
00:53:28,900 --> 00:53:31,200
to know, when we're talking about things like getting stuff around in

1326
00:53:31,200 --> 00:53:34,300
this magical triangle, whatever there's how long it would take to do

1327
00:53:34,300 --> 00:53:37,100
it round trip and that's latency, right?

1328
00:53:37,100 --> 00:53:38,100
There's basically how long it

1329
00:53:38,600 --> 00:53:42,000
For me to start something and finish it the same thing.

1330
00:53:42,700 --> 00:53:46,000
But as you might imagine, let's say I sent one thing off and I'm going

1331
00:53:46,000 --> 00:53:49,200
off to memory and I start that thing off and maybe that thing gets to

1332
00:53:49,200 --> 00:53:50,400
about here so far.

1333
00:53:50,500 --> 00:53:53,400
It's on its way there, but then I start another thing.

1334
00:53:53,700 --> 00:53:56,600
So by the time, the first thing gets to hear the second thing is now

1335
00:53:56,600 --> 00:53:59,700
here and then in so on right, I can basically, I can I

1336
00:54:00,000 --> 00:54:04,300
Send more than one thing out potentially before I actually get all the

1337
00:54:04,300 --> 00:54:04,800
things back.

1338
00:54:04,800 --> 00:54:08,300
So, by the time, this thing actually gets all the way around.

1339
00:54:08,300 --> 00:54:12,200
I could have had maybe hundreds of things going through this triangle

1340
00:54:12,200 --> 00:54:16,700
before I even get the first one back and that is the throughput part.

1341
00:54:16,700 --> 00:54:17,100
Right?

1342
00:54:17,100 --> 00:54:20,300
So latency is how long it takes one thing to get all the way around.

1343
00:54:20,400 --> 00:54:23,500
And that is basically, if you want to know, I need to go get a

1344
00:54:23,500 --> 00:54:26,400
particular location in memory right now, and I'm going to wait until

1345
00:54:26,400 --> 00:54:27,100
it comes back.

1346
00:54:27,400 --> 00:54:29,800
That is what will determine how fast that can happen.

1347
00:54:30,000 --> 00:54:32,700
Yeah, but there's other things where it's like, I got a ton of

1348
00:54:32,700 --> 00:54:33,500
different things in memory.

1349
00:54:33,500 --> 00:54:36,300
I gotta go get, I'm going to ask for a mall and then, as they come

1350
00:54:36,300 --> 00:54:39,600
back and start using them, then throughput becomes a thing, which is a

1351
00:54:39,600 --> 00:54:43,800
measure of how fast things can go through this at Peak congestion.

1352
00:54:43,800 --> 00:54:46,300
Basically, at when I'm shoving as many things through it.

1353
00:54:46,400 --> 00:54:48,400
How many of them can I get back a second basically?

1354
00:54:48,400 --> 00:54:52,300
Right, would be like the measure of the bandwidth of the memory,

1355
00:54:52,300 --> 00:54:52,800
right?

1356
00:54:52,900 --> 00:54:56,400
And so typically, what happens because the because of the fact that

1357
00:54:56,400 --> 00:54:59,700
the physical distances here are large, is that the latency is

1358
00:55:00,000 --> 00:55:03,800
For to memory, but the bandwidth, the throughput can actually be quite

1359
00:55:03,800 --> 00:55:06,100
good because we can just send lots of things down.

1360
00:55:06,100 --> 00:55:09,100
So we just make sure we design our memory to be able to send back tons

1361
00:55:09,100 --> 00:55:12,400
of things at once, tons, tons of things, you know, in cereal.

1362
00:55:12,500 --> 00:55:15,000
So that basically, when we asked for tons of things, we can get back,

1363
00:55:15,000 --> 00:55:18,500
tons of things, much more, you know, sort of in burst, right?

1364
00:55:19,000 --> 00:55:23,600
So overlapping, what we do with memory ends up being a big deal in

1365
00:55:23,600 --> 00:55:27,300
programming specifically, because this physical distance part makes it

1366
00:55:27,300 --> 00:55:29,600
so that the latency is always bad.

1367
00:55:30,000 --> 00:55:33,400
But the throughput can go up over time and memory can get faster

1368
00:55:33,500 --> 00:55:34,000
throughput.

1369
00:55:34,000 --> 00:55:37,600
Even as the latency cannot improve because the because of the speed of

1370
00:55:37,600 --> 00:55:40,000
light barriers is like that because there's just nothing you can do to

1371
00:55:40,000 --> 00:55:41,000
speed it up, right?

1372
00:55:41,100 --> 00:55:42,400
And again, not a highway engineer.

1373
00:55:42,700 --> 00:55:44,000
It's not a great explanation.

1374
00:55:44,100 --> 00:55:46,400
It's just enough to allow you to think about it.

1375
00:55:46,600 --> 00:55:48,800
And I would highly encourage people that are interested in this sort

1376
00:55:48,800 --> 00:55:52,800
of stuff to go read online, do some searches search on Google and just

1377
00:55:52,800 --> 00:55:54,100
sort of explore yourself.

1378
00:55:54,300 --> 00:55:56,900
And you can probably find some good resources that go into more detail

1379
00:55:56,900 --> 00:55:59,800
and get the and get the specifics of this more right than I am.

1380
00:56:00,300 --> 00:56:04,400
About like exactly what's happening on say, a modern card last picture

1381
00:56:04,400 --> 00:56:08,000
for the day, and then we will go to the Q&A will close.

1382
00:56:08,000 --> 00:56:08,700
These guys.

1383
00:56:09,900 --> 00:56:13,200
This is the CPU itself.

1384
00:56:13,200 --> 00:56:17,100
This is a picture of What's called the dye and the dye is basically

1385
00:56:17,100 --> 00:56:19,600
the actual CPU, as it exists.

1386
00:56:19,600 --> 00:56:21,400
When Intel Fabs, the thing.

1387
00:56:21,400 --> 00:56:23,000
This is basically like some kind of a weird.

1388
00:56:23,000 --> 00:56:26,000
I don't even know, electron microscope or some kind of fancy mess up

1389
00:56:26,000 --> 00:56:26,400
by not.

1390
00:56:26,400 --> 00:56:27,400
That's not that magnified.

1391
00:56:27,400 --> 00:56:27,800
I don't know.

1392
00:56:28,000 --> 00:56:29,100
This is some low-res thing.

1393
00:56:29,100 --> 00:56:29,800
I downloaded off.

1394
00:56:29,900 --> 00:56:34,100
The Tom's Hardware basically, it's basically what an Intel chip looks

1395
00:56:34,100 --> 00:56:37,100
like, and that's maybe a little bit too to zoom.

1396
00:56:37,100 --> 00:56:38,900
This is what an Intel chip looks like nowadays.

1397
00:56:39,500 --> 00:56:42,100
And I want to talk to you just real quickly about what some of this

1398
00:56:42,100 --> 00:56:43,900
stuff is and why you care.

1399
00:56:44,000 --> 00:56:46,200
Now, on the chip itself.

1400
00:56:46,300 --> 00:56:47,900
These are basically the sections of the chip.

1401
00:56:47,900 --> 00:56:48,700
You can see the korres.

1402
00:56:48,700 --> 00:56:53,600
This is a four core machine, core core, core core.

1403
00:56:53,700 --> 00:56:55,700
And so, remember, I talked about the very first day.

1404
00:56:55,700 --> 00:56:57,900
I think I talked about the fact that a single processor can actually

1405
00:56:57,900 --> 00:56:59,800
have many logical pieces.

1406
00:57:00,000 --> 00:57:02,200
Which are actually operating as if they were separate processors in

1407
00:57:02,200 --> 00:57:02,800
some sense.

1408
00:57:02,900 --> 00:57:04,000
And that's what these cores are.

1409
00:57:04,000 --> 00:57:07,000
They are capable of running processes, totally in parallel, but don't

1410
00:57:07,000 --> 00:57:09,600
really have to wait for each other or swap things in and out.

1411
00:57:09,600 --> 00:57:11,500
Each one of these things can be executing stuff the time.

1412
00:57:12,300 --> 00:57:16,200
So each one of these cores has two things on it that are

1413
00:57:16,200 --> 00:57:17,000
memory-related.

1414
00:57:17,100 --> 00:57:20,500
It has something called an L1 cache and it has something called an L2

1415
00:57:20,500 --> 00:57:21,000
cache.

1416
00:57:21,000 --> 00:57:22,700
And those stand for level level.

1417
00:57:22,700 --> 00:57:23,800
One is closest.

1418
00:57:23,900 --> 00:57:26,900
Level 2 is a little further away and then there's this thing out here

1419
00:57:26,900 --> 00:57:29,900
called L3 cache which is the level 3 cache and the

1420
00:57:30,000 --> 00:57:32,600
and I want to bring these up just briefly before we end the stream is

1421
00:57:32,600 --> 00:57:37,500
because since that memory latency is so huge that time that it takes

1422
00:57:37,500 --> 00:57:39,000
to go out and get something back.

1423
00:57:39,300 --> 00:57:42,600
One of the things that processors try to do nowadays, is they try to

1424
00:57:42,600 --> 00:57:44,000
minimize the amount of time.

1425
00:57:44,000 --> 00:57:47,500
They actually have to ever talk to it and they want to be able to do a

1426
00:57:47,500 --> 00:57:50,200
lot of the work they do without ever actually talking the memory.

1427
00:57:50,400 --> 00:57:54,200
So what they've always done since for a very long time, is they've had

1428
00:57:54,200 --> 00:57:56,800
these caches, which are essentially sort of like, the Stacked dram

1429
00:57:56,800 --> 00:57:57,000
thing.

1430
00:57:57,000 --> 00:57:57,700
I was talking about.

1431
00:57:57,700 --> 00:57:59,900
They're not, they aren't stuck to beer am, but there's

1432
00:58:00,000 --> 00:58:00,800
Of the same thing.

1433
00:58:00,800 --> 00:58:03,800
They're pieces of memory that are right on the chip.

1434
00:58:03,800 --> 00:58:06,300
So they can be much much faster because the physical difference, the

1435
00:58:06,300 --> 00:58:10,500
physical distance between the core and the actual storage for the B is

1436
00:58:10,500 --> 00:58:11,300
much closer.

1437
00:58:11,500 --> 00:58:15,400
And so what can happen is when a piece of when a core needs to access

1438
00:58:15,400 --> 00:58:15,900
piece of memory.

1439
00:58:15,900 --> 00:58:17,600
It will ask this L3 cache.

1440
00:58:17,700 --> 00:58:18,600
Do you have it?

1441
00:58:18,700 --> 00:58:21,900
And if the L3 cache says yes, it just gets it from the L3 cache.

1442
00:58:22,100 --> 00:58:25,000
If it doesn't then it will have to go out to memory and that's what

1443
00:58:25,000 --> 00:58:26,300
this memory controller pieces here.

1444
00:58:26,300 --> 00:58:28,800
The memory controller will go ask for it and go get it out.

1445
00:58:29,900 --> 00:58:33,100
But a lot of times it can just fit in the L3 cache things that stay in

1446
00:58:33,100 --> 00:58:35,400
the L3, Cache can be much much faster because I read on the Chip And

1447
00:58:35,400 --> 00:58:36,500
they never have to go to the main memory.

1448
00:58:36,500 --> 00:58:40,000
Similarly, the L2 cache in L1 caches, which are on each individual

1449
00:58:40,000 --> 00:58:42,200
core are even faster than that.

1450
00:58:42,500 --> 00:58:45,800
And so, basically, what they are is, they're these sort of L1 cache is

1451
00:58:45,800 --> 00:58:46,400
pretty small.

1452
00:58:46,400 --> 00:58:49,000
L2, caches little bigger L3, caches bigger still.

1453
00:58:49,200 --> 00:58:52,800
I think it healthy caches 8 MB now on a chip.

1454
00:58:52,800 --> 00:58:53,500
Probably, I don't know.

1455
00:58:53,500 --> 00:58:56,000
Depends on the chip obviously, but there's, you know, that's a, that's

1456
00:58:56,000 --> 00:58:58,300
a ballpark size that it might be on a modern ship.

1457
00:58:59,100 --> 00:58:59,800
And so, basically, this

1458
00:58:59,900 --> 00:59:05,400
Cascading series of local storage that you can use in order to make it

1459
00:59:05,400 --> 00:59:08,200
so that you don't have to constantly pay that huge memory hit.

1460
00:59:08,200 --> 00:59:10,500
And so, one of the things that we're also going to have to think about

1461
00:59:10,500 --> 00:59:13,600
when we do the mainstream, when we do the handmade hero stream is

1462
00:59:13,600 --> 00:59:16,000
where constant have to be aware of, what's in the L1 cache?

1463
00:59:16,000 --> 00:59:19,400
What's in the L2 cache and what's in the L3 cache and there's limited

1464
00:59:19,400 --> 00:59:22,600
things we can do to figure out exactly what's going on there because

1465
00:59:22,600 --> 00:59:25,000
we don't have the ability to really inspect that much of the CPU, but

1466
00:59:25,000 --> 00:59:26,800
there are things like performance counters and stuff.

1467
00:59:26,800 --> 00:59:29,900
We can use to see how often we are working.

1468
00:59:29,900 --> 00:59:33,000
Going inside those caches and how often were failing in that sort of

1469
00:59:33,000 --> 00:59:33,200
stuff.

1470
00:59:33,200 --> 00:59:35,700
And we can also tell by how long our program takes to run.

1471
00:59:35,700 --> 00:59:40,100
A lot of times how badly it is doing utilizing those caches.

1472
00:59:40,400 --> 00:59:42,300
So I won't go into too much detail there.

1473
00:59:42,300 --> 00:59:45,400
That's really all I want to say is want to make you aware of it, but

1474
00:59:45,400 --> 00:59:47,800
that's basically how the memory structure works.

1475
00:59:47,900 --> 00:59:51,600
And so these things are not additional memory these caches for your

1476
00:59:51,600 --> 00:59:52,200
machine.

1477
00:59:52,300 --> 00:59:55,000
They are, you know, there are additional storage in that sense, but

1478
00:59:55,000 --> 00:59:56,500
they actually don't represent more memory.

1479
00:59:56,500 --> 00:59:59,700
What they represent is basically places where you can store

1480
01:00:00,000 --> 01:00:04,000
Copy of what is in the main memory or will be later in the main memory

1481
01:00:04,200 --> 01:00:06,500
in a local way that you can quickly access.

1482
01:00:06,600 --> 01:00:10,500
And then it later it gets dumped out to that main memory it gets

1483
01:00:10,500 --> 01:00:11,200
spilled out there.

1484
01:00:11,400 --> 01:00:14,400
And so, you know, so that's basically how memory actually works.

1485
01:00:14,400 --> 01:00:17,600
Is it always goes through this, this kind of caching scheme and to

1486
01:00:17,600 --> 01:00:18,000
some level.

1487
01:00:18,000 --> 01:00:20,300
You can even think of there being even bigger catching, seems you can

1488
01:00:20,300 --> 01:00:23,300
think of it as, as sort of this huge tear of memory.

1489
01:00:23,800 --> 01:00:29,600
We're basically what you're doing, you know, I might, if I may use my

1490
01:00:29,600 --> 01:00:29,800
Mac,

1491
01:00:30,000 --> 01:00:33,900
Mad gimp skills here, to expand this image.

1492
01:00:33,900 --> 01:00:35,300
I know this is, this is crazy.

1493
01:00:35,300 --> 01:00:36,100
What we're doing here?

1494
01:00:36,600 --> 01:00:39,200
Full crazy, but I'm going to try it.

1495
01:00:39,300 --> 01:00:40,600
I'm going to totally try it.

1496
01:00:40,900 --> 01:00:41,400
Here we go.

1497
01:00:41,900 --> 01:00:45,200
So what happens here is, you know, inside the core is right.

1498
01:00:45,200 --> 01:00:47,100
Let's say there's the L1 cache, right?

1499
01:00:47,100 --> 01:00:48,800
That's not, you can't see that Casey.

1500
01:00:48,800 --> 01:00:49,400
What are you doing?

1501
01:00:49,400 --> 01:00:50,200
That's the wrong color.

1502
01:00:50,200 --> 01:00:51,100
Let's go to here.

1503
01:00:51,300 --> 01:00:51,800
All right.

1504
01:00:52,400 --> 01:00:55,500
So there's the L1 cache in this core and there's an L2 cache in this

1505
01:00:55,500 --> 01:00:58,600
core and then the Z L3 cache which is here and then there's main

1506
01:00:58,600 --> 01:00:59,800
memory, right?

1507
01:01:01,300 --> 01:01:02,100
Which is here.

1508
01:01:03,100 --> 01:01:04,400
Main ma'am.

1509
01:01:05,200 --> 01:01:07,900
Okay, so the court needs to access piece of memory.

1510
01:01:07,900 --> 01:01:10,200
Last the L1 cache L1 cache doesn't have it as 2.

1511
01:01:10,200 --> 01:01:12,900
L 2 cache, L2 cache and L3 caches and have it either.

1512
01:01:13,000 --> 01:01:16,800
It has two main memory to get it, the main memory, right?

1513
01:01:17,000 --> 01:01:20,100
We'll return it back and go through these caches but there's even an

1514
01:01:20,100 --> 01:01:20,900
additional layer.

1515
01:01:20,900 --> 01:01:24,000
We could think about, I told you about the virtual memory, right?

1516
01:01:24,000 --> 01:01:25,000
And the physical memory.

1517
01:01:25,000 --> 01:01:27,000
This is physical, right?

1518
01:01:27,100 --> 01:01:30,200
There's another thing here, which is the hard drive, right?

1519
01:01:30,200 --> 01:01:32,800
There's the actual hard drive or the SD drive from the computer.

1520
01:01:33,000 --> 01:01:34,900
The actual Drive, the store stuff.

1521
01:01:35,200 --> 01:01:38,700
It could be that the operating system never actually met this thing

1522
01:01:38,700 --> 01:01:39,600
into physical memory.

1523
01:01:39,600 --> 01:01:42,700
It had a victim it for some reason, and it actually started out to the

1524
01:01:42,700 --> 01:01:43,400
hard drive.

1525
01:01:43,400 --> 01:01:47,700
And in that case, instead of the core ever, even actually going

1526
01:01:47,700 --> 01:01:48,900
through this process yet.

1527
01:01:48,900 --> 01:01:51,600
It's going to have two operating systems going to have to raise.

1528
01:01:51,900 --> 01:01:53,400
It will actually happen to CPU.

1529
01:01:53,500 --> 01:01:56,700
Will notice that the page is not even resident in memory anymore?

1530
01:01:56,700 --> 01:01:58,000
Through the virtual memory system.

1531
01:01:58,700 --> 01:02:01,900
It's the operating system will intercede using some kind of an

1532
01:02:01,900 --> 01:02:02,800
interrupt or something.

1533
01:02:02,800 --> 01:02:05,200
You know, I don't even pretend to know exactly how Windows does he

1534
01:02:05,200 --> 01:02:05,400
think.

1535
01:02:05,400 --> 01:02:08,600
So, basically, it will cause some kind of a an exception that it will

1536
01:02:08,600 --> 01:02:11,600
then go and the operation will take over, it will go out to the hard

1537
01:02:11,600 --> 01:02:12,100
drive.

1538
01:02:12,200 --> 01:02:15,100
It'll bring that page into main memory, right?

1539
01:02:15,200 --> 01:02:18,600
It'll then go back and allow your private place to keep running.

1540
01:02:18,600 --> 01:02:21,900
At which point you can fill the L3 cache in the L2 and L1 caches.

1541
01:02:22,700 --> 01:02:24,800
There's a thing called inclusivity here, which may determine which

1542
01:02:24,800 --> 01:02:27,300
one's those get filled and tons of other details, but you get the

1543
01:02:27,300 --> 01:02:27,900
idea.

1544
01:02:28,500 --> 01:02:31,600
I won't belabor the point that the, there's just this huge sort of

1545
01:02:31,600 --> 01:02:33,100
again, Russian nesting doll of memory.

1546
01:02:33,100 --> 01:02:35,500
That's each one's a different speed and they get slower and slower as

1547
01:02:35,500 --> 01:02:35,900
you go.

1548
01:02:35,900 --> 01:02:37,300
And if you have to spill out to the hard drive.

1549
01:02:37,300 --> 01:02:38,500
Well, that's a huge bad news.

1550
01:02:38,500 --> 01:02:41,200
So we never ever want to do that in a performance application.

1551
01:02:41,200 --> 01:02:42,300
If we can, if we can avoid it.

1552
01:02:42,300 --> 01:02:45,100
We always want to at least be going to main memory and hopefully want

1553
01:02:45,100 --> 01:02:46,800
to be in these caches as often as we can.

1554
01:02:47,300 --> 01:02:51,800
So hopefully that's given you a little taste of how your, how your CPU

1555
01:02:51,800 --> 01:02:52,100
works.

1556
01:02:52,100 --> 01:02:53,500
And we've related back here.

1557
01:02:53,500 --> 01:02:54,900
Hopefully, you understood the stuff.

1558
01:02:54,900 --> 01:02:58,300
I was showing you with the memory, how, you know, it's

1559
01:02:58,500 --> 01:02:58,700
All stuff.

1560
01:02:58,700 --> 01:02:59,900
You can inspect and that memory.

1561
01:03:00,000 --> 01:03:02,500
Is just the memory in your machine and the virtual address space is

1562
01:03:02,500 --> 01:03:05,100
something that gets mapped and translated by the CPU.

1563
01:03:05,100 --> 01:03:06,000
So you've seen it all today.

1564
01:03:06,000 --> 01:03:09,500
You've basically seen everything and everything.

1565
01:03:09,500 --> 01:03:12,700
I'm going to do, even in the two streams for the practice streams, for

1566
01:03:12,700 --> 01:03:13,400
Saturday, and Sunday.

1567
01:03:13,600 --> 01:03:15,000
Everything I'm going to do from now.

1568
01:03:15,000 --> 01:03:18,500
On is just how we manipulate that memory, every last thing,

1569
01:03:18,500 --> 01:03:19,000
everything.

1570
01:03:19,000 --> 01:03:20,500
It's all about that.

1571
01:03:20,500 --> 01:03:25,300
So I hope that is something that that you will keep in mind and that

1572
01:03:25,300 --> 01:03:26,800
will be easy for you to relate to.

1573
01:03:26,800 --> 01:03:28,500
As we get more comfortable with it.

1574
01:03:28,500 --> 01:03:30,000
It'll just be something that you just think about it.

1575
01:03:30,000 --> 01:03:31,700
And no, and you won't really have to worry about us.

1576
01:03:31,700 --> 01:03:34,300
Be part of your daily programming in and you'll be good.

1577
01:03:34,600 --> 01:03:36,000
So, thank you, everybody.

1578
01:03:36,000 --> 01:03:40,200
We've got 230 people, I guess here, which is crazy.

1579
01:03:40,200 --> 01:03:43,700
I even this was not the regular scheduled time because on Monday, I'm

1580
01:03:43,700 --> 01:03:46,900
in Friday's I think I'm going to probably move the the times around to

1581
01:03:46,900 --> 01:03:49,100
give people another times as a chance and also because, you know, if I

1582
01:03:49,100 --> 01:03:53,500
want to go out with my wife on Friday night, for example, I want to

1583
01:03:53,500 --> 01:03:54,700
have nights free occasionally.

1584
01:03:54,700 --> 01:03:57,600
So, so if that in the schedule time and all these people showed up,

1585
01:03:57,600 --> 01:03:58,300
that was amazing.

1586
01:03:58,300 --> 01:03:59,500
Thank you so much for coming.

1587
01:04:00,000 --> 01:04:02,600
It's been a real pleasure talking about this stuff with you.

1588
01:04:02,700 --> 01:04:05,100
And if you'd like to stick around for the Q&A, I'm going to do about.

1589
01:04:05,200 --> 01:04:09,100
I'm going to end the Q&A at 7:30, but I will be happy to do about 20

1590
01:04:09,100 --> 01:04:10,000
minutes of Q&A.

1591
01:04:10,000 --> 01:04:11,900
So I'm going to stop the recording and I'm going to start it again,

1592
01:04:11,900 --> 01:04:14,600
but for those of you who are on the stream of wanna stick around for

1593
01:04:14,600 --> 01:04:16,500
the Q&A, please.

1594
01:04:16,900 --> 01:04:21,700
I found that's much easier said, please go at senior ettore, just type

1595
01:04:21,700 --> 01:04:23,600
in at senior ettore Hoops.

1596
01:04:23,700 --> 01:04:24,900
See if I can actually get that somewhere.

1597
01:04:24,900 --> 01:04:27,100
That's easier to see on the chat.

1598
01:04:27,100 --> 01:04:29,600
Please do at senior ettore to

1599
01:04:30,000 --> 01:04:31,800
label something as a question because people like to talk to

1600
01:04:31,800 --> 01:04:32,200
themselves.

1601
01:04:32,200 --> 01:04:33,700
It makes it hard for me to scan for the questions.

1602
01:04:33,700 --> 01:04:35,500
So please do that.

1603
01:04:35,500 --> 01:04:39,700
So I will see it and we will start that right now, okay.

