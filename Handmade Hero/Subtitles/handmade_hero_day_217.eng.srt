1
00:00:00,000 --> 00:00:00,900
Start recording.

2
00:00:02,000 --> 00:00:04,000
Hello everyone and welcome to handmade hero.

3
00:00:04,000 --> 00:00:08,000
The show where we code a complete game live on stream occasionally

4
00:00:08,000 --> 00:00:13,000
after eating way too many of the little candy egg things that I was

5
00:00:13,000 --> 00:00:14,600
eating on the free stream.

6
00:00:15,500 --> 00:00:18,900
It is true that I tend to eat those to excess.

7
00:00:19,000 --> 00:00:21,400
That is why it's pretty good that they're only available in the United

8
00:00:21,400 --> 00:00:24,900
States during Christmas and Easter used to only be available during

9
00:00:24,900 --> 00:00:25,300
Easter.

10
00:00:25,300 --> 00:00:29,900
Now they're available during both Christmas and Easter and as a

11
00:00:30,000 --> 00:00:30,400
Results.

12
00:00:30,400 --> 00:00:34,100
That means I get twice as fat as I used to get but what are you gonna

13
00:00:34,100 --> 00:00:34,300
do?

14
00:00:34,300 --> 00:00:39,300
That's just the reality of the situation and after all this is America

15
00:00:39,600 --> 00:00:43,000
where we are very fat and unhealthy.

16
00:00:43,000 --> 00:00:46,100
So I feel like at the end of the day I'm just doing my part to

17
00:00:46,100 --> 00:00:55,000
maintain our high average rate as a country that said today, on

18
00:00:55,000 --> 00:00:59,400
handmade hero, we're going to go ahead and finish our memory handling

19
00:00:59,400 --> 00:00:59,800
for

20
00:01:00,000 --> 00:01:04,400
Our debug code, which we pretty much got into position of almost

21
00:01:04,400 --> 00:01:05,200
finishing yesterday.

22
00:01:05,200 --> 00:01:08,300
We did the first part of it, but yesterday, I talked a bunch about

23
00:01:08,300 --> 00:01:10,300
stuff and so we didn't have that much programming time.

24
00:01:10,800 --> 00:01:13,800
So today, I want to go ahead and finish that up and then we can start

25
00:01:13,800 --> 00:01:17,300
to move on to cleaning up the UI for our debug stuff as well.

26
00:01:18,000 --> 00:01:21,600
Because then I think we just have our debug system running fairly

27
00:01:21,800 --> 00:01:24,200
fairly cleanly at that point behind the scenes.

28
00:01:24,200 --> 00:01:26,400
And so we just have to start cleaning up the actual way.

29
00:01:26,400 --> 00:01:29,000
It's displayed also Martin's Mosaic.

30
00:01:29,000 --> 00:01:29,800
Oh, I don't know how to pronounce

31
00:01:29,900 --> 00:01:33,200
Is his name, I have never known but you may know him as the person who

32
00:01:33,200 --> 00:01:36,200
answers, like literally all of your questions on the handmade hero

33
00:01:36,200 --> 00:01:36,800
forums.

34
00:01:37,300 --> 00:01:40,400
He also pointed out that the version of Visual Studio that we're

35
00:01:40,400 --> 00:01:47,200
using, which is visual studio 2013, I guess doesn't actually create

36
00:01:47,200 --> 00:01:48,500
thread safe code for.

37
00:01:48,500 --> 00:01:53,100
Static static variables 2015 does but 2013 does not.

38
00:01:53,500 --> 00:01:56,100
And so we also have to decide what we may want to do about that

39
00:01:56,200 --> 00:01:59,800
because we did want to use static variables, we

40
00:02:00,000 --> 00:02:03,100
Don't use static variables in any of our actual game code, but we do

41
00:02:03,100 --> 00:02:06,200
use it in the debug code to try and avoid doing lookups all the time.

42
00:02:07,400 --> 00:02:10,100
And so that code is something that we may have to consider as well.

43
00:02:10,100 --> 00:02:14,400
That's sort of a separate issue that we may want to look at as just in

44
00:02:14,400 --> 00:02:15,800
terms of how things work.

45
00:02:15,900 --> 00:02:18,600
Now, we may not care because at the end of the day it's just the debug

46
00:02:18,600 --> 00:02:18,800
code.

47
00:02:18,800 --> 00:02:21,100
So if we have some kind of a weird race condition where a debug

48
00:02:21,100 --> 00:02:24,000
variable gets added twice or something like this happens, we may just

49
00:02:24,000 --> 00:02:26,300
decide that that's not really that big of a deal and we don't care,

50
00:02:26,300 --> 00:02:29,200
but we should at least make the decision that we don't care.

51
00:02:29,200 --> 00:02:29,800
We shouldn't just

52
00:02:29,900 --> 00:02:30,600
Art of Let It language.

53
00:02:30,600 --> 00:02:33,100
So that's also something we should probably take a look at at some

54
00:02:33,100 --> 00:02:33,400
point.

55
00:02:33,400 --> 00:02:36,900
Now, I will remind you today is day to 17 so if you are following

56
00:02:36,900 --> 00:02:39,100
along at home and you are someone who has pre-order the game on a

57
00:02:39,100 --> 00:02:43,500
meter, a tour and you want a phone source code day, 216 source code.

58
00:02:43,500 --> 00:02:47,300
That is a source code that you want to be following along with today.

59
00:02:47,300 --> 00:02:51,800
Now, if I remember correctly, where we left off yesterday was just

60
00:02:51,800 --> 00:02:56,300
that we will hit our assertion about not being able.

61
00:02:57,200 --> 00:02:59,400
To actually do any of the freeing of the memory.

62
00:03:00,000 --> 00:03:02,800
Wanted to do it so you can see the game kind of running here.

63
00:03:02,800 --> 00:03:06,500
It starts to fill up the debug before the debug buffer gets filled and

64
00:03:06,500 --> 00:03:09,100
then we get our assertion fires right here.

65
00:03:10,400 --> 00:03:12,600
When when it actually tries to go get the memory.

66
00:03:12,600 --> 00:03:15,800
So for those of you who may have forgotten what was supposed to be

67
00:03:15,800 --> 00:03:18,800
happening here, what's going on, is just as the debug buffer, fills

68
00:03:18,800 --> 00:03:19,100
up.

69
00:03:19,100 --> 00:03:22,000
When it tries to first time, it tries to allocate memory, that would

70
00:03:22,000 --> 00:03:23,400
overflow that debug buffer.

71
00:03:23,400 --> 00:03:26,000
So it goes to the overdose, I need this much memory and the above

72
00:03:26,000 --> 00:03:29,300
offer doesn't have that much memory in it at that point.

73
00:03:29,900 --> 00:03:32,600
Then what happens is we try to free stuff?

74
00:03:32,600 --> 00:03:35,200
And so this is our little routine here that was supposed to free

75
00:03:35,200 --> 00:03:35,900
variable groups.

76
00:03:35,900 --> 00:03:39,400
It does not currently free variable groups, it just asserts and that

77
00:03:39,400 --> 00:03:39,900
is why.

78
00:03:40,000 --> 00:03:42,500
Sir fired, right?

79
00:03:42,700 --> 00:03:44,700
So let's go ahead and push through that.

80
00:03:44,700 --> 00:03:47,400
So here is our free variable group situation.

81
00:03:47,400 --> 00:03:48,500
It's not in that file.

82
00:03:49,300 --> 00:03:53,000
Here's our free variable group, and if we take a look at how debug

83
00:03:53,000 --> 00:03:58,200
variable group actually is implemented, we should be be able to see

84
00:03:58,500 --> 00:04:02,300
fairly immediately how that is supposed to occur.

85
00:04:02,600 --> 00:04:05,300
Now, like I said, it's a little bit janky.

86
00:04:05,500 --> 00:04:09,900
What I, you know, I'm a little bit torn, I kind of feel like, maybe we

87
00:04:10,000 --> 00:04:12,400
I want to just actually kind of rewrite, a little bit of this stuff or

88
00:04:12,400 --> 00:04:14,600
rather clean this stuff up a little bit, as we do it.

89
00:04:14,600 --> 00:04:16,800
Instead of writing the free, then changing it.

90
00:04:16,800 --> 00:04:18,500
And then rewriting the free basically.

91
00:04:19,700 --> 00:04:22,400
Because what I was saying yesterday, is that really these debug

92
00:04:22,400 --> 00:04:23,200
variable groups?

93
00:04:23,400 --> 00:04:26,900
That part of it is really a standing structure and its really the

94
00:04:26,900 --> 00:04:31,000
debug events themselves that are the part that needs to get freed

95
00:04:31,000 --> 00:04:32,300
overtime, right?

96
00:04:33,000 --> 00:04:37,300
And so really that part of it is kind of why I was sort of saying, you

97
00:04:37,300 --> 00:04:39,900
know, I think maybe we want to sort of

98
00:04:40,000 --> 00:04:43,900
Do that part because free variable group honestly isn't something

99
00:04:43,900 --> 00:04:45,900
that's ever really probably going to happen.

100
00:04:46,100 --> 00:04:47,500
Free variable group is not it.

101
00:04:47,500 --> 00:04:50,500
It's going to be freeing these debug event pieces.

102
00:04:50,500 --> 00:04:54,300
Of information is really what's actually going to be getting Freed at

103
00:04:54,300 --> 00:04:55,200
the end of the day.

104
00:04:55,800 --> 00:05:00,700
So I'm just trying to think about how exactly want to do that, how we

105
00:05:00,700 --> 00:05:05,600
want to sort of move towards that kind of a structure for things and

106
00:05:06,500 --> 00:05:07,200
and so, I don't know.

107
00:05:07,400 --> 00:05:09,800
So maybe you know what we'll do is just do that.

108
00:05:10,000 --> 00:05:10,300
Part of it.

109
00:05:10,300 --> 00:05:13,000
First, we'll jump ahead a little bit and then jump back instead of

110
00:05:13,000 --> 00:05:15,000
kind of finishing this up, which is what I was kind of thinking.

111
00:05:15,100 --> 00:05:17,200
Now that I'm looking at it, I'm like, well, you know, probably we

112
00:05:17,200 --> 00:05:18,100
don't really want to do that.

113
00:05:18,100 --> 00:05:21,000
We want to finish this part up first and then finish the other part

114
00:05:21,000 --> 00:05:21,200
up.

115
00:05:22,000 --> 00:05:24,600
All right, so what I was saying before you remember, this was kind of

116
00:05:24,600 --> 00:05:26,900
a little bit, I'm going to call an epiphany because it was just

117
00:05:26,900 --> 00:05:29,300
working through an architectural problem in the way that you do.

118
00:05:29,900 --> 00:05:34,700
But the realization was that linking sort of considering the structure

119
00:05:34,700 --> 00:05:37,800
of things to be baked into the frame was stupid.

120
00:05:37,800 --> 00:05:39,800
What we actually want is the structure of things too.

121
00:05:40,000 --> 00:05:44,500
Be a persistent concept that's built up in understood globally in the

122
00:05:44,500 --> 00:05:45,400
debug system.

123
00:05:45,800 --> 00:05:52,100
And then On Any Given frame, we just have the data for the values that

124
00:05:52,100 --> 00:05:55,100
those things took on at that time, right?

125
00:05:55,100 --> 00:05:58,300
That's what we actually want to have happen.

126
00:05:58,600 --> 00:05:59,900
And so that's what we're trying.

127
00:06:00,300 --> 00:06:01,700
Make work here.

128
00:06:02,000 --> 00:06:05,100
And so that means really this stuff is all totally fine.

129
00:06:06,400 --> 00:06:08,700
And it's really just this part that has to change.

130
00:06:09,000 --> 00:06:13,500
And then the main difference is just going to be that in here when we

131
00:06:13,500 --> 00:06:15,100
had debug frame, right?

132
00:06:15,100 --> 00:06:17,800
And you know in here we've got kind of have the super frame thing

133
00:06:18,400 --> 00:06:22,700
instead of the root grouping and here it's really just a question of

134
00:06:22,700 --> 00:06:27,300
kind of pulling back a little bit and and putting it back in the debug

135
00:06:27,300 --> 00:06:29,300
state which is actually where it used to be right.

136
00:06:29,300 --> 00:06:31,000
Just putting it back in there and going.

137
00:06:31,000 --> 00:06:33,500
All right this route group that we had in here before.

138
00:06:33,500 --> 00:06:35,600
In fact you can still see the variable was still there writing though.

139
00:06:35,600 --> 00:06:36,100
I don't think it's actually

140
00:06:36,400 --> 00:06:38,100
So being used for anything at the moment.

141
00:06:38,600 --> 00:06:42,000
If we just make the route group exists in there, permanently then that

142
00:06:42,000 --> 00:06:43,900
takes care of the hierarchy, part of things.

143
00:06:44,000 --> 00:06:47,300
And we never actually free the hierarchy, the hierarchy, just grows to

144
00:06:47,300 --> 00:06:50,600
the point where it contains all the possible debug points that exist

145
00:06:50,600 --> 00:06:52,500
in the program, which is not that many right?

146
00:06:52,500 --> 00:06:55,500
It's a finite number of them that are just existing, you know, in the,

147
00:06:55,500 --> 00:06:58,800
in the code where we've said, please give us some debug coverage here.

148
00:07:04,200 --> 00:07:07,100
And after we do that, right?

149
00:07:08,800 --> 00:07:11,000
Then what we want to do is have some way.

150
00:07:11,000 --> 00:07:12,700
So we've got that debug hierarchy.

151
00:07:13,400 --> 00:07:16,300
What we want to do is have some way of having these debug events, sort

152
00:07:16,300 --> 00:07:19,500
of Stack up in one of those, right?

153
00:07:19,500 --> 00:07:24,300
So if we have, you know, we almost have like sort of this this concept

154
00:07:24,300 --> 00:07:29,000
like I said of the of a debug element, which is really just like.

155
00:07:29,000 --> 00:07:32,800
Okay, I've got some number of events in here and like I said, I don't

156
00:07:32,800 --> 00:07:33,000
really

157
00:07:33,100 --> 00:07:42,200
You know exactly how we want this to work per se but you know, just if

158
00:07:42,200 --> 00:07:45,700
you imagine the simplest possible thing, you could imagine us,

159
00:07:45,700 --> 00:07:48,900
literally just chaining these events together and then sort of pulling

160
00:07:48,900 --> 00:07:51,700
them out as we start to free things, we'd pull them out.

161
00:07:53,400 --> 00:07:54,700
That's the simplest possible thing.

162
00:07:54,800 --> 00:07:56,800
You could also Imagine keeping a race here.

163
00:07:56,900 --> 00:08:01,000
I'm not sure what the, you know, the what the best way to do that is

164
00:08:01,000 --> 00:08:02,900
I'm not sure which is the way that we want to do.

165
00:08:03,100 --> 00:08:06,400
It but we do know what we actually want to have happen.

166
00:08:06,800 --> 00:08:11,600
So what we want to have happen is when we go to free memory, you know.

167
00:08:11,600 --> 00:08:14,200
Because so let's say we have one of these devotee book variable links

168
00:08:14,200 --> 00:08:14,900
here, right?

169
00:08:14,900 --> 00:08:17,200
And that's the standing structure that contains the UI.

170
00:08:17,200 --> 00:08:21,400
It's, you know, it's so so these are like this, the sort of the UI

171
00:08:21,400 --> 00:08:23,900
pieces that are floating around that are that are viewing things or

172
00:08:23,900 --> 00:08:25,400
doing whatever else, right?

173
00:08:25,500 --> 00:08:28,900
You can imagine that we're saying okay, it's viewing some element and

174
00:08:28,900 --> 00:08:32,299
an element has some number of events in it that all belong to this

175
00:08:32,299 --> 00:08:32,900
element, right?

176
00:08:33,100 --> 00:08:36,200
Or whatever the data is that needs to be in here, right?

177
00:08:36,200 --> 00:08:38,799
So you can you can take one of those debug events or something.

178
00:08:38,799 --> 00:08:41,799
And you can imagine, let's say that we were just doing a more

179
00:08:41,799 --> 00:08:43,500
hard-coded kind of a system, right?

180
00:08:43,500 --> 00:08:47,100
One that wasn't you know, designed to be flexible or anything that you

181
00:08:47,100 --> 00:08:49,600
can imagine something like this where you're just like, oh, in even we

182
00:08:49,600 --> 00:08:50,600
could even just hard code.

183
00:08:50,600 --> 00:08:54,000
It you said like oh, there's eight events per debug element, they just

184
00:08:54,000 --> 00:08:56,700
kind of come in and then they fall out when they fall out or, you

185
00:08:56,700 --> 00:08:57,800
know, whatever, right.

186
00:08:57,800 --> 00:08:59,800
You can imagine something like that being the hardcore.

187
00:09:00,100 --> 00:09:02,800
But if we want these things to just sort of Stack up until we run out

188
00:09:02,800 --> 00:09:09,100
of memory, then my question is just okay, it's easy to have them stack

189
00:09:09,100 --> 00:09:11,800
up because as the events come in and we collate them, we find the

190
00:09:11,800 --> 00:09:14,500
debug element to which they correspond and we stick them in there,

191
00:09:15,400 --> 00:09:15,900
right?

192
00:09:16,100 --> 00:09:17,400
That's pretty easy to do.

193
00:09:17,400 --> 00:09:22,600
But what we don't know, is when we need to reclaim memory, what event

194
00:09:22,600 --> 00:09:23,400
do we free?

195
00:09:24,900 --> 00:09:29,300
See I'm saying that's the part that's not immediately clear and so you

196
00:09:29,300 --> 00:09:32,200
can imagine these being double threaded, I don't know.

197
00:09:32,300 --> 00:09:36,000
You know how that sounds kind of crazy.

198
00:09:36,500 --> 00:09:40,600
I'm not sure, that's really something we would want to do, but you can

199
00:09:40,600 --> 00:09:42,600
imagine like, okay, we're going to free a frame.

200
00:09:43,700 --> 00:09:46,900
We need to kind of go through all the debug elements that exist and we

201
00:09:46,900 --> 00:09:49,000
need for every debug element.

202
00:09:49,000 --> 00:09:53,600
We need to free like one event off of them, right?

203
00:09:53,900 --> 00:09:54,500
So if we take

204
00:09:54,700 --> 00:09:58,900
look in the actual debug interface where we have a debug event here,

205
00:10:00,600 --> 00:10:03,400
you can kind of see that this at the moment doesn't have any room.

206
00:10:05,100 --> 00:10:08,000
For anything in it really extra, right?

207
00:10:08,000 --> 00:10:10,600
Because these are going into the log and we don't want to blow that

208
00:10:10,600 --> 00:10:11,200
out at all.

209
00:10:11,900 --> 00:10:15,100
So really, what we would have here is we have like a debug if, you

210
00:10:15,100 --> 00:10:18,800
know, debug stored event or something like that.

211
00:10:20,500 --> 00:10:22,500
And we would put debug events in here.

212
00:10:23,000 --> 00:10:25,900
And then we would, you know, point to the the next one or whatever,

213
00:10:26,100 --> 00:10:27,000
something like this.

214
00:10:27,300 --> 00:10:27,900
You know I'm saying?

215
00:10:28,500 --> 00:10:32,100
And and this right here would probably have something where we would

216
00:10:32,100 --> 00:10:33,400
go oh you know what?

217
00:10:33,400 --> 00:10:34,000
There's

218
00:10:34,800 --> 00:10:36,800
There's there's a debug stored event.

219
00:10:38,200 --> 00:10:39,700
And it's the first event or something like that.

220
00:10:39,700 --> 00:10:40,200
Right?

221
00:10:40,800 --> 00:10:43,600
And you know, like I said you can imagine, I don't know how we want to

222
00:10:43,600 --> 00:10:44,300
do this exactly.

223
00:10:44,300 --> 00:10:47,100
But I'm just saying this is the simplest thing that that would capture

224
00:10:47,500 --> 00:10:50,600
what we actually need it to do, like what we actually need to have

225
00:10:50,600 --> 00:10:51,800
occur, is this?

226
00:10:52,100 --> 00:10:55,500
So in here we would just say okay and you know this would probably be

227
00:10:55,700 --> 00:11:01,100
you know again just something that we would chain very simply and so

228
00:11:01,100 --> 00:11:03,100
if we want to do something like this we would have these debug

229
00:11:03,100 --> 00:11:03,700
elements.

230
00:11:03,900 --> 00:11:07,600
The debug elements would store basically just a chain of events.

231
00:11:08,100 --> 00:11:13,000
And any one of the UI systems and thing could point to one of those

232
00:11:13,000 --> 00:11:15,600
and be displaying it basically, right?

233
00:11:16,300 --> 00:11:16,900
So

234
00:11:21,700 --> 00:11:25,000
if we were to do that, then what we would need is some way of walking,

235
00:11:25,000 --> 00:11:29,300
all of the debug elements that exist and pulling.

236
00:11:29,300 --> 00:11:33,500
Again, the first thing off of there, debug event chain, every time we

237
00:11:33,500 --> 00:11:36,700
wanted to sort of like free memory, we just kind of go through there

238
00:11:36,700 --> 00:11:41,700
and gank you know some guys and and toss them and free them.

239
00:11:42,600 --> 00:11:48,700
So, that would be relatively easy for us to do again.

240
00:11:48,700 --> 00:11:55,100
There's a little bit of sort of Oddity there because if you imagine

241
00:11:55,100 --> 00:11:59,800
that not on, it's not true that on every

242
00:12:00,000 --> 00:12:05,100
Frame that we would actually have a debug events for every element

243
00:12:05,100 --> 00:12:06,400
that exists.

244
00:12:06,400 --> 00:12:10,000
And so we also don't really know which frame we're talking about.

245
00:12:10,000 --> 00:12:13,300
So it's almost like to, you would also want something like this,

246
00:12:13,300 --> 00:12:14,200
right?

247
00:12:14,200 --> 00:12:18,500
Where every time we free a frame we go through.

248
00:12:18,500 --> 00:12:21,900
And any, you know, we look through the events that we have, and we're

249
00:12:21,900 --> 00:12:25,400
only going to free frames that match that frame Index, right?

250
00:12:25,400 --> 00:12:29,600
And if the frame index that we see is actually,

251
00:12:30,000 --> 00:12:32,700
Lee greater than the frame index that we're trying, you know, where

252
00:12:32,700 --> 00:12:35,400
we're trying to make the cut off, then we don't free it.

253
00:12:35,500 --> 00:12:40,100
So that's, you know, again not saying this is anything particularly

254
00:12:40,100 --> 00:12:40,500
brilliant.

255
00:12:40,500 --> 00:12:42,500
I'm not saying this is a really necessarily a good idea.

256
00:12:42,500 --> 00:12:44,900
I'm just trying to figure out like what would sort of roughly

257
00:12:44,900 --> 00:12:47,800
accomplish the thing that we would need to accomplish?

258
00:12:50,200 --> 00:12:53,500
That seems like we would need something like that.

259
00:12:56,200 --> 00:13:00,100
Okay, so if we push forward on that a little bit, then what we would

260
00:13:00,100 --> 00:13:04,000
need to do again, is we need to have this, you know, storing.

261
00:13:04,000 --> 00:13:05,400
These things is pretty straightforward.

262
00:13:05,400 --> 00:13:10,800
But what is less straightforward potentially is how we iterate over

263
00:13:10,800 --> 00:13:12,400
them, when we need to free them.

264
00:13:12,700 --> 00:13:16,300
And I suppose, the way we could do that is we could just use the route

265
00:13:16,300 --> 00:13:21,300
group and iterate over it like walking it like a hierarchy, just sort

266
00:13:21,300 --> 00:13:24,600
of the standard way that we would iterate over anything else and in

267
00:13:24,600 --> 00:13:25,800
fact, you know, we've kind of already

268
00:13:26,000 --> 00:13:27,500
I have a way to iterate over it.

269
00:13:27,500 --> 00:13:27,900
Right?

270
00:13:28,800 --> 00:13:31,200
Where is that code?

271
00:13:31,200 --> 00:13:32,600
We've got that in here somewhere.

272
00:13:32,600 --> 00:13:37,500
Yeah, so in here, where we've got this kind of like iteration code.

273
00:13:37,500 --> 00:13:41,500
Like so that's an example of what we could do.

274
00:13:41,500 --> 00:13:46,200
We could iterate over everything and do the freeing as part of that,

275
00:13:46,200 --> 00:13:47,200
iteration pass, right?

276
00:13:47,200 --> 00:13:49,900
As part of the sweep through what we were doing.

277
00:13:49,900 --> 00:13:51,400
We could do that, right?

278
00:13:52,700 --> 00:13:53,500
It's just a thought.

279
00:13:53,900 --> 00:13:55,500
That's one way we could do it.

280
00:14:01,100 --> 00:14:05,500
One thing I do not actually remember about our code is why we were

281
00:14:05,500 --> 00:14:06,900
actually doing it.

282
00:14:07,800 --> 00:14:10,700
I don't remember why we were saying like, oh, we shouldn't do it with

283
00:14:10,700 --> 00:14:11,500
recursion.

284
00:14:12,100 --> 00:14:15,300
There was something where it's like, oh, will write it without

285
00:14:15,300 --> 00:14:17,100
recursion maybe just to write it without.

286
00:14:17,300 --> 00:14:19,700
I don't even remember, there's some weirdness going on there.

287
00:14:19,700 --> 00:14:21,600
So we may also want to make this a little less.

288
00:14:22,900 --> 00:14:26,800
Obtuse while we're at it because I think I was just like, out to lunch

289
00:14:26,800 --> 00:14:27,000
that day.

290
00:14:27,000 --> 00:14:29,600
In fact, I even think I said, I was felt like, I was out to lunch that

291
00:14:29,600 --> 00:14:31,100
day, but that's separate issue.

292
00:14:31,300 --> 00:14:31,800
Anyway.

293
00:14:31,900 --> 00:14:35,100
So, yeah, if we want to do that, that's really all we would need is

294
00:14:35,100 --> 00:14:36,300
some way to kind of get through here.

295
00:14:36,400 --> 00:14:40,700
So I'm going to go ahead and give this a shot and to see kind of what

296
00:14:40,700 --> 00:14:42,300
comes out of it, right?

297
00:14:42,500 --> 00:14:46,600
So if you take a look at what's going on here, if we have this, like,

298
00:14:46,600 --> 00:14:50,500
I don't really remember again, which of these because we kind of, sort

299
00:14:50,500 --> 00:14:52,300
of gut it, a bunch of that stuff.

300
00:14:53,700 --> 00:14:56,900
I don't necessarily remember which ones of these were doing what or,

301
00:14:57,100 --> 00:14:59,800
or why, or when, or how, or anything like that.

302
00:15:00,900 --> 00:15:02,800
so, what we would need to do,

303
00:15:05,300 --> 00:15:08,700
Is first for every frame that we might have.

304
00:15:08,700 --> 00:15:11,800
We're going to need some kind of an index for that frame, right.

305
00:15:11,800 --> 00:15:14,000
We're gonna have to take these debug frames and we're going to

306
00:15:14,000 --> 00:15:15,600
presumably keep all this stuff.

307
00:15:15,700 --> 00:15:18,900
I don't really want the region stuff anymore because you know so let's

308
00:15:18,900 --> 00:15:19,900
get rid of that as well.

309
00:15:19,900 --> 00:15:22,900
We'll sort of cut that part out but we need something here.

310
00:15:22,900 --> 00:15:24,200
That's like the frame Index.

311
00:15:24,200 --> 00:15:27,400
This is like the canonical frame index and that's again the thing that

312
00:15:27,400 --> 00:15:32,200
in here would tell us which one were sort of doing there and then when

313
00:15:32,200 --> 00:15:34,200
we create a new frame, right?

314
00:15:34,200 --> 00:15:35,000
When we create one of these,

315
00:15:35,100 --> 00:15:38,500
Is and we set like stuff like the begin clock value and stuff like

316
00:15:38,500 --> 00:15:39,100
that.

317
00:15:40,200 --> 00:15:41,900
So here we are a new frame, right?

318
00:15:42,000 --> 00:15:45,400
Then, what we need to do, every time we do a new frame, is we need to

319
00:15:45,400 --> 00:15:47,300
actually create inside there.

320
00:15:47,300 --> 00:15:48,600
A frame Index, this canonical.

321
00:15:48,600 --> 00:15:52,900
So we need to do like, debug State frame, you know, like total frame

322
00:15:52,900 --> 00:15:54,000
count or something like that.

323
00:15:54,500 --> 00:15:57,400
And so then here where we've got, you know, the frame cat which is

324
00:15:57,400 --> 00:15:58,800
probably going to be something more.

325
00:15:58,800 --> 00:16:00,600
Like how many frames are in here or whatever?

326
00:16:01,000 --> 00:16:03,000
We've got a total frame count, to be honest.

327
00:16:03,000 --> 00:16:04,900
I don't even know if that's actually necessary.

328
00:16:05,000 --> 00:16:07,700
Tomorrow, but we've got a total frame count, which is going to be a

329
00:16:07,700 --> 00:16:09,600
number that has increments As We Run the game.

330
00:16:09,800 --> 00:16:13,600
Now normally, that would mean that we have a limit of 4 billion

331
00:16:13,600 --> 00:16:14,900
frames, right?

332
00:16:14,900 --> 00:16:16,800
Because otherwise then it will wrap around.

333
00:16:18,100 --> 00:16:22,700
And if you think about what that implies in terms of, I guess I can

334
00:16:22,700 --> 00:16:24,100
use emacs cualquier.

335
00:16:24,100 --> 00:16:28,700
I was forget, if you think about what that means, if you were to say,

336
00:16:28,700 --> 00:16:34,200
okay, we've got, you know, for x, 1024 x, 1024 x 1024.

337
00:16:34,400 --> 00:16:35,000
Right?

338
00:16:35,500 --> 00:16:39,200
And that's how many frames, you know, the that in that unsigned

339
00:16:39,200 --> 00:16:42,100
integer will go from 0 to 4 billion, right?

340
00:16:42,200 --> 00:16:43,300
As that goes up,

341
00:16:45,200 --> 00:16:46,200
how many frames is that?

342
00:16:46,200 --> 00:16:49,200
Well, if we were doing 60 frames a second, right?

343
00:16:49,900 --> 00:16:53,200
Then that's how many seconds it would be if that makes sense.

344
00:16:54,500 --> 00:16:57,800
And so, if that's how many seconds and then we want to know like how

345
00:16:57,800 --> 00:17:02,900
many minutes that would be like another 60 seconds, right?

346
00:17:02,900 --> 00:17:08,400
In a sorry, it's 60 frames per second and then 60 seconds in a minute,

347
00:17:08,900 --> 00:17:09,500
right?

348
00:17:10,300 --> 00:17:13,099
And then we've got what 60 minutes in an hour.

349
00:17:14,099 --> 00:17:17,099
And then like 24 hours in a day or something like this, right?

350
00:17:17,200 --> 00:17:18,599
I think that did I get that, right?

351
00:17:19,200 --> 00:17:20,000
Don't know why.

352
00:17:20,000 --> 00:17:25,300
That just and so that would run for like, what two years is that

353
00:17:25,300 --> 00:17:25,800
correct?

354
00:17:25,800 --> 00:17:31,800
Let's let's double check how many seconds in a day, right.

355
00:17:32,400 --> 00:17:35,000
Seconds in a day to do it.

356
00:17:38,500 --> 00:17:39,100
To do it.

357
00:17:39,800 --> 00:17:45,300
So basically, we know we've got, we've got this x 60 frames per

358
00:17:45,300 --> 00:17:45,900
second.

359
00:17:46,300 --> 00:17:51,700
And so that's how many actual frames we would go through in one day,

360
00:17:52,300 --> 00:17:52,900
right?

361
00:17:53,100 --> 00:17:57,400
And so if we wanted to know, when we would wrap,

362
00:18:00,900 --> 00:18:02,200
This is the calculation.

363
00:18:02,400 --> 00:18:06,800
That's how many frames we can Count versus how many frames in a day.

364
00:18:07,200 --> 00:18:07,900
That's how many days.

365
00:18:07,900 --> 00:18:10,300
So yeah, we did it right 828.

366
00:18:12,200 --> 00:18:18,500
So, you know, realistically is anyone going to be capturing debug info

367
00:18:19,300 --> 00:18:23,600
for two and two and a half years or whatever that is?

368
00:18:23,700 --> 00:18:24,200
No.

369
00:18:25,000 --> 00:18:27,300
So we don't really have to worry about this wrapping.

370
00:18:27,300 --> 00:18:28,800
So I think we're totally fine there.

371
00:18:29,200 --> 00:18:33,500
And so then every time we do a new frame, all we have to do is just

372
00:18:33,500 --> 00:18:35,200
assign a new index to it.

373
00:18:35,200 --> 00:18:39,400
And those index indices will sort of just grow over time

374
00:18:40,000 --> 00:18:41,500
monotonically, right?

375
00:18:42,500 --> 00:18:46,100
I'm going to go ahead and nuke the region index stuff here.

376
00:18:46,700 --> 00:18:49,700
Just go ahead and get rid of it.

377
00:18:49,700 --> 00:18:50,500
Temporarily.

378
00:18:51,800 --> 00:18:55,100
And then we can start to focus on this other part of the debug code

379
00:18:55,300 --> 00:18:56,700
that we need to fix.

380
00:18:56,700 --> 00:19:00,200
Which again, is that sort of concept of where does the stuff go, as we

381
00:19:00,200 --> 00:19:04,200
sort of pull it, out of the debug stream and put it into something, we

382
00:19:04,200 --> 00:19:06,100
need to put it into these, like, debug start events.

383
00:19:06,100 --> 00:19:07,700
So let's make that actually happen.

384
00:19:08,600 --> 00:19:09,400
So okay.

385
00:19:11,900 --> 00:19:15,200
Looks like this is just capturing.

386
00:19:15,200 --> 00:19:15,500
Yeah.

387
00:19:15,500 --> 00:19:19,100
So what's happening here is this is that violent interaction.

388
00:19:19,100 --> 00:19:21,700
This is just if you were trying to interact with one of the debug

389
00:19:21,700 --> 00:19:22,900
values, right?

390
00:19:23,100 --> 00:19:25,100
Then what you were doing is you're passing one of these links and

391
00:19:25,100 --> 00:19:28,800
before the link pet pointed directly to the event that was interacting

392
00:19:28,800 --> 00:19:30,900
with now, it's not going to anymore.

393
00:19:31,400 --> 00:19:34,800
You're going to have to kind of come down to an element and so on.

394
00:19:35,300 --> 00:19:38,900
And what's interesting about this is probably I would also say inside

395
00:19:38,900 --> 00:19:41,200
the debug element, we'd probably want to know like the

396
00:19:41,300 --> 00:19:45,800
Stan last of, of the series because this is like the most recent, and

397
00:19:45,800 --> 00:19:47,900
this is like the oldest, right?

398
00:19:48,400 --> 00:19:51,600
So it's actually like the oldest event and the most recent event,

399
00:19:51,700 --> 00:19:52,200
right?

400
00:19:52,200 --> 00:19:55,000
And each one of those, you know, we kind of have those sort of change

401
00:19:55,000 --> 00:19:56,200
over time, like I said,

402
00:20:02,100 --> 00:20:05,800
So yeah, so if you want to interact with one of those guys then you're

403
00:20:05,800 --> 00:20:10,100
in a situation where you have to have something again where you know,

404
00:20:10,100 --> 00:20:13,200
you're going to have to, you're going to have to sort of grab ass out

405
00:20:13,200 --> 00:20:13,600
of here.

406
00:20:14,100 --> 00:20:17,700
So this would have our link interaction would have to be something

407
00:20:17,700 --> 00:20:24,300
where I guess, you know, we would look here and say if the there is an

408
00:20:24,300 --> 00:20:28,600
actual event present in the thing, then you can do it because

409
00:20:28,600 --> 00:20:29,700
otherwise, you couldn't do it.

410
00:20:29,700 --> 00:20:31,000
Like there might be no.

411
00:20:31,600 --> 00:20:35,900
At all in whatever this particular thing is that you're trying to

412
00:20:35,900 --> 00:20:38,500
interact with and that would make it so that you can interact with it.

413
00:20:38,500 --> 00:20:39,000
Right?

414
00:20:39,600 --> 00:20:41,900
So presumably you have something like this, where you're like, okay,

415
00:20:41,900 --> 00:20:43,500
whatever the links element is.

416
00:20:43,700 --> 00:20:47,000
It's got a most recent event, whatever that is.

417
00:20:47,000 --> 00:20:52,000
That's the one, you would presumably be interacting with right and and

418
00:20:52,000 --> 00:20:53,200
on here you'd say like, okay,

419
00:20:55,600 --> 00:20:59,200
Because again, if you're interacting with something, it's it's a

420
00:20:59,200 --> 00:20:59,800
little dicey.

421
00:21:00,000 --> 00:21:02,700
To because now I think about it, there's there's additional things.

422
00:21:02,700 --> 00:21:05,200
You might even want to do here, which are even more complicated than

423
00:21:05,200 --> 00:21:07,700
this, which is like if you're trying to interact with a particular

424
00:21:07,700 --> 00:21:12,400
frame index, then this would want to sort of look through that linked

425
00:21:12,400 --> 00:21:17,600
list and say, do we have one for this particular frame, right?

426
00:21:17,600 --> 00:21:20,300
Which is even more kind of crazy if you think about it.

427
00:21:21,300 --> 00:21:22,300
So yes, I don't know.

428
00:21:22,800 --> 00:21:26,800
It also even maybe sort of suggests to me like as I kind of think

429
00:21:26,800 --> 00:21:29,400
about it in my head, like do you want to just be throwing all these

430
00:21:29,400 --> 00:21:29,800
things into

431
00:21:30,000 --> 00:21:33,000
Sort of a hash somewhere where you're just kind of like dumping events

432
00:21:33,000 --> 00:21:37,700
into the hash and then, you know, they come in or come out or whatever

433
00:21:37,700 --> 00:21:39,700
like something like this, I don't know.

434
00:21:40,200 --> 00:21:42,700
Again, that's something that to be thought of, if we ever want to

435
00:21:42,700 --> 00:21:46,800
optimize the debug system which you know, probably we may be never

436
00:21:46,800 --> 00:21:47,500
would even do.

437
00:21:48,600 --> 00:21:52,200
So anyway, if we have something like this then we can interact with

438
00:21:52,200 --> 00:21:52,600
the event.

439
00:21:52,600 --> 00:21:55,800
That way we can just say all right you know we'll go out and grab it.

440
00:21:57,300 --> 00:21:57,800
Yeah.

441
00:21:57,800 --> 00:21:59,800
Matt's I think mostly

442
00:22:00,000 --> 00:22:01,700
We would really be talking about.

443
00:22:02,900 --> 00:22:06,800
So in here, when we're grabbing events out, I think the same thing is

444
00:22:06,800 --> 00:22:08,300
true, right?

445
00:22:09,000 --> 00:22:09,700
For events.

446
00:22:09,700 --> 00:22:13,300
I don't know how the events get used in here or if they get used

447
00:22:13,500 --> 00:22:14,800
exactly how they occur.

448
00:22:15,000 --> 00:22:18,200
So, yeah, there's the like event type stuff that we're switching off

449
00:22:18,200 --> 00:22:18,600
of.

450
00:22:19,200 --> 00:22:22,500
So really, what we would want to do here is check to make sure that

451
00:22:22,500 --> 00:22:24,700
the event actually exists, right?

452
00:22:24,700 --> 00:22:26,500
I think we would want to do something like this.

453
00:22:27,700 --> 00:22:28,100
Oops.

454
00:22:31,100 --> 00:22:34,400
And then we would kind of come through here and bracket around that.

455
00:22:34,500 --> 00:22:38,100
So assuming that the event actually exists, that way we can do, again

456
00:22:38,100 --> 00:22:38,900
the same thing.

457
00:22:39,300 --> 00:22:42,400
And you know, what I'll do since since people are going to be pulling

458
00:22:42,400 --> 00:22:47,100
this out, I want to make an actual utility function out of that, so

459
00:22:47,100 --> 00:22:50,200
that we can maybe potentially make it do different things in the

460
00:22:50,200 --> 00:22:51,100
future as well.

461
00:22:51,500 --> 00:22:54,800
So, if we just said, okay, there's this concept that you can get the

462
00:22:54,800 --> 00:22:57,900
debug event pointer back from a particular link.

463
00:22:58,100 --> 00:23:00,200
So you can be like, get event.

464
00:23:00,700 --> 00:23:02,000
From link or something.

465
00:23:04,100 --> 00:23:07,700
And I don't mean link, like the character in Legend of Zelda, right?

466
00:23:08,500 --> 00:23:10,500
So anyway, here's the debug variable link.

467
00:23:11,700 --> 00:23:13,700
And it's going to just be this.

468
00:23:21,500 --> 00:23:24,200
So exactly the same thing that I was doing yours result.

469
00:23:26,200 --> 00:23:27,800
So the result equals this guy

470
00:23:32,800 --> 00:23:33,700
And then we return him.

471
00:23:34,900 --> 00:23:37,800
So, that way, if in the future, we do want to do something where it

472
00:23:37,800 --> 00:23:41,600
looks at like some active frame selection, sort of a situation or I

473
00:23:41,600 --> 00:23:45,500
don't really know what we want to do, but that would give us maybe a

474
00:23:45,500 --> 00:23:47,500
way of going.

475
00:23:47,500 --> 00:23:50,600
Like, when we just want to know, whatever the, like current thing to

476
00:23:50,600 --> 00:23:51,400
print is

477
00:23:52,700 --> 00:23:55,400
We know it's going through get event from link, so we can do some kind

478
00:23:55,400 --> 00:23:56,400
of fancy jazz in there.

479
00:23:56,400 --> 00:23:57,200
If we need to

480
00:23:59,700 --> 00:23:59,800
All.

481
00:24:00,900 --> 00:24:04,500
So that also means this can go away, doesn't have to check any more.

482
00:24:04,500 --> 00:24:07,500
It can just sort of do its thing where it's like, oh yeah, get it from

483
00:24:07,500 --> 00:24:12,200
that, and everyone's happy, and, and smiling, and it's just great, and

484
00:24:12,200 --> 00:24:14,100
everyone loves it, and it's fantastic.

485
00:24:14,100 --> 00:24:16,000
And it's just the best thing ever.

486
00:24:16,800 --> 00:24:17,700
And that's great.

487
00:24:18,700 --> 00:24:21,100
Okay, so that's all good.

488
00:24:21,500 --> 00:24:24,500
Oops, except I didn't put in the right name for it.

489
00:24:25,500 --> 00:24:27,900
And so here is our debug event.

490
00:24:28,100 --> 00:24:31,700
Like I said, this is just like get event from link and then we can

491
00:24:31,700 --> 00:24:34,600
just do that and we're good functions.

492
00:24:34,600 --> 00:24:35,100
Not take our head.

493
00:24:35,100 --> 00:24:35,700
That's true.

494
00:24:35,700 --> 00:24:37,300
It takes a debug State as well.

495
00:24:39,100 --> 00:24:43,200
So, all these verlan contractions, are presumably going to be that

496
00:24:43,200 --> 00:24:43,500
way.

497
00:24:43,500 --> 00:24:46,700
So they've got a pet, take the debug State now as well.

498
00:24:47,000 --> 00:24:47,300
Yeah.

499
00:24:50,000 --> 00:24:52,100
Region count.

500
00:24:52,100 --> 00:24:56,000
So add region is just going to be a task 0.4 now because I don't even

501
00:24:56,000 --> 00:24:57,400
know that we're going to have that anymore.

502
00:24:58,500 --> 00:25:00,000
All right, so we've got events.

503
00:25:00,200 --> 00:25:03,200
So we do add very little group here at the debug event and we're

504
00:25:03,200 --> 00:25:04,700
adding the debug event.

505
00:25:04,700 --> 00:25:08,700
So this thing, you know, again, this is not actually correct anymore

506
00:25:09,000 --> 00:25:11,700
because this thing that's that's building up variable groups.

507
00:25:11,800 --> 00:25:14,500
Those are actually going to be permanent things now.

508
00:25:15,000 --> 00:25:17,900
And so what we actually need is when we're building up those

509
00:25:17,900 --> 00:25:18,800
hierarchies we now

510
00:25:19,100 --> 00:25:24,800
Way of, like, sort of permanently placing things in a debug hierarchy

511
00:25:24,800 --> 00:25:28,500
because that hierarchy is going to exist, essentially forever.

512
00:25:30,100 --> 00:25:34,500
So when we say add variable to group and again, like the other thing

513
00:25:34,500 --> 00:25:41,100
that's a little bit weird about that is we we have the choice and I

514
00:25:41,100 --> 00:25:47,000
don't know what we want to necessarily do about it, but when you think

515
00:25:47,000 --> 00:25:50,000
about what's going to go on here, there's two kinds of hierarchies as

516
00:25:50,000 --> 00:25:50,500
well.

517
00:25:50,600 --> 00:25:52,000
That we might talk about.

518
00:25:52,600 --> 00:25:58,800
There's the hierarchy of the data coming in from the debug system and,

519
00:25:58,900 --> 00:25:59,700
you know, maybe

520
00:26:00,000 --> 00:26:02,500
Don't even necessarily considered that exactly a hierarchy.

521
00:26:02,500 --> 00:26:07,900
Anyways, it's just we have a certain set of possible debug locations,

522
00:26:07,900 --> 00:26:08,300
right?

523
00:26:10,000 --> 00:26:16,400
We've got those and then we also have, you know, some sort of a

524
00:26:16,400 --> 00:26:17,500
hierarchy for the UI.

525
00:26:20,500 --> 00:26:22,400
and that hierarchy is more fluid and

526
00:26:23,500 --> 00:26:26,200
implies a bunch of different stuff because the user maybe wants to

527
00:26:26,600 --> 00:26:28,200
drag things around and that sort of thing.

528
00:26:29,200 --> 00:26:33,500
So I'm not sure exactly again, how we want to handle that stuff.

529
00:26:33,800 --> 00:26:38,300
It's kind of a little bit odd and it's again, it's we sort of had we

530
00:26:38,300 --> 00:26:44,600
have the ability to deal with this stuff before by by using the

531
00:26:44,600 --> 00:26:45,600
counter variables.

532
00:26:46,000 --> 00:26:49,600
Now, we don't have those anymore, but we're synthetically creating

533
00:26:49,600 --> 00:26:51,100
those, remember we?

534
00:26:51,900 --> 00:26:53,100
Inside debug interface.

535
00:26:53,400 --> 00:26:55,500
What we did there is we just did a like

536
00:26:59,100 --> 00:26:59,900
Where is?

537
00:27:00,000 --> 00:27:00,500
It?

538
00:27:01,800 --> 00:27:06,200
No, no, it's not that it is.

539
00:27:06,900 --> 00:27:07,800
Where's the code?

540
00:27:08,900 --> 00:27:11,000
It's not Atomic, add you 64.

541
00:27:11,100 --> 00:27:16,100
It's not cool events rain but I know it's none of these things.

542
00:27:18,700 --> 00:27:19,400
Yeah.

543
00:27:19,400 --> 00:27:22,700
So they're supposed to be

544
00:27:23,800 --> 00:27:30,300
I thought we did a thing where this calls into the debug system and

545
00:27:30,300 --> 00:27:34,200
says, hey I want you to allocate a new one.

546
00:27:34,200 --> 00:27:35,500
We had like a static.

547
00:27:35,600 --> 00:27:38,100
We had like static variables and all that stuff.

548
00:27:38,400 --> 00:27:39,500
Yeah here it is.

549
00:27:39,700 --> 00:27:40,300
Here it is.

550
00:27:40,600 --> 00:27:42,600
I was like this is the whole thing where I was talking about the

551
00:27:42,600 --> 00:27:43,000
beginning.

552
00:27:44,900 --> 00:27:45,200
Yeah.

553
00:27:45,200 --> 00:27:47,000
This is the stuff that I'm talking about.

554
00:27:47,300 --> 00:27:52,600
So in here when we have the sort of static values that have to get

555
00:27:52,600 --> 00:27:53,400
initialized and all

556
00:27:53,600 --> 00:27:54,400
Kind of nonsense.

557
00:27:54,400 --> 00:28:00,000
This whole thing here, debug initialize value where we have sort of

558
00:28:00,000 --> 00:28:03,700
this recording of a thing that we record once, and then we get back, I

559
00:28:03,700 --> 00:28:05,900
guess a permanent pointer to it, that sort of thing.

560
00:28:06,700 --> 00:28:09,400
So what exactly?

561
00:28:09,400 --> 00:28:12,400
I just want to refresh my memory as to what we're getting back with

562
00:28:12,400 --> 00:28:12,700
that.

563
00:28:12,700 --> 00:28:16,700
So I can plan out how these things would work.

564
00:28:17,600 --> 00:28:19,500
Let's see here.

565
00:28:19,900 --> 00:28:23,400
So when we do one of these, we do a record debug event with

566
00:28:23,500 --> 00:28:25,700
Debug type, Mark debug value.

567
00:28:26,700 --> 00:28:35,100
And then we don't actually do anything with that.

568
00:28:36,300 --> 00:28:38,500
What, wait what?

569
00:28:39,500 --> 00:28:40,600
What?

570
00:28:40,800 --> 00:28:42,900
Allah S cord?

571
00:28:44,200 --> 00:28:45,400
Debug event.

572
00:28:46,500 --> 00:28:47,700
What's going on here?

573
00:28:50,000 --> 00:28:53,900
So it just gets one of these events back, but how does that?

574
00:28:55,000 --> 00:28:56,100
How does that help?

575
00:28:57,100 --> 00:28:58,500
How does that help anybody?

576
00:28:58,800 --> 00:29:00,300
We get back one from the global.

577
00:29:00,300 --> 00:29:02,200
We just get what you know this is just getting back.

578
00:29:02,200 --> 00:29:04,000
All this is doing right.

579
00:29:04,100 --> 00:29:07,900
Is getting back a entry into the debug event table.

580
00:29:09,200 --> 00:29:13,300
So how does that help us with our static initialization of these guys

581
00:29:13,300 --> 00:29:13,700
here?

582
00:29:14,300 --> 00:29:14,800
What is that?

583
00:29:14,800 --> 00:29:15,700
Actually,

584
00:29:17,200 --> 00:29:18,600
Oh, we passes.

585
00:29:18,600 --> 00:29:21,300
We pass it forwards.

586
00:29:25,700 --> 00:29:28,100
Well then, all right.

587
00:29:28,100 --> 00:29:30,200
So you can see what happens here, right?

588
00:29:30,500 --> 00:29:36,200
So essentially, we don't actually know in the debug system we pass.

589
00:29:36,300 --> 00:29:38,500
We do a local persist here.

590
00:29:39,000 --> 00:29:44,900
And and that local persist is the debug event gets passed into the

591
00:29:44,900 --> 00:29:45,500
debug system.

592
00:29:45,500 --> 00:29:49,300
The debug system records, the fact that there is a debug event.

593
00:29:49,300 --> 00:29:54,700
Now, sitting on the stack of this, you know,

594
00:29:55,700 --> 00:29:59,900
Of the caller and that is well, it's not.

595
00:30:00,000 --> 00:30:03,600
S Clark because it's a static variable so it's actually in the Heap

596
00:30:03,600 --> 00:30:09,600
but point being the the caller's scope has that in there and we use

597
00:30:09,600 --> 00:30:12,000
that as the permanent location of this thing.

598
00:30:13,200 --> 00:30:17,700
So the reason that that's kind of a little disappointing is because

599
00:30:17,700 --> 00:30:22,500
again it means that we don't have any kind of a real table entry or

600
00:30:22,500 --> 00:30:30,400
anything in particular for the, you know, we don't have anything that

601
00:30:30,400 --> 00:30:33,400
we build up in here, that's already correspondent.

602
00:30:33,400 --> 00:30:37,200
We would have to do something like use the address of that variable.

603
00:30:38,700 --> 00:30:40,800
You know where or who knows what exactly.

604
00:30:41,900 --> 00:30:50,400
And so yeah, I'm not 100% certain how I feel about that, but I suppose

605
00:30:50,400 --> 00:30:56,000
just a hash table that hashed on that location, wouldn't necessarily

606
00:30:56,000 --> 00:31:01,400
be a bad thing for any particular reason.

607
00:31:05,000 --> 00:31:09,100
I mean, I can't think of anything at least is what?

608
00:31:09,100 --> 00:31:10,000
Guess what I would say.

609
00:31:11,200 --> 00:31:17,000
And at some level I also do think that if all we really need is an ID

610
00:31:17,000 --> 00:31:20,500
That's Unique, if we were just going to always use like a hash table

611
00:31:20,500 --> 00:31:21,700
or something like that.

612
00:31:23,400 --> 00:31:25,300
Then having a static variable.

613
00:31:27,500 --> 00:31:30,500
Might actually be all we need.

614
00:31:35,900 --> 00:31:38,500
So riddle, me this Batman.

615
00:31:38,900 --> 00:31:40,400
Here's what I'm, here's what I'm thinking.

616
00:31:41,300 --> 00:31:44,400
So, what I want out here, right?

617
00:31:44,400 --> 00:31:46,500
Because I want to be able to do something.

618
00:31:46,500 --> 00:31:49,800
In fact, you know, if we, if we look at what we had here, we've got

619
00:31:49,800 --> 00:31:54,500
these debug stored elements or whatever these debug elements, or

620
00:31:54,500 --> 00:31:55,100
whatever they are.

621
00:31:55,100 --> 00:31:55,700
Right.

622
00:31:56,200 --> 00:31:59,700
And we've got this sort of stuff with the tree.

623
00:31:59,800 --> 00:32:03,100
That's like how we would might display in the UI, but then we actually

624
00:32:03,100 --> 00:32:05,300
have the values that we're going to store and those

625
00:32:05,500 --> 00:32:06,000
In here.

626
00:32:06,200 --> 00:32:09,800
And so we need some way of like as we see things, we need a way of

627
00:32:09,800 --> 00:32:13,900
like corresponding them out to these to these debug elements, right?

628
00:32:14,000 --> 00:32:17,400
And you can imagine if we just had a big old thing of these debug

629
00:32:17,400 --> 00:32:19,900
elements, you know, cure whatever.

630
00:32:21,500 --> 00:32:22,900
You know whatever we want to do there.

631
00:32:23,500 --> 00:32:26,400
If we just had a big old thing of these debug elements, we need to

632
00:32:26,400 --> 00:32:30,000
then be able to find the debug element that corresponds to something

633
00:32:30,000 --> 00:32:35,300
and before we were using counters for that you know so that we could

634
00:32:35,400 --> 00:32:38,700
know exactly which one we were talking about but we kind of we're

635
00:32:38,700 --> 00:32:42,200
saying that that's maybe not the best thing in the world to do because

636
00:32:42,200 --> 00:32:45,100
that force is that whole weird thing with the translation units

637
00:32:45,100 --> 00:32:48,800
needing to be defined and it sort of was adding all this complexity

638
00:32:48,800 --> 00:32:51,000
and we didn't really want to have to deal with it.

639
00:32:51,400 --> 00:32:55,500
And so what I'm thinking is like okay if we did have some kind of just

640
00:32:55,500 --> 00:32:58,700
a hash table sort of a situation where we looked up things in the hash

641
00:32:58,700 --> 00:32:59,200
table.

642
00:32:59,600 --> 00:32:59,800
I

643
00:33:00,000 --> 00:33:04,300
Look what we could do is use the static variables address, right?

644
00:33:04,300 --> 00:33:09,700
We could use the address of this guy as the thing that would tell us

645
00:33:10,800 --> 00:33:16,400
what what I you know a unique ID so basically it gives us sort of the

646
00:33:16,400 --> 00:33:19,600
equivalent of counter in that they're unique but it's not quite as

647
00:33:19,600 --> 00:33:22,000
good as counter because they're not like linearly laid out in a

648
00:33:22,000 --> 00:33:26,500
perfect array fashion, which is what we would, you know, prefer to

649
00:33:26,500 --> 00:33:26,800
have.

650
00:33:26,800 --> 00:33:29,800
We could since we can't have that, it would give us

651
00:33:30,000 --> 00:33:33,600
Is it would effectively give us what we wanted, right?

652
00:33:34,800 --> 00:33:39,300
We could also do something a little bit, a little bit more.

653
00:33:41,600 --> 00:33:47,300
For sort of wish we could use sort of a thing that increments a

654
00:33:47,300 --> 00:33:50,300
variable as well to get a linearized version.

655
00:33:57,000 --> 00:34:01,000
Hmm, she was like yesterday right on schedule, I'm still.

656
00:34:01,000 --> 00:34:01,800
So jet-lagged.

657
00:34:02,900 --> 00:34:05,500
I've been going to bed at like 8:30 at night, so it's like, you know,

658
00:34:05,500 --> 00:34:08,500
I get off handmade here on, there's like an hour or two before I'm in.

659
00:34:08,600 --> 00:34:09,699
I'm just asleep.

660
00:34:11,199 --> 00:34:13,500
So anyway, looking at this.

661
00:34:15,600 --> 00:34:18,400
I'm just trying to think of like what the right way is to correspond

662
00:34:18,400 --> 00:34:23,400
out to those debug elements and I'm not sure exactly what it is.

663
00:34:23,800 --> 00:34:31,800
What the best way to do that would be and you know hash table seems

664
00:34:31,800 --> 00:34:36,500
like maybe it's as good as anything else for that.

665
00:34:37,000 --> 00:34:45,199
Seems like a fair thing and we could probably we've already got the

666
00:34:45,400 --> 00:34:50,000
Sensitive hashing, these things in the view hash week, I guess that,

667
00:34:50,000 --> 00:34:53,600
but that's dependent on the piece of UI that were talking about so

668
00:34:53,600 --> 00:34:55,900
that that probably wouldn't really help us out much.

669
00:34:56,199 --> 00:34:59,700
So we would need a different hash, which is again, kind of annoying,

670
00:34:59,700 --> 00:35:02,500
but I don't know, seems reasonable.

671
00:35:03,100 --> 00:35:04,700
It seems like a reasonable way to get it.

672
00:35:04,700 --> 00:35:07,300
Those things, I don't know.

673
00:35:07,400 --> 00:35:07,900
I don't know.

674
00:35:08,200 --> 00:35:10,600
I don't have a strong opinion about it one way or the other, to be

675
00:35:10,600 --> 00:35:11,200
honest with you.

676
00:35:23,000 --> 00:35:24,600
Do you guys have a strong opinion about it?

677
00:35:25,400 --> 00:35:26,600
I don't know how you're feeling about it.

678
00:35:29,600 --> 00:35:32,300
I think I'm just going to say, like okay, maybe maybe we just do have

679
00:35:32,300 --> 00:35:36,500
a hash so we've got something like here's the element hash or

680
00:35:36,500 --> 00:35:37,000
whatever.

681
00:35:38,600 --> 00:35:39,700
And we just stick stick.

682
00:35:40,000 --> 00:35:44,300
We stick stuff in there as we go, something like that, it's in theory,

683
00:35:44,300 --> 00:35:45,200
it's plausible.

684
00:35:45,400 --> 00:35:49,800
I could believe it, you know, I could, I could believe it.

685
00:35:50,100 --> 00:35:53,000
So at that point, we also have the sort of values group.

686
00:35:53,000 --> 00:35:54,400
You think these are you?

687
00:35:54,400 --> 00:35:55,800
I things, right?

688
00:35:55,800 --> 00:35:59,800
And in fact, I think these would probably go away to some degree.

689
00:36:00,000 --> 00:36:02,800
And we would just have a tree.

690
00:36:02,800 --> 00:36:10,400
A particular debug tree that we consider to be the tree that we that

691
00:36:10,400 --> 00:36:11,800
we build up initially.

692
00:36:11,800 --> 00:36:13,100
That like the is the route you.

693
00:36:13,100 --> 00:36:14,800
I tree something like this.

694
00:36:15,000 --> 00:36:17,800
So we wouldn't actually have these.

695
00:36:17,800 --> 00:36:20,300
I don't know if values group is used anymore.

696
00:36:20,300 --> 00:36:25,100
I suspect, it's probably not but I'll double-check, let's see here

697
00:36:25,300 --> 00:36:27,500
values group.

698
00:36:27,500 --> 00:36:30,000
Yes, / values group is just the sort of thing.

699
00:36:30,000 --> 00:36:33,300
Thing we were using for our sort of debug hacky like.

700
00:36:33,300 --> 00:36:37,000
So the values there is Route group getting used other than in the

701
00:36:37,000 --> 00:36:38,800
frame as well would be the other question.

702
00:36:38,800 --> 00:36:43,400
I have so route group create freely in the frame.

703
00:36:46,600 --> 00:36:48,100
Not really either.

704
00:36:48,100 --> 00:36:52,500
So it's only being used in there, so yeah.

705
00:36:52,500 --> 00:36:52,900
So

706
00:36:57,300 --> 00:37:00,600
I feel like that's the that's the transformation that we want to make.

707
00:37:01,500 --> 00:37:03,600
I feel like that's a transformation we want to make.

708
00:37:04,200 --> 00:37:06,200
So we'd have to have looks like this, right?

709
00:37:06,400 --> 00:37:10,100
We have the view hash which is basically the thing that stores the how

710
00:37:10,100 --> 00:37:14,700
the UI itself is wants to sort of view things like how, what the

711
00:37:14,700 --> 00:37:18,300
status of things is in the UI, we have the debug element hash which

712
00:37:18,300 --> 00:37:22,100
basically says, for anything that we're getting data about, we have a

713
00:37:22,100 --> 00:37:26,000
place where we dump sort of its state over time, which is fine.

714
00:37:32,800 --> 00:37:34,500
And and yeah.

715
00:37:35,100 --> 00:37:39,700
And that seems maybe like it's reasonable enough for now.

716
00:37:41,100 --> 00:37:41,500
I don't know.

717
00:37:48,800 --> 00:37:51,600
So, let's see if I want to do that, right?

718
00:37:51,600 --> 00:37:54,600
And, and I guess the other thing too, is that, like I said, we have

719
00:37:54,600 --> 00:37:59,200
these, the sort of debug UI trees and the debug UI trees, could be

720
00:37:59,200 --> 00:38:02,300
whatever the user wants to build as the user is, like, kind of making

721
00:38:02,300 --> 00:38:05,400
stuff, you know, that they might want to use to view things, or

722
00:38:05,400 --> 00:38:09,300
whatever else are doing, who knows, you could imagine them doing this.

723
00:38:09,600 --> 00:38:11,500
So, as the user, it's like doing that process.

724
00:38:12,700 --> 00:38:14,100
they're creating trees, but

725
00:38:16,100 --> 00:38:19,700
we would also presumably have one canonical tree.

726
00:38:20,200 --> 00:38:25,500
That would work sort of, as the, you know, as this stuff goes, right?

727
00:38:25,800 --> 00:38:29,700
So we've got ground chunks underscore checkerboards and that was, we

728
00:38:29,700 --> 00:38:31,800
were sort of saying we wanted that to mean, like, okay, there's a

729
00:38:31,800 --> 00:38:35,900
ground chunks, like there's a, you know, hierarchical item ground

730
00:38:35,900 --> 00:38:36,400
chunks.

731
00:38:36,600 --> 00:38:40,200
And then underneath the higher Echo, element, ground, chunks.

732
00:38:40,500 --> 00:38:43,800
There is an entry checkerboards, and that's a Boolean that you can

733
00:38:43,800 --> 00:38:44,800
switch on and off.

734
00:38:45,100 --> 00:38:45,600
Right.

735
00:38:46,300 --> 00:38:48,000
So, if you imagine that

736
00:38:49,900 --> 00:38:55,600
Being a thing, then that thing needs to exist somewhere.

737
00:38:55,600 --> 00:38:58,900
As sort of the canonical you I that you can play with right?

738
00:38:58,900 --> 00:38:59,800
A UI that you're not

739
00:39:00,000 --> 00:39:04,700
Editing that you can't screw around with potentially that sort of just

740
00:39:04,700 --> 00:39:06,500
the canonical one that gets built up.

741
00:39:06,900 --> 00:39:10,000
And so what that suggests to me to is like okay there's there's a tree

742
00:39:10,000 --> 00:39:13,800
Sentinel or whatever that has like debug treats in it but then we

743
00:39:13,800 --> 00:39:18,600
probably also have a debug tree that sort of a separate one which is

744
00:39:18,600 --> 00:39:21,500
just like the root tree or I don't know something like that.

745
00:39:22,600 --> 00:39:27,400
Where we would have this this one tree whereas things come in when we

746
00:39:27,400 --> 00:39:29,800
see a new thing we find a place.

747
00:39:30,000 --> 00:39:33,500
Where it should go in the tree, by doing the name matching as we go.

748
00:39:33,500 --> 00:39:37,000
And you know, it gets the thing gets stuck in there.

749
00:39:37,000 --> 00:39:40,500
So I feel like we would also need that because in addition to the

750
00:39:40,500 --> 00:39:43,300
element hash which is just the thing that actually stores the stuff

751
00:39:43,300 --> 00:39:48,700
that we have, we would also sort of have to have this concept of the

752
00:39:48,700 --> 00:39:53,100
tree of the root tree which is sort of the the UI version of that.

753
00:39:53,100 --> 00:39:57,900
So the element hash the sort of the weird thing about this too is the

754
00:39:57,900 --> 00:40:00,000
element hash we probably don't want that.

755
00:40:00,000 --> 00:40:02,800
Has to be particularly large would be my guest as well.

756
00:40:04,300 --> 00:40:07,300
And the reason I say that is because I feel like the element hash is

757
00:40:07,300 --> 00:40:09,800
going to have to be iterated over all the time.

758
00:40:09,800 --> 00:40:14,600
Anyway, because remember anytime we want to free memory we've got to

759
00:40:14,600 --> 00:40:15,600
go through that element.

760
00:40:15,600 --> 00:40:19,800
Hashed find some stuff in it that we're going to free and free it.

761
00:40:19,900 --> 00:40:23,200
So we don't want to be stepping over a huge number of things.

762
00:40:23,400 --> 00:40:26,700
And since there's not going to be that many places in the code

763
00:40:26,700 --> 00:40:32,300
necessarily that have this that have debug points in them, you know,

764
00:40:32,300 --> 00:40:33,900
we're talking about, you know, and

765
00:40:34,100 --> 00:40:35,700
Some kind of a relatively small number.

766
00:40:35,700 --> 00:40:39,900
So when we do that, looping over those variables to do the reclaiming

767
00:40:39,900 --> 00:40:41,300
of memory space.

768
00:40:41,700 --> 00:40:45,800
I feel like that's probably what we would want.

769
00:40:45,800 --> 00:40:48,300
Is a relatively small number of things to Loop over.

770
00:40:49,400 --> 00:40:52,600
Now, there's probably a smarter way again, like I said, to sort of,

771
00:40:54,000 --> 00:40:54,900
To look at this stuff.

772
00:40:54,900 --> 00:40:59,300
But again, I don't want to like make the world's most optimized debug

773
00:40:59,300 --> 00:41:02,900
system that can sort of be an exercise left for the reader of how you

774
00:41:02,900 --> 00:41:05,100
would sort of start to take these Concepts in, like maybe turn the

775
00:41:05,100 --> 00:41:08,700
crank on them a little bit because the, again, the end-user will never

776
00:41:08,700 --> 00:41:09,700
run this code.

777
00:41:10,200 --> 00:41:14,000
So it's strictly like going to be there for for our benefit, which

778
00:41:14,000 --> 00:41:17,100
means if it runs fast enough to be usable in a debugging scenario than

779
00:41:17,100 --> 00:41:18,100
it's fast enough.

780
00:41:19,100 --> 00:41:22,000
So okay, so let's say we did something like that.

781
00:41:23,300 --> 00:41:29,000
Then what would, what that would imply is when we do free frame, then

782
00:41:29,000 --> 00:41:32,000
what we would do is free variable group would not actually be what

783
00:41:32,000 --> 00:41:33,400
would happen, right?

784
00:41:33,400 --> 00:41:37,200
We would free the frame, but we would also then have a thing which

785
00:41:37,200 --> 00:41:38,300
would go through here.

786
00:41:38,300 --> 00:41:43,800
And it would just say like, okay, you know, for all in the debug state

787
00:41:44,000 --> 00:41:48,900
for all of the entries in the hash table of the element, hash

788
00:41:51,800 --> 00:41:54,700
then for all of those Jimmy,

789
00:41:57,900 --> 00:41:59,800
For all of those things, the element hash what?

790
00:42:00,000 --> 00:42:04,900
And want to do is we want to look at the chain as whatever that hash

791
00:42:04,900 --> 00:42:06,000
chain is, right?

792
00:42:06,000 --> 00:42:08,300
Because we've got sort of debug elements here.

793
00:42:08,400 --> 00:42:08,800
Oops.

794
00:42:10,700 --> 00:42:11,700
Debug element.

795
00:42:13,400 --> 00:42:16,500
So in here, where we've got these d block elements, and we've got

796
00:42:16,500 --> 00:42:19,800
these events and then we presumably also have the dual enrollment like

797
00:42:20,000 --> 00:42:23,700
you know, next in hash or whatever if they're in the hash.

798
00:42:23,900 --> 00:42:27,500
So in here we would have to go okay for each debug element in the

799
00:42:27,500 --> 00:42:28,600
chain, right?

800
00:42:28,600 --> 00:42:31,300
So here's the element debug State element.

801
00:42:31,300 --> 00:42:31,900
Hash

802
00:42:32,200 --> 00:42:36,900
I want hash index for each element in the chain.

803
00:42:41,300 --> 00:42:48,000
We want to take a look and for all of the events that have been stored

804
00:42:48,100 --> 00:42:50,500
for this particular element, right?

805
00:42:50,500 --> 00:42:53,900
So, for any event that got attributed to it, we know that we've got

806
00:42:53,900 --> 00:42:57,200
from oldest to most recent, we want to free any of them.

807
00:42:58,800 --> 00:43:03,900
That are before the frame that we're trying to free map, right?

808
00:43:03,900 --> 00:43:06,700
So we're trying to free a particular frame, so anything with that

809
00:43:06,700 --> 00:43:11,600
frame index or earlier should be flushed and so that's a pretty simple

810
00:43:11,600 --> 00:43:12,600
while loop, right?

811
00:43:12,600 --> 00:43:15,300
It's just going to say, while the oldest event.

812
00:43:15,400 --> 00:43:18,300
Whatever that is has.

813
00:43:18,600 --> 00:43:21,600
I guess we should say, first of all, while there is an oldest event

814
00:43:22,100 --> 00:43:24,200
and that oldest events frame index.

815
00:43:27,000 --> 00:43:30,500
Is less than or equal to whatever our frame index is that we're

816
00:43:30,500 --> 00:43:31,000
freeing.

817
00:43:32,400 --> 00:43:34,200
We want to free it, right?

818
00:43:34,200 --> 00:43:39,200
So, we would want to say, okay, this particular, debug stored event.

819
00:43:40,600 --> 00:43:41,500
And you know what?

820
00:43:41,900 --> 00:43:42,600
We wrote.

821
00:43:42,600 --> 00:43:46,400
We already wrote this code, to we wrote this here.

822
00:43:46,400 --> 00:43:49,300
We want to do a free list, deallocate on these

823
00:43:53,200 --> 00:43:56,200
So come through say like, alright for everything in the element hash

824
00:43:56,300 --> 00:44:00,900
if the if the oldest event, if there is an event in there and is

825
00:44:00,900 --> 00:44:04,100
famous is less, then we know that we want to take that guy.

826
00:44:05,600 --> 00:44:09,100
Whatever the oldest event is this is debug what is it called, debug

827
00:44:09,100 --> 00:44:10,000
stored event.

828
00:44:15,400 --> 00:44:16,800
So, this is what we're going to free.

829
00:44:18,200 --> 00:44:18,600
Right.

830
00:44:20,300 --> 00:44:21,600
And we want to

831
00:44:25,000 --> 00:44:28,000
We want to then free it and update the pointers, right?

832
00:44:28,000 --> 00:44:29,200
So we want to say the element.

833
00:44:29,200 --> 00:44:33,800
Oldest event equals the free event next, and then we also want to say

834
00:44:33,800 --> 00:44:38,000
that the oldest event most recent I'm sorry, the element most recent

835
00:44:38,000 --> 00:44:45,000
event if that is equal to the event being freed.

836
00:44:45,600 --> 00:44:49,500
Then we know that you know it's also going to be that but that that

837
00:44:49,500 --> 00:44:52,600
actually means it should also be null, right?

838
00:44:53,600 --> 00:44:58,400
So this dish is really should always just be 0, but whatever we could

839
00:44:58,400 --> 00:44:59,600
even is sort of that

840
00:45:00,000 --> 00:45:00,500
This.

841
00:45:06,300 --> 00:45:10,900
So assuming that we do that, then we want to deallocate here at the

842
00:45:10,900 --> 00:45:13,400
free list pointer would be just in the debug State.

843
00:45:13,400 --> 00:45:16,700
We just have a pool of these guys that just gets recycled.

844
00:45:17,100 --> 00:45:22,900
So that would just be first three stored event.

845
00:45:24,200 --> 00:45:32,800
And this guy is just the element, sorry the the free event.

846
00:45:32,800 --> 00:45:34,800
That's what I meant, right?

847
00:45:36,200 --> 00:45:37,100
So that's it.

848
00:45:37,700 --> 00:45:39,200
That's how we would free a frame.

849
00:45:40,300 --> 00:45:44,000
So we basically free all of the elements in that frame that are no.

850
00:45:44,200 --> 00:45:48,200
All of the elements that exist, currently all of their stored events,

851
00:45:48,200 --> 00:45:52,400
that would have been on, or before that frame, they go away.

852
00:45:54,600 --> 00:45:59,500
And you know, we could be more specific and and do that and just say

853
00:45:59,500 --> 00:46:00,000
it look whatever.

854
00:46:00,000 --> 00:46:03,600
But I feel like I kind of want it to catch all like let's say we free

855
00:46:03,600 --> 00:46:06,800
a frame and then somehow we get an event that comes in late and gets

856
00:46:06,800 --> 00:46:10,900
added you know in there somehow I feel like we want to do something

857
00:46:10,900 --> 00:46:14,700
where we just would make sure that, you know, eventually it would get

858
00:46:14,700 --> 00:46:15,400
cleaned up.

859
00:46:15,400 --> 00:46:19,500
It's probably not necessary but it's just, I'm just kind of saying why

860
00:46:19,500 --> 00:46:20,400
not right?

861
00:46:21,500 --> 00:46:23,700
And so while that's true we just kind of loop through and we just

862
00:46:23,900 --> 00:46:26,100
Pull off and free all of those, right?

863
00:46:26,100 --> 00:46:27,700
And that's and that's all there is.

864
00:46:28,800 --> 00:46:31,500
So that would be how we would free a frame.

865
00:46:31,600 --> 00:46:33,100
There's also in here.

866
00:46:33,100 --> 00:46:38,000
Now, we would, we would have a debug stored Events, first free stored

867
00:46:38,000 --> 00:46:38,700
event,

868
00:46:41,100 --> 00:46:45,200
And whenever we would, you know, after we would for your frame,

869
00:46:45,200 --> 00:46:47,400
whenever we would be coding, debug records.

870
00:46:47,400 --> 00:46:51,100
Now when we would sort of be putting these things into place, then we

871
00:46:51,100 --> 00:46:55,700
would sort of do this, this notion of taking a vent off of the free

872
00:46:55,700 --> 00:46:58,800
list and using it for storage, right?

873
00:47:00,800 --> 00:47:01,600
So there you go.

874
00:47:02,600 --> 00:47:03,700
That's what that is.

875
00:47:04,700 --> 00:47:07,400
So now we need to kind of like press forward a little bit and finish

876
00:47:07,400 --> 00:47:08,600
up the rest of the stuff.

877
00:47:08,700 --> 00:47:09,000
Oops.

878
00:47:11,100 --> 00:47:14,500
And so, again like I said, the question here is we sort of have these

879
00:47:15,200 --> 00:47:21,200
these trees and things and I, you know, I'm wondering, is the tree was

880
00:47:21,200 --> 00:47:21,400
there?

881
00:47:21,400 --> 00:47:22,700
Anything in particular?

882
00:47:22,700 --> 00:47:24,600
Why did we still need the tree?

883
00:47:24,800 --> 00:47:28,000
Can we get rid of the trees and just use variable groups for that?

884
00:47:28,000 --> 00:47:30,000
Is there anything with does a tree?

885
00:47:30,000 --> 00:47:32,500
Do anything that we care about at all?

886
00:47:33,200 --> 00:47:34,500
Is it just because it stores?

887
00:47:34,500 --> 00:47:35,700
Like where it was?

888
00:47:35,900 --> 00:47:39,500
Is that like all we need it for and I think that's, it does appear.

889
00:47:39,500 --> 00:47:40,300
That that's the case.

890
00:47:40,600 --> 00:47:46,700
So really a debug tree like is almost nothing relevant anyway so yeah.

891
00:47:47,100 --> 00:47:51,500
Anyway let's so let's let's go ahead and get rid of all this stuff.

892
00:47:52,000 --> 00:47:55,000
I'm just going to say that this stuff goes away entirely at the moment

893
00:47:56,800 --> 00:47:57,600
and that's fine.

894
00:47:58,200 --> 00:47:59,900
And so let's go ahead and

895
00:48:00,000 --> 00:48:00,700
To compile this.

896
00:48:01,100 --> 00:48:04,800
So now we're talking about the stuff where we have to actually start

897
00:48:04,800 --> 00:48:06,500
to fix up the collation.

898
00:48:06,500 --> 00:48:10,800
And, and I feel like we've got rid right of the, handmade variable

899
00:48:10,800 --> 00:48:15,000
stuff yet, right of debug variable, that's tough slog on, right?

900
00:48:15,000 --> 00:48:15,300
Yeah.

901
00:48:15,400 --> 00:48:18,000
Because then we remember, we previously had a file that had a bunch of

902
00:48:18,000 --> 00:48:18,800
other stuff in there.

903
00:48:19,600 --> 00:48:23,100
So we have this sort of like variable group stuff and I think we

904
00:48:23,100 --> 00:48:27,800
previously were calling them collate and and now we're not anymore.

905
00:48:27,800 --> 00:48:28,200
Yeah.

906
00:48:28,400 --> 00:48:29,800
So all that stuff already got

907
00:48:30,000 --> 00:48:30,700
And up and that's good.

908
00:48:30,700 --> 00:48:33,900
But this stuff is still not really correct, right?

909
00:48:33,900 --> 00:48:38,500
Like this stuff is now kind of still doing doing it the old school way

910
00:48:38,700 --> 00:48:40,600
which is not what we actually wanted to do.

911
00:48:40,900 --> 00:48:44,000
So for example when we do this thing that's called create variable

912
00:48:44,000 --> 00:48:46,700
care where we actually want to be doing now is we want to be doing a

913
00:48:46,700 --> 00:48:50,100
thing where whenever we see something new we're going to be placing it

914
00:48:50,100 --> 00:48:50,800
into this element.

915
00:48:50,800 --> 00:48:56,500
Hash based on some kind of information that we get about it, right?

916
00:48:56,800 --> 00:48:59,900
And so we want to do things here where we're you know this this whole

917
00:49:00,000 --> 00:49:02,600
Situation is now not really correct, right?

918
00:49:02,600 --> 00:49:04,900
So let's take a look at where that's actually happening because it

919
00:49:04,900 --> 00:49:07,300
should only be happening in one place I believe.

920
00:49:07,400 --> 00:49:12,300
Now if I'm not entirely mistaken, where does create variable actually

921
00:49:12,300 --> 00:49:15,900
occur, okay?

922
00:49:15,900 --> 00:49:19,900
It never occurs is that what you're telling me, shouldn't that have

923
00:49:19,900 --> 00:49:24,600
been, okay, cuz it just.

924
00:49:25,000 --> 00:49:29,800
All right, I take it back before the reason that it never happens.

925
00:49:29,900 --> 00:49:31,700
Is because right?

926
00:49:32,100 --> 00:49:36,200
We got rid of the concept that you ever actually create those things

927
00:49:36,200 --> 00:49:36,700
out of mine.

928
00:49:36,800 --> 00:49:38,100
Okay, that's fine.

929
00:49:38,800 --> 00:49:42,000
That's one more thing we don't have to do.

930
00:49:42,000 --> 00:49:42,400
I guess.

931
00:49:43,100 --> 00:49:47,700
So anyway, what that means is now all we have to do right here is this

932
00:49:47,700 --> 00:49:49,900
is this is where everything would happen.

933
00:49:50,100 --> 00:49:52,600
This is where an event comes in that.

934
00:49:52,600 --> 00:49:55,200
Some kind of a type that just means we're seeing event.

935
00:49:55,200 --> 00:49:57,500
That's data that we need stored, right?

936
00:49:58,100 --> 00:50:01,900
It's not something like this where we're seeing a begin block, end

937
00:50:01,900 --> 00:50:05,700
block, although even this right here, instead of creating these

938
00:50:05,700 --> 00:50:09,300
regions, I think this probably is something again that we would want

939
00:50:09,300 --> 00:50:12,400
to create sort of those standing structures for.

940
00:50:12,400 --> 00:50:17,100
So that's actually something that I feel like we probably would want

941
00:50:17,100 --> 00:50:18,600
to have happen as well.

942
00:50:18,600 --> 00:50:23,300
So really, I think this code should probably in here instead of

943
00:50:23,300 --> 00:50:24,100
creating a region.

944
00:50:24,100 --> 00:50:27,700
Like I said, get rid of that concept that region concept entirely.

945
00:50:28,200 --> 00:50:32,000
We can actually make that just be something that gets stored like

946
00:50:32,000 --> 00:50:33,200
everything else is being stored.

947
00:50:33,200 --> 00:50:35,700
So we have the begin block and blocks all again.

948
00:50:35,700 --> 00:50:44,100
Go straight into that that, that key element that the element hash,

949
00:50:44,200 --> 00:50:44,600
right.

950
00:50:48,600 --> 00:50:50,200
I'm actually starting to be pretty happy with this.

951
00:50:50,200 --> 00:50:51,400
I think this is going to come together really.

952
00:50:51,400 --> 00:50:55,600
Nicely takes a long time to get to the right thing, but I think this

953
00:50:55,600 --> 00:50:58,300
is starting to this starting to be like, actually like a little bit

954
00:50:58,300 --> 00:50:59,900
more started to starting.

955
00:51:00,100 --> 00:51:05,000
I feel like it's arriving at a good place to me, and that's nice.

956
00:51:05,400 --> 00:51:07,600
It's like you can tell, I don't know.

957
00:51:07,600 --> 00:51:11,700
It's just I don't know if this is just like having worked on so many

958
00:51:11,700 --> 00:51:14,200
architectural problems in the past.

959
00:51:15,900 --> 00:51:19,400
You never know when you've arrived at like the perfect architecture

960
00:51:19,400 --> 00:51:23,100
necessarily because you never know what you might be missing or what

961
00:51:23,100 --> 00:51:23,700
could be better.

962
00:51:23,700 --> 00:51:27,400
Like, it's hard to always know like what the future could be.

963
00:51:28,500 --> 00:51:34,000
But there's definitely at least from my experience at this point.

964
00:51:34,600 --> 00:51:38,900
There's definitely a feeling that I get when I know, I haven't gotten

965
00:51:38,900 --> 00:51:41,500
to the architecture that I should be doing at the moment.

966
00:51:41,500 --> 00:51:43,900
Like, I haven't gotten to an adequate architecture, right.

967
00:51:43,900 --> 00:51:45,500
I definitely know that.

968
00:51:46,900 --> 00:51:51,200
And before until like, we started thinking about the concept of like,

969
00:51:51,200 --> 00:51:54,100
oh I see there's like these three different things.

970
00:51:54,100 --> 00:51:55,600
There's like the events buffer.

971
00:51:55,900 --> 00:52:00,700
There's the concept of like a static sort of naming of the different

972
00:52:00,700 --> 00:52:02,300
points of the debug.

973
00:52:02,300 --> 00:52:07,300
And then there's the UI hierarchies, and these things are like, you

974
00:52:07,300 --> 00:52:12,000
know, that's sort of the way that they're coming out until that sort

975
00:52:12,000 --> 00:52:14,500
of that locked into place.

976
00:52:15,000 --> 00:52:15,600
I was not.

977
00:52:15,800 --> 00:52:20,600
Getting that feeling of of coalescing, right?

978
00:52:20,600 --> 00:52:23,500
It was just everything was still kind of a little bit.

979
00:52:23,500 --> 00:52:26,600
Like, I don't really know what.

980
00:52:26,600 --> 00:52:29,600
Exactly, I feel like something's a little wrong here.

981
00:52:29,800 --> 00:52:31,200
There's too much stuff.

982
00:52:31,200 --> 00:52:34,500
That's not quite clear about what it should be doing.

983
00:52:34,500 --> 00:52:38,800
And so I like the fact that we, I feel like we've gotten past that

984
00:52:38,800 --> 00:52:39,000
now.

985
00:52:39,000 --> 00:52:40,600
And now, it's just a question of like, okay.

986
00:52:41,100 --> 00:52:45,300
What's a, what's a passable implementation of that thing?

987
00:52:47,100 --> 00:52:51,100
Okay, so again, open data block, closed data block.

988
00:52:52,300 --> 00:52:54,100
These things are.

989
00:52:54,100 --> 00:52:58,700
I believe the only real thing that we care about their is for doing,

990
00:52:58,700 --> 00:53:01,500
like, hierarchical listings of stuff, right?

991
00:53:01,500 --> 00:53:04,600
Like that was all those are really getting used for if I'm not

992
00:53:04,600 --> 00:53:05,300
mistaken.

993
00:53:06,500 --> 00:53:10,000
Like you can see here, we just do like, okay, we open debug block and

994
00:53:10,000 --> 00:53:13,600
that that deep up lock like tells us who like the parent was for our

995
00:53:13,600 --> 00:53:15,200
stuff and all that thing, right?

996
00:53:16,500 --> 00:53:24,100
But I believe that if we have anything else, then like the rest of the

997
00:53:24,100 --> 00:53:28,900
stuff that we're getting is going to be sort of debug marked debug

998
00:53:28,900 --> 00:53:29,900
information, right?

999
00:53:29,900 --> 00:53:30,700
Am I right about that?

1000
00:53:30,700 --> 00:53:32,100
Let me see what we're getting here.

1001
00:53:32,600 --> 00:53:35,900
I guess at the moment now, I think about it, we're really not even

1002
00:53:35,900 --> 00:53:39,900
getting that because at the moment do we even what's the what's the

1003
00:53:39,900 --> 00:53:42,900
actual, what's the actual?

1004
00:53:42,900 --> 00:53:43,900
Oops, I want to be here.

1005
00:53:44,200 --> 00:53:45,600
What's the actual set of things react?

1006
00:53:45,800 --> 00:53:47,900
Get so we get Mark debug value.

1007
00:53:47,900 --> 00:53:50,000
Does that come through every frame?

1008
00:53:50,400 --> 00:53:51,200
They take a look.

1009
00:53:53,200 --> 00:53:54,700
Mark, debug value.

1010
00:53:57,000 --> 00:53:58,200
To to, to do.

1011
00:54:00,000 --> 00:54:00,900
It doesn't so.

1012
00:54:01,100 --> 00:54:04,500
So it seems like

1013
00:54:06,600 --> 00:54:08,700
it seems to me.

1014
00:54:10,700 --> 00:54:15,200
Like, we don't actually.

1015
00:54:18,000 --> 00:54:21,100
Okay, so it looks to me right?

1016
00:54:21,200 --> 00:54:26,900
Like we don't actually ever get the debug variable stuff here.

1017
00:54:27,100 --> 00:54:28,900
We those never come through

1018
00:54:30,100 --> 00:54:32,300
Yeah, those never come through multiple face.

1019
00:54:32,300 --> 00:54:33,400
Those are strictly, right?

1020
00:54:33,400 --> 00:54:37,000
Only, those are ones that basically come from the debug system to the

1021
00:54:37,000 --> 00:54:39,500
program, and they never go back the other way.

1022
00:54:39,800 --> 00:54:44,200
So, it's debug value is the only one that actually ever goes the other

1023
00:54:44,200 --> 00:54:44,800
direction.

1024
00:54:45,100 --> 00:54:51,000
And I just wanted to look and see, what does that come through as when

1025
00:54:51,000 --> 00:54:52,500
we do a debug value.

1026
00:54:52,900 --> 00:54:58,000
So it's an open close data block on the bracketing and then, okay.

1027
00:54:58,000 --> 00:54:59,700
And then it's just the type of

1028
00:54:59,900 --> 00:55:01,300
Thing is just whatever.

1029
00:55:01,300 --> 00:55:05,300
The type of the data was that, it was sending, right?

1030
00:55:05,500 --> 00:55:06,700
So it's just going to come through.

1031
00:55:06,700 --> 00:55:07,300
Is that?

1032
00:55:07,800 --> 00:55:11,000
So in here we are basically getting

1033
00:55:15,000 --> 00:55:17,400
That's basically a cacio and it's not.

1034
00:55:17,400 --> 00:55:19,300
So that's basically getting Mark.

1035
00:55:19,300 --> 00:55:23,200
Debug value is getting handled here, right?

1036
00:55:23,200 --> 00:55:27,200
So here are ones that are that are that we handle specially, right?

1037
00:55:27,500 --> 00:55:29,900
And then out here, here are the data.

1038
00:55:29,900 --> 00:55:33,700
Here is the data stuff that we receive, that's actually just like

1039
00:55:33,700 --> 00:55:35,600
feed-forward data, right?

1040
00:55:36,400 --> 00:55:38,200
And so, the feed forward data,

1041
00:55:40,500 --> 00:55:46,300
I guess we don't have a whole lot of ways to Hash that pointer wise.

1042
00:55:46,300 --> 00:55:50,300
Do we or well, you know, we probably actually do.

1043
00:55:53,500 --> 00:55:56,000
So, I guess, I'm just trying to figure out what is the unique?

1044
00:55:56,000 --> 00:55:58,400
What is the way to identify one of these uniquely?

1045
00:55:58,400 --> 00:56:02,300
I guess, you know, file name line, number right?

1046
00:56:02,300 --> 00:56:04,900
That sort of thing we could certainly use.

1047
00:56:05,200 --> 00:56:09,100
I'm trying to think if we have anything else, when we use debug

1048
00:56:09,100 --> 00:56:10,600
variable, I'm sorry.

1049
00:56:10,600 --> 00:56:13,700
Debug value to output something, right?

1050
00:56:15,400 --> 00:56:19,700
And it looks like, you know, when we do that, we do record debug event

1051
00:56:19,700 --> 00:56:20,200
here.

1052
00:56:20,500 --> 00:56:24,000
I don't know that we ever actually put anything else in there that we

1053
00:56:24,000 --> 00:56:24,900
could use.

1054
00:56:24,900 --> 00:56:28,200
We don't create a static variable, which probably, you know, is for

1055
00:56:28,200 --> 00:56:28,900
the best.

1056
00:56:29,000 --> 00:56:32,500
I don't think we want to constantly be polluting everything with

1057
00:56:32,500 --> 00:56:36,800
static variables that you know, it should be as right, only as

1058
00:56:36,800 --> 00:56:37,900
possible and that sense.

1059
00:56:38,300 --> 00:56:40,300
So I'm not sure what we want to do there.

1060
00:56:40,500 --> 00:56:44,500
We could certainly create something a little bit more.

1061
00:56:45,000 --> 00:56:49,000
Dramatic there, what I'm thinking.

1062
00:56:50,800 --> 00:56:54,300
Is if you look at how debug value works.

1063
00:56:54,300 --> 00:56:59,500
So let's let's just say, right, let's say we were to do something.

1064
00:57:01,000 --> 00:57:07,800
Where we unique a fight it by using the file line.

1065
00:57:08,300 --> 00:57:11,200
We could use like file counter.

1066
00:57:12,600 --> 00:57:16,300
Just file encounter would work, right?

1067
00:57:16,600 --> 00:57:21,600
So picture this normally, you know, in the other code, we could, uh,

1068
00:57:21,600 --> 00:57:26,700
we have the ability to use the address as the hash thing, but in the

1069
00:57:26,700 --> 00:57:30,700
case of the value, we don't have that option, but we could do, right?

1070
00:57:30,700 --> 00:57:35,600
Pretty easily is in this record, debug event thing, we're passing the

1071
00:57:35,600 --> 00:57:36,800
file name here,

1072
00:57:39,100 --> 00:57:44,500
But instead we could pass something which was a little bit more

1073
00:57:44,800 --> 00:57:46,700
descriptive, right?

1074
00:57:46,700 --> 00:57:50,200
Like we could do something that would be guaranteed to be unique for

1075
00:57:50,200 --> 00:57:50,500
example.

1076
00:57:50,500 --> 00:57:53,500
File plus counter would always be unique.

1077
00:57:53,500 --> 00:57:57,800
So you could imagine something that would be like this, right ID or

1078
00:57:57,800 --> 00:57:58,300
whatever.

1079
00:57:58,300 --> 00:58:03,100
Or, you know, you know, unique ID with, or something, right.

1080
00:58:03,400 --> 00:58:07,400
It's grid would be like, oh, whatever the file is, as

1081
00:58:07,600 --> 00:58:13,300
String, and then you can imagine whatever a counter was you know, as a

1082
00:58:13,300 --> 00:58:13,900
string.

1083
00:58:15,900 --> 00:58:20,000
that would be an example and of course we'd have to do the sort of the

1084
00:58:20,000 --> 00:58:25,800
stupid macro trick to get that into you know to get that into a

1085
00:58:27,400 --> 00:58:28,500
Usable format.

1086
00:58:29,800 --> 00:58:34,700
But but that would be a string value and that string value would

1087
00:58:34,700 --> 00:58:39,000
always be unique because there is no way to generate the same.

1088
00:58:39,600 --> 00:58:43,500
You know, the counter will never be the same value and the file always

1089
00:58:43,500 --> 00:58:44,100
unique if eyes it.

1090
00:58:44,100 --> 00:58:47,900
So that even if it was a different translation unit it would be fine.

1091
00:58:49,400 --> 00:58:49,900
I guess now.

1092
00:58:49,900 --> 00:58:52,300
I think about it, if it maybe if it was looking an inline function,

1093
00:58:52,300 --> 00:58:55,200
that might break or something like this, but I feel like that's not

1094
00:58:55,200 --> 00:58:57,000
something we would really care about too much.

1095
00:58:58,000 --> 00:59:03,400
At least not that I can think about so and and for that matter if it

1096
00:59:03,400 --> 00:59:06,400
wasn't an inline function then the static value version wouldn't work

1097
00:59:06,400 --> 00:59:09,300
either because the address of that static variables will be the same

1098
00:59:09,300 --> 00:59:13,500
since the inline function presumably would get you know would get the

1099
00:59:13,500 --> 00:59:14,200
same static.

1100
00:59:14,200 --> 00:59:15,600
I don't know maybe maybe not.

1101
00:59:16,300 --> 00:59:21,800
So I could see doing that which something like you know, unique file

1102
00:59:21,800 --> 00:59:23,300
counter string or something.

1103
00:59:23,300 --> 00:59:26,800
Like this would just be like that sort of a thing.

1104
00:59:29,000 --> 00:59:33,800
And again, we have to do that stupid nonsense that we do every time

1105
00:59:33,900 --> 00:59:35,200
which really is annoying.

1106
00:59:41,300 --> 00:59:46,000
That we talked about before and that would just be this.

1107
00:59:47,800 --> 00:59:50,600
And so, what we do is say okay, we need the unique file counter

1108
00:59:50,600 --> 00:59:51,200
string.

1109
00:59:53,800 --> 00:59:57,400
Oops, there's any file counter string.

1110
00:59:58,100 --> 00:59:59,800
We take the file and we

1111
01:00:00,000 --> 01:00:01,800
The counter and we're done.

1112
01:00:03,700 --> 01:00:07,700
and I think that would be sufficient and then you'd have the grid and

1113
01:00:07,700 --> 01:00:11,600
once you have the grid, you also presumably don't need if you don't

1114
01:00:11,600 --> 01:00:12,400
want to

1115
01:00:15,100 --> 01:00:18,800
We could stop sending the file on line number just to reduce that

1116
01:00:18,800 --> 01:00:20,900
traffic a little bit as well, right?

1117
01:00:20,900 --> 01:00:23,500
We could do something like this if we wanted to

1118
01:00:25,500 --> 01:00:27,100
Where we do file line counter.

1119
01:00:30,000 --> 01:00:31,800
and if we did file line, counter,

1120
01:00:35,700 --> 01:00:39,900
Then what we do is we say, all right, when we produce the string, now

1121
01:00:39,900 --> 01:00:43,100
that we know that it's file line, counter, we could do like, okay.

1122
01:00:43,100 --> 01:00:46,500
We know that the string will have the file name in it and now we want

1123
01:00:46,700 --> 01:00:50,100
to basically create something that's going to be a readable like a

1124
01:00:50,100 --> 01:00:51,000
readable string.

1125
01:00:51,200 --> 01:00:55,000
So it would be the file name, parentheses the line number, right?

1126
01:00:55,500 --> 01:00:59,700
And then maybe we just put a dot in there and then the counter, right?

1127
01:00:59,700 --> 01:01:03,100
So it's like the nth one of these on that line.

1128
01:01:03,200 --> 01:01:04,400
So, in case someone stacked up,

1129
01:01:04,600 --> 01:01:10,200
More than one debug variable on the same line, it would still work in

1130
01:01:10,200 --> 01:01:10,800
theory.

1131
01:01:13,100 --> 01:01:16,200
I think that would work.

1132
01:01:19,700 --> 01:01:20,400
Who knows?

1133
01:01:22,000 --> 01:01:26,300
So if we did it that way, then everything would have a good in it so

1134
01:01:26,300 --> 01:01:30,200
we'd be fine from then on and we don't need any of this stuff anymore

1135
01:01:30,200 --> 01:01:33,600
like that stuff can just go away the block name.

1136
01:01:34,100 --> 01:01:37,800
I suppose maybe we want to still keep it just because we're using that

1137
01:01:37,800 --> 01:01:40,500
for other things but this way we don't actually take up any more

1138
01:01:40,500 --> 01:01:40,900
space.

1139
01:01:40,900 --> 01:01:45,200
In fact, we took up less space and the grid is actually the thing that

1140
01:01:45,200 --> 01:01:48,700
also would allow us to, you know, unique if I things

1141
01:01:49,500 --> 01:01:51,500
And so from, then on, we could just use the event great.

1142
01:01:51,500 --> 01:01:53,200
And that's what we'd use in the hash table.

1143
01:01:53,400 --> 01:01:53,900
Right.

1144
01:01:53,900 --> 01:01:58,000
So, in here, we would just do, you know, like hash this event kind of

1145
01:01:58,000 --> 01:01:58,500
a thing?

1146
01:01:58,800 --> 01:02:00,400
But at this point, we're out of time.

1147
01:02:00,700 --> 01:02:03,400
And so, I'll just leave, I'll leave things because I'm such a nice

1148
01:02:03,400 --> 01:02:04,000
guy.

1149
01:02:04,400 --> 01:02:08,100
I'll leave things in a, in a building state by turning off handmade

1150
01:02:08,100 --> 01:02:10,700
internal for now, but we will undo that.

1151
01:02:10,700 --> 01:02:13,200
So I'm going to go to a brief Q&A just beforehand.

1152
01:02:13,800 --> 01:02:16,000
But yeah, I think we're in good shape.

1153
01:02:16,000 --> 01:02:19,000
We just need a little more programming time, which is hard to come by.

1154
01:02:19,200 --> 01:02:21,700
And meet here because I only get an hour at night, which is not very

1155
01:02:21,700 --> 01:02:22,300
much.

1156
01:02:22,800 --> 01:02:25,600
So if you have any questions about what we're doing so far, go ahead

1157
01:02:25,600 --> 01:02:29,800
and hit me up with those now, but keep in mind, I kind of have to do

1158
01:02:29,800 --> 01:02:33,100
another hour tomorrow to kind of get everything, sort of finished up

1159
01:02:33,100 --> 01:02:34,500
with the hashing, but I think we're good.

1160
01:02:34,500 --> 01:02:35,100
Otherwise,

1161
01:03:44,400 --> 01:03:45,700
No questions.

1162
01:03:54,200 --> 01:03:55,800
Elvin for you.

1163
01:03:55,800 --> 01:03:56,400
I programming.

1164
01:03:56,400 --> 01:04:00,700
What do you think of the model view controller pattern?

1165
01:04:07,800 --> 01:04:09,500
so, I guess what I would say is,

1166
01:04:11,200 --> 01:04:15,400
I think it's close to being the right way to look at you.

1167
01:04:15,400 --> 01:04:18,300
I things or a a right way, a good way.

1168
01:04:18,300 --> 01:04:23,000
Let's say to look at you I things but it's a little bit off.

1169
01:04:25,200 --> 01:04:27,000
like, you know,

1170
01:04:34,400 --> 01:04:39,700
I like to think of things you I wise, in terms of I have definitely

1171
01:04:39,700 --> 01:04:41,800
the view part right of MVC.

1172
01:04:41,800 --> 01:04:45,700
So there's a thing that's going to create, you know, a sort of a

1173
01:04:45,700 --> 01:04:50,000
rendering of some kind of whatever the stuff is that we're working

1174
01:04:50,000 --> 01:04:56,100
with right and the model part makes some sense because you know,

1175
01:04:56,400 --> 01:05:00,500
whatever that thing is that's producing the viewable you know, the

1176
01:05:00,500 --> 01:05:04,100
view of things you need to have something that it's actually sort of.

1177
01:05:05,600 --> 01:05:07,700
That it's a nice, have some database.

1178
01:05:07,700 --> 01:05:11,500
Some some structure that it's you know, that it's actually rendering

1179
01:05:11,500 --> 01:05:16,300
out of so we know we also have some kind of backing model that were

1180
01:05:16,300 --> 01:05:16,900
editing.

1181
01:05:17,400 --> 01:05:20,800
So the model and view part are pretty obviously reasonable ways of

1182
01:05:20,800 --> 01:05:23,500
looking at things, the controller part.

1183
01:05:24,600 --> 01:05:29,600
The thing that I have a little bit of a problem with in MVC is a lot

1184
01:05:29,600 --> 01:05:34,000
of times when it's described, that part is not.

1185
01:05:34,500 --> 01:05:38,700
Really expanded upon to the degree that I think it needs to be in

1186
01:05:38,700 --> 01:05:41,100
order to actually have a functioning system.

1187
01:05:41,300 --> 01:05:49,500
Like controller is, is partially in the view and partially in some

1188
01:05:49,500 --> 01:05:50,000
other code.

1189
01:05:50,000 --> 01:05:53,000
Usually, it's usually controller is really two things.

1190
01:05:53,000 --> 01:05:57,000
One of, which is usually welded to the view in a number of ways,

1191
01:05:57,400 --> 01:05:58,000
right?

1192
01:05:59,000 --> 01:05:59,700
And so,

1193
01:06:00,000 --> 01:06:05,700
Is really like more like model view manipulator.

1194
01:06:08,100 --> 01:06:13,400
Interfere like input processor is really is really the actual thing

1195
01:06:14,000 --> 01:06:15,900
and model-view-controller.

1196
01:06:16,100 --> 01:06:18,900
It makes it seem like controller is actually separate from view

1197
01:06:18,900 --> 01:06:22,300
entirely but the truth is it's not if that makes sense.

1198
01:06:24,400 --> 01:06:28,900
So it's close like considering how old model view controller is, it's

1199
01:06:28,900 --> 01:06:33,100
actually pretty darn good in terms of like how it thinks about things.

1200
01:06:33,300 --> 01:06:34,600
It's just people's

1201
01:06:36,900 --> 01:06:39,800
You have to be careful about what you actually mean when you say it

1202
01:06:39,800 --> 01:06:43,800
because it's easy to put two potentially like Miss the important parts

1203
01:06:43,800 --> 01:06:44,900
of it as guess what I'd say.

1204
01:06:47,800 --> 01:06:52,000
SSS McGrath you can never have too many s's in McGrath.

1205
01:06:53,000 --> 01:06:56,100
Could you talk a bit about other debug systeme stuff, you've done

1206
01:06:56,100 --> 01:06:59,800
before I've done all sorts of debug systems, not much like what you're

1207
01:06:59,800 --> 01:07:02,700
doing now, and I'm curious what other stuff you may have done.

1208
01:07:02,900 --> 01:07:06,700
Just high-level description, one sentence, descriptions are fine.

1209
01:07:10,800 --> 01:07:17,000
So I've done a lot of different debug system things before they range

1210
01:07:17,000 --> 01:07:20,600
from, they're all over the map.

1211
01:07:21,900 --> 01:07:25,800
I don't know if I'm supposed to really talk about mustache which is

1212
01:07:25,800 --> 01:07:31,000
the custom which is the most recent one I did and that was it rad.

1213
01:07:32,200 --> 01:07:38,800
That one is pretty baller and so we'll let that once.

1214
01:07:39,000 --> 01:07:41,200
For a minute, I've done one.

1215
01:07:41,200 --> 01:07:43,300
So granny, had a pretty interesting one.

1216
01:07:45,000 --> 01:07:49,800
And I think it eventually got removed after my my tenure there.

1217
01:07:49,800 --> 01:07:50,500
I'm not sure anyone.

1218
01:07:50,500 --> 01:07:52,400
Even knew it was there besides me.

1219
01:07:52,500 --> 01:07:56,900
But basically the way, the debug system worked in granny was pretty

1220
01:07:56,900 --> 01:08:03,300
funny, the dll itself had some debug infrastructure in it.

1221
01:08:04,600 --> 01:08:08,900
And what it would do is you could actually make a call in to the dll.

1222
01:08:10,400 --> 01:08:14,100
And say, give me the root pointer back to the debug system.

1223
01:08:15,200 --> 01:08:17,300
And then there was a tray application.

1224
01:08:17,300 --> 01:08:22,800
You could run that was like granny debug View and that tray

1225
01:08:22,800 --> 01:08:23,800
application.

1226
01:08:24,399 --> 01:08:30,100
It was lookin anytime, the granny dll was running, it would call into

1227
01:08:30,100 --> 01:08:34,300
it, and it would get that debug information out of it.

1228
01:08:34,500 --> 01:08:38,500
So you could in the tray app, look at any running granny applications

1229
01:08:38,500 --> 01:08:43,000
that were there and go show me all of the stuff that's in them, right?

1230
01:08:43,500 --> 01:08:44,800
And that was kind of fun because

1231
01:08:44,899 --> 01:08:49,000
As it's a, just a nice way of like being able to kind of like, have a,

1232
01:08:49,500 --> 01:08:53,800
an outboard thing that inspects the debug information inside a running

1233
01:08:53,800 --> 01:08:54,700
application.

1234
01:08:55,300 --> 01:08:57,700
As it's running, it's just kind of interesting.

1235
01:09:00,700 --> 01:09:02,100
So that was a bit of a fun one.

1236
01:09:04,399 --> 01:09:08,000
I've definitely done ones that are kind of like the way that I'm doing

1237
01:09:08,000 --> 01:09:12,600
it now on the event side of things, there was a new streaming event

1238
01:09:12,600 --> 01:09:13,600
models like that.

1239
01:09:15,300 --> 01:09:24,200
But they they the other the collation side of things, it doesn't I've

1240
01:09:24,200 --> 01:09:24,800
never done one.

1241
01:09:24,800 --> 01:09:28,399
That's like, does sort of the stuff that we're doing in there now, but

1242
01:09:28,399 --> 01:09:30,200
I've done ones that do like, sort of

1243
01:09:30,600 --> 01:09:33,500
Just writing it debug events to a log, kind of a thing.

1244
01:09:34,200 --> 01:09:39,200
And I'm kind of in the middle of one of those right now for our code

1245
01:09:39,200 --> 01:09:43,700
base at Molly rocket, that hasn't quite reached maturity yet and it's

1246
01:09:43,700 --> 01:09:46,700
a little bit different because the way that it's meant to be one that

1247
01:09:46,700 --> 01:09:53,000
works sort of in an expandable buffer way and like it's, it's kind of

1248
01:09:53,000 --> 01:09:55,300
got different goals as to what it does.

1249
01:09:55,600 --> 01:09:57,700
So that one's a little bit different than this one and I'm not sure

1250
01:09:57,700 --> 01:10:00,200
there's anything particularly relevant to say about it other than it's

1251
01:10:00,200 --> 01:10:00,300
like,

1252
01:10:00,400 --> 01:10:05,400
Like it's it's meant to be a little more system Z.

1253
01:10:05,400 --> 01:10:08,700
It's meant to be a little more kernel log style, kind of a thing than

1254
01:10:08,700 --> 01:10:13,300
it is like this, which is meant for just dumping a bunch of sort of

1255
01:10:13,300 --> 01:10:14,800
data into it or that sort of thing.

1256
01:10:16,600 --> 01:10:20,800
And then mustache is the one that has most the most crazy stuff in it.

1257
01:10:22,300 --> 01:10:23,400
That one has stuff.

1258
01:10:23,400 --> 01:10:29,500
That's like, literally it seems like magic when you actually if you

1259
01:10:29,500 --> 01:10:30,400
just use it.

1260
01:10:30,400 --> 01:10:32,800
But then if you think about it, you're like, oh wait, no, right,

1261
01:10:32,800 --> 01:10:33,500
that's not magic.

1262
01:10:33,500 --> 01:10:35,400
You can just do that if you want.

1263
01:10:37,200 --> 01:10:39,600
and that one does stuff that's like, oh,

1264
01:10:41,000 --> 01:10:45,000
That one, basically, supports back Tracy, sorts of things for a lot

1265
01:10:45,000 --> 01:10:45,900
for lack of better term.

1266
01:10:46,200 --> 01:10:50,600
That one does stuff like, oh, here's a pixel on the screen, tell me

1267
01:10:50,800 --> 01:10:53,800
like how it got there, right?

1268
01:10:54,100 --> 01:10:58,900
And it's so, it's sort of like, you know, like like pics or one of

1269
01:10:58,900 --> 01:11:02,400
those debugging systems that they have imagined having a system like

1270
01:11:02,400 --> 01:11:05,100
that, but just for your general code base, right?

1271
01:11:05,300 --> 01:11:08,000
And that's, that's what it, it sort of did.

1272
01:11:13,100 --> 01:11:14,400
Chris 0.

1273
01:11:14,400 --> 01:11:16,500
Can you explain what the macro nastiness?

1274
01:11:16,500 --> 01:11:17,100
Exactly.

1275
01:11:17,100 --> 01:11:17,300
Does.

1276
01:11:17,300 --> 01:11:19,300
Why do you have to underscore levels?

1277
01:11:19,300 --> 01:11:25,000
We covered this a couple episodes ago so you're going to want to go

1278
01:11:25,000 --> 01:11:25,800
back and look at that.

1279
01:11:25,800 --> 01:11:28,900
I gave a complete exercise basically, just because the preprocessor

1280
01:11:28,900 --> 01:11:37,400
treats variables that are passed into it or that are intrinsic to it

1281
01:11:37,400 --> 01:11:42,800
differently, then, variables that have been passed in more than

1282
01:11:43,000 --> 01:11:43,600
It's right.

1283
01:11:43,600 --> 01:11:49,100
So like every time you use a variable just to give the capsule

1284
01:11:49,100 --> 01:11:49,800
definition.

1285
01:11:50,200 --> 01:11:53,600
So if I was to do this

1286
01:11:55,400 --> 01:11:56,400
That up.

1287
01:11:56,400 --> 01:11:59,700
Sorry this that would not give me a

1288
01:12:00,200 --> 01:12:01,500
That was the line number.

1289
01:12:01,600 --> 01:12:04,600
It would give me the string underscore underscore a line underscore

1290
01:12:04,600 --> 01:12:05,900
underscore, right?

1291
01:12:06,200 --> 01:12:09,600
So the first time you pass it in your trying to pass it in so that you

1292
01:12:09,600 --> 01:12:12,000
actually get it into a variable right?

1293
01:12:12,400 --> 01:12:13,300
The next time.

1294
01:12:13,400 --> 01:12:17,800
But but if I did it here, I would actually get the parameter be like

1295
01:12:17,800 --> 01:12:18,400
the comes through.

1296
01:12:18,400 --> 01:12:19,700
I think it's, I can't remember.

1297
01:12:19,700 --> 01:12:19,800
Zack.

1298
01:12:19,800 --> 01:12:22,500
What is so you need to pass it in a second time.

1299
01:12:22,500 --> 01:12:28,400
In order to then turn it into an actual different variable than the

1300
01:12:28,400 --> 01:12:29,900
actual word.

1301
01:12:30,000 --> 01:12:31,300
The score underscore line.

1302
01:12:31,600 --> 01:12:38,200
It's just C++ preprocessor, Ridiculousness, and I never remember the

1303
01:12:38,200 --> 01:12:38,900
rules for this.

1304
01:12:39,000 --> 01:12:43,200
I should go read them some time, and then just know, I never remember

1305
01:12:43,200 --> 01:12:48,100
the rules for it, so it may be that you don't actually need another

1306
01:12:48,100 --> 01:12:49,500
one, right.

1307
01:12:49,600 --> 01:12:54,500
It's probably not necessary to have this one, but I never bother to

1308
01:12:54,500 --> 01:12:57,700
actually remember exactly how the replacement rules work.

1309
01:12:57,700 --> 01:12:59,800
So, I just put in, I usually

1310
01:13:00,000 --> 01:13:04,400
And one extra one for no, no good reason.

1311
01:13:14,000 --> 01:13:15,000
Let's see.

1312
01:13:15,100 --> 01:13:18,900
Sizzle 182 would you say that your engine makes it easy for a new

1313
01:13:18,900 --> 01:13:21,200
programmer to come in and add functionality?

1314
01:13:22,800 --> 01:13:25,800
I don't know that.

1315
01:13:25,800 --> 01:13:30,700
Not really something I care about if that makes sense because there

1316
01:13:30,700 --> 01:13:32,600
are no other programmers on this project.

1317
01:13:32,600 --> 01:13:37,600
So it's not really a goal if that makes sense.

1318
01:13:39,800 --> 01:13:43,000
So I would say that it's easy for me to

1319
01:13:43,200 --> 01:13:46,300
Come in and add functionality, which is what I care about.

1320
01:13:48,500 --> 01:13:50,400
Elvin, I was employing, Shadow mapping in opengl.

1321
01:13:50,400 --> 01:13:55,000
It seems that there's a lot of issues and artifacts and to work around

1322
01:13:55,000 --> 01:13:55,200
those.

1323
01:13:55,200 --> 01:13:56,900
You end up with something more comics expensive.

1324
01:13:56,900 --> 01:14:01,400
I kind of find it hard to kind of find it hard that games that

1325
01:14:01,400 --> 01:14:04,700
defendant graph so hard to believe that games are decent Graphics.

1326
01:14:04,700 --> 01:14:07,400
Do this technique, do you know of any other good way to implement

1327
01:14:07,400 --> 01:14:08,000
Shadows?

1328
01:14:08,400 --> 01:14:10,800
Or we just have to work around its limitations.

1329
01:14:13,400 --> 01:14:16,500
So, yeah, I mean, it depends what kind of Shadows are talking about.

1330
01:14:16,500 --> 01:14:19,100
So if you're talking about Shadow mapping, your presumably talking

1331
01:14:19,100 --> 01:14:24,100
about hard-edged Shadows or relatively hard and shadows as opposed to

1332
01:14:24,100 --> 01:14:28,700
General light occlusion, where you be talking about something more

1333
01:14:28,700 --> 01:14:33,000
like, you know, a, you know, radiosity ish, right?

1334
01:14:34,700 --> 01:14:36,900
Like you're talking about, you talk about direct lighting, not

1335
01:14:36,900 --> 01:14:38,900
multiple bounce, is I assume what you're talking about?

1336
01:14:40,200 --> 01:14:49,200
And what I would say about that is I agree with your sort of your gut,

1337
01:14:49,200 --> 01:14:51,400
take on the shadow mapping, I've never liked it.

1338
01:14:51,400 --> 01:14:56,300
You do have to do a lot of ridiculousness, like Cascade Shadow maps

1339
01:14:56,300 --> 01:14:59,900
are for example, a very common thing now, which is obviously more,

1340
01:15:00,000 --> 01:15:02,500
Complicated than Shadow mapping and you're doing all these things to

1341
01:15:02,500 --> 01:15:06,600
try and improve the resolution from the vantage point of the viewer

1342
01:15:06,600 --> 01:15:07,800
and all this other nonsense.

1343
01:15:08,300 --> 01:15:09,300
And it is kind of lame.

1344
01:15:10,900 --> 01:15:13,700
As for what the alternatives are, no, there's not a lot of

1345
01:15:13,700 --> 01:15:17,300
Alternatives, you know, one of the things that people are actually

1346
01:15:17,300 --> 01:15:17,800
starting to do.

1347
01:15:17,800 --> 01:15:21,800
Now is actually doing some, some Ray tracing of stuff and other things

1348
01:15:21,800 --> 01:15:24,700
like this because they've got the extra horsepower to do it.

1349
01:15:25,100 --> 01:15:28,100
And so if you think about it I feel like in the future it's entirely

1350
01:15:28,100 --> 01:15:32,900
possible that direct lighting will be more Ray Tracy just because that

1351
01:15:32,900 --> 01:15:37,800
eliminates all of those resolution artifacts and you're starting to

1352
01:15:37,800 --> 01:15:39,200
have enough horsepower to do that.

1353
01:15:39,200 --> 01:15:40,500
Like right now, if

1354
01:15:40,700 --> 01:15:43,100
Wanted to retrace shadows in a game.

1355
01:15:43,100 --> 01:15:48,500
I think you just could you probably have enough horsepower to do that,

1356
01:15:48,800 --> 01:15:53,500
you know, and so, you know, really when you talk about the fact that

1357
01:15:53,500 --> 01:15:56,300
we don't can't really do rate racing games, what we mean is we can't

1358
01:15:56,300 --> 01:15:59,200
really do ray tracing of indirect Lighting in the kinds of stuff that

1359
01:15:59,200 --> 01:16:00,200
you might want to do, right?

1360
01:16:00,200 --> 01:16:03,300
But you could absolutely do direct lighting ray-tracing I think at

1361
01:16:03,300 --> 01:16:07,600
this point and so, you know, maybe that will be a way that we can get

1362
01:16:07,600 --> 01:16:09,700
out of that in the future.

1363
01:16:09,700 --> 01:16:10,300
But

1364
01:16:12,700 --> 01:16:18,500
You know, the the thing to remember is Ray tracing quickly is a real

1365
01:16:18,500 --> 01:16:19,700
pain in the butt as well.

1366
01:16:19,900 --> 01:16:24,500
And so, you know, unless you're talking about like voxel Ray tracing,

1367
01:16:24,500 --> 01:16:28,500
which is again, another kind of technique that's starting to look like

1368
01:16:28,500 --> 01:16:31,900
maybe it's useful or whatever, unless you're digging my Seng voxel,

1369
01:16:31,900 --> 01:16:34,900
Ray, tracing where the ray tracing really can happen entirely on the

1370
01:16:34,900 --> 01:16:35,900
3D card.

1371
01:16:36,900 --> 01:16:40,500
You've got this nasty problem of, and when I say happening,

1372
01:16:40,700 --> 01:16:42,200
On three credit cards that wider me.

1373
01:16:43,200 --> 01:16:46,000
We're talking about voxel, refacing, you're talking about something

1374
01:16:46,000 --> 01:16:49,000
that can happen entirely in a forward mapping sense.

1375
01:16:49,000 --> 01:16:53,100
Meaning, you feed triangles into it, it rasterizes the triangles into

1376
01:16:53,100 --> 01:16:59,600
the voxel grid and then it traces them back through there, if you're

1377
01:16:59,600 --> 01:17:00,500
not sorry, messing with that.

1378
01:17:00,500 --> 01:17:03,200
Then you have this sort of problem of you've got to do stuff like

1379
01:17:03,200 --> 01:17:07,200
building KD trees or other accelerated structures for doing the ray

1380
01:17:07,200 --> 01:17:08,000
tracing.

1381
01:17:08,200 --> 01:17:12,700
And so you're ending up creating again, a very complex system.

1382
01:17:14,200 --> 01:17:15,200
To do the Shadows.

1383
01:17:15,200 --> 01:17:18,100
So, even though you now don't have to implement a complex Shadow

1384
01:17:18,100 --> 01:17:20,800
mapping thing, you do have to implement a complex, spatial query

1385
01:17:20,800 --> 01:17:21,300
thing.

1386
01:17:22,400 --> 01:17:25,600
And so I don't really know what's going to shake out there and I don't

1387
01:17:25,600 --> 01:17:30,700
stay that up on those things these days because I not doing a 3D, I'm

1388
01:17:30,700 --> 01:17:35,000
not doing a 3D sort of lighting kind of thing like that for our game

1389
01:17:35,000 --> 01:17:35,700
at Molly.

1390
01:17:36,200 --> 01:17:39,300
So I haven't looked at what the latest stuff is that.

1391
01:17:39,300 --> 01:17:40,700
People tend to do, that's good.

1392
01:17:42,100 --> 01:17:46,200
So I don't know but all I would say is that yeah it's kind of a nasty

1393
01:17:46,200 --> 01:17:49,700
problem because the the reason that shadow maps are valuable, the

1394
01:17:49,700 --> 01:17:53,400
reason that they work well is there forward mapping?

1395
01:17:53,500 --> 01:17:56,500
You dump a bunch of triangles into them the same way that you dump

1396
01:17:56,500 --> 01:17:58,700
triangles into the renderer right?

1397
01:17:58,700 --> 01:17:59,800
You just you don't

1398
01:18:00,000 --> 01:18:04,100
I have to have a bunch of code that does spatial partitioning or other

1399
01:18:04,100 --> 01:18:08,900
things, too that you just run the same sort of stuff you would run.

1400
01:18:08,900 --> 01:18:12,900
If you rendered, you can, you can use that for shadowing and that's a

1401
01:18:12,900 --> 01:18:16,500
pretty compelling use case, right?

1402
01:18:16,500 --> 01:18:20,700
Whereas most other things involved sort of these, these more

1403
01:18:20,700 --> 01:18:24,700
complicated structures and that point you're back to having a complex

1404
01:18:24,700 --> 01:18:25,600
thing you have to do.

1405
01:18:26,500 --> 01:18:29,300
And so that's again, one of the reasons why the voxel stuff is kind of

1406
01:18:29,300 --> 01:18:29,800
interesting.

1407
01:18:30,000 --> 01:18:32,900
Seeing as it's going currently because it's still a very feed-forward

1408
01:18:32,900 --> 01:18:33,600
sort of a thing.

1409
01:18:33,600 --> 01:18:37,100
There's no commune ever, compare triangles with other triangles or

1410
01:18:37,300 --> 01:18:38,200
things like that.

1411
01:18:38,200 --> 01:18:41,700
You're always just dumping things into a very straightforward.

1412
01:18:41,700 --> 01:18:47,000
Rasterization looking Pipeline and outcomes, some stuff, right?

1413
01:18:48,000 --> 01:18:48,700
So I don't know.

1414
01:19:07,700 --> 01:19:09,300
Let's see.

1415
01:19:09,800 --> 01:19:13,500
Brutal excesses the mobile platform, limit to Android only excluding

1416
01:19:13,500 --> 01:19:14,900
iOS for any particular reason.

1417
01:19:15,100 --> 01:19:24,200
Yes, so handmade hero is I am not ever going to allow it to be on

1418
01:19:24,200 --> 01:19:26,200
platforms that are closed.

1419
01:19:26,400 --> 01:19:32,900
So if you can't, if an end user is not allowed to just load the the

1420
01:19:32,900 --> 01:19:36,200
handmade hero directly onto their device, then we will not be

1421
01:19:36,600 --> 01:19:37,500
In that platform.

1422
01:19:38,300 --> 01:19:40,600
And so iOS, of course does not allow that.

1423
01:19:40,600 --> 01:19:46,900
The only way that you can do that on iOS is, if you jailbreak, you

1424
01:19:46,900 --> 01:19:49,400
have to basically use something that Apple doesn't approve to like

1425
01:19:50,400 --> 01:19:54,400
jailbreak the phone, and in fact, that was illegal up until recently

1426
01:19:54,400 --> 01:19:58,000
until the until the Library of Congress passed an exemption for it.

1427
01:19:58,000 --> 01:20:00,300
So it was actually even illegal to do it.

1428
01:20:01,700 --> 01:20:02,600
If you can believe that.

1429
01:20:02,600 --> 01:20:05,600
And so yeah, so until Apple changes

1430
01:20:06,500 --> 01:20:10,200
They're really what I would consider pretty much anti developer

1431
01:20:10,200 --> 01:20:10,900
policy.

1432
01:20:11,600 --> 01:20:14,500
We will not support them in any way on any platform.

1433
01:20:21,700 --> 01:20:22,200
K.

1434
01:20:22,200 --> 01:20:25,800
What if we just blur the edges of the Shadows gaussian blur?

1435
01:20:26,900 --> 01:20:30,000
So, that's not the problem with shadows.

1436
01:20:30,300 --> 01:20:34,700
That's not the best, not what you're seeing when you look at shadows

1437
01:20:34,700 --> 01:20:35,700
and see problems.

1438
01:20:36,200 --> 01:20:39,900
It's not because the edges are don't have enough resolution.

1439
01:20:39,900 --> 01:20:43,000
It's because of the depth doesn't have enough resolution.

1440
01:20:43,200 --> 01:20:46,500
So blurring, it doesn't help because it just means that you'll get

1441
01:20:46,500 --> 01:20:50,100
blurry, Flickr instead of solid

1442
01:20:50,300 --> 01:20:51,400
Flicker, right?

1443
01:20:52,800 --> 01:20:56,500
And and the problem is the flicker, not the fact that it's hard,

1444
01:20:56,800 --> 01:20:57,300
right?

1445
01:20:57,900 --> 01:20:59,800
It was just the fact that the edge is hard then.

1446
01:21:00,000 --> 01:21:00,400
Yeah.

1447
01:21:03,800 --> 01:21:04,100
K.

1448
01:21:04,100 --> 01:21:06,600
Do you think namespace is actually solve the problem of many

1449
01:21:06,600 --> 01:21:09,500
collisions or there's no need for them in the usual, see style system

1450
01:21:09,500 --> 01:21:10,800
named functions of Isis.

1451
01:21:11,500 --> 01:21:16,200
Well, namespaces have a bonus Over the Sea style system name

1452
01:21:16,200 --> 01:21:19,600
underscore function because you can use the using declaration to pull

1453
01:21:19,600 --> 01:21:21,900
them in and not have to do the underscore.

1454
01:21:22,100 --> 01:21:25,100
So they do have a little bit of a benefit, right?

1455
01:21:25,100 --> 01:21:27,200
Is it enough of a benefit for me to ever really care about it?

1456
01:21:27,200 --> 01:21:30,600
No, but it's not completely useless, right?

1457
01:21:32,200 --> 01:21:33,200
Jeepers, Caleb, yes.

1458
01:21:33,200 --> 01:21:34,100
But how is Windows?

1459
01:21:34,100 --> 01:21:34,900
Any different.

1460
01:21:35,000 --> 01:21:36,400
Don't need to compile Windows programs.

1461
01:21:36,400 --> 01:21:37,300
On Windows.

1462
01:21:39,000 --> 01:21:40,500
I'm not here about compiling them.

1463
01:21:40,600 --> 01:21:45,600
I'm talking about being able to run them, so on an iOS device.

1464
01:21:46,900 --> 01:21:52,500
If I build a executable right, I can't send it to you and have you put

1465
01:21:52,500 --> 01:21:53,400
it on your device?

1466
01:21:53,700 --> 01:21:57,500
You need to be apple developer, you need to pay $90 and you need to

1467
01:21:57,500 --> 01:22:01,400
get a signing certificate to put it on your device, right?

1468
01:22:02,800 --> 01:22:09,900
And so, as a developer, if I pay my $90, I have the ability to sign an

1469
01:22:09,900 --> 01:22:11,900
executable and put it on some number.

1470
01:22:11,900 --> 01:22:12,300
I don't remember.

1471
01:22:12,300 --> 01:22:16,000
The number is 100, something like that, and if you want to put it on,

1472
01:22:16,000 --> 01:22:16,500
more than that,

1473
01:22:16,700 --> 01:22:18,000
To go through the app store, right?

1474
01:22:18,000 --> 01:22:19,200
Or blah, blah blah blah, blah.

1475
01:22:20,200 --> 01:22:21,300
It's all just a complete.

1476
01:22:21,300 --> 01:22:22,000
It's ridiculous.

1477
01:22:22,000 --> 01:22:26,000
It's completely Draconian and I don't approve of that at all on

1478
01:22:26,000 --> 01:22:26,300
Windows.

1479
01:22:26,300 --> 01:22:27,600
That's not the case at all on Windows.

1480
01:22:27,600 --> 01:22:30,200
I can build this executable and I can send it to you and you can run

1481
01:22:30,200 --> 01:22:33,600
it, you can build this executable, nobody had to pay Microsoft right

1482
01:22:34,400 --> 01:22:37,100
now on the Windows store side of things.

1483
01:22:37,200 --> 01:22:41,100
So if you wanted to use Windows RT, the new programming environment.

1484
01:22:41,400 --> 01:22:43,500
All the standard Apple stuff applies again.

1485
01:22:44,300 --> 01:22:46,300
And that's why we don't support that.

1486
01:22:46,700 --> 01:22:48,600
So we will not be supporting the Windows store, either.

1487
01:22:48,600 --> 01:22:53,500
The Windows store can can go die in a discussed in a horribly

1488
01:22:53,500 --> 01:22:54,700
disfiguring, fire.

1489
01:22:55,900 --> 01:22:59,600
And all of the people who are responsible for, it can also be welcome

1490
01:22:59,600 --> 01:23:00,700
to be in that fire.

1491
01:23:01,000 --> 01:23:03,600
And if they need a little push into that fire, I'm happy to be the

1492
01:23:03,600 --> 01:23:05,600
foot that it does that.

1493
01:23:06,200 --> 01:23:10,300
Because again, I hate anti developed for stuff because I am a

1494
01:23:10,300 --> 01:23:10,900
developer

1495
01:23:12,000 --> 01:23:15,900
I've lived for 30 years in an environment where you were able to

1496
01:23:15,900 --> 01:23:17,000
develop stuff.

1497
01:23:18,400 --> 01:23:20,800
And not have to go through these things.

1498
01:23:20,800 --> 01:23:24,600
And I think that it's it's just basically pure greed.

1499
01:23:24,600 --> 01:23:33,200
And and sort of, I don't know what you want to call it despotism and,

1500
01:23:33,200 --> 01:23:34,400
and I am.

1501
01:23:35,400 --> 01:23:39,400
I cannot tell you how angry it makes me.

1502
01:23:39,400 --> 01:23:43,000
It's, it is not a case of capitalism.

1503
01:23:43,000 --> 01:23:44,600
It's not a case of Economics.

1504
01:23:44,600 --> 01:23:47,800
It's a case of like just fundamental rights for me.

1505
01:23:48,400 --> 01:23:52,500
and the concept that you can sell a computer, these days that a

1506
01:23:52,500 --> 01:23:55,700
programmer is not allowed to write programs for, without your

1507
01:23:55,700 --> 01:23:59,700
permission is like if I were in charge of the world, that would be

1508
01:24:00,000 --> 01:24:01,200
Punishable by death.

1509
01:24:01,300 --> 01:24:05,400
It'd be like you are just marched into a room and like we are never

1510
01:24:05,400 --> 01:24:06,100
heard from again.

1511
01:24:06,100 --> 01:24:09,300
If you do that it's like it's the worst offense, you can do, right?

1512
01:24:09,300 --> 01:24:11,200
It's kind of like, in my mind.

1513
01:24:11,200 --> 01:24:16,200
It's equivalent to like quite literally.

1514
01:24:16,200 --> 01:24:22,100
It's equivalent to like what, you know, the old sort of 1984 style

1515
01:24:22,100 --> 01:24:23,100
regimes do.

1516
01:24:23,200 --> 01:24:29,000
It's the it's the equivalent of like the media sensor lock down like

1517
01:24:29,000 --> 01:24:29,900
we control, what you

1518
01:24:30,000 --> 01:24:33,000
You can think and say thing, like that sigh, those, I put them in the

1519
01:24:33,000 --> 01:24:35,300
same category, like the worst kind.

1520
01:24:37,100 --> 01:24:43,400
They're the worst kind of systemic like oppressors, right in my mind.

1521
01:24:43,400 --> 01:24:45,100
And the reason for that is very simple, right?

1522
01:24:45,200 --> 01:24:48,000
I've been in development since I was seven years old, there's, if you

1523
01:24:48,000 --> 01:24:55,500
tell me I can't publish a book, I am less upset about that.

1524
01:24:55,500 --> 01:24:58,800
Than, if you tell me, I can't publish a program, right?

1525
01:24:59,200 --> 01:24:59,800
And so,

1526
01:25:00,300 --> 01:25:06,400
Like in general, I feel like to me the right to publish a program is a

1527
01:25:06,400 --> 01:25:07,800
fundamental right.

1528
01:25:08,200 --> 01:25:12,700
And it's unconscionable to me that you are not allowed to do that.

1529
01:25:12,700 --> 01:25:13,900
It should be like.

1530
01:25:14,300 --> 01:25:19,000
That should just be a fundamental thing that you are allowed to do.

1531
01:25:19,300 --> 01:25:25,500
And, and so yeah, again, it makes me it makes me absolutely Furious

1532
01:25:25,500 --> 01:25:29,700
and it's just completely like, you know, that that would be, that

1533
01:25:29,700 --> 01:25:29,800
would be

1534
01:25:29,900 --> 01:25:31,100
Be the one like thing.

1535
01:25:31,100 --> 01:25:34,800
You're never that you can't do like with there's no possible way for

1536
01:25:34,800 --> 01:25:37,800
clemency if you if you ship a hardware platform that people aren't

1537
01:25:37,800 --> 01:25:38,700
allowed to develop.

1538
01:25:38,700 --> 01:25:40,600
For then you can't.

1539
01:25:40,600 --> 01:25:42,900
There's literally no defense for it in court, right?

1540
01:25:42,900 --> 01:25:46,200
In the court of mirror Tori, you are just permanently sentenced to

1541
01:25:46,200 --> 01:25:48,100
death and you're gone, right?

1542
01:25:48,100 --> 01:25:50,200
You're just we'd never hear from get everything else.

1543
01:25:50,200 --> 01:25:54,700
There's plenty of, you know, there's, there's plenty of Mercy for you.

1544
01:25:54,900 --> 01:25:58,000
We were happy to hear your explanation for why you did it.

1545
01:25:58,500 --> 01:25:59,800
We will try to

1546
01:26:00,000 --> 01:26:01,200
Take you as a person.

1547
01:26:02,000 --> 01:26:09,200
We will we will, you know, look upon you with with, with

1548
01:26:09,200 --> 01:26:10,100
understanding.

1549
01:26:10,700 --> 01:26:13,400
But if you ship a hardware platform that you don't allow people to

1550
01:26:13,400 --> 01:26:20,300
program for do to your sort of like your avarice and greed or whatever

1551
01:26:20,300 --> 01:26:22,000
it is, then than that.

1552
01:26:22,000 --> 01:26:22,500
Sorry.

1553
01:26:23,300 --> 01:26:27,500
There's there are no defenses for it and then we're going to grind you

1554
01:26:27,500 --> 01:26:29,800
up for sausage to feed to feed hungry people.

1555
01:26:29,900 --> 01:26:30,200
Apple.

1556
01:26:39,700 --> 01:26:40,500
All right.

1557
01:26:52,200 --> 01:26:54,100
Looks like we are done with the q's.

1558
01:27:03,300 --> 01:27:05,600
I'm going to close down.

1559
01:27:06,500 --> 01:27:07,200
Yes.

1560
01:27:10,400 --> 01:27:13,900
And yes, there we go.

1561
01:27:15,600 --> 01:27:18,200
Well, thank you for joining for another episode of handmade here.

1562
01:27:18,200 --> 01:27:19,100
It's my pleasure coding with you.

1563
01:27:19,100 --> 01:27:22,200
As always, we're not quite finished with the thing that we want to do

1564
01:27:22,200 --> 01:27:22,400
today.

1565
01:27:22,400 --> 01:27:24,800
So we'll pick that up again tomorrow 5 p.m.

1566
01:27:24,800 --> 01:27:25,600
service center time.

1567
01:27:25,600 --> 01:27:29,700
Hope to see you all here and looking forward to wrapping up the debug

1568
01:27:29,700 --> 01:27:30,200
system to.

1569
01:27:30,200 --> 01:27:32,300
I hope it's good in the end.

1570
01:27:32,900 --> 01:27:37,300
I think we kind of went through a number like I said, it's it's

1571
01:27:37,300 --> 01:27:40,000
actually one of the most serious architectural things we've done so

1572
01:27:40,000 --> 01:27:40,400
far.

1573
01:27:41,700 --> 01:27:44,900
And I feel like it's kind of important to sort of look back at it and

1574
01:27:44,900 --> 01:27:48,600
understand how we went through each individual part of the process and

1575
01:27:48,600 --> 01:27:49,500
how to push through it.

1576
01:27:49,600 --> 01:27:52,800
So I hope it ends up being pretty good in the end and I'm happy with

1577
01:27:52,800 --> 01:27:56,400
sort of how we came through everything and eventually work towards a,

1578
01:27:56,500 --> 01:27:59,000
what I think is a fairly good solution will solidify, but we need a

1579
01:27:59,000 --> 01:28:01,400
few more days to actually see it through to completion.

1580
01:28:02,100 --> 01:28:03,700
And so that will be what we're doing.

1581
01:28:04,100 --> 01:28:08,400
And hopefully maybe we can get it done in time for their handmade

1582
01:28:08,400 --> 01:28:08,700
cons.

1583
01:28:08,700 --> 01:28:10,800
So after handmade con, that'll be your like are

1584
01:28:11,000 --> 01:28:14,200
Point where we'll go to, whatever our next thing is, maybe some

1585
01:28:14,200 --> 01:28:14,600
lighting.

1586
01:28:14,700 --> 01:28:15,500
Who knows what we'll do?

1587
01:28:16,300 --> 01:28:18,200
Actually, maybe there's a different thing we might do.

1588
01:28:18,200 --> 01:28:19,300
But yeah.

1589
01:28:19,400 --> 01:28:21,000
Eventually we'll have to do letting either way.

1590
01:28:22,100 --> 01:28:25,200
So anyway, hope to join me for that tomorrow.

1591
01:28:25,200 --> 01:28:26,100
Back here again, 5 p.m.

1592
01:28:26,100 --> 01:28:26,800
Pacific Standard Time.

1593
01:28:26,800 --> 01:28:29,500
If you want to follow along the source code at home as always handmade

1594
01:28:29,500 --> 01:28:31,800
here at dot org, you can pre-order the game becomes the source code so

1595
01:28:31,800 --> 01:28:34,200
you can play around with it and learn from it.

1596
01:28:34,500 --> 01:28:38,000
We also have Forum site, you can discuss the code or if you're having

1597
01:28:38,000 --> 01:28:40,600
problems, you can ask people for help that sort of thing.

1598
01:28:40,600 --> 01:28:40,800
We also

1599
01:28:40,900 --> 01:28:43,700
Have an antidepressant guide up there, which will probably start

1600
01:28:43,700 --> 01:28:44,500
licking to.

1601
01:28:44,500 --> 01:28:47,500
It's been going through some revisions and stuff, but we'll probably

1602
01:28:47,500 --> 01:28:49,000
start linking to that pretty soon here.

1603
01:28:49,000 --> 01:28:51,100
On the main page, we haven't quite gotten there yet, so it's linked to

1604
01:28:51,100 --> 01:28:52,100
on the forums page.

1605
01:28:52,300 --> 01:28:54,400
Was that a patreon page want to support the video series?

1606
01:28:54,400 --> 01:28:56,400
And the tweetbot that tells you what the schedule is, you want to

1607
01:28:56,400 --> 01:28:58,000
catch it the show live.

1608
01:28:58,600 --> 01:29:00,200
That is the place to go for that.

1609
01:29:00,200 --> 01:29:04,500
We also have our convention coming up, you can get tickets here.

1610
01:29:05,900 --> 01:29:06,800
It's December, fifth.

1611
01:29:06,800 --> 01:29:09,100
Like I said, I think there's about 20 tickets left, something like

1612
01:29:09,100 --> 01:29:09,600
that.

1613
01:29:09,700 --> 01:29:13,000
Handmade conduct org has the information on it.

1614
01:29:13,900 --> 01:29:16,100
And you can get the tickets right here.

1615
01:29:16,100 --> 01:29:19,100
So that's going to be pretty awesome Hamid.

1616
01:29:19,100 --> 01:29:24,600
Khan is, I also should mention as kind of a last note, I am probably

1617
01:29:24,600 --> 01:29:32,200
going to be wanting if you are somebody out there who has a camera

1618
01:29:32,200 --> 01:29:36,500
that could record video of handmade con like a good camera.

1619
01:29:36,500 --> 01:29:39,800
Like if you're one of those people who has like, you know, a 5D Mark

1620
01:29:39,800 --> 01:29:43,900
to Canon camera or something with a decent length.

1621
01:29:44,000 --> 01:29:49,400
Is on it like something, if you're a high-end camera guy and you would

1622
01:29:49,400 --> 01:29:51,500
not and you are coming to handmade con.

1623
01:29:51,900 --> 01:29:55,800
If you have any interest in setting up a camera to record handmade

1624
01:29:55,800 --> 01:29:59,900
con, I will be setting up some recording stuff myself.

1625
01:30:00,100 --> 01:30:04,900
But I feel like if we got multiple cameras more than just one to

1626
01:30:04,900 --> 01:30:08,300
record it, that would be good because we never know, one could die in

1627
01:30:08,300 --> 01:30:09,000
the middle of it.

1628
01:30:09,000 --> 01:30:13,500
Or we might want multiple angles to, you know, sort of cut together.

1629
01:30:13,500 --> 01:30:17,900
After the fact to make sort of a better video of the thing, all kinds

1630
01:30:17,900 --> 01:30:18,400
of stuff like that.

1631
01:30:18,400 --> 01:30:19,100
I think we could do.

1632
01:30:19,100 --> 01:30:21,700
So I would be interested in hearing from people.

1633
01:30:22,800 --> 01:30:24,700
You can post on the forums or send me an email.

1634
01:30:24,700 --> 01:30:26,200
Of course, my email address is public.

1635
01:30:26,200 --> 01:30:28,200
You can just go on my Twitter handle.

1636
01:30:28,200 --> 01:30:31,200
In fact, if you want to get it or you can actually just use on this

1637
01:30:31,200 --> 01:30:32,000
page.

1638
01:30:32,200 --> 01:30:39,000
If you go to the about page or you can actually see, I think on here,

1639
01:30:39,000 --> 01:30:40,000
do we have this?

1640
01:30:40,300 --> 01:30:41,300
We have this yet.

1641
01:30:41,300 --> 01:30:42,200
You can see me right here.

1642
01:30:42,200 --> 01:30:45,100
On the, if you click in case me, try and go down to the bottom, you've

1643
01:30:45,100 --> 01:30:47,200
got my kind of calm, my contact info stuff.

1644
01:30:48,200 --> 01:30:52,200
So if you are somebody who wants to help out with that, please let me

1645
01:30:52,200 --> 01:30:52,300
know.

1646
01:30:53,000 --> 01:30:55,400
Because I think having more cameras is going to be better than having

1647
01:30:55,400 --> 01:30:56,200
less cameras.

1648
01:30:56,500 --> 01:31:00,600
And so if you're somebody who knows what they're doing with in terms

1649
01:31:00,600 --> 01:31:05,500
of recording video, I would love to have your help keeping some

1650
01:31:05,500 --> 01:31:08,200
redundant records of handmade con.

1651
01:31:08,600 --> 01:31:10,800
Just in case something goes wrong with the main ones that were going

1652
01:31:10,800 --> 01:31:11,400
to set up.

1653
01:31:11,900 --> 01:31:14,900
That is about it until tomorrow.

1654
01:31:15,100 --> 01:31:15,600
Take it easy.

1655
01:31:15,600 --> 01:31:19,000
Everyone have fun programming and I'll see you guys on the internet.

