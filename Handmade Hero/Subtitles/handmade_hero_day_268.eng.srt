1
00:00:02,100 --> 00:00:04,200
Hello, everyone and welcome to handmade.

2
00:00:04,200 --> 00:00:04,700
Here are the show.

3
00:00:04,700 --> 00:00:07,500
We code a complete game live on stream.

4
00:00:08,200 --> 00:00:11,900
We are kind of coming to the end of our debug code stuff here.

5
00:00:13,000 --> 00:00:14,600
It's kind of been a long road.

6
00:00:14,700 --> 00:00:19,200
We started it a long time ago and then in the middle we sort of took a

7
00:00:19,200 --> 00:00:23,100
break and did some Hardware rendering stuff.

8
00:00:23,100 --> 00:00:26,200
We we added a hardware rendering path in addition to our software

9
00:00:26,200 --> 00:00:27,000
rendering path.

10
00:00:27,600 --> 00:00:30,400
And then we came back and kind of like solidified things.

11
00:00:30,400 --> 00:00:34,400
And we've got some pretty cool debug features in our engine now which

12
00:00:34,400 --> 00:00:38,000
is nice but we're kind of coming to a good stopping point.

13
00:00:38,000 --> 00:00:40,600
You know we can always come back to the debug system and add new

14
00:00:40,600 --> 00:00:41,900
things as we need them later.

15
00:00:41,900 --> 00:00:44,400
If we find that, there's some things that it should be doing or could

16
00:00:44,400 --> 00:00:48,000
be doing that it's not doing for us and we'd like it to, we can

17
00:00:48,000 --> 00:00:52,800
certainly do that but I think at this point we're mostly we're, you

18
00:00:52,800 --> 00:00:55,700
know, we're mostly ready to sort of to move on.

19
00:00:55,700 --> 00:00:57,400
So I'm just going to kind of be thinking

20
00:00:59,000 --> 00:01:02,900
Here on day 268 and the subsequent streams this week.

21
00:01:02,900 --> 00:01:06,300
Just like, what are some things that we probably want to tidy up?

22
00:01:06,600 --> 00:01:10,500
What some UI stuff that's not, you know, maybe the nicest what can we

23
00:01:10,500 --> 00:01:14,100
do to kind of like consolidate these things so that you can wind it

24
00:01:14,100 --> 00:01:17,100
down to a point where we're like, pretty sure that things are working

25
00:01:17,100 --> 00:01:20,300
in a way that's useful to us as we move off.

26
00:01:22,400 --> 00:01:25,200
So, all right and you know that might involve adding some features as

27
00:01:25,200 --> 00:01:28,300
well, you know, who's to say who's to say?

28
00:01:33,600 --> 00:01:34,000
Okay.

29
00:01:35,900 --> 00:01:39,700
So today is day what 268 I said.

30
00:01:39,700 --> 00:01:42,000
So if you would like to follow along with source code at home and

31
00:01:42,000 --> 00:01:44,600
you're one of the folks who has pre-order the game on handmade here at

32
00:01:44,600 --> 00:01:44,900
work.

33
00:01:44,900 --> 00:01:46,800
You want to unzip day 267.

34
00:01:47,500 --> 00:01:49,900
That's the code that I'm starting with today.

35
00:01:50,500 --> 00:01:52,200
So let's go ahead and load.

36
00:01:52,800 --> 00:01:54,100
Let's load up here.

37
00:01:57,100 --> 00:02:01,400
Let's get that going and get Ms.

38
00:02:01,400 --> 00:02:04,800
Dev going and here is the game as it stands here.

39
00:02:04,800 --> 00:02:09,699
Is our profiling system, which is kind of swanky at this point and we

40
00:02:09,699 --> 00:02:13,200
can use it to kind of go through and see all the information that we

41
00:02:13,200 --> 00:02:14,100
wanted to see.

42
00:02:15,000 --> 00:02:18,400
We had a clipping yesterday so we can even get some nice.

43
00:02:19,200 --> 00:02:22,900
Everything stays contained inside, our little display window, which is

44
00:02:22,900 --> 00:02:23,700
also good.

45
00:02:24,900 --> 00:02:25,900
And all that good stuff.

46
00:02:26,800 --> 00:02:31,500
So I would say a couple things on the profile front one thing that we

47
00:02:31,500 --> 00:02:36,800
might want to try to do is is come up with some kind of memory

48
00:02:36,800 --> 00:02:40,000
profiling, which we could do.

49
00:02:41,400 --> 00:02:45,400
And I think that might be something to maybe say for next week because

50
00:02:45,400 --> 00:02:48,800
one of the things that I was thinking of doing for finally stuff,

51
00:02:48,800 --> 00:02:54,500
before we go into the gameplay code, is I wanted to show people how

52
00:02:54,500 --> 00:02:57,900
like, you know, we've kind of built this Arena allocation system

53
00:02:57,900 --> 00:02:59,900
that's relatively primitive.

54
00:03:00,000 --> 00:03:02,000
But that does work.

55
00:03:02,000 --> 00:03:03,600
Very effective for what we need.

56
00:03:04,300 --> 00:03:07,200
One of things I was going to show people is how you can trivial extend

57
00:03:07,200 --> 00:03:11,400
it to be arbitrarily growing so that you don't have to pre decide

58
00:03:11,600 --> 00:03:12,500
ahead of time.

59
00:03:12,700 --> 00:03:14,100
How much space you're going to use?

60
00:03:14,100 --> 00:03:16,600
Because one of the questions that I get asked because like the way

61
00:03:16,600 --> 00:03:19,200
that we do it currently, as we, you know, reserve a certain amount

62
00:03:19,200 --> 00:03:22,900
space and the arena allocates that space, But A lot of people like

63
00:03:22,900 --> 00:03:26,300
confused about that and don't understand what they would do or how

64
00:03:26,300 --> 00:03:27,500
they would use it.

65
00:03:27,500 --> 00:03:29,800
If they didn't know ahead of time that they wanted to run with this,

66
00:03:30,000 --> 00:03:31,800
For their size, there's really no difference.

67
00:03:31,800 --> 00:03:35,600
You can trivially extend an arena class to grow on demand.

68
00:03:35,600 --> 00:03:38,600
And so, I thought, one thing we might do is go back and sort of maybe

69
00:03:38,600 --> 00:03:40,700
finalized that Arena class a little bit.

70
00:03:41,600 --> 00:03:44,100
And I'll make it so that it can grow on demand.

71
00:03:44,100 --> 00:03:46,700
So that's like a feature that you could enable because it's really

72
00:03:46,700 --> 00:03:50,800
easy and then you know, while we're doing that, I'll add the also the

73
00:03:50,800 --> 00:03:54,000
ability to track the allocations so that they can show up here in the

74
00:03:54,000 --> 00:03:56,400
debug View and those are probably two things that might be nice.

75
00:03:56,400 --> 00:03:59,100
That would be a good thing to do next week as sort of a little

76
00:03:59,100 --> 00:04:02,000
exercise that I think people would probably benefit from.

77
00:04:03,000 --> 00:04:07,500
So I think I want to stick with not that for this week.

78
00:04:07,500 --> 00:04:11,800
I think I want to stick with sort of more, you know, kind of basic

79
00:04:12,000 --> 00:04:12,700
stuff here.

80
00:04:12,700 --> 00:04:13,900
And one of the things that's

81
00:04:16,600 --> 00:04:21,200
That's currently true about the system is nothing works when debug is

82
00:04:21,200 --> 00:04:24,600
paused and I think that might be fine.

83
00:04:25,000 --> 00:04:28,600
Like, I'm not sure I actually care about that but you'll notice like,

84
00:04:28,600 --> 00:04:30,900
you know, I can it's if I want to.

85
00:04:30,900 --> 00:04:36,700
For example, I can I could actually toggle this this thing and have

86
00:04:36,700 --> 00:04:38,900
it, have it actually happened.

87
00:04:38,900 --> 00:04:40,400
Meaning it's actually make the change.

88
00:04:40,500 --> 00:04:44,300
But the the change itself doesn't really ever actually show up in the

89
00:04:44,300 --> 00:04:45,400
UI and the reason for that.

90
00:04:45,600 --> 00:04:48,900
As if we're not recording debug information, none of our state

91
00:04:49,200 --> 00:04:50,900
actually shows up here, right?

92
00:04:51,000 --> 00:04:54,500
We just throw out data so it's always going to be wrong.

93
00:04:55,300 --> 00:04:57,400
That's something that I might consider fixing.

94
00:04:57,400 --> 00:05:00,500
If This Were A system that I was gonna, you know, like I said ship

95
00:05:00,500 --> 00:05:03,000
commercial or something but I think that's just fine.

96
00:05:03,100 --> 00:05:04,800
Like I don't think that's going to bother me at all.

97
00:05:04,800 --> 00:05:06,700
I don't think it's worth spending time on it so I'm just going to

98
00:05:06,700 --> 00:05:13,600
leave that be our system for cloning stuff at the moment is also not

99
00:05:13,600 --> 00:05:14,400
particularly great.

100
00:05:14,400 --> 00:05:15,400
There's some things that I don't

101
00:05:15,500 --> 00:05:17,100
I love about the way the system works.

102
00:05:17,300 --> 00:05:22,000
So, for example, at the moment we always have a little bit of space

103
00:05:22,200 --> 00:05:26,000
here at the beginning and we get, you know, this kind of weird like

104
00:05:26,000 --> 00:05:28,800
dot out here, that's how you move the thing around and there's just

105
00:05:28,800 --> 00:05:32,900
some it's not the world's nicest situation.

106
00:05:33,300 --> 00:05:36,200
I think maybe that might be something to turn our attention to

107
00:05:36,200 --> 00:05:39,500
improving that system, just making these windows work, a little bit

108
00:05:39,500 --> 00:05:42,800
better and maybe making better controls from the application side of

109
00:05:42,800 --> 00:05:45,400
things that allow me to kind.

110
00:05:45,600 --> 00:05:48,700
Ben code where I want certain things to appear and what sorts of

111
00:05:48,700 --> 00:05:50,200
things I want in terms of Windows.

112
00:05:50,900 --> 00:05:52,200
And I think that might be a good thing.

113
00:05:52,200 --> 00:05:54,000
That's probably number one on the list today.

114
00:05:54,000 --> 00:05:55,000
I think that might be a good one.

115
00:05:55,600 --> 00:05:59,000
And the other thing I think would just be to tidy up the UI of this

116
00:05:59,000 --> 00:05:59,600
system.

117
00:06:00,500 --> 00:06:03,900
Where we like, maybe draw these thread things a little bit better,

118
00:06:04,900 --> 00:06:08,900
maybe make it a little easier to click or to zoom on something in

119
00:06:08,900 --> 00:06:09,700
particular.

120
00:06:10,400 --> 00:06:12,300
So just cleaning up that a little bit.

121
00:06:12,500 --> 00:06:15,100
Other than that, I can't think of a whole lot.

122
00:06:15,100 --> 00:06:18,300
That would really need to be modified at the moment.

123
00:06:18,400 --> 00:06:22,700
It seems like things are working well enough that we can probably rely

124
00:06:22,700 --> 00:06:26,700
on them being good enough for us to use again, like I said, we have to

125
00:06:26,700 --> 00:06:28,500
ship the game, not the debug system.

126
00:06:29,300 --> 00:06:32,400
So while it's nice to have a good one at some level you can just make

127
00:06:32,400 --> 00:06:36,800
arbitrary decisions of this is done enough and we don't need to you

128
00:06:36,800 --> 00:06:42,700
know polish it to any particular extent necessarily, right?

129
00:06:43,600 --> 00:06:48,100
So yes so I think what I'll do is I'll focus on sort of this this over

130
00:06:48,100 --> 00:06:53,800
all drawing aspect of it and that's what I think I'd like to start on.

131
00:06:55,300 --> 00:06:58,700
So I'm going to go ahead in and, and play around with that a little

132
00:06:58,700 --> 00:06:59,100
bit.

133
00:07:00,700 --> 00:07:04,200
Now, if we open up the debug code, you'll remember that this is in a

134
00:07:04,200 --> 00:07:09,000
thing that we called Draw main menu and draw me menu is kind of like a

135
00:07:09,100 --> 00:07:10,800
really weird situation.

136
00:07:10,800 --> 00:07:15,200
I you know, it's called main menu but really it draws all the menus so

137
00:07:15,200 --> 00:07:17,400
it's really just called it's really just the thing that draws

138
00:07:17,400 --> 00:07:18,600
everything, right?

139
00:07:18,600 --> 00:07:22,800
It's really just debug draw is what it is and you can see where it

140
00:07:22,800 --> 00:07:23,800
gets called.

141
00:07:24,700 --> 00:07:28,000
If I go down and search for that, you can see that essentially the way

142
00:07:28,000 --> 00:07:31,800
our UI system actually works for all intents and purposes.

143
00:07:32,000 --> 00:07:34,600
In fact, this all this stuff, you're our debug counter stuff, this was

144
00:07:34,600 --> 00:07:36,000
all old code, right?

145
00:07:36,000 --> 00:07:39,800
That was putting out statistics before we started working with them in

146
00:07:39,800 --> 00:07:40,500
the profiler.

147
00:07:40,700 --> 00:07:44,700
So really all of this stuff is just vestigial remains that we don't

148
00:07:44,800 --> 00:07:47,400
really need although I guess, you know, now that I think about it, I

149
00:07:47,400 --> 00:07:50,300
should probably look real quick and just see what's actually there

150
00:07:50,300 --> 00:07:51,900
because maybe now that I think about it.

151
00:07:52,000 --> 00:07:54,400
Do we want to resurrect any of this and copy it out somewhere?

152
00:07:54,500 --> 00:07:58,400
Where can be used as suppose that's possible to.

153
00:07:58,500 --> 00:07:59,200
You can see here.

154
00:07:59,200 --> 00:08:03,800
We've got it looks like it looks like here.

155
00:08:03,800 --> 00:08:08,000
We've got maybe some bar stuff getting drawn.

156
00:08:10,000 --> 00:08:14,100
So this stuff, this this debug statistic hit counter stuff, looks

157
00:08:14,100 --> 00:08:21,400
pretty irrelevant, but this stuff here looks like it's sort of a

158
00:08:21,500 --> 00:08:23,200
that's like is our frame bar graph.

159
00:08:23,400 --> 00:08:24,400
So it looks like all of this

160
00:08:24,600 --> 00:08:28,200
We've kind of already got something of, you know, like all that stuff

161
00:08:28,200 --> 00:08:29,500
is already there, right?

162
00:08:29,500 --> 00:08:30,400
If that makes sense.

163
00:08:31,400 --> 00:08:33,299
So I don't think we really need any more of that.

164
00:08:34,100 --> 00:08:36,000
Let's see scope to record.

165
00:08:36,000 --> 00:08:37,500
This is all old stuff as well.

166
00:08:37,500 --> 00:08:40,299
We now have the ability to analyze any performance stuff.

167
00:08:40,299 --> 00:08:44,200
That was really old things that are not really at all relevant

168
00:08:44,200 --> 00:08:44,800
anymore.

169
00:08:45,700 --> 00:08:48,600
And so I think scope to record can go away entirely.

170
00:08:51,100 --> 00:08:52,300
And so, then we owe.

171
00:08:55,100 --> 00:08:56,600
For a coder has died.

172
00:08:57,500 --> 00:08:58,600
Poor for coder.

173
00:09:00,200 --> 00:09:01,400
For coder has died.

174
00:09:02,800 --> 00:09:03,500
That's a rarity.

175
00:09:03,500 --> 00:09:05,200
We have not had many for crashes.

176
00:09:05,200 --> 00:09:10,500
I believe this is the same for coder crash that I saw before on my own

177
00:09:10,500 --> 00:09:10,800
work.

178
00:09:11,100 --> 00:09:16,000
And if I remember correctly it's kind of a nice crash as crashes go

179
00:09:16,600 --> 00:09:23,700
because it doesn't kill anything like if it crashes when I save data

180
00:09:24,500 --> 00:09:29,600
so you don't actually lose any fact, if I build here, oops,

181
00:09:30,400 --> 00:09:31,300
You're J.

182
00:09:34,000 --> 00:09:35,800
If I build here I think we're all good.

183
00:09:35,800 --> 00:09:36,100
Yeah.

184
00:09:38,100 --> 00:09:39,300
I'm not sure what it is, exactly.

185
00:09:39,300 --> 00:09:43,600
It's something about when you run a make, there's some very specific

186
00:09:43,600 --> 00:09:45,600
chance that you'll crash.

187
00:09:47,000 --> 00:09:47,800
So yeah, this one.

188
00:09:47,800 --> 00:09:48,900
Looks like it didn't save.

189
00:09:49,000 --> 00:09:49,900
I'm not sure why.

190
00:09:51,300 --> 00:09:53,600
So, it's a little bit different than mine because mine actually did

191
00:09:53,600 --> 00:09:56,200
say, but I definitely deleted this, right?

192
00:09:56,600 --> 00:09:57,300
So I'm not sure.

193
00:09:57,600 --> 00:10:02,000
I do not know what it actually is, that causes it at some point.

194
00:10:02,000 --> 00:10:04,300
I'll have to debug it, but yeah.

195
00:10:05,700 --> 00:10:06,600
Or Alan will.

196
00:10:09,100 --> 00:10:10,600
All right, so let's see here.

197
00:10:10,600 --> 00:10:11,800
What do I want to do?

198
00:10:12,500 --> 00:10:16,100
I want to get rid of the scope to record and now scope to record is

199
00:10:16,100 --> 00:10:17,200
gone, so that's good.

200
00:10:18,100 --> 00:10:19,700
Let's see what else we've got.

201
00:10:19,700 --> 00:10:22,100
We've got it complaining about the fact that I initialize it.

202
00:10:22,100 --> 00:10:22,600
That's true.

203
00:10:22,600 --> 00:10:23,700
But goodbye.

204
00:10:25,100 --> 00:10:30,400
So anyway, debug draw me menu, which I think we could just call like,

205
00:10:30,400 --> 00:10:33,900
sort of draw HUD or something, which is a much better name for it

206
00:10:34,000 --> 00:10:37,600
because it's drawing all of the trees we could escalate draw trees or

207
00:10:37,600 --> 00:10:38,400
something like this.

208
00:10:40,100 --> 00:10:43,500
I think that's better than debug draw me menu to say the least.

209
00:10:43,600 --> 00:10:45,600
So I'm going to call that draw trees.

210
00:10:46,400 --> 00:10:50,500
And then I'm going to compile that function is an old function that I

211
00:10:50,500 --> 00:10:54,500
think we must have been trying to show how to walk something without

212
00:10:54,500 --> 00:10:55,600
using recursion.

213
00:10:55,600 --> 00:10:58,800
I don't know why we did it this way, it doesn't make a whole lot of

214
00:10:58,800 --> 00:11:04,300
sense to me why it was done this way and so I think maybe we're doing

215
00:11:04,300 --> 00:11:07,100
that are trying to keep from having to pass down a stack thing.

216
00:11:07,300 --> 00:11:08,300
I don't even know.

217
00:11:08,900 --> 00:11:12,800
But point being I don't think it's particularly interesting and so I

218
00:11:12,800 --> 00:11:16,100
want to change it into a recursive function because I think it'll be

219
00:11:16,100 --> 00:11:20,400
clearer for everyone to read and easier for them to understand.

220
00:11:20,400 --> 00:11:24,400
If I do it in that fashion because we don't need these debug variable

221
00:11:24,400 --> 00:11:26,000
iterators or any of this stuff.

222
00:11:26,500 --> 00:11:28,600
So, debug variable iterator

223
00:11:30,300 --> 00:11:33,000
Is this utility that we were using?

224
00:11:33,100 --> 00:11:34,400
I don't actually know where it is.

225
00:11:34,700 --> 00:11:39,300
Do you but variable iterator this thing?

226
00:11:41,100 --> 00:11:41,500
Yeah.

227
00:11:45,100 --> 00:11:47,800
And it's just like, I don't really want to have to deal with that.

228
00:11:47,800 --> 00:11:49,300
I don't want that in the system.

229
00:11:49,300 --> 00:11:50,500
I don't think we need it.

230
00:11:50,500 --> 00:11:53,100
So what I'm going to do is, I'm just going to change this over to

231
00:11:53,100 --> 00:11:55,100
being a standard recursive call.

232
00:11:55,700 --> 00:11:58,700
Like it probably should have been, but I'm sure we had a reason why we

233
00:11:58,700 --> 00:11:59,700
didn't do it that way.

234
00:12:00,900 --> 00:12:05,700
Anyway, so once we get one of these groups, I guess what I could do is

235
00:12:06,000 --> 00:12:10,500
call this Draught regroup or something, and then I can come in here

236
00:12:10,500 --> 00:12:16,500
and say, let's grab this code that's actually used for drawing the

237
00:12:16,500 --> 00:12:17,000
tree.

238
00:12:20,500 --> 00:12:21,500
And I'll put it in here.

239
00:12:24,800 --> 00:12:29,500
Okay, and let's see.

240
00:12:29,500 --> 00:12:32,600
This stuff is just sort of the end code.

241
00:12:32,600 --> 00:12:38,300
I don't know what the if one here is for I'm not sure why we wanted

242
00:12:38,300 --> 00:12:43,000
that to be potentially turned off, but I guess that's something in

243
00:12:43,000 --> 00:12:46,200
case we wanted to make it so that we don't always draw the interactor.

244
00:12:46,200 --> 00:12:48,100
But we'll get to that in a second anyway.

245
00:12:48,100 --> 00:12:52,800
So I'm just going to go ahead and sort of make that make that do its

246
00:12:52,800 --> 00:12:52,800
thing.

247
00:12:52,800 --> 00:12:54,600
And

248
00:12:54,800 --> 00:13:00,200
And I'm going to say, yeah, debug State at why.

249
00:13:00,700 --> 00:13:04,900
I'm not sure what that really is supposed to be doing at this point.

250
00:13:05,100 --> 00:13:07,300
So I'm gonna add a little to do.

251
00:13:07,300 --> 00:13:12,600
Casey, do we still want this at all?

252
00:13:13,300 --> 00:13:17,100
In fact, I might just do a quick check to see if I can determine it

253
00:13:17,100 --> 00:13:18,800
immediately and I can.

254
00:13:18,800 --> 00:13:20,000
So that's just a useless.

255
00:13:20,000 --> 00:13:23,200
Now, that we have the layout stuff happening, that's just a useless

256
00:13:23,200 --> 00:13:24,600
variable and it can be trimmed.

257
00:13:24,700 --> 00:13:25,100
Aimed.

258
00:13:28,700 --> 00:13:30,400
So here we are in Draught regroup.

259
00:13:30,400 --> 00:13:34,200
And what I need to do is I need to make Draught regroup, be sort of a

260
00:13:34,200 --> 00:13:38,100
recursive function that will allow us to do it in two different ways.

261
00:13:38,100 --> 00:13:42,200
So you can kind of see how this works if the link does not have any

262
00:13:42,200 --> 00:13:42,800
children.

263
00:13:44,900 --> 00:13:49,000
We'll be in this else case and in that case it's just going to execute

264
00:13:49,000 --> 00:13:50,200
the element draw.

265
00:13:50,700 --> 00:13:53,800
So that's kind of the bottoming out of the recursive function

266
00:13:53,800 --> 00:13:54,400
automatically.

267
00:13:54,400 --> 00:13:57,000
So we're already in a state where that would be fine.

268
00:13:57,900 --> 00:14:01,300
So the only thing we really have to worry about is this case here,

269
00:14:01,700 --> 00:14:07,400
where we draw the actual header for this option and then we look to

270
00:14:07,400 --> 00:14:11,000
see whether or not we need to draw the children.

271
00:14:11,200 --> 00:14:13,600
So I'm going to say, okay, we've got view collapsible

272
00:14:13,700 --> 00:14:14,600
Fan it always.

273
00:14:14,700 --> 00:14:15,200
I'm going to say.

274
00:14:15,200 --> 00:14:20,700
All right, if we're doing that, expanded always call, then what I'm

275
00:14:20,700 --> 00:14:23,800
going to do is I'm going to call myself recursively.

276
00:14:23,800 --> 00:14:28,600
So I'm going to draw a tree group again and I'm going to well I should

277
00:14:28,600 --> 00:14:31,400
probably have saved exactly what these two things are just so I don't

278
00:14:31,400 --> 00:14:33,700
mess it up, although we probably could have figured it out.

279
00:14:34,500 --> 00:14:39,000
If we look here you can see this link, chill children, Sentinel next

280
00:14:39,100 --> 00:14:39,800
and

281
00:14:42,000 --> 00:14:45,900
And linked to the central, that's the list of things that we would

282
00:14:45,900 --> 00:14:48,100
want to Loop through, right?

283
00:14:48,100 --> 00:14:52,800
So those are the those are the things we want to Loop through if I

284
00:14:52,800 --> 00:14:53,400
want to.

285
00:14:53,400 --> 00:14:56,300
In fact, I could just make that Loop happen here.

286
00:14:56,300 --> 00:14:59,200
Even in fact, I think I probably will.

287
00:14:59,400 --> 00:14:59,800
So

288
00:15:00,000 --> 00:15:03,600
I'll just say this is like, maybe I'll just call this something more

289
00:15:03,600 --> 00:15:07,100
generic, like draw tree link or something like that.

290
00:15:08,000 --> 00:15:12,400
And then inside here I'll call Draught relink recursively with

291
00:15:12,700 --> 00:15:13,900
whatever the status is.

292
00:15:14,100 --> 00:15:19,900
So I know that this Loop itself would be a debug variable link, and I

293
00:15:19,900 --> 00:15:21,400
know this is like a sub link of me.

294
00:15:21,400 --> 00:15:22,900
It's like a child of mine.

295
00:15:23,900 --> 00:15:24,500
Sweet.

296
00:15:24,500 --> 00:15:25,700
Child of Mine.

297
00:15:26,100 --> 00:15:26,500
Okay.

298
00:15:27,000 --> 00:15:29,500
Little concert roses for you, they're not

299
00:15:30,000 --> 00:15:32,800
Really good Guns and Roses there.

300
00:15:32,900 --> 00:15:35,700
So, you know, your mileage may vary.

301
00:15:35,700 --> 00:15:38,000
But you know, I'm just saying Guns and Roses.

302
00:15:38,500 --> 00:15:41,700
So assuming that the sub link is not equal to the Sentinel

303
00:15:42,900 --> 00:15:44,600
Hello, there we go.

304
00:15:45,300 --> 00:15:47,900
Assuming that the subject is not an essential.

305
00:15:47,900 --> 00:15:50,200
I want to keep chasing its next pointer.

306
00:15:52,300 --> 00:15:58,300
Like so, and and drawing tree links as I go, so I need to pass them

307
00:15:58,300 --> 00:15:59,000
stuff to this.

308
00:15:59,100 --> 00:16:03,200
Obviously, when we're drawing things we need like the rendering Group,

309
00:16:03,400 --> 00:16:06,500
Well actually do we need to read the rendering groups just known all

310
00:16:06,500 --> 00:16:07,000
the time.

311
00:16:07,000 --> 00:16:07,300
Right.

312
00:16:07,300 --> 00:16:08,900
I mean, do we even ever pass this?

313
00:16:08,900 --> 00:16:09,800
No, we don't.

314
00:16:09,900 --> 00:16:11,600
So we don't really need the render group.

315
00:16:11,600 --> 00:16:12,400
That's a farce.

316
00:16:12,400 --> 00:16:18,100
That's a lie, a ruse, a falsehood if ever, there was one

317
00:16:19,500 --> 00:16:23,800
So I'm actually going to say no to that and put this here.

318
00:16:26,200 --> 00:16:30,000
And then, I'm going to go ahead and say that we pass that layout.

319
00:16:31,600 --> 00:16:32,600
Right?

320
00:16:32,600 --> 00:16:34,800
Because it's going to open a layout and we're going to need that

321
00:16:34,800 --> 00:16:37,100
layout to lay out the items as we go.

322
00:16:37,100 --> 00:16:41,700
So, you can see, this is a very standard sort of pattern that I often

323
00:16:41,700 --> 00:16:43,100
have, in the code.

324
00:16:43,100 --> 00:16:46,000
You've seen it many times, I'll just call it out here because we never

325
00:16:46,000 --> 00:16:46,500
call it out.

326
00:16:46,500 --> 00:16:52,000
It's basically like a three-part method of function calling, right?

327
00:16:52,000 --> 00:16:58,600
There's the sort of contextual there's the global contextual state,

328
00:16:58,600 --> 00:16:59,800
which is just anything.

329
00:16:59,800 --> 00:17:01,300
That's effectively a global variable.

330
00:17:01,600 --> 00:17:04,300
For all intents and purposes but it's a global variable.

331
00:17:04,300 --> 00:17:08,500
That's only relevant to a particular section or thread or whatever.

332
00:17:08,500 --> 00:17:11,200
So you don't actually want them to be Global's.

333
00:17:11,200 --> 00:17:13,800
You want them to be more narrowly scoped than that.

334
00:17:13,800 --> 00:17:15,500
But in on the whole that's what this is.

335
00:17:15,500 --> 00:17:17,800
This is a pointer to essentially or Global variables.

336
00:17:18,099 --> 00:17:21,000
Then you have a pointer to what are effectively your local variables.

337
00:17:21,000 --> 00:17:25,300
So for this option, for this pass through things, we're laying out

338
00:17:25,300 --> 00:17:25,800
stuff.

339
00:17:25,800 --> 00:17:28,700
That second parameter is, essentially all of the information that's

340
00:17:28,700 --> 00:17:30,500
tracked for the laying out of things.

341
00:17:30,700 --> 00:17:31,500
And then finally,

342
00:17:31,600 --> 00:17:35,300
Do you have the actual element that you're operating on whatever that

343
00:17:35,300 --> 00:17:35,800
is?

344
00:17:36,200 --> 00:17:38,900
Which in this case, is that debug link, right?

345
00:17:39,700 --> 00:17:42,900
And so you can kind of see that's the idea.

346
00:17:45,200 --> 00:17:46,800
Hopefully, that makes some sense to you.

347
00:17:48,700 --> 00:17:52,500
Like I said, you see that a lot in code that I right I think you

348
00:17:52,500 --> 00:17:54,700
probably see it a lot in code that other people are, right?

349
00:17:54,900 --> 00:17:58,800
It's just kind of the way that you naturally tend to tend to be three.

350
00:18:00,000 --> 00:18:03,600
Groups that you're looking at any given time, the immediate item the

351
00:18:03,600 --> 00:18:07,700
context for the operation, and then the whole state for the system

352
00:18:07,900 --> 00:18:10,400
that's relevant to this portion of the program.

353
00:18:11,200 --> 00:18:14,600
So anyway, I'm going to go through here and call myself recursively.

354
00:18:14,600 --> 00:18:17,900
Like I said, I'm also going to sweat profusely because it is really

355
00:18:17,900 --> 00:18:21,800
hot in Seattle and I'm with the door closed in a room that is not very

356
00:18:21,800 --> 00:18:22,800
well ventilated.

357
00:18:23,500 --> 00:18:27,200
So, I'm going to go ahead and drop Draught relink recursively again, I

358
00:18:27,200 --> 00:18:28,300
passed the layout.

359
00:18:28,300 --> 00:18:29,800
I make sure the layout gets

360
00:18:30,000 --> 00:18:32,900
Incremented on either side here because I want to sort of increase

361
00:18:32,900 --> 00:18:36,300
that depth as I go through, but then I don't want that depth increase

362
00:18:36,300 --> 00:18:37,200
to persist.

363
00:18:37,700 --> 00:18:42,300
So of course, this layout is now a layout pointer.

364
00:18:42,300 --> 00:18:46,400
And so anywhere, where the layout actually got used such as here is

365
00:18:46,400 --> 00:18:51,400
going to be a pointer now instead, so actually these things have to be

366
00:18:51,800 --> 00:18:55,300
changed a little bit round but otherwise most of this code can

367
00:18:55,300 --> 00:18:57,100
probably remain the same.

368
00:18:57,400 --> 00:18:58,800
So in addition,

369
00:19:00,300 --> 00:19:03,300
I'm going to need this tree information because as I passed down this

370
00:19:03,300 --> 00:19:06,200
tree, I sort of have two things that I'm operating on.

371
00:19:06,300 --> 00:19:08,700
So it's going to be a little bit more complicated, right?

372
00:19:10,000 --> 00:19:11,200
I sort of have two things.

373
00:19:11,200 --> 00:19:13,500
Again, this is the operation context here.

374
00:19:13,500 --> 00:19:15,100
This is the main context and then these are things.

375
00:19:15,100 --> 00:19:15,800
I'm not bringing.

376
00:19:15,900 --> 00:19:20,000
This tree is actually something that I'm passing separate as well.

377
00:19:20,000 --> 00:19:22,300
Now it is effectively part of this.

378
00:19:22,500 --> 00:19:28,000
So, really, I could, if I wanted to move the tree into the layout as a

379
00:19:28,000 --> 00:19:29,100
thing that was known,

380
00:19:29,500 --> 00:19:33,100
Because it doesn't vary, but I don't really think that's necessary.

381
00:19:33,100 --> 00:19:35,600
So I'm happy to pass these two, right?

382
00:19:35,600 --> 00:19:36,700
There's no penalty for me.

383
00:19:36,700 --> 00:19:40,000
Passing them as, like, more stuff.

384
00:19:40,000 --> 00:19:41,600
That's on that line.

385
00:19:42,100 --> 00:19:46,100
It's just sometimes sometimes you'll see me collapse it down.

386
00:19:46,100 --> 00:19:47,800
So, it's literally just one for this.

387
00:19:47,800 --> 00:19:50,400
And the reason for that is I just get tired of having to have people

388
00:19:50,400 --> 00:19:52,600
call through when there's just one recursive function.

389
00:19:52,600 --> 00:19:54,700
You won't see me, do it that much because it's not a big deal to

390
00:19:54,700 --> 00:19:55,300
maintain.

391
00:19:55,500 --> 00:19:58,700
But when there's lots of functions that all take them then, like I

392
00:19:58,700 --> 00:19:59,200
would start to get

393
00:19:59,400 --> 00:20:02,100
Annoyed about the fact that I passed the layout and the tree when I

394
00:20:02,100 --> 00:20:05,000
could have just snuggled the tree in, with the layout.

395
00:20:05,000 --> 00:20:07,400
So, anyway, just a little thought process there.

396
00:20:08,600 --> 00:20:10,700
So, okay, moving on.

397
00:20:10,700 --> 00:20:12,700
Again, the only things that I'm really doing.

398
00:20:12,700 --> 00:20:14,300
Here are just cleaning this stuff up.

399
00:20:14,500 --> 00:20:15,700
We've got the frame ordinal.

400
00:20:15,700 --> 00:20:20,600
Now something that we're also going to want to put up here which one

401
00:20:20,600 --> 00:20:21,200
reviewing.

402
00:20:21,500 --> 00:20:22,600
So we'll get that going.

403
00:20:23,500 --> 00:20:24,800
We got the render group here.

404
00:20:24,800 --> 00:20:28,300
That's going to come from the debug State, and so I'm just going to go

405
00:20:28,300 --> 00:20:29,200
ahead and pull that out.

406
00:20:29,300 --> 00:20:29,800
Out as well.

407
00:20:29,800 --> 00:20:36,700
So here's sorry, render group render group.

408
00:20:39,500 --> 00:20:44,600
Like so, and that's probably an and we've got that at.

409
00:20:44,600 --> 00:20:46,600
Why that doesn't have to happen anymore.

410
00:20:46,600 --> 00:20:51,800
Draw trees, doesn't take the render group and so we can delete it and

411
00:20:51,800 --> 00:20:55,100
then we're back to where we started.

412
00:20:56,600 --> 00:20:58,500
All right, so let's see what we've got.

413
00:21:00,000 --> 00:21:01,000
Step in here.

414
00:21:02,400 --> 00:21:06,400
Handmade debug handmade.

415
00:21:06,400 --> 00:21:07,100
Debug.

416
00:21:07,100 --> 00:21:08,300
Where is my draw, treat?

417
00:21:08,300 --> 00:21:09,600
Well, actually, you know what?

418
00:21:11,200 --> 00:21:14,500
I could just call Raw tree link.

419
00:21:16,800 --> 00:21:17,600
Wait, wait.

420
00:21:17,600 --> 00:21:18,100
What?

421
00:21:20,900 --> 00:21:22,400
Is it not called Joshua link?

422
00:21:27,200 --> 00:21:28,500
It is called draw tree link.

423
00:21:29,100 --> 00:21:29,400
Oh,

424
00:21:31,300 --> 00:21:34,000
I can't step into something that doesn't get called.

425
00:21:34,100 --> 00:21:36,100
You're going to have to admit that, right?

426
00:21:37,200 --> 00:21:40,500
So draw tree link, got to take the debug State.

427
00:21:40,500 --> 00:21:44,400
It's got to take the layout which we have, it's got to take the tree

428
00:21:44,400 --> 00:21:48,300
and then it's got to take that route Group, whatever it is.

429
00:21:48,700 --> 00:21:50,600
So a, debug variable group.

430
00:21:52,600 --> 00:21:58,900
In this case, I guess that what does that actually have in it that

431
00:21:58,900 --> 00:22:01,400
actually has one of these guys.

432
00:22:01,400 --> 00:22:04,900
So we're actually starting out with one of these.

433
00:22:05,500 --> 00:22:10,000
If we're starting out with one of those, then it might be better for

434
00:22:10,000 --> 00:22:11,200
us too.

435
00:22:11,400 --> 00:22:14,000
Well, I guess it doesn't really matter to be honest.

436
00:22:14,400 --> 00:22:17,200
It's pretty easy for me to just do this and, and it's fine.

437
00:22:19,600 --> 00:22:23,400
And it's a little Annoying to have that happen but it's okay.

438
00:22:24,000 --> 00:22:25,600
So here's our group.

439
00:22:27,300 --> 00:22:35,200
And here's our group, we go and let's see.

440
00:22:35,200 --> 00:22:37,000
So, okay.

441
00:22:37,000 --> 00:22:40,900
So here is all of our stuff and it appears to be rendering correctly

442
00:22:40,900 --> 00:22:45,400
pretty much exactly as it was before with all of the fanciness.

443
00:22:45,400 --> 00:22:49,900
You'll notice that already has fixed one bug that we sort of had,

444
00:22:49,900 --> 00:22:52,800
that's been there for a long time, which is that the depth was

445
00:22:52,800 --> 00:22:56,600
incremented on the first time through, so that

446
00:22:57,400 --> 00:23:00,800
Even though this is, this is supposed to be left flush.

447
00:23:00,900 --> 00:23:04,800
Like it is, it was always indented over and so, that's good.

448
00:23:04,800 --> 00:23:08,200
So we fixed that which is one thing that is obviously nice to fix.

449
00:23:09,500 --> 00:23:11,900
So okay, we're getting there.

450
00:23:12,000 --> 00:23:12,700
We're getting there.

451
00:23:14,200 --> 00:23:14,600
So, yeah.

452
00:23:14,600 --> 00:23:17,000
So that's a, that's all well and good.

453
00:23:17,100 --> 00:23:18,200
What I'd like to do now.

454
00:23:18,200 --> 00:23:26,500
Potentially is is maybe get some kind of a notion of like, you know.

455
00:23:27,500 --> 00:23:31,100
Well, I'm trying to think of like how we might want this stuff to

456
00:23:31,100 --> 00:23:31,600
work.

457
00:23:32,700 --> 00:23:36,700
Like, now that I've got this drawing in a more saying way, I'm trying

458
00:23:36,700 --> 00:23:38,700
to think of is how I want this.

459
00:23:38,800 --> 00:23:39,100
This

460
00:23:39,300 --> 00:23:45,400
Some to behave in terms of editing it now, one thing I could do,

461
00:23:45,400 --> 00:23:45,700
right?

462
00:23:45,700 --> 00:23:49,600
It's I could go the wimp style and I could make these like little

463
00:23:49,600 --> 00:23:54,200
windows that you move around, but I don't really like having things

464
00:23:54,300 --> 00:23:55,000
work that way.

465
00:23:55,000 --> 00:23:59,800
I don't really like having sort of, with

466
00:24:00,000 --> 00:24:01,100
Style stuff.

467
00:24:01,300 --> 00:24:05,000
And the reason that I don't like that is because it's really nice to

468
00:24:05,000 --> 00:24:05,700
be able to win.

469
00:24:05,700 --> 00:24:08,900
I'm not, you know, like I mean think about what the window that

470
00:24:08,900 --> 00:24:09,300
encloses.

471
00:24:09,300 --> 00:24:10,200
This is right.

472
00:24:10,400 --> 00:24:14,300
I like not drawing crap over the game because a lot of times, you

473
00:24:14,300 --> 00:24:17,100
know, we're trying to look at the game like we're looking at the game

474
00:24:17,400 --> 00:24:20,900
and maybe we've got some stuff up and we want to be able to see as

475
00:24:20,900 --> 00:24:22,100
much of the game as possible.

476
00:24:22,300 --> 00:24:22,800
Right.

477
00:24:23,000 --> 00:24:25,600
I mean, like think about the situation where we're just trying to view

478
00:24:25,600 --> 00:24:29,800
this, this thing here, you know maybe I want

479
00:24:30,000 --> 00:24:33,900
To sort of get rid of as much of this as possible and just have this

480
00:24:34,000 --> 00:24:36,300
this thing up and that's it, right?

481
00:24:36,300 --> 00:24:39,900
And so I really don't want to make like a bunch of business that's

482
00:24:39,900 --> 00:24:43,900
like window.chrome that's like preventing me from seeing stuff.

483
00:24:44,800 --> 00:24:51,300
So I like the fact that these things are not are not like sort of

484
00:24:51,600 --> 00:24:52,800
heavy in that sense.

485
00:24:53,100 --> 00:24:56,000
So what I'd like to do is I'd like to sort of think about that for a

486
00:24:56,000 --> 00:24:59,800
second and and make a system that allows me to do

487
00:25:00,000 --> 00:25:05,000
You a little bit more with with sort of arranging these things when I

488
00:25:05,000 --> 00:25:09,400
want to or how I want to, I'd like to make something that allows me to

489
00:25:09,400 --> 00:25:15,500
do that a little bit better and doesn't require any sort of more kind

490
00:25:15,500 --> 00:25:17,100
of ridiculous stuff.

491
00:25:17,700 --> 00:25:20,000
The other thing that's a little bit and this was mentioned before the

492
00:25:20,000 --> 00:25:23,600
other thing that that might be true is you know, if I arrange some of

493
00:25:23,600 --> 00:25:24,400
these things,

494
00:25:26,900 --> 00:25:27,700
I don't know why that.

495
00:25:28,100 --> 00:25:30,900
So, it's drawing behind I got to make sure those things draw on top.

496
00:25:31,900 --> 00:25:35,000
Another thing that's true is, you know, if we create something here,

497
00:25:35,000 --> 00:25:38,700
that's kind of the layout for the interface that we, you know, that is

498
00:25:38,700 --> 00:25:39,500
how we want it.

499
00:25:39,500 --> 00:25:40,200
To go.

500
00:25:42,000 --> 00:25:45,900
One thing that's kind of a little confusing is well, you know,

501
00:25:48,800 --> 00:25:53,000
Do we want to save that somehow, you know, is that something we want

502
00:25:53,000 --> 00:25:57,600
to be able to save and that's kind of another open question.

503
00:26:02,000 --> 00:26:05,100
Thinking the answer is probably, no, but we'll see.

504
00:26:07,200 --> 00:26:12,400
So yeah, so in general, I'm just trying to think about that and how I

505
00:26:12,400 --> 00:26:14,300
might want to do that.

506
00:26:14,700 --> 00:26:18,100
And similarly, if you kind of look at the way this works, I feel like

507
00:26:18,100 --> 00:26:20,300
it's a little bit broken to in that.

508
00:26:20,500 --> 00:26:25,100
You always kind of get when I tear off something, or when I'm talking

509
00:26:25,100 --> 00:26:28,800
about one of these things, it indents, the things inside it, which

510
00:26:28,800 --> 00:26:29,500
would make sense

511
00:26:29,700 --> 00:26:33,800
If it wasn't the root of the window, but since it is, the root of the

512
00:26:33,800 --> 00:26:35,300
window, it makes me think that.

513
00:26:35,300 --> 00:26:39,300
Really, when we do that tear off, we probably shouldn't bother cloning

514
00:26:39,300 --> 00:26:40,800
that root element at all.

515
00:26:41,000 --> 00:26:43,500
And these should really just be the things that you tear off, because

516
00:26:43,500 --> 00:26:49,400
this is not a relevant piece of of UI anymore for this thing, right.

517
00:26:52,400 --> 00:26:54,300
So, let me think about that for a second.

518
00:26:55,100 --> 00:26:59,500
So here is the tear value bit.

519
00:27:00,900 --> 00:27:05,000
And when you do the chair value, but you can see that we do at Riyadh

520
00:27:05,400 --> 00:27:06,600
and we pass it.

521
00:27:06,600 --> 00:27:12,200
A route group and the route group presumably is cloned off of the

522
00:27:12,200 --> 00:27:13,300
particular variable.

523
00:27:13,300 --> 00:27:17,700
Yeah, you can see, it's whatever this link is but we're assuming that

524
00:27:17,700 --> 00:27:22,600
that link is either itself, a group or like I guess what we're saying

525
00:27:22,600 --> 00:27:27,200
is if that link is itself, a group, we really want to clone probably

526
00:27:30,300 --> 00:27:31,800
Just the stuff inside it.

527
00:27:32,000 --> 00:27:35,200
So I'm going to go ahead and take a look at what we do including

528
00:27:35,200 --> 00:27:36,100
variable group.

529
00:27:37,500 --> 00:27:37,900
Oops.

530
00:27:40,300 --> 00:27:41,400
Variable group.

531
00:27:45,100 --> 00:27:48,500
so, curious clone variable group, and

532
00:27:50,700 --> 00:27:55,500
Pretty much what it does, is it clones the children if it's got them.

533
00:27:56,500 --> 00:27:57,300
Right.

534
00:28:05,300 --> 00:28:08,500
And so it kind of doesn't do what we would want it to do.

535
00:28:09,200 --> 00:28:13,900
It, actually, there is no way to say just clone the children of this

536
00:28:13,900 --> 00:28:17,800
thing and input them into like a rude group here.

537
00:28:18,000 --> 00:28:20,100
And so,

538
00:28:22,500 --> 00:28:24,600
when we create this route group,

539
00:28:28,300 --> 00:28:30,800
I guess, one thing that I'm not really sure about.

540
00:28:33,100 --> 00:28:36,400
Is why it's still getting drawn either?

541
00:28:43,000 --> 00:28:48,600
because riddle me this when we do draw tree link,

542
00:28:49,700 --> 00:28:53,000
Remember, we did it sort of two different ways when we Loop over the

543
00:28:53,000 --> 00:28:56,100
trees, we don't draw the name of this group.

544
00:28:57,000 --> 00:29:02,300
So that, that top group, the group of the tree should never have its

545
00:29:02,300 --> 00:29:03,100
name drawn.

546
00:29:03,500 --> 00:29:07,300
So actually, what I just said, I wanted to have happen, should

547
00:29:07,300 --> 00:29:11,700
actually be what's happening and I'm not really sure why it isn't

548
00:29:11,700 --> 00:29:12,200
happening.

549
00:29:12,400 --> 00:29:15,800
So I feel like we need to investigate and find out what the deal is

550
00:29:15,800 --> 00:29:18,500
there because I'm not sure that I understand what that is.

551
00:29:23,800 --> 00:29:28,100
I'm so I'm going to just jump in here for a second and I want to see

552
00:29:28,500 --> 00:29:30,300
when we come to this code.

553
00:29:30,800 --> 00:29:32,200
I want to see what's going on.

554
00:29:35,700 --> 00:29:39,200
So, I'm going to open this up like I did before.

555
00:29:40,400 --> 00:29:45,200
And I'm going to clone the Senate this entity over here and I'll leave

556
00:29:45,200 --> 00:29:45,600
it open.

557
00:29:46,600 --> 00:29:47,800
And then I'm going to come in here.

558
00:29:47,800 --> 00:29:48,500
I'm just going to say.

559
00:29:48,500 --> 00:29:50,700
Alright, let's take a look at what's going on.

560
00:29:52,600 --> 00:29:53,400
So, here's the tree.

561
00:29:55,900 --> 00:29:57,800
Here is its group.

562
00:29:58,900 --> 00:29:59,800
Here is the name.

563
00:30:00,000 --> 00:30:04,200
Cloned so it looks like, okay?

564
00:30:04,200 --> 00:30:06,300
So when we do that clone

565
00:30:08,400 --> 00:30:09,600
Their value.

566
00:30:12,800 --> 00:30:15,800
When we do this clone, are we doing something?

567
00:30:19,100 --> 00:30:20,500
That is the call, right?

568
00:30:20,500 --> 00:30:21,300
There's only one call.

569
00:30:21,300 --> 00:30:21,700
Yeah.

570
00:30:23,800 --> 00:30:28,300
Interesting, interesting.

571
00:30:28,800 --> 00:30:31,500
So we create a variable group.

572
00:30:33,500 --> 00:30:34,600
And then we owe.

573
00:30:34,600 --> 00:30:37,700
So where does creating a synthetic variable group for?

574
00:30:37,700 --> 00:30:40,400
Absolutely no reason whatsoever.

575
00:30:47,400 --> 00:30:49,600
So that makes very little sense to me.

576
00:30:50,000 --> 00:30:55,000
I think what we actually wanted to do here was say that if this vist

577
00:30:55,000 --> 00:31:00,900
thing already was a group, then we wouldn't do this, right?

578
00:31:01,100 --> 00:31:04,300
So, I think what we really wanted to say was debug variable group

579
00:31:04,600 --> 00:31:05,300
result.

580
00:31:06,400 --> 00:31:10,700
And then we would say, if Source children, in fact, I guess we would

581
00:31:10,700 --> 00:31:15,100
just say this here is the result, right?

582
00:31:15,800 --> 00:31:16,100
All right.

583
00:31:16,200 --> 00:31:17,500
I guess I shouldn't say the result.

584
00:31:17,600 --> 00:31:22,500
The thing that we want to clone like this is the Clone me clone

585
00:31:22,500 --> 00:31:23,100
Source.

586
00:31:23,800 --> 00:31:27,200
We want to clone this Source children thing, right?

587
00:31:28,100 --> 00:31:33,600
If the Clone Source or maybe, maybe I think I had to say this.

588
00:31:35,300 --> 00:31:39,700
I don't want to create a new group if I don't need to write.

589
00:31:39,800 --> 00:31:42,800
So instead of doing is create for a loop, this clone variable link

590
00:31:42,800 --> 00:31:46,700
which returns a very building to me that will actually produce the

591
00:31:46,700 --> 00:31:48,900
variable group that I wanted.

592
00:31:49,400 --> 00:31:52,700
When I do the Clone write it.

593
00:31:52,700 --> 00:31:54,400
Let me, let me show you what I'm talking about here.

594
00:32:00,100 --> 00:32:03,600
So, here is the variable link situation, right?

595
00:32:04,000 --> 00:32:05,700
And here is the variable group.

596
00:32:06,600 --> 00:32:08,700
Now, why these two things are separate?

597
00:32:09,100 --> 00:32:11,500
I don't really know because probably we could just convince them.

598
00:32:11,500 --> 00:32:14,900
I mean, what it's the say for sake of one extra pointer it.

599
00:32:14,900 --> 00:32:18,700
In fact, like I don't even know why those two things are different.

600
00:32:22,000 --> 00:32:24,200
you know, there really is, absolutely no reason why those two things

601
00:32:24,200 --> 00:32:25,000
would be different

602
00:32:28,500 --> 00:32:29,600
I think I might just collapse them.

603
00:32:32,100 --> 00:32:35,400
There's really no reason for that because all we really need to say

604
00:32:35,400 --> 00:32:39,300
is, well, okay, we've got a debug variable link and here's here it is.

605
00:32:39,400 --> 00:32:41,200
There's the children, right?

606
00:32:41,300 --> 00:32:43,600
We don't need to look at that child porn or we could just use the

607
00:32:43,600 --> 00:32:45,600
Sentinel, right?

608
00:32:45,600 --> 00:32:48,500
That's that's really, that's it.

609
00:32:50,100 --> 00:32:53,000
And there's really no need for this at all.

610
00:32:53,200 --> 00:32:58,500
I don't think at least I don't see why there would be and then, you

611
00:32:58,500 --> 00:32:59,800
know, if we want a separate

612
00:33:00,000 --> 00:33:03,000
Here we can put one and then just not use it.

613
00:33:03,600 --> 00:33:05,800
It's like like I said, it's one extra pointer.

614
00:33:06,300 --> 00:33:09,200
It doesn't really seem like a big deal and we're just adding

615
00:33:09,200 --> 00:33:10,500
complexity for no reason.

616
00:33:11,100 --> 00:33:14,900
So if you look at these here right then instead of you know groups

617
00:33:14,900 --> 00:33:19,800
these would just be anywhere you see group you would just substitute

618
00:33:22,700 --> 00:33:23,300
a link.

619
00:33:27,300 --> 00:33:28,000
Right?

620
00:33:28,400 --> 00:33:29,500
And that should do it.

621
00:33:29,600 --> 00:33:31,700
Now, it's going to take a little bit of love.

622
00:33:35,100 --> 00:33:35,700
A fussing.

623
00:33:36,500 --> 00:33:39,500
Ah, but I can't do that, right?

624
00:33:49,500 --> 00:33:51,700
That is the real reason.

625
00:33:53,700 --> 00:33:55,100
That is the real reason.

626
00:33:55,500 --> 00:33:59,200
It's I just wanted to use the trick of having a doubly linked list.

627
00:33:59,200 --> 00:33:59,800
Sentinel.

628
00:34:01,000 --> 00:34:05,700
Well I can still do that and not have the added complexity.

629
00:34:05,800 --> 00:34:09,600
All I have to do at that point.

630
00:34:09,600 --> 00:34:13,900
I suppose is it continued and doing here?

631
00:34:15,800 --> 00:34:16,400
Where was I?

632
00:34:16,800 --> 00:34:17,199
There you go.

633
00:34:18,100 --> 00:34:23,000
I guess all I really have to do is make sure that these are

634
00:34:36,100 --> 00:34:36,699
That.

635
00:34:38,100 --> 00:34:38,800
Is annoying.

636
00:34:40,199 --> 00:34:42,199
You can see what the problem is, right?

637
00:34:42,199 --> 00:34:45,100
I don't want this to be a separate thing, because there's no reason

638
00:34:45,100 --> 00:34:46,100
for to be a separate thing.

639
00:34:46,400 --> 00:34:50,800
But because I'm using the convenience of this being a doubly linked

640
00:34:50,800 --> 00:34:55,100
list, you just make the Sentinel by including one of these in the

641
00:34:55,100 --> 00:34:55,600
group.

642
00:34:56,199 --> 00:34:56,800
But

643
00:34:58,900 --> 00:35:02,700
That's just kind of annoying and it's just an implementation detail,

644
00:35:02,700 --> 00:35:03,100
right?

645
00:35:03,100 --> 00:35:03,700
It's a thing.

646
00:35:03,700 --> 00:35:09,800
That's like, I don't really, it's just makes it a little bit easier.

647
00:35:12,600 --> 00:35:14,000
To be able to do that.

648
00:35:14,800 --> 00:35:20,600
So what I would rather do you know what I'd rather do, is this and

649
00:35:20,600 --> 00:35:23,700
this would be, you know this is the kind of thing that you wish to

650
00:35:23,700 --> 00:35:27,900
language did for you but it doesn't what you want to do is this and

651
00:35:27,900 --> 00:35:32,200
just actually point when you initialize at the Sentinel, you want to

652
00:35:32,200 --> 00:35:37,000
point it at this at this point are here, right?

653
00:35:40,700 --> 00:35:42,800
Kind of nasty but that's what you would do.

654
00:35:43,300 --> 00:35:44,000
And

655
00:35:46,200 --> 00:35:48,800
I'm going to do it because I don't like having these being multiple

656
00:35:48,800 --> 00:35:49,200
things.

657
00:35:49,200 --> 00:35:51,800
I don't think there's any reason for it so I'm going to get rid of it.

658
00:35:52,800 --> 00:35:53,400
So anyway,

659
00:35:55,800 --> 00:35:56,800
Let's go ahead and change it.

660
00:35:56,800 --> 00:35:59,700
So, in this case, for example, instead of

661
00:36:00,100 --> 00:36:02,900
Anything where we would do sentinel next, right?

662
00:36:04,100 --> 00:36:07,200
Actually, what we would do and in fact, what I can do as well to make

663
00:36:07,200 --> 00:36:10,500
this a little clearer, I can make a thing that's like debug variable

664
00:36:10,500 --> 00:36:11,000
link.

665
00:36:14,200 --> 00:36:14,800
Sentinel.

666
00:36:22,500 --> 00:36:27,300
And I can make this do the the Ridiculousness that would make it

667
00:36:27,300 --> 00:36:29,000
appear as if it's a sentinel.

668
00:36:40,800 --> 00:36:42,100
So, here's my from field.

669
00:36:44,800 --> 00:36:49,700
This is my debug variable ink that I'm talking about and I'm just

670
00:36:49,700 --> 00:36:52,800
going to say well, whatever the first whatever this guy is right here,

671
00:36:53,100 --> 00:36:53,600
right?

672
00:36:54,600 --> 00:37:00,500
That's essentially where I actually want to pretend the pointer is

673
00:37:01,900 --> 00:37:02,400
Right.

674
00:37:06,100 --> 00:37:10,600
So basically I've got this pair and I want to pretend that this pair

675
00:37:10,600 --> 00:37:11,800
is essentially this pair.

676
00:37:12,600 --> 00:37:13,300
Does that make sense?

677
00:37:13,700 --> 00:37:15,900
I'll move this guy down here so you can see it a little better.

678
00:37:17,600 --> 00:37:23,700
So yeah, it's not really a debug variable link, it's a fake one that

679
00:37:23,700 --> 00:37:24,800
just exists right here.

680
00:37:24,800 --> 00:37:29,300
For the purposes of, you know, making are doubly linked list work.

681
00:37:32,400 --> 00:37:32,800
Yeah.

682
00:37:34,900 --> 00:37:36,800
So, let's go ahead and make that happen.

683
00:37:39,700 --> 00:37:43,000
All of these remain the same basically, debug variable group, just

684
00:37:43,000 --> 00:37:46,400
changes to debug variable link pretty much everywhere it's used.

685
00:37:48,600 --> 00:37:52,300
So, and then in here, same thing, really?

686
00:37:56,500 --> 00:37:59,900
Start with all of these are going to be links.

687
00:38:04,800 --> 00:38:05,100
Okay?

688
00:38:06,500 --> 00:38:09,800
And then everywhere that we were using a sentinel before we can, if we

689
00:38:09,800 --> 00:38:16,700
want to literally just turn them into a get Sentinel call or what did

690
00:38:16,700 --> 00:38:17,300
I call it?

691
00:38:25,100 --> 00:38:26,000
Let's call it.

692
00:38:26,500 --> 00:38:27,300
Get Sentinel.

693
00:38:31,300 --> 00:38:32,000
And that's really it.

694
00:38:32,100 --> 00:38:35,500
So we can just use the get Sentinel call and get the Sentinel same

695
00:38:35,500 --> 00:38:39,000
thing in this case here get Sentinel.

696
00:38:41,400 --> 00:38:41,800
Very good.

697
00:38:44,200 --> 00:38:48,000
Yeah, Sentinel and

698
00:38:55,000 --> 00:38:55,300
Song.

699
00:39:01,600 --> 00:39:04,100
What is it complaining about?

700
00:39:07,400 --> 00:39:08,800
Get Sentinel.

701
00:39:09,900 --> 00:39:11,000
Cannot convert.

702
00:39:11,100 --> 00:39:13,100
Oh right I don't actually need that because that's going to

703
00:39:13,100 --> 00:39:14,100
automatically done for me.

704
00:39:16,900 --> 00:39:21,700
So inside here want to assert that this link does not have children.

705
00:39:21,700 --> 00:39:30,500
So that's just saying that the link first equals get Sentinel.

706
00:39:36,100 --> 00:39:37,700
So it's, it's empty.

707
00:39:39,400 --> 00:39:40,400
There's all that's trying to say.

708
00:39:42,300 --> 00:39:43,400
And you know what I could do to?

709
00:39:43,400 --> 00:39:45,500
I could make that be a thing as well.

710
00:39:57,000 --> 00:40:00,400
so, if the link first is not equal to

711
00:40:02,700 --> 00:40:03,500
The.

712
00:40:06,000 --> 00:40:06,500
Sentinel.

713
00:40:14,700 --> 00:40:19,900
and yeah, so I can just say if this guy has children do your thing,

714
00:40:20,900 --> 00:40:25,700
Groups, don't want semicolon there, and that's about it.

715
00:40:25,700 --> 00:40:26,900
So, let's see.

716
00:40:26,900 --> 00:40:27,800
This is the Draught relink.

717
00:40:27,800 --> 00:40:31,000
So, if we're going to get the text out of the sky, then we can

718
00:40:31,000 --> 00:40:34,200
actually just use this name directly and that's fine.

719
00:40:34,900 --> 00:40:39,100
In here again, we want the get Sentinel actually, I guess we don't

720
00:40:39,100 --> 00:40:40,100
even need that.

721
00:40:40,500 --> 00:40:43,000
If we don't want to do, we can start using these directly when we know

722
00:40:43,000 --> 00:40:43,600
what we're doing.

723
00:40:44,100 --> 00:40:46,500
So like this link is first.

724
00:40:46,500 --> 00:40:50,300
And you know what, I might call these first child and last child

725
00:40:51,000 --> 00:40:54,200
As well, just to make it a little clearer, what we're talking about.

726
00:40:59,100 --> 00:41:01,200
Okay, and let's see.

727
00:41:01,700 --> 00:41:04,300
So this is get Sentinel.

728
00:41:10,300 --> 00:41:13,600
And yeah, that's really just what that is.

729
00:41:21,900 --> 00:41:23,100
in this case, we've got

730
00:41:25,700 --> 00:41:29,500
Again another group we're just going to want the first child, and then

731
00:41:29,500 --> 00:41:30,900
here, we're going to get the Sentinel again.

732
00:41:32,800 --> 00:41:37,600
With the group actually makes this most of that iteration code

733
00:41:37,600 --> 00:41:38,800
actually look much nicer.

734
00:41:40,600 --> 00:41:44,800
So, here is the get Sentinel on the parent.

735
00:41:49,700 --> 00:41:53,400
initializing the children part of things, this part we're going to

736
00:41:53,400 --> 00:41:56,600
have to kind of actually do now, because this is a little bit more

737
00:41:56,900 --> 00:41:57,600
specific

738
00:42:00,700 --> 00:42:03,000
Add element to group will be done here.

739
00:42:03,800 --> 00:42:07,900
The link that we add needs to have its children initialized.

740
00:42:07,900 --> 00:42:14,200
I guess, although I suppose I suppose this push struct here.

741
00:42:14,200 --> 00:42:16,700
Well, I guess it is a push truck so that element to group is actually

742
00:42:16,700 --> 00:42:18,500
initializes it so cure.

743
00:42:21,100 --> 00:42:28,000
When we do this, we would set first child equal to last child, which

744
00:42:28,000 --> 00:42:31,200
is all equal to the get Sentinel on the link.

745
00:42:33,000 --> 00:42:35,200
We then have ad group to group.

746
00:42:35,300 --> 00:42:39,300
This is doing essentially the same thing when we're adding group.

747
00:42:39,300 --> 00:42:41,600
Again, we're just adding one of these things.

748
00:42:41,700 --> 00:42:45,300
We now long no longer really have to talk about adding groups to

749
00:42:45,300 --> 00:42:50,700
things though for the most part, because basically anything that you

750
00:42:50,700 --> 00:42:51,300
ad,

751
00:42:54,200 --> 00:42:57,900
Excuse me, is going to be a link, so this is really as creates a link.

752
00:42:58,000 --> 00:43:03,100
This doesn't need to create a link because it already is a link.

753
00:43:03,300 --> 00:43:09,500
So this one is kind of a little bit on a little bit nonsensical.

754
00:43:11,700 --> 00:43:14,800
So I mean really, this is just going to, this doesn't have to do a

755
00:43:14,800 --> 00:43:16,200
push trucker any of those things.

756
00:43:16,800 --> 00:43:21,200
This is just going to do this now and it's going to use that insert

757
00:43:21,200 --> 00:43:23,900
and it's not going to do any of these things, right?

758
00:43:24,400 --> 00:43:27,100
And it doesn't really need to return a link either.

759
00:43:27,600 --> 00:43:32,900
So this is just like, add link to group and get you know, it's just

760
00:43:32,900 --> 00:43:33,600
doing that.

761
00:43:35,400 --> 00:43:37,300
So what to think about whether that even needs to be there anymore?

762
00:43:37,300 --> 00:43:40,600
But anyway, create variable group, this is going to do exactly what we

763
00:43:40,600 --> 00:43:45,700
would have expected it to do, and when it creates one of these, again,

764
00:43:45,700 --> 00:43:48,200
it kind of wants to do what this thing is doing up here.

765
00:43:48,700 --> 00:43:50,900
So, it's basically doing the exact same stuff.

766
00:43:50,900 --> 00:43:54,800
It's going to do going to do this bit here.

767
00:43:55,400 --> 00:43:58,900
When the group comes back, it's going to slice the child thing and

768
00:43:59,200 --> 00:44:00,900
yeah that should do it.

769
00:44:01,200 --> 00:44:04,800
Now again these things, I feel like this kind of wants to be

770
00:44:04,900 --> 00:44:06,300
Or regular eyes.

771
00:44:06,300 --> 00:44:10,600
Now I don't know what free variable group says, it's not implemented.

772
00:44:10,600 --> 00:44:12,700
So I'm just going to go ahead and assume that we're going to will

773
00:44:12,700 --> 00:44:15,700
Implement that some other time if we actually care about it.

774
00:44:16,300 --> 00:44:18,100
I also don't know what ad region still doing there.

775
00:44:18,100 --> 00:44:22,400
We haven't used that in years, so I'm just going to keep going here.

776
00:44:22,400 --> 00:44:26,900
So we've got out element to group and and we've got a link to group

777
00:44:26,900 --> 00:44:27,500
they both.

778
00:44:28,300 --> 00:44:28,800
I'm sorry.

779
00:44:28,800 --> 00:44:30,600
And we've got create variable group.

780
00:44:30,600 --> 00:44:34,700
They both need to create one of these things.

781
00:44:34,900 --> 00:44:34,900
Things.

782
00:44:34,900 --> 00:44:40,900
And so, it's just a question of whether it's creating one or adding

783
00:44:40,900 --> 00:44:41,500
one is an element.

784
00:44:41,500 --> 00:44:45,600
So, I think, what I want to do is, is kind of make this guy be a

785
00:44:45,600 --> 00:44:49,000
little more Primal where we just have create variable link, it's just

786
00:44:49,000 --> 00:44:53,700
one thing now, it takes the name if you want it to have one and then

787
00:44:53,700 --> 00:44:56,700
maybe it would take the debug element as well, if you wanted it to

788
00:44:56,700 --> 00:44:59,900
store a debug element, all of these, if you want, can be,

789
00:45:00,000 --> 00:45:01,700
Set to null, right?

790
00:45:01,700 --> 00:45:05,200
You can pass 04 everything in there and that would be fine.

791
00:45:07,600 --> 00:45:12,800
So I can even do an if name length on here, otherwise,

792
00:45:15,200 --> 00:45:16,500
In fact, I guess I could do this.

793
00:45:21,100 --> 00:45:23,100
And I don't know that might already do that.

794
00:45:23,600 --> 00:45:24,600
I'm not actually sure.

795
00:45:24,600 --> 00:45:26,900
In fact, let's take a look because I guess there's no sense in

796
00:45:27,400 --> 00:45:28,600
duplicating code.

797
00:45:29,400 --> 00:45:31,500
Here is handmade .h.

798
00:45:31,500 --> 00:45:34,400
Oops, that's not right and made .h.

799
00:45:36,600 --> 00:45:37,400
And me.

800
00:45:38,000 --> 00:45:44,800
Yeah, push and I'll terminate you can see in here, what it's doing, it

801
00:45:44,800 --> 00:45:46,900
pushes the size with the length and everything.

802
00:45:46,900 --> 00:45:51,200
So push it it will terminate actually is always going to do that push.

803
00:45:51,200 --> 00:45:53,400
So I think I am going to going to if it here.

804
00:45:54,000 --> 00:45:56,200
So I'm going to say, okay, if there's name length of push it,

805
00:45:56,200 --> 00:46:01,100
otherwise I won't, I have to initialize the other parts here, which is

806
00:46:01,100 --> 00:46:04,900
the next in the previous, but that's where we're going to get handled

807
00:46:04,900 --> 00:46:05,500
for me.

808
00:46:08,300 --> 00:46:13,300
I guess delisted it does that does the first and last so I guess I

809
00:46:13,300 --> 00:46:16,300
don't need that part.

810
00:46:20,600 --> 00:46:21,700
I guess, I just say that.

811
00:46:23,000 --> 00:46:25,300
Yeah, so I just say, okay.

812
00:46:27,700 --> 00:46:33,200
Whatever my new link is initialize it please which does set the

813
00:46:33,200 --> 00:46:34,500
pointer to point to itself.

814
00:46:34,800 --> 00:46:41,700
The link itself does have the next and previous Parts which at the

815
00:46:41,700 --> 00:46:43,200
moment, it's not going anywhere.

816
00:46:43,200 --> 00:46:47,400
So I think we want the next the previous this 2.0 and then we want the

817
00:46:47,400 --> 00:46:49,500
name to be with the name is.

818
00:46:49,500 --> 00:46:51,400
So that's how we would create a variable link.

819
00:46:52,100 --> 00:46:55,900
When we add this to a group, this one here we've got the parent and

820
00:46:55,900 --> 00:46:57,300
the element and all that stuff.

821
00:46:57,400 --> 00:47:01,500
I think all we want to do now is say, Okay, create variable link,

822
00:47:03,100 --> 00:47:04,600
here's the debug state.

823
00:47:06,200 --> 00:47:07,300
There's no name for it.

824
00:47:07,300 --> 00:47:09,600
It does have an element, please make it for me.

825
00:47:10,100 --> 00:47:17,100
And we can also make that link element come out and I'm trying to

826
00:47:17,100 --> 00:47:20,300
decide whether I actually want that, maybe, you know, maybe we'll just

827
00:47:20,300 --> 00:47:21,000
even do this.

828
00:47:23,900 --> 00:47:26,400
And we'll just set that in here, right?

829
00:47:28,200 --> 00:47:29,700
So that seems all good.

830
00:47:30,800 --> 00:47:33,300
And then when we get to the rest of these, they just are always

831
00:47:33,300 --> 00:47:34,400
calling that, right?

832
00:47:34,500 --> 00:47:37,400
So, add element to group, does its thing.

833
00:47:37,600 --> 00:47:41,700
All of these guys, basically, do its thing when we create one of

834
00:47:41,700 --> 00:47:44,900
these, again, I think we would just call create variable link.

835
00:47:48,500 --> 00:47:52,500
Instead of doing anything, fancier, it doesn't have a name.

836
00:47:52,500 --> 00:47:53,400
This one doesn't.

837
00:47:53,700 --> 00:47:56,100
So it doesn't have to do any of this.

838
00:47:57,000 --> 00:47:58,800
And then we set the name ourselves.

839
00:47:58,800 --> 00:47:59,600
It looks like

840
00:48:03,400 --> 00:48:08,500
So we wouldn't want to clone it, which seems good.

841
00:48:08,500 --> 00:48:10,900
And then we do our thing.

842
00:48:21,500 --> 00:48:22,000
All right.

843
00:48:24,300 --> 00:48:25,300
So that seems reasonable.

844
00:48:25,300 --> 00:48:27,400
We're getting down to it, almost there.

845
00:48:28,400 --> 00:48:31,200
Of course we've got some debugging to do to be sure, but you know what

846
00:48:31,200 --> 00:48:33,800
you gonna do, Somebody's gotta bite the bullet.

847
00:48:34,400 --> 00:48:36,700
So create variable link does not take four arguments.

848
00:48:36,700 --> 00:48:37,500
I agree with you.

849
00:48:37,500 --> 00:48:45,500
I got rid of one of them and get Sentinel of whatever our parent is.

850
00:48:45,500 --> 00:48:46,200
There we go.

851
00:48:47,200 --> 00:48:51,300
And this is, if the thing had children, I guess.

852
00:48:55,300 --> 00:49:00,200
So, and let's see.

853
00:49:00,800 --> 00:49:04,800
So in this case, we don't actually need to call this, I guess, because

854
00:49:04,800 --> 00:49:07,800
we've already done Ed element to group and element group will create

855
00:49:07,800 --> 00:49:10,100
the link for us that we need to add ourselves to.

856
00:49:10,300 --> 00:49:12,300
So actually, none of this is necessary.

857
00:49:12,300 --> 00:49:16,200
We can just say, well, whatever the thing is that we did if we had

858
00:49:16,200 --> 00:49:19,700
children we just want to clone those children, right?

859
00:49:20,400 --> 00:49:23,700
So really this is kind of academic.

860
00:49:24,200 --> 00:49:27,200
We would just say we do the Clone and then we say if the source said

861
00:49:27,200 --> 00:49:32,800
children we clone the children that's really all there is to it so

862
00:49:32,800 --> 00:49:33,800
that should be simpler.

863
00:49:33,800 --> 00:49:37,000
That's actually much easier than it is than than we were kind of

864
00:49:37,100 --> 00:49:39,400
making it out to be same with that.

865
00:49:41,200 --> 00:49:42,200
Let's see here.

866
00:49:42,500 --> 00:49:44,200
When we do get a create group with name.

867
00:49:44,200 --> 00:49:46,800
In this case, this is essentially the same situation.

868
00:49:47,000 --> 00:49:49,400
This, basically, this actually seems to clean up the code, quite

869
00:49:49,400 --> 00:49:50,600
nicely, in my opinion.

870
00:49:50,600 --> 00:49:52,000
So far, I've liked everything.

871
00:49:52,000 --> 00:49:54,400
All of the changes that have gone on.

872
00:49:54,600 --> 00:49:58,200
Thanks to this collapsing of these two types down into one type.

873
00:49:58,800 --> 00:49:59,900
So that's kind of nice.

874
00:50:00,700 --> 00:50:06,500
Let's see if, if this has children was I guess what we were checking.

875
00:50:06,800 --> 00:50:09,100
I'm not sure why we were checking it because I guess we,

876
00:50:10,400 --> 00:50:13,300
Well, I guess you want to make sure that it wasn't a link with that

877
00:50:13,300 --> 00:50:14,600
name that didn't have children.

878
00:50:17,400 --> 00:50:18,300
I think we don't want that.

879
00:50:18,300 --> 00:50:19,700
I think we just want to compare it.

880
00:50:20,800 --> 00:50:21,600
Yeah, because we want to.

881
00:50:21,600 --> 00:50:22,600
Yeah, I think so.

882
00:50:24,100 --> 00:50:26,000
And so then we're going to say, well, here is the group.

883
00:50:29,000 --> 00:50:32,600
If it matched then we're going to do a creeper oh group if it didn't

884
00:50:32,600 --> 00:50:36,900
match and create an attitude to its parent.

885
00:50:37,100 --> 00:50:39,200
So this is really great for the link again.

886
00:50:40,700 --> 00:50:46,700
And add group to group and if are not found so ad group to group is

887
00:50:46,700 --> 00:50:48,600
just add link to group, right?

888
00:50:48,800 --> 00:50:51,200
That's the link to group.

889
00:50:51,200 --> 00:50:51,600
Yeah.

890
00:50:52,800 --> 00:50:54,900
So let me go ahead and change that.

891
00:50:57,900 --> 00:50:58,800
I'd like to group.

892
00:51:00,500 --> 00:51:06,100
Create variable group declare but not defined create variable group.

893
00:51:07,700 --> 00:51:09,700
Where was that declared?

894
00:51:09,700 --> 00:51:10,600
Was it up here?

895
00:51:12,700 --> 00:51:13,500
And actually, no.

896
00:51:16,400 --> 00:51:18,900
I'm in the wrong function, I mean the wrong file.

897
00:51:20,800 --> 00:51:24,000
So here is our create variable group in our clone variable group free

898
00:51:24,000 --> 00:51:24,700
declarations.

899
00:51:24,700 --> 00:51:26,700
I hate pre decorations with a passion.

900
00:51:29,900 --> 00:51:34,500
I was very glad to see that John did an incremental compiler so they

901
00:51:34,500 --> 00:51:36,700
would not have this problem in j.i.

902
00:51:37,600 --> 00:51:44,800
so we've got clone variable linked as one of our things we can do and

903
00:51:44,800 --> 00:51:48,100
we've got what is it?

904
00:51:48,200 --> 00:51:50,800
Create variable link.

905
00:51:58,700 --> 00:51:59,000
I am.

906
00:51:59,000 --> 00:52:00,700
So now we just want to fix those up.

907
00:52:00,700 --> 00:52:02,500
So here is create variable link.

908
00:52:04,900 --> 00:52:08,700
I'm sorry, clone variable link, it does not take two arguments.

909
00:52:09,600 --> 00:52:12,000
What pray tell arguments does it take?

910
00:52:18,000 --> 00:52:22,300
So it takes a desk group and a source.

911
00:52:29,300 --> 00:52:35,900
so, I guess there was there's one that doesn't take

912
00:52:37,900 --> 00:52:38,300
Yeah.

913
00:52:40,400 --> 00:52:41,700
Actually two versions.

914
00:52:42,800 --> 00:52:46,300
Clever and one is the one that we want to change that's kind of spur

915
00:52:46,300 --> 00:52:50,300
and this whole situation for words, all right?

916
00:52:55,500 --> 00:52:56,700
Keep on keeping on.

917
00:53:05,600 --> 00:53:09,000
All right, so let's see here.

918
00:53:09,300 --> 00:53:10,800
I don't realize the code was still running.

919
00:53:10,800 --> 00:53:15,000
Let's get a fresh build of this and see where we're at.

920
00:53:16,400 --> 00:53:19,200
okay, so to bug time,

921
00:53:23,900 --> 00:53:27,700
our link name is no which is not fabulous.

922
00:53:31,700 --> 00:53:34,900
so this is just because we're supposed to be, these are

923
00:53:37,500 --> 00:53:41,000
This is yeah, we should just check the name there, that's actually

924
00:53:41,000 --> 00:53:41,900
totally fine.

925
00:53:42,200 --> 00:53:45,800
We're allowed to have no names there so really we just want this to

926
00:53:46,400 --> 00:53:46,900
check.

927
00:53:47,100 --> 00:53:48,500
I'm kind of surprised.

928
00:53:48,900 --> 00:53:53,800
I feel like our strings are equal should actually take care of that

929
00:53:53,800 --> 00:53:54,200
though.

930
00:53:54,700 --> 00:53:55,700
I don't love that.

931
00:53:55,700 --> 00:53:59,000
So I actually think what I would rather do is have our strings are

932
00:53:59,000 --> 00:53:59,600
equal.

933
00:54:00,000 --> 00:54:05,300
Handle that don't actually know where that is really got to implement

934
00:54:05,400 --> 00:54:07,600
search in all files.

935
00:54:07,600 --> 00:54:11,000
I have not had the chance to do that yet, but it's makes it really

936
00:54:11,000 --> 00:54:11,200
hard.

937
00:54:11,200 --> 00:54:12,100
I had that in emacs.

938
00:54:12,100 --> 00:54:17,500
I haven't written it for for credit even though be pretty simple.

939
00:54:18,300 --> 00:54:19,200
Just have had time.

940
00:54:19,700 --> 00:54:22,200
So anyway, strings are equal.

941
00:54:22,200 --> 00:54:24,700
I could actually just run fine sir if I wanted to just like the old

942
00:54:24,700 --> 00:54:27,500
style, but I, since I can Implement directly in foreclosure, I felt

943
00:54:27,500 --> 00:54:29,400
like it should probably be done that way, because it'd be better.

944
00:54:30,700 --> 00:54:35,400
So I need to find our strings are equal but I'm not sure where it is.

945
00:54:38,400 --> 00:54:41,400
and that means,

946
00:54:46,700 --> 00:54:47,900
And where did I put that?

947
00:54:54,200 --> 00:54:54,700
There it is.

948
00:54:55,500 --> 00:54:58,600
So what I'd like to do in strings are equal when we pass these, what

949
00:54:58,600 --> 00:55:03,200
I'd like to do is make sure that they handle like, for example in this

950
00:55:03,200 --> 00:55:07,300
one, you can see that it handles the case where there's the word,

951
00:55:07,300 --> 00:55:09,200
something's know, right?

952
00:55:09,900 --> 00:55:16,400
So in this case, I would never be touching yet.

953
00:55:16,500 --> 00:55:19,000
This, this function is basically really crappy.

954
00:55:19,100 --> 00:55:23,700
This is not a good function because B can be null.

955
00:55:24,000 --> 00:55:27,000
And it doesn't actually ever check for that, right?

956
00:55:28,600 --> 00:55:36,800
So what we probably want to do is say something like, okay, we still

957
00:55:36,800 --> 00:55:42,000
want the same strings are equal function like this one, but we want to

958
00:55:42,000 --> 00:55:43,700
make sure that we're not yet.

959
00:55:45,900 --> 00:55:50,100
I mean, I guess the way I could do this most easily would just be like

960
00:55:50,400 --> 00:55:57,200
you know if if B then we do it the way we were doing it, right?

961
00:56:02,800 --> 00:56:04,100
Not know why that's indenting the way.

962
00:56:04,100 --> 00:56:04,800
It's indenting.

963
00:56:05,400 --> 00:56:06,300
The Mysteries.

964
00:56:09,100 --> 00:56:12,200
Okay, let's see.

965
00:56:12,800 --> 00:56:13,700
The result.

966
00:56:14,900 --> 00:56:15,700
Is false.

967
00:56:18,100 --> 00:56:20,000
So we can do that the way we were doing it.

968
00:56:20,100 --> 00:56:22,700
This could probably simplify it a bit, but just for the sake of making

969
00:56:22,700 --> 00:56:23,900
this work at the moment.

970
00:56:25,100 --> 00:56:31,800
If B is not valid, then we would just say the result equals a length

971
00:56:31,800 --> 00:56:32,600
equal zero.

972
00:56:36,100 --> 00:56:39,500
Cuz if there's no B, then that means that a is length had better, be

973
00:56:39,500 --> 00:56:41,100
none, right?

974
00:56:42,600 --> 00:56:45,500
That seems better to me because I would rather write I would rather

975
00:56:45,500 --> 00:56:46,500
have that.

976
00:56:47,800 --> 00:56:48,400
Do its thing.

977
00:56:48,400 --> 00:56:48,900
That way.

978
00:56:49,200 --> 00:56:51,900
Okay, so we have successfully made that change.

979
00:56:52,200 --> 00:56:53,800
Our cloning is working again.

980
00:56:54,600 --> 00:56:55,800
So that's all good.

981
00:56:55,900 --> 00:56:57,300
Again, pretty simple change.

982
00:56:57,300 --> 00:56:58,900
I just wanted to collapses down.

983
00:57:00,000 --> 00:57:02,500
So now what I'd like to do since we're basically out of time, got

984
00:57:02,500 --> 00:57:05,300
about 23 minutes left, I just want to go ahead and make that change

985
00:57:05,300 --> 00:57:05,700
where I said.

986
00:57:05,700 --> 00:57:08,500
So, like when I pull one of these things off, it actually just pulls

987
00:57:08,500 --> 00:57:11,800
the group off, as its separate thing without leaving the header.

988
00:57:13,000 --> 00:57:14,700
And so, in order to do that now,

989
00:57:16,500 --> 00:57:18,800
Sorry, I kind of went off on a tangent there but I just want to clean

990
00:57:18,800 --> 00:57:20,900
that code up in order to do that.

991
00:57:20,900 --> 00:57:24,800
Now what I want to do is during the Clone operation you can see right

992
00:57:24,800 --> 00:57:29,900
here, why we're having the problem when I say that I want to clone a

993
00:57:29,900 --> 00:57:31,200
debug variable.

994
00:57:31,700 --> 00:57:35,400
What I want to do is not ever have this happen.

995
00:57:35,700 --> 00:57:38,400
I don't ever want to actually do any of this.

996
00:57:38,700 --> 00:57:43,300
What I want to do instead is just do the direct clone and return it.

997
00:57:43,600 --> 00:57:46,000
So I just want to do literally clone the

998
00:57:46,200 --> 00:57:46,600
Course.

999
00:57:49,400 --> 00:57:52,100
And now I can do that because they're all the same and we don't care

1000
00:57:52,100 --> 00:57:54,500
which one it's going to be right.

1001
00:57:57,800 --> 00:57:58,500
Whoops.

1002
00:58:11,500 --> 00:58:13,700
We allow this to be 0, right?

1003
00:58:13,800 --> 00:58:16,000
If I say add element to group,

1004
00:58:18,100 --> 00:58:18,500
Oh no.

1005
00:58:18,500 --> 00:58:19,400
We don't

1006
00:58:22,200 --> 00:58:24,600
So I could make that I'm trying to think of this should just be

1007
00:58:24,600 --> 00:58:25,600
untangled a little bit.

1008
00:58:25,700 --> 00:58:29,400
I want to be able to clone this thing and not actually pass it.

1009
00:58:29,400 --> 00:58:32,200
Anything for the desk Group which I could do a little slightly by just

1010
00:58:32,200 --> 00:58:36,300
making this support zero as the parent, but really,

1011
00:58:37,700 --> 00:58:41,800
These are sort of the same in that sense, if that makes sense.

1012
00:58:44,200 --> 00:58:46,000
I feel like this wants to be on Taylor and more.

1013
00:58:46,200 --> 00:58:49,000
I'll skip it for just a moment but then I think we should probably

1014
00:58:49,000 --> 00:58:50,500
untangle a little bit anyway.

1015
00:58:50,500 --> 00:58:53,800
So if we did add an element to group, you can see this is the part

1016
00:58:53,800 --> 00:58:55,200
that actually deals with the parent.

1017
00:58:55,200 --> 00:58:59,200
So I can just say, if I want to if parent here and this will just

1018
00:58:59,200 --> 00:59:02,400
work, but I feel like this needs to be untangled just a tad.

1019
00:59:03,300 --> 00:59:04,800
Now that we know what it looks like.

1020
00:59:05,300 --> 00:59:09,200
So now if I do something like pull off the the the profile now it's a

1021
00:59:09,200 --> 00:59:10,200
little more sane.

1022
00:59:10,400 --> 00:59:13,400
Now like the profile is just like a free-floating thing that doesn't

1023
00:59:13,400 --> 00:59:16,800
have an actual separate piece here and I think that's more what I

1024
00:59:16,800 --> 00:59:22,500
would like because now we always can actually draw the other part if

1025
00:59:22,500 --> 00:59:24,400
we want to, but we don't have to.

1026
00:59:24,400 --> 00:59:27,000
And I didn't like the fact that I had to write.

1027
00:59:28,900 --> 00:59:32,900
so similarly in here, if I'm like doing one of these things I should

1028
00:59:32,900 --> 00:59:36,600
be able to select one of these and

1029
00:59:39,100 --> 00:59:39,800
No, I can't.

1030
00:59:39,800 --> 00:59:40,800
Select these guys.

1031
00:59:42,600 --> 00:59:42,900
Yeah.

1032
00:59:43,000 --> 00:59:45,100
Oh, because we don't have precedence for those.

1033
00:59:45,100 --> 00:59:46,200
Yeah, that's never mind.

1034
00:59:46,200 --> 00:59:46,800
I do know why.

1035
00:59:48,100 --> 00:59:50,300
So, let's see if I can also clone of these.

1036
00:59:50,300 --> 00:59:52,600
Yeah, cool.

1037
00:59:56,800 --> 00:59:57,300
All right.

1038
01:00:00,900 --> 01:00:01,900
So, I'm going to call it there.

1039
01:00:44,100 --> 01:00:45,100
Gary Johansen.

1040
01:00:45,100 --> 01:00:48,200
I feel like I kind of lost the forecast or Forest.

1041
01:00:48,200 --> 01:00:52,500
I assume is what that was pretty autocorrect for the trees in this

1042
01:00:52,500 --> 01:00:53,100
episode.

1043
01:00:53,100 --> 01:00:55,000
Would you mind recapping

1044
01:00:58,600 --> 01:00:59,100
Sure.

1045
01:01:01,800 --> 01:01:03,200
So, here's what we did.

1046
01:01:07,700 --> 01:01:10,100
Two things I'll do miniverse order thing.

1047
01:01:10,100 --> 01:01:14,000
We most recently did is we had a struct that worked like this.

1048
01:01:16,700 --> 01:01:17,900
We had a previous pointer.

1049
01:01:19,000 --> 01:01:20,300
And we had a next pointer.

1050
01:01:21,800 --> 01:01:25,200
And the way that those worked is exactly the way you might expect.

1051
01:01:25,200 --> 01:01:26,600
They form essentially a ring.

1052
01:01:27,200 --> 01:01:30,200
So, you know, they point to each other.

1053
01:01:37,700 --> 01:01:38,200
Like this.

1054
01:01:38,600 --> 01:01:43,200
And they're looped such that this one points back to this one.

1055
01:01:43,800 --> 01:01:46,900
And this one points forward to this one.

1056
01:01:47,800 --> 01:01:48,600
So it's a ring.

1057
01:01:49,400 --> 01:01:53,200
And the way we were doing that is it's much easier to always have

1058
01:01:53,200 --> 01:01:56,500
something in the list so that you don't ever have a special case.

1059
01:01:56,900 --> 01:01:59,700
So what you typically do is you insert something called a sentinel and

1060
01:01:59,700 --> 01:02:01,900
in this case we had a sentinel

1061
01:02:03,800 --> 01:02:05,300
Which is just a dummy element.

1062
01:02:05,500 --> 01:02:06,600
That's the same as all the rest of them.

1063
01:02:06,600 --> 01:02:09,900
It's but it never gets removed and at the outset it just points to

1064
01:02:09,900 --> 01:02:10,700
itself.

1065
01:02:10,700 --> 01:02:12,200
So at the outset, right?

1066
01:02:12,200 --> 01:02:13,200
You have the Sentinel

1067
01:02:16,900 --> 01:02:17,200
Oops.

1068
01:02:20,700 --> 01:02:21,800
And it just points to itself.

1069
01:02:21,800 --> 01:02:24,000
So it's like this and this

1070
01:02:25,100 --> 01:02:28,700
and then when you come in here and you add a new item, right?

1071
01:02:28,700 --> 01:02:31,600
It happens to all just work because what happens is, you say, well,

1072
01:02:31,600 --> 01:02:32,200
okay.

1073
01:02:32,300 --> 01:02:33,500
I need to add a new item.

1074
01:02:33,500 --> 01:02:38,900
The rule for adding a new item is I just say, whoever the Sentinel is

1075
01:02:39,100 --> 01:02:43,600
make my previous pointer point to them right, which would do that.

1076
01:02:44,000 --> 01:02:49,200
Make my next pointer point to whoever his next pointer pointed to,

1077
01:02:49,500 --> 01:02:51,000
which is also him

1078
01:02:53,200 --> 01:02:57,600
Right because he's pointing to himself, then just follow my pointers

1079
01:02:57,600 --> 01:02:58,600
and fix them up.

1080
01:02:58,600 --> 01:02:59,700
So go to my

1081
01:03:00,000 --> 01:03:05,900
Yes, which is here, and make that next pointer point to me done, go to

1082
01:03:05,900 --> 01:03:11,000
my next and make that previous pointer point to me done.

1083
01:03:11,600 --> 01:03:14,600
And now we have a proper circular linked list again, right?

1084
01:03:14,800 --> 01:03:18,100
So in the startup case, it works and of course in every subsequent

1085
01:03:18,100 --> 01:03:19,300
case, it would also work.

1086
01:03:19,700 --> 01:03:23,100
And so adding, and removing from these lists is Trivial, because you

1087
01:03:23,100 --> 01:03:27,500
can just run the same stupid simple for line piece of code, every time

1088
01:03:27,800 --> 01:03:29,900
and it always just works when you have the

1089
01:03:30,000 --> 01:03:30,300
Oil in there.

1090
01:03:30,300 --> 01:03:32,700
You don't need to check to see if the list is empty and handle that

1091
01:03:32,700 --> 01:03:34,200
specially or any of the other things like that.

1092
01:03:35,100 --> 01:03:35,500
Okay?

1093
01:03:36,400 --> 01:03:40,900
But what this means is, you need to include the Sentinel itself in the

1094
01:03:40,900 --> 01:03:42,600
structure that's holding this thing.

1095
01:03:42,800 --> 01:03:46,300
So, typically what you do is you say, well, oh, I've got like a group

1096
01:03:46,800 --> 01:03:50,600
structure, you know, and I've got a link structure.

1097
01:03:51,500 --> 01:03:55,200
The link is the thing that stores, the preview, the next, and the

1098
01:03:55,200 --> 01:03:59,600
data, and the group is the thing that's like, you know, has whatever

1099
01:03:59,600 --> 01:03:59,700
the

1100
01:04:00,000 --> 01:04:02,400
Ms and Foo and bar, and whatever.

1101
01:04:02,400 --> 01:04:05,100
There's so much stuff in here and then finally, it just contains one

1102
01:04:05,100 --> 01:04:06,800
link and that link is the Sentinel.

1103
01:04:07,000 --> 01:04:09,000
So, there's one of these embedded in here.

1104
01:04:09,000 --> 01:04:12,700
And the data part is just ignored, that's how you normally do it.

1105
01:04:13,000 --> 01:04:17,500
But what if I now look at my code and I say, oh, hey gosh, these two

1106
01:04:17,500 --> 01:04:21,900
types are really just in the way I want them to all be the same.

1107
01:04:21,900 --> 01:04:24,000
There's no reason to have them be separate.

1108
01:04:24,200 --> 01:04:27,900
Well, you can't exactly do that because if you make these two types of

1109
01:04:27,900 --> 01:04:29,800
same, this type can't include

1110
01:04:29,900 --> 01:04:30,900
Food itself.

1111
01:04:31,000 --> 01:04:33,700
There's no way to have a group include a group, right?

1112
01:04:35,400 --> 01:04:40,400
But remember the only part of the link you actually need to make this

1113
01:04:40,400 --> 01:04:40,700
scheme.

1114
01:04:40,700 --> 01:04:44,700
Work is the previous and next pointers that's the only part that will

1115
01:04:44,700 --> 01:04:46,900
ever be touched out of the Sentinel.

1116
01:04:47,100 --> 01:04:50,600
Because remember all of these people, they all had data right.

1117
01:04:50,600 --> 01:04:52,100
There was always data in here.

1118
01:04:53,500 --> 01:04:57,400
And when you're talking about a valid link, like this one that data is

1119
01:04:57,400 --> 01:05:00,900
actually important but when you're talking about the Sentinel it never

1120
01:05:00,900 --> 01:05:02,100
gets referenced the sentence.

1121
01:05:02,100 --> 01:05:05,600
The definition of pointing to null essentially we always check right

1122
01:05:05,600 --> 01:05:10,600
in those Loops for you know link equal Sentinel or link equals first

1123
01:05:10,600 --> 01:05:16,200
child first, the link is not equal to the Sentinel do some stuff.

1124
01:05:16,300 --> 01:05:18,400
So we're always we're never going to operate on the central.

1125
01:05:18,400 --> 01:05:21,100
We're never going to look at this, which means the technically all we

1126
01:05:21,100 --> 01:05:22,500
need is that top two pieces.

1127
01:05:23,100 --> 01:05:28,900
So what I did is, I just lied and I casted a previous and next pointer

1128
01:05:28,900 --> 01:05:31,100
that I have in here, right?

1129
01:05:31,100 --> 01:05:35,800
I lied and I casted those to say that they were linked struct even

1130
01:05:35,800 --> 01:05:38,300
though the rest of the links truck isn't there,

1131
01:05:40,300 --> 01:05:41,000
Makes sense.

1132
01:05:41,600 --> 01:05:43,800
And so that's that code that you saw

1133
01:05:46,200 --> 01:05:46,800
up here.

1134
01:05:55,400 --> 01:05:55,900
See it.

1135
01:05:56,800 --> 01:05:59,600
So here is the next and previous pointer exactly as I drew them.

1136
01:06:00,300 --> 01:06:04,100
Here's the Sentinel for the links so each link can have its own list

1137
01:06:04,100 --> 01:06:05,300
inside inside of it.

1138
01:06:05,600 --> 01:06:08,000
These are what we would want to include.

1139
01:06:08,000 --> 01:06:09,900
We would have wanted to just type this

1140
01:06:13,700 --> 01:06:15,900
but we can't because it can include itself.

1141
01:06:16,000 --> 01:06:18,800
So, all I did is just said, well, these two things are the same as

1142
01:06:18,800 --> 01:06:19,300
these two things.

1143
01:06:19,300 --> 01:06:23,300
It's it creates essentially, the top, the header right there.

1144
01:06:23,800 --> 01:06:28,700
And then all I do is just lie and say, hey, that part right here is

1145
01:06:28,700 --> 01:06:32,500
one of those links went for purposes of the Sentinel, right?

1146
01:06:34,100 --> 01:06:35,500
so what this ends up creating

1147
01:06:41,800 --> 01:06:43,000
is something that looks like this.

1148
01:07:01,500 --> 01:07:01,900
Well.

1149
01:07:03,300 --> 01:07:05,100
You know, I'm gonna do, I'm gonna draw a little smaller.

1150
01:07:06,900 --> 01:07:08,700
It has of creating something that looks like this.

1151
01:07:12,700 --> 01:07:14,800
Here's my previous, here's my next.

1152
01:07:15,200 --> 01:07:16,200
Here's my first.

1153
01:07:16,900 --> 01:07:18,800
Here's my last.

1154
01:07:21,100 --> 01:07:22,100
And actually, you know what?

1155
01:07:24,800 --> 01:07:26,400
These are in the wrong.

1156
01:07:27,000 --> 01:07:30,500
Now that I draw this out, it's really should be last and first,

1157
01:07:34,800 --> 01:07:35,100
Oh no.

1158
01:07:35,100 --> 01:07:35,600
It's not.

1159
01:07:35,600 --> 01:07:36,200
It's correct.

1160
01:07:36,200 --> 01:07:39,600
It's because we had next and previous because it's whichever way these

1161
01:07:39,600 --> 01:07:40,200
go fits next.

1162
01:07:40,200 --> 01:07:42,300
Previous going to be first last, right?

1163
01:07:42,700 --> 01:07:42,800
So.

1164
01:07:42,800 --> 01:07:46,400
Sorry, let me, let me actually take a second to draw it, the way that

1165
01:07:46,400 --> 01:07:53,400
I actually wrote it down, so next previous first, last okay.

1166
01:07:54,200 --> 01:07:55,100
And then, of course,

1167
01:07:57,100 --> 01:07:58,400
The payload, oops.

1168
01:08:02,100 --> 01:08:02,800
Here's the data.

1169
01:08:03,800 --> 01:08:10,000
Okay, so what I did is, here is the struct and it's part essentially

1170
01:08:10,000 --> 01:08:13,100
of two rings, there's the Ring of its siblings.

1171
01:08:13,100 --> 01:08:17,000
So the things that are the same level of it in like this tree, right?

1172
01:08:17,100 --> 01:08:19,300
So I'm talking about like, these guys here.

1173
01:08:23,500 --> 01:08:24,100
Here we go.

1174
01:08:24,700 --> 01:08:25,899
Here are its siblings.

1175
01:08:29,800 --> 01:08:32,200
Here's the data first.

1176
01:08:32,700 --> 01:08:38,100
Last next previous, here's a it's pretty.

1177
01:08:38,100 --> 01:08:40,600
Its prior sibling one that came before it.

1178
01:08:42,200 --> 01:08:42,700
Data.

1179
01:08:44,200 --> 01:08:47,000
Next previous first.

1180
01:08:47,500 --> 01:08:49,300
Last okay.

1181
01:08:49,899 --> 01:08:52,100
And it is Chained like this.

1182
01:08:52,700 --> 01:08:54,000
There's that next pointer.

1183
01:08:54,899 --> 01:08:59,800
Here is the previous pointer here is the next pointer previous

1184
01:09:00,000 --> 01:09:01,200
To go somewhere, we don't know.

1185
01:09:02,300 --> 01:09:05,000
Here's the previous pointer pointing back to this one.

1186
01:09:05,600 --> 01:09:08,000
Okay and here's the next pointer pointing somewhere.

1187
01:09:08,000 --> 01:09:08,600
We don't know.

1188
01:09:10,200 --> 01:09:10,600
Okay.

1189
01:09:12,100 --> 01:09:12,700
Makes sense.

1190
01:09:13,300 --> 01:09:18,700
Now it's also part of another ring which is the ring of its children,

1191
01:09:19,300 --> 01:09:20,200
here is a children.

1192
01:09:20,200 --> 01:09:23,100
So this is its prior sibling.

1193
01:09:24,200 --> 01:09:26,600
This is its next sibling.

1194
01:09:27,899 --> 01:09:29,200
Guess I should say previous.

1195
01:09:30,300 --> 01:09:30,800
Previous.

1196
01:09:33,800 --> 01:09:37,100
And here is its last child.

1197
01:09:38,300 --> 01:09:41,600
And here is its first child, okay?

1198
01:09:43,800 --> 01:09:44,800
And watch carefully.

1199
01:09:48,200 --> 01:09:53,899
The first pointer points to the head of this guy, just like the next

1200
01:09:53,899 --> 01:09:55,200
pointer pointed to the Head.

1201
01:09:55,500 --> 01:09:56,000
Okay.

1202
01:09:57,100 --> 01:10:00,600
So here's the next pointer, here's the previous pointer, here's its

1203
01:10:00,600 --> 01:10:03,000
first child and its last child and its data.

1204
01:10:04,500 --> 01:10:07,400
Here is next preview.

1205
01:10:07,700 --> 01:10:12,000
First last data like so

1206
01:10:13,600 --> 01:10:17,400
And here this points, the last again points to the top of these guys,

1207
01:10:18,000 --> 01:10:18,400
okay?

1208
01:10:19,100 --> 01:10:20,100
But here's the trick.

1209
01:10:21,200 --> 01:10:26,600
These guys do not point to the top of this guy, if they did, it would

1210
01:10:26,600 --> 01:10:29,900
create one unified ring of all the siblings in the children.

1211
01:10:30,100 --> 01:10:36,000
Instead, they point to here, they point to the middle of the struct as

1212
01:10:36,000 --> 01:10:39,200
if it was the header but it's not.

1213
01:10:39,800 --> 01:10:40,200
Okay?

1214
01:10:40,800 --> 01:10:42,900
And that's how this thing works.

1215
01:10:45,000 --> 01:10:45,600
Make sense.

1216
01:10:50,900 --> 01:10:53,200
So it's kind of complicated to think about.

1217
01:10:53,200 --> 01:10:56,400
I guess it's the kind of thing since I do this sort of code all the

1218
01:10:56,400 --> 01:11:01,000
time that is Justin on thing to be like I just like yep.

1219
01:11:01,000 --> 01:11:03,800
That's how we'll make that pointer happen and off we go.

1220
01:11:09,300 --> 01:11:13,700
It's also the kind of thing that I get incredibly frustrated about

1221
01:11:13,700 --> 01:11:18,000
when people like make compilers that break this sort of thing, or when

1222
01:11:18,000 --> 01:11:21,900
they C++, language lawyer re or object-oriented stuff Miss and say

1223
01:11:21,900 --> 01:11:23,600
that don't do these sorts of things.

1224
01:11:23,800 --> 01:11:29,800
I hate that because it's like this is how CPUs work.

1225
01:11:31,400 --> 01:11:34,000
They don't know what a struct is.

1226
01:11:34,300 --> 01:11:38,900
A struct is just a thing that lets me create stuff, the CPU does and

1227
01:11:38,900 --> 01:11:41,900
this is cooler than whatever it was.

1228
01:11:41,900 --> 01:11:42,900
You were going to do.

1229
01:11:44,200 --> 01:11:45,100
This is cooler.

1230
01:11:46,900 --> 01:11:48,100
And I like it.

1231
01:11:49,800 --> 01:11:51,600
And it's not my fault.

1232
01:11:51,600 --> 01:11:55,300
If your language makes things like this harder to do that, just means

1233
01:11:55,300 --> 01:11:56,600
you designed it wrong.

1234
01:11:56,900 --> 01:11:58,800
You designed.

1235
01:12:00,400 --> 01:12:01,700
A crappy.

1236
01:12:03,100 --> 01:12:04,200
Language.

1237
01:12:06,700 --> 01:12:09,800
Not my fault.

1238
01:12:10,900 --> 01:12:14,300
Anyway, so yeah.

1239
01:12:14,700 --> 01:12:20,300
So anyway, point being that is how this works and so all I was doing

1240
01:12:20,300 --> 01:12:21,700
was just collapsing it down.

1241
01:12:21,700 --> 01:12:23,800
So I wouldn't have to think about two types anymore.

1242
01:12:23,800 --> 01:12:26,700
Everyone could just talk about a variable link and a variable link can

1243
01:12:26,700 --> 01:12:29,200
either have children or not and nobody care.

1244
01:12:29,200 --> 01:12:32,400
Like, I don't have to have a separate secondary pointer for no reason

1245
01:12:32,400 --> 01:12:35,700
to point off to nothing, right?

1246
01:12:48,500 --> 01:12:52,100
Last thing, so I guess was what were we doing first?

1247
01:12:52,500 --> 01:12:59,500
The thing that I did first today was I wanted to we were previously

1248
01:12:59,500 --> 01:13:02,700
doing a non recursive walk of this tree.

1249
01:13:02,900 --> 01:13:05,800
So we have a thing that's like Foo, you know.

1250
01:13:17,100 --> 01:13:17,600
Whatever.

1251
01:13:18,500 --> 01:13:21,300
So we have this tree and the tree has children, it's like a little,

1252
01:13:21,300 --> 01:13:23,900
it's a, you know, it's like a standard little list View, and you can

1253
01:13:23,900 --> 01:13:25,500
expand and collapse them, right?

1254
01:13:25,600 --> 01:13:28,500
And you've seen me play with this thing all the time on the stream.

1255
01:13:28,500 --> 01:13:30,100
It's this thing up here, right?

1256
01:13:30,200 --> 01:13:32,600
Where I can open it up and do whatever it is.

1257
01:13:32,600 --> 01:13:33,400
I'm going to do.

1258
01:13:35,800 --> 01:13:38,000
So, all that stuff is there, right?

1259
01:13:38,300 --> 01:13:43,100
And before we were doing this with what amounted to to me,

1260
01:13:44,600 --> 01:13:48,400
Our own stack so we just had like a for Loop you know.

1261
01:13:48,400 --> 01:13:53,500
I think it was actually a while loop not that it matters but you know

1262
01:13:53,500 --> 01:13:58,300
we just had a while loop and we had a stack here that we stored some

1263
01:13:58,300 --> 01:14:03,000
data with and we would like walk through this using our own local

1264
01:14:03,000 --> 01:14:06,600
stack and I was like I don't think there's any point in doing that I

1265
01:14:06,600 --> 01:14:08,700
don't know why we did that is directly.

1266
01:14:08,700 --> 01:14:11,200
I think we're just to show that you could or I don't know what we were

1267
01:14:11,200 --> 01:14:14,000
doing and I it just

1268
01:14:14,000 --> 01:14:17,700
I felt it would be easier to read and more easy to understand and

1269
01:14:17,700 --> 01:14:21,200
maintain because the stack is automatically managed for you by the

1270
01:14:21,200 --> 01:14:21,700
compiler.

1271
01:14:21,700 --> 01:14:23,400
If you just use the actual stack.

1272
01:14:23,400 --> 01:14:27,300
So recursion lets you use that stack and it because the compiler is

1273
01:14:27,300 --> 01:14:30,300
set up to more cleanly deal with that.

1274
01:14:30,600 --> 01:14:32,300
It's easier to read the code.

1275
01:14:32,400 --> 01:14:35,400
So what I did is I said, okay, forget the while loop instead, what

1276
01:14:35,400 --> 01:14:37,000
we'll do is use a recursive function.

1277
01:14:37,600 --> 01:14:40,900
So instead of before drawing everything inside the loop, what we do

1278
01:14:40,900 --> 01:14:43,900
now is we just have, like a thing that's like, draw a tree link.

1279
01:14:44,000 --> 01:14:49,900
All right, and we call it on one of these guys and it will Loop over

1280
01:14:49,900 --> 01:14:52,500
all of its children calling draw tree link on each of those.

1281
01:14:52,500 --> 01:14:55,600
So, if one of them happens to be we have children.

1282
01:14:55,700 --> 01:14:57,200
It will draw those recursively.

1283
01:14:58,500 --> 01:14:59,200
To make sense.

1284
01:15:38,500 --> 01:15:41,400
Dude and basement one thoughts on linked list and cash friendliness.

1285
01:15:41,400 --> 01:15:46,800
I found that a simple array and just hoping I'm assuming copying, when

1286
01:15:46,800 --> 01:15:48,700
it changes length was way faster.

1287
01:15:50,100 --> 01:15:52,300
So, I guess the things I would say about that is

1288
01:15:54,700 --> 01:15:59,900
I don't really like arrays and the reason I don't really like arrays

1289
01:16:00,000 --> 01:16:05,900
is because they are not or durable very well.

1290
01:16:06,300 --> 01:16:10,900
Like if I want to change the order of things in Array, I have to copy

1291
01:16:10,900 --> 01:16:11,500
the whole thing.

1292
01:16:11,500 --> 01:16:13,600
If I want to add something up to copy the whole thing and blah blah

1293
01:16:13,600 --> 01:16:14,000
blah.

1294
01:16:14,500 --> 01:16:19,900
And I just don't like that sort of movement of call of that.

1295
01:16:19,900 --> 01:16:22,600
Like, unreliability of the cost.

1296
01:16:22,800 --> 01:16:24,400
Like, I don't like having

1297
01:16:24,700 --> 01:16:25,900
Operations that are free.

1298
01:16:25,900 --> 01:16:27,900
Sometimes it really expensive, other times.

1299
01:16:29,700 --> 01:16:30,600
I just don't like it.

1300
01:16:31,300 --> 01:16:35,700
So if I'm actually performance, evaluating some code and I want to

1301
01:16:35,700 --> 01:16:40,700
know if this particular code is, you know, I want to try and find the

1302
01:16:40,700 --> 01:16:42,700
most efficient way to write this particular code.

1303
01:16:44,100 --> 01:16:48,000
Then I might try array vs.

1304
01:16:48,100 --> 01:16:49,100
Linked list and see

1305
01:16:50,300 --> 01:16:54,500
A lot of people say, the phrase to me, I have found that simple arrays

1306
01:16:54,500 --> 01:16:56,300
are much faster than click this or whatever.

1307
01:16:56,500 --> 01:16:59,000
I've actually, very rarely found that to be true.

1308
01:17:00,000 --> 01:17:02,300
In fact, when I was doing performance optimization on the witness, I

1309
01:17:02,300 --> 01:17:05,000
found that there is actually no difference between using arrays and

1310
01:17:05,000 --> 01:17:06,600
using linked lists at all.

1311
01:17:08,300 --> 01:17:12,100
And so, what I think might be sort of true there is, I don't know if

1312
01:17:12,100 --> 01:17:15,800
people are always comparing apples to oranges in that case, because I

1313
01:17:15,800 --> 01:17:19,600
think mostly mostly the cash friendliness of a linked list versus an

1314
01:17:19,600 --> 01:17:19,900
array.

1315
01:17:20,700 --> 01:17:23,500
There's no difference between the cash from this of the two unless

1316
01:17:23,500 --> 01:17:27,900
you're bigger than the size of the array of the, the cash.

1317
01:17:28,400 --> 01:17:33,200
And the reason for that is because let's say I have a link, right?

1318
01:17:33,700 --> 01:17:35,500
And the link has a next pointer.

1319
01:17:37,100 --> 01:17:37,500
Right?

1320
01:17:38,700 --> 01:17:44,300
Or I have an array and here's my raised like Link Link, Link Link.

1321
01:17:47,200 --> 01:17:50,500
Well however, much of this fits in the cache versus however, many of

1322
01:17:50,500 --> 01:17:53,500
these fish in the cache is going to be the same modulo however much

1323
01:17:53,500 --> 01:17:55,300
this cost you, right?

1324
01:17:55,700 --> 01:17:59,600
So if the answer is that this didn't that this didn't put you over

1325
01:17:59,600 --> 01:17:59,800
some

1326
01:18:00,000 --> 01:18:01,400
Ash limit for the size of the algorithm.

1327
01:18:01,400 --> 01:18:03,700
You're doing is, there's no difference between these two things,

1328
01:18:03,900 --> 01:18:04,400
right?

1329
01:18:05,700 --> 01:18:09,600
The difference that I think people see, is that unlike me?

1330
01:18:09,600 --> 01:18:12,700
I, you know, do push struct style stuff.

1331
01:18:12,800 --> 01:18:14,900
So all my links are all in the same place.

1332
01:18:14,900 --> 01:18:16,300
Anyway, right?

1333
01:18:16,400 --> 01:18:19,400
So if links are smaller than a cache line or something like this, they

1334
01:18:19,400 --> 01:18:22,500
all stack up right next to each other and are all on the same page,

1335
01:18:22,500 --> 01:18:23,000
right?

1336
01:18:23,000 --> 01:18:26,000
Because the links get pushed right on top of each other, all in a row.

1337
01:18:26,400 --> 01:18:28,600
So they're basically already an array.

1338
01:18:29,600 --> 01:18:33,400
What other people do is every time as they call New and who knows

1339
01:18:33,400 --> 01:18:34,800
where this puts the link.

1340
01:18:34,900 --> 01:18:38,600
So the links are probably scattered throughout memory in every which

1341
01:18:38,600 --> 01:18:39,600
way, right?

1342
01:18:41,100 --> 01:18:45,500
So, at that point, that means that, however, big the link is right?

1343
01:18:45,500 --> 01:18:50,300
If the link structure is however many bites well, now whatever the

1344
01:18:50,300 --> 01:18:51,400
amount of the cache line.

1345
01:18:51,400 --> 01:18:54,700
So it's you know, 64 bytes is the cache line size, right?

1346
01:18:54,800 --> 01:18:56,400
So however big the thing is

1347
01:18:57,400 --> 01:18:59,000
I'm divided by 64, bytes.

1348
01:18:59,000 --> 01:19:04,400
And then, the overhang that amount here is always polluting the cash,

1349
01:19:04,400 --> 01:19:05,800
which could be significant.

1350
01:19:05,900 --> 01:19:09,800
Like, let's say you make a 68 B structure, right?

1351
01:19:10,200 --> 01:19:13,600
Now, you're polluting the cash by 62 B.

1352
01:19:13,600 --> 01:19:15,600
Every time, right?

1353
01:19:15,600 --> 01:19:19,500
Which is a lot of extra cash flow, whereas I am polluting it by 8 B.

1354
01:19:19,500 --> 01:19:22,100
Every time, you know, maybe 16

1355
01:19:24,100 --> 01:19:26,200
And so I feel like when people say linked lists are way, worse

1356
01:19:26,200 --> 01:19:26,600
performance.

1357
01:19:26,600 --> 01:19:29,100
I don't know if they're really talking about it, right?

1358
01:19:29,600 --> 01:19:30,800
Maybe they are.

1359
01:19:30,900 --> 01:19:34,200
And maybe they were talking about a situation where it was really

1360
01:19:34,200 --> 01:19:35,800
super high performance critical.

1361
01:19:36,100 --> 01:19:40,900
Obviously you want to not have any anything extra.

1362
01:19:41,000 --> 01:19:44,800
So at that point you may decide that if you know how big the array

1363
01:19:44,800 --> 01:19:47,500
should be and you know that you're not doing a lot of shuffling that's

1364
01:19:47,500 --> 01:19:48,200
going to be better.

1365
01:19:48,500 --> 01:19:49,700
No question about that.

1366
01:19:49,700 --> 01:19:52,300
And I would never tell somebody you should use a linked list for

1367
01:19:52,300 --> 01:19:53,100
performance, right?

1368
01:19:53,100 --> 01:19:53,400
Those were

1369
01:19:53,600 --> 01:19:55,100
Aren't going to probably come out of my mouth.

1370
01:19:55,200 --> 01:19:57,100
Unless there's a lot of shuffling going on.

1371
01:19:57,100 --> 01:19:59,700
That makes it so that an array is somehow prohibited.

1372
01:19:59,700 --> 01:20:01,500
But you know again unlikely

1373
01:20:02,700 --> 01:20:05,600
But I do often questioned the people who seem to think that a razor so

1374
01:20:05,600 --> 01:20:07,100
much more performance than linked lists.

1375
01:20:07,300 --> 01:20:09,500
Because I've actually never found that to be the case.

1376
01:20:10,300 --> 01:20:16,000
Are they faster know, are they slower sometimes but often not by much

1377
01:20:16,100 --> 01:20:19,600
and so at that point, I would rather just have the consistency of

1378
01:20:19,600 --> 01:20:23,300
knowing that there's no expensive operations, they're all the same and

1379
01:20:23,500 --> 01:20:26,400
I have no memory bound weirdness, right?

1380
01:20:26,500 --> 01:20:30,200
So, I know that like I don't suddenly have to guess about how much

1381
01:20:30,200 --> 01:20:32,300
memory am allocating or where this thing is going to go.

1382
01:20:33,800 --> 01:20:34,800
That's kind of nice too.

1383
01:20:35,100 --> 01:20:39,200
So I tend to yeah I tend to not have problems with linked lists other

1384
01:20:39,200 --> 01:20:43,700
people maybe do maybe I just don't tend to use them in performance

1385
01:20:43,700 --> 01:20:46,500
critical situations so it doesn't matter.

1386
01:20:46,700 --> 01:20:49,700
And I'm just kind of like living off of the slop and don't care.

1387
01:20:49,800 --> 01:20:53,900
I'm not sure, but I just rarely find it to be that big of a deal if

1388
01:20:53,900 --> 01:20:54,600
that makes sense.

1389
01:21:12,300 --> 01:21:14,900
And pseudonym 73, second currency also matters.

1390
01:21:14,900 --> 01:21:16,800
Linked list can be better if you need multiple threads work on the

1391
01:21:16,800 --> 01:21:17,300
same time.

1392
01:21:17,600 --> 01:21:20,400
Absolutely 100% agree with that.

1393
01:21:21,000 --> 01:21:22,900
Arrays are real bad.

1394
01:21:22,900 --> 01:21:26,200
In that sense because now you've got a situation where like I got a

1395
01:21:26,200 --> 01:21:27,200
lock down the array.

1396
01:21:27,200 --> 01:21:30,700
Any time I add something to it because I got to do this whole copy and

1397
01:21:30,700 --> 01:21:33,300
I got to wait for everyone to clear out of it as well.

1398
01:21:33,400 --> 01:21:35,200
There's all kinds of stuff that goes on there.

1399
01:21:35,400 --> 01:21:40,100
Whereas linked list, you just do one quick interlock to get off

1400
01:21:40,200 --> 01:21:41,600
something and that's it.

1401
01:21:41,800 --> 01:21:43,900
You know, you touch it for maybe a cycle or two.

1402
01:21:48,600 --> 01:21:48,900
Cuba.

1403
01:21:48,900 --> 01:21:50,200
Caleb, how do you feel about object?

1404
01:21:50,200 --> 01:21:52,500
Pools is a sort of Middle Ground between linked lists and arrays.

1405
01:21:52,900 --> 01:21:55,600
I don't have a strong opinion about this stuff and like I said, you

1406
01:21:55,600 --> 01:21:59,100
know, I'm not trying to tell people to use linked list, like don't

1407
01:21:59,100 --> 01:22:01,200
take this as like some kind of Link this advocacy.

1408
01:22:01,500 --> 01:22:05,100
I'm just saying that like the hype of like, always use a raise or

1409
01:22:05,100 --> 01:22:06,200
whatever better like this.

1410
01:22:06,200 --> 01:22:07,900
I don't know that that's really true.

1411
01:22:08,100 --> 01:22:11,300
And I haven't seen the definitive analysis of anyone that suggests,

1412
01:22:11,300 --> 01:22:17,900
that linked lists are somehow not a good tool to use and that they're

1413
01:22:17,900 --> 01:22:18,300
somehow

1414
01:22:18,600 --> 01:22:18,900
Add.

1415
01:22:19,600 --> 01:22:22,600
So I feel like, you know,

1416
01:22:23,900 --> 01:22:27,200
if you care about performance, you need to time it, you need to see

1417
01:22:27,200 --> 01:22:28,300
what your operations are.

1418
01:22:28,400 --> 01:22:31,100
You need to think about it in time, it that's just true.

1419
01:22:31,400 --> 01:22:34,500
And whether linked lists are arrays or or come out on top or whether

1420
01:22:34,500 --> 01:22:36,300
the it doesn't seem to matter much.

1421
01:22:36,800 --> 01:22:40,600
The only way to know is to do that in the case, where you don't really

1422
01:22:40,600 --> 01:22:41,400
care that much.

1423
01:22:41,400 --> 01:22:43,900
What the performance of this thing is, it's not really a critical

1424
01:22:43,900 --> 01:22:44,400
thing.

1425
01:22:44,600 --> 01:22:47,500
Then I just have not found linked list to be problematic.

1426
01:22:47,500 --> 01:22:51,400
Like I haven't had that situation where I'm like oh my God, these

1427
01:22:51,400 --> 01:22:53,600
linked list cause my program to be so slow.

1428
01:22:53,700 --> 01:22:56,800
And there was like nothing I could do about it, or like the whole

1429
01:22:56,800 --> 01:22:58,100
thing is ruined, right?

1430
01:22:58,300 --> 01:22:59,300
I haven't really had that.

1431
01:22:59,300 --> 01:23:01,400
And similarly, it tends to be pretty easy to go.

1432
01:23:01,400 --> 01:23:02,600
Oh, these were linked lists.

1433
01:23:02,900 --> 01:23:05,300
I want to change them to a raise, okay?

1434
01:23:06,100 --> 01:23:07,400
Like usually, you can just do that.

1435
01:23:07,400 --> 01:23:10,200
It takes a day or two to of deciding how you want to arrange it, or

1436
01:23:10,200 --> 01:23:12,800
whatever, and do the work and Port the code.

1437
01:23:12,800 --> 01:23:15,600
If it's used in tons of places, maybe, but that's it.

1438
01:23:15,600 --> 01:23:20,000
I mean, you do it in son so I usually don't find it makes much sense

1439
01:23:20,000 --> 01:23:21,200
to even think about.

1440
01:23:21,200 --> 01:23:23,500
So I usually write the one that's easier for me to use.

1441
01:23:23,700 --> 01:23:24,300
At the time.

1442
01:23:26,700 --> 01:23:27,500
If that makes sense.

1443
01:23:27,800 --> 01:23:30,900
And a lot of times this stuff, I met a generate anyway.

1444
01:23:31,300 --> 01:23:34,400
So at that point, it's less about me, thinking of this.

1445
01:23:34,400 --> 01:23:35,300
I might just pick.

1446
01:23:35,300 --> 01:23:36,200
Oh, this should be this.

1447
01:23:36,200 --> 01:23:37,200
This should be that.

1448
01:23:37,300 --> 01:23:39,800
And I don't think about it much when I'm hand coding stuff.

1449
01:23:40,200 --> 01:23:42,500
A lot of times, our razor, more of a pain to encode.

1450
01:23:42,500 --> 01:23:47,500
I find and the pointers into them aren't stable which I also find

1451
01:23:47,500 --> 01:23:51,200
being to be bad, you know, if I delete something from an array, all

1452
01:23:51,200 --> 01:23:53,300
the pointers change and that kind of stuff.

1453
01:23:53,300 --> 01:23:55,300
And so there's just there's a lot of things.

1454
01:23:55,400 --> 01:23:56,600
I don't like about a raise.

1455
01:23:56,600 --> 01:23:56,900
I think.

1456
01:23:56,900 --> 01:23:59,900
As a data structure, I don't really like a raise for.

1457
01:24:00,300 --> 01:24:03,100
Editable or mute or changing stuff.

1458
01:24:04,300 --> 01:24:08,000
And so I usually prefer linked list unless I can really point to a

1459
01:24:08,000 --> 01:24:08,800
case and go.

1460
01:24:09,000 --> 01:24:10,500
I care about the performance here, though.

1461
01:24:10,500 --> 01:24:12,300
The array is clearly Superior.

1462
01:24:12,300 --> 01:24:13,500
I'm going to use it, right?

1463
01:24:13,600 --> 01:24:15,800
Because it just adds all this fuss.

1464
01:24:16,400 --> 01:24:17,100
That I don't like

1465
01:24:20,100 --> 01:24:22,000
Alright, I'm at a time.

1466
01:24:29,700 --> 01:24:30,600
Wait, there are

1467
01:24:33,600 --> 01:24:34,100
All right.

1468
01:24:40,700 --> 01:24:43,000
Thank you everyone for joining me, for another set of handmade here.

1469
01:24:43,000 --> 01:24:44,000
It's a pleasure coding with you.

1470
01:24:44,000 --> 01:24:48,300
As always, if you would like to follow along the series on your own at

1471
01:24:48,300 --> 01:24:50,800
home, you can always pre-order the game at hand made here at or get

1472
01:24:50,800 --> 01:24:53,500
comes with the source code so you can play around with it.

1473
01:24:55,000 --> 01:24:57,300
We also have a forum site, you can use to ask questions to patreon

1474
01:24:57,300 --> 01:24:57,600
page.

1475
01:24:57,600 --> 01:25:00,100
If you want support the video series at week, Bob the tweets the

1476
01:25:00,100 --> 01:25:00,600
schedule.

1477
01:25:01,200 --> 01:25:05,000
And I went this weekend, this is how much I love you.

1478
01:25:05,000 --> 01:25:09,000
Handmade hero audience, I even went this weekend and

1479
01:25:09,200 --> 01:25:13,800
And which Linux distribution was running on the server, so I could add

1480
01:25:13,800 --> 01:25:16,300
the tweetbot to the boot scripts.

1481
01:25:16,500 --> 01:25:19,300
So the tweetbot should be like, indestructible now because the tree,

1482
01:25:19,300 --> 01:25:24,700
but as far as I know, has never gone down, but it was never in the

1483
01:25:24,700 --> 01:25:25,400
startup sequence.

1484
01:25:25,400 --> 01:25:30,100
So, anytime they rebooted my server, it killed the tweetbot because it

1485
01:25:30,100 --> 01:25:31,000
wouldn't come back up.

1486
01:25:31,000 --> 01:25:34,300
I would have to log in and restart the Tweet, but because I didn't

1487
01:25:34,300 --> 01:25:36,600
know where the startup scripts were, on this particular version of

1488
01:25:36,600 --> 01:25:36,900
Linux.

1489
01:25:37,800 --> 01:25:39,000
Now that I know I put

1490
01:25:39,100 --> 01:25:41,000
Um, in there and I tested that this weekend.

1491
01:25:41,000 --> 01:25:44,600
So now both the GitHub authenticator and the Tweet bot, which again,

1492
01:25:44,600 --> 01:25:48,000
literally I know of not a single time they have ever gone down.

1493
01:25:49,000 --> 01:25:53,100
Well, now actually appear as reliable as they should have appeared,

1494
01:25:53,100 --> 01:25:54,600
which is to say never going down.

1495
01:25:54,600 --> 01:25:57,900
Because when they reboot my server for reasons, I have no idea.

1496
01:25:57,900 --> 01:26:01,900
Power failure, I guess, I have no idea, they will come back up without

1497
01:26:01,900 --> 01:26:04,700
me having to manually log back in and restart them.

1498
01:26:06,100 --> 01:26:10,100
How's that for 95s, reliability for you?

1499
01:26:11,800 --> 01:26:12,700
That's about it.

1500
01:26:13,600 --> 01:26:15,500
I will be back here tomorrow at 5 p.m.

1501
01:26:15,500 --> 01:26:17,200
Pacific Daylight time.

1502
01:26:17,200 --> 01:26:21,400
If you would like some more programming action, sweet, programming

1503
01:26:21,400 --> 01:26:25,000
action, until then have fun programming and I'll see you guys on the

1504
01:26:25,000 --> 01:26:25,400
internet.

1505
01:26:25,400 --> 01:26:25,600
Take it.

