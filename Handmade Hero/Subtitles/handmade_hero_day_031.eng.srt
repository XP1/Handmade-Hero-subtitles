1
00:00:00,600 --> 00:00:03,900
Okay, everyone, welcome to handmade hero.

2
00:00:03,900 --> 00:00:05,400
J-31.

3
00:00:05,400 --> 00:00:10,700
This of course, is the show where we program an entire game from

4
00:00:10,700 --> 00:00:13,000
scratch live on the air.

5
00:00:13,000 --> 00:00:16,100
And of course, the reason that we're doing this is because I think

6
00:00:16,100 --> 00:00:18,600
it's just a good idea for everyone to have the experience, at least,

7
00:00:18,600 --> 00:00:21,200
once of ready a game from start to finish.

8
00:00:21,200 --> 00:00:24,300
So they know how absolutely everything works in the entire pipeline of

9
00:00:24,300 --> 00:00:24,700
a game.

10
00:00:24,700 --> 00:00:27,700
It's very empowering to do this because it means that you never have

11
00:00:27,700 --> 00:00:30,400
to be restricted Again by something that someone else wrote you can

12
00:00:30,400 --> 00:00:30,600
always

13
00:00:30,600 --> 00:00:33,800
Choose to go write some portion of an engine or some portion of a

14
00:00:33,800 --> 00:00:36,000
library, or self, or even the whole thing yourself, if you were so

15
00:00:36,000 --> 00:00:36,600
inclined.

16
00:00:37,100 --> 00:00:39,500
But it also means that even if you're just using things, that other

17
00:00:39,500 --> 00:00:43,100
people wrote to build your games, you will be able to know how those

18
00:00:43,100 --> 00:00:44,800
things themselves work.

19
00:00:45,100 --> 00:00:47,400
And so, that actually makes you a much bigger programmer, better

20
00:00:47,400 --> 00:00:47,800
programmers.

21
00:00:47,800 --> 00:00:50,900
Well, because you can do things like understand the performance

22
00:00:50,900 --> 00:00:54,100
implications of the things that you're doing and that can help you

23
00:00:54,100 --> 00:00:57,700
even when you're using like an engine that somebody else wrote.

24
00:00:57,800 --> 00:00:59,900
So I think it's a great thing to do and I think people have been

25
00:00:59,900 --> 00:01:00,400
enjoying it.

26
00:01:00,500 --> 00:01:02,100
I have certainly been enjoying it.

27
00:01:02,700 --> 00:01:08,400
So with that in mind, I think it's a good time to go ahead and get

28
00:01:08,400 --> 00:01:09,200
started here.

29
00:01:09,400 --> 00:01:10,000
Let's see.

30
00:01:10,300 --> 00:01:15,200
If you are following along with the source code at home, which you can

31
00:01:15,200 --> 00:01:16,300
do on handy here at Orange.

32
00:01:16,300 --> 00:01:18,700
If you go to the pre-order button, if you pre-ordered it, there should

33
00:01:18,700 --> 00:01:22,400
be a link that came to your email that you can click on and download

34
00:01:22,500 --> 00:01:23,400
the source code.

35
00:01:23,400 --> 00:01:27,500
I update it every night after we finish coding and you can open up

36
00:01:27,500 --> 00:01:30,400
that link and you can download a zip file inside that zip file.

37
00:01:31,000 --> 00:01:35,300
There's a zip like a sub zip for every day since we're on day 31.

38
00:01:35,300 --> 00:01:38,900
You want to start with day 30, you always start at the previous day.

39
00:01:38,900 --> 00:01:41,500
So if you unzip day 30 into a directory and start coding in that

40
00:01:41,500 --> 00:01:45,400
directory, you will be exactly where I am today when I am started

41
00:01:45,400 --> 00:01:48,100
because that is a source code that I am starting with, as well.

42
00:01:48,100 --> 00:01:52,500
Now, where we were when we stopped last week is, we were actually at

43
00:01:52,500 --> 00:01:56,000
the point where we had our little yellow rectangle that we were

44
00:01:56,000 --> 00:01:59,700
basically using as a test for the player, moving around a little gray

45
00:01:59,700 --> 00:02:00,400
and white.

46
00:02:00,500 --> 00:02:05,500
Angle sort of Blobby tilemap placeholder and we were just verifying

47
00:02:05,500 --> 00:02:08,500
that we could do some very basic things like move from around the tile

48
00:02:08,500 --> 00:02:09,000
map.

49
00:02:09,000 --> 00:02:13,200
We could have doors that he could walk out of that sort of thing and

50
00:02:13,200 --> 00:02:15,200
you know, nothing nothing particularly fancy.

51
00:02:15,200 --> 00:02:17,400
But again, what we're trying to do here is explore the code a little

52
00:02:17,400 --> 00:02:20,800
bit and basically figure out what sorts of things were going to want

53
00:02:20,800 --> 00:02:23,900
from our engine so that it supports the game that we're trying to make

54
00:02:23,900 --> 00:02:28,900
cleanly and doesn't involve doesn't basically we want to basically

55
00:02:28,900 --> 00:02:30,200
avoid going in writing an

56
00:02:30,600 --> 00:02:34,000
And without any knowledge of what we want it to do because we'll

57
00:02:34,000 --> 00:02:35,700
probably liable to make a lot of bad decisions.

58
00:02:35,700 --> 00:02:39,400
So what we're basically doing here is trying to get down to what are

59
00:02:39,400 --> 00:02:42,400
the exact things that we need the engine to do and how we want them to

60
00:02:42,400 --> 00:02:45,900
how we want it to do them so that we can then go implement the engine

61
00:02:46,000 --> 00:02:49,900
and do it in a nice clean concise way that does exactly what we want.

62
00:02:49,900 --> 00:02:52,000
And that will be very convenient for us to use.

63
00:02:53,100 --> 00:02:56,800
So, what we've gotten ourselves to at this point is a very basic thing

64
00:02:56,800 --> 00:02:59,800
where we can sort of do what we want to do.

65
00:03:00,000 --> 00:03:02,600
Tell map and we can sort of check for collisions and do that sort of

66
00:03:02,600 --> 00:03:06,200
stuff in a very basic way, but there's a bunch of things that we

67
00:03:06,200 --> 00:03:07,400
should probably talk about here.

68
00:03:07,400 --> 00:03:10,000
And there's also a bunch of things that I want to sort of bring to

69
00:03:10,000 --> 00:03:13,200
your attention about it before I do that.

70
00:03:13,400 --> 00:03:16,900
I do want to talk about one thing briefly because it had come up a

71
00:03:16,900 --> 00:03:19,400
little bit on the forums over the weekend.

72
00:03:19,500 --> 00:03:23,700
And I just wanted to sort of clarify, some stuff for people just in

73
00:03:23,700 --> 00:03:25,300
case they were concerned about this.

74
00:03:25,700 --> 00:03:29,600
So, obviously I've said before that, like the design is not really

75
00:03:29,600 --> 00:03:29,900
part of the

76
00:03:30,000 --> 00:03:30,400
Stream.

77
00:03:35,100 --> 00:03:38,400
So we're going to be making a design that I designed, and that's just

78
00:03:38,400 --> 00:03:38,800
the way it goes.

79
00:03:38,800 --> 00:03:39,600
I'm not a game designer.

80
00:03:39,600 --> 00:03:41,200
So I'm not going to teach game design on stream.

81
00:03:41,200 --> 00:03:42,600
I couldn't even if I wanted to.

82
00:03:43,200 --> 00:03:45,500
So, basically, the design is just the design that I have and that's

83
00:03:45,500 --> 00:03:46,000
what we're going to do.

84
00:03:46,000 --> 00:03:49,900
But some people were concerned about the fact that I was saying that

85
00:03:49,900 --> 00:03:54,000
my design calls for the game to basically be a lock screen.

86
00:03:54,000 --> 00:03:58,000
And you walk off just like the old Legend of Zelda now, I could defend

87
00:03:58,000 --> 00:03:59,200
my design decision to do that.

88
00:03:59,200 --> 00:04:01,500
I think very well, I think about design things a lot.

89
00:04:01,500 --> 00:04:01,600
I'm

90
00:04:01,700 --> 00:04:03,100
I'm not just an arbitrary person.

91
00:04:03,100 --> 00:04:05,800
And for people who think that that is not a good idea.

92
00:04:05,800 --> 00:04:07,100
I have plenty of things.

93
00:04:07,100 --> 00:04:10,800
I would say to challenge the notion that you want to have a scrolling

94
00:04:10,800 --> 00:04:11,600
backdrop.

95
00:04:12,200 --> 00:04:14,200
But like I said, the design is not up for discussion.

96
00:04:14,200 --> 00:04:16,300
So I don't really want to get into that.

97
00:04:16,300 --> 00:04:20,000
But what I do want to do is say, if you are concerned because you

98
00:04:20,000 --> 00:04:24,400
would like to see how to implement scrolling because maybe you have a

99
00:04:24,400 --> 00:04:28,300
game idea that would involve a scrolling backdrop that is totally

100
00:04:28,300 --> 00:04:28,700
valid.

101
00:04:28,700 --> 00:04:31,600
And so, what I would like to do as well while we're doing this.

102
00:04:31,800 --> 00:04:33,100
Just show how there really is.

103
00:04:33,100 --> 00:04:34,700
No difference between these two things.

104
00:04:34,900 --> 00:04:38,200
And that I'm just making basically a game design decision to keep this

105
00:04:38,200 --> 00:04:41,600
locked, but I will, I will be able to show you.

106
00:04:41,600 --> 00:04:44,000
I think in just a couple days after we sort of finish our town map

107
00:04:44,000 --> 00:04:44,800
exploration here.

108
00:04:44,900 --> 00:04:47,800
I'll be able to show you how to basically just turn on scrolling in a

109
00:04:47,800 --> 00:04:52,400
sense, because scrolling, if you do, the things that I want to do with

110
00:04:52,400 --> 00:04:56,600
the tile map, if you support all the things that I want to support,

111
00:04:56,600 --> 00:04:58,100
you get scrolling for free.

112
00:04:58,100 --> 00:05:01,100
I just won't be turning it on because I don't want it.

113
00:05:01,100 --> 00:05:01,600
Like, in the

114
00:05:01,700 --> 00:05:04,200
Game, but it's actually for free.

115
00:05:04,200 --> 00:05:07,800
And the reason that I say that is because I don't want them to ever be

116
00:05:07,800 --> 00:05:11,500
any loading screens or hiccups when you're playing this game.

117
00:05:11,800 --> 00:05:14,800
And what that means is that when you move, you know, when the little

118
00:05:15,200 --> 00:05:19,100
yellow rectangle moves off the side of the screen, so if he comes down

119
00:05:19,100 --> 00:05:22,500
here to the bottom and he moves off the bottom of the screen onto the

120
00:05:22,500 --> 00:05:26,100
next screen, I, there's not allowed to be like a pause there.

121
00:05:26,100 --> 00:05:30,000
Anything it has to immediately show, whatever that bottom screen is,

122
00:05:30,000 --> 00:05:30,500
right?

123
00:05:31,200 --> 00:05:36,600
And so I'm assuming that our engine will always be able to draw.

124
00:05:36,900 --> 00:05:41,800
Basically, the screens that are all, you know, the eight, the the

125
00:05:41,800 --> 00:05:44,900
eight screens that surround the one screen there were on it, would

126
00:05:44,900 --> 00:05:46,900
always be able to draw those at a moment's notice.

127
00:05:47,400 --> 00:05:49,600
Write it like instantaneously on the next frame.

128
00:05:49,800 --> 00:05:52,400
So if you wanted scrolling, it wouldn't really be a problem because

129
00:05:52,400 --> 00:05:56,200
all you would have to do is actually just go ahead and move the camera

130
00:05:56,200 --> 00:05:59,200
over and ask it to draw, you know, part of that one tile map in part

131
00:05:59,200 --> 00:05:59,800
of the other tile map.

132
00:06:00,000 --> 00:06:03,800
You could have a smooth smooth, scrolling game with no problem.

133
00:06:04,300 --> 00:06:08,400
So, I don't want anyone to think that our engine will be any cheesier

134
00:06:08,700 --> 00:06:11,400
because of the fact that's not supporting scrolling.

135
00:06:11,400 --> 00:06:12,100
We will be doing.

136
00:06:12,100 --> 00:06:14,300
No cheese is achieves, free zone.

137
00:06:15,300 --> 00:06:19,200
But, but yeah, I just don't want scrolling because there's a number of

138
00:06:19,200 --> 00:06:20,000
things in the game is on that.

139
00:06:20,000 --> 00:06:22,700
I want that are specifically prohibited.

140
00:06:22,700 --> 00:06:24,500
If you have scrolling, they won't work as well.

141
00:06:25,300 --> 00:06:28,200
And so I'm not going to do scrolling, but I will show you basically

142
00:06:28,200 --> 00:06:29,900
how to turn that on, because if

143
00:06:30,000 --> 00:06:33,100
if if for some reason you're concerned about the technology, we are

144
00:06:33,100 --> 00:06:36,500
totally writing an engine that would have been able to scroll if it

145
00:06:36,500 --> 00:06:37,000
wanted to.

146
00:06:37,500 --> 00:06:38,400
I just don't want it to.

147
00:06:38,900 --> 00:06:41,000
So with that out of the way.

148
00:06:41,300 --> 00:06:43,600
Let's talk about the next thing that I wanted to sort of get into

149
00:06:43,600 --> 00:06:43,900
here.

150
00:06:44,700 --> 00:06:49,800
So what I want to talk about now is I want to start talking about, you

151
00:06:49,800 --> 00:06:50,100
notice.

152
00:06:50,100 --> 00:06:53,600
We've got this to do in our code which was math functions.

153
00:06:53,600 --> 00:06:55,200
I used a floor, F function.

154
00:06:55,700 --> 00:06:59,100
And previously I used another function, I use sign to make the sine

155
00:06:59,100 --> 00:06:59,900
wave that we output.

156
00:07:00,000 --> 00:07:03,400
It, I don't know if you remember that, but basically up here at the

157
00:07:03,400 --> 00:07:07,500
top of handmade dot CPP, when we were using our test sine wave.

158
00:07:07,500 --> 00:07:11,000
I was calling sign F to compute the sine of a value and that sort of

159
00:07:11,000 --> 00:07:11,700
thing as well.

160
00:07:12,900 --> 00:07:18,000
So really I would like to finish up doing the tile map stuff right

161
00:07:18,000 --> 00:07:22,000
now, you know, Monday Tuesday Wednesday, but really I think these

162
00:07:22,000 --> 00:07:24,500
things are sort of going to go hand-in-hand a little bit.

163
00:07:24,700 --> 00:07:28,700
And so what I would sort of like to do is just pause for a minute and

164
00:07:28,700 --> 00:07:32,200
talk about kind of all of the stuff that we're going to have to deal

165
00:07:32,200 --> 00:07:35,900
with and sort of the the sort of the math function stuff as well.

166
00:07:36,300 --> 00:07:39,100
And how we're going to deal with that stuff because we're kind of

167
00:07:39,100 --> 00:07:42,400
getting into a part here, where we're going to have to have

168
00:07:42,500 --> 00:07:46,300
Math functions are we're going to have to have a bunch of different

169
00:07:46,300 --> 00:07:47,100
things we want to do.

170
00:07:47,200 --> 00:07:47,700
So.

171
00:07:49,000 --> 00:07:50,100
Here's the status.

172
00:07:51,200 --> 00:07:57,100
First of all, math.h is the C runtime, libraries include file.

173
00:07:57,100 --> 00:08:00,100
So this is saying that ships with any version of C, right?

174
00:08:04,000 --> 00:08:05,800
It is the C runtime Library include file.

175
00:08:05,800 --> 00:08:09,100
That has a bunch of functions that you would need.

176
00:08:09,100 --> 00:08:12,600
If you're going to be doing basic floating-point, mathematics

177
00:08:12,600 --> 00:08:13,400
operations.

178
00:08:14,200 --> 00:08:16,200
So, I don't know if I can find a simple.

179
00:08:17,000 --> 00:08:18,800
I don't know if I can find a simple reference right here.

180
00:08:18,800 --> 00:08:19,000
Yeah.

181
00:08:19,000 --> 00:08:22,200
So this is an example of the functions that are in there.

182
00:08:22,200 --> 00:08:22,700
Right?

183
00:08:23,100 --> 00:08:25,800
And they look like, the kind of things that you had in high school

184
00:08:25,800 --> 00:08:26,800
trigonometry class.

185
00:08:26,800 --> 00:08:29,200
Assuming that you have had high school trigonometry class.

186
00:08:29,600 --> 00:08:31,600
I don't know if there's some youngsters on the stream then they may

187
00:08:31,600 --> 00:08:33,400
not have, but

188
00:08:33,799 --> 00:08:36,299
These are the things that you would expect, from their cosine, sine

189
00:08:36,299 --> 00:08:40,799
tangent Arc, cosine of arcsine arctangent, an arc tangent to now,

190
00:08:40,799 --> 00:08:44,100
arctangent, to is a better way of computing arctangent.

191
00:08:44,100 --> 00:08:45,900
And we'll talk about that, a little later in the Stream.

192
00:08:45,900 --> 00:08:50,000
But basically, you, this is the inverse of the cosine, inverse of the

193
00:08:50,000 --> 00:08:53,000
sine inverse of the tangent inverse of the tangent, a different way.

194
00:08:53,100 --> 00:08:57,400
These are basically two things that you recognize from trig, and we

195
00:08:57,400 --> 00:08:58,700
don't care about the hyperbolic ones.

196
00:08:58,700 --> 00:08:59,800
But again, they're just there.

197
00:09:00,000 --> 00:09:02,100
Same as what you would find in Mathematica textbooks.

198
00:09:02,900 --> 00:09:05,700
Similarly, coming in here, same sort of stuff you're used to, in your

199
00:09:05,700 --> 00:09:06,800
high school math.

200
00:09:06,900 --> 00:09:08,400
You can exponentiate things.

201
00:09:08,400 --> 00:09:11,800
You can take the log base 2, you know, log based.

202
00:09:12,500 --> 00:09:14,200
I don't know what these other ones are here.

203
00:09:14,200 --> 00:09:16,000
Log base plus 1.

204
00:09:16,000 --> 00:09:16,200
Okay.

205
00:09:16,200 --> 00:09:19,900
So there's a shorthand for other ways of putting the logarithms for,

206
00:09:19,900 --> 00:09:20,900
you know, for convenience.

207
00:09:20,900 --> 00:09:24,500
There's the mod which is basically the way of breaking a fractional

208
00:09:24,500 --> 00:09:28,300
number into its hole part and it's fractional part, you know, raising

209
00:09:28,300 --> 00:09:29,800
something to a power, taking the square.

210
00:09:30,000 --> 00:09:32,300
Route, all of these things should be pretty familiar to you.

211
00:09:32,300 --> 00:09:35,000
Now things that won't necessarily be familiar to you.

212
00:09:35,400 --> 00:09:39,600
Are these guys here and these are some discrete math kinds of

213
00:09:39,600 --> 00:09:40,300
functions.

214
00:09:40,500 --> 00:09:43,300
These are the ceiling and the floor functions like there is talking

215
00:09:43,300 --> 00:09:46,100
about before the one that we use that floor.

216
00:09:46,100 --> 00:09:48,900
F, that I was using to sort of like move things to the next lower.

217
00:09:48,900 --> 00:09:51,800
Whole number on a number line.

218
00:09:52,500 --> 00:09:55,400
Those functions are discrete math functions, to some degree and are

219
00:09:55,400 --> 00:09:58,200
not the kinds of things that you often talk about in high school math.

220
00:09:58,200 --> 00:09:59,800
Now, maybe some good good high school.

221
00:10:00,200 --> 00:10:01,100
In good high school math.

222
00:10:01,100 --> 00:10:01,700
Talk about them.

223
00:10:01,700 --> 00:10:03,200
But certainly, I don't think mine did.

224
00:10:07,800 --> 00:10:10,900
So these are some that you may not be familiar with, but a lot of them

225
00:10:10,900 --> 00:10:12,000
are very straightforward.

226
00:10:12,100 --> 00:10:15,500
Guy said, ceiling and floor are two that we were interested in.

227
00:10:15,500 --> 00:10:17,500
And we talked about on the previous dreams.

228
00:10:18,500 --> 00:10:22,300
But basically those are all sort of implemented in there as well.

229
00:10:22,300 --> 00:10:26,200
Now the interesting thing about this math.h.

230
00:10:28,200 --> 00:10:32,100
This method H file is, these are all functions that would actually be

231
00:10:32,100 --> 00:10:36,300
implemented actually in the C runtime Library, calling a function.

232
00:10:36,700 --> 00:10:41,400
So, for example, if we actually step in here, I guess I can because I

233
00:10:41,400 --> 00:10:42,100
already had it running.

234
00:10:42,800 --> 00:10:45,400
If I actually step in here, 20,

235
00:10:48,400 --> 00:10:49,800
Is that function not getting called it off?

236
00:10:50,700 --> 00:10:52,900
That's odd, don't you think that's a little odd.

237
00:10:53,500 --> 00:10:54,700
Why is that getting what?

238
00:10:54,700 --> 00:10:55,600
How is that possible?

239
00:10:57,700 --> 00:10:58,800
What am I missing folks?

240
00:10:59,300 --> 00:11:01,800
Did not hook, just probably didn't reload the pdb.

241
00:11:01,800 --> 00:11:03,600
As always, we're gonna have to fix that.

242
00:11:03,600 --> 00:11:06,300
I have a, I have a plan for fixing that, by the way, we'll talk about

243
00:11:06,300 --> 00:11:07,800
that separate msv.

244
00:11:07,800 --> 00:11:09,200
See Visual Studio.

245
00:11:09,200 --> 00:11:12,500
Oh, he's always The Thorn, The Perennial thorn in our side.

246
00:11:12,500 --> 00:11:13,300
Unfortunately.

247
00:11:13,600 --> 00:11:14,300
All right.

248
00:11:14,600 --> 00:11:17,900
So basically this floor function, if we go ahead and right-click and

249
00:11:17,900 --> 00:11:19,600
go to disassembly, right?

250
00:11:20,000 --> 00:11:22,400
We can see what it's actually doing here.

251
00:11:23,400 --> 00:11:27,300
It's going to go ahead and it's going to actually call this floor.

252
00:11:27,300 --> 00:11:31,800
F function, right, which is in the C runtime library, and I don't

253
00:11:31,800 --> 00:11:33,500
actually know if I have that in.

254
00:11:33,900 --> 00:11:35,600
It doesn't look like this is in this stall.

255
00:11:35,600 --> 00:11:35,900
The machine.

256
00:11:35,900 --> 00:11:37,000
It can't seem to find it.

257
00:11:37,600 --> 00:11:40,600
So I'm not exactly sure if we've even got it on here.

258
00:11:41,000 --> 00:11:45,600
But point being, this is actually the see runtimes function in here

259
00:11:45,600 --> 00:11:46,800
that does the floor.

260
00:11:46,900 --> 00:11:49,300
And you can see that it does, a bunch of stuff, right?

261
00:11:49,300 --> 00:11:52,700
It's doing things doing, things doing things, doing things doing

262
00:11:52,700 --> 00:11:53,000
things.

263
00:11:53,200 --> 00:11:54,600
So on, right?

264
00:11:55,200 --> 00:11:59,200
And that's to do this floor function, which you know, is pretty

265
00:11:59,200 --> 00:11:59,800
expensive.

266
00:12:00,000 --> 00:12:01,500
You look at, look at all this stuff.

267
00:12:01,500 --> 00:12:05,000
It's doing tons and tons and tons and tons of stuff, and then it gets

268
00:12:05,000 --> 00:12:07,700
out here to actually get the result.

269
00:12:08,000 --> 00:12:11,100
So that's, that's just a lot of work for this floor function.

270
00:12:11,100 --> 00:12:13,700
And remember, the only thing that we needed this floor function to do.

271
00:12:13,800 --> 00:12:18,700
The only thing that we wanted to do was basically produce the next

272
00:12:18,700 --> 00:12:21,800
lower whole number on the number line, right?

273
00:12:21,800 --> 00:12:27,100
The only thing that we actually wanted it to do on here, right?

274
00:12:27,500 --> 00:12:29,900
Was if we were looking at the the number

275
00:12:30,000 --> 00:12:31,400
line like this, right?

276
00:12:34,200 --> 00:12:37,400
All he wanted to do, we wanted that floor function to just drop us

277
00:12:37,400 --> 00:12:39,400
down to the next one, right?

278
00:12:39,400 --> 00:12:40,600
That's all we wanted to do.

279
00:12:41,600 --> 00:12:45,600
And so what what's kind of curious about this is if he interesting to

280
00:12:45,600 --> 00:12:46,500
know, right?

281
00:12:46,700 --> 00:12:50,300
Is there some way that we can go ahead and do that in a more efficient

282
00:12:50,300 --> 00:12:54,300
way that's just like simpler and doesn't involve using the C runtime

283
00:12:54,300 --> 00:12:58,000
library and you know, who knows what it's doing in there, right?

284
00:12:58,100 --> 00:13:01,000
Doing a bunch of stuff to comply with the c standard essentially, but

285
00:13:01,000 --> 00:13:03,100
we don't actually know if we need to comply with the sea.

286
00:13:03,300 --> 00:13:07,300
Enter because there may be ways that we can do stuff entirely without

287
00:13:07,300 --> 00:13:07,500
that.

288
00:13:07,500 --> 00:13:08,100
Right?

289
00:13:08,700 --> 00:13:12,800
And so, one of the things that I kind of want to point out here is

290
00:13:12,900 --> 00:13:14,800
actually, I don't know if I need to open the Intel architecture,

291
00:13:14,800 --> 00:13:16,000
reference mail, just yet.

292
00:13:16,100 --> 00:13:16,400
What are these?

293
00:13:16,400 --> 00:13:17,200
I want to point out here.

294
00:13:17,200 --> 00:13:21,300
Is that the Intel chips, nowadays, anything, that's going to be in a

295
00:13:21,300 --> 00:13:26,800
machine that we are going to be shipping on is going to have sse2,

296
00:13:26,900 --> 00:13:27,200
right?

297
00:13:27,200 --> 00:13:31,600
That's basically an instruction set that, you know, for those of you

298
00:13:31,600 --> 00:13:33,000
who don't know, basically,

299
00:13:33,300 --> 00:13:37,600
The the processors on the the Intel processors that are in all of the

300
00:13:37,600 --> 00:13:40,300
machines, like the one that I'm working on now or anything that runs

301
00:13:40,300 --> 00:13:45,100
Windows pretty much and anything that runs Mac OS, X, and actually, I

302
00:13:45,100 --> 00:13:48,400
guess for that matter, the things that are in that are in the

303
00:13:48,400 --> 00:13:53,900
PlayStation 4 and the Xbox One, for example, they are all running

304
00:13:53,900 --> 00:13:57,600
Intel based architectures and those Intel architectures, get revised

305
00:13:57,600 --> 00:13:59,700
over time to have new instruction sets in them.

306
00:14:00,500 --> 00:14:03,100
So the instruction set that were on right now is called.

307
00:14:03,200 --> 00:14:09,900
64 and x64 is basically a 64-bit version of the old x86 instruction

308
00:14:09,900 --> 00:14:10,400
set.

309
00:14:11,000 --> 00:14:14,600
It was made, I Believe by AMD, and that's why it's sometimes called

310
00:14:14,600 --> 00:14:15,700
amd64.

311
00:14:16,000 --> 00:14:19,300
And basically it's just the basic set of instructions that we use to

312
00:14:19,300 --> 00:14:19,900
run code.

313
00:14:19,900 --> 00:14:23,200
That that is what our code gets compiled down to its what when we

314
00:14:23,200 --> 00:14:26,900
actually run this stuff and I drop in here and I go to disassembly.

315
00:14:26,900 --> 00:14:28,900
These are x64 instructions.

316
00:14:28,900 --> 00:14:30,400
That's what they are.

317
00:14:30,600 --> 00:14:31,200
Right?

318
00:14:32,200 --> 00:14:33,000
So like move.

319
00:14:33,200 --> 00:14:36,000
SS and call and CB teacher and a buh bah, blah, blah blah.

320
00:14:36,000 --> 00:14:40,800
Those are all x, 64 instructions, but not every processor has the same

321
00:14:40,800 --> 00:14:45,900
set of x64 instructions because as the processors, get revised over

322
00:14:45,900 --> 00:14:49,300
time, they add new instructions, right?

323
00:14:49,400 --> 00:14:53,500
And so they come up with names for these like there's SSE, which is

324
00:14:53,500 --> 00:14:58,400
one set of instructions that all the chips will have nowadays sse2,

325
00:14:58,600 --> 00:14:59,000
right?

326
00:14:59,100 --> 00:14:59,800
There's even SS

327
00:15:00,000 --> 00:15:02,700
You know, for there's a v x.

328
00:15:02,800 --> 00:15:07,400
So they keep, oops, they keep adding new and new newer and newer

329
00:15:07,400 --> 00:15:10,700
instructions which basically add to the set of instructions that you

330
00:15:10,700 --> 00:15:14,400
can call and oftentimes also add registers.

331
00:15:14,600 --> 00:15:17,600
So they add more registers of the processor that you can access.

332
00:15:18,000 --> 00:15:18,600
Right?

333
00:15:19,400 --> 00:15:22,800
And so basically any CPU that we're going to Target is going to have

334
00:15:22,800 --> 00:15:27,400
sse2 like pretty much everything that we could possibly hope to run on

335
00:15:27,600 --> 00:15:29,600
is going to have sse2 at least.

336
00:15:30,000 --> 00:15:33,600
I don't remember exactly when it was introduced but it's been around a

337
00:15:33,600 --> 00:15:35,000
long, long time.

338
00:15:35,400 --> 00:15:39,300
And so really all of the sse2 instructions.

339
00:15:40,200 --> 00:15:42,000
I don't know if we've got a good list of them here.

340
00:15:42,000 --> 00:15:42,500
We want to.

341
00:15:42,600 --> 00:15:44,200
I want to get a better list of these.

342
00:15:44,400 --> 00:15:47,000
Let me take a look sse2 msdn.

343
00:15:48,100 --> 00:15:48,700
There we go.

344
00:15:49,600 --> 00:15:55,800
So if you take a look here at these at msdn there, if you search for

345
00:15:55,800 --> 00:15:59,400
msdn in S SE and se2, they've got a little overview here where you can

346
00:15:59,400 --> 00:15:59,800
kind of

347
00:16:00,200 --> 00:16:04,000
Pop down by various types of instructions.

348
00:16:04,000 --> 00:16:07,500
As the cmx was another one, a very old one, by the way of instruction

349
00:16:07,500 --> 00:16:09,700
addition, that was on x86 as well.

350
00:16:10,300 --> 00:16:13,400
So these are the different instruction sets and, and sort of the

351
00:16:13,400 --> 00:16:14,600
instructions that we have available.

352
00:16:14,600 --> 00:16:18,500
And for sse2, if I remember correctly.

353
00:16:19,300 --> 00:16:23,300
There's a bunch of instructions that actually allow you to do things.

354
00:16:25,200 --> 00:16:27,800
There's a number of things that you are able to do with these

355
00:16:27,800 --> 00:16:28,500
instructions.

356
00:16:28,600 --> 00:16:29,800
They will probably let us

357
00:16:29,900 --> 00:16:34,800
Just go ahead and do our own floor in a much simpler way.

358
00:16:35,100 --> 00:16:35,400
Now.

359
00:16:35,400 --> 00:16:38,700
Like I said, I promised I would do everything from scratch on the

360
00:16:38,700 --> 00:16:42,600
Stream, So that includes me having to dig through documentation, 's

361
00:16:42,700 --> 00:16:45,700
because I never remember what the intrinsics are for stuff.

362
00:16:45,700 --> 00:16:47,500
I don't do some deprogramming often enough.

363
00:16:47,500 --> 00:16:49,000
I always have to go look them up.

364
00:16:49,900 --> 00:16:53,500
Whereas if you're a super Cindy, if you do somebody every day, you

365
00:16:53,500 --> 00:16:54,900
just kind of know what they all are.

366
00:16:55,300 --> 00:16:56,800
So SSE instructions.

367
00:16:58,100 --> 00:16:59,800
I always have to look up but

368
00:17:00,000 --> 00:17:02,300
I believe this is where I typically go first, right?

369
00:17:02,300 --> 00:17:06,500
I go to the msdn page because I've got them kind of listed by what

370
00:17:06,500 --> 00:17:08,099
type of instruction, they are.

371
00:17:08,200 --> 00:17:09,200
It's a little janky.

372
00:17:09,200 --> 00:17:12,200
I don't love these Docks, but I don't know of a better set of docks

373
00:17:12,400 --> 00:17:13,900
where they're listed by type.

374
00:17:14,000 --> 00:17:14,800
Unfortunately.

375
00:17:14,800 --> 00:17:18,000
Sometimes I look at the Intel architecture reference manual which also

376
00:17:18,000 --> 00:17:21,599
has some sections like that but it's yeah, it's a it's a little ugly,

377
00:17:21,599 --> 00:17:22,200
it's true.

378
00:17:22,700 --> 00:17:26,300
But anyway, if you go in here, you can click on things that talk about

379
00:17:26,300 --> 00:17:29,800
sort of What kinds of operations there are.

380
00:17:29,900 --> 00:17:32,300
And you can see, like I'm going to click on arithmetic operations,

381
00:17:32,300 --> 00:17:32,800
right?

382
00:17:33,400 --> 00:17:36,200
And I'm going to make this a little bigger, so we can actually see it

383
00:17:36,200 --> 00:17:37,300
in its entirety.

384
00:17:37,800 --> 00:17:41,300
So you can kind of see what all the instructions are that the

385
00:17:41,300 --> 00:17:42,800
processor has.

386
00:17:43,000 --> 00:17:46,800
It's got, you know, add subtract multiply square root reciprocal, the

387
00:17:46,800 --> 00:17:49,700
reciprocal square root min-max, right?

388
00:17:50,000 --> 00:17:51,300
So it's got all these sorts of things.

389
00:17:51,300 --> 00:17:55,400
And so if you know that you have these then obviously you can

390
00:17:56,900 --> 00:17:58,100
right things that use them.

391
00:17:58,100 --> 00:17:59,800
So the question is, is there.

392
00:18:00,000 --> 00:18:05,600
Thing in here that we could use centrally to floor, you know, to floor

393
00:18:05,600 --> 00:18:06,900
are our number.

394
00:18:07,800 --> 00:18:13,700
And the thing that I can't quite remember is whether or not?

395
00:18:13,700 --> 00:18:17,100
I don't remember if you have to go to sse4 first, which I don't know

396
00:18:17,100 --> 00:18:20,900
if we want to necessarily be using, if you have to go to sse4 before,

397
00:18:20,900 --> 00:18:25,600
you can reliably do a floor in one instruction or not.

398
00:18:25,600 --> 00:18:28,200
I think maybe you have to or not.

399
00:18:28,600 --> 00:18:29,600
I'm not entirely certain

400
00:18:30,000 --> 00:18:34,800
Anyway, point being what we want to do is we want to look up in here,

401
00:18:34,900 --> 00:18:38,500
how we would do, say the floor instruction by using these intrinsics

402
00:18:39,200 --> 00:18:43,500
and if we and similarly like figure out how we would do sign and the

403
00:18:43,500 --> 00:18:46,100
other sort of things we need to do using these intrinsics.

404
00:18:46,100 --> 00:18:50,900
And then what we'd want to do is we want to come back in here and

405
00:18:50,900 --> 00:18:54,000
instead of using math.h., What we'd want to do is sort of introduce

406
00:18:54,000 --> 00:18:56,100
our own math.h.

407
00:18:56,100 --> 00:18:56,800
If that makes sense.

408
00:18:56,800 --> 00:18:59,700
We'd want to introduce our own sort of

409
00:19:00,000 --> 00:19:04,200
Utility layer that for every platform that we care about, which is

410
00:19:04,200 --> 00:19:05,400
basically.

411
00:19:05,600 --> 00:19:08,600
It's basically just going to be armed neon, which is the instruction

412
00:19:08,600 --> 00:19:14,100
set for like mobile devices and and sse2 for the most part or maybe

413
00:19:14,100 --> 00:19:16,700
out if we decide to do something higher than that SSE for some like

414
00:19:16,700 --> 00:19:20,300
that, some version of x64 will basically make a thing.

415
00:19:21,200 --> 00:19:26,300
That for each of the operations that we care about like floor and like

416
00:19:26,300 --> 00:19:30,400
sign, we will go ahead and make our own implementation where we know

417
00:19:30,400 --> 00:19:34,100
what it does and we know that it does only as much as we need it to

418
00:19:34,100 --> 00:19:35,100
do, right?

419
00:19:35,100 --> 00:19:38,900
And that it uses the most efficient processor operations to do that.

420
00:19:38,900 --> 00:19:41,600
And so that is where I would like to get to on that.

421
00:19:41,600 --> 00:19:44,800
I don't know that we want to necessarily do that right now, but that

422
00:19:44,800 --> 00:19:46,900
is what we have to sort of drive towards.

423
00:19:46,900 --> 00:19:50,200
So that's one thing to think about and by the way, I should also point

424
00:19:50,200 --> 00:19:51,100
out that sometimes

425
00:19:51,400 --> 00:19:54,700
And I don't actually know if we can make this happen.

426
00:19:54,900 --> 00:19:59,600
Sometimes, you can also get the compiler to do some of this work for

427
00:19:59,600 --> 00:19:59,800
you.

428
00:19:59,800 --> 00:20:03,200
If you don't want to do all the stuff that I just said, if you

429
00:20:03,200 --> 00:20:07,200
basically turn on optimizations, so, you know, for example, we are

430
00:20:07,200 --> 00:20:10,100
doing something where we have all of our optimizations turned off.

431
00:20:10,100 --> 00:20:12,400
We have minus OD on our bill blind.

432
00:20:12,400 --> 00:20:14,800
So basically, we've turned off optimizations entirely.

433
00:20:15,000 --> 00:20:17,100
There's no optimizations that are allowed to happen.

434
00:20:17,600 --> 00:20:20,800
And so, one thing that we could do is if we turn on optimizations,

435
00:20:20,800 --> 00:20:21,000
right?

436
00:20:21,000 --> 00:20:21,100
If

437
00:20:21,200 --> 00:20:27,500
If I say - 02 I think is I'm not sure I actually remember what the

438
00:20:27,500 --> 00:20:29,300
with the highest level as we can double check.

439
00:20:29,500 --> 00:20:32,500
But if I turn that on then it'll actually compile it with

440
00:20:32,500 --> 00:20:34,900
optimizations and one of the things.

441
00:20:34,900 --> 00:20:36,800
Well, so the first thing you notice is that I can't even set a

442
00:20:36,800 --> 00:20:39,200
breakpoint here because this function is almost certainly gotten in

443
00:20:39,200 --> 00:20:39,600
lined.

444
00:20:39,800 --> 00:20:43,800
So what I have to do is I have to actually go find where that floor

445
00:20:43,900 --> 00:20:44,200
real.

446
00:20:44,200 --> 00:20:46,200
32, 232 actually happens.

447
00:20:46,400 --> 00:20:50,100
And I need to actually look there to see what the actual code does.

448
00:20:50,400 --> 00:20:50,800
So,

449
00:20:51,200 --> 00:20:55,400
Going into the disassembly and see if it does anything smarter.

450
00:20:55,400 --> 00:20:55,600
Now.

451
00:20:55,600 --> 00:20:58,200
I see it's still does floor and there's nothing useful.

452
00:20:58,200 --> 00:20:59,200
We can do about that.

453
00:20:59,500 --> 00:20:59,800
So I

454
00:21:00,000 --> 00:21:03,500
And I don't sometimes you can set optimization levels where it says,

455
00:21:03,600 --> 00:21:07,300
don't worry about floating-point, consistency and stuff like this.

456
00:21:07,300 --> 00:21:07,900
I don't know.

457
00:21:08,100 --> 00:21:09,800
I'm not sure if there's a way to do it.

458
00:21:10,000 --> 00:21:12,700
Let's let's just double check to see if there's a way msv.

459
00:21:12,700 --> 00:21:15,700
See, because I want to just point this out for people.

460
00:21:15,700 --> 00:21:20,300
If they can some on the stream will probably know fast for f.

461
00:21:20,800 --> 00:21:26,300
That's why I know if there's any way to tell it, tell it to do a

462
00:21:26,300 --> 00:21:28,600
better better version of that.

463
00:21:29,400 --> 00:21:29,800
Why did it?

464
00:21:30,000 --> 00:21:30,900
Link me here.

465
00:21:31,900 --> 00:21:33,300
I'm not sure.

466
00:21:34,000 --> 00:21:34,700
Yeah.

467
00:21:36,700 --> 00:21:37,000
Yeah.

468
00:21:40,200 --> 00:21:42,300
Yeah, well, I don't know.

469
00:21:42,300 --> 00:21:43,100
We'll take a look.

470
00:21:43,100 --> 00:21:45,800
If someone on the street knows we can talk about in the qfa, in the

471
00:21:45,800 --> 00:21:46,800
answer, in the Q&A.

472
00:21:47,300 --> 00:21:50,100
But basically, like sometimes for certain intrinsics, there are

473
00:21:50,100 --> 00:21:50,800
compiler switches.

474
00:21:50,800 --> 00:21:55,000
You can pass or ways that you can tell it that you want to use that

475
00:21:55,000 --> 00:21:55,400
function.

476
00:21:55,400 --> 00:21:58,600
Like, sometimes there's like a way to do it like a built-in floor, F,

477
00:21:59,000 --> 00:22:03,600
you'd call like a separate function, and, and it would know that it

478
00:22:03,600 --> 00:22:09,300
could do something that wasn't quite as direct or quite as

479
00:22:09,300 --> 00:22:09,800
comprehensive.

480
00:22:10,000 --> 00:22:10,900
For example.

481
00:22:13,400 --> 00:22:14,200
Yeah, so, okay.

482
00:22:14,200 --> 00:22:14,900
So this is perfect.

483
00:22:14,900 --> 00:22:16,600
This is what I was looking looking at here.

484
00:22:18,200 --> 00:22:21,600
Flora has an implication that uses streaming Cindy extensions to which

485
00:22:21,600 --> 00:22:23,900
is what we're talking about, right for information restrictions about

486
00:22:23,900 --> 00:22:28,000
using the SEC to complacency set SSE to enable, right?

487
00:22:28,800 --> 00:22:29,200
Okay.

488
00:22:29,200 --> 00:22:32,400
So basically enables or disables use Distributing sentence in the CRT

489
00:22:32,400 --> 00:22:33,600
math, routines.

490
00:22:33,900 --> 00:22:36,500
Grocery want to actually do this in lined.

491
00:22:37,700 --> 00:22:38,500
If you use.

492
00:22:38,500 --> 00:22:40,400
Oh, I generate in terms of function compiler option to compile the

493
00:22:40,400 --> 00:22:41,100
project.

494
00:22:41,100 --> 00:22:42,800
It may appear that has an effect.

495
00:22:42,900 --> 00:22:43,000
It's

496
00:22:43,200 --> 00:22:45,600
Audit the authorities of trees to replace CRT calls.

497
00:22:45,600 --> 00:22:46,100
That's good.

498
00:22:46,100 --> 00:22:47,200
That's what we wanted.

499
00:22:47,800 --> 00:22:50,400
So let's go ahead and try doing that.

500
00:22:50,700 --> 00:22:51,100
/.

501
00:22:51,200 --> 00:22:56,500
Oh, I as well, just to see whether we can get it.

502
00:22:56,500 --> 00:22:58,100
I just want to see if I can show you this.

503
00:22:58,100 --> 00:22:58,700
I apologize.

504
00:22:58,700 --> 00:23:02,200
It takes a while but I really kind of wanted people to see the

505
00:23:02,200 --> 00:23:06,200
compiler doing two different things here because they're there usually

506
00:23:06,200 --> 00:23:07,600
is a way to make it do it.

507
00:23:09,200 --> 00:23:10,000
Oh,

508
00:23:11,300 --> 00:23:13,800
No, why are you still doing in that?

509
00:23:15,100 --> 00:23:18,100
Well, I don't know how to make the compiler suddenly do it.

510
00:23:19,100 --> 00:23:22,300
Anyway point being sometimes, maybe I'll you know what?

511
00:23:22,300 --> 00:23:23,700
I could try calling something else.

512
00:23:23,700 --> 00:23:24,100
I suppose.

513
00:23:24,100 --> 00:23:24,600
I don't know.

514
00:23:24,600 --> 00:23:27,900
Sometimes you can get the compiler to do smart things.

515
00:23:27,900 --> 00:23:29,400
We can basically say, hey look.

516
00:23:29,400 --> 00:23:33,600
I know that maybe it's not completely compliant with the see spec or

517
00:23:33,600 --> 00:23:35,900
something, but I would like you to go ahead and do it.

518
00:23:35,900 --> 00:23:39,400
Maybe I have to enable sse2 but we're in x64 mode.

519
00:23:39,400 --> 00:23:41,600
So it knows that I don't know.

520
00:23:42,100 --> 00:23:44,600
I do not know anyway.

521
00:23:45,500 --> 00:23:46,800
We'll have to ignore that for now.

522
00:23:46,800 --> 00:23:50,000
But please if someone on the stream happens to know how to get the

523
00:23:50,000 --> 00:23:51,900
compiler to do some clever stuff.

524
00:23:56,500 --> 00:23:59,800
Please mention the Q and A so I can show it basically.

525
00:24:00,000 --> 00:24:03,200
Sometimes you can get that, you can convince the compiler to start

526
00:24:03,400 --> 00:24:04,600
doing some of that stuff for you.

527
00:24:04,900 --> 00:24:08,400
I tend to not rely on that too much only because, like, you just saw I

528
00:24:08,400 --> 00:24:10,800
never remember compile switches or even if I do, I don't necessarily

529
00:24:10,800 --> 00:24:13,000
know that the compiler can be trusted to do them and so on.

530
00:24:13,200 --> 00:24:15,600
So I tend to just like to take that out of the equation and actually

531
00:24:15,600 --> 00:24:18,600
have my own file where those will actually be called.

532
00:24:19,100 --> 00:24:23,100
So, you know, essentially what I want to do is start to think about

533
00:24:23,100 --> 00:24:25,700
these things like floor, real 32 and round real 32.

534
00:24:25,700 --> 00:24:26,600
These sorts of things.

535
00:24:27,200 --> 00:24:29,900
What I want to do is I want these functions to

536
00:24:30,000 --> 00:24:36,800
Ventually kind of migrate out into a math file, where we can sort of,

537
00:24:37,700 --> 00:24:42,500
you know, make the platform specific versions that will do the right

538
00:24:42,500 --> 00:24:42,900
thing.

539
00:24:43,100 --> 00:24:46,100
And so I'm not sure exactly what I want to call that maybe I'll call

540
00:24:46,100 --> 00:24:51,100
that handmade intrinsics dot h for example, and we will just move

541
00:24:51,100 --> 00:24:52,500
those into there for now.

542
00:24:53,100 --> 00:24:57,200
And really what we want to be able to do here is we want to be able to

543
00:24:57,200 --> 00:24:59,900
do more efficient stuff, using whatever is available.

544
00:25:00,000 --> 00:25:04,200
On the platform for each of these particular instructions.

545
00:25:04,500 --> 00:25:06,900
So that's something that we have to deal with.

546
00:25:07,100 --> 00:25:08,700
And we're going to have to deal with.

547
00:25:08,700 --> 00:25:09,900
In a number of places.

548
00:25:09,900 --> 00:25:13,400
We're going to have to deal with it because we're going to need a sine

549
00:25:13,400 --> 00:25:14,800
function as well.

550
00:25:15,200 --> 00:25:18,100
We're going to need a cosine function, right?

551
00:25:19,000 --> 00:25:22,500
We're going to need a bunch of these things that you'll see over time.

552
00:25:22,500 --> 00:25:24,000
We're going to need an atan to

553
00:25:28,900 --> 00:25:30,800
Cancers usually y over X, isn't it though?

554
00:25:32,300 --> 00:25:36,000
Sorry, just wanted to sorry to talk out loud here.

555
00:25:36,100 --> 00:25:38,600
Sometimes I get in the middle of something and I'm like wait a minute.

556
00:25:39,200 --> 00:25:41,600
8 + 2 is usually not the way that I just typed it in.

557
00:25:41,700 --> 00:25:43,100
But you know, you know how it is.

558
00:25:45,300 --> 00:25:46,000
Hello.

559
00:25:46,000 --> 00:25:48,400
It's usually written y y over X.

560
00:25:48,400 --> 00:25:49,500
Yeah, that's what I thought.

561
00:25:51,300 --> 00:25:52,100
Keep that same.

562
00:25:52,800 --> 00:25:57,000
Anyway, so point being if you if you look at what the sort of stuff

563
00:25:57,000 --> 00:25:59,400
that we're going to have to do here is we're probably going to have to

564
00:25:59,400 --> 00:26:02,000
spend a fair bit of time going through.

565
00:26:02,200 --> 00:26:05,600
Here and in talking about how this stuff works at a lower level and

566
00:26:05,600 --> 00:26:09,900
implementing them based on the each and each particular processor and

567
00:26:09,900 --> 00:26:10,400
so on.

568
00:26:10,800 --> 00:26:14,000
But for now, what we're essentially going to do is we're going to say,

569
00:26:14,100 --> 00:26:17,900
you know, what, and I can, eliminate these two dues for now by

570
00:26:17,900 --> 00:26:21,100
basically making just a giant to do, which says convert all of these

571
00:26:21,100 --> 00:26:26,600
to platform, efficient versions and remove math.h.

572
00:26:27,200 --> 00:26:30,000
So basically, what we're going to want to do is kind of come through

573
00:26:30,000 --> 00:26:31,700
here and do all of those that way.

574
00:26:32,500 --> 00:26:34,700
But that's going to take us a little bit of time because we're going

575
00:26:34,700 --> 00:26:37,200
to have to go through and look at how to implement things like sign

576
00:26:37,300 --> 00:26:40,100
because processors don't always have sign and you have to implement it

577
00:26:40,100 --> 00:26:40,900
yourself and so on.

578
00:26:41,100 --> 00:26:45,200
So, for now we're just going to call these guys here, but I do, I just

579
00:26:45,600 --> 00:26:47,800
essentially, what I want to do is make sure that our code isn't

580
00:26:47,800 --> 00:26:49,700
littered with calls to math.h.

581
00:26:49,700 --> 00:26:52,100
I want it to be calling into here so that we kind of can see all the

582
00:26:52,100 --> 00:26:54,600
stuff that we're using and off we go.

583
00:26:57,000 --> 00:26:57,700
All right.

584
00:26:58,000 --> 00:26:59,800
So the reason that I bring that up now is

585
00:27:00,000 --> 00:27:04,300
The floor F certainly which we want to get rid of but also there's

586
00:27:04,300 --> 00:27:07,600
another reason 18 to fyx.

587
00:27:07,900 --> 00:27:11,100
Yeah, there's another reason I bring it up which is that I wanted to

588
00:27:11,100 --> 00:27:14,900
start talking about trig and vectors because there's a bunch of things

589
00:27:15,100 --> 00:27:19,700
that we actually do need to talk about as well related to other stuff

590
00:27:19,700 --> 00:27:20,700
with our tile map.

591
00:27:22,300 --> 00:27:25,000
He'd been sick, study H we go.

592
00:27:27,100 --> 00:27:31,400
Okay, so we need to do those math functions.

593
00:27:31,600 --> 00:27:34,700
But the other thing that I wanted to point out, is well, okay, there's

594
00:27:34,700 --> 00:27:36,800
a bunch of stuff that we're going to have to start talking about like

595
00:27:36,800 --> 00:27:38,200
vectors in these sorts of things.

596
00:27:38,200 --> 00:27:41,200
And I got to introduce those Concepts, sort of over time.

597
00:27:41,500 --> 00:27:44,600
And that time is probably going to be pretty close.

598
00:27:44,600 --> 00:27:45,100
Pretty soon.

599
00:27:45,100 --> 00:27:46,500
If it's not going to be, it's not this week.

600
00:27:46,500 --> 00:27:47,600
That's probably going to be next week.

601
00:27:48,100 --> 00:27:49,500
What I want to introduce though.

602
00:27:49,600 --> 00:27:51,300
Just right off the bat is

603
00:27:52,000 --> 00:27:55,300
When we're thinking about this, tilemap, there's a bunch of things

604
00:27:55,300 --> 00:27:56,300
that we want to do to it.

605
00:27:56,300 --> 00:27:59,600
But one of them is one that may not be sort of clear to anyone, if

606
00:27:59,600 --> 00:28:03,000
they haven't actually gone through this process before themselves.

607
00:28:03,000 --> 00:28:06,700
And so, rather than get all the way to the end of it and then show you

608
00:28:06,700 --> 00:28:10,600
that it's kind of unfortunate and have to sort of switch it all around

609
00:28:10,800 --> 00:28:11,500
and do it again.

610
00:28:11,500 --> 00:28:16,200
I'm going to kind of jump to a part in the implementation and show you

611
00:28:16,200 --> 00:28:19,900
what will happen so that you can kind of understand one reason why we

612
00:28:19,900 --> 00:28:21,700
need to think about it and so on.

613
00:28:23,200 --> 00:28:26,700
Yeah, basically, as much as possible, I will discover things on the

614
00:28:26,700 --> 00:28:29,600
screen on the stream for you in the natural way that they will would

615
00:28:29,600 --> 00:28:30,500
get discovered.

616
00:28:30,600 --> 00:28:33,600
But sometimes I kind of have to head things off at the pass to prevent

617
00:28:33,600 --> 00:28:36,600
us from doing, like a whole engine, the wrong way, and then coming

618
00:28:36,600 --> 00:28:37,700
back to it later and going well.

619
00:28:37,700 --> 00:28:39,500
See that's why you wouldn't do it this way.

620
00:28:40,500 --> 00:28:45,100
So sometimes I have to use experience and kind of talked about it

621
00:28:45,500 --> 00:28:47,300
earlier than it would normally come up.

622
00:28:47,300 --> 00:28:48,800
And so this is one of those cases.

623
00:28:49,300 --> 00:28:51,800
What I want to talk about now is I want to talk about basically the

624
00:28:51,800 --> 00:28:52,400
coordinate.

625
00:28:52,700 --> 00:28:55,300
The things are in now, what we've been doing so far.

626
00:28:55,300 --> 00:28:57,300
We made this tile map, right?

627
00:28:57,400 --> 00:28:59,000
When we made this actual tile map.

628
00:28:59,300 --> 00:29:01,900
I sort of showed you how to come at it from first principles and we

629
00:29:01,900 --> 00:29:03,100
did a reasonable job of that.

630
00:29:03,100 --> 00:29:04,100
We've got it working right now.

631
00:29:04,100 --> 00:29:05,400
We could walk to multiple tile Maps.

632
00:29:05,400 --> 00:29:06,600
It's fairly clean on the inside.

633
00:29:06,600 --> 00:29:07,900
There's nothing particularly odd going on.

634
00:29:07,900 --> 00:29:10,600
There's some stuff, I said, I wanted to kind of continue to push on

635
00:29:10,600 --> 00:29:12,600
but for the moment it's looking.

636
00:29:12,600 --> 00:29:16,300
Okay, but we've baked into here a very specific assumption.

637
00:29:17,600 --> 00:29:21,500
And one of those assumptions is that we are just dealing with pixels

638
00:29:21,500 --> 00:29:23,000
on the screen, right?

639
00:29:23,400 --> 00:29:27,300
Because basically everything that we did, you know, our tiles have a

640
00:29:27,300 --> 00:29:28,500
known pixel size.

641
00:29:28,500 --> 00:29:31,500
When we move things around, removing them in pixels.

642
00:29:31,600 --> 00:29:37,300
And and this sort of thing, what that means is, if we were to change

643
00:29:37,600 --> 00:29:39,600
the resolution, right?

644
00:29:39,700 --> 00:29:44,300
Of our screen, we would have to rewrite all of that code essentially,

645
00:29:44,500 --> 00:29:45,100
right?

646
00:29:45,200 --> 00:29:47,200
I mean, let's say, for example, I mean

647
00:29:47,300 --> 00:29:50,000
Just for the sake of argument because we could do this actually pretty

648
00:29:50,000 --> 00:29:52,100
easily here and I'll show you what I mean.

649
00:29:52,600 --> 00:29:57,900
Let's say, for example, we came in here and we had we wanted to change

650
00:29:57,900 --> 00:29:59,500
that the size of the tile map.

651
00:29:59,500 --> 00:29:59,900
So we

652
00:30:00,200 --> 00:30:04,400
We were going to change it from being 60 pixels across to being 30

653
00:30:04,400 --> 00:30:05,100
pixels across.

654
00:30:05,100 --> 00:30:07,500
Let's say right, we just decided to change it.

655
00:30:07,800 --> 00:30:08,800
And so here we go.

656
00:30:08,800 --> 00:30:11,200
Oh Christen my guys already stuck in the geometry there.

657
00:30:11,200 --> 00:30:16,100
I got to have to move him a little bit over from where he is because

658
00:30:16,100 --> 00:30:20,100
he started off in the middle of the world hazards, but he's in

659
00:30:20,100 --> 00:30:23,300
gentleman his name.

660
00:30:24,800 --> 00:30:29,800
So essentially this is, you know an example of what would happen.

661
00:30:30,000 --> 00:30:32,000
If I go ahead and change that value.

662
00:30:32,000 --> 00:30:36,200
So that now the tiles are not as large as they used to be instead of

663
00:30:36,200 --> 00:30:37,800
being 60 right there.

664
00:30:37,800 --> 00:30:42,800
Now, 30, but, oh, and you'll notice the offset is wrong as well.

665
00:30:42,800 --> 00:30:43,200
Right?

666
00:30:43,300 --> 00:30:48,900
Because that the offset is as much to is one entire tile to that

667
00:30:48,900 --> 00:30:49,300
direction.

668
00:30:49,300 --> 00:30:53,300
So, this should we should actually probably set these relative to the

669
00:30:53,300 --> 00:30:54,100
tile with, right.

670
00:30:54,100 --> 00:30:56,300
We should probably set them that way.

671
00:30:57,000 --> 00:30:59,500
Anyway, so here's our map again, right?

672
00:30:59,600 --> 00:30:59,800
And it

673
00:31:00,500 --> 00:31:02,800
Roughly the same with a, you know, with a smaller thing.

674
00:31:02,800 --> 00:31:06,900
But what you'll notice is the guy now moves twice as fast right

675
00:31:06,900 --> 00:31:11,100
relative to the size of the, you know, of the stuff, right?

676
00:31:11,200 --> 00:31:14,200
Because his speed is in pixels.

677
00:31:15,000 --> 00:31:18,400
So if we change the resolution of the tiles, just the resolution of

678
00:31:18,400 --> 00:31:19,900
the imagery, right?

679
00:31:20,100 --> 00:31:23,800
It's as if the whole world has gotten smaller because everything that

680
00:31:23,800 --> 00:31:27,300
we're doing, is effectively in some units and those units are pixels

681
00:31:27,300 --> 00:31:28,200
right now.

682
00:31:28,200 --> 00:31:29,800
That's a perfectly normal thing to do.

683
00:31:29,900 --> 00:31:31,400
Do and like, I showed you.

684
00:31:31,400 --> 00:31:32,400
It's what you would do.

685
00:31:32,400 --> 00:31:37,000
As if you move up each step and sort of as you go condensed, things

686
00:31:37,000 --> 00:31:37,400
down.

687
00:31:37,500 --> 00:31:41,100
Now, the problem is, you will never figure out that this is going to

688
00:31:41,100 --> 00:31:42,100
break something.

689
00:31:42,600 --> 00:31:46,300
Unless you try to run your game at multiple resolutions and it's

690
00:31:46,300 --> 00:31:49,400
entirely possible that we would not really be trying to do that for

691
00:31:49,400 --> 00:31:50,300
quite some time.

692
00:31:50,700 --> 00:31:54,000
And so, like I said, what I'm doing today is what I'm doing right now

693
00:31:54,000 --> 00:31:57,100
is essentially, it's kind of forcing that issue and pointing out to

694
00:31:57,100 --> 00:31:59,800
you like, okay, let's start to think about the ability to change.

695
00:32:00,000 --> 00:32:03,400
Lucian's way easier than it may ever naturally come up or naturally

696
00:32:03,400 --> 00:32:06,600
occur to you because that's a very real problem.

697
00:32:06,600 --> 00:32:10,800
And we don't want to bake that assumption into our game or will could

698
00:32:10,800 --> 00:32:14,300
create all kinds of headaches for ourselves by assuming that our units

699
00:32:14,300 --> 00:32:17,400
are pixels when pixels are just something that we use to display on

700
00:32:17,400 --> 00:32:20,300
the screen and don't really have any meaning in the game World

701
00:32:20,300 --> 00:32:23,500
necessarily, we should be able to double the resolution or have the

702
00:32:23,500 --> 00:32:27,200
resolution of our tiles in terms of Graphics without the game changing

703
00:32:27,200 --> 00:32:28,500
at all, right?

704
00:32:28,800 --> 00:32:29,800
The game itself should

705
00:32:29,900 --> 00:32:31,600
Play exactly the way that it plays.

706
00:32:32,200 --> 00:32:35,000
And so that's the first thing we need to think about is the concept

707
00:32:35,000 --> 00:32:36,100
that units.

708
00:32:37,200 --> 00:32:40,900
There's something there's such a thing as the units of our game and

709
00:32:40,900 --> 00:32:44,800
those units may not be pixels and probably shouldn't be pixels.

710
00:32:45,000 --> 00:32:47,400
Okay, so that's one thing to think about.

711
00:32:48,300 --> 00:32:53,300
So that's Thing 1 and Thing 2 that we need to think about is how our

712
00:32:53,300 --> 00:32:53,700
court.

713
00:32:53,700 --> 00:32:56,600
So I'm basically trying to set us up to talk about the sort of the

714
00:32:56,600 --> 00:32:59,200
coordinate system of our game are the other thing that we need to sort

715
00:32:59,200 --> 00:32:59,800
of think about here.

716
00:33:00,300 --> 00:33:04,600
Is well, we know that pixels are one unit that we could be in and

717
00:33:04,600 --> 00:33:06,400
there's reasons why I probably wouldn't do that.

718
00:33:06,500 --> 00:33:11,200
So that's one thing but also, what direction do things go, right?

719
00:33:11,800 --> 00:33:15,900
If you think about it, this guy here, when he moves left to right,

720
00:33:16,000 --> 00:33:18,200
right, he's moving positive.

721
00:33:18,200 --> 00:33:20,700
We add numbers to him to move this way.

722
00:33:20,800 --> 00:33:21,400
Right?

723
00:33:21,500 --> 00:33:24,700
So essentially, if you wanted to draw what our coordinate system looks

724
00:33:24,700 --> 00:33:30,000
like, right, you would say that that ex, you know, the X

725
00:33:30,100 --> 00:33:34,400
Access it gets positive in that direction, right on the screen.

726
00:33:35,100 --> 00:33:38,300
But but what happens with why right now?

727
00:33:38,300 --> 00:33:41,300
I don't know if you remember, but if we go down here and we take a

728
00:33:41,300 --> 00:33:45,400
look at what happens when the player presses the up button, right?

729
00:33:45,400 --> 00:33:51,000
If move up is is down then then it's actually a subtraction that we do

730
00:33:51,000 --> 00:33:52,400
from the guys, why position?

731
00:33:52,700 --> 00:33:55,700
So really when we're going upwards or subtracting, we're going

732
00:33:55,700 --> 00:33:57,700
downwards, were added, right?

733
00:33:57,700 --> 00:33:59,900
And so, if you think about it, that means that

734
00:34:00,000 --> 00:34:05,000
at y, if this is the y axis, Y is positive that way and - this way,

735
00:34:05,200 --> 00:34:05,800
right?

736
00:34:06,500 --> 00:34:09,300
So if this is the origin of our coordinate system, right?

737
00:34:09,400 --> 00:34:11,100
That's, that's that's what it would look like.

738
00:34:19,400 --> 00:34:21,800
So again.

739
00:34:22,900 --> 00:34:24,000
There's an issue here.

740
00:34:24,000 --> 00:34:25,400
The issue may not be obvious.

741
00:34:25,400 --> 00:34:30,300
But it's one that I would like to demonstrate earlier rather than

742
00:34:30,300 --> 00:34:30,400
later.

743
00:34:30,400 --> 00:34:33,900
And that is that this is backwards from how all math is done.

744
00:34:33,900 --> 00:34:34,800
Right?

745
00:34:34,800 --> 00:34:42,900
We are essentially doing something that is is written in a coordinate

746
00:34:42,900 --> 00:34:45,800
system where it looks like this.

747
00:34:45,800 --> 00:34:50,900
And this is this is positive X and this is positive y, but every math

748
00:34:50,900 --> 00:34:52,699
test book that's ever been written in the history.

749
00:34:53,000 --> 00:35:00,600
Time that I'm aware of anyway, does have X+ going that way but y+ goes

750
00:35:00,600 --> 00:35:02,000
up, right?

751
00:35:02,100 --> 00:35:07,100
This is how how math looks always pretty much universally.

752
00:35:07,600 --> 00:35:10,100
And so if you're someone who's used to working with math, which you

753
00:35:10,100 --> 00:35:13,800
will be, if you ever took high school math or anything like that, you

754
00:35:13,800 --> 00:35:16,900
will expect why to be going up and all of the stuff that you do.

755
00:35:17,400 --> 00:35:20,700
When you look at math textbooks and physics and everything else will

756
00:35:20,700 --> 00:35:22,000
be drawn this way.

757
00:35:22,000 --> 00:35:22,800
So, you know,

758
00:35:22,900 --> 00:35:28,400
It's y, goes up and angles are measured, sort of starting going

759
00:35:28,400 --> 00:35:29,600
counterclockwise.

760
00:35:29,800 --> 00:35:32,900
They do not go clockwise, which is what they would do on this.

761
00:35:32,900 --> 00:35:39,700
Right, you know, circles are drawn this way and so on, so really we

762
00:35:39,700 --> 00:35:44,400
have another problem, you know, we have we have our first problem is

763
00:35:44,400 --> 00:35:49,200
the pixels versus World units problem.

764
00:35:52,300 --> 00:35:55,700
Right now, but we have another problem, which is the upside down

765
00:35:55,700 --> 00:35:59,000
problem, which is the fact that our coordinate system currently is

766
00:35:59,000 --> 00:35:59,800
upside down.

767
00:36:00,300 --> 00:36:02,500
From what math would want it to be.

768
00:36:02,700 --> 00:36:10,700
And there's no real reason in practice why you have to have your

769
00:36:10,700 --> 00:36:14,300
coordinate system agree with maths coordinate system.

770
00:36:14,500 --> 00:36:14,800
Okay.

771
00:36:14,800 --> 00:36:19,100
There's if you don't want to, you don't have to there's no compelling

772
00:36:19,100 --> 00:36:19,700
reason.

773
00:36:20,600 --> 00:36:29,200
There's no objective truth to what direction y has to go, right, but I

774
00:36:29,200 --> 00:36:29,900
can simply say,

775
00:36:30,000 --> 00:36:34,200
Say from experience that you will save yourself a lot of headaches.

776
00:36:34,400 --> 00:36:37,900
If you are constantly looking at your math, textbook and seeing this

777
00:36:38,200 --> 00:36:41,700
and then you can go type something in and it is that over in your game

778
00:36:41,700 --> 00:36:42,500
world as well.

779
00:36:42,900 --> 00:36:46,700
Because otherwise you're constantly having to deal with this inversion

780
00:36:46,700 --> 00:36:49,400
that occurs between what you see in a math textbook.

781
00:36:49,400 --> 00:36:52,600
When you're trying to do something or looking up, something advanced

782
00:36:52,600 --> 00:36:56,800
math wise and what you actually, go ahead and do on the screen, for

783
00:36:56,800 --> 00:36:59,900
example, if we wanted to shoot a projectile.

784
00:37:00,000 --> 00:37:01,700
Tactile at a particular angle.

785
00:37:01,700 --> 00:37:04,800
Let's say, you know, we've got a particular Theta and we want to shoot

786
00:37:04,800 --> 00:37:06,900
a projectile off at that angle, right?

787
00:37:07,200 --> 00:37:09,400
We would know and we'll be talking about this a lot more.

788
00:37:09,400 --> 00:37:10,800
So if you don't know that's fine too.

789
00:37:11,300 --> 00:37:17,200
There's cosine and a sine of that angle will give us the X and Y of

790
00:37:17,200 --> 00:37:20,300
the vector that we need to sort of shoot it off in that direction.

791
00:37:20,400 --> 00:37:22,900
Well, if you're thinking about it in this way and you're looking at

792
00:37:22,900 --> 00:37:25,600
your math, textbook and trying to learn from it this way and then you

793
00:37:25,600 --> 00:37:28,800
go and implement it and your dude is always shooting debt, you know,

794
00:37:28,800 --> 00:37:29,800
the other way.

795
00:37:29,900 --> 00:37:33,100
It's like, oh, it's he's shooting down instead of up.

796
00:37:33,100 --> 00:37:33,800
What's going on.

797
00:37:33,800 --> 00:37:34,400
I'm totally confused.

798
00:37:34,400 --> 00:37:35,000
Right?

799
00:37:35,300 --> 00:37:36,500
And then you're like, oh, right.

800
00:37:36,500 --> 00:37:40,000
My quarter system is backwards and the more complex, your equations

801
00:37:40,000 --> 00:37:41,000
get the easier.

802
00:37:41,000 --> 00:37:44,200
It is to forget in there somewhere that there's an upside down this

803
00:37:44,200 --> 00:37:47,500
and wonder why stuff isn't working and we write subtly wrong.

804
00:37:48,500 --> 00:37:51,600
So I would say that we have two problems that we probably want to fix.

805
00:37:51,600 --> 00:37:54,700
We want to pick fix the pixels versus World units and we want to fix

806
00:37:54,700 --> 00:37:59,000
the upside down and I wanted to just kind of introduce those now that

807
00:37:59,000 --> 00:37:59,800
we're sort of a little ways.

808
00:38:00,000 --> 00:38:05,600
Into it because those are things that just from experience, I can say,

809
00:38:05,700 --> 00:38:09,500
we probably don't want to bake into our engine because we're probably

810
00:38:09,500 --> 00:38:11,100
going to be sad if we do so.

811
00:38:11,200 --> 00:38:16,800
And there is no, real obvious compelling reason why you have to do

812
00:38:16,800 --> 00:38:21,000
either these two things, but just like I said, if you want to make

813
00:38:21,000 --> 00:38:23,800
your game support multiple resolutions and you want to have an easier

814
00:38:23,800 --> 00:38:26,600
time going from math textbooks to your game and vice versa.

815
00:38:26,800 --> 00:38:29,800
It's just their good things to do, and so I'm going to do them.

816
00:38:29,900 --> 00:38:34,100
M in our code base, for those two reasons, but your game would work

817
00:38:34,100 --> 00:38:35,100
just fine without them.

818
00:38:35,100 --> 00:38:37,800
If you didn't ever care about changing the resolution, or you want to

819
00:38:37,800 --> 00:38:41,000
do some hacks to change the resolution and so on.

820
00:38:41,000 --> 00:38:43,200
And if you didn't ever care about going back and forth, match that's

821
00:38:43,200 --> 00:38:45,700
books, then you would never have to worry about that.

822
00:38:46,200 --> 00:38:46,700
Okay.

823
00:38:47,600 --> 00:38:49,600
So where does that leave us?

824
00:38:50,500 --> 00:38:54,000
Where indeed it leaves us with 15 minutes.

825
00:38:54,000 --> 00:38:55,200
I've been talking a lot tonight.

826
00:38:55,200 --> 00:38:56,300
It's been a lot of blabbing.

827
00:38:56,300 --> 00:38:57,200
I've been a blabbermouth.

828
00:38:57,200 --> 00:38:57,800
It's true.

829
00:38:57,800 --> 00:38:59,900
But where does that leave us?

830
00:39:00,000 --> 00:39:03,500
It leaves us at the point where we kind of have to start to think

831
00:39:03,500 --> 00:39:08,300
about this tile map thing, a little more robustly, like, trying to

832
00:39:08,300 --> 00:39:12,300
just make this, a little cleaner, you know, got to do a little

833
00:39:12,300 --> 00:39:13,100
stretching today.

834
00:39:13,500 --> 00:39:15,500
I got to go stretch after the streams over.

835
00:39:15,500 --> 00:39:16,000
We're stretching.

836
00:39:16,000 --> 00:39:17,100
It's going to be stretching time.

837
00:39:17,800 --> 00:39:20,300
Maybe we could do one of those group calisthenic things for like I do

838
00:39:20,300 --> 00:39:23,100
the stretch and all of you guys do the stretch as well.

839
00:39:23,100 --> 00:39:26,600
And then it's like, you know, it's like group calisthenics.

840
00:39:26,900 --> 00:39:27,300
Yeah.

841
00:39:27,300 --> 00:39:27,800
Anyway.

842
00:39:28,100 --> 00:39:29,700
Anyway, so

843
00:39:31,200 --> 00:39:32,500
We gotta start thinking about all these things.

844
00:39:32,500 --> 00:39:33,800
We gotta start thinking about Tom apps.

845
00:39:34,300 --> 00:39:37,100
So there's a couple things that I still want to do that will naturally

846
00:39:37,100 --> 00:39:38,400
fall out of the things that we're doing.

847
00:39:38,400 --> 00:39:41,300
But those two that I introduced today, are things that wouldn't, I

848
00:39:41,300 --> 00:39:43,400
don't think have naturally followed at fallen out.

849
00:39:43,400 --> 00:39:46,700
They would have been things that we would have to get to later, and

850
00:39:46,700 --> 00:39:50,200
then realize we're busted and then be upset.

851
00:39:50,200 --> 00:39:50,700
Right?

852
00:39:50,900 --> 00:39:54,700
And so, I'm just trying to kind of save us, that, that sort of grief

853
00:39:54,800 --> 00:39:56,400
by pointing them out ahead of time.

854
00:39:56,700 --> 00:39:59,800
Because I've been there already and know that these things.

855
00:40:00,200 --> 00:40:01,900
Gotta go poorly.

856
00:40:02,300 --> 00:40:04,700
So now we've got that out of the way.

857
00:40:05,200 --> 00:40:07,100
What I would like to propose.

858
00:40:07,300 --> 00:40:13,900
First of all is having some notion just to start off with having some

859
00:40:13,900 --> 00:40:14,300
notion.

860
00:40:14,300 --> 00:40:18,700
Therefore of what the units are in the world.

861
00:40:19,000 --> 00:40:19,300
Right?

862
00:40:19,300 --> 00:40:23,400
I'd like to have some notion, some, I'd like to be able to tie this

863
00:40:23,400 --> 00:40:29,800
back basically to a actual notion of how big things are.

864
00:40:29,900 --> 00:40:31,400
Are in the real world.

865
00:40:31,600 --> 00:40:34,500
And the reason I want to use real world units essentially.

866
00:40:36,000 --> 00:40:39,000
Is because I feel like, if I use real world units, it's easier for me

867
00:40:39,000 --> 00:40:42,600
to conceptualize how big things should be, and I can play with that if

868
00:40:42,600 --> 00:40:43,100
I want to.

869
00:40:43,100 --> 00:40:45,400
But like, for example, if we want to implement something that has

870
00:40:45,400 --> 00:40:48,900
gravity, we know how fast gravity is in the real world.

871
00:40:49,000 --> 00:40:53,800
So if we already have real world units everywhere for stuff, then it's

872
00:40:53,800 --> 00:40:57,900
easier to just type in the value for gravity and be starting at

873
00:40:57,900 --> 00:41:00,300
something that's realistic and then you can tune it from there rather

874
00:41:00,300 --> 00:41:01,300
than having no idea.

875
00:41:01,300 --> 00:41:04,800
What would be realistic and having to guess, and then tuning for

876
00:41:04,800 --> 00:41:05,200
there.

877
00:41:06,100 --> 00:41:10,200
So, given that what I'm thinking about here is basically like, okay?

878
00:41:10,200 --> 00:41:11,900
So we know our guy, right?

879
00:41:11,900 --> 00:41:18,600
We know that are that are, are person is basically going to be about

880
00:41:18,600 --> 00:41:20,900
one, you know, kind of looking at this.

881
00:41:20,900 --> 00:41:22,500
I'm imagining how big is going to be?

882
00:41:22,900 --> 00:41:24,200
So I'm imagining that.

883
00:41:24,200 --> 00:41:27,900
We want the player to be, you know, something like that size,

884
00:41:27,900 --> 00:41:28,700
something like that.

885
00:41:28,700 --> 00:41:29,800
Rectangular sighs.

886
00:41:29,800 --> 00:41:30,100
I don't know.

887
00:41:30,100 --> 00:41:30,700
Exactly.

888
00:41:30,700 --> 00:41:31,800
But something like it.

889
00:41:32,400 --> 00:41:35,200
And so if we think about, you know, I don't know how wide a

890
00:41:35,300 --> 00:41:37,100
Human is across right?

891
00:41:37,400 --> 00:41:43,700
But, you know, I mean, I feel like one of these tiles for example is

892
00:41:43,700 --> 00:41:46,900
probably not a full meter across.

893
00:41:46,900 --> 00:41:48,300
Maybe it's a meter across.

894
00:41:48,300 --> 00:41:49,000
I don't know.

895
00:41:49,500 --> 00:41:52,800
It's hard to say, but I would basically think that, you know, if we

896
00:41:52,800 --> 00:41:56,800
were to Ballpark the size of the guy, you know, what, we could say,

897
00:41:57,000 --> 00:41:57,800
here's what we could say.

898
00:41:57,800 --> 00:41:59,700
Here's here's one way, I could ballpark.

899
00:42:00,000 --> 00:42:00,600
Of roughly.

900
00:42:00,600 --> 00:42:03,000
What we might want those units to be.

901
00:42:03,000 --> 00:42:07,300
Let's say I open up Google here and I say let's say our dude, you

902
00:42:07,300 --> 00:42:11,000
know, he's a little kid so I don't know let's say what's the average

903
00:42:11,000 --> 00:42:14,300
height of let's say, you know a ten year old.

904
00:42:16,300 --> 00:42:18,800
The average height of ten year old boy was fifty, five point two

905
00:42:18,800 --> 00:42:19,400
inches.

906
00:42:19,600 --> 00:42:25,900
So let's just say randomly 55.2 inches times.

907
00:42:27,400 --> 00:42:27,900
Excuse me.

908
00:42:29,600 --> 00:42:30,900
Sorry and M.

909
00:42:31,200 --> 00:42:33,100
How big would that be 50?

910
00:42:33,100 --> 00:42:36,000
2.2 inches in meters?

911
00:42:36,700 --> 00:42:40,800
So that's 1.4 meters right?

912
00:42:41,100 --> 00:42:41,200
There.

913
00:42:41,200 --> 00:42:42,700
You go, 1.4 meters.

914
00:42:43,200 --> 00:42:43,600
So how big?

915
00:42:43,600 --> 00:42:47,700
A my it's actually see six feet and meters.

916
00:42:48,000 --> 00:42:49,000
I'm 1.8.

917
00:42:49,200 --> 00:42:54,900
So 1.4 would roughly be, you know, sort of the height of one of the,

918
00:42:54,900 --> 00:42:55,600
you know, what?

919
00:42:55,600 --> 00:42:58,800
One side of these let's say would be 1.4 meters.

920
00:42:59,100 --> 00:42:59,900
Not like that.

921
00:43:00,400 --> 00:43:06,600
So if a tile on aside was 1.4 meters, we could actually use that value

922
00:43:06,600 --> 00:43:12,400
as sort of a calibration value to say roughly how big these things

923
00:43:12,400 --> 00:43:15,400
actually are supposed to be in real world units, right?

924
00:43:15,400 --> 00:43:17,800
We could come in here and say our world definition.

925
00:43:18,000 --> 00:43:23,600
We actually have a thing, which is going to be one point for right.

926
00:43:23,600 --> 00:43:28,700
Which is M, you know, tile side in meters.

927
00:43:29,000 --> 00:43:30,400
Or something like this, right?

928
00:43:30,400 --> 00:43:33,000
And so when we create the world we're just going to say that the tile

929
00:43:33,000 --> 00:43:38,400
side what, you know, one side of a tile measured in meters.

930
00:43:38,500 --> 00:43:42,700
I'm just going to say for now that that's about 1.4.

931
00:43:42,800 --> 00:43:43,100
Right?

932
00:43:43,100 --> 00:43:47,000
That's about its 1.4 meters on the side of a tile.

933
00:43:47,100 --> 00:43:49,800
So if we wanted to measure now in the world how long something was we

934
00:43:49,800 --> 00:43:52,900
could actually do it in real world, you know in M something like that.

935
00:43:52,900 --> 00:43:54,400
Now I'm not sure if that's exactly right.

936
00:43:54,400 --> 00:43:58,100
You know, we're going to sort of say that that's roughly it for now.

937
00:43:59,100 --> 00:43:59,600
Okay.

938
00:44:00,200 --> 00:44:04,100
So what that essentially means is if a tile is that big in meters,

939
00:44:04,400 --> 00:44:05,100
right?

940
00:44:05,600 --> 00:44:10,600
And then we also have right over here and, you know, I guess we could

941
00:44:10,600 --> 00:44:12,900
also say, I think.

942
00:44:12,900 --> 00:44:16,900
Let's let's go ahead and say definitively that our tile side is going

943
00:44:16,900 --> 00:44:19,700
to be square as well because I know that I want square tiles.

944
00:44:20,000 --> 00:44:24,200
So let's go ahead and say a tile side in pixels, right?

945
00:44:24,400 --> 00:44:28,000
Which we also have, which kind of formal for us this tile side in

946
00:44:28,000 --> 00:44:28,600
pixels.

947
00:44:28,900 --> 00:44:33,100
And I guess that's that should actually be a un 32 since we can't.

948
00:44:33,200 --> 00:44:36,300
We're not going to allow there to be a fractional pixels there.

949
00:44:36,400 --> 00:44:43,200
So a tile side in pixels on the screen is going to be 64.

950
00:44:43,200 --> 00:44:43,500
Now.

951
00:44:43,800 --> 00:44:46,500
Now you may want to let it be fractional.

952
00:44:46,500 --> 00:44:47,900
You know, you might think okay.

953
00:44:47,900 --> 00:44:51,100
Why not let it be a fractional number of pixels on the screen for a

954
00:44:51,100 --> 00:44:51,800
particular tile.

955
00:44:52,200 --> 00:44:55,300
And the reason that I don't really want to do that is because if you

956
00:44:55,300 --> 00:44:58,700
think about it, we would like the art for the game to line.

957
00:44:58,800 --> 00:44:59,900
Line up properly.

958
00:45:00,100 --> 00:45:01,500
With the pixels on the screen.

959
00:45:01,900 --> 00:45:05,600
When we get to the renderer, you'll see why we may want to do that to

960
00:45:05,600 --> 00:45:06,200
avoid.

961
00:45:06,200 --> 00:45:09,600
Basically, having more blurriness introduced than necessary and more

962
00:45:09,600 --> 00:45:11,000
filtering, introduce the necessary.

963
00:45:11,500 --> 00:45:14,300
So, you may wonder why I'm actually doing this as an integer for now,

964
00:45:14,300 --> 00:45:16,400
but I think I want to do that for now.

965
00:45:16,400 --> 00:45:19,100
We'll see if we could always decide later that we don't want to do

966
00:45:19,100 --> 00:45:20,100
that later on.

967
00:45:20,100 --> 00:45:22,400
But for now, I think I'm going to stick with that.

968
00:45:22,700 --> 00:45:26,800
So basically the tile the tile side and pixels is going to replace

969
00:45:27,200 --> 00:45:28,500
this width and height here.

970
00:45:28,700 --> 00:45:29,900
And this will now give

971
00:45:30,000 --> 00:45:35,100
Us an idea of the real-world size of things and how big they should be

972
00:45:35,100 --> 00:45:35,800
on the screen.

973
00:45:35,800 --> 00:45:40,000
And with those two, we can now do a mapping that will allow us to

974
00:45:40,000 --> 00:45:43,600
write things like the player position, right?

975
00:45:44,300 --> 00:45:47,400
We can write something like the player position in a way that will

976
00:45:47,400 --> 00:45:51,600
actually tell us something more interesting than just how many pixels

977
00:45:51,600 --> 00:45:52,100
he's moved.

978
00:45:52,100 --> 00:45:54,800
We can say how many meters per second, he's going for example, or

979
00:45:54,800 --> 00:45:55,600
things like that.

980
00:45:55,800 --> 00:45:58,800
And then we can always map him back into where he should be in the

981
00:45:58,800 --> 00:45:59,800
world afterwards.

982
00:46:00,300 --> 00:46:04,000
Okay, so I'm going to go ahead and fix the stuff here.

983
00:46:04,000 --> 00:46:07,800
I'm Gonna Change tile with to because we change we got rid of that

984
00:46:07,800 --> 00:46:08,600
tile with the tile height.

985
00:46:08,600 --> 00:46:12,500
So we have to change tile with to tile side in pixels.

986
00:46:12,900 --> 00:46:16,500
Go ahead and change that everywhere that it was being used.

987
00:46:17,000 --> 00:46:17,600
And similarly.

988
00:46:17,600 --> 00:46:23,100
We have to change tile height to tile side in pixels as well.

989
00:46:23,100 --> 00:46:26,300
So that okay.

990
00:46:27,300 --> 00:46:28,300
Let's see here.

991
00:46:29,800 --> 00:46:32,000
What did I do incorrectly?

992
00:46:32,000 --> 00:46:35,000
Unary minus applied to unsigned type up?

993
00:46:35,000 --> 00:46:38,200
Sorry, certainly, make that a sign type.

994
00:46:38,400 --> 00:46:39,500
No need to be overzealous.

995
00:46:39,500 --> 00:46:40,000
There.

996
00:46:40,900 --> 00:46:43,800
Weren't user aversion from inch to real 32.

997
00:46:45,300 --> 00:46:48,800
Is the upper left X gives a real.

998
00:46:48,800 --> 00:46:52,200
So I will go ahead and make that a real as well.

999
00:46:53,000 --> 00:46:57,700
And it looks like that is

1000
00:46:58,500 --> 00:47:00,000
Yes, there we go.

1001
00:47:01,000 --> 00:47:01,400
Okay.

1002
00:47:02,100 --> 00:47:02,600
All right.

1003
00:47:03,200 --> 00:47:05,700
So I think that's basically everything and it looks like everything is

1004
00:47:05,700 --> 00:47:06,700
still working properly.

1005
00:47:06,700 --> 00:47:07,100
There.

1006
00:47:07,500 --> 00:47:09,400
No, no.

1007
00:47:09,400 --> 00:47:10,200
Oddities.

1008
00:47:10,600 --> 00:47:12,300
Everything still seems correct.

1009
00:47:12,300 --> 00:47:13,300
So, that's fine.

1010
00:47:13,900 --> 00:47:17,200
And now, what I want to do is go ahead and start to put start to make

1011
00:47:17,900 --> 00:47:20,000
well, I don't know if I'll quite start this yet.

1012
00:47:20,200 --> 00:47:21,300
Maybe we'll do it tomorrow.

1013
00:47:21,600 --> 00:47:23,900
But what I want to do is continue down the road of kind of cleaning up

1014
00:47:23,900 --> 00:47:24,300
this time.

1015
00:47:24,300 --> 00:47:26,700
I've stuff now that we have a notion of what those two things are.

1016
00:47:27,000 --> 00:47:28,200
I don't quite necessarily.

1017
00:47:28,300 --> 00:47:30,700
To use them yet because there's something that I think maybe we'll do

1018
00:47:30,900 --> 00:47:34,200
one step of the time that compression first that we haven't quite

1019
00:47:34,200 --> 00:47:36,600
finished yet and then we will come back to it.

1020
00:47:36,600 --> 00:47:40,100
So I think I got time to do this in seven minutes left.

1021
00:47:40,100 --> 00:47:41,600
Well, actually we started five minutes late.

1022
00:47:41,600 --> 00:47:43,600
So technically we've got about 12 minutes left.

1023
00:47:44,100 --> 00:47:48,000
So we're going to do these and I'll actually put it to do here to to

1024
00:47:48,000 --> 00:47:52,700
do begin using tile side in meters.

1025
00:47:54,600 --> 00:47:55,000
Okay.

1026
00:47:56,500 --> 00:47:59,600
So what I'd like to do here is basically

1027
00:48:01,800 --> 00:48:05,600
You know, looking at these two things and thinking about the bit.

1028
00:48:05,600 --> 00:48:08,200
I think I mentioned on the previous stream because we were right in

1029
00:48:08,200 --> 00:48:09,400
the middle of working with them.

1030
00:48:09,700 --> 00:48:13,700
I mentioned that I didn't really love, you know, and I have this to do

1031
00:48:13,700 --> 00:48:13,900
here.

1032
00:48:13,900 --> 00:48:15,400
These are still in pixels.

1033
00:48:15,600 --> 00:48:17,900
This kind of was the foreshadowing of the thing that we were kind of

1034
00:48:17,900 --> 00:48:18,500
introduced here.

1035
00:48:18,700 --> 00:48:21,500
So, I know that these things I kind of don't want to be in pixels

1036
00:48:21,500 --> 00:48:23,000
anymore for chemical positions.

1037
00:48:23,000 --> 00:48:26,000
I already kind of said that so I want to start moving to real world

1038
00:48:26,000 --> 00:48:29,400
units for our offsets, but you notice we have these two numbers here.

1039
00:48:29,500 --> 00:48:29,800
We've got the

1040
00:48:30,000 --> 00:48:33,000
The tile Map X, the tile map, Y, and the tile X, and the tile, why?

1041
00:48:33,200 --> 00:48:33,700
Right?

1042
00:48:37,000 --> 00:48:42,100
So, what can we say about these values?

1043
00:48:42,800 --> 00:48:45,400
I was saying before that, like, I've got this raw position.

1044
00:48:45,400 --> 00:48:49,500
The raw position was basically a tile Map X and Y, which is some index

1045
00:48:49,500 --> 00:48:52,900
into which of the tilemap portions were having remember just to give

1046
00:48:52,900 --> 00:48:57,300
you a refresher just for folks who you know, maybe forgot from last

1047
00:48:57,300 --> 00:48:57,700
dream.

1048
00:48:57,900 --> 00:49:00,700
We've got this is the setup that we've got here, right?

1049
00:49:01,100 --> 00:49:03,300
We have a game board.

1050
00:49:03,300 --> 00:49:04,700
Oops a game board that

1051
00:49:04,900 --> 00:49:06,600
It looks like this, right?

1052
00:49:06,600 --> 00:49:09,400
You saw me walking around it earlier on the stream.

1053
00:49:10,400 --> 00:49:15,400
All right, doo-doo-doo-doo-doo doo-doo-doo-doo doo-doo-doo-doo.

1054
00:49:15,800 --> 00:49:16,300
There we go.

1055
00:49:17,100 --> 00:49:20,100
So basically you saw us walking around this, right?

1056
00:49:20,200 --> 00:49:21,300
This is a tile map.

1057
00:49:21,300 --> 00:49:24,000
This is a tile map and so on and we had court made coordinates for

1058
00:49:24,000 --> 00:49:24,300
these.

1059
00:49:24,300 --> 00:49:26,000
We'd said like this was 0 0.

1060
00:49:26,000 --> 00:49:27,100
This was 10.

1061
00:49:27,100 --> 00:49:30,500
This was 0 1 and this was 11 right?

1062
00:49:30,500 --> 00:49:32,100
For the tile, map that we were on.

1063
00:49:32,300 --> 00:49:34,700
And then inside there, we had additional things.

1064
00:49:34,800 --> 00:49:38,900
Where each tile was the num numerated as well with with the, you know,

1065
00:49:38,900 --> 00:49:40,000
with the coordinate system, right?

1066
00:49:40,000 --> 00:49:41,700
We kind of kept doing all these numberings.

1067
00:49:42,900 --> 00:49:46,100
And so, what I wanted to do is I wanted to say because this is

1068
00:49:46,100 --> 00:49:48,300
something that I saw as we were working on it, but we didn't have time

1069
00:49:48,300 --> 00:49:48,600
to do it.

1070
00:49:48,600 --> 00:49:49,100
Last time.

1071
00:49:49,400 --> 00:49:53,800
What I want to do here is I want to say, why do we need two separate

1072
00:49:53,800 --> 00:49:55,400
sets of indices, right?

1073
00:49:55,500 --> 00:49:59,400
Why do I need the tile Map X and Y and the tile X tile why?

1074
00:49:59,500 --> 00:50:00,100
Right?

1075
00:50:00,600 --> 00:50:06,100
Since I know already right that we're going to have a fixed number per

1076
00:50:06,100 --> 00:50:08,900
tile map there since I and even if we weren't, let's late.

1077
00:50:08,900 --> 00:50:10,300
Let's put that aside for a second.

1078
00:50:11,200 --> 00:50:14,800
Why can't I just have an integer for all the tiles in the world?

1079
00:50:14,900 --> 00:50:15,300
Right?

1080
00:50:15,300 --> 00:50:17,700
Just, you know, one integer for all the tiles in the world.

1081
00:50:18,000 --> 00:50:22,900
So one integer for x 1 integer for y and then whichever tilemap you're

1082
00:50:22,900 --> 00:50:27,200
in is basically just looking at that value and taking off say the High

1083
00:50:27,200 --> 00:50:28,100
bits of it, right?

1084
00:50:28,100 --> 00:50:30,800
It just looking at whatever the higher order part of it is.

1085
00:50:31,000 --> 00:50:31,300
Right?

1086
00:50:31,300 --> 00:50:32,100
Does that make sense?

1087
00:50:38,000 --> 00:50:43,200
So, you know, to map a tile X or a tile Y into a particular tile map.

1088
00:50:43,700 --> 00:50:47,700
Basically, all we're doing is we're sort of saying, okay, let's go

1089
00:50:47,700 --> 00:50:49,500
ahead and and page.

1090
00:50:50,000 --> 00:50:53,000
I mean, really what I'm saying is, Let's Make a virtual memory system

1091
00:50:53,000 --> 00:50:53,900
for our Tom apps.

1092
00:50:54,000 --> 00:50:59,800
Let's just have a single 32-bit value for the X and a single 32-bit.

1093
00:51:00,000 --> 00:51:06,200
Value for the Y that is the the individual tile and all the tiles in

1094
00:51:06,200 --> 00:51:06,500
the world.

1095
00:51:06,500 --> 00:51:09,700
So we have four billion by four billion is the maximum size we could

1096
00:51:09,700 --> 00:51:13,100
support which seems like a pretty reasonable size to support at

1097
00:51:13,100 --> 00:51:13,700
maximum.

1098
00:51:15,000 --> 00:51:15,300
Right.

1099
00:51:15,300 --> 00:51:17,000
That's what did we say?

1100
00:51:17,000 --> 00:51:18,900
Our size was 1.4 meters.

1101
00:51:19,900 --> 00:51:28,000
So 1.4 meters times 4 billion, right?

1102
00:51:28,200 --> 00:51:31,500
Is that many meters so that many meters.

1103
00:51:35,000 --> 00:51:39,500
I guess I'll copy that circumference of the Earth.

1104
00:51:41,900 --> 00:51:46,000
In meters, so that's the circumference of the earth.

1105
00:51:46,100 --> 00:51:47,500
Well actually see here.

1106
00:51:47,500 --> 00:51:49,100
Can I get that in kilometers?

1107
00:51:49,100 --> 00:51:53,100
So six-figure, 40 million, 40 million meters if you to walk all the

1108
00:51:53,100 --> 00:51:54,100
way around the earth.

1109
00:51:54,300 --> 00:51:57,000
And this is how many meters we could support, which is more than that.

1110
00:51:57,100 --> 00:52:01,500
So we can basically support an entire Earth's worth of geometry, which

1111
00:52:01,500 --> 00:52:04,100
seems like plenty for our purposes.

1112
00:52:04,400 --> 00:52:07,600
So if we do a 32 bit of X and a 32-bit, why?

1113
00:52:07,600 --> 00:52:08,100
Right?

1114
00:52:08,900 --> 00:52:14,300
What I'm basically saying is, let's go ahead and imagine that 32 bits

1115
00:52:14,500 --> 00:52:19,200
is broken up into, you know, pieces of some kind like chunks

1116
00:52:19,200 --> 00:52:22,000
basically, right where we basically say.

1117
00:52:22,000 --> 00:52:22,500
Okay?

1118
00:52:22,700 --> 00:52:23,600
The bottom.

1119
00:52:23,600 --> 00:52:26,200
Let's say the bottom four bits, right?

1120
00:52:26,200 --> 00:52:28,400
So that's 16 or something.

1121
00:52:28,900 --> 00:52:34,500
The bottom four bits in the top, twenty eight bits or something like

1122
00:52:34,500 --> 00:52:38,500
that are going to be separated in these numbers and the

1123
00:52:38,700 --> 00:52:43,800
Bottom 4 bits Will Tell Us Where in a chunk we are right.

1124
00:52:44,400 --> 00:52:50,600
And the top Ones Will Tell Us Where in the tile map where when the

1125
00:52:50,600 --> 00:52:52,000
indices of the tile map, we are.

1126
00:52:52,100 --> 00:52:56,000
So this part tells us the tilemap index and this part will tell us

1127
00:52:56,500 --> 00:52:58,800
which tile we are in a particular tile map.

1128
00:52:58,800 --> 00:52:59,400
Right?

1129
00:52:59,900 --> 00:53:03,200
Basically, what I'm doing is I'm packing the two numbers that we had

1130
00:53:03,200 --> 00:53:06,900
before into one number and just segregating it by the bit amount.

1131
00:53:06,900 --> 00:53:07,600
Right now.

1132
00:53:07,600 --> 00:53:08,500
You're going to say

1133
00:53:08,700 --> 00:53:10,900
When you first see it, you're gonna like, wait a minute, Casey though.

1134
00:53:11,000 --> 00:53:12,400
How is that going to work?

1135
00:53:12,400 --> 00:53:15,500
Because if you remember what we did before, when we were drawing a

1136
00:53:15,500 --> 00:53:19,800
tile map, right on the screen, we basically had time upcoming textile

1137
00:53:19,800 --> 00:53:20,400
map count.

1138
00:53:20,400 --> 00:53:22,000
Why that said how big these Thomas?

1139
00:53:22,000 --> 00:53:25,200
I was 17 by 9 and there's ain't no way.

1140
00:53:25,300 --> 00:53:29,100
You're going to get some number of bits down here to be 17, right

1141
00:53:29,100 --> 00:53:29,200
there.

1142
00:53:29,200 --> 00:53:32,200
You going to be 16 or 32 and there ain't gonna be no 9 was going to be

1143
00:53:32,200 --> 00:53:33,400
either 8 or 16.

1144
00:53:33,500 --> 00:53:35,100
So what gives right?

1145
00:53:35,100 --> 00:53:37,200
And that's a totally valid question to ask me.

1146
00:53:37,200 --> 00:53:38,400
I'm very glad you did.

1147
00:53:39,000 --> 00:53:40,300
How did I scroll like that?

1148
00:53:40,300 --> 00:53:41,100
I don't know what happened there.

1149
00:53:41,400 --> 00:53:42,500
I'm very glad you did.

1150
00:53:43,200 --> 00:53:48,100
What I'm basically proposing is that we no longer think about the

1151
00:53:48,100 --> 00:53:50,800
screen that is being displayed.

1152
00:53:51,400 --> 00:53:52,900
As the tilemap.

1153
00:53:53,600 --> 00:53:58,600
The tile map is just going to be a chunk that we can reference and

1154
00:53:58,600 --> 00:53:59,200
store.

1155
00:54:00,000 --> 00:54:04,000
What a screen will just be a view that could be viewing multiple tile

1156
00:54:04,000 --> 00:54:05,000
maps at once.

1157
00:54:05,200 --> 00:54:05,800
Right?

1158
00:54:05,900 --> 00:54:10,100
So for example, if our tile maps are 16 by 16, right?

1159
00:54:10,300 --> 00:54:14,600
Then basically we will have one tile map that covers essentially this

1160
00:54:14,600 --> 00:54:16,700
much, you know, of are displayed area.

1161
00:54:16,700 --> 00:54:18,900
And then another one that covers that much or whatever.

1162
00:54:18,900 --> 00:54:22,900
And when we look at a screen will just reference to tile Maps, right?

1163
00:54:23,900 --> 00:54:24,600
No, big deal.

1164
00:54:24,800 --> 00:54:26,000
Very, very straightforward.

1165
00:54:26,500 --> 00:54:29,600
So that's essentially what I would like to do is make it so that we

1166
00:54:29,600 --> 00:54:29,900
can

1167
00:54:30,000 --> 00:54:33,600
Can go ahead and do do that sort of.

1168
00:54:35,200 --> 00:54:37,000
Do that sort of packing, if that makes sense.

1169
00:54:37,700 --> 00:54:41,100
So, alright, if they, if we've run out of time for today.

1170
00:54:41,400 --> 00:54:44,400
Then this may be the time when I've done the least of know, I guess

1171
00:54:44,400 --> 00:54:47,100
one other time, I talked basically, if the entire stream was gonna

1172
00:54:47,100 --> 00:54:49,600
say, this may be the stream where we got the least actual programming

1173
00:54:49,600 --> 00:54:52,100
done, but I've tried explain to you what we were actually going to do.

1174
00:54:52,100 --> 00:54:52,900
So, okay.

1175
00:54:53,200 --> 00:54:53,900
I'm just going to fight.

1176
00:54:53,900 --> 00:54:55,800
I'm just gonna say that one more time, so that tomorrow, we can

1177
00:54:55,800 --> 00:54:57,400
basically start directly on it.

1178
00:54:58,000 --> 00:55:01,700
So, what we want to do now that we've talked all about all of this

1179
00:55:01,700 --> 00:55:03,400
stuff quite a bit.

1180
00:55:04,000 --> 00:55:08,100
Is I want to basically take these values and I want to collapse them

1181
00:55:08,100 --> 00:55:08,700
into one.

1182
00:55:08,700 --> 00:55:09,400
Right?

1183
00:55:09,400 --> 00:55:15,400
So what I want to do tomorrow is I want to say, take the tile Map X

1184
00:55:15,400 --> 00:55:25,800
and Y and the tile X and Y and pack them into single 32-bit values for

1185
00:55:25,800 --> 00:55:32,800
X and Y, where there is some low bits for the tile index.

1186
00:55:34,000 --> 00:55:39,400
The High bits are the tile page, right?

1187
00:55:39,500 --> 00:55:42,300
And basically what we're doing here is we're constructing essentially

1188
00:55:42,300 --> 00:55:45,800
a virtual memory system, exactly, like the kind that you would see for

1189
00:55:45,800 --> 00:55:46,700
just regular memory.

1190
00:55:46,700 --> 00:55:49,900
Only instead of it being a 1D thing, like memory is its 2D.

1191
00:55:50,000 --> 00:55:52,500
We're basically just making a 2d virtual memory system.

1192
00:55:52,700 --> 00:55:53,200
Right?

1193
00:55:53,600 --> 00:55:58,400
All we're doing is we're saying we have some gigantic world, right?

1194
00:55:58,700 --> 00:56:02,600
That's four billion by four billion across, right?

1195
00:56:03,100 --> 00:56:03,700
And we

1196
00:56:03,900 --> 00:56:06,100
Want to break that up into chunks, right?

1197
00:56:06,100 --> 00:56:07,600
And I'm thinking those chunks.

1198
00:56:07,600 --> 00:56:08,600
Maybe you'll be 16 by 16.

1199
00:56:08,600 --> 00:56:10,400
Maybe they'll be 64 by 64.

1200
00:56:10,400 --> 00:56:11,300
Who knows?

1201
00:56:11,300 --> 00:56:13,700
We'll talk about the reasons to make different sizes.

1202
00:56:13,700 --> 00:56:15,500
But basically will break those into chunks.

1203
00:56:15,500 --> 00:56:21,000
And those chunks will be something like 16 by 16 and then whatever we

1204
00:56:21,000 --> 00:56:24,900
want our games display to be however, big we want it to be in tiles,

1205
00:56:24,900 --> 00:56:29,900
will just grab out that portion of it and display that as the tile

1206
00:56:29,900 --> 00:56:30,100
map.

1207
00:56:30,100 --> 00:56:33,600
So instead of the screen and the and the storage,

1208
00:56:34,000 --> 00:56:34,500
In the same.

1209
00:56:34,500 --> 00:56:38,300
We're just going to split those up into two pages.

1210
00:56:38,500 --> 00:56:41,700
And again, you may ask, why do I just store a giant for a billion by 4

1211
00:56:41,700 --> 00:56:43,600
billion array for my tiles?

1212
00:56:43,600 --> 00:56:46,300
Well, that would never that's too much.

1213
00:56:46,300 --> 00:56:49,300
It's too large for a billion times 4 billion would never fit in

1214
00:56:49,300 --> 00:56:50,800
memory, not even close.

1215
00:56:51,300 --> 00:56:52,900
It would be absolutely massive.

1216
00:56:53,800 --> 00:56:58,900
So what we're going to do instead is we're only going to will show how

1217
00:56:58,900 --> 00:56:59,700
to do this later.

1218
00:57:00,400 --> 00:57:02,700
You know, as soon as we get this stuff working, we can actually go

1219
00:57:02,700 --> 00:57:04,700
ahead and do the stuff the stories.

1220
00:57:04,700 --> 00:57:06,900
But basically what we're going to do is we're only going to store the

1221
00:57:06,900 --> 00:57:09,900
places where the world actually exists.

1222
00:57:10,100 --> 00:57:14,100
So as the world kind of snakes, its way through various pieces.

1223
00:57:14,200 --> 00:57:17,300
We're only going to store Pages where there's actually data and that

1224
00:57:17,300 --> 00:57:21,800
way it'll be nice and sparse and we won't have to store a 4 billion by

1225
00:57:21,800 --> 00:57:24,900
4 billion worlds, which of course, you could never actually store.

1226
00:57:25,200 --> 00:57:28,300
Okay, so I want to do that and turn it into a paging thing.

1227
00:57:28,300 --> 00:57:29,300
So that's one thing.

1228
00:57:30,000 --> 00:57:31,300
I think we'll be able to do that tomorrow.

1229
00:57:31,600 --> 00:57:33,500
They'll probably take the whole day tomorrow, but we can probably do

1230
00:57:33,500 --> 00:57:34,000
it tomorrow.

1231
00:57:35,000 --> 00:57:37,200
And then the next step, because the things that I've talked about

1232
00:57:37,200 --> 00:57:40,000
earlier today is to be got to fix these tile relative things.

1233
00:57:40,000 --> 00:57:42,600
So we're going to compress those two guys down, but then these tile

1234
00:57:42,600 --> 00:57:43,300
relative things.

1235
00:57:43,900 --> 00:57:45,300
What I want these guys to be.

1236
00:57:46,600 --> 00:57:54,500
Bright is, I want these guys to be convert these to math friendly

1237
00:57:54,900 --> 00:58:04,800
resolution independent representations of world units, relative to a

1238
00:58:04,800 --> 00:58:05,300
tile.

1239
00:58:05,600 --> 00:58:06,200
Right?

1240
00:58:06,600 --> 00:58:09,800
And so basically these are going to be now they're going to be in

1241
00:58:09,800 --> 00:58:14,900
those units that we talked about before, which is the the tile side in

1242
00:58:14,900 --> 00:58:15,400
pixels.

1243
00:58:15,700 --> 00:58:15,800
So

1244
00:58:16,000 --> 00:58:18,600
See, what we're going to do is we're going to convert these canonical

1245
00:58:18,600 --> 00:58:20,100
positions over to something.

1246
00:58:20,100 --> 00:58:20,900
That's nice and clean.

1247
00:58:20,900 --> 00:58:24,100
It can be used as a virtual index into a giant tile store that stores

1248
00:58:24,100 --> 00:58:25,600
as much space.

1249
00:58:25,600 --> 00:58:29,800
As we want for Tau Maps, we're going to be able to do a nice sort of,

1250
00:58:31,000 --> 00:58:34,800
you know, math friendly resolution independent movement of things

1251
00:58:34,900 --> 00:58:36,200
relative to the tiles.

1252
00:58:36,200 --> 00:58:37,000
So that will organize.

1253
00:58:37,000 --> 00:58:40,000
And then we can also get rid of this raw position because again, we

1254
00:58:40,000 --> 00:58:44,500
won't ever have to think again about things in terms of those pixels

1255
00:58:44,500 --> 00:58:45,000
the way that we were.

1256
00:58:45,000 --> 00:58:45,800
So we'll just

1257
00:58:45,900 --> 00:58:49,500
or everything as the kanak positions and we'll get rid of these and

1258
00:58:49,500 --> 00:58:52,700
that will make our town map that will start to get our Tom up into

1259
00:58:52,700 --> 00:58:53,800
really good shape.

1260
00:58:54,000 --> 00:58:58,200
Something that we can really start to think about being sort of a

1261
00:58:58,200 --> 00:59:00,500
quality system that we're going to be able to use.

1262
00:59:00,500 --> 00:59:05,300
And again, what we will do to down here again, instead of this thing,

1263
00:59:05,300 --> 00:59:06,700
looping over a tile map.

1264
00:59:06,700 --> 00:59:09,800
This thing will actually just Loop over towels and pull the tiles out

1265
00:59:09,800 --> 00:59:13,600
of of that sort of virtual store once we build it.

1266
00:59:13,700 --> 00:59:15,800
So, so that is what we'll do tomorrow, but

1267
00:59:15,900 --> 00:59:20,900
With with, without taking up too much, more time from the Q&A.

1268
00:59:20,900 --> 00:59:27,000
I will close this and I will say, let us go to the Q&A here.

1269
00:59:27,000 --> 00:59:35,900
If you could, please prefix your questions with q: and keep them to

1270
00:59:35,900 --> 00:59:38,000
things that we've done today or in previous day's.

1271
00:59:38,000 --> 00:59:42,800
Because if you want to ask questions about sort of off topic stuff,

1272
00:59:42,800 --> 00:59:45,800
you could always do that by coming to earlier in the

1273
00:59:45,900 --> 00:59:49,000
Dream basically, before the before, the scheduled start time, like

1274
00:59:49,300 --> 00:59:50,100
8:00 p.m.

1275
00:59:50,100 --> 00:59:53,900
If you come at like 7:45, I am usually on the stream early and I

1276
00:59:53,900 --> 00:59:57,400
filled questions about whatever you want, but during the official q

1277
00:59:57,400 --> 00:59:59,700
and A's, I like to keep it on topic as much as possible.

1278
01:00:02,600 --> 01:00:03,600
Let's see.

1279
01:00:05,000 --> 01:00:06,500
We'll be making a map editor.

1280
01:00:06,500 --> 01:00:09,600
Not really because this is a procedurally generated game.

1281
01:00:10,200 --> 01:00:14,900
So you can't really have a map editor if you have to generate

1282
01:00:14,900 --> 01:00:15,900
everything procedurally.

1283
01:00:23,800 --> 01:00:24,900
Let's see.

1284
01:00:25,600 --> 01:00:26,700
Too fast floor.

1285
01:00:26,700 --> 01:00:27,800
Where you talking about?

1286
01:00:27,900 --> 01:00:29,800
I equals n TF P.

1287
01:00:30,300 --> 01:00:36,900
If I greater than FBI - - well, so not really like

1288
01:00:39,300 --> 01:00:42,500
Well, so let me show you first of all.

1289
01:00:44,500 --> 01:00:47,300
Sort of this is not necessarily what I'm thinking about for fast

1290
01:00:47,300 --> 01:00:50,000
floor, but let me see if I can show you.

1291
01:00:50,000 --> 01:00:55,400
There's a store instruction that I was thinking of in sse4 as well.

1292
01:00:55,400 --> 01:00:58,600
That would be sort of the one-step way to do it.

1293
01:00:58,700 --> 01:01:00,000
So Jimmy,

1294
01:01:01,700 --> 01:01:03,100
let's see.

1295
01:01:05,200 --> 01:01:05,600
Oops.

1296
01:01:05,900 --> 01:01:06,600
I wanted floor.

1297
01:01:06,600 --> 01:01:07,200
Not ceiling.

1298
01:01:10,300 --> 01:01:14,100
So in sse4, which I don't know if we should use or not because I'm not

1299
01:01:14,100 --> 01:01:16,100
sure how many machines have sse4.

1300
01:01:16,100 --> 01:01:17,700
I don't know what kind of coverage we get.

1301
01:01:19,000 --> 01:01:26,000
But basically if you, if you there's this round PS function that

1302
01:01:26,700 --> 01:01:30,400
actually can do all four different types of rounding.

1303
01:01:30,700 --> 01:01:34,300
Let me see if it's got the documentation for that here.

1304
01:01:36,300 --> 01:01:37,700
Kind of slow, kind of Pokey.

1305
01:01:38,900 --> 01:01:42,800
Flog them hamsters flog them all the hamsters on the Azure Cloud right

1306
01:01:42,800 --> 01:01:43,000
now.

1307
01:01:43,000 --> 01:01:44,500
Run, run faster.

1308
01:01:44,700 --> 01:01:44,900
Okay.

1309
01:01:44,900 --> 01:01:45,300
There we go.

1310
01:01:46,000 --> 01:01:48,500
So if you take a look at this instruction, that's an S SE for.

1311
01:01:48,500 --> 01:01:50,900
This is one if we had us as before I just use it.

1312
01:01:51,300 --> 01:01:56,200
But so I, when I was saying about sse2, I was thinking more like,

1313
01:01:56,200 --> 01:01:56,400
okay.

1314
01:01:56,400 --> 01:01:58,800
What are we going to Cobble together to make it work?

1315
01:01:58,800 --> 01:02:02,500
Relatively well in Assisi to but, you know, point being

1316
01:02:03,500 --> 01:02:06,800
Because we could do like fraction extraction or their stuff I can do

1317
01:02:06,800 --> 01:02:08,400
anyway, ignoring that for a second.

1318
01:02:08,900 --> 01:02:12,400
This is like the Uber example of what I wanted.

1319
01:02:12,700 --> 01:02:16,800
You can do an M&M round PS and that will basically take a floating

1320
01:02:16,800 --> 01:02:21,400
Point values and it will round them using whatever mode you want.

1321
01:02:21,500 --> 01:02:22,100
Right?

1322
01:02:22,400 --> 01:02:26,000
And so you can do all sorts of nice rounding with that.

1323
01:02:26,000 --> 01:02:27,900
You can do a floor, right?

1324
01:02:27,900 --> 01:02:32,400
You can do a seal, you can do truncation, you can do rounding, and you

1325
01:02:32,400 --> 01:02:33,100
can say whether

1326
01:02:33,200 --> 01:02:36,100
You want to go towards negative infinity or positive Infinity?

1327
01:02:36,100 --> 01:02:36,300
Right?

1328
01:02:36,300 --> 01:02:40,500
So you can, you can construct the round that you actually wanted to be

1329
01:02:40,500 --> 01:02:42,400
a floor to be a ceiling or to be whatever.

1330
01:02:42,500 --> 01:02:44,000
So that's like the perfect instruction.

1331
01:02:44,000 --> 01:02:47,000
That's the one you wish that they would have just had to begin with,

1332
01:02:47,200 --> 01:02:48,500
but unfortunately, never did.

1333
01:02:49,300 --> 01:02:53,600
So, what I wanted to know is basically what is the shortest set of

1334
01:02:53,600 --> 01:02:59,000
sse2 instructions that I could do to emulate that for our purposes.

1335
01:02:59,000 --> 01:02:59,500
Now,

1336
01:03:00,000 --> 01:03:04,200
It turns out that actually we can do something a little bit more

1337
01:03:04,200 --> 01:03:07,700
clever that I was going to get that will eliminate the need for floor

1338
01:03:07,700 --> 01:03:10,000
in this particular case and I'll add a thing here.

1339
01:03:18,000 --> 01:03:21,900
We can actually just use truncate for our purposes because once we

1340
01:03:21,900 --> 01:03:25,000
have this stuff packed, we won't need - offsets anymore.

1341
01:03:27,000 --> 01:03:30,400
So it's a little anticlimactic either way, but we probably will need

1342
01:03:30,400 --> 01:03:31,800
floor for other things as well.

1343
01:03:31,800 --> 01:03:38,000
So point being, I'd like to go through and get a good feel for, what's

1344
01:03:38,000 --> 01:03:41,400
the easiest way to do an sse2, you know, into bucket thing.

1345
01:03:42,200 --> 01:03:45,500
And, you know, I might have to ask some folks who are better at SSC

1346
01:03:45,500 --> 01:03:47,300
stuff, because I forget it.

1347
01:03:47,500 --> 01:03:50,000
Hey Jude in when I do have to see and then I paid it out immediately

1348
01:03:50,100 --> 01:03:52,400
and I forget what they are about the rant to study up.

1349
01:03:58,800 --> 01:04:01,900
Recursive anomaly, have you considered only storing the changes made

1350
01:04:01,900 --> 01:04:04,000
and then just regenerating everything else from seed instead of

1351
01:04:04,000 --> 01:04:04,900
storing it all.

1352
01:04:05,800 --> 01:04:07,500
So, that's an interesting.

1353
01:04:07,500 --> 01:04:09,700
So what you're talking about is

1354
01:04:13,200 --> 01:04:15,300
so let me talk a little about that because actually interesting

1355
01:04:15,300 --> 01:04:15,700
question.

1356
01:04:15,700 --> 01:04:19,800
So what he's basically asking or she I suppose I guess I don't know

1357
01:04:19,800 --> 01:04:20,600
the gender of anyone.

1358
01:04:20,600 --> 01:04:27,300
What do the the questioner is asking is, you know, do we have to

1359
01:04:27,300 --> 01:04:31,900
actually store everything or can we generate stuff from seed values?

1360
01:04:32,000 --> 01:04:32,600
Right?

1361
01:04:32,900 --> 01:04:36,800
And so when we go into a new page, when we go into a new part of the

1362
01:04:36,800 --> 01:04:39,900
world, can we just generate it from seed and then we can press it.

1363
01:04:39,900 --> 01:04:42,400
And I believe Minecraft works that way.

1364
01:04:45,100 --> 01:04:49,200
And then just re compresses and stores the world that after you change

1365
01:04:49,200 --> 01:04:49,700
it.

1366
01:04:50,100 --> 01:04:51,100
It only stores blocks.

1367
01:04:51,100 --> 01:04:51,800
If you change them.

1368
01:04:51,800 --> 01:04:52,300
I don't know.

1369
01:04:52,800 --> 01:04:56,200
There's games that work that way and there's two reasons why I don't

1370
01:04:56,200 --> 01:04:57,300
like that solution.

1371
01:04:57,800 --> 01:04:59,900
The first reason I don't like that solution as I feel like it

1372
01:04:59,900 --> 01:05:04,000
generates worlds that are kind of boring like worlds that can be

1373
01:05:04,000 --> 01:05:09,000
generated per page by a seed look like they were generated per page by

1374
01:05:09,000 --> 01:05:09,700
a seed.

1375
01:05:10,200 --> 01:05:13,500
And so I am more interested in creating worlds that are a lot more

1376
01:05:13,500 --> 01:05:14,400
creative than that.

1377
01:05:14,400 --> 01:05:14,700
And in

1378
01:05:14,900 --> 01:05:20,100
All things that would be much too expensive to create in a way that

1379
01:05:20,100 --> 01:05:23,900
will allow you to create them from a seed on a page basis, without an

1380
01:05:23,900 --> 01:05:25,400
extraordinary amount of work.

1381
01:05:26,000 --> 01:05:29,400
So I don't think I want it for that reason, but there's another reason

1382
01:05:29,400 --> 01:05:30,300
I don't like that idea.

1383
01:05:30,300 --> 01:05:34,500
And the reason that I don't like that idea is because I don't actually

1384
01:05:34,500 --> 01:05:35,800
think that it's a good up.

1385
01:05:36,200 --> 01:05:37,600
It doesn't have performance.

1386
01:05:37,600 --> 01:05:42,500
Levering, leveling characteristics, which is to say that, let's say

1387
01:05:42,500 --> 01:05:44,700
that you're like, oh, well, I can be more efficient.

1388
01:05:44,800 --> 01:05:46,500
By just not ever storing this.

1389
01:05:46,500 --> 01:05:50,000
And then when someone comes in here and does, if the world gets

1390
01:05:50,000 --> 01:05:52,700
modified in some way, then I'll write it back out.

1391
01:05:52,700 --> 01:05:55,200
Only if that happens, right?

1392
01:05:55,200 --> 01:05:59,000
The thing that I don't like very much about that is, what?

1393
01:05:59,000 --> 01:05:59,100
What?

1394
01:06:00,000 --> 01:06:02,800
That really doing assuming that the user does go through and do lots

1395
01:06:02,800 --> 01:06:03,800
of changes to the world.

1396
01:06:03,800 --> 01:06:06,000
Then you end up back in the state that you would have been if you were

1397
01:06:06,000 --> 01:06:06,800
just storing it.

1398
01:06:07,000 --> 01:06:07,500
Right?

1399
01:06:08,600 --> 01:06:11,300
And so I'm not sure where the benefit comes if it's just to sort of

1400
01:06:11,300 --> 01:06:16,300
save to spread computation time out, then maybe that's something.

1401
01:06:16,300 --> 01:06:18,600
But in general, it doesn't really save you any space.

1402
01:06:18,600 --> 01:06:22,200
If you assume the case where the user goes around doing as much stuff

1403
01:06:22,200 --> 01:06:24,200
as they can to the world, right?

1404
01:06:24,700 --> 01:06:29,000
So I don't see it being really that big of a win or even a win at all,

1405
01:06:29,000 --> 01:06:29,300
really.

1406
01:06:29,300 --> 01:06:29,900
It's sort of

1407
01:06:30,000 --> 01:06:31,600
thing that only saves space.

1408
01:06:31,600 --> 01:06:36,100
In the case of a world that the user isn't touching a lot of which

1409
01:06:36,100 --> 01:06:40,000
again, you know, isn't isn't perhaps quite so interesting.

1410
01:06:51,600 --> 01:07:01,300
So Sean McGrath suggest doing FP: fast, which is let's let's take a

1411
01:07:01,300 --> 01:07:01,500
look here.

1412
01:07:01,700 --> 01:07:03,300
Remember I was asking earlier on the stream.

1413
01:07:03,300 --> 01:07:08,300
I was like, can we get this guy to start outputting for that floor and

1414
01:07:08,300 --> 01:07:09,400
instruction.

1415
01:07:09,400 --> 01:07:13,300
I kind of wanted him to Output a better thing for floor.

1416
01:07:13,300 --> 01:07:16,100
Then it was outputting and I felt like the compiler.

1417
01:07:16,100 --> 01:07:18,400
Could have been doing a better job, but when we actually went and

1418
01:07:18,400 --> 01:07:21,500
looked, as you can see, it's it.

1419
01:07:21,600 --> 01:07:22,600
Still calling floor.

1420
01:07:22,600 --> 01:07:24,000
There's the call to floor right there.

1421
01:07:24,300 --> 01:07:30,100
So what I was hoping to do is basically to make it so that we could

1422
01:07:30,200 --> 01:07:32,800
have a compiler output, something a little more sensible.

1423
01:07:34,000 --> 01:07:37,100
Than this stuff that it is outputting at the moment.

1424
01:07:37,100 --> 01:07:44,100
And so the the commenter is suggesting to do FP fast.

1425
01:07:44,200 --> 01:07:46,100
First of all, let's see if that works.

1426
01:07:46,600 --> 01:07:48,100
See, if that has any effect there.

1427
01:07:48,300 --> 01:07:53,700
Go to disassembly, okay.

1428
01:07:55,000 --> 01:07:57,000
See, there it is.

1429
01:07:57,600 --> 01:07:58,600
Yes.

1430
01:07:59,400 --> 01:07:59,700
Yes.

1431
01:07:59,700 --> 01:08:00,000
Yes.

1432
01:08:00,000 --> 01:08:00,300
Yes.

1433
01:08:00,300 --> 01:08:00,900
Yes.

1434
01:08:01,200 --> 01:08:02,600
This is what we wanted.

1435
01:08:03,300 --> 01:08:07,300
This is much better now, you notice, we are not getting any more

1436
01:08:07,300 --> 01:08:08,200
floors.

1437
01:08:09,200 --> 01:08:10,400
Yes, thank you.

1438
01:08:10,500 --> 01:08:11,600
FP fast.

1439
01:08:11,700 --> 01:08:15,300
Remember are saying there's a way to like tell it not to do not to

1440
01:08:15,300 --> 01:08:16,700
have floating-point consistency.

1441
01:08:16,700 --> 01:08:17,899
So let's take a look at that as that.

1442
01:08:17,899 --> 01:08:19,700
That is the thing that we wanted right there.

1443
01:08:21,399 --> 01:08:22,700
P fast.

1444
01:08:22,700 --> 01:08:23,600
Thank you stream.

1445
01:08:23,600 --> 01:08:24,700
It's so nice having a stream.

1446
01:08:24,700 --> 01:08:25,700
You could just ask question.

1447
01:08:26,000 --> 01:08:29,600
You don't have to, you don't have to go digging through the

1448
01:08:29,600 --> 01:08:30,500
documentation.

1449
01:08:30,899 --> 01:08:36,700
So on msnbc's compiler, here is the way that you tell it not to worry

1450
01:08:36,700 --> 01:08:38,800
about adhering to the

1451
01:08:38,899 --> 01:08:41,399
Plus plus standard as much, okay?

1452
01:08:41,500 --> 01:08:41,800
Improves.

1453
01:08:41,800 --> 01:08:44,000
It gets to see a floating Point test for equality inequality by

1454
01:08:44,000 --> 01:08:46,399
disabling optimizations, that could change the Precision of floating

1455
01:08:46,399 --> 01:08:47,200
Point calculations.

1456
01:08:47,200 --> 01:08:50,600
That's the precise one and that's what it was on before, right?

1457
01:08:51,300 --> 01:08:56,600
Fast allows it to relax the rules for computations so that it can do

1458
01:08:56,600 --> 01:08:59,800
like things that might be less correct or less accurate.

1459
01:09:00,000 --> 01:09:02,100
The case of certain exceptional circumstance, except some

1460
01:09:02,100 --> 01:09:06,000
circumstances, it will just ignore those sorts of things.

1461
01:09:06,000 --> 01:09:06,500
Right?

1462
01:09:06,600 --> 01:09:10,000
And that's what we wanted, because I knew that I only needed to do the

1463
01:09:10,000 --> 01:09:14,800
floor, basically, the standard usage of Florida, just the basic

1464
01:09:14,800 --> 01:09:15,399
concept before.

1465
01:09:15,399 --> 01:09:18,800
I didn't need it to handle, you know, all sorts of special things.

1466
01:09:18,800 --> 01:09:19,300
Like, I don't know.

1467
01:09:19,300 --> 01:09:20,800
Do you normal numbers or who knows?

1468
01:09:21,200 --> 01:09:22,500
I didn't need to handle all things.

1469
01:09:22,500 --> 01:09:24,899
That the C++ spec may say that need to handle.

1470
01:09:25,100 --> 01:09:29,200
And so I was hoping that I could get it to go ahead and and generate a

1471
01:09:29,200 --> 01:09:29,800
fast floor.

1472
01:09:30,000 --> 01:09:33,200
Or because I know that I don't have any weird special requirements.

1473
01:09:33,200 --> 01:09:34,100
I don't have to adhere this.

1474
01:09:34,100 --> 01:09:34,500
He's back.

1475
01:09:34,500 --> 01:09:36,100
I just need a basic floor function.

1476
01:09:36,399 --> 01:09:40,100
And so that, that FP, fast is exactly what we needed to have that

1477
01:09:40,100 --> 01:09:40,500
happen.

1478
01:09:40,700 --> 01:09:43,300
And so, that's pretty awesome.

1479
01:09:43,500 --> 01:09:47,200
In fact, I wonder if that also will do the right thing for some of the

1480
01:09:47,200 --> 01:09:48,000
other functions.

1481
01:09:48,600 --> 01:09:53,899
Like, if I said something like here, if I say y equals sign.

1482
01:09:56,300 --> 01:10:01,600
You know, something like X, I don't know.

1483
01:10:02,400 --> 01:10:03,900
Let's take a look at what it does there.

1484
01:10:04,100 --> 01:10:08,200
I just want to see if I can what it would generate for other sorts of

1485
01:10:08,200 --> 01:10:08,700
stuff.

1486
01:10:10,400 --> 01:10:11,400
Let's take a look.

1487
01:10:12,300 --> 01:10:13,600
Let's take a look.

1488
01:10:17,900 --> 01:10:21,400
So no, so it'll still generate the call the sign.

1489
01:10:22,000 --> 01:10:25,000
So yeah, so that may not help us much.

1490
01:10:25,700 --> 01:10:26,600
Let's take a look.

1491
01:10:27,400 --> 01:10:27,900
Yeah.

1492
01:10:29,700 --> 01:10:30,100
Yeah.

1493
01:10:31,800 --> 01:10:36,200
Yeah, so, you know six of one half dozen of the other, you know, we

1494
01:10:36,200 --> 01:10:39,000
still got we it's it's better than nothing.

1495
01:10:39,100 --> 01:10:41,500
We're going to have to do some work still but but it's good to know

1496
01:10:41,500 --> 01:10:45,000
that we can get it to to do some of that stuff for us.

1497
01:10:45,000 --> 01:10:45,800
So that's pretty good.

1498
01:10:45,800 --> 01:10:50,600
I'm going to I'm going to leave that in a rem, their optimizations,

1499
01:10:50,600 --> 01:10:54,100
which has just so we can can remember that and don't have to look it

1500
01:10:54,100 --> 01:10:54,500
up again.

1501
01:10:55,000 --> 01:10:55,400
Thank you.

1502
01:10:55,400 --> 01:10:56,400
Sean McGrath.

1503
01:11:11,000 --> 01:11:12,500
I noticed the math Library.

1504
01:11:12,500 --> 01:11:15,500
All of the placeholder functions are in the for mint result, equals

1505
01:11:15,500 --> 01:11:16,600
Foo, return result.

1506
01:11:16,600 --> 01:11:20,100
What's the reason for making it that way instead of just return Foo.

1507
01:11:20,900 --> 01:11:24,500
So I believe what the person is asking is when I went and made the

1508
01:11:24,500 --> 01:11:25,500
intrinsics here.

1509
01:11:25,800 --> 01:11:27,400
Why am I doing it?

1510
01:11:27,400 --> 01:11:31,600
Why does it look like result equal something return result instead of

1511
01:11:31,600 --> 01:11:34,900
just making it be returned, the thing directly write.

1512
01:11:34,900 --> 01:11:40,100
Why isn't it just returned 8 and 2 FY X like why is it?

1513
01:11:40,200 --> 01:11:47,300
It, why isn't it that the reason is very mundane, but I think it's

1514
01:11:47,300 --> 01:11:48,400
still useful.

1515
01:11:48,700 --> 01:11:51,800
It's for the buggy is basically it.

1516
01:11:52,000 --> 01:11:53,400
So let me show you what I mean.

1517
01:11:53,400 --> 01:11:59,600
Let's say, for example, that I was to do it the other way, like I do

1518
01:11:59,600 --> 01:11:59,900
it like this.

1519
01:12:00,000 --> 01:12:00,400
Yes.

1520
01:12:04,200 --> 01:12:04,700
Right.

1521
01:12:05,200 --> 01:12:07,900
So there we have our floor function.

1522
01:12:08,100 --> 01:12:13,200
It is now operating kind of in the way that you were asking about.

1523
01:12:13,600 --> 01:12:18,000
And when I come in here, I'm in this function and I want to see what

1524
01:12:18,000 --> 01:12:18,600
it actually.

1525
01:12:18,600 --> 01:12:19,200
Computed.

1526
01:12:19,300 --> 01:12:20,100
What was the result?

1527
01:12:20,100 --> 01:12:24,100
That it computed and I hit F10 and you'll notice I can't see it

1528
01:12:24,100 --> 01:12:24,600
anywhere.

1529
01:12:24,800 --> 01:12:30,500
I can't see the actual value now, sometimes depending on the

1530
01:12:30,500 --> 01:12:33,300
circumstances you can use.

1531
01:12:34,100 --> 01:12:41,000
Whereas it here locals you can use this locals thing to basically say,

1532
01:12:41,400 --> 01:12:46,100
what is, you know, what is the result if that makes sense?

1533
01:12:49,300 --> 01:12:50,500
No, it's not locals.

1534
01:12:50,700 --> 01:12:52,000
Sorry, it's Auto.

1535
01:12:52,400 --> 01:12:52,600
Sorry.

1536
01:12:52,600 --> 01:12:54,200
I never, I almost never use these.

1537
01:12:54,200 --> 01:12:57,200
So, I'm a little behind on whether it's Autos.

1538
01:12:57,200 --> 01:12:57,600
Sorry.

1539
01:12:58,800 --> 01:12:59,800
So, sometimes you can use.

1540
01:12:59,800 --> 01:13:00,800
It depends on the debugger.

1541
01:13:01,000 --> 01:13:03,300
Sometimes you can use this Autos thing.

1542
01:13:03,600 --> 01:13:06,800
It will show you what the return value is here.

1543
01:13:07,000 --> 01:13:07,300
Right?

1544
01:13:07,300 --> 01:13:08,600
And so sometimes you can do that.

1545
01:13:09,100 --> 01:13:10,700
But sometimes the developer gets confused.

1546
01:13:10,700 --> 01:13:12,200
It doesn't show you that.

1547
01:13:12,300 --> 01:13:14,700
And also there's some developers that don't have that depending on

1548
01:13:14,700 --> 01:13:16,200
what platform you're on, right?

1549
01:13:16,300 --> 01:13:18,300
And so if you don't have that,

1550
01:13:18,600 --> 01:13:23,300
A debugger that has that capability then, basically, what I do is, I

1551
01:13:23,300 --> 01:13:29,300
just always write it to look like this, so that if you were to end up

1552
01:13:29,300 --> 01:13:34,600
on the, the final line of your of that function, you always have a

1553
01:13:34,600 --> 01:13:35,600
convenient variable.

1554
01:13:35,600 --> 01:13:38,700
You can just type into a Watchman do and it's always result as well.

1555
01:13:38,700 --> 01:13:41,000
So, I owe usually always named things results that I can just leave

1556
01:13:41,000 --> 01:13:42,700
result in the watch window.

1557
01:13:42,700 --> 01:13:45,300
And it's essentially always shows me the return value of everything

1558
01:13:46,900 --> 01:13:48,400
that is just a convenient way to make.

1559
01:13:48,500 --> 01:13:50,500
Sure that no matter what the bugger you're on.

1560
01:13:50,600 --> 01:13:52,000
If it can do anything at all.

1561
01:13:52,500 --> 01:13:55,300
You should still be able to see what the return what the actual

1562
01:13:55,300 --> 01:13:56,300
computed value is.

1563
01:13:56,600 --> 01:13:58,700
So that is why I do that.

1564
01:13:58,700 --> 01:14:01,900
It doesn't cost you anything because as soon as optimizations on at

1565
01:14:01,900 --> 01:14:04,900
all, any compiler will trivially optimize this out.

1566
01:14:04,900 --> 01:14:09,300
So you're not wasting any computing power here at all.

1567
01:14:10,200 --> 01:14:11,000
It's free.

1568
01:14:11,200 --> 01:14:13,200
It's one of the few things that really is truly free.

1569
01:14:13,800 --> 01:14:17,200
And so, you know, it's just a good thing to do for convenience.

1570
01:14:27,100 --> 01:14:29,400
Is it a little pre-emptive to be drilling down on intrinsics this

1571
01:14:29,400 --> 01:14:30,100
early and development?

1572
01:14:30,100 --> 01:14:32,100
Doesn't that kind of go against your rationing process?

1573
01:14:32,300 --> 01:14:36,800
Not really because we can't we're not supposed to be using any

1574
01:14:36,800 --> 01:14:37,300
Library.

1575
01:14:37,300 --> 01:14:40,800
So as soon as we start using something, it's time to sort of take a

1576
01:14:40,800 --> 01:14:41,500
look at it.

1577
01:14:41,900 --> 01:14:46,700
So again, I didn't do it before we started taking a look at it, but we

1578
01:14:46,700 --> 01:14:47,400
are using them.

1579
01:14:47,600 --> 01:14:50,600
And so the time to look at things on the stream is when we start using

1580
01:14:50,600 --> 01:14:50,800
them.

1581
01:14:50,800 --> 01:14:53,300
And so this is kind of a thing that shouldn't really be allowed this

1582
01:14:53,300 --> 01:14:54,100
math.h.

1583
01:14:54,200 --> 01:14:56,400
And so it's time for us to start taking a look at those.

1584
01:14:56,500 --> 01:14:58,800
Those at this point.

1585
01:14:58,800 --> 01:14:59,800
Now, we'll be able to

1586
01:15:00,000 --> 01:15:02,700
Of skirt it a little bit because we can actually get rid of the

1587
01:15:02,700 --> 01:15:03,700
flooring function.

1588
01:15:05,000 --> 01:15:07,700
Like I said, using some, because of the way that we're going to

1589
01:15:07,700 --> 01:15:08,300
refactor stuff.

1590
01:15:08,300 --> 01:15:11,000
But we're going to be wanting sine and cosine real soon.

1591
01:15:11,000 --> 01:15:14,400
And so the time for us to actually have to deal with this stuff is

1592
01:15:14,400 --> 01:15:15,800
actually fairly soon.

1593
01:15:16,700 --> 01:15:19,000
So, it doesn't go against my ratcheting process if I could push them

1594
01:15:19,000 --> 01:15:20,000
out to later, I would.

1595
01:15:20,000 --> 01:15:24,300
But the bottom line is, we have to call them and so floor, if we could

1596
01:15:24,300 --> 01:15:27,600
actually get rid of, but but sine X and cosine F, we're going to need

1597
01:15:27,600 --> 01:15:28,600
and we're going to need him soon.

1598
01:15:28,700 --> 01:15:29,100
So.

1599
01:15:48,400 --> 01:15:51,700
Is tile relative for the real 32 coordinates better than tile page

1600
01:15:51,700 --> 01:15:52,400
relative.

1601
01:15:55,800 --> 01:16:00,100
Hmm, so I am thinking, I mean, my assumption.

1602
01:16:05,500 --> 01:16:07,500
I mean, I guess the answer is sort of, I'm not sure.

1603
01:16:08,800 --> 01:16:13,300
I guess what I would say is I don't really know that it matters, which

1604
01:16:13,300 --> 01:16:14,100
one we pick.

1605
01:16:14,400 --> 01:16:19,800
I think they both might both roughly be the same but I suspect that

1606
01:16:19,800 --> 01:16:26,600
it's just easier to do it tile relative to the tile because relative

1607
01:16:26,600 --> 01:16:30,900
to the tile is always uniform everywhere.

1608
01:16:31,200 --> 01:16:36,100
Whereas relative to the tile map would not be like

1609
01:16:39,000 --> 01:16:41,300
I mean, well, I don't know.

1610
01:16:43,000 --> 01:16:44,500
I guess what I would say that is, I don't know.

1611
01:16:45,300 --> 01:16:47,000
I don't know which one of those would be better.

1612
01:16:47,000 --> 01:16:49,800
I can't think of a reason offhand.

1613
01:16:49,800 --> 01:16:53,100
Why why you couldn't do either one.

1614
01:16:53,600 --> 01:16:57,900
I can't think of a reason why you couldn't just use either of the two.

1615
01:17:04,000 --> 01:17:11,700
Yeah, so tile page Mount relative may be better or tile relative maybe

1616
01:17:11,700 --> 01:17:13,600
better tell map page there.

1617
01:17:13,600 --> 01:17:14,000
Okay.

1618
01:17:14,000 --> 01:17:17,800
So one reason we maybe would want to think about using it being

1619
01:17:17,800 --> 01:17:20,400
relative to the page would be because if we do things on page,

1620
01:17:20,400 --> 01:17:26,400
boundaries likes a sort of collision e things, maybe that invite.

1621
01:17:26,400 --> 01:17:29,100
Well, I don't, I don't know.

1622
01:17:29,100 --> 01:17:30,400
I really don't know.

1623
01:17:30,400 --> 01:17:34,000
Like I said, I haven't written tilemap games before most of

1624
01:17:34,000 --> 01:17:36,300
The stuff that I write is like, full 3d or whatever.

1625
01:17:37,800 --> 01:17:41,400
So, you know, it's a little bit of an exploratory process for me.

1626
01:17:41,400 --> 01:17:42,300
This time around.

1627
01:17:42,300 --> 01:17:44,900
I'm not qualified to say definitively.

1628
01:17:45,200 --> 01:17:45,600
Yes.

1629
01:17:45,600 --> 01:17:47,700
You should do it this way or you just know you should do it the other

1630
01:17:47,700 --> 01:17:48,000
way.

1631
01:17:48,600 --> 01:17:52,200
So I don't know, that's a very good question and I don't know which

1632
01:17:52,200 --> 01:17:53,100
answer is better.

1633
01:17:54,300 --> 01:17:55,000
If we're lucky.

1634
01:17:55,000 --> 01:17:57,100
We'll see as we start to do one.

1635
01:17:57,600 --> 01:17:59,800
That it either is nice or

1636
01:18:00,000 --> 01:18:01,900
Is it nice and is it nice in a way?

1637
01:18:01,900 --> 01:18:04,900
That would be better if we switched and then we could switch.

1638
01:18:05,600 --> 01:18:07,200
But but I don't know offhand.

1639
01:18:32,700 --> 01:18:35,900
Why not just store the player, XY coordinates in World coordinates and

1640
01:18:35,900 --> 01:18:38,900
determine which tile map until he's in by dividing modding.

1641
01:18:38,900 --> 01:18:41,300
So the reason for that is just float Precision.

1642
01:18:41,900 --> 01:18:44,300
I covered this actually on a previous dream.

1643
01:18:44,300 --> 01:18:45,900
So you might want to go check it out.

1644
01:18:46,300 --> 01:18:49,500
Basically, you can't a single floating point value.

1645
01:18:49,500 --> 01:18:53,600
32, bit floating point value is not enough Precision to actually store

1646
01:18:53,600 --> 01:18:56,200
256, bits of fractional per pixel.

1647
01:18:56,400 --> 01:19:01,500
Plus the amount of size of the world that we wanted.

1648
01:19:02,300 --> 01:19:07,100
We wanted to potentially have like, hundreds if not thousands of tile

1649
01:19:07,100 --> 01:19:10,400
maps of screens across in the longest case.

1650
01:19:11,300 --> 01:19:13,800
I mean, probably realistically will never get up to thousands, but we

1651
01:19:13,800 --> 01:19:15,600
least wanted hundreds thousands.

1652
01:19:15,600 --> 01:19:18,300
Maybe too long for the player to ever get from one side to the other,

1653
01:19:18,300 --> 01:19:22,500
right, but we definitely wanted to be able to do a thing where there

1654
01:19:22,500 --> 01:19:26,700
might be 100 tall set of rooms that you might go through or whatever

1655
01:19:27,200 --> 01:19:30,100
and floating Point, Precision isn't isn't sufficient and I showed that

1656
01:19:30,100 --> 01:19:31,400
on a previous stream.

1657
01:19:31,400 --> 01:19:31,700
So,

1658
01:19:31,800 --> 01:19:33,300
So we definitely don't want to do that.

1659
01:19:33,700 --> 01:19:38,500
So we need to have basically a two-tiered system so that we can have

1660
01:19:38,500 --> 01:19:42,400
more than 32 bits worth of addressing for the guy in terms of where he

1661
01:19:42,400 --> 01:19:42,700
is.

1662
01:19:47,900 --> 01:19:48,700
See.

1663
01:19:57,800 --> 01:20:01,000
You mentioned in your picture that the last four bits could represent

1664
01:20:01,000 --> 01:20:04,600
the tile in the map and the top 28 would be the Tom application.

1665
01:20:04,600 --> 01:20:08,600
But since we plan on making the tile map sparse, we won't need that

1666
01:20:08,600 --> 01:20:12,800
many bits to represent that why not use the B 4 tiles.

1667
01:20:16,400 --> 01:20:22,300
So I think maybe you are thinking I'm saying something different than

1668
01:20:22,300 --> 01:20:23,000
what I'm saying.

1669
01:20:23,500 --> 01:20:25,100
So here is what I'm saying.

1670
01:20:27,000 --> 01:20:27,700
Let's draw this out.

1671
01:20:27,700 --> 01:20:28,800
A little more explicitly.

1672
01:20:31,900 --> 01:20:33,800
I should really learn to just make a grid.

1673
01:20:33,900 --> 01:20:34,100
Wow.

1674
01:20:34,100 --> 01:20:35,600
This is a very War P grid.

1675
01:20:36,800 --> 01:20:39,900
So, let's say that each of these things, right?

1676
01:20:43,100 --> 01:20:45,500
1 2 3 4 5 6 7 8.

1677
01:20:52,100 --> 01:20:56,100
One, two, three, four, five, six, seven, eight.

1678
01:20:56,800 --> 01:20:59,600
Let's say that each of these is eight by eight, right?

1679
01:21:00,500 --> 01:21:03,800
So each of these little things here is 8 by 8 and we want to store

1680
01:21:03,800 --> 01:21:04,700
it's parsley.

1681
01:21:05,000 --> 01:21:10,100
So our world occupies, you know this region, right?

1682
01:21:10,100 --> 01:21:13,900
So it occupies this area, okay.

1683
01:21:16,500 --> 01:21:18,300
That's where there actually is world.

1684
01:21:18,900 --> 01:21:22,500
But the use that like it's there's Collision everywhere.

1685
01:21:22,500 --> 01:21:25,200
So the player can't get outside of this area.

1686
01:21:25,200 --> 01:21:27,200
That's this is the only map so you could ever get to.

1687
01:21:28,300 --> 01:21:33,800
So, what we want to do is we want to store this stuff, you know, into

1688
01:21:33,800 --> 01:21:36,800
our interests, our magical machine that we're going to make here for

1689
01:21:36,800 --> 01:21:40,200
storing the tile set of the world for my scoring the tile map.

1690
01:21:40,900 --> 01:21:43,100
So we know that it's trivial to store.

1691
01:21:43,100 --> 01:21:44,300
Just a regular old tile map.

1692
01:21:44,300 --> 01:21:45,600
We've done it already, right?

1693
01:21:45,600 --> 01:21:47,900
We have all the code in here for storing a tile map.

1694
01:21:47,900 --> 01:21:50,100
That's just one screens worth of tiles or whatever.

1695
01:21:50,600 --> 01:21:52,900
So we know, we could store an 8x8 tileset.

1696
01:21:52,900 --> 01:21:53,200
Trivially.

1697
01:21:53,200 --> 01:21:54,300
We already saw how to do that.

1698
01:21:54,300 --> 01:21:55,200
It's not very hard.

1699
01:21:55,200 --> 01:21:58,000
Right, but the question is, what do we

1700
01:21:58,200 --> 01:22:02,200
Then due to store the rest of these guys, right?

1701
01:22:02,600 --> 01:22:07,400
We need to be able to have a bigger sort of addressing scheme to talk

1702
01:22:07,400 --> 01:22:11,700
about where this guy is such that a specific tile in here.

1703
01:22:11,900 --> 01:22:15,000
Has an address that is, you know, whatever.

1704
01:22:15,000 --> 01:22:17,900
He is in his eight by eight, you know, inside this 8x8.

1705
01:22:17,900 --> 01:22:20,100
He may be the tile 3 comma 2.

1706
01:22:20,400 --> 01:22:21,000
Right.

1707
01:22:21,800 --> 01:22:24,700
But we also want to talk about the fact that on the world.

1708
01:22:24,700 --> 01:22:27,800
He's you know, whatever he is, here is 0-1.

1709
01:22:28,200 --> 01:22:31,100
So he's 3, comma 1, right?

1710
01:22:31,500 --> 01:22:35,800
And so all I'm talking about is the address for this guy for this tile

1711
01:22:35,800 --> 01:22:38,300
right here, X and Y.

1712
01:22:40,800 --> 01:22:45,100
Right, if, if it's eight by eight, we need three bits for the tile

1713
01:22:45,100 --> 01:22:45,900
address, right?

1714
01:22:45,900 --> 01:22:47,500
So one, two, three, right?

1715
01:22:47,500 --> 01:22:53,600
So, this right here is the divider and we have 3 bits right into those

1716
01:22:53,600 --> 01:22:55,100
three bits for the X.

1717
01:22:55,100 --> 01:22:57,400
We would put the three, right?

1718
01:22:57,500 --> 01:23:01,400
And for the why we would put the to into here and here, right?

1719
01:23:01,400 --> 01:23:04,100
That's the location of the tile inside the tile map.

1720
01:23:04,700 --> 01:23:07,400
And then for the location of the tile map itself.

1721
01:23:07,600 --> 01:23:09,500
We use the top bits, right?

1722
01:23:09,500 --> 01:23:10,400
Which is 32.

1723
01:23:10,600 --> 01:23:14,200
- three right, which is the 29 B here, right?

1724
01:23:14,800 --> 01:23:16,100
20, 9 B, 23 9, B.

1725
01:23:16,400 --> 01:23:19,600
We would put three and one, we put three in here and one in here,

1726
01:23:19,800 --> 01:23:21,100
right now.

1727
01:23:21,100 --> 01:23:25,900
We have a universal way of addressing this tile such that, we know

1728
01:23:25,900 --> 01:23:30,400
what part of it is the tile map inside, which is inside a particular

1729
01:23:30,400 --> 01:23:30,900
8x8.

1730
01:23:30,900 --> 01:23:35,300
Tilemap that store densely and then another one that's for storing,

1731
01:23:35,800 --> 01:23:39,100
which time appease in sparsely and then what we need to do and we

1732
01:23:39,100 --> 01:23:40,400
haven't done this yet, but

1733
01:23:40,500 --> 01:23:46,100
We need to do is have a way of taking this top part here, this 31 and

1734
01:23:46,100 --> 01:23:50,300
looking that up in some kind of sparse way, so that we don't store

1735
01:23:50,300 --> 01:23:53,700
absolutely everything in the entire map, right?

1736
01:23:54,900 --> 01:23:56,400
So, but that's all I'm saying.

1737
01:24:03,300 --> 01:24:07,300
Do you know of the Intel intrinsics guide its interactive which makes

1738
01:24:07,300 --> 01:24:10,000
for easy filtering for instruction set and categories?

1739
01:24:10,000 --> 01:24:10,900
No, I didn't.

1740
01:24:11,000 --> 01:24:12,400
That sounds pretty awesome.

1741
01:24:15,700 --> 01:24:18,300
Intel intrinsic guide.

1742
01:24:22,300 --> 01:24:23,000
Oh wow.

1743
01:24:24,500 --> 01:24:26,200
That is spiffy.

1744
01:24:27,200 --> 01:24:28,700
Of course, it seems to be little.

1745
01:24:28,700 --> 01:24:29,100
So okay.

1746
01:24:29,100 --> 01:24:29,600
There it goes.

1747
01:24:34,800 --> 01:24:35,900
Wow.

1748
01:24:37,300 --> 01:24:38,300
Okay, that's pretty cool.

1749
01:24:38,300 --> 01:24:39,300
Thank you very much.

1750
01:24:39,300 --> 01:24:40,200
Flying sand.

1751
01:24:41,000 --> 01:24:41,900
That is great.

1752
01:24:42,900 --> 01:24:43,200
Okay.

1753
01:24:43,200 --> 01:24:45,400
So this is something we should totally bookmark.

1754
01:24:46,700 --> 01:24:50,000
I will and I will add that to the Forum site as well.

1755
01:24:50,000 --> 01:24:50,900
That's great.

1756
01:24:52,600 --> 01:24:53,800
That's really nice.

1757
01:24:54,100 --> 01:24:55,000
So that's pretty cool.

1758
01:24:55,000 --> 01:24:58,400
You can just go ahead and say, what's the instruction sets that you

1759
01:24:58,500 --> 01:25:01,500
are going to Target and then it only shows you.

1760
01:25:02,000 --> 01:25:03,200
Wow, that's awesome.

1761
01:25:04,500 --> 01:25:05,700
That's just great.

1762
01:25:06,600 --> 01:25:09,500
Wow, that makes life a lot easier and then you can just see all the

1763
01:25:09,500 --> 01:25:10,700
instructions that are there.

1764
01:25:11,100 --> 01:25:12,000
That's great.

1765
01:25:13,000 --> 01:25:14,000
Thank you very much.

1766
01:25:28,600 --> 01:25:30,500
Is there a reason we have a majority of the code.

1767
01:25:30,500 --> 01:25:34,000
We've been working on in handy, dot CPP, and not something like World

1768
01:25:34,000 --> 01:25:34,600
wpr.

1769
01:25:34,600 --> 01:25:35,300
Tilemap dot.

1770
01:25:35,300 --> 01:25:37,000
CPP, and player dot CPP.

1771
01:25:37,200 --> 01:25:37,500
Yes.

1772
01:25:37,500 --> 01:25:39,900
The reason is because that's premature.

1773
01:25:40,600 --> 01:25:45,500
So we will have more files but only once we determine what the

1774
01:25:45,500 --> 01:25:47,200
architecture correctly actually is.

1775
01:25:47,200 --> 01:25:50,400
So, for example, right now we're starting to get the tile map stuff

1776
01:25:50,400 --> 01:25:53,800
straightened out, as soon as the tile map stuff API wise, I'm

1777
01:25:53,800 --> 01:25:57,700
satisfied with it, which I'm not yet because the the I talked

1778
01:25:57,800 --> 01:26:02,600
Three things today that I want to do to it as soon as that's ready.

1779
01:26:02,600 --> 01:26:05,800
Then we will be pulling it out into its own file where we can consider

1780
01:26:05,800 --> 01:26:08,800
it kind of done for a while or at least where it'll just kind of

1781
01:26:08,800 --> 01:26:09,200
reside.

1782
01:26:09,200 --> 01:26:12,400
But I don't like to pull things out until we're sure that they're

1783
01:26:12,400 --> 01:26:17,700
correctly Consolidated because otherwise you're just presupposing.

1784
01:26:17,700 --> 01:26:22,000
You know, what the API boundary is between things, and that's a bad

1785
01:26:22,000 --> 01:26:22,200
idea.

1786
01:26:22,200 --> 01:26:23,600
You never want to presuppose.

1787
01:26:23,600 --> 01:26:27,300
You know what, the API boundary is, so you always want to start by

1788
01:26:27,300 --> 01:26:27,600
just writing.

1789
01:26:27,800 --> 01:26:30,800
And whatever comes to mind in the place that it's most easy to write

1790
01:26:30,800 --> 01:26:31,300
it.

1791
01:26:31,300 --> 01:26:34,500
And then once you are satisfied, that it's correct, then you pull it

1792
01:26:34,500 --> 01:26:35,000
out.

1793
01:26:35,300 --> 01:26:37,300
That's almost always the best way to go.

1794
01:26:46,800 --> 01:26:47,900
So we'll start masks.

1795
01:26:47,900 --> 01:26:50,600
Are we going to move the origin to the bottom left?

1796
01:26:50,800 --> 01:26:51,800
Yes, we will.

1797
01:26:51,800 --> 01:26:54,000
Probably move the origin to the bottom left to get.

1798
01:26:54,100 --> 01:26:56,400
This is what I was talking about getting rid of the floor.

1799
01:26:56,700 --> 01:26:59,500
So I'll talk about that a little bit once we do it because that's a

1800
01:27:00,000 --> 01:27:01,800
Easy way to get rid of the floor problem.

1801
01:27:15,500 --> 01:27:17,900
Shift drag four straight lines.

1802
01:27:18,000 --> 01:27:19,700
Okay, is that a tip for these?

1803
01:27:19,700 --> 01:27:21,500
Get for this because that is that work?

1804
01:27:22,400 --> 01:27:23,000
Let's see.

1805
01:27:24,000 --> 01:27:26,800
That does not work that just draws a circle.

1806
01:27:30,000 --> 01:27:31,700
That doesn't look at what you've done.

1807
01:27:32,900 --> 01:27:35,600
Oh, how do I get that?

1808
01:27:35,600 --> 01:27:39,500
Just changes the size of the brush that does not work.

1809
01:27:39,500 --> 01:27:42,100
I think you have to be in line drawing mode.

1810
01:27:42,400 --> 01:27:43,000
Probably.

1811
01:27:43,600 --> 01:27:44,000
Yeah.

1812
01:27:45,100 --> 01:27:47,500
Yeah, you have to be in line drawing mode, which I'm too lazy to

1813
01:27:47,500 --> 01:27:49,100
switch to line drawing mode.

1814
01:27:49,100 --> 01:27:51,700
I got to have my quick, my quick dashing.

1815
01:27:52,000 --> 01:27:54,000
They should have some kind of function that lets you draw a straight

1816
01:27:54,000 --> 01:27:55,600
line out even in freestyle mode.

1817
01:28:05,700 --> 01:28:07,200
Will you be able to find arm assembly?

1818
01:28:07,200 --> 01:28:07,900
Instructions to match.

1819
01:28:07,900 --> 01:28:10,500
The Intel ones you are specifying if, when you want to port to arm.

1820
01:28:10,500 --> 01:28:13,300
Yeah, so arm neon is pretty good.

1821
01:28:14,100 --> 01:28:20,900
It won't probably be one-to-one the instruction set on on oops.

1822
01:28:21,300 --> 01:28:27,500
Army on the instruction set on arm has this thing called neon, which

1823
01:28:27,500 --> 01:28:30,300
is basically like the equivalent of SSE.

1824
01:28:30,500 --> 01:28:35,000
So it's like that, but forearm for the arm processors and

1825
01:28:35,800 --> 01:28:36,900
I don't know.

1826
01:28:37,000 --> 01:28:41,800
I have docs for it on my other machine and I'm sure there are you can

1827
01:28:41,800 --> 01:28:43,300
download them usually here.

1828
01:28:43,900 --> 01:28:45,500
I don't know if they have them on here.

1829
01:28:45,500 --> 01:28:48,700
I don't know if there's what the right place to look them up is but

1830
01:28:48,700 --> 01:28:52,600
basically there's a bunch of the equivalent things to S2.

1831
01:28:52,600 --> 01:28:59,200
All the SSE instructions, neon typically has something suitable for

1832
01:28:59,400 --> 01:29:03,500
for you know, doing whatever you were doing in SSE on the arm

1833
01:29:03,500 --> 01:29:05,000
architecture as well.

1834
01:29:05,100 --> 01:29:09,100
Well, I don't know if it has it probably doesn't necessarily have that

1835
01:29:09,100 --> 01:29:09,400
rounding.

1836
01:29:09,400 --> 01:29:10,900
Well, it might you know, I don't remember.

1837
01:29:10,900 --> 01:29:15,200
I did some neon programming a while back and I remember it being very

1838
01:29:15,200 --> 01:29:15,700
good.

1839
01:29:16,200 --> 01:29:19,400
So, you know, I would basically say that most of the time you can

1840
01:29:19,400 --> 01:29:23,200
probably find something as good or better sometimes than you have an S

1841
01:29:23,200 --> 01:29:25,000
SE with neon.

1842
01:29:25,500 --> 01:29:29,100
So that's that's what will be porting to on our if we choose to port

1843
01:29:29,100 --> 01:29:29,600
to arm.

1844
01:29:37,500 --> 01:29:39,600
How are we going to deal with different types of tiles?

1845
01:29:40,100 --> 01:29:42,700
So, basically, right now, this is just a placeholder.

1846
01:29:43,400 --> 01:29:46,800
So, on our tile map, we just have an you at 32.

1847
01:29:46,800 --> 01:29:48,700
That's a tile type.

1848
01:29:49,300 --> 01:29:55,000
But what we will do in the future is once we actually decide what once

1849
01:29:55,000 --> 01:29:58,100
we're actually working on the game mechanics, part of the game.

1850
01:29:59,300 --> 01:29:59,800
It should be

1851
01:30:00,000 --> 01:30:04,500
Free essentially, for us to change, whatever this is into some more

1852
01:30:04,500 --> 01:30:06,900
elaborate structure that has all the stuff that we might want for a

1853
01:30:06,900 --> 01:30:10,500
tile, but it's very premature and think about that now, so all we

1854
01:30:10,500 --> 01:30:13,900
really need to do now is know that we can store something, and then we

1855
01:30:13,900 --> 01:30:16,800
can assume later that we can change in destroying, whatever it is that

1856
01:30:16,800 --> 01:30:18,100
we actually wanted.

1857
01:30:18,200 --> 01:30:21,300
But right now I just picked you and 32 because that allows us to store

1858
01:30:21,300 --> 01:30:24,300
some type field base for that, we can use to draw something so that we

1859
01:30:24,500 --> 01:30:27,600
can actually see what we're doing until we actually know what we want

1860
01:30:27,600 --> 01:30:28,300
for our tiles.

1861
01:30:36,400 --> 01:30:37,000
All right.

1862
01:30:37,000 --> 01:30:39,500
Looks like we are done with questions.

1863
01:30:40,200 --> 01:30:44,900
Thank you very much for joining me for another episode of handmade

1864
01:30:44,900 --> 01:30:45,500
hero.

1865
01:30:45,900 --> 01:30:46,200
I'm sorry.

1866
01:30:46,200 --> 01:30:47,200
I talked so much today.

1867
01:30:47,200 --> 01:30:48,500
There was kind of just a bunch of stuff.

1868
01:30:48,500 --> 01:30:50,900
I think, maybe from thinking, over the weekend.

1869
01:30:51,100 --> 01:30:52,500
Sometimes the brain is going.

1870
01:30:52,900 --> 01:30:54,400
So I had some stuff that I wanted to talk about.

1871
01:30:54,400 --> 01:30:57,000
So anyway, but I think we are in good track.

1872
01:30:57,000 --> 01:30:58,500
Anyway, by the end of this week.

1873
01:30:58,500 --> 01:31:00,700
I think we should have all of our tile stuff straightened out.

1874
01:31:00,700 --> 01:31:04,800
I think all the things that I wanted to do will probably be well and

1875
01:31:04,800 --> 01:31:05,700
truly done.

1876
01:31:05,900 --> 01:31:06,000
So,

1877
01:31:06,200 --> 01:31:07,000
It is a good thing.

1878
01:31:08,600 --> 01:31:11,600
And basically, what I would guess what I'd like to do is I'd like to

1879
01:31:11,600 --> 01:31:13,800
get to that point by the end of the week where we can say that our

1880
01:31:13,800 --> 01:31:16,300
town map stuff is is sort of where we want it to be.

1881
01:31:16,700 --> 01:31:18,800
And also maybe throw a monster in there.

1882
01:31:18,800 --> 01:31:20,300
Throw it throw another thing in the world.

1883
01:31:20,300 --> 01:31:24,200
So we can have two things in the world, moving around the player and

1884
01:31:24,200 --> 01:31:27,500
some other thing just to set us up for next week.

1885
01:31:27,500 --> 01:31:30,300
When we start to work on some of the other stuff like, you know, how

1886
01:31:30,300 --> 01:31:33,500
we're going to treat entities and animation and stuff like that,

1887
01:31:33,500 --> 01:31:36,000
because obviously that's another big part of the engine.

1888
01:31:36,100 --> 01:31:39,400
In architecture, so we want to kind of get some zygote stuff in there.

1889
01:31:39,400 --> 01:31:41,600
We want to try to get some stuff in there were playing around that.

1890
01:31:41,600 --> 01:31:44,000
So we have some idea of how we want this to work and what we want the

1891
01:31:44,000 --> 01:31:47,400
engine to do, as far as animations concerned and those sorts of things

1892
01:31:47,400 --> 01:31:49,600
because those are the sorts of things that can be kind of tricky.

1893
01:31:50,300 --> 01:31:53,200
So thank you very much for joining me.

1894
01:31:54,000 --> 01:31:57,300
If you would like to follow along at home with the source code.

1895
01:31:57,700 --> 01:32:01,500
You can go to handmade hero dot-org and go hit the little pre-order

1896
01:32:01,500 --> 01:32:02,000
button.

1897
01:32:02,600 --> 01:32:06,000
If you preorder the game, you will get access to the source code and

1898
01:32:06,100 --> 01:32:07,600
Night, you can give send you a link.

1899
01:32:07,600 --> 01:32:10,300
Basically that every night you can download the source code.

1900
01:32:10,300 --> 01:32:12,300
I uploaded immediately after we finish coding.

1901
01:32:13,100 --> 01:32:14,200
So if you want to do that, you do that.

1902
01:32:14,200 --> 01:32:15,700
If you'd like to support the video series.

1903
01:32:15,700 --> 01:32:16,500
We have a patreon.

1904
01:32:16,500 --> 01:32:18,900
You subscribe to that's on this little patch on button.

1905
01:32:18,900 --> 01:32:22,900
And we also have a news and Forum site that you can go to.

1906
01:32:22,900 --> 01:32:26,500
If you are trying to learn along with handmade hero, it's got the

1907
01:32:26,500 --> 01:32:27,500
schedule for the week on here.

1908
01:32:27,500 --> 01:32:32,000
It's got an episode guide for catching up on past, ish episodes with

1909
01:32:32,000 --> 01:32:35,700
time-coded access to the videos and stuff that helps a ton.

1910
01:32:36,100 --> 01:32:39,100
There's coding resources page that has ports and things like this as

1911
01:32:39,100 --> 01:32:40,400
well as reference materials.

1912
01:32:40,500 --> 01:32:42,800
So if you're trying to follow along on a Mac and you need some help,

1913
01:32:42,800 --> 01:32:45,300
getting the platform stuff up and running, that's a great place to go,

1914
01:32:45,500 --> 01:32:46,500
same with a Linux.

1915
01:32:47,100 --> 01:32:50,000
And then once we have forums, we can ask questions, code discussion

1916
01:32:50,500 --> 01:32:53,500
forum that you can ask questions about the code that we are doing and

1917
01:32:53,500 --> 01:32:54,700
get help for people to community.

1918
01:32:54,700 --> 01:32:55,700
And I also read them all.

1919
01:32:55,700 --> 01:32:57,500
So I'll come in there and answer stuff.

1920
01:32:57,700 --> 01:32:59,400
When I see something that I can answer.

1921
01:33:00,000 --> 01:33:00,700
Definitely check it out.

1922
01:33:00,700 --> 01:33:01,900
If you're learning along with the series.

1923
01:33:01,900 --> 01:33:02,700
It's a great place to go.

1924
01:33:02,700 --> 01:33:04,600
And it has a lot of really helpful information on it.

1925
01:33:04,600 --> 01:33:09,700
So, again, thank you everyone for joining me for another episode of

1926
01:33:09,700 --> 01:33:11,000
handmade here and has been a pleasure.

1927
01:33:11,000 --> 01:33:14,000
And I hope to see you all here tomorrow at 8 p.m.

1928
01:33:14,000 --> 01:33:17,600
Pacific Standard time again, where, and I'll go through and do that

1929
01:33:17,600 --> 01:33:21,100
virtualization of the town map stuff that we talked about tonight and

1930
01:33:21,100 --> 01:33:24,200
maybe if it goes, well, I don't know if it does, but if it goes well,

1931
01:33:24,200 --> 01:33:28,200
then I can also do the relative sort of world unit stuff that I want

1932
01:33:28,200 --> 01:33:28,500
to do.

1933
01:33:28,500 --> 01:33:29,800
If not, we'll

1934
01:33:30,000 --> 01:33:31,200
Do it on Wednesday.

1935
01:33:31,200 --> 01:33:34,300
So, thank you, everybody for joining me, and I hope to see you

1936
01:33:34,300 --> 01:33:35,200
tomorrow.

1937
01:33:35,400 --> 01:33:36,000
Thanks, everyone.

