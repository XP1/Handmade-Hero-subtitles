1
00:00:00,300 --> 00:00:01,200
Start recording.

2
00:00:02,500 --> 00:00:05,000
Hello, everyone, and welcome to handmade hero.

3
00:00:05,000 --> 00:00:08,400
The show where we code a complete game live on stream on Twitch.

4
00:00:08,900 --> 00:00:09,300
No engines.

5
00:00:09,300 --> 00:00:16,000
No libraries, although I say that every day and in truth, I did also

6
00:00:16,000 --> 00:00:19,700
say that our asset processor, since it is not part of the game.

7
00:00:20,800 --> 00:00:21,900
Could use libraries.

8
00:00:21,900 --> 00:00:25,100
I said I do not have a problem having that use libraries.

9
00:00:25,100 --> 00:00:26,600
And the reason that I mentioned that

10
00:00:28,700 --> 00:00:33,800
Is because we do actually have a choice today of using a library and

11
00:00:33,800 --> 00:00:38,000
because people wrote in on Twitter and sort of said this, they were

12
00:00:38,000 --> 00:00:41,600
saying, since the asset processor is allowed to use libraries and I

13
00:00:41,600 --> 00:00:46,100
said that, could we use a library there for opening the fonts?

14
00:00:47,500 --> 00:00:50,100
And I am considering that.

15
00:00:50,600 --> 00:00:55,700
So basically, there's two ways that we can really do it in the asset

16
00:00:55,700 --> 00:00:57,200
processor 1.

17
00:00:57,400 --> 00:01:00,300
Is that we just get the fonts from Windows, right?

18
00:01:01,100 --> 00:01:04,700
And the other is that we use some kind of library.

19
00:01:05,700 --> 00:01:09,300
Now, you know, originally my assumption was I just show you how to get

20
00:01:09,300 --> 00:01:13,400
them from Windows because well, you know, it's very direct and you

21
00:01:13,400 --> 00:01:17,300
know, when you're running the asset processor on Windows, you can just

22
00:01:17,300 --> 00:01:20,100
distract the fonts and whatever other platform you would use Linux or

23
00:01:20,100 --> 00:01:23,600
something has a similar API, you could use to extract the fonts and

24
00:01:23,600 --> 00:01:24,900
and off you go, right?

25
00:01:26,500 --> 00:01:27,100
But

26
00:01:28,500 --> 00:01:31,200
I don't know, I thought about it when people were saying maybe you

27
00:01:31,200 --> 00:01:33,000
should use a library here, I thought about it.

28
00:01:33,000 --> 00:01:37,700
And the thing that I thought of was people always ask me on the stream

29
00:01:37,800 --> 00:01:38,700
all the time.

30
00:01:38,900 --> 00:01:42,800
If you were going to use a library, what libraries would you use,

31
00:01:43,100 --> 00:01:43,700
right?

32
00:01:44,200 --> 00:01:49,300
And I only say the stb, libraries and so, I don't know.

33
00:01:49,900 --> 00:01:53,800
My thinking was, I could decide to use a library here to show you

34
00:01:53,800 --> 00:01:56,300
what, how to use an STD library.

35
00:01:57,000 --> 00:01:58,100
Because, as I have said over,

36
00:01:58,200 --> 00:01:59,200
Over again on the stream.

37
00:01:59,200 --> 00:02:01,900
If I was going to use the library, the libraries that I would use

38
00:02:01,900 --> 00:02:02,600
would be the stb.

39
00:02:02,600 --> 00:02:04,900
Libraries, their libraries written by Sean Barrett.

40
00:02:05,400 --> 00:02:07,500
They're designed with a game programmer in mind.

41
00:02:08,000 --> 00:02:10,600
They're written in a very convenient way to integrate into your

42
00:02:10,600 --> 00:02:11,800
product and so, I don't know.

43
00:02:12,800 --> 00:02:15,100
So I don't know if people have strong feelings on that one way or the

44
00:02:15,100 --> 00:02:15,300
other.

45
00:02:15,300 --> 00:02:18,600
So, I thought, maybe what I do today, we'll show you how to get the

46
00:02:18,600 --> 00:02:22,300
fonts with s with an SD B Library, show you how to use one of those

47
00:02:22,300 --> 00:02:25,300
libraries because they are libraries that I recommend using and this

48
00:02:25,300 --> 00:02:28,100
would pretty much be our only time when we could do this.

49
00:02:28,200 --> 00:02:28,300
Us.

50
00:02:28,300 --> 00:02:31,100
Because, like I said, before in the actual game code, I don't want to

51
00:02:31,100 --> 00:02:32,400
use any libraries, right?

52
00:02:32,400 --> 00:02:35,500
That's just kind of a rule for the game itself.

53
00:02:35,500 --> 00:02:38,400
It's just an arbitrary rule, it's true, but it's just part of the

54
00:02:38,500 --> 00:02:41,100
thing that I want to do with the series was we write everything in the

55
00:02:41,100 --> 00:02:41,900
game from scratch.

56
00:02:41,900 --> 00:02:45,100
So the entire code for the game is completely there and written by us.

57
00:02:45,200 --> 00:02:45,700
Right?

58
00:02:47,300 --> 00:02:48,500
So I don't know.

59
00:02:48,600 --> 00:02:52,300
So probably what I'll do is we'll do that today because it seems like

60
00:02:52,300 --> 00:02:56,400
a reasonable request from people and then if it ends up bothering

61
00:02:56,400 --> 00:02:57,700
people we can

62
00:02:58,200 --> 00:02:59,700
Just show also how to do it.

63
00:03:00,000 --> 00:03:03,100
Click through windows or something like that, but we'll see.

64
00:03:04,200 --> 00:03:04,900
So that's what I would say.

65
00:03:04,900 --> 00:03:06,500
So maybe that's what we'll do today.

66
00:03:06,500 --> 00:03:08,800
That seems like a reasonable request and it seemed like something we

67
00:03:08,800 --> 00:03:09,300
could do.

68
00:03:09,300 --> 00:03:14,500
And it has The Fringe benefit of if somebody wanted to use this

69
00:03:14,500 --> 00:03:15,900
library in their actual game.

70
00:03:15,900 --> 00:03:18,500
Now, they would know how to do it and they would know how to probably

71
00:03:18,500 --> 00:03:22,900
would know how to use all the stb of libraries really because they all

72
00:03:22,900 --> 00:03:26,000
kind of work the same way and they're a great set of libraries that,

73
00:03:26,100 --> 00:03:28,000
you know, is really easy for you to use.

74
00:03:28,400 --> 00:03:29,900
Even if you are very

75
00:03:30,000 --> 00:03:31,100
Oculus about low-level things.

76
00:03:31,100 --> 00:03:35,400
Like I am their libraries, that won't cause you pain and suffering,

77
00:03:35,400 --> 00:03:36,000
like a lot of them.

78
00:03:36,000 --> 00:03:42,300
Well, so if you're going to do that, how would you do that?

79
00:03:43,100 --> 00:03:45,900
If you're going to use SUV libraries, you would search like this,

80
00:03:46,200 --> 00:03:46,800
right?

81
00:03:47,400 --> 00:03:52,700
You search for stb libraries and you get them here and you can go to

82
00:03:52,700 --> 00:03:54,600
this stb page, right?

83
00:03:54,600 --> 00:03:55,100
It's nothing.

84
00:03:55,100 --> 00:03:58,300
/St be and he's got all these libraries in here.

85
00:03:58,800 --> 00:03:59,800
Now, several

86
00:04:00,000 --> 00:04:01,600
Libraries are pretty darn useful.

87
00:04:01,700 --> 00:04:06,600
Like, stb image is like a great way to let quickly, add image loading

88
00:04:06,600 --> 00:04:07,400
to your code.

89
00:04:07,400 --> 00:04:07,700
Right?

90
00:04:07,700 --> 00:04:11,700
So, if you take a look at it here, you know, it's like this one file,

91
00:04:11,700 --> 00:04:12,300
right?

92
00:04:12,300 --> 00:04:14,500
And it reads like a bunch of stuff, right?

93
00:04:14,500 --> 00:04:17,700
It reads like jpeg paying being that PSD TG, right?

94
00:04:18,000 --> 00:04:21,100
And it doesn't read like the complete Speck of all of them.

95
00:04:21,100 --> 00:04:23,200
Usually, it just reads the part that game developers.

96
00:04:23,200 --> 00:04:25,100
Usually care about, right?

97
00:04:26,000 --> 00:04:28,700
So this is just like, when people ask me, if you were going to lose

98
00:04:28,700 --> 00:04:29,800
libraries, which ones would you use?

99
00:04:29,900 --> 00:04:34,200
As these would be, the ones that I would recommend using, or at least

100
00:04:34,200 --> 00:04:34,800
they'd be it.

101
00:04:34,800 --> 00:04:38,200
Be the place that I would recommend looking first because if it does

102
00:04:38,200 --> 00:04:41,000
the thing that you want, these are probably the libraries that will

103
00:04:41,000 --> 00:04:43,200
cause you the least pain and suffering.

104
00:04:43,300 --> 00:04:44,800
They are also public domain.

105
00:04:44,800 --> 00:04:48,800
So there is no restrictions on using them, you can redistribute them,

106
00:04:48,800 --> 00:04:51,300
you don't have to do anything in particular under credit screen for

107
00:04:51,300 --> 00:04:51,700
them.

108
00:04:52,000 --> 00:04:54,000
It's purely like, you know, it's code.

109
00:04:54,000 --> 00:04:55,700
That's free for you to use in every possible way.

110
00:04:55,700 --> 00:04:59,200
And, you know, it would be nice to probably to thank Sean Barrett, if

111
00:04:59,200 --> 00:04:59,800
you ship.

112
00:05:00,000 --> 00:05:02,800
Have them but you know you're not even obligated to do that.

113
00:05:04,500 --> 00:05:06,900
And so you can see a little description here that talks about all the

114
00:05:06,900 --> 00:05:09,600
different ones and the ones that you the one that you would be

115
00:05:09,600 --> 00:05:14,400
interested in particular if you wanted to do, the font stuff is stb.

116
00:05:14,400 --> 00:05:15,500
Truetype, Right?

117
00:05:15,500 --> 00:05:17,800
Which is this one here and SUV.

118
00:05:17,800 --> 00:05:22,700
Truetype is a library that it literally does exactly the thing that we

119
00:05:22,700 --> 00:05:23,500
want.

120
00:05:23,500 --> 00:05:27,900
Which is it is a true type font rasterizer, right?

121
00:05:27,900 --> 00:05:29,800
It literally does exactly the thing that I said,

122
00:05:29,900 --> 00:05:31,500
Our asset processor would want.

123
00:05:36,400 --> 00:05:40,800
Okay, so the structure of one of these libraries is very

124
00:05:40,800 --> 00:05:43,800
straightforward, there is one file.

125
00:05:44,600 --> 00:05:47,000
He ships it as an h-file, right?

126
00:05:47,000 --> 00:05:50,500
So you can see all of these are H files and the way that they work,

127
00:05:50,500 --> 00:05:52,200
you can look inside one, right?

128
00:05:52,200 --> 00:05:53,200
Estimate re-type.

129
00:05:53,700 --> 00:05:59,800
The way that they work is inside the H file, there's actually a pound

130
00:06:00,100 --> 00:06:05,000
I'm that you pound to find to say whether you want the implementation

131
00:06:05,000 --> 00:06:05,800
or just the header.

132
00:06:06,100 --> 00:06:09,500
So you actually like it's actually two files in one.

133
00:06:09,500 --> 00:06:13,500
It's sort of like the H and the CPP file or in this case C file

134
00:06:14,200 --> 00:06:16,000
wrapped up into one file.

135
00:06:17,300 --> 00:06:20,700
So you don't need an h and a CBP, you just need the one file and then

136
00:06:20,700 --> 00:06:24,700
what you do is if you want the actual implementation, the part that's

137
00:06:24,700 --> 00:06:26,800
the that's the C file, the dot C file.

138
00:06:28,100 --> 00:06:33,700
Then you pound if I'm typically something like this and if you don't

139
00:06:33,700 --> 00:06:37,200
want that you just don't Define it and then it's acts like a normal

140
00:06:37,200 --> 00:06:39,900
age Val because all of the actual implementation, like all of this

141
00:06:39,900 --> 00:06:42,600
stuff won't get compiled in, right?

142
00:06:42,600 --> 00:06:46,900
You can kind of see if I come back to it here.

143
00:06:47,100 --> 00:06:48,400
Where would that be?

144
00:06:48,400 --> 00:06:52,300
Where is the if death almost there?

145
00:06:54,000 --> 00:06:54,800
Where are we?

146
00:06:55,700 --> 00:06:56,200
Here it is.

147
00:06:56,800 --> 00:07:03,000
This ifdef right kills everything after it if you don't Define stb,

148
00:07:03,000 --> 00:07:04,200
truetype implementation.

149
00:07:04,400 --> 00:07:07,200
So if you don't Define us to be true type of implantation, it kills

150
00:07:07,200 --> 00:07:09,000
the entire C code.

151
00:07:09,000 --> 00:07:14,200
And it just acts like an h-file whereas if you do Define that, then it

152
00:07:14,200 --> 00:07:16,900
acts as a C file so that you can build it into the game.

153
00:07:17,000 --> 00:07:17,800
Mmmmm, right?

154
00:07:19,100 --> 00:07:19,800
So that's it.

155
00:07:20,200 --> 00:07:24,500
That's like all you have to do if you want to use it and I can kind of

156
00:07:24,500 --> 00:07:27,300
show you, you know, roughly how that would work, right?

157
00:07:27,300 --> 00:07:29,500
So let's say we want to use this thing.

158
00:07:30,100 --> 00:07:32,000
You would just download it from here, right?

159
00:07:32,000 --> 00:07:35,700
You can I think you can just actually right from the test to be true

160
00:07:35,700 --> 00:07:36,500
type page.

161
00:07:37,000 --> 00:07:39,400
I think there's usually like a little download button somewhere,

162
00:07:39,400 --> 00:07:39,800
right?

163
00:07:39,900 --> 00:07:41,500
Isn't there somewhere?

164
00:07:41,600 --> 00:07:42,200
Maybe?

165
00:07:43,100 --> 00:07:43,700
No.

166
00:07:44,900 --> 00:07:46,900
Yeah, I don't use GitHub.

167
00:07:47,100 --> 00:07:51,700
in case you were wondering, so I have no idea how you download a file

168
00:07:52,200 --> 00:07:57,400
pulse issues, truetype quickly, jump, copy, file,

169
00:07:58,400 --> 00:07:59,300
Seriously guys.

170
00:08:00,400 --> 00:08:02,800
Like reserve download button.

171
00:08:05,200 --> 00:08:06,500
Okay.

172
00:08:10,400 --> 00:08:10,800
Well.

173
00:08:14,100 --> 00:08:15,300
I don't know.

174
00:08:16,700 --> 00:08:17,500
How about that?

175
00:08:18,400 --> 00:08:19,200
That's no good.

176
00:08:21,300 --> 00:08:21,700
Well.

177
00:08:23,000 --> 00:08:26,500
I have no idea so I would tell you how to download this.

178
00:08:26,600 --> 00:08:27,300
I have no idea.

179
00:08:27,300 --> 00:08:28,100
Download it.

180
00:08:28,300 --> 00:08:29,100
So.

181
00:08:29,100 --> 00:08:29,800
Yeah.

182
00:08:30,600 --> 00:08:32,799
I feel like this should be really obvious.

183
00:08:33,299 --> 00:08:39,100
I don't really know why it's not, maybe I'm missing something.

184
00:08:39,299 --> 00:08:45,200
Maybe if you were logged in it would be easier to do but that's kind

185
00:08:45,200 --> 00:08:45,700
of weird.

186
00:08:45,700 --> 00:08:48,300
So let's click on Raw okay, there we go.

187
00:08:48,700 --> 00:08:50,800
So raw is just actually just link to it.

188
00:08:50,800 --> 00:08:52,600
So I don't know if that's what they intended.

189
00:08:53,000 --> 00:08:54,400
But that it work, right?

190
00:08:54,400 --> 00:08:55,600
Because there's the raw file

191
00:08:56,900 --> 00:08:59,900
So yeah, so I guess you have to do is Click.

192
00:09:00,000 --> 00:09:04,500
On Raw click on save as sorry to those of you who are GitHub experts

193
00:09:04,900 --> 00:09:08,900
that is probably not the recommended way but you know those of us who

194
00:09:08,900 --> 00:09:10,300
are GitHub impaired.

195
00:09:10,800 --> 00:09:13,700
So if you're going to download this guy and save it in here, right?

196
00:09:15,000 --> 00:09:16,500
Now, we've got s to be true type.

197
00:09:17,400 --> 00:09:21,200
And like I said, the big difference between us to be true type

198
00:09:21,200 --> 00:09:21,600
libraries.

199
00:09:21,600 --> 00:09:27,200
And the reason why I feel like they are, you know, something that I

200
00:09:27,200 --> 00:09:29,200
can that I consider for my own coding.

201
00:09:29,400 --> 00:09:33,500
Unlike a lot of libraries is because they're just really sensibly made

202
00:09:33,500 --> 00:09:36,500
and they're really easy to maintain and keep using your search because

203
00:09:36,500 --> 00:09:38,900
there's just one file and it integrates really cleanly.

204
00:09:38,900 --> 00:09:44,500
So for example, right if we wanted to in handmade dot CPP, right?

205
00:09:45,500 --> 00:09:50,900
We could go ahead here and actually just do some rendering with Seb

206
00:09:50,900 --> 00:09:51,600
truetype.

207
00:09:51,700 --> 00:09:54,100
Let's say we wanted to kind of put it in here and I'm just going to

208
00:09:54,100 --> 00:09:57,700
like Drop it right in the middle of some code here as an example.

209
00:09:58,200 --> 00:10:02,400
And then we'll go into the asset processor and I'll show you how we

210
00:10:02,400 --> 00:10:03,200
would integrate it.

211
00:10:03,400 --> 00:10:06,900
So if you want to do it, you would literally we could just do truetype

212
00:10:08,000 --> 00:10:08,700
Dot h.

213
00:10:08,800 --> 00:10:12,700
And like I said, if you take a look at how that works, there's an stbb

214
00:10:12,800 --> 00:10:15,000
truetype implementation, right?

215
00:10:16,300 --> 00:10:20,400
In here, you would pound to find that first and you would set that to

216
00:10:20,400 --> 00:10:21,400
one or something.

217
00:10:21,500 --> 00:10:23,700
You would like just have to pound Define it, right?

218
00:10:24,500 --> 00:10:27,900
So if you're going to do that, that basically says, I want the

219
00:10:27,900 --> 00:10:31,400
implementation as well, and then you just compiled and like you can

220
00:10:31,400 --> 00:10:32,700
see like that.

221
00:10:32,700 --> 00:10:34,700
Is it, right?

222
00:10:34,700 --> 00:10:38,300
And I really want to underscore this like this is why this is a big

223
00:10:38,300 --> 00:10:38,700
deal.

224
00:10:38,800 --> 00:10:41,700
Okay, we didn't have to download fifty thousand files.

225
00:10:42,000 --> 00:10:43,700
We didn't have to deal with someone to make system.

226
00:10:43,900 --> 00:10:45,900
We didn't have to figure out how they all link together.

227
00:10:46,000 --> 00:10:48,100
There are what compile times which is they need or anything.

228
00:10:48,100 --> 00:10:50,600
It's like I just included.

229
00:10:50,600 --> 00:10:54,100
Sean Barrett's truetype font rasterizer in my game.

230
00:10:55,200 --> 00:10:56,800
With two lines of code.

231
00:10:58,500 --> 00:10:59,000
Right?

232
00:10:59,300 --> 00:11:04,100
And it just worked, that's a really big deal and nobody else pretty

233
00:11:04,100 --> 00:11:04,600
much does this.

234
00:11:04,600 --> 00:11:09,000
There are few rare exceptions of people who have followed his lead,

235
00:11:09,300 --> 00:11:14,800
but that is a pretty big deal and it goes a long way towards giving me

236
00:11:14,800 --> 00:11:15,900
the confidence.

237
00:11:16,700 --> 00:11:19,900
That if I use this thing, I can maintain an easily.

238
00:11:19,900 --> 00:11:24,300
I don't have to worry about all of these problems that I'm going to

239
00:11:24,300 --> 00:11:24,900
inherit.

240
00:11:24,900 --> 00:11:28,200
Because of the way this Library works and is sprawled.

241
00:11:28,300 --> 00:11:31,600
And God knows what and depends on 50 million things and all this other

242
00:11:31,600 --> 00:11:32,500
stuff, right?

243
00:11:33,000 --> 00:11:38,700
Download one file, put two lines of code in and now you have a

244
00:11:39,700 --> 00:11:43,300
truetype, rasterizing library built into your game, okay?

245
00:11:43,500 --> 00:11:44,800
So that's really important.

246
00:11:44,900 --> 00:11:46,700
It's like I said, I'm just going to write a little something here to

247
00:11:46,700 --> 00:11:49,400
show you how the rasterization from the library works.

248
00:11:49,500 --> 00:11:53,200
And then we're going to move over to the will move over to the asset

249
00:11:53,200 --> 00:11:55,200
processor where it's just where this actually belongs.

250
00:11:55,500 --> 00:11:58,100
And we'll go through the actual work of actually building.

251
00:11:58,200 --> 00:11:59,400
building out the thing that will,

252
00:12:00,000 --> 00:12:05,300
A demonstration version of asset of fonts processing into the into the

253
00:12:05,300 --> 00:12:05,900
asset file.

254
00:12:07,300 --> 00:12:14,000
All right, so if I go into stb truetype and take a look at it, one of

255
00:12:14,000 --> 00:12:15,100
the great things about it.

256
00:12:15,100 --> 00:12:19,300
Again, you know, to extol the virtues further is that if you take a

257
00:12:19,300 --> 00:12:23,900
look at what happens in here, the H file itself includes the

258
00:12:23,900 --> 00:12:24,800
documentation.

259
00:12:25,000 --> 00:12:28,000
So here are some sample programs included, right in the H file for you

260
00:12:28,000 --> 00:12:28,600
to use.

261
00:12:28,800 --> 00:12:31,700
So I don't remember how to use Shawn Barrett's, truetype rasterizer,

262
00:12:31,700 --> 00:12:35,300
it does not matter that I don't remember that, right?

263
00:12:35,900 --> 00:12:36,900
Because it's

264
00:12:37,100 --> 00:12:43,100
The case that, you know, the H file itself, tells me how to use it,

265
00:12:43,100 --> 00:12:43,700
right?

266
00:12:44,100 --> 00:12:47,000
And you can kind of see some examples here, this is a text in 3D API

267
00:12:47,000 --> 00:12:51,500
example and you can kind of see that it actually has the information

268
00:12:51,500 --> 00:12:52,000
that we want.

269
00:12:52,000 --> 00:12:52,500
Exactly.

270
00:12:52,700 --> 00:12:56,100
So here is stb, Big Font bitmap, right?

271
00:12:56,800 --> 00:13:01,900
Which is actually a thing that if you get it, a size rectangle, it

272
00:13:01,900 --> 00:13:05,300
will actually pack all of the fonts into that rectangle.

273
00:13:05,400 --> 00:13:06,100
Exactly.

274
00:13:06,100 --> 00:13:06,900
Like what we

275
00:13:07,000 --> 00:13:08,900
We might want in a game, right?

276
00:13:08,900 --> 00:13:12,200
So he even had built in the thing that we probably want to do.

277
00:13:12,200 --> 00:13:16,100
Now, we don't have to do that, we could instead do something a little

278
00:13:16,100 --> 00:13:18,700
bit more straightforward and do something where we just get the code

279
00:13:18,700 --> 00:13:22,400
point bitmap, where we're basically saying, let's just get one bitmap

280
00:13:22,400 --> 00:13:25,400
of one letter, and since I want to kind of show a little bit more of

281
00:13:25,400 --> 00:13:29,800
this process, I'm not going to use this, but if you were using this

282
00:13:29,800 --> 00:13:32,200
library, and again, one of the reasons I'm doing this is to kind of

283
00:13:32,400 --> 00:13:34,000
give you an example of how to use a library.

284
00:13:34,000 --> 00:13:35,200
What makes a good Library?

285
00:13:35,500 --> 00:13:36,900
Since it is something that's asked very often.

286
00:13:38,100 --> 00:13:40,600
You can see that he's sort of almost done, some of the work for you

287
00:13:40,600 --> 00:13:40,800
here.

288
00:13:40,800 --> 00:13:44,000
It's like there's a utility function that actually does a bunch of

289
00:13:44,000 --> 00:13:46,000
stuff that you might want to do, right?

290
00:13:48,300 --> 00:13:50,600
All right, so if we take a look here at this is more what I'm

291
00:13:50,600 --> 00:13:51,100
interested in.

292
00:13:51,100 --> 00:13:56,700
This is a function that basically generates a bitmap for a given code

293
00:13:56,700 --> 00:13:59,900
point, a given Unicode code point, right?

294
00:14:00,000 --> 00:14:02,800
And so, what I'm going to do is, I'm just going to make a little

295
00:14:02,800 --> 00:14:04,100
function here, right?

296
00:14:04,100 --> 00:14:06,100
Internal Loops avoid.

297
00:14:07,100 --> 00:14:11,000
I'm just gonna make a little function here that does this exact thing,

298
00:14:11,300 --> 00:14:11,900
right?

299
00:14:12,000 --> 00:14:16,000
So here is the function that I want to call.

300
00:14:16,400 --> 00:14:18,000
It's called STP in it font.

301
00:14:18,700 --> 00:14:22,100
We need to give it a place to store the font information which is just

302
00:14:22,100 --> 00:14:23,400
got to declare It On The Stack.

303
00:14:23,400 --> 00:14:24,000
This is St.

304
00:14:24,000 --> 00:14:26,500
B TT font info, you pass an address to that.

305
00:14:27,400 --> 00:14:33,900
And then I need some kind of a buffer right into which it will dump

306
00:14:33,900 --> 00:14:36,300
that font information, right?

307
00:14:37,200 --> 00:14:40,400
I'm sorry that dump of it into which, or I should say, from, which it

308
00:14:40,400 --> 00:14:42,400
will read that font information, right?

309
00:14:42,500 --> 00:14:45,000
So, this would be the font file itself.

310
00:14:45,800 --> 00:14:47,900
Now, we already have a way to do this in hand.

311
00:14:48,100 --> 00:14:48,800
A hero, right?

312
00:14:48,800 --> 00:14:53,300
We have the stuff in ham a platform that's like debug read entire

313
00:14:53,300 --> 00:14:54,300
file, right?

314
00:14:54,300 --> 00:14:55,800
We've got this thing right here.

315
00:14:56,100 --> 00:14:59,800
So we actually have a way of pretty quickly doing exactly what s.

316
00:15:00,000 --> 00:15:01,100
He wants us to do.

317
00:15:01,600 --> 00:15:03,500
And again, you know, just

318
00:15:06,200 --> 00:15:11,800
Not to extol Sean's virtues to extensively here but again it's set up

319
00:15:11,800 --> 00:15:13,500
exactly the way I want.

320
00:15:13,500 --> 00:15:16,200
He's not forcing me to pass them a file handle.

321
00:15:16,700 --> 00:15:19,200
He's not forcing me to pass him a file name.

322
00:15:19,600 --> 00:15:23,000
He's assuming that I already have ways to read files and then I'm

323
00:15:23,000 --> 00:15:25,600
going to want to read files the way I read files.

324
00:15:25,800 --> 00:15:28,200
So he just takes a memory buffer of the file.

325
00:15:28,300 --> 00:15:32,500
That's exactly what I want, right, it's exactly what I want.

326
00:15:32,600 --> 00:15:35,400
It, minimizes dependencies, it makes it so that

327
00:15:35,700 --> 00:15:39,500
Don't have to work around him, he's working around me, right?

328
00:15:39,500 --> 00:15:44,300
And that's really great again, another sign of an intelligently made

329
00:15:44,300 --> 00:15:48,000
Library, it doesn't Force its file I/O on you, right?

330
00:15:48,700 --> 00:15:50,000
So I can do this, right?

331
00:15:50,000 --> 00:15:50,800
I can read the file.

332
00:15:50,800 --> 00:15:52,300
So, here's our ttf file.

333
00:15:52,500 --> 00:15:57,900
I can say, I want to take platform a debug read entire file, and then

334
00:15:57,900 --> 00:16:01,200
I can just pass it some truetype font name, right?

335
00:16:01,600 --> 00:16:05,400
So I don't know what true type font we want to read.

336
00:16:05,500 --> 00:16:05,700
Read.

337
00:16:05,700 --> 00:16:11,600
But I can, for example, pick one out of Windows and here you can see a

338
00:16:11,600 --> 00:16:14,300
giant set of fonts and Ariel dot.

339
00:16:14,300 --> 00:16:16,100
T TF is almost always there.

340
00:16:16,500 --> 00:16:22,000
So I can perhaps just say we will use aerial for the time being,

341
00:16:22,200 --> 00:16:22,800
right?

342
00:16:23,500 --> 00:16:28,800
So I will go ahead and do debug read entire file to read out this font

343
00:16:29,000 --> 00:16:29,400
file

344
00:16:30,800 --> 00:16:36,300
And then after that font files, read I will just pass the entire thing

345
00:16:36,700 --> 00:16:38,500
to Shawn, right?

346
00:16:38,900 --> 00:16:40,100
So I'll say, hey Sean.

347
00:16:40,400 --> 00:16:46,000
Here is the contents of that file work your magic and and that is is

348
00:16:46,000 --> 00:16:48,400
it now get thought offset for index?

349
00:16:48,500 --> 00:16:50,100
I believe is just a thing.

350
00:16:51,100 --> 00:16:51,600
You know what?

351
00:16:51,600 --> 00:16:54,100
To be honest with you, I don't really know what that does.

352
00:16:54,100 --> 00:16:57,600
I don't remember, I don't remember so let's see what that does in it

353
00:16:57,600 --> 00:16:58,200
font.

354
00:16:59,500 --> 00:16:59,900
Let's see.

355
00:17:00,000 --> 00:17:00,300
Here.

356
00:17:01,100 --> 00:17:04,599
And it font takes an offset into the data.

357
00:17:04,599 --> 00:17:05,700
Given an offset into the file.

358
00:17:05,700 --> 00:17:06,800
That defines a font.

359
00:17:06,900 --> 00:17:10,000
This function builds the necessary cash info for the rest of the

360
00:17:10,000 --> 00:17:10,400
system.

361
00:17:10,400 --> 00:17:11,099
You must allocate this.

362
00:17:11,099 --> 00:17:12,000
We find yourself.

363
00:17:12,200 --> 00:17:15,400
Okay, so, so probably, this is just if there's multiple fonts in a

364
00:17:15,400 --> 00:17:18,200
file, I would say so St.

365
00:17:18,200 --> 00:17:21,099
B, TT get font offset or index.

366
00:17:21,800 --> 00:17:25,500
I believe that is what that does each FL TTC file may have more than

367
00:17:25,500 --> 00:17:26,000
one font.

368
00:17:26,000 --> 00:17:28,700
Each one has a sequential index number starting from zero call this

369
00:17:28,700 --> 00:17:29,800
function to get the font.

370
00:17:30,300 --> 00:17:32,300
For a given Index, right?

371
00:17:32,500 --> 00:17:35,300
And so real slow, the first font out of there, but that's so that does

372
00:17:35,300 --> 00:17:36,200
exactly what we guessed.

373
00:17:36,200 --> 00:17:39,900
It would do, if you're trying to load a ttf file that had more than

374
00:17:39,900 --> 00:17:42,900
one font in it, this would be your jam.

375
00:17:43,000 --> 00:17:46,800
So that wouldnít the font then if we want to get a bitmap out of the

376
00:17:46,800 --> 00:17:49,100
font, we call SUV get code plate, bitmap.

377
00:17:49,100 --> 00:17:52,700
Remember like I said on the previous stream a code Point, that's the

378
00:17:52,700 --> 00:17:57,700
name in Unicode, for a particular sort of identifier for a glyph.

379
00:17:57,700 --> 00:17:59,800
It's a numerical identifier that uniquely identifies.

380
00:18:00,000 --> 00:18:04,300
Sighs a particular glyph, like the letter T, the Chinese symbol for

381
00:18:04,300 --> 00:18:07,100
meat, whatever you want that.

382
00:18:08,400 --> 00:18:12,000
So if I come in here and say, okay, we got fonts, we're passing it.

383
00:18:12,000 --> 00:18:15,400
The font that we just sort of initialized and then what we would like

384
00:18:15,400 --> 00:18:20,300
to do is we would like to give it some information about what we want

385
00:18:20,300 --> 00:18:25,100
to do for getting that bitmap and we want to get back some information

386
00:18:25,100 --> 00:18:25,500
from it.

387
00:18:25,500 --> 00:18:25,700
Okay.

388
00:18:25,700 --> 00:18:27,100
So, what is that information?

389
00:18:27,400 --> 00:18:31,000
Well, first of all, you can see here that, this sort of this, see, I

390
00:18:31,000 --> 00:18:32,600
happen to just kind of know how this works.

391
00:18:32,600 --> 00:18:34,700
But again, if you didn't know how it works, you'd go in here.

392
00:18:36,800 --> 00:18:37,900
To the documentation.

393
00:18:38,100 --> 00:18:40,400
It would tell you what it is, scale X scale, why?

394
00:18:40,400 --> 00:18:41,100
The code point.

395
00:18:41,100 --> 00:18:43,800
The width, the height, the X offset the White House said, it's Etc,

396
00:18:43,800 --> 00:18:44,300
right?

397
00:18:45,000 --> 00:18:48,200
And so what that does is that allows me to basically get back

398
00:18:48,200 --> 00:18:51,900
information about what the code point bitmap was that was generated.

399
00:18:51,900 --> 00:18:56,000
And the return value is actually the bitmap and it's literally the

400
00:18:56,000 --> 00:18:58,600
bitmap exactly, the way that we've been thinking about bitmaps.

401
00:18:58,600 --> 00:19:01,500
The only difference here is it's a monochrome bitmap like I was

402
00:19:01,500 --> 00:19:03,700
talking about yesterday.

403
00:19:04,000 --> 00:19:06,300
There's really no need to store colors and fonts because

404
00:19:06,500 --> 00:19:10,300
Fonts don't have color information, they're just black and white.

405
00:19:10,300 --> 00:19:13,500
So really all you're getting a 0 to 255, which is about the

406
00:19:13,500 --> 00:19:14,800
anti-aliasing of the font.

407
00:19:14,800 --> 00:19:15,900
And that's it, right?

408
00:19:17,500 --> 00:19:19,900
So we'll start start with that right?

409
00:19:20,700 --> 00:19:24,600
We'll do a little thing here where we go ahead and get the bitmap so

410
00:19:24,600 --> 00:19:26,500
this is the mono bitmap right?

411
00:19:27,400 --> 00:19:28,500
Get code point bitmap.

412
00:19:28,500 --> 00:19:30,500
This is the font that we want, right?

413
00:19:30,800 --> 00:19:34,400
And then we've got scale X scale, y, if the zero, I believe, if you

414
00:19:34,400 --> 00:19:37,800
pass in the scalex just means whatever the scale would nor would be

415
00:19:38,100 --> 00:19:41,500
because my assumption given the Y scale, right?

416
00:19:42,700 --> 00:19:47,400
Now the Y scale is a little tricky and the reason for that is because

417
00:19:47,600 --> 00:19:51,100
the Y scale is not actually given in units that you would care about

418
00:19:51,100 --> 00:19:52,100
in a true type font file.

419
00:19:52,100 --> 00:19:55,000
I think it's given in points or something like this and typically we

420
00:19:55,000 --> 00:19:56,200
want pixels.

421
00:19:56,400 --> 00:20:00,300
And so again being a pretty cool Library, Sean already knew that.

422
00:20:00,800 --> 00:20:04,000
And so what he did is he provided a utility function for us, right?

423
00:20:04,200 --> 00:20:07,400
Which is s EV T, scale for Pixel height.

424
00:20:07,400 --> 00:20:10,200
And what that does is it says given the pixels

425
00:20:11,000 --> 00:20:12,500
And a particular font.

426
00:20:14,300 --> 00:20:15,500
Produce the value.

427
00:20:15,500 --> 00:20:19,600
I should ask you for if I were to want this many pixels tall for the

428
00:20:19,600 --> 00:20:21,400
total font height, right?

429
00:20:21,600 --> 00:20:23,200
So that's a pretty great thing right there, right?

430
00:20:23,200 --> 00:20:24,800
We can just say look you know what?

431
00:20:25,000 --> 00:20:29,800
We want to 20 pixels tall thing maybe since this is a you know a test

432
00:20:29,800 --> 00:20:33,200
one, we want something higher like 128, right?

433
00:20:33,500 --> 00:20:34,900
So it's a big old tall letter

434
00:20:36,400 --> 00:20:37,200
And that's fine.

435
00:20:37,700 --> 00:20:41,800
So we do SUV code Point bitmap that's going to get that for us at 128

436
00:20:41,800 --> 00:20:42,700
pixels tall.

437
00:20:43,300 --> 00:20:46,400
We then pass the actual Unicode code point that we want now since the

438
00:20:46,400 --> 00:20:51,000
Unicode code points on the an C code points happen, to correspond for

439
00:20:51,000 --> 00:20:54,700
the letters that we would care about in ASCII, we could just say that

440
00:20:54,700 --> 00:20:58,100
the letter that we want is an S4 Sean or perhaps you would prefer an

441
00:20:58,100 --> 00:20:59,000
end for nothing's.

442
00:20:59,000 --> 00:20:59,700
I don't know.

443
00:21:00,000 --> 00:21:04,100
Did ask him ahead of time, but presumably one of those two.

444
00:21:04,100 --> 00:21:10,400
We will ask for an n and then when we get back, our width and height.

445
00:21:10,400 --> 00:21:13,800
Again, if we go back to the documentation for get code Point metrics,

446
00:21:13,800 --> 00:21:19,500
oops, get code Point bitmap, rather you can see that at the end here

447
00:21:19,500 --> 00:21:22,000
we get back a bunch of information, right?

448
00:21:22,000 --> 00:21:27,800
So, we can get a width, we can get a height, we can get an X offset,

449
00:21:27,800 --> 00:21:28,700
and we can get a y offset.

450
00:21:28,700 --> 00:21:29,900
And what are

451
00:21:30,000 --> 00:21:31,200
Oh, those values, right?

452
00:21:31,200 --> 00:21:35,300
Well, the width and height are just how big that bitmap is, that comes

453
00:21:35,300 --> 00:21:38,500
back just like we've been working with this whole time and the X

454
00:21:38,500 --> 00:21:40,200
offset and the Y offset.

455
00:21:40,200 --> 00:21:45,900
Our this sort of, if you, you know, he's getting us back a bit map

456
00:21:46,300 --> 00:21:48,600
that, I believe that.

457
00:21:48,900 --> 00:21:49,700
Well, actually, you know what?

458
00:21:49,700 --> 00:21:50,300
I don't know.

459
00:21:50,600 --> 00:21:54,200
I think it gives us back a bit map, that's the tightest bound bitmap.

460
00:21:54,200 --> 00:21:57,100
So it's basically a bitmap that that has no empty space around it.

461
00:21:57,100 --> 00:21:59,700
I believe we'll see you in a second and the

462
00:22:00,000 --> 00:22:04,800
Offset in the Y offset our how you would displace that bitmap to align

463
00:22:04,800 --> 00:22:06,300
it with the rest of the font.

464
00:22:06,900 --> 00:22:10,500
I believe meaning that you know if you have the letter A well it's

465
00:22:10,500 --> 00:22:12,000
kind of a tiny bit map.

466
00:22:13,700 --> 00:22:19,600
And so, it has to be adjusted relative to an H, which is much taller

467
00:22:19,600 --> 00:22:21,400
in order to line them up potentially, right?

468
00:22:21,400 --> 00:22:25,600
So the Y offset might be a thing that's all so but we'll play around

469
00:22:25,600 --> 00:22:26,200
that in a second.

470
00:22:29,400 --> 00:22:32,100
I also pretty sure that Sean does top-down bitmaps.

471
00:22:32,900 --> 00:22:37,100
So we're going to have a little upside down fun happening here and I

472
00:22:37,100 --> 00:22:43,100
don't know if he supports, yeah, top to bottom, right?

473
00:22:43,200 --> 00:22:45,800
So I don't think there's any way to do bottom up in his system, so

474
00:22:45,800 --> 00:22:49,300
we're going to have to do, do a flip of the result of this.

475
00:22:49,300 --> 00:22:54,200
But that's basically it, I think there's a free in here probably for

476
00:22:54,200 --> 00:22:56,300
code Point bitmap.

477
00:22:56,900 --> 00:22:59,000
Hopefully because

478
00:22:59,200 --> 00:23:04,200
You have allocate some memory for it.

479
00:23:05,600 --> 00:23:13,400
Am I missed remembering this free STD free.

480
00:23:17,600 --> 00:23:18,600
Do not know.

481
00:23:19,800 --> 00:23:24,700
Do not know feel like it does need to be freed, don't remember.

482
00:23:26,300 --> 00:23:29,100
But I feel like we should know.

483
00:23:29,100 --> 00:23:34,300
So get code Point bitmap, does it say in the documentation?

484
00:23:38,600 --> 00:23:39,800
so, I guess

485
00:23:41,300 --> 00:23:43,500
Oh it's right above it.

486
00:23:43,800 --> 00:23:45,500
The one place I did not look.

487
00:23:45,800 --> 00:23:46,200
So yeah.

488
00:23:46,200 --> 00:23:47,600
So after we do that

489
00:23:49,500 --> 00:23:51,200
we'll get rid of it, right?

490
00:23:51,900 --> 00:23:54,700
So this is really all there is to it.

491
00:23:55,300 --> 00:23:58,100
There's some more stuff that we're going to do here, but we'll call

492
00:23:58,100 --> 00:23:59,800
this like make nothings.

493
00:24:00,400 --> 00:24:02,600
Test or something, right?

494
00:24:03,100 --> 00:24:04,900
And, and we'll deal with that in a second.

495
00:24:04,900 --> 00:24:09,600
But okay, so if we take a look here, cannot convert from void.

496
00:24:09,600 --> 00:24:10,200
Start outside care.

497
00:24:10,200 --> 00:24:15,300
So, so, he wants these is as you eight stars for whatever reason.

498
00:24:16,000 --> 00:24:18,100
So we'll go ahead and pass this, probably because we're compiling and

499
00:24:18,100 --> 00:24:19,600
C++ mod P compiles.

500
00:24:19,600 --> 00:24:20,100
The sea.

501
00:24:20,300 --> 00:24:22,800
So you probably never even knows about those sorts of things.

502
00:24:23,800 --> 00:24:25,600
Free bitmap does not take one at.

503
00:24:25,600 --> 00:24:27,700
That's true, doesn't takes a user data.

504
00:24:27,700 --> 00:24:29,900
In case you wanted to pass like an arena thing or something.

505
00:24:30,000 --> 00:24:30,300
It.

506
00:24:31,000 --> 00:24:32,000
So that's really it.

507
00:24:32,400 --> 00:24:35,800
That's the entirety of of how we would have to actually interface with

508
00:24:35,800 --> 00:24:39,200
Library again, really?

509
00:24:39,200 --> 00:24:39,900
Really good.

510
00:24:39,900 --> 00:24:41,200
Work here, right.

511
00:24:41,700 --> 00:24:44,800
If all libraries were written this way, handmade hero would probably

512
00:24:44,800 --> 00:24:45,400
be called.

513
00:24:45,400 --> 00:24:48,300
Let's use a ton of libraries to make our game right, but they never

514
00:24:48,300 --> 00:24:50,800
are and so, there you go.

515
00:24:50,800 --> 00:24:54,200
But anyway, so really, really nice.

516
00:24:54,300 --> 00:24:56,400
I tried to point out a number of things that it does, right?

517
00:24:56,700 --> 00:24:59,800
But you can kind of you can just into it, you can see

518
00:25:00,000 --> 00:25:01,400
This was an arbitrary code base.

519
00:25:01,400 --> 00:25:04,000
Handmade hero shots never seen before, right?

520
00:25:04,200 --> 00:25:07,100
It just drops in, right?

521
00:25:07,100 --> 00:25:11,500
It just drops right on in and the amount of work you had to do to get

522
00:25:11,500 --> 00:25:11,700
out.

523
00:25:11,700 --> 00:25:16,300
The thing you wanted was minimal, right was minimal.

524
00:25:16,700 --> 00:25:20,500
Compare this to any say, modern, Microsoft API, or any of the sorts of

525
00:25:20,500 --> 00:25:21,900
things that you see these days.

526
00:25:22,400 --> 00:25:26,700
And it's just laughable, how huge they are and how many lines of code,

527
00:25:26,700 --> 00:25:28,200
it takes to do basic things.

528
00:25:28,700 --> 00:25:29,800
And this right here is

529
00:25:29,900 --> 00:25:33,300
Exactly what you actually want out of a library, you just want,

530
00:25:33,400 --> 00:25:36,100
whatever it was that you were going to do, you want to just call that

531
00:25:36,100 --> 00:25:36,400
thing.

532
00:25:36,400 --> 00:25:37,400
And that's it, right?

533
00:25:37,400 --> 00:25:41,300
And he's really, you know, again just kind of showing how it's done,

534
00:25:41,400 --> 00:25:42,600
you know, that is how it's done.

535
00:25:43,500 --> 00:25:46,300
So let's actually see that this worked, let's actually do something

536
00:25:46,300 --> 00:25:46,400
here.

537
00:25:46,400 --> 00:25:50,900
Let's translate his bitmap into one of the bitmaps that we could use,

538
00:25:50,900 --> 00:25:54,600
for example like a like a loaded bitmap, right?

539
00:25:54,900 --> 00:25:57,200
So I believe we have a make empty bitmap call here.

540
00:25:57,600 --> 00:25:59,200
You know like this.

541
00:26:00,000 --> 00:26:05,100
Let's go ahead and do make, empty bitmap and and we'll just, you know,

542
00:26:06,800 --> 00:26:10,700
we'll just call this that, at start up to, to make ourselves a bit map

543
00:26:10,700 --> 00:26:12,500
of the letter N, right?

544
00:26:13,500 --> 00:26:14,500
So let's do that.

545
00:26:14,600 --> 00:26:18,900
So okay, we'll put the memory read in here, that we need it to use.

546
00:26:19,100 --> 00:26:20,400
I think that's about it.

547
00:26:20,600 --> 00:26:22,600
So we'll just say, okay, make make a

548
00:26:24,800 --> 00:26:28,400
An empty bitmap, we know what the width and height would be because

549
00:26:28,400 --> 00:26:31,700
Sean told us what they were and we don't need to clear to zero because

550
00:26:31,700 --> 00:26:35,900
we're about to actually do all of that work ourselves, right?

551
00:26:36,000 --> 00:26:40,300
So we can then step through every sort of pixel here.

552
00:26:40,300 --> 00:26:46,700
Oops, every sort of pixel that's in this bitmap and we can do our own

553
00:26:47,400 --> 00:26:52,000
translation to our style of bitmap, which happens to be 32 bits per

554
00:26:52,000 --> 00:26:54,400
pixel, not I'm sorry.

555
00:26:54,700 --> 00:26:57,200
Four bytes per pixel size probably it rather than one bite.

556
00:26:57,200 --> 00:26:59,200
Bristly, Sean is 8 bits per pixel, right?

557
00:26:59,200 --> 00:26:59,700
For mono.

558
00:27:00,700 --> 00:27:02,800
So all we would have to do to do that again.

559
00:27:02,800 --> 00:27:04,700
Not particularly tricky.

560
00:27:05,200 --> 00:27:08,000
All we have to do that is we take our loaded bitmap that we get here.

561
00:27:08,000 --> 00:27:13,100
So loaded bitmap result and we'd probably just return that as well.

562
00:27:13,100 --> 00:27:16,900
There's are loaded bitmap, let's go ahead and return that here.

563
00:27:17,500 --> 00:27:20,400
All you would have to do is be able to access our loaded bitmap.

564
00:27:20,400 --> 00:27:22,100
That's again pretty easy.

565
00:27:22,300 --> 00:27:26,400
It's just a the the address is obviously just going to be that result

566
00:27:26,400 --> 00:27:28,700
memory the the

567
00:27:30,900 --> 00:27:32,800
That we could actually do this with the skirt of the standard row,

568
00:27:32,800 --> 00:27:34,700
pointer thing that we normally do.

569
00:27:35,100 --> 00:27:39,400
We could just say, okay, we've got, we've got sort of a destination

570
00:27:40,400 --> 00:27:42,400
and here we've got sort of our row.

571
00:27:42,500 --> 00:27:46,700
This is our Destro, that's going to be our result memory.

572
00:27:49,900 --> 00:27:52,000
And this is going to be despero.

573
00:27:53,200 --> 00:27:56,000
And we just do part Des plus plus.

574
00:27:56,000 --> 00:27:59,200
So writing into this a nation and what we want to do here is we just

575
00:27:59,200 --> 00:28:04,300
want to write in essentially white with Sean's value as the alpha,

576
00:28:04,600 --> 00:28:05,200
right?

577
00:28:05,200 --> 00:28:08,500
So we kind of want something where it's going to be premultiplied,

578
00:28:08,500 --> 00:28:11,000
Alpha bitmap, I guess would be the way to say it, right?

579
00:28:11,200 --> 00:28:14,000
And so if you think about what a premultiplied alpha bitmap would be,

580
00:28:14,200 --> 00:28:16,900
it's just the alpha value replicated, right?

581
00:28:17,000 --> 00:28:20,500
Because if we're going to have 1, 1, 1 as the color and we're

582
00:28:20,500 --> 00:28:22,800
multiplying by the alpha value, it's just going to be the alpha value.

583
00:28:23,000 --> 00:28:24,800
All four channels, right?

584
00:28:25,200 --> 00:28:28,900
So really all we're talking about here is doing that pack again,

585
00:28:29,000 --> 00:28:29,300
right?

586
00:28:29,300 --> 00:28:32,600
So, whatever the alpha is, it's just the alpha goes there.

587
00:28:33,000 --> 00:28:38,800
The alpha goes here, the alpha goes here and the alpha goes here.

588
00:28:39,000 --> 00:28:41,500
Right is all that we would be talking about, right?

589
00:28:42,100 --> 00:28:46,200
So that Alpha value is just going to be the mono bitmap pointer and

590
00:28:46,200 --> 00:28:48,900
we're just going to call that Source since we read The Source in order

591
00:28:48,900 --> 00:28:49,400
and Shawn.

592
00:28:49,400 --> 00:28:50,900
I believe packs them densely.

593
00:28:51,300 --> 00:28:52,800
It's literally just reading it.

594
00:28:52,900 --> 00:28:55,200
It out one by one.

595
00:28:55,500 --> 00:28:58,600
And then at the end here, we just Advanced by our pitch.

596
00:28:58,600 --> 00:28:59,800
Now, we started a half-hour late.

597
00:28:59,800 --> 00:29:01,100
So we've got a whole half-hour to go here.

598
00:29:01,100 --> 00:29:04,700
We're nowhere near Q&A so nobody get too excited about that.

599
00:29:05,700 --> 00:29:07,000
But yeah, so there we go.

600
00:29:07,800 --> 00:29:09,600
So that's roughly what we're looking at here.

601
00:29:10,900 --> 00:29:15,600
Got to do a little bit of cleanup, but I think that's about it.

602
00:29:15,800 --> 00:29:18,400
So it looks like these are actually in stare, right?

603
00:29:18,500 --> 00:29:21,400
So those RS, 32, oops, that

604
00:29:23,400 --> 00:29:29,200
Rather that and I think that is basically it.

605
00:29:29,300 --> 00:29:33,100
So, let's see, we've got our Alpha that's missing in or sign.

606
00:29:33,100 --> 00:29:34,300
Other than that.

607
00:29:34,800 --> 00:29:35,700
We are good to go.

608
00:29:35,700 --> 00:29:39,500
So that just Alpha replicates out there and produces, you know, the

609
00:29:39,600 --> 00:29:43,700
color bitmap for a mono bitmap, right?

610
00:29:44,200 --> 00:29:45,800
Nothing particularly weird going on there.

611
00:29:46,100 --> 00:29:50,700
So that would create us a bitmap assuming that I haven't horribly

612
00:29:50,700 --> 00:29:51,800
ruined everything.

613
00:29:52,900 --> 00:29:54,400
By some kind of mistake in the code.

614
00:29:54,500 --> 00:29:59,100
And so I'll just go ahead and add in here to where we kind of store,

615
00:29:59,100 --> 00:29:59,800
random stuff like this.

616
00:30:00,100 --> 00:30:05,000
I think we tend to have a few of these sitting around test font or

617
00:30:05,000 --> 00:30:11,200
something and I will just make it so that game state test font, right?

618
00:30:12,900 --> 00:30:17,900
Is going to be made like that, right?

619
00:30:18,100 --> 00:30:22,400
So down in here when we first start up the game after we initialize

620
00:30:22,700 --> 00:30:24,800
the World Arena let's say sure why not?

621
00:30:25,100 --> 00:30:29,800
We'll just go ahead and make the test font like so and I'll just

622
00:30:30,100 --> 00:30:32,300
Sure, use the World Arena does not matter.

623
00:30:32,400 --> 00:30:34,200
Do not care, right?

624
00:30:35,400 --> 00:30:36,000
So there we go.

625
00:30:36,400 --> 00:30:39,400
So in theory, you know, if I haven't done anything horrible, that will

626
00:30:39,400 --> 00:30:41,300
at least run, we won't see anything on the screen because we never

627
00:30:41,300 --> 00:30:43,800
drawn anything at that bitmap but we can Rectify that very quickly

628
00:30:43,800 --> 00:30:44,300
certainly.

629
00:30:45,300 --> 00:30:47,100
So let's go ahead and there we go.

630
00:30:47,800 --> 00:30:49,900
So that's actually creating the bitmap or just not running it.

631
00:30:49,900 --> 00:30:53,100
So let's go ahead now and run it and I feel like the right place to

632
00:30:53,100 --> 00:30:55,900
put this would be in our heads viewing code.

633
00:30:56,300 --> 00:30:58,600
That seems like kind of the obvious place for it.

634
00:30:58,900 --> 00:30:59,800
So instead of spewing

635
00:31:00,100 --> 00:31:04,500
As we could, instead just spew a ton of.

636
00:31:05,700 --> 00:31:09,600
Yeah, I mean a ton of ends, why not, right.

637
00:31:10,100 --> 00:31:11,600
So we've got the particle being rendered.

638
00:31:11,600 --> 00:31:14,100
Here, I'll go ahead and say let's not do that.

639
00:31:14,400 --> 00:31:18,100
Instead of doing that, lets go ahead and do our test fonts which I

640
00:31:18,100 --> 00:31:18,800
assume would work.

641
00:31:18,800 --> 00:31:19,400
Fine.

642
00:31:20,400 --> 00:31:23,000
Push bitmap, what is the problem?

643
00:31:23,000 --> 00:31:27,600
Loaded bitmap needs to be an address that's fine and so let's run it

644
00:31:28,700 --> 00:31:29,800
and see how we did.

645
00:31:29,900 --> 00:31:30,100
Did.

646
00:31:30,300 --> 00:31:32,800
Oh, so disappointing.

647
00:31:33,800 --> 00:31:34,800
Where are they?

648
00:31:37,000 --> 00:31:40,300
That's just cruel, really right when you think about it.

649
00:31:41,200 --> 00:31:42,400
So let's go back up here.

650
00:31:42,400 --> 00:31:47,200
Let's step into this and see what what I did wrong there.

651
00:31:48,300 --> 00:31:49,500
What would I would I call that function?

652
00:31:49,500 --> 00:31:55,300
I never remember make nothing's test so let's see here.

653
00:31:55,600 --> 00:31:56,600
What did we do wrong?

654
00:31:56,600 --> 00:31:57,900
Let's let's step in.

655
00:31:58,300 --> 00:31:59,800
Let's step into this guy.

656
00:32:01,500 --> 00:32:04,000
Destro particles result pitch.

657
00:32:04,600 --> 00:32:04,900
It goes.

658
00:32:04,900 --> 00:32:06,200
Destro that's Parts.

659
00:32:06,200 --> 00:32:07,100
Correct.

660
00:32:07,200 --> 00:32:12,400
Thesaurus steps through for every pixel, which is also correct.

661
00:32:13,300 --> 00:32:18,200
That looks roughly right to me.

662
00:32:19,300 --> 00:32:22,200
That looks roughly, right?

663
00:32:22,800 --> 00:32:28,600
I would say so I'm going to go ahead, I'll see anything obviously

664
00:32:28,600 --> 00:32:28,900
wrong.

665
00:32:28,900 --> 00:32:33,100
So I'm going to continue with what I just said and step into it.

666
00:32:35,200 --> 00:32:36,500
I think that's the only sane thing to do.

667
00:32:37,700 --> 00:32:40,500
I think that's the only sane thing to do.

668
00:32:41,800 --> 00:32:47,300
So let's go ahead and go here.

669
00:32:48,100 --> 00:32:51,300
I assume we actually load this file correctly let's find out if that's

670
00:32:51,300 --> 00:32:51,900
true.

671
00:32:52,500 --> 00:32:55,800
We do you can see that that actually has some contents there will

672
00:32:55,800 --> 00:32:58,000
initialize the font will take a look.

673
00:32:58,000 --> 00:32:59,800
Num glyphs 3,400

674
00:33:00,000 --> 00:33:05,100
That's a lot of cliffs, must have a lot of Unicode in there in aerial.

675
00:33:06,300 --> 00:33:09,600
So it looks, you know, I mean, I feel like that's a reasonable set of

676
00:33:09,600 --> 00:33:09,900
things.

677
00:33:09,900 --> 00:33:13,200
They're certainly let's see how mono bitmap Works amount.

678
00:33:13,200 --> 00:33:19,600
A bitmap comes back, just fine, the width and the height 66 and 83

679
00:33:19,800 --> 00:33:22,200
totally seem reasonable to me.

680
00:33:23,800 --> 00:33:25,600
Nothing particularly we're going on there.

681
00:33:26,500 --> 00:33:29,800
So let's see here, source and desktop

682
00:33:30,000 --> 00:33:34,300
So we come through here, let's take a look or Alpha value.

683
00:33:34,300 --> 00:33:35,300
Here is one

684
00:33:36,600 --> 00:33:38,300
Set a breakpoint there.

685
00:33:39,700 --> 00:33:42,100
So we so we should have been seeing something.

686
00:33:42,200 --> 00:33:46,200
I mean, an alpha value of 4 is certainly very faint, but we should

687
00:33:46,200 --> 00:33:48,400
have been seeing something, right?

688
00:33:48,400 --> 00:33:49,800
I'm going to step to the next row.

689
00:33:53,600 --> 00:33:57,500
I mean there's an alpha value of 70 so clearly I mess something up.

690
00:33:58,100 --> 00:33:58,500
You know?

691
00:33:58,700 --> 00:34:05,300
Unsurprisingly Sean did not make a mistake, I made a mistake and you

692
00:34:05,300 --> 00:34:09,100
know that's that's just how it goes sometimes.

693
00:34:09,500 --> 00:34:14,600
Now it could be that these aren't getting extended to 32-bit that is a

694
00:34:14,600 --> 00:34:15,900
very possible thing.

695
00:34:16,000 --> 00:34:17,699
Let's see if that's true.

696
00:34:19,500 --> 00:34:22,400
So I'm going to take a look at one previous.

697
00:34:25,500 --> 00:34:26,500
From the test.

698
00:34:26,500 --> 00:34:28,800
I want to see what its hexadecimal value is.

699
00:34:29,900 --> 00:34:31,900
That doesn't make a whole lot of sense to me.

700
00:34:32,000 --> 00:34:33,199
What was the alpha value?

701
00:34:34,600 --> 00:34:36,900
Last time around, of course you won't tell me.

702
00:34:38,400 --> 00:34:40,600
So let's see what the alpha value is now it's F.

703
00:34:41,000 --> 00:34:42,199
So my destination is f.

704
00:34:42,199 --> 00:34:47,600
So I don't know what's that looks like I'm doing it properly, right?

705
00:34:49,000 --> 00:34:51,199
At least the trip, seems like it to me.

706
00:34:52,100 --> 00:34:52,300
Yeah.

707
00:34:52,300 --> 00:34:55,300
So that would be full Alpha full white, right?

708
00:34:56,300 --> 00:34:58,700
So that seems pretty good to me.

709
00:35:01,000 --> 00:35:02,700
With height pitch.

710
00:35:03,300 --> 00:35:05,200
So I don't know what's going on there.

711
00:35:05,300 --> 00:35:07,400
That's a little odd to me.

712
00:35:08,800 --> 00:35:13,500
To be honest, that seems a little odd.

713
00:35:14,100 --> 00:35:17,900
So let's hop down to our particle system and see if I did something

714
00:35:18,600 --> 00:35:22,500
separately stupid because that looks like it's a reasonable thing to

715
00:35:22,500 --> 00:35:23,000
want to do.

716
00:35:25,300 --> 00:35:26,100
Hop over here.

717
00:35:27,800 --> 00:35:31,200
Alright, so let's take a look at gamestate Testament.

718
00:35:32,400 --> 00:35:35,500
Hoops state test, aunt.

719
00:35:37,500 --> 00:35:39,600
And let's take a look at that memory.

720
00:35:40,400 --> 00:35:45,400
In fact, I could probably just do this and look at that location.

721
00:35:46,500 --> 00:35:52,600
So you know, pretty clearly there is data there, this should be

722
00:35:52,600 --> 00:35:53,000
drawing.

723
00:35:53,000 --> 00:35:59,900
So I don't really super understand why I'm not seeing

724
00:36:00,000 --> 00:36:05,400
Thing there that is, that feels kind of odd to me.

725
00:36:05,700 --> 00:36:12,200
So, I must be missing some obvious thing, right?

726
00:36:15,200 --> 00:36:16,800
That is the problem right there.

727
00:36:17,200 --> 00:36:22,300
We've never updated our make empty bitmap function to obey the new

728
00:36:22,300 --> 00:36:23,400
rules of bitmaps.

729
00:36:24,900 --> 00:36:25,400
Right?

730
00:36:26,500 --> 00:36:32,400
You remember this tell me you remember this sort of using old Tesco

731
00:36:32,400 --> 00:36:33,900
that we don't really use for anything anymore.

732
00:36:34,100 --> 00:36:39,100
So we need to initialize some other things that are based on the

733
00:36:39,100 --> 00:36:41,000
inputs to this function, right.

734
00:36:41,100 --> 00:36:44,500
We need to actually do with over-height, right?

735
00:36:44,500 --> 00:36:49,500
And I could do a safe ratio one of width over height, right?

736
00:36:49,500 --> 00:36:50,200
For example.

737
00:36:52,200 --> 00:36:53,400
And the Align percentage.

738
00:36:53,400 --> 00:36:57,600
Again, we don't care about weakness Center the end about itself and

739
00:36:57,600 --> 00:36:58,400
that's all fine.

740
00:36:59,300 --> 00:37:00,200
So that's better.

741
00:37:01,000 --> 00:37:01,500
So yeah.

742
00:37:03,800 --> 00:37:07,400
Just some old sale code, they're not really a big deal, again really

743
00:37:07,400 --> 00:37:08,400
easy to track down.

744
00:37:09,000 --> 00:37:12,000
So there's our ends as lovely as they are.

745
00:37:13,300 --> 00:37:15,400
And so, you can see something about our ends.

746
00:37:15,400 --> 00:37:19,100
I suppose, we are ends are a little bit large, so maybe we should.

747
00:37:20,000 --> 00:37:22,800
You know, that that's pretty big, maybe we should go in here and to

748
00:37:22,800 --> 00:37:26,900
turn those down a little bit, you know.

749
00:37:30,100 --> 00:37:32,800
Say that small.

750
00:37:33,100 --> 00:37:33,700
There we go.

751
00:37:34,900 --> 00:37:38,600
So there's our ends for, of course, standing for nothing's.

752
00:37:39,500 --> 00:37:44,900
And if you take a look at what's going on there, you can see that the

753
00:37:44,900 --> 00:37:46,100
ends are.

754
00:37:46,100 --> 00:37:48,700
Well, I guess you, you might not know, right?

755
00:37:48,700 --> 00:37:52,000
If you looked at the ends, you might not know whether the ends are

756
00:37:52,000 --> 00:37:56,400
upside down or, or left to right flipped, right?

757
00:37:56,400 --> 00:37:57,900
You can't really tell, but you do know that,

758
00:37:58,000 --> 00:38:00,500
Something's wrong with the ends right there, not the correct way

759
00:38:00,500 --> 00:38:01,200
around.

760
00:38:02,300 --> 00:38:05,100
And so I happen to know, just because I've used to be Library far, but

761
00:38:05,100 --> 00:38:08,000
we also, I pointed out in the comments just a minute ago.

762
00:38:08,500 --> 00:38:12,800
Is that the STP Library assumes that bitmaps are top-down, right?

763
00:38:13,400 --> 00:38:16,500
And so top-down bitmaps are the opposite of our convention.

764
00:38:16,500 --> 00:38:18,400
Our convention for maps is bottom up.

765
00:38:19,000 --> 00:38:23,900
So what we want to do for this is we want to flip his bitmaps around

766
00:38:23,900 --> 00:38:27,800
when we load them, so ends will be right ways round, right?

767
00:38:28,600 --> 00:38:32,000
so, if we were to do that, if we were to go into the code here,

768
00:38:34,200 --> 00:38:37,700
We've already got something that's converting it from mono to color,

769
00:38:37,800 --> 00:38:38,400
right?

770
00:38:38,400 --> 00:38:43,400
So really all we need to do here is just do this, you know, make this

771
00:38:43,400 --> 00:38:44,300
bitmap right.

772
00:38:44,400 --> 00:38:46,900
The other way is round which would be really easy for us to do, right?

773
00:38:46,900 --> 00:38:50,900
If we could just step the pitch backwards and and start out on the

774
00:38:50,900 --> 00:38:52,400
last row, right?

775
00:38:52,700 --> 00:38:58,600
We'd just start at, you know, Advanced pre Advance the pointer to be

776
00:38:58,600 --> 00:38:59,800
starting at that last row.

777
00:39:00,000 --> 00:39:02,300
Then we just write the rose in reverse order.

778
00:39:02,300 --> 00:39:07,300
That's a pretty trivial way to flip it around and then, hey, guess

779
00:39:07,300 --> 00:39:08,000
what our answer?

780
00:39:08,000 --> 00:39:11,000
Right side up, but it's going to be aware of right now.

781
00:39:11,000 --> 00:39:12,900
The stb library has that convention?

782
00:39:13,100 --> 00:39:17,400
And so when we do our asset processing, we need that to to work.

783
00:39:18,300 --> 00:39:19,100
Now, that's it.

784
00:39:20,400 --> 00:39:21,900
That's all right.

785
00:39:22,100 --> 00:39:25,500
Like I said, this is why when people ask me, if you're going to use

786
00:39:25,500 --> 00:39:26,900
libraries, which would you use?

787
00:39:27,000 --> 00:39:30,500
And I always say the sdp libraries because without fail, they go in

788
00:39:30,500 --> 00:39:34,800
clean, they're easy to use their thought through.

789
00:39:34,800 --> 00:39:40,400
You know, it's just it's very a very, very good set of architectural,

790
00:39:40,400 --> 00:39:43,400
libraries, that can really quickly give you access to a bunch of

791
00:39:43,400 --> 00:39:47,600
really great stuff without all the headache and problematic aspects

792
00:39:47,600 --> 00:39:50,000
that are that plague almost all libraries, which

793
00:39:50,200 --> 00:39:53,100
Is honestly why I don't use any libraries at work, other than

794
00:39:53,600 --> 00:39:59,100
occasionally, the stb libraries, but like I said, I don't want to have

795
00:39:59,100 --> 00:40:01,500
any Library usage in the actual game proper.

796
00:40:01,900 --> 00:40:04,400
So, now that I've kind of shown you how that works in a way that you

797
00:40:04,400 --> 00:40:08,000
can immediately see really where this belongs is in the asset Builder,

798
00:40:08,000 --> 00:40:11,700
where I said that libraries were, okay.

799
00:40:11,700 --> 00:40:16,800
And so if I were to go ahead and drop that back in, here we can sort

800
00:40:16,800 --> 00:40:20,000
of conclude this true type Library Chauncy.

801
00:40:20,100 --> 00:40:22,200
Beautiful library in our asset Builder.

802
00:40:22,600 --> 00:40:27,300
And then when we're doing our astral, our loads and stuff to loading

803
00:40:27,300 --> 00:40:29,400
and processing are like bitmaps and waves.

804
00:40:29,400 --> 00:40:34,700
And that stuff we can do something here where we will process the

805
00:40:34,700 --> 00:40:35,600
actual fonts.

806
00:40:35,900 --> 00:40:36,400
Right.

807
00:40:37,400 --> 00:40:42,300
I'm at that out right now because it's kind of made to be working in.

808
00:40:43,900 --> 00:40:44,300
How should I say?

809
00:40:44,300 --> 00:40:45,100
It's

810
00:40:46,600 --> 00:40:49,900
it's we wrote it with like the arena and the load Tire found, whatever

811
00:40:49,900 --> 00:40:50,200
the gets.

812
00:40:50,200 --> 00:40:52,900
It's not the right type of code, but we're going to want to use basic

813
00:40:52,900 --> 00:40:53,400
that same code.

814
00:40:53,400 --> 00:40:54,800
So I don't want delete it, right?

815
00:40:54,800 --> 00:40:59,200
We're going to be able to use that, so I can go ahead and get rid of

816
00:40:59,200 --> 00:41:00,400
all the tests that stuff.

817
00:41:00,400 --> 00:41:04,700
Now, you know, that can go away and we can go ahead and do that.

818
00:41:05,100 --> 00:41:08,000
And so now we're back to the way we're building before.

819
00:41:08,000 --> 00:41:11,200
But I have moved the stb library out of the game where I said no

820
00:41:11,200 --> 00:41:14,500
libraries allowed into the asset processor where I said libraries are

821
00:41:14,500 --> 00:41:14,900
fine.

822
00:41:15,400 --> 00:41:16,000
So

823
00:41:16,400 --> 00:41:20,400
If it were in here, we now have to have a way of sort of processing

824
00:41:20,400 --> 00:41:26,800
these fonts into usable format by the game, right?

825
00:41:27,000 --> 00:41:29,100
And we have a couple different ways we can do that, but as you can

826
00:41:29,100 --> 00:41:32,500
see, you know, in our game asset system, you know, the most basic way

827
00:41:32,500 --> 00:41:35,800
we could do that is we could just literally shove them into the asset

828
00:41:35,800 --> 00:41:37,600
arrays directly, right?

829
00:41:37,600 --> 00:41:38,400
That's something we could do.

830
00:41:38,400 --> 00:41:40,900
And maybe that's the first thing we should do, that's what we'll do

831
00:41:40,900 --> 00:41:41,400
today.

832
00:41:41,500 --> 00:41:46,000
But then the next thing we're going to have to do is actually extend.

833
00:41:46,400 --> 00:41:48,800
Our asset formats to account for fonts because like I said there's

834
00:41:48,800 --> 00:41:51,600
things like kerning tables and stuff like that, we want to have in

835
00:41:51,600 --> 00:41:55,600
there and so we'd like to have that information stored in the file so

836
00:41:55,600 --> 00:41:58,700
that it can be loaded out, right.

837
00:42:05,900 --> 00:42:09,000
Let's go ahead and take a look at how we might do that.

838
00:42:09,600 --> 00:42:13,300
We have, you know, the asset I kind of want to merge these two things.

839
00:42:13,600 --> 00:42:17,200
I kind of want to merge the asset tag ID stuff, and the file format

840
00:42:17,200 --> 00:42:21,500
stuff and you know, it's, you know, who's to stop me, right?

841
00:42:21,500 --> 00:42:22,800
It's kind of hard to stop me.

842
00:42:22,800 --> 00:42:23,700
You have to admit.

843
00:42:24,300 --> 00:42:27,300
So what I might do, what I might do

844
00:42:29,200 --> 00:42:30,000
is do that.

845
00:42:31,800 --> 00:42:32,300
Right.

846
00:42:34,100 --> 00:42:35,900
Bam, there it is.

847
00:42:37,400 --> 00:42:40,400
Don't see why not can't think of a reason why not?

848
00:42:43,100 --> 00:42:47,000
Delete file, handmade asset type ID.

849
00:42:47,400 --> 00:42:47,900
Goodbye!

850
00:42:49,100 --> 00:42:50,500
So that's it for that.

851
00:42:50,700 --> 00:42:53,000
It was fun, while it lasted, and it didn't last.

852
00:42:53,900 --> 00:42:59,200
And now it's gone and, you know, not really that sentimental about

853
00:42:59,200 --> 00:42:59,700
death.

854
00:43:00,200 --> 00:43:02,100
So that's it.

855
00:43:02,100 --> 00:43:03,100
That's all she wrote.

856
00:43:03,500 --> 00:43:07,200
So, now in here, if we wanted to, we could do something absolutely

857
00:43:07,200 --> 00:43:07,800
ridiculous.

858
00:43:07,800 --> 00:43:09,500
I don't know that this is really what we want to do.

859
00:43:09,500 --> 00:43:11,800
It seems like it might be a little conceived.

860
00:43:12,100 --> 00:43:12,700
I'm gonna do it anyway.

861
00:43:13,400 --> 00:43:17,200
Because why not, what I'm going to do is say all right, there's an

862
00:43:17,200 --> 00:43:22,400
asset here that's just like asset font, right?

863
00:43:23,100 --> 00:43:28,100
This is a really crazy abuse of our asset system.

864
00:43:28,200 --> 00:43:31,900
I don't really want to Advocate doing this.

865
00:43:32,100 --> 00:43:34,900
I'm just going to do it because we can

866
00:43:37,800 --> 00:43:38,300
Yeah.

867
00:43:38,400 --> 00:43:41,900
I mean we just can there's really no other way to say it than that so

868
00:43:41,900 --> 00:43:46,300
I'm just going to say asset font and then I'm going to go into the

869
00:43:46,300 --> 00:43:51,200
test asset Builder and I'm going to have it actually operate on these

870
00:43:51,200 --> 00:43:51,900
on these guys.

871
00:43:52,200 --> 00:43:52,700
All right.

872
00:43:54,700 --> 00:43:55,100
Kidding.

873
00:43:58,200 --> 00:44:04,300
So yeah, so if I come in here for asset font, I'm going to now do sort

874
00:44:04,300 --> 00:44:07,300
of the nonsense that we were doing before this sort of thing, right?

875
00:44:07,600 --> 00:44:11,500
I'm going to do that but I'm going to do it for a font and I'm going

876
00:44:11,500 --> 00:44:14,000
to do it probably in a pretty weird way.

877
00:44:14,700 --> 00:44:18,000
I'm going to just generate like when it does these things I'll just

878
00:44:18,000 --> 00:44:20,800
have a thing that's like right font I guess I don't know.

879
00:44:20,800 --> 00:44:21,600
Where do we want to put this?

880
00:44:21,600 --> 00:44:25,200
We'd kind of broken this up into multiple files just for kind of

881
00:44:25,200 --> 00:44:27,900
laughs I guess for lack of a better term.

882
00:44:29,300 --> 00:44:32,300
But you know we could do a thing in here where we're just like okay

883
00:44:32,300 --> 00:44:34,000
it's definitely a non hero.

884
00:44:34,300 --> 00:44:38,900
So right in here, I guess I'll do begin asset, type assets asset font

885
00:44:39,600 --> 00:44:42,700
and then I'll do end asset type assets.

886
00:44:44,900 --> 00:44:48,000
And yeah, then we'll just do it for I leave here.

887
00:44:48,500 --> 00:44:49,000
Right?

888
00:44:49,400 --> 00:44:51,300
Where we go over a bunch of characters.

889
00:44:51,300 --> 00:44:53,900
So like you know what character we going to do, I don't know.

890
00:44:54,500 --> 00:44:58,400
Let's go ahead and do for care character.

891
00:44:58,800 --> 00:44:59,800
I could even do a you 30.

892
00:45:00,100 --> 00:45:02,900
character equals a

893
00:45:04,900 --> 00:45:11,800
character is less than or equal to z may be able to capitals because

894
00:45:13,000 --> 00:45:15,900
let's just do capitals, right?

895
00:45:16,600 --> 00:45:21,900
And we'll just have it, create all of the letters from A to Z and

896
00:45:22,000 --> 00:45:25,700
shove them straight into the asset system.

897
00:45:26,700 --> 00:45:29,000
Now if you remember the way that we did this, right?

898
00:45:29,000 --> 00:45:31,200
We could do a thing like this where we added tags.

899
00:45:31,200 --> 00:45:33,900
And so, all I'm going to do is introduce a test

900
00:45:34,100 --> 00:45:41,200
I'd called code Point, UT F code point, something like this, or

901
00:45:41,500 --> 00:45:43,800
Unicode code point.

902
00:45:45,500 --> 00:45:49,100
And I'm just going to go ahead and straight up tag the asset with the

903
00:45:49,100 --> 00:45:51,100
Unicode code point, right?

904
00:45:52,300 --> 00:45:52,900
There it is.

905
00:45:56,000 --> 00:45:58,300
I will talk in a while, but why this is a really fantastic?

906
00:45:58,300 --> 00:46:02,500
A bad idea what I'm doing, although maybe, you know, it's something we

907
00:46:02,500 --> 00:46:04,900
want to think a little bit harder about in the future.

908
00:46:04,900 --> 00:46:09,000
But anyway, what I want to do here is say, add a character asset,

909
00:46:09,100 --> 00:46:09,700
right?

910
00:46:10,000 --> 00:46:16,600
And I'm going to do that by using the stb library, right?

911
00:46:16,600 --> 00:46:17,900
So I'm going to do add character s.

912
00:46:17,900 --> 00:46:21,700
Am going to do this in a crazy crazily.

913
00:46:21,700 --> 00:46:22,600
Inefficient way.

914
00:46:23,800 --> 00:46:25,500
Absolutely 100%.

915
00:46:25,600 --> 00:46:32,400
Responsible just horrific lie, irresponsible way, but I'm going to do

916
00:46:32,400 --> 00:46:36,400
it anyway because this is an asset processor and at the moment we

917
00:46:36,400 --> 00:46:37,600
literally just don't care about it.

918
00:46:37,600 --> 00:46:41,700
Speed later on and it's trivial to optimize this but later on we could

919
00:46:41,700 --> 00:46:42,300
do that.

920
00:46:42,400 --> 00:46:43,700
I am literally going to do that.

921
00:46:43,900 --> 00:46:47,300
I am going to reload the entire font file and make Shawn parse at

922
00:46:47,300 --> 00:46:48,300
every darn time.

923
00:46:48,300 --> 00:46:49,300
I know that's rude.

924
00:46:49,400 --> 00:46:52,300
Like I said, no one will be timing us, so it's fine.

925
00:46:53,400 --> 00:46:55,400
So then we're going to have a pure, we're going to have

926
00:46:55,600 --> 00:46:59,100
That font code, it's going to actually be called add character asset

927
00:46:59,500 --> 00:47:00,100
right now.

928
00:47:00,100 --> 00:47:03,600
We're going to take the gloves off here and we're going to go ahead

929
00:47:03,600 --> 00:47:05,000
and and get that working.

930
00:47:05,500 --> 00:47:08,500
And what that's going to take, is this going to take that asset

931
00:47:08,500 --> 00:47:09,000
structure.

932
00:47:09,000 --> 00:47:10,400
I think, is that what it takes?

933
00:47:10,700 --> 00:47:11,000
Think.

934
00:47:11,000 --> 00:47:11,800
That's what it takes.

935
00:47:13,800 --> 00:47:17,600
And it's going to take the font file and then it's going to take the

936
00:47:17,600 --> 00:47:19,500
code point, right?

937
00:47:20,500 --> 00:47:24,300
And so in here we're going to load, I think we have already have a

938
00:47:24,300 --> 00:47:26,400
thing that reads an entire file, right here?

939
00:47:26,800 --> 00:47:27,400
Right.

940
00:47:27,600 --> 00:47:30,400
Again we just kind of emulated that because we wanted to be able to

941
00:47:30,400 --> 00:47:32,200
cut and paste the code essentially.

942
00:47:32,700 --> 00:47:34,700
So we know that we can just call read entire file.

943
00:47:34,900 --> 00:47:39,400
We know that we can pass the font file in like so and then I assume

944
00:47:39,400 --> 00:47:42,300
that we've got a way to free the entire file, right?

945
00:47:42,500 --> 00:47:42,700
So, I

946
00:47:42,900 --> 00:47:47,500
Then we can do something here, where we just do three entire file,

947
00:47:47,600 --> 00:47:50,600
free file, I don't know what might just be free.

948
00:47:51,500 --> 00:47:53,600
I really know what do we do.

949
00:47:56,900 --> 00:47:59,300
Read the entire file.

950
00:48:02,500 --> 00:48:04,000
Read results.

951
00:48:08,700 --> 00:48:10,600
Results dot free.

952
00:48:14,900 --> 00:48:18,600
I have no idea what we did with this code, maybe we didn't even bother

953
00:48:18,600 --> 00:48:19,200
for you then.

954
00:48:20,600 --> 00:48:21,700
I have no idea.

955
00:48:25,100 --> 00:48:26,100
Are you as perplexed about this?

956
00:48:26,100 --> 00:48:26,500
As I am?

957
00:48:26,500 --> 00:48:29,500
I literally don't even remember what we did with this code.

958
00:48:29,700 --> 00:48:32,400
Like it's so far out of my brain at this point.

959
00:48:40,300 --> 00:48:41,200
Yeah, it looks that way.

960
00:48:47,400 --> 00:48:48,300
Oh,

961
00:48:49,500 --> 00:48:49,900
Wow.

962
00:48:49,900 --> 00:48:51,000
No, you know what?

963
00:48:51,000 --> 00:48:52,300
We were kind of clever here.

964
00:48:54,300 --> 00:48:55,200
Interesting.

965
00:48:58,100 --> 00:48:59,300
Interesting.

966
00:49:00,900 --> 00:49:02,300
We did it down here.

967
00:49:03,600 --> 00:49:05,300
So, it's all deferred free.

968
00:49:06,300 --> 00:49:06,700
Hmm.

969
00:49:08,900 --> 00:49:09,700
All right.

970
00:49:12,900 --> 00:49:13,700
That's crazy.

971
00:49:16,000 --> 00:49:17,400
That is really kind of crazy.

972
00:49:17,500 --> 00:49:24,500
All right, well, I don't even know what to say about that other than,

973
00:49:24,500 --> 00:49:27,200
that's crazy town, but I guess that's where we're at.

974
00:49:27,700 --> 00:49:30,600
So we were kind of Sly.

975
00:49:30,600 --> 00:49:34,200
We we actually I was thinking that the asset processor was just kind

976
00:49:34,200 --> 00:49:38,900
of you know, stupid example thing but I guess we actually even cared

977
00:49:38,900 --> 00:49:40,900
about our memory usage.

978
00:49:41,000 --> 00:49:41,200
Yeah.

979
00:49:41,200 --> 00:49:44,700
Well, all right, good job, handmade hero.

980
00:49:45,100 --> 00:49:45,600
Nice work on.

981
00:49:45,800 --> 00:49:46,100
One.

982
00:49:46,700 --> 00:49:47,000
All right.

983
00:49:47,000 --> 00:49:50,300
So anyway, if we read the entire file in here, I just kind of want to

984
00:49:50,300 --> 00:49:51,600
free it because we don't need it.

985
00:49:51,600 --> 00:49:53,900
This is not like the other things where we needed to keep them around.

986
00:49:53,900 --> 00:49:55,100
We don't need to keep anything around.

987
00:49:55,100 --> 00:49:56,000
That's not necessary at.

988
00:49:56,000 --> 00:49:57,000
All right?

989
00:49:58,800 --> 00:50:01,400
So, I'm just gonna get rid of it after it, some of it.

990
00:50:01,400 --> 00:50:04,800
And I assumed that I didn't actually look before, but I assume that

991
00:50:04,800 --> 00:50:05,300
also.

992
00:50:05,300 --> 00:50:11,200
Similarly, inside the, the STP Library I could after in it font, I

993
00:50:11,200 --> 00:50:12,700
could free font, right?

994
00:50:12,700 --> 00:50:15,600
I'm assuming that that

995
00:50:15,700 --> 00:50:20,300
after admit font there is a way to free the font.

996
00:50:20,900 --> 00:50:21,900
Don't know that for sure.

997
00:50:22,500 --> 00:50:25,500
Maybe that's not true, maybe he doesn't actually allocate anything

998
00:50:26,600 --> 00:50:28,700
given us in the file, a defensive fonts function bills.

999
00:50:29,000 --> 00:50:29,300
That's right.

1000
00:50:29,300 --> 00:50:29,800
Answer the question.

1001
00:50:29,800 --> 00:50:30,700
Yes, allocate.

1002
00:50:30,800 --> 00:50:32,400
So you find out for yourself and see you in the front.

1003
00:50:32,400 --> 00:50:32,900
Will fill it out.

1004
00:50:32,900 --> 00:50:34,900
You don't need to do anything special to free up because the cops are

1005
00:50:34,900 --> 00:50:35,800
pure value data.

1006
00:50:36,700 --> 00:50:38,100
So I don't that's it.

1007
00:50:38,300 --> 00:50:40,500
It's not even doesn't even require any memory.

1008
00:50:40,500 --> 00:50:44,300
It just kind of does this magic and leave this alone so yeah.

1009
00:50:44,700 --> 00:50:45,600
So I guess that's it.

1010
00:50:45,700 --> 00:50:47,700
It, that's the entirety of the cleanup.

1011
00:50:47,800 --> 00:50:51,500
So all we really have to do now, is deal with this, right?

1012
00:50:51,500 --> 00:50:54,800
We just have to deal with the with this stuff, right?

1013
00:50:56,100 --> 00:50:59,800
So yeah, I mean really what we're talking about is

1014
00:51:00,200 --> 00:51:04,400
Is his doing this stuff, the loaded loaded bitmap free stuff.

1015
00:51:05,800 --> 00:51:06,500
That's crazy.

1016
00:51:07,000 --> 00:51:09,500
Totally crazy, but fine by me.

1017
00:51:10,800 --> 00:51:11,800
Fine by me.

1018
00:51:12,100 --> 00:51:13,000
It makes it easier.

1019
00:51:13,100 --> 00:51:14,000
It makes it easier.

1020
00:51:14,700 --> 00:51:19,400
So anyway, when we do the font stuff we do, add character asset.

1021
00:51:19,700 --> 00:51:20,500
Come through here.

1022
00:51:20,500 --> 00:51:22,900
We get our code point, bitmap out.

1023
00:51:23,000 --> 00:51:26,800
And so now we need to do is make a little bit map that we can actually

1024
00:51:27,100 --> 00:51:28,300
use as our asset.

1025
00:51:29,400 --> 00:51:30,800
So I start by making one.

1026
00:51:31,500 --> 00:51:34,400
I guess we should also do a thing here that actually takes a look at

1027
00:51:34,400 --> 00:51:36,800
the ttf file stuff, right.

1028
00:51:37,400 --> 00:51:39,800
And doesn't actually try to do that unless it gets this back.

1029
00:51:40,400 --> 00:51:43,300
Not really necessary because this is again offline, but might as well

1030
00:51:43,300 --> 00:51:43,800
do that.

1031
00:51:44,800 --> 00:51:46,400
So if I go in here,

1032
00:51:49,300 --> 00:51:52,000
Where did it go though?

1033
00:51:52,000 --> 00:51:53,000
I deleted what I needed.

1034
00:51:53,100 --> 00:51:53,600
There it is.

1035
00:51:56,400 --> 00:51:58,300
So I'm going to Define one of these loaded bitmaps.

1036
00:51:59,200 --> 00:52:03,200
I am going to do a result free on that.

1037
00:52:03,200 --> 00:52:08,200
Like so to do read results, that'll be ttf file, contents.

1038
00:52:08,600 --> 00:52:13,000
We've got none of this is necessary.

1039
00:52:13,400 --> 00:52:15,800
None of this is necessary at all.

1040
00:52:16,200 --> 00:52:19,900
So the memory here is what we would actually have to allocate, right?

1041
00:52:20,100 --> 00:52:22,000
So, this is actually not true, we're not going to read the contents.

1042
00:52:22,000 --> 00:52:24,900
Remember, here's what we have to allocate, we know the width and the

1043
00:52:24,900 --> 00:52:25,500
height.

1044
00:52:26,200 --> 00:52:29,700
So what we would do here is we basically say you know the thing that

1045
00:52:29,700 --> 00:52:32,600
we free is the memory, right?

1046
00:52:32,800 --> 00:52:37,300
And we would moloch sighs enough for our bitmap which is just you know

1047
00:52:37,300 --> 00:52:44,200
you 32 width x height like so and that's really about it.

1048
00:52:44,500 --> 00:52:50,500
Now I feel like we want this to potentially be padded as well, so we

1049
00:52:50,500 --> 00:52:52,300
should probably deal with the pitch.

1050
00:52:52,500 --> 00:52:55,900
I'm guessing as a separate thing about know, if we actually

1051
00:52:56,000 --> 00:52:57,000
We ever did that.

1052
00:52:57,200 --> 00:52:58,300
Yeah, so there we go.

1053
00:52:58,900 --> 00:53:02,800
We've got code our pitch equals result, with times bitmap, B, 4 pixel.

1054
00:53:03,000 --> 00:53:06,900
So we do actually still have the pitch stuff in there, right?

1055
00:53:07,400 --> 00:53:09,000
So I'll go ahead and add that in as well.

1056
00:53:12,200 --> 00:53:12,700
Fault.

1057
00:53:14,800 --> 00:53:15,400
There we go.

1058
00:53:18,000 --> 00:53:18,400
Okay.

1059
00:53:20,600 --> 00:53:24,100
so if I were to do it this way, I can then say, all right, what I want

1060
00:53:24,100 --> 00:53:27,300
to Malik is basically whatever the pitch is times the width,

1061
00:53:29,100 --> 00:53:30,700
That gives me enough space.

1062
00:53:31,100 --> 00:53:33,900
I assume this is a void star that comes out so I'll grab that memory

1063
00:53:33,900 --> 00:53:35,300
and then that's what we actually want to free.

1064
00:53:35,300 --> 00:53:36,300
When this thing is done.

1065
00:53:36,700 --> 00:53:38,000
We don't care about any of this stuff.

1066
00:53:38,000 --> 00:53:39,000
We don't care about this.

1067
00:53:39,500 --> 00:53:41,600
This now operates exactly the same way, right?

1068
00:53:41,600 --> 00:53:43,600
It's just exactly the same code that we already did.

1069
00:53:44,000 --> 00:53:47,000
After it's done, we free everything and then we're left with a little

1070
00:53:47,000 --> 00:53:47,900
bit map that we need now.

1071
00:53:47,900 --> 00:53:52,800
I don't actually know, I don't remember at all how we actually deal

1072
00:53:52,800 --> 00:53:53,400
with that stuff.

1073
00:53:53,400 --> 00:53:56,600
So if you look at load BMP right it returns a little bit map.

1074
00:53:56,600 --> 00:53:58,800
So what I might do is just mirror that

1075
00:53:58,900 --> 00:53:59,900
That and say that.

1076
00:54:00,000 --> 00:54:07,000
Is also a loaded bitmap one that's like get font or get glyph bitmap.

1077
00:54:08,300 --> 00:54:08,900
Right.

1078
00:54:09,400 --> 00:54:13,600
That kind of just does exactly the same thing as the loaded bitmap one

1079
00:54:13,700 --> 00:54:18,000
so we do get glyph bitmap and we say Karis our file name and that just

1080
00:54:18,000 --> 00:54:22,000
kind of lets me lean on that a little bit so I can say these both work

1081
00:54:22,000 --> 00:54:23,200
in the exact same way.

1082
00:54:23,300 --> 00:54:26,100
So now if you wanted to if you want to load a bitmap from file, you

1083
00:54:26,100 --> 00:54:28,800
call this if you want to get a glyph, you call this.

1084
00:54:29,100 --> 00:54:33,800
And I guess I just need the code Point here, you 32 code point.

1085
00:54:35,300 --> 00:54:37,400
And so then the only difference is then I'm going to pass the code

1086
00:54:37,400 --> 00:54:38,800
point in here, right?

1087
00:54:38,800 --> 00:54:43,000
Instead of just picking n now we probably also want to do a size, but

1088
00:54:43,000 --> 00:54:44,700
I'm going to hold off on that for a second.

1089
00:54:44,700 --> 00:54:48,500
Again, will kind of come back through probably tomorrow, or maybe next

1090
00:54:48,500 --> 00:54:51,500
week and putting the stuff about, like, character alignment stuff,

1091
00:54:51,500 --> 00:54:53,100
because we have a bunch of stuff we need to do there.

1092
00:54:54,000 --> 00:54:56,400
But okay, so we do add character asset.

1093
00:54:56,500 --> 00:55:00,800
What add character s is going to do is to do the exact same code as a

1094
00:55:00,800 --> 00:55:02,400
bitmap asset, right?

1095
00:55:02,500 --> 00:55:04,000
Because it's the exact same thing.

1096
00:55:05,000 --> 00:55:09,000
The only difference is where it gets its loaded bitmap from, right?

1097
00:55:09,600 --> 00:55:14,200
So when you do, when you see the load BMP call there, right?

1098
00:55:14,300 --> 00:55:16,400
I guess, when we do add bitmap asset,

1099
00:55:18,600 --> 00:55:20,400
It's delayed, right?

1100
00:55:20,400 --> 00:55:21,200
It's a delayed.

1101
00:55:21,200 --> 00:55:22,600
Kind of add, right?

1102
00:55:24,700 --> 00:55:29,200
Yeah, so basically it comes down here and it does when it goes to

1103
00:55:29,200 --> 00:55:30,100
actually write them out.

1104
00:55:30,100 --> 00:55:34,300
It does the load right on sort of the the right, right?

1105
00:55:34,300 --> 00:55:35,300
When the right would happen.

1106
00:55:35,800 --> 00:55:37,900
So what I can do is I can just make another path here.

1107
00:55:37,900 --> 00:55:42,700
If I want to for my fonts, I can say asset type font or something

1108
00:55:42,800 --> 00:55:43,700
here, right?

1109
00:55:44,800 --> 00:55:48,000
And and then I can just do exactly this path, right?

1110
00:55:48,000 --> 00:55:51,100
I can say all right what I'm going to do that, I do exactly the same

1111
00:55:51,100 --> 00:55:51,700
thing.

1112
00:55:52,000 --> 00:55:54,400
But now I do, you know, load

1113
00:55:54,600 --> 00:55:55,200
Fit map.

1114
00:55:58,400 --> 00:56:03,500
Like so I pass it the file name and like the code point or something.

1115
00:56:03,500 --> 00:56:05,000
We'll figure out how to get that in a second.

1116
00:56:05,300 --> 00:56:09,600
It does the same exact stuff that it did here before and then it just

1117
00:56:09,600 --> 00:56:12,500
F rights that out exactly the same way, right?

1118
00:56:15,600 --> 00:56:19,200
I mean, really, I almost want this path, this code path to be shared.

1119
00:56:19,800 --> 00:56:24,800
In fact, I could, I could do that, what I could do is do it like this,

1120
00:56:25,000 --> 00:56:25,500
right?

1121
00:56:25,600 --> 00:56:29,900
So that don't have to have two of these, I could do like something

1122
00:56:29,900 --> 00:56:30,100
more.

1123
00:56:30,100 --> 00:56:34,300
Like, yeah, I could do something more like loaded bitmap, you know,

1124
00:56:35,100 --> 00:56:35,700
bitmap

1125
00:56:37,500 --> 00:56:38,500
And then do this.

1126
00:56:41,600 --> 00:56:42,100
If?

1127
00:56:44,300 --> 00:56:52,200
Source type equals asset type font else, right?

1128
00:56:52,200 --> 00:56:58,900
And now they share it the path and that seems much nicer to me, right?

1129
00:57:00,100 --> 00:57:01,300
Okay, so let's keep looking here.

1130
00:57:01,300 --> 00:57:04,900
So this we need an asset type font up here, and now we need a way to

1131
00:57:04,900 --> 00:57:06,600
store the code Point as well.

1132
00:57:07,500 --> 00:57:09,100
And of course, first sample index.

1133
00:57:09,100 --> 00:57:10,900
I guess we could just do it this way, right?

1134
00:57:11,100 --> 00:57:12,000
Go Point.

1135
00:57:12,100 --> 00:57:15,800
X0 make sense again, really, really basic stuff.

1136
00:57:15,900 --> 00:57:20,900
I'd literally just I'm doing nothing other than like, pure autopilot.

1137
00:57:20,900 --> 00:57:24,500
Right now pure autopilot on just what I'm looking at, what our source

1138
00:57:24,500 --> 00:57:25,100
code before.

1139
00:57:25,100 --> 00:57:28,000
I even remember how we wrote this thing, my brain been so out of it

1140
00:57:28,000 --> 00:57:29,800
lately, I have no idea so I'm just on pure out.

1141
00:57:30,000 --> 00:57:30,500
Tap a keg.

1142
00:57:30,500 --> 00:57:32,200
Well, we had a system in place.

1143
00:57:32,600 --> 00:57:37,100
I'm just following that system right, and that's totally fine.

1144
00:57:37,400 --> 00:57:38,700
So there's our local if it map.

1145
00:57:38,700 --> 00:57:41,700
So all we need now is just a way to record the fact that we wanted to

1146
00:57:41,700 --> 00:57:42,600
do one of these.

1147
00:57:43,100 --> 00:57:47,300
And so when we look at one of these things here for add bitmap asset,

1148
00:57:47,300 --> 00:57:47,500
right?

1149
00:57:47,500 --> 00:57:48,900
We can do the exact same code.

1150
00:57:48,900 --> 00:57:53,300
It seems like there's a lot of it is the only thing and so I do worry

1151
00:57:53,300 --> 00:57:58,000
a little bit about that and I wonder if these need to be compressed

1152
00:57:58,000 --> 00:57:58,600
together.

1153
00:57:59,200 --> 00:58:01,100
I'm not sure, right?

1154
00:58:01,300 --> 00:58:01,700
It's something.

1155
00:58:01,700 --> 00:58:04,700
I would look at since this is the asset processor and this is kind of

1156
00:58:04,700 --> 00:58:05,700
more just example.

1157
00:58:05,800 --> 00:58:06,300
I don't know that.

1158
00:58:06,300 --> 00:58:10,200
I cared that much, but it is something that just like, makes me a

1159
00:58:10,200 --> 00:58:12,400
little bit like, maybe right?

1160
00:58:14,200 --> 00:58:17,200
But yeah, so there's the code Point like so,

1161
00:58:19,500 --> 00:58:22,700
The rest of this stuff is pretty much exactly the way that it appears,

1162
00:58:22,700 --> 00:58:23,200
right?

1163
00:58:23,500 --> 00:58:28,000
And the aligned percentages again or not really particularly relevant

1164
00:58:28,000 --> 00:58:28,400
here.

1165
00:58:30,500 --> 00:58:32,900
We can use those the same at the moment because we're going to have to

1166
00:58:32,900 --> 00:58:35,600
do some other stuff for font alignment, either way.

1167
00:58:36,500 --> 00:58:38,700
Okay, so there we go.

1168
00:58:40,000 --> 00:58:44,300
Let's go ahead and what did I do wrong here, read file results, it's

1169
00:58:44,300 --> 00:58:45,600
called entire file.

1170
00:58:46,600 --> 00:58:47,500
Entire file.

1171
00:58:49,900 --> 00:58:51,000
Font file.

1172
00:58:52,100 --> 00:58:53,100
Wow name.

1173
00:58:54,700 --> 00:58:59,600
Free is contents.

1174
00:58:59,600 --> 00:59:00,600
That's totally wrong.

1175
00:59:00,600 --> 00:59:01,700
That's just what contents?

1176
00:59:03,500 --> 00:59:07,100
Results is the result.

1177
00:59:08,400 --> 00:59:09,400
Which is this?

1178
00:59:11,100 --> 00:59:13,100
And I think we're almost done, right?

1179
00:59:13,800 --> 00:59:20,100
Add character asset, should be returning, a bitmap ID, I guess would

1180
00:59:20,100 --> 00:59:20,500
be with that.

1181
00:59:20,500 --> 00:59:21,100
Would return.

1182
00:59:22,800 --> 00:59:25,100
And then we have a warning.

1183
00:59:26,000 --> 00:59:29,800
Actually look a bitmap used that is true because these need to be

1184
00:59:29,800 --> 00:59:30,600
trimmed.

1185
00:59:31,000 --> 00:59:31,800
Thank you, compiler.

1186
00:59:31,800 --> 00:59:32,800
That was a good catch.

1187
00:59:34,300 --> 00:59:41,200
So there you go that is that is the the test asset generator so if I

1188
00:59:41,200 --> 00:59:47,000
go into the data directory so handmade data right?

1189
00:59:47,200 --> 00:59:52,800
And I want to I assume these don't have full paths in them, right?

1190
00:59:53,000 --> 00:59:54,400
I assumed they just write things out.

1191
00:59:54,400 --> 00:59:58,000
So go into the data directory and I go ahead and run our generator.

1192
00:59:59,000 --> 00:59:59,900
It's kind of a Hail Mary.

1193
01:00:00,000 --> 01:00:02,500
Pass at this point because all we did was just saying a bunch of code

1194
01:00:02,500 --> 01:00:02,700
in there.

1195
01:00:02,700 --> 01:00:05,500
We have no idea what's going to do but we might, as well.

1196
01:00:05,500 --> 01:00:06,100
Try it anyway.

1197
01:00:06,100 --> 01:00:08,900
And we're at the end of the stream, what could possibly go wrong.

1198
01:00:09,700 --> 01:00:11,300
Well, I guess a lot of things.

1199
01:00:12,200 --> 01:00:13,400
But test asset Builder.

1200
01:00:14,000 --> 01:00:15,000
Let's go ahead and run it.

1201
01:00:16,200 --> 01:00:17,400
That does not look good.

1202
01:00:19,100 --> 01:00:22,500
Actually, I guess we can just click debug the program in Visual

1203
01:00:22,500 --> 01:00:23,200
Studio.

1204
01:00:23,200 --> 01:00:24,100
Oh my God.

1205
01:00:24,200 --> 01:00:25,500
No, oh no.

1206
01:00:25,500 --> 01:00:26,700
I picked the old version.

1207
01:00:27,100 --> 01:00:29,600
Alright, this is bad news, I don't know what's going on here.

1208
01:00:32,600 --> 01:00:33,300
Oh no.

1209
01:00:34,300 --> 01:00:35,200
Oh my goodness.

1210
01:00:40,300 --> 01:00:41,700
I don't know what's going on here.

1211
01:00:41,700 --> 01:00:44,700
That's that's that's some bad news right there.

1212
01:00:46,500 --> 01:00:48,800
Okay well let's try that.

1213
01:00:49,500 --> 01:00:50,500
Let's try that again.

1214
01:00:52,100 --> 01:00:53,900
That was that was very dangerous.

1215
01:00:54,300 --> 01:00:55,700
Please, please exit.

1216
01:00:56,600 --> 01:00:59,000
Mister, mister developer Studio.

1217
01:01:01,200 --> 01:01:04,800
I didn't mean, I think I clicked the wrong version there.

1218
01:01:04,800 --> 01:01:05,900
That was that was bad.

1219
01:01:06,700 --> 01:01:07,400
Let's try that again.

1220
01:01:09,800 --> 01:01:13,700
First of all, I think that was just say that might be a very thing.

1221
01:01:13,700 --> 01:01:17,700
We could just catch my inspection but that's that's hilarious.

1222
01:01:18,400 --> 01:01:21,400
Don't ever accidentally, click the wrong version of Visual Studio I

1223
01:01:21,400 --> 01:01:21,600
guess.

1224
01:01:21,600 --> 01:01:25,300
So you end up with your crazy old white color scheme or whatever that

1225
01:01:25,300 --> 01:01:27,100
was Visual Studio, 2005 or so.

1226
01:01:27,100 --> 01:01:28,500
I don't even know what that was loading.

1227
01:01:29,400 --> 01:01:30,100
I have no idea.

1228
01:01:30,100 --> 01:01:32,500
This machine is very old and probably has some things on it, which

1229
01:01:32,500 --> 01:01:33,800
should be removed.

1230
01:01:34,600 --> 01:01:38,000
But how much have not been removed yet by any stretch of the

1231
01:01:38,000 --> 01:01:38,700
imagination?

1232
01:01:39,500 --> 01:01:41,900
So let me double check that just real quickly.

1233
01:01:42,500 --> 01:01:45,900
After he called get code point bitmap, we are going to Fremont a

1234
01:01:45,900 --> 01:01:49,600
bitmap that seems reasonable when we met lock.

1235
01:01:49,900 --> 01:01:56,300
The memory here for result pitch, this is wrong.

1236
01:01:57,000 --> 01:02:00,600
That's probably pretty much the entirety of that error, right?

1237
01:02:00,600 --> 01:02:01,400
We weren't Computing.

1238
01:02:01,400 --> 01:02:05,400
The size of bitmap is obviously gonna be the height times the pitch,

1239
01:02:05,500 --> 01:02:07,900
not the with time, since we've done that many times on handmade here.

1240
01:02:08,700 --> 01:02:09,200
So that was just,

1241
01:02:09,300 --> 01:02:09,900
Kind of dumb.

1242
01:02:11,000 --> 01:02:11,600
So there we go.

1243
01:02:12,200 --> 01:02:17,800
So now we have our, you know, our our test to that ha got bigger, but

1244
01:02:17,800 --> 01:02:19,300
we don't actually know if any of that worked.

1245
01:02:19,800 --> 01:02:21,400
We don't know what any of that did write.

1246
01:02:21,400 --> 01:02:22,700
That was just pure conjecture.

1247
01:02:22,700 --> 01:02:27,900
So before I go to the Q&A, which is now time for, let's just go ahead

1248
01:02:27,900 --> 01:02:30,000
and straight up.

1249
01:02:30,000 --> 01:02:31,300
Try it, right?

1250
01:02:32,600 --> 01:02:35,500
We're doing our particle B Rd things here.

1251
01:02:37,400 --> 01:02:39,200
So right like we got the head

1252
01:02:40,400 --> 01:02:44,400
Let's try to change the heads to be fonts, right?

1253
01:02:44,400 --> 01:02:45,600
So in there,

1254
01:02:47,200 --> 01:02:51,800
When we set that bitmap ID will get a random bitmap from asset font

1255
01:02:51,900 --> 01:02:55,000
instead, and we'll see what happens.

1256
01:02:57,000 --> 01:02:57,700
Awesome.

1257
01:02:58,500 --> 01:02:59,700
So there's a lot of letters.

1258
01:03:00,300 --> 01:03:04,900
Going through the asset pack file and you know, I suppose if we wanted

1259
01:03:04,900 --> 01:03:11,400
to do something a little bit, fancier, you know, we wanted to to maybe

1260
01:03:12,700 --> 01:03:14,300
stick with the nothing's theme.

1261
01:03:14,500 --> 01:03:19,900
We could restrict our fonts to only the letters and O thi NGS.

1262
01:03:20,000 --> 01:03:25,700
For example, what we could do there is we could use our asset tag

1263
01:03:25,700 --> 01:03:29,000
matching system to pick out the correct.

1264
01:03:30,200 --> 01:03:32,300
Tag, right?

1265
01:03:32,400 --> 01:03:35,700
And so if you remember, we have some code and it's not going to be

1266
01:03:35,700 --> 01:03:37,500
very efficient like this could be pretty slow.

1267
01:03:37,500 --> 01:03:39,400
We probably would want to build this table at a time because we're

1268
01:03:39,400 --> 01:03:43,200
sort of forcing we have not ever app optimize anything in the asset

1269
01:03:43,600 --> 01:03:44,500
tag matching system.

1270
01:03:44,500 --> 01:03:48,100
So this is this is, you know, this is pushing it.

1271
01:03:48,700 --> 01:03:51,700
But if I go ahead and say, get best match asset, right?

1272
01:03:51,700 --> 01:03:56,700
What I could do here is I could pass the trance State assets, right?

1273
01:03:58,300 --> 01:04:04,300
I could give it the asset Finance as the type ID and then give it an

1274
01:04:04,300 --> 01:04:05,200
asset vector.

1275
01:04:07,600 --> 01:04:08,700
That was the match vector.

1276
01:04:10,000 --> 01:04:12,500
And an asset Vector, that was the weight vector.

1277
01:04:13,700 --> 01:04:21,800
And both of these would have absolutely nothing in them, other than

1278
01:04:22,600 --> 01:04:23,900
the Unicode code point.

1279
01:04:26,900 --> 01:04:27,300
Right.

1280
01:04:30,900 --> 01:04:33,800
So we basically say the Unicode code point that we want, let's say is

1281
01:04:33,800 --> 01:04:34,200
n.

1282
01:04:36,700 --> 01:04:37,600
Did we say capital?

1283
01:04:37,600 --> 01:04:38,700
I think we said capital letters.

1284
01:04:40,100 --> 01:04:41,000
And then we just do.

1285
01:04:41,000 --> 01:04:43,300
Okay, we've got a match vector and a weight vector, and we're just

1286
01:04:43,300 --> 01:04:47,300
pulling it out by the tag and the tag is n, right?

1287
01:04:49,800 --> 01:04:50,600
Go.

1288
01:04:51,200 --> 01:04:52,000
Go for it.

1289
01:04:54,600 --> 01:04:55,900
Oh, but you know what?

1290
01:04:56,200 --> 01:04:57,200
You actually got to use that.

1291
01:04:57,500 --> 01:05:00,800
You can't just call that you got to actually use it.

1292
01:05:02,900 --> 01:05:03,400
There we go.

1293
01:05:04,600 --> 01:05:09,500
So this will get that, that best match asset note.

1294
01:05:10,500 --> 01:05:15,700
No operator takes a right hand of what are you complaining about

1295
01:05:16,200 --> 01:05:19,400
right-hand operand February 32 could be bitmap IG.

1296
01:05:19,400 --> 01:05:24,100
Operator equals will try to my shower, unless bitmap ID, you and 32

1297
01:05:28,100 --> 01:05:30,000
Not sure I follow that.

1298
01:05:30,000 --> 01:05:33,100
What does get the best match asset?

1299
01:05:33,100 --> 01:05:34,500
Oh because it's getting matched.

1300
01:05:34,600 --> 01:05:37,800
Get best match bitmap from so what we actually want

1301
01:05:39,300 --> 01:05:41,200
Right, there we go.

1302
01:05:43,900 --> 01:05:48,100
So there's the end and so we want it to basically say nothing's,

1303
01:05:48,400 --> 01:05:48,900
right?

1304
01:05:49,300 --> 01:05:50,700
We want it to say nothing's.

1305
01:05:51,100 --> 01:05:56,300
So what we would do there is we would pick a random one from here.

1306
01:05:56,400 --> 01:05:59,700
So I guess what I'll do is I'll literally just do just the dumbest

1307
01:05:59,700 --> 01:05:59,800
possible.

1308
01:06:00,000 --> 01:06:03,200
Thing here's that affects entropy.

1309
01:06:03,800 --> 01:06:06,400
So we'll say, you know, switch random.

1310
01:06:06,500 --> 01:06:09,500
You know, we've got our random Choice stuff in here, right?

1311
01:06:09,900 --> 01:06:12,200
We'll just do random choice.

1312
01:06:13,600 --> 01:06:15,400
Random Choice array.

1313
01:06:15,400 --> 01:06:19,200
Count nothing's right?

1314
01:06:19,800 --> 01:06:20,000
All right.

1315
01:06:20,000 --> 01:06:20,600
You know what?

1316
01:06:20,900 --> 01:06:21,700
Even simpler.

1317
01:06:25,800 --> 01:06:28,700
Just say random Choice from a rake out.

1318
01:06:28,700 --> 01:06:29,400
Nothing's.

1319
01:06:30,600 --> 01:06:35,400
Use that affects entropy to get us a random letter from Sean's handle.

1320
01:06:37,300 --> 01:06:37,900
Right.

1321
01:06:41,600 --> 01:06:46,700
Just say nothing's bracket and then we will just put in that string.

1322
01:06:48,600 --> 01:06:51,400
Cara, nothing's equals nothing's.

1323
01:06:55,300 --> 01:06:55,800
Right.

1324
01:06:57,700 --> 01:06:58,400
Seems reasonable.

1325
01:07:01,000 --> 01:07:05,700
There it is a little bit big, little bit, big still, I think we're

1326
01:07:05,700 --> 01:07:06,600
basically done here.

1327
01:07:06,700 --> 01:07:08,200
I think our work here is done people.

1328
01:07:08,600 --> 01:07:17,100
I think our work here is done, right?

1329
01:07:20,400 --> 01:07:22,300
So there you go.

1330
01:07:29,400 --> 01:07:33,800
That's how you use the library, 99% of your success in using a

1331
01:07:33,800 --> 01:07:38,300
library, is using a library that Sean made pretty much full stop

1332
01:07:39,000 --> 01:07:39,400
occasionally.

1333
01:07:39,400 --> 01:07:42,400
There's other people who have made libraries into the Sean style and

1334
01:07:42,400 --> 01:07:43,800
they can be good as well.

1335
01:07:44,900 --> 01:07:49,000
So, you know, those are the criteria look for one file.

1336
01:07:49,800 --> 01:07:53,300
Very good sign API that literally does what you want.

1337
01:07:53,500 --> 01:07:55,500
Like word for word.

1338
01:07:55,800 --> 01:07:57,700
Like, I want to get a code Point bitmap.

1339
01:07:57,700 --> 01:07:59,600
There's a function called get code point Batman.

1340
01:07:59,600 --> 01:08:02,500
It gives me back the bitmap right directly

1341
01:08:05,200 --> 01:08:11,800
Trivial to integrate with no build options, no nothing, two lines of

1342
01:08:11,800 --> 01:08:16,200
code to integrate, you know, you look at all these things, that's what

1343
01:08:16,200 --> 01:08:17,500
makes a great library, right?

1344
01:08:17,500 --> 01:08:20,100
That was trivial to do trivial to use, you will not have that

1345
01:08:20,100 --> 01:08:21,700
experience with basically anything else.

1346
01:08:21,899 --> 01:08:24,700
You would still have been fussing with like apt-get if you were trying

1347
01:08:24,700 --> 01:08:26,899
to use something else right?

1348
01:08:27,100 --> 01:08:29,700
But here we were able to like get it working immediately and then

1349
01:08:29,700 --> 01:08:33,000
integrated our asset Pipeline trivially and

1350
01:08:34,000 --> 01:08:34,800
That's just fabulous.

1351
01:08:35,100 --> 01:08:40,399
So that is basically an episode of handmade hero that pretty much

1352
01:08:40,399 --> 01:08:41,700
concretely shows you why?

1353
01:08:41,700 --> 01:08:45,100
I always answer the question, what libraries would you use if you are

1354
01:08:45,100 --> 01:08:46,000
using libraries on him?

1355
01:08:46,000 --> 01:08:50,200
A hero with, I would use the SUV libraries because they're just that

1356
01:08:50,200 --> 01:08:50,700
good.

1357
01:08:52,399 --> 01:08:55,000
And with that, I will go to the Q&A.

1358
01:08:59,300 --> 01:08:59,899
so, if you have questions,

1359
01:09:00,000 --> 01:09:01,100
What about what we did?

1360
01:09:03,300 --> 01:09:04,300
I would be happy to answer them.

1361
01:09:04,300 --> 01:09:07,200
Please prefix your questions with Q Cullen, so I can see them.

1362
01:09:09,200 --> 01:09:09,899
And off we go.

1363
01:09:17,300 --> 01:09:19,300
Hey, is the best match for the null Terminator?

1364
01:09:19,399 --> 01:09:19,899
Ha.

1365
01:09:19,899 --> 01:09:20,700
That's right.

1366
01:09:21,200 --> 01:09:22,500
So, I didn't quite do that.

1367
01:09:22,800 --> 01:09:25,600
We should have, I should not have said a re-cap, should be a recount

1368
01:09:25,600 --> 01:09:29,000
minus 1 because it does have the null Terminator in there, right?

1369
01:09:29,000 --> 01:09:31,100
Because array count will count the null Terminator.

1370
01:09:31,100 --> 01:09:32,100
That's at the end of this.

1371
01:09:32,500 --> 01:09:36,000
So really, we just want a recount, nothing's minus 1.

1372
01:09:39,399 --> 01:09:42,500
That would be fabulous better, right?

1373
01:09:53,800 --> 01:09:55,000
James Woodman until tonight.

1374
01:09:55,000 --> 01:09:57,800
I thought there was a use case for see make, which is that if the user

1375
01:09:57,800 --> 01:10:00,200
compiles, the program at finds libraries that you don't need to know

1376
01:10:00,200 --> 01:10:01,400
where they're installed.

1377
01:10:01,500 --> 01:10:03,100
But now it seems the SUV ways.

1378
01:10:03,100 --> 01:10:04,200
The only reasonable default.

1379
01:10:04,200 --> 01:10:06,600
I think I'm done with cmake for this your future.

1380
01:10:07,300 --> 01:10:08,400
I would agree with everything.

1381
01:10:08,400 --> 01:10:12,600
You just said my experience is that build programs are only useful

1382
01:10:12,600 --> 01:10:17,400
because libraries and programs are constructed poorly and that if you

1383
01:10:17,400 --> 01:10:19,400
just construct them properly you can usually build.

1384
01:10:19,500 --> 01:10:23,200
Even a very large code Base by just using a one file built now.

1385
01:10:23,300 --> 01:10:24,600
That doesn't necessarily mean that.

1386
01:10:24,600 --> 01:10:26,100
That's always what you want to do.

1387
01:10:26,300 --> 01:10:32,800
It just means that build build tools are extraneous now

1388
01:10:35,300 --> 01:10:36,500
You have to make a trade.

1389
01:10:36,500 --> 01:10:38,500
You have to make a decision there, but whether you're going to go that

1390
01:10:38,500 --> 01:10:44,000
path or not, you know, but it definitely is true that if you do things

1391
01:10:44,000 --> 01:10:47,700
in a certain way, it forces you into this whole, make Nightmare where

1392
01:10:47,700 --> 01:10:50,300
everything has to be a make file and you're debugging your builds all

1393
01:10:50,300 --> 01:10:53,300
the time and there's all this kind of other nonsense and oh, you had

1394
01:10:53,300 --> 01:10:55,800
the wrong version of seen occur OC, make passes the wrong switches,

1395
01:10:55,800 --> 01:10:57,500
where the switches are there baked into cmake.

1396
01:10:57,500 --> 01:11:00,200
And oh, my I've had horrible thing, things happen on projects with

1397
01:11:00,200 --> 01:11:02,000
cmake that I've had to work on.

1398
01:11:04,000 --> 01:11:07,300
I'll spare you the Gory details of trying to build clang one time.

1399
01:11:07,600 --> 01:11:08,700
Oh my Lord.

1400
01:11:08,700 --> 01:11:09,500
That's a nightmare.

1401
01:11:09,500 --> 01:11:13,000
If you want to build clang statically linked I actually had to send a

1402
01:11:13,000 --> 01:11:15,600
document to John Blow to tell him how to do it because he was trying

1403
01:11:15,600 --> 01:11:16,200
to do it.

1404
01:11:16,300 --> 01:11:19,000
And like I had already gone through the pain and suffering of doing it

1405
01:11:20,800 --> 01:11:25,200
so you can make decisions that make you not have to deal with any of

1406
01:11:25,200 --> 01:11:25,700
that.

1407
01:11:25,800 --> 01:11:29,000
And I highly recommend considering it because for a lot of projects

1408
01:11:29,400 --> 01:11:29,800
its way.

1409
01:11:29,800 --> 01:11:31,300
Seen or not to go that route.

1410
01:11:33,300 --> 01:11:34,700
External libraries Malik free.

1411
01:11:34,700 --> 01:11:35,200
What's next?

1412
01:11:35,200 --> 01:11:37,000
A Java Java virtual machine.

1413
01:11:37,700 --> 01:11:39,700
So yeah for the asset processor.

1414
01:11:40,200 --> 01:11:41,400
You want a Java virtual machine?

1415
01:11:41,400 --> 01:11:42,100
Go nuts.

1416
01:11:42,600 --> 01:11:43,100
Right.

1417
01:11:43,200 --> 01:11:46,200
Because it's just a thing that I just don't it's not really part of

1418
01:11:46,200 --> 01:11:50,200
him a hero to me it's just there to show you some stuff about how, you

1419
01:11:50,200 --> 01:11:51,800
know, you would need to do some things.

1420
01:11:53,400 --> 01:11:55,500
So if you want a Java virtual machine and your asset processor, go

1421
01:11:55,500 --> 01:11:57,300
nuts have at it.

1422
01:12:12,400 --> 01:12:15,400
Can you cause you have used a library and there are riots raging in

1423
01:12:15,400 --> 01:12:15,900
the streets.

1424
01:12:15,900 --> 01:12:19,600
I see Shadows with pitchforks cast by torch Lights of the Rabid crowd,

1425
01:12:19,600 --> 01:12:20,300
run Casey.

1426
01:12:20,300 --> 01:12:22,200
I'll do my best to slow them down.

1427
01:12:22,500 --> 01:12:25,100
Tips his hat with a with the last, farewell gays.

1428
01:12:25,300 --> 01:12:29,000
So I feel like, also, what I might do tomorrow is show you how to do

1429
01:12:29,000 --> 01:12:30,700
the exact same thing without a library.

1430
01:12:31,100 --> 01:12:36,000
If only to emphasize just how bad, another API can be, because we can

1431
01:12:36,000 --> 01:12:36,900
call windows and have it.

1432
01:12:36,900 --> 01:12:41,200
Do the exact same thing, but it's really annoying, right?

1433
01:12:47,800 --> 01:12:50,000
How would you write debug info?

1434
01:12:50,000 --> 01:12:54,600
Now, debug info of what.

1435
01:13:00,300 --> 01:13:03,600
Also, if you make the heroes few out letters of my nickname at random,

1436
01:13:03,600 --> 01:13:05,300
at least till the end of the Q&A.

1437
01:13:06,400 --> 01:13:08,400
Holy hell, I will be so happy.

1438
01:13:11,500 --> 01:13:14,700
Well, if you wanted that to happen, why didn't you write a true type?

1439
01:13:14,700 --> 01:13:16,400
Rasterizing font Library, man.

1440
01:13:17,200 --> 01:13:18,400
You know, you got to earn it.

1441
01:13:21,300 --> 01:13:24,200
I noticed, Molly rocket in one of the comments of the stb file.

1442
01:13:24,200 --> 01:13:25,400
Did you make contributions?

1443
01:13:25,600 --> 01:13:27,500
Not to this library?

1444
01:13:28,300 --> 01:13:31,800
That is because I think it was crediting someone from the forums.

1445
01:13:35,100 --> 01:13:35,700
Right?

1446
01:13:36,800 --> 01:13:40,500
So he's crediting someone from the Molly rocket forums from the old

1447
01:13:40,500 --> 01:13:41,000
days.

1448
01:13:45,200 --> 01:13:47,400
He looks like this episode was brought to you by the letter N.

1449
01:13:47,600 --> 01:13:50,200
Yes, that is totes true, man.

1450
01:13:50,400 --> 01:13:51,300
Totes true.

1451
01:13:54,900 --> 01:13:57,200
This episode is brought to you by the letter n.

1452
01:14:01,300 --> 01:14:03,800
And so, by the way, like also you can kind of see that, that's pretty

1453
01:14:03,800 --> 01:14:04,100
easy.

1454
01:14:04,100 --> 01:14:08,200
So, if you wanted to rasterize stuff at runtime, I don't know how

1455
01:14:08,200 --> 01:14:14,500
efficient stb truetype is, but I assume it's probably pretty

1456
01:14:14,500 --> 01:14:15,200
efficient.

1457
01:14:15,700 --> 01:14:18,900
So it might even be a good choice for people who wanted to not pre

1458
01:14:18,900 --> 01:14:20,200
rasterizer fonts, you know,

1459
01:14:25,100 --> 01:14:26,100
now, you know, now you know,

1460
01:14:29,000 --> 01:14:30,500
Looks like there are no further questions.

1461
01:14:30,900 --> 01:14:31,600
It's a correct.

1462
01:14:39,300 --> 01:14:43,100
Rephrase, how would you output sentences to see debug strings like FPS

1463
01:14:43,100 --> 01:14:44,000
or error codes?

1464
01:14:44,100 --> 01:14:45,500
Well, we haven't quite gotten there yet.

1465
01:14:45,500 --> 01:14:49,800
So, so hold on to that question because that is what, you know, that's

1466
01:14:49,800 --> 01:14:51,600
what like next week is about, right?

1467
01:14:51,800 --> 01:14:54,000
So so hold on.

1468
01:14:56,700 --> 01:14:59,500
Is the debug text going to be spewing forth out of the handmade Heroes

1469
01:14:59,500 --> 01:14:59,800
head.

1470
01:15:00,000 --> 01:15:00,900
Let's hope not.

1471
01:15:02,000 --> 01:15:03,100
It would be really hard to read.

1472
01:15:09,200 --> 01:15:12,400
No more questions canoe cools, I'm curious.

1473
01:15:12,400 --> 01:15:15,100
What do you look at when hiring an artist?

1474
01:15:15,500 --> 01:15:17,600
I have no idea how you apply for that.

1475
01:15:17,800 --> 01:15:20,100
After watching a few episodes of double fine Adventure.

1476
01:15:20,400 --> 01:15:24,800
I'm in awe at how good artists double flying seem to be.

1477
01:15:25,100 --> 01:15:29,800
And what kind of richness is you have to have to be one of those.

1478
01:15:30,200 --> 01:15:35,200
You also seem to practice more intelligent and Humane approaches to

1479
01:15:35,200 --> 01:15:35,800
hiring.

1480
01:15:44,600 --> 01:15:48,800
So I guess here's what I'd say, I don't feel super qualified to speak

1481
01:15:48,800 --> 01:15:55,600
on that topic at the moment until Molly rocket ship, some successful

1482
01:15:55,600 --> 01:15:57,500
games with good art.

1483
01:15:58,600 --> 01:16:03,000
I think it's premature for me to talk about artist hiring, right?

1484
01:16:04,400 --> 01:16:08,500
It's a new thing for me, doing a real game project at my rocket where

1485
01:16:08,500 --> 01:16:11,300
there's like actual people working on it and stuff is a new thing for

1486
01:16:11,300 --> 01:16:13,800
me and I feel like

1487
01:16:14,400 --> 01:16:15,600
Advice that I have to give it.

1488
01:16:15,600 --> 01:16:20,000
This point is largely speculative, it would mostly be saying what my

1489
01:16:20,000 --> 01:16:23,200
approach to hiring has been so far but I have no data.

1490
01:16:26,000 --> 01:16:27,600
On whether it's good.

1491
01:16:28,700 --> 01:16:34,100
And so I feel like that's really a question, ask me in two years after

1492
01:16:34,100 --> 01:16:38,400
some of this stuff has had more time to play out and I'll be able to

1493
01:16:38,400 --> 01:16:42,500
answer that question, a little more intelligently.

1494
01:16:45,400 --> 01:16:48,300
That's about all I can say about that.

1495
01:16:50,100 --> 01:16:50,400
Kira.

1496
01:16:50,400 --> 01:16:50,800
Caleb.

1497
01:16:50,800 --> 01:16:51,500
It's almost 1:00 a.m.

1498
01:16:51,500 --> 01:16:53,000
please tell me this won't be a normal thing.

1499
01:16:53,300 --> 01:16:55,400
Well, you used to be the standard time was a p.m.

1500
01:16:55,800 --> 01:16:57,100
and then we switched it to 5 p.m.

1501
01:16:58,000 --> 01:16:59,100
because better for my schedule.

1502
01:16:59,100 --> 01:17:01,300
And so, no, it won't be a normal thing because my schedule doesn't

1503
01:17:01,300 --> 01:17:04,500
really permit, the APM streams for the most part.

1504
01:17:05,400 --> 01:17:08,500
So now it won't be normal, but that used to be normal

1505
01:17:21,600 --> 01:17:22,200
all good.

1506
01:17:24,600 --> 01:17:25,900
All good.

1507
01:17:29,100 --> 01:17:32,200
No more questions, questions and answers.

1508
01:17:33,100 --> 01:17:35,000
No more questions and or answers.

1509
01:17:38,300 --> 01:17:41,800
I feel like the answer is that there are no more questions and

1510
01:17:41,800 --> 01:17:42,400
answers.

1511
01:17:53,500 --> 01:17:54,100
All right.

1512
01:18:10,100 --> 01:18:13,800
Can you input a tilde sign in emacs with your config?

1513
01:18:13,800 --> 01:18:15,300
Because I can't.

1514
01:18:16,200 --> 01:18:19,200
Yeah, sure.

1515
01:18:19,500 --> 01:18:20,400
I do it all the time on.

1516
01:18:20,400 --> 01:18:21,200
Handmade hero, even

1517
01:18:22,200 --> 01:18:23,700
that, that's what you're looking for.

1518
01:18:29,900 --> 01:18:31,800
I don't look for a practical advice.

1519
01:18:31,800 --> 01:18:33,200
Just interested how you do it.

1520
01:18:33,200 --> 01:18:33,600
Now.

1521
01:18:33,600 --> 01:18:36,500
Off in my friends, tell me I can't give you objective answer data.

1522
01:18:36,500 --> 01:18:37,000
Screw it.

1523
01:18:37,000 --> 01:18:37,900
I want your opinion.

1524
01:18:41,200 --> 01:18:41,500
Yeah.

1525
01:18:41,500 --> 01:18:43,900
I mean I'm not I wasn't saying that.

1526
01:18:43,900 --> 01:18:47,300
Like I'm trying to tell you that that you know,

1527
01:18:49,800 --> 01:18:53,300
That I thought you were asking me for concrete advice or anything that

1528
01:18:53,300 --> 01:18:56,500
I was saying like I would rather not talk about it yet because I don't

1529
01:18:56,500 --> 01:18:59,500
feel like I have the background to really speak on it intelligently

1530
01:19:00,000 --> 01:19:00,500
yet.

1531
01:19:01,400 --> 01:19:07,000
So I would prefer to wait for a year or two and have a more informed

1532
01:19:07,000 --> 01:19:11,000
opinion about it before I start saying anything about that.

1533
01:19:11,100 --> 01:19:14,100
Like I feel like me giving advice on how to build a studio right now

1534
01:19:14,100 --> 01:19:17,900
is really pretty dumb because it's just

1535
01:19:19,700 --> 01:19:23,300
I don't have a well enough for him to pinion, I just have things.

1536
01:19:23,300 --> 01:19:24,000
I'm trying.

1537
01:19:24,200 --> 01:19:29,400
And once I have enough of them, sort of tried and see how they go,

1538
01:19:29,400 --> 01:19:32,900
then I will have to be able to speak more intelligent Channel gently

1539
01:19:32,900 --> 01:19:33,500
on it.

1540
01:19:39,700 --> 01:19:42,400
Ever thought of special episodes with guests bonus episodes done on

1541
01:19:42,400 --> 01:19:46,100
specific Topics by someone else, being a rad to burger with Jeff or

1542
01:19:46,100 --> 01:19:50,300
being as blender digital programmer with Fabien.

1543
01:19:52,100 --> 01:19:55,200
I already asked Bobby and to do a stream on optimization for us.

1544
01:19:56,100 --> 01:20:02,500
He said he was interested in that so my hope is that yes, that will be

1545
01:20:02,500 --> 01:20:02,900
coming.

1546
01:20:02,900 --> 01:20:05,100
But that is more for a little later on the project.

1547
01:20:05,100 --> 01:20:08,400
I was I was thinking that, you know, later on when the game is

1548
01:20:08,600 --> 01:20:13,400
Or full-fledged we would, maybe see if you wanted to kind of go

1549
01:20:13,400 --> 01:20:16,000
through some stuff and go, you know, how would you take a look at

1550
01:20:16,000 --> 01:20:18,000
optimizing this, you know, what would you focus on?

1551
01:20:18,000 --> 01:20:19,300
How would you test it?

1552
01:20:19,800 --> 01:20:20,600
What's your approach?

1553
01:20:20,600 --> 01:20:21,100
You know.

1554
01:20:22,000 --> 01:20:23,800
So yes, I'm very interested in that.

1555
01:20:24,800 --> 01:20:27,500
It's maybe something for a little bit further down the road but I am

1556
01:20:27,500 --> 01:20:28,400
very interested in that.

1557
01:20:31,000 --> 01:20:33,500
Gaston 5 is formatting coming tomorrow.

1558
01:20:33,700 --> 01:20:35,800
Formatting might not be tomorrow.

1559
01:20:35,800 --> 01:20:38,500
I'm because like I said, I might show how to do what we did today

1560
01:20:38,500 --> 01:20:41,500
without a library tomorrow.

1561
01:20:42,600 --> 01:20:46,500
Just for completeness sake, in case anyone cares.

1562
01:20:47,800 --> 01:20:52,200
But, you know, formatting would probably start next week, at least

1563
01:20:52,400 --> 01:20:53,100
would be my guess.

1564
01:21:03,600 --> 01:21:04,700
Did you see 2002?

1565
01:21:04,700 --> 01:21:06,600
I assume that the bot has already answered you.

1566
01:21:06,600 --> 01:21:09,800
Probably but the new language you're probably referring to as Jay I

1567
01:21:09,900 --> 01:21:11,000
developed by John Blow.

1568
01:21:11,000 --> 01:21:15,800
The guy who did braids and is now doing the witness that he is

1569
01:21:15,800 --> 01:21:18,800
developing which is like specifically made with like the pragmatic

1570
01:21:18,800 --> 01:21:24,300
programmer in mind and it's been it's been kind of going along really

1571
01:21:24,300 --> 01:21:26,300
well, even though it's only a spare time thing for him.

1572
01:21:35,800 --> 01:21:36,400
We good.

1573
01:21:49,900 --> 01:21:51,300
We good.

1574
01:21:53,000 --> 01:21:53,700
Looks like it.

1575
01:21:56,500 --> 01:22:00,200
Alright, I'm gonna go.

1576
01:22:02,600 --> 01:22:03,600
Probably to bed.

1577
01:22:08,000 --> 01:22:10,900
All right guys, we're going to wrap it up here.

1578
01:22:13,100 --> 01:22:14,200
Go ahead and close this down.

1579
01:22:17,700 --> 01:22:20,400
Thank you for joining me for another episode of handmade hero.

1580
01:22:20,400 --> 01:22:22,600
I hope you have enjoyed this episode.

1581
01:22:22,600 --> 01:22:25,500
This is the one and only time that I'll probably ever show you how to

1582
01:22:25,500 --> 01:22:26,300
use a library.

1583
01:22:26,300 --> 01:22:31,200
But I am proud to show how to use an STD library to, as like I said,

1584
01:22:31,500 --> 01:22:36,200
it's one of the only kinds that I can wholeheartedly endorse.

1585
01:22:37,200 --> 01:22:42,800
And so, if you've never used an STD Library, I hope I've done a good

1586
01:22:42,800 --> 01:22:47,200
job on the stream and showing you the reasons why it's really so much.

1587
01:22:48,400 --> 01:22:53,000
More useful and more satisfying than a lot of other libraries, you

1588
01:22:53,000 --> 01:22:54,000
might choose.

1589
01:22:54,000 --> 01:22:55,200
And I highly recommend.

1590
01:22:55,300 --> 01:22:57,100
Checking out the ones that Sean has made available.

1591
01:22:57,100 --> 01:22:59,800
They are all really very useful.

1592
01:23:00,100 --> 01:23:03,700
And like I said on handmade hero, we won't be using any libraries in

1593
01:23:03,700 --> 01:23:04,400
the game.

1594
01:23:04,700 --> 01:23:07,700
So it is library free and the asset processor.

1595
01:23:07,700 --> 01:23:09,500
I'd be fine with leaving the stb thing in there.

1596
01:23:09,500 --> 01:23:12,400
I have no problem with leaving Libras in the asset processor, but in

1597
01:23:12,400 --> 01:23:15,400
general, we won't be using any libraries in handmade here, a proper.

1598
01:23:16,200 --> 01:23:17,300
So, I am not using

1599
01:23:17,500 --> 01:23:20,700
STP libraries there, but like I've said many times before people asked

1600
01:23:20,700 --> 01:23:27,000
me, I would have no qualms about doing, so I simply don't use the stb

1601
01:23:27,000 --> 01:23:29,600
libraries on handmade hero because I want to show everyone how to

1602
01:23:29,600 --> 01:23:30,800
write the game from scratch.

1603
01:23:31,000 --> 01:23:32,600
It's for educational purposes.

1604
01:23:32,900 --> 01:23:35,300
It's not because there's anything wrong with UCB libraries.

1605
01:23:35,400 --> 01:23:39,800
The SUV libraries are a great service to humanity and if you are

1606
01:23:39,800 --> 01:23:42,800
working on a game and feel like you might want to use a library for

1607
01:23:42,800 --> 01:23:46,700
something, they are the ones to look at first for sure.

1608
01:23:47,600 --> 01:23:50,200
So, I hope I've given you a good production to that, and I hope that

1609
01:23:50,200 --> 01:23:53,900
you find them to be useful and I hope that you take some time to thank

1610
01:23:53,900 --> 01:23:55,000
Sean Barrett for them.

1611
01:23:56,100 --> 01:23:59,800
If you would like to find him, you can find him

1612
01:24:00,900 --> 01:24:08,000
Right here, this is his Twitter and not only can you follow him on

1613
01:24:08,000 --> 01:24:16,200
Twitter, if you would like to do that, you can also check out his his

1614
01:24:16,200 --> 01:24:23,400
twitch page because like me, he's streams, programming streams.

1615
01:24:24,300 --> 01:24:26,200
Actually, I guess it's not nothing is what is it?

1616
01:24:26,200 --> 01:24:28,700
It's nothing's too or something like this.

1617
01:24:29,200 --> 01:24:30,500
He's got it in here somewhere.

1618
01:24:31,600 --> 01:24:32,000
There it is.

1619
01:24:32,000 --> 01:24:32,800
Nothing's too.

1620
01:24:33,900 --> 01:24:37,100
If you want to check out his twitch Channel, you can also watch him

1621
01:24:37,100 --> 01:24:42,600
programming his, like, Minecraft engine that he was, he was working

1622
01:24:42,600 --> 01:24:42,900
on.

1623
01:24:43,000 --> 01:24:45,900
You can, you can subscribe to his twitch channel.

1624
01:24:45,900 --> 01:24:48,100
It's twitch.tv slash nothing's too.

1625
01:24:49,000 --> 01:24:51,600
So that's the guy who made that library and the other great libraries

1626
01:24:51,600 --> 01:24:52,700
that go along with it.

1627
01:24:53,100 --> 01:24:55,200
I highly recommend, checking them out and saying hi to Sean when you

1628
01:24:55,200 --> 01:24:57,600
get a chance and checking out his twitch Channel, if you want to see

1629
01:24:57,600 --> 01:25:00,800
in programming, that is it for today's episode.

1630
01:25:00,900 --> 01:25:04,800
Dude, if you want to follow along at home with the code you can always

1631
01:25:04,800 --> 01:25:08,100
go to handmade hero dot org and pre-order the source code.

1632
01:25:09,100 --> 01:25:11,900
I pulled a pre-order the game and it comes with all the source code.

1633
01:25:12,000 --> 01:25:15,400
Even now as we're building it, you can get it every night after I'm

1634
01:25:15,400 --> 01:25:16,000
done coding.

1635
01:25:16,700 --> 01:25:19,000
You can also if you just want to support this video series because you

1636
01:25:19,000 --> 01:25:21,600
like it, you can support our patreon page.

1637
01:25:21,700 --> 01:25:26,400
We also have a forums site that you can go to and ask questions and

1638
01:25:26,500 --> 01:25:29,500
we've got a tweet bot that you can go to to find out the schedule so

1639
01:25:29,500 --> 01:25:30,600
check those out.

1640
01:25:30,900 --> 01:25:34,100
I'm too sleepy to talk more about them right now, maybe on the next

1641
01:25:34,100 --> 01:25:34,600
string.

1642
01:25:35,200 --> 01:25:38,500
So until tomorrow which will be the normal time 5 p.m.

1643
01:25:38,500 --> 01:25:42,400
Pacific Daylight time until then everyone have fun coding and I will

1644
01:25:42,400 --> 01:25:44,400
see you guys on the internet.

