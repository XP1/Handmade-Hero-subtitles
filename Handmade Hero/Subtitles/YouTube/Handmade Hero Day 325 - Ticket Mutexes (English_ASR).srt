1
00:00:02,419 --> 00:00:06,330
hello everyone and welcome to handmade

2
00:00:04,980 --> 00:00:10,170
Hero the show where we code a complete

3
00:00:06,330 --> 00:00:12,120
game live on stream we are just sort of

4
00:00:10,169 --> 00:00:14,960
cleaning out our bug list here because

5
00:00:12,119 --> 00:00:17,160
we've got some issues that we had set up

6
00:00:14,960 --> 00:00:19,350
where we were like we know we want to go

7
00:00:17,160 --> 00:00:22,350
through and sort of fix a couple things

8
00:00:19,350 --> 00:00:24,330
that we'd had that we'd left sitting for

9
00:00:22,350 --> 00:00:26,539
a while and we did a bunch of that and

10
00:00:24,329 --> 00:00:29,939
we're down to the very last few things

11
00:00:26,539 --> 00:00:32,730
we did part of one of them yesterday

12
00:00:29,939 --> 00:00:34,380
which is switching our OpenGL texture

13
00:00:32,729 --> 00:00:37,218
downloading from asynchronous to

14
00:00:34,380 --> 00:00:40,379
synchronous because drivers were not

15
00:00:37,219 --> 00:00:43,829
apparently very happy and we actually I

16
00:00:40,378 --> 00:00:45,509
heard from friends who done a bunch of

17
00:00:43,829 --> 00:00:47,579
like porting work to various platform

18
00:00:45,509 --> 00:00:49,259
stuff - who were saying yeah do not try

19
00:00:47,579 --> 00:00:52,109
to do multi-threaded OpenGL it's a

20
00:00:49,259 --> 00:00:55,710
disaster so I was like okay that's

21
00:00:52,109 --> 00:01:00,030
totally fair so we are switching over

22
00:00:55,710 --> 00:01:02,370
from multi thread to single thread open

23
00:01:00,030 --> 00:01:04,049
gel texture transfers and so we did part

24
00:01:02,369 --> 00:01:06,929
of the work for that yesterday and we're

25
00:01:04,049 --> 00:01:08,580
gonna do the other part of it today and

26
00:01:06,930 --> 00:01:09,840
then hopefully we'll have time to kind

27
00:01:08,579 --> 00:01:11,459
of wrap it up and debug it as well and

28
00:01:09,840 --> 00:01:13,560
then we'll have that off our list and

29
00:01:11,459 --> 00:01:16,709
then we can move on to the final item we

30
00:01:13,560 --> 00:01:19,439
have which is clang compatibility which

31
00:01:16,709 --> 00:01:22,500
is then we'd be done with all of our

32
00:01:19,438 --> 00:01:25,048
issue list well all the issue lists that

33
00:01:22,500 --> 00:01:26,938
we can do right now the other ones like

34
00:01:25,049 --> 00:01:28,590
make sure we have a guy in a tree or

35
00:01:26,938 --> 00:01:33,328
stuff like that which is you know kind

36
00:01:28,590 --> 00:01:35,009
of a Content request okay so the thing

37
00:01:33,328 --> 00:01:37,289
that I wanted to talk about today I

38
00:01:35,009 --> 00:01:39,209
thought would be a good time to show how

39
00:01:37,290 --> 00:01:41,100
to do this that's just an educational

40
00:01:39,209 --> 00:01:45,118
sort of concept that I thought would be

41
00:01:41,099 --> 00:01:47,669
good that that we can use for the system

42
00:01:45,118 --> 00:01:49,140
that we were about to implement

43
00:01:47,670 --> 00:01:54,450
yesterday that we set up and we're like

44
00:01:49,140 --> 00:01:56,819
okay we're gonna build son I should I

45
00:01:54,450 --> 00:01:57,990
really just need to make a we do a

46
00:01:56,819 --> 00:02:00,449
stream where we just go find what that

47
00:01:57,989 --> 00:02:02,819
bug is because it's got to be something

48
00:02:00,450 --> 00:02:03,990
we could figure out and I and the source

49
00:02:02,819 --> 00:02:06,000
code is publicly available for this

50
00:02:03,989 --> 00:02:08,399
program so it seems crazy not to take

51
00:02:06,000 --> 00:02:12,509
advantage of that and fix it all right

52
00:02:08,399 --> 00:02:16,789
so let's see here day 325

53
00:02:12,509 --> 00:02:16,789
and I want to talk about ticket taking

54
00:02:17,330 --> 00:02:27,409
and ticket taking is it's pretty cool

55
00:02:23,189 --> 00:02:30,799
it's a multi-threading concept that

56
00:02:27,408 --> 00:02:33,719
let's try and get that ok connected

57
00:02:30,799 --> 00:02:35,370
that's really pretty simple once you

58
00:02:33,719 --> 00:02:39,030
kind of see how it works it's really

59
00:02:35,370 --> 00:02:40,469
basic but it's pretty handy and it's a

60
00:02:39,030 --> 00:02:42,840
little bit better than the way that you

61
00:02:40,469 --> 00:02:44,729
might do mutexes otherwise and so I

62
00:02:42,840 --> 00:02:49,920
don't think we've done one on handmade

63
00:02:44,729 --> 00:02:52,500
hero and I inside my codebase at Molly I

64
00:02:49,919 --> 00:02:54,030
think I I might literally use them

65
00:02:52,500 --> 00:02:55,530
exclusively like I don't even know if I

66
00:02:54,030 --> 00:03:00,239
use anything other than ticket taking

67
00:02:55,530 --> 00:03:02,039
there might be I don't really know but I

68
00:03:00,239 --> 00:03:03,810
think I may be almost entirely ticket

69
00:03:02,039 --> 00:03:05,848
taking in our code base so I'm not I

70
00:03:03,810 --> 00:03:07,289
don't quote me on that but it's

71
00:03:05,848 --> 00:03:09,689
certainly the bulk of the things for

72
00:03:07,289 --> 00:03:11,098
ticket taking so I started to show how

73
00:03:09,689 --> 00:03:14,639
to do them

74
00:03:11,098 --> 00:03:16,018
so what what ticket say what is ticket

75
00:03:14,639 --> 00:03:16,828
taking why do I care about it what why

76
00:03:16,019 --> 00:03:19,349
are we talking about right now

77
00:03:16,829 --> 00:03:20,700
well as you know if you've been

78
00:03:19,348 --> 00:03:22,409
following the series when we originally

79
00:03:20,699 --> 00:03:26,328
did some of our multi-threading work as

80
00:03:22,409 --> 00:03:30,168
you know you obviously have this sort of

81
00:03:26,329 --> 00:03:33,709
fundamental you sort of core problem

82
00:03:30,169 --> 00:03:36,989
which is that when you have two or more

83
00:03:33,709 --> 00:03:38,969
threads in the system working on things

84
00:03:36,989 --> 00:03:41,489
that could happen at the same time you

85
00:03:38,969 --> 00:03:43,739
have an inherent consensus problem where

86
00:03:41,489 --> 00:03:46,680
there's states of things that you need

87
00:03:43,739 --> 00:03:49,259
to be coherent right you can't just have

88
00:03:46,680 --> 00:03:51,000
two threads randomly writing to the same

89
00:03:49,259 --> 00:03:52,918
memory or reading from that memory and

90
00:03:51,000 --> 00:03:54,419
expect good results because you don't

91
00:03:52,919 --> 00:03:56,370
know the order in which they'll do

92
00:03:54,419 --> 00:03:58,709
things and you could end up with

93
00:03:56,370 --> 00:04:01,500
corrupted data and we sort of did or not

94
00:03:58,709 --> 00:04:04,319
even said Krebs data but that invalid

95
00:04:01,500 --> 00:04:05,639
states basically right and we talked

96
00:04:04,318 --> 00:04:07,738
about this a bunch so I'd encourage you

97
00:04:05,639 --> 00:04:09,750
to go maybe listen to the earlier ones

98
00:04:07,739 --> 00:04:10,739
if that sounds very strange to you or

99
00:04:09,750 --> 00:04:14,250
you're not sure what I'm talking about

100
00:04:10,739 --> 00:04:16,978
but in general just to recap we could

101
00:04:14,250 --> 00:04:19,379
take a very very simple concept such as

102
00:04:16,978 --> 00:04:20,399
a linked list that we've done many times

103
00:04:19,379 --> 00:04:22,529
singly linked lists and we've done many

104
00:04:20,399 --> 00:04:23,968
many times on handmade here oh and if

105
00:04:22,529 --> 00:04:25,199
you think about the operations that are

106
00:04:23,968 --> 00:04:25,918
involved right if we think about a

107
00:04:25,199 --> 00:04:27,870
linked list

108
00:04:25,918 --> 00:04:30,870
let's say that I just make the very

109
00:04:27,870 --> 00:04:33,750
simplest kind that I possibly could and

110
00:04:30,870 --> 00:04:35,759
so I've got a link struct and inside

111
00:04:33,750 --> 00:04:39,269
that links direct I just have a pointer

112
00:04:35,759 --> 00:04:40,620
to the next thing right and then it

113
00:04:39,269 --> 00:04:41,848
doesn't even matter what the data is in

114
00:04:40,620 --> 00:04:44,310
it we don't care we just know there's

115
00:04:41,848 --> 00:04:46,589
some data in it and an X pointer and so

116
00:04:44,310 --> 00:04:49,579
all we have the very simplest thing that

117
00:04:46,589 --> 00:04:55,019
we could possibly have we just have a

118
00:04:49,579 --> 00:04:57,568
pointer right mm-hmm and that's all

119
00:04:55,019 --> 00:04:59,218
there is to it right now you've seen me

120
00:04:57,569 --> 00:05:01,528
write the code for adding and removing

121
00:04:59,218 --> 00:05:04,199
things from a linked list many many many

122
00:05:01,528 --> 00:05:07,819
many times and so you kind of know

123
00:05:04,199 --> 00:05:09,778
exactly what the code for this type of

124
00:05:07,819 --> 00:05:12,689
structure looks like when we need to

125
00:05:09,778 --> 00:05:14,370
maintain it right if we want to add so

126
00:05:12,689 --> 00:05:18,028
here is like where we would add a link

127
00:05:14,370 --> 00:05:20,250
write the add code is extremely

128
00:05:18,028 --> 00:05:23,250
straightforward right I'm gonna get you

129
00:05:20,250 --> 00:05:25,949
know whatever my link is you know my new

130
00:05:23,250 --> 00:05:27,389
link here is just gonna be equal to you

131
00:05:25,949 --> 00:05:29,218
know something you know whatever it is I

132
00:05:27,389 --> 00:05:30,658
a locate a new one or I grab one off a

133
00:05:29,218 --> 00:05:32,908
free store or who knows doesn't matter

134
00:05:30,658 --> 00:05:35,430
for the present thing so I have a new

135
00:05:32,908 --> 00:05:39,689
one right and I'm gonna say that

136
00:05:35,430 --> 00:05:42,329
whatever the existing first thing is is

137
00:05:39,689 --> 00:05:45,528
going to become my next pointer right

138
00:05:42,329 --> 00:05:47,818
and then the first thing is gonna be me

139
00:05:45,528 --> 00:05:48,418
okay and so if you think about what that

140
00:05:47,819 --> 00:05:51,270
happens

141
00:05:48,418 --> 00:05:54,389
diagrammatically right is previously I

142
00:05:51,269 --> 00:05:56,430
just had this first pointer and it's

143
00:05:54,389 --> 00:05:58,319
pointing to something we don't know what

144
00:05:56,430 --> 00:06:01,110
it could be null right it could be

145
00:05:58,319 --> 00:06:02,610
nothing but it possibly is an existing

146
00:06:01,110 --> 00:06:05,250
linked list with some number of chains

147
00:06:02,610 --> 00:06:07,860
in it right and so then I come along and

148
00:06:05,250 --> 00:06:10,680
I've got this new one that I've made and

149
00:06:07,860 --> 00:06:14,370
so what I want to do first is make it

150
00:06:10,680 --> 00:06:18,028
point to this one whatever is there and

151
00:06:14,370 --> 00:06:19,709
then make first point to it right and I

152
00:06:18,028 --> 00:06:21,478
have to do them in that order because if

153
00:06:19,709 --> 00:06:23,848
I did them in the other order I wouldn't

154
00:06:21,478 --> 00:06:26,218
I would lose this one right because I'm

155
00:06:23,848 --> 00:06:28,829
using the value of first here so I can't

156
00:06:26,218 --> 00:06:33,899
overwrite it prior right so it has to be

157
00:06:28,829 --> 00:06:36,439
exactly this right in order to do it if

158
00:06:33,899 --> 00:06:36,439
that makes sense

159
00:06:38,350 --> 00:06:47,060
now I'll mention something else there

160
00:06:45,740 --> 00:06:49,069
are there is another way you could think

161
00:06:47,060 --> 00:06:55,399
about this which is if you want to be

162
00:06:49,069 --> 00:06:59,329
sly mr. sly pants you can initialize new

163
00:06:55,399 --> 00:07:01,879
next like like whatever the whatever

164
00:06:59,329 --> 00:07:04,870
this value is new next equal to new like

165
00:07:01,879 --> 00:07:09,680
I could I could be sly right I could do

166
00:07:04,870 --> 00:07:16,899
new arrow next to that points to itself

167
00:07:09,680 --> 00:07:21,920
and then do swap first and new next

168
00:07:16,899 --> 00:07:24,169
right because then it like first goes

169
00:07:21,920 --> 00:07:27,020
into here and new Nexus into there so

170
00:07:24,170 --> 00:07:29,650
it's worth noting that actually if your

171
00:07:27,019 --> 00:07:33,139
CPU had sort of an atomic swap operation

172
00:07:29,649 --> 00:07:35,659
you can almost make well not almost you

173
00:07:33,139 --> 00:07:37,550
can make this operation be entirely

174
00:07:35,660 --> 00:07:38,450
atomic because all you have to do to add

175
00:07:37,550 --> 00:07:40,340
something to the beginning of a linked

176
00:07:38,449 --> 00:07:46,430
list is an atomic swap and you could do

177
00:07:40,339 --> 00:07:48,889
it just pointing that out not so easy is

178
00:07:46,430 --> 00:07:51,170
is to delete something from the list

179
00:07:48,889 --> 00:07:53,209
right to remove something for the list

180
00:07:51,170 --> 00:07:54,710
and I guess maybe I'll call it remove

181
00:07:53,209 --> 00:07:56,479
because it's not really delete I suppose

182
00:07:54,709 --> 00:07:58,849
so if we're going to remove something

183
00:07:56,480 --> 00:08:03,230
from the list now what I've got to do is

184
00:07:58,850 --> 00:08:05,210
say all right the first pointer whatever

185
00:08:03,230 --> 00:08:07,310
that is is the thing is the link that

186
00:08:05,209 --> 00:08:11,539
I'm going to get right so I've got an

187
00:08:07,310 --> 00:08:13,339
old link that comes off here right and

188
00:08:11,540 --> 00:08:18,730
then what I want to do is I want to set

189
00:08:13,339 --> 00:08:18,729
first equal to whatever old next was

190
00:08:19,300 --> 00:08:26,480
right but I can't just do that because

191
00:08:23,660 --> 00:08:28,550
if I just did that I could possibly

192
00:08:26,480 --> 00:08:30,730
crash because I don't know that there's

193
00:08:28,550 --> 00:08:33,259
anything on the list ahead of time so

194
00:08:30,730 --> 00:08:36,379
technically I have to do it if here

195
00:08:33,259 --> 00:08:39,529
right I have to say if I actually got an

196
00:08:36,379 --> 00:08:41,539
old thing then I could do it now you'll

197
00:08:39,529 --> 00:08:44,179
notice there's a distinct difference

198
00:08:41,539 --> 00:08:45,589
between these two things and let me

199
00:08:44,179 --> 00:08:47,209
write that out a little clearer I was

200
00:08:45,590 --> 00:08:49,879
not great I probably should have put the

201
00:08:47,210 --> 00:08:50,990
space left space for the if but I have

202
00:08:49,879 --> 00:08:57,230
to say if or

203
00:08:50,990 --> 00:09:03,200
old right then we can do first equals

204
00:08:57,230 --> 00:09:04,909
fold first I'm sorry next but right I

205
00:09:03,200 --> 00:09:08,800
can't we know that I can't sort of

206
00:09:04,909 --> 00:09:11,028
access that guy until I've actually

207
00:09:08,799 --> 00:09:12,889
verified that he exists so there's a

208
00:09:11,028 --> 00:09:15,289
sink difference in these two this one is

209
00:09:12,889 --> 00:09:17,659
like essentially conditional free right

210
00:09:15,289 --> 00:09:19,579
this is just moving some memory rounds

211
00:09:17,659 --> 00:09:24,759
in a very predictable way either by

212
00:09:19,580 --> 00:09:26,540
doing two writes like so or a swap right

213
00:09:24,759 --> 00:09:28,490
depending how you want to structure it

214
00:09:26,539 --> 00:09:32,799
this one on the other hand has to do a

215
00:09:28,490 --> 00:09:38,419
read a test and then a right that's just

216
00:09:32,799 --> 00:09:41,059
that's just the way it is okay so now

217
00:09:38,419 --> 00:09:43,250
the question is what if we want these

218
00:09:41,059 --> 00:09:46,009
things to be happening for more than one

219
00:09:43,250 --> 00:09:49,070
thread at the same time right

220
00:09:46,009 --> 00:09:51,588
what happens if I want to start having

221
00:09:49,070 --> 00:09:53,089
this stuff be multi-threaded so people

222
00:09:51,589 --> 00:09:54,760
are adding and removing things from one

223
00:09:53,089 --> 00:09:57,440
of these singly linked lists let's say

224
00:09:54,759 --> 00:09:59,120
without regard for the fact that other

225
00:09:57,440 --> 00:10:00,950
people may be using the list at the same

226
00:09:59,120 --> 00:10:03,110
time and I want to guarantee that I

227
00:10:00,950 --> 00:10:05,089
always have a real linked list and I

228
00:10:03,110 --> 00:10:06,740
don't end up losing a link somewhere or

229
00:10:05,089 --> 00:10:08,149
getting into some situation where

230
00:10:06,740 --> 00:10:09,528
somebody's pointer points in the middle

231
00:10:08,149 --> 00:10:10,759
and nowhere or who knows what happens

232
00:10:09,528 --> 00:10:13,879
right I want to maintain the integrity

233
00:10:10,759 --> 00:10:15,379
of the list well you can immediately see

234
00:10:13,879 --> 00:10:18,049
the problem with multi-threading these

235
00:10:15,379 --> 00:10:20,720
if you just leave the code for add the

236
00:10:18,049 --> 00:10:23,120
same as it was then the problem is it's

237
00:10:20,720 --> 00:10:26,269
just two-step process right now like I

238
00:10:23,120 --> 00:10:28,909
said before if you happen to have an

239
00:10:26,269 --> 00:10:30,708
atomic swap right where I can I can

240
00:10:28,909 --> 00:10:32,480
actually swap to me and I don't mean

241
00:10:30,708 --> 00:10:35,659
swap a register in a memory location

242
00:10:32,480 --> 00:10:37,519
right I mean swap two memory locations

243
00:10:35,659 --> 00:10:39,860
atomically if you happen to have

244
00:10:37,519 --> 00:10:42,949
something like that then you could do

245
00:10:39,860 --> 00:10:47,379
this in one atomic operation and add can

246
00:10:42,950 --> 00:10:50,180
be completely mutex lists it can just go

247
00:10:47,379 --> 00:10:53,328
but if you don't have that you have two

248
00:10:50,179 --> 00:10:55,669
steps and if you have two steps then you

249
00:10:53,328 --> 00:10:58,129
have the problem of somebody can

250
00:10:55,669 --> 00:10:59,328
intercede and once you have done this

251
00:10:58,129 --> 00:11:02,328
one step here

252
00:10:59,328 --> 00:11:03,620
they may come do their odd operation

253
00:11:02,328 --> 00:11:04,699
while your thread may have gotten

254
00:11:03,620 --> 00:11:07,340
swapped out or something

255
00:11:04,700 --> 00:11:09,379
who knows what or is busy like waiting

256
00:11:07,340 --> 00:11:12,440
for some piece of memory and now when

257
00:11:09,379 --> 00:11:14,509
you do first equals new you've corrupted

258
00:11:12,440 --> 00:11:16,610
the list because they added something to

259
00:11:14,509 --> 00:11:19,399
beginning of the list then you overwrite

260
00:11:16,610 --> 00:11:21,830
that they're the correct first pointer

261
00:11:19,399 --> 00:11:24,019
with your first pointer or fitting

262
00:11:21,830 --> 00:11:26,690
whatever they put in there right you're

263
00:11:24,019 --> 00:11:28,970
if you've essentially their ad will

264
00:11:26,690 --> 00:11:31,760
essentially disappear because you

265
00:11:28,970 --> 00:11:33,740
prepared your new link pointing to the

266
00:11:31,759 --> 00:11:35,750
head the previous head of the list they

267
00:11:33,740 --> 00:11:37,960
came and added a new head and now you

268
00:11:35,750 --> 00:11:41,480
over wrote the head pointer to your

269
00:11:37,960 --> 00:11:43,280
pointer so you've totally they're new

270
00:11:41,480 --> 00:11:48,350
they're their addition has just

271
00:11:43,279 --> 00:11:50,240
disappeared right now same things true

272
00:11:48,350 --> 00:11:52,040
have removed when I pull this off and

273
00:11:50,240 --> 00:11:53,779
then start to test it well somebody in

274
00:11:52,039 --> 00:11:55,819
here could have done another remove and

275
00:11:53,779 --> 00:11:57,439
now we're both removing the same element

276
00:11:55,820 --> 00:11:59,570
right or they could come in and remove

277
00:11:57,440 --> 00:12:01,400
two or three elements and then I write

278
00:11:59,570 --> 00:12:03,860
this back in there and that's wrong

279
00:12:01,399 --> 00:12:06,529
because it's right so anytime you have a

280
00:12:03,860 --> 00:12:07,940
couple steps in the instruction you're

281
00:12:06,529 --> 00:12:11,720
at a point where you have two choices

282
00:12:07,940 --> 00:12:13,400
you certainly can't leave the code as it

283
00:12:11,720 --> 00:12:17,870
is so you can either do one of two

284
00:12:13,399 --> 00:12:21,470
things one is you can try to create an

285
00:12:17,870 --> 00:12:24,470
algorithm that's just about doing atomic

286
00:12:21,470 --> 00:12:28,070
move or compare operations that will

287
00:12:24,470 --> 00:12:29,930
work right and that's for if you want to

288
00:12:28,070 --> 00:12:31,220
be mr. fancy-pants and I don't really

289
00:12:29,929 --> 00:12:34,759
necessarily recommend doing a whole lot

290
00:12:31,220 --> 00:12:37,279
of that and the other is you can do a

291
00:12:34,759 --> 00:12:39,379
fast mutex right you could do something

292
00:12:37,279 --> 00:12:41,569
that's very low cost but that basically

293
00:12:39,379 --> 00:12:47,029
ensures that only one person does things

294
00:12:41,570 --> 00:12:49,250
at a particular time right and so that's

295
00:12:47,029 --> 00:12:51,339
what I prefer to do is have a very very

296
00:12:49,250 --> 00:12:54,110
fast mutex o mutex that only takes a few

297
00:12:51,340 --> 00:12:56,930
instructions in the case where it's

298
00:12:54,110 --> 00:12:58,759
uncontained only you know a hundred

299
00:12:56,929 --> 00:13:00,529
instructions or something 200

300
00:12:58,759 --> 00:13:02,929
instructions whatever if it's if it is

301
00:13:00,529 --> 00:13:04,579
contended so very very lightweight and

302
00:13:02,929 --> 00:13:05,959
you can use them everywhere and they

303
00:13:04,580 --> 00:13:07,670
don't really slow your code down right

304
00:13:05,960 --> 00:13:10,220
that's what I want I don't want some big

305
00:13:07,669 --> 00:13:11,990
heavyweight nasty mutex thing that has

306
00:13:10,220 --> 00:13:13,240
state or any of these other things no

307
00:13:11,990 --> 00:13:16,909
good right

308
00:13:13,240 --> 00:13:18,169
well state that has operating system

309
00:13:16,909 --> 00:13:19,429
state or anything like that

310
00:13:18,169 --> 00:13:20,899
so I want something very very very

311
00:13:19,429 --> 00:13:21,979
simple my threats are not gonna go to

312
00:13:20,899 --> 00:13:23,569
sleep or anything like that

313
00:13:21,980 --> 00:13:25,580
they're just gonna do quick checks and

314
00:13:23,570 --> 00:13:26,990
then lock up for a couple cycles if

315
00:13:25,580 --> 00:13:30,560
somebody else is in it and then proceed

316
00:13:26,990 --> 00:13:33,259
that sort of stuff right so ticket

317
00:13:30,559 --> 00:13:37,250
taking is a way that we can implement a

318
00:13:33,259 --> 00:13:39,289
really good fast simple mutex for little

319
00:13:37,250 --> 00:13:41,149
chunks of code that we just want to wrap

320
00:13:39,289 --> 00:13:43,129
so that we know that when we're going to

321
00:13:41,149 --> 00:13:44,389
access this particular piece of data we

322
00:13:43,129 --> 00:13:46,610
just want to make sure that we're the

323
00:13:44,389 --> 00:13:48,860
only person who do does this simple

324
00:13:46,610 --> 00:13:52,879
atomic operation on it and then we can

325
00:13:48,860 --> 00:13:56,060
proceed right so what is ticket taking

326
00:13:52,879 --> 00:13:58,490
about well we know we have this concept

327
00:13:56,059 --> 00:14:00,049
of atomic operations in the CPU and we

328
00:13:58,490 --> 00:14:02,810
talked about these and we talked about

329
00:14:00,049 --> 00:14:05,419
the meze protocol right which is the

330
00:14:02,809 --> 00:14:07,569
thing inside the CPU cache which allows

331
00:14:05,419 --> 00:14:09,740
different CPU cores and different

332
00:14:07,570 --> 00:14:11,570
entirely different physical processors

333
00:14:09,740 --> 00:14:14,299
in a multi multi processor masti not

334
00:14:11,570 --> 00:14:15,680
just a multi-core machine to get the

335
00:14:14,299 --> 00:14:18,019
state of memory straight between

336
00:14:15,679 --> 00:14:19,549
themselves right and we know that we

337
00:14:18,019 --> 00:14:21,110
have certain operations we can rely on

338
00:14:19,549 --> 00:14:23,509
that will go through that meze protocol

339
00:14:21,110 --> 00:14:27,379
to do the right thing and make sure that

340
00:14:23,509 --> 00:14:29,299
we can do stuff like test and set a

341
00:14:27,379 --> 00:14:32,360
particular value in one operation

342
00:14:29,299 --> 00:14:34,399
without the possibility of another core

343
00:14:32,360 --> 00:14:38,870
or processor coming in there and doing

344
00:14:34,399 --> 00:14:39,740
something in between right and one of

345
00:14:38,870 --> 00:14:42,379
the things that's really great and

346
00:14:39,740 --> 00:14:44,480
Fabien pointed this out to me actually

347
00:14:42,379 --> 00:14:46,399
it was in the middle of hand-made here

348
00:14:44,480 --> 00:14:48,769
before he pointed out to me I think I

349
00:14:46,399 --> 00:14:50,179
mentioned to it there's a really great

350
00:14:48,769 --> 00:14:52,809
paper and I'll mention it again it's

351
00:14:50,179 --> 00:14:56,029
called weight free synchronization

352
00:14:52,809 --> 00:14:59,239
that's by this this fellow right here

353
00:14:56,029 --> 00:15:02,149
Maurice Herlihy and this is probably one

354
00:14:59,240 --> 00:15:05,169
of the best papers that there's been in

355
00:15:02,149 --> 00:15:07,490
like the history of of stuff papers and

356
00:15:05,169 --> 00:15:09,199
certainly in in the history of

357
00:15:07,490 --> 00:15:10,310
multi-threading I don't think you could

358
00:15:09,200 --> 00:15:13,790
get a better paper than this it's

359
00:15:10,309 --> 00:15:17,029
insanely good and the important part of

360
00:15:13,789 --> 00:15:17,750
this paper that the takeaway if you take

361
00:15:17,029 --> 00:15:22,159
away nothing else

362
00:15:17,750 --> 00:15:23,570
it's that atomic compare exchange is the

363
00:15:22,159 --> 00:15:26,089
fundamental building block for all

364
00:15:23,570 --> 00:15:27,980
consensus algorithms and the reason for

365
00:15:26,090 --> 00:15:30,080
that is that Maurice Hurley he basically

366
00:15:27,980 --> 00:15:31,938
proved in that paper that for the vast

367
00:15:30,080 --> 00:15:33,919
majority of things you

368
00:15:31,938 --> 00:15:36,108
I want to try to do concurrently it is

369
00:15:33,918 --> 00:15:38,208
literally impossible to do them without

370
00:15:36,109 --> 00:15:40,639
that operation like that is the

371
00:15:38,208 --> 00:15:42,948
fundamental operation atomic increment

372
00:15:40,639 --> 00:15:46,788
is not a fundamental operation nor is

373
00:15:42,948 --> 00:15:49,219
decrement nor is swap it's only atomic

374
00:15:46,788 --> 00:15:51,769
compare exchange that actually lets you

375
00:15:49,220 --> 00:15:54,309
build everything and so at some level

376
00:15:51,769 --> 00:15:56,658
you can kind of think of it as like well

377
00:15:54,308 --> 00:15:59,118
the best you're gonna be able to do is

378
00:15:56,658 --> 00:16:00,798
certain very specific other sorts of

379
00:15:59,119 --> 00:16:03,319
things with the other atomic operations

380
00:16:00,798 --> 00:16:05,538
but for anything real atomic comparing

381
00:16:03,318 --> 00:16:07,818
exchange is where it's at right

382
00:16:05,538 --> 00:16:09,619
but anyway details for the paper you can

383
00:16:07,818 --> 00:16:11,088
go ahead and read them it talks about

384
00:16:09,619 --> 00:16:12,709
consensus numbers and all sort of the

385
00:16:11,089 --> 00:16:13,999
fundamental things and Maurice really he

386
00:16:12,708 --> 00:16:15,498
invented all that as far as I can tell

387
00:16:13,999 --> 00:16:16,849
like that paper is paper we vetted

388
00:16:15,499 --> 00:16:18,859
always like hey guys guess what I

389
00:16:16,849 --> 00:16:22,789
figured it all out we can we can stop

390
00:16:18,859 --> 00:16:24,589
now and that was it so with our atomic

391
00:16:22,788 --> 00:16:30,470
operations the one I'm gonna focus on

392
00:16:24,589 --> 00:16:32,119
here is atomic compare exchange and

393
00:16:30,470 --> 00:16:33,798
basically the one that I you know

394
00:16:32,119 --> 00:16:35,658
there's various flavors that these sorts

395
00:16:33,798 --> 00:16:37,338
of things could take but what I want to

396
00:16:35,658 --> 00:16:39,229
talk about is Sicily the atomic

397
00:16:37,339 --> 00:16:41,089
operation again we've done it before on

398
00:16:39,229 --> 00:16:43,989
handmade hero but it's essentially

399
00:16:41,089 --> 00:16:47,779
atomic operation that says you know if

400
00:16:43,989 --> 00:16:50,720
you know I've got some pointer right so

401
00:16:47,778 --> 00:16:53,178
if my my target here I'll guess I'll

402
00:16:50,720 --> 00:16:55,449
call it the destination if the

403
00:16:53,178 --> 00:17:01,158
destination equals an expected value

404
00:16:55,448 --> 00:17:05,688
right set the destination equal to a new

405
00:17:01,158 --> 00:17:08,599
value right and in either case I want

406
00:17:05,689 --> 00:17:10,129
you to return to me what the old value

407
00:17:08,599 --> 00:17:12,168
was right

408
00:17:10,128 --> 00:17:18,038
and even that I don't really necessarily

409
00:17:12,169 --> 00:17:18,038
need all I really need to know right is

410
00:17:18,669 --> 00:17:22,059
was it going to say

411
00:17:24,318 --> 00:17:33,230
I don't even remember what I was gonna

412
00:17:29,419 --> 00:17:38,409
say Oh all I really need to know is

413
00:17:33,230 --> 00:17:42,048
whether the assignment succeeded right

414
00:17:38,409 --> 00:17:44,380
so that is a pretty big one right and

415
00:17:42,048 --> 00:17:47,028
the other one that I wanted to mention

416
00:17:44,380 --> 00:17:48,860
is the super simple one that we've also

417
00:17:47,028 --> 00:17:53,359
done on handmade here which is just

418
00:17:48,859 --> 00:17:55,219
atomic increment right an atomic

419
00:17:53,359 --> 00:17:58,969
increment is just one that says all

420
00:17:55,220 --> 00:18:02,990
right I just need you to add 1 to the

421
00:17:58,970 --> 00:18:05,509
value of whatever is in this location I

422
00:18:02,990 --> 00:18:07,099
don't care what the value was beforehand

423
00:18:05,509 --> 00:18:09,829
I just need you to add something to it

424
00:18:07,099 --> 00:18:12,558
but I need you to tell me what it was

425
00:18:09,829 --> 00:18:14,628
before right and so that one's really

426
00:18:12,558 --> 00:18:20,589
simple that one's basically just like

427
00:18:14,628 --> 00:18:22,278
you know return star dest plus plus or

428
00:18:20,589 --> 00:18:26,599
depending on the situation

429
00:18:22,278 --> 00:18:31,038
plus plus star dest right kind of a

430
00:18:26,599 --> 00:18:33,528
thing whether or not it returns you the

431
00:18:31,038 --> 00:18:35,628
pre or post incremented value can differ

432
00:18:33,528 --> 00:18:37,220
depending on you know the processors

433
00:18:35,628 --> 00:18:39,619
implementation or the library that

434
00:18:37,220 --> 00:18:41,899
you're using outside the compiler that

435
00:18:39,619 --> 00:18:43,278
you're using to access that could choose

436
00:18:41,898 --> 00:18:47,418
to do it different ways and so on as

437
00:18:43,278 --> 00:18:49,730
well right so just keeping these in mind

438
00:18:47,419 --> 00:18:52,278
these are the atomic building blocks

439
00:18:49,730 --> 00:18:54,889
that we tend to work with and I think

440
00:18:52,278 --> 00:18:56,679
that's pretty much everything I wanted

441
00:18:54,888 --> 00:19:02,329
to say too

442
00:18:56,679 --> 00:19:04,780
motivate this whole thing yeah all right

443
00:19:02,329 --> 00:19:08,240
so let's talk about our ticket taking

444
00:19:04,779 --> 00:19:11,119
scenario now so ticket taking is a very

445
00:19:08,240 --> 00:19:16,269
very very simple thing we can do and it

446
00:19:11,119 --> 00:19:19,639
actually doesn't really involve the the

447
00:19:16,269 --> 00:19:21,710
well I guess you'll see it doesn't have

448
00:19:19,640 --> 00:19:23,809
to involve sort of the more strenuous

449
00:19:21,710 --> 00:19:26,630
consensus number things so if you look

450
00:19:23,808 --> 00:19:28,129
at that Maurice Herlihy paper I'll kind

451
00:19:26,630 --> 00:19:30,919
of make a brief mention back to it in

452
00:19:28,130 --> 00:19:32,440
case you want to go read it but we'll go

453
00:19:30,919 --> 00:19:36,530
a little bit forwards from there

454
00:19:32,440 --> 00:19:39,019
regardless so anyway ticket taking let's

455
00:19:36,529 --> 00:19:41,389
first talk about what we need to have

456
00:19:39,019 --> 00:19:44,900
happen right so let's say that we have

457
00:19:41,390 --> 00:19:47,000
our list you know add function here that

458
00:19:44,900 --> 00:19:49,600
we were going to do right this the one

459
00:19:47,000 --> 00:19:52,880
that I talked about beforehand right and

460
00:19:49,599 --> 00:19:55,219
we know that this thing is not atomic we

461
00:19:52,880 --> 00:19:57,559
know that it's not thread safe so when

462
00:19:55,220 --> 00:19:59,329
we call this add we know that we've

463
00:19:57,558 --> 00:20:01,160
going to have to do something to make

464
00:19:59,329 --> 00:20:03,918
sure that anyone who's working with this

465
00:20:01,160 --> 00:20:06,950
list has prevented everyone else from

466
00:20:03,919 --> 00:20:08,840
doing anything at that time right so

467
00:20:06,950 --> 00:20:12,019
that's just you know that's what we're

468
00:20:08,839 --> 00:20:15,019
trying to do here and so we want to

469
00:20:12,019 --> 00:20:16,099
basically put something around it like

470
00:20:15,019 --> 00:20:18,289
we said we usually call these things

471
00:20:16,099 --> 00:20:27,259
mutexes the phrase mutual exclusion

472
00:20:18,289 --> 00:20:28,639
right we often call it something mutex

473
00:20:27,259 --> 00:20:31,369
to say a we want to be mutually

474
00:20:28,640 --> 00:20:32,870
exclusive when we access this thing we

475
00:20:31,369 --> 00:20:34,399
don't want anyone else to access the

476
00:20:32,869 --> 00:20:36,168
same time because we know the operation

477
00:20:34,400 --> 00:20:38,480
we're doing on it fundamentally can't

478
00:20:36,169 --> 00:20:40,669
happen at the same time as someone else

479
00:20:38,480 --> 00:20:43,220
who might be using it right so if

480
00:20:40,669 --> 00:20:48,919
effectively what we want to write is

481
00:20:43,220 --> 00:20:56,750
something like you know begin you know

482
00:20:48,919 --> 00:20:58,549
access or whatever end access and we

483
00:20:56,750 --> 00:21:00,890
kind of want to wrap this thing in just

484
00:20:58,548 --> 00:21:02,210
a little kind of wrapper that says we're

485
00:21:00,890 --> 00:21:04,009
going to begin access here we're gonna

486
00:21:02,210 --> 00:21:05,690
end access here and everything inside

487
00:21:04,009 --> 00:21:07,970
here is going to have to happen in a way

488
00:21:05,690 --> 00:21:08,900
that is ensure that nobody else can be

489
00:21:07,970 --> 00:21:10,039
doing that any

490
00:21:08,900 --> 00:21:14,259
to the list at the time when that

491
00:21:10,039 --> 00:21:17,450
happens right so what we need from this

492
00:21:14,259 --> 00:21:20,420
begin access and access what we need is

493
00:21:17,450 --> 00:21:22,910
some way of saying make sure my thread

494
00:21:20,420 --> 00:21:24,470
can do what it's going to do so wait

495
00:21:22,910 --> 00:21:29,060
until my thread can do what it's going

496
00:21:24,470 --> 00:21:30,470
to do also once I am ready to do what

497
00:21:29,059 --> 00:21:34,190
I'm going to do make sure no other

498
00:21:30,470 --> 00:21:36,500
thread can think it can do it and then

499
00:21:34,190 --> 00:21:39,470
when I get down to end access its make

500
00:21:36,500 --> 00:21:41,660
sure I can tell any other thread now you

501
00:21:39,470 --> 00:21:44,839
can do it right so we need to sort of

502
00:21:41,660 --> 00:21:48,200
wait till I can do something lock

503
00:21:44,839 --> 00:21:50,329
everyone else out do the thing and then

504
00:21:48,200 --> 00:21:52,460
unlock so everyone else can come back in

505
00:21:50,329 --> 00:21:56,119
and that's the fundamental option you

506
00:21:52,460 --> 00:21:59,329
know mutex operation right okay so

507
00:21:56,119 --> 00:22:01,759
what's one way we could implement this

508
00:21:59,329 --> 00:22:05,569
just looks a very very basic way to

509
00:22:01,759 --> 00:22:08,750
implement this right well if I have my

510
00:22:05,569 --> 00:22:10,789
atomic increment and for purposes of you

511
00:22:08,750 --> 00:22:13,039
know of simplicity here I'm gonna call

512
00:22:10,789 --> 00:22:14,629
this atomic add because that way we can

513
00:22:13,039 --> 00:22:17,809
think of it as one thing like you know

514
00:22:14,630 --> 00:22:20,270
if if I want to be able to do plus one

515
00:22:17,809 --> 00:22:21,799
or minus one I can which is kind of

516
00:22:20,269 --> 00:22:23,389
handy for talking about this in the

517
00:22:21,799 --> 00:22:26,990
general case I don't actually need it

518
00:22:23,390 --> 00:22:34,730
for the ticket taking necessarily but

519
00:22:26,990 --> 00:22:37,940
yeah for describing it other ways you

520
00:22:34,730 --> 00:22:39,019
might do something I might so let's say

521
00:22:37,940 --> 00:22:42,350
we could talk about the more general

522
00:22:39,019 --> 00:22:43,519
atomic add not just increment although I

523
00:22:42,349 --> 00:22:45,799
don't think I'm actually needed for the

524
00:22:43,519 --> 00:22:47,029
ticket ticking that's separate issue so

525
00:22:45,799 --> 00:22:49,250
when when you look it's only this how

526
00:22:47,029 --> 00:22:51,319
might we do something well you could

527
00:22:49,250 --> 00:22:53,509
imagine we could do something where we

528
00:22:51,319 --> 00:22:56,929
said well alright let's suppose we have

529
00:22:53,509 --> 00:22:59,299
some volatile global int right and

530
00:22:56,930 --> 00:23:01,640
remember I'm just gonna say again what

531
00:22:59,299 --> 00:23:04,490
volatile means and for the love of God

532
00:23:01,640 --> 00:23:07,460
people do not write in and send me any

533
00:23:04,490 --> 00:23:09,940
of those awful volatile articles that

534
00:23:07,460 --> 00:23:12,500
people sent in that we're just all wrong

535
00:23:09,940 --> 00:23:13,850
trust me when I say what volatile means

536
00:23:12,500 --> 00:23:16,519
I'm not lying to you

537
00:23:13,849 --> 00:23:18,199
volatile just means the compiler cannot

538
00:23:16,519 --> 00:23:20,180
assume that it knows what the value is

539
00:23:18,200 --> 00:23:21,559
because it read it before and it is

540
00:23:20,180 --> 00:23:22,700
important to use in multi-threaded

541
00:23:21,559 --> 00:23:24,649
coding it is not

542
00:23:22,700 --> 00:23:26,809
superfluous despite what you may have

543
00:23:24,650 --> 00:23:30,710
read on really bad Stack Overflow posts

544
00:23:26,809 --> 00:23:33,889
so anyway let's suppose we have a thing

545
00:23:30,710 --> 00:23:35,890
here volatile in called mutex and we

546
00:23:33,890 --> 00:23:38,450
have that as a global variable right

547
00:23:35,890 --> 00:23:39,920
well you can imagine we could do

548
00:23:38,450 --> 00:23:45,819
something where we could say alright

549
00:23:39,920 --> 00:23:49,130
let's go ahead and do some sort of a

550
00:23:45,819 --> 00:23:53,859
operation on that integer right where we

551
00:23:49,130 --> 00:24:03,620
could say yeah if we were to you know if

552
00:23:53,859 --> 00:24:08,089
atomic you know add on my mutex with one

553
00:24:03,619 --> 00:24:11,389
write something well you know what I

554
00:24:08,089 --> 00:24:14,359
might do not think about this to be

555
00:24:11,390 --> 00:24:16,280
safer pretend I didn't say this let's

556
00:24:14,359 --> 00:24:18,889
just do the let's just use this one

557
00:24:16,279 --> 00:24:25,450
because it's much nicer so let's say I

558
00:24:18,890 --> 00:24:31,540
do atomic exchange right compare

559
00:24:25,450 --> 00:24:34,250
exchange we go of my mutex

560
00:24:31,539 --> 00:24:37,849
and I want to do a atomic compare

561
00:24:34,250 --> 00:24:41,480
exchange I want to compare it to zero

562
00:24:37,849 --> 00:24:44,419
and I want to set it to one right and so

563
00:24:41,480 --> 00:24:49,430
if I do that and I get back 0 which is

564
00:24:44,420 --> 00:24:51,230
what I'm expecting it to be right then

565
00:24:49,430 --> 00:24:56,080
I'm going to do my operation so I'm

566
00:24:51,230 --> 00:24:56,079
going to do this this thing here

567
00:24:58,140 --> 00:25:04,960
if I don't then I know that this mutex

568
00:25:01,990 --> 00:25:07,299
was not set to zero right and so what I

569
00:25:04,960 --> 00:25:09,519
can do is I can say well alright let's

570
00:25:07,299 --> 00:25:13,839
just assume that I do this in a loop

571
00:25:09,519 --> 00:25:19,779
forever and if I ever get to do my

572
00:25:13,839 --> 00:25:21,699
operation I break okay so when I'm going

573
00:25:19,779 --> 00:25:24,490
to break obviously I need to clear back

574
00:25:21,700 --> 00:25:26,230
my mutex so I can add a bit of code in

575
00:25:24,490 --> 00:25:30,519
here let me clear this out a little bit

576
00:25:26,230 --> 00:25:38,579
just to make that a little cleaner to

577
00:25:30,519 --> 00:25:44,200
read list add mutex equal zero

578
00:25:38,579 --> 00:25:48,579
break and let's assume that this is

579
00:25:44,200 --> 00:25:49,750
being done in a for loop right so now

580
00:25:48,579 --> 00:25:52,119
take a look at what this is going to do

581
00:25:49,750 --> 00:25:54,220
by default you know this mutex is equal

582
00:25:52,119 --> 00:25:56,949
to zero I come in here I say all right

583
00:25:54,220 --> 00:25:58,660
atomic compare exchange zero one

584
00:25:56,950 --> 00:26:00,819
it's obviously equal to zero so I stick

585
00:25:58,660 --> 00:26:03,009
a 1 in there I then do my list add I

586
00:26:00,819 --> 00:26:07,179
then clear the mutex back to zero and I

587
00:26:03,009 --> 00:26:10,539
break right off we go now since this

588
00:26:07,180 --> 00:26:12,700
isn't an atomic right just to be safe

589
00:26:10,539 --> 00:26:15,970
you probably want to write barrier in

590
00:26:12,700 --> 00:26:17,559
here right you want to finish anything

591
00:26:15,970 --> 00:26:19,720
that was gonna happen

592
00:26:17,559 --> 00:26:21,429
you want to write barrier right here so

593
00:26:19,720 --> 00:26:23,079
in between these two I probably want to

594
00:26:21,430 --> 00:26:25,210
write barrier because as soon as I set

595
00:26:23,079 --> 00:26:27,879
this to zero that means any other thread

596
00:26:25,210 --> 00:26:29,350
could could start executing right to

597
00:26:27,880 --> 00:26:30,490
start doing code to it so I probably

598
00:26:29,349 --> 00:26:32,230
want to write barrier in there but

599
00:26:30,490 --> 00:26:33,190
that's a little bit not part of what we

600
00:26:32,230 --> 00:26:37,420
actually care about at this particular

601
00:26:33,190 --> 00:26:40,150
point so ignore that temporarily all

602
00:26:37,420 --> 00:26:42,220
right so now if another thread while we

603
00:26:40,150 --> 00:26:44,350
were in here came through and did if

604
00:26:42,220 --> 00:26:46,269
atomic compare exchange right what's it

605
00:26:44,349 --> 00:26:49,480
going to do well that mutex is set to

606
00:26:46,269 --> 00:26:51,339
one right so this will fail and so when

607
00:26:49,480 --> 00:26:53,410
it fails right because it will return a

608
00:26:51,339 --> 00:26:55,119
one it won't equal zero when it fails

609
00:26:53,410 --> 00:26:57,910
it'll just skip this and loop and try

610
00:26:55,119 --> 00:27:00,099
again so what will happen is the first

611
00:26:57,910 --> 00:27:01,630
thread in will set it to one and do the

612
00:27:00,099 --> 00:27:03,939
operation the rest of the threads will

613
00:27:01,630 --> 00:27:05,200
just sit there trying to atomic compare

614
00:27:03,940 --> 00:27:07,990
exchange over and over and over again

615
00:27:05,200 --> 00:27:09,670
until they can now as long as list add

616
00:27:07,990 --> 00:27:11,259
is only a few cycles long which it was

617
00:27:09,670 --> 00:27:11,769
it was like what eight cycles something

618
00:27:11,259 --> 00:27:13,809
I don't even

619
00:27:11,769 --> 00:27:15,279
like hardly anything it's just memory to

620
00:27:13,809 --> 00:27:17,079
however long it took to read those

621
00:27:15,279 --> 00:27:18,609
things from memory so maybe it could be

622
00:27:17,079 --> 00:27:20,169
up to 300 cycles or something if you had

623
00:27:18,609 --> 00:27:21,369
to read the memory you're only in a

624
00:27:20,170 --> 00:27:22,630
block for a very little bit of time if

625
00:27:21,369 --> 00:27:23,559
you ever block it all but chances are

626
00:27:22,630 --> 00:27:24,970
you won't block at all because you're

627
00:27:23,559 --> 00:27:26,829
probably never going to hit at the same

628
00:27:24,970 --> 00:27:28,930
time or very rarely so most of the time

629
00:27:26,829 --> 00:27:33,069
it's free right it's just the cost of

630
00:27:28,930 --> 00:27:34,750
this one operation and that would be an

631
00:27:33,069 --> 00:27:36,970
effective mutex right we could just do

632
00:27:34,750 --> 00:27:41,710
that and that would implement our linked

633
00:27:36,970 --> 00:27:44,110
list no problem right but there is kind

634
00:27:41,710 --> 00:27:46,029
of an annoying aspect to implementing

635
00:27:44,109 --> 00:27:47,469
the mutex this way even though we could

636
00:27:46,029 --> 00:27:49,180
and even though we know that atomic

637
00:27:47,470 --> 00:27:51,490
compare exchange is a nice safe easy way

638
00:27:49,180 --> 00:27:52,720
to do this and nice and clean and it's

639
00:27:51,490 --> 00:27:54,220
good and you could write your whole

640
00:27:52,720 --> 00:27:56,740
program with nothing but atomic compare

641
00:27:54,220 --> 00:27:58,180
exchange and it'd be fine right this

642
00:27:56,740 --> 00:28:00,759
would all be great and it's and whatever

643
00:27:58,180 --> 00:28:05,049
but there is one downside and the

644
00:28:00,759 --> 00:28:07,720
downside is there's no guarantee that

645
00:28:05,049 --> 00:28:12,000
any particular thread who comes into

646
00:28:07,720 --> 00:28:16,630
this process will actually get a turn

647
00:28:12,000 --> 00:28:19,869
really right because unless the hardware

648
00:28:16,630 --> 00:28:24,550
itself happens to enforce some kind of

649
00:28:19,869 --> 00:28:27,489
specific attempt based something there's

650
00:28:24,549 --> 00:28:30,190
nothing to say who gets to go when if

651
00:28:27,490 --> 00:28:32,970
thread one comes through here and or

652
00:28:30,190 --> 00:28:36,850
let's say thread a comes through here

653
00:28:32,970 --> 00:28:39,670
right and a takes that mutex so a gets

654
00:28:36,849 --> 00:28:41,949
into this routine now becomes and hits

655
00:28:39,670 --> 00:28:44,200
this atomic fair exchange it fails right

656
00:28:41,950 --> 00:28:47,650
so it goes into the loop and it's just

657
00:28:44,200 --> 00:28:50,380
in a fail loop right when a comes out of

658
00:28:47,650 --> 00:28:52,930
the mutex threads seen might be coming

659
00:28:50,380 --> 00:28:56,560
in at just that time and thread C could

660
00:28:52,930 --> 00:29:00,130
take the mutex right and B even though

661
00:28:56,559 --> 00:29:03,190
it was there way before C is still gonna

662
00:29:00,130 --> 00:29:05,590
fail and keep on looping and now thread

663
00:29:03,190 --> 00:29:08,019
D comes in and takes the mutex and a

664
00:29:05,589 --> 00:29:10,269
comes in again and takes the mutex and B

665
00:29:08,019 --> 00:29:12,129
just keeps getting unlucky and never

666
00:29:10,269 --> 00:29:14,500
happens to be executing at the right

667
00:29:12,130 --> 00:29:18,700
time you know to actually get the mutex

668
00:29:14,500 --> 00:29:22,509
right so you can kind of see how if this

669
00:29:18,700 --> 00:29:24,700
were an expensive operation where people

670
00:29:22,509 --> 00:29:25,599
actually probably are gonna have to wait

671
00:29:24,700 --> 00:29:27,850
some time

672
00:29:25,599 --> 00:29:29,859
we start to get into a kind of a

673
00:29:27,849 --> 00:29:32,709
negative potential situation here which

674
00:29:29,859 --> 00:29:35,649
is that we really don't know that we're

675
00:29:32,710 --> 00:29:37,779
being even remotely fair to the people

676
00:29:35,650 --> 00:29:40,060
who are trying to take these mutexes and

677
00:29:37,779 --> 00:29:43,000
even though this isn't a hard real-time

678
00:29:40,059 --> 00:29:44,710
scenario that we're in it kind of starts

679
00:29:43,000 --> 00:29:46,750
to feel a little bit bad right it's like

680
00:29:44,710 --> 00:29:48,789
well how long has bee been waiting at

681
00:29:46,750 --> 00:29:50,380
this point and dee could probably stand

682
00:29:48,789 --> 00:29:52,240
to wait a little bit so it really would

683
00:29:50,380 --> 00:29:54,730
be better if we let me do its operation

684
00:29:52,240 --> 00:29:57,609
that's you know that's gonna let the

685
00:29:54,730 --> 00:30:00,450
system flow more smoothly if we tend to

686
00:29:57,609 --> 00:30:04,539
process people in the order they came in

687
00:30:00,450 --> 00:30:07,660
hopefully that makes some sense right so

688
00:30:04,539 --> 00:30:10,029
now let's talk about ticket taking it's

689
00:30:07,660 --> 00:30:13,210
a it's a way to solve exactly the same

690
00:30:10,029 --> 00:30:16,329
problem but in a way that ensures that

691
00:30:13,210 --> 00:30:18,930
the people who came in order get retired

692
00:30:16,329 --> 00:30:22,329
in order right so basically same exact

693
00:30:18,930 --> 00:30:25,210
process as the mutex but people who come

694
00:30:22,329 --> 00:30:27,849
in the order abcdefg get retired in the

695
00:30:25,210 --> 00:30:30,039
order a b c FG which just tends to be a

696
00:30:27,849 --> 00:30:32,740
smarter way to make your systems flow it

697
00:30:30,039 --> 00:30:34,750
reduces the possibility of bad churn

698
00:30:32,740 --> 00:30:36,609
that can cause things to be highly

699
00:30:34,750 --> 00:30:38,769
latent and in games we tend to not want

700
00:30:36,609 --> 00:30:42,490
things to be highly latent that way

701
00:30:38,769 --> 00:30:44,559
right so a ticket taking system works by

702
00:30:42,490 --> 00:30:48,509
just adding just one more piece of state

703
00:30:44,559 --> 00:30:56,129
that's it so now I have a volatile int

704
00:30:48,509 --> 00:31:03,640
you know ticket served in a volatile int

705
00:30:56,130 --> 00:31:07,240
ticket finished right and the way that

706
00:31:03,640 --> 00:31:09,730
these work is every time someone goes to

707
00:31:07,240 --> 00:31:13,509
try and take the mutex they are going to

708
00:31:09,730 --> 00:31:15,610
instead of spin locking on a value

709
00:31:13,509 --> 00:31:16,990
that's like either 0 or 1 based on

710
00:31:15,609 --> 00:31:19,359
whether anyone's in there

711
00:31:16,990 --> 00:31:21,579
they're instead just gonna first just

712
00:31:19,359 --> 00:31:23,349
take a ticket like you would at a deli

713
00:31:21,579 --> 00:31:24,730
counter where they've got one of those

714
00:31:23,349 --> 00:31:26,230
little machines where you pull the

715
00:31:24,730 --> 00:31:27,940
number out of right it's like what

716
00:31:26,230 --> 00:31:30,789
number are you oh you're 83 right well

717
00:31:27,940 --> 00:31:32,950
that ticket being system is exactly this

718
00:31:30,789 --> 00:31:38,139
thing right here and this is the now

719
00:31:32,950 --> 00:31:39,048
serving right that now serving thing or

720
00:31:38,140 --> 00:31:42,700
whatever you want to be

721
00:31:39,048 --> 00:31:42,700
it's not really but you get the idea

722
00:31:43,239 --> 00:31:50,720
okay so how does this work well when I

723
00:31:47,720 --> 00:31:52,429
go to actually take the the mutex right

724
00:31:50,720 --> 00:31:55,190
when I want to start doing my operation

725
00:31:52,429 --> 00:31:57,499
I first just do you know what's my

726
00:31:55,190 --> 00:31:59,389
ticket number

727
00:31:57,499 --> 00:32:10,788
well my ticket number is my atomic

728
00:31:59,388 --> 00:32:12,168
increment on ticket served right so the

729
00:32:10,788 --> 00:32:14,509
first thing I do is I take a ticket I

730
00:32:12,169 --> 00:32:17,149
just increment that that ticket served

731
00:32:14,509 --> 00:32:18,950
and now I know I've got a unique number

732
00:32:17,148 --> 00:32:20,689
because everyone who comes through here

733
00:32:18,950 --> 00:32:22,429
is going to do an atomic increment so no

734
00:32:20,690 --> 00:32:24,558
two people will have the same ticket

735
00:32:22,429 --> 00:32:27,830
number and the ticket numbers will be in

736
00:32:24,558 --> 00:32:37,460
the order in which the threads hit this

737
00:32:27,829 --> 00:32:38,808
line right or I should say the order in

738
00:32:37,460 --> 00:32:41,989
which the threads were able to execute

739
00:32:38,808 --> 00:32:44,239
this line so it's up to the meze

740
00:32:41,989 --> 00:32:45,679
protocol to be fair at that point but

741
00:32:44,239 --> 00:32:47,778
we've pushed it down to the meze

742
00:32:45,679 --> 00:32:49,369
protocol level who is deciding what

743
00:32:47,778 --> 00:32:51,409
order our threads go in at least right

744
00:32:49,368 --> 00:32:56,118
we have not introduced any additional

745
00:32:51,409 --> 00:33:03,200
term so we take a ticket and now all we

746
00:32:56,118 --> 00:33:08,048
have to do is wait while our ticket is

747
00:33:03,200 --> 00:33:08,048
not equal to ticket finished

748
00:33:12,210 --> 00:33:17,470
and now technically we don't want to

749
00:33:15,549 --> 00:33:19,509
wait exactly on ticket finish because we

750
00:33:17,470 --> 00:33:22,390
have a start-up concern here this is the

751
00:33:19,509 --> 00:33:23,829
semantics this is the idea but if you

752
00:33:22,390 --> 00:33:26,650
think about what happens this starts at

753
00:33:23,829 --> 00:33:28,869
zero this starts at zero so when we do

754
00:33:26,650 --> 00:33:30,970
the atomic increment well let me know we

755
00:33:28,869 --> 00:33:33,699
could as long as the atomic increment

756
00:33:30,970 --> 00:33:35,319
returns the previous value right so it

757
00:33:33,700 --> 00:33:38,680
will return zero for the first ticket

758
00:33:35,319 --> 00:33:41,789
we're fine right so then we just do our

759
00:33:38,680 --> 00:33:43,960
while loop we say let's wait until we

760
00:33:41,789 --> 00:33:48,279
ticket finished is equal to the ticket

761
00:33:43,960 --> 00:33:51,009
that we had right and then I do my

762
00:33:48,279 --> 00:33:55,299
operation so whatever my ops go here

763
00:33:51,009 --> 00:34:01,589
ops go here and then I do one more

764
00:33:55,299 --> 00:34:01,589
atomic increment on ticket finished

765
00:34:02,789 --> 00:34:09,539
right but that's it barely more

766
00:34:07,599 --> 00:34:11,980
complicated than the other code right

767
00:34:09,539 --> 00:34:13,719
barely barely barely more complicated

768
00:34:11,980 --> 00:34:15,340
than the other code right it's got two

769
00:34:13,719 --> 00:34:16,809
atomic operations instead of one but

770
00:34:15,340 --> 00:34:18,070
those atomic operations are technically

771
00:34:16,809 --> 00:34:23,529
even simpler they're just increment

772
00:34:18,070 --> 00:34:26,890
there's no compare exchange right so

773
00:34:23,530 --> 00:34:29,080
there we go hopefully that makes some

774
00:34:26,889 --> 00:34:32,049
sense so basically all this does is it

775
00:34:29,079 --> 00:34:33,909
justice alright let's just give out a

776
00:34:32,050 --> 00:34:35,620
number to every thread it comes in here

777
00:34:33,909 --> 00:34:37,929
and then we'll have every thread wait

778
00:34:35,619 --> 00:34:41,739
until it's number is the number that's

779
00:34:37,929 --> 00:34:44,980
currently supposed to happen very very

780
00:34:41,739 --> 00:34:47,319
simple right really really clean you

781
00:34:44,980 --> 00:34:50,230
know you just debug it once and then you

782
00:34:47,320 --> 00:34:53,230
can use it everywhere and it's really

783
00:34:50,230 --> 00:34:55,480
great right and it has this really nice

784
00:34:53,230 --> 00:34:57,940
property unlike other kinds of mutexes

785
00:34:55,480 --> 00:35:00,969
you might do where instead of it

786
00:34:57,940 --> 00:35:03,760
randomly letting threads go depending on

787
00:35:00,969 --> 00:35:06,579
some who knows what it's always based on

788
00:35:03,760 --> 00:35:11,320
pretty much first-in first-out which is

789
00:35:06,579 --> 00:35:13,989
just a better a better way to go all

790
00:35:11,320 --> 00:35:17,470
right so hopefully that all made some

791
00:35:13,989 --> 00:35:20,109
sense and you know like I said hopefully

792
00:35:17,469 --> 00:35:21,339
that's that's enough of a brush up on

793
00:35:20,110 --> 00:35:23,380
the multi-threading stuff that what I'm

794
00:35:21,340 --> 00:35:24,460
about to do is not going to seem silly

795
00:35:23,380 --> 00:35:25,680
and weird but let's try and get that

796
00:35:24,460 --> 00:35:28,510
implemented down

797
00:35:25,679 --> 00:35:33,519
in the codebase so I'm going to go ahead

798
00:35:28,510 --> 00:35:35,380
and open up handmade code and I'm gonna

799
00:35:33,519 --> 00:35:40,800
go ahead and say that we've got in our

800
00:35:35,380 --> 00:35:40,800
handmade shared here where's my platform

801
00:35:42,840 --> 00:35:50,950
I believe we have our ad or like we've

802
00:35:47,980 --> 00:35:54,030
got our times there we go

803
00:35:50,949 --> 00:35:59,439
so we've got our atomic ad you 64 here

804
00:35:54,030 --> 00:36:01,300
and we don't really need a you 64 we you

805
00:35:59,440 --> 00:36:05,860
know but I guess since that's what we've

806
00:36:01,300 --> 00:36:08,970
got we can use it it might as well right

807
00:36:05,860 --> 00:36:10,930
so we'll just that's what we'll do so

808
00:36:08,969 --> 00:36:12,789
let's say I want to make one of these

809
00:36:10,929 --> 00:36:14,739
things I'm gonna do exactly what I just

810
00:36:12,789 --> 00:36:18,670
said like literally exactly what I just

811
00:36:14,739 --> 00:36:23,109
said so here's a struct I'm gonna call

812
00:36:18,670 --> 00:36:27,940
this a ticket mutex and what I want to

813
00:36:23,110 --> 00:36:31,358
do here is I want to have a new 64 right

814
00:36:27,940 --> 00:36:37,480
volatile cuz I've been putting the

815
00:36:31,358 --> 00:36:41,019
master ticket and au 64 just will call

816
00:36:37,480 --> 00:36:42,730
this serving right and that's all I need

817
00:36:41,019 --> 00:36:44,980
to implement the ticket mutex I just

818
00:36:42,730 --> 00:36:46,929
need these two here now one thing that

819
00:36:44,980 --> 00:36:48,579
I've never been in 100% sure about

820
00:36:46,929 --> 00:36:52,358
because I've never actually done the

821
00:36:48,579 --> 00:36:54,190
timing is I always wonder whether these

822
00:36:52,358 --> 00:36:56,559
should be padded so that they're on

823
00:36:54,190 --> 00:36:57,369
separate cache lines does that make

824
00:36:56,559 --> 00:36:59,529
sense

825
00:36:57,369 --> 00:37:01,420
because since the meze protocol will do

826
00:36:59,530 --> 00:37:02,980
sharing based on the cache lines I

827
00:37:01,420 --> 00:37:05,139
always wonder if you if it's better to

828
00:37:02,980 --> 00:37:07,059
have your tickets and your serves on

829
00:37:05,139 --> 00:37:08,559
separate cache lines it'd be a really

830
00:37:07,059 --> 00:37:11,079
hard thing to measure and you need some

831
00:37:08,559 --> 00:37:13,269
code that was really hitting this Muta

832
00:37:11,079 --> 00:37:15,340
commute X is hard so I don't actually

833
00:37:13,269 --> 00:37:16,539
know you know I've never tried to

834
00:37:15,340 --> 00:37:18,250
actually construct the thing to test it

835
00:37:16,539 --> 00:37:20,230
but I've always just kind of wondered it

836
00:37:18,250 --> 00:37:22,900
and I know if anyone's ever really done

837
00:37:20,230 --> 00:37:24,820
that maybe they have and and someone

838
00:37:22,900 --> 00:37:27,280
could send me a link but anyway ignoring

839
00:37:24,820 --> 00:37:30,190
that so now we've got two things right

840
00:37:27,280 --> 00:37:35,080
we've got one which is like you know

841
00:37:30,190 --> 00:37:37,210
begin ticket mutex and we got another

842
00:37:35,079 --> 00:37:38,799
one which is n2 ticket mutex right and

843
00:37:37,210 --> 00:37:40,510
these are just going to do exactly

844
00:37:38,800 --> 00:37:47,830
what I said we've got a ticket mutex

845
00:37:40,510 --> 00:37:49,900
pointer that we want to use and what we

846
00:37:47,829 --> 00:37:52,779
have to do here is we have to figure out

847
00:37:49,900 --> 00:37:56,500
what our ticket is right so this is our

848
00:37:52,780 --> 00:37:59,500
you know our number right and we can say

849
00:37:56,500 --> 00:38:00,849
I guess this is probably better called

850
00:37:59,500 --> 00:38:04,360
you tech since we have them hanging

851
00:38:00,849 --> 00:38:09,089
inside it call ticket you tix ticket so

852
00:38:04,360 --> 00:38:12,190
maybe that looks that looks better to me

853
00:38:09,090 --> 00:38:14,110
so you can say I've got to get a ticket

854
00:38:12,190 --> 00:38:19,420
out of here so I knew that I have this

855
00:38:14,110 --> 00:38:20,920
atomic add you 64 right and hey that

856
00:38:19,420 --> 00:38:23,889
returns the original value prior to

857
00:38:20,920 --> 00:38:25,690
adding that's what we wanted and the

858
00:38:23,889 --> 00:38:27,159
thing that we want to add is just one so

859
00:38:25,690 --> 00:38:28,570
we could have used increment there isn't

860
00:38:27,159 --> 00:38:30,549
an increment in here already so we don't

861
00:38:28,570 --> 00:38:32,350
have to care we'll just use that so this

862
00:38:30,550 --> 00:38:34,030
will add and give us back our actual

863
00:38:32,349 --> 00:38:36,789
ticket move it to the next ticket number

864
00:38:34,030 --> 00:38:39,490
we can then just say why don't you just

865
00:38:36,789 --> 00:38:43,480
loop while our ticket number is not

866
00:38:39,489 --> 00:38:45,879
equal to the serving number off we go

867
00:38:43,480 --> 00:38:48,490
and that's it that's the entirety of the

868
00:38:45,880 --> 00:38:50,619
beginning of the ticket mutex right when

869
00:38:48,489 --> 00:38:52,299
we want to end the mutex we don't really

870
00:38:50,619 --> 00:38:55,119
have anything else we have to do right

871
00:38:52,300 --> 00:38:57,160
because there's no we don't even need to

872
00:38:55,119 --> 00:38:58,630
know what our ticket was right because

873
00:38:57,159 --> 00:39:00,639
we know that these things are fully

874
00:38:58,630 --> 00:39:03,610
locked so all we have to do then is just

875
00:39:00,639 --> 00:39:07,179
say hey whatever the serving was oops I

876
00:39:03,610 --> 00:39:09,700
forgot an ampersand up there yeah

877
00:39:07,179 --> 00:39:10,629
whatever the serving number was I just

878
00:39:09,699 --> 00:39:16,389
want to go ahead and move that forward

879
00:39:10,630 --> 00:39:17,769
right and that's it so at that point we

880
00:39:16,389 --> 00:39:20,769
didn't have a ticket mutex that we can

881
00:39:17,769 --> 00:39:22,780
use anywhere that we want to in order to

882
00:39:20,769 --> 00:39:25,300
ensure that people who access a

883
00:39:22,780 --> 00:39:27,550
particular primitive of some kind will

884
00:39:25,300 --> 00:39:29,019
not do so concurrently so that any

885
00:39:27,550 --> 00:39:32,050
threads that happen to be pounding on it

886
00:39:29,019 --> 00:39:34,090
they'll always sort of go in order and

887
00:39:32,050 --> 00:39:37,780
serialize just at that one point right

888
00:39:34,090 --> 00:39:38,890
so that's pretty great now in order to

889
00:39:37,780 --> 00:39:41,230
bug that we actually have to use it

890
00:39:38,889 --> 00:39:44,079
obviously and so let's go ahead and do

891
00:39:41,230 --> 00:39:46,480
that if we come to our asset processor

892
00:39:44,079 --> 00:39:48,369
here I believe we had a place where we

893
00:39:46,480 --> 00:39:50,679
were talking about this right we had

894
00:39:48,369 --> 00:39:52,690
this add up thing going on here where we

895
00:39:50,679 --> 00:39:54,699
had a texture app that we wanted to

896
00:39:52,690 --> 00:39:57,880
and so what we wanted to do here is is

897
00:39:54,699 --> 00:40:01,989
exactly sort of what I wrote we have to

898
00:39:57,880 --> 00:40:04,329
have a like a texture op mutex somewhere

899
00:40:01,989 --> 00:40:06,848
so we have to pass that texture op new

900
00:40:04,329 --> 00:40:07,930
text in here and then we'll have to do

901
00:40:06,849 --> 00:40:10,930
our end ticket mutex

902
00:40:07,929 --> 00:40:12,818
with our texture op mutex right but then

903
00:40:10,929 --> 00:40:15,219
when we're in here we can do whatever we

904
00:40:12,818 --> 00:40:16,808
want and again although we want to

905
00:40:15,219 --> 00:40:18,459
generally keep the amount of stuff we do

906
00:40:16,809 --> 00:40:21,490
inside a mutex to be relatively small

907
00:40:18,460 --> 00:40:23,829
since we have done in actual mutex we

908
00:40:21,489 --> 00:40:25,989
can do any code that we wanted here so

909
00:40:23,829 --> 00:40:27,609
it doesn't matter how intricate it is we

910
00:40:25,989 --> 00:40:29,348
don't have to be smart about it or try

911
00:40:27,608 --> 00:40:30,730
to figure out how to do a lock free list

912
00:40:29,349 --> 00:40:32,650
where we're just doing things with moves

913
00:40:30,730 --> 00:40:34,780
because if you look at how simple it is

914
00:40:32,650 --> 00:40:35,889
to do the new text version and if you

915
00:40:34,780 --> 00:40:42,160
can just keep the amount of code in

916
00:40:35,889 --> 00:40:43,868
there to be relatively succinctness to

917
00:40:42,159 --> 00:40:45,299
try and be lock free or whatever you

918
00:40:43,869 --> 00:40:47,500
want to talk about there right so

919
00:40:45,300 --> 00:40:49,059
typically speaking this is a pretty good

920
00:40:47,500 --> 00:40:51,730
way to go especially because it's a lot

921
00:40:49,059 --> 00:40:53,589
less error-prone as well right so anyway

922
00:40:51,730 --> 00:40:54,699
if we're gonna do this operation here

923
00:40:53,588 --> 00:40:56,349
what we need to know is where that's

924
00:40:54,699 --> 00:41:00,098
actually going to get stored and so we

925
00:40:56,349 --> 00:41:02,289
need some notion of a place where when

926
00:41:00,099 --> 00:41:06,460
we're doing our loads where those things

927
00:41:02,289 --> 00:41:08,409
can sort of be placed right because this

928
00:41:06,460 --> 00:41:10,240
is sort of has to access a global it's a

929
00:41:08,409 --> 00:41:12,460
separate thread right it has to be able

930
00:41:10,239 --> 00:41:14,979
to access some kind of a global list or

931
00:41:12,460 --> 00:41:17,380
something of this nature that can be

932
00:41:14,980 --> 00:41:20,230
pulled from and operated on and other

933
00:41:17,380 --> 00:41:24,760
things like this so I don't know exactly

934
00:41:20,230 --> 00:41:30,639
how we should do that I'm not 100% sure

935
00:41:24,760 --> 00:41:32,740
but do we it looks like we I don't I

936
00:41:30,639 --> 00:41:35,739
don't really know how we want to manage

937
00:41:32,739 --> 00:41:39,118
this I think we do have a place where we

938
00:41:35,739 --> 00:41:42,578
get Global's of this nature inside

939
00:41:39,119 --> 00:41:46,108
handmade CPP let me just double check I

940
00:41:42,579 --> 00:41:49,690
thought there was one here somewhere

941
00:41:46,108 --> 00:41:51,239
yeah we have like like debug global

942
00:41:49,690 --> 00:41:54,818
memory and those sorts of things right

943
00:41:51,239 --> 00:41:56,469
and so the way that these work is when

944
00:41:54,818 --> 00:41:57,909
we first come into game update render

945
00:41:56,469 --> 00:42:00,519
right there's this notion of one of

946
00:41:57,909 --> 00:42:01,568
these things that gets sort of set and

947
00:42:00,519 --> 00:42:02,889
we're gonna need something like this

948
00:42:01,568 --> 00:42:04,960
because these are separate threads that

949
00:42:02,889 --> 00:42:06,009
are doing this I'm well you know what I

950
00:42:04,960 --> 00:42:07,900
guess we don't even need to

951
00:42:06,010 --> 00:42:09,610
necessarily because these separate

952
00:42:07,900 --> 00:42:11,019
threads do have data that flow with them

953
00:42:09,610 --> 00:42:14,050
so as soon as we could just target

954
00:42:11,019 --> 00:42:17,170
something with them and and that would

955
00:42:14,050 --> 00:42:20,620
probably just work so maybe we will try

956
00:42:17,170 --> 00:42:23,740
to do it that way yeah okay maybe I'll

957
00:42:20,619 --> 00:42:25,539
try to do it that way but we will at the

958
00:42:23,739 --> 00:42:27,009
very least need something stable like it

959
00:42:25,539 --> 00:42:29,320
has to be something that sits around it

960
00:42:27,010 --> 00:42:31,210
can't be something that gets some we

961
00:42:29,320 --> 00:42:33,820
updated lots of times or anything like

962
00:42:31,210 --> 00:42:36,699
that so we do need something that's

963
00:42:33,820 --> 00:42:39,400
going to kind of have a return sort of

964
00:42:36,699 --> 00:42:41,230
like a flow back kind of a feel to it

965
00:42:39,400 --> 00:42:42,760
has to be persistent it can't be per

966
00:42:41,230 --> 00:42:44,050
frame I guess so I'm saying because

967
00:42:42,760 --> 00:42:46,090
these threads that are going to access

968
00:42:44,050 --> 00:42:47,710
it operate across frame boundaries so

969
00:42:46,090 --> 00:42:51,220
they can't it can't be something

970
00:42:47,710 --> 00:42:52,869
specific like that all right so if we're

971
00:42:51,219 --> 00:42:58,059
going to do something like this we have

972
00:42:52,869 --> 00:43:00,039
game render commands right and we also

973
00:42:58,059 --> 00:43:02,469
have I guess game memory gets passed in

974
00:43:00,039 --> 00:43:04,719
and so what we could do is inside one of

975
00:43:02,469 --> 00:43:06,759
these things like maybe game memory is

976
00:43:04,719 --> 00:43:07,480
the best place for it probably let me

977
00:43:06,760 --> 00:43:12,370
take a look

978
00:43:07,480 --> 00:43:14,349
game here it is inside game memory we

979
00:43:12,369 --> 00:43:17,559
can probably have a thing in here where

980
00:43:14,349 --> 00:43:20,289
we point to whatever that that list is

981
00:43:17,559 --> 00:43:30,989
right so we'd probably have something

982
00:43:20,289 --> 00:43:30,989
like well

983
00:43:35,099 --> 00:43:46,239
platform texture up cue something like

984
00:43:39,849 --> 00:43:55,778
that I'm just guessing

985
00:43:46,239 --> 00:43:58,478
and so platform work queue is not really

986
00:43:55,778 --> 00:43:59,829
defined and this is something that I

987
00:43:58,478 --> 00:44:05,078
would want to find so I'm gonna probably

988
00:43:59,829 --> 00:44:12,430
put it here and what that would have is

989
00:44:05,079 --> 00:44:15,970
just that texture up first maybe we want

990
00:44:12,429 --> 00:44:21,879
texture up last as well and then we want

991
00:44:15,969 --> 00:44:24,009
a texture up first free and I don't know

992
00:44:21,880 --> 00:44:26,619
why I felt compelled to type that so

993
00:44:24,009 --> 00:44:28,329
many times so we've got a first to last

994
00:44:26,619 --> 00:44:31,450
in a first free and I think that's

995
00:44:28,329 --> 00:44:33,700
probably all we would need right and so

996
00:44:31,449 --> 00:44:35,169
this guy needs to have the pointer to

997
00:44:33,699 --> 00:44:38,588
that it needs to know where that's going

998
00:44:35,170 --> 00:44:40,630
to be and so when it does to begin and

999
00:44:38,588 --> 00:44:42,998
end view text inside here it now needs

1000
00:44:40,630 --> 00:44:46,059
to be able to do the operation that it

1001
00:44:42,998 --> 00:44:46,718
was trying to do right and that

1002
00:44:46,059 --> 00:44:49,298
operation

1003
00:44:46,719 --> 00:44:51,278
I guess texture apps I think they've got

1004
00:44:49,298 --> 00:45:01,079
a next on them I'm pretty sure they do

1005
00:44:51,278 --> 00:45:05,728
anyway I could be wrong about that but

1006
00:45:01,079 --> 00:45:07,989
what we would need to do here is I guess

1007
00:45:05,728 --> 00:45:10,868
trying to think about how this guy would

1008
00:45:07,989 --> 00:45:13,588
actually handle the situation where he

1009
00:45:10,869 --> 00:45:17,579
had to wait it would be nice if he could

1010
00:45:13,588 --> 00:45:17,578
but I don't actually know

1011
00:45:27,550 --> 00:45:34,380
I don't actually know how he would go

1012
00:45:31,570 --> 00:45:34,380
about waiting

1013
00:45:48,599 --> 00:45:53,159
hmmm this parts gonna be a little tricky

1014
00:46:02,338 --> 00:46:09,159
and here's why

1015
00:46:04,358 --> 00:46:12,489
so when we do texture op ads the problem

1016
00:46:09,159 --> 00:46:15,869
that I was thinking of is I guess we we

1017
00:46:12,489 --> 00:46:19,239
don't really know how many we need right

1018
00:46:15,869 --> 00:46:24,009
that seemed would be the main problem I

1019
00:46:19,239 --> 00:46:25,449
would think here and to be honest I

1020
00:46:24,009 --> 00:46:26,708
guess I don't really know that we need

1021
00:46:25,449 --> 00:46:31,298
to chain these because we're gonna

1022
00:46:26,708 --> 00:46:32,978
process them all per frame anyway so

1023
00:46:31,298 --> 00:46:35,108
it's entirely possible that we wouldn't

1024
00:46:32,978 --> 00:46:36,788
really ever have to do them in any

1025
00:46:35,108 --> 00:46:40,018
particular way but anyway that's neither

1026
00:46:36,789 --> 00:46:43,329
here or there the point is the the

1027
00:46:40,018 --> 00:46:45,698
managing the the amount of them we have

1028
00:46:43,329 --> 00:46:47,949
is a little bit it's unclear exactly how

1029
00:46:45,699 --> 00:46:49,719
we do that right it's possible we could

1030
00:46:47,949 --> 00:46:53,798
just say well we only allow this many

1031
00:46:49,719 --> 00:46:55,449
per frame to be added and we just make

1032
00:46:53,798 --> 00:46:57,728
sure we allocate more than enough for

1033
00:46:55,449 --> 00:46:59,949
that to have happen but I'm just not

1034
00:46:57,728 --> 00:47:01,658
sure what happens in the case where we

1035
00:46:59,949 --> 00:47:02,739
find that there is an overflow should

1036
00:47:01,659 --> 00:47:04,059
there be an overflow no maybe we just

1037
00:47:02,739 --> 00:47:05,699
say there never can be an overflow it's

1038
00:47:04,059 --> 00:47:09,400
just a hard error and everything goes

1039
00:47:05,699 --> 00:47:10,900
haywire in that case but you know I'm it

1040
00:47:09,400 --> 00:47:14,739
would maybe be nice to have a better

1041
00:47:10,900 --> 00:47:17,108
idea of what we could do there but I'm

1042
00:47:14,739 --> 00:47:19,418
just not sure right I'm just not sure

1043
00:47:17,108 --> 00:47:21,548
what what the right solution is so I

1044
00:47:19,418 --> 00:47:24,938
have to think about that some more but

1045
00:47:21,548 --> 00:47:27,400
you know barring that right if we if we

1046
00:47:24,938 --> 00:47:28,928
are to say just like okay there's got to

1047
00:47:27,400 --> 00:47:30,849
be something on the free list that's

1048
00:47:28,929 --> 00:47:32,650
just a requirement and the game doesn't

1049
00:47:30,849 --> 00:47:36,390
work if you run out of memory if you run

1050
00:47:32,650 --> 00:47:39,298
out of queues here right if we say that

1051
00:47:36,389 --> 00:47:46,469
and I guess I could put that to do here

1052
00:47:39,298 --> 00:47:52,059
can we devise a soft failure case for

1053
00:47:46,469 --> 00:47:53,769
running out of ops what we do want to do

1054
00:47:52,059 --> 00:47:55,749
is say all right well when we add an up

1055
00:47:53,768 --> 00:47:59,288
here we've got the first three so we'll

1056
00:47:55,748 --> 00:48:01,768
say ok we'll take whatever is on the

1057
00:47:59,289 --> 00:48:01,769
first three

1058
00:48:04,349 --> 00:48:10,769
this is for adding I guess we'll do it

1059
00:48:09,340 --> 00:48:14,260
this way

1060
00:48:10,769 --> 00:48:15,909
maybe so this is the OP that we're gonna

1061
00:48:14,260 --> 00:48:20,380
add our desktop

1062
00:48:15,909 --> 00:48:22,449
I guess this can also be put here this

1063
00:48:20,380 --> 00:48:24,190
is the destination app and so what we

1064
00:48:22,449 --> 00:48:25,509
want to do is essentially do like you

1065
00:48:24,190 --> 00:48:28,780
know something like this where we copy

1066
00:48:25,510 --> 00:48:33,970
it on but first obviously we have to

1067
00:48:28,780 --> 00:48:37,210
advance the free list like so so that

1068
00:48:33,969 --> 00:48:39,429
pulls us off this copies our settings on

1069
00:48:37,210 --> 00:48:40,990
and then what we have to do is we have

1070
00:48:39,429 --> 00:48:45,339
to push it on to the list so then we've

1071
00:48:40,989 --> 00:48:49,959
got our queue last do like if queue last

1072
00:48:45,340 --> 00:48:54,789
you know few last equals Q last next

1073
00:48:49,960 --> 00:48:56,110
equals test will ensure the test equals

1074
00:48:54,789 --> 00:48:57,579
next you'll see really although I guess

1075
00:48:56,110 --> 00:48:58,780
anyone passing to us probably has

1076
00:48:57,579 --> 00:49:04,269
already done that in fact we could just

1077
00:48:58,780 --> 00:49:07,769
do this and if there isn't a last

1078
00:49:04,269 --> 00:49:12,969
pointer then it's just Q first equals Q

1079
00:49:07,769 --> 00:49:14,380
last test so that basically just allows

1080
00:49:12,969 --> 00:49:16,119
us to put those opps on there and it

1081
00:49:14,380 --> 00:49:17,500
puts them on there inside the mutex so

1082
00:49:16,119 --> 00:49:23,559
that we know that nobody else can do

1083
00:49:17,500 --> 00:49:24,789
that right and that's really mostly it I

1084
00:49:23,559 --> 00:49:28,599
guess

1085
00:49:24,789 --> 00:49:30,630
so inside this queue we then need our

1086
00:49:28,599 --> 00:49:36,909
mutex

1087
00:49:30,630 --> 00:49:41,260
right because our queue always has to be

1088
00:49:36,909 --> 00:49:50,679
able to like anyone using the queue has

1089
00:49:41,260 --> 00:49:52,240
to be able to do that and I guess I

1090
00:49:50,679 --> 00:49:54,629
don't know where shared gets included

1091
00:49:52,239 --> 00:49:57,750
here just shared not get included here

1092
00:49:54,630 --> 00:49:57,750
all right

1093
00:50:04,759 --> 00:50:12,719
so yeah we need the ticket mutex to be

1094
00:50:08,579 --> 00:50:16,499
visible to that code so you know we kind

1095
00:50:12,719 --> 00:50:19,348
of need we kind of need this guy to be

1096
00:50:16,498 --> 00:50:31,318
up above right we need these guys to be

1097
00:50:19,349 --> 00:50:39,329
a nice place maybe somewhere up here for

1098
00:50:31,318 --> 00:50:41,190
example yeah and yeah so at that point

1099
00:50:39,329 --> 00:50:44,099
really we're mostly down to just routing

1100
00:50:41,190 --> 00:50:46,710
we have our add up calls and the add up

1101
00:50:44,099 --> 00:50:56,420
calls will have to know where to get

1102
00:50:46,710 --> 00:50:56,420
that texture op Q so where's our work

1103
00:50:57,528 --> 00:51:08,759
happening that's it there it is

1104
00:51:06,179 --> 00:51:12,379
so our load asset work has to have a

1105
00:51:08,759 --> 00:51:12,380
pointer to this right it's got to be

1106
00:51:12,829 --> 00:51:16,920
something that it can access and it

1107
00:51:15,329 --> 00:51:18,630
looks like it's got it doesn't really

1108
00:51:16,920 --> 00:51:22,559
have anything else there that it could

1109
00:51:18,630 --> 00:51:26,220
to do tasks with memory I suppose is one

1110
00:51:22,559 --> 00:51:28,589
and you know another thing that we could

1111
00:51:26,219 --> 00:51:30,118
do like I just got to point this out

1112
00:51:28,588 --> 00:51:32,248
it's not something that we should

1113
00:51:30,119 --> 00:51:34,019
probably do here because it wouldn't

1114
00:51:32,248 --> 00:51:35,879
really make much sense based on the

1115
00:51:34,018 --> 00:51:39,328
frequency of things but I'll just gonna

1116
00:51:35,880 --> 00:51:41,818
mention it let's suppose we did a ton of

1117
00:51:39,329 --> 00:51:45,900
adds to this linked list just a ton

1118
00:51:41,818 --> 00:51:47,788
right like thousands per frame then we

1119
00:51:45,900 --> 00:51:50,970
would be hammering on these mutexes a

1120
00:51:47,789 --> 00:51:53,400
ton and that would be bad what we could

1121
00:51:50,969 --> 00:51:56,338
do instead is inside the task with

1122
00:51:53,400 --> 00:51:59,309
memory where we have one per thread we

1123
00:51:56,338 --> 00:52:01,940
could just build separate lists one per

1124
00:51:59,309 --> 00:52:05,430
thread and when the task gets retired

1125
00:52:01,940 --> 00:52:07,920
take them off then and put them on to

1126
00:52:05,429 --> 00:52:09,449
the main list as a chunk so it you only

1127
00:52:07,920 --> 00:52:11,349
take the mutex once do two rights you're

1128
00:52:09,449 --> 00:52:14,259
done right

1129
00:52:11,349 --> 00:52:16,210
and so you can see how like how you

1130
00:52:14,260 --> 00:52:19,570
would choose to structure this would

1131
00:52:16,210 --> 00:52:24,000
depend a lot on how often you were

1132
00:52:19,570 --> 00:52:24,000
expecting to do certain operations

1133
00:52:24,389 --> 00:52:33,940
anyway so yeah in this case we need a

1134
00:52:28,929 --> 00:52:45,969
texture op q here what did I call that

1135
00:52:33,940 --> 00:52:52,480
thing form texture up q and yeah that's

1136
00:52:45,969 --> 00:52:57,009
an address there and this guy needs to

1137
00:52:52,480 --> 00:52:59,949
know this so I believe inside game

1138
00:52:57,010 --> 00:53:07,020
assets we need to know where the texture

1139
00:52:59,949 --> 00:53:10,960
op Q is so let's see inside game assets

1140
00:53:07,019 --> 00:53:17,530
that would have to be known so in here

1141
00:53:10,960 --> 00:53:19,000
we've got platform texture out q and so

1142
00:53:17,530 --> 00:53:22,450
every time we're going to do one of

1143
00:53:19,000 --> 00:53:25,750
these we would have to know what's it

1144
00:53:22,449 --> 00:53:33,329
called assets just yeah so we've just

1145
00:53:25,750 --> 00:53:33,329
have assets texture up Q and off you go

1146
00:53:33,849 --> 00:53:39,309
now when we actually queue the work

1147
00:53:35,969 --> 00:53:46,149
obviously is another time that we're

1148
00:53:39,309 --> 00:53:48,579
going to have to map okay so that's the

1149
00:53:46,150 --> 00:53:50,769
only time so we in here when we do our

1150
00:53:48,579 --> 00:53:53,170
final state loaded we would have to do a

1151
00:53:50,769 --> 00:54:02,170
thing that's like hey the texture op

1152
00:53:53,170 --> 00:54:03,519
tube it's going to be in here alright so

1153
00:54:02,170 --> 00:54:06,700
last step of the plumbing might as well

1154
00:54:03,519 --> 00:54:07,960
do it because we're almost we're almost

1155
00:54:06,699 --> 00:54:09,039
done even though we're close to at a

1156
00:54:07,960 --> 00:54:12,250
time

1157
00:54:09,039 --> 00:54:14,079
so when we passed the the allocate game

1158
00:54:12,250 --> 00:54:19,530
assets thing let's just pass the texture

1159
00:54:14,079 --> 00:54:19,529
op q their form texture up to

1160
00:54:20,219 --> 00:54:30,659
and we'll just put it in here so

1161
00:54:28,440 --> 00:54:33,420
presumably this is something that will

1162
00:54:30,659 --> 00:54:42,719
get passed I think I said we would put

1163
00:54:33,420 --> 00:54:44,369
it inside the memory right and so when

1164
00:54:42,719 --> 00:54:51,598
we allocate those game assets we can

1165
00:54:44,369 --> 00:54:53,579
just do a game memory so now all the

1166
00:54:51,599 --> 00:54:58,890
plumbing is worked out and that's all

1167
00:54:53,579 --> 00:55:02,910
great but inside our win32 handmade we

1168
00:54:58,889 --> 00:55:05,480
would have to actually point it at

1169
00:55:02,909 --> 00:55:08,129
something which currently we don't I

1170
00:55:05,480 --> 00:55:11,400
don't remember how we did game memory

1171
00:55:08,130 --> 00:55:15,660
exactly but it looks like game memories

1172
00:55:11,400 --> 00:55:17,818
actually static and since game memory is

1173
00:55:15,659 --> 00:55:20,088
actually a static thing that doesn't get

1174
00:55:17,818 --> 00:55:23,960
reallocated I think we could also

1175
00:55:20,088 --> 00:55:23,960
probably if we want to

1176
00:55:36,670 --> 00:55:44,440
I think if we want to we could actually

1177
00:55:41,048 --> 00:55:55,449
make it just be included right I think

1178
00:55:44,440 --> 00:55:58,690
you could actually just do that and now

1179
00:55:55,449 --> 00:56:00,159
I think we would work just fine if it

1180
00:55:58,690 --> 00:56:02,139
wasn't for the fact that when we

1181
00:56:00,159 --> 00:56:03,219
actually go to run this right there's

1182
00:56:02,139 --> 00:56:06,789
not going to be anything in the free

1183
00:56:03,219 --> 00:56:08,348
list right free list is empty so it

1184
00:56:06,789 --> 00:56:12,699
should immediately yeah it should

1185
00:56:08,349 --> 00:56:14,950
immediately assert on the free list so

1186
00:56:12,699 --> 00:56:17,348
just because you know we're in the

1187
00:56:14,949 --> 00:56:20,469
middle of it if we were going to

1188
00:56:17,349 --> 00:56:22,180
populate that free list let's just say

1189
00:56:20,469 --> 00:56:27,608
that we went ahead and populated it with

1190
00:56:22,179 --> 00:56:30,279
a bunch of of memory here if I went and

1191
00:56:27,608 --> 00:56:35,199
said you know give me a give me a

1192
00:56:30,280 --> 00:56:37,960
virtual Alec of some kind here you know

1193
00:56:35,199 --> 00:56:47,828
something like this and I said like okay

1194
00:56:37,960 --> 00:56:53,588
yeah you know we we've got mmm one of

1195
00:56:47,829 --> 00:56:55,210
these texture app guys and maybe we say

1196
00:56:53,588 --> 00:56:57,818
like how many of those do we want I

1197
00:56:55,210 --> 00:57:01,869
don't know texture app count

1198
00:56:57,818 --> 00:57:05,858
we've got 1024 that's so many more than

1199
00:57:01,869 --> 00:57:06,630
we could ever possibly use right but

1200
00:57:05,858 --> 00:57:12,058
whatever

1201
00:57:06,630 --> 00:57:12,059
so we allocate an array of 1024 of these

1202
00:57:19,019 --> 00:57:36,550
right and we get that memory we then

1203
00:57:24,670 --> 00:57:37,900
just loop through these and we say

1204
00:57:36,550 --> 00:57:44,850
whichever one

1205
00:57:37,900 --> 00:57:44,849
we're on Jimmy

1206
00:57:46,050 --> 00:57:50,830
whichever one we're on we just want to

1207
00:57:48,849 --> 00:57:58,119
set its next pointer equal to whatever

1208
00:57:50,829 --> 00:58:01,299
the next one is oops so they're all just

1209
00:57:58,119 --> 00:58:05,440
changed to each other right

1210
00:58:01,300 --> 00:58:08,680
the last guy we know would want to not

1211
00:58:05,440 --> 00:58:14,309
set that so we just don't touch him

1212
00:58:08,679 --> 00:58:16,809
and then our game memory texture op q

1213
00:58:14,309 --> 00:58:20,559
all we need to do is set that first free

1214
00:58:16,809 --> 00:58:23,409
equal to the first guy right if we were

1215
00:58:20,559 --> 00:58:25,480
being mr. snarky pants snark bottoms on

1216
00:58:23,409 --> 00:58:27,719
this particular case we could even do

1217
00:58:25,480 --> 00:58:34,780
this because I mean why not

1218
00:58:27,719 --> 00:58:37,139
oops yeah I mean you only live once

1219
00:58:34,780 --> 00:58:37,140
right

1220
00:58:44,349 --> 00:58:52,180
and that would initialize our free list

1221
00:58:46,269 --> 00:58:55,269
with a giant set of these guys yeah all

1222
00:58:52,179 --> 00:58:58,389
right so that's the texture op list and

1223
00:58:55,269 --> 00:59:00,190
at that point I think we've actually

1224
00:58:58,389 --> 00:59:02,440
went everything except the fact that

1225
00:59:00,190 --> 00:59:05,318
nobody actually ever does anything with

1226
00:59:02,440 --> 00:59:09,099
the texture op list right which is not

1227
00:59:05,318 --> 00:59:09,759
exactly the best thing in the world to

1228
00:59:09,099 --> 00:59:12,099
say the least

1229
00:59:09,760 --> 00:59:14,890
so if we wanted to we could then

1230
00:59:12,099 --> 00:59:18,309
actually call our OpenGL manage textures

1231
00:59:14,889 --> 00:59:21,009
thing and actually have it download the

1232
00:59:18,309 --> 00:59:22,900
textures and then be done however we

1233
00:59:21,010 --> 00:59:25,599
also do want to be conscientious here

1234
00:59:22,900 --> 00:59:28,088
return the last one probably so I'd

1235
00:59:25,599 --> 00:59:32,410
probably say something like a texture op

1236
00:59:28,088 --> 00:59:36,750
star last equals zero and in here just

1237
00:59:32,409 --> 00:59:40,088
say like last equals op sort of a thing

1238
00:59:36,750 --> 00:59:41,380
something like that and so the reason I

1239
00:59:40,088 --> 00:59:43,480
want to do that of course I'll show you

1240
00:59:41,380 --> 00:59:45,760
in a second it's relatively

1241
00:59:43,480 --> 00:59:48,338
straightforward when you see it so if I

1242
00:59:45,760 --> 00:59:51,490
now want to go ahead and do my manage

1243
00:59:48,338 --> 00:59:54,730
textures I can do that

1244
00:59:51,489 --> 00:59:56,199
in win32 handmade we come down to the

1245
00:59:54,730 --> 00:59:58,719
place where that would probably happen

1246
00:59:56,199 --> 01:00:00,818
so right before we're gonna do like our

1247
00:59:58,719 --> 01:00:03,669
opengl stuff or something after that's

1248
01:00:00,818 --> 01:00:05,710
been filled up and maybe you know maybe

1249
01:00:03,670 --> 01:00:06,990
we do it right after we get out to you

1250
01:00:05,710 --> 01:00:09,849
know maybe that's a good time to do it

1251
01:00:06,989 --> 01:00:13,750
so we do like our debug frame end thing

1252
01:00:09,849 --> 01:00:17,109
and we we do our write right before

1253
01:00:13,750 --> 01:00:18,789
we're gonna unload the the game code or

1254
01:00:17,108 --> 01:00:21,380
whatever maybe I'm not sure where the

1255
01:00:18,789 --> 01:00:25,109
best place to do it is

1256
01:00:21,380 --> 01:00:28,680
yeah yeah I don't know maybe like right

1257
01:00:25,108 --> 01:00:30,239
here I'll just do it right here so right

1258
01:00:28,679 --> 01:00:33,389
here when we're about to do our open

1259
01:00:30,239 --> 01:00:35,969
Jill managed textures obviously I sort

1260
01:00:33,389 --> 01:00:38,098
of said before we have to be able to

1261
01:00:35,969 --> 01:00:42,449
make sure that we're always new texting

1262
01:00:38,099 --> 01:00:45,059
these things so I have to take my mutex

1263
01:00:42,449 --> 01:00:47,159
again just like I did before and at this

1264
01:00:45,059 --> 01:00:51,210
point I guess maybe you only live once

1265
01:00:47,159 --> 01:00:52,409
ness of it I guess I shouldn't have been

1266
01:00:51,210 --> 01:00:53,760
so Yolo because I don't really want to

1267
01:00:52,409 --> 01:00:56,848
type that again that's just a lot to

1268
01:00:53,760 --> 01:00:58,230
type so I suppose I should have actually

1269
01:00:56,849 --> 01:01:07,318
been more reserved and said yeah you

1270
01:00:58,230 --> 01:01:15,780
know what texture up hue maybe is a

1271
01:01:07,318 --> 01:01:18,440
thing yeah do it that way you almost

1272
01:01:15,780 --> 01:01:18,440
don't live once

1273
01:01:21,380 --> 01:01:28,309
okay so then we've just got texture op

1274
01:01:24,449 --> 01:01:35,808
cube or sorry platform texture op do op

1275
01:01:28,309 --> 01:01:35,809
q equals game memory q

1276
01:01:39,969 --> 01:01:52,869
okay so our texture app cube you Tex has

1277
01:01:45,219 --> 01:01:54,219
to get taken and released so that we can

1278
01:01:52,869 --> 01:01:56,170
actually do this operation because again

1279
01:01:54,219 --> 01:01:58,629
this is going to turn to that list you

1280
01:01:56,170 --> 01:02:02,409
can't have people sticking stuff on the

1281
01:01:58,630 --> 01:02:04,900
list in the middle of that we should at

1282
01:02:02,409 --> 01:02:08,859
the back we actually could if we wanted

1283
01:02:04,900 --> 01:02:10,510
to and we would have to know not to mess

1284
01:02:08,860 --> 01:02:12,340
with the stuff that's at the beginning

1285
01:02:10,510 --> 01:02:13,960
of the list if that makes sense but I'm

1286
01:02:12,340 --> 01:02:16,059
not even gonna do that anyway what I'm

1287
01:02:13,960 --> 01:02:18,130
gonna do is I'm gonna put this sort of

1288
01:02:16,059 --> 01:02:19,150
one down from it and show you what I'm

1289
01:02:18,130 --> 01:02:22,450
gonna do here I'm going to take the

1290
01:02:19,150 --> 01:02:28,059
mutex right I'm gonna say okay whatever

1291
01:02:22,449 --> 01:02:30,009
the first thing is I'm gonna take that

1292
01:02:28,059 --> 01:02:31,509
first texture off off and then I'm gonna

1293
01:02:30,010 --> 01:02:35,110
pretend the list doesn't have anything

1294
01:02:31,510 --> 01:02:39,190
in it anymore damn right so I'm just

1295
01:02:35,110 --> 01:02:42,250
gonna quick take the mutex get in pull

1296
01:02:39,190 --> 01:02:43,869
the whole list off essentially zero it

1297
01:02:42,250 --> 01:02:46,300
out and now I'm holding the whole list

1298
01:02:43,869 --> 01:02:48,460
and then untaken X now everyone can keep

1299
01:02:46,300 --> 01:02:51,250
adding back in there so we don't have to

1300
01:02:48,460 --> 01:02:53,949
they don't have to wait while I actually

1301
01:02:51,250 --> 01:02:55,329
go talk to OpenGL because I just pulled

1302
01:02:53,949 --> 01:02:57,639
the whole list off and off we go

1303
01:02:55,329 --> 01:03:01,719
right so that's fine no need to be

1304
01:02:57,639 --> 01:03:05,589
fancier than that right so then I can do

1305
01:03:01,719 --> 01:03:10,000
last texture app equals manage textures

1306
01:03:05,590 --> 01:03:11,260
past that first texture app that's gonna

1307
01:03:10,000 --> 01:03:13,269
run through it's gonna return me the

1308
01:03:11,260 --> 01:03:14,920
last one so then all I have to do is

1309
01:03:13,269 --> 01:03:17,469
just put all these guys back on the free

1310
01:03:14,920 --> 01:03:20,260
list right and to do that that's pretty

1311
01:03:17,469 --> 01:03:22,929
trivial right I just take the mutex

1312
01:03:20,260 --> 01:03:25,150
again remember everything we do in here

1313
01:03:22,929 --> 01:03:26,679
have some you text and like I said I

1314
01:03:25,150 --> 01:03:29,079
could do that in there if we wanted to

1315
01:03:26,679 --> 01:03:30,819
but taking a mutex is so cheap I just

1316
01:03:29,079 --> 01:03:32,710
feel like might as well get out of the

1317
01:03:30,820 --> 01:03:34,750
way and just in case they want to come

1318
01:03:32,710 --> 01:03:36,099
in there might do it if you really cared

1319
01:03:34,750 --> 01:03:37,630
you could test the timing see if it

1320
01:03:36,099 --> 01:03:40,329
mattered I doubt it would either way but

1321
01:03:37,630 --> 01:03:41,470
you know what do you do so anyway then I

1322
01:03:40,329 --> 01:03:43,239
just want to put these guys on the free

1323
01:03:41,469 --> 01:03:45,099
list right I want to make sure they can

1324
01:03:43,239 --> 01:03:46,509
go on the free list so then what I do is

1325
01:03:45,099 --> 01:03:49,210
I say well alright whatever my last

1326
01:03:46,510 --> 01:03:50,740
texture app was if I had a last texture

1327
01:03:49,210 --> 01:03:52,840
up if I didn't then I you know what I

1328
01:03:50,739 --> 01:03:55,469
could even do this if I don't have any

1329
01:03:52,840 --> 01:03:55,470
texture ops

1330
01:03:56,099 --> 01:04:01,088
then I don't need to put anything on the

1331
01:03:57,969 --> 01:04:10,480
free list obviously so really it can

1332
01:04:01,088 --> 01:04:13,179
look like this I suppose right put

1333
01:04:10,480 --> 01:04:15,369
assuming I got something right so

1334
01:04:13,179 --> 01:04:16,989
assuming I got something I have the

1335
01:04:15,369 --> 01:04:20,320
textures managed I begin the ticket

1336
01:04:16,989 --> 01:04:22,868
mutex and then I say okay whatever was

1337
01:04:20,320 --> 01:04:25,390
on the first the first felis before

1338
01:04:22,869 --> 01:04:27,070
that's gonna be the last

1339
01:04:25,389 --> 01:04:29,618
whatever my last texture up I found was

1340
01:04:27,070 --> 01:04:31,210
I'm going to point him at that part of

1341
01:04:29,619 --> 01:04:34,630
the first free list and then I'm gonna

1342
01:04:31,210 --> 01:04:41,260
set the first free list a point to to me

1343
01:04:34,630 --> 01:04:42,820
right and I think that should do it but

1344
01:04:41,260 --> 01:04:46,630
I've written a lot of code there without

1345
01:04:42,820 --> 01:04:49,180
really doing much so you know probably

1346
01:04:46,630 --> 01:04:51,190
won't work but that's the basic idea and

1347
01:04:49,179 --> 01:04:53,049
now we can go to the QA you might as

1348
01:04:51,190 --> 01:04:55,679
well run it to see where we've foul up

1349
01:04:53,050 --> 01:04:58,960
horribly oh hey look it almost worked

1350
01:04:55,679 --> 01:05:02,049
which is pretty hilarious so we solve

1351
01:04:58,960 --> 01:05:05,349
somebody to do I'm kind of surprised

1352
01:05:02,050 --> 01:05:08,650
that worked at all the first time but

1353
01:05:05,349 --> 01:05:10,869
that's fine so we can go to the Q&amp;A now

1354
01:05:08,650 --> 01:05:16,559
and then tomorrow we'll finish that up

1355
01:05:10,869 --> 01:05:16,559
the debugging and and that should do it

1356
01:05:50,940 --> 01:05:56,380
also I suppose while I'm waiting for any

1357
01:05:55,028 --> 01:06:01,690
Q colons I might as well just take a

1358
01:05:56,380 --> 01:06:17,170
look at these things but you'll manage

1359
01:06:01,690 --> 01:06:18,909
textures with data so we didn't do there

1360
01:06:17,170 --> 01:06:27,249
is one thing we didn't you do yet though

1361
01:06:18,909 --> 01:06:31,899
which is also the the asset State thing

1362
01:06:27,248 --> 01:06:37,738
and so I don't know if that's that may

1363
01:06:31,900 --> 01:06:37,739
be one that we have to deal with as well

1364
01:06:44,550 --> 01:06:49,119
because right when we once we add the

1365
01:06:47,230 --> 01:06:52,719
texture up we shouldn't really

1366
01:06:49,119 --> 01:06:54,840
technically be using the we shouldn't be

1367
01:06:52,719 --> 01:07:07,750
setting the asset to its final state

1368
01:06:54,840 --> 01:07:09,220
until until we actually do the app so do

1369
01:07:07,750 --> 01:07:11,380
you Mitsuki I've already said like a

1370
01:07:09,219 --> 01:07:13,329
thousand times I hate Vulcan so there's

1371
01:07:11,380 --> 01:07:22,329
never gonna be a handmade Vulcan

1372
01:07:13,329 --> 01:07:24,219
renderer not for me anyway easy side do

1373
01:07:22,329 --> 01:07:26,799
you need a safety ripe area before the

1374
01:07:24,219 --> 01:07:30,429
current ticket increment inside mutex

1375
01:07:26,800 --> 01:07:34,300
unlock no so one of the things that's

1376
01:07:30,429 --> 01:07:40,750
true pretty much across the board

1377
01:07:34,300 --> 01:07:44,800
is where my where's my ticket root

1378
01:07:40,750 --> 01:07:48,639
access so one thing that's true across

1379
01:07:44,800 --> 01:07:52,240
the board is that Atomics insert their

1380
01:07:48,639 --> 01:07:54,819
own barrier so basically one of the nice

1381
01:07:52,239 --> 01:07:57,699
things about ticket mutex as well is

1382
01:07:54,820 --> 01:08:01,359
that it actually naturally has its read

1383
01:07:57,699 --> 01:08:05,319
it's its barriers on either side because

1384
01:08:01,358 --> 01:08:13,989
these Atomics serve as the barriers so

1385
01:08:05,320 --> 01:08:16,088
that's kind of nice right and so so you

1386
01:08:13,989 --> 01:08:19,329
don't need them because of the Atomics

1387
01:08:16,088 --> 01:08:26,068
if you didn't have those Atomics then

1388
01:08:19,329 --> 01:08:26,068
you would have right but yeah

1389
01:08:28,600 --> 01:08:33,680
so at least as far as I know there's no

1390
01:08:30,920 --> 01:08:38,720
need to put any additional barriers but

1391
01:08:33,680 --> 01:08:41,088
that is the barrier and yeah the unlock

1392
01:08:38,720 --> 01:08:42,529
so this is like I said this is kind of

1393
01:08:41,088 --> 01:08:44,689
an interesting aspect of the ticket

1394
01:08:42,529 --> 01:08:46,009
mutex because you're issuing atomic at

1395
01:08:44,689 --> 01:08:48,379
the start and atomic at the end there

1396
01:08:46,009 --> 01:08:50,529
naturally various other types of mutexes

1397
01:08:48,380 --> 01:08:52,548
which is I think what you were sort of

1398
01:08:50,529 --> 01:08:54,500
assuming where you said oh you missed

1399
01:08:52,548 --> 01:08:56,028
the atomic at the end other sorts of me

1400
01:08:54,500 --> 01:08:57,739
taxes don't have an atomic at the end

1401
01:08:56,029 --> 01:08:58,850
right they may just do a regular set and

1402
01:08:57,739 --> 01:09:06,130
they don't need to do it atomically and

1403
01:08:58,850 --> 01:09:06,130
then you would need a barrier so yeah

1404
01:09:06,489 --> 01:09:13,130
do you use an sRGB frame buffer and/or

1405
01:09:09,588 --> 01:09:21,140
premultiplied alpha yes we use both of

1406
01:09:13,130 --> 01:09:26,239
those things we use both an sRGB frame

1407
01:09:21,140 --> 01:09:28,160
buffer and premultiplied alpha we use

1408
01:09:26,239 --> 01:09:30,349
that surgery frame buffers srgb textures

1409
01:09:28,159 --> 01:09:32,960
and premultiplied alpha everywhere well

1410
01:09:30,350 --> 01:09:37,190
not everywhere we do use non

1411
01:09:32,960 --> 01:09:41,359
premultiplied alpha for the secondary

1412
01:09:37,189 --> 01:09:43,579
frame buffer but everywhere else we use

1413
01:09:41,359 --> 01:09:47,410
premultiplied alpha so all sprites are

1414
01:09:43,579 --> 01:09:47,409
premultiplied alpha at the moment

1415
01:10:09,840 --> 01:10:15,099
but I'm not really sure I while I don't

1416
01:10:12,969 --> 01:10:20,920
like that aspect of it I'm not really

1417
01:10:15,099 --> 01:10:26,880
sure that's a problem oh you know what

1418
01:10:20,920 --> 01:10:33,219
also I might do while we're here is the

1419
01:10:26,880 --> 01:10:38,949
wiggle make currents thing here is it

1420
01:10:33,219 --> 01:10:42,599
just in it yeah so this stuff I want to

1421
01:10:38,948 --> 01:10:47,788
get rid of this stuff so there's no more

1422
01:10:42,599 --> 01:10:47,788
thread OpenGL RC any of that stuff

1423
01:10:58,179 --> 01:11:07,149
so this stuff should all yeah this

1424
01:11:00,969 --> 01:11:13,510
should all go away goodbye and all of

1425
01:11:07,149 --> 01:11:18,279
this stuff should go away so now we just

1426
01:11:13,510 --> 01:11:20,199
have the one open jail bar see and we

1427
01:11:18,279 --> 01:11:23,139
don't ever have anyone else do anything

1428
01:11:20,198 --> 01:11:26,049
with it which is what we were trying to

1429
01:11:23,139 --> 01:11:27,819
get to one thing that's really nice

1430
01:11:26,050 --> 01:11:30,099
about this is as far as I can tell

1431
01:11:27,819 --> 01:11:32,229
that's 100% reproducible which is great

1432
01:11:30,099 --> 01:11:34,150
so it means we should have a much easier

1433
01:11:32,229 --> 01:11:35,169
time debugging it you could imagine was

1434
01:11:34,149 --> 01:11:37,388
something multi-threaded like that we

1435
01:11:35,170 --> 01:11:44,309
could have had a situation where like it

1436
01:11:37,389 --> 01:11:44,309
it was highly variable

1437
01:12:00,659 --> 01:12:03,579
coordinating I can explain about the

1438
01:12:02,500 --> 01:12:05,199
secondary framer for not being

1439
01:12:03,579 --> 01:12:06,850
premultiplied what's the secondary frame

1440
01:12:05,199 --> 01:12:10,630
but for for the secondary frame buffer

1441
01:12:06,850 --> 01:12:12,789
is just to have a alpha composited upper

1442
01:12:10,630 --> 01:12:15,520
layer so I can actually show you it what

1443
01:12:12,789 --> 01:12:17,619
it's doing it'll make a little more

1444
01:12:15,520 --> 01:12:19,720
sense later on but for right now you can

1445
01:12:17,619 --> 01:12:21,670
sort of see if I go up these stairs do

1446
01:12:19,720 --> 01:12:24,310
you see how it alpha blends a new floor

1447
01:12:21,670 --> 01:12:26,640
in above me like that in order to make

1448
01:12:24,310 --> 01:12:29,950
that floor blend in seamlessly and not

1449
01:12:26,640 --> 01:12:31,539
have the sprites disappear individually

1450
01:12:29,949 --> 01:12:34,059
or be able to see through them or

1451
01:12:31,539 --> 01:12:36,609
anything like that that is that is what

1452
01:12:34,060 --> 01:12:38,500
that's were so that's that secondary

1453
01:12:36,609 --> 01:12:42,369
frame buffer and since that that is

1454
01:12:38,500 --> 01:12:44,199
rendered without I didn't want to go

1455
01:12:42,369 --> 01:12:47,079
have the renderer have to make it

1456
01:12:44,199 --> 01:12:48,429
produce a pre-rendered alpha secondary

1457
01:12:47,079 --> 01:12:50,289
frame buffer because there's no reason

1458
01:12:48,430 --> 01:12:52,240
to pre multiply the alpha since it's

1459
01:12:50,289 --> 01:12:54,909
never getting scaled we don't actually

1460
01:12:52,239 --> 01:12:56,229
need the alpha be pre multiplied so it

1461
01:12:54,909 --> 01:12:57,880
was just easier to leave it on pre

1462
01:12:56,229 --> 01:12:59,319
multiplied but everything else is pre

1463
01:12:57,880 --> 01:13:05,980
multiplied because it produces more

1464
01:12:59,319 --> 01:13:07,509
correct results it might be plenty to do

1465
01:13:05,979 --> 01:13:09,489
but since you are using C++ have you

1466
01:13:07,510 --> 01:13:14,909
used any azzam calls inside your code

1467
01:13:09,489 --> 01:13:19,689
you can't call Azzam from C++ in the end

1468
01:13:14,909 --> 01:13:23,260
the on Microsoft's compiler you can you

1469
01:13:19,689 --> 01:13:25,169
can in LLVM so if we were using LLVM we

1470
01:13:23,260 --> 01:13:28,659
could have we could have used as an

1471
01:13:25,170 --> 01:13:34,170
inline assembler but you can't in Visual

1472
01:13:28,659 --> 01:13:35,979
Studio why you can't in Visual Studio is

1473
01:13:34,170 --> 01:13:41,050
beyond me

1474
01:13:35,979 --> 01:13:43,479
it's like you know it used to support it

1475
01:13:41,050 --> 01:13:45,430
in the 32 and I think still does in the

1476
01:13:43,479 --> 01:13:48,909
32 bit compiler but then when they moved

1477
01:13:45,430 --> 01:13:50,740
to 64 a bit like I guess Microsoft had

1478
01:13:48,909 --> 01:13:52,599
gotten so far away from ever knowing how

1479
01:13:50,739 --> 01:13:53,859
a computer works anymore that they

1480
01:13:52,600 --> 01:13:55,750
didn't think it was important to be able

1481
01:13:53,859 --> 01:13:57,960
to put inline assembler into your code I

1482
01:13:55,750 --> 01:14:01,960
which is stunning to me I have no idea

1483
01:13:57,960 --> 01:14:03,579
how you can even be a programmer and not

1484
01:14:01,960 --> 01:14:05,319
think that inline assembler is important

1485
01:14:03,579 --> 01:14:06,699
if anything they should have massively

1486
01:14:05,319 --> 01:14:09,239
upgraded the inline assembler when they

1487
01:14:06,699 --> 01:14:12,599
went to 64 a bit and done stuff like

1488
01:14:09,239 --> 01:14:15,069
made it easier to you know

1489
01:14:12,599 --> 01:14:18,628
to never have to use like NASM or

1490
01:14:15,069 --> 01:14:18,628
something but they didn't do that so

1491
01:14:23,368 --> 01:14:27,098
barren vortex is there a reason you're

1492
01:14:25,300 --> 01:14:28,838
not using scope mutex guards that handle

1493
01:14:27,099 --> 01:14:32,619
unlocking whenever the guard goes out of

1494
01:14:28,838 --> 01:14:33,998
scope yeah because I don't I mean what's

1495
01:14:32,618 --> 01:14:38,828
the difference it's just whether or not

1496
01:14:33,998 --> 01:14:45,519
you put in curly braces right like so

1497
01:14:38,828 --> 01:14:47,708
for example again ticket mutex so you're

1498
01:14:45,519 --> 01:14:50,079
gonna put something around this right

1499
01:14:47,708 --> 01:14:52,059
and so if I do it this way that's what

1500
01:14:50,078 --> 01:14:54,308
it looks like and you can see it very

1501
01:14:52,059 --> 01:14:57,779
clearly if instead you use the scope

1502
01:14:54,309 --> 01:14:57,779
mutex guard then it looks like this

1503
01:15:08,569 --> 01:15:14,029
right so this is five lines of code this

1504
01:15:12,260 --> 01:15:18,829
is four so you've typed an extra line of

1505
01:15:14,029 --> 01:15:20,269
code this now can no longer like if I

1506
01:15:18,829 --> 01:15:24,439
wanted to do something with first

1507
01:15:20,270 --> 01:15:26,960
texture up here I couldn't write and hey

1508
01:15:24,439 --> 01:15:31,639
guess what that's exactly what I wanted

1509
01:15:26,960 --> 01:15:34,430
to do so scoped mutex guards are garbage

1510
01:15:31,640 --> 01:15:39,829
as far as I'm concerned like I don't

1511
01:15:34,430 --> 01:15:41,539
ever use them I don't think but they

1512
01:15:39,829 --> 01:15:45,559
just don't map to the actual way that

1513
01:15:41,539 --> 01:15:47,659
mutexes work at all in my opinion so I

1514
01:15:45,560 --> 01:15:49,220
don't really ever use them all those

1515
01:15:47,659 --> 01:15:52,189
kinds of scope things I think make more

1516
01:15:49,220 --> 01:15:54,590
sense even in the case where they're not

1517
01:15:52,189 --> 01:15:56,809
great like begin block end block pairs I

1518
01:15:54,590 --> 01:15:58,400
do use scope so for you see me you do

1519
01:15:56,810 --> 01:16:03,350
like time functions so I do sometimes

1520
01:15:58,399 --> 01:16:05,750
have those and temporary allocations I

1521
01:16:03,350 --> 01:16:07,700
sometimes do but mutex is just aren't

1522
01:16:05,750 --> 01:16:09,739
that kind of a thing that's just not the

1523
01:16:07,699 --> 01:16:12,079
way mutexes work typically you want a

1524
01:16:09,739 --> 01:16:14,000
mutex a little tiny thing and then use

1525
01:16:12,079 --> 01:16:16,909
the actual variables that you used in

1526
01:16:14,000 --> 01:16:19,010
there right and so begin end is the

1527
01:16:16,909 --> 01:16:20,930
right thing for mutexes especially

1528
01:16:19,010 --> 01:16:23,000
because it's not a mystery if you forgot

1529
01:16:20,930 --> 01:16:26,750
to unlock the mutex your code will just

1530
01:16:23,000 --> 01:16:28,819
hang immediately right so it's very

1531
01:16:26,750 --> 01:16:31,250
unlikely that if you ever ran the code

1532
01:16:28,819 --> 01:16:33,469
at all you would know the bug

1533
01:16:31,250 --> 01:16:35,329
immediately it's not like memory where

1534
01:16:33,470 --> 01:16:37,430
you might be worried about the fact that

1535
01:16:35,329 --> 01:16:38,869
you could leak it like you'd forget so

1536
01:16:37,430 --> 01:16:40,100
you want to make sure you do it when it

1537
01:16:38,869 --> 01:16:42,590
goes out of scope or something it's not

1538
01:16:40,100 --> 01:16:46,310
like that it's not a bug that you can

1539
01:16:42,590 --> 01:16:49,090
really have particularly easily so mutex

1540
01:16:46,310 --> 01:16:49,090
guard not so good

1541
01:16:53,069 --> 01:16:55,130
you

1542
01:17:47,179 --> 01:17:55,679
all right I think that's all the queue

1543
01:17:49,408 --> 01:18:03,229
so I'm gonna wrap it up oh don't no

1544
01:17:55,679 --> 01:18:03,230
don't do that all right

1545
01:18:08,000 --> 01:18:11,270
see I say

1546
01:18:12,279 --> 01:18:19,479
oh yeah so and why doesn't say is we

1547
01:18:17,739 --> 01:18:21,219
still obviously have to debug that so

1548
01:18:19,479 --> 01:18:22,509
we're gonna have to check it out

1549
01:18:21,220 --> 01:18:26,159
tomorrow

1550
01:18:22,510 --> 01:18:28,840
it's kind of weird I'm pretty surprised

1551
01:18:26,159 --> 01:18:36,130
at the way I guess I don't have a good

1552
01:18:28,840 --> 01:18:40,360
guess it looks like we ran out of

1553
01:18:36,130 --> 01:18:43,840
something right like for example if we

1554
01:18:40,359 --> 01:18:45,909
mismatched our include are our mutexes

1555
01:18:43,840 --> 01:18:47,920
there which I guess we didn't because we

1556
01:18:45,909 --> 01:18:51,760
only have two places where they happen

1557
01:18:47,920 --> 01:18:54,760
but maybe we ran out of stuff processing

1558
01:18:51,760 --> 01:19:03,730
somewhere or orphan something but you

1559
01:18:54,760 --> 01:19:06,520
can kind of see right like we only have

1560
01:19:03,729 --> 01:19:09,879
a few places where we do begin ticket

1561
01:19:06,520 --> 01:19:14,830
mutex we do begin then there and we do a

1562
01:19:09,880 --> 01:19:19,300
begin then here this is the definition

1563
01:19:14,829 --> 01:19:20,949
of them and here's the other one so

1564
01:19:19,300 --> 01:19:23,199
basically we don't have any mismatched

1565
01:19:20,949 --> 01:19:26,710
pairs so we're probably not hanging up

1566
01:19:23,199 --> 01:19:30,340
that way but we've got something that we

1567
01:19:26,710 --> 01:19:31,420
run out of right something stops and the

1568
01:19:30,340 --> 01:19:35,079
way you could tell it is all those

1569
01:19:31,420 --> 01:19:37,300
textures are loaded right but now we're

1570
01:19:35,079 --> 01:19:39,399
not getting any new textures like see if

1571
01:19:37,300 --> 01:19:41,880
I move the turn the guy around and it

1572
01:19:39,399 --> 01:19:45,369
tries to demand pages in they never load

1573
01:19:41,880 --> 01:19:49,810
so I think we got a pretty good idea of

1574
01:19:45,369 --> 01:19:51,430
what is happening here we just got to

1575
01:19:49,810 --> 01:19:54,010
figure out why we're draining out like

1576
01:19:51,430 --> 01:19:58,690
that and and so you know if it's not the

1577
01:19:54,010 --> 01:20:02,310
mutex maybe it's you know something with

1578
01:19:58,689 --> 01:20:05,409
the free list or something where we I

1579
01:20:02,310 --> 01:20:07,360
don't know we're not pulling from the

1580
01:20:05,409 --> 01:20:08,710
right place or we orphan saying so

1581
01:20:07,359 --> 01:20:10,299
hopefully we'll be able to check it out

1582
01:20:08,710 --> 01:20:11,890
tomorrow hopefully we'll be able to bug

1583
01:20:10,300 --> 01:20:13,210
that and then we can cross that guy off

1584
01:20:11,890 --> 01:20:15,220
the list too because then we're down to

1585
01:20:13,210 --> 01:20:16,869
just clean compatibility and I think we

1586
01:20:15,220 --> 01:20:21,869
can get that done before I gotta go

1587
01:20:16,869 --> 01:20:24,069
on vacation in quotes alright so anyway

1588
01:20:21,869 --> 01:20:26,079
that's about it for another episode of

1589
01:20:24,069 --> 01:20:27,909
handmade hero it's been a pleasure

1590
01:20:26,079 --> 01:20:29,170
cooking with us always if you would like

1591
01:20:27,909 --> 01:20:30,189
to follow along series at home you can

1592
01:20:29,170 --> 01:20:31,960
always pre-order the game on handmade

1593
01:20:30,189 --> 01:20:34,210
hero org it comes the source code so you

1594
01:20:31,960 --> 01:20:35,800
can play around with it yourself we also

1595
01:20:34,210 --> 01:20:38,079
have forums site you can go to if you

1596
01:20:35,800 --> 01:20:39,730
want to ask questions a patreon page for

1597
01:20:38,079 --> 01:20:40,989
our support the video series a schedule

1598
01:20:39,729 --> 01:20:42,729
about if you want to know where we're

1599
01:20:40,989 --> 01:20:44,979
going to be live you can subscribe that

1600
01:20:42,729 --> 01:20:49,659
and it'll tweet at you and we've got a

1601
01:20:44,979 --> 01:20:52,599
guide if you would like to follow mmm

1602
01:20:49,659 --> 01:20:56,050
along with past episodes like you did

1603
01:20:52,600 --> 01:20:57,970
tonight that's about it I will see you

1604
01:20:56,050 --> 01:20:59,800
guys tomorrow for the last stream of the

1605
01:20:57,970 --> 01:21:01,840
week 8 p.m. Pacific Daylight Time until

1606
01:20:59,800 --> 01:21:03,190
then have fun programming everyone and

1607
01:21:01,840 --> 01:21:05,579
I'll see you guys on the Internet

1608
01:21:03,189 --> 01:21:05,579
take it easy

