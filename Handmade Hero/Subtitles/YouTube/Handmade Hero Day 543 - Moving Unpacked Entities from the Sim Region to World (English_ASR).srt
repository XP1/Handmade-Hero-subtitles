1
00:00:00,979 --> 00:00:05,129
hello everyone and welcome to hand made

2
00:00:03,330 --> 00:00:08,280
here I show recode a complete game live

3
00:00:05,129 --> 00:00:10,080
on stream I think today I'm gonna go

4
00:00:08,279 --> 00:00:13,709
ahead and get started on making some

5
00:00:10,080 --> 00:00:15,599
modifications to our world storage I was

6
00:00:13,710 --> 00:00:18,778
talking about this doing this about two

7
00:00:15,599 --> 00:00:20,879
weeks ago but I wanted to create a

8
00:00:18,778 --> 00:00:22,710
memory viewer so we could kind of see

9
00:00:20,879 --> 00:00:25,559
some of the results of what we were

10
00:00:22,710 --> 00:00:27,750
doing in a more direct way and so that's

11
00:00:25,559 --> 00:00:29,070
exactly why we built the over the past

12
00:00:27,750 --> 00:00:31,559
two weekends we built a little thing

13
00:00:29,070 --> 00:00:33,030
that tracks and shows all of our memory

14
00:00:31,559 --> 00:00:33,629
it's pretty cool actually it's pretty

15
00:00:33,030 --> 00:00:35,550
happy about that

16
00:00:33,630 --> 00:00:37,070
looks nice and it allows us to see

17
00:00:35,549 --> 00:00:40,140
what's going on in there pretty easily

18
00:00:37,070 --> 00:00:42,090
what I'd like to do today however is get

19
00:00:40,140 --> 00:00:43,378
started there's we could there's some

20
00:00:42,090 --> 00:00:45,690
more stuff we probably will do to our

21
00:00:43,378 --> 00:00:48,149
memory view in the end like add some

22
00:00:45,689 --> 00:00:49,558
scrolling and maybe some better display

23
00:00:48,149 --> 00:00:51,989
of some stuff you know it's not perfect

24
00:00:49,558 --> 00:00:53,099
but it's good enough for now I think I'd

25
00:00:51,988 --> 00:00:55,500
like to go ahead and get started on that

26
00:00:53,100 --> 00:01:00,679
modification that I wanted to make let

27
00:00:55,500 --> 00:01:02,850
me just go ahead and show what does that

28
00:01:00,679 --> 00:01:05,069
there we go

29
00:01:02,850 --> 00:01:06,900
let me just show what I'm talking about

30
00:01:05,069 --> 00:01:11,129
here and then what kind of we'll get

31
00:01:06,900 --> 00:01:13,080
started on the new stuff so if you take

32
00:01:11,129 --> 00:01:15,118
a look at the game as it runs today now

33
00:01:13,079 --> 00:01:18,118
we didn't have this ability to before

34
00:01:15,118 --> 00:01:20,159
but now we do we can go in here and look

35
00:01:18,118 --> 00:01:23,069
at things like what our memory layout is

36
00:01:20,159 --> 00:01:25,590
in this case this shows our arena's that

37
00:01:23,069 --> 00:01:27,719
are currently active and it shows you

38
00:01:25,590 --> 00:01:30,630
know who's got what memory allocated

39
00:01:27,719 --> 00:01:32,879
where again this is pretty nice it shows

40
00:01:30,629 --> 00:01:34,709
us how our breakdown is and it breaks

41
00:01:32,879 --> 00:01:37,019
down exactly as I want most of our

42
00:01:34,709 --> 00:01:39,780
memory is spent an asset

43
00:01:37,019 --> 00:01:43,408
caching room that we can use for caching

44
00:01:39,780 --> 00:01:45,269
assets specifically sounds and that's

45
00:01:43,409 --> 00:01:46,978
pretty much what we want ideally we

46
00:01:45,269 --> 00:01:48,030
would have most of our memory taken up

47
00:01:46,978 --> 00:01:50,129
there and the reason for that is because

48
00:01:48,030 --> 00:01:51,899
it's very fungible if we need to run on

49
00:01:50,129 --> 00:01:53,250
a lower-end machine we can always just

50
00:01:51,899 --> 00:01:56,849
reduce the amount of caching we have

51
00:01:53,250 --> 00:01:59,879
there or use lower quality sounds and so

52
00:01:56,849 --> 00:02:01,859
on so seeing your memory footprint end

53
00:01:59,879 --> 00:02:04,739
up mostly an asset storage is kind of

54
00:02:01,859 --> 00:02:06,000
what you want if your game is taking a

55
00:02:04,739 --> 00:02:08,008
ton of memory there's not a lot you

56
00:02:06,000 --> 00:02:09,449
could do about that right and so it

57
00:02:08,008 --> 00:02:13,229
gives you a lot less flexibility to

58
00:02:09,449 --> 00:02:13,818
target lower end hardware if your game

59
00:02:13,229 --> 00:02:15,919
is taking

60
00:02:13,818 --> 00:02:17,839
by the memory well then there's really

61
00:02:15,919 --> 00:02:19,938
nothing you can do you've got to change

62
00:02:17,840 --> 00:02:23,359
you know you've got to go work on your

63
00:02:19,938 --> 00:02:24,438
game code if you want to ship on

64
00:02:23,359 --> 00:02:26,900
something it doesn't have a gigabyte of

65
00:02:24,438 --> 00:02:27,919
memory available for it so we can take a

66
00:02:26,900 --> 00:02:30,530
look at this we also have to build a

67
00:02:27,919 --> 00:02:32,000
debug information on off this is

68
00:02:30,530 --> 00:02:33,769
information that's strictly used to

69
00:02:32,000 --> 00:02:35,750
record things like our profiling in our

70
00:02:33,769 --> 00:02:37,819
memory so we don't really count that

71
00:02:35,750 --> 00:02:39,500
because again that just goes away when

72
00:02:37,818 --> 00:02:41,628
we compile our release version so we

73
00:02:39,500 --> 00:02:44,209
don't really need to see that just have

74
00:02:41,628 --> 00:02:47,688
call sight view that allows us to see

75
00:02:44,209 --> 00:02:49,459
where this memory is being taken so we

76
00:02:47,688 --> 00:02:51,348
can kind of see like specifically in

77
00:02:49,459 --> 00:02:53,930
which pieces of the code or responsible

78
00:02:51,348 --> 00:02:56,000
for the majority of our memory it's

79
00:02:53,930 --> 00:02:59,239
pretty easy to see here who's taking up

80
00:02:56,000 --> 00:03:03,438
most of our space you know we've got a

81
00:02:59,239 --> 00:03:05,959
sort of a 70 Meg layout for our game

82
00:03:03,438 --> 00:03:08,750
mode and 60 megabytes of that is right

83
00:03:05,959 --> 00:03:11,449
here and so that kind of tells us who is

84
00:03:08,750 --> 00:03:13,878
taking the lion's share of things if we

85
00:03:11,449 --> 00:03:15,650
don't already know this tells us pretty

86
00:03:13,878 --> 00:03:17,780
quickly what's going on with that so

87
00:03:15,650 --> 00:03:20,150
that's nice too and finally we have like

88
00:03:17,780 --> 00:03:21,139
our block layout diagram this is really

89
00:03:20,150 --> 00:03:23,090
nice because it's an easy way to

90
00:03:21,139 --> 00:03:25,069
visually see what's going on

91
00:03:23,090 --> 00:03:26,539
and you can see quite clearly here like

92
00:03:25,068 --> 00:03:28,339
here's all the assets or it's just a

93
00:03:26,539 --> 00:03:30,198
giant big block that's just used for

94
00:03:28,340 --> 00:03:33,139
audio streaming it doesn't do anything

95
00:03:30,199 --> 00:03:35,629
else and so that's you know again like I

96
00:03:33,139 --> 00:03:36,769
want to see it this way this up here is

97
00:03:35,628 --> 00:03:39,679
the part that concerns me a little bit

98
00:03:36,769 --> 00:03:42,139
more this is our world storage each one

99
00:03:39,680 --> 00:03:45,169
of these is a chunk of storage in the

100
00:03:42,139 --> 00:03:47,239
world data structs and I don't know if

101
00:03:45,169 --> 00:03:49,400
you can sort of see what's going on here

102
00:03:47,239 --> 00:03:52,069
but basically this is the most recent

103
00:03:49,400 --> 00:03:54,620
block of storage and it hasn't been

104
00:03:52,068 --> 00:03:55,818
filled up yet that's why it's the most

105
00:03:54,620 --> 00:03:59,269
recent one right things are getting

106
00:03:55,818 --> 00:04:02,478
added in there and this is what concerns

107
00:03:59,269 --> 00:04:03,739
me at the moment and what concerns me a

108
00:04:02,479 --> 00:04:05,299
little bit more long-term and one of the

109
00:04:03,739 --> 00:04:06,590
reasons I want to sort of start to work

110
00:04:05,299 --> 00:04:08,209
on the enemy system a little bit now

111
00:04:06,590 --> 00:04:10,310
because we're kind of moving into a

112
00:04:08,209 --> 00:04:12,590
place where that's really the last thing

113
00:04:10,310 --> 00:04:14,479
we're gonna be working on if you think

114
00:04:12,590 --> 00:04:16,848
about it like almost the entirety of the

115
00:04:14,479 --> 00:04:17,930
remaining game implementation we have is

116
00:04:16,848 --> 00:04:19,459
going to be in the entity system because

117
00:04:17,930 --> 00:04:22,090
the entities are what sort of determines

118
00:04:19,459 --> 00:04:24,288
the gameplay so as we're moving

119
00:04:22,089 --> 00:04:26,089
transitioning into working more and more

120
00:04:24,288 --> 00:04:27,889
just on how entities work and how they

121
00:04:26,089 --> 00:04:29,598
behave this concern

122
00:04:27,889 --> 00:04:31,310
me because we really don't have that

123
00:04:29,598 --> 00:04:33,800
many entities in the world right now now

124
00:04:31,310 --> 00:04:36,079
you know I guess that's a it's deceptive

125
00:04:33,800 --> 00:04:38,060
to say that because we sort of do I mean

126
00:04:36,079 --> 00:04:41,120
there actually is if you can think about

127
00:04:38,060 --> 00:04:43,939
the fact that all of this stuff every

128
00:04:41,120 --> 00:04:45,800
last thing here is an entity the ground

129
00:04:43,939 --> 00:04:48,110
pieces are an entity these or enemies

130
00:04:45,800 --> 00:04:49,759
out here that's an Emmy that's an ID so

131
00:04:48,110 --> 00:04:51,319
there are quite a few entities if we

132
00:04:49,759 --> 00:04:52,848
actually zoom out and look at how this

133
00:04:51,319 --> 00:04:54,560
whole world is defined there there's

134
00:04:52,848 --> 00:04:59,300
quite a few actually so it's not like

135
00:04:54,560 --> 00:05:01,038
it's that small of a world but would we

136
00:04:59,300 --> 00:05:03,228
like to support much larger worlds

137
00:05:01,038 --> 00:05:05,560
absolutely and everything else in our

138
00:05:03,228 --> 00:05:07,848
system does that just fine the moment

139
00:05:05,560 --> 00:05:09,019
you know there's nothing else in the

140
00:05:07,848 --> 00:05:12,228
system that's going to prevent us from

141
00:05:09,019 --> 00:05:13,908
creating giant worlds the memory burden

142
00:05:12,228 --> 00:05:16,310
is the only thing that would sort of put

143
00:05:13,908 --> 00:05:18,589
a limit on it and obviously there are

144
00:05:16,310 --> 00:05:19,990
things we can do in our system if we

145
00:05:18,589 --> 00:05:21,829
really wanted to support absolutely

146
00:05:19,990 --> 00:05:24,680
ridiculously huge worlds that are

147
00:05:21,829 --> 00:05:26,418
effectively impossible to ever play we

148
00:05:24,680 --> 00:05:28,879
can only stream to disk and stuff like

149
00:05:26,418 --> 00:05:30,649
that but we really haven't gotten to

150
00:05:28,879 --> 00:05:32,870
that kind of a point with our entity

151
00:05:30,649 --> 00:05:34,698
system I don't think because like I said

152
00:05:32,870 --> 00:05:38,028
there's just a ton of fat in there right

153
00:05:34,699 --> 00:05:39,710
now that I would like to remove and it's

154
00:05:38,028 --> 00:05:42,079
not that difficult for me to go ahead

155
00:05:39,709 --> 00:05:45,348
and remove it so what I'm gonna do is

156
00:05:42,079 --> 00:05:49,008
I'm gonna start by sort of talking about

157
00:05:45,348 --> 00:05:51,438
where we're at with that memory layout

158
00:05:49,009 --> 00:05:54,580
and what I'd like to do to fix it and

159
00:05:51,439 --> 00:05:56,599
why so it looks like somehow I got my

160
00:05:54,579 --> 00:05:58,310
shell closed there we go

161
00:05:56,598 --> 00:06:00,079
get that back up here I guess I never I

162
00:05:58,310 --> 00:06:02,569
just clicked on remedy so that's why it

163
00:06:00,079 --> 00:06:06,258
was never open I didn't close it

164
00:06:02,569 --> 00:06:07,848
I just never opened it so if we take a

165
00:06:06,259 --> 00:06:09,800
look at handmade hero what with the

166
00:06:07,848 --> 00:06:11,870
policy we've been following so far is

167
00:06:09,800 --> 00:06:13,278
that we aren't working on the enemy

168
00:06:11,870 --> 00:06:15,528
system that's been the policy I'm

169
00:06:13,278 --> 00:06:18,740
applying so far so what I did was every

170
00:06:15,528 --> 00:06:20,478
entity is just a bag of garbage you can

171
00:06:18,740 --> 00:06:22,879
throw anything in there you want every

172
00:06:20,478 --> 00:06:24,680
entity has everything there's no design

173
00:06:22,879 --> 00:06:27,349
to it and it's fine and that's very

174
00:06:24,680 --> 00:06:29,509
intentional because the last thing I

175
00:06:27,348 --> 00:06:35,329
think you want to do and I've said this

176
00:06:29,509 --> 00:06:36,680
many times the last thing you want to do

177
00:06:35,329 --> 00:06:39,468
when you're designing a system is pick a

178
00:06:36,680 --> 00:06:41,389
design up front it's the absolute worst

179
00:06:39,468 --> 00:06:43,819
thing you could ever do

180
00:06:41,389 --> 00:06:45,590
is the side I'm gonna use an entity

181
00:06:43,819 --> 00:06:47,689
component system before you've even

182
00:06:45,589 --> 00:06:50,899
written any of your game you make this

183
00:06:47,689 --> 00:06:52,430
choice I find that to be an absolutely

184
00:06:50,899 --> 00:06:54,500
terrible way to design code and the

185
00:06:52,430 --> 00:06:56,000
reason is because you're deciding a

186
00:06:54,500 --> 00:06:58,848
solution before you have seen the

187
00:06:56,000 --> 00:07:00,529
problems right and solutions to problems

188
00:06:58,848 --> 00:07:03,800
that don't exist aren't solutions at all

189
00:07:00,529 --> 00:07:06,769
they're just wasted work and so what I

190
00:07:03,800 --> 00:07:09,829
like to do instead is defer my solutions

191
00:07:06,769 --> 00:07:12,500
till I actually have my problems and in

192
00:07:09,829 --> 00:07:14,508
this case what that means is everything

193
00:07:12,500 --> 00:07:17,300
in the game is just a big bag of crap

194
00:07:14,509 --> 00:07:20,360
right in this case until we actually

195
00:07:17,300 --> 00:07:24,199
have some idea of what we want to do

196
00:07:20,360 --> 00:07:28,060
with it right and so this particular

197
00:07:24,199 --> 00:07:31,848
situation is starting to bring up a

198
00:07:28,060 --> 00:07:34,519
actual coherent problem I can talk about

199
00:07:31,848 --> 00:07:36,379
solving and I can see how I would want

200
00:07:34,519 --> 00:07:38,930
to solve it and so now I think is a good

201
00:07:36,379 --> 00:07:42,319
time to add a capability to our entity

202
00:07:38,930 --> 00:07:43,970
system that does address something

203
00:07:42,319 --> 00:07:45,379
that's happening in there that I would

204
00:07:43,970 --> 00:07:47,750
like to solve and can think of a

205
00:07:45,379 --> 00:07:49,879
concrete way to solve it and that thing

206
00:07:47,750 --> 00:07:54,978
is that I would like to start adding

207
00:07:49,879 --> 00:07:58,339
very large elements to our entity system

208
00:07:54,978 --> 00:08:01,120
like these and when they are placed in

209
00:07:58,339 --> 00:08:06,468
here they make the entities too big

210
00:08:01,120 --> 00:08:08,478
right so if I look at how much space was

211
00:08:06,468 --> 00:08:11,839
being taken up you know by this ground

212
00:08:08,478 --> 00:08:15,529
cover for example when we look inside

213
00:08:11,839 --> 00:08:17,658
the the memory view and I did this

214
00:08:15,529 --> 00:08:19,698
before we see how much space that's

215
00:08:17,658 --> 00:08:21,288
taking up relative to everything else

216
00:08:19,699 --> 00:08:23,750
right you can just kind of see how big

217
00:08:21,288 --> 00:08:25,310
that is if I were to change it so that

218
00:08:23,750 --> 00:08:27,050
we don't have storage for the ground

219
00:08:25,310 --> 00:08:28,459
cover just the ground cover nevermind

220
00:08:27,050 --> 00:08:30,620
the lighting Point State which is also

221
00:08:28,459 --> 00:08:35,360
large or any of these other sorts of

222
00:08:30,620 --> 00:08:37,969
things if I run that with you know two

223
00:08:35,360 --> 00:08:39,769
and reduce the memory footprint by that

224
00:08:37,969 --> 00:08:42,860
much you can see this dis creased

225
00:08:39,769 --> 00:08:46,338
dramatically just from that one member

226
00:08:42,860 --> 00:08:48,409
right like if we imagine that our

227
00:08:46,339 --> 00:08:50,270
previous size was like a bound on how

228
00:08:48,409 --> 00:08:52,639
big the world could be just removing

229
00:08:50,269 --> 00:08:54,319
that one member from our entities would

230
00:08:52,639 --> 00:08:54,919
have allowed the world to be twice as

231
00:08:54,320 --> 00:08:56,870
large

232
00:08:54,919 --> 00:08:58,459
and so that's just you know to give you

233
00:08:56,870 --> 00:09:00,409
an idea of what I'm talking about

234
00:08:58,460 --> 00:09:02,090
and that's gonna be true of everything

235
00:09:00,409 --> 00:09:06,079
that we potentially add here right

236
00:09:02,090 --> 00:09:07,580
there's so many different pieces of

237
00:09:06,080 --> 00:09:10,040
information that we might want to start

238
00:09:07,580 --> 00:09:11,780
covering and if you imagine all sorts of

239
00:09:10,039 --> 00:09:14,299
potentially fairly complicated things

240
00:09:11,779 --> 00:09:16,909
that are listed here like path finding

241
00:09:14,299 --> 00:09:22,399
information and lighting and ground

242
00:09:16,909 --> 00:09:26,360
cover decals footprints you know who

243
00:09:22,399 --> 00:09:28,639
knows what those sorts of things all add

244
00:09:26,360 --> 00:09:30,680
up and when not every entity is using

245
00:09:28,639 --> 00:09:33,379
them and you're storing the entire world

246
00:09:30,679 --> 00:09:35,239
with perhaps tens or even hundreds of

247
00:09:33,379 --> 00:09:37,519
thousands of entities in it that

248
00:09:35,240 --> 00:09:41,659
multiplier is just too high so the

249
00:09:37,519 --> 00:09:45,110
question is what do we actually want to

250
00:09:41,659 --> 00:09:47,679
do to address this problem well this

251
00:09:45,110 --> 00:09:50,629
first part of the problem like I said

252
00:09:47,679 --> 00:09:52,849
shows me an obvious way like address it

253
00:09:50,629 --> 00:09:55,370
because I have a concrete problem and I

254
00:09:52,850 --> 00:09:58,460
can design a concrete solution the

255
00:09:55,370 --> 00:10:01,100
concrete problem is that during actual

256
00:09:58,460 --> 00:10:05,470
visibility so when the entities on the

257
00:10:01,100 --> 00:10:08,420
screen lighting and ground cover are

258
00:10:05,470 --> 00:10:10,610
visual effects that need to be

259
00:10:08,419 --> 00:10:13,399
represented and I would like them to not

260
00:10:10,610 --> 00:10:15,440
have to be recomputed every frame right

261
00:10:13,399 --> 00:10:17,059
I would like to be able to do things

262
00:10:15,440 --> 00:10:19,850
like track the ground cover or the

263
00:10:17,059 --> 00:10:21,859
lighting and I'd like them to be stable

264
00:10:19,850 --> 00:10:23,360
across frames and remember information

265
00:10:21,860 --> 00:10:29,629
across frames that's relevant to the

266
00:10:23,360 --> 00:10:32,779
gameplay perhaps even down to relatively

267
00:10:29,629 --> 00:10:35,570
specific things that happen such as how

268
00:10:32,779 --> 00:10:37,100
grass gets trampled down or how the

269
00:10:35,570 --> 00:10:41,510
lighting is propagated throughout the

270
00:10:37,100 --> 00:10:43,940
scene but once I move out of an active

271
00:10:41,509 --> 00:10:46,909
region I don't necessarily need to

272
00:10:43,940 --> 00:10:49,130
remember those things if the user is

273
00:10:46,909 --> 00:10:52,519
actively looking at a piece of terrain

274
00:10:49,129 --> 00:10:55,370
and I don't store exactly how that

275
00:10:52,519 --> 00:10:58,909
terrain got modified they will see the

276
00:10:55,370 --> 00:11:00,320
change occur right like they would

277
00:10:58,909 --> 00:11:03,709
notice a difference if they're looking

278
00:11:00,320 --> 00:11:06,560
at it but if something goes outside of

279
00:11:03,710 --> 00:11:07,480
their view and they go three or four

280
00:11:06,559 --> 00:11:10,869
rooms away

281
00:11:07,480 --> 00:11:13,149
and then they come back to it all that

282
00:11:10,870 --> 00:11:15,250
they really will remember is roughly

283
00:11:13,149 --> 00:11:17,769
what the state of that area was right

284
00:11:15,250 --> 00:11:20,320
was this thing burned was this thing lit

285
00:11:17,769 --> 00:11:22,480
whatever right but they won't

286
00:11:20,320 --> 00:11:25,540
necessarily remember the exact state of

287
00:11:22,480 --> 00:11:29,170
things so I can afford to potentially

288
00:11:25,539 --> 00:11:31,539
forget really specific things like was

289
00:11:29,169 --> 00:11:34,809
this specific piece of grass in this

290
00:11:31,539 --> 00:11:37,599
specific place right and so what I'd

291
00:11:34,809 --> 00:11:39,549
like to do is introduce sort of a second

292
00:11:37,600 --> 00:11:41,590
level cache and I talked about this

293
00:11:39,549 --> 00:11:44,469
again when I was talking about adding it

294
00:11:41,590 --> 00:11:47,259
two weeks ago and this is what I'd like

295
00:11:44,470 --> 00:11:49,930
to add now a second level cache for

296
00:11:47,259 --> 00:11:52,720
things that are purely cosmetic which

297
00:11:49,929 --> 00:11:54,849
can sort of be lawfully remembered so I

298
00:11:52,720 --> 00:11:56,850
just kind of need to remember how much

299
00:11:54,850 --> 00:11:59,320
grass roughly was there on this patch

300
00:11:56,850 --> 00:12:01,720
with maybe like a single scalar that

301
00:11:59,320 --> 00:12:02,860
needs to get remembered but what I don't

302
00:12:01,720 --> 00:12:04,930
need to remember is the exact

303
00:12:02,860 --> 00:12:07,149
arrangement of the grass on this patch

304
00:12:04,929 --> 00:12:08,949
that I can just get rid of and

305
00:12:07,149 --> 00:12:12,730
regenerate it later when this thing

306
00:12:08,950 --> 00:12:15,280
comes back into view and so I'm looking

307
00:12:12,730 --> 00:12:18,430
at a way of sort of taking the ground

308
00:12:15,279 --> 00:12:20,860
cover field or the lighting field I'm

309
00:12:18,429 --> 00:12:24,370
looking at ways to essentially compress

310
00:12:20,860 --> 00:12:27,399
that down and store it in a small

311
00:12:24,370 --> 00:12:31,419
permanent way when I need to and then be

312
00:12:27,399 --> 00:12:37,230
able to decompress it later now because

313
00:12:31,419 --> 00:12:37,229
of this sort of how should I say this

314
00:12:38,009 --> 00:12:44,110
whilst thinking about this so while

315
00:12:41,710 --> 00:12:46,660
that's kind of in your brain right and

316
00:12:44,110 --> 00:12:49,169
you're thinking to yourself about the

317
00:12:46,659 --> 00:12:52,269
ramifications of making such a change

318
00:12:49,169 --> 00:12:53,679
well I've always since the very

319
00:12:52,269 --> 00:12:54,879
beginning of the new system suggested

320
00:12:53,679 --> 00:12:56,739
that we would probably have something

321
00:12:54,879 --> 00:12:58,360
like this where we compress entities

322
00:12:56,740 --> 00:13:00,490
down into something that only remembers

323
00:12:58,360 --> 00:13:02,440
the things they actually use and these

324
00:13:00,490 --> 00:13:07,389
are sort of related in a sense right

325
00:13:02,440 --> 00:13:10,900
meaning storing sort of lossy versions

326
00:13:07,389 --> 00:13:12,870
of certain visual elements is very

327
00:13:10,899 --> 00:13:15,429
similar to compressing entities down

328
00:13:12,870 --> 00:13:17,950
based on only what we actually care

329
00:13:15,429 --> 00:13:21,159
about remembering and so for example if

330
00:13:17,950 --> 00:13:23,259
you imagine an entity that doesn't have

331
00:13:21,159 --> 00:13:25,448
hitpoints well we don't really need to

332
00:13:23,259 --> 00:13:29,949
store hitpoints for that entity right

333
00:13:25,448 --> 00:13:36,370
and so these two things are actually

334
00:13:29,948 --> 00:13:39,068
kind of they feel the same right these

335
00:13:36,370 --> 00:13:41,740
two things feel very similar in that if

336
00:13:39,068 --> 00:13:44,219
you have a set of entities that want to

337
00:13:41,740 --> 00:13:46,740
be compressed based on usage and also

338
00:13:44,220 --> 00:13:51,240
lossy storage that might want to happen

339
00:13:46,740 --> 00:13:55,750
it sort of gets me thinking about

340
00:13:51,240 --> 00:13:58,240
alternative ways of dealing with our

341
00:13:55,750 --> 00:14:00,309
entities in general and let me discuss

342
00:13:58,240 --> 00:14:03,370
that with sort of giving you what I'm

343
00:14:00,309 --> 00:14:05,469
thinking and I hadn't really thought of

344
00:14:03,370 --> 00:14:06,789
this when we first started typing in

345
00:14:05,470 --> 00:14:09,040
entities so it wasn't something I was

346
00:14:06,789 --> 00:14:11,139
looking at again it's in that kind of

347
00:14:09,039 --> 00:14:20,860
comes organically out of how you end up

348
00:14:11,139 --> 00:14:23,079
building the system so consider this we

349
00:14:20,860 --> 00:14:26,019
want to be able to work with entities in

350
00:14:23,078 --> 00:14:28,958
a in sort of what I would call their

351
00:14:26,019 --> 00:14:31,269
full form and that is something that

352
00:14:28,958 --> 00:14:32,469
looks a lot like this sort of bloated

353
00:14:31,269 --> 00:14:35,500
entity structure that we're talking

354
00:14:32,470 --> 00:14:36,910
about here bloated in the sense that it

355
00:14:35,500 --> 00:14:40,120
has a ton of stuff in it that we don't

356
00:14:36,909 --> 00:14:42,309
actually need in a lot of cases but it's

357
00:14:40,120 --> 00:14:43,990
very easy to work with like that why is

358
00:14:42,309 --> 00:14:47,229
it very easy to work with like that well

359
00:14:43,990 --> 00:14:49,990
it is because there's no restrictions on

360
00:14:47,230 --> 00:14:51,699
what we can do right any piece of code

361
00:14:49,990 --> 00:14:54,339
can just write to any piece of the

362
00:14:51,698 --> 00:14:58,269
entity and add capabilities to it

363
00:14:54,339 --> 00:15:00,370
willy-nilly right there's no hard

364
00:14:58,269 --> 00:15:03,100
constraints on what an entity is or

365
00:15:00,370 --> 00:15:05,500
isn't and so it gives us complete

366
00:15:03,100 --> 00:15:07,449
flexibility and furthermore it gives us

367
00:15:05,500 --> 00:15:10,708
that complete flexibility with no

368
00:15:07,448 --> 00:15:13,120
runtime cost at all at the moment right

369
00:15:10,708 --> 00:15:15,489
for the routines are actually operating

370
00:15:13,120 --> 00:15:17,558
on it because we don't have to do things

371
00:15:15,490 --> 00:15:19,600
like searching a list of properties to

372
00:15:17,558 --> 00:15:21,000
find if it has one that we're talking

373
00:15:19,600 --> 00:15:23,319
about we don't need to allocate

374
00:15:21,000 --> 00:15:25,360
properties on-the-fly to attach new

375
00:15:23,318 --> 00:15:28,958
properties to things none of that has to

376
00:15:25,360 --> 00:15:31,180
happen in our system and so the runtime

377
00:15:28,958 --> 00:15:34,028
cost that we are paying right now is

378
00:15:31,179 --> 00:15:35,019
actually just strictly a memory cost

379
00:15:34,028 --> 00:15:37,629
it's a memory

380
00:15:35,019 --> 00:15:39,970
and with cost so instead of having a

381
00:15:37,629 --> 00:15:42,090
computational cost and a memory

382
00:15:39,970 --> 00:15:44,350
bandwidth cost that's just less of

383
00:15:42,090 --> 00:15:46,720
looking through things like saying and

384
00:15:44,350 --> 00:15:48,970
the component system might do or some

385
00:15:46,720 --> 00:15:52,750
kind of a system that had any properties

386
00:15:48,970 --> 00:15:54,399
attached to it or suffering the

387
00:15:52,750 --> 00:15:56,110
restrictions that come from a thing

388
00:15:54,399 --> 00:15:57,970
where entities are sort of fixed in

389
00:15:56,110 --> 00:16:00,340
their conceptualization and like this

390
00:15:57,970 --> 00:16:01,480
entity is this kind of monster and only

391
00:16:00,340 --> 00:16:03,399
stores the information for that kind of

392
00:16:01,480 --> 00:16:06,670
monster so it can never get any other

393
00:16:03,399 --> 00:16:08,590
things applied to it right instead of

394
00:16:06,669 --> 00:16:10,360
having that for question restriction or

395
00:16:08,590 --> 00:16:12,310
the restriction of having to have all of

396
00:16:10,360 --> 00:16:16,300
this busy work where things are finding

397
00:16:12,309 --> 00:16:18,039
or you know on every piece of on every

398
00:16:16,299 --> 00:16:22,359
single time anything happens with the

399
00:16:18,039 --> 00:16:26,230
entity we sort of have the best of both

400
00:16:22,360 --> 00:16:28,120
worlds here and we pay the cost only at

401
00:16:26,230 --> 00:16:31,590
the time when we actually need to

402
00:16:28,120 --> 00:16:34,659
consider paging memory around right

403
00:16:31,590 --> 00:16:37,899
because that it's like the cash cost is

404
00:16:34,659 --> 00:16:39,189
the only cost for paying and so far it's

405
00:16:37,899 --> 00:16:43,090
unclear that we're really paying much of

406
00:16:39,190 --> 00:16:48,340
that cost right and so the question is

407
00:16:43,090 --> 00:16:51,509
is it perhaps possible to retain the

408
00:16:48,340 --> 00:16:55,590
usage of the bloated entity structure

409
00:16:51,509 --> 00:16:58,960
such that we really can keep using it as

410
00:16:55,590 --> 00:17:03,129
arbitrarily and as flexibly as we watch

411
00:16:58,960 --> 00:17:06,338
perhaps even going further and allowing

412
00:17:03,129 --> 00:17:09,690
sort of arbitrary size lists in here and

413
00:17:06,338 --> 00:17:15,099
stuff to even write like perhaps even

414
00:17:09,690 --> 00:17:17,910
more bloated than it already is can we

415
00:17:15,099 --> 00:17:20,679
do something that supports that and

416
00:17:17,910 --> 00:17:23,440
potentially gets rid of the memory

417
00:17:20,680 --> 00:17:25,990
bandwidth costs of packing and unpacking

418
00:17:23,440 --> 00:17:28,360
storage for these sorts of things and/or

419
00:17:25,990 --> 00:17:32,019
the bloated memory footprint cost of

420
00:17:28,359 --> 00:17:34,179
just storing them at all right and what

421
00:17:32,019 --> 00:17:38,109
I started to realize was that well

422
00:17:34,180 --> 00:17:40,029
here's what we're doing we have a begin

423
00:17:38,109 --> 00:17:44,469
sim call and if you remember the way

424
00:17:40,029 --> 00:17:46,990
that begins sim call it works is it goes

425
00:17:44,470 --> 00:17:48,549
through each of the world sort of

426
00:17:46,990 --> 00:17:51,370
buckets we have

427
00:17:48,549 --> 00:17:54,879
essentially amounts to a sparse voxel

428
00:17:51,369 --> 00:17:56,559
storage for our world right I all of our

429
00:17:54,880 --> 00:17:59,410
entities are just kind of binned based

430
00:17:56,559 --> 00:18:02,889
on where they're located and when you go

431
00:17:59,410 --> 00:18:04,720
to simulate a particular region of the

432
00:18:02,890 --> 00:18:06,790
world what you're doing is you're

433
00:18:04,720 --> 00:18:08,860
gathering all of the buckets that might

434
00:18:06,789 --> 00:18:11,069
contribute to that region of the world

435
00:18:08,859 --> 00:18:15,549
but that's all we're doing fundamentally

436
00:18:11,069 --> 00:18:18,579
and so when we call this begin sim call

437
00:18:15,549 --> 00:18:24,159
here what we do is inside begin world

438
00:18:18,579 --> 00:18:26,949
change we we sort of unpack all of our

439
00:18:24,160 --> 00:18:28,660
entities into like an active set and we

440
00:18:26,950 --> 00:18:32,529
set this up because we thought someday

441
00:18:28,660 --> 00:18:34,330
we might want to do that unpacking in a

442
00:18:32,529 --> 00:18:37,990
real sense but right now all we do is

443
00:18:34,329 --> 00:18:42,009
actually go in and grab that for it here

444
00:18:37,990 --> 00:18:43,990
yep we thought that someday we might

445
00:18:42,009 --> 00:18:46,660
actually want to do that decompression

446
00:18:43,990 --> 00:18:51,130
so we do actually have a step here where

447
00:18:46,660 --> 00:18:52,750
we're like hey let's actually unpack the

448
00:18:51,130 --> 00:18:57,310
entities that are that are involved and

449
00:18:52,750 --> 00:19:00,849
I believe we do that right here right we

450
00:18:57,309 --> 00:19:02,319
take this destination we say you know

451
00:19:00,849 --> 00:19:05,559
this should really be a decompression

452
00:19:02,319 --> 00:19:07,750
step and we copy it right and then when

453
00:19:05,559 --> 00:19:09,849
we do an end world change we copy it

454
00:19:07,750 --> 00:19:13,440
back right so you can see us doing that

455
00:19:09,849 --> 00:19:16,269
here and we have a little bit of packing

456
00:19:13,440 --> 00:19:18,309
that we do but a very little bit right

457
00:19:16,269 --> 00:19:25,480
it doesn't really there's very little to

458
00:19:18,309 --> 00:19:30,299
it it's it's really just that right so

459
00:19:25,480 --> 00:19:30,299
now the question is you know

460
00:19:33,460 --> 00:19:44,269
if we're paying this cost here to like

461
00:19:39,049 --> 00:19:48,409
pack and unpack entities we have to ask

462
00:19:44,269 --> 00:19:51,339
ourselves from one frame to the next how

463
00:19:48,410 --> 00:19:55,370
much difference do you think there is in

464
00:19:51,339 --> 00:19:59,119
terms of entities that we've used like

465
00:19:55,369 --> 00:20:00,759
that that we unpacked last frame and the

466
00:19:59,119 --> 00:20:04,609
entities we need to unpack this frame

467
00:20:00,759 --> 00:20:08,660
right and the chances are it's almost

468
00:20:04,609 --> 00:20:12,439
exactly the same as the user moves right

469
00:20:08,660 --> 00:20:15,860
a few thing a few new entities might

470
00:20:12,440 --> 00:20:17,930
page in on the side like maybe five to

471
00:20:15,859 --> 00:20:20,119
ten percent of our entities may page it

472
00:20:17,930 --> 00:20:22,610
on the side and maybe five to ten

473
00:20:20,119 --> 00:20:26,569
percent of our entities pay will page

474
00:20:22,609 --> 00:20:29,899
out on the other side right but like

475
00:20:26,569 --> 00:20:33,289
other than that there's really very

476
00:20:29,900 --> 00:20:36,259
little going on in terms of the packing

477
00:20:33,289 --> 00:20:38,809
and unpacking we literally packed all of

478
00:20:36,259 --> 00:20:43,970
our entities last frame up only to

479
00:20:38,809 --> 00:20:46,429
unpack them all again this frame so this

480
00:20:43,970 --> 00:20:48,819
got me thinking well why don't instead

481
00:20:46,430 --> 00:20:51,080
of us thinking of simulation as

482
00:20:48,819 --> 00:20:54,109
unpacking all of our entities simulating

483
00:20:51,079 --> 00:20:57,169
them and repacking them why don't we

484
00:20:54,109 --> 00:21:00,829
just assume instead that the simulation

485
00:20:57,170 --> 00:21:04,519
just works on unpacked entities and all

486
00:21:00,829 --> 00:21:08,599
it really does is ask the world storage

487
00:21:04,519 --> 00:21:11,420
to make sure that any entities it's

488
00:21:08,599 --> 00:21:13,099
going to touch are unpacked but if those

489
00:21:11,420 --> 00:21:16,279
were already unpacked from last frame

490
00:21:13,099 --> 00:21:19,759
they just stay unpacked that system

491
00:21:16,279 --> 00:21:21,289
could then pack only those things that

492
00:21:19,759 --> 00:21:25,099
are no longer being used by the

493
00:21:21,289 --> 00:21:28,730
simulation and unpack ones that are but

494
00:21:25,099 --> 00:21:30,559
essentially act as a rolling cache that

495
00:21:28,730 --> 00:21:35,210
doesn't require any packing or unpacking

496
00:21:30,559 --> 00:21:38,569
at all most of the time does that make

497
00:21:35,210 --> 00:21:39,950
sense what I'm saying I hope it does but

498
00:21:38,569 --> 00:21:43,159
we're gonna go ahead and do this over

499
00:21:39,950 --> 00:21:46,309
the next few weeks and so hopefully if

500
00:21:43,160 --> 00:21:48,500
it's not clear what I'm saying you'll

501
00:21:46,309 --> 00:21:51,829
a couple chances to sort of see what I'm

502
00:21:48,500 --> 00:21:54,859
talking about here and so fundamentally

503
00:21:51,829 --> 00:21:56,659
there's a couple wait phases in which I

504
00:21:54,859 --> 00:21:59,240
want to you know sort of make this

505
00:21:56,660 --> 00:22:02,720
change take place and what I'd like to

506
00:21:59,240 --> 00:22:04,910
do here is say okay let's start by

507
00:22:02,720 --> 00:22:08,329
assuming that this is actually just a

508
00:22:04,910 --> 00:22:11,509
reference table so when we say begin

509
00:22:08,329 --> 00:22:14,210
world change what I'd like to do is say

510
00:22:11,509 --> 00:22:22,970
that the sim region entities here this

511
00:22:14,210 --> 00:22:24,529
thing right here right so that where we

512
00:22:22,970 --> 00:22:27,589
sort of say look we've got some number

513
00:22:24,529 --> 00:22:29,799
of entities that we're gonna unpack and

514
00:22:27,589 --> 00:22:38,329
we need to store them in here

515
00:22:29,799 --> 00:22:41,720
excuse me what I want to do is make that

516
00:22:38,329 --> 00:22:45,559
set of entities there I want this to be

517
00:22:41,720 --> 00:22:48,380
a reference table basically so instead

518
00:22:45,559 --> 00:22:50,659
of referring to entities directly these

519
00:22:48,380 --> 00:22:53,320
will just be like pointers to entities

520
00:22:50,660 --> 00:22:55,820
or something like that right and

521
00:22:53,319 --> 00:22:56,629
furthermore if you look at the way we're

522
00:22:55,819 --> 00:22:58,849
doing things

523
00:22:56,630 --> 00:23:02,840
right now we've got this entity pointer

524
00:22:58,849 --> 00:23:05,839
here in our entity hash what it makes me

525
00:23:02,839 --> 00:23:10,819
think is well maybe actually the entity

526
00:23:05,839 --> 00:23:14,209
hash could just be the only thing there

527
00:23:10,819 --> 00:23:16,490
is so meaning this doesn't actually have

528
00:23:14,210 --> 00:23:19,700
to be there anymore and we just walk the

529
00:23:16,490 --> 00:23:22,490
entity hash to do stuff right now why do

530
00:23:19,700 --> 00:23:24,529
I want that well I want that because if

531
00:23:22,490 --> 00:23:27,640
we just start using entity pointers

532
00:23:24,529 --> 00:23:33,319
everywhere and don't ever look at some

533
00:23:27,640 --> 00:23:36,470
like compact array that implies that we

534
00:23:33,319 --> 00:23:39,799
could just point into a cash held by the

535
00:23:36,470 --> 00:23:42,410
world for each entity that we know is

536
00:23:39,799 --> 00:23:46,069
stable up until the time when we stop

537
00:23:42,410 --> 00:23:48,650
our simulation for this block right so

538
00:23:46,069 --> 00:23:51,500
we can start the sim use pointers into

539
00:23:48,650 --> 00:23:55,490
the world sort of l2 cache of unpacked

540
00:23:51,500 --> 00:23:58,400
entities simulate them all be done tell

541
00:23:55,490 --> 00:24:01,759
the world now is a good time to pack any

542
00:23:58,400 --> 00:24:04,310
these that you think need to be to stay

543
00:24:01,759 --> 00:24:05,869
under a particular memory limits for how

544
00:24:04,309 --> 00:24:11,079
many unpacked entities we keep around

545
00:24:05,869 --> 00:24:16,819
for example and off we go

546
00:24:11,079 --> 00:24:18,500
right make sense so that's really what

547
00:24:16,819 --> 00:24:19,970
I'm thinking and so the first thing I

548
00:24:18,500 --> 00:24:22,819
want to do again I'm just going to start

549
00:24:19,970 --> 00:24:24,710
to explore to that change the first

550
00:24:22,819 --> 00:24:27,679
thing I'd like to do is change this

551
00:24:24,710 --> 00:24:29,990
entity structure to be something that

552
00:24:27,680 --> 00:24:31,970
will generate an error everywhere it's

553
00:24:29,990 --> 00:24:35,210
used and what that's gonna allow me to

554
00:24:31,970 --> 00:24:37,160
do is just inspect my code to see what I

555
00:24:35,210 --> 00:24:40,009
think the impact of this change will be

556
00:24:37,160 --> 00:24:43,250
without ever actually doing any code in

557
00:24:40,009 --> 00:24:44,720
the first place right so what we can see

558
00:24:43,250 --> 00:24:46,849
here is there's a connect entity

559
00:24:44,720 --> 00:24:51,339
pointers call and what that's doing is

560
00:24:46,849 --> 00:24:54,529
really like sort of Swizzle enough the

561
00:24:51,339 --> 00:24:57,139
Swizzle hangs around word its connecting

562
00:24:54,529 --> 00:25:00,829
up entities to other entities in the

563
00:24:57,140 --> 00:25:02,509
system right and I think that that is

564
00:25:00,829 --> 00:25:05,179
something that will probably have to

565
00:25:02,509 --> 00:25:07,789
always happen when we at the beginning

566
00:25:05,180 --> 00:25:10,850
ending of simulation and the reason for

567
00:25:07,789 --> 00:25:13,940
that is those pointers that we're using

568
00:25:10,849 --> 00:25:15,319
if we you know maybe we will stop using

569
00:25:13,940 --> 00:25:17,950
pointers all together and we'll just

570
00:25:15,319 --> 00:25:22,039
always use hashes to connect the thing

571
00:25:17,950 --> 00:25:25,460
but regardless because when we do a PAC

572
00:25:22,039 --> 00:25:29,569
on things we can't necessarily know who

573
00:25:25,460 --> 00:25:31,640
needs to be who needs to be updated to

574
00:25:29,569 --> 00:25:35,210
not have a pointer we don't want

575
00:25:31,640 --> 00:25:36,740
pointers sitting around inside the we

576
00:25:35,210 --> 00:25:38,960
don't want pointers from entities to

577
00:25:36,740 --> 00:25:41,750
other entities generally to persist

578
00:25:38,960 --> 00:25:44,150
outside of the simulation right so when

579
00:25:41,750 --> 00:25:46,160
we start the sim inside there you can

580
00:25:44,150 --> 00:25:48,140
have it pointers enemies pointing

581
00:25:46,160 --> 00:25:52,250
enemies all you want but when you finish

582
00:25:48,140 --> 00:25:54,800
you want to get rid of those right now

583
00:25:52,250 --> 00:25:58,670
again I'm not really sure that we want

584
00:25:54,799 --> 00:26:06,919
that in the first place because I'm not

585
00:25:58,670 --> 00:26:09,110
sure we really want to I'm not sure we

586
00:26:06,920 --> 00:26:10,759
really need entity entities pointing to

587
00:26:09,109 --> 00:26:13,339
other entities instead of just using a

588
00:26:10,759 --> 00:26:15,679
hash by like their ID

589
00:26:13,339 --> 00:26:17,178
so I'm not sure we really need to do

590
00:26:15,679 --> 00:26:21,400
that and we may want to look at just

591
00:26:17,179 --> 00:26:21,400
removing that and using the hash instead

592
00:26:22,720 --> 00:26:27,610
that's sort of a separate issue right

593
00:26:27,880 --> 00:26:34,309
but anyway so that's fine we could just

594
00:26:30,829 --> 00:26:40,339
loop over the the hash there or whatever

595
00:26:34,308 --> 00:26:41,690
like we got plenty of yeah there's

596
00:26:40,339 --> 00:26:43,609
really there's really nothing weird

597
00:26:41,690 --> 00:26:46,039
going on there what by the way is this

598
00:26:43,609 --> 00:26:47,509
entity hash occupants are used for you

599
00:26:46,039 --> 00:26:49,009
know what hold on one second I want to

600
00:26:47,509 --> 00:26:52,700
see what that's used for before I do any

601
00:26:49,009 --> 00:26:55,720
more of this I don't really remember

602
00:26:52,700 --> 00:26:55,720
what we're doing with that

603
00:27:13,289 --> 00:27:24,149
so it looks like that is literally just

604
00:27:17,039 --> 00:27:29,149
to speed up clearing so that we can just

605
00:27:24,150 --> 00:27:29,150
clear that field it's what it looks like

606
00:27:31,309 --> 00:27:36,389
so I'm assuming we yeah we literally

607
00:27:34,289 --> 00:27:38,879
just added that to speed up this clear

608
00:27:36,390 --> 00:27:43,530
so that instead of having to clear all

609
00:27:38,880 --> 00:27:45,510
the entities we just cleared or it so

610
00:27:43,529 --> 00:27:51,049
the instead of having to clear the

611
00:27:45,509 --> 00:27:51,049
entire entity hash table we just cleared

612
00:27:51,619 --> 00:27:59,299
the occupancy table I think

613
00:28:01,269 --> 00:28:05,579
I mean looking at that's the only thing

614
00:28:03,759 --> 00:28:10,240
I could think that that would be doing

615
00:28:05,579 --> 00:28:14,949
right um and I don't see anything else

616
00:28:10,240 --> 00:28:16,150
that that's good for so that's we don't

617
00:28:14,950 --> 00:28:18,850
really have to care about that that's

618
00:28:16,150 --> 00:28:21,430
totally fine and would not be affected

619
00:28:18,849 --> 00:28:22,419
by this change at all really okay just

620
00:28:21,430 --> 00:28:23,710
want to make sure I knew what we were

621
00:28:22,420 --> 00:28:27,700
doing there looks like that's just for

622
00:28:23,710 --> 00:28:29,620
accelerating that clear all right so

623
00:28:27,700 --> 00:28:32,590
this is us just allocating the array

624
00:28:29,619 --> 00:28:34,509
again that's nothing and this is us I'm

625
00:28:32,589 --> 00:28:38,349
talking into the array again totally

626
00:28:34,509 --> 00:28:40,180
fine here's us packing back up here's

627
00:28:38,349 --> 00:28:41,769
this adding an entity again none of

628
00:28:40,180 --> 00:28:46,390
these things really would be implicated

629
00:28:41,769 --> 00:28:49,450
there I don't think this is testing all

630
00:28:46,390 --> 00:28:55,150
of the entities in the system to look

631
00:28:49,450 --> 00:28:57,519
for a camera here's us looking for

632
00:28:55,150 --> 00:28:59,890
traversable x' and again we want to do

633
00:28:57,519 --> 00:29:06,369
these by spatial queries anyway so again

634
00:28:59,890 --> 00:29:09,870
this is really totally fine yes so like

635
00:29:06,369 --> 00:29:09,869
all of this stuff I would say

636
00:29:18,049 --> 00:29:27,409
all of this stuff I would say is really

637
00:29:20,630 --> 00:29:29,990
not not a problem so so I think this is

638
00:29:27,410 --> 00:29:32,000
pretty trivial right I think we could

639
00:29:29,990 --> 00:29:34,849
really like we could pretty much just

640
00:29:32,000 --> 00:29:38,450
get rid of this as something that anyone

641
00:29:34,849 --> 00:29:46,159
ever used right and we could pretty

642
00:29:38,450 --> 00:29:48,558
easily move it out into out into the

643
00:29:46,160 --> 00:29:50,840
world structures so if we go into the

644
00:29:48,558 --> 00:29:53,420
world structures here right we can see

645
00:29:50,839 --> 00:29:55,189
is here's the world and here's where

646
00:29:53,420 --> 00:29:59,690
everything is stored it's in this chunk

647
00:29:55,190 --> 00:30:01,100
cache here and this I don't know what

648
00:29:59,690 --> 00:30:03,679
we're gonna do with this is just for

649
00:30:01,099 --> 00:30:04,939
maps and stuff so that we can ignore for

650
00:30:03,679 --> 00:30:07,700
now that'll be something we look at a

651
00:30:04,940 --> 00:30:11,808
little bit later but if you imagine it

652
00:30:07,700 --> 00:30:16,670
here inside this this world part here we

653
00:30:11,808 --> 00:30:21,308
had something that was literally like an

654
00:30:16,670 --> 00:30:21,308
entity cache so in here we've got like

655
00:30:25,660 --> 00:30:31,970
like this and so we've got this unpacked

656
00:30:29,960 --> 00:30:34,130
entity cash and the unpacked entity

657
00:30:31,970 --> 00:30:35,870
cache just kind of tells us like kusu

658
00:30:34,130 --> 00:30:38,660
and why and where and what's going on

659
00:30:35,869 --> 00:30:41,058
for unpacked entities we would have

660
00:30:38,660 --> 00:30:43,730
essentially the same thing that we have

661
00:30:41,058 --> 00:30:46,490
inside the sim region right this would

662
00:30:43,730 --> 00:30:47,900
be there and the difference is this

663
00:30:46,490 --> 00:30:50,170
would just persist from frame to frame

664
00:30:47,900 --> 00:30:54,110
and when you went to like you know

665
00:30:50,170 --> 00:30:56,990
unpack things or you know as you were

666
00:30:54,109 --> 00:30:58,759
unpacking things this would keep track

667
00:30:56,990 --> 00:31:02,569
of who was unpacked and who wasn't and

668
00:30:58,759 --> 00:31:05,779
it wouldn't have to redo work that was

669
00:31:02,569 --> 00:31:09,349
already done right so if you unpack a

670
00:31:05,779 --> 00:31:11,119
bunch of things on frame 0 on frame 1

671
00:31:09,349 --> 00:31:12,980
you then try to unpack most of the same

672
00:31:11,119 --> 00:31:14,899
things you don't do any work you just

673
00:31:12,980 --> 00:31:19,700
get pointers back in here of the already

674
00:31:14,900 --> 00:31:23,800
unpacked entities and that way in an

675
00:31:19,700 --> 00:31:28,039
infant in fact I'm trying to think so

676
00:31:23,799 --> 00:31:31,960
you know in this world chunk here where

677
00:31:28,039 --> 00:31:31,960
we've got this world entity block right

678
00:31:34,599 --> 00:31:38,569
I'm not sure why this is if a pointer

679
00:31:37,009 --> 00:31:42,319
would be better here because it is a

680
00:31:38,569 --> 00:31:44,298
pointer I think we previously did that

681
00:31:42,319 --> 00:31:47,710
at the Donmar so the answer is we are

682
00:31:44,298 --> 00:31:51,950
doing that in here in this world chunk

683
00:31:47,710 --> 00:31:54,140
we would just say oh you know we just

684
00:31:51,950 --> 00:31:58,640
need some way of saying whether this

685
00:31:54,140 --> 00:32:06,290
thing is in the expanded set or not

686
00:31:58,640 --> 00:32:08,590
right and so like maybe something like

687
00:32:06,289 --> 00:32:08,589
this

688
00:32:31,329 --> 00:32:37,699
you know I'm saying so we have something

689
00:32:36,140 --> 00:32:42,050
like this we've got like an unpacked

690
00:32:37,700 --> 00:32:43,850
world chunk and in here we would say

691
00:32:42,049 --> 00:32:46,549
like alright we've got an entity array

692
00:32:43,849 --> 00:32:50,359
that's you know keeping track of what's

693
00:32:46,549 --> 00:32:52,789
happening inside you know the unpacked

694
00:32:50,359 --> 00:32:54,349
version of the world chunk and then when

695
00:32:52,789 --> 00:33:04,480
we can have is sort of the same thing

696
00:32:54,349 --> 00:33:07,039
right and this one can probably be

697
00:33:04,480 --> 00:33:09,319
significantly smaller right because

698
00:33:07,039 --> 00:33:11,930
there's not that many world chunks that

699
00:33:09,319 --> 00:33:13,579
are unpacked anyway so you're not going

700
00:33:11,930 --> 00:33:16,490
to have to look through a whole heck of

701
00:33:13,579 --> 00:33:18,079
a lot of them unlike this which could

702
00:33:16,490 --> 00:33:20,539
have lots and lots of chunks in them

703
00:33:18,079 --> 00:33:23,149
like this has like thousands of chunks

704
00:33:20,539 --> 00:33:27,170
potentially or even maybe tens of

705
00:33:23,150 --> 00:33:30,740
thousands this has a hundred or

706
00:33:27,170 --> 00:33:32,990
something right and so you really don't

707
00:33:30,740 --> 00:33:37,480
have to make this particularly large in

708
00:33:32,990 --> 00:33:41,839
order to avoid long change so if we have

709
00:33:37,480 --> 00:33:44,150
an unpack hash there and we imagine

710
00:33:41,839 --> 00:33:47,209
something like this the only thing that

711
00:33:44,150 --> 00:33:49,490
makes me nervous about this at all is

712
00:33:47,210 --> 00:33:51,650
just the fact that I don't like having

713
00:33:49,490 --> 00:33:55,849
to have entity Headroom in every one of

714
00:33:51,650 --> 00:34:00,470
these entity arrays I and so that part

715
00:33:55,849 --> 00:34:04,849
is maybe a little less good than it then

716
00:34:00,470 --> 00:34:08,720
it should be maybe um and so I think you

717
00:34:04,849 --> 00:34:13,659
know it's hard for me to say but I think

718
00:34:08,719 --> 00:34:13,659
the way I would like to handle this

719
00:34:19,398 --> 00:34:25,500
in fact yeah I'm pretty sure so if you

720
00:34:24,148 --> 00:34:28,398
think about what happens here right

721
00:34:25,500 --> 00:34:31,519
we've got these different world chunks

722
00:34:28,398 --> 00:34:34,769
and when we go to pack a world chunk

723
00:34:31,519 --> 00:34:36,269
back up what we really want to do is

724
00:34:34,769 --> 00:34:38,909
pack all the enemies that might have

725
00:34:36,269 --> 00:34:42,568
moved into that world chunk so storing

726
00:34:38,909 --> 00:34:45,240
that like this isn't really what I want

727
00:34:42,568 --> 00:34:48,829
right all I really needed to do was

728
00:34:45,239 --> 00:34:53,189
store whether it was unpacked or not so

729
00:34:48,829 --> 00:34:56,970
honestly I think maybe it's okay to just

730
00:34:53,190 --> 00:35:00,470
say was this thing unpacked or not right

731
00:34:56,969 --> 00:35:03,209
so in here you know we've got this thing

732
00:35:00,469 --> 00:35:04,739
where we got the XYZ coordinates for it

733
00:35:03,210 --> 00:35:07,559
and then we've got some additional

734
00:35:04,739 --> 00:35:09,088
information this is already unbalanced

735
00:35:07,559 --> 00:35:10,650
so if you look at how this is structured

736
00:35:09,088 --> 00:35:16,409
right you really want it to look like

737
00:35:10,650 --> 00:35:18,088
this anyway there's already effectively

738
00:35:16,409 --> 00:35:21,358
an unbalanced earth this is eight we've

739
00:35:18,088 --> 00:35:23,969
got eight there's eight and four right

740
00:35:21,358 --> 00:35:26,460
so it's already a little on the line I

741
00:35:23,969 --> 00:35:28,108
don't feel too bad of just having at

742
00:35:26,460 --> 00:35:30,028
least at the moment it can just be as

743
00:35:28,108 --> 00:35:33,808
ab32 but we could make this flags if we

744
00:35:30,028 --> 00:35:36,269
wanted to in the future just say is it

745
00:35:33,809 --> 00:35:40,380
unpacked or not right look does it exist

746
00:35:36,269 --> 00:35:42,630
in the unpacked set or not I think that

747
00:35:40,380 --> 00:35:44,910
might be better and then we could say

748
00:35:42,630 --> 00:35:48,690
there's a giant list of entities in here

749
00:35:44,909 --> 00:35:53,639
that we pack and unpack into and then

750
00:35:48,690 --> 00:35:56,809
that's like it right that's all we do I

751
00:35:53,639 --> 00:35:59,989
think that's probably best

752
00:35:56,809 --> 00:35:59,990
something like that

753
00:36:04,590 --> 00:36:10,030
and so if we do something more like that

754
00:36:07,510 --> 00:36:15,340
I think then we're in much better shape

755
00:36:10,030 --> 00:36:18,430
and we don't really have to do any

756
00:36:15,340 --> 00:36:20,980
additional work I don't think when it

757
00:36:18,429 --> 00:36:22,599
asks us to unpack a chunk all we do is

758
00:36:20,980 --> 00:36:25,300
we do exactly what we're doing before

759
00:36:22,599 --> 00:36:27,730
but now instead of always adding the

760
00:36:25,300 --> 00:36:30,390
things from the chunk to the entity

761
00:36:27,730 --> 00:36:34,090
array we instead look at the unpacked

762
00:36:30,389 --> 00:36:36,190
value here and if it's already unpacked

763
00:36:34,090 --> 00:36:39,130
we just don't do anything right and

764
00:36:36,190 --> 00:36:41,710
that's it later when we go to pack up

765
00:36:39,130 --> 00:36:44,680
all we do is say if we were going to

766
00:36:41,710 --> 00:36:48,550
pack a particular chunk that we've

767
00:36:44,679 --> 00:36:52,389
determined isn't being used anymore well

768
00:36:48,550 --> 00:36:54,519
all we really have to do there is loop

769
00:36:52,389 --> 00:36:56,519
to the entity array packing up entities

770
00:36:54,519 --> 00:36:59,980
into that chunk that belong in the chunk

771
00:36:56,519 --> 00:37:03,480
and marking them is no longer in our

772
00:36:59,980 --> 00:37:06,309
unpacked entity set but that's it really

773
00:37:03,480 --> 00:37:08,500
and I think that I think that works

774
00:37:06,309 --> 00:37:10,360
pretty well right I think that's good I

775
00:37:08,500 --> 00:37:13,269
think we're good to go at that point the

776
00:37:10,360 --> 00:37:14,620
only thing that I'm not sure about how

777
00:37:13,269 --> 00:37:16,480
we would do and maybe I'll to start

778
00:37:14,619 --> 00:37:19,750
typing in the actual routines and see

779
00:37:16,480 --> 00:37:22,150
where it leads us but the only thing

780
00:37:19,750 --> 00:37:30,480
that I'm not sure about here is I don't

781
00:37:22,150 --> 00:37:35,860
know how to detect which world chunks

782
00:37:30,480 --> 00:37:38,679
should now be packed right and so that's

783
00:37:35,860 --> 00:37:42,430
why I kind of think we need some sort of

784
00:37:38,679 --> 00:37:44,980
a list like an LRU sort of a list here

785
00:37:42,429 --> 00:37:48,219
that just says here are the chunks that

786
00:37:44,980 --> 00:37:50,230
I did unpack and now you are gonna have

787
00:37:48,219 --> 00:37:53,099
to pack them back up again at some point

788
00:37:50,230 --> 00:37:53,099
right

789
00:38:11,059 --> 00:38:17,960
and that part I don't really have a

790
00:38:15,019 --> 00:38:19,429
coherent idea for you can think about

791
00:38:17,960 --> 00:38:24,369
what the codes gonna be in your head

792
00:38:19,429 --> 00:38:28,399
right so you're gonna do a sim step and

793
00:38:24,369 --> 00:38:29,960
maybe like at the end of every frame who

794
00:38:28,400 --> 00:38:32,510
knows or maybe at the end of every sim

795
00:38:29,960 --> 00:38:34,789
step you're just gonna make a call it's

796
00:38:32,510 --> 00:38:41,090
like hey PAC the least recently used

797
00:38:34,789 --> 00:38:42,349
chunks as necessary right so if you've

798
00:38:41,090 --> 00:38:43,910
got a bunch of world chunks sitting

799
00:38:42,349 --> 00:38:46,039
around that haven't been used in several

800
00:38:43,909 --> 00:38:49,309
frames pack them back up because they're

801
00:38:46,039 --> 00:38:52,730
probably not needed anymore and the

802
00:38:49,309 --> 00:38:55,699
problem is how do we know right it's

803
00:38:52,730 --> 00:38:57,800
pretty easy for us to store in the world

804
00:38:55,699 --> 00:39:01,309
chunk like instead of this unpacked

805
00:38:57,800 --> 00:39:04,250
value we could store a like how like a

806
00:39:01,309 --> 00:39:08,630
timestamp like when was the last unpack

807
00:39:04,250 --> 00:39:10,730
of this thing that's pretty easy for us

808
00:39:08,630 --> 00:39:13,579
to do but what's not so easy for us to

809
00:39:10,730 --> 00:39:15,800
do is to know without looping through

810
00:39:13,579 --> 00:39:19,849
literally all of the world chunks in the

811
00:39:15,800 --> 00:39:22,550
system who's the least and so we kind of

812
00:39:19,849 --> 00:39:23,719
need some secondary right you see what

813
00:39:22,550 --> 00:39:27,230
I'm saying we need some kind of

814
00:39:23,719 --> 00:39:30,369
secondary structure here and maybe we

815
00:39:27,230 --> 00:39:33,800
just store like another list of that or

816
00:39:30,369 --> 00:39:36,679
something that we cycle through I don't

817
00:39:33,800 --> 00:39:40,460
know and like I say I just I really just

818
00:39:36,679 --> 00:39:44,869
don't have a solid idea for exactly how

819
00:39:40,460 --> 00:39:48,730
that should work so let's start by just

820
00:39:44,869 --> 00:39:52,190
doing the initial pack unpack stuff as

821
00:39:48,730 --> 00:39:53,990
if we knew so I'm just gonna pretend

822
00:39:52,190 --> 00:39:58,490
that I can loop over those at some point

823
00:39:53,989 --> 00:40:00,979
and figure it out and then we can after

824
00:39:58,489 --> 00:40:02,509
I'm done with that change figure out how

825
00:40:00,980 --> 00:40:04,900
the heck we're gonna do it right well

826
00:40:02,510 --> 00:40:08,770
well after we get everything else done

827
00:40:04,900 --> 00:40:11,599
which is plenty of work to do for today

828
00:40:08,769 --> 00:40:14,090
then after all that said and done and uh

829
00:40:11,599 --> 00:40:15,170
tomorrow or sometime then we get started

830
00:40:14,090 --> 00:40:17,930
to talk about all right how do we

831
00:40:15,170 --> 00:40:20,059
actually know which world chunks get get

832
00:40:17,929 --> 00:40:23,179
repacked right how do we know who's the

833
00:40:20,059 --> 00:40:24,670
ones to do and we don't have to do that

834
00:40:23,179 --> 00:40:28,750
right away we could just pack

835
00:40:24,670 --> 00:40:39,400
everybody back up right as a start but

836
00:40:28,750 --> 00:40:40,139
but yeah all right so let's see here you

837
00:40:39,400 --> 00:40:43,510
know what else

838
00:40:40,139 --> 00:40:49,118
unpacked may be superfluous because if

839
00:40:43,510 --> 00:40:52,930
first block is zero then you are

840
00:40:49,119 --> 00:40:56,890
unpacked right so we may not even need

841
00:40:52,929 --> 00:40:58,568
this I'm gonna get rid of that for a

842
00:40:56,889 --> 00:41:02,409
second just to see if that's true

843
00:40:58,568 --> 00:41:05,730
because I think it might be so we'll see

844
00:41:02,409 --> 00:41:10,750
all right so anyway let's go ahead and

845
00:41:05,730 --> 00:41:11,969
make this happen if we can and and go

846
00:41:10,750 --> 00:41:15,730
from there

847
00:41:11,969 --> 00:41:18,129
all right so when we're doing connect

848
00:41:15,730 --> 00:41:20,108
entity pointers again for the short term

849
00:41:18,130 --> 00:41:26,170
what I'm gonna do is I'm just gonna step

850
00:41:20,108 --> 00:41:29,469
through the entity hash cure and use

851
00:41:26,170 --> 00:41:34,298
that as the way we loop over all

852
00:41:29,469 --> 00:41:36,308
entities if that makes sense so in here

853
00:41:34,298 --> 00:41:38,230
where we do connect any pointers and we

854
00:41:36,309 --> 00:41:41,319
call that on the sim region I'm going to

855
00:41:38,230 --> 00:41:44,108
introduce basically a helper here and

856
00:41:41,318 --> 00:41:47,769
that helper is going to be something

857
00:41:44,108 --> 00:41:52,380
that allows me to sort of easily iterate

858
00:41:47,769 --> 00:41:54,099
over all entities so something like this

859
00:41:52,380 --> 00:41:57,670
right

860
00:41:54,099 --> 00:42:05,200
and I would say like iterate all

861
00:41:57,670 --> 00:42:11,639
entities I passed the sim region in and

862
00:42:05,199 --> 00:42:11,639
then I would say something like this

863
00:42:17,030 --> 00:42:21,090
right so basically just a thing that

864
00:42:19,590 --> 00:42:23,910
allows me to loop over all of the

865
00:42:21,090 --> 00:42:25,769
entities and then this here is the only

866
00:42:23,909 --> 00:42:30,500
part I think I would have to actually

867
00:42:25,769 --> 00:42:33,090
replace right something like that I

868
00:42:30,500 --> 00:42:35,429
since this is a thing that essentially

869
00:42:33,090 --> 00:42:41,190
only loops over a pointer we could

870
00:42:35,429 --> 00:42:44,279
probably also just do this right that's

871
00:42:41,190 --> 00:42:46,860
probably fine too and so in the interest

872
00:42:44,280 --> 00:42:50,100
of keeping it simple maybe we'll just

873
00:42:46,860 --> 00:42:52,200
say that and that way we can basically

874
00:42:50,099 --> 00:42:55,259
turn all loops into something that looks

875
00:42:52,199 --> 00:42:58,409
like this what I'm going to do ahead of

876
00:42:55,260 --> 00:43:00,960
time here is actually just sort of

877
00:42:58,409 --> 00:43:04,079
define this as a stub so that I can

878
00:43:00,960 --> 00:43:07,369
compile and see if everything works and

879
00:43:04,079 --> 00:43:10,860
then we can kind of go from from there

880
00:43:07,369 --> 00:43:12,359
so we have an entity integrator that

881
00:43:10,860 --> 00:43:15,360
gets returned from iterate all entities

882
00:43:12,360 --> 00:43:17,070
that needs to take the sim region went

883
00:43:15,360 --> 00:43:24,210
and we would also have an advanced call

884
00:43:17,070 --> 00:43:26,280
which takes this iterator and that would

885
00:43:24,210 --> 00:43:29,220
really be it that's the entirety of it

886
00:43:26,280 --> 00:43:31,530
and so I think if I then compile I'm

887
00:43:29,219 --> 00:43:33,829
hoping that that will give me an easy

888
00:43:31,530 --> 00:43:38,100
way to replace the routines I was using

889
00:43:33,829 --> 00:43:43,699
with a utility function right so here is

890
00:43:38,099 --> 00:43:45,599
an example of me sorry not that one ooh

891
00:43:43,699 --> 00:43:48,179
create under you don't care about right

892
00:43:45,599 --> 00:43:50,250
now so here's another example of

893
00:43:48,179 --> 00:43:52,440
something that that loops over all of

894
00:43:50,250 --> 00:43:54,929
them right and so again I'm just going

895
00:43:52,440 --> 00:43:56,250
to do the same thing this time we wanted

896
00:43:54,929 --> 00:43:57,509
something called test entities so I'm

897
00:43:56,250 --> 00:44:01,619
just gonna make it test entity but

898
00:43:57,510 --> 00:44:05,100
otherwise it's exactly the same here is

899
00:44:01,619 --> 00:44:07,369
another one right and so we'll go ahead

900
00:44:05,099 --> 00:44:07,369
and do that

901
00:44:09,559 --> 00:44:15,019
same exact thing and again a lot of

902
00:44:13,699 --> 00:44:16,579
these want to use a facial partition so

903
00:44:15,019 --> 00:44:20,030
these will get a lot of these will get

904
00:44:16,579 --> 00:44:21,199
replaced anyway again which is good

905
00:44:20,030 --> 00:44:23,750
because it means that we really don't

906
00:44:21,199 --> 00:44:26,119
care how inefficient this is because

907
00:44:23,750 --> 00:44:28,219
we're not really going to rely on this

908
00:44:26,119 --> 00:44:30,589
in the final product anyway so this is

909
00:44:28,219 --> 00:44:35,899
just a stopgap measure and we don't have

910
00:44:30,590 --> 00:44:44,950
to be too concerned about that all right

911
00:44:35,900 --> 00:44:47,360
um so yeah looks good to me

912
00:44:44,949 --> 00:44:49,129
let's clean up the compilers from that

913
00:44:47,360 --> 00:44:51,320
and then look at the places that we

914
00:44:49,130 --> 00:44:59,630
can't replace with that particular thing

915
00:44:51,320 --> 00:45:00,950
so there there there and there this is

916
00:44:59,630 --> 00:45:02,570
just a different word it's not called

917
00:45:00,949 --> 00:45:03,619
sim region it's just called region I

918
00:45:02,570 --> 00:45:07,059
should have I didn't really mean to

919
00:45:03,619 --> 00:45:07,059
recompile there but I did oh well

920
00:45:11,380 --> 00:45:22,789
did we not replace this guess we didn't

921
00:45:17,059 --> 00:45:24,949
get that far I don't know what the sim

922
00:45:22,789 --> 00:45:28,119
region is in this case oh it's just

923
00:45:24,949 --> 00:45:28,119
called some region so that's pretty easy

924
00:45:29,739 --> 00:45:37,539
and it's like one more

925
00:45:44,690 --> 00:45:50,818
okay so that allows all of our

926
00:45:47,579 --> 00:45:54,719
iterations to work and we can just

927
00:45:50,818 --> 00:45:57,358
implement this when we're ready and so

928
00:45:54,719 --> 00:45:58,769
now really what we got to look for is

929
00:45:57,358 --> 00:46:00,869
the rest of this stuff

930
00:45:58,768 --> 00:46:04,318
I think the way I'd like to do this now

931
00:46:00,869 --> 00:46:08,039
is just by actually not doing anything

932
00:46:04,318 --> 00:46:12,259
other than moving exactly the thing that

933
00:46:08,039 --> 00:46:14,759
we previously had into the world code so

934
00:46:12,259 --> 00:46:16,978
if that makes sense like I'm not

935
00:46:14,759 --> 00:46:18,719
actually going to implement any of this

936
00:46:16,978 --> 00:46:20,429
stuff we talked about I'm just gonna

937
00:46:18,719 --> 00:46:23,818
change the location of the way it's

938
00:46:20,429 --> 00:46:28,379
currently working to work inside the

939
00:46:23,818 --> 00:46:31,858
world struct that's all and then we will

940
00:46:28,380 --> 00:46:33,869
progressively sort of add features to

941
00:46:31,858 --> 00:46:37,558
that until it becomes what I was sort of

942
00:46:33,869 --> 00:46:43,369
talking about alright so in here we're

943
00:46:37,559 --> 00:46:45,778
gonna need something that does this

944
00:46:43,369 --> 00:46:47,640
right like obviously that needs to

945
00:46:45,778 --> 00:46:50,068
happen because we need space to store

946
00:46:47,639 --> 00:46:53,909
this stuff and so we can have that

947
00:46:50,068 --> 00:46:58,170
happen as we go in here where we're

948
00:46:53,909 --> 00:47:01,228
doing sort of this dest bit here this

949
00:46:58,170 --> 00:47:05,068
unpack that's occurring right here you

950
00:47:01,228 --> 00:47:08,268
can sort of see the identity the hash is

951
00:47:05,068 --> 00:47:11,869
something that wants to probably remain

952
00:47:08,268 --> 00:47:15,358
inside the sim region side of things and

953
00:47:11,869 --> 00:47:19,920
the DEF P plus equals chunked out the

954
00:47:15,358 --> 00:47:24,529
stuff that has to probably keep

955
00:47:19,920 --> 00:47:27,909
happening to I would suggest because

956
00:47:24,530 --> 00:47:27,909
[Music]

957
00:47:29,239 --> 00:47:36,509
every frame the entities have to sort of

958
00:47:32,849 --> 00:47:39,749
be centered around our simulation origin

959
00:47:36,509 --> 00:47:43,139
so I feel like that part is gonna have

960
00:47:39,748 --> 00:47:48,358
to persist right like that part's not

961
00:47:43,139 --> 00:47:51,598
really gonna that that part we we have

962
00:47:48,358 --> 00:47:53,460
to always do so we have to look at that

963
00:47:51,599 --> 00:47:55,960
these two things is always having

964
00:47:53,460 --> 00:48:00,159
happening

965
00:47:55,960 --> 00:48:02,170
this part yeah all of this stuff this

966
00:48:00,159 --> 00:48:05,548
all looks like you stuff it would

967
00:48:02,170 --> 00:48:05,548
normally happen right

968
00:48:13,420 --> 00:48:18,280
so here where we do the remove world

969
00:48:16,340 --> 00:48:21,950
chunk right we're pulling this chunk off

970
00:48:18,280 --> 00:48:27,490
we're doing all the work to it what I

971
00:48:21,949 --> 00:48:31,969
can't quite understand here though is

972
00:48:27,489 --> 00:48:34,219
where the copy happens oh no I can't

973
00:48:31,969 --> 00:48:38,509
right there we already looked at it so

974
00:48:34,219 --> 00:48:40,189
there it is so again looking at this

975
00:48:38,510 --> 00:48:43,400
stuff here this is all stuff that's

976
00:48:40,190 --> 00:48:49,280
really simmer sim region related but

977
00:48:43,400 --> 00:48:54,110
everything above it's sort of isn't so I

978
00:48:49,280 --> 00:48:59,870
feel like a lot of this stuff and let me

979
00:48:54,110 --> 00:49:03,260
look at that identity the hash yeah so I

980
00:48:59,869 --> 00:49:09,799
feel like if we kind of group this stuff

981
00:49:03,260 --> 00:49:11,510
together here we can kind of see what

982
00:49:09,800 --> 00:49:21,380
we're dealing with right in terms of the

983
00:49:11,510 --> 00:49:24,410
stuff that's getting unpacked that seems

984
00:49:21,380 --> 00:49:28,789
like all of it and then this stuff just

985
00:49:24,409 --> 00:49:32,179
has to happen on everybody anyway so

986
00:49:28,789 --> 00:49:34,369
that's the tack I'm gonna take again

987
00:49:32,179 --> 00:49:37,669
this is fairly subtle code so you can

988
00:49:34,369 --> 00:49:41,059
see I'm being careful trying to think of

989
00:49:37,670 --> 00:49:45,019
three relatively carefully here to the

990
00:49:41,059 --> 00:49:50,199
extent that kam and so really what I'm

991
00:49:45,019 --> 00:49:55,360
looking at is this entire preamble

992
00:49:50,199 --> 00:49:55,359
really all the way down through here

993
00:49:58,690 --> 00:50:04,000
because I think what I'm looking for

994
00:50:01,219 --> 00:50:04,000
right

995
00:50:06,469 --> 00:50:19,349
that's pretty deep a lot of loops there

996
00:50:10,289 --> 00:50:22,050
a lot of loops a lot of ifs so that's

997
00:50:19,349 --> 00:50:24,110
that's the like three dimensional loop

998
00:50:22,050 --> 00:50:27,840
over everything removing those in there

999
00:50:24,110 --> 00:50:28,500
and similarly the add to free list part

1000
00:50:27,840 --> 00:50:32,130
of things

1001
00:50:28,500 --> 00:50:35,849
so after this chunk is is removed right

1002
00:50:32,130 --> 00:50:39,750
like when we grab it out here we do want

1003
00:50:35,849 --> 00:50:43,469
to do this part as well I'm gonna try

1004
00:50:39,750 --> 00:50:49,380
and get all this stuff out here not sure

1005
00:50:43,469 --> 00:50:53,480
what this was I think just a guard

1006
00:50:49,380 --> 00:50:56,869
against the enemy count being too high

1007
00:50:53,480 --> 00:50:56,869
but I think

1008
00:51:02,929 --> 00:51:08,719
I think that should be fine and so

1009
00:51:06,889 --> 00:51:10,909
coming through here looking at what's

1010
00:51:08,719 --> 00:51:13,098
happening this is going to be a four eye

1011
00:51:10,909 --> 00:51:15,019
loop here over all the entities in the

1012
00:51:13,099 --> 00:51:17,150
system and then this stuff is going to

1013
00:51:15,019 --> 00:51:20,509
happen as before so connect entity

1014
00:51:17,150 --> 00:51:21,980
pointers and why would say is that if

1015
00:51:20,510 --> 00:51:26,539
you look at how this is actually

1016
00:51:21,980 --> 00:51:29,838
happening here since all of the entities

1017
00:51:26,539 --> 00:51:32,119
you know if I look at connect entity

1018
00:51:29,838 --> 00:51:36,769
pointers in fact if I look at where we

1019
00:51:32,119 --> 00:51:38,480
are calling connect any pointers you can

1020
00:51:36,769 --> 00:51:40,400
see that it's sort of just a one-off I

1021
00:51:38,480 --> 00:51:43,219
think I might make that just part of

1022
00:51:40,400 --> 00:51:49,278
this routine directly so I want to get

1023
00:51:43,219 --> 00:51:51,858
this sort of out of here and in some

1024
00:51:49,278 --> 00:51:53,449
region where that happens I think I want

1025
00:51:51,858 --> 00:51:58,068
to just make that be something that

1026
00:51:53,449 --> 00:52:00,409
happens right because I think we want to

1027
00:51:58,068 --> 00:52:02,679
do this all in one loop now that makes

1028
00:52:00,409 --> 00:52:08,808
sense so I'm gonna get rid of this

1029
00:52:02,679 --> 00:52:10,699
that's gonna go away and in here where

1030
00:52:08,809 --> 00:52:12,798
we sort of do this stuff

1031
00:52:10,699 --> 00:52:16,939
I'm gonna say let's do this all in one

1032
00:52:12,798 --> 00:52:19,420
pass right oh well but adding to the

1033
00:52:16,940 --> 00:52:22,309
hash has to happen before we can do this

1034
00:52:19,420 --> 00:52:25,849
sadly so it still will be two passes it

1035
00:52:22,309 --> 00:52:30,380
looks like that's too bad just I think

1036
00:52:25,849 --> 00:52:32,480
it's too bad so this is a two pass at

1037
00:52:30,380 --> 00:52:35,170
which I don't love we could maybe look

1038
00:52:32,480 --> 00:52:35,170
at that a little bit

1039
00:53:14,369 --> 00:53:22,568
and to me that sort of argues again this

1040
00:53:19,449 --> 00:53:25,750
like traversable reference nonsense I

1041
00:53:22,568 --> 00:53:28,480
feel like maybe those just need to not

1042
00:53:25,750 --> 00:53:31,539
be pointers anymore anyway and they need

1043
00:53:28,480 --> 00:53:33,880
to go through the hash table because

1044
00:53:31,539 --> 00:53:35,349
again you can see like I have to do a

1045
00:53:33,880 --> 00:53:37,390
second loop because I need to do one

1046
00:53:35,349 --> 00:53:39,099
loop to fill the hash table and you

1047
00:53:37,389 --> 00:53:43,058
another loop to connect them up it just

1048
00:53:39,099 --> 00:53:46,329
seems kind of bad especially because

1049
00:53:43,059 --> 00:53:49,420
like we don't even know if anyone's

1050
00:53:46,329 --> 00:53:52,289
gonna need these right we're sort of

1051
00:53:49,420 --> 00:53:56,139
freed assuming that we're saving time by

1052
00:53:52,289 --> 00:53:57,430
converting those ID reference by ID to

1053
00:53:56,139 --> 00:53:58,690
reference my pointer but we don't even

1054
00:53:57,429 --> 00:54:00,699
really know that we are and so I

1055
00:53:58,690 --> 00:54:01,450
suspected that Smith might just be a

1056
00:54:00,699 --> 00:54:03,308
waste of time

1057
00:54:01,449 --> 00:54:05,048
and that's pretty high on my list of

1058
00:54:03,309 --> 00:54:08,470
things to look at after we're done I'd

1059
00:54:05,048 --> 00:54:09,519
like to make sure that that we do that

1060
00:54:08,469 --> 00:54:13,808
the right way because I think probably

1061
00:54:09,519 --> 00:54:18,400
this is the wrong way all right so I

1062
00:54:13,809 --> 00:54:20,048
think I think everything we need is

1063
00:54:18,400 --> 00:54:26,858
right here I think that's all we needed

1064
00:54:20,048 --> 00:54:30,838
to really do so if I go ahead and sort

1065
00:54:26,858 --> 00:54:30,838
of change desk to be entity here

1066
00:54:31,070 --> 00:54:34,670
I think that's just true everywhere

1067
00:54:33,289 --> 00:54:36,380
right because all this code came from

1068
00:54:34,670 --> 00:54:38,780
the same interior so it should just be

1069
00:54:36,380 --> 00:54:42,619
dust everywhere it wasn't two different

1070
00:54:38,780 --> 00:54:47,030
parts I think that was the same part all

1071
00:54:42,619 --> 00:54:50,750
this looks the same to me so I think

1072
00:54:47,030 --> 00:54:52,430
that's all good so we've got the this

1073
00:54:50,750 --> 00:54:54,380
loop here and I'm hoping maybe we'll

1074
00:54:52,429 --> 00:54:56,000
just get rid of this loop so we can look

1075
00:54:54,380 --> 00:54:59,599
at that a little bit later on but for

1076
00:54:56,000 --> 00:55:01,579
now it basically looks like this and so

1077
00:54:59,599 --> 00:55:07,819
what we need to do inside the world

1078
00:55:01,579 --> 00:55:09,650
struct itself right is this call here so

1079
00:55:07,820 --> 00:55:12,470
we've got this this happens on startup

1080
00:55:09,650 --> 00:55:20,990
but but this call here where I'm going

1081
00:55:12,469 --> 00:55:24,859
to like unpack world region maybe I'll

1082
00:55:20,989 --> 00:55:28,519
call this ensure region is unpacked

1083
00:55:24,860 --> 00:55:32,150
something like that that's gonna pass in

1084
00:55:28,519 --> 00:55:37,400
the like min chunk max chunk positions

1085
00:55:32,150 --> 00:55:39,980
that you're trying to use like so and

1086
00:55:37,400 --> 00:55:44,480
then obviously we need the worlds that

1087
00:55:39,980 --> 00:55:47,059
you're unpacking and then when we have

1088
00:55:44,480 --> 00:55:50,539
that map into sim space call with the

1089
00:55:47,059 --> 00:55:52,880
sim region that part I don't think I

1090
00:55:50,539 --> 00:55:54,289
want to actually pass the sim region in

1091
00:55:52,880 --> 00:55:56,869
here for any particular reason because

1092
00:55:54,289 --> 00:55:59,869
we don't eat it anymore so what I'd like

1093
00:55:56,869 --> 00:56:01,400
to do is that map into sim space when

1094
00:55:59,869 --> 00:56:02,989
you look at what that's actually doing

1095
00:56:01,400 --> 00:56:09,829
you can see that it's just doing a

1096
00:56:02,989 --> 00:56:12,019
subtract on the the origin right so what

1097
00:56:09,829 --> 00:56:15,590
I'd rather do is I'd rather just have

1098
00:56:12,019 --> 00:56:17,900
that origin this this part here I'd

1099
00:56:15,590 --> 00:56:23,000
rather just have that be something that

1100
00:56:17,900 --> 00:56:25,849
that gets passed in right and so when

1101
00:56:23,000 --> 00:56:26,510
we're doing that I'm sure region is

1102
00:56:25,849 --> 00:56:28,960
unpacked

1103
00:56:26,510 --> 00:56:31,250
I feel like this allows us to

1104
00:56:28,960 --> 00:56:35,119
essentially take that map in the same

1105
00:56:31,250 --> 00:56:38,480
space bit there and just make that

1106
00:56:35,119 --> 00:56:41,809
happen directly so on here we would just

1107
00:56:38,480 --> 00:56:43,670
say all right the chunk position that

1108
00:56:41,809 --> 00:56:45,500
you're talking about

1109
00:56:43,670 --> 00:56:48,139
we're just gonna

1110
00:56:45,500 --> 00:56:52,670
do that subtraction in line here and off

1111
00:56:48,139 --> 00:56:56,750
we go right now the other thing we could

1112
00:56:52,670 --> 00:57:00,220
consider is we again when we're doing

1113
00:56:56,750 --> 00:57:02,659
that that chunk dealt dealt a bit here

1114
00:57:00,219 --> 00:57:04,489
that's the part that we need to add to

1115
00:57:02,659 --> 00:57:07,460
these entities right in order to get

1116
00:57:04,489 --> 00:57:09,379
them centered properly well you know

1117
00:57:07,460 --> 00:57:12,250
what now I look at it okay so we don't

1118
00:57:09,380 --> 00:57:12,250
really want to do that

1119
00:57:20,230 --> 00:57:24,179
we don't really want to do that do we

1120
00:57:32,690 --> 00:57:38,119
because the well yeah I don't know

1121
00:57:45,108 --> 00:57:50,278
so the problem that we have here is the

1122
00:57:47,880 --> 00:57:54,690
world position of entities is it's just

1123
00:57:50,278 --> 00:57:57,028
a vector right and it's stored relative

1124
00:57:54,690 --> 00:57:59,338
to the chunk when it's packed and it's

1125
00:57:57,028 --> 00:58:03,539
but it's considered relative to the sim

1126
00:57:59,338 --> 00:58:05,759
origin when it's not and so I'm not sure

1127
00:58:03,539 --> 00:58:08,190
how to that's the one piece of

1128
00:58:05,760 --> 00:58:10,289
information that's a little bit

1129
00:58:08,190 --> 00:58:14,579
ambiguous as to how you would handle it

1130
00:58:10,289 --> 00:58:20,339
here right because since you on when you

1131
00:58:14,579 --> 00:58:24,539
unpack this the sim region itself is not

1132
00:58:20,338 --> 00:58:28,528
going to know whether someone's position

1133
00:58:24,539 --> 00:58:32,599
has been adjusted yet right so it

1134
00:58:28,528 --> 00:58:32,599
doesn't really know what to do

1135
00:58:38,420 --> 00:58:43,220
it doesn't really know what to do about

1136
00:58:41,068 --> 00:58:43,219
that

1137
00:58:47,349 --> 00:58:55,329
I mean if we're more explicit about this

1138
00:58:52,619 --> 00:59:19,809
then what you'd have to do is something

1139
00:58:55,329 --> 00:59:23,019
more like this so if you look at kind of

1140
00:59:19,809 --> 00:59:25,210
what has to happen if we were to do like

1141
00:59:23,019 --> 00:59:28,570
a literal translation of what would go

1142
00:59:25,210 --> 00:59:33,010
on then you can kind of see it's a bit

1143
00:59:28,570 --> 00:59:37,240
nasty if the entity was already unpacked

1144
00:59:33,010 --> 00:59:40,750
it had a previous simulation center that

1145
00:59:37,239 --> 00:59:43,689
it was stored around and we need to

1146
00:59:40,750 --> 00:59:45,579
update it to the new simulation center

1147
00:59:43,690 --> 00:59:50,200
because the simulation center may have

1148
00:59:45,579 --> 00:59:53,139
moved right but if this entity was

1149
00:59:50,199 --> 00:59:55,389
unpacked fresh then it was stored around

1150
00:59:53,139 --> 00:59:56,889
its chunk in which case the updated

1151
00:59:55,389 --> 01:00:02,319
actually needs is the difference between

1152
00:59:56,889 --> 01:00:04,839
the chunk center and the simulation

1153
01:00:02,320 --> 01:00:11,050
center and that's that that's this chunk

1154
01:00:04,840 --> 01:00:14,230
Delta right and that's like really kind

1155
01:00:11,050 --> 01:00:26,380
of subtle and error-prone you know it

1156
01:00:14,230 --> 01:00:28,990
just doesn't seem it just doesn't seem

1157
01:00:26,380 --> 01:00:32,360
like a good idea to me

1158
01:00:28,989 --> 01:00:32,359
[Music]

1159
01:00:40,940 --> 01:00:47,730
so I kind of feel like as much as I it's

1160
01:00:44,880 --> 01:00:49,710
not my favorite thing in the world it

1161
01:00:47,730 --> 01:01:02,690
seems like it kind of argues for the

1162
01:00:49,710 --> 01:01:02,690
entities to generally look see here

1163
01:01:16,030 --> 01:01:21,650
you know it kind of wants them to know

1164
01:01:18,530 --> 01:01:26,060
what their origin was you know what I

1165
01:01:21,650 --> 01:01:28,760
mean is the is like the sort of least

1166
01:01:26,059 --> 01:01:30,650
error-prone way to do that is anytime I

1167
01:01:28,760 --> 01:01:33,410
update an indie I just store like what

1168
01:01:30,650 --> 01:01:40,010
was its P around and then when you you

1169
01:01:33,409 --> 01:01:41,420
know go to you know start using it at

1170
01:01:40,010 --> 01:01:43,100
the start of simulation you just say

1171
01:01:41,420 --> 01:01:50,889
well I need it to be centered around

1172
01:01:43,099 --> 01:01:50,889
this so is it or isn't it right and

1173
01:02:02,869 --> 01:02:08,289
and I guess I don't know it's not a good

1174
01:02:06,139 --> 01:02:08,289
idea

1175
01:02:20,280 --> 01:02:27,960
it seems very wasteful because you only

1176
01:02:25,179 --> 01:02:30,460
really needed one bit to tell you

1177
01:02:27,960 --> 01:02:32,829
whether this thing was stored relative

1178
01:02:30,460 --> 01:02:44,130
to the previous simulation center which

1179
01:02:32,829 --> 01:02:46,900
you could store as well so let's do this

1180
01:02:44,130 --> 01:02:49,140
here's what I'm gonna say and I don't

1181
01:02:46,900 --> 01:02:52,840
know if this is good or bad but it's

1182
01:02:49,139 --> 01:02:57,339
sort of seems good here's what I'm gonna

1183
01:02:52,840 --> 01:03:03,550
say I'm gonna say there's an unpacked

1184
01:02:57,340 --> 01:03:07,240
origin right and I'm gonna say that the

1185
01:03:03,550 --> 01:03:10,210
this doesn't happen here ever in fact I

1186
01:03:07,239 --> 01:03:14,469
kind of like this I'm at I'm happy with

1187
01:03:10,210 --> 01:03:21,119
this so what we're gonna do is we're

1188
01:03:14,469 --> 01:03:23,699
gonna sort of create a origin update

1189
01:03:21,119 --> 01:03:27,130
which is like when Electronic Arts

1190
01:03:23,699 --> 01:03:29,079
System downloads updates we're gonna

1191
01:03:27,130 --> 01:03:32,980
create an origin update and that's gonna

1192
01:03:29,079 --> 01:03:39,579
be the update that's necessary to take

1193
01:03:32,980 --> 01:03:43,539
the location of the new origin and move

1194
01:03:39,579 --> 01:03:46,179
us from our old origin to there right so

1195
01:03:43,539 --> 01:03:49,349
if we said we're gonna go from the

1196
01:03:46,179 --> 01:03:54,009
previous unpack origin to the new origin

1197
01:03:49,349 --> 01:03:55,089
that gives us the flow or the D unpack

1198
01:03:54,010 --> 01:03:57,520
origin right

1199
01:03:55,090 --> 01:04:00,490
like what's the Delta between those two

1200
01:03:57,519 --> 01:04:02,980
and then I can just go ahead and set the

1201
01:04:00,489 --> 01:04:06,699
world unpack origin to be the new origin

1202
01:04:02,980 --> 01:04:10,030
and then when we go through the entities

1203
01:04:06,699 --> 01:04:12,849
what we can do is during unpack of

1204
01:04:10,030 --> 01:04:17,590
entities we can just add the chunk Delta

1205
01:04:12,849 --> 01:04:19,299
like we were going to write so basically

1206
01:04:17,590 --> 01:04:22,390
we know we're unpacking around the

1207
01:04:19,300 --> 01:04:25,330
unpack origin so it looks like that but

1208
01:04:22,389 --> 01:04:27,250
for any entity that or that existed a

1209
01:04:25,329 --> 01:04:31,358
priority right so that one that was

1210
01:04:27,250 --> 01:04:33,309
there beforehand what I can do is first

1211
01:04:31,358 --> 01:04:36,279
loop over those and update

1212
01:04:33,309 --> 01:04:41,349
those so I'll say all right you know

1213
01:04:36,280 --> 01:04:50,190
entity index from zero to over many we

1214
01:04:41,349 --> 01:04:53,409
have just do that one piece of

1215
01:04:50,190 --> 01:04:58,889
bookkeeping and off we go

1216
01:04:53,409 --> 01:05:03,909
so in here we would say that the

1217
01:04:58,889 --> 01:05:12,429
unpacked entities entity index plus

1218
01:05:03,909 --> 01:05:17,529
equals D unpack origin and and there we

1219
01:05:12,429 --> 01:05:19,629
go that's actually much cleaner I like

1220
01:05:17,530 --> 01:05:23,080
that a lot better so we do one pass over

1221
01:05:19,630 --> 01:05:26,440
the entities to adjust them to the new

1222
01:05:23,079 --> 01:05:28,480
location and then we do it now again I

1223
01:05:26,440 --> 01:05:31,079
don't love having to make all these

1224
01:05:28,480 --> 01:05:35,740
additional passes over to the entities

1225
01:05:31,079 --> 01:05:39,880
it's less good and we could save time by

1226
01:05:35,739 --> 01:05:42,579
not doing that so I I don't love it it

1227
01:05:39,880 --> 01:05:45,640
makes me think that probably we want you

1228
01:05:42,579 --> 01:05:47,380
know this stuff to be done sort of in a

1229
01:05:45,639 --> 01:05:50,349
welded way like this stuff should

1230
01:05:47,380 --> 01:05:53,250
probably be handled in here and this

1231
01:05:50,349 --> 01:05:53,250
stuff cached as well

1232
01:06:16,519 --> 01:06:22,199
you know and it seems like since we're

1233
01:06:20,070 --> 01:06:26,250
doing that loop over the entities there

1234
01:06:22,199 --> 01:06:29,189
you know why wouldn't we just update the

1235
01:06:26,250 --> 01:06:34,949
hash table and all this other stuff you

1236
01:06:29,190 --> 01:06:38,130
know there and I mean I think we just

1237
01:06:34,949 --> 01:06:43,739
should right and so if you look at what

1238
01:06:38,130 --> 01:06:46,829
would happen this call can just happen

1239
01:06:43,739 --> 01:06:48,719
inside this loop and inside this loop

1240
01:06:46,829 --> 01:06:52,079
right so we can have two different calls

1241
01:06:48,719 --> 01:06:54,409
to that same bit of logic that's

1242
01:06:52,079 --> 01:06:56,610
happening here to make this stuff work

1243
01:06:54,409 --> 01:07:00,809
that can just could have just happened

1244
01:06:56,610 --> 01:07:04,530
in here and so you know it kind of

1245
01:07:00,809 --> 01:07:12,840
suggests to me that we I don't know it's

1246
01:07:04,530 --> 01:07:26,930
a little tangled but if we did take the

1247
01:07:12,840 --> 01:07:26,930
sim region here then this piece of code

1248
01:07:36,510 --> 01:07:47,130
it could be called from both places you

1249
01:07:43,860 --> 01:07:48,570
know I'm saying to you so you can see

1250
01:07:47,130 --> 01:07:49,680
why this is a lot more efficient and it

1251
01:07:48,570 --> 01:08:01,380
makes me think I kind of want to

1252
01:07:49,679 --> 01:08:03,869
structure it this way it's it's exactly

1253
01:08:01,380 --> 01:08:08,400
the same code it just doesn't need so

1254
01:08:03,869 --> 01:08:10,739
many loops which it generally means it

1255
01:08:08,400 --> 01:08:12,570
would be better and so then in here we

1256
01:08:10,739 --> 01:08:27,689
just do the same thing the nd gets

1257
01:08:12,570 --> 01:08:29,489
registered in either case that gets us

1258
01:08:27,689 --> 01:08:31,969
out of this business entirely and since

1259
01:08:29,489 --> 01:08:35,329
I want this to go away

1260
01:08:31,970 --> 01:08:40,199
that would just have one clean pass

1261
01:08:35,329 --> 01:08:42,630
where you get everybody registered as

1262
01:08:40,199 --> 01:08:46,858
you sweep through them the first time

1263
01:08:42,630 --> 01:08:50,130
that just seems better so even though

1264
01:08:46,859 --> 01:08:52,289
it's a little tangled I think I prefer

1265
01:08:50,130 --> 01:08:54,239
for now and we can untangle it by

1266
01:08:52,289 --> 01:08:56,880
pulling the sim region apart into two

1267
01:08:54,239 --> 01:08:58,889
pieces if we really wanted to I don't

1268
01:08:56,880 --> 01:09:03,260
think I do want to but you know we could

1269
01:08:58,890 --> 01:09:06,180
write it's certainly possible to do so

1270
01:09:03,260 --> 01:09:08,909
let me take a look at where we're at on

1271
01:09:06,180 --> 01:09:16,760
compilers here this just needs to be

1272
01:09:08,909 --> 01:09:18,358
placed out here in the create world call

1273
01:09:16,760 --> 01:09:21,648
like so

1274
01:09:18,359 --> 01:09:21,648
[Music]

1275
01:09:28,948 --> 01:09:34,500
this no clear doesn't actually need to

1276
01:09:33,059 --> 01:09:37,020
be and no clear

1277
01:09:34,500 --> 01:09:44,338
we can totally clear it now because we

1278
01:09:37,020 --> 01:09:46,940
just allocate that the thing once and

1279
01:09:44,338 --> 01:09:51,059
these have different names that's max

1280
01:09:46,939 --> 01:09:59,428
unpacked entity count that's unpacked

1281
01:09:51,059 --> 01:10:03,449
and accounts and unpacked entities and

1282
01:09:59,429 --> 01:10:05,340
this arena is like this thing which is

1283
01:10:03,448 --> 01:10:06,509
you know wherever we're storing the rest

1284
01:10:05,340 --> 01:10:16,199
of our world garbage

1285
01:10:06,510 --> 01:10:18,929
it's there alright so yeah we got a

1286
01:10:16,198 --> 01:10:21,538
bunch more work to do here but I think

1287
01:10:18,929 --> 01:10:24,679
this is on the right track for doing the

1288
01:10:21,538 --> 01:10:24,679
isolation that I wanted

1289
01:10:31,409 --> 01:10:43,279
this right here needs to be off of the

1290
01:10:35,069 --> 01:10:43,279
world but otherwise that looks fine

1291
01:10:48,380 --> 01:10:52,609
keep forgetting that's called unpacked

1292
01:10:55,069 --> 01:11:02,699
uh and so I think yeah that just leaves

1293
01:10:59,670 --> 01:11:07,170
us with these two operations that we

1294
01:11:02,699 --> 01:11:10,380
were doing and so really the create and

1295
01:11:07,170 --> 01:11:12,440
be call would be exactly the same as

1296
01:11:10,380 --> 01:11:12,440
before

1297
01:11:12,710 --> 01:11:21,480
that's pretty easy to handle both

1298
01:11:17,970 --> 01:11:26,789
creativity and delete entity are just

1299
01:11:21,479 --> 01:11:28,619
fine there and so if the sim region you

1300
01:11:26,789 --> 01:11:31,019
know it's got the world pointer in it

1301
01:11:28,619 --> 01:11:33,180
and so really what these are is they're

1302
01:11:31,020 --> 01:11:34,650
just thunks to the world code because

1303
01:11:33,180 --> 01:11:39,539
the world code is the thing that would

1304
01:11:34,649 --> 01:11:46,859
really be handling this and so I think

1305
01:11:39,539 --> 01:11:49,319
what you want there is just in in this

1306
01:11:46,859 --> 01:11:51,119
case it really doesn't need to do

1307
01:11:49,319 --> 01:11:54,090
anything it doesn't this this is really

1308
01:11:51,119 --> 01:11:56,579
a call on an entity it doesn't need a

1309
01:11:54,090 --> 01:11:58,529
region and probably never will because

1310
01:11:56,579 --> 01:12:00,000
it's just going to to make sure that

1311
01:11:58,529 --> 01:12:02,429
it's marked as deleted but we're not

1312
01:12:00,000 --> 01:12:03,930
actually do anything with it so really

1313
01:12:02,430 --> 01:12:13,800
this is the only call that we're talking

1314
01:12:03,930 --> 01:12:18,480
about here and so it's really just this

1315
01:12:13,800 --> 01:12:20,070
part that we would be forwarding so what

1316
01:12:18,479 --> 01:12:22,919
I'm going to do here is in the world

1317
01:12:20,069 --> 01:12:28,500
code I'm gonna have an internal call

1318
01:12:22,920 --> 01:12:32,880
carrier which is like create entity and

1319
01:12:28,500 --> 01:12:36,479
that's going to be effectively the same

1320
01:12:32,880 --> 01:12:39,930
thing but it's going to just take the

1321
01:12:36,479 --> 01:12:48,119
world's actually and probably nothing

1322
01:12:39,930 --> 01:12:50,789
else so it's going to do this parts like

1323
01:12:48,119 --> 01:12:52,279
that and then it's going to return that

1324
01:12:50,789 --> 01:12:57,340
result

1325
01:12:52,279 --> 01:12:59,689
and so this part here is just a thunk

1326
01:12:57,340 --> 01:13:08,090
it's gonna say I'm getting my entity

1327
01:12:59,689 --> 01:13:09,919
from the world that backs me into that

1328
01:13:08,090 --> 01:13:13,909
be a stretch these days a world that

1329
01:13:09,920 --> 01:13:16,520
backs you so once we get one of those

1330
01:13:13,909 --> 01:13:19,069
then we proceed to assign it an ID which

1331
01:13:16,520 --> 01:13:20,870
is and then add to the hash and that

1332
01:13:19,069 --> 01:13:25,939
stuff is done on the actual sim region

1333
01:13:20,869 --> 01:13:29,689
right so I think that probably takes

1334
01:13:25,939 --> 01:13:33,579
care of all of this this that null

1335
01:13:29,689 --> 01:13:41,769
entity should should be moved to like

1336
01:13:33,579 --> 01:13:41,769
this gonna be oops move to the worlds

1337
01:13:42,939 --> 01:13:51,099
and these just get changed to they're

1338
01:13:47,689 --> 01:13:54,769
unpacked versions because you always add

1339
01:13:51,100 --> 01:13:57,590
unpacked and then pack you don't add

1340
01:13:54,770 --> 01:13:59,240
packed in and unpack right we add to the

1341
01:13:57,590 --> 01:14:09,800
unpacked set and then it gets packed

1342
01:13:59,239 --> 01:14:16,069
down later on okay so now and I guess

1343
01:14:09,800 --> 01:14:17,960
this is fine like that too I'm gonna go

1344
01:14:16,069 --> 01:14:21,670
ahead and make that be just a thing that

1345
01:14:17,960 --> 01:14:21,670
we hang off of ourselves

1346
01:14:30,470 --> 01:14:40,010
and there we go so that should be fine

1347
01:14:40,640 --> 01:15:00,150
and this is all off the world that's

1348
01:14:50,819 --> 01:15:01,920
doesn't matter this is the end world

1349
01:15:00,149 --> 01:15:06,079
change stuff and so that's the last

1350
01:15:01,920 --> 01:15:06,079
thing that we should have to do I think

1351
01:15:09,350 --> 01:15:17,730
and it is so now we have to deal with

1352
01:15:12,989 --> 01:15:20,279
this situation here and so if you look

1353
01:15:17,729 --> 01:15:25,769
at what's happening first we have a map

1354
01:15:20,279 --> 01:15:30,149
into chunk space and sort of doing the

1355
01:15:25,770 --> 01:15:31,890
the the storage of this stuff with the

1356
01:15:30,149 --> 01:15:36,750
exception of the packed reversible

1357
01:15:31,890 --> 01:15:38,400
reference which kind of has to be done

1358
01:15:36,750 --> 01:15:40,680
every frame the other stuff is stuff

1359
01:15:38,399 --> 01:15:45,420
that we only do when we actually pack

1360
01:15:40,680 --> 01:15:50,630
something right um and so if you look I

1361
01:15:45,420 --> 01:15:50,630
don't know what this stuff was for oh

1362
01:15:51,380 --> 01:15:55,800
this was breath testing where the things

1363
01:15:53,670 --> 01:15:57,149
moved I guess this is gonna be out of

1364
01:15:55,800 --> 01:15:58,320
date now so I'm gonna get rid of that

1365
01:15:57,149 --> 01:16:01,409
because we have we would probably have

1366
01:15:58,319 --> 01:16:04,859
to write that again later if we actually

1367
01:16:01,409 --> 01:16:09,239
wanted it so what we want to do now is

1368
01:16:04,859 --> 01:16:16,829
when we actually end when we sort of

1369
01:16:09,239 --> 01:16:19,050
like you know we pack and B's as

1370
01:16:16,829 --> 01:16:21,720
necessary or something like that you

1371
01:16:19,050 --> 01:16:23,789
know what I mean uh we're just gonna

1372
01:16:21,720 --> 01:16:26,520
basically call this and say hey like

1373
01:16:23,789 --> 01:16:30,000
we're gonna repack stuff now by the way

1374
01:16:26,520 --> 01:16:36,300
just so you know you know do whatever

1375
01:16:30,000 --> 01:16:37,770
you want and this here I should time

1376
01:16:36,300 --> 01:16:38,600
both of these functions by the way

1377
01:16:37,770 --> 01:16:43,730
because they are

1378
01:16:38,600 --> 01:16:47,150
doing a lot of work so this guy should

1379
01:16:43,729 --> 01:16:48,829
get one of those as well so when we do

1380
01:16:47,149 --> 01:16:50,779
ensure region is unpacked the

1381
01:16:48,829 --> 01:16:53,000
corresponding thing is repack entities

1382
01:16:50,779 --> 01:16:54,979
that's necessary and that's just going

1383
01:16:53,000 --> 01:16:57,649
to pack stuff up to ensure that we don't

1384
01:16:54,979 --> 01:16:59,419
waste space now again the thing that I

1385
01:16:57,649 --> 01:17:00,979
said that's a little bit Squinkie is

1386
01:16:59,420 --> 01:17:04,789
these packed reversible reference

1387
01:17:00,979 --> 01:17:10,149
nonsenses here and again looking at one

1388
01:17:04,789 --> 01:17:13,510
of those things I'm just not sure I like

1389
01:17:10,149 --> 01:17:26,689
this stuff anyway

1390
01:17:13,510 --> 01:17:33,310
it just looks crappy in general like if

1391
01:17:26,689 --> 01:17:40,369
we have IDs then like just use the ID

1392
01:17:33,310 --> 01:17:42,980
right and and so I just kind of feel

1393
01:17:40,369 --> 01:17:52,340
like we should just use the ID

1394
01:17:42,979 --> 01:17:53,989
everywhere instead and and I feel like

1395
01:17:52,340 --> 01:17:57,980
that just makes this code work better

1396
01:17:53,989 --> 01:17:59,449
and so I kind of want to do that and

1397
01:17:57,979 --> 01:18:01,669
just say that those reversible

1398
01:17:59,449 --> 01:18:05,929
references just have to be by index now

1399
01:18:01,670 --> 01:18:09,380
because there's already you know a call

1400
01:18:05,930 --> 01:18:13,990
that gets that for you and so I don't

1401
01:18:09,380 --> 01:18:13,989
feel like we really need to do that

1402
01:18:18,130 --> 01:18:25,909
it just seems stupid so I may just also

1403
01:18:24,020 --> 01:18:28,820
say that we're going to get rid of that

1404
01:18:25,909 --> 01:18:29,630
I'm not gonna literally get rid of it

1405
01:18:28,819 --> 01:18:32,479
right now

1406
01:18:29,630 --> 01:18:35,659
and the reason for that is just because

1407
01:18:32,479 --> 01:18:39,139
I don't want to introduce more changes

1408
01:18:35,659 --> 01:18:41,689
that I need to in one step so I'm going

1409
01:18:39,140 --> 01:18:44,600
to let it sit just for the briefest

1410
01:18:41,689 --> 01:18:48,069
moment and then we're going to get rid

1411
01:18:44,600 --> 01:18:51,530
of it so what I want to do now is

1412
01:18:48,069 --> 01:18:53,269
instead of judiciously repacking we're

1413
01:18:51,529 --> 01:18:59,869
just going to repack up

1414
01:18:53,270 --> 01:19:02,330
right so this stuff at the moment and

1415
01:18:59,869 --> 01:19:04,550
world change is just gonna call repack

1416
01:19:02,329 --> 01:19:07,010
Kennedy's as necessary on the world and

1417
01:19:04,550 --> 01:19:08,989
all of this stuff is still going to

1418
01:19:07,010 --> 01:19:11,539
happen because all of it can happen

1419
01:19:08,989 --> 01:19:12,920
right so what we're gonna do is we're

1420
01:19:11,539 --> 01:19:18,220
going to go through all of the entities

1421
01:19:12,920 --> 01:19:18,220
that still exist in the worlds like this

1422
01:19:22,659 --> 01:19:33,109
actually that fit today and as we loop

1423
01:19:30,409 --> 01:19:35,840
through them we are going to put them

1424
01:19:33,109 --> 01:19:38,119
away exactly the way that we used to put

1425
01:19:35,840 --> 01:19:40,310
them away and then what we're going to

1426
01:19:38,119 --> 01:19:50,029
do is we're gonna set our nd count to

1427
01:19:40,310 --> 01:19:56,480
zero and that's that right um so I think

1428
01:19:50,029 --> 01:20:00,710
that's really all we need to do that

1429
01:19:56,479 --> 01:20:02,599
could go away and hopefully this will

1430
01:20:00,710 --> 01:20:04,460
sort of work we may have a little bit of

1431
01:20:02,600 --> 01:20:09,500
dignity but hopefully it won't be a huge

1432
01:20:04,460 --> 01:20:11,420
deal when we're doing this remap here to

1433
01:20:09,500 --> 01:20:14,239
remap one of the entities positions into

1434
01:20:11,420 --> 01:20:17,960
chunks based based on an origin again I

1435
01:20:14,239 --> 01:20:19,429
sort of you know presciently although we

1436
01:20:17,960 --> 01:20:21,770
knew what the code was so it wasn't

1437
01:20:19,430 --> 01:20:23,240
prescient that's what compression

1438
01:20:21,770 --> 01:20:24,890
oriented programming lets you do is

1439
01:20:23,239 --> 01:20:29,179
appear like you know everything when you

1440
01:20:24,890 --> 01:20:31,730
take your design because you do I stored

1441
01:20:29,180 --> 01:20:34,670
the unpack origin so we can unpack and

1442
01:20:31,729 --> 01:20:35,269
repack based on that that origin and be

1443
01:20:34,670 --> 01:20:38,569
correct

1444
01:20:35,270 --> 01:20:41,090
right because that is exactly what we

1445
01:20:38,569 --> 01:20:42,710
would expect to have happen here when

1446
01:20:41,090 --> 01:20:45,409
we're doing this packed reversible

1447
01:20:42,710 --> 01:20:48,159
reference stuff we need to know what the

1448
01:20:45,409 --> 01:20:54,559
sim region is because we need to

1449
01:20:48,159 --> 01:20:57,159
actually do we why when you do pack in

1450
01:20:54,560 --> 01:20:57,160
any reference

1451
01:20:58,189 --> 01:21:12,939
where is the same region used so if the

1452
01:21:16,840 --> 01:21:21,880
what is this about

1453
01:21:31,630 --> 01:21:41,510
so if this thing doesn't have a pointer

1454
01:21:35,529 --> 01:21:51,469
but it does store an ID then it says if

1455
01:21:41,510 --> 01:21:53,270
I get a hashed pointer I don't actually

1456
01:21:51,469 --> 01:21:56,408
know what get Hashem ID does let's just

1457
01:21:53,270 --> 01:21:56,409
quickly take it look at that

1458
01:22:07,488 --> 01:22:23,328
so it's saying if there was a lane 4th

1459
01:22:17,599 --> 01:22:23,328
this thing what

1460
01:22:40,239 --> 01:22:44,429
I don't quite understand what this was

1461
01:22:41,800 --> 01:22:44,430
meant to do

1462
01:22:51,640 --> 01:22:59,570
hmm we're basically trying to zero out a

1463
01:22:56,869 --> 01:23:08,359
reference to something and we're trying

1464
01:22:59,569 --> 01:23:10,849
to zero it out in the circumstance oh I

1465
01:23:08,359 --> 01:23:13,069
see what this is trying to do it's

1466
01:23:10,850 --> 01:23:17,239
trying to say if someone zeroed out the

1467
01:23:13,069 --> 01:23:20,210
pointer they're trying to tell us that

1468
01:23:17,238 --> 01:23:20,629
yeah okay so you can see this this just

1469
01:23:20,210 --> 01:23:24,310
sucks

1470
01:23:20,630 --> 01:23:27,500
so yeah we definitely don't want this

1471
01:23:24,310 --> 01:23:28,700
right it's just bad because look at all

1472
01:23:27,500 --> 01:23:31,630
this garbage you have to go through

1473
01:23:28,699 --> 01:23:35,389
because if you if you just set the index

1474
01:23:31,630 --> 01:23:37,840
to zero instead setting the pointer to

1475
01:23:35,390 --> 01:23:40,520
zero here we have to do this extra work

1476
01:23:37,840 --> 01:23:41,960
to determine that that meant you were

1477
01:23:40,520 --> 01:23:43,250
clearing it and not that it was a

1478
01:23:41,960 --> 01:23:44,989
reference to something that isn't

1479
01:23:43,250 --> 01:23:51,859
unpacked in the same region right now

1480
01:23:44,988 --> 01:23:58,238
right yes so that's just stupid

1481
01:23:51,859 --> 01:24:03,679
I don't like anything about that at all

1482
01:23:58,238 --> 01:24:05,869
that's just bad that's just bad in

1483
01:24:03,680 --> 01:24:07,400
general so that yeah I mean this is just

1484
01:24:05,869 --> 01:24:13,039
further reason why we want to get rid of

1485
01:24:07,399 --> 01:24:22,460
this code so sure for now what we're

1486
01:24:13,039 --> 01:24:24,019
gonna do is let's just say that the

1487
01:24:22,460 --> 01:24:27,529
region gets passed as zero and we'll

1488
01:24:24,020 --> 01:24:29,750
deal with the bugs from that at the

1489
01:24:27,529 --> 01:24:32,059
moment and then we're just gonna get rid

1490
01:24:29,750 --> 01:24:37,779
of this this is gonna go away completely

1491
01:24:32,060 --> 01:24:44,690
cuz I don't like it and it's bad alright

1492
01:24:37,779 --> 01:24:47,960
let's see what else we got here this is

1493
01:24:44,689 --> 01:24:50,379
not found pet reverse-flow reference so

1494
01:24:47,960 --> 01:24:53,380
we'll just kind of make it found here

1495
01:24:50,380 --> 01:24:53,380
temporarily

1496
01:24:56,970 --> 01:25:03,789
all right and that just leaves us with

1497
01:25:00,850 --> 01:25:05,470
this which is a really simple thing we

1498
01:25:03,789 --> 01:25:07,810
had to implement here where you loop

1499
01:25:05,470 --> 01:25:10,000
over the hash table which is really

1500
01:25:07,810 --> 01:25:14,770
pretty straightforward but let's go

1501
01:25:10,000 --> 01:25:17,439
ahead and implement that so really all

1502
01:25:14,770 --> 01:25:20,130
we need here is just some way of knowing

1503
01:25:17,439 --> 01:25:24,189
what we were actually iterating over and

1504
01:25:20,130 --> 01:25:27,130
if you look at the way this works the

1505
01:25:24,189 --> 01:25:30,250
entity hash table is an internally

1506
01:25:27,130 --> 01:25:32,760
chained hash table so just looping over

1507
01:25:30,250 --> 01:25:35,920
it is sufficient as far as I can tell to

1508
01:25:32,760 --> 01:25:37,390
visit all of the entities because if you

1509
01:25:35,920 --> 01:25:38,829
look inside the entity structure itself

1510
01:25:37,390 --> 01:25:43,300
we don't have like a hidden pointer

1511
01:25:38,829 --> 01:25:44,979
there that change these things as far as

1512
01:25:43,300 --> 01:25:51,909
I can tell right there isn't like a

1513
01:25:44,979 --> 01:25:53,529
entity star yet so that there is no way

1514
01:25:51,909 --> 01:25:56,229
to change these together so basically

1515
01:25:53,529 --> 01:25:59,319
looping over the hash table all we're

1516
01:25:56,229 --> 01:26:02,439
gonna need for storage here is the hash

1517
01:25:59,319 --> 01:26:05,469
index and so when you do iterate all

1518
01:26:02,439 --> 01:26:06,729
entities all we have to do here is say

1519
01:26:05,470 --> 01:26:09,990
well I guess we need one more thing

1520
01:26:06,729 --> 01:26:09,989
which is the point of a sim region

1521
01:26:14,729 --> 01:26:22,659
although I suppose we don't really even

1522
01:26:17,560 --> 01:26:30,010
need that per se I mean we could just do

1523
01:26:22,659 --> 01:26:36,639
this right and maybe that makes more

1524
01:26:30,010 --> 01:26:39,030
sense that's it all right

1525
01:26:36,640 --> 01:26:39,030
fine

1526
01:26:43,988 --> 01:26:46,869
let's just say it's that I don't know I

1527
01:26:45,699 --> 01:26:47,949
don't think about too hard because I

1528
01:26:46,869 --> 01:26:50,829
don't really care about this piece of

1529
01:26:47,949 --> 01:26:54,488
the code all right so we're gonna make a

1530
01:26:50,829 --> 01:26:57,488
iterator here and this iterator needs to

1531
01:26:54,488 --> 01:26:59,799
store the sim region it needs to store

1532
01:26:57,488 --> 01:27:01,359
the entity that we're pointing at and it

1533
01:26:59,800 --> 01:27:06,100
needs to store the hash index that we're

1534
01:27:01,359 --> 01:27:07,929
at right and so in each one of these

1535
01:27:06,100 --> 01:27:09,700
cases we sort of need a little helper

1536
01:27:07,930 --> 01:27:11,980
function here oops

1537
01:27:09,699 --> 01:27:14,559
and we'll talk about that in a second

1538
01:27:11,979 --> 01:27:16,089
but effectively what we're doing don't

1539
01:27:14,560 --> 01:27:19,210
ask me why these didn't have internal

1540
01:27:16,090 --> 01:27:21,810
before them just because they didn't I

1541
01:27:19,210 --> 01:27:25,000
guess in here we're doing the same thing

1542
01:27:21,810 --> 01:27:30,010
we're just gonna bump the hash index

1543
01:27:25,000 --> 01:27:31,479
here right and so in each of these cases

1544
01:27:30,010 --> 01:27:36,900
what we need to do is scan the hash

1545
01:27:31,479 --> 01:27:39,939
table for the first time that we see a

1546
01:27:36,899 --> 01:27:42,819
for the first time that we see one of

1547
01:27:39,939 --> 01:27:45,429
these filled one of the hash table slots

1548
01:27:42,819 --> 01:27:48,849
filled with an actual pointer and so we

1549
01:27:45,430 --> 01:27:51,310
need like find next entity or something

1550
01:27:48,850 --> 01:27:53,950
like that right that's gonna take one of

1551
01:27:51,310 --> 01:27:56,140
these things and find it so we first

1552
01:27:53,949 --> 01:27:59,039
started to 0 then we say fine next

1553
01:27:56,140 --> 01:28:01,989
entity and we say you know go go to town

1554
01:27:59,039 --> 01:28:05,609
here we would increment it right and

1555
01:28:01,988 --> 01:28:08,729
then say fine next entity to go to town

1556
01:28:05,609 --> 01:28:11,079
I think that's all we really need to do

1557
01:28:08,729 --> 01:28:12,639
here I would like to assert that there

1558
01:28:11,079 --> 01:28:14,289
is one because you should never call

1559
01:28:12,640 --> 01:28:15,730
this function if you're the if with an

1560
01:28:14,289 --> 01:28:20,079
invalid iterator I just want that to be

1561
01:28:15,729 --> 01:28:22,209
an error for now and so here where we do

1562
01:28:20,079 --> 01:28:25,059
find next entity we just need to scan

1563
01:28:22,210 --> 01:28:29,230
through the hash table looking for a

1564
01:28:25,060 --> 01:28:31,289
valid one right I'm also gonna start out

1565
01:28:29,229 --> 01:28:33,819
by making this equal to 0 just in case

1566
01:28:31,289 --> 01:28:36,609
well no you know what no I'm not I'm

1567
01:28:33,819 --> 01:28:38,500
going to do that actually here so we'll

1568
01:28:36,609 --> 01:28:43,599
start by assuming that we couldn't find

1569
01:28:38,500 --> 01:28:46,238
one we're then gonna loop through all of

1570
01:28:43,600 --> 01:28:52,380
these by saying start at the hash index

1571
01:28:46,238 --> 01:28:52,379
that we're on go until the sim region

1572
01:28:52,949 --> 01:28:59,319
was it

1573
01:28:55,060 --> 01:29:01,960
- go until the end of that table looking

1574
01:28:59,319 --> 01:29:05,340
for one and then well we don't have to

1575
01:29:01,960 --> 01:29:07,720
do return anything and then return so

1576
01:29:05,340 --> 01:29:09,369
since we know this already starts here

1577
01:29:07,720 --> 01:29:11,110
and this is the actual thing that we

1578
01:29:09,369 --> 01:29:13,210
want to increment I can also just

1579
01:29:11,109 --> 01:29:16,319
instead turn this into a while loop that

1580
01:29:13,210 --> 01:29:16,319
kind of just looks more like this right

1581
01:29:18,930 --> 01:29:25,570
and so this way we can just loop through

1582
01:29:22,750 --> 01:29:27,399
these incrementing as we go and all we

1583
01:29:25,569 --> 01:29:33,549
have to do is say look if the entity

1584
01:29:27,399 --> 01:29:38,920
hash that's at this location actually

1585
01:29:33,550 --> 01:29:43,779
contains something we want to stop right

1586
01:29:38,920 --> 01:29:46,300
and furthermore this pointer here is the

1587
01:29:43,779 --> 01:29:53,649
actual pointer we want so we can say

1588
01:29:46,300 --> 01:29:55,840
this and remember it which is what we

1589
01:29:53,649 --> 01:29:57,670
want as well I think that's all we

1590
01:29:55,840 --> 01:29:59,260
really need to do to iterate over all of

1591
01:29:57,670 --> 01:30:00,279
these but we can double check that by

1592
01:29:59,260 --> 01:30:03,670
stepping through it in debug or make

1593
01:30:00,279 --> 01:30:06,279
sure we didn't forget something okay

1594
01:30:03,670 --> 01:30:08,770
that's supposed to be an arrow because

1595
01:30:06,279 --> 01:30:11,409
this is a pointer so I'm not sure why I

1596
01:30:08,770 --> 01:30:14,050
wrote it as a dot that's just the way it

1597
01:30:11,409 --> 01:30:17,619
goes sometimes and also obviously this

1598
01:30:14,050 --> 01:30:20,980
needs to return the thing that we

1599
01:30:17,619 --> 01:30:25,359
actually made okay I think that's

1600
01:30:20,979 --> 01:30:26,409
everything this is the actual hash index

1601
01:30:25,359 --> 01:30:31,319
of the iterator that we're incrementing

1602
01:30:26,409 --> 01:30:36,430
there and off we go

1603
01:30:31,319 --> 01:30:39,549
yes so now it comes down to debugging we

1604
01:30:36,430 --> 01:30:42,340
need to actually make this stuff work so

1605
01:30:39,550 --> 01:30:46,420
let's get started on that I probably

1606
01:30:42,340 --> 01:30:49,569
want to make this easier on myself I'm

1607
01:30:46,420 --> 01:30:51,460
gonna go turn this into debug mode so

1608
01:30:49,569 --> 01:30:55,000
that we don't have to do too much work

1609
01:30:51,460 --> 01:30:59,350
to decrypt what Visual Studio well what

1610
01:30:55,000 --> 01:31:01,569
the PDB is telling us so let's go ahead

1611
01:30:59,350 --> 01:31:03,280
and get that going here where we do

1612
01:31:01,569 --> 01:31:05,739
let's see where we are in the call stack

1613
01:31:03,279 --> 01:31:07,750
first of all so we have some idea what's

1614
01:31:05,739 --> 01:31:08,769
going on you can see in here we're in

1615
01:31:07,750 --> 01:31:11,350
begin sim

1616
01:31:08,770 --> 01:31:13,450
we're looking for our entity this way it

1617
01:31:11,350 --> 01:31:14,680
looks like maybe we didn't when we did

1618
01:31:13,449 --> 01:31:16,239
our unpack we didn't like hash

1619
01:31:14,680 --> 01:31:19,000
everything that we should have hashed or

1620
01:31:16,239 --> 01:31:21,699
something right so let's just take a

1621
01:31:19,000 --> 01:31:24,310
look at what's going on in here oh well

1622
01:31:21,699 --> 01:31:26,289
actually you can see that we just forgot

1623
01:31:24,310 --> 01:31:33,039
to call the function so that's that's

1624
01:31:26,289 --> 01:31:34,479
what's so we have to actually call our

1625
01:31:33,039 --> 01:31:36,310
functions if we want them to do things

1626
01:31:34,479 --> 01:31:37,269
that's the first rule of programming

1627
01:31:36,310 --> 01:31:38,770
they have to actually call your

1628
01:31:37,270 --> 01:31:42,400
functions if you want them to execute

1629
01:31:38,770 --> 01:31:44,710
just thought I would let all of you

1630
01:31:42,399 --> 01:31:47,679
novice programmers in on a really big

1631
01:31:44,710 --> 01:31:49,420
secret that those of us have been in the

1632
01:31:47,680 --> 01:31:51,820
industry for a while have learned it's

1633
01:31:49,420 --> 01:31:54,460
like a really you know closely guarded

1634
01:31:51,819 --> 01:31:57,069
secret if you don't call a function it

1635
01:31:54,460 --> 01:31:59,380
doesn't do anything that's a that's a

1636
01:31:57,069 --> 01:32:00,549
big one you know some of you may not

1637
01:31:59,380 --> 01:32:03,789
understand what I'm talking about there

1638
01:32:00,550 --> 01:32:06,070
I know it's pretty advanced stuff but

1639
01:32:03,789 --> 01:32:06,670
that's actually you know if you think

1640
01:32:06,069 --> 01:32:10,109
about it

1641
01:32:06,670 --> 01:32:12,850
that's actually what happens shockingly

1642
01:32:10,109 --> 01:32:15,189
all right so let's get this going like

1643
01:32:12,850 --> 01:32:17,410
that and now let's try to plug it

1644
01:32:15,189 --> 01:32:18,969
because can't really debug code that

1645
01:32:17,409 --> 01:32:21,189
doesn't get called other than to say

1646
01:32:18,970 --> 01:32:23,850
that it should have been called all

1647
01:32:21,189 --> 01:32:26,829
right now we're getting somewhere

1648
01:32:23,850 --> 01:32:28,480
okay so first of all what we're seeing

1649
01:32:26,829 --> 01:32:35,010
curious we're blowing out our entity

1650
01:32:28,479 --> 01:32:35,009
counts so the oh wait what sim region

1651
01:32:35,909 --> 01:32:44,349
did we forget - oh all right sorry we

1652
01:32:40,210 --> 01:32:46,000
forgot to delete some code as well we're

1653
01:32:44,350 --> 01:32:50,190
not quite done that needs to go away

1654
01:32:46,000 --> 01:32:52,359
entirely and we need to change that that

1655
01:32:50,189 --> 01:32:55,529
reference to it this is supposed to be

1656
01:32:52,359 --> 01:32:55,529
world unpacked

1657
01:32:56,460 --> 01:33:02,020
unpacked entity account and this is

1658
01:32:59,649 --> 01:33:10,689
supposed to be world max unpacked

1659
01:33:02,020 --> 01:33:12,700
account see what else we got there and

1660
01:33:10,689 --> 01:33:16,299
this debug value here where we do the

1661
01:33:12,699 --> 01:33:18,220
entity count I suppose we can do that at

1662
01:33:16,300 --> 01:33:18,909
the end of this where we just say what

1663
01:33:18,220 --> 01:33:21,010
the entity can

1664
01:33:18,909 --> 01:33:24,689
currently is running of the or what the

1665
01:33:21,010 --> 01:33:29,710
unpacked end account if the world is I

1666
01:33:24,689 --> 01:33:38,500
guess it's fine all right back to the

1667
01:33:29,710 --> 01:33:42,220
bugging what else we got so it looks

1668
01:33:38,500 --> 01:33:44,649
like here we did blow out this number

1669
01:33:42,220 --> 01:33:48,420
I'm curious here though let me just make

1670
01:33:44,649 --> 01:33:50,679
sure we're not still on our kind of

1671
01:33:48,420 --> 01:33:57,880
junior programmer streak here of

1672
01:33:50,680 --> 01:33:59,710
forgetting to call our functions no so

1673
01:33:57,880 --> 01:34:02,529
we are actually thankfully calling

1674
01:33:59,710 --> 01:34:06,449
repack entities as necessary I was a

1675
01:34:02,529 --> 01:34:10,269
little bit worried there that we weren't

1676
01:34:06,449 --> 01:34:13,239
so yeah off we go and at the end of this

1677
01:34:10,270 --> 01:34:16,180
we are correctly zeroing our unpacked

1678
01:34:13,239 --> 01:34:18,569
entity count which should mean that we

1679
01:34:16,180 --> 01:34:21,039
can do this as many times we want and so

1680
01:34:18,569 --> 01:34:28,840
when we're going through and doing this

1681
01:34:21,039 --> 01:34:30,640
I think if I'm not mistaken yeah I think

1682
01:34:28,840 --> 01:34:37,029
if I'm not mistaken that this should be

1683
01:34:30,640 --> 01:34:40,270
a real check now and it should have

1684
01:34:37,029 --> 01:34:43,269
gotten initialized properly right yeah

1685
01:34:40,270 --> 01:34:44,770
so I think that's all okay so let's

1686
01:34:43,270 --> 01:34:46,930
actually start debugging this that that

1687
01:34:44,770 --> 01:34:53,080
looks like that is now an actual valid

1688
01:34:46,930 --> 01:34:57,789
error hopefully we'll see but let's see

1689
01:34:53,079 --> 01:35:01,449
what's going on alright so I'm going to

1690
01:34:57,789 --> 01:35:05,079
check the world here and it's at least

1691
01:35:01,449 --> 01:35:07,569
correctly like barfing on this right so

1692
01:35:05,079 --> 01:35:12,130
that's good let's see where we're at in

1693
01:35:07,569 --> 01:35:14,380
our we're coming in here to our inshore

1694
01:35:12,130 --> 01:35:17,619
region is unpacked call with our min and

1695
01:35:14,380 --> 01:35:21,699
Max chunks there and one thing I would

1696
01:35:17,619 --> 01:35:23,829
like to do is let's let's just look at

1697
01:35:21,699 --> 01:35:25,179
what happens to the world itself as we

1698
01:35:23,829 --> 01:35:26,649
come through these calls I just want to

1699
01:35:25,180 --> 01:35:30,579
make sure this is generally working at

1700
01:35:26,649 --> 01:35:32,529
all so here is us trying to unpack one

1701
01:35:30,579 --> 01:35:37,210
min max chunk here right

1702
01:35:32,529 --> 01:35:40,090
I and it looked like that literally

1703
01:35:37,210 --> 01:35:49,750
unpacked nothing coming back through

1704
01:35:40,090 --> 01:35:52,180
here we got 90 109 and see us unpacking

1705
01:35:49,750 --> 01:35:57,399
various regions so that seems to be

1706
01:35:52,180 --> 01:35:59,500
working fairly well so far right so I'm

1707
01:35:57,399 --> 01:36:01,299
not sure which what we're getting in

1708
01:35:59,500 --> 01:36:03,159
terms of bugs here and in terms of the

1709
01:36:01,300 --> 01:36:16,180
call stack this is all inside the world

1710
01:36:03,159 --> 01:36:18,340
generation right you know what I might

1711
01:36:16,180 --> 01:36:21,990
want to do to let me do one more thing

1712
01:36:18,340 --> 01:36:25,360
that we've I think we've never actually

1713
01:36:21,989 --> 01:36:27,760
done we add one more thing to before I

1714
01:36:25,359 --> 01:36:31,509
get too deep into debugging that I that

1715
01:36:27,760 --> 01:36:34,300
I would like to have we want to make

1716
01:36:31,510 --> 01:36:36,699
sure you can only unpack once before you

1717
01:36:34,300 --> 01:36:45,159
at least call to say that you want check

1718
01:36:36,699 --> 01:36:47,979
for repacking so so I want like a thing

1719
01:36:45,159 --> 01:36:52,809
called unpack is open here that when you

1720
01:36:47,979 --> 01:36:57,189
call unpack we set and then when you

1721
01:36:52,810 --> 01:37:00,700
call repack we unset so like in here I

1722
01:36:57,189 --> 01:37:03,729
want to say that you've opened up your

1723
01:37:00,699 --> 01:37:06,039
unpack and then in here where we do

1724
01:37:03,729 --> 01:37:12,669
repack I want to say okay you've closed

1725
01:37:06,039 --> 01:37:15,279
it right and so when you call this I'd

1726
01:37:12,670 --> 01:37:17,980
like to assert that the unpack is open

1727
01:37:15,279 --> 01:37:21,550
although technically that's really not

1728
01:37:17,979 --> 01:37:23,289
the part I care about what I care more

1729
01:37:21,550 --> 01:37:25,779
about because you could call this as

1730
01:37:23,289 --> 01:37:28,029
many times you wanted so that's really

1731
01:37:25,779 --> 01:37:30,039
not the issue what I want to avoid is

1732
01:37:28,029 --> 01:37:33,369
multiple people calling this before they

1733
01:37:30,039 --> 01:37:35,619
call the other one right so what I want

1734
01:37:33,369 --> 01:37:38,409
to do here is assert that it's not open

1735
01:37:35,619 --> 01:37:39,819
before you open it and then here I want

1736
01:37:38,409 --> 01:37:44,979
to assert that it is open before you

1737
01:37:39,819 --> 01:37:46,359
close it just for the moment right and I

1738
01:37:44,979 --> 01:37:48,699
want to make sure that there are no

1739
01:37:46,359 --> 01:37:51,549
balance calls but otherwise I think

1740
01:37:48,699 --> 01:37:53,590
we're okay so let's take a look at where

1741
01:37:51,550 --> 01:37:55,060
we're at here unfortunately it's a

1742
01:37:53,590 --> 01:37:56,880
little bit behind my head but that's

1743
01:37:55,060 --> 01:38:00,370
okay

1744
01:37:56,880 --> 01:38:03,340
so if we look in here it looks like

1745
01:38:00,369 --> 01:38:06,099
we're actually in the simulation part of

1746
01:38:03,340 --> 01:38:07,930
things now and so what I'm wondering is

1747
01:38:06,100 --> 01:38:09,670
just the first time that we're

1748
01:38:07,930 --> 01:38:22,390
simulating something let's see if that's

1749
01:38:09,670 --> 01:38:24,760
true so for whatever reason and I'm not

1750
01:38:22,390 --> 01:38:28,090
sure how we introduced this error

1751
01:38:24,760 --> 01:38:36,550
exactly but for whatever reason we seem

1752
01:38:28,090 --> 01:38:39,640
to introduce an error we're generating

1753
01:38:36,550 --> 01:38:42,010
our world doesn't cause a problem for

1754
01:38:39,640 --> 01:38:45,160
packing and unpacking it all seems to

1755
01:38:42,010 --> 01:38:53,680
work but when we go to actually do our

1756
01:38:45,159 --> 01:38:55,869
first simulation that does fail right

1757
01:38:53,680 --> 01:38:57,670
uh and who knows why right we have no

1758
01:38:55,869 --> 01:39:04,659
idea why but we're going to have to

1759
01:38:57,670 --> 01:39:07,960
figure it out right so looking at this

1760
01:39:04,659 --> 01:39:12,519
particular part of the code as we come

1761
01:39:07,960 --> 01:39:15,970
in here right if we look at the world it

1762
01:39:12,520 --> 01:39:17,620
is correctly re initialized right so it

1763
01:39:15,970 --> 01:39:20,530
doesn't think that anything's unpacked

1764
01:39:17,619 --> 01:39:24,269
and so when we come in here what we're

1765
01:39:20,529 --> 01:39:24,269
saying is that we effectively get

1766
01:39:33,119 --> 01:39:43,059
when asking for this region which is not

1767
01:39:39,760 --> 01:39:46,659
exceedingly large right that's totally

1768
01:39:43,060 --> 01:39:50,440
reasonable it's not some weird crazy

1769
01:39:46,659 --> 01:39:54,729
like number that doesn't make any sense

1770
01:39:50,439 --> 01:39:56,469
when we go to unpack this this obviously

1771
01:39:54,729 --> 01:39:59,019
should never execute currently because

1772
01:39:56,470 --> 01:40:05,619
there is no time when these things are

1773
01:39:59,020 --> 01:40:08,200
actually stored there this part

1774
01:40:05,619 --> 01:40:16,930
supposedly just unpacks like infinity

1775
01:40:08,199 --> 01:40:23,649
items let's skip to like maybe here or

1776
01:40:16,930 --> 01:40:30,220
something so how many entities are in

1777
01:40:23,649 --> 01:40:32,939
this block three hardly going to break

1778
01:40:30,220 --> 01:40:32,940
the bank there

1779
01:40:44,760 --> 01:40:50,220
so is it pulse

1780
01:40:46,659 --> 01:40:50,220
are we getting like some kind of a

1781
01:40:54,489 --> 01:40:58,579
what's going on here are we getting some

1782
01:40:56,720 --> 01:41:04,100
kind of like an infinite looping chain

1783
01:40:58,579 --> 01:41:10,159
or something it would be nice to be able

1784
01:41:04,100 --> 01:41:12,740
to tell if that were the case here's one

1785
01:41:10,159 --> 01:41:17,750
of the thing I'm gonna do just as a

1786
01:41:12,739 --> 01:41:20,029
check so in here where we do this sort

1787
01:41:17,750 --> 01:41:21,649
of like first block block next sort of

1788
01:41:20,029 --> 01:41:24,679
thing so you know we're pulling this

1789
01:41:21,649 --> 01:41:26,420
stuff off of the set where we remove

1790
01:41:24,680 --> 01:41:30,200
this chunk and now we're gonna like do a

1791
01:41:26,420 --> 01:41:36,130
bunch of garbage with it right what I

1792
01:41:30,199 --> 01:41:36,130
want to do is I want to

1793
01:41:44,390 --> 01:41:50,150
I want to check to make sure that this

1794
01:41:47,270 --> 01:41:53,690
isn't like an infinite loop and so the

1795
01:41:50,149 --> 01:42:02,449
way to do that although this isn't quite

1796
01:41:53,689 --> 01:42:05,779
good enough is I'm going to assert I'm

1797
01:42:02,449 --> 01:42:11,809
gonna create like a synthetic checker

1798
01:42:05,779 --> 01:42:13,699
here right and what I'm going to do is

1799
01:42:11,810 --> 01:42:17,840
I'm gonna cert that my check block is

1800
01:42:13,699 --> 01:42:21,109
never equal to my block right and what I

1801
01:42:17,840 --> 01:42:23,449
want to do is I know this is ridiculous

1802
01:42:21,109 --> 01:42:28,149
well we'll sort of talk about what this

1803
01:42:23,449 --> 01:42:31,399
is well I'll just talk about right now

1804
01:42:28,149 --> 01:42:34,219
so suppose I want to look to find out if

1805
01:42:31,399 --> 01:42:38,960
this linked list has a repeat summer in

1806
01:42:34,220 --> 01:42:40,760
it so if the entire list repeated then

1807
01:42:38,960 --> 01:42:44,449
it would be sufficient for me to just

1808
01:42:40,760 --> 01:42:46,640
take the first pointer to something or

1809
01:42:44,449 --> 01:42:52,489
really any pointer to anything in the

1810
01:42:46,640 --> 01:42:54,380
entire list right and assert as I'll it

1811
01:42:52,489 --> 01:43:01,210
loop through the list that I don't hit

1812
01:42:54,380 --> 01:43:06,350
it right because as long as I never as

1813
01:43:01,210 --> 01:43:08,539
long as I don't hit that one I know that

1814
01:43:06,350 --> 01:43:11,660
the entire list doesn't loop around

1815
01:43:08,539 --> 01:43:14,470
right and I can't really do it here the

1816
01:43:11,659 --> 01:43:19,039
first time right I would have to do it

1817
01:43:14,470 --> 01:43:20,750
one past the first time look I need a

1818
01:43:19,039 --> 01:43:22,130
counter which is what I was I was about

1819
01:43:20,750 --> 01:43:25,119
to do but there's another reason I'll do

1820
01:43:22,130 --> 01:43:25,119
it but we'll see this

1821
01:43:36,670 --> 01:44:00,350
we really want this so what I'm trying

1822
01:43:58,579 --> 01:44:02,960
to do here is basically say all right so

1823
01:44:00,350 --> 01:44:04,670
suppose I have I want to check to make

1824
01:44:02,960 --> 01:44:06,050
sure that this thing doesn't contain any

1825
01:44:04,670 --> 01:44:08,180
cycles well this is gonna loop through

1826
01:44:06,050 --> 01:44:10,760
the entire list and if there was if the

1827
01:44:08,180 --> 01:44:11,960
entire list was just a circular list so

1828
01:44:10,760 --> 01:44:14,510
I'm just running around in circles and

1829
01:44:11,960 --> 01:44:16,460
I'll never terminate then I can just

1830
01:44:14,510 --> 01:44:19,220
check to see if I hit any one of these

1831
01:44:16,460 --> 01:44:21,199
blocks more than once so the easiest way

1832
01:44:19,220 --> 01:44:23,960
to do that is to just say well the first

1833
01:44:21,199 --> 01:44:25,909
time through I don't want to assert

1834
01:44:23,960 --> 01:44:29,300
because obviously I'm gonna process that

1835
01:44:25,909 --> 01:44:31,010
first block but every time thereafter I

1836
01:44:29,300 --> 01:44:32,329
could just check to see like set it

1837
01:44:31,010 --> 01:44:33,739
equal the first block and check to see

1838
01:44:32,329 --> 01:44:38,539
whether they're equal at that point

1839
01:44:33,739 --> 01:44:41,059
right and that would work but what I

1840
01:44:38,539 --> 01:44:42,769
want to add is another case here and the

1841
01:44:41,060 --> 01:44:45,289
reason for that is suppose the linked

1842
01:44:42,770 --> 01:44:48,620
list was like a list of like 50 things

1843
01:44:45,289 --> 01:44:51,140
and then just the last like four of them

1844
01:44:48,619 --> 01:44:53,689
were in a cycle right so there's a bunch

1845
01:44:51,140 --> 01:44:57,170
and then there's a cycle at the very end

1846
01:44:53,689 --> 01:45:01,429
right well what I'd like to do is be

1847
01:44:57,170 --> 01:45:04,310
able to find that cycle at that at that

1848
01:45:01,430 --> 01:45:07,220
tail as well and so the way I wanted to

1849
01:45:04,310 --> 01:45:11,000
do that would just say look if every

1850
01:45:07,220 --> 01:45:13,340
second time I move my main pointer I

1851
01:45:11,000 --> 01:45:16,340
move if I have like another pointer that

1852
01:45:13,340 --> 01:45:18,529
moves half as fast no matter where the

1853
01:45:16,340 --> 01:45:25,010
cycle is in the chain eventually I'll

1854
01:45:18,529 --> 01:45:27,189
it'll catch up right eventually so I

1855
01:45:25,010 --> 01:45:30,860
should be able to do something like this

1856
01:45:27,189 --> 01:45:35,599
and I could make this really any number

1857
01:45:30,859 --> 01:45:38,239
I wanted this could be 5 10 100 doesn't

1858
01:45:35,600 --> 01:45:39,740
matter and so all I really want to do

1859
01:45:38,239 --> 01:45:42,289
there was like check to see if there

1860
01:45:39,739 --> 01:45:43,849
were cycles and that's

1861
01:45:42,289 --> 01:45:45,920
way to do it's not a very good way

1862
01:45:43,850 --> 01:45:49,460
necessarily but it is a way to do it

1863
01:45:45,920 --> 01:45:51,409
right and so I was just curious if we

1864
01:45:49,460 --> 01:45:52,640
found any cycles I don't know that

1865
01:45:51,409 --> 01:45:54,500
that's actually what's happening here

1866
01:45:52,640 --> 01:45:56,119
but I'm just curious to know so we

1867
01:45:54,500 --> 01:45:57,439
didn't see any there I think I wrote

1868
01:45:56,119 --> 01:46:05,029
that code correctly but it's a little

1869
01:45:57,439 --> 01:46:10,819
bit subtle to be fair also that supposed

1870
01:46:05,029 --> 01:46:13,090
to be outside technically I guess could

1871
01:46:10,819 --> 01:46:13,090
be there

1872
01:46:22,979 --> 01:46:28,469
alright so assuming I wrote that code

1873
01:46:26,309 --> 01:46:29,909
properly then we didn't have a cycle in

1874
01:46:28,469 --> 01:46:32,429
there and it looks like I did right

1875
01:46:29,908 --> 01:46:36,629
we're decrement in the counter if it

1876
01:46:32,429 --> 01:46:46,529
equals zero then we advance our check

1877
01:46:36,630 --> 01:46:48,889
block and reset the counter OOP nope one

1878
01:46:46,529 --> 01:46:48,889
more time

1879
01:46:58,679 --> 01:47:01,699
all right

1880
01:47:01,760 --> 01:47:05,390
so let's say I checked that properly but

1881
01:47:04,340 --> 01:47:06,980
let's be honest I didn't do a

1882
01:47:05,390 --> 01:47:09,200
particularly thorough job there but

1883
01:47:06,979 --> 01:47:11,089
let's just say that we assume that we

1884
01:47:09,199 --> 01:47:12,920
don't have any cycles and I the reason

1885
01:47:11,090 --> 01:47:14,960
I'm kind of only vaguely checking for

1886
01:47:12,920 --> 01:47:16,039
that is because I'm not sure what we

1887
01:47:14,960 --> 01:47:19,340
could have done that would have added

1888
01:47:16,039 --> 01:47:21,399
cycles so I suspect if we did do

1889
01:47:19,340 --> 01:47:24,310
something wrong here

1890
01:47:21,399 --> 01:47:27,259
really what we're finding is something

1891
01:47:24,310 --> 01:47:29,989
either we're like over adding entities

1892
01:47:27,260 --> 01:47:32,150
in some weird way or what we're doing is

1893
01:47:29,988 --> 01:47:35,988
when we're packing our entities back up

1894
01:47:32,149 --> 01:47:38,359
we're like packing them all at the place

1895
01:47:35,988 --> 01:47:40,159
where we start instead of where they

1896
01:47:38,359 --> 01:47:45,139
should actually go or something like

1897
01:47:40,159 --> 01:47:48,619
that right I think that's sort of more

1898
01:47:45,140 --> 01:47:50,630
what's happening it's a more likely bug

1899
01:47:48,619 --> 01:47:58,630
and so I'm gonna look for that a little

1900
01:47:50,630 --> 01:47:58,630
bit more aggressively instead so yeah

1901
01:48:17,510 --> 01:48:22,409
so looking at how this code is working

1902
01:48:20,130 --> 01:48:24,390
right we're mapping something into the

1903
01:48:22,409 --> 01:48:26,309
space of the chunks by taking whatever

1904
01:48:24,390 --> 01:48:30,510
the entity pointer was and saying we

1905
01:48:26,310 --> 01:48:33,360
want to make it relative to the unpack

1906
01:48:30,510 --> 01:48:37,289
origin which is the origin that we were

1907
01:48:33,359 --> 01:48:40,948
told to unpack with the last time you

1908
01:48:37,289 --> 01:48:43,500
started a sim region which is being

1909
01:48:40,948 --> 01:48:48,000
stored here and I think is what we

1910
01:48:43,500 --> 01:48:51,000
expect so you know just to kind of look

1911
01:48:48,000 --> 01:48:54,750
back here if we look at when we're doing

1912
01:48:51,000 --> 01:48:58,409
that begin world change you can see us

1913
01:48:54,750 --> 01:49:00,630
storing the origin here and so when we

1914
01:48:58,409 --> 01:49:06,090
call this I think that should be correct

1915
01:49:00,630 --> 01:49:12,779
and should be sort of you know what we

1916
01:49:06,090 --> 01:49:14,429
would expect to see you know I don't see

1917
01:49:12,779 --> 01:49:17,250
anything odd going on there

1918
01:49:14,429 --> 01:49:21,869
similarly this code doesn't really touch

1919
01:49:17,250 --> 01:49:25,850
those positions at all so it's really

1920
01:49:21,869 --> 01:49:25,849
just going to be this one here that does

1921
01:49:25,880 --> 01:49:34,010
where we update the desk P here

1922
01:49:30,560 --> 01:49:34,010
shouldn't really matter

1923
01:49:38,719 --> 01:49:42,050
I think that really shouldn't matter so

1924
01:49:40,908 --> 01:49:45,259
this right here where we do our

1925
01:49:42,050 --> 01:49:49,400
subtraction we take the chunk position

1926
01:49:45,260 --> 01:49:52,610
and the unpack origin there that seems

1927
01:49:49,399 --> 01:49:55,908
correct as well right and that Delta is

1928
01:49:52,609 --> 01:49:59,899
going to get applied to the entity as it

1929
01:49:55,908 --> 01:50:03,879
comes out and I don't think anything

1930
01:49:59,899 --> 01:50:03,879
bizarre happens in register entity

1931
01:50:16,819 --> 01:50:22,460
I mean nothing nothing really goes on

1932
01:50:19,699 --> 01:50:24,649
there so this code here where we're

1933
01:50:22,460 --> 01:50:32,470
coming through and you know removing

1934
01:50:24,649 --> 01:50:39,979
that world chunk there I do let me see

1935
01:50:32,470 --> 01:50:42,110
so this part where we add the fruit and

1936
01:50:39,979 --> 01:50:44,809
why we have a mutex for that I guess

1937
01:50:42,109 --> 01:50:55,630
because we allowed like multiple people

1938
01:50:44,810 --> 01:50:58,789
to access this yes so that that really

1939
01:50:55,630 --> 01:51:02,569
could be made in line to what we're

1940
01:50:58,789 --> 01:51:06,109
doing here as well which I would prefer

1941
01:51:02,569 --> 01:51:13,039
but again not really germane to this so

1942
01:51:06,109 --> 01:51:19,369
you know looking at looking at this I

1943
01:51:13,039 --> 01:51:22,699
think we want this code to just be in

1944
01:51:19,369 --> 01:51:28,010
line here oops sorry

1945
01:51:22,699 --> 01:51:29,869
this code rather and that ticket mutex

1946
01:51:28,010 --> 01:51:32,680
should really just go on the unpack

1947
01:51:29,869 --> 01:51:32,680
right

1948
01:51:36,319 --> 01:51:41,899
and that just makes a lot more sense

1949
01:51:39,170 --> 01:51:45,980
than having to take it each time through

1950
01:51:41,899 --> 01:51:52,429
there just doesn't really make much

1951
01:51:45,979 --> 01:51:58,009
sense but um getting that really that

1952
01:51:52,430 --> 01:52:00,619
relevant though so I'm trying to think

1953
01:51:58,010 --> 01:52:03,770
of an a way to approach this debugging

1954
01:52:00,619 --> 01:52:06,439
wise and I can't really think of what to

1955
01:52:03,770 --> 01:52:10,490
do other than maybe to take a look at

1956
01:52:06,439 --> 01:52:16,339
the packing calls to see who is getting

1957
01:52:10,489 --> 01:52:21,050
packed and why so like I want to see

1958
01:52:16,340 --> 01:52:23,829
what this value is a lot of the time do

1959
01:52:21,050 --> 01:52:28,130
I think it's repeating and necessarily

1960
01:52:23,829 --> 01:52:29,960
I'm not really sure what the most

1961
01:52:28,130 --> 01:52:36,140
expedient thing is the only things I

1962
01:52:29,960 --> 01:52:38,090
could think of are now sort of involved

1963
01:52:36,140 --> 01:52:41,030
right so we're just gonna have to do

1964
01:52:38,090 --> 01:52:43,130
something involved there's no shortcut I

1965
01:52:41,029 --> 01:52:48,529
don't think so I'm gonna take a look at

1966
01:52:43,130 --> 01:52:54,350
the NTP here for the packing and what I

1967
01:52:48,529 --> 01:52:58,119
want to do is set the breakpoint here

1968
01:52:54,350 --> 01:52:58,120
I'm just looking at these values

1969
01:53:18,789 --> 01:53:24,519
and I'm just looking at the spread of

1970
01:53:20,229 --> 01:53:26,079
these values by the way using remedy

1971
01:53:24,520 --> 01:53:28,630
here to do something that you literally

1972
01:53:26,079 --> 01:53:31,809
can't do in Visual Studio which is watch

1973
01:53:28,630 --> 01:53:34,420
values change as you run visual studios

1974
01:53:31,810 --> 01:53:36,640
lag on the watch window makes this kind

1975
01:53:34,420 --> 01:53:45,190
of debugging actually impossible it you

1976
01:53:36,640 --> 01:53:47,500
just can't do it you used to be able to

1977
01:53:45,189 --> 01:53:50,399
in the old days and then they made it so

1978
01:53:47,500 --> 01:53:50,399
slow that you can't anymore

1979
01:53:51,180 --> 01:53:58,470
all right so let's step through a couple

1980
01:53:55,060 --> 01:53:58,470
more times and see

1981
01:54:10,969 --> 01:54:15,739
so it does seem like they're it's like a

1982
01:54:13,100 --> 01:54:23,199
suspiciously large number of entities

1983
01:54:15,738 --> 01:54:23,198
packed into this one particular cell and

1984
01:54:27,969 --> 01:54:33,529
I'm not sure whether that's to be

1985
01:54:30,500 --> 01:54:37,550
expected or not in terms of the overall

1986
01:54:33,529 --> 01:54:39,469
size of each individual chunk I'm not

1987
01:54:37,550 --> 01:54:42,680
sure how many things you would expect to

1988
01:54:39,469 --> 01:54:45,439
see in any one of them overall though

1989
01:54:42,680 --> 01:54:50,270
you know again I'm not seeing any kind

1990
01:54:45,439 --> 01:54:53,988
of really sort of ridiculous like oh my

1991
01:54:50,270 --> 01:54:57,230
god like how could you possibly ever

1992
01:54:53,988 --> 01:54:59,359
imagine having this many of the same

1993
01:54:57,229 --> 01:55:01,339
chunk value you know it looks like

1994
01:54:59,359 --> 01:55:05,149
they're spread there's entities spread

1995
01:55:01,340 --> 01:55:08,739
out among the chunks like you would

1996
01:55:05,149 --> 01:55:11,238
think and they have various coordinates

1997
01:55:08,738 --> 01:55:16,189
throughout the you know negative 10 to

1998
01:55:11,238 --> 01:55:21,589
10 range on everybody which is you know

1999
01:55:16,189 --> 01:55:24,589
what I would kind of expect so I'm not

2000
01:55:21,590 --> 01:55:28,100
really sure again where this like

2001
01:55:24,590 --> 01:55:33,079
difference is coming from we're you know

2002
01:55:28,100 --> 01:55:35,570
we we should have had the same exact

2003
01:55:33,079 --> 01:55:37,760
number unpacked before we made the

2004
01:55:35,569 --> 01:55:41,090
change as after we made the change and

2005
01:55:37,760 --> 01:55:41,780
yet we don't and so where that's coming

2006
01:55:41,090 --> 01:55:50,659
from

2007
01:55:41,779 --> 01:55:55,729
I really am Not sure I'm gonna go ahead

2008
01:55:50,659 --> 01:55:59,479
and look now towards this set of code

2009
01:55:55,729 --> 01:56:06,979
here so I'm gonna let it fail first of

2010
01:55:59,479 --> 01:56:09,759
all and in here oh you know what there

2011
01:56:06,979 --> 01:56:13,488
is something I just thought of that

2012
01:56:09,760 --> 01:56:20,900
maybe would be related which is that

2013
01:56:13,488 --> 01:56:22,218
where we sort of do our our looping if

2014
01:56:20,899 --> 01:56:24,379
this

2015
01:56:22,219 --> 01:56:27,198
was broken which it might well be

2016
01:56:24,380 --> 01:56:28,639
because we never tested it then some of

2017
01:56:27,198 --> 01:56:31,248
our stuff that probes for nearby

2018
01:56:28,639 --> 01:56:35,618
entities would fail and that could have

2019
01:56:31,248 --> 01:56:35,618
caused a problem let's take a look I

2020
01:56:39,729 --> 01:56:49,519
just need to get to one of well you know

2021
01:56:42,618 --> 01:56:56,168
what I'll do let's double check that

2022
01:56:49,519 --> 01:57:00,650
code alright so in here we start off

2023
01:56:56,168 --> 01:57:03,260
with an iterator and it you know didn't

2024
01:57:00,649 --> 01:57:07,038
find anything let's try that again and

2025
01:57:03,260 --> 01:57:08,059
step into this there we go so let's see

2026
01:57:07,038 --> 01:57:12,438
what we've got

2027
01:57:08,059 --> 01:57:15,260
here's our entity hash right we're going

2028
01:57:12,439 --> 01:57:15,889
to loop over this and see what we can

2029
01:57:15,260 --> 01:57:18,708
find

2030
01:57:15,889 --> 01:57:22,788
so while we're inside this array bonds

2031
01:57:18,708 --> 01:57:27,158
we look to see if we find one we just

2032
01:57:22,788 --> 01:57:34,668
loop over everything in here and then

2033
01:57:27,158 --> 01:57:37,388
let's see if we find anything so we are

2034
01:57:34,668 --> 01:57:37,389
finding stuff

2035
01:57:44,800 --> 01:57:49,659
right that does seem to be finding stuff

2036
01:58:00,760 --> 01:58:10,420
um so I mean I'm not seeing a lot of

2037
01:58:06,010 --> 01:58:10,420
reason to be suspicious

2038
01:58:22,560 --> 01:58:26,150
that all looks fine to me

2039
01:58:27,970 --> 01:58:30,030
you

2040
01:58:32,039 --> 01:58:36,960
so yeah and I'll see I don't think

2041
01:58:34,079 --> 01:58:38,519
that's probably our problem either so

2042
01:58:36,960 --> 01:58:41,369
I'm going to let this run to the crash

2043
01:58:38,520 --> 01:58:51,740
site I'm gonna set a breakpoint on the

2044
01:58:41,369 --> 01:58:51,739
outer piece meaning this part right here

2045
01:58:52,640 --> 01:58:57,390
and so we know that after the world gets

2046
01:58:55,470 --> 01:58:59,280
created which all seems to work without

2047
01:58:57,390 --> 01:59:02,700
having to unpack a region that has too

2048
01:58:59,279 --> 01:59:06,090
many things in it the first time we try

2049
01:59:02,699 --> 01:59:07,859
to do one for sim is when we fail so if

2050
01:59:06,090 --> 01:59:09,720
I look through here I just want to look

2051
01:59:07,859 --> 01:59:13,529
at what the pattern is of things that

2052
01:59:09,720 --> 01:59:16,650
get unpacked in terms of chunks see if I

2053
01:59:13,529 --> 01:59:19,349
can see anything that's a hint there as

2054
01:59:16,649 --> 01:59:22,469
to what we did wrong so when we go into

2055
01:59:19,350 --> 01:59:29,370
insure region is unpacked here what I'd

2056
01:59:22,470 --> 01:59:34,260
like to do is say if you know we take a

2057
01:59:29,369 --> 01:59:38,099
look at where the majority of these

2058
01:59:34,260 --> 01:59:40,380
entities are coming from so like like in

2059
01:59:38,100 --> 01:59:44,670
here for example right if I just go

2060
01:59:40,380 --> 01:59:52,140
ahead and look at this block stuff here

2061
01:59:44,670 --> 01:59:55,190
I want to look at who is responsible for

2062
01:59:52,140 --> 01:59:55,190
the majority of blocks

2063
02:00:01,310 --> 02:00:08,810
so like negative one negative one zero

2064
02:00:04,649 --> 02:00:10,789
zero negative one zero

2065
02:00:08,810 --> 02:00:14,480
[Music]

2066
02:00:10,789 --> 02:00:18,800
how many entities if we've already added

2067
02:00:14,479 --> 02:00:18,799
that's an incredible number of entities

2068
02:00:22,488 --> 02:00:37,589
you can sort of see like yeah like

2069
02:00:29,130 --> 02:00:40,230
what's going on there so it also almost

2070
02:00:37,590 --> 02:00:43,170
feels like I wonder if somehow I when I

2071
02:00:40,229 --> 02:00:48,539
did the transformation on that code I am

2072
02:00:43,170 --> 02:00:53,460
leaving the blocks in there somehow so

2073
02:00:48,539 --> 02:00:56,430
they don't actually get removed but

2074
02:00:53,460 --> 02:01:00,659
remove world chunk right like should do

2075
02:00:56,430 --> 02:01:04,320
that and so after calling this there

2076
02:01:00,659 --> 02:01:09,260
should be no way of like it shouldn't

2077
02:01:04,319 --> 02:01:12,479
ever like duplicate those entities out

2078
02:01:09,260 --> 02:01:18,469
unless I'm missing something

2079
02:01:12,479 --> 02:01:18,468
you know which maybe I am but

2080
02:01:25,609 --> 02:01:37,550
I really don't see how so another thing

2081
02:01:34,248 --> 02:01:43,819
that I could do here actually is track

2082
02:01:37,550 --> 02:01:48,949
the pack unpack level so for example and

2083
02:01:43,819 --> 02:01:53,148
I guess we sort of already do that well

2084
02:01:48,948 --> 02:01:57,138
no so in here we have last used entities

2085
02:01:53,149 --> 02:01:59,869
storage index and last use any storage

2086
02:01:57,139 --> 02:02:07,429
index anytime you create an entity right

2087
02:01:59,868 --> 02:02:10,538
if we look at that call when we do

2088
02:02:07,429 --> 02:02:12,800
create entity and we pass it into the ID

2089
02:02:10,538 --> 02:02:18,768
let me just go ahead and look at the

2090
02:02:12,800 --> 02:02:24,139
places where this is called yeah so

2091
02:02:18,769 --> 02:02:27,559
allocate entity ID is just gonna

2092
02:02:24,139 --> 02:02:30,769
increment this thing so that's how many

2093
02:02:27,559 --> 02:02:32,409
entities we think we made if that makes

2094
02:02:30,769 --> 02:02:37,699
sense

2095
02:02:32,408 --> 02:02:41,658
that we actually asked for and if we

2096
02:02:37,698 --> 02:02:51,348
track our pack unpack count what we

2097
02:02:41,658 --> 02:02:54,408
should see is that the number of total

2098
02:02:51,349 --> 02:02:55,668
entities that we've packed - the total

2099
02:02:54,408 --> 02:02:58,728
number of entities that we've unpacked

2100
02:02:55,668 --> 02:03:00,769
should always like equal that number we

2101
02:02:58,729 --> 02:03:02,539
should never have we should never be

2102
02:03:00,769 --> 02:03:05,570
able to have like a higher number than

2103
02:03:02,538 --> 02:03:08,328
that right so what I might do is say

2104
02:03:05,569 --> 02:03:12,918
let's see what happens if we track that

2105
02:03:08,328 --> 02:03:16,668
so in here I just have a like that's

2106
02:03:12,918 --> 02:03:27,439
like well I don't really I can just feel

2107
02:03:16,668 --> 02:03:32,498
like a packed or entity total deep packs

2108
02:03:27,439 --> 02:03:32,499
- unpacks right

2109
02:03:33,198 --> 02:03:37,579
and I can even make that in s32 so that

2110
02:03:35,539 --> 02:03:39,170
if it if you know we do have an error

2111
02:03:37,579 --> 02:03:42,079
there and it goes negative we can see

2112
02:03:39,170 --> 02:03:47,480
that it's negative right so in here

2113
02:03:42,079 --> 02:03:54,350
every time that we go into this call to

2114
02:03:47,479 --> 02:03:56,509
do this this is an entity unpack so we

2115
02:03:54,350 --> 02:04:00,980
would we would deck down the number

2116
02:03:56,510 --> 02:04:04,909
right I and then any time that we go in

2117
02:04:00,979 --> 02:04:11,750
here and push it into the in we'd up the

2118
02:04:04,909 --> 02:04:14,599
number right and so what we should see

2119
02:04:11,750 --> 02:04:17,060
is those numbers should equal each other

2120
02:04:14,600 --> 02:04:19,910
out right the total number of allocated

2121
02:04:17,060 --> 02:04:22,429
entities should match the total number

2122
02:04:19,909 --> 02:04:24,469
that we've packed and so I'm just

2123
02:04:22,429 --> 02:04:27,789
curious to see if that actually happens

2124
02:04:24,469 --> 02:04:32,659
or if we've got any issue there right so

2125
02:04:27,789 --> 02:04:39,890
let's take a look and just see so

2126
02:04:32,659 --> 02:04:41,750
looking at these there is a discrepancy

2127
02:04:39,890 --> 02:04:44,869
between those numbers and I would like

2128
02:04:41,750 --> 02:04:49,488
to know where it comes from but the

2129
02:04:44,869 --> 02:04:50,960
discrepancy isn't large so even though I

2130
02:04:49,488 --> 02:04:53,029
think we should track that down because

2131
02:04:50,960 --> 02:04:57,219
maybe we allocate some IDs for entities

2132
02:04:53,029 --> 02:04:57,219
like reserved space or something

2133
02:04:57,609 --> 02:05:09,829
what is the discrepancy actually so 2142

2134
02:05:02,060 --> 02:05:12,679
1 4 9 2 - oops - 1 5 2 3 so there's 31

2135
02:05:09,829 --> 02:05:18,738
entities unaccounted for there right 31

2136
02:05:12,679 --> 02:05:20,380
allocated IDs unaccounted for and so we

2137
02:05:18,738 --> 02:05:23,928
do want to take a look at that but again

2138
02:05:20,380 --> 02:05:26,539
not really gonna explain where our

2139
02:05:23,929 --> 02:05:31,100
entity where extra entities came from I

2140
02:05:26,539 --> 02:05:33,109
don't think so all right so that means

2141
02:05:31,100 --> 02:05:35,900
the total number of entities that we

2142
02:05:33,109 --> 02:05:37,519
packed into the system was 21,000 the

2143
02:05:35,899 --> 02:05:40,809
total number we created was twenty one

2144
02:05:37,520 --> 02:05:43,340
thousand five hundred and twenty three

2145
02:05:40,810 --> 02:05:45,920
how we create identities and never

2146
02:05:43,340 --> 02:05:47,000
packed them I'm not sure right and so

2147
02:05:45,920 --> 02:05:51,819
that's what we want to go

2148
02:05:47,000 --> 02:05:56,630
cat but if anything that would mean that

2149
02:05:51,819 --> 02:05:59,750
when we were unpacking versus packing we

2150
02:05:56,630 --> 02:06:02,000
like didn't pack as many so that should

2151
02:05:59,750 --> 02:06:04,460
actually have be that's the opposite

2152
02:06:02,000 --> 02:06:07,579
problem as to what we're seeing with

2153
02:06:04,460 --> 02:06:08,980
this bug so again not really sure where

2154
02:06:07,579 --> 02:06:12,979
that's coming from

2155
02:06:08,979 --> 02:06:15,289
okay so we know we haven't hauled the

2156
02:06:12,979 --> 02:06:17,509
packing routine like too many times and

2157
02:06:15,289 --> 02:06:20,180
ended up like duplicating entities or

2158
02:06:17,510 --> 02:06:23,750
something like that that doesn't seem to

2159
02:06:20,180 --> 02:06:28,850
be happening but again what we don't

2160
02:06:23,750 --> 02:06:30,710
know right is we're sort of where we're

2161
02:06:28,850 --> 02:06:33,800
getting sort of this this extra entity

2162
02:06:30,710 --> 02:06:37,369
throughput so one thing I'm curious

2163
02:06:33,800 --> 02:06:39,619
about is visually can we get a clue if I

2164
02:06:37,369 --> 02:06:42,979
was to go into the system and start

2165
02:06:39,619 --> 02:06:47,109
expanding that number out so like what

2166
02:06:42,979 --> 02:06:51,199
number would we need if in here I said

2167
02:06:47,109 --> 02:06:56,479
the max entity count was something more

2168
02:06:51,199 --> 02:06:58,069
right congratulations you can unpack

2169
02:06:56,479 --> 02:07:05,329
four times the entities that you thought

2170
02:06:58,069 --> 02:07:07,849
you could right does it keep like will

2171
02:07:05,329 --> 02:07:09,680
it still have a problem is there any

2172
02:07:07,850 --> 02:07:12,310
amount of headroom that would prevent it

2173
02:07:09,680 --> 02:07:15,950
from from being the case or not right

2174
02:07:12,310 --> 02:07:18,800
and that's what I want to see it looks

2175
02:07:15,949 --> 02:07:20,539
like this blows out the hash storage

2176
02:07:18,800 --> 02:07:25,130
which is I guess what you would expect

2177
02:07:20,539 --> 02:07:27,819
so I suppose that would have to be that

2178
02:07:25,130 --> 02:07:30,319
size would have to be increased as well

2179
02:07:27,819 --> 02:07:35,139
and maybe like I said maybe we do that

2180
02:07:30,319 --> 02:07:37,429
and so in here let's make this a dial

2181
02:07:35,140 --> 02:07:38,720
because I would like to be able to run

2182
02:07:37,430 --> 02:07:41,630
with different numbers and see what

2183
02:07:38,720 --> 02:07:45,130
happens so in the same region I'm going

2184
02:07:41,630 --> 02:07:45,130
to define a thing here that's like

2185
02:07:54,800 --> 02:08:04,409
or like Maxim region empty count will

2186
02:08:01,380 --> 02:08:07,650
just be something that I'm going to

2187
02:08:04,408 --> 02:08:10,289
define and so I'm gonna define that to

2188
02:08:07,649 --> 02:08:13,679
be four times eighty one ninety two and

2189
02:08:10,289 --> 02:08:16,979
then everybody else can use that so the

2190
02:08:13,679 --> 02:08:19,618
entity hash can do that and we can do

2191
02:08:16,979 --> 02:08:20,939
that here and I don't actually want it

2192
02:08:19,618 --> 02:08:23,399
to be that big I want to be

2193
02:08:20,939 --> 02:08:26,698
significantly lower than that I suspect

2194
02:08:23,399 --> 02:08:29,488
but like I said I just want to see what

2195
02:08:26,698 --> 02:08:31,408
number are we getting so like what is

2196
02:08:29,488 --> 02:08:34,678
the actual number of things that we

2197
02:08:31,408 --> 02:08:38,129
unpack because I have no idea since it

2198
02:08:34,679 --> 02:08:41,190
just crashes out and says hey we don't

2199
02:08:38,130 --> 02:08:45,920
have room for unpacking that many so how

2200
02:08:41,189 --> 02:08:45,919
many would you unpack if you could right

2201
02:08:45,948 --> 02:08:51,448
so the answer is fifteen thousand three

2202
02:08:49,198 --> 02:08:54,839
hundred and eighty-three is how many

2203
02:08:51,448 --> 02:08:56,879
would like to unpack right which is

2204
02:08:54,840 --> 02:09:00,360
underneath the total number that there

2205
02:08:56,880 --> 02:09:03,078
are so we don't have a smoking gun that

2206
02:09:00,359 --> 02:09:05,848
says hey we're obviously unpacking wrong

2207
02:09:03,078 --> 02:09:08,368
but it does seem ridiculous that somehow

2208
02:09:05,849 --> 02:09:11,069
we're unpacking fifteen thousand in

2209
02:09:08,368 --> 02:09:13,529
these now but we haven't done anything

2210
02:09:11,069 --> 02:09:15,328
to the code other than just change where

2211
02:09:13,529 --> 02:09:17,250
we're unpacking them so we shouldn't

2212
02:09:15,328 --> 02:09:20,578
have been able to exceed the number by

2213
02:09:17,250 --> 02:09:23,309
such a crazy amount in code that should

2214
02:09:20,578 --> 02:09:27,019
be doing literally the same thing so all

2215
02:09:23,309 --> 02:09:32,760
right next question if we draw this junk

2216
02:09:27,020 --> 02:09:33,030
do we see anything that would give us a

2217
02:09:32,760 --> 02:09:35,280
clue

2218
02:09:33,029 --> 02:09:37,289
now one thing I'd like to do is maybe

2219
02:09:35,279 --> 02:09:40,229
disable lighting for now because again

2220
02:09:37,289 --> 02:09:43,170
the lighting storage isn't gonna fit

2221
02:09:40,229 --> 02:09:45,000
with this much stuff because the way we

2222
02:09:43,170 --> 02:09:46,739
send these these pieces of light

2223
02:09:45,000 --> 02:09:49,380
information down obviously into the

2224
02:09:46,738 --> 02:09:50,339
lookup table is a fixed size so that

2225
02:09:49,380 --> 02:09:53,159
light data width

2226
02:09:50,340 --> 02:09:57,029
isn't gonna cut it if you look at where

2227
02:09:53,158 --> 02:10:01,599
that's specified you can see we only

2228
02:09:57,029 --> 02:10:04,689
have so many and we

2229
02:10:01,600 --> 02:10:06,820
I'm currently a fairly poor system for

2230
02:10:04,689 --> 02:10:11,049
managing the lighting so that's just not

2231
02:10:06,819 --> 02:10:13,090
gonna really work uh so I'm not sure

2232
02:10:11,050 --> 02:10:15,070
exactly what to do about that I could

2233
02:10:13,090 --> 02:10:17,409
make this larger temporarily I'm not

2234
02:10:15,069 --> 02:10:19,569
sure I really want to because I'm not

2235
02:10:17,409 --> 02:10:20,920
sure that that that will actually work

2236
02:10:19,569 --> 02:10:22,469
through the renderer but we can do it

2237
02:10:20,920 --> 02:10:24,340
temporarily just to see I suppose

2238
02:10:22,470 --> 02:10:32,650
because I just want to see what the

2239
02:10:24,340 --> 02:10:39,610
screen looks like you and I'm saying how

2240
02:10:32,649 --> 02:10:40,539
many of these do we have I'm pretty sure

2241
02:10:39,609 --> 02:10:41,409
we can't even do this because we

2242
02:10:40,539 --> 02:10:42,609
wouldn't be able to submit these

2243
02:10:41,409 --> 02:10:45,909
textures they're gonna be too large

2244
02:10:42,609 --> 02:10:49,469
right so imagine just disable lighting

2245
02:10:45,909 --> 02:10:49,470
temporarily while we take a look at this

2246
02:10:57,069 --> 02:11:07,159
that's nuts all right

2247
02:11:03,699 --> 02:11:10,340
so how can I turn lighting off kind of

2248
02:11:07,159 --> 02:11:15,199
permanently while we look at this

2249
02:11:10,340 --> 02:11:17,600
because I really just don't want I think

2250
02:11:15,199 --> 02:11:20,630
the easiest way would probably be to do

2251
02:11:17,600 --> 02:11:24,350
something like this so if we do letting

2252
02:11:20,630 --> 02:11:27,440
enabled here and set this up where we do

2253
02:11:24,350 --> 02:11:36,079
enable lighting I think I might be able

2254
02:11:27,439 --> 02:11:38,379
to just do that I don't know what this

2255
02:11:36,079 --> 02:11:38,380
does

2256
02:11:40,800 --> 02:11:44,800
[Music]

2257
02:11:56,578 --> 02:12:04,328
it looks like that only changes the

2258
02:11:59,729 --> 02:12:06,250
enabling of the lighting there we need

2259
02:12:04,328 --> 02:12:07,840
to kill switch for lighting I just don't

2260
02:12:06,250 --> 02:12:09,849
think we've ever engineered one

2261
02:12:07,840 --> 02:12:16,869
oh is it enabled lighting never even

2262
02:12:09,849 --> 02:12:19,360
called alright even worse so we don't

2263
02:12:16,868 --> 02:12:20,710
really have a way of killing this and I

2264
02:12:19,359 --> 02:12:22,679
would like one to kill this because I

2265
02:12:20,710 --> 02:12:29,050
don't really want to have to update it

2266
02:12:22,679 --> 02:12:32,199
so maybe inside the lighting code where

2267
02:12:29,050 --> 02:12:36,520
we actually you know where we actually

2268
02:12:32,198 --> 02:12:38,979
do this work maybe I can just add a kill

2269
02:12:36,520 --> 02:12:42,610
switch in there we don't care about that

2270
02:12:38,979 --> 02:12:46,738
so much so we're we're actually doing

2271
02:12:42,609 --> 02:12:46,738
all of our like compute like propagation

2272
02:12:46,770 --> 02:12:53,110
is there really no switch that turns us

2273
02:12:50,260 --> 02:12:55,349
on and off because I thought we kind of

2274
02:12:53,109 --> 02:13:00,299
did that at some point we had a switch I

2275
02:12:55,349 --> 02:13:00,300
guess that switch got illuminated

2276
02:13:08,439 --> 02:13:17,819
I mean we have an if zero here but it's

2277
02:13:14,500 --> 02:13:17,819
not really what I had in mind

2278
02:13:19,409 --> 02:13:25,000
so inside handmade world mode where we

2279
02:13:22,779 --> 02:13:26,859
actually do the lighting does that

2280
02:13:25,000 --> 02:13:33,130
actually have anything now it really

2281
02:13:26,859 --> 02:13:35,799
doesn't so it looks like we just don't

2282
02:13:33,130 --> 02:13:39,400
have a way to really do much about this

2283
02:13:35,800 --> 02:13:45,300
we've got an updating lighting option

2284
02:13:39,399 --> 02:13:47,829
here and but it's kind of janky right

2285
02:13:45,300 --> 02:13:57,820
we've got updating lighting and show

2286
02:13:47,829 --> 02:14:04,809
lighting and in terms of these getting

2287
02:13:57,819 --> 02:14:06,789
set yeah this is all just kind of like

2288
02:14:04,810 --> 02:14:09,340
old code that's kind of just gone now

2289
02:14:06,789 --> 02:14:11,819
how are those getting set at all there

2290
02:14:09,340 --> 02:14:11,819
right now

2291
02:14:16,979 --> 02:14:23,909
like if these these must have to get set

2292
02:14:21,748 --> 02:14:26,429
to something at some point right in

2293
02:14:23,908 --> 02:14:29,308
order for those in order for lighting to

2294
02:14:26,429 --> 02:14:34,729
actually get enabled so I'm just

2295
02:14:29,309 --> 02:14:34,729
wondering how that is happening

2296
02:14:49,630 --> 02:14:53,770
yeah I don't I don't see it

2297
02:15:04,619 --> 02:15:10,119
so in terms of calling output lighting

2298
02:15:07,720 --> 02:15:12,610
textures world mode updating lighting

2299
02:15:10,119 --> 02:15:16,539
should have to be set to true somewhere

2300
02:15:12,609 --> 02:15:17,679
right but if it's never set anywhere how

2301
02:15:16,539 --> 02:15:23,890
is that possible

2302
02:15:17,680 --> 02:15:26,490
oh so it did how did it not find that

2303
02:15:23,890 --> 02:15:29,710
when I looked for it before that's lame

2304
02:15:26,489 --> 02:15:33,069
anyway so inside play worlds where we're

2305
02:15:29,710 --> 02:15:35,409
setting this here I don't know to what

2306
02:15:33,069 --> 02:15:43,869
extent I can do this and have that mean

2307
02:15:35,409 --> 02:15:45,430
anything but we're gonna try at some

2308
02:15:43,869 --> 02:15:48,670
point I guess when we do our lighting

2309
02:15:45,430 --> 02:15:52,360
pass yeah so it looks like this just

2310
02:15:48,670 --> 02:15:54,699
always gets called like when we're

2311
02:15:52,359 --> 02:15:56,380
pushing the cube Stefan right every time

2312
02:15:54,699 --> 02:16:00,149
we push one of these cubes on it needs

2313
02:15:56,380 --> 02:16:00,150
to allocate one of those lighting points

2314
02:16:02,460 --> 02:16:06,730
and I guess the light store is so this

2315
02:16:05,079 --> 02:16:09,569
part here where this is getting pushed

2316
02:16:06,729 --> 02:16:12,759
on though if lighting was not enabled

2317
02:16:09,569 --> 02:16:15,909
then I suppose that would actually allow

2318
02:16:12,760 --> 02:16:19,060
us to prevent that part from out

2319
02:16:15,909 --> 02:16:23,529
flooding so it does seem to me like

2320
02:16:19,060 --> 02:16:26,440
somebody like in here when this render

2321
02:16:23,529 --> 02:16:28,929
group gets set up somebody has to start

2322
02:16:26,439 --> 02:16:33,869
having the lighting take effect right

2323
02:16:28,930 --> 02:16:33,870
somebody in here this part

2324
02:16:39,090 --> 02:16:45,040
that has to actually occur so who is

2325
02:16:42,670 --> 02:16:46,960
doing that and could we make them follow

2326
02:16:45,040 --> 02:16:49,569
the same flag so that we don't have to

2327
02:16:46,959 --> 02:17:13,629
worry about it so if this is render

2328
02:16:49,568 --> 02:17:16,478
group letting enable to 0 and so right

2329
02:17:13,629 --> 02:17:18,488
here I guess is where that gets set to 1

2330
02:17:16,478 --> 02:17:22,269
so when we actually put those on there

2331
02:17:18,488 --> 02:17:25,949
right and so I assume what we want to do

2332
02:17:22,269 --> 02:17:28,809
is don't push those down in that case

2333
02:17:25,950 --> 02:17:33,429
where where the lighting is not actually

2334
02:17:28,808 --> 02:17:37,209
happening right so inside world mode if

2335
02:17:33,429 --> 02:17:40,478
we did just check that flag and not set

2336
02:17:37,209 --> 02:17:53,079
up the lighting was that called push

2337
02:17:40,478 --> 02:17:56,250
lighting this part here I assumed that

2338
02:17:53,079 --> 02:17:56,250
we can get away with that

2339
02:17:59,979 --> 02:18:05,430
I don't really know but we'll try

2340
02:18:20,829 --> 02:18:27,728
interesting so we got by that part okay

2341
02:18:24,769 --> 02:18:31,300
but now when we're doing sort of load

2342
02:18:27,728 --> 02:18:31,299
traversable x' here

2343
02:18:44,370 --> 02:18:48,599
and this is the neck this would be the

2344
02:18:46,439 --> 02:18:51,809
next time through so we made it through

2345
02:18:48,599 --> 02:18:56,269
the first loop fine but in here where

2346
02:18:51,808 --> 02:18:56,268
we're looking at this entity reference

2347
02:19:05,049 --> 02:19:11,349
it looks like for some reason these are

2348
02:19:07,930 --> 02:19:15,940
not being restored to zero properly in

2349
02:19:11,350 --> 02:19:19,840
this case I mean that is one change we

2350
02:19:15,940 --> 02:19:23,200
made the one change that we consciously

2351
02:19:19,840 --> 02:19:25,630
made was we just passed zero for the sim

2352
02:19:23,200 --> 02:19:29,170
region could that really have caused all

2353
02:19:25,629 --> 02:19:35,079
of this problem I doubt it but maybe it

2354
02:19:29,170 --> 02:19:37,450
did if you remember in repack enemies as

2355
02:19:35,079 --> 02:19:40,479
necessary this I didn't pass the sim

2356
02:19:37,450 --> 02:19:45,130
region here so you know really this code

2357
02:19:40,479 --> 02:19:46,600
was supposed to look like this and I

2358
02:19:45,129 --> 02:19:50,409
didn't want to deal with it right now I

2359
02:19:46,600 --> 02:19:54,760
want to deal with it later but maybe we

2360
02:19:50,409 --> 02:19:56,470
need to sort of analyze it first this

2361
02:19:54,760 --> 02:19:58,840
way and make sure that we haven't messed

2362
02:19:56,470 --> 02:20:00,220
up anything before and actually go ahead

2363
02:19:58,840 --> 02:20:08,950
and do the change I said I was gonna do

2364
02:20:00,220 --> 02:20:10,890
first how could that really be the

2365
02:20:08,950 --> 02:20:14,400
problem though doesn't really make sense

2366
02:20:10,890 --> 02:20:14,399
but either way

2367
02:20:18,399 --> 02:20:21,949
okay so yeah that's not the problem this

2368
02:20:20,720 --> 02:20:24,020
is like a separate issue

2369
02:20:21,950 --> 02:20:26,181
good cuz I was like that shouldn't have

2370
02:20:24,021 --> 02:20:27,351
done anything what we're doing there so

2371
02:20:26,181 --> 02:20:29,000
I'm not sure what we're getting a

2372
02:20:27,351 --> 02:20:30,530
problem with here but again it's

2373
02:20:29,000 --> 02:20:31,970
probably all stems from the same bug

2374
02:20:30,530 --> 02:20:34,070
that we have that we just don't know

2375
02:20:31,970 --> 02:20:36,680
what we've which problem we've

2376
02:20:34,069 --> 02:20:39,761
introduced here but as we're looping

2377
02:20:36,681 --> 02:20:56,170
over the entities in the sim region here

2378
02:20:39,761 --> 02:20:56,170
oh wait I totally screwed this up okay

2379
02:20:56,290 --> 02:21:01,341
so this may actually explain things and

2380
02:20:59,720 --> 02:21:04,011
I had the information necessary to do

2381
02:21:01,341 --> 02:21:06,710
the right thing and I just didn't we

2382
02:21:04,011 --> 02:21:09,261
don't clear this array when we start the

2383
02:21:06,709 --> 02:21:11,899
entity hash occupancy table tells us

2384
02:21:09,261 --> 02:21:14,420
whether there's something there so

2385
02:21:11,899 --> 02:21:17,899
actually my iterator is total garbage

2386
02:21:14,420 --> 02:21:24,579
right now oh wow

2387
02:21:17,899 --> 02:21:27,350
okay Wow all right did you see that bug

2388
02:21:24,579 --> 02:21:29,181
that was a pretty stupid one on my part

2389
02:21:27,351 --> 02:21:32,060
I feel like that may be a foolish thing

2390
02:21:29,181 --> 02:21:35,931
cuz I literally looked at it at the

2391
02:21:32,060 --> 02:21:38,449
beginning of stream and I knew that I

2392
02:21:35,931 --> 02:21:41,810
needed to obey that hash occupancy I

2393
02:21:38,450 --> 02:21:45,650
said that and then I proceeded to

2394
02:21:41,810 --> 02:21:51,170
totally ignore it right I mean you

2395
02:21:45,649 --> 02:21:55,310
remember that happening I assumed so

2396
02:21:51,170 --> 02:21:56,720
yeah I feel like it's my can't even

2397
02:21:55,310 --> 02:22:03,440
really see that that's on my head I need

2398
02:21:56,720 --> 02:22:05,478
to like adjust this so you can there we

2399
02:22:03,440 --> 02:22:07,579
go

2400
02:22:05,478 --> 02:22:14,769
so I think what we need to do here is

2401
02:22:07,579 --> 02:22:20,750
say add that occupancy check back in and

2402
02:22:14,770 --> 02:22:24,319
that honestly maybe all there actually

2403
02:22:20,750 --> 02:22:27,500
was to it so what we need to do here is

2404
02:22:24,318 --> 02:22:31,278
check the hash occupancy of this

2405
02:22:27,500 --> 02:22:33,829
particular entry right and then we need

2406
02:22:31,279 --> 02:22:41,329
to go ahead and get it so like get hash

2407
02:22:33,829 --> 02:22:43,789
from ID not that one okay so this call

2408
02:22:41,329 --> 02:22:46,700
right here where we do like is empty

2409
02:22:43,790 --> 02:22:50,870
that I think is what we actually need to

2410
02:22:46,700 --> 02:22:54,680
do and weren't doing so we say for this

2411
02:22:50,870 --> 02:22:56,960
hash index if this thing is not empty

2412
02:22:54,680 --> 02:23:10,960
then we can get the pointer but

2413
02:22:56,959 --> 02:23:14,148
otherwise we can't right makes sense and

2414
02:23:10,959 --> 02:23:15,079
so we were looping over a bunch of false

2415
02:23:14,148 --> 02:23:20,898
entities

2416
02:23:15,079 --> 02:23:23,889
no wonder they all like got confused and

2417
02:23:20,898 --> 02:23:26,920
and perhaps remapped in weird ways

2418
02:23:23,889 --> 02:23:32,869
because that that was just total garbage

2419
02:23:26,920 --> 02:23:34,398
so I think that maybe all the problem

2420
02:23:32,870 --> 02:23:36,319
there was there's probably other bugs

2421
02:23:34,398 --> 02:23:39,528
let's be honest if I missed that one

2422
02:23:36,318 --> 02:23:42,528
which I literally said we had at the

2423
02:23:39,529 --> 02:23:45,439
outset of the entire thing then the

2424
02:23:42,529 --> 02:23:50,750
chances are high that I've done other

2425
02:23:45,439 --> 02:23:55,090
stupid things as well okay let's take a

2426
02:23:50,750 --> 02:23:55,090
look at what's going on here so

2427
02:23:56,520 --> 02:24:01,020
let's start by seeing what our profiler

2428
02:23:59,549 --> 02:24:02,519
is telling us it's going on here I'm

2429
02:24:01,020 --> 02:24:07,310
gonna switch this to release my just for

2430
02:24:02,520 --> 02:24:09,780
a second so I can see what's going on

2431
02:24:07,309 --> 02:24:10,590
but yeah that was really stupid I don't

2432
02:24:09,780 --> 02:24:16,829
know why I did that

2433
02:24:10,590 --> 02:24:21,450
I was just quite dumb all right so if

2434
02:24:16,829 --> 02:24:22,889
you look at what's going on here we can

2435
02:24:21,450 --> 02:24:24,300
see there's some weird like there's way

2436
02:24:22,889 --> 02:24:24,779
more Arena occupancy than there should

2437
02:24:24,299 --> 02:24:26,699
be

2438
02:24:24,780 --> 02:24:29,909
so we're getting bugs we definitely

2439
02:24:26,700 --> 02:24:35,250
still have bugs in there and if we look

2440
02:24:29,909 --> 02:24:40,850
at the profiling spending a ton of time

2441
02:24:35,250 --> 02:24:44,700
in this repack which we wouldn't expect

2442
02:24:40,850 --> 02:24:47,909
so we've still got some pretty bad mojo

2443
02:24:44,700 --> 02:24:53,880
happening here so why what's what's

2444
02:24:47,909 --> 02:24:56,610
going on right and and I have no idea so

2445
02:24:53,879 --> 02:25:04,559
we're gonna have to figure it out all

2446
02:24:56,610 --> 02:25:06,739
right so back debug mode for now I also

2447
02:25:04,559 --> 02:25:11,369
want to look now to see if that changed

2448
02:25:06,739 --> 02:25:13,978
anything about our pack unpack although

2449
02:25:11,370 --> 02:25:16,229
based on that I guess it didn't so this

2450
02:25:13,978 --> 02:25:22,189
was an unrelated problem that also that

2451
02:25:16,228 --> 02:25:25,109
I just also had that was separate right

2452
02:25:22,190 --> 02:25:30,140
so what I want to do here is let's set a

2453
02:25:25,110 --> 02:25:30,140
breakpoint in begin sim

2454
02:25:45,860 --> 02:25:58,489
and in here I'm gonna look at the world

2455
02:25:51,351 --> 02:26:02,000
structure and I want to see how many we

2456
02:25:58,489 --> 02:26:05,920
get so yeah this was an unrelated

2457
02:26:02,000 --> 02:26:09,799
problem so that was just also a problem

2458
02:26:05,920 --> 02:26:11,719
and so we're right back to square one

2459
02:26:09,799 --> 02:26:16,699
now we did have to fix the other problem

2460
02:26:11,719 --> 02:26:19,670
so it's not like uh-huh it's not like we

2461
02:26:16,700 --> 02:26:23,181
didn't need to find that bug but it is

2462
02:26:19,670 --> 02:26:25,610
the case that we really have no idea why

2463
02:26:23,181 --> 02:26:27,860
the change we made would have affected

2464
02:26:25,610 --> 02:26:30,860
the system the way that it did

2465
02:26:27,860 --> 02:26:33,590
so we're still just as in the dark as to

2466
02:26:30,860 --> 02:26:36,700
why we're getting such an unusual

2467
02:26:33,590 --> 02:26:36,700
behavior out of this

2468
02:27:09,238 --> 02:27:13,859
it would seem like you know my

2469
02:27:11,639 --> 02:27:15,930
expectation would be that we're handling

2470
02:27:13,859 --> 02:27:17,609
the positions incorrectly in some way

2471
02:27:15,930 --> 02:27:19,170
because that's the most subtle part of

2472
02:27:17,609 --> 02:27:20,818
this system and I'm not sure what else

2473
02:27:19,170 --> 02:27:22,260
really could be going wrong there

2474
02:27:20,818 --> 02:27:26,698
because it's the thing that determines

2475
02:27:22,260 --> 02:27:28,020
where you get packed as well so that's

2476
02:27:26,699 --> 02:27:30,720
the thing that I would have most

2477
02:27:28,020 --> 02:27:34,020
suspected to be wrong would have been

2478
02:27:30,719 --> 02:27:44,929
that and if you look at how the entities

2479
02:27:34,020 --> 02:27:44,930
are working in here I honestly can't see

2480
02:27:45,379 --> 02:27:59,909
what the problem would be there because

2481
02:27:49,049 --> 02:28:04,340
they seem at least to be doing seem to

2482
02:27:59,909 --> 02:28:06,689
be be doing it up Wow

2483
02:28:04,340 --> 02:28:09,540
so this is just gonna overwrite this

2484
02:28:06,689 --> 02:28:11,880
right here so why that is above the copy

2485
02:28:09,540 --> 02:28:14,189
I have no idea this was just an owl of

2486
02:28:11,879 --> 02:28:17,369
shame day it seems like we got all the

2487
02:28:14,189 --> 02:28:20,159
hard stuff right perhaps and like two

2488
02:28:17,370 --> 02:28:21,630
really stupid things we got wrong but I

2489
02:28:20,159 --> 02:28:24,629
guess that's just how programming goes

2490
02:28:21,629 --> 02:28:30,089
sometimes so what are you gonna do you

2491
02:28:24,629 --> 02:28:33,568
know there's not much you can do just a

2492
02:28:30,090 --> 02:28:35,909
reminder of how bad our lighting is did

2493
02:28:33,568 --> 02:28:40,859
you notice that although our world Jen

2494
02:28:35,909 --> 02:28:43,109
is quite slow this is a debug mode when

2495
02:28:40,859 --> 02:28:50,510
you're not running with lighting on

2496
02:28:43,109 --> 02:28:53,880
right and so kind of ridiculous right

2497
02:28:50,510 --> 02:28:56,309
how much like our entire frame time is

2498
02:28:53,879 --> 02:28:58,679
completely dominated by lighting such

2499
02:28:56,309 --> 02:29:01,559
that the debug version of the game runs

2500
02:28:58,680 --> 02:29:06,680
pretty much at speed

2501
02:29:01,559 --> 02:29:11,219
maybe not 60 but at least 30 just fine

2502
02:29:06,680 --> 02:29:13,738
and that's kind of absurd so that just

2503
02:29:11,219 --> 02:29:15,119
gives you an idea of just how much we

2504
02:29:13,738 --> 02:29:17,250
need to improve the lighting because

2505
02:29:15,120 --> 02:29:19,229
it's you know pretty much makes we could

2506
02:29:17,250 --> 02:29:21,959
just be running their game at debug if

2507
02:29:19,228 --> 02:29:22,920
we really wanted to if it wasn't for the

2508
02:29:21,959 --> 02:29:29,579
fact that lighting is

2509
02:29:22,920 --> 02:29:34,079
is you know it's there one thing I might

2510
02:29:29,579 --> 02:29:36,510
do just based on that is to say look are

2511
02:29:34,079 --> 02:29:40,260
we building in debugger nuts you know

2512
02:29:36,510 --> 02:29:44,898
and maybe set this based on on that I

2513
02:29:40,260 --> 02:29:48,870
don't know that's a tough one to say

2514
02:29:44,898 --> 02:29:52,289
anyway I think that means now we're fine

2515
02:29:48,870 --> 02:29:59,909
and if I do sort of build in release

2516
02:29:52,290 --> 02:30:03,540
mode here we go

2517
02:29:59,908 --> 02:30:06,350
I think we should be back to normal

2518
02:30:03,540 --> 02:30:06,350
looks like we are

2519
02:30:14,600 --> 02:30:19,109
alright so I'm gonna call that a day and

2520
02:30:16,828 --> 02:30:22,498
I think that sets us up pretty well

2521
02:30:19,109 --> 02:30:24,479
because it looks like yeah if it wasn't

2522
02:30:22,498 --> 02:30:28,020
for those two pretty stupid things that

2523
02:30:24,478 --> 02:30:32,128
I missed I everything seemed to be fine

2524
02:30:28,020 --> 02:30:37,140
and so all we really need to do now is

2525
02:30:32,129 --> 02:30:40,140
take the next step tomorrow of not

2526
02:30:37,139 --> 02:30:41,219
always repacking and then we're and

2527
02:30:40,139 --> 02:30:43,408
that's basically the only thing we

2528
02:30:41,219 --> 02:30:46,828
really needed to do and then then we're

2529
02:30:43,408 --> 02:30:48,600
good right and we're ready to make our

2530
02:30:46,828 --> 02:30:53,010
packing function actually throw things

2531
02:30:48,600 --> 02:30:55,140
away if it would like to right so I

2532
02:30:53,010 --> 02:30:57,838
think that's all we really need to do

2533
02:30:55,139 --> 02:31:01,019
here and that puts us in good shape for

2534
02:30:57,838 --> 02:31:04,379
tomorrow I'll go to a brief Q&amp;A in case

2535
02:31:01,020 --> 02:31:08,760
anyone has any questions about that and

2536
02:31:04,379 --> 02:31:11,088
I'll readjust my head my camera here a

2537
02:31:08,760 --> 02:31:11,088
little bit

2538
02:31:59,930 --> 02:32:04,189
well the pact entity be a separate

2539
02:32:01,818 --> 02:32:11,180
struct and what is the plan of adding

2540
02:32:04,189 --> 02:32:16,039
removing data so basically what I'd like

2541
02:32:11,180 --> 02:32:18,800
to do there is at first we will probably

2542
02:32:16,039 --> 02:32:22,489
not make it be a separate struct because

2543
02:32:18,799 --> 02:32:25,549
I don't care enough about it at the

2544
02:32:22,488 --> 02:32:28,698
outset so we'll leave it as a struct the

2545
02:32:25,549 --> 02:32:31,608
way it is now but what I'll do is I'll

2546
02:32:28,699 --> 02:32:33,918
add a watermark to the struct and we

2547
02:32:31,609 --> 02:32:36,738
just won't save the back half of it

2548
02:32:33,918 --> 02:32:38,779
right so all the data that we don't mind

2549
02:32:36,738 --> 02:32:44,868
throwing away and that can just be

2550
02:32:38,779 --> 02:32:47,510
reinitialized later during unpack we'll

2551
02:32:44,869 --> 02:32:48,680
just stick that on the end and the

2552
02:32:47,510 --> 02:32:49,939
reason for that is I just don't want

2553
02:32:48,680 --> 02:32:54,880
people's lives to become more

2554
02:32:49,939 --> 02:32:57,800
complicated right but at the sort of

2555
02:32:54,879 --> 02:32:59,389
more towards the end of development when

2556
02:32:57,799 --> 02:33:01,879
I'm pretty confident of how I want

2557
02:32:59,389 --> 02:33:04,668
everything to work I will make two

2558
02:33:01,879 --> 02:33:05,898
totally separate data stores one will be

2559
02:33:04,668 --> 02:33:07,369
the entities truck that's gets used

2560
02:33:05,898 --> 02:33:10,549
during simulation and that's in the

2561
02:33:07,369 --> 02:33:12,949
cache area and the other will be some

2562
02:33:10,549 --> 02:33:16,009
kind of a like hand-tuned packing of

2563
02:33:12,949 --> 02:33:18,739
that probably like almost maybe even a

2564
02:33:16,010 --> 02:33:24,469
compressed representation so we may even

2565
02:33:18,738 --> 02:33:27,529
do something where we like sort of just

2566
02:33:24,469 --> 02:33:29,929
have like encoding of what's in here as

2567
02:33:27,529 --> 02:33:32,149
like a flag array or something or maybe

2568
02:33:29,930 --> 02:33:33,889
even a tagged thing it's like here's the

2569
02:33:32,148 --> 02:33:35,629
tag that says what's here and then the

2570
02:33:33,889 --> 02:33:40,158
data for it what's here the data for it

2571
02:33:35,629 --> 02:33:45,589
what's here then the data for it so that

2572
02:33:40,158 --> 02:33:47,600
we don't really have to store anything

2573
02:33:45,590 --> 02:33:52,998
that wasn't relevant to that particular

2574
02:33:47,600 --> 02:33:54,439
entity something like that but I will

2575
02:33:52,998 --> 02:33:55,969
let that play out I don't have a

2576
02:33:54,439 --> 02:34:01,059
particular requirement for it I'll let

2577
02:33:55,969 --> 02:34:01,059
that play out as it wants to as we go

2578
02:34:03,159 --> 02:34:10,059
I had a question regarding the arena

2579
02:34:08,559 --> 02:34:11,709
graph in the profiler that may have

2580
02:34:10,059 --> 02:34:13,359
changed as episode and you may not be

2581
02:34:11,709 --> 02:34:16,478
able to display it in its current state

2582
02:34:13,360 --> 02:34:18,210
I it was about why there was separation

2583
02:34:16,478 --> 02:34:20,769
for the ground chunks

2584
02:34:18,209 --> 02:34:22,000
the first group all were green but every

2585
02:34:20,770 --> 02:34:23,909
X amount there is a gray value of

2586
02:34:22,000 --> 02:34:26,559
separate them what was the separation

2587
02:34:23,909 --> 02:34:28,898
yes so that's a we want to look into

2588
02:34:26,559 --> 02:34:31,510
eventually actually and I'm not 100%

2589
02:34:28,898 --> 02:34:35,049
sure what it is but I will explain

2590
02:34:31,510 --> 02:34:39,909
what's going on there so if you look at

2591
02:34:35,049 --> 02:34:41,679
what happens in the allocation so if I

2592
02:34:39,909 --> 02:34:46,989
use what is used

2593
02:34:41,680 --> 02:34:49,148
chunk space so inside use chunk space

2594
02:34:46,989 --> 02:34:52,539
you can see that what happens is it

2595
02:34:49,148 --> 02:34:56,039
looks for free blocks that can store

2596
02:34:52,540 --> 02:34:59,710
world data and if it doesn't have one

2597
02:34:56,040 --> 02:35:02,680
right so even if it has no free space

2598
02:34:59,709 --> 02:35:07,299
left then what it's going to do is it's

2599
02:35:02,680 --> 02:35:09,960
going to allocate space for a new one

2600
02:35:07,299 --> 02:35:09,959
right

2601
02:35:10,478 --> 02:35:19,569
looking at the way this is written it

2602
02:35:13,719 --> 02:35:20,829
looks like this right well okay so even

2603
02:35:19,569 --> 02:35:24,520
just looking at this I can tell you what

2604
02:35:20,829 --> 02:35:29,590
the problem is so what ends up happening

2605
02:35:24,520 --> 02:35:31,840
is every block is allocated as a one

2606
02:35:29,590 --> 02:35:34,780
megabyte block because that's just what

2607
02:35:31,840 --> 02:35:35,620
we set it up as we can change that to

2608
02:35:34,780 --> 02:35:37,710
anything we want

2609
02:35:35,620 --> 02:35:41,010
but blocks get allocated as one megabyte

2610
02:35:37,709 --> 02:35:44,589
the world entities get packed in

2611
02:35:41,010 --> 02:35:48,610
granularities of 64 K that's one shifted

2612
02:35:44,590 --> 02:35:50,860
up 16 right that's 64 K of data so the

2613
02:35:48,610 --> 02:35:53,710
question is how many of those can you

2614
02:35:50,860 --> 02:36:01,540
fit in a 1 megabyte block right I don't

2615
02:35:53,709 --> 02:36:05,438
know 1024 x 1024 divided by 64 divided

2616
02:36:01,540 --> 02:36:08,860
by 1024 well I should get exactly 16 of

2617
02:36:05,439 --> 02:36:15,420
them right but lo and behold when I look

2618
02:36:08,860 --> 02:36:15,420
run my application what do I see

2619
02:36:15,620 --> 02:36:24,239
one two three four five six seven eight

2620
02:36:20,488 --> 02:36:29,879
nine ten eleven twelve thirteen fourteen

2621
02:36:24,238 --> 02:36:32,219
fifteen and uh right so what's going on

2622
02:36:29,879 --> 02:36:34,108
here well I was gonna say we have to

2623
02:36:32,219 --> 02:36:35,309
look into it more but even just looking

2624
02:36:34,109 --> 02:36:36,568
into it in the ten seconds I took me to

2625
02:36:35,309 --> 02:36:40,680
explain it I can tell you what the

2626
02:36:36,568 --> 02:36:43,859
problem is so world entity blocks are

2627
02:36:40,680 --> 02:36:46,409
the things we're storing there is 64k of

2628
02:36:43,859 --> 02:36:47,159
data in the block but then a bunch of

2629
02:36:46,409 --> 02:36:49,709
crap

2630
02:36:47,159 --> 02:36:51,329
there's an entity count some low entity

2631
02:36:49,709 --> 02:36:55,769
indices I don't even know what those are

2632
02:36:51,329 --> 02:36:57,559
right this stuff that's been here since

2633
02:36:55,770 --> 02:37:04,470
time immemorial

2634
02:36:57,559 --> 02:37:06,209
this stuff adds to the 16k right and so

2635
02:37:04,469 --> 02:37:09,238
what we end up with is I'm sorry

2636
02:37:06,209 --> 02:37:12,269
as for the 64 K so we end up with is

2637
02:37:09,238 --> 02:37:16,199
something that's 64 K plus a little bit

2638
02:37:12,270 --> 02:37:17,790
and that little bit adds up over the 15

2639
02:37:16,200 --> 02:37:20,100
that we put in there such that when you

2640
02:37:17,790 --> 02:37:23,819
go to put the 16 one well if there's

2641
02:37:20,100 --> 02:37:25,140
even one byte more used you can't put

2642
02:37:23,818 --> 02:37:28,949
one in there because 16 fits exactly

2643
02:37:25,139 --> 02:37:32,959
into one megabyte so what we'd rather do

2644
02:37:28,950 --> 02:37:38,159
is have the entity data size actually be

2645
02:37:32,959 --> 02:37:42,869
64 K minus whatever this nonsense is

2646
02:37:38,159 --> 02:37:45,409
here right so let's just do that now cuz

2647
02:37:42,870 --> 02:37:50,279
you brought it up we might as well do it

2648
02:37:45,409 --> 02:37:51,659
and so if we go in here and say what

2649
02:37:50,279 --> 02:37:54,960
slow entity index right here's my

2650
02:37:51,659 --> 02:37:56,609
compile I just want a first seat as does

2651
02:37:54,959 --> 02:37:59,250
anyone use this and if so what do they

2652
02:37:56,609 --> 02:38:00,899
use it for right so if I come in here

2653
02:37:59,250 --> 02:38:02,520
and just say that's a new thing that's

2654
02:38:00,898 --> 02:38:04,379
got an underscore under it does it still

2655
02:38:02,520 --> 02:38:07,710
get used and if so who is using it

2656
02:38:04,379 --> 02:38:10,738
please tell me right so no one's using

2657
02:38:07,709 --> 02:38:12,988
that thing so that can go away does

2658
02:38:10,738 --> 02:38:15,449
anyone use entity count I assume they do

2659
02:38:12,988 --> 02:38:17,520
because they would need to know in order

2660
02:38:15,450 --> 02:38:19,680
for the entity size so I assumed these

2661
02:38:17,520 --> 02:38:21,390
two values are used here but let's just

2662
02:38:19,680 --> 02:38:24,059
validate that fact so I'm going to

2663
02:38:21,389 --> 02:38:27,469
compile it without that low entity index

2664
02:38:24,059 --> 02:38:27,469
stuff at all right

2665
02:38:29,280 --> 02:38:40,931
um here's me running everything seems

2666
02:38:37,601 --> 02:38:42,730
fine right no issues and then the data

2667
02:38:40,931 --> 02:38:47,739
science presumably still needs to be

2668
02:38:42,729 --> 02:38:50,170
used nd counts is it used I think it is

2669
02:38:47,739 --> 02:38:51,579
yeah now we probably don't need to use

2670
02:38:50,170 --> 02:38:53,500
it because this string could probably

2671
02:38:51,579 --> 02:38:54,729
impact as it is I don't care though

2672
02:38:53,500 --> 02:38:57,521
because this is fine

2673
02:38:54,729 --> 02:39:01,390
that's a pointer it's 8 bytes long at

2674
02:38:57,521 --> 02:39:03,670
most these are both 3rd 4 bytes long so

2675
02:39:01,390 --> 02:39:07,060
2 of them is another 8 so really we just

2676
02:39:03,670 --> 02:39:09,670
need to say hey we need at least 16

2677
02:39:07,060 --> 02:39:15,431
bytes of headroom to store a crap so

2678
02:39:09,670 --> 02:39:17,440
just leave it leave that room right now

2679
02:39:15,431 --> 02:39:19,870
when we run we should pack optimally

2680
02:39:17,440 --> 02:39:21,399
hopefully if there isn't another problem

2681
02:39:19,870 --> 02:39:25,150
besides the one we just addressed and

2682
02:39:21,399 --> 02:39:27,369
hey look we pretty much do although it

2683
02:39:25,149 --> 02:39:30,399
looks like for some reason there's still

2684
02:39:27,370 --> 02:39:33,761
a little bit of leftover space here on

2685
02:39:30,399 --> 02:39:35,949
some of these where they can't I don't

2686
02:39:33,761 --> 02:39:42,069
know why and so that would require us

2687
02:39:35,950 --> 02:39:44,980
looking into this a little bit more it

2688
02:39:42,069 --> 02:39:46,869
may have to do with entities being too

2689
02:39:44,979 --> 02:39:49,090
large to fit or something well and then

2690
02:39:46,870 --> 02:39:50,920
that shouldn't happen so I'm not really

2691
02:39:49,090 --> 02:39:52,479
sure why there's empty space on those

2692
02:39:50,920 --> 02:39:55,810
but now you can see we're filling some

2693
02:39:52,479 --> 02:40:03,720
of them up properly why is there extra

2694
02:39:55,810 --> 02:40:06,720
space on any of these now though I don't

2695
02:40:03,720 --> 02:40:06,720
know

2696
02:40:11,260 --> 02:40:16,700
that should have either filled all of

2697
02:40:13,790 --> 02:40:18,440
them or none of them and so the fact

2698
02:40:16,700 --> 02:40:23,090
that it did neither of those two things

2699
02:40:18,440 --> 02:40:26,328
is certainly odd

2700
02:40:23,090 --> 02:40:26,328
[Music]

2701
02:40:36,989 --> 02:40:42,709
so that's a puzzle

2702
02:40:53,909 --> 02:41:04,590
I do suppose that since we are sharing

2703
02:40:57,719 --> 02:41:08,670
this arena with other people that may

2704
02:41:04,590 --> 02:41:11,930
have something to do with it because if

2705
02:41:08,670 --> 02:41:15,450
anyone else tried to allocate something

2706
02:41:11,930 --> 02:41:17,840
during that time we wouldn't place it

2707
02:41:15,450 --> 02:41:21,570
there it would get placed somewhere else

2708
02:41:17,840 --> 02:41:23,819
so if this if the world arena were used

2709
02:41:21,569 --> 02:41:26,879
in some kind of a temp storage fashion

2710
02:41:23,819 --> 02:41:32,909
that could potentially explain it but

2711
02:41:26,879 --> 02:41:35,929
I'm not sure what we could do is make

2712
02:41:32,909 --> 02:41:40,489
the world arena isolated for now and see

2713
02:41:35,930 --> 02:41:44,130
so for example if we did want to do that

2714
02:41:40,489 --> 02:41:58,020
what we could do there is just say so

2715
02:41:44,129 --> 02:42:00,089
inside here if I look at create world so

2716
02:41:58,020 --> 02:42:02,159
in here where it gets past this parent

2717
02:42:00,090 --> 02:42:03,930
arena if instead what I wanted to do was

2718
02:42:02,159 --> 02:42:11,159
just have this thing be a self-contained

2719
02:42:03,930 --> 02:42:13,680
arena right I could say that and get rid

2720
02:42:11,159 --> 02:42:19,789
of this and in that case this would

2721
02:42:13,680 --> 02:42:19,790
become a bootstrap you know I'm saying

2722
02:42:20,220 --> 02:42:23,029
mm-hmm

2723
02:42:23,220 --> 02:42:29,899
and so in that case it would be this

2724
02:42:32,720 --> 02:42:38,939
right and then what we would do is

2725
02:42:35,630 --> 02:42:42,421
anywhere in here where we were looking

2726
02:42:38,940 --> 02:42:45,060
at the arena we just need an ampersand

2727
02:42:42,421 --> 02:42:48,649
on that but that would allow it to keep

2728
02:42:45,060 --> 02:42:59,101
its own separate arena for memory and

2729
02:42:48,649 --> 02:43:01,411
and track separately and then we can to

2730
02:42:59,101 --> 02:43:14,961
ensure that none of what I just said

2731
02:43:01,411 --> 02:43:14,960
is happening there so world chunk

2732
02:43:19,989 --> 02:43:30,521
so that's where the extra memory is

2733
02:43:22,851 --> 02:43:36,230
coming from you can see it right here in

2734
02:43:30,521 --> 02:43:44,480
get world chunk you are having an

2735
02:43:36,229 --> 02:43:47,569
allocation here to you're having an

2736
02:43:44,479 --> 02:43:50,630
allocation there that's keeping the

2737
02:43:47,569 --> 02:43:53,630
headers and so anytime you allocate one

2738
02:43:50,630 --> 02:43:56,329
of those again you cannot fit optimally

2739
02:43:53,630 --> 02:44:05,329
in there if we can fix that and we

2740
02:43:56,329 --> 02:44:08,120
should I think right I'm just going to

2741
02:44:05,329 --> 02:44:09,409
show this now I think we do not need to

2742
02:44:08,120 --> 02:44:11,000
keep it as a separate arena so I

2743
02:44:09,409 --> 02:44:12,829
probably will just back that change out

2744
02:44:11,000 --> 02:44:17,421
but I just wanted to see so you can see

2745
02:44:12,829 --> 02:44:19,819
here if we did that we'd have a separate

2746
02:44:17,421 --> 02:44:22,181
arena here and you can see the storage

2747
02:44:19,819 --> 02:44:26,690
works out to base to the same though

2748
02:44:22,181 --> 02:44:27,230
right so I'm not sure if we want that or

2749
02:44:26,690 --> 02:44:30,409
not

2750
02:44:27,229 --> 02:44:32,300
it's hard to say when you we would have

2751
02:44:30,409 --> 02:44:35,601
to then track this memory separately and

2752
02:44:32,300 --> 02:44:38,390
I'm not really sure I want to do that so

2753
02:44:35,601 --> 02:44:46,480
I think I'll just go ahead and back that

2754
02:44:38,390 --> 02:44:50,750
out but it is pretty simple to do there

2755
02:44:46,479 --> 02:44:53,029
all right so the question is how do we

2756
02:44:50,750 --> 02:44:55,069
avoid this problem right because you can

2757
02:44:53,030 --> 02:44:56,601
see what's happening there and by the

2758
02:44:55,069 --> 02:45:00,050
way this is just another reason why

2759
02:44:56,601 --> 02:45:01,881
visualization is so good it shows us

2760
02:45:00,050 --> 02:45:05,899
exactly where we're wasting our space

2761
02:45:01,880 --> 02:45:08,090
right and that's pretty cool so anyway

2762
02:45:05,899 --> 02:45:13,850
you can see what the problem is when we

2763
02:45:08,091 --> 02:45:15,110
do get world chunk in here we end up

2764
02:45:13,851 --> 02:45:17,210
with a situation where we need to

2765
02:45:15,110 --> 02:45:20,601
allocate this sort of header that goes

2766
02:45:17,209 --> 02:45:23,270
on the front of things and what happens

2767
02:45:20,601 --> 02:45:26,960
is that header is just not very large

2768
02:45:23,271 --> 02:45:31,101
right if you look at a world chunk it's

2769
02:45:26,959 --> 02:45:32,840
this tiny little thing and so we're you

2770
02:45:31,101 --> 02:45:34,851
a little bit extra memory in those

2771
02:45:32,841 --> 02:45:36,800
blocks that have every time we have to

2772
02:45:34,851 --> 02:45:41,319
okay if the header that means now we

2773
02:45:36,800 --> 02:45:44,869
can't fit that 64k in on the end but

2774
02:45:41,319 --> 02:45:47,860
remember we've got free lists here so

2775
02:45:44,870 --> 02:45:52,461
what we can do instead is say when we

2776
02:45:47,860 --> 02:45:55,341
when our free list gets exhausted don't

2777
02:45:52,460 --> 02:45:56,779
let's not do this where we push a single

2778
02:45:55,341 --> 02:45:59,331
thing on the free list and take up a

2779
02:45:56,780 --> 02:46:04,190
little tiny chunk in our arena let's

2780
02:45:59,331 --> 02:46:07,190
take up a whole 64 K why not right so

2781
02:46:04,190 --> 02:46:09,341
instead what we can do is say all right

2782
02:46:07,190 --> 02:46:14,989
hmm

2783
02:46:09,341 --> 02:46:18,819
let's make a chunk array and let's push

2784
02:46:14,989 --> 02:46:18,819
a whole array of these things on there

2785
02:46:21,700 --> 02:46:30,650
like this and the number that we're

2786
02:46:27,200 --> 02:46:35,021
gonna push on let's say we made this

2787
02:46:30,649 --> 02:46:46,790
more systemic and say the world block

2788
02:46:35,021 --> 02:46:49,900
size is this well now we can do is we

2789
02:46:46,790 --> 02:46:54,109
can create a number which we can call

2790
02:46:49,899 --> 02:47:00,199
mmm chunks per block or something like

2791
02:46:54,110 --> 02:47:02,541
that or chunk count per block and we can

2792
02:47:00,200 --> 02:47:04,070
take the number of bytes that are in one

2793
02:47:02,540 --> 02:47:07,000
of the blocks that we use for storage

2794
02:47:04,069 --> 02:47:09,681
and just say how many of them would fit

2795
02:47:07,001 --> 02:47:13,851
once we do that so we can allocate

2796
02:47:09,681 --> 02:47:16,149
exactly that many right and then we just

2797
02:47:13,851 --> 02:47:16,150
loop

2798
02:47:21,560 --> 02:47:31,799
shunk index is less than the count per

2799
02:47:24,899 --> 02:47:35,819
pluck and we just push all of these onto

2800
02:47:31,799 --> 02:47:37,739
our free list right so in here where

2801
02:47:35,819 --> 02:47:40,319
we're going to we were previously gonna

2802
02:47:37,739 --> 02:47:43,199
like sort of initialize this thing like

2803
02:47:40,319 --> 02:47:51,329
like this what we can do is say well

2804
02:47:43,200 --> 02:47:53,370
let's push for each one of these let's

2805
02:47:51,329 --> 02:47:58,170
take the chunk array plus our chunk

2806
02:47:53,370 --> 02:48:12,120
index right let's make that be the chunk

2807
02:47:58,170 --> 02:48:14,220
we're working with right let's set the

2808
02:48:12,120 --> 02:48:18,771
world's first free chunk to be that

2809
02:48:14,220 --> 02:48:22,619
chunk but the next in hash of this one

2810
02:48:18,771 --> 02:48:26,400
to be whatever's in there right so we're

2811
02:48:22,620 --> 02:48:28,380
just kind of daisy chaining these on you

2812
02:48:26,399 --> 02:48:30,479
know I'm saying and we could do that

2813
02:48:28,379 --> 02:48:31,319
even easier if we wanted to but that but

2814
02:48:30,479 --> 02:48:32,879
basically what we're doing is just

2815
02:48:31,319 --> 02:48:34,739
pushing a whole bunch of these on at

2816
02:48:32,879 --> 02:48:41,100
once and then we'll just pull out of the

2817
02:48:34,739 --> 02:48:43,289
free list from then on out right now I

2818
02:48:41,101 --> 02:48:45,950
believe if I did that correctly and of

2819
02:48:43,290 --> 02:48:45,950
course I didn't

2820
02:48:56,399 --> 02:49:00,520
just make sure I got that right now

2821
02:48:58,931 --> 02:49:02,230
first you're trying let's allocate this

2822
02:49:00,521 --> 02:49:08,771
many of those we're gonna go through

2823
02:49:02,229 --> 02:49:09,399
each of them here and we're going to say

2824
02:49:08,771 --> 02:49:14,431
that

2825
02:49:09,399 --> 02:49:17,229
oh no that's totally wrong sorry it's

2826
02:49:14,431 --> 02:49:18,341
new chunk next in hash is whatever their

2827
02:49:17,229 --> 02:49:19,810
current think is on the top of the list

2828
02:49:18,341 --> 02:49:22,540
which is nothing refers to it and then

2829
02:49:19,810 --> 02:49:24,341
that's the new top guy so we just puts

2830
02:49:22,540 --> 02:49:26,021
them all on the free list and other than

2831
02:49:24,341 --> 02:49:31,720
that typo I think we probably did that

2832
02:49:26,021 --> 02:49:34,391
properly and now by allocating them in

2833
02:49:31,720 --> 02:49:41,020
bulk we should have a perfectly packed

2834
02:49:34,390 --> 02:49:45,459
in memory structure and as you can see

2835
02:49:41,021 --> 02:49:49,200
we we definitely do right and so that's

2836
02:49:45,459 --> 02:49:52,060
just the next unused block there right

2837
02:49:49,200 --> 02:49:55,181
and what you can see is now this right

2838
02:49:52,060 --> 02:49:57,940
here is all of the world chunks actually

2839
02:49:55,181 --> 02:50:00,069
got allocated like right here and then

2840
02:49:57,940 --> 02:50:02,620
from then on we were fine for the rest

2841
02:50:00,069 --> 02:50:09,039
of the way however you can see we lose

2842
02:50:02,620 --> 02:50:12,040
we lost some here and I think that that

2843
02:50:09,040 --> 02:50:16,780
is because this doesn't fit evenly so if

2844
02:50:12,040 --> 02:50:20,410
you look the tote the total number of

2845
02:50:16,780 --> 02:50:20,980
these doesn't quite add up the way that

2846
02:50:20,409 --> 02:50:24,909
it should

2847
02:50:20,979 --> 02:50:26,199
I would assume let's well actually no

2848
02:50:24,909 --> 02:50:28,899
you know what that's not the problem

2849
02:50:26,200 --> 02:50:30,820
nevermind that would leave a sliver in a

2850
02:50:28,899 --> 02:50:34,899
different place what that actually is is

2851
02:50:30,819 --> 02:50:36,431
the first time out there's people who

2852
02:50:34,899 --> 02:50:39,761
have used this arena for other things

2853
02:50:36,431 --> 02:50:40,750
right and if we could zoom in there

2854
02:50:39,761 --> 02:50:44,170
which is something we want to add

2855
02:50:40,750 --> 02:50:47,220
eventually I think you can see it's

2856
02:50:44,170 --> 02:50:50,319
handmade world up CBP taking up that 5k

2857
02:50:47,220 --> 02:50:52,029
that's what's offsetting us so that we

2858
02:50:50,319 --> 02:50:53,319
can't fill up that part so that's always

2859
02:50:52,030 --> 02:50:57,190
gonna be the case because that's the

2860
02:50:53,319 --> 02:51:02,529
world structs itself that's sitting in

2861
02:50:57,190 --> 02:51:03,860
there causing that problem right so so

2862
02:51:02,530 --> 02:51:06,239
that's fine

2863
02:51:03,860 --> 02:51:11,159
but then yeah now everybody will be

2864
02:51:06,239 --> 02:51:13,190
perfectly packed from now on and off we

2865
02:51:11,159 --> 02:51:13,190
go

2866
02:51:19,879 --> 02:51:24,599
did you ever figure out mem Lord pages

2867
02:51:22,679 --> 02:51:26,908
for virtual Alec is that what you're

2868
02:51:24,599 --> 02:51:28,498
talking about no men large pages for

2869
02:51:26,908 --> 02:51:35,398
virtual Alec is just if you want to use

2870
02:51:28,498 --> 02:51:38,128
two Meg pages right I think so

2871
02:51:35,398 --> 02:51:39,898
enthusiast says how did people do memory

2872
02:51:38,129 --> 02:51:42,029
management in the era of Commerce 64

2873
02:51:39,898 --> 02:51:43,408
that is so luxurious nowadays with all

2874
02:51:42,029 --> 02:51:47,939
these amounts of memory we have our

2875
02:51:43,408 --> 02:51:52,338
machines yeah well in the Commodore 64

2876
02:51:47,939 --> 02:51:55,828
days while you can look at it two ways

2877
02:51:52,338 --> 02:51:57,088
one obviously they don't have the luxury

2878
02:51:55,828 --> 02:51:58,619
of doing all this crazy stuff we're

2879
02:51:57,088 --> 02:52:02,689
doing now it is because computers are so

2880
02:51:58,619 --> 02:52:06,328
amazing we have so much more horsepower

2881
02:52:02,689 --> 02:52:08,549
but we're expected to do a lot more with

2882
02:52:06,328 --> 02:52:09,838
it right and so it's kind of a

2883
02:52:08,549 --> 02:52:12,569
double-edged sword in the counter

2884
02:52:09,838 --> 02:52:13,588
sixty-four days there you really weren't

2885
02:52:12,568 --> 02:52:16,198
you didn't even have to think about

2886
02:52:13,588 --> 02:52:19,918
memory management as a thing because

2887
02:52:16,199 --> 02:52:21,689
when you only have a 64 K buffer total

2888
02:52:19,918 --> 02:52:24,238
that you're ever going to do stuff with

2889
02:52:21,689 --> 02:52:26,849
the things you can do it with that are

2890
02:52:24,238 --> 02:52:30,029
so limited that you can plan them all

2891
02:52:26,849 --> 02:52:32,699
out ahead of time right and so you're

2892
02:52:30,029 --> 02:52:34,759
not gonna do memory management like

2893
02:52:32,699 --> 02:52:37,199
Noah's gonna allocate things really

2894
02:52:34,759 --> 02:52:39,119
you're just gonna plan like here's the

2895
02:52:37,199 --> 02:52:41,009
buffers we use for each exact thing and

2896
02:52:39,119 --> 02:52:42,509
here's where they are and in different

2897
02:52:41,009 --> 02:52:45,509
modes of the game we use different

2898
02:52:42,509 --> 02:52:47,369
layouts and that's it and everything's

2899
02:52:45,509 --> 02:52:50,520
hard-coded directly to that there's no

2900
02:52:47,369 --> 02:52:52,879
like variable allocation kind of stuff

2901
02:52:50,520 --> 02:52:59,639
that happens there for the most part

2902
02:52:52,879 --> 02:53:01,439
that's my assumption anyway the the

2903
02:52:59,638 --> 02:53:03,718
place where that doesn't entirely happen

2904
02:53:01,439 --> 02:53:06,238
is if you did one of those interpreted

2905
02:53:03,718 --> 02:53:09,898
systems like maybe scummvm or the

2906
02:53:06,238 --> 02:53:11,609
infocomm z machine those may have sort

2907
02:53:09,898 --> 02:53:15,179
of did it did it a little differently

2908
02:53:11,609 --> 02:53:16,679
because they are sort of virtual

2909
02:53:15,179 --> 02:53:18,539
machines so they may have been able to

2910
02:53:16,679 --> 02:53:20,969
do more of a memory paging kind of a

2911
02:53:18,539 --> 02:53:22,649
thing but at the same time they really

2912
02:53:20,968 --> 02:53:24,478
had nowhere to write the memory to so I

2913
02:53:22,648 --> 02:53:30,588
don't know to what extent they really

2914
02:53:24,478 --> 02:53:30,588
did anything like that right

2915
02:53:38,239 --> 02:53:50,431
all right so let's go ahead and close

2916
02:53:44,220 --> 02:53:51,959
this down for today thank you everybody

2917
02:53:50,431 --> 02:53:53,280
for joining me for the episode a hand

2918
02:53:51,959 --> 02:53:55,319
made here it's been a pleasure coding

2919
02:53:53,280 --> 02:53:56,730
with you as always if you would like to

2920
02:53:55,319 --> 02:53:59,039
follow us at home you could always go to

2921
02:53:56,729 --> 02:54:00,300
hand made here org and pre-order the

2922
02:53:59,040 --> 02:54:01,681
game because it comes with a source code

2923
02:54:00,300 --> 02:54:03,630
which I update every night so you can

2924
02:54:01,681 --> 02:54:06,511
play around that at home and do your own

2925
02:54:03,630 --> 02:54:08,880
experimentation with it I'll be back

2926
02:54:06,511 --> 02:54:10,261
tomorrow when we will take the next step

2927
02:54:08,880 --> 02:54:13,859
which is to try and keep edit ease

2928
02:54:10,261 --> 02:54:16,620
around frame to frame as a cache and

2929
02:54:13,860 --> 02:54:17,881
then if that works out well which we'll

2930
02:54:16,620 --> 02:54:20,190
see whether it does or it doesn't you

2931
02:54:17,880 --> 02:54:22,770
know we'll see how much work we have to

2932
02:54:20,190 --> 02:54:25,140
do for that but if we have time and that

2933
02:54:22,771 --> 02:54:28,881
works out well we'll also take the step

2934
02:54:25,140 --> 02:54:32,399
of packing entities in a limited sense

2935
02:54:28,880 --> 02:54:33,449
during that sort of phase so that's

2936
02:54:32,399 --> 02:54:35,039
we'll be doing tomorrow hope see you

2937
02:54:33,450 --> 02:54:36,271
back here for that until then have fun

2938
02:54:35,040 --> 02:54:39,830
programming and I'll see everyone on the

2939
02:54:36,271 --> 02:54:39,829
Internet take it easy everybody

