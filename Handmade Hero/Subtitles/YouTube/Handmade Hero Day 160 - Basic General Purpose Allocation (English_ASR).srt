1
00:00:01,159 --> 00:00:05,189
hello everyone and welcome to handmade

2
00:00:03,750 --> 00:00:07,859
here are the show recode a complete game

3
00:00:05,190 --> 00:00:09,359
live on stream he right here on twitch

4
00:00:07,859 --> 00:00:12,349
with no engines and no libraries it's

5
00:00:09,359 --> 00:00:15,750
just us an old-school programming here

6
00:00:12,349 --> 00:00:18,750
we have built ourselves quite a bit of

7
00:00:15,750 --> 00:00:22,170
stuff over the past hundred and sixty

8
00:00:18,750 --> 00:00:23,550
hours of programming and we're kind of

9
00:00:22,170 --> 00:00:25,618
getting to the end of our engine

10
00:00:23,550 --> 00:00:27,269
development here slowly winding down to

11
00:00:25,618 --> 00:00:28,500
the point where we will have done all

12
00:00:27,268 --> 00:00:30,178
the stuff that we wanted to do for

13
00:00:28,500 --> 00:00:33,149
support and we'll sort of be moving a

14
00:00:30,178 --> 00:00:38,460
little bit into game programming but we

15
00:00:33,149 --> 00:00:41,640
still have a couple big things to go and

16
00:00:38,460 --> 00:00:44,308
right now we kind of got to a point

17
00:00:41,640 --> 00:00:47,250
where we could if we want to call our

18
00:00:44,308 --> 00:00:49,159
asset system done but I kind of wanted

19
00:00:47,250 --> 00:00:52,170
to talk about a couple other things

20
00:00:49,159 --> 00:00:54,479
related to it just to sort of give some

21
00:00:52,170 --> 00:00:56,489
perspective on it right now what we did

22
00:00:54,479 --> 00:00:58,019
yesterday is we finished transitioning

23
00:00:56,488 --> 00:01:00,058
our asset system over to something where

24
00:00:58,020 --> 00:01:03,140
it uses a relatively fixed amount of

25
00:01:00,058 --> 00:01:05,489
memory to operate so it will free assets

26
00:01:03,140 --> 00:01:07,560
when it needs to load new ones it'll go

27
00:01:05,489 --> 00:01:09,478
find ones that aren't used or haven't

28
00:01:07,560 --> 00:01:12,560
been used recently free those and

29
00:01:09,478 --> 00:01:15,299
loading new ones so we've done that but

30
00:01:12,560 --> 00:01:17,070
the way that we did that is I just I

31
00:01:15,299 --> 00:01:19,979
showed how to do the structure of that

32
00:01:17,069 --> 00:01:22,319
given that you could ask for and give

33
00:01:19,978 --> 00:01:25,408
memory back to the operating system so

34
00:01:22,319 --> 00:01:27,419
the operating systems virtual page table

35
00:01:25,409 --> 00:01:29,159
was basically substituting in for a

36
00:01:27,420 --> 00:01:32,820
general-purpose allocator for our

37
00:01:29,159 --> 00:01:35,368
purposes which is actually probably fine

38
00:01:32,819 --> 00:01:38,699
and 64-bit but I don't know that it

39
00:01:35,368 --> 00:01:40,680
would be fine in 32-bit I'm not 100%

40
00:01:38,700 --> 00:01:41,909
confident that and unfortunately we

41
00:01:40,680 --> 00:01:44,520
don't really have a lot of great ways to

42
00:01:41,909 --> 00:01:46,320
test that at the moment since we don't

43
00:01:44,519 --> 00:01:48,149
have the full game done we don't really

44
00:01:46,319 --> 00:01:50,429
know we can't just run it under 32-bit

45
00:01:48,149 --> 00:01:52,079
and see whether the asset load and usage

46
00:01:50,430 --> 00:01:54,840
patterns happen to create problems or

47
00:01:52,078 --> 00:01:56,578
not so I don't really know but what we

48
00:01:54,840 --> 00:01:59,189
might want to do for at the very least

49
00:01:56,578 --> 00:02:00,359
is take a little bit of a look at

50
00:01:59,188 --> 00:02:02,908
writing our own general-purpose

51
00:02:00,359 --> 00:02:06,030
allocator in there for educational

52
00:02:02,909 --> 00:02:07,469
purposes and you know we can write it in

53
00:02:06,030 --> 00:02:10,199
such a way that it's free for us to

54
00:02:07,468 --> 00:02:11,549
switch between the two right and that

55
00:02:10,199 --> 00:02:13,049
way we could get a little perspective on

56
00:02:11,550 --> 00:02:13,950
it but still always have the ability to

57
00:02:13,050 --> 00:02:15,330
switch to the opera

58
00:02:13,949 --> 00:02:20,399
systems 1 if we find that that's more

59
00:02:15,330 --> 00:02:21,690
expedient or more useful so I think that

60
00:02:20,400 --> 00:02:24,629
might be what we'll take a look at today

61
00:02:21,689 --> 00:02:27,120
but before I do that let me point out

62
00:02:24,628 --> 00:02:28,590
that today is day 160 if you have

63
00:02:27,120 --> 00:02:30,959
pre-ordered the game on handmade hero

64
00:02:28,590 --> 00:02:33,390
org then what you want to do is unzip

65
00:02:30,959 --> 00:02:34,739
day 159 source code into a directory

66
00:02:33,389 --> 00:02:37,049
that is the source code that I am

67
00:02:34,739 --> 00:02:38,129
starting with today and so you will be

68
00:02:37,050 --> 00:02:41,849
able to follow along at home if you

69
00:02:38,129 --> 00:02:47,400
start with day 159 all right so where we

70
00:02:41,848 --> 00:02:50,699
left off see here let's go ahead and

71
00:02:47,400 --> 00:02:57,299
load this load this up where we left off

72
00:02:50,699 --> 00:02:59,459
is we had we had everything kind of

73
00:02:57,299 --> 00:03:01,170
working and paging out assets and it was

74
00:02:59,459 --> 00:03:03,989
just we were forcing it to use a very

75
00:03:01,169 --> 00:03:06,389
small asset size a total asset footprint

76
00:03:03,989 --> 00:03:09,150
and it seems to be doing that just fine

77
00:03:06,389 --> 00:03:11,789
we can do whatever we want and it seems

78
00:03:09,150 --> 00:03:14,310
to handle it no problems with that and

79
00:03:11,789 --> 00:03:16,048
yes we still have like heads spewing out

80
00:03:14,310 --> 00:03:18,000
of us that's just something that happens

81
00:03:16,049 --> 00:03:20,909
now it again there's no reason to be

82
00:03:18,000 --> 00:03:23,129
alarmed about that it's all fine but

83
00:03:20,909 --> 00:03:26,909
what I was saying was that if you take a

84
00:03:23,129 --> 00:03:28,650
look inside handmade assets EPP what you

85
00:03:26,909 --> 00:03:30,780
can see is that we were calling and

86
00:03:28,650 --> 00:03:32,760
allocate function we have these two

87
00:03:30,780 --> 00:03:34,560
things acquire asset memory and release

88
00:03:32,759 --> 00:03:36,689
asset memory and what we were doing

89
00:03:34,560 --> 00:03:38,459
there is we were just basically punting

90
00:03:36,689 --> 00:03:39,989
to the operating system and asking the

91
00:03:38,459 --> 00:03:41,759
operating system for a new set of pages

92
00:03:39,989 --> 00:03:43,769
every time we wanted to store an asset

93
00:03:41,759 --> 00:03:45,568
and then releasing pages back to the

94
00:03:43,769 --> 00:03:53,569
operating system every time we got rid

95
00:03:45,568 --> 00:03:56,068
of an asset right so if we wanted to

96
00:03:53,568 --> 00:03:57,539
what we would do here if we wanted to

97
00:03:56,068 --> 00:03:59,759
basically do the memory allocation

98
00:03:57,539 --> 00:04:01,530
entirely ourselves is we just want to

99
00:03:59,759 --> 00:04:04,019
replace these two functions acquire

100
00:04:01,530 --> 00:04:06,090
asset memory and release asset memory we

101
00:04:04,019 --> 00:04:07,739
want to replace those two functions with

102
00:04:06,090 --> 00:04:10,319
functions that we could implement

103
00:04:07,739 --> 00:04:13,289
ourselves that would allocate or free

104
00:04:10,318 --> 00:04:15,358
the memory right so that's you know

105
00:04:13,289 --> 00:04:16,409
that's what I mean by writing a

106
00:04:15,359 --> 00:04:18,389
general-purpose allocator

107
00:04:16,410 --> 00:04:21,120
you notice that these are completely

108
00:04:18,389 --> 00:04:23,550
general the assets can be free to any

109
00:04:21,120 --> 00:04:26,788
time or allocated any times there is no

110
00:04:23,550 --> 00:04:27,540
stack like structure to it which most of

111
00:04:26,788 --> 00:04:31,050
the things in a

112
00:04:27,540 --> 00:04:32,780
are happy to use and that is why we get

113
00:04:31,050 --> 00:04:35,040
away with not really needing any

114
00:04:32,779 --> 00:04:37,049
general-purpose allocators or any other

115
00:04:35,040 --> 00:04:40,410
things like that anywhere else right

116
00:04:37,050 --> 00:04:42,689
essentially by structuring things so

117
00:04:40,410 --> 00:04:44,280
that they operate on stacks what that

118
00:04:42,689 --> 00:04:46,620
basically gives us is it gets us out of

119
00:04:44,279 --> 00:04:48,239
having to deal with any lifetime issues

120
00:04:46,620 --> 00:04:50,220
so that's why we don't need a garbage

121
00:04:48,240 --> 00:04:52,050
collector right or anything like that

122
00:04:50,220 --> 00:04:53,250
you know we don't need to or we and we

123
00:04:52,050 --> 00:04:56,160
don't need smart pointers doing any of

124
00:04:53,250 --> 00:04:58,110
that stuff right so it gets us out of

125
00:04:56,160 --> 00:04:59,670
that and it gets us out of having to

126
00:04:58,110 --> 00:05:00,960
write something that does allocation

127
00:04:59,670 --> 00:05:03,000
placement because we know that things

128
00:05:00,959 --> 00:05:04,919
just come in in order right so basically

129
00:05:03,000 --> 00:05:07,769
structuring this taxes actually gives us

130
00:05:04,920 --> 00:05:09,330
this twofold benefit it allows us to get

131
00:05:07,769 --> 00:05:10,439
a not have to worry about lifetime stuff

132
00:05:09,329 --> 00:05:12,089
so no garbage structures no smart

133
00:05:10,439 --> 00:05:12,629
pointers that stuff right so that's

134
00:05:12,089 --> 00:05:14,609
great

135
00:05:12,629 --> 00:05:15,870
gets rid of all that complexity and any

136
00:05:14,610 --> 00:05:16,530
kind of performance problems all that

137
00:05:15,870 --> 00:05:19,500
stuff is gone

138
00:05:16,529 --> 00:05:20,939
and it gets us out of the notion of

139
00:05:19,500 --> 00:05:23,310
having to figure out where to place

140
00:05:20,939 --> 00:05:24,930
things in memory which is kind of a

141
00:05:23,310 --> 00:05:28,740
separate thing from lifetime management

142
00:05:24,930 --> 00:05:30,300
and that of course is is because things

143
00:05:28,740 --> 00:05:31,829
just can come in and order and get

144
00:05:30,300 --> 00:05:34,740
popped off in order right that's the

145
00:05:31,829 --> 00:05:37,019
nature of a stack and so what we have in

146
00:05:34,740 --> 00:05:39,389
the asset system is we don't really have

147
00:05:37,019 --> 00:05:41,549
a lifetime management problem because we

148
00:05:39,389 --> 00:05:43,889
all that stuff is very clearly known and

149
00:05:41,550 --> 00:05:45,930
the asset system itself does you know

150
00:05:43,889 --> 00:05:47,909
its own least recently used tracking of

151
00:05:45,930 --> 00:05:49,439
that so again it's a kind of a virtual

152
00:05:47,910 --> 00:05:51,780
memory scheme in there so we've done the

153
00:05:49,439 --> 00:05:55,160
work to figure out what kinds of

154
00:05:51,779 --> 00:05:57,989
lifetime stuff we want to have happen

155
00:05:55,160 --> 00:05:58,860
and so we don't need any of the other so

156
00:05:57,990 --> 00:05:59,970
we don't need some IRA pointers or

157
00:05:58,860 --> 00:06:02,670
garbage collectors or that sorts of

158
00:05:59,970 --> 00:06:03,870
things because we you know again once we

159
00:06:02,670 --> 00:06:05,460
actually write the algorithm that we

160
00:06:03,870 --> 00:06:06,840
actually want for hat figuring out life

161
00:06:05,459 --> 00:06:08,969
times which was that sort of circular

162
00:06:06,839 --> 00:06:12,599
link list thing those other things are

163
00:06:08,970 --> 00:06:14,400
extraneous we don't need them but we do

164
00:06:12,600 --> 00:06:17,820
have the problem of where to place the

165
00:06:14,399 --> 00:06:24,089
memory right and that is the part that

166
00:06:17,819 --> 00:06:26,879
we are left with here right so what you

167
00:06:24,089 --> 00:06:29,099
could imagine is if we were to take sort

168
00:06:26,879 --> 00:06:31,649
of a giant chunk of memory and say all

169
00:06:29,100 --> 00:06:34,590
you get mr. asset system is that giant

170
00:06:31,649 --> 00:06:36,989
chunk of memory what are you going to do

171
00:06:34,589 --> 00:06:39,029
when we do acquire an asset memory how

172
00:06:36,990 --> 00:06:41,220
are you going to manage that right how

173
00:06:39,029 --> 00:06:44,399
are you going to deal with what's going

174
00:06:41,220 --> 00:06:47,250
happen as that stuff gets allocated and

175
00:06:44,399 --> 00:06:49,279
free and we talked about essentially the

176
00:06:47,250 --> 00:06:51,329
you know the fundamental problem there

177
00:06:49,279 --> 00:06:54,419
which is that you know you've kind of

178
00:06:51,329 --> 00:06:55,889
got this this structure happening and if

179
00:06:54,420 --> 00:06:58,470
you imagine what happens in our stack

180
00:06:55,889 --> 00:07:00,419
you know you allocate asset a then you

181
00:06:58,470 --> 00:07:03,330
allocate asset B and then you allocate

182
00:07:00,420 --> 00:07:04,650
assets C and then maybe D and E and

183
00:07:03,329 --> 00:07:09,120
there are all different sizes right

184
00:07:04,649 --> 00:07:11,250
currently and so on and so what we want

185
00:07:09,120 --> 00:07:14,009
to do is we want to say okay at some

186
00:07:11,250 --> 00:07:17,370
point we're gonna have to allocate a new

187
00:07:14,009 --> 00:07:19,980
asset right and that's gonna be asset H

188
00:07:17,370 --> 00:07:22,649
but we're filt we're full up there's no

189
00:07:19,980 --> 00:07:25,110
room for asset H in here right so now we

190
00:07:22,649 --> 00:07:28,109
have to figure out we want to evict

191
00:07:25,110 --> 00:07:29,759
least recently used people and maybe you

192
00:07:28,110 --> 00:07:32,639
know we start to evict released recently

193
00:07:29,759 --> 00:07:34,500
used people we get into a situation

194
00:07:32,639 --> 00:07:38,009
where we can't fit it so maybe B was the

195
00:07:34,500 --> 00:07:40,560
least recently used right now if B was

196
00:07:38,009 --> 00:07:42,240
bigger than H or the same size as H we

197
00:07:40,560 --> 00:07:46,829
could just slot it right in there

198
00:07:42,240 --> 00:07:49,620
right but unfortunately for us if it's

199
00:07:46,829 --> 00:07:51,240
not then H can't fit and so then we have

200
00:07:49,620 --> 00:07:53,579
to evict the next you know we have to

201
00:07:51,240 --> 00:07:55,918
evict more things right like maybe a or

202
00:07:53,579 --> 00:07:59,099
something right and then we would know

203
00:07:55,918 --> 00:08:02,189
oh okay H can fit in here and so then

204
00:07:59,100 --> 00:08:03,660
we're able to place H right and you can

205
00:08:02,189 --> 00:08:05,519
see that's pretty pretty hard problem

206
00:08:03,660 --> 00:08:07,760
you could see that if you really needed

207
00:08:05,519 --> 00:08:09,959
to make this very tight and very good

208
00:08:07,759 --> 00:08:12,269
you could sort of see this being

209
00:08:09,959 --> 00:08:13,859
actually a very big time investment on a

210
00:08:12,269 --> 00:08:15,478
project if like if you felt like this

211
00:08:13,860 --> 00:08:16,979
was crucial to the success of your game

212
00:08:15,478 --> 00:08:19,889
for example which it's not going to be

213
00:08:16,978 --> 00:08:21,360
in handmade hero because we have

214
00:08:19,889 --> 00:08:22,889
probably plenty of memory to play with

215
00:08:21,360 --> 00:08:25,050
but if you are like really obsessed with

216
00:08:22,889 --> 00:08:28,560
getting the smallest possible memory

217
00:08:25,050 --> 00:08:31,620
footprint and the most possible asset

218
00:08:28,560 --> 00:08:32,940
preservation you can see how this would

219
00:08:31,620 --> 00:08:34,950
be pretty complicated because in this

220
00:08:32,940 --> 00:08:37,500
case like you might look and say oh well

221
00:08:34,950 --> 00:08:40,650
the least recently used was B the next

222
00:08:37,500 --> 00:08:44,279
most recently used were like was like E

223
00:08:40,649 --> 00:08:46,289
and F right and enf taken together will

224
00:08:44,279 --> 00:08:49,649
fit H but B won't

225
00:08:46,289 --> 00:08:51,750
and since freeing B doesn't help us put

226
00:08:49,649 --> 00:08:54,360
H in there we just shouldn't freebie

227
00:08:51,750 --> 00:08:55,049
right we should free these other guys

228
00:08:54,360 --> 00:08:56,340
instead

229
00:08:55,049 --> 00:08:57,269
and that's a really complicated thing to

230
00:08:56,340 --> 00:08:59,399
think about because you need to think

231
00:08:57,269 --> 00:09:00,929
about like where they are and like what

232
00:08:59,399 --> 00:09:03,809
will happen when you free multiple of

233
00:09:00,929 --> 00:09:05,639
them you know what if it was like II was

234
00:09:03,809 --> 00:09:07,679
the least recently used and then B and

235
00:09:05,639 --> 00:09:10,590
then F and so then you'd have to know to

236
00:09:07,679 --> 00:09:12,269
like free e skip B leave it there free F

237
00:09:10,590 --> 00:09:14,160
and then you'd figure out that it would

238
00:09:12,269 --> 00:09:21,269
be big in it right you can see this it's

239
00:09:14,159 --> 00:09:22,549
really pretty complicated right so

240
00:09:21,269 --> 00:09:26,220
hopefully you can kind of appreciate

241
00:09:22,549 --> 00:09:29,750
that this is sort of a whole domain of

242
00:09:26,220 --> 00:09:31,350
interesting problems memory placement in

243
00:09:29,750 --> 00:09:33,330
fragmentation management that's where

244
00:09:31,350 --> 00:09:35,550
stuff it's like a whole field and you

245
00:09:33,330 --> 00:09:38,910
could choose to spend months if this was

246
00:09:35,549 --> 00:09:42,000
your jam or if it was very important for

247
00:09:38,909 --> 00:09:43,649
something you were doing like optimizing

248
00:09:42,000 --> 00:09:46,470
this sort of stuff and I say optimizing

249
00:09:43,649 --> 00:09:48,899
I don't mean like fiddling with Cindy

250
00:09:46,470 --> 00:09:51,810
like to get like cycles down or whatever

251
00:09:48,899 --> 00:09:53,340
I mean algorithmically thinking about it

252
00:09:51,809 --> 00:09:54,779
and changing how your algorithms worked

253
00:09:53,340 --> 00:09:57,240
and building interesting data structures

254
00:09:54,779 --> 00:09:58,860
and doing you know who knows what now I

255
00:09:57,240 --> 00:10:00,060
might also suggest that if that was what

256
00:09:58,860 --> 00:10:01,980
you were gonna do though that may be

257
00:10:00,059 --> 00:10:04,500
picking one of the other options that we

258
00:10:01,980 --> 00:10:06,629
had further up the chain like making the

259
00:10:04,500 --> 00:10:08,669
asset files be broken into tile so that

260
00:10:06,629 --> 00:10:10,230
you know you always load things of

261
00:10:08,669 --> 00:10:12,360
similar sizes and stuff like that that

262
00:10:10,230 --> 00:10:13,800
may have been a smarter thing to do

263
00:10:12,360 --> 00:10:15,779
right

264
00:10:13,799 --> 00:10:17,849
and so you might make different

265
00:10:15,779 --> 00:10:19,860
decisions if you decide this was the the

266
00:10:17,850 --> 00:10:21,600
thing that was most important to you as

267
00:10:19,860 --> 00:10:24,060
well and that's the sort of a separate

268
00:10:21,600 --> 00:10:25,590
issue but again if it turned out that

269
00:10:24,059 --> 00:10:27,389
you were in a situation where variable

270
00:10:25,590 --> 00:10:30,660
allocation was necessary and it was

271
00:10:27,389 --> 00:10:33,240
crucial it's kind of this whole separate

272
00:10:30,659 --> 00:10:35,490
field that you could go into and look

273
00:10:33,240 --> 00:10:36,659
into and we're not gonna get that hard

274
00:10:35,490 --> 00:10:38,279
core on it because there's really no

275
00:10:36,659 --> 00:10:42,629
need for us to do so but I just wanted

276
00:10:38,279 --> 00:10:45,059
to kind of make you aware of that so

277
00:10:42,629 --> 00:10:46,740
let's talk about this a little like how

278
00:10:45,059 --> 00:10:49,409
would we go about implementing something

279
00:10:46,740 --> 00:10:51,480
like this as a very straightforward kind

280
00:10:49,409 --> 00:10:53,399
of a thing so you can kind of imagine

281
00:10:51,480 --> 00:10:56,820
what we would have at the beginning is

282
00:10:53,399 --> 00:10:59,220
we just have a gigantic empty piece of

283
00:10:56,820 --> 00:11:02,580
memory right we just say like oh you

284
00:10:59,220 --> 00:11:04,350
know we'd have and to be fair we might

285
00:11:02,580 --> 00:11:06,690
say that we don't have one gigantic

286
00:11:04,350 --> 00:11:08,850
piece because maybe windows can't on

287
00:11:06,690 --> 00:11:10,680
32-bit windows you know maybe we

288
00:11:08,850 --> 00:11:12,180
use two gigabytes well that's not

289
00:11:10,679 --> 00:11:13,769
realistic maybe we want to use one

290
00:11:12,179 --> 00:11:16,109
gigabyte for our asset storage or

291
00:11:13,769 --> 00:11:18,269
something fairly large and on 32-bit

292
00:11:16,110 --> 00:11:19,940
Windows it can't find one gigabyte of

293
00:11:18,269 --> 00:11:23,519
contiguous memory or something like this

294
00:11:19,940 --> 00:11:25,230
and so out trying to out virtual a lock

295
00:11:23,519 --> 00:11:29,009
one gigabyte as something to give our

296
00:11:25,230 --> 00:11:30,930
app might just not work okay so we may

297
00:11:29,009 --> 00:11:34,259
need to do is say okay we would start

298
00:11:30,929 --> 00:11:36,508
off with some series of things some

299
00:11:34,259 --> 00:11:37,829
series of free regions right so it

300
00:11:36,509 --> 00:11:41,430
wouldn't it only be one big one it would

301
00:11:37,828 --> 00:11:43,138
be something like a few regions that we

302
00:11:41,429 --> 00:11:45,359
get handed from the operating system

303
00:11:43,139 --> 00:11:47,970
right so we've kind of got a set here

304
00:11:45,360 --> 00:11:50,339
right and each one of these is something

305
00:11:47,970 --> 00:11:54,839
like you know maybe each one of these is

306
00:11:50,339 --> 00:11:56,910
is 256 Meg's right I don't know or maybe

307
00:11:54,839 --> 00:11:57,899
it's like you know maybe that's even

308
00:11:56,909 --> 00:11:59,009
that's too big I don't know what it

309
00:11:57,899 --> 00:12:02,539
would be be whatever we can get away

310
00:11:59,009 --> 00:12:05,339
with 64 megabytes who knows right

311
00:12:02,539 --> 00:12:07,799
so we'd have some number of these chunks

312
00:12:05,339 --> 00:12:09,449
and we would need some kind of a free

313
00:12:07,799 --> 00:12:17,490
list basically some kind of a thing that

314
00:12:09,448 --> 00:12:20,758
manages the memory that we've got where

315
00:12:17,490 --> 00:12:23,188
we could sort of say okay what I need to

316
00:12:20,759 --> 00:12:24,419
allocate something I going to take some

317
00:12:23,188 --> 00:12:26,490
space from one of these things that's

318
00:12:24,419 --> 00:12:28,528
free right and we could fill them up

319
00:12:26,490 --> 00:12:29,938
initially just like the stacks so then

320
00:12:28,528 --> 00:12:31,289
we could put something if we needed to

321
00:12:29,938 --> 00:12:32,549
put something in there we put something

322
00:12:31,289 --> 00:12:34,318
in there and now we know that it's got

323
00:12:32,549 --> 00:12:36,208
less free so now it's got you know fifty

324
00:12:34,318 --> 00:12:37,578
nine megabytes free or something like

325
00:12:36,208 --> 00:12:41,568
that right

326
00:12:37,578 --> 00:12:43,739
who knows so something like that and

327
00:12:41,568 --> 00:12:45,629
then what we need to be able to do

328
00:12:43,740 --> 00:12:47,188
eventually and that's pretty easy right

329
00:12:45,629 --> 00:12:48,088
and when this gets full we could just

330
00:12:47,188 --> 00:12:49,500
put it in the next one

331
00:12:48,089 --> 00:12:51,269
so what we need to do is basically have

332
00:12:49,500 --> 00:12:53,429
some kind of a list that sort of says

333
00:12:51,269 --> 00:12:55,470
okay here are the things that we've got

334
00:12:53,429 --> 00:12:56,698
free right here are the places we could

335
00:12:55,470 --> 00:12:58,110
put stuff and when we need to put stuff

336
00:12:56,698 --> 00:12:59,698
we look to see if any of them can hold

337
00:12:58,110 --> 00:13:02,399
it if they can we put it there if we

338
00:12:59,698 --> 00:13:03,929
don't need oh right and so where things

339
00:13:02,399 --> 00:13:06,240
start to get more complicated is when

340
00:13:03,929 --> 00:13:08,008
this starts to get oh you know this is a

341
00:13:06,240 --> 00:13:09,990
start get a little bit trickier but you

342
00:13:08,009 --> 00:13:11,610
know if you think about it that initial

343
00:13:09,990 --> 00:13:13,919
situation where I just have a couple of

344
00:13:11,610 --> 00:13:15,899
these free that's really old

345
00:13:13,919 --> 00:13:18,659
the same thing is gonna happen once I

346
00:13:15,899 --> 00:13:20,639
start getting fragmentation right if I

347
00:13:18,659 --> 00:13:22,589
have some guy in here who's got like a

348
00:13:20,639 --> 00:13:26,039
couple things right

349
00:13:22,590 --> 00:13:28,160
free or a couple things filled and then

350
00:13:26,039 --> 00:13:30,509
I free something out of the middle right

351
00:13:28,159 --> 00:13:32,730
and maybe free something out of the top

352
00:13:30,509 --> 00:13:35,100
then really what I could think of this

353
00:13:32,730 --> 00:13:37,200
as being is just another set of

354
00:13:35,100 --> 00:13:38,850
fragments here right I could just think

355
00:13:37,200 --> 00:13:40,230
of us as having more fragments here is

356
00:13:38,850 --> 00:13:43,860
one free fragment and here's another

357
00:13:40,230 --> 00:13:46,230
free fragment right so in some sense you

358
00:13:43,860 --> 00:13:48,419
can sort of see that like we could start

359
00:13:46,230 --> 00:13:50,550
to think about the memory as sort of

360
00:13:48,419 --> 00:13:52,949
this concept of some series of blocks

361
00:13:50,549 --> 00:13:55,919
which could have stuff put in them in

362
00:13:52,950 --> 00:13:57,930
each of them has like a size right so

363
00:13:55,919 --> 00:14:00,299
each of the allocator each of the the

364
00:13:57,929 --> 00:14:03,259
memory reasons has some size and it's

365
00:14:00,299 --> 00:14:05,429
like this much memory is free and then

366
00:14:03,259 --> 00:14:07,439
in some sense when we're actually doing

367
00:14:05,429 --> 00:14:08,909
the allocation we don't really even have

368
00:14:07,440 --> 00:14:10,680
to think about the parts that are filled

369
00:14:08,909 --> 00:14:11,610
in some sense right we just have to

370
00:14:10,679 --> 00:14:13,620
think about the thoughts that are free

371
00:14:11,610 --> 00:14:16,560
because the allocator just needs to know

372
00:14:13,620 --> 00:14:18,120
is there a chunk of memory that could

373
00:14:16,559 --> 00:14:23,759
hold this thing that I'm trying to put

374
00:14:18,120 --> 00:14:27,600
in it right that's all it really needs

375
00:14:23,759 --> 00:14:29,129
to know so whereas things start to get

376
00:14:27,600 --> 00:14:31,610
more interesting in terms of having to

377
00:14:29,129 --> 00:14:34,679
think about the actual field space is

378
00:14:31,610 --> 00:14:38,940
when stuff gets freed right so if I take

379
00:14:34,679 --> 00:14:41,519
a view of this block here right if I

380
00:14:38,940 --> 00:14:43,830
were to just view this block right of

381
00:14:41,519 --> 00:14:45,419
stuff where I filled it here and I

382
00:14:43,830 --> 00:14:47,430
filled it here but it's empty here in

383
00:14:45,419 --> 00:14:50,339
here if I were to think of that as just

384
00:14:47,429 --> 00:14:52,349
disjoint regions right here's region a

385
00:14:50,340 --> 00:14:55,019
here's region B and I've got a and I've

386
00:14:52,350 --> 00:14:57,090
got B right well that would work fine

387
00:14:55,019 --> 00:14:58,559
for allocation nothing wrong happens to

388
00:14:57,090 --> 00:15:00,060
allocation we would just look at a and

389
00:14:58,559 --> 00:15:01,919
say can we fit something in a we look at

390
00:15:00,059 --> 00:15:06,539
B can we fit something in B and party on

391
00:15:01,919 --> 00:15:08,819
right but what happens when we free this

392
00:15:06,539 --> 00:15:12,059
block right here right it's between a

393
00:15:08,820 --> 00:15:16,110
and B if this block got freed then a and

394
00:15:12,059 --> 00:15:18,599
B are now actually not separated anymore

395
00:15:16,110 --> 00:15:20,940
there's a contiguous thing there so they

396
00:15:18,600 --> 00:15:22,920
can actually become a bigger single

397
00:15:20,940 --> 00:15:27,060
contiguous block for allocation purposes

398
00:15:22,919 --> 00:15:31,289
right they can become you know a B C

399
00:15:27,059 --> 00:15:33,479
this whole block right so even though

400
00:15:31,289 --> 00:15:36,490
when we're allocating we don't actually

401
00:15:33,480 --> 00:15:38,950
care about the filled space

402
00:15:36,490 --> 00:15:42,278
we do need some way of knowing that

403
00:15:38,950 --> 00:15:44,528
there is free space I'm sorry of the

404
00:15:42,278 --> 00:15:46,689
filled space we need some way of knowing

405
00:15:44,528 --> 00:15:49,958
that there's filled space because the

406
00:15:46,690 --> 00:15:52,480
only way we can know to recombine memory

407
00:15:49,958 --> 00:15:55,799
back into bigger chunks is if we know

408
00:15:52,480 --> 00:15:59,379
when we free the free space where it lay

409
00:15:55,799 --> 00:16:03,789
will in relation to the other chunks of

410
00:15:59,379 --> 00:16:05,740
memory right so that's how that works

411
00:16:03,789 --> 00:16:09,250
that's that's what we're gonna have to

412
00:16:05,740 --> 00:16:12,549
do now what if some of the things we

413
00:16:09,250 --> 00:16:14,909
know well this is an asset system so

414
00:16:12,549 --> 00:16:16,958
basically there's no small assets right

415
00:16:14,909 --> 00:16:18,549
so basically what we're talking about

416
00:16:16,958 --> 00:16:20,559
here is we don't have to worry about

417
00:16:18,549 --> 00:16:24,250
things like someone allocating one byte

418
00:16:20,559 --> 00:16:25,569
or sixteen bytes nobody to me allocating

419
00:16:24,250 --> 00:16:28,000
small things people are gonna be

420
00:16:25,570 --> 00:16:28,899
allocating things that are like 64 K or

421
00:16:28,000 --> 00:16:31,149
something right there gonna be

422
00:16:28,899 --> 00:16:33,639
allocating chunks that are reasonably

423
00:16:31,149 --> 00:16:36,490
sized and what that means is we're never

424
00:16:33,639 --> 00:16:38,559
going to have really any situation we

425
00:16:36,490 --> 00:16:40,389
could we can pre declare that we're

426
00:16:38,559 --> 00:16:43,569
never gonna have any situation where the

427
00:16:40,389 --> 00:16:47,470
free space itself couldn't fit a fair

428
00:16:43,570 --> 00:16:50,160
bit of data in it right we can just that

429
00:16:47,470 --> 00:16:52,450
can just happen right it's not an issue

430
00:16:50,159 --> 00:16:54,578
and so what we could start to do here

431
00:16:52,450 --> 00:16:57,220
just thinking about it right is we could

432
00:16:54,578 --> 00:16:59,439
start to think about saying well okay if

433
00:16:57,220 --> 00:17:01,959
we just wanted to do this in a very

434
00:16:59,440 --> 00:17:04,240
inefficient fashion you could imagine

435
00:17:01,958 --> 00:17:07,599
doing something where we just we have

436
00:17:04,240 --> 00:17:10,088
lots of memory right and those blocks of

437
00:17:07,599 --> 00:17:12,969
memory are laid out such that every free

438
00:17:10,088 --> 00:17:16,769
block of memory you know kind of on its

439
00:17:12,970 --> 00:17:20,890
either side has some information about

440
00:17:16,769 --> 00:17:23,289
what comes after it right or who it is

441
00:17:20,890 --> 00:17:25,209
even something like this right so you

442
00:17:23,289 --> 00:17:29,769
can imagine that if we freed this block

443
00:17:25,209 --> 00:17:31,330
of memory and we wanted to know if we

444
00:17:29,769 --> 00:17:34,690
could merge it with the block above it

445
00:17:31,329 --> 00:17:37,509
right you could imagine us doing

446
00:17:34,690 --> 00:17:39,940
something where we actually have some

447
00:17:37,509 --> 00:17:42,490
information about that block stored

448
00:17:39,940 --> 00:17:44,380
right in sort of in lines with the

449
00:17:42,490 --> 00:17:46,179
blocks themselves right you could

450
00:17:44,380 --> 00:17:48,160
imagine some kind of little like header

451
00:17:46,179 --> 00:17:49,670
information that's in there in such a

452
00:17:48,160 --> 00:17:51,950
way that we wouldn't have to you

453
00:17:49,670 --> 00:17:54,320
an out-of-band piece of storage for it

454
00:17:51,950 --> 00:17:55,250
and so that we wouldn't have to pre work

455
00:17:54,319 --> 00:17:57,799
you know we wouldn't have to really

456
00:17:55,250 --> 00:17:59,119
worry so much about how many there would

457
00:17:57,799 --> 00:18:00,710
be because it's just a block of memory

458
00:17:59,119 --> 00:18:02,929
and however many chunks you dice it up

459
00:18:00,710 --> 00:18:04,340
into those chunks themselves would store

460
00:18:02,930 --> 00:18:05,840
little pieces of information in them

461
00:18:04,339 --> 00:18:10,069
that let us know what we would do with

462
00:18:05,839 --> 00:18:12,019
those chunks later right so I don't know

463
00:18:10,069 --> 00:18:16,429
you can you can kind of see what I'm

464
00:18:12,019 --> 00:18:19,670
getting at here there's probably some

465
00:18:16,430 --> 00:18:22,250
options we have for just putting in line

466
00:18:19,670 --> 00:18:24,800
with the memory the information we would

467
00:18:22,250 --> 00:18:31,250
need to do say the merging operation

468
00:18:24,799 --> 00:18:33,529
right that's plausible so yeah so

469
00:18:31,250 --> 00:18:36,559
there's stuff like that and we can start

470
00:18:33,529 --> 00:18:37,490
playing with that so the real thing you

471
00:18:36,559 --> 00:18:38,809
know and if you think about that

472
00:18:37,490 --> 00:18:40,370
operation it's not very complicated I'm

473
00:18:38,809 --> 00:18:41,809
gonna free this thing I need to check to

474
00:18:40,369 --> 00:18:44,809
see whether I merge it up or merge it

475
00:18:41,809 --> 00:18:46,579
down or both right that's a pretty easy

476
00:18:44,809 --> 00:18:47,569
thing to conceptualize like it's not

477
00:18:46,579 --> 00:18:48,439
that hard to figure out how we're going

478
00:18:47,569 --> 00:18:49,970
to do it

479
00:18:48,440 --> 00:18:51,500
that's like really not something to be

480
00:18:49,970 --> 00:18:54,740
too concerned about what's a little bit

481
00:18:51,500 --> 00:18:57,259
more concerning right is the allocation

482
00:18:54,740 --> 00:18:58,549
side so let's say we've got all these

483
00:18:57,259 --> 00:18:59,839
things let's say we did this simplest

484
00:18:58,549 --> 00:19:02,509
possible thing and just strung them

485
00:18:59,839 --> 00:19:06,019
together right so we've got you know

486
00:19:02,509 --> 00:19:08,240
something that looks like this right and

487
00:19:06,019 --> 00:19:13,460
we've got some stuff that's actually

488
00:19:08,240 --> 00:19:17,660
being used in there like so something

489
00:19:13,460 --> 00:19:19,970
like this so let's say we need to

490
00:19:17,660 --> 00:19:21,620
allocate something and what we have is

491
00:19:19,970 --> 00:19:23,240
some kind of threading so we can kind of

492
00:19:21,619 --> 00:19:24,739
go like okay the first free block is

493
00:19:23,240 --> 00:19:26,210
here and it points to the next free

494
00:19:24,740 --> 00:19:27,500
block and that points to the next free

495
00:19:26,210 --> 00:19:28,700
block and that point is the next free

496
00:19:27,500 --> 00:19:32,119
block and that points the next free

497
00:19:28,700 --> 00:19:33,259
block right so what we could do is when

498
00:19:32,119 --> 00:19:35,779
we need to allocate something we just

499
00:19:33,259 --> 00:19:38,359
walk all the free blocks right we just

500
00:19:35,779 --> 00:19:40,879
walk them all all the way through and

501
00:19:38,359 --> 00:19:44,750
after walking all the way through we

502
00:19:40,880 --> 00:19:47,030
just make a decision about what we want

503
00:19:44,750 --> 00:19:49,400
to do in terms of which one we want to

504
00:19:47,029 --> 00:19:51,079
put it in right and presumably the one

505
00:19:49,400 --> 00:19:53,990
we would want to put it in is the free

506
00:19:51,079 --> 00:19:55,970
block whose size is like you know

507
00:19:53,990 --> 00:19:58,000
closest to the size we were looking for

508
00:19:55,970 --> 00:20:00,559
because that leaves the least fragment

509
00:19:58,000 --> 00:20:03,720
or another way to look at it would be if

510
00:20:00,559 --> 00:20:06,240
we were to put this this piece

511
00:20:03,720 --> 00:20:09,450
this asset into this block what would

512
00:20:06,240 --> 00:20:11,279
the leftover block size be and how well

513
00:20:09,450 --> 00:20:15,180
do we think that leftover block size

514
00:20:11,279 --> 00:20:17,190
will actually do we think that left very

515
00:20:15,180 --> 00:20:21,269
much will be usable for anything else

516
00:20:17,190 --> 00:20:23,640
right and one of the interesting things

517
00:20:21,269 --> 00:20:26,670
about our system is that when we load in

518
00:20:23,640 --> 00:20:29,090
our asset files we actually could spin

519
00:20:26,670 --> 00:20:31,620
over them quickly once and determine

520
00:20:29,089 --> 00:20:34,109
what all the asset actual asset sizes

521
00:20:31,619 --> 00:20:37,319
are right that's something we can

522
00:20:34,109 --> 00:20:40,589
actually do and so we would know for

523
00:20:37,319 --> 00:20:42,178
example our rough histogram if we wanted

524
00:20:40,589 --> 00:20:43,980
to we could we could imagine something

525
00:20:42,179 --> 00:20:46,910
where we could actually plot you know we

526
00:20:43,980 --> 00:20:49,890
could say here's a histogram of sizes

527
00:20:46,910 --> 00:20:52,290
where we go like here's a sizes okay

528
00:20:49,890 --> 00:20:55,559
we've got you know 4 K assets and 8 K

529
00:20:52,289 --> 00:20:57,629
assets and 16 K assets and 3 2 K assets

530
00:20:55,558 --> 00:20:59,808
and blah blah blah right and we know we

531
00:20:57,630 --> 00:21:04,440
have some distribution of these things

532
00:20:59,808 --> 00:21:07,769
right something like this we are

533
00:21:04,440 --> 00:21:10,080
actually in a position to make a

534
00:21:07,769 --> 00:21:12,690
heuristic call somewhere right we're in

535
00:21:10,079 --> 00:21:15,149
a position to sort of say if we wanted

536
00:21:12,690 --> 00:21:17,190
to figure lis accurately what the

537
00:21:15,150 --> 00:21:20,429
chances are that we're gonna hit an

538
00:21:17,190 --> 00:21:22,769
asset you know that's in a certain size

539
00:21:20,429 --> 00:21:26,300
range right because if we know that like

540
00:21:22,769 --> 00:21:29,220
you know there's 4,000 16 K assets right

541
00:21:26,299 --> 00:21:38,909
but there's only you know 200 or

542
00:21:29,220 --> 00:21:41,190
something not to scale so you know if we

543
00:21:38,910 --> 00:21:44,220
know that's the case then we would not

544
00:21:41,190 --> 00:21:47,220
be super concerned about something that

545
00:21:44,220 --> 00:21:48,690
left say a 17 K size because we'd be

546
00:21:47,220 --> 00:21:51,089
like well we'll probably be able to fill

547
00:21:48,690 --> 00:21:53,130
that but if the opposite were true and

548
00:21:51,089 --> 00:21:55,139
we had almost no 16 you know we had no

549
00:21:53,130 --> 00:21:57,510
assets less than 16 K but a ton of

550
00:21:55,140 --> 00:22:01,259
assets greater than 16 K we'd be pretty

551
00:21:57,509 --> 00:22:02,970
nervous about leaving at 17 K fragment

552
00:22:01,259 --> 00:22:05,129
because what are we gonna put there you

553
00:22:02,970 --> 00:22:06,329
know very few things could go there so

554
00:22:05,130 --> 00:22:08,510
you know there's stuff we could do like

555
00:22:06,329 --> 00:22:08,509
that

556
00:22:11,679 --> 00:22:19,038
so yeah so that's the situation as it

557
00:22:15,470 --> 00:22:20,870
stands at the moment and you know it's

558
00:22:19,038 --> 00:22:23,658
it's pretty complicated what we're

559
00:22:20,869 --> 00:22:24,979
dealing with here we it's like I said

560
00:22:23,659 --> 00:22:26,149
this is this is pretty complicated code

561
00:22:24,980 --> 00:22:28,759
it might be one of the most complicated

562
00:22:26,148 --> 00:22:30,648
things we do on handmade here oh is this

563
00:22:28,759 --> 00:22:32,450
this part of the asset system right the

564
00:22:30,648 --> 00:22:34,459
whole and with when you when taken

565
00:22:32,450 --> 00:22:36,080
together the whole like okay background

566
00:22:34,460 --> 00:22:38,360
assets are being streamed in and they're

567
00:22:36,079 --> 00:22:40,730
being used in the ground chunks and and

568
00:22:38,359 --> 00:22:42,558
they have arbitrary memory sizes and all

569
00:22:40,730 --> 00:22:45,230
the sort of stuff right you can kind of

570
00:22:42,558 --> 00:22:47,569
see how there's a fair bit of complexity

571
00:22:45,230 --> 00:22:50,870
here compared to say the renderer which

572
00:22:47,569 --> 00:22:53,778
despite the fact that it's a very sort

573
00:22:50,869 --> 00:22:56,928
of you know it's very mathy and it's

574
00:22:53,778 --> 00:23:02,950
it's very intricate it just doesn't have

575
00:22:56,929 --> 00:23:06,009
the same level of sort of I want to say

576
00:23:02,950 --> 00:23:08,870
interlocking pieces it's more like

577
00:23:06,009 --> 00:23:10,278
everything is a very well isolated thing

578
00:23:08,869 --> 00:23:12,528
it's like here's how we fill a pixel and

579
00:23:10,278 --> 00:23:13,819
it just kind of happens right there and

580
00:23:12,528 --> 00:23:16,429
it doesn't have like all these sort of

581
00:23:13,819 --> 00:23:20,689
competing things going at the same time

582
00:23:16,429 --> 00:23:21,980
like this like the asset system does so

583
00:23:20,690 --> 00:23:23,149
really I think the asset system is

584
00:23:21,980 --> 00:23:25,839
probably one of the most complicated

585
00:23:23,148 --> 00:23:28,428
parts when you think about it that way

586
00:23:25,839 --> 00:23:31,158
so anyway yeah so we've got about a half

587
00:23:28,429 --> 00:23:32,919
hour left so let's just you know let's

588
00:23:31,159 --> 00:23:35,090
just play around let's see where we get

589
00:23:32,919 --> 00:23:37,940
we won't try to do anything particularly

590
00:23:35,089 --> 00:23:40,699
fancy here but yeah I mean point being

591
00:23:37,940 --> 00:23:42,110
you can kind of see why there's a fair

592
00:23:40,700 --> 00:23:43,669
bit of complexity here

593
00:23:42,109 --> 00:23:45,199
and there's some things about our asset

594
00:23:43,669 --> 00:23:47,000
system the fact that we have background

595
00:23:45,200 --> 00:23:48,440
threads using the asset system is also

596
00:23:47,000 --> 00:23:50,720
mixing more complicated because it means

597
00:23:48,440 --> 00:23:52,370
that at the point where we allocate

598
00:23:50,720 --> 00:23:53,690
memory we can't necessarily guarantee

599
00:23:52,369 --> 00:23:57,079
that we can free memory at that point

600
00:23:53,690 --> 00:24:01,028
and other sorts of relatively complex

601
00:23:57,079 --> 00:24:01,028
things such as that right

602
00:24:04,890 --> 00:24:08,640
is that actually true though

603
00:24:12,490 --> 00:24:19,579
that may not be true that may not be

604
00:24:17,450 --> 00:24:20,809
true at all to be honest with you I

605
00:24:19,579 --> 00:24:22,159
think I may have been operating on a

606
00:24:20,809 --> 00:24:25,399
slightly false assumption it may be that

607
00:24:22,160 --> 00:24:28,550
we actually have a lot more flexibility

608
00:24:25,400 --> 00:24:31,220
there than I was gonna say because when

609
00:24:28,549 --> 00:24:34,940
an asset is being loaded its state is

610
00:24:31,220 --> 00:24:38,690
set to queued and we never free an asset

611
00:24:34,940 --> 00:24:43,610
whose state is set to queued so actually

612
00:24:38,690 --> 00:24:47,990
I guess we can just free assets just

613
00:24:43,609 --> 00:24:49,099
fine in the middle of that so I don't

614
00:24:47,990 --> 00:24:53,569
really know why I said that

615
00:24:49,099 --> 00:24:55,189
in fact the evict asset stuff I may just

616
00:24:53,569 --> 00:25:00,529
have been wrong it may be that we can

617
00:24:55,190 --> 00:25:09,529
just flat out evict to the assets like

618
00:25:00,529 --> 00:25:12,139
in the middle of that thing because move

619
00:25:09,529 --> 00:25:14,180
header to front never is allowed on

620
00:25:12,140 --> 00:25:16,700
locked assets so assets that are in the

621
00:25:14,180 --> 00:25:19,220
background ground chunk stuff can't be

622
00:25:16,700 --> 00:25:22,309
happening so it's only happening when

623
00:25:19,220 --> 00:25:27,529
assets get used and assets used only in

624
00:25:22,309 --> 00:25:29,869
the main thread and so I feel like yeah

625
00:25:27,529 --> 00:25:33,319
I mean it's oh my feel like almost we

626
00:25:29,869 --> 00:25:35,479
actually can evict assets right in the

627
00:25:33,319 --> 00:25:38,149
place where we actually need to to do

628
00:25:35,480 --> 00:25:43,610
the load so I may have been wrong about

629
00:25:38,150 --> 00:25:45,769
that I feel like we could almost do it

630
00:25:43,609 --> 00:25:50,000
this way now that I'm thinking it

631
00:25:45,769 --> 00:25:53,089
through a little bit more which is that

632
00:25:50,000 --> 00:25:56,660
we could make it so that up here evict

633
00:25:53,089 --> 00:26:01,970
assets as necessary right we could make

634
00:25:56,660 --> 00:26:06,800
it so that we only do this step when we

635
00:26:01,970 --> 00:26:08,769
do a choir asset memory right so we so

636
00:26:06,799 --> 00:26:12,500
evict assets as necessary is not

637
00:26:08,769 --> 00:26:15,069
actually going to be is not actually

638
00:26:12,500 --> 00:26:15,069
going to be

639
00:26:17,480 --> 00:26:26,579
it's not actually something that has to

640
00:26:19,528 --> 00:26:31,349
be pumped am I missing anything I don't

641
00:26:26,579 --> 00:26:32,730
think I am I really I just don't think I

642
00:26:31,349 --> 00:26:34,469
am I don't know I could be wrong about

643
00:26:32,730 --> 00:26:36,509
that we'd have to think it through very

644
00:26:34,470 --> 00:26:38,399
carefully obviously but I feel like

645
00:26:36,509 --> 00:26:41,849
that's a fairly safe statement to say I

646
00:26:38,398 --> 00:26:43,408
feel like you know you can just evict

647
00:26:41,849 --> 00:26:46,378
assets as necessary we can just call

648
00:26:43,409 --> 00:26:50,159
that when we do an acquire and when we

649
00:26:46,378 --> 00:26:51,538
go to do an acquire asset memory that

650
00:26:50,159 --> 00:26:53,070
could be the time that we call it Victor

651
00:26:51,538 --> 00:26:55,859
assets I'm gonna try that I'm just gonna

652
00:26:53,069 --> 00:26:57,118
go ahead and do that here and then I'm

653
00:26:55,859 --> 00:27:00,240
gonna get rid of the call to evict

654
00:26:57,118 --> 00:27:03,329
assets as necessary that's in here right

655
00:27:00,240 --> 00:27:05,868
so evict assets if necessary it's just

656
00:27:03,329 --> 00:27:05,868
gonna go away

657
00:27:07,548 --> 00:27:12,569
maybe I just you know because I thought

658
00:27:09,960 --> 00:27:14,579
before we would need to do that and I'm

659
00:27:12,569 --> 00:27:18,359
just wondering now me I just don't know

660
00:27:14,579 --> 00:27:20,460
if I was wrong or not I don't know if

661
00:27:18,359 --> 00:27:23,748
maybe I'm just forgetting like the the

662
00:27:20,460 --> 00:27:31,889
crucial reason why that's not true

663
00:27:23,749 --> 00:27:33,839
but yeah so let's see that down here we

664
00:27:31,888 --> 00:27:36,628
got to get rid of this this asset memory

665
00:27:33,839 --> 00:27:47,959
sighs it's not necessary anymore release

666
00:27:36,628 --> 00:27:50,099
asset memory is here we go let's see

667
00:27:47,960 --> 00:27:51,629
it's not really a good test cuz with

668
00:27:50,099 --> 00:27:53,548
anything that involves multi-threading

669
00:27:51,628 --> 00:27:56,028
you know just running it and if it works

670
00:27:53,548 --> 00:27:58,470
does not really definitely tell you much

671
00:27:56,028 --> 00:28:00,298
because you could easily have like race

672
00:27:58,470 --> 00:28:03,769
conditions that just don't happen

673
00:28:00,298 --> 00:28:03,769
hardly ever you know

674
00:28:03,799 --> 00:28:08,329
so yeah but you know it doesn't

675
00:28:06,380 --> 00:28:09,430
immediately fail which is something you

676
00:28:08,329 --> 00:28:10,909
know it lets you know that you're not

677
00:28:09,430 --> 00:28:13,039
completely wrong

678
00:28:10,910 --> 00:28:15,080
it just doesn't let you know that you're

679
00:28:13,039 --> 00:28:16,609
right but the reason that that's

680
00:28:15,079 --> 00:28:18,409
interesting is because I like that

681
00:28:16,609 --> 00:28:20,569
aspect because what that means is that

682
00:28:18,410 --> 00:28:23,630
really we can just do a victus it's as

683
00:28:20,569 --> 00:28:27,470
necessary as something that is part of

684
00:28:23,630 --> 00:28:34,570
our allocation process right and that's

685
00:28:27,470 --> 00:28:36,769
kind of nice I like that all right so

686
00:28:34,569 --> 00:28:39,230
let's see what goes on here let's see

687
00:28:36,769 --> 00:28:42,349
what we need to do for our asset memory

688
00:28:39,230 --> 00:28:46,370
stuff here since I don't actually know

689
00:28:42,349 --> 00:28:52,039
right so let's see we've got add asset

690
00:28:46,369 --> 00:28:53,539
header to list and a little bit map and

691
00:28:52,039 --> 00:28:55,819
all these other good things so when

692
00:28:53,539 --> 00:28:58,220
we're doing this stuff when we call

693
00:28:55,819 --> 00:29:00,740
acquire asset memory if I wanted to

694
00:28:58,220 --> 00:29:03,529
change this wire asset memory if I

695
00:29:00,740 --> 00:29:05,839
wanted to change acquire asset memory to

696
00:29:03,529 --> 00:29:08,149
allocate out of our own memory instead

697
00:29:05,839 --> 00:29:09,589
of calling the operating system here is

698
00:29:08,150 --> 00:29:12,440
the part where I need to start to figure

699
00:29:09,589 --> 00:29:16,939
out how I am going to do that and so we

700
00:29:12,440 --> 00:29:22,160
kind of had before we had our arena we

701
00:29:16,940 --> 00:29:25,700
we had like a sub arena set up for this

702
00:29:22,160 --> 00:29:28,009
right in here we said you know sub arena

703
00:29:25,700 --> 00:29:32,660
right and I think what I want to do

704
00:29:28,009 --> 00:29:34,400
there right is I I want to kind of

705
00:29:32,660 --> 00:29:35,930
change that around so that instead of an

706
00:29:34,400 --> 00:29:37,340
arena which is not really what I want

707
00:29:35,930 --> 00:29:39,769
anymore because this is not going to be

708
00:29:37,339 --> 00:29:42,349
like a stack like we were using what I

709
00:29:39,769 --> 00:29:45,500
want instead is just to get that chunk

710
00:29:42,349 --> 00:29:47,779
of memory right so I want to get rid of

711
00:29:45,500 --> 00:29:50,210
this arena here and remove anywhere that

712
00:29:47,779 --> 00:29:53,839
was using it which i think is literally

713
00:29:50,210 --> 00:29:55,819
just the allocation here right but what

714
00:29:53,839 --> 00:29:58,819
I can do now is I can go ahead and take

715
00:29:55,819 --> 00:30:01,250
some of that memory so if I were to do

716
00:29:58,819 --> 00:30:04,009
something like you know struct asset

717
00:30:01,250 --> 00:30:04,430
memory block or something I don't know

718
00:30:04,009 --> 00:30:05,839
yet

719
00:30:04,430 --> 00:30:07,180
again this is I'm not really doing

720
00:30:05,839 --> 00:30:10,819
anything serious here I'm just gonna

721
00:30:07,180 --> 00:30:12,830
sort of throw one of these in here so we

722
00:30:10,819 --> 00:30:14,269
have like an asset memory block and

723
00:30:12,829 --> 00:30:17,119
we'll just I don't know call that first

724
00:30:14,269 --> 00:30:17,599
block or something and here we just have

725
00:30:17,119 --> 00:30:20,239
a

726
00:30:17,599 --> 00:30:22,009
total size right and then we'd have like

727
00:30:20,240 --> 00:30:24,019
a used size so if I was just gonna

728
00:30:22,009 --> 00:30:27,529
duplicate essentially the memory arena

729
00:30:24,019 --> 00:30:30,980
stuff first then you know we could kind

730
00:30:27,529 --> 00:30:33,168
of kind of start working from there all

731
00:30:30,980 --> 00:30:35,058
right so if I were to do that then what

732
00:30:33,169 --> 00:30:37,640
I want to do is when I get my assets

733
00:30:35,058 --> 00:30:42,200
here I'm gonna make a first block thing

734
00:30:37,640 --> 00:30:45,500
I'm just gonna go ahead and get the I

735
00:30:42,200 --> 00:30:48,500
guess what I want to do is is get the

736
00:30:45,500 --> 00:30:50,960
the entire size of memory that I want

737
00:30:48,500 --> 00:30:52,609
right which is going to be this this

738
00:30:50,960 --> 00:30:55,730
size parameter here the thing they pass

739
00:30:52,609 --> 00:30:58,729
in I'm just gonna grab that so I'm going

740
00:30:55,730 --> 00:31:01,220
to do like a push size onto the game

741
00:30:58,730 --> 00:31:05,269
asset arena thing I'm gonna get that

742
00:31:01,220 --> 00:31:07,279
back and I'm gonna say that I've got one

743
00:31:05,269 --> 00:31:08,389
of these asset blocks at the top of it

744
00:31:07,279 --> 00:31:14,808
for now

745
00:31:08,390 --> 00:31:16,820
right asset memory block there we go do

746
00:31:14,808 --> 00:31:18,259
push size on that so now we've got that

747
00:31:16,819 --> 00:31:22,960
and then I'm gonna go ahead and say that

748
00:31:18,259 --> 00:31:27,548
the first block total size right equals

749
00:31:22,960 --> 00:31:30,620
that size and the first block use size

750
00:31:27,548 --> 00:31:33,379
is gonna equal the size minus the part

751
00:31:30,619 --> 00:31:35,750
that I've actually used for storing that

752
00:31:33,380 --> 00:31:37,539
header right so I'm just assembling one

753
00:31:35,750 --> 00:31:40,940
of these little blocks in there right

754
00:31:37,538 --> 00:31:47,140
that's what I'm doing total size equals

755
00:31:40,940 --> 00:31:47,140
size oh that's a pointer there we go

756
00:31:47,750 --> 00:31:54,169
and yeah I don't actually need that to

757
00:31:50,659 --> 00:31:55,970
be a memory index because we're not

758
00:31:54,169 --> 00:31:59,690
gonna let it get that big but we'll just

759
00:31:55,970 --> 00:32:01,700
do this for now all right so if I do

760
00:31:59,690 --> 00:32:02,720
that now I've got this block and I'm

761
00:32:01,700 --> 00:32:04,700
just gonna go ahead and sort of

762
00:32:02,720 --> 00:32:08,000
duplicate basically what we do in the

763
00:32:04,700 --> 00:32:11,870
arena just as a start for acquire asset

764
00:32:08,000 --> 00:32:13,788
memory right so as a start what I'm

765
00:32:11,869 --> 00:32:14,959
gonna do is I'm gonna say okay we had

766
00:32:13,788 --> 00:32:17,298
this thing with this platform allocate

767
00:32:14,960 --> 00:32:20,390
memory we're gonna go ahead and pretend

768
00:32:17,298 --> 00:32:24,829
that that doesn't exist anymore right

769
00:32:20,390 --> 00:32:26,659
that's not a thing so off it goes and

770
00:32:24,829 --> 00:32:28,548
I'm gonna do the same thing with that

771
00:32:26,659 --> 00:32:29,290
release asset memory I'm gonna say okay

772
00:32:28,548 --> 00:32:34,329
you

773
00:32:29,289 --> 00:32:36,190
we don't have that anymore and so what

774
00:32:34,329 --> 00:32:39,449
I'm gonna do like a comment these two

775
00:32:36,190 --> 00:32:45,519
note okay say this is the platform

776
00:32:39,450 --> 00:32:52,259
memory half right and then what I'm

777
00:32:45,519 --> 00:32:52,259
gonna do is I'm using I'm just going to

778
00:32:54,000 --> 00:32:59,559
I'm just going to go ahead and no I

779
00:32:58,210 --> 00:33:00,880
can't I'm just going to go ahead and

780
00:32:59,559 --> 00:33:06,579
implement the simplest possible thing

781
00:33:00,880 --> 00:33:09,010
here right so for starters I need to get

782
00:33:06,579 --> 00:33:10,869
a void pointer which is going to come

783
00:33:09,009 --> 00:33:12,339
from like that first block right so I'm

784
00:33:10,869 --> 00:33:14,619
going to say I have an asset memory

785
00:33:12,339 --> 00:33:19,899
block or whatever it is I'm gonna get to

786
00:33:14,619 --> 00:33:22,449
that block out of the assets and then I

787
00:33:19,900 --> 00:33:24,910
am going to just grab the memory right

788
00:33:22,450 --> 00:33:26,799
so I know that the asset that the block

789
00:33:24,910 --> 00:33:31,000
right after the block is where the

790
00:33:26,799 --> 00:33:33,579
memory starts right because I just put

791
00:33:31,000 --> 00:33:35,440
the block at the top of the memory and I

792
00:33:33,579 --> 00:33:38,470
know that the block itself records how

793
00:33:35,440 --> 00:33:40,660
much is used oh so I guess now I think

794
00:33:38,470 --> 00:33:42,809
about it I actually kept used size in

795
00:33:40,660 --> 00:33:45,490
there that may not be a good idea that

796
00:33:42,809 --> 00:33:46,179
may not be a good idea I you know I take

797
00:33:45,490 --> 00:33:51,880
that back

798
00:33:46,180 --> 00:33:53,320
go to size I'm gonna do it this way I'm

799
00:33:51,880 --> 00:33:57,360
gonna say that the total size is

800
00:33:53,319 --> 00:33:59,559
actually this and the use size is zero

801
00:33:57,359 --> 00:34:00,819
in fact that was the wrong computation

802
00:33:59,559 --> 00:34:02,950
for use size anyway that was just like

803
00:34:00,819 --> 00:34:05,230
that so the total size I'm gonna say is

804
00:34:02,950 --> 00:34:06,730
actually however much we allocated minus

805
00:34:05,230 --> 00:34:09,039
the asset block size and then we haven't

806
00:34:06,730 --> 00:34:10,990
used any of it yet okay rather than

807
00:34:09,039 --> 00:34:14,398
saying I could have initialized use size

808
00:34:10,989 --> 00:34:17,229
to be the size of the header all right

809
00:34:14,398 --> 00:34:21,519
so yeah so that's where the result would

810
00:34:17,230 --> 00:34:23,230
be and then block you size right would

811
00:34:21,519 --> 00:34:26,648
increment by whatever the size is that

812
00:34:23,230 --> 00:34:29,878
we were trying to acquire and so I'm

813
00:34:26,648 --> 00:34:34,019
going to assert here that they used size

814
00:34:29,878 --> 00:34:37,148
is going to be less than the total size

815
00:34:34,019 --> 00:34:38,918
and if theory that assert should fire

816
00:34:37,148 --> 00:34:40,719
because we will run out of asset space

817
00:34:38,918 --> 00:34:42,750
and we're not able to free anything yet

818
00:34:40,719 --> 00:34:47,589
right

819
00:34:42,750 --> 00:34:53,559
so yeah let's take a look

820
00:34:47,590 --> 00:34:56,190
plus equals sighs okay and let's take a

821
00:34:53,559 --> 00:34:56,190
quick look here

822
00:34:58,289 --> 00:35:05,409
there we go so eventually we just run

823
00:35:01,900 --> 00:35:07,300
out of space and that is the end of it

824
00:35:05,409 --> 00:35:09,849
right that is the end of our little

825
00:35:07,300 --> 00:35:12,160
party we hit the assertion that says if

826
00:35:09,849 --> 00:35:16,619
I were to actually you know this this

827
00:35:12,159 --> 00:35:16,619
this thing is is that big right it's

828
00:35:18,119 --> 00:35:27,219
this is how many bytes it's got in it

829
00:35:21,539 --> 00:35:29,619
this is how many bytes we're using so

830
00:35:27,219 --> 00:35:39,359
we've got this much left right before we

831
00:35:29,619 --> 00:35:43,599
hit the end of the block oh wait what

832
00:35:39,360 --> 00:35:47,769
total size - block use size how is the

833
00:35:43,599 --> 00:35:49,539
use size oh we actually went over there

834
00:35:47,769 --> 00:35:55,199
that's no good

835
00:35:49,539 --> 00:35:57,250
I want block use size plus size right

836
00:35:55,199 --> 00:36:00,699
that's what we actually want let's try

837
00:35:57,250 --> 00:36:03,099
that one more time there we go

838
00:36:00,699 --> 00:36:05,139
that's more like it so this is how much

839
00:36:03,099 --> 00:36:07,239
we have left but the size of this

840
00:36:05,139 --> 00:36:12,519
particular asset is this so it won't fit

841
00:36:07,239 --> 00:36:16,899
right and so what I want to do here is I

842
00:36:12,519 --> 00:36:18,610
want to then try to at this is the point

843
00:36:16,900 --> 00:36:20,920
when I actually detect this right what

844
00:36:18,610 --> 00:36:23,320
we want to do is now instead of that

845
00:36:20,920 --> 00:36:26,170
being assertion what I want to do is say

846
00:36:23,320 --> 00:36:28,269
if what I would have done like the block

847
00:36:26,170 --> 00:36:30,909
size plus the size if that would

848
00:36:28,269 --> 00:36:36,099
overflow like if I can't find a place

849
00:36:30,909 --> 00:36:39,789
for it then I am going to on effect I've

850
00:36:36,099 --> 00:36:46,029
put it in here as an assert after the

851
00:36:39,789 --> 00:36:49,630
fact if I would have overflowed then

852
00:36:46,030 --> 00:36:53,200
that is the time when I actually would

853
00:36:49,630 --> 00:36:54,880
start to evict things right so it's

854
00:36:53,199 --> 00:37:00,009
almost it's it's really just a thing

855
00:36:54,880 --> 00:37:02,710
that's going to the right it's we want

856
00:37:00,010 --> 00:37:05,020
to see when we hit our memory limit and

857
00:37:02,710 --> 00:37:06,909
when we find that we literally can't put

858
00:37:05,019 --> 00:37:11,039
anything else in there that is the time

859
00:37:06,909 --> 00:37:19,629
to then go start reclaiming stuff right

860
00:37:11,039 --> 00:37:21,759
but I hope that make sense okay all

861
00:37:19,630 --> 00:37:25,329
right so that's what we want to do okay

862
00:37:21,760 --> 00:37:27,580
unfortunately we don't have any ability

863
00:37:25,329 --> 00:37:29,679
to actually free stuff yet right we have

864
00:37:27,579 --> 00:37:32,739
no way of doing anything like that

865
00:37:29,679 --> 00:37:34,750
because when we do a free on something

866
00:37:32,739 --> 00:37:38,559
we don't even know like what block it's

867
00:37:34,750 --> 00:37:39,969
in right like we have no idea so we need

868
00:37:38,559 --> 00:37:43,029
to start figuring out some way of

869
00:37:39,969 --> 00:37:45,009
keeping track of this stuff so again I'm

870
00:37:43,030 --> 00:37:46,060
gonna do something that's I'm gonna do

871
00:37:45,010 --> 00:37:48,280
something not particularly intelligent

872
00:37:46,059 --> 00:37:50,199
right I don't claim that this is at all

873
00:37:48,280 --> 00:37:52,350
good I'm just gonna sort of start to

874
00:37:50,199 --> 00:37:54,730
work my way through the problem of

875
00:37:52,349 --> 00:37:56,619
getting this memory into some sort of a

876
00:37:54,730 --> 00:37:58,150
flexible shape that will allow us to

877
00:37:56,619 --> 00:37:59,559
fulfill the requirements and they may

878
00:37:58,150 --> 00:38:00,940
not be great

879
00:37:59,559 --> 00:38:01,989
it made the performance might not be

880
00:38:00,940 --> 00:38:05,320
great of it or whatever but I'm just

881
00:38:01,989 --> 00:38:07,119
gonna try to sort of work through it

882
00:38:05,320 --> 00:38:08,559
to figure out what I want to do here so

883
00:38:07,119 --> 00:38:13,420
I'm gonna do is I'm going to introduce

884
00:38:08,559 --> 00:38:14,679
an asset memory block sort of I don't

885
00:38:13,420 --> 00:38:16,480
want to call it tag does that mean

886
00:38:14,679 --> 00:38:18,129
something in our asset system already so

887
00:38:16,480 --> 00:38:21,610
it's sort of an asset memory block

888
00:38:18,130 --> 00:38:24,640
almost it's like a little thing it gets

889
00:38:21,610 --> 00:38:26,620
inserted like a waypoint or what do I

890
00:38:24,639 --> 00:38:32,589
want to call this it's it's sort of like

891
00:38:26,619 --> 00:38:38,699
a partition I don't know what I want to

892
00:38:32,590 --> 00:38:46,390
call that asset memory block barrier

893
00:38:38,699 --> 00:38:48,069
stripe marker how about marker right so

894
00:38:46,389 --> 00:38:50,859
these black markers what I want to do is

895
00:38:48,070 --> 00:38:53,260
every time I allocate something I want

896
00:38:50,860 --> 00:38:55,390
to insert one of these block markers so

897
00:38:53,260 --> 00:38:59,140
that the block marker will tell me what

898
00:38:55,389 --> 00:39:00,969
it is that I need to do right with this

899
00:38:59,139 --> 00:39:02,460
thing and you know I could actually just

900
00:39:00,969 --> 00:39:05,459
use asset memory block for that

901
00:39:02,460 --> 00:39:05,460
potentially

902
00:39:08,940 --> 00:39:13,179
in fact that may be the easier thing to

903
00:39:11,318 --> 00:39:15,730
do instead I can do a separate thing so

904
00:39:13,179 --> 00:39:18,549
let's say I've got this right it's got

905
00:39:15,730 --> 00:39:20,710
the the total size you sighs I'm gonna

906
00:39:18,550 --> 00:39:22,480
change sort of the way that it's

907
00:39:20,710 --> 00:39:24,639
conceptualized I'm just gonna say that

908
00:39:22,480 --> 00:39:29,940
my asset memory block right oops

909
00:39:24,639 --> 00:39:32,469
just has a size that's all it has right

910
00:39:29,940 --> 00:39:36,519
so I know how big this asset memory

911
00:39:32,469 --> 00:39:38,919
block is but it also has sort of a a

912
00:39:36,519 --> 00:39:41,409
notion of where it is relative to other

913
00:39:38,920 --> 00:39:43,240
things right so there's also asset

914
00:39:41,409 --> 00:39:46,960
memory block like that's the previous

915
00:39:43,239 --> 00:39:48,939
block from this block right and maybe

916
00:39:46,960 --> 00:39:50,050
there's a next so if they're like let's

917
00:39:48,940 --> 00:39:53,108
say these things are threaded through

918
00:39:50,050 --> 00:39:54,940
here and there's a size and then there's

919
00:39:53,108 --> 00:39:56,679
like whether or not this block is used

920
00:39:54,940 --> 00:40:01,440
right so there's like something like

921
00:39:56,679 --> 00:40:09,279
this right so I'd say asset memory block

922
00:40:01,440 --> 00:40:11,470
flags asset memory used right so instead

923
00:40:09,280 --> 00:40:12,910
of having that sort of stack based thing

924
00:40:11,469 --> 00:40:16,809
I'm just gonna make like this little

925
00:40:12,909 --> 00:40:18,429
kind of lame little guy right who just

926
00:40:16,809 --> 00:40:21,699
kind of sits there and says what's going

927
00:40:18,429 --> 00:40:23,279
on with this thing okay so for her to do

928
00:40:21,699 --> 00:40:27,759
that

929
00:40:23,280 --> 00:40:30,970
how would this now look well at the

930
00:40:27,760 --> 00:40:32,589
outset now asset memory block when we

931
00:40:30,969 --> 00:40:33,939
create it it's going to be different

932
00:40:32,588 --> 00:40:37,119
it's gonna be a little bit different

933
00:40:33,940 --> 00:40:39,369
right so what's gonna happen here is

934
00:40:37,119 --> 00:40:43,510
we're gonna push size on this previous

935
00:40:39,369 --> 00:40:46,838
is gonna be equal to nothing right next

936
00:40:43,510 --> 00:40:48,490
is gonna be equal to nothing I don't

937
00:40:46,838 --> 00:40:53,318
know if we want to EE link that guy

938
00:40:48,489 --> 00:40:55,679
probably not cuz my guess you know I

939
00:40:53,318 --> 00:40:55,679
don't know

940
00:41:01,239 --> 00:41:11,779
that's a good question maybe we do want

941
00:41:07,219 --> 00:41:16,939
the it to be circular maybe we do want

942
00:41:11,780 --> 00:41:21,740
it to be circular I don't know I don't

943
00:41:16,940 --> 00:41:24,889
know let's just do it why not

944
00:41:21,739 --> 00:41:27,139
I'm curious so there's our memory sense

945
00:41:24,889 --> 00:41:30,440
and all right we've got an asset memory

946
00:41:27,139 --> 00:41:31,670
block here and we're gonna we're just

947
00:41:30,440 --> 00:41:34,450
gonna we're gonna go for it

948
00:41:31,670 --> 00:41:37,909
we're gonna just go for it you know what

949
00:41:34,449 --> 00:41:40,819
fortune favors the brave people okay I

950
00:41:37,909 --> 00:41:42,829
just how that goes so I'm going to say

951
00:41:40,820 --> 00:41:48,170
that we've got this memory Sentinel here

952
00:41:42,829 --> 00:41:49,940
right and it's got a flags of zero and

953
00:41:48,170 --> 00:41:53,900
it's got a size of zero because they

954
00:41:49,940 --> 00:41:57,190
can't store nothing right and it's got a

955
00:41:53,900 --> 00:41:59,150
previous pointer that points to itself

956
00:41:57,190 --> 00:42:03,889
and it's got a next pointer that points

957
00:41:59,150 --> 00:42:05,809
to itself right and then what I'll do is

958
00:42:03,889 --> 00:42:08,359
I'll say that I want to insert a block

959
00:42:05,809 --> 00:42:11,630
into this list so what I want to do is

960
00:42:08,360 --> 00:42:14,720
say insert block and I want to insert it

961
00:42:11,630 --> 00:42:17,420
after the memory sentinel that's what I

962
00:42:14,719 --> 00:42:22,129
want to do and this is the memory for

963
00:42:17,420 --> 00:42:29,900
that block right and this is the block

964
00:42:22,130 --> 00:42:35,210
size right something like that and then

965
00:42:29,900 --> 00:42:36,530
the insert block Hall is just going to

966
00:42:35,210 --> 00:42:41,599
be in charge of like sticking some

967
00:42:36,530 --> 00:42:47,840
memory in to this thing right so there's

968
00:42:41,599 --> 00:42:52,039
the memory and this is the asset memory

969
00:42:47,840 --> 00:42:55,579
block that it comes before so this is

970
00:42:52,039 --> 00:42:57,610
the previous block right that makes

971
00:42:55,579 --> 00:42:57,610
sense

972
00:42:57,739 --> 00:43:02,099
so how do we do that well we've already

973
00:43:00,510 --> 00:43:05,340
seen how to do that it's really really

974
00:43:02,099 --> 00:43:08,819
basic right like I said we just say that

975
00:43:05,340 --> 00:43:13,440
the block itself the sort of control

976
00:43:08,820 --> 00:43:25,590
feature for the block has to go into the

977
00:43:13,440 --> 00:43:27,179
specific location itself there's some

978
00:43:25,590 --> 00:43:30,570
reasons why you know I feel like I kind

979
00:43:27,179 --> 00:43:33,210
of want this to be aligned as well which

980
00:43:30,570 --> 00:43:34,890
wouldn't quite be at the moment so you

981
00:43:33,210 --> 00:43:39,869
know we might do something more like

982
00:43:34,889 --> 00:43:42,869
this just thrown that out there

983
00:43:39,869 --> 00:43:45,569
so yeah just just because we want this

984
00:43:42,869 --> 00:43:47,039
thing to be on 128 bit boundary but

985
00:43:45,570 --> 00:43:48,390
that's kind of separate we'll get we'll

986
00:43:47,039 --> 00:43:51,179
get to that stuff a little later on down

987
00:43:48,389 --> 00:43:54,239
the party line anyway so when we're

988
00:43:51,179 --> 00:43:55,739
doing this what we want to do here is is

989
00:43:54,239 --> 00:44:02,250
and I guess we could call that a memory

990
00:43:55,739 --> 00:44:03,989
index but or usage before so what we

991
00:44:02,250 --> 00:44:07,469
want to do here is we want to stick the

992
00:44:03,989 --> 00:44:09,149
block into the the memory thing we want

993
00:44:07,469 --> 00:44:11,039
to probably also assert that the size is

994
00:44:09,150 --> 00:44:12,450
greater than the size of one of these

995
00:44:11,039 --> 00:44:14,009
things cuz we're never allowed to

996
00:44:12,449 --> 00:44:15,449
actually make one smaller than that or

997
00:44:14,010 --> 00:44:18,570
we can't fit the control block in it

998
00:44:15,449 --> 00:44:21,509
right we would then say that the blocks

999
00:44:18,570 --> 00:44:23,010
size is whatever the size is minus the

1000
00:44:21,510 --> 00:44:25,680
part we just used just like we did

1001
00:44:23,010 --> 00:44:29,970
before and then we would go ahead and

1002
00:44:25,679 --> 00:44:32,730
link it up again just the standard link

1003
00:44:29,969 --> 00:44:34,529
listing here where we say like okay our

1004
00:44:32,730 --> 00:44:36,659
previous is our previous and our

1005
00:44:34,530 --> 00:44:39,300
whatever was after our previous is our

1006
00:44:36,659 --> 00:44:42,599
next right and then we just do the

1007
00:44:39,300 --> 00:44:48,120
standard thing here where our previous

1008
00:44:42,599 --> 00:44:50,369
next is is now us and our next previous

1009
00:44:48,119 --> 00:44:52,739
is also us right so we just kind of

1010
00:44:50,369 --> 00:44:56,359
insert our link into the into the

1011
00:44:52,739 --> 00:44:56,359
rolling link there right

1012
00:45:00,010 --> 00:45:05,840
okay so now we have our memory blocks we

1013
00:45:03,949 --> 00:45:07,549
know that the flags field

1014
00:45:05,840 --> 00:45:10,460
I guess well we didn't actually set that

1015
00:45:07,550 --> 00:45:11,990
so we know that the size field but we

1016
00:45:10,460 --> 00:45:15,099
didn't set the flag the flags field to

1017
00:45:11,989 --> 00:45:17,149
be zero because it's not used so that's

1018
00:45:15,099 --> 00:45:18,739
that's just how we would insert that

1019
00:45:17,150 --> 00:45:20,869
block and we would probably return it in

1020
00:45:18,739 --> 00:45:23,869
case the person who was adding it asking

1021
00:45:20,869 --> 00:45:30,529
us to add it wanted to do something with

1022
00:45:23,869 --> 00:45:34,579
it right so yeah that's all fine nothing

1023
00:45:30,530 --> 00:45:36,650
particularly fancy there and so in here

1024
00:45:34,579 --> 00:45:38,299
I'm just going to put that up at the top

1025
00:45:36,650 --> 00:45:40,039
so we can do that block insertion stuff

1026
00:45:38,300 --> 00:45:43,610
so now we will have inserted a block and

1027
00:45:40,039 --> 00:45:44,869
so now if we wanted to allocate memory

1028
00:45:43,610 --> 00:45:48,680
and again this is going to be some of

1029
00:45:44,869 --> 00:45:51,049
the worst code ever for the moment we do

1030
00:45:48,679 --> 00:45:53,210
acquire asset memory we just need to

1031
00:45:51,050 --> 00:45:56,900
look first to see is there a memory

1032
00:45:53,210 --> 00:46:00,320
block that could actually hold what we

1033
00:45:56,900 --> 00:46:02,930
want to hold right so we're literally

1034
00:46:00,320 --> 00:46:06,830
just going to do that like this we're

1035
00:46:02,929 --> 00:46:08,899
gonna say we're gonna say asset memory

1036
00:46:06,829 --> 00:46:15,079
block instead of first block we're gonna

1037
00:46:08,900 --> 00:46:17,750
say find block for size we're gonna pass

1038
00:46:15,079 --> 00:46:21,529
the size that's going to return us a

1039
00:46:17,750 --> 00:46:27,019
memory block if we got a block back we

1040
00:46:21,530 --> 00:46:30,410
will assume that that block is able to

1041
00:46:27,019 --> 00:46:33,860
hold us right so we'll do an assertion

1042
00:46:30,409 --> 00:46:35,690
and say that the use size the size looks

1043
00:46:33,860 --> 00:46:36,710
right we'll do that thing is to assume

1044
00:46:35,690 --> 00:46:40,070
that it could fit in there

1045
00:46:36,710 --> 00:46:43,220
right and then we'll just go ahead and

1046
00:46:40,070 --> 00:46:45,050
make that all that same stuff that we

1047
00:46:43,219 --> 00:46:46,279
were doing before block you size

1048
00:46:45,050 --> 00:46:49,400
listicle size blah blah blah blah blah

1049
00:46:46,280 --> 00:46:52,100
right all that stuff just should just

1050
00:46:49,400 --> 00:46:54,230
work right oh wait I'm sorry

1051
00:46:52,099 --> 00:46:55,639
but except for this part so what we need

1052
00:46:54,230 --> 00:46:57,710
to do now since this block is going to

1053
00:46:55,639 --> 00:47:00,769
be used we need to slip the lock right

1054
00:46:57,710 --> 00:47:03,650
we need to slip the block in half we

1055
00:47:00,769 --> 00:47:06,460
need to use one part of it and reserve

1056
00:47:03,650 --> 00:47:06,460
the other part of it

1057
00:47:07,389 --> 00:47:16,699
so I'm gonna basically say something

1058
00:47:10,460 --> 00:47:17,960
goes here not that and and then what we

1059
00:47:16,699 --> 00:47:22,579
have to do is finish the rest of this

1060
00:47:17,960 --> 00:47:24,380
loop so we want this thing to go until

1061
00:47:22,579 --> 00:47:26,900
it actually is able to place it so if we

1062
00:47:24,380 --> 00:47:30,200
do find block for size and we are unable

1063
00:47:26,900 --> 00:47:33,289
to find a block right then what we want

1064
00:47:30,199 --> 00:47:36,429
to do is we want to evict an asset right

1065
00:47:33,289 --> 00:47:39,009
we want to evict whatever the asset is

1066
00:47:36,429 --> 00:47:43,069
that we could yeah that we could have

1067
00:47:39,010 --> 00:47:46,760
evicted we want to be able to do

1068
00:47:43,070 --> 00:47:48,289
essentially this path right so while

1069
00:47:46,760 --> 00:47:50,750
we're in this loop we want to say okay

1070
00:47:48,289 --> 00:47:53,000
find a block if we found a block to put

1071
00:47:50,750 --> 00:47:55,608
it in put it in that block if we did not

1072
00:47:53,000 --> 00:47:57,590
find a block to put it in right and by

1073
00:47:55,608 --> 00:47:59,929
the way we're done at that point right

1074
00:47:57,590 --> 00:48:04,490
we don't have to keep looking if we did

1075
00:47:59,929 --> 00:48:08,690
not find a block to put it in then we

1076
00:48:04,489 --> 00:48:10,069
have to start evicting assets right so

1077
00:48:08,690 --> 00:48:13,849
then we would do something where we go

1078
00:48:10,070 --> 00:48:17,059
like okay we would go ahead and say take

1079
00:48:13,849 --> 00:48:20,690
the asset memory header the lease is not

1080
00:48:17,059 --> 00:48:22,279
really used one we would assume that

1081
00:48:20,690 --> 00:48:25,010
there is something too free so we start

1082
00:48:22,280 --> 00:48:27,320
trying to free it we come in here right

1083
00:48:25,010 --> 00:48:29,450
get that asset we free the asset we

1084
00:48:27,320 --> 00:48:31,970
would want to do this until we actually

1085
00:48:29,449 --> 00:48:33,500
freed an asset right so this one would

1086
00:48:31,969 --> 00:48:36,289
also want to do something where it would

1087
00:48:33,500 --> 00:48:39,380
say okay start with the previous go

1088
00:48:36,289 --> 00:48:41,529
until you hit the Sentinel and always do

1089
00:48:39,380 --> 00:48:45,079
header you know always walk the list

1090
00:48:41,530 --> 00:48:47,930
kind of backwards right as soon as you

1091
00:48:45,079 --> 00:48:52,130
find one that you can evict evict it and

1092
00:48:47,929 --> 00:48:55,279
you are done right another thing I guess

1093
00:48:52,130 --> 00:48:58,490
we could do is right here just see if

1094
00:48:55,280 --> 00:49:00,320
the block see if the block that we were

1095
00:48:58,489 --> 00:49:02,419
if it can be asset from we kind of know

1096
00:49:00,320 --> 00:49:04,519
that that's the block we want so really

1097
00:49:02,420 --> 00:49:06,858
I guess it looks like this something

1098
00:49:04,519 --> 00:49:09,259
like this first we try to find a block

1099
00:49:06,858 --> 00:49:11,480
to the size from then on we just use

1100
00:49:09,260 --> 00:49:14,890
whatever block this asset was actually

1101
00:49:11,480 --> 00:49:18,320
in and we want evict asset to return us

1102
00:49:14,889 --> 00:49:21,289
whatever that block actually was right

1103
00:49:18,320 --> 00:49:24,230
and so here is evict

1104
00:49:21,289 --> 00:49:26,239
when it goes to release asset memory we

1105
00:49:24,230 --> 00:49:28,670
would want that release asset memory

1106
00:49:26,239 --> 00:49:30,439
call it to tell us what the actual block

1107
00:49:28,670 --> 00:49:33,260
was that it released so that we can

1108
00:49:30,440 --> 00:49:35,150
check that resulting block to see

1109
00:49:33,260 --> 00:49:38,920
whether or not we could put the asset in

1110
00:49:35,150 --> 00:49:38,920
there right does that make some sense

1111
00:49:41,199 --> 00:49:49,839
it's kind of an optimization right so I

1112
00:49:46,340 --> 00:49:49,840
could do something like this for now

1113
00:49:50,710 --> 00:50:02,179
right I could do something like this for

1114
00:49:53,539 --> 00:50:08,449
now to do actually do this instead of

1115
00:50:02,179 --> 00:50:11,299
just saying you're gonna do it right and

1116
00:50:08,449 --> 00:50:12,469
so what are these things look like right

1117
00:50:11,300 --> 00:50:14,869
what do these things look like

1118
00:50:12,469 --> 00:50:16,519
well fine block for size again if we

1119
00:50:14,869 --> 00:50:17,780
just don't think about performance or

1120
00:50:16,519 --> 00:50:21,079
anything else we're just trying to make

1121
00:50:17,780 --> 00:50:23,330
it work it's not - and this is probably

1122
00:50:21,079 --> 00:50:27,710
not an inline anymore it's probably not

1123
00:50:23,329 --> 00:50:29,389
too tricky right fine block for size all

1124
00:50:27,710 --> 00:50:33,619
it does is scan through all the blocks

1125
00:50:29,389 --> 00:50:35,480
and if there is a block that is not if

1126
00:50:33,619 --> 00:50:38,150
it finds a block that could have space

1127
00:50:35,480 --> 00:50:39,440
in it that's a you know if you find the

1128
00:50:38,150 --> 00:50:40,910
block that's not used I could fit it it

1129
00:50:39,440 --> 00:50:43,400
could return it ready we could literally

1130
00:50:40,909 --> 00:50:46,699
be that simple right we could also find

1131
00:50:43,400 --> 00:50:47,450
the one that was the best match block if

1132
00:50:46,699 --> 00:50:49,279
we wanted to

1133
00:50:47,449 --> 00:50:52,639
right for now we're not going to do it

1134
00:50:49,280 --> 00:50:55,670
so it's going to do right best match

1135
00:50:52,639 --> 00:50:57,559
block and in here I'm just gonna loop

1136
00:50:55,670 --> 00:51:00,980
through all the stuff so we've got asset

1137
00:50:57,559 --> 00:51:02,150
memory block block equals Sentinel next

1138
00:51:00,980 --> 00:51:06,469
right

1139
00:51:02,150 --> 00:51:09,108
so that's asset memory Sentinel right

1140
00:51:06,469 --> 00:51:10,459
I'm gonna say that I loop through well

1141
00:51:09,108 --> 00:51:15,588
the block is not equal to the memory

1142
00:51:10,460 --> 00:51:20,420
Sentinel and we just kind of walk that

1143
00:51:15,588 --> 00:51:23,449
chain like so yeah and so when I look at

1144
00:51:20,420 --> 00:51:30,200
a block I say if the block Flags is not

1145
00:51:23,449 --> 00:51:32,358
used right so if whatever it is is used

1146
00:51:30,199 --> 00:51:34,489
that would come back true so we do like

1147
00:51:32,358 --> 00:51:38,179
that it's a black flags it's not you

1148
00:51:34,489 --> 00:51:41,209
then we say if the block size is greater

1149
00:51:38,179 --> 00:51:43,579
than or equal to the size we want right

1150
00:51:41,210 --> 00:51:46,610
then we can use it now there's a caveat

1151
00:51:43,579 --> 00:51:48,590
here which is that actually the size

1152
00:51:46,610 --> 00:51:52,220
that we need it to be because we're

1153
00:51:48,590 --> 00:51:52,880
going to use up the block oh wait no I

1154
00:51:52,219 --> 00:51:55,339
take it back

1155
00:51:52,880 --> 00:51:59,539
there is no caveat it's fine I think

1156
00:51:55,340 --> 00:52:01,430
we'll find out okay so we're gonna come

1157
00:51:59,539 --> 00:52:03,380
through here and what we want to do is

1158
00:52:01,429 --> 00:52:06,379
say here's our results this is the block

1159
00:52:03,380 --> 00:52:07,640
we would say the results equals this

1160
00:52:06,380 --> 00:52:13,130
block and we are done

1161
00:52:07,639 --> 00:52:15,500
and we return the block back so this

1162
00:52:13,130 --> 00:52:17,180
just cancer who think tries to find a

1163
00:52:15,500 --> 00:52:19,250
block that we could put it in as soon as

1164
00:52:17,179 --> 00:52:21,889
we find one again we're not doing a best

1165
00:52:19,250 --> 00:52:22,159
match we just there it is we just give

1166
00:52:21,889 --> 00:52:24,859
it back

1167
00:52:22,159 --> 00:52:28,099
right happy days everyone's happy you

1168
00:52:24,860 --> 00:52:29,510
were done right and so that would find

1169
00:52:28,099 --> 00:52:32,509
it and then the question is what do we

1170
00:52:29,510 --> 00:52:35,780
do when we actually find it right well

1171
00:52:32,510 --> 00:52:37,730
what we do when we find it is we have to

1172
00:52:35,780 --> 00:52:40,280
take that block and either split the

1173
00:52:37,730 --> 00:52:42,170
block in half or just use the block so

1174
00:52:40,280 --> 00:52:44,420
if the amount of space that was left

1175
00:52:42,170 --> 00:52:46,579
over was going to be appreciable we

1176
00:52:44,420 --> 00:52:50,000
would split the block if it wasn't then

1177
00:52:46,579 --> 00:52:53,049
we wouldn't right so here we go you take

1178
00:52:50,000 --> 00:52:58,190
the block we do fine block for size

1179
00:52:53,050 --> 00:53:00,680
right if we found the block we say let's

1180
00:52:58,190 --> 00:53:03,670
assert that however much the block size

1181
00:53:00,679 --> 00:53:07,759
is is less than the size that we need

1182
00:53:03,670 --> 00:53:10,579
I'm sorry all the way around assert that

1183
00:53:07,760 --> 00:53:18,530
the size that we need will fit in this

1184
00:53:10,579 --> 00:53:21,679
block right and I just want to double

1185
00:53:18,530 --> 00:53:23,720
check well I did insert block we do set

1186
00:53:21,679 --> 00:53:29,329
the size properly to be yeah to be what

1187
00:53:23,719 --> 00:53:30,589
it so we figure that out we then go

1188
00:53:29,329 --> 00:53:33,108
ahead and get the memory for the block

1189
00:53:30,590 --> 00:53:35,450
so we say okay the result here is going

1190
00:53:33,108 --> 00:53:37,009
to be just right after the block that's

1191
00:53:35,449 --> 00:53:40,339
that's what the memory we're actually

1192
00:53:37,010 --> 00:53:42,380
using is but because we're only using a

1193
00:53:40,340 --> 00:53:45,380
certain amount of it we may then want to

1194
00:53:42,380 --> 00:53:47,630
split the block in half right and if we

1195
00:53:45,380 --> 00:53:48,440
were to split the block in half well I

1196
00:53:47,630 --> 00:53:49,730
guess there's a couple things

1197
00:53:48,440 --> 00:53:53,030
here so first of all we want set the

1198
00:53:49,730 --> 00:53:55,039
black bloc flags right we want to set

1199
00:53:53,030 --> 00:53:56,750
the the fact we want to record the fact

1200
00:53:55,039 --> 00:53:58,608
that we use this block right so the

1201
00:53:56,750 --> 00:54:00,920
black flags are now going to be set to

1202
00:53:58,608 --> 00:54:04,670
use and the other thing we want to do is

1203
00:54:00,920 --> 00:54:07,700
we want to set we want to see if the

1204
00:54:04,670 --> 00:54:10,150
block size if the remaining size

1205
00:54:07,699 --> 00:54:14,960
basically right so the memory index

1206
00:54:10,150 --> 00:54:16,490
remaining size if the remaining size is

1207
00:54:14,960 --> 00:54:18,800
going to be anything appreciable that we

1208
00:54:16,489 --> 00:54:20,868
could actually use so whatever we'd say

1209
00:54:18,800 --> 00:54:26,119
if remaining size is greater than I

1210
00:54:20,869 --> 00:54:30,950
don't know let's say if the remaining

1211
00:54:26,119 --> 00:54:34,490
size is greater than threshold block

1212
00:54:30,949 --> 00:54:36,199
split threshold right and that's some

1213
00:54:34,489 --> 00:54:39,949
kind of a thing that's just like you

1214
00:54:36,199 --> 00:54:41,689
know what it's gotta be at least 4096

1215
00:54:39,949 --> 00:54:44,719
it's got to be at least a page I'm

1216
00:54:41,690 --> 00:54:46,579
making this up it's probably something

1217
00:54:44,719 --> 00:54:49,239
bigger than that right but let's say we

1218
00:54:46,579 --> 00:54:53,000
do that right so if it's at least that

1219
00:54:49,239 --> 00:54:55,098
we split it right so if the remaining

1220
00:54:53,000 --> 00:54:59,300
size for the block split threshold then

1221
00:54:55,099 --> 00:55:02,960
what I do is I do an insert block in the

1222
00:54:59,300 --> 00:55:05,869
remaining section right right so what I

1223
00:55:02,960 --> 00:55:07,960
do there is I say okay the block size is

1224
00:55:05,869 --> 00:55:11,150
now actually going to be the block size

1225
00:55:07,960 --> 00:55:16,460
minus whatever the part is that we're

1226
00:55:11,150 --> 00:55:18,318
going to use there right so yeah

1227
00:55:16,460 --> 00:55:22,490
whatever the block size was before we're

1228
00:55:18,318 --> 00:55:30,349
shrinking that down and and we're gonna

1229
00:55:22,489 --> 00:55:32,568
actually use this this bit right that's

1230
00:55:30,349 --> 00:55:35,780
correct right block size - size is the

1231
00:55:32,568 --> 00:55:38,630
remaining size yeah the block size we

1232
00:55:35,780 --> 00:55:44,329
subtract that and then we say okay let's

1233
00:55:38,630 --> 00:55:45,980
put the let's put the actual block a new

1234
00:55:44,329 --> 00:55:49,160
block header in it's going to be

1235
00:55:45,980 --> 00:55:54,530
inserted after us right it's going to be

1236
00:55:49,159 --> 00:55:55,389
whatever the remaining size was and its

1237
00:55:54,530 --> 00:55:58,730
location

1238
00:55:55,389 --> 00:56:02,210
oops it's location is going to be

1239
00:55:58,730 --> 00:56:08,300
wherever our wherever our result

1240
00:56:02,210 --> 00:56:10,909
plus the size that we used right like so

1241
00:56:08,300 --> 00:56:16,940
and that'll automatically link it up and

1242
00:56:10,909 --> 00:56:18,769
off we go right so yeah pretty

1243
00:56:16,940 --> 00:56:22,789
straightforward not particularly

1244
00:56:18,769 --> 00:56:24,920
difficult we now have the result

1245
00:56:22,789 --> 00:56:27,710
although the void star needs to be out

1246
00:56:24,920 --> 00:56:33,500
here or we won't be able to return it so

1247
00:56:27,710 --> 00:56:36,920
that's how that actually works but that

1248
00:56:33,500 --> 00:56:38,239
seems about right to me yeah so that's

1249
00:56:36,920 --> 00:56:40,490
all good and so then the only thing that

1250
00:56:38,239 --> 00:56:43,219
we would need to do to follow that would

1251
00:56:40,489 --> 00:56:45,319
be in release asset memory we would then

1252
00:56:43,219 --> 00:56:47,629
need to be smart about that as well so

1253
00:56:45,320 --> 00:56:49,490
we need to recover the block right so we

1254
00:56:47,630 --> 00:56:54,380
need to do the asset memory block block

1255
00:56:49,489 --> 00:56:57,439
is gonna have to be equal to you know

1256
00:56:54,380 --> 00:56:59,119
the memory minus one right we need to

1257
00:56:57,440 --> 00:57:01,519
kind of back it up one so that gets us

1258
00:56:59,119 --> 00:57:03,829
our block back and then we can just go

1259
00:57:01,519 --> 00:57:08,300
ahead and say oh the block the flags are

1260
00:57:03,829 --> 00:57:13,940
equal to you know and equals not so we

1261
00:57:08,300 --> 00:57:15,410
can clear that asset memory used we can

1262
00:57:13,940 --> 00:57:17,480
clear it out say it's not being used

1263
00:57:15,409 --> 00:57:20,598
anymore and then the only thing we

1264
00:57:17,480 --> 00:57:22,849
really need to do at that point is take

1265
00:57:20,599 --> 00:57:25,670
a look at our previous and next and

1266
00:57:22,849 --> 00:57:27,170
merge them right but I'm not going to do

1267
00:57:25,670 --> 00:57:28,010
that now because we're running out of

1268
00:57:27,170 --> 00:57:29,800
time right

1269
00:57:28,010 --> 00:57:33,710
if I only got about three minutes left

1270
00:57:29,800 --> 00:57:35,000
so we'll just do merge now that's one of

1271
00:57:33,710 --> 00:57:36,289
those things that like I just type a ton

1272
00:57:35,000 --> 00:57:37,400
of code in there's no way that's gonna

1273
00:57:36,289 --> 00:57:41,559
work so this is just gonna be a crash

1274
00:57:37,400 --> 00:57:41,559
festival will debug it tomorrow

1275
00:57:42,289 --> 00:57:49,109
how is it that every time every time I

1276
00:57:46,619 --> 00:57:52,890
say it's gonna be a crash it doesn't

1277
00:57:49,108 --> 00:57:55,558
crash how is that okay that's more what

1278
00:57:52,889 --> 00:57:59,009
I was expected to see but it still

1279
00:57:55,559 --> 00:58:02,399
didn't crash alright at least I can say

1280
00:57:59,009 --> 00:58:05,668
it's a bug festival so we have a ton of

1281
00:58:02,398 --> 00:58:08,518
work to do there obviously that we need

1282
00:58:05,668 --> 00:58:12,989
to figure out and make sure thing is is

1283
00:58:08,518 --> 00:58:14,188
more copacetic than that so we got a got

1284
00:58:12,989 --> 00:58:16,168
take care of all that and we will take

1285
00:58:14,188 --> 00:58:21,148
care of all that but for now I'm going

1286
00:58:16,168 --> 00:58:22,679
to go to the QA and and take questions

1287
00:58:21,148 --> 00:58:25,798
so if you have questions about what we

1288
00:58:22,679 --> 00:58:30,568
just did please ask them now put Q colon

1289
00:58:25,798 --> 00:58:36,768
in front of your question and and I will

1290
00:58:30,568 --> 00:58:36,768
be able to see it there we go oops

1291
00:58:49,170 --> 00:58:53,490
questions and answers

1292
00:59:03,110 --> 00:59:14,309
questions and answers I'm feeling good

1293
00:59:12,449 --> 00:59:16,949
about this as stupid as this algorithm

1294
00:59:14,309 --> 00:59:18,480
is I feel like it's more fun to write

1295
00:59:16,949 --> 00:59:19,949
this yourself so you guys can kind of

1296
00:59:18,480 --> 00:59:22,860
see how you write a general-purpose

1297
00:59:19,949 --> 00:59:24,899
allocator even a really lame one I think

1298
00:59:22,860 --> 00:59:27,360
is more fun than just having the app

1299
00:59:24,900 --> 00:59:28,710
having the operating system do it so I

1300
00:59:27,360 --> 00:59:30,870
think we're gonna go this I think I'm

1301
00:59:28,710 --> 00:59:33,710
gonna pull out the operating system one

1302
00:59:30,869 --> 00:59:33,710
and we're gonna do it this way

1303
00:59:39,980 --> 00:59:43,800
James Woodman given that this is an

1304
00:59:42,239 --> 00:59:45,359
optimization problem it seems like we'll

1305
00:59:43,800 --> 00:59:47,130
want to have a system for profiling

1306
00:59:45,360 --> 00:59:48,420
asset use and eviction and check its

1307
00:59:47,130 --> 00:59:49,410
output periodically as the game and

1308
00:59:48,420 --> 00:59:50,940
assets grow over the next year or so

1309
00:59:49,409 --> 00:59:54,420
should this be on the agenda in the near

1310
00:59:50,940 --> 00:59:57,269
term so actually it is on the agenda in

1311
00:59:54,420 --> 01:00:00,090
the near term already you will notice

1312
00:59:57,269 --> 01:00:01,650
that I put this next and that is because

1313
01:00:00,090 --> 01:00:03,269
now we have I feel like we have

1314
01:00:01,650 --> 01:00:06,690
sufficiently complicated stuff in the

1315
01:00:03,269 --> 01:00:08,670
game already in the engine that now is

1316
01:00:06,690 --> 01:00:10,710
the time to be able to see that stuff

1317
01:00:08,670 --> 01:00:12,420
because yeah we want to be able to know

1318
01:00:10,710 --> 01:00:14,909
stuff like how many assets are evicted

1319
01:00:12,420 --> 01:00:16,650
or allocated per frame we want to know

1320
01:00:14,909 --> 01:00:18,210
stuff like what how many memory blocks

1321
01:00:16,650 --> 01:00:20,329
there are how how fragmented they are

1322
01:00:18,210 --> 01:00:23,099
like we'd like to see that stuff

1323
01:00:20,329 --> 01:00:26,599
we've got threads we'd like to see what

1324
01:00:23,099 --> 01:00:28,739
the threads are doing you know so

1325
01:00:26,599 --> 01:00:31,559
there's pretty much no question that we

1326
01:00:28,739 --> 01:00:32,969
want that and so we've you know we've

1327
01:00:31,559 --> 01:00:34,619
gotten things up and running you could

1328
01:00:32,969 --> 01:00:36,659
make a game with what we have now right

1329
01:00:34,619 --> 01:00:38,429
we've got renderer we've got asset

1330
01:00:36,659 --> 01:00:39,569
system we've got like good stuff in

1331
01:00:38,429 --> 01:00:42,449
there we've even got sound playback

1332
01:00:39,570 --> 01:00:43,740
already right so I think now is the time

1333
01:00:42,449 --> 01:00:44,969
to kind of go all right let's put some

1334
01:00:43,739 --> 01:00:46,349
debug code in there so we can actually

1335
01:00:44,969 --> 01:00:49,230
visualize everything and kind of tighten

1336
01:00:46,349 --> 01:00:50,219
things down and you know cuz some of

1337
01:00:49,230 --> 01:00:52,710
these other things like doing lighting

1338
01:00:50,219 --> 01:00:54,480
or whatever is kind of just a it's just

1339
01:00:52,710 --> 01:00:55,829
a visual quality improvement but it

1340
01:00:54,480 --> 01:00:57,480
doesn't actually look you could ship

1341
01:00:55,829 --> 01:01:00,329
this game without ever doing this to do

1342
01:00:57,480 --> 01:01:02,940
right we just wouldn't have to have we

1343
01:01:00,329 --> 01:01:05,069
just have boring lighting or something

1344
01:01:02,940 --> 01:01:06,389
right but this is definitely something

1345
01:01:05,070 --> 01:01:07,920
that we wouldn't really be able to ship

1346
01:01:06,389 --> 01:01:09,719
the game without and have a high quality

1347
01:01:07,920 --> 01:01:15,780
because we just we need be able to see

1348
01:01:09,719 --> 01:01:17,399
this stuff I'm not clear on what happens

1349
01:01:15,780 --> 01:01:18,570
in the else when we fail to find a block

1350
01:01:17,400 --> 01:01:20,430
could you go over it

1351
01:01:18,570 --> 01:01:22,890
sure well first of all keep in mind

1352
01:01:20,429 --> 01:01:27,779
we've got bugs so what happens in the

1353
01:01:22,889 --> 01:01:30,500
else is probably wrong but yes so here's

1354
01:01:27,780 --> 01:01:33,810
how this loop is starting to take shape

1355
01:01:30,500 --> 01:01:36,239
we know that we need asset memory we

1356
01:01:33,809 --> 01:01:38,429
start out by saying okay try to find a

1357
01:01:36,239 --> 01:01:41,179
block in our linked list of memory

1358
01:01:38,429 --> 01:01:45,389
blocks that the asset could just go into

1359
01:01:41,179 --> 01:01:47,009
right if we find one then this is the

1360
01:01:45,389 --> 01:01:49,829
part that just splits the block in half

1361
01:01:47,010 --> 01:01:52,290
and stores the asset in the first half

1362
01:01:49,829 --> 01:01:53,259
right and if you can't split it then it

1363
01:01:52,289 --> 01:01:58,329
just doesn't bother

1364
01:01:53,260 --> 01:02:00,250
right otherwise if that means that we're

1365
01:01:58,329 --> 01:02:01,900
out of memory essentially meaning we

1366
01:02:00,250 --> 01:02:03,730
have filled all of the memory that we

1367
01:02:01,900 --> 01:02:05,500
have to fill and possibly including

1368
01:02:03,730 --> 01:02:07,059
fragmentations so we it doesn't mean

1369
01:02:05,500 --> 01:02:10,809
we've perfectly filled it but we've

1370
01:02:07,059 --> 01:02:14,829
mostly filled it right we then look loop

1371
01:02:10,809 --> 01:02:17,889
through all of the assets in the order

1372
01:02:14,829 --> 01:02:20,170
in reverse order of recents recently

1373
01:02:17,889 --> 01:02:22,449
used right so the first asset we will

1374
01:02:20,170 --> 01:02:25,809
look at is the one that we last we

1375
01:02:22,449 --> 01:02:27,250
touched the furthest in the past because

1376
01:02:25,809 --> 01:02:30,340
our assumption is that the thing that we

1377
01:02:27,250 --> 01:02:31,750
used the longest amount ago is the one

1378
01:02:30,340 --> 01:02:36,220
that's least likely to be necessary on

1379
01:02:31,750 --> 01:02:38,858
like the next frame right so we come in

1380
01:02:36,219 --> 01:02:44,019
here and say okay what's that asset if

1381
01:02:38,858 --> 01:02:45,519
that asset is like has a valid load flag

1382
01:02:44,019 --> 01:02:48,219
set so it's like we've looked and seen

1383
01:02:45,519 --> 01:02:49,719
that it actually is loaded and not like

1384
01:02:48,219 --> 01:02:51,519
in the middle of being processed by a

1385
01:02:49,719 --> 01:02:53,829
background task or something right then

1386
01:02:51,519 --> 01:02:57,159
what we do is we just evict it goodbye

1387
01:02:53,829 --> 01:03:00,099
it's gone right and when we evict it

1388
01:02:57,159 --> 01:03:03,069
that frees up some memory so that allows

1389
01:03:00,099 --> 01:03:04,358
us to then ask again for a block we go

1390
01:03:03,070 --> 01:03:06,609
back through the loop and see if we can

1391
01:03:04,358 --> 01:03:09,369
find one now now the reason I put it to

1392
01:03:06,608 --> 01:03:11,739
do here was because there's no reason

1393
01:03:09,369 --> 01:03:15,280
for us to keep looking through blocks

1394
01:03:11,739 --> 01:03:17,409
again once we free this because when we

1395
01:03:15,280 --> 01:03:18,640
free this we then know that the only we

1396
01:03:17,409 --> 01:03:21,759
know that there were no blocks that

1397
01:03:18,639 --> 01:03:24,579
could hold us before so when we free

1398
01:03:21,760 --> 01:03:25,990
some memory we know that the only block

1399
01:03:24,579 --> 01:03:27,849
that could possibly hold us now is

1400
01:03:25,989 --> 01:03:30,368
whatever the block was that was created

1401
01:03:27,849 --> 01:03:33,159
by that free and so that's why I say

1402
01:03:30,369 --> 01:03:36,690
like that's we want to go ahead and do

1403
01:03:33,159 --> 01:03:36,690
that shortly right

1404
01:03:42,880 --> 01:03:47,269
why do we need to check the remaining

1405
01:03:44,900 --> 01:03:49,099
size versus the threshold why not just

1406
01:03:47,269 --> 01:03:51,440
use the remaining size if it satisfies

1407
01:03:49,099 --> 01:03:54,710
the request size so these are two

1408
01:03:51,440 --> 01:03:56,568
different things so when we do find

1409
01:03:54,710 --> 01:03:58,730
block for size we assume that the block

1410
01:03:56,568 --> 01:04:01,730
it returns if it returned a block can

1411
01:03:58,730 --> 01:04:05,539
fit the size so we always place the

1412
01:04:01,730 --> 01:04:07,960
asset bare if one comes back right this

1413
01:04:05,539 --> 01:04:10,338
is the code that places the asset there

1414
01:04:07,960 --> 01:04:16,190
right we mark the memory block is used

1415
01:04:10,338 --> 01:04:19,699
and we place the asset there okay so

1416
01:04:16,190 --> 01:04:22,869
this check is only to see whether the

1417
01:04:19,699 --> 01:04:27,558
amount of memory left over in the block

1418
01:04:22,869 --> 01:04:32,180
warrants creating a new free block in

1419
01:04:27,559 --> 01:04:33,710
that location to be used later because I

1420
01:04:32,179 --> 01:04:35,179
don't want to bother if there was only

1421
01:04:33,710 --> 01:04:38,358
if there wasn't enough room to ever

1422
01:04:35,179 --> 01:04:41,149
store an asset in that block we should

1423
01:04:38,358 --> 01:04:44,170
not bother right in fact I could do a

1424
01:04:41,150 --> 01:04:51,200
thing here was like to do set this based

1425
01:04:44,170 --> 01:04:52,460
on the smallest asset size right and so

1426
01:04:51,199 --> 01:04:53,929
it's basically just saying don't bother

1427
01:04:52,460 --> 01:04:56,210
creating a block that we're gonna like

1428
01:04:53,929 --> 01:04:57,889
think about in the future if nothing

1429
01:04:56,210 --> 01:04:59,150
could fit here if we know that our

1430
01:04:57,889 --> 01:05:02,328
biggest I'm out if we know that our

1431
01:04:59,150 --> 01:05:03,950
smallest asset is 16 K big then we never

1432
01:05:02,329 --> 01:05:06,109
need to create a block that's smaller

1433
01:05:03,949 --> 01:05:13,848
than 16 K because nothing could ever go

1434
01:05:06,108 --> 01:05:17,139
there right so yeah but that's not

1435
01:05:13,849 --> 01:05:19,700
really so okay that's not really true

1436
01:05:17,139 --> 01:05:23,568
there is a separate thing that could

1437
01:05:19,699 --> 01:05:26,058
happen if the block after this block got

1438
01:05:23,568 --> 01:05:27,650
freed and wanted to take some of the

1439
01:05:26,059 --> 01:05:30,859
memory from the preceding block right

1440
01:05:27,650 --> 01:05:32,780
that could happen so what we could start

1441
01:05:30,858 --> 01:05:40,159
doing you know I could put it to do here

1442
01:05:32,780 --> 01:05:46,519
and be like to do actually record the

1443
01:05:40,159 --> 01:05:51,259
unused portion of the memory right in a

1444
01:05:46,519 --> 01:05:53,420
block so that we can do the merge on

1445
01:05:51,260 --> 01:06:01,340
blocks

1446
01:05:53,420 --> 01:06:08,150
when neighbors are free right so we

1447
01:06:01,340 --> 01:06:09,260
could do that as well snafoodle how come

1448
01:06:08,150 --> 01:06:11,030
this memory management system is

1449
01:06:09,260 --> 01:06:13,820
strictly limited to game assets and not

1450
01:06:11,030 --> 01:06:15,410
other things as well well the reason for

1451
01:06:13,820 --> 01:06:16,940
that at the moment is just because we

1452
01:06:15,409 --> 01:06:19,429
don't have anything else that needs it

1453
01:06:16,940 --> 01:06:21,500
in the future if we find that we have

1454
01:06:19,429 --> 01:06:23,089
some other part of the code that wants

1455
01:06:21,500 --> 01:06:25,880
to do general-purpose allocation for

1456
01:06:23,090 --> 01:06:28,160
some reason we could pull this out and

1457
01:06:25,880 --> 01:06:36,160
use it there but that would be the time

1458
01:06:28,159 --> 01:06:36,159
to do it right not not now prematurely

1459
01:06:41,050 --> 01:06:47,590
what will the GUI handle what what GUI

1460
01:06:51,880 --> 01:06:56,030
grumpy giant 256 if this were a

1461
01:06:54,440 --> 01:06:58,670
commercial product would it make sense

1462
01:06:56,030 --> 01:07:04,870
to use malloc instead here or write your

1463
01:06:58,670 --> 01:07:07,099
own anyway for managing assets well I

1464
01:07:04,869 --> 01:07:12,230
guess what I would say is if this were a

1465
01:07:07,099 --> 01:07:16,429
commercial product I might have gone

1466
01:07:12,230 --> 01:07:19,519
ahead and said I actually want to do all

1467
01:07:16,429 --> 01:07:21,349
the necessary work to do like asset

1468
01:07:19,519 --> 01:07:22,639
tiling and making sure that I actually

1469
01:07:21,349 --> 01:07:26,210
never have to do general-purpose

1470
01:07:22,639 --> 01:07:29,529
allocation I might have I don't know

1471
01:07:26,210 --> 01:07:29,530
that I would have but I might have

1472
01:07:37,920 --> 01:07:43,858
most of the time I try to make sure

1473
01:07:40,420 --> 01:07:49,150
everything that I ship goes through just

1474
01:07:43,858 --> 01:07:52,239
fixed block allocation so I really don't

1475
01:07:49,150 --> 01:07:57,730
know is the answer I don't know I

1476
01:07:52,239 --> 01:07:58,419
certainly never called malloc but you

1477
01:07:57,730 --> 01:08:00,639
know if you really have a

1478
01:07:58,420 --> 01:08:02,710
general-purpose allocation thing to do

1479
01:08:00,639 --> 01:08:08,798
then you know that is roughly what

1480
01:08:02,710 --> 01:08:10,960
you're using so that's fine right so

1481
01:08:08,798 --> 01:08:13,088
yeah I mean I think I think if you

1482
01:08:10,960 --> 01:08:14,889
actually determined that you really

1483
01:08:13,088 --> 01:08:16,329
needed a general-purpose allocator and

1484
01:08:14,889 --> 01:08:17,439
it wasn't just like for example what

1485
01:08:16,329 --> 01:08:18,729
we're doing it now where it's just kind

1486
01:08:17,439 --> 01:08:20,979
of like yeah it would be interesting to

1487
01:08:18,729 --> 01:08:23,198
do one so let's do one if you really

1488
01:08:20,979 --> 01:08:24,939
determined that's what you needed then I

1489
01:08:23,198 --> 01:08:26,379
would say yet you I don't know that I

1490
01:08:24,939 --> 01:08:29,439
would use even you necessary use malloc

1491
01:08:26,380 --> 01:08:33,670
I might go try to find a public domain

1492
01:08:29,439 --> 01:08:36,219
or open source allocator that I felt

1493
01:08:33,670 --> 01:08:37,899
comfortable using and and integrate that

1494
01:08:36,219 --> 01:08:39,130
into the codebase so that I knew that it

1495
01:08:37,899 --> 01:08:41,679
would be the same on all the platforms

1496
01:08:39,130 --> 01:08:44,079
and not differ based on the C runtime

1497
01:08:41,679 --> 01:08:46,329
library that I happen to using because

1498
01:08:44,079 --> 01:08:48,698
that I don't love that I don't love not

1499
01:08:46,329 --> 01:08:50,318
knowing what my malloc is doing and if I

1500
01:08:48,698 --> 01:08:51,909
use the C runtime libraries that means

1501
01:08:50,319 --> 01:08:55,989
every platform will do it differently

1502
01:08:51,909 --> 01:08:57,639
and that doesn't thrill me so so yeah I

1503
01:08:55,988 --> 01:08:58,899
don't know if using malloc would be the

1504
01:08:57,640 --> 01:09:01,390
right call but writing your own

1505
01:08:58,899 --> 01:09:03,759
allocator isn't necessary you could use

1506
01:09:01,390 --> 01:09:05,469
one that existed much like in hand

1507
01:09:03,759 --> 01:09:06,609
material in general we write everything

1508
01:09:05,469 --> 01:09:08,079
from scratch because that's the point of

1509
01:09:06,609 --> 01:09:10,900
the project that doesn't mean that if

1510
01:09:08,079 --> 01:09:12,488
you found a open source one or something

1511
01:09:10,899 --> 01:09:15,219
that you trusted that you couldn't use

1512
01:09:12,488 --> 01:09:17,198
it right like I said before you know I

1513
01:09:15,219 --> 01:09:18,969
like sometimes to use like Shawn's Shawn

1514
01:09:17,198 --> 01:09:22,509
Barrett's libraries right they're good

1515
01:09:18,969 --> 01:09:24,159
and so I don't I'm it doesn't bother me

1516
01:09:22,509 --> 01:09:25,569
to use that like it might bother me to

1517
01:09:24,159 --> 01:09:26,948
call malloc which I don't necessarily

1518
01:09:25,569 --> 01:09:28,029
trust cuz I don't have a whole lot of

1519
01:09:26,948 --> 01:09:32,710
confidence in the people who wrote it

1520
01:09:28,029 --> 01:09:36,929
necessarily any possibilities using

1521
01:09:32,710 --> 01:09:36,929
Markov chains probably not

1522
01:09:47,390 --> 01:09:51,930
it's looking like Vulcan if it gets

1523
01:09:50,579 --> 01:09:53,039
released on timely manner is going to be

1524
01:09:51,930 --> 01:09:54,869
a good choice for hard when during I

1525
01:09:53,039 --> 01:09:57,229
just read that you have control over all

1526
01:09:54,869 --> 01:09:59,220
memory to avoid any unknown allocations

1527
01:09:57,229 --> 01:10:01,019
explicit memory management in Vulcan

1528
01:09:59,220 --> 01:10:03,090
allows applications to use custom

1529
01:10:01,020 --> 01:10:04,710
allocation strategies for example to

1530
01:10:03,090 --> 01:10:09,060
allocate all memory upfront and avoid

1531
01:10:04,710 --> 01:10:10,220
any allocations during rendering so two

1532
01:10:09,060 --> 01:10:16,350
things about that

1533
01:10:10,220 --> 01:10:19,369
one I am on the Vulcan Advisory Board so

1534
01:10:16,350 --> 01:10:21,530
I cannot really comment on Vulcan things

1535
01:10:19,369 --> 01:10:26,369
due to NDA

1536
01:10:21,529 --> 01:10:33,630
second I would say that that statement

1537
01:10:26,369 --> 01:10:35,099
may be a little misleading but I can't

1538
01:10:33,630 --> 01:10:37,050
really say much else about it without

1539
01:10:35,100 --> 01:10:38,579
being NDA ish I would be interested to

1540
01:10:37,050 --> 01:10:40,949
know where you read that and who was

1541
01:10:38,579 --> 01:10:42,600
saying that because I don't even know

1542
01:10:40,949 --> 01:10:48,750
who was actually allowed to say

1543
01:10:42,600 --> 01:10:50,810
something like that yeah I guess I can't

1544
01:10:48,750 --> 01:10:53,069
really say much about that other than I

1545
01:10:50,810 --> 01:10:55,770
find that statement to be highly

1546
01:10:53,069 --> 01:10:58,799
misleading although it could technically

1547
01:10:55,770 --> 01:11:02,610
be considered true depending on how you

1548
01:10:58,800 --> 01:11:04,590
wish to define some of those words and I

1549
01:11:02,609 --> 01:11:06,179
can't elaborate because and I'm not sure

1550
01:11:04,590 --> 01:11:08,819
why whoever said that was allowed to say

1551
01:11:06,180 --> 01:11:10,770
that in the first place have you thought

1552
01:11:08,819 --> 01:11:12,630
about having a prefab asset that people

1553
01:11:10,770 --> 01:11:14,400
could use to make more complex assets

1554
01:11:12,630 --> 01:11:19,430
like a whole house with functional doors

1555
01:11:14,399 --> 01:11:22,019
I don't know what that means

1556
01:11:19,430 --> 01:11:24,000
the cuy mentioned in the to-do list ah

1557
01:11:22,020 --> 01:11:28,380
the GUI mentioned in the to-do list

1558
01:11:24,000 --> 01:11:30,600
you're talking about this that's just so

1559
01:11:28,380 --> 01:11:32,730
that we could like when we get all this

1560
01:11:30,600 --> 01:11:35,880
debug stuff in there it's you're gonna

1561
01:11:32,729 --> 01:11:37,139
need to be able to like view stuff that

1562
01:11:35,880 --> 01:11:38,190
wouldn't all fit on the screen or you

1563
01:11:37,140 --> 01:11:39,480
wouldn't be able to see the game if you

1564
01:11:38,189 --> 01:11:40,919
stuck it all on there so we kind of need

1565
01:11:39,479 --> 01:11:42,629
a little GUI for like being able to pick

1566
01:11:40,920 --> 01:11:49,109
what am i viewing in the debug view

1567
01:11:42,630 --> 01:11:51,329
right now you know what I'm saying you

1568
01:11:49,109 --> 01:11:54,000
keep saying split the block in half what

1569
01:11:51,329 --> 01:11:58,019
do you mean so what I mean by split the

1570
01:11:54,000 --> 01:11:59,859
block in half know where my pin is there

1571
01:11:58,020 --> 01:12:02,239
it is

1572
01:11:59,859 --> 01:12:06,500
what I mean by split the block in half

1573
01:12:02,238 --> 01:12:10,428
is that here's what I'm looking at right

1574
01:12:06,500 --> 01:12:13,310
now right we've got a little bit here

1575
01:12:10,429 --> 01:12:16,219
where we've got you know a previous

1576
01:12:13,310 --> 01:12:19,160
pointer and a next pointer right then we

1577
01:12:16,219 --> 01:12:20,750
have flags and we have size or whatever

1578
01:12:19,159 --> 01:12:22,609
right so we've got this little header up

1579
01:12:20,750 --> 01:12:24,770
here and then we've got some memory

1580
01:12:22,609 --> 01:12:27,559
right so this is just a chunk of memory

1581
01:12:24,770 --> 01:12:29,690
that we can use for stuff we come

1582
01:12:27,560 --> 01:12:31,670
through and in this part of the code

1583
01:12:29,689 --> 01:12:33,109
here we say find a block we get back a

1584
01:12:31,670 --> 01:12:36,050
block so what we're talking about is a

1585
01:12:33,109 --> 01:12:36,559
pointer to this thing right so we say

1586
01:12:36,050 --> 01:12:38,779
okay great

1587
01:12:36,560 --> 01:12:42,560
we found a block will place the asset

1588
01:12:38,779 --> 01:12:44,359
right here right and then we have to see

1589
01:12:42,560 --> 01:12:47,150
how big it is so maybe the asset takes

1590
01:12:44,359 --> 01:12:49,789
up this much space which means that this

1591
01:12:47,149 --> 01:12:51,948
is a pretty usable chunk of memory right

1592
01:12:49,789 --> 01:12:54,529
so when I say split the block in half

1593
01:12:51,948 --> 01:12:57,579
what I mean is I now need to make a

1594
01:12:54,529 --> 01:13:00,800
marker that says that this is available

1595
01:12:57,579 --> 01:13:03,649
so what I do is I make a new header and

1596
01:13:00,800 --> 01:13:06,409
I stick it in here its previous pointer

1597
01:13:03,649 --> 01:13:08,809
points up to this guy this guy's next

1598
01:13:06,409 --> 01:13:10,460
pointer now points to here and this next

1599
01:13:08,810 --> 01:13:12,890
pointer points to whatever this guy was

1600
01:13:10,460 --> 01:13:15,350
pointing at so I've inserted this block

1601
01:13:12,890 --> 01:13:17,150
into the chain I split this block in

1602
01:13:15,350 --> 01:13:20,480
half and inserted this secondary block

1603
01:13:17,149 --> 01:13:23,569
the the into it and then whatever is

1604
01:13:20,479 --> 01:13:26,389
remaining is is now available for use

1605
01:13:23,569 --> 01:13:28,460
again because this is used but this is

1606
01:13:26,390 --> 01:13:30,670
free that's what I mean by split the

1607
01:13:28,460 --> 01:13:30,670
block

1608
01:13:36,198 --> 01:13:41,000
mojo Bhoja this is where I read it from

1609
01:13:38,760 --> 01:13:43,920
and there you've you've pasted the link

1610
01:13:41,000 --> 01:13:48,079
copy link address I will see if I can

1611
01:13:43,920 --> 01:13:48,079
load up that link that you have pasted

1612
01:13:48,260 --> 01:13:54,320
it looks like it is a link from image

1613
01:13:52,050 --> 01:14:00,119
tech blog

1614
01:13:54,319 --> 01:14:01,429
let's see Ashley Smith I do not know who

1615
01:14:00,119 --> 01:14:02,849
that is

1616
01:14:01,430 --> 01:14:04,590
Vulcan is a next-generation

1617
01:14:02,850 --> 01:14:06,739
high-performance graphics and computer

1618
01:14:04,590 --> 01:14:10,350
if your I developed by the Khronos group

1619
01:14:06,738 --> 01:14:11,609
okay here is the summary of Vulcan

1620
01:14:10,350 --> 01:14:13,640
extracted from the official press

1621
01:14:11,609 --> 01:14:13,639
release

1622
01:14:22,789 --> 01:14:32,819
let's see where this is allocation when

1623
01:14:30,720 --> 01:14:34,380
you call GL tech storage 2d and OpenGL

1624
01:14:32,819 --> 01:14:35,699
the driver has to allocate memory for a

1625
01:14:34,380 --> 01:14:37,650
2-dimensional or one dimensional array

1626
01:14:35,699 --> 01:14:39,210
texture of the function and the memory

1627
01:14:37,649 --> 01:14:40,619
allocation process represented black box

1628
01:14:39,210 --> 01:14:42,119
in Vulcan over the marry allocation is

1629
01:14:40,619 --> 01:14:43,769
done by the application this means that

1630
01:14:42,119 --> 01:14:44,970
the application knows more about what

1631
01:14:43,770 --> 01:14:46,410
type of memory is using and more

1632
01:14:44,970 --> 01:14:47,850
importantly how much memory is using

1633
01:14:46,409 --> 01:14:49,229
which would be more useful for

1634
01:14:47,850 --> 01:14:50,400
applications that are memory bound this

1635
01:14:49,229 --> 01:14:52,439
isn't conscious treating out of memory

1636
01:14:50,399 --> 01:14:57,389
or explicit memory management volcán

1637
01:14:52,439 --> 01:14:58,769
less of a so I don't know what I'm

1638
01:14:57,390 --> 01:15:00,810
allowed to say now let's say all I would

1639
01:14:58,770 --> 01:15:03,840
say is I would give this blog absolutely

1640
01:15:00,810 --> 01:15:05,430
zero I would ignore absolutely

1641
01:15:03,840 --> 01:15:08,130
everything you see in that blog that's

1642
01:15:05,430 --> 01:15:10,050
all I have to say about that well the

1643
01:15:08,130 --> 01:15:12,869
debug GUI have a cool console like quake

1644
01:15:10,050 --> 01:15:16,279
or unreal no I don't think that would be

1645
01:15:12,869 --> 01:15:16,279
a good use of my stream time

1646
01:15:24,118 --> 01:15:26,498
alright looks like that's the end of

1647
01:15:25,958 --> 01:15:37,059
questions

1648
01:15:26,498 --> 01:15:37,978
I see no more all right so I will wrap

1649
01:15:37,059 --> 01:15:46,119
it up

1650
01:15:37,979 --> 01:15:47,499
do a little rappy poo let's see here I'm

1651
01:15:46,118 --> 01:15:48,788
kind of excited about this little memory

1652
01:15:47,498 --> 01:15:51,668
thing even if it's lousy

1653
01:15:48,788 --> 01:15:54,219
I cut I'm the kind of person who

1654
01:15:51,668 --> 01:15:56,229
actually prefers code that I completely

1655
01:15:54,219 --> 01:16:00,399
know how it works to code that may be

1656
01:15:56,229 --> 01:16:01,570
better but that I don't know because it

1657
01:16:00,399 --> 01:16:04,449
just allows me to think through

1658
01:16:01,569 --> 01:16:05,948
everything in a way that I can't

1659
01:16:04,448 --> 01:16:07,029
otherwise I don't know so I'm kind of

1660
01:16:05,948 --> 01:16:09,398
excited about this we'll have our own

1661
01:16:07,029 --> 01:16:11,050
little memory a little memory guy and

1662
01:16:09,399 --> 01:16:13,539
maybe well at some point try to make him

1663
01:16:11,050 --> 01:16:16,119
even kind of good at first it won't

1664
01:16:13,538 --> 01:16:19,389
matter it may never even matter really

1665
01:16:16,118 --> 01:16:20,738
because computers are very fast and this

1666
01:16:19,389 --> 01:16:22,449
is unlike this is not something that

1667
01:16:20,738 --> 01:16:23,648
happens that often you know it's

1668
01:16:22,448 --> 01:16:25,688
something that happens a few times a

1669
01:16:23,649 --> 01:16:27,489
frame and at that point you have a lot

1670
01:16:25,689 --> 01:16:28,809
of leeway right it's not like pixels

1671
01:16:27,488 --> 01:16:31,628
where there's millions of them being

1672
01:16:28,809 --> 01:16:33,248
filled so who knows but anyway it's kind

1673
01:16:31,628 --> 01:16:35,139
of cool I'm kind of happy we decided to

1674
01:16:33,248 --> 01:16:37,208
do it or when I say we I mean me but you

1675
01:16:35,139 --> 01:16:40,628
know I mean it's a royal week anyway

1676
01:16:37,208 --> 01:16:44,828
let's go ahead and close down here close

1677
01:16:40,628 --> 01:16:46,658
down thank you everyone for joining me

1678
01:16:44,828 --> 01:16:47,889
for another episode of handmade hero it

1679
01:16:46,658 --> 01:16:49,719
has been a pleasure coding with you as

1680
01:16:47,889 --> 01:16:51,429
always if you would like to follow along

1681
01:16:49,719 --> 01:16:52,479
with source code at home if you

1682
01:16:51,429 --> 01:16:53,408
pre-order the game it comes with a

1683
01:16:52,479 --> 01:16:54,458
source code so that's something you

1684
01:16:53,408 --> 01:16:55,958
might want to check out you can go to

1685
01:16:54,458 --> 01:16:57,639
handmade hero or you can do it with a

1686
01:16:55,958 --> 01:17:00,488
little pre-order button that's all it

1687
01:16:57,639 --> 01:17:01,689
takes and you can play around the source

1688
01:17:00,488 --> 01:17:04,738
code I updated every night after we

1689
01:17:01,689 --> 01:17:06,909
finish coding here we also have

1690
01:17:04,738 --> 01:17:09,308
hopefully this weekend well finally I

1691
01:17:06,908 --> 01:17:10,929
can get maybe the github access stuff

1692
01:17:09,309 --> 01:17:13,269
working I'm looking forward to that

1693
01:17:10,929 --> 01:17:15,010
only because I noticed people like that

1694
01:17:13,269 --> 01:17:17,530
and I have been doing the work of

1695
01:17:15,010 --> 01:17:19,079
keeping the github up to date and I

1696
01:17:17,529 --> 01:17:23,590
think it's working

1697
01:17:19,078 --> 01:17:23,948
you know how git is but I think it's

1698
01:17:23,590 --> 01:17:27,128
working

1699
01:17:23,948 --> 01:17:29,319
so hopefully that will also happen a

1700
01:17:27,128 --> 01:17:31,029
little further down the line we also

1701
01:17:29,319 --> 01:17:32,049
have a patreon page if you want to just

1702
01:17:31,029 --> 01:17:34,090
support the video series you can

1703
01:17:32,050 --> 01:17:35,130
subscribe to that and we have a forum

1704
01:17:34,090 --> 01:17:37,739
site where if

1705
01:17:35,130 --> 01:17:39,510
you want to ask questions or take a look

1706
01:17:37,738 --> 01:17:41,069
at an anti episode guy there's just good

1707
01:17:39,510 --> 01:17:42,630
resources on there for people trying to

1708
01:17:41,069 --> 01:17:45,000
learn from the series there's also a

1709
01:17:42,630 --> 01:17:47,219
tweet bot that tweets the schedule so if

1710
01:17:45,000 --> 01:17:48,779
you want to catch live this stream live

1711
01:17:47,219 --> 01:17:51,420
that always lets you know when it's

1712
01:17:48,779 --> 01:17:54,269
gonna be live i broadcast the schedule

1713
01:17:51,420 --> 01:17:55,679
at the weekends and then every day kind

1714
01:17:54,270 --> 01:17:57,030
of gives a little reminder tweet to let

1715
01:17:55,679 --> 01:17:59,158
you know when that's when it will be for

1716
01:17:57,029 --> 01:18:01,559
that day so that you can plan to see it

1717
01:17:59,158 --> 01:18:05,069
if you would like to so that's about it

1718
01:18:01,560 --> 01:18:07,080
I hope everyone has enjoyed our brief

1719
01:18:05,069 --> 01:18:08,099
little foray into general purpose

1720
01:18:07,079 --> 01:18:10,139
allocation which we will continue

1721
01:18:08,100 --> 01:18:12,210
tomorrow 5:00 p.m. Pacific Daylight Time

1722
01:18:10,139 --> 01:18:13,380
right here on Twitch and we'll try to

1723
01:18:12,210 --> 01:18:15,179
get everything kind of buttoned up a

1724
01:18:13,380 --> 01:18:16,260
little bit for our basic general purpose

1725
01:18:15,179 --> 01:18:17,520
ocular we should be able to have it

1726
01:18:16,260 --> 01:18:19,230
working fairly nicely tomorrow I think

1727
01:18:17,520 --> 01:18:22,440
it just might not be very efficient at

1728
01:18:19,229 --> 01:18:24,119
finding memory blocks but hey that's

1729
01:18:22,439 --> 01:18:26,189
okay things can get more efficient later

1730
01:18:24,119 --> 01:18:28,559
so that's it everyone thank you for

1731
01:18:26,189 --> 01:18:31,289
joining me I hope you have fun coding

1732
01:18:28,560 --> 01:18:33,920
until I see you tomorrow until then take

1733
01:18:31,289 --> 01:18:33,920
it easy everyone

