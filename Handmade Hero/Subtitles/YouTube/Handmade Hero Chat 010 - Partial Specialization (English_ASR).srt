1
00:00:00,000 --> 00:00:04,589
echo the recording hello everyone and

2
00:00:02,970 --> 00:00:06,450
welcome to handmade hero the show where

3
00:00:04,589 --> 00:00:08,009
we code a complete game live on stream

4
00:00:06,450 --> 00:00:12,629
except we've been on our side break for

5
00:00:08,009 --> 00:00:15,388
two weeks which we are cautiously going

6
00:00:12,630 --> 00:00:16,980
to stop being on our side break this

7
00:00:15,388 --> 00:00:19,618
coming week and see how it goes no

8
00:00:16,980 --> 00:00:22,589
promises I don't know if it will go well

9
00:00:19,618 --> 00:00:25,859
or if it will go poorly we will see what

10
00:00:22,589 --> 00:00:27,629
happens but next week we will start back

11
00:00:25,859 --> 00:00:29,460
again cautiously doing some coding I

12
00:00:27,629 --> 00:00:31,049
don't think we'll jump into handmade

13
00:00:29,460 --> 00:00:32,939
hero coding what I'd like to do instead

14
00:00:31,050 --> 00:00:35,070
is maybe do a little bit of four coder

15
00:00:32,939 --> 00:00:37,429
coding get ourselves a modal editor

16
00:00:35,070 --> 00:00:40,950
which hopefully helps with the RSI as

17
00:00:37,429 --> 00:00:43,829
well and assuming the fat goes well then

18
00:00:40,950 --> 00:00:45,149
the week after we can start back on

19
00:00:43,829 --> 00:00:46,500
handmade here again which I would like

20
00:00:45,149 --> 00:00:50,429
to do and I'm sure you would like to do

21
00:00:46,500 --> 00:00:52,980
as well in the meantime as we have been

22
00:00:50,429 --> 00:00:54,750
doing I've been taking questions that

23
00:00:52,979 --> 00:00:57,299
people want answers to and I have three

24
00:00:54,750 --> 00:00:59,369
things that have come up that need

25
00:00:57,299 --> 00:01:02,099
addressing two of them are quick one of

26
00:00:59,369 --> 00:01:05,879
them is not so quick so i will do the

27
00:01:02,100 --> 00:01:07,590
two relatively quick ones first and the

28
00:01:05,879 --> 00:01:08,879
first one is from twitter which is the

29
00:01:07,590 --> 00:01:12,570
discussion that was going on at the

30
00:01:08,879 --> 00:01:14,759
moment involving mr. sean barrett the

31
00:01:12,569 --> 00:01:16,169
person who wrote the FTB libraries which

32
00:01:14,760 --> 00:01:19,109
we have talked about many times on

33
00:01:16,170 --> 00:01:22,650
stream as being a good example of code

34
00:01:19,109 --> 00:01:34,219
that people can actually use that helps

35
00:01:22,650 --> 00:01:41,980
them but this is the references prevent

36
00:01:34,219 --> 00:01:48,400
null pointers question

37
00:01:41,980 --> 00:01:50,350
so I want to make it clear because I

38
00:01:48,400 --> 00:01:54,340
believe this is kind of a statement of

39
00:01:50,349 --> 00:01:56,890
fact and not a statement of opinion so I

40
00:01:54,340 --> 00:01:59,460
want to make it very clear what the sort

41
00:01:56,890 --> 00:02:02,170
of concept is behind these statements

42
00:01:59,459 --> 00:02:05,919
and why this statement in particular I

43
00:02:02,170 --> 00:02:08,379
think is just objectively incorrect not

44
00:02:05,920 --> 00:02:10,240
subjectively not a matter of purring

45
00:02:08,379 --> 00:02:14,530
practice not a question of opinion but

46
00:02:10,240 --> 00:02:16,659
actually factually wrong and I want to

47
00:02:14,530 --> 00:02:23,020
be very specific it's this word right

48
00:02:16,659 --> 00:02:25,689
here that is wrong so I will now try to

49
00:02:23,020 --> 00:02:27,820
demonstrate to you why I believe this is

50
00:02:25,689 --> 00:02:29,949
just factually wrong this doesn't mean

51
00:02:27,819 --> 00:02:31,329
you shouldn't use references it doesn't

52
00:02:29,949 --> 00:02:33,310
mean that I would argue with someone who

53
00:02:31,330 --> 00:02:36,790
said that they prefer using references

54
00:02:33,310 --> 00:02:38,050
for various semantic reasons it would it

55
00:02:36,789 --> 00:02:39,219
would not mean that i would say that

56
00:02:38,050 --> 00:02:41,230
something was wrong who said they like

57
00:02:39,219 --> 00:02:42,759
to use references as a way of notating

58
00:02:41,229 --> 00:02:44,979
to themselves what something meant all

59
00:02:42,759 --> 00:02:47,530
of those things may be fine programming

60
00:02:44,979 --> 00:02:48,909
practices that people can choose to use

61
00:02:47,530 --> 00:02:52,870
or not use based on their own personal

62
00:02:48,909 --> 00:02:55,719
preference but this comment is just

63
00:02:52,870 --> 00:02:57,759
always incorrect just factually as far

64
00:02:55,719 --> 00:03:03,250
as I'm concerned and I wanted to explain

65
00:02:57,759 --> 00:03:05,469
why okay so the reason is that if you

66
00:03:03,250 --> 00:03:09,489
are claiming that using references in

67
00:03:05,469 --> 00:03:11,770
c++ somehow prevents you from having

68
00:03:09,489 --> 00:03:13,360
null pointer and when I say prevent to

69
00:03:11,770 --> 00:03:17,830
having no pointers what really mean is

70
00:03:13,360 --> 00:03:19,239
null pointer dereferences right and we

71
00:03:17,830 --> 00:03:22,709
all know what that is right that's if

72
00:03:19,239 --> 00:03:26,409
you have something like this int star a

73
00:03:22,709 --> 00:03:29,530
equals zero and then I do star a equals

74
00:03:26,409 --> 00:03:31,719
anything this is attempting to write to

75
00:03:29,530 --> 00:03:34,900
a memory location the memory location is

76
00:03:31,719 --> 00:03:36,459
zero or as we might call it null right

77
00:03:34,900 --> 00:03:42,069
which just means it's pointing to

78
00:03:36,459 --> 00:03:45,219
nothing and specifically so this will

79
00:03:42,069 --> 00:03:47,049
immediately cause a fault and we know

80
00:03:45,219 --> 00:03:48,280
this we see this all the time we've seen

81
00:03:47,050 --> 00:03:50,350
this on handmade hero when we've had

82
00:03:48,280 --> 00:03:51,849
bugs or something like this we know that

83
00:03:50,349 --> 00:03:53,530
if we dereference the null pointer we're

84
00:03:51,849 --> 00:03:55,419
going to get a fault it's just like a

85
00:03:53,530 --> 00:03:57,939
divided by zero or other things like

86
00:03:55,419 --> 00:04:00,429
us where the processor can be programmed

87
00:03:57,939 --> 00:04:04,000
and put into various states that causes

88
00:04:00,430 --> 00:04:06,849
it to immediately trigger a hardware

89
00:04:04,000 --> 00:04:08,560
style exception not C++ static section

90
00:04:06,848 --> 00:04:10,719
but actually a literal you know hardware

91
00:04:08,560 --> 00:04:13,420
exception in the case where this occurs

92
00:04:10,719 --> 00:04:16,120
and the operating system will catch that

93
00:04:13,419 --> 00:04:19,659
and let us know so this is a hard fault

94
00:04:16,120 --> 00:04:20,949
if this occurs so obviously we never

95
00:04:19,660 --> 00:04:22,360
want it to happen in the run of our

96
00:04:20,949 --> 00:04:24,189
program unless something very specific

97
00:04:22,360 --> 00:04:26,319
and weird is going on and we have some

98
00:04:24,189 --> 00:04:28,660
kind of exception handling at the

99
00:04:26,319 --> 00:04:32,918
hardware exception handling set up to

100
00:04:28,660 --> 00:04:35,620
deal with it we don't ever want this to

101
00:04:32,918 --> 00:04:37,478
happen so it makes sense the developer

102
00:04:35,620 --> 00:04:38,769
would always want to do things that

103
00:04:37,478 --> 00:04:40,240
would prevent them from getting into

104
00:04:38,769 --> 00:04:44,228
situations where they dereference a null

105
00:04:40,240 --> 00:04:46,470
pointer it is almost always 99.999

106
00:04:44,228 --> 00:04:52,569
percent of the time going to be a bug

107
00:04:46,470 --> 00:04:55,690
okay so some people claim that using

108
00:04:52,569 --> 00:04:58,569
references instead of pointers prevents

109
00:04:55,689 --> 00:05:01,120
this from happening and what does that

110
00:04:58,569 --> 00:05:03,129
mean exactly well what they're saying is

111
00:05:01,120 --> 00:05:05,259
that if for example I was to make a

112
00:05:03,129 --> 00:05:06,279
function in fact I guess I'll make it

113
00:05:05,259 --> 00:05:08,050
void because it doesn't matter at this

114
00:05:06,279 --> 00:05:11,439
particular point let's say I had a

115
00:05:08,050 --> 00:05:15,759
function void foo and I take an int star

116
00:05:11,439 --> 00:05:21,209
a here and on the other side I have a

117
00:05:15,759 --> 00:05:25,509
void foo that takes an int reference a

118
00:05:21,209 --> 00:05:28,120
ok and in this case we have you know

119
00:05:25,509 --> 00:05:34,418
this star a and i'm going to say star a

120
00:05:28,120 --> 00:05:38,560
oops equals 5 and in this side I'm going

121
00:05:34,418 --> 00:05:40,930
to say a equals 5 these are essentially

122
00:05:38,560 --> 00:05:44,860
completely equivalent pieces of code as

123
00:05:40,930 --> 00:05:47,340
far as the compiler is concerned ok they

124
00:05:44,860 --> 00:05:49,479
will produce exactly the same operations

125
00:05:47,339 --> 00:05:51,339
the only difference between these two

126
00:05:49,478 --> 00:05:53,079
pieces of code is that in one case I've

127
00:05:51,339 --> 00:05:56,049
used a reference which means that

128
00:05:53,079 --> 00:05:59,168
semantically speaking wherever I refer

129
00:05:56,050 --> 00:06:00,910
to a I am talking about the thing that

130
00:05:59,168 --> 00:06:03,939
the pointer points to because this

131
00:06:00,910 --> 00:06:08,050
really is just still a pointer ok under

132
00:06:03,939 --> 00:06:11,228
the hood it's going to pass a pointer

133
00:06:08,050 --> 00:06:13,629
but in this case I'm leaving the pointer

134
00:06:11,228 --> 00:06:14,949
as an explicit thing so when I want to

135
00:06:13,629 --> 00:06:18,879
actually write to the pointer I put a

136
00:06:14,949 --> 00:06:20,949
star in here okay a very simple very

137
00:06:18,879 --> 00:06:23,560
straightforward the compiler will in

138
00:06:20,949 --> 00:06:26,199
both cases produce some code that moves

139
00:06:23,560 --> 00:06:29,199
five to an address that is passed by the

140
00:06:26,199 --> 00:06:30,879
collar but in one case that address is

141
00:06:29,199 --> 00:06:33,728
passed as a reference in one case that

142
00:06:30,879 --> 00:06:38,259
average average address is being passed

143
00:06:33,728 --> 00:06:41,158
as a pointer semantically that's it so

144
00:06:38,259 --> 00:06:44,710
again code is the same semantics are

145
00:06:41,158 --> 00:06:47,918
different so now someone tells you hey

146
00:06:44,709 --> 00:06:55,180
if you write code like this that

147
00:06:47,918 --> 00:06:57,189
prevents null pointer dereference but if

148
00:06:55,180 --> 00:07:00,430
you write code like this somehow it

149
00:06:57,189 --> 00:07:04,300
doesn't the implication is this will

150
00:07:00,430 --> 00:07:09,490
catch some bug for you that this one

151
00:07:04,300 --> 00:07:12,639
will not and my assertion is show me how

152
00:07:09,490 --> 00:07:15,430
that's possible tell me what you're

153
00:07:12,639 --> 00:07:17,740
seeing that makes you believe that

154
00:07:15,430 --> 00:07:22,658
that's true because I am going to make a

155
00:07:17,740 --> 00:07:24,550
claim that will I'm sure ignite the

156
00:07:22,658 --> 00:07:27,310
people who make this claim they will

157
00:07:24,550 --> 00:07:29,439
they will explode in a giant fireball of

158
00:07:27,310 --> 00:07:35,819
rage but I am actually going to claim

159
00:07:29,439 --> 00:07:38,860
that if anything the opposite is true

160
00:07:35,819 --> 00:07:43,028
meaning this is the code that will

161
00:07:38,860 --> 00:07:47,830
create less null pointer dereferences

162
00:07:43,028 --> 00:07:49,240
and this will create more don't believe

163
00:07:47,829 --> 00:07:51,189
me well let's see if you believe me

164
00:07:49,240 --> 00:07:52,930
after we're done okay so I've got to

165
00:07:51,189 --> 00:07:56,019
function so I can call foo star F

166
00:07:52,930 --> 00:07:58,000
through reference I so what does that

167
00:07:56,019 --> 00:08:00,939
look like at the call site well at the

168
00:07:58,000 --> 00:08:06,629
call site it looks like this I've got

169
00:08:00,939 --> 00:08:11,019
int B equals 6 and then I call foo

170
00:08:06,629 --> 00:08:17,139
address of B right on the other hand I

171
00:08:11,019 --> 00:08:19,120
have int B equals 6 foo be okay both of

172
00:08:17,139 --> 00:08:21,490
these will pass the pointer both of

173
00:08:19,120 --> 00:08:24,310
these will modify be so that it now

174
00:08:21,490 --> 00:08:26,199
actually says five instead of six after

175
00:08:24,310 --> 00:08:28,750
we come out of here so they'll both do

176
00:08:26,199 --> 00:08:30,879
exactly the same thing but on this side

177
00:08:28,750 --> 00:08:35,559
I take the address of the be first and

178
00:08:30,879 --> 00:08:39,399
on this side I do not now in this code

179
00:08:35,559 --> 00:08:40,958
obviously there is no way that we could

180
00:08:39,399 --> 00:08:45,399
have a null pointer dereference in

181
00:08:40,958 --> 00:08:48,250
either case right because if we didn't

182
00:08:45,399 --> 00:08:50,080
have a pointer to begin with then taking

183
00:08:48,250 --> 00:08:54,429
the address of it certainly isn't going

184
00:08:50,080 --> 00:08:56,980
to introduce a no so no savings here so

185
00:08:54,429 --> 00:08:59,169
let's take the only other case that

186
00:08:56,980 --> 00:09:02,320
actually exists the one where we already

187
00:08:59,169 --> 00:09:05,229
had a pointer so now we have int star B

188
00:09:02,320 --> 00:09:09,879
equals something and over here we have

189
00:09:05,230 --> 00:09:12,909
int star B equals something well in this

190
00:09:09,879 --> 00:09:16,450
case I call foo with the B and if

191
00:09:12,909 --> 00:09:20,769
perchance this was 0 this code will

192
00:09:16,450 --> 00:09:24,160
crash right on the other hand if instead

193
00:09:20,769 --> 00:09:26,169
I call this with star B which is the

194
00:09:24,159 --> 00:09:28,120
only way I can call it because I have to

195
00:09:26,169 --> 00:09:31,449
turn it into a reference first guess

196
00:09:28,120 --> 00:09:34,379
what this code will crash no compiler

197
00:09:31,450 --> 00:09:39,579
warning no error checking no nothing

198
00:09:34,379 --> 00:09:42,429
they're exactly the same so tell me

199
00:09:39,578 --> 00:09:44,708
where exactly is the compiler doing

200
00:09:42,429 --> 00:09:46,269
something to help me prevent a null

201
00:09:44,708 --> 00:09:48,879
pointer dereference the answer is

202
00:09:46,269 --> 00:09:50,350
nowhere because either you didn't start

203
00:09:48,879 --> 00:09:53,200
with a pointer to begin with in which

204
00:09:50,350 --> 00:09:54,820
case neither code path crashes or you

205
00:09:53,200 --> 00:09:56,350
did have a pointer somewhere to begin

206
00:09:54,820 --> 00:09:57,970
with and you needed to turn it into a

207
00:09:56,350 --> 00:10:03,310
reference which means that code path

208
00:09:57,970 --> 00:10:06,339
will crash as well if in either case you

209
00:10:03,309 --> 00:10:08,588
were trying to handle the fact that this

210
00:10:06,339 --> 00:10:13,450
could have been zero you had to put in

211
00:10:08,589 --> 00:10:17,430
an if and neither one will be stranger

212
00:10:13,450 --> 00:10:21,220
here right they're both exactly the same

213
00:10:17,429 --> 00:10:23,409
that's it so either the programmer is

214
00:10:21,220 --> 00:10:27,940
guarding against null or they're not and

215
00:10:23,409 --> 00:10:32,299
it's whichever they chose to be right so

216
00:10:27,940 --> 00:10:36,140
again in this particular case

217
00:10:32,299 --> 00:10:38,779
if you were to tell me Oh Casey well the

218
00:10:36,139 --> 00:10:41,750
way that I explain to somebody that

219
00:10:38,779 --> 00:10:45,740
something has to not be no in my

220
00:10:41,750 --> 00:10:47,570
functions is I whenever something's

221
00:10:45,740 --> 00:10:50,299
passed by reference they know that it

222
00:10:47,570 --> 00:10:52,220
can't be no so that's a clue to them

223
00:10:50,299 --> 00:10:53,689
that they should check for if right

224
00:10:52,220 --> 00:10:55,460
again you want to make that statement

225
00:10:53,690 --> 00:10:58,430
and that's your code convention great

226
00:10:55,460 --> 00:11:00,050
like I said would not argue with you but

227
00:10:58,429 --> 00:11:02,419
the concept that their references

228
00:11:00,049 --> 00:11:04,189
themselves have anything to do with

229
00:11:02,419 --> 00:11:06,500
preventing an OD reference is wrong and

230
00:11:04,190 --> 00:11:08,270
now I'm going to tell you why I think

231
00:11:06,500 --> 00:11:10,549
the actually the opposite is true in

232
00:11:08,269 --> 00:11:12,620
practice why because very few

233
00:11:10,549 --> 00:11:15,379
programmers are actually any more

234
00:11:12,620 --> 00:11:17,870
diligent about not doing this than they

235
00:11:15,379 --> 00:11:19,850
are about not doing it here they really

236
00:11:17,870 --> 00:11:21,590
aren't right if someone needs to call

237
00:11:19,850 --> 00:11:23,330
something and they don't think the thing

238
00:11:21,590 --> 00:11:25,100
could be no they typically just do that

239
00:11:23,330 --> 00:11:26,570
even if it turns out it really could

240
00:11:25,100 --> 00:11:30,889
have been null in some way or whatever

241
00:11:26,570 --> 00:11:32,900
happens right so if you wrote this code

242
00:11:30,889 --> 00:11:34,970
right if we'll go back up here for a

243
00:11:32,899 --> 00:11:37,819
second if you write your code like this

244
00:11:34,970 --> 00:11:41,500
typically then you're very likely to

245
00:11:37,820 --> 00:11:45,140
down here perhaps add some checking

246
00:11:41,500 --> 00:11:47,149
right but you're never going to add any

247
00:11:45,139 --> 00:11:49,639
checking here and this gets a lot worse

248
00:11:47,149 --> 00:11:51,679
as you go down the chain this might not

249
00:11:49,639 --> 00:11:54,110
just be one little function but once

250
00:11:51,679 --> 00:11:56,120
I've turned it into a ref a nobody I

251
00:11:54,110 --> 00:11:58,279
ever call is ever going to check that

252
00:11:56,120 --> 00:12:00,259
pointer again right I could pass this

253
00:11:58,279 --> 00:12:01,909
through 17 layers of code all the way

254
00:12:00,259 --> 00:12:04,129
down to somebody at the end who finally

255
00:12:01,909 --> 00:12:05,480
uses it they're never no one's going to

256
00:12:04,129 --> 00:12:07,939
check it because it's a reference it

257
00:12:05,480 --> 00:12:11,269
can't be null right so you get

258
00:12:07,940 --> 00:12:13,670
absolutely no fault tolerance this is

259
00:12:11,269 --> 00:12:15,199
the no fault tolerance path it means

260
00:12:13,669 --> 00:12:16,759
that you had better have been right

261
00:12:15,200 --> 00:12:19,340
everywhere because if you were ever

262
00:12:16,759 --> 00:12:21,649
wrong you will absolutely crash whereas

263
00:12:19,340 --> 00:12:24,019
this one hey computers are pretty fast

264
00:12:21,649 --> 00:12:27,350
nowadays and if that's almost never

265
00:12:24,019 --> 00:12:28,909
false is really not very expensive you

266
00:12:27,350 --> 00:12:30,500
can throw a bunch of those in here and

267
00:12:28,909 --> 00:12:34,429
all of a sudden you've got some fault

268
00:12:30,500 --> 00:12:36,710
tolerance right this code is actually

269
00:12:34,429 --> 00:12:39,469
the code that's much less likely to have

270
00:12:36,710 --> 00:12:41,330
an ulterior then the other one so the

271
00:12:39,470 --> 00:12:43,340
more you actually insist on using the

272
00:12:41,330 --> 00:12:45,200
references the less likely you are to

273
00:12:43,340 --> 00:12:46,070
put any heat shielding on the code at

274
00:12:45,200 --> 00:12:47,240
all now maybe

275
00:12:46,070 --> 00:12:50,240
you should argue you don't need any heat

276
00:12:47,240 --> 00:12:52,009
shielding well okay great start showing

277
00:12:50,240 --> 00:12:53,509
me some of these C++ programs that don't

278
00:12:52,009 --> 00:12:55,309
crash all the time because parenthesis

279
00:12:53,509 --> 00:12:57,500
all the ones that I use everyday sure do

280
00:12:55,309 --> 00:13:02,839
and then maybe I'll start to believe you

281
00:12:57,500 --> 00:13:05,419
but the point is from the actual actual

282
00:13:02,840 --> 00:13:07,490
implementation and semantic layer if you

283
00:13:05,419 --> 00:13:09,559
want to talk about which one is more

284
00:13:07,490 --> 00:13:11,240
likely to produce code that has a null

285
00:13:09,559 --> 00:13:13,729
pointer dereference I actually say it's

286
00:13:11,240 --> 00:13:16,669
this one and the only way in that week

287
00:13:13,730 --> 00:13:18,590
in that this kind of code is ever better

288
00:13:16,669 --> 00:13:20,779
is if you magically have a team of

289
00:13:18,590 --> 00:13:24,379
programmers who never ever ever ever

290
00:13:20,779 --> 00:13:25,819
forget to absolutely check every time

291
00:13:24,379 --> 00:13:28,990
before they change something into

292
00:13:25,820 --> 00:13:31,400
reference which i rarely see people do

293
00:13:28,990 --> 00:13:33,019
all right so that's the end of that rant

294
00:13:31,399 --> 00:13:34,669
and hopefully that makes it very clear

295
00:13:33,019 --> 00:13:36,230
what my position on that is and I

296
00:13:34,669 --> 00:13:38,569
suspect that that is pretty close to

297
00:13:36,230 --> 00:13:40,430
what Shawn's position on it is but I

298
00:13:38,570 --> 00:13:42,379
don't really know all i know is that he

299
00:13:40,429 --> 00:13:44,899
was of a similar opinion to me in the

300
00:13:42,379 --> 00:13:46,519
Twitter comments on this where he was

301
00:13:44,899 --> 00:13:50,860
saying that he did not believe it to be

302
00:13:46,519 --> 00:13:50,860
a viable technique for catching errors

303
00:13:51,909 --> 00:13:55,360
all right

304
00:13:58,649 --> 00:14:03,208
now on to the more media subjects

305
00:14:00,539 --> 00:14:06,480
because also as a coda to this I don't

306
00:14:03,208 --> 00:14:07,739
care at all about this at all right this

307
00:14:06,480 --> 00:14:09,449
is one of those programming debate

308
00:14:07,740 --> 00:14:11,549
things where you're just like who cares

309
00:14:09,448 --> 00:14:13,318
if this is where you're at that you

310
00:14:11,549 --> 00:14:15,539
think that arguing about this one way or

311
00:14:13,318 --> 00:14:17,998
the other for some extended period of

312
00:14:15,539 --> 00:14:19,759
time is like a good idea like you're

313
00:14:17,999 --> 00:14:23,308
already fired like you're off the team

314
00:14:19,759 --> 00:14:24,629
don't even talk to me hmm don't even

315
00:14:23,308 --> 00:14:26,009
look in the direction of our office

316
00:14:24,629 --> 00:14:29,308
because you're just going to make our

317
00:14:26,009 --> 00:14:32,039
code worse all right so let's move on to

318
00:14:29,308 --> 00:14:35,338
more profitable things canoe khals who

319
00:14:32,039 --> 00:14:38,428
is I think asleep at the moment he is I

320
00:14:35,339 --> 00:14:39,540
think in Moscow I want to say he asked

321
00:14:38,428 --> 00:14:42,058
the question that I'm not sure I

322
00:14:39,539 --> 00:14:44,669
understood so I'm going to try to answer

323
00:14:42,058 --> 00:14:45,719
the question but I may just be answering

324
00:14:44,669 --> 00:14:48,659
a question that he didn't really care

325
00:14:45,720 --> 00:14:50,639
about so I apologize k'nuckles but

326
00:14:48,659 --> 00:14:52,708
heroes this question he wanted to know

327
00:14:50,639 --> 00:14:56,610
is what he wanted to know what the

328
00:14:52,708 --> 00:15:06,688
difference was between interpretation

329
00:14:56,610 --> 00:15:09,558
and translation and as far as I'm

330
00:15:06,688 --> 00:15:12,620
concerned it's an AMA clay chur thing

331
00:15:09,558 --> 00:15:16,499
it's not the kind of thing I sell at

332
00:15:12,620 --> 00:15:17,999
pedantic sort of you know specifically

333
00:15:16,499 --> 00:15:19,709
what does this term mean versus that

334
00:15:17,999 --> 00:15:24,870
term not something I've ever been

335
00:15:19,708 --> 00:15:28,229
particularly good at but I can give you

336
00:15:24,870 --> 00:15:30,480
what my reaction to that comment is and

337
00:15:28,230 --> 00:15:31,819
hopefully it helps a little bit or at

338
00:15:30,480 --> 00:15:34,470
least helps you look in the right place

339
00:15:31,818 --> 00:15:36,240
so when I hear interpretation and

340
00:15:34,470 --> 00:15:37,980
translation use together then again like

341
00:15:36,240 --> 00:15:39,448
I said it may not be understanding the

342
00:15:37,980 --> 00:15:43,289
question correctly but what I'm thinking

343
00:15:39,448 --> 00:15:47,698
of is what happens with a binary command

344
00:15:43,289 --> 00:15:51,990
stream so machine code right let's say

345
00:15:47,698 --> 00:15:54,508
as an example so x64 instructions like

346
00:15:51,990 --> 00:15:58,889
an executable something that the

347
00:15:54,509 --> 00:16:02,068
processor is executing all right if I

348
00:15:58,889 --> 00:16:05,850
say I am going to write an interpreter

349
00:16:02,068 --> 00:16:09,169
oops and I spell it right if i say i'm

350
00:16:05,850 --> 00:16:12,058
going to write an interpreter for x64

351
00:16:09,169 --> 00:16:12,539
then what i mean is i'm going to write a

352
00:16:12,058 --> 00:16:16,079
piece of

353
00:16:12,539 --> 00:16:20,039
code which itself is actually running

354
00:16:16,080 --> 00:16:22,560
and it's going to look at the individual

355
00:16:20,039 --> 00:16:25,110
pieces of the instructions as they would

356
00:16:22,559 --> 00:16:30,599
be executed and it's essentially going

357
00:16:25,110 --> 00:16:33,200
to act like an Intel CPU so we do

358
00:16:30,600 --> 00:16:35,970
software these acting like an intel cpu

359
00:16:33,200 --> 00:16:39,600
stepping through pulling out pieces of

360
00:16:35,970 --> 00:16:42,060
the code and actually running them using

361
00:16:39,600 --> 00:16:45,450
its own simulated model for what should

362
00:16:42,059 --> 00:16:51,299
happen okay so it's basically like a

363
00:16:45,450 --> 00:16:53,040
software version of a cpu so it's

364
00:16:51,299 --> 00:16:55,949
running on a cpu but it itself is part

365
00:16:53,039 --> 00:16:59,189
of a cpu that's doing sort of the work

366
00:16:55,950 --> 00:17:00,870
of you know okay read the next byte what

367
00:16:59,190 --> 00:17:03,000
does that bite mean okay read another

368
00:17:00,870 --> 00:17:04,650
bite ok that's an instruction what do I

369
00:17:03,000 --> 00:17:06,210
you do that structure need to add okay

370
00:17:04,650 --> 00:17:08,070
where's my code for adjunct to the code

371
00:17:06,210 --> 00:17:09,600
for adding where's my registers oh

372
00:17:08,069 --> 00:17:11,490
they're here in memory pull pull out

373
00:17:09,599 --> 00:17:13,319
these two things are you know registers

374
00:17:11,490 --> 00:17:14,849
add them together put it back into the

375
00:17:13,319 --> 00:17:17,549
register right so it's actually a

376
00:17:14,849 --> 00:17:19,619
complete piece of code that basically

377
00:17:17,549 --> 00:17:21,720
emulates what a CPU is doing in hardware

378
00:17:19,619 --> 00:17:24,119
it's actually doing that in software so

379
00:17:21,720 --> 00:17:28,110
an interpreter is is more or less an

380
00:17:24,119 --> 00:17:33,479
emulator those are not particularly

381
00:17:28,109 --> 00:17:36,209
different terms to me yeah translation

382
00:17:33,480 --> 00:17:39,710
on the other hand implies a single

383
00:17:36,210 --> 00:17:43,410
process applied once that produces a new

384
00:17:39,710 --> 00:17:46,710
piece of code so again this is

385
00:17:43,410 --> 00:17:50,180
interpretation translation is when let's

386
00:17:46,710 --> 00:17:53,880
say I have x64 code and I need arm code

387
00:17:50,180 --> 00:17:56,360
okay well if I wanted to run some x64

388
00:17:53,880 --> 00:17:58,920
code on arm I could use an interpreter I

389
00:17:56,359 --> 00:18:01,169
could write a piece of code which runs

390
00:17:58,920 --> 00:18:03,450
on arm which reads an x64 instruction

391
00:18:01,170 --> 00:18:06,630
stream and has a simulation of an x64

392
00:18:03,450 --> 00:18:08,220
CPU in it and off it goes right it just

393
00:18:06,630 --> 00:18:09,480
does the operations of the operations as

394
00:18:08,220 --> 00:18:12,779
a separation as it goes so it's

395
00:18:09,480 --> 00:18:16,140
basically code for an x64 running on top

396
00:18:12,779 --> 00:18:18,000
of an arm right so the x64 part is in

397
00:18:16,140 --> 00:18:21,090
software the arm is the hardware and

398
00:18:18,000 --> 00:18:25,109
it's it's running an X 64 emulator

399
00:18:21,089 --> 00:18:26,459
essentially on top of arm but another

400
00:18:25,109 --> 00:18:27,929
way I could do it is with a train

401
00:18:26,460 --> 00:18:31,620
hands later and what that does is it

402
00:18:27,930 --> 00:18:33,480
takes an executable written in x64 right

403
00:18:31,619 --> 00:18:35,939
so it's exited for native and it

404
00:18:33,480 --> 00:18:38,160
actually just translates it into an

405
00:18:35,940 --> 00:18:40,200
executable meant for arm so it does the

406
00:18:38,160 --> 00:18:41,700
same sort of process of reading the exit

407
00:18:40,200 --> 00:18:43,410
for instruction stream but instead of

408
00:18:41,700 --> 00:18:45,600
trying to execute it as it reads it it

409
00:18:43,410 --> 00:18:47,850
just tries to translate it over to a

410
00:18:45,599 --> 00:18:49,079
different instruction set perhaps one

411
00:18:47,849 --> 00:18:51,509
that's native for the processor that I'm

412
00:18:49,079 --> 00:18:54,149
on now but perhaps not I could be doing

413
00:18:51,509 --> 00:19:00,259
it to a PowerPC for example so I could

414
00:18:54,150 --> 00:19:03,600
have a arm cpu running a translator

415
00:19:00,259 --> 00:19:06,900
written on it that translates x64 to

416
00:19:03,599 --> 00:19:09,029
power pc if i wanted to write and then

417
00:19:06,900 --> 00:19:10,560
once I've translated I've got a PowerPC

418
00:19:09,029 --> 00:19:13,619
executable I can go run that on a

419
00:19:10,559 --> 00:19:16,799
PowerPC native or if I had an

420
00:19:13,619 --> 00:19:17,759
interpreter for powerpc coat I could run

421
00:19:16,799 --> 00:19:21,450
the property code through the

422
00:19:17,759 --> 00:19:24,629
interpreter and see what it did right so

423
00:19:21,450 --> 00:19:25,830
that's I mean assuming that I understood

424
00:19:24,630 --> 00:19:28,140
your question correctly I'm not sure if

425
00:19:25,829 --> 00:19:32,429
I did that's interpretation versus

426
00:19:28,140 --> 00:19:34,020
translation in my mind and so I hope

427
00:19:32,430 --> 00:19:35,070
that helps if that was a question if

428
00:19:34,019 --> 00:19:38,940
it's not the question please feel free

429
00:19:35,069 --> 00:19:41,849
to email me sometime and and just tell

430
00:19:38,940 --> 00:19:47,100
me what the actual question was if that

431
00:19:41,849 --> 00:19:48,209
makes sense alright and so now we get to

432
00:19:47,099 --> 00:19:50,509
the question I think we'll probably take

433
00:19:48,210 --> 00:19:54,059
the majority of the time on this stream

434
00:19:50,509 --> 00:19:55,470
which is sort of i'm going to broaden

435
00:19:54,059 --> 00:19:57,899
the topic a little bit even from what

436
00:19:55,470 --> 00:20:03,660
the question was that was asked and it

437
00:19:57,900 --> 00:20:05,250
was asked by by Elvin who I don't know

438
00:20:03,660 --> 00:20:07,410
if he's he's here too oh I think yeah I

439
00:20:05,250 --> 00:20:09,630
saw him I think I saw his name go by it

440
00:20:07,410 --> 00:20:13,019
was asked by him an email and what he

441
00:20:09,630 --> 00:20:15,390
was asking about was the sort of

442
00:20:13,019 --> 00:20:18,539
time-honored process especially in the

443
00:20:15,390 --> 00:20:22,160
OL in older times although still happens

444
00:20:18,539 --> 00:20:29,220
to this day the time-honored tradition

445
00:20:22,160 --> 00:20:32,070
of games using offline rendered art for

446
00:20:29,220 --> 00:20:34,680
certain elements while still using

447
00:20:32,069 --> 00:20:38,069
real-time rendered art for other

448
00:20:34,680 --> 00:20:39,810
elements and now this can be as you know

449
00:20:38,069 --> 00:20:41,250
you could think of it the

450
00:20:39,809 --> 00:20:43,079
earliest version of this is just the

451
00:20:41,250 --> 00:20:44,990
fact that we have like sprites right the

452
00:20:43,079 --> 00:20:47,250
fact that we pre rendered some images

453
00:20:44,990 --> 00:20:49,559
somehow maybe they were hand-drawn

454
00:20:47,250 --> 00:20:50,880
whatever and then we're compositing

455
00:20:49,559 --> 00:20:53,099
their locations and changing their

456
00:20:50,880 --> 00:20:55,260
locations that in a sense is using

457
00:20:53,099 --> 00:20:57,179
pre-rendered stuff and composing it at

458
00:20:55,259 --> 00:20:59,759
runtime right but those techniques

459
00:20:57,180 --> 00:21:02,279
continued to get more and more elaborate

460
00:20:59,759 --> 00:21:03,359
as you know games went on until some of

461
00:21:02,279 --> 00:21:05,879
the months that Alvin was mentioning his

462
00:21:03,359 --> 00:21:08,639
email for example Final Fantasy 7 where

463
00:21:05,880 --> 00:21:11,190
you had a 3d rendered character who is

464
00:21:08,640 --> 00:21:13,440
running around on 2d pre-rendered

465
00:21:11,190 --> 00:21:16,470
backdrops for the overworld maps for

466
00:21:13,440 --> 00:21:18,960
example or games like resident evil

467
00:21:16,470 --> 00:21:20,730
which had pre-rendered backdrops and 3d

468
00:21:18,960 --> 00:21:23,670
characters and monsters and stuff like

469
00:21:20,730 --> 00:21:25,410
this moving around on top of them and as

470
00:21:23,670 --> 00:21:27,570
he pointed out some of those games

471
00:21:25,410 --> 00:21:29,610
actually had very elaborate effects they

472
00:21:27,569 --> 00:21:31,109
might do so for example they might have

473
00:21:29,609 --> 00:21:33,059
a situation where a character is

474
00:21:31,109 --> 00:21:35,369
standing on the floor of a pre-rendered

475
00:21:33,059 --> 00:21:37,859
backdrop and you're seeing the character

476
00:21:35,369 --> 00:21:39,569
who is being rendered in 3d but you're

477
00:21:37,859 --> 00:21:41,129
also seeing their reflection in the

478
00:21:39,569 --> 00:21:44,819
floor even though the floor was a

479
00:21:41,130 --> 00:21:47,730
pre-rendered thing right and so

480
00:21:44,819 --> 00:21:49,859
hopefully you've all seen some games

481
00:21:47,730 --> 00:21:51,960
that do this or maybe even non games

482
00:21:49,859 --> 00:21:54,059
that do something like this and what

483
00:21:51,960 --> 00:21:56,730
elven was asking is could I sort of give

484
00:21:54,059 --> 00:21:58,679
a general overview of this and how you

485
00:21:56,730 --> 00:22:00,599
go about doing that what the sort of

486
00:21:58,680 --> 00:22:03,450
techniques are how they work that sort

487
00:22:00,599 --> 00:22:06,299
of thing and so I kind of wanted to

488
00:22:03,450 --> 00:22:09,769
broaden that topic a little bit and just

489
00:22:06,299 --> 00:22:13,019
talk about it from the standpoint of the

490
00:22:09,769 --> 00:22:14,970
sort of category of algorithms that this

491
00:22:13,019 --> 00:22:18,119
falls into which is actually broader

492
00:22:14,970 --> 00:22:20,160
than just this specific application it's

493
00:22:18,119 --> 00:22:22,619
a category of algorithms and I shouldn't

494
00:22:20,160 --> 00:22:26,100
say algorithms the category of computing

495
00:22:22,619 --> 00:22:27,750
a category of something I don't know

496
00:22:26,099 --> 00:22:33,379
what you want to call it but it's a it's

497
00:22:27,750 --> 00:22:39,089
a well defined term it's called partial

498
00:22:33,380 --> 00:22:42,740
specialization and you could also

499
00:22:39,089 --> 00:22:42,740
quickly call partial evaluation

500
00:22:44,799 --> 00:22:51,619
and what this means is actually very

501
00:22:48,619 --> 00:22:54,439
very easy to see if I just write a very

502
00:22:51,619 --> 00:22:56,599
simple piece of code for you and it

503
00:22:54,440 --> 00:22:59,900
generalizes all the way out to resident

504
00:22:56,599 --> 00:23:03,349
evil right it's kind of interesting so

505
00:22:59,900 --> 00:23:06,190
let me show you what this means so

506
00:23:03,349 --> 00:23:08,839
normally what happens in a piece of code

507
00:23:06,190 --> 00:23:11,450
is you have something that maybe looks

508
00:23:08,839 --> 00:23:15,049
like this let's say I've got a function

509
00:23:11,450 --> 00:23:16,750
I my ubiquitous foo or actually you know

510
00:23:15,049 --> 00:23:21,139
what I'm going to return an integer

511
00:23:16,750 --> 00:23:24,440
integer foo and it takes an int a and an

512
00:23:21,140 --> 00:23:27,710
in to be okay and I'm going to write a

513
00:23:24,440 --> 00:23:29,690
function here so I'm going to take it in

514
00:23:27,710 --> 00:23:32,450
produce my aunt C which by the way will

515
00:23:29,690 --> 00:23:34,070
be my return value I'm going to taking

516
00:23:32,450 --> 00:23:37,330
in C and the way that I'm going to take

517
00:23:34,069 --> 00:23:41,359
to produce my NC is I am going to take

518
00:23:37,329 --> 00:23:47,809
five times a and i'm going to add it to

519
00:23:41,359 --> 00:23:49,459
six times B okay so this is a function

520
00:23:47,809 --> 00:23:51,799
that hopefully everyone understands it

521
00:23:49,460 --> 00:23:53,120
is extraordinarily simple it does some

522
00:23:51,799 --> 00:23:55,460
of the most basic things you could

523
00:23:53,119 --> 00:24:00,169
possibly hope to have done in a function

524
00:23:55,460 --> 00:24:02,539
and you can see that it is in fact a

525
00:24:00,170 --> 00:24:03,830
functional thing right this is when we

526
00:24:02,539 --> 00:24:05,720
talk about functional programming right

527
00:24:03,829 --> 00:24:08,179
it's something which has no side effects

528
00:24:05,720 --> 00:24:10,519
it simply produces as a result and that

529
00:24:08,180 --> 00:24:12,890
result is based entirely on its two

530
00:24:10,519 --> 00:24:15,200
input parameters and it is entirely

531
00:24:12,890 --> 00:24:17,000
dependent on those two input parameters

532
00:24:15,200 --> 00:24:18,380
change a and you will get a different

533
00:24:17,000 --> 00:24:20,779
return value change be you get a

534
00:24:18,380 --> 00:24:25,790
different return value it is fully

535
00:24:20,779 --> 00:24:29,269
dependent on both of them now let's

536
00:24:25,789 --> 00:24:31,039
suppose that I am in a situation where I

537
00:24:29,269 --> 00:24:33,109
don't know we're on the world's most

538
00:24:31,039 --> 00:24:35,149
primitive cpu we're all the way back to

539
00:24:33,109 --> 00:24:36,979
the old old old days and this is

540
00:24:35,150 --> 00:24:38,480
actually something that's expensive for

541
00:24:36,980 --> 00:24:40,759
us to compute for some reason now

542
00:24:38,480 --> 00:24:43,730
nowadays that's a laughable concept to

543
00:24:40,759 --> 00:24:45,440
even say but let's suppose we were

544
00:24:43,730 --> 00:24:47,120
because as you can imagine when we

545
00:24:45,440 --> 00:24:48,110
generalize this out that is the sort of

546
00:24:47,119 --> 00:24:50,149
thing we're going to be thinking about

547
00:24:48,109 --> 00:24:52,369
but in our specific case let's pretend

548
00:24:50,150 --> 00:24:56,179
for some reason that we profiled this

549
00:24:52,369 --> 00:25:00,229
program and somehow this took tons of

550
00:24:56,179 --> 00:25:03,860
time like this took eighty percent of

551
00:25:00,230 --> 00:25:06,589
our time this line right here and we

552
00:25:03,859 --> 00:25:09,168
look at this code and we go what can we

553
00:25:06,589 --> 00:25:12,048
do how can we optimize this program

554
00:25:09,169 --> 00:25:14,179
because we need to do five times a plus

555
00:25:12,048 --> 00:25:16,398
6 times B all of our time in the

556
00:25:14,179 --> 00:25:19,070
execution of this program is spent there

557
00:25:16,398 --> 00:25:23,388
and we simply just don't have the

558
00:25:19,069 --> 00:25:27,648
computing power to actually do it what

559
00:25:23,388 --> 00:25:30,979
do we do well we analyze our code and we

560
00:25:27,648 --> 00:25:34,489
find that say in fifty percent of the

561
00:25:30,980 --> 00:25:36,349
cases and maybe I'll change that to a

562
00:25:34,490 --> 00:25:40,669
little bit more break down in twenty

563
00:25:36,349 --> 00:25:44,240
percent of the cases be is seven in

564
00:25:40,669 --> 00:25:48,200
thirty percent of the cases be is nine

565
00:25:44,240 --> 00:25:53,319
in twenty five percent of the cases be

566
00:25:48,200 --> 00:25:53,319
is 10 and then the rest be is random

567
00:25:53,829 --> 00:26:02,449
right so let's suppose that I did this

568
00:25:58,788 --> 00:26:05,298
analysis well now when I'm looking at

569
00:26:02,450 --> 00:26:07,788
this I'm going okay well twenty percent

570
00:26:05,298 --> 00:26:09,980
thirty percent that's fifty percent plus

571
00:26:07,788 --> 00:26:13,009
twenty-five percent that's seventy-five

572
00:26:09,980 --> 00:26:18,788
percent of the time I actually don't

573
00:26:13,009 --> 00:26:21,999
really need to do this operation right I

574
00:26:18,788 --> 00:26:25,429
mean I kind of already know what it is

575
00:26:21,999 --> 00:26:30,259
so wouldn't it be a good idea to create

576
00:26:25,429 --> 00:26:33,559
four versions of foo each one being

577
00:26:30,259 --> 00:26:38,749
specialized to a certain parameter space

578
00:26:33,558 --> 00:26:41,138
while still allowing some freedom in the

579
00:26:38,749 --> 00:26:44,868
rest of the parameter space right and

580
00:26:41,138 --> 00:26:48,019
maybe for good measure let's say that we

581
00:26:44,868 --> 00:26:50,388
actually knew it entirely just to make

582
00:26:48,019 --> 00:26:53,749
it a really great case for us let's say

583
00:26:50,388 --> 00:26:56,990
we always knew it was 79 10 or 15 now we

584
00:26:53,749 --> 00:27:03,829
know we could replace food entirely with

585
00:26:56,990 --> 00:27:06,470
just foo 7 through 9 through 10 and when

586
00:27:03,829 --> 00:27:10,009
I say foo 15 we could create four

587
00:27:06,470 --> 00:27:14,190
functions and each of those functions

588
00:27:10,009 --> 00:27:17,279
can be specialized to actually have a

589
00:27:14,190 --> 00:27:20,130
hard-coded constant in here for be so

590
00:27:17,279 --> 00:27:22,920
now instead of computing this which is

591
00:27:20,130 --> 00:27:25,800
two multiplies in a mad I go down to

592
00:27:22,920 --> 00:27:30,779
having it be in C equals five times a

593
00:27:25,799 --> 00:27:32,940
plus some constant right so now we

594
00:27:30,779 --> 00:27:35,339
remove one entire multiply which is a

595
00:27:32,940 --> 00:27:36,570
third or more of the work and let's

596
00:27:35,339 --> 00:27:37,859
pretend this processor multiplies were

597
00:27:36,569 --> 00:27:41,970
very expensive it could be more than a

598
00:27:37,859 --> 00:27:43,949
third of the work right and we just have

599
00:27:41,970 --> 00:27:47,940
a different one different constant for

600
00:27:43,950 --> 00:27:49,410
each of these things right similarly

601
00:27:47,940 --> 00:27:51,390
what we could do instead is just have

602
00:27:49,410 --> 00:27:53,429
the same foo but instead of six times B

603
00:27:51,390 --> 00:27:56,250
we just have it so that we pre know

604
00:27:53,429 --> 00:27:57,570
which one it is right and we pass in six

605
00:27:56,250 --> 00:28:01,829
times the value and get rid of the

606
00:27:57,569 --> 00:28:06,349
multiply so that's partial

607
00:28:01,829 --> 00:28:08,460
specialization in a nutshell right it is

608
00:28:06,349 --> 00:28:11,730
specialization because you are taking a

609
00:28:08,460 --> 00:28:13,679
general equation and your specializing

610
00:28:11,730 --> 00:28:17,069
it by removing some of its parameter

611
00:28:13,679 --> 00:28:18,509
space and it's called partial because we

612
00:28:17,069 --> 00:28:21,299
are not specifying all the parameters

613
00:28:18,509 --> 00:28:23,429
we're only specifying some of them right

614
00:28:21,299 --> 00:28:24,899
so we're knocking out this part of the

615
00:28:23,429 --> 00:28:27,179
parameterization but we're leaving this

616
00:28:24,900 --> 00:28:30,170
part in and that's where the partial

617
00:28:27,179 --> 00:28:34,230
comes from so how does this apply to

618
00:28:30,170 --> 00:28:37,890
resident evil or final fantasy or any of

619
00:28:34,230 --> 00:28:42,150
these games well if you think of the 3d

620
00:28:37,890 --> 00:28:44,670
rendering pipeline as a basically a

621
00:28:42,150 --> 00:28:46,500
giant equation right something where I'm

622
00:28:44,670 --> 00:28:48,900
going to render a bunch of things and

623
00:28:46,500 --> 00:28:50,759
then i am going to display them and

624
00:28:48,900 --> 00:28:52,380
there's multiple steps involved in this

625
00:28:50,759 --> 00:28:55,920
and there's a lot of work that has to be

626
00:28:52,380 --> 00:28:58,650
done you can think of any given pixel as

627
00:28:55,920 --> 00:29:01,080
essentially having that equation right

628
00:28:58,650 --> 00:29:04,740
you can you can think of it as having an

629
00:29:01,079 --> 00:29:07,019
equation there and for example if i was

630
00:29:04,740 --> 00:29:10,019
to render something like let's say i do

631
00:29:07,019 --> 00:29:12,240
a full 3d render again no trick sir no

632
00:29:10,019 --> 00:29:13,529
2d no nothing like that let's say i'm

633
00:29:12,240 --> 00:29:17,250
going to render something i have a

634
00:29:13,529 --> 00:29:18,779
screen and i'm going to render all my

635
00:29:17,250 --> 00:29:21,029
stuff so i've got a bunch of complex

636
00:29:18,779 --> 00:29:22,980
geometry back here you know maybe it's

637
00:29:21,029 --> 00:29:24,509
like some kind of a hallway thing

638
00:29:22,980 --> 00:29:27,539
and maybe there's like a bunch of wood

639
00:29:24,509 --> 00:29:30,359
slats and adore thing and you know

640
00:29:27,539 --> 00:29:34,079
there's there's all kinds of like you

641
00:29:30,359 --> 00:29:36,298
know stuff on the walls and a torch and

642
00:29:34,079 --> 00:29:38,099
who knows what and I don't know that

643
00:29:36,298 --> 00:29:43,289
sort of thing and then there's just like

644
00:29:38,099 --> 00:29:44,909
an ogre here and maybe for good measure

645
00:29:43,289 --> 00:29:46,529
up in the front here there's like a

646
00:29:44,910 --> 00:29:50,910
little altar thing some kind of

647
00:29:46,529 --> 00:29:53,668
sacrificial altar you know that's in

648
00:29:50,910 --> 00:29:56,220
front of the yogurt well if I was to

649
00:29:53,669 --> 00:29:57,960
take a look at one specific pixel here

650
00:29:56,220 --> 00:29:59,850
let's say that I'm going to take a look

651
00:29:57,960 --> 00:30:03,450
at a pixel that's right there okay

652
00:29:59,849 --> 00:30:05,189
that's that place right there well if

653
00:30:03,450 --> 00:30:08,120
I'm to look at that well what do I see

654
00:30:05,190 --> 00:30:10,380
the equation for that pixel write an

655
00:30:08,119 --> 00:30:13,439
equation kind of a loose term here the

656
00:30:10,380 --> 00:30:17,280
program write the code the equivalent of

657
00:30:13,440 --> 00:30:19,048
int foo for that pixel if I rendered

658
00:30:17,279 --> 00:30:20,730
everything using the z-buffer doing

659
00:30:19,048 --> 00:30:23,519
whatever the game was doing might look

660
00:30:20,730 --> 00:30:27,990
something like all right first I have to

661
00:30:23,519 --> 00:30:29,639
do you know the door pixel here so

662
00:30:27,990 --> 00:30:33,179
that's like whatever the door material

663
00:30:29,640 --> 00:30:35,820
is right door material and then i have

664
00:30:33,179 --> 00:30:38,070
to like light that using the complicated

665
00:30:35,819 --> 00:30:40,589
light equation so i'm going to start off

666
00:30:38,069 --> 00:30:43,950
with my base color for this thing right

667
00:30:40,589 --> 00:30:46,879
base color is going to be like call the

668
00:30:43,950 --> 00:30:50,460
lighting equation on the door material

669
00:30:46,880 --> 00:30:52,950
using you know 50 different lights some

670
00:30:50,460 --> 00:30:55,200
light array who knows and it's going to

671
00:30:52,950 --> 00:30:57,480
do this is super expensive doesn't much

672
00:30:55,200 --> 00:31:00,240
ray casting who knows then i'm going to

673
00:30:57,480 --> 00:31:02,700
have this ogre right I've got my ogre

674
00:31:00,240 --> 00:31:03,870
here that's not a spell ogre right so

675
00:31:02,700 --> 00:31:06,450
now I've got to do my auger because it

676
00:31:03,869 --> 00:31:08,519
turns out the ogre over writes this so

677
00:31:06,450 --> 00:31:10,440
you know what I'll just call this the

678
00:31:08,519 --> 00:31:12,480
I'll just call this the output color so

679
00:31:10,440 --> 00:31:17,548
the ogre over writes this it says okay

680
00:31:12,480 --> 00:31:20,400
you know whatever this guy is here this

681
00:31:17,548 --> 00:31:22,710
output you know I'm gonna do this even

682
00:31:20,400 --> 00:31:24,059
better than that I think but this is

683
00:31:22,710 --> 00:31:26,850
even a little bit better I'm going to

684
00:31:24,058 --> 00:31:29,519
say that we do out equals light there

685
00:31:26,849 --> 00:31:35,589
and I'm going to say if you know the

686
00:31:29,519 --> 00:31:40,658
ogres z value right is is closer

687
00:31:35,589 --> 00:31:42,278
then the doors z-value okay then we're

688
00:31:40,659 --> 00:31:44,740
going to come in here and say all right

689
00:31:42,278 --> 00:31:47,259
well then the out color is whatever the

690
00:31:44,740 --> 00:31:49,630
ogre is so I've got the ogre and I'm

691
00:31:47,259 --> 00:31:51,700
gonna have to light that guy right it's

692
00:31:49,630 --> 00:31:53,919
got the ogre here and the ogre is like a

693
00:31:51,700 --> 00:31:55,269
dynamic guy so maybe he's not light it

694
00:31:53,919 --> 00:31:56,919
light in as good so maybe there's a

695
00:31:55,269 --> 00:32:00,548
single light that gets passed in here I

696
00:31:56,919 --> 00:32:06,580
don't know right and then finally if the

697
00:32:00,548 --> 00:32:08,679
altar Z is closer than the i guess the

698
00:32:06,579 --> 00:32:12,038
outsi this should really be out see here

699
00:32:08,679 --> 00:32:13,809
go then the current out Z then I'm going

700
00:32:12,038 --> 00:32:16,480
to say ok well now we've got to light

701
00:32:13,808 --> 00:32:18,869
the altar so there's the altars thing

702
00:32:16,480 --> 00:32:25,329
and then there's that light array again

703
00:32:18,869 --> 00:32:27,278
and so on so yeah again is this really

704
00:32:25,329 --> 00:32:28,869
happening exactly like this not exactly

705
00:32:27,278 --> 00:32:32,169
like this but you can think of it as

706
00:32:28,869 --> 00:32:34,269
being very much a function that produces

707
00:32:32,169 --> 00:32:36,340
the color of the pixel right the GPU is

708
00:32:34,269 --> 00:32:38,740
essentially or i should say let's say

709
00:32:36,339 --> 00:32:40,240
this is again ignoring GPU ignoring all

710
00:32:38,740 --> 00:32:42,519
that stuff we're just writing some kind

711
00:32:40,240 --> 00:32:44,649
of offline crazy expensive renderer it's

712
00:32:42,519 --> 00:32:46,509
Pixar it's who knows what we're creating

713
00:32:44,648 --> 00:32:47,798
the full version of this thing that's

714
00:32:46,509 --> 00:32:50,440
that's beautifully lit and all that

715
00:32:47,798 --> 00:32:52,329
stuff then you can imagine looking a lot

716
00:32:50,440 --> 00:32:54,250
like this it's like all right well we

717
00:32:52,329 --> 00:32:56,470
start off by saying we've got something

718
00:32:54,250 --> 00:32:57,700
here we've got the door we're going to

719
00:32:56,470 --> 00:32:58,960
evaluate that first we're going to do

720
00:32:57,700 --> 00:33:00,610
all our lighting calculations and all

721
00:32:58,960 --> 00:33:02,140
our material calculations we're going to

722
00:33:00,609 --> 00:33:04,778
produce an out value of the app has a

723
00:33:02,140 --> 00:33:06,700
color and the Z value which is how far

724
00:33:04,778 --> 00:33:08,679
it is from the camera we're then going

725
00:33:06,700 --> 00:33:11,230
to say ok now we got that augurs there

726
00:33:08,679 --> 00:33:13,538
if the ogres point at this location on

727
00:33:11,230 --> 00:33:15,548
the screen is closer than the one we

728
00:33:13,538 --> 00:33:18,278
just computed for the door then we're

729
00:33:15,548 --> 00:33:20,679
going to overwrite him right and here we

730
00:33:18,278 --> 00:33:22,119
go we compute the ogre values and when

731
00:33:20,679 --> 00:33:24,580
we overwrite the color value with that

732
00:33:22,119 --> 00:33:26,528
finally if the altar was closer than the

733
00:33:24,579 --> 00:33:28,808
ogre at that point then we're going to

734
00:33:26,528 --> 00:33:30,609
go ahead and do the lighting and so on

735
00:33:28,808 --> 00:33:32,648
and now we know that since we're talking

736
00:33:30,609 --> 00:33:34,509
about a pixel here we know that actually

737
00:33:32,648 --> 00:33:37,658
all we end up caring about is this value

738
00:33:34,509 --> 00:33:40,298
because the altar was actually there and

739
00:33:37,659 --> 00:33:41,799
it was in front of these guys right and

740
00:33:40,298 --> 00:33:43,240
you could also imagine the torch being

741
00:33:41,798 --> 00:33:44,500
in here as well we don't happen to hit

742
00:33:43,240 --> 00:33:46,149
the torch but you could imagine it being

743
00:33:44,500 --> 00:33:49,839
tested to see if it was all that sort of

744
00:33:46,148 --> 00:33:52,778
stuff ok so it's sense

745
00:33:49,839 --> 00:33:54,189
what happens when you're talking about a

746
00:33:52,778 --> 00:33:58,960
thing where you did like the resident

747
00:33:54,190 --> 00:34:00,308
evil model or any that stuff is we're

748
00:33:58,960 --> 00:34:02,558
still just talking about partial

749
00:34:00,308 --> 00:34:04,658
specialization what we're talking about

750
00:34:02,558 --> 00:34:07,028
is saying okay there's this giant really

751
00:34:04,659 --> 00:34:10,898
complicated function that's happening to

752
00:34:07,028 --> 00:34:14,789
compose the scene but if we were to say

753
00:34:10,898 --> 00:34:17,049
that for example this term and this term

754
00:34:14,789 --> 00:34:18,608
work we're going to be partially

755
00:34:17,050 --> 00:34:22,060
specialized right we're going to

756
00:34:18,608 --> 00:34:23,529
partially specialized to those then all

757
00:34:22,059 --> 00:34:27,639
we would have to compute at runtime is

758
00:34:23,530 --> 00:34:30,010
this one right if we knew what the door

759
00:34:27,639 --> 00:34:32,169
color was at that pixel all the time and

760
00:34:30,010 --> 00:34:34,030
we knew what the altar color was it the

761
00:34:32,168 --> 00:34:35,769
pics all the time and furthermore we

762
00:34:34,030 --> 00:34:39,609
knew that since you can only see one or

763
00:34:35,769 --> 00:34:41,949
the other right we know that we can just

764
00:34:39,608 --> 00:34:45,159
store the alters color as the only one

765
00:34:41,949 --> 00:34:47,348
at that point in pixel well we can

766
00:34:45,159 --> 00:34:49,648
produce an image that is essentially the

767
00:34:47,349 --> 00:34:52,659
partially specialized constants

768
00:34:49,648 --> 00:34:56,739
necessary to reconstruct this function

769
00:34:52,659 --> 00:34:59,619
if we have the ogre if we still do the

770
00:34:56,739 --> 00:35:01,809
ogre at runtime and how would we do that

771
00:34:59,619 --> 00:35:03,700
well like I said we know that this guy

772
00:35:01,809 --> 00:35:05,679
can never be visible so the first thing

773
00:35:03,699 --> 00:35:07,358
we can do is just say well if we take

774
00:35:05,679 --> 00:35:08,649
out the ogre and we're just talking

775
00:35:07,358 --> 00:35:10,239
about partially specializing these two

776
00:35:08,650 --> 00:35:12,130
we just need whichever one's closer so

777
00:35:10,239 --> 00:35:13,929
when we actually render everything minus

778
00:35:12,130 --> 00:35:15,400
the ogre we'll just keep whichever one's

779
00:35:13,929 --> 00:35:18,250
closer and we know that this one's

780
00:35:15,400 --> 00:35:21,010
closer right that's we know that's true

781
00:35:18,250 --> 00:35:23,769
so we don't need this one anymore but

782
00:35:21,010 --> 00:35:27,820
now what do we need to keep well we need

783
00:35:23,769 --> 00:35:29,500
to keep two things right first of all we

784
00:35:27,820 --> 00:35:31,900
need to keep whatever that output color

785
00:35:29,500 --> 00:35:34,420
was because if there's no ogre there

786
00:35:31,900 --> 00:35:37,150
then we know that this is actually going

787
00:35:34,420 --> 00:35:40,240
to be the color of the pixel but we need

788
00:35:37,150 --> 00:35:43,539
to keep something else as well right we

789
00:35:40,239 --> 00:35:45,939
need to keep the z value because we

790
00:35:43,539 --> 00:35:48,969
needed to test the altar Z value against

791
00:35:45,940 --> 00:35:50,500
the ogre z value in order to know

792
00:35:48,969 --> 00:35:53,469
whether we're supposed to draw the ogre

793
00:35:50,500 --> 00:35:55,480
or the altar because the ogre could move

794
00:35:53,469 --> 00:35:59,379
around in front right and then it would

795
00:35:55,480 --> 00:36:01,150
be the ogre that shows up and that just

796
00:35:59,380 --> 00:36:03,460
by again thinking through what the

797
00:36:01,150 --> 00:36:05,289
function what the actual graphics

798
00:36:03,460 --> 00:36:07,750
function is that you need to evaluate at

799
00:36:05,289 --> 00:36:10,059
every pixel is it directly tells you

800
00:36:07,750 --> 00:36:13,420
exactly what you would need to store to

801
00:36:10,059 --> 00:36:17,500
reproduce what you wanted to do after

802
00:36:13,420 --> 00:36:20,470
you partially specialized color and Z

803
00:36:17,500 --> 00:36:22,840
value and that's exactly what you store

804
00:36:20,469 --> 00:36:26,289
if you want to do post compositing you

805
00:36:22,840 --> 00:36:30,280
store the color map and the depth map

806
00:36:26,289 --> 00:36:33,400
and then at runtime when you do your

807
00:36:30,280 --> 00:36:38,140
real-time rendering you just real-time

808
00:36:33,400 --> 00:36:40,090
render into a context where you already

809
00:36:38,139 --> 00:36:42,159
have the depth map so it'll test against

810
00:36:40,090 --> 00:36:45,640
the debt math and if the depth map is

811
00:36:42,159 --> 00:36:47,289
closer at that pixel then whatever the

812
00:36:45,639 --> 00:36:49,210
thing is that you're rendering then you

813
00:36:47,289 --> 00:36:50,769
don't put anything there and you let it

814
00:36:49,210 --> 00:36:53,349
the color map that you say it show

815
00:36:50,769 --> 00:36:55,329
through and if you do find that it is

816
00:36:53,349 --> 00:36:59,019
closer than you render the thing right

817
00:36:55,329 --> 00:37:00,519
and so partial specialization as a

818
00:36:59,019 --> 00:37:02,889
framework for thinking about these

819
00:37:00,519 --> 00:37:05,590
things lets you understand immediately

820
00:37:02,889 --> 00:37:08,710
what you might have to pre-render and

821
00:37:05,590 --> 00:37:11,220
save in order to reproduce any kind of

822
00:37:08,710 --> 00:37:13,599
complicated thing you might want to

823
00:37:11,219 --> 00:37:17,049
reproduce any kind of complicated

824
00:37:13,599 --> 00:37:18,549
scenario given some things you're

825
00:37:17,050 --> 00:37:20,440
willing to specialize around and so in

826
00:37:18,550 --> 00:37:21,940
this case you know what did we

827
00:37:20,440 --> 00:37:23,950
specialize around well you could think

828
00:37:21,940 --> 00:37:27,119
of this as taking the location of the

829
00:37:23,949 --> 00:37:30,219
door right and the location of the altar

830
00:37:27,119 --> 00:37:31,750
originally those were movable right you

831
00:37:30,219 --> 00:37:35,199
could also say the location of the

832
00:37:31,750 --> 00:37:36,849
camera all of those things right were

833
00:37:35,199 --> 00:37:39,549
originally parameters and I guess

834
00:37:36,849 --> 00:37:41,230
obviously the ogre as well so we had a

835
00:37:39,550 --> 00:37:43,840
function that was taking the door the

836
00:37:41,230 --> 00:37:46,510
alter the camera in the or ogre and it

837
00:37:43,840 --> 00:37:48,010
was able to produce any image we might

838
00:37:46,510 --> 00:37:49,480
want to produce with any location of the

839
00:37:48,010 --> 00:37:51,190
door any location of the ogre any

840
00:37:49,480 --> 00:37:53,289
location the altar and any placement of

841
00:37:51,190 --> 00:37:54,849
the camera and then we wanted to do

842
00:37:53,289 --> 00:37:56,650
again Resident Evil style if we're

843
00:37:54,849 --> 00:37:58,750
talking about a fixed camera location

844
00:37:56,650 --> 00:38:00,910
with a fixed scene and only like one or

845
00:37:58,750 --> 00:38:03,489
two moving things is we just said will

846
00:38:00,909 --> 00:38:05,139
partially specialized everything except

847
00:38:03,489 --> 00:38:06,909
for the ogre so the cameras fix the

848
00:38:05,139 --> 00:38:09,819
alters fix the door is fixed now all

849
00:38:06,909 --> 00:38:12,849
this stuff pushes down and we're left

850
00:38:09,820 --> 00:38:15,039
with just a color map and as a map for

851
00:38:12,849 --> 00:38:16,900
our for our sort of image that we start

852
00:38:15,039 --> 00:38:19,119
with and all we have to do is render the

853
00:38:16,900 --> 00:38:20,860
booger and depth taps Tim against the

854
00:38:19,119 --> 00:38:22,299
death map to know whether we pick the

855
00:38:20,860 --> 00:38:24,550
colors from our pre rendered result or

856
00:38:22,300 --> 00:38:27,519
the colors from our you know real-time

857
00:38:24,550 --> 00:38:28,570
rendered result okay so hopefully that

858
00:38:27,519 --> 00:38:30,130
makes some sense but you're probably

859
00:38:28,570 --> 00:38:31,180
wondering why did I go through all this

860
00:38:30,130 --> 00:38:32,860
trouble of explaining partial

861
00:38:31,179 --> 00:38:34,299
specialization if all I'm going to talk

862
00:38:32,860 --> 00:38:35,829
about is color map the depth map and the

863
00:38:34,300 --> 00:38:37,000
reason is because I want you to start

864
00:38:35,829 --> 00:38:39,130
thinking about it a little more broadly

865
00:38:37,000 --> 00:38:43,710
don't just think colormap depth map

866
00:38:39,130 --> 00:38:49,059
think anything I want to compute right

867
00:38:43,710 --> 00:38:51,909
so let's take another case like in

868
00:38:49,059 --> 00:38:54,699
Resident Evil where I have a scene that

869
00:38:51,909 --> 00:38:57,250
has a floor ok and there's stuff you

870
00:38:54,699 --> 00:38:59,889
know behind it or whatever and here is

871
00:38:57,250 --> 00:39:02,409
my guy who's standing on it I now want

872
00:38:59,889 --> 00:39:07,449
to render reflections of the person in

873
00:39:02,409 --> 00:39:09,819
the floor ok so now you're in exactly

874
00:39:07,449 --> 00:39:12,399
the same situation that you were before

875
00:39:09,820 --> 00:39:15,670
if you understand partial specialization

876
00:39:12,400 --> 00:39:19,000
as long as you can write the renderer

877
00:39:15,670 --> 00:39:20,650
for this offline as long as you could

878
00:39:19,000 --> 00:39:23,170
write the code that would have rendered

879
00:39:20,650 --> 00:39:27,220
it you're in an excellent position to

880
00:39:23,170 --> 00:39:34,349
figure out what you need to save to do

881
00:39:27,219 --> 00:39:34,349
it runtime with the background fixed so

882
00:39:39,380 --> 00:39:47,570
what might we need well it depends on

883
00:39:42,809 --> 00:39:51,210
what our goals are if only the floor is

884
00:39:47,570 --> 00:39:54,510
reflected right so it's just the floor

885
00:39:51,210 --> 00:39:56,429
which in Resident Evil it was then we

886
00:39:54,510 --> 00:39:59,790
get a little bit of a bonus because the

887
00:39:56,429 --> 00:40:02,159
floor is just a plane and a plane has an

888
00:39:59,789 --> 00:40:03,809
equation I don't know if we ever covered

889
00:40:02,159 --> 00:40:05,969
this on handmade here probably not but

890
00:40:03,809 --> 00:40:11,730
the equation for a plane is ax plus B y

891
00:40:05,969 --> 00:40:14,399
plus cz Plus D equals 0 I'm sure we'll

892
00:40:11,730 --> 00:40:16,110
get to this some point probably not I

893
00:40:14,400 --> 00:40:20,059
guess we only did equations for walls

894
00:40:16,110 --> 00:40:25,380
which is basically the same thing and so

895
00:40:20,059 --> 00:40:27,480
ABC these things the ABC actually is the

896
00:40:25,380 --> 00:40:31,980
normal to the plane right so if you

897
00:40:27,480 --> 00:40:34,349
imagine there's a plane and there's a

898
00:40:31,980 --> 00:40:38,760
vector pointing out of it the ABC is

899
00:40:34,349 --> 00:40:41,849
actually this vector right here that's

900
00:40:38,760 --> 00:40:43,590
the normal and the D value is how far

901
00:40:41,849 --> 00:40:48,319
from the origin you would have to go

902
00:40:43,590 --> 00:40:51,870
backwards along that value to get to a

903
00:40:48,320 --> 00:40:53,820
point on the plane neither here nor

904
00:40:51,869 --> 00:40:56,460
there doesn't matter at all for this

905
00:40:53,820 --> 00:40:59,760
case just thought I'd mention it but

906
00:40:56,460 --> 00:41:02,550
point being we need a plane right we

907
00:40:59,760 --> 00:41:03,840
would need the reflection plane because

908
00:41:02,550 --> 00:41:06,090
we're probably going to need that to set

909
00:41:03,840 --> 00:41:08,160
up the set up the reflection in the

910
00:41:06,090 --> 00:41:10,289
runtime version as well but point being

911
00:41:08,159 --> 00:41:13,259
so what are we going to need here ok so

912
00:41:10,289 --> 00:41:16,070
we've got our food and we're going to

913
00:41:13,260 --> 00:41:18,750
need sort of the whatever the scenery is

914
00:41:16,070 --> 00:41:20,670
that we're going to render I don't know

915
00:41:18,750 --> 00:41:22,320
what this guy is I don't I didn't I

916
00:41:20,670 --> 00:41:25,800
played like one resident evil game I

917
00:41:22,320 --> 00:41:29,100
think goes Resident Evil 0 I I want it

918
00:41:25,800 --> 00:41:34,470
is let's say is there someone named

919
00:41:29,099 --> 00:41:37,130
Veronica may be 0 or something let's say

920
00:41:34,469 --> 00:41:40,409
this is Veronica I don't actually know

921
00:41:37,130 --> 00:41:42,300
but maybe that's Veronica I think you

922
00:41:40,409 --> 00:41:44,369
can tell just clearly from this drawing

923
00:41:42,300 --> 00:41:46,860
it looks like a Veronica doesn't it I

924
00:41:44,369 --> 00:41:51,380
mean it says Veronica to me clearly I

925
00:41:46,860 --> 00:41:54,650
feel like she also had like a beret on

926
00:41:51,380 --> 00:41:56,329
thing I don't know maybe not point being

927
00:41:54,650 --> 00:41:58,250
let's suppose that that's Veronica and

928
00:41:56,329 --> 00:42:00,048
let's suppose that resident evil is a

929
00:41:58,250 --> 00:42:02,719
story about someone named Veronica which

930
00:42:00,048 --> 00:42:06,108
it probably isn't and what we need to do

931
00:42:02,719 --> 00:42:08,118
is we need to pass in Veronica right

932
00:42:06,108 --> 00:42:13,308
then we also need to pass in the plane

933
00:42:08,119 --> 00:42:16,309
of the reflection right that's what we

934
00:42:13,309 --> 00:42:18,680
gotta pass it all right so now we have

935
00:42:16,309 --> 00:42:20,059
our code and we need to actually write

936
00:42:18,679 --> 00:42:22,009
the code for this well it's basically

937
00:42:20,059 --> 00:42:23,509
exactly the same as the code we're going

938
00:42:22,009 --> 00:42:25,730
to write before for the most part right

939
00:42:23,509 --> 00:42:27,710
you know again just to doe coding it I

940
00:42:25,730 --> 00:42:28,880
got to produce an out value and so what

941
00:42:27,710 --> 00:42:34,269
I'm going to do is I'm going to light

942
00:42:28,880 --> 00:42:36,650
you know my scenery with some lights and

943
00:42:34,268 --> 00:42:38,358
I suppose I should have listed the

944
00:42:36,650 --> 00:42:39,889
lights before here too I mean right this

945
00:42:38,358 --> 00:42:41,328
there's so much stuff that's being

946
00:42:39,889 --> 00:42:43,038
partially specialized out in one of

947
00:42:41,329 --> 00:42:45,079
these things the light array is all in

948
00:42:43,039 --> 00:42:46,730
there right so we have a light array and

949
00:42:45,079 --> 00:42:48,528
then we also have a primary light and we

950
00:42:46,730 --> 00:42:50,210
chose to specialize out all the other

951
00:42:48,528 --> 00:42:52,759
lights but just keep one of them for

952
00:42:50,210 --> 00:42:53,900
lighting our ogre again if you really

953
00:42:52,759 --> 00:42:55,309
want to write it all the way out if I

954
00:42:53,900 --> 00:42:57,500
was being very diligent here you could

955
00:42:55,309 --> 00:42:59,329
see that we're specifically choosing the

956
00:42:57,500 --> 00:43:01,039
light in the ogre as the non as the

957
00:42:59,329 --> 00:43:02,869
still varying parameters and everything

958
00:43:01,039 --> 00:43:07,250
else gets partially specialized away

959
00:43:02,869 --> 00:43:10,190
right but in some sense in some sense

960
00:43:07,250 --> 00:43:11,929
that's even that's really not sort of

961
00:43:10,190 --> 00:43:14,480
true this is even getting partially

962
00:43:11,929 --> 00:43:15,440
specialized array a way really what's

963
00:43:14,480 --> 00:43:17,778
happening is we're using an

964
00:43:15,440 --> 00:43:22,119
approximation for this but neither here

965
00:43:17,778 --> 00:43:25,009
nor there okay not super important so

966
00:43:22,119 --> 00:43:27,289
here we are we got to like this thing so

967
00:43:25,009 --> 00:43:30,380
we like the scenery with with our lights

968
00:43:27,289 --> 00:43:35,930
and we produce whatever that is and then

969
00:43:30,380 --> 00:43:39,650
we need to do our our our out here we

970
00:43:35,929 --> 00:43:43,940
need to light our Veronica with our

971
00:43:39,650 --> 00:43:46,990
lights as well and then we would have

972
00:43:43,940 --> 00:43:51,170
our proper scene with no reflection

973
00:43:46,989 --> 00:43:53,358
right but like I said we do want our

974
00:43:51,170 --> 00:43:56,750
reflection there so what we need to do

975
00:43:53,358 --> 00:43:58,130
in in between these two you might say

976
00:43:56,750 --> 00:44:01,940
like in fact let me go ahead and put

977
00:43:58,130 --> 00:44:03,769
that in here right is we need to do our

978
00:44:01,940 --> 00:44:04,760
standard if we need to say like if

979
00:44:03,768 --> 00:44:10,189
Veronica z

980
00:44:04,760 --> 00:44:18,290
e is is less than the scenery Z then the

981
00:44:10,190 --> 00:44:20,150
out equals light Veronica lights but

982
00:44:18,289 --> 00:44:22,210
what we need to do here is we need to

983
00:44:20,150 --> 00:44:26,210
say well okay we were sort of saying

984
00:44:22,210 --> 00:44:28,730
that we wanted this reflection to occur

985
00:44:26,210 --> 00:44:31,099
and so far we have not had any way for

986
00:44:28,730 --> 00:44:32,599
the reflection to occur so what we need

987
00:44:31,099 --> 00:44:34,610
to do there is we need to have some

988
00:44:32,599 --> 00:44:37,099
parameter that tells us how reflective

989
00:44:34,610 --> 00:44:39,710
the scenery is at any given point right

990
00:44:37,099 --> 00:44:41,150
so when we compute this and we render it

991
00:44:39,710 --> 00:44:43,159
this would be a property of the

992
00:44:41,150 --> 00:44:45,889
materials in the scenery how reflective

993
00:44:43,159 --> 00:44:48,409
it is and if that thing is marked

994
00:44:45,889 --> 00:44:50,420
reflective then we need to create the

995
00:44:48,409 --> 00:44:53,029
reflection for it right so what we need

996
00:44:50,420 --> 00:44:56,809
to do here is we need to say if whatever

997
00:44:53,030 --> 00:44:59,330
are out dot like reflection is if the ab

998
00:44:56,809 --> 00:45:01,670
dot reflection is greater than zero then

999
00:44:59,329 --> 00:45:03,590
that means the surface at this point is

1000
00:45:01,670 --> 00:45:07,720
reflected so we're going to have to

1001
00:45:03,590 --> 00:45:10,130
compute the reflected Veronica right and

1002
00:45:07,719 --> 00:45:12,409
really they're reflected everything and

1003
00:45:10,130 --> 00:45:14,780
we're going to have to render it in

1004
00:45:12,409 --> 00:45:19,309
there right now fortunately we already

1005
00:45:14,780 --> 00:45:22,670
have what we need if we consider our foo

1006
00:45:19,309 --> 00:45:23,869
to take a camera position then right in

1007
00:45:22,670 --> 00:45:26,119
here what we would do is say alright

1008
00:45:23,869 --> 00:45:27,650
when we have our reflection we are then

1009
00:45:26,119 --> 00:45:31,039
going to like go ahead and mix our

1010
00:45:27,650 --> 00:45:33,559
output color right and using that output

1011
00:45:31,039 --> 00:45:34,820
reflection value let's say we're going

1012
00:45:33,559 --> 00:45:37,940
to go ahead and mix that with just

1013
00:45:34,820 --> 00:45:43,460
another call to our cells with the same

1014
00:45:37,940 --> 00:45:49,119
scenery the same Veronica and now the

1015
00:45:43,460 --> 00:45:49,119
camera is going to actually be reflected

1016
00:45:50,869 --> 00:45:58,048
right so you can think about this is

1017
00:45:56,608 --> 00:45:59,639
basically saying all right we're going

1018
00:45:58,048 --> 00:46:01,170
to have to create a reflected version of

1019
00:45:59,639 --> 00:46:04,379
the scene so we're going to create

1020
00:46:01,170 --> 00:46:06,088
temporarily a fake camera which is just

1021
00:46:04,380 --> 00:46:07,769
pointing in the direction we would need

1022
00:46:06,088 --> 00:46:10,318
it to point in order to render the scene

1023
00:46:07,768 --> 00:46:11,998
reflected and that would involve a

1024
00:46:10,318 --> 00:46:13,558
mirror and all that stuff all that good

1025
00:46:11,998 --> 00:46:14,488
stuff that's outside the scope of what

1026
00:46:13,559 --> 00:46:16,650
we're talking about here because again

1027
00:46:14,489 --> 00:46:18,179
I'm I'm trying to sort of avoid the talk

1028
00:46:16,650 --> 00:46:19,440
about how you actually render any things

1029
00:46:18,179 --> 00:46:21,509
because that's I like how do you do

1030
00:46:19,440 --> 00:46:25,048
offline 3d rendering talk which is a

1031
00:46:21,509 --> 00:46:26,130
whole nother thing but assuming that you

1032
00:46:25,048 --> 00:46:28,318
do know how to create the actual

1033
00:46:26,130 --> 00:46:30,989
reflected version you're going to want

1034
00:46:28,318 --> 00:46:34,528
to do that and then mix it into the

1035
00:46:30,989 --> 00:46:37,139
color at this point right so now you can

1036
00:46:34,528 --> 00:46:40,199
immediately see what actually needs to

1037
00:46:37,139 --> 00:46:43,170
happen in order for you to get the

1038
00:46:40,199 --> 00:46:46,588
correct color at this point now instead

1039
00:46:43,170 --> 00:46:48,329
of just the Z and the color right we

1040
00:46:46,588 --> 00:46:50,190
need the color and we need the Z because

1041
00:46:48,329 --> 00:46:54,089
we need to save those we can partially

1042
00:46:50,190 --> 00:46:56,068
specialized this part right here but we

1043
00:46:54,088 --> 00:46:57,690
still have the possibility that Veronica

1044
00:46:56,068 --> 00:47:01,380
is going to be reflected so what that

1045
00:46:57,690 --> 00:47:03,389
means is we need another map right we

1046
00:47:01,380 --> 00:47:08,519
need a map that tells us whether

1047
00:47:03,389 --> 00:47:11,129
something is reflective at that point so

1048
00:47:08,518 --> 00:47:12,598
we need to save all three of these plus

1049
00:47:11,130 --> 00:47:13,920
we need to save the plane because

1050
00:47:12,599 --> 00:47:16,650
remember we need to be able to create

1051
00:47:13,920 --> 00:47:21,329
that reflective camera at runtime to for

1052
00:47:16,650 --> 00:47:22,858
rendering the reflected Veronica because

1053
00:47:21,329 --> 00:47:24,839
the fully partially specialized version

1054
00:47:22,858 --> 00:47:26,670
of this thing includes the recursive

1055
00:47:24,838 --> 00:47:28,949
call to itself that has to render

1056
00:47:26,670 --> 00:47:30,959
Veronica twice right we asked to render

1057
00:47:28,949 --> 00:47:35,249
branca once normally and once in the

1058
00:47:30,958 --> 00:47:37,169
reflected camera so now you can see that

1059
00:47:35,248 --> 00:47:40,108
we actually need to store three Maps

1060
00:47:37,170 --> 00:47:41,818
potentially one that's the color one

1061
00:47:40,108 --> 00:47:43,588
that's the depth and ones that the

1062
00:47:41,818 --> 00:47:48,358
reflect that's the reflectivity at that

1063
00:47:43,588 --> 00:47:49,768
point and by the way this gives you

1064
00:47:48,358 --> 00:47:53,759
because there's another parameter here

1065
00:47:49,768 --> 00:47:56,399
again that gives you pretty much I guess

1066
00:47:53,759 --> 00:47:58,170
what i should say is this equation this

1067
00:47:56,400 --> 00:48:00,539
this sort of stuff that happens with the

1068
00:47:58,170 --> 00:48:02,278
blending here can be as complicated as

1069
00:48:00,539 --> 00:48:03,599
you want it just may mean that you have

1070
00:48:02,278 --> 00:48:06,179
to start storing more

1071
00:48:03,599 --> 00:48:07,769
makes this is just standard material

1072
00:48:06,179 --> 00:48:09,858
rendering equations that you would be

1073
00:48:07,768 --> 00:48:12,238
doing here in your off line renderer any

1074
00:48:09,858 --> 00:48:14,460
one of those things that you need to

1075
00:48:12,239 --> 00:48:16,499
that depends on when you look at the

1076
00:48:14,460 --> 00:48:19,608
actual function that depends on a

1077
00:48:16,498 --> 00:48:22,199
dynamic element that could move around

1078
00:48:19,608 --> 00:48:25,048
you have to anything that you can't

1079
00:48:22,199 --> 00:48:26,669
condense down into folded constants

1080
00:48:25,048 --> 00:48:28,650
right anything that doesn't collapse out

1081
00:48:26,670 --> 00:48:31,318
as constant that still depends on a

1082
00:48:28,650 --> 00:48:33,690
varying parameter those things have to

1083
00:48:31,318 --> 00:48:36,869
be stored as Maps because they have to

1084
00:48:33,690 --> 00:48:39,298
be read again right in much the same way

1085
00:48:36,869 --> 00:48:41,190
that you can't get rid of Z because you

1086
00:48:39,298 --> 00:48:43,650
need to test it against something that

1087
00:48:41,190 --> 00:48:46,289
is not known at partial specialization

1088
00:48:43,650 --> 00:48:47,940
time you need to store reflection

1089
00:48:46,289 --> 00:48:51,119
because it needs to be tested against

1090
00:48:47,940 --> 00:48:52,588
something that is not known right this

1091
00:48:51,119 --> 00:48:54,749
thing that's going to be tested against

1092
00:48:52,588 --> 00:48:56,849
it this this extra rendering step has a

1093
00:48:54,748 --> 00:48:58,528
dynamic element in it or go this if

1094
00:48:56,849 --> 00:49:00,630
cannot be optimized out it cannot be

1095
00:48:58,528 --> 00:49:03,268
specialized away just by looking at what

1096
00:49:00,630 --> 00:49:07,528
actually happened on that that pixel in

1097
00:49:03,268 --> 00:49:09,538
the offline render stage so in a lot of

1098
00:49:07,528 --> 00:49:12,449
ways you this is very similar to the

1099
00:49:09,539 --> 00:49:14,489
concept of optimization right partial

1100
00:49:12,449 --> 00:49:16,108
specialization is very much like what an

1101
00:49:14,489 --> 00:49:17,880
optimizer does when it takes your code

1102
00:49:16,108 --> 00:49:21,179
and sees that there are constants that

1103
00:49:17,880 --> 00:49:24,140
it can deduce that allow it to remove

1104
00:49:21,179 --> 00:49:26,489
whole portions of that thing and

1105
00:49:24,139 --> 00:49:28,469
furthermore it's exactly like what

1106
00:49:26,489 --> 00:49:31,079
happens in you know like when you have

1107
00:49:28,469 --> 00:49:33,749
an inline function let's say and you

1108
00:49:31,079 --> 00:49:36,089
call it in multiple places it may

1109
00:49:33,748 --> 00:49:38,338
produce multiple different versions of

1110
00:49:36,088 --> 00:49:40,978
that inline function as it gets in lined

1111
00:49:38,338 --> 00:49:42,808
that are based around the conditions

1112
00:49:40,978 --> 00:49:45,058
that surrounded the call to the inline

1113
00:49:42,809 --> 00:49:46,798
function because it can see some things

1114
00:49:45,059 --> 00:49:49,079
are constant and can be optimized away

1115
00:49:46,798 --> 00:49:50,639
in some cases can't necessarily be

1116
00:49:49,079 --> 00:49:55,099
optimized or the same things might not

1117
00:49:50,639 --> 00:49:59,400
be a prize away in other cases right and

1118
00:49:55,099 --> 00:50:01,859
so that is the way to frame these kinds

1119
00:49:59,400 --> 00:50:03,358
of problems right what you want to think

1120
00:50:01,858 --> 00:50:07,949
about when you want to think about how

1121
00:50:03,358 --> 00:50:09,478
do I offline do a bunch of work you want

1122
00:50:07,949 --> 00:50:11,308
to think about it in terms of partial

1123
00:50:09,478 --> 00:50:15,028
specializations sit down and actually

1124
00:50:11,309 --> 00:50:17,310
write the full rendering concept what do

1125
00:50:15,028 --> 00:50:19,650
you want to actually compute

1126
00:50:17,309 --> 00:50:23,009
at this point if you were writing a ray

1127
00:50:19,650 --> 00:50:24,570
tracer what would you actually and had

1128
00:50:23,010 --> 00:50:28,490
all the time in the world what would you

1129
00:50:24,570 --> 00:50:32,070
actually compute and then you start

1130
00:50:28,489 --> 00:50:34,949
condensing that work into pre computed

1131
00:50:32,070 --> 00:50:42,090
values this is exactly again the same

1132
00:50:34,949 --> 00:50:44,159
thing as light maps right let's elevate

1133
00:50:42,090 --> 00:50:48,240
it up to 3d rendering now forget

1134
00:50:44,159 --> 00:50:49,769
resident evil think quake all right now

1135
00:50:48,239 --> 00:50:51,979
we've got a situation where we've got

1136
00:50:49,769 --> 00:50:55,110
these walls they're being rendered in 3d

1137
00:50:51,980 --> 00:50:57,329
okay and we're actually be able to move

1138
00:50:55,110 --> 00:50:59,370
around them so the camera is no longer

1139
00:50:57,329 --> 00:51:00,989
fixed it's no longer in a single

1140
00:50:59,369 --> 00:51:02,549
location it's not like Resident Evil we

1141
00:51:00,989 --> 00:51:06,239
can look anywhere we can go anywhere we

1142
00:51:02,550 --> 00:51:08,760
want but it's still way too expensive to

1143
00:51:06,239 --> 00:51:10,229
compute the lighting the fundamental

1144
00:51:08,760 --> 00:51:12,840
render equation at any pixel that we

1145
00:51:10,230 --> 00:51:14,849
wanted to compute involve not just the

1146
00:51:12,840 --> 00:51:16,620
diffuse color of the texture at that

1147
00:51:14,849 --> 00:51:19,259
pixel which we can reproduce at runtime

1148
00:51:16,619 --> 00:51:20,759
now but also a bunch of Ray cast into

1149
00:51:19,260 --> 00:51:23,400
the environment that look at where the

1150
00:51:20,760 --> 00:51:26,010
light is coming from so hey guess what

1151
00:51:23,400 --> 00:51:28,349
we partially specialized again instead

1152
00:51:26,010 --> 00:51:30,840
of calling light you know this wall

1153
00:51:28,349 --> 00:51:33,210
element with some kind of crazy array of

1154
00:51:30,840 --> 00:51:34,380
lights and the rest of the scenery and

1155
00:51:33,210 --> 00:51:36,179
shadows and all that other stuff in

1156
00:51:34,380 --> 00:51:38,550
material parameters you know what we're

1157
00:51:36,179 --> 00:51:40,649
just going to consider that a constant

1158
00:51:38,550 --> 00:51:43,590
that we creek that we compute offline

1159
00:51:40,650 --> 00:51:45,570
and we bake it into a map that we look

1160
00:51:43,590 --> 00:51:49,820
up that now instead of being mapped to

1161
00:51:45,570 --> 00:51:49,820
the screen is mapped to the wall and

1162
00:51:49,880 --> 00:51:57,030
even to this day a huge amount of what

1163
00:51:54,090 --> 00:51:59,630
happens on a 3d engine rendering team in

1164
00:51:57,030 --> 00:52:03,360
terms of what they're actually doing

1165
00:51:59,630 --> 00:52:05,220
it's partial specialization what they're

1166
00:52:03,360 --> 00:52:10,680
sitting around doing is trying to figure

1167
00:52:05,219 --> 00:52:12,659
out new ways of capturing stuff that

1168
00:52:10,679 --> 00:52:14,339
they can render and compute offline

1169
00:52:12,659 --> 00:52:16,409
while still maintaining the maximum

1170
00:52:14,340 --> 00:52:19,680
amount of dynamic activity at runtime

1171
00:52:16,409 --> 00:52:21,809
and as 3d graphics has progressed and as

1172
00:52:19,679 --> 00:52:24,769
processing power has gotten more and

1173
00:52:21,809 --> 00:52:27,710
more and more and more abundant on

1174
00:52:24,769 --> 00:52:31,119
gaming machines and gaming hardware

1175
00:52:27,710 --> 00:52:33,579
they're able to move things from

1176
00:52:31,119 --> 00:52:36,099
was previously partially specialized in

1177
00:52:33,579 --> 00:52:38,650
two things that are now dynamic and the

1178
00:52:36,099 --> 00:52:42,759
story of 3d graphics and progress as you

1179
00:52:38,650 --> 00:52:45,369
move from you know Resident Evil 2 quake

1180
00:52:42,759 --> 00:52:47,889
to something like Call of Duty now or

1181
00:52:45,369 --> 00:52:50,048
you know whatever pick your current

1182
00:52:47,889 --> 00:52:54,568
frostbite engine whatever you want

1183
00:52:50,048 --> 00:52:57,940
unreal the story of that progress is

1184
00:52:54,568 --> 00:53:01,480
constantly changing what we partially

1185
00:52:57,940 --> 00:53:04,119
evaluate and why right and moving more

1186
00:53:01,480 --> 00:53:05,769
thing so dynamic and changing getting

1187
00:53:04,119 --> 00:53:07,778
more richer equations that we're trying

1188
00:53:05,768 --> 00:53:09,219
to simulate as we can do that in

1189
00:53:07,778 --> 00:53:11,278
partially specializing different parts

1190
00:53:09,219 --> 00:53:13,328
of them that's really what's going on

1191
00:53:11,278 --> 00:53:14,440
because at the end of the day we know

1192
00:53:13,329 --> 00:53:16,660
what we're trying to do we're trying to

1193
00:53:14,440 --> 00:53:18,970
evaluate the rendering equation right

1194
00:53:16,659 --> 00:53:20,379
Jim koteas rendering equation right

1195
00:53:18,969 --> 00:53:22,179
we're trying to evaluate that for every

1196
00:53:20,380 --> 00:53:24,220
pixel on the screen and we've never had

1197
00:53:22,179 --> 00:53:26,108
enough horsepower to do it and so

1198
00:53:24,219 --> 00:53:28,328
everything we do is an exercise in

1199
00:53:26,108 --> 00:53:30,578
partially specializing that equation and

1200
00:53:28,329 --> 00:53:32,318
there's so many ways to do it and it all

1201
00:53:30,579 --> 00:53:35,019
just depends on what you are holding

1202
00:53:32,318 --> 00:53:37,088
fixed right Resident Evil was let's fix

1203
00:53:35,018 --> 00:53:39,368
the camera let's fix the environment

1204
00:53:37,088 --> 00:53:42,900
let's fix the lighting and we'll just

1205
00:53:39,369 --> 00:53:46,150
render the dynamic characters right

1206
00:53:42,900 --> 00:53:48,400
quake is let's just fix the lighting

1207
00:53:46,150 --> 00:53:49,690
right will render will let the camera

1208
00:53:48,400 --> 00:53:50,769
very will let you know blah blah blah

1209
00:53:49,690 --> 00:53:52,539
but we just fixed the lighting the

1210
00:53:50,768 --> 00:53:54,518
shadows that's that's not dynamic right

1211
00:53:52,539 --> 00:53:56,859
and even it something like quake you can

1212
00:53:54,518 --> 00:53:58,328
see they actually partially specialized

1213
00:53:56,858 --> 00:54:00,998
part of the lending question and others

1214
00:53:58,329 --> 00:54:02,499
of it right direct lighting was actually

1215
00:54:00,998 --> 00:54:05,409
still computed in the quake engine and

1216
00:54:02,498 --> 00:54:07,058
often is in most engines today right but

1217
00:54:05,409 --> 00:54:09,190
the indirect lighting has to be pre

1218
00:54:07,059 --> 00:54:12,130
computed because it's too expensive to

1219
00:54:09,190 --> 00:54:14,798
compute dynamically a lot of times and

1220
00:54:12,130 --> 00:54:16,630
so you often either precompute it or

1221
00:54:14,798 --> 00:54:19,210
like some images nowadays do iterative

1222
00:54:16,630 --> 00:54:21,670
refinement to sort of constantly reap

1223
00:54:19,210 --> 00:54:22,900
recompute the lighting if you will so

1224
00:54:21,670 --> 00:54:24,608
that you can have some measure of

1225
00:54:22,900 --> 00:54:27,309
dynamic lighting happening dynamic

1226
00:54:24,608 --> 00:54:31,328
indirect lighting happening as geometry

1227
00:54:27,309 --> 00:54:32,619
potentially changes in the game so yeah

1228
00:54:31,329 --> 00:54:34,630
so like I said I kind of wanted to

1229
00:54:32,619 --> 00:54:36,608
broaden that topic because really the

1230
00:54:34,630 --> 00:54:38,710
concept of what Resident Evil was doing

1231
00:54:36,608 --> 00:54:40,989
or what quake was doing they're all kind

1232
00:54:38,710 --> 00:54:42,999
of the same concept the concept is you

1233
00:54:40,989 --> 00:54:44,500
have an equation you'd like to do it's

1234
00:54:42,998 --> 00:54:46,179
incredibly expensive there's no

1235
00:54:44,500 --> 00:54:48,099
we are going to do it at runtime what do

1236
00:54:46,179 --> 00:54:49,449
you partially specialized which terms of

1237
00:54:48,099 --> 00:54:52,569
it do you start folding out what do you

1238
00:54:49,449 --> 00:54:56,739
pre-compute and what do you keep and you

1239
00:54:52,570 --> 00:54:59,289
can do a remarkable amount of stuff by

1240
00:54:56,739 --> 00:55:02,019
choosing to keep certain things as maps

1241
00:54:59,289 --> 00:55:04,090
right that are either screen space or

1242
00:55:02,019 --> 00:55:08,099
mapped onto geometry or whatever you can

1243
00:55:04,090 --> 00:55:10,510
do a remarkable number of things there

1244
00:55:08,099 --> 00:55:12,759
you can do a lot of interesting and

1245
00:55:10,510 --> 00:55:15,610
different effects just by saving

1246
00:55:12,760 --> 00:55:18,130
different elements of the process so

1247
00:55:15,610 --> 00:55:22,840
that's about it and I think we're sort

1248
00:55:18,130 --> 00:55:24,579
of roughly roughly out of time hopefully

1249
00:55:22,840 --> 00:55:27,700
that made some sense and I don't know if

1250
00:55:24,579 --> 00:55:30,400
Alvin is actually here today he was the

1251
00:55:27,699 --> 00:55:32,339
one who recently asked the question but

1252
00:55:30,400 --> 00:55:35,530
hopefully that answered it to a

1253
00:55:32,340 --> 00:55:40,059
significant 22 enough precision that

1254
00:55:35,530 --> 00:55:44,310
he's sort of he sort of gets my my mind

1255
00:55:40,059 --> 00:55:48,070
set on anyway let's look at the chat

1256
00:55:44,309 --> 00:55:57,820
what is going on in the chat how is the

1257
00:55:48,070 --> 00:56:00,660
chat going guys it ain't got time for a

1258
00:55:57,820 --> 00:56:00,660
couple questions probably

1259
00:56:15,539 --> 00:56:21,239
oh so Alvin is here this for me is by

1260
00:56:19,230 --> 00:56:24,000
far the best handmade stream ever well

1261
00:56:21,239 --> 00:56:26,429
alright I'm glad I hope that means your

1262
00:56:24,000 --> 00:56:28,530
question was answered a couple of

1263
00:56:26,429 --> 00:56:30,089
questions so I guess they did something

1264
00:56:28,530 --> 00:56:35,040
similar to reflections to implement

1265
00:56:30,090 --> 00:56:36,630
real-time shadows yes how did they

1266
00:56:35,039 --> 00:56:40,110
achieve other effects like camera

1267
00:56:36,630 --> 00:56:43,050
panning and lightning you still need an

1268
00:56:40,110 --> 00:56:48,380
invisible level collision mesh correct

1269
00:56:43,050 --> 00:56:48,380
uh so I guess what I would say is again

1270
00:56:51,110 --> 00:57:00,420
there's literally take that to think so

1271
00:56:58,500 --> 00:57:05,070
let's say I want to implement lightning

1272
00:57:00,420 --> 00:57:07,769
right well I can decide what my original

1273
00:57:05,070 --> 00:57:12,720
lightning equation was if my lightning

1274
00:57:07,769 --> 00:57:16,250
equation is going to let me let me give

1275
00:57:12,719 --> 00:57:21,419
a very a very simple example here right

1276
00:57:16,250 --> 00:57:23,579
so if i have a a way to compute some

1277
00:57:21,420 --> 00:57:25,200
lighting at a at a point so this is this

1278
00:57:23,579 --> 00:57:27,090
is an offline renderer we're ray tracing

1279
00:57:25,199 --> 00:57:29,339
our thing whatever i'm going to compute

1280
00:57:27,090 --> 00:57:32,700
some lighting and I'm gonna say okay I

1281
00:57:29,340 --> 00:57:34,650
want to light you know the scenery and

1282
00:57:32,699 --> 00:57:36,899
I'm going to give it this light array

1283
00:57:34,650 --> 00:57:38,610
and this is all the lights in the scene

1284
00:57:36,900 --> 00:57:42,720
and it's going to produce you know the

1285
00:57:38,610 --> 00:57:45,180
output color okay you can also imagine

1286
00:57:42,719 --> 00:57:48,750
me doing this and I'm actually knowing

1287
00:57:45,179 --> 00:57:50,879
to call that out we call that a you can

1288
00:57:48,750 --> 00:57:56,269
also imagine me doing lighting the

1289
00:57:50,880 --> 00:58:00,450
scenery with just the lightning light

1290
00:57:56,269 --> 00:58:04,079
right now I have two potential

1291
00:58:00,449 --> 00:58:06,210
Lighting's for the same scene and I can

1292
00:58:04,079 --> 00:58:07,139
blend between them and I wouldn't blend

1293
00:58:06,210 --> 00:58:09,389
between them because lighting is

1294
00:58:07,139 --> 00:58:12,210
additive so really it's it's it's a plus

1295
00:58:09,389 --> 00:58:15,299
TB is what it would actually equal this

1296
00:58:12,210 --> 00:58:17,750
is the out color right where this is how

1297
00:58:15,300 --> 00:58:17,750
much lightning

1298
00:58:20,289 --> 00:58:25,639
now I've got lightning you know I've got

1299
00:58:23,869 --> 00:58:27,799
the scene lit just by the lightning and

1300
00:58:25,639 --> 00:58:30,559
I've got the scene lit by all the normal

1301
00:58:27,800 --> 00:58:32,539
lights in the scene right and I add them

1302
00:58:30,559 --> 00:58:35,119
together at runtime I can dial this

1303
00:58:32,539 --> 00:58:37,400
between zero and one to get turn the

1304
00:58:35,119 --> 00:58:38,659
lightning on or off or even part of the

1305
00:58:37,400 --> 00:58:40,190
way if I want it to like kind of fade

1306
00:58:38,659 --> 00:58:43,639
out over a couple frames or whatever

1307
00:58:40,190 --> 00:58:45,380
right i can do like 1.7 point 20 1.7

1308
00:58:43,639 --> 00:58:48,670
point 20 for like in that lightning look

1309
00:58:45,380 --> 00:58:54,230
or whatever right because fundamentally

1310
00:58:48,670 --> 00:58:55,909
light is additive right lights add

1311
00:58:54,230 --> 00:58:57,260
together i shine a light on something i

1312
00:58:55,909 --> 00:58:59,149
shine another light they add together

1313
00:58:57,260 --> 00:59:01,430
the amount of light that i see so it's

1314
00:58:59,150 --> 00:59:03,800
completely separable which again means

1315
00:59:01,429 --> 00:59:06,919
it's great for partial specialization so

1316
00:59:03,800 --> 00:59:09,289
this means if I want to I can just spend

1317
00:59:06,920 --> 00:59:11,750
more memory to store the a and B

1318
00:59:09,289 --> 00:59:13,340
separately see normally what I'm doing

1319
00:59:11,750 --> 00:59:16,130
when you know in Resident Evil scene I'm

1320
00:59:13,340 --> 00:59:17,809
rendering it I sum up the lighting for

1321
00:59:16,130 --> 00:59:20,630
all the lights right that parcels but

1322
00:59:17,809 --> 00:59:24,440
you know when I said light and I say

1323
00:59:20,630 --> 00:59:25,820
scenery and I'm like light array sorry

1324
00:59:24,440 --> 00:59:28,760
for the scribbles here I'm talking too

1325
00:59:25,820 --> 00:59:30,230
fast I gotta write fast what is this

1326
00:59:28,760 --> 00:59:31,460
what does this actually look like if we

1327
00:59:30,230 --> 00:59:33,530
actually start looking at the actual

1328
00:59:31,460 --> 00:59:35,869
equation well it's it's you know it's

1329
00:59:33,530 --> 00:59:42,890
actually a series of like light the

1330
00:59:35,869 --> 00:59:49,279
scenery with light like a plus light the

1331
00:59:42,889 --> 00:59:54,230
scenery with light be and on and on and

1332
00:59:49,280 --> 00:59:55,820
on right it's just a sum take the

1333
00:59:54,230 --> 00:59:58,909
contras general a day at the country's

1334
00:59:55,820 --> 01:00:00,769
light be light see like deal ie if I had

1335
00:59:58,909 --> 01:00:02,750
infinite memory and didn't care I could

1336
01:00:00,769 --> 01:00:04,909
store each of those as a separate map

1337
01:00:02,750 --> 01:00:06,349
and then at run time I pull from all the

1338
01:00:04,909 --> 01:00:08,869
maps I add them together and I get my

1339
01:00:06,349 --> 01:00:10,849
result now why would you do that well a

1340
01:00:08,869 --> 01:00:13,369
it takes way too much memory way too

1341
01:00:10,849 --> 01:00:14,750
much DVD space and furthermore your

1342
01:00:13,369 --> 01:00:16,880
graphics card may not be able to pull

1343
01:00:14,750 --> 01:00:18,590
from 30 textures at the same time that

1344
01:00:16,880 --> 01:00:21,500
may be too much texture bandwidth for it

1345
01:00:18,590 --> 01:00:24,380
right I mean 30 full screen textures

1346
01:00:21,500 --> 01:00:26,030
nowadays on like a you know crazy nvidia

1347
01:00:24,380 --> 01:00:27,559
card actually isn't too much but you

1348
01:00:26,030 --> 01:00:29,000
know on a Playstation or whatever they

1349
01:00:27,559 --> 01:00:33,529
had for as usual it would he would have

1350
01:00:29,000 --> 01:00:35,329
been right the point being this is an

1351
01:00:33,530 --> 01:00:37,010
entirely separate vil equation which

1352
01:00:35,329 --> 01:00:38,869
means that each term of the equation

1353
01:00:37,010 --> 01:00:40,940
could be stored as a separate color map

1354
01:00:38,869 --> 01:00:43,880
and added back together at runtime which

1355
01:00:40,940 --> 01:00:46,250
means that if you wanted to you could

1356
01:00:43,880 --> 01:00:48,230
actually control each individual light

1357
01:00:46,250 --> 01:00:56,570
at runtime and in fact you can actually

1358
01:00:48,230 --> 01:01:00,019
see this being done in a different

1359
01:00:56,570 --> 01:01:02,900
domain just by looking at for example

1360
01:01:00,019 --> 01:01:05,480
something like maxwell render where they

1361
01:01:02,900 --> 01:01:06,829
use what's called multi light and what

1362
01:01:05,480 --> 01:01:09,829
multi light is is when they actually

1363
01:01:06,829 --> 01:01:12,039
compute the fully metropolis light

1364
01:01:09,829 --> 01:01:14,380
transport solution like the Monte Carlo

1365
01:01:12,039 --> 01:01:17,539
integrated rate race version of a scene

1366
01:01:14,380 --> 01:01:20,240
they just store whichever lights

1367
01:01:17,539 --> 01:01:22,369
contribution they had computed they

1368
01:01:20,239 --> 01:01:24,500
store that to a separate map which means

1369
01:01:22,369 --> 01:01:26,449
that it's free for you after the fact to

1370
01:01:24,500 --> 01:01:28,670
just dial the lights up and down and

1371
01:01:26,449 --> 01:01:30,349
back so this is actually a single image

1372
01:01:28,670 --> 01:01:31,970
output for maxwell render that someone

1373
01:01:30,349 --> 01:01:34,579
is now playing with the light sliders

1374
01:01:31,969 --> 01:01:36,949
from same exact thing can be done in

1375
01:01:34,579 --> 01:01:39,619
games and you know me I don't know the

1376
01:01:36,949 --> 01:01:41,629
light that I've never looked at in fact

1377
01:01:39,619 --> 01:01:43,429
I don't know anything about Resident

1378
01:01:41,630 --> 01:01:46,099
Evil's lightning or how they did it or

1379
01:01:43,429 --> 01:01:47,239
whatever but point being the general

1380
01:01:46,099 --> 01:01:49,130
solution that problem is actually very

1381
01:01:47,239 --> 01:01:51,649
straightforward and in today's universe

1382
01:01:49,130 --> 01:01:53,930
where you actually have a tremendous

1383
01:01:51,650 --> 01:01:55,789
amount of memory typically to work with

1384
01:01:53,929 --> 01:01:58,609
it's not a big deal for you to

1385
01:01:55,789 --> 01:02:02,090
pre-render 3 4 5 6 Lighting's for a

1386
01:01:58,610 --> 01:02:04,640
scene and grab from two three four maybe

1387
01:02:02,090 --> 01:02:06,019
even more of those when you compose this

1388
01:02:04,639 --> 01:02:07,639
unit runtime so if you were doing a

1389
01:02:06,019 --> 01:02:10,009
resident evil today you could have a lot

1390
01:02:07,639 --> 01:02:11,569
of control over the lights could be

1391
01:02:10,010 --> 01:02:12,770
dynamically flickering and doing

1392
01:02:11,570 --> 01:02:14,630
whatever you want and they'd actually

1393
01:02:12,769 --> 01:02:19,789
cast the correct shadows and all those

1394
01:02:14,630 --> 01:02:22,550
other things right so that's certainly

1395
01:02:19,789 --> 01:02:24,949
very easy to do now the problem that you

1396
01:02:22,550 --> 01:02:26,120
run into if you do this ain't with the

1397
01:02:24,949 --> 01:02:28,039
background cuz like i said perfectly

1398
01:02:26,119 --> 01:02:29,539
separable really easy the problem which

1399
01:02:28,039 --> 01:02:31,550
of course you always run into is your

1400
01:02:29,539 --> 01:02:32,869
dynamic objects those are still being

1401
01:02:31,550 --> 01:02:34,430
rendered at runtime and those are

1402
01:02:32,869 --> 01:02:35,750
obviously more difficult to deal with

1403
01:02:34,429 --> 01:02:38,089
because you've got to do dynamic

1404
01:02:35,750 --> 01:02:40,309
lighting on them now for lights on a

1405
01:02:38,090 --> 01:02:43,160
character not a big deal but remember

1406
01:02:40,309 --> 01:02:44,750
that the environment is not really going

1407
01:02:43,159 --> 01:02:45,259
to respond properly the fact that the

1408
01:02:44,750 --> 01:02:46,610
guy

1409
01:02:45,260 --> 01:02:49,010
is standing in front of the doorway

1410
01:02:46,610 --> 01:02:51,110
isn't going to make the rest of things

1411
01:02:49,010 --> 01:02:53,420
behind the doorway darker because all

1412
01:02:51,110 --> 01:02:55,460
that lighting was pre computed and so

1413
01:02:53,420 --> 01:02:57,650
again you're always limited when you do

1414
01:02:55,460 --> 01:02:59,539
these partial evaluations you're limited

1415
01:02:57,650 --> 01:03:01,730
because now all the things you may have

1416
01:02:59,539 --> 01:03:03,980
liked to have had dynamically computed

1417
01:03:01,730 --> 01:03:07,670
are no longer being dynamically computed

1418
01:03:03,980 --> 01:03:09,579
that's just you know a an artifact of

1419
01:03:07,670 --> 01:03:16,059
freezing some of the things and

1420
01:03:09,579 --> 01:03:16,059
approximating some of the things so yeah

1421
01:03:22,269 --> 01:03:25,969
and it looks like also yet another

1422
01:03:24,980 --> 01:03:27,710
question which is you still need an

1423
01:03:25,969 --> 01:03:30,589
invisible level collision mesh correct

1424
01:03:27,710 --> 01:03:31,400
and the answer that is of course yes you

1425
01:03:30,590 --> 01:03:33,740
know you don't necessarily need a

1426
01:03:31,400 --> 01:03:35,210
collision mesh but you need some way of

1427
01:03:33,739 --> 01:03:37,909
knowing where the character can and

1428
01:03:35,210 --> 01:03:39,619
can't walk because you no longer have

1429
01:03:37,909 --> 01:03:41,119
necessarily any level geometry because

1430
01:03:39,619 --> 01:03:43,639
you're just storing an image of what it

1431
01:03:41,119 --> 01:03:45,079
looked like you rendered it offline so

1432
01:03:43,639 --> 01:03:46,579
you need to store something that tells

1433
01:03:45,079 --> 01:03:49,400
you where you can go some kind of a walk

1434
01:03:46,579 --> 01:03:50,690
map of some kind and that could be level

1435
01:03:49,400 --> 01:03:52,190
Clinton geometry that could be a pre

1436
01:03:50,690 --> 01:03:55,760
computed set of polygons that you know

1437
01:03:52,190 --> 01:03:58,039
you walk around but you need you need

1438
01:03:55,760 --> 01:04:00,080
something as for how they implemented

1439
01:03:58,039 --> 01:04:02,750
real-time shadows I suspect they just

1440
01:04:00,079 --> 01:04:06,529
used a planar projection of the person's

1441
01:04:02,750 --> 01:04:08,059
geometry onto a plane that again was was

1442
01:04:06,530 --> 01:04:10,340
pre computed and sort of placed there

1443
01:04:08,059 --> 01:04:13,809
but I don't really know like I said I've

1444
01:04:10,340 --> 01:04:13,809
never really even played resident evil

1445
01:04:27,980 --> 01:04:33,119
what if you're constrained on space as

1446
01:04:30,869 --> 01:04:35,880
well as computing power could you

1447
01:04:33,119 --> 01:04:39,119
precompute parts of your graphics eg a

1448
01:04:35,880 --> 01:04:42,150
shape from multiple angles of 5 degrees

1449
01:04:39,119 --> 01:04:44,670
then do interpolation to get values that

1450
01:04:42,150 --> 01:04:47,519
lie in between eg a view of the shape at

1451
01:04:44,670 --> 01:04:49,950
seven degrees well if you are

1452
01:04:47,519 --> 01:04:52,679
constrained on space and computing power

1453
01:04:49,949 --> 01:04:55,619
then you're just you're I mean there's

1454
01:04:52,679 --> 01:04:59,819
not much you can do right pre computing

1455
01:04:55,619 --> 01:05:03,029
is is the act of trading space for

1456
01:04:59,820 --> 01:05:05,670
computing power or rather using space to

1457
01:05:03,030 --> 01:05:07,650
eliminate some of the need for computing

1458
01:05:05,670 --> 01:05:10,320
power so if you're constrained on both

1459
01:05:07,650 --> 01:05:12,809
of them it typically is not a win to

1460
01:05:10,320 --> 01:05:14,640
pre-compute things right because you

1461
01:05:12,809 --> 01:05:16,440
could if you're constrained on both you

1462
01:05:14,639 --> 01:05:20,119
don't have extra space that you can use

1463
01:05:16,440 --> 01:05:20,119
to store pre computed results

1464
01:05:34,889 --> 01:05:41,409
alright think we're all good so I'm

1465
01:05:40,210 --> 01:05:45,550
going to wrap it up I'm just going to

1466
01:05:41,409 --> 01:05:51,250
add a little a little sort of co2 here

1467
01:05:45,550 --> 01:05:53,320
or a little sort of note so partial

1468
01:05:51,250 --> 01:05:55,840
specialization like I said a really good

1469
01:05:53,320 --> 01:05:58,720
way to think about this and the

1470
01:05:55,840 --> 01:06:00,730
idealized way to think about this but

1471
01:05:58,719 --> 01:06:04,839
what I'll also say is obviously there's

1472
01:06:00,730 --> 01:06:06,099
always also this right because sometimes

1473
01:06:04,840 --> 01:06:08,440
when you're looking at this in fact

1474
01:06:06,099 --> 01:06:10,420
often you'll get to a point where you're

1475
01:06:08,440 --> 01:06:13,360
like well there's no way to actually

1476
01:06:10,420 --> 01:06:15,519
partially specialized this per se but I

1477
01:06:13,360 --> 01:06:19,690
could just approximate this term with

1478
01:06:15,519 --> 01:06:21,250
something else entirely right so plenty

1479
01:06:19,690 --> 01:06:24,369
of the things that you end up doing our

1480
01:06:21,250 --> 01:06:27,579
partial specialization yes on a better

1481
01:06:24,369 --> 01:06:29,529
on a good day but on other days you're

1482
01:06:27,579 --> 01:06:32,079
straight up replacing a term with

1483
01:06:29,530 --> 01:06:33,730
something not as good right because

1484
01:06:32,079 --> 01:06:35,110
sometimes you partially specialized and

1485
01:06:33,730 --> 01:06:36,429
you really are still computing the same

1486
01:06:35,110 --> 01:06:38,740
thing but you're just not allowing it to

1487
01:06:36,429 --> 01:06:40,750
vary at runtime and that's pretty good

1488
01:06:38,739 --> 01:06:42,639
you feel good about yourself doing that

1489
01:06:40,750 --> 01:06:43,960
yeah you lost some dynamism but you're

1490
01:06:42,639 --> 01:06:46,329
still producing the same equation and

1491
01:06:43,960 --> 01:06:48,099
that's pretty cool other times you can't

1492
01:06:46,329 --> 01:06:50,529
even do that and if you can't do that

1493
01:06:48,099 --> 01:06:56,049
hey you know what the story of 3d

1494
01:06:50,530 --> 01:06:57,820
graphics there's a lot of hacks so what

1495
01:06:56,050 --> 01:06:59,230
can you do so don't think of your don't

1496
01:06:57,820 --> 01:07:01,150
think of it as always happy to be

1497
01:06:59,230 --> 01:07:03,159
perfect partial specialization that's

1498
01:07:01,150 --> 01:07:04,869
not true a lot of times you do just have

1499
01:07:03,159 --> 01:07:07,029
to straight-up hack it and that's fine

1500
01:07:04,869 --> 01:07:08,259
too but partial specialization is still

1501
01:07:07,030 --> 01:07:10,870
a really good framework for thinking of

1502
01:07:08,260 --> 01:07:12,190
it in because even if you just allow

1503
01:07:10,869 --> 01:07:13,299
kind of a hack in there it's like a

1504
01:07:12,190 --> 01:07:14,409
great this wasn't really personalize

1505
01:07:13,300 --> 01:07:16,510
this was just like straight up replace

1506
01:07:14,409 --> 01:07:18,190
the term with a simpler term you know

1507
01:07:16,510 --> 01:07:20,050
what still a good way to think about it

1508
01:07:18,190 --> 01:07:21,909
right is to taking that start with the

1509
01:07:20,050 --> 01:07:24,070
real equation and know what you're

1510
01:07:21,909 --> 01:07:26,920
simplifying know what you're partially

1511
01:07:24,070 --> 01:07:28,390
specializing because that always tells

1512
01:07:26,920 --> 01:07:29,950
you where your room for provement is and

1513
01:07:28,389 --> 01:07:32,440
it also keeps you very close to a good

1514
01:07:29,949 --> 01:07:34,210
result and you know where you have cut

1515
01:07:32,440 --> 01:07:37,659
corners so there's no surprises and

1516
01:07:34,210 --> 01:07:41,369
that's kind of nice that's it for today

1517
01:07:37,659 --> 01:07:41,369
I'm going to wrap it up

1518
01:07:47,139 --> 01:07:51,469
thank you everyone for joining me from

1519
01:07:49,130 --> 01:07:53,059
those sort of handmade hero this is the

1520
01:07:51,469 --> 01:07:54,980
end of our chat streams we're going to

1521
01:07:53,059 --> 01:07:57,710
try coding again next week we'll see how

1522
01:07:54,980 --> 01:08:01,250
it goes no promises but I'll make an

1523
01:07:57,710 --> 01:08:04,159
attempt till then if you would like to

1524
01:08:01,250 --> 01:08:06,980
be kept up to date on the schedule this

1525
01:08:04,159 --> 01:08:09,199
is the place for it tweet bot right here

1526
01:08:06,980 --> 01:08:11,030
the tweet pot treats to schedule at you

1527
01:08:09,199 --> 01:08:14,059
you can see that luscious scheduler

1528
01:08:11,030 --> 01:08:15,470
right there and so there will be another

1529
01:08:14,059 --> 01:08:16,670
one popping up here this weekend that

1530
01:08:15,469 --> 01:08:19,670
tells you what schedules for next week

1531
01:08:16,670 --> 01:08:20,869
check it out subscribe to it or follow

1532
01:08:19,670 --> 01:08:23,180
it or whatever you have to do on twitter

1533
01:08:20,869 --> 01:08:24,829
to get notifications if you want to

1534
01:08:23,180 --> 01:08:26,060
catch the stream live and i hope you do

1535
01:08:24,829 --> 01:08:29,600
because it'd be nice to see you back

1536
01:08:26,060 --> 01:08:33,710
here next week for some for kodir work

1537
01:08:29,600 --> 01:08:37,220
until then have a good weekend of

1538
01:08:33,710 --> 01:08:40,539
programming and I will see you guys next

1539
01:08:37,220 --> 01:08:40,539
week taking these everyone

