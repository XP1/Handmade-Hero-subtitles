1
00:00:01,370 --> 00:00:05,730
hello everyone and welcome to hand made

2
00:00:04,200 --> 00:00:09,359
here oh sure we code a complete game

3
00:00:05,730 --> 00:00:11,759
live on stream I forgot to log into our

4
00:00:09,359 --> 00:00:14,428
github again but you know what we don't

5
00:00:11,759 --> 00:00:17,339
really need it right now anyway um so

6
00:00:14,429 --> 00:00:19,920
I'm gonna reset my clock here because

7
00:00:17,339 --> 00:00:21,448
it's 12:30 and I was so start at 12:15

8
00:00:19,920 --> 00:00:22,590
and I want to actually have all the time

9
00:00:21,449 --> 00:00:24,000
today because I'm not really sure what

10
00:00:22,589 --> 00:00:25,768
I'm gonna do but I suspect it's gonna be

11
00:00:24,000 --> 00:00:27,679
kind of digging into some rendering

12
00:00:25,768 --> 00:00:32,278
stuff and I want all the time I can get

13
00:00:27,679 --> 00:00:34,590
so this was gonna be day 546 let's go

14
00:00:32,279 --> 00:00:37,050
ahead and end this and then pretend

15
00:00:34,590 --> 00:00:42,300
we're starting a new session 12:30 here

16
00:00:37,049 --> 00:00:44,308
we go so what we did yesterday is we

17
00:00:42,299 --> 00:00:46,679
took advantage of the energy system

18
00:00:44,308 --> 00:00:51,000
changes that we made the other day to

19
00:00:46,679 --> 00:00:52,859
create some ground cover right in a way

20
00:00:51,000 --> 00:00:56,399
that doesn't really affect the rest of

21
00:00:52,859 --> 00:00:57,570
our system negatively which is nice but

22
00:00:56,399 --> 00:00:59,219
there's a lot of things that we need to

23
00:00:57,570 --> 00:01:02,250
do I mean all we did was splat it down

24
00:00:59,219 --> 00:01:04,290
there and so we're you know we're more

25
00:01:02,250 --> 00:01:07,590
or less accomplished what we wanted to

26
00:01:04,290 --> 00:01:09,118
accomplish but it helps bring up a bunch

27
00:01:07,590 --> 00:01:12,359
of the stuff that we now need to do to

28
00:01:09,118 --> 00:01:13,890
finish polishing up our system so just

29
00:01:12,359 --> 00:01:15,599
looking at the ground cover right now

30
00:01:13,890 --> 00:01:18,629
several things I want to mention first

31
00:01:15,599 --> 00:01:20,039
of all it's not lit and so lighting our

32
00:01:18,629 --> 00:01:21,989
sprites is a big thing that's been on

33
00:01:20,040 --> 00:01:23,609
our to-do list for a while

34
00:01:21,989 --> 00:01:24,899
you can see that this really pushes that

35
00:01:23,609 --> 00:01:27,118
issue because you get a complete

36
00:01:24,900 --> 00:01:29,579
mismatch the ground cover looks terrible

37
00:01:27,118 --> 00:01:31,739
against the background because they you

38
00:01:29,578 --> 00:01:34,169
know the underlying cube should be

39
00:01:31,739 --> 00:01:35,640
roughly the same color to sort of

40
00:01:34,170 --> 00:01:38,310
prevent you from seeing show through

41
00:01:35,640 --> 00:01:41,700
areas of the little like grass that's

42
00:01:38,310 --> 00:01:43,379
that's sort of popping up right but

43
00:01:41,700 --> 00:01:45,840
since we don't light it it's never going

44
00:01:43,379 --> 00:01:48,859
to because you never would know what it

45
00:01:45,840 --> 00:01:52,710
should be set to in terms of color and

46
00:01:48,859 --> 00:01:55,049
then similarly we also can see now and

47
00:01:52,709 --> 00:01:57,899
this is probably something that maybe

48
00:01:55,049 --> 00:02:00,360
only I can see because I do suspect that

49
00:01:57,899 --> 00:02:01,710
the video compression that happens when

50
00:02:00,359 --> 00:02:02,909
you're streaming or watching something

51
00:02:01,709 --> 00:02:06,118
on YouTube will prevent you from

52
00:02:02,909 --> 00:02:08,429
actually really seeing this but if you

53
00:02:06,118 --> 00:02:10,348
look at what's happening here when we

54
00:02:08,429 --> 00:02:13,489
zoom in you can see these are nice and

55
00:02:10,348 --> 00:02:16,399
detailed and smooth as we

56
00:02:13,489 --> 00:02:18,530
we're not using mipmapping and so what

57
00:02:16,400 --> 00:02:21,908
will happen is we get lots of little

58
00:02:18,530 --> 00:02:25,848
crispy sparkles and that's because again

59
00:02:21,908 --> 00:02:28,399
mipmapping when we actually do texture

60
00:02:25,848 --> 00:02:33,128
sampling in you know 3d graphics card

61
00:02:28,400 --> 00:02:35,688
the texture sampling is going to do a

62
00:02:33,128 --> 00:02:38,479
bilinear filter for us by default and

63
00:02:35,688 --> 00:02:39,739
the way we have it set up and what a by

64
00:02:38,479 --> 00:02:43,669
linear filter is going to do is get a

65
00:02:39,739 --> 00:02:47,750
sample to neighboring texels in the

66
00:02:43,669 --> 00:02:49,548
texture for both rows right so the

67
00:02:47,750 --> 00:02:51,259
bilinear is is to neighboring textures

68
00:02:49,549 --> 00:02:52,400
both rows it's gonna lurk those together

69
00:02:51,259 --> 00:02:54,289
and it's gonna loop the result together

70
00:02:52,400 --> 00:02:57,968
to get essentially like a box filter

71
00:02:54,289 --> 00:03:00,500
right essentially taking for texels and

72
00:02:57,968 --> 00:03:01,729
looping but doing the bilinear between

73
00:03:00,500 --> 00:03:04,789
them to figure out what the color should

74
00:03:01,729 --> 00:03:07,759
be what that means is that we will get

75
00:03:04,789 --> 00:03:09,918
reasonable filtering so long as we don't

76
00:03:07,759 --> 00:03:12,168
shrink our texture down by more than a

77
00:03:09,919 --> 00:03:14,389
factor of two but once we shrink it down

78
00:03:12,169 --> 00:03:16,760
by more than a factor of two we're

79
00:03:14,389 --> 00:03:20,810
effectively asking the graphics card to

80
00:03:16,759 --> 00:03:22,459
use for texels to approximate an area

81
00:03:20,810 --> 00:03:23,900
that's much larger than for texels

82
00:03:22,459 --> 00:03:27,139
because once we've shrunk down by say a

83
00:03:23,900 --> 00:03:30,109
power of four there's actually 16 texels

84
00:03:27,139 --> 00:03:31,969
right that are getting that should be

85
00:03:30,109 --> 00:03:33,919
represented in one pixels worth of

86
00:03:31,969 --> 00:03:35,930
screen space and we're not something

87
00:03:33,919 --> 00:03:38,150
that we're only picking you know sort of

88
00:03:35,930 --> 00:03:41,209
a subset and so that's where you get

89
00:03:38,150 --> 00:03:43,158
that kind of unsmooth look as we zoom

90
00:03:41,209 --> 00:03:44,329
out further we get that sort of

91
00:03:43,158 --> 00:03:46,128
crispness and again I don't know if you

92
00:03:44,329 --> 00:03:48,049
can see it but trust me the end user

93
00:03:46,128 --> 00:03:49,938
would see it on their action when it's

94
00:03:48,049 --> 00:03:52,040
actually being rendered and isn't

95
00:03:49,938 --> 00:03:55,039
getting decimated by say a video codec

96
00:03:52,039 --> 00:03:57,108
like look at this on twitch right and so

97
00:03:55,039 --> 00:03:59,239
there's you know first of all that's a

98
00:03:57,109 --> 00:04:01,180
video quality issue now granted right

99
00:03:59,239 --> 00:04:04,039
now we're running through MSAA

100
00:04:01,180 --> 00:04:05,150
probably a little unnecessarily I'm not

101
00:04:04,039 --> 00:04:07,158
sure we really want to be running

102
00:04:05,150 --> 00:04:09,319
through Emma stay as long as we actually

103
00:04:07,158 --> 00:04:11,269
are I think we might want to separate

104
00:04:09,318 --> 00:04:12,560
our pet to a 3d pass that goes to MCA

105
00:04:11,269 --> 00:04:17,870
and then the rest doesn't kind of a

106
00:04:12,560 --> 00:04:20,538
thing but again those are more for when

107
00:04:17,870 --> 00:04:22,218
we go to optimize the renderer the only

108
00:04:20,538 --> 00:04:26,329
reason I bring that up is that's one of

109
00:04:22,218 --> 00:04:28,848
the reasons this doesn't look as bad so

110
00:04:26,329 --> 00:04:31,098
right here you can kind of see maybe

111
00:04:28,848 --> 00:04:32,990
that's around the natural bitmap size

112
00:04:31,098 --> 00:04:35,718
hard to say exactly what it is but

113
00:04:32,990 --> 00:04:38,718
something like that maybe once I get out

114
00:04:35,718 --> 00:04:40,519
to 2x like about there I would expect

115
00:04:38,718 --> 00:04:43,370
those sparkles to start being pretty

116
00:04:40,519 --> 00:04:45,198
noticeable and they're not that bad part

117
00:04:43,370 --> 00:04:46,759
of the reason they're not that bad is

118
00:04:45,199 --> 00:04:49,340
because we're still running through MSAA

119
00:04:46,759 --> 00:04:51,560
and I don't know to what extent we're

120
00:04:49,339 --> 00:04:53,359
getting some benefit there because I

121
00:04:51,560 --> 00:04:56,718
think we have some kind of alpha 2

122
00:04:53,360 --> 00:04:58,968
coverage alpha 2 coverage stuff turned

123
00:04:56,718 --> 00:05:00,199
on I can't quite remember but it's been

124
00:04:58,968 --> 00:05:03,788
a long time since we've played around

125
00:05:00,199 --> 00:05:06,169
with the rendering stuff I think we're

126
00:05:03,788 --> 00:05:08,209
basically leaning on extra performance

127
00:05:06,168 --> 00:05:11,060
in the graphics card to fix the problem

128
00:05:08,209 --> 00:05:13,638
in terms of sparkles before it even you

129
00:05:11,060 --> 00:05:16,129
know so it's it's making it look not as

130
00:05:13,639 --> 00:05:18,590
bad as it should look and we're

131
00:05:16,129 --> 00:05:20,090
basically wasting GPU time for no reason

132
00:05:18,589 --> 00:05:21,918
to do that because in the future like I

133
00:05:20,089 --> 00:05:24,019
said I think we can optimize our render

134
00:05:21,918 --> 00:05:27,408
quite a quite a ways from where it is

135
00:05:24,019 --> 00:05:28,938
right now and that'd be one of the

136
00:05:27,408 --> 00:05:31,550
things we'd want to do and then I think

137
00:05:28,939 --> 00:05:34,699
this would look even worse in terms of

138
00:05:31,550 --> 00:05:36,110
those sparkles so there's that so we got

139
00:05:34,699 --> 00:05:40,009
the lighting we got the mipmapping and

140
00:05:36,110 --> 00:05:43,098
the mipmapping actually has other issues

141
00:05:40,009 --> 00:05:44,930
that may or may not play in here and I

142
00:05:43,098 --> 00:05:47,360
don't really know because we haven't

143
00:05:44,930 --> 00:05:49,579
really tried to analyze it at all but

144
00:05:47,360 --> 00:05:53,300
one of the things that also happens when

145
00:05:49,579 --> 00:05:54,740
you're not using mipmapping is if you

146
00:05:53,300 --> 00:05:56,240
don't supply MIT maps to the graphics

147
00:05:54,740 --> 00:05:58,579
card it means the grabbes card always

148
00:05:56,240 --> 00:06:00,710
has to sample from the most detailed

149
00:05:58,579 --> 00:06:02,568
version of the Texel texture because

150
00:06:00,709 --> 00:06:05,568
that's the only version it actually has

151
00:06:02,569 --> 00:06:08,810
what that means is that it will do a lot

152
00:06:05,569 --> 00:06:10,819
of scattered grabbing for bilinear from

153
00:06:08,810 --> 00:06:14,538
that texture which pulls in a lot more

154
00:06:10,819 --> 00:06:15,710
memory bandwidth wise through the

155
00:06:14,538 --> 00:06:17,750
graphics card as it's doing that

156
00:06:15,709 --> 00:06:20,989
sampling then was really warranted it

157
00:06:17,750 --> 00:06:23,418
didn't need all of that memory because

158
00:06:20,990 --> 00:06:25,908
it was really just trying to get a much

159
00:06:23,418 --> 00:06:27,620
smaller image worth of samples but since

160
00:06:25,908 --> 00:06:29,959
they're all spread out over this big

161
00:06:27,620 --> 00:06:32,959
texture it creates this sort of nasty

162
00:06:29,959 --> 00:06:34,728
memory bandwidth problem where you're

163
00:06:32,959 --> 00:06:36,978
forcing a lot more bandwidth through the

164
00:06:34,728 --> 00:06:38,658
card than you actually need it and so

165
00:06:36,978 --> 00:06:39,240
one of the other nice benefits of adding

166
00:06:38,658 --> 00:06:42,120
nib

167
00:06:39,240 --> 00:06:43,949
into the system is that if you provide

168
00:06:42,120 --> 00:06:45,750
bitmaps to the graphics card not only

169
00:06:43,949 --> 00:06:46,949
should it generally look better because

170
00:06:45,750 --> 00:06:50,639
it will be able to sample more

171
00:06:46,949 --> 00:06:52,560
accurately what's going on but it should

172
00:06:50,639 --> 00:06:54,660
also reduce the bus bandwidth on the

173
00:06:52,560 --> 00:06:58,319
actual graphics card because more of the

174
00:06:54,660 --> 00:07:01,500
actual data will get used because again

175
00:06:58,319 --> 00:07:04,889
it can pull in the whole MIT map and use

176
00:07:01,500 --> 00:07:07,649
all of it to do its rendering and that

177
00:07:04,889 --> 00:07:09,478
will be much smaller than pulling in

178
00:07:07,649 --> 00:07:11,399
like a whole chunk of a texture just a

179
00:07:09,478 --> 00:07:13,168
sample for pixels out of it then a whole

180
00:07:11,399 --> 00:07:15,538
nother chunk just a sample for textures

181
00:07:13,168 --> 00:07:17,908
out of texels out of it right and so

182
00:07:15,538 --> 00:07:21,240
you're used the number of texels that

183
00:07:17,908 --> 00:07:23,939
you end up using per sort of cached line

184
00:07:21,240 --> 00:07:27,750
that's pulled in across the the bus into

185
00:07:23,939 --> 00:07:32,158
the texturing it's into the shaders

186
00:07:27,750 --> 00:07:33,779
right that savings adds up typically and

187
00:07:32,158 --> 00:07:36,418
how much it would add up for us I don't

188
00:07:33,779 --> 00:07:39,059
know but point being that's another big

189
00:07:36,418 --> 00:07:40,978
reason why certainly depending on the

190
00:07:39,060 --> 00:07:43,079
system it always is dependent on the

191
00:07:40,978 --> 00:07:45,209
graphics card and you know how big the

192
00:07:43,079 --> 00:07:49,680
cache art is and how much textures

193
00:07:45,209 --> 00:07:52,560
you're using and all that stuff but it's

194
00:07:49,680 --> 00:07:56,218
usually I mean one thing I could say

195
00:07:52,560 --> 00:07:58,379
it's never better to have these giant

196
00:07:56,218 --> 00:08:01,500
textures sitting around if you're only

197
00:07:58,379 --> 00:08:03,779
actually rendering these little tiny

198
00:08:01,500 --> 00:08:05,158
pieces of them at the very least you

199
00:08:03,779 --> 00:08:08,369
could just send down just a tiny version

200
00:08:05,158 --> 00:08:11,098
right uh so I think we want to address

201
00:08:08,370 --> 00:08:14,879
that as well and that's just another

202
00:08:11,098 --> 00:08:16,259
again visual quality thing finally the

203
00:08:14,879 --> 00:08:18,810
last thing that we probably want to look

204
00:08:16,259 --> 00:08:20,639
at is a better distributor and that is

205
00:08:18,810 --> 00:08:22,918
to say that if you look in here you kind

206
00:08:20,639 --> 00:08:24,689
of just have random clumping this is

207
00:08:22,918 --> 00:08:26,490
what's called white noise it's the kind

208
00:08:24,689 --> 00:08:28,199
of noise that's actually I'm tropic the

209
00:08:26,490 --> 00:08:32,940
kind of noise you're looking for and say

210
00:08:28,199 --> 00:08:35,099
cryptography unpredictable and so that

211
00:08:32,940 --> 00:08:37,950
kind of noise in terms of scattering

212
00:08:35,099 --> 00:08:41,039
things around in a natural way that's

213
00:08:37,950 --> 00:08:43,349
the kind you would see in nature is not

214
00:08:41,038 --> 00:08:45,419
really appropriate typically things

215
00:08:43,349 --> 00:08:47,430
don't like to clump close together in

216
00:08:45,419 --> 00:08:49,319
nature they they compete for resource if

217
00:08:47,429 --> 00:08:51,389
they do that so I tend to spread out and

218
00:08:49,320 --> 00:08:51,960
so the kinds of patterns that we see in

219
00:08:51,389 --> 00:08:54,149
nature

220
00:08:51,960 --> 00:08:57,540
tend to be more like blue noise which is

221
00:08:54,149 --> 00:08:59,459
noise that is filtered to prevent two

222
00:08:57,539 --> 00:09:02,099
things from being too close together so

223
00:08:59,460 --> 00:09:04,110
it's still random but it has constraints

224
00:09:02,100 --> 00:09:05,340
on the randomness and I've talked about

225
00:09:04,110 --> 00:09:06,690
that before and that's obviously

226
00:09:05,340 --> 00:09:08,040
something that you would want to do here

227
00:09:06,690 --> 00:09:10,410
we want probably look into something

228
00:09:08,039 --> 00:09:12,179
like that and furthermore even if that

229
00:09:10,409 --> 00:09:15,269
wasn't sort of something that we would

230
00:09:12,179 --> 00:09:16,919
take a cue from in nature just in terms

231
00:09:15,269 --> 00:09:18,419
of rendering efficiency you can tell

232
00:09:16,919 --> 00:09:21,299
that that would be interesting to us

233
00:09:18,419 --> 00:09:23,370
because we're trying to cover the ground

234
00:09:21,299 --> 00:09:25,259
with a certain number of sprites we

235
00:09:23,370 --> 00:09:26,669
don't want to have to place an infinite

236
00:09:25,259 --> 00:09:28,860
number of sprites down here to try and

237
00:09:26,669 --> 00:09:33,240
get good coverage so spreading them out

238
00:09:28,860 --> 00:09:36,389
in sort of a natural so that no two are

239
00:09:33,240 --> 00:09:38,250
particularly close together is also just

240
00:09:36,389 --> 00:09:39,659
a good way in addition to sort of

241
00:09:38,250 --> 00:09:42,000
mimicking what nature would do for

242
00:09:39,659 --> 00:09:43,709
resource competition it's also just kind

243
00:09:42,000 --> 00:09:45,419
of a nice way to make sure that we get a

244
00:09:43,710 --> 00:09:48,090
good even coverage which is something we

245
00:09:45,419 --> 00:09:49,500
would want even if that wasn't a natural

246
00:09:48,090 --> 00:09:56,160
look we may just want to do it for

247
00:09:49,500 --> 00:09:58,740
rendering right all right so that's

248
00:09:56,159 --> 00:10:02,309
where we're at and I don't know how I

249
00:09:58,740 --> 00:10:04,950
want to attack this problem exactly but

250
00:10:02,309 --> 00:10:06,629
I think what I'd like to do is I'd like

251
00:10:04,950 --> 00:10:08,670
to just maybe open up a couple weeks

252
00:10:06,629 --> 00:10:10,320
here where we're just gonna start

253
00:10:08,669 --> 00:10:13,500
working on our rendering quality and

254
00:10:10,320 --> 00:10:15,900
we'll just do whatever we want to do so

255
00:10:13,500 --> 00:10:19,590
we're gonna just work forwards and start

256
00:10:15,899 --> 00:10:23,689
to pick things apart and try to get to a

257
00:10:19,590 --> 00:10:25,649
point where we feel a little bit more

258
00:10:23,690 --> 00:10:27,900
we're feeling like it's a little bit

259
00:10:25,649 --> 00:10:30,000
more towards the completed version of

260
00:10:27,899 --> 00:10:32,329
the game renderer which we're getting

261
00:10:30,000 --> 00:10:35,039
there so I would like to maybe make that

262
00:10:32,330 --> 00:10:40,290
that a push for that over the next few

263
00:10:35,039 --> 00:10:42,059
weeks as we go all right so I think the

264
00:10:40,289 --> 00:10:44,639
biggest thing I noticed right now that

265
00:10:42,059 --> 00:10:46,589
we can take take care of immediately is

266
00:10:44,639 --> 00:10:49,590
that the creepy crawlies that I'm seeing

267
00:10:46,590 --> 00:10:52,110
here with the MIT mapping I think today

268
00:10:49,590 --> 00:10:55,410
we should be able to unless we get into

269
00:10:52,110 --> 00:10:57,210
graphics sort of GPU hell if you will I

270
00:10:55,409 --> 00:10:58,709
think we should be able to do something

271
00:10:57,210 --> 00:11:00,030
about that so I'm gonna go ahead in

272
00:10:58,710 --> 00:11:02,370
there and try to just take care of that

273
00:11:00,029 --> 00:11:04,799
quickly and then I think we want to move

274
00:11:02,370 --> 00:11:04,990
on to getting some sort of working on

275
00:11:04,799 --> 00:11:05,919
the

276
00:11:04,990 --> 00:11:10,629
lighting which I think will take a

277
00:11:05,919 --> 00:11:12,879
longer period of time so how do we work

278
00:11:10,629 --> 00:11:15,338
with MIT maps and and what even are they

279
00:11:12,879 --> 00:11:17,679
let me give you a brief sort of overview

280
00:11:15,339 --> 00:11:19,660
we've talked about it briefly before

281
00:11:17,679 --> 00:11:22,989
I'll talk about it briefly again now

282
00:11:19,659 --> 00:11:24,819
it's not a particularly complex issue so

283
00:11:22,990 --> 00:11:27,580
hopefully it won't take too long

284
00:11:24,820 --> 00:11:28,778
to sort of give you the background but I

285
00:11:27,580 --> 00:11:30,430
just want to make sure everyone's on the

286
00:11:28,778 --> 00:11:36,129
same page of what's going on here

287
00:11:30,429 --> 00:11:39,250
all right so MIT Maps so MIT map is

288
00:11:36,129 --> 00:11:41,019
actually abbreviation you may have not

289
00:11:39,250 --> 00:11:42,129
have ever really heard about the term

290
00:11:41,019 --> 00:11:45,970
stands for but you probably heard the

291
00:11:42,129 --> 00:11:48,789
term nip is actually not it's not like

292
00:11:45,970 --> 00:11:51,399
there's a processor called MIPS right

293
00:11:48,789 --> 00:11:54,879
it's not the same these are different

294
00:11:51,399 --> 00:11:59,230
acronyms the MIT in MIT Maps actually

295
00:11:54,879 --> 00:12:05,919
stands for multum in parvo I believe

296
00:11:59,230 --> 00:12:07,720
right which is Latin for many in place I

297
00:12:05,919 --> 00:12:09,669
believe that's what it actually stands

298
00:12:07,720 --> 00:12:12,339
for but I don't speak Latin nor was I

299
00:12:09,669 --> 00:12:16,269
around when they invented MIT Maps so

300
00:12:12,339 --> 00:12:18,160
who knows but that is an accurate way to

301
00:12:16,269 --> 00:12:20,559
describe them multum in parvo many in

302
00:12:18,159 --> 00:12:23,949
one place that does actually tell you

303
00:12:20,559 --> 00:12:26,739
what a MIT map is what a MIT map is is

304
00:12:23,950 --> 00:12:29,350
storing more than one version of the

305
00:12:26,740 --> 00:12:32,528
same texture map so that you can do

306
00:12:29,350 --> 00:12:33,970
sampling on it more easily now the kind

307
00:12:32,528 --> 00:12:37,059
of MIT mapping that we have in modern

308
00:12:33,970 --> 00:12:40,120
GPUs is what would typically be called

309
00:12:37,059 --> 00:12:43,719
pyramidal I'm not going to spell that

310
00:12:40,120 --> 00:12:45,159
right I don't know it's called pyramidal

311
00:12:43,720 --> 00:12:47,470
MIT mapping and what that basically

312
00:12:45,159 --> 00:12:51,549
means is we're going to build what

313
00:12:47,470 --> 00:12:55,149
amounts to a pyramid of textures and

314
00:12:51,549 --> 00:12:58,750
each layer of the pyramid is used for

315
00:12:55,149 --> 00:13:02,110
sampling at a different distance so what

316
00:12:58,750 --> 00:13:06,100
is a MIT map well we all know what a

317
00:13:02,110 --> 00:13:08,919
texture is right and a texture is just a

318
00:13:06,100 --> 00:13:14,379
bitmap in memory and maybe that bitmap

319
00:13:08,919 --> 00:13:18,740
is like 256 by 256 right you may ask why

320
00:13:14,379 --> 00:13:21,820
are they square right and actually

321
00:13:18,740 --> 00:13:25,720
is one of the reasons they are square

322
00:13:21,820 --> 00:13:29,900
basically wrapping like UV computation

323
00:13:25,720 --> 00:13:32,149
with wrapping clamping mirroring and and

324
00:13:29,899 --> 00:13:33,529
MIT maps are two reasons you want your

325
00:13:32,149 --> 00:13:35,299
textures to be square in terms of

326
00:13:33,529 --> 00:13:36,529
implementation if you've seen a GPU but

327
00:13:35,299 --> 00:13:38,000
that's sort of neither here nor there

328
00:13:36,529 --> 00:13:40,189
where you don't care about that part of

329
00:13:38,000 --> 00:13:44,090
MIT Maps right now we actually just care

330
00:13:40,190 --> 00:13:47,120
about quality so a texture is some

331
00:13:44,090 --> 00:13:48,649
bitmap it's 256 by 256 in this case I'm

332
00:13:47,120 --> 00:13:51,019
just making up a number but it's some

333
00:13:48,649 --> 00:13:52,909
dimension typically a power of two also

334
00:13:51,019 --> 00:13:57,279
related to MIT maps typically square

335
00:13:52,909 --> 00:14:01,819
also related to MIT maps right okay so

336
00:13:57,279 --> 00:14:05,059
what happens well when we sample this

337
00:14:01,820 --> 00:14:09,460
texture like I said we are fundamentally

338
00:14:05,059 --> 00:14:14,449
asking the question on the screen right

339
00:14:09,460 --> 00:14:18,920
we have some pixels and these pixels are

340
00:14:14,450 --> 00:14:21,770
in a grid at any particular location for

341
00:14:18,919 --> 00:14:24,769
one of these pixels right I'm gonna be

342
00:14:21,769 --> 00:14:27,139
asking with my texture map as I try to

343
00:14:24,769 --> 00:14:29,779
draw shapes that have the texture map

344
00:14:27,139 --> 00:14:32,539
map on to them I'm gonna be asking what

345
00:14:29,779 --> 00:14:35,179
color would the texture have been here

346
00:14:32,539 --> 00:14:37,819
right if it was actually taken and

347
00:14:35,179 --> 00:14:39,949
putting out there in the 3d world and I

348
00:14:37,820 --> 00:14:43,460
was looking at it right what would it be

349
00:14:39,950 --> 00:14:45,890
and answer that question as we know we

350
00:14:43,460 --> 00:14:49,280
take what's called a bilinear sample

351
00:14:45,889 --> 00:14:51,350
right which is we take where this would

352
00:14:49,279 --> 00:14:52,909
actually be if this thing was here we

353
00:14:51,350 --> 00:14:56,480
find out where that would be in the

354
00:14:52,909 --> 00:14:59,389
texture right we look at the for texels

355
00:14:56,480 --> 00:15:02,240
that are a right in that area right

356
00:14:59,389 --> 00:15:04,850
because remember the point in 3d space

357
00:15:02,240 --> 00:15:07,310
is not going to correspond exactly to a

358
00:15:04,850 --> 00:15:08,960
Texel it's gonna be in between texels

359
00:15:07,309 --> 00:15:11,479
somewhere because this is a full 3d

360
00:15:08,960 --> 00:15:13,280
transform full floating-point who knows

361
00:15:11,480 --> 00:15:15,409
what's going on there right so we're

362
00:15:13,279 --> 00:15:18,439
gonna be somewhere in this texture right

363
00:15:15,409 --> 00:15:20,539
and what we're gonna see is we're gonna

364
00:15:18,440 --> 00:15:22,550
take the four texels that are

365
00:15:20,539 --> 00:15:23,990
surrounding that sample and we're gonna

366
00:15:22,549 --> 00:15:25,819
blend them together to get the result

367
00:15:23,990 --> 00:15:27,680
right and that's called bilinear

368
00:15:25,820 --> 00:15:29,030
filtering and we all know all about that

369
00:15:27,679 --> 00:15:30,469
if you don't know what I'm talking about

370
00:15:29,029 --> 00:15:31,439
you haven't been watching handmade Hiro

371
00:15:30,470 --> 00:15:33,060
so go back

372
00:15:31,440 --> 00:15:35,730
use the episode guide to search for

373
00:15:33,059 --> 00:15:38,369
bilinear and i will teach you all about

374
00:15:35,730 --> 00:15:44,449
it a past me will teach you all about it

375
00:15:38,370 --> 00:15:47,610
man and that's as far as we got but

376
00:15:44,448 --> 00:15:50,490
here's the problem look at what's

377
00:15:47,610 --> 00:15:52,680
actually happening here when I take this

378
00:15:50,490 --> 00:15:54,600
texture and I try to place it somewhere

379
00:15:52,679 --> 00:15:55,948
out in a 3d world and render it to a

380
00:15:54,600 --> 00:15:59,610
screen with the projection

381
00:15:55,948 --> 00:16:03,508
well the pixel is actually occupying a

382
00:15:59,610 --> 00:16:05,370
whole area that maps to some kind of a

383
00:16:03,509 --> 00:16:09,060
quadrilateral here in texture space

384
00:16:05,370 --> 00:16:11,818
right and depending on how small like

385
00:16:09,059 --> 00:16:14,969
let's say this was actually the whole

386
00:16:11,818 --> 00:16:16,799
texture right getting mapped to this

387
00:16:14,970 --> 00:16:21,120
shape on the screen

388
00:16:16,799 --> 00:16:25,019
well this diamond area here as it gets

389
00:16:21,120 --> 00:16:28,889
transformed back is like this or

390
00:16:25,019 --> 00:16:31,230
something right and if this was two DS

391
00:16:28,889 --> 00:16:32,909
five to six there's tons of texels in

392
00:16:31,230 --> 00:16:36,000
here look at how many texels would be

393
00:16:32,909 --> 00:16:38,338
inside this diamond right I mean this

394
00:16:36,000 --> 00:16:41,159
diamond is almost a quarter of the

395
00:16:38,339 --> 00:16:46,110
texture right it's it's almost like 128

396
00:16:41,159 --> 00:16:48,028
528 diamond right and so if this is a

397
00:16:46,110 --> 00:16:51,028
particularly detailed texture with lots

398
00:16:48,028 --> 00:16:53,669
of complexity in it sampling for texels

399
00:16:51,028 --> 00:16:56,068
isn't gonna tell me jack squat right

400
00:16:53,669 --> 00:16:58,889
I mean if I've got like you know some

401
00:16:56,068 --> 00:17:01,049
Reds over here in a green area that

402
00:16:58,889 --> 00:17:02,370
comes in here and some checkerboarding

403
00:17:01,049 --> 00:17:06,779
in here I mean who knows what it is

404
00:17:02,370 --> 00:17:08,818
right I gotta pick a single color to

405
00:17:06,779 --> 00:17:11,338
represent all those I can't figure it

406
00:17:08,818 --> 00:17:13,949
out just from four texels depending on

407
00:17:11,338 --> 00:17:17,818
which four texels I randomly ended up

408
00:17:13,949 --> 00:17:21,240
closest to in this one centroid sample I

409
00:17:17,818 --> 00:17:23,609
happen to pick right is gonna give me a

410
00:17:21,240 --> 00:17:26,400
wildly different result so here's where

411
00:17:23,609 --> 00:17:30,089
that Sparkle I always call it Chris

412
00:17:26,400 --> 00:17:32,460
penis right you've heard me say this you

413
00:17:30,089 --> 00:17:36,089
know what that's some bad spelling crisp

414
00:17:32,460 --> 00:17:38,308
beingness right so this is where that

415
00:17:36,089 --> 00:17:42,199
sparkling Christmas comes from as this

416
00:17:38,308 --> 00:17:45,210
slides slowly across the screen this

417
00:17:42,200 --> 00:17:47,610
location that's picking four pixels

418
00:17:45,210 --> 00:17:50,130
is gonna jump like if I move this only a

419
00:17:47,609 --> 00:17:52,379
little bit like I move this 1/2 pixel to

420
00:17:50,130 --> 00:17:55,049
the side this thing's gonna jump all the

421
00:17:52,380 --> 00:17:57,720
way over here right and it might pick a

422
00:17:55,048 --> 00:18:00,240
totally different set of four colors to

423
00:17:57,720 --> 00:18:06,120
sample from and I get that sparkle right

424
00:18:00,240 --> 00:18:08,009
I get that sparkle so the key thing to

425
00:18:06,119 --> 00:18:12,719
understand what we're trying to do here

426
00:18:08,009 --> 00:18:15,839
is say how do we get four pixels of four

427
00:18:12,720 --> 00:18:17,940
Texel sample to give us back a more

428
00:18:15,839 --> 00:18:21,389
representative result of what the

429
00:18:17,940 --> 00:18:24,360
texture looks like in that area and that

430
00:18:21,390 --> 00:18:30,179
is where MIT maps save the day what we

431
00:18:24,359 --> 00:18:33,658
do is we say let's pre-filter our

432
00:18:30,179 --> 00:18:36,090
texture map and store the results of

433
00:18:33,659 --> 00:18:38,700
having it scaled down a bunch of times

434
00:18:36,089 --> 00:18:43,678
so instead of just storing our 256 by

435
00:18:38,700 --> 00:18:51,538
256 we will then do a 128 by 128 and a

436
00:18:43,679 --> 00:18:57,899
64 by 64 a 32 by 32 a 16 by 16 an 8 by 8

437
00:18:51,538 --> 00:18:59,849
a 4 by 4 a 2 by 2 and a 1 by 1 right and

438
00:18:57,898 --> 00:19:02,579
you can see exactly what I'm doing here

439
00:18:59,849 --> 00:19:04,139
I had a two to the seventh right I mean

440
00:19:02,579 --> 00:19:06,480
when I started with 2 to the 8th I have

441
00:19:04,140 --> 00:19:09,538
a two to the seventh to the sixth to the

442
00:19:06,480 --> 00:19:12,808
fifth to the fourth to the third to the

443
00:19:09,538 --> 00:19:21,329
second to the first two to the zero this

444
00:19:12,808 --> 00:19:27,418
as you can see forms a map pyramid right

445
00:19:21,329 --> 00:19:29,548
it's basically a perimeter arrangement

446
00:19:27,419 --> 00:19:31,830
where I have a one by one that's just

447
00:19:29,548 --> 00:19:34,230
the average color of everything a 2 by 2

448
00:19:31,829 --> 00:19:36,778
which is basically like what the colors

449
00:19:34,230 --> 00:19:39,569
were in each quadrant right a 4 by 4

450
00:19:36,778 --> 00:19:42,778
which is a 16 version of that right and

451
00:19:39,569 --> 00:19:45,769
so on and so forth what this allows me

452
00:19:42,778 --> 00:19:49,140
to do is this allows me to say all right

453
00:19:45,769 --> 00:19:51,929
when I'm in a sample an area before I

454
00:19:49,140 --> 00:19:55,788
actually go look up what the 4 texels

455
00:19:51,929 --> 00:19:58,830
are I'm going to use the derivative in

456
00:19:55,788 --> 00:20:01,349
screen space of the UV chord

457
00:19:58,829 --> 00:20:03,000
of this of this shape right because

458
00:20:01,349 --> 00:20:04,259
remember the it's the UV coordinates to

459
00:20:03,000 --> 00:20:05,759
tell me where to look in this thing

460
00:20:04,259 --> 00:20:08,398
remember UV coordinates right well

461
00:20:05,759 --> 00:20:10,619
actually they go like that

462
00:20:08,398 --> 00:20:13,678
remember UV coordinates right they're

463
00:20:10,619 --> 00:20:15,928
telling me that's how I map textures

464
00:20:13,679 --> 00:20:17,850
onto a mesh I'm basically saying pinning

465
00:20:15,929 --> 00:20:19,919
down where it all is and I interpolate

466
00:20:17,849 --> 00:20:21,148
between them right again look us up a

467
00:20:19,919 --> 00:20:24,299
past handmade here I don't want to go

468
00:20:21,148 --> 00:20:26,609
through UV mapping again well if I

469
00:20:24,298 --> 00:20:31,230
simply look at the rate of change from

470
00:20:26,609 --> 00:20:35,939
pixel to pixel right the D you like D

471
00:20:31,230 --> 00:20:37,230
screen X and the DVD screen Y I don't

472
00:20:35,940 --> 00:20:40,139
know how you want to think about that

473
00:20:37,230 --> 00:20:42,659
but basically like as I step from here

474
00:20:40,138 --> 00:20:45,509
to here and from here to here right as I

475
00:20:42,659 --> 00:20:48,960
go pixel to pixel how much is my you

476
00:20:45,509 --> 00:20:53,158
changing how much is my V changing those

477
00:20:48,960 --> 00:20:57,538
rates of change can tell me how large

478
00:20:53,159 --> 00:21:00,210
the texture actually is appearing on the

479
00:20:57,538 --> 00:21:03,298
screen if those rates are very very low

480
00:21:00,210 --> 00:21:05,970
I know that I am that the texture is

481
00:21:03,298 --> 00:21:07,558
very large on the screen if those rates

482
00:21:05,970 --> 00:21:11,100
are very high then the texture is very

483
00:21:07,558 --> 00:21:14,548
small on the screen right so by

484
00:21:11,099 --> 00:21:16,859
comparing these rates of change to the

485
00:21:14,548 --> 00:21:19,138
rates up to the size of the texture

486
00:21:16,859 --> 00:21:20,699
right and we can talk about that a

487
00:21:19,138 --> 00:21:22,528
little bit more in a subsequent stream

488
00:21:20,700 --> 00:21:25,500
it's not really super relevant to us how

489
00:21:22,528 --> 00:21:27,808
the GPU is doing this because we're not

490
00:21:25,500 --> 00:21:29,880
actually implementing that equation

491
00:21:27,808 --> 00:21:31,500
ourselves but someday if we do a

492
00:21:29,880 --> 00:21:34,549
software version of the renderer we want

493
00:21:31,500 --> 00:21:36,960
to implement mipmapping in that renderer

494
00:21:34,548 --> 00:21:41,308
this is what we would have to figure out

495
00:21:36,960 --> 00:21:44,250
right the Texel change basically versus

496
00:21:41,308 --> 00:21:45,658
the the screen you know how many texels

497
00:21:44,250 --> 00:21:49,109
do you move if you move one unit in

498
00:21:45,659 --> 00:21:51,929
screen space okay so what we would like

499
00:21:49,109 --> 00:21:55,288
is we would like to make it so that when

500
00:21:51,929 --> 00:21:57,360
we are sampling four pixels we actually

501
00:21:55,288 --> 00:21:59,339
sample four pixels that cover the entire

502
00:21:57,359 --> 00:22:02,129
area this thing would have mapped to and

503
00:21:59,339 --> 00:22:05,220
lo and behold if we went down to like

504
00:22:02,130 --> 00:22:06,778
about the 32 by 32 or maybe actually all

505
00:22:05,220 --> 00:22:08,548
the way down maybe even to like the 4 by

506
00:22:06,778 --> 00:22:11,490
4 ad it's hard to say that's almost a

507
00:22:08,548 --> 00:22:12,690
quadrant right if we went down to the 4

508
00:22:11,490 --> 00:22:15,000
by 4 that's exactly

509
00:22:12,690 --> 00:22:17,730
what we would get right we'd be able to

510
00:22:15,000 --> 00:22:19,380
sample just that region with four

511
00:22:17,730 --> 00:22:22,860
samples we'd get all the colors averaged

512
00:22:19,380 --> 00:22:25,170
together right so what we do is inside

513
00:22:22,859 --> 00:22:27,179
the GPU it sort of straps on a little

514
00:22:25,170 --> 00:22:28,710
piece that goes wait a minute instead of

515
00:22:27,180 --> 00:22:30,900
just reflexively looking into this

516
00:22:28,710 --> 00:22:33,299
texture let's actually go to a little

517
00:22:30,900 --> 00:22:35,690
piece of logic here that says go to the

518
00:22:33,299 --> 00:22:39,359
texture that would be most appropriate

519
00:22:35,690 --> 00:22:45,740
for these gradients right for these

520
00:22:39,359 --> 00:22:48,750
changes okay and that filtering process

521
00:22:45,740 --> 00:22:52,259
basically allows us to leverage the fact

522
00:22:48,750 --> 00:22:54,930
that we have pre applied condensation to

523
00:22:52,259 --> 00:22:56,430
each of these texture regions to

524
00:22:54,930 --> 00:22:59,490
collapse them into smaller and smaller

525
00:22:56,430 --> 00:23:02,519
pre filtered versions because otherwise

526
00:22:59,490 --> 00:23:06,120
the only other answer we could have is

527
00:23:02,519 --> 00:23:08,279
to actually sum up what's the entire

528
00:23:06,119 --> 00:23:09,750
contents of this giant region that's way

529
00:23:08,279 --> 00:23:13,019
too much work for the GPU to do for

530
00:23:09,750 --> 00:23:15,299
every textile fetch right summing up

531
00:23:13,019 --> 00:23:17,879
thousands of pixels potentially all

532
00:23:15,299 --> 00:23:19,379
right so this is a great solution to

533
00:23:17,880 --> 00:23:21,180
this problem especially for us which

534
00:23:19,380 --> 00:23:23,280
we're doing sprite rendering let me just

535
00:23:21,180 --> 00:23:27,240
mention briefly the concept of

536
00:23:23,279 --> 00:23:30,000
anisotropic filtering you may have heard

537
00:23:27,240 --> 00:23:31,769
this before anisotropic filtering is an

538
00:23:30,000 --> 00:23:33,690
extension of this and it solves a

539
00:23:31,769 --> 00:23:35,910
problem that we don't have really I

540
00:23:33,690 --> 00:23:39,360
don't think we're gonna have much of

541
00:23:35,910 --> 00:23:42,150
well our walls could have it our cubes

542
00:23:39,359 --> 00:23:43,829
could actually have it but so let me

543
00:23:42,150 --> 00:23:45,540
just mention what it is and so it's

544
00:23:43,829 --> 00:23:48,359
you're aware of it and how it relates to

545
00:23:45,539 --> 00:23:54,000
this so one of the things you'll notice

546
00:23:48,359 --> 00:23:55,439
here is if the if I take my screen grid

547
00:23:54,000 --> 00:23:57,089
like I was saying before and I'm saying

548
00:23:55,440 --> 00:24:00,390
this is you know try a set by pixel here

549
00:23:57,089 --> 00:24:02,909
well what I just said all of this works

550
00:24:00,390 --> 00:24:05,910
very well if the texture is relatively

551
00:24:02,910 --> 00:24:08,370
head on to the screen but what happens

552
00:24:05,910 --> 00:24:13,500
if it's very oblique to the screen and

553
00:24:08,369 --> 00:24:15,569
only on one axis let's say right so you

554
00:24:13,500 --> 00:24:18,059
know what if I had something where I had

555
00:24:15,569 --> 00:24:19,439
my texture was like getting mapped on a

556
00:24:18,059 --> 00:24:21,960
setting that looked like this was lot

557
00:24:19,440 --> 00:24:24,360
laying down and so when I look at where

558
00:24:21,960 --> 00:24:26,400
this thing maps into my texture space

559
00:24:24,359 --> 00:24:29,789
right if this is the

560
00:24:26,400 --> 00:24:31,320
upper corner here if I look at where

561
00:24:29,789 --> 00:24:32,909
this maps in my texture space you can

562
00:24:31,319 --> 00:24:35,519
see that towards the top of the texture

563
00:24:32,910 --> 00:24:38,370
I'm basically using almost the entire

564
00:24:35,519 --> 00:24:40,829
thing right but towards the bottom of my

565
00:24:38,369 --> 00:24:43,679
texture I'm using all like very little

566
00:24:40,829 --> 00:24:45,929
like I'm using less than less than half

567
00:24:43,680 --> 00:24:48,810
even right so by the time it gets down

568
00:24:45,930 --> 00:24:51,600
to here I may be looking it like that

569
00:24:48,809 --> 00:24:54,179
much right well what you can see is

570
00:24:51,599 --> 00:24:57,480
happening is I'm producing a trapezoid

571
00:24:54,180 --> 00:24:59,910
right in my texture space and the

572
00:24:57,480 --> 00:25:03,089
problem with a trapezoid is you can see

573
00:24:59,910 --> 00:25:04,680
it very visually the number of the MIT

574
00:25:03,089 --> 00:25:07,919
map that I would want a sample to

575
00:25:04,680 --> 00:25:10,130
compute this line is like the lowest one

576
00:25:07,920 --> 00:25:13,289
or close to it it'd be like the 2x2

577
00:25:10,130 --> 00:25:15,300
probably right to sample that one

578
00:25:13,289 --> 00:25:17,399
because I'm you know it's I want some

579
00:25:15,299 --> 00:25:20,190
looks like that because I gotta take you

580
00:25:17,400 --> 00:25:23,100
know I have one texel I'm trying to

581
00:25:20,190 --> 00:25:24,420
sample this this entire thing right this

582
00:25:23,099 --> 00:25:26,609
one on the other hand maybe wants to

583
00:25:24,420 --> 00:25:29,039
come from the 4x4 of the 8x8 right and

584
00:25:26,609 --> 00:25:32,490
so the problem you have here is like a

585
00:25:29,039 --> 00:25:34,680
mismatch a single pixel wants to sum

586
00:25:32,490 --> 00:25:36,539
something that doesn't actually exist in

587
00:25:34,680 --> 00:25:38,070
the pre filtered version because our pre

588
00:25:36,539 --> 00:25:40,170
filtered version just assumes that

589
00:25:38,069 --> 00:25:42,329
everything's like head on and we're sup

590
00:25:40,170 --> 00:25:44,340
we're subsampling everything with that

591
00:25:42,329 --> 00:25:46,339
you know rectangular filter downward

592
00:25:44,339 --> 00:25:48,089
assuming that we always collapse

593
00:25:46,339 --> 00:25:51,240
uniformly right

594
00:25:48,089 --> 00:25:53,789
and so what anisotropic filtering will

595
00:25:51,240 --> 00:25:56,549
try to do it's a more advanced feature

596
00:25:53,789 --> 00:26:01,289
of the GPU it will sample from a few

597
00:25:56,549 --> 00:26:02,700
different MIT Maps right and really you

598
00:26:01,289 --> 00:26:03,990
can implement your onus of traffic

599
00:26:02,700 --> 00:26:06,569
filtering in a shade or two because you

600
00:26:03,990 --> 00:26:08,579
have control over these now you might

601
00:26:06,569 --> 00:26:12,029
want to do something crazy where you say

602
00:26:08,579 --> 00:26:14,639
oh okay so I see that I mapped to this

603
00:26:12,029 --> 00:26:17,789
trapezoid so I'm gonna sample like some

604
00:26:14,640 --> 00:26:19,530
points like in here and these are gonna

605
00:26:17,789 --> 00:26:21,509
come from different MIT Maps than these

606
00:26:19,529 --> 00:26:23,190
and I'm gonna take one the center right

607
00:26:21,509 --> 00:26:25,140
there's all these different ways you

608
00:26:23,190 --> 00:26:27,480
might imagine trying to sample your MIT

609
00:26:25,140 --> 00:26:29,400
maps to try to approximate what the

610
00:26:27,480 --> 00:26:31,680
answer would have been if you had

611
00:26:29,400 --> 00:26:33,570
pre-filtered your texture in a

612
00:26:31,680 --> 00:26:36,720
trapezoidal fashion for being laid down

613
00:26:33,569 --> 00:26:39,669
in this sort of head on the like very

614
00:26:36,720 --> 00:26:41,839
oblique fashion right

615
00:26:39,670 --> 00:26:43,490
but you can see what that's really hard

616
00:26:41,839 --> 00:26:46,549
because once you start to talk about

617
00:26:43,490 --> 00:26:48,920
arbitrary angles these these pre-filters

618
00:26:46,549 --> 00:26:50,539
I mean I call it pre-filter for a reason

619
00:26:48,920 --> 00:26:53,920
what you're doing is you're applying a

620
00:26:50,539 --> 00:26:56,480
more expensive filter right sort of

621
00:26:53,920 --> 00:26:57,890
beforehand and caching the results I

622
00:26:56,480 --> 00:27:00,230
mean that's what this is right this is

623
00:26:57,890 --> 00:27:02,750
an exercise in caching it's saying let's

624
00:27:00,230 --> 00:27:04,880
use a little bit of memory to store the

625
00:27:02,750 --> 00:27:06,650
results of doing much more heavy weight

626
00:27:04,880 --> 00:27:08,630
filtering than we could afford to do at

627
00:27:06,650 --> 00:27:12,259
run time for every for every single

628
00:27:08,630 --> 00:27:14,810
fetch right and so what happens is that

629
00:27:12,259 --> 00:27:17,390
pre-filter has to make an assumption

630
00:27:14,809 --> 00:27:20,149
about how you need the filtering to work

631
00:27:17,390 --> 00:27:22,580
if we didn't have to do that we could

632
00:27:20,150 --> 00:27:24,440
just always filter exactly correctly but

633
00:27:22,579 --> 00:27:27,319
again too expensive takes too many

634
00:27:24,440 --> 00:27:30,430
samples so you have to make a guess here

635
00:27:27,319 --> 00:27:33,589
and this is as good a guess as any right

636
00:27:30,430 --> 00:27:35,630
just decimate by two each time store the

637
00:27:33,589 --> 00:27:38,029
results and hope that that's gonna work

638
00:27:35,630 --> 00:27:41,120
but you're gonna get cases where it's

639
00:27:38,029 --> 00:27:43,099
not very correct and so what anisotropic

640
00:27:41,119 --> 00:27:45,829
filtering and other sampling schemes

641
00:27:43,099 --> 00:27:48,009
that try to like pick from it maps in an

642
00:27:45,829 --> 00:27:50,089
intelligent way based on the trapezoidal

643
00:27:48,009 --> 00:27:51,319
well you know it doesn't really have to

644
00:27:50,089 --> 00:27:54,049
be a trapezoid either it could be

645
00:27:51,319 --> 00:27:58,210
something else right because I because

646
00:27:54,049 --> 00:27:58,210
you could get it's a quadrilateral right

647
00:27:59,140 --> 00:28:04,580
you know I'm saying so that

648
00:28:02,029 --> 00:28:06,170
quadrilateral in texture space informs

649
00:28:04,579 --> 00:28:07,609
how you might want to take your sampling

650
00:28:06,170 --> 00:28:09,560
and go

651
00:28:07,609 --> 00:28:10,699
now when I say quadrilateral it's it's

652
00:28:09,559 --> 00:28:13,720
really not a quadrilateral because

653
00:28:10,700 --> 00:28:20,470
you're usually sample sampling

654
00:28:13,720 --> 00:28:20,470
potentially multiple points like you

655
00:28:21,369 --> 00:28:26,209
sampling theory is its own thing when I

656
00:28:23,990 --> 00:28:27,890
put you that way so I don't want to like

657
00:28:26,210 --> 00:28:29,420
browbeat you into thinking it's got to

658
00:28:27,890 --> 00:28:31,190
be a quadrilateral because I pixel is a

659
00:28:29,420 --> 00:28:33,830
square you could think of a pixel as a

660
00:28:31,190 --> 00:28:35,210
circle for filtering purposes as well in

661
00:28:33,829 --> 00:28:38,449
which case it would be some kind of an

662
00:28:35,210 --> 00:28:41,660
oblong like an eccentric circle right I

663
00:28:38,450 --> 00:28:45,309
so I'm not really a sampling guy and I

664
00:28:41,660 --> 00:28:47,480
don't want to impose any sort of

665
00:28:45,309 --> 00:28:50,539
preconceived notions on that so I'm

666
00:28:47,480 --> 00:28:52,880
simply gonna say it's a shape right what

667
00:28:50,539 --> 00:28:54,769
you are trying to do here is map

668
00:28:52,880 --> 00:28:57,260
shape of a pixel into the texture and

669
00:28:54,769 --> 00:28:59,809
sample that shape in a way that sums

670
00:28:57,259 --> 00:29:02,509
what's inside it in a in a good way for

671
00:28:59,809 --> 00:29:04,940
producing nice pleasing visual results

672
00:29:02,509 --> 00:29:06,589
there's a lot more theory in there and

673
00:29:04,940 --> 00:29:09,070
I'm not an expert on it so I don't want

674
00:29:06,589 --> 00:29:12,379
to say things like quadrilateral or

675
00:29:09,069 --> 00:29:14,480
ellipse or whatever and act like I'm

676
00:29:12,380 --> 00:29:16,790
saying that that's the only one cuz it's

677
00:29:14,480 --> 00:29:19,759
not right you can have arguments about

678
00:29:16,789 --> 00:29:21,470
what pixels you know are pixels little

679
00:29:19,759 --> 00:29:23,420
squares or aren't they and these sorts

680
00:29:21,470 --> 00:29:25,430
of things and those are things that are

681
00:29:23,420 --> 00:29:26,960
not really the kind of stuff that I tend

682
00:29:25,430 --> 00:29:28,460
to work on so I don't have strong

683
00:29:26,960 --> 00:29:31,519
opinions about them and I don't want to

684
00:29:28,460 --> 00:29:33,559
make it sound like I do alright so but

685
00:29:31,519 --> 00:29:36,200
anyway no matter what you think of as

686
00:29:33,559 --> 00:29:38,179
the mapping there your mapping something

687
00:29:36,200 --> 00:29:39,860
into that space and the question is how

688
00:29:38,180 --> 00:29:42,650
do you accurately represent what the

689
00:29:39,859 --> 00:29:45,169
texture would have shown if you could do

690
00:29:42,650 --> 00:29:46,670
like an infinitely good summation of

691
00:29:45,170 --> 00:29:48,800
everything that was in it and so on and

692
00:29:46,670 --> 00:29:50,720
it gets into all kinds of details too

693
00:29:48,799 --> 00:29:53,450
like what does the texture really mean

694
00:29:50,720 --> 00:29:55,220
because the texture itself is a sampling

695
00:29:53,450 --> 00:29:57,620
of something it's not infinite

696
00:29:55,220 --> 00:29:59,870
resolution its individual little points

697
00:29:57,619 --> 00:30:01,459
where you've recorded to the state how

698
00:29:59,869 --> 00:30:03,319
did you record that state what do those

699
00:30:01,460 --> 00:30:05,150
things mean are they normals are the

700
00:30:03,319 --> 00:30:07,519
colors are the reflectance are the

701
00:30:05,150 --> 00:30:09,890
admittance right how you might sample

702
00:30:07,519 --> 00:30:13,519
them may even depend on what's actually

703
00:30:09,890 --> 00:30:16,009
in them right and so all of that comes

704
00:30:13,519 --> 00:30:17,720
into play if you want to go beyond just

705
00:30:16,009 --> 00:30:20,150
the basic thing that we're doing today

706
00:30:17,720 --> 00:30:23,690
and probably in handmade hero at all

707
00:30:20,150 --> 00:30:25,670
which is just we want our filtering to

708
00:30:23,690 --> 00:30:27,769
be smoother right that's all we're

709
00:30:25,670 --> 00:30:29,750
looking for here smoother a nice

710
00:30:27,769 --> 00:30:32,750
approximation of what happens when

711
00:30:29,750 --> 00:30:34,759
things scaled down and again you can

712
00:30:32,750 --> 00:30:37,250
already see now that I've sort of shown

713
00:30:34,759 --> 00:30:39,529
you how this pyramid looks you can see

714
00:30:37,250 --> 00:30:42,230
what I meant as well about saving memory

715
00:30:39,529 --> 00:30:44,930
bandwidth if this thing is gonna sample

716
00:30:42,230 --> 00:30:47,029
out of here remember I said as I move it

717
00:30:44,930 --> 00:30:49,400
it's wildly jumping around kind of where

718
00:30:47,029 --> 00:30:51,619
it asks a sample from when it's got only

719
00:30:49,400 --> 00:30:53,660
looking at this little 16 by 16 it can

720
00:30:51,619 --> 00:30:55,189
pull in like maybe just one cache line

721
00:30:53,660 --> 00:30:56,630
through the graphics card tells it

722
00:30:55,190 --> 00:30:58,910
everything it needs to know to render

723
00:30:56,630 --> 00:31:01,370
that entire sprite potentially right

724
00:30:58,910 --> 00:31:03,880
that's just a huge savings compared to

725
00:31:01,369 --> 00:31:06,159
having to like jump all around randomly

726
00:31:03,880 --> 00:31:08,470
just based on happens

727
00:31:06,160 --> 00:31:10,779
where those pixel centers end up pulling

728
00:31:08,470 --> 00:31:12,819
in segments of the cumulative get pulled

729
00:31:10,779 --> 00:31:16,109
in in little blocks right it's touching

730
00:31:12,819 --> 00:31:19,509
all of these blocks to compute a worse

731
00:31:16,109 --> 00:31:22,059
result than if we just pulled in a 16 by

732
00:31:19,509 --> 00:31:25,119
16 and got a really good result right

733
00:31:22,059 --> 00:31:26,649
so again mipmapping very very very good

734
00:31:25,119 --> 00:31:27,849
especially for what we're doing where we

735
00:31:26,650 --> 00:31:30,430
tend to have things that are mostly

736
00:31:27,849 --> 00:31:32,259
facing the camera anyway it's the exact

737
00:31:30,430 --> 00:31:34,990
right solution for us and it's

738
00:31:32,259 --> 00:31:37,779
absolutely what we want so what we need

739
00:31:34,990 --> 00:31:40,029
to do is not much the graphics card

740
00:31:37,779 --> 00:31:42,339
already has most of this stuff built

741
00:31:40,029 --> 00:31:43,660
into the texture unit you don't even

742
00:31:42,339 --> 00:31:45,250
need to implement the shader yourself

743
00:31:43,660 --> 00:31:47,769
it's actually something that I think

744
00:31:45,250 --> 00:31:49,660
happens during Texel fetch a lot of

745
00:31:47,769 --> 00:31:51,190
times I think the bilinear there's

746
00:31:49,660 --> 00:31:53,050
actually a lot of cards just have

747
00:31:51,190 --> 00:31:55,570
bilinear your textual fetch hardware

748
00:31:53,049 --> 00:31:56,589
that does it specially don't quote me on

749
00:31:55,569 --> 00:31:58,409
that because they may have gotten rid of

750
00:31:56,589 --> 00:32:02,859
that by now but they used to anyway and

751
00:31:58,410 --> 00:32:05,440
so it's even faster to do basic bilinear

752
00:32:02,859 --> 00:32:07,419
mipmap stuff then it would be if in our

753
00:32:05,440 --> 00:32:09,490
shader we were manually grabbing things

754
00:32:07,420 --> 00:32:11,440
and and summing them together because I

755
00:32:09,490 --> 00:32:13,569
believe they've got like hardwired

756
00:32:11,440 --> 00:32:16,180
bilinear collapsing stuff right on the

757
00:32:13,569 --> 00:32:19,569
texture unit to give you this increased

758
00:32:16,180 --> 00:32:21,940
throughput for that default case so that

759
00:32:19,569 --> 00:32:23,230
means we can do very little work we

760
00:32:21,940 --> 00:32:25,660
don't even have to rewrite our shaders

761
00:32:23,230 --> 00:32:28,299
or anything all we need to do is just

762
00:32:25,660 --> 00:32:30,580
tell the graphics card here's those

763
00:32:28,299 --> 00:32:32,769
things you wanted you wanted those box

764
00:32:30,579 --> 00:32:36,009
filters versions you want into the 2 to

765
00:32:32,769 --> 00:32:40,000
6 to 128 64 32 right that's what you

766
00:32:36,009 --> 00:32:41,710
wanted we got it here it is right so we

767
00:32:40,000 --> 00:32:44,230
just have to start supplying these MIT

768
00:32:41,710 --> 00:32:45,670
maps and once we supply the MIT maps the

769
00:32:44,230 --> 00:32:47,980
graphics card can take care of the rest

770
00:32:45,670 --> 00:32:50,289
because it has special hardware to do

771
00:32:47,980 --> 00:32:54,269
exactly this we don't even really need

772
00:32:50,289 --> 00:32:57,399
to implement anything in our shader so

773
00:32:54,269 --> 00:33:00,670
let's go ahead and open up our code and

774
00:32:57,400 --> 00:33:02,050
get this going now if you were I've been

775
00:33:00,670 --> 00:33:05,560
with us the whole time if you're a

776
00:33:02,049 --> 00:33:08,230
handmade hero diehard then you know that

777
00:33:05,559 --> 00:33:14,019
actually we have some calls in here that

778
00:33:08,230 --> 00:33:18,970
are like text sub image and we call this

779
00:33:14,019 --> 00:33:20,379
right in here you can see it when we're

780
00:33:18,970 --> 00:33:22,329
actually transfer

781
00:33:20,380 --> 00:33:23,860
stuffed down to the graphics card I

782
00:33:22,329 --> 00:33:26,139
believe this is it yeah here it is

783
00:33:23,859 --> 00:33:27,879
so in our managed textures call you can

784
00:33:26,140 --> 00:33:29,590
see we've got a special texture path

785
00:33:27,880 --> 00:33:31,240
that happens for weird rectangular

786
00:33:29,589 --> 00:33:33,459
textures that are used in cutscenes and

787
00:33:31,240 --> 00:33:36,130
stuff but most of our textures go into a

788
00:33:33,460 --> 00:33:38,769
texture array and here it is we call GL

789
00:33:36,130 --> 00:33:40,750
tux sub image 3d because it's a texture

790
00:33:38,769 --> 00:33:43,210
array and we attempt to put something

791
00:33:40,750 --> 00:33:46,808
into the texture right and this allows

792
00:33:43,210 --> 00:33:49,000
us to transfer using our texture index

793
00:33:46,808 --> 00:33:51,308
into a particular slice of a texture

794
00:33:49,000 --> 00:33:53,440
array what the width and height are for

795
00:33:51,308 --> 00:33:55,210
that particular thing now you will

796
00:33:53,440 --> 00:33:57,669
notice there's a bunch of zeros here

797
00:33:55,210 --> 00:34:02,048
what do they all mean well if we go over

798
00:33:57,669 --> 00:34:05,740
to Docs GL our favorite place for fui

799
00:34:02,048 --> 00:34:10,059
why isn't this gonna get that up in here

800
00:34:05,740 --> 00:34:14,588
yeah all right if we go and look at text

801
00:34:10,059 --> 00:34:16,239
image I'm sorry text sub image 3d and we

802
00:34:14,588 --> 00:34:19,000
take a look at the documentation for it

803
00:34:16,239 --> 00:34:20,559
in GL 3 which is what we were using you

804
00:34:19,000 --> 00:34:22,960
can see that there's a bunch of

805
00:34:20,559 --> 00:34:26,699
parameters passed here and at the

806
00:34:22,960 --> 00:34:31,418
beginning we have a bunch of zeros 0 0 0

807
00:34:26,699 --> 00:34:35,230
texture index right 0 0 0 texture index

808
00:34:31,418 --> 00:34:37,299
Z offset is where in the slices we are

809
00:34:35,230 --> 00:34:39,490
right because remember we're putting we

810
00:34:37,300 --> 00:34:41,740
put all of our sprites into one texture

811
00:34:39,489 --> 00:34:42,969
and we just used slices in a 3d texture

812
00:34:41,739 --> 00:34:46,229
for them right it's called the texture

813
00:34:42,969 --> 00:34:49,989
array very common for bitmap games right

814
00:34:46,230 --> 00:34:51,820
x and y offset those are both 0 those

815
00:34:49,989 --> 00:34:53,378
are those zeros right here and here

816
00:34:51,820 --> 00:34:55,119
because we're just putting it in the

817
00:34:53,378 --> 00:34:57,219
upper corner we don't do anything else

818
00:34:55,119 --> 00:34:59,500
with our updates we don't pack yeah

819
00:34:57,219 --> 00:35:02,348
maybe we should we're wasting a bunch of

820
00:34:59,500 --> 00:35:03,489
space so someday maybe we will but this

821
00:35:02,349 --> 00:35:05,260
is the one I really want to talk about

822
00:35:03,489 --> 00:35:08,108
right here there's a 0 at the beginning

823
00:35:05,260 --> 00:35:12,790
of our GL compressed text sub image 3d

824
00:35:08,108 --> 00:35:17,759
call and that 0 corresponds that 0

825
00:35:12,789 --> 00:35:21,940
corresponds to this this is what this is

826
00:35:17,760 --> 00:35:23,950
each one of these levels is a saw each

827
00:35:21,940 --> 00:35:26,740
one of these MIT maps is assigned a

828
00:35:23,949 --> 00:35:31,469
level number the level number is the

829
00:35:26,739 --> 00:35:34,429
power of the texture you would imagine

830
00:35:31,469 --> 00:35:37,259
where's my pen and I'm gonna draw it

831
00:35:34,429 --> 00:35:39,690
that level number just corresponds to

832
00:35:37,260 --> 00:35:43,320
where in this you are via the equation

833
00:35:39,690 --> 00:35:47,070
two to the whatever the dimension of the

834
00:35:43,320 --> 00:35:49,619
texture actually is minus the level okay

835
00:35:47,070 --> 00:35:52,800
so if we have a two to the eighth

836
00:35:49,619 --> 00:35:56,550
texture right then this D equals eight

837
00:35:52,800 --> 00:36:00,269
the levels of the texture are d 2 to the

838
00:35:56,550 --> 00:36:02,880
8th you know it are d 8 minus L right so

839
00:36:00,269 --> 00:36:06,809
level 0 these are 2 to the 8th texture

840
00:36:02,880 --> 00:36:09,510
level 1 is our 2 to this nice to the

841
00:36:06,809 --> 00:36:12,090
seventh right level 2 is 2 to the 6th

842
00:36:09,510 --> 00:36:15,240
and so as the levels go up eventually

843
00:36:12,090 --> 00:36:18,780
you will get down to a 2 to the 0

844
00:36:15,239 --> 00:36:21,358
texture and that's the last level you

845
00:36:18,780 --> 00:36:24,330
can specify so in our case we can

846
00:36:21,358 --> 00:36:27,329
specify eight of these textures because

847
00:36:24,329 --> 00:36:29,880
2 to the 8 minus 8 is 0 which would be

848
00:36:27,329 --> 00:36:33,509
the one by one texture the last one we

849
00:36:29,880 --> 00:36:36,390
could actually specify right and so

850
00:36:33,510 --> 00:36:39,510
that's that's the ball game folks so

851
00:36:36,389 --> 00:36:42,389
that's what we're doing so what we want

852
00:36:39,510 --> 00:36:45,390
to do is effectively extend this call

853
00:36:42,389 --> 00:36:47,789
like this is our problem right here this

854
00:36:45,389 --> 00:36:50,639
is why we aren't getting MIT maps we

855
00:36:47,789 --> 00:36:52,619
aren't specifying all the levels so what

856
00:36:50,639 --> 00:36:56,129
we really want to do is something like

857
00:36:52,619 --> 00:36:58,920
this where we say you know level index

858
00:36:56,130 --> 00:37:00,630
equals zero level index is less than 8

859
00:36:58,920 --> 00:37:03,990
or something and you know we got to go

860
00:37:00,630 --> 00:37:07,260
calculate what this is level index is

861
00:37:03,989 --> 00:37:10,679
less than equal to max level index Mac

862
00:37:07,260 --> 00:37:13,320
open gel I don't know what this is

863
00:37:10,679 --> 00:37:14,639
because we haven't made it yet but point

864
00:37:13,320 --> 00:37:16,320
being this value is going to be

865
00:37:14,639 --> 00:37:19,319
something we specify based on our

866
00:37:16,320 --> 00:37:22,710
texture size and then this has to

867
00:37:19,320 --> 00:37:26,220
specify some kind of set of data for

868
00:37:22,710 --> 00:37:27,990
each one of these right and so this is

869
00:37:26,219 --> 00:37:29,309
the extension we need to make that's

870
00:37:27,989 --> 00:37:32,639
what we're missing

871
00:37:29,309 --> 00:37:36,059
once we provide that then we can just

872
00:37:32,639 --> 00:37:41,608
turn on mipmapping and it will work done

873
00:37:36,059 --> 00:37:43,739
right ok so that's the first thing we

874
00:37:41,608 --> 00:37:45,329
want to do and it's gonna take us a

875
00:37:43,739 --> 00:37:48,750
little bit of work

876
00:37:45,329 --> 00:37:53,909
but let's try it so what I want to do

877
00:37:48,750 --> 00:37:55,590
first is I'm gonna do we need to

878
00:37:53,909 --> 00:37:57,629
basically create space to store these

879
00:37:55,590 --> 00:38:00,030
things and we need to know how many

880
00:37:57,630 --> 00:38:01,980
there are and all that kind of stuff so

881
00:38:00,030 --> 00:38:04,410
we need to start extending our texture

882
00:38:01,980 --> 00:38:19,670
pipeline to allow us to provide these

883
00:38:04,409 --> 00:38:23,429
MIT maps as we go now there is this here

884
00:38:19,670 --> 00:38:27,570
there it is there is a thing called GL

885
00:38:23,429 --> 00:38:30,989
generate mipmap and what this does is

886
00:38:27,570 --> 00:38:32,490
this will generate them automatically it

887
00:38:30,989 --> 00:38:33,809
generates MIT maps for the texture

888
00:38:32,489 --> 00:38:38,189
attached to the target of the active

889
00:38:33,809 --> 00:38:41,070
texture unit I and the that's the only

890
00:38:38,190 --> 00:38:45,869
thing I don't know is how reliable it is

891
00:38:41,070 --> 00:38:52,019
so we could another option is to just

892
00:38:45,869 --> 00:38:58,069
call it and call it a day it's less work

893
00:38:52,019 --> 00:39:01,800
I just don't know if it works always

894
00:38:58,070 --> 00:39:03,539
probably I don't know um I guess I'm

895
00:39:01,800 --> 00:39:04,950
done to just call it the nice part about

896
00:39:03,539 --> 00:39:06,449
it is that if the hardware can

897
00:39:04,949 --> 00:39:08,159
accelerate building the MIT map it will

898
00:39:06,449 --> 00:39:11,129
and usually it can because all it is is

899
00:39:08,159 --> 00:39:16,019
a series of calls to the render to the

900
00:39:11,130 --> 00:39:20,460
blip to like sample them down so we

901
00:39:16,019 --> 00:39:23,009
could and let's try it I guess it saves

902
00:39:20,460 --> 00:39:25,860
us some time so if we were to still call

903
00:39:23,010 --> 00:39:28,590
this and not actually submit them each

904
00:39:25,860 --> 00:39:32,120
individually we would just call this

905
00:39:28,590 --> 00:39:32,120
function GL generate MIT map right

906
00:39:36,820 --> 00:39:41,630
and that would be it

907
00:39:39,469 --> 00:39:44,089
I don't think that's the default call so

908
00:39:41,630 --> 00:39:46,519
we probably would have to provide it but

909
00:39:44,090 --> 00:39:50,960
that's okay and then what would happen

910
00:39:46,519 --> 00:39:52,670
here is this GL texture 2d array we're

911
00:39:50,960 --> 00:39:53,990
just telling it that whatever texture

912
00:39:52,670 --> 00:39:55,550
you had bound to that slot because

913
00:39:53,989 --> 00:39:58,639
remember you got to bind these textures

914
00:39:55,550 --> 00:40:01,760
so right here in GL buying texture we've

915
00:39:58,639 --> 00:40:03,949
bound this texture array handle that

916
00:40:01,760 --> 00:40:07,100
generate mipmap call is gonna operate on

917
00:40:03,949 --> 00:40:09,619
this texture array handle so we sub we

918
00:40:07,099 --> 00:40:12,440
send the image down then we say build

919
00:40:09,619 --> 00:40:15,230
the the MIT map for it right now the

920
00:40:12,440 --> 00:40:16,519
problem here's the thing I don't why

921
00:40:15,230 --> 00:40:20,210
don't really know if that's a good idea

922
00:40:16,519 --> 00:40:22,579
I feel like that would require it to

923
00:40:20,210 --> 00:40:24,829
generate the MIT map for the entire

924
00:40:22,579 --> 00:40:26,539
texture array and I don't know if

925
00:40:24,829 --> 00:40:31,429
there's any way to tell it not to do

926
00:40:26,539 --> 00:40:33,170
that so again I'm really I don't think

927
00:40:31,429 --> 00:40:35,929
this is a good idea I guess it's all I'm

928
00:40:33,170 --> 00:40:38,000
gonna say if you called it with a 3d

929
00:40:35,929 --> 00:40:40,309
texture and you tell journey to MIT Maps

930
00:40:38,000 --> 00:40:42,500
I'm suspecting it will probably not keep

931
00:40:40,309 --> 00:40:44,299
any kind of dirty flag so it will just

932
00:40:42,500 --> 00:40:46,730
generate it for the entire thing we've

933
00:40:44,300 --> 00:40:48,080
got like a hundred some-odd texels

934
00:40:46,730 --> 00:40:50,929
textures in there that's just really

935
00:40:48,079 --> 00:40:59,539
expensive so I'm pretty sure we don't

936
00:40:50,929 --> 00:41:01,429
want to do this but we can try it and

937
00:40:59,539 --> 00:41:06,050
then I'll replace it with the better

938
00:41:01,429 --> 00:41:09,139
thing maybe seems a good idea I don't

939
00:41:06,050 --> 00:41:10,280
know so anyway let's try we'll see I

940
00:41:09,139 --> 00:41:14,359
don't even know if it'll work it might

941
00:41:10,280 --> 00:41:18,019
just fail as well on on to texture race

942
00:41:14,360 --> 00:41:22,390
I don't know what the rule is there it

943
00:41:18,019 --> 00:41:24,409
looks like heyou maps aren't allowed but

944
00:41:22,389 --> 00:41:27,099
but it looks like texture arrays are

945
00:41:24,409 --> 00:41:27,099
right

946
00:41:37,179 --> 00:41:45,500
mitt prep generation replaces Texel

947
00:41:39,590 --> 00:41:50,800
array levels base plus one through Q the

948
00:41:45,500 --> 00:41:54,860
what the heck is Q though what what is Q

949
00:41:50,800 --> 00:41:56,450
1 through Q what Q was I guess I'm just

950
00:41:54,860 --> 00:41:58,780
supposed to remember from the spec what

951
00:41:56,449 --> 00:41:58,779
Q is

952
00:42:13,239 --> 00:42:17,558
all other mipmap are raised including

953
00:42:15,699 --> 00:42:18,939
the level base array are left unchanged

954
00:42:17,559 --> 00:42:22,329
by the company I have no idea where

955
00:42:18,940 --> 00:42:23,889
they're getting the skew from the

956
00:42:22,329 --> 00:42:25,180
internal formats the drive bitmaps all

957
00:42:23,889 --> 00:42:30,009
meshes the base array the kind of

958
00:42:25,179 --> 00:42:34,269
survives or is yeah yes so I mean just

959
00:42:30,010 --> 00:42:35,859
looking at it I'm pretty sure we can't

960
00:42:34,269 --> 00:42:38,170
really rely on this long-term though

961
00:42:35,858 --> 00:42:41,440
right and I think that's just because

962
00:42:38,170 --> 00:42:43,240
it's gonna it's gonna cause it to every

963
00:42:41,440 --> 00:42:45,880
time we update a single texture in our

964
00:42:43,239 --> 00:42:48,699
texture array there's no way to say just

965
00:42:45,880 --> 00:42:51,369
regenerate this slice of the array you

966
00:42:48,699 --> 00:43:03,009
know what I'm saying to you and so I

967
00:42:51,369 --> 00:43:04,440
don't think there's necessarily any way

968
00:43:03,010 --> 00:43:07,510
to do that

969
00:43:04,440 --> 00:43:07,510
[Music]

970
00:43:27,739 --> 00:43:31,959
what is this flag right here

971
00:43:44,420 --> 00:43:50,298
see that's more what we would like

972
00:43:47,588 --> 00:43:52,219
because then we would know that when we

973
00:43:50,298 --> 00:43:55,608
updated it would just know to do that

974
00:43:52,219 --> 00:43:57,048
but again still not good I all the stuff

975
00:43:55,608 --> 00:44:00,048
just gives me the hives because who

976
00:43:57,048 --> 00:44:02,960
knows what the cards gonna do here's I'm

977
00:44:00,048 --> 00:44:04,579
gonna do I'm gonna say forget it I'm

978
00:44:02,960 --> 00:44:06,380
just not using it I'm sufficiently

979
00:44:04,579 --> 00:44:08,269
spooked we're not gonna do it

980
00:44:06,380 --> 00:44:10,358
we're gonna send down our maps manually

981
00:44:08,268 --> 00:44:13,308
and that's just the way it's gonna go

982
00:44:10,358 --> 00:44:14,420
be advised that function exists if you

983
00:44:13,309 --> 00:44:14,750
want to play around with it go right

984
00:44:14,420 --> 00:44:16,460
ahead

985
00:44:14,750 --> 00:44:18,500
there's another way we could do this too

986
00:44:16,460 --> 00:44:26,179
which is that we can use render to

987
00:44:18,500 --> 00:44:28,400
texture to basically create a like us do

988
00:44:26,179 --> 00:44:30,048
the bleeding as we go I'm not gonna do

989
00:44:28,400 --> 00:44:32,630
any of that we're just gonna do this in

990
00:44:30,048 --> 00:44:34,159
software because this is handmade hero

991
00:44:32,630 --> 00:44:36,640
and we implement the stuff ourselves

992
00:44:34,159 --> 00:44:40,759
anyway we might as well learn to do it

993
00:44:36,639 --> 00:44:42,920
in in our own code okay so that's just

994
00:44:40,760 --> 00:44:44,630
what we're gonna do and I don't want to

995
00:44:42,920 --> 00:44:47,180
know what the heck is going on there

996
00:44:44,630 --> 00:44:49,278
behind the scenes cuz I don't trust it I

997
00:44:47,179 --> 00:44:53,298
never trust a guy's car to do he screws

998
00:44:49,278 --> 00:44:56,268
me alright so what we need to do now is

999
00:44:53,298 --> 00:45:01,159
just say okay when we load stuff we need

1000
00:44:56,268 --> 00:45:03,469
to be able to generate the sort of the

1001
00:45:01,159 --> 00:45:05,690
the scaled-down versions of things and

1002
00:45:03,469 --> 00:45:08,179
thankfully we have worker threads

1003
00:45:05,690 --> 00:45:10,429
dedicated to exactly this so we should

1004
00:45:08,179 --> 00:45:13,419
be able to have a little simple down

1005
00:45:10,429 --> 00:45:15,828
sampler like we've already written

1006
00:45:13,420 --> 00:45:17,838
something that scales images down by two

1007
00:45:15,829 --> 00:45:22,818
we should be able to create something

1008
00:45:17,838 --> 00:45:24,048
that will just take the the bitmap scale

1009
00:45:22,818 --> 00:45:25,818
it down by to scale it down by two

1010
00:45:24,048 --> 00:45:29,798
against go down by two again and just

1011
00:45:25,818 --> 00:45:32,750
keep all of those results so that we can

1012
00:45:29,798 --> 00:45:35,389
when after we load them just submit them

1013
00:45:32,750 --> 00:45:36,980
right and you know it's not clear to me

1014
00:45:35,389 --> 00:45:39,230
that you know maybe we want to actually

1015
00:45:36,980 --> 00:45:40,369
store the MIT maps and load them in but

1016
00:45:39,230 --> 00:45:42,679
it's not clear to me that that's a good

1017
00:45:40,369 --> 00:45:44,480
trade-off because we probably ask you

1018
00:45:42,679 --> 00:45:47,659
know the further we go forward in

1019
00:45:44,480 --> 00:45:49,400
computing the more often you've got

1020
00:45:47,659 --> 00:45:52,098
cores sitting around that could be doing

1021
00:45:49,400 --> 00:45:54,798
work for you and so why put more stress

1022
00:45:52,099 --> 00:45:56,930
on the hard drive throughput which often

1023
00:45:54,798 --> 00:45:58,219
times is limited when we could just

1024
00:45:56,929 --> 00:46:01,399
dedicate a quarter

1025
00:45:58,219 --> 00:46:02,209
compressing and you know collapsing

1026
00:46:01,400 --> 00:46:04,700
things and so on

1027
00:46:02,210 --> 00:46:07,190
so I I would say probably my guess is

1028
00:46:04,699 --> 00:46:11,659
let's just use a core for this that's my

1029
00:46:07,190 --> 00:46:15,019
thinking all right so in here where we

1030
00:46:11,659 --> 00:46:17,210
do load asset work you can see where

1031
00:46:15,019 --> 00:46:20,000
we've got this work text wrap thing and

1032
00:46:17,210 --> 00:46:22,699
we call complete texture up on it and so

1033
00:46:20,000 --> 00:46:24,530
in this platform work you call back what

1034
00:46:22,699 --> 00:46:27,108
I would like to do here is after the

1035
00:46:24,530 --> 00:46:36,050
read data from file if we assume we need

1036
00:46:27,108 --> 00:46:37,639
to do MIT Maps something like this if it

1037
00:46:36,050 --> 00:46:40,670
tells us to Gen the MIT maps then what

1038
00:46:37,639 --> 00:46:43,219
we need to do is like go through and Jen

1039
00:46:40,670 --> 00:46:45,490
the MIT maps so this right here is gonna

1040
00:46:43,219 --> 00:46:49,219
be a thing which would do that that

1041
00:46:45,489 --> 00:46:51,139
generation and what I would want to do

1042
00:46:49,219 --> 00:46:53,480
is only we're only going to do this for

1043
00:46:51,139 --> 00:46:59,750
square things that are power of two

1044
00:46:53,480 --> 00:47:01,579
right I guess technically we don't care

1045
00:46:59,750 --> 00:47:02,690
if they're part two but we do only

1046
00:47:01,579 --> 00:47:03,980
really want to bother with them if

1047
00:47:02,690 --> 00:47:06,440
they're square I guess is what I would

1048
00:47:03,980 --> 00:47:08,240
say and we kind of want them to leave a

1049
00:47:06,440 --> 00:47:09,980
power to - I want this thing to be

1050
00:47:08,239 --> 00:47:11,779
square power - I don't want to deal with

1051
00:47:09,980 --> 00:47:16,269
anything else let's put it let's put it

1052
00:47:11,780 --> 00:47:16,269
that way okay so

1053
00:47:23,298 --> 00:47:28,130
let me look at complete texture up here

1054
00:47:32,449 --> 00:47:37,259
so the only thing that's a little wonky

1055
00:47:35,068 --> 00:47:38,518
now to think about it is that when the

1056
00:47:37,259 --> 00:47:40,019
width and height come in we actually

1057
00:47:38,518 --> 00:47:43,978
don't bother

1058
00:47:40,018 --> 00:47:47,879
we don't Pat it out until kind of later

1059
00:47:43,978 --> 00:47:50,548
in the process right so that makes it

1060
00:47:47,880 --> 00:47:54,599
actually a little bit trickier

1061
00:47:50,548 --> 00:47:58,288
a little bit more tricky because it

1062
00:47:54,599 --> 00:48:00,568
means that we don't really we don't have

1063
00:47:58,289 --> 00:48:04,349
things that are quite a power of two yet

1064
00:48:00,568 --> 00:48:08,188
either so what we would like to do here

1065
00:48:04,349 --> 00:48:13,048
I guess actually is be able to fuss with

1066
00:48:08,188 --> 00:48:15,538
these in sort of a way that just adds

1067
00:48:13,048 --> 00:48:18,568
the padding as necessary on each down

1068
00:48:15,539 --> 00:48:21,079
sample which is a little annoying but oh

1069
00:48:18,568 --> 00:48:21,079
well

1070
00:48:21,599 --> 00:48:25,318
so what I would like to do here then is

1071
00:48:23,099 --> 00:48:29,609
I guess just do the down sampling

1072
00:48:25,318 --> 00:48:30,719
without that right don't don't assume

1073
00:48:29,608 --> 00:48:32,429
that it's got to be pad or anything like

1074
00:48:30,719 --> 00:48:35,219
that just do a real down sample and then

1075
00:48:32,429 --> 00:48:41,309
upload the stuff so if that's what we're

1076
00:48:35,219 --> 00:48:43,559
gonna do Jimmy then each time we do the

1077
00:48:41,309 --> 00:48:46,229
bi-linear we may have to expand by a

1078
00:48:43,559 --> 00:48:47,939
pixel if the thing was like not a power

1079
00:48:46,228 --> 00:48:49,948
of two which is not going to be most the

1080
00:48:47,938 --> 00:48:51,358
time and so that's gonna be a little bit

1081
00:48:49,949 --> 00:48:54,329
delicate and we have to make sure to get

1082
00:48:51,358 --> 00:48:57,028
that right so what I'm gonna do is

1083
00:48:54,329 --> 00:49:00,539
because I might need to do this sort of

1084
00:48:57,028 --> 00:49:01,978
same stuff in multiple places I want to

1085
00:49:00,539 --> 00:49:03,749
create a helper function and assume that

1086
00:49:01,978 --> 00:49:06,178
I have something that can give me what

1087
00:49:03,748 --> 00:49:10,348
the correct operations are to do as I

1088
00:49:06,179 --> 00:49:12,059
step down my MCMAP levels right so what

1089
00:49:10,349 --> 00:49:17,729
I want to do here is say something like

1090
00:49:12,059 --> 00:49:22,519
Mick iterator right like this and say

1091
00:49:17,728 --> 00:49:26,029
begin MIT on this thing it is

1092
00:49:22,519 --> 00:49:26,030
[Music]

1093
00:49:30,019 --> 00:49:50,210
going to require texture up the texture

1094
00:49:37,050 --> 00:49:50,210
up itself has the texture handle in it

1095
00:49:51,199 --> 00:49:58,619
which tells us the width width and

1096
00:49:54,809 --> 00:50:01,340
height of the thing we need so basically

1097
00:49:58,619 --> 00:50:03,480
what we would do is say work texture up

1098
00:50:01,340 --> 00:50:06,480
texture

1099
00:50:03,480 --> 00:50:09,179
we need that actually start two-pointer

1100
00:50:06,480 --> 00:50:12,179
we need to get the width and height out

1101
00:50:09,179 --> 00:50:15,239
of that which we've got a thing from

1102
00:50:12,179 --> 00:50:15,239
[Music]

1103
00:50:16,670 --> 00:50:32,329
somewhere in here or do we do we just

1104
00:50:27,599 --> 00:50:32,329
use it just like dot width and height

1105
00:50:34,280 --> 00:50:41,460
maybe we just actually just access it

1106
00:50:36,690 --> 00:50:43,980
directly yeah all right um so we know

1107
00:50:41,460 --> 00:50:54,269
the width this way and the same with the

1108
00:50:43,980 --> 00:50:55,349
height right but actually I suppose we

1109
00:50:54,269 --> 00:50:56,519
probably just want to do it that way

1110
00:50:55,349 --> 00:50:59,220
because we're always gonna have that

1111
00:50:56,519 --> 00:51:01,079
texture handle available probably so

1112
00:50:59,219 --> 00:51:03,179
maybe we'll do it like that so we'd say

1113
00:51:01,079 --> 00:51:06,740
look begin a MIPS series for this thing

1114
00:51:03,179 --> 00:51:13,798
take the width and height

1115
00:51:06,739 --> 00:51:15,419
I'm assume that whoever you are you know

1116
00:51:13,798 --> 00:51:19,289
how to do everything right so this

1117
00:51:15,420 --> 00:51:21,180
little iterator doodad here will just

1118
00:51:19,289 --> 00:51:23,009
create the right set of like power of

1119
00:51:21,179 --> 00:51:26,879
two things and whatever else needs to

1120
00:51:23,010 --> 00:51:31,230
happen it'll work for us sort of doing

1121
00:51:26,880 --> 00:51:34,170
our down sampling right and then for

1122
00:51:31,230 --> 00:51:42,420
each part here what I need to do is I

1123
00:51:34,170 --> 00:51:44,430
need to have our box filter or down

1124
00:51:42,420 --> 00:51:51,230
sample there it is I need to basically

1125
00:51:44,429 --> 00:51:55,529
have this thing and I need this to be

1126
00:51:51,230 --> 00:51:58,829
able to down sample by two each time I

1127
00:51:55,530 --> 00:52:02,510
need to call this on each one of these

1128
00:51:58,829 --> 00:52:04,589
now what I am Not sure I understand

1129
00:52:02,510 --> 00:52:07,589
looking at how this thing works

1130
00:52:04,588 --> 00:52:12,960
is this thing assumes that everything is

1131
00:52:07,588 --> 00:52:18,568
a power of two right so is everything

1132
00:52:12,960 --> 00:52:20,369
actually secretly a power of two right

1133
00:52:18,568 --> 00:52:22,798
you can see that this totally assumes

1134
00:52:20,369 --> 00:52:25,048
that you know I'm saying cuz it's great

1135
00:52:22,798 --> 00:52:30,358
it's always gonna grab two for everyone

1136
00:52:25,048 --> 00:52:31,798
so I guess I lied we do require

1137
00:52:30,358 --> 00:52:34,338
everything that comes through here to be

1138
00:52:31,798 --> 00:52:34,338
a power of two

1139
00:52:41,780 --> 00:52:49,440
yeah all right well that keeps it simple

1140
00:52:45,780 --> 00:52:50,970
for us less efficient but simple so if

1141
00:52:49,440 --> 00:52:53,550
that's the case then we already

1142
00:52:50,969 --> 00:52:55,769
effectively wrote all this code right

1143
00:52:53,550 --> 00:52:58,590
all we're gonna do is just be doing this

1144
00:52:55,769 --> 00:53:01,380
down sample and the only real change is

1145
00:52:58,590 --> 00:53:05,220
we probably want to take make this down

1146
00:53:01,380 --> 00:53:07,860
sample take to a source in a desk and

1147
00:53:05,219 --> 00:53:13,619
you can pass the same source and destiny

1148
00:53:07,860 --> 00:53:15,240
want and in our case we would pass

1149
00:53:13,619 --> 00:53:17,940
different ones because we want to down

1150
00:53:15,239 --> 00:53:21,089
sample and save each version of our down

1151
00:53:17,940 --> 00:53:23,130
sample right but that's basically all

1152
00:53:21,090 --> 00:53:24,900
we'd be doing so this down sample would

1153
00:53:23,130 --> 00:53:28,860
just get called here and it'd be called

1154
00:53:24,900 --> 00:53:31,710
for every step through the MIT and

1155
00:53:28,860 --> 00:53:34,680
that'd be that so I think that's all we

1156
00:53:31,710 --> 00:53:38,610
really want to do here and looking at

1157
00:53:34,679 --> 00:53:40,739
the texture up itself so when I and in

1158
00:53:38,610 --> 00:53:42,900
fact I think I can kind of see also how

1159
00:53:40,739 --> 00:53:48,750
I want the rest of this stuff to work

1160
00:53:42,900 --> 00:53:50,760
here if I look at that texture app just

1161
00:53:48,750 --> 00:53:52,739
looking at how this goes maybe what I

1162
00:53:50,760 --> 00:53:54,660
want to do is pass this directly so I

1163
00:53:52,739 --> 00:53:56,819
think what I might do is make the the

1164
00:53:54,659 --> 00:53:59,339
MIT operator here actually just take the

1165
00:53:56,820 --> 00:54:01,920
texture up so you say like begin map and

1166
00:53:59,340 --> 00:54:04,289
you get back this this myth here and

1167
00:54:01,920 --> 00:54:07,800
then what happens is on each call

1168
00:54:04,289 --> 00:54:11,099
through I'm going to like down sample

1169
00:54:07,800 --> 00:54:15,000
from one of them and into the next one

1170
00:54:11,099 --> 00:54:17,009
right and so on the first time through I

1171
00:54:15,000 --> 00:54:19,469
don't actually want to do anything right

1172
00:54:17,010 --> 00:54:23,700
so on the first time through I just want

1173
00:54:19,469 --> 00:54:27,689
to advance the map but before I do I

1174
00:54:23,699 --> 00:54:30,289
want to save the sample like the source

1175
00:54:27,690 --> 00:54:30,289
right

1176
00:54:34,588 --> 00:54:38,279
so what I want this thing to do is give

1177
00:54:36,570 --> 00:54:39,900
me back like that region from the

1178
00:54:38,280 --> 00:54:42,000
texture up that's actually got the data

1179
00:54:39,900 --> 00:54:44,608
in it now and then what I'm going to do

1180
00:54:42,000 --> 00:54:46,380
is advance it forward and so then in

1181
00:54:44,608 --> 00:54:48,389
here this is actually kind of a while

1182
00:54:46,380 --> 00:54:57,740
loop I'm gonna do

1183
00:54:48,389 --> 00:55:00,779
oops this and each time I go through and

1184
00:54:57,739 --> 00:55:02,578
do my advance in fact I guess I could do

1185
00:55:00,780 --> 00:55:04,560
well now I'm doing like this each time

1186
00:55:02,579 --> 00:55:08,190
through here I'm gonna go ahead and take

1187
00:55:04,559 --> 00:55:12,179
the desk like so I'm gonna down sample

1188
00:55:08,190 --> 00:55:15,630
from the source to the desk by one and

1189
00:55:12,179 --> 00:55:19,108
then I'm going to advance the mitt

1190
00:55:15,630 --> 00:55:24,690
forward to the next one and I guess each

1191
00:55:19,108 --> 00:55:27,210
time also I want to source right so just

1192
00:55:24,690 --> 00:55:33,170
gonna roll through these updating the

1193
00:55:27,210 --> 00:55:36,720
myth every time I and downsampling right

1194
00:55:33,170 --> 00:55:40,650
that's really all I want to do so I want

1195
00:55:36,719 --> 00:55:42,709
this I want this like begin map thing to

1196
00:55:40,650 --> 00:55:47,579
just be able to or like iterate maybe

1197
00:55:42,710 --> 00:55:49,470
iterate MIPS I want that to do the work

1198
00:55:47,579 --> 00:55:51,630
of keeping everything lined up now you

1199
00:55:49,469 --> 00:55:53,689
may ask why like why did I do that

1200
00:55:51,630 --> 00:55:55,829
doesn't really make any sense does it

1201
00:55:53,690 --> 00:55:57,358
but it does make a little bit of sense

1202
00:55:55,829 --> 00:56:00,510
because remember we're gonna come in

1203
00:55:57,358 --> 00:56:04,529
here next and this thing wants to do

1204
00:56:00,510 --> 00:56:11,400
exactly the same thing right so what I

1205
00:56:04,530 --> 00:56:15,109
wanted was this I can call exactly the

1206
00:56:11,400 --> 00:56:15,108
same set of source code here

1207
00:56:19,000 --> 00:56:23,469
and then I'll know that the thing that

1208
00:56:21,550 --> 00:56:25,240
generates the MIPS is generating them

1209
00:56:23,469 --> 00:56:28,179
into the exact same set of pointers of

1210
00:56:25,239 --> 00:56:29,829
the thing that actually submits them so

1211
00:56:28,179 --> 00:56:31,839
I can eliminate the possibility of

1212
00:56:29,829 --> 00:56:33,659
having bugs between those two updates

1213
00:56:31,840 --> 00:56:36,400
right between those two walks

1214
00:56:33,659 --> 00:56:38,139
so again just defensively programming it

1215
00:56:36,400 --> 00:56:40,240
myself so that I know that the failure

1216
00:56:38,139 --> 00:56:44,769
is all in one place so my debug it it'll

1217
00:56:40,239 --> 00:56:47,500
work right okay so as I do this

1218
00:56:44,769 --> 00:56:50,469
submission I'll also have a level

1219
00:56:47,500 --> 00:56:52,389
parameter in there I guess like that and

1220
00:56:50,469 --> 00:56:55,269
then what I can do is say well when

1221
00:56:52,389 --> 00:56:57,339
we're doing the texture submission here

1222
00:56:55,269 --> 00:57:06,000
this width and height are gonna change

1223
00:56:57,340 --> 00:57:13,780
each time and so I want to do this right

1224
00:57:06,000 --> 00:57:15,130
and I think that's all she wrote can't

1225
00:57:13,780 --> 00:57:20,130
remember what this is called it's like

1226
00:57:15,130 --> 00:57:20,130
pixels data I don't know what who knows

1227
00:57:28,829 --> 00:57:38,409
pixels so you can see that's all I was

1228
00:57:36,460 --> 00:57:40,869
trying to do this way we write one

1229
00:57:38,409 --> 00:57:42,369
iterator we can use it to submit our

1230
00:57:40,869 --> 00:57:44,679
stuff because it'll tell us the width

1231
00:57:42,369 --> 00:57:45,699
the height and the pointer correctly and

1232
00:57:44,679 --> 00:57:50,259
we'll throw the level in there for good

1233
00:57:45,699 --> 00:57:52,059
measure and then we can also do when

1234
00:57:50,260 --> 00:57:53,620
we're actually doing our down sampling

1235
00:57:52,059 --> 00:57:55,539
we can use the exact same thing and we

1236
00:57:53,619 --> 00:57:56,949
know that they have to line up so once

1237
00:57:55,539 --> 00:57:59,679
we get one of them bug free the other

1238
00:57:56,949 --> 00:58:00,069
one will be bug free uh famous last

1239
00:57:59,679 --> 00:58:02,019
words

1240
00:58:00,070 --> 00:58:05,050
this is calling OpenGL so not

1241
00:58:02,019 --> 00:58:09,969
necessarily but you know closer to bug

1242
00:58:05,050 --> 00:58:12,660
free okay so what we need now is a down

1243
00:58:09,969 --> 00:58:16,659
sample that takes a source of a test I

1244
00:58:12,659 --> 00:58:18,250
actually have a pretty good idea of how

1245
00:58:16,659 --> 00:58:19,389
I want to do that and that is to say

1246
00:58:18,250 --> 00:58:22,599
that if you take a look at this call

1247
00:58:19,389 --> 00:58:25,179
here this is doing a loop I don't want

1248
00:58:22,599 --> 00:58:28,210
to do a loop I want just a single thing

1249
00:58:25,179 --> 00:58:29,980
that actually does the down sample so

1250
00:58:28,210 --> 00:58:31,019
what I'm going to suggest is that we

1251
00:58:29,980 --> 00:58:34,079
have another

1252
00:58:31,019 --> 00:58:40,949
version here called downsample that does

1253
00:58:34,079 --> 00:58:43,409
this which is the one we actually wants

1254
00:58:40,949 --> 00:58:48,569
and what that's going to do is it's

1255
00:58:43,409 --> 00:58:52,759
going to take these here and it's gonna

1256
00:58:48,570 --> 00:59:02,760
just use this part just that

1257
00:58:52,760 --> 00:59:06,390
alright that's all it's going to do yeah

1258
00:59:02,760 --> 00:59:09,240
i'm santi and that way when this thing

1259
00:59:06,389 --> 00:59:12,000
does its little happy dance it's going

1260
00:59:09,239 --> 00:59:14,789
to pull from one and write to the other

1261
00:59:12,000 --> 00:59:16,949
which is more what I wanted and this

1262
00:59:14,789 --> 00:59:18,630
thing can still use it because since we

1263
00:59:16,949 --> 00:59:20,759
know that it works in place as well we

1264
00:59:18,630 --> 00:59:23,160
don't need to write two versions of the

1265
00:59:20,760 --> 00:59:27,810
same function so what we can do here is

1266
00:59:23,159 --> 00:59:30,449
say alright we know we've got the result

1267
00:59:27,809 --> 00:59:34,769
here which is this one what I can do is

1268
00:59:30,449 --> 00:59:38,519
just save that before we reduce it so I

1269
00:59:34,769 --> 00:59:47,849
can say image you 32 sort of like dest

1270
00:59:38,519 --> 00:59:52,369
equals or I guess I could say breve

1271
00:59:47,849 --> 00:59:59,659
equals results something like that and

1272
00:59:52,369 --> 00:59:59,659
then here we just do this

1273
01:00:09,190 --> 01:00:18,490
so the idea here right is we would just

1274
01:00:12,070 --> 01:00:20,170
be taking we don't need this we would

1275
01:00:18,489 --> 01:00:22,599
just be taking when we do our down

1276
01:00:20,170 --> 01:00:25,570
sample right we just take okay where are

1277
01:00:22,599 --> 01:00:27,730
we at right now remember that because

1278
01:00:25,570 --> 01:00:30,519
we're gonna need that in a second

1279
01:00:27,730 --> 01:00:32,860
take the the place we're at right now

1280
01:00:30,519 --> 01:00:35,800
and decimate by two right there just

1281
01:00:32,860 --> 01:00:38,410
rank it by two and then pass that as the

1282
01:00:35,800 --> 01:00:41,560
dest calling this will do the same thing

1283
01:00:38,409 --> 01:00:43,359
it used to do before like this and so

1284
01:00:41,559 --> 01:00:45,400
all we now need to do is make sure that

1285
01:00:43,360 --> 01:00:48,610
this function actually pulls from source

1286
01:00:45,400 --> 01:00:50,889
or desc correctly so in here where we've

1287
01:00:48,610 --> 01:00:52,570
got desk pixel we actually want desktop

1288
01:00:50,889 --> 01:00:54,250
pixels in here we want source stop

1289
01:00:52,570 --> 01:00:56,410
pixels here where we're grabbing from

1290
01:00:54,250 --> 01:00:57,940
the source we want to do source dot with

1291
01:00:56,409 --> 01:01:01,000
to advance it because that's the one

1292
01:00:57,940 --> 01:01:02,409
with the correct width in our case when

1293
01:01:01,000 --> 01:01:03,670
we come down here to do DES pixel

1294
01:01:02,409 --> 01:01:05,289
packing we don't have to change anything

1295
01:01:03,670 --> 01:01:07,930
because it's just writing off the

1296
01:01:05,289 --> 01:01:09,519
pointer and similarly here we want to go

1297
01:01:07,929 --> 01:01:12,369
back and use that source with again and

1298
01:01:09,519 --> 01:01:14,949
that's it right that's all we needed to

1299
01:01:12,369 --> 01:01:16,569
do so I think that should keep us

1300
01:01:14,949 --> 01:01:18,759
completely compatible and everything

1301
01:01:16,570 --> 01:01:20,590
should work the downsample by two can

1302
01:01:18,760 --> 01:01:22,300
now get pulled out of the import stage

1303
01:01:20,590 --> 01:01:24,070
and into something that's actually just

1304
01:01:22,300 --> 01:01:26,110
like a math library or something like

1305
01:01:24,070 --> 01:01:31,660
that I don't know where image u32 is

1306
01:01:26,110 --> 01:01:34,450
actually where the heck is image 232

1307
01:01:31,659 --> 01:01:38,379
what's it doing in here in the pincode

1308
01:01:34,449 --> 01:01:40,299
all right whatever anyway so I don't

1309
01:01:38,380 --> 01:01:43,840
know exactly where this would be maybe

1310
01:01:40,300 --> 01:01:45,220
in the shared code I don't know I really

1311
01:01:43,840 --> 01:01:47,140
don't know we're down sampled by two

1312
01:01:45,219 --> 01:01:48,429
should live it's kind of a image

1313
01:01:47,139 --> 01:01:50,289
operation but we don't have image

1314
01:01:48,429 --> 01:01:51,460
operations in our system right now so we

1315
01:01:50,289 --> 01:01:54,759
little guess I'll just sit here for a

1316
01:01:51,460 --> 01:01:56,409
while and hang out I don't know oh well

1317
01:01:54,760 --> 01:01:57,790
you know what it's probably should go

1318
01:01:56,409 --> 01:02:03,699
where all the rest of this stuff is so

1319
01:01:57,789 --> 01:02:05,880
where's like B GRA impact where's that

1320
01:02:03,699 --> 01:02:05,879
at

1321
01:02:06,030 --> 01:02:22,079
looks like it's in the renderer code and

1322
01:02:12,900 --> 01:02:23,309
I know interesting where is this so I

1323
01:02:22,079 --> 01:02:26,789
guess this version of the other is too

1324
01:02:23,309 --> 01:02:28,170
old to have file info anyway so in here

1325
01:02:26,789 --> 01:02:31,500
well I guess I can just do this

1326
01:02:28,170 --> 01:02:32,970
it's an handmade map that H is that an

1327
01:02:31,500 --> 01:02:36,838
okay place for image three twos not

1328
01:02:32,969 --> 01:02:39,538
there though maybe I should just make a

1329
01:02:36,838 --> 01:02:40,619
new thing for it I really don't know

1330
01:02:39,539 --> 01:02:42,990
where this should go we don't have a

1331
01:02:40,619 --> 01:02:49,530
place for this sort of stuff you know we

1332
01:02:42,989 --> 01:02:51,000
don't have an image set of things maybe

1333
01:02:49,530 --> 01:02:52,140
I'll just put it in the PNG library and

1334
01:02:51,000 --> 01:02:57,059
that's where all the rest of our image

1335
01:02:52,139 --> 01:03:04,288
stuff is I don't know you got me it's

1336
01:02:57,059 --> 01:03:05,789
there now though alright so we're just

1337
01:03:04,289 --> 01:03:08,720
gonna call that a day because I don't

1338
01:03:05,789 --> 01:03:11,849
care and so now we've got to get back to

1339
01:03:08,719 --> 01:03:14,038
some of the more subtle parts of this so

1340
01:03:11,849 --> 01:03:17,099
first off we've got to make our actual

1341
01:03:14,039 --> 01:03:20,400
MIT bitter Raider stuff exists it

1342
01:03:17,099 --> 01:03:22,859
doesn't right now so we need to define

1343
01:03:20,400 --> 01:03:25,650
this somewhere and so I suppose that

1344
01:03:22,858 --> 01:03:29,429
this should be something probably in the

1345
01:03:25,650 --> 01:03:32,880
renderer stuff let's see probably

1346
01:03:29,429 --> 01:03:34,889
handmade renderer eh so we want to kind

1347
01:03:32,880 --> 01:03:38,940
of introduce this thing as something

1348
01:03:34,889 --> 01:03:42,328
that's like structure map iterator like

1349
01:03:38,940 --> 01:03:43,588
so and you know the the image you study

1350
01:03:42,329 --> 01:03:46,619
too should probably be in here too

1351
01:03:43,588 --> 01:03:48,659
shouldn't it right I mean that's feel

1352
01:03:46,619 --> 01:03:50,608
like that probably should have been in

1353
01:03:48,659 --> 01:03:51,989
the renderer I don't know we kind of

1354
01:03:50,608 --> 01:03:53,369
have a problem where this stuff needs to

1355
01:03:51,989 --> 01:03:56,189
be shared so we might need to kind of

1356
01:03:53,369 --> 01:03:57,660
pull it out into a separate thing like

1357
01:03:56,190 --> 01:04:03,568
you know if I were to do that I'm not

1358
01:03:57,659 --> 01:04:06,149
sure yeah like PNG parser and stuff gets

1359
01:04:03,568 --> 01:04:12,619
upset because it doesn't actually have

1360
01:04:06,150 --> 01:04:12,619
that which is an issue I don't know

1361
01:04:13,599 --> 01:04:24,950
all right I kind of want to make like a

1362
01:04:23,059 --> 01:04:27,079
little image library thing it's sort of

1363
01:04:24,949 --> 01:04:46,989
what I'm feeling we need to do here but

1364
01:04:27,079 --> 01:04:46,990
I don't know so all I'm going to do here

1365
01:04:47,559 --> 01:04:55,010
is just stub these out and then we'll

1366
01:04:53,420 --> 01:05:01,730
figure out how to amplify them in a

1367
01:04:55,010 --> 01:05:09,589
second I'm also kind of want this to not

1368
01:05:01,730 --> 01:05:11,119
be where my head is all right so we may

1369
01:05:09,588 --> 01:05:13,328
need to unpack the texture ops thing

1370
01:05:11,119 --> 01:05:15,440
there a little bit yeah but that's fine

1371
01:05:13,329 --> 01:05:20,210
and we'll deal with that in a second

1372
01:05:15,440 --> 01:05:22,130
so let's see yeah so this stuff the

1373
01:05:20,210 --> 01:05:25,099
problem is the renderer doesn't know

1374
01:05:22,130 --> 01:05:29,420
about the about the PNG library cuz it's

1375
01:05:25,099 --> 01:05:39,019
kind of isolated in that sense and so I

1376
01:05:29,420 --> 01:05:40,579
don't know if like I don't know if that

1377
01:05:39,019 --> 01:05:42,170
makes very much sense right it doesn't

1378
01:05:40,579 --> 01:05:48,950
seem like that should kind of be in

1379
01:05:42,170 --> 01:05:51,260
there right and yeah this doesn't have

1380
01:05:48,949 --> 01:05:53,419
memory arena's for example so that kind

1381
01:05:51,260 --> 01:05:55,280
of pollutes that again so I don't know

1382
01:05:53,420 --> 01:05:57,440
it really does kind of seem like it this

1383
01:05:55,280 --> 01:05:58,940
wants to be its own thing so I think I'm

1384
01:05:57,440 --> 01:06:00,798
just gonna I'm gonna bite the bullet

1385
01:05:58,940 --> 01:06:03,260
there's just gonna be a thing called

1386
01:06:00,798 --> 01:06:07,099
handmade image that just has this stuff

1387
01:06:03,260 --> 01:06:15,140
in it and that's all and everyone does

1388
01:06:07,099 --> 01:06:20,140
it right so there's a new file in

1389
01:06:15,139 --> 01:06:23,578
handmade code called handmade image H

1390
01:06:20,139 --> 01:06:29,848
it's gonna have that

1391
01:06:23,579 --> 01:06:32,849
and it's going to have this and it's

1392
01:06:29,849 --> 01:06:35,190
going to have this and maybe there's

1393
01:06:32,849 --> 01:06:36,568
some other stuff that would have that we

1394
01:06:35,190 --> 01:06:39,420
didn't put in here that should be in

1395
01:06:36,568 --> 01:06:42,538
here right so we we might go ahead and

1396
01:06:39,420 --> 01:06:48,269
kind of move some more stuff into here

1397
01:06:42,539 --> 01:06:49,980
as we go I don't know it's kind of a

1398
01:06:48,268 --> 01:06:51,268
good question as to what we want to do

1399
01:06:49,980 --> 01:06:58,469
there I don't really know what we want

1400
01:06:51,268 --> 01:07:01,979
to do there but something something

1401
01:06:58,469 --> 01:07:04,379
along those lines so then what I'm going

1402
01:07:01,980 --> 01:07:11,329
to do is inside handmade OpenGL we're

1403
01:07:04,380 --> 01:07:18,210
gonna include that and loops and I also

1404
01:07:11,329 --> 01:07:21,930
guess I don't know where the where the

1405
01:07:18,210 --> 01:07:29,009
CPP's get included here but we'll put

1406
01:07:21,929 --> 01:07:31,429
those in here as well I guess cuz we'll

1407
01:07:29,009 --> 01:07:31,429
want that

1408
01:07:36,170 --> 01:07:41,710
our test PNG code will now need this

1409
01:07:48,250 --> 01:08:04,489
something like that actually

1410
01:08:02,599 --> 01:08:19,809
that just means those were in the wrong

1411
01:08:04,489 --> 01:08:22,609
order that's an H H font yeah

1412
01:08:19,810 --> 01:08:24,410
by the way 100% of stuff I'm doing right

1413
01:08:22,609 --> 01:08:26,000
now is just because the CBO Standards

1414
01:08:24,409 --> 01:08:30,500
Committee never knows what they're doing

1415
01:08:26,000 --> 01:08:35,329
just to be clear none of this should be

1416
01:08:30,500 --> 01:08:38,600
necessary even a little bit but you know

1417
01:08:35,329 --> 01:08:40,279
they only have 30 years to fix the order

1418
01:08:38,600 --> 01:08:42,980
of declarations problem and never

1419
01:08:40,279 --> 01:08:45,380
bothered so thanks for that

1420
01:08:42,979 --> 01:08:48,079
glad you have our backs alright so let's

1421
01:08:45,380 --> 01:08:59,500
go into handmade hero now and let's

1422
01:08:48,079 --> 01:08:59,500
actually include these folks

1423
01:09:02,710 --> 01:09:10,880
don't know exactly where we should

1424
01:09:04,880 --> 01:09:18,109
include them but you know I think we're

1425
01:09:10,880 --> 01:09:20,900
good now um alright so now I think

1426
01:09:18,109 --> 01:09:23,000
everything is all set and the only thing

1427
01:09:20,899 --> 01:09:26,358
I really need to do is make a cracking

1428
01:09:23,000 --> 01:09:31,880
version of this that translates the

1429
01:09:26,359 --> 01:09:35,000
texture up request into a nip iterator

1430
01:09:31,880 --> 01:09:36,409
request here and so and we don't really

1431
01:09:35,000 --> 01:09:38,029
have to do that but I might as well so

1432
01:09:36,409 --> 01:09:40,550
they both get done the same in the same

1433
01:09:38,029 --> 01:09:42,559
place and so what I want to do here is

1434
01:09:40,550 --> 01:09:44,119
say look the call to iterate nips that

1435
01:09:42,560 --> 01:09:47,570
you actually call here expects you to

1436
01:09:44,119 --> 01:09:51,649
pass like various stuff to it like the

1437
01:09:47,569 --> 01:09:55,609
base pointer for the data the width and

1438
01:09:51,649 --> 01:09:57,859
the height that may be all it really

1439
01:09:55,609 --> 01:10:01,369
needs yeah I think that is all it really

1440
01:09:57,859 --> 01:10:03,229
needs and so this this thing's job will

1441
01:10:01,369 --> 01:10:05,989
just be to sort of crack that out into

1442
01:10:03,229 --> 01:10:11,000
these right and that'll be fine and then

1443
01:10:05,989 --> 01:10:19,849
we'll implement this in terms of of

1444
01:10:11,000 --> 01:10:21,500
those sort of unrelated elements okay um

1445
01:10:19,850 --> 01:10:25,100
so that's all I really wanted to do

1446
01:10:21,500 --> 01:10:27,050
there and furthermore if we want to and

1447
01:10:25,100 --> 01:10:30,200
I guess there's really no neat reason

1448
01:10:27,050 --> 01:10:34,460
not to at this point this call right

1449
01:10:30,199 --> 01:10:36,859
here could just be like generate local

1450
01:10:34,460 --> 01:10:41,270
MIT Maps or something like you know I'm

1451
01:10:36,859 --> 01:10:43,250
saying like this right here could really

1452
01:10:41,270 --> 01:10:45,110
just be something that we call directly

1453
01:10:43,250 --> 01:10:47,060
and it may be that argues for not

1454
01:10:45,109 --> 01:10:50,949
needing this particular other version of

1455
01:10:47,060 --> 01:10:50,950
the generate mips call either

1456
01:10:56,189 --> 01:11:03,009
so what we would do is we'd say okay you

1457
01:11:00,069 --> 01:11:04,289
know here's the texture if there's the

1458
01:11:03,010 --> 01:11:10,210
width

1459
01:11:04,289 --> 01:11:12,100
there's the height I don't remember

1460
01:11:10,210 --> 01:11:15,039
where the data is on this particular

1461
01:11:12,100 --> 01:11:18,219
thing but I think it's like there and

1462
01:11:15,039 --> 01:11:24,569
off we would go right and so here we've

1463
01:11:18,219 --> 01:11:34,569
got generate sequential MIPS same call

1464
01:11:24,569 --> 01:11:36,429
and this would just do this right so

1465
01:11:34,569 --> 01:11:38,710
here we have an iterator for like this

1466
01:11:36,429 --> 01:11:40,779
is basically just a little really crappy

1467
01:11:38,710 --> 01:11:43,899
image library now right we can scale an

1468
01:11:40,779 --> 01:11:47,649
image down by two we can iterate over

1469
01:11:43,899 --> 01:11:49,839
the MIT Maps levels for something using

1470
01:11:47,649 --> 01:11:52,750
correct pointer movement and stuff which

1471
01:11:49,840 --> 01:11:56,289
we'll implement in a second and then we

1472
01:11:52,750 --> 01:11:58,000
can also do our generate sequential mips

1473
01:11:56,289 --> 01:12:00,369
call which is just a utility that does

1474
01:11:58,000 --> 01:12:03,880
exactly what you want it to do given a

1475
01:12:00,369 --> 01:12:07,300
set of pointers to it so I think that's

1476
01:12:03,880 --> 01:12:08,800
good and then over there in the OpenGL

1477
01:12:07,300 --> 01:12:11,529
side of things where we're actually

1478
01:12:08,800 --> 01:12:13,119
submitting it I'm gonna say like okay we

1479
01:12:11,529 --> 01:12:15,880
only now have one of these I don't need

1480
01:12:13,119 --> 01:12:18,550
to make a utility for it it's just gonna

1481
01:12:15,880 --> 01:12:24,159
call it with the unpacked version of all

1482
01:12:18,550 --> 01:12:27,130
the data and off we go right okay so now

1483
01:12:24,158 --> 01:12:28,149
I think we're down to just weld I guess

1484
01:12:27,130 --> 01:12:30,489
there's one other thing we can do that's

1485
01:12:28,149 --> 01:12:32,289
not that we need to fill out this stuff

1486
01:12:30,488 --> 01:12:33,279
properly and that'll produce one more

1487
01:12:32,289 --> 01:12:35,560
call which is to figure out how much

1488
01:12:33,279 --> 01:12:37,809
memory we need for a MIT map so we might

1489
01:12:35,560 --> 01:12:39,280
as well do this as well so in here I'm

1490
01:12:37,810 --> 01:12:41,760
just gonna add a thing that's like gen

1491
01:12:39,279 --> 01:12:41,759
MIT Maps

1492
01:12:51,849 --> 01:12:54,489
we don't really need an entire pool for

1493
01:12:53,380 --> 01:12:55,989
it but we don't really care about the

1494
01:12:54,488 --> 01:12:57,789
memory let's go use for this load asset

1495
01:12:55,988 --> 01:12:59,138
work is not something that gets

1496
01:12:57,789 --> 01:13:00,219
allocated very often so it's probably

1497
01:12:59,139 --> 01:13:01,679
doesn't really matter one way or the

1498
01:13:00,219 --> 01:13:05,079
other but for now we're gonna actually

1499
01:13:01,679 --> 01:13:06,908
flag it just in case we're gonna say if

1500
01:13:05,079 --> 01:13:09,130
we need to generate the MIT maps than we

1501
01:13:06,908 --> 01:13:11,439
do and that's really it

1502
01:13:09,130 --> 01:13:13,150
but that means somewhere somebody had to

1503
01:13:11,439 --> 01:13:15,609
actually acquire enough memory to

1504
01:13:13,149 --> 01:13:19,359
actually transfer these MIT Maps right

1505
01:13:15,609 --> 01:13:21,368
and so in here we need a thing that's

1506
01:13:19,359 --> 01:13:24,009
like gem it Maps equals true or false

1507
01:13:21,368 --> 01:13:26,198
something like that right and so the

1508
01:13:24,010 --> 01:13:30,159
question is how do we know which one we

1509
01:13:26,198 --> 01:13:31,479
want to do and based on you know we need

1510
01:13:30,158 --> 01:13:32,738
some information about whether or not

1511
01:13:31,479 --> 01:13:35,049
this thing's supposed to have MIT Maps

1512
01:13:32,738 --> 01:13:36,939
or whether it's not and if it's is

1513
01:13:35,050 --> 01:13:39,210
supposed to have MIT maps we need to

1514
01:13:36,939 --> 01:13:41,500
generate more memory because when we

1515
01:13:39,210 --> 01:13:44,800
reserved space for it it needs to have

1516
01:13:41,500 --> 01:13:45,969
space for all the MIT Maps as well so

1517
01:13:44,800 --> 01:13:48,760
what we're looking at here is something

1518
01:13:45,969 --> 01:13:51,609
that's maybe a little bit more like this

1519
01:13:48,760 --> 01:13:53,610
right where we're saying look when we

1520
01:13:51,609 --> 01:13:55,569
begin texture up we kind of need to know

1521
01:13:53,609 --> 01:13:58,299
whether or not it should have MIT maps

1522
01:13:55,569 --> 01:14:00,698
that sort of thing uh what I would say

1523
01:13:58,300 --> 01:14:03,010
is passing forward might not be the best

1524
01:14:00,698 --> 01:14:04,448
idea could be that the texture up itself

1525
01:14:03,010 --> 01:14:06,489
maybe should be recording this

1526
01:14:04,448 --> 01:14:08,259
particular piece of information and then

1527
01:14:06,488 --> 01:14:10,899
we just look to see whether it said it

1528
01:14:08,260 --> 01:14:14,829
wanted MIT Maps or not that seems like a

1529
01:14:10,899 --> 01:14:19,059
potentially valid way to do this and so

1530
01:14:14,829 --> 01:14:21,069
I might suggest that's the right call if

1531
01:14:19,060 --> 01:14:23,469
you look at what's going on here I guess

1532
01:14:21,069 --> 01:14:25,809
what I'm saying is that maybe what I

1533
01:14:23,469 --> 01:14:27,368
actually wanted and if that's the case

1534
01:14:25,810 --> 01:14:28,659
then we wouldn't put that here it would

1535
01:14:27,368 --> 01:14:32,889
actually be this thing that determines

1536
01:14:28,658 --> 01:14:34,448
it whether or not it goes in there and

1537
01:14:32,889 --> 01:14:35,829
how it's gonna operate

1538
01:14:34,448 --> 01:14:37,059
I knew that makes sense because a

1539
01:14:35,829 --> 01:14:38,529
renderer is the thing that really tells

1540
01:14:37,060 --> 01:14:40,000
us whether it wants MIT Maps or not and

1541
01:14:38,529 --> 01:14:43,238
maybe want mentat for everything I don't

1542
01:14:40,000 --> 01:14:45,010
know it's hard to say point being let's

1543
01:14:43,238 --> 01:14:46,988
just say that gem it Maps comes back on

1544
01:14:45,010 --> 01:14:48,760
that line if that's the case then the

1545
01:14:46,988 --> 01:14:50,678
work doesn't actually have it in it it's

1546
01:14:48,760 --> 01:14:52,329
baked in to that particular texture op

1547
01:14:50,679 --> 01:14:55,980
which means that this check right here

1548
01:14:52,329 --> 01:14:55,979
would actually go

1549
01:14:58,260 --> 01:15:09,010
here right this complete previous rights

1550
01:15:03,429 --> 01:15:10,510
before future rights I do wonder if

1551
01:15:09,010 --> 01:15:12,309
maybe we need to make sure we complete

1552
01:15:10,510 --> 01:15:14,949
all our work before that I haven't

1553
01:15:12,309 --> 01:15:16,840
analyzed that path of the code much so I

1554
01:15:14,948 --> 01:15:23,948
might say we should just do this just to

1555
01:15:16,840 --> 01:15:26,019
be safe that kind of thing and then what

1556
01:15:23,948 --> 01:15:29,049
we would do is just generate the

1557
01:15:26,019 --> 01:15:31,119
sequential MIPS here as necessary right

1558
01:15:29,050 --> 01:15:32,889
so that would mean that the texture off

1559
01:15:31,118 --> 01:15:34,389
when allocated tells us whether we Gen

1560
01:15:32,889 --> 01:15:35,739
the MIPS or not we don't actually store

1561
01:15:34,389 --> 01:15:37,599
it anywhere we just kind of do what it

1562
01:15:35,738 --> 01:15:39,879
says that means when you call begin

1563
01:15:37,599 --> 01:15:42,538
texture up here what it would do is and

1564
01:15:39,880 --> 01:15:45,159
I think we already kind of know right

1565
01:15:42,538 --> 01:15:46,840
which is that we want to know whether

1566
01:15:45,158 --> 01:15:49,958
this one's going to be special or not

1567
01:15:46,840 --> 01:15:53,498
like is this is this thing going to be a

1568
01:15:49,958 --> 01:15:55,238
special texture or isn't it right and so

1569
01:15:53,498 --> 01:15:59,228
inside this texture wrap thing when we

1570
01:15:55,238 --> 01:16:08,228
actually go to to create it what I could

1571
01:15:59,229 --> 01:16:11,880
do is this thing right so when we ask

1572
01:16:08,229 --> 01:16:15,150
whether something's a special texture it

1573
01:16:11,880 --> 01:16:15,150
see here

1574
01:16:28,729 --> 01:16:34,069
so I begin the nice I'm not really sure

1575
01:16:34,309 --> 01:16:43,139
when that determination actually got

1576
01:16:37,050 --> 01:16:47,029
made but if you look at a texture up the

1577
01:16:43,139 --> 01:16:47,029
texture up has the texture in it

1578
01:16:56,590 --> 01:17:06,340
am I wrong about that yeah the texture

1579
01:17:03,130 --> 01:17:09,090
up has the texture in it that you're

1580
01:17:06,340 --> 01:17:09,090
going to use

1581
01:17:18,109 --> 01:17:26,349
so when you actually get that texture up

1582
01:17:21,649 --> 01:17:26,349
out this part here

1583
01:17:34,649 --> 01:17:39,229
I mean that's gonna tell you everything

1584
01:17:36,329 --> 01:17:39,229
you need to know right

1585
01:17:47,829 --> 01:17:53,890
I'll be honest I don't really remember

1586
01:17:49,270 --> 01:17:57,900
how we were signing those so so our

1587
01:17:53,890 --> 01:17:57,900
texture up texture

1588
01:18:03,920 --> 01:18:14,989
yeah it gets assigned right here in

1589
01:18:08,729 --> 01:18:19,099
refer to texture so I think that's it I

1590
01:18:14,989 --> 01:18:21,840
think that's all there is to it right so

1591
01:18:19,100 --> 01:18:23,970
I want to say that the best way to do

1592
01:18:21,840 --> 01:18:27,449
this is just yeah when we call begin

1593
01:18:23,970 --> 01:18:29,280
texture up the renderer is free at this

1594
01:18:27,449 --> 01:18:30,479
point to say what it wants to do and

1595
01:18:29,279 --> 01:18:32,939
what it doesn't want to do but I think

1596
01:18:30,479 --> 01:18:35,039
all it really should do is say is it a

1597
01:18:32,939 --> 01:18:37,649
special texture if it is it doesn't want

1598
01:18:35,039 --> 01:18:39,840
MIT Maps if it's and that's that's it

1599
01:18:37,649 --> 01:18:42,059
right so when we come through here and

1600
01:18:39,840 --> 01:18:43,380
we do this texture app result and you

1601
01:18:42,060 --> 01:18:48,240
know by the time we get down to the

1602
01:18:43,380 --> 01:18:50,489
bottom here we should have one right and

1603
01:18:48,239 --> 01:18:58,289
it's going to return it so at that point

1604
01:18:50,489 --> 01:18:59,519
we just want to do our check but of

1605
01:18:58,289 --> 01:19:04,899
course the problem is it gets assigned

1606
01:18:59,520 --> 01:19:08,229
there all right so never mind

1607
01:19:04,899 --> 01:19:08,228
[Music]

1608
01:19:13,199 --> 01:19:29,170
hmm I say so this is a little more

1609
01:19:26,649 --> 01:19:36,309
complicated and we do have to pass it

1610
01:19:29,170 --> 01:19:40,109
down here right like this thing needs to

1611
01:19:36,310 --> 01:19:43,390
know because it needs to be able to

1612
01:19:40,109 --> 01:19:48,609
produce the right size for the transfer

1613
01:19:43,390 --> 01:19:50,410
looking at this so I think this is what

1614
01:19:48,609 --> 01:19:53,380
I want to do to clean up this the way

1615
01:19:50,409 --> 01:19:55,180
this is is flowing so if you look at

1616
01:19:53,380 --> 01:19:57,640
width and height it actually is only

1617
01:19:55,180 --> 01:20:00,550
used to create the transfer partition

1618
01:19:57,640 --> 01:20:03,430
here right and so I think what we want

1619
01:20:00,550 --> 01:20:06,400
is actually this begin texture up should

1620
01:20:03,430 --> 01:20:08,440
just take size requested so what we want

1621
01:20:06,399 --> 01:20:10,629
to do is in here we want to do a size

1622
01:20:08,439 --> 01:20:15,489
requested and we want to pass down size

1623
01:20:10,630 --> 01:20:18,609
requested right this will not be

1624
01:20:15,489 --> 01:20:22,449
computed here it'll just say size

1625
01:20:18,609 --> 01:20:30,159
requested and we need to know do we need

1626
01:20:22,449 --> 01:20:32,679
MIT Maps right if we need MIT maps then

1627
01:20:30,159 --> 01:20:35,409
we need to create a size requested that

1628
01:20:32,680 --> 01:20:40,720
has room for all of the MIT levels in it

1629
01:20:35,409 --> 01:20:43,090
right that's what has to happen and we

1630
01:20:40,720 --> 01:20:46,630
would update our size requested to

1631
01:20:43,090 --> 01:20:49,869
contain that entire set of texels right

1632
01:20:46,630 --> 01:20:52,630
now we could create that closed form I'm

1633
01:20:49,869 --> 01:20:55,599
not actually even going to do that what

1634
01:20:52,630 --> 01:20:57,850
I'm going to do instead is I'm going to

1635
01:20:55,600 --> 01:21:01,570
produce size requested by actually

1636
01:20:57,850 --> 01:21:03,190
looping over in the same way that we're

1637
01:21:01,569 --> 01:21:05,170
doing before because I don't mind

1638
01:21:03,189 --> 01:21:07,000
spending that extra speed to make sure

1639
01:21:05,170 --> 01:21:09,810
that we always compute a completely

1640
01:21:07,000 --> 01:21:09,810
consistent result

1641
01:21:27,159 --> 01:21:31,789
okay so I want to do it like this where

1642
01:21:30,109 --> 01:21:34,159
we say let's ask first if we're gonna

1643
01:21:31,789 --> 01:21:36,920
generate MIT Maps and that's a call that

1644
01:21:34,159 --> 01:21:40,220
this actually thing was already doing so

1645
01:21:36,920 --> 01:21:43,520
we can do that pretty simply then what

1646
01:21:40,220 --> 01:21:44,960
we're gonna do is when we do the rest of

1647
01:21:43,520 --> 01:21:47,990
this stuff right we do get total size

1648
01:21:44,960 --> 01:21:50,319
from it for MIPS we would pass down the

1649
01:21:47,989 --> 01:21:54,579
width and the height and there in fact

1650
01:21:50,319 --> 01:21:54,579
let's just do that we know we need that

1651
01:21:55,989 --> 01:22:01,519
and I think then we're good to go right

1652
01:21:59,300 --> 01:22:03,170
so what I'm going to do here is inside

1653
01:22:01,520 --> 01:22:04,310
acquired texture handle that's where

1654
01:22:03,170 --> 01:22:06,109
we're determining whether or not we

1655
01:22:04,310 --> 01:22:08,270
would do it so we're calling this thing

1656
01:22:06,109 --> 01:22:12,559
here we're dimensions require a special

1657
01:22:08,270 --> 01:22:15,380
texture right and so that I'm just gonna

1658
01:22:12,560 --> 01:22:17,270
pull that call out so when we do the

1659
01:22:15,380 --> 01:22:19,690
acquired texture handle we're gonna pass

1660
01:22:17,270 --> 01:22:25,360
in whether or not it's special right I

1661
01:22:19,689 --> 01:22:25,359
and so this particular call

1662
01:22:31,729 --> 01:22:37,049
right dimensions prior special texture

1663
01:22:34,520 --> 01:22:38,490
that is sort of the opposite of Jen

1664
01:22:37,050 --> 01:22:49,470
Mitch map so you know we could just say

1665
01:22:38,489 --> 01:22:51,899
like special like so and we know we want

1666
01:22:49,470 --> 01:22:55,770
to generate MIT Maps well in fact I'll

1667
01:22:51,899 --> 01:23:03,269
just leave it like that when it's not

1668
01:22:55,770 --> 01:23:07,590
special makes sense and so yeah I think

1669
01:23:03,270 --> 01:23:10,170
that's all we really needed all we

1670
01:23:07,590 --> 01:23:11,850
really needed then when we call begin

1671
01:23:10,170 --> 01:23:13,560
texture up we pass the size we're

1672
01:23:11,850 --> 01:23:17,430
actually expecting to use which we will

1673
01:23:13,560 --> 01:23:19,620
let ourselves created space for them it

1674
01:23:17,430 --> 01:23:21,270
maps by computing that there then when

1675
01:23:19,619 --> 01:23:22,710
we come down through here when we're

1676
01:23:21,270 --> 01:23:25,410
going to acquire the texture handle

1677
01:23:22,710 --> 01:23:27,689
instead of this like bit that we do here

1678
01:23:25,409 --> 01:23:30,930
we're actually gonna pass down a special

1679
01:23:27,689 --> 01:23:33,119
flag so this just gets me through 2x

1680
01:23:30,930 --> 01:23:38,400
special rather than ever doing the gyms

1681
01:23:33,119 --> 01:23:40,319
right and that's it so that's all good

1682
01:23:38,399 --> 01:23:43,009
then when we do refer to texture it does

1683
01:23:40,319 --> 01:23:50,609
this little bit map with height thing

1684
01:23:43,010 --> 01:23:52,829
for texture and I think that's it all

1685
01:23:50,609 --> 01:23:54,420
right good good good starting to look

1686
01:23:52,829 --> 01:23:58,680
much cleaner starting to look much

1687
01:23:54,420 --> 01:24:02,760
cleaner okay so now we just have to

1688
01:23:58,680 --> 01:24:05,940
implement these begin texture up here in

1689
01:24:02,760 --> 01:24:10,140
our example code we know that that is

1690
01:24:05,939 --> 01:24:12,329
just a size requested thing right this

1691
01:24:10,140 --> 01:24:13,710
is this is our test renderer so we don't

1692
01:24:12,329 --> 01:24:16,519
really care about it but you know just

1693
01:24:13,710 --> 01:24:16,520
might as well keep it working

1694
01:24:21,948 --> 01:24:25,129
same here

1695
01:24:35,149 --> 01:24:40,670
all right so now finally after much

1696
01:24:38,720 --> 01:24:42,230
massaging I think we have gotten to the

1697
01:24:40,670 --> 01:24:44,810
place where we can just implement our

1698
01:24:42,229 --> 01:24:46,459
actual the actual logic that we

1699
01:24:44,810 --> 01:24:48,860
requested and be good to go

1700
01:24:46,460 --> 01:24:51,680
like I said when we do get total size

1701
01:24:48,859 --> 01:24:53,960
for MIPS I actually want to do this so

1702
01:24:51,680 --> 01:24:55,820
that we just loop and that's just doing

1703
01:24:53,960 --> 01:24:57,439
to absolutely ensure that we're using

1704
01:24:55,819 --> 01:24:59,809
the same calculations everywhere even

1705
01:24:57,439 --> 01:25:01,489
though we could use the power function

1706
01:24:59,810 --> 01:25:03,860
and stuff to make it right I don't care

1707
01:25:01,489 --> 01:25:06,019
about the speed of this call at all cuz

1708
01:25:03,859 --> 01:25:07,729
it won't amount to anything so I'd

1709
01:25:06,020 --> 01:25:09,080
rather not introduce the possibility of

1710
01:25:07,729 --> 01:25:11,149
bugs at least not at the immediate

1711
01:25:09,079 --> 01:25:14,479
moment so what I want to do here is just

1712
01:25:11,149 --> 01:25:16,339
have an iteration just like we would do

1713
01:25:14,479 --> 01:25:18,949
in any other case where we iterate the

1714
01:25:16,340 --> 01:25:20,960
MIPS all the way down to the end of the

1715
01:25:18,949 --> 01:25:34,010
chain and each time through we just sum

1716
01:25:20,960 --> 01:25:36,470
it up right so that just produces a

1717
01:25:34,010 --> 01:25:39,699
summation of all of the space we would

1718
01:25:36,470 --> 01:25:44,449
expect to take for each one of these

1719
01:25:39,699 --> 01:25:46,670
levels of the mill right and then we

1720
01:25:44,449 --> 01:25:50,000
just need to implement the part where we

1721
01:25:46,670 --> 01:25:57,739
sort of advance and an iterate here and

1722
01:25:50,000 --> 01:26:00,229
that should be something like how do we

1723
01:25:57,739 --> 01:26:08,119
want to do this so that should be

1724
01:26:00,229 --> 01:26:10,569
something like this probably when we

1725
01:26:08,119 --> 01:26:10,569
start out

1726
01:26:15,439 --> 01:26:21,809
we know the level equals zero we know

1727
01:26:19,560 --> 01:26:27,180
the image width equals the width we know

1728
01:26:21,810 --> 01:26:30,270
the image height it's the height and we

1729
01:26:27,180 --> 01:26:39,980
know the myth image pixels equals the

1730
01:26:30,270 --> 01:26:45,990
data right the validity of this would be

1731
01:26:39,979 --> 01:26:57,359
results equals myth image width not

1732
01:26:45,989 --> 01:26:59,069
equal to zero I guess I would say would

1733
01:26:57,359 --> 01:27:02,699
be the easiest thing we could also do

1734
01:26:59,069 --> 01:27:03,750
like a valid not sure how I'm not sure

1735
01:27:02,699 --> 01:27:05,429
what we're gonna do with that we'll take

1736
01:27:03,750 --> 01:27:08,670
a look at that afterwards we do the next

1737
01:27:05,430 --> 01:27:10,980
step and advancing well some of its

1738
01:27:08,670 --> 01:27:14,069
simple some of its not obviously to make

1739
01:27:10,979 --> 01:27:20,239
the level go up we increment it not very

1740
01:27:14,069 --> 01:27:20,239
hard in order to make the sizes decrease

1741
01:27:22,010 --> 01:27:35,220
we just divide them right and in order

1742
01:27:29,430 --> 01:27:38,579
to advance the pixels we just need to

1743
01:27:35,220 --> 01:27:41,659
figure out some new value that that

1744
01:27:38,579 --> 01:27:41,659
should actually be

1745
01:27:43,829 --> 01:27:49,600
now the problem that we're gonna have

1746
01:27:45,819 --> 01:27:52,420
here actually I suppose I don't really

1747
01:27:49,600 --> 01:28:16,660
need to do that I suppose I can just do

1748
01:27:52,420 --> 01:28:17,920
this right yeah so the main problem that

1749
01:28:16,659 --> 01:28:20,680
now we're going to face is just

1750
01:28:17,920 --> 01:28:24,039
termination and how we want to consider

1751
01:28:20,680 --> 01:28:25,810
like whether or not we want to or I

1752
01:28:24,039 --> 01:28:29,409
should say how we want to consider the

1753
01:28:25,810 --> 01:28:30,910
mid-levels to be terminated so the

1754
01:28:29,409 --> 01:28:32,859
problem that we're going to have is if

1755
01:28:30,909 --> 01:28:34,479
we want this thing to work for arbitrary

1756
01:28:32,859 --> 01:28:36,429
rectangular images which we don't

1757
01:28:34,479 --> 01:28:39,279
actually use right now and so maybe it's

1758
01:28:36,430 --> 01:28:41,380
just a pointless endeavor but what we're

1759
01:28:39,279 --> 01:28:43,149
gonna have here is one of these two

1760
01:28:41,380 --> 01:28:45,489
things on a rectangular image will

1761
01:28:43,149 --> 01:28:46,839
bottom out before the other so the width

1762
01:28:45,489 --> 01:28:48,069
would bottom out before the height or

1763
01:28:46,840 --> 01:28:50,529
the height would bottom out before the

1764
01:28:48,069 --> 01:28:53,729
width and you would want to keep

1765
01:28:50,529 --> 01:28:56,769
shrinking it down by two each time

1766
01:28:53,729 --> 01:28:59,619
leaving the other one fixed at one right

1767
01:28:56,770 --> 01:29:11,490
and so what you'd want to do is

1768
01:28:59,619 --> 01:29:11,489
something like this in that case

1769
01:29:13,930 --> 01:29:20,600
so if both of these things are higher

1770
01:29:19,130 --> 01:29:24,079
than one then you're just doing a

1771
01:29:20,600 --> 01:29:25,700
standard shrink by two but if one of

1772
01:29:24,079 --> 01:29:29,510
these things bottoms out early because

1773
01:29:25,699 --> 01:29:31,849
let's say it was a 256 by 512 so one

1774
01:29:29,510 --> 01:29:33,079
dimension bottom down early you don't

1775
01:29:31,850 --> 01:29:34,970
want to divide it by two because

1776
01:29:33,079 --> 01:29:36,500
otherwise you've ended up in situation

1777
01:29:34,970 --> 01:29:38,060
where you've got a zero width or a zero

1778
01:29:36,500 --> 01:29:39,710
height image prior to the other

1779
01:29:38,060 --> 01:29:43,490
dimension actually collapsing down to

1780
01:29:39,710 --> 01:29:45,859
one but we also want to know the case

1781
01:29:43,489 --> 01:29:47,149
where you have both of them equal to one

1782
01:29:45,859 --> 01:29:50,199
because that was the end of the MIT

1783
01:29:47,149 --> 01:29:52,939
chain so what we might want to do and I

1784
01:29:50,199 --> 01:29:56,449
again just say might because we might

1785
01:29:52,939 --> 01:30:03,669
want to say all right look if MIT level

1786
01:29:56,449 --> 01:30:08,889
with equals one and MIT level height

1787
01:30:03,670 --> 01:30:08,890
equals one then that's the end of it

1788
01:30:15,359 --> 01:30:29,619
something like that right I don't know

1789
01:30:27,460 --> 01:30:33,850
not the greatest thing since sliced

1790
01:30:29,619 --> 01:30:36,969
bread but looks okay right don't ask me

1791
01:30:33,850 --> 01:30:44,410
why this has level everywhere supposed

1792
01:30:36,969 --> 01:30:47,890
to be image just a brain fart don't ask

1793
01:30:44,409 --> 01:30:51,569
me why I'm doing this by hand probably

1794
01:30:47,890 --> 01:30:51,570
because I'm in between editors right now

1795
01:30:54,180 --> 01:31:10,780
they're all right uh so that's fine what

1796
01:31:02,020 --> 01:31:13,030
else we got okay so I think that's

1797
01:31:10,779 --> 01:31:15,009
basically what we want I think we've

1798
01:31:13,029 --> 01:31:16,539
done the plumbing so now we just have to

1799
01:31:15,010 --> 01:31:17,980
actually go through and make sure we've

1800
01:31:16,539 --> 01:31:19,359
implemented all this stuff correctly

1801
01:31:17,979 --> 01:31:21,279
because I kind of spammed a lot of stuff

1802
01:31:19,359 --> 01:31:24,549
out in there and it's probably not gonna

1803
01:31:21,279 --> 01:31:26,859
work so what I want to do first is I

1804
01:31:24,550 --> 01:31:29,469
wanted to switch to debug build for a

1805
01:31:26,859 --> 01:31:31,359
couple seconds go step through this code

1806
01:31:29,469 --> 01:31:32,980
and make sure I'm doing even something

1807
01:31:31,359 --> 01:31:36,039
remotely related to what I thought I was

1808
01:31:32,979 --> 01:31:46,869
doing and and get that going

1809
01:31:36,039 --> 01:31:48,369
right all right so let's start by by

1810
01:31:46,869 --> 01:31:52,149
looking at some of the submission

1811
01:31:48,369 --> 01:31:54,340
process here let's let's try to make

1812
01:31:52,149 --> 01:31:56,710
this stuff go alright so in here we're

1813
01:31:54,340 --> 01:31:58,960
just doing our standard white pixel

1814
01:31:56,710 --> 01:32:02,500
that's just used for making sure nothing

1815
01:31:58,960 --> 01:32:05,380
actually happens when we do non textured

1816
01:32:02,500 --> 01:32:06,640
rendering so that obviously comes

1817
01:32:05,380 --> 01:32:10,529
through and the size requested should

1818
01:32:06,640 --> 01:32:10,530
just be four for a single pixel

1819
01:32:12,828 --> 01:32:21,689
four so that's fine let's double check

1820
01:32:18,599 --> 01:32:25,498
now when we actually go to request some

1821
01:32:21,689 --> 01:32:28,768
kind of a texture for you know actual

1822
01:32:25,498 --> 01:32:30,899
use right so in here we've got load

1823
01:32:28,769 --> 01:32:33,090
bitmap we're passing that a particular

1824
01:32:30,899 --> 01:32:35,248
ID right it didn't hit the cache so now

1825
01:32:33,090 --> 01:32:37,710
we're gonna do something so let's see

1826
01:32:35,248 --> 01:32:39,689
what it is we're going to do here's the

1827
01:32:37,710 --> 01:32:41,130
width that we asked for here's the

1828
01:32:39,689 --> 01:32:45,448
height that's what we expect that's our

1829
01:32:41,130 --> 01:32:48,538
standard sort of overly large texture if

1830
01:32:45,448 --> 01:32:50,368
we look at what happens here we can see

1831
01:32:48,538 --> 01:32:53,819
whether we got you know special should

1832
01:32:50,368 --> 01:32:56,009
be zero so yeah and it is gen MIT maps

1833
01:32:53,819 --> 01:32:58,799
should therefore be one that means that

1834
01:32:56,010 --> 01:33:04,260
the size requested rather than being

1835
01:32:58,800 --> 01:33:06,920
this so so rather than that should be

1836
01:33:04,260 --> 01:33:10,739
some other thing based on this total

1837
01:33:06,920 --> 01:33:14,309
size for MIPS parameter that we came

1838
01:33:10,738 --> 01:33:16,768
through here but it's not so we've

1839
01:33:14,309 --> 01:33:19,980
already got a bug here it's here

1840
01:33:16,769 --> 01:33:26,460
probably because I forgot to put a plus

1841
01:33:19,979 --> 01:33:28,709
sign in or something yeah of course that

1842
01:33:26,460 --> 01:33:30,480
also means we've got a separate bug

1843
01:33:28,710 --> 01:33:32,189
because this should have produced a much

1844
01:33:30,479 --> 01:33:36,209
smaller value if it was just using the

1845
01:33:32,189 --> 01:33:40,589
last result so we've got some other bug

1846
01:33:36,210 --> 01:33:42,899
there too that's not working correctly

1847
01:33:40,590 --> 01:33:48,699
yes and you can see exactly what it is

1848
01:33:42,899 --> 01:33:52,089
these cases have been flipped okay

1849
01:33:48,698 --> 01:33:56,349
all right so let's try again got some

1850
01:33:52,090 --> 01:33:59,039
bugs out of there and there we go so

1851
01:33:56,350 --> 01:34:02,140
jumping in here don't care about that

1852
01:33:59,039 --> 01:34:04,710
we're going to look at that summation

1853
01:34:02,140 --> 01:34:07,390
call now we do get total size four MIPS

1854
01:34:04,710 --> 01:34:11,590
and let's see if that goes up kind of as

1855
01:34:07,390 --> 01:34:13,719
we would expect so there's that first

1856
01:34:11,590 --> 01:34:15,250
nip level that's exactly the number we

1857
01:34:13,719 --> 01:34:19,409
would expect now it should go up by half

1858
01:34:15,250 --> 01:34:19,409
that I'm sorry a quarter of that again

1859
01:34:19,590 --> 01:34:28,329
looks good yep yep lovely

1860
01:34:26,529 --> 01:34:30,819
how many MIT levels are we expecting at

1861
01:34:28,329 --> 01:34:34,390
a 512 by 512 that's two to the nine

1862
01:34:30,819 --> 01:34:37,059
right so we would expect this this value

1863
01:34:34,390 --> 01:34:38,350
yep to keep going and you actually this

1864
01:34:37,060 --> 01:34:41,770
is nice we can watch the width and

1865
01:34:38,350 --> 01:34:47,110
height go down here there's four to one

1866
01:34:41,770 --> 01:34:48,670
and now we should bail right now I just

1867
01:34:47,109 --> 01:34:49,988
want to make sure it actually sum to the

1868
01:34:48,670 --> 01:34:51,399
one so I'm gonna run that one more time

1869
01:34:49,988 --> 01:34:53,559
because I just want to make sure we

1870
01:34:51,399 --> 01:34:57,519
actually summed the one and didn't skip

1871
01:34:53,560 --> 01:35:01,360
the one so I want to do that but other

1872
01:34:57,520 --> 01:35:04,770
than that that look nice so here we have

1873
01:35:01,359 --> 01:35:08,170
summed the 512 by 512

1874
01:35:04,770 --> 01:35:11,230
there's the 256 there's the 128 so let's

1875
01:35:08,170 --> 01:35:15,250
go all the way down we've some to the

1876
01:35:11,229 --> 01:35:18,279
floor some to the to some of the 1

1877
01:35:15,250 --> 01:35:19,630
perfect so that's looking like it works

1878
01:35:18,279 --> 01:35:22,149
exactly like I want now that we've fixed

1879
01:35:19,630 --> 01:35:23,619
our stupid bug when I come back out

1880
01:35:22,149 --> 01:35:28,559
through here now our size requested

1881
01:35:23,619 --> 01:35:30,819
should be a little bit more there we go

1882
01:35:28,560 --> 01:35:34,090
and what you can see too is MIT maps

1883
01:35:30,819 --> 01:35:35,289
don't take up that much space you can

1884
01:35:34,090 --> 01:35:37,449
see the day between those numbers it's

1885
01:35:35,289 --> 01:35:39,609
not even twice as much for doing all

1886
01:35:37,448 --> 01:35:42,698
that filtering it's more like a quarter

1887
01:35:39,609 --> 01:35:44,738
again the size there right you know so

1888
01:35:42,698 --> 01:35:48,279
it's not too bad of a price to pay for

1889
01:35:44,738 --> 01:35:51,299
all this additional filtering just

1890
01:35:48,279 --> 01:35:53,559
something to think about

1891
01:35:51,300 --> 01:35:55,539
so when we go in here to begin texture

1892
01:35:53,560 --> 01:35:58,660
up we asked that much size hopefully we

1893
01:35:55,539 --> 01:36:01,689
get it we then start our task and we

1894
01:35:58,659 --> 01:36:03,248
feed forward this stuff here

1895
01:36:01,689 --> 01:36:04,749
I'm assuming that we got the correct

1896
01:36:03,248 --> 01:36:07,078
kind of handle because I'm assuming that

1897
01:36:04,748 --> 01:36:09,550
we asked for no special so that

1898
01:36:07,078 --> 01:36:11,649
presumably is good if I look at the

1899
01:36:09,550 --> 01:36:16,538
texture up handle I'm hoping that that's

1900
01:36:11,649 --> 01:36:18,728
correct it looks okay right I don't know

1901
01:36:16,538 --> 01:36:20,768
how the indices work with special

1902
01:36:18,729 --> 01:36:25,030
handles let's just take a quick look at

1903
01:36:20,769 --> 01:36:27,248
that it's got texture special a bit set

1904
01:36:25,029 --> 01:36:31,868
obviously that's not true here so that's

1905
01:36:27,248 --> 01:36:35,679
good and off we go

1906
01:36:31,868 --> 01:36:37,509
okay so that looks pretty nice pretty

1907
01:36:35,679 --> 01:36:38,949
happy with that let's take a look at

1908
01:36:37,510 --> 01:36:40,840
what happens now when we actually try to

1909
01:36:38,948 --> 01:36:47,109
generate the sequential bitmaps part of

1910
01:36:40,840 --> 01:36:50,769
things this is not what I wanted how did

1911
01:36:47,109 --> 01:36:54,429
we get here first shouldn't I have hit

1912
01:36:50,769 --> 01:36:58,179
my submission call who is getting

1913
01:36:54,429 --> 01:37:05,489
submitted who Gus who got sunk this time

1914
01:36:58,179 --> 01:37:05,489
around hmm let's take a look

1915
01:37:14,088 --> 01:37:18,318
so we're getting an invalid texture

1916
01:37:16,429 --> 01:37:22,969
format there which suggests that maybe

1917
01:37:18,319 --> 01:37:23,780
the well can't see this because it's

1918
01:37:22,969 --> 01:37:24,979
behind my head

1919
01:37:23,779 --> 01:37:28,668
I'm wonder if I need to kind of move

1920
01:37:24,979 --> 01:37:30,969
this over here that's probably better

1921
01:37:28,668 --> 01:37:30,969
huh

1922
01:37:34,090 --> 01:37:39,190
yeah so if we take a look at what we

1923
01:37:37,239 --> 01:37:42,179
were doing there when we're calling this

1924
01:37:39,189 --> 01:37:45,069
it looks like it was unhappy about that

1925
01:37:42,180 --> 01:37:48,130
so the question is why like what

1926
01:37:45,069 --> 01:37:50,739
actually happened there that was bad and

1927
01:37:48,130 --> 01:37:52,480
I'm not sure I would like to know what

1928
01:37:50,739 --> 01:37:56,619
we were submitting it looks like we were

1929
01:37:52,479 --> 01:38:02,969
submitting level one so we were trying

1930
01:37:56,619 --> 01:38:02,970
to submit one of these additional level

1931
01:38:04,050 --> 01:38:18,840
bitmaps but I don't know why how did we

1932
01:38:15,039 --> 01:38:21,850
get there right because we didn't ever

1933
01:38:18,840 --> 01:38:24,300
is this just our one by one but what

1934
01:38:21,850 --> 01:38:24,300
happened here

1935
01:38:26,779 --> 01:38:39,079
I don't know who actually produced this

1936
01:38:34,279 --> 01:38:49,460
texture but I want to so this was

1937
01:38:39,079 --> 01:38:50,869
texture index 1 and I want to see I want

1938
01:38:49,460 --> 01:38:52,640
to see what's going on there because I

1939
01:38:50,869 --> 01:38:55,460
don't understand did I not

1940
01:38:52,640 --> 01:38:59,539
did I not correctly set the texture up

1941
01:38:55,460 --> 01:39:01,369
for that somehow let's find out I I'm a

1942
01:38:59,539 --> 01:39:03,920
I want to make sure that I'm actually

1943
01:39:01,369 --> 01:39:06,439
clawing our generator first it shouldn't

1944
01:39:03,920 --> 01:39:08,359
that particular bug is not actually

1945
01:39:06,439 --> 01:39:11,179
related to this but it just I was

1946
01:39:08,359 --> 01:39:14,149
spooked by the fact that this gen mipmap

1947
01:39:11,180 --> 01:39:16,670
doesn't seem to have happened and so I'm

1948
01:39:14,149 --> 01:39:18,109
wondering if we just yeah okay so so the

1949
01:39:16,670 --> 01:39:19,940
problem that we're getting here is we

1950
01:39:18,109 --> 01:39:26,960
didn't set that right

1951
01:39:19,939 --> 01:39:28,429
I just forgot to do this so we need to

1952
01:39:26,960 --> 01:39:31,760
set that because I wanted that code

1953
01:39:28,430 --> 01:39:34,640
that's not the bug right that other bug

1954
01:39:31,760 --> 01:39:36,590
is different but the bug that I wanted

1955
01:39:34,640 --> 01:39:38,630
to know what was going on why we weren't

1956
01:39:36,590 --> 01:39:41,270
seeing that call I set a breakpoint

1957
01:39:38,630 --> 01:39:44,119
right you watched me set that breakpoint

1958
01:39:41,270 --> 01:39:45,860
in the asset system right here

1959
01:39:44,119 --> 01:39:47,420
it didn't get hit it's because we

1960
01:39:45,859 --> 01:39:48,799
weren't setting this value in the case

1961
01:39:47,420 --> 01:39:51,050
where we do actually need to generate

1962
01:39:48,800 --> 01:39:52,730
those nips so I want to run it again I

1963
01:39:51,050 --> 01:39:54,500
want to watch that happen because that

1964
01:39:52,729 --> 01:39:55,129
should happen before we do a mips

1965
01:39:54,500 --> 01:39:59,359
submission

1966
01:39:55,130 --> 01:40:01,789
all right so in here now now we're gonna

1967
01:39:59,359 --> 01:40:03,829
go ahead and do our down sample so I

1968
01:40:01,789 --> 01:40:05,390
want to watch this happen and I want to

1969
01:40:03,829 --> 01:40:07,819
make sure that this works properly as

1970
01:40:05,390 --> 01:40:10,430
well before we well or at least looks

1971
01:40:07,819 --> 01:40:11,029
like it's working properly before we do

1972
01:40:10,430 --> 01:40:13,850
anything else

1973
01:40:11,029 --> 01:40:17,899
so here's us iterating over the down

1974
01:40:13,850 --> 01:40:20,090
sample and you know what you can see

1975
01:40:17,899 --> 01:40:22,549
here too is it looks like we've got sort

1976
01:40:20,090 --> 01:40:27,430
of an issue where technically the

1977
01:40:22,550 --> 01:40:27,430
texture submission is not necessarily

1978
01:40:29,289 --> 01:40:33,470
like I don't actually know if this is

1979
01:40:31,670 --> 01:40:35,569
that those values are not power to

1980
01:40:33,470 --> 01:40:39,440
values right as we're going into the

1981
01:40:35,569 --> 01:40:41,739
down sampler and so I'm kind of

1982
01:40:39,439 --> 01:40:41,739
wondering

1983
01:40:43,810 --> 01:40:52,480
what exactly is supposed to happen with

1984
01:40:48,500 --> 01:40:55,819
that texture submission hold on a second

1985
01:40:52,479 --> 01:40:58,609
because didn't we just look and see that

1986
01:40:55,819 --> 01:41:00,079
when we actually came through here like

1987
01:40:58,609 --> 01:41:04,250
the width and height of this was like

1988
01:41:00,079 --> 01:41:06,309
512 by 512 right and so the problem I

1989
01:41:04,250 --> 01:41:06,310
think

1990
01:41:13,979 --> 01:41:23,339
yeah like what is this just a different

1991
01:41:16,470 --> 01:41:27,060
one that finished up first because when

1992
01:41:23,340 --> 01:41:28,770
we looked we were we were only getting

1993
01:41:27,060 --> 01:41:31,500
ones there that had with the night they

1994
01:41:28,770 --> 01:41:32,970
like 512 by 512 so how are we now seeing

1995
01:41:31,500 --> 01:41:37,729
something totally different than that

1996
01:41:32,970 --> 01:41:37,730
and I'm not sure

1997
01:41:50,279 --> 01:41:58,139
so in here this is gonna this is gonna

1998
01:41:53,729 --> 01:41:59,789
not need to push to 512 by 512 so okay I

1999
01:41:58,139 --> 01:42:05,460
see I see basically what we're saying

2000
01:41:59,788 --> 01:42:07,529
here so yeah we will have a problem with

2001
01:42:05,460 --> 01:42:09,420
our down sampler which is that our

2002
01:42:07,529 --> 01:42:11,429
current down sampler isn't smart enough

2003
01:42:09,420 --> 01:42:16,828
to handle the case where we don't have

2004
01:42:11,429 --> 01:42:18,118
an actual power of 2 right so we do need

2005
01:42:16,828 --> 01:42:20,069
to do a little more work here in our

2006
01:42:18,118 --> 01:42:21,868
down sample 2x this thing needs to

2007
01:42:20,069 --> 01:42:23,969
understand what it's going to over

2008
01:42:21,868 --> 01:42:27,328
sample right because otherwise it's

2009
01:42:23,969 --> 01:42:29,939
gonna fetch outside the image you know

2010
01:42:27,328 --> 01:42:33,889
I'm saying it needs to be aware of what

2011
01:42:29,939 --> 01:42:38,399
happens at the at the second-to-last

2012
01:42:33,889 --> 01:42:42,059
step right furthermore we would probably

2013
01:42:38,399 --> 01:42:44,098
want to round up so we've got some extra

2014
01:42:42,059 --> 01:42:45,869
work to do here that's actually fairly

2015
01:42:44,099 --> 01:42:51,029
complicated so let's go ahead and do

2016
01:42:45,868 --> 01:42:52,679
that as well all right so what I want to

2017
01:42:51,029 --> 01:42:55,139
do here is when we're doing this iterate

2018
01:42:52,679 --> 01:42:57,239
MIPS and again you can see why I wanted

2019
01:42:55,139 --> 01:42:59,279
hopefully this will underscore why I

2020
01:42:57,238 --> 01:43:00,478
wanted to do this summation manually

2021
01:42:59,279 --> 01:43:02,998
rather than writing a closed-form

2022
01:43:00,479 --> 01:43:04,710
version of it because as I modify this

2023
01:43:02,998 --> 01:43:06,328
routine I know that this one will

2024
01:43:04,710 --> 01:43:08,998
automatically pick up the correct sum

2025
01:43:06,328 --> 01:43:11,340
without me having to go redo the math so

2026
01:43:08,998 --> 01:43:14,099
looking at this what I want to do here

2027
01:43:11,340 --> 01:43:15,779
is I want to change this to round up so

2028
01:43:14,099 --> 01:43:17,940
what I want to do is I want to say all

2029
01:43:15,779 --> 01:43:20,279
right it's gonna be a divided by two but

2030
01:43:17,939 --> 01:43:22,768
I'm gonna add one first that way I will

2031
01:43:20,279 --> 01:43:24,779
always round up to the next value rather

2032
01:43:22,769 --> 01:43:30,210
than rounding truncating downwards

2033
01:43:24,779 --> 01:43:33,300
always because I don't want to like if

2034
01:43:30,210 --> 01:43:36,809
you have the value 3 and you divide it

2035
01:43:33,300 --> 01:43:40,139
by 2 I want to get down to 2 I don't

2036
01:43:36,809 --> 01:43:42,900
want to get down to 1 right so I want to

2037
01:43:40,139 --> 01:43:45,779
keep an extra I want to keep extra space

2038
01:43:42,899 --> 01:43:47,339
for things that weren't power of 2 the

2039
01:43:45,779 --> 01:43:49,529
reason I want to do that is because I

2040
01:43:47,340 --> 01:43:52,190
want to maintain the extra padding on

2041
01:43:49,529 --> 01:43:54,719
the outside of things because that's

2042
01:43:52,189 --> 01:43:56,638
when we put in like borders around

2043
01:43:54,719 --> 01:43:59,368
things for when they get shrunk down I

2044
01:43:56,639 --> 01:44:01,019
don't want the fact that they're smaller

2045
01:43:59,368 --> 01:44:02,908
that the I don't want the fact that

2046
01:44:01,019 --> 01:44:04,139
we're down sampling to eliminate those

2047
01:44:02,908 --> 01:44:06,420
borders unnecessarily

2048
01:44:04,139 --> 01:44:08,460
so I think I would rather do this than

2049
01:44:06,420 --> 01:44:13,350
truncate I don't actually know that

2050
01:44:08,460 --> 01:44:15,539
that's true because we haven't really

2051
01:44:13,350 --> 01:44:18,389
quite looked at it but I I have a sense

2052
01:44:15,539 --> 01:44:20,219
that that is what I would prefer and

2053
01:44:18,389 --> 01:44:22,230
then when we're actually doing our down

2054
01:44:20,219 --> 01:44:24,300
sample here what I want to do is make

2055
01:44:22,229 --> 01:44:27,388
sure that I don't fetch outside of the

2056
01:44:24,300 --> 01:44:33,600
source that's incoming and so while we

2057
01:44:27,389 --> 01:44:35,400
produce the destination and we're

2058
01:44:33,600 --> 01:44:38,010
looping through the destination what I

2059
01:44:35,399 --> 01:44:41,029
want to do here is make sure that so so

2060
01:44:38,010 --> 01:44:45,570
basically this I want to make sure

2061
01:44:41,029 --> 01:44:47,519
doesn't over sample and this I want to

2062
01:44:45,569 --> 01:44:49,019
make sure it doesn't over sample right

2063
01:44:47,520 --> 01:44:52,020
because you can kind of see that they

2064
01:44:49,020 --> 01:44:57,900
that they might so essentially what

2065
01:44:52,020 --> 01:45:09,030
we've got is our our X based sampling so

2066
01:44:57,899 --> 01:45:12,829
this this here right this wants to only

2067
01:45:09,029 --> 01:45:16,769
happen in circumcircle circumstances

2068
01:45:12,829 --> 01:45:28,100
right we want to do something more like

2069
01:45:16,770 --> 01:45:28,100
this right

2070
01:45:35,069 --> 01:45:39,399
so we want something that will prevent a

2071
01:45:37,630 --> 01:45:40,690
sampling over the edge and we could make

2072
01:45:39,399 --> 01:45:44,079
a better loop than this that would be

2073
01:45:40,689 --> 01:45:46,000
faster that wouldn't have to do this if

2074
01:45:44,079 --> 01:45:59,920
but we're not going to do that at the

2075
01:45:46,000 --> 01:46:01,479
moment so while this kind of make a

2076
01:45:59,920 --> 01:46:04,680
general note though that you know we

2077
01:46:01,479 --> 01:46:07,359
could do a lot better than we are

2078
01:46:04,680 --> 01:46:09,820
all right so looking at this what we

2079
01:46:07,359 --> 01:46:12,219
want to do is say look don't over sample

2080
01:46:09,819 --> 01:46:16,750
so just assume that there's zeros on the

2081
01:46:12,220 --> 01:46:19,510
outside of this thing that you will then

2082
01:46:16,750 --> 01:46:22,930
use if you cannot pick up an eval you

2083
01:46:19,510 --> 01:46:29,850
write and I want the same thing to be

2084
01:46:22,930 --> 01:46:31,869
true for the source for the for the rows

2085
01:46:29,850 --> 01:46:35,110
but unfortunately that's a little bit

2086
01:46:31,869 --> 01:46:40,559
harder right because sampling rows

2087
01:46:35,109 --> 01:46:44,559
actually requires that like this stuff I

2088
01:46:40,560 --> 01:46:47,170
don't have a way to set this pointer to

2089
01:46:44,560 --> 01:46:49,000
something sensible right I could try to

2090
01:46:47,170 --> 01:46:50,260
have just a giant set of zeros that I

2091
01:46:49,000 --> 01:46:52,810
can point it to and then this thing

2092
01:46:50,260 --> 01:46:55,060
would work but again that's a little bit

2093
01:46:52,810 --> 01:46:56,530
hairy so we almost want to do something

2094
01:46:55,060 --> 01:46:59,680
where we're gonna have again a more

2095
01:46:56,529 --> 01:47:03,579
optimized loop I can cheese out because

2096
01:46:59,680 --> 01:47:06,909
if you look at how the extra rows are

2097
01:47:03,579 --> 01:47:11,260
sampled we can't actually make it so

2098
01:47:06,909 --> 01:47:14,859
that the those are ours erode out as

2099
01:47:11,260 --> 01:47:18,789
well by again using a strategic if as

2100
01:47:14,859 --> 01:47:24,549
necessary but again not really sure to

2101
01:47:18,789 --> 01:47:27,340
what extent I want that to happen we can

2102
01:47:24,550 --> 01:47:29,560
duplicate instead which would be easier

2103
01:47:27,340 --> 01:47:31,119
because then it would just be you set

2104
01:47:29,560 --> 01:47:34,420
this point or equal to source pixels

2105
01:47:31,119 --> 01:47:36,750
zero I don't know if I necessarily love

2106
01:47:34,420 --> 01:47:36,750
that

2107
01:47:49,079 --> 01:48:03,390
so I'm gonna do the duplication cuz it's

2108
01:47:51,819 --> 01:48:03,389
easier first cuz I like to do is this

2109
01:48:07,470 --> 01:48:15,699
and I can do the same thing on X as well

2110
01:48:12,399 --> 01:48:22,420
it would just be this set it to what you

2111
01:48:15,699 --> 01:48:25,179
just loaded right so given that we can

2112
01:48:22,420 --> 01:48:28,569
now do a down sample that should in

2113
01:48:25,180 --> 01:48:31,600
theory properly operate on arbitrary

2114
01:48:28,569 --> 01:48:34,960
rectangles and it wouldn't need them to

2115
01:48:31,600 --> 01:48:37,630
have been powers of two or anything else

2116
01:48:34,960 --> 01:48:41,529
like that so let's do that and we'll

2117
01:48:37,630 --> 01:48:45,340
just leave it at that and then we can go

2118
01:48:41,529 --> 01:48:49,029
back and watch this and see if it works

2119
01:48:45,340 --> 01:48:51,880
properly right so here we are in

2120
01:48:49,029 --> 01:48:56,579
generate sequential mips let's actually

2121
01:48:51,880 --> 01:48:56,579
see what our down simple call is getting

2122
01:48:56,670 --> 01:49:04,739
it's going from 371 to 186 it's going

2123
01:49:00,340 --> 01:49:09,039
from 217 to 109 that seems about right

2124
01:49:04,739 --> 01:49:11,429
let me step out here as this goes down

2125
01:49:09,039 --> 01:49:12,699
right keeps going keeps going keeps

2126
01:49:11,430 --> 01:49:14,980
going

2127
01:49:12,699 --> 01:49:17,380
here's that bottom out case again you

2128
01:49:14,979 --> 01:49:20,139
can see it goes a to 1 and then 1 1 and

2129
01:49:17,380 --> 01:49:22,270
then it's done that's all the mips

2130
01:49:20,140 --> 01:49:24,100
produced hopefully it's correct then we

2131
01:49:22,270 --> 01:49:29,590
complete that texture up and submit

2132
01:49:24,100 --> 01:49:32,110
right ok so I think we're now at least

2133
01:49:29,590 --> 01:49:35,350
roughly preparing the correct thing if

2134
01:49:32,109 --> 01:49:37,210
we go back now and look at our

2135
01:49:35,350 --> 01:49:40,720
submission process we have to make

2136
01:49:37,210 --> 01:49:43,270
opengl happy about what we're doing and

2137
01:49:40,720 --> 01:49:47,170
so this part has to now be addressed as

2138
01:49:43,270 --> 01:49:49,240
well when we do GL text sub image 3d and

2139
01:49:47,170 --> 01:49:51,550
we're passing down a MIT level here to

2140
01:49:49,239 --> 01:49:53,590
submit I don't

2141
01:49:51,550 --> 01:49:56,650
actually no what it's complaining about

2142
01:49:53,590 --> 01:49:58,599
it could be any number of things but for

2143
01:49:56,649 --> 01:50:00,638
example one thing that it may very well

2144
01:49:58,599 --> 01:50:02,739
be is the fact that when we created this

2145
01:50:00,639 --> 01:50:05,650
we may not have told it that we wanted

2146
01:50:02,738 --> 01:50:08,859
space for MIT maps or things like that

2147
01:50:05,649 --> 01:50:10,899
so now like I said we've done sort of

2148
01:50:08,859 --> 01:50:13,149
our part of the work and now we're on to

2149
01:50:10,899 --> 01:50:16,960
the OpenGL massaging which is always a

2150
01:50:13,149 --> 01:50:18,460
barrel of fun so if we go look at where

2151
01:50:16,960 --> 01:50:20,920
we were actually specifying these

2152
01:50:18,460 --> 01:50:25,149
textures to begin with that's gonna be a

2153
01:50:20,920 --> 01:50:28,889
GL oops text image 3d call or something

2154
01:50:25,149 --> 01:50:31,420
like that in here somewhere

2155
01:50:28,889 --> 01:50:32,770
looks like we fixed this bug right we

2156
01:50:31,420 --> 01:50:35,618
don't have this anymore because we are

2157
01:50:32,770 --> 01:50:42,460
calling GL text image through today so

2158
01:50:35,618 --> 01:50:52,689
when we call GL text image 3d if we look

2159
01:50:42,460 --> 01:50:56,109
at the docs if I go pull GL three out

2160
01:50:52,689 --> 01:50:59,029
here and I say GL text image 3d and I

2161
01:50:56,109 --> 01:51:02,750
look at what I'm actually calling

2162
01:50:59,029 --> 01:51:02,750
[Music]

2163
01:51:17,588 --> 01:51:25,378
I want to go ahead and say and I'm

2164
01:51:22,208 --> 01:51:27,099
making this up 100%

2165
01:51:25,378 --> 01:51:30,189
because you know of course the docs

2166
01:51:27,099 --> 01:51:35,378
would never tell you I want to say that

2167
01:51:30,189 --> 01:51:37,479
if we are to call GL tech sub image we

2168
01:51:35,378 --> 01:51:41,078
may have had to have called GL text

2169
01:51:37,479 --> 01:51:43,929
image first so when we first announced

2170
01:51:41,078 --> 01:51:46,118
this texture we probably have to call

2171
01:51:43,929 --> 01:51:47,769
all of the MIPS that we might ever call

2172
01:51:46,118 --> 01:51:50,018
does that make sense

2173
01:51:47,769 --> 01:52:03,159
so we're probably going to have to do

2174
01:51:50,019 --> 01:52:06,159
something that looks like this and again

2175
01:52:03,158 --> 01:52:08,378
hopefully you can see just how nice this

2176
01:52:06,158 --> 01:52:10,328
utility function is you see why I wanted

2177
01:52:08,378 --> 01:52:13,179
to write it this way because everyone

2178
01:52:10,328 --> 01:52:15,608
can use it so you never have to worry

2179
01:52:13,179 --> 01:52:17,828
about complex computations in there

2180
01:52:15,609 --> 01:52:19,959
being wrong between parts of the code

2181
01:52:17,828 --> 01:52:22,118
because since everyone can just use it

2182
01:52:19,958 --> 01:52:24,969
and know that it's calling the same code

2183
01:52:22,118 --> 01:52:26,828
you just get a really nice sort of

2184
01:52:24,969 --> 01:52:31,599
buffer there where everyone's using the

2185
01:52:26,828 --> 01:52:36,608
same values thankfully right um so yeah

2186
01:52:31,599 --> 01:52:38,139
I'm gonna try this which is to say I'm

2187
01:52:36,609 --> 01:52:43,569
just gonna announce for our texture

2188
01:52:38,139 --> 01:52:46,679
array all of them here where we just say

2189
01:52:43,569 --> 01:52:46,679
yeah man

2190
01:52:48,609 --> 01:52:55,588
here's an announcement that we've got

2191
01:52:51,069 --> 01:53:00,939
every level from zero to two to the nine

2192
01:52:55,588 --> 01:53:03,939
so zero to nine I please know that

2193
01:53:00,939 --> 01:53:07,209
that's the case right and I'm just gonna

2194
01:53:03,939 --> 01:53:09,030
hope that that has something to do with

2195
01:53:07,208 --> 01:53:12,578
anything right

2196
01:53:09,029 --> 01:53:14,408
okay so OpenGL is now happily accepting

2197
01:53:12,578 --> 01:53:17,618
our textures that's great it looks like

2198
01:53:14,408 --> 01:53:19,929
our down sampler maybe sucks for example

2199
01:53:17,618 --> 01:53:22,958
or who knows I mean we could have any

2200
01:53:19,929 --> 01:53:25,838
number of bugs in here but the good news

2201
01:53:22,958 --> 01:53:30,309
is were pretty close right we have

2202
01:53:25,838 --> 01:53:31,529
submitted MIT maps to the system and it

2203
01:53:30,309 --> 01:53:33,880
is not rejecting

2204
01:53:31,529 --> 01:53:37,090
we've got some garbage on the screen so

2205
01:53:33,880 --> 01:53:40,480
we've got some errors that's fine but

2206
01:53:37,090 --> 01:53:45,670
what kind of makes me a little confused

2207
01:53:40,479 --> 01:53:48,969
is I don't actually know why we would be

2208
01:53:45,670 --> 01:54:02,100
using any of those MIT maps because I

2209
01:53:48,970 --> 01:54:07,440
didn't think we turned that on did we so

2210
01:54:02,100 --> 01:54:07,440
we're not sampling from the MIT maps yet

2211
01:54:09,239 --> 01:54:16,869
so to be completely honest I'm a little

2212
01:54:11,560 --> 01:54:18,280
confused as to what's going on there it

2213
01:54:16,869 --> 01:54:20,470
looks like maybe we've got a transfer

2214
01:54:18,279 --> 01:54:23,469
error or maybe we're not advancing our

2215
01:54:20,470 --> 01:54:25,840
pointers correctly like maybe we're our

2216
01:54:23,470 --> 01:54:30,820
down stampers like writing garbage into

2217
01:54:25,840 --> 01:54:33,069
the existing nips I'm not sure it's

2218
01:54:30,819 --> 01:54:35,319
going to be because we haven't told

2219
01:54:33,069 --> 01:54:38,799
OpenGL to ever look at those MIT maps we

2220
01:54:35,319 --> 01:54:42,429
sent them down but what you can see here

2221
01:54:38,800 --> 01:54:47,369
is this texture min filter texture mag

2222
01:54:42,430 --> 01:54:51,329
filter that setting it to linear is

2223
01:54:47,369 --> 01:54:54,729
saying don't sample the MIT map I think

2224
01:54:51,329 --> 01:54:58,420
although that may not actually be true

2225
01:54:54,729 --> 01:55:03,489
it may be sampling the MIT map and just

2226
01:54:58,420 --> 01:55:05,940
not try linearly filtering it no I don't

2227
01:55:03,489 --> 01:55:08,500
think so I think when you specify

2228
01:55:05,939 --> 01:55:10,809
texture min filter you need to specify

2229
01:55:08,500 --> 01:55:13,989
it yeah it's gonna it's not gonna pick a

2230
01:55:10,810 --> 01:55:15,300
miss MIT you'd have to do nearest here

2231
01:55:13,989 --> 01:55:18,130
I'll show you what I mean

2232
01:55:15,300 --> 01:55:21,159
so if we look up the docs for GL text

2233
01:55:18,130 --> 01:55:23,289
frame er I what you can see is that

2234
01:55:21,159 --> 01:55:26,619
there's a thing in here called min

2235
01:55:23,289 --> 01:55:29,140
filter and mag filter those are the two

2236
01:55:26,619 --> 01:55:30,640
settings that we have here min filter is

2237
01:55:29,140 --> 01:55:32,829
what you use when you might be

2238
01:55:30,640 --> 01:55:34,750
mipmapping actually because that's when

2239
01:55:32,829 --> 01:55:37,000
we're making the texture smaller than it

2240
01:55:34,750 --> 01:55:38,170
actually be mag filter we don't care

2241
01:55:37,000 --> 01:55:39,369
about that's when you're blowing it up

2242
01:55:38,170 --> 01:55:40,600
you're never gonna use the myth in that

2243
01:55:39,369 --> 01:55:42,970
case because you're actually stretching

2244
01:55:40,600 --> 01:55:45,099
it right so that we don't actually care

2245
01:55:42,970 --> 01:55:49,239
but min filter we do care about and

2246
01:55:45,099 --> 01:55:52,538
we want to see here in min filter is we

2247
01:55:49,238 --> 01:55:56,009
actually want to got a section there on

2248
01:55:52,538 --> 01:55:59,259
it see what those settings actually are

2249
01:55:56,010 --> 01:55:59,918
so here's min filter right and here are

2250
01:55:59,260 --> 01:56:01,780
our options

2251
01:55:59,918 --> 01:56:02,828
nearest returns to wait hours for type

2252
01:56:01,779 --> 01:56:04,208
summons some of the closest miss whitish

2253
01:56:02,828 --> 01:56:05,408
where I see this conclude items wrapped

2254
01:56:04,208 --> 01:56:08,948
in repeated from other parts texture

2255
01:56:05,408 --> 01:56:12,188
right but since there's no mipmap in

2256
01:56:08,948 --> 01:56:14,378
there I don't think it will ever choose

2257
01:56:12,189 --> 01:56:17,139
one so you can see you would have to get

2258
01:56:14,378 --> 01:56:19,418
GL nearest mipmap nearest at least or GL

2259
01:56:17,139 --> 01:56:21,699
linear mipmap nearest in order to start

2260
01:56:19,418 --> 01:56:23,889
using those MIT maps so I'm pretty sure

2261
01:56:21,698 --> 01:56:26,138
it will never actually use them in our

2262
01:56:23,889 --> 01:56:27,819
case that means I think we're over

2263
01:56:26,139 --> 01:56:31,918
writing our actual texture what I'd like

2264
01:56:27,819 --> 01:56:34,448
to do first I'm gonna go into a my asset

2265
01:56:31,918 --> 01:56:37,898
gonna take generate sequential MIPS and

2266
01:56:34,448 --> 01:56:40,058
I'm going to actually turn it off so

2267
01:56:37,899 --> 01:56:45,309
we're not calling down sampler anymore I

2268
01:56:40,059 --> 01:56:47,889
just want to see what happens like

2269
01:56:45,309 --> 01:56:52,389
that's all I want to see what happens if

2270
01:56:47,889 --> 01:56:54,340
we don't down sample right okay so what

2271
01:56:52,389 --> 01:56:57,038
that tells me is our down sampler is

2272
01:56:54,340 --> 01:56:59,619
just producing stuff in the wrong place

2273
01:56:57,038 --> 01:57:01,328
and there's two reasons that that could

2274
01:56:59,618 --> 01:57:05,078
be happening one is there's a bug in the

2275
01:57:01,328 --> 01:57:06,908
down sampler too is that our MIT thing

2276
01:57:05,078 --> 01:57:09,279
that we're using to iterate over to

2277
01:57:06,908 --> 01:57:11,948
generate them is telling it the wrong

2278
01:57:09,279 --> 01:57:13,599
starting point er which would then

2279
01:57:11,948 --> 01:57:15,908
produce garbage because it's writing

2280
01:57:13,599 --> 01:57:17,918
into the wrong place so there could be

2281
01:57:15,908 --> 01:57:21,089
bugs in either case and we're gonna try

2282
01:57:17,918 --> 01:57:24,578
and find out what's going on there right

2283
01:57:21,090 --> 01:57:26,378
okay so if we look at the down sample to

2284
01:57:24,578 --> 01:57:28,628
X source deaths here what you can see

2285
01:57:26,378 --> 01:57:30,099
here is the destinations writing into

2286
01:57:28,628 --> 01:57:31,779
dest and the source is running in the

2287
01:57:30,099 --> 01:57:33,699
source that's exactly what we would

2288
01:57:31,779 --> 01:57:38,228
expect to have happen when we look at

2289
01:57:33,698 --> 01:57:40,328
where it's reading from in theory it

2290
01:57:38,229 --> 01:57:42,369
should only ever be starting it's right

2291
01:57:40,328 --> 01:57:45,248
here and if I go through and look you

2292
01:57:42,368 --> 01:57:48,188
can see dest pixel the only place where

2293
01:57:45,248 --> 01:57:50,078
ever writing is right here so I really

2294
01:57:48,189 --> 01:57:52,899
think that that's an unlikely candidate

2295
01:57:50,078 --> 01:57:54,849
it looks like desk is getting passed the

2296
01:57:52,899 --> 01:57:56,349
wrong pointer potentially or when we're

2297
01:57:54,849 --> 01:57:57,069
submitting it we're submitting via the

2298
01:57:56,349 --> 01:57:59,350
wrong pointers

2299
01:57:57,069 --> 01:58:01,509
right but it really looks like that desk

2300
01:57:59,350 --> 01:58:04,180
is getting set incorrectly and so that

2301
01:58:01,510 --> 01:58:06,610
suggested me that maybe down here we've

2302
01:58:04,180 --> 01:58:07,840
got an issue with how these things are

2303
01:58:06,609 --> 01:58:10,539
going to update it could it could also

2304
01:58:07,840 --> 01:58:12,100
be potentially this computation in here

2305
01:58:10,539 --> 01:58:14,680
we're updating the pixel pointer right

2306
01:58:12,100 --> 01:58:17,470
so I think that's what we want to start

2307
01:58:14,680 --> 01:58:21,579
what we want to look at in terms of who

2308
01:58:17,470 --> 01:58:24,909
might be doing things wrong alright so

2309
01:58:21,579 --> 01:58:28,000
when we come in here when you see what

2310
01:58:24,909 --> 01:58:30,670
we're doing in terms of data writing I

2311
01:58:28,000 --> 01:58:32,229
mean it still looks pretty good right if

2312
01:58:30,670 --> 01:58:36,460
you look at it it's saying down sample

2313
01:58:32,229 --> 01:58:38,289
source to test and that source is always

2314
01:58:36,460 --> 01:58:46,149
going to be equal to the desk the next

2315
01:58:38,289 --> 01:58:47,680
time around I don't even in fact you can

2316
01:58:46,149 --> 01:58:54,129
even get desks out of the equation

2317
01:58:47,680 --> 01:58:58,860
because it's really it's just this right

2318
01:58:54,130 --> 01:58:58,859
and that's all we're doing

2319
01:59:05,770 --> 01:59:11,420
so yeah I don't really know what's wrong

2320
01:59:09,529 --> 01:59:13,849
with that we're gonna have to step

2321
01:59:11,420 --> 01:59:15,859
through cuz I don't get it

2322
01:59:13,850 --> 01:59:17,539
if you look up here at where we actually

2323
01:59:15,859 --> 01:59:20,659
advanced the pointer so when you first

2324
01:59:17,539 --> 01:59:22,310
start we just cast the pointer up and

2325
01:59:20,659 --> 01:59:23,689
say wherever you told us to start

2326
01:59:22,310 --> 01:59:26,690
running that's where we're gonna write

2327
01:59:23,689 --> 01:59:28,819
you know no big deal there when we need

2328
01:59:26,689 --> 01:59:31,219
to actually advance the pointer it's a

2329
01:59:28,819 --> 01:59:33,380
pointer to a four byte value we advanced

2330
01:59:31,220 --> 01:59:38,119
it by the width times the height that's

2331
01:59:33,380 --> 01:59:42,890
what you expect to see so I really don't

2332
01:59:38,119 --> 01:59:52,460
know why that wouldn't get out of the

2333
01:59:42,890 --> 01:59:54,560
way don't know so I'm gonna have to step

2334
01:59:52,460 --> 01:59:57,579
in I really couldn't tell you but it

2335
01:59:54,560 --> 02:00:00,170
looks like it's clearly doing it wrong I

2336
01:59:57,579 --> 02:00:07,550
mean that's about all we can say I'm

2337
02:00:00,170 --> 02:00:08,750
gonna go look at the code for that just

2338
02:00:07,550 --> 02:00:10,940
gonna set a breakpoint in there and

2339
02:00:08,750 --> 02:00:12,949
remedy and see if we can see something

2340
02:00:10,939 --> 02:00:15,829
wrong if not it'll have to wait till

2341
02:00:12,949 --> 02:00:17,210
next weekend I guess so coming through

2342
02:00:15,829 --> 02:00:20,119
here gonna delete this stuff and just

2343
02:00:17,210 --> 02:00:22,730
focus on what we've actually got in our

2344
02:00:20,119 --> 02:00:24,739
case here so here's our starting data

2345
02:00:22,729 --> 02:00:27,049
pointer that's where we're saying that

2346
02:00:24,739 --> 02:00:29,300
sequential ministry generated if I pop

2347
02:00:27,050 --> 02:00:30,680
back out to look at where that is it's

2348
02:00:29,300 --> 02:00:34,369
essentially saying that it wants to do

2349
02:00:30,680 --> 02:00:36,110
it to this data pointer that's where we

2350
02:00:34,369 --> 02:00:38,569
did the load in the first place I

2351
02:00:36,109 --> 02:00:41,899
believe right so we do read data from

2352
02:00:38,569 --> 02:00:44,449
file handle offset size destination I

2353
02:00:41,899 --> 02:00:46,420
assume that data I guess I don't know

2354
02:00:44,449 --> 02:00:50,510
that that data is set to the same place

2355
02:00:46,420 --> 02:00:52,430
I guess that's a good question is it I

2356
02:00:50,510 --> 02:00:54,199
mean it should be right but let's verify

2357
02:00:52,430 --> 02:00:58,360
I suppose it well I guess I'm here now

2358
02:00:54,199 --> 02:01:02,439
why not actually look let's just see

2359
02:00:58,359 --> 02:01:02,439
work destination is that

2360
02:01:05,760 --> 02:01:12,900
Tech's drop data is that so that seems

2361
02:01:09,739 --> 02:01:19,880
good all right that's what we would

2362
02:01:12,899 --> 02:01:22,409
expect if I jump down in here well that

2363
02:01:19,880 --> 02:01:28,770
doesn't make a lot of sense

2364
02:01:22,409 --> 02:01:30,389
oh sorry yes it does so that's the

2365
02:01:28,770 --> 02:01:33,780
correct value that's what we would

2366
02:01:30,390 --> 02:01:39,119
expect everything looks fine there so

2367
02:01:33,779 --> 02:01:43,590
the width and height in this case 3 771

2368
02:01:39,119 --> 02:01:46,500
by 217 I want to go up here I'm curious

2369
02:01:43,590 --> 02:01:50,880
what the work size is how big was was it

2370
02:01:46,500 --> 02:01:53,520
loaded it was 3 to 2 0 to 8 and so if I

2371
02:01:50,880 --> 02:01:56,940
look at the actual width and height

2372
02:01:53,520 --> 02:01:57,990
I should see 3 2 - OH - 8 is the number

2373
02:01:56,939 --> 02:02:00,029
that we actually get out when we

2374
02:01:57,989 --> 02:02:03,359
multiply those two together and then

2375
02:02:00,029 --> 02:02:05,309
multiply by 4 so it is right so we

2376
02:02:03,359 --> 02:02:06,949
loaded the amount we thought we loaded

2377
02:02:05,310 --> 02:02:11,130
now we're going to load up our MIT

2378
02:02:06,949 --> 02:02:13,470
iterator with that value here we go

2379
02:02:11,130 --> 02:02:15,600
we're at level zero we've got those two

2380
02:02:13,470 --> 02:02:17,460
values in here here's our pixel pointer

2381
02:02:15,600 --> 02:02:20,880
it's pointing to this what would I

2382
02:02:17,460 --> 02:02:23,039
expect the next pixel pointer to be so

2383
02:02:20,880 --> 02:02:27,840
in this case if I were to copy this

2384
02:02:23,039 --> 02:02:31,710
value I don't know why I can't click on

2385
02:02:27,840 --> 02:02:34,409
that but I guess I can if I were to copy

2386
02:02:31,710 --> 02:02:38,189
this value here I don't think I can show

2387
02:02:34,409 --> 02:02:41,819
this in hex or maybe I can yes thank you

2388
02:02:38,189 --> 02:02:43,559
remedy so if I wanted to move to the

2389
02:02:41,819 --> 02:02:45,319
next pointer and here what I would

2390
02:02:43,560 --> 02:02:48,870
expect to see is it would be this much

2391
02:02:45,319 --> 02:02:51,779
further forward right so meaning I would

2392
02:02:48,869 --> 02:02:54,300
expect after you know I'm going to

2393
02:02:51,779 --> 02:02:57,119
submit that image of that size and then

2394
02:02:54,300 --> 02:03:01,350
after that I'm going to try to step

2395
02:02:57,119 --> 02:03:05,130
forward by 3 - 2 0 to 8 and get this

2396
02:03:01,350 --> 02:03:08,190
value here right so that's what I would

2397
02:03:05,130 --> 02:03:12,180
expect so when we advance our MIT

2398
02:03:08,189 --> 02:03:13,889
pointer that is exactly what we get and

2399
02:03:12,180 --> 02:03:17,280
now when we call down sample we would

2400
02:03:13,890 --> 02:03:18,570
expect to see effectively us reading

2401
02:03:17,279 --> 02:03:21,238
from here

2402
02:03:18,569 --> 02:03:26,819
writing to their which I will again try

2403
02:03:21,238 --> 02:03:30,839
to copy this value there we go all right

2404
02:03:26,819 --> 02:03:35,509
so we expect to see reading from here we

2405
02:03:30,840 --> 02:03:35,510
expect to see writing to sorry I mean

2406
02:03:35,599 --> 02:03:42,000
there we go we would expect to see us

2407
02:03:38,969 --> 02:03:44,399
read from this and write to that right

2408
02:03:42,000 --> 02:03:48,899
I guess so there's something weird like

2409
02:03:44,399 --> 02:03:50,908
I guess remedy doesn't let you click on

2410
02:03:48,899 --> 02:03:55,170
some values but it does let you click on

2411
02:03:50,908 --> 02:03:57,138
others I'm not sure there's like some

2412
02:03:55,170 --> 02:04:08,039
kind of weird like I can't click there

2413
02:03:57,139 --> 02:04:11,670
but I can click here I don't know it

2414
02:04:08,039 --> 02:04:14,279
looks like you can't click on things you

2415
02:04:11,670 --> 02:04:16,859
entered but things that were expanded

2416
02:04:14,279 --> 02:04:19,380
you can right so it looks like members

2417
02:04:16,859 --> 02:04:22,828
of a thing you can click out here on

2418
02:04:19,380 --> 02:04:25,078
those but if you typed it in that's not

2419
02:04:22,828 --> 02:04:26,670
clickable right because all of these are

2420
02:04:25,078 --> 02:04:29,670
ones I typed in and I can't click on the

2421
02:04:26,670 --> 02:04:31,109
value yeah so it looks like there's

2422
02:04:29,670 --> 02:04:33,239
maybe something it might just be a bug

2423
02:04:31,109 --> 02:04:36,179
in remedy where it doesn't if you typed

2424
02:04:33,238 --> 02:04:39,629
it in it doesn't let you click on it but

2425
02:04:36,179 --> 02:04:43,469
if you didn't type it in you can James

2426
02:04:39,630 --> 02:04:45,420
right George is on the chat he said he

2427
02:04:43,469 --> 02:04:48,420
just fixed that 20 minutes ago all right

2428
02:04:45,420 --> 02:04:51,539
hey man things you'll never hear from

2429
02:04:48,420 --> 02:04:53,039
Microsoft about Visual Studio I just

2430
02:04:51,539 --> 02:04:55,078
fixed it is something you'll never hear

2431
02:04:53,039 --> 02:04:57,689
them say about anything really cuz they

2432
02:04:55,078 --> 02:04:59,789
don't ever fix anything so thank you

2433
02:04:57,689 --> 02:05:04,348
George we'll be looking forward to that

2434
02:04:59,789 --> 02:05:06,510
update for sure anyway so here's here's

2435
02:05:04,349 --> 02:05:08,550
my down sample code let's just get in

2436
02:05:06,510 --> 02:05:10,409
there I'll try and figure out what we

2437
02:05:08,550 --> 02:05:14,369
screw up because we screwed something up

2438
02:05:10,408 --> 02:05:17,039
right so let me take the source let's

2439
02:05:14,368 --> 02:05:19,889
take the test and let's just look at

2440
02:05:17,039 --> 02:05:22,408
what we're doing so here we are doing

2441
02:05:19,889 --> 02:05:24,300
our down sample the source value for our

2442
02:05:22,408 --> 02:05:27,929
pixels is exactly what we said it should

2443
02:05:24,300 --> 02:05:29,309
be the destination value for our pixels

2444
02:05:27,929 --> 02:05:31,739
is also exactly what we said it should

2445
02:05:29,309 --> 02:05:36,150
be so as we write

2446
02:05:31,739 --> 02:05:49,159
- here I guess that suggests this isn't

2447
02:05:36,149 --> 02:05:49,159
wrong exception thrown

2448
02:05:57,448 --> 02:06:03,198
wait how can we get an exception this

2449
02:05:59,819 --> 02:06:03,198
time but we didn't get one last time

2450
02:06:08,359 --> 02:06:11,929
what's going on there

2451
02:06:17,670 --> 02:06:25,590
that's weird can I get that can I

2452
02:06:22,539 --> 02:06:25,590
provoke that exception

2453
02:06:27,420 --> 02:06:41,609
please make exception it does not want

2454
02:06:35,020 --> 02:06:41,610
to I'm not sure what that exception was

2455
02:06:44,069 --> 02:06:48,429
I'm not sure what that exception was why

2456
02:06:46,840 --> 02:06:50,670
can I not make that exception happen

2457
02:06:48,430 --> 02:06:50,670
again

2458
02:06:57,470 --> 02:07:08,150
well that's unfortunate

2459
02:07:00,750 --> 02:07:10,680
I would like to debug that but I can't

2460
02:07:08,149 --> 02:07:12,869
let's briefly look at a couple of things

2461
02:07:10,680 --> 02:07:16,740
before we go any further

2462
02:07:12,869 --> 02:07:19,109
the get total science for MIPS maybe

2463
02:07:16,739 --> 02:07:22,409
what I would like to do here is I would

2464
02:07:19,109 --> 02:07:27,719
like to do a spot check so what I'm

2465
02:07:22,409 --> 02:07:31,439
going to do here is say once we get to

2466
02:07:27,720 --> 02:07:36,300
the end of this I'm going to put in a

2467
02:07:31,439 --> 02:07:42,049
check and say assert that if I were to

2468
02:07:36,300 --> 02:07:46,350
get UPS if I were to get the total size

2469
02:07:42,050 --> 02:07:53,039
for this particular mission I want that

2470
02:07:46,350 --> 02:07:53,610
to be equal to the myth dots image I'm

2471
02:07:53,039 --> 02:07:57,720
sorry

2472
02:07:53,609 --> 02:08:00,509
yes the MIT dot image data pointer that

2473
02:07:57,720 --> 02:08:07,949
we currently have which is the final

2474
02:08:00,510 --> 02:08:14,820
pointer right minus the original data

2475
02:08:07,949 --> 02:08:16,409
pointer and unfortunately that's not

2476
02:08:14,819 --> 02:08:17,819
quite gonna be right just yet and the

2477
02:08:16,409 --> 02:08:19,500
reason is because this thing doesn't

2478
02:08:17,819 --> 02:08:25,889
always happen I'm gonna make this always

2479
02:08:19,500 --> 02:08:28,770
happen and I think we're correct right

2480
02:08:25,890 --> 02:08:33,090
and so all I'm doing here is just making

2481
02:08:28,770 --> 02:08:35,190
sure that the size that I computed when

2482
02:08:33,090 --> 02:08:37,890
I said how much room will this take up

2483
02:08:35,189 --> 02:08:39,299
when I actually go to generate the MIPS

2484
02:08:37,890 --> 02:08:41,610
I want to make sure they're the same

2485
02:08:39,300 --> 02:08:42,329
because they're they ain't then we got a

2486
02:08:41,609 --> 02:08:48,599
problem

2487
02:08:42,329 --> 02:08:50,819
right that's and that just makes sure

2488
02:08:48,600 --> 02:08:53,520
we've written to the same amount of

2489
02:08:50,819 --> 02:08:58,139
space as we requested it's a way of

2490
02:08:53,520 --> 02:09:00,120
checking that math right so it looked

2491
02:08:58,140 --> 02:09:02,070
like the MIT was working properly I just

2492
02:09:00,119 --> 02:09:05,099
want to make sure that and it is all

2493
02:09:02,069 --> 02:09:07,319
right so we've got a weird bug happening

2494
02:09:05,100 --> 02:09:09,809
here because we're asking for the right

2495
02:09:07,319 --> 02:09:13,920
amount of size and then

2496
02:09:09,809 --> 02:09:19,199
using that I don't know what we're doing

2497
02:09:13,920 --> 02:09:20,730
wrong that's kind of confusing so in

2498
02:09:19,198 --> 02:09:22,649
here we're we're looking at the texture

2499
02:09:20,729 --> 02:09:26,299
ops I guess now I'm starting to wonder

2500
02:09:22,649 --> 02:09:29,129
like is there something else more subtle

2501
02:09:26,300 --> 02:09:31,260
that I don't understand about the way

2502
02:09:29,130 --> 02:09:34,219
like that I've just forgotten because we

2503
02:09:31,260 --> 02:09:36,510
haven't looked at this system in a while

2504
02:09:34,219 --> 02:09:39,859
is there something more subtle that's

2505
02:09:36,510 --> 02:09:43,289
going on here that's like that I'm not

2506
02:09:39,859 --> 02:09:46,589
appreciating when we actually go in here

2507
02:09:43,288 --> 02:09:54,630
and do the get total size form it's like

2508
02:09:46,590 --> 02:09:57,119
for this for example is there something

2509
02:09:54,630 --> 02:09:59,489
weird happening here right where the

2510
02:09:57,118 --> 02:10:01,618
bitmap width and height is it's like

2511
02:09:59,488 --> 02:10:03,750
different I am kind of interested why do

2512
02:10:01,618 --> 02:10:05,549
we get this multiple times does anyone

2513
02:10:03,750 --> 02:10:08,219
know what the idea is behind that

2514
02:10:05,550 --> 02:10:11,610
because that seems kind of busted we

2515
02:10:08,219 --> 02:10:13,198
already have that information up here so

2516
02:10:11,609 --> 02:10:15,799
it kind of seems weird to get it again

2517
02:10:13,198 --> 02:10:19,729
I'm gonna go ahead and get rid of that

2518
02:10:15,800 --> 02:10:19,730
that just doesn't really make any sense

2519
02:10:24,859 --> 02:10:34,259
so this works sighs here that is still

2520
02:10:28,260 --> 02:10:38,460
just the single mipmap size what I might

2521
02:10:34,260 --> 02:10:42,989
do there is say top level size and grab

2522
02:10:38,460 --> 02:10:46,920
that and that way down here I could just

2523
02:10:42,988 --> 02:10:49,109
say top size so that's the amount we

2524
02:10:46,920 --> 02:10:52,590
load that's just the size of the top

2525
02:10:49,109 --> 02:10:55,038
level of the myth the biggest level of

2526
02:10:52,590 --> 02:10:58,409
the pyramid which might call the pace

2527
02:10:55,038 --> 02:11:02,130
and then yeah everything else falls from

2528
02:10:58,408 --> 02:11:04,049
there now unfortunately I don't see I

2529
02:11:02,130 --> 02:11:08,579
don't see us doing anything Squinkie

2530
02:11:04,050 --> 02:11:11,710
here looks looks correct

2531
02:11:08,579 --> 02:11:11,710
[Music]

2532
02:11:13,988 --> 02:11:18,759
so what else could go wrong there

2533
02:11:21,010 --> 02:11:27,590
so inside to get texture off you know

2534
02:11:24,679 --> 02:11:30,139
we're just we don't use that width and

2535
02:11:27,590 --> 02:11:33,069
height anywhere that I know of you know

2536
02:11:30,139 --> 02:11:35,840
we're just using science requested

2537
02:11:33,069 --> 02:11:46,250
pretty cleanly so I feel like that

2538
02:11:35,840 --> 02:11:48,980
should be okay that that seems fine

2539
02:11:46,250 --> 02:11:51,520
right when we're pulling those texture

2540
02:11:48,979 --> 02:11:51,519
ops off

2541
02:12:01,270 --> 02:12:07,840
so when we're pulling the texture apps

2542
02:12:03,430 --> 02:12:10,500
off the queue which is here when we grab

2543
02:12:07,840 --> 02:12:14,010
one of these things

2544
02:12:10,500 --> 02:12:14,010
[Music]

2545
02:12:24,699 --> 02:12:29,309
again I really don't see what the

2546
02:12:26,739 --> 02:12:29,309
problem is

2547
02:12:35,288 --> 02:12:44,670
maybe you guys already saw it but but

2548
02:12:40,960 --> 02:12:49,319
but I fail to fail to see the special

2549
02:12:44,670 --> 02:12:49,319
special sauce here right

2550
02:12:59,350 --> 02:13:03,430
you can see that the texture width and

2551
02:13:01,420 --> 02:13:10,060
height are consistent with height width

2552
02:13:03,430 --> 02:13:12,570
and height are considered authoritative

2553
02:13:10,060 --> 02:13:12,570
there

2554
02:13:20,090 --> 02:13:25,409
I'll be honest I'm not sure why we use a

2555
02:13:22,679 --> 02:13:27,840
2d texture array through these folks

2556
02:13:25,408 --> 02:13:29,549
here but I guess we decided that was

2557
02:13:27,840 --> 02:13:32,810
just a easier way to do it and we don't

2558
02:13:29,550 --> 02:13:32,810
care about some of the wasted space

2559
02:13:56,560 --> 02:14:03,190
hmm I don't know I can't say that we

2560
02:14:00,489 --> 02:14:04,420
could simplify that by not re

2561
02:14:03,189 --> 02:14:06,129
referencing the thing we already

2562
02:14:04,420 --> 02:14:08,909
referenced up here nothing that saves

2563
02:14:06,130 --> 02:14:12,850
much space but you might as well do it

2564
02:14:08,909 --> 02:14:15,250
and I don't see I don't see where we're

2565
02:14:12,850 --> 02:14:19,210
going wrong there when we're doing the

2566
02:14:15,250 --> 02:14:26,979
submission seems like that should just

2567
02:14:19,210 --> 02:14:32,130
work and I don't know why we would be

2568
02:14:26,979 --> 02:14:36,759
getting over writing of the image

2569
02:14:32,130 --> 02:14:38,529
especially since that first submission I

2570
02:14:36,760 --> 02:14:42,970
mean you can see right here that it's

2571
02:14:38,529 --> 02:14:45,369
using it should be using the exact same

2572
02:14:42,970 --> 02:14:48,100
data pointers but the fact that if we

2573
02:14:45,369 --> 02:14:54,510
turn off down sampling that we don't

2574
02:14:48,100 --> 02:14:54,510
overwrite it it's just a real stumper I

2575
02:14:58,140 --> 02:15:05,829
don't know so let's just go over this

2576
02:15:03,699 --> 02:15:08,079
again I'm going to turn on optimize just

2577
02:15:05,829 --> 02:15:09,699
to see if we also we got that crash I

2578
02:15:08,079 --> 02:15:11,229
want to provoke that crash if possible

2579
02:15:09,699 --> 02:15:15,279
can we get that happening and optimize

2580
02:15:11,229 --> 02:15:17,709
build by a chance to know so in this

2581
02:15:15,279 --> 02:15:20,319
case we recall the down sampler we know

2582
02:15:17,710 --> 02:15:22,359
that all we have to do is just turn off

2583
02:15:20,319 --> 02:15:24,699
the down sanfran we don't get that I'm

2584
02:15:22,359 --> 02:15:27,670
assuming that's true even if I just went

2585
02:15:24,699 --> 02:15:30,279
in to the image processing and literally

2586
02:15:27,670 --> 02:15:32,260
just turned off just the pixel right I'm

2587
02:15:30,279 --> 02:15:35,159
assuming so meaning if I just get rid of

2588
02:15:32,260 --> 02:15:37,360
that so we're not writing the pixels

2589
02:15:35,159 --> 02:15:39,970
that we would still get the problem so

2590
02:15:37,359 --> 02:15:44,559
this still does everything except just

2591
02:15:39,970 --> 02:15:47,020
the pixel right yeah so this you know we

2592
02:15:44,560 --> 02:15:49,480
know that this thing here is writing

2593
02:15:47,020 --> 02:15:52,330
into some place it shouldn't write into

2594
02:15:49,479 --> 02:15:53,979
and I'm just at a loss because it looked

2595
02:15:52,329 --> 02:15:56,439
like it was writing to exactly the right

2596
02:15:53,979 --> 02:16:01,629
place I'm just kind of at a loss as to

2597
02:15:56,439 --> 02:16:05,199
how that's happening because it

2598
02:16:01,630 --> 02:16:08,109
shouldn't be right and so that that that

2599
02:16:05,199 --> 02:16:09,908
desk pixel problem is really the primary

2600
02:16:08,109 --> 02:16:19,948
problem that we're seeing

2601
02:16:09,908 --> 02:16:24,369
and again if we kind of look at here

2602
02:16:19,948 --> 02:16:26,079
what this myth image pointer shows I'm

2603
02:16:24,369 --> 02:16:27,639
gonna put in yet another assertion I'm

2604
02:16:26,079 --> 02:16:30,960
gonna add as many as sources as I can

2605
02:16:27,639 --> 02:16:35,138
here to see if I can detect where that

2606
02:16:30,960 --> 02:16:42,898
that boundary error is happening so

2607
02:16:35,138 --> 02:16:49,329
let's say that I would just do you 8

2608
02:16:42,898 --> 02:16:52,478
star or well here assert I've got a down

2609
02:16:49,329 --> 02:16:58,888
sample from source to this right I want

2610
02:16:52,478 --> 02:16:58,888
to assert that the source pixel pointer

2611
02:17:00,840 --> 02:17:08,819
plus the source width times the source

2612
02:17:04,989 --> 02:17:12,750
oops Times source height time store

2613
02:17:08,819 --> 02:17:15,699
right that's the end of that bitmap I

2614
02:17:12,750 --> 02:17:24,299
want to assert that the end of that

2615
02:17:15,700 --> 02:17:27,880
bitmap is where I start here right so

2616
02:17:24,299 --> 02:17:30,279
basically if I added the full size of

2617
02:17:27,879 --> 02:17:33,518
the source that's where I'm starting to

2618
02:17:30,280 --> 02:17:36,780
right next time just want to make sure

2619
02:17:33,519 --> 02:17:36,780
that that's true

2620
02:17:39,349 --> 02:17:46,459
and we still get the air right I mean

2621
02:17:44,510 --> 02:17:48,318
you see how weird that is right so we

2622
02:17:46,459 --> 02:17:51,079
know we're still writing to where we

2623
02:17:48,318 --> 02:17:56,498
would expect if we were completely done

2624
02:17:51,078 --> 02:17:56,498
with it

2625
02:18:08,370 --> 02:18:22,070
I don't know

2626
02:18:22,129 --> 02:18:28,049
all right so desperate times call for

2627
02:18:25,920 --> 02:18:30,739
desperate measures here so I'm gonna try

2628
02:18:28,049 --> 02:18:36,268
something even more ridiculous

2629
02:18:30,739 --> 02:18:39,329
so inside down sample 2x well actually

2630
02:18:36,269 --> 02:18:41,250
not I'm gonna call down sample 2x so

2631
02:18:39,329 --> 02:18:49,138
instead of calling down sample 2x this

2632
02:18:41,250 --> 02:18:50,459
is gonna put a f 0 around that so

2633
02:18:49,138 --> 02:18:52,199
instead what I'm going to do is I'm

2634
02:18:50,459 --> 02:18:54,898
going to set a different color for each

2635
02:18:52,200 --> 02:18:58,109
level of the mipmap so I can see what it

2636
02:18:54,898 --> 02:19:01,519
looks like right so instead of calling

2637
02:18:58,109 --> 02:19:05,909
down sample 2x I'm just gonna call like

2638
02:19:01,519 --> 02:19:08,728
fill image which is just gonna be some

2639
02:19:05,909 --> 02:19:11,159
other call that we have I'm gonna say

2640
02:19:08,728 --> 02:19:13,409
that I want to fill this image whatever

2641
02:19:11,159 --> 02:19:16,379
it is with a particular color that color

2642
02:19:13,409 --> 02:19:21,859
is going to be based on the level so we

2643
02:19:16,379 --> 02:19:24,148
have a debug color table do we not yes

2644
02:19:21,859 --> 02:19:29,929
and so what I want to do here is just

2645
02:19:24,148 --> 02:19:33,718
call get debug color with the MIT level

2646
02:19:29,929 --> 02:19:44,239
and that will give me back a unique

2647
02:19:33,718 --> 02:19:44,239
color and I'll just pack that right sir

2648
02:19:46,709 --> 02:19:58,169
what's our pack call yeah so I'm gonna

2649
02:19:55,170 --> 02:20:02,100
say give me any bit color I want to fill

2650
02:19:58,170 --> 02:20:03,988
the image with the MIPS going down since

2651
02:20:02,100 --> 02:20:08,250
we know the debug color table has a

2652
02:20:03,988 --> 02:20:11,818
particular order to it right we will

2653
02:20:08,250 --> 02:20:14,250
expect to see red at level zero which we

2654
02:20:11,818 --> 02:20:16,228
will not be filling so we would never

2655
02:20:14,250 --> 02:20:17,818
see that the first level down will be

2656
02:20:16,228 --> 02:20:21,148
green the next level down will be blue

2657
02:20:17,818 --> 02:20:22,948
and so on right I'm gonna call this fill

2658
02:20:21,148 --> 02:20:24,988
image this will be in our image library

2659
02:20:22,949 --> 02:20:27,029
here and it will just follow the same

2660
02:20:24,988 --> 02:20:31,709
rules as downsample so we can try to

2661
02:20:27,029 --> 02:20:39,359
debug these right so it's gonna take a

2662
02:20:31,709 --> 02:20:40,679
desk and a color right like that and

2663
02:20:39,359 --> 02:20:42,510
then when it's gonna do is that you're

2664
02:20:40,680 --> 02:20:44,398
gonna loop over the entire thing and

2665
02:20:42,510 --> 02:20:48,300
it's gonna fill it so it's just gonna

2666
02:20:44,398 --> 02:20:52,019
say alright we have a particular desk

2667
02:20:48,299 --> 02:20:54,568
disel here in our desk pixels we are

2668
02:20:52,020 --> 02:20:57,120
going to make a count and that's going

2669
02:20:54,568 --> 02:20:58,799
to be the width times the height and

2670
02:20:57,120 --> 02:21:04,050
then we're just gonna do like a wild

2671
02:20:58,799 --> 02:21:06,389
count - - start s pixel plus plus equals

2672
02:21:04,049 --> 02:21:09,209
color so we're just gonna fill that

2673
02:21:06,389 --> 02:21:16,409
region with the color and that's it

2674
02:21:09,209 --> 02:21:18,738
right we don't know what that is here

2675
02:21:16,409 --> 02:21:18,738
apparently

2676
02:21:29,780 --> 02:21:36,479
so I'm not sure where the debug color

2677
02:21:32,728 --> 02:21:48,000
table should live I guess now I think

2678
02:21:36,478 --> 02:21:53,429
about it but probably insured I think

2679
02:21:48,000 --> 02:22:05,639
we'd want that everywhere so now if I

2680
02:21:53,430 --> 02:22:09,689
run it what do I see okay so am I still

2681
02:22:05,639 --> 02:22:12,689
calling the function because if so that

2682
02:22:09,689 --> 02:22:17,370
means it's literally just this call to

2683
02:22:12,689 --> 02:22:25,340
down sample to X that's broken how is

2684
02:22:17,370 --> 02:22:30,020
that possible we are filling desk pixels

2685
02:22:25,340 --> 02:22:30,020
just the same here

2686
02:22:37,870 --> 02:22:48,800
okay I yes

2687
02:22:44,170 --> 02:22:52,700
don't ask me what I was thinking here so

2688
02:22:48,799 --> 02:22:54,829
for some reason and I have no idea what

2689
02:22:52,700 --> 02:22:57,409
the reason is when we ported this

2690
02:22:54,829 --> 02:22:59,810
routine we looped over the source width

2691
02:22:57,409 --> 02:23:02,601
and height but we're writing pixels for

2692
02:22:59,810 --> 02:23:03,590
that many so actually it's the desk

2693
02:23:02,601 --> 02:23:07,670
width and height

2694
02:23:03,590 --> 02:23:11,229
we weren't writing over our mipmap we

2695
02:23:07,670 --> 02:23:18,979
were writing over like the next person's

2696
02:23:11,229 --> 02:23:20,511
right but hey that's pretty good

2697
02:23:18,979 --> 02:23:23,511
I mean that was a good way to find that

2698
02:23:20,511 --> 02:23:27,370
bug I think so I want to say I can turn

2699
02:23:23,511 --> 02:23:27,370
on downsample now and we should be fine

2700
02:23:30,909 --> 02:23:37,310
and we are so okay so that seems all

2701
02:23:34,549 --> 02:23:39,439
good right now we should not be using

2702
02:23:37,310 --> 02:23:42,110
the mid Maps like I said they should not

2703
02:23:39,440 --> 02:23:45,409
be turned on so if I come over here and

2704
02:23:42,110 --> 02:23:47,391
I zoom yeah I still see a fair bit of

2705
02:23:45,409 --> 02:23:49,909
crispness there right which is what I

2706
02:23:47,390 --> 02:23:52,940
expect and so all we really need to do

2707
02:23:49,909 --> 02:23:54,829
now is see if our MIT Maps work is to

2708
02:23:52,940 --> 02:23:57,021
just turn them on and let's do that and

2709
02:23:54,829 --> 02:23:59,360
then we'll call it a day because hey we

2710
02:23:57,021 --> 02:24:02,931
did all the implementation work we might

2711
02:23:59,360 --> 02:24:07,790
as well actually turn them on okay so if

2712
02:24:02,931 --> 02:24:10,851
we look at our GL text parameter I here

2713
02:24:07,790 --> 02:24:13,250
they are so when we're creating our MIT

2714
02:24:10,851 --> 02:24:17,329
Maps I'm sorry are our textures here you

2715
02:24:13,250 --> 02:24:19,851
can see this is the frame buffer stuff

2716
02:24:17,329 --> 02:24:21,200
so we want the actual texture side of

2717
02:24:19,851 --> 02:24:24,319
things there it is

2718
02:24:21,200 --> 02:24:25,820
so here's our special textures we're

2719
02:24:24,319 --> 02:24:30,170
gonna leave mipmapping off on those

2720
02:24:25,819 --> 02:24:33,379
here's our regular textures and we want

2721
02:24:30,170 --> 02:24:38,890
those to have the text primer at Iset

2722
02:24:33,379 --> 02:24:42,579
saying that we'll use mipmapping so that

2723
02:24:38,890 --> 02:24:42,579
linear oops

2724
02:24:43,120 --> 02:24:48,290
linear mipmap nearest there's two

2725
02:24:46,700 --> 02:24:50,400
different versions we can use here

2726
02:24:48,290 --> 02:24:53,460
linear map map nearest is just

2727
02:24:50,399 --> 02:24:54,869
say pick the right mipmap for the size

2728
02:24:53,459 --> 02:24:58,649
the thing is on the screen and then do a

2729
02:24:54,870 --> 02:25:00,960
bilinear filter right there is also a

2730
02:24:58,649 --> 02:25:02,039
linear mipmap linear and that's what's

2731
02:25:00,959 --> 02:25:04,829
generally called trilinear filtering

2732
02:25:02,040 --> 02:25:07,650
that's saying find the lowest and

2733
02:25:04,829 --> 02:25:10,170
highest or sorry the next down in the

2734
02:25:07,649 --> 02:25:12,029
next up mipmap from where we are because

2735
02:25:10,170 --> 02:25:14,220
we're gonna fall in between two MIT maps

2736
02:25:12,030 --> 02:25:15,601
depending on where we are due by oh

2737
02:25:14,220 --> 02:25:18,449
you're filtering on both and then

2738
02:25:15,601 --> 02:25:20,310
trilinear i don't really want to do that

2739
02:25:18,450 --> 02:25:22,801
i'd like to try and make our renderer

2740
02:25:20,310 --> 02:25:24,750
and it work without that because again

2741
02:25:22,800 --> 02:25:26,699
it's just more texture samples but I

2742
02:25:24,750 --> 02:25:28,440
don't think we need because we're not

2743
02:25:26,700 --> 02:25:34,079
really in a situation where I think

2744
02:25:28,440 --> 02:25:35,790
trilinear would be required so let's see

2745
02:25:34,079 --> 02:25:38,761
whether we get any filtering here now I

2746
02:25:35,790 --> 02:25:43,110
don't actually know if we will let me

2747
02:25:38,761 --> 02:25:45,920
hop out to an area that's got a lot of

2748
02:25:43,110 --> 02:25:45,920
Criss penis in it

2749
02:25:46,700 --> 02:25:56,040
lovely much much much better all right

2750
02:25:53,729 --> 02:25:57,841
when we get out here I'm still seeing a

2751
02:25:56,040 --> 02:25:59,011
little crispness but that may just be

2752
02:25:57,841 --> 02:26:00,810
because we've got a lot of things that

2753
02:25:59,011 --> 02:26:02,610
are kind of overlapping and RZ fighting

2754
02:26:00,810 --> 02:26:04,520
is hurting us a little bit I'm not

2755
02:26:02,610 --> 02:26:07,290
seeing texture crispy nasai don't think

2756
02:26:04,521 --> 02:26:11,670
so that's much nicer now that we've got

2757
02:26:07,290 --> 02:26:13,261
our MIT Maps going and you know I don't

2758
02:26:11,670 --> 02:26:14,640
know we may have gotten some speed from

2759
02:26:13,261 --> 02:26:16,620
that as well it's hard to say probably

2760
02:26:14,640 --> 02:26:19,920
not because almost all of our time is I

2761
02:26:16,620 --> 02:26:21,480
think still spent if we actually look

2762
02:26:19,920 --> 02:26:23,489
here at the oops that's not the profile

2763
02:26:21,479 --> 02:26:25,350
this is the profiler if you actually

2764
02:26:23,489 --> 02:26:26,640
look at the amount of time spent you

2765
02:26:25,351 --> 02:26:28,021
know I think our lighting still Dwarfs

2766
02:26:26,640 --> 02:26:32,880
everything and I don't know that we're

2767
02:26:28,021 --> 02:26:34,771
really having a problem with them with

2768
02:26:32,880 --> 02:26:36,149
anything else here you can also see look

2769
02:26:34,771 --> 02:26:38,101
at how long render ground-cover is

2770
02:26:36,149 --> 02:26:40,560
taking right it's showing up now it's

2771
02:26:38,101 --> 02:26:41,579
not actually competing with lighting but

2772
02:26:40,560 --> 02:26:44,489
if lighting went away it would be

2773
02:26:41,579 --> 02:26:46,261
relevant and that's just because there's

2774
02:26:44,489 --> 02:26:47,909
just so much random computation pushing

2775
02:26:46,261 --> 02:26:50,370
in there right and that's the thing I

2776
02:26:47,909 --> 02:26:51,479
said like we can put we can actually

2777
02:26:50,370 --> 02:26:53,040
cache that stuff on the graphics card

2778
02:26:51,479 --> 02:26:54,750
and we could get rid of this entirely

2779
02:26:53,040 --> 02:26:56,280
right we could make that go to zero and

2780
02:26:54,750 --> 02:26:57,540
so that's going to be something that

2781
02:26:56,280 --> 02:27:00,750
we'll probably want to take a look at

2782
02:26:57,540 --> 02:27:02,680
our so as a performance candidate as

2783
02:27:00,750 --> 02:27:06,279
well that's why I have it in there

2784
02:27:02,680 --> 02:27:07,720
the profile okay so I think that's all

2785
02:27:06,279 --> 02:27:10,199
for MIT mapping I think we're now

2786
02:27:07,719 --> 02:27:12,578
mipmapping like happy little MIT folks

2787
02:27:10,199 --> 02:27:15,279
will go to a brief Q&amp;A but I think that

2788
02:27:12,578 --> 02:27:17,619
was really all there was so not too much

2789
02:27:15,279 --> 02:27:19,270
to it a bunch of just plumbing really

2790
02:27:17,619 --> 02:27:22,539
and then we had one little bug there

2791
02:27:19,270 --> 02:27:24,459
that was just you know hard to see it

2792
02:27:22,539 --> 02:27:29,709
was a typo but I think we're in good

2793
02:27:24,459 --> 02:27:31,180
shape now and those nips are are gonna

2794
02:27:29,709 --> 02:27:32,829
help us out they help keep that

2795
02:27:31,180 --> 02:27:35,139
rendering nice and stable it looks looks

2796
02:27:32,828 --> 02:27:36,520
better already actually all right so

2797
02:27:35,139 --> 02:27:37,478
let's go to a brief Q&amp;A and then we'll

2798
02:27:36,520 --> 02:27:40,020
call it a day

2799
02:27:37,478 --> 02:27:42,068
it's the mouse working or is this Linux

2800
02:27:40,020 --> 02:27:44,619
the mouse is not working because it's

2801
02:27:42,068 --> 02:27:46,359
Linux of course let me go ahead and

2802
02:27:44,619 --> 02:27:47,918
switch over to the other mouse which

2803
02:27:46,359 --> 02:27:49,119
does work of course because you know

2804
02:27:47,918 --> 02:27:53,828
when you plug two Mouse into a computer

2805
02:27:49,119 --> 02:27:56,578
on Linux one of them will work which one

2806
02:27:53,828 --> 02:27:56,578
is always the question

2807
02:28:03,899 --> 02:28:12,539
would you want to add shooters to the

2808
02:28:05,430 --> 02:28:14,610
asset system you you might if you were

2809
02:28:12,540 --> 02:28:16,620
going to have more of them

2810
02:28:14,610 --> 02:28:19,500
we don't have very many shaders so

2811
02:28:16,620 --> 02:28:22,010
there's it's hard to argue with making

2812
02:28:19,500 --> 02:28:24,239
some kind of special pipeline for them

2813
02:28:22,010 --> 02:28:26,851
but if you were gonna have hundreds of

2814
02:28:24,239 --> 02:28:30,090
shaders which you know a lot of games do

2815
02:28:26,851 --> 02:28:32,790
have depending on how they choose to go

2816
02:28:30,090 --> 02:28:37,500
about that process then you know you

2817
02:28:32,790 --> 02:28:39,740
might it really depends on your your

2818
02:28:37,500 --> 02:28:39,739
needs

2819
02:29:01,398 --> 02:29:04,068
which shares are considered special

2820
02:29:02,629 --> 02:29:09,019
textures and why do they not want

2821
02:29:04,068 --> 02:29:10,549
mipmapping so it's not necessarily that

2822
02:29:09,020 --> 02:29:14,380
they don't want mipmapping special

2823
02:29:10,549 --> 02:29:20,629
textures are these so like stuff that's

2824
02:29:14,379 --> 02:29:23,238
used for stuff that's used for like

2825
02:29:20,629 --> 02:29:25,309
cutscenes and stuff like that so like

2826
02:29:23,238 --> 02:29:27,920
these are these are all special textures

2827
02:29:25,309 --> 02:29:29,959
and the reason that they're special

2828
02:29:27,920 --> 02:29:32,359
textures is because they don't fit in

2829
02:29:29,959 --> 02:29:35,019
512 by 512 they can't be like shoehorned

2830
02:29:32,359 --> 02:29:40,100
into a small texture because they're big

2831
02:29:35,020 --> 02:29:43,729
um I wouldn't necessarily say that we

2832
02:29:40,100 --> 02:29:45,260
don't want mipmapping for them I just

2833
02:29:43,728 --> 02:29:47,988
didn't want to deal with that right now

2834
02:29:45,260 --> 02:29:55,670
so we may wanted her a non mipmapping

2835
02:29:47,988 --> 02:29:57,350
for them actually I just did it so you

2836
02:29:55,670 --> 02:30:00,949
know we have to think about it what I

2837
02:29:57,350 --> 02:30:04,189
would say is based on the way they're

2838
02:30:00,949 --> 02:30:06,078
used we probably don't want all the Matt

2839
02:30:04,189 --> 02:30:09,470
Maps for most of them so it would

2840
02:30:06,078 --> 02:30:12,289
probably be wasted effort if we

2841
02:30:09,469 --> 02:30:15,559
generated the entire MIT pyramid for

2842
02:30:12,290 --> 02:30:17,710
special textures so it's hard to say

2843
02:30:15,559 --> 02:30:20,090
what we really want to do there but

2844
02:30:17,709 --> 02:30:21,469
point being the important thing is it's

2845
02:30:20,090 --> 02:30:24,920
not that we don't want MIPS for them

2846
02:30:21,469 --> 02:30:26,448
it's that I only really care about MIPS

2847
02:30:24,920 --> 02:30:27,590
or the other stuff right now and we

2848
02:30:26,449 --> 02:30:32,529
haven't really thought through whether

2849
02:30:27,590 --> 02:30:32,529
we want MIPS for cutscenes or not right

2850
02:30:36,609 --> 02:30:41,630
off topic can you explain the light-blue

2851
02:30:39,469 --> 02:30:43,250
selection bars in for kotor oh that was

2852
02:30:41,629 --> 02:30:45,920
just the thing I tried adding that shows

2853
02:30:43,250 --> 02:30:48,709
what the region is between the mark and

2854
02:30:45,920 --> 02:30:50,960
the point I ended up not really liking

2855
02:30:48,709 --> 02:30:54,738
it so I don't actually use it anymore in

2856
02:30:50,959 --> 02:31:01,009
my main build but it was just an

2857
02:30:54,738 --> 02:31:03,529
experiment request to change the name of

2858
02:31:01,010 --> 02:31:05,940
nip iterator to nip diretor request

2859
02:31:03,529 --> 02:31:08,819
denied

2860
02:31:05,940 --> 02:31:10,800
through stream is difficult to notice

2861
02:31:08,819 --> 02:31:12,659
can we please see through an image sent

2862
02:31:10,799 --> 02:31:24,259
through chat difference before and after

2863
02:31:12,659 --> 02:31:26,760
MIT maps yes and well we may be able to

2864
02:31:24,260 --> 02:31:28,771
I was trying to think if we could just

2865
02:31:26,760 --> 02:31:32,960
add a switch easily that lets us turn

2866
02:31:28,771 --> 02:31:32,960
mipmapping on and off actually in place

2867
02:31:43,450 --> 02:31:50,260
so we we actually could just do that so

2868
02:31:50,829 --> 02:31:58,489
like I don't really remember how we did

2869
02:31:54,920 --> 02:32:00,310
this but so you see here how we've got

2870
02:31:58,489 --> 02:32:06,440
like mmm

2871
02:32:00,310 --> 02:32:14,899
this call happening we could just have a

2872
02:32:06,440 --> 02:32:21,370
thing that when you do the change

2873
02:32:14,899 --> 02:32:21,369
settings call that happens so like

2874
02:32:34,000 --> 02:32:56,180
where is that where was that thing

2875
02:32:38,020 --> 02:32:58,908
here we go so we could do something like

2876
02:32:56,180 --> 02:33:03,408
this where when we change the texture

2877
02:32:58,908 --> 02:33:05,988
settings we can put a thing in here that

2878
02:33:03,408 --> 02:33:10,969
like switches between two things so we

2879
02:33:05,988 --> 02:33:13,369
can do linear mipmap nearest or well we

2880
02:33:10,969 --> 02:33:21,528
could actually have it cycle between the

2881
02:33:13,370 --> 02:33:27,069
bunch things if we want to what we could

2882
02:33:21,529 --> 02:33:27,069
do is say where's those settings at so

2883
02:33:27,520 --> 02:33:38,180
this right where we do the settings

2884
02:33:31,930 --> 02:33:43,850
where's the settings stored game render

2885
02:33:38,180 --> 02:33:45,800
settings so in here we've got like all

2886
02:33:43,850 --> 02:33:50,590
this nonsense

2887
02:33:45,799 --> 02:33:50,590
we could have like

2888
02:34:10,760 --> 02:34:17,790
we could do something like this and then

2889
02:34:15,510 --> 02:34:22,139
whenever you change the settings we

2890
02:34:17,790 --> 02:34:25,470
would go in and set this accordingly so

2891
02:34:22,139 --> 02:34:27,949
there'd be like what is that like a glue

2892
02:34:25,469 --> 02:34:27,949
inch or something

2893
02:34:31,559 --> 02:34:36,229
and then we'd have like some if nonsense

2894
02:34:40,879 --> 02:34:52,559
that would crack that value and so this

2895
02:34:44,670 --> 02:34:59,879
thing would be like Texel filtering and

2896
02:34:52,559 --> 02:35:05,969
actually I guess we could do this pin

2897
02:34:59,879 --> 02:35:08,219
filter mac filter so what we could do

2898
02:35:05,969 --> 02:35:10,829
here is we could actually set these

2899
02:35:08,219 --> 02:35:17,819
things up where we say okay we've got

2900
02:35:10,829 --> 02:35:23,850
hmm a min filter and a mag filter that

2901
02:35:17,819 --> 02:35:25,940
we're gonna specify don't ask me why I

2902
02:35:23,850 --> 02:35:29,159
put max in there I think it's

2903
02:35:25,940 --> 02:35:31,050
magnification I don't actually know and

2904
02:35:29,159 --> 02:35:31,590
we'll set those based on what the

2905
02:35:31,049 --> 02:35:36,829
settings

2906
02:35:31,590 --> 02:35:36,829
it suggests so up here where we say

2907
02:35:37,370 --> 02:35:45,390
settings I can pull out you know

2908
02:35:40,250 --> 02:35:50,850
settings and you know what these usually

2909
02:35:45,389 --> 02:35:55,739
want to be set to zero probably so I

2910
02:35:50,850 --> 02:36:01,290
probably want this to be like nearest

2911
02:35:55,739 --> 02:36:04,469
Texel filtering and no MIT maps right I

2912
02:36:01,290 --> 02:36:06,150
want them to the opposite so you like by

2913
02:36:04,469 --> 02:36:09,989
default you clear to zero you just get

2914
02:36:06,149 --> 02:36:11,940
the right settings you know I mean so

2915
02:36:09,989 --> 02:36:17,879
right here will say nearest textile

2916
02:36:11,940 --> 02:36:20,569
filtering and no MIT maps are the two

2917
02:36:17,879 --> 02:36:20,569
things we're checking

2918
02:36:22,521 --> 02:36:33,720
hmm and then we'll set these things up

2919
02:36:26,610 --> 02:36:40,351
properly for all those all right so if

2920
02:36:33,719 --> 02:36:42,770
we have an filter see how we want to do

2921
02:36:40,351 --> 02:36:42,771
this here

2922
02:36:47,060 --> 02:36:52,229
all right so if we have nearest texture

2923
02:36:50,549 --> 02:36:55,259
filtering on or off basically what

2924
02:36:52,229 --> 02:36:57,689
that's going to switch between is

2925
02:36:55,260 --> 02:37:02,040
whether or not we're gonna grab MIT Maps

2926
02:36:57,690 --> 02:37:03,409
here or not so I just help do this all

2927
02:37:02,040 --> 02:37:07,311
right mm-hmm

2928
02:37:03,409 --> 02:37:07,310
maybe it's clear to write it like this

2929
02:37:08,719 --> 02:37:15,060
all right so what are all of our

2930
02:37:11,219 --> 02:37:17,819
settings so if we're in nearest textile

2931
02:37:15,060 --> 02:37:27,479
filtering then that means these should

2932
02:37:17,819 --> 02:37:30,299
all be nearest right and if we don't

2933
02:37:27,479 --> 02:37:33,899
want MIT Maps then there's no MIT map

2934
02:37:30,299 --> 02:37:36,299
selection either if we if we're in this

2935
02:37:33,899 --> 02:37:39,959
path so we're like near nearest textile

2936
02:37:36,299 --> 02:37:41,039
filtering then that's gonna be if

2937
02:37:39,959 --> 02:37:44,640
there's no MIT Maps

2938
02:37:41,040 --> 02:37:52,080
it's just nearest which is I'm sorry

2939
02:37:44,640 --> 02:37:57,289
it's just linear like so I and if we are

2940
02:37:52,079 --> 02:37:57,289
using MIT Maps then it's linear on both

2941
02:38:00,021 --> 02:38:03,021
right

2942
02:38:10,159 --> 02:38:15,140
I think I missed a case there no textile

2943
02:38:13,671 --> 02:38:18,711
filtering no mipmap so thirsteee

2944
02:38:15,140 --> 02:38:23,060
no okay sorry this is linear but no MIT

2945
02:38:18,710 --> 02:38:33,010
maps this is linear on both I guess we

2946
02:38:23,060 --> 02:38:36,110
don't have hmm in the case where we have

2947
02:38:33,011 --> 02:38:47,751
linear and MIT maps I didn't actually

2948
02:38:36,110 --> 02:38:54,021
want this so I guess we just don't have

2949
02:38:47,751 --> 02:38:55,220
a case for that it's just that right so

2950
02:38:54,021 --> 02:38:59,989
since this is our default

2951
02:38:55,220 --> 02:39:01,489
I think I'll phrase it this way oh and

2952
02:38:59,989 --> 02:39:02,899
don't ask me why I was doing the magg

2953
02:39:01,489 --> 02:39:07,610
filter the same because you don't

2954
02:39:02,899 --> 02:39:10,279
actually have to do that right the mag

2955
02:39:07,610 --> 02:39:20,601
filter you just know it only has one it

2956
02:39:10,280 --> 02:39:25,909
can't use MIT Maps right so in this case

2957
02:39:20,601 --> 02:39:27,681
when we know that we have the default

2958
02:39:25,909 --> 02:39:29,300
settings then we don't have to do

2959
02:39:27,681 --> 02:39:33,041
anything

2960
02:39:29,300 --> 02:39:33,040
so our default would be this

2961
02:39:46,949 --> 02:40:00,010
right so we would just say look nearest

2962
02:39:56,109 --> 02:40:02,020
textile filtering that means that the

2963
02:40:00,010 --> 02:40:04,719
magnification turns off linear blending

2964
02:40:02,020 --> 02:40:07,420
then we look do we have MIT maps if we

2965
02:40:04,719 --> 02:40:09,549
don't then it's also just nearest

2966
02:40:07,420 --> 02:40:14,020
filtering otherwise we're gonna pick

2967
02:40:09,549 --> 02:40:16,269
nearest on MIT map and off we go here if

2968
02:40:14,020 --> 02:40:19,658
we have no MIT maps we set the

2969
02:40:16,270 --> 02:40:21,819
minification to linear so we turn off

2970
02:40:19,658 --> 02:40:24,279
the MIT maps but we leave on linear

2971
02:40:21,818 --> 02:40:25,658
filtering and we don't change the Mac

2972
02:40:24,279 --> 02:40:28,210
filter because it's linear always right

2973
02:40:25,658 --> 02:40:32,680
so I think that's all we really need

2974
02:40:28,209 --> 02:40:34,869
there okay so then we just need some way

2975
02:40:32,680 --> 02:40:36,420
of actually setting those things which

2976
02:40:34,870 --> 02:40:43,949
we don't really have at the moment

2977
02:40:36,420 --> 02:40:43,949
excuse me um least I don't think we do

2978
02:40:45,689 --> 02:40:50,579
so here's our renderer commands settings

2979
02:40:55,940 --> 02:41:02,300
so we do have those going all right good

2980
02:41:00,021 --> 02:41:03,980
um so what I want to do there is I want

2981
02:41:02,299 --> 02:41:06,469
to just add that in we're we're doing

2982
02:41:03,979 --> 02:41:09,619
those render command settings stuff I

2983
02:41:06,469 --> 02:41:12,379
want to add those I want to add settings

2984
02:41:09,620 --> 02:41:13,730
so we can toggle these guys right so I

2985
02:41:12,379 --> 02:41:16,270
just want to look for where we're doing

2986
02:41:13,729 --> 02:41:16,270
that oops

2987
02:41:18,819 --> 02:41:31,579
and I just want to add these in so I'm

2988
02:41:21,620 --> 02:41:33,230
going to put that in there and hopefully

2989
02:41:31,579 --> 02:41:37,810
this will just let us you know twiddle

2990
02:41:33,229 --> 02:41:37,810
that and see the results

2991
02:41:46,799 --> 02:41:52,439
okay so hopefully now this is working I

2992
02:41:51,159 --> 02:41:56,560
don't actually know if it is or not

2993
02:41:52,440 --> 02:41:58,659
let's see if we are still getting what

2994
02:41:56,560 --> 02:42:04,390
we would expect to have as the correct

2995
02:41:58,659 --> 02:42:06,789
results so it looks like it's doing the

2996
02:42:04,390 --> 02:42:08,529
mipmapping properly right now and it's

2997
02:42:06,790 --> 02:42:11,110
also doing obviously smooth you know

2998
02:42:08,530 --> 02:42:13,989
it's it's it's blurring those out as its

2999
02:42:11,110 --> 02:42:15,989
sampling so now let's see in here if we

3000
02:42:13,989 --> 02:42:19,239
start playing with that so if we turn on

3001
02:42:15,989 --> 02:42:20,979
nearest textile filtering we should get

3002
02:42:19,239 --> 02:42:25,229
basically like pixel art and you can see

3003
02:42:20,979 --> 02:42:26,949
we sort of do right you can see right

3004
02:42:25,229 --> 02:42:28,390
you see a difference between the

3005
02:42:26,950 --> 02:42:31,990
smoothing that's happening there right

3006
02:42:28,390 --> 02:42:34,239
the bilinear smoothing so that is what

3007
02:42:31,989 --> 02:42:37,209
we would expect to see and then with no

3008
02:42:34,239 --> 02:42:42,459
MIT maps on we would expect to see you

3009
02:42:37,209 --> 02:42:45,659
like as we get out here right all of

3010
02:42:42,459 --> 02:42:48,909
that should get crispier see how it does

3011
02:42:45,659 --> 02:42:51,579
see how it gets much crispier a lot of

3012
02:42:48,909 --> 02:42:53,860
high frequency noise in there so that

3013
02:42:51,579 --> 02:42:56,129
filtering is just taking that down a

3014
02:42:53,860 --> 02:42:56,130
notch

3015
02:43:07,690 --> 02:43:11,170
is there an easy way to view the MIT

3016
02:43:09,459 --> 02:43:12,369
maps sent to the GPU and if so why

3017
02:43:11,170 --> 02:43:17,440
didn't use that feature for debugging

3018
02:43:12,370 --> 02:43:20,410
purposes before there is kind of you can

3019
02:43:17,440 --> 02:43:21,700
just use insight it's not easy I mean it

3020
02:43:20,409 --> 02:43:23,680
takes a little bit setup but you can use

3021
02:43:21,700 --> 02:43:24,909
it we've done that on screen before the

3022
02:43:23,680 --> 02:43:27,310
reason I didn't use that feature for

3023
02:43:24,909 --> 02:43:29,530
debugging purposes here is because we

3024
02:43:27,310 --> 02:43:32,140
knew they were messed up right we're

3025
02:43:29,530 --> 02:43:35,320
like okay we know we're over writing our

3026
02:43:32,140 --> 02:43:38,440
main texture level so why look at the

3027
02:43:35,319 --> 02:43:42,760
GPU it's just gonna show me that right I

3028
02:43:38,440 --> 02:43:45,280
mean the renderer was rendering it so

3029
02:43:42,760 --> 02:43:48,819
the question was who was corrupting it

3030
02:43:45,280 --> 02:43:51,190
there was no graphics bug the graphics

3031
02:43:48,819 --> 02:43:52,890
stuff was working properly it was me I

3032
02:43:51,190 --> 02:43:55,090
was creating the wrong MIT Maps so

3033
02:43:52,890 --> 02:43:57,100
switching that's the reason I didn't

3034
02:43:55,090 --> 02:43:59,049
switch to trying to debug GPU stuff if I

3035
02:43:57,101 --> 02:44:01,271
thought I was sending the GPU the

3036
02:43:59,049 --> 02:44:03,729
correct stuff and we were still getting

3037
02:44:01,271 --> 02:44:08,650
wrong results then I would have gone and

3038
02:44:03,729 --> 02:44:10,390
ran in sight and said let's see what it

3039
02:44:08,649 --> 02:44:11,829
thinks it's getting right because then

3040
02:44:10,390 --> 02:44:13,420
that would be something I would be

3041
02:44:11,829 --> 02:44:15,700
suspicious like okay what's going wrong

3042
02:44:13,420 --> 02:44:17,319
here but I knew right off the bat just

3043
02:44:15,700 --> 02:44:19,300
from that simple test at the beginning I

3044
02:44:17,319 --> 02:44:23,819
knew it wasn't the GPU I knew it was us

3045
02:44:19,299 --> 02:44:27,179
and so I just really didn't need to look

3046
02:44:23,819 --> 02:44:27,180
to see that

3047
02:44:32,500 --> 02:44:37,040
some file formats like DDS have MIT Maps

3048
02:44:35,510 --> 02:44:38,689
already baked in is generating them

3049
02:44:37,040 --> 02:44:47,090
better nowadays or does it actually

3050
02:44:38,689 --> 02:44:49,220
matter any longer so I guess I would say

3051
02:44:47,090 --> 02:44:52,609
that the premise of the question seems a

3052
02:44:49,219 --> 02:44:54,559
little squirrely the file format has it

3053
02:44:52,609 --> 02:44:57,020
baked in but somebody generated it right

3054
02:44:54,559 --> 02:44:59,420
and so we would have just had to

3055
02:44:57,020 --> 02:45:02,810
generate it when we saved out that file

3056
02:44:59,420 --> 02:45:05,029
so you know it doesn't really matter the

3057
02:45:02,809 --> 02:45:06,799
reason I'm generating them online here

3058
02:45:05,029 --> 02:45:08,899
is because I don't want to waste the

3059
02:45:06,799 --> 02:45:11,389
disk bandwidth during load time of

3060
02:45:08,898 --> 02:45:13,430
loading the extra data just doesn't seem

3061
02:45:11,389 --> 02:45:16,699
worth it because it's so fast to box

3062
02:45:13,430 --> 02:45:18,590
filter down on a spare core why not if

3063
02:45:16,700 --> 02:45:21,500
however we found that that somehow was

3064
02:45:18,590 --> 02:45:25,370
too expensive then you might want to try

3065
02:45:21,500 --> 02:45:26,510
loading it I don't know anisotropic

3066
02:45:25,370 --> 02:45:29,390
filtering next I don't think we actually

3067
02:45:26,510 --> 02:45:32,148
needed mr. traffic so I would probably

3068
02:45:29,389 --> 02:45:34,608
not turned on it's more expensive and so

3069
02:45:32,148 --> 02:45:37,000
I probably wouldn't wouldn't turn that

3070
02:45:34,609 --> 02:45:37,000
on No

3071
02:46:08,709 --> 02:46:13,890
looks like we're all set all right

3072
02:46:16,670 --> 02:46:23,279
every issue if we add some packing would

3073
02:46:19,260 --> 02:46:26,579
mipmap interfere with that yes one of

3074
02:46:23,279 --> 02:46:31,590
the big things that you see that's a

3075
02:46:26,579 --> 02:46:36,120
problem with texture packing and it's

3076
02:46:31,590 --> 02:46:37,889
also one of the big reasons we don't use

3077
02:46:36,120 --> 02:46:42,930
an atlas and we use a texture ready to

3078
02:46:37,889 --> 02:46:45,449
begin with is just as you start to work

3079
02:46:42,930 --> 02:46:50,068
with packing you have to do more you

3080
02:46:45,450 --> 02:46:55,200
have to be either you add a crap-ton of

3081
02:46:50,068 --> 02:46:57,389
padding or you have to do specific work

3082
02:46:55,200 --> 02:47:00,630
in your actual texture fetch you can't

3083
02:46:57,389 --> 02:47:03,148
use default texture fetch in order to

3084
02:47:00,629 --> 02:47:07,799
prevent the MIT maps from blurring

3085
02:47:03,148 --> 02:47:12,590
across boundaries of the things that are

3086
02:47:07,799 --> 02:47:15,659
packed into the texels right and so

3087
02:47:12,590 --> 02:47:18,568
there's a lot of subtlety there and

3088
02:47:15,659 --> 02:47:20,488
we're not going to go into it on

3089
02:47:18,568 --> 02:47:24,180
handmade here oh if we pack things we'll

3090
02:47:20,488 --> 02:47:25,500
pack them with significant padding but

3091
02:47:24,180 --> 02:47:27,210
if you want to go down that road you

3092
02:47:25,500 --> 02:47:30,779
have a lot of stuff you got to sort of

3093
02:47:27,209 --> 02:47:33,949
deal with that makes sense that makes

3094
02:47:30,779 --> 02:47:33,950
yeah if that makes sense

3095
02:47:38,690 --> 02:47:42,480
sorry Andra I don't watch you much but I

3096
02:47:41,129 --> 02:47:45,179
was running or those settings you toggle

3097
02:47:42,479 --> 02:47:48,149
can do you have a you a GUI so users can

3098
02:47:45,180 --> 02:47:52,500
interact or is that different yeah so

3099
02:47:48,149 --> 02:47:55,739
the if you're talking about this stuff

3100
02:47:52,500 --> 02:47:59,909
up here this is for developers only so

3101
02:47:55,739 --> 02:48:03,090
it's only in the developer build when

3102
02:47:59,909 --> 02:48:04,021
you turn developer build off for like a

3103
02:48:03,090 --> 02:48:08,420
release mode

3104
02:48:04,021 --> 02:48:08,420
none of this stuff would show up right

3105
02:48:08,510 --> 02:48:12,750
the reason for that is because this is

3106
02:48:11,129 --> 02:48:14,609
pretty much all internal stuff that a

3107
02:48:12,750 --> 02:48:17,851
user would not necessarily understand

3108
02:48:14,610 --> 02:48:18,960
and furthermore most of it is stuff that

3109
02:48:17,851 --> 02:48:21,870
they really shouldn't be playing with

3110
02:48:18,959 --> 02:48:23,939
anyway like we're gonna set textual

3111
02:48:21,870 --> 02:48:26,370
filtering in to the correct settings and

3112
02:48:23,940 --> 02:48:30,300
that's it it's not the kind of thing

3113
02:48:26,370 --> 02:48:31,860
like there are sometimes graphic

3114
02:48:30,299 --> 02:48:34,109
settings that you want users to be able

3115
02:48:31,860 --> 02:48:35,579
to be billed that you want users to be

3116
02:48:34,110 --> 02:48:38,610
able to set themselves because

3117
02:48:35,579 --> 02:48:40,530
enthusiasts will want to tweak their

3118
02:48:38,610 --> 02:48:43,440
like performance or whatever on a PC

3119
02:48:40,530 --> 02:48:45,090
card or something like that whether or

3120
02:48:43,440 --> 02:48:47,601
not using mipmapping isn't really one of

3121
02:48:45,090 --> 02:48:50,819
those things anymore like mipmapping is

3122
02:48:47,601 --> 02:48:53,040
either right or wrong in this situation

3123
02:48:50,819 --> 02:48:56,819
and the user doesn't need to fiddle with

3124
02:48:53,040 --> 02:48:59,580
that so you know this stuff probably

3125
02:48:56,819 --> 02:49:05,520
wouldn't be settings that a user would

3126
02:48:59,579 --> 02:49:09,090
ever actually wouldn't ever actually

3127
02:49:05,521 --> 02:49:11,271
fuss with right so that's what I would

3128
02:49:09,090 --> 02:49:11,271
say

3129
02:49:23,369 --> 02:49:47,239
alright I think that's it for now I'm

3130
02:49:28,828 --> 02:49:49,639
gonna go ahead and close up shop alright

3131
02:49:47,239 --> 02:49:52,170
[Music]

3132
02:49:49,639 --> 02:49:53,608
alright thank you everyone for joining

3133
02:49:52,170 --> 02:49:54,719
me for the episode of hand made here

3134
02:49:53,609 --> 02:49:57,600
it's an applaud recording with you as

3135
02:49:54,719 --> 02:49:59,969
always if you would like to follow along

3136
02:49:57,600 --> 02:50:01,590
series at home you can always pre-order

3137
02:49:59,969 --> 02:50:02,728
the game on hand a hero or comes with

3138
02:50:01,590 --> 02:50:05,789
source code so you can play around with

3139
02:50:02,728 --> 02:50:08,059
it and you can try your own render

3140
02:50:05,789 --> 02:50:10,619
settings see what you think

3141
02:50:08,059 --> 02:50:13,019
I'll be back here in probably next

3142
02:50:10,619 --> 02:50:17,489
weekend I'll have an update and schedule

3143
02:50:13,020 --> 02:50:19,050
yet but I will and we will be starting

3144
02:50:17,488 --> 02:50:21,658
to talk of lighting I think now that

3145
02:50:19,049 --> 02:50:23,398
we've got MIPS in there we're gonna want

3146
02:50:21,658 --> 02:50:26,459
to speed up our lighting get that

3147
02:50:23,398 --> 02:50:29,549
running fast and light our sprites with

3148
02:50:26,459 --> 02:50:34,169
it and I think that will give us a

3149
02:50:29,549 --> 02:50:36,179
pretty darn good looking engine probably

3150
02:50:34,170 --> 02:50:38,129
want to change some of the way we're

3151
02:50:36,180 --> 02:50:39,359
leaning on multi sampling I think we can

3152
02:50:38,129 --> 02:50:40,769
optimize some stuff in the renderer

3153
02:50:39,359 --> 02:50:41,238
that's just kind of wasteful right now

3154
02:50:40,770 --> 02:50:43,828
too

3155
02:50:41,238 --> 02:50:44,969
so just tighten that up get it to the

3156
02:50:43,828 --> 02:50:48,148
point where we're pretty happy with

3157
02:50:44,969 --> 02:50:49,590
looking how things go and then you know

3158
02:50:48,148 --> 02:50:50,760
give ourselves a big pat on the back for

3159
02:50:49,590 --> 02:50:54,960
making a complete game engine from

3160
02:50:50,760 --> 02:50:56,699
scratch every last little bit we

3161
02:50:54,959 --> 02:50:57,809
probably should before we give ourselves

3162
02:50:56,699 --> 02:50:59,158
a pat on the back replaced sine and

3163
02:50:57,809 --> 02:51:00,868
cosine there's only two things we didn't

3164
02:50:59,158 --> 02:51:03,809
read ourselves still calling see library

3165
02:51:00,869 --> 02:51:05,130
version I believe so we'll maybe do that

3166
02:51:03,809 --> 02:51:08,430
and then we can give ourselves a nice

3167
02:51:05,129 --> 02:51:11,278
big pat on the back all right that's it

3168
02:51:08,430 --> 02:51:13,170
for this weekend see folks back here

3169
02:51:11,279 --> 02:51:15,238
next week till then have fun programming

3170
02:51:13,170 --> 02:51:17,449
and I'll see you on the Internet take it

3171
02:51:15,238 --> 02:51:17,448
easy everybody

