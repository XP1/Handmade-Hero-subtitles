1
00:00:00,000 --> 00:00:05,519
start recording hello everyone and

2
00:00:04,080 --> 00:00:07,410
welcome to handmade here on the show

3
00:00:05,519 --> 00:00:10,050
Rico two complete games live on stream

4
00:00:07,410 --> 00:00:12,269
or as is the case yesterday try to

5
00:00:10,050 --> 00:00:16,440
figure out some way to get OpenGL to

6
00:00:12,269 --> 00:00:19,800
stream over OBS which we maybe did maybe

7
00:00:16,440 --> 00:00:21,539
didn't I don't know so we're gonna go

8
00:00:19,800 --> 00:00:23,400
ahead and try to do today's stream which

9
00:00:21,539 --> 00:00:25,439
is how to get the game displaying on

10
00:00:23,399 --> 00:00:26,909
OpenGL I'm gonna go ahead and try to do

11
00:00:25,439 --> 00:00:28,710
it and hopefully folks will see

12
00:00:26,910 --> 00:00:30,929
something but if they don't see

13
00:00:28,710 --> 00:00:33,899
something that's just the way it goes

14
00:00:30,928 --> 00:00:34,289
sometimes with live streaming so here we

15
00:00:33,899 --> 00:00:38,399
go

16
00:00:34,289 --> 00:00:43,019
on day 237 if you have pre-ordered the

17
00:00:38,399 --> 00:00:45,989
game on handmade hero dorg and you would

18
00:00:43,020 --> 00:00:48,450
like to follow along at home that means

19
00:00:45,988 --> 00:00:50,369
you will want to unpack day 236 is

20
00:00:48,450 --> 00:00:52,260
source code is that correct cuz we had

21
00:00:50,369 --> 00:00:54,599
to reboot the machine so we lost the day

22
00:00:52,259 --> 00:00:57,509
counter as well but yeah day 236 is the

23
00:00:54,600 --> 00:01:00,808
last day unpacked day 236 is south code

24
00:00:57,509 --> 00:01:02,729
and you will be where I am right now and

25
00:01:00,808 --> 00:01:05,269
you can go ahead and follow along so

26
00:01:02,729 --> 00:01:08,129
okay the first thing that we have to do

27
00:01:05,269 --> 00:01:10,289
is get the streaming working and like I

28
00:01:08,129 --> 00:01:11,849
said we spent all yesterday trying to

29
00:01:10,290 --> 00:01:15,630
figure out how to do that and here is

30
00:01:11,849 --> 00:01:18,959
what we decided it seemed like if we

31
00:01:15,629 --> 00:01:21,780
turned off double buffering then we

32
00:01:18,959 --> 00:01:24,599
would be able to to display so if we

33
00:01:21,780 --> 00:01:30,180
take this here and we do something like

34
00:01:24,599 --> 00:01:32,519
this and maybe we have a thing that's

35
00:01:30,180 --> 00:01:36,259
like handmade I don't know what here

36
00:01:32,519 --> 00:01:41,129
will we need some additional flag like

37
00:01:36,259 --> 00:01:43,200
handmade streaming and we would just say

38
00:01:41,129 --> 00:01:46,140
okay in the case where we are streaming

39
00:01:43,200 --> 00:01:49,770
we don't include the double buffer flag

40
00:01:46,140 --> 00:01:52,710
and we just say note PFD double buffer

41
00:01:49,769 --> 00:01:55,890
appears to prevent OBS from reliably

42
00:01:52,709 --> 00:01:58,530
streaming the window and then we just

43
00:01:55,890 --> 00:02:01,468
hope that what we discovered yesterday

44
00:01:58,530 --> 00:02:05,280
actually is some general true thing

45
00:02:01,468 --> 00:02:09,239
about streaming OpenGL that works so

46
00:02:05,280 --> 00:02:11,909
let's give it a shot here and and

47
00:02:09,239 --> 00:02:13,879
there's our pink window and the question

48
00:02:11,909 --> 00:02:17,280
is can you guys see

49
00:02:13,879 --> 00:02:20,639
the pink window or not do you see black

50
00:02:17,280 --> 00:02:23,520
do you see pink what do you see or do

51
00:02:20,639 --> 00:02:25,739
you just see a Windows Visual Studio

52
00:02:23,520 --> 00:02:27,480
screen what do you see

53
00:02:25,740 --> 00:02:29,700
and hopefully the answer is that you see

54
00:02:27,479 --> 00:02:32,549
pink good it sounds like people do see

55
00:02:29,699 --> 00:02:37,289
pink so okay so we're good

56
00:02:32,550 --> 00:02:39,570
alright so let's we had our on day 236

57
00:02:37,289 --> 00:02:41,009
we had an explanation of how what GPUs

58
00:02:39,569 --> 00:02:42,810
basically are and just how to think

59
00:02:41,009 --> 00:02:45,659
about them in general and as you know

60
00:02:42,810 --> 00:02:46,890
like I said on that day our first step

61
00:02:45,659 --> 00:02:48,750
because we already have a software

62
00:02:46,889 --> 00:02:50,519
renderer at this point we don't actually

63
00:02:48,750 --> 00:02:52,139
need to get our whole game rendering

64
00:02:50,520 --> 00:02:54,870
through open jail all we really need to

65
00:02:52,139 --> 00:02:57,779
do as a first step is we just need to

66
00:02:54,870 --> 00:03:00,090
find a way to move the image that we've

67
00:02:57,780 --> 00:03:03,659
created of our game we need to figure a

68
00:03:00,090 --> 00:03:07,800
toe move that down to the graphics card

69
00:03:03,659 --> 00:03:11,069
so that you can see the image rendering

70
00:03:07,800 --> 00:03:12,689
through OpenGL so right now what I like

71
00:03:11,069 --> 00:03:15,090
I said before what we do is we just call

72
00:03:12,689 --> 00:03:16,590
GL clear color and then call GL clear

73
00:03:15,090 --> 00:03:18,060
and that's why we're seeing pink is

74
00:03:16,590 --> 00:03:20,879
because the only instructions we've

75
00:03:18,060 --> 00:03:22,620
given to OpenGL as far as what to create

76
00:03:20,879 --> 00:03:24,509
for a command buffer for our graphics

77
00:03:22,620 --> 00:03:26,789
card is just that we want to clear the

78
00:03:24,509 --> 00:03:30,030
screen to pink and that is it that's all

79
00:03:26,789 --> 00:03:31,739
we've done right this said how how how

80
00:03:30,030 --> 00:03:34,409
big of the window should this sort of

81
00:03:31,740 --> 00:03:35,969
gave the extents of how the clear should

82
00:03:34,409 --> 00:03:37,889
happen this gave what the color should

83
00:03:35,969 --> 00:03:39,419
be this gave what buffer to clear and

84
00:03:37,889 --> 00:03:41,609
then we said go ahead and display that

85
00:03:39,419 --> 00:03:45,000
so what we'd like to do here is we'd

86
00:03:41,610 --> 00:03:47,580
like to be able to put something on the

87
00:03:45,000 --> 00:03:49,740
screen that's actually going to come

88
00:03:47,580 --> 00:03:52,410
from our memory so we want something

89
00:03:49,740 --> 00:03:54,900
that will take this buffer that we've

90
00:03:52,409 --> 00:03:56,759
got here and get that buffer down to the

91
00:03:54,900 --> 00:03:58,890
graphics card so that it we can display

92
00:03:56,759 --> 00:04:00,359
it now the way that this works is is

93
00:03:58,889 --> 00:04:02,429
very very similar to the way that we

94
00:04:00,360 --> 00:04:03,570
wrote our software renderer and that's

95
00:04:02,430 --> 00:04:05,129
why we wrote software under that way so

96
00:04:03,569 --> 00:04:07,439
they want you guys to see how a graphics

97
00:04:05,129 --> 00:04:09,269
card works so you if you remember if you

98
00:04:07,439 --> 00:04:10,289
don't go back and re-watch the things we

99
00:04:09,270 --> 00:04:13,140
implemented it because this is exactly

100
00:04:10,289 --> 00:04:16,019
how the card works what we need to do is

101
00:04:13,139 --> 00:04:18,238
we need up need to set up an image for

102
00:04:16,019 --> 00:04:21,358
it to read from which we is a texture in

103
00:04:18,238 --> 00:04:23,129
this case that's what they're generally

104
00:04:21,358 --> 00:04:25,139
called on the card so we need to set up

105
00:04:23,129 --> 00:04:26,418
something that's gonna be a texture and

106
00:04:25,139 --> 00:04:28,968
then we need to draw some

107
00:04:26,418 --> 00:04:31,008
and the word primitive is just used for

108
00:04:28,968 --> 00:04:32,839
anything like a triangle or a line or a

109
00:04:31,009 --> 00:04:34,610
point something that the graphics card

110
00:04:32,839 --> 00:04:36,528
understands how to draw look at our case

111
00:04:34,610 --> 00:04:38,960
our only primitive really in our render

112
00:04:36,528 --> 00:04:40,519
is a rectangle right that's the one that

113
00:04:38,959 --> 00:04:42,228
we implemented on a graphics card

114
00:04:40,519 --> 00:04:45,438
triangles that is the most typical

115
00:04:42,228 --> 00:04:46,668
primitive and the reasons for that are a

116
00:04:45,439 --> 00:04:48,139
sort of a separate thing we could go

117
00:04:46,668 --> 00:04:50,240
into at some point but for right now

118
00:04:48,139 --> 00:04:52,098
suffice to say if we want to do

119
00:04:50,240 --> 00:04:55,009
something like draw a rectangle we need

120
00:04:52,098 --> 00:04:57,259
to draw of the rectangle with either two

121
00:04:55,009 --> 00:05:00,500
triangles to make a rectangle shape

122
00:04:57,259 --> 00:05:07,848
right I couldn't go ahead and sort of

123
00:05:00,500 --> 00:05:11,269
draw that for you here on day 237 we can

124
00:05:07,848 --> 00:05:15,199
either draw it what we want by just

125
00:05:11,269 --> 00:05:17,508
creating say two sort of two triangles

126
00:05:15,199 --> 00:05:19,300
that encompass the rectangle right that

127
00:05:17,509 --> 00:05:24,650
basically say here's here's what it is

128
00:05:19,300 --> 00:05:26,569
or we can draw a single triangle right

129
00:05:24,649 --> 00:05:28,810
we could draw one triangle and try to

130
00:05:26,569 --> 00:05:31,098
clip that triangle to a rectangle

131
00:05:28,810 --> 00:05:32,930
because OpenGL actually has ways of

132
00:05:31,098 --> 00:05:34,848
clipping things obviously it has to

133
00:05:32,930 --> 00:05:36,560
because just like we had to clip things

134
00:05:34,848 --> 00:05:37,968
to the screen boundary open just to clip

135
00:05:36,560 --> 00:05:39,800
things from you better - and just like

136
00:05:37,968 --> 00:05:41,149
we did where we made our clipping be

137
00:05:39,800 --> 00:05:43,310
generic so we could do like tiled

138
00:05:41,149 --> 00:05:44,239
rendering stuff OpenGL clipping is

139
00:05:43,310 --> 00:05:46,908
generic as well

140
00:05:44,240 --> 00:05:48,649
you can choose to clip to some region

141
00:05:46,908 --> 00:05:51,528
that's actually smaller than what the

142
00:05:48,649 --> 00:05:54,560
screen is if you wish so we could use a

143
00:05:51,528 --> 00:05:56,329
thing this is called scissoring we could

144
00:05:54,560 --> 00:05:58,819
use a thing called GL scissor to do it

145
00:05:56,329 --> 00:06:00,348
I'm not gonna do this one right now I'm

146
00:05:58,819 --> 00:06:02,838
gonna do this one because this is the

147
00:06:00,348 --> 00:06:04,038
more generally interesting case because

148
00:06:02,838 --> 00:06:06,500
this would allow us you to draw

149
00:06:04,038 --> 00:06:08,778
rectangles anywhere you want without

150
00:06:06,500 --> 00:06:10,610
having to reset any kind of clipping

151
00:06:08,778 --> 00:06:11,870
mode which you know depending on the

152
00:06:10,610 --> 00:06:15,710
card can be an expensive operation

153
00:06:11,870 --> 00:06:18,379
potentially and you know it can't be

154
00:06:15,709 --> 00:06:20,418
this sort of thing can't exactly be

155
00:06:18,379 --> 00:06:22,580
thought of in the same way sometimes so

156
00:06:20,418 --> 00:06:24,378
we're gonna talk about it in the in the

157
00:06:22,579 --> 00:06:26,658
sense of how you would generally draw

158
00:06:24,379 --> 00:06:28,610
quads not the special case of how you

159
00:06:26,658 --> 00:06:30,560
might draw one when you're only bleeding

160
00:06:28,610 --> 00:06:33,379
to the screen because this is the one

161
00:06:30,560 --> 00:06:35,598
that we will actually want to do when we

162
00:06:33,379 --> 00:06:37,039
move the rendering over to OpenGL so

163
00:06:35,598 --> 00:06:38,300
that you can choose to render everything

164
00:06:37,038 --> 00:06:39,599
through up in jail rather than running

165
00:06:38,300 --> 00:06:41,370
the software rasterizer

166
00:06:39,600 --> 00:06:42,810
we will need to be able to do this for

167
00:06:41,370 --> 00:06:44,069
each of our sprites right because each

168
00:06:42,810 --> 00:06:44,490
of our sprites would be something like

169
00:06:44,069 --> 00:06:46,620
this

170
00:06:44,490 --> 00:06:48,240
so we're gonna literally do exactly this

171
00:06:46,620 --> 00:06:50,759
thing okay

172
00:06:48,240 --> 00:06:53,040
and so the process for doing this is

173
00:06:50,759 --> 00:06:54,990
literally the same exactly the same as

174
00:06:53,040 --> 00:06:56,430
what we did we need to basically

175
00:06:54,990 --> 00:06:59,100
construct this thing and then we need to

176
00:06:56,430 --> 00:07:00,990
have those UV coordinates remember we

177
00:06:59,100 --> 00:07:02,820
did UV coordinates and what the UV

178
00:07:00,990 --> 00:07:05,550
coordinates did is they said you know

179
00:07:02,819 --> 00:07:07,409
okay we've got this this sort of thing

180
00:07:05,550 --> 00:07:09,389
we're filling on the screen and then

181
00:07:07,410 --> 00:07:11,580
we've got some image in memory somewhere

182
00:07:09,389 --> 00:07:14,669
and the UV coordinates are what tell us

183
00:07:11,579 --> 00:07:18,029
right where to go look to find a piece

184
00:07:14,670 --> 00:07:20,699
of the image exactly exactly the same

185
00:07:18,029 --> 00:07:21,750
thing here as what we did in our

186
00:07:20,699 --> 00:07:24,810
software rasterizer

187
00:07:21,750 --> 00:07:27,569
okay so we need to set up a situation

188
00:07:24,810 --> 00:07:30,870
that looks like this right we need to

189
00:07:27,569 --> 00:07:34,139
set the UV coordinates of the rectangle

190
00:07:30,870 --> 00:07:36,120
to be like you know 0 to 1 0 to 1 just

191
00:07:34,139 --> 00:07:38,579
like they were in our rectangle we need

192
00:07:36,120 --> 00:07:40,709
to load this texture into memory and

193
00:07:38,579 --> 00:07:42,479
then once we have all of that working we

194
00:07:40,709 --> 00:07:44,639
should be able to draw two triangles

195
00:07:42,480 --> 00:07:48,840
that show that basically display our

196
00:07:44,639 --> 00:07:52,560
image on the screen ok so we're gonna go

197
00:07:48,839 --> 00:07:54,259
ahead and do that all right so the first

198
00:07:52,560 --> 00:07:58,199
thing we're gonna try is drawing our

199
00:07:54,259 --> 00:07:59,750
quad our you know a rectangle out of two

200
00:07:58,199 --> 00:08:01,769
triangles we're gonna try a drawing that

201
00:07:59,750 --> 00:08:03,269
without actually filling it with a

202
00:08:01,769 --> 00:08:04,829
texture because the texture is obviously

203
00:08:03,269 --> 00:08:07,349
a harder step so we're gonna start off

204
00:08:04,829 --> 00:08:08,939
by doing something simpler so we're

205
00:08:07,350 --> 00:08:10,680
still going to keep this clear to pink

206
00:08:08,939 --> 00:08:11,939
because that'll give us a good sense of

207
00:08:10,680 --> 00:08:13,530
whether or not we're actually drawing

208
00:08:11,939 --> 00:08:16,290
over it so we're gonna keep that clear

209
00:08:13,529 --> 00:08:18,029
to pink and then we're going to make

210
00:08:16,290 --> 00:08:20,189
some calls that allow us to specify our

211
00:08:18,029 --> 00:08:23,039
triangle we're going to do this because

212
00:08:20,189 --> 00:08:25,230
right now we're going to we're going to

213
00:08:23,040 --> 00:08:28,110
do this in the old-school way first the

214
00:08:25,230 --> 00:08:30,990
way that the original OpenGL did it and

215
00:08:28,110 --> 00:08:33,899
then probably not today but next week

216
00:08:30,990 --> 00:08:36,659
we'll talk about why this is not the way

217
00:08:33,899 --> 00:08:39,209
that we will end up doing it why we will

218
00:08:36,659 --> 00:08:41,879
replace this but this is the easiest one

219
00:08:39,210 --> 00:08:43,410
to learn it's the easiest one to get

220
00:08:41,879 --> 00:08:47,820
your head around because it involves

221
00:08:43,409 --> 00:08:50,969
less maneuvering ok so the way that

222
00:08:47,820 --> 00:08:52,960
OpenGL works in the old-school way is

223
00:08:50,970 --> 00:08:55,810
you said Gio

224
00:08:52,960 --> 00:08:58,509
begin angieland to bracket a series of

225
00:08:55,809 --> 00:09:00,879
operations that would construct some

226
00:08:58,509 --> 00:09:02,590
primitives so like I said primitives in

227
00:09:00,879 --> 00:09:04,389
this case refers to something the graphs

228
00:09:02,590 --> 00:09:06,129
code understands like a triangle so in

229
00:09:04,389 --> 00:09:09,370
this case we're trying to draw some

230
00:09:06,129 --> 00:09:10,689
primitives primitive schools are like

231
00:09:09,370 --> 00:09:13,000
the smallest building block right

232
00:09:10,690 --> 00:09:14,350
primitives and so the primitives that

233
00:09:13,000 --> 00:09:16,330
we're trying to draw here are gonna be

234
00:09:14,350 --> 00:09:17,950
triangles and again there's actually

235
00:09:16,330 --> 00:09:19,300
some things we could do that actually be

236
00:09:17,950 --> 00:09:20,620
even in this circumstance a little more

237
00:09:19,299 --> 00:09:22,629
efficient than a triangle but again I

238
00:09:20,620 --> 00:09:24,850
want to start with the most basic stuff

239
00:09:22,629 --> 00:09:26,649
so you know yes everyone on the stream

240
00:09:24,850 --> 00:09:27,460
yes you could use a triangle strip yes

241
00:09:26,649 --> 00:09:31,569
you could do whatever

242
00:09:27,460 --> 00:09:34,450
please don't focus on optimization stuff

243
00:09:31,570 --> 00:09:36,760
when I'm just trying to give the idea of

244
00:09:34,450 --> 00:09:39,640
how something works because that's not

245
00:09:36,759 --> 00:09:40,870
the right mental piece here right you

246
00:09:39,639 --> 00:09:43,000
want to make sure you understand

247
00:09:40,870 --> 00:09:44,799
everything from sort of the ground up

248
00:09:43,000 --> 00:09:46,389
and not concern yourself with whether

249
00:09:44,799 --> 00:09:48,219
there's some weird like optimization

250
00:09:46,389 --> 00:09:49,840
thing especially because in this case no

251
00:09:48,220 --> 00:09:51,279
optimizations will be relevant for

252
00:09:49,840 --> 00:09:52,629
putting something to the screen it

253
00:09:51,279 --> 00:09:55,750
literally does not matter how you do

254
00:09:52,629 --> 00:09:56,740
this so in this case I want to say I'm

255
00:09:55,750 --> 00:10:00,940
just gonna start by drawing some

256
00:09:56,740 --> 00:10:02,440
triangles and the GL begins GL end tells

257
00:10:00,940 --> 00:10:04,620
it that everything in between there is

258
00:10:02,440 --> 00:10:07,330
information about what triangles to draw

259
00:10:04,620 --> 00:10:11,080
then there's a command called GL vertex

260
00:10:07,330 --> 00:10:12,639
which specifies points in space and the

261
00:10:11,080 --> 00:10:15,820
way that they chose to do their naming

262
00:10:12,639 --> 00:10:19,689
screen is its GL anytime you see GL and

263
00:10:15,820 --> 00:10:22,270
a command right it can then be sort of

264
00:10:19,690 --> 00:10:24,910
suffixed if it takes various different

265
00:10:22,269 --> 00:10:28,179
types so for example if I wanted to say

266
00:10:24,909 --> 00:10:30,519
there was gonna be a 2d point that was

267
00:10:28,179 --> 00:10:33,639
specified in floating-point format it

268
00:10:30,519 --> 00:10:36,519
would be GL vertex to s and then I would

269
00:10:33,639 --> 00:10:38,199
pass the coordinates the XY coordinates

270
00:10:36,519 --> 00:10:40,750
let's say in floating-point format of

271
00:10:38,200 --> 00:10:44,680
that point now if I wanted to pass them

272
00:10:40,750 --> 00:10:46,149
as integers I would say to I right and

273
00:10:44,679 --> 00:10:51,039
if I wanted to pass a three-dimensional

274
00:10:46,149 --> 00:10:52,990
point I might say 3f right and again

275
00:10:51,039 --> 00:10:54,819
only a certain subset of the functions

276
00:10:52,990 --> 00:10:56,110
exist RC these are actual separate

277
00:10:54,820 --> 00:10:58,450
functions so they did not supply

278
00:10:56,110 --> 00:10:59,980
necessary every possible function but

279
00:10:58,450 --> 00:11:01,690
that is the naming scheme for them so

280
00:10:59,980 --> 00:11:04,690
for every possible GL vertex that they

281
00:11:01,690 --> 00:11:06,610
implemented there's 3f to UB for

282
00:11:04,690 --> 00:11:13,269
unsigned byte you know stuff like that

283
00:11:06,610 --> 00:11:15,220
okay so if we want to produce triangles

284
00:11:13,269 --> 00:11:17,739
here that are going to cover the screen

285
00:11:15,220 --> 00:11:18,339
where are the triangles going to be

286
00:11:17,739 --> 00:11:21,819
right

287
00:11:18,339 --> 00:11:23,410
well the viewport sort of like I said

288
00:11:21,818 --> 00:11:25,118
that this this GL command we set up to

289
00:11:23,409 --> 00:11:27,999
say where we're trying to render right

290
00:11:25,119 --> 00:11:30,910
that the extent of the screen is zero to

291
00:11:27,999 --> 00:11:33,999
the window width right and zero to the

292
00:11:30,909 --> 00:11:39,338
window height on the Y side so if I want

293
00:11:33,999 --> 00:11:41,439
to draw some triangles hmm I am going to

294
00:11:39,339 --> 00:11:44,529
have to specify triangles perhaps like

295
00:11:41,438 --> 00:11:47,048
this right I'm gonna have to perhaps

296
00:11:44,528 --> 00:11:49,928
specify a triangle that's like here here

297
00:11:47,048 --> 00:11:52,119
here and a triangle that's here here

298
00:11:49,928 --> 00:11:53,619
here okay and we know the coordinates of

299
00:11:52,119 --> 00:11:54,970
all these points right all of these

300
00:11:53,619 --> 00:11:57,220
points are very easy for us to see what

301
00:11:54,970 --> 00:12:00,100
they are so let's take this triangle

302
00:11:57,220 --> 00:12:03,339
first it's zero zero two width comma

303
00:12:00,100 --> 00:12:05,678
zero to width comma height right and so

304
00:12:03,339 --> 00:12:09,459
that's a very easy triangle to draw that

305
00:12:05,678 --> 00:12:19,238
would just be let's see here

306
00:12:09,458 --> 00:12:25,899
that would just be zero zero window

307
00:12:19,239 --> 00:12:28,389
width zero zero that's all right

308
00:12:25,899 --> 00:12:30,278
window with window height that's why I

309
00:12:28,389 --> 00:12:32,318
said right so that'd be that first

310
00:12:30,278 --> 00:12:34,448
triangle and then the other triangle

311
00:12:32,318 --> 00:12:37,389
would be almost the same thing except

312
00:12:34,448 --> 00:12:41,048
this time it would go the other way

313
00:12:37,389 --> 00:12:44,168
round right so it would go it would go

314
00:12:41,048 --> 00:12:46,298
from zero zero up to window F 2 with

315
00:12:44,168 --> 00:12:48,578
height and then over to zero height

316
00:12:46,298 --> 00:12:51,489
right and those would be our two

317
00:12:48,578 --> 00:12:54,758
triangles so this I could label these

318
00:12:51,489 --> 00:13:00,699
right this is the lower triangle and

319
00:12:54,759 --> 00:13:03,730
this is the upper triangle all right so

320
00:13:00,698 --> 00:13:05,678
when I do this in theory I think if we

321
00:13:03,730 --> 00:13:07,298
ran it now maybe we would actually get a

322
00:13:05,678 --> 00:13:09,100
triangle there's a bunch of other things

323
00:13:07,298 --> 00:13:14,409
involved here but you know let's just

324
00:13:09,100 --> 00:13:16,990
see what happens right all right so

325
00:13:14,409 --> 00:13:19,819
there we go there is our there's our

326
00:13:16,990 --> 00:13:21,769
lovely two triangles being drawn

327
00:13:19,820 --> 00:13:24,710
but as you'll notice they're not where

328
00:13:21,769 --> 00:13:27,169
we expected them to be right they if if

329
00:13:24,710 --> 00:13:31,550
the coordinate system were actually zero

330
00:13:27,169 --> 00:13:32,209
zero was here and you know the this was

331
00:13:31,549 --> 00:13:36,229
zero height

332
00:13:32,210 --> 00:13:38,600
this was width height and this was zero

333
00:13:36,230 --> 00:13:41,149
this was with zero we would expect this

334
00:13:38,600 --> 00:13:42,620
thing we drew to fill the screen but

335
00:13:41,149 --> 00:13:46,639
it's not filling the screen at this

336
00:13:42,620 --> 00:13:49,700
point okay so why not what's going on

337
00:13:46,639 --> 00:13:51,850
and the answer is that because whether

338
00:13:49,700 --> 00:13:55,670
you want it to or not

339
00:13:51,850 --> 00:13:57,200
opengl mm-hmm when you use the

340
00:13:55,669 --> 00:14:00,169
old-school way of doing things meaning

341
00:13:57,200 --> 00:14:02,120
you're not going through a shader what

342
00:14:00,169 --> 00:14:05,049
you're going through is called the fixed

343
00:14:02,120 --> 00:14:11,200
function pipeline so there's two sort of

344
00:14:05,049 --> 00:14:17,209
schools here fixed function and

345
00:14:11,200 --> 00:14:19,879
programmable okay so the fixed function

346
00:14:17,210 --> 00:14:22,250
pipeline is the old-school way of doing

347
00:14:19,879 --> 00:14:24,860
things that comes from when GPUs were

348
00:14:22,250 --> 00:14:26,570
not programmable they only did one thing

349
00:14:24,860 --> 00:14:28,700
which was a certain way of processing

350
00:14:26,570 --> 00:14:32,180
vertices in a certain way of filling

351
00:14:28,700 --> 00:14:34,910
pixels right and similarly in the

352
00:14:32,179 --> 00:14:36,379
new-school way we have everything is

353
00:14:34,909 --> 00:14:39,889
programmable so we always have these

354
00:14:36,379 --> 00:14:42,559
shaders and things like that that we

355
00:14:39,889 --> 00:14:44,480
write so in the old fixed function way

356
00:14:42,559 --> 00:14:47,389
of doing things what happened is it

357
00:14:44,480 --> 00:14:50,149
basically had what you would typically

358
00:14:47,389 --> 00:14:52,250
write for a very basic vertex shader was

359
00:14:50,149 --> 00:14:58,610
built into the hardware directly and

360
00:14:52,250 --> 00:15:03,950
what that was was a transform on the

361
00:14:58,610 --> 00:15:08,120
vertices right followed by clipping the

362
00:15:03,950 --> 00:15:11,560
triangles mm-hmm followed by what's

363
00:15:08,120 --> 00:15:11,560
called a Windows face transform

364
00:15:14,470 --> 00:15:18,700
and in programmable land we actually

365
00:15:16,778 --> 00:15:20,980
have some of the same stuff the clipping

366
00:15:18,700 --> 00:15:23,589
for example is still usually done in a

367
00:15:20,980 --> 00:15:26,289
fixed function way but this part here

368
00:15:23,589 --> 00:15:28,270
the transfer on the vertices part and

369
00:15:26,289 --> 00:15:30,610
usually this window space transform same

370
00:15:28,269 --> 00:15:33,519
comes right across so usually this part

371
00:15:30,610 --> 00:15:35,820
stay the same these two parts here so

372
00:15:33,519 --> 00:15:39,039
this is where it was filling pixels

373
00:15:35,820 --> 00:15:40,930
right these two parts here used to be

374
00:15:39,039 --> 00:15:43,299
very very rigid with how they operated

375
00:15:40,929 --> 00:15:44,709
now they are all in shaders so this part

376
00:15:43,299 --> 00:15:45,939
all happens in shader is this all part

377
00:15:44,710 --> 00:15:47,589
all happens in shaders and you can

378
00:15:45,940 --> 00:15:51,730
customize them to do basically whatever

379
00:15:47,589 --> 00:15:53,410
you want right so what's happening and

380
00:15:51,730 --> 00:15:54,909
the reason why we don't see this where

381
00:15:53,409 --> 00:15:56,588
we would have expected it to based on

382
00:15:54,909 --> 00:15:59,829
what we set up for the screen is because

383
00:15:56,589 --> 00:16:04,000
the transform that's happening on the

384
00:15:59,830 --> 00:16:06,100
vertices is is we haven't set it up it's

385
00:16:04,000 --> 00:16:07,480
whatever the default was and the default

386
00:16:06,100 --> 00:16:09,250
in this case doesn't happen to be

387
00:16:07,480 --> 00:16:10,778
something that takes input vertices and

388
00:16:09,250 --> 00:16:13,629
map them directly to the screen that's

389
00:16:10,778 --> 00:16:16,960
not at all what actually happens so as a

390
00:16:13,629 --> 00:16:18,429
result we get something random that we

391
00:16:16,960 --> 00:16:19,600
don't necessarily even understand right

392
00:16:18,429 --> 00:16:22,120
because we haven't actually looked at

393
00:16:19,600 --> 00:16:24,009
what that transform does we don't

394
00:16:22,120 --> 00:16:25,929
necessarily know so you know the filling

395
00:16:24,009 --> 00:16:27,458
pixels part is probably fine for us

396
00:16:25,929 --> 00:16:29,469
right now but the transform on the

397
00:16:27,458 --> 00:16:30,759
vertices part isn't now one thing we can

398
00:16:29,470 --> 00:16:32,230
do is we can just step right up the

399
00:16:30,759 --> 00:16:33,700
shaders and implement it ourselves

400
00:16:32,230 --> 00:16:35,920
exactly where we want to put things we

401
00:16:33,700 --> 00:16:36,879
could do that but what I'd rather do is

402
00:16:35,919 --> 00:16:38,049
show you a little bit about how that

403
00:16:36,879 --> 00:16:39,220
fixed function pipeline it's good to

404
00:16:38,049 --> 00:16:40,750
understand kind of how it used to work

405
00:16:39,220 --> 00:16:42,070
because the shader that you would

406
00:16:40,750 --> 00:16:43,330
implement is actually pretty much

407
00:16:42,070 --> 00:16:44,800
exactly the same as what the fixed

408
00:16:43,330 --> 00:16:50,200
function think is actually doing if you

409
00:16:44,799 --> 00:16:54,429
set some of the parameters all right so

410
00:16:50,200 --> 00:16:56,470
what happens with OpenGL is they specify

411
00:16:54,429 --> 00:16:58,208
two different kinds of matrices now

412
00:16:56,470 --> 00:17:00,870
we've talked about matrices before right

413
00:16:58,208 --> 00:17:03,669
matrices are things that are sort of

414
00:17:00,870 --> 00:17:06,578
recording a series of math operations

415
00:17:03,669 --> 00:17:08,678
that you're going to do on vectors in

416
00:17:06,578 --> 00:17:10,750
this case right and so I don't know if

417
00:17:08,679 --> 00:17:13,240
you remember but I did something where I

418
00:17:10,750 --> 00:17:15,039
showed kind of like how to do vector

419
00:17:13,240 --> 00:17:17,380
matrix multiplication where we have

420
00:17:15,039 --> 00:17:20,459
something like this right and then we

421
00:17:17,380 --> 00:17:20,459
have something like this

422
00:17:22,909 --> 00:17:29,009
right and I taught you guys how to do

423
00:17:27,240 --> 00:17:32,700
this multiplication where basically you

424
00:17:29,009 --> 00:17:35,159
you use vertical and horizontal here to

425
00:17:32,700 --> 00:17:37,379
line up which terms go with which terms

426
00:17:35,159 --> 00:17:38,970
so you always start and read down

427
00:17:37,378 --> 00:17:40,558
vertically the vector that you're trying

428
00:17:38,970 --> 00:17:43,139
to multiply this is like the incoming

429
00:17:40,558 --> 00:17:46,048
point so in our case this is this thing

430
00:17:43,138 --> 00:17:47,490
here at the vertex to I right but in

431
00:17:46,048 --> 00:17:49,769
this case I've shown it with three I'll

432
00:17:47,490 --> 00:17:52,649
tell you why in a second and then here

433
00:17:49,769 --> 00:17:56,009
is like the matrix for example when you

434
00:17:52,648 --> 00:17:59,428
do this you essentially get ax plus B y

435
00:17:56,009 --> 00:18:02,159
plus cz right so you take first times

436
00:17:59,429 --> 00:18:04,230
first second times second third times

437
00:18:02,159 --> 00:18:06,659
third right then you move down to the

438
00:18:04,230 --> 00:18:10,740
next row do the same thing again e^x +

439
00:18:06,659 --> 00:18:15,028
FY plus GZ right and then you move down

440
00:18:10,740 --> 00:18:19,099
again IX plus jy

441
00:18:15,028 --> 00:18:21,599
too bad it wasn't J Z plus KZ right and

442
00:18:19,099 --> 00:18:23,819
so that's how matrix multiplication

443
00:18:21,599 --> 00:18:25,168
works for vectors it's also how it works

444
00:18:23,819 --> 00:18:27,089
for matrices but we don't really have to

445
00:18:25,169 --> 00:18:30,570
care about that too much right now and

446
00:18:27,089 --> 00:18:32,730
this is a sort of fairly crucial to

447
00:18:30,569 --> 00:18:35,308
understand if you want to start working

448
00:18:32,730 --> 00:18:36,599
with opengl especially the fixed

449
00:18:35,308 --> 00:18:38,579
function pipeline but to a certain

450
00:18:36,599 --> 00:18:40,589
extent also the programmable pipeline

451
00:18:38,579 --> 00:18:43,019
because matrices and vectors are kind of

452
00:18:40,589 --> 00:18:44,220
native to it in some way and you kind of

453
00:18:43,019 --> 00:18:45,750
have to start thinking in terms of that

454
00:18:44,220 --> 00:18:46,950
so we haven't really had to do too much

455
00:18:45,750 --> 00:18:48,210
dancers I've explained it before on the

456
00:18:46,950 --> 00:18:49,409
stream but now you're gonna have to get

457
00:18:48,210 --> 00:18:52,528
a little bit more comfortable with it

458
00:18:49,409 --> 00:18:53,850
okay and the important thing to note

459
00:18:52,528 --> 00:18:56,220
about these is there's nothing

460
00:18:53,849 --> 00:18:59,158
mysterious about a matrix this is not

461
00:18:56,220 --> 00:19:01,169
mysterious right if you can understand

462
00:18:59,159 --> 00:19:03,899
this procedure right here you can see

463
00:19:01,169 --> 00:19:05,370
exactly the math that actually happens

464
00:19:03,898 --> 00:19:07,439
when you transform something by a matrix

465
00:19:05,369 --> 00:19:09,628
so it's very easy for you to see what

466
00:19:07,440 --> 00:19:11,580
you want to have happen when you pass in

467
00:19:09,628 --> 00:19:13,408
an XYZ and you're transforming it by a

468
00:19:11,579 --> 00:19:16,168
matrix you know that you've just got one

469
00:19:13,409 --> 00:19:17,610
parameter that that multiplies the x one

470
00:19:16,169 --> 00:19:19,470
parameter that multiplies is the the Y

471
00:19:17,609 --> 00:19:22,589
and one parameter that multiplies the Z

472
00:19:19,470 --> 00:19:26,269
to produce the final X so basically you

473
00:19:22,589 --> 00:19:28,859
have three dials right that you can turn

474
00:19:26,269 --> 00:19:31,500
for the incoming values that will

475
00:19:28,859 --> 00:19:33,959
produce the resulting X prime right the

476
00:19:31,500 --> 00:19:34,529
the vector like the the new vector that

477
00:19:33,960 --> 00:19:36,750
comes out

478
00:19:34,529 --> 00:19:39,930
right and so you can kind of just

479
00:19:36,750 --> 00:19:41,549
arbitrarily create anything you want as

480
00:19:39,930 --> 00:19:44,190
long as it's just a straightforward

481
00:19:41,549 --> 00:19:45,990
linear transform right as long as it can

482
00:19:44,190 --> 00:19:49,500
be represented by three coefficients and

483
00:19:45,990 --> 00:19:50,970
two additions on the input values you

484
00:19:49,500 --> 00:19:52,680
can do it you can do anything you want

485
00:19:50,970 --> 00:19:55,319
because you can set these values to

486
00:19:52,680 --> 00:19:58,590
anything you want and as you can see you

487
00:19:55,319 --> 00:20:00,599
get three of them per output value so

488
00:19:58,589 --> 00:20:02,609
you have the complete freedom to adjust

489
00:20:00,599 --> 00:20:07,019
each individual output component

490
00:20:02,609 --> 00:20:10,889
separately right does that make sense

491
00:20:07,019 --> 00:20:14,160
so what OpenGL does is OpenGL takes this

492
00:20:10,890 --> 00:20:16,230
one step further and what you can see

493
00:20:14,160 --> 00:20:18,930
here are hopefully you can see here is

494
00:20:16,230 --> 00:20:22,079
that there's something you might want to

495
00:20:18,930 --> 00:20:23,549
do that is not captured by this this is

496
00:20:22,079 --> 00:20:25,909
a this is this right here what I've

497
00:20:23,549 --> 00:20:28,470
drawn is called a linear transform and

498
00:20:25,910 --> 00:20:30,990
it's linear because it's it's lines two

499
00:20:28,470 --> 00:20:36,480
lines right it's like basically I can

500
00:20:30,990 --> 00:20:40,500
only sort of change I I when I am

501
00:20:36,480 --> 00:20:42,450
transforming these things right it's

502
00:20:40,500 --> 00:20:45,319
it's something that when I do this

503
00:20:42,450 --> 00:20:48,569
multiplication there's no way for me to

504
00:20:45,319 --> 00:20:50,970
nonlinearly warp it I can't square any

505
00:20:48,569 --> 00:20:53,460
terms I can't produce an x squared on

506
00:20:50,970 --> 00:20:55,710
the input right whatever this x value is

507
00:20:53,460 --> 00:20:57,779
here there's no way for me to square it

508
00:20:55,710 --> 00:20:59,730
the only way for me to square it would

509
00:20:57,779 --> 00:21:01,619
be to know beforehand what its value was

510
00:20:59,730 --> 00:21:04,200
and stick it in the matrix but that

511
00:21:01,619 --> 00:21:06,869
doesn't count right if I'm talking about

512
00:21:04,200 --> 00:21:08,730
arbitrary input values there's no

513
00:21:06,869 --> 00:21:11,159
nothing I could ever put here would lead

514
00:21:08,730 --> 00:21:12,779
to an x squared so it's always lines to

515
00:21:11,160 --> 00:21:14,460
lines there's no way to take a line and

516
00:21:12,779 --> 00:21:16,589
turn into a parabola right there's no

517
00:21:14,460 --> 00:21:18,660
way to take something in that was linear

518
00:21:16,589 --> 00:21:24,089
and produce something nonlinear on the

519
00:21:18,660 --> 00:21:28,380
output okay but linear specifically does

520
00:21:24,089 --> 00:21:31,409
not allow offsets you will notice there

521
00:21:28,380 --> 00:21:34,830
is no way to add a fixed value here

522
00:21:31,410 --> 00:21:36,540
right and you'll notice I was sly I left

523
00:21:34,829 --> 00:21:39,029
out you know

524
00:21:36,539 --> 00:21:42,389
values here right I left out D I left

525
00:21:39,029 --> 00:21:45,420
out H I left out L right there and

526
00:21:42,390 --> 00:21:47,970
weren't in there there's no way to add a

527
00:21:45,420 --> 00:21:50,070
value that isn't multiplied by the input

528
00:21:47,970 --> 00:21:52,170
let's say I passed into vector zero zero

529
00:21:50,069 --> 00:21:54,329
zero there'd it just comes out a zero

530
00:21:52,170 --> 00:21:55,470
zero zero right there's no way to move

531
00:21:54,329 --> 00:21:57,599
things around

532
00:21:55,470 --> 00:21:59,880
I can only sort of reorient them I can

533
00:21:57,599 --> 00:22:02,309
skew them I could scale them I could

534
00:21:59,880 --> 00:22:04,800
rotate them even but what I can't do is

535
00:22:02,309 --> 00:22:07,710
displace them because everything is a

536
00:22:04,799 --> 00:22:10,079
function of the input here and so what

537
00:22:07,710 --> 00:22:15,120
OpenGL does is OpenGL uses what's called

538
00:22:10,079 --> 00:22:17,609
homogeneous coordinates and what they do

539
00:22:15,119 --> 00:22:20,459
is they artificially pretend that the

540
00:22:17,609 --> 00:22:27,000
vector that comes in actually has a 1

541
00:22:20,460 --> 00:22:30,620
here so it's X Y Z 1 now you will notice

542
00:22:27,000 --> 00:22:33,900
that the this column of the matrix here

543
00:22:30,619 --> 00:22:36,469
DHL just comes through as an offset on

544
00:22:33,900 --> 00:22:40,050
the input so now I have a way to

545
00:22:36,470 --> 00:22:42,269
positionally offset my my folks that is

546
00:22:40,049 --> 00:22:45,930
called an affine transform when you when

547
00:22:42,269 --> 00:22:48,389
you add the ability to displace that is

548
00:22:45,930 --> 00:22:50,460
an affine transform and then down here

549
00:22:48,390 --> 00:22:52,800
we just usually pretend that the matrix

550
00:22:50,460 --> 00:22:56,490
doesn't have anything it's just 0 0 0 1

551
00:22:52,799 --> 00:22:58,889
why is it 0 0 0 1 per se well that's if

552
00:22:56,490 --> 00:23:01,680
you want to leave this 1 a 1 right

553
00:22:58,890 --> 00:23:03,690
because then when I multiply I always

554
00:23:01,680 --> 00:23:05,970
get a 1 in the W coordinate that's what

555
00:23:03,690 --> 00:23:08,850
this is called which is just a synthetic

556
00:23:05,970 --> 00:23:12,390
coordinate right now there's an

557
00:23:08,849 --> 00:23:15,119
interesting aspect of this technically

558
00:23:12,390 --> 00:23:17,040
in OpenGL it allows you to actually pass

559
00:23:15,119 --> 00:23:18,709
full 4 dimensional parameters if you

560
00:23:17,039 --> 00:23:20,909
want to play with this value you

561
00:23:18,710 --> 00:23:22,440
actually may want to play with that

562
00:23:20,910 --> 00:23:24,990
value why might you want to play with

563
00:23:22,440 --> 00:23:28,259
that value well if you've set it to 0

564
00:23:24,990 --> 00:23:30,059
you get no displacement right because

565
00:23:28,259 --> 00:23:33,029
all of these guys would drop out because

566
00:23:30,059 --> 00:23:35,759
they'd be multiplied by 0 now so in some

567
00:23:33,029 --> 00:23:38,579
sense there's a way now to distinguish

568
00:23:35,759 --> 00:23:42,990
between a vector which is a direction

569
00:23:38,579 --> 00:23:46,289
and a point a vector would be something

570
00:23:42,990 --> 00:23:49,109
that is X Y Z 1 and a point would be

571
00:23:46,289 --> 00:23:51,950
something that is X Y Z 0 because X Y Z

572
00:23:49,109 --> 00:23:55,169
0 knocks out the translation component

573
00:23:51,950 --> 00:23:58,140
leaving only the direction change right

574
00:23:55,170 --> 00:24:00,509
whereas X Y Z 1 is a point because it

575
00:23:58,140 --> 00:24:01,610
picks up that translation so these are

576
00:24:00,509 --> 00:24:04,129
things that can move the

577
00:24:01,609 --> 00:24:05,689
things that do not move right so that's

578
00:24:04,130 --> 00:24:07,250
a little trick eNOS it's just a little

579
00:24:05,690 --> 00:24:09,170
bit of understanding how the math works

580
00:24:07,250 --> 00:24:10,579
out allows you to do some things that

581
00:24:09,170 --> 00:24:15,259
you might want to do you spent want to

582
00:24:10,579 --> 00:24:17,808
be aware of it right okay so that's the

583
00:24:15,259 --> 00:24:20,839
idea right that's that's the general

584
00:24:17,808 --> 00:24:22,190
idea and so again there's called

585
00:24:20,839 --> 00:24:23,329
homogeneous coordinates in the three

586
00:24:22,190 --> 00:24:25,730
graphs searchers do I look them up

587
00:24:23,329 --> 00:24:27,349
that's what they're called and it's

588
00:24:25,730 --> 00:24:29,179
called an affine transform once it

589
00:24:27,349 --> 00:24:30,980
allows that displacement as opposed to a

590
00:24:29,179 --> 00:24:32,630
linear displacement which is not a

591
00:24:30,980 --> 00:24:35,690
linear transform which does not

592
00:24:32,630 --> 00:24:38,240
generally have this placement in it okay

593
00:24:35,690 --> 00:24:40,250
so what OpenGL does is it defines two

594
00:24:38,240 --> 00:24:41,929
matrices there are other matrices that

595
00:24:40,250 --> 00:24:47,079
they don't come in here it defines two

596
00:24:41,929 --> 00:24:51,919
matrices that you can use Model View and

597
00:24:47,079 --> 00:24:54,769
projection in the fixed function

598
00:24:51,919 --> 00:24:56,600
pipeline we have both of these and what

599
00:24:54,769 --> 00:24:59,779
it does is it allows you to set them

600
00:24:56,599 --> 00:25:01,939
separately but it used to be a there

601
00:24:59,779 --> 00:25:04,519
used to be a reason why for built in

602
00:25:01,940 --> 00:25:06,110
lighting which nobody uses pretty much

603
00:25:04,519 --> 00:25:07,730
didn't really even use back then but for

604
00:25:06,109 --> 00:25:09,229
built-in lighting there used to be a

605
00:25:07,730 --> 00:25:12,110
reason I'm not even to go into it cause

606
00:25:09,230 --> 00:25:13,700
it's completely irrelevant why these two

607
00:25:12,109 --> 00:25:15,168
things had to be separate because

608
00:25:13,700 --> 00:25:16,610
there's really no reason for them to be

609
00:25:15,169 --> 00:25:18,530
separate because basically what happens

610
00:25:16,609 --> 00:25:20,659
in OpenGL is what they do is they take

611
00:25:18,529 --> 00:25:22,369
the modelview matrix and they

612
00:25:20,660 --> 00:25:27,529
concatenate these two matrices together

613
00:25:22,369 --> 00:25:30,168
so they multiply the modelview matrix by

614
00:25:27,529 --> 00:25:31,759
the projection matrix and that is

615
00:25:30,169 --> 00:25:34,580
actually the matrix they use to

616
00:25:31,759 --> 00:25:37,190
transform all your inputs right so all

617
00:25:34,579 --> 00:25:40,009
the input points that come in are always

618
00:25:37,190 --> 00:25:42,980
multiplied by the combination of these

619
00:25:40,009 --> 00:25:46,250
two matrices which just applies matrices

620
00:25:42,980 --> 00:25:48,919
multiplication literally is just a way

621
00:25:46,250 --> 00:25:52,279
of combining two matrix operations

622
00:25:48,919 --> 00:25:54,080
together and what happens is the the the

623
00:25:52,279 --> 00:25:57,139
order is essentially reversed from how

624
00:25:54,079 --> 00:25:58,819
you might read it so if you see like if

625
00:25:57,140 --> 00:26:01,100
you start from the the vector that's

626
00:25:58,819 --> 00:26:02,418
being transformed you read in this order

627
00:26:01,099 --> 00:26:03,798
to figure out what's going to happen to

628
00:26:02,419 --> 00:26:05,330
the vector first that's gonna get

629
00:26:03,798 --> 00:26:06,440
transformed by the modelview then it's

630
00:26:05,329 --> 00:26:08,389
going to get transformed by the

631
00:26:06,440 --> 00:26:12,250
projection and that gives the new point

632
00:26:08,390 --> 00:26:14,419
right now why matrix multiplication

633
00:26:12,250 --> 00:26:15,529
combine things I think that's probably

634
00:26:14,419 --> 00:26:16,970
better saved for ten

635
00:26:15,529 --> 00:26:18,680
for a later stream we want to talk about

636
00:26:16,970 --> 00:26:20,000
the bat math a little more especially

637
00:26:18,680 --> 00:26:21,410
because we're not actually gonna use

638
00:26:20,000 --> 00:26:22,759
that even this stuff we're just gonna

639
00:26:21,410 --> 00:26:24,470
pretend the modelview matrix doesn't

640
00:26:22,759 --> 00:26:26,029
even exist because we only need one

641
00:26:24,470 --> 00:26:28,400
matrix to do the operations we're going

642
00:26:26,029 --> 00:26:29,809
to do anyway and like I said actually

643
00:26:28,400 --> 00:26:31,220
we'll find out a little bit later on

644
00:26:29,809 --> 00:26:32,720
when we maybe look at matrices in a

645
00:26:31,220 --> 00:26:35,870
little more detail if we decide we need

646
00:26:32,720 --> 00:26:37,279
to really any number of matrices can be

647
00:26:35,869 --> 00:26:39,199
smooshed down into a single matrix just

648
00:26:37,279 --> 00:26:41,329
by multiplying them all together so

649
00:26:39,200 --> 00:26:43,009
there really was never uh need that hat

650
00:26:41,329 --> 00:26:45,319
they should never have really had two

651
00:26:43,009 --> 00:26:47,240
matrices but because of some aspects of

652
00:26:45,319 --> 00:26:48,859
built-in lighting there was a reason why

653
00:26:47,240 --> 00:26:50,569
they chose to separate them and and

654
00:26:48,859 --> 00:26:53,179
really that's not necessary

655
00:26:50,569 --> 00:26:55,159
so in we're gonna pretend that the the

656
00:26:53,180 --> 00:26:56,299
modelview matrix never exists and what

657
00:26:55,160 --> 00:26:57,920
we're gonna do is we're gonna set that

658
00:26:56,299 --> 00:26:59,240
modelview matrix to always just be the

659
00:26:57,920 --> 00:27:01,550
identity makes rent we're gonna pretend

660
00:26:59,240 --> 00:27:03,289
it doesn't do anything and so the way

661
00:27:01,549 --> 00:27:05,690
you do that is GL has something called

662
00:27:03,289 --> 00:27:07,519
matrix mode and you can pass what matrix

663
00:27:05,690 --> 00:27:09,740
are trying to operate on at a given time

664
00:27:07,519 --> 00:27:11,089
again that basically just stores two

665
00:27:09,740 --> 00:27:13,400
matrices the modelview matrix a

666
00:27:11,089 --> 00:27:15,980
projection matrix and i believe you can

667
00:27:13,400 --> 00:27:17,570
just call GL identity which just clears

668
00:27:15,980 --> 00:27:20,720
out that matrix and makes it the

669
00:27:17,569 --> 00:27:22,399
identity matrix the identity matrix at

670
00:27:20,720 --> 00:27:26,779
least I think that's true I guess not

671
00:27:22,400 --> 00:27:27,970
geo load identity there it is geo load

672
00:27:26,779 --> 00:27:31,279
identity

673
00:27:27,970 --> 00:27:32,779
alright so an identity matrix is

674
00:27:31,279 --> 00:27:35,269
literally one that just passes

675
00:27:32,779 --> 00:27:37,750
everything through exactly it's this

676
00:27:35,269 --> 00:27:37,750
matrix

677
00:27:40,920 --> 00:27:45,090
and what's interesting about this matrix

678
00:27:43,079 --> 00:27:48,899
right is no matter what I stick in here

679
00:27:45,089 --> 00:27:50,519
right X Y Z W you can see that it

680
00:27:48,900 --> 00:27:52,800
basically just picks out the component

681
00:27:50,519 --> 00:27:54,329
that that it's trying to generate and

682
00:27:52,799 --> 00:27:58,079
leaves everything else be right it's

683
00:27:54,329 --> 00:28:00,179
just X Y Z W so everything the identity

684
00:27:58,079 --> 00:28:01,889
matrix does nothing it is a no op it's

685
00:28:00,180 --> 00:28:03,900
the no op matrix it's the thing that

686
00:28:01,890 --> 00:28:07,080
just picks out the component that came

687
00:28:03,900 --> 00:28:08,850
in right that's in that slot that's it

688
00:28:07,079 --> 00:28:11,039
this is as opposed to like a permutation

689
00:28:08,849 --> 00:28:12,719
matrix which is one which would maybe

690
00:28:11,039 --> 00:28:14,460
pick a different component so let's say

691
00:28:12,720 --> 00:28:19,230
I wanna like swap the X and y right I

692
00:28:14,460 --> 00:28:22,319
could do this right and then the X and y

693
00:28:19,230 --> 00:28:25,049
would swap right so basically

694
00:28:22,319 --> 00:28:27,359
permutations and identity matrices are

695
00:28:25,049 --> 00:28:29,250
very similar if they just you know they

696
00:28:27,359 --> 00:28:31,079
just take the terms and shove them out

697
00:28:29,250 --> 00:28:33,539
directly as they come in it just maybe

698
00:28:31,079 --> 00:28:36,000
they rearranged them a little right okay

699
00:28:33,539 --> 00:28:37,829
so anyway GL load identity just says

700
00:28:36,000 --> 00:28:39,299
replace whatever is in this matrix slot

701
00:28:37,829 --> 00:28:41,490
remember I have two matrix slots Model

702
00:28:39,299 --> 00:28:42,720
View projection there's actually another

703
00:28:41,490 --> 00:28:46,140
one for textures and we'll get to later

704
00:28:42,720 --> 00:28:46,769
but for the for the points that we're

705
00:28:46,140 --> 00:28:48,750
sending down

706
00:28:46,769 --> 00:28:51,900
there's the modelview matrix and then

707
00:28:48,750 --> 00:28:54,539
there's the projection matrix and so if

708
00:28:51,900 --> 00:28:56,070
I did this both of our majors will be

709
00:28:54,539 --> 00:28:57,720
set to the identity matrix

710
00:28:56,069 --> 00:28:59,639
which I believe is what they're set to

711
00:28:57,720 --> 00:29:01,200
at the beginning anyway so if I run it I

712
00:28:59,640 --> 00:29:05,670
should get the exact same thing I

713
00:29:01,200 --> 00:29:06,779
started with and I do right and so now

714
00:29:05,670 --> 00:29:08,880
we're in a position to start thinking

715
00:29:06,779 --> 00:29:11,670
about what would we actually need to put

716
00:29:08,880 --> 00:29:18,300
into the projection matrix in order to

717
00:29:11,670 --> 00:29:23,070
get out right in order to actually well

718
00:29:18,299 --> 00:29:26,430
I say in order to get what we expected

719
00:29:23,069 --> 00:29:28,349
to see here right okay and so to learn

720
00:29:26,430 --> 00:29:30,480
to understand this we have to go back to

721
00:29:28,349 --> 00:29:33,089
our diagram if this is starting to sound

722
00:29:30,480 --> 00:29:34,500
overly complicated this is why GPUs are

723
00:29:33,089 --> 00:29:36,119
awful it's because you have to learn

724
00:29:34,500 --> 00:29:37,589
every little last thing about how they

725
00:29:36,119 --> 00:29:38,879
work internally before you can actually

726
00:29:37,589 --> 00:29:40,949
do stuff instead of just writing code

727
00:29:38,880 --> 00:29:43,680
that you know how to write but what can

728
00:29:40,950 --> 00:29:46,019
you do so in order to say that you have

729
00:29:43,680 --> 00:29:49,049
to go back to this thing it is this part

730
00:29:46,019 --> 00:29:51,359
right here that is confounding us right

731
00:29:49,049 --> 00:29:52,680
look I just said our points are now

732
00:29:51,359 --> 00:29:54,369
getting multiplied by the identity

733
00:29:52,680 --> 00:29:55,960
matrix we said everything that animate

734
00:29:54,369 --> 00:29:58,298
so we're just passing the points are

735
00:29:55,960 --> 00:29:59,590
exactly what we pass in so why aren't we

736
00:29:58,298 --> 00:30:01,179
seeing them where we should see them on

737
00:29:59,589 --> 00:30:04,329
the screen and the answer is because of

738
00:30:01,179 --> 00:30:06,298
the definition of what happens here with

739
00:30:04,329 --> 00:30:09,519
the clipping and window space transform

740
00:30:06,298 --> 00:30:16,418
okay so let's talk a little bit about

741
00:30:09,519 --> 00:30:17,679
that okay so for clipping this is just

742
00:30:16,419 --> 00:30:19,720
the process where open Jill's doing

743
00:30:17,679 --> 00:30:21,778
exactly what we wanted to do right

744
00:30:19,720 --> 00:30:24,308
exactly what we had to do ourselves

745
00:30:21,778 --> 00:30:25,690
triangles are gonna come in to OpenGL or

746
00:30:24,308 --> 00:30:28,839
whatever and they're gonna look like

747
00:30:25,690 --> 00:30:31,298
this and here is the screen okay

748
00:30:28,839 --> 00:30:33,428
and obviously OpenGL can't just start

749
00:30:31,298 --> 00:30:34,990
drawing off the screen although I'll

750
00:30:33,429 --> 00:30:36,690
throw in a little mention here just goes

751
00:30:34,990 --> 00:30:39,159
time to be aware of actually it can

752
00:30:36,690 --> 00:30:44,769
there's this concept typically called

753
00:30:39,159 --> 00:30:46,480
guard band clipping so actually when I

754
00:30:44,769 --> 00:30:48,639
say it's going to clip it to the screen

755
00:30:46,480 --> 00:30:50,048
it actually often doesn't clip it to the

756
00:30:48,640 --> 00:30:51,399
screen it actually Clips it to a guard

757
00:30:50,048 --> 00:30:54,879
band which is a thing that's bigger than

758
00:30:51,398 --> 00:30:56,859
the screen that is GPU implementation

759
00:30:54,880 --> 00:30:59,528
specific kinds of stuff but just to be

760
00:30:56,859 --> 00:31:01,479
aware of that can happen but point being

761
00:30:59,528 --> 00:31:05,859
it has to clip it to something and that

762
00:31:01,480 --> 00:31:08,470
something has to be a way of producing a

763
00:31:05,859 --> 00:31:10,959
set of triangles that actually can be

764
00:31:08,470 --> 00:31:13,769
drawn right so like something like this

765
00:31:10,960 --> 00:31:16,390
for example might be a way to clip it to

766
00:31:13,769 --> 00:31:18,190
you know some triangles that actually

767
00:31:16,390 --> 00:31:21,520
fall within the region it's trying to

768
00:31:18,190 --> 00:31:23,048
draw okay we had an easier time of it

769
00:31:21,519 --> 00:31:25,389
than OpenGL because we were just trying

770
00:31:23,048 --> 00:31:28,148
to clip rectangles that were aligned

771
00:31:25,390 --> 00:31:30,299
with the screen for the most part I

772
00:31:28,148 --> 00:31:34,058
don't remember what we did for clipping

773
00:31:30,298 --> 00:31:35,230
for rotate when we rotated stuff to be

774
00:31:34,058 --> 00:31:38,048
honestly I don't even remember what we

775
00:31:35,230 --> 00:31:40,058
did but point being I think oh I think

776
00:31:38,048 --> 00:31:43,179
we just took we still just clip to the

777
00:31:40,058 --> 00:31:44,798
rectangle of the rotated thing so yeah

778
00:31:43,179 --> 00:31:46,630
so we always were able to just do

779
00:31:44,798 --> 00:31:48,609
rectangle clipping they don't

780
00:31:46,630 --> 00:31:50,350
necessarily they might not necessarily

781
00:31:48,609 --> 00:31:51,908
be able do that or they could do the

782
00:31:50,349 --> 00:31:53,500
exact same thing right they might

783
00:31:51,909 --> 00:31:55,539
implement their stuff because they

784
00:31:53,500 --> 00:31:57,130
implement it with they implement it very

785
00:31:55,538 --> 00:31:58,509
close to how we implemented it so they

786
00:31:57,130 --> 00:32:01,179
may do exactly the same thing but either

787
00:31:58,509 --> 00:32:03,038
way they're gonna do something to do

788
00:32:01,179 --> 00:32:05,559
this clip in here before they actually

789
00:32:03,038 --> 00:32:08,169
start to rasterize things and the way

790
00:32:05,558 --> 00:32:11,589
that they do clipping is they do

791
00:32:08,169 --> 00:32:14,259
flipping to be honest with you I I don't

792
00:32:11,589 --> 00:32:16,358
really remember the details of why they

793
00:32:14,259 --> 00:32:19,118
chose to do clipping this way but they

794
00:32:16,358 --> 00:32:23,439
do clipping in something that they call

795
00:32:19,118 --> 00:32:26,499
the unit cube so what they do is the

796
00:32:23,440 --> 00:32:28,538
projection matrix instead of

797
00:32:26,499 --> 00:32:30,278
transforming things the way we think of

798
00:32:28,538 --> 00:32:31,569
it where they transform them into where

799
00:32:30,278 --> 00:32:33,308
they should be on the screen which is

800
00:32:31,569 --> 00:32:34,960
how we were thinking projection what the

801
00:32:33,308 --> 00:32:37,480
projection matrix actually does is it

802
00:32:34,960 --> 00:32:39,569
projects things into the unit cube so

803
00:32:37,480 --> 00:32:42,579
basically it says all right I

804
00:32:39,569 --> 00:32:45,368
whatever my screen was like my screen is

805
00:32:42,579 --> 00:32:48,128
this 16 by 9 like TV thing or whatever

806
00:32:45,368 --> 00:32:50,349
right well whatever is gonna fit on the

807
00:32:48,128 --> 00:32:54,158
screen I'm actually gonna try to fit it

808
00:32:50,349 --> 00:32:56,498
into a unit cube which depending on how

809
00:32:54,159 --> 00:32:58,330
you actually whether your directory to

810
00:32:56,499 --> 00:32:59,858
your opengl and depending exactly how

811
00:32:58,329 --> 00:33:02,019
they want to do things but in general

812
00:32:59,858 --> 00:33:02,408
it's something like say negative one to

813
00:33:02,019 --> 00:33:06,638
one

814
00:33:02,409 --> 00:33:09,340
right so negative 1 1 is here negative 1

815
00:33:06,638 --> 00:33:13,209
I'm sorry 1 is here negative 1 on Y

816
00:33:09,339 --> 00:33:16,628
right what it says is I'm gonna pretend

817
00:33:13,210 --> 00:33:19,538
that everything always falls into this

818
00:33:16,628 --> 00:33:23,009
unit cube here right which is actually

819
00:33:19,538 --> 00:33:26,440
too wide outside but it's a unit radius

820
00:33:23,009 --> 00:33:28,659
and I'm then going to after I do all my

821
00:33:26,440 --> 00:33:30,639
clipping in the unit cube space and

822
00:33:28,659 --> 00:33:35,019
figure out exactly what I'm going to

823
00:33:30,638 --> 00:33:38,678
keep right then I blow it out i scale it

824
00:33:35,019 --> 00:33:42,759
back out to fit the actual screen so

825
00:33:38,679 --> 00:33:45,519
first we do this then we do this okay

826
00:33:42,759 --> 00:33:48,489
and so you can imagine what happens here

827
00:33:45,519 --> 00:33:50,888
what that says is after projection right

828
00:33:48,489 --> 00:33:53,470
so I've got my projection matrix maybe

829
00:33:50,888 --> 00:34:00,189
I'll call this matrix oops matrix

830
00:33:53,470 --> 00:34:01,839
projection I take an input point I

831
00:34:00,190 --> 00:34:04,389
multiply it by price by projection

832
00:34:01,839 --> 00:34:06,808
matrix I get a P Prime out what is this

833
00:34:04,388 --> 00:34:09,368
P Prime out this is P in clip space

834
00:34:06,808 --> 00:34:12,250
right that is something that's in this

835
00:34:09,369 --> 00:34:15,159
space here and what that means is the

836
00:34:12,250 --> 00:34:17,318
projection matrix does not move things

837
00:34:15,159 --> 00:34:20,710
to screen space it moves them to unit

838
00:34:17,318 --> 00:34:21,579
space which explains exactly why having

839
00:34:20,710 --> 00:34:24,699
nothing in

840
00:34:21,579 --> 00:34:28,420
here does not work if we're doing 0-0 -

841
00:34:24,699 --> 00:34:32,109
width height of the screen as our as our

842
00:34:28,420 --> 00:34:34,809
values we pass in right because when we

843
00:34:32,110 --> 00:34:36,579
do that what we're effectively doing is

844
00:34:34,809 --> 00:34:38,409
getting something that starts in the

845
00:34:36,579 --> 00:34:41,049
middle right there zero zero in the unit

846
00:34:38,409 --> 00:34:43,750
cube and goes way the heck out here with

847
00:34:41,050 --> 00:34:46,600
height is like way out there right in

848
00:34:43,750 --> 00:34:48,730
fact it's that direction right because

849
00:34:46,599 --> 00:34:51,190
the width is wider than the height so

850
00:34:48,730 --> 00:34:53,139
then when this thing gets blown up to

851
00:34:51,190 --> 00:34:55,210
fit the screen we see exactly what we

852
00:34:53,139 --> 00:35:00,029
just saw which is it only fills that

853
00:34:55,210 --> 00:35:02,110
upper rectangle okay because it's we we

854
00:35:00,030 --> 00:35:04,990
basically the screen space coordinates

855
00:35:02,110 --> 00:35:07,360
and it want eclipses coordinates so the

856
00:35:04,989 --> 00:35:09,939
trivial fix for this if we wanted to

857
00:35:07,360 --> 00:35:12,340
write would just be to actually pass it

858
00:35:09,940 --> 00:35:14,650
things in its coordinate space right and

859
00:35:12,340 --> 00:35:16,510
that would look like this just pass it

860
00:35:14,650 --> 00:35:19,470
in the unit cube and we would have to do

861
00:35:16,510 --> 00:35:27,070
anything else if we don't want to okay

862
00:35:19,469 --> 00:35:29,409
oops that's one one right that is now

863
00:35:27,070 --> 00:35:30,730
directly in clip space which will not

864
00:35:29,409 --> 00:35:33,219
get transformed by anything during

865
00:35:30,730 --> 00:35:35,289
projection and then after the clip space

866
00:35:33,219 --> 00:35:40,989
part of things it'll blow it out to the

867
00:35:35,289 --> 00:35:42,429
screen size so there we go now we're

868
00:35:40,989 --> 00:35:44,199
filling the screen similarly if we

869
00:35:42,429 --> 00:35:46,329
wanted to verify that we weren't like

870
00:35:44,199 --> 00:35:51,149
thinking of it wrong we could change

871
00:35:46,329 --> 00:35:55,690
these two EPs and do something like

872
00:35:51,150 --> 00:35:57,880
percent or just let's just do P is like

873
00:35:55,690 --> 00:36:00,190
0.9 and so then we'll change all of

874
00:35:57,880 --> 00:36:02,289
these to peas and then we can see that

875
00:36:00,190 --> 00:36:04,059
we can draw a smaller thing that's with

876
00:36:02,289 --> 00:36:06,779
inside the balance right inside the

877
00:36:04,059 --> 00:36:06,779
balance of the screen

878
00:36:10,710 --> 00:36:16,119
all right and so there you can see we've

879
00:36:13,000 --> 00:36:18,789
we've shrunk in by 10% the width and the

880
00:36:16,119 --> 00:36:20,199
height and as you can see 10% is

881
00:36:18,789 --> 00:36:22,210
relative to with their height so there's

882
00:36:20,199 --> 00:36:24,819
less of a margin on the top than on the

883
00:36:22,210 --> 00:36:27,159
bottom right because in clip space were

884
00:36:24,820 --> 00:36:28,840
in we're in a unit cube and then we're

885
00:36:27,159 --> 00:36:31,569
blowing it out to a rectangle and that

886
00:36:28,840 --> 00:36:36,519
scale to the rectangle is gonna scale X

887
00:36:31,570 --> 00:36:38,530
is bigger than wise okay hopefully that

888
00:36:36,519 --> 00:36:40,719
makes sense to everyone I know this is a

889
00:36:38,530 --> 00:36:42,010
lot of information fast but you know

890
00:36:40,719 --> 00:36:43,629
like I said a week it will go over it

891
00:36:42,010 --> 00:36:46,840
multiple times we'll get it so hopefully

892
00:36:43,630 --> 00:36:49,539
everyone can be on the same page okay so

893
00:36:46,840 --> 00:36:51,010
that's just what's defined is happening

894
00:36:49,539 --> 00:36:52,840
that's why why that's happening cuz

895
00:36:51,010 --> 00:36:54,490
that's how open Gela to find a work you

896
00:36:52,840 --> 00:36:56,019
move in eclipses space first and then

897
00:36:54,489 --> 00:36:57,279
you move out to the screen so clipping

898
00:36:56,019 --> 00:36:58,989
happens here don't you have to screen

899
00:36:57,280 --> 00:37:01,690
what does it move out to the screen mean

900
00:36:58,989 --> 00:37:03,579
well okay we have P and clip space right

901
00:37:01,690 --> 00:37:05,590
it's very simple to think about what

902
00:37:03,579 --> 00:37:07,750
happens all we're trying to do here to

903
00:37:05,590 --> 00:37:10,320
move into creat it's a screen space is

904
00:37:07,750 --> 00:37:15,400
we now need to move negative one to one

905
00:37:10,320 --> 00:37:17,769
needs to move to zero zero right so you

906
00:37:15,400 --> 00:37:22,690
know first we V Center we could take P

907
00:37:17,769 --> 00:37:25,539
clip right and add to it just 1 1 right

908
00:37:22,690 --> 00:37:28,059
so that would basically say take the

909
00:37:25,539 --> 00:37:31,059
bottom here move it up to 0 0 so that

910
00:37:28,059 --> 00:37:33,639
like anchors that to here and then we

911
00:37:31,059 --> 00:37:35,949
would have to multiply what is now a 2

912
00:37:33,639 --> 00:37:38,409
by 2 cube right that cube would be like

913
00:37:35,949 --> 00:37:40,329
you know it's 2 units 2 pixels tall 2

914
00:37:38,409 --> 00:37:42,579
pixels wide right we would have to

915
00:37:40,329 --> 00:37:45,250
multiply it by half the width and half

916
00:37:42,579 --> 00:37:49,329
the height right to get it up right so I

917
00:37:45,250 --> 00:37:53,079
take this and then I would multiply that

918
00:37:49,329 --> 00:37:54,579
by this would be a Hadamard product here

919
00:37:53,079 --> 00:37:56,799
right and multiply straight through I

920
00:37:54,579 --> 00:38:01,869
know how you write that Hadamard

921
00:37:56,800 --> 00:38:03,940
whatever I would multiply that by the

922
00:38:01,869 --> 00:38:07,989
width / 2

923
00:38:03,940 --> 00:38:10,059
and the height / - right so I move it to

924
00:38:07,989 --> 00:38:13,599
the corner I blow it out to the whole

925
00:38:10,059 --> 00:38:14,980
side that's it so so when I say it moves

926
00:38:13,599 --> 00:38:15,909
it over the manner it's literally we're

927
00:38:14,980 --> 00:38:17,230
just talking about multiplying the

928
00:38:15,909 --> 00:38:18,579
points by that to figure out where they

929
00:38:17,230 --> 00:38:20,170
are in screen space that's it

930
00:38:18,579 --> 00:38:21,940
that's all there is so if nothing

931
00:38:20,170 --> 00:38:22,690
mystical it's not magic it's just a

932
00:38:21,940 --> 00:38:24,608
straight up

933
00:38:22,690 --> 00:38:26,079
trivial transportation transformation if

934
00:38:24,608 --> 00:38:28,358
you want to see it written out in scalar

935
00:38:26,079 --> 00:38:31,720
form right it's literally like you know

936
00:38:28,358 --> 00:38:33,338
the the new x-coordinate equals the the

937
00:38:31,719 --> 00:38:34,959
transform you know the clip coordinates

938
00:38:33,338 --> 00:38:37,000
oh I don't know how you want to write

939
00:38:34,960 --> 00:38:40,119
that but like you know the clip

940
00:38:37,000 --> 00:38:45,039
x-coordinate you know plus that one and

941
00:38:40,119 --> 00:38:51,550
then times the width over to right and

942
00:38:45,039 --> 00:38:53,650
the y prime would be the same you know

943
00:38:51,550 --> 00:38:56,440
I'm saying but we don't care about any

944
00:38:53,650 --> 00:38:57,818
of that right it suffice to say mentally

945
00:38:56,440 --> 00:39:00,670
we know it's doing this we never touch

946
00:38:57,818 --> 00:39:03,789
that anyway the only way that we have an

947
00:39:00,670 --> 00:39:05,500
effect on it is this GL viewport call is

948
00:39:03,789 --> 00:39:08,710
the thing that gives it that piece of

949
00:39:05,500 --> 00:39:11,289
information right so it uses these to

950
00:39:08,710 --> 00:39:12,818
know how it should blow out so when we

951
00:39:11,289 --> 00:39:14,019
say width over to where's the width

952
00:39:12,818 --> 00:39:16,420
coming from it's coming from right here

953
00:39:14,019 --> 00:39:17,920
right where's the zero zero coming from

954
00:39:16,420 --> 00:39:20,260
so it knew where to put the thing it's

955
00:39:17,920 --> 00:39:22,210
right here so if you wanted to put the

956
00:39:20,260 --> 00:39:23,530
viewport somewhere else you could put it

957
00:39:22,210 --> 00:39:25,240
somewhere else on the screen if you

958
00:39:23,530 --> 00:39:27,460
wanted to because these could be

959
00:39:25,239 --> 00:39:29,559
anywhere it's basically the transform in

960
00:39:27,460 --> 00:39:32,800
some sense I should say the transform

961
00:39:29,559 --> 00:39:34,509
goes from clip to the viewport which

962
00:39:32,800 --> 00:39:36,700
might not actually be aligned with the

963
00:39:34,510 --> 00:39:38,170
TV we lined it with the screen because

964
00:39:36,699 --> 00:39:40,149
that's what we want but we could have

965
00:39:38,170 --> 00:39:42,068
maybe made something else right we could

966
00:39:40,150 --> 00:39:45,838
have made a different shape for it if

967
00:39:42,068 --> 00:39:48,639
we'd wanted to we don't but we could've

968
00:39:45,838 --> 00:39:50,230
alright so that's the first step of

969
00:39:48,639 --> 00:39:52,118
things drawing an actual rectangle

970
00:39:50,230 --> 00:39:54,969
screen we did it yay congratulations

971
00:39:52,119 --> 00:39:56,769
everyone wins so now the question is how

972
00:39:54,969 --> 00:39:58,779
do we get a texture down there how do we

973
00:39:56,769 --> 00:40:01,509
get something that's drawn on to the

974
00:39:58,780 --> 00:40:03,760
screen well what we need to actually do

975
00:40:01,510 --> 00:40:06,520
now is draw something that actually has

976
00:40:03,760 --> 00:40:08,170
some UV coordinates right because we

977
00:40:06,519 --> 00:40:11,108
need to tell it to pull from our texture

978
00:40:08,170 --> 00:40:13,960
we need to do the thing that I that I

979
00:40:11,108 --> 00:40:15,818
was saying we did our cells before so we

980
00:40:13,960 --> 00:40:18,519
need to set up these UV coordinates 0 to

981
00:40:15,818 --> 00:40:20,259
1 0 to 1 so it knows how to grab from

982
00:40:18,519 --> 00:40:21,219
the image this is exactly like what we

983
00:40:20,260 --> 00:40:23,530
implemented so you all should be very

984
00:40:21,219 --> 00:40:25,149
familiar with this the concept of of

985
00:40:23,530 --> 00:40:26,619
thinking about an image as having a UV

986
00:40:25,150 --> 00:40:28,990
coordinate where 0 0 is the bottom

987
00:40:26,619 --> 00:40:31,510
corner 1 1 is the top corner right and

988
00:40:28,989 --> 00:40:35,858
anywhere between 0 &amp; 1 is picking out

989
00:40:31,510 --> 00:40:36,640
like pixels in this thing ok well the

990
00:40:35,858 --> 00:40:38,650
way OpenGL

991
00:40:36,639 --> 00:40:41,379
works in this old-school fashion here

992
00:40:38,650 --> 00:40:43,420
again like I said the old-school way is

993
00:40:41,380 --> 00:40:45,278
the GL vertex call is considered the

994
00:40:43,420 --> 00:40:47,349
finalization call for that vertex and

995
00:40:45,278 --> 00:40:49,750
anything that happens before it is

996
00:40:47,349 --> 00:40:52,088
considered as associating an attribute

997
00:40:49,750 --> 00:40:54,849
with that vertex so for example if I

998
00:40:52,088 --> 00:40:58,538
said GL color 3f and I pass a color here

999
00:40:54,849 --> 00:41:00,880
like for example I pass magenta and then

1000
00:40:58,539 --> 00:41:04,028
down here I pass another color that is

1001
00:41:00,880 --> 00:41:06,430
white you will note that the white color

1002
00:41:04,028 --> 00:41:07,719
applies to these very the magenta color

1003
00:41:06,429 --> 00:41:10,568
plus these receipts the white color

1004
00:41:07,719 --> 00:41:11,919
applies to these ok and hopefully I

1005
00:41:10,568 --> 00:41:13,509
don't know if I have setup and modulate

1006
00:41:11,920 --> 00:41:15,818
as a blend note here I don't think so so

1007
00:41:13,510 --> 00:41:18,190
there you go right oh why did I say

1008
00:41:15,818 --> 00:41:20,230
magenta I put in yellow yeah

1009
00:41:18,190 --> 00:41:22,510
and similarly I can associate a

1010
00:41:20,230 --> 00:41:25,210
different one with every single one if I

1011
00:41:22,510 --> 00:41:28,210
want to like I can do an R a G and a B

1012
00:41:25,210 --> 00:41:29,679
here for example an OpenGL will

1013
00:41:28,210 --> 00:41:30,970
automatically interpolate between those

1014
00:41:29,679 --> 00:41:33,009
colors just like we did our

1015
00:41:30,969 --> 00:41:34,480
interpolation right just like we were

1016
00:41:33,010 --> 00:41:38,380
doing interpolation of UV coordinates

1017
00:41:34,480 --> 00:41:40,240
it'll interpolate the colors right so

1018
00:41:38,380 --> 00:41:42,430
all we have to do if we want to

1019
00:41:40,239 --> 00:41:44,858
associate UV coordinates is we just have

1020
00:41:42,429 --> 00:41:46,868
to call the opengl function that

1021
00:41:44,858 --> 00:41:48,489
specifies texture coordinates and we

1022
00:41:46,869 --> 00:41:49,390
have to specify the texture coordinates

1023
00:41:48,489 --> 00:41:51,868
for each of these vertices that

1024
00:41:49,389 --> 00:41:53,828
logically would go with that particular

1025
00:41:51,869 --> 00:41:55,180
vertex so we're gonna have to figure out

1026
00:41:53,829 --> 00:41:56,798
what that is we'll do that on the

1027
00:41:55,179 --> 00:42:00,548
blackboard in just one second let me

1028
00:41:56,798 --> 00:42:01,869
first spam our thing here there we go so

1029
00:42:00,548 --> 00:42:04,268
what are the texture coordinates that we

1030
00:42:01,869 --> 00:42:07,028
actually need to fill with well if we're

1031
00:42:04,268 --> 00:42:09,278
doing this right here this is what we

1032
00:42:07,028 --> 00:42:11,679
chose to draw obviously we want the

1033
00:42:09,278 --> 00:42:14,588
bottom of our image the 0 0 UV to be

1034
00:42:11,679 --> 00:42:18,159
here right so the first one would be 0 0

1035
00:42:14,588 --> 00:42:20,469
this one would be 1 0 right and this one

1036
00:42:18,159 --> 00:42:21,879
would be 1 1 those would be the UV

1037
00:42:20,469 --> 00:42:23,528
coordinates right because we want to

1038
00:42:21,880 --> 00:42:26,650
overlay the image exactly on the

1039
00:42:23,528 --> 00:42:29,079
triangles okay so we've got 0 0 then

1040
00:42:26,650 --> 00:42:32,220
we've got 1 0 then we've got 1 1 okay

1041
00:42:29,079 --> 00:42:37,450
and that again associates thusly

1042
00:42:32,219 --> 00:42:38,980
yeah hopefully that makes sense and then

1043
00:42:37,449 --> 00:42:41,318
similarly for the other guys down here

1044
00:42:38,980 --> 00:42:43,000
we've got the same thing 0 0 for the

1045
00:42:41,318 --> 00:42:45,460
negative P negative P case right and

1046
00:42:43,000 --> 00:42:46,960
then we've got this guy is 1 1 because

1047
00:42:45,460 --> 00:42:49,329
he's all the way over and then this guy

1048
00:42:46,960 --> 00:42:49,909
here would be 0 1 because he's like up

1049
00:42:49,329 --> 00:42:51,440
and over

1050
00:42:49,909 --> 00:42:53,358
right you can almost just read off the

1051
00:42:51,440 --> 00:42:55,970
negatives on the peas right kind of tell

1052
00:42:53,358 --> 00:42:57,440
us where those are so now if we run it

1053
00:42:55,969 --> 00:42:58,489
again we won't actually see anything

1054
00:42:57,440 --> 00:42:59,960
here but we've associated touch

1055
00:42:58,489 --> 00:43:01,699
coordinates we won't see anything

1056
00:42:59,960 --> 00:43:03,440
different because there is no texture

1057
00:43:01,699 --> 00:43:06,769
being specified but we specify the

1058
00:43:03,440 --> 00:43:09,980
coordinates and similarly those

1059
00:43:06,769 --> 00:43:13,159
coordinates get multiplied by a texture

1060
00:43:09,980 --> 00:43:15,409
matrix I don't know if what the actual

1061
00:43:13,159 --> 00:43:16,788
let me see here you know matrix mode I

1062
00:43:15,409 --> 00:43:19,818
don't remember so a long time so I used

1063
00:43:16,789 --> 00:43:22,220
the fixed function pipeline I don't

1064
00:43:19,818 --> 00:43:24,980
remember if it's geo texture it is geo

1065
00:43:22,219 --> 00:43:27,588
texture so GL colors and geo textures

1066
00:43:24,980 --> 00:43:30,980
also are considered essentially points

1067
00:43:27,588 --> 00:43:32,900
so I'll just put this here for your sort

1068
00:43:30,980 --> 00:43:35,179
of amusement we can if we want to

1069
00:43:32,900 --> 00:43:36,798
transform our textures by a matrix as

1070
00:43:35,179 --> 00:43:38,838
well if we want to move the texture

1071
00:43:36,798 --> 00:43:40,338
coordinates separate from the thing we

1072
00:43:38,838 --> 00:43:42,440
are not going to but I'll just sort of

1073
00:43:40,338 --> 00:43:45,369
clearly state there that we're trying to

1074
00:43:42,440 --> 00:43:50,450
transfer everything not at all basically

1075
00:43:45,369 --> 00:43:51,470
okay so there's our two triangles

1076
00:43:50,449 --> 00:43:52,548
there's our texture coordinates so

1077
00:43:51,469 --> 00:43:53,750
they're the only thing that we actually

1078
00:43:52,548 --> 00:43:56,028
have to do now is we have to get a

1079
00:43:53,750 --> 00:43:58,250
texture down to the card and that's

1080
00:43:56,028 --> 00:43:59,809
actually not that difficult in theory

1081
00:43:58,250 --> 00:44:03,920
it's just really difficult in practice

1082
00:43:59,809 --> 00:44:05,180
because OpenGL does not make it easy and

1083
00:44:03,920 --> 00:44:07,579
I don't think we'll have time to do it

1084
00:44:05,179 --> 00:44:10,250
today we only have 11 minutes left I

1085
00:44:07,579 --> 00:44:12,589
will basically put in the calls and talk

1086
00:44:10,250 --> 00:44:14,329
about them and they won't work and then

1087
00:44:12,588 --> 00:44:17,929
we'll have to talk about why and that

1088
00:44:14,329 --> 00:44:20,599
will be our job for Monday ok so the way

1089
00:44:17,929 --> 00:44:24,019
you specify a texture is with the call

1090
00:44:20,599 --> 00:44:25,789
GL text image 2d and what this is saying

1091
00:44:24,019 --> 00:44:28,480
is exactly what it sounds like it's

1092
00:44:25,789 --> 00:44:32,599
saying I want to specify the image for a

1093
00:44:28,480 --> 00:44:34,909
texture okay and the parameters of GL

1094
00:44:32,599 --> 00:44:37,490
text to D are some of the worst

1095
00:44:34,909 --> 00:44:41,538
parameters ever devised for submitting a

1096
00:44:37,489 --> 00:44:43,459
texture by mankind they are awful all

1097
00:44:41,539 --> 00:44:46,789
one of the all-time worst

1098
00:44:43,460 --> 00:44:48,318
api's in OpenGL because OpenGL was

1099
00:44:46,789 --> 00:44:51,799
actually fairly reasonably designed for

1100
00:44:48,318 --> 00:44:54,079
back in the day these are awful so let's

1101
00:44:51,798 --> 00:44:55,818
talk about this so GL text image 2d a

1102
00:44:54,079 --> 00:44:57,528
little bit of it should look familiar to

1103
00:44:55,818 --> 00:44:59,269
you you can see here that there's a GL

1104
00:44:57,528 --> 00:45:01,278
void star pixels as the last remember

1105
00:44:59,269 --> 00:45:03,048
that is the pointer to the buffer of

1106
00:45:01,278 --> 00:45:03,650
pixels just like we have created so that

1107
00:45:03,048 --> 00:45:06,009
part you

1108
00:45:03,650 --> 00:45:09,530
understand width and height pretty clear

1109
00:45:06,010 --> 00:45:10,790
border is sort of a separate thing that

1110
00:45:09,530 --> 00:45:13,160
we won't go into now which is saying if

1111
00:45:10,789 --> 00:45:14,269
you want there to consider an extra ring

1112
00:45:13,159 --> 00:45:14,869
around the pixels that gets into

1113
00:45:14,269 --> 00:45:17,599
mipmapping

1114
00:45:14,869 --> 00:45:19,309
and a whole ball of wax 3d cards don't

1115
00:45:17,599 --> 00:45:20,989
do MIT mapping properly they never have

1116
00:45:19,309 --> 00:45:23,360
it was probably one of the worst design

1117
00:45:20,989 --> 00:45:25,219
aspects of them and I have a gigantic

1118
00:45:23,360 --> 00:45:26,450
rant about how broken MIT mapping is but

1119
00:45:25,219 --> 00:45:27,949
we will save that for some other day

1120
00:45:26,449 --> 00:45:30,619
when we actually care about MIT mapping

1121
00:45:27,949 --> 00:45:35,719
which we may never actually on handmade

1122
00:45:30,619 --> 00:45:36,679
here so separating that part we have the

1123
00:45:35,719 --> 00:45:38,539
width and the height which you

1124
00:45:36,679 --> 00:45:39,739
understand and then we've got some

1125
00:45:38,539 --> 00:45:41,809
things here we've got stuff like

1126
00:45:39,739 --> 00:45:45,529
internal format and format what does

1127
00:45:41,809 --> 00:45:48,199
that even mean well what happens is this

1128
00:45:45,530 --> 00:45:49,730
format here the second format the one

1129
00:45:48,199 --> 00:45:52,039
that comes before are the pixels just

1130
00:45:49,730 --> 00:45:54,889
before the pixels in the type right he's

1131
00:45:52,039 --> 00:45:58,130
saying how we're submitting it right and

1132
00:45:54,889 --> 00:46:00,379
we've got an RGBA right we've got RGB a

1133
00:45:58,130 --> 00:46:02,869
RGB a rgba right that's what we've got

1134
00:46:00,380 --> 00:46:04,430
in our texture only we actually are

1135
00:46:02,869 --> 00:46:08,269
backwards I don't know if they've got

1136
00:46:04,429 --> 00:46:12,349
BGR right here they don't exactly be grx

1137
00:46:08,269 --> 00:46:13,820
there we go we are actually backwards

1138
00:46:12,349 --> 00:46:15,799
because we use the windows format since

1139
00:46:13,820 --> 00:46:19,340
we wrote on Windows originally so

1140
00:46:15,800 --> 00:46:23,420
remember byte order in both in on in

1141
00:46:19,340 --> 00:46:25,430
memory and and in registers and stuff

1142
00:46:23,420 --> 00:46:26,510
are different on little-endian hopefully

1143
00:46:25,429 --> 00:46:30,069
you remember this from way way back when

1144
00:46:26,510 --> 00:46:34,640
right if you take a look at how Intel

1145
00:46:30,070 --> 00:46:37,039
architectures right little-endian how

1146
00:46:34,639 --> 00:46:38,420
they store things here is a register

1147
00:46:37,039 --> 00:46:40,940
here's how you typically would write a

1148
00:46:38,420 --> 00:46:42,950
register write the least significant

1149
00:46:40,940 --> 00:46:46,099
bits go here the most significant bits

1150
00:46:42,949 --> 00:46:48,349
go here but they're read in memory in

1151
00:46:46,099 --> 00:46:50,329
the opposite order so this is actually

1152
00:46:48,349 --> 00:46:52,250
the zeroth location in memory this is

1153
00:46:50,329 --> 00:46:54,619
actually the the first and the second

1154
00:46:52,250 --> 00:46:56,690
and the third right so what that means

1155
00:46:54,619 --> 00:46:59,929
is when you look at a register and you

1156
00:46:56,690 --> 00:47:02,480
see our a RGB if that's the way you

1157
00:46:59,929 --> 00:47:04,579
actually put them in your register when

1158
00:47:02,480 --> 00:47:07,849
you wrote that out to memory the order

1159
00:47:04,579 --> 00:47:10,789
was B GRA because this is the byte that

1160
00:47:07,849 --> 00:47:12,380
comes first on a PowerPC that wouldn't

1161
00:47:10,789 --> 00:47:15,860
be true it would have actually written

1162
00:47:12,380 --> 00:47:17,510
it out a RGB right and so Windows

1163
00:47:15,860 --> 00:47:20,090
machines are often BGR

1164
00:47:17,510 --> 00:47:22,250
the reason they are be GRA is because

1165
00:47:20,090 --> 00:47:24,380
the graphics programmers of Windows

1166
00:47:22,250 --> 00:47:28,219
wanted to see them in registers in the

1167
00:47:24,380 --> 00:47:30,680
RGB order so that's actually the format

1168
00:47:28,219 --> 00:47:33,469
that we are for amusement purposes maybe

1169
00:47:30,679 --> 00:47:34,849
we'll pass it and just to not pass it

1170
00:47:33,469 --> 00:47:36,559
that way if we could we could not pass

1171
00:47:34,849 --> 00:47:39,049
it that way and see the color reversal

1172
00:47:36,559 --> 00:47:41,329
you want to the point being it's okay

1173
00:47:39,050 --> 00:47:45,289
because there is actually a format for

1174
00:47:41,329 --> 00:47:47,090
that VLB GRA X so it's actually totally

1175
00:47:45,289 --> 00:47:51,050
fine we can just tell it that's what

1176
00:47:47,090 --> 00:47:56,390
we've got right and then we have of

1177
00:47:51,050 --> 00:48:02,570
course our pixels which come from buffer

1178
00:47:56,389 --> 00:48:04,358
memory okay and then we've got some

1179
00:48:02,570 --> 00:48:07,600
other information here right we've got

1180
00:48:04,358 --> 00:48:10,549
hmm what was the other things we knew

1181
00:48:07,599 --> 00:48:12,409
okay so type we know what that is we

1182
00:48:10,550 --> 00:48:14,300
know that like we specified the order of

1183
00:48:12,409 --> 00:48:16,159
the components with this field we now

1184
00:48:14,300 --> 00:48:17,990
know that we have to specify actually

1185
00:48:16,159 --> 00:48:20,420
the the type of them they're unsigned

1186
00:48:17,989 --> 00:48:23,239
bytes right because it's talking about

1187
00:48:20,420 --> 00:48:25,070
the the size of each component not the

1188
00:48:23,239 --> 00:48:28,579
size the whole thing so we're taking

1189
00:48:25,070 --> 00:48:32,780
we're 32-bit colors right in hammer here

1190
00:48:28,579 --> 00:48:35,509
we're 8-bit great 8-bit are 8-bit g8 b8

1191
00:48:32,780 --> 00:48:38,390
bit a so we're unsigned bytes for each

1192
00:48:35,510 --> 00:48:39,800
one of them 0 to 255 and we're BGR a so

1193
00:48:38,389 --> 00:48:42,259
that's specifying the image that's

1194
00:48:39,800 --> 00:48:43,700
coming in and then we've got some other

1195
00:48:42,260 --> 00:48:47,330
things as Best Buy here so we've got the

1196
00:48:43,699 --> 00:48:49,909
target and the target in OpenGL is just

1197
00:48:47,329 --> 00:48:52,009
specifying essentially which texture

1198
00:48:49,909 --> 00:48:54,858
slot you're talking about this is a very

1199
00:48:52,010 --> 00:48:58,280
confusing thing but what it essentially

1200
00:48:54,858 --> 00:49:02,420
means is there's texture 1d texture 2d

1201
00:48:58,280 --> 00:49:04,820
and so on and these are talking about a

1202
00:49:02,420 --> 00:49:07,369
1d texture a 2d texture a 3d texture and

1203
00:49:04,820 --> 00:49:09,350
so on and they often have functions that

1204
00:49:07,369 --> 00:49:11,780
will take which one you're trying to

1205
00:49:09,349 --> 00:49:13,219
talk about the currently loaded 1d text

1206
00:49:11,780 --> 00:49:16,940
or the currently 2d texture current load

1207
00:49:13,219 --> 00:49:18,739
3d texture GL text image 2d it's stupid

1208
00:49:16,940 --> 00:49:20,570
that it takes one because like you can

1209
00:49:18,739 --> 00:49:22,129
see it has state go2 actually I think

1210
00:49:20,570 --> 00:49:23,930
they were trying to leave room for

1211
00:49:22,130 --> 00:49:25,250
extensions which wanted to target

1212
00:49:23,929 --> 00:49:27,139
something else and I think they actually

1213
00:49:25,250 --> 00:49:28,429
do use that in some cases but for our

1214
00:49:27,139 --> 00:49:30,889
purposes we're just trying to specify a

1215
00:49:28,429 --> 00:49:33,259
2d texture that we're going to use right

1216
00:49:30,889 --> 00:49:34,608
we then have a level the level is for

1217
00:49:33,260 --> 00:49:35,930
specifying what are called MIT Maps

1218
00:49:34,608 --> 00:49:37,848
we're not going to talk about them right

1219
00:49:35,929 --> 00:49:39,019
now so we only need to set specify zero

1220
00:49:37,849 --> 00:49:41,450
because we're not trying to address

1221
00:49:39,019 --> 00:49:42,920
anything more copy than that and then we

1222
00:49:41,449 --> 00:49:45,049
have internal format and what internal

1223
00:49:42,920 --> 00:49:47,869
format is is how we want OpenGL to store

1224
00:49:45,050 --> 00:49:49,130
it right because again here we were in

1225
00:49:47,869 --> 00:49:51,230
this lower part we were talking about

1226
00:49:49,130 --> 00:49:52,670
how we were passing it in here we're

1227
00:49:51,230 --> 00:49:54,320
talking about how we want OpenGL to

1228
00:49:52,670 --> 00:49:55,550
handle it on its side which is really

1229
00:49:54,320 --> 00:49:57,470
just a suggestion it doesn't have to

1230
00:49:55,550 --> 00:50:01,039
store it this way it's just suggestion

1231
00:49:57,469 --> 00:50:04,309
and in our cases we probably want GL

1232
00:50:01,039 --> 00:50:05,179
rgba 8 right because we want to store 8

1233
00:50:04,309 --> 00:50:07,250
bits per channel

1234
00:50:05,179 --> 00:50:10,579
RGBA which is what we're passing it in

1235
00:50:07,250 --> 00:50:11,900
and that's that right we also then have

1236
00:50:10,579 --> 00:50:13,460
to specify the width and the height we

1237
00:50:11,900 --> 00:50:16,820
come after it and the border value which

1238
00:50:13,460 --> 00:50:19,789
again is 0 so we have our buffer width

1239
00:50:16,820 --> 00:50:23,030
and our buffer height and then we have

1240
00:50:19,789 --> 00:50:29,599
our 0 border and that's how you specify

1241
00:50:23,030 --> 00:50:31,609
a texture oops that's how you specify a

1242
00:50:29,599 --> 00:50:33,260
texture in OpenGL but as you can see

1243
00:50:31,608 --> 00:50:35,088
when we run it we're not actually gonna

1244
00:50:33,260 --> 00:50:37,940
it's not actually going to draw anything

1245
00:50:35,088 --> 00:50:39,529
ok so why is it drawing anything well

1246
00:50:37,940 --> 00:50:41,179
there's a lot of reasons a bunch of

1247
00:50:39,530 --> 00:50:43,190
things we have to do like I said I don't

1248
00:50:41,179 --> 00:50:45,289
think we'll get to them in five minutes

1249
00:50:43,190 --> 00:50:48,019
but when we submit a texture to OpenGL

1250
00:50:45,289 --> 00:50:50,269
that again and I think hopefully I

1251
00:50:48,019 --> 00:50:52,369
hammered this home on Wednesday when I

1252
00:50:50,269 --> 00:50:54,739
did the overview all of these things are

1253
00:50:52,369 --> 00:50:57,380
basically just giving the the OpenGL

1254
00:50:54,739 --> 00:50:59,329
driver layer what we're trying to tell

1255
00:50:57,380 --> 00:51:01,700
the card to do so what this actually

1256
00:50:59,329 --> 00:51:03,588
turns into is a request to transfer a

1257
00:51:01,699 --> 00:51:05,210
buffer memory over and how does that

1258
00:51:03,588 --> 00:51:06,889
work well what's actually gonna happen

1259
00:51:05,210 --> 00:51:08,720
when they call GL text image 2d is the

1260
00:51:06,889 --> 00:51:10,779
driver is gonna snap a copy of this

1261
00:51:08,719 --> 00:51:13,669
buffer memory into its own memory and

1262
00:51:10,780 --> 00:51:15,200
then later it will kick off a transfer

1263
00:51:13,670 --> 00:51:17,180
possibly at that very moment but

1264
00:51:15,199 --> 00:51:18,259
possibly later it'll kick off a transfer

1265
00:51:17,179 --> 00:51:21,710
that'll start sending it down to the

1266
00:51:18,260 --> 00:51:23,450
card right then all of these things will

1267
00:51:21,710 --> 00:51:24,829
build up a command buffer that's how to

1268
00:51:23,449 --> 00:51:26,750
draw these primitives and that'll get

1269
00:51:24,829 --> 00:51:28,579
kicked off to the card and then the swap

1270
00:51:26,750 --> 00:51:30,380
buffers right is just saying hey we're

1271
00:51:28,579 --> 00:51:32,569
ready to present now so it knows that

1272
00:51:30,380 --> 00:51:35,059
all of this stuff goes with a single

1273
00:51:32,570 --> 00:51:37,849
frame and it can like do it all finish

1274
00:51:35,059 --> 00:51:39,619
it and present it to the screen right so

1275
00:51:37,849 --> 00:51:41,240
again none of this stuff is necessarily

1276
00:51:39,619 --> 00:51:43,130
happening exactly when we call it it's

1277
00:51:41,239 --> 00:51:43,809
all sort of telling the driver what we

1278
00:51:43,130 --> 00:51:45,760
want

1279
00:51:43,809 --> 00:51:49,809
and the driver is doing whatever it

1280
00:51:45,760 --> 00:51:51,550
wants to make that happen okay so why

1281
00:51:49,809 --> 00:51:53,980
are we seeing a texture well first of

1282
00:51:51,550 --> 00:51:55,870
all we have to enable texturing OpenGL

1283
00:51:53,980 --> 00:51:57,429
fixed function pipeline was set up so

1284
00:51:55,869 --> 00:51:59,019
that you could turn the features on and

1285
00:51:57,429 --> 00:52:01,029
off as necessary and so there's a

1286
00:51:59,019 --> 00:52:03,280
function called GL enable which allows

1287
00:52:01,030 --> 00:52:05,260
you to say whether you want something

1288
00:52:03,280 --> 00:52:07,960
like texturing to happen so the first

1289
00:52:05,260 --> 00:52:09,610
thing we have to do is set up an actual

1290
00:52:07,960 --> 00:52:11,920
you know we have to actually enable

1291
00:52:09,610 --> 00:52:14,470
texturing so it knows we want it to pull

1292
00:52:11,920 --> 00:52:16,480
from the texture okay but just doing

1293
00:52:14,469 --> 00:52:18,039
that unless there's some weird thing

1294
00:52:16,480 --> 00:52:19,719
that happens here I don't think will be

1295
00:52:18,039 --> 00:52:22,570
enough for us to actually see our

1296
00:52:19,719 --> 00:52:23,980
texture on the screen right okay so why

1297
00:52:22,570 --> 00:52:26,289
are we still not saying we said texture

1298
00:52:23,980 --> 00:52:29,289
the texture image why aren't we seeing a

1299
00:52:26,289 --> 00:52:31,630
texture on the screen well there's more

1300
00:52:29,289 --> 00:52:34,719
to it than that the next thing we have

1301
00:52:31,630 --> 00:52:38,289
to do is we actually have to look at how

1302
00:52:34,719 --> 00:52:40,659
the texturing API works which is that we

1303
00:52:38,289 --> 00:52:42,969
can have more than one texture obviously

1304
00:52:40,659 --> 00:52:44,559
like if you see games they have lots of

1305
00:52:42,969 --> 00:52:46,419
different textures and one of the things

1306
00:52:44,559 --> 00:52:48,489
that OpenGL wants to be able to do is

1307
00:52:46,420 --> 00:52:50,650
store multiple textures on the card so

1308
00:52:48,489 --> 00:52:52,599
that as we draw things we can select

1309
00:52:50,650 --> 00:52:54,309
which texture we wanted to use right we

1310
00:52:52,599 --> 00:52:55,569
can just say oh oh all this trying to

1311
00:52:54,309 --> 00:52:57,039
let that texture draw this triangle that

1312
00:52:55,570 --> 00:52:59,500
texture or whatever that sort of thing

1313
00:52:57,039 --> 00:53:01,239
right and so although this submits the

1314
00:52:59,500 --> 00:53:03,340
texture of the card what you're supposed

1315
00:53:01,239 --> 00:53:05,559
to do first and again you can sort of

1316
00:53:03,340 --> 00:53:07,300
see here as we're as I'm giving you the

1317
00:53:05,559 --> 00:53:08,380
introduction to OpenGL basic OpenGL

1318
00:53:07,300 --> 00:53:10,480
operations you can see it's very

1319
00:53:08,380 --> 00:53:12,099
stateful right there's a lot of things

1320
00:53:10,480 --> 00:53:13,389
like we turn on texturing and it's just

1321
00:53:12,099 --> 00:53:15,039
assumed that everything else has that

1322
00:53:13,389 --> 00:53:16,569
texture we want to clear the screen well

1323
00:53:15,039 --> 00:53:18,039
it's just assumed that it knows what the

1324
00:53:16,570 --> 00:53:19,930
color is because we set that color at

1325
00:53:18,039 --> 00:53:21,969
some earlier time we could have set that

1326
00:53:19,929 --> 00:53:23,519
color like way up here right so it's

1327
00:53:21,969 --> 00:53:25,750
very stateful it stores a lot of state

1328
00:53:23,519 --> 00:53:28,000
and the same is true of texturing what

1329
00:53:25,750 --> 00:53:31,210
happens with texturing is there's a

1330
00:53:28,000 --> 00:53:32,230
concept of what texture is bound all

1331
00:53:31,210 --> 00:53:34,599
right

1332
00:53:32,230 --> 00:53:37,440
there's a thing called like bind I think

1333
00:53:34,599 --> 00:53:37,440
it's bind texture

1334
00:53:40,079 --> 00:53:44,190
and there's a concept of saying by

1335
00:53:41,849 --> 00:53:46,619
texture what happens with binding is you

1336
00:53:44,190 --> 00:53:49,380
need to essentially create slots that

1337
00:53:46,619 --> 00:53:51,150
name the textures you will submit so

1338
00:53:49,380 --> 00:53:52,980
that you can refer to them now this may

1339
00:53:51,150 --> 00:53:55,349
seem superfluous in our case because we

1340
00:53:52,980 --> 00:53:56,730
only have one texture that we ever want

1341
00:53:55,349 --> 00:53:58,680
to draw which is the thing that came out

1342
00:53:56,730 --> 00:54:00,630
of our own renderer but as you might

1343
00:53:58,679 --> 00:54:03,088
imagine if we convert over to rendering

1344
00:54:00,630 --> 00:54:04,530
with OpenGL itself we might want to have

1345
00:54:03,088 --> 00:54:06,420
multiple textures that are different

1346
00:54:04,530 --> 00:54:08,970
images that were you know putting on

1347
00:54:06,420 --> 00:54:10,588
things right and so this is what this

1348
00:54:08,969 --> 00:54:13,019
part is for and what we need to do is do

1349
00:54:10,588 --> 00:54:14,070
this we need to bind texture that target

1350
00:54:13,019 --> 00:54:15,838
is again the thing I was talking about

1351
00:54:14,070 --> 00:54:18,480
where it says which texture slot you're

1352
00:54:15,838 --> 00:54:20,759
talking about the 1d 2d 3d texture and

1353
00:54:18,480 --> 00:54:23,460
then the texture is something that we

1354
00:54:20,760 --> 00:54:24,859
need to create so how do we do that

1355
00:54:23,460 --> 00:54:27,539
right mm-hmm

1356
00:54:24,858 --> 00:54:29,759
well we want to do this at startup but

1357
00:54:27,539 --> 00:54:38,429
I'll just do a static init here just for

1358
00:54:29,760 --> 00:54:40,410
a quick thing to do move this

1359
00:54:38,429 --> 00:54:46,289
so we'll do a static init equals false

1360
00:54:40,409 --> 00:54:48,299
if in it yeah so what we need here is we

1361
00:54:46,289 --> 00:54:50,130
need one of these texture handles and

1362
00:54:48,300 --> 00:54:56,700
the way that we get a texture handle is

1363
00:54:50,130 --> 00:54:59,789
we just ask OpenGL for one so we say GL

1364
00:54:56,699 --> 00:55:01,379
gen textures which is a request to get

1365
00:54:59,789 --> 00:55:03,210
textures we say we would like one

1366
00:55:01,380 --> 00:55:05,789
texture there's like a count and then we

1367
00:55:03,210 --> 00:55:06,960
say where to put it and if we made this

1368
00:55:05,789 --> 00:55:09,719
an array we could generate multiple

1369
00:55:06,960 --> 00:55:11,490
textures at a time so if we do that we

1370
00:55:09,719 --> 00:55:13,799
can then bind that texture and really

1371
00:55:11,489 --> 00:55:15,659
all this is doing literally the only

1372
00:55:13,800 --> 00:55:17,460
thing that GL gen textures does is it's

1373
00:55:15,659 --> 00:55:19,829
like giving us a name it's basically

1374
00:55:17,460 --> 00:55:22,519
getting us a pointer it's saying give us

1375
00:55:19,829 --> 00:55:25,170
something we can use to refer to this

1376
00:55:22,519 --> 00:55:27,480
image in the future when we need it and

1377
00:55:25,170 --> 00:55:30,570
all we're ever gonna do is just bind it

1378
00:55:27,480 --> 00:55:32,460
and submit an image that's it okay so

1379
00:55:30,570 --> 00:55:34,950
we're getting closer now but I think

1380
00:55:32,460 --> 00:55:37,679
we're still not quite we're probably not

1381
00:55:34,949 --> 00:55:39,029
quite there because there's one more

1382
00:55:37,679 --> 00:55:39,838
thing I believe we have to do but we're

1383
00:55:39,030 --> 00:55:42,089
almost there

1384
00:55:39,838 --> 00:55:44,759
to singhsoumya screen so there's our GL

1385
00:55:42,088 --> 00:55:45,750
bind texture what is the problem you put

1386
00:55:44,760 --> 00:55:48,410
into there sighs okay fine

1387
00:55:45,750 --> 00:55:48,409
there you go

1388
00:55:49,320 --> 00:55:52,390
so I don't think we'll see the texture

1389
00:55:51,179 --> 00:55:53,558
still because there's one more

1390
00:55:52,389 --> 00:55:57,038
I think we have to do so we're still

1391
00:55:53,559 --> 00:55:59,859
white and that is we have to set up the

1392
00:55:57,039 --> 00:56:02,019
rules for how the texture is sampled and

1393
00:55:59,858 --> 00:56:04,509
applied to our image because remember

1394
00:56:02,018 --> 00:56:06,159
our texture is just one of the things

1395
00:56:04,510 --> 00:56:08,650
that might contribute to the color of a

1396
00:56:06,159 --> 00:56:10,509
point in this fixed function pipeline we

1397
00:56:08,650 --> 00:56:12,940
saw before that I could set colors right

1398
00:56:10,510 --> 00:56:16,269
I was able to set for example a yellow

1399
00:56:12,940 --> 00:56:18,579
here you know and the points came up

1400
00:56:16,268 --> 00:56:20,439
yellow so what would it mean if I had

1401
00:56:18,579 --> 00:56:23,619
the color set to yellow and the texture

1402
00:56:20,440 --> 00:56:26,380
was something else right what does it

1403
00:56:23,619 --> 00:56:28,900
mean so you have to set up what's called

1404
00:56:26,380 --> 00:56:31,150
the texture environment which says what

1405
00:56:28,900 --> 00:56:34,298
to do with the texture and so you can

1406
00:56:31,150 --> 00:56:44,619
see there's a function called GN Tex Tex

1407
00:56:34,298 --> 00:56:47,288
M or let's see GL of text here we go so

1408
00:56:44,619 --> 00:56:50,680
here is our GL texts them there's I both

1409
00:56:47,289 --> 00:56:54,809
I and F V say how to sort of sample from

1410
00:56:50,679 --> 00:56:54,808
the texture I'm not sure if they've got

1411
00:56:54,960 --> 00:57:03,130
much in here here we go yeah here we go

1412
00:56:59,139 --> 00:57:05,048
so GL Tex am I for example right we can

1413
00:57:03,130 --> 00:57:07,269
say what we're trying to do with our

1414
00:57:05,048 --> 00:57:10,809
texture and in this case we can say like

1415
00:57:07,268 --> 00:57:12,669
replace blend decal modulate and we can

1416
00:57:10,809 --> 00:57:18,180
set the mode and what this allows us to

1417
00:57:12,670 --> 00:57:20,798
do is say what we want our texture to do

1418
00:57:18,179 --> 00:57:22,659
like how we want our texture to affect

1419
00:57:20,798 --> 00:57:24,788
the color of the pixels that we're

1420
00:57:22,659 --> 00:57:26,588
drawing and so this is pretty

1421
00:57:24,789 --> 00:57:28,450
straightforward in our case modulate

1422
00:57:26,588 --> 00:57:30,250
means multiply that's what we're going

1423
00:57:28,449 --> 00:57:33,219
to want and the reason for that is it

1424
00:57:30,250 --> 00:57:35,409
means that when we set colors whatever

1425
00:57:33,219 --> 00:57:39,009
our texture actually has in it will just

1426
00:57:35,409 --> 00:57:42,670
get multiplied by those colors right so

1427
00:57:39,009 --> 00:57:49,329
I can do geo text and I here I can say

1428
00:57:42,670 --> 00:57:54,338
that we have GL texture and and I want

1429
00:57:49,329 --> 00:57:56,318
to set it to yellow texture and mode GL

1430
00:57:54,338 --> 00:57:57,909
modulate right and that says whenever

1431
00:57:56,318 --> 00:57:59,139
you sample a texture and you have an

1432
00:57:57,909 --> 00:58:02,558
incoming color multiply them together

1433
00:57:59,139 --> 00:58:06,420
right we have another set of things here

1434
00:58:02,559 --> 00:58:06,420
which are GL text parameter

1435
00:58:07,369 --> 00:58:12,180
gl Tech's parameter so good the search

1436
00:58:10,289 --> 00:58:15,210
there they couldn't even that was great

1437
00:58:12,179 --> 00:58:18,358
nice job MSDN really fantastic

1438
00:58:15,210 --> 00:58:22,730
good job all right um so let's take a

1439
00:58:18,358 --> 00:58:26,519
look here where is our geo texture Doc's

1440
00:58:22,730 --> 00:58:27,539
good yeah so if we well this is 4.0

1441
00:58:26,519 --> 00:58:29,489
though that's probably not the best

1442
00:58:27,539 --> 00:58:32,608
thing let's try this there we go so

1443
00:58:29,489 --> 00:58:33,358
here's GL @ x parameter and you can see

1444
00:58:32,608 --> 00:58:35,400
that this is just kind of a

1445
00:58:33,358 --> 00:58:39,420
multi-function which allows you to set a

1446
00:58:35,400 --> 00:58:41,550
whole bunch of things here right and so

1447
00:58:39,420 --> 00:58:43,050
these are just tons and tons of settings

1448
00:58:41,550 --> 00:58:45,240
that we might want to set for our

1449
00:58:43,050 --> 00:58:47,130
texture and we'll kind of see how to set

1450
00:58:45,239 --> 00:58:50,779
those here so let's go ahead and put

1451
00:58:47,130 --> 00:58:54,780
them in here all right so GL text

1452
00:58:50,780 --> 00:58:56,849
parameter and then there's one more

1453
00:58:54,780 --> 00:58:57,990
thing so even after all this I don't

1454
00:58:56,849 --> 00:58:59,640
think we will actually see anything

1455
00:58:57,989 --> 00:59:02,578
because there's one more thing I'm

1456
00:58:59,639 --> 00:59:05,159
pretty sure that we have wrong that

1457
00:59:02,579 --> 00:59:09,420
we'll have to fix but that'll be left as

1458
00:59:05,159 --> 00:59:11,929
an exercise for the reader the rest of

1459
00:59:09,420 --> 00:59:11,930
these in here

1460
00:59:20,789 --> 00:59:39,309
yeah okay so what are all these things a

1461
00:59:36,840 --> 00:59:41,200
lot of these we probably don't ever want

1462
00:59:39,309 --> 00:59:42,340
to actually set but I'm just gonna kind

1463
00:59:41,199 --> 00:59:48,029
of show them out here so you can kind of

1464
00:59:42,340 --> 00:59:48,030
see how much randomness there isn't here

1465
00:59:53,969 --> 01:00:00,399
all right so we'll get to those a little

1466
00:59:58,389 --> 01:00:04,329
bit later and all of those are going to

1467
01:00:00,400 --> 01:00:06,400
be target P named int right afterwards

1468
01:00:04,329 --> 01:00:08,619
so all of these were going to have TL

1469
01:00:06,400 --> 01:00:13,059
texture 2d in front of them and then

1470
01:00:08,619 --> 01:00:14,799
they're gonna have some parameter and so

1471
01:00:13,059 --> 01:00:16,929
we'll talk about these I guess we'll

1472
01:00:14,800 --> 01:00:18,310
talk about these on Monday and so then

1473
01:00:16,929 --> 01:00:21,039
the final thing that I again like I

1474
01:00:18,309 --> 01:00:24,369
think we have wrong here is that this GL

1475
01:00:21,039 --> 01:00:26,529
text image 2d you'll notice what we did

1476
01:00:24,369 --> 01:00:29,079
not specify because we've got the width

1477
01:00:26,530 --> 01:00:31,180
at the height we have the fact that it's

1478
01:00:29,079 --> 01:00:35,159
PG RA we have it in fact this GL and

1479
01:00:31,179 --> 01:00:38,919
sign byte but what we don't still have

1480
01:00:35,159 --> 01:00:43,649
is any specification of what the stride

1481
01:00:38,920 --> 01:00:46,630
or packing is on this pointer right and

1482
01:00:43,650 --> 01:00:48,639
if you remember this is actually

1483
01:00:46,630 --> 01:00:51,460
something that's a you know it's like a

1484
01:00:48,639 --> 01:00:53,409
bottom up right and it maybe has a

1485
01:00:51,460 --> 01:00:56,019
certain stride we haven't specified any

1486
01:00:53,409 --> 01:00:57,670
of that so we have to go actually verify

1487
01:00:56,019 --> 01:01:00,639
that we're passing something to it

1488
01:00:57,670 --> 01:01:01,840
that's sort of in the write that the

1489
01:01:00,639 --> 01:01:05,920
stride is correct and there's a there's

1490
01:01:01,840 --> 01:01:08,050
a there's a bunch of functions you

1491
01:01:05,920 --> 01:01:10,360
actually call for OpenGL to set up how

1492
01:01:08,050 --> 01:01:13,000
it's expecting this it's like pixel

1493
01:01:10,360 --> 01:01:14,470
transfer settings and all this other

1494
01:01:13,000 --> 01:01:16,150
stuff all right

1495
01:01:14,469 --> 01:01:18,039
so let's go through these really quick

1496
01:01:16,150 --> 01:01:19,960
let me see we got maybe a couple minutes

1497
01:01:18,039 --> 01:01:22,539
we can spare here we just set let me

1498
01:01:19,960 --> 01:01:25,539
just say what a couple of these are all

1499
01:01:22,539 --> 01:01:27,519
right so there's a thing called GL min

1500
01:01:25,539 --> 01:01:29,679
textured min filter and GL texture mag

1501
01:01:27,519 --> 01:01:31,210
filter what those are is again these are

1502
01:01:29,679 --> 01:01:33,250
based on mipmapping

1503
01:01:31,210 --> 01:01:37,210
and so

1504
01:01:33,250 --> 01:01:38,710
these I I don't really want to get into

1505
01:01:37,210 --> 01:01:41,920
what mipmapping is full of these min

1506
01:01:38,710 --> 01:01:45,010
loud max lot all of these are are

1507
01:01:41,920 --> 01:01:46,269
basically all mipmapping things and I

1508
01:01:45,010 --> 01:01:47,620
don't really want to deal with any of

1509
01:01:46,269 --> 01:01:49,630
those so I'm just gonna set these to

1510
01:01:47,619 --> 01:01:51,639
essentially admit mapping off right I

1511
01:01:49,630 --> 01:01:54,400
don't want any MIT mapping of any kind

1512
01:01:51,639 --> 01:01:55,779
and similarly I don't even want any

1513
01:01:54,400 --> 01:01:57,730
texture filtering like you know we

1514
01:01:55,780 --> 01:02:00,190
implemented bilinear filtering I don't

1515
01:01:57,730 --> 01:02:02,679
want any of that on right now so texture

1516
01:02:00,190 --> 01:02:06,039
min filter and mag filter min filter

1517
01:02:02,679 --> 01:02:08,199
says when you are shrinking the image

1518
01:02:06,039 --> 01:02:09,639
down so when you're taking a texture

1519
01:02:08,199 --> 01:02:12,039
that's bigger than how it's showing up

1520
01:02:09,639 --> 01:02:14,289
on screen what do you want to do and GL

1521
01:02:12,039 --> 01:02:16,539
nearest says just pick the nearest Texel

1522
01:02:14,289 --> 01:02:17,920
and show it right so don't do like

1523
01:02:16,539 --> 01:02:19,900
bilinear filtering like we were doing

1524
01:02:17,920 --> 01:02:21,039
remember we did nearest we did that when

1525
01:02:19,900 --> 01:02:22,480
we actually made our render we just

1526
01:02:21,039 --> 01:02:24,460
grabbed the pixel and it kind of looks

1527
01:02:22,480 --> 01:02:25,510
kind of sparkly and not that good we

1528
01:02:24,460 --> 01:02:26,530
just want to stick with that for now

1529
01:02:25,510 --> 01:02:27,670
because we're just bleeding to the

1530
01:02:26,530 --> 01:02:30,760
screen we should be able to get that

1531
01:02:27,670 --> 01:02:32,200
fine anyway mag filter is the opposite

1532
01:02:30,760 --> 01:02:33,730
it's what to do when the texture is

1533
01:02:32,199 --> 01:02:35,019
smaller than how it's appearing on

1534
01:02:33,730 --> 01:02:37,240
screen so how do you want to blow it up

1535
01:02:35,019 --> 01:02:39,369
again I'm just gonna turn all that up

1536
01:02:37,239 --> 01:02:41,379
min LOD max laud is if you start using

1537
01:02:39,369 --> 01:02:42,789
mipmapping which we're like I said not

1538
01:02:41,380 --> 01:02:46,119
doing so we're gonna ignore those for

1539
01:02:42,789 --> 01:02:48,009
now base level and max level I don't

1540
01:02:46,119 --> 01:02:49,389
actually remember exactly how those are

1541
01:02:48,010 --> 01:02:53,320
used for computing those are again all

1542
01:02:49,389 --> 01:02:58,139
of those things so texture rap s T and R

1543
01:02:53,320 --> 01:03:01,269
so although we use the terms U and V

1544
01:02:58,139 --> 01:03:03,099
OpenGL uses the terms s T and R to talk

1545
01:03:01,269 --> 01:03:05,320
I believe about texture coordinates

1546
01:03:03,099 --> 01:03:07,449
after they've been transformed I believe

1547
01:03:05,320 --> 01:03:10,300
I don't quite remember but I believe

1548
01:03:07,449 --> 01:03:11,889
that's true so if you have like the uvw

1549
01:03:10,300 --> 01:03:13,810
coordinates of your textures like we was

1550
01:03:11,889 --> 01:03:15,099
talking about UV coordinates and then I

1551
01:03:13,809 --> 01:03:17,079
said there's a texture matrix you can

1552
01:03:15,099 --> 01:03:19,319
use to transfer them if you want well

1553
01:03:17,079 --> 01:03:22,029
what comes out the other side of that I

1554
01:03:19,320 --> 01:03:23,620
believe they refer to is st and then the

1555
01:03:22,030 --> 01:03:24,880
third ones are a few F again if you have

1556
01:03:23,619 --> 01:03:29,109
3d texturing or something like that

1557
01:03:24,880 --> 01:03:30,760
involved and so these rap here allows

1558
01:03:29,110 --> 01:03:32,680
you to set how you want your textures to

1559
01:03:30,760 --> 01:03:34,510
wrap do you want them to clamp to the

1560
01:03:32,679 --> 01:03:37,509
border color do you want them to mirror

1561
01:03:34,510 --> 01:03:39,550
do you want them to repeat right and so

1562
01:03:37,510 --> 01:03:40,900
in this case we want clamping because I

1563
01:03:39,550 --> 01:03:43,300
don't actually want to do anything where

1564
01:03:40,900 --> 01:03:46,579
mid mirrors or appie training like that

1565
01:03:43,300 --> 01:03:48,260
these guys here texture priority

1566
01:03:46,579 --> 01:03:50,000
Parramatta pear phone we don't even want

1567
01:03:48,260 --> 01:03:52,880
to set any of these these are things

1568
01:03:50,000 --> 01:03:54,650
that are specific to like texture

1569
01:03:52,880 --> 01:03:56,150
priority can say when we're putting

1570
01:03:54,650 --> 01:03:58,099
textures in memory if you have to

1571
01:03:56,150 --> 01:03:59,660
discard one if we fill up texture memory

1572
01:03:58,099 --> 01:04:01,849
or something which one should take

1573
01:03:59,659 --> 01:04:03,799
priority we don't really want to talk

1574
01:04:01,849 --> 01:04:07,460
about any of these these are all kind of

1575
01:04:03,800 --> 01:04:11,269
non sequitur for us all right

1576
01:04:07,460 --> 01:04:14,179
so that's I guess these are not SPECT in

1577
01:04:11,269 --> 01:04:16,039
our version of OpenGL it looks like

1578
01:04:14,179 --> 01:04:17,960
they're not so this is probably I guess

1579
01:04:16,039 --> 01:04:19,400
this is too early for OpenGL to even

1580
01:04:17,960 --> 01:04:22,699
have that the opengl that we're using

1581
01:04:19,400 --> 01:04:27,800
doesn't even have that apparently so

1582
01:04:22,699 --> 01:04:30,379
that's kind of terrifying but okay all

1583
01:04:27,800 --> 01:04:32,980
right so we're getting closer we're not

1584
01:04:30,380 --> 01:04:32,980
quite there yet

1585
01:04:33,579 --> 01:04:40,569
yeah okay we're not quite there yet but

1586
01:04:36,369 --> 01:04:44,059
we're almost there I think and so yeah

1587
01:04:40,570 --> 01:04:51,530
like I said well alright or we just are

1588
01:04:44,059 --> 01:04:52,940
there yet all right well when I said we

1589
01:04:51,530 --> 01:04:54,950
weren't there yet what I meant is we are

1590
01:04:52,940 --> 01:04:59,050
there yet and please don't listen to

1591
01:04:54,949 --> 01:05:02,089
what I have to say because it's all lie

1592
01:04:59,050 --> 01:05:03,800
and so we are there yet there is the

1593
01:05:02,090 --> 01:05:06,050
game running through open gel with all

1594
01:05:03,800 --> 01:05:07,550
the parameters set and I guess we just

1595
01:05:06,050 --> 01:05:09,410
happened to look out and our buffer

1596
01:05:07,550 --> 01:05:12,019
happens to be exactly packed the way

1597
01:05:09,409 --> 01:05:13,909
that OpenGL was going to read it and so

1598
01:05:12,019 --> 01:05:18,650
we got lucky which means if we just go

1599
01:05:13,909 --> 01:05:20,809
ahead and set this thing to 1.0 and we

1600
01:05:18,650 --> 01:05:22,970
could also set our buffer size back up

1601
01:05:20,809 --> 01:05:28,340
if we want to here we could set it to

1602
01:05:22,969 --> 01:05:29,449
1920 by 1080 we should have a full

1603
01:05:28,340 --> 01:05:32,360
screen OpenGL

1604
01:05:29,449 --> 01:05:34,759
thing running and so there it is and

1605
01:05:32,360 --> 01:05:37,039
here we go into the game and there's

1606
01:05:34,760 --> 01:05:44,150
there's our little dude and he's going

1607
01:05:37,039 --> 01:05:46,070
around so okay so good we did it a lot

1608
01:05:44,150 --> 01:05:47,210
of ground covered there and like I said

1609
01:05:46,070 --> 01:05:50,269
we were going to want to kind of go

1610
01:05:47,210 --> 01:05:52,429
through this stuff a little more slowly

1611
01:05:50,269 --> 01:05:54,230
that's like the first pass we're gonna

1612
01:05:52,429 --> 01:05:58,250
go want to go through each part of that

1613
01:05:54,230 --> 01:06:00,548
a little more slowly as we sort of

1614
01:05:58,250 --> 01:06:02,259
expand out our usage of open G

1615
01:06:00,548 --> 01:06:03,489
to encompass actual rendering of the

1616
01:06:02,259 --> 01:06:06,369
game instead of just splitting of the

1617
01:06:03,489 --> 01:06:08,588
image but that was it and hopefully you

1618
01:06:06,369 --> 01:06:10,749
guys could actually see that like I said

1619
01:06:08,588 --> 01:06:15,670
I don't actually know if you can but

1620
01:06:10,748 --> 01:06:19,688
hopefully you can I'm not sure so yeah

1621
01:06:15,670 --> 01:06:23,559
let's see here let's go ahead and go to

1622
01:06:19,688 --> 01:06:26,318
some Q &amp; A if you guys have any

1623
01:06:23,559 --> 01:06:27,789
questions now would be a great time to

1624
01:06:26,318 --> 01:06:35,969
put a Q :

1625
01:06:27,789 --> 01:06:35,969
up on the screen for me to look at yeah

1626
01:06:56,170 --> 01:06:59,990
wretched freak you use static instead of

1627
01:06:58,460 --> 01:07:01,940
local persister in it yeah that's

1628
01:06:59,989 --> 01:07:08,329
because this is not actually this is not

1629
01:07:01,940 --> 01:07:09,650
staying right in fact I not it's it's so

1630
01:07:08,329 --> 01:07:12,349
not saying we should probably just get

1631
01:07:09,650 --> 01:07:30,680
rid of it right now like we can just do

1632
01:07:12,349 --> 01:07:32,779
this if we want for the moment so yeah

1633
01:07:30,679 --> 01:07:40,849
we just have to do that at some point

1634
01:07:32,780 --> 01:07:41,990
you know this has to happen so I just

1635
01:07:40,849 --> 01:07:43,670
didn't feel like bothering at that

1636
01:07:41,989 --> 01:07:52,789
particular moment so actually when we do

1637
01:07:43,670 --> 01:07:55,240
in it OpenGL as soon as we actually make

1638
01:07:52,789 --> 01:07:57,739
our current thing we can go ahead and

1639
01:07:55,239 --> 01:08:02,319
engine our texture there so as soon as

1640
01:07:57,739 --> 01:08:02,319
we have a context we can Jen our texture

1641
01:08:04,539 --> 01:08:12,009
that's really all that has to happen

1642
01:08:07,960 --> 01:08:12,010
where is that whipped texture

1643
01:08:21,310 --> 01:08:26,319
yeah I just didn't want to do that at

1644
01:08:23,390 --> 01:08:33,529
that time but that's not gonna you know

1645
01:08:26,319 --> 01:08:35,420
that's not gonna stay in there Nixie can

1646
01:08:33,529 --> 01:08:38,630
we verify the vsync somehow oh we have

1647
01:08:35,420 --> 01:08:42,649
not actually requested vsync yet to be

1648
01:08:38,630 --> 01:08:44,420
clear we have not requested vsync yet so

1649
01:08:42,649 --> 01:08:49,429
there's nothing to verify we have not

1650
01:08:44,420 --> 01:08:51,909
asked OpenGL to vsync us that's that's a

1651
01:08:49,430 --> 01:08:51,909
little bit later

1652
01:08:54,560 --> 01:09:04,670
let's see soy sauce the kid are there

1653
01:09:02,539 --> 01:09:07,069
any stretching issues when going from UV

1654
01:09:04,670 --> 01:09:12,230
coordinates to screen coordinates if so

1655
01:09:07,069 --> 01:09:14,960
how would you fix it there are if like I

1656
01:09:12,229 --> 01:09:17,959
said it Maps screens it maps the unit

1657
01:09:14,960 --> 01:09:20,869
cube directly to the window to the

1658
01:09:17,960 --> 01:09:23,989
viewport there so in this case I believe

1659
01:09:20,869 --> 01:09:27,829
we are one-to-one but if you didn't if

1660
01:09:23,988 --> 01:09:29,659
you you would hat you do have to make

1661
01:09:27,829 --> 01:09:32,390
sure that those line up I mean that is

1662
01:09:29,659 --> 01:09:34,099
that it you do have to make sure the

1663
01:09:32,390 --> 01:09:36,980
points you're passing in do line up

1664
01:09:34,100 --> 01:09:38,569
properly so I'm not I'm not sure what

1665
01:09:36,979 --> 01:09:40,669
you mean by necessarily how can you how

1666
01:09:38,569 --> 01:09:45,339
would you fix it you have to make sure

1667
01:09:40,670 --> 01:09:45,338
the math is correct to to line it up but

1668
01:09:50,930 --> 01:09:56,450
let's see here the texture name your

1669
01:09:54,048 --> 01:10:05,569
binding is always zero after the first

1670
01:09:56,449 --> 01:10:17,649
iteration no no it's not why do you say

1671
01:10:05,569 --> 01:10:20,000
that messy oh that I disagree with that

1672
01:10:17,649 --> 01:10:21,559
insofar us I think an old open Jill you

1673
01:10:20,000 --> 01:10:23,238
don't ever need GL gen textures you can

1674
01:10:21,560 --> 01:10:24,800
just pick your own arbitrary intz I

1675
01:10:23,238 --> 01:10:26,629
don't think that's true

1676
01:10:24,800 --> 01:10:38,360
I'm pretty sure you have to call Jen

1677
01:10:26,630 --> 01:10:43,600
textures but we can test it we can

1678
01:10:38,359 --> 01:10:43,599
certainly test it so let's see here

1679
01:10:51,220 --> 01:10:59,300
yeah

1680
01:10:53,420 --> 01:11:02,980
so global blit texture handle let's see

1681
01:10:59,300 --> 01:11:02,980
what happens if I just set it to one

1682
01:11:07,840 --> 01:11:11,949
alright maybe that just works

1683
01:11:14,229 --> 01:11:19,459
are you sure that works I'm not sure if

1684
01:11:17,720 --> 01:11:21,289
that actually works though still because

1685
01:11:19,460 --> 01:11:23,539
that might just be setting the default

1686
01:11:21,289 --> 01:11:26,479
texture always that might just be

1687
01:11:23,539 --> 01:11:28,100
setting texture zero jr. and I mean so

1688
01:11:26,479 --> 01:11:29,569
I'm not sure I still don't actually know

1689
01:11:28,100 --> 01:11:31,070
if that's a fair test you'd have to be

1690
01:11:29,569 --> 01:11:34,569
able to set two textures and pick

1691
01:11:31,069 --> 01:11:36,829
between them if that makes sense

1692
01:11:34,569 --> 01:11:44,949
not sure how to do a good test of that

1693
01:11:36,829 --> 01:11:50,689
at the moment I do know how to test that

1694
01:11:44,949 --> 01:11:53,029
so if that were true I should then be

1695
01:11:50,689 --> 01:11:57,139
able to set a different texture here

1696
01:11:53,029 --> 01:11:59,269
after submitting this one I should be

1697
01:11:57,140 --> 01:12:01,340
able to set like texture ten and get

1698
01:11:59,270 --> 01:12:05,110
white again because that texture doesn't

1699
01:12:01,340 --> 01:12:05,110
have anything in it right

1700
01:12:08,750 --> 01:12:17,890
all right I am like I literally never

1701
01:12:14,539 --> 01:12:22,640
knew that that is totally news to me and

1702
01:12:17,890 --> 01:12:24,560
I have no I so wait are you telling me

1703
01:12:22,640 --> 01:12:29,950
there was never any reason to call gl

1704
01:12:24,560 --> 01:12:33,680
gem textures ever that makes no sense I

1705
01:12:29,949 --> 01:12:37,389
didn't how did I never know that I've

1706
01:12:33,680 --> 01:12:37,390
never heard anyone mentioned that I

1707
01:12:39,010 --> 01:12:45,340
totally I have nothing I'm speechless

1708
01:12:42,909 --> 01:12:47,539
how is that possible

1709
01:12:45,340 --> 01:12:51,980
that look why do they even have Jen

1710
01:12:47,539 --> 01:12:54,350
textures that's very strange wood

1711
01:12:51,979 --> 01:12:56,149
texture filtering GL nearest even occur

1712
01:12:54,350 --> 01:12:57,039
when image and texture size is the same

1713
01:12:56,149 --> 01:13:01,219
as it is now

1714
01:12:57,039 --> 01:13:03,350
yes filtering always occurs so what

1715
01:13:01,220 --> 01:13:05,780
happens is it's always going to do if if

1716
01:13:03,350 --> 01:13:07,520
you set something other than nearest if

1717
01:13:05,779 --> 01:13:11,059
you set GL linear for example to do

1718
01:13:07,520 --> 01:13:12,470
bilinear filtering what it will do is it

1719
01:13:11,060 --> 01:13:14,750
will still apply the bilinear filtering

1720
01:13:12,470 --> 01:13:16,430
and it will just so happen that the

1721
01:13:14,750 --> 01:13:18,109
coefficients of bilinear filtering end

1722
01:13:16,430 --> 01:13:21,260
up to be zero and one

1723
01:13:18,109 --> 01:13:23,539
like zero zero zero one and so you'd

1724
01:13:21,260 --> 01:13:24,800
still get the correct sampling in theory

1725
01:13:23,539 --> 01:13:28,340
assuming the card does it right and

1726
01:13:24,800 --> 01:13:30,829
there's no weird bugs or anything but

1727
01:13:28,340 --> 01:13:33,710
the the filtering is still applied it

1728
01:13:30,829 --> 01:13:39,619
just doesn't actually look like anything

1729
01:13:33,710 --> 01:13:40,850
happened but it's still happening Kerry

1730
01:13:39,619 --> 01:13:42,289
Johansson in your professional career

1731
01:13:40,850 --> 01:13:45,680
what GPU library have you preferred to

1732
01:13:42,289 --> 01:13:46,850
just OpenGL DirectX GLSL etc I tend to

1733
01:13:45,680 --> 01:13:50,480
use OpenGL because it's more

1734
01:13:46,850 --> 01:13:51,710
cross-platform but I don't really like

1735
01:13:50,479 --> 01:13:54,859
any of them I think they're all pretty

1736
01:13:51,710 --> 01:13:57,819
bad they're definitely not how I would

1737
01:13:54,859 --> 01:13:57,819
design it can tell you that

1738
01:14:02,719 --> 01:14:06,510
criminal dragon later on after we

1739
01:14:04,769 --> 01:14:08,219
upgrade to more modern OpenGL with a

1740
01:14:06,510 --> 01:14:09,748
game render into a frame buffer and then

1741
01:14:08,219 --> 01:14:11,760
on to the same triangles or will you

1742
01:14:09,748 --> 01:14:15,238
just have it render directly to the main

1743
01:14:11,760 --> 01:14:17,340
window buffer well I guess that depends

1744
01:14:15,238 --> 01:14:19,498
if you have any post past effects so if

1745
01:14:17,340 --> 01:14:22,469
you have any post fast effects then you

1746
01:14:19,498 --> 01:14:24,210
render the game into a buffer and do

1747
01:14:22,469 --> 01:14:26,670
some effects on that buffer like

1748
01:14:24,210 --> 01:14:28,380
sequentially usually like ping pong or

1749
01:14:26,670 --> 01:14:30,229
not usually ping pong but usually like

1750
01:14:28,380 --> 01:14:32,460
using a buffer chain and then you

1751
01:14:30,229 --> 01:14:36,659
finally the last thing you do is you

1752
01:14:32,460 --> 01:14:40,050
resolve the buffer - to actually display

1753
01:14:36,658 --> 01:14:41,488
it but you you will often render your

1754
01:14:40,050 --> 01:14:44,130
game into something that's not the final

1755
01:14:41,488 --> 01:14:46,158
thing you're gonna flip if that makes

1756
01:14:44,130 --> 01:14:46,159
sense

1757
01:14:53,139 --> 01:14:57,250
let's see here I need to check climb

1758
01:14:55,779 --> 01:14:59,698
even saw a chat clients thing I can't

1759
01:14:57,250 --> 01:14:59,698
see anything

1760
01:15:06,559 --> 01:15:16,750
Oh computers they're so great let's see

1761
01:15:19,779 --> 01:15:27,380
let's see here before you remove the

1762
01:15:25,788 --> 01:15:29,328
unit variable and inline Ashland the

1763
01:15:27,380 --> 01:15:32,409
texture you were always passing zero as

1764
01:15:29,328 --> 01:15:32,408
the name by the way

1765
01:15:32,569 --> 01:15:41,840
oh I see what you're saying yeah okay

1766
01:15:39,380 --> 01:15:42,949
because I forgot to put a static in

1767
01:15:41,840 --> 01:15:43,460
front of the thing is that what you're

1768
01:15:42,948 --> 01:15:48,379
saying

1769
01:15:43,460 --> 01:15:58,130
I maybe forgot to say static which could

1770
01:15:48,380 --> 01:15:59,779
have been true messy Elda so there is no

1771
01:15:58,130 --> 01:16:01,609
way to blitt directly to the back buffer

1772
01:15:59,779 --> 01:16:06,639
anymore

1773
01:16:01,609 --> 01:16:09,769
well it depends what you mean right I

1774
01:16:06,639 --> 01:16:14,150
mean technically that the back buffer

1775
01:16:09,770 --> 01:16:16,250
quote-unquote is on a separate card so

1776
01:16:14,149 --> 01:16:18,049
there's obviously no way for the CPU to

1777
01:16:16,250 --> 01:16:20,899
directly write to it it has to go across

1778
01:16:18,050 --> 01:16:22,309
the PCI bus now in the directdraw days

1779
01:16:20,899 --> 01:16:24,529
what happened is they would map the

1780
01:16:22,309 --> 01:16:26,389
memory so that as you wrote to the

1781
01:16:24,529 --> 01:16:28,698
memory in main memory would it would

1782
01:16:26,389 --> 01:16:30,828
basically you know actually be mapped so

1783
01:16:28,698 --> 01:16:32,509
that would right out to the card so it

1784
01:16:30,828 --> 01:16:34,488
would like right through the PCI bus and

1785
01:16:32,510 --> 01:16:36,380
it would appear that the CPU was writing

1786
01:16:34,488 --> 01:16:37,848
directly to the graphics card but it

1787
01:16:36,380 --> 01:16:39,980
wasn't really writing right as we're

1788
01:16:37,849 --> 01:16:41,480
still going over the PCI bus so nowadays

1789
01:16:39,979 --> 01:16:44,538
since things are so much more

1790
01:16:41,479 --> 01:16:46,158
asynchronous you just that would be a

1791
01:16:44,538 --> 01:16:48,078
very slow way to do it what you'd rather

1792
01:16:46,158 --> 01:16:50,538
do is get it in memory somewhere and

1793
01:16:48,078 --> 01:16:52,908
then tell the guard to come get it right

1794
01:16:50,538 --> 01:16:54,800
and so it went it changed from being

1795
01:16:52,908 --> 01:16:56,210
something that was a direct cpu right to

1796
01:16:54,800 --> 01:16:57,559
being something that was like more of a

1797
01:16:56,210 --> 01:17:00,739
gather from the car because it's just

1798
01:16:57,559 --> 01:17:02,389
way more efficient I don't know that

1799
01:17:00,738 --> 01:17:05,058
there's no way to blitt directly to it

1800
01:17:02,389 --> 01:17:06,319
though presumably if you wrote you could

1801
01:17:05,059 --> 01:17:08,029
still write a direct route driver

1802
01:17:06,319 --> 01:17:10,069
potentially if you wanted to that that

1803
01:17:08,029 --> 01:17:11,750
allowed you to basically map some GPU

1804
01:17:10,069 --> 01:17:14,090
memory and write directly to it it might

1805
01:17:11,750 --> 01:17:16,038
still work it just wouldn't be a very

1806
01:17:14,090 --> 01:17:19,250
efficient way to do it compared to I

1807
01:17:16,038 --> 01:17:29,569
think what they currently do

1808
01:17:19,250 --> 01:17:32,239
if that makes sense is there a

1809
01:17:29,569 --> 01:17:35,149
difference in speed now we use OpenGL to

1810
01:17:32,239 --> 01:17:38,300
move the buffer to the GPU no I mean

1811
01:17:35,149 --> 01:17:39,769
there shouldn't really be a yeah I don't

1812
01:17:38,300 --> 01:17:41,360
think there's gonna be any I mean I

1813
01:17:39,770 --> 01:17:44,450
didn't see any we we didn't really we

1814
01:17:41,359 --> 01:17:45,739
weren't super measuring it but no I mean

1815
01:17:44,449 --> 01:17:47,889
I think it's basically the same it might

1816
01:17:45,739 --> 01:17:49,389
even be a little slower than it was

1817
01:17:47,890 --> 01:17:51,260
before

1818
01:17:49,390 --> 01:17:53,150
because it's a little it's gonna be a

1819
01:17:51,260 --> 01:17:58,760
little less predictable now the way that

1820
01:17:53,149 --> 01:18:03,379
it works so it's it's you know it's it's

1821
01:17:58,760 --> 01:18:05,329
not the greatest way to to get something

1822
01:18:03,380 --> 01:18:08,529
on the screen to render it yourself and

1823
01:18:05,329 --> 01:18:10,640
then hand it off to a graphics library

1824
01:18:08,529 --> 01:18:12,800
but yes I mean you can see right here

1825
01:18:10,640 --> 01:18:15,020
like you kind of oscillates but the

1826
01:18:12,800 --> 01:18:19,670
frame time is something like you know

1827
01:18:15,020 --> 01:18:23,150
between 50 and 60 milliseconds and you

1828
01:18:19,670 --> 01:18:26,170
know we can if we want to get rid of the

1829
01:18:23,149 --> 01:18:30,460
in it and do that just do the blit

1830
01:18:26,170 --> 01:18:35,409
ourselves let's see here

1831
01:18:30,460 --> 01:18:35,409
stretch bits

1832
01:18:45,609 --> 01:18:53,539
yeah so it doesn't look particularly

1833
01:18:47,988 --> 01:18:55,369
different not particularly different I

1834
01:18:53,539 --> 01:18:56,719
guess not too much the other thing you

1835
01:18:55,369 --> 01:18:59,539
have to remember is the double buffer is

1836
01:18:56,719 --> 01:19:03,350
turned off so you guys can see it if I

1837
01:18:59,539 --> 01:19:06,679
was to turn that off right I don't know

1838
01:19:03,350 --> 01:19:08,900
if if if allowing double buffering would

1839
01:19:06,679 --> 01:19:20,420
also improve the speed of things let me

1840
01:19:08,899 --> 01:19:22,460
just check yeah it might so it might be

1841
01:19:20,420 --> 01:19:23,989
that also not having did the the

1842
01:19:22,460 --> 01:19:26,739
concession we're making for streaming

1843
01:19:23,988 --> 01:19:31,089
there to allow the streaming capture

1844
01:19:26,738 --> 01:19:34,388
that that may also be hurting us a bit

1845
01:19:31,090 --> 01:19:34,389
but you know

1846
01:19:40,800 --> 01:19:47,230
Carrie Johansson is there a way you know

1847
01:19:44,170 --> 01:19:53,230
of to optimize PCI transfers between CPU

1848
01:19:47,229 --> 01:19:54,759
and GPU using OpenGL yeah I don't think

1849
01:19:53,229 --> 01:20:00,819
there's actually gonna be anything

1850
01:19:54,760 --> 01:20:02,170
particularly optimized I don't think

1851
01:20:00,819 --> 01:20:04,289
there's very much you could do to

1852
01:20:02,170 --> 01:20:06,699
optimize this particular transfer and

1853
01:20:04,289 --> 01:20:08,199
the reason for that is basically you're

1854
01:20:06,699 --> 01:20:09,699
just sending down a texture and you're

1855
01:20:08,199 --> 01:20:11,738
drawing at once and that's all that's

1856
01:20:09,699 --> 01:20:15,630
happening I think the driver will

1857
01:20:11,738 --> 01:20:15,629
probably do a pretty good job of that

1858
01:20:16,649 --> 01:20:21,369
you know the only thing I can think of

1859
01:20:19,149 --> 01:20:33,849
that you might be able to do is is get

1860
01:20:21,369 --> 01:20:36,369
rid of the extra copy here by well okay

1861
01:20:33,850 --> 01:20:38,800
so let's say that you cared about how

1862
01:20:36,369 --> 01:20:41,260
long this took right here to copy into

1863
01:20:38,800 --> 01:20:43,659
the driver memory you could possibly

1864
01:20:41,260 --> 01:20:45,250
overlap that by doing this on a separate

1865
01:20:43,659 --> 01:20:48,039
thread while you started rendering the

1866
01:20:45,250 --> 01:20:50,229
rest of your stuff right so I don't

1867
01:20:48,039 --> 01:20:52,210
think you could optimize the time that

1868
01:20:50,229 --> 01:20:55,539
it's taking to transfer this really in

1869
01:20:52,210 --> 01:20:58,090
any big way because like apparently and

1870
01:20:55,539 --> 01:21:00,519
this is might be a little bit old but at

1871
01:20:58,090 --> 01:21:04,659
least previously it was actually a

1872
01:21:00,520 --> 01:21:07,470
slower way to go to lock memory on the

1873
01:21:04,659 --> 01:21:10,840
GPU side to lock a region of memory

1874
01:21:07,470 --> 01:21:12,400
write it into there let go and allow it

1875
01:21:10,840 --> 01:21:14,110
to transfer that out that was actually

1876
01:21:12,399 --> 01:21:16,569
slower because it caused what are called

1877
01:21:14,109 --> 01:21:17,859
a synchronization point in the driver

1878
01:21:16,569 --> 01:21:21,369
which is basically saying that the

1879
01:21:17,859 --> 01:21:23,949
driver has to kind of coordinate with

1880
01:21:21,369 --> 01:21:25,000
the GPU at that point to find it bytes

1881
01:21:23,949 --> 01:21:27,519
of memory that's gonna lock down for

1882
01:21:25,000 --> 01:21:28,840
that or whatever and so this was

1883
01:21:27,520 --> 01:21:33,430
actually a faster way to do those

1884
01:21:28,840 --> 01:21:35,619
transfers but while it's doing the copy

1885
01:21:33,430 --> 01:21:38,050
while the driver is taking the text

1886
01:21:35,619 --> 01:21:40,720
image call what you could do is do that

1887
01:21:38,050 --> 01:21:43,329
like we could do this on a thread so all

1888
01:21:40,720 --> 01:21:45,310
of our OpenGL happened on a thread so

1889
01:21:43,329 --> 01:21:47,319
that while we were transferring the

1890
01:21:45,310 --> 01:21:48,670
other image we could be rendering you

1891
01:21:47,319 --> 01:21:51,340
know we could be actually doing work

1892
01:21:48,670 --> 01:21:52,929
like running the game simulation or

1893
01:21:51,340 --> 01:21:54,519
something that so

1894
01:21:52,929 --> 01:21:56,439
while you're not really speeding it up

1895
01:21:54,519 --> 01:21:58,689
you're overlapping it more that could

1896
01:21:56,439 --> 01:22:00,639
potentially be right but again I don't

1897
01:21:58,689 --> 01:22:02,739
think this is not a huge part of our

1898
01:22:00,639 --> 01:22:05,729
time anyway so I'm not sure that's a

1899
01:22:02,738 --> 01:22:05,728
really big deal

1900
01:22:22,159 --> 01:22:26,720
all right I think we are done

1901
01:22:38,599 --> 01:22:42,378
I don't know if this is applicable to

1902
01:22:40,069 --> 01:22:44,539
the last question either just got here

1903
01:22:42,378 --> 01:22:49,309
but geotextile beverage TV could be

1904
01:22:44,538 --> 01:22:51,469
faster than geotextile to D I seriously

1905
01:22:49,309 --> 01:22:53,748
doubt that because you're replacing in

1906
01:22:51,469 --> 01:22:57,979
fact I think it could be slower in this

1907
01:22:53,748 --> 01:23:00,068
case because the card passed a detect

1908
01:22:57,979 --> 01:23:06,048
that you're not replacing the texture

1909
01:23:00,069 --> 01:23:07,879
right so so Shawn just to give you why I

1910
01:23:06,048 --> 01:23:13,338
think that would be a bad idea for this

1911
01:23:07,878 --> 01:23:18,108
although I don't know for sure is so

1912
01:23:13,338 --> 01:23:19,668
tech sub image which you already know

1913
01:23:18,109 --> 01:23:24,798
but I'm just gonna tell it for other

1914
01:23:19,668 --> 01:23:26,059
people so text image 2d just romps over

1915
01:23:24,798 --> 01:23:28,010
the entire thing right

1916
01:23:26,059 --> 01:23:33,708
so it just replaces everything in the

1917
01:23:28,010 --> 01:23:36,079
image text sub image 2d replaces just a

1918
01:23:33,708 --> 01:23:39,889
piece so the rest of the texture stays

1919
01:23:36,078 --> 01:23:42,588
the same so why would I think that this

1920
01:23:39,889 --> 01:23:44,779
one might be faster than this one okay

1921
01:23:42,588 --> 01:23:46,488
the reason is because if you look at

1922
01:23:44,779 --> 01:23:49,128
what's actually going to happen here

1923
01:23:46,488 --> 01:23:52,518
what's going to happen here in terms of

1924
01:23:49,128 --> 01:23:54,019
like the sequence of events right is

1925
01:23:52,519 --> 01:23:58,369
you've got the GPU and you've got the

1926
01:23:54,019 --> 01:24:01,269
CPU the GPU here in this case like I'm

1927
01:23:58,368 --> 01:24:02,478
coming to the CPU I call GL text image

1928
01:24:01,269 --> 01:24:04,760
okay

1929
01:24:02,479 --> 01:24:07,039
just specify an image that's going to

1930
01:24:04,760 --> 01:24:09,048
basically copy things this is that's

1931
01:24:07,038 --> 01:24:11,389
gonna do the copy right then it's gonna

1932
01:24:09,048 --> 01:24:14,628
kick off a transfer of the GPU then it's

1933
01:24:11,389 --> 01:24:16,458
gonna put a fence it's gonna fence right

1934
01:24:14,628 --> 01:24:18,048
so that it knows when that texture is

1935
01:24:16,458 --> 01:24:19,368
done because the texture is actually

1936
01:24:18,048 --> 01:24:21,078
getting used well if that could really

1937
01:24:19,368 --> 01:24:22,639
put a fence probably what it's gonna do

1938
01:24:21,078 --> 01:24:23,868
is it's gonna create it I don't even

1939
01:24:22,639 --> 01:24:25,489
know why I drew this diagram it's gonna

1940
01:24:23,868 --> 01:24:27,018
create a dependency chain let's just

1941
01:24:25,488 --> 01:24:28,338
talk about that way it's gonna create a

1942
01:24:27,019 --> 01:24:30,559
dependency chain and the dependency

1943
01:24:28,338 --> 01:24:36,769
chain looks like this right it looks

1944
01:24:30,559 --> 01:24:39,048
like GL swap buffers at the bottom right

1945
01:24:36,769 --> 01:24:42,289
the swap buffers call depends directly

1946
01:24:39,048 --> 01:24:45,238
on the those primitives that GL begin

1947
01:24:42,288 --> 01:24:48,899
end right

1948
01:24:45,238 --> 01:24:53,578
and that GL begin end depends on that

1949
01:24:48,899 --> 01:24:57,058
texture okay so when the graphics card

1950
01:24:53,578 --> 01:24:59,009
sees GL text sub image what that does is

1951
01:24:57,059 --> 01:25:01,320
that means for frame 1 this is the swap

1952
01:24:59,010 --> 01:25:06,530
buffers on frame 1 let's say or frame 0

1953
01:25:01,319 --> 01:25:09,689
okay and this is the texture on frame 0

1954
01:25:06,529 --> 01:25:11,460
when I call GL Tech's image it knows

1955
01:25:09,689 --> 01:25:14,939
that you're replacing the image entirely

1956
01:25:11,460 --> 01:25:26,429
so on frame the next frame the

1957
01:25:14,939 --> 01:25:29,339
dependency chain looks like this right

1958
01:25:26,429 --> 01:25:31,050
they're totally separate so it's not it

1959
01:25:29,340 --> 01:25:34,590
doesn't have to worry can issue these in

1960
01:25:31,050 --> 01:25:37,019
complete parallel right what happens if

1961
01:25:34,590 --> 01:25:39,599
I do text sub image is the dependency

1962
01:25:37,019 --> 01:25:42,719
chain actually looks like this right it

1963
01:25:39,599 --> 01:25:45,179
says oh I can't use a separate one here

1964
01:25:42,719 --> 01:25:48,029
it's actually this one and I gotta wait

1965
01:25:45,179 --> 01:25:50,998
for this to finish because it's using

1966
01:25:48,029 --> 01:25:58,109
this one before I can do let me draw

1967
01:25:50,998 --> 01:25:59,849
this a little bit better right the

1968
01:25:58,109 --> 01:26:01,828
depending looks like this everyone

1969
01:25:59,849 --> 01:26:04,078
depends on this including this texture

1970
01:26:01,828 --> 01:26:06,179
update because it can update the texture

1971
01:26:04,078 --> 01:26:08,130
till this guy's done so in a sense it

1972
01:26:06,179 --> 01:26:10,559
ends up pointing to here which

1973
01:26:08,130 --> 01:26:15,989
serializes these guys into just a big

1974
01:26:10,559 --> 01:26:17,610
old chain right so now I have a chain

1975
01:26:15,988 --> 01:26:20,609
that's six deep dependency instead of

1976
01:26:17,609 --> 01:26:22,348
two-three deeps right so text some image

1977
01:26:20,609 --> 01:26:23,698
is usually a bad idea if you're just

1978
01:26:22,349 --> 01:26:24,900
replacing the whole image you usually

1979
01:26:23,698 --> 01:26:27,109
don't want to do that because you're

1980
01:26:24,899 --> 01:26:30,498
letting the graphics card fix it right

1981
01:26:27,109 --> 01:26:30,498
if that makes sense

1982
01:26:46,340 --> 01:26:56,190
so yeah yes uh Sean so I don't I don't

1983
01:26:54,149 --> 01:26:57,299
think that's the case I could be wrong

1984
01:26:56,189 --> 01:26:59,729
about that but I don't think that's the

1985
01:26:57,300 --> 01:27:06,600
case I think most drivers would prefer

1986
01:26:59,729 --> 01:27:09,869
it the other way round so yeah but at

1987
01:27:06,600 --> 01:27:13,079
the very least if it was so if GL tech

1988
01:27:09,869 --> 01:27:15,359
sub image 2d actually was faster for

1989
01:27:13,079 --> 01:27:16,890
some reason you would probably still

1990
01:27:15,359 --> 01:27:18,329
want to break the dependency chain so

1991
01:27:16,890 --> 01:27:22,500
you'd probably still want to create two

1992
01:27:18,329 --> 01:27:27,659
textures one for ultra either or like

1993
01:27:22,500 --> 01:27:35,909
even odd parity does that make sense so

1994
01:27:27,659 --> 01:27:38,159
yeah so one thing I can tell you for

1995
01:27:35,909 --> 01:27:40,069
sure for example is you definitely don't

1996
01:27:38,159 --> 01:27:43,500
want to do that with vertex buffers

1997
01:27:40,069 --> 01:27:45,889
right like you definitely don't want to

1998
01:27:43,500 --> 01:27:49,979
do sub range updates of an index buffer

1999
01:27:45,890 --> 01:27:51,210
or a vertex buffer it's way faster if

2000
01:27:49,979 --> 01:27:56,819
you're replacing all of them to just

2001
01:27:51,210 --> 01:27:57,659
have a separate buffer right because you

2002
01:27:56,819 --> 01:28:00,119
just don't want to create the finished

2003
01:27:57,659 --> 01:28:02,069
reigns text image 2d doesn't text sub

2004
01:28:00,119 --> 01:28:03,269
image and text image don't neither they

2005
01:28:02,069 --> 01:28:04,500
don't have to do anything separate but

2006
01:28:03,270 --> 01:28:06,660
it can be implemented sacked ly the same

2007
01:28:04,500 --> 01:28:08,399
in the driver right saying it has to

2008
01:28:06,659 --> 01:28:12,510
allocute storage the texture well that's

2009
01:28:08,399 --> 01:28:15,119
not any that's that's what allows you to

2010
01:28:12,510 --> 01:28:18,000
break the dependency chain right so the

2011
01:28:15,119 --> 01:28:20,309
driver probably understands that and

2012
01:28:18,000 --> 01:28:22,409
will know that it can make a second slop

2013
01:28:20,310 --> 01:28:25,070
the second time it sees the GL texture

2014
01:28:22,409 --> 01:28:30,989
and then it'll have to for that texture

2015
01:28:25,069 --> 01:28:35,699
which is just good right so yeah I'd be

2016
01:28:30,989 --> 01:28:37,920
real surprised but like I said you know

2017
01:28:35,699 --> 01:28:42,329
we'd have to actually time it or ask an

2018
01:28:37,920 --> 01:28:44,010
actual driver person to tell us in this

2019
01:28:42,329 --> 01:28:45,809
case it's not taking enough time as it

2020
01:28:44,010 --> 01:28:47,570
is I think probably for us to even

2021
01:28:45,810 --> 01:28:53,190
notice

2022
01:28:47,569 --> 01:28:55,729
meaning I'm pretty sure that like we

2023
01:28:53,189 --> 01:28:58,609
could switch between them either way

2024
01:28:55,729 --> 01:28:59,988
and we'd never know we'd have to

2025
01:28:58,609 --> 01:29:02,599
actually put in some better timing to

2026
01:28:59,988 --> 01:29:04,609
even tell like the frame times probably

2027
01:29:02,600 --> 01:29:12,949
is too variant right now especially with

2028
01:29:04,609 --> 01:29:14,659
the especially with the I'm not gonna

2029
01:29:12,948 --> 01:29:16,309
bout doing it right now but it's too

2030
01:29:14,659 --> 01:29:19,639
variant right now especially with the

2031
01:29:16,310 --> 01:29:20,960
streaming to really have any idea which

2032
01:29:19,640 --> 01:29:22,460
one of those faster is by switching we'd

2033
01:29:20,960 --> 01:29:27,770
have to do some kind of better timing to

2034
01:29:22,460 --> 01:29:29,329
really even tell quarter Tron at what

2035
01:29:27,770 --> 01:29:30,860
point in the chain of GL commands does

2036
01:29:29,329 --> 01:29:33,319
the card actually get involved command

2037
01:29:30,859 --> 01:29:37,069
dependent driver dependent entirely

2038
01:29:33,319 --> 01:29:39,920
driver dependent as far as I know well

2039
01:29:37,069 --> 01:29:41,420
can card dependent I mean it's it's

2040
01:29:39,920 --> 01:29:44,140
entirely dependent on how they chose to

2041
01:29:41,420 --> 01:29:44,140
optimize things

2042
01:30:01,578 --> 01:30:08,519
all right I'm gonna wrap it up yeah so

2043
01:30:04,859 --> 01:30:10,019
GL text image versus text image if you

2044
01:30:08,520 --> 01:30:12,719
guys want to play with it you probably

2045
01:30:10,020 --> 01:30:14,820
could create a pretty easy test case for

2046
01:30:12,719 --> 01:30:16,920
it

2047
01:30:14,819 --> 01:30:17,939
well I mean this is an okay test case

2048
01:30:16,920 --> 01:30:22,260
just got it you have to put in some

2049
01:30:17,939 --> 01:30:26,029
better timing and run it on a machine

2050
01:30:22,260 --> 01:30:26,030
that's not streaming I think

2051
01:30:38,630 --> 01:30:46,060
all right I'm gonna wrap it up let's go

2052
01:30:43,010 --> 01:30:46,060
ahead and close this down

2053
01:31:00,520 --> 01:31:05,840
that's not quite closed

2054
01:31:03,590 --> 01:31:06,890
all right everybody thank you for

2055
01:31:05,840 --> 01:31:08,060
joining me for another episode of

2056
01:31:06,890 --> 01:31:11,270
handmade hero it's been a pleasure

2057
01:31:08,060 --> 01:31:13,940
coding with you as always if you would

2058
01:31:11,270 --> 01:31:15,680
like to follow along at home you can

2059
01:31:13,939 --> 01:31:17,779
always peer to the game on Hammacher org

2060
01:31:15,680 --> 01:31:19,550
and it comes with a source code so you

2061
01:31:17,779 --> 01:31:21,349
could follow along and for example if

2062
01:31:19,550 --> 01:31:25,190
you'd like to play with timing text

2063
01:31:21,350 --> 01:31:27,460
images 2d verses sub image 2d for

2064
01:31:25,189 --> 01:31:29,629
whatever that's worth you could do that

2065
01:31:27,460 --> 01:31:31,789
there is a forum site you can go to ask

2066
01:31:29,630 --> 01:31:33,079
questions a patreon page we have if you

2067
01:31:31,789 --> 01:31:35,390
wants about the video series and a tweet

2068
01:31:33,079 --> 01:31:37,850
bot if you would like to follow the

2069
01:31:35,390 --> 01:31:40,520
series live it tells you when we're

2070
01:31:37,850 --> 01:31:44,780
going to be live so you can plan your

2071
01:31:40,520 --> 01:31:46,940
whole life around handmade hero we will

2072
01:31:44,779 --> 01:31:48,769
be back next week and I will post the

2073
01:31:46,939 --> 01:31:52,039
schedule to that tweet bot so check it

2074
01:31:48,770 --> 01:31:54,200
during the weekend or Monday morning to

2075
01:31:52,039 --> 01:31:55,729
see when we're going to be live until

2076
01:31:54,199 --> 01:31:57,289
then have a good weekend programming and

2077
01:31:55,729 --> 01:31:59,859
I will see you guys on the Internet take

2078
01:31:57,289 --> 01:31:59,859
it easy everyone

