1
00:00:01,429 --> 00:00:07,049
hello everyone and welcome to hand made

2
00:00:05,759 --> 00:00:10,800
here the show recode a complete game

3
00:00:07,049 --> 00:00:13,380
live on stream right here on Twitch we

4
00:00:10,800 --> 00:00:18,769
actually use no libraries

5
00:00:13,380 --> 00:00:21,929
no engines no n berries and nolÃ© engines

6
00:00:18,769 --> 00:00:25,559
so we're completely engine library free

7
00:00:21,929 --> 00:00:28,410
and all combinations thereof here on

8
00:00:25,559 --> 00:00:30,320
handmade hero and right now we are in

9
00:00:28,410 --> 00:00:33,238
the middle of writing our own asset

10
00:00:30,320 --> 00:00:35,130
processing system why shouldn't a asset

11
00:00:33,238 --> 00:00:37,320
prostitution asset loading system we've

12
00:00:35,130 --> 00:00:39,059
done a bunch of the work over the past

13
00:00:37,320 --> 00:00:41,340
week and we just have a few more things

14
00:00:39,058 --> 00:00:43,979
to finish up before we can actually call

15
00:00:41,340 --> 00:00:45,780
our asset file system a replacement for

16
00:00:43,979 --> 00:00:49,558
loading regular files off the disk

17
00:00:45,780 --> 00:00:52,590
randomly which is what we were doing

18
00:00:49,558 --> 00:00:53,698
before I'd like to get right to it

19
00:00:52,590 --> 00:00:54,719
there's really not much to discuss we

20
00:00:53,698 --> 00:00:56,579
all know what we're doing if you've been

21
00:00:54,719 --> 00:00:59,698
here for the past couple days you know

22
00:00:56,579 --> 00:01:01,320
what we are doing here on day 150 if you

23
00:00:59,698 --> 00:01:03,170
would like to follow along at home with

24
00:01:01,320 --> 00:01:06,510
and you are one of the fellows who has

25
00:01:03,170 --> 00:01:10,290
pre-ordered the source code on handmade

26
00:01:06,510 --> 00:01:13,920
hero org wait a minute why does that say

27
00:01:10,290 --> 00:01:15,240
twitter.com handmade hero that's some

28
00:01:13,920 --> 00:01:16,950
kind of that's some kind of link foo

29
00:01:15,239 --> 00:01:18,629
right there there we go handmade hero

30
00:01:16,950 --> 00:01:21,150
org if you've heard the game on handmade

31
00:01:18,629 --> 00:01:23,908
erode org what you want to do is unzip

32
00:01:21,150 --> 00:01:25,200
day 149 source code that's the source

33
00:01:23,909 --> 00:01:27,118
code I've starting with right now and

34
00:01:25,200 --> 00:01:28,978
that will allow you to follow along with

35
00:01:27,118 --> 00:01:32,099
me at home if that is the sort of thing

36
00:01:28,978 --> 00:01:34,530
that you are into all right so we

37
00:01:32,099 --> 00:01:36,509
already got a test file writ written out

38
00:01:34,530 --> 00:01:38,700
that has all of our assets packed into

39
00:01:36,509 --> 00:01:42,420
it so really all we have to do right now

40
00:01:38,700 --> 00:01:43,829
is actually start using it and in order

41
00:01:42,420 --> 00:01:45,239
to start using it as you can see if we

42
00:01:43,828 --> 00:01:47,578
actually run the game right now we've

43
00:01:45,239 --> 00:01:49,530
essentially got no assets loaded because

44
00:01:47,578 --> 00:01:52,529
we commented out the sort of debug code

45
00:01:49,530 --> 00:01:54,359
we had written to fill our asset table

46
00:01:52,530 --> 00:01:56,129
at runtime so all of the stuff that we

47
00:01:54,359 --> 00:01:57,599
had working with the little hero in here

48
00:01:56,129 --> 00:01:58,890
and the trees and the grass lawn stuff

49
00:01:57,599 --> 00:02:01,289
is not working because it can't get any

50
00:01:58,890 --> 00:02:03,750
assets it doesn't crash which is nice

51
00:02:01,290 --> 00:02:06,090
because our system is pretty swanky that

52
00:02:03,750 --> 00:02:07,618
way but it would be nice if we could get

53
00:02:06,090 --> 00:02:08,939
some of our bitmaps back and of course

54
00:02:07,618 --> 00:02:11,280
the music is not playing either because

55
00:02:08,939 --> 00:02:12,870
that was also one of the assets so what

56
00:02:11,280 --> 00:02:13,360
we want to do now is we want to again

57
00:02:12,870 --> 00:02:14,710
take

58
00:02:13,360 --> 00:02:18,490
more steps toward getting everything

59
00:02:14,710 --> 00:02:20,409
loading off of the asset file we did

60
00:02:18,490 --> 00:02:21,700
yesterday we got the tag array going and

61
00:02:20,409 --> 00:02:24,159
so I'm gonna go ahead and finish up the

62
00:02:21,699 --> 00:02:26,439
other arrays here and we've got two

63
00:02:24,159 --> 00:02:29,199
different other arrays that we have to

64
00:02:26,439 --> 00:02:31,359
actually handle one is the assets right

65
00:02:29,199 --> 00:02:34,839
themselves so let's go ahead and spin

66
00:02:31,360 --> 00:02:38,590
through the assets like so assets asset

67
00:02:34,840 --> 00:02:40,810
count asset index and we're gonna be the

68
00:02:38,590 --> 00:02:43,060
exact same thing here as we did in the

69
00:02:40,810 --> 00:02:44,289
tag array we're gonna pull out two

70
00:02:43,060 --> 00:02:47,259
different things we're gonna pull out

71
00:02:44,289 --> 00:02:49,389
the source which is from the HHA assets

72
00:02:47,259 --> 00:02:51,159
array right and we know again where

73
00:02:49,389 --> 00:02:53,679
those are because all we have to do to

74
00:02:51,159 --> 00:02:54,909
get something in the file if we want to

75
00:02:53,680 --> 00:02:55,840
figure out where the assets array is all

76
00:02:54,909 --> 00:02:57,370
we have to do is start at the beginning

77
00:02:55,840 --> 00:02:58,599
of the file which we've loaded into

78
00:02:57,370 --> 00:03:01,360
memory so we know it's at this address

79
00:02:58,599 --> 00:03:04,659
in memory and jump ahead however far

80
00:03:01,360 --> 00:03:07,570
that the header tells us that particular

81
00:03:04,659 --> 00:03:09,489
array where that particular rail is it's

82
00:03:07,569 --> 00:03:12,310
gonna give us the byte offset into it

83
00:03:09,489 --> 00:03:15,789
right so we can do that I guess we might

84
00:03:12,310 --> 00:03:21,069
as well while we're here also do the

85
00:03:15,789 --> 00:03:22,780
asset type so let's do asset type so and

86
00:03:21,069 --> 00:03:26,049
just get all of these things sort of

87
00:03:22,780 --> 00:03:29,229
prepped and ready so that's gonna be

88
00:03:26,049 --> 00:03:30,129
asset types right so then when we spin

89
00:03:29,229 --> 00:03:32,048
through here

90
00:03:30,129 --> 00:03:33,759
I guess I should leave this to come up

91
00:03:32,049 --> 00:03:36,430
for a second so then when we spin

92
00:03:33,759 --> 00:03:39,819
through here we're gonna have the the

93
00:03:36,430 --> 00:03:42,400
source and the desk right assets assets

94
00:03:39,819 --> 00:03:43,989
so we're gonna be reading from the asset

95
00:03:42,400 --> 00:03:45,480
definition here and then we're going to

96
00:03:43,989 --> 00:03:51,819
be doing something at the destination

97
00:03:45,479 --> 00:03:52,840
with the destination here right let's go

98
00:03:51,819 --> 00:03:54,129
ahead and compile that make sure I

99
00:03:52,840 --> 00:03:55,780
didn't make any mistakes there oops

100
00:03:54,129 --> 00:03:58,120
tag index is no good I think I might

101
00:03:55,780 --> 00:04:00,280
just change that to index let's go ahead

102
00:03:58,120 --> 00:04:04,450
and do it this way so I don't have to

103
00:04:00,280 --> 00:04:07,180
keep changing that there we go

104
00:04:04,449 --> 00:04:09,669
and then we can also we'll also want to

105
00:04:07,180 --> 00:04:12,340
do the same thing when we loop through

106
00:04:09,669 --> 00:04:15,009
the asset type array so we're gonna go

107
00:04:12,340 --> 00:04:18,488
through here and go index equals zero

108
00:04:15,009 --> 00:04:20,560
index less than this time we actually

109
00:04:18,488 --> 00:04:23,439
want to use the header right we want to

110
00:04:20,560 --> 00:04:25,360
use the in fact I don't know to tell you

111
00:04:23,439 --> 00:04:26,620
the truth we may really want to always

112
00:04:25,360 --> 00:04:28,449
use the header

113
00:04:26,620 --> 00:04:30,668
you may want to do header tag count here

114
00:04:28,449 --> 00:04:32,110
header asset count because we may later

115
00:04:30,668 --> 00:04:33,969
start concatenate these things together

116
00:04:32,110 --> 00:04:35,949
so maybe it's a little bit cleaner just

117
00:04:33,970 --> 00:04:37,540
mentally speaking even though we're not

118
00:04:35,949 --> 00:04:39,610
gonna actually deal with this at all at

119
00:04:37,540 --> 00:04:42,610
the moment something you know to think

120
00:04:39,610 --> 00:04:45,310
about so in here right we've got our our

121
00:04:42,610 --> 00:04:46,540
stuff loading now and we just have to

122
00:04:45,310 --> 00:04:49,209
actually do something with it so we've

123
00:04:46,540 --> 00:04:53,889
got our HHA asset type source here as

124
00:04:49,209 --> 00:04:55,149
well there we go and then the desk in

125
00:04:53,889 --> 00:04:56,168
this case is going to be a little bit

126
00:04:55,149 --> 00:04:57,219
different so we're gonna have to play

127
00:04:56,168 --> 00:04:59,049
with that but now that we've got all

128
00:04:57,220 --> 00:05:00,010
that compiling we have our loops that

129
00:04:59,050 --> 00:05:01,900
are spinning through the data that we

130
00:05:00,009 --> 00:05:04,750
actually have so if we want to actually

131
00:05:01,899 --> 00:05:06,519
process these guys right here what we're

132
00:05:04,750 --> 00:05:09,939
gonna have to do is look and see what

133
00:05:06,519 --> 00:05:13,359
what do we actually have for an hhhh a

134
00:05:09,939 --> 00:05:15,550
asset right and you can kind of see the

135
00:05:13,360 --> 00:05:16,870
structure here we've got what the tags

136
00:05:15,550 --> 00:05:19,600
are and those are going to translate

137
00:05:16,870 --> 00:05:23,470
directly right and in fact what I could

138
00:05:19,600 --> 00:05:25,750
do here is also have the asset struct up

139
00:05:23,470 --> 00:05:27,820
so we could take a look at what the one

140
00:05:25,750 --> 00:05:30,879
that we want in memory is right so

141
00:05:27,819 --> 00:05:32,949
there's that so if I want to copy these

142
00:05:30,879 --> 00:05:35,199
right I'm gonna want to first set the

143
00:05:32,949 --> 00:05:37,598
first tag index and I'm gonna want to

144
00:05:35,199 --> 00:05:41,740
set the one pass last tag index like so

145
00:05:37,598 --> 00:05:44,469
right I want to handle those by just

146
00:05:41,740 --> 00:05:45,668
copying them directly from the source

147
00:05:44,470 --> 00:05:48,400
because it's the same data either way

148
00:05:45,668 --> 00:05:52,478
right so I'm gonna go ahead and copy

149
00:05:48,399 --> 00:05:54,429
both of those but then I need to you

150
00:05:52,478 --> 00:05:56,560
know do two different things depending

151
00:05:54,430 --> 00:05:58,990
on whether I've got a sound or I've got

152
00:05:56,560 --> 00:06:01,030
a bitmap right so what I want to do is

153
00:05:58,990 --> 00:06:03,490
take a look at the source and see what

154
00:06:01,029 --> 00:06:05,198
type it is remember we store in here for

155
00:06:03,490 --> 00:06:08,530
each asset in the file we store which

156
00:06:05,199 --> 00:06:10,629
type it was so the type ID is going to

157
00:06:08,529 --> 00:06:14,978
tell us I don't actually remember where

158
00:06:10,629 --> 00:06:16,000
that code is wait that's the asset I

159
00:06:14,978 --> 00:06:20,439
pray that's not what I'm talking about

160
00:06:16,000 --> 00:06:21,639
oh so we don't actually know this is

161
00:06:20,439 --> 00:06:23,288
interesting we didn't actually store

162
00:06:21,639 --> 00:06:24,550
this in the file we only cuz we didn't

163
00:06:23,288 --> 00:06:28,509
actually we don't actually need it when

164
00:06:24,550 --> 00:06:31,120
we actually go to load something so

165
00:06:28,509 --> 00:06:34,860
that's kind of a little bit tricky there

166
00:06:31,120 --> 00:06:37,509
right that's interesting

167
00:06:34,860 --> 00:06:40,000
so maybe I won't actually do what I just

168
00:06:37,509 --> 00:06:40,449
said maybe that's maybe we don't want to

169
00:06:40,000 --> 00:06:41,439
actually

170
00:06:40,449 --> 00:06:43,840
have to actually switch on that because

171
00:06:41,439 --> 00:06:45,639
we don't really need to do that so maybe

172
00:06:43,839 --> 00:06:49,929
what I want to do is just go ahead and

173
00:06:45,639 --> 00:06:51,519
actually take that data directly so if I

174
00:06:49,930 --> 00:06:53,499
look in here I've got my asset and I've

175
00:06:51,519 --> 00:06:54,038
got the bitmap info and the sound info

176
00:06:53,499 --> 00:06:55,960
right

177
00:06:54,038 --> 00:06:57,430
but those bitmap info and sound info

178
00:06:55,959 --> 00:06:58,658
were these old things that we didn't

179
00:06:57,430 --> 00:06:59,769
actually that aren't actually

180
00:06:58,658 --> 00:07:02,019
representative of what we're actually

181
00:06:59,769 --> 00:07:05,848
gonna store for the the stuff now so I

182
00:07:02,019 --> 00:07:08,139
wonder if it's better for our asset to

183
00:07:05,848 --> 00:07:10,149
literally just be one of those HHA

184
00:07:08,139 --> 00:07:12,668
assets like could we do that could we

185
00:07:10,149 --> 00:07:15,489
just have our assets actually just be

186
00:07:12,668 --> 00:07:18,728
the HHA assets directly and I don't

187
00:07:15,490 --> 00:07:20,019
actually know if we can or can't another

188
00:07:18,728 --> 00:07:21,968
way to look at it would be if I want to

189
00:07:20,019 --> 00:07:24,519
take a slightly more baby step I could

190
00:07:21,968 --> 00:07:27,069
do it this way right what would that be

191
00:07:24,519 --> 00:07:28,899
like if I did it this way so let's let's

192
00:07:27,069 --> 00:07:31,778
let's find out what happens if I

193
00:07:28,899 --> 00:07:34,778
recompile that right so if I take a look

194
00:07:31,778 --> 00:07:36,728
here when we do asset sound info when

195
00:07:34,778 --> 00:07:38,740
we're retrieving the sound info right

196
00:07:36,728 --> 00:07:41,408
that would no longer retrieve the actual

197
00:07:38,740 --> 00:07:49,060
sound info that would retrieve retrieve

198
00:07:41,408 --> 00:07:51,748
instead where is that the HHA sound

199
00:07:49,060 --> 00:07:55,449
right get we return this stuff and the

200
00:07:51,749 --> 00:07:57,610
hhhh a bitmap would be would be that now

201
00:07:55,449 --> 00:07:59,649
we could still if I wanted to actually

202
00:07:57,610 --> 00:08:00,879
instead of returning I could actually

203
00:07:59,649 --> 00:08:02,800
build that on the fly but I don't think

204
00:08:00,879 --> 00:08:05,649
I'm going to so let's just see I'm just

205
00:08:02,800 --> 00:08:08,949
gonna see what happens if I actually do

206
00:08:05,649 --> 00:08:10,269
it this way so if I did HHA sound well I

207
00:08:08,949 --> 00:08:12,879
guess that would actually just work

208
00:08:10,269 --> 00:08:14,228
I believe don't really have to do

209
00:08:12,879 --> 00:08:17,310
anything just change which struct it's

210
00:08:14,228 --> 00:08:20,620
returning really so that's pretty easy

211
00:08:17,310 --> 00:08:24,668
and the assets

212
00:08:20,620 --> 00:08:26,769
what is it dot sound assets ID value is

213
00:08:24,668 --> 00:08:28,418
that not why would that not I thought

214
00:08:26,769 --> 00:08:30,579
that's what exactly that that's exactly

215
00:08:28,418 --> 00:08:36,519
what that would be oh right because it's

216
00:08:30,579 --> 00:08:38,288
HHA dot sound yeah so there we go and

217
00:08:36,519 --> 00:08:39,940
then we've got the bitmap same thing

218
00:08:38,288 --> 00:08:42,098
would be happening here right this would

219
00:08:39,940 --> 00:08:46,449
actually be HHA bitmap

220
00:08:42,099 --> 00:08:47,110
it comes back let's see file name that's

221
00:08:46,448 --> 00:08:48,639
true

222
00:08:47,110 --> 00:08:49,870
file name is not going to be that

223
00:08:48,639 --> 00:08:51,519
because we're not actually going to be

224
00:08:49,870 --> 00:08:52,860
calling this anymore

225
00:08:51,519 --> 00:08:55,620
so we will have

226
00:08:52,860 --> 00:08:58,278
I have to actually deal with this this

227
00:08:55,620 --> 00:09:01,459
is essentially not inflected to do

228
00:08:58,278 --> 00:09:04,078
actually do loading here

229
00:09:01,458 --> 00:09:07,729
so what else we got assets sound info

230
00:09:04,078 --> 00:09:09,899
this is again HHA sound like so and

231
00:09:07,730 --> 00:09:15,300
that's going to come out of the HHA

232
00:09:09,899 --> 00:09:19,070
information again to do kc actually do

233
00:09:15,299 --> 00:09:23,549
loading here what else we got

234
00:09:19,070 --> 00:09:25,800
see first tag index so these is just

235
00:09:23,549 --> 00:09:27,809
it's just going to be that right it's

236
00:09:25,799 --> 00:09:32,159
just going to use those directly same

237
00:09:27,809 --> 00:09:33,659
thing here using them directly it's the

238
00:09:32,159 --> 00:09:35,969
thing that came out of the file what is

239
00:09:33,659 --> 00:09:41,549
this first tag index is not a member of

240
00:09:35,970 --> 00:09:43,500
asset oh this is the copy so this this

241
00:09:41,549 --> 00:09:45,449
is not actually this is just the copy so

242
00:09:43,500 --> 00:09:47,610
all we have to do for the copy is just

243
00:09:45,450 --> 00:09:52,680
block copy the whole thing over right

244
00:09:47,610 --> 00:09:56,310
like so alright so then we got asset

245
00:09:52,679 --> 00:09:59,669
sound info that's actually gonna be a JJ

246
00:09:56,309 --> 00:10:00,869
sound now and still should have most of

247
00:09:59,669 --> 00:10:04,019
the stuff that it that it would normally

248
00:10:00,870 --> 00:10:06,990
have prefetch John Craig vary from u3 to

249
00:10:04,019 --> 00:10:11,159
- sound ID that's actually ok because

250
00:10:06,990 --> 00:10:13,379
that is a sound ID right so I can do

251
00:10:11,159 --> 00:10:15,750
something like this next idea to play

252
00:10:13,379 --> 00:10:17,789
although I also could just start I

253
00:10:15,750 --> 00:10:20,549
should probably just actually use sound

254
00:10:17,789 --> 00:10:22,409
ID and bitmap ID in the actual file

255
00:10:20,549 --> 00:10:23,159
there's really no reason not to do it

256
00:10:22,409 --> 00:10:26,069
that way

257
00:10:23,159 --> 00:10:30,480
so inside file formats we could say that

258
00:10:26,070 --> 00:10:32,879
the the bitmap id sound ID stuff there's

259
00:10:30,480 --> 00:10:34,259
no reason I couldn't actually do that in

260
00:10:32,879 --> 00:10:38,009
handmade file formats right because

261
00:10:34,259 --> 00:10:40,948
they're fully specified right so that

262
00:10:38,009 --> 00:10:43,528
seems pretty safe if I wanted to do it

263
00:10:40,948 --> 00:10:45,359
that way that seems like a pretty

264
00:10:43,528 --> 00:10:47,189
reasonable thing to do so I could just

265
00:10:45,360 --> 00:10:52,610
say that sound ID and and off we go

266
00:10:47,190 --> 00:10:57,360
right so then these guys go away yeah

267
00:10:52,610 --> 00:11:02,050
and these just have to actually be done

268
00:10:57,360 --> 00:11:04,300
like this right binary equals

269
00:11:02,049 --> 00:11:05,620
next to the play dot value I guess I

270
00:11:04,299 --> 00:11:08,919
don't even need to use the dot values

271
00:11:05,620 --> 00:11:11,649
anymore on those guys there we go

272
00:11:08,919 --> 00:11:16,209
one thing I do want to know about though

273
00:11:11,649 --> 00:11:17,649
is I'm not sure so I feel like we do

274
00:11:16,210 --> 00:11:21,670
have one other thing which is the whip

275
00:11:17,649 --> 00:11:23,949
over height thing but well we'll take a

276
00:11:21,669 --> 00:11:27,490
look at that in a little bit all right

277
00:11:23,950 --> 00:11:28,150
so back to the story back to our story

278
00:11:27,490 --> 00:11:29,740
as it goes

279
00:11:28,149 --> 00:11:31,600
so as we're loading these things all we

280
00:11:29,740 --> 00:11:34,090
would be doing is putting those those

281
00:11:31,600 --> 00:11:37,509
sources over just copying the the asset

282
00:11:34,090 --> 00:11:44,610
information directly into the thing that

283
00:11:37,509 --> 00:11:46,779
we were going to use there right and

284
00:11:44,610 --> 00:11:48,159
what we're gonna have to do temporarily

285
00:11:46,779 --> 00:11:49,870
in order to make all this work

286
00:11:48,159 --> 00:11:52,179
yeah although we don't want to do this

287
00:11:49,870 --> 00:11:54,340
in the end we won't actually be using

288
00:11:52,179 --> 00:11:56,729
this but what we do want to do too is

289
00:11:54,340 --> 00:11:59,740
have a little u8 star here which is like

290
00:11:56,730 --> 00:12:02,050
hhj contents right we want to store that

291
00:11:59,740 --> 00:12:03,700
because we're gonna need to pull stuff

292
00:12:02,049 --> 00:12:05,259
out of it in the future after the

293
00:12:03,700 --> 00:12:08,500
initialization phase right

294
00:12:05,259 --> 00:12:11,049
so we're gonna actually need to remember

295
00:12:08,500 --> 00:12:14,230
that base of the file and that base of

296
00:12:11,049 --> 00:12:17,019
the file is gonna tell us right where we

297
00:12:14,230 --> 00:12:20,470
can grab the assets out from so we go

298
00:12:17,019 --> 00:12:21,879
through here and we're you know we're

299
00:12:20,470 --> 00:12:23,590
copying everything on I think everything

300
00:12:21,879 --> 00:12:26,289
set we just need to now deal with the

301
00:12:23,590 --> 00:12:27,910
asset type array and remember that asset

302
00:12:26,289 --> 00:12:30,339
type array is a little bit different

303
00:12:27,909 --> 00:12:33,279
than the other arrays in that it just

304
00:12:30,340 --> 00:12:35,680
actually stores sort of a table that

305
00:12:33,279 --> 00:12:37,959
tells us what type of asset we're

306
00:12:35,679 --> 00:12:40,719
dealing with and then where the range

307
00:12:37,960 --> 00:12:44,650
actually was right so what we're gonna

308
00:12:40,720 --> 00:12:49,750
have to do here is our destination right

309
00:12:44,649 --> 00:12:51,309
our asset type so our destination is

310
00:12:49,750 --> 00:12:54,009
actually going to come from a lookup

311
00:12:51,309 --> 00:12:56,589
that it works with the source the

312
00:12:54,009 --> 00:13:00,399
sources type ID right we're gonna say go

313
00:12:56,590 --> 00:13:03,730
to the asset type array and grab out the

314
00:13:00,399 --> 00:13:05,740
entry that is for whatever the one that

315
00:13:03,730 --> 00:13:08,259
this this thing that we're reading out

316
00:13:05,740 --> 00:13:10,570
whatever one it corresponds to right and

317
00:13:08,259 --> 00:13:12,069
so one thing that we would be doing here

318
00:13:10,570 --> 00:13:13,840
generally speaking because we might be

319
00:13:12,070 --> 00:13:15,190
loading a data file that has asset types

320
00:13:13,840 --> 00:13:17,080
we don't know about yet if we're loading

321
00:13:15,190 --> 00:13:19,060
data file from the future I don't think

322
00:13:17,080 --> 00:13:21,460
that's particularly relevant necessarily

323
00:13:19,059 --> 00:13:23,919
but what we want to do is say if it's

324
00:13:21,460 --> 00:13:27,720
less than the asset count that we know

325
00:13:23,919 --> 00:13:29,559
about right that's gonna be a pretty

326
00:13:27,720 --> 00:13:31,389
important thing right

327
00:13:29,559 --> 00:13:33,429
we should probably merge these into the

328
00:13:31,389 --> 00:13:35,439
file format right probably wouldn't you

329
00:13:33,429 --> 00:13:38,709
say that seems like a pretty reasonable

330
00:13:35,440 --> 00:13:41,260
thing to do I don't know though we can

331
00:13:38,710 --> 00:13:42,970
do that later I suppose but anyway you

332
00:13:41,259 --> 00:13:44,139
know we've got that asset count we're

333
00:13:42,970 --> 00:13:45,790
just gonna say we want to make sure

334
00:13:44,139 --> 00:13:48,039
whatever the type is it's less than the

335
00:13:45,789 --> 00:13:49,659
actual asset count that we understand so

336
00:13:48,039 --> 00:13:52,629
that we're not trying to access some

337
00:13:49,659 --> 00:13:54,879
array that we don't know about right and

338
00:13:52,629 --> 00:13:56,620
so then for now I'm gonna put to do you

339
00:13:54,879 --> 00:13:57,909
know support merging eventually we want

340
00:13:56,620 --> 00:13:59,139
to support merging us like that for

341
00:13:57,909 --> 00:14:01,209
right now we're only writing out one

342
00:13:59,139 --> 00:14:03,340
file so we don't really have to worry

343
00:14:01,210 --> 00:14:06,129
about that for our testing so what we're

344
00:14:03,340 --> 00:14:09,399
gonna do here is just go ahead and oops

345
00:14:06,129 --> 00:14:11,700
what was that create that file what

346
00:14:09,399 --> 00:14:14,529
we're gonna do here is just grab

347
00:14:11,700 --> 00:14:16,540
overwrite whatever the asset type stuff

348
00:14:14,529 --> 00:14:18,939
was originally the first you know first

349
00:14:16,539 --> 00:14:20,919
asset index and one-pass lacet last item

350
00:14:18,940 --> 00:14:23,830
asset index we're just gonna go ahead

351
00:14:20,919 --> 00:14:25,929
and overwrite whatever was in there and

352
00:14:23,830 --> 00:14:27,700
we're just going to assume that there

353
00:14:25,929 --> 00:14:29,889
wasn't anything right and we could

354
00:14:27,700 --> 00:14:35,280
assert that that was true right we could

355
00:14:29,889 --> 00:14:38,350
say assert first asset index equals zero

356
00:14:35,279 --> 00:14:40,299
and one pass last asset index equals

357
00:14:38,350 --> 00:14:43,060
zero so that there's like nothing in

358
00:14:40,299 --> 00:14:46,059
that array or whatever so that would

359
00:14:43,059 --> 00:14:47,409
allow us to load everything right and

360
00:14:46,059 --> 00:14:48,069
presumably we'll step through that and

361
00:14:47,409 --> 00:14:50,559
see if it worked

362
00:14:48,070 --> 00:14:52,330
but what's gonna happen then is all of

363
00:14:50,559 --> 00:14:54,250
our slots are still initialized to not

364
00:14:52,330 --> 00:14:57,030
actually have anything in them so once

365
00:14:54,250 --> 00:15:00,730
we actually go to load something right

366
00:14:57,029 --> 00:15:04,899
when we actually do a load grab here I'm

367
00:15:00,730 --> 00:15:08,200
gonna take these guys out right and

368
00:15:04,899 --> 00:15:10,360
recompile oh right but I commented them

369
00:15:08,200 --> 00:15:11,710
out so that's not good anything so once

370
00:15:10,360 --> 00:15:13,870
we come in here right you can see that

371
00:15:11,710 --> 00:15:18,519
we're doing this debug load bitmap work

372
00:15:13,870 --> 00:15:21,100
right what we want to do now is be able

373
00:15:18,519 --> 00:15:22,809
to produce the same results as debug

374
00:15:21,100 --> 00:15:24,759
load bitmap but without actually ever

375
00:15:22,809 --> 00:15:26,409
using the bitmap file just using our

376
00:15:24,759 --> 00:15:28,720
asset file right this is where we used

377
00:15:26,409 --> 00:15:30,100
to load the bitmap file

378
00:15:28,720 --> 00:15:32,170
straight away and do all the work on it

379
00:15:30,100 --> 00:15:34,959
we don't want to do that anymore so we

380
00:15:32,169 --> 00:15:37,028
have work bitmap and that is a loaded

381
00:15:34,958 --> 00:15:39,758
bitmap right that's a that's a loaded

382
00:15:37,028 --> 00:15:42,039
bitmap struck right so that's the bitmap

383
00:15:39,759 --> 00:15:44,589
and what we want to do is we now want to

384
00:15:42,039 --> 00:15:48,188
go ahead and reproduce whatever that

385
00:15:44,589 --> 00:15:50,920
actually had on it to do all the loading

386
00:15:48,188 --> 00:15:52,539
right so how do we do the loading in

387
00:15:50,919 --> 00:15:54,039
this case well we don't except to load

388
00:15:52,539 --> 00:15:56,169
the data because we're sort of cheating

389
00:15:54,039 --> 00:15:58,179
right we already know that we've got all

390
00:15:56,169 --> 00:15:59,620
of the data loaded because we you know

391
00:15:58,179 --> 00:16:01,088
sort of did that for testing purposes we

392
00:15:59,620 --> 00:16:02,169
just loaded the whole asset file in

393
00:16:01,089 --> 00:16:03,459
which is not something we want to do

394
00:16:02,169 --> 00:16:05,259
eventually but that's what we did for

395
00:16:03,458 --> 00:16:07,869
testing purposes so all we really have

396
00:16:05,259 --> 00:16:09,639
to do is go find out what's in loaded

397
00:16:07,870 --> 00:16:11,500
bitmap and how do we reconstruct that

398
00:16:09,639 --> 00:16:13,509
from the data that's in our asset pack

399
00:16:11,500 --> 00:16:16,059
file right so here's the stuff that we

400
00:16:13,509 --> 00:16:17,680
actually need right so we got to fill

401
00:16:16,059 --> 00:16:19,869
out all of these right we got to fill

402
00:16:17,679 --> 00:16:21,789
out every last one of these in order for

403
00:16:19,870 --> 00:16:24,159
our stuff to work properly because the

404
00:16:21,789 --> 00:16:26,620
code is relying on all of these being

405
00:16:24,159 --> 00:16:29,708
valid so how do we figure out all of

406
00:16:26,620 --> 00:16:32,948
these things from what we actually have

407
00:16:29,708 --> 00:16:35,558
in the bitmap file right so let's go

408
00:16:32,948 --> 00:16:39,969
ahead and do that if I come over to

409
00:16:35,558 --> 00:16:42,519
handmade asset we we know that the we've

410
00:16:39,970 --> 00:16:45,309
in theory got the the pit map info

411
00:16:42,519 --> 00:16:48,519
itself here right so what I should be

412
00:16:45,308 --> 00:16:52,149
able to do is just use that that HHA

413
00:16:48,519 --> 00:16:53,500
bitmap structure to figure out all the

414
00:16:52,149 --> 00:16:54,730
things that I need and assuming that we

415
00:16:53,500 --> 00:16:56,350
actually saved everything that we need

416
00:16:54,730 --> 00:16:57,339
that should be pretty easy so here's the

417
00:16:56,350 --> 00:16:58,509
HHA bitmap

418
00:16:57,339 --> 00:16:59,740
if I want to figure out the align

419
00:16:58,509 --> 00:17:01,930
percentage that's pretty easy because

420
00:16:59,740 --> 00:17:04,990
it's right there right it's just it's

421
00:17:01,929 --> 00:17:06,188
literally just stored in the file for us

422
00:17:04,990 --> 00:17:08,769
because we knew that we were gonna need

423
00:17:06,189 --> 00:17:10,959
that so we you know we've got it right

424
00:17:08,769 --> 00:17:13,359
so there it is so that's pretty trivial

425
00:17:10,959 --> 00:17:14,828
how about the width well the width is

426
00:17:13,359 --> 00:17:17,229
right there it's the dimension the

427
00:17:14,828 --> 00:17:19,389
zeroth dimension right oh good thing

428
00:17:17,230 --> 00:17:22,209
we've got the height same thing and we

429
00:17:19,390 --> 00:17:23,409
already said that our convention for the

430
00:17:22,209 --> 00:17:25,240
pitch is it's always going to be the

431
00:17:23,409 --> 00:17:29,140
same right the pitch is always going to

432
00:17:25,240 --> 00:17:32,288
be exactly whatever the pixel size is

433
00:17:29,140 --> 00:17:34,600
times that that first dimension right so

434
00:17:32,288 --> 00:17:36,548
that's already specified then we've got

435
00:17:34,599 --> 00:17:38,259
the align percentage oops I put that in

436
00:17:36,548 --> 00:17:40,119
the wrong place then we've got the width

437
00:17:38,259 --> 00:17:41,648
over height and we know that as well

438
00:17:40,119 --> 00:17:42,339
right because we we know what the

439
00:17:41,648 --> 00:17:43,839
bitmaps width

440
00:17:42,339 --> 00:17:45,759
is it's that and we know what the

441
00:17:43,839 --> 00:17:47,139
bitmaps height is it's this right but

442
00:17:45,759 --> 00:17:48,789
those are integers so I want a

443
00:17:47,140 --> 00:17:51,610
floating-point divide here so I'm just

444
00:17:48,789 --> 00:17:54,819
gonna Lock them up to floats to get that

445
00:17:51,609 --> 00:17:56,889
nice floating point actual specification

446
00:17:54,819 --> 00:17:58,839
flipped over height and then finally for

447
00:17:56,890 --> 00:18:00,640
the memory where's the bitmap coming

448
00:17:58,839 --> 00:18:03,609
from well the bitmaps in that file right

449
00:18:00,640 --> 00:18:06,730
and if you remember we've got this data

450
00:18:03,609 --> 00:18:08,049
offset thing here in the asset itself so

451
00:18:06,730 --> 00:18:10,539
what we need to do is we're gonna need

452
00:18:08,049 --> 00:18:12,849
to pull the asset here right so we got

453
00:18:10,539 --> 00:18:15,009
to be able to do this where we have the

454
00:18:12,849 --> 00:18:19,799
HHA asset or whatever so we're going to

455
00:18:15,009 --> 00:18:21,910
actually need to grab that out as well

456
00:18:19,799 --> 00:18:24,250
from this thing right so we've got the

457
00:18:21,910 --> 00:18:25,870
asset there and then we've got the hhas

458
00:18:24,250 --> 00:18:26,529
at bitmaps a week we've got both of

459
00:18:25,869 --> 00:18:29,709
those things

460
00:18:26,529 --> 00:18:31,660
so the HHA asset has in it the data

461
00:18:29,710 --> 00:18:33,670
offset which says where the bitmap data

462
00:18:31,660 --> 00:18:38,680
was which means that if we were to add

463
00:18:33,670 --> 00:18:40,330
that data offset to our base pointer

464
00:18:38,680 --> 00:18:43,060
which we know where that is right it's

465
00:18:40,329 --> 00:18:45,669
the game it's the the work assets right

466
00:18:43,059 --> 00:18:48,669
it's the it's that thing right there we

467
00:18:45,670 --> 00:18:50,289
stored in at the HHA contents right so

468
00:18:48,670 --> 00:18:51,940
that's the base pointer for the file

469
00:18:50,289 --> 00:18:53,589
that we loaded into memory so we know

470
00:18:51,940 --> 00:18:55,180
that the bitmap is just going to be at

471
00:18:53,589 --> 00:18:56,709
the offset that we said it was so that's

472
00:18:55,180 --> 00:18:58,840
all we need to do to really say okay

473
00:18:56,710 --> 00:19:00,220
there we've quote/unquote loaded it we

474
00:18:58,839 --> 00:19:01,419
don't have to load we don't that you do

475
00:19:00,220 --> 00:19:03,069
the work of loading it because we loaded

476
00:19:01,420 --> 00:19:04,360
the whole thing in before so really all

477
00:19:03,069 --> 00:19:06,990
we're doing is just pointing into the

478
00:19:04,359 --> 00:19:09,759
data that already existed right and

479
00:19:06,990 --> 00:19:12,000
that's pretty much it that's really all

480
00:19:09,759 --> 00:19:16,170
we need to do so once we've got that

481
00:19:12,000 --> 00:19:18,160
then all we have to do is fix the oops

482
00:19:16,170 --> 00:19:20,529
all we have to do is fix the sound

483
00:19:18,160 --> 00:19:22,779
loading to do exactly the same thing

484
00:19:20,529 --> 00:19:25,389
right so let's go ahead and do that

485
00:19:22,779 --> 00:19:27,160
here's the how the sound was loaded and

486
00:19:25,390 --> 00:19:27,820
I don't remember what this loads I have

487
00:19:27,160 --> 00:19:30,310
no idea

488
00:19:27,819 --> 00:19:31,750
looks like loaded sound right so what we

489
00:19:30,309 --> 00:19:34,269
need to do is we need to patch all these

490
00:19:31,750 --> 00:19:36,579
things up in exactly the same way that

491
00:19:34,269 --> 00:19:39,369
we patched up the other stuff right so

492
00:19:36,579 --> 00:19:42,609
now what we want to do is say ok we've

493
00:19:39,369 --> 00:19:45,519
got the sound like so and we need to set

494
00:19:42,609 --> 00:19:47,169
all of this stuff up right so we start

495
00:19:45,519 --> 00:19:48,910
by saying we've got the sound sample

496
00:19:47,170 --> 00:19:50,920
count that's going to be equal to that I

497
00:19:48,910 --> 00:19:55,000
believe we just stored that directly yep

498
00:19:50,920 --> 00:19:56,440
yeah like so that's info sample count

499
00:19:55,000 --> 00:19:58,420
we've got the

500
00:19:56,440 --> 00:20:01,059
the channel count which is also the

501
00:19:58,420 --> 00:20:03,130
exact same thing right and then we want

502
00:20:01,059 --> 00:20:05,139
to probably assert that the sound that

503
00:20:03,130 --> 00:20:08,890
the channel count that we have here is

504
00:20:05,140 --> 00:20:10,930
going to be less than the the array that

505
00:20:08,890 --> 00:20:13,300
we have to put stuff in and then we're

506
00:20:10,930 --> 00:20:14,680
just gonna go ahead and copy out that

507
00:20:13,299 --> 00:20:17,889
data I'm not copping out today I'm sorry

508
00:20:14,680 --> 00:20:20,710
just point to that data so we've got the

509
00:20:17,890 --> 00:20:27,550
channels right for each channel that

510
00:20:20,710 --> 00:20:30,130
this thing has we will set the pointer

511
00:20:27,549 --> 00:20:33,549
to the sound samples equal to whatever

512
00:20:30,130 --> 00:20:35,680
the data offset is in the file and how

513
00:20:33,549 --> 00:20:38,470
do we figure out what that is right well

514
00:20:35,680 --> 00:20:41,320
we start by saying that we know the data

515
00:20:38,470 --> 00:20:44,710
offset for the samples right sample data

516
00:20:41,319 --> 00:20:47,200
offset is going to be whatever the asset

517
00:20:44,710 --> 00:20:48,940
thing said it was right so we've got to

518
00:20:47,200 --> 00:20:51,069
do the same thing that we did up there

519
00:20:48,940 --> 00:20:53,230
which is we still have to remember what

520
00:20:51,069 --> 00:20:55,240
the HHA asset was because that's what's

521
00:20:53,230 --> 00:20:59,680
got it in there and maybe that was dumb

522
00:20:55,240 --> 00:21:03,039
maybe we should have lowered that data

523
00:20:59,680 --> 00:21:04,960
offset down one I don't know but yeah it

524
00:21:03,039 --> 00:21:08,349
doesn't it's not really gonna matter in

525
00:21:04,960 --> 00:21:13,630
any way the point being we've got this

526
00:21:08,349 --> 00:21:16,029
and we've got that right just like we

527
00:21:13,630 --> 00:21:18,310
had before so now we know that we start

528
00:21:16,029 --> 00:21:20,710
wherever it said the data offset was

529
00:21:18,309 --> 00:21:22,960
right and this is gonna be equal to that

530
00:21:20,710 --> 00:21:25,000
same thing we did before we're gonna

531
00:21:22,960 --> 00:21:26,590
take the pointer to the base of the file

532
00:21:25,000 --> 00:21:28,269
I guess you know what why did I cast

533
00:21:26,589 --> 00:21:30,730
that before because we had already set

534
00:21:28,269 --> 00:21:32,639
it up to be the correct thing okay I

535
00:21:30,730 --> 00:21:36,329
didn't cast it good so we're all good

536
00:21:32,640 --> 00:21:36,330
nevermind I take it back

537
00:21:36,400 --> 00:21:38,860
right so what we're gonna do here is

538
00:21:37,990 --> 00:21:40,870
we're just going to start at the base of

539
00:21:38,859 --> 00:21:42,699
the file we're gonna go however far we

540
00:21:40,869 --> 00:21:44,919
think the samples are right

541
00:21:42,700 --> 00:21:46,539
starting at the the correct sample as

542
00:21:44,920 --> 00:21:48,100
indicated by the file for this sound

543
00:21:46,539 --> 00:21:51,460
asset and then we're going to do is

544
00:21:48,099 --> 00:21:53,769
we're gonna move forward by however much

545
00:21:51,460 --> 00:21:56,170
there should have been in this sound

546
00:21:53,769 --> 00:21:58,029
channel right so we know what the sample

547
00:21:56,170 --> 00:22:01,960
count is right we know that the sound

548
00:21:58,029 --> 00:22:04,480
sample count is specified and we also

549
00:22:01,960 --> 00:22:06,610
know how big each sound sample is it's

550
00:22:04,480 --> 00:22:08,740
that big so that's how far we would go

551
00:22:06,609 --> 00:22:10,028
and with that we'll just work to get the

552
00:22:08,740 --> 00:22:12,700
channels cascade

553
00:22:10,028 --> 00:22:14,319
one after the other right so all we

554
00:22:12,700 --> 00:22:16,989
really need to do now is just say all

555
00:22:14,319 --> 00:22:18,968
right that works sound the thing that

556
00:22:16,989 --> 00:22:21,369
we're trying to fill out right loaded

557
00:22:18,969 --> 00:22:23,769
sound all we need to do is now actually

558
00:22:21,368 --> 00:22:26,589
sort of write into that instead of using

559
00:22:23,769 --> 00:22:29,618
the the debug load like we used to and

560
00:22:26,589 --> 00:22:30,878
that should really be just about it I

561
00:22:29,618 --> 00:22:32,378
don't think there's anything else that

562
00:22:30,878 --> 00:22:34,988
we would need to do got to change that

563
00:22:32,378 --> 00:22:36,459
to an in sixteen there and so that's

564
00:22:34,989 --> 00:22:38,499
that's everything now we've probably

565
00:22:36,460 --> 00:22:39,700
made some mistakes when we did that so

566
00:22:38,499 --> 00:22:40,960
we're gonna have some debugging to do

567
00:22:39,700 --> 00:22:42,419
but basically what we've done now is

568
00:22:40,960 --> 00:22:45,788
write all the stuff that we need to do

569
00:22:42,419 --> 00:22:47,769
for testing out that asset file right

570
00:22:45,788 --> 00:22:51,128
and running off of it instead of the

571
00:22:47,769 --> 00:22:54,429
bitmaps and so on or it might just work

572
00:22:51,128 --> 00:22:55,988
the first time that also happens

573
00:22:54,429 --> 00:22:59,080
sometimes in game development and you

574
00:22:55,989 --> 00:23:01,088
never know so yeah our game is back and

575
00:22:59,079 --> 00:23:01,808
that's good to know everything appears

576
00:23:01,088 --> 00:23:04,388
to be there

577
00:23:01,808 --> 00:23:05,888
sounds are playing the sound is

578
00:23:04,388 --> 00:23:08,709
streaming properly the music still

579
00:23:05,888 --> 00:23:12,158
playing so everything appears to have

580
00:23:08,710 --> 00:23:17,710
worked just fine who knows why just the

581
00:23:12,159 --> 00:23:19,089
way it goes sometimes all right well you

582
00:23:17,710 --> 00:23:21,460
win some you lose some and we won some

583
00:23:19,088 --> 00:23:22,778
today so that's always good makes up for

584
00:23:21,460 --> 00:23:25,389
those times when everything goes wrong I

585
00:23:22,778 --> 00:23:29,169
suppose so what do we need to do now

586
00:23:25,388 --> 00:23:31,329
well what we need to do now is remember

587
00:23:29,169 --> 00:23:33,309
the fact that we're loading the entire

588
00:23:31,329 --> 00:23:33,788
asset file at startup which is not at

589
00:23:33,308 --> 00:23:36,098
all

590
00:23:33,788 --> 00:23:38,259
what we would like to do right what we

591
00:23:36,098 --> 00:23:39,968
would rather do because we'd like to

592
00:23:38,259 --> 00:23:41,528
stream our assets and we already wrote

593
00:23:39,969 --> 00:23:42,609
all the code for streaming assets like

594
00:23:41,528 --> 00:23:45,009
we've already got it threaded and

595
00:23:42,608 --> 00:23:47,408
everything all this stuff is set up for

596
00:23:45,009 --> 00:23:50,348
it so what we would like to do is only

597
00:23:47,409 --> 00:23:53,259
load the parts of the asset file that we

598
00:23:50,348 --> 00:23:55,658
need at any given time instead of

599
00:23:53,259 --> 00:23:56,829
loading the whole thing right and that's

600
00:23:55,659 --> 00:23:58,239
gonna involve some work with our

601
00:23:56,829 --> 00:24:00,009
platform layer because at the moment the

602
00:23:58,239 --> 00:24:02,649
only thing we put in the platform layer

603
00:24:00,009 --> 00:24:04,210
was just the ability to load entire

604
00:24:02,648 --> 00:24:12,428
files at once right and we'd like to

605
00:24:04,210 --> 00:24:16,960
stop doing that okay so first things

606
00:24:12,429 --> 00:24:19,028
first let's just briefly run over this

607
00:24:16,960 --> 00:24:22,329
code slightly and see if we want to just

608
00:24:19,028 --> 00:24:23,619
flat load some of it right I was talking

609
00:24:22,329 --> 00:24:26,558
about the flat loading before

610
00:24:23,619 --> 00:24:28,839
and so what I was thinking is I guess we

611
00:24:26,558 --> 00:24:32,528
might as well not over complicate things

612
00:24:28,839 --> 00:24:34,480
since we have asset tag here right what

613
00:24:32,528 --> 00:24:36,788
I'm thinking is maybe we just make it so

614
00:24:34,480 --> 00:24:39,009
that the asset tag is just used directly

615
00:24:36,788 --> 00:24:40,929
the same as it is on disk because I

616
00:24:39,009 --> 00:24:43,929
don't anticipate there being a lot more

617
00:24:40,929 --> 00:24:45,548
stuff happening with asset tags in terms

618
00:24:43,929 --> 00:24:47,830
of annotation that happens at load time

619
00:24:45,548 --> 00:24:50,769
so I'm thinking that maybe we delete

620
00:24:47,829 --> 00:24:53,408
asset tag and we just use HH a tag in

621
00:24:50,769 --> 00:24:55,658
here right so we go ahead and do that

622
00:24:53,409 --> 00:24:59,320
and then everyone who was using asset

623
00:24:55,659 --> 00:25:01,330
tag uses HH a tag instead right if that

624
00:24:59,319 --> 00:25:02,859
makes sense now we could actually I

625
00:25:01,329 --> 00:25:04,658
suppose do that in two different ways

626
00:25:02,859 --> 00:25:07,269
one is we could leave the name asset tag

627
00:25:04,659 --> 00:25:09,100
if we'd rather have that be a thing or

628
00:25:07,269 --> 00:25:10,929
we can switch it to HH a tag I don't

629
00:25:09,099 --> 00:25:13,089
have a personal opinion on that I think

630
00:25:10,929 --> 00:25:15,070
I'm gonna use this notation so that we

631
00:25:13,089 --> 00:25:16,538
can see which things are in files and

632
00:25:15,069 --> 00:25:18,908
which things aren't I think that might

633
00:25:16,538 --> 00:25:20,349
be what I'm gonna try here and if we

634
00:25:18,909 --> 00:25:24,429
don't like that we can always change it

635
00:25:20,349 --> 00:25:26,558
but that's my gut inclination at this

636
00:25:24,429 --> 00:25:29,048
moment in time right so that's what

637
00:25:26,558 --> 00:25:31,000
we're gonna go with so there we go

638
00:25:29,048 --> 00:25:32,700
that I just changed the name there so

639
00:25:31,000 --> 00:25:36,159
now we're just using the asset tag

640
00:25:32,700 --> 00:25:38,440
struck from the file and there it is so

641
00:25:36,159 --> 00:25:40,539
that's all good and now what I'd like to

642
00:25:38,440 --> 00:25:42,100
do is now that we're just pointing to an

643
00:25:40,538 --> 00:25:43,778
array of asset tags what we can do is

644
00:25:42,099 --> 00:25:45,579
once we load it when we do this thing

645
00:25:43,778 --> 00:25:47,380
here what we can do is instead of

646
00:25:45,579 --> 00:25:49,298
allocating space for it we can literally

647
00:25:47,380 --> 00:25:52,028
just use the stuff we loaded out of the

648
00:25:49,298 --> 00:25:53,859
file right so so this would be that and

649
00:25:52,028 --> 00:25:56,980
we'd never have to loop over this at all

650
00:25:53,859 --> 00:25:58,329
ok and so I'm gonna go ahead and delete

651
00:25:56,980 --> 00:25:59,890
that and I believe the to do that says

652
00:25:58,329 --> 00:26:01,028
decide what to do about flat loading

653
00:25:59,890 --> 00:26:04,090
because that's exactly what we're doing

654
00:26:01,028 --> 00:26:06,220
right now so now I run and as you can

655
00:26:04,089 --> 00:26:08,079
see we no longer process the tag array

656
00:26:06,220 --> 00:26:09,159
at all right we no longer a loop over

657
00:26:08,079 --> 00:26:12,129
the tag array but everything still works

658
00:26:09,159 --> 00:26:13,929
because the data on disk is exactly the

659
00:26:12,130 --> 00:26:16,090
data that we want so we can just point

660
00:26:13,929 --> 00:26:19,720
straight into it after we load it and be

661
00:26:16,089 --> 00:26:21,849
done question - can we do that with our

662
00:26:19,720 --> 00:26:23,710
HHA assets well if we take a look at the

663
00:26:21,849 --> 00:26:25,569
way we've done it we've split up our

664
00:26:23,710 --> 00:26:27,730
assets into the asset in the asset slot

665
00:26:25,569 --> 00:26:29,859
and so there's really no reason why we

666
00:26:27,730 --> 00:26:32,470
couldn't do that we could just decide to

667
00:26:29,859 --> 00:26:36,729
go ahead and vaporize asset and then it

668
00:26:32,470 --> 00:26:37,420
becomes HHA asset like so right so let's

669
00:26:36,730 --> 00:26:39,309
go ahead and try

670
00:26:37,420 --> 00:26:42,820
as well can't think of a lot of reason

671
00:26:39,309 --> 00:26:44,319
not to do it so let's go ahead and do it

672
00:26:42,819 --> 00:26:47,950
that way

673
00:26:44,319 --> 00:26:50,049
that would look like this these are now

674
00:26:47,950 --> 00:26:54,750
long no longer have to sort of access

675
00:26:50,049 --> 00:27:04,059
that thing right again do the same thing

676
00:26:54,750 --> 00:27:06,819
HHA asset now and those and we no longer

677
00:27:04,059 --> 00:27:09,970
need to allocate this this will just

678
00:27:06,819 --> 00:27:12,849
point directly into the asset array like

679
00:27:09,970 --> 00:27:15,390
so and again that would get rid of this

680
00:27:12,849 --> 00:27:19,329
entire loop and that's all very nice and

681
00:27:15,390 --> 00:27:21,790
now let's see how we're doing oh good

682
00:27:19,329 --> 00:27:23,559
right and so basically what we've done

683
00:27:21,789 --> 00:27:26,139
there again is just remove two

684
00:27:23,559 --> 00:27:27,669
completely unnecessary things from our

685
00:27:26,140 --> 00:27:29,290
code which was the translation of the

686
00:27:27,670 --> 00:27:31,360
file data in when we really didn't need

687
00:27:29,289 --> 00:27:34,240
to do it right so now what we do is

688
00:27:31,359 --> 00:27:35,859
we're just doing one load to load in all

689
00:27:34,240 --> 00:27:37,539
that stuff and we just point directly

690
00:27:35,859 --> 00:27:41,439
into the buffer after we've loaded it in

691
00:27:37,539 --> 00:27:48,579
right so that seems all all fancy and

692
00:27:41,440 --> 00:27:50,019
good all right so now that we've done

693
00:27:48,579 --> 00:27:50,529
that there's a question of what about

694
00:27:50,019 --> 00:27:52,509
this one

695
00:27:50,529 --> 00:27:54,220
and the answer with that is remember

696
00:27:52,509 --> 00:27:56,980
that one is not something we can flat

697
00:27:54,220 --> 00:27:58,120
load because it's actually going to be

698
00:27:56,980 --> 00:28:01,870
variable right it's going to be

699
00:27:58,119 --> 00:28:03,699
something that we have to sort of

700
00:28:01,869 --> 00:28:05,949
process because it's stored in a

701
00:28:03,700 --> 00:28:08,890
different way it's set up to allow us to

702
00:28:05,950 --> 00:28:11,680
say which things it's adding to so it

703
00:28:08,890 --> 00:28:13,780
doesn't just flat load in there and it's

704
00:28:11,680 --> 00:28:16,000
worth noting that these won't quite do

705
00:28:13,779 --> 00:28:18,609
exactly this flat load in the future

706
00:28:16,000 --> 00:28:20,650
potentially we may allocate a bigger

707
00:28:18,609 --> 00:28:22,329
array of assets than we actually have

708
00:28:20,650 --> 00:28:25,390
because we might have multiple files to

709
00:28:22,329 --> 00:28:27,669
load right so we'll maybe take a look at

710
00:28:25,390 --> 00:28:31,060
that in the future a little bit as well

711
00:28:27,670 --> 00:28:32,800
right so there we go now we're flat

712
00:28:31,059 --> 00:28:35,529
loading those so let's go ahead and push

713
00:28:32,799 --> 00:28:36,940
forward on not just loading the entire

714
00:28:35,529 --> 00:28:38,950
file at once right because right now

715
00:28:36,940 --> 00:28:40,870
what we do is we load that entire file

716
00:28:38,950 --> 00:28:43,380
at once and that's not really what we

717
00:28:40,869 --> 00:28:47,679
want to do what we want to do is

718
00:28:43,380 --> 00:28:50,380
something you know a little more

719
00:28:47,680 --> 00:28:54,190
little more piecemeal we want to be able

720
00:28:50,380 --> 00:28:56,710
to say look this is a giant asset file

721
00:28:54,190 --> 00:28:58,720
it has everything in it I just want you

722
00:28:56,710 --> 00:29:00,130
to load a piece of it any given time and

723
00:28:58,720 --> 00:29:02,710
I'm going to process just that piece

724
00:29:00,130 --> 00:29:04,470
right so now we need a more this is the

725
00:29:02,710 --> 00:29:06,819
part where we define our more realistic

726
00:29:04,470 --> 00:29:08,980
file API the one that we're actually

727
00:29:06,819 --> 00:29:10,359
going to be shipping on so we need to

728
00:29:08,980 --> 00:29:11,920
start actually thinking about it and if

729
00:29:10,359 --> 00:29:14,079
you remember correctly I kind of put

730
00:29:11,920 --> 00:29:15,490
this off when we were doing things we

731
00:29:14,079 --> 00:29:19,029
were building the classroom layer for

732
00:29:15,490 --> 00:29:20,980
precisely the reason that again always

733
00:29:19,029 --> 00:29:23,049
right the usage code first and I knew we

734
00:29:20,980 --> 00:29:25,360
were just nowhere near being ready to

735
00:29:23,049 --> 00:29:27,220
write the usage code so I didn't want to

736
00:29:25,359 --> 00:29:29,019
do anything like that but now we've

737
00:29:27,220 --> 00:29:31,180
arrived at a place where we can write

738
00:29:29,019 --> 00:29:33,970
the thing that actually uses the file

739
00:29:31,180 --> 00:29:36,220
API that we want for our asset loading

740
00:29:33,970 --> 00:29:39,009
and so now is the time to start to think

741
00:29:36,220 --> 00:29:41,410
about exactly what this API should look

742
00:29:39,009 --> 00:29:45,910
like so what am I gonna do right what am

743
00:29:41,410 --> 00:29:48,370
I gonna do now anyone out there who

744
00:29:45,910 --> 00:29:50,680
didn't say write the usage code first

745
00:29:48,369 --> 00:29:53,529
I'd better be a first-time handmaid here

746
00:29:50,680 --> 00:29:56,320
a viewer because you always write the

747
00:29:53,529 --> 00:29:59,289
usage code first that is how you start

748
00:29:56,319 --> 00:30:01,059
at a good place with any API design you

749
00:29:59,289 --> 00:30:04,299
always always always write the usage

750
00:30:01,059 --> 00:30:06,159
code first and I can pretty much tell

751
00:30:04,299 --> 00:30:08,079
you from experience that almost everyone

752
00:30:06,160 --> 00:30:10,509
who designs API is inside their own code

753
00:30:08,079 --> 00:30:13,809
or else we're never follows this advice

754
00:30:10,509 --> 00:30:16,059
and that is why all api's are awful so

755
00:30:13,809 --> 00:30:17,769
right the usage code first what do we

756
00:30:16,059 --> 00:30:21,669
want to do here well let's imagine we're

757
00:30:17,769 --> 00:30:23,589
actually doing the thing that we do want

758
00:30:21,670 --> 00:30:26,110
in the final shipping game right so we

759
00:30:23,589 --> 00:30:28,869
have multiple asset files why do we have

760
00:30:26,109 --> 00:30:31,990
multiple asset files a we're trying to

761
00:30:28,869 --> 00:30:34,359
fit under the fat32 limit so we had we

762
00:30:31,990 --> 00:30:36,819
had to break our giant 16 gigabyte asset

763
00:30:34,359 --> 00:30:38,859
set into multiple chunks thing one two

764
00:30:36,819 --> 00:30:40,450
maybe we had to patch something so we've

765
00:30:38,859 --> 00:30:41,709
got a big asset file and a little tiny

766
00:30:40,450 --> 00:30:44,110
asset file that patches some of the

767
00:30:41,710 --> 00:30:46,210
assets in it or something three we

768
00:30:44,109 --> 00:30:47,679
shipped a DLC that may or may not be

769
00:30:46,210 --> 00:30:49,450
there right so the person may or may not

770
00:30:47,680 --> 00:30:51,519
have ever downloaded the update to the

771
00:30:49,450 --> 00:30:52,750
game and that would just be an

772
00:30:51,519 --> 00:30:54,490
additional file that would come in stuff

773
00:30:52,750 --> 00:30:56,289
like this right so we might have

774
00:30:54,490 --> 00:30:59,109
multiple asset files and what we want to

775
00:30:56,289 --> 00:31:00,639
do is load and merge them right so

776
00:30:59,109 --> 00:31:01,399
what's that going to look like well

777
00:31:00,640 --> 00:31:05,630
we're gonna

778
00:31:01,400 --> 00:31:07,670
something right like a list of files to

779
00:31:05,630 --> 00:31:09,980
load from the operating system right and

780
00:31:07,670 --> 00:31:11,990
in fact I guess we could even do that we

781
00:31:09,980 --> 00:31:15,259
could even sort of speck out what that

782
00:31:11,990 --> 00:31:20,259
API should look like as well we could do

783
00:31:15,259 --> 00:31:25,690
something like you know let's say

784
00:31:20,259 --> 00:31:29,049
platform directory or a platform file

785
00:31:25,690 --> 00:31:35,059
entry or something like this file

786
00:31:29,049 --> 00:31:38,149
entries you know or platform file group

787
00:31:35,059 --> 00:31:41,690
let's say I'm just going to say we get

788
00:31:38,150 --> 00:31:48,650
back a file group we say platform you

789
00:31:41,690 --> 00:31:53,509
know I would like you to get all files

790
00:31:48,650 --> 00:31:55,370
of type right and I pass HHA or

791
00:31:53,509 --> 00:31:58,190
something like this so it's like I want

792
00:31:55,369 --> 00:32:00,979
you to give me all the HHA files that

793
00:31:58,190 --> 00:32:02,000
there are right just give them to me and

794
00:32:00,980 --> 00:32:03,259
again we're not going to be more

795
00:32:02,000 --> 00:32:04,970
explicit than that because this game

796
00:32:03,259 --> 00:32:05,690
doesn't go searching through directories

797
00:32:04,970 --> 00:32:07,190
or anything like that there's just

798
00:32:05,690 --> 00:32:09,140
there's the directory where the game

799
00:32:07,190 --> 00:32:11,690
data lives we're assuming that the

800
00:32:09,140 --> 00:32:12,950
platform layer understands where that is

801
00:32:11,690 --> 00:32:15,049
because it's where the excute Abul was

802
00:32:12,950 --> 00:32:16,670
or it you know it knows because on that

803
00:32:15,049 --> 00:32:18,319
particular platform everything goes in

804
00:32:16,670 --> 00:32:19,759
one particular place or whatever like on

805
00:32:18,319 --> 00:32:21,740
a console for the DVD or what you know

806
00:32:19,759 --> 00:32:22,940
who knows but basically what you do is I

807
00:32:21,740 --> 00:32:24,079
want you to gather all of these files of

808
00:32:22,940 --> 00:32:26,000
type and maybe they're even in different

809
00:32:24,079 --> 00:32:28,639
places maybe the you know like you're on

810
00:32:26,000 --> 00:32:30,079
a console and it knows it gets some from

811
00:32:28,640 --> 00:32:31,670
the hard drive and some from the DVD or

812
00:32:30,079 --> 00:32:33,289
whatever all that stuff we don't want to

813
00:32:31,670 --> 00:32:35,360
care about that in the game because

814
00:32:33,289 --> 00:32:37,369
that's platform specific right what we

815
00:32:35,359 --> 00:32:40,789
do want to say is get us all of those

816
00:32:37,369 --> 00:32:42,859
data files right and we could even have

817
00:32:40,789 --> 00:32:43,849
specifiers for what these are but for

818
00:32:42,859 --> 00:32:45,259
right now we'll just use that string

819
00:32:43,849 --> 00:32:47,959
we'll say we'll pass look like what the

820
00:32:45,259 --> 00:32:49,430
extension would be let's say right so

821
00:32:47,960 --> 00:32:50,900
then what we want to do is we want to go

822
00:32:49,430 --> 00:32:53,120
through all of the files in the group

823
00:32:50,900 --> 00:32:55,400
right we want to say for each one of the

824
00:32:53,119 --> 00:33:00,649
files in the group so we want to do like

825
00:32:55,400 --> 00:33:02,690
platform file you know or probably just

826
00:33:00,650 --> 00:33:06,230
something like index right equals 0

827
00:33:02,690 --> 00:33:10,009
index is less than file group file count

828
00:33:06,230 --> 00:33:13,370
you know something like this plus plus

829
00:33:10,009 --> 00:33:15,609
index and then what we would do is when

830
00:33:13,369 --> 00:33:15,609
we

831
00:33:16,630 --> 00:33:23,330
when we get here we're just gonna say

832
00:33:20,148 --> 00:33:25,219
that we can open any one of these files

833
00:33:23,329 --> 00:33:26,449
that we want so actually you know what

834
00:33:25,220 --> 00:33:28,100
we've got another thing that we want to

835
00:33:26,450 --> 00:33:29,870
do here and again you can see what I'm

836
00:33:28,099 --> 00:33:32,509
doing right I'm thinking through how I

837
00:33:29,869 --> 00:33:35,989
want to use this API and I'm writing the

838
00:33:32,509 --> 00:33:39,740
code that would be the best case for me

839
00:33:35,990 --> 00:33:42,710
as the user of the API first and that's

840
00:33:39,740 --> 00:33:44,419
always where you start so I'm gonna go

841
00:33:42,710 --> 00:33:47,450
here and say that we have an asset file

842
00:33:44,419 --> 00:33:48,740
right and an asset file is going to have

843
00:33:47,450 --> 00:33:52,429
to have some kind of handle that

844
00:33:48,740 --> 00:33:55,849
associates you know that that kind of

845
00:33:52,429 --> 00:33:58,070
tells me right if you will what that

846
00:33:55,849 --> 00:34:00,138
which which asset file I'm talking about

847
00:33:58,069 --> 00:34:07,548
right or something like this something

848
00:34:00,138 --> 00:34:10,128
like this okay and that actually reminds

849
00:34:07,548 --> 00:34:11,989
me that is gonna be kind of interesting

850
00:34:10,128 --> 00:34:13,608
I'm interested to know now that think

851
00:34:11,989 --> 00:34:14,809
about it how we're actually gonna do

852
00:34:13,608 --> 00:34:15,980
some of the loading thing I'm thinking

853
00:34:14,809 --> 00:34:17,719
about an interesting problem that we're

854
00:34:15,980 --> 00:34:20,719
gonna have in the future and I'm not

855
00:34:17,719 --> 00:34:21,980
sure exactly how we would solve it it's

856
00:34:20,719 --> 00:34:24,259
gonna be it's gonna be to see we get

857
00:34:21,980 --> 00:34:25,369
there anyway so I have an asset file and

858
00:34:24,260 --> 00:34:27,290
there's gonna be something like a

859
00:34:25,369 --> 00:34:32,108
platform file handle right there's gonna

860
00:34:27,289 --> 00:34:34,969
be something there that I would use to

861
00:34:32,108 --> 00:34:36,168
reference this file right then I would

862
00:34:34,969 --> 00:34:39,529
say I want to load something out of this

863
00:34:36,168 --> 00:34:42,348
this file whatever right and then in

864
00:34:39,530 --> 00:34:44,089
here I would have at the very top I

865
00:34:42,349 --> 00:34:46,750
would say I've got something like an

866
00:34:44,088 --> 00:34:49,759
asset file count right or a file count

867
00:34:46,750 --> 00:34:53,119
and then I've got an asset file files

868
00:34:49,760 --> 00:34:55,520
right and however many files I opened

869
00:34:53,119 --> 00:34:57,230
there's gonna be an entry in this asset

870
00:34:55,519 --> 00:34:59,750
file and it's gonna have an open handle

871
00:34:57,230 --> 00:35:01,309
to every single one of them right so I

872
00:34:59,750 --> 00:35:02,960
guess really the first thing I would do

873
00:35:01,309 --> 00:35:05,119
is once we get all the files of that

874
00:35:02,960 --> 00:35:08,539
type right I would then fill out this

875
00:35:05,119 --> 00:35:12,190
part of the assets structure right I

876
00:35:08,539 --> 00:35:16,130
would say this is how many files we have

877
00:35:12,190 --> 00:35:21,460
this is the files themselves right and

878
00:35:16,130 --> 00:35:27,430
it's gonna be a push array Reena

879
00:35:21,460 --> 00:35:29,289
file count right and asset file right so

880
00:35:27,429 --> 00:35:31,359
we go ahead and push those on we then go

881
00:35:29,289 --> 00:35:34,599
through every single one of them right

882
00:35:31,360 --> 00:35:36,480
one at a time and we're gonna open them

883
00:35:34,599 --> 00:35:40,119
right we're just gonna open them up and

884
00:35:36,480 --> 00:35:42,369
as part of opening them up you know I

885
00:35:40,119 --> 00:35:47,250
don't know maybe we also in here just

886
00:35:42,369 --> 00:35:49,539
because maybe we store the header right

887
00:35:47,250 --> 00:35:51,820
which gives us all of that information

888
00:35:49,539 --> 00:35:54,099
that we actually need right all of those

889
00:35:51,820 --> 00:35:56,110
offsets and stuff that we actually you

890
00:35:54,099 --> 00:35:58,329
know might might want for loading things

891
00:35:56,110 --> 00:36:00,670
out now it's kind of a little bit

892
00:35:58,329 --> 00:36:02,590
extraneous it's not clear that we

893
00:36:00,670 --> 00:36:05,619
actually really need that to be

894
00:36:02,590 --> 00:36:07,269
persisted so I could do it locally but

895
00:36:05,619 --> 00:36:08,799
you know it's really no big deal so I

896
00:36:07,269 --> 00:36:10,179
think I'll probably just store it for

897
00:36:08,800 --> 00:36:11,800
now and that way we always can kind of

898
00:36:10,179 --> 00:36:15,730
refer back to if we want to or stuff

899
00:36:11,800 --> 00:36:17,560
like that so I push the array on there I

900
00:36:15,730 --> 00:36:21,789
go through here and I'm gonna say for

901
00:36:17,559 --> 00:36:24,639
every asset file right I'm going to take

902
00:36:21,789 --> 00:36:30,219
a look right here we go there's our file

903
00:36:24,639 --> 00:36:32,440
index this could be file index so I go

904
00:36:30,219 --> 00:36:33,939
in here and I take this file and what I

905
00:36:32,440 --> 00:36:36,190
want to do now is I want to open the

906
00:36:33,940 --> 00:36:40,409
file or try to open the file right I

907
00:36:36,190 --> 00:36:40,409
want to see if I can if that makes sense

908
00:36:44,820 --> 00:36:47,970
so that would just be some kind of

909
00:36:46,320 --> 00:36:52,559
called the platform layer which would be

910
00:36:47,969 --> 00:36:54,929
like you know platform open file right

911
00:36:52,559 --> 00:36:57,320
and what we would do is we would pass it

912
00:36:54,929 --> 00:37:00,149
I probably I guess just the file group

913
00:36:57,320 --> 00:37:02,070
and the file index for now I don't know

914
00:37:00,150 --> 00:37:03,599
maybe we would want something a little

915
00:37:02,070 --> 00:37:08,070
bit different than that maybe we would

916
00:37:03,599 --> 00:37:14,970
want something more like file group you

917
00:37:08,070 --> 00:37:17,070
know file group names or something or

918
00:37:14,969 --> 00:37:19,649
files and then we just do it like this

919
00:37:17,070 --> 00:37:22,440
you know I'm not sure something like

920
00:37:19,650 --> 00:37:24,088
that maybe I don't really know but we're

921
00:37:22,440 --> 00:37:28,230
gonna leave it this way for now I think

922
00:37:24,088 --> 00:37:31,650
that's the way we'll we'll do it excuse

923
00:37:28,230 --> 00:37:33,869
me so when we open a file we may get the

924
00:37:31,650 --> 00:37:37,070
file handle we may not so we're gonna

925
00:37:33,869 --> 00:37:40,380
want a way of saying you know platform

926
00:37:37,070 --> 00:37:42,210
is valid or platform file handle is

927
00:37:40,380 --> 00:37:44,730
valid right we're gonna want to be able

928
00:37:42,210 --> 00:37:46,800
to say did it actually open right

929
00:37:44,730 --> 00:37:48,690
did it work and there's another way we

930
00:37:46,800 --> 00:37:50,070
could do that too right we could

931
00:37:48,690 --> 00:37:53,670
actually go in and do something slightly

932
00:37:50,070 --> 00:37:54,809
different but I don't know so well you

933
00:37:53,670 --> 00:37:56,460
know what let me talk about that for a

934
00:37:54,809 --> 00:37:58,139
second we'd want to we do something like

935
00:37:56,460 --> 00:38:00,179
this right we'd say flat pilot is valid

936
00:37:58,139 --> 00:38:02,639
and if so we'd read the header right

937
00:38:00,179 --> 00:38:08,639
we'd go ahead and read the header we'd

938
00:38:02,639 --> 00:38:13,650
say platform read data or read file data

939
00:38:08,639 --> 00:38:16,618
or read data from file right and we

940
00:38:13,650 --> 00:38:19,349
would pass the file handle I'm sorry

941
00:38:16,619 --> 00:38:21,240
that's no that's right we would pass the

942
00:38:19,349 --> 00:38:23,220
file handle we passed the offset we

943
00:38:21,239 --> 00:38:25,529
passed the size of the thing that we

944
00:38:23,219 --> 00:38:28,230
wanted to to actually read which is the

945
00:38:25,530 --> 00:38:30,060
header right in this case and we'd pass

946
00:38:28,230 --> 00:38:32,300
the location that we wanted to read it

947
00:38:30,059 --> 00:38:35,719
to right where we wanted to put the data

948
00:38:32,300 --> 00:38:37,980
so if we were to actually do it this way

949
00:38:35,719 --> 00:38:39,959
now we've got another thing we've got to

950
00:38:37,980 --> 00:38:42,059
do this as well right we need to see

951
00:38:39,960 --> 00:38:43,800
whether this succeeded because maybe you

952
00:38:42,059 --> 00:38:45,119
know in between opening the file and

953
00:38:43,800 --> 00:38:46,920
reading the file it didn't get it or

954
00:38:45,119 --> 00:38:48,809
maybe the files like been truncated and

955
00:38:46,920 --> 00:38:52,079
the petyr's like not they're all there

956
00:38:48,809 --> 00:38:53,369
or something right and we'd have more so

957
00:38:52,079 --> 00:38:55,230
there's more errors here and that sort

958
00:38:53,369 --> 00:38:57,539
of stuff right so what I think I'd

959
00:38:55,230 --> 00:39:01,909
rather do is just not

960
00:38:57,539 --> 00:39:05,699
that and say that we just do this right

961
00:39:01,909 --> 00:39:07,889
files you can just do all the operations

962
00:39:05,699 --> 00:39:09,960
that you want on the file and then at

963
00:39:07,889 --> 00:39:15,389
the end all you have to do is say

964
00:39:09,960 --> 00:39:19,949
platform no errors or something no file

965
00:39:15,389 --> 00:39:22,739
errors and pass it a handle and if

966
00:39:19,949 --> 00:39:25,649
there's ever been an error on that

967
00:39:22,739 --> 00:39:29,129
that's like hasn't been cleared out then

968
00:39:25,650 --> 00:39:32,010
you know it's considered an error this

969
00:39:29,130 --> 00:39:37,910
is basically like you know do we have an

970
00:39:32,010 --> 00:39:37,910
invalid code path yeah I know if we do

971
00:39:41,570 --> 00:39:49,920
come on looks like we do so yeah so you

972
00:39:46,829 --> 00:39:51,840
know if there were errors at all then it

973
00:39:49,920 --> 00:39:53,039
wouldn't do any more processing and it

974
00:39:51,840 --> 00:39:55,410
doesn't matter whether the error was

975
00:39:53,039 --> 00:39:56,940
here or here because let's be honest we

976
00:39:55,409 --> 00:39:58,769
don't care we don't care where the error

977
00:39:56,940 --> 00:40:01,579
was all we know is we didn't get back a

978
00:39:58,769 --> 00:40:05,519
header and we don't really need to know

979
00:40:01,579 --> 00:40:07,199
when that error occurred because we

980
00:40:05,519 --> 00:40:08,670
can't do anything different about it

981
00:40:07,199 --> 00:40:10,649
anyway right there's not like there's

982
00:40:08,670 --> 00:40:12,510
some magical thing that we're going to

983
00:40:10,650 --> 00:40:16,559
be able to do if we can't open the file

984
00:40:12,510 --> 00:40:18,540
we can't open the file right so in here

985
00:40:16,559 --> 00:40:22,799
we probably want to assert and then we

986
00:40:18,539 --> 00:40:26,639
also probably eventually have some way

987
00:40:22,800 --> 00:40:28,590
of notifying users of bogus files right

988
00:40:26,639 --> 00:40:30,119
we might want to be able to put up you

989
00:40:28,590 --> 00:40:32,490
know when we have a little bit more of a

990
00:40:30,119 --> 00:40:36,719
UI or something that comes up message

991
00:40:32,489 --> 00:40:40,739
boxes or something we might want to

992
00:40:36,719 --> 00:40:43,649
notify the user like hey there was an

993
00:40:40,739 --> 00:40:46,489
HHA file in here but it's busted

994
00:40:43,650 --> 00:40:48,930
which is probably not what you wanted

995
00:40:46,489 --> 00:40:50,669
maybe you should check your download or

996
00:40:48,929 --> 00:40:55,529
tell steam to like reinstall the game or

997
00:40:50,670 --> 00:40:57,510
do whatever you know do something to try

998
00:40:55,530 --> 00:40:58,740
and restore this game to working order

999
00:40:57,510 --> 00:41:02,100
because it's probably not working the

1000
00:40:58,739 --> 00:41:04,139
way think it is right so there's that ok

1001
00:41:02,099 --> 00:41:08,059
so that's the way I would like that to

1002
00:41:04,139 --> 00:41:10,949
work if we actually got the stuff ok

1003
00:41:08,059 --> 00:41:11,429
then what I'd say is what we want to do

1004
00:41:10,949 --> 00:41:14,818
here

1005
00:41:11,429 --> 00:41:17,250
we want to sum up the total counts of

1006
00:41:14,818 --> 00:41:19,858
things right because we have tags and we

1007
00:41:17,250 --> 00:41:24,150
have assets so what we want to do is we

1008
00:41:19,858 --> 00:41:25,889
want to actually sort of sum how many of

1009
00:41:24,150 --> 00:41:28,139
each of them they're going to be right

1010
00:41:25,889 --> 00:41:30,690
and the same is probably going to be

1011
00:41:28,139 --> 00:41:32,219
true for the asset type array as well

1012
00:41:30,690 --> 00:41:34,710
like that's a thing that kind of has to

1013
00:41:32,219 --> 00:41:38,939
get merged so we'll have to see exactly

1014
00:41:34,710 --> 00:41:41,838
how we want to do that in order to do

1015
00:41:38,940 --> 00:41:41,838
like our layout

1016
00:41:50,119 --> 00:41:54,140
this will be kind of interesting to do

1017
00:41:52,059 --> 00:41:56,059
we'll probably write a very inefficient

1018
00:41:54,139 --> 00:41:57,199
one first which honestly will probably

1019
00:41:56,059 --> 00:41:58,789
end up flipping because there's only

1020
00:41:57,199 --> 00:42:00,739
gonna be like three or four of these

1021
00:41:58,789 --> 00:42:02,660
files at maximum any time anyway

1022
00:42:00,739 --> 00:42:04,308
probably so the efficiency is not gonna

1023
00:42:02,659 --> 00:42:06,199
matter but it would be interesting file

1024
00:42:04,309 --> 00:42:08,630
it would be interesting problem to think

1025
00:42:06,199 --> 00:42:10,639
about for extra credit if there was such

1026
00:42:08,630 --> 00:42:12,440
thing as credit on him a hero of how you

1027
00:42:10,639 --> 00:42:15,618
might set up these things to be merged

1028
00:42:12,440 --> 00:42:19,028
in a in a expedient fashion let's say

1029
00:42:15,619 --> 00:42:19,028
it's just something to think about

1030
00:42:19,210 --> 00:42:27,318
hi okay here we go

1031
00:42:24,579 --> 00:42:28,670
so when we actually determined that

1032
00:42:27,318 --> 00:42:31,038
there are no errors what we would like

1033
00:42:28,670 --> 00:42:33,559
to do is we would like to sum up some of

1034
00:42:31,039 --> 00:42:36,859
these things right so we would like to

1035
00:42:33,559 --> 00:42:40,579
go ahead and and sum up some stuff so

1036
00:42:36,858 --> 00:42:41,989
we've got you know the tag count and

1037
00:42:40,579 --> 00:42:44,778
what I'd like to do is start the tag

1038
00:42:41,989 --> 00:42:47,689
count at 0 and sum up how many we have

1039
00:42:44,778 --> 00:42:50,920
total in all the files right and the

1040
00:42:47,690 --> 00:42:54,369
same is true of our asset count right

1041
00:42:50,920 --> 00:42:59,150
I'd like to start at 0 and and sum it up

1042
00:42:54,369 --> 00:43:03,470
ok so inside here once we know we have a

1043
00:42:59,150 --> 00:43:06,920
header what we could do is also in there

1044
00:43:03,469 --> 00:43:09,230
try to validate the versions right click

1045
00:43:06,920 --> 00:43:10,519
in here which we may want to do is a

1046
00:43:09,230 --> 00:43:13,880
separate thing just so we could report

1047
00:43:10,518 --> 00:43:20,959
the error a little more cleanly right so

1048
00:43:13,880 --> 00:43:24,789
do something like this probably check

1049
00:43:20,960 --> 00:43:24,789
both of these separately even right

1050
00:43:25,650 --> 00:43:33,940
so assuming that it's a version that we

1051
00:43:28,630 --> 00:43:35,740
understand and you know and it's a an

1052
00:43:33,940 --> 00:43:39,369
actual file that we think we understand

1053
00:43:35,739 --> 00:43:43,719
and here we would have again

1054
00:43:39,369 --> 00:43:44,710
notification stuff to some degree and

1055
00:43:43,719 --> 00:43:46,779
not sure how we want to do that

1056
00:43:44,710 --> 00:43:49,470
eventually but maybe yeah we'll think

1057
00:43:46,780 --> 00:43:51,548
about that pretty far down the line

1058
00:43:49,469 --> 00:43:53,409
assuming all that stuff worked out okay

1059
00:43:51,548 --> 00:43:55,389
then we would just say that you know

1060
00:43:53,409 --> 00:44:00,818
we're gonna sum up how many there are

1061
00:43:55,389 --> 00:44:04,750
right and I probably also want to mark

1062
00:44:00,818 --> 00:44:06,400
the file you know one thing that I would

1063
00:44:04,750 --> 00:44:10,210
want to do is say that the file handle

1064
00:44:06,400 --> 00:44:13,720
itself had an error in these cases mark

1065
00:44:10,210 --> 00:44:17,769
platform mark error or something like

1066
00:44:13,719 --> 00:44:23,879
this platform file error and I would say

1067
00:44:17,769 --> 00:44:26,798
you know what this thing gets messed up

1068
00:44:23,880 --> 00:44:28,240
okay this one we already this is this

1069
00:44:26,798 --> 00:44:30,690
one or is Lux in the case we're checking

1070
00:44:28,239 --> 00:44:37,048
Matt well you know what I could do

1071
00:44:30,690 --> 00:44:37,048
that's pretty interesting actually hmm

1072
00:44:37,298 --> 00:44:41,588
I'm actually thinking that maybe we

1073
00:44:40,298 --> 00:44:52,108
could do that slightly differently as

1074
00:44:41,588 --> 00:44:52,108
well because we could instead do this

1075
00:44:53,130 --> 00:44:56,130
right

1076
00:44:57,010 --> 00:45:04,300
we could do it this way and then we

1077
00:45:02,980 --> 00:45:07,929
don't ever have to deal with more than

1078
00:45:04,300 --> 00:45:09,670
one of those right and these would

1079
00:45:07,929 --> 00:45:10,989
eventually you know be some kind of an

1080
00:45:09,670 --> 00:45:13,780
error message that we would put here

1081
00:45:10,989 --> 00:45:19,989
right it would be like magic HHA file

1082
00:45:13,780 --> 00:45:23,950
has an invalid magic value or something

1083
00:45:19,989 --> 00:45:27,039
like that you know or HHH file is of a

1084
00:45:23,949 --> 00:45:29,529
later version or something you know who

1085
00:45:27,039 --> 00:45:30,759
knows we put some we'd we'd make this

1086
00:45:29,530 --> 00:45:32,859
probably go through some kind of system

1087
00:45:30,760 --> 00:45:34,660
that we report errors eventually but you

1088
00:45:32,858 --> 00:45:37,210
know something like that just to give

1089
00:45:34,659 --> 00:45:38,500
you the idea that way the aerosol go

1090
00:45:37,210 --> 00:45:40,269
through the same system so we only check

1091
00:45:38,500 --> 00:45:43,059
the error once eventually at the end and

1092
00:45:40,269 --> 00:45:44,619
then we desert here you know if it was

1093
00:45:43,059 --> 00:45:47,079
wrong the asserts obviously won't

1094
00:45:44,619 --> 00:45:48,430
compile into the game in the final

1095
00:45:47,079 --> 00:45:50,199
release version so the user would never

1096
00:45:48,429 --> 00:45:51,730
get an assert but we would get one so

1097
00:45:50,199 --> 00:45:53,500
for our debugging purposes it would stop

1098
00:45:51,730 --> 00:45:55,210
us immediately and we'd be able to see

1099
00:45:53,500 --> 00:45:57,250
what the problem was at that point

1100
00:45:55,210 --> 00:45:59,470
because obviously we shouldn't ever have

1101
00:45:57,250 --> 00:46:00,489
this problem this is this is problems

1102
00:45:59,469 --> 00:46:02,349
that are happening only when there's a

1103
00:46:00,489 --> 00:46:06,219
corrupt files or bugs in our fire

1104
00:46:02,349 --> 00:46:08,769
reading code so that's what that would

1105
00:46:06,219 --> 00:46:14,969
look like right

1106
00:46:08,769 --> 00:46:14,969
and that all seems pretty good right

1107
00:46:16,380 --> 00:46:26,349
that all seems pretty good so let's see

1108
00:46:23,199 --> 00:46:29,589
a couple of the things we may want to do

1109
00:46:26,349 --> 00:46:35,170
there but let's see so if I do that I do

1110
00:46:29,590 --> 00:46:37,900
all that reading right I think now I'm

1111
00:46:35,170 --> 00:46:41,320
got enough information to actually

1112
00:46:37,900 --> 00:46:45,789
allocate the arrays properly right

1113
00:46:41,320 --> 00:46:47,890
I've got asset slots and tags right and

1114
00:46:45,789 --> 00:46:52,090
these are all going to be push array

1115
00:46:47,889 --> 00:46:54,509
stuff oops these are all going to be

1116
00:46:52,090 --> 00:46:54,510
push array

1117
00:46:55,030 --> 00:47:06,230
to create what we need in terms of

1118
00:47:03,619 --> 00:47:07,969
storage so we've counted up how much we

1119
00:47:06,230 --> 00:47:11,050
need to store the data from all the

1120
00:47:07,969 --> 00:47:14,359
files and then we are going to allocate

1121
00:47:11,050 --> 00:47:19,570
basically blocks where we can put all

1122
00:47:14,360 --> 00:47:22,519
the data right so if we want to do that

1123
00:47:19,570 --> 00:47:25,580
after we finish we need to actually load

1124
00:47:22,519 --> 00:47:27,739
the data in to those locations so then

1125
00:47:25,579 --> 00:47:30,230
we would have another loop through our

1126
00:47:27,739 --> 00:47:32,719
files right and I guess I should

1127
00:47:30,230 --> 00:47:34,400
probably change this to be that so then

1128
00:47:32,719 --> 00:47:38,719
we would have another loop through our

1129
00:47:34,400 --> 00:47:40,099
files where we would actually work with

1130
00:47:38,719 --> 00:47:41,779
them and you know what we might want to

1131
00:47:40,099 --> 00:47:44,599
do here too we might want to do

1132
00:47:41,780 --> 00:47:51,040
something along the lines of begin

1133
00:47:44,599 --> 00:47:57,159
platform begin all files of type right

1134
00:47:51,039 --> 00:48:02,259
or get all files of type begin and then

1135
00:47:57,159 --> 00:48:06,529
platform get all files of type end right

1136
00:48:02,260 --> 00:48:08,840
because the OS may require resources to

1137
00:48:06,530 --> 00:48:11,630
do this so it's kind of like you know a

1138
00:48:08,840 --> 00:48:14,030
thing where once we've opened the files

1139
00:48:11,630 --> 00:48:15,829
we don't need it to waste any more

1140
00:48:14,030 --> 00:48:17,510
resources on that list of files so I

1141
00:48:15,829 --> 00:48:19,789
just want to give the operating system

1142
00:48:17,510 --> 00:48:24,050
layer the opportunity to deal with that

1143
00:48:19,789 --> 00:48:26,269
gracefully right so in here we do push

1144
00:48:24,050 --> 00:48:28,580
arrays to get the slots that we need and

1145
00:48:26,269 --> 00:48:30,679
then we just go through and actually

1146
00:48:28,579 --> 00:48:32,929
load all of the data out right we load

1147
00:48:30,679 --> 00:48:36,259
all the data that we actually want to

1148
00:48:32,929 --> 00:48:39,289
load into the locations where we want to

1149
00:48:36,260 --> 00:48:43,340
load them right so we'd have like a set

1150
00:48:39,289 --> 00:48:48,050
index and/or asset count here right and

1151
00:48:43,340 --> 00:48:49,550
tag count here and then at the end after

1152
00:48:48,050 --> 00:48:52,870
we loaded them all we would want to do

1153
00:48:49,550 --> 00:48:56,030
an assert that the asset count equals

1154
00:48:52,869 --> 00:48:58,130
the assets asset count make sure we

1155
00:48:56,030 --> 00:49:04,070
loaded as many as we said we were going

1156
00:48:58,130 --> 00:49:05,869
to load right and so this gets back to

1157
00:49:04,070 --> 00:49:08,380
sort of the the sort of strange thing I

1158
00:49:05,869 --> 00:49:08,380
was talking about before

1159
00:49:09,170 --> 00:49:15,960
give me I'm gonna do this in a very

1160
00:49:12,360 --> 00:49:18,900
inefficient way what I'm gonna do is I'm

1161
00:49:15,960 --> 00:49:22,079
gonna say since we care about organizing

1162
00:49:18,900 --> 00:49:25,230
things by asset type I'm going to say

1163
00:49:22,079 --> 00:49:26,849
that we have an asset type ID right that

1164
00:49:25,230 --> 00:49:30,059
we loop through all of the asset type

1165
00:49:26,849 --> 00:49:33,529
IDs that we actually have first right so

1166
00:49:30,059 --> 00:49:33,529
we go through all of the asset type

1167
00:49:33,829 --> 00:49:39,420
things we have like so so I go through

1168
00:49:37,289 --> 00:49:42,289
every asset type ID and for every asset

1169
00:49:39,420 --> 00:49:48,119
type ID I go through all the files right

1170
00:49:42,289 --> 00:49:53,070
and I look to see which files have

1171
00:49:48,119 --> 00:49:57,389
assets of that type right and I can do

1172
00:49:53,070 --> 00:50:00,240
this in a super janky way which is what

1173
00:49:57,389 --> 00:50:02,639
I'll do first this whole thing is pretty

1174
00:50:00,239 --> 00:50:04,259
janky and this is what I said like it'll

1175
00:50:02,639 --> 00:50:06,059
probably still execute extraordinarily

1176
00:50:04,260 --> 00:50:08,490
fast anyway because there just won't be

1177
00:50:06,059 --> 00:50:10,289
very many files and so I don't know that

1178
00:50:08,489 --> 00:50:11,279
we'll ever fix it but point being you

1179
00:50:10,289 --> 00:50:12,119
know it's something to think about it'd

1180
00:50:11,280 --> 00:50:13,110
be interesting to think about how to

1181
00:50:12,119 --> 00:50:14,639
write this in a way that wasn't

1182
00:50:13,110 --> 00:50:20,970
brain-dead right in fact I might do to

1183
00:50:14,639 --> 00:50:24,089
do exercise for the reader how would you

1184
00:50:20,969 --> 00:50:30,980
do this in a way that's scaled

1185
00:50:24,090 --> 00:50:30,980
gracefully to hundreds of asset files

1186
00:50:32,539 --> 00:50:43,949
right or more or however many so what

1187
00:50:42,480 --> 00:50:46,199
I'm gonna do here is say alright so for

1188
00:50:43,949 --> 00:50:48,689
every asset type ID I want to go pull

1189
00:50:46,199 --> 00:50:50,759
out all of the assets in the file that

1190
00:50:48,690 --> 00:50:54,599
are of that asset type ID and put them

1191
00:50:50,760 --> 00:50:58,230
so that they're continuous in my array

1192
00:50:54,599 --> 00:51:01,409
so I'm like I'm ik merging right all of

1193
00:50:58,230 --> 00:51:03,690
them together if that makes sense yeah

1194
00:51:01,409 --> 00:51:10,170
so hopefully that's you know relatively

1195
00:51:03,690 --> 00:51:12,840
clear so if I want to do that what would

1196
00:51:10,170 --> 00:51:17,159
I do here the first thing I would do I

1197
00:51:12,840 --> 00:51:17,880
probably would need HHA asset type right

1198
00:51:17,159 --> 00:51:20,369
asset

1199
00:51:17,880 --> 00:51:22,530
type array I would probably want to

1200
00:51:20,369 --> 00:51:24,809
actually load the asset type array for

1201
00:51:22,530 --> 00:51:26,460
each asset file and really we don't need

1202
00:51:24,809 --> 00:51:29,429
to keep this around so I should probably

1203
00:51:26,460 --> 00:51:31,650
be putting these in a transient a fully

1204
00:51:29,429 --> 00:51:33,269
transient arena but that's something we

1205
00:51:31,650 --> 00:51:36,139
haven't really gotten to yet so I should

1206
00:51:33,269 --> 00:51:41,820
do something like here to do if we ever

1207
00:51:36,139 --> 00:51:45,349
do thread sacks then there are asset

1208
00:51:41,820 --> 00:51:45,350
well actually gonna put it in here right

1209
00:51:46,280 --> 00:51:53,100
if we ever do thread sacks asset type

1210
00:51:50,219 --> 00:52:05,639
array doesn't actually need to be kept

1211
00:51:53,099 --> 00:52:07,349
here right that makes sense okay so when

1212
00:52:05,639 --> 00:52:10,949
we come through here and do this little

1213
00:52:07,349 --> 00:52:12,989
dance right what I'm going to do is say

1214
00:52:10,949 --> 00:52:14,879
I've got this asset type array I'm going

1215
00:52:12,989 --> 00:52:18,359
to assume that in here we would load

1216
00:52:14,880 --> 00:52:20,760
that array right so I'm gonna assume in

1217
00:52:18,360 --> 00:52:24,630
here that we would go ahead and and and

1218
00:52:20,760 --> 00:52:26,070
load it in I do something like platform

1219
00:52:24,630 --> 00:52:28,559
read data from file from this file

1220
00:52:26,070 --> 00:52:30,830
handle it would be at the file header

1221
00:52:28,559 --> 00:52:34,980
location writes a file header asset

1222
00:52:30,829 --> 00:52:37,829
types right and the size of it is going

1223
00:52:34,980 --> 00:52:44,010
to be however many there were times the

1224
00:52:37,829 --> 00:52:47,759
size of an asset an hhas s type right so

1225
00:52:44,010 --> 00:52:51,660
it would be like file header asset type

1226
00:52:47,760 --> 00:52:53,640
count right so something like that and

1227
00:52:51,659 --> 00:52:56,879
that would read into the asset type

1228
00:52:53,639 --> 00:53:01,819
array and the asset type array I guess I

1229
00:52:56,880 --> 00:53:07,970
should make this a size right that's it

1230
00:53:01,820 --> 00:53:10,619
type array size it's gonna be this guy

1231
00:53:07,969 --> 00:53:15,418
how big it is

1232
00:53:10,619 --> 00:53:17,849
and in it goes right so what I need to

1233
00:53:15,418 --> 00:53:20,219
do is I need to allocate space for the

1234
00:53:17,849 --> 00:53:21,749
asset types and of course I can't do

1235
00:53:20,219 --> 00:53:23,969
that till I've actually read the header

1236
00:53:21,748 --> 00:53:26,668
in right I can't do that till I've read

1237
00:53:23,969 --> 00:53:29,849
read the header in and again if I want

1238
00:53:26,668 --> 00:53:31,708
to I can sort of do this in all in an

1239
00:53:29,849 --> 00:53:35,609
entirely incremental way right I can say

1240
00:53:31,708 --> 00:53:37,108
that the file header I can just make

1241
00:53:35,608 --> 00:53:40,168
sure that the file header itself is

1242
00:53:37,108 --> 00:53:43,558
zeroed at the beginning I assume you

1243
00:53:40,168 --> 00:53:44,818
have a zero struck do we and actually

1244
00:53:43,559 --> 00:53:47,579
remember if we ever implemented that

1245
00:53:44,818 --> 00:53:49,469
you're a struct yeah

1246
00:53:47,579 --> 00:53:51,119
so we can just make sure that the header

1247
00:53:49,469 --> 00:53:52,528
is zeroed at the beginning we can then

1248
00:53:51,119 --> 00:53:53,759
do the read we don't have to check to

1249
00:53:52,528 --> 00:53:55,858
see whether the read succeeded or failed

1250
00:53:53,759 --> 00:53:58,248
because we don't care we can then go

1251
00:53:55,858 --> 00:54:02,880
ahead and set the asset type array right

1252
00:53:58,248 --> 00:54:06,748
to be whatever that size is right so we

1253
00:54:02,880 --> 00:54:10,798
can just do push array like so and off

1254
00:54:06,748 --> 00:54:17,278
we go so we would do asset type of race

1255
00:54:10,798 --> 00:54:22,159
size or strike push size rather HHA

1256
00:54:17,278 --> 00:54:25,739
asset type we do a push of that size

1257
00:54:22,159 --> 00:54:27,809
from whatever our arena is which to be

1258
00:54:25,739 --> 00:54:31,380
honest I don't remember what it actually

1259
00:54:27,809 --> 00:54:32,759
is just the called arena there we go so

1260
00:54:31,380 --> 00:54:37,559
that would give us face we'd then read

1261
00:54:32,759 --> 00:54:41,759
it in and that would be that right so

1262
00:54:37,559 --> 00:54:42,929
off we go yeah I guess I can't really do

1263
00:54:41,759 --> 00:54:44,009
much compelling here we're getting close

1264
00:54:42,929 --> 00:54:45,509
to the end of the stream so I should

1265
00:54:44,009 --> 00:54:47,309
probably go ahead and nerf some of these

1266
00:54:45,509 --> 00:54:48,358
guys out so we don't leave ourselves in

1267
00:54:47,309 --> 00:54:51,269
a non compounding state but we're

1268
00:54:48,358 --> 00:54:53,548
getting closer so I'd read those in and

1269
00:54:51,268 --> 00:54:56,968
then in here when I loop over them right

1270
00:54:53,548 --> 00:55:00,630
I would go ahead and say okay for each

1271
00:54:56,969 --> 00:55:03,659
file I'm just gonna go through its asset

1272
00:55:00,630 --> 00:55:07,229
array and see if it has any of this type

1273
00:55:03,659 --> 00:55:10,769
right so I'm gonna do something like you

1274
00:55:07,228 --> 00:55:13,228
know if if the source type ID equals the

1275
00:55:10,768 --> 00:55:15,268
asset type ID right and we could we

1276
00:55:13,228 --> 00:55:19,408
could call this like desta type ID right

1277
00:55:15,268 --> 00:55:21,658
desk type ID then I'm going to do the

1278
00:55:19,409 --> 00:55:23,910
block load of its assets into this

1279
00:55:21,659 --> 00:55:25,559
location right

1280
00:55:23,909 --> 00:55:30,000
really pretty straightforward if that

1281
00:55:25,559 --> 00:55:31,260
makes sense very very simple and there's

1282
00:55:30,000 --> 00:55:32,338
one other thing that we probably would

1283
00:55:31,260 --> 00:55:34,589
want to do actually now I'm thinking

1284
00:55:32,338 --> 00:55:39,960
about it as we do this interesting which

1285
00:55:34,588 --> 00:55:44,519
is we would want to do a tag tag base so

1286
00:55:39,960 --> 00:55:46,409
remember the tag arrays are by index so

1287
00:55:44,519 --> 00:55:48,210
all of the assets in one file are

1288
00:55:46,409 --> 00:55:52,259
assuming that their tag array starts at

1289
00:55:48,210 --> 00:55:55,440
0 but it won't start at 0 when we

1290
00:55:52,260 --> 00:55:58,200
actually concatenate them together so

1291
00:55:55,440 --> 00:56:01,559
we'll have to rebase the assets tags as

1292
00:55:58,199 --> 00:56:03,358
we go through in order to make them all

1293
00:56:01,559 --> 00:56:05,160
line up in the tag array that's kind of

1294
00:56:03,358 --> 00:56:06,690
annoying when you think about it because

1295
00:56:05,159 --> 00:56:09,058
it does mean that we will have to touch

1296
00:56:06,690 --> 00:56:11,068
the assets trucks onload which I would

1297
00:56:09,059 --> 00:56:14,789
have preferred not to do right if that

1298
00:56:11,068 --> 00:56:16,639
makes sense I would have preferred to be

1299
00:56:14,789 --> 00:56:18,809
able to just flat load it and be done

1300
00:56:16,639 --> 00:56:20,519
but it looks like there would be one

1301
00:56:18,809 --> 00:56:24,119
thing we'd have to touch which is to

1302
00:56:20,519 --> 00:56:29,489
slide the offset for the tags over

1303
00:56:24,119 --> 00:56:32,039
basically now there is so so that could

1304
00:56:29,489 --> 00:56:37,679
mean that there is a better way that we

1305
00:56:32,039 --> 00:56:38,910
should do our asset stuff although no it

1306
00:56:37,679 --> 00:56:40,618
still in me then it would be variable

1307
00:56:38,909 --> 00:56:42,449
size so I think that's probably still

1308
00:56:40,619 --> 00:56:45,720
gonna be the the easiest one for us to

1309
00:56:42,449 --> 00:56:47,399
do but time is of the essence here so

1310
00:56:45,719 --> 00:56:50,818
I'm gonna go ahead and and if zero this

1311
00:56:47,400 --> 00:56:53,690
out for now so that we don't we don't

1312
00:56:50,818 --> 00:56:56,038
leave ourselves in a non compiling state

1313
00:56:53,690 --> 00:56:59,400
and what I'll do here is just kind of

1314
00:56:56,039 --> 00:57:01,049
nerf the things that we added and so

1315
00:56:59,400 --> 00:57:03,838
that we don't have that problem ok so

1316
00:57:01,048 --> 00:57:08,519
there we go I'm just gonna leave us in a

1317
00:57:03,838 --> 00:57:11,099
compiling state here there we go working

1318
00:57:08,519 --> 00:57:12,630
nicely so I'll just keep writing this

1319
00:57:11,099 --> 00:57:14,278
for the next three minutes or whatever

1320
00:57:12,630 --> 00:57:16,528
till the stream runs out and then

1321
00:57:14,278 --> 00:57:18,809
tomorrow we'll pick back up on how we

1322
00:57:16,528 --> 00:57:20,250
want to do that sort of rest of the

1323
00:57:18,809 --> 00:57:23,789
merging and that sort of stuff all right

1324
00:57:20,250 --> 00:57:25,710
so as we go through the files again we

1325
00:57:23,789 --> 00:57:27,930
put this file now I'm just going to go

1326
00:57:25,710 --> 00:57:29,940
ahead and in that file we've got the

1327
00:57:27,929 --> 00:57:33,389
asset type array so I'm going to go

1328
00:57:29,940 --> 00:57:36,630
ahead and say that we've got you know

1329
00:57:33,389 --> 00:57:37,529
that source and the source is going to

1330
00:57:36,630 --> 00:57:44,099
be the file

1331
00:57:37,530 --> 00:57:45,390
acet type array should probably also say

1332
00:57:44,099 --> 00:57:46,469
that we're only going to process files

1333
00:57:45,389 --> 00:57:51,480
that don't have any errors

1334
00:57:46,469 --> 00:57:56,879
so if flaps worm file note what was it

1335
00:57:51,480 --> 00:57:59,730
platform no file errors if this handle

1336
00:57:56,880 --> 00:58:04,050
has no errors then we will use it

1337
00:57:59,730 --> 00:58:05,490
otherwise we will not write and it's

1338
00:58:04,050 --> 00:58:07,380
arguable that we maybe shouldn't even

1339
00:58:05,489 --> 00:58:08,729
have included it in the asset file list

1340
00:58:07,380 --> 00:58:10,230
if it had an error

1341
00:58:08,730 --> 00:58:12,269
maybe that's the smartest thing to do

1342
00:58:10,230 --> 00:58:15,449
but I'm just gonna I'm just gonna for

1343
00:58:12,269 --> 00:58:16,800
now leave it this way so when we get in

1344
00:58:15,449 --> 00:58:20,339
here we're gonna go ahead and loop

1345
00:58:16,800 --> 00:58:21,660
through every asset type index right so

1346
00:58:20,340 --> 00:58:23,640
this is basically the index from the

1347
00:58:21,659 --> 00:58:26,009
source right the thing we're reading out

1348
00:58:23,639 --> 00:58:27,779
of that's gonna go from 0 to however

1349
00:58:26,010 --> 00:58:30,570
many there were so this is in the header

1350
00:58:27,780 --> 00:58:32,370
this is asset type count right we're

1351
00:58:30,570 --> 00:58:37,200
going through them and for each one of

1352
00:58:32,369 --> 00:58:39,809
those we have our source and basically

1353
00:58:37,199 --> 00:58:41,730
if that source is the right type then

1354
00:58:39,809 --> 00:58:44,150
we're gonna do the block load right so

1355
00:58:41,730 --> 00:58:49,349
we're gonna load the that set of assets

1356
00:58:44,150 --> 00:58:52,050
in so that'll be another platform read

1357
00:58:49,349 --> 00:58:56,610
right that'll be platform read data from

1358
00:58:52,050 --> 00:58:59,730
file like so so we do platform rigidity

1359
00:58:56,610 --> 00:59:04,079
file and we would take however many of

1360
00:58:59,730 --> 00:59:06,300
them we're going to read and we would we

1361
00:59:04,079 --> 00:59:11,909
would want to kind of slide if you will

1362
00:59:06,300 --> 00:59:14,430
the we want to make the our range for

1363
00:59:11,909 --> 00:59:15,869
the dest we would want which is where is

1364
00:59:14,429 --> 00:59:18,659
our desk where we haven't done our desks

1365
00:59:15,869 --> 00:59:23,779
yet right we've got this asset type

1366
00:59:18,659 --> 00:59:27,899
right our desk we want the desk here

1367
00:59:23,780 --> 00:59:32,310
maybe we should do desk type and source

1368
00:59:27,900 --> 00:59:33,570
type that this desk type is going to be

1369
00:59:32,309 --> 00:59:37,739
the array that we're actually trying to

1370
00:59:33,570 --> 00:59:40,410
fill in right assets asset types plus

1371
00:59:37,739 --> 00:59:44,369
desk type ID right and that's our desk

1372
00:59:40,409 --> 00:59:47,429
type so our desk type for as we started

1373
00:59:44,369 --> 00:59:50,039
off is going to be because remember it's

1374
00:59:47,429 --> 00:59:50,809
got the first asset index and it's one

1375
00:59:50,039 --> 00:59:53,269
past

1376
00:59:50,809 --> 00:59:54,590
last asset index right so what we're

1377
00:59:53,269 --> 00:59:56,570
gonna do is we're gonna have our asset

1378
00:59:54,590 --> 00:59:58,309
count we want to start it off assuming

1379
00:59:56,570 --> 01:00:00,860
that it's like at the asset count and

1380
00:59:58,309 --> 01:00:05,509
then as we go we're just going to kind

1381
01:00:00,860 --> 01:00:07,400
of widen it out to fit you know wherever

1382
01:00:05,510 --> 01:00:09,470
in fact you know what it is it's really

1383
01:00:07,400 --> 01:00:11,210
just this right it's just gonna say one

1384
01:00:09,469 --> 01:00:13,459
past last index is whatever the asset

1385
01:00:11,210 --> 01:00:15,889
count is now so the asset count will

1386
01:00:13,460 --> 01:00:20,090
like increment as we load each

1387
01:00:15,889 --> 01:00:21,379
individual asset right so yeah all right

1388
01:00:20,090 --> 01:00:22,460
so we've got a bunch of work to do there

1389
01:00:21,380 --> 01:00:25,369
but we'll do it tomorrow

1390
01:00:22,460 --> 01:00:27,740
for now let's go to the QA and go ahead

1391
01:00:25,369 --> 01:00:29,659
and well let's go ahead and just you

1392
01:00:27,739 --> 01:00:31,339
know ask some questions so if you have

1393
01:00:29,659 --> 01:00:34,639
questions about what we did on tonight's

1394
01:00:31,340 --> 01:00:37,490
dream please go ahead and ask it now put

1395
01:00:34,639 --> 01:00:41,829
Q colon in front of it so I can see it

1396
01:00:37,489 --> 01:00:41,829
and answer it

1397
01:00:57,210 --> 01:01:03,940
of course I don't see any questions

1398
01:01:00,809 --> 01:01:09,329
everyone understood every last thing I

1399
01:01:03,940 --> 01:01:13,200
did tonight perfectly which is good news

1400
01:01:09,329 --> 01:01:13,200
everyone just knows how to do it

1401
01:01:31,309 --> 01:01:35,069
sorry if this has been answered what's

1402
01:01:33,358 --> 01:01:38,489
your general rule for making a variable

1403
01:01:35,068 --> 01:01:40,469
a pointer versus not so usually there's

1404
01:01:38,489 --> 01:01:43,258
two reasons for making something a

1405
01:01:40,469 --> 01:01:45,509
pointer the first reason is if you are

1406
01:01:43,259 --> 01:01:47,849
afraid that the copy' the cost of

1407
01:01:45,509 --> 01:01:48,990
copying it around is going to be too

1408
01:01:47,849 --> 01:01:54,000
expensive

1409
01:01:48,989 --> 01:01:56,818
so to give you an example right let's go

1410
01:01:54,000 --> 01:01:58,858
ahead and take a very simple case if I

1411
01:01:56,818 --> 01:02:05,119
were to make a function here

1412
01:01:58,858 --> 01:02:08,788
boy 2 and I had another function boy bar

1413
01:02:05,119 --> 01:02:11,039
let's suppose that I had something here

1414
01:02:08,789 --> 01:02:15,528
that was like a struct that they were

1415
01:02:11,039 --> 01:02:18,150
both going to talk about my struct right

1416
01:02:15,528 --> 01:02:21,239
so I wanted to find some data that both

1417
01:02:18,150 --> 01:02:26,028
foo and bar are going to operate on if

1418
01:02:21,239 --> 01:02:30,689
it's very small like this then if foo

1419
01:02:26,028 --> 01:02:32,818
has a my struct right and it sets part

1420
01:02:30,690 --> 01:02:38,940
of it to be equal to something and now

1421
01:02:32,818 --> 01:02:40,558
it would like bar to use that thing yeah

1422
01:02:38,940 --> 01:02:42,150
the question becomes should this be a

1423
01:02:40,559 --> 01:02:43,798
pointer or should it not be right that's

1424
01:02:42,150 --> 01:02:45,930
sort of like the thing that you're

1425
01:02:43,798 --> 01:02:49,309
asking right because in here you know it

1426
01:02:45,929 --> 01:02:52,409
uses this or something like that right I

1427
01:02:49,309 --> 01:02:55,400
don't know what it does with this value

1428
01:02:52,409 --> 01:03:00,358
but maybe it does you know some math

1429
01:02:55,400 --> 01:03:01,740
right so let's start thinking about this

1430
01:03:00,358 --> 01:03:04,048
particular problem and I'll go ahead and

1431
01:03:01,739 --> 01:03:06,989
compile this even and we can step in and

1432
01:03:04,048 --> 01:03:08,788
see what happens right so let's let's

1433
01:03:06,989 --> 01:03:10,500
first take this incredibly simple case

1434
01:03:08,789 --> 01:03:14,819
let's step in and see what happens so

1435
01:03:10,500 --> 01:03:16,889
here we go okay well you know what I got

1436
01:03:14,818 --> 01:03:19,768
to actually call it we won't be able to

1437
01:03:16,889 --> 01:03:23,278
pin to it if I don't ever call it there

1438
01:03:19,768 --> 01:03:26,189
we go so let's step into it here we are

1439
01:03:23,278 --> 01:03:28,170
so what's going on in the compiler at

1440
01:03:26,190 --> 01:03:30,150
this particular time right what's

1441
01:03:28,170 --> 01:03:31,740
happening here well if we look at the

1442
01:03:30,150 --> 01:03:34,079
disassembly we can see exactly what's

1443
01:03:31,739 --> 01:03:37,798
going on right here is the number five

1444
01:03:34,079 --> 01:03:40,019
right that's this and here is a pointer

1445
01:03:37,798 --> 01:03:41,849
to this structure right it's saying the

1446
01:03:40,018 --> 01:03:44,728
location of the structure on the stack

1447
01:03:41,849 --> 01:03:46,979
right here it's gonna copy the five into

1448
01:03:44,728 --> 01:03:48,868
there right it's gonna if this is it's

1449
01:03:46,978 --> 01:03:50,848
using this is like a target saying put

1450
01:03:48,869 --> 01:03:55,318
the five in there right so there it goes

1451
01:03:50,849 --> 01:04:00,630
it's moved in there then what's gonna

1452
01:03:55,318 --> 01:04:03,298
happen is it's going to move into ECX

1453
01:04:00,630 --> 01:04:05,400
which is a register the what is at the

1454
01:04:03,298 --> 01:04:06,989
location obstruct right which happens to

1455
01:04:05,400 --> 01:04:10,108
be that five it's gonna move it in there

1456
01:04:06,989 --> 01:04:16,798
and then it's gonna call bar okay so in

1457
01:04:10,108 --> 01:04:19,078
we call bar it's going to grab excuse me

1458
01:04:16,798 --> 01:04:21,298
what's in ECX store it to the stack

1459
01:04:19,079 --> 01:04:22,859
because it's trying to save the

1460
01:04:21,298 --> 01:04:25,079
variables here it's doing it's a little

1461
01:04:22,858 --> 01:04:26,338
standard dance because normally we're

1462
01:04:25,079 --> 01:04:28,140
running without optimizations right so

1463
01:04:26,338 --> 01:04:32,818
after wastage here it's then going to

1464
01:04:28,139 --> 01:04:34,379
load do you would point destruct which

1465
01:04:32,818 --> 01:04:37,199
is this right here right it's basically

1466
01:04:34,380 --> 01:04:39,329
you know it's taking the value that it

1467
01:04:37,199 --> 01:04:40,650
got past its storing it to the stack and

1468
01:04:39,329 --> 01:04:42,359
that's immediately reading it right back

1469
01:04:40,650 --> 01:04:43,709
from the stack right again the optimizer

1470
01:04:42,358 --> 01:04:46,409
would not be doing a lot of this stuff

1471
01:04:43,708 --> 01:04:48,690
but we're in an optimized code right

1472
01:04:46,409 --> 01:04:51,149
then it does the add of five which is

1473
01:04:48,690 --> 01:04:54,119
this five right here to our system five

1474
01:04:51,150 --> 01:04:56,309
to get 10 right at least it should be 10

1475
01:04:54,119 --> 01:04:57,539
and then it's storing it back out that

1476
01:04:56,309 --> 01:04:59,430
value back out to the stack

1477
01:04:57,539 --> 01:05:01,499
it's interesting you can see right the

1478
01:04:59,429 --> 01:05:03,719
the debugger is viewing what is on the

1479
01:05:01,498 --> 01:05:05,518
stack so until it actually moves it back

1480
01:05:03,719 --> 01:05:07,259
out to the stack it doesn't show it in

1481
01:05:05,518 --> 01:05:09,088
the register once it moves it out to the

1482
01:05:07,259 --> 01:05:11,190
stack you can see it so the debugger is

1483
01:05:09,088 --> 01:05:14,608
always inspecting the stack basically is

1484
01:05:11,190 --> 01:05:16,019
what that's telling you right so what

1485
01:05:14,608 --> 01:05:18,150
did that do well what it did was it

1486
01:05:16,018 --> 01:05:21,748
actually copied this by value right it

1487
01:05:18,150 --> 01:05:22,889
actually copied the whole thing okay and

1488
01:05:21,748 --> 01:05:25,198
so that's what's actually gonna happen

1489
01:05:22,889 --> 01:05:29,098
if I don't pass this by pointer so one

1490
01:05:25,199 --> 01:05:31,650
thing that might cross your mind is how

1491
01:05:29,099 --> 01:05:34,140
expensive is it to do that what if this

1492
01:05:31,650 --> 01:05:39,449
were very large right what if this were

1493
01:05:34,139 --> 01:05:41,009
32 things long right and we only use you

1494
01:05:39,449 --> 01:05:43,048
know and maybe we use all of them even

1495
01:05:41,009 --> 01:05:44,789
right so we're gonna use all of them or

1496
01:05:43,048 --> 01:05:46,048
whatever and we're gonna initialize all

1497
01:05:44,789 --> 01:05:47,069
of them so pretend we were doing a loop

1498
01:05:46,048 --> 01:05:48,420
where we English lies and we don't

1499
01:05:47,068 --> 01:05:50,278
really have to do that but pretend we

1500
01:05:48,420 --> 01:05:53,639
did that right so we actually want all

1501
01:05:50,278 --> 01:05:55,650
of them so now what happens when we do

1502
01:05:53,639 --> 01:06:00,799
this right so here's this

1503
01:05:55,650 --> 01:06:03,809
assembly and right we go through here

1504
01:06:00,800 --> 01:06:05,010
it's loading in it's actually trying to

1505
01:06:03,809 --> 01:06:08,159
figure out where to store this thing

1506
01:06:05,010 --> 01:06:09,150
right it has to do that offset of six so

1507
01:06:08,159 --> 01:06:12,659
it's figuring out where that's going to

1508
01:06:09,150 --> 01:06:16,200
be it's going to go ahead and actually

1509
01:06:12,659 --> 01:06:17,909
put it the value in there and then you

1510
01:06:16,199 --> 01:06:21,480
can see it gets to this thing right here

1511
01:06:17,909 --> 01:06:23,969
this rep mob s right and what it's going

1512
01:06:21,480 --> 01:06:27,630
to do is to see that a th there right

1513
01:06:23,969 --> 01:06:28,980
that ECX at a th that's actually if you

1514
01:06:27,630 --> 01:06:32,610
if you look at how many we've got we've

1515
01:06:28,980 --> 01:06:34,769
got 32 and they're 4 bytes each right so

1516
01:06:32,610 --> 01:06:38,099
they're 128 bytes so we can see is it

1517
01:06:34,769 --> 01:06:41,400
loaded in a th is the O X 80 right it's

1518
01:06:38,099 --> 01:06:45,989
it's 128 what it did is it said I got a

1519
01:06:41,400 --> 01:06:48,180
copy 128 bytes right now right because I

1520
01:06:45,989 --> 01:06:50,579
got a copy all that stuff onto the stack

1521
01:06:48,179 --> 01:06:52,559
for calling this guy because he wants

1522
01:06:50,579 --> 01:06:55,710
the whole thing so that's gonna full-on

1523
01:06:52,559 --> 01:06:58,799
bite a copy of 128 bytes right now right

1524
01:06:55,710 --> 01:06:59,970
that was it doing it and that doesn't

1525
01:06:58,800 --> 01:07:02,460
get any better right like I mean that

1526
01:06:59,969 --> 01:07:05,309
could be huge right that could be 4096

1527
01:07:02,460 --> 01:07:08,519
or something like this right or I guess

1528
01:07:05,309 --> 01:07:10,920
let's do 1024 which times 4 will be 4096

1529
01:07:08,519 --> 01:07:12,480
a whole page of memory right here we go

1530
01:07:10,920 --> 01:07:15,869
we come in here take a look at the

1531
01:07:12,480 --> 01:07:20,969
disassembly what's it doing right well

1532
01:07:15,869 --> 01:07:23,159
what it's doing is this copying 4096

1533
01:07:20,969 --> 01:07:28,529
bytes every time you want to call this

1534
01:07:23,159 --> 01:07:31,049
function right there it is so yeah doing

1535
01:07:28,530 --> 01:07:33,510
a lot of work so why might I want to

1536
01:07:31,050 --> 01:07:36,510
pass a pointer time number 1

1537
01:07:33,510 --> 01:07:41,010
the thing is large so what I'd rather do

1538
01:07:36,510 --> 01:07:45,660
is this right what happens if I do that

1539
01:07:41,010 --> 01:07:47,940
right well if I do that oops well if I

1540
01:07:45,659 --> 01:07:49,980
do that now when we look at the

1541
01:07:47,940 --> 01:07:51,690
disassembly it's not gonna bother

1542
01:07:49,980 --> 01:07:54,719
copying it it's just gonna send the

1543
01:07:51,690 --> 01:07:56,550
pointer right so in here when we do this

1544
01:07:54,719 --> 01:07:58,349
right you can see that rep mob is gone

1545
01:07:56,550 --> 01:08:00,870
that thing that does the block copy is

1546
01:07:58,349 --> 01:08:02,940
gone right so all it does is it takes

1547
01:08:00,869 --> 01:08:05,279
the address of the thing which is this

1548
01:08:02,940 --> 01:08:06,630
right and it's gonna move the address

1549
01:08:05,280 --> 01:08:08,370
into the register that it's going to

1550
01:08:06,630 --> 01:08:08,849
pass right that's all it's going to do

1551
01:08:08,369 --> 01:08:12,598
so

1552
01:08:08,849 --> 01:08:14,910
that we call bar bar grabs that pointer

1553
01:08:12,599 --> 01:08:16,889
out now and now from now on it's just

1554
01:08:14,909 --> 01:08:19,858
gonna use the pointer to access the

1555
01:08:16,889 --> 01:08:23,039
struct right and be done so it's much

1556
01:08:19,859 --> 01:08:24,239
more efficient now to do that so that's

1557
01:08:23,039 --> 01:08:27,269
the first reason you might pass a

1558
01:08:24,238 --> 01:08:28,408
pointer because the thing is large but

1559
01:08:27,270 --> 01:08:30,509
there's a second reason you might pass

1560
01:08:28,408 --> 01:08:32,759
the pointer right there's another reason

1561
01:08:30,509 --> 01:08:34,859
you might need to pass the pointer okay

1562
01:08:32,759 --> 01:08:39,448
so let's take a look at a different

1563
01:08:34,859 --> 01:08:42,119
scenario I'm gonna unwind this a little

1564
01:08:39,448 --> 01:08:43,948
bit back to where we were before before

1565
01:08:42,118 --> 01:08:46,439
we had a big thing so before there was

1566
01:08:43,948 --> 01:08:49,259
any reason to pass the pointer and

1567
01:08:46,439 --> 01:08:50,278
remember you know it can actually be

1568
01:08:49,259 --> 01:08:51,810
yeah

1569
01:08:50,279 --> 01:08:55,980
well nevermind I'm not gonna bother

1570
01:08:51,810 --> 01:08:57,719
saying that so anyway off we go what's

1571
01:08:55,979 --> 01:09:00,868
another reason to pass a pointer well

1572
01:08:57,719 --> 01:09:04,259
let's suppose that this code actually is

1573
01:09:00,868 --> 01:09:07,048
going to modify X right well what

1574
01:09:04,259 --> 01:09:08,908
happens if I just do this if I just do

1575
01:09:07,048 --> 01:09:10,289
this then what's gonna happen I mean

1576
01:09:08,908 --> 01:09:13,920
think about what happens in this code

1577
01:09:10,289 --> 01:09:15,448
right I'm gonna set X equal to 5 I'm

1578
01:09:13,920 --> 01:09:16,859
then I'm gonna pass it in fact you know

1579
01:09:15,448 --> 01:09:19,318
what I should probably point out you

1580
01:09:16,859 --> 01:09:22,079
know right here I want to find out what

1581
01:09:19,319 --> 01:09:26,460
it thought what you know what X actually

1582
01:09:22,079 --> 01:09:28,738
ends up being right well if this is

1583
01:09:26,460 --> 01:09:31,649
going to modify X when I come in here

1584
01:09:28,738 --> 01:09:33,539
and I set X equal to 5 and then I call

1585
01:09:31,649 --> 01:09:36,238
struct to have it go ahead and you know

1586
01:09:33,539 --> 01:09:38,609
increment X by 5 when I come back what I

1587
01:09:36,238 --> 01:09:41,009
will find of course is that my struct

1588
01:09:38,609 --> 01:09:42,929
still has 5 in it and the reason is

1589
01:09:41,009 --> 01:09:45,118
because if I pass something by value

1590
01:09:42,929 --> 01:09:47,759
it's passing an entire copy and this guy

1591
01:09:45,118 --> 01:09:50,039
is working on the copy but a lot of

1592
01:09:47,759 --> 01:09:51,868
times that's not what I wanted I wanted

1593
01:09:50,039 --> 01:09:54,149
that function to work on the struct and

1594
01:09:51,868 --> 01:09:57,359
I want to get back the results of that

1595
01:09:54,149 --> 01:09:59,579
right so one way to do that is obviously

1596
01:09:57,359 --> 01:10:02,098
to have a return value of my struct

1597
01:09:59,579 --> 01:10:03,719
right so I can do this so everybody's

1598
01:10:02,099 --> 01:10:06,480
doing by value this is the functional

1599
01:10:03,719 --> 01:10:08,908
style you might call it right I pass in

1600
01:10:06,479 --> 01:10:11,279
a struct I get a new struct back then I

1601
01:10:08,908 --> 01:10:13,799
just overwrite my old Struck's contents

1602
01:10:11,279 --> 01:10:15,599
with the new one right but again that

1603
01:10:13,800 --> 01:10:17,639
could be very inefficient if this struct

1604
01:10:15,599 --> 01:10:20,099
is large all these copies the optimizer

1605
01:10:17,639 --> 01:10:22,180
optimizer may not know how to do that

1606
01:10:20,099 --> 01:10:24,880
efficiently so another thing I can do

1607
01:10:22,180 --> 01:10:27,610
say you know what no we're all operating

1608
01:10:24,880 --> 01:10:30,579
on the same memory so I'm just gonna

1609
01:10:27,609 --> 01:10:32,380
pass you a pointer to struct and then

1610
01:10:30,579 --> 01:10:33,970
when you modify it I will see the

1611
01:10:32,380 --> 01:10:36,159
changes because it's the one that I'm

1612
01:10:33,970 --> 01:10:39,430
using to we're both pointing at the same

1613
01:10:36,159 --> 01:10:42,220
place right so here we go we set it to

1614
01:10:39,430 --> 01:10:44,140
five we call bar and now when we come

1615
01:10:42,220 --> 01:10:46,090
out here our struct is set to ten

1616
01:10:44,140 --> 01:10:50,560
properly because we were both looking at

1617
01:10:46,090 --> 01:10:52,750
the same struct right so hopefully that

1618
01:10:50,560 --> 01:10:55,810
answers the question usually it's very

1619
01:10:52,750 --> 01:10:58,600
unambiguous whether you use a pointer or

1620
01:10:55,810 --> 01:11:00,250
not if the thing is large or you're both

1621
01:10:58,600 --> 01:11:02,140
trying to operate on the same one you're

1622
01:11:00,250 --> 01:11:04,510
gonna use a pointer if it is small and

1623
01:11:02,140 --> 01:11:05,650
you don't care you're gonna pass my

1624
01:11:04,510 --> 01:11:07,000
value because usually it just more

1625
01:11:05,649 --> 01:11:09,279
efficient since you don't have to pass a

1626
01:11:07,000 --> 01:11:10,930
pointer that then gets you don't have to

1627
01:11:09,279 --> 01:11:12,460
pass the thing which tells you where the

1628
01:11:10,930 --> 01:11:13,630
thing is you could just pass the thing

1629
01:11:12,460 --> 01:11:14,920
and that's always going to be a little

1630
01:11:13,630 --> 01:11:17,789
more efficient than doing that

1631
01:11:14,920 --> 01:11:17,789
indirection right

1632
01:11:24,779 --> 01:11:29,109
SSS McGrath says I don't completely

1633
01:11:27,399 --> 01:11:31,059
understand your aversion to using the C

1634
01:11:29,109 --> 01:11:32,739
standard library is this just at HMH

1635
01:11:31,060 --> 01:11:33,910
thing for teaching or do you just never

1636
01:11:32,739 --> 01:11:37,469
use the standard library

1637
01:11:33,909 --> 01:11:41,109
I just never used the standard library

1638
01:11:37,470 --> 01:11:42,970
pretty much that started with granny

1639
01:11:41,109 --> 01:11:44,529
granny was the first thing I shipped

1640
01:11:42,970 --> 01:11:46,510
that did not require the standard

1641
01:11:44,529 --> 01:11:53,229
library and could be compiled completely

1642
01:11:46,510 --> 01:11:55,000
without it and you know I the current

1643
01:11:53,229 --> 01:11:56,500
code base that I'm doing at work doesn't

1644
01:11:55,000 --> 01:12:00,569
use the standard library at all either

1645
01:11:56,500 --> 01:12:03,520
so the next game the game that we ship

1646
01:12:00,569 --> 01:12:08,229
hopefully next year will not use it

1647
01:12:03,520 --> 01:12:12,760
either so the reason for that is twofold

1648
01:12:08,229 --> 01:12:13,989
one is I don't trust it and the reason

1649
01:12:12,760 --> 01:12:16,650
that I don't trust it is I've had lots

1650
01:12:13,989 --> 01:12:19,869
of bad experiences with it for example

1651
01:12:16,649 --> 01:12:21,579
you will call some math function in the

1652
01:12:19,869 --> 01:12:23,349
standard library and it's doing a ton of

1653
01:12:21,579 --> 01:12:26,439
extra work it doesn't need to do right

1654
01:12:23,350 --> 01:12:28,900
so I don't like the idea of maybe

1655
01:12:26,439 --> 01:12:30,699
calling sine or maybe calling a tan and

1656
01:12:28,899 --> 01:12:32,920
having it do a bunch of ridiculous stuff

1657
01:12:30,699 --> 01:12:34,869
that's not what I wanted right I want to

1658
01:12:32,920 --> 01:12:37,180
know exactly what the code is that I'm

1659
01:12:34,869 --> 01:12:39,849
calling on every platform and I want to

1660
01:12:37,180 --> 01:12:41,740
be the same right so I want to implement

1661
01:12:39,850 --> 01:12:43,300
it myself I want to implement atan2

1662
01:12:41,739 --> 01:12:45,159
exactly the way I want it and then I

1663
01:12:43,300 --> 01:12:47,890
want to know it's always a tan - I don't

1664
01:12:45,159 --> 01:12:50,019
want what some new library maintainer

1665
01:12:47,890 --> 01:12:51,490
thought a tan - should be doing I don't

1666
01:12:50,020 --> 01:12:53,440
want what the sea standards committee

1667
01:12:51,489 --> 01:12:55,269
thought 18 - had to do I want what I

1668
01:12:53,439 --> 01:12:56,829
think a tan shoe should do and I want it

1669
01:12:55,270 --> 01:12:58,330
to do the same thing everywhere and I

1670
01:12:56,829 --> 01:13:03,489
want it to be only what's necessary

1671
01:12:58,329 --> 01:13:05,380
right so that's one thing the second

1672
01:13:03,489 --> 01:13:06,849
thing is I just don't like the API like

1673
01:13:05,380 --> 01:13:10,270
I said I don't like their file API

1674
01:13:06,850 --> 01:13:12,430
I think it's written incorrectly I I

1675
01:13:10,270 --> 01:13:13,780
don't like a lot of the ways they've

1676
01:13:12,430 --> 01:13:15,460
structured things it's incomplete

1677
01:13:13,779 --> 01:13:17,500
there's a lot of things that the file

1678
01:13:15,460 --> 01:13:19,869
API doesn't do properly globbing for

1679
01:13:17,500 --> 01:13:20,920
example like you can't iterate over the

1680
01:13:19,869 --> 01:13:22,059
files in a directory that have a

1681
01:13:20,920 --> 01:13:24,100
particular name or something with that

1682
01:13:22,060 --> 01:13:25,720
right so it's just it's it's not even a

1683
01:13:24,100 --> 01:13:27,340
good standard library it doesn't have

1684
01:13:25,720 --> 01:13:28,480
the features I actually want so I know

1685
01:13:27,340 --> 01:13:30,190
I'm gonna implement half of it anyway

1686
01:13:28,479 --> 01:13:33,519
myself because doesn't have the things

1687
01:13:30,189 --> 01:13:35,259
that I need and so at some point I just

1688
01:13:33,520 --> 01:13:37,000
looked at it and I was like oh and then

1689
01:13:35,260 --> 01:13:39,340
one other thing is unreliability

1690
01:13:37,000 --> 01:13:41,739
linking the more stuff you rely on in

1691
01:13:39,340 --> 01:13:44,050
the standard library the more Microsoft

1692
01:13:41,739 --> 01:13:46,929
screws you by shipping really unreliable

1693
01:13:44,050 --> 01:13:48,610
side by side assembly dll lineup

1694
01:13:46,930 --> 01:13:49,750
nightmares I mean I can't tell you how

1695
01:13:48,609 --> 01:13:51,189
many times people have sent me

1696
01:13:49,750 --> 01:13:53,199
executable stuff like a game they were

1697
01:13:51,189 --> 01:13:56,019
working on and I go to run it and it

1698
01:13:53,199 --> 01:13:58,539
doesn't run because the proper MSD Siri

1699
01:13:56,020 --> 01:13:59,650
distributors were installed right if you

1700
01:13:58,539 --> 01:14:00,850
don't link with the Saint with the run

1701
01:13:59,649 --> 01:14:03,309
so you run time I were you never have

1702
01:14:00,850 --> 01:14:04,570
that problem now of course I've told you

1703
01:14:03,310 --> 01:14:07,300
other ways you can get around that is

1704
01:14:04,569 --> 01:14:08,469
just lick with it statically which I

1705
01:14:07,300 --> 01:14:09,820
highly recommend people do if you're

1706
01:14:08,470 --> 01:14:11,590
gonna use your mind right but that's

1707
01:14:09,819 --> 01:14:13,719
just an example of the kinds of

1708
01:14:11,590 --> 01:14:15,430
annoyances that happen or I want to link

1709
01:14:13,720 --> 01:14:17,020
with it and I don't have the C runtime

1710
01:14:15,430 --> 01:14:18,579
library dot Lib installed on the machine

1711
01:14:17,020 --> 01:14:20,140
in the right way because when

1712
01:14:18,579 --> 01:14:22,180
Microsoft's compiler got installed it

1713
01:14:20,140 --> 01:14:23,680
didn't do it right or the path is set

1714
01:14:22,180 --> 01:14:24,940
wrong or whatever it's like forget it if

1715
01:14:23,680 --> 01:14:26,260
that's if you'd ever linked with the and

1716
01:14:24,939 --> 01:14:30,879
stuff you just never think about that

1717
01:14:26,260 --> 01:14:32,440
again so yeah and that's something I did

1718
01:14:30,880 --> 01:14:34,090
recently with the current code base is

1719
01:14:32,439 --> 01:14:35,379
the first time I've ever done it the

1720
01:14:34,090 --> 01:14:37,930
current code base uses new link

1721
01:14:35,380 --> 01:14:40,390
libraries whatsoever the only one is

1722
01:14:37,930 --> 01:14:42,579
kernel32 on Windows so that I can get

1723
01:14:40,390 --> 01:14:44,950
get Brock address everything else is

1724
01:14:42,579 --> 01:14:49,840
done dynamically so I literally don't

1725
01:14:44,949 --> 01:14:52,960
even install the platform SDK I just the

1726
01:14:49,840 --> 01:14:56,980
only thing I do is I I lick with

1727
01:14:52,960 --> 01:15:00,399
kernel32 and I copy and I saved kernel32

1728
01:14:56,979 --> 01:15:02,739
Lib right into the source tree so there

1729
01:15:00,399 --> 01:15:05,129
is no in there are literally no source

1730
01:15:02,739 --> 01:15:08,309
paths involved in building our latest

1731
01:15:05,130 --> 01:15:10,720
codebase and let me tell you it has been

1732
01:15:08,310 --> 01:15:14,530
awesome because I go to a new dev

1733
01:15:10,720 --> 01:15:20,170
machine and there's no BS right there's

1734
01:15:14,529 --> 01:15:22,509
no fudge it's just it builds right there

1735
01:15:20,170 --> 01:15:24,789
is no way it can't build you don't have

1736
01:15:22,510 --> 01:15:26,199
to call VC VARs all you don't have to

1737
01:15:24,789 --> 01:15:28,539
like set a path you know I saw the

1738
01:15:26,199 --> 01:15:30,609
platform up to install what version of

1739
01:15:28,539 --> 01:15:33,850
DirectX blah blah blah is like none of

1740
01:15:30,609 --> 01:15:35,589
it it just builds and then from now on I

1741
01:15:33,850 --> 01:15:38,970
will never think about that right which

1742
01:15:35,590 --> 01:15:38,970
is great so

1743
01:15:41,139 --> 01:15:46,309
how and where will users savedata be

1744
01:15:43,760 --> 01:15:47,860
stored so that will be a separate thing

1745
01:15:46,309 --> 01:15:50,989
that will deal with a little bit later

1746
01:15:47,859 --> 01:15:54,649
and that is entirely platform dependent

1747
01:15:50,988 --> 01:15:56,269
right so we will basically define an API

1748
01:15:54,649 --> 01:15:58,460
when we get to the point where we have

1749
01:15:56,270 --> 01:16:00,170
actually user data to store we'll define

1750
01:15:58,460 --> 01:16:01,520
an API at that time remember always

1751
01:16:00,170 --> 01:16:02,779
write the users code first so when we

1752
01:16:01,520 --> 01:16:06,139
get to the point where my save user data

1753
01:16:02,779 --> 01:16:07,399
will do that and the platform will be

1754
01:16:06,139 --> 01:16:09,679
the place that besides where it's stored

1755
01:16:07,399 --> 01:16:11,299
because you know if it's running on

1756
01:16:09,679 --> 01:16:13,250
steam it's gonna want to use like cloud

1757
01:16:11,300 --> 01:16:14,389
save if it's running on a console it's

1758
01:16:13,250 --> 01:16:16,038
gonna want to use whatever their thing

1759
01:16:14,389 --> 01:16:17,179
is if it's running just a standard

1760
01:16:16,038 --> 01:16:18,288
Windows it's gonna want to use the

1761
01:16:17,179 --> 01:16:20,449
windows

1762
01:16:18,288 --> 01:16:22,189
you know app data or whatever you know

1763
01:16:20,448 --> 01:16:23,988
wherever the latest places they say you

1764
01:16:22,189 --> 01:16:26,178
have to store it you know you want to

1765
01:16:23,988 --> 01:16:28,009
basically just have that be pushed

1766
01:16:26,179 --> 01:16:29,989
totally to the platform later because

1767
01:16:28,010 --> 01:16:31,760
every platform is different so the main

1768
01:16:29,988 --> 01:16:34,609
code will all it will know how to do is

1769
01:16:31,760 --> 01:16:36,440
issue commands of like here's my user

1770
01:16:34,609 --> 01:16:45,368
data please save it or whatever you know

1771
01:16:36,439 --> 01:16:45,368
or update it all right we good

1772
01:16:50,029 --> 01:16:55,519
think we're good I'll really quickly run

1773
01:16:52,609 --> 01:16:57,199
through the non topic topical questions

1774
01:16:55,520 --> 01:17:01,190
well keeper are you using this is a Das

1775
01:16:57,199 --> 01:17:03,199
Keyboard 3 after I got extraordinarily

1776
01:17:01,189 --> 01:17:06,049
mad at the bus keyboard for which many

1777
01:17:03,199 --> 01:17:08,750
of you saw on stream how long have I

1778
01:17:06,050 --> 01:17:10,760
been developing games I've been

1779
01:17:08,750 --> 01:17:18,350
programming for 30 years I've been on in

1780
01:17:10,760 --> 01:17:20,239
the game industry for 20 let's see how

1781
01:17:18,350 --> 01:17:23,150
and what sorry why brown switches over

1782
01:17:20,239 --> 01:17:26,149
blue I just I don't like the heavy

1783
01:17:23,149 --> 01:17:28,250
clicking I I grew up my favorite

1784
01:17:26,149 --> 01:17:31,339
computer to type on growing up was the

1785
01:17:28,250 --> 01:17:33,140
amiga computer and it had a softer touch

1786
01:17:31,340 --> 01:17:34,489
keyboard I still haven't found anything

1787
01:17:33,140 --> 01:17:37,220
that I'd like to type on quite as much

1788
01:17:34,489 --> 01:17:39,529
as that keyboard but blue blue switches

1789
01:17:37,220 --> 01:17:44,630
are a little too hard for that Brown are

1790
01:17:39,529 --> 01:17:47,630
closer let's see what do you have in

1791
01:17:44,630 --> 01:17:49,400
your arms those are my wrist braces they

1792
01:17:47,630 --> 01:17:55,220
keep me from getting tendonitis I find

1793
01:17:49,399 --> 01:17:58,009
so I always use them and that do I like

1794
01:17:55,220 --> 01:18:00,320
dogs or cats I'm fine with either I just

1795
01:17:58,010 --> 01:18:03,079
I die if I'm gonna if it's gonna be my

1796
01:18:00,319 --> 01:18:05,769
pet it's a cat I don't really dogs are

1797
01:18:03,079 --> 01:18:05,769
too needy for me

1798
01:18:10,989 --> 01:18:14,809
Russell abyss how far do you think you

1799
01:18:13,250 --> 01:18:16,640
are in terms of stream days from

1800
01:18:14,810 --> 01:18:18,830
implementing game logic in terms of play

1801
01:18:16,640 --> 01:18:22,039
versus platform my ballpark was

1802
01:18:18,829 --> 01:18:24,859
somewhere around day 200 would be where

1803
01:18:22,039 --> 01:18:26,720
it would be because I've been days are

1804
01:18:24,859 --> 01:18:29,389
roughly an hour so if you think about

1805
01:18:26,720 --> 01:18:32,539
how long that is like 200 hammy hero

1806
01:18:29,390 --> 01:18:35,030
days is 200 hours so divide that by 40

1807
01:18:32,539 --> 01:18:36,979
that's 5 work weeks and 5 work weeks to

1808
01:18:35,029 --> 01:18:38,899
build a complete engine is not very long

1809
01:18:36,979 --> 01:18:40,669
but we've been making pretty good

1810
01:18:38,899 --> 01:18:43,250
progress and it does seem like probably

1811
01:18:40,670 --> 01:18:48,859
about there so you know day 200 day 250

1812
01:18:43,250 --> 01:18:50,270
something like that I just got to RPI

1813
01:18:48,859 --> 01:18:52,130
twos what do you think about the RPI -

1814
01:18:50,270 --> 01:18:56,210
in general I have not seen an RPI - I

1815
01:18:52,130 --> 01:19:00,609
only had an RPI 1 what do you think

1816
01:18:56,210 --> 01:19:00,609
about Intel I NDE

1817
01:19:01,149 --> 01:19:05,769
sorry I guess I I don't know what that

1818
01:19:03,560 --> 01:19:05,770
is

1819
01:19:06,579 --> 01:19:19,670
is it something integrated native

1820
01:19:15,649 --> 01:19:29,329
developer experience is that is that

1821
01:19:19,670 --> 01:19:32,029
what we're talking about I yeah I I

1822
01:19:29,329 --> 01:19:35,059
guess I don't know what this is a cross

1823
01:19:32,029 --> 01:19:36,979
architecture productivity suite that

1824
01:19:35,060 --> 01:19:38,660
provides developers with tools support

1825
01:19:36,979 --> 01:19:41,419
and IDE integration to create high

1826
01:19:38,659 --> 01:19:45,889
performance C++ Java applications for

1827
01:19:41,420 --> 01:19:48,500
Windows well I mean I guess I've never

1828
01:19:45,890 --> 01:19:51,140
tried it so I don't know but I'm not

1829
01:19:48,500 --> 01:19:54,079
sure what it would really do for me I

1830
01:19:51,140 --> 01:19:55,910
mean the only thing I use ms dev for is

1831
01:19:54,079 --> 01:20:01,069
the debugger so if it had like a really

1832
01:19:55,909 --> 01:20:05,149
great debugger or something maybe but

1833
01:20:01,069 --> 01:20:10,239
you know otherwise I'm not sure what

1834
01:20:05,149 --> 01:20:12,670
what I would be doing with it all right

1835
01:20:10,239 --> 01:20:15,939
looks like we are done with questions

1836
01:20:12,670 --> 01:20:20,489
which means we are done with the stream

1837
01:20:15,939 --> 01:20:23,169
so let's close this down

1838
01:20:20,489 --> 01:20:25,210
all right thank you everyone for joining

1839
01:20:23,170 --> 01:20:27,489
me for another episode of handmade hero

1840
01:20:25,210 --> 01:20:30,159
it has been a pleasure coding with you

1841
01:20:27,489 --> 01:20:31,449
as it always is and I'm pretty happy

1842
01:20:30,159 --> 01:20:32,710
with where we're getting here we're

1843
01:20:31,449 --> 01:20:36,699
almost done with the asset file stuff

1844
01:20:32,710 --> 01:20:37,899
it's looking pretty good and again you

1845
01:20:36,699 --> 01:20:40,119
know it's pretty cool when you think

1846
01:20:37,899 --> 01:20:41,439
about it the limited the very limited

1847
01:20:40,119 --> 01:20:43,359
amount of time that we spend on things

1848
01:20:41,439 --> 01:20:45,669
you know we'll spend like 20 30 hours on

1849
01:20:43,359 --> 01:20:48,539
something and have a crazy list of

1850
01:20:45,670 --> 01:20:51,460
features like we do streaming sound

1851
01:20:48,539 --> 01:20:54,159
overlapped with you know on separate

1852
01:20:51,460 --> 01:20:57,399
threading for with our sound mixer that

1853
01:20:54,159 --> 01:20:58,739
does pitch shifting and volume panning

1854
01:20:57,399 --> 01:21:01,359
and all this other sort of stuff like

1855
01:20:58,739 --> 01:21:05,170
all going through the asset system which

1856
01:21:01,359 --> 01:21:06,369
is all streamed and loads you know in

1857
01:21:05,170 --> 01:21:09,220
the background and all this other star

1858
01:21:06,369 --> 01:21:12,670
stuff like if you think of how short we

1859
01:21:09,220 --> 01:21:15,310
spend on most of our things we get a you

1860
01:21:12,670 --> 01:21:17,920
know a lot of features in there so I

1861
01:21:15,310 --> 01:21:20,110
think we should be pretty happy with

1862
01:21:17,920 --> 01:21:22,149
that because you know a lot of things a

1863
01:21:20,109 --> 01:21:23,619
lot of times you'll get a commercial

1864
01:21:22,149 --> 01:21:25,719
game engine that can't even do some of

1865
01:21:23,619 --> 01:21:28,300
these things and we have been pretty

1866
01:21:25,720 --> 01:21:30,159
consistent at being able to do some

1867
01:21:28,300 --> 01:21:34,029
pretty powerful stuff so far so I'm

1868
01:21:30,159 --> 01:21:38,050
pretty happy with how little time we

1869
01:21:34,029 --> 01:21:39,519
have spent doing any individual piece of

1870
01:21:38,050 --> 01:21:41,199
this and yet we've gotten some pretty

1871
01:21:39,520 --> 01:21:43,960
industrial-strength stuff out of it so I

1872
01:21:41,199 --> 01:21:45,399
think that's pretty darn cool and sort

1873
01:21:43,960 --> 01:21:46,930
of validates what I tend to think about

1874
01:21:45,399 --> 01:21:48,939
things which is that making stuff by

1875
01:21:46,930 --> 01:21:52,180
script making stuff from scratch really

1876
01:21:48,939 --> 01:21:54,429
isn't that hard once you kind of get the

1877
01:21:52,180 --> 01:21:55,990
hang of it and it's something that you

1878
01:21:54,430 --> 01:21:57,490
always could build on going forwards and

1879
01:21:55,989 --> 01:22:01,449
and know that it works the way you want

1880
01:21:57,489 --> 01:22:02,889
it to you know so anyway that's said we

1881
01:22:01,449 --> 01:22:04,300
will continue with the asset file stuff

1882
01:22:02,890 --> 01:22:06,310
for a couple more days getting it

1883
01:22:04,300 --> 01:22:07,539
running smoothly with the win32 platform

1884
01:22:06,310 --> 01:22:09,250
layer and also making sure that we can

1885
01:22:07,539 --> 01:22:11,800
load multiple asset files and merge them

1886
01:22:09,250 --> 01:22:13,539
and so I hope you'll join me for that

1887
01:22:11,800 --> 01:22:15,640
we'll be back here again 5 p.m. Pacific

1888
01:22:13,539 --> 01:22:16,090
Daylight Time tomorrow same time same

1889
01:22:15,640 --> 01:22:18,280
place

1890
01:22:16,090 --> 01:22:19,630
here on Twitch in the meantime if you

1891
01:22:18,279 --> 01:22:20,889
want to file a look at home come follow

1892
01:22:19,630 --> 01:22:22,270
along at home with a source code you can

1893
01:22:20,890 --> 01:22:25,869
pre-order the game on handmade hero or

1894
01:22:22,270 --> 01:22:28,180
it comes with a source code this handy

1895
01:22:25,869 --> 01:22:29,559
little pirata button here so if you want

1896
01:22:28,180 --> 01:22:32,200
play around experiment with it yourself

1897
01:22:29,560 --> 01:22:33,370
you can do that we also have a forum

1898
01:22:32,199 --> 01:22:35,349
site we can ask questions

1899
01:22:33,369 --> 01:22:37,510
get an anti episode guide you sports mac

1900
01:22:35,350 --> 01:22:38,800
and linux that sort of stuff we also

1901
01:22:37,510 --> 01:22:40,150
have a patreon page while support the

1902
01:22:38,800 --> 01:22:42,579
video series you could subscribe there

1903
01:22:40,149 --> 01:22:43,750
and we have a tweet bot which tweets the

1904
01:22:42,579 --> 01:22:44,829
schedule so if you ever want to catch

1905
01:22:43,750 --> 01:22:46,000
the scream live or you're not sure when

1906
01:22:44,829 --> 01:22:47,529
it's going to be the tweet box the place

1907
01:22:46,000 --> 01:22:50,109
to go for that and it will keep you

1908
01:22:47,529 --> 01:22:52,389
informed thanks everyone for joining me

1909
01:22:50,109 --> 01:22:54,729
and I will hope see hopefully see you

1910
01:22:52,390 --> 01:22:56,650
here again tomorrow until then have fun

1911
01:22:54,729 --> 01:22:58,949
coding and I'll catch you on the

1912
01:22:56,649 --> 01:22:58,949
Internet

