1
00:00:00,000 --> 00:00:05,250
hurting start recording hello everyone

2
00:00:02,700 --> 00:00:07,649
and welcome to handmade Hero the show

3
00:00:05,250 --> 00:00:11,429
where we code a complete game live on

4
00:00:07,649 --> 00:00:13,910
stream on Twitch no engines no libraries

5
00:00:11,429 --> 00:00:16,410
it is it is literally a complete

6
00:00:13,910 --> 00:00:19,079
investigation of every piece of code

7
00:00:16,410 --> 00:00:22,410
that makes a game tick right down to the

8
00:00:19,079 --> 00:00:24,448
most my new detail and all the way up to

9
00:00:22,410 --> 00:00:26,160
the highest level stuff that's our goal

10
00:00:24,449 --> 00:00:28,590
here on the stream that is what we do

11
00:00:26,160 --> 00:00:30,059
and right now we are in the middle of

12
00:00:28,589 --> 00:00:32,070
doing something that's actually kind of

13
00:00:30,059 --> 00:00:34,469
interesting and we're we're almost done

14
00:00:32,070 --> 00:00:37,558
with it it's it's our prototype ground

15
00:00:34,469 --> 00:00:39,870
texture basically what we're doing is we

16
00:00:37,558 --> 00:00:41,280
instead of having like a tileable ground

17
00:00:39,869 --> 00:00:43,530
where you just kind of walk around on

18
00:00:41,280 --> 00:00:45,929
the ground always looks the same what we

19
00:00:43,530 --> 00:00:47,910
decided to do was make it so that we

20
00:00:45,929 --> 00:00:49,679
would have sort of an infinitely non

21
00:00:47,909 --> 00:00:52,349
repeating ground that's different

22
00:00:49,679 --> 00:00:54,780
everywhere you go and that we would have

23
00:00:52,350 --> 00:00:56,219
the option sort of like we would have

24
00:00:54,780 --> 00:00:58,259
like an architecture in there so that as

25
00:00:56,219 --> 00:01:01,230
the game progresses when we're actually

26
00:00:58,259 --> 00:01:04,649
developing the mainline game it'll be

27
00:01:01,229 --> 00:01:06,840
easy for us to kind of put stuff into

28
00:01:04,650 --> 00:01:08,580
this ground texture as necessary and

29
00:01:06,840 --> 00:01:10,978
work with it to sort of change you know

30
00:01:08,579 --> 00:01:13,379
what textures you know sort of what it

31
00:01:10,978 --> 00:01:14,909
shows and that sort of stuff and we've

32
00:01:13,379 --> 00:01:16,109
done a bunch of the work for that but

33
00:01:14,909 --> 00:01:17,909
there's still a little bit left to do

34
00:01:16,109 --> 00:01:19,379
and so I would like to get that finished

35
00:01:17,909 --> 00:01:21,719
up this week and we've got today and

36
00:01:19,379 --> 00:01:24,899
tomorrow to do that and so I'd like to

37
00:01:21,719 --> 00:01:26,429
jump right in on that right now and you

38
00:01:24,900 --> 00:01:28,259
can see when I run it you'll be able to

39
00:01:26,430 --> 00:01:29,880
see kind of where we're at now before I

40
00:01:28,259 --> 00:01:31,859
begin if you preorder the game on

41
00:01:29,879 --> 00:01:33,658
handmade hero org you should have gotten

42
00:01:31,859 --> 00:01:35,129
a link in your email that email link

43
00:01:33,659 --> 00:01:36,930
allows you to download the source code

44
00:01:35,129 --> 00:01:39,658
and so if you'd like to follow along

45
00:01:36,930 --> 00:01:41,939
with me please unpack date 86 this

46
00:01:39,659 --> 00:01:43,200
source code here on day 87 because

47
00:01:41,938 --> 00:01:44,609
that's where we're at

48
00:01:43,200 --> 00:01:46,019
that's what I'm working with and so if

49
00:01:44,609 --> 00:01:48,930
you want to match up with what I'm doing

50
00:01:46,019 --> 00:01:51,539
that's what you want to do all right so

51
00:01:48,930 --> 00:01:53,009
let's take a look at at the state of

52
00:01:51,540 --> 00:01:54,540
things here just so I can remind

53
00:01:53,009 --> 00:01:56,069
everyone where we are oh and you know

54
00:01:54,540 --> 00:01:58,380
what there's one thing that I want to do

55
00:01:56,069 --> 00:02:00,059
before we get started I lied somebody

56
00:01:58,379 --> 00:02:03,359
pointed out in the forum's that we have

57
00:02:00,060 --> 00:02:04,530
a typo a lot of times like I said I make

58
00:02:03,359 --> 00:02:06,179
typos on the stream because what I'm

59
00:02:04,530 --> 00:02:07,379
talking when I'm coding it's hard to pay

60
00:02:06,180 --> 00:02:09,390
attention and there's some typos that

61
00:02:07,379 --> 00:02:11,459
sneak in there pretty regularly

62
00:02:09,389 --> 00:02:12,779
maybe not won an episode but sometimes

63
00:02:11,459 --> 00:02:14,819
won an episode or

64
00:02:12,780 --> 00:02:17,879
sometimes more than one an episode so we

65
00:02:14,818 --> 00:02:19,889
got a I appreciate people's vigilance

66
00:02:17,879 --> 00:02:21,090
and catching those because again it's

67
00:02:19,889 --> 00:02:24,239
really hard for me to do that while I'm

68
00:02:21,090 --> 00:02:26,099
talking this one is bizarre and I'm

69
00:02:24,240 --> 00:02:27,569
gonna even step into this here so you

70
00:02:26,099 --> 00:02:30,090
can see why this worked at all because

71
00:02:27,568 --> 00:02:32,699
this should have crashed right away when

72
00:02:30,090 --> 00:02:35,879
we typed it in the first time but

73
00:02:32,699 --> 00:02:37,379
somehow it didn't and I feel like it'd

74
00:02:35,879 --> 00:02:40,949
be nice to just show why it didn't

75
00:02:37,379 --> 00:02:42,209
because I feel like one of things that

76
00:02:40,949 --> 00:02:44,219
again we tried to on the stream is show

77
00:02:42,209 --> 00:02:45,509
how memory works and really get you for

78
00:02:44,219 --> 00:02:47,129
comfortable with working with the memory

79
00:02:45,509 --> 00:02:49,319
yourself and this is kind of a good

80
00:02:47,129 --> 00:02:51,419
example just to just show like wow okay

81
00:02:49,319 --> 00:02:53,549
so weird stuff can happen when you're

82
00:02:51,419 --> 00:02:57,208
just talking about like memory using

83
00:02:53,550 --> 00:03:00,450
memory directly right because it really

84
00:02:57,209 --> 00:03:01,739
is just a big old flat space that you

85
00:03:00,449 --> 00:03:03,449
write into and that you have complete

86
00:03:01,739 --> 00:03:05,069
control over it's not like in

87
00:03:03,449 --> 00:03:08,280
higher-level languages where you have to

88
00:03:05,068 --> 00:03:10,169
always obey all these rules that it sets

89
00:03:08,280 --> 00:03:11,430
out for you like you know it's pretty

90
00:03:10,169 --> 00:03:13,259
much anything goes and so you can do

91
00:03:11,430 --> 00:03:14,670
whatever you want and so what's kind of

92
00:03:13,259 --> 00:03:16,139
interesting here is if you take a look

93
00:03:14,669 --> 00:03:18,869
I'm gonna I'm gonna set a breakpoint

94
00:03:16,139 --> 00:03:20,328
here and step into the code we we just

95
00:03:18,870 --> 00:03:22,799
quickly threw in the code to initialize

96
00:03:20,329 --> 00:03:26,579
the transient arena that we were using

97
00:03:22,799 --> 00:03:30,299
and if you notice what we well what I

98
00:03:26,579 --> 00:03:33,540
typed was incorrect this was supposed to

99
00:03:30,299 --> 00:03:36,689
use the memory for the transient storage

100
00:03:33,539 --> 00:03:40,828
but instead it just used the actual

101
00:03:36,689 --> 00:03:42,389
storage size right and so if you think

102
00:03:40,829 --> 00:03:43,739
about it this is literally this should

103
00:03:42,389 --> 00:03:45,629
not have worked at all because this is

104
00:03:43,739 --> 00:03:47,670
not memory this is just an integer

105
00:03:45,629 --> 00:03:49,769
somewhere right and we're using that

106
00:03:47,669 --> 00:03:52,738
integer as if it was a pointer to some

107
00:03:49,769 --> 00:03:54,569
memory does that make sense and most of

108
00:03:52,739 --> 00:03:56,189
the time the reason we don't really have

109
00:03:54,569 --> 00:03:58,169
bugs like this hardly ever on the stream

110
00:03:56,189 --> 00:04:00,719
is because most of the time we're we

111
00:03:58,169 --> 00:04:02,849
have ways of pretty carefully checking

112
00:04:00,719 --> 00:04:04,859
to make sure that we don't do that but

113
00:04:02,849 --> 00:04:06,780
in the case where we first initialize a

114
00:04:04,859 --> 00:04:08,549
memory arena obviously we're going from

115
00:04:06,780 --> 00:04:10,919
nothing to something so we kind of have

116
00:04:08,549 --> 00:04:13,140
to cast it up and so we can make a

117
00:04:10,919 --> 00:04:15,238
mistake there but why did that work at

118
00:04:13,139 --> 00:04:17,009
all and the reason if that worked at all

119
00:04:15,239 --> 00:04:19,019
is kind of interesting right if you take

120
00:04:17,009 --> 00:04:22,560
a look at it so if we take a look at our

121
00:04:19,019 --> 00:04:24,990
transient storage size now it just so

122
00:04:22,560 --> 00:04:26,959
happened that the transient storage size

123
00:04:24,990 --> 00:04:30,569
we picked right

124
00:04:26,959 --> 00:04:32,639
happened to be you know one gigabyte of

125
00:04:30,569 --> 00:04:34,769
memory that's just the size that we

126
00:04:32,639 --> 00:04:36,659
decided to pick for you know here in our

127
00:04:34,769 --> 00:04:37,829
in our debug session right that's that's

128
00:04:36,660 --> 00:04:40,110
what we were doing it's a gigabyte of

129
00:04:37,829 --> 00:04:41,729
memory we didn't pick a frame pick the

130
00:04:40,110 --> 00:04:43,290
reason we're not using nearly that much

131
00:04:41,730 --> 00:04:46,740
memory but that's just what we picked

132
00:04:43,290 --> 00:04:48,240
for a flat array to play with for now so

133
00:04:46,740 --> 00:04:49,829
basically what's happening is the

134
00:04:48,240 --> 00:04:52,500
transient state is getting initialized

135
00:04:49,829 --> 00:04:54,719
to point to something at the one

136
00:04:52,500 --> 00:04:59,000
gigabyte boundary right that's what's

137
00:04:54,720 --> 00:05:02,640
happening now if we look at sort of this

138
00:04:59,000 --> 00:05:05,040
at what we've got here it's a little bit

139
00:05:02,639 --> 00:05:07,319
odd because really we shouldn't have

140
00:05:05,040 --> 00:05:09,540
been able to access anything that was at

141
00:05:07,319 --> 00:05:11,579
that one gigabyte boundary right because

142
00:05:09,540 --> 00:05:13,230
if you take a look at where our stuff is

143
00:05:11,579 --> 00:05:14,789
our permanent stories in our transient

144
00:05:13,230 --> 00:05:17,460
storage the actual memory that we've

145
00:05:14,790 --> 00:05:21,629
reserved is nowhere near that one

146
00:05:17,459 --> 00:05:24,659
gigabyte boundary so something that has

147
00:05:21,629 --> 00:05:28,379
been legally allocated is sitting there

148
00:05:24,660 --> 00:05:29,850
right it's it's it's basically point of

149
00:05:28,379 --> 00:05:31,920
some page that's actually valid and

150
00:05:29,850 --> 00:05:33,600
we're just flat out using it we have no

151
00:05:31,920 --> 00:05:36,569
we're over writing something right now

152
00:05:33,600 --> 00:05:39,210
and we have no idea what now it could be

153
00:05:36,569 --> 00:05:40,170
something that we allocated prior right

154
00:05:39,209 --> 00:05:43,319
it could have been something that we

155
00:05:40,170 --> 00:05:44,370
were allocating before and so if you

156
00:05:43,319 --> 00:05:45,990
take a look at you know some of the

157
00:05:44,370 --> 00:05:47,129
stuff back here I don't know if it's one

158
00:05:45,990 --> 00:05:49,439
of these things you know one of these

159
00:05:47,129 --> 00:05:51,750
things might have been there that wasn't

160
00:05:49,439 --> 00:05:53,430
we also had there was there was another

161
00:05:51,750 --> 00:05:55,410
virtual Alec for like bitmaps and stuff

162
00:05:53,430 --> 00:05:57,810
so I don't actually know what was there

163
00:05:55,410 --> 00:05:59,640
we have no idea what was actually there

164
00:05:57,810 --> 00:06:02,040
and it's not really super possible for

165
00:05:59,639 --> 00:06:03,360
us to find out because it could be some

166
00:06:02,040 --> 00:06:06,629
you know just random stuff that we

167
00:06:03,360 --> 00:06:08,400
allocate in a person I have no idea but

168
00:06:06,629 --> 00:06:12,029
because there was nothing there it

169
00:06:08,399 --> 00:06:13,889
actually lets us access that right

170
00:06:12,029 --> 00:06:16,829
we're totally allowed to write into that

171
00:06:13,889 --> 00:06:18,389
without crashing and we actually use the

172
00:06:16,829 --> 00:06:20,009
state that was there we actually used

173
00:06:18,389 --> 00:06:22,979
whatever was there and make some stuff

174
00:06:20,009 --> 00:06:25,529
right which is crazy so that shouldn't

175
00:06:22,980 --> 00:06:27,450
worked but it does when that memory

176
00:06:25,529 --> 00:06:29,519
happens to be legal now it should be the

177
00:06:27,449 --> 00:06:31,620
case that that memory will not always be

178
00:06:29,519 --> 00:06:33,990
legal like this should crash on other

179
00:06:31,620 --> 00:06:36,060
people's machines potentially or just a

180
00:06:33,990 --> 00:06:38,009
different run on this machine and we

181
00:06:36,060 --> 00:06:39,180
just got very lucky there so really that

182
00:06:38,009 --> 00:06:40,159
should have crashed it was pretty odd

183
00:06:39,180 --> 00:06:41,689
that it didn't

184
00:06:40,160 --> 00:06:43,280
but unfortunately there's not that much

185
00:06:41,689 --> 00:06:45,199
you can do at an it time when you're

186
00:06:43,279 --> 00:06:46,639
first building your memory you've got to

187
00:06:45,199 --> 00:06:47,899
be careful because you can pretty

188
00:06:46,639 --> 00:06:49,639
trivially they make that mistake because

189
00:06:47,899 --> 00:06:51,859
you're doing a cast they're most of the

190
00:06:49,639 --> 00:06:53,269
rest of time we don't do casts so we get

191
00:06:51,860 --> 00:06:54,680
some protection to make sure that we're

192
00:06:53,269 --> 00:06:58,099
not doing something ridiculous like

193
00:06:54,680 --> 00:06:59,720
casting it I meant like that but anyway

194
00:06:58,100 --> 00:07:02,960
so what we really wanted here was to use

195
00:06:59,720 --> 00:07:05,300
the transient storage pointer right then

196
00:07:02,959 --> 00:07:07,639
say is that initialized and then when we

197
00:07:05,300 --> 00:07:11,329
initialize the Arena we wanted to again

198
00:07:07,639 --> 00:07:13,099
use transient storage not the size to

199
00:07:11,329 --> 00:07:15,529
point to where we were going and I

200
00:07:13,100 --> 00:07:17,210
believe that's the extent of kind of the

201
00:07:15,529 --> 00:07:19,339
typo that had snuck in there we're just

202
00:07:17,209 --> 00:07:20,750
using the size instead of the thing and

203
00:07:19,339 --> 00:07:23,089
again that that won't actually change

204
00:07:20,750 --> 00:07:26,269
the running at all it's just that should

205
00:07:23,089 --> 00:07:28,339
have crashed it didn't crash because we

206
00:07:26,269 --> 00:07:29,329
got I guess unlucky really because we

207
00:07:28,339 --> 00:07:30,349
would have preferred it crashed right

208
00:07:29,329 --> 00:07:32,810
away we would have been like oh yeah

209
00:07:30,350 --> 00:07:34,010
whoops so anyway let's get back to what

210
00:07:32,810 --> 00:07:36,589
we were doing so what I was saying

211
00:07:34,009 --> 00:07:38,149
before is we we wanted to produce an

212
00:07:36,589 --> 00:07:39,560
endlessly tiling ground texture and

213
00:07:38,149 --> 00:07:41,719
there's two things we haven't done yet

214
00:07:39,560 --> 00:07:43,160
to finish that up as you can see there

215
00:07:41,720 --> 00:07:45,860
is a ground texture beneath us right now

216
00:07:43,160 --> 00:07:47,840
and it is different everywhere but it is

217
00:07:45,860 --> 00:07:49,610
seemed right so you can see the seams

218
00:07:47,839 --> 00:07:51,109
between it so the first thing that we'd

219
00:07:49,610 --> 00:07:52,759
like to be able to do is turn that

220
00:07:51,110 --> 00:07:54,590
ground texture into something from

221
00:07:52,759 --> 00:07:57,219
something that has a seam to something

222
00:07:54,589 --> 00:07:59,799
that is seamless right so that it always

223
00:07:57,220 --> 00:08:02,690
lines up kind of with its neighbors and

224
00:07:59,800 --> 00:08:04,639
doesn't ever show like an artifact at

225
00:08:02,689 --> 00:08:05,959
that boundary right that's actually

226
00:08:04,639 --> 00:08:07,250
pretty easy to do I know it sounds a

227
00:08:05,959 --> 00:08:08,269
little bit difficult maybe at first but

228
00:08:07,250 --> 00:08:09,439
based on the way that we've architected

229
00:08:08,269 --> 00:08:10,519
things I don't think that's going to

230
00:08:09,439 --> 00:08:12,019
particularly difficult so really that

231
00:08:10,519 --> 00:08:13,789
first but then we have another thing to

232
00:08:12,019 --> 00:08:14,959
do which is gonna be a little more of a

233
00:08:13,790 --> 00:08:16,580
think through although we could just

234
00:08:14,959 --> 00:08:18,889
again do a pretty basic implementation

235
00:08:16,579 --> 00:08:20,409
now and come back to it later when we're

236
00:08:18,889 --> 00:08:22,459
doing more performance optimization

237
00:08:20,410 --> 00:08:24,740
again you'll also notice that frame

238
00:08:22,459 --> 00:08:26,659
stuttering there that's something to

239
00:08:24,740 --> 00:08:29,060
keep in mind that's when we when we are

240
00:08:26,660 --> 00:08:30,830
building new ground textures like I said

241
00:08:29,060 --> 00:08:32,450
before another thing that we're not

242
00:08:30,829 --> 00:08:35,689
going to do for a while this is totally

243
00:08:32,450 --> 00:08:37,520
performance stuff again is making that

244
00:08:35,690 --> 00:08:38,479
happen in the background overlapped but

245
00:08:37,519 --> 00:08:42,049
we're not going to tackle that for a

246
00:08:38,479 --> 00:08:44,389
while so anyway after I go relatively

247
00:08:42,049 --> 00:08:46,669
far actually I've got a ways to go here

248
00:08:44,389 --> 00:08:49,009
because we may be set that number of

249
00:08:46,669 --> 00:08:51,229
cached ground tiles a bit high but right

250
00:08:49,009 --> 00:08:53,569
now we never evict any ground tiles from

251
00:08:51,230 --> 00:08:54,019
our cache so basically eventually you

252
00:08:53,570 --> 00:08:56,300
get to the

253
00:08:54,019 --> 00:08:58,250
and there are no more ground cast tiles

254
00:08:56,299 --> 00:09:00,469
to fill and we run out of textures right

255
00:08:58,250 --> 00:09:03,259
so what we need to do as our second

256
00:09:00,470 --> 00:09:06,440
thing is we need to be able to evict old

257
00:09:03,259 --> 00:09:08,210
tiles tiles that were back kind of you

258
00:09:06,440 --> 00:09:10,430
know at the start that we didn't

259
00:09:08,210 --> 00:09:12,290
actually need anymore when we got here

260
00:09:10,429 --> 00:09:14,539
we need to be able to evict those out of

261
00:09:12,289 --> 00:09:16,189
our texture cache that we're using right

262
00:09:14,539 --> 00:09:18,019
now to cache that gross ground but first

263
00:09:16,190 --> 00:09:20,060
we need to get rid of those and then we

264
00:09:18,019 --> 00:09:21,740
need to generate new ones for these

265
00:09:20,059 --> 00:09:23,269
areas so obviously we know how to

266
00:09:21,740 --> 00:09:24,500
generate the new ones we just don't have

267
00:09:23,269 --> 00:09:26,539
a thing that actually evict so that

268
00:09:24,500 --> 00:09:28,429
eviction scheme is gonna be the other

269
00:09:26,539 --> 00:09:30,049
thing that we do alright so let's talk

270
00:09:28,429 --> 00:09:31,429
briefly on the blackboard it's really

271
00:09:30,049 --> 00:09:32,599
like I said pretty simple actually the

272
00:09:31,429 --> 00:09:34,339
first thing we're gonna do so let's talk

273
00:09:32,600 --> 00:09:36,769
briefly on the blackboard about what

274
00:09:34,340 --> 00:09:38,720
we're gonna do to get seamless tiles in

275
00:09:36,769 --> 00:09:40,819
and then I'll go implement it and then

276
00:09:38,720 --> 00:09:42,080
after that we'll we should have some

277
00:09:40,820 --> 00:09:43,879
time to start work on the eviction

278
00:09:42,080 --> 00:09:45,470
scheme I would hope but it again it

279
00:09:43,879 --> 00:09:48,350
depends on how well things go I suppose

280
00:09:45,470 --> 00:09:50,540
we could run into some hairiness that

281
00:09:48,350 --> 00:09:53,840
takes longer then it then it would

282
00:09:50,539 --> 00:09:55,129
otherwise so alright so here on day 87 I

283
00:09:53,840 --> 00:09:59,840
believe that's where we're at right yeah

284
00:09:55,129 --> 00:10:01,549
day 7 so here on day 87 mmm again for

285
00:09:59,840 --> 00:10:03,440
those of you just joining us each day is

286
00:10:01,549 --> 00:10:05,659
an hour so we're 87 hours into the

287
00:10:03,440 --> 00:10:07,340
coding right now or are it's like our

288
00:10:05,659 --> 00:10:10,250
third week of programming if you thought

289
00:10:07,340 --> 00:10:11,840
of it that way basically if you think

290
00:10:10,250 --> 00:10:13,009
about work weeks they're like 40 hours a

291
00:10:11,840 --> 00:10:14,840
week of programming or something like

292
00:10:13,009 --> 00:10:16,100
this somewhere somewhere there or if you

293
00:10:14,840 --> 00:10:17,990
only work if you only get to program

294
00:10:16,100 --> 00:10:19,550
about 30 hours a week which is actually

295
00:10:17,990 --> 00:10:20,570
kind of difficult for me sometimes I

296
00:10:19,549 --> 00:10:21,620
only get to program 20 hours a week

297
00:10:20,570 --> 00:10:23,900
because I have to do a bunch of other

298
00:10:21,620 --> 00:10:25,820
stuff management wise and and art wise

299
00:10:23,899 --> 00:10:27,110
and things like this it could be more

300
00:10:25,820 --> 00:10:30,020
but basically like if you were actually

301
00:10:27,110 --> 00:10:31,730
a full-time programing all day so think

302
00:10:30,019 --> 00:10:35,110
about this is we're in our third week of

303
00:10:31,730 --> 00:10:37,759
programming here all right so here we go

304
00:10:35,110 --> 00:10:39,289
here is a tile and the way that we're

305
00:10:37,759 --> 00:10:42,230
constructing these tiles right now right

306
00:10:39,289 --> 00:10:45,139
is we're splatting textures into them

307
00:10:42,230 --> 00:10:46,970
that have soft edges and by splatting a

308
00:10:45,139 --> 00:10:50,120
bunch of things in here we produce a

309
00:10:46,970 --> 00:10:51,740
nice ground texture right and the

310
00:10:50,120 --> 00:10:55,250
problem that we're having right now is

311
00:10:51,740 --> 00:10:57,590
we do that completely irrespective of

312
00:10:55,250 --> 00:11:02,240
the hard clip boundary that sort of gets

313
00:10:57,590 --> 00:11:05,300
enforced like so right and so what we'd

314
00:11:02,240 --> 00:11:07,039
like to do is we'd like these we'd like

315
00:11:05,299 --> 00:11:07,849
these to be seamless so whatever was

316
00:11:07,039 --> 00:11:10,789
getting splattered

317
00:11:07,850 --> 00:11:14,089
over here we'd like it almost to be as

318
00:11:10,789 --> 00:11:15,799
if we had had done that splatting you

319
00:11:14,089 --> 00:11:17,899
know as well as the splatting up at the

320
00:11:15,799 --> 00:11:20,208
top and the splatting here and so on so

321
00:11:17,899 --> 00:11:22,159
that all of the splats in the nine sorry

322
00:11:20,208 --> 00:11:23,778
in the eight neighbors actually

323
00:11:22,159 --> 00:11:26,509
contributed to this flat and then it

324
00:11:23,778 --> 00:11:31,129
would be seamless right if you think

325
00:11:26,509 --> 00:11:32,930
about it because we know that seamless

326
00:11:31,129 --> 00:11:35,088
inside so if you thought of this as just

327
00:11:32,929 --> 00:11:36,588
one big splatting region we know that we

328
00:11:35,089 --> 00:11:37,240
could grab out this part and it would be

329
00:11:36,589 --> 00:11:41,540
correct

330
00:11:37,240 --> 00:11:43,190
so really at least right now all we

331
00:11:41,539 --> 00:11:46,028
really need to do to make these seamless

332
00:11:43,190 --> 00:11:51,410
is actually do exactly what I just said

333
00:11:46,028 --> 00:11:54,620
splat an entire 3x3 and only extract the

334
00:11:51,409 --> 00:11:56,659
middle part right now that wouldn't help

335
00:11:54,620 --> 00:11:58,818
us at all if we just did random slotting

336
00:11:56,659 --> 00:12:01,789
across this but if we actually ensured

337
00:11:58,818 --> 00:12:04,729
that each of these was doing the same

338
00:12:01,789 --> 00:12:07,429
splatting that it actually does when

339
00:12:04,730 --> 00:12:08,930
it's generated itself then we know that

340
00:12:07,429 --> 00:12:10,939
all of our slats will line up and

341
00:12:08,929 --> 00:12:12,679
furthermore we know that the composite

342
00:12:10,940 --> 00:12:15,139
order will be the same if we always

343
00:12:12,679 --> 00:12:17,239
enforce a rigid order when we walk

344
00:12:15,139 --> 00:12:19,310
through these right so if we always do

345
00:12:17,240 --> 00:12:20,509
you know upper-left you know this one

346
00:12:19,309 --> 00:12:22,338
this one this one this one this one

347
00:12:20,509 --> 00:12:23,930
right and so on although really since

348
00:12:22,339 --> 00:12:25,819
our coordinate system is why up this way

349
00:12:23,929 --> 00:12:27,318
you might think of it as doing this one

350
00:12:25,818 --> 00:12:28,490
first then these right but doesn't

351
00:12:27,318 --> 00:12:30,349
matter as long as we always do them in

352
00:12:28,490 --> 00:12:32,419
the same order we'll always get the same

353
00:12:30,350 --> 00:12:34,879
overlap pattern as well for any given

354
00:12:32,419 --> 00:12:36,620
tile so that's really all we need to do

355
00:12:34,879 --> 00:12:38,568
and of course the good news is since

356
00:12:36,620 --> 00:12:40,818
this is our bitmap code already does

357
00:12:38,568 --> 00:12:42,979
clipping we actually don't need to do

358
00:12:40,818 --> 00:12:45,649
anything special to do this extraction

359
00:12:42,980 --> 00:12:48,319
we don't need to actually produce this

360
00:12:45,649 --> 00:12:52,278
3x3 we can just still set the clip clip

361
00:12:48,318 --> 00:12:54,229
region here and do the splats you know

362
00:12:52,278 --> 00:12:55,549
as if they were up here and ones that

363
00:12:54,230 --> 00:12:58,009
don't land in the thing will just get

364
00:12:55,549 --> 00:12:59,719
early rejected by our clipping and won't

365
00:12:58,009 --> 00:13:01,639
hardly cost us anything either so that's

366
00:12:59,720 --> 00:13:03,410
pretty nice too so even before we

367
00:13:01,639 --> 00:13:04,579
optimize this at all we're getting a

368
00:13:03,409 --> 00:13:06,019
little bit of a bonus there just in the

369
00:13:04,578 --> 00:13:07,969
fact that the bitmap clipping which has

370
00:13:06,019 --> 00:13:08,990
to happen anyway to avoid us overall

371
00:13:07,970 --> 00:13:12,980
writing memory bounds will basically

372
00:13:08,990 --> 00:13:16,159
take all that out of us for us so all I

373
00:13:12,980 --> 00:13:18,500
really need to do to fix this I believe

374
00:13:16,159 --> 00:13:20,360
unless you know sometimes I'm wrong on

375
00:13:18,500 --> 00:13:21,470
the stream right you know when you're

376
00:13:20,360 --> 00:13:22,909
programming it's

377
00:13:21,470 --> 00:13:24,200
not a cases you're always right kind of

378
00:13:22,909 --> 00:13:25,789
thing that's that's not how it works Oh

379
00:13:24,200 --> 00:13:26,660
which that was how it works not how it

380
00:13:25,789 --> 00:13:33,679
works

381
00:13:26,659 --> 00:13:35,959
so yeah okay so what I want to do is I

382
00:13:33,679 --> 00:13:40,219
want to you know modify this right here

383
00:13:35,960 --> 00:13:42,610
to basically do you know a three by

384
00:13:40,220 --> 00:13:45,550
threes worth while still using the same

385
00:13:42,610 --> 00:13:48,019
area for filling the ground chunk okay

386
00:13:45,549 --> 00:13:50,299
so if you think what through what's

387
00:13:48,019 --> 00:13:52,039
going to happen here we're gonna use a

388
00:13:50,299 --> 00:13:54,349
random seed with our chunk X chunk Y

389
00:13:52,039 --> 00:13:56,120
chunk Z only instead of using them from

390
00:13:54,350 --> 00:13:58,009
the actual chunk that's passed in we're

391
00:13:56,120 --> 00:14:00,379
gonna introduce new synthetic variables

392
00:13:58,009 --> 00:14:02,750
for X Y and see that we're gonna iterate

393
00:14:00,379 --> 00:14:05,840
over now we're not doing any Z handling

394
00:14:02,750 --> 00:14:07,970
here so actually a chunk Z for now at

395
00:14:05,840 --> 00:14:09,530
least and probably for always because we

396
00:14:07,970 --> 00:14:11,330
we aren't doing three-dimensional

397
00:14:09,529 --> 00:14:13,189
texturing or anything like that for we

398
00:14:11,330 --> 00:14:14,840
don't we don't need the the Z to be

399
00:14:13,190 --> 00:14:17,690
seamless that doesn't even mean anything

400
00:14:14,840 --> 00:14:19,629
in our world at the moment so at the

401
00:14:17,690 --> 00:14:22,520
moment chunk Z will stay the same always

402
00:14:19,629 --> 00:14:25,490
but the others right chunk X and trunk y

403
00:14:22,519 --> 00:14:28,250
we will loop over now right we will loop

404
00:14:25,490 --> 00:14:30,740
over those and the way that we want to

405
00:14:28,250 --> 00:14:32,509
loop over those is we want to start with

406
00:14:30,740 --> 00:14:34,840
that chunk P that we would have been

407
00:14:32,509 --> 00:14:39,169
using and we want to go back one right

408
00:14:34,840 --> 00:14:41,870
then we want to go from there to plus

409
00:14:39,169 --> 00:14:44,329
one right so we're doing you know that

410
00:14:41,870 --> 00:14:47,240
that sort of extra that three across

411
00:14:44,330 --> 00:14:49,879
kind of thing and we're going to do that

412
00:14:47,240 --> 00:14:52,519
both in the X and the y directions and

413
00:14:49,879 --> 00:14:54,409
it's pretty arbitrary what order we

414
00:14:52,519 --> 00:14:56,360
choose to do these in as long as we do

415
00:14:54,409 --> 00:14:59,449
an enforced order I believe we should

416
00:14:56,360 --> 00:15:01,580
get seamless chunks out of it but again

417
00:14:59,450 --> 00:15:03,680
like I said we will have to wait and see

418
00:15:01,580 --> 00:15:06,680
so then we come in here and we do the

419
00:15:03,679 --> 00:15:08,689
draw loop exactly the same as we have

420
00:15:06,679 --> 00:15:12,739
been doing it and now it's going to do

421
00:15:08,690 --> 00:15:14,720
that splatting in all nine of the of the

422
00:15:12,740 --> 00:15:16,850
sections instead of just the middle one

423
00:15:14,720 --> 00:15:19,000
now what we do need to do though is we

424
00:15:16,850 --> 00:15:21,740
need to make sure that our Center

425
00:15:19,000 --> 00:15:24,080
accurately reflects the fact that we're

426
00:15:21,740 --> 00:15:26,659
in sort of a different a different chunk

427
00:15:24,080 --> 00:15:29,750
area and to do that I think you know

428
00:15:26,659 --> 00:15:31,039
what I could do here I'm not sure this

429
00:15:29,750 --> 00:15:33,080
might actually be the easier way to

430
00:15:31,039 --> 00:15:35,299
write the loop is I could just go in

431
00:15:33,080 --> 00:15:38,270
here and actually compute these two

432
00:15:35,299 --> 00:15:41,029
on the fly and use an offset value here

433
00:15:38,269 --> 00:15:43,730
instead so it'd be like chunk offset Y

434
00:15:41,029 --> 00:15:47,149
if that makes sense and just have that

435
00:15:43,730 --> 00:15:48,950
loop from negative one to one instead so

436
00:15:47,149 --> 00:15:52,490
that I can do an additional computation

437
00:15:48,950 --> 00:15:54,140
with it in here to compute what I want

438
00:15:52,490 --> 00:15:55,909
the center point to be I'll show you

439
00:15:54,139 --> 00:15:58,669
that in one second so I'm just gonna

440
00:15:55,909 --> 00:16:01,159
move that in here and say that okay it's

441
00:15:58,669 --> 00:16:03,829
gonna be whatever the chunk offset is

442
00:16:01,159 --> 00:16:05,600
like that that's gonna happen in x and y

443
00:16:03,830 --> 00:16:07,070
you can kind of see what's going on here

444
00:16:05,600 --> 00:16:09,830
right nothing particularly special I'm

445
00:16:07,070 --> 00:16:13,250
just reconstructing but changing the way

446
00:16:09,830 --> 00:16:15,560
that the loop loop offset works so that

447
00:16:13,250 --> 00:16:17,029
I can you know use it more directly so

448
00:16:15,559 --> 00:16:19,309
there we go we've got our negative one

449
00:16:17,029 --> 00:16:20,659
and we've got our one and it's inclusive

450
00:16:19,309 --> 00:16:21,859
so it's gonna use negative one zero and

451
00:16:20,659 --> 00:16:23,899
one when it does this right those are

452
00:16:21,860 --> 00:16:24,860
the three that it's going to do and it's

453
00:16:23,899 --> 00:16:26,990
gonna do those in both times we're gonna

454
00:16:24,860 --> 00:16:29,120
do a total of nine all right so we

455
00:16:26,990 --> 00:16:31,340
compute our chunk X in our chunk Y right

456
00:16:29,120 --> 00:16:32,629
and we could even put chunk Z in here

457
00:16:31,340 --> 00:16:35,750
just for completeness you can see them

458
00:16:32,629 --> 00:16:38,659
all easily and when we have those I now

459
00:16:35,750 --> 00:16:43,159
need to compute the center point like is

460
00:16:38,659 --> 00:16:43,819
the bitmap the the actual center how

461
00:16:43,159 --> 00:16:46,730
should I say this

462
00:16:43,820 --> 00:16:52,370
so the actual center of the bitmap per

463
00:16:46,730 --> 00:16:53,600
se was actually not being used I'm

464
00:16:52,370 --> 00:16:55,129
trying to think of how to explain this

465
00:16:53,600 --> 00:16:56,180
so previously I think I need the

466
00:16:55,129 --> 00:16:58,279
whiteboard just to kind of give you the

467
00:16:56,179 --> 00:16:59,599
idea so previously we were using the

468
00:16:58,279 --> 00:17:01,549
bitmap Center and we were like picking

469
00:16:59,600 --> 00:17:03,889
where we're gonna splat by moving out

470
00:17:01,549 --> 00:17:05,990
from there and so since we're trying to

471
00:17:03,889 --> 00:17:07,879
do each of these individually when we

472
00:17:05,990 --> 00:17:09,588
say bitmap Center what we really mean is

473
00:17:07,880 --> 00:17:12,380
a different is the center of whichever

474
00:17:09,588 --> 00:17:14,029
one of these chunks were on and so

475
00:17:12,380 --> 00:17:16,790
really I need to kind of change that

476
00:17:14,029 --> 00:17:19,670
meaning right I need to change the

477
00:17:16,789 --> 00:17:21,529
center meaning here to basically mean

478
00:17:19,670 --> 00:17:23,779
the center of the chunk we're currently

479
00:17:21,529 --> 00:17:26,088
on so this would be the chunk that we're

480
00:17:23,779 --> 00:17:29,539
on right if if we were in the middle

481
00:17:26,088 --> 00:17:31,159
chunk but we need to subtract one in in

482
00:17:29,539 --> 00:17:33,200
you know width or in height or whatever

483
00:17:31,160 --> 00:17:35,680
we need to like subtract or add

484
00:17:33,200 --> 00:17:38,569
depending on what that offset is right

485
00:17:35,680 --> 00:17:39,920
and so essentially what we're gonna do

486
00:17:38,569 --> 00:17:43,429
is we're gonna say all right let's

487
00:17:39,920 --> 00:17:46,160
suppose we started with the upper corner

488
00:17:43,430 --> 00:17:48,310
right so this is the center right this

489
00:17:46,160 --> 00:17:50,110
is the center that we were using before

490
00:17:48,309 --> 00:17:52,149
let's say that we actually wanted to

491
00:17:50,109 --> 00:17:53,859
subtract write the width and height from

492
00:17:52,150 --> 00:17:55,810
that you know I'm saying so we were

493
00:17:53,859 --> 00:17:59,889
start up there and then what we would

494
00:17:55,809 --> 00:18:01,329
want to do is add in a width and height

495
00:17:59,890 --> 00:18:03,550
that's proportional to whatever the

496
00:18:01,329 --> 00:18:10,470
offset is right so I want to take the

497
00:18:03,549 --> 00:18:13,990
offset X the offset Y like so hmm right

498
00:18:10,470 --> 00:18:18,610
and for each one of those I want to move

499
00:18:13,990 --> 00:18:19,660
with in that direction right so if I go

500
00:18:18,609 --> 00:18:21,699
ahead and compile this you can kind of

501
00:18:19,660 --> 00:18:23,710
see in fact I think we might be almost

502
00:18:21,700 --> 00:18:25,120
done this is a little inefficient right

503
00:18:23,710 --> 00:18:27,250
obviously what we're doing here is

504
00:18:25,119 --> 00:18:28,449
saying we're gonna move half the width

505
00:18:27,250 --> 00:18:30,279
and height forward and then we're gonna

506
00:18:28,450 --> 00:18:31,900
move back by the width of heights again

507
00:18:30,279 --> 00:18:34,539
so you can see I can just kind of

508
00:18:31,900 --> 00:18:37,720
algebraically simplify this it's kind of

509
00:18:34,539 --> 00:18:41,409
like 0.5 a minus a that's just negative

510
00:18:37,720 --> 00:18:43,480
0.5 a right now pretty simple and off we

511
00:18:41,410 --> 00:18:45,160
go so I'm not sure if I totally did

512
00:18:43,480 --> 00:18:46,500
everything right there but I think the

513
00:18:45,160 --> 00:18:49,000
center is all we would need to change

514
00:18:46,500 --> 00:18:50,589
and then the random seed is just going

515
00:18:49,000 --> 00:18:52,089
to be off that chunk so we know that we

516
00:18:50,589 --> 00:18:54,639
will always use the same set of random

517
00:18:52,089 --> 00:18:57,879
points each time we go so let's take a

518
00:18:54,640 --> 00:18:59,590
look here when we do this we've got our

519
00:18:57,880 --> 00:19:00,040
stamp a standpipe we do a width times

520
00:18:59,589 --> 00:19:02,829
height

521
00:19:00,039 --> 00:19:05,619
random unilateral for the offset off of

522
00:19:02,829 --> 00:19:07,960
the bitmap Center that seems pretty

523
00:19:05,619 --> 00:19:09,369
straightforward I think we may be done I

524
00:19:07,960 --> 00:19:11,860
don't know let's let's do my step

525
00:19:09,369 --> 00:19:13,899
through and check but let's take a look

526
00:19:11,859 --> 00:19:15,549
at what we actually get when we produce

527
00:19:13,900 --> 00:19:18,370
these now again they take a long time to

528
00:19:15,549 --> 00:19:20,589
produce unfortunately well that isn't

529
00:19:18,369 --> 00:19:24,189
seamless at all all right so we've still

530
00:19:20,589 --> 00:19:26,819
got a little bit of nastiness in here so

531
00:19:24,190 --> 00:19:31,630
let's find out what I'm what I did wrong

532
00:19:26,819 --> 00:19:37,269
all right so let's think about this for

533
00:19:31,630 --> 00:19:39,820
a minute we are still doing so okay so

534
00:19:37,269 --> 00:19:41,500
we come through we do our blitz we pick

535
00:19:39,819 --> 00:19:43,149
our random seed the random seed should

536
00:19:41,500 --> 00:19:45,069
be constant because its base of Charlie

537
00:19:43,150 --> 00:19:48,310
off of the chunks the absolute chunk

538
00:19:45,069 --> 00:19:51,220
index which is what we want that center

539
00:19:48,309 --> 00:19:53,529
point should be correct negative with

540
00:19:51,220 --> 00:19:54,850
the heights up to the top yeah and then

541
00:19:53,529 --> 00:19:59,740
it's going to be whatever the trunk

542
00:19:54,849 --> 00:20:01,329
offset is oh no sorry that is incorrect

543
00:19:59,740 --> 00:20:04,299
I lied

544
00:20:01,329 --> 00:20:06,669
that was not right so since we're the

545
00:20:04,299 --> 00:20:08,440
chunk offset ranges from negative one

546
00:20:06,670 --> 00:20:11,470
zero plus one

547
00:20:08,440 --> 00:20:13,210
I was overzealous there that I did the

548
00:20:11,470 --> 00:20:16,600
computation as if the chunk offset was

549
00:20:13,210 --> 00:20:18,850
zero one two so that was that was just

550
00:20:16,599 --> 00:20:21,189
done so if we start from the center this

551
00:20:18,849 --> 00:20:23,649
will properly move us back to the upper

552
00:20:21,190 --> 00:20:25,660
left one and down to the lower right one

553
00:20:23,650 --> 00:20:27,790
okay so let's see where we're at with

554
00:20:25,660 --> 00:20:30,220
that and then start to pucking because

555
00:20:27,789 --> 00:20:33,909
that was just yeah stupid computation

556
00:20:30,220 --> 00:20:37,870
error on my part so let's see where

557
00:20:33,910 --> 00:20:41,440
we're at at this point all right so yeah

558
00:20:37,869 --> 00:20:44,349
that is that is not immediately obvious

559
00:20:41,440 --> 00:20:45,610
to me what the bug is there it still

560
00:20:44,349 --> 00:20:49,000
looks like we've got something

561
00:20:45,609 --> 00:20:52,479
relatively significant like we should be

562
00:20:49,000 --> 00:20:54,700
able to tell if this makes sense we

563
00:20:52,480 --> 00:20:57,759
should be able to tell if we're getting

564
00:20:54,700 --> 00:21:00,130
close by whether the things line up you

565
00:20:57,759 --> 00:21:01,299
know in a in a relatively close way or

566
00:21:00,130 --> 00:21:02,530
whether they're still pretty far off and

567
00:21:01,299 --> 00:21:05,619
those looks still pretty far after me so

568
00:21:02,529 --> 00:21:06,759
we have some major logic problem and

569
00:21:05,619 --> 00:21:08,709
unfortunately we don't have a whole lot

570
00:21:06,759 --> 00:21:09,970
in the way of debug services yet it's

571
00:21:08,710 --> 00:21:11,710
still before we've gotten to the point

572
00:21:09,970 --> 00:21:14,140
we write those so we're still kind of

573
00:21:11,710 --> 00:21:15,400
flying a little bit on intuition but I

574
00:21:14,140 --> 00:21:17,770
think we should be able to do it again

575
00:21:15,400 --> 00:21:20,740
this shouldn't be too hard so let's just

576
00:21:17,769 --> 00:21:24,220
take another look at it and see so we

577
00:21:20,740 --> 00:21:31,180
know we're doing wait a minute wait a

578
00:21:24,220 --> 00:21:35,500
minute this isn't being used people what

579
00:21:31,180 --> 00:21:38,769
this was just old code oh for crying out

580
00:21:35,500 --> 00:21:43,359
loud all right well we need that to work

581
00:21:38,769 --> 00:21:45,789
obviously that's hilarious so if we were

582
00:21:43,359 --> 00:21:50,559
doing an offset without that we need the

583
00:21:45,789 --> 00:21:51,789
center to be in there people really I'm

584
00:21:50,559 --> 00:21:53,589
gonna I don't know that I want to put an

585
00:21:51,789 --> 00:21:56,289
owl of shame up for that I mean he's

586
00:21:53,589 --> 00:21:57,819
peeking at us right now for not checking

587
00:21:56,289 --> 00:22:01,049
but you know I don't think he's really

588
00:21:57,819 --> 00:22:03,369
there entirely but yeah so okay that's

589
00:22:01,049 --> 00:22:05,950
obviously pretty dumb and so if we're

590
00:22:03,369 --> 00:22:07,989
gonna do that offset what I would need

591
00:22:05,950 --> 00:22:09,880
to do is if we're just doing the offset

592
00:22:07,990 --> 00:22:12,039
there I would need to make that offset

593
00:22:09,880 --> 00:22:13,420
be just the upper corner because it

594
00:22:12,039 --> 00:22:15,399
looks like we're using random you know

595
00:22:13,420 --> 00:22:17,259
for the width and the height so yeah I

596
00:22:15,400 --> 00:22:18,940
suppose that is an a love shame like

597
00:22:17,259 --> 00:22:20,259
before you go modifying some code you

598
00:22:18,940 --> 00:22:21,700
should probably look at it to see what

599
00:22:20,259 --> 00:22:24,190
it does like I just assumed I knew what

600
00:22:21,700 --> 00:22:25,960
it did because I wrote it but I mean you

601
00:22:24,190 --> 00:22:27,549
know hey I program all day on a

602
00:22:25,960 --> 00:22:29,319
completely different codebase and then I

603
00:22:27,549 --> 00:22:31,720
come back to this thing it's not

604
00:22:29,319 --> 00:22:37,379
surprising that I forget all right so we

605
00:22:31,720 --> 00:22:39,850
are now seamless across X but we are not

606
00:22:37,380 --> 00:22:42,840
seamless across Y so we're getting

607
00:22:39,849 --> 00:22:45,579
closer right you can see how how that

608
00:22:42,839 --> 00:22:47,889
how that is right now does that make

609
00:22:45,579 --> 00:22:50,230
sense so we've still got a bug and our

610
00:22:47,890 --> 00:22:53,710
bug is in the Y I assume that's because

611
00:22:50,230 --> 00:22:55,269
we've got the Y flipped in some bad way

612
00:22:53,710 --> 00:22:57,009
or there's something weird happening

613
00:22:55,269 --> 00:22:58,450
with the Y that we are not doing

614
00:22:57,009 --> 00:22:59,259
properly so let's take a look and the

615
00:22:58,450 --> 00:23:04,090
other thing you know what I should

616
00:22:59,259 --> 00:23:06,579
probably do is let's let's just take one

617
00:23:04,089 --> 00:23:09,849
of these out of the equation here so

618
00:23:06,579 --> 00:23:11,409
that we can take a look at at the Edit a

619
00:23:09,849 --> 00:23:14,289
little simpler all right

620
00:23:11,410 --> 00:23:16,150
so taking a look at this now we've got

621
00:23:14,289 --> 00:23:17,349
why do we still have grass

622
00:23:16,150 --> 00:23:20,740
why don't we still have grass chunks in

623
00:23:17,349 --> 00:23:23,469
there if I if zeroed out tuft oh because

624
00:23:20,740 --> 00:23:25,539
this is doing this is doing either of

625
00:23:23,470 --> 00:23:27,009
those two I see so those were the Tufts

626
00:23:25,539 --> 00:23:28,269
that we were putting in there all right

627
00:23:27,009 --> 00:23:29,890
so nevermind done even though I wasn't

628
00:23:28,269 --> 00:23:31,359
even looking at the Tufts all right so

629
00:23:29,890 --> 00:23:33,070
if we take the test out of the equation

630
00:23:31,359 --> 00:23:34,509
and this is actually building it so now

631
00:23:33,069 --> 00:23:35,799
we know that we're just looking at in

632
00:23:34,509 --> 00:23:38,650
here so we don't have to worry about

633
00:23:35,799 --> 00:23:41,409
this guy yet so let's take a look what

634
00:23:38,650 --> 00:23:43,300
are we doing differently with the Y so

635
00:23:41,410 --> 00:23:44,410
we have the bitmap Center that's the

636
00:23:43,299 --> 00:23:47,529
center of the thing that we're stamping

637
00:23:44,410 --> 00:23:50,560
we have the offset and that's an offset

638
00:23:47,529 --> 00:23:53,349
inside the the bitmap and that's getting

639
00:23:50,559 --> 00:23:54,909
moved sort of by whatever the center is

640
00:23:53,349 --> 00:23:56,529
of the one we're doing and then we're

641
00:23:54,910 --> 00:23:57,640
subtracting away the bitmap Center which

642
00:23:56,529 --> 00:23:59,529
is basically the thing that we're

643
00:23:57,640 --> 00:24:04,870
stamping down and then we're doing that

644
00:23:59,529 --> 00:24:07,779
draw right now the center is properly

645
00:24:04,869 --> 00:24:10,059
computed as whatever the chunk offset

646
00:24:07,779 --> 00:24:14,170
with that - it's subtracting that or

647
00:24:10,059 --> 00:24:18,369
adding that that looks relatively sane

648
00:24:14,170 --> 00:24:21,250
to me so I'm not exactly sure why would

649
00:24:18,369 --> 00:24:23,559
we be why we would be getting a weird

650
00:24:21,250 --> 00:24:26,200
result from the Y I'm trying to think if

651
00:24:23,559 --> 00:24:26,710
maybe there's an overlapping problem

652
00:24:26,200 --> 00:24:28,990
that

653
00:24:26,710 --> 00:24:31,960
not thinking of something that has to do

654
00:24:28,990 --> 00:24:34,750
with the fact that we're doing why as

655
00:24:31,960 --> 00:24:37,028
sort of like a major what the fact that

656
00:24:34,750 --> 00:24:39,308
we're why major instead of X major so

657
00:24:37,028 --> 00:24:41,919
what I'm gonna do as a debugging step

658
00:24:39,308 --> 00:24:43,928
isn't gonna flip the Y and the X to

659
00:24:41,919 --> 00:24:45,909
change which order they're done in so I

660
00:24:43,929 --> 00:24:48,159
can see whether it's just whichever

661
00:24:45,909 --> 00:24:50,649
one's done major and so you can see that

662
00:24:48,159 --> 00:24:52,870
it's not whichever one's done whichever

663
00:24:50,648 --> 00:24:55,538
one is done major right you can see that

664
00:24:52,869 --> 00:24:57,699
that's not the case and so that tells me

665
00:24:55,538 --> 00:25:00,490
very definitively that it's not an order

666
00:24:57,700 --> 00:25:02,140
problem it's not an overlap problem it's

667
00:25:00,490 --> 00:25:06,130
a problem with how we're actually

668
00:25:02,140 --> 00:25:12,520
handling the Y so what is wrong with our

669
00:25:06,130 --> 00:25:17,350
Y handling what's going wrong here let's

670
00:25:12,519 --> 00:25:23,200
see when we do our chunk Y that looks

671
00:25:17,349 --> 00:25:24,158
correct to me when we do our width and

672
00:25:23,200 --> 00:25:28,440
Heights here

673
00:25:24,159 --> 00:25:30,940
height that looks correct as well

674
00:25:28,440 --> 00:25:44,019
although I should think about this just

675
00:25:30,940 --> 00:25:46,298
for a second so I wonder I wonder so

676
00:25:44,019 --> 00:25:48,339
since these are stacked because we're

677
00:25:46,298 --> 00:25:51,250
flipped in the ground chunk filling

678
00:25:48,339 --> 00:25:53,829
relative to our coordinate system it's

679
00:25:51,250 --> 00:25:56,648
probably just that our edges are lining

680
00:25:53,829 --> 00:25:58,480
up in the wrong order meaning our top

681
00:25:56,648 --> 00:25:59,469
edge and our bottom edge are inverted

682
00:25:58,480 --> 00:26:01,480
because we're going in the wrong

683
00:25:59,470 --> 00:26:05,319
direction if that makes sense I want to

684
00:26:01,480 --> 00:26:07,509
see if that's actually true

685
00:26:05,319 --> 00:26:09,668
let me check let me check and see if

686
00:26:07,509 --> 00:26:12,579
that's the case because if that was the

687
00:26:09,669 --> 00:26:15,009
case yeah that was the case so basically

688
00:26:12,579 --> 00:26:16,119
it's because again of that Y flip that

689
00:26:15,009 --> 00:26:18,640
we always have to account for

690
00:26:16,119 --> 00:26:20,798
but now we've essentially got infinitely

691
00:26:18,640 --> 00:26:22,270
tiling ground texture which is nice it's

692
00:26:20,798 --> 00:26:23,200
not a particularly nice ground texture

693
00:26:22,269 --> 00:26:24,908
because we're not actually doing

694
00:26:23,200 --> 00:26:26,919
anything intelligent with how we're

695
00:26:24,909 --> 00:26:29,830
actually compositing it but it's pretty

696
00:26:26,919 --> 00:26:32,320
good to go in terms of where it's at now

697
00:26:29,829 --> 00:26:34,359
what we could do probably to make this a

698
00:26:32,319 --> 00:26:36,730
little more straightforward is if

699
00:26:34,359 --> 00:26:39,278
instead of doing this random choice we

700
00:26:36,730 --> 00:26:40,480
just made it always be grassy for

701
00:26:39,278 --> 00:26:46,769
example or always be stone

702
00:26:40,480 --> 00:26:50,559
so let's say I did this like so oops I

703
00:26:46,769 --> 00:26:52,629
could go ahead and hmm you know what I

704
00:26:50,559 --> 00:26:55,480
just thought of two I just thought of

705
00:26:52,630 --> 00:26:57,130
something fun well alright anyway so if

706
00:26:55,480 --> 00:26:58,569
if we go ahead and make it just one of

707
00:26:57,130 --> 00:27:01,030
them it actually looks a lot better to

708
00:26:58,569 --> 00:27:03,490
like you know if we if we just stick to

709
00:27:01,029 --> 00:27:05,410
one thing it certainly looks better we

710
00:27:03,490 --> 00:27:07,779
still got I feel like there's a little

711
00:27:05,410 --> 00:27:09,940
bit of artifacting potentially like I

712
00:27:07,779 --> 00:27:11,680
feel like right in there looks a little

713
00:27:09,940 --> 00:27:12,850
odd to me it doesn't look like what I

714
00:27:11,680 --> 00:27:14,140
might expect but that could actually

715
00:27:12,849 --> 00:27:17,500
just be think so I don't know for

716
00:27:14,140 --> 00:27:19,240
entirely bug-free yet but yeah it's

717
00:27:17,500 --> 00:27:20,589
starting to look pretty good and you

718
00:27:19,240 --> 00:27:22,150
could imagine once we got some more

719
00:27:20,589 --> 00:27:24,970
splats in here than the ones that we

720
00:27:22,150 --> 00:27:26,980
have at the moment we'd probably be good

721
00:27:24,970 --> 00:27:28,839
and also especially if we went in and

722
00:27:26,980 --> 00:27:31,269
actually had different patches so

723
00:27:28,839 --> 00:27:35,980
there'd be regions that were grassy and

724
00:27:31,269 --> 00:27:37,359
regions that were you know stone and

725
00:27:35,980 --> 00:27:39,190
that sort of stuff which is what we'll

726
00:27:37,359 --> 00:27:41,799
want to do eventually let's go ahead and

727
00:27:39,190 --> 00:27:45,370
put the Tufts back in there let's let's

728
00:27:41,799 --> 00:27:49,599
go ahead and just say all right let's

729
00:27:45,369 --> 00:27:51,639
let's switch back to grass like so and

730
00:27:49,599 --> 00:27:54,699
put the Tufts back in make sure the

731
00:27:51,640 --> 00:27:55,960
Tufts don't have an overlap problem and

732
00:27:54,700 --> 00:27:57,250
then we'll call this good for now

733
00:27:55,960 --> 00:28:03,789
because this is a system that Wilkes

734
00:27:57,250 --> 00:28:07,170
will sort of expand later on so yeah it

735
00:28:03,789 --> 00:28:10,599
also looks to me like maybe we want a

736
00:28:07,170 --> 00:28:13,560
little more like they look a little

737
00:28:10,599 --> 00:28:15,519
clumpy to me as well which I assume is

738
00:28:13,559 --> 00:28:17,259
probably due to our random number

739
00:28:15,519 --> 00:28:19,150
generator not being around in our chairs

740
00:28:17,259 --> 00:28:22,990
just a random number table at the moment

741
00:28:19,150 --> 00:28:24,940
if that makes sense so I guess I I won't

742
00:28:22,990 --> 00:28:27,460
say that that's too much cause for

743
00:28:24,940 --> 00:28:28,870
concern but you can kind of see you can

744
00:28:27,460 --> 00:28:30,370
see the holes in the random number

745
00:28:28,869 --> 00:28:32,799
generator assuming that's actually what

746
00:28:30,369 --> 00:28:36,009
that is right assuming that isn't some

747
00:28:32,799 --> 00:28:37,960
kind of a well you know what else is the

748
00:28:36,009 --> 00:28:40,359
other problem with it is if there's

749
00:28:37,960 --> 00:28:42,039
alpha regions around those sprites then

750
00:28:40,359 --> 00:28:44,829
you would have that problem so you know

751
00:28:42,039 --> 00:28:47,379
we could also say you know give it a

752
00:28:44,829 --> 00:28:50,079
little bit of slop there just to see if

753
00:28:47,380 --> 00:28:54,940
that was something I could say

754
00:28:50,079 --> 00:28:58,058
to do Casey how much slop do we want

755
00:28:54,940 --> 00:29:00,250
here but really they should kind of

756
00:28:58,058 --> 00:29:01,480
touch I feel like that's not you know

757
00:29:00,250 --> 00:29:02,950
now that I'm saying it since we're using

758
00:29:01,480 --> 00:29:06,490
the Centers I don't think that's

759
00:29:02,950 --> 00:29:08,080
actually true yeah so I think that may

760
00:29:06,490 --> 00:29:09,399
just be a random number generator it'd

761
00:29:08,079 --> 00:29:11,019
be nice to put in a real random number

762
00:29:09,398 --> 00:29:14,189
generator but again we gotta you know

763
00:29:11,019 --> 00:29:16,480
first every every little bit at a time

764
00:29:14,190 --> 00:29:20,110
all right so I think we're in good shape

765
00:29:16,480 --> 00:29:22,929
now I think everything is reasonably you

766
00:29:20,109 --> 00:29:24,369
know it's okay so I'm gonna say let's go

767
00:29:22,929 --> 00:29:26,590
ahead and start tackling our other

768
00:29:24,369 --> 00:29:29,199
problem but before we start tackling our

769
00:29:26,589 --> 00:29:32,168
other problem I'd like to have some way

770
00:29:29,200 --> 00:29:34,058
of seeing it happen more quickly so what

771
00:29:32,169 --> 00:29:39,759
I'm gonna do is I'm going to force us

772
00:29:34,058 --> 00:29:40,839
into a case where we have two so I had

773
00:29:39,759 --> 00:29:42,788
that you saw me at the beginning I had

774
00:29:40,839 --> 00:29:49,058
to walk all the way up to find a place

775
00:29:42,788 --> 00:29:51,220
where we would actually run out of where

776
00:29:49,058 --> 00:29:53,190
we'd actually run out of tiles and so

777
00:29:51,220 --> 00:29:55,720
what I need to do is I need to sort of

778
00:29:53,190 --> 00:29:58,298
exacerbate that situation I want to make

779
00:29:55,720 --> 00:30:00,339
it so we run out of tiles right away so

780
00:29:58,298 --> 00:30:02,940
that I can see that our eviction scheme

781
00:30:00,339 --> 00:30:06,009
is working right without having to do

782
00:30:02,940 --> 00:30:08,919
this huge walk up to the top and so what

783
00:30:06,009 --> 00:30:11,619
I'm going to do is I'm going to go into

784
00:30:08,919 --> 00:30:13,899
that allocation where we said how many

785
00:30:11,619 --> 00:30:17,888
we had and I'm gonna drastically reduce

786
00:30:13,898 --> 00:30:20,739
the number right and and furthermore we

787
00:30:17,888 --> 00:30:22,898
haven't really we haven't really decided

788
00:30:20,740 --> 00:30:23,500
how many of these we want anyway but

789
00:30:22,898 --> 00:30:27,158
there we go

790
00:30:23,500 --> 00:30:29,138
so when I run this I'm hoping that now I

791
00:30:27,159 --> 00:30:32,500
won't have to walk very far before we

792
00:30:29,138 --> 00:30:35,259
run out of tiles right although it looks

793
00:30:32,500 --> 00:30:37,659
like I guessed wrong that still was

794
00:30:35,259 --> 00:30:41,470
relatively far so let's try even less

795
00:30:37,659 --> 00:30:44,080
tiles will just use 16 tiles now

796
00:30:41,470 --> 00:30:45,400
and we'll hope that that gives us a

797
00:30:44,079 --> 00:30:47,769
quick out so there we go

798
00:30:45,400 --> 00:30:49,600
so we woke up here and we're totally out

799
00:30:47,769 --> 00:30:52,089
of tiles right away which is what we

800
00:30:49,599 --> 00:30:57,399
want and so now our job is to make it so

801
00:30:52,089 --> 00:30:59,889
that we fill those in by reusing old

802
00:30:57,400 --> 00:31:02,288
tiles okay

803
00:30:59,890 --> 00:31:04,720
so the first thing we need to do is

804
00:31:02,288 --> 00:31:07,538
we've already got a loop that does sort

805
00:31:04,720 --> 00:31:09,400
of the this ground chunk filling but the

806
00:31:07,538 --> 00:31:13,150
problem is this empty buffer thing right

807
00:31:09,400 --> 00:31:15,490
here we basically don't have any way to

808
00:31:13,150 --> 00:31:18,730
get more empty buffers after we fill up

809
00:31:15,490 --> 00:31:20,769
the 16 that we've pre-allocated right so

810
00:31:18,730 --> 00:31:22,569
what we want to do is we want something

811
00:31:20,769 --> 00:31:25,750
that will tell us what is the least

812
00:31:22,569 --> 00:31:28,298
important one of the 16 chunks that are

813
00:31:25,750 --> 00:31:32,440
currently in existence which of those

814
00:31:28,298 --> 00:31:35,470
would be the best one to replace does

815
00:31:32,440 --> 00:31:38,710
that make sense and so there's a number

816
00:31:35,470 --> 00:31:41,110
of ways we could do that I guess like

817
00:31:38,710 --> 00:31:44,140
for now what what I'm actually thinking

818
00:31:41,109 --> 00:31:45,788
since we shouldn't probably be doing too

819
00:31:44,140 --> 00:31:48,038
much of this until we're on a more

820
00:31:45,788 --> 00:31:50,048
official engine pass with a little more

821
00:31:48,038 --> 00:31:52,808
knowledge I'm thinking maybe what we'll

822
00:31:50,048 --> 00:31:54,460
do is actually do something where we

823
00:31:52,808 --> 00:31:57,099
sweep over the whole buffer which is

824
00:31:54,460 --> 00:31:59,620
again very inefficient but it might be

825
00:31:57,099 --> 00:32:01,178
the right thing to do instead of trying

826
00:31:59,619 --> 00:32:02,979
to put in an LRU scheme or something

827
00:32:01,179 --> 00:32:04,890
like that when we really don't know what

828
00:32:02,980 --> 00:32:08,190
we're doing it and it might be premature

829
00:32:04,890 --> 00:32:14,549
so what I'm going to do is say okay

830
00:32:08,190 --> 00:32:14,548
we're trying to draw something here so

831
00:32:14,609 --> 00:32:19,119
yeah we're trying to draw something here

832
00:32:16,750 --> 00:32:21,038
we're looping over this buffer and while

833
00:32:19,119 --> 00:32:23,769
we're doing this loop let's just keep

834
00:32:21,038 --> 00:32:26,829
whatever the least the furthest from the

835
00:32:23,769 --> 00:32:28,389
camera actually is right whatever is the

836
00:32:26,829 --> 00:32:30,460
the chunk it's risk of camera from the

837
00:32:28,390 --> 00:32:32,830
camera because we know the relative P

838
00:32:30,460 --> 00:32:35,079
here so it's pretty free for us to just

839
00:32:32,829 --> 00:32:37,000
get distance from camera right for the

840
00:32:35,079 --> 00:32:38,980
chunk it's pretty free for us to do that

841
00:32:37,000 --> 00:32:40,900
we would just say whatever the length

842
00:32:38,980 --> 00:32:43,089
squared is of the relative position of

843
00:32:40,900 --> 00:32:45,340
this thing and I'm gonna just take the

844
00:32:43,089 --> 00:32:47,918
XY because I don't care how house II it

845
00:32:45,339 --> 00:32:50,408
was so the distance from camera I'm

846
00:32:47,919 --> 00:32:52,179
gonna go ahead and say all right this

847
00:32:50,409 --> 00:32:54,270
empty buffer is actually just gonna be

848
00:32:52,179 --> 00:32:57,570
furthest buffer now

849
00:32:54,269 --> 00:32:59,609
and what we're gonna do is just take

850
00:32:57,569 --> 00:33:02,970
whichever buffer would have been

851
00:32:59,609 --> 00:33:05,369
furthest from the camera so when we loop

852
00:33:02,970 --> 00:33:10,049
over these these ground buffer indices

853
00:33:05,369 --> 00:33:11,489
and we go through here so what I'm

854
00:33:10,049 --> 00:33:14,808
actually computing the wrong place

855
00:33:11,490 --> 00:33:17,880
I actually want to compute in here right

856
00:33:14,808 --> 00:33:19,410
so if we found it if we didn't find it

857
00:33:17,880 --> 00:33:23,580
then we're gonna take that distance from

858
00:33:19,410 --> 00:33:26,250
camera in here so we want to do this

859
00:33:23,579 --> 00:33:29,819
right and again that's a little

860
00:33:26,250 --> 00:33:31,679
expensive and in fact we could we could

861
00:33:29,819 --> 00:33:34,529
mitigate this a little bit by storing

862
00:33:31,679 --> 00:33:35,790
the last time that we did it I'm not

863
00:33:34,529 --> 00:33:37,619
sure if we want to do that or not but we

864
00:33:35,789 --> 00:33:39,269
could totally do that again this is not

865
00:33:37,619 --> 00:33:40,619
supposed to be performance code yet this

866
00:33:39,269 --> 00:33:42,150
is just something to sort of have it

867
00:33:40,619 --> 00:33:43,769
working so we kind of know roughly what

868
00:33:42,150 --> 00:33:45,660
has to happen and then we're gonna pull

869
00:33:43,769 --> 00:33:46,950
this out and we can fiddle with it when

870
00:33:45,660 --> 00:33:48,390
we get down to something where we're

871
00:33:46,950 --> 00:33:50,220
actually thinking more about our

872
00:33:48,390 --> 00:33:53,250
performance all right

873
00:33:50,220 --> 00:33:57,240
so this is our our test buffer right

874
00:33:53,250 --> 00:33:58,710
here right so this is like buffer P and

875
00:33:57,240 --> 00:34:02,579
we're gonna get the centered chunk point

876
00:33:58,710 --> 00:34:04,049
for whatever its position was right or

877
00:34:02,579 --> 00:34:06,210
actually we don't even need that gets

878
00:34:04,049 --> 00:34:09,449
buffer P it actually already knows right

879
00:34:06,210 --> 00:34:13,168
it's actually just ground buffer P right

880
00:34:09,449 --> 00:34:15,000
that's what that is so basically what we

881
00:34:13,168 --> 00:34:17,460
want to do here is say if it's valid

882
00:34:15,000 --> 00:34:20,119
we'll do this way if it's not valid

883
00:34:17,460 --> 00:34:24,148
we'll immediately just take it right

884
00:34:20,119 --> 00:34:25,889
it'll be if it's something that has

885
00:34:24,148 --> 00:34:27,989
never minissha lies before then that's

886
00:34:25,889 --> 00:34:29,669
gonna be our buffer for sure that's

887
00:34:27,989 --> 00:34:30,959
immediately what we would want to use

888
00:34:29,668 --> 00:34:32,099
because it means that there's nothing in

889
00:34:30,960 --> 00:34:35,789
it and that's gonna be the best one to

890
00:34:32,099 --> 00:34:39,898
use all right so at the start I'll

891
00:34:35,789 --> 00:34:42,179
initialize furthest buffer length s Q

892
00:34:39,898 --> 00:34:43,739
and so the one that's furthest away at

893
00:34:42,179 --> 00:34:44,940
start is just going to be real 32

894
00:34:43,739 --> 00:34:46,888
maximum which I don't know if we

895
00:34:44,940 --> 00:34:49,139
actually have that did we ever define

896
00:34:46,889 --> 00:34:53,220
that I want something that's never going

897
00:34:49,139 --> 00:34:54,809
to not be picked right and let's see

898
00:34:53,219 --> 00:34:57,339
what we've got here where our type def

899
00:34:54,809 --> 00:35:00,130
there a platform right

900
00:34:57,340 --> 00:35:02,110
I don't know if we did or not it doesn't

901
00:35:00,130 --> 00:35:05,829
look like we did so I'm going to go

902
00:35:02,110 --> 00:35:09,849
ahead and pull in the ability here for

903
00:35:05,829 --> 00:35:12,610
us to get the maximum real 32 value

904
00:35:09,849 --> 00:35:16,269
right and the maximum real 32 value in

905
00:35:12,610 --> 00:35:19,960
this case is defined in limits dot H by

906
00:35:16,269 --> 00:35:21,789
the actual C compiler right so we can

907
00:35:19,960 --> 00:35:23,380
actually just get that for whatever that

908
00:35:21,789 --> 00:35:26,110
this is like a synthetic header file

909
00:35:23,380 --> 00:35:27,730
basically where the compiler is required

910
00:35:26,110 --> 00:35:29,710
to tell us for the platform we're

911
00:35:27,730 --> 00:35:31,960
compiling on what is the maximum float

912
00:35:29,710 --> 00:35:33,639
value but we could even define it

913
00:35:31,960 --> 00:35:35,740
ourselves we really needed to because we

914
00:35:33,639 --> 00:35:37,750
know it's a float 32 so that's the point

915
00:35:35,739 --> 00:35:39,549
but anyway so I'm going to initialize it

916
00:35:37,750 --> 00:35:41,079
to real 32 maximum which is the maximum

917
00:35:39,550 --> 00:35:44,590
value could possibly have which means we

918
00:35:41,079 --> 00:35:47,079
know that we will always pick something

919
00:35:44,590 --> 00:35:48,820
if we haven't picked something yet so

920
00:35:47,079 --> 00:35:53,590
when I come in here I'm going to say all

921
00:35:48,820 --> 00:35:55,630
right let's if this is valid oh and I

922
00:35:53,590 --> 00:35:59,170
guess I'll set further stuff in this

923
00:35:55,630 --> 00:36:01,300
case furthest buffer length sq I'll set

924
00:35:59,170 --> 00:36:03,039
it to 0 so that no one will get picked

925
00:36:01,300 --> 00:36:04,930
no one will take priority over an empty

926
00:36:03,039 --> 00:36:07,269
buffer because nothing will ever be less

927
00:36:04,929 --> 00:36:09,940
than no length will ever be less than

928
00:36:07,269 --> 00:36:12,009
that if that makes sense or further

929
00:36:09,940 --> 00:36:14,349
oh wait I'm doing this backwards we want

930
00:36:12,010 --> 00:36:16,870
further there we go so I've got these

931
00:36:14,349 --> 00:36:18,639
backwards we want it here where we

932
00:36:16,869 --> 00:36:20,920
actually do it so that the furthest

933
00:36:18,639 --> 00:36:24,250
buffer nothing can ever be further than

934
00:36:20,920 --> 00:36:25,990
real 32 maximum so we do that rail P and

935
00:36:24,250 --> 00:36:27,519
we take the length squared now that's

936
00:36:25,989 --> 00:36:29,500
the distance from the camera of this

937
00:36:27,519 --> 00:36:31,900
particular ground buffer we can then see

938
00:36:29,500 --> 00:36:33,909
whether or not that distance from camera

939
00:36:31,900 --> 00:36:36,610
whether the furthest buffer length

940
00:36:33,909 --> 00:36:38,739
squared I should call this like maybe

941
00:36:36,610 --> 00:36:40,840
you like camera length sq or buffer

942
00:36:38,739 --> 00:36:42,639
length sq something like that so I've

943
00:36:40,840 --> 00:36:45,610
got buffer length fescue if the furthest

944
00:36:42,639 --> 00:36:47,529
thing away is actually closer than the

945
00:36:45,610 --> 00:36:51,160
one that we're testing then I'm going to

946
00:36:47,530 --> 00:36:54,519
accept that one as the new closest one

947
00:36:51,159 --> 00:36:57,639
right so this is just a standard again

948
00:36:54,519 --> 00:36:59,860
really really simple not clever brute

949
00:36:57,639 --> 00:37:02,889
force way of finding whatever buffer

950
00:36:59,860 --> 00:37:05,470
would be best to to actually replace

951
00:37:02,889 --> 00:37:07,029
here and again this code is horrible

952
00:37:05,469 --> 00:37:08,858
just absolutely terrible because it

953
00:37:07,030 --> 00:37:10,660
means we're doing however many there are

954
00:37:08,858 --> 00:37:11,980
like you know 16 of these or something

955
00:37:10,659 --> 00:37:13,989
we're actually looping through all of

956
00:37:11,980 --> 00:37:15,400
our ground buffers every time and it's

957
00:37:13,989 --> 00:37:17,108
just a testament to how fast computers

958
00:37:15,400 --> 00:37:18,548
are that we can even do this and so

959
00:37:17,108 --> 00:37:21,909
again this is not something that we

960
00:37:18,548 --> 00:37:23,288
really want to to leave stand but it's

961
00:37:21,909 --> 00:37:24,730
going to be something that I'd rather do

962
00:37:23,289 --> 00:37:26,259
a little bit further down on the engine

963
00:37:24,730 --> 00:37:28,420
so that we don't spend a lot of time

964
00:37:26,259 --> 00:37:30,009
optimizing something that may never get

965
00:37:28,420 --> 00:37:32,079
used exactly the way that that it is

966
00:37:30,009 --> 00:37:33,998
being used today so again this is just a

967
00:37:32,079 --> 00:37:36,900
voiding premature optimization but don't

968
00:37:33,998 --> 00:37:39,969
fool yourself this code is awful right

969
00:37:36,900 --> 00:37:41,619
so anyway let's go ahead and compile

970
00:37:39,969 --> 00:37:45,278
that and fix the the compiler is there

971
00:37:41,619 --> 00:37:47,318
float max did I make a mistake there oh

972
00:37:45,278 --> 00:37:51,039
sorry it's not limited age that's for

973
00:37:47,318 --> 00:37:53,230
integers it's float dot H my bad so

974
00:37:51,039 --> 00:37:56,289
furthest buffer it now can be filled

975
00:37:53,230 --> 00:37:57,519
like so and that should do it now let's

976
00:37:56,289 --> 00:37:58,900
just double check that because I kind of

977
00:37:57,518 --> 00:37:59,738
was trying to talk through that and I

978
00:37:58,900 --> 00:38:01,119
wasn't doing a very good job of

979
00:37:59,739 --> 00:38:03,460
explaining it so let's just try it one

980
00:38:01,119 --> 00:38:04,778
more time and of course we don't really

981
00:38:03,460 --> 00:38:08,318
need found anymore because for this

982
00:38:04,778 --> 00:38:09,759
buffer would probably do it I would

983
00:38:08,318 --> 00:38:15,278
think let's see here

984
00:38:09,759 --> 00:38:19,170
draw buffer screen P screen P dim well

985
00:38:15,278 --> 00:38:23,318
we kind of do need to know for drawing

986
00:38:19,170 --> 00:38:25,329
don't we how is this doing its thing so

987
00:38:23,318 --> 00:38:26,440
we did his chunk Center we got the thing

988
00:38:25,329 --> 00:38:28,239
are the same trunk

989
00:38:26,440 --> 00:38:30,338
thanks left four squared phil gramm

990
00:38:28,239 --> 00:38:31,358
chunk when are we actually drawing the

991
00:38:30,338 --> 00:38:35,558
ground we're drawing the ground trunks

992
00:38:31,358 --> 00:38:37,239
later so yes so we actually don't need

993
00:38:35,559 --> 00:38:40,089
to probably do that although when we do

994
00:38:37,239 --> 00:38:42,150
are found yeah so so we don't need found

995
00:38:40,088 --> 00:38:44,710
because found was just to tell us

996
00:38:42,150 --> 00:38:45,670
whether for this you know family just

997
00:38:44,710 --> 00:38:47,318
tell us whether we needed to fill

998
00:38:45,670 --> 00:38:49,318
anything here but what we could do is

999
00:38:47,318 --> 00:38:52,690
just set furthest buffer equal to zero

1000
00:38:49,318 --> 00:38:55,239
when we find the actual valid chunk and

1001
00:38:52,690 --> 00:38:56,679
then this won't execute right so we

1002
00:38:55,239 --> 00:38:57,699
don't actually need found so let's let's

1003
00:38:56,679 --> 00:38:58,328
just get rid of that and that we're a

1004
00:38:57,699 --> 00:39:00,429
little simpler

1005
00:38:58,329 --> 00:39:01,869
alright so we do is we start out saying

1006
00:39:00,429 --> 00:39:03,940
that the furthest buffer away from the

1007
00:39:01,869 --> 00:39:06,940
camera that we've seen so far is zero

1008
00:39:03,940 --> 00:39:08,798
length away right which is means that

1009
00:39:06,940 --> 00:39:10,269
anything will be further away from this

1010
00:39:08,798 --> 00:39:12,190
initial value and then we say that

1011
00:39:10,268 --> 00:39:14,199
furthest buffer we make a pointer to

1012
00:39:12,190 --> 00:39:15,970
save it in we then loop through all the

1013
00:39:14,199 --> 00:39:17,828
ground buffers and we say for any

1014
00:39:15,969 --> 00:39:19,778
particular ground buffer let's see

1015
00:39:17,829 --> 00:39:21,099
whether or not it's in the same chunk as

1016
00:39:19,778 --> 00:39:22,659
the one we're looking for

1017
00:39:21,099 --> 00:39:25,329
to draw

1018
00:39:22,659 --> 00:39:26,528
for this location because again we're

1019
00:39:25,329 --> 00:39:29,170
looping through all the ones we want to

1020
00:39:26,528 --> 00:39:31,838
draw for the screen if it is then we've

1021
00:39:29,170 --> 00:39:34,690
found it so we can just exit we don't

1022
00:39:31,838 --> 00:39:37,599
need to fill one it's fine right but if

1023
00:39:34,690 --> 00:39:39,519
we haven't if that isn't it then what we

1024
00:39:37,599 --> 00:39:41,230
do is say if it is a valid ground buffer

1025
00:39:39,518 --> 00:39:43,419
let's see how far away from the camera

1026
00:39:41,230 --> 00:39:45,159
is and however far away from the camera

1027
00:39:43,420 --> 00:39:48,940
it is right which is what we get right

1028
00:39:45,159 --> 00:39:51,098
here if that is further away than the

1029
00:39:48,940 --> 00:39:52,750
furthest we've already seen then we want

1030
00:39:51,099 --> 00:39:55,720
to accept that as the new for this

1031
00:39:52,750 --> 00:39:56,798
buffer right otherwise not otherwise we

1032
00:39:55,719 --> 00:39:57,818
wouldn't fill this one we'd fill

1033
00:39:56,798 --> 00:40:00,038
whatever one we found before

1034
00:39:57,818 --> 00:40:01,750
and finally if it's not valid at all we

1035
00:40:00,039 --> 00:40:02,980
want to accept that as the one to fill

1036
00:40:01,750 --> 00:40:04,449
because we don't want to fill a buffer

1037
00:40:02,980 --> 00:40:05,858
that's got contents in it if there's a

1038
00:40:04,449 --> 00:40:08,189
buffer that doesn't have contents in it

1039
00:40:05,858 --> 00:40:11,739
we'd obviously prefer to use that right

1040
00:40:08,190 --> 00:40:14,039
and so I think that's at least the

1041
00:40:11,739 --> 00:40:17,618
basics there and hopefully that will

1042
00:40:14,039 --> 00:40:21,130
fill things up for us let's see okay so

1043
00:40:17,619 --> 00:40:22,750
it looks like 16 is too few for the size

1044
00:40:21,130 --> 00:40:24,670
that we're doing so you can actually see

1045
00:40:22,750 --> 00:40:26,289
that it's like over filling itself so

1046
00:40:24,670 --> 00:40:27,909
let's give it a little bit more to work

1047
00:40:26,289 --> 00:40:30,880
with and then we also probably want to

1048
00:40:27,909 --> 00:40:34,239
tighten up the bounds of what we're

1049
00:40:30,880 --> 00:40:36,730
drawing there potentially but yeah so

1050
00:40:34,239 --> 00:40:39,429
let's see let's take a look let's go to

1051
00:40:36,730 --> 00:40:41,469
32 and see how that is but we may also

1052
00:40:39,429 --> 00:40:44,980
have a bug in the loop and that should

1053
00:40:41,469 --> 00:40:47,139
tell us whether we do or not yeah so

1054
00:40:44,980 --> 00:40:51,699
that looks good and now we should be

1055
00:40:47,139 --> 00:40:54,509
able to walk kind of arbitrarily long as

1056
00:40:51,699 --> 00:41:00,149
we go and we should never run out of

1057
00:40:54,509 --> 00:41:03,639
ground right it should be good to go

1058
00:41:00,150 --> 00:41:12,278
it's looking pretty good it's looking

1059
00:41:03,639 --> 00:41:14,558
pretty good people I like it yeah so

1060
00:41:12,278 --> 00:41:16,659
really I don't know that we've got

1061
00:41:14,559 --> 00:41:21,099
anything else we would really want to do

1062
00:41:16,659 --> 00:41:22,509
with this at the moment I mean the only

1063
00:41:21,099 --> 00:41:25,298
thing I can think of is that we'd want

1064
00:41:22,509 --> 00:41:27,460
to do something as like with being able

1065
00:41:25,298 --> 00:41:29,170
to put in we're sort of grasses and

1066
00:41:27,460 --> 00:41:32,289
where stone is and that sort of stuff

1067
00:41:29,170 --> 00:41:33,608
but I don't know that we want to quite

1068
00:41:32,289 --> 00:41:34,920
do that yet that's more of a world

1069
00:41:33,608 --> 00:41:38,279
generation thing

1070
00:41:34,920 --> 00:41:47,130
but yeah looking good looking good

1071
00:41:38,280 --> 00:41:48,990
looking good so yeah I guess we kind of

1072
00:41:47,130 --> 00:41:51,119
have the problem now that we've come to

1073
00:41:48,989 --> 00:41:55,949
a point where we want to start something

1074
00:41:51,119 --> 00:41:58,140
wholly new but I don't know oh that's

1075
00:41:55,949 --> 00:42:01,409
kind of interesting so there's something

1076
00:41:58,139 --> 00:42:06,210
we could fix right so do you see what's

1077
00:42:01,409 --> 00:42:07,828
happening there with those where where

1078
00:42:06,210 --> 00:42:09,480
these these clumps got kind of

1079
00:42:07,829 --> 00:42:11,849
overwritten that's because we have two

1080
00:42:09,480 --> 00:42:15,769
layers of ground and we kind of want to

1081
00:42:11,849 --> 00:42:19,680
always splat the detail splats on top of

1082
00:42:15,769 --> 00:42:22,259
sort of the ground splats so what we

1083
00:42:19,679 --> 00:42:25,618
could do right is we could if we wanted

1084
00:42:22,260 --> 00:42:30,119
to fix that we could go ahead and do

1085
00:42:25,619 --> 00:42:34,108
something where we said oops infill

1086
00:42:30,119 --> 00:42:36,990
ground chunk we could say do this loop

1087
00:42:34,108 --> 00:42:39,420
right we want to do this loop more than

1088
00:42:36,989 --> 00:42:42,199
once so that we we do it once for each

1089
00:42:39,420 --> 00:42:44,940
of them which is a little ownerís right

1090
00:42:42,199 --> 00:42:48,719
but if we did that if we split this up

1091
00:42:44,940 --> 00:42:53,608
into two passes right so we did these

1092
00:42:48,719 --> 00:42:55,529
first right and these second that would

1093
00:42:53,608 --> 00:42:58,828
would prevent that sort of situation

1094
00:42:55,530 --> 00:43:01,109
from happening right so let's walk a bit

1095
00:42:58,829 --> 00:43:04,548
and then come back there so that was one

1096
00:43:01,108 --> 00:43:07,440
screen to the left and one screen down

1097
00:43:04,548 --> 00:43:13,230
right so I'm gonna walk back on the S

1098
00:43:07,440 --> 00:43:16,849
and see if that fixes it right so let's

1099
00:43:13,230 --> 00:43:16,849
go ahead back there

1100
00:43:20,739 --> 00:43:24,918
there we go and so now you can see that

1101
00:43:23,418 --> 00:43:26,929
we don't have that problem anymore so

1102
00:43:24,918 --> 00:43:28,518
that's kind of nice and yeah and we'll

1103
00:43:26,929 --> 00:43:31,130
have to make a little more intelligence

1104
00:43:28,518 --> 00:43:34,608
as well in that in the sort of the

1105
00:43:31,130 --> 00:43:36,619
ground compositor to handle a lot of

1106
00:43:34,608 --> 00:43:38,389
situations like that but that's a pretty

1107
00:43:36,619 --> 00:43:39,729
easy way for us to just fix it at the

1108
00:43:38,389 --> 00:43:43,969
moment so that we don't have that

1109
00:43:39,728 --> 00:43:47,148
particular problem so yeah yes I like it

1110
00:43:43,969 --> 00:43:51,380
so what time do we have here well we've

1111
00:43:47,148 --> 00:43:55,429
got 15 minutes left what should we do in

1112
00:43:51,380 --> 00:43:57,019
15 minutes because that's that's kind of

1113
00:43:55,429 --> 00:44:00,709
an interesting question I guess what we

1114
00:43:57,018 --> 00:44:05,958
could do is start on handling multiple Z

1115
00:44:00,708 --> 00:44:07,518
levels in those chunks because that's

1116
00:44:05,958 --> 00:44:13,368
kind of and then that would roll into

1117
00:44:07,518 --> 00:44:16,968
tomorrow I guess let's let's let's say

1118
00:44:13,369 --> 00:44:18,499
that's true and so something else that

1119
00:44:16,969 --> 00:44:22,880
we could do to you know what else we

1120
00:44:18,498 --> 00:44:24,188
could do this might be kind of fun I

1121
00:44:22,880 --> 00:44:27,289
don't know if this is a good idea or not

1122
00:44:24,188 --> 00:44:28,759
but one thing that we could do is we

1123
00:44:27,289 --> 00:44:33,919
could make something that would allow us

1124
00:44:28,759 --> 00:44:36,108
to whenever we reload the code in

1125
00:44:33,918 --> 00:44:37,699
because remember outside in our win32

1126
00:44:36,108 --> 00:44:39,078
layer that does the code reloading we

1127
00:44:37,699 --> 00:44:41,119
could have something in there that was

1128
00:44:39,079 --> 00:44:43,609
smart and told us when the code reloaded

1129
00:44:41,119 --> 00:44:50,028
so that we could regenerate stuff when

1130
00:44:43,608 --> 00:44:52,818
that happened does that make sense that

1131
00:44:50,028 --> 00:44:55,608
might be a good thing to do too so let's

1132
00:44:52,818 --> 00:44:56,389
let's let's do that let's do that I

1133
00:44:55,608 --> 00:44:58,938
think we should do that

1134
00:44:56,389 --> 00:45:02,149
so we inside win32 hand-made and I'm

1135
00:44:58,938 --> 00:45:05,688
gonna open up the platform layer here so

1136
00:45:02,148 --> 00:45:06,949
when we pass through our game memory

1137
00:45:05,688 --> 00:45:08,358
here right because that's that's

1138
00:45:06,949 --> 00:45:10,489
basically we've got game air we got game

1139
00:45:08,358 --> 00:45:13,538
input what I'd like to do is pass in

1140
00:45:10,489 --> 00:45:16,249
maybe some things that say like okay

1141
00:45:13,539 --> 00:45:18,528
executable reloaded or something like

1142
00:45:16,248 --> 00:45:20,629
that right just a variable that tells

1143
00:45:18,528 --> 00:45:22,909
the game whether the executable reloaded

1144
00:45:20,630 --> 00:45:26,449
and then inside here that allows us to

1145
00:45:22,909 --> 00:45:30,039
that'll allow us to put in some some

1146
00:45:26,449 --> 00:45:33,230
debug code for example that we can use

1147
00:45:30,039 --> 00:45:34,490
in in you know in

1148
00:45:33,230 --> 00:45:37,130
case where we want to do something

1149
00:45:34,489 --> 00:45:40,419
special right and so what we could do is

1150
00:45:37,130 --> 00:45:43,940
say all right you know if input

1151
00:45:40,420 --> 00:45:46,430
executable reloaded then what I want to

1152
00:45:43,940 --> 00:45:48,079
do is go ahead and clear out all of the

1153
00:45:46,429 --> 00:45:50,210
the things that were in that cache right

1154
00:45:48,079 --> 00:45:52,039
so I'm gonna go in here and just say all

1155
00:45:50,210 --> 00:45:56,420
right all of these guys you now

1156
00:45:52,039 --> 00:45:57,259
officially have nothing in you right

1157
00:45:56,420 --> 00:45:59,869
like so

1158
00:45:57,260 --> 00:46:06,140
so they'll just wipe out that background

1159
00:45:59,869 --> 00:46:07,550
cache completely and off you go so if we

1160
00:46:06,139 --> 00:46:10,129
were to do that all we'd have to do to

1161
00:46:07,550 --> 00:46:13,250
implement that is in here when we do our

1162
00:46:10,130 --> 00:46:15,349
our reloads right because we already

1163
00:46:13,250 --> 00:46:18,230
have the thing that does the reloads it

1164
00:46:15,349 --> 00:46:19,849
does like load game code this thing we

1165
00:46:18,230 --> 00:46:22,510
just have to look at how that clos path

1166
00:46:19,849 --> 00:46:27,170
works and when we find that we have

1167
00:46:22,510 --> 00:46:31,280
reloaded we want to go ahead and and set

1168
00:46:27,170 --> 00:46:35,480
that input to be true now load counter I

1169
00:46:31,280 --> 00:46:36,890
don't know what that is somewhat tell me

1170
00:46:35,480 --> 00:46:38,389
what that was doing I think that was

1171
00:46:36,889 --> 00:46:39,949
something that we used to use for how

1172
00:46:38,389 --> 00:46:42,259
often we would reload but we don't use

1173
00:46:39,949 --> 00:46:45,079
that anymore so that's not relevant so

1174
00:46:42,260 --> 00:46:46,340
when we do our with our win32 load game

1175
00:46:45,079 --> 00:46:48,579
code I'm just going to be the simplest

1176
00:46:46,340 --> 00:46:51,940
possible finger and say that new inputs

1177
00:46:48,579 --> 00:46:54,500
executable reloaded now equals true

1178
00:46:51,940 --> 00:46:59,450
whereas normally executable reloaded

1179
00:46:54,500 --> 00:47:01,909
will equal false right that's it really

1180
00:46:59,449 --> 00:47:04,189
really straightforward so basically it

1181
00:47:01,909 --> 00:47:06,589
sets it to false and then if it actually

1182
00:47:04,190 --> 00:47:09,019
does its reload then it reloads now I

1183
00:47:06,590 --> 00:47:12,858
don't know if we returned anything more

1184
00:47:09,019 --> 00:47:15,829
specific here in fact you know what I

1185
00:47:12,858 --> 00:47:17,599
could do I could make this actually be

1186
00:47:15,829 --> 00:47:20,889
equal to that but I don't know we'll

1187
00:47:17,599 --> 00:47:25,069
leave it this way for now so there we go

1188
00:47:20,889 --> 00:47:27,379
we've got that go so we open up the game

1189
00:47:25,070 --> 00:47:30,289
and here we are and so now what I'd like

1190
00:47:27,380 --> 00:47:34,599
to do is I would like to make it so that

1191
00:47:30,289 --> 00:47:36,800
I can change the routine you know that

1192
00:47:34,599 --> 00:47:38,900
so I can change the routine that does

1193
00:47:36,800 --> 00:47:41,869
that compositing so let's say I go in

1194
00:47:38,900 --> 00:47:44,269
here and into that that fill ground

1195
00:47:41,869 --> 00:47:46,070
chunk what I'd like to see happen is if

1196
00:47:44,269 --> 00:47:48,170
I just turn off

1197
00:47:46,070 --> 00:47:51,019
the splatting of the grass chunk the

1198
00:47:48,170 --> 00:47:52,579
grass Tufts for lack of a better term if

1199
00:47:51,019 --> 00:47:54,259
I turn that off before if we were

1200
00:47:52,579 --> 00:47:57,320
compiled nothing would have happened now

1201
00:47:54,260 --> 00:48:00,170
if I do it I want to see that change and

1202
00:47:57,320 --> 00:48:04,550
hey it did that's that's pretty darn

1203
00:48:00,170 --> 00:48:07,869
awesome that is just pretty darn awesome

1204
00:48:04,550 --> 00:48:12,410
you got to admit that's pretty cool

1205
00:48:07,869 --> 00:48:12,800
yeah live code editing is the way to go

1206
00:48:12,409 --> 00:48:15,500
man

1207
00:48:12,800 --> 00:48:17,240
it's so much fun even if you don't ever

1208
00:48:15,500 --> 00:48:20,210
use it for anything productive it's

1209
00:48:17,239 --> 00:48:22,159
still just fun to just sit there and

1210
00:48:20,210 --> 00:48:24,108
kind of play with so that you don't have

1211
00:48:22,159 --> 00:48:26,750
to wait for for your turnaround and so

1212
00:48:24,108 --> 00:48:29,900
on so yeah that looks pretty good to me

1213
00:48:26,750 --> 00:48:32,750
I'd also like to go double check I'm a

1214
00:48:29,900 --> 00:48:38,358
little concerned that we're kind of

1215
00:48:32,750 --> 00:48:39,588
drawing too much yeah so let's I've got

1216
00:48:38,358 --> 00:48:41,630
a couple other things we can do since

1217
00:48:39,588 --> 00:48:44,299
we've got some time left I want to know

1218
00:48:41,630 --> 00:48:47,240
why we're actually drawing so many why

1219
00:48:44,300 --> 00:48:49,250
16 wasn't enough I'm gonna make those

1220
00:48:47,239 --> 00:48:51,649
draw rectangle calls that we have this

1221
00:48:49,250 --> 00:48:55,130
draw rect the draw rectangle outline

1222
00:48:51,650 --> 00:48:57,980
stuff that was happening here I'm going

1223
00:48:55,130 --> 00:49:01,730
to actually make it so that this ground

1224
00:48:57,980 --> 00:49:05,929
buffer thing I'm actually gonna make

1225
00:49:01,730 --> 00:49:08,269
that happen up above here right I'm

1226
00:49:05,929 --> 00:49:10,368
gonna make that happen up here which is

1227
00:49:08,269 --> 00:49:12,519
actually bad like it's not actually want

1228
00:49:10,369 --> 00:49:15,769
to do but I want to see those those

1229
00:49:12,519 --> 00:49:20,000
debug regions over it

1230
00:49:15,769 --> 00:49:21,679
so to do KC this should really not be

1231
00:49:20,000 --> 00:49:25,159
here exactly

1232
00:49:21,679 --> 00:49:28,489
oh well that's not actually true so

1233
00:49:25,159 --> 00:49:33,139
really it's this thing this should

1234
00:49:28,489 --> 00:49:35,598
really you know what the only reason I'm

1235
00:49:33,139 --> 00:49:37,368
even saying that is because this thing

1236
00:49:35,599 --> 00:49:39,530
will fill chunks and then this thing

1237
00:49:37,369 --> 00:49:40,700
will draw them so you want to fill the

1238
00:49:39,530 --> 00:49:42,890
transfer you draw them but this is gonna

1239
00:49:40,699 --> 00:49:44,419
be on a separate thread anyway so I

1240
00:49:42,889 --> 00:49:47,900
don't even know why I'm notating that it

1241
00:49:44,420 --> 00:49:49,190
does not matter at all so let's see how

1242
00:49:47,900 --> 00:49:52,670
many there actually are on the screen

1243
00:49:49,190 --> 00:49:55,159
one two three four five six seven eight

1244
00:49:52,670 --> 00:49:59,519
nine ten eleven twelve thirteen fourteen

1245
00:49:55,159 --> 00:50:03,509
fifteen so actually having only 16

1246
00:49:59,519 --> 00:50:06,599
really wasn't enough so yeah 32 might be

1247
00:50:03,510 --> 00:50:08,430
too many but 16 actually legitimately

1248
00:50:06,599 --> 00:50:11,639
wasn't enough so I'll give I'll give

1249
00:50:08,429 --> 00:50:14,069
that to you so that's okay and there we

1250
00:50:11,639 --> 00:50:16,619
can see the boundary is nicely so it's

1251
00:50:14,070 --> 00:50:17,789
all good yeah

1252
00:50:16,619 --> 00:50:20,250
so I think we're in pretty good shape

1253
00:50:17,789 --> 00:50:22,289
there I'm totally fine with that now we

1254
00:50:20,250 --> 00:50:25,019
have another issue to address which is

1255
00:50:22,289 --> 00:50:26,820
RZ layers but I think I want to maybe

1256
00:50:25,019 --> 00:50:29,789
we'll start on that tomorrow I don't

1257
00:50:26,820 --> 00:50:31,350
want to start on that now so yes there

1258
00:50:29,789 --> 00:50:34,079
anything else that I kind of wanted to

1259
00:50:31,349 --> 00:50:36,329
do here I do wonder if how if these

1260
00:50:34,079 --> 00:50:37,619
chunks are too small now although based

1261
00:50:36,329 --> 00:50:40,710
on the number of entities that are in

1262
00:50:37,619 --> 00:50:42,809
here 1 2 3 4 5 6 7 8

1263
00:50:40,710 --> 00:50:43,920
based on the number of entities I would

1264
00:50:42,809 --> 00:50:47,009
say no probably not

1265
00:50:43,920 --> 00:50:48,510
I mean I don't know we'll have to see

1266
00:50:47,010 --> 00:50:50,010
how much our what our memory footprint

1267
00:50:48,510 --> 00:50:51,240
looks like and how we're doing when we

1268
00:50:50,010 --> 00:50:54,150
start there whether whether these are

1269
00:50:51,239 --> 00:50:56,549
too too big or too small for ground

1270
00:50:54,150 --> 00:50:59,630
chunks sizes but that's pretty good

1271
00:50:56,550 --> 00:51:02,039
that's pretty good I'm happy with that

1272
00:50:59,630 --> 00:51:04,710
ok so now I'll go ahead and move this

1273
00:51:02,039 --> 00:51:08,429
back below it for now or actually guess

1274
00:51:04,710 --> 00:51:09,630
I won't I'll just comment this out and

1275
00:51:08,429 --> 00:51:11,960
if we want that again we could turn it

1276
00:51:09,630 --> 00:51:16,050
back on but that should do it

1277
00:51:11,960 --> 00:51:19,079
alrighty then happy day we are now at

1278
00:51:16,050 --> 00:51:21,810
our giant ground texture is there it is

1279
00:51:19,079 --> 00:51:25,289
happy it's working well so that's good

1280
00:51:21,809 --> 00:51:25,889
news and I think we can probably call it

1281
00:51:25,289 --> 00:51:28,800
a day

1282
00:51:25,889 --> 00:51:32,279
we can probably go ahead and get that QA

1283
00:51:28,800 --> 00:51:37,250
started here a little bit early a little

1284
00:51:32,280 --> 00:51:42,410
bit early so let's do is the bot

1285
00:51:37,250 --> 00:51:45,929
operational the bodies back the bot is

1286
00:51:42,409 --> 00:51:51,960
back people all right it is time for the

1287
00:51:45,929 --> 00:51:53,359
Q and a and the QA is for asking

1288
00:51:51,960 --> 00:51:55,860
questions about the code we just wrote

1289
00:51:53,360 --> 00:51:58,410
please prefixed your questions with Q :

1290
00:51:55,860 --> 00:51:59,400
so I will see them and try to keep it to

1291
00:51:58,409 --> 00:52:05,969
stuff that we've actually done

1292
00:51:59,400 --> 00:52:07,559
programming wise so there jazzy Josh are

1293
00:52:05,969 --> 00:52:11,309
the randomly generated floor tiles being

1294
00:52:07,559 --> 00:52:13,549
cast yet yes they are they are being

1295
00:52:11,309 --> 00:52:13,549
cached

1296
00:52:20,519 --> 00:52:24,659
do you think having things in place like

1297
00:52:22,440 --> 00:52:26,460
static cast to put more checks eg into

1298
00:52:24,659 --> 00:52:28,079
pointer is useful over standard c-style

1299
00:52:26,460 --> 00:52:30,059
cast with just ignore all type checking

1300
00:52:28,079 --> 00:52:34,289
wouldn't a set a cast I've found that

1301
00:52:30,059 --> 00:52:39,420
bug at the start of the stream so again

1302
00:52:34,289 --> 00:52:43,590
like anything that is of that nature you

1303
00:52:39,420 --> 00:52:46,829
have to decide whether adding new

1304
00:52:43,590 --> 00:52:48,119
features into the codebase is worth

1305
00:52:46,829 --> 00:52:52,139
doing

1306
00:52:48,119 --> 00:52:54,420
or not right and there's there's even

1307
00:52:52,139 --> 00:52:57,839
additional reasons why you would care

1308
00:52:54,420 --> 00:53:01,110
about that today that aren't necessarily

1309
00:52:57,840 --> 00:53:04,079
true in the past either and one of them

1310
00:53:01,110 --> 00:53:05,190
I point out is I think C++ isn't long

1311
00:53:04,079 --> 00:53:09,299
for this world

1312
00:53:05,190 --> 00:53:11,130
like I do not suspect that we will be

1313
00:53:09,300 --> 00:53:13,230
programming in C++ you know five years

1314
00:53:11,130 --> 00:53:15,960
from now I suspect we will have moved on

1315
00:53:13,230 --> 00:53:19,800
to AC variant like maybe hopefully John

1316
00:53:15,960 --> 00:53:22,320
blows language that's like has the C

1317
00:53:19,800 --> 00:53:23,610
stuff in it still but not the C++ stuff

1318
00:53:22,320 --> 00:53:26,160
and I think it will be much easier to

1319
00:53:23,610 --> 00:53:27,900
port code bases to the non C++ language

1320
00:53:26,159 --> 00:53:32,519
if you don't use all kinds of C++

1321
00:53:27,900 --> 00:53:33,420
garbage right so I try to keep C++ out

1322
00:53:32,519 --> 00:53:35,579
of the codebase as much as possible

1323
00:53:33,420 --> 00:53:38,400
because I think it's probably gonna go

1324
00:53:35,579 --> 00:53:40,529
away if you know you're going to use C++

1325
00:53:38,400 --> 00:53:42,030
and you love C++ then there might not be

1326
00:53:40,530 --> 00:53:43,769
any reason not to introduce those but I

1327
00:53:42,030 --> 00:53:46,769
tend away those things relatively

1328
00:53:43,769 --> 00:53:48,179
heavily right putting that aside in this

1329
00:53:46,769 --> 00:53:51,210
case that's a bug I've literally never

1330
00:53:48,179 --> 00:53:53,730
had before so in my mind that's a stream

1331
00:53:51,210 --> 00:53:55,380
bug and so you know do we want to do it

1332
00:53:53,730 --> 00:53:57,090
on the stream I don't know it's probably

1333
00:53:55,380 --> 00:53:59,250
not necessary that that's really not

1334
00:53:57,090 --> 00:54:02,250
that big a deal we would have caught it

1335
00:53:59,250 --> 00:54:04,559
I don't think that's a pretty important

1336
00:54:02,250 --> 00:54:05,099
bug to guard against because we don't do

1337
00:54:04,559 --> 00:54:06,599
it that often

1338
00:54:05,099 --> 00:54:08,339
only the initialization of the arena's

1339
00:54:06,599 --> 00:54:10,079
which only happens twice so I'm not that

1340
00:54:08,340 --> 00:54:12,960
concerned about it it's a bug I've never

1341
00:54:10,079 --> 00:54:14,789
had before in regular code so it's not a

1342
00:54:12,960 --> 00:54:16,409
typo that I actually make and like I

1343
00:54:14,789 --> 00:54:17,759
said many times you only want to spend

1344
00:54:16,409 --> 00:54:20,639
time guarding against things you

1345
00:54:17,760 --> 00:54:23,190
actually do which may be different for

1346
00:54:20,639 --> 00:54:24,659
you than for me so if you find yourself

1347
00:54:23,190 --> 00:54:27,630
actually making mistakes like that

1348
00:54:24,659 --> 00:54:28,769
fairly commonly in your actual code not

1349
00:54:27,630 --> 00:54:30,090
when you're trying to talk and explain

1350
00:54:28,769 --> 00:54:32,820
things but in your actual code that you

1351
00:54:30,090 --> 00:54:33,870
do then and you find that they're hard

1352
00:54:32,820 --> 00:54:36,600
to debug that would be a good

1353
00:54:33,869 --> 00:54:37,980
to introduce additional checking if you

1354
00:54:36,599 --> 00:54:39,900
don't find yourself making those errors

1355
00:54:37,980 --> 00:54:42,150
then you're just wasting your time

1356
00:54:39,900 --> 00:54:44,700
and you know it's a good idea not to

1357
00:54:42,150 --> 00:54:46,050
waste your time so that's the advice I

1358
00:54:44,699 --> 00:54:48,149
give on basically all the things that

1359
00:54:46,050 --> 00:54:49,890
people ask about that are of that nature

1360
00:54:48,150 --> 00:54:53,970
it was like figure out how much time you

1361
00:54:49,889 --> 00:54:55,139
spend debugging those bugs and if that

1362
00:54:53,969 --> 00:54:57,629
amounts to a significant amount of time

1363
00:54:55,139 --> 00:55:00,029
then consider steps to mitigate them if

1364
00:54:57,630 --> 00:55:01,470
not then don't and you'll note that we

1365
00:55:00,030 --> 00:55:02,700
have gotten through 87 hours of

1366
00:55:01,469 --> 00:55:05,489
programming here without ever having

1367
00:55:02,699 --> 00:55:06,989
that bug before so and we've had only

1368
00:55:05,489 --> 00:55:08,369
one of them so far so if we never have

1369
00:55:06,989 --> 00:55:09,359
another one of those again I would say

1370
00:55:08,369 --> 00:55:10,859
it would be a really bad idea to start

1371
00:55:09,360 --> 00:55:12,570
introducing random stuff like static

1372
00:55:10,860 --> 00:55:14,490
Const that we don't actually need

1373
00:55:12,570 --> 00:55:15,630
whereas if we start hitting these fairly

1374
00:55:14,489 --> 00:55:17,099
regularly and we have another one next

1375
00:55:15,630 --> 00:55:19,110
week another one week after that then

1376
00:55:17,099 --> 00:55:30,210
that is the time to say hey this is a

1377
00:55:19,110 --> 00:55:31,590
bug we do let's let's take care of it do

1378
00:55:30,210 --> 00:55:33,329
you think the clumpiness is actually due

1379
00:55:31,590 --> 00:55:35,850
to splat distance from the center of the

1380
00:55:33,329 --> 00:55:37,559
chunks so I don't know what it's it's

1381
00:55:35,849 --> 00:55:40,949
from but I suspect it's from the random

1382
00:55:37,559 --> 00:55:44,009
number table of being awful right and we

1383
00:55:40,949 --> 00:55:47,039
could we could check that quickly if we

1384
00:55:44,010 --> 00:55:49,140
really wanted to right so one way we

1385
00:55:47,039 --> 00:55:50,849
could check that right is by using C's

1386
00:55:49,139 --> 00:55:52,920
random number generator which it's is

1387
00:55:50,849 --> 00:55:54,900
not great but it doesn't have the

1388
00:55:52,920 --> 00:55:55,980
problems of our random number table so

1389
00:55:54,900 --> 00:56:01,230
if we wanted to

1390
00:55:55,980 --> 00:56:05,780
I'd okay so I'd have to get back let's

1391
00:56:01,230 --> 00:56:11,219
see here let's see I'd have to get back

1392
00:56:05,780 --> 00:56:13,800
our our very clumpy grasses so I'd have

1393
00:56:11,219 --> 00:56:15,299
to crank this number up and what I'll do

1394
00:56:13,800 --> 00:56:19,289
here is I'll just crank this number up

1395
00:56:15,300 --> 00:56:24,060
to like a really absurd number right so

1396
00:56:19,289 --> 00:56:26,610
we can kind of see it see here it's kind

1397
00:56:24,059 --> 00:56:28,590
of hard it doesn't look that clumpy so

1398
00:56:26,610 --> 00:56:31,110
you know what I think that what we were

1399
00:56:28,590 --> 00:56:33,420
seeing was actually the fact that we

1400
00:56:31,110 --> 00:56:35,579
weren't drawing these on top that's what

1401
00:56:33,420 --> 00:56:36,690
we were actually seeing so I take it

1402
00:56:35,579 --> 00:56:38,340
back it wasn't the random number

1403
00:56:36,690 --> 00:56:40,139
generator was just it was that thing

1404
00:56:38,340 --> 00:56:42,030
that bug that we fixed where we weren't

1405
00:56:40,139 --> 00:56:43,859
drawing these in a second pass so that

1406
00:56:42,030 --> 00:56:46,230
the next thing that abutted would

1407
00:56:43,860 --> 00:56:47,369
overwrite you know some of the grasses

1408
00:56:46,230 --> 00:56:50,818
so we're

1409
00:56:47,369 --> 00:56:52,650
actually so it's fine I rent 'm number

1410
00:56:50,818 --> 00:56:53,818
table is still lousy like we when we

1411
00:56:52,650 --> 00:56:56,700
switched to a random number generator

1412
00:56:53,818 --> 00:56:58,889
that's good we'll get some benefits but

1413
00:56:56,699 --> 00:57:02,818
it looks like this is not actually a

1414
00:56:58,889 --> 00:57:05,400
problem so well we'll go back to

1415
00:57:02,818 --> 00:57:07,230
something what's a good amount of grass

1416
00:57:05,400 --> 00:57:08,670
I don't know let's say that much of

1417
00:57:07,230 --> 00:57:11,670
course normally we would only want the

1418
00:57:08,670 --> 00:57:12,778
grass to be on the grass but that's it

1419
00:57:11,670 --> 00:57:14,970
that's the story for another time I

1420
00:57:12,778 --> 00:57:21,420
suppose although I guess we could do

1421
00:57:14,969 --> 00:57:22,558
that pretty easily here as well do you

1422
00:57:21,420 --> 00:57:26,220
know why the trees are wiggling around

1423
00:57:22,559 --> 00:57:29,160
sometimes yes so we don't have a

1424
00:57:26,219 --> 00:57:30,268
renderer right now I know that's a weird

1425
00:57:29,159 --> 00:57:32,219
thing to say because there's stuff on

1426
00:57:30,268 --> 00:57:35,098
the screen but all we did is make a very

1427
00:57:32,219 --> 00:57:36,659
simple lit bitmap call and that's all we

1428
00:57:35,099 --> 00:57:39,390
have so you notice there's a bunch of

1429
00:57:36,659 --> 00:57:40,889
artifacts that you can already see

1430
00:57:39,389 --> 00:57:42,719
because we don't have a real renderer

1431
00:57:40,889 --> 00:57:45,358
that's something that's coming up later

1432
00:57:42,719 --> 00:57:46,768
in the stream and so what do you

1433
00:57:45,358 --> 00:57:49,498
artifacts you see for example is we

1434
00:57:46,768 --> 00:57:51,988
don't sort anything so like I can pass

1435
00:57:49,498 --> 00:57:54,328
behind things sometimes right like that

1436
00:57:51,989 --> 00:57:56,369
and that's purely because it

1437
00:57:54,329 --> 00:57:57,690
there's no sorting it just depends on

1438
00:57:56,369 --> 00:58:00,778
what order the entity is we're getting

1439
00:57:57,690 --> 00:58:02,519
dealt with right that's it and so that's

1440
00:58:00,778 --> 00:58:03,989
you know that's an example of something

1441
00:58:02,518 --> 00:58:04,858
the render will fix another thing the

1442
00:58:03,989 --> 00:58:06,539
render will fix is

1443
00:58:04,858 --> 00:58:08,489
we're not sub-pixel accurate at the

1444
00:58:06,539 --> 00:58:09,749
moment so the reason the trees are

1445
00:58:08,489 --> 00:58:12,358
wiggling like you can kind of see that

1446
00:58:09,748 --> 00:58:14,459
is because they are snapping to integer

1447
00:58:12,358 --> 00:58:17,400
coordinates they are floating-point

1448
00:58:14,460 --> 00:58:19,710
positioned but they're snapping to

1449
00:58:17,400 --> 00:58:21,298
integer coordinates and when one rounds

1450
00:58:19,710 --> 00:58:23,789
up to the next integer coordinate but

1451
00:58:21,298 --> 00:58:26,579
the other one hasn't yet right you see

1452
00:58:23,789 --> 00:58:29,480
their distance change a little bit and

1453
00:58:26,579 --> 00:58:33,210
so that's another thing that that the

1454
00:58:29,480 --> 00:58:34,559
the renderer will fix for us because we

1455
00:58:33,210 --> 00:58:38,190
will be sub pixel accurate in our

1456
00:58:34,559 --> 00:58:41,210
renderer and you will get a nice smooth

1457
00:58:38,190 --> 00:58:44,700
interpolation there which is you know

1458
00:58:41,210 --> 00:58:46,079
it's it fixes that problem but strictly

1459
00:58:44,699 --> 00:58:47,518
speaking we could fix this problem

1460
00:58:46,079 --> 00:58:49,970
another way it's just we don't actually

1461
00:58:47,518 --> 00:58:52,318
want to we want to fix it by um by

1462
00:58:49,969 --> 00:58:54,088
actually doing the sub pixel stuff

1463
00:58:52,318 --> 00:58:56,038
because there's you know that makes for

1464
00:58:54,088 --> 00:58:58,159
motion that's much smoother on things

1465
00:58:56,039 --> 00:59:05,360
that are slow moving as well

1466
00:58:58,159 --> 00:59:07,519
that makes sense what is causing the lag

1467
00:59:05,360 --> 00:59:09,500
oh okay so if you haven't been following

1468
00:59:07,519 --> 00:59:12,079
for the past couple days then you don't

1469
00:59:09,500 --> 00:59:16,099
know what that lag is so that lag is

1470
00:59:12,079 --> 00:59:18,889
right now well we've got two things

1471
00:59:16,099 --> 00:59:20,539
there are two reasons for the lag if you

1472
00:59:18,889 --> 00:59:24,319
will and I assume you're meaning that

1473
00:59:20,539 --> 00:59:26,779
pause right there right so there's two

1474
00:59:24,320 --> 00:59:31,760
reasons for it the first reason is

1475
00:59:26,780 --> 00:59:33,950
because we are not generating those

1476
00:59:31,760 --> 00:59:36,020
background chunks on a separate thread

1477
00:59:33,949 --> 00:59:38,509
we just generate them right when we

1478
00:59:36,019 --> 00:59:40,489
decide we want them and it's an

1479
00:59:38,510 --> 00:59:43,430
expensive operation so we get Lac

1480
00:59:40,489 --> 00:59:45,799
normally what we'd want to do is overlap

1481
00:59:43,429 --> 00:59:50,419
that processing so that it doesn't hurt

1482
00:59:45,800 --> 00:59:53,510
our frame rate right but that said it

1483
00:59:50,420 --> 00:59:55,940
really isn't enough work to actually

1484
00:59:53,510 --> 00:59:57,950
make the lag that you're seeing so the

1485
00:59:55,940 --> 00:59:59,869
reason that you're actually seeing that

1486
00:59:57,949 --> 01:00:01,189
the lag would be there it'd just be a

1487
00:59:59,869 --> 01:00:03,349
minuscule amount and it wouldn't

1488
01:00:01,190 --> 01:00:06,500
actually affect the frame rate because

1489
01:00:03,349 --> 01:00:08,059
we're not overlapping right but the

1490
01:00:06,500 --> 01:00:12,829
reason you're actually seeing it here is

1491
01:00:08,059 --> 01:00:15,199
because we have really for producing the

1492
01:00:12,829 --> 01:00:16,880
ground segments they're calling a bitmap

1493
01:00:15,199 --> 01:00:18,379
flooding routine like it's the same one

1494
01:00:16,880 --> 01:00:20,630
that's bleeding into the screen which is

1495
01:00:18,380 --> 01:00:22,099
completely unbiased and is the slowest

1496
01:00:20,630 --> 01:00:24,260
possible thing you could ever imagine

1497
01:00:22,099 --> 01:00:26,779
for putting a bitmap to the screen and

1498
01:00:24,260 --> 01:00:28,790
so really also we're not even compiling

1499
01:00:26,780 --> 01:00:30,320
it in a release mode so if we were to

1500
01:00:28,789 --> 01:00:32,570
compile in release mode we'd also speed

1501
01:00:30,320 --> 01:00:35,510
up a little bit so for example if we

1502
01:00:32,570 --> 01:00:39,140
were to say in build dot bat if we

1503
01:00:35,510 --> 01:00:41,510
wanted to change our - oh D here right -

1504
01:00:39,139 --> 01:00:44,329
- o - to get some some measure of

1505
01:00:41,510 --> 01:00:47,060
optimization happening in the code you

1506
01:00:44,329 --> 01:00:49,279
would notice that the lag is is you know

1507
01:00:47,059 --> 01:00:52,389
reduced right you can see that it's a

1508
01:00:49,280 --> 01:00:56,450
much shorter hiccup than it was before

1509
01:00:52,389 --> 01:00:59,299
but that's you know again that's kind of

1510
01:00:56,449 --> 01:01:00,829
more about just the fact that the we

1511
01:00:59,300 --> 01:01:04,280
haven't done any optimization on the

1512
01:01:00,829 --> 01:01:05,690
code and so that's like why the lag is

1513
01:01:04,280 --> 01:01:09,280
as substantial it is because it's

1514
01:01:05,690 --> 01:01:09,280
running very slow code right

1515
01:01:12,059 --> 01:01:15,880
are there still places where the

1516
01:01:14,170 --> 01:01:19,990
background color shows through the

1517
01:01:15,880 --> 01:01:21,730
ground tiles um probably not anymore but

1518
01:01:19,989 --> 01:01:23,289
we haven't done really the things that

1519
01:01:21,730 --> 01:01:26,940
we want to do to guarantee that but

1520
01:01:23,289 --> 01:01:29,739
those have more to do with with actually

1521
01:01:26,940 --> 01:01:31,300
those those have more to do with how we

1522
01:01:29,739 --> 01:01:33,159
generate the ground tiles than anything

1523
01:01:31,300 --> 01:01:37,030
else but if you want to be able to check

1524
01:01:33,159 --> 01:01:40,598
that one thing we can do is is put in a

1525
01:01:37,030 --> 01:01:42,510
hideous pink it's not perfect but it

1526
01:01:40,599 --> 01:01:45,460
would let us see a little bit more

1527
01:01:42,510 --> 01:01:48,700
readily where we were getting problems

1528
01:01:45,460 --> 01:01:53,108
it's not a perfect check honestly but

1529
01:01:48,699 --> 01:01:54,699
you can kind of see now that there's

1530
01:01:53,108 --> 01:01:55,869
you're not seeing much background

1531
01:01:54,699 --> 01:01:58,358
through at the very least but you can

1532
01:01:55,869 --> 01:02:01,570
also see when we when we don't quite

1533
01:01:58,358 --> 01:02:03,969
have the tiles filled yet when they come

1534
01:02:01,570 --> 01:02:06,400
on the screen you can see them kind of

1535
01:02:03,969 --> 01:02:07,809
flashing in there right and similarly

1536
01:02:06,400 --> 01:02:09,369
what we'd probably want to do eventually

1537
01:02:07,809 --> 01:02:12,190
is is we're going to need to do

1538
01:02:09,369 --> 01:02:13,838
something that that kind of predicts ask

1539
01:02:12,190 --> 01:02:15,250
for tiles that we haven't that we

1540
01:02:13,838 --> 01:02:18,130
haven't needed on the screen yet right

1541
01:02:15,250 --> 01:02:20,250
that's something we also want to do but

1542
01:02:18,130 --> 01:02:20,250
yeah

1543
01:02:39,269 --> 01:02:44,099
is this chunk code already prepared for

1544
01:02:42,030 --> 01:02:47,490
adding holes to the ground holes that

1545
01:02:44,099 --> 01:02:49,739
could be any size yes really all we have

1546
01:02:47,489 --> 01:02:53,250
to do is then cut out the Alpha later on

1547
01:02:49,739 --> 01:02:57,599
right so if we wanted to for example I

1548
01:02:53,250 --> 01:03:01,079
mean I'm just totally going to make up

1549
01:02:57,599 --> 01:03:04,019
something here right but if I walk back

1550
01:03:01,079 --> 01:03:06,119
to the starting room here I think this

1551
01:03:04,019 --> 01:03:08,880
is the starting room right yeah nope not

1552
01:03:06,119 --> 01:03:13,460
quite if I walk back to the starting

1553
01:03:08,880 --> 01:03:16,260
room eventually well I'll just restart

1554
01:03:13,460 --> 01:03:19,980
if we wanted to we could add holes

1555
01:03:16,260 --> 01:03:23,220
already right it's it's pretty easy so

1556
01:03:19,980 --> 01:03:26,570
all we need is there's a draw a bitmap

1557
01:03:23,219 --> 01:03:30,750
right routine we need to draw a bitmap

1558
01:03:26,570 --> 01:03:33,660
that can basically draw solid alpha it's

1559
01:03:30,750 --> 01:03:38,150
not really it's like a matte bitmap

1560
01:03:33,659 --> 01:03:41,039
insertion and so what this would be is

1561
01:03:38,150 --> 01:03:42,720
it's a little hard to explain but let me

1562
01:03:41,039 --> 01:03:45,599
just copy this routine and I'll show you

1563
01:03:42,719 --> 01:03:51,839
what I mean so if we did something like

1564
01:03:45,599 --> 01:03:55,319
draw Matt okay and in here if we changed

1565
01:03:51,840 --> 01:03:58,858
what we meant by the RG and B colors

1566
01:03:55,320 --> 01:04:04,650
that are in the buffer right if we made

1567
01:03:58,858 --> 01:04:07,619
this cut out a hole in the alpha instead

1568
01:04:04,650 --> 01:04:12,599
of filling it in that would allow us to

1569
01:04:07,619 --> 01:04:14,850
punch holes in it right and so just a

1570
01:04:12,599 --> 01:04:19,549
simple example we'll start with let's

1571
01:04:14,849 --> 01:04:25,858
say we did something where we had a

1572
01:04:19,550 --> 01:04:29,100
equals 1.0 - whatever that source alpha

1573
01:04:25,858 --> 01:04:29,489
was right something like that is that

1574
01:04:29,099 --> 01:04:33,480
right

1575
01:04:29,489 --> 01:04:38,159
so RSA 55 yeah something like that

1576
01:04:33,480 --> 01:04:42,630
- si so that that would be it was 55 -

1577
01:04:38,159 --> 01:04:45,809
si and when we were drawing in here

1578
01:04:42,630 --> 01:04:49,858
maybe we don't actually touch those

1579
01:04:45,809 --> 01:04:51,239
colors we just need to multiply so yeah

1580
01:04:49,858 --> 01:04:52,828
I'm trying to figure out how to do this

1581
01:04:51,239 --> 01:04:54,718
relatively quickly but

1582
01:04:52,829 --> 01:04:57,239
so we want to make a real alpha

1583
01:04:54,719 --> 01:04:58,739
composite up here so yeah don't I'm just

1584
01:04:57,239 --> 01:05:00,989
I'm just sort of not thinking this

1585
01:04:58,739 --> 01:05:04,199
through half at all but let's say we

1586
01:05:00,989 --> 01:05:06,389
take the destination alpha right and we

1587
01:05:04,199 --> 01:05:12,088
multiply it by the inverse source alpha

1588
01:05:06,389 --> 01:05:13,828
right so that it reduces it down to what

1589
01:05:12,088 --> 01:05:15,538
it so if the inverse source if the

1590
01:05:13,829 --> 01:05:17,548
source alpha was being drawn brightly it

1591
01:05:15,539 --> 01:05:20,039
would get very dark on the on the on the

1592
01:05:17,548 --> 01:05:21,900
DA and we we don't add in any color at

1593
01:05:20,039 --> 01:05:25,170
all so all we're doing is strictly

1594
01:05:21,900 --> 01:05:26,849
dimming like removing power from

1595
01:05:25,170 --> 01:05:28,619
whatever is being written in there if

1596
01:05:26,849 --> 01:05:31,920
that makes sense

1597
01:05:28,619 --> 01:05:34,680
so if we do that then what we've got is

1598
01:05:31,920 --> 01:05:37,979
the ability to match something out and

1599
01:05:34,679 --> 01:05:41,098
so I'll show you what that kind of works

1600
01:05:37,978 --> 01:05:43,468
right so if we compile this and I go

1601
01:05:41,099 --> 01:05:49,140
into ground that ground chunk generator

1602
01:05:43,469 --> 01:05:51,289
thing right Phil Gramm chunk if I just

1603
01:05:49,139 --> 01:05:53,909
in the middle of the ground chunk or

1604
01:05:51,289 --> 01:05:56,759
something well actually you know what I

1605
01:05:53,909 --> 01:06:00,449
could do let's draw their ground toughs

1606
01:05:56,759 --> 01:06:03,838
as Matt right and I'm sorry I kind of

1607
01:06:00,449 --> 01:06:06,930
did this hastily but so do you see what

1608
01:06:03,838 --> 01:06:09,808
that did right that allows it to punch

1609
01:06:06,929 --> 01:06:11,578
holes that will see through to whatever

1610
01:06:09,809 --> 01:06:16,499
is underneath remember we drew pink

1611
01:06:11,579 --> 01:06:20,099
behind it so so yeah it's real easy for

1612
01:06:16,498 --> 01:06:22,528
us to add holes we just have to have an

1613
01:06:20,099 --> 01:06:25,528
idea of like a bitmap that we want is

1614
01:06:22,528 --> 01:06:29,009
like what the hole shaped like and then

1615
01:06:25,528 --> 01:06:32,248
we punch it through really really basic

1616
01:06:29,009 --> 01:06:37,679
stuff yeah so nothing complicated there

1617
01:06:32,248 --> 01:06:39,899
if that makes sense I should put in the

1618
01:06:37,679 --> 01:06:40,978
draw Matt routine because the draw Matt

1619
01:06:39,900 --> 01:06:43,079
routine I didn't really think that

1620
01:06:40,978 --> 01:06:46,228
through right we should we should put it

1621
01:06:43,079 --> 01:06:51,449
let's check this math oh hey it already

1622
01:06:46,228 --> 01:06:53,698
has one from the previous one but I did

1623
01:06:51,449 --> 01:06:54,989
actually I did actually look up to see

1624
01:06:53,699 --> 01:06:56,338
if this was correct and I believe it is

1625
01:06:54,989 --> 01:06:58,699
so we could we could validate that later

1626
01:06:56,338 --> 01:06:58,699
but yeah

1627
01:07:01,699 --> 01:07:05,730
could you make code that ensures a

1628
01:07:03,929 --> 01:07:07,319
certain framerate but uses extra

1629
01:07:05,730 --> 01:07:08,610
available time to generate the ground

1630
01:07:07,320 --> 01:07:10,140
textures in the background maybe we're

1631
01:07:08,610 --> 01:07:13,260
generating a low quality version for us

1632
01:07:10,139 --> 01:07:16,589
to avoid having no texture at all yes

1633
01:07:13,260 --> 01:07:19,140
you could do that there those are two

1634
01:07:16,590 --> 01:07:21,240
separate things right what the lower

1635
01:07:19,139 --> 01:07:23,369
detail versus higher detail and the

1636
01:07:21,239 --> 01:07:24,719
certain framerate thing the reason why

1637
01:07:23,369 --> 01:07:27,150
you don't generally want to write code

1638
01:07:24,719 --> 01:07:29,129
like that anymore and this is true

1639
01:07:27,150 --> 01:07:32,910
especially now that the Raspberry Pi has

1640
01:07:29,130 --> 01:07:36,539
gone for a core is you need something

1641
01:07:32,909 --> 01:07:38,789
for your 4 cores to do right because

1642
01:07:36,539 --> 01:07:40,829
you're gonna have two cores at a minimum

1643
01:07:38,789 --> 01:07:44,039
most gaming machines are gonna have 4

1644
01:07:40,829 --> 01:07:47,130
cores and so you typically want to have

1645
01:07:44,039 --> 01:07:49,529
background stuff so you typically need

1646
01:07:47,130 --> 01:07:52,769
to have extra threads doing things and

1647
01:07:49,530 --> 01:07:55,980
so putting it on the main loop and doing

1648
01:07:52,769 --> 01:07:59,300
it as a frame rate guarantee a frame

1649
01:07:55,980 --> 01:08:01,650
rate limited thing just isn't very

1650
01:07:59,300 --> 01:08:02,880
leveraging of the way processors work so

1651
01:08:01,650 --> 01:08:04,980
you typically want to have a bunch of

1652
01:08:02,880 --> 01:08:07,530
tasks that you do and they kind of are

1653
01:08:04,980 --> 01:08:09,659
operating on multiple threads as a way

1654
01:08:07,530 --> 01:08:20,210
to use up that CPU time that's sitting

1655
01:08:09,659 --> 01:08:20,210
there that makes sense all right

1656
01:08:22,810 --> 01:08:31,420
looks like we are out of questions is it

1657
01:08:28,069 --> 01:08:31,420
true we are out of questions

1658
01:08:49,210 --> 01:08:55,560
I think we're out of questions well if

1659
01:08:53,979 --> 01:08:59,909
we're out of questions then that's it

1660
01:08:55,560 --> 01:09:03,310
we're all good all right folks

1661
01:08:59,909 --> 01:09:04,778
that is another handmade hero it's

1662
01:09:03,310 --> 01:09:06,880
working pretty good now I'm liking I'm

1663
01:09:04,779 --> 01:09:08,589
liking that we've got some graphics in

1664
01:09:06,880 --> 01:09:10,060
there so he's grooving add graphics add

1665
01:09:08,588 --> 01:09:14,259
a when you add graphics eyes feels good

1666
01:09:10,060 --> 01:09:16,080
it looks good it's fun so tomorrow we

1667
01:09:14,259 --> 01:09:18,100
could start on our final Z layer stuff

1668
01:09:16,079 --> 01:09:19,659
maybe you know it's gonna be fun to have

1669
01:09:18,100 --> 01:09:21,910
rooms overlooking other rooms so I think

1670
01:09:19,659 --> 01:09:23,710
that'll be a good push we'll start

1671
01:09:21,909 --> 01:09:25,449
tomorrow and I'm sure it'll go next week

1672
01:09:23,710 --> 01:09:26,980
we'll be we'll be mostly doing that

1673
01:09:25,449 --> 01:09:29,199
because that's a lot of work to get all

1674
01:09:26,979 --> 01:09:31,269
that stuff right that we've kind of been

1675
01:09:29,199 --> 01:09:34,838
sort of working towards but it's got to

1676
01:09:31,270 --> 01:09:36,850
all come together right but we finished

1677
01:09:34,838 --> 01:09:38,588
that that round of generating ground

1678
01:09:36,850 --> 01:09:40,150
textures and we did it in a way that

1679
01:09:38,588 --> 01:09:42,488
allows us to generate ground textures as

1680
01:09:40,149 --> 01:09:46,269
is as many Z levels as we want which is

1681
01:09:42,488 --> 01:09:49,778
kind of cool too because that cache can

1682
01:09:46,270 --> 01:09:50,620
just cash any tile anywhere really so

1683
01:09:49,779 --> 01:09:53,109
it's kind of handy

1684
01:09:50,619 --> 01:09:54,189
but anyway enough about that thank you

1685
01:09:53,109 --> 01:09:55,360
very much for joining me for another

1686
01:09:54,189 --> 01:09:57,519
episode of hand made here it's been a

1687
01:09:55,359 --> 01:09:59,199
pleasure coding with you as always I

1688
01:09:57,520 --> 01:10:01,030
hope to see you back here tomorrow same

1689
01:09:59,199 --> 01:10:05,109
time same place 5:00 p.m. Pacific

1690
01:10:01,029 --> 01:10:06,369
Daylight Time on twitch TV come a few

1691
01:10:05,109 --> 01:10:08,019
minutes early if you watch at I'm

1692
01:10:06,369 --> 01:10:10,569
usually here about 15 minutes early

1693
01:10:08,020 --> 01:10:11,980
actually if you would like to follow

1694
01:10:10,569 --> 01:10:13,449
along at home you can always puro to the

1695
01:10:11,979 --> 01:10:16,389
game on handmade hero org using the

1696
01:10:13,449 --> 01:10:17,979
handy dandy pre-order button so if you

1697
01:10:16,390 --> 01:10:19,300
want to check that out you could do that

1698
01:10:17,979 --> 01:10:20,679
and get immediate access to the source

1699
01:10:19,300 --> 01:10:22,719
code which you can download and play

1700
01:10:20,680 --> 01:10:24,670
with which is a good way to learn if you

1701
01:10:22,719 --> 01:10:26,770
like sort of learn by experimentation

1702
01:10:24,670 --> 01:10:28,300
which I highly recommend we've also got

1703
01:10:26,770 --> 01:10:31,420
three other things check out one is the

1704
01:10:28,300 --> 01:10:32,980
news and forum site which basically has

1705
01:10:31,420 --> 01:10:36,699
a place ask questions

1706
01:10:32,979 --> 01:10:38,229
ports to Mac and Linux and a annotated

1707
01:10:36,699 --> 01:10:40,238
episode guide so it's a lot of good

1708
01:10:38,229 --> 01:10:42,369
stuff you can use to help learn from the

1709
01:10:40,238 --> 01:10:43,718
stream that's pretty cool we also have

1710
01:10:42,369 --> 01:10:45,010
the patreon if you want us to help

1711
01:10:43,719 --> 01:10:47,020
support the video series you can

1712
01:10:45,010 --> 01:10:50,079
subscribe to that the videos are free as

1713
01:10:47,020 --> 01:10:52,150
always in our archive so that's just if

1714
01:10:50,079 --> 01:10:54,519
you're if you're just nice and want to

1715
01:10:52,149 --> 01:10:56,559
help us that's that's a very nice thing

1716
01:10:54,520 --> 01:10:58,090
to do and finally we've got the tweet

1717
01:10:56,560 --> 01:10:59,020
Papa tweets the schedule highly

1718
01:10:58,090 --> 01:11:01,150
recommend checking that out and

1719
01:10:59,020 --> 01:11:02,270
subscribing to it potentially if you

1720
01:11:01,149 --> 01:11:03,589
would like to know when

1721
01:11:02,270 --> 01:11:05,840
Stream is every night because sometimes

1722
01:11:03,590 --> 01:11:07,369
it moves around and especially now we're

1723
01:11:05,840 --> 01:11:08,539
trying out a new timeslot we used to be

1724
01:11:07,369 --> 01:11:09,890
at 8 p.m. Pacific same time we're trying

1725
01:11:08,539 --> 01:11:11,720
out 5 p.m. this week and we may switch

1726
01:11:09,890 --> 01:11:13,789
that currently so we'll see how it goes

1727
01:11:11,720 --> 01:11:15,680
anyway thank you very much for joining

1728
01:11:13,789 --> 01:11:18,800
me and I hope to see you here tomorrow

1729
01:11:15,680 --> 01:11:20,360
have a wonderful I guess it's Friday

1730
01:11:18,800 --> 01:11:23,900
tomorrow is it I don't remember

1731
01:11:20,359 --> 01:11:26,960
abner Coimbra Coimbra if I'm saying that

1732
01:11:23,899 --> 01:11:28,369
right one of our fearless moderators had

1733
01:11:26,960 --> 01:11:30,590
a thing at the beginning where he

1734
01:11:28,369 --> 01:11:32,840
eloquently stated the order of the days

1735
01:11:30,590 --> 01:11:35,539
that would occur and here I am not

1736
01:11:32,840 --> 01:11:37,579
remembering I think tomorrow is a Friday

1737
01:11:35,539 --> 01:11:39,649
it is tomorrow is a Friday so have a

1738
01:11:37,579 --> 01:11:41,930
wonderful Friday and I hope see you

1739
01:11:39,649 --> 01:11:45,309
tomorrow evening if not have a wonderful

1740
01:11:41,930 --> 01:11:45,310
weekend take it easy everyone

