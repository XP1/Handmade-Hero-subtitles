1
00:00:00,000 --> 00:00:04,349
everybody and welcome to handmade here

2
00:00:02,279 --> 00:00:08,279
the sure we code a complete game live on

3
00:00:04,349 --> 00:00:09,899
stream I got asked a question during the

4
00:00:08,279 --> 00:00:12,660
pre stream that I kind of wanted to

5
00:00:09,900 --> 00:00:15,330
record a very brief very simple answer

6
00:00:12,660 --> 00:00:18,719
to I know that's uncharacteristic of me

7
00:00:15,330 --> 00:00:20,129
but the question was like what high

8
00:00:18,719 --> 00:00:22,288
level languages do I find interesting

9
00:00:20,129 --> 00:00:25,410
and the answer generally speaking is

10
00:00:22,289 --> 00:00:27,449
none and I'd like to kind of explain

11
00:00:25,410 --> 00:00:29,609
just really quickly why and I think a

12
00:00:27,449 --> 00:00:31,859
graph was the right way to explain it

13
00:00:29,609 --> 00:00:34,800
just one of these very simple like not

14
00:00:31,859 --> 00:00:39,660
really a real graph just a kind of

15
00:00:34,799 --> 00:00:43,619
abstract graph but if you look at you

16
00:00:39,659 --> 00:00:46,288
know what the if we were to simplify

17
00:00:43,619 --> 00:00:49,459
programming languages down to just like

18
00:00:46,289 --> 00:00:52,739
two ratings right which is like

19
00:00:49,460 --> 00:00:59,100
performance let's say we put performance

20
00:00:52,738 --> 00:01:02,869
here right so this is like a high

21
00:00:59,100 --> 00:01:08,368
performance right for memory or CPU or

22
00:01:02,869 --> 00:01:10,679
whatever we choose so basically for

23
00:01:08,368 --> 00:01:12,540
whatever we define performance to be on

24
00:01:10,680 --> 00:01:14,220
a CPU scale maybe that's not using very

25
00:01:12,540 --> 00:01:16,020
much memory maybe that's being very very

26
00:01:14,219 --> 00:01:18,629
fast you know whatever it is that we

27
00:01:16,019 --> 00:01:20,489
want but the programmer decides what

28
00:01:18,629 --> 00:01:24,839
their criteria for performance is we

29
00:01:20,489 --> 00:01:29,158
would rate it here and then on this axis

30
00:01:24,840 --> 00:01:32,670
we would say that we want to measure

31
00:01:29,159 --> 00:01:37,079
like the amount of work that the

32
00:01:32,670 --> 00:01:39,420
programmer has to put in for the you

33
00:01:37,078 --> 00:01:43,408
know to finish the program actually make

34
00:01:39,420 --> 00:01:45,478
the program in question and since I we

35
00:01:43,409 --> 00:01:48,899
want to kind of make like going further

36
00:01:45,478 --> 00:01:52,640
out is better let's say what I want to

37
00:01:48,899 --> 00:01:56,549
do is call this like speed of

38
00:01:52,640 --> 00:01:59,759
development right so this is basically

39
00:01:56,549 --> 00:02:05,399
like over here is like I'm fast

40
00:01:59,759 --> 00:02:07,640
and here is slow okay and so if you look

41
00:02:05,399 --> 00:02:12,259
at something like assembly language

42
00:02:07,640 --> 00:02:16,400
assembly language is like here right

43
00:02:12,259 --> 00:02:19,158
so I can do anything I can make the best

44
00:02:16,400 --> 00:02:22,069
program but it takes an incredibly long

45
00:02:19,158 --> 00:02:25,929
time for a number of reasons one is that

46
00:02:22,068 --> 00:02:28,310
it I have to manually code lots of stuff

47
00:02:25,930 --> 00:02:31,280
that arguably maybe a computer could

48
00:02:28,310 --> 00:02:34,370
have been doing for me including things

49
00:02:31,280 --> 00:02:40,789
like instruction scheduling register

50
00:02:34,370 --> 00:02:42,140
allocation things like this so you know

51
00:02:40,789 --> 00:02:42,739
it takes a very very long time to

52
00:02:42,139 --> 00:02:46,818
program it

53
00:02:42,739 --> 00:02:50,000
but anything the CPU could do anything

54
00:02:46,818 --> 00:02:51,979
the most theoretically best possible

55
00:02:50,000 --> 00:02:53,750
performance for any situation I can get

56
00:02:51,979 --> 00:03:00,068
it because there's nothing a computer

57
00:02:53,750 --> 00:03:03,799
can do that I can't do right 100% so

58
00:03:00,068 --> 00:03:08,348
what you end up with is high level

59
00:03:03,799 --> 00:03:10,519
languages you know C is maybe like I

60
00:03:08,348 --> 00:03:16,699
don't really know where to put it but

61
00:03:10,519 --> 00:03:19,609
maybe like here let's say I'm not really

62
00:03:16,699 --> 00:03:23,030
sure exactly where it goes but C is like

63
00:03:19,609 --> 00:03:26,689
here somewhere high level languages all

64
00:03:23,030 --> 00:03:29,659
the ones I've ever really seen they're

65
00:03:26,689 --> 00:03:31,639
all like over here somewhere or over

66
00:03:29,659 --> 00:03:34,789
here some of them are here which is

67
00:03:31,639 --> 00:03:40,040
ridiculous but they're basically like in

68
00:03:34,789 --> 00:03:42,888
this band and so there's kind of this

69
00:03:40,039 --> 00:03:45,798
quadrant like up here that there's

70
00:03:42,889 --> 00:03:49,639
nothing there's nothing that's like I

71
00:03:45,799 --> 00:03:52,250
can do the best possible thing and be

72
00:03:49,639 --> 00:03:54,469
very fast now it's worth noting that

73
00:03:52,250 --> 00:03:58,939
this what I'm talking about here is for

74
00:03:54,469 --> 00:04:01,189
the same program so it doesn't count to

75
00:03:58,939 --> 00:04:03,318
say let's say you can write inline

76
00:04:01,189 --> 00:04:06,889
assembler in your C program that doesn't

77
00:04:03,318 --> 00:04:08,479
put it up here right because if as soon

78
00:04:06,889 --> 00:04:11,389
as I have to write inline assembler I'm

79
00:04:08,479 --> 00:04:14,209
back to this slow right I've moved

80
00:04:11,389 --> 00:04:16,819
backwards so I would go back to here so

81
00:04:14,209 --> 00:04:20,598
for example if you take a language you

82
00:04:16,819 --> 00:04:22,218
know your language is you know rust or

83
00:04:20,598 --> 00:04:24,889
something like this if it's only

84
00:04:22,218 --> 00:04:25,980
actually as good as C meaning it only

85
00:04:24,889 --> 00:04:28,769
really produces

86
00:04:25,980 --> 00:04:31,140
same speed win in terms of development

87
00:04:28,769 --> 00:04:33,509
as see when you're writing code that's

88
00:04:31,139 --> 00:04:35,430
as fast to see then it's only like here

89
00:04:33,509 --> 00:04:38,129
and if it added a little bit to that

90
00:04:35,430 --> 00:04:39,689
then maybe you know it can go to like

91
00:04:38,129 --> 00:04:43,139
here or something or there or whatever

92
00:04:39,689 --> 00:04:46,019
right but I want to see this language

93
00:04:43,139 --> 00:04:48,569
right I want to see the language that

94
00:04:46,019 --> 00:04:50,549
allows me to construct Azzam programs

95
00:04:48,569 --> 00:04:52,349
exactly the way that I think they should

96
00:04:50,550 --> 00:04:54,530
be constructed but in a fraction of the

97
00:04:52,350 --> 00:04:57,180
time that it would have taken me right

98
00:04:54,529 --> 00:04:59,159
and I actually think this is achievable

99
00:04:57,180 --> 00:05:03,689
I don't think this is a pipe dream I

100
00:04:59,160 --> 00:05:06,770
think what happens is no one tries like

101
00:05:03,689 --> 00:05:08,879
nobody tries to do this they sit down

102
00:05:06,769 --> 00:05:11,339
oftentimes the people who make languages

103
00:05:08,879 --> 00:05:13,199
don't even know this they're like people

104
00:05:11,339 --> 00:05:15,119
from a university who don't actually

105
00:05:13,199 --> 00:05:18,569
program the semi language very often

106
00:05:15,120 --> 00:05:20,340
right if at all they aren't really sure

107
00:05:18,569 --> 00:05:22,620
what the maximum performance is for most

108
00:05:20,339 --> 00:05:25,139
things on their computer and only like

109
00:05:22,620 --> 00:05:26,699
somewhere down the road Jews if their

110
00:05:25,139 --> 00:05:28,500
language becomes popular does it get a

111
00:05:26,699 --> 00:05:30,479
back end with an optimizer and stuff and

112
00:05:28,500 --> 00:05:32,220
then some people are working on it who

113
00:05:30,480 --> 00:05:33,900
care about this but it's too late at

114
00:05:32,220 --> 00:05:35,450
that point because no one was thinking

115
00:05:33,899 --> 00:05:38,879
about the design of the language right

116
00:05:35,449 --> 00:05:40,589
in terms of those performance so most of

117
00:05:38,879 --> 00:05:43,230
the time they're not even thinking about

118
00:05:40,589 --> 00:05:46,199
this and you know you're just not

119
00:05:43,230 --> 00:05:48,720
getting people who actually try I think

120
00:05:46,199 --> 00:05:52,170
with multi-threading this becomes even

121
00:05:48,720 --> 00:05:53,790
more important right because now we're

122
00:05:52,170 --> 00:05:55,650
talking about wanting to have language

123
00:05:53,790 --> 00:05:57,540
features that allow me to write like

124
00:05:55,649 --> 00:05:59,639
things very easily that can be

125
00:05:57,540 --> 00:06:02,960
distributed to lots of threads in the

126
00:05:59,639 --> 00:06:06,599
optimal way and stuff like that again

127
00:06:02,959 --> 00:06:08,909
really really important for someone to

128
00:06:06,600 --> 00:06:11,490
understand what the optimal

129
00:06:08,910 --> 00:06:13,140
multi-threading code looks like for a

130
00:06:11,490 --> 00:06:14,699
lot of situations before they can even

131
00:06:13,139 --> 00:06:16,620
think about designing that language

132
00:06:14,699 --> 00:06:19,170
it can't be an afterthought you can't

133
00:06:16,620 --> 00:06:21,540
add multi-threading as a secondary step

134
00:06:19,170 --> 00:06:25,980
to your language that's totally not

135
00:06:21,540 --> 00:06:29,340
gonna work right so I think that this is

136
00:06:25,980 --> 00:06:31,830
the problem and this is why I don't tend

137
00:06:29,339 --> 00:06:34,829
to like any new high-level languages is

138
00:06:31,829 --> 00:06:38,399
because they they always ask me to go

139
00:06:34,829 --> 00:06:39,750
further down to get further out and I

140
00:06:38,399 --> 00:06:42,269
don't want to go down

141
00:06:39,750 --> 00:06:45,120
I want to remain here and I want to move

142
00:06:42,269 --> 00:06:46,979
this way and if I ever saw a high-level

143
00:06:45,120 --> 00:06:49,199
language that actually allowed me to

144
00:06:46,980 --> 00:06:51,600
move laterally I would probably start

145
00:06:49,199 --> 00:06:54,000
using that language but it would have to

146
00:06:51,600 --> 00:06:56,610
be reasonably far because like if I'm

147
00:06:54,000 --> 00:06:58,259
only gonna get a little bit further I'm

148
00:06:56,610 --> 00:07:01,949
it's not gonna be worth the effort to

149
00:06:58,259 --> 00:07:04,289
switch over right so what you want is a

150
00:07:01,949 --> 00:07:05,490
big lateral movement this way and you're

151
00:07:04,290 --> 00:07:06,930
probably not gonna get all the way to

152
00:07:05,490 --> 00:07:09,030
here because that's like the perfect

153
00:07:06,930 --> 00:07:12,180
language or something right the fastest

154
00:07:09,029 --> 00:07:13,889
and best or whatever but you know I

155
00:07:12,180 --> 00:07:16,829
think we can get a lot further into this

156
00:07:13,889 --> 00:07:18,779
quadrant that we have before so that's

157
00:07:16,829 --> 00:07:20,939
my feeling about high level languages

158
00:07:18,779 --> 00:07:22,049
even the name sounds dumb to me I think

159
00:07:20,939 --> 00:07:23,730
as soon as you call it a high level

160
00:07:22,050 --> 00:07:25,800
language you're sort of admitting defeat

161
00:07:23,730 --> 00:07:32,189
to begin with I think what you want is a

162
00:07:25,800 --> 00:07:33,720
high productivity low level language if

163
00:07:32,189 --> 00:07:34,800
you want good software if you're just

164
00:07:33,720 --> 00:07:36,060
interested in sitting around and

165
00:07:34,800 --> 00:07:36,689
collecting your Series A funding or

166
00:07:36,060 --> 00:07:37,709
whatever it is

167
00:07:36,689 --> 00:07:41,069
do whatever you want doesn't matter

168
00:07:37,709 --> 00:07:42,149
right there's way more software existing

169
00:07:41,069 --> 00:07:44,730
in the world right now than there are

170
00:07:42,149 --> 00:07:46,469
good programmers so it's like you know

171
00:07:44,730 --> 00:07:48,990
it's a it's the type of world where you

172
00:07:46,470 --> 00:07:52,770
can at the least at the moment it's

173
00:07:48,990 --> 00:07:57,780
pretty easy to get by on not even

174
00:07:52,769 --> 00:08:00,229
mediocrity just like poor I just I don't

175
00:07:57,779 --> 00:08:04,589
even know it's easy to get to get by

176
00:08:00,230 --> 00:08:06,990
without much and what what place on this

177
00:08:04,589 --> 00:08:09,750
graph is jii I don't know I've never

178
00:08:06,990 --> 00:08:11,269
used it it's also not done yet I mean

179
00:08:09,750 --> 00:08:13,889
they're still working on it I don't know

180
00:08:11,269 --> 00:08:17,099
but you know once it's ready I think

181
00:08:13,889 --> 00:08:18,689
it'll it probably be pretty favorable on

182
00:08:17,100 --> 00:08:21,270
that graph I don't know it's gonna get

183
00:08:18,689 --> 00:08:25,350
quite as far to the other side because J

184
00:08:21,269 --> 00:08:27,329
I is still more I think about producing

185
00:08:25,350 --> 00:08:30,090
a language John likes to program in than

186
00:08:27,329 --> 00:08:32,429
it is as a focus on performance kind of

187
00:08:30,089 --> 00:08:35,089
language but in terms of high level

188
00:08:32,429 --> 00:08:38,929
languages it's definitely got more

189
00:08:35,090 --> 00:08:41,340
performance sensibilities than a lot of

190
00:08:38,929 --> 00:08:44,189
languages that I've seen so I think that

191
00:08:41,340 --> 00:08:45,690
bodes well for it but you know like I

192
00:08:44,190 --> 00:08:51,690
said I've never used it so I have no

193
00:08:45,690 --> 00:08:53,340
idea all right so let's get started that

194
00:08:51,690 --> 00:08:55,230
was just

195
00:08:53,340 --> 00:08:57,540
that you know that's just oh where is

196
00:08:55,230 --> 00:09:00,539
this one that crap Lisp is is kind of

197
00:08:57,539 --> 00:09:02,399
over in the other it's pretty down low

198
00:09:00,539 --> 00:09:05,669
it's it's Lisp is extremely bad at

199
00:09:02,399 --> 00:09:07,559
performance the reason I said this was

200
00:09:05,669 --> 00:09:10,199
interesting in the pre stream was just

201
00:09:07,559 --> 00:09:11,909
because it has for a very early language

202
00:09:10,200 --> 00:09:13,440
it had a lot of good ideas it was like

203
00:09:11,909 --> 00:09:16,649
oh okay

204
00:09:13,440 --> 00:09:19,670
how can we make things very flexible so

205
00:09:16,649 --> 00:09:22,559
that the programmer can produce code

206
00:09:19,669 --> 00:09:24,629
directly as part of the program which

207
00:09:22,559 --> 00:09:27,109
allows a lot of powerful meta

208
00:09:24,629 --> 00:09:30,379
programming things to occur and

209
00:09:27,110 --> 00:09:33,750
unfortunately not a lot of languages

210
00:09:30,379 --> 00:09:37,350
picked up on that who weren't similarly

211
00:09:33,750 --> 00:09:38,909
kind of non-performing interpreted but

212
00:09:37,350 --> 00:09:40,379
you can do a lot of things with stuff

213
00:09:38,909 --> 00:09:43,740
like that if you just like restrict them

214
00:09:40,379 --> 00:09:46,649
maybe to compile time or if you ship

215
00:09:43,740 --> 00:09:49,169
with a JIT I think those things are

216
00:09:46,649 --> 00:09:53,299
important right all right so let's get

217
00:09:49,169 --> 00:09:58,979
started let's do it I've been watching

218
00:09:53,299 --> 00:10:00,750
there's a show on YouTube well I guess I

219
00:09:58,980 --> 00:10:02,279
don't know what the show is called but

220
00:10:00,750 --> 00:10:05,039
the channel is called because I don't

221
00:10:02,279 --> 00:10:07,500
know if the show has a name but the the

222
00:10:05,039 --> 00:10:13,019
channel is called Google I think it's GU

223
00:10:07,500 --> 00:10:19,649
GAF ODS and I think it's it's this guy I

224
00:10:13,019 --> 00:10:22,110
think he's Brazilian and he he does like

225
00:10:19,649 --> 00:10:24,059
all these like really good like meat

226
00:10:22,110 --> 00:10:28,769
tests like he's got all these like

227
00:10:24,059 --> 00:10:30,809
steaks and every show he'll like do

228
00:10:28,769 --> 00:10:34,649
something interesting with the steaks as

229
00:10:30,809 --> 00:10:38,179
a test so like one example was he took

230
00:10:34,649 --> 00:10:41,250
like four steaks and he packed them in

231
00:10:38,179 --> 00:10:45,029
various like packings that people had

232
00:10:41,250 --> 00:10:49,830
said would we're good for tenderizing

233
00:10:45,029 --> 00:10:51,629
steaks like pineapple or just like salt

234
00:10:49,830 --> 00:10:54,000
you know like different kinds of things

235
00:10:51,629 --> 00:10:57,450
that people have said and then he you

236
00:10:54,000 --> 00:11:01,950
know did it tested them grilled them

237
00:10:57,450 --> 00:11:07,330
each and then he test the flavor right

238
00:11:01,950 --> 00:11:10,570
and it's a pretty cool if you like beef

239
00:11:07,330 --> 00:11:12,339
if you like meat things which I do it's

240
00:11:10,570 --> 00:11:14,050
a pretty cool show you'll enjoy it you

241
00:11:12,339 --> 00:11:18,600
should go check it out

242
00:11:14,049 --> 00:11:21,549
but he has this really cool his voice

243
00:11:18,600 --> 00:11:23,589
and I don't really it you know some of

244
00:11:21,549 --> 00:11:25,659
its accent but I think most of it just

245
00:11:23,589 --> 00:11:29,500
him he just has an interesting voice and

246
00:11:25,659 --> 00:11:31,750
so every time right when he's about to

247
00:11:29,500 --> 00:11:34,240
like do whatever the like the money shot

248
00:11:31,750 --> 00:11:36,190
is like he's about to do the grip like

249
00:11:34,240 --> 00:11:37,778
the fire up the grill and like put the

250
00:11:36,190 --> 00:11:38,800
the super steaks on which are super

251
00:11:37,778 --> 00:11:41,169
looking forward to because they're all

252
00:11:38,799 --> 00:11:43,088
like oh he's beautiful he goes let's do

253
00:11:41,169 --> 00:11:45,159
it he just has this really funny way of

254
00:11:43,089 --> 00:11:46,720
saying it and it totally sticks in my

255
00:11:45,159 --> 00:11:49,360
head you'll see when you see he has a

256
00:11:46,720 --> 00:11:51,940
key he has a really good voice for four

257
00:11:49,360 --> 00:11:56,050
shows I don't really but because it's

258
00:11:51,940 --> 00:11:57,490
not very distinctive but but he does and

259
00:11:56,049 --> 00:11:59,620
it sounds cool you'll see you'll you'll

260
00:11:57,490 --> 00:12:01,240
end up you'll end up appreciating it

261
00:11:59,620 --> 00:12:02,409
it's also it's just a good show he has

262
00:12:01,240 --> 00:12:04,180
like I don't know if it's like his

263
00:12:02,409 --> 00:12:06,730
nephew or if they're related or

264
00:12:04,179 --> 00:12:07,899
something I haven't gone back and

265
00:12:06,730 --> 00:12:11,019
watched like the original introduction

266
00:12:07,899 --> 00:12:14,289
ones so I don't actually know but he

267
00:12:11,019 --> 00:12:16,839
always has this other guy there with him

268
00:12:14,289 --> 00:12:21,669
at least one other guy his name's angel

269
00:12:16,839 --> 00:12:27,550
and he he doesn't tell him like what

270
00:12:21,669 --> 00:12:29,708
they're doing right and so like he he's

271
00:12:27,549 --> 00:12:32,078
always very like okay he's prepared this

272
00:12:29,708 --> 00:12:35,109
crazy test and then he's like okay angel

273
00:12:32,078 --> 00:12:37,299
like let's test it out and like it's

274
00:12:35,110 --> 00:12:39,940
it's good you just go check it out watch

275
00:12:37,299 --> 00:12:41,620
the show if you like beef at all watch

276
00:12:39,940 --> 00:12:44,410
the show I don't know if they think

277
00:12:41,620 --> 00:12:47,740
besides beef I think they do sometimes

278
00:12:44,409 --> 00:12:49,719
it's just mostly they do beef and I

279
00:12:47,740 --> 00:12:50,919
think because they're very popular now

280
00:12:49,720 --> 00:12:53,170
it's not a it's not like some weird

281
00:12:50,919 --> 00:12:55,708
small show I found it it's like it's a

282
00:12:53,169 --> 00:12:58,299
very popular show I think they get um

283
00:12:55,708 --> 00:13:01,479
like sponsors to send them beef now so

284
00:12:58,299 --> 00:13:03,219
they get all kinds of crazy beef I think

285
00:13:01,480 --> 00:13:05,159
maybe not I don't know if they actually

286
00:13:03,220 --> 00:13:07,360
pay for it themselves

287
00:13:05,159 --> 00:13:08,860
some of the beats very expensive but I

288
00:13:07,360 --> 00:13:10,089
guess you hey you got a popular youtube

289
00:13:08,860 --> 00:13:14,050
show you're probably making reasonable

290
00:13:10,089 --> 00:13:18,250
ad revenue anyway all that aside let's

291
00:13:14,049 --> 00:13:20,578
get started we sort of took the first

292
00:13:18,250 --> 00:13:20,578
steps

293
00:13:20,828 --> 00:13:23,978
Saturday I was planning to be able to

294
00:13:22,539 --> 00:13:25,298
pick him Sunday but I got sick I'm still

295
00:13:23,979 --> 00:13:27,100
a little bit sick but I'm mostly

296
00:13:25,298 --> 00:13:30,728
recovered now my voice is not worn out

297
00:13:27,100 --> 00:13:31,959
so I can do the show I wasn't like so

298
00:13:30,729 --> 00:13:35,649
sick I couldn't do the show or something

299
00:13:31,958 --> 00:13:38,198
in terms of like physically it was just

300
00:13:35,649 --> 00:13:39,548
my throat was so aggravated that I

301
00:13:38,198 --> 00:13:41,168
couldn't talk I'm still fine I could

302
00:13:39,548 --> 00:13:43,208
walk around I you know good it was I

303
00:13:41,168 --> 00:13:45,338
wasn't really sick sick in that sense I

304
00:13:43,208 --> 00:13:46,868
just I couldn't really I wouldn't have

305
00:13:45,339 --> 00:13:51,039
been able to do two hours of talking I

306
00:13:46,869 --> 00:13:53,259
would have been like but anyway so what

307
00:13:51,038 --> 00:13:55,808
we didn't get to do on Sunday was sort

308
00:13:53,259 --> 00:13:58,619
of get started on the implementation of

309
00:13:55,808 --> 00:14:01,629
what we had discussed doing on Saturday

310
00:13:58,619 --> 00:14:04,559
and what that is is moving our system

311
00:14:01,629 --> 00:14:08,069
over to just use light probes because I

312
00:14:04,558 --> 00:14:10,269
finally realized after reading a paper

313
00:14:08,068 --> 00:14:12,159
well I haven't actually read the whole

314
00:14:10,269 --> 00:14:14,528
paper because I wasn't even looking at

315
00:14:12,159 --> 00:14:16,298
that sort of stuff but I just wanted to

316
00:14:14,528 --> 00:14:17,438
see what the answer was to something

317
00:14:16,298 --> 00:14:18,909
that I thought you couldn't do and it

318
00:14:17,438 --> 00:14:20,078
turns out that like basically everyone

319
00:14:18,909 --> 00:14:22,118
already does this thing and it's

320
00:14:20,078 --> 00:14:25,178
actually a pretty easy answer which was

321
00:14:22,119 --> 00:14:27,548
just how you how you propagate light

322
00:14:25,178 --> 00:14:30,220
with light probes if you don't have an

323
00:14:27,548 --> 00:14:31,448
offline solution and I didn't realize it

324
00:14:30,220 --> 00:14:32,769
was as simple as it was I should have

325
00:14:31,448 --> 00:14:35,558
thought of it felt kind of stupid if

326
00:14:32,769 --> 00:14:37,298
you're missing why I was stupid I

327
00:14:35,558 --> 00:14:40,659
discuss it on Saturday streams to go

328
00:14:37,298 --> 00:14:42,788
take take a look but anyway so we're

329
00:14:40,659 --> 00:14:44,230
pretty much not really changing very

330
00:14:42,788 --> 00:14:46,480
much about our lighting algorithm at all

331
00:14:44,230 --> 00:14:48,220
we're using the exact same thing that we

332
00:14:46,480 --> 00:14:50,829
were using for all intents and purposes

333
00:14:48,220 --> 00:14:53,889
we're going to modify it fairly fairly

334
00:14:50,828 --> 00:14:57,458
mildly today or over the next couple

335
00:14:53,889 --> 00:14:59,288
weekends but the big thing that I had

336
00:14:57,458 --> 00:15:01,928
wanted to always redo if I could have

337
00:14:59,288 --> 00:15:04,239
done but didn't think I could was reduce

338
00:15:01,928 --> 00:15:06,730
where we're sampling from and that's

339
00:15:04,239 --> 00:15:08,259
what light probes are I couldn't think

340
00:15:06,730 --> 00:15:09,428
of a way to do that exactly because I

341
00:15:08,259 --> 00:15:12,938
didn't realize you could just sample

342
00:15:09,428 --> 00:15:14,288
them at run time during the propagation

343
00:15:12,938 --> 00:15:17,048
phase I don't know why that never

344
00:15:14,288 --> 00:15:19,808
occurred to me it just didn't so anyway

345
00:15:17,048 --> 00:15:22,178
that's all we're doing and it's gonna

346
00:15:19,808 --> 00:15:23,588
take us a little while do it but because

347
00:15:22,178 --> 00:15:24,639
you know lighting is complicated I

348
00:15:23,589 --> 00:15:26,529
always say it's one of the hardest

349
00:15:24,639 --> 00:15:28,329
things you can do in graphics so it's

350
00:15:26,528 --> 00:15:29,918
gonna take a while but there's nothing

351
00:15:28,328 --> 00:15:31,269
magic here you've already seen me make

352
00:15:29,918 --> 00:15:33,600
the whole lighting system it works

353
00:15:31,269 --> 00:15:35,429
pretty well we're just talking about

354
00:15:33,600 --> 00:15:37,230
making it more efficient and so

355
00:15:35,429 --> 00:15:40,379
switching to light probes one of the

356
00:15:37,230 --> 00:15:44,159
things I was starting to do here and I

357
00:15:40,379 --> 00:15:46,708
think we actually well actually I know

358
00:15:44,159 --> 00:15:49,919
where it is it's down here so but I

359
00:15:46,708 --> 00:15:53,039
think we got started on it and then I

360
00:15:49,919 --> 00:15:54,240
said well we're gonna save it for

361
00:15:53,039 --> 00:15:56,969
tomorrow in fact here it is

362
00:15:54,240 --> 00:15:59,730
so this builds spatial partition for

363
00:15:56,970 --> 00:16:02,240
lighting function and you can see that's

364
00:15:59,730 --> 00:16:05,879
doing the lighting solution here uh

365
00:16:02,240 --> 00:16:09,480
basically what we want to do is oh sorry

366
00:16:05,879 --> 00:16:11,129
I take it back we already had that oh

367
00:16:09,480 --> 00:16:13,110
yeah that's right we already had one in

368
00:16:11,129 --> 00:16:15,028
there nevermind that's not the one I

369
00:16:13,110 --> 00:16:19,800
wanted to talk about that one is

370
00:16:15,028 --> 00:16:22,169
actually the one that we're using during

371
00:16:19,799 --> 00:16:24,359
the Ray casting which we may also want

372
00:16:22,169 --> 00:16:27,599
to update here but I thought we added

373
00:16:24,360 --> 00:16:29,610
one for voxel izing did we not I thought

374
00:16:27,600 --> 00:16:35,449
that's one thing we added in here that

375
00:16:29,610 --> 00:16:41,068
that I started before before we ended no

376
00:16:35,448 --> 00:16:43,639
because that's not it right what

377
00:16:41,068 --> 00:16:43,639
happened here

378
00:16:49,200 --> 00:16:57,000
yeah here's our light probe spatial

379
00:16:51,059 --> 00:16:58,289
index didn't we have this here it is all

380
00:16:57,000 --> 00:17:01,169
right we did I just for some reason I'm

381
00:16:58,289 --> 00:17:02,909
blind and can't see it anyway

382
00:17:01,169 --> 00:17:04,798
so on Saturday we started with this

383
00:17:02,909 --> 00:17:06,869
function and this is basically just

384
00:17:04,798 --> 00:17:08,910
saying look I want to be able to add

385
00:17:06,869 --> 00:17:10,019
these things to a spatial index and the

386
00:17:08,910 --> 00:17:11,730
reason that I want to add them to a

387
00:17:10,019 --> 00:17:12,629
spatial index is because I need to look

388
00:17:11,730 --> 00:17:16,230
up to be fast

389
00:17:12,630 --> 00:17:21,049
I don't probably want to go before we

390
00:17:16,230 --> 00:17:24,120
had sort of a like a I want to call it a

391
00:17:21,048 --> 00:17:25,650
light cut system that's usually what

392
00:17:24,119 --> 00:17:29,369
they call it in the literature where you

393
00:17:25,650 --> 00:17:30,660
have like one large lighting thing that

394
00:17:29,369 --> 00:17:31,859
encompasses your entire scene and then

395
00:17:30,660 --> 00:17:34,140
it breaks into smaller ones breaks the

396
00:17:31,859 --> 00:17:36,329
Samanas breaks the swamis so when you're

397
00:17:34,140 --> 00:17:39,929
ray casting you just say depending on

398
00:17:36,329 --> 00:17:41,759
how far out I am as I as I leave the

399
00:17:39,929 --> 00:17:45,390
immediate region that I'm in I'm gonna

400
00:17:41,759 --> 00:17:49,529
look at like less and less detail how

401
00:17:45,390 --> 00:17:51,000
the scene is described right and that's

402
00:17:49,529 --> 00:17:52,649
the kind of thing that I'm not sure if

403
00:17:51,000 --> 00:17:53,730
we're really gonna want to do anymore

404
00:17:52,650 --> 00:17:55,380
we're probably gonna leave it in at

405
00:17:53,730 --> 00:17:58,548
first because it's already there we're

406
00:17:55,380 --> 00:18:01,950
not gonna like pull it out proactive

407
00:17:58,548 --> 00:18:02,879
like preemptively but we might not

408
00:18:01,950 --> 00:18:05,490
really want it anymore

409
00:18:02,880 --> 00:18:07,080
however you may ask the question well

410
00:18:05,490 --> 00:18:09,750
why don't you just use that it is a

411
00:18:07,079 --> 00:18:13,168
spatial partition it is but we're going

412
00:18:09,750 --> 00:18:15,960
to need a very very fast very very fast

413
00:18:13,169 --> 00:18:18,509
spatial partition for looking up the

414
00:18:15,960 --> 00:18:20,759
light probe contributions to any

415
00:18:18,509 --> 00:18:22,319
individual hit and the reason for that

416
00:18:20,759 --> 00:18:27,480
is we're going to have to do a lot of

417
00:18:22,319 --> 00:18:30,569
those evaluations and again I really

418
00:18:27,480 --> 00:18:34,019
think we we want to do it in something

419
00:18:30,569 --> 00:18:35,250
like a voxel again I'm not 100% certain

420
00:18:34,019 --> 00:18:37,259
that we don't want to use a multi

421
00:18:35,250 --> 00:18:38,819
resolution structure for this but I'm

422
00:18:37,259 --> 00:18:41,910
pretty sure we want to do going forward

423
00:18:38,819 --> 00:18:45,058
is to just use regular ray casting no

424
00:18:41,910 --> 00:18:47,940
level of detail because we're gonna

425
00:18:45,058 --> 00:18:50,579
count on the light probes to move stuff

426
00:18:47,940 --> 00:18:53,429
around for us and probably not really

427
00:18:50,579 --> 00:18:56,279
use the hierarchical stuff anymore

428
00:18:53,429 --> 00:18:59,490
so you know the hierarchical stuff we

429
00:18:56,279 --> 00:19:01,230
may be used for hit detection but you

430
00:18:59,490 --> 00:19:02,789
know we're we're gonna stay away from

431
00:19:01,230 --> 00:19:03,960
that probably four acts

432
00:19:02,789 --> 00:19:05,700
doing the lighting sampling because I

433
00:19:03,960 --> 00:19:07,079
think we can probably get away now with

434
00:19:05,700 --> 00:19:08,069
just doing direct lighting sampling

435
00:19:07,079 --> 00:19:11,159
everywhere

436
00:19:08,069 --> 00:19:12,480
don't know as I'm saying it I'm sort of

437
00:19:11,160 --> 00:19:17,009
having second thoughts I'm like maybe we

438
00:19:12,480 --> 00:19:19,200
should be using a hierarchy for that and

439
00:19:17,009 --> 00:19:21,359
it's hard to say because if you think

440
00:19:19,200 --> 00:19:25,590
about what happens there you know that

441
00:19:21,359 --> 00:19:27,269
hierarchy that you build we could just

442
00:19:25,589 --> 00:19:30,119
have it always be a light probe

443
00:19:27,269 --> 00:19:32,069
hierarchy meaning we take all of our

444
00:19:30,119 --> 00:19:36,929
lighting probes we merge them together

445
00:19:32,069 --> 00:19:38,220
and so when you recast something as you

446
00:19:36,930 --> 00:19:41,850
get further out you just use that

447
00:19:38,220 --> 00:19:43,500
composite light probe I don't know it

448
00:19:41,849 --> 00:19:45,119
doesn't thrill me so I think I'm going

449
00:19:43,500 --> 00:19:46,799
to try and say let's let's stay away

450
00:19:45,119 --> 00:19:49,769
from that and we'll just concentrate on

451
00:19:46,799 --> 00:19:54,509
when we do our spacial hierarchy we're

452
00:19:49,769 --> 00:19:56,309
just gonna do a we're just gonna use

453
00:19:54,509 --> 00:19:57,660
that for accelerating our hit detection

454
00:19:56,309 --> 00:19:58,169
and we're not really gonna do anything

455
00:19:57,660 --> 00:20:00,990
else with it

456
00:19:58,170 --> 00:20:03,750
that's probably what I will what I'll

457
00:20:00,990 --> 00:20:05,819
stick with okay so moving on as we do

458
00:20:03,750 --> 00:20:06,900
add probe spatial index here we sort of

459
00:20:05,819 --> 00:20:10,109
sketched out what this routine would

460
00:20:06,900 --> 00:20:12,540
look like as you can see we need some

461
00:20:10,109 --> 00:20:14,939
kind of a function that will take the

462
00:20:12,539 --> 00:20:17,339
spatial index in question and it will

463
00:20:14,940 --> 00:20:20,640
take a position like something that says

464
00:20:17,339 --> 00:20:23,639
here is where you know some some 3d

465
00:20:20,640 --> 00:20:25,680
position in space and from that we want

466
00:20:23,640 --> 00:20:27,300
to get back something that is in our

467
00:20:25,680 --> 00:20:29,160
spatial index right because it spatial

468
00:20:27,299 --> 00:20:31,680
index is basically a big voxel that

469
00:20:29,160 --> 00:20:34,590
we're laying over the scene and we want

470
00:20:31,680 --> 00:20:38,190
to map things into that voxel when we

471
00:20:34,589 --> 00:20:40,980
loop through all of the voxel points we

472
00:20:38,190 --> 00:20:45,180
will then insert this probe in there if

473
00:20:40,980 --> 00:20:48,839
this is the best probe and what you can

474
00:20:45,180 --> 00:20:50,610
see here we're not actually using any

475
00:20:48,839 --> 00:20:52,529
kind of tests we need to use some kind

476
00:20:50,609 --> 00:20:56,009
of test here but what's happening is

477
00:20:52,529 --> 00:21:00,539
saying look let's get whatever light is

478
00:20:56,009 --> 00:21:02,250
in this facial index at the moment when

479
00:21:00,539 --> 00:21:05,849
we get what light is in this particular

480
00:21:02,250 --> 00:21:08,640
portion of the spatial index what we

481
00:21:05,849 --> 00:21:11,189
want to do is we want to figure out

482
00:21:08,640 --> 00:21:13,080
whether or not we should replace it with

483
00:21:11,190 --> 00:21:15,180
a new one that's getting inserted right

484
00:21:13,079 --> 00:21:16,799
that's what we're trying to do here that

485
00:21:15,180 --> 00:21:19,140
way each cell of our voxel

486
00:21:16,799 --> 00:21:21,180
we'll always have some look up into a

487
00:21:19,140 --> 00:21:26,759
light probe that's supposed to be used

488
00:21:21,180 --> 00:21:30,299
there now remember these things will

489
00:21:26,759 --> 00:21:32,519
need to be sampled all together so when

490
00:21:30,299 --> 00:21:35,609
we actually go to do a sample we need to

491
00:21:32,519 --> 00:21:38,220
find like the ones that are at the the

492
00:21:35,609 --> 00:21:40,199
corners in it's a little bit tricky I

493
00:21:38,220 --> 00:21:42,630
mentioned this at the end of the stream

494
00:21:40,200 --> 00:21:43,500
I'm gonna mention it again because it's

495
00:21:42,630 --> 00:21:45,060
something that we're gonna have to

496
00:21:43,500 --> 00:21:47,849
grapple with it's probably the most

497
00:21:45,059 --> 00:21:52,559
interesting bookkeeping element of this

498
00:21:47,849 --> 00:22:00,709
scheme but what happens with our voxel

499
00:21:52,559 --> 00:22:02,730
is if you look at any given voxel cell

500
00:22:00,710 --> 00:22:07,410
we're going to have a fundamental

501
00:22:02,730 --> 00:22:13,140
problem where all right here's our axis

502
00:22:07,410 --> 00:22:15,690
Y X Z if we always just consider the

503
00:22:13,140 --> 00:22:19,020
minimum corner primal so this is our

504
00:22:15,690 --> 00:22:23,250
minimum corner so we know very very

505
00:22:19,019 --> 00:22:26,519
easily with a very simple multiply and

506
00:22:23,250 --> 00:22:28,410
truncation we can index into our voxel

507
00:22:26,519 --> 00:22:32,069
engine like basically to ops right

508
00:22:28,410 --> 00:22:35,330
pretty pretty pretty straightforward we

509
00:22:32,069 --> 00:22:38,849
may need a clamp in there but you know

510
00:22:35,329 --> 00:22:41,490
so for op stops if we clamp there if we

511
00:22:38,849 --> 00:22:44,969
actually just make sure we only ever

512
00:22:41,490 --> 00:22:47,160
allow inbounds values by sizing the

513
00:22:44,970 --> 00:22:49,019
voxel abruptly then you only have two so

514
00:22:47,160 --> 00:22:53,610
you're two or four either way very very

515
00:22:49,019 --> 00:22:59,279
cheap right so in here when we when we

516
00:22:53,609 --> 00:23:02,879
get this particular index back we can

517
00:22:59,279 --> 00:23:05,129
then look up something right this this

518
00:23:02,880 --> 00:23:09,660
value is gonna give us something in our

519
00:23:05,130 --> 00:23:13,260
light probe set right or I should say

520
00:23:09,660 --> 00:23:16,110
group so in our light probe group will

521
00:23:13,259 --> 00:23:19,319
have data but the question is just what

522
00:23:16,109 --> 00:23:21,750
data now in a perfect world we would

523
00:23:19,319 --> 00:23:24,720
just have a light probe and you would

524
00:23:21,750 --> 00:23:27,119
just use it and so right here would just

525
00:23:24,720 --> 00:23:28,890
be the probe right and that'd be the

526
00:23:27,119 --> 00:23:30,479
most efficient thing I look up in the

527
00:23:28,890 --> 00:23:34,590
voxel I get the probe I

528
00:23:30,480 --> 00:23:36,750
light with the probe so why can't I just

529
00:23:34,589 --> 00:23:41,399
do that well the answer is because at

530
00:23:36,750 --> 00:23:45,058
some point there's another probe right

531
00:23:41,400 --> 00:23:48,298
so at some point down the voxel as I

532
00:23:45,058 --> 00:23:50,220
keep going this way at some point I'm

533
00:23:48,298 --> 00:23:52,589
going to get another probe there's a

534
00:23:50,220 --> 00:23:54,360
probe here right that gives me a good

535
00:23:52,589 --> 00:23:56,869
answers for things inside this cell and

536
00:23:54,359 --> 00:23:59,219
there's a probe over here at some point

537
00:23:56,869 --> 00:24:03,000
you should be lighting with this probe

538
00:23:59,220 --> 00:24:04,769
not this one right and if all I did was

539
00:24:03,000 --> 00:24:07,679
for every voxel I just picked the

540
00:24:04,769 --> 00:24:10,529
closest light probe and used that then

541
00:24:07,679 --> 00:24:13,080
we would see somewhere in here when that

542
00:24:10,529 --> 00:24:17,279
answer changed you would see a lighting

543
00:24:13,079 --> 00:24:20,119
pop so as my object would move through

544
00:24:17,279 --> 00:24:22,678
the voxel and across the voxel boundary

545
00:24:20,119 --> 00:24:24,119
into the next voxel where the answer

546
00:24:22,679 --> 00:24:25,470
changed and it might not change here

547
00:24:24,119 --> 00:24:27,329
like maybe it's the same here so the pop

548
00:24:25,470 --> 00:24:30,089
wouldn't be here and it's over here that

549
00:24:27,329 --> 00:24:32,849
the pop is right who knows but some

550
00:24:30,089 --> 00:24:36,000
number of voxel cells later as I pass

551
00:24:32,849 --> 00:24:39,418
into one that has a different closest

552
00:24:36,000 --> 00:24:41,250
light I'll see that lighting pop so what

553
00:24:39,419 --> 00:24:44,040
I need to be able to do here is I need

554
00:24:41,250 --> 00:24:46,230
to be able to provide a set of light

555
00:24:44,039 --> 00:24:50,279
probes like some number of light probes

556
00:24:46,230 --> 00:24:54,269
that I can use together to blend right

557
00:24:50,279 --> 00:24:57,808
and as I'm saying it I'm realizing that

558
00:24:54,269 --> 00:25:01,470
actually it's simpler than I think it is

559
00:24:57,808 --> 00:25:04,139
because there's no penalty for having

560
00:25:01,470 --> 00:25:12,509
two voxel cells next to each other have

561
00:25:04,140 --> 00:25:14,900
the same light probe actually okay so

562
00:25:12,509 --> 00:25:20,089
what we could do instead is just

563
00:25:14,900 --> 00:25:20,090
discretize okay

564
00:25:21,349 --> 00:25:28,089
I think we have the answer here as I'm

565
00:25:24,619 --> 00:25:32,989
saying it so here's what I think we do

566
00:25:28,089 --> 00:25:36,888
let's just tell ourselves that the

567
00:25:32,990 --> 00:25:40,460
requirement for our voxels is that the

568
00:25:36,888 --> 00:25:43,609
voxels themselves will be aligned with

569
00:25:40,460 --> 00:25:52,159
the world such that the light probes are

570
00:25:43,609 --> 00:25:53,658
always considered to be okay so the only

571
00:25:52,159 --> 00:25:55,190
thing I'm we're not worried about is if

572
00:25:53,659 --> 00:25:56,840
I ever want to have a moving light probe

573
00:25:55,190 --> 00:25:58,759
so let me just say this first and then

574
00:25:56,839 --> 00:26:02,240
we can talk about that case in a second

575
00:25:58,759 --> 00:26:07,429
if we just assume that we'll place our

576
00:26:02,240 --> 00:26:11,269
voxel grid reasonably and for any given

577
00:26:07,429 --> 00:26:14,899
voxel cell we will just say that there

578
00:26:11,269 --> 00:26:16,429
is only one light probe and that light

579
00:26:14,898 --> 00:26:20,928
probe is considered to be in the middle

580
00:26:16,429 --> 00:26:23,179
of the voxel cell right then all we

581
00:26:20,929 --> 00:26:26,090
would have to do is just assign every

582
00:26:23,179 --> 00:26:28,399
voxel a light probe and even if two

583
00:26:26,089 --> 00:26:31,490
voxel cells next to each other had the

584
00:26:28,398 --> 00:26:34,518
same light probe that'd be fine right

585
00:26:31,490 --> 00:26:39,649
and then when we go to gather you just

586
00:26:34,519 --> 00:26:42,970
use the like eight voxel cells whatever

587
00:26:39,648 --> 00:26:46,939
their eight answers are is what you use

588
00:26:42,970 --> 00:26:48,528
right and that's it you just blend

589
00:26:46,940 --> 00:26:52,759
between those and you're done and that's

590
00:26:48,528 --> 00:26:56,000
great the only thing that that doesn't

591
00:26:52,759 --> 00:26:58,759
really work well for is if light probes

592
00:26:56,000 --> 00:27:01,490
move around because if light probes move

593
00:26:58,759 --> 00:27:03,200
around then the approximation that

594
00:27:01,490 --> 00:27:09,950
they're just in the center of the voxel

595
00:27:03,200 --> 00:27:13,100
cell doesn't really work right because

596
00:27:09,950 --> 00:27:14,778
as they move and right we when we look

597
00:27:13,099 --> 00:27:16,609
up the light probe we can get its actual

598
00:27:14,778 --> 00:27:18,409
position so it's not a storage problem

599
00:27:16,609 --> 00:27:22,158
we know where the light probe actually

600
00:27:18,409 --> 00:27:25,370
was but the problem is we can't really

601
00:27:22,159 --> 00:27:27,440
use that because if we used where the

602
00:27:25,369 --> 00:27:29,449
light probe actually was we would again

603
00:27:27,440 --> 00:27:31,250
get discontinuity as we move across the

604
00:27:29,450 --> 00:27:33,649
boundary if this light probe is like

605
00:27:31,250 --> 00:27:34,509
right here and then the next voxel cell

606
00:27:33,648 --> 00:27:36,608
over there was

607
00:27:34,509 --> 00:27:40,659
like probe that was close that was ends

608
00:27:36,608 --> 00:27:43,898
up being closer then as you move between

609
00:27:40,659 --> 00:27:46,119
these unfortunately you would you would

610
00:27:43,898 --> 00:27:47,408
as you well I guess the more interest

611
00:27:46,118 --> 00:27:49,468
let's say it was like really close to

612
00:27:47,409 --> 00:27:53,559
that boundary as I move through here

613
00:27:49,469 --> 00:28:01,298
inside this voxel right I'm still using

614
00:27:53,558 --> 00:28:02,888
this and I'm not really vocalizing this

615
00:28:01,298 --> 00:28:04,479
properly I think this is an actual

616
00:28:02,888 --> 00:28:05,348
problem but every time I try to vocalize

617
00:28:04,479 --> 00:28:07,058
I'm like well that's not really

618
00:28:05,348 --> 00:28:16,118
technically a problem let me use a 2d

619
00:28:07,058 --> 00:28:19,658
example see if I can work it out so here

620
00:28:16,118 --> 00:28:23,798
are the points at which we store which

621
00:28:19,659 --> 00:28:25,289
light probe is closest right so what I'm

622
00:28:23,798 --> 00:28:29,078
worried about

623
00:28:25,288 --> 00:28:31,690
in terms of light probes moving is

624
00:28:29,078 --> 00:28:34,538
suppose I have an entity and the entity

625
00:28:31,690 --> 00:28:37,209
is taking a path right however it wants

626
00:28:34,538 --> 00:28:38,618
to through my voxels you know I'm saying

627
00:28:37,209 --> 00:28:40,298
and maybe that's a little bit too

628
00:28:38,618 --> 00:28:43,228
regular that path so maybe it's like

629
00:28:40,298 --> 00:28:43,229
this kind of a thing

630
00:28:44,429 --> 00:28:48,519
so I have an entity that's moving

631
00:28:46,209 --> 00:28:51,339
through these and what I want to

632
00:28:48,519 --> 00:28:53,019
guarantee is that at no point so these

633
00:28:51,338 --> 00:28:57,428
are all the places where the equation

634
00:28:53,019 --> 00:29:02,278
changes as it crosses that voxel

635
00:28:57,429 --> 00:29:02,278
boundary right my equation will change

636
00:29:03,479 --> 00:29:12,249
now how will the equation change right

637
00:29:06,509 --> 00:29:15,368
the equation will change because the

638
00:29:12,249 --> 00:29:18,940
light Pros under consideration change if

639
00:29:15,368 --> 00:29:22,118
we take only the 2d problem then while

640
00:29:18,940 --> 00:29:25,899
you're inside this region right these

641
00:29:22,118 --> 00:29:27,098
are the light probes these these they're

642
00:29:25,898 --> 00:29:29,138
not necessary light bulbs their indexes

643
00:29:27,098 --> 00:29:30,398
light probes these are the indices to

644
00:29:29,138 --> 00:29:31,808
light into the light probe array that

645
00:29:30,398 --> 00:29:33,098
you would be using we don't know what

646
00:29:31,808 --> 00:29:35,378
they are but we know there's four of

647
00:29:33,098 --> 00:29:37,538
them right so you're using light probes

648
00:29:35,378 --> 00:29:39,608
a B C and D which might all be the same

649
00:29:37,538 --> 00:29:40,808
they might all be a right it might be

650
00:29:39,608 --> 00:29:43,388
there's only one light probe in this

651
00:29:40,808 --> 00:29:45,338
whole region so it's all using a or they

652
00:29:43,388 --> 00:29:48,219
may all be different maybe a B C and D

653
00:29:45,338 --> 00:29:51,940
right but while you're in here this is

654
00:29:48,220 --> 00:29:56,339
what you're using now when I cross this

655
00:29:51,940 --> 00:30:00,940
boundary here I change right if this is

656
00:29:56,339 --> 00:30:03,490
ABCD then C and D remain in the active

657
00:30:00,940 --> 00:30:07,440
set but a and B go away and whatever the

658
00:30:03,490 --> 00:30:10,599
answer is here would be its E and F

659
00:30:07,440 --> 00:30:12,700
that's what I'm going to use now so I've

660
00:30:10,599 --> 00:30:14,918
moved from using a window that looked

661
00:30:12,700 --> 00:30:17,110
like this to using a window that looked

662
00:30:14,919 --> 00:30:21,340
like this right so it used to be that

663
00:30:17,109 --> 00:30:27,009
it's now that and so what must be true

664
00:30:21,339 --> 00:30:28,990
in order for this to be to not see a

665
00:30:27,009 --> 00:30:30,548
lighting discontinuity like a change in

666
00:30:28,990 --> 00:30:31,900
lighting that's perceivable as a pop by

667
00:30:30,548 --> 00:30:34,089
the player every time they move across

668
00:30:31,900 --> 00:30:37,780
that boundary or any time a monster

669
00:30:34,089 --> 00:30:40,689
moves across that boundary right if you

670
00:30:37,779 --> 00:30:42,308
look at what will happen here we're

671
00:30:40,690 --> 00:30:44,380
gonna be blending these together so that

672
00:30:42,308 --> 00:30:48,609
means there are weights right there's a

673
00:30:44,380 --> 00:30:51,340
W 0 W 1 W 2 W 3 right there are weights

674
00:30:48,609 --> 00:30:53,889
multiplying these lighting contributions

675
00:30:51,339 --> 00:30:57,459
what that means is by the time I get to

676
00:30:53,890 --> 00:31:02,860
this barrier here these have better go

677
00:30:57,460 --> 00:31:07,110
to 0 if I just pretend that the

678
00:31:02,859 --> 00:31:10,538
contribution of this lighting source is

679
00:31:07,109 --> 00:31:11,889
sort of effectively you know or if I

680
00:31:10,538 --> 00:31:12,908
just assume it's like right there or

681
00:31:11,890 --> 00:31:13,929
whatever I want to see what's like a

682
00:31:12,909 --> 00:31:16,390
diamond or something I don't know

683
00:31:13,929 --> 00:31:18,788
whatever I want to assume if I want to

684
00:31:16,390 --> 00:31:24,640
assume that it goes to 0 as I hit this

685
00:31:18,788 --> 00:31:26,048
boundary these two this and this if I

686
00:31:24,640 --> 00:31:28,299
want to assume it goes to 0 as I hit

687
00:31:26,048 --> 00:31:30,490
this boundary that effectively treats

688
00:31:28,298 --> 00:31:32,529
its contribution as if it were in the

689
00:31:30,490 --> 00:31:34,210
center now that doesn't mean that we

690
00:31:32,529 --> 00:31:35,769
have to use our computation of how the

691
00:31:34,210 --> 00:31:38,110
lighting gets placed on the entity

692
00:31:35,769 --> 00:31:41,319
doesn't necessarily have to use that

693
00:31:38,109 --> 00:31:44,168
position but it does have to use those

694
00:31:41,319 --> 00:31:46,899
weights because as you move closer to

695
00:31:44,169 --> 00:31:48,880
this cell you must get rid of your

696
00:31:46,900 --> 00:31:54,330
contribution from here or you'll see the

697
00:31:48,880 --> 00:31:57,659
pop right so

698
00:31:54,329 --> 00:32:00,449
same with these all in this line when I

699
00:31:57,659 --> 00:32:03,749
first crossover the weights on this and

700
00:32:00,450 --> 00:32:06,209
this those had better be none right

701
00:32:03,749 --> 00:32:09,358
because I can't suddenly get a

702
00:32:06,209 --> 00:32:14,899
contribution of that lighting so all I'm

703
00:32:09,358 --> 00:32:17,908
trying to say is that there's a a

704
00:32:14,898 --> 00:32:19,288
trilinear blend by linear in the case of

705
00:32:17,909 --> 00:32:23,489
the 2d example but trilinear when it's

706
00:32:19,288 --> 00:32:26,098
actually a voxel that has to control the

707
00:32:23,489 --> 00:32:31,078
light probe contribution for any voxel

708
00:32:26,098 --> 00:32:34,229
cell what that means is that when a

709
00:32:31,078 --> 00:32:38,338
light probe itself is on the move so if

710
00:32:34,229 --> 00:32:43,639
I was to move a light probe around then

711
00:32:38,338 --> 00:32:47,848
we effectively have we have this issue

712
00:32:43,638 --> 00:32:49,888
where as it crosses the boundary we

713
00:32:47,848 --> 00:32:53,218
would produce a discontinuous lighting

714
00:32:49,888 --> 00:32:57,498
change because when I think anyway when

715
00:32:53,219 --> 00:33:01,619
it's here and it crosses over into here

716
00:32:57,499 --> 00:33:04,499
that change in which cell it's in will

717
00:33:01,618 --> 00:33:07,978
change which contributions it gets which

718
00:33:04,499 --> 00:33:10,739
will which would have to itself have

719
00:33:07,979 --> 00:33:13,078
been done smoothly right so that would

720
00:33:10,739 --> 00:33:15,719
mean that when we are actually talking

721
00:33:13,078 --> 00:33:17,940
about these particular like these actual

722
00:33:15,719 --> 00:33:19,739
lights as they move through the voxel

723
00:33:17,940 --> 00:33:21,929
boundary we would have a problem and we

724
00:33:19,739 --> 00:33:25,048
would have to effectively be smearing

725
00:33:21,929 --> 00:33:28,709
them out so that they their position

726
00:33:25,048 --> 00:33:30,778
also was getting blended and that just

727
00:33:28,709 --> 00:33:34,139
again starts to get just a little too

728
00:33:30,778 --> 00:33:37,098
complicated right so what I'm wondering

729
00:33:34,138 --> 00:33:37,098
is

730
00:33:43,569 --> 00:33:48,278
I'm wondering if that just means that

731
00:33:46,148 --> 00:33:49,388
you know for our purposes the simplest

732
00:33:48,278 --> 00:33:51,368
thing to do is just say light probes

733
00:33:49,388 --> 00:33:54,638
don't move they're fixed in the world

734
00:33:51,368 --> 00:33:56,488
and you just use them as if they were at

735
00:33:54,638 --> 00:34:04,778
the center of the voxels that you're in

736
00:33:56,489 --> 00:34:14,889
in terms of blending and off you go it's

737
00:34:04,778 --> 00:34:16,539
a solution it has some drawbacks but

738
00:34:14,889 --> 00:34:24,250
compared to the other options I'm not

739
00:34:16,539 --> 00:34:26,230
sure I'm really not sure how to I'm

740
00:34:24,250 --> 00:34:29,079
really not sure how to do anything else

741
00:34:26,230 --> 00:34:30,668
because if you think about how we want a

742
00:34:29,079 --> 00:34:33,720
structure our lighting at the lower

743
00:34:30,668 --> 00:34:36,219
level we definitely want a fixed

744
00:34:33,719 --> 00:34:37,928
algorithm for sampling I think I don't

745
00:34:36,219 --> 00:34:39,969
think we want to go down the route of

746
00:34:37,929 --> 00:34:48,159
having our pixel shaders doing

747
00:34:39,969 --> 00:34:50,019
ridiculous crap like you know like going

748
00:34:48,159 --> 00:34:51,789
and looking up into spatial hierarchies

749
00:34:50,019 --> 00:34:53,619
and stuff like this I just don't think

750
00:34:51,789 --> 00:34:56,259
we want to go that route we want

751
00:34:53,619 --> 00:34:58,480
something where we know we do a fixed

752
00:34:56,260 --> 00:35:01,299
set of operations that produce a fixed

753
00:34:58,480 --> 00:35:04,838
set of lights that we then use right a

754
00:35:01,298 --> 00:35:10,539
nice clean like fetch and things do and

755
00:35:04,838 --> 00:35:12,548
ops done right and so that just puts you

756
00:35:10,539 --> 00:35:13,929
into voxel territory there's not much

757
00:35:12,548 --> 00:35:16,088
you can do about it and once you're in

758
00:35:13,929 --> 00:35:18,759
voxel territory I think you're kind of

759
00:35:16,088 --> 00:35:21,159
stuck with having things make their

760
00:35:18,760 --> 00:35:25,240
contributions based on their arrangement

761
00:35:21,159 --> 00:35:27,639
in the voxels which means we kind of

762
00:35:25,239 --> 00:35:29,649
just want to place lights light probes

763
00:35:27,639 --> 00:35:32,949
at the Centers of voxels and be done

764
00:35:29,650 --> 00:35:34,630
with it I think that's fine though cuz

765
00:35:32,949 --> 00:35:38,379
again what we're trying to do here is

766
00:35:34,630 --> 00:35:41,019
have a nice soft ambient lighting to the

767
00:35:38,380 --> 00:35:43,298
world right we're not we're not doing

768
00:35:41,019 --> 00:35:46,798
hard shadows we're not doing any kind of

769
00:35:43,298 --> 00:35:49,269
like harsh it's supposed to be soft warm

770
00:35:46,798 --> 00:35:52,059
like a pleasant glow to it it's

771
00:35:49,269 --> 00:35:57,280
Christmas time you know and Krampus is

772
00:35:52,059 --> 00:35:58,900
out so that's I think okay

773
00:35:57,280 --> 00:36:03,430
and so I think what we would want to do

774
00:35:58,900 --> 00:36:08,559
is say the voxel is like fixed in world

775
00:36:03,429 --> 00:36:11,949
space in terms of its alignment and we

776
00:36:08,559 --> 00:36:18,279
will just take our light probes and

777
00:36:11,949 --> 00:36:22,179
consider them to be inside at the center

778
00:36:18,280 --> 00:36:22,780
of those voxels I think that will be

779
00:36:22,179 --> 00:36:30,869
okay

780
00:36:22,780 --> 00:36:30,870
I think and what we can probably do is

781
00:36:36,659 --> 00:36:42,849
we can probably make it so that we also

782
00:36:40,119 --> 00:36:45,940
because we know we're placing those

783
00:36:42,849 --> 00:36:49,750
light probes we can probably also do

784
00:36:45,940 --> 00:36:54,070
some work with making sure that every

785
00:36:49,750 --> 00:36:57,460
nothing is too wonky there I think this

786
00:36:54,070 --> 00:37:04,840
will work out so I'm gonna I'm gonna I'm

787
00:36:57,460 --> 00:37:06,909
gonna give that a try it's a lot it's a

788
00:37:04,840 --> 00:37:14,980
lot better I think than what I was gonna

789
00:37:06,909 --> 00:37:16,690
do there I think that's the right answer

790
00:37:14,980 --> 00:37:19,269
I think that's the right answer

791
00:37:16,690 --> 00:37:21,309
um so I'm gonna go ahead and move

792
00:37:19,269 --> 00:37:24,009
forward with this and I'm gonna just do

793
00:37:21,309 --> 00:37:27,730
a simple I'm gonna make it even yes more

794
00:37:24,010 --> 00:37:30,450
straightforward then then we were gonna

795
00:37:27,730 --> 00:37:33,519
originally I'm gonna make it pretty

796
00:37:30,449 --> 00:37:35,079
pretty simplistic actually which is nice

797
00:37:33,519 --> 00:37:36,880
because the simpler the better was

798
00:37:35,079 --> 00:37:40,210
something like this that has to run at

799
00:37:36,880 --> 00:37:43,570
runtime it's not an offline light

800
00:37:40,210 --> 00:37:45,610
process so anyway in our hand probe

801
00:37:43,570 --> 00:37:47,260
spatial index I still want to retain

802
00:37:45,610 --> 00:37:51,400
this part because we still may want to

803
00:37:47,260 --> 00:37:53,860
flood fill regions for lighting it so

804
00:37:51,400 --> 00:37:55,809
that places that don't have actual light

805
00:37:53,860 --> 00:37:57,820
plug facing them can just use nearby

806
00:37:55,809 --> 00:38:00,400
lighting and still work I think that's

807
00:37:57,820 --> 00:38:03,519
good so we want to maintain the flood

808
00:38:00,400 --> 00:38:06,039
fill but we're just gonna say look

809
00:38:03,519 --> 00:38:07,570
there's just one light index per voxel

810
00:38:06,039 --> 00:38:08,619
that's all we're gonna do we're just

811
00:38:07,570 --> 00:38:10,298
gonna go from there

812
00:38:08,619 --> 00:38:12,038
so when we

813
00:38:10,298 --> 00:38:15,068
need to actually place something in the

814
00:38:12,039 --> 00:38:18,489
light into the system we would say here

815
00:38:15,068 --> 00:38:21,938
you can see us asking for the existing

816
00:38:18,489 --> 00:38:25,989
index getting that light probe out and

817
00:38:21,938 --> 00:38:28,088
if we get a light probe out well

818
00:38:25,989 --> 00:38:30,420
actually in this case we have to you

819
00:38:28,088 --> 00:38:32,858
look at what happens with get probe here

820
00:38:30,420 --> 00:38:35,229
there has to be something there because

821
00:38:32,858 --> 00:38:38,558
existing index would have been zero if

822
00:38:35,228 --> 00:38:39,848
there wasn't so actually this well you

823
00:38:38,559 --> 00:38:41,949
know I probably wrote that because I was

824
00:38:39,849 --> 00:38:43,900
going to do this maybe so what we want

825
00:38:41,949 --> 00:38:50,380
to do here is say look if the centroid

826
00:38:43,900 --> 00:38:51,608
of the voxel if it's closer to us than

827
00:38:50,380 --> 00:38:53,858
it is to the probe that's already in

828
00:38:51,608 --> 00:38:56,318
there we'll fill it if it's not we won't

829
00:38:53,858 --> 00:39:00,400
right so we're pretty much gonna want to

830
00:38:56,318 --> 00:39:06,038
do like distance to us and distance to

831
00:39:00,400 --> 00:39:08,410
existing like that and then what we want

832
00:39:06,039 --> 00:39:11,199
to do is compare those and in this case

833
00:39:08,409 --> 00:39:13,268
because it's a comparison we don't need

834
00:39:11,199 --> 00:39:15,579
to do a square root here because the

835
00:39:13,268 --> 00:39:17,528
squared version which we'll get when we

836
00:39:15,579 --> 00:39:19,809
do the distance squared which again

837
00:39:17,528 --> 00:39:21,458
would you know avoids use of square root

838
00:39:19,809 --> 00:39:23,109
for no reason it's just extra ops we

839
00:39:21,458 --> 00:39:25,568
don't need we can just compare the

840
00:39:23,108 --> 00:39:27,159
squares if the squares compare one way

841
00:39:25,568 --> 00:39:28,538
the square roots will compare the same

842
00:39:27,159 --> 00:39:33,248
way because we know they can't be

843
00:39:28,539 --> 00:39:36,278
negative all right so in this case we

844
00:39:33,248 --> 00:39:39,308
can say look if the distance to the

845
00:39:36,278 --> 00:39:43,028
existing is greater than the distance to

846
00:39:39,309 --> 00:39:46,239
us then we will then we will replace

847
00:39:43,028 --> 00:39:48,608
what's in there with us otherwise what's

848
00:39:46,239 --> 00:39:50,228
there stays so all we really need to do

849
00:39:48,608 --> 00:39:53,949
now is figure out how to actually

850
00:39:50,228 --> 00:39:55,958
compute these two and obviously a light

851
00:39:53,949 --> 00:39:57,729
probe in this case which we haven't

852
00:39:55,958 --> 00:40:01,208
actually stored in any particular way

853
00:39:57,728 --> 00:40:03,759
you can see we don't have them yet but a

854
00:40:01,208 --> 00:40:06,338
light probe once we make it should have

855
00:40:03,759 --> 00:40:10,389
this information meaning a light probe

856
00:40:06,338 --> 00:40:13,298
should obviously have in it a p-value

857
00:40:10,389 --> 00:40:15,400
that says where the light verb was right

858
00:40:13,298 --> 00:40:17,199
and then it's got some other stuff and

859
00:40:15,400 --> 00:40:19,329
we don't really know what that stuff is

860
00:40:17,199 --> 00:40:22,509
yet but it's got some other things

861
00:40:19,329 --> 00:40:24,130
probably like a color value right and

862
00:40:22,509 --> 00:40:27,190
that color value would be four

863
00:40:24,130 --> 00:40:28,720
maybe the six faces of a cube because we

864
00:40:27,190 --> 00:40:30,429
assume it's gonna have like a you know

865
00:40:28,719 --> 00:40:32,859
some kind of lighting if you wanted to

866
00:40:30,429 --> 00:40:34,480
go kind of down a more theoretical paths

867
00:40:32,860 --> 00:40:38,110
you could consider using some of the

868
00:40:34,480 --> 00:40:39,789
other ways of storing lighting

869
00:40:38,110 --> 00:40:42,550
information there's spherical harmonics

870
00:40:39,789 --> 00:40:45,250
and things like this we're probably not

871
00:40:42,550 --> 00:40:46,990
going to go down that road route because

872
00:40:45,250 --> 00:40:49,059
I haven't played much with those kind of

873
00:40:46,989 --> 00:40:51,699
lighting representations and I'm not

874
00:40:49,059 --> 00:40:54,159
sure how good they really are and so

875
00:40:51,699 --> 00:40:55,210
before I would start teaching some of

876
00:40:54,159 --> 00:40:57,309
those I would want to experiment them a

877
00:40:55,210 --> 00:40:58,869
little bit myself and decide on the math

878
00:40:57,309 --> 00:41:00,039
whether I think they're worth it or

879
00:40:58,869 --> 00:41:02,469
whether I think they're just kind of one

880
00:41:00,039 --> 00:41:03,969
of those fools errands so we're not

881
00:41:02,469 --> 00:41:05,649
going to do that but we'll do some kind

882
00:41:03,969 --> 00:41:10,269
of encoding of a directional light here

883
00:41:05,650 --> 00:41:14,950
and so maybe we'll say we've got you

884
00:41:10,269 --> 00:41:16,300
know a cube mappy style lookup so you

885
00:41:14,949 --> 00:41:18,369
know maybe we've got something that

886
00:41:16,300 --> 00:41:21,730
looks kind of like that which is we we

887
00:41:18,369 --> 00:41:23,799
have six directional colors in there and

888
00:41:21,730 --> 00:41:25,630
those are the light contributions that

889
00:41:23,800 --> 00:41:30,060
we have from each of our six directions

890
00:41:25,630 --> 00:41:32,470
and that would be our light probe right

891
00:41:30,059 --> 00:41:34,000
so it's a pretty straightforward system

892
00:41:32,469 --> 00:41:36,669
it's basically just seven three threes

893
00:41:34,000 --> 00:41:38,469
and that's all there is it's a little on

894
00:41:36,670 --> 00:41:40,960
a line II it would be nice if they're at

895
00:41:38,469 --> 00:41:47,079
eight VIII's but I'm not sure what the

896
00:41:40,960 --> 00:41:49,240
last one would be I mean one thing we

897
00:41:47,079 --> 00:41:52,179
could do is keep track of the exact

898
00:41:49,239 --> 00:41:53,619
light direction but I don't know that we

899
00:41:52,179 --> 00:41:54,969
really want to complicate things that

900
00:41:53,619 --> 00:41:57,480
way it doesn't seem like it makes much

901
00:41:54,969 --> 00:41:57,480
sense to do so

902
00:42:03,300 --> 00:42:09,280
yeah I can't think of any real reason to

903
00:42:05,829 --> 00:42:10,510
do that so I think we would just yeah we

904
00:42:09,280 --> 00:42:12,670
would probably just do something like

905
00:42:10,510 --> 00:42:14,079
that I don't know you know there's other

906
00:42:12,670 --> 00:42:16,329
ways we could approach it but again it's

907
00:42:14,079 --> 00:42:19,990
a little unaligned but it's okay

908
00:42:16,329 --> 00:42:22,030
right so there's our light probe if we

909
00:42:19,989 --> 00:42:23,858
got one of those out like in this case

910
00:42:22,030 --> 00:42:26,290
here then it should be fairly

911
00:42:23,858 --> 00:42:29,949
straightforward to go from there at the

912
00:42:26,289 --> 00:42:33,460
outset of this we can get the one that

913
00:42:29,949 --> 00:42:34,989
we're talking about here so this is this

914
00:42:33,460 --> 00:42:40,720
probe and maybe I'll call that distance

915
00:42:34,989 --> 00:42:43,149
to this if I would just do the exact

916
00:42:40,719 --> 00:42:46,569
same call for the one that we got out of

917
00:42:43,150 --> 00:42:49,059
the system itself out of the spatial

918
00:42:46,570 --> 00:42:52,780
index if I just do that real quickly and

919
00:42:49,059 --> 00:42:56,920
get the probe that we're asked to use

920
00:42:52,780 --> 00:42:59,170
here then what I can do is this equation

921
00:42:56,920 --> 00:43:01,990
would be the same so I would just say

922
00:42:59,170 --> 00:43:04,769
well okay I know this business of this

923
00:43:01,989 --> 00:43:09,729
probe is this probe maybe this is

924
00:43:04,769 --> 00:43:13,088
existing probe so in both cases I know

925
00:43:09,730 --> 00:43:18,789
the location so all I need to do is just

926
00:43:13,088 --> 00:43:22,539
take the length squared of the vector

927
00:43:18,789 --> 00:43:24,940
between the place I want to measure for

928
00:43:22,539 --> 00:43:27,670
closest myth for closeness and the

929
00:43:24,940 --> 00:43:29,769
position of the probes that closest

930
00:43:27,670 --> 00:43:32,019
position is the centroid right so this

931
00:43:29,769 --> 00:43:36,699
is the voxel or I should say the cell

932
00:43:32,019 --> 00:43:38,739
center right um and so when I'm in here

933
00:43:36,699 --> 00:43:44,489
I need to be able to come up with the

934
00:43:38,739 --> 00:43:48,759
cell center for a particular set of

935
00:43:44,489 --> 00:43:54,578
voxel coordinates right and so this

936
00:43:48,760 --> 00:43:59,349
right here this v3u is our cell

937
00:43:54,579 --> 00:44:01,210
coordinates right and so I want to be

938
00:43:59,349 --> 00:44:03,130
able to ask for this spatial index and

939
00:44:01,210 --> 00:44:08,170
these coordinates what's the cell center

940
00:44:03,130 --> 00:44:11,140
right when that comes back then I can go

941
00:44:08,170 --> 00:44:13,180
ahead and with my get corner light index

942
00:44:11,139 --> 00:44:15,519
here I can pass the same coordinates

943
00:44:13,179 --> 00:44:19,809
down and then I can

944
00:44:15,519 --> 00:44:21,280
just finish up the work here by you know

945
00:44:19,809 --> 00:44:24,159
taking the links squared with that

946
00:44:21,280 --> 00:44:27,610
Center so this would fill out the

947
00:44:24,159 --> 00:44:31,089
spatial index with exactly what I wanted

948
00:44:27,610 --> 00:44:34,750
which is great and then when we actually

949
00:44:31,090 --> 00:44:38,700
it comes to lighting time what I want to

950
00:44:34,750 --> 00:44:38,699
do here is say something like you know

951
00:44:38,849 --> 00:44:45,759
get lighting for or something like this

952
00:44:41,289 --> 00:44:49,599
and when we pass in the spatial index

953
00:44:45,760 --> 00:44:57,369
and presumably we would do two versions

954
00:44:49,599 --> 00:45:00,000
of this maybe something like that we're

955
00:44:57,369 --> 00:45:02,650
gonna have like a cell position and then

956
00:45:00,000 --> 00:45:05,559
world position and these get sort of

957
00:45:02,650 --> 00:45:10,150
translated right so in here we would

958
00:45:05,559 --> 00:45:18,759
want some way of saying map well we have

959
00:45:10,150 --> 00:45:21,400
it right here map into grid and then we

960
00:45:18,760 --> 00:45:23,770
can just sort of thunk through so we can

961
00:45:21,400 --> 00:45:25,690
call it with a real position and if we

962
00:45:23,769 --> 00:45:37,630
do what we'll do is convert it to a grid

963
00:45:25,690 --> 00:45:40,389
position and then call this and then

964
00:45:37,630 --> 00:45:43,358
when we do this operation what we need

965
00:45:40,389 --> 00:45:49,029
to do is from the cell position we need

966
00:45:43,358 --> 00:45:52,809
to be able to get effectively each of

967
00:45:49,030 --> 00:45:54,609
the eight surrounding probe values and

968
00:45:52,809 --> 00:46:00,900
we are going to blend between those

969
00:45:54,608 --> 00:46:00,900
right so what we want is eight probes

970
00:46:07,199 --> 00:46:14,679
and when I said eight of course I mean

971
00:46:11,019 --> 00:46:17,230
zero through seven right so I need to

972
00:46:14,679 --> 00:46:25,750
get eight probes and then I need to

973
00:46:17,230 --> 00:46:30,579
blend their results together and I guess

974
00:46:25,750 --> 00:46:33,309
I'm not sure what the most efficient way

975
00:46:30,579 --> 00:46:35,410
to do that would be but I think the

976
00:46:33,309 --> 00:46:38,410
answer is that you actually just want to

977
00:46:35,409 --> 00:46:40,328
produce the blended probe because that's

978
00:46:38,409 --> 00:46:43,449
probably less work than doing the

979
00:46:40,329 --> 00:46:54,970
lighting for each probe and then

980
00:46:43,449 --> 00:46:56,710
blending the result I would think but I

981
00:46:54,969 --> 00:46:58,239
don't know it's hard to say right

982
00:46:56,710 --> 00:47:00,309
because there's two ways we could do

983
00:46:58,239 --> 00:47:03,399
this one is that you like with all eight

984
00:47:00,309 --> 00:47:09,670
probes and then you blend the results

985
00:47:03,400 --> 00:47:11,950
the other is you blend the probes and

986
00:47:09,670 --> 00:47:14,619
then light with just one with just that

987
00:47:11,949 --> 00:47:22,358
composite result

988
00:47:14,619 --> 00:47:22,358
[Music]

989
00:47:35,630 --> 00:47:38,849
I'll be honest I really don't know if I

990
00:47:37,829 --> 00:47:40,259
can tell the difference when those two

991
00:47:38,849 --> 00:47:42,298
we may have to analyze that a little bit

992
00:47:40,259 --> 00:47:46,858
carefully but but just you know trying

993
00:47:42,298 --> 00:47:48,268
to blind guess I'm not sure it would

994
00:47:46,858 --> 00:47:49,708
depend a lot on what the lighting

995
00:47:48,268 --> 00:47:54,838
equation we were going to compute

996
00:47:49,708 --> 00:47:57,419
actually was in this case at this is

997
00:47:54,838 --> 00:48:00,449
during light propagation time this would

998
00:47:57,420 --> 00:48:04,380
be called and during light propagation

999
00:48:00,449 --> 00:48:06,718
time as you might expect light

1000
00:48:04,380 --> 00:48:08,729
propagation time is strictly propagating

1001
00:48:06,719 --> 00:48:11,548
like a diffuse lighting effectively and

1002
00:48:08,728 --> 00:48:13,108
so we wouldn't really be computing much

1003
00:48:11,548 --> 00:48:15,059
of a lighting equation it would just be

1004
00:48:13,108 --> 00:48:19,288
a cosine fall-off kind of a thing

1005
00:48:15,059 --> 00:48:22,829
probably not really much else and so

1006
00:48:19,289 --> 00:48:26,489
it's possible that would just be quicker

1007
00:48:22,829 --> 00:48:28,259
to do the light computation on each

1008
00:48:26,489 --> 00:48:34,099
probe first and then blend the results

1009
00:48:28,259 --> 00:48:34,099
it's possible I'm not really sure

1010
00:48:35,568 --> 00:48:41,969
however what I will say is that it

1011
00:48:38,458 --> 00:48:44,278
brings up something that we need to be

1012
00:48:41,969 --> 00:48:47,670
able to do here that we're not doing as

1013
00:48:44,278 --> 00:48:48,690
well which is this needs to have a UVW

1014
00:48:47,670 --> 00:48:50,849
come back

1015
00:48:48,690 --> 00:48:53,309
that is the lerp values that we would

1016
00:48:50,849 --> 00:48:58,109
get to blend these things together

1017
00:48:53,309 --> 00:49:00,690
because as you might imagine in order to

1018
00:48:58,108 --> 00:49:03,838
blend between them we would need to know

1019
00:49:00,690 --> 00:49:06,358
not just the coordinates of the

1020
00:49:03,838 --> 00:49:09,179
particular cell in the voxel but where

1021
00:49:06,358 --> 00:49:12,028
you were inside that cell normalized out

1022
00:49:09,179 --> 00:49:14,598
so the UVW would need to come in here as

1023
00:49:12,028 --> 00:49:18,509
well so during this map into grid here

1024
00:49:14,599 --> 00:49:23,999
we would need to also get that residual

1025
00:49:18,509 --> 00:49:25,619
value and so this here would need to be

1026
00:49:23,998 --> 00:49:28,768
computed and it probably wants to be

1027
00:49:25,619 --> 00:49:31,199
computed as part of this right so I'm

1028
00:49:28,768 --> 00:49:37,228
guessing that it would be something sort

1029
00:49:31,199 --> 00:49:38,548
of this map in the grid would probably

1030
00:49:37,228 --> 00:49:41,038
be something we'll have to write out

1031
00:49:38,548 --> 00:49:43,528
that returns both of them but we'll see

1032
00:49:41,039 --> 00:49:45,390
what happens in a second so when we do

1033
00:49:43,528 --> 00:49:47,369
get probe lighting for Europe this is

1034
00:49:45,389 --> 00:49:49,049
what we're gonna want when we want to

1035
00:49:47,369 --> 00:49:51,420
get our lighting probes out not

1036
00:49:49,050 --> 00:49:59,610
particularly hard to do I think we just

1037
00:49:51,420 --> 00:50:01,619
say get probe buy or get probe from cell

1038
00:49:59,610 --> 00:50:11,130
or something like that and we just say

1039
00:50:01,619 --> 00:50:12,420
like cell P right and for some reason

1040
00:50:11,130 --> 00:50:26,160
the lighting solution is not getting

1041
00:50:12,420 --> 00:50:28,139
past year but it needs to be go so in

1042
00:50:26,159 --> 00:50:37,009
order to look up the probes here we need

1043
00:50:28,139 --> 00:50:37,009
to get this multiple times right oops so

1044
00:50:40,639 --> 00:50:48,000
what we're gonna do here is walk always

1045
00:50:44,250 --> 00:50:49,800
we can right so I mean I could write it

1046
00:50:48,000 --> 00:50:52,110
out completely longhand here to just say

1047
00:50:49,800 --> 00:50:54,360
like this is the the one we don't offset

1048
00:50:52,110 --> 00:50:59,900
it at all here is the one where we just

1049
00:50:54,360 --> 00:51:08,000
offset one here's another here's another

1050
00:50:59,900 --> 00:51:08,000
here's another oops I forgot

1051
00:51:12,960 --> 00:51:21,329
and so these are all of our different

1052
00:51:16,340 --> 00:51:22,559
possible light positions right positions

1053
00:51:21,329 --> 00:51:24,750
in the voxel each of the different

1054
00:51:22,559 --> 00:51:27,480
vertices of the cube right so I've got

1055
00:51:24,750 --> 00:51:29,130
them all here and so then if I want to

1056
00:51:27,480 --> 00:51:31,380
blend them together like I said I'm not

1057
00:51:29,130 --> 00:51:35,460
really sure which way we want to do this

1058
00:51:31,380 --> 00:51:38,900
but you can imagine something where I

1059
00:51:35,460 --> 00:51:38,900
would say like okay

1060
00:51:39,949 --> 00:51:43,759
let's just blend the probes together

1061
00:51:42,539 --> 00:51:54,059
first

1062
00:51:43,760 --> 00:51:57,060
maybe so here's our composite probe and

1063
00:51:54,059 --> 00:52:00,449
what I want to do is for each color

1064
00:51:57,059 --> 00:52:04,110
right all six of the faces of that cube

1065
00:52:00,449 --> 00:52:09,480
I want to blend all six together using

1066
00:52:04,110 --> 00:52:12,420
this uvw as the determiner so what I

1067
00:52:09,480 --> 00:52:14,490
want to do is like I want to like do a

1068
00:52:12,420 --> 00:52:18,090
thing where we some light probes in here

1069
00:52:14,489 --> 00:52:20,459
so like an accumulate or like accumulate

1070
00:52:18,090 --> 00:52:23,280
probe something like that

1071
00:52:20,460 --> 00:52:25,650
so I'd say all right this is the probe

1072
00:52:23,280 --> 00:52:33,350
we're accumulating into I want to

1073
00:52:25,650 --> 00:52:33,349
accumulate p0 in there I and I want to

1074
00:52:36,320 --> 00:52:46,230
have some way of talking about the

1075
00:52:43,019 --> 00:52:50,099
weights that I want to use to summit

1076
00:52:46,230 --> 00:52:53,070
right and so the thing that we're going

1077
00:52:50,099 --> 00:52:59,610
to get here is we've got three weights

1078
00:52:53,070 --> 00:53:02,610
and each weight should affect each of

1079
00:52:59,610 --> 00:53:05,789
the corners differently so for example

1080
00:53:02,610 --> 00:53:10,140
if you look at the UV W X Y &amp; Z here

1081
00:53:05,789 --> 00:53:14,849
well as those go up I am moving away

1082
00:53:10,139 --> 00:53:18,750
from the minimum corner so because this

1083
00:53:14,849 --> 00:53:21,179
is 0 0 0 the weighting here is going to

1084
00:53:18,750 --> 00:53:24,539
be like this

1085
00:53:21,179 --> 00:53:25,960
if all three were 0 that's the maximum

1086
00:53:24,539 --> 00:53:28,300
right

1087
00:53:25,960 --> 00:53:29,980
I could have and by the way there's no

1088
00:53:28,300 --> 00:53:30,849
sense in passing all of these because we

1089
00:53:29,980 --> 00:53:34,000
know that it's just going to multiply

1090
00:53:30,849 --> 00:53:36,010
them together so that's what my actual

1091
00:53:34,000 --> 00:53:39,730
waiting is going to end up being right

1092
00:53:36,010 --> 00:53:42,670
as I move along any of those three axes

1093
00:53:39,730 --> 00:53:46,420
I fall off to zero as I get to the end

1094
00:53:42,670 --> 00:53:48,190
of that axis right so this is basically

1095
00:53:46,420 --> 00:53:49,780
what we're looking at and we just know

1096
00:53:48,190 --> 00:53:51,849
we're going to do a bunch of these right

1097
00:53:49,780 --> 00:53:54,970
I'm going to accumulate each of these in

1098
00:53:51,849 --> 00:53:58,269
here and as I accumulate each of these

1099
00:53:54,969 --> 00:54:02,019
in here I'm going to change based on

1100
00:53:58,269 --> 00:54:08,019
this right I'm going to change which one

1101
00:54:02,019 --> 00:54:12,280
of these which of the UVW are negated in

1102
00:54:08,019 --> 00:54:15,099
which aren't so in this case this is the

1103
00:54:12,280 --> 00:54:17,740
one that's on the far end of the x-axis

1104
00:54:15,099 --> 00:54:23,260
but that means that I don't want to

1105
00:54:17,739 --> 00:54:26,649
negate the UVW of X the the X component

1106
00:54:23,260 --> 00:54:28,750
right we come down to the next one and

1107
00:54:26,650 --> 00:54:31,059
the same is true of Y right so this

1108
00:54:28,750 --> 00:54:34,210
probe was on the maximum end of the y

1109
00:54:31,059 --> 00:54:36,159
axis so we want to stop getting that one

1110
00:54:34,210 --> 00:54:37,599
this one's on the maximum end of the z

1111
00:54:36,159 --> 00:54:40,809
axis so we want to stop negating that

1112
00:54:37,599 --> 00:54:51,400
one this one was on the maximum of both

1113
00:54:40,809 --> 00:54:54,029
the y and the z axis and then oh that's

1114
00:54:51,400 --> 00:54:54,030
the opposite

1115
00:54:57,599 --> 00:55:15,189
there we go uh and this one and then

1116
00:55:05,768 --> 00:55:17,978
finally this one all right now this last

1117
00:55:15,188 --> 00:55:26,259
one is out the maximum of all of them so

1118
00:55:17,978 --> 00:55:29,618
it doesn't get any of these okay so I

1119
00:55:26,259 --> 00:55:32,798
think that looks about right those match

1120
00:55:29,619 --> 00:55:39,838
up nicely this accumulates those into

1121
00:55:32,798 --> 00:55:39,838
our probe ends off we go right now

1122
00:55:46,088 --> 00:55:50,328
it's a little bit wasteful because

1123
00:55:48,380 --> 00:55:51,950
technically the first one you don't need

1124
00:55:50,329 --> 00:55:55,339
to accumulate you could just set it

1125
00:55:51,949 --> 00:55:57,469
directly it would save us the trouble of

1126
00:55:55,338 --> 00:55:58,998
setting this to zero but maybe we'll get

1127
00:55:57,469 --> 00:56:02,328
lucky in the optimizer will help us who

1128
00:55:58,998 --> 00:56:05,899
knows at the end of that of cumulation

1129
00:56:02,329 --> 00:56:10,700
we have a single light probe and we can

1130
00:56:05,900 --> 00:56:12,440
now actually get the probe lighting back

1131
00:56:10,699 --> 00:56:14,179
right we can figure out what the light

1132
00:56:12,440 --> 00:56:16,579
probe looks like that we actually need

1133
00:56:14,179 --> 00:56:18,739
to light against and what I'm gonna do

1134
00:56:16,579 --> 00:56:21,859
here is I'm gonna say maybe we actually

1135
00:56:18,739 --> 00:56:25,038
just we send back what the lighting

1136
00:56:21,858 --> 00:56:27,650
probe was that's just how we'll do it

1137
00:56:25,039 --> 00:56:29,839
right for right now hopefully this will

1138
00:56:27,650 --> 00:56:34,999
help we'll see so I think we're gonna do

1139
00:56:29,838 --> 00:56:37,969
it like this this allows us to get

1140
00:56:34,998 --> 00:56:40,818
whatever the composite light would be at

1141
00:56:37,969 --> 00:56:42,739
this location and so once we actually do

1142
00:56:40,818 --> 00:56:49,548
that accumulation we now know what that

1143
00:56:42,739 --> 00:56:51,498
light is and we can return it right and

1144
00:56:49,548 --> 00:56:52,759
so that's actually I'm gonna call that

1145
00:56:51,498 --> 00:57:02,748
result now because that's what that

1146
00:56:52,759 --> 00:57:06,650
actually is and then we're good to go

1147
00:57:02,748 --> 00:57:08,689
so once we have all that really this map

1148
00:57:06,650 --> 00:57:11,509
and a grid and part of things a bit of a

1149
00:57:08,690 --> 00:57:13,220
problem here so we're gonna need to

1150
00:57:11,509 --> 00:57:14,599
write that and we're gonna need to make

1151
00:57:13,219 --> 00:57:15,919
sure we can get our you VW's from it but

1152
00:57:14,599 --> 00:57:18,890
we're also going to need one other thing

1153
00:57:15,920 --> 00:57:20,269
here which is that once we have one of

1154
00:57:18,889 --> 00:57:24,409
these we need some way of computing the

1155
00:57:20,268 --> 00:57:27,588
actual lighting from you know like a

1156
00:57:24,409 --> 00:57:34,879
normal right so if you imagine now we

1157
00:57:27,588 --> 00:57:39,349
want to do like get light get incoming

1158
00:57:34,880 --> 00:57:45,108
light something like that if we have or

1159
00:57:39,349 --> 00:57:47,180
light with probe something like this

1160
00:57:45,108 --> 00:57:54,949
so we care if we say look give us a

1161
00:57:47,179 --> 00:57:57,368
probe and give us a zooming position in

1162
00:57:54,949 --> 00:57:57,368
a normal

1163
00:58:00,880 --> 00:58:04,789
we're supposed to be able to return the

1164
00:58:02,750 --> 00:58:06,349
light now we don't really need the

1165
00:58:04,789 --> 00:58:08,389
position anymore because once we have

1166
00:58:06,349 --> 00:58:10,940
the light probe we've already assumed

1167
00:58:08,389 --> 00:58:14,239
that the position of that we were taking

1168
00:58:10,940 --> 00:58:15,409
has been blended with the lighting has

1169
00:58:14,239 --> 00:58:17,000
been blended with the probes the

1170
00:58:15,409 --> 00:58:19,759
neighbor it to produce a single probe

1171
00:58:17,000 --> 00:58:23,480
that's accurate for that point and so

1172
00:58:19,760 --> 00:58:25,670
once we do that we don't really need to

1173
00:58:23,480 --> 00:58:28,429
take into account the position I don't

1174
00:58:25,670 --> 00:58:30,200
think anymore so we just need the normal

1175
00:58:28,429 --> 00:58:34,519
and what the normal is gonna do is tell

1176
00:58:30,199 --> 00:58:41,689
us all these six phases which ones are

1177
00:58:34,519 --> 00:58:45,259
going to be combined to to produce the

1178
00:58:41,690 --> 00:58:48,170
actual value of of the light right so

1179
00:58:45,260 --> 00:58:50,119
that's what we need to do here now the

1180
00:58:48,170 --> 00:58:54,079
normal itself kind of tells us the

1181
00:58:50,119 --> 00:58:56,090
answer in a way but not exactly what we

1182
00:58:54,079 --> 00:58:58,639
need to do now is have some kind of a

1183
00:58:56,090 --> 00:59:01,390
function that takes colors that are

1184
00:58:58,639 --> 00:59:04,099
sampled for particular directions and

1185
00:59:01,389 --> 00:59:08,989
produces a smooth blend between them

1186
00:59:04,099 --> 00:59:12,170
right and this is not as easy as it

1187
00:59:08,989 --> 00:59:16,519
maybe sounds because these are values

1188
00:59:12,170 --> 00:59:20,510
don't interpret Li kind of cleanly if

1189
00:59:16,519 --> 00:59:21,769
you will let me try to give you a little

1190
00:59:20,510 --> 00:59:25,150
bit of a perspective on what I mean by

1191
00:59:21,769 --> 00:59:25,150
that and that's a little bit confusing

1192
00:59:28,239 --> 00:59:32,649
never put our day marker here

1193
00:59:35,039 --> 00:59:40,199
so if you take a look at what's actually

1194
00:59:38,699 --> 00:59:43,688
happening here

1195
00:59:40,199 --> 00:59:46,239
let's just take a cross-section of what

1196
00:59:43,688 --> 00:59:47,798
happens with the normal and pretend we

1197
00:59:46,239 --> 00:59:49,630
have a few lighting values of the kind

1198
00:59:47,798 --> 00:59:51,458
of talking about and you can maybe see

1199
00:59:49,630 --> 00:59:53,579
what I mean by we have sort of an issue

1200
00:59:51,458 --> 00:59:53,578
here

1201
01:00:02,650 --> 01:00:09,200
so if I have a direction and what I'm

1202
01:00:07,159 --> 01:00:13,489
saying fundamentally with something like

1203
01:00:09,199 --> 01:00:15,349
a cube lighting map like this is I'm

1204
01:00:13,489 --> 01:00:17,029
storing like a color at each thing so

1205
01:00:15,349 --> 01:00:19,519
maybe there's a color off in this

1206
01:00:17,030 --> 01:00:21,260
direction so this is color Y right and

1207
01:00:19,519 --> 01:00:23,420
there's a color off in this direction so

1208
01:00:21,260 --> 01:00:26,270
this is color X and I want to know

1209
01:00:23,420 --> 01:00:27,950
what's the color incoming at N if I

1210
01:00:26,269 --> 01:00:30,949
assume that I want to smoothly blend

1211
01:00:27,949 --> 01:00:32,389
between these two incoming light values

1212
01:00:30,949 --> 01:00:33,949
and color is probably the wrong way to

1213
01:00:32,389 --> 01:00:36,500
say it it's a light value could be

1214
01:00:33,949 --> 01:00:38,649
whatever we want right but point being

1215
01:00:36,500 --> 01:00:42,349
whatever we're storing for our

1216
01:00:38,650 --> 01:00:44,300
irradiance here well I guess it's in

1217
01:00:42,349 --> 01:00:46,309
incoming light so I don't know what you

1218
01:00:44,300 --> 01:00:54,590
would measure that exactly in but let's

1219
01:00:46,309 --> 01:00:56,630
see see if I can use the right term yeah

1220
01:00:54,590 --> 01:00:59,210
so I think we want your radiance right

1221
01:00:56,630 --> 01:01:05,510
it's the if the radiant flux received by

1222
01:00:59,210 --> 01:01:06,380
a surface per unit area so even if we

1223
01:01:05,510 --> 01:01:08,869
were trying to make a physically

1224
01:01:06,380 --> 01:01:11,260
accurate thing and so we have like an

1225
01:01:08,869 --> 01:01:13,519
actual

1226
01:01:11,260 --> 01:01:16,940
physical light incoming value here or

1227
01:01:13,519 --> 01:01:18,619
here no matter what it is or how

1228
01:01:16,940 --> 01:01:21,139
accurate it is we still have the same

1229
01:01:18,619 --> 01:01:23,510
problem of we're only storing it at a

1230
01:01:21,139 --> 01:01:25,129
fixed set of sample points and we need

1231
01:01:23,510 --> 01:01:27,410
to produce a smooth blend between them

1232
01:01:25,130 --> 01:01:29,780
for our lighting so we need to know for

1233
01:01:27,409 --> 01:01:31,579
a particular normal what is the correct

1234
01:01:29,780 --> 01:01:33,740
contribution between this and this now

1235
01:01:31,579 --> 01:01:35,449
we know that the normal itself is

1236
01:01:33,739 --> 01:01:37,129
represented as n X&amp;Y

1237
01:01:35,449 --> 01:01:38,179
and of course there's an NZ but we're

1238
01:01:37,130 --> 01:01:41,420
not talking about that right now because

1239
01:01:38,179 --> 01:01:43,429
we're just doing the 2d slice before the

1240
01:01:41,420 --> 01:01:44,659
MX and Y it would be nice if we could

1241
01:01:43,429 --> 01:01:50,569
just do something like well how about

1242
01:01:44,659 --> 01:01:53,269
just NX x CX plus NY times CY right the

1243
01:01:50,570 --> 01:01:56,809
problem here is that the normal in this

1244
01:01:53,269 --> 01:01:59,119
case is you know as its name would imply

1245
01:01:56,809 --> 01:02:02,239
is normal

1246
01:01:59,119 --> 01:02:06,130
it's a normalized value what that means

1247
01:02:02,239 --> 01:02:06,129
is this is true

1248
01:02:10,739 --> 01:02:18,369
right this is the equation that tells

1249
01:02:15,550 --> 01:02:22,180
you something as a normal the vector

1250
01:02:18,369 --> 01:02:26,109
Euclidean length of that normal is equal

1251
01:02:22,179 --> 01:02:27,759
to one that's why it's normal right but

1252
01:02:26,110 --> 01:02:30,250
the problem is if you look at that

1253
01:02:27,760 --> 01:02:32,080
equation that's not the same equation

1254
01:02:30,250 --> 01:02:37,150
that we would want for blending for

1255
01:02:32,079 --> 01:02:44,349
blending right this is normal it is also

1256
01:02:37,150 --> 01:02:46,360
another way of saying to norm okay

1257
01:02:44,349 --> 01:02:50,500
now I don't know that we ever talked

1258
01:02:46,360 --> 01:02:52,990
about norms before but what norms are

1259
01:02:50,500 --> 01:02:55,420
are there's a set of ways you can talk

1260
01:02:52,989 --> 01:02:57,459
about normalized values this is just one

1261
01:02:55,420 --> 01:03:00,340
of them the Euclidean to norm in this

1262
01:02:57,460 --> 01:03:03,909
case is when you Square and then square

1263
01:03:00,340 --> 01:03:06,220
root right so square the components sum

1264
01:03:03,909 --> 01:03:10,149
them together square root them that's

1265
01:03:06,219 --> 01:03:13,059
the two norm but there is also a one

1266
01:03:10,150 --> 01:03:16,300
norm by the way there's also an infinity

1267
01:03:13,059 --> 01:03:18,820
norm I think I've mentioned these on

1268
01:03:16,300 --> 01:03:20,110
hand made here before that's when you

1269
01:03:18,820 --> 01:03:22,660
raise everything to the infinity and

1270
01:03:20,110 --> 01:03:24,190
then infinite root them and that just

1271
01:03:22,659 --> 01:03:26,500
has the effect of picking out the

1272
01:03:24,190 --> 01:03:31,119
maximum value right so this is just

1273
01:03:26,500 --> 01:03:33,699
what's the max right well the one norm

1274
01:03:31,119 --> 01:03:34,869
is exactly the same as the two norm is

1275
01:03:33,699 --> 01:03:37,000
exact the same as the infinity norm

1276
01:03:34,869 --> 01:03:40,539
you're just playing with the power so

1277
01:03:37,000 --> 01:03:42,639
the one norm is the non root I don't

1278
01:03:40,539 --> 01:03:46,150
know if that's a thing you can write but

1279
01:03:42,639 --> 01:03:51,159
of everything raised to just one power

1280
01:03:46,150 --> 01:03:57,220
right so it's effectively NX plus and y

1281
01:03:51,159 --> 01:03:58,539
equals one that's the one norm now why

1282
01:03:57,219 --> 01:04:00,009
did I bring any of this up am I just

1283
01:03:58,539 --> 01:04:02,920
going off on one of these tangents well

1284
01:04:00,010 --> 01:04:04,990
no we actually care the reason we care

1285
01:04:02,920 --> 01:04:07,690
about the one norm is the one norm is

1286
01:04:04,989 --> 01:04:12,369
the thing that produces a linear blend

1287
01:04:07,690 --> 01:04:14,760
right if the blend weights sum to 1 then

1288
01:04:12,369 --> 01:04:18,759
we have properly linearly blended our

1289
01:04:14,760 --> 01:04:21,970
values together if the square of the

1290
01:04:18,760 --> 01:04:26,349
values Square rooted sums to

1291
01:04:21,969 --> 01:04:37,328
well this is not the same write this

1292
01:04:26,349 --> 01:04:40,329
equation he is not true these are not

1293
01:04:37,329 --> 01:04:44,200
the same for any number of reasons even

1294
01:04:40,329 --> 01:04:46,960
just the most basic observation can show

1295
01:04:44,199 --> 01:04:48,818
you that if you had a negative here it

1296
01:04:46,960 --> 01:04:52,420
would have gotten erased immediately by

1297
01:04:48,818 --> 01:04:54,250
the square right so clearly these aren't

1298
01:04:52,420 --> 01:04:56,170
even the same even with respect to sign

1299
01:04:54,250 --> 01:04:58,119
but they're not gonna be the same with

1300
01:04:56,170 --> 01:05:00,930
respect to quantity either because

1301
01:04:58,119 --> 01:05:05,380
although a value squared Square rooted

1302
01:05:00,929 --> 01:05:07,659
will only lose its sign right but

1303
01:05:05,380 --> 01:05:10,838
otherwise the matter is the same once

1304
01:05:07,659 --> 01:05:13,920
you add two things together a plus a

1305
01:05:10,838 --> 01:05:18,068
squared plus B squared Square rooted is

1306
01:05:13,920 --> 01:05:20,559
not the same as a plus B right it

1307
01:05:18,068 --> 01:05:25,028
doesn't the the square root does not

1308
01:05:20,559 --> 01:05:29,609
distribute across terms like that across

1309
01:05:25,028 --> 01:05:33,099
across additive terms it's not mr. Davis

1310
01:05:29,608 --> 01:05:35,798
so because this is not true we can't

1311
01:05:33,099 --> 01:05:38,559
really use NX plus NY because the values

1312
01:05:35,798 --> 01:05:41,230
will be wrong we want them to look like

1313
01:05:38,559 --> 01:05:44,619
this but instead they will look like

1314
01:05:41,230 --> 01:05:46,838
that and we will end up over adding

1315
01:05:44,619 --> 01:05:48,400
we'll end up with brighter light than we

1316
01:05:46,838 --> 01:05:52,210
should have added when we're adding

1317
01:05:48,400 --> 01:05:55,180
those light values together right what

1318
01:05:52,210 --> 01:05:56,559
can we do what can we do are we just

1319
01:05:55,179 --> 01:06:00,068
screwed is that it is that the end of

1320
01:05:56,559 --> 01:06:02,349
the ball game well no fortunately if you

1321
01:06:00,068 --> 01:06:07,440
look at what has to happen here if I

1322
01:06:02,349 --> 01:06:10,900
want to enforce this equation right if

1323
01:06:07,440 --> 01:06:15,039
this is something that's true I want to

1324
01:06:10,900 --> 01:06:17,650
be true I want to be true well it's just

1325
01:06:15,039 --> 01:06:20,200
math right how would I make it true

1326
01:06:17,650 --> 01:06:22,088
well what I know right now is I want an

1327
01:06:20,199 --> 01:06:24,939
X like effectively what I'm saying is I

1328
01:06:22,088 --> 01:06:28,119
want like an N X prime plus an and Y

1329
01:06:24,940 --> 01:06:30,369
prime I want those to equal one right

1330
01:06:28,119 --> 01:06:33,099
but what I've got right now is I've got

1331
01:06:30,369 --> 01:06:36,160
an NX regular plus an NY regular that

1332
01:06:33,099 --> 01:06:40,719
equals some other thing right

1333
01:06:36,159 --> 01:06:42,068
and in fact whatever that other thing is

1334
01:06:40,719 --> 01:06:44,048
I don't really care

1335
01:06:42,068 --> 01:06:46,989
let's just say it equals some random

1336
01:06:44,048 --> 01:06:52,059
value it just a right who cares what it

1337
01:06:46,989 --> 01:06:57,119
is so if I know I have this right but I

1338
01:06:52,059 --> 01:07:01,089
want to have this how can i how can I

1339
01:06:57,119 --> 01:07:03,430
get somewhere with that right well it's

1340
01:07:01,088 --> 01:07:06,699
pretty easy to produce this equation out

1341
01:07:03,429 --> 01:07:09,129
of this equation actually right because

1342
01:07:06,699 --> 01:07:11,619
if you look at what's happening on this

1343
01:07:09,130 --> 01:07:15,369
side the only difference between these

1344
01:07:11,619 --> 01:07:20,108
two equations is the a right if I just

1345
01:07:15,369 --> 01:07:26,199
divide these by a right if I just divide

1346
01:07:20,108 --> 01:07:28,630
by a I actually get this equation here

1347
01:07:26,199 --> 01:07:30,938
right so I don't even have to really do

1348
01:07:28,630 --> 01:07:33,509
the math and solve for anything I can

1349
01:07:30,938 --> 01:07:39,308
just see that actually dividing by a

1350
01:07:33,509 --> 01:07:43,119
produces the correct result right so

1351
01:07:39,309 --> 01:07:45,548
since I have a normal right and I know

1352
01:07:43,119 --> 01:07:47,650
that I can add the values and I will

1353
01:07:45,548 --> 01:07:49,179
always get a nonzero answer right

1354
01:07:47,650 --> 01:07:52,979
because they can't be negative it's a

1355
01:07:49,179 --> 01:07:55,599
normal you know I'm saying I can just

1356
01:07:52,978 --> 01:08:04,118
absolute value them if I want to write I

1357
01:07:55,599 --> 01:08:06,400
can just say that if I want to um I can

1358
01:08:04,119 --> 01:08:08,559
just enforce them to be positive I know

1359
01:08:06,400 --> 01:08:10,749
they always have a reasonable magnitude

1360
01:08:08,559 --> 01:08:14,650
they can't both be 0 1 could be 0 if the

1361
01:08:10,748 --> 01:08:18,479
other can't right so when I add these

1362
01:08:14,650 --> 01:08:20,828
together I know and I shouldn't say this

1363
01:08:18,479 --> 01:08:22,750
when I add these together if I just

1364
01:08:20,828 --> 01:08:24,849
don't let them be net is there their

1365
01:08:22,750 --> 01:08:28,750
absolute value I would get a value that

1366
01:08:24,849 --> 01:08:32,319
if divided would give me valid sum to

1367
01:08:28,750 --> 01:08:34,809
one right that produces a clean linear

1368
01:08:32,319 --> 01:08:39,730
blend for me so if I want to I actually

1369
01:08:34,809 --> 01:08:42,880
can in here do something like alright

1370
01:08:39,729 --> 01:08:46,178
let's force this to be linear blendable

1371
01:08:42,880 --> 01:08:49,088
let's force us let's find a way to get a

1372
01:08:46,179 --> 01:08:50,588
UVW out of this end right

1373
01:08:49,088 --> 01:08:58,479
so what I can do there is say all right

1374
01:08:50,588 --> 01:09:00,519
step one is just to say let me produce

1375
01:08:58,479 --> 01:09:07,500
an absolute value for each of these and

1376
01:09:00,520 --> 01:09:07,500
I think we have yeah

1377
01:09:19,689 --> 01:09:25,789
so let's first take the absolute value

1378
01:09:22,279 --> 01:09:27,710
of each of these parameters right and

1379
01:09:25,789 --> 01:09:30,380
we'll talk a little bit about what we

1380
01:09:27,710 --> 01:09:32,390
need to do with the sign later because

1381
01:09:30,380 --> 01:09:35,509
we will actually use that sign we just

1382
01:09:32,390 --> 01:09:37,270
don't need it for blending right so we'd

1383
01:09:35,509 --> 01:09:40,039
want to produce the absolute value here

1384
01:09:37,270 --> 01:09:44,870
and then what we'd want to do is make

1385
01:09:40,039 --> 01:09:47,720
sure that our uvw is divided by so

1386
01:09:44,869 --> 01:09:51,528
basically some kind of like inverse norm

1387
01:09:47,720 --> 01:09:54,079
here we want to produce that inverse a

1388
01:09:51,529 --> 01:09:56,210
value so we want to produce one over a

1389
01:09:54,079 --> 01:10:03,079
here and what did I say a was well it's

1390
01:09:56,210 --> 01:10:06,800
just the sum of all the values right

1391
01:10:03,079 --> 01:10:08,989
it's the one norm so once we produce

1392
01:10:06,800 --> 01:10:11,750
that inversion for pretty much good to

1393
01:10:08,989 --> 01:10:13,729
go we've got the blend values we

1394
01:10:11,750 --> 01:10:15,350
actually want and so then the only

1395
01:10:13,729 --> 01:10:18,500
question is well what do we actually

1396
01:10:15,350 --> 01:10:23,770
blend together well obviously we need to

1397
01:10:18,500 --> 01:10:26,359
know with our light probe nope we go

1398
01:10:23,770 --> 01:10:27,970
with our light probe here obviously we

1399
01:10:26,359 --> 01:10:29,719
need to know which of these six

1400
01:10:27,970 --> 01:10:32,300
corresponds to the things that we're

1401
01:10:29,720 --> 01:10:35,449
going to blend together but as you can

1402
01:10:32,300 --> 01:10:37,489
imagine if we're sampling out of a cube

1403
01:10:35,449 --> 01:10:44,479
right so the idea here is that we've got

1404
01:10:37,489 --> 01:10:47,590
some cube right and each of the faces

1405
01:10:44,479 --> 01:10:50,179
has some lighting information on it

1406
01:10:47,590 --> 01:10:52,039
right then what we can effectively

1407
01:10:50,180 --> 01:11:01,850
imagine is almost like a star pattern

1408
01:10:52,039 --> 01:11:03,769
right here's my Z my y+ X right and I've

1409
01:11:01,850 --> 01:11:06,140
got a sample at each of those locations

1410
01:11:03,770 --> 01:11:09,980
so I've got a sample at negative and

1411
01:11:06,140 --> 01:11:11,450
positive right each one of those and so

1412
01:11:09,979 --> 01:11:15,259
what I want to do here is I want to

1413
01:11:11,449 --> 01:11:17,750
produce whatever the color colors are

1414
01:11:15,260 --> 01:11:20,989
the way should blend between I want to

1415
01:11:17,750 --> 01:11:23,750
first select a positive or negative

1416
01:11:20,989 --> 01:11:26,960
based on the sign of what the normal was

1417
01:11:23,750 --> 01:11:28,939
before I absolute valued it right so

1418
01:11:26,960 --> 01:11:30,710
that's why I was seeing this app survive

1419
01:11:28,939 --> 01:11:33,049
we're going to use a sign we're just not

1420
01:11:30,710 --> 01:11:35,449
using it yet so we want to know the sign

1421
01:11:33,050 --> 01:11:36,949
and we're gonna produce one value for

1422
01:11:35,449 --> 01:11:38,720
each of these but once we produce the

1423
01:11:36,949 --> 01:11:43,220
value then we're good to go from there

1424
01:11:38,720 --> 01:11:45,380
right so all we really need to do is say

1425
01:11:43,220 --> 01:11:46,760
alright we're gonna produce and you know

1426
01:11:45,380 --> 01:11:48,440
wherever the normal is let's say the

1427
01:11:46,760 --> 01:11:50,360
normals pointing out that direction or

1428
01:11:48,439 --> 01:11:52,639
something right we know we're just going

1429
01:11:50,359 --> 01:11:54,229
to collect okay it's pointing down like

1430
01:11:52,640 --> 01:11:56,090
negative Y so we're gonna grab the

1431
01:11:54,229 --> 01:11:57,679
negative Y one it's positive Z's we're

1432
01:11:56,090 --> 01:12:00,289
gonna grab the positive Z color and

1433
01:11:57,680 --> 01:12:03,500
negative x so we're gonna grab those

1434
01:12:00,289 --> 01:12:05,840
three colors and then we'll do our blend

1435
01:12:03,500 --> 01:12:08,779
with just three things using the uvw

1436
01:12:05,840 --> 01:12:12,199
that we actually have right so in here

1437
01:12:08,779 --> 01:12:16,279
we can just say all right let's do that

1438
01:12:12,199 --> 01:12:25,729
the result is just our u VW x times our

1439
01:12:16,279 --> 01:12:29,210
X color ru VW y times our Y color and

1440
01:12:25,729 --> 01:12:32,359
our UV wz x our Z color right and that's

1441
01:12:29,210 --> 01:12:34,340
the result and the key here is we just

1442
01:12:32,359 --> 01:12:36,079
need to pick these colors so our X color

1443
01:12:34,340 --> 01:12:38,779
is something our Y color is something

1444
01:12:36,079 --> 01:12:42,109
and our Z color is something and the

1445
01:12:38,779 --> 01:12:47,389
question is what is it right and so here

1446
01:12:42,109 --> 01:12:50,479
we have our color table I believe there

1447
01:12:47,390 --> 01:12:52,789
we go we are have already had a

1448
01:12:50,479 --> 01:12:54,019
convention and we should stick to it so

1449
01:12:52,789 --> 01:12:56,750
that everything in the game uses the

1450
01:12:54,020 --> 01:12:59,660
same convention you can see what they

1451
01:12:56,750 --> 01:13:05,149
were here it was like negative Y

1452
01:12:59,659 --> 01:13:09,529
positive Y positive X negative x for the

1453
01:13:05,149 --> 01:13:11,269
axes oh sorry this is the direction so

1454
01:13:09,529 --> 01:13:13,399
we watch they want to use this part of

1455
01:13:11,270 --> 01:13:16,160
it this is these are the axes you would

1456
01:13:13,399 --> 01:13:18,469
impose on there so this is X positive

1457
01:13:16,159 --> 01:13:21,859
that's alright X negative this is X

1458
01:13:18,470 --> 01:13:29,750
positive right and so in here we would

1459
01:13:21,859 --> 01:13:31,909
pick one of either color you know X

1460
01:13:29,750 --> 01:13:45,590
negative x positive so we kind of do

1461
01:13:31,909 --> 01:13:47,510
like if you know NX less than 0 and the

1462
01:13:45,590 --> 01:13:52,539
same would be true for each of these you

1463
01:13:47,510 --> 01:13:55,780
can see it just goes up the axis set and

1464
01:13:52,539 --> 01:14:02,350
so that would get us all of our colors

1465
01:13:55,779 --> 01:14:05,000
that we need here and then we're done

1466
01:14:02,350 --> 01:14:07,220
so that lets us pick up well if we don't

1467
01:14:05,000 --> 01:14:09,920
have a type over done so that lets us

1468
01:14:07,220 --> 01:14:11,270
pick which of our colors we're gonna

1469
01:14:09,920 --> 01:14:14,119
blend between and then we blended

1470
01:14:11,270 --> 01:14:16,130
between them to get the final result

1471
01:14:14,119 --> 01:14:18,979
based on where the normal was pointing

1472
01:14:16,130 --> 01:14:21,920
so that's a way of collapsing down six

1473
01:14:18,979 --> 01:14:24,019
samples into one based on a normal that

1474
01:14:21,920 --> 01:14:26,930
can like smoothly vary around them right

1475
01:14:24,020 --> 01:14:33,770
now there's ways we can probably make

1476
01:14:26,930 --> 01:14:35,750
this better than it is right I this like

1477
01:14:33,770 --> 01:14:37,850
like the way these are happening here

1478
01:14:35,750 --> 01:14:39,680
you could imagine us doing an actual six

1479
01:14:37,850 --> 01:14:45,110
way blend which might actually be faster

1480
01:14:39,680 --> 01:14:50,000
I by just using a clamp right so you

1481
01:14:45,109 --> 01:14:52,689
would do like like this can be made off

1482
01:14:50,000 --> 01:14:52,689
with it to do it

1483
01:15:24,909 --> 01:15:29,840
there's a lot we can do to just make

1484
01:15:28,369 --> 01:15:31,880
this not have any branches in it or

1485
01:15:29,840 --> 01:15:34,010
anything like that absolute value

1486
01:15:31,880 --> 01:15:36,579
obviously doesn't require any branching

1487
01:15:34,010 --> 01:15:40,070
either it just knocks out the sign bit

1488
01:15:36,579 --> 01:15:42,829
so we can knock out the sign bit do the

1489
01:15:40,069 --> 01:15:45,439
blend and we'll just use min and Max to

1490
01:15:42,829 --> 01:15:46,760
threshold our values and I think we can

1491
01:15:45,439 --> 01:15:49,779
make this just a thing that's like a

1492
01:15:46,760 --> 01:15:55,039
bunch of ads right it's just a six-way

1493
01:15:49,779 --> 01:15:57,889
mad that you know it's not nothing

1494
01:15:55,039 --> 01:16:01,159
there's a lot of because each color you

1495
01:15:57,890 --> 01:16:04,910
know there's a lot of values there so

1496
01:16:01,159 --> 01:16:07,699
that it's a fair number of floppies but

1497
01:16:04,909 --> 01:16:09,979
it's not gonna be really all that much

1498
01:16:07,699 --> 01:16:13,069
and so this makes it look worse than it

1499
01:16:09,979 --> 01:16:15,889
is we can do a much more straightforward

1500
01:16:13,069 --> 01:16:17,479
thing here that doesn't require like a

1501
01:16:15,890 --> 01:16:21,260
conditional move or something like this

1502
01:16:17,479 --> 01:16:23,659
does we can just use a select there in

1503
01:16:21,260 --> 01:16:27,260
fact would be another way to do it right

1504
01:16:23,659 --> 01:16:30,170
so we could we could do three opps to

1505
01:16:27,260 --> 01:16:31,520
build the color values and then do the

1506
01:16:30,170 --> 01:16:32,960
combine or something like that so

1507
01:16:31,520 --> 01:16:35,570
there's a lot of things we can do here

1508
01:16:32,960 --> 01:16:37,909
this is not an ugly routine it can be

1509
01:16:35,569 --> 01:16:38,840
made quite clean and simple I think but

1510
01:16:37,909 --> 01:16:41,359
I don't want to do that optimization

1511
01:16:38,840 --> 01:16:43,460
till we get everything going so that we

1512
01:16:41,359 --> 01:16:44,929
can see how we want to slot in because

1513
01:16:43,460 --> 01:16:46,340
maybe we'll end up being we might be

1514
01:16:44,930 --> 01:16:48,140
doing four of these at a time for all I

1515
01:16:46,340 --> 01:16:51,860
know who knows what we're gonna end up

1516
01:16:48,140 --> 01:16:53,710
doing so I think we kind of want to wait

1517
01:16:51,859 --> 01:16:59,000
a little bit on that before we get too

1518
01:16:53,710 --> 01:17:01,100
fancy so looking at the rest of this now

1519
01:16:59,000 --> 01:17:04,130
you can see we've got a few functions we

1520
01:17:01,100 --> 01:17:07,370
need to sort of implement here and I'll

1521
01:17:04,130 --> 01:17:10,350
go ahead and do that so here's my

1522
01:17:07,369 --> 01:17:14,640
accumulate probe function I gotta do

1523
01:17:10,350 --> 01:17:17,340
that's gonna take a light probe we'll

1524
01:17:14,640 --> 01:17:18,990
call that a for accumulator then we're

1525
01:17:17,340 --> 01:17:20,699
gonna have the T value that we're

1526
01:17:18,989 --> 01:17:21,899
actually gonna use or maybe we'll call

1527
01:17:20,699 --> 01:17:23,909
the C value for coefficient there's only

1528
01:17:21,899 --> 01:17:26,579
one of them and we're not it's not alert

1529
01:17:23,909 --> 01:17:30,840
it's actually just a cumulation and then

1530
01:17:26,579 --> 01:17:35,850
we have a p0 value there that p 0 value

1531
01:17:30,840 --> 01:17:38,310
is the light probe that's the source and

1532
01:17:35,850 --> 01:17:40,470
so here what we want to do is again

1533
01:17:38,310 --> 01:17:42,330
we're we're just sort of doing a color

1534
01:17:40,470 --> 01:17:44,699
summation here so what we want to do is

1535
01:17:42,329 --> 01:17:46,529
for every one of these we want to

1536
01:17:44,699 --> 01:17:51,800
effectively just add the corresponding

1537
01:17:46,529 --> 01:17:54,479
value in the light probing question oops

1538
01:17:51,800 --> 01:17:57,360
right so it's literally just a

1539
01:17:54,479 --> 01:18:09,149
distribution of this I only even wrote

1540
01:17:57,359 --> 01:18:10,589
this function just so I wouldn't have to

1541
01:18:09,149 --> 01:18:12,539
type that that many times but it's

1542
01:18:10,590 --> 01:18:14,760
literally just a distribution of the sum

1543
01:18:12,539 --> 01:18:16,260
so these would just get in lined and

1544
01:18:14,760 --> 01:18:20,180
this would just be happening directly

1545
01:18:16,260 --> 01:18:23,520
right so again very very very simple

1546
01:18:20,180 --> 01:18:26,579
just producing a summation there nothing

1547
01:18:23,520 --> 01:18:29,730
fancy so I think that's almost

1548
01:18:26,579 --> 01:18:32,519
everything and then we have our kind of

1549
01:18:29,729 --> 01:18:34,559
lighting stuff more or less solved I

1550
01:18:32,520 --> 01:18:35,790
think and we can move on to the next

1551
01:18:34,560 --> 01:18:36,900
phase which is trying to integrate it in

1552
01:18:35,789 --> 01:18:40,109
which we'll probably have to wait till

1553
01:18:36,899 --> 01:18:43,109
tomorrow to do but if you take a look at

1554
01:18:40,109 --> 01:18:45,630
what we still have remaining the only

1555
01:18:43,109 --> 01:18:48,269
thing we did not do is fussing with the

1556
01:18:45,630 --> 01:18:51,510
grid so all of the grid you can see here

1557
01:18:48,270 --> 01:18:56,250
all the grid functions are currently

1558
01:18:51,510 --> 01:18:58,860
stubbed and there's nothing there

1559
01:18:56,250 --> 01:19:02,510
to implement them so you can see that

1560
01:18:58,859 --> 01:19:06,319
we've got a bunch of things for that

1561
01:19:02,510 --> 01:19:06,320
let's go ahead and lay out what they are

1562
01:19:10,630 --> 01:19:18,559
oops so assuming we have a spatial index

1563
01:19:17,328 --> 01:19:20,509
one of the things we want to do is

1564
01:19:18,559 --> 01:19:21,980
produce the center of a particular cell

1565
01:19:20,510 --> 01:19:24,650
that's one thing we want to be able to

1566
01:19:21,979 --> 01:19:32,058
do another thing we want to be able to

1567
01:19:24,649 --> 01:19:34,460
do is get back the slot this is what's

1568
01:19:32,059 --> 01:19:36,110
actually stored in the spatial index

1569
01:19:34,460 --> 01:19:40,189
which is just that residual really

1570
01:19:36,109 --> 01:19:41,960
simple 16-bit integer that tells you

1571
01:19:40,189 --> 01:19:47,558
which light probe in the set of light

1572
01:19:41,960 --> 01:19:47,559
probes we're talking about uh and so

1573
01:19:47,920 --> 01:19:52,340
final thing is map it to create and this

1574
01:19:50,538 --> 01:19:54,710
one's gonna be the harder one this one's

1575
01:19:52,340 --> 01:19:56,719
gonna have because we have to return the

1576
01:19:54,710 --> 01:19:59,319
u VW's potentially as well I don't know

1577
01:19:56,719 --> 01:20:01,130
exactly how we're gonna work that out

1578
01:19:59,319 --> 01:20:07,099
we'll have to think about it a little

1579
01:20:01,130 --> 01:20:09,770
bit anyway so in this case for get

1580
01:20:07,099 --> 01:20:11,150
center of for the spatial index we know

1581
01:20:09,770 --> 01:20:14,030
that we've got a min corner somewhere

1582
01:20:11,149 --> 01:20:17,319
right we're gonna have to have that in

1583
01:20:14,029 --> 01:20:19,460
fact it's already written in there right

1584
01:20:17,319 --> 01:20:22,308
I'm gonna have to score the cell Bhim

1585
01:20:19,460 --> 01:20:25,279
because why not so if we do the min

1586
01:20:22,309 --> 01:20:36,889
corner plus the cell cord times the cell

1587
01:20:25,279 --> 01:20:42,828
dim right eye that gives us the corner

1588
01:20:36,889 --> 01:20:47,630
of the cell in question and we just need

1589
01:20:42,828 --> 01:20:49,038
to move half a grid cell further right

1590
01:20:47,630 --> 01:20:51,940
that's all we actually need to do there

1591
01:20:49,038 --> 01:20:51,939
um trust

1592
01:20:56,800 --> 01:21:00,038
I think that's what we want anyway

1593
01:20:58,448 --> 01:21:00,998
doesn't really matter I was trying to

1594
01:21:00,038 --> 01:21:03,488
think of is this the best way to

1595
01:21:00,998 --> 01:21:04,779
organize the grid but yeah well that

1596
01:21:03,488 --> 01:21:07,089
will become clear in time we need to

1597
01:21:04,779 --> 01:21:10,658
make adjustments anyway

1598
01:21:07,090 --> 01:21:12,670
when we're doing get center of here what

1599
01:21:10,658 --> 01:21:16,179
I want to be able to do now is say all

1600
01:21:12,670 --> 01:21:18,069
right I need you to get this is the min

1601
01:21:16,179 --> 01:21:29,349
corner in fact you know we could just

1602
01:21:18,069 --> 01:21:32,018
duplicate this routine if we want to get

1603
01:21:29,349 --> 01:21:36,610
the actual center all we would need to

1604
01:21:32,019 --> 01:21:39,010
do here is add half an index right

1605
01:21:36,609 --> 01:21:41,049
when we do our multiply so that's pretty

1606
01:21:39,010 --> 01:21:43,269
straightforward now in both cases we

1607
01:21:41,050 --> 01:21:47,230
need a way of converting a V through 3 u

1608
01:21:43,269 --> 01:21:50,230
2 V 3 that's fine well have that and

1609
01:21:47,229 --> 01:21:54,129
then I think you know once we implant

1610
01:21:50,229 --> 01:21:55,928
that the once we implement those V 3

1611
01:21:54,130 --> 01:21:57,069
years which we kind of already have

1612
01:21:55,929 --> 01:21:58,510
implemented and we're just going to move

1613
01:21:57,069 --> 01:22:00,308
them into the math library they were

1614
01:21:58,510 --> 01:22:04,719
called gen v3 s before but we're gonna

1615
01:22:00,309 --> 01:22:06,670
implement them as a v3 u that should all

1616
01:22:04,719 --> 01:22:08,349
be fine and then so finally when we do

1617
01:22:06,670 --> 01:22:10,599
to get corner light index in this case

1618
01:22:08,349 --> 01:22:13,119
now we just need ways of looking up into

1619
01:22:10,599 --> 01:22:15,519
the spatial index for now I'm going to

1620
01:22:13,118 --> 01:22:16,988
stick with assertions but I don't know

1621
01:22:15,519 --> 01:22:19,929
if we want to use clamping in the future

1622
01:22:16,988 --> 01:22:22,479
it may be best to use clamping again

1623
01:22:19,929 --> 01:22:24,998
because that can be it's pretty cheap in

1624
01:22:22,479 --> 01:22:27,848
SSE it's not very hard to do clamping so

1625
01:22:24,998 --> 01:22:29,559
sometimes you just do it instead so it's

1626
01:22:27,849 --> 01:22:36,190
hard to say exactly how we want do that

1627
01:22:29,559 --> 01:22:38,820
but either way we know that to get our

1628
01:22:36,189 --> 01:22:38,819
light index

1629
01:22:42,170 --> 01:22:47,519
what we want to do here is take that

1630
01:22:44,880 --> 01:22:50,010
array that stores the all the

1631
01:22:47,519 --> 01:22:53,400
information in the voxel and we want to

1632
01:22:50,010 --> 01:22:54,510
move by the cell cords somehow right so

1633
01:22:53,399 --> 01:22:57,929
we're going to be doing something like

1634
01:22:54,510 --> 01:23:02,099
this and so to look at how these would

1635
01:22:57,929 --> 01:23:04,340
get added in there I intentionally sort

1636
01:23:02,099 --> 01:23:07,260
of said there's a dim power of 2 here

1637
01:23:04,340 --> 01:23:09,119
which means the light probes facial

1638
01:23:07,260 --> 01:23:11,969
index is not gonna really be allowed to

1639
01:23:09,118 --> 01:23:13,529
be an arbitrary number you always have

1640
01:23:11,969 --> 01:23:15,090
to have the sides be a power of 2 and

1641
01:23:13,529 --> 01:23:17,578
the reason I wanted to do that is

1642
01:23:15,090 --> 01:23:19,230
because it just makes indexing easier it

1643
01:23:17,578 --> 01:23:21,359
means that instead of having to do any

1644
01:23:19,229 --> 01:23:25,109
of this stuff we can literally just

1645
01:23:21,359 --> 01:23:37,139
build a composite index value sort of

1646
01:23:25,109 --> 01:23:41,179
something like this what do I want to

1647
01:23:37,139 --> 01:23:41,179
call this get

1648
01:23:45,270 --> 01:23:50,590
something like that

1649
01:23:46,869 --> 01:23:51,880
I don't know but basically if you give

1650
01:23:50,590 --> 01:23:53,319
it back if you give it some self

1651
01:23:51,880 --> 01:23:55,469
coordinates what we want to be able to

1652
01:23:53,319 --> 01:23:58,509
do is just produce an index out of those

1653
01:23:55,469 --> 01:24:02,619
and we can produce that literally by

1654
01:23:58,510 --> 01:24:06,640
just bit manipulation so the Z would get

1655
01:24:02,619 --> 01:24:10,000
shifted up by something the Y would get

1656
01:24:06,640 --> 01:24:11,619
shifted up by something and the X would

1657
01:24:10,000 --> 01:24:14,319
not it would just get bored in there

1658
01:24:11,619 --> 01:24:18,670
right and we do need in this case the

1659
01:24:14,319 --> 01:24:20,170
spatial index bit here but after that

1660
01:24:18,670 --> 01:24:25,810
we're good to go so here we would just

1661
01:24:20,170 --> 01:24:31,390
say all right the dim pao2 here imp out

1662
01:24:25,810 --> 01:24:35,110
to here and so we know that let's say

1663
01:24:31,390 --> 01:24:36,760
that the dimension power of 2 you know

1664
01:24:35,109 --> 01:24:40,529
what's that going to be let's say the

1665
01:24:36,760 --> 01:24:43,539
dimension power of 2 is you know five

1666
01:24:40,529 --> 01:24:46,119
eight who knows that means there's 286

1667
01:24:43,539 --> 01:24:47,979
values X could take on right so we just

1668
01:24:46,119 --> 01:24:50,409
need to shift up by eight to make sure

1669
01:24:47,979 --> 01:24:53,229
why does it interfere with that done and

1670
01:24:50,409 --> 01:24:56,529
then when we get to Z we need to shift

1671
01:24:53,229 --> 01:24:59,948
up by that twice right so it's really

1672
01:24:56,529 --> 01:25:03,399
just saying shift it up by that two

1673
01:24:59,948 --> 01:25:07,269
times right what's the musing about that

1674
01:25:03,399 --> 01:25:09,599
is that's just a double shift right if

1675
01:25:07,270 --> 01:25:16,210
you want to do

1676
01:25:09,600 --> 01:25:18,100
oops it that way you can I'll let that

1677
01:25:16,210 --> 01:25:19,329
be the compilers discretion I don't

1678
01:25:18,100 --> 01:25:20,440
really care how it wants to do depends

1679
01:25:19,329 --> 01:25:22,390
on what kind of code it's gonna generate

1680
01:25:20,439 --> 01:25:25,119
there but point being we just want to

1681
01:25:22,390 --> 01:25:27,610
shift up by twice that again for the Z

1682
01:25:25,119 --> 01:25:29,619
value that will produce a composite

1683
01:25:27,609 --> 01:25:33,759
index and then we return the index and

1684
01:25:29,619 --> 01:25:38,289
we're done right easy peasy lemon

1685
01:25:33,760 --> 01:25:40,210
squeezy so if we want to make sure that

1686
01:25:38,289 --> 01:25:42,340
these things are always inside the

1687
01:25:40,210 --> 01:25:44,649
bounds when we actually look them up

1688
01:25:42,340 --> 01:25:49,659
then they're also you know we kind of

1689
01:25:44,649 --> 01:25:52,420
have to come Jimmy take some care for

1690
01:25:49,659 --> 01:25:54,639
now I'm just gonna say whatevs

1691
01:25:52,420 --> 01:25:55,869
let's just you know take them and we'll

1692
01:25:54,640 --> 01:26:00,130
start to deal with out

1693
01:25:55,869 --> 01:26:03,460
this later on right one way we could do

1694
01:26:00,130 --> 01:26:14,319
that too is just say look here let me do

1695
01:26:03,460 --> 01:26:16,659
this let's get that phoenixon plank like

1696
01:26:14,319 --> 01:26:18,609
so what I can do here is say look let's

1697
01:26:16,659 --> 01:26:22,829
put an assertion in we know that the

1698
01:26:18,609 --> 01:26:22,829
index has to be less than the dim POW to

1699
01:26:27,600 --> 01:26:35,530
multiply it out right so if we take the

1700
01:26:31,510 --> 01:26:38,320
dim POW - and we say we know that each

1701
01:26:35,529 --> 01:26:40,389
one of the sides of this is going to

1702
01:26:38,319 --> 01:26:43,000
effectively be like race that power -

1703
01:26:40,390 --> 01:26:47,789
right like if it was zero it's one

1704
01:26:43,000 --> 01:26:50,500
dimension it's it's one if it was two

1705
01:26:47,789 --> 01:26:52,750
it's two if it's three it's four if it's

1706
01:26:50,500 --> 01:27:03,220
if it's for its 16 and so on right

1707
01:26:52,750 --> 01:27:05,199
so we know that this is one I'm trying

1708
01:27:03,220 --> 01:27:06,820
to explain this but my brain is having a

1709
01:27:05,199 --> 01:27:12,880
hard time coming up with the word so I'm

1710
01:27:06,819 --> 01:27:16,269
just going to draw it for you we know

1711
01:27:12,880 --> 01:27:21,159
that if we want to produce 2 to the N

1712
01:27:16,270 --> 01:27:26,050
right that one shifted up by n gives us

1713
01:27:21,159 --> 01:27:30,819
that value right so when we see dim

1714
01:27:26,050 --> 01:27:33,789
power of 2 that's just an N right that's

1715
01:27:30,819 --> 01:27:38,289
just this so anytime we want to know how

1716
01:27:33,789 --> 01:27:40,600
many are on one of our voxel sides it's

1717
01:27:38,289 --> 01:27:45,340
just 2 to the N which is just one

1718
01:27:40,600 --> 01:27:46,900
shifted up by n right now if we want to

1719
01:27:45,340 --> 01:27:49,210
know how many there are total in the

1720
01:27:46,899 --> 01:27:52,839
voxel we know that we would just

1721
01:27:49,210 --> 01:27:54,789
multiply the number of ones along x

1722
01:27:52,840 --> 01:27:57,909
times the number of ones along Y times

1723
01:27:54,789 --> 01:28:01,600
the number of ones along Z right which

1724
01:27:57,909 --> 01:28:05,380
is to DN x to the n x to the N now we

1725
01:28:01,600 --> 01:28:08,380
know that if you are going to add 2 to

1726
01:28:05,380 --> 01:28:09,679
the ends together I'm sorry if you're

1727
01:28:08,380 --> 01:28:12,199
going to multiply

1728
01:28:09,679 --> 01:28:14,539
together you're just gonna add the ends

1729
01:28:12,198 --> 01:28:17,779
right because multiplication is just

1730
01:28:14,539 --> 01:28:22,639
adding more powers so it's really just n

1731
01:28:17,779 --> 01:28:24,769
plus n plus n right it's 2 to the n plus

1732
01:28:22,639 --> 01:28:26,690
n plus n that means if we want to do

1733
01:28:24,770 --> 01:28:30,909
this shift we're really just talking

1734
01:28:26,689 --> 01:28:35,419
about one shifted up by n plus n plus n

1735
01:28:30,908 --> 01:28:37,189
right but we don't really need to do n

1736
01:28:35,420 --> 01:28:44,270
plus n plus n because that's just three

1737
01:28:37,189 --> 01:28:48,049
n right so really we just want that

1738
01:28:44,270 --> 01:28:50,719
and so one shifted up by three n is

1739
01:28:48,050 --> 01:28:53,239
actually going to give us the total

1740
01:28:50,719 --> 01:28:55,939
number of things that can be in our

1741
01:28:53,238 --> 01:28:59,198
voxel I know how to say that without

1742
01:28:55,939 --> 01:29:02,988
having things to point to so sorry

1743
01:28:59,198 --> 01:29:04,189
anyway so when we do this all we need to

1744
01:29:02,988 --> 01:29:05,629
do to figure out how many there are

1745
01:29:04,189 --> 01:29:07,428
total that's something there are along

1746
01:29:05,630 --> 01:29:09,650
one all we need to do to figure out how

1747
01:29:07,429 --> 01:29:11,869
they're how many there are along all our

1748
01:29:09,649 --> 01:29:14,029
that and if they were different we could

1749
01:29:11,869 --> 01:29:16,670
just instead of three times we could

1750
01:29:14,029 --> 01:29:21,380
just do plus there right so we could do

1751
01:29:16,670 --> 01:29:23,960
Dimpy 2x plus dim POW 2 dot y times 2

1752
01:29:21,380 --> 01:29:25,940
times Z or something right so we can

1753
01:29:23,960 --> 01:29:30,289
actually be flexible there if we want to

1754
01:29:25,939 --> 01:29:31,698
so you know we could we could play

1755
01:29:30,289 --> 01:29:34,908
around that if we find that it's like to

1756
01:29:31,698 --> 01:29:37,488
discrete and Z or whatever I don't know

1757
01:29:34,908 --> 01:29:39,738
right so just you know keep that in mind

1758
01:29:37,488 --> 01:29:43,488
that this is this doesn't really get

1759
01:29:39,738 --> 01:29:45,079
particularly more complicated at all if

1760
01:29:43,488 --> 01:29:47,329
we want them to be different spatial

1761
01:29:45,079 --> 01:29:48,559
dimensions for each one in fact we maybe

1762
01:29:47,329 --> 01:29:53,210
we should just write it that way now I

1763
01:29:48,560 --> 01:29:55,550
don't know you know you can like if we

1764
01:29:53,210 --> 01:29:58,000
were to do that it would literally just

1765
01:29:55,550 --> 01:29:58,000
be this

1766
01:30:05,029 --> 01:30:10,349
right I don't think there's anything

1767
01:30:07,739 --> 01:30:12,300
else we would have to do and the same is

1768
01:30:10,350 --> 01:30:17,789
true for this you would just say well

1769
01:30:12,300 --> 01:30:21,300
there's the Z there's the Y and I need

1770
01:30:17,789 --> 01:30:25,069
to account for this y shift in here

1771
01:30:21,300 --> 01:30:25,070
right oh I'm sorry

1772
01:30:32,899 --> 01:30:39,089
right because the I almost put Y there

1773
01:30:36,960 --> 01:30:41,399
you don't want to shift up Y by Y is

1774
01:30:39,090 --> 01:30:43,860
power 2 because you're making room for X

1775
01:30:41,399 --> 01:30:46,439
in the bottom bits so what you're doing

1776
01:30:43,859 --> 01:30:49,289
is shifting up by however many X needed

1777
01:30:46,439 --> 01:30:51,629
to use right then when we come up here

1778
01:30:49,289 --> 01:30:53,310
we want to shift by how many ye to use

1779
01:30:51,630 --> 01:30:56,400
but we need to have already been shifted

1780
01:30:53,310 --> 01:31:00,270
by X right now since we're already doing

1781
01:30:56,399 --> 01:31:02,369
this shift by X we can instead of doing

1782
01:31:00,270 --> 01:31:04,620
two shifts there we can also just do

1783
01:31:02,369 --> 01:31:08,099
well why don't we just merge these two

1784
01:31:04,619 --> 01:31:11,609
together first and then do the shift as

1785
01:31:08,100 --> 01:31:15,780
as a group right so if you look at doing

1786
01:31:11,609 --> 01:31:18,659
it this way that makes it a little

1787
01:31:15,779 --> 01:31:27,569
cleaner potentially right so let's say

1788
01:31:18,659 --> 01:31:29,840
we took we have that whole thing there

1789
01:31:27,569 --> 01:31:29,840
we go

1790
01:31:31,100 --> 01:31:36,300
so here you can see I take the Z

1791
01:31:34,050 --> 01:31:38,489
coordinate I shift that up by Y I or in

1792
01:31:36,300 --> 01:31:40,650
the Y component I shift that up by X I

1793
01:31:38,489 --> 01:31:42,599
or in the X component so that way it

1794
01:31:40,649 --> 01:31:44,849
reduces the shifting I only have to

1795
01:31:42,600 --> 01:31:46,620
shift up once for each thing I merge in

1796
01:31:44,850 --> 01:31:50,850
and that that could be possibly a little

1797
01:31:46,619 --> 01:31:52,710
bit more fun who knows right alright so

1798
01:31:50,850 --> 01:31:55,020
I think that gets me everything I need

1799
01:31:52,710 --> 01:31:57,720
and now you can even set these things to

1800
01:31:55,020 --> 01:31:59,250
arbitrary scales power too because I

1801
01:31:57,720 --> 01:32:00,659
don't know that we it doesn't look like

1802
01:31:59,250 --> 01:32:02,189
it's really any more expensive to do it

1803
01:32:00,659 --> 01:32:03,139
one way or the other it's not really an

1804
01:32:02,189 --> 01:32:06,239
issue

1805
01:32:03,140 --> 01:32:08,550
so in here once we do or get probe

1806
01:32:06,239 --> 01:32:10,889
lighting for we know we've got and also

1807
01:32:08,550 --> 01:32:12,270
we use it here in map into grid we know

1808
01:32:10,890 --> 01:32:14,250
we've got one more thing we've got to do

1809
01:32:12,270 --> 01:32:16,409
which is if we have an arbitrary

1810
01:32:14,250 --> 01:32:24,569
position we have to have some way

1811
01:32:16,408 --> 01:32:26,879
of producing the actual oops we have to

1812
01:32:24,569 --> 01:32:29,309
have some way of actually producing from

1813
01:32:26,880 --> 01:32:31,230
an arbitrary 3d point what the

1814
01:32:29,310 --> 01:32:33,389
coordinates of the grid are which are

1815
01:32:31,229 --> 01:32:34,709
like a discrete thing right and we've

1816
01:32:33,389 --> 01:32:35,940
done this so many times I hand me here

1817
01:32:34,710 --> 01:32:39,270
I'm not going to belabor the point but

1818
01:32:35,939 --> 01:32:41,069
it's trivial right for any given spatial

1819
01:32:39,270 --> 01:32:43,920
index we know we have the minimum corner

1820
01:32:41,069 --> 01:32:46,408
so first we just make the P relative to

1821
01:32:43,920 --> 01:32:47,940
the minimum corner right that's the

1822
01:32:46,408 --> 01:32:50,539
vector from the minimum corner of our

1823
01:32:47,939 --> 01:32:53,279
spatial index to the point in question

1824
01:32:50,539 --> 01:32:55,769
after we do that we know all we have to

1825
01:32:53,279 --> 01:32:58,559
do is say well after we get that

1826
01:32:55,770 --> 01:33:00,810
relative one we know that each cell is

1827
01:32:58,560 --> 01:33:03,900
exactly this large so we can just say

1828
01:33:00,810 --> 01:33:05,699
let's take it and divide it effectively

1829
01:33:03,899 --> 01:33:08,158
right because multiplying by the inverse

1830
01:33:05,698 --> 01:33:12,448
cell dimension is the same as dividing

1831
01:33:08,158 --> 01:33:14,729
by the cell dimension again that's an

1832
01:33:12,448 --> 01:33:16,079
actual per element multiplication so we

1833
01:33:14,729 --> 01:33:18,388
got to do we got to invoke a Hadamard

1834
01:33:16,079 --> 01:33:19,679
product there I don't use vector product

1835
01:33:18,389 --> 01:33:20,909
doesn't multiply because who knows what

1836
01:33:19,679 --> 01:33:22,109
that means you want dot product you I

1837
01:33:20,908 --> 01:33:25,529
had a Myra product runtime vector cross

1838
01:33:22,109 --> 01:33:27,000
product there's all kinds of vector

1839
01:33:25,529 --> 01:33:28,198
products out there so I like to say

1840
01:33:27,000 --> 01:33:30,960
which one I'm using in this case it's

1841
01:33:28,198 --> 01:33:32,879
Hadamard product that gets us back the

1842
01:33:30,960 --> 01:33:37,679
coordinates in float so this is

1843
01:33:32,880 --> 01:33:40,800
basically our you know our F chord F

1844
01:33:37,679 --> 01:33:42,119
chord and I probably didn't just tell

1845
01:33:40,800 --> 01:33:44,369
mine F word because I don't have perfect

1846
01:33:42,119 --> 01:33:46,710
pitch but you know I'm saying anyway the

1847
01:33:44,369 --> 01:33:47,880
F chord is still in floating-point so

1848
01:33:46,710 --> 01:33:52,020
now what we want to do is to be able to

1849
01:33:47,880 --> 01:33:53,909
truncate that coordinate down and in so

1850
01:33:52,020 --> 01:33:58,260
doing we will also be able to produce

1851
01:33:53,908 --> 01:33:59,729
that UVW that's the that's the reason

1852
01:33:58,260 --> 01:34:01,949
why I was sort of suggesting that we

1853
01:33:59,729 --> 01:34:04,589
probably want to produce both values

1854
01:34:01,948 --> 01:34:08,609
here but we'll get to that a second so

1855
01:34:04,590 --> 01:34:11,239
if I want to now get my my v3u out of it

1856
01:34:08,609 --> 01:34:16,109
I want to be able to do like a truncate

1857
01:34:11,238 --> 01:34:19,638
on this F chord here and that will

1858
01:34:16,109 --> 01:34:24,279
produce my result

1859
01:34:19,639 --> 01:34:28,579
but once I have you know that truncation

1860
01:34:24,279 --> 01:34:30,920
I could pretty easily produce the you

1861
01:34:28,579 --> 01:34:32,750
know with using this F chord I can

1862
01:34:30,920 --> 01:34:38,899
pretty pretty easily produce the UVW

1863
01:34:32,750 --> 01:34:41,510
right the UVW in this case is just the F

1864
01:34:38,899 --> 01:34:49,238
chord - whatever the truncated version

1865
01:34:41,510 --> 01:34:51,679
was right uh so there's that

1866
01:34:49,238 --> 01:34:54,169
who knows how we want to implement that

1867
01:34:51,679 --> 01:34:56,060
but point being we would like to return

1868
01:34:54,170 --> 01:34:58,579
this value as well because a lot of

1869
01:34:56,060 --> 01:35:02,960
people actually need it as you can see

1870
01:34:58,579 --> 01:35:04,189
here and they don't have F chord you

1871
01:35:02,960 --> 01:35:06,800
could just ask them to do this

1872
01:35:04,189 --> 01:35:09,259
themselves outside but they don't have

1873
01:35:06,800 --> 01:35:10,429
the multiplied version and they need

1874
01:35:09,260 --> 01:35:13,670
that multiplied version because

1875
01:35:10,429 --> 01:35:17,449
otherwise it's not the right scale right

1876
01:35:13,670 --> 01:35:18,560
for those zero to one values so that'll

1877
01:35:17,448 --> 01:35:22,750
raise the question of how do you want to

1878
01:35:18,560 --> 01:35:22,750
return this back let's say we do this

1879
01:35:32,738 --> 01:35:37,868
I'm happy with it there we go

1880
01:35:44,770 --> 01:35:49,670
hopefully everyone else is too and then

1881
01:35:47,840 --> 01:35:51,889
when you call map into grid if you only

1882
01:35:49,670 --> 01:35:53,539
want one of the things you just get one

1883
01:35:51,889 --> 01:36:02,900
of the things if you want both of the

1884
01:35:53,539 --> 01:36:10,988
things you take them so here I can get

1885
01:36:02,899 --> 01:36:13,988
myself chord but I can also get a UVW

1886
01:36:10,988 --> 01:36:13,988
right

1887
01:36:15,300 --> 01:36:22,210
so that seems fine and when we do the

1888
01:36:20,170 --> 01:36:23,980
map in the grid here we only really

1889
01:36:22,210 --> 01:36:26,170
wanted the cell cord so we can just

1890
01:36:23,979 --> 01:36:30,399
pluck that out and skip the UVW entirely

1891
01:36:26,170 --> 01:36:32,710
because we don't care what that UVW was

1892
01:36:30,399 --> 01:36:33,729
anyway and then I think we're pretty

1893
01:36:32,710 --> 01:36:37,390
much good to go

1894
01:36:33,729 --> 01:36:42,129
I need the v3u to exist and since we've

1895
01:36:37,390 --> 01:36:45,700
already kind of implemented it I'm going

1896
01:36:42,130 --> 01:36:49,869
to just say now is probably the time to

1897
01:36:45,699 --> 01:36:51,309
upgrade our gen v3 into a real value

1898
01:36:49,869 --> 01:36:54,939
because we want it and you can see

1899
01:36:51,310 --> 01:36:56,980
basically everyone needs it there so

1900
01:36:54,939 --> 01:37:00,729
let's go ahead and do that oops I didn't

1901
01:36:56,979 --> 01:37:03,129
mean to make a new buffer so if we take

1902
01:37:00,729 --> 01:37:06,039
a look at our gen math you can see we've

1903
01:37:03,130 --> 01:37:10,170
got this Union Gen b3 here I'm gonna go

1904
01:37:06,039 --> 01:37:13,239
ahead and type def agenda b3 to a v3u

1905
01:37:10,170 --> 01:37:15,010
because I want to now make this a

1906
01:37:13,239 --> 01:37:19,750
first-class citizen there

1907
01:37:15,010 --> 01:37:23,980
I know those RS 32s so I guess this is

1908
01:37:19,750 --> 01:37:26,260
really v3 s but I'm also fine with that

1909
01:37:23,979 --> 01:37:29,829
I don't really care if it's a U or an S

1910
01:37:26,260 --> 01:37:31,989
in this case so I think that'd be fine

1911
01:37:29,829 --> 01:37:35,109
we could do this and then I'll use v3

1912
01:37:31,989 --> 01:37:37,119
S's in the rest of the stuff as well I

1913
01:37:35,109 --> 01:37:39,099
think there's a hand made types here

1914
01:37:37,119 --> 01:37:42,069
where we actually define these guys and

1915
01:37:39,100 --> 01:37:50,850
so I'll follow suit there and just say

1916
01:37:42,069 --> 01:37:53,500
here we've got a v3 s in the mix and

1917
01:37:50,850 --> 01:37:55,990
yeah I'll just leave it at that for now

1918
01:37:53,500 --> 01:37:57,789
there's more we could do there but there

1919
01:37:55,989 --> 01:37:58,239
but I'm not going to bother for the time

1920
01:37:57,789 --> 01:38:00,100
being

1921
01:37:58,239 --> 01:38:02,590
and then in the lighting stuff I'll just

1922
01:38:00,100 --> 01:38:04,900
say alright you know when I said v3 you

1923
01:38:02,590 --> 01:38:08,110
I think pretty much everywhere we'll

1924
01:38:04,899 --> 01:38:10,119
just use this instead sorry for the

1925
01:38:08,109 --> 01:38:12,880
psych-out but that's just how it's gonna

1926
01:38:10,119 --> 01:38:14,260
be and I don't think there is very much

1927
01:38:12,880 --> 01:38:16,470
we have to do to fix that

1928
01:38:14,260 --> 01:38:20,970
oh and this probably should get moved

1929
01:38:16,470 --> 01:38:20,970
out into here as well

1930
01:38:25,189 --> 01:38:45,259
let's make that an incredibly long and

1931
01:38:27,479 --> 01:38:49,019
ridiculous name go and live than that

1932
01:38:45,260 --> 01:38:51,300
not a lot we have to do so we're just

1933
01:38:49,020 --> 01:38:53,400
gonna have to implement that v3s I think

1934
01:38:51,300 --> 01:38:55,500
then we're good to go right not a whole

1935
01:38:53,399 --> 01:39:04,879
lot else to do there

1936
01:38:55,500 --> 01:39:08,579
this needs to exist and that's an S and

1937
01:39:04,880 --> 01:39:14,550
that's it so we now need to actually

1938
01:39:08,579 --> 01:39:23,850
take that gen math dot CPP and we're

1939
01:39:14,550 --> 01:39:25,980
gonna have to get yeah we didn't really

1940
01:39:23,850 --> 01:39:28,170
do much with it as you can see here so

1941
01:39:25,979 --> 01:39:30,419
those are all part of those gen volumes

1942
01:39:28,170 --> 01:39:34,470
which are a different thing so in the

1943
01:39:30,420 --> 01:39:36,210
math in the math world of things I'm

1944
01:39:34,470 --> 01:39:40,130
gonna go ahead and start implementing

1945
01:39:36,210 --> 01:39:45,050
some of these so we've got our V 3s here

1946
01:39:40,130 --> 01:39:49,640
and just want to make sure we actually

1947
01:39:45,050 --> 01:39:49,640
have some operators that it can use

1948
01:39:58,250 --> 01:40:03,210
so we'll start with those and then

1949
01:40:01,170 --> 01:40:06,449
really mostly what we need is just ways

1950
01:40:03,210 --> 01:40:10,520
of converting these things so mostly

1951
01:40:06,449 --> 01:40:27,000
what I need is like I want a truncate

1952
01:40:10,520 --> 01:40:33,990
oops - v3 s for v3 and I thought we had

1953
01:40:27,000 --> 01:40:38,699
like a look at of truncate so you know

1954
01:40:33,989 --> 01:40:40,739
what floor is fine Flores is totally

1955
01:40:38,699 --> 01:40:48,090
what I want anyway effectively so I'm

1956
01:40:40,739 --> 01:40:52,380
find that so in here where we're doing

1957
01:40:48,090 --> 01:40:53,909
this sort of floor function we're just

1958
01:40:52,380 --> 01:40:55,529
going to do that on each of its values

1959
01:40:53,909 --> 01:40:57,000
and that'll produce the floor that we

1960
01:40:55,529 --> 01:41:03,179
wanted so that's actually totally

1961
01:40:57,000 --> 01:41:06,720
fuck-ups that's actually totally fine I

1962
01:41:03,180 --> 01:41:08,400
think all those are fine to know whirly

1963
01:41:06,720 --> 01:41:10,680
words there so then the only other thing

1964
01:41:08,399 --> 01:41:13,439
we I think needed I can't quite remember

1965
01:41:10,680 --> 01:41:19,380
is the ability to change one of these v3

1966
01:41:13,439 --> 01:41:22,169
s is into it back into a v3 that's just

1967
01:41:19,380 --> 01:41:26,970
a simple load that's not going to do

1968
01:41:22,170 --> 01:41:32,310
anything interesting at all doesn't

1969
01:41:26,970 --> 01:41:34,880
really even change the value i and

1970
01:41:32,310 --> 01:41:34,880
that's it

1971
01:41:37,529 --> 01:41:43,800
all right so let's start to clean things

1972
01:41:39,600 --> 01:41:47,660
up here as we go

1973
01:41:43,800 --> 01:41:50,010
looks like we wanted a short hand there

1974
01:41:47,659 --> 01:42:07,949
for creating one of these which makes

1975
01:41:50,010 --> 01:42:20,909
sense again pretty simple what else we

1976
01:42:07,949 --> 01:42:25,309
need get probe from cell so I think

1977
01:42:20,909 --> 01:42:25,309
that's just this right

1978
01:42:33,760 --> 01:42:47,060
so we do have a bit of an issue here

1979
01:42:40,039 --> 01:42:52,639
that I think we kind of want to be aware

1980
01:42:47,060 --> 01:42:54,710
of but actually I guess it's fine

1981
01:42:52,639 --> 01:42:56,359
because there's already a zero so we

1982
01:42:54,710 --> 01:42:57,800
always want to return a value from this

1983
01:42:56,359 --> 01:43:06,679
but I realized that I guess we kind of

1984
01:42:57,800 --> 01:43:08,690
can because if there's a zero we just

1985
01:43:06,679 --> 01:43:10,969
returned the null zero probe which is

1986
01:43:08,689 --> 01:43:18,710
just has nothing in it so that's

1987
01:43:10,969 --> 01:43:24,020
actually fine so here we want to take

1988
01:43:18,710 --> 01:43:33,139
this nonsense right and we want to do

1989
01:43:24,020 --> 01:43:34,400
the indexing so that's in this case just

1990
01:43:33,139 --> 01:43:37,250
going to piggyback on top of this

1991
01:43:34,399 --> 01:43:39,439
function actually so where we get the

1992
01:43:37,250 --> 01:43:41,210
spatial index address and the corner

1993
01:43:39,439 --> 01:43:42,198
light in the nexus stuff here all we're

1994
01:43:41,210 --> 01:43:49,730
doing is we're really just going to call

1995
01:43:42,198 --> 01:43:51,979
that and we're gonna say give us what

1996
01:43:49,729 --> 01:43:54,379
what would be whatever the index is in

1997
01:43:51,979 --> 01:44:04,729
there and we want to get that probe

1998
01:43:54,380 --> 01:44:06,139
right and so this is really just a

1999
01:44:04,729 --> 01:44:09,559
convenience function built out of things

2000
01:44:06,139 --> 01:44:15,050
we already knew we needed and in some

2001
01:44:09,560 --> 01:44:17,869
cases already wrote there's assigned

2002
01:44:15,050 --> 01:44:20,560
unassigned mismatch somewhere probably

2003
01:44:17,868 --> 01:44:20,559
this

2004
01:44:23,630 --> 01:44:30,480
yeah and then finally we need a way of

2005
01:44:27,809 --> 01:44:32,219
actually getting one of these and hey

2006
01:44:30,479 --> 01:44:33,419
I'm out of time which is good because we

2007
01:44:32,219 --> 01:44:36,029
just finished it's money everything

2008
01:44:33,420 --> 01:45:02,010
tomorrow can be the day when we actually

2009
01:44:36,029 --> 01:45:06,649
try to wire some of this stuff up all

2010
01:45:02,010 --> 01:45:06,650
right anything else we got

2011
01:45:07,550 --> 01:45:14,340
so cell dimension here was just a typo

2012
01:45:10,770 --> 01:45:18,230
we meant to get that off of the spatial

2013
01:45:14,340 --> 01:45:21,328
index so that's that's nothing big there

2014
01:45:18,229 --> 01:45:29,759
here this is just needs to get its new

2015
01:45:21,328 --> 01:45:31,469
ridiculous long name here where we've

2016
01:45:29,760 --> 01:45:39,570
got that truncate it's really just

2017
01:45:31,469 --> 01:45:45,569
called floor and then we finally have a

2018
01:45:39,569 --> 01:45:52,729
get probe lighting for which I don't

2019
01:45:45,569 --> 01:45:52,729
remember what that actually took

2020
01:45:55,090 --> 01:46:01,989
I think it just means that didn't have

2021
01:46:00,609 --> 01:46:03,939
the solution which it needs to look up

2022
01:46:01,989 --> 01:46:07,989
the light probes and then I think we're

2023
01:46:03,939 --> 01:46:10,089
done and you can see that you know

2024
01:46:07,989 --> 01:46:11,619
there's no sense in running this at this

2025
01:46:10,090 --> 01:46:12,760
point because it can't do anything and

2026
01:46:11,619 --> 01:46:14,439
the reason for that is we aren't

2027
01:46:12,760 --> 01:46:15,520
actually submitting or generating light

2028
01:46:14,439 --> 01:46:17,109
probes right

2029
01:46:15,520 --> 01:46:19,360
and you can see that by the fact that

2030
01:46:17,109 --> 01:46:21,909
we're those light probes would be they

2031
01:46:19,359 --> 01:46:23,710
don't actually exist right so in other

2032
01:46:21,909 --> 01:46:25,539
words in here somewhere there has to be

2033
01:46:23,710 --> 01:46:29,909
something that actually stores the light

2034
01:46:25,539 --> 01:46:29,909
probes so right here right we would need

2035
01:46:30,210 --> 01:46:36,730
that and that produces a correctly

2036
01:46:34,930 --> 01:46:37,780
compiling program but that one that

2037
01:46:36,729 --> 01:46:39,579
can't actually do anything because

2038
01:46:37,779 --> 01:46:41,559
nobody will ever put any light probes in

2039
01:46:39,579 --> 01:46:43,569
there and so there's no reason to

2040
01:46:41,560 --> 01:46:45,400
actually call these functions but that's

2041
01:46:43,569 --> 01:46:48,670
exactly what we can start doing tomorrow

2042
01:46:45,399 --> 01:46:53,109
I will go ahead and go to the brief Q&amp;A

2043
01:46:48,670 --> 01:46:59,640
now actually doesn't have to be brief I

2044
01:46:53,109 --> 01:46:59,639
think suppose to be a regular Q&amp;A

2045
01:47:28,408 --> 01:47:32,429
long boolean concerning moving light

2046
01:47:30,988 --> 01:47:34,109
probes could you have special-purpose

2047
01:47:32,429 --> 01:47:35,850
light probes that only affect the

2048
01:47:34,109 --> 01:47:37,380
lighting of certain things that move so

2049
01:47:35,850 --> 01:47:39,570
you would end up with things that move

2050
01:47:37,380 --> 01:47:41,340
and things that don't and most other

2051
01:47:39,569 --> 01:47:43,649
probes in the lighting system would be

2052
01:47:41,340 --> 01:47:45,449
unmoving and perhaps the moving probe

2053
01:47:43,649 --> 01:47:46,948
could use some of the unmoving

2054
01:47:45,448 --> 01:47:53,250
information and the unmoving could

2055
01:47:46,948 --> 01:48:02,519
gradually sample from the moving uhm yes

2056
01:47:53,250 --> 01:48:05,639
so I guess the main problem would be in

2057
01:48:02,520 --> 01:48:08,100
the shader so if you think about what's

2058
01:48:05,639 --> 01:48:16,800
gonna happen in our shader we're gonna

2059
01:48:08,100 --> 01:48:18,510
have to sample somehow and in order to

2060
01:48:16,800 --> 01:48:24,710
sample lighting for the world in general

2061
01:48:18,510 --> 01:48:29,340
like all the grass and all the walls and

2062
01:48:24,710 --> 01:48:31,829
you know the all the stuff that fills up

2063
01:48:29,340 --> 01:48:34,409
most of screen that's gonna want a

2064
01:48:31,829 --> 01:48:35,819
sample from you know a common set of

2065
01:48:34,408 --> 01:48:43,679
light probes that just interpolates

2066
01:48:35,819 --> 01:48:47,399
between so that's all good but if you

2067
01:48:43,679 --> 01:48:49,489
wanted to have accurate sampling of a

2068
01:48:47,399 --> 01:48:52,469
moving object that had its own probe

2069
01:48:49,488 --> 01:48:55,039
what we could do is have a different

2070
01:48:52,469 --> 01:48:57,420
sampler a different pixel shader that

2071
01:48:55,039 --> 01:48:58,889
instead of sampling from eight light

2072
01:48:57,420 --> 01:49:00,329
probes and blending between them it

2073
01:48:58,889 --> 01:49:02,100
actually just sampled from one specific

2074
01:49:00,329 --> 01:49:07,198
light probe that it had the index to

2075
01:49:02,100 --> 01:49:10,530
right and then we would just assign

2076
01:49:07,198 --> 01:49:13,408
certain object to that shader and they

2077
01:49:10,529 --> 01:49:20,158
would do that right now I don't know

2078
01:49:13,408 --> 01:49:22,649
that I actually care about that so I

2079
01:49:20,158 --> 01:49:25,138
don't think we will do that but there's

2080
01:49:22,649 --> 01:49:27,448
no reason you couldn't do it right and

2081
01:49:25,139 --> 01:49:31,560
furthermore they don't actually need to

2082
01:49:27,448 --> 01:49:34,349
be involved in the system at all in any

2083
01:49:31,560 --> 01:49:38,429
other way they can just be a separate

2084
01:49:34,350 --> 01:49:40,050
side band of light indices that don't

2085
01:49:38,429 --> 01:49:42,119
even contribute to the lighting solution

2086
01:49:40,050 --> 01:49:45,420
they could literally just be

2087
01:49:42,119 --> 01:49:49,680
ten moving light probes that you just

2088
01:49:45,420 --> 01:49:52,619
stick to enemies in the hero for more

2089
01:49:49,680 --> 01:49:55,520
accurate lighting or something and they

2090
01:49:52,619 --> 01:49:59,159
just accumulate their results themselves

2091
01:49:55,520 --> 01:50:00,780
right and you could totally do that I

2092
01:49:59,159 --> 01:50:02,519
don't know that we need to do that I

2093
01:50:00,779 --> 01:50:04,739
don't know that there's any real benefit

2094
01:50:02,520 --> 01:50:06,300
to doing that because I don't know that

2095
01:50:04,739 --> 01:50:08,909
we need any kind of special accuracy in

2096
01:50:06,300 --> 01:50:10,440
that way but you could totally there's

2097
01:50:08,909 --> 01:50:16,859
no reason you couldn't do a system like

2098
01:50:10,439 --> 01:50:18,389
that you know be totally fine when and

2099
01:50:16,859 --> 01:50:20,579
how often do we plan to compute the

2100
01:50:18,390 --> 01:50:25,619
light probes well every frame they're

2101
01:50:20,579 --> 01:50:27,059
updated it's it's literally just the

2102
01:50:25,619 --> 01:50:28,739
same lighting we're running right now

2103
01:50:27,060 --> 01:50:35,400
we're just running we're gonna change to

2104
01:50:28,739 --> 01:50:38,159
running these so right now our world

2105
01:50:35,399 --> 01:50:40,799
geometry is also the collection geometry

2106
01:50:38,159 --> 01:50:41,849
the only change we're making is now our

2107
01:50:40,800 --> 01:50:43,890
probes are going to be the collection

2108
01:50:41,850 --> 01:50:47,130
geometry and the world is going to be

2109
01:50:43,890 --> 01:50:48,990
the reflection geometry and so we're

2110
01:50:47,130 --> 01:50:51,420
just gonna be exactly the way we're

2111
01:50:48,989 --> 01:50:54,619
doing it now where we have about I think

2112
01:50:51,420 --> 01:50:57,300
a hundred frame window of averaged out

2113
01:50:54,619 --> 01:51:01,979
values so it's it's you know once a

2114
01:50:57,300 --> 01:51:04,680
second or so at 60 frames a second maybe

2115
01:51:01,979 --> 01:51:06,779
once every two seconds more like the

2116
01:51:04,680 --> 01:51:08,310
lighting has been completely changed but

2117
01:51:06,779 --> 01:51:10,710
it's very gradual so that you don't see

2118
01:51:08,310 --> 01:51:13,500
too much flicker in terms of like lower

2119
01:51:10,710 --> 01:51:14,880
sampling and what that value is that

2120
01:51:13,500 --> 01:51:16,140
will actually set it to eventually I

2121
01:51:14,880 --> 01:51:20,720
don't know we'll have to see what

2122
01:51:16,140 --> 01:51:24,329
happens right but we'll go from there

2123
01:51:20,720 --> 01:51:26,360
but it's continuously updated all the

2124
01:51:24,329 --> 01:51:26,359
time

2125
01:51:33,488 --> 01:51:40,089
how our square roots computed and how

2126
01:51:36,079 --> 01:51:43,090
fast are they the answer depends on how

2127
01:51:40,090 --> 01:51:46,969
accurate you want the square root to be

2128
01:51:43,090 --> 01:51:51,640
so it's pretty similar to division in

2129
01:51:46,969 --> 01:51:51,640
that sense but I'll show you

2130
01:52:01,590 --> 01:52:08,980
all right so I if you take a look if you

2131
01:52:06,189 --> 01:52:11,559
just put in square root to the Intel

2132
01:52:08,979 --> 01:52:15,599
intrinsics guide this is a pretty good

2133
01:52:11,560 --> 01:52:19,600
guide to how fast square root will be

2134
01:52:15,600 --> 01:52:22,240
just as a pure ballpark estimate on the

2135
01:52:19,600 --> 01:52:26,200
CPU side remember the GPU does has its

2136
01:52:22,239 --> 01:52:27,969
own separate speeds for all of the

2137
01:52:26,199 --> 01:52:29,619
operations so it depends if you're

2138
01:52:27,970 --> 01:52:31,840
talking about in a shader you need to

2139
01:52:29,619 --> 01:52:34,899
look up information on the particular

2140
01:52:31,840 --> 01:52:36,279
GPU in question but assuming you're

2141
01:52:34,899 --> 01:52:38,619
talking about a CPU side almost

2142
01:52:36,279 --> 01:52:42,489
everything is x64 unless you're on a

2143
01:52:38,619 --> 01:52:44,409
phone or something which is arm and then

2144
01:52:42,489 --> 01:52:50,109
you need to look up different tables for

2145
01:52:44,409 --> 01:52:54,849
square root right but on here what you

2146
01:52:50,109 --> 01:52:58,689
end up with is when we look at the like

2147
01:52:54,850 --> 01:53:00,039
the available square root of a trans you

2148
01:52:58,689 --> 01:53:02,649
can see there's quite a few different

2149
01:53:00,039 --> 01:53:05,470
ones now most people are not going to

2150
01:53:02,649 --> 01:53:07,179
have avx-512 yet so we're not going to

2151
01:53:05,470 --> 01:53:09,280
talk about things that are up in that

2152
01:53:07,180 --> 01:53:11,380
range let's talk about just stuff that

2153
01:53:09,279 --> 01:53:15,279
you know everybody who plays a game on a

2154
01:53:11,380 --> 01:53:17,829
PC will have right so that's this now

2155
01:53:15,279 --> 01:53:21,789
soon most people will also have this

2156
01:53:17,829 --> 01:53:23,319
right and maybe even that but at the

2157
01:53:21,789 --> 01:53:24,699
moment we're just talking about this and

2158
01:53:23,319 --> 01:53:27,069
you can see like most of these are there

2159
01:53:24,699 --> 01:53:30,039
once you get to this it's you're out

2160
01:53:27,069 --> 01:53:31,899
into huge numbers of benders depending

2161
01:53:30,039 --> 01:53:33,640
on where you're using masking and know

2162
01:53:31,899 --> 01:53:34,899
this is how why you're doing it and blah

2163
01:53:33,640 --> 01:53:37,960
blah blah but you know point being this

2164
01:53:34,899 --> 01:53:41,349
is mostly where we're at so if you take

2165
01:53:37,960 --> 01:53:44,409
a look at these functions there's two

2166
01:53:41,350 --> 01:53:47,980
ways you can compute a square root and

2167
01:53:44,409 --> 01:53:49,869
they're not the same so let's talk about

2168
01:53:47,979 --> 01:53:50,439
just actually computing the square root

2169
01:53:49,869 --> 01:53:54,489
first

2170
01:53:50,439 --> 01:54:01,899
so the packed single-precision square

2171
01:53:54,489 --> 01:54:05,019
root this is 4 so see that SS versus the

2172
01:54:01,899 --> 01:54:06,789
PS there so the difference between the

2173
01:54:05,020 --> 01:54:08,590
SS and the PS is just whether it does

2174
01:54:06,789 --> 01:54:12,159
four at a time which is the square root

2175
01:54:08,590 --> 01:54:14,469
PS or whether it does just one which is

2176
01:54:12,159 --> 01:54:16,960
the square SS right

2177
01:54:14,469 --> 01:54:21,340
now ignore Knights landing Knights

2178
01:54:16,960 --> 01:54:23,590
landing is a completely there's it has

2179
01:54:21,340 --> 01:54:28,029
nothing to do with gaming that's a HPE

2180
01:54:23,590 --> 01:54:29,800
see part that's its al-arabi core thing

2181
01:54:28,029 --> 01:54:33,309
it doesn't have any like just ignore

2182
01:54:29,800 --> 01:54:35,940
that so we're looking at like skylake or

2183
01:54:33,310 --> 01:54:38,770
if that's what the modern chips all are

2184
01:54:35,939 --> 01:54:40,509
or one of these other ones down here if

2185
01:54:38,770 --> 01:54:43,750
you're looking at more compatibility

2186
01:54:40,510 --> 01:54:45,400
with with older machines so most of you

2187
01:54:43,750 --> 01:54:47,649
looking at a skylight core and what you

2188
01:54:45,399 --> 01:54:51,460
can see on a skylight core if you're

2189
01:54:47,649 --> 01:54:55,439
doing a square root of either four or

2190
01:54:51,460 --> 01:54:59,050
just one value is you can expect to pay

2191
01:54:55,439 --> 01:55:01,479
13 cycles from start to end so when you

2192
01:54:59,050 --> 01:55:03,880
issue the square root it will take 13

2193
01:55:01,479 --> 01:55:09,669
processor cycles to get the answer back

2194
01:55:03,880 --> 01:55:14,579
but you can ask for one every three

2195
01:55:09,670 --> 01:55:17,380
cycles so if you start a square root you

2196
01:55:14,579 --> 01:55:19,238
can actually ask for another one three

2197
01:55:17,380 --> 01:55:21,219
cycles later and another one three

2198
01:55:19,238 --> 01:55:23,738
cycles after that and other one three

2199
01:55:21,219 --> 01:55:27,489
cycles after that so in terms of the

2200
01:55:23,738 --> 01:55:30,909
pipelining you can actually potentially

2201
01:55:27,488 --> 01:55:33,189
get a lot more than one done every 13

2202
01:55:30,909 --> 01:55:36,069
cycles you can actually get one done

2203
01:55:33,189 --> 01:55:40,389
every three cycles if you have a bunch

2204
01:55:36,069 --> 01:55:44,349
of them to do right so that's probably

2205
01:55:40,390 --> 01:55:47,410
the more useful number to look at which

2206
01:55:44,350 --> 01:55:51,579
is to say that in a long dependency

2207
01:55:47,409 --> 01:55:53,439
chain where you're pushing a you know a

2208
01:55:51,579 --> 01:55:56,219
huge set of sequential operations

2209
01:55:53,439 --> 01:56:00,399
through and that's all you have to do

2210
01:55:56,219 --> 01:56:03,869
then you know it's 13 cycles but if you

2211
01:56:00,399 --> 01:56:06,279
have lots of things to do on multiple

2212
01:56:03,869 --> 01:56:08,710
things at once you can get some

2213
01:56:06,279 --> 01:56:11,819
pipelining there you're gonna pay closer

2214
01:56:08,710 --> 01:56:14,829
to just the three right so usually in

2215
01:56:11,819 --> 01:56:16,359
heterogeneous computing where you got a

2216
01:56:14,829 --> 01:56:17,769
lot of stuff going on you can you can

2217
01:56:16,359 --> 01:56:19,750
look at this number as being closer to

2218
01:56:17,770 --> 01:56:21,190
what you'll actually receive than this

2219
01:56:19,750 --> 01:56:22,689
number which is more of the worst

2220
01:56:21,189 --> 01:56:23,919
possible case when you don't have

2221
01:56:22,689 --> 01:56:26,129
anything else you can be doing at the

2222
01:56:23,920 --> 01:56:26,130
chip

2223
01:56:26,939 --> 01:56:33,179
so that's basically the idea right and

2224
01:56:30,720 --> 01:56:34,770
you can see that that modern scarlet

2225
01:56:33,180 --> 01:56:38,340
cords can do four of these at once as

2226
01:56:34,770 --> 01:56:41,790
well with no penalty so that's pretty

2227
01:56:38,340 --> 01:56:43,199
cool now that's the most expensive way

2228
01:56:41,789 --> 01:56:47,189
to do it I mean unless you want to do

2229
01:56:43,199 --> 01:56:49,739
double precision which we don't right so

2230
01:56:47,189 --> 01:56:52,019
there you go if you want something

2231
01:56:49,739 --> 01:56:54,359
cheaper you actually have an option and

2232
01:56:52,020 --> 01:56:57,300
that is the reciprocal square root so

2233
01:56:54,359 --> 01:56:59,009
the reciprocal square root does it

2234
01:56:57,300 --> 01:57:01,020
doesn't produce the square root it

2235
01:56:59,010 --> 01:57:02,520
produces one over the square root which

2236
01:57:01,020 --> 01:57:05,430
is like a square root and it divided

2237
01:57:02,520 --> 01:57:06,960
together right why is that instruction

2238
01:57:05,430 --> 01:57:08,670
well it's because normally what you do

2239
01:57:06,960 --> 01:57:10,380
after you square root something is you

2240
01:57:08,670 --> 01:57:13,380
divide by it right it's a normalization

2241
01:57:10,380 --> 01:57:15,900
it's usually what you're doing so they

2242
01:57:13,380 --> 01:57:17,400
do both of those together so you're

2243
01:57:15,899 --> 01:57:21,469
actually saving the divine and the

2244
01:57:17,399 --> 01:57:25,889
square root doing it in one right and

2245
01:57:21,470 --> 01:57:27,539
when you do this the only caveat you can

2246
01:57:25,890 --> 01:57:29,430
see how fast it is it's actually it's

2247
01:57:27,539 --> 01:57:32,180
latency for bus throughput one you can

2248
01:57:29,430 --> 01:57:34,920
do you can issue one every cycle right

2249
01:57:32,180 --> 01:57:37,619
but what you we can see here is that

2250
01:57:34,920 --> 01:57:41,069
reciprocal square root it doesn't quite

2251
01:57:37,619 --> 01:57:45,300
give you the right answer right so the

2252
01:57:41,069 --> 01:57:49,559
error is you know proportional to this

2253
01:57:45,300 --> 01:57:53,070
value here which is what half half the

2254
01:57:49,560 --> 01:57:56,700
bits are wrong something like that up to

2255
01:57:53,069 --> 01:58:00,960
half the bits could be wrong I'm just

2256
01:57:56,699 --> 01:58:03,989
thinking there's a 24 bit mantissa and a

2257
01:58:00,960 --> 01:58:05,670
floating point value so 1.5 times two to

2258
01:58:03,989 --> 01:58:10,349
the twelfth negative twelve is like half

2259
01:58:05,670 --> 01:58:12,210
the bits I guess it's 1.5 so it's a

2260
01:58:10,350 --> 01:58:17,400
little more than half the bits maybe

2261
01:58:12,210 --> 01:58:20,730
it's thirty thirteen of the 24 bits I

2262
01:58:17,399 --> 01:58:21,750
don't know so I'm not really sure how to

2263
01:58:20,729 --> 01:58:23,609
read that I'm not a floating point

2264
01:58:21,750 --> 01:58:25,560
accuracy kind of guy otherwise I would

2265
01:58:23,609 --> 01:58:28,679
have a very strong statement about what

2266
01:58:25,560 --> 01:58:30,600
that was I'm not the point being if you

2267
01:58:28,680 --> 01:58:32,220
just needed to be in the ballpark like

2268
01:58:30,600 --> 01:58:36,630
I'm trying to normalize this thing more

2269
01:58:32,220 --> 01:58:39,270
or less then actually you can do it even

2270
01:58:36,630 --> 01:58:40,869
faster right so rather than waiting

2271
01:58:39,270 --> 01:58:42,370
three cycles

2272
01:58:40,869 --> 01:58:44,229
to issue the next one you can issue it

2273
01:58:42,369 --> 01:58:47,340
every cycle you can issue a new one and

2274
01:58:44,229 --> 01:58:50,589
they still take forward to come back but

2275
01:58:47,340 --> 01:58:52,840
hey that's better than 13 right as well

2276
01:58:50,590 --> 01:58:57,340
so even if you have to wait for the

2277
01:58:52,840 --> 01:59:00,010
result it's okay so in the old days of

2278
01:58:57,340 --> 01:59:03,100
square u square root used to be awful

2279
01:59:00,010 --> 01:59:05,170
you really didn't want to do it and in

2280
01:59:03,100 --> 01:59:08,860
fact we did all kinds of hacks to not do

2281
01:59:05,170 --> 01:59:15,190
it nowadays a square root is kind of

2282
01:59:08,859 --> 01:59:17,859
free like it's not free but it's really

2283
01:59:15,189 --> 01:59:19,509
low on the set of things you're worried

2284
01:59:17,859 --> 01:59:21,699
about whereas before it used to be

2285
01:59:19,510 --> 01:59:22,840
really high on the set of things you

2286
01:59:21,699 --> 01:59:25,449
were worried about and so there was

2287
01:59:22,840 --> 01:59:27,369
definitely a mental shift there when CPU

2288
01:59:25,449 --> 01:59:30,010
started getting fast reciprocal square

2289
01:59:27,369 --> 01:59:31,569
root because you can tighten and they

2290
01:59:30,010 --> 01:59:33,520
now have fast regular square root too

2291
01:59:31,569 --> 01:59:38,049
right

2292
01:59:33,520 --> 01:59:38,710
so you've got both of those things at

2293
01:59:38,050 --> 01:59:44,230
your disposal

2294
01:59:38,710 --> 01:59:47,409
and if you want to you can also most of

2295
01:59:44,229 --> 01:59:50,019
these routines that give you approximate

2296
01:59:47,409 --> 01:59:52,029
results they're set up to also allow you

2297
01:59:50,020 --> 01:59:54,310
to refine the results so if you needed a

2298
01:59:52,029 --> 01:59:57,689
better answer than this you could

2299
01:59:54,310 --> 02:00:04,050
usually do like a newton-raphson a style

2300
01:59:57,689 --> 02:00:06,189
refinement step if you want right and

2301
02:00:04,050 --> 02:00:07,630
again this all just depends but whether

2302
02:00:06,189 --> 02:00:10,929
that's faster than just doing the

2303
02:00:07,630 --> 02:00:13,650
correct thing now that it's they're hard

2304
02:00:10,930 --> 02:00:13,650
to say right

2305
02:00:16,289 --> 02:00:21,609
scrt dependency a Visual Studio feature

2306
02:00:18,609 --> 02:00:23,259
only or do other compilers such as GCC

2307
02:00:21,609 --> 02:00:25,949
and clang habit 2 also does the

2308
02:00:23,260 --> 02:00:30,280
dependency inclusive of us or just see

2309
02:00:25,949 --> 02:00:33,309
actually it's it's arguably even worse

2310
02:00:30,279 --> 02:00:35,829
in GCC in LLVM but it really depends on

2311
02:00:33,310 --> 02:00:40,120
what you're doing what I would say is

2312
02:00:35,829 --> 02:00:43,750
that compilers in general have a very

2313
02:00:40,119 --> 02:00:47,260
bad habit of relying on their runtime

2314
02:00:43,750 --> 02:00:51,670
library to produce code I personally

2315
02:00:47,260 --> 02:00:56,079
think that if a compiler if you do not

2316
02:00:51,670 --> 02:01:00,550
if you do not pound include anything in

2317
02:00:56,079 --> 02:01:03,399
your C program at all a compiler should

2318
02:01:00,550 --> 02:01:05,440
produce zero dependencies that is not

2319
02:01:03,399 --> 02:01:07,439
what happens compilers actually produce

2320
02:01:05,439 --> 02:01:11,019
a ton of dependencies to their own CRT

2321
02:01:07,439 --> 02:01:19,809
stack probe calls memset calls mem copy

2322
02:01:11,020 --> 02:01:24,820
calls Frank stack frame checking C++

2323
02:01:19,810 --> 02:01:26,680
static initializer walking it's awful in

2324
02:01:24,819 --> 02:01:28,059
my opinion that should be completely

2325
02:01:26,680 --> 02:01:31,060
unacceptable like it shouldn't you

2326
02:01:28,060 --> 02:01:34,510
should be absolutely not allowed to

2327
02:01:31,060 --> 02:01:40,060
release a C compiler or a C++ compiler

2328
02:01:34,510 --> 02:01:41,949
that with no includes and no libs when

2329
02:01:40,060 --> 02:01:43,360
you just compile a program somehow it

2330
02:01:41,949 --> 02:01:47,949
produces a dependency that should be

2331
02:01:43,359 --> 02:01:50,559
completely off the table sadly it's not

2332
02:01:47,949 --> 02:01:53,769
so what you will see is that a lot of

2333
02:01:50,560 --> 02:01:57,250
compilers both Visual Studio GCC and

2334
02:01:53,770 --> 02:01:59,380
clang all of them insert a ton of

2335
02:01:57,250 --> 02:02:00,760
garbage into the compiled code that you

2336
02:01:59,380 --> 02:02:02,529
then have to produce your own

2337
02:02:00,760 --> 02:02:05,500
implementation for if you want to link

2338
02:02:02,529 --> 02:02:06,969
without this runtime library I wish that

2339
02:02:05,500 --> 02:02:07,899
was just considered completely

2340
02:02:06,970 --> 02:02:09,430
unacceptable

2341
02:02:07,899 --> 02:02:12,219
like you wouldn't be able to even pass a

2342
02:02:09,430 --> 02:02:18,070
single benchmark compiler benchmark if

2343
02:02:12,220 --> 02:02:20,520
you did that sadly it's not and so we're

2344
02:02:18,069 --> 02:02:20,519
stuck with it

2345
02:02:28,529 --> 02:02:32,609
I didn't really see this pop up before

2346
02:02:30,029 --> 02:02:35,248
do you think using direct2d for a 2-d

2347
02:02:32,609 --> 02:02:37,078
game is a good idea if I want to

2348
02:02:35,248 --> 02:02:39,649
implement it from scratch or would you

2349
02:02:37,078 --> 02:02:45,840
rather use the x11 12 today

2350
02:02:39,649 --> 02:02:47,969
so it's direct 2d I don't even know is

2351
02:02:45,840 --> 02:02:50,130
that still around I didn't even realize

2352
02:02:47,969 --> 02:02:52,050
that was still around but maybe it is I

2353
02:02:50,130 --> 02:02:55,469
wouldn't go anywhere near direct2d it's

2354
02:02:52,050 --> 02:03:04,440
a complete pile of garbage I I would

2355
02:02:55,469 --> 02:03:05,578
definitely just use the x11 you probably

2356
02:03:04,439 --> 02:03:06,779
know ver this last week but how do you

2357
02:03:05,578 --> 02:03:08,788
plan to make this faster than what we

2358
02:03:06,779 --> 02:03:11,578
had before there's actually two ways

2359
02:03:08,788 --> 02:03:14,158
it'll be much faster one we can use mint

2360
02:03:11,578 --> 02:03:17,849
many fewer sample points which is

2361
02:03:14,158 --> 02:03:19,649
critical and two we can compute those

2362
02:03:17,849 --> 02:03:21,929
sample points faster because we don't

2363
02:03:19,649 --> 02:03:24,058
have to do stuff like looking at when

2364
02:03:21,929 --> 02:03:26,248
something hits a face which sample point

2365
02:03:24,059 --> 02:03:29,699
it's using so our ray casting and speed

2366
02:03:26,248 --> 02:03:32,099
up dramatically as well so I think we'll

2367
02:03:29,698 --> 02:03:33,658
be able to do better now it may not be

2368
02:03:32,099 --> 02:03:35,940
the case that it gets it may not get

2369
02:03:33,658 --> 02:03:39,228
that much faster on the Ray casting side

2370
02:03:35,939 --> 02:03:42,558
because of the expensive voxel lookup

2371
02:03:39,229 --> 02:03:42,559
but we'll see

2372
02:03:53,020 --> 02:03:57,340
hey I love the trick with the hot

2373
02:03:54,729 --> 02:03:59,339
learning but having a hard time grasping

2374
02:03:57,340 --> 02:04:02,069
the general idea

2375
02:03:59,340 --> 02:04:06,789
could you make a kind of generic

2376
02:04:02,069 --> 02:04:09,130
overlooking explanation I mean I

2377
02:04:06,789 --> 02:04:11,319
explained it and implemented it in like

2378
02:04:09,130 --> 02:04:13,300
one video so I'm not sure how I would

2379
02:04:11,319 --> 02:04:15,429
make something more straightforward than

2380
02:04:13,300 --> 02:04:19,020
that I mean it's literally like one

2381
02:04:15,430 --> 02:04:24,610
video where I like explain it and

2382
02:04:19,020 --> 02:04:27,700
implemented it right so I'm not really

2383
02:04:24,609 --> 02:04:33,189
sure what I could do to be more clear

2384
02:04:27,699 --> 02:04:35,050
than that and asked for whether it works

2385
02:04:33,189 --> 02:04:36,519
with third-party libraries I mean that

2386
02:04:35,050 --> 02:04:44,289
would completely depend on the

2387
02:04:36,520 --> 02:04:48,640
third-party library right again in that

2388
02:04:44,289 --> 02:04:50,649
way that I find most people's modern way

2389
02:04:48,640 --> 02:04:53,020
of programming to be very bad I would

2390
02:04:50,649 --> 02:04:54,939
consider it a bare minimum that any

2391
02:04:53,020 --> 02:04:57,130
library you ship should of course work

2392
02:04:54,939 --> 02:04:59,529
with hot loading I mean that should just

2393
02:04:57,130 --> 02:05:01,480
be a given because as long as that meant

2394
02:04:59,529 --> 02:05:03,460
as long as that library is memory

2395
02:05:01,479 --> 02:05:04,989
conscious and allows the user to pass in

2396
02:05:03,460 --> 02:05:07,149
the memory it wants it to use it will

2397
02:05:04,989 --> 02:05:09,369
just work with hot loading but of course

2398
02:05:07,149 --> 02:05:10,750
most modern libraries are written just

2399
02:05:09,369 --> 02:05:12,189
anything-goes let's call malloc

2400
02:05:10,750 --> 02:05:13,750
everywhere and who knows where the

2401
02:05:12,189 --> 02:05:16,869
memory came from or where it's going and

2402
02:05:13,750 --> 02:05:19,539
at that point yeah sure you lose hot

2403
02:05:16,869 --> 02:05:23,920
loading you gain a bunch of

2404
02:05:19,539 --> 02:05:25,659
fragmentation problems it's just yeah

2405
02:05:23,920 --> 02:05:28,000
moderate code that you find an internet

2406
02:05:25,659 --> 02:05:30,489
usually sucks and once in a while it's

2407
02:05:28,000 --> 02:05:33,670
not bad but usually it's terrible so the

2408
02:05:30,489 --> 02:05:35,859
answer to normally does X where X is a

2409
02:05:33,670 --> 02:05:37,869
good programming thing work with Y where

2410
02:05:35,859 --> 02:05:39,549
Y is a commonly available third-party

2411
02:05:37,869 --> 02:05:42,909
library the answer is usually no because

2412
02:05:39,550 --> 02:05:45,970
Y was usually written poorly whether SM

2413
02:05:42,909 --> 02:05:49,050
s FM L is in that category not I don't

2414
02:05:45,970 --> 02:05:49,050
know because I've never looked at it

2415
02:06:03,409 --> 02:06:12,239
and by the way the reason I said dx11

2416
02:06:07,350 --> 02:06:16,590
and not dx12 is because dx12 is not very

2417
02:06:12,239 --> 02:06:20,099
widely supported unless they've changed

2418
02:06:16,590 --> 02:06:27,980
things recently if you ship on dx12 you

2419
02:06:20,100 --> 02:06:31,680
can only run on Windows 10 so that's it

2420
02:06:27,979 --> 02:06:33,449
you really can't use it unless you don't

2421
02:06:31,680 --> 02:06:36,600
want to target Windows 7 and Windows 8

2422
02:06:33,449 --> 02:06:40,340
which you know it's like 40% of the

2423
02:06:36,600 --> 02:06:44,700
existing market I think so

2424
02:06:40,340 --> 02:06:46,260
you know dx12 is a ways away I think in

2425
02:06:44,699 --> 02:06:48,989
terms of being something you could

2426
02:06:46,260 --> 02:06:51,420
cleanly target for it I mean cuz you

2427
02:06:48,989 --> 02:06:54,859
talk about 2d game right you know if

2428
02:06:51,420 --> 02:06:59,550
you're talking about the latest game

2429
02:06:54,859 --> 02:07:01,529
from you know mr. render land or

2430
02:06:59,550 --> 02:07:02,940
whatever where it's like requires the

2431
02:07:01,529 --> 02:07:04,889
latest possible machine then maybe

2432
02:07:02,939 --> 02:07:13,469
requiring Windows 10 doesn't matter

2433
02:07:04,890 --> 02:07:14,820
because you figure you you know you know

2434
02:07:13,470 --> 02:07:23,449
that everyone has a really new machine

2435
02:07:14,819 --> 02:07:23,449
right but you know that that's just not

2436
02:07:24,319 --> 02:07:29,549
it's just not feasible for a 2-d 2-d

2437
02:07:26,579 --> 02:07:30,750
game wants to be able to run when it

2438
02:07:29,550 --> 02:07:33,090
comes to ship time you want to be able

2439
02:07:30,750 --> 02:07:34,739
to like turn off features and turn off

2440
02:07:33,090 --> 02:07:36,420
stuff and have it run on pretty low-end

2441
02:07:34,739 --> 02:07:39,449
stuff right like why wouldn't you

2442
02:07:36,420 --> 02:07:43,310
because it's 2d it shouldn't require the

2443
02:07:39,449 --> 02:07:43,309
latest possible system you know

2444
02:07:45,179 --> 02:07:49,100
I guess that's what I'd say

2445
02:07:53,069 --> 02:07:57,219
so yeah so I don't think director well

2446
02:07:55,420 --> 02:08:00,730
directory 12 was really a viable thing

2447
02:07:57,220 --> 02:08:02,500
to ship a game on right now unless

2448
02:08:00,729 --> 02:08:04,629
you're really really pushing people to

2449
02:08:02,500 --> 02:08:06,909
adopt the very latest of everything and

2450
02:08:04,630 --> 02:08:10,659
a 2-d game really shouldn't probably be

2451
02:08:06,909 --> 02:08:14,889
doing that I guess I'd say it in five

2452
02:08:10,659 --> 02:08:17,680
years or so I expect that number will

2453
02:08:14,890 --> 02:08:22,630
start to drop pretty well so you know

2454
02:08:17,680 --> 02:08:25,720
you might be at a case where 90% of the

2455
02:08:22,630 --> 02:08:30,630
game community that you might be

2456
02:08:25,720 --> 02:08:33,760
targeting market out there those are

2457
02:08:30,630 --> 02:08:36,400
probably going to be running Windows 10

2458
02:08:33,760 --> 02:08:37,810
you know and at that point it's probably

2459
02:08:36,399 --> 02:08:39,399
fair to say look I don't care about the

2460
02:08:37,810 --> 02:08:40,990
other 5% of the market or something or

2461
02:08:39,399 --> 02:08:43,199
10% of the market I could I can live on

2462
02:08:40,989 --> 02:08:45,489
90% just fine

2463
02:08:43,199 --> 02:08:48,489
N+ how many games do people with

2464
02:08:45,489 --> 02:08:52,019
machines that old really buy anyway you

2465
02:08:48,489 --> 02:08:55,239
know so at some point it becomes fine

2466
02:08:52,020 --> 02:08:59,050
much like direct that same thing was

2467
02:08:55,239 --> 02:09:01,689
true of DirectX 11 right at one point it

2468
02:08:59,050 --> 02:09:05,500
was tied completely to you know Windows

2469
02:09:01,689 --> 02:09:06,489
7 or something and so you'd be like well

2470
02:09:05,500 --> 02:09:08,350
there's a lot of machines running

2471
02:09:06,489 --> 02:09:11,519
Windows XP so I'm not gonna do it or

2472
02:09:08,350 --> 02:09:14,140
whatever but eventually everyone kind of

2473
02:09:11,520 --> 02:09:16,300
finally kind of regretting the moves up

2474
02:09:14,140 --> 02:09:19,030
to Microsoft's latest and worst

2475
02:09:16,300 --> 02:09:24,480
operating system and then you know you

2476
02:09:19,029 --> 02:09:24,479
can use the next revision up and so on

2477
02:09:37,010 --> 02:09:41,750
do you have an opinion on si callbacks

2478
02:09:39,199 --> 02:09:43,789
and void star user data do you know any

2479
02:09:41,750 --> 02:09:49,729
alternatives do you have an opinion on

2480
02:09:43,789 --> 02:09:51,710
GCC's nested functions I am fine with si

2481
02:09:49,729 --> 02:09:55,069
callbacks and void star a user data I

2482
02:09:51,710 --> 02:09:56,689
like them and I would say there are

2483
02:09:55,069 --> 02:10:01,219
plenty of alternatives but none of them

2484
02:09:56,689 --> 02:10:02,809
are as good GCC's nested functions

2485
02:10:01,220 --> 02:10:09,880
aren't something that I've really used

2486
02:10:02,810 --> 02:10:12,380
myself so you know I probably wouldn't

2487
02:10:09,880 --> 02:10:18,380
say anything definitive one way or the

2488
02:10:12,380 --> 02:10:19,609
other I'm pretty early on his dream my

2489
02:10:18,380 --> 02:10:24,440
sound was scratchy did you end up making

2490
02:10:19,609 --> 02:10:26,539
a separate thread um so we aren't really

2491
02:10:24,439 --> 02:10:32,299
super concerned with sound when we go to

2492
02:10:26,539 --> 02:10:34,640
actually finish off everything and want

2493
02:10:32,300 --> 02:10:37,640
to start doing testing machines and

2494
02:10:34,640 --> 02:10:42,320
stuff we will probably do some changes

2495
02:10:37,640 --> 02:10:46,750
to the sound but they probably wouldn't

2496
02:10:42,319 --> 02:10:54,769
involve replacing D sound for example I

2497
02:10:46,750 --> 02:10:57,560
have a Windows 10 machine at work the

2498
02:10:54,770 --> 02:11:03,770
only thing that works correctly on it is

2499
02:10:57,560 --> 02:11:07,090
direct sound where sappy fails WDM fails

2500
02:11:03,770 --> 02:11:11,420
in high-end audio suffer this is reaper

2501
02:11:07,090 --> 02:11:16,400
right which is very good at audio only

2502
02:11:11,420 --> 02:11:18,199
direct sound works right so I think

2503
02:11:16,399 --> 02:11:19,939
shipping on something that doesn't work

2504
02:11:18,199 --> 02:11:21,590
on direct sound is a probably a big

2505
02:11:19,939 --> 02:11:25,669
mistake because almost nothing ever

2506
02:11:21,590 --> 02:11:27,739
seems to work on Windows sound wise they

2507
02:11:25,670 --> 02:11:28,970
introduced it you know they took a page

2508
02:11:27,738 --> 02:11:32,109
from the Linux playbook they introduced

2509
02:11:28,970 --> 02:11:34,340
seven different API is for sound mixing

2510
02:11:32,109 --> 02:11:36,889
doesn't make any sense there's no reason

2511
02:11:34,340 --> 02:11:38,840
to do that but they did it and most of

2512
02:11:36,890 --> 02:11:40,460
them don't work they randomly work they

2513
02:11:38,840 --> 02:11:45,199
randomly don't I don't know how you get

2514
02:11:40,460 --> 02:11:48,109
in that situation but they do and so you

2515
02:11:45,199 --> 02:11:49,760
know D sound and wave out or like the

2516
02:11:48,109 --> 02:11:50,899
two things you can count on that seem to

2517
02:11:49,760 --> 02:11:54,530
always work

2518
02:11:50,899 --> 02:11:56,149
everything else may just fail nothing

2519
02:11:54,529 --> 02:11:59,960
about sounding bad I'm I'll just fail

2520
02:11:56,149 --> 02:12:04,159
and who knows why I think it has to do

2521
02:11:59,960 --> 02:12:05,750
with whether it's the native whether

2522
02:12:04,159 --> 02:12:08,180
it's like a modern Realtek shape or like

2523
02:12:05,750 --> 02:12:10,520
you could be plug in a USB external

2524
02:12:08,180 --> 02:12:12,260
sound thing or something then suddenly

2525
02:12:10,520 --> 02:12:15,350
it only has direct sound emulation or

2526
02:12:12,260 --> 02:12:17,180
something I don't know and threading

2527
02:12:15,350 --> 02:12:20,480
usually has nothing to do with updating

2528
02:12:17,180 --> 02:12:22,760
the sound if you need to just add some

2529
02:12:20,479 --> 02:12:27,250
look ahead some more padding to your

2530
02:12:22,760 --> 02:12:27,250
sound then you won't get skipping right

2531
02:12:39,250 --> 02:12:42,579
about hot loading gang code is it a

2532
02:12:41,109 --> 02:12:51,189
common thing between game programmers I

2533
02:12:42,579 --> 02:12:54,219
would say yes I feel like most I would

2534
02:12:51,189 --> 02:12:57,369
say most games need some kind of hot hot

2535
02:12:54,219 --> 02:13:00,010
loading so usually games take one of two

2536
02:12:57,369 --> 02:13:03,250
tax either the hot load real code or

2537
02:13:00,010 --> 02:13:05,079
they interpret script code so that you

2538
02:13:03,250 --> 02:13:07,510
know that's still hot loading right it's

2539
02:13:05,079 --> 02:13:09,309
just not compiled but you usually I'm

2540
02:13:07,510 --> 02:13:11,619
one of the other because the turnaround

2541
02:13:09,310 --> 02:13:14,830
time is too slow otherwise for some of

2542
02:13:11,619 --> 02:13:17,349
the things you want to do and turnaround

2543
02:13:14,829 --> 02:13:18,789
time can get worse - and in certain game

2544
02:13:17,350 --> 02:13:20,199
engines take forever to build and

2545
02:13:18,789 --> 02:13:21,609
startup and stuff like that so at that

2546
02:13:20,198 --> 02:13:23,619
point you really really need ways to

2547
02:13:21,609 --> 02:13:25,689
build tiny parts of them and reload them

2548
02:13:23,619 --> 02:13:27,550
in you could argue that's because the

2549
02:13:25,689 --> 02:13:30,849
rest of the engines architecture is bad

2550
02:13:27,550 --> 02:13:35,170
but hey you know unity and unreal or

2551
02:13:30,850 --> 02:13:37,210
both giant pigs so you know if you're

2552
02:13:35,170 --> 02:13:39,310
using engines like you really need a way

2553
02:13:37,210 --> 02:13:41,409
to interpret or hot load code in those

2554
02:13:39,310 --> 02:13:45,060
so you can't be restarting everything

2555
02:13:41,409 --> 02:13:45,059
every time it's not it's not feasible

2556
02:13:48,719 --> 02:13:55,659
stretched di bits has started failing

2557
02:13:52,300 --> 02:14:02,710
after changing the resolution to 960 by

2558
02:13:55,659 --> 02:14:09,219
540 so stretch di bits is not going to

2559
02:14:02,710 --> 02:14:11,980
fail unless something failed earlier on

2560
02:14:09,219 --> 02:14:14,109
to get appropriate surfaces so I I don't

2561
02:14:11,979 --> 02:14:15,968
think that's what's probably failing I

2562
02:14:14,109 --> 02:14:20,639
think you're probably seeing a fail

2563
02:14:15,969 --> 02:14:20,640
seeing a failure somewhere else

2564
02:14:27,689 --> 02:14:32,459
would you recommend any free windows

2565
02:14:29,849 --> 02:14:36,918
debuggers no I would not however I would

2566
02:14:32,458 --> 02:14:47,038
recommend going to remedied HIO and

2567
02:14:36,918 --> 02:14:48,988
paying $20 for this one I guess I would

2568
02:14:47,038 --> 02:14:51,929
say if you cannot afford $20 for a

2569
02:14:48,988 --> 02:14:56,368
debugger I guess I would ask how did you

2570
02:14:51,929 --> 02:14:59,389
afford a computer very expensive

2571
02:14:56,368 --> 02:15:02,998
maybe it was gifted to you in which case

2572
02:14:59,389 --> 02:15:05,489
maybe ask whoever that is to gift you a

2573
02:15:02,998 --> 02:15:11,368
remedy BG licensed because the $20 is

2574
02:15:05,488 --> 02:15:16,368
it's pretty darn cheap and it's been

2575
02:15:11,368 --> 02:15:24,179
moving along really really well so

2576
02:15:16,368 --> 02:15:27,058
that's what I would recommend there's

2577
02:15:24,179 --> 02:15:29,099
still some features and that are haven't

2578
02:15:27,059 --> 02:15:33,809
been added to remedy BG yet so it's not

2579
02:15:29,099 --> 02:15:36,719
quite as full featured as you know dev

2580
02:15:33,809 --> 02:15:38,550
studio is but it's it's way better than

2581
02:15:36,719 --> 02:15:41,550
the dev studio now in terms of like ease

2582
02:15:38,550 --> 02:15:45,229
of use it's much much faster startup

2583
02:15:41,550 --> 02:15:47,489
much much more quickly and refreshes

2584
02:15:45,229 --> 02:15:50,219
infinitely faster so it's just more

2585
02:15:47,488 --> 02:15:52,049
pleasant to use and at the rate that

2586
02:15:50,219 --> 02:15:55,469
development on it's been going I would

2587
02:15:52,050 --> 02:15:57,179
say that I doubt you know I doubt it's

2588
02:15:55,469 --> 02:16:00,929
gonna be like five years before it

2589
02:15:57,179 --> 02:16:02,038
catches up in terms of features to a

2590
02:16:00,929 --> 02:16:03,090
visual studio because video so he

2591
02:16:02,038 --> 02:16:07,380
doesn't have that many video game

2592
02:16:03,090 --> 02:16:10,708
features so I guess I would say it's

2593
02:16:07,380 --> 02:16:13,019
probably going to catch up sooner than

2594
02:16:10,708 --> 02:16:14,368
that really the thing that's missing

2595
02:16:13,019 --> 02:16:18,659
right now is just like breakpoints

2596
02:16:14,368 --> 02:16:20,038
support and and mini dumps I guess those

2597
02:16:18,658 --> 02:16:21,598
are the two things doesn't support mini

2598
02:16:20,038 --> 02:16:24,179
dumps it doesn't support like advanced

2599
02:16:21,599 --> 02:16:27,439
breakpoints like data data and

2600
02:16:24,179 --> 02:16:27,439
conditional breakpoints

2601
02:16:30,798 --> 02:16:34,468
I'm trying to think of other things

2602
02:16:32,789 --> 02:16:36,210
Visual Studio can do that it can't do it

2603
02:16:34,468 --> 02:16:42,328
but I can't I mean I think that's it

2604
02:16:36,209 --> 02:16:44,398
really so it's closed and I don't know

2605
02:16:42,328 --> 02:16:47,519
George is on the chat right now it's X

2606
02:16:44,398 --> 02:16:49,519
13 pixels I don't know what his plans

2607
02:16:47,519 --> 02:16:55,158
are like I don't know when he's gonna

2608
02:16:49,519 --> 02:16:58,349
try to go for a feature parity there but

2609
02:16:55,158 --> 02:17:01,529
those things do take a little bit of

2610
02:16:58,349 --> 02:17:03,269
work to implement but you know compared

2611
02:17:01,529 --> 02:17:12,840
to what he's already gotten done they're

2612
02:17:03,269 --> 02:17:15,269
not that big you know so I wouldn't be

2613
02:17:12,840 --> 02:17:16,679
surprised to see those things come

2614
02:17:15,269 --> 02:17:18,658
online sooner rather than later actually

2615
02:17:16,679 --> 02:17:20,699
I mean just based on how much has gotten

2616
02:17:18,658 --> 02:17:22,849
done in the past you know six months or

2617
02:17:20,699 --> 02:17:22,849
so

2618
02:17:31,468 --> 02:17:36,238
have you ever used to lemon tree to

2619
02:17:33,728 --> 02:17:39,579
bugger if you're talking about Rad's

2620
02:17:36,238 --> 02:17:46,510
telemetry it's not a debugger it's a

2621
02:17:39,579 --> 02:17:47,648
performance analyzer unless i'm unless

2622
02:17:46,510 --> 02:17:48,849
you're talking about you might be you're

2623
02:17:47,648 --> 02:17:50,619
talking about some other telemetry I

2624
02:17:48,849 --> 02:17:56,738
don't know what do you tell me give me a

2625
02:17:50,620 --> 02:17:58,000
link to what you're talking about when I

2626
02:17:56,738 --> 02:18:00,159
look for ways of looking at the vision

2627
02:17:58,000 --> 02:18:01,898
of objects in a game eg for ray casting

2628
02:18:00,159 --> 02:18:04,299
some sort of graph or tree is always for

2629
02:18:01,898 --> 02:18:06,519
as essential are there other ways of

2630
02:18:04,299 --> 02:18:08,079
doing such lookups efficiently it seems

2631
02:18:06,519 --> 02:18:12,450
like an array sorted by distance from

2632
02:18:08,079 --> 02:18:12,450
the origin and doing lookups and ranges

2633
02:18:21,149 --> 02:18:25,440
so I guess what I would say is

2634
02:18:35,629 --> 02:18:43,489
you're always going to have some kind of

2635
02:18:38,389 --> 02:18:46,219
spatial partition but the type of

2636
02:18:43,489 --> 02:18:49,280
spatial partition is very widely varying

2637
02:18:46,219 --> 02:18:51,739
and so the thing that you suggested

2638
02:18:49,280 --> 02:18:54,650
which is an array sorted by the distance

2639
02:18:51,739 --> 02:18:59,119
from the origin would be totally valid

2640
02:18:54,649 --> 02:19:01,909
that's just a spatial partition where

2641
02:18:59,120 --> 02:19:05,690
the partitioning is a binary partition

2642
02:19:01,909 --> 02:19:11,510
split in rings around the origin it's a

2643
02:19:05,690 --> 02:19:14,750
binary tree right of splits where the

2644
02:19:11,510 --> 02:19:22,729
split is a sphere centered at the origin

2645
02:19:14,750 --> 02:19:28,819
with a particular radius right I don't

2646
02:19:22,729 --> 02:19:31,869
know I don't know really how to add

2647
02:19:28,819 --> 02:19:31,869
anything else to it

2648
02:19:45,870 --> 02:19:50,970
oh wow I'm just looking to chat George

2649
02:19:49,290 --> 02:19:56,540
says data breakpoints just got finished

2650
02:19:50,969 --> 02:19:58,829
up today really that's pretty huge

2651
02:19:56,540 --> 02:20:00,720
because like I was just saying like the

2652
02:19:58,829 --> 02:20:02,069
only things you can really point to I

2653
02:20:00,719 --> 02:20:03,659
mean someone else correct me if I'm

2654
02:20:02,069 --> 02:20:06,379
wrong because you know I don't know

2655
02:20:03,659 --> 02:20:12,478
everything about visual studio debugger

2656
02:20:06,379 --> 02:20:14,099
but the only things I could really think

2657
02:20:12,478 --> 02:20:15,449
of that you couldn't do in remedy that

2658
02:20:14,100 --> 02:20:17,069
you could do in visual studio was like

2659
02:20:15,450 --> 02:20:18,000
breakpoint stuff and so if Dena

2660
02:20:17,069 --> 02:20:19,529
breakpoints are in there then that

2661
02:20:18,000 --> 02:20:21,799
really means conditional breakpoints are

2662
02:20:19,530 --> 02:20:27,680
the only thing that aren't in there yet

2663
02:20:21,799 --> 02:20:27,679
that'd be about it so it's getting close

2664
02:20:31,840 --> 02:20:38,780
l space yl how do you run the back

2665
02:20:36,440 --> 02:20:41,149
compiler platforms I don't I just have a

2666
02:20:38,780 --> 02:20:49,670
build for every platform so I have like

2667
02:20:41,149 --> 02:20:51,770
a dot bat and a dot Sh and so on the

2668
02:20:49,670 --> 02:20:53,840
sequel says the other thing you can do

2669
02:20:51,771 --> 02:20:56,750
in Visual Studio is have your debugger

2670
02:20:53,840 --> 02:21:00,681
not work properly correct you can also

2671
02:20:56,750 --> 02:21:02,719
have it be very slow and and George

2672
02:21:00,681 --> 02:21:09,021
hasn't implemented that either so

2673
02:21:02,719 --> 02:21:10,340
thankfully about MIT map generation I

2674
02:21:09,021 --> 02:21:12,829
was wondering why you decided to compute

2675
02:21:10,340 --> 02:21:14,960
on CPU and not GPU in addition why'd you

2676
02:21:12,829 --> 02:21:16,101
decide to go with a simple box filter

2677
02:21:14,959 --> 02:21:24,259
and not something smoother or like a

2678
02:21:16,101 --> 02:21:26,510
10th filter so there's a lot you could

2679
02:21:24,260 --> 02:21:28,940
say about that let me start with the

2680
02:21:26,510 --> 02:21:31,760
second point first the reason I don't

2681
02:21:28,940 --> 02:21:33,290
use the reason I tend to use a box

2682
02:21:31,760 --> 02:21:34,640
filter when computing MIT maps is

2683
02:21:33,290 --> 02:21:36,920
because it means you don't have to turn

2684
02:21:34,640 --> 02:21:42,020
on trilinear filtering and that's really

2685
02:21:36,920 --> 02:21:45,409
it because the GPU when it subsamples

2686
02:21:42,021 --> 02:21:48,891
the MIT map it's doing a box filter so

2687
02:21:45,409 --> 02:21:51,560
if you don't do a box filter then your

2688
02:21:48,890 --> 02:21:55,369
result of decimating the MIT map of

2689
02:21:51,560 --> 02:21:59,029
decimating the texels by two won't agree

2690
02:21:55,370 --> 02:22:04,790
with the GPUs decimation by two and you

2691
02:21:59,030 --> 02:22:10,550
might get some popping there right so if

2692
02:22:04,790 --> 02:22:15,170
you choose to turn on some kind of other

2693
02:22:10,549 --> 02:22:16,430
filter you have to decide what what your

2694
02:22:15,170 --> 02:22:17,510
what your solution that proms gonna be

2695
02:22:16,431 --> 02:22:20,030
is it that it's just not gonna be

2696
02:22:17,510 --> 02:22:22,579
noticeable enough you know whatever but

2697
02:22:20,030 --> 02:22:25,820
I would be worried about popping right

2698
02:22:22,579 --> 02:22:29,030
and another way to say it is that if it

2699
02:22:25,819 --> 02:22:30,770
didn't pop then it must be close enough

2700
02:22:29,030 --> 02:22:33,829
to a box filter to not have been worth

2701
02:22:30,771 --> 02:22:34,250
it right I don't know does that make

2702
02:22:33,829 --> 02:22:36,979
sense

2703
02:22:34,250 --> 02:22:39,771
as far as why I did it on the CPU and

2704
02:22:36,979 --> 02:22:41,149
not the GPU just because there wasn't

2705
02:22:39,771 --> 02:22:43,790
really a lot of reason to move it to the

2706
02:22:41,149 --> 02:22:44,539
GPU everything we move to the GPU takes

2707
02:22:43,790 --> 02:22:46,190
time away

2708
02:22:44,540 --> 02:22:48,800
from the GPU which we need for rendering

2709
02:22:46,190 --> 02:22:50,780
since we have thread sitting around not

2710
02:22:48,799 --> 02:22:53,059
really doing anything during load it

2711
02:22:50,780 --> 02:22:55,510
seems like they might as well generate

2712
02:22:53,059 --> 02:22:55,510
the MIT Maps

2713
02:23:06,270 --> 02:23:09,979
all right I'm gonna kind of wrap it up

2714
02:23:20,340 --> 02:23:22,939
are

2715
02:23:34,431 --> 02:23:38,149
all right thank you everyone for joining

2716
02:23:36,440 --> 02:23:39,290
me for the episode a handmade hero it's

2717
02:23:38,149 --> 02:23:41,060
been a pleasure coding with you as

2718
02:23:39,290 --> 02:23:43,131
always if you would like to follow along

2719
02:23:41,060 --> 02:23:45,681
series at home you can always peer to

2720
02:23:43,130 --> 02:23:48,050
the game on handmade hero dot-org

2721
02:23:45,681 --> 02:23:51,560
it comes with a source code so you can

2722
02:23:48,050 --> 02:23:53,420
follow along with it at home that's it

2723
02:23:51,560 --> 02:23:55,039
for today I will be back here tomorrow

2724
02:23:53,420 --> 02:23:56,149
it'll be early tomorrow

2725
02:23:55,040 --> 02:23:59,091
I have something scheduled in the

2726
02:23:56,149 --> 02:24:00,800
afternoon so I have to do hand meet here

2727
02:23:59,091 --> 02:24:03,800
a little earlier it'll be 10 to 12

2728
02:24:00,800 --> 02:24:07,341
instead of 12 to 1

2729
02:24:03,800 --> 02:24:09,170
sorry 12 to 2 alright

2730
02:24:07,341 --> 02:24:10,970
so it's a little earlier tomorrow that

2731
02:24:09,170 --> 02:24:13,159
may make a difference for some people

2732
02:24:10,970 --> 02:24:14,750
just give me the heads up as always on

2733
02:24:13,159 --> 02:24:16,250
the watch page when we're not streaming

2734
02:24:14,750 --> 02:24:18,610
it's got the schedule so you can head

2735
02:24:16,250 --> 02:24:22,640
over there if you're curious about it

2736
02:24:18,610 --> 02:24:25,221
that's about it for today I will start

2737
02:24:22,640 --> 02:24:28,250
trying to integrate our lighting system

2738
02:24:25,220 --> 02:24:29,989
into the game tomorrow and then we can

2739
02:24:28,250 --> 02:24:32,091
start to move the computation over to

2740
02:24:29,989 --> 02:24:33,591
the probes so again it's a gradual

2741
02:24:32,091 --> 02:24:35,710
process it'll take us a few begins to do

2742
02:24:33,591 --> 02:24:37,729
but then I think we'll be in good shape

2743
02:24:35,709 --> 02:24:40,100
because both I think we can both get a

2744
02:24:37,729 --> 02:24:42,649
speed improve it there and it solves our

2745
02:24:40,101 --> 02:24:44,329
problem of how do we sample all the rest

2746
02:24:42,649 --> 02:24:46,220
of our stuff in the game so how do we

2747
02:24:44,329 --> 02:24:48,261
light our grass and our entities and

2748
02:24:46,220 --> 02:24:49,520
stuff which we need to do as well so I

2749
02:24:48,261 --> 02:24:51,649
think that's what we want I think it'll

2750
02:24:49,521 --> 02:24:54,771
be good i but it'll just take us a bit

2751
02:24:51,649 --> 02:24:57,199
to get there so a couple weeks and we'll

2752
02:24:54,771 --> 02:24:59,690
do it that's it thanks for joining me

2753
02:24:57,200 --> 02:25:01,730
till tomorrow have fun programming and

2754
02:24:59,690 --> 02:25:04,060
I'll see everyone on the internet to use

2755
02:25:01,729 --> 02:25:04,060
everybody

