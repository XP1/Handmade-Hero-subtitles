1
00:00:01,280 --> 00:00:05,040
alright hello everyone and welcome to

2
00:00:03,750 --> 00:00:09,089
handmade Hero the show where we code a

3
00:00:05,040 --> 00:00:10,769
complete game live on stream on Twitch

4
00:00:09,089 --> 00:00:12,210
we don't use any libraries or any

5
00:00:10,769 --> 00:00:13,439
engines this is designed to be an

6
00:00:12,210 --> 00:00:14,910
educational stream that covers

7
00:00:13,439 --> 00:00:17,219
absolutely everything that happens in

8
00:00:14,910 --> 00:00:19,769
game development so there's no stone

9
00:00:17,219 --> 00:00:21,570
left unturned and one of the things

10
00:00:19,769 --> 00:00:23,278
that's very important to learn if you're

11
00:00:21,570 --> 00:00:26,250
doing game programming and want to be a

12
00:00:23,278 --> 00:00:28,679
professional at it is optimization of

13
00:00:26,250 --> 00:00:30,868
course knowing when your code is too

14
00:00:28,679 --> 00:00:33,780
slow and knowing what to do about that

15
00:00:30,868 --> 00:00:35,759
and so we're at the first point really

16
00:00:33,780 --> 00:00:38,700
in handmade hero where we're starting to

17
00:00:35,759 --> 00:00:41,128
talk about that in any kind of detail

18
00:00:38,700 --> 00:00:43,530
and yesterday I gave an overview of how

19
00:00:41,128 --> 00:00:45,359
to kind of think about optimization from

20
00:00:43,530 --> 00:00:47,219
a platform perspective like what are the

21
00:00:45,359 --> 00:00:49,320
things that are involved in making your

22
00:00:47,219 --> 00:00:53,039
code run quickly or not as the case may

23
00:00:49,320 --> 00:00:55,590
be but we took all the the time

24
00:00:53,039 --> 00:00:57,719
yesterday to explain all that stuff

25
00:00:55,590 --> 00:00:59,039
because modern processors are incredibly

26
00:00:57,719 --> 00:01:02,340
complicated unfortunately that's just

27
00:00:59,039 --> 00:01:04,260
the reality of it I mean it's it's kind

28
00:01:02,340 --> 00:01:07,200
of a double-edged sword if you will

29
00:01:04,260 --> 00:01:09,060
because not only are they very fast

30
00:01:07,200 --> 00:01:10,490
because they're so complicated but it

31
00:01:09,060 --> 00:01:13,379
also means they're very hard to optimize

32
00:01:10,489 --> 00:01:16,679
or to know how to optimize properly

33
00:01:13,379 --> 00:01:18,509
because of that complexity so today

34
00:01:16,680 --> 00:01:20,400
we're gonna start dealing with that now

35
00:01:18,509 --> 00:01:21,900
we're gonna we just gonna assume that

36
00:01:20,400 --> 00:01:23,100
everyone has had a chance to kind of

37
00:01:21,900 --> 00:01:24,930
digest what we talked about yesterday

38
00:01:23,099 --> 00:01:27,569
and today we're gonna start looking at

39
00:01:24,930 --> 00:01:29,850
what we can actually do in practice to

40
00:01:27,569 --> 00:01:31,889
sort of put put some of that knowledge

41
00:01:29,849 --> 00:01:33,959
to use to kind of go okay what can we do

42
00:01:31,890 --> 00:01:38,629
here to start to figure out what to do

43
00:01:33,959 --> 00:01:38,629
to our code to make it run faster right

44
00:01:39,109 --> 00:01:44,819
okay so before I get started we are

45
00:01:42,719 --> 00:01:47,728
gonna be coding today if you would like

46
00:01:44,819 --> 00:01:49,319
to follow along at home today is day 113

47
00:01:47,728 --> 00:01:51,349
so if you pre-ordered the game on

48
00:01:49,319 --> 00:01:54,029
handmade hero org you will want to

49
00:01:51,349 --> 00:01:56,728
download the source code zip and unpack

50
00:01:54,030 --> 00:01:58,140
112 the day 112 source because that's

51
00:01:56,728 --> 00:02:00,379
what I'm starting with today so if you

52
00:01:58,140 --> 00:02:04,409
want to follow along at home that is

53
00:02:00,379 --> 00:02:07,560
what I am going to be working with now

54
00:02:04,409 --> 00:02:09,209
what I wanted to talk about today again

55
00:02:07,560 --> 00:02:11,039
is sort of the first steps towards

56
00:02:09,209 --> 00:02:12,330
optimization what that process is going

57
00:02:11,038 --> 00:02:13,909
to look like so I'll give you a brief

58
00:02:12,330 --> 00:02:16,969
outline

59
00:02:13,909 --> 00:02:18,020
the on the board here right and so what

60
00:02:16,969 --> 00:02:19,460
I'm going to talk about here is just

61
00:02:18,020 --> 00:02:21,920
sort of the basic process of

62
00:02:19,460 --> 00:02:25,150
optimization that I like to do when I'm

63
00:02:21,919 --> 00:02:28,099
trying to make code run run more quickly

64
00:02:25,150 --> 00:02:33,039
so the first thing that you need to do

65
00:02:28,099 --> 00:02:36,139
is you need to gather statistics right

66
00:02:33,039 --> 00:02:39,409
so you've got to gather something some

67
00:02:36,139 --> 00:02:42,889
information about your program so that

68
00:02:39,409 --> 00:02:44,530
you have some idea of first of all why

69
00:02:42,889 --> 00:02:49,789
is it slow

70
00:02:44,530 --> 00:02:51,620
oops I should say why let's say where it

71
00:02:49,789 --> 00:02:55,189
is slow might be a better way to say

72
00:02:51,620 --> 00:02:57,200
that so we're in the program what we're

73
00:02:55,189 --> 00:03:00,620
parts of the program are really causing

74
00:02:57,199 --> 00:03:04,729
the slowness right and what are their

75
00:03:00,620 --> 00:03:07,969
characteristics right so meaning what do

76
00:03:04,729 --> 00:03:10,729
we know about those pieces of code such

77
00:03:07,969 --> 00:03:13,729
that we can sort of say you know how

78
00:03:10,729 --> 00:03:16,189
many things do they process how often do

79
00:03:13,729 --> 00:03:17,899
they run just what can we say about them

80
00:03:16,189 --> 00:03:21,379
in terms of how they are structured and

81
00:03:17,900 --> 00:03:23,780
what governs their behavior right so we

82
00:03:21,379 --> 00:03:27,560
need to gather some statistics and then

83
00:03:23,780 --> 00:03:29,840
we need to to make an estimate right and

84
00:03:27,560 --> 00:03:32,150
making an estimate involves saying well

85
00:03:29,840 --> 00:03:35,960
okay given the statistics that I

86
00:03:32,150 --> 00:03:37,370
gathered just not trying to be accurate

87
00:03:35,960 --> 00:03:38,540
because processors are fantastically

88
00:03:37,370 --> 00:03:39,920
complicated there's no way you're ever

89
00:03:38,539 --> 00:03:42,049
getting accurate a very accurate

90
00:03:39,919 --> 00:03:46,639
estimate but just complete ballpark

91
00:03:42,050 --> 00:03:49,580
right make an estimate that's nice well

92
00:03:46,639 --> 00:03:52,699
ballpark make an estimate of how fast

93
00:03:49,580 --> 00:03:56,360
you think that code should be running

94
00:03:52,699 --> 00:03:58,489
right so that you kind of have you know

95
00:03:56,360 --> 00:04:00,050
now you know how fast it how fast it was

96
00:03:58,490 --> 00:04:02,870
running and now you know how fast it

97
00:04:00,050 --> 00:04:10,750
should be running right and then you

98
00:04:02,870 --> 00:04:10,750
need to analyze your efficiency and

99
00:04:11,319 --> 00:04:14,319
performance

100
00:04:14,590 --> 00:04:18,399
now we talked about these two terms

101
00:04:16,689 --> 00:04:19,418
right these two terms are important

102
00:04:18,399 --> 00:04:21,969
because they mean different things

103
00:04:19,418 --> 00:04:24,399
efficiency is what work you actually are

104
00:04:21,970 --> 00:04:26,440
doing right a more efficient algorithm

105
00:04:24,399 --> 00:04:28,599
is one that actually just does less work

106
00:04:26,439 --> 00:04:30,310
it's not about how quickly it can do the

107
00:04:28,600 --> 00:04:33,160
work that it does it's about how much

108
00:04:30,310 --> 00:04:34,600
work it actually does do and performance

109
00:04:33,160 --> 00:04:37,780
is about how quickly it does the work it

110
00:04:34,600 --> 00:04:40,090
does have to do right and again you can

111
00:04:37,779 --> 00:04:42,339
think of this as in the most simple case

112
00:04:40,089 --> 00:04:46,479
let's say I wanted to add a bunch of

113
00:04:42,339 --> 00:04:49,388
numbers together performance for example

114
00:04:46,480 --> 00:04:51,160
is just how fast you wrote the code that

115
00:04:49,389 --> 00:04:53,319
can just literally do the adding right

116
00:04:51,160 --> 00:04:55,930
how fast is it how fast is it to add two

117
00:04:53,319 --> 00:04:57,879
numbers together right and efficiency is

118
00:04:55,930 --> 00:05:00,160
about how many numbers you actually had

119
00:04:57,879 --> 00:05:01,689
to add together because maybe you can do

120
00:05:00,160 --> 00:05:02,860
some kind of optimizations in your code

121
00:05:01,689 --> 00:05:04,930
where you know that a bunch of those

122
00:05:02,860 --> 00:05:06,850
numbers are going to be zero once you

123
00:05:04,930 --> 00:05:09,220
can test a few things and you can just

124
00:05:06,850 --> 00:05:11,710
eliminate them from ever appearing in

125
00:05:09,220 --> 00:05:13,240
like the final sum right so efficiency

126
00:05:11,709 --> 00:05:14,709
is about really you know getting better

127
00:05:13,240 --> 00:05:16,449
efficiency is about reducing the work

128
00:05:14,709 --> 00:05:17,978
that you have to actually do and getting

129
00:05:16,449 --> 00:05:19,779
bane per for getting better performance

130
00:05:17,978 --> 00:05:22,209
is about figuring out how to get that

131
00:05:19,779 --> 00:05:23,799
work through the CPU as fast as possible

132
00:05:22,209 --> 00:05:25,239
so once we have this we're going to

133
00:05:23,800 --> 00:05:30,189
analyze our efficiency of performance

134
00:05:25,240 --> 00:05:33,370
based on this information here right to

135
00:05:30,189 --> 00:05:35,500
see what we can say about our chances

136
00:05:33,370 --> 00:05:37,600
for optimizing the code and then finally

137
00:05:35,500 --> 00:05:40,930
we can you know we just got to start

138
00:05:37,600 --> 00:05:43,060
start coding right finally once we have

139
00:05:40,930 --> 00:05:44,860
some opinion of what's gonna make the

140
00:05:43,060 --> 00:05:46,660
biggest difference right can we can we

141
00:05:44,860 --> 00:05:50,319
boost the efficiency of it can we boost

142
00:05:46,660 --> 00:05:51,789
the performance right and when we kind

143
00:05:50,319 --> 00:05:53,439
of have a plan that we think might

144
00:05:51,788 --> 00:05:56,079
actually work then we start actually

145
00:05:53,439 --> 00:05:58,149
programming something that will you know

146
00:05:56,079 --> 00:06:01,918
is designed to be a faster version and

147
00:05:58,149 --> 00:06:05,589
we see if it if it actually works right

148
00:06:01,918 --> 00:06:06,969
so that's that's the process and so the

149
00:06:05,589 --> 00:06:08,560
first thing that we're going to do is

150
00:06:06,970 --> 00:06:13,090
the gather statistics which is just

151
00:06:08,560 --> 00:06:16,620
programming right so we have to go ahead

152
00:06:13,089 --> 00:06:19,418
and start gathering some statistics now

153
00:06:16,620 --> 00:06:20,939
the way we're going to do this is we're

154
00:06:19,418 --> 00:06:22,899
going to instrument our code

155
00:06:20,939 --> 00:06:25,899
instrumenting means kind of adding stuff

156
00:06:22,899 --> 00:06:28,000
to it to make it report the statistics

157
00:06:25,899 --> 00:06:28,389
to us there are other ways that you can

158
00:06:28,000 --> 00:06:30,759
go about

159
00:06:28,389 --> 00:06:32,740
there are commercial programs which try

160
00:06:30,759 --> 00:06:34,839
to analyze our code for you like vtune

161
00:06:32,740 --> 00:06:36,310
and stuff like this we're not really

162
00:06:34,839 --> 00:06:37,839
going to using those we're gonna show

163
00:06:36,310 --> 00:06:41,319
how to write and gather statistics

164
00:06:37,839 --> 00:06:43,000
ourselves but again if you're doing hard

165
00:06:41,319 --> 00:06:44,860
core optimization you may want to use

166
00:06:43,000 --> 00:06:47,230
some tools so tools from Intel or tools

167
00:06:44,860 --> 00:06:48,699
from other places that might give you

168
00:06:47,230 --> 00:06:50,560
some information or insight into the

169
00:06:48,699 --> 00:06:52,599
running program that you wouldn't

170
00:06:50,560 --> 00:06:53,800
necessarily get with the limited amount

171
00:06:52,600 --> 00:06:55,510
of instrumentation that we're gonna

172
00:06:53,800 --> 00:06:56,889
build here on the stream right so we're

173
00:06:55,509 --> 00:07:01,120
just gonna do sort of the first pass

174
00:06:56,889 --> 00:07:02,889
statistics style stuff so the first

175
00:07:01,120 --> 00:07:06,550
thing that I want to know right is

176
00:07:02,889 --> 00:07:08,229
inside handmade CPP we know that our

177
00:07:06,550 --> 00:07:09,939
game update and render call is the

178
00:07:08,230 --> 00:07:11,650
entirety of the code that we are

179
00:07:09,939 --> 00:07:15,819
responsible for you know that's not in

180
00:07:11,649 --> 00:07:18,120
Windows right so what I'd like to do is

181
00:07:15,819 --> 00:07:21,759
I would like to figure out - how many

182
00:07:18,120 --> 00:07:24,730
processor cycles in total we are taking

183
00:07:21,759 --> 00:07:27,069
to run game update and render right and

184
00:07:24,730 --> 00:07:30,160
then I would like to see how many

185
00:07:27,069 --> 00:07:32,769
processor cycles in total it takes to do

186
00:07:30,160 --> 00:07:35,080
some of the pieces of the codes that

187
00:07:32,769 --> 00:07:38,709
happen underneath it so I can start to

188
00:07:35,079 --> 00:07:42,000
get some idea of what part of the

189
00:07:38,709 --> 00:07:44,949
program is actually slow now we know

190
00:07:42,000 --> 00:07:46,689
kind of ahead of time that our renderer

191
00:07:44,949 --> 00:07:49,060
is very slow right now because we saw it

192
00:07:46,689 --> 00:07:51,759
get slow when we did changes there right

193
00:07:49,060 --> 00:07:55,420
so we kind of don't really need to do

194
00:07:51,759 --> 00:07:58,149
some of this work right now because we

195
00:07:55,420 --> 00:08:00,040
we kind of know the part of the answer

196
00:07:58,149 --> 00:08:02,409
already we know where the slow code

197
00:08:00,040 --> 00:08:03,970
actually is but because in general we're

198
00:08:02,410 --> 00:08:06,189
going to want to be able to track down

199
00:08:03,970 --> 00:08:09,070
things that might be a little bit harder

200
00:08:06,189 --> 00:08:10,689
to know in terms of performance I'm just

201
00:08:09,069 --> 00:08:12,550
going to go ahead and do sort of the

202
00:08:10,689 --> 00:08:14,949
general-purpose instrumentation so we

203
00:08:12,550 --> 00:08:20,350
can see how we would find out what's

204
00:08:14,949 --> 00:08:22,349
going on because really if I was just

205
00:08:20,350 --> 00:08:25,150
trying to be as expedient as possible

206
00:08:22,350 --> 00:08:26,800
then all I would do is just get a cycle

207
00:08:25,149 --> 00:08:28,750
count for this routine and a cycle count

208
00:08:26,800 --> 00:08:30,670
for the draw rectangle slowly routine

209
00:08:28,750 --> 00:08:32,110
and compare them right I just see total

210
00:08:30,670 --> 00:08:34,420
number of cycles taken for the whole

211
00:08:32,110 --> 00:08:35,889
game code and then just the number of

212
00:08:34,419 --> 00:08:38,259
cycles taken just for that one routine

213
00:08:35,889 --> 00:08:41,348
and then I'd see kind of how much it was

214
00:08:38,259 --> 00:08:42,269
accounting for right but I'm gonna do

215
00:08:41,349 --> 00:08:45,450
something a little bit

216
00:08:42,269 --> 00:08:48,990
fancier than that just for now okay so

217
00:08:45,450 --> 00:08:51,720
what I would like to do is I would like

218
00:08:48,990 --> 00:08:57,049
to kind of make some way of doing a

219
00:08:51,720 --> 00:09:00,660
simple system which can which can record

220
00:08:57,049 --> 00:09:02,639
processor counts and figure out how many

221
00:09:00,659 --> 00:09:04,379
cycles were taken in between two places

222
00:09:02,639 --> 00:09:08,309
and now if you remember we already

223
00:09:04,379 --> 00:09:10,470
actually did this we have this code back

224
00:09:08,309 --> 00:09:12,449
in call it's called our DTSC we have

225
00:09:10,470 --> 00:09:14,450
this code way way back from when we did

226
00:09:12,450 --> 00:09:16,410
the win32 platform layer if you remember

227
00:09:14,450 --> 00:09:17,730
there is actually a processor

228
00:09:16,409 --> 00:09:19,439
instruction called read time stamp

229
00:09:17,730 --> 00:09:21,000
counter and this is actually the

230
00:09:19,440 --> 00:09:23,490
intrinsic that causes the compiler to

231
00:09:21,000 --> 00:09:26,070
output that assembly language

232
00:09:23,490 --> 00:09:28,409
instruction and what that does is it

233
00:09:26,070 --> 00:09:31,350
gives us a counter out of the processor

234
00:09:28,409 --> 00:09:32,759
that says essentially where it is in the

235
00:09:31,350 --> 00:09:34,470
instruction stream right it says

236
00:09:32,759 --> 00:09:38,580
basically like I have done this many

237
00:09:34,470 --> 00:09:41,550
cycles so far right in cycles of course

238
00:09:38,580 --> 00:09:43,020
is a strange term these days because I

239
00:09:41,549 --> 00:09:44,669
think different processors have

240
00:09:43,019 --> 00:09:46,049
different ways of reporting cycle times

241
00:09:44,669 --> 00:09:49,229
and this sort of thing sometimes with

242
00:09:46,049 --> 00:09:51,509
speed step but I believe nowadays on

243
00:09:49,230 --> 00:09:54,090
modern processors most of the time it

244
00:09:51,509 --> 00:09:55,740
gives you sort of like what the cycles

245
00:09:54,090 --> 00:09:57,480
would have been if the processor was

246
00:09:55,740 --> 00:10:00,269
running at full speed I'm not entirely

247
00:09:57,480 --> 00:10:01,740
certain so if you're in a speed step

248
00:10:00,269 --> 00:10:03,210
kind of a situation where you have a

249
00:10:01,740 --> 00:10:05,250
laptop processor that goes in and out of

250
00:10:03,210 --> 00:10:07,290
power saving and stuff like that you may

251
00:10:05,250 --> 00:10:09,330
have to think a little harder about your

252
00:10:07,289 --> 00:10:10,679
are DTSC's I don't actually know you'd

253
00:10:09,330 --> 00:10:12,720
have to verify that but assuming that

254
00:10:10,679 --> 00:10:14,519
you're on a processor that you generally

255
00:10:12,720 --> 00:10:17,129
have clocked in high-performance running

256
00:10:14,519 --> 00:10:19,860
full-speed you can assume that your Rd

257
00:10:17,129 --> 00:10:22,710
TSE is going to be relatively accurate

258
00:10:19,860 --> 00:10:25,529
to what the cycle count is so what we

259
00:10:22,710 --> 00:10:27,269
can do like we did before we had this

260
00:10:25,529 --> 00:10:29,730
thing where we just figure out how many

261
00:10:27,269 --> 00:10:31,350
cycles are have elapsed by taking the Rd

262
00:10:29,730 --> 00:10:32,970
TSE at the beginning and end of a

263
00:10:31,350 --> 00:10:34,350
routine which says what was the

264
00:10:32,970 --> 00:10:35,610
timestamp counter at the beginning what

265
00:10:34,350 --> 00:10:37,110
was the time some counter at the end the

266
00:10:35,610 --> 00:10:40,050
difference between those is how many

267
00:10:37,110 --> 00:10:43,259
cycles have elapsed during the run of

268
00:10:40,049 --> 00:10:45,329
that code right and we can actually put

269
00:10:43,259 --> 00:10:47,759
that we could do that directly write the

270
00:10:45,330 --> 00:10:49,860
simplest thing we can do is we can do

271
00:10:47,759 --> 00:10:52,019
like you know start cycle count here I

272
00:10:49,860 --> 00:10:54,360
take the RDP SC and then we can do an

273
00:10:52,019 --> 00:10:55,698
end cycle count at the end of it right

274
00:10:54,360 --> 00:10:58,579
like so

275
00:10:55,698 --> 00:11:01,188
and then we can compute a difference

276
00:10:58,578 --> 00:11:02,599
right we could do that

277
00:11:01,188 --> 00:11:05,028
and basically what that would look like

278
00:11:02,600 --> 00:11:08,989
as we do that there and then at the end

279
00:11:05,028 --> 00:11:12,350
we would go down here to the very very

280
00:11:08,989 --> 00:11:15,230
end of it and we would we would put that

281
00:11:12,350 --> 00:11:17,119
in here and this cycle is elapsed when

282
00:11:15,230 --> 00:11:22,389
we got to the end of it that would tell

283
00:11:17,119 --> 00:11:22,389
us what the total cycle count was right

284
00:11:22,989 --> 00:11:32,509
now we have a problem here though which

285
00:11:30,168 --> 00:11:34,578
is at least at the moment we don't have

286
00:11:32,509 --> 00:11:37,548
any way of actually outputting anything

287
00:11:34,578 --> 00:11:40,219
our win32 code of course can output

288
00:11:37,548 --> 00:11:42,409
stuff but our game cannot really output

289
00:11:40,220 --> 00:11:46,220
anything right because our game does not

290
00:11:42,409 --> 00:11:47,629
actually have any we don't even have the

291
00:11:46,220 --> 00:11:50,418
ability to display stuff right we've got

292
00:11:47,629 --> 00:11:53,178
we've got no sort of we don't even have

293
00:11:50,418 --> 00:11:54,889
thought support right so what I want to

294
00:11:53,178 --> 00:11:59,539
do is just have a way of getting this

295
00:11:54,889 --> 00:12:02,538
information out to win32 hand-made

296
00:11:59,539 --> 00:12:04,759
proper and I'm actually gonna do some

297
00:12:02,538 --> 00:12:06,859
you know people get a little overly

298
00:12:04,759 --> 00:12:07,970
fancy sometimes with their performance

299
00:12:06,859 --> 00:12:11,059
counters I'm actually going to do

300
00:12:07,970 --> 00:12:12,499
something pretty simple and you'll see

301
00:12:11,058 --> 00:12:14,778
what I'm gonna do here it's very very

302
00:12:12,499 --> 00:12:18,499
straightforward basically I'm just gonna

303
00:12:14,778 --> 00:12:19,759
do a incredibly simple thing which is to

304
00:12:18,499 --> 00:12:22,308
just make a static table of these

305
00:12:19,759 --> 00:12:24,288
counters that's it it's really pretty

306
00:12:22,308 --> 00:12:27,038
boring right there's there's not a whole

307
00:12:24,288 --> 00:12:30,318
lot to it but I'll basically show you

308
00:12:27,038 --> 00:12:32,389
what we're gonna do so inside like our

309
00:12:30,318 --> 00:12:35,509
game memory right I'm gonna actually

310
00:12:32,389 --> 00:12:37,278
have a thing for timers here so we'll

311
00:12:35,509 --> 00:12:41,119
actually have a thing that's like maybe

312
00:12:37,278 --> 00:12:43,970
something like game timer or something

313
00:12:41,119 --> 00:12:46,699
like this or game we should probably

314
00:12:43,970 --> 00:12:54,259
call it debug right we'll call this a

315
00:12:46,698 --> 00:12:56,688
debug cycle counter or debug cycle

316
00:12:54,259 --> 00:12:58,548
counter sounds good to me we're gonna

317
00:12:56,688 --> 00:13:00,078
have a debug cycle counter in here and

318
00:12:58,548 --> 00:13:02,358
all that's going to be is it's going to

319
00:13:00,078 --> 00:13:05,479
be a UN 64 which is going to be a cycle

320
00:13:02,359 --> 00:13:07,908
count and that cycle count is going to

321
00:13:05,480 --> 00:13:09,450
be recorded and what we'll do is we'll

322
00:13:07,908 --> 00:13:11,549
just have some number of these

323
00:13:09,450 --> 00:13:13,710
all right we'll just have in our in our

324
00:13:11,549 --> 00:13:16,649
debug game memory when we allocate that

325
00:13:13,710 --> 00:13:18,870
we will basically have some number of

326
00:13:16,649 --> 00:13:20,549
these right let's say we have 256 of

327
00:13:18,870 --> 00:13:22,379
these counters off we go

328
00:13:20,549 --> 00:13:23,309
right and again they we can get rid of

329
00:13:22,379 --> 00:13:27,779
these in the shipping game before you

330
00:13:23,309 --> 00:13:30,269
want to that's not a problem at all

331
00:13:27,779 --> 00:13:32,339
right and in fact we're pretty sure that

332
00:13:30,269 --> 00:13:33,720
we probably would want to so what I

333
00:13:32,340 --> 00:13:36,629
might do is go ahead and move those up

334
00:13:33,720 --> 00:13:38,370
here to this handmade internal which we

335
00:13:36,629 --> 00:13:40,769
already have a pound to find for right I

336
00:13:38,370 --> 00:13:43,500
might say handmade internal debug cycle

337
00:13:40,769 --> 00:13:45,509
counter right and then what I'll do down

338
00:13:43,500 --> 00:13:48,149
here is just do an if around that right

339
00:13:45,509 --> 00:13:50,970
so only if handmade internal is actually

340
00:13:48,149 --> 00:13:53,069
defined we will will we actually have

341
00:13:50,970 --> 00:13:54,600
these debug counters in there so then

342
00:13:53,070 --> 00:13:56,520
what I want to do is well because I

343
00:13:54,600 --> 00:13:59,009
don't want to necessarily make things

344
00:13:56,519 --> 00:14:01,049
problematic for people who are on other

345
00:13:59,009 --> 00:14:04,259
platforms you can see that if I use that

346
00:14:01,049 --> 00:14:06,539
our DTSC primitive you know if your

347
00:14:04,259 --> 00:14:08,730
platform didn't support already TSC this

348
00:14:06,539 --> 00:14:10,860
would be a little bit difficult for you

349
00:14:08,730 --> 00:14:13,769
so also what I'm gonna do here is I'm

350
00:14:10,860 --> 00:14:17,550
going to include a little thing and we

351
00:14:13,769 --> 00:14:18,929
can actually use the the thing which

352
00:14:17,549 --> 00:14:20,969
tells us whether or not we're compiling

353
00:14:18,929 --> 00:14:24,149
with the Microsoft compiler for the for

354
00:14:20,970 --> 00:14:27,690
the moment to actually just make this

355
00:14:24,149 --> 00:14:32,819
start and end bit of this code actually

356
00:14:27,690 --> 00:14:40,230
be actually be just something that works

357
00:14:32,820 --> 00:14:43,590
off of a macros right so basically if we

358
00:14:40,230 --> 00:14:45,210
are on a compiler that we know has our

359
00:14:43,590 --> 00:14:47,610
DTSC and we can expand this to include

360
00:14:45,210 --> 00:14:52,170
other ones later if we want to will

361
00:14:47,610 --> 00:14:54,659
actually make this macro do something

362
00:14:52,169 --> 00:14:59,909
like this right so this will be a begin

363
00:14:54,659 --> 00:15:03,959
time block an ID like so and what

364
00:14:59,909 --> 00:15:06,360
that'll do is it'll take that that cycle

365
00:15:03,960 --> 00:15:08,190
start count and I'll sort of use the C++

366
00:15:06,360 --> 00:15:09,060
pasting operator there to append ID to

367
00:15:08,190 --> 00:15:10,440
it just in case you want to have

368
00:15:09,059 --> 00:15:12,599
multiple ones of them in the same area

369
00:15:10,440 --> 00:15:15,150
for some reason and that'll basically

370
00:15:12,600 --> 00:15:19,170
snap that are DTSC and then i'm gonna do

371
00:15:15,149 --> 00:15:22,799
an end time to block same way here like

372
00:15:19,169 --> 00:15:25,019
that and i'm gonna put the other code in

373
00:15:22,799 --> 00:15:28,019
there and we'll just say that this one

374
00:15:25,019 --> 00:15:30,360
is game update and render like so right

375
00:15:28,019 --> 00:15:33,329
and then we'll go down to the end cycle

376
00:15:30,360 --> 00:15:39,000
count and we'll go ahead and lock that

377
00:15:33,330 --> 00:15:41,220
up and okay there we go and so we do

378
00:15:39,000 --> 00:15:44,480
begin time block we do end time block

379
00:15:41,220 --> 00:15:48,870
here and we go ahead and put let's see

380
00:15:44,480 --> 00:15:51,149
this code in there cycle count we can

381
00:15:48,870 --> 00:15:53,610
actually just click the RTT SC right in

382
00:15:51,149 --> 00:15:55,949
there probably and then we can go ahead

383
00:15:53,610 --> 00:15:58,470
and take this cycles elapsed and all we

384
00:15:55,950 --> 00:16:00,930
have to do here is we don't actually

385
00:15:58,470 --> 00:16:03,899
need to to store the cycles elapsed all

386
00:16:00,929 --> 00:16:08,149
we have to do is have some notion of

387
00:16:03,899 --> 00:16:12,360
where it's going to be stored right and

388
00:16:08,149 --> 00:16:13,769
render so we just have to have some

389
00:16:12,360 --> 00:16:17,070
notion of where it's going to be stored

390
00:16:13,769 --> 00:16:18,569
and when we know that we can actually

391
00:16:17,070 --> 00:16:20,040
just go ahead and get it so for right

392
00:16:18,570 --> 00:16:21,120
now I'll assume that's in memory but

393
00:16:20,039 --> 00:16:22,199
we're gonna have to do a little bit more

394
00:16:21,120 --> 00:16:23,759
work than that because that's not always

395
00:16:22,200 --> 00:16:24,960
going to be there like game memory is

396
00:16:23,759 --> 00:16:26,939
not always going to be passed to

397
00:16:24,960 --> 00:16:28,560
everybody so we might we were going to

398
00:16:26,940 --> 00:16:32,280
do some things potentially to make that

399
00:16:28,559 --> 00:16:41,719
a little bit easier so okay where is

400
00:16:32,279 --> 00:16:45,059
that end block so this counter ID'd

401
00:16:41,720 --> 00:16:48,000
there we go and so that will go ahead

402
00:16:45,059 --> 00:16:50,159
and do that that difference for us so

403
00:16:48,000 --> 00:16:53,220
you can see here we save the cycle count

404
00:16:50,159 --> 00:16:54,929
into a local variable we append the ID

405
00:16:53,220 --> 00:16:56,790
to it so it won't name conflict if we

406
00:16:54,929 --> 00:16:58,319
have multiple E's multiple of these time

407
00:16:56,789 --> 00:17:00,240
blocks in the same function although I

408
00:16:58,320 --> 00:17:02,970
don't suspect we'll probably do that in

409
00:17:00,240 --> 00:17:03,810
scope that way but just in case and then

410
00:17:02,970 --> 00:17:05,789
what we're going to do is get the our

411
00:17:03,809 --> 00:17:07,950
DTSC again at the end take that

412
00:17:05,789 --> 00:17:11,509
difference and add it in to whatever the

413
00:17:07,950 --> 00:17:11,509
counter actually is right

414
00:17:12,720 --> 00:17:18,309
now I think what I'll probably do as

415
00:17:15,069 --> 00:17:21,159
well just because why not

416
00:17:18,309 --> 00:17:23,519
I might actually make this something

417
00:17:21,160 --> 00:17:28,630
like because we have enums you know

418
00:17:23,519 --> 00:17:33,039
debug I don't want to do this I guess

419
00:17:28,630 --> 00:17:35,470
we'll do debug counter count debug cycle

420
00:17:33,039 --> 00:17:38,529
counter attack and we'll just make an

421
00:17:35,470 --> 00:17:39,940
enum of these right so what we'll do

422
00:17:38,529 --> 00:17:43,059
here is we'll just say okay there's an

423
00:17:39,940 --> 00:17:44,470
enum of these guys right and this is

424
00:17:43,059 --> 00:17:51,609
gonna be all the counters that we have

425
00:17:44,470 --> 00:17:53,620
at the moment okay and yeah and that's

426
00:17:51,609 --> 00:17:55,119
basically it so what I could do as well

427
00:17:53,619 --> 00:17:57,729
as I could make this a little bit easier

428
00:17:55,119 --> 00:17:59,859
on people and say that okay the ID is

429
00:17:57,730 --> 00:18:02,380
just what happens after debug cycle

430
00:17:59,859 --> 00:18:04,539
counter so for example game update and

431
00:18:02,380 --> 00:18:09,490
render I just go ahead and say debug

432
00:18:04,539 --> 00:18:11,889
cycle counter game update and render and

433
00:18:09,490 --> 00:18:15,400
now when I do that block here it goes

434
00:18:11,890 --> 00:18:18,450
ahead and puts that in there right so I

435
00:18:15,400 --> 00:18:21,310
think that should be basically it

436
00:18:18,450 --> 00:18:23,610
there's a little bit of janky Nasir and

437
00:18:21,309 --> 00:18:30,250
we may actually want to do something

438
00:18:23,609 --> 00:18:32,679
slightly fancier I guess I'll show you

439
00:18:30,250 --> 00:18:34,960
first how I do it how I do it in the non

440
00:18:32,680 --> 00:18:36,519
fancy way and then we can kind of show

441
00:18:34,960 --> 00:18:38,620
how to do it the slightly fancier way

442
00:18:36,519 --> 00:18:39,789
and that way people can sort of see what

443
00:18:38,619 --> 00:18:44,049
the difference between the two things

444
00:18:39,789 --> 00:18:46,389
actually is right so let me go ahead and

445
00:18:44,049 --> 00:18:49,419
compile this and and clean out the

446
00:18:46,390 --> 00:18:51,880
errors before I move any further let's

447
00:18:49,420 --> 00:18:55,500
see this actually needs to be switched

448
00:18:51,880 --> 00:18:55,500
out at the type def there we go

449
00:18:55,618 --> 00:19:01,898
and time block plus equals debug cycle

450
00:19:00,700 --> 00:19:04,808
counter oh right and I need to

451
00:19:01,898 --> 00:19:09,628
dereference that value there there's

452
00:19:04,808 --> 00:19:09,628
that cycle count cycle count like so

453
00:19:09,808 --> 00:19:18,278
alright and now in theory you know we

454
00:19:15,819 --> 00:19:22,418
can if we run the game and go back in

455
00:19:18,278 --> 00:19:23,828
here if we run the game nothing in

456
00:19:22,419 --> 00:19:26,679
particular is happening but now actually

457
00:19:23,828 --> 00:19:29,678
that value should actually be going up

458
00:19:26,679 --> 00:19:31,899
with every iteration of the game code

459
00:19:29,679 --> 00:19:35,499
basically and now of course we also

460
00:19:31,898 --> 00:19:38,918
probably want to start compiling this in

461
00:19:35,499 --> 00:19:41,528
in release mode and I'll talk about kind

462
00:19:38,919 --> 00:19:45,038
of why we're doing that in a second okay

463
00:19:41,528 --> 00:19:46,179
we are compiling it I also think

464
00:19:45,038 --> 00:19:48,158
probably the other thing I wanna do to

465
00:19:46,179 --> 00:19:50,709
cut down on our run times building those

466
00:19:48,159 --> 00:19:52,479
ground chunks is a huge cost stress

467
00:19:50,709 --> 00:19:55,328
right now so I'm gonna turn that off

468
00:19:52,479 --> 00:19:58,359
just temporarily while we get our timer

469
00:19:55,328 --> 00:19:59,888
stuff working and then we can then we

470
00:19:58,358 --> 00:20:01,148
can go back to it in a second so Phil

471
00:19:59,888 --> 00:20:04,658
ground chunk I'm just going to go ahead

472
00:20:01,148 --> 00:20:08,708
and and sort of take that out of the

473
00:20:04,659 --> 00:20:15,549
equation here like so so it will not

474
00:20:08,709 --> 00:20:18,339
impact us at all okay so here is our

475
00:20:15,548 --> 00:20:19,898
game running right and it's still

476
00:20:18,338 --> 00:20:21,668
bleeding those ground chunks it's just

477
00:20:19,898 --> 00:20:24,608
they're filled with yellow at the moment

478
00:20:21,669 --> 00:20:26,440
instead of anything real so now what we

479
00:20:24,608 --> 00:20:28,868
want to do is we want to start getting a

480
00:20:26,440 --> 00:20:31,269
look at those timer values so that we

481
00:20:28,868 --> 00:20:35,199
can see them a little more clearly right

482
00:20:31,269 --> 00:20:37,298
so let's go into win32 handmade we know

483
00:20:35,200 --> 00:20:40,659
that when we pass in memory it's going

484
00:20:37,298 --> 00:20:43,658
to do the debugging it's going to do

485
00:20:40,659 --> 00:20:47,979
those debug counters right and so when I

486
00:20:43,659 --> 00:20:50,200
call game update and render actually

487
00:20:47,979 --> 00:20:52,509
think it's just called update and render

488
00:20:50,200 --> 00:20:54,788
in here because it uses the pointer see

489
00:20:52,509 --> 00:20:57,249
here so when I call game update and

490
00:20:54,788 --> 00:21:00,940
render what I want to do here is I want

491
00:20:57,249 --> 00:21:02,528
to clear out those timers first just to

492
00:21:00,940 --> 00:21:05,528
make sure none of them are actually set

493
00:21:02,528 --> 00:21:07,388
to anything and we already have this

494
00:21:05,528 --> 00:21:08,440
zero sized call which I believe I can

495
00:21:07,388 --> 00:21:10,990
use in here I don't

496
00:21:08,440 --> 00:21:13,390
remember if we exported that we may not

497
00:21:10,990 --> 00:21:16,029
have so I suppose maybe I shouldn't use

498
00:21:13,390 --> 00:21:20,250
it in here I know maybe I should use

499
00:21:16,029 --> 00:21:20,250
Windows as zero memory call

500
00:21:20,990 --> 00:21:24,140
you know what I think I'm gonna do it a

501
00:21:23,390 --> 00:21:26,080
slightly different way

502
00:21:24,140 --> 00:21:28,460
all right so what we'll do instead is

503
00:21:26,079 --> 00:21:32,329
we're just gonna call after we go ahead

504
00:21:28,460 --> 00:21:33,679
and do game updating and render and we

505
00:21:32,329 --> 00:21:35,210
passed that game memory the game memory

506
00:21:33,679 --> 00:21:37,309
will now be filled out so I want to do

507
00:21:35,210 --> 00:21:46,808
is just have a call that's like dump

508
00:21:37,308 --> 00:21:52,399
timers or something like this right okay

509
00:21:46,808 --> 00:21:53,779
and I guess I want to maybe call it

510
00:21:52,400 --> 00:21:58,720
something more like this like hey hey

511
00:21:53,779 --> 00:22:00,799
little debug cycle counters like that

512
00:21:58,720 --> 00:22:03,079
and so I'm gonna go ahead and pass the

513
00:22:00,799 --> 00:22:04,879
game memory there and then what we're

514
00:22:03,079 --> 00:22:07,519
gonna do is come out here and make that

515
00:22:04,880 --> 00:22:10,070
actual call now again that call of

516
00:22:07,519 --> 00:22:14,690
course is going to be one that we only

517
00:22:10,069 --> 00:22:16,849
want to do if we actually have debug

518
00:22:14,690 --> 00:22:20,929
counters all right

519
00:22:16,849 --> 00:22:24,079
so in here when we actually do this guy

520
00:22:20,929 --> 00:22:26,769
so if I do internal void handle T bug

521
00:22:24,079 --> 00:22:30,980
cycle counters and we've got game memory

522
00:22:26,769 --> 00:22:32,569
and there's the game memory I'm only

523
00:22:30,980 --> 00:22:33,980
gonna do the inside of it if we have

524
00:22:32,569 --> 00:22:35,839
internal on that way if the debug

525
00:22:33,980 --> 00:22:37,339
counters get compiled out this routine

526
00:22:35,839 --> 00:22:38,899
won't do anything which is what we want

527
00:22:37,339 --> 00:22:40,699
right we don't want it to actually do

528
00:22:38,900 --> 00:22:42,080
anything we don't want to try and it'll

529
00:22:40,700 --> 00:22:43,370
it would be a compile error right it

530
00:22:42,079 --> 00:22:45,619
wouldn't be able to access any of the

531
00:22:43,369 --> 00:22:47,149
stuff so what I'm going to do here is

532
00:22:45,619 --> 00:22:51,049
introduce a variable that's like the

533
00:22:47,150 --> 00:22:52,910
total cycles I guess we don't really

534
00:22:51,049 --> 00:22:54,049
need total cycles at the moment I'll

535
00:22:52,910 --> 00:22:56,210
have to think about what to think about

536
00:22:54,049 --> 00:22:58,369
how we do that one but as we get fancier

537
00:22:56,210 --> 00:22:59,329
I'll show you more and more stuff we can

538
00:22:58,369 --> 00:23:01,069
kind of do with these counters and

539
00:22:59,329 --> 00:23:03,019
that's getting a little bit ahead of

540
00:23:01,069 --> 00:23:06,169
myself there so let's go through the

541
00:23:03,019 --> 00:23:08,029
counters that we have right we know that

542
00:23:06,170 --> 00:23:10,550
we've got a certain amount of counters

543
00:23:08,029 --> 00:23:15,879
in here let me bring up that platform

544
00:23:10,549 --> 00:23:18,349
let's see here I'm count there it is

545
00:23:15,880 --> 00:23:22,400
counter yes this should probably be

546
00:23:18,349 --> 00:23:26,599
counters counters and we're going to go

547
00:23:22,400 --> 00:23:28,900
through the counter index get each one

548
00:23:26,599 --> 00:23:28,899
of those

549
00:23:28,970 --> 00:23:36,319
and take a look at it so the debug cycle

550
00:23:31,339 --> 00:23:40,459
counter is going to be whatever the nth

551
00:23:36,319 --> 00:23:42,500
one of those was why why did I do that

552
00:23:40,460 --> 00:23:50,680
little Spacey today I feel like it's a

553
00:23:42,500 --> 00:23:54,380
little a little jumbled all right so

554
00:23:50,680 --> 00:23:56,840
once we have these what we'd like to do

555
00:23:54,380 --> 00:23:58,730
is in this loop we're just going to

556
00:23:56,839 --> 00:24:00,949
start by just displaying what the cycle

557
00:23:58,730 --> 00:24:03,440
count actually was and then we're gonna

558
00:24:00,950 --> 00:24:05,960
clear right so that the next time

559
00:24:03,440 --> 00:24:15,860
through it we'll be able to accumulate

560
00:24:05,960 --> 00:24:19,579
its values again right and what I'd like

561
00:24:15,859 --> 00:24:22,729
to do here is just again use the output

562
00:24:19,579 --> 00:24:24,949
debug string which we have we've used

563
00:24:22,730 --> 00:24:26,680
before to just print stuff out and again

564
00:24:24,950 --> 00:24:29,299
this is just for debugging print out

565
00:24:26,680 --> 00:24:30,680
eventually we probably want to build

566
00:24:29,299 --> 00:24:32,299
maybe a little bit more when we have

567
00:24:30,680 --> 00:24:34,250
done our list of things to do to do some

568
00:24:32,299 --> 00:24:35,930
debug services and at that point we

569
00:24:34,250 --> 00:24:37,730
would sort of maybe start to build our

570
00:24:35,930 --> 00:24:40,250
own things like an output stuff a little

571
00:24:37,730 --> 00:24:42,259
bit better than this but for now it's

572
00:24:40,250 --> 00:24:45,710
totally fine to just use Windows to

573
00:24:42,259 --> 00:24:46,819
print the stuff out it's gonna be kind

574
00:24:45,710 --> 00:24:47,900
of annoying you'll see in a second

575
00:24:46,819 --> 00:24:50,059
because you know it's just not that

576
00:24:47,900 --> 00:24:53,360
great but what are gonna do one thing at

577
00:24:50,059 --> 00:24:55,099
a time so anyway in the text buffer here

578
00:24:53,359 --> 00:24:58,059
all we need to do is we want to

579
00:24:55,099 --> 00:25:00,409
basically print out what are which of

580
00:24:58,059 --> 00:25:02,539
the counter indices we're actually doing

581
00:25:00,410 --> 00:25:05,390
and then we also want to print out

582
00:25:02,539 --> 00:25:09,950
whatever the cycle time actually was for

583
00:25:05,390 --> 00:25:13,850
that particular counter right so here we

584
00:25:09,950 --> 00:25:15,920
go and that's a 64-bit number so in

585
00:25:13,849 --> 00:25:17,740
order to print out that as a 64-bit

586
00:25:15,920 --> 00:25:20,029
number we need to actually use the

587
00:25:17,740 --> 00:25:23,690
64-bit print out syntax which I believe

588
00:25:20,029 --> 00:25:25,819
is this nowadays on on Visual Studio

589
00:25:23,690 --> 00:25:27,830
which is kind of weird but I think

590
00:25:25,819 --> 00:25:30,109
that's correct will actually find out in

591
00:25:27,829 --> 00:25:31,939
a second whether it is it's it's a very

592
00:25:30,109 --> 00:25:34,099
strange syntax and not particularly good

593
00:25:31,940 --> 00:25:37,380
but you know that's just what happens

594
00:25:34,099 --> 00:25:43,579
what what it happens to be

595
00:25:37,380 --> 00:25:47,130
I gotta change this to counters so okay

596
00:25:43,579 --> 00:25:52,259
and then my output debug string there I

597
00:25:47,130 --> 00:25:54,180
guess I should I guess I should take a

598
00:25:52,259 --> 00:25:55,859
look at what I was actually doing yeah

599
00:25:54,180 --> 00:25:59,580
we should probably also do a little

600
00:25:55,859 --> 00:26:03,449
thing it just lets everybody know debug

601
00:25:59,579 --> 00:26:07,740
cycle counts so and then that way this

602
00:26:03,450 --> 00:26:11,519
guy will print that out and make it

603
00:26:07,740 --> 00:26:14,039
clear alright so this will tell us right

604
00:26:11,519 --> 00:26:16,980
how many cycles were actually spending

605
00:26:14,039 --> 00:26:19,649
or at least we hope that it will this

606
00:26:16,980 --> 00:26:22,170
should go to our debug output here right

607
00:26:19,650 --> 00:26:24,180
it should say roughly how many cycles we

608
00:26:22,170 --> 00:26:26,400
are spending to run the game

609
00:26:24,180 --> 00:26:29,190
right now this is not including the code

610
00:26:26,400 --> 00:26:30,960
that we're doing in Windows right but

611
00:26:29,190 --> 00:26:34,410
this is what this is the actual cycle

612
00:26:30,960 --> 00:26:35,700
count that we're getting and so if you

613
00:26:34,410 --> 00:26:39,480
take a look at what that cycle count

614
00:26:35,700 --> 00:26:41,970
actually is here right just it seems to

615
00:26:39,480 --> 00:26:44,640
be relatively consistent you can see

616
00:26:41,970 --> 00:26:46,440
that it's a pretty nasty number of

617
00:26:44,640 --> 00:26:54,509
cycles that we are taking to render the

618
00:26:46,440 --> 00:26:59,519
game as it is right because if you

619
00:26:54,509 --> 00:27:02,430
remember we did some work yesterday and

620
00:26:59,519 --> 00:27:05,819
took a look at what you know how many

621
00:27:02,430 --> 00:27:09,330
cycles we actually had I don't know if I

622
00:27:05,819 --> 00:27:12,089
believe I wrote down here yeah so per

623
00:27:09,329 --> 00:27:13,859
core per CPU we calculated that we

624
00:27:12,089 --> 00:27:15,839
needed to be under a hundred and seven

625
00:27:13,859 --> 00:27:18,329
million cycles per frame but if you look

626
00:27:15,839 --> 00:27:20,730
at this you can see right here that we

627
00:27:18,329 --> 00:27:22,289
are already just in our just in our code

628
00:27:20,730 --> 00:27:25,650
not counting whatever Windows has to do

629
00:27:22,289 --> 00:27:28,079
in addition at 310 million right so we

630
00:27:25,650 --> 00:27:30,120
are already missing our budget by 3x

631
00:27:28,079 --> 00:27:31,889
which means that the maximum possible

632
00:27:30,119 --> 00:27:35,699
speed our game could be running at at

633
00:27:31,890 --> 00:27:37,560
the moment is one third of 30 frames a

634
00:27:35,700 --> 00:27:40,779
second right or 10 frames a second

635
00:27:37,559 --> 00:27:48,819
basically it is that correct

636
00:27:40,779 --> 00:27:51,849
and that doesn't work that way sorry let

637
00:27:48,819 --> 00:27:55,419
me make sure I do that math properly so

638
00:27:51,849 --> 00:27:58,509
one thirtieth of a second we were at 107

639
00:27:55,420 --> 00:28:01,840
and so if I want to do one thirtieth of

640
00:27:58,509 --> 00:28:06,940
a second and it's going to be three of

641
00:28:01,839 --> 00:28:10,149
those no I'm right it's fine it's fine

642
00:28:06,940 --> 00:28:12,700
it's basically it's it's gonna be ten

643
00:28:10,150 --> 00:28:15,220
frames a second so we're I wasn't on

644
00:28:12,700 --> 00:28:18,160
cracker sorry about that I just go gal

645
00:28:15,220 --> 00:28:19,690
carry away anyway so if that's the kind

646
00:28:18,160 --> 00:28:21,850
of cycles that we're back like we can

647
00:28:19,690 --> 00:28:23,799
already confirm what we know to be true

648
00:28:21,849 --> 00:28:25,750
which is nice which is that if you look

649
00:28:23,799 --> 00:28:29,649
at this right you can see that it's very

650
00:28:25,750 --> 00:28:31,269
Sutter eight right and you can see that

651
00:28:29,650 --> 00:28:32,530
it's not at all a reasonable number of

652
00:28:31,269 --> 00:28:34,779
frames per second that we would want to

653
00:28:32,529 --> 00:28:37,000
play at and our cycle count indicates

654
00:28:34,779 --> 00:28:38,440
that as well it you know it's obviously

655
00:28:37,000 --> 00:28:39,880
reporting a cycle count that's

656
00:28:38,440 --> 00:28:44,980
indefinitely higher than what we could

657
00:28:39,880 --> 00:28:47,830
hope to actually ship with right so okay

658
00:28:44,980 --> 00:28:49,450
so the next step is taking a look at how

659
00:28:47,829 --> 00:28:51,579
many cycles were actually spending in

660
00:28:49,450 --> 00:28:53,950
any particular place right and like I

661
00:28:51,579 --> 00:28:56,019
said what we'd like to do is sort of

662
00:28:53,950 --> 00:28:59,890
start to gather a little bit of an

663
00:28:56,019 --> 00:29:03,579
opinion about where that time is being

664
00:28:59,890 --> 00:29:05,470
spent so let's go ahead and make another

665
00:29:03,579 --> 00:29:08,799
one in here right just to see how long

666
00:29:05,470 --> 00:29:10,450
for example you know maybe we'll see how

667
00:29:08,799 --> 00:29:12,579
long rendering takes and we'll see how

668
00:29:10,450 --> 00:29:15,549
long simulation takes or stuff like that

669
00:29:12,579 --> 00:29:18,129
right so what we could do for example

670
00:29:15,549 --> 00:29:19,690
we've got a routine which does our rent

671
00:29:18,130 --> 00:29:21,910
which does all of our render retirement

672
00:29:19,690 --> 00:29:24,670
right it's the render group to output

673
00:29:21,910 --> 00:29:27,970
function and so what I can do there is I

674
00:29:24,670 --> 00:29:30,700
can do begin time block like so and I

675
00:29:27,970 --> 00:29:33,269
can do you know stick an ID in here

676
00:29:30,700 --> 00:29:38,289
which is basically debug cycle counter

677
00:29:33,269 --> 00:29:39,670
render group to output that and what I

678
00:29:38,289 --> 00:29:42,269
can do is I can just go ahead and say

679
00:29:39,670 --> 00:29:42,269
begin that

680
00:29:43,170 --> 00:29:50,400
and and that not at the bottom right and

681
00:29:48,450 --> 00:29:52,860
now what that will show us is that will

682
00:29:50,400 --> 00:29:55,530
also show us mm-hmm oh of course

683
00:29:52,859 --> 00:29:57,419
right we got to get to the next thing so

684
00:29:55,529 --> 00:29:59,250
the next problem that we have right is

685
00:29:57,420 --> 00:30:01,800
obviously that these debug cycle

686
00:29:59,250 --> 00:30:03,529
counters are you know we would have to

687
00:30:01,799 --> 00:30:05,460
pass them around to everything and

688
00:30:03,529 --> 00:30:11,639
normally that's something that you would

689
00:30:05,460 --> 00:30:13,350
probably want to do but in this case it

690
00:30:11,640 --> 00:30:15,120
would be very cumbersome right what

691
00:30:13,349 --> 00:30:17,429
we're trying to do is kind of jump in

692
00:30:15,119 --> 00:30:18,779
here do some profiling and jump out we

693
00:30:17,430 --> 00:30:20,460
don't really want to alter the

694
00:30:18,779 --> 00:30:23,609
architecture of our program necessarily

695
00:30:20,460 --> 00:30:26,160
to handle that right and so what we

696
00:30:23,609 --> 00:30:28,049
probably want to do somewhere here is do

697
00:30:26,160 --> 00:30:29,610
is use a global variable that's like

698
00:30:28,049 --> 00:30:33,029
some kind of a debug global memory

699
00:30:29,609 --> 00:30:37,259
variable right to be able to access

700
00:30:33,029 --> 00:30:39,569
stuff like this even when we shouldn't

701
00:30:37,259 --> 00:30:41,519
have access to it right and we would

702
00:30:39,569 --> 00:30:44,849
want this to be something that's defined

703
00:30:41,519 --> 00:30:46,980
only in this internal mode so that we

704
00:30:44,849 --> 00:30:50,219
know that when we compile the game for

705
00:30:46,980 --> 00:30:53,279
release no actual code is using it right

706
00:30:50,220 --> 00:30:55,140
so we want that global to disappear just

707
00:30:53,279 --> 00:30:57,180
in case somebody gets the wrong idea at

708
00:30:55,140 --> 00:30:58,470
some point and actually tries to use it

709
00:30:57,180 --> 00:31:00,810
for something which would be very bad

710
00:30:58,470 --> 00:31:03,390
because we're not expecting anyone to so

711
00:31:00,809 --> 00:31:05,970
we want it to go away basically when we

712
00:31:03,390 --> 00:31:07,650
are not drive in there and well you know

713
00:31:05,970 --> 00:31:09,210
what while I'm at this let me go ahead

714
00:31:07,650 --> 00:31:11,009
and make sure that these two macros

715
00:31:09,210 --> 00:31:13,500
compile out entirely on other platforms

716
00:31:11,009 --> 00:31:15,809
so that they don't do anything all right

717
00:31:13,500 --> 00:31:17,460
so if we want to do that right what we

718
00:31:15,809 --> 00:31:19,710
could do is say all right there's some

719
00:31:17,460 --> 00:31:20,940
external variable right that everyone

720
00:31:19,710 --> 00:31:25,559
can access it's called

721
00:31:20,940 --> 00:31:29,580
debug global memory right like so and it

722
00:31:25,559 --> 00:31:33,569
is a you know a game memory pointer like

723
00:31:29,579 --> 00:31:35,579
this and you know everybody who does

724
00:31:33,569 --> 00:31:38,099
those it's going to go ahead and access

725
00:31:35,579 --> 00:31:41,099
those right and so all I have to do now

726
00:31:38,099 --> 00:31:43,679
is I have to inside the actual game code

727
00:31:41,099 --> 00:31:47,699
I have to make sure that I set that in

728
00:31:43,680 --> 00:31:51,360
game update and render right and this is

729
00:31:47,700 --> 00:31:54,680
going to be obviously only if handmade

730
00:31:51,359 --> 00:31:54,679
internal is valid

731
00:31:54,690 --> 00:31:58,150
so that's it

732
00:31:56,650 --> 00:31:59,830
and that's all we really need to do

733
00:31:58,150 --> 00:32:02,050
there - just to make sure that we always

734
00:31:59,829 --> 00:32:04,269
have access to that this it's nothing

735
00:32:02,049 --> 00:32:06,490
fancy but now it compiles in and out and

736
00:32:04,269 --> 00:32:08,889
now we can get those counters anytime we

737
00:32:06,490 --> 00:32:13,059
want to right or at least we should be

738
00:32:08,890 --> 00:32:15,759
able to all right so now if we take a

739
00:32:13,059 --> 00:32:17,319
look at what's going on you know you can

740
00:32:15,759 --> 00:32:19,960
see our debug cycle counts being

741
00:32:17,319 --> 00:32:22,569
registered there and if you take a look

742
00:32:19,960 --> 00:32:24,069
here what you can see is exactly kind of

743
00:32:22,569 --> 00:32:26,079
what we already knew to be true right

744
00:32:24,069 --> 00:32:28,750
but you can look at sort of the

745
00:32:26,079 --> 00:32:31,589
difference between those and notice that

746
00:32:28,750 --> 00:32:34,299
you know if I were to take for example

747
00:32:31,589 --> 00:32:35,740
if I were to take this which is the

748
00:32:34,299 --> 00:32:37,960
total amount of time we're spending in

749
00:32:35,740 --> 00:32:40,210
the game and subtract from it the total

750
00:32:37,960 --> 00:32:43,210
amount of time spent retiring the render

751
00:32:40,210 --> 00:32:46,420
code you can see that our entire game is

752
00:32:43,210 --> 00:32:48,370
only taking 681 thousand cycles right

753
00:32:46,420 --> 00:32:51,610
like everything that happens in the game

754
00:32:48,369 --> 00:32:52,239
is taking 681 thousand cycles except the

755
00:32:51,609 --> 00:32:54,759
renderer

756
00:32:52,240 --> 00:32:59,019
which takes the rest of the time it

757
00:32:54,759 --> 00:33:01,599
takes the other 300 million some odds

758
00:32:59,019 --> 00:33:09,009
are you know rough somewhere close of

759
00:33:01,599 --> 00:33:10,209
close to that many cycles right so

760
00:33:09,009 --> 00:33:12,579
already you can see we're starting again

761
00:33:10,210 --> 00:33:14,019
a little bit of a picture right this is

762
00:33:12,579 --> 00:33:16,089
far from a precision strike at this

763
00:33:14,019 --> 00:33:17,859
point but you can kind of see that we're

764
00:33:16,089 --> 00:33:20,259
already starting to confirm what we

765
00:33:17,859 --> 00:33:21,849
already knew based on the fact that we

766
00:33:20,259 --> 00:33:24,460
could very easily perceive the slowdown

767
00:33:21,849 --> 00:33:26,139
so it like I said in this case it's not

768
00:33:24,460 --> 00:33:28,680
really as investigative because it's not

769
00:33:26,140 --> 00:33:31,210
like we have no idea what's slow right

770
00:33:28,680 --> 00:33:33,610
so in this case we've we can see very

771
00:33:31,210 --> 00:33:35,860
clearly how many cycles that's taking

772
00:33:33,609 --> 00:33:38,199
and so what I'd like to do now is I'd

773
00:33:35,859 --> 00:33:40,599
like to do just one more step of that

774
00:33:38,200 --> 00:33:42,850
again just to kind of sort of show you

775
00:33:40,599 --> 00:33:44,980
you know we're easing into this here I'd

776
00:33:42,849 --> 00:33:47,649
like to do one more step of that and I'd

777
00:33:44,980 --> 00:33:50,259
like to go ahead and inside our draw

778
00:33:47,650 --> 00:33:53,170
rectangle slowly I just like to confirm

779
00:33:50,259 --> 00:33:55,150
that draw rectangle slowly is actually

780
00:33:53,170 --> 00:33:57,820
where our cycles are being spent right

781
00:33:55,150 --> 00:33:59,290
because again you know that was just my

782
00:33:57,819 --> 00:34:01,419
assumption and it was a good assumption

783
00:33:59,289 --> 00:34:02,680
in this case because we saw it get slow

784
00:34:01,420 --> 00:34:04,570
and we switched that routine which is

785
00:34:02,680 --> 00:34:06,310
like a very clear indication but a lot

786
00:34:04,569 --> 00:34:07,389
of times you may have a hunch of

787
00:34:06,309 --> 00:34:08,829
where the performance is going but you

788
00:34:07,390 --> 00:34:10,510
don't actually know and you never want

789
00:34:08,829 --> 00:34:12,009
to axe on that hunch until you actually

790
00:34:10,510 --> 00:34:13,480
confirm it because you may be wrong and

791
00:34:12,010 --> 00:34:15,520
then you just spent a whole bunch of

792
00:34:13,480 --> 00:34:16,510
time optimizing something that actually

793
00:34:15,519 --> 00:34:18,639
wasn't the problem

794
00:34:16,510 --> 00:34:20,320
right and that's never good so you

795
00:34:18,639 --> 00:34:22,629
always want to make sure that you

796
00:34:20,320 --> 00:34:24,789
actually know what the problem is before

797
00:34:22,630 --> 00:34:26,260
you try to fix it right it sounds

798
00:34:24,789 --> 00:34:27,670
obvious but you'd be surprised so many

799
00:34:26,260 --> 00:34:28,990
people off to my stuff without ever

800
00:34:27,670 --> 00:34:33,190
actually sticking out where the slow

801
00:34:28,989 --> 00:34:37,779
part is right not a good thing okay so

802
00:34:33,190 --> 00:34:40,329
moving on if I run this now and you take

803
00:34:37,780 --> 00:34:42,460
a look at those cycle counts right you

804
00:34:40,329 --> 00:34:45,880
can again see that it's exactly in line

805
00:34:42,460 --> 00:34:48,010
with what we would expect right you can

806
00:34:45,880 --> 00:34:50,380
see that pretty much all of our time is

807
00:34:48,010 --> 00:34:53,110
being spent in that draw rectangle

808
00:34:50,380 --> 00:34:54,670
slowly call and because the difference

809
00:34:53,110 --> 00:34:56,230
between these is kind of minimal now

810
00:34:54,670 --> 00:34:57,309
there is a little bit more you can see

811
00:34:56,230 --> 00:34:59,860
that the amount of time spent in the

812
00:34:57,309 --> 00:35:01,119
game is actually small compared to the

813
00:34:59,860 --> 00:35:02,500
amount of time spent in the renderer

814
00:35:01,119 --> 00:35:03,969
which is small compared to the amount of

815
00:35:02,500 --> 00:35:06,400
time just been to draw a tiny triangle

816
00:35:03,969 --> 00:35:08,169
slowly right like so there actually is

817
00:35:06,400 --> 00:35:09,639
it's probably like the clear or things

818
00:35:08,170 --> 00:35:13,510
like that inside the renderer that are

819
00:35:09,639 --> 00:35:14,859
still taking a bit of time right but

820
00:35:13,510 --> 00:35:18,130
that's a you know that's kind of a good

821
00:35:14,860 --> 00:35:21,910
example but here's a thing that we don't

822
00:35:18,130 --> 00:35:24,250
know right we don't really know if draw

823
00:35:21,909 --> 00:35:26,619
rectangle slowly is slow because it is

824
00:35:24,250 --> 00:35:29,019
slow or if it's because it's called

825
00:35:26,619 --> 00:35:30,429
too often right now we kind of do

826
00:35:29,019 --> 00:35:31,960
because I kind of have an idea of how

827
00:35:30,429 --> 00:35:33,969
often it's called right but technically

828
00:35:31,960 --> 00:35:36,400
let's go ahead and confirm that right

829
00:35:33,969 --> 00:35:38,739
and it's pretty easy for us to confirm

830
00:35:36,400 --> 00:35:41,200
that by extending our counter system

831
00:35:38,739 --> 00:35:42,969
just a little bit so in addition to the

832
00:35:41,199 --> 00:35:46,179
cycle count I'm gonna go ahead and here

833
00:35:42,969 --> 00:35:48,250
and and do a call count right or like an

834
00:35:46,179 --> 00:35:50,679
execution count what should I do this

835
00:35:48,250 --> 00:35:52,150
kick count let's call it right so the

836
00:35:50,679 --> 00:35:54,279
number of times this code path is

837
00:35:52,150 --> 00:35:57,570
actually hit and that's really easy for

838
00:35:54,280 --> 00:36:01,030
me to do all I have to do in here is

839
00:35:57,570 --> 00:36:03,280
when I go ahead and retire this counter

840
00:36:01,030 --> 00:36:06,460
here I can also in addition to changing

841
00:36:03,280 --> 00:36:09,280
the are DTSC I can go ahead and change

842
00:36:06,460 --> 00:36:11,500
the hit count as well to be you know one

843
00:36:09,280 --> 00:36:13,090
one more than it was and that will tell

844
00:36:11,500 --> 00:36:15,130
me how many times I've actually gone

845
00:36:13,090 --> 00:36:18,430
through that particular block and

846
00:36:15,130 --> 00:36:19,929
actually executed that particular block

847
00:36:18,429 --> 00:36:24,448
right

848
00:36:19,929 --> 00:36:27,939
and so in order to in order to do that

849
00:36:24,449 --> 00:36:29,679
what I want to do is I want to go back

850
00:36:27,938 --> 00:36:31,748
out to that win32 handmade where I'm

851
00:36:29,679 --> 00:36:33,519
printing these out and I want to

852
00:36:31,748 --> 00:36:35,889
basically say I want to extend this

853
00:36:33,518 --> 00:36:38,438
print out a little bit to sort of have

854
00:36:35,889 --> 00:36:42,098
like you know the cycle count so you

855
00:36:38,438 --> 00:36:45,728
know something like this cycles and then

856
00:36:42,099 --> 00:36:47,259
I also want to say percent do hits right

857
00:36:45,728 --> 00:36:49,328
so I want to be able to say how many

858
00:36:47,259 --> 00:36:51,159
hits and how many cycles and furthermore

859
00:36:49,329 --> 00:36:53,829
while we're at it we might as well do

860
00:36:51,159 --> 00:36:59,229
cycles per hit right we might as well do

861
00:36:53,829 --> 00:37:00,189
a little like cycle per hit here and the

862
00:36:59,228 --> 00:37:02,228
other thing you know what I could do

863
00:37:00,188 --> 00:37:04,568
because we don't want to divide by zero

864
00:37:02,228 --> 00:37:06,428
but we also don't care if a counter

865
00:37:04,568 --> 00:37:08,679
actually has never had any hits what we

866
00:37:06,429 --> 00:37:11,409
can do is say if the hit count is

867
00:37:08,679 --> 00:37:16,179
greater if the hit counts actually

868
00:37:11,409 --> 00:37:17,679
something other than zero we go ahead we

869
00:37:16,179 --> 00:37:19,389
go ahead and print you back clear it

870
00:37:17,679 --> 00:37:20,588
otherwise we ignore it so these are just

871
00:37:19,389 --> 00:37:24,848
the places where the program actually

872
00:37:20,588 --> 00:37:27,248
spent any time so we've got counter

873
00:37:24,849 --> 00:37:28,929
index we've got the cycle count we've

874
00:37:27,248 --> 00:37:31,388
got the hit count and then we've also

875
00:37:28,929 --> 00:37:34,418
got the cycle count divided by the hit

876
00:37:31,389 --> 00:37:36,249
count right and that's how long it took

877
00:37:34,418 --> 00:37:38,379
on average to go through that function

878
00:37:36,248 --> 00:37:40,448
right not a particularly useful measure

879
00:37:38,380 --> 00:37:42,579
at the end of the day but you know we

880
00:37:40,449 --> 00:37:49,719
could print it out and so we printed it

881
00:37:42,579 --> 00:37:51,009
out right all right so you know there's

882
00:37:49,719 --> 00:37:55,119
already kind of some interesting things

883
00:37:51,009 --> 00:37:56,798
here right in fact just doing that we

884
00:37:55,119 --> 00:38:00,219
saw something that I didn't actually

885
00:37:56,798 --> 00:38:03,398
know didn't think about which is that

886
00:38:00,219 --> 00:38:05,019
we're calling the renderer 13 times and

887
00:38:03,398 --> 00:38:07,088
I believe that's because we're

888
00:38:05,018 --> 00:38:08,828
refreshing ground chunks right but you

889
00:38:07,088 --> 00:38:10,058
can see that right here and I wasn't

890
00:38:08,829 --> 00:38:13,089
even thinking that I was thinking it was

891
00:38:10,059 --> 00:38:15,819
just called once but it's not right and

892
00:38:13,088 --> 00:38:18,159
then you can see here we're calling 64

893
00:38:15,818 --> 00:38:22,438
we have 64 times that it's actually

894
00:38:18,159 --> 00:38:26,769
calling the the draw a rectangle slowly

895
00:38:22,438 --> 00:38:28,778
so you can see that based on these

896
00:38:26,768 --> 00:38:30,488
numbers here what we can see is it's not

897
00:38:28,778 --> 00:38:31,599
a question of drawing too many triangles

898
00:38:30,489 --> 00:38:32,760
or such don't say too many rectangles

899
00:38:31,599 --> 00:38:34,110
it's a question of

900
00:38:32,760 --> 00:38:36,420
the rectangles themselves are large

901
00:38:34,110 --> 00:38:38,490
enough and slow enough that we're

902
00:38:36,420 --> 00:38:42,289
spending a ton of time just to draw any

903
00:38:38,489 --> 00:38:44,849
given one of them right so there you go

904
00:38:42,289 --> 00:38:46,409
so most of this stuff again is just

905
00:38:44,849 --> 00:38:47,819
confirming what we already know but it's

906
00:38:46,409 --> 00:38:49,469
usually a good idea to confirm this

907
00:38:47,820 --> 00:38:50,820
stuff and more importantly it's a good

908
00:38:49,469 --> 00:38:52,919
idea to know how to do this because

909
00:38:50,820 --> 00:38:54,720
sometimes you don't know where the time

910
00:38:52,920 --> 00:38:56,639
is being spent and it's pretty simple

911
00:38:54,719 --> 00:38:58,949
just do a little hierarchical cascading

912
00:38:56,639 --> 00:39:06,239
bracket like I did just now to figure

913
00:38:58,949 --> 00:39:08,159
out where it is okay now there's a bunch

914
00:39:06,239 --> 00:39:12,179
of other stuff that we could do but I

915
00:39:08,159 --> 00:39:13,619
want to do one more here right which is

916
00:39:12,179 --> 00:39:17,719
I want to put in one that I'm only gonna

917
00:39:13,619 --> 00:39:20,400
put in temporarily and what I want to do

918
00:39:17,719 --> 00:39:23,459
is I want to go ahead and figure out how

919
00:39:20,400 --> 00:39:24,840
many pixels were actually you know how

920
00:39:23,460 --> 00:39:27,150
many how many pixels are we actually

921
00:39:24,840 --> 00:39:30,510
retiring so if I go into our render

922
00:39:27,150 --> 00:39:32,280
group here and we're in draw rectangle

923
00:39:30,510 --> 00:39:35,310
slowly I want to figure out how many

924
00:39:32,280 --> 00:39:37,860
pixels were actually filling just at

925
00:39:35,309 --> 00:39:39,570
this you know particular moment so each

926
00:39:37,860 --> 00:39:42,150
time through this loop this is a pixel

927
00:39:39,570 --> 00:39:46,260
right so what I want to do is I guess

928
00:39:42,150 --> 00:39:48,000
I'm just gonna you know do it the most

929
00:39:46,260 --> 00:39:51,140
straightforward way I'm just gonna go

930
00:39:48,000 --> 00:39:54,030
ahead and count the internal block right

931
00:39:51,139 --> 00:39:57,239
so I'm gonna call this like you know

932
00:39:54,030 --> 00:39:59,370
fill pixel or something right and I'm

933
00:39:57,239 --> 00:40:02,899
gonna go ahead and do that from here

934
00:39:59,369 --> 00:40:06,779
down to the place where we actually

935
00:40:02,900 --> 00:40:09,740
retire the pixel right like so that

936
00:40:06,780 --> 00:40:11,670
makes sense so this is fill pixel and

937
00:40:09,739 --> 00:40:13,009
you know what I'm gonna do something

938
00:40:11,670 --> 00:40:16,500
else too

939
00:40:13,010 --> 00:40:19,020
I'm gonna do something else I'm gonna

940
00:40:16,500 --> 00:40:21,090
call this test pixel and I'm gonna call

941
00:40:19,019 --> 00:40:22,710
this fill pixel so we can actually see

942
00:40:21,090 --> 00:40:24,990
how many pixels we fill and how many

943
00:40:22,710 --> 00:40:26,849
pixels we test right does that make

944
00:40:24,989 --> 00:40:30,919
sense so we can kind of see the

945
00:40:26,849 --> 00:40:33,900
difference between those like say okay

946
00:40:30,920 --> 00:40:37,110
and in order to do that I would say just

947
00:40:33,900 --> 00:40:40,670
have to add two more in here this will

948
00:40:37,110 --> 00:40:44,699
be our test pixel and this

949
00:40:40,670 --> 00:40:46,019
okay so now those are not particularly

950
00:40:44,699 --> 00:40:49,048
interesting necessary for the cycle

951
00:40:46,018 --> 00:40:51,328
counts what they're interested in what

952
00:40:49,048 --> 00:40:54,059
I'm interested in seeing there is what's

953
00:40:51,329 --> 00:40:56,099
our actual fill count how many pixels

954
00:40:54,059 --> 00:40:59,039
are we actually filling versus testing

955
00:40:56,099 --> 00:41:01,349
right and what you can see there just

956
00:40:59,039 --> 00:41:02,849
right off the bat obviously we're

957
00:41:01,349 --> 00:41:05,068
filling a tremendous number of pixels

958
00:41:02,849 --> 00:41:07,380
but what you can also see is that we

959
00:41:05,068 --> 00:41:09,690
tend not to be wasting too much time

960
00:41:07,380 --> 00:41:12,660
there most of the pixels we test are

961
00:41:09,690 --> 00:41:15,409
pixels we actually do fill right and so

962
00:41:12,659 --> 00:41:17,548
that's pretty that's pretty good but

963
00:41:15,409 --> 00:41:22,798
there's one more thing that I would like

964
00:41:17,548 --> 00:41:25,349
to check out here right and let's go

965
00:41:22,798 --> 00:41:27,088
ahead and and do that inside the render

966
00:41:25,349 --> 00:41:29,940
group as well one more thing that I

967
00:41:27,088 --> 00:41:33,958
would like to check is how often do we

968
00:41:29,940 --> 00:41:36,420
actually need to fill that pixel because

969
00:41:33,958 --> 00:41:38,098
remember we we have alpha blending right

970
00:41:36,420 --> 00:41:40,949
and so we would be interesting to know

971
00:41:38,099 --> 00:41:42,930
how often we miss as far as alpha is

972
00:41:40,949 --> 00:41:44,670
concerned well you know what I'm not

973
00:41:42,929 --> 00:41:45,538
good I take that back I'm not quite

974
00:41:44,670 --> 00:41:46,829
gonna do that yet

975
00:41:45,539 --> 00:41:49,709
that might be a little premature because

976
00:41:46,829 --> 00:41:51,749
right now we don't really have enough

977
00:41:49,708 --> 00:41:53,489
stuff on the screen to really get a fair

978
00:41:51,748 --> 00:41:57,629
measure of that so that's probably a

979
00:41:53,489 --> 00:41:59,699
little unfair but unsurprisingly our

980
00:41:57,630 --> 00:42:02,039
fill pixel and our test pixel are very

981
00:41:59,699 --> 00:42:03,358
similar and the reason for that is

982
00:42:02,039 --> 00:42:07,829
because we're just we're not really

983
00:42:03,358 --> 00:42:09,179
rotating much at the moment right in

984
00:42:07,829 --> 00:42:11,430
fact if anything I guess I would have

985
00:42:09,179 --> 00:42:13,288
expected that to be a little bit

986
00:42:11,429 --> 00:42:15,389
different it feels like that's probably

987
00:42:13,289 --> 00:42:16,709
me that that might even be part of the

988
00:42:15,389 --> 00:42:18,420
fact that we haven't quite gotten a lot

989
00:42:16,708 --> 00:42:19,558
of our edge stuff correct because you

990
00:42:18,420 --> 00:42:22,380
would think these would actually be

991
00:42:19,559 --> 00:42:24,150
exact right because we're never rotating

992
00:42:22,380 --> 00:42:28,079
so in theory you should pretty much

993
00:42:24,150 --> 00:42:29,608
always fill all of the Piett that pretty

994
00:42:28,079 --> 00:42:31,079
much exact because we should if you're

995
00:42:29,608 --> 00:42:32,670
not rotating we should always be able to

996
00:42:31,079 --> 00:42:38,430
know exactly which pixels to iterate

997
00:42:32,670 --> 00:42:40,199
over so that's a bit of a an obvious red

998
00:42:38,429 --> 00:42:41,788
flag right there that we could that we

999
00:42:40,199 --> 00:42:42,809
should be computing our bounds

1000
00:42:41,789 --> 00:42:47,099
differently or computing our edge

1001
00:42:42,809 --> 00:42:49,470
functions differently right so that's

1002
00:42:47,099 --> 00:42:53,500
something to think about as well

1003
00:42:49,469 --> 00:42:56,980
let's see here so we are talking about

1004
00:42:53,500 --> 00:42:58,869
filling this many pixels right that's

1005
00:42:56,980 --> 00:43:00,159
how many pixels were actually filling so

1006
00:42:58,869 --> 00:43:02,889
I'm going to take a look at that number

1007
00:43:00,159 --> 00:43:05,799
just for a second go over here to

1008
00:43:02,889 --> 00:43:08,710
scratch buffer so this is how many

1009
00:43:05,800 --> 00:43:12,010
pixels that we actually filled right or

1010
00:43:08,710 --> 00:43:14,409
I should say tested so at our current

1011
00:43:12,010 --> 00:43:16,930
resolution how many pixels are actually

1012
00:43:14,409 --> 00:43:23,409
on the screen would be the other

1013
00:43:16,929 --> 00:43:29,289
question right and it's 960 x 540 which

1014
00:43:23,409 --> 00:43:31,329
is 518 let's do that again want to know

1015
00:43:29,289 --> 00:43:34,239
how I can like there's got to be some

1016
00:43:31,329 --> 00:43:37,569
way to copy that into the buff into the

1017
00:43:34,239 --> 00:43:40,239
oh yeah it automatically puts it in the

1018
00:43:37,570 --> 00:43:44,260
kill ring yeah nice job you max all

1019
00:43:40,239 --> 00:43:46,629
right so that's the tested number of

1020
00:43:44,260 --> 00:43:48,100
pixels and that's the total so if we

1021
00:43:46,630 --> 00:43:51,030
take a look at these two here right you

1022
00:43:48,099 --> 00:43:54,279
can kind of see that actually right now

1023
00:43:51,030 --> 00:43:57,100
we're not really operating on that many

1024
00:43:54,280 --> 00:43:59,370
more pixels than the total number that

1025
00:43:57,099 --> 00:44:02,739
are even on the screen and that you know

1026
00:43:59,369 --> 00:44:05,469
suggests to me anyway that we're not

1027
00:44:02,739 --> 00:44:07,869
that bad off in terms of what's called

1028
00:44:05,469 --> 00:44:09,819
over draw and over draws just of course

1029
00:44:07,869 --> 00:44:12,029
how many times you like fill any given

1030
00:44:09,820 --> 00:44:14,320
pixel on the screen because remember

1031
00:44:12,030 --> 00:44:18,880
let's go ahead and make this a little

1032
00:44:14,320 --> 00:44:24,640
more explicit here right Duke Duke Duke

1033
00:44:18,880 --> 00:44:29,910
to do so we have this concept of over

1034
00:44:24,639 --> 00:44:35,699
draw right which is essentially how many

1035
00:44:29,909 --> 00:44:35,699
times do you touch each pixel

1036
00:44:38,110 --> 00:44:46,840
right because we kind of know what our

1037
00:44:41,659 --> 00:44:51,619
lower bound is we know that we have 518

1038
00:44:46,840 --> 00:44:55,519
400 pixels total so if we were to make a

1039
00:44:51,619 --> 00:44:57,469
renderer that only ever touched exactly

1040
00:44:55,519 --> 00:44:59,059
each pix on the screen once and put

1041
00:44:57,469 --> 00:45:02,500
exactly the right color there just in

1042
00:44:59,059 --> 00:45:05,509
one go it would have to do exactly 500

1043
00:45:02,500 --> 00:45:08,000
18,000 operations right that's like what

1044
00:45:05,510 --> 00:45:09,590
it would take and so overdraw is the

1045
00:45:08,000 --> 00:45:11,150
measure of how many times you have to

1046
00:45:09,590 --> 00:45:12,829
revisit pixels because for example

1047
00:45:11,150 --> 00:45:15,889
you've lit one thing on top of another

1048
00:45:12,829 --> 00:45:17,900
you are now over writing work you did

1049
00:45:15,889 --> 00:45:20,449
before right you're essentially wasting

1050
00:45:17,900 --> 00:45:25,670
the work that's on the underside and so

1051
00:45:20,449 --> 00:45:29,119
this speaks directly over draw basically

1052
00:45:25,670 --> 00:45:31,730
is render efficiency right it has

1053
00:45:29,119 --> 00:45:33,500
nothing to do with the performance per

1054
00:45:31,730 --> 00:45:35,690
se of the render it's not how fast the

1055
00:45:33,500 --> 00:45:37,639
renderer can actually fill pixels what

1056
00:45:35,690 --> 00:45:40,579
it is is how efficient is the renderer

1057
00:45:37,639 --> 00:45:43,309
right how often does it have to redo

1058
00:45:40,579 --> 00:45:44,809
those those pixels tell us exactly how

1059
00:45:43,309 --> 00:45:46,969
efficient our render is being so one

1060
00:45:44,809 --> 00:45:48,829
thing that we do know is as these

1061
00:45:46,969 --> 00:45:50,659
numbers diverge as the total number of

1062
00:45:48,829 --> 00:45:52,369
tested pixels diverges from the number

1063
00:45:50,659 --> 00:45:53,929
of pixels on the screen further and

1064
00:45:52,369 --> 00:45:55,219
further we're getting further and

1065
00:45:53,929 --> 00:45:57,649
further away from apt all right now

1066
00:45:55,219 --> 00:46:01,250
we're below 2 which isn't too bad

1067
00:45:57,650 --> 00:46:02,660
actually but it's also the case that if

1068
00:46:01,250 --> 00:46:05,239
you run the game there's nothing on the

1069
00:46:02,659 --> 00:46:06,589
screen right now right you know we're

1070
00:46:05,239 --> 00:46:08,419
not seeing a whole lot of things

1071
00:46:06,590 --> 00:46:10,490
happening on the screen so that number

1072
00:46:08,420 --> 00:46:11,900
will probably go up as we go and it's

1073
00:46:10,489 --> 00:46:13,879
probably we'll have to create some test

1074
00:46:11,900 --> 00:46:15,950
cases to force it up in the meantime

1075
00:46:13,880 --> 00:46:19,340
just so we can work on getting that

1076
00:46:15,949 --> 00:46:23,259
number down right how much time we got

1077
00:46:19,340 --> 00:46:23,260
we're got about 10 minutes left

1078
00:46:26,880 --> 00:46:41,500
all right so let's think about this what

1079
00:46:36,369 --> 00:46:43,750
have we done what have we done so we now

1080
00:46:41,500 --> 00:46:46,869
know some of these things that I said

1081
00:46:43,750 --> 00:46:48,730
are the first step we did that work we

1082
00:46:46,869 --> 00:46:51,159
now know exactly where we are slow and

1083
00:46:48,730 --> 00:46:55,449
we do know some characteristics about

1084
00:46:51,159 --> 00:46:56,859
that thing right we know that right now

1085
00:46:55,449 --> 00:46:58,899
it's not having a particularly large

1086
00:46:56,860 --> 00:47:01,210
problem with overdraw we know that it is

1087
00:46:58,900 --> 00:47:05,440
having a particularly large problem with

1088
00:47:01,210 --> 00:47:08,079
speed because we can also look down here

1089
00:47:05,440 --> 00:47:10,650
and see how many cycles per pixel we are

1090
00:47:08,079 --> 00:47:13,150
spending right we are actually spending

1091
00:47:10,650 --> 00:47:15,940
400 cycles per pixel

1092
00:47:13,150 --> 00:47:17,710
it would appear right if you actually do

1093
00:47:15,940 --> 00:47:19,360
this take a look at what this is saying

1094
00:47:17,710 --> 00:47:21,340
it's saying that this is how many pixels

1095
00:47:19,360 --> 00:47:25,180
and and if we divide this number by this

1096
00:47:21,340 --> 00:47:26,559
number we get 400 right so 400 cycles

1097
00:47:25,179 --> 00:47:29,230
per pixel is how much we're spending

1098
00:47:26,559 --> 00:47:31,090
right now and that brings us to the next

1099
00:47:29,230 --> 00:47:34,240
step here which is make an estimate

1100
00:47:31,090 --> 00:47:36,309
right is that good or bad

1101
00:47:34,239 --> 00:47:38,289
where where is that for it as I close

1102
00:47:36,309 --> 00:47:39,849
for pixel you know are we gonna get much

1103
00:47:38,289 --> 00:47:44,800
better than that you know what's what's

1104
00:47:39,849 --> 00:47:46,089
going on right so let's start by again

1105
00:47:44,800 --> 00:47:49,870
doing a little bit of experimentation

1106
00:47:46,090 --> 00:47:51,789
here just to sort of get a little bit

1107
00:47:49,869 --> 00:47:54,909
more of a sense of what's happening

1108
00:47:51,789 --> 00:47:56,559
let's just assume that the only thing we

1109
00:47:54,909 --> 00:47:59,529
were going to do we were not going to do

1110
00:47:56,559 --> 00:48:00,880
the normal map lighting right because at

1111
00:47:59,530 --> 00:48:02,380
the end of the day the normal map

1112
00:48:00,880 --> 00:48:03,610
lighting if we couldn't get it to work

1113
00:48:02,380 --> 00:48:05,920
fast enough us off render we could turn

1114
00:48:03,610 --> 00:48:07,690
it off but also we don't need to use it

1115
00:48:05,920 --> 00:48:10,119
for some of the operations right we

1116
00:48:07,690 --> 00:48:11,650
don't need to use it for like the ground

1117
00:48:10,119 --> 00:48:13,539
compositing and stuff like that so I

1118
00:48:11,650 --> 00:48:16,809
want to take a look and just see how

1119
00:48:13,539 --> 00:48:19,800
slow it actually is in this other case

1120
00:48:16,809 --> 00:48:22,119
where we don't ever do the normal map

1121
00:48:19,800 --> 00:48:26,370
compositing at all right so let's go

1122
00:48:22,119 --> 00:48:29,889
ahead and do that right so here it is

1123
00:48:26,369 --> 00:48:31,809
because again that actually we should we

1124
00:48:29,889 --> 00:48:33,609
weren't passing normal maps down so in

1125
00:48:31,809 --> 00:48:34,840
theory it should have been roughly that

1126
00:48:33,610 --> 00:48:36,849
and you can see that the number is

1127
00:48:34,840 --> 00:48:39,309
pretty close right it's like you know

1128
00:48:36,849 --> 00:48:45,549
375 cycles per pixel something like that

1129
00:48:39,309 --> 00:48:46,900
okay so that's all good if that gets us

1130
00:48:45,550 --> 00:48:48,400
kind of just a little bit more

1131
00:48:46,900 --> 00:48:53,590
information about what we what we need

1132
00:48:48,400 --> 00:48:57,039
to know so that's where we're at now say

1133
00:48:53,590 --> 00:49:00,090
something like that is what's being

1134
00:48:57,039 --> 00:49:02,369
spent at the moment so we have some

1135
00:49:00,090 --> 00:49:05,980
slight loose ends to talk about here

1136
00:49:02,369 --> 00:49:07,809
first of all these are ballpark timings

1137
00:49:05,980 --> 00:49:11,139
which is very important to understand

1138
00:49:07,809 --> 00:49:13,869
our DTSC does not necessarily give you

1139
00:49:11,139 --> 00:49:16,210
some kind of an absolute idea of exactly

1140
00:49:13,869 --> 00:49:19,329
how fast something is and you can tell

1141
00:49:16,210 --> 00:49:22,750
this just by watching the numbers scroll

1142
00:49:19,329 --> 00:49:24,789
by they're different right now the game

1143
00:49:22,750 --> 00:49:26,380
isn't in a different state it's drawing

1144
00:49:24,789 --> 00:49:28,210
the exact same thing right

1145
00:49:26,380 --> 00:49:31,450
nothing here is even animating at the

1146
00:49:28,210 --> 00:49:35,079
moment okay and yet if you actually look

1147
00:49:31,449 --> 00:49:37,199
at what's going on in these numbers here

1148
00:49:35,079 --> 00:49:39,250
you can see that they're fluctuating and

1149
00:49:37,199 --> 00:49:40,839
the ones that are fluctuating are

1150
00:49:39,250 --> 00:49:42,639
specifically the cycle counts not the

1151
00:49:40,840 --> 00:49:44,200
hit counts right because hey the

1152
00:49:42,639 --> 00:49:46,779
programs running deterministically every

1153
00:49:44,199 --> 00:49:49,480
time in terms of what gets executed but

1154
00:49:46,780 --> 00:49:51,610
the cycle counts are non-deterministic

1155
00:49:49,480 --> 00:49:53,650
why is that why do they change each time

1156
00:49:51,610 --> 00:49:55,180
well the answer is of course because

1157
00:49:53,650 --> 00:49:57,490
modern processors are incredibly

1158
00:49:55,179 --> 00:49:58,989
complicated all of that stuff I talked

1159
00:49:57,489 --> 00:50:00,099
about with the latency of going to

1160
00:49:58,989 --> 00:50:02,019
memory and whether things are in the

1161
00:50:00,099 --> 00:50:03,309
cache and those look-ahead windows and

1162
00:50:02,019 --> 00:50:04,869
all that sort of stuff that's happening

1163
00:50:03,309 --> 00:50:06,309
coupled with the fact that we're on a

1164
00:50:04,869 --> 00:50:08,019
multitasking operating system where

1165
00:50:06,309 --> 00:50:09,519
other tasks are doing things your your

1166
00:50:08,019 --> 00:50:13,570
process may be interrupted in the middle

1167
00:50:09,519 --> 00:50:16,239
of things all sorts of sort of unknowns

1168
00:50:13,570 --> 00:50:19,360
are if actually I shouldn't say notes of

1169
00:50:16,239 --> 00:50:22,029
variability is injected into those cycle

1170
00:50:19,360 --> 00:50:25,120
counts such that we can't say

1171
00:50:22,030 --> 00:50:27,820
definitively that they are any specific

1172
00:50:25,119 --> 00:50:30,250
value we can only use them as sort of a

1173
00:50:27,820 --> 00:50:32,410
general figure to show roughly what the

1174
00:50:30,250 --> 00:50:34,750
cycle count is now there are ways of us

1175
00:50:32,409 --> 00:50:35,980
getting that number down and like one of

1176
00:50:34,750 --> 00:50:38,590
the things that we could do and one of

1177
00:50:35,980 --> 00:50:41,289
things we probably will do in the next

1178
00:50:38,590 --> 00:50:42,970
pass but not today I don't know about

1179
00:50:41,289 --> 00:50:44,920
tomorrow but you know at some point in

1180
00:50:42,969 --> 00:50:47,259
the future one of the things that we

1181
00:50:44,920 --> 00:50:49,840
might do is make a loop that run

1182
00:50:47,260 --> 00:50:52,210
something many times and takes the

1183
00:50:49,840 --> 00:50:52,780
lowest cycle count across many runs and

1184
00:50:52,210 --> 00:50:54,760
that's

1185
00:50:52,780 --> 00:50:57,519
designed to see in the best possible

1186
00:50:54,760 --> 00:51:00,280
case how many cycles would this thing

1187
00:50:57,519 --> 00:51:02,650
take right which tries to squeeze out

1188
00:51:00,280 --> 00:51:04,150
that entropy that's in there and look at

1189
00:51:02,650 --> 00:51:05,980
it and also by running the same thing

1190
00:51:04,150 --> 00:51:08,050
over and over and over again you can

1191
00:51:05,980 --> 00:51:09,789
ensure that the stuff that's working on

1192
00:51:08,050 --> 00:51:11,410
is in the cache and try to eliminate

1193
00:51:09,789 --> 00:51:13,480
though so you can you can do things to

1194
00:51:11,409 --> 00:51:15,279
sort of create little sand boxes where

1195
00:51:13,480 --> 00:51:17,889
you can start to sort of poke at

1196
00:51:15,280 --> 00:51:20,560
specific types of cycle counts for

1197
00:51:17,889 --> 00:51:22,210
things but we have not done that now so

1198
00:51:20,559 --> 00:51:24,489
what we're looking at here are ballpark

1199
00:51:22,210 --> 00:51:25,840
cycle counts they are roughly how long

1200
00:51:24,489 --> 00:51:27,609
it takes to do things they're not

1201
00:51:25,840 --> 00:51:28,960
exactly how long it takes to do things

1202
00:51:27,610 --> 00:51:30,730
and it's important to keep that in mind

1203
00:51:28,960 --> 00:51:31,960
so you have to understand when you look

1204
00:51:30,730 --> 00:51:33,219
at numbers when you look at profiling

1205
00:51:31,960 --> 00:51:35,470
numbers in general that's always the

1206
00:51:33,219 --> 00:51:36,699
case you have to know what is the actual

1207
00:51:35,469 --> 00:51:39,039
thing that you're getting this piece of

1208
00:51:36,699 --> 00:51:40,899
information is it super accurate is it

1209
00:51:39,039 --> 00:51:43,929
super inaccurate is it somewhere in

1210
00:51:40,900 --> 00:51:46,000
between etcetera etcetera so that's what

1211
00:51:43,929 --> 00:51:49,739
we know now we've got about five six

1212
00:51:46,000 --> 00:51:49,739
seven minutes left something like that I

1213
00:51:49,949 --> 00:51:56,889
think we started eight minutes in so

1214
00:51:54,099 --> 00:52:00,190
let's take a look at making that

1215
00:51:56,889 --> 00:52:04,480
estimate right what are the things that

1216
00:52:00,190 --> 00:52:06,159
we actually needed to do per pixel right

1217
00:52:04,480 --> 00:52:10,420
what are the things that we actually

1218
00:52:06,159 --> 00:52:13,539
need to do so I'm gonna go ahead and

1219
00:52:10,420 --> 00:52:17,380
grab this loop out here right not

1220
00:52:13,539 --> 00:52:21,699
counting those things there I'm gonna

1221
00:52:17,380 --> 00:52:26,349
grab those out and I am going to take a

1222
00:52:21,699 --> 00:52:29,139
look at how much they cost right so what

1223
00:52:26,349 --> 00:52:30,819
do we have here right this is just

1224
00:52:29,139 --> 00:52:32,409
renaming some variables so that's not

1225
00:52:30,820 --> 00:52:36,190
necessarily something we need to count

1226
00:52:32,409 --> 00:52:38,799
but here's a subtract right so we

1227
00:52:36,190 --> 00:52:44,559
basically have a V to D so we have to do

1228
00:52:38,800 --> 00:52:46,680
two subtractions right right that's two

1229
00:52:44,559 --> 00:52:50,230
subtractions to the X and the y right

1230
00:52:46,679 --> 00:52:52,000
we've got dot products here right

1231
00:52:50,230 --> 00:52:53,740
in fact I guess I'll do them this way

1232
00:52:52,000 --> 00:52:59,650
we've got two subtractions or

1233
00:52:53,739 --> 00:53:04,038
subtractions it's two dot products

1234
00:52:59,650 --> 00:53:08,150
we've got one let's see one two three

1235
00:53:04,039 --> 00:53:10,700
four of those we've got three more

1236
00:53:08,150 --> 00:53:17,680
subtractions in here sorry for more

1237
00:53:10,699 --> 00:53:22,669
subtractions right we've got a negation

1238
00:53:17,679 --> 00:53:24,618
one two two of those and we've got these

1239
00:53:22,670 --> 00:53:26,630
perps in here but those probably can go

1240
00:53:24,619 --> 00:53:31,278
away right the perps are just swizzles

1241
00:53:26,630 --> 00:53:32,510
so those are fine yeah so that's only

1242
00:53:31,278 --> 00:53:34,518
gonna negate one of them because the

1243
00:53:32,510 --> 00:53:36,349
purple negate the other one right so I

1244
00:53:34,518 --> 00:53:38,298
feel like those are pretty

1245
00:53:36,349 --> 00:53:40,099
straightforward as well it's this is

1246
00:53:38,298 --> 00:53:44,358
again a little bit of a ballpark we've

1247
00:53:40,099 --> 00:53:47,000
got four comparisons that we've got to

1248
00:53:44,358 --> 00:53:50,239
do there let's see here we've got to

1249
00:53:47,000 --> 00:53:58,760
create the screen space U and V so we've

1250
00:53:50,239 --> 00:54:01,729
got you know multiplies let's see em

1251
00:53:58,760 --> 00:54:04,250
with Mac's yeah we're gonna have to do

1252
00:54:01,730 --> 00:54:06,798
those so we've got multiplies got two

1253
00:54:04,250 --> 00:54:08,659
there we've got again I'm doing this

1254
00:54:06,798 --> 00:54:09,980
really quickly this is probably we

1255
00:54:08,659 --> 00:54:11,480
should probably actually save this for

1256
00:54:09,980 --> 00:54:16,338
tomorrow but I'm just taking a quick

1257
00:54:11,480 --> 00:54:23,298
look to more multiplies right two more

1258
00:54:16,338 --> 00:54:25,578
dot products in there let's see we've

1259
00:54:23,298 --> 00:54:29,869
got two more multiplies two more

1260
00:54:25,579 --> 00:54:38,650
subtracts or multiplies to Morris

1261
00:54:29,869 --> 00:54:38,650
attracts too much the facts down here

1262
00:54:39,269 --> 00:54:54,840
and then the sampling okay

1263
00:54:49,940 --> 00:54:56,610
so the sampling let's take a look at

1264
00:54:54,840 --> 00:54:59,670
that

1265
00:54:56,610 --> 00:55:02,030
we've got bilinear sample is this guy

1266
00:54:59,670 --> 00:55:06,570
right here how much is in the sampling

1267
00:55:02,030 --> 00:55:09,060
the sampling is gonna be two multiplies

1268
00:55:06,570 --> 00:55:10,500
to adds see the problem with these is

1269
00:55:09,059 --> 00:55:12,599
well we'll see

1270
00:55:10,500 --> 00:55:19,949
so to multiply is two more multiplies in

1271
00:55:12,599 --> 00:55:24,449
there let's see adds got two and those

1272
00:55:19,949 --> 00:55:27,359
let's see these guys are all custom so

1273
00:55:24,449 --> 00:55:29,730
I'm gonna call this bilinear look up

1274
00:55:27,360 --> 00:55:33,269
that's gonna be that's gonna be tricky

1275
00:55:29,730 --> 00:55:37,590
to try and account for then our sr g gb

1276
00:55:33,269 --> 00:55:41,599
bilinear blend got an unpack four by

1277
00:55:37,590 --> 00:55:50,789
eight we've got to do four shifts for

1278
00:55:41,599 --> 00:55:53,929
right four shifts for masks and four

1279
00:55:50,789 --> 00:55:56,400
upconverts let's skip those for now and

1280
00:55:53,929 --> 00:56:00,299
then what else we got after the unpack

1281
00:55:56,400 --> 00:56:04,349
four by eight so we have to do that four

1282
00:56:00,300 --> 00:56:09,060
times and then we've got srgb - linear

1283
00:56:04,349 --> 00:56:12,239
which has to run on each of those like

1284
00:56:09,059 --> 00:56:13,710
so so here we go we've that's a constant

1285
00:56:12,239 --> 00:56:16,949
which can be folded out so we basically

1286
00:56:13,710 --> 00:56:19,769
have multiply multiplies so we've got

1287
00:56:16,949 --> 00:56:21,269
two four six more multiply seven more

1288
00:56:19,769 --> 00:56:27,539
multiplies that have to happen here

1289
00:56:21,269 --> 00:56:30,030
right so that's gonna be plus seven all

1290
00:56:27,539 --> 00:56:34,230
right there's your feed fifty-five tip

1291
00:56:30,030 --> 00:56:39,420
in here there we go we're gonna do

1292
00:56:34,230 --> 00:56:41,670
blended v4 so that's a wide one there so

1293
00:56:39,420 --> 00:56:44,789
that's actually four multiplies four ads

1294
00:56:41,670 --> 00:56:48,409
for subtracts right

1295
00:56:44,789 --> 00:56:48,409
oh no sorry one subtract

1296
00:56:50,320 --> 00:57:06,070
for more multiplies and former adds and

1297
00:57:02,570 --> 00:57:12,289
then we've got another for adds and

1298
00:57:06,070 --> 00:57:16,280
another for shifts and then layer one

1299
00:57:12,289 --> 00:57:25,099
extra GB for more multiplies three

1300
00:57:16,280 --> 00:57:27,200
square roots all right now that was like

1301
00:57:25,099 --> 00:57:29,179
I said I just kind of rushed you that so

1302
00:57:27,199 --> 00:57:32,629
that's not a good accounting of those at

1303
00:57:29,179 --> 00:57:34,159
all but again I'm just kind of roughly

1304
00:57:32,630 --> 00:57:37,280
looking to see what this is going to be

1305
00:57:34,159 --> 00:57:38,899
and let next tomorrow I guess we'll try

1306
00:57:37,280 --> 00:57:40,970
to do a little bit better job of

1307
00:57:38,900 --> 00:57:42,710
actually thinking through and making a

1308
00:57:40,969 --> 00:57:44,629
real estimate but you can kind of see

1309
00:57:42,710 --> 00:57:47,059
the memory look up here memory look at

1310
00:57:44,630 --> 00:57:50,030
the side you can see sort of where we're

1311
00:57:47,059 --> 00:57:52,489
sort of getting to in terms of how many

1312
00:57:50,030 --> 00:57:56,350
of these things were actually going to

1313
00:57:52,489 --> 00:57:59,389
have right we've got at least this many

1314
00:57:56,349 --> 00:58:01,400
instructions that have to happen not

1315
00:57:59,389 --> 00:58:04,879
including the lookup so we're talking

1316
00:58:01,400 --> 00:58:08,090
about like 96 of these instructions so

1317
00:58:04,880 --> 00:58:09,800
you know again totally fudging it if we

1318
00:58:08,090 --> 00:58:11,840
were to say that you know it was a

1319
00:58:09,800 --> 00:58:14,240
hundred of these instructions or

1320
00:58:11,840 --> 00:58:15,800
something roughly there about and each

1321
00:58:14,239 --> 00:58:17,899
one was going to be at least two cycles

1322
00:58:15,800 --> 00:58:20,150
or something like this you know so we

1323
00:58:17,900 --> 00:58:22,579
figured something like 200 cycles and if

1324
00:58:20,150 --> 00:58:25,430
we were actually four wide we would

1325
00:58:22,579 --> 00:58:26,750
divide that by four because each one of

1326
00:58:25,429 --> 00:58:28,879
these could operate on four pixels at a

1327
00:58:26,750 --> 00:58:32,809
time right we would say that just

1328
00:58:28,880 --> 00:58:37,720
arithmetic Li speaking 50 cycles per

1329
00:58:32,809 --> 00:58:37,719
pixel sounds like where we would be at

1330
00:58:39,679 --> 00:58:45,109
and that's super hand-wavy and assuming

1331
00:58:43,610 --> 00:58:47,030
that we didn't have to spend a whole lot

1332
00:58:45,110 --> 00:58:48,880
of time with the fetch right assuming

1333
00:58:47,030 --> 00:58:51,440
that the fetches were pretty well

1334
00:58:48,880 --> 00:58:55,130
organized which again is is probably not

1335
00:58:51,440 --> 00:58:57,200
likely but what I'd like to do there is

1336
00:58:55,130 --> 00:58:58,970
just say okay let's say that we were

1337
00:58:57,199 --> 00:59:03,349
super human and somehow actually did get

1338
00:58:58,969 --> 00:59:05,480
it down to that many then how what would

1339
00:59:03,349 --> 00:59:07,789
actually be our what would actually be

1340
00:59:05,480 --> 00:59:09,650
our timing at that you know if we

1341
00:59:07,789 --> 00:59:12,559
actually if we actually had to do that

1342
00:59:09,650 --> 00:59:14,809
what would our time be right if we got

1343
00:59:12,559 --> 00:59:16,610
it down to that our time would be 42

1344
00:59:14,809 --> 00:59:19,039
million to fill what's currently on the

1345
00:59:16,610 --> 00:59:21,170
screen right and we said we had 107

1346
00:59:19,039 --> 00:59:22,309
million so that's actually that would

1347
00:59:21,170 --> 00:59:24,740
actually be okay if we could actually

1348
00:59:22,309 --> 00:59:29,719
get it down that low I don't know that

1349
00:59:24,739 --> 00:59:32,629
we will be able to get down that low but

1350
00:59:29,719 --> 00:59:34,789
okay we're right at the end of time so

1351
00:59:32,630 --> 00:59:36,950
don't put any stock in this this was a

1352
00:59:34,789 --> 00:59:40,809
complete I probably missed a bunch of

1353
00:59:36,949 --> 00:59:43,039
instructions too i eivol that super fast

1354
00:59:40,809 --> 00:59:46,219
but basically what we want to do is

1355
00:59:43,039 --> 00:59:47,869
tomorrow right we want to go through and

1356
00:59:46,219 --> 00:59:50,329
think about this algorithm what it's

1357
00:59:47,869 --> 00:59:51,739
actually doing try to come up with the

1358
00:59:50,329 --> 00:59:54,110
minimal a number of operations that

1359
00:59:51,739 --> 00:59:56,359
actually needs to do to do it right and

1360
00:59:54,110 --> 00:59:59,120
count how many instructions that's

1361
00:59:56,360 --> 01:00:00,410
actually going to take us to do and once

1362
00:59:59,119 --> 01:00:04,279
we actually have that we could then

1363
01:00:00,409 --> 01:00:06,589
figure out you know if we code this

1364
01:00:04,280 --> 01:00:09,170
exactly right how many cycles could we

1365
01:00:06,590 --> 01:00:12,200
expect to get it down to and is that

1366
01:00:09,170 --> 01:00:13,789
fast enough right and it looks like we

1367
01:00:12,199 --> 01:00:16,759
could sort of compute our Headroom here

1368
01:00:13,789 --> 01:00:19,519
we could kind of say that you know we're

1369
01:00:16,760 --> 01:00:21,380
talking about something you know on the

1370
01:00:19,519 --> 01:00:23,329
order of a hundred cycles per pixel

1371
01:00:21,380 --> 01:00:24,860
would be acceptable because if you

1372
01:00:23,329 --> 01:00:26,929
figure you've got a hundred million

1373
01:00:24,860 --> 01:00:29,630
cycles or something like this to work

1374
01:00:26,929 --> 01:00:32,210
with and you're talking about a million

1375
01:00:29,630 --> 01:00:33,680
some odd tested pixels at the end of the

1376
01:00:32,210 --> 01:00:35,720
day you know you could see it being

1377
01:00:33,679 --> 01:00:37,250
something like a hundred cycles so sub

1378
01:00:35,719 --> 01:00:39,289
100 cycles would be where we'd like to

1379
01:00:37,250 --> 01:00:41,119
be who knows if we can get there or not

1380
01:00:39,289 --> 01:00:42,759
and again that's not including the

1381
01:00:41,119 --> 01:00:47,170
normal mapping so that's gonna be

1382
01:00:42,760 --> 01:00:50,390
another whole situation so there's that

1383
01:00:47,170 --> 01:00:52,430
you can also see why going wide would

1384
01:00:50,389 --> 01:00:53,659
help us tremendously here so if we had

1385
01:00:52,429 --> 01:00:57,588
say for example

1386
01:00:53,659 --> 01:00:59,449
one of those fancy avx2 processors

1387
01:00:57,588 --> 01:01:00,558
that's coming your avx-512 I'm not sure

1388
01:00:59,449 --> 01:01:02,659
what they're calling it that's coming

1389
01:01:00,559 --> 01:01:05,329
down the pipeline then instead of

1390
01:01:02,659 --> 01:01:07,009
dividing things by 4 we'd actually

1391
01:01:05,329 --> 01:01:08,450
didn't be able to hide things by 16

1392
01:01:07,010 --> 01:01:09,740
because we could fill blocks of 16

1393
01:01:08,449 --> 01:01:13,129
pixels at a time which would be a pretty

1394
01:01:09,739 --> 01:01:15,348
huge advantage for us right so again

1395
01:01:13,130 --> 01:01:17,809
like stuff to think about but anyway

1396
01:01:15,349 --> 01:01:19,400
that's just a quick thing we'll get back

1397
01:01:17,809 --> 01:01:26,119
into this tomorrow for now let's go

1398
01:01:19,400 --> 01:01:28,519
ahead and go to the Q&amp;A let's see here

1399
01:01:26,119 --> 01:01:33,440
like so so if anyone has questions on

1400
01:01:28,519 --> 01:01:38,380
today's stream you can go ahead and ask

1401
01:01:33,440 --> 01:01:38,380
them now save this guy off

1402
01:01:54,659 --> 01:02:01,329
why no text labels on the counters well

1403
01:01:58,300 --> 01:02:03,190
we just haven't needed them yet that's

1404
01:02:01,329 --> 01:02:05,170
why I said like maybe we'll actually go

1405
01:02:03,190 --> 01:02:07,389
do them later but I didn't actually want

1406
01:02:05,170 --> 01:02:11,019
to do them now because I felt like it

1407
01:02:07,389 --> 01:02:12,190
was not necessary that make sense I'm

1408
01:02:11,019 --> 01:02:13,329
sorry if this is something you've gone

1409
01:02:12,190 --> 01:02:15,519
over before but can you explain the

1410
01:02:13,329 --> 01:02:18,670
difference between new and Malak in C++

1411
01:02:15,519 --> 01:02:19,750
and when each is useful yes so the

1412
01:02:18,670 --> 01:02:21,490
difference between new and Malick is

1413
01:02:19,750 --> 01:02:23,980
whether you need to use C++ features

1414
01:02:21,489 --> 01:02:26,379
basically right so malloc allocates

1415
01:02:23,980 --> 01:02:27,789
memory new basically is something that

1416
01:02:26,380 --> 01:02:29,500
would do the same thing that malloc does

1417
01:02:27,789 --> 01:02:31,779
but then also calls the constructor of

1418
01:02:29,500 --> 01:02:34,210
whatever the thing is that you're using

1419
01:02:31,780 --> 01:02:36,130
right so things that have constructors

1420
01:02:34,210 --> 01:02:37,420
have to go through new unless you plan

1421
01:02:36,130 --> 01:02:38,710
to call the constructor manually

1422
01:02:37,420 --> 01:02:42,369
yourself but you're probably gonna do

1423
01:02:38,710 --> 01:02:43,420
that by calling new or placement new so

1424
01:02:42,369 --> 01:02:45,039
if you're not using things with

1425
01:02:43,420 --> 01:02:47,470
constructors then new is completely

1426
01:02:45,039 --> 01:02:50,529
irrelevant it doesn't do anything but if

1427
01:02:47,469 --> 01:02:53,019
you're actually you know if you're using

1428
01:02:50,530 --> 01:02:55,300
constructors it's the same with delete

1429
01:02:53,019 --> 01:02:56,889
and free right if you if you're using

1430
01:02:55,300 --> 01:02:58,900
destructors you need to call delete if

1431
01:02:56,889 --> 01:03:00,159
you're using just plain stuff that

1432
01:02:58,900 --> 01:03:06,160
doesn't have destructors you can just

1433
01:03:00,159 --> 01:03:09,759
call free it's your handwriting as bad

1434
01:03:06,159 --> 01:03:11,649
in real life as it is the tablet no but

1435
01:03:09,760 --> 01:03:13,120
it's not that much better it's

1436
01:03:11,650 --> 01:03:16,680
definitely worse on the tablet but it's

1437
01:03:13,119 --> 01:03:16,679
not fabulous in real life

1438
01:03:22,469 --> 01:03:26,650
can you also cut out instructions by

1439
01:03:25,119 --> 01:03:28,749
doing more work to save previous

1440
01:03:26,650 --> 01:03:30,759
computations like D minus x-axis

1441
01:03:28,748 --> 01:03:33,998
followed by D minus X axis minus y axis

1442
01:03:30,759 --> 01:03:36,099
yes we will absolutely try to eliminate

1443
01:03:33,998 --> 01:03:37,748
any redundant stuff although the

1444
01:03:36,099 --> 01:03:39,160
compiler already is probably doing some

1445
01:03:37,748 --> 01:03:42,159
of that for us since we're compiling

1446
01:03:39,159 --> 01:03:51,399
with optimizations on in the compiler so

1447
01:03:42,159 --> 01:03:52,958
there's that do you think we'll do

1448
01:03:51,400 --> 01:03:56,380
multi-threading in the software render

1449
01:03:52,958 --> 01:03:58,478
yes I do think we will do it we will

1450
01:03:56,380 --> 01:04:00,309
probably bin the screen into four chunks

1451
01:03:58,478 --> 01:04:11,199
and render each chunk on a separate

1452
01:04:00,309 --> 01:04:13,509
thread is it possible to quad pump every

1453
01:04:11,199 --> 01:04:18,429
operation I'm not sure what you mean by

1454
01:04:13,509 --> 01:04:20,199
every operation so and I'm not sure what

1455
01:04:18,429 --> 01:04:23,618
you mean by quad pump either if you're

1456
01:04:20,199 --> 01:04:31,748
talking about issuing instructions then

1457
01:04:23,619 --> 01:04:34,959
no basically the way issue is structured

1458
01:04:31,748 --> 01:04:38,528
issuing works is the processor can only

1459
01:04:34,958 --> 01:04:41,858
issue an instruction if it has enough if

1460
01:04:38,528 --> 01:04:44,440
it has a spare unit available to field

1461
01:04:41,858 --> 01:04:47,318
that instruction so you can kind of

1462
01:04:44,440 --> 01:04:49,469
think of like a processor as sort of a

1463
01:04:47,318 --> 01:04:53,558
collection of smaller processors almost

1464
01:04:49,469 --> 01:04:57,489
or you know they're called units where

1465
01:04:53,559 --> 01:05:00,009
you know each unit can do certain things

1466
01:04:57,489 --> 01:05:01,749
so for example maybe you have a unit

1467
01:05:00,009 --> 01:05:04,900
that can add two numbers together and

1468
01:05:01,748 --> 01:05:10,028
then you have another unit that can

1469
01:05:04,900 --> 01:05:11,499
shift a number right so if you if you if

1470
01:05:10,028 --> 01:05:15,880
that was your whole processor you had

1471
01:05:11,498 --> 01:05:18,818
adds and shift right then when two

1472
01:05:15,880 --> 01:05:20,108
instructions came in and it looks at the

1473
01:05:18,818 --> 01:05:22,150
first it looks at the structure and so

1474
01:05:20,108 --> 01:05:24,608
on in the next instruction if it sees

1475
01:05:22,150 --> 01:05:25,809
that it has an ADD and a shift that are

1476
01:05:24,608 --> 01:05:28,088
independent of each other they don't

1477
01:05:25,809 --> 01:05:30,400
depend on each other then it could issue

1478
01:05:28,088 --> 01:05:34,250
both of them to the two different units

1479
01:05:30,400 --> 01:05:37,190
right on that cycle

1480
01:05:34,250 --> 01:05:40,429
if there were two shifts it couldn't

1481
01:05:37,190 --> 01:05:42,079
because it only has one shift unit so

1482
01:05:40,429 --> 01:05:43,819
even though it could have issued two

1483
01:05:42,079 --> 01:05:45,920
instructions per cycle it can't actually

1484
01:05:43,820 --> 01:05:49,190
find anyone in the process of issue it

1485
01:05:45,920 --> 01:05:51,500
to does that make sense

1486
01:05:49,190 --> 01:05:53,329
so figuring out stuff like how many

1487
01:05:51,500 --> 01:05:54,800
instructions you can issue per cycle at

1488
01:05:53,329 --> 01:05:56,869
every point in the program is actually

1489
01:05:54,800 --> 01:05:59,539
again a bit of a hardcore optimization

1490
01:05:56,869 --> 01:06:02,539
topic because it involves knowing the

1491
01:05:59,539 --> 01:06:04,730
processor well enough to know how many

1492
01:06:02,539 --> 01:06:06,829
units of each type it has and whether or

1493
01:06:04,730 --> 01:06:09,559
not they would be able to issue on that

1494
01:06:06,829 --> 01:06:11,779
cycle or not right and that depends on

1495
01:06:09,559 --> 01:06:13,489
when they retired whatever the last

1496
01:06:11,780 --> 01:06:15,470
thing they issued was and it also

1497
01:06:13,489 --> 01:06:17,750
depends on how big that out of order

1498
01:06:15,469 --> 01:06:19,399
execution window that I talked about is

1499
01:06:17,750 --> 01:06:21,108
where the processor can look ahead and

1500
01:06:19,400 --> 01:06:25,309
pull out things that it might be able to

1501
01:06:21,108 --> 01:06:29,509
do so again a very complicated question

1502
01:06:25,309 --> 01:06:32,059
and typically it's very hard to know on

1503
01:06:29,510 --> 01:06:35,330
an x64 processor it's like kind of the

1504
01:06:32,059 --> 01:06:37,179
worst case because x64 processors are

1505
01:06:35,329 --> 01:06:40,909
very varied and they have lots of

1506
01:06:37,179 --> 01:06:42,739
minutiae and stuff like that and so you

1507
01:06:40,909 --> 01:06:45,618
know I don't really know I haven't ever

1508
01:06:42,739 --> 01:06:48,319
done that hard of optimization for it on

1509
01:06:45,619 --> 01:06:52,338
the Xbox 360 I did do that serious of

1510
01:06:48,320 --> 01:06:54,440
optimization at one point and you know I

1511
01:06:52,338 --> 01:06:56,239
knew that Prosser very very well so I

1512
01:06:54,440 --> 01:06:58,909
could tell you I actually knew like

1513
01:06:56,239 --> 01:07:00,559
exactly like okay at this point it could

1514
01:06:58,909 --> 01:07:02,059
issue these two instructions because

1515
01:07:00,559 --> 01:07:05,539
they don't conflict and this that the

1516
01:07:02,059 --> 01:07:07,489
other thing right and again that's just

1517
01:07:05,539 --> 01:07:10,219
a question of usually it's a question of

1518
01:07:07,489 --> 01:07:12,199
need we probably won't try to optimize

1519
01:07:10,219 --> 01:07:14,959
things that far on handmade hero like I

1520
01:07:12,199 --> 01:07:16,189
said but you know sometimes you ended up

1521
01:07:14,960 --> 01:07:19,210
in position where you do need to and

1522
01:07:16,190 --> 01:07:19,210
then you need to know right

1523
01:07:29,559 --> 01:07:33,400
brain cruiser I meant put it in a wide

1524
01:07:32,019 --> 01:07:34,900
instruction ah okay

1525
01:07:33,400 --> 01:07:37,289
so your question from before when you

1526
01:07:34,900 --> 01:07:39,309
said can you quad pump any instruction

1527
01:07:37,289 --> 01:07:41,889
you're you meant could you put it in

1528
01:07:39,309 --> 01:07:46,259
wide so the answer is unfortunately not

1529
01:07:41,889 --> 01:07:51,639
and avx-512 I believe fixes some of this

1530
01:07:46,260 --> 01:07:55,000
but sse2 and AVX at least I think

1531
01:07:51,639 --> 01:07:57,389
AVX at least sse in fact all the SSC is

1532
01:07:55,000 --> 01:07:59,860
all through up through four and so on

1533
01:07:57,389 --> 01:08:02,980
there's a bunch of things they can't do

1534
01:07:59,860 --> 01:08:06,970
wide so for example you cannot do memory

1535
01:08:02,980 --> 01:08:11,619
lookups wide right which is a problem

1536
01:08:06,969 --> 01:08:13,869
for texture fetching right like we are

1537
01:08:11,619 --> 01:08:16,059
going to compute for Texel locations

1538
01:08:13,869 --> 01:08:18,430
that we want to load or stuff like this

1539
01:08:16,060 --> 01:08:22,480
potentially and we'd like to go fetch

1540
01:08:18,430 --> 01:08:25,510
them all but we can't and so that's a

1541
01:08:22,479 --> 01:08:26,739
problem right so basically you're

1542
01:08:25,510 --> 01:08:29,409
talking about your floating-point

1543
01:08:26,739 --> 01:08:32,619
operations and your integer operations

1544
01:08:29,409 --> 01:08:36,068
you can usually quad pump just fine but

1545
01:08:32,619 --> 01:08:40,239
anything that ends up being in that in

1546
01:08:36,069 --> 01:08:43,690
that memory access kind of space sadly

1547
01:08:40,239 --> 01:08:45,789
you can't it's it's unfortunate but

1548
01:08:43,689 --> 01:08:49,929
avx-512 I believe fixes that because the

1549
01:08:45,789 --> 01:08:52,029
Larrabee instruction set had these

1550
01:08:49,930 --> 01:08:54,850
things in it and I believe that avx-512

1551
01:08:52,029 --> 01:08:57,369
is finally getting them all moved into

1552
01:08:54,850 --> 01:09:03,430
the main line and so my understanding is

1553
01:08:57,369 --> 01:09:04,989
it'll be in there eventually would you

1554
01:09:03,430 --> 01:09:09,060
talk Jeff into doing a separate

1555
01:09:04,989 --> 01:09:12,429
optimizing stream where you are the TA

1556
01:09:09,060 --> 01:09:14,048
yeah I mean we could try I don't know I

1557
01:09:12,430 --> 01:09:15,460
mean I wouldn't do that anytime soon

1558
01:09:14,048 --> 01:09:18,369
because we've got so much stuff to get

1559
01:09:15,460 --> 01:09:20,020
through that it's not that necessary to

1560
01:09:18,369 --> 01:09:22,809
we don't need to have that level of

1561
01:09:20,020 --> 01:09:24,760
optimization right now but you know

1562
01:09:22,810 --> 01:09:27,100
maybe when handmade hero's done we could

1563
01:09:24,760 --> 01:09:29,350
go at say here's the current render or

1564
01:09:27,100 --> 01:09:31,680
you know what would you do to to speed

1565
01:09:29,350 --> 01:09:31,680
this up

1566
01:09:41,989 --> 01:09:53,689
looks like that is the end of the

1567
01:09:45,600 --> 01:09:53,690
questions am i right am i right people's

1568
01:09:57,500 --> 01:10:04,350
looks like it to me all right

1569
01:10:02,699 --> 01:10:11,029
if that is the end of the questions then

1570
01:10:04,350 --> 01:10:14,039
that is the end of the stream okay so

1571
01:10:11,029 --> 01:10:20,130
basically we're in a pretty good spot

1572
01:10:14,039 --> 01:10:21,899
now I mean we sort of have you know we

1573
01:10:20,130 --> 01:10:25,440
sort of have an idea of what's going on

1574
01:10:21,899 --> 01:10:27,779
we need to now kind of get down into the

1575
01:10:25,439 --> 01:10:30,929
the nitty-gritty of these this routine

1576
01:10:27,779 --> 01:10:35,069
and figure out what it is that we

1577
01:10:30,930 --> 01:10:36,420
actually need to to do to it and what we

1578
01:10:35,069 --> 01:10:37,649
can expect to get out of it in terms of

1579
01:10:36,420 --> 01:10:40,199
performance if we did it really well

1580
01:10:37,649 --> 01:10:41,579
right and the normal mapping we also

1581
01:10:40,199 --> 01:10:43,920
probably want to take a look at just to

1582
01:10:41,579 --> 01:10:46,350
see what you know how realistic it is to

1583
01:10:43,920 --> 01:10:48,899
be able to do you know that sort of

1584
01:10:46,350 --> 01:10:50,340
lighting on there and again maybe that

1585
01:10:48,899 --> 01:10:51,659
might be something that we can't do in

1586
01:10:50,340 --> 01:10:53,190
the Safa render because it's too slow

1587
01:10:51,659 --> 01:10:54,750
and we have to do it only on the

1588
01:10:53,189 --> 01:10:57,629
hardware path and that's fine too but

1589
01:10:54,750 --> 01:10:59,279
either way we just don't know right now

1590
01:10:57,630 --> 01:11:01,829
right so what we need to do is we need

1591
01:10:59,279 --> 01:11:04,229
to go ahead and actually work out all

1592
01:11:01,829 --> 01:11:05,939
the stuff that we need to do and figure

1593
01:11:04,229 --> 01:11:08,699
out what our estimate is for how fast

1594
01:11:05,939 --> 01:11:10,919
that might ever run in practice and then

1595
01:11:08,699 --> 01:11:13,529
we can sort of have a better idea of it

1596
01:11:10,920 --> 01:11:16,079
right so that's what we'll get to

1597
01:11:13,529 --> 01:11:17,849
tomorrow we will start to try and build

1598
01:11:16,079 --> 01:11:18,989
that estimate and build that sort of

1599
01:11:17,850 --> 01:11:22,170
understanding of what the routine

1600
01:11:18,989 --> 01:11:23,519
actually needs to do and so I hope you

1601
01:11:22,170 --> 01:11:25,590
will come back and join me for that

1602
01:11:23,520 --> 01:11:29,010
again that's 5 p.m. so Center time same

1603
01:11:25,590 --> 01:11:30,539
time same place tomorrow so thank you

1604
01:11:29,010 --> 01:11:32,340
very much for joining me it's been a

1605
01:11:30,539 --> 01:11:36,569
pleasure coding with you as always I

1606
01:11:32,340 --> 01:11:38,250
hope that you have sort of I hope I hope

1607
01:11:36,569 --> 01:11:41,489
that you're in an optimization mindset

1608
01:11:38,250 --> 01:11:44,399
now and are looking forward to speeding

1609
01:11:41,489 --> 01:11:46,949
our game up into to a nice to a nice

1610
01:11:44,399 --> 01:11:48,239
clip if you would like to follow along

1611
01:11:46,949 --> 01:11:49,590
at home with source code and play around

1612
01:11:48,239 --> 01:11:52,139
optimization yourself you could always

1613
01:11:49,590 --> 01:11:52,980
peer to the game on handmade hero org by

1614
01:11:52,140 --> 01:11:54,539
using the little PR

1615
01:11:52,979 --> 01:11:55,829
button again it comes with all the

1616
01:11:54,539 --> 01:11:57,930
source code so you can download it every

1617
01:11:55,829 --> 01:12:00,569
night I upload it whenever I'm finished

1618
01:11:57,930 --> 01:12:02,369
programming here for the day if you'd

1619
01:12:00,569 --> 01:12:04,049
like to support the video series we also

1620
01:12:02,369 --> 01:12:06,119
have a patreon you can subscribe to that

1621
01:12:04,050 --> 01:12:07,470
we very much appreciate we have a tweet

1622
01:12:06,119 --> 01:12:09,960
bop at tweets the schedule at you if you

1623
01:12:07,470 --> 01:12:11,190
want to catch the the show live that's

1624
01:12:09,960 --> 01:12:12,659
the best way to figure out when it's

1625
01:12:11,189 --> 01:12:14,969
gonna be live at a given time it gives

1626
01:12:12,659 --> 01:12:16,979
you plenty of advance notice and finally

1627
01:12:14,970 --> 01:12:18,869
there's a forum site that you can go to

1628
01:12:16,979 --> 01:12:20,609
where you can ask questions or look at

1629
01:12:18,869 --> 01:12:22,409
ports to Mac or Linux or check out the

1630
01:12:20,609 --> 01:12:24,299
annotated episode guide all that sort of

1631
01:12:22,409 --> 01:12:27,510
stuff so definitely check that out when

1632
01:12:24,300 --> 01:12:29,159
you get a chance until then have a

1633
01:12:27,510 --> 01:12:30,810
wonderful evening and I will see you

1634
01:12:29,159 --> 01:12:34,279
guys tomorrow for another episode of

1635
01:12:30,810 --> 01:12:34,280
handmade hero take it easy - everyone

