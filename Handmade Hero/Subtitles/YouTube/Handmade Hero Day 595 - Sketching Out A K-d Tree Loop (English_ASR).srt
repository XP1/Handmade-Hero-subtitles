1
00:00:00,000 --> 00:00:03,509
hello everyone and welcome to hand made

2
00:00:02,310 --> 00:00:07,349
here oh sure we could a complete-game

3
00:00:03,509 --> 00:00:08,730
live on stream we are going to be doing

4
00:00:07,349 --> 00:00:10,109
some bleeding today before I get started

5
00:00:08,730 --> 00:00:11,820
obviously if you've seen the banner

6
00:00:10,109 --> 00:00:13,589
we're doing a Kickstarter right now for

7
00:00:11,820 --> 00:00:14,280
our comic if you like comics please

8
00:00:13,589 --> 00:00:16,320
check it out

9
00:00:14,279 --> 00:00:17,489
that's what that little fellas doing up

10
00:00:16,320 --> 00:00:19,740
there that's what me I was doing right

11
00:00:17,489 --> 00:00:21,118
there all I gotta do is click on it and

12
00:00:19,739 --> 00:00:22,799
Scout a trailer and all the information

13
00:00:21,118 --> 00:00:24,868
and all that stuff so please check it

14
00:00:22,800 --> 00:00:29,699
out we're just gonna hop right into it

15
00:00:24,868 --> 00:00:32,399
today we're gonna go to probably the

16
00:00:29,699 --> 00:00:34,200
blackboard first I'm gonna guess because

17
00:00:32,399 --> 00:00:35,670
we got to talk about what it is that

18
00:00:34,200 --> 00:00:37,380
we're actually gonna do we did some

19
00:00:35,670 --> 00:00:39,480
analysis yesterday and I'm pretty sure I

20
00:00:37,380 --> 00:00:42,480
understand now like sort of what I need

21
00:00:39,479 --> 00:00:45,599
to do to my routine to do it to make it

22
00:00:42,479 --> 00:00:48,328
do what I want it to do if you remember

23
00:00:45,600 --> 00:00:51,808
what we ended up with is and I'll run it

24
00:00:48,329 --> 00:00:54,750
here we and I guess I'll show it here as

25
00:00:51,808 --> 00:00:58,649
well let me go grab the lighting code so

26
00:00:54,750 --> 00:01:01,109
here's the ray caster so if you remember

27
00:00:58,649 --> 00:01:02,670
we took a look and I was just playing

28
00:01:01,109 --> 00:01:04,379
around with this routine to see what was

29
00:01:02,670 --> 00:01:07,228
going on with it and looking at some

30
00:01:04,379 --> 00:01:08,700
stuff and by analyzing the routine just

31
00:01:07,228 --> 00:01:12,450
to figure out what was going on in here

32
00:01:08,700 --> 00:01:14,850
I was like oh right we kind of need to

33
00:01:12,450 --> 00:01:16,978
be more systemic about how we do this if

34
00:01:14,849 --> 00:01:18,359
we're going to switch to doing a KD tree

35
00:01:16,978 --> 00:01:21,509
because we build a KD tree right now we

36
00:01:18,359 --> 00:01:25,109
don't really use it we use it as if it's

37
00:01:21,509 --> 00:01:27,959
just an a/b hierarchy if we actually

38
00:01:25,109 --> 00:01:29,219
want to use it as an a/b tree we're

39
00:01:27,959 --> 00:01:30,929
gonna have to start getting smarter

40
00:01:29,219 --> 00:01:33,599
about how we do things and we're gonna

41
00:01:30,930 --> 00:01:35,790
want to do a little bit more careful

42
00:01:33,599 --> 00:01:38,399
work with how we handle our hit

43
00:01:35,790 --> 00:01:40,500
detection so again just to remind

44
00:01:38,400 --> 00:01:44,368
everyone where we're at if I go ahead

45
00:01:40,500 --> 00:01:46,259
and run the HH light prof routine you

46
00:01:44,368 --> 00:01:48,269
can see here that we have a way of sort

47
00:01:46,259 --> 00:01:50,009
of pseudo validating our stuff by

48
00:01:48,269 --> 00:01:53,340
looking at what our Texel error ends up

49
00:01:50,009 --> 00:01:55,290
being so we know we don't regress on our

50
00:01:53,340 --> 00:01:56,969
hits much and then what we can do is we

51
00:01:55,290 --> 00:01:59,520
can look at the total seconds elapsed

52
00:01:56,968 --> 00:02:03,000
this is just us running our ray casting

53
00:01:59,519 --> 00:02:05,399
a lot to see how long it takes and we

54
00:02:03,000 --> 00:02:07,170
want that number to go down now ideally

55
00:02:05,399 --> 00:02:09,530
we'd like to get that number to go down

56
00:02:07,170 --> 00:02:12,759
a lot right like we'd like that number

57
00:02:09,530 --> 00:02:14,769
to be going down to you know three

58
00:02:12,759 --> 00:02:17,348
or to like we'd love we'd like some

59
00:02:14,769 --> 00:02:19,030
really massive improvements in speed if

60
00:02:17,348 --> 00:02:23,348
we can get them and we don't actually

61
00:02:19,030 --> 00:02:26,259
know that we can but we do have some

62
00:02:23,348 --> 00:02:33,280
suspicion at least that we could because

63
00:02:26,259 --> 00:02:35,289
you know we we at least know that we're

64
00:02:33,280 --> 00:02:36,878
not doing anything particularly smart in

65
00:02:35,289 --> 00:02:39,489
here other than the fact that we do

66
00:02:36,878 --> 00:02:43,239
trace for rays at a time so we have sim

67
00:02:39,489 --> 00:02:46,569
D and we have a reasonable box Collider

68
00:02:43,239 --> 00:02:49,469
but we don't really have anything else

69
00:02:46,568 --> 00:02:52,419
particularly smart going on in there

70
00:02:49,469 --> 00:02:54,400
now one thing that I might want to do is

71
00:02:52,419 --> 00:02:56,500
start printing out the leaves and

72
00:02:54,400 --> 00:02:58,450
partitions information because we

73
00:02:56,500 --> 00:03:01,090
actually gather this information but we

74
00:02:58,449 --> 00:03:06,250
don't use it so one of the things that

75
00:03:01,090 --> 00:03:09,699
you can see in fact if we go to handmade

76
00:03:06,250 --> 00:03:16,930
lighting dot cpp what you will see is

77
00:03:09,699 --> 00:03:20,738
that in the internal lighting core which

78
00:03:16,930 --> 00:03:24,790
is here what you can see is we actually

79
00:03:20,739 --> 00:03:27,250
compute this information so we we do

80
00:03:24,789 --> 00:03:30,519
these work casts initiated we tally all

81
00:03:27,250 --> 00:03:32,469
this stuff up and then in n lighting

82
00:03:30,519 --> 00:03:34,629
computation we print it out right so we

83
00:03:32,469 --> 00:03:37,419
have a thing that does the tally here we

84
00:03:34,628 --> 00:03:39,969
can do that ourselves right so we can

85
00:03:37,419 --> 00:03:43,359
actually do this inside the test routine

86
00:03:39,969 --> 00:03:44,439
as well and what I'd like to do is just

87
00:03:43,359 --> 00:03:46,269
start printing out what those numbers

88
00:03:44,439 --> 00:03:47,948
are so that we have an idea of how much

89
00:03:46,269 --> 00:03:50,620
time we're spending in each loop roughly

90
00:03:47,949 --> 00:03:52,569
it won't tell us exactly how much but if

91
00:03:50,620 --> 00:03:54,519
we assume at least tell us like how many

92
00:03:52,568 --> 00:03:59,500
things were processing in each case and

93
00:03:54,519 --> 00:04:02,799
so if we take a look at the at the

94
00:03:59,500 --> 00:04:05,530
actual HH light prof code and we take a

95
00:04:02,799 --> 00:04:08,439
look at after we do that dispatch right

96
00:04:05,530 --> 00:04:10,209
here where we get outside of the root so

97
00:04:08,439 --> 00:04:12,609
we're done doing the lighting and we're

98
00:04:10,209 --> 00:04:16,298
ready to print stuff out what I can do

99
00:04:12,609 --> 00:04:17,680
here is I can actually sum summarize so

100
00:04:16,298 --> 00:04:20,198
basically like here I can take a

101
00:04:17,680 --> 00:04:23,139
summation I can do a summation of the

102
00:04:20,199 --> 00:04:25,810
work count so you can see we we actually

103
00:04:23,139 --> 00:04:26,410
initialize these or create a certain

104
00:04:25,810 --> 00:04:27,819
number of these

105
00:04:26,410 --> 00:04:30,520
right you could see like a lock work

106
00:04:27,819 --> 00:04:32,199
count this sort of stuff right and I

107
00:04:30,519 --> 00:04:33,430
don't remember I feel like this is

108
00:04:32,199 --> 00:04:40,659
supposed to return the work count

109
00:04:33,430 --> 00:04:42,730
probably uh internal lining core yeah so

110
00:04:40,660 --> 00:04:45,280
the actual work count that's done comes

111
00:04:42,730 --> 00:04:46,930
back here so we can just sum that work

112
00:04:45,279 --> 00:04:49,689
count we can sum the work count right

113
00:04:46,930 --> 00:04:51,879
here we guess we can sum all of these

114
00:04:49,689 --> 00:04:53,469
various values and if we do that we can

115
00:04:51,879 --> 00:04:55,899
then print out some of the information

116
00:04:53,470 --> 00:05:00,570
that we get so we can say look here's

117
00:04:55,899 --> 00:05:03,639
the information in fact we can do that

118
00:05:00,569 --> 00:05:05,379
we can actually do that perhaps even as

119
00:05:03,639 --> 00:05:07,360
a matter of course now I think about it

120
00:05:05,379 --> 00:05:09,339
so like if we want to write we could do

121
00:05:07,360 --> 00:05:13,449
this we could say well always some ate

122
00:05:09,339 --> 00:05:15,789
it we'll put it in here right and then

123
00:05:13,449 --> 00:05:18,939
we'll print it out as part of the like

124
00:05:15,790 --> 00:05:23,680
performance estimate right so in here

125
00:05:18,939 --> 00:05:27,819
we'll print it now I hate printing

126
00:05:23,680 --> 00:05:30,459
I hate actually using the the the code

127
00:05:27,819 --> 00:05:32,649
to print 64-bit numbers it's always

128
00:05:30,459 --> 00:05:33,879
terrible because it was like designed by

129
00:05:32,649 --> 00:05:36,159
people who had no idea what they were

130
00:05:33,879 --> 00:05:38,079
doing and so I'm just gonna print these

131
00:05:36,160 --> 00:05:40,450
as float even though they are not float

132
00:05:38,079 --> 00:05:43,000
right so what I'm gonna do is I'm gonna

133
00:05:40,449 --> 00:05:44,589
take like total cast initial initiated

134
00:05:43,000 --> 00:05:48,069
actually I don't care about that I just

135
00:05:44,589 --> 00:05:50,289
want total partitions tested and total

136
00:05:48,069 --> 00:05:52,689
leaves tested right I just want those

137
00:05:50,290 --> 00:05:56,740
two numbers for now like partitions and

138
00:05:52,689 --> 00:05:58,870
leaves right and what I'm gonna do is

139
00:05:56,740 --> 00:06:02,710
I'm just gonna cast those two doubles on

140
00:05:58,870 --> 00:06:04,750
the way in so that we just have a

141
00:06:02,709 --> 00:06:07,239
printout for them that doesn't rely on

142
00:06:04,750 --> 00:06:09,129
weird format specifiers so I'm going to

143
00:06:07,240 --> 00:06:10,360
go ahead and compile that and see if I

144
00:06:09,129 --> 00:06:12,909
can get this printing out just

145
00:06:10,360 --> 00:06:15,699
information for me about how many things

146
00:06:12,910 --> 00:06:19,000
we were doing and so when we do this

147
00:06:15,699 --> 00:06:21,219
what we should see is a on the

148
00:06:19,000 --> 00:06:28,389
performance estimate we should see how

149
00:06:21,220 --> 00:06:30,040
many of these things we do and so over

150
00:06:28,389 --> 00:06:32,529
the repeated runs you can see it you

151
00:06:30,040 --> 00:06:34,330
know it and the other thing too I think

152
00:06:32,529 --> 00:06:36,609
I might print this out in both cases so

153
00:06:34,329 --> 00:06:38,109
whether or not we're doing the

154
00:06:36,610 --> 00:06:39,449
performance or not let's print it out in

155
00:06:38,110 --> 00:06:41,490
both cases

156
00:06:39,449 --> 00:06:43,800
because that way I can also see how much

157
00:06:41,490 --> 00:06:47,009
a single run is versus multiple runs

158
00:06:43,800 --> 00:06:48,449
just easier to look at um so if we take

159
00:06:47,009 --> 00:06:51,650
a look at that you can see like here's

160
00:06:48,449 --> 00:06:55,620
how many we're doing on a single run oh

161
00:06:51,649 --> 00:06:57,538
wait we zero them every time so never

162
00:06:55,620 --> 00:06:58,800
mind it's yeah we don't need that

163
00:06:57,538 --> 00:07:01,498
because it's gonna that is for a single

164
00:06:58,800 --> 00:07:05,338
run duh it's not it's not multiplied out

165
00:07:01,499 --> 00:07:07,229
all right so that's just telling us like

166
00:07:05,338 --> 00:07:09,588
how many partitions were testing versus

167
00:07:07,228 --> 00:07:13,408
how many leaves were testing right and

168
00:07:09,588 --> 00:07:16,168
we also had a partitions per leaf value

169
00:07:13,408 --> 00:07:17,399
that we were printing out in the

170
00:07:16,168 --> 00:07:19,560
lighting and I think we want that

171
00:07:17,399 --> 00:07:23,188
because that lets us know like how many

172
00:07:19,560 --> 00:07:24,629
partitions it takes us to get to the

173
00:07:23,189 --> 00:07:29,370
actual thing we want which is leaf

174
00:07:24,629 --> 00:07:31,080
testing so what we want is well you know

175
00:07:29,370 --> 00:07:34,560
what I guess maybe I don't care I know I

176
00:07:31,079 --> 00:07:36,060
think about it but if you take a look at

177
00:07:34,560 --> 00:07:37,288
the ratio of these numbers I guess which

178
00:07:36,060 --> 00:07:40,309
is sort of what I was talking about you

179
00:07:37,288 --> 00:07:43,399
can see that like actually this one is

180
00:07:40,309 --> 00:07:45,810
almost four times more than four times

181
00:07:43,399 --> 00:07:47,430
yeah I think it's more than four times

182
00:07:45,810 --> 00:07:48,749
is that right you know you know I'm

183
00:07:47,430 --> 00:07:51,749
gonna print it out I just said I wasn't

184
00:07:48,749 --> 00:07:54,899
I'm gonna print it out so this is this

185
00:07:51,749 --> 00:07:59,939
is the partitions per leaf I don't know

186
00:07:54,899 --> 00:08:01,499
why I put K in there there we go so what

187
00:07:59,939 --> 00:08:03,870
I'm gonna do here is just like here's

188
00:08:01,499 --> 00:08:05,699
our total partitions tested here's our

189
00:08:03,870 --> 00:08:06,930
total leaves tested so I'm literally

190
00:08:05,699 --> 00:08:09,270
just gonna take this and I'm gonna

191
00:08:06,930 --> 00:08:10,740
divide right and I think we have a safe

192
00:08:09,269 --> 00:08:12,088
ratio well actually don't know if we

193
00:08:10,740 --> 00:08:13,620
have one for doubles and since we know

194
00:08:12,088 --> 00:08:19,079
this is never zero I'm just gonna do it

195
00:08:13,620 --> 00:08:21,449
right so now this will tell us the total

196
00:08:19,079 --> 00:08:23,338
partitions per leaf and you know this

197
00:08:21,449 --> 00:08:25,050
one is probably wants a little more

198
00:08:23,338 --> 00:08:26,579
precision so this one probably wants

199
00:08:25,050 --> 00:08:28,949
more like point two or something I'm

200
00:08:26,579 --> 00:08:32,728
guessing just so we can get a little bit

201
00:08:28,949 --> 00:08:35,009
of significant figures in there so if we

202
00:08:32,729 --> 00:08:39,629
take a look at what this does when you

203
00:08:35,009 --> 00:08:42,328
know after we run the test this tells us

204
00:08:39,629 --> 00:08:44,789
that we're you know how many partitions

205
00:08:42,328 --> 00:08:47,129
how many leaves this says there are four

206
00:08:44,789 --> 00:08:51,708
point four times as many partitions

207
00:08:47,129 --> 00:08:51,708
tested as there are leaves tested right

208
00:08:54,379 --> 00:08:59,960
so a couple numbers we care about right

209
00:09:00,139 --> 00:09:05,309
we probably also care about the total

210
00:09:02,909 --> 00:09:11,039
right so we might want to just do like

211
00:09:05,309 --> 00:09:14,399
this where we do that so add them

212
00:09:11,039 --> 00:09:15,719
together and now we know like the total

213
00:09:14,399 --> 00:09:18,509
amount of work we're doing is so the

214
00:09:15,720 --> 00:09:20,879
number of like actual loop bodies which

215
00:09:18,509 --> 00:09:23,069
is this number here we know how many of

216
00:09:20,879 --> 00:09:24,750
them are being tested just for like

217
00:09:23,070 --> 00:09:27,270
calling purposes which is this number

218
00:09:24,750 --> 00:09:29,490
here we know how many of them were

219
00:09:27,269 --> 00:09:32,250
actually testing and using results from

220
00:09:29,490 --> 00:09:34,259
so like these are actual boxes we do the

221
00:09:32,250 --> 00:09:36,480
collision and we potentially update our

222
00:09:34,259 --> 00:09:40,490
closest point and then we know like what

223
00:09:36,480 --> 00:09:42,659
the ratio of those two things are is and

224
00:09:40,490 --> 00:09:44,610
so that's pretty much all the

225
00:09:42,659 --> 00:09:46,559
information that I really need there

226
00:09:44,610 --> 00:09:49,550
what you can see is it's like okay the

227
00:09:46,559 --> 00:09:54,059
total number of loop bodies is 2.8

228
00:09:49,549 --> 00:09:56,819
million right which is a lot of loop

229
00:09:54,059 --> 00:10:01,049
bodies and you can see that's why this

230
00:09:56,820 --> 00:10:03,839
is so slow right because our routine

231
00:10:01,049 --> 00:10:06,569
isn't that slow it's just that's a lot

232
00:10:03,839 --> 00:10:07,800
of stuff to check right and so the

233
00:10:06,570 --> 00:10:09,900
question is where's that stuff mostly

234
00:10:07,799 --> 00:10:11,939
coming from we could see it's four times

235
00:10:09,899 --> 00:10:15,629
more likely that what we're doing is

236
00:10:11,940 --> 00:10:18,030
testing a partition so we're spending a

237
00:10:15,629 --> 00:10:20,399
lot of our loop bodies in partition

238
00:10:18,029 --> 00:10:21,659
testing we don't actually know that

239
00:10:20,399 --> 00:10:23,490
that's the book of the time because

240
00:10:21,659 --> 00:10:25,740
we're not timing the two loop bodies

241
00:10:23,490 --> 00:10:28,080
separately or anything like that but we

242
00:10:25,740 --> 00:10:29,730
do know that we're just executing that

243
00:10:28,080 --> 00:10:33,150
loop a lot more and since the two loops

244
00:10:29,730 --> 00:10:34,500
look similar and if anything this loop

245
00:10:33,149 --> 00:10:37,829
is more complicated because that's to

246
00:10:34,500 --> 00:10:40,919
push stuff on a stack it's a pretty fair

247
00:10:37,830 --> 00:10:42,900
bet that like that's a really bad part

248
00:10:40,919 --> 00:10:45,088
of the routine right it's called way

249
00:10:42,899 --> 00:10:48,329
more often it's called almost five times

250
00:10:45,089 --> 00:10:51,630
four point four times over four times

251
00:10:48,330 --> 00:10:55,230
more often and it's probably more

252
00:10:51,629 --> 00:10:57,919
expensive so we kind of know that making

253
00:10:55,230 --> 00:11:04,940
the partition tester smarter or better

254
00:10:57,919 --> 00:11:06,969
using less partition testing or I mean

255
00:11:04,940 --> 00:11:08,990
doing something smarter there right

256
00:11:06,970 --> 00:11:10,490
could make a big difference in our

257
00:11:08,990 --> 00:11:13,190
routine so I think that's what we

258
00:11:10,490 --> 00:11:14,330
probably want to focus on and the first

259
00:11:13,190 --> 00:11:17,480
thing that I think we should probably

260
00:11:14,330 --> 00:11:25,790
try to focus on is just simplifying this

261
00:11:17,480 --> 00:11:30,039
down so that we don't actually I think

262
00:11:25,789 --> 00:11:37,339
we should try to make a special-purpose

263
00:11:30,039 --> 00:11:40,399
design for the part for the KT tree I

264
00:11:37,340 --> 00:11:42,710
don't think we should stuff it in to the

265
00:11:40,399 --> 00:11:47,029
AAA be like it is being stuffed now now

266
00:11:42,710 --> 00:11:51,500
we can still store it uniformly if we

267
00:11:47,029 --> 00:11:57,919
need to but we're gonna want something

268
00:11:51,500 --> 00:12:02,360
better I guess it's what I'm saying all

269
00:11:57,919 --> 00:12:04,969
right so what are we gonna do hmm

270
00:12:02,360 --> 00:12:06,680
is the real question right so what are

271
00:12:04,970 --> 00:12:09,440
we gonna do here we need we need to try

272
00:12:06,679 --> 00:12:13,189
and figure out a solution here to our to

273
00:12:09,440 --> 00:12:17,990
our situation that'll that'll improve

274
00:12:13,190 --> 00:12:19,850
the partition testing in some way so if

275
00:12:17,990 --> 00:12:24,289
we actually take a look at the partition

276
00:12:19,850 --> 00:12:26,330
tester so if I go to my raycast here I'm

277
00:12:24,289 --> 00:12:27,219
gonna need to yeah I'm gonna need to

278
00:12:26,330 --> 00:12:31,190
figure out

279
00:12:27,220 --> 00:12:32,960
qingxue me sorry I'm going to need to

280
00:12:31,190 --> 00:12:35,300
figure out some way to change this

281
00:12:32,960 --> 00:12:38,570
routine here to be able to do what it's

282
00:12:35,299 --> 00:12:42,069
doing faster and one of the things that

283
00:12:38,570 --> 00:12:47,080
I want to be able to do here as well is

284
00:12:42,070 --> 00:12:49,430
like I was saying we need some way of

285
00:12:47,080 --> 00:12:54,259
let me just go to the blackboard we need

286
00:12:49,429 --> 00:12:56,599
some way of processing the hits in order

287
00:12:54,259 --> 00:12:59,629
so that we don't waste time processing

288
00:12:56,600 --> 00:13:02,540
things that we know we can't hit or

289
00:12:59,629 --> 00:13:04,100
another way to say it would be we need

290
00:13:02,539 --> 00:13:07,909
to make sure we don't waste time

291
00:13:04,100 --> 00:13:11,269
processing things which we know won't be

292
00:13:07,909 --> 00:13:15,079
better hits than hits we already have so

293
00:13:11,269 --> 00:13:19,509
if I actually load up Milton here and I

294
00:13:15,080 --> 00:13:19,509
just drop in a day five ninety five

295
00:13:23,860 --> 00:13:34,180
so is that actually the right day it

296
00:13:29,509 --> 00:13:34,180
seems low was it 594 yesterday

297
00:13:43,909 --> 00:13:47,740
yeah I guess it was it doesn't look like

298
00:13:45,350 --> 00:13:55,930
that's quite up yet the new one

299
00:13:47,740 --> 00:13:55,930
begging Lanie validation 594 mmm mm-hmm

300
00:13:56,200 --> 00:13:59,620
let's see here

301
00:14:01,570 --> 00:14:12,950
actually you know what I still want to

302
00:14:07,460 --> 00:14:15,800
right the wrong day down so the video

303
00:14:12,950 --> 00:14:19,730
that we last posted was 594 yeah okay no

304
00:14:15,799 --> 00:14:23,990
problem no worries mm-hmm all right so

305
00:14:19,730 --> 00:14:26,180
if we want to do a KD tree here which is

306
00:14:23,990 --> 00:14:27,560
what we've constructed and how we are

307
00:14:26,179 --> 00:14:29,750
actually processing it right now we're

308
00:14:27,559 --> 00:14:31,549
just not aware of it meaning our routine

309
00:14:29,750 --> 00:14:37,580
is processing it as if it's an a a B

310
00:14:31,549 --> 00:14:46,370
tree so we in other ways we built a KD

311
00:14:37,580 --> 00:14:47,960
tree but we test an a a B tree right so

312
00:14:46,370 --> 00:14:51,110
normally a KD tree is the thing that

313
00:14:47,960 --> 00:14:54,110
just splits in one dimension every node

314
00:14:51,110 --> 00:14:57,440
so if this is like my node and I'm gonna

315
00:14:54,110 --> 00:15:00,710
have like a a and B branch here or

316
00:14:57,440 --> 00:15:02,750
something that I go down the way that it

317
00:15:00,710 --> 00:15:06,019
splits space is you know you've got a

318
00:15:02,750 --> 00:15:08,029
bunch of objects in the space and it

319
00:15:06,019 --> 00:15:11,750
picks a split plane and it sorts them

320
00:15:08,029 --> 00:15:13,159
into an a side and a B side right and so

321
00:15:11,750 --> 00:15:15,259
the KD tree is just doing that

322
00:15:13,159 --> 00:15:18,799
recursively so then you take the a space

323
00:15:15,259 --> 00:15:21,679
and you you put that right with that and

324
00:15:18,799 --> 00:15:25,879
so on so you only split by one dimension

325
00:15:21,679 --> 00:15:28,899
at a time X Y or Z and that's the

326
00:15:25,879 --> 00:15:31,189
entirety of the idea behind a KD tree

327
00:15:28,899 --> 00:15:33,649
what we're doing is we're building the

328
00:15:31,190 --> 00:15:36,560
tree that way but then we actually store

329
00:15:33,649 --> 00:15:38,269
these as boxes so we don't ever take

330
00:15:36,559 --> 00:15:40,309
advantage of the fact that the entire

331
00:15:38,269 --> 00:15:42,439
information for a node can really just

332
00:15:40,309 --> 00:15:43,819
be one plane and when you test against

333
00:15:42,440 --> 00:15:45,230
it you don't need to test against a box

334
00:15:43,820 --> 00:15:46,780
you could just test against that plane

335
00:15:45,230 --> 00:15:49,779
and know what you were going to be doing

336
00:15:46,779 --> 00:15:49,779
so

337
00:15:52,669 --> 00:15:57,029
ideally what we'd like to do here is be

338
00:15:55,409 --> 00:15:58,139
cognizant of the fact that this is a

339
00:15:57,029 --> 00:16:01,350
Katie tree because we could probably

340
00:15:58,139 --> 00:16:02,730
speed things up if we did and one of the

341
00:16:01,350 --> 00:16:05,220
things we'd like to do because obviously

342
00:16:02,730 --> 00:16:08,460
we can start by just doing a plane test

343
00:16:05,220 --> 00:16:10,740
and working with the plane because what

344
00:16:08,460 --> 00:16:13,139
we could do is say well look if we're

345
00:16:10,740 --> 00:16:15,120
pointing if we have a plane and we

346
00:16:13,139 --> 00:16:17,730
classify which side of the plane we're

347
00:16:15,120 --> 00:16:19,679
on right that's very easy to do because

348
00:16:17,730 --> 00:16:21,629
it's just the plane equation right

349
00:16:19,679 --> 00:16:23,309
so whatever the plane is we know that

350
00:16:21,629 --> 00:16:25,409
the plane equation tells us which side

351
00:16:23,309 --> 00:16:27,359
were on and because this is access

352
00:16:25,409 --> 00:16:29,100
aligned we don't even need to do an

353
00:16:27,360 --> 00:16:32,750
inner product because we know that

354
00:16:29,100 --> 00:16:35,580
whichever axis it is right X Y or Z

355
00:16:32,750 --> 00:16:38,970
whichever axis it is we just use that

356
00:16:35,580 --> 00:16:41,280
value right that value minus the D value

357
00:16:38,970 --> 00:16:42,779
of the plane is gonna tell us which side

358
00:16:41,279 --> 00:16:45,959
were on so it's literally just a

359
00:16:42,779 --> 00:16:50,850
subtract of one of the axes from a

360
00:16:45,960 --> 00:16:53,430
constant value that's it right super

361
00:16:50,850 --> 00:16:54,899
super simple so we know we can test

362
00:16:53,429 --> 00:16:57,449
which side we're on really easily and

363
00:16:54,899 --> 00:16:59,009
then all we have to do is see the same

364
00:16:57,450 --> 00:17:00,990
thing for the Ray direction

365
00:16:59,009 --> 00:17:03,899
so whatever the raid erection is we can

366
00:17:00,990 --> 00:17:05,910
classify which direction we're going and

367
00:17:03,899 --> 00:17:07,410
if we're not billing in the in the

368
00:17:05,910 --> 00:17:09,089
direction that would point us towards

369
00:17:07,410 --> 00:17:11,040
the plane so if our if our Ray is

370
00:17:09,088 --> 00:17:13,409
pointing away from the plane we know we

371
00:17:11,039 --> 00:17:15,029
only have to test the side were in right

372
00:17:13,410 --> 00:17:17,130
we never have to test the other side if

373
00:17:15,029 --> 00:17:19,559
we're pointing towards the other side

374
00:17:17,130 --> 00:17:24,000
then we need to test our side first and

375
00:17:19,559 --> 00:17:26,909
then the other side after right and so

376
00:17:24,000 --> 00:17:38,369
the problem that you know that we have

377
00:17:26,910 --> 00:17:40,200
here is that we have to sort of we have

378
00:17:38,369 --> 00:17:42,209
to create a stack that would be more

379
00:17:40,200 --> 00:17:44,130
amenable to that process because right

380
00:17:42,210 --> 00:17:45,840
now we don't really have a stack that

381
00:17:44,130 --> 00:17:47,670
can do this we don't have a stack that

382
00:17:45,839 --> 00:17:55,859
allows us to like do all of our work and

383
00:17:47,670 --> 00:17:57,509
then when we pop back up actually yes we

384
00:17:55,859 --> 00:18:00,089
do nevermind we can do that easily we

385
00:17:57,509 --> 00:18:02,250
just okay so we just push this on the

386
00:18:00,089 --> 00:18:04,168
stack first and then we push this on the

387
00:18:02,250 --> 00:18:08,190
stack and then it will pop back to this

388
00:18:04,169 --> 00:18:10,649
eventually right so totally fine okay

389
00:18:08,190 --> 00:18:12,298
so that's one thing we can do and that

390
00:18:10,648 --> 00:18:14,849
would be easy right

391
00:18:12,298 --> 00:18:18,118
so that's simple and then the other

392
00:18:14,849 --> 00:18:22,949
thing we can do is if at any time we can

393
00:18:18,118 --> 00:18:25,408
pretest and say look if there's no way I

394
00:18:22,950 --> 00:18:27,389
can make it to this plane so whatever

395
00:18:25,409 --> 00:18:29,100
the distance from this plane is along

396
00:18:27,388 --> 00:18:30,748
the Ray and that's an actual

397
00:18:29,099 --> 00:18:32,608
intersection so that's harder to compute

398
00:18:30,749 --> 00:18:46,108
because we have to know the actual T

399
00:18:32,608 --> 00:18:46,439
value wait no it's not no it's not at

400
00:18:46,108 --> 00:18:48,628
all

401
00:18:46,440 --> 00:18:50,700
never mind so even that's easy to

402
00:18:48,628 --> 00:18:55,138
compute all we have to do is just walk

403
00:18:50,700 --> 00:18:57,720
add our current team n values like our

404
00:18:55,138 --> 00:19:00,148
hit at our current hit value if we just

405
00:18:57,720 --> 00:19:02,118
take our Ray add our hit value to it we

406
00:19:00,148 --> 00:19:05,729
will get a point if that point is

407
00:19:02,118 --> 00:19:07,709
actually on the if that point is on the

408
00:19:05,730 --> 00:19:09,419
other side of the plane we know that we

409
00:19:07,710 --> 00:19:11,850
could hit some but thing on that side of

410
00:19:09,419 --> 00:19:14,009
the plane and be closer if that point is

411
00:19:11,849 --> 00:19:16,339
on the same side of the plane as us we

412
00:19:14,009 --> 00:19:20,128
don't have to do that branch at all

413
00:19:16,339 --> 00:19:23,308
right because we know at that point that

414
00:19:20,128 --> 00:19:24,748
the value that that nothing we could hit

415
00:19:23,308 --> 00:19:26,428
on the other side of the plane would

416
00:19:24,749 --> 00:19:34,889
ever be a closer hit than the hits we've

417
00:19:26,429 --> 00:19:39,239
already had right so we could do a lot

418
00:19:34,888 --> 00:19:42,959
better potentially here and I don't want

419
00:19:39,239 --> 00:19:46,769
to say definitively that this will be

420
00:19:42,960 --> 00:19:49,108
faster because I don't know like

421
00:19:46,769 --> 00:19:51,690
anything on a modern CPU unless it's a

422
00:19:49,108 --> 00:19:52,949
very clear-cut thing you can never say

423
00:19:51,690 --> 00:19:55,379
that you're going to be faster when you

424
00:19:52,950 --> 00:19:57,239
do something if you already have a

425
00:19:55,378 --> 00:19:58,829
routine that's relatively optimized

426
00:19:57,239 --> 00:20:00,210
meaning you know you've done the work of

427
00:19:58,829 --> 00:20:00,538
putting it in Cindy and it's not doing

428
00:20:00,210 --> 00:20:03,269
anything

429
00:20:00,538 --> 00:20:05,278
incredibly stupid then even though you

430
00:20:03,269 --> 00:20:06,659
can have a suspicion that well this

431
00:20:05,278 --> 00:20:08,278
should be faster because I think it can

432
00:20:06,659 --> 00:20:10,799
do less processing and it can do less

433
00:20:08,278 --> 00:20:13,648
math so that should equal a faster

434
00:20:10,798 --> 00:20:16,739
routine right it's just intuition it's

435
00:20:13,648 --> 00:20:17,209
not true until you actually test it and

436
00:20:16,739 --> 00:20:20,929
verify

437
00:20:17,210 --> 00:20:22,788
that fact right so I suspect that this

438
00:20:20,929 --> 00:20:24,409
will give me a faster routine but that

439
00:20:22,788 --> 00:20:29,599
is purely a suspicion

440
00:20:24,409 --> 00:20:31,549
it is not actually any guarantee so we

441
00:20:29,599 --> 00:20:36,980
again want to take this cautiously and

442
00:20:31,548 --> 00:20:39,440
say alright let's try to let's try to do

443
00:20:36,980 --> 00:20:41,179
this by replacing this routine but we're

444
00:20:39,440 --> 00:20:43,909
gonna leave the existing routine in

445
00:20:41,179 --> 00:20:47,269
place probably because we don't actually

446
00:20:43,909 --> 00:20:48,200
know yet whether it's gonna be faster

447
00:20:47,269 --> 00:20:51,980
right

448
00:20:48,200 --> 00:20:53,569
so this routine here that we're this

449
00:20:51,980 --> 00:20:59,569
this part here we're gonna have to

450
00:20:53,569 --> 00:21:02,058
replace okay so what we need now is we

451
00:20:59,569 --> 00:21:06,079
need a way of encoding exactly what I

452
00:21:02,058 --> 00:21:07,548
just said into our into our stack so

453
00:21:06,079 --> 00:21:09,798
we're gonna have to pull something off

454
00:21:07,548 --> 00:21:11,629
the stack that we can actually use in

455
00:21:09,798 --> 00:21:15,048
some way that gives us a bunch of values

456
00:21:11,630 --> 00:21:21,020
and the values that we need are going to

457
00:21:15,048 --> 00:21:26,509
be like you know are gonna be I should I

458
00:21:21,019 --> 00:21:28,278
say this so I want to write this routine

459
00:21:26,509 --> 00:21:30,200
first and play around with it before I

460
00:21:28,278 --> 00:21:32,148
go modify my stack because I don't know

461
00:21:30,200 --> 00:21:35,450
exactly what I want to store that's what

462
00:21:32,148 --> 00:21:37,548
I'm trying to say so let me sketch out

463
00:21:35,450 --> 00:21:40,159
all the things I just said like how

464
00:21:37,548 --> 00:21:42,558
would they actually have to work I want

465
00:21:40,159 --> 00:21:44,059
to try and do that first so that I have

466
00:21:42,558 --> 00:21:46,129
like a solid thing where I can be like

467
00:21:44,058 --> 00:21:48,288
okay here's what I'm gonna have to do

468
00:21:46,130 --> 00:21:53,028
now let's design the stack that gives me

469
00:21:48,288 --> 00:21:56,480
easy access to those things right okay

470
00:21:53,028 --> 00:22:00,038
so if we take a look here at the the

471
00:21:56,480 --> 00:22:04,548
things I'm gonna need I need to know

472
00:22:00,038 --> 00:22:11,839
which one of the values in the plane I

473
00:22:04,548 --> 00:22:15,158
actually want right because what I'm

474
00:22:11,839 --> 00:22:20,898
gonna need to use that value as the

475
00:22:15,159 --> 00:22:26,929
classifier right I I need to I need to

476
00:22:20,898 --> 00:22:30,949
load out of my source data my Rae or

477
00:22:26,929 --> 00:22:34,009
whatever I need to use specifically the

478
00:22:30,950 --> 00:22:37,340
that corresponds to the correct

479
00:22:34,009 --> 00:22:40,039
dimension now the problem that I'm gonna

480
00:22:37,339 --> 00:22:45,139
have here in terms of making this fast

481
00:22:40,039 --> 00:22:47,299
is you know I would like to avoid doing

482
00:22:45,140 --> 00:22:48,830
something like a horizontal ad and I

483
00:22:47,299 --> 00:22:54,009
don't really need one because like I

484
00:22:48,829 --> 00:22:56,389
said doing a dot product with with an

485
00:22:54,009 --> 00:22:58,369
doing a dot product was something where

486
00:22:56,390 --> 00:22:59,840
you actually know already it's just one

487
00:22:58,369 --> 00:23:00,439
of your values either positive or

488
00:22:59,839 --> 00:23:10,039
negative

489
00:23:00,440 --> 00:23:12,049
I just am Not sure I'm not sure what the

490
00:23:10,039 --> 00:23:15,649
fastest way to do that is with an

491
00:23:12,049 --> 00:23:17,960
intrinsic because while it's easy to

492
00:23:15,650 --> 00:23:19,940
pick a dimension I don't really want to

493
00:23:17,960 --> 00:23:23,480
have to branch every time I would like

494
00:23:19,940 --> 00:23:34,160
to be able to load using a value and I'm

495
00:23:23,480 --> 00:23:37,910
not sure you can do that so if you take

496
00:23:34,160 --> 00:23:40,610
a look for example at the extractor

497
00:23:37,910 --> 00:23:42,560
teens like here right you can see that

498
00:23:40,609 --> 00:23:45,699
they're set up around immediate and

499
00:23:42,559 --> 00:23:50,119
that's the problem I'm talking about so

500
00:23:45,700 --> 00:23:52,700
for example uh yeah let me what do you

501
00:23:50,119 --> 00:23:55,369
call it let me let's let's go here so

502
00:23:52,700 --> 00:24:01,569
what I want to do here is like I guess

503
00:23:55,369 --> 00:24:01,569
that could be swizzles they could be

504
00:24:07,839 --> 00:24:16,369
wait wait wait wait wait wait no it's

505
00:24:11,960 --> 00:24:20,660
not as bad as I thought actually I can

506
00:24:16,369 --> 00:24:24,649
just do this with some constants because

507
00:24:20,660 --> 00:24:29,500
now that I think about it right we

508
00:24:24,650 --> 00:24:32,540
already have our Ray as X's wise and Z's

509
00:24:29,500 --> 00:24:34,430
because we're four wide so actually I

510
00:24:32,539 --> 00:24:38,000
don't have to be as nervous as I thought

511
00:24:34,430 --> 00:24:42,200
it is a little annoying because in order

512
00:24:38,000 --> 00:24:46,160
to avoid branching every time I would

513
00:24:42,200 --> 00:24:48,259
need to I would need to basically do

514
00:24:46,160 --> 00:24:51,050
like three instructions to select the

515
00:24:48,259 --> 00:24:54,349
actual one that we need right but other

516
00:24:51,049 --> 00:24:56,930
but it's okay otherwise so so I think

517
00:24:54,349 --> 00:24:59,089
we're actually all right here so what I

518
00:24:56,930 --> 00:25:01,880
can do is I can say all right we've got

519
00:24:59,089 --> 00:25:05,689
a couple values we want here like I was

520
00:25:01,880 --> 00:25:07,280
saying we've got like a classifier so

521
00:25:05,690 --> 00:25:09,380
this will basically be the thing that

522
00:25:07,279 --> 00:25:11,809
says for this particular plane what are

523
00:25:09,380 --> 00:25:13,850
we gonna do and what I need to do here

524
00:25:11,809 --> 00:25:15,829
is I need to do like a select

525
00:25:13,849 --> 00:25:20,419
effectively right I need to be able to

526
00:25:15,829 --> 00:25:23,509
pick based on a based on some kind of a

527
00:25:20,420 --> 00:25:27,019
thing that's stored in the actual stack

528
00:25:23,509 --> 00:25:30,470
I need to be able to pick from X Y or Z

529
00:25:27,019 --> 00:25:33,200
and yeah I don't know if we actually

530
00:25:30,470 --> 00:25:35,240
have that we do so you can see here I've

531
00:25:33,200 --> 00:25:39,200
got like select and then I've got a mask

532
00:25:35,240 --> 00:25:41,029
value right so what I need to do here is

533
00:25:39,200 --> 00:25:44,299
I need to do is select and then I need

534
00:25:41,029 --> 00:25:44,690
to do another select right it's how this

535
00:25:44,299 --> 00:25:49,700
would work

536
00:25:44,690 --> 00:25:54,200
and so the Ray position for example like

537
00:25:49,700 --> 00:25:57,850
where the Ray actually is I can generate

538
00:25:54,200 --> 00:25:57,850
here so what I need to do is say like

539
00:26:00,789 --> 00:26:04,579
trying to get what the fast wait is to

540
00:26:02,839 --> 00:26:06,919
be so what I need to do here is say like

541
00:26:04,579 --> 00:26:08,929
okay you know the Ray direction or the

542
00:26:06,920 --> 00:26:10,779
Ray position right so we've got Ray

543
00:26:08,930 --> 00:26:15,680
origin I believe is what it's called

544
00:26:10,779 --> 00:26:18,779
this value so I've got rate origin and I

545
00:26:15,680 --> 00:26:22,080
want to select from like the x value

546
00:26:18,779 --> 00:26:25,649
or the Y value depending on like the

547
00:26:22,079 --> 00:26:32,159
mask that picks one of the other right

548
00:26:25,650 --> 00:26:35,610
so I want to do this with like an S mask

549
00:26:32,160 --> 00:26:37,860
and then I want to do here another one

550
00:26:35,609 --> 00:26:41,219
that's like okay I've got ray I've got

551
00:26:37,859 --> 00:26:42,959
classifier or I guess most people call

552
00:26:41,220 --> 00:26:48,120
this Y mask and then we have a Z mask

553
00:26:42,960 --> 00:26:50,840
right right origin Z and so this is just

554
00:26:48,119 --> 00:26:55,679
doing a dot product by doing two selects

555
00:26:50,839 --> 00:26:57,599
right and again I don't know if that's a

556
00:26:55,680 --> 00:26:59,779
smart thing it may be that we really

557
00:26:57,599 --> 00:27:02,399
would rather just do the multiply ad

558
00:26:59,779 --> 00:27:05,629
which is two instructions but issues on

559
00:27:02,400 --> 00:27:13,019
two ports not sure mm-hmm

560
00:27:05,630 --> 00:27:14,250
hard to say actually cuz the Select yeah

561
00:27:13,019 --> 00:27:22,650
I guess we can worry about that later

562
00:27:14,250 --> 00:27:29,759
but yeah hard to say but anyway if we

563
00:27:22,650 --> 00:27:32,040
have the the Y mass loaded here and the

564
00:27:29,759 --> 00:27:33,869
Z mass loaded here from our stack or

565
00:27:32,039 --> 00:27:36,690
something or Frye actually be from the

566
00:27:33,869 --> 00:27:38,819
box somehow right we would load those up

567
00:27:36,690 --> 00:27:40,529
probably by just loading a single

568
00:27:38,819 --> 00:27:44,669
floating point value and replicating

569
00:27:40,529 --> 00:27:47,069
right I would assume so that's probably

570
00:27:44,670 --> 00:27:51,870
how this would work it would be like you

571
00:27:47,069 --> 00:27:54,539
know our our KD node here and we would

572
00:27:51,869 --> 00:27:55,949
say like whatever the Y mask is and

573
00:27:54,539 --> 00:27:57,539
whatever the Z mask is those would just

574
00:27:55,950 --> 00:28:01,410
be stored as two floating point values

575
00:27:57,539 --> 00:28:02,460
that we would load for expedience so I

576
00:28:01,410 --> 00:28:04,950
think that's all that would happen

577
00:28:02,460 --> 00:28:07,500
we then have a classifier now that we

578
00:28:04,950 --> 00:28:11,190
built that can pick out the thing we

579
00:28:07,500 --> 00:28:14,670
want and so we can do that twice and get

580
00:28:11,190 --> 00:28:20,549
you know the basically like the origin

581
00:28:14,670 --> 00:28:26,660
class or like the origin side you know

582
00:28:20,549 --> 00:28:26,659
I'm saying and the direction side

583
00:28:31,339 --> 00:28:36,259
and this will just pick based on the

584
00:28:33,740 --> 00:28:38,480
raider action instead of the race side

585
00:28:36,259 --> 00:28:48,500
and I don't remember it's just raid D

586
00:28:38,480 --> 00:28:50,630
right yeah so and this tells us where

587
00:28:48,500 --> 00:28:51,888
we're starting so relative to this KT

588
00:28:50,630 --> 00:28:55,700
tree like which side you're on

589
00:28:51,888 --> 00:28:58,069
and then it tells us like which whether

590
00:28:55,700 --> 00:29:00,259
we're gonna stay on that side or not so

591
00:28:58,069 --> 00:29:03,888
basically if these two sides are the

592
00:29:00,259 --> 00:29:06,288
same you know and I'm saying and

593
00:29:03,888 --> 00:29:08,449
actually I suppose we can also this

594
00:29:06,288 --> 00:29:09,980
actually we can classify a little bit

595
00:29:08,450 --> 00:29:11,210
differently rather than using the Ray

596
00:29:09,980 --> 00:29:13,130
direction we can actually use our

597
00:29:11,210 --> 00:29:15,649
current team in like I say I'm can step

598
00:29:13,130 --> 00:29:17,809
out to our current team in and use that

599
00:29:15,648 --> 00:29:22,398
so another way to look at it would be

600
00:29:17,808 --> 00:29:28,879
instead of doing rey de r yeah we can

601
00:29:22,398 --> 00:29:31,609
just use yeah we can just use a slightly

602
00:29:28,880 --> 00:29:35,330
turn value and since we can do subtract

603
00:29:31,609 --> 00:29:37,939
as well on this there's some of the

604
00:29:35,329 --> 00:29:40,129
things we can do a little later but

605
00:29:37,940 --> 00:29:43,190
anyway so if you go in here and we take

606
00:29:40,130 --> 00:29:47,899
der side right this is actually gonna be

607
00:29:43,190 --> 00:29:51,380
like end side I guess and so I might

608
00:29:47,898 --> 00:29:54,619
call this like the start side you know

609
00:29:51,380 --> 00:29:56,690
and the inside because it's like where

610
00:29:54,619 --> 00:29:59,000
the race starts and where the Ray ends

611
00:29:56,690 --> 00:30:02,350
and so what we'd want to do here is not

612
00:29:59,000 --> 00:30:05,359
rady we'd want to do like Ray end and

613
00:30:02,349 --> 00:30:08,079
Ray end is just going to be like an ad

614
00:30:05,359 --> 00:30:12,648
right so it's gonna be like a V 3 for X

615
00:30:08,079 --> 00:30:15,829
ray and equals ray origin plus whatever

616
00:30:12,648 --> 00:30:22,099
the current like minimum value is right

617
00:30:15,829 --> 00:30:24,470
so it's it's this right it's this now

618
00:30:22,099 --> 00:30:27,319
since I think we do probably want to

619
00:30:24,470 --> 00:30:30,019
know that value fairly frequently we may

620
00:30:27,319 --> 00:30:32,480
want to start storing that right so the

621
00:30:30,019 --> 00:30:34,638
hit P we may want to stop caring about

622
00:30:32,480 --> 00:30:35,990
tier a at some point and actually start

623
00:30:34,638 --> 00:30:37,158
caring about hippy but I don't know

624
00:30:35,990 --> 00:30:39,558
we'll see you about that

625
00:30:37,159 --> 00:30:44,600
so this is actually what we need

626
00:30:39,558 --> 00:30:47,798
here and so we produced that and on here

627
00:30:44,599 --> 00:30:55,939
we're gonna do like okay so hit P right

628
00:30:47,798 --> 00:30:57,679
hit P hit P so that's all fine and I

629
00:30:55,940 --> 00:30:59,840
think that gives us the actual

630
00:30:57,679 --> 00:31:02,090
information that we need so this gives

631
00:30:59,839 --> 00:31:03,859
us our origin point this gives us our

632
00:31:02,089 --> 00:31:07,579
hit point so we have a start in our end

633
00:31:03,859 --> 00:31:10,638
and the only thing we need to do now is

634
00:31:07,579 --> 00:31:14,028
actually subtract so we need start side

635
00:31:10,638 --> 00:31:18,349
to be like you know start side - and we

636
00:31:14,028 --> 00:31:21,589
need n side to be inside - some like

637
00:31:18,349 --> 00:31:25,908
plain D value right and this is just the

638
00:31:21,589 --> 00:31:30,378
thing that were that we're using to

639
00:31:25,909 --> 00:31:32,059
adjust so that we know that we're if we

640
00:31:30,378 --> 00:31:35,089
just did this we're just picking the

641
00:31:32,058 --> 00:31:38,480
coordinate but the plane is somewhere in

642
00:31:35,089 --> 00:31:40,220
that along that axis and we have to

643
00:31:38,480 --> 00:31:44,149
remove that value so that we're relative

644
00:31:40,220 --> 00:31:45,649
to the plane right now the fact that

645
00:31:44,148 --> 00:31:48,589
we're subtracting this from both things

646
00:31:45,648 --> 00:31:51,258
means that I'm not sure we actually need

647
00:31:48,589 --> 00:31:52,908
to do that we'll see us the math goes if

648
00:31:51,259 --> 00:31:59,329
it might be that we can just ignore that

649
00:31:52,909 --> 00:32:01,070
but so from the box from the like

650
00:31:59,329 --> 00:32:03,470
permanent storage of the KD tree we

651
00:32:01,069 --> 00:32:05,480
would need to know the masks for y and z

652
00:32:03,470 --> 00:32:07,069
and then the plane and then from those

653
00:32:05,480 --> 00:32:08,929
three floating point values we can

654
00:32:07,069 --> 00:32:11,269
produce exactly the thing that I said in

655
00:32:08,929 --> 00:32:13,480
the on the black board we now know what

656
00:32:11,269 --> 00:32:16,099
side we start on what side we end on and

657
00:32:13,480 --> 00:32:18,999
we can tell what the sign of those two

658
00:32:16,099 --> 00:32:21,439
things is if we want to as well right

659
00:32:18,999 --> 00:32:25,190
which is which is probably what we care

660
00:32:21,440 --> 00:32:28,249
about for for testing okay so that's the

661
00:32:25,190 --> 00:32:29,960
actual information that we needed and

662
00:32:28,249 --> 00:32:31,730
now we just need to figure out what

663
00:32:29,960 --> 00:32:34,159
exactly we're going to do and like I

664
00:32:31,730 --> 00:32:36,528
said there's only three things we might

665
00:32:34,159 --> 00:32:38,869
want to do here we might want to push

666
00:32:36,528 --> 00:32:45,470
both things on the stack or we might

667
00:32:38,868 --> 00:32:47,449
want to only push one why they want to

668
00:32:45,470 --> 00:32:48,950
push both things or no things that's all

669
00:32:47,450 --> 00:32:50,750
right we all want to push both things or

670
00:32:48,950 --> 00:32:52,548
one thing technically there's a case

671
00:32:50,750 --> 00:32:53,089
where we would push no things but in

672
00:32:52,548 --> 00:32:54,829
order to

673
00:32:53,089 --> 00:32:57,199
that we wanted to not push anything at

674
00:32:54,829 --> 00:33:03,259
all we would need additional piece of

675
00:32:57,200 --> 00:33:05,179
information which is the the minimum

676
00:33:03,259 --> 00:33:06,860
plane bound or if there's other bounds

677
00:33:05,179 --> 00:33:08,929
we wanted to check so basically the

678
00:33:06,859 --> 00:33:11,898
question is do we want to do that or not

679
00:33:08,929 --> 00:33:14,090
and what I mean by this is if you take a

680
00:33:11,898 --> 00:33:19,398
look at how the KT tree is structured

681
00:33:14,089 --> 00:33:23,439
what's gonna happen here is that let's

682
00:33:19,398 --> 00:33:23,439
suppose we have a bunch of crap right

683
00:33:23,648 --> 00:33:29,118
scattered around we do a KD tree

684
00:33:26,269 --> 00:33:32,569
division right and we're gonna do a ray

685
00:33:29,118 --> 00:33:35,240
cast like that well if we were to do

686
00:33:32,569 --> 00:33:37,908
this testing in AABB land we would have

687
00:33:35,240 --> 00:33:40,788
two AAA bb's to test against this one

688
00:33:37,909 --> 00:33:42,980
and this one right and what we would

689
00:33:40,788 --> 00:33:45,499
find pretty much immediately is that we

690
00:33:42,980 --> 00:33:47,329
don't actually need to test either of

691
00:33:45,499 --> 00:33:50,629
these two things so we would just never

692
00:33:47,329 --> 00:33:52,128
descend once we go to a KD tree the only

693
00:33:50,628 --> 00:33:53,808
thing we're gonna have is that we're on

694
00:33:52,128 --> 00:33:56,628
this side of it we're not gonna know

695
00:33:53,808 --> 00:33:58,759
that actually we don't need to test it

696
00:33:56,628 --> 00:34:01,099
because there's the bounds of it or not

697
00:33:58,759 --> 00:34:02,569
close to us now what we normally would

698
00:34:01,099 --> 00:34:04,099
do in a KT tree is we just will we just

699
00:34:02,569 --> 00:34:06,079
keep going right there's another bound

700
00:34:04,099 --> 00:34:07,868
there's another bound like there's

701
00:34:06,079 --> 00:34:11,659
another bound there's another bound

702
00:34:07,868 --> 00:34:13,368
right and so on so we would always go

703
00:34:11,659 --> 00:34:16,869
down and test at least one thing for

704
00:34:13,369 --> 00:34:20,000
every raycast even forecasting outside

705
00:34:16,869 --> 00:34:22,039
that may just be better it's hard to say

706
00:34:20,000 --> 00:34:24,588
right the idea behind the KD tree is

707
00:34:22,039 --> 00:34:26,750
minimize the number of actual tests like

708
00:34:24,588 --> 00:34:30,500
that you do to walk down to leaves and

709
00:34:26,750 --> 00:34:32,059
then test the leaves right so what we

710
00:34:30,500 --> 00:34:35,119
want to do is keep this as simple as

711
00:34:32,059 --> 00:34:36,949
possible and again like I don't know if

712
00:34:35,119 --> 00:34:39,108
it actually is you can see how much work

713
00:34:36,949 --> 00:34:41,989
we're doing here it is a fair amount

714
00:34:39,108 --> 00:34:44,480
actually so it's unclear if we can beat

715
00:34:41,989 --> 00:34:46,989
it or not might you know modulo our

716
00:34:44,480 --> 00:34:50,599
loads here's the actual work we're doing

717
00:34:46,989 --> 00:34:57,379
mostly the selects are the cost here and

718
00:34:50,599 --> 00:34:58,970
then we've got to subtract so then what

719
00:34:57,380 --> 00:35:01,460
we want to do here is say look either

720
00:34:58,969 --> 00:35:04,309
we're gonna push we're either gonna push

721
00:35:01,460 --> 00:35:05,659
two things or one thing right so that's

722
00:35:04,309 --> 00:35:06,579
all we really need to know is we're

723
00:35:05,659 --> 00:35:10,929
either pushing one thing

724
00:35:06,579 --> 00:35:13,750
two things and you know this might be a

725
00:35:10,929 --> 00:35:16,059
case for that conditional move because

726
00:35:13,750 --> 00:35:18,429
in this case we know that we'd always be

727
00:35:16,059 --> 00:35:21,880
pushing one thing so we know that like

728
00:35:18,429 --> 00:35:23,829
box tap depth plus plus is always going

729
00:35:21,880 --> 00:35:30,210
to be equal to like the closed side

730
00:35:23,829 --> 00:35:30,210
right and then the only question is like

731
00:35:30,269 --> 00:35:45,699
do we push the far side right so it's

732
00:35:39,969 --> 00:35:47,139
like this you know maybe it will happen

733
00:35:45,699 --> 00:35:49,929
maybe it won't right

734
00:35:47,139 --> 00:35:51,639
and that might want to be conditional

735
00:35:49,929 --> 00:35:55,000
move now like I said because unlike the

736
00:35:51,639 --> 00:35:56,889
previous routine we need to do all the

737
00:35:55,000 --> 00:36:00,760
work to determine this there isn't extra

738
00:35:56,889 --> 00:36:02,859
work that gets done because there's no

739
00:36:00,760 --> 00:36:04,750
binary and here or anything

740
00:36:02,860 --> 00:36:06,490
I'm II know binary or I think it's just

741
00:36:04,750 --> 00:36:08,289
like literally we and these two things

742
00:36:06,489 --> 00:36:12,039
together and whatever the result is we

743
00:36:08,289 --> 00:36:14,230
push or don't write so we would do this

744
00:36:12,039 --> 00:36:16,059
classification we would then you know

745
00:36:14,230 --> 00:36:17,829
push this on and we would just see can

746
00:36:16,059 --> 00:36:19,000
we make it to the far side or not if we

747
00:36:17,829 --> 00:36:20,920
can't make it to the far side we just

748
00:36:19,000 --> 00:36:31,710
stop and that's the end of the story

749
00:36:20,920 --> 00:36:31,710
right so

750
00:36:41,509 --> 00:36:44,708
I think that's it

751
00:36:51,230 --> 00:36:56,480
I don't know so in here we basically say

752
00:36:54,980 --> 00:36:57,619
okay we've got two box that pushes we

753
00:36:56,480 --> 00:37:00,679
want to push a closed side in the far

754
00:36:57,619 --> 00:37:04,820
side I think we need to know in order to

755
00:37:00,679 --> 00:37:06,618
determine which so the start side the

756
00:37:04,820 --> 00:37:08,750
reason we need to know the start side is

757
00:37:06,619 --> 00:37:11,690
just because we need to know whether or

758
00:37:08,750 --> 00:37:14,389
not we we need to be able to select

759
00:37:11,690 --> 00:37:19,909
which of the two sides we're going to

760
00:37:14,389 --> 00:37:21,199
push right so the the reason we need

761
00:37:19,909 --> 00:37:23,750
that is because we need to figure out

762
00:37:21,199 --> 00:37:26,839
what close side even is so close side is

763
00:37:23,750 --> 00:37:30,079
going to be equal to like something that

764
00:37:26,840 --> 00:37:38,840
has to do with what start side sign is

765
00:37:30,079 --> 00:37:40,309
right so if that makes sense so another

766
00:37:38,840 --> 00:37:41,600
thing that's interesting about this now

767
00:37:40,309 --> 00:37:46,570
that I think about it too is that

768
00:37:41,599 --> 00:37:46,569
there's only one of them

769
00:37:56,110 --> 00:38:11,690
so interesting mm-hmm

770
00:38:03,489 --> 00:38:16,219
so the Rae origin is the same for all of

771
00:38:11,690 --> 00:38:19,909
the Rays that we pass in here so we

772
00:38:16,219 --> 00:38:28,849
don't actually need to do multiples on

773
00:38:19,909 --> 00:38:39,649
this one right this is not actually for

774
00:38:28,849 --> 00:38:49,940
wide so that's a bit of a brain teaser

775
00:38:39,650 --> 00:38:53,630
isn't it so the question is if that's

776
00:38:49,940 --> 00:38:56,050
not for wide what do I do with the rest

777
00:38:53,630 --> 00:38:56,050
of that

778
00:39:02,239 --> 00:39:05,239
yikes

779
00:39:10,050 --> 00:39:15,010
so the problem that I'm seeing here and

780
00:39:12,639 --> 00:39:16,809
it's not a problem as much as an

781
00:39:15,010 --> 00:39:20,350
opportunity I guess is the way to think

782
00:39:16,809 --> 00:39:23,440
about it is that if I want to know for

783
00:39:20,349 --> 00:39:25,900
my KD tree which side I'm on the Rae

784
00:39:23,440 --> 00:39:27,460
origin for all four Ray's is the same so

785
00:39:25,900 --> 00:39:28,750
it doesn't need to be computed wide

786
00:39:27,460 --> 00:39:30,490
you're just computing the same thing

787
00:39:28,750 --> 00:39:33,039
multiple times that's just kind of

788
00:39:30,489 --> 00:39:34,779
wasteful so you're wasting three lanes

789
00:39:33,039 --> 00:39:41,130
worth of arithmetic that you could have

790
00:39:34,780 --> 00:39:44,470
been doing something on right and I

791
00:39:41,130 --> 00:39:46,539
guess I don't know though what can i

792
00:39:44,469 --> 00:39:49,029
what could I possibly use those other

793
00:39:46,539 --> 00:39:53,199
three lanes for because there's no real

794
00:39:49,030 --> 00:39:57,870
point to it now I could classify 3k DS

795
00:39:53,199 --> 00:39:57,869
at a time sorry for

796
00:40:11,048 --> 00:40:16,389
and I guess I just should

797
00:40:28,949 --> 00:40:35,578
I mean yeah I really don't know what to

798
00:40:33,329 --> 00:40:37,410
do there I'm sure there's a right answer

799
00:40:35,579 --> 00:40:39,599
people use KD trees for ray tracing

800
00:40:37,409 --> 00:40:41,519
specifically like this is a very common

801
00:40:39,599 --> 00:40:43,530
technique so I think I must be doing

802
00:40:41,519 --> 00:40:45,539
something stupid or not thinking of

803
00:40:43,530 --> 00:40:47,700
something obvious because I'm not sure

804
00:40:45,539 --> 00:40:50,940
are you paralyzed that particularly well

805
00:40:47,699 --> 00:40:54,210
because it's like well the origins in

806
00:40:50,940 --> 00:40:56,730
the same place and when I want to

807
00:40:54,210 --> 00:40:59,760
classify that how do I avoid throwing

808
00:40:56,730 --> 00:41:02,460
away the work there I could classify

809
00:40:59,760 --> 00:41:08,910
this against it and it's children at the

810
00:41:02,460 --> 00:41:32,119
same time but if I do that what do I do

811
00:41:08,909 --> 00:41:32,118
for push purposes I really don't know

812
00:41:32,480 --> 00:41:35,990
that's a stumper

813
00:41:42,108 --> 00:41:47,389
what why is the what was my computer

814
00:41:45,588 --> 00:41:49,219
just doing it just did a little luck

815
00:41:47,389 --> 00:41:57,009
waiting for I don't want to know what

816
00:41:49,219 --> 00:42:02,808
that was um that's a real stumper so I

817
00:41:57,009 --> 00:42:08,659
don't know what that implies so so I

818
00:42:02,809 --> 00:42:21,319
guess so I guess the answer for for me

819
00:42:08,659 --> 00:42:28,608
here is I guess I do want I guess I do

820
00:42:21,318 --> 00:42:33,608
want to put a more some more information

821
00:42:28,608 --> 00:42:33,608
into this thing like

822
00:42:38,980 --> 00:42:45,199
like if I'm gonna have to classify the

823
00:42:41,780 --> 00:42:48,140
origin of this Rea relative to something

824
00:42:45,199 --> 00:42:51,169
I might as well classify it relative to

825
00:42:48,139 --> 00:42:53,179
four things right and if I'm gonna

826
00:42:51,170 --> 00:42:55,460
classify it related to four things I

827
00:42:53,179 --> 00:42:58,549
might as well classify it relative to

828
00:42:55,460 --> 00:43:08,380
like two bounds like a minute a max

829
00:42:58,550 --> 00:43:08,380
bound at the very least right

830
00:43:39,800 --> 00:43:44,760
so I guess what I would say is it'd be

831
00:43:42,269 --> 00:43:49,789
pretty easy to switch this to using two

832
00:43:44,760 --> 00:43:49,790
of the lanes using four of the lanes

833
00:44:02,280 --> 00:44:08,910
I don't know what I don't know what to

834
00:44:04,860 --> 00:44:10,680
do with that I'm really stumped so using

835
00:44:08,909 --> 00:44:12,480
four of the lanes would suggest that we

836
00:44:10,679 --> 00:44:18,659
would also need to test the second axis

837
00:44:12,480 --> 00:44:27,210
at the same time so like we could always

838
00:44:18,659 --> 00:44:29,250
include Z bounds and just like like we

839
00:44:27,210 --> 00:44:33,449
could use some kind of weird hybrid tree

840
00:44:29,250 --> 00:44:39,380
it's like a alternating XY tree with Z

841
00:44:33,449 --> 00:44:39,379
encoded on every rung because you can

842
00:44:45,079 --> 00:44:58,769
yeah I'm sorry I'm stumped on this so I

843
00:44:56,369 --> 00:45:00,119
want to go read some KD tree literature

844
00:44:58,769 --> 00:45:01,530
at this point which is what I would

845
00:45:00,119 --> 00:45:03,869
normally do I mean I would have normally

846
00:45:01,530 --> 00:45:05,550
done that first but I do try to always

847
00:45:03,869 --> 00:45:08,299
figure things out myself on handmade

848
00:45:05,550 --> 00:45:12,269
hero just to walk through that process

849
00:45:08,300 --> 00:45:13,830
for you and it's a bummer here because

850
00:45:12,269 --> 00:45:15,690
I'm pretty sure people have already

851
00:45:13,829 --> 00:45:16,340
worked this out to within an inch of its

852
00:45:15,690 --> 00:45:19,019
life

853
00:45:16,340 --> 00:45:20,960
so I know someone's doing something

854
00:45:19,019 --> 00:45:24,710
smarter than the things that I'm saying

855
00:45:20,960 --> 00:45:26,789
because I can't imagine they haven't

856
00:45:24,710 --> 00:45:30,929
they've definitely figured out better

857
00:45:26,789 --> 00:45:35,449
stuff I'm just not thinking of what that

858
00:45:30,929 --> 00:45:35,449
better stuff is offhand and so like

859
00:45:40,750 --> 00:45:47,929
yeah filling up so they the good

860
00:45:44,420 --> 00:45:53,030
news is the far side point like the end

861
00:45:47,929 --> 00:45:55,460
side that obviously always needs four

862
00:45:53,030 --> 00:45:58,310
wide because the hit on each ray is

863
00:45:55,460 --> 00:46:01,159
gonna be different so that's not a waste

864
00:45:58,309 --> 00:46:11,900
of time but the Ray origin classifier

865
00:46:01,159 --> 00:46:17,629
definitely is and I just I'm just not

866
00:46:11,900 --> 00:46:20,630
seeing what to do with that additional

867
00:46:17,630 --> 00:46:31,329
information I mean I guess the answer is

868
00:46:20,630 --> 00:46:31,329
just don't use it yet I guess I mean I

869
00:46:31,989 --> 00:46:41,359
don't know man I just don't know hmm all

870
00:46:38,750 --> 00:46:43,219
right well let me see what happens if I

871
00:46:41,360 --> 00:46:49,460
go a little further with this and I'll

872
00:46:43,219 --> 00:46:54,139
just like I'll just say that this is the

873
00:46:49,460 --> 00:46:56,329
best we're gonna do it sucks sorry so

874
00:46:54,139 --> 00:46:58,819
we'll do the crappy version and then we

875
00:46:56,329 --> 00:47:01,130
will go just look at some literature on

876
00:46:58,820 --> 00:47:03,350
it like what the current research papers

877
00:47:01,130 --> 00:47:04,849
are on fast like GPU ray tracing for

878
00:47:03,349 --> 00:47:11,179
example would have talked a lot about

879
00:47:04,849 --> 00:47:14,029
this sort of stuff and we'll we'll do a

880
00:47:11,179 --> 00:47:15,949
better one from having read about it

881
00:47:14,030 --> 00:47:18,640
then because unless I come up with a

882
00:47:15,949 --> 00:47:23,379
brainstorm soon like this is not smart

883
00:47:18,639 --> 00:47:23,379
what I'm doing here so

884
00:47:26,119 --> 00:47:28,180
you

885
00:47:32,389 --> 00:47:37,529
so once we select what we're actually

886
00:47:35,429 --> 00:47:40,679
doing so once we select one of these

887
00:47:37,530 --> 00:47:41,940
things we then can determine which side

888
00:47:40,679 --> 00:47:43,710
is the closed side in which side is the

889
00:47:41,940 --> 00:47:46,110
far side so we're going to load out of

890
00:47:43,710 --> 00:47:48,869
the KD tree right we're gonna load

891
00:47:46,110 --> 00:47:51,930
something based on an address like a 0

892
00:47:48,869 --> 00:47:56,670
or a 1 so it would basically be like

893
00:47:51,929 --> 00:47:59,159
sides here and we would use a sign bit

894
00:47:56,670 --> 00:48:02,039
right to determine that so we need like

895
00:47:59,159 --> 00:48:05,129
a value that will either be a 0 you know

896
00:48:02,039 --> 00:48:09,210
or a 1 here that will load which one the

897
00:48:05,130 --> 00:48:13,559
closed side is and then we have the far

898
00:48:09,210 --> 00:48:18,090
side is just the KD sides of of not fat

899
00:48:13,559 --> 00:48:20,610
right so this is like the closed side

900
00:48:18,090 --> 00:48:23,220
index and this is not the closed side

901
00:48:20,610 --> 00:48:27,150
index right so you just load the other

902
00:48:23,219 --> 00:48:33,449
one now there's other things we could do

903
00:48:27,150 --> 00:48:36,539
here and possibly that are possibly

904
00:48:33,449 --> 00:48:38,939
smarter another one we could do is just

905
00:48:36,539 --> 00:48:40,289
say like you know I don't I don't

906
00:48:38,940 --> 00:48:42,139
actually know which way we want to do

907
00:48:40,289 --> 00:48:45,119
that but like something like this but

908
00:48:42,139 --> 00:48:46,829
we'll see I don't actually know how we

909
00:48:45,119 --> 00:48:51,599
want to do that but basically like you

910
00:48:46,829 --> 00:48:53,759
know the the knot of that would be what

911
00:48:51,599 --> 00:48:55,319
we'd load out anyway so if we load the

912
00:48:53,760 --> 00:48:57,690
far side in the close side we would then

913
00:48:55,320 --> 00:49:02,460
push the close side on and then assuming

914
00:48:57,690 --> 00:49:05,369
that like inside is different right we

915
00:49:02,460 --> 00:49:08,250
would push the far side on but otherwise

916
00:49:05,369 --> 00:49:12,469
we wouldn't and again that's something

917
00:49:08,250 --> 00:49:15,030
we can try to make be you know a

918
00:49:12,469 --> 00:49:17,189
conditional move or at least give the

919
00:49:15,030 --> 00:49:20,460
option of a conditional move in here so

920
00:49:17,190 --> 00:49:23,970
we could say like alright if the N side

921
00:49:20,460 --> 00:49:28,650
is different then we push the far side

922
00:49:23,969 --> 00:49:33,000
otherwise we don't right and again I

923
00:49:28,650 --> 00:49:34,559
think that has to happen first so yeah

924
00:49:33,000 --> 00:49:36,239
this is this is gonna have to happen

925
00:49:34,559 --> 00:49:39,639
first so I suppose this would probably

926
00:49:36,239 --> 00:49:42,519
have to be an IFFT at that point right

927
00:49:39,639 --> 00:49:43,839
so we'll see because the the see move

928
00:49:42,519 --> 00:49:44,949
would be dependent like this would be

929
00:49:43,840 --> 00:49:47,500
dependent I don't know if we would

930
00:49:44,949 --> 00:49:49,210
really want that it's hard to say so if

931
00:49:47,500 --> 00:49:52,510
the insight is different then we're

932
00:49:49,210 --> 00:50:00,130
gonna push the other side to look at you

933
00:49:52,510 --> 00:50:02,260
know first and then we'll push our side

934
00:50:00,130 --> 00:50:03,789
and look at that now the problem that

935
00:50:02,260 --> 00:50:05,440
there's another problem that I see here

936
00:50:03,789 --> 00:50:09,009
which is that when we're looking at

937
00:50:05,440 --> 00:50:10,599
these we would also want to the prop so

938
00:50:09,010 --> 00:50:12,640
like another problem that I'm seeing

939
00:50:10,599 --> 00:50:15,960
with this is this actually wants to be

940
00:50:12,639 --> 00:50:20,889
done before you look at this particular

941
00:50:15,960 --> 00:50:23,590
side of the plane so if we assume what

942
00:50:20,889 --> 00:50:28,569
we're pushing on here is regions that

943
00:50:23,590 --> 00:50:32,410
themselves are divided we don't need to

944
00:50:28,570 --> 00:50:35,670
test those so this is a little bit

945
00:50:32,409 --> 00:50:35,670
Squinkie as well right

946
00:50:44,920 --> 00:50:49,389
like maybe the right way to think about

947
00:50:47,199 --> 00:50:50,710
this is a little bit different so maybe

948
00:50:49,389 --> 00:50:53,519
the right way to think about this is

949
00:50:50,710 --> 00:50:57,970
like look we're gonna do a hit P here

950
00:50:53,519 --> 00:51:01,239
and we're gonna like take a look and see

951
00:50:57,969 --> 00:51:03,189
if we can reach this thing because we

952
00:51:01,239 --> 00:51:04,929
know which side when we push something

953
00:51:03,190 --> 00:51:08,110
on we have to kind of push on a

954
00:51:04,929 --> 00:51:11,019
particular side right we have to say

955
00:51:08,110 --> 00:51:15,789
like we're pushing on this side of this

956
00:51:11,019 --> 00:51:18,099
of this thing right and then when we

957
00:51:15,789 --> 00:51:20,710
actually go to test it at that point in

958
00:51:18,099 --> 00:51:22,960
time is when we want to see whether or

959
00:51:20,710 --> 00:51:26,920
not like we don't want to push on a side

960
00:51:22,960 --> 00:51:28,960
then do another side get a closer hit

961
00:51:26,920 --> 00:51:31,539
come back and actually test the other

962
00:51:28,960 --> 00:51:32,980
side because we don't need to test the

963
00:51:31,539 --> 00:51:34,900
other side anymore we've gotten a hit

964
00:51:32,980 --> 00:51:38,139
that's closer so we would want this to

965
00:51:34,900 --> 00:51:41,260
happen earlier right so this is kind of

966
00:51:38,139 --> 00:51:43,389
more of a like this sort of thing and

967
00:51:41,260 --> 00:51:51,670
this is probably more of this sort of

968
00:51:43,389 --> 00:51:54,219
thing I'm guessing so in other words

969
00:51:51,670 --> 00:51:56,289
like the only thing we're doing when we

970
00:51:54,219 --> 00:51:59,019
test a partition is deciding which side

971
00:51:56,289 --> 00:52:02,590
to push on first and when we actually go

972
00:51:59,019 --> 00:52:03,789
to process one of the sides that's when

973
00:52:02,590 --> 00:52:08,200
we would check to see whether we

974
00:52:03,789 --> 00:52:11,159
actually could get there or not right so

975
00:52:08,199 --> 00:52:11,159
you know

976
00:52:14,360 --> 00:52:19,550
so we'd have we have to do this right we

977
00:52:16,730 --> 00:52:22,130
need to do it like is this side is this

978
00:52:19,550 --> 00:52:24,590
thing that I'm in right now is this

979
00:52:22,130 --> 00:52:26,840
region reachable and if the region isn't

980
00:52:24,590 --> 00:52:29,329
reachable it can't push anything else on

981
00:52:26,840 --> 00:52:32,110
if the region is reachable it just

982
00:52:29,329 --> 00:52:35,960
pushes both things on because the test

983
00:52:32,110 --> 00:52:49,370
for whether or not the far side should

984
00:52:35,960 --> 00:52:51,829
go on there is done later right so I

985
00:52:49,369 --> 00:52:59,449
think this is getting slightly more

986
00:52:51,829 --> 00:53:01,599
sensible so let's look at this one more

987
00:52:59,449 --> 00:53:01,599
time

988
00:53:19,510 --> 00:53:25,610
so I guess we just need to know are

989
00:53:22,309 --> 00:53:29,630
either of these two things is the start

990
00:53:25,610 --> 00:53:40,910
or the end are either of them on the

991
00:53:29,630 --> 00:53:44,390
correct side of the plane right so

992
00:53:40,909 --> 00:53:46,759
that's all we do and if they are on the

993
00:53:44,389 --> 00:53:48,679
correct side of the plane we push both

994
00:53:46,760 --> 00:53:58,600
if they're not on the correct side of

995
00:53:48,679 --> 00:53:58,599
plane we bail I think that's it

996
00:54:07,769 --> 00:54:20,250
Yeah right and this can just be like

997
00:54:21,630 --> 00:54:31,930
that and I mean those could definitely

998
00:54:30,039 --> 00:54:41,369
be conditional moves if we want them to

999
00:54:31,929 --> 00:54:41,368
be but I'm not sure we do right yeah

1000
00:54:45,559 --> 00:54:49,289
so I think there's more we can do here

1001
00:54:47,550 --> 00:54:51,360
but I'm I'm guess I'm that's what I'm

1002
00:54:49,289 --> 00:54:53,070
zeroing in on I don't know if that's

1003
00:54:51,360 --> 00:54:54,840
really the smart way to do it and the

1004
00:54:53,070 --> 00:54:57,330
reason that I think it's not smart it's

1005
00:54:54,840 --> 00:55:06,809
like I said it just seems like it wastes

1006
00:54:57,329 --> 00:55:11,039
too much work to me I are just I'm not

1007
00:55:06,809 --> 00:55:13,019
sure furthermore there's another piece

1008
00:55:11,039 --> 00:55:14,969
of information there's a thing another

1009
00:55:13,019 --> 00:55:19,650
thing we can do here which is we can

1010
00:55:14,969 --> 00:55:33,329
just remember this value right so we can

1011
00:55:19,650 --> 00:55:37,070
compute this and store it right so we

1012
00:55:33,329 --> 00:55:41,929
can do like a thing that looks like this

1013
00:55:37,070 --> 00:55:47,940
where we are in the like start side bit

1014
00:55:41,929 --> 00:55:52,649
right and then when we get here we can

1015
00:55:47,940 --> 00:55:55,980
just do like right because this is the

1016
00:55:52,650 --> 00:56:01,500
Ray origin is classified relative to

1017
00:55:55,980 --> 00:56:03,420
this plane universally anytime we look

1018
00:56:01,500 --> 00:56:05,400
at this node of the KT tree whether

1019
00:56:03,420 --> 00:56:08,550
we're looking at the left side or the

1020
00:56:05,400 --> 00:56:11,070
right side of the node we know that the

1021
00:56:08,550 --> 00:56:12,720
origins answer is always the same no

1022
00:56:11,070 --> 00:56:15,780
matter how many hits we've processed

1023
00:56:12,719 --> 00:56:18,299
because unlike the ending point of the

1024
00:56:15,780 --> 00:56:21,120
Ray it doesn't change the Ray origin is

1025
00:56:18,300 --> 00:56:23,010
where it is the rate end point gets

1026
00:56:21,119 --> 00:56:27,029
closer and closer to the origin with

1027
00:56:23,010 --> 00:56:31,860
each successive hit so that one has to

1028
00:56:27,030 --> 00:56:35,250
be tested fresh right so once we produce

1029
00:56:31,860 --> 00:56:38,430
a start side classification we can just

1030
00:56:35,250 --> 00:56:41,280
remember it and then we just use it here

1031
00:56:38,429 --> 00:56:44,339
and we don't actually have to reproduce

1032
00:56:41,280 --> 00:56:46,740
it every time so I think the only thing

1033
00:56:44,340 --> 00:56:49,100
we have to actually classify is the end

1034
00:56:46,739 --> 00:56:49,099
side

1035
00:56:52,548 --> 00:57:00,958
so we have to load a why mask as a mask

1036
00:56:55,588 --> 00:57:03,268
and a plain value right we have to

1037
00:57:00,958 --> 00:57:18,658
produce where we think this thing

1038
00:57:03,268 --> 00:57:21,558
currently is and then we would just take

1039
00:57:18,659 --> 00:57:25,818
the two bits and look at them together

1040
00:57:21,559 --> 00:57:25,819
right so I think that's

1041
00:57:51,500 --> 00:57:55,739
so the only other thing I'm not sure

1042
00:57:53,579 --> 00:58:01,110
about here is how we actually want to do

1043
00:57:55,739 --> 00:58:05,959
the bit classification so out of these

1044
00:58:01,110 --> 00:58:09,150
things is going to come a sign right and

1045
00:58:05,960 --> 00:58:17,280
that sign you know we could just do a

1046
00:58:09,150 --> 00:58:19,889
multiply or you know we could have a

1047
00:58:17,280 --> 00:58:21,090
multiplication value that we push on the

1048
00:58:19,889 --> 00:58:22,969
stack that we use for that are something

1049
00:58:21,090 --> 00:58:29,610
but I'm not sure which one we want to do

1050
00:58:22,969 --> 00:58:31,619
in that sense but so we just need a way

1051
00:58:29,610 --> 00:58:33,809
of knowing for each plane that we push

1052
00:58:31,619 --> 00:58:36,659
on here we need to know which side we

1053
00:58:33,809 --> 00:58:40,099
were trying to do whether the far side

1054
00:58:36,659 --> 00:58:40,099
or not right

1055
00:58:55,778 --> 00:59:05,119
so I suppose what we could do is just

1056
00:58:58,670 --> 00:59:08,048
use an XOR to toggle this and maybe

1057
00:59:05,119 --> 00:59:08,048
that's the end of it

1058
00:59:18,500 --> 00:59:26,150
again just not sure so when we load one

1059
00:59:23,659 --> 00:59:29,659
of these up it's going to have which

1060
00:59:26,150 --> 00:59:31,250
side the start side was on and because

1061
00:59:29,659 --> 00:59:34,909
we know which one of these is the closed

1062
00:59:31,250 --> 00:59:38,420
side at this point in time we do know

1063
00:59:34,909 --> 00:59:41,149
how to classify that so we could pre

1064
00:59:38,420 --> 00:59:43,340
classify this correctly what we don't

1065
00:59:41,150 --> 00:59:47,000
know when we get here is which side this

1066
00:59:43,340 --> 00:59:52,820
represents in terms of end side you know

1067
00:59:47,000 --> 00:59:55,849
i'm santi so which side which way this

1068
00:59:52,820 --> 00:59:57,920
sign bit should be tested is not clear

1069
00:59:55,849 --> 01:00:02,110
we would need an additional piece of

1070
00:59:57,920 --> 01:00:02,110
information to know that right

1071
01:00:10,400 --> 01:00:14,028
so that's the tricky part

1072
01:00:42,159 --> 01:00:51,190
hmm and I'm also still not sure about

1073
01:00:51,489 --> 01:00:59,239
about the like testing the farside part

1074
01:00:56,300 --> 01:01:04,190
of things and the reason that I'm not

1075
01:00:59,239 --> 01:01:10,608
sure about that is just because I don't

1076
01:01:04,190 --> 01:01:12,800
actually know I don't actually know

1077
01:01:10,608 --> 01:01:15,318
whether that's a smart thing to do if

1078
01:01:12,800 --> 01:01:18,068
these were actually region science maybe

1079
01:01:15,318 --> 01:01:23,719
I need to make it so that actually

1080
01:01:18,068 --> 01:01:26,588
you're you actually have the data stored

1081
01:01:23,719 --> 01:01:26,588
in a side

1082
01:01:36,510 --> 01:01:42,180
you know maybe that's just easier in

1083
01:01:39,449 --> 01:01:45,329
other words what I could do is I could

1084
01:01:42,179 --> 01:01:47,039
just push sides on here and then the

1085
01:01:45,329 --> 01:01:49,920
sides themselves would actually just

1086
01:01:47,039 --> 01:01:52,769
have redundant information like oh you

1087
01:01:49,920 --> 01:01:54,059
know here's the plane that's it's going

1088
01:01:52,769 --> 01:01:55,320
the other way and so you just load that

1089
01:01:54,059 --> 01:02:06,980
up and it works you don't have to

1090
01:01:55,320 --> 01:02:06,980
remember that right but I don't know

1091
01:02:32,750 --> 01:02:38,329
and I suppose the other thing that I

1092
01:02:35,389 --> 01:02:41,750
didn't do here is we don't always need

1093
01:02:38,329 --> 01:02:47,329
to push both because if the if the Ray

1094
01:02:41,750 --> 01:02:49,429
is I mean I guess I'm pushing both

1095
01:02:47,329 --> 01:02:52,848
because you're gonna test the inside

1096
01:02:49,429 --> 01:02:54,649
either way so it's like look it'll get

1097
01:02:52,849 --> 01:02:56,180
cleaned up in the next pass but I don't

1098
01:02:54,650 --> 01:02:57,530
know if that's the smart way to do it or

1099
01:02:56,179 --> 01:03:03,219
not right and maybe that that's too

1100
01:02:57,530 --> 01:03:05,330
wasteful and I don't I don't really know

1101
01:03:03,219 --> 01:03:07,399
all right so let's look this one more

1102
01:03:05,329 --> 01:03:11,210
time we if we assume we can load up

1103
01:03:07,400 --> 01:03:16,099
these masks for what we're pushing on

1104
01:03:11,210 --> 01:03:18,829
here right if we assume that the sides

1105
01:03:16,099 --> 01:03:21,080
encode that they're gonna encode I guess

1106
01:03:18,829 --> 01:03:22,940
we could just have them in code yeah I

1107
01:03:21,079 --> 01:03:24,679
guess we could do that so I guess we

1108
01:03:22,940 --> 01:03:27,380
could just have the two sides and code

1109
01:03:24,679 --> 01:03:38,569
which one they're doing so I guess we

1110
01:03:27,380 --> 01:03:40,250
would just do something like this so

1111
01:03:38,570 --> 01:03:43,088
there's like a test mask in here right

1112
01:03:40,250 --> 01:03:48,920
we would figure out the inside we would

1113
01:03:43,088 --> 01:03:51,858
get the n sign out of here right or by

1114
01:03:48,920 --> 01:03:54,190
extracting this thing and the same is

1115
01:03:51,858 --> 01:03:54,190
true here

1116
01:03:58,739 --> 01:04:04,839
and then what we'd want to do is say all

1117
01:04:01,900 --> 01:04:06,849
right so whether or not you're on the

1118
01:04:04,840 --> 01:04:09,220
correct side is going to determine is

1119
01:04:06,849 --> 01:04:11,618
going to be determined by the test mask

1120
01:04:09,219 --> 01:04:14,769
which will tell us which one of these we

1121
01:04:11,619 --> 01:04:16,809
want to do so the n-side bit and the

1122
01:04:14,769 --> 01:04:18,789
start side bit these are going to be

1123
01:04:16,809 --> 01:04:28,750
acts or basically so it would just be

1124
01:04:18,789 --> 01:04:34,980
this sort of thing and the start side

1125
01:04:28,750 --> 01:04:34,980
bit comes from like the stack right

1126
01:04:38,909 --> 01:04:47,399
because that's something we actually you

1127
01:04:41,139 --> 01:04:47,400
know that's gets pushed on in here right

1128
01:05:03,108 --> 01:05:17,670
so yeah I think that's what we want and

1129
01:05:13,858 --> 01:05:22,108
I guess it may be the case that you

1130
01:05:17,670 --> 01:05:25,289
don't actually need to do a test mask on

1131
01:05:22,108 --> 01:05:34,228
the start side bit because that could

1132
01:05:25,289 --> 01:05:36,949
already have been handled in here so I

1133
01:05:34,228 --> 01:05:39,948
guess really it would look more like

1134
01:05:36,949 --> 01:05:39,949
this

1135
01:06:00,110 --> 01:06:09,980
so you'd have which inside you were on

1136
01:06:03,269 --> 01:06:14,280
and you need to test that and you mM

1137
01:06:09,980 --> 01:06:16,860
already produce the start side which you

1138
01:06:14,280 --> 01:06:19,680
know you're gonna want to go down this

1139
01:06:16,860 --> 01:06:28,140
one so you're saying like look always

1140
01:06:19,679 --> 01:06:29,669
process this and honestly that's not

1141
01:06:28,139 --> 01:06:32,009
even a start side bit that's just

1142
01:06:29,670 --> 01:06:35,849
basically saying like look whatever the

1143
01:06:32,010 --> 01:06:41,430
one whatever the like start side bit is

1144
01:06:35,849 --> 01:06:44,099
whatever the like always process right

1145
01:06:41,429 --> 01:06:47,609
you're gonna always process this value

1146
01:06:44,099 --> 01:06:53,309
and in fact since you're always gonna

1147
01:06:47,610 --> 01:06:54,809
process this value next it seems like

1148
01:06:53,309 --> 01:06:59,759
really this is where you should pull

1149
01:06:54,809 --> 01:07:02,190
something off of the stack anyway right

1150
01:06:59,760 --> 01:07:13,320
like the actual way that this should

1151
01:07:02,190 --> 01:07:14,940
work in theory would be that the entry

1152
01:07:13,320 --> 01:07:18,930
value would get pulled off the stack

1153
01:07:14,940 --> 01:07:20,760
here so this you would just assign like

1154
01:07:18,929 --> 01:07:23,329
this is the next person to process so

1155
01:07:20,760 --> 01:07:25,890
you just say like here it is right

1156
01:07:23,329 --> 01:07:31,769
whereas this one would actually pull it

1157
01:07:25,889 --> 01:07:33,900
off I want to take a look at that so

1158
01:07:31,769 --> 01:07:38,190
let's suppose that in here where we've

1159
01:07:33,900 --> 01:07:39,750
got this entry being pulled off the sack

1160
01:07:38,190 --> 01:07:42,019
I'm actually gonna make that be the if

1161
01:07:39,750 --> 01:07:42,019
zero

1162
01:07:52,019 --> 01:07:56,619
so I'm gonna take a look at how this

1163
01:07:54,369 --> 01:08:00,670
would work so in here what we would say

1164
01:07:56,619 --> 01:08:03,940
is look man we're actually gonna just

1165
01:08:00,670 --> 01:08:07,570
process this value so we have something

1166
01:08:03,940 --> 01:08:08,710
like our like you know her stack value

1167
01:08:07,570 --> 01:08:10,570
or whatever right

1168
01:08:08,710 --> 01:08:12,940
that's our weird thing that we're

1169
01:08:10,570 --> 01:08:18,460
recording it's like a packed magic thing

1170
01:08:12,940 --> 01:08:21,338
right and we are gonna do a while depth

1171
01:08:18,460 --> 01:08:25,359
is greater than zero right so we do want

1172
01:08:21,338 --> 01:08:27,519
to do that hmm and furthermore it's

1173
01:08:25,359 --> 01:08:29,859
really a do-while loop like the depth is

1174
01:08:27,520 --> 01:08:33,310
not zero at the start so we can just do

1175
01:08:29,859 --> 01:08:35,289
this right when we come through here we

1176
01:08:33,310 --> 01:08:40,750
would do this testing and we would say

1177
01:08:35,289 --> 01:08:47,470
like okay like you know in here we want

1178
01:08:40,750 --> 01:08:50,529
to do whenever we do our always process

1179
01:08:47,470 --> 01:08:59,130
Katie sides whatever the heck we're

1180
01:08:50,529 --> 01:08:59,130
doing in here this goes on the stack

1181
01:09:02,069 --> 01:09:12,760
this doesn't right so this thing that

1182
01:09:09,189 --> 01:09:15,309
we've got here is actually just the

1183
01:09:12,760 --> 01:09:20,380
Nucor stack value like we're gonna

1184
01:09:15,310 --> 01:09:22,690
process it right so we loop back through

1185
01:09:20,380 --> 01:09:24,960
and we process it and as we go we're

1186
01:09:22,689 --> 01:09:27,039
just always processing the close side

1187
01:09:24,960 --> 01:09:29,588
like we're just looping on the close

1188
01:09:27,039 --> 01:09:31,869
side and we may leave bread crumbs for

1189
01:09:29,588 --> 01:09:34,659
us to go back and process the other

1190
01:09:31,869 --> 01:09:36,970
sides but what we know is anytime we

1191
01:09:34,659 --> 01:09:43,149
pull something off the stack it is the

1192
01:09:36,970 --> 01:09:47,289
far side right so we don't need to do

1193
01:09:43,149 --> 01:09:48,729
this that like this testing actually is

1194
01:09:47,289 --> 01:09:52,390
only going to happen when we pull

1195
01:09:48,729 --> 01:09:54,609
something off the stack right so

1196
01:09:52,390 --> 01:09:57,190
basically if we actually need to grab

1197
01:09:54,609 --> 01:09:59,259
something off the stack so if we didn't

1198
01:09:57,189 --> 01:09:59,799
hit and we need to grab something off

1199
01:09:59,260 --> 01:10:01,949
the stack

1200
01:09:59,800 --> 01:10:06,119
we grabbed it off the stack here and

1201
01:10:01,949 --> 01:10:06,119
that's when we do this

1202
01:10:17,090 --> 01:10:25,690
right yeah

1203
01:10:21,939 --> 01:10:25,689
something like this I think

1204
01:10:34,210 --> 01:10:38,920
so yeah so normally we have something

1205
01:10:36,969 --> 01:10:40,600
we're going to be using the closed side

1206
01:10:38,920 --> 01:10:42,399
so we would be looping on the closed

1207
01:10:40,600 --> 01:10:44,950
side each time we get the curse stock

1208
01:10:42,399 --> 01:10:47,619
value out that's the one we're gonna do

1209
01:10:44,949 --> 01:10:49,210
if we come through here and we pull

1210
01:10:47,619 --> 01:10:52,680
something off the stack we'd actually

1211
01:10:49,210 --> 01:10:56,140
the while loop would actually happen

1212
01:10:52,680 --> 01:10:58,930
here right this is probably not a great

1213
01:10:56,140 --> 01:10:59,590
way to structure this like maybe this is

1214
01:10:58,930 --> 01:11:06,909
stupid

1215
01:10:59,590 --> 01:11:10,810
we'll see so in here we now just need to

1216
01:11:06,909 --> 01:11:14,579
search backwards on the stack for so you

1217
01:11:10,810 --> 01:11:14,580
know maybe you could just even do this

1218
01:11:17,819 --> 01:11:22,269
so either we got something here

1219
01:11:20,289 --> 01:11:33,670
otherwise we search backwards on the

1220
01:11:22,270 --> 01:11:43,630
stack until we find somebody until we

1221
01:11:33,670 --> 01:11:47,219
find something to process actually I

1222
01:11:43,630 --> 01:11:47,219
guess that would be here

1223
01:12:02,260 --> 01:12:21,579
and I don't love that right it just

1224
01:12:05,180 --> 01:12:23,869
starts to look too complicated yeah I

1225
01:12:21,579 --> 01:12:26,289
want to take a quick pause there because

1226
01:12:23,869 --> 01:12:31,369
I just realized something

1227
01:12:26,289 --> 01:12:33,800
so I do wonder should we change this

1228
01:12:31,369 --> 01:12:38,979
around so let's just take a quick look

1229
01:12:33,800 --> 01:12:38,980
at this here oops

1230
01:12:53,470 --> 01:13:05,720
did that end up being right I don't know

1231
01:13:01,399 --> 01:13:07,219
if it is that right there we go um so

1232
01:13:05,720 --> 01:13:08,869
one thing I want to take a look at here

1233
01:13:07,220 --> 01:13:11,270
is I want to see what the behavior of

1234
01:13:08,869 --> 01:13:13,849
this thing is how sensitive the current

1235
01:13:11,270 --> 01:13:18,200
routine is to where we put those loops

1236
01:13:13,850 --> 01:13:24,130
so we're getting like 6.5 through here

1237
01:13:18,199 --> 01:13:31,569
right 6.3 6.5

1238
01:13:24,130 --> 01:13:38,029
looks like 6.3 pretty regularly right

1239
01:13:31,569 --> 01:13:40,849
yeah so if I was to move this loop so

1240
01:13:38,029 --> 01:13:44,479
that this loop actually happened inside

1241
01:13:40,850 --> 01:13:47,590
what would that do so in other words in

1242
01:13:44,479 --> 01:13:52,369
here where we are going to do the push

1243
01:13:47,590 --> 01:14:00,110
so if we say look here's how we're doing

1244
01:13:52,369 --> 01:14:02,059
this we do a push on this where we where

1245
01:14:00,109 --> 01:14:05,809
we're going to push this on the stack if

1246
01:14:02,060 --> 01:14:17,960
instead of that we actually grab this

1247
01:14:05,810 --> 01:14:21,740
thing right and this case moves on to

1248
01:14:17,960 --> 01:14:29,659
the inside I'm just curious what that

1249
01:14:21,739 --> 01:14:31,939
does so basically like making that outer

1250
01:14:29,659 --> 01:14:33,649
loop just always happen and then there's

1251
01:14:31,939 --> 01:14:37,489
a branch inside here and this is the

1252
01:14:33,649 --> 01:14:41,269
only branch right and I assume it should

1253
01:14:37,489 --> 01:14:44,179
be the same but I'm I just want to know

1254
01:14:41,270 --> 01:14:47,240
like will that change the performance in

1255
01:14:44,180 --> 01:14:52,420
any reliably different way or won't it

1256
01:14:47,239 --> 01:14:55,849
right so what that would look like is

1257
01:14:52,420 --> 01:14:58,420
yeah in this current path here we would

1258
01:14:55,850 --> 01:14:58,420
do this

1259
01:15:01,569 --> 01:15:15,039
so this is the hit test right and we

1260
01:15:06,859 --> 01:15:18,259
would do the push in in here like this

1261
01:15:15,039 --> 01:15:22,039
right so in here we would basically say

1262
01:15:18,260 --> 01:15:23,750
like okay in fact we don't even need

1263
01:15:22,039 --> 01:15:27,500
that to be in the else container do we

1264
01:15:23,750 --> 01:15:33,050
oh I guess we do yeah so we would just

1265
01:15:27,500 --> 01:15:34,760
do like okay if should push and like

1266
01:15:33,050 --> 01:15:51,829
whatever the thing is that we're about

1267
01:15:34,760 --> 01:15:54,500
to push if that thing is a so this if

1268
01:15:51,829 --> 01:16:04,100
whoever we were about to push which is

1269
01:15:54,500 --> 01:16:06,680
like the box pack structure here if that

1270
01:16:04,100 --> 01:16:09,800
is a leaf container then we just process

1271
01:16:06,680 --> 01:16:16,789
it right up front you know I'm saying to

1272
01:16:09,800 --> 01:16:20,989
you like that and if it's not then

1273
01:16:16,789 --> 01:16:21,829
that's when we actually push it on if

1274
01:16:20,989 --> 01:16:24,590
that makes sense

1275
01:16:21,829 --> 01:16:26,539
so this would not be source index

1276
01:16:24,590 --> 01:16:27,489
anymore this would be like leaf index or

1277
01:16:26,539 --> 01:16:33,100
something

1278
01:16:27,489 --> 01:16:33,099
and this would be leaf index as well

1279
01:16:33,439 --> 01:16:38,049
and then this would not be box it would

1280
01:16:35,510 --> 01:16:38,050
just be leaf

1281
01:17:05,090 --> 01:17:11,279
this is a real pain in the butt like

1282
01:17:07,979 --> 01:17:15,149
yeah I know what's your point

1283
01:17:11,279 --> 01:17:17,579
like I'm trying to use those again but

1284
01:17:15,149 --> 01:17:24,589
apparently you're that's like not good

1285
01:17:17,579 --> 01:17:24,590
enough for you or something like okay

1286
01:17:26,210 --> 01:17:31,230
you know what

1287
01:17:27,659 --> 01:17:32,430
this is ridiculous I don't care that

1288
01:17:31,229 --> 01:17:44,339
that hides it

1289
01:17:32,430 --> 01:17:46,520
what error is that this is really

1290
01:17:44,340 --> 01:17:46,520
annoying

1291
01:18:06,319 --> 01:18:17,399
are you happy now

1292
01:18:08,729 --> 01:18:19,348
compiler there so I'm just curious what

1293
01:18:17,399 --> 01:18:21,750
that does with the runtime like I don't

1294
01:18:19,349 --> 01:18:28,920
know if that should have a nickname or

1295
01:18:21,750 --> 01:18:32,460
if it has a positive effect seems

1296
01:18:28,920 --> 01:18:34,679
consistently pretty positive right so

1297
01:18:32,460 --> 01:18:37,109
basically like processing something as

1298
01:18:34,679 --> 01:18:38,969
soon as you can seems pretty good right

1299
01:18:37,109 --> 01:18:41,578
like don't push it on the stack I just

1300
01:18:38,969 --> 01:18:43,349
wanted to know what that would look like

1301
01:18:41,578 --> 01:18:46,198
so not pushing something on the stack if

1302
01:18:43,349 --> 01:18:54,119
you don't have to is like a plus there

1303
01:18:46,198 --> 01:18:55,469
it would appear so yeah like I'm gonna

1304
01:18:54,118 --> 01:18:58,019
get rid of some of this stuff here so

1305
01:18:55,469 --> 01:19:08,069
I'm gonna assume this path is right I

1306
01:18:58,020 --> 01:19:10,110
don't need this anymore really so yeah

1307
01:19:08,069 --> 01:19:12,420
like iterating over the Leafs in a loop

1308
01:19:10,109 --> 01:19:15,118
inside when you actually go okay this

1309
01:19:12,420 --> 01:19:18,300
thing is a leaf container now so I'm not

1310
01:19:15,118 --> 01:19:20,729
going to actually push it on the stack

1311
01:19:18,300 --> 01:19:22,320
I'm going to do it right away it seems

1312
01:19:20,729 --> 01:19:23,189
like that works a little bit better it

1313
01:19:22,319 --> 01:19:25,559
could just because of code

1314
01:19:23,189 --> 01:19:28,859
reorganisation like it's hard to tell

1315
01:19:25,560 --> 01:19:30,570
without better profiling tools whether

1316
01:19:28,859 --> 01:19:32,609
that actually improved things or whether

1317
01:19:30,569 --> 01:19:34,170
it was just like oh the loop alignments

1318
01:19:32,609 --> 01:19:38,069
different now or you know things like

1319
01:19:34,170 --> 01:19:44,389
this but you know it's worth worth

1320
01:19:38,069 --> 01:19:44,389
noting so yeah

1321
01:20:04,960 --> 01:20:09,618
so yes so what I would say is I think

1322
01:20:07,519 --> 01:20:11,929
that means I do want to do what I was

1323
01:20:09,618 --> 01:20:13,880
saying before which is that inside the

1324
01:20:11,929 --> 01:20:15,920
alternate version what we would want to

1325
01:20:13,880 --> 01:20:18,199
do is we'd want to look here and say

1326
01:20:15,920 --> 01:20:28,519
like you know is this a leaf container

1327
01:20:18,198 --> 01:20:33,948
right and if it is we would do our box

1328
01:20:28,519 --> 01:20:35,929
testing here right so our box testing

1329
01:20:33,948 --> 01:20:37,428
would go inside here when we determined

1330
01:20:35,929 --> 01:20:43,880
that we've that we're going to process

1331
01:20:37,429 --> 01:20:48,649
somebody it would go in here and then if

1332
01:20:43,880 --> 01:20:55,059
it's not a leaf container then we would

1333
01:20:48,649 --> 01:20:55,058
do this nonsense right

1334
01:20:56,199 --> 01:20:59,269
[Music]

1335
01:21:25,560 --> 01:21:31,990
all right so yeah looking at this again

1336
01:21:29,920 --> 01:21:33,310
so still a little bit confusing and we

1337
01:21:31,989 --> 01:21:35,199
want to be able to work this routine a

1338
01:21:33,310 --> 01:21:40,150
little bit better what the heck

1339
01:21:35,199 --> 01:21:41,859
where'd that come from there we go it's

1340
01:21:40,149 --> 01:21:43,389
starting to sort of take shape but again

1341
01:21:41,859 --> 01:21:46,989
I'm not really sure it's in the right

1342
01:21:43,390 --> 01:21:51,130
zone at the moment it's looking still

1343
01:21:46,989 --> 01:21:52,500
looking pretty wonky I'm not sure I love

1344
01:21:51,130 --> 01:21:55,270
it

1345
01:21:52,500 --> 01:21:57,640
I'm glad we sort of randomly got a

1346
01:21:55,270 --> 01:22:03,910
little bit of a speed up there just from

1347
01:21:57,640 --> 01:22:09,520
like yeah just from like figuring out

1348
01:22:03,909 --> 01:22:11,109
the just from figuring out the fact that

1349
01:22:09,520 --> 01:22:12,580
we could loop on the internals there I

1350
01:22:11,109 --> 01:22:15,670
also want to do one let me do one of the

1351
01:22:12,579 --> 01:22:18,300
thing before I go any further than that

1352
01:22:15,670 --> 01:22:21,989
I also want to know what its estimated

1353
01:22:18,300 --> 01:22:26,500
timing is so when we do the profile run

1354
01:22:21,989 --> 01:22:28,840
here and we print this out since we know

1355
01:22:26,500 --> 01:22:39,090
what the repeat County is I also want to

1356
01:22:28,840 --> 01:22:39,090
produce the milliseconds here so so like

1357
01:22:39,119 --> 01:22:47,460
something like this take the total

1358
01:22:44,350 --> 01:22:52,829
seconds divided by the repeat count

1359
01:22:47,460 --> 01:22:52,829
multiplied by a thousand

1360
01:22:57,219 --> 01:23:03,439
something like this so we can sort of

1361
01:23:01,039 --> 01:23:05,479
see like what do we think the frame rate

1362
01:23:03,439 --> 01:23:07,609
of this thing would be you know how far

1363
01:23:05,479 --> 01:23:10,428
away are we from good is another thing

1364
01:23:07,609 --> 01:23:17,839
that just feels like we would might want

1365
01:23:10,429 --> 01:23:19,730
to know that so yeah like if we look at

1366
01:23:17,840 --> 01:23:21,650
what the expected millisecond says here

1367
01:23:19,729 --> 01:23:23,539
assuming that I did that correctly right

1368
01:23:21,649 --> 01:23:25,279
it's total seconds over the repeat count

1369
01:23:23,539 --> 01:23:29,769
so that's like how much time we took

1370
01:23:25,279 --> 01:23:29,769
over how many times we did this thing

1371
01:23:30,069 --> 01:23:39,649
that should give us the expected

1372
01:23:32,029 --> 01:23:47,529
milliseconds right now what's weird

1373
01:23:39,649 --> 01:23:47,529
about that is that looks way too fast so

1374
01:23:48,760 --> 01:24:03,170
like if we divide that by the thread

1375
01:23:54,649 --> 01:24:08,539
count which right now is like six let me

1376
01:24:03,170 --> 01:24:10,719
do this in double that seems totally

1377
01:24:08,539 --> 01:24:16,429
nuts

1378
01:24:10,719 --> 01:24:17,810
and possibly wrong although it could

1379
01:24:16,429 --> 01:24:20,170
just because of cache effects or

1380
01:24:17,810 --> 01:24:20,170
something

1381
01:24:28,949 --> 01:24:35,319
so I mean looking at that it would it

1382
01:24:32,979 --> 01:24:38,529
would suggest that like somehow we're

1383
01:24:35,319 --> 01:24:41,949
running at a speed that would be 60

1384
01:24:38,529 --> 01:24:46,509
frames a second already even before I go

1385
01:24:41,949 --> 01:24:47,949
try to fix this thing but that's not the

1386
01:24:46,510 --> 01:24:51,670
frame rate we're actually getting

1387
01:24:47,949 --> 01:24:55,029
although maybe it is so one thing I

1388
01:24:51,670 --> 01:24:56,380
don't know is because I I need a frame

1389
01:24:55,029 --> 01:25:02,590
counter and we should probably put one

1390
01:24:56,380 --> 01:25:08,319
in where if I don't do any of this so I

1391
01:25:02,590 --> 01:25:10,150
get rid of internal and slow if I don't

1392
01:25:08,319 --> 01:25:13,029
have anything else compiled in I'm not

1393
01:25:10,149 --> 01:25:16,629
sure how long it whether we actually hit

1394
01:25:13,029 --> 01:25:19,359
60 frames a second or not right so if I

1395
01:25:16,630 --> 01:25:24,159
actually load up remedy now and run

1396
01:25:19,359 --> 01:25:26,229
ourselves here's handmade hero I don't

1397
01:25:24,159 --> 01:25:29,649
actually know if we hit 60 frames a

1398
01:25:26,229 --> 01:25:31,389
second I don't think we will but I don't

1399
01:25:29,649 --> 01:25:34,359
really have a way to profile the frame

1400
01:25:31,390 --> 01:25:37,270
time outside of this so what I think we

1401
01:25:34,359 --> 01:25:40,899
need is a way to put the frame time up

1402
01:25:37,270 --> 01:25:45,460
here in a way that won't that is just

1403
01:25:40,899 --> 01:25:47,559
always available right like so also that

1404
01:25:45,460 --> 01:25:51,760
should not be possible in an internal

1405
01:25:47,560 --> 01:25:53,590
build case anyone was wondering we got

1406
01:25:51,760 --> 01:26:01,270
some work to do to remove that stuff

1407
01:25:53,590 --> 01:26:02,770
right I mean like you shouldn't be able

1408
01:26:01,270 --> 01:26:06,940
to pop any of that up in an internal

1409
01:26:02,770 --> 01:26:09,610
build so that's a little weird but so we

1410
01:26:06,939 --> 01:26:11,919
need some way of printing out what the

1411
01:26:09,609 --> 01:26:13,299
actual frame time is and I suppose

1412
01:26:11,920 --> 01:26:15,279
there's other ways that we can do that

1413
01:26:13,300 --> 01:26:18,640
too like if we want to we can probably

1414
01:26:15,279 --> 01:26:21,550
do use like insight or something and

1415
01:26:18,640 --> 01:26:23,850
just ask it to tell us what our frame

1416
01:26:21,550 --> 01:26:29,260
rate is right and that would be like a

1417
01:26:23,850 --> 01:26:32,739
unbiased external measurement right just

1418
01:26:29,260 --> 01:26:35,909
to see what happens so let me try it and

1419
01:26:32,738 --> 01:26:38,839
just see what happens if we run this

1420
01:26:35,909 --> 01:26:43,220
using the frame profiler

1421
01:26:38,840 --> 01:26:44,840
and just see what it thinks right so you

1422
01:26:43,220 --> 01:26:49,760
could see it thanks for getting like 21

1423
01:26:44,840 --> 01:26:52,670
milliseconds of frame which is not quite

1424
01:26:49,760 --> 01:26:55,460
good enough and the weird thing about

1425
01:26:52,670 --> 01:26:57,890
that that's a little hard to understand

1426
01:26:55,460 --> 01:27:02,449
is why we're getting such different

1427
01:26:57,890 --> 01:27:05,600
numbers from our capture as from here

1428
01:27:02,449 --> 01:27:06,949
you know what I mean and part of that

1429
01:27:05,600 --> 01:27:10,570
could be I don't know like to what

1430
01:27:06,949 --> 01:27:13,130
extent the GPU is messing with us right

1431
01:27:10,569 --> 01:27:14,090
that's that's a kind of a question I

1432
01:27:13,130 --> 01:27:22,510
don't actually know

1433
01:27:14,090 --> 01:27:22,510
but see here

1434
01:27:32,510 --> 01:27:35,230
hello

1435
01:27:37,409 --> 01:27:51,309
does not seem that I can actually toggle

1436
01:27:40,569 --> 01:27:56,349
to insight unfortunately there we go

1437
01:27:51,310 --> 01:27:58,720
good enough alright so in here looking

1438
01:27:56,350 --> 01:28:02,250
at insight just to see what the actual

1439
01:27:58,720 --> 01:28:02,250
status is like

1440
01:28:19,729 --> 01:28:28,099
I'm not sure what I'm looking at here

1441
01:28:21,529 --> 01:28:30,800
why is this not shown I want I want to

1442
01:28:28,100 --> 01:28:32,800
see the actual frame profile which this

1443
01:28:30,800 --> 01:28:36,130
should be but that doesn't look right

1444
01:28:32,800 --> 01:28:36,130
here I'm saying

1445
01:28:41,658 --> 01:28:45,078
because if it's it should be more than

1446
01:28:43,010 --> 01:28:47,900
nine milliseconds right I mean at the

1447
01:28:45,078 --> 01:28:50,688
very least it should show me like us

1448
01:28:47,899 --> 01:28:55,899
spending time as well but doesn't appear

1449
01:28:50,689 --> 01:28:55,900
to at the moment show me more please

1450
01:28:56,498 --> 01:29:12,380
that is the range profiler so all I

1451
01:29:09,618 --> 01:29:15,139
really wanted to know is to what extent

1452
01:29:12,380 --> 01:29:17,900
are the graphics causing us issues let

1453
01:29:15,139 --> 01:29:21,349
me just do one of the thing because this

1454
01:29:17,899 --> 01:29:23,569
is easier than trying to figure out if

1455
01:29:21,349 --> 01:29:27,559
Nvidia is giving us bogus information or

1456
01:29:23,569 --> 01:29:28,728
not this is always the way with modern

1457
01:29:27,559 --> 01:29:30,349
computers is you're just kind of

1458
01:29:28,729 --> 01:29:31,969
swimming in a sea of probably wrong

1459
01:29:30,349 --> 01:29:35,929
information trying to figure out which

1460
01:29:31,969 --> 01:29:40,389
one of it is right so if we just open a

1461
01:29:35,929 --> 01:29:45,918
like low-res window right like you know

1462
01:29:40,389 --> 01:29:47,748
like that so it's just super low res to

1463
01:29:45,918 --> 01:29:50,569
take some of the heat off the graphics

1464
01:29:47,748 --> 01:29:53,840
card you know I'm saying how fast are we

1465
01:29:50,569 --> 01:29:57,168
then you know what I mean and I don't

1466
01:29:53,840 --> 01:29:59,630
know and so that would be a good thing

1467
01:29:57,168 --> 01:30:01,609
to ask in video as well if we're the

1468
01:29:59,630 --> 01:30:03,969
same speed then we know that it's really

1469
01:30:01,609 --> 01:30:06,918
doesn't matter like hopefully which is

1470
01:30:03,969 --> 01:30:09,498
presumably the case but we haven't

1471
01:30:06,918 --> 01:30:11,748
optimized our rendering at all for the

1472
01:30:09,498 --> 01:30:15,948
graphics cards so it's possible that

1473
01:30:11,748 --> 01:30:19,609
we've also got cruft in there right and

1474
01:30:15,948 --> 01:30:23,478
I don't know okay so at least in theory

1475
01:30:19,609 --> 01:30:27,399
and who knows but at least in theory we

1476
01:30:23,479 --> 01:30:31,489
are it's us who's taking the time right

1477
01:30:27,399 --> 01:30:33,859
and you know at least as far as I can

1478
01:30:31,488 --> 01:30:35,538
tell that seems to be the case because

1479
01:30:33,859 --> 01:30:37,908
that's dropping the resolution

1480
01:30:35,538 --> 01:30:41,090
dramatically and I'm not seeing a

1481
01:30:37,908 --> 01:30:43,399
difference in frame right there so we it

1482
01:30:41,090 --> 01:30:45,979
you know at least as far as I can tell

1483
01:30:43,399 --> 01:30:48,138
it's not that now I don't actually know

1484
01:30:45,979 --> 01:30:49,489
because the transfer time like how long

1485
01:30:48,139 --> 01:30:51,109
it takes to get things down to the

1486
01:30:49,488 --> 01:30:53,299
graphics card could be an issue for us

1487
01:30:51,109 --> 01:30:53,729
right now so don't actually know that

1488
01:30:53,300 --> 01:30:55,920
that's

1489
01:30:53,729 --> 01:30:57,569
I can't say for sure but at least I know

1490
01:30:55,920 --> 01:30:59,719
that like the pixel shader isn't a

1491
01:30:57,569 --> 01:31:14,250
problem for us right

1492
01:30:59,719 --> 01:31:15,539
not on this card anyway alright so and I

1493
01:31:14,250 --> 01:31:18,630
guess there's one other thing I can do

1494
01:31:15,539 --> 01:31:24,738
too which is in the lighting system I

1495
01:31:18,630 --> 01:31:24,739
could just not compute it right

1496
01:31:30,969 --> 01:31:46,779
so here I could do this and that would

1497
01:31:44,738 --> 01:31:52,269
just turn the lighting off the actual

1498
01:31:46,779 --> 01:31:55,050
expensive part and so here is us you

1499
01:31:52,270 --> 01:32:01,080
know walking around in the dark right

1500
01:31:55,050 --> 01:32:03,820
and let's take a look at what that is

1501
01:32:01,079 --> 01:32:06,390
that should be a lot of frames per

1502
01:32:03,819 --> 01:32:06,389
second right

1503
01:32:14,510 --> 01:32:20,119
so that's locked 60 right so good

1504
01:32:17,510 --> 01:32:22,130
because nothing else is happening there

1505
01:32:20,119 --> 01:32:23,539
meaning we are still running the full

1506
01:32:22,130 --> 01:32:26,569
render pass we're just renting it with

1507
01:32:23,539 --> 01:32:29,810
garbage lighting so at least in theory

1508
01:32:26,569 --> 01:32:31,759
that should mean that if we get the

1509
01:32:29,810 --> 01:32:34,280
lighting running fast enough we would be

1510
01:32:31,760 --> 01:32:36,860
60 frames a second right and we're not

1511
01:32:34,279 --> 01:32:38,300
blocked on anything else I mean we still

1512
01:32:36,859 --> 01:32:42,319
would want to fix a bunch of other

1513
01:32:38,300 --> 01:32:49,250
things but you know so alright so that

1514
01:32:42,319 --> 01:32:56,210
seems fine and yeah I mean that seems

1515
01:32:49,250 --> 01:33:06,770
totally fine yeah so I think we're good

1516
01:32:56,210 --> 01:33:15,380
there and and let's do one last test if

1517
01:33:06,770 --> 01:33:20,060
I go to the Ray caster and you can see

1518
01:33:15,380 --> 01:33:26,060
us doing a red cast here where we do the

1519
01:33:20,060 --> 01:33:28,160
two the two of these if we so rate

1520
01:33:26,060 --> 01:33:30,980
bundle and I so we just do one pass over

1521
01:33:28,159 --> 01:33:36,500
the sphere each time so if I turn back

1522
01:33:30,979 --> 01:33:39,439
on the tiles for example which we had

1523
01:33:36,500 --> 01:33:41,479
turned off so there's like a there's

1524
01:33:39,439 --> 01:33:46,119
like a checkerboard pattern right that

1525
01:33:41,479 --> 01:33:57,529
you can imply that you can apply here so

1526
01:33:46,119 --> 01:33:59,869
in in full cam here so in here if we

1527
01:33:57,529 --> 01:34:01,819
want to we can turn back on the

1528
01:33:59,869 --> 01:34:03,829
checkerboard which would reduce the

1529
01:34:01,819 --> 01:34:06,189
number and that should do 60 frames a

1530
01:34:03,829 --> 01:34:06,189
second as well

1531
01:34:08,590 --> 01:34:11,590
oops

1532
01:34:15,809 --> 01:34:25,288
can just try to validate the fact that

1533
01:34:17,760 --> 01:34:30,900
nothing weird is going on here so if we

1534
01:34:25,288 --> 01:34:34,078
do the checkerboard rendering the

1535
01:34:30,899 --> 01:34:37,019
checkerboard lighting we can hit 60

1536
01:34:34,078 --> 01:34:39,058
frames a second sometimes but not always

1537
01:34:37,020 --> 01:34:41,940
and it looks like it's whether or not

1538
01:34:39,059 --> 01:34:43,739
we're moving which may have something to

1539
01:34:41,939 --> 01:34:47,000
do with how we're updating the lighting

1540
01:34:43,738 --> 01:34:53,638
grid or worse where we are like that one

1541
01:34:47,000 --> 01:34:55,139
you can see is much worse right not 100%

1542
01:34:53,639 --> 01:34:57,239
sure why probably because there's more

1543
01:34:55,139 --> 01:35:05,159
geometry in here

1544
01:34:57,238 --> 01:35:09,089
I would guess but it's clear we can hit

1545
01:35:05,158 --> 01:35:11,698
60 right so it's clear we can hit 60 the

1546
01:35:09,090 --> 01:35:18,409
question is just getting there without

1547
01:35:11,698 --> 01:35:27,799
having to do those shenanigans all right

1548
01:35:18,408 --> 01:35:27,799
okay all right so that's all good

1549
01:35:31,279 --> 01:35:35,069
which brings us back to trying to

1550
01:35:33,359 --> 01:35:38,309
structure a loop for a better KD

1551
01:35:35,069 --> 01:35:42,840
processing which is a little bit of a

1552
01:35:38,310 --> 01:35:50,520
brain bender but let's let's keep at it

1553
01:35:42,840 --> 01:35:53,969
so oops so let's take a look at raycast

1554
01:35:50,520 --> 01:36:07,190
here again there we go

1555
01:35:53,969 --> 01:36:10,948
so in raycast trying to work backwards

1556
01:36:07,189 --> 01:36:19,939
we know we're gonna have something that

1557
01:36:10,948 --> 01:36:24,769
looks like this right in here

1558
01:36:19,939 --> 01:36:27,809
so we know don't need a second for loop

1559
01:36:24,770 --> 01:36:32,370
so we know we're going to use this leaf

1560
01:36:27,810 --> 01:36:38,100
index loop here and we're going to use

1561
01:36:32,369 --> 01:36:43,519
this to go over our actual a a B B's to

1562
01:36:38,100 --> 01:36:46,588
produce our Rea collision tests here

1563
01:36:43,520 --> 01:36:46,589
[Music]

1564
01:36:59,500 --> 01:37:08,630
so I think working backwards from there

1565
01:37:04,819 --> 01:37:12,259
assuming it's not a leaf container we

1566
01:37:08,630 --> 01:37:15,260
know we have to keep walking down the

1567
01:37:12,260 --> 01:37:19,940
close side of the tree and just all

1568
01:37:15,260 --> 01:37:24,560
we're doing is making a stack of our far

1569
01:37:19,939 --> 01:37:26,629
side of the tree right so basically like

1570
01:37:24,560 --> 01:37:30,789
whatever the current stack value is

1571
01:37:26,630 --> 01:37:30,789
going to be like the closed side index

1572
01:37:32,170 --> 01:37:44,300
right so whatever whatever we're gonna

1573
01:37:42,680 --> 01:37:46,070
do on the next loop is just we're just

1574
01:37:44,300 --> 01:37:48,140
gonna keep walking down that side of the

1575
01:37:46,069 --> 01:37:51,559
tree and we're just gonna leave a stack

1576
01:37:48,140 --> 01:37:56,119
around that's the that's the far side

1577
01:37:51,560 --> 01:37:59,690
right so then all we need to do is say

1578
01:37:56,119 --> 01:38:00,439
well when we don't when we say like oh

1579
01:37:59,689 --> 01:38:03,619
whoops

1580
01:38:00,439 --> 01:38:12,710
like that's not actually a thing right

1581
01:38:03,619 --> 01:38:14,750
that we're doing when we say look this

1582
01:38:12,710 --> 01:38:16,130
thing doesn't need to be processed the

1583
01:38:14,750 --> 01:38:18,859
thing we're on does not need to be

1584
01:38:16,130 --> 01:38:24,289
processed then what we need to do is pop

1585
01:38:18,859 --> 01:38:31,159
the stack at that point right so we just

1586
01:38:24,289 --> 01:38:33,890
want to do a walking back up the stack

1587
01:38:31,159 --> 01:38:37,340
so while the depth is greater than zero

1588
01:38:33,890 --> 01:38:44,090
we just want to keep doing like a depth

1589
01:38:37,340 --> 01:38:46,819
you know - - right we want to do like a

1590
01:38:44,090 --> 01:38:49,579
cur stack value thing and we want to

1591
01:38:46,819 --> 01:38:52,670
like figure out whether this thing is

1592
01:38:49,579 --> 01:38:55,939
actually working you know I'm saying

1593
01:38:52,670 --> 01:38:56,779
like figure out whether we actually can

1594
01:38:55,939 --> 01:39:00,439
use it or not

1595
01:38:56,779 --> 01:39:04,960
so if the n-side bit like if if it can

1596
01:39:00,439 --> 01:39:04,960
be used we break right

1597
01:39:07,859 --> 01:39:11,009
[Music]

1598
01:39:13,369 --> 01:39:17,720
so I think that's how that would work

1599
01:40:04,460 --> 01:40:09,810
it's still not quite right so when we

1600
01:40:07,529 --> 01:40:12,029
are we need to decide like what the

1601
01:40:09,810 --> 01:40:13,679
primary like you can you can rearrange

1602
01:40:12,029 --> 01:40:16,759
this loop in so many different ways

1603
01:40:13,679 --> 01:40:20,279
because the things that have to happen

1604
01:40:16,760 --> 01:40:22,710
can be placed in any number of locations

1605
01:40:20,279 --> 01:40:24,420
right when we're actually gonna process

1606
01:40:22,710 --> 01:40:26,099
one of these things what we're really

1607
01:40:24,420 --> 01:40:31,980
doing here is just determining which

1608
01:40:26,099 --> 01:40:35,789
side we're gonna process right and so

1609
01:40:31,979 --> 01:40:40,519
maybe what you would say is can we make

1610
01:40:35,789 --> 01:40:43,408
this primal and I don't know if we can

1611
01:40:40,520 --> 01:40:45,630
so let's suppose we made start side

1612
01:40:43,408 --> 01:40:50,819
primal and then we said okay we're gonna

1613
01:40:45,630 --> 01:41:01,949
process the close side right so we then

1614
01:40:50,819 --> 01:41:04,979
say look if the close side is a leaf so

1615
01:41:01,948 --> 01:41:07,289
we say yeah classify which side were on

1616
01:41:04,979 --> 01:41:11,279
if the close side is a leaf you just

1617
01:41:07,289 --> 01:41:16,349
process it right and that's fine

1618
01:41:11,279 --> 01:41:25,289
if it's not right then you then that's

1619
01:41:16,349 --> 01:41:29,090
your new then that's your nuker stack

1620
01:41:25,289 --> 01:41:29,090
value right

1621
01:41:34,840 --> 01:41:39,310
yeah yeah all right I think we're

1622
01:41:37,600 --> 01:41:42,370
getting a little closer here so if the

1623
01:41:39,310 --> 01:41:47,940
closed sign is a leaf container then you

1624
01:41:42,369 --> 01:41:47,939
do it if

1625
01:42:03,198 --> 01:42:06,859
of course the problem is then you're

1626
01:42:04,939 --> 01:42:12,849
never gonna process far aside leave

1627
01:42:06,859 --> 01:42:24,619
containers so no that would not work

1628
01:42:12,850 --> 01:42:26,630
right so if you're actually doing closed

1629
01:42:24,619 --> 01:42:28,988
site and farce idea that wouldn't work

1630
01:42:26,630 --> 01:42:28,989
at all

1631
01:42:30,939 --> 01:42:34,199
[Music]

1632
01:42:53,949 --> 01:43:00,050
I'm not really sure how to build this

1633
01:42:56,510 --> 01:43:02,960
loop so this is complicated enough that

1634
01:43:00,050 --> 01:43:05,570
it seems like what I need to actually do

1635
01:43:02,960 --> 01:43:08,630
if I want to do it right is I'm going to

1636
01:43:05,569 --> 01:43:12,889
have to basically do each individual

1637
01:43:08,630 --> 01:43:15,079
thing write it out completely so here's

1638
01:43:12,890 --> 01:43:19,000
what I do in every single case and then

1639
01:43:15,079 --> 01:43:21,260
literally just compact those cases I

1640
01:43:19,000 --> 01:43:25,550
think that's the only way I can really

1641
01:43:21,260 --> 01:43:29,300
do it I just can't think of another way

1642
01:43:25,550 --> 01:43:31,970
to do it you know i'm santi cuz i've

1643
01:43:29,300 --> 01:43:33,739
tried like you know being slick about it

1644
01:43:31,970 --> 01:43:38,900
and it I can't seem to get it together

1645
01:43:33,739 --> 01:43:41,569
right it doesn't seem to work and so I

1646
01:43:38,899 --> 01:43:46,839
feel like yeah like nothing I'm gonna do

1647
01:43:41,569 --> 01:43:46,840
there is actually gonna help me right I

1648
01:43:47,529 --> 01:43:52,389
don't know how we got into this state

1649
01:43:49,729 --> 01:43:52,389
exactly

1650
01:43:56,569 --> 01:44:12,889
now that goes there I think that goes

1651
01:44:06,520 --> 01:44:15,740
there so I yeah I think I'm gonna have

1652
01:44:12,890 --> 01:44:16,970
to I think I'm gonna have to do

1653
01:44:15,739 --> 01:44:19,429
something something simple I mean

1654
01:44:16,970 --> 01:44:21,500
something simpler at first but much more

1655
01:44:19,430 --> 01:44:25,460
verbose and then try to compress it down

1656
01:44:21,500 --> 01:44:28,579
into place because so I have several

1657
01:44:25,460 --> 01:44:31,730
problems right that I have to solve so

1658
01:44:28,579 --> 01:44:36,050
for every split plane where we have

1659
01:44:31,729 --> 01:44:40,759
something that looks like this we've got

1660
01:44:36,050 --> 01:44:50,180
the following cases so case the first

1661
01:44:40,760 --> 01:44:53,630
case is this right so here's like a and

1662
01:44:50,180 --> 01:44:55,310
B so and you know what let me do this a

1663
01:44:53,630 --> 01:45:04,220
little bit differently let's do it like

1664
01:44:55,310 --> 01:45:12,080
this a be case one right then I've got

1665
01:45:04,220 --> 01:45:15,900
case two a and B right

1666
01:45:12,079 --> 01:45:20,719
then I've got case three which is a and

1667
01:45:15,899 --> 01:45:20,719
B oops

1668
01:45:23,699 --> 01:45:36,189
then I've got case four right and the

1669
01:45:33,819 --> 01:45:39,579
nasty thing about this is there's

1670
01:45:36,189 --> 01:45:43,750
actually two cases like there's case

1671
01:45:39,579 --> 01:45:50,789
like the two and four actually give rise

1672
01:45:43,750 --> 01:45:53,800
to five and six which is to say that

1673
01:45:50,789 --> 01:45:56,890
whether or not you've traversed this or

1674
01:45:53,800 --> 01:46:00,130
not right so this moves backwards over

1675
01:45:56,890 --> 01:46:02,470
time and you may end up like another way

1676
01:46:00,130 --> 01:46:05,500
to say it is there's a five case which

1677
01:46:02,470 --> 01:46:08,650
is that you were to but then you become

1678
01:46:05,500 --> 01:46:13,180
one and here you were four but you

1679
01:46:08,649 --> 01:46:15,819
become three right and the reason for

1680
01:46:13,180 --> 01:46:18,579
that again is that if I have this case

1681
01:46:15,819 --> 01:46:21,849
and so I think it's a case to where I

1682
01:46:18,579 --> 01:46:23,829
process a and B when I go to process a I

1683
01:46:21,850 --> 01:46:26,140
may find that my clothes hit was like

1684
01:46:23,829 --> 01:46:27,909
here and then I know now no longer need

1685
01:46:26,140 --> 01:46:33,700
to process B even though when I looked

1686
01:46:27,909 --> 01:46:35,769
at a I did right and so that's why I say

1687
01:46:33,699 --> 01:46:38,800
that that kind of needs to be a deferred

1688
01:46:35,770 --> 01:46:41,500
thing so the stack needs to push beyond

1689
01:46:38,800 --> 01:46:43,449
there so when we go down what we're

1690
01:46:41,500 --> 01:46:45,850
effectively doing is figuring out which

1691
01:46:43,449 --> 01:46:48,309
side were on is it a or b and pushing

1692
01:46:45,850 --> 01:46:50,200
the other side onto our stack when we

1693
01:46:48,310 --> 01:46:54,180
then go to load the thing off the stack

1694
01:46:50,199 --> 01:46:54,179
then that's when we need to

1695
01:46:56,609 --> 01:47:00,130
when we load something out the sack

1696
01:46:58,720 --> 01:47:02,289
that's when we then need to test it

1697
01:47:00,130 --> 01:47:04,510
right and that's why I was trying to

1698
01:47:02,289 --> 01:47:07,840
zero in on something where we walk up

1699
01:47:04,510 --> 01:47:09,640
the stack here right and so when we're

1700
01:47:07,840 --> 01:47:11,920
walking up the stack here we're looking

1701
01:47:09,640 --> 01:47:15,990
for one that we can then start to

1702
01:47:11,920 --> 01:47:19,989
descend again right does that make sense

1703
01:47:15,989 --> 01:47:23,550
so it would seem like this needs to be

1704
01:47:19,989 --> 01:47:23,550
you know I don't know

1705
01:47:28,630 --> 01:47:32,600
it's this sort of thing where we say

1706
01:47:30,710 --> 01:47:34,730
like look if this thing is a leaf

1707
01:47:32,600 --> 01:47:36,440
container and you know there's another

1708
01:47:34,729 --> 01:47:39,109
way we could do this we could just make

1709
01:47:36,439 --> 01:47:43,879
this be like look everything has some

1710
01:47:39,109 --> 01:47:49,069
boxes so there's just a box count right

1711
01:47:43,880 --> 01:47:52,219
and this you know it's like that right

1712
01:47:49,069 --> 01:47:54,349
so everything has a box leaf count in it

1713
01:47:52,219 --> 01:47:56,359
and we loop over the leaves doing those

1714
01:47:54,350 --> 01:47:58,130
as a thing and a lot of them just have

1715
01:47:56,359 --> 01:47:59,689
zero because they're internal right

1716
01:47:58,130 --> 01:48:03,199
there they're actual just nodes that

1717
01:47:59,689 --> 01:48:05,750
classify things so then we have to do

1718
01:48:03,198 --> 01:48:08,389
like okay after we process anything that

1719
01:48:05,750 --> 01:48:11,329
actually was Leafs leaf like in here

1720
01:48:08,390 --> 01:48:13,340
then we have to go through and this

1721
01:48:11,329 --> 01:48:17,140
determined who's getting processed and

1722
01:48:13,340 --> 01:48:21,079
who's not getting processed right so

1723
01:48:17,140 --> 01:48:22,369
although you know what maybe this may be

1724
01:48:21,079 --> 01:48:24,469
now I think about it I guess we don't

1725
01:48:22,369 --> 01:48:26,539
really need to do that because we need

1726
01:48:24,469 --> 01:48:28,880
to know the result of that if anyway so

1727
01:48:26,539 --> 01:48:33,469
we're gonna be stuck doing two ifs here

1728
01:48:28,880 --> 01:48:35,630
whether we like it or not right which is

1729
01:48:33,469 --> 01:48:37,039
unfortunate now what we can do is we

1730
01:48:35,630 --> 01:48:38,810
can't help it out a little bit here by

1731
01:48:37,039 --> 01:48:40,219
putting this branch by making a little

1732
01:48:38,810 --> 01:48:41,719
bit less of a branch here because we

1733
01:48:40,219 --> 01:48:42,948
know that we're always gonna have some

1734
01:48:41,719 --> 01:48:45,590
children otherwise we wouldn't have

1735
01:48:42,948 --> 01:48:49,909
continued down here so what we can do is

1736
01:48:45,590 --> 01:48:51,469
we can make this be a do-while loop so

1737
01:48:49,909 --> 01:48:53,659
that we only have the branch at the end

1738
01:48:51,469 --> 01:48:56,210
right rather than the branch the

1739
01:48:53,659 --> 01:49:04,250
beginning as well so we can do this if

1740
01:48:56,210 --> 01:49:05,659
we want to right so that there's no

1741
01:49:04,250 --> 01:49:08,359
branch at the beginning because you know

1742
01:49:05,659 --> 01:49:09,889
once once you hit this branch we don't

1743
01:49:08,359 --> 01:49:11,779
need to do a second branch because we

1744
01:49:09,890 --> 01:49:13,760
know that this thing should always have

1745
01:49:11,779 --> 01:49:16,849
children otherwise it wouldn't have been

1746
01:49:13,760 --> 01:49:18,770
a leaf node right if it doesn't have any

1747
01:49:16,850 --> 01:49:24,739
Leafs children then it wouldn't have had

1748
01:49:18,770 --> 01:49:26,570
its bit set right so so when we do this

1749
01:49:24,738 --> 01:49:30,759
branch and we know like look is the

1750
01:49:26,569 --> 01:49:30,759
close is the is this a leaf container

1751
01:49:31,630 --> 01:49:36,170
then after we figure out whether it's a

1752
01:49:34,429 --> 01:49:39,399
leaf container we need to do this

1753
01:49:36,170 --> 01:49:39,399
nonsense right

1754
01:49:49,520 --> 01:49:56,370
try to line this up here so we check to

1755
01:49:54,029 --> 01:49:59,159
see if it's a leaf container if it's not

1756
01:49:56,369 --> 01:50:01,470
a leaf container then we go into the

1757
01:49:59,159 --> 01:50:03,689
else clause where we try to do the

1758
01:50:01,470 --> 01:50:06,360
classification once we figure out what

1759
01:50:03,689 --> 01:50:08,129
the classification is we push the wrong

1760
01:50:06,359 --> 01:50:11,339
side like the side we're not gonna do

1761
01:50:08,130 --> 01:50:21,300
right now right we pushed that out of

1762
01:50:11,340 --> 01:50:23,579
the stack yeah man this is brutal we

1763
01:50:21,300 --> 01:50:29,220
push the wrong side on the stack then we

1764
01:50:23,579 --> 01:50:31,920
process the correct side right because

1765
01:50:29,220 --> 01:50:34,920
we know this is now a splitting region

1766
01:50:31,920 --> 01:50:36,300
so if it's a splitting region then you

1767
01:50:34,920 --> 01:50:39,359
know as opposed to another region so

1768
01:50:36,300 --> 01:50:44,430
then we do this we then say all right we

1769
01:50:39,359 --> 01:50:46,219
push the sides on correctly and off we

1770
01:50:44,430 --> 01:50:49,220
go

1771
01:50:46,220 --> 01:50:49,220
right

1772
01:51:02,819 --> 01:51:08,549
but wait so what's the case where we

1773
01:51:05,699 --> 01:51:12,059
actually don't descend so the case where

1774
01:51:08,550 --> 01:51:25,440
we actually don't descend is oh is

1775
01:51:12,060 --> 01:51:27,840
actually the leaf case interesting so I

1776
01:51:25,439 --> 01:51:33,329
think that's correct right so if we're

1777
01:51:27,840 --> 01:51:35,850
on a leaf we do we do that work and then

1778
01:51:33,329 --> 01:51:40,050
we walk the stack to find the next

1779
01:51:35,850 --> 01:51:45,390
person we can start treating as a region

1780
01:51:40,050 --> 01:51:46,529
again right so the first time we find

1781
01:51:45,390 --> 01:51:55,320
someone who actually passes that test

1782
01:51:46,529 --> 01:51:57,389
and then if if other you know if it's

1783
01:51:55,319 --> 01:52:01,170
not a leaf container then we actually

1784
01:51:57,390 --> 01:52:05,510
just do the classification on it and we

1785
01:52:01,170 --> 01:52:05,510
split it right

1786
01:52:12,599 --> 01:52:31,230
so I think that would be roughly the way

1787
01:52:18,059 --> 01:52:35,099
to do this I mean I don't see a lot else

1788
01:52:31,229 --> 01:52:37,439
in terms of yeah I mean it seems like it

1789
01:52:35,099 --> 01:52:39,000
I don't know right in other words you

1790
01:52:37,439 --> 01:52:40,439
check to see if this is a leaf container

1791
01:52:39,000 --> 01:52:41,460
assuming it's a leaf container you do

1792
01:52:40,439 --> 01:52:44,698
everything in the leaf container and

1793
01:52:41,460 --> 01:52:47,069
then you hunt up the stack to see who

1794
01:52:44,698 --> 01:52:51,319
the last you know what's the last thing

1795
01:52:47,069 --> 01:52:53,969
on there that you need to check to do

1796
01:52:51,319 --> 01:52:57,028
right

1797
01:52:53,970 --> 01:52:57,029
[Music]

1798
01:53:03,770 --> 01:53:13,230
seems plausible you then just see like

1799
01:53:09,149 --> 01:53:15,089
yeah is this thing because we know all

1800
01:53:13,229 --> 01:53:18,329
the things on the stack were things that

1801
01:53:15,090 --> 01:53:21,150
were far sides we just see whether or

1802
01:53:18,329 --> 01:53:27,180
not the far side thing that you're

1803
01:53:21,149 --> 01:53:30,809
grabbing out is is actually reachable if

1804
01:53:27,180 --> 01:53:38,390
it is you stop right and you do the work

1805
01:53:30,810 --> 01:53:41,130
so right if this is reachable you stop

1806
01:53:38,390 --> 01:53:45,980
assuming that you weren't a leaf node

1807
01:53:41,130 --> 01:53:49,680
all you do is you classify and descend

1808
01:53:45,979 --> 01:53:51,779
leaving behind you like breadcrumbs all

1809
01:53:49,680 --> 01:53:54,030
of the things you didn't process so they

1810
01:53:51,779 --> 01:54:01,829
can be checked later by this side of the

1811
01:53:54,029 --> 01:54:05,519
routine if I'm understanding that

1812
01:54:01,829 --> 01:54:08,579
correctly and not totally screwing it up

1813
01:54:05,520 --> 01:54:10,170
in my head that actually does work out

1814
01:54:08,579 --> 01:54:19,829
to be pretty simple at the end of the

1815
01:54:10,170 --> 01:54:23,640
day right and there's no dependent

1816
01:54:19,829 --> 01:54:25,170
pushes so you push always so if you

1817
01:54:23,640 --> 01:54:28,500
didn't do a leaf process

1818
01:54:25,170 --> 01:54:30,899
you always push and all you're doing is

1819
01:54:28,500 --> 01:54:34,880
determining which one you're pushing

1820
01:54:30,899 --> 01:54:34,879
versus which one you're using

1821
01:55:04,180 --> 01:55:11,600
so I don't know that seems really

1822
01:55:07,210 --> 01:55:16,119
straightforward after I've kind of gone

1823
01:55:11,600 --> 01:55:21,430
through it more carefully but is it

1824
01:55:16,119 --> 01:55:29,380
right it's a good question

1825
01:55:21,430 --> 01:55:29,380
so you always need to load those and I

1826
01:55:32,319 --> 01:55:40,039
want to say you don't need this test

1827
01:55:35,239 --> 01:55:41,869
mask so what I think is you would

1828
01:55:40,039 --> 01:55:44,989
basically say all right I'm going to

1829
01:55:41,869 --> 01:55:46,760
select which one of these I do using the

1830
01:55:44,989 --> 01:55:49,189
mask which is basically just telling me

1831
01:55:46,760 --> 01:55:52,039
which which dimension I'm picking I

1832
01:55:49,189 --> 01:55:55,729
adjust using the plain D I then know

1833
01:55:52,039 --> 01:55:57,529
looking at the sine which side I'm on am

1834
01:55:55,729 --> 01:56:01,459
I on the positive side or the negative

1835
01:55:57,529 --> 01:56:08,779
side so I know that we have an a mask

1836
01:56:01,460 --> 01:56:11,960
extract in here somewhere and it's just

1837
01:56:08,779 --> 01:56:21,439
any true I think are all true or

1838
01:56:11,960 --> 01:56:25,300
something like this any true so here

1839
01:56:21,439 --> 01:56:30,529
we've got like a moove mask right and

1840
01:56:25,300 --> 01:56:32,300
the move mask is you know it's a little

1841
01:56:30,529 --> 01:56:37,279
bit deceptive so what I want to do is

1842
01:56:32,300 --> 01:56:40,310
basically say like to extract like the

1843
01:56:37,279 --> 01:56:42,500
sign and the move mask will do that

1844
01:56:40,310 --> 01:56:44,450
because I believe it always extracts the

1845
01:56:42,500 --> 01:56:50,390
high bit which happens to be the sign

1846
01:56:44,449 --> 01:56:52,460
bit so I can use this here so because

1847
01:56:50,390 --> 01:56:55,190
this is classifying the origin I know

1848
01:56:52,460 --> 01:56:58,310
that I only need to know just that one

1849
01:56:55,189 --> 01:57:04,069
move mask this could actually be done

1850
01:56:58,310 --> 01:57:06,950
just entirely in float so it's really

1851
01:57:04,069 --> 01:57:11,000
all SS instructions not PS instructions

1852
01:57:06,949 --> 01:57:18,000
but yeah

1853
01:57:11,000 --> 01:57:22,439
so if I just do like sign masks or

1854
01:57:18,000 --> 01:57:24,270
something here or like sign of the I

1855
01:57:22,439 --> 01:57:35,849
mean I really only need the sign of the

1856
01:57:24,270 --> 01:57:39,690
base value so you know it's like so if I

1857
01:57:35,850 --> 01:57:45,900
take start sign and I do a move mask on

1858
01:57:39,689 --> 01:57:46,829
it and I just say like look I want to do

1859
01:57:45,899 --> 01:57:49,500
an end

1860
01:57:46,829 --> 01:57:57,510
I want the sign bit so it's gonna be

1861
01:57:49,500 --> 01:57:58,979
like you know that on on the

1862
01:57:57,510 --> 01:58:00,840
floating-point value but I believe this

1863
01:57:58,979 --> 01:58:07,709
goes by bytes so it just be the fourth

1864
01:58:00,840 --> 01:58:13,440
bit presumably so that be the one bit so

1865
01:58:07,710 --> 01:58:17,579
really I mean this right right that's

1866
01:58:13,439 --> 01:58:24,299
zero bit the 1 bit 2 bit the 3 bit I

1867
01:58:17,579 --> 01:58:26,789
want to say it be that and since I

1868
01:58:24,300 --> 01:58:28,969
really guess I want to do it where I

1869
01:58:26,789 --> 01:58:31,560
just shifted this down by three instead

1870
01:58:28,969 --> 01:58:34,350
we'll double check all this in the docs

1871
01:58:31,560 --> 01:58:37,350
but I just want to extract just the sign

1872
01:58:34,350 --> 01:58:41,489
bit from the first one right so I is I

1873
01:58:37,350 --> 01:58:56,789
is tracked that and I just say hey yeah

1874
01:58:41,488 --> 01:58:58,619
so push one keep one right is all I need

1875
01:58:56,789 --> 01:59:03,569
you to do I need you to push one and

1876
01:58:58,619 --> 01:59:05,488
keep one and then when I need to do my

1877
01:59:03,569 --> 01:59:08,549
other loop which is the opposite way

1878
01:59:05,488 --> 01:59:12,419
around this one is looking whether the

1879
01:59:08,550 --> 01:59:14,940
n-side gets in there or not we know the

1880
01:59:12,420 --> 01:59:16,710
start side is not on the same side as

1881
01:59:14,939 --> 01:59:19,469
this so we just need to know whether the

1882
01:59:16,710 --> 01:59:21,960
N side makes it there or not right is

1883
01:59:19,469 --> 01:59:23,340
the way this would work so the exact

1884
01:59:21,960 --> 01:59:25,679
same code

1885
01:59:23,340 --> 01:59:28,319
would work the only difference is we

1886
01:59:25,679 --> 01:59:30,809
need in we need to do an extract on

1887
01:59:28,319 --> 01:59:34,259
everybody and then we're just gonna test

1888
01:59:30,809 --> 01:59:38,309
for truth right so in here we would just

1889
01:59:34,260 --> 01:59:41,699
say okay the start side or the inside

1890
01:59:38,309 --> 01:59:43,980
bit here is a mob mask and we just want

1891
01:59:41,698 --> 01:59:46,529
to end it with whether or not any of

1892
01:59:43,979 --> 01:59:48,779
these would be the case so after the

1893
01:59:46,529 --> 01:59:52,170
move mask happens we just look at the

1894
01:59:48,779 --> 01:59:59,729
sign bits of anybody so those sign bits

1895
01:59:52,170 --> 02:00:04,920
are gonna be like the in hex each one of

1896
01:59:59,729 --> 02:00:09,118
these is four so the high bit on each of

1897
02:00:04,920 --> 02:00:10,710
these is what we would want assuming

1898
02:00:09,118 --> 02:00:15,630
that that actually is what that is I

1899
02:00:10,710 --> 02:00:17,189
don't actually know if that's true so

1900
02:00:15,630 --> 02:00:21,800
we'll have to go look at that but this

1901
02:00:17,189 --> 02:00:21,799
basically means that somebody needs to

1902
02:00:22,788 --> 02:00:34,529
one of the Rays can reach it of the four

1903
02:00:26,819 --> 02:00:37,288
rays we have right so at that point the

1904
02:00:34,529 --> 02:00:40,019
only thing we need to do is actually be

1905
02:00:37,288 --> 02:00:48,658
able to load this crap out of the value

1906
02:00:40,020 --> 02:00:50,340
we have which is this right so what are

1907
02:00:48,658 --> 02:00:51,658
the things we actually need to know well

1908
02:00:50,340 --> 02:00:55,139
the things we actually need to know

1909
02:00:51,658 --> 02:00:58,348
there are are literally just these

1910
02:00:55,139 --> 02:01:06,118
values so we need to know a Y mask a Z

1911
02:00:58,349 --> 02:01:09,139
mask a plain D and you know if you look

1912
02:01:06,118 --> 02:01:15,029
at what this actually entails it's

1913
02:01:09,139 --> 02:01:17,460
really basic right so I don't know what

1914
02:01:15,029 --> 02:01:22,229
the fastest way is gonna be to do this

1915
02:01:17,460 --> 02:01:24,929
but it's going to be pretty

1916
02:01:22,229 --> 02:01:29,269
straightforward because we can pack

1917
02:01:24,929 --> 02:01:32,599
literally everything into a you 64 I

1918
02:01:29,270 --> 02:01:32,599
would think

1919
02:01:50,859 --> 02:01:55,579
hmm-hmm-hmm so if we did something like

1920
02:01:53,600 --> 02:01:57,020
this we actually don't even need that

1921
02:01:55,579 --> 02:02:06,469
and this could be six these could be

1922
02:01:57,020 --> 02:02:37,730
16-bit values that we push on here yeah

1923
02:02:06,469 --> 02:02:44,270
anyway so I don't know I mean in theory

1924
02:02:37,729 --> 02:02:47,448
this actually works how good do I think

1925
02:02:44,270 --> 02:02:52,690
it is I don't know but in theory this

1926
02:02:47,448 --> 02:02:56,809
would actually work and this is trivial

1927
02:02:52,689 --> 02:03:02,419
like this is like really very little

1928
02:02:56,810 --> 02:03:04,610
code this does one check but has to do

1929
02:03:02,420 --> 02:03:10,359
two loops because it has to do the stack

1930
02:03:04,609 --> 02:03:10,359
walk and that seems bad potentially

1931
02:03:20,708 --> 02:03:26,899
but I'm not sure what else you would do

1932
02:03:24,578 --> 02:03:30,139
so I mean I think this is what it looks

1933
02:03:26,899 --> 02:03:30,728
like so I'm going to leave that off for

1934
02:03:30,139 --> 02:03:33,229
now

1935
02:03:30,729 --> 02:03:41,179
and that's what we'll work on next week

1936
02:03:33,229 --> 02:03:42,260
I guess we'll go to brief QA so yet now

1937
02:03:41,179 --> 02:03:44,719
when I'm looking at it it's getting

1938
02:03:42,260 --> 02:03:46,998
better right like it's not as bad as I

1939
02:03:44,719 --> 02:03:54,889
thought it was first if this is actually

1940
02:03:46,998 --> 02:04:01,969
the right thing I do feel like this part

1941
02:03:54,889 --> 02:04:05,840
of things this part seems like it's

1942
02:04:01,969 --> 02:04:07,760
probably sort of wrong maybe and the

1943
02:04:05,840 --> 02:04:16,130
reason I say that is again it's just

1944
02:04:07,760 --> 02:04:24,979
it's not using all the lanes it should

1945
02:04:16,130 --> 02:04:25,998
be and it's not so I don't know we'll

1946
02:04:24,979 --> 02:04:28,969
see

1947
02:04:25,998 --> 02:04:39,109
anyway we'll go ahead and do QA little

1948
02:04:28,969 --> 02:04:39,498
Q&amp;A here but I'm okay with it I'm okay

1949
02:04:39,109 --> 02:04:43,748
with that

1950
02:04:39,498 --> 02:04:43,748
and you know

1951
02:05:02,189 --> 02:05:10,340
oh man in cybot it's about wins the QA

1952
02:05:07,408 --> 02:05:10,339
already

1953
02:05:35,100 --> 02:05:49,440
is this PHP no it's it's C PHP like many

1954
02:05:43,470 --> 02:05:53,490
languages borrowed C's structure so it

1955
02:05:49,439 --> 02:05:57,629
looks PHP does look like C to a certain

1956
02:05:53,489 --> 02:05:59,909
extent is there a good way to get

1957
02:05:57,630 --> 02:06:00,810
intuitions about bit mass etc or is it

1958
02:05:59,909 --> 02:06:03,090
just practice

1959
02:06:00,810 --> 02:06:05,760
I mean bit maths are actually pretty

1960
02:06:03,090 --> 02:06:07,440
simple it's usually more the fact that

1961
02:06:05,760 --> 02:06:08,940
you write them in hexadecimal often

1962
02:06:07,439 --> 02:06:11,369
times that makes it more complicated I

1963
02:06:08,939 --> 02:06:13,289
mean there's just there's just 32 or 64

1964
02:06:11,369 --> 02:06:14,819
lanes and they're either said are not

1965
02:06:13,289 --> 02:06:16,649
set so you're just thinking of these

1966
02:06:14,819 --> 02:06:18,840
little like lanes that come in and you

1967
02:06:16,649 --> 02:06:20,549
know what what do you want to happen

1968
02:06:18,840 --> 02:06:27,180
with the individual bits and moving them

1969
02:06:20,550 --> 02:06:28,619
around it's not that bad right the only

1970
02:06:27,180 --> 02:06:30,900
thing that I've seen here is for move

1971
02:06:28,619 --> 02:06:33,479
masks I just always have to refresh my

1972
02:06:30,899 --> 02:06:34,769
memory to what it moves because there's

1973
02:06:33,479 --> 02:06:36,269
a lot of ways they could have chosen to

1974
02:06:34,770 --> 02:06:38,940
do that and I think they chose the smart

1975
02:06:36,270 --> 02:06:42,890
way but if you take a look here

1976
02:06:38,939 --> 02:06:48,349
so like the move mask PS so that's that

1977
02:06:42,890 --> 02:06:48,350
if you do the move mask PS value here

1978
02:06:50,569 --> 02:06:54,809
you can see what it says it says the

1979
02:06:53,430 --> 02:06:56,190
most significant bit of the

1980
02:06:54,810 --> 02:06:59,190
corresponding pax Ingrid is a floating

1981
02:06:56,189 --> 02:07:01,199
point element in a so I just didn't know

1982
02:06:59,189 --> 02:07:05,189
which one it's doing so let's see what

1983
02:07:01,199 --> 02:07:07,500
does it actually say okay so actually

1984
02:07:05,189 --> 02:07:10,769
it's not even as bad as I thought it was

1985
02:07:07,500 --> 02:07:13,470
it's it's actually even easier than I

1986
02:07:10,770 --> 02:07:16,020
thought it was so actually all we have

1987
02:07:13,470 --> 02:07:18,690
to do is this it's actually just moving

1988
02:07:16,020 --> 02:07:25,040
just the high bit of of the four values

1989
02:07:18,689 --> 02:07:25,039
so it's literally just this

1990
02:07:28,859 --> 02:07:35,829
right so I just couldn't remember what

1991
02:07:33,159 --> 02:07:37,448
what move masks I had available because

1992
02:07:35,829 --> 02:07:40,149
if you think about what this is doing

1993
02:07:37,448 --> 02:07:43,029
you have a hundred and twenty eight bits

1994
02:07:40,149 --> 02:07:45,159
that's the register you're actually

1995
02:07:43,029 --> 02:07:47,948
talking about so the actual value inside

1996
02:07:45,159 --> 02:07:50,109
the CPU is 128 bits we're using that to

1997
02:07:47,948 --> 02:07:52,988
compute four separate floating-point

1998
02:07:50,109 --> 02:07:58,359
numbers so 32 bits 32 bits 32 bits 32

1999
02:07:52,988 --> 02:08:00,849
bits right 4 times 32 is 128 and I want

2000
02:07:58,359 --> 02:08:02,649
to know the sign of each of those Story

2001
02:08:00,850 --> 02:08:04,180
2 bit values well the sign bit of a

2002
02:08:02,649 --> 02:08:07,029
floating point value is the highest bit

2003
02:08:04,180 --> 02:08:10,060
it's bit 31 right or bit 32 if they're

2004
02:08:07,029 --> 02:08:14,019
starting with 1 so so mean bit 0 2 bit

2005
02:08:10,060 --> 02:08:16,480
31 it's the last bit it's bit 31 so I

2006
02:08:14,020 --> 02:08:18,219
didn't know what move mask did because

2007
02:08:16,479 --> 02:08:20,198
there's different ones so I remembered

2008
02:08:18,219 --> 02:08:23,260
this one I was like well move mask epi8

2009
02:08:20,198 --> 02:08:26,829
that moves the high bit of each byte

2010
02:08:23,260 --> 02:08:28,869
right so you can see this one so if if

2011
02:08:26,829 --> 02:08:30,369
that was the move mask and I couldn't

2012
02:08:28,869 --> 02:08:33,010
remember what it did but if that was the

2013
02:08:30,369 --> 02:08:35,319
move mask then I need to go four bits in

2014
02:08:33,010 --> 02:08:37,840
to get the sign bit but because I

2015
02:08:35,319 --> 02:08:39,819
actually have a move masked PS in this

2016
02:08:37,840 --> 02:08:41,829
instruction set I am just only getting

2017
02:08:39,819 --> 02:08:43,659
the sign bits so I just have a four bit

2018
02:08:41,829 --> 02:08:48,059
value where each bit is the sign bit so

2019
02:08:43,659 --> 02:08:48,059
it's actually much more useful right

2020
02:08:53,960 --> 02:09:01,500
do you write sheet or could often for

2021
02:08:56,279 --> 02:09:03,119
work not often no I try to keep GPU

2022
02:09:01,500 --> 02:09:05,460
programming to a minimum minimum because

2023
02:09:03,119 --> 02:09:06,479
it's always really janky like GPU

2024
02:09:05,460 --> 02:09:10,050
programming just sucks

2025
02:09:06,479 --> 02:09:11,669
I mean GPUs suck they're not I don't

2026
02:09:10,050 --> 02:09:14,520
like them like I wish we didn't have to

2027
02:09:11,670 --> 02:09:18,090
have them I wish we just had CPUs that

2028
02:09:14,520 --> 02:09:20,220
were fast and or just people didn't have

2029
02:09:18,090 --> 02:09:21,539
GPUs so you didn't have to use them you

2030
02:09:20,220 --> 02:09:22,020
could just write software Enders and be

2031
02:09:21,539 --> 02:09:27,899
done with it

2032
02:09:22,020 --> 02:09:33,480
you know do some eyes feel the urge to

2033
02:09:27,899 --> 02:09:37,439
make handmade here a truly 3d um I mean

2034
02:09:33,479 --> 02:09:40,889
it's it's a lot easier to be all 3d in

2035
02:09:37,439 --> 02:09:43,379
the coat so the code for doing all 3d

2036
02:09:40,890 --> 02:09:46,410
and the runtime is way easier than two

2037
02:09:43,380 --> 02:09:49,890
and a half day like way easier so that

2038
02:09:46,409 --> 02:09:52,590
part is nice but the problem is your

2039
02:09:49,890 --> 02:09:58,850
asset pipeline becomes a massive

2040
02:09:52,590 --> 02:10:03,440
nightmare so as soon as you go 3d you

2041
02:09:58,850 --> 02:10:03,440
10x the work of your asset pipeline just

2042
02:10:03,800 --> 02:10:09,510
massively massively you have to have

2043
02:10:06,390 --> 02:10:12,660
like a bone system and animation system

2044
02:10:09,510 --> 02:10:14,520
and like packing that down and fitting

2045
02:10:12,659 --> 02:10:16,800
it from the art tools and you got to

2046
02:10:14,520 --> 02:10:20,610
have texture mapping and UV coordinate

2047
02:10:16,800 --> 02:10:23,369
assignment and all this stuff so your

2048
02:10:20,609 --> 02:10:26,880
runtime gets a lot easier than having to

2049
02:10:23,369 --> 02:10:29,729
deal with a 2.5 D stuff but your asset

2050
02:10:26,880 --> 02:10:31,590
pipeline becomes a massive massive

2051
02:10:29,729 --> 02:10:33,149
nightmare

2052
02:10:31,590 --> 02:10:34,770
not to mention now you have to have 3d

2053
02:10:33,149 --> 02:10:36,509
artists instead of 2d artists and they

2054
02:10:34,770 --> 02:10:38,100
have to do stuff and you have to decide

2055
02:10:36,510 --> 02:10:39,119
how you're building those assets or

2056
02:10:38,100 --> 02:10:40,560
they're gonna be high res they can

2057
02:10:39,119 --> 02:10:42,000
protect on below res there's gonna build

2058
02:10:40,560 --> 02:10:43,860
low res directly or you're gonna use

2059
02:10:42,000 --> 02:10:48,989
bump Maps or normal Maps displacement

2060
02:10:43,859 --> 02:10:50,670
Maps blah blah blah blah blah right and

2061
02:10:48,989 --> 02:10:51,869
if you use a commercial engine so I'm

2062
02:10:50,670 --> 02:10:52,920
saying your asset pipeline becomes

2063
02:10:51,869 --> 02:10:57,390
Unreal Engine 4

2064
02:10:52,920 --> 02:10:59,250
exactly if you go look at how much cruft

2065
02:10:57,390 --> 02:11:02,670
there is in something like Unreal Engine

2066
02:10:59,250 --> 02:11:06,090
or unity or that stuff the actual

2067
02:11:02,670 --> 02:11:06,300
renderer part of the 3d is not where all

2068
02:11:06,090 --> 02:11:09,989
the

2069
02:11:06,300 --> 02:11:12,539
cruft is it's the huge giant thing that

2070
02:11:09,988 --> 02:11:18,269
has to sit there to get stuff into it

2071
02:11:12,539 --> 02:11:20,158
right and so it's always it's always a

2072
02:11:18,270 --> 02:11:22,710
trade-off where you're like look if you

2073
02:11:20,158 --> 02:11:24,509
can get away with 2d yeah it's a little

2074
02:11:22,710 --> 02:11:26,039
more annoying because you got to do

2075
02:11:24,510 --> 02:11:27,210
these tricks at runtime to figure out

2076
02:11:26,039 --> 02:11:29,399
how you're gonna actually render

2077
02:11:27,210 --> 02:11:30,710
something attractive when you don't have

2078
02:11:29,399 --> 02:11:36,000
the data you need

2079
02:11:30,710 --> 02:11:38,399
but that expense is small compared to

2080
02:11:36,000 --> 02:11:41,578
the expense you will pay in the pipeline

2081
02:11:38,399 --> 02:11:43,529
if you decide to go full 3d it's the pie

2082
02:11:41,578 --> 02:11:45,929
it's the pipeline that kills you on 3d

2083
02:11:43,529 --> 02:11:48,420
not the renderer the renderer is easy I

2084
02:11:45,929 --> 02:11:51,020
mean it's not easy especially you've

2085
02:11:48,420 --> 02:11:53,849
never done one before but it's not

2086
02:11:51,020 --> 02:11:56,849
anywhere close to as hard as the

2087
02:11:53,849 --> 02:11:59,670
pipeline in terms of sheer like you know

2088
02:11:56,849 --> 02:12:01,469
man out like the time is gonna take you

2089
02:11:59,670 --> 02:12:04,170
to build the thing you're gonna spend

2090
02:12:01,469 --> 02:12:06,868
way more time dealing with your asset

2091
02:12:04,170 --> 02:12:16,078
pipeline than you ever are gonna deal

2092
02:12:06,868 --> 02:12:17,368
with your renderer I'm a bit behind the

2093
02:12:16,078 --> 02:12:18,689
FA's do you ever trace secondary rays

2094
02:12:17,368 --> 02:12:20,880
that bounce off and ran directions it

2095
02:12:18,689 --> 02:12:24,178
might lead to array packets nope

2096
02:12:20,880 --> 02:12:26,760
so the way we get around that because we

2097
02:12:24,179 --> 02:12:29,039
do have fully infinite bounce lighting

2098
02:12:26,760 --> 02:12:31,860
like we don't have any I mean it's not

2099
02:12:29,039 --> 02:12:32,939
infinite bounce it's 100 bounce lighting

2100
02:12:31,859 --> 02:12:35,819
or something like that and I know you

2101
02:12:32,939 --> 02:12:39,029
want to classify it but the way we get

2102
02:12:35,819 --> 02:12:41,698
around that is we actually just convict

2103
02:12:39,029 --> 02:12:44,578
so we shoot out Ray's from our sample

2104
02:12:41,698 --> 02:12:47,129
point and we gather the light and store

2105
02:12:44,578 --> 02:12:49,679
it for next frame so we're like a bucket

2106
02:12:47,130 --> 02:12:53,250
brigade right so we we do the secondary

2107
02:12:49,679 --> 02:12:55,618
bounces for the previous frame that were

2108
02:12:53,250 --> 02:12:57,389
caused for the previous frame on the

2109
02:12:55,618 --> 02:13:01,469
frame after right so it's basically like

2110
02:12:57,389 --> 02:13:03,630
just over time and so the result is we

2111
02:13:01,469 --> 02:13:06,149
get a little bit of lag in the secondary

2112
02:13:03,630 --> 02:13:08,940
bounce tertiary about like the more

2113
02:13:06,149 --> 02:13:13,789
bounces the more lag but we never get

2114
02:13:08,939 --> 02:13:13,789
deep ray decoherence because of that

2115
02:13:16,210 --> 02:13:19,510
that makes sense

2116
02:13:35,908 --> 02:13:39,509
can't sleep uh supposed to leaven you

2117
02:13:37,618 --> 02:13:53,339
something like OB 1 1 1 1

2118
02:13:39,510 --> 02:13:58,439
yeah it can so yeah I never do but they

2119
02:13:53,340 --> 02:14:03,119
introduced a bunch of stuff here it is

2120
02:13:58,439 --> 02:14:06,449
so originally see only had these decimal

2121
02:14:03,118 --> 02:14:08,339
octal and hex this one it looks like it

2122
02:14:06,448 --> 02:14:10,908
says C pus US 14 so it's actually not

2123
02:14:08,340 --> 02:14:14,099
suicidal Evan but looks like cos was 14

2124
02:14:10,908 --> 02:14:16,649
so if you want to rely on the fact that

2125
02:14:14,099 --> 02:14:20,998
you have a modern compiler you can use

2126
02:14:16,649 --> 02:14:26,518
this and then it's just like you know a

2127
02:14:20,998 --> 02:14:29,188
1 101 100 1 1 1 right I don't do that

2128
02:14:26,519 --> 02:14:31,309
because I try to avoid using things in

2129
02:14:29,189 --> 02:14:33,959
the C++ spec especially new things

2130
02:14:31,309 --> 02:14:37,139
because deceive us like is a disaster

2131
02:14:33,958 --> 02:14:39,569
and I want to be able to write my own

2132
02:14:37,139 --> 02:14:41,909
compiler for my code and not have to

2133
02:14:39,569 --> 02:14:45,808
worry about 8 billion stupid C++ spec

2134
02:14:41,908 --> 02:14:48,688
things that are useless anyway so I just

2135
02:14:45,809 --> 02:14:50,070
try to stick with basically C and I find

2136
02:14:48,689 --> 02:14:52,860
that operator overloading is really

2137
02:14:50,069 --> 02:14:57,748
important so I use it just to make the

2138
02:14:52,859 --> 02:15:00,799
code legible in math but I generally

2139
02:14:57,748 --> 02:15:03,149
just don't start using things that are

2140
02:15:00,800 --> 02:15:05,309
adding entire like Lex or things or

2141
02:15:03,149 --> 02:15:07,408
whatever and not that this is heart like

2142
02:15:05,309 --> 02:15:09,719
this is not hard to add to your lecturer

2143
02:15:07,408 --> 02:15:12,058
it's super simple but it's just like I

2144
02:15:09,719 --> 02:15:13,618
don't want to like necessarily Wed

2145
02:15:12,059 --> 02:15:16,469
myself to their notation or any of that

2146
02:15:13,618 --> 02:15:18,509
stuff so I'm just like look C is fine I

2147
02:15:16,469 --> 02:15:20,010
don't see bus plus is just a waste of

2148
02:15:18,510 --> 02:15:22,949
everyone's time doesn't save you time

2149
02:15:20,010 --> 02:15:24,748
it's just a bunch of crap you can learn

2150
02:15:22,948 --> 02:15:27,418
and then your makes your code worse

2151
02:15:24,748 --> 02:15:27,988
right so I just say like no forget about

2152
02:15:27,418 --> 02:15:31,408
it

2153
02:15:27,988 --> 02:15:33,149
C is fine and it keeps the code simple

2154
02:15:31,408 --> 02:15:34,589
so that when you want to go move off to

2155
02:15:33,149 --> 02:15:38,248
some other language which you will want

2156
02:15:34,590 --> 02:15:39,659
to do because C++ is garbage you know

2157
02:15:38,248 --> 02:15:41,130
it's easier to port that code because

2158
02:15:39,658 --> 02:15:43,578
you're not using all this weird C++

2159
02:15:41,130 --> 02:15:43,578
nonsense

2160
02:15:49,010 --> 02:15:53,070
you know I am GUI situation how do you

2161
02:15:51,210 --> 02:15:54,149
create a unique ID for a UI control what

2162
02:15:53,069 --> 02:15:55,889
I don't get is if you draw everything

2163
02:15:54,149 --> 02:15:59,519
immediately if some condition changes

2164
02:15:55,890 --> 02:16:01,980
both ID also change um so if you want to

2165
02:15:59,520 --> 02:16:04,770
use IDs in any API it doesn't matter

2166
02:16:01,979 --> 02:16:06,479
whether it's a.m. or not the rule is

2167
02:16:04,770 --> 02:16:09,690
just you need some way of assigning IDs

2168
02:16:06,479 --> 02:16:12,000
and the point is that the app itself is

2169
02:16:09,689 --> 02:16:13,500
the thing that should assign the IDS it

2170
02:16:12,000 --> 02:16:15,448
doesn't matter how you assign them if

2171
02:16:13,500 --> 02:16:17,189
you want to assign them using allocation

2172
02:16:15,448 --> 02:16:20,099
which makes your thing basically

2173
02:16:17,189 --> 02:16:21,689
retained mode GUI you certainly can just

2174
02:16:20,100 --> 02:16:24,449
don't put that in the library let it

2175
02:16:21,689 --> 02:16:26,729
pass the ID forward usually you can

2176
02:16:24,448 --> 02:16:28,319
though because usually whatever the

2177
02:16:26,729 --> 02:16:30,689
logic is that you use to draw the

2178
02:16:28,319 --> 02:16:33,090
control it's got to go do something like

2179
02:16:30,689 --> 02:16:35,549
modify a particular value or something

2180
02:16:33,090 --> 02:16:37,409
that has a unique ID already and you can

2181
02:16:35,549 --> 02:16:40,859
just use that so usually it's a win

2182
02:16:37,409 --> 02:16:42,329
right I say I mean he wrote gone as

2183
02:16:40,860 --> 02:16:43,620
planned or did you not have any

2184
02:16:42,329 --> 02:16:45,299
expectations or scope when you set off

2185
02:16:43,620 --> 02:16:47,099
on the journey I didn't really have an

2186
02:16:45,299 --> 02:16:50,218
annotation or scope but I was gonna be

2187
02:16:47,099 --> 02:16:52,950
only 2d originally so the main thing we

2188
02:16:50,218 --> 02:16:54,959
did differently was that it's got a full

2189
02:16:52,950 --> 02:16:59,460
3d render with lighting which is a

2190
02:16:54,959 --> 02:17:02,819
pretty big ad but that's the main thing

2191
02:16:59,459 --> 02:17:04,589
we did differently I guess how many

2192
02:17:02,819 --> 02:17:05,869
percent is handmade here are done I

2193
02:17:04,590 --> 02:17:10,139
don't know

2194
02:17:05,870 --> 02:17:12,150
the engines almost finished we basically

2195
02:17:10,138 --> 02:17:13,920
just have some cleanup to do after the

2196
02:17:12,149 --> 02:17:16,199
lighting is done but the engines

2197
02:17:13,920 --> 02:17:19,739
basically finished so it's really just

2198
02:17:16,200 --> 02:17:22,950
the gameplay which will be sort of

2199
02:17:19,739 --> 02:17:24,449
open-ended like how much gameplay we

2200
02:17:22,950 --> 02:17:26,909
want to pack in this thing I don't know

2201
02:17:24,450 --> 02:17:29,099
I'm not really a gameplay person it's

2202
02:17:26,909 --> 02:17:32,939
I'm not a designer so it's not my thing

2203
02:17:29,099 --> 02:17:36,210
so I don't have any concrete like it has

2204
02:17:32,939 --> 02:17:38,569
to be this way stuff so we'll see it's

2205
02:17:36,209 --> 02:17:38,569
unclear

2206
02:17:45,058 --> 02:17:49,629
would you consider removing handmade

2207
02:17:47,109 --> 02:17:51,909
here too ji when it releases probably

2208
02:17:49,629 --> 02:17:53,858
wouldn't necessarily move it to ji if I

2209
02:17:51,909 --> 02:17:55,898
was gonna do J I'd probably want to just

2210
02:17:53,859 --> 02:17:57,700
try something in it first like I

2211
02:17:55,898 --> 02:18:00,129
probably do something new in it first

2212
02:17:57,700 --> 02:18:02,340
right like just a small thing just to

2213
02:18:00,129 --> 02:18:02,339
see

2214
02:18:23,718 --> 02:18:27,619
alright let's go ahead and wrap it up

2215
02:18:41,819 --> 02:18:45,180
all right think you're ready for joining

2216
02:18:44,010 --> 02:18:46,770
me for this sort of handmade hero sort

2217
02:18:45,180 --> 02:18:48,239
of pleasure coating with you as always

2218
02:18:46,770 --> 02:18:50,909
if you would like to follow along with a

2219
02:18:48,239 --> 02:18:52,469
series at home you can always peer to

2220
02:18:50,909 --> 02:18:54,469
the game it comes with a source code so

2221
02:18:52,469 --> 02:18:56,819
you can do your own experiments I

2222
02:18:54,469 --> 02:18:58,649
sketched out what that Katie tree think

2223
02:18:56,819 --> 02:19:01,850
needs to look like so over this next

2224
02:18:58,649 --> 02:19:05,609
week until I'm back next week and to

2225
02:19:01,850 --> 02:19:06,870
work on it I that might be a good thing

2226
02:19:05,610 --> 02:19:08,909
to play with for those of you looking

2227
02:19:06,870 --> 02:19:10,829
for a challenge try to do your own Katie

2228
02:19:08,909 --> 02:19:12,180
tree do some timings on it see if it's

2229
02:19:10,829 --> 02:19:14,760
better does it actually improve our

2230
02:19:12,180 --> 02:19:17,550
performance or doesn't it I think that'd

2231
02:19:14,760 --> 02:19:19,530
be a great thing to practice on right so

2232
02:19:17,550 --> 02:19:20,399
give that a shot for those of you are

2233
02:19:19,530 --> 02:19:21,570
interested we're also doing a

2234
02:19:20,399 --> 02:19:23,430
Kickstarter right now at Molly rocket

2235
02:19:21,569 --> 02:19:25,440
for our comic we're doing a print run of

2236
02:19:23,430 --> 02:19:26,700
it it's gonna be pretty cool so if you

2237
02:19:25,440 --> 02:19:28,319
want to check that out the banners at

2238
02:19:26,700 --> 02:19:29,640
the top the handmade hero art page as

2239
02:19:28,319 --> 02:19:31,800
well so you just click on that it's got

2240
02:19:29,639 --> 02:19:33,629
all the information there that's it for

2241
02:19:31,800 --> 02:19:35,159
today I'll be back here next week when

2242
02:19:33,629 --> 02:19:37,139
I'll take a look at implementing that KD

2243
02:19:35,159 --> 02:19:39,600
tree stuff as the way that we sort of

2244
02:19:37,139 --> 02:19:43,500
worked it out today and we'll go from

2245
02:19:39,600 --> 02:19:47,309
there I will probably now switch over to

2246
02:19:43,500 --> 02:19:48,270
my streaming machine to see if John is

2247
02:19:47,309 --> 02:19:51,000
streaming he's been streaming a lot

2248
02:19:48,270 --> 02:19:57,360
lately and we will go dump everyone into

2249
02:19:51,000 --> 02:19:59,729
his into his stream if if he is on again

2250
02:19:57,360 --> 02:20:07,761
which I don't know if he is so I'm gonna

2251
02:19:59,729 --> 02:20:17,789
go check and see if he is a rage channel

2252
02:20:07,761 --> 02:20:20,880
naysayer 88 unfortunately not so I guess

2253
02:20:17,790 --> 02:20:23,040
we won't be so that's it for today then

2254
02:20:20,879 --> 02:20:27,000
you'll have to find your own stream to

2255
02:20:23,040 --> 02:20:28,051
go to now so until next time a fun

2256
02:20:27,000 --> 02:20:31,101
program run and I'll see you on the

2257
02:20:28,050 --> 02:20:31,100
Internet pinkies everybody

