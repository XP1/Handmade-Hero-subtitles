1
00:00:05,330 --> 00:00:10,379
alright hello everyone and welcome to an

2
00:00:08,009 --> 00:00:13,830
episode actually of handmade ray we are

3
00:00:10,380 --> 00:00:15,870
trying to test using 1080p60 today I'll

4
00:00:13,830 --> 00:00:17,969
blog it's really 1080p30 today but it's

5
00:00:15,869 --> 00:00:20,730
the 1080p part we had had trouble with

6
00:00:17,969 --> 00:00:22,410
1080 before it was only capturing in

7
00:00:20,730 --> 00:00:25,320
1080i and we'd been whining for it with

8
00:00:22,410 --> 00:00:27,060
those was going out that I went over the

9
00:00:25,320 --> 00:00:30,000
settings and stuff and went around with

10
00:00:27,059 --> 00:00:32,189
black magic on this a few times it turns

11
00:00:30,000 --> 00:00:35,159
out the card was bad I've switched to a

12
00:00:32,189 --> 00:00:39,000
different one of the same card just a

13
00:00:35,159 --> 00:00:40,949
different card and now we have 1080p 60

14
00:00:39,000 --> 00:00:44,850
capture which means 1080p I'm sorry

15
00:00:40,950 --> 00:00:46,739
1080p 30 streaming should be working

16
00:00:44,850 --> 00:00:48,210
because it should be capturing in 1080p

17
00:00:46,738 --> 00:00:51,689
and then just streaming every other

18
00:00:48,210 --> 00:00:52,920
frame so hopefully that's okay we're

19
00:00:51,689 --> 00:00:53,939
testing it today I'm not doing an actual

20
00:00:52,920 --> 00:00:57,510
episode of handmade error because I

21
00:00:53,939 --> 00:00:59,339
don't want to risk losing one with an

22
00:00:57,509 --> 00:01:01,469
untrusted sort of streaming setup so

23
00:00:59,340 --> 00:01:03,359
here we go we're just gonna be doing

24
00:01:01,469 --> 00:01:04,920
some random handmade ray programming as

25
00:01:03,359 --> 00:01:06,450
you know handmade ray is our little ray

26
00:01:04,920 --> 00:01:08,790
tracer I've built one time it's what we

27
00:01:06,450 --> 00:01:11,280
use when we're testing people had

28
00:01:08,790 --> 00:01:15,360
requested a long time ago that I build a

29
00:01:11,280 --> 00:01:17,219
ray tracer and so I did and you know

30
00:01:15,359 --> 00:01:19,469
we've got it to the point where it's

31
00:01:17,219 --> 00:01:22,109
actually relatively functional it just

32
00:01:19,469 --> 00:01:23,879
doesn't have a couple of things that we

33
00:01:22,109 --> 00:01:25,170
would probably want to do if you were

34
00:01:23,879 --> 00:01:27,359
really playing around the Ray tracer and

35
00:01:25,170 --> 00:01:29,310
so we can add another one of those today

36
00:01:27,359 --> 00:01:31,560
so here it is it's it's handmade right

37
00:01:29,310 --> 00:01:34,320
here I'm going to open up for coder and

38
00:01:31,560 --> 00:01:38,430
I'm going to go ahead and load the

39
00:01:34,319 --> 00:01:40,679
project file for that and build it and

40
00:01:38,430 --> 00:01:41,850
you can see that if we take a look at

41
00:01:40,680 --> 00:01:46,290
the build up bat we were actually

42
00:01:41,849 --> 00:01:48,750
building this in optimized mode and that

43
00:01:46,290 --> 00:01:50,880
makes sense right because in optimized

44
00:01:48,750 --> 00:01:53,489
mode we get a lot better performance and

45
00:01:50,879 --> 00:01:55,589
this is a performance oriented thing so

46
00:01:53,489 --> 00:01:57,209
it makes sense that we want to mostly

47
00:01:55,590 --> 00:01:58,618
compile in OH - when we're actually

48
00:01:57,209 --> 00:02:01,379
running it because otherwise we'd be

49
00:01:58,618 --> 00:02:04,709
sitting around waiting a lot longer for

50
00:02:01,379 --> 00:02:06,718
it to produce images now in the build up

51
00:02:04,709 --> 00:02:09,868
bat it automatically runs the ray tracer

52
00:02:06,718 --> 00:02:11,519
as well we may want to change that while

53
00:02:09,868 --> 00:02:12,449
we're doing some active development cuz

54
00:02:11,520 --> 00:02:14,300
we may want to

55
00:02:12,449 --> 00:02:16,769
in the debugger or who knows what else

56
00:02:14,300 --> 00:02:18,780
but at the moment I'll let that go ahead

57
00:02:16,770 --> 00:02:21,239
and do it so what happens here is when

58
00:02:18,780 --> 00:02:21,989
we run it it's programmed to dump the

59
00:02:21,239 --> 00:02:24,480
output

60
00:02:21,989 --> 00:02:26,550
I believe into the data directory and

61
00:02:24,479 --> 00:02:29,068
you can see we've got sort of our images

62
00:02:26,550 --> 00:02:30,840
here and it's right now set up just to

63
00:02:29,068 --> 00:02:31,889
produce this one image it's not

64
00:02:30,840 --> 00:02:33,209
particularly interesting image at some

65
00:02:31,889 --> 00:02:37,259
point we should probably try to make an

66
00:02:33,209 --> 00:02:39,150
image it's better and maybe we'll do

67
00:02:37,259 --> 00:02:41,340
that a little later today but basically

68
00:02:39,150 --> 00:02:44,280
here is a you know it's a pretty finely

69
00:02:41,340 --> 00:02:45,509
detailed image as you can kind of see if

70
00:02:44,280 --> 00:02:48,120
I go ahead and zoom in on this a little

71
00:02:45,509 --> 00:02:50,969
bit here I don't know if I where's the

72
00:02:48,120 --> 00:02:52,650
zoom view actual size there we go

73
00:02:50,969 --> 00:02:54,419
you can see that it's pretty smooth now

74
00:02:52,650 --> 00:02:58,200
too with that many samples we get pretty

75
00:02:54,419 --> 00:03:00,568
smooth output and so on but you know it

76
00:02:58,199 --> 00:03:02,339
still takes a fairly long amount of time

77
00:03:00,568 --> 00:03:04,829
to do a really smooth rendering with it

78
00:03:02,340 --> 00:03:07,500
even though we're multi-threaded now and

79
00:03:04,830 --> 00:03:10,920
I believe we actually print out here you

80
00:03:07,500 --> 00:03:12,629
can see we print out how long it takes

81
00:03:10,919 --> 00:03:15,119
to actually do something that image

82
00:03:12,629 --> 00:03:16,709
takes about 46 seconds at a really

83
00:03:15,120 --> 00:03:18,840
really high sampling rate now you can do

84
00:03:16,709 --> 00:03:21,390
much quicker by just lowering the

85
00:03:18,840 --> 00:03:24,180
sampling rate quite a bit but I actually

86
00:03:21,389 --> 00:03:26,548
want to leave that sampling rate pretty

87
00:03:24,180 --> 00:03:28,590
high because what I'd like to do today

88
00:03:26,549 --> 00:03:31,200
is maybe work on a little bit more

89
00:03:28,590 --> 00:03:32,640
performance optimization just do we have

90
00:03:31,199 --> 00:03:35,759
a pretty solid understanding of how

91
00:03:32,639 --> 00:03:37,759
we're doing our performance and just

92
00:03:35,759 --> 00:03:41,280
generally what's going on with it right

93
00:03:37,759 --> 00:03:42,659
okay so if we switch back to the code

94
00:03:41,280 --> 00:03:43,709
you can kind of see here how it works

95
00:03:42,659 --> 00:03:46,979
that's pretty straightforward

96
00:03:43,709 --> 00:03:49,920
really all we do is we create a bunch of

97
00:03:46,979 --> 00:03:52,828
tiles that are sort of tiling the image

98
00:03:49,919 --> 00:03:55,589
and we put them into basically a you

99
00:03:52,829 --> 00:03:57,030
know a queue and then we have a worker

100
00:03:55,590 --> 00:03:59,129
threads that come through and take those

101
00:03:57,030 --> 00:04:00,689
tiles out of the queue and they run this

102
00:03:59,129 --> 00:04:02,669
function that's all they do right they

103
00:04:00,689 --> 00:04:05,639
just take this function they go through

104
00:04:02,669 --> 00:04:07,768
look they say I'm gonna take a work

105
00:04:05,639 --> 00:04:09,328
order out of the queue this work road is

106
00:04:07,769 --> 00:04:12,359
just a tile it says where I should

107
00:04:09,329 --> 00:04:14,340
render I loop through and I do however

108
00:04:12,359 --> 00:04:16,709
many rays per pixel I've been told to do

109
00:04:14,340 --> 00:04:20,819
by the configuration settings which it

110
00:04:16,709 --> 00:04:23,639
like it says a Puritan and 1024 Ray's

111
00:04:20,819 --> 00:04:25,918
for pixel and you can see here the 64 by

112
00:04:23,639 --> 00:04:26,699
64 tiles obviously we sort of played

113
00:04:25,918 --> 00:04:28,409
around with that see

114
00:04:26,699 --> 00:04:29,879
which tile setting would be the best I

115
00:04:28,410 --> 00:04:32,250
think that was roughly where the

116
00:04:29,879 --> 00:04:34,199
breaking point was and so you know

117
00:04:32,250 --> 00:04:35,910
that's all this really does and if you

118
00:04:34,199 --> 00:04:37,170
take a look here at what we're doing I'm

119
00:04:35,910 --> 00:04:41,189
gonna move it to the other screen so

120
00:04:37,170 --> 00:04:42,860
that's not where my my head is there if

121
00:04:41,189 --> 00:04:45,389
you take a look at what's going on here

122
00:04:42,860 --> 00:04:48,090
we're just sort of looping over all of

123
00:04:45,389 --> 00:04:50,310
the pixels and for every pixel we're

124
00:04:48,089 --> 00:04:53,429
doing a bunch of ray tests here where we

125
00:04:50,310 --> 00:04:55,319
just take the Ray index and we you know

126
00:04:53,430 --> 00:04:57,480
loop over the race for pixel pick a

127
00:04:55,319 --> 00:05:00,870
location in the pixel to cast array from

128
00:04:57,480 --> 00:05:03,689
cast array out see what we hit and if we

129
00:05:00,870 --> 00:05:06,540
hit anything that's an actual surface we

130
00:05:03,689 --> 00:05:09,240
just keep bouncing around right and

131
00:05:06,540 --> 00:05:11,640
that's really all we do that's it we

132
00:05:09,240 --> 00:05:13,530
don't have anything else and right now

133
00:05:11,639 --> 00:05:15,629
we only really have two primitive types

134
00:05:13,529 --> 00:05:16,979
as well you could see us looping over

135
00:05:15,629 --> 00:05:19,500
them here there's the planes there's the

136
00:05:16,980 --> 00:05:25,110
spheres and that's that's it that's all

137
00:05:19,500 --> 00:05:27,949
we're doing so there's kind of two areas

138
00:05:25,110 --> 00:05:31,470
of optimization we can look into here

139
00:05:27,949 --> 00:05:35,670
one of them I think we don't really have

140
00:05:31,470 --> 00:05:37,230
any real reason to go into yet and that

141
00:05:35,670 --> 00:05:39,180
is the bounding volume hierarchy a

142
00:05:37,230 --> 00:05:40,770
bounding volume Harkey is something that

143
00:05:39,180 --> 00:05:42,900
allows us to not test every primitive

144
00:05:40,769 --> 00:05:44,250
every time you can see here we're

145
00:05:42,899 --> 00:05:47,310
testing every plane in every sphere

146
00:05:44,250 --> 00:05:49,620
every time we do array and that's

147
00:05:47,310 --> 00:05:51,420
actually absolutely fine if the number

148
00:05:49,620 --> 00:05:53,490
of primitives is very low because

149
00:05:51,420 --> 00:05:55,410
anything we introduced that would be a

150
00:05:53,490 --> 00:05:58,079
bounding volume hierarchy here if the

151
00:05:55,410 --> 00:05:59,490
number of primitives is very low we're

152
00:05:58,079 --> 00:06:01,259
actually just gonna slow the radars are

153
00:05:59,490 --> 00:06:03,449
down because it has to do work to

154
00:06:01,259 --> 00:06:05,459
traverse the bounding hierarchy and the

155
00:06:03,449 --> 00:06:07,740
only time that becomes work worth doing

156
00:06:05,459 --> 00:06:09,750
is when we have you know hundred

157
00:06:07,740 --> 00:06:12,150
elements or something two thousand

158
00:06:09,750 --> 00:06:13,500
elements ten thousand elements starting

159
00:06:12,149 --> 00:06:16,229
to push that element count up high

160
00:06:13,500 --> 00:06:17,910
enough that the work done to partition

161
00:06:16,230 --> 00:06:19,530
them into a bounding volume Harkey and

162
00:06:17,910 --> 00:06:22,650
Traverse that bounding high volume

163
00:06:19,529 --> 00:06:24,779
hierarchy that that actually becomes a

164
00:06:22,649 --> 00:06:27,299
payoff by eliminating a large number of

165
00:06:24,779 --> 00:06:29,729
primitives from consideration in our

166
00:06:27,300 --> 00:06:31,620
case the amount of time it takes to

167
00:06:29,730 --> 00:06:33,509
consider these primitives is probably so

168
00:06:31,620 --> 00:06:35,699
low that anything we were going to do

169
00:06:33,509 --> 00:06:37,860
with the bounding volume hierarchy is

170
00:06:35,699 --> 00:06:40,709
going to be more work as you can see

171
00:06:37,860 --> 00:06:45,330
here we've only got like five spheres

172
00:06:40,709 --> 00:06:46,859
and one plane right and so when we want

173
00:06:45,329 --> 00:06:49,589
to start creating a more complex scene

174
00:06:46,860 --> 00:06:50,790
of some kind that's the time to start

175
00:06:49,589 --> 00:06:53,189
looking at an optimization for a

176
00:06:50,790 --> 00:06:55,410
bounding volume hierarchy right now we

177
00:06:53,189 --> 00:06:57,719
don't have that and so we really don't

178
00:06:55,410 --> 00:06:59,910
want to be looking at that so what we're

179
00:06:57,720 --> 00:07:01,290
gonna do today is look a little bit more

180
00:06:59,910 --> 00:07:04,439
at perhaps using some better math

181
00:07:01,290 --> 00:07:05,939
operations here and what I'd like to do

182
00:07:04,439 --> 00:07:07,379
first is just take a look at the

183
00:07:05,939 --> 00:07:10,019
assembly code that's actually being

184
00:07:07,379 --> 00:07:12,719
executed to get a feel for exactly how

185
00:07:10,019 --> 00:07:15,000
bad it is even before looking at wide

186
00:07:12,720 --> 00:07:17,310
operations so I'm gonna go ahead and

187
00:07:15,000 --> 00:07:19,079
open up the debugger and I'm gonna load

188
00:07:17,310 --> 00:07:23,990
hand-made right into the bugger so I can

189
00:07:19,079 --> 00:07:26,789
see what that disassembly looks like now

190
00:07:23,990 --> 00:07:29,069
we're opening Visual Studio which itself

191
00:07:26,790 --> 00:07:30,960
takes about as long to open as it does

192
00:07:29,069 --> 00:07:34,290
for our thing to cast like 8 billion

193
00:07:30,959 --> 00:07:36,299
rays that's just you know Microsoft

194
00:07:34,290 --> 00:07:39,120
quality engineering at work I'm gonna go

195
00:07:36,300 --> 00:07:41,550
ahead and open up that that right here

196
00:07:39,120 --> 00:07:43,620
and this is the this is the Wray program

197
00:07:41,550 --> 00:07:45,629
itself what I'm gonna do is I'm going to

198
00:07:43,620 --> 00:07:47,519
step into that render tile function and

199
00:07:45,629 --> 00:07:51,060
I'm going to just take a look roughly at

200
00:07:47,519 --> 00:07:52,379
what the loop this loop here which is

201
00:07:51,060 --> 00:07:55,680
our most expensive loop right it's

202
00:07:52,379 --> 00:07:58,019
getting executed 1,024 times tremendous

203
00:07:55,680 --> 00:08:00,030
number of times every pixel right so

204
00:07:58,019 --> 00:08:03,209
this is this is the real hotspot here

205
00:08:00,029 --> 00:08:06,689
it's doing just most of the work and so

206
00:08:03,209 --> 00:08:08,819
this is the part of the program where we

207
00:08:06,689 --> 00:08:11,160
really need to find out what's going on

208
00:08:08,819 --> 00:08:12,899
and how to make it faster and so again

209
00:08:11,160 --> 00:08:15,090
before I start anything else out I just

210
00:08:12,899 --> 00:08:17,819
want to get some sense of what's going

211
00:08:15,089 --> 00:08:19,889
on right so we can see a number of

212
00:08:17,819 --> 00:08:22,170
things right off the bat that I really

213
00:08:19,889 --> 00:08:23,579
don't like like all I've done is even

214
00:08:22,170 --> 00:08:25,920
just flip the disassembly and already

215
00:08:23,579 --> 00:08:30,089
we're in trouble you can see here that

216
00:08:25,920 --> 00:08:33,029
when we are trying to produce our random

217
00:08:30,089 --> 00:08:35,250
sort of location inside the pixel to

218
00:08:33,029 --> 00:08:37,589
cast array from rather than in lining

219
00:08:35,250 --> 00:08:40,139
something convenient for generating a

220
00:08:37,590 --> 00:08:42,629
random number we are actually doing a

221
00:08:40,139 --> 00:08:44,250
literal call out to Rand and I really

222
00:08:42,629 --> 00:08:46,710
don't like a literal call out to ran

223
00:08:44,250 --> 00:08:48,120
because as you can see well I guess you

224
00:08:46,710 --> 00:08:49,560
can't see because apparently the C

225
00:08:48,120 --> 00:08:53,519
runtime library source code isn't

226
00:08:49,559 --> 00:08:54,599
installed on this machine but I don't

227
00:08:53,519 --> 00:08:57,659
really care because I don't need it

228
00:08:54,600 --> 00:08:59,940
there we go so anyway as you can see

229
00:08:57,659 --> 00:09:03,480
here the source code to this actually

230
00:08:59,940 --> 00:09:05,790
involves a lot of business I jumped into

231
00:09:03,480 --> 00:09:09,269
the call here we're now calling to some

232
00:09:05,789 --> 00:09:11,789
kind of a CRT internal function I don't

233
00:09:09,269 --> 00:09:14,100
care about this to receive porifera data

234
00:09:11,789 --> 00:09:16,409
this is the per thread data because I

235
00:09:14,100 --> 00:09:19,829
assume it wants the s Rand ran sequence

236
00:09:16,409 --> 00:09:22,799
to be maintained differently for every

237
00:09:19,828 --> 00:09:25,500
thread right so here we go we're calling

238
00:09:22,799 --> 00:09:27,419
into all this stuff look I mean look at

239
00:09:25,500 --> 00:09:29,399
how many look at how many calls we are

240
00:09:27,419 --> 00:09:31,588
deep we haven't even done any work to

241
00:09:29,399 --> 00:09:34,198
generate a random number yet look and

242
00:09:31,589 --> 00:09:36,420
look at where I am right I mean look at

243
00:09:34,198 --> 00:09:37,769
this is the disaster we can't be having

244
00:09:36,419 --> 00:09:39,778
this kind of thing happen in our inner

245
00:09:37,769 --> 00:09:44,578
loop it's absolutely unconscionable and

246
00:09:39,778 --> 00:09:46,289
completely unacceptable so you know why

247
00:09:44,578 --> 00:09:47,698
this is people always ask me why I don't

248
00:09:46,289 --> 00:09:50,219
like using the C runtime library this is

249
00:09:47,698 --> 00:09:52,889
why most of the functions don't do what

250
00:09:50,220 --> 00:09:54,060
I need them to do right not a knock on

251
00:09:52,889 --> 00:09:55,440
the people who imprint to the library

252
00:09:54,059 --> 00:09:57,028
maybe that that was how it had to be

253
00:09:55,440 --> 00:09:59,189
implanted for the spec or who knows what

254
00:09:57,028 --> 00:10:01,409
but for our purposes that's already

255
00:09:59,188 --> 00:10:05,250
totally unacceptable so let me go ahead

256
00:10:01,409 --> 00:10:10,708
and let's start a little to-do list here

257
00:10:05,250 --> 00:10:13,909
so I know exactly what's going on that

258
00:10:10,708 --> 00:10:13,909
we found that we have to replace

259
00:10:21,450 --> 00:10:25,150
so we definitely want to do that we

260
00:10:23,740 --> 00:10:28,500
definitely want to switch to a custom

261
00:10:25,149 --> 00:10:28,500
brand there's no question about that

262
00:10:28,629 --> 00:10:34,179
let's go through and and take a look at

263
00:10:30,850 --> 00:10:37,360
what happens after that I'm gonna go

264
00:10:34,179 --> 00:10:39,969
ahead and do a go to disassembly here so

265
00:10:37,360 --> 00:10:41,289
so that's unacceptable and we need to

266
00:10:39,970 --> 00:10:42,430
make sure that doesn't happen let's see

267
00:10:41,289 --> 00:10:45,549
what other sorts of things we're doing

268
00:10:42,429 --> 00:10:47,439
here a lot of these are single they're

269
00:10:45,549 --> 00:10:49,059
there Cindy instructions the SSE

270
00:10:47,440 --> 00:10:51,700
instructions but they're not actually

271
00:10:49,059 --> 00:10:54,159
using the full width right this is still

272
00:10:51,700 --> 00:10:55,390
doing single scalar at a time which is

273
00:10:54,159 --> 00:10:57,309
fine that's what we expect it to be

274
00:10:55,389 --> 00:10:58,720
doing these all look like reasonable

275
00:10:57,309 --> 00:10:59,979
instructions for what it's supposed to

276
00:10:58,720 --> 00:11:03,070
be doing I don't have a problem with any

277
00:10:59,980 --> 00:11:04,870
of that we do of course have a few

278
00:11:03,070 --> 00:11:08,770
issues like I was saying before where we

279
00:11:04,870 --> 00:11:10,330
want to we want to do wide on these

280
00:11:08,769 --> 00:11:12,399
probably eventually but that's sort of a

281
00:11:10,330 --> 00:11:13,480
separate thing that what I'm looking at

282
00:11:12,399 --> 00:11:16,629
right now I just want to look at any

283
00:11:13,480 --> 00:11:19,330
stupidity that's going on first all

284
00:11:16,629 --> 00:11:23,169
right so you can see here we've got just

285
00:11:19,330 --> 00:11:24,850
our sort of our basic bounce code

286
00:11:23,169 --> 00:11:26,769
looking here use the test and make sure

287
00:11:24,850 --> 00:11:29,649
we exit the loop everything looks you

288
00:11:26,769 --> 00:11:31,838
know at a first glance fine there you

289
00:11:29,649 --> 00:11:33,990
can just really straightforward stuff

290
00:11:31,839 --> 00:11:38,890
happening here nothing weird accessing

291
00:11:33,990 --> 00:11:41,649
these these primitives and doing tests

292
00:11:38,889 --> 00:11:42,539
against them all of this looks pretty

293
00:11:41,649 --> 00:11:47,588
good

294
00:11:42,539 --> 00:11:49,299
nothing nothing too problematic I'm

295
00:11:47,589 --> 00:11:54,580
still happy with basically everything

296
00:11:49,299 --> 00:11:55,870
that I'm seeing here and these are these

297
00:11:54,580 --> 00:11:58,000
are the plane intersections we don't

298
00:11:55,870 --> 00:12:01,350
have many of these anyway we have very

299
00:11:58,000 --> 00:12:01,350
few planes in the world at the moment

300
00:12:03,480 --> 00:12:07,120
yes so I don't know if some of this

301
00:12:05,649 --> 00:12:09,490
stuff could be done better I'd have to

302
00:12:07,120 --> 00:12:11,259
go ahead and look at it in more detail

303
00:12:09,490 --> 00:12:14,169
but I don't see like I'm just looking

304
00:12:11,259 --> 00:12:16,480
for obvious real bad situations and I'm

305
00:12:14,169 --> 00:12:19,110
not seeing anything too problematic here

306
00:12:16,480 --> 00:12:19,110
mm-hmm

307
00:12:19,139 --> 00:12:24,129
it seems to have I think it may have

308
00:12:21,580 --> 00:12:26,410
unrolled this loop a few times I'm not

309
00:12:24,129 --> 00:12:28,689
sure it looks like it did you can see

310
00:12:26,409 --> 00:12:30,429
we're seeing the same thing multiple

311
00:12:28,690 --> 00:12:34,720
times Syria like for example right like

312
00:12:30,429 --> 00:12:36,578
here is some of the plane equation stuff

313
00:12:34,720 --> 00:12:38,170
and here it is again I don't know if it

314
00:12:36,578 --> 00:12:40,479
just reordered it I'm not sure exactly

315
00:12:38,169 --> 00:12:41,769
what it did there I'm trying to find the

316
00:12:40,480 --> 00:12:50,220
sphere of stuff here's the serious stuff

317
00:12:41,769 --> 00:12:52,750
here again looks pretty good let's see

318
00:12:50,220 --> 00:12:54,819
it in lined the square root which is

319
00:12:52,750 --> 00:12:56,559
great that's really good because we

320
00:12:54,818 --> 00:12:56,919
don't want it to I don't know what that

321
00:12:56,559 --> 00:13:00,518
did

322
00:12:56,919 --> 00:13:04,838
what is that button I don't know what a

323
00:13:00,519 --> 00:13:06,730
lot of these new visual studio features

324
00:13:04,839 --> 00:13:10,170
are okay I've never seen this button

325
00:13:06,730 --> 00:13:18,550
before I don't know what it does anyway

326
00:13:10,169 --> 00:13:20,588
so that all looks pretty good so really

327
00:13:18,549 --> 00:13:23,109
I mean besides the fact that we want to

328
00:13:20,589 --> 00:13:24,670
do this wide I'm really just not seeing

329
00:13:23,110 --> 00:13:26,740
too much stupid here so the compiler I

330
00:13:24,669 --> 00:13:31,958
feel like did a pretty good job of a

331
00:13:26,740 --> 00:13:33,730
first pass attempt at making this stuff

332
00:13:31,958 --> 00:13:36,578
work and it looks like really our

333
00:13:33,730 --> 00:13:38,528
biggest culprit in terms of stupid

334
00:13:36,578 --> 00:13:40,659
things we want to really get rid of are

335
00:13:38,528 --> 00:13:43,139
just these r and calls here and that's

336
00:13:40,659 --> 00:13:54,789
fine because we can totally do that

337
00:13:43,139 --> 00:13:57,399
mm-hmm that is not a huge problem now

338
00:13:54,789 --> 00:14:00,068
here we've got our power call that's

339
00:13:57,399 --> 00:14:02,620
gonna do again that's an unnecessary

340
00:14:00,068 --> 00:14:07,088
call we would rather have it do just the

341
00:14:02,620 --> 00:14:10,120
inline sort of expansion serious mansion

342
00:14:07,089 --> 00:14:13,089
to compute power but you know it's

343
00:14:10,120 --> 00:14:16,990
actually okay because that's really at

344
00:14:13,089 --> 00:14:18,639
the very end right that's the end of the

345
00:14:16,990 --> 00:14:21,220
loop there and that's gonna get called

346
00:14:18,639 --> 00:14:24,159
almost never so if we take a look back

347
00:14:21,220 --> 00:14:28,420
for example at where that POW F is being

348
00:14:24,159 --> 00:14:30,100
called there it's in this extract linear

349
00:14:28,419 --> 00:14:34,599
- srgb

350
00:14:30,100 --> 00:14:39,189
and and that sort of stuff let me go

351
00:14:34,600 --> 00:14:41,920
ahead and here you can see here real

352
00:14:39,188 --> 00:14:44,708
srgb color or whatever and then we have

353
00:14:41,919 --> 00:14:47,740
a typo this right here

354
00:14:44,708 --> 00:14:48,519
extract literature linear - srgb

355
00:14:47,740 --> 00:14:50,289
this is

356
00:14:48,519 --> 00:14:53,379
only happening when we finally go to

357
00:14:50,289 --> 00:14:55,779
write out a pixel to the to the BMP so

358
00:14:53,379 --> 00:14:58,600
although that isn't a necessary call and

359
00:14:55,779 --> 00:15:02,529
if that were in the fast path like in

360
00:14:58,600 --> 00:15:03,639
the in the I should say the hot path we

361
00:15:02,529 --> 00:15:05,169
would want to get rid of it I don't

362
00:15:03,639 --> 00:15:07,059
think we have to in this case because

363
00:15:05,169 --> 00:15:08,649
it's you know it's doing ten on ten

364
00:15:07,059 --> 00:15:10,179
thousand twenty four of these loops

365
00:15:08,649 --> 00:15:12,399
before it ever has to execute one of

366
00:15:10,179 --> 00:15:15,609
these this is probably just never gonna

367
00:15:12,399 --> 00:15:17,980
amount to any appreciable difference in

368
00:15:15,610 --> 00:15:20,110
speed for us so it looks like our first

369
00:15:17,980 --> 00:15:21,340
big culprit is ran so before we do

370
00:15:20,110 --> 00:15:24,370
anything else I'm gonna go ahead and

371
00:15:21,340 --> 00:15:27,280
replace rant with something more sane

372
00:15:24,370 --> 00:15:28,720
than Rand now that's a little bit tricky

373
00:15:27,279 --> 00:15:33,279
because you have to know some number

374
00:15:28,720 --> 00:15:34,509
three to do it and I don't but the good

375
00:15:33,279 --> 00:15:36,339
news is there's a lot of people who've

376
00:15:34,509 --> 00:15:39,039
written on this and we can find them now

377
00:15:36,340 --> 00:15:44,110
I we do have sort of a little bit of AI

378
00:15:39,039 --> 00:15:55,179
dilemma here and I'll show you what it

379
00:15:44,110 --> 00:15:58,690
is so I rather like this random number

380
00:15:55,179 --> 00:16:01,689
generator it's made by a person named

381
00:15:58,690 --> 00:16:05,230
Melissa O'Neil I believe yeah she is a

382
00:16:01,690 --> 00:16:07,210
professor at Harvey Mudd University who

383
00:16:05,230 --> 00:16:09,730
I don't think even works on random

384
00:16:07,210 --> 00:16:12,160
numbers or anything like that as part of

385
00:16:09,730 --> 00:16:15,190
her research topic but I think she like

386
00:16:12,159 --> 00:16:17,889
many people who like things to be done

387
00:16:15,190 --> 00:16:20,800
well I kind of got the sense from

388
00:16:17,889 --> 00:16:22,210
reading the paper like I don't really

389
00:16:20,799 --> 00:16:23,799
remember the specifics of the whole

390
00:16:22,210 --> 00:16:26,410
paper but I kind of got the sense when I

391
00:16:23,799 --> 00:16:28,240
was reading it that maybe she needed to

392
00:16:26,409 --> 00:16:31,360
use random numbers for something she was

393
00:16:28,240 --> 00:16:33,669
doing and was kind of unhappy with the

394
00:16:31,360 --> 00:16:35,080
state of how things were and look

395
00:16:33,669 --> 00:16:37,809
decided to look into it and ended up

396
00:16:35,080 --> 00:16:40,629
finding some really good stuff now if we

397
00:16:37,809 --> 00:16:44,019
take a look at this paper as soon as I

398
00:16:40,629 --> 00:16:45,519
find it here there it is paper if we

399
00:16:44,019 --> 00:16:47,019
take a look at this paper it's a really

400
00:16:45,519 --> 00:16:48,730
easy paper to read and I highly

401
00:16:47,019 --> 00:16:50,949
recommend everyone read it it's written

402
00:16:48,730 --> 00:16:54,039
very well it's not one of these math

403
00:16:50,950 --> 00:16:55,390
papers that you have to have a degree in

404
00:16:54,039 --> 00:16:57,519
mathematics to read anyway

405
00:16:55,389 --> 00:16:59,769
it's actually written in plain English

406
00:16:57,519 --> 00:17:01,329
and designed for people who don't

407
00:16:59,769 --> 00:17:02,289
necessarily already know what she's

408
00:17:01,330 --> 00:17:04,298
talking about too

409
00:17:02,289 --> 00:17:05,798
eventually understand it which is great

410
00:17:04,298 --> 00:17:07,660
there may be some sections where she's

411
00:17:05,798 --> 00:17:09,490
talking about things that are harder for

412
00:17:07,660 --> 00:17:11,110
you to understand because you're not in

413
00:17:09,490 --> 00:17:12,818
the field or whatever but you know most

414
00:17:11,109 --> 00:17:14,048
of the parts that you care about in here

415
00:17:12,818 --> 00:17:17,019
it's a long paper it's very well

416
00:17:14,048 --> 00:17:19,959
explained are actually really easy to

417
00:17:17,019 --> 00:17:22,029
read and and I it's a it's a great first

418
00:17:19,959 --> 00:17:24,548
paper on random numbers anyway you could

419
00:17:22,029 --> 00:17:25,928
you could just start here and and be

420
00:17:24,548 --> 00:17:27,129
pretty happy with it so I highly

421
00:17:25,929 --> 00:17:29,769
recommend reading this now the thing

422
00:17:27,130 --> 00:17:31,660
that I was gonna say is these are the

423
00:17:29,769 --> 00:17:34,900
kinds of random number generators that I

424
00:17:31,660 --> 00:17:37,779
like the most currently because they're

425
00:17:34,900 --> 00:17:41,830
awesome for basically everything except

426
00:17:37,779 --> 00:17:43,329
for one thing which is that in SSE

427
00:17:41,829 --> 00:17:46,899
instructions are not the best

428
00:17:43,329 --> 00:17:50,710
instruction set to implement them so if

429
00:17:46,900 --> 00:17:53,080
we were just doing single if we weren't

430
00:17:50,710 --> 00:17:55,150
planning on doing SSE optimization I

431
00:17:53,079 --> 00:17:57,730
would say we would absolutely want to

432
00:17:55,150 --> 00:17:59,798
use these they I can't think of any

433
00:17:57,730 --> 00:18:02,200
reason why you wouldn't immediately use

434
00:17:59,798 --> 00:18:04,839
these because we are using Cindy I've

435
00:18:02,200 --> 00:18:08,319
never really so far I haven't looked

436
00:18:04,839 --> 00:18:10,689
into what the better way to go is like

437
00:18:08,319 --> 00:18:13,048
whether you can adapt these at all in a

438
00:18:10,690 --> 00:18:15,159
good way to sim be that it still has

439
00:18:13,048 --> 00:18:16,599
what needs to happen in them I don't

440
00:18:15,159 --> 00:18:21,549
know but let me go ahead and scroll to

441
00:18:16,599 --> 00:18:27,668
the part that I'm most caring about here

442
00:18:21,548 --> 00:18:30,849
so I can show you yeah okay um so here

443
00:18:27,669 --> 00:18:33,580
is the the problem if you take a look at

444
00:18:30,849 --> 00:18:37,240
how these often work this tends to be

445
00:18:33,579 --> 00:18:40,779
the this tends to be the sort of

446
00:18:37,240 --> 00:18:42,490
structure that these take and the idea

447
00:18:40,779 --> 00:18:44,829
here behind these random number

448
00:18:42,490 --> 00:18:46,029
generators that I you know like I said I

449
00:18:44,829 --> 00:18:47,439
highly recommend reading the paper

450
00:18:46,029 --> 00:18:49,389
because I'm handmade ray we don't go

451
00:18:47,440 --> 00:18:52,620
into detail a lot on all of the topics

452
00:18:49,390 --> 00:18:52,620
like we do on handmade Hira but

453
00:18:53,069 --> 00:18:57,129
basically what she found what she was

454
00:18:54,909 --> 00:18:58,960
looking at these things was that linear

455
00:18:57,130 --> 00:19:02,169
congruential generators which is just a

456
00:18:58,960 --> 00:19:04,450
very fancy word for adding you know

457
00:19:02,169 --> 00:19:08,860
multiplying adding and modding things

458
00:19:04,450 --> 00:19:09,870
you can see let me see here I can show

459
00:19:08,859 --> 00:19:13,829
you

460
00:19:09,869 --> 00:19:16,148
sorry not money adding and multiplying

461
00:19:13,829 --> 00:19:18,668
usually modding as well but here

462
00:19:16,148 --> 00:19:20,319
so it's basically something that just

463
00:19:18,669 --> 00:19:22,389
looks like this it's like you're gonna

464
00:19:20,319 --> 00:19:24,158
generate a new number by multiplying the

465
00:19:22,388 --> 00:19:26,488
old number by something adding something

466
00:19:24,159 --> 00:19:29,499
and then modding by something else right

467
00:19:26,489 --> 00:19:31,058
that is generally what these look like

468
00:19:29,499 --> 00:19:35,019
they're called linear congruential

469
00:19:31,058 --> 00:19:37,808
generators and they typically are what's

470
00:19:35,019 --> 00:19:39,190
used in a very simple and quick random

471
00:19:37,808 --> 00:19:41,408
number generator because as you can see

472
00:19:39,190 --> 00:19:42,969
they're very straightforward this part

473
00:19:41,409 --> 00:19:44,799
the mod part if you're trying to be

474
00:19:42,969 --> 00:19:46,330
extremely fast is often replaced by

475
00:19:44,798 --> 00:19:48,489
something that's not even a modulus

476
00:19:46,329 --> 00:19:50,468
maybe you just do a modulus by a power

477
00:19:48,489 --> 00:19:51,969
of two so you can use an and instruction

478
00:19:50,469 --> 00:19:53,469
for example and then you're just talking

479
00:19:51,969 --> 00:19:54,879
about a multiply and add in an and and

480
00:19:53,469 --> 00:19:56,979
that's a very fast way to generate a

481
00:19:54,878 --> 00:19:58,718
random number problem is they generate

482
00:19:56,979 --> 00:20:01,028
really poor random numbers that's why

483
00:19:58,719 --> 00:20:03,659
people don't usually use them and what

484
00:20:01,028 --> 00:20:05,888
you can see here in the paper actually

485
00:20:03,659 --> 00:20:07,839
well I guess that actually had diagram

486
00:20:05,888 --> 00:20:10,718
right there I don't like that what you

487
00:20:07,838 --> 00:20:13,898
can see probably is that if you look

488
00:20:10,719 --> 00:20:16,690
here we go if you look at what these

489
00:20:13,898 --> 00:20:19,418
things generate in various ways that you

490
00:20:16,690 --> 00:20:21,278
could graph them you can see that you

491
00:20:19,419 --> 00:20:23,528
end up with things that aren't really

492
00:20:21,278 --> 00:20:25,960
all that random they have very clear

493
00:20:23,528 --> 00:20:27,759
defining features in them that you can

494
00:20:25,960 --> 00:20:30,399
perceive and that's a problem especially

495
00:20:27,759 --> 00:20:32,079
you know in game development where

496
00:20:30,398 --> 00:20:35,648
you're trying to create visually random

497
00:20:32,079 --> 00:20:37,749
looking things you can see here you end

498
00:20:35,648 --> 00:20:40,838
up getting stuff that can have really

499
00:20:37,749 --> 00:20:43,379
bad side effects right you know all of

500
00:20:40,838 --> 00:20:47,168
these sort of things like like here's a

501
00:20:43,378 --> 00:20:48,548
example right this is like as good as

502
00:20:47,169 --> 00:20:49,749
maybe you're gonna get with a linear

503
00:20:48,548 --> 00:20:51,069
congruential generator or something and

504
00:20:49,749 --> 00:20:53,139
it still has these really obvious

505
00:20:51,069 --> 00:20:56,229
patterns in it right and that I think is

506
00:20:53,138 --> 00:20:57,968
just a an artifact of the modulus way

507
00:20:56,229 --> 00:21:02,919
that they work they're always going to

508
00:20:57,969 --> 00:21:05,519
have at some visible sort of stride

509
00:21:02,919 --> 00:21:08,229
they're gonna have a sort of a coherent

510
00:21:05,519 --> 00:21:09,729
pattern that emerges and what you're

511
00:21:08,229 --> 00:21:11,409
looking for is something more like this

512
00:21:09,729 --> 00:21:13,479
if you're trying to get a white noise

513
00:21:11,409 --> 00:21:15,359
generator which is what a random number

514
00:21:13,479 --> 00:21:17,139
generator is generally supposed to do

515
00:21:15,358 --> 00:21:18,728
you're supposed to be looking at

516
00:21:17,138 --> 00:21:20,228
something that looks like that not

517
00:21:18,729 --> 00:21:22,960
something that looks like this this is

518
00:21:20,229 --> 00:21:26,769
not what you're looking for right well

519
00:21:22,960 --> 00:21:29,049
anyway what most O'Neill did here was

520
00:21:26,769 --> 00:21:32,519
she was working on

521
00:21:29,049 --> 00:21:32,519
figuring out a way to quickly generate

522
00:21:33,180 --> 00:21:37,930
random numbers that would have

523
00:21:35,829 --> 00:21:40,659
comparable speeds to something like a

524
00:21:37,930 --> 00:21:41,740
linear congruential generator but it

525
00:21:40,660 --> 00:21:43,990
wouldn't have sort of the obvious

526
00:21:41,740 --> 00:21:47,440
drawbacks right that wouldn't look like

527
00:21:43,990 --> 00:21:50,410
so bad there and what she came up with

528
00:21:47,440 --> 00:21:53,049
was the fact that if you were to look at

529
00:21:50,410 --> 00:21:57,610
how the bits were distributed it turns

530
00:21:53,049 --> 00:21:59,799
out that you can mix the the bits of a

531
00:21:57,609 --> 00:22:02,949
linear congruential generator if you

532
00:21:59,799 --> 00:22:04,299
shift them around you can mix them

533
00:22:02,950 --> 00:22:05,860
together in a way that produces

534
00:22:04,299 --> 00:22:11,079
something that actually is much much

535
00:22:05,859 --> 00:22:12,399
more random right and I don't know where

536
00:22:11,079 --> 00:22:15,789
the final graphs are I'd have to look

537
00:22:12,400 --> 00:22:17,560
more carefully at the thing but she ends

538
00:22:15,789 --> 00:22:20,829
up getting stuff that that passes

539
00:22:17,559 --> 00:22:22,509
essentially all of the kinds of

540
00:22:20,829 --> 00:22:22,720
randomness tests that you might throw at

541
00:22:22,509 --> 00:22:25,210
it

542
00:22:22,720 --> 00:22:27,130
she ends up getting that out of a very

543
00:22:25,210 --> 00:22:28,299
very simple thing which is essentially

544
00:22:27,130 --> 00:22:32,440
that equation I showed you before where

545
00:22:28,299 --> 00:22:34,359
it just does a shift and uses basically

546
00:22:32,440 --> 00:22:38,259
bits from the linear congruential e

547
00:22:34,359 --> 00:22:39,549
generated value to you know sorry I

548
00:22:38,259 --> 00:22:41,529
don't know my way around the paper that

549
00:22:39,549 --> 00:22:44,529
much okay here we go yeah back where I

550
00:22:41,529 --> 00:22:46,410
was so this right here is the linear

551
00:22:44,529 --> 00:22:48,519
congruential generation part you can see

552
00:22:46,410 --> 00:22:50,470
state equal state times multiplier +

553
00:22:48,519 --> 00:22:52,690
increment and then here is the part that

554
00:22:50,470 --> 00:22:54,610
she's sort of found is the important

555
00:22:52,690 --> 00:22:57,940
part which is that you need to shift the

556
00:22:54,609 --> 00:23:04,329
state by a value that is itself coming

557
00:22:57,940 --> 00:23:09,180
from the state right so anyway the

558
00:23:04,329 --> 00:23:12,730
problem that we have here is that the

559
00:23:09,180 --> 00:23:15,759
the shift that you're doing here while a

560
00:23:12,730 --> 00:23:20,410
shift like this one is fine because this

561
00:23:15,759 --> 00:23:24,099
shift is by a constant value the shift

562
00:23:20,410 --> 00:23:26,529
here is by a variable right and so what

563
00:23:24,099 --> 00:23:29,799
that means is in order to shift this

564
00:23:26,529 --> 00:23:32,019
value to get the proper output value

565
00:23:29,799 --> 00:23:34,930
you're trying to achieve what you'd need

566
00:23:32,019 --> 00:23:39,129
to do first is you would need to find

567
00:23:34,930 --> 00:23:41,170
out what value was in state already get

568
00:23:39,130 --> 00:23:42,409
that into something in the processor

569
00:23:41,170 --> 00:23:48,278
that allows you to do your share

570
00:23:42,409 --> 00:23:50,960
and shift by it that's fine in x64

571
00:23:48,278 --> 00:23:54,940
normal general-purpose registers they do

572
00:23:50,960 --> 00:23:59,329
have a shift by a register amount

573
00:23:54,940 --> 00:24:00,950
however I at least I believe they do I

574
00:23:59,329 --> 00:24:04,038
don't know I think about it I almost

575
00:24:00,950 --> 00:24:07,700
never use anything like that but Cindy

576
00:24:04,038 --> 00:24:10,250
doesn't is the problem there is no shift

577
00:24:07,700 --> 00:24:13,159
by something other than an immediate in

578
00:24:10,250 --> 00:24:14,778
the sses that we normally use so if we

579
00:24:13,159 --> 00:24:18,950
go to the Intel intrinsics guide for

580
00:24:14,778 --> 00:24:21,769
example and we look at for example we

581
00:24:18,950 --> 00:24:23,840
normally target SSE 2 or SSD 3 but

582
00:24:21,769 --> 00:24:27,048
really anything in the SSE family here I

583
00:24:23,839 --> 00:24:31,459
believe like basically anything in here

584
00:24:27,048 --> 00:24:35,808
if we take a look at a shift left

585
00:24:31,460 --> 00:24:40,250
operation so if you take a look at at

586
00:24:35,808 --> 00:24:47,240
the 128 wide folks here you can see that

587
00:24:40,250 --> 00:24:50,200
all of the 128 wide ones here actually

588
00:24:47,240 --> 00:24:50,200
what's this guy

589
00:24:57,960 --> 00:25:09,740
those are 16s I might is totally wrong

590
00:25:03,329 --> 00:25:09,740
about this I'm so sure you can't do this

591
00:25:14,990 --> 00:25:22,200
she factories by count and count comes

592
00:25:18,660 --> 00:25:24,360
from okay

593
00:25:22,200 --> 00:25:27,929
no nevermind I was just double-checking

594
00:25:24,359 --> 00:25:31,109
so yeah you can't do it right you you

595
00:25:27,929 --> 00:25:33,960
can get a count out of this variable as

596
00:25:31,109 --> 00:25:48,418
a single count but you can't get it out

597
00:25:33,960 --> 00:25:49,890
of of each individual Lane right yeah so

598
00:25:48,419 --> 00:25:51,630
I believe I still am right never mind

599
00:25:49,890 --> 00:25:54,030
for a minute there I was like wait what

600
00:25:51,630 --> 00:25:55,500
Wynwood what am i what am I seeing here

601
00:25:54,029 --> 00:25:57,210
there's been many times when I've wanted

602
00:25:55,500 --> 00:25:59,460
to do that and I couldn't do it but it's

603
00:25:57,210 --> 00:26:05,730
not the case so it looks like right you

604
00:25:59,460 --> 00:26:08,700
you can see here your the the value that

605
00:26:05,730 --> 00:26:11,490
you're shifting can be four lane wide

606
00:26:08,700 --> 00:26:15,000
thirty two-bit right

607
00:26:11,490 --> 00:26:19,919
but unfortunately the shift itself only

608
00:26:15,000 --> 00:26:22,500
comes from the bottom bits of this it

609
00:26:19,919 --> 00:26:27,600
doesn't come from the lanes what you'd

610
00:26:22,500 --> 00:26:30,179
want to see is AJ right or an eye

611
00:26:27,599 --> 00:26:33,058
showing up in this count expression here

612
00:26:30,179 --> 00:26:35,640
so that it would shift by a different

613
00:26:33,058 --> 00:26:38,599
amount per Lane but of course it you

614
00:26:35,640 --> 00:26:41,669
can't actually get that right so

615
00:26:38,599 --> 00:26:45,539
effectively what this means is that you

616
00:26:41,669 --> 00:26:49,049
have to downshift to scalar effectively

617
00:26:45,539 --> 00:26:51,808
in order to do your shifts so you would

618
00:26:49,048 --> 00:26:54,058
like to do four wide random number of

619
00:26:51,808 --> 00:26:57,210
stuff but instead you can only do one

620
00:26:54,058 --> 00:26:59,279
wide because the shift is you can't have

621
00:26:57,210 --> 00:27:04,200
four different shift values in four

622
00:26:59,279 --> 00:27:06,298
different lanes right I and I guess

623
00:27:04,200 --> 00:27:07,620
that's because you know far be it for me

624
00:27:06,298 --> 00:27:10,230
because I don't really know the hardware

625
00:27:07,619 --> 00:27:12,750
design limitations here I assume that's

626
00:27:10,230 --> 00:27:15,660
because the shifter for all these lanes

627
00:27:12,750 --> 00:27:17,849
is taking the same bout so like you know

628
00:27:15,660 --> 00:27:19,860
the register comes in and it can just

629
00:27:17,849 --> 00:27:22,199
shift the whole register by that amount

630
00:27:19,859 --> 00:27:24,928
and then it reads it up in two lanes or

631
00:27:22,200 --> 00:27:26,788
something right so it doesn't have the

632
00:27:24,929 --> 00:27:28,769
ability to shift each part individual

633
00:27:26,788 --> 00:27:31,169
as far as its concerned that's four

634
00:27:28,769 --> 00:27:32,548
different shifts and it can only shift

635
00:27:31,169 --> 00:27:35,609
the whole register so I'm assuming that

636
00:27:32,548 --> 00:27:39,479
there is no such circuitry for doing it

637
00:27:35,608 --> 00:27:41,608
that way now at some point I feel like

638
00:27:39,479 --> 00:27:43,949
they may have added I don't remember but

639
00:27:41,608 --> 00:27:47,698
somewhere way up the chain here I feel

640
00:27:43,949 --> 00:27:49,288
like they may have included a shift that

641
00:27:47,699 --> 00:27:51,449
can actually do variable per Lane at

642
00:27:49,288 --> 00:27:54,298
some point I don't really remember but

643
00:27:51,449 --> 00:27:57,839
the point is nothing on the tart on the

644
00:27:54,298 --> 00:28:01,168
platform's we target unfortunately has

645
00:27:57,838 --> 00:28:04,229
that so that's the real issue that we

646
00:28:01,169 --> 00:28:06,809
run into with these / muted congruential

647
00:28:04,229 --> 00:28:09,598
generators is just that in this case

648
00:28:06,808 --> 00:28:13,078
it's really hard to make a random number

649
00:28:09,598 --> 00:28:14,908
function like this work because when we

650
00:28:13,078 --> 00:28:18,239
go to implement it we have this problem

651
00:28:14,909 --> 00:28:21,499
of just the instruction set not really

652
00:28:18,239 --> 00:28:23,788
supporting the thing that we want to do

653
00:28:21,499 --> 00:28:25,679
but for now let's start with it and then

654
00:28:23,788 --> 00:28:28,469
we'll see what we can do as we go

655
00:28:25,679 --> 00:28:32,729
forwards so let's take a look at one of

656
00:28:28,469 --> 00:28:34,558
the ones she suggests here which is I

657
00:28:32,729 --> 00:28:35,778
believe she recommends using X source

658
00:28:34,558 --> 00:28:40,229
shift

659
00:28:35,778 --> 00:28:42,118
let me see here here we go so you can

660
00:28:40,229 --> 00:28:45,659
see some specific implementations here

661
00:28:42,118 --> 00:28:48,628
right and you can see 32 bit output 64

662
00:28:45,659 --> 00:28:50,219
bit state is probably what we would want

663
00:28:48,628 --> 00:28:52,048
to use because we know we don't need

664
00:28:50,219 --> 00:28:53,999
more than 32 bits of output we're using

665
00:28:52,048 --> 00:28:55,798
floating point values floating point

666
00:28:53,999 --> 00:28:58,318
values can't store more than 32 bits

667
00:28:55,798 --> 00:29:02,999
worth of variability anyway in them

668
00:28:58,318 --> 00:29:05,338
right there 24 bit mantissa only so if

669
00:29:02,999 --> 00:29:07,288
you take a look at this a 32 bit output

670
00:29:05,338 --> 00:29:09,358
with 64 bit state is probably mostly

671
00:29:07,288 --> 00:29:13,788
what we want and what you can see here

672
00:29:09,358 --> 00:29:20,088
is that she recommends basically saying

673
00:29:13,788 --> 00:29:23,038
excuse me using X or shift every time

674
00:29:20,088 --> 00:29:24,509
and then just applying this extra shift

675
00:29:23,038 --> 00:29:26,940
is an existing random number generator

676
00:29:24,509 --> 00:29:30,808
and then applying this every time in

677
00:29:26,940 --> 00:29:33,058
order to get the correct mixing right

678
00:29:30,808 --> 00:29:35,548
and again you can see here how bad this

679
00:29:33,058 --> 00:29:37,888
is and the seamy side of things you can

680
00:29:35,548 --> 00:29:40,589
see that you're trying to perform a

681
00:29:37,888 --> 00:29:42,058
rotate which SSE doesn't do that's okay

682
00:29:40,589 --> 00:29:44,308
can do a rotate in a couple instructions

683
00:29:42,058 --> 00:29:46,349
right you just you just have two or two

684
00:29:44,308 --> 00:29:48,480
bachelors things together so forum your

685
00:29:46,349 --> 00:29:50,639
rotate here and the amount you're

686
00:29:48,480 --> 00:29:54,390
rotating by again is comes from the

687
00:29:50,640 --> 00:29:56,759
state itself so although here and here

688
00:29:54,390 --> 00:29:58,140
your shifts are constant amounts so

689
00:29:56,759 --> 00:30:00,750
those are shifts that are easy to

690
00:29:58,140 --> 00:30:03,538
accomplish this shift is not because

691
00:30:00,750 --> 00:30:06,000
this shift right here for the rotate

692
00:30:03,538 --> 00:30:12,089
thirty-two is a shift that's entirely

693
00:30:06,000 --> 00:30:14,369
coming from the value itself so that's

694
00:30:12,089 --> 00:30:17,220
obviously a problem as well but anyway

695
00:30:14,369 --> 00:30:19,349
if we take a look here at applying X or

696
00:30:17,220 --> 00:30:22,079
shift we can see what that actually is

697
00:30:19,349 --> 00:30:26,099
so if we look at the equation for x or

698
00:30:22,079 --> 00:30:29,908
shift here we have it so here's what X

699
00:30:26,099 --> 00:30:32,009
or if like X or shift is literally just

700
00:30:29,909 --> 00:30:33,720
these operations you can see that

701
00:30:32,009 --> 00:30:36,058
nothing in here would be problematic for

702
00:30:33,720 --> 00:30:38,909
us all an X our shift is to do it's

703
00:30:36,058 --> 00:30:42,298
random number update is it says whatever

704
00:30:38,909 --> 00:30:44,159
the input was I'm gonna do exclusive ORS

705
00:30:42,298 --> 00:30:46,259
with various shifts of the bits those

706
00:30:44,159 --> 00:30:51,330
shifts are all constant so this entire

707
00:30:46,259 --> 00:30:54,898
thing would be totally fine to use like

708
00:30:51,329 --> 00:30:58,079
basically in Simbi right and it's just

709
00:30:54,898 --> 00:30:59,699
the part that improves the value that

710
00:30:58,079 --> 00:31:01,678
isn't so one thing that we could

711
00:30:59,700 --> 00:31:03,690
consider doing for example is just not

712
00:31:01,679 --> 00:31:06,538
using the PCG part of it and see how far

713
00:31:03,690 --> 00:31:10,980
we can get with just an X or shift but

714
00:31:06,538 --> 00:31:12,538
again like you know it's gonna have

715
00:31:10,980 --> 00:31:13,980
artifacts in it and whether those

716
00:31:12,538 --> 00:31:17,190
artifacts matter to us or not I don't

717
00:31:13,980 --> 00:31:20,700
know but let's take let's take this as

718
00:31:17,190 --> 00:31:24,509
our basis because that way we can maybe

719
00:31:20,700 --> 00:31:26,278
then look to a PCG to improve it later

720
00:31:24,509 --> 00:31:27,480
on when we need to and maybe we'll just

721
00:31:26,278 --> 00:31:28,710
try to figure out what's going on there

722
00:31:27,480 --> 00:31:32,940
and I haven't looked at this stuff in a

723
00:31:28,710 --> 00:31:34,169
long time and so for all I know if we

724
00:31:32,940 --> 00:31:35,850
went and looked there may have been some

725
00:31:34,169 --> 00:31:37,679
people who've done some good work on how

726
00:31:35,849 --> 00:31:44,099
to make a sim di is version of this

727
00:31:37,679 --> 00:31:47,309
that's not too bad okay so if we take an

728
00:31:44,099 --> 00:31:49,259
example here of X or shift right

729
00:31:47,308 --> 00:31:50,428
the problem with X star shift actually

730
00:31:49,259 --> 00:31:53,579
now they look at it is this is the

731
00:31:50,429 --> 00:31:54,480
32-bit X or shift and I actually wanted

732
00:31:53,579 --> 00:31:57,058
the 64-bit

733
00:31:54,480 --> 00:32:01,019
sir shift it looks like from what she

734
00:31:57,058 --> 00:32:04,668
was talking about before right I'm gonna

735
00:32:01,019 --> 00:32:04,668
I'm gonna see if there's an X or shift

736
00:32:05,000 --> 00:32:08,569
64 or somewhere here

737
00:32:15,089 --> 00:32:22,158
yeah because I would like to know what

738
00:32:39,029 --> 00:32:42,589
yeah I'm not sure

739
00:32:59,440 --> 00:33:05,080
so I guess maybe it's really just not an

740
00:33:03,579 --> 00:33:07,750
issue because I guess it looks like here

741
00:33:05,079 --> 00:33:09,519
what she's suggesting and again you'll

742
00:33:07,750 --> 00:33:13,079
forgive me for not having read read to

743
00:33:09,519 --> 00:33:13,079
this paper you know in a long time

744
00:33:15,059 --> 00:33:17,980
but it looks like I'll show you

745
00:33:16,750 --> 00:33:20,049
suggesting here is actually just used

746
00:33:17,980 --> 00:33:22,539
the the 32-bit XOR shift which maybe

747
00:33:20,049 --> 00:33:24,480
there isn't a 64-bit extra shift on the

748
00:33:22,539 --> 00:33:29,879
high bits and then you just keep going

749
00:33:24,480 --> 00:33:29,880
right so maybe that's fine

750
00:33:42,170 --> 00:33:45,200
so this one she says it's slightly we're

751
00:33:44,029 --> 00:33:47,240
a statistical performance for slightly

752
00:33:45,200 --> 00:33:49,670
greater speed which may be what we would

753
00:33:47,240 --> 00:33:51,829
want anyway and you can see that this is

754
00:33:49,670 --> 00:33:53,660
a sort of a different equation for the

755
00:33:51,829 --> 00:33:55,429
output version Fred's random stuff

756
00:33:53,660 --> 00:33:56,570
rather than a random rotation so that

757
00:33:55,430 --> 00:33:58,220
would be actually good because then we

758
00:33:56,569 --> 00:34:00,500
don't have to do the rotate implied

759
00:33:58,220 --> 00:34:02,269
fixed shift so this version form slowest

760
00:34:00,500 --> 00:34:05,990
work the difference between the two is

761
00:34:02,269 --> 00:34:08,599
minor and she says this one's probably a

762
00:34:05,990 --> 00:34:15,380
better choice to restate the 32-bit up a

763
00:34:08,599 --> 00:34:18,019
function okay yeah so in either case as

764
00:34:15,380 --> 00:34:20,059
far as I can tell yeah it's a little

765
00:34:18,019 --> 00:34:25,579
ambiguous here just in terms of what the

766
00:34:20,059 --> 00:34:27,949
32-bit it's not explicitly stated at

767
00:34:25,579 --> 00:34:30,139
least right here that X or shift is

768
00:34:27,949 --> 00:34:35,809
being used exactly what it's being used

769
00:34:30,139 --> 00:34:38,418
on right but it seems like that's the

770
00:34:35,809 --> 00:34:42,440
case with 64 bits of state and the state

771
00:34:38,418 --> 00:34:45,469
update would be from the X or shift the

772
00:34:42,440 --> 00:34:47,240
only weird thing like I said is if you

773
00:34:45,469 --> 00:34:49,519
take a look at how this is working I'm

774
00:34:47,239 --> 00:34:54,939
just not sure how the state relates

775
00:34:49,519 --> 00:34:54,940
exactly to this because it looks like

776
00:34:57,250 --> 00:35:02,150
yeah I mean it does kind of look like

777
00:35:00,260 --> 00:35:08,810
she's actually saying you just keep the

778
00:35:02,150 --> 00:35:13,150
32 the high 32 bits I don't know that

779
00:35:08,809 --> 00:35:19,969
looks like what she's saying so anyway

780
00:35:13,150 --> 00:35:24,940
it looks like we're just talking about

781
00:35:19,969 --> 00:35:24,939
this and I should write this down

782
00:35:46,650 --> 00:35:51,989
so in this case if we were going to

783
00:35:49,380 --> 00:35:57,119
update the state specifically it would

784
00:35:51,989 --> 00:35:58,739
look something like this right

785
00:35:57,119 --> 00:36:01,440
and we might want to make this official

786
00:35:58,739 --> 00:36:24,809
by saying something like you know random

787
00:36:01,440 --> 00:36:27,690
series but as you can see essentially

788
00:36:24,809 --> 00:36:30,180
all this exertion does exactly as its

789
00:36:27,690 --> 00:36:32,338
name implies all the extra shift does is

790
00:36:30,179 --> 00:36:34,498
take some random value that you started

791
00:36:32,338 --> 00:36:36,960
with so however you want to seat it you

792
00:36:34,498 --> 00:36:38,429
can speed it with anything I and then

793
00:36:36,960 --> 00:36:40,679
all it does is it sort of shifts the

794
00:36:38,429 --> 00:36:42,929
bits around and X or x' them with with

795
00:36:40,679 --> 00:36:46,949
itself right so just a bunch of X or s

796
00:36:42,929 --> 00:36:50,608
with itself and this apparently again if

797
00:36:46,949 --> 00:36:53,038
you take a look at at the papers for X

798
00:36:50,608 --> 00:36:54,478
or shift there this apparently passes

799
00:36:53,039 --> 00:36:56,249
some statistical tests and not others

800
00:36:54,478 --> 00:36:57,989
right so it's not a particularly great

801
00:36:56,248 --> 00:37:00,058
one but it's extremely fast I mean if

802
00:36:57,989 --> 00:37:01,978
you look at what's happening here it's

803
00:37:00,059 --> 00:37:03,960
it's pretty straightforward right it's

804
00:37:01,978 --> 00:37:05,909
just three X ORS with three shifted

805
00:37:03,960 --> 00:37:08,159
values that's incredibly fast to perform

806
00:37:05,909 --> 00:37:10,348
and what you can sort of see here as

807
00:37:08,159 --> 00:37:12,028
well is that these are constant shifts

808
00:37:10,349 --> 00:37:14,999
so if we wanted to do this operation

809
00:37:12,028 --> 00:37:18,509
wide and Cyndy we would have no trouble

810
00:37:14,998 --> 00:37:22,858
doing so right so that would be pretty

811
00:37:18,509 --> 00:37:24,449
easy as well now the only part that we

812
00:37:22,858 --> 00:37:26,248
again would have trouble with is now if

813
00:37:24,449 --> 00:37:29,929
we wanted to apply the mixing step here

814
00:37:26,248 --> 00:37:33,048
where this where this part would be

815
00:37:29,929 --> 00:37:34,409
applied to the upper parts of the value

816
00:37:33,048 --> 00:37:37,829
then

817
00:37:34,409 --> 00:37:39,210
you know we've got sort of the variable

818
00:37:37,829 --> 00:37:40,440
shift do not contend with but at the

819
00:37:39,210 --> 00:37:42,690
moment here I'm gonna content myself

820
00:37:40,440 --> 00:37:46,050
with just trying this random series by

821
00:37:42,690 --> 00:37:49,550
itself so we know let's let's run real

822
00:37:46,050 --> 00:37:51,900
quick this over here so we can have a a

823
00:37:49,550 --> 00:37:53,070
baseline I'm gonna go ahead and run the

824
00:37:51,900 --> 00:38:02,519
build right

825
00:37:53,070 --> 00:38:05,850
oops so this is gonna go ahead and and

826
00:38:02,519 --> 00:38:08,599
do its little it's a little baked here

827
00:38:05,849 --> 00:38:11,639
so that we can have a timing that we

828
00:38:08,599 --> 00:38:14,309
sort of have on the books for how fast

829
00:38:11,639 --> 00:38:16,440
we were running before we change out the

830
00:38:14,309 --> 00:38:19,049
random number generator and again this

831
00:38:16,440 --> 00:38:20,880
should be using you know a substantial

832
00:38:19,050 --> 00:38:23,910
amount of the computing resources to the

833
00:38:20,880 --> 00:38:25,950
computer we should check the performance

834
00:38:23,909 --> 00:38:27,629
monitor as well at some point to make

835
00:38:25,949 --> 00:38:30,480
sure that we're actually pegging all of

836
00:38:27,630 --> 00:38:32,099
our CPUs we should be but you know just

837
00:38:30,480 --> 00:38:34,800
in case we mess something up and

838
00:38:32,099 --> 00:38:36,809
actually aren't but anyway this will

839
00:38:34,800 --> 00:38:39,690
give us a timing that we can then use as

840
00:38:36,809 --> 00:38:41,250
a benchmark against replacing the random

841
00:38:39,690 --> 00:38:43,230
number generator to see just how much of

842
00:38:41,250 --> 00:38:44,579
a difference it makes having replaced it

843
00:38:43,230 --> 00:38:47,010
maybe it'll make a lot less and I think

844
00:38:44,579 --> 00:38:49,139
maybe it'll make a difference we'll see

845
00:38:47,010 --> 00:38:51,330
so anyway you can see here we've got a

846
00:38:49,139 --> 00:38:53,789
performance number we know that we're 46

847
00:38:51,329 --> 00:38:56,309
seconds there and we know that we've got

848
00:38:53,789 --> 00:38:59,730
us particular per bounce rating here so

849
00:38:56,309 --> 00:39:02,549
there we go alright so now I'm gonna do

850
00:38:59,730 --> 00:39:05,730
is instead of having Rand in there I'm

851
00:39:02,550 --> 00:39:07,500
gonna get rid of that Rand you can see

852
00:39:05,730 --> 00:39:09,840
we've got a random unilateral and random

853
00:39:07,500 --> 00:39:11,880
bilateral so what I'm gonna do here is

854
00:39:09,840 --> 00:39:14,490
I'm going to take this random series bit

855
00:39:11,880 --> 00:39:17,849
I'm gonna move that up to our H file

856
00:39:14,489 --> 00:39:19,769
where we define our structs and then I'm

857
00:39:17,849 --> 00:39:22,139
gonna grab this X or shift part I'm

858
00:39:19,769 --> 00:39:25,440
gonna put it right up above here and

859
00:39:22,139 --> 00:39:28,199
what I want to do is I want to replace

860
00:39:25,440 --> 00:39:29,550
sort of this this bit right here with

861
00:39:28,199 --> 00:39:31,949
our own thing and you can see we've

862
00:39:29,550 --> 00:39:34,890
already got it to do for that so what I

863
00:39:31,949 --> 00:39:37,109
want to do is I want to take Rand max we

864
00:39:34,889 --> 00:39:39,359
know Rand max is now just the maximum

865
00:39:37,110 --> 00:39:44,610
32-bit integer so it's really just 32

866
00:39:39,360 --> 00:39:46,650
max right you 32 max now I don't know if

867
00:39:44,610 --> 00:39:47,760
we ever pasted you 32 max in here I

868
00:39:46,650 --> 00:39:50,910
don't think we did so let's

869
00:39:47,760 --> 00:39:53,730
oops didn't you do that let's grab that

870
00:39:50,909 --> 00:39:59,549
out of handmade code I assuming we've

871
00:39:53,730 --> 00:40:00,599
got it I don't know if we do we do so

872
00:39:59,550 --> 00:40:04,110
I'm going to go ahead and grab that out

873
00:40:00,599 --> 00:40:05,670
of here and I'm gonna put it in here so

874
00:40:04,110 --> 00:40:07,980
there's our u3 to max that's the maximum

875
00:40:05,670 --> 00:40:09,780
value that a 32-inch truck can have and

876
00:40:07,980 --> 00:40:11,940
we're gonna put that right here and then

877
00:40:09,780 --> 00:40:16,710
what I want to do here is put in our X

878
00:40:11,940 --> 00:40:17,820
or shift 32 and what these things need

879
00:40:16,710 --> 00:40:18,960
to do now is they need to take the

880
00:40:17,820 --> 00:40:20,730
random series that we're talking about

881
00:40:18,960 --> 00:40:22,559
now why do they need to take a random

882
00:40:20,730 --> 00:40:25,889
series well as you could see random

883
00:40:22,559 --> 00:40:27,659
numbers come from by having a state

884
00:40:25,889 --> 00:40:30,960
variable that gets per muted repeatedly

885
00:40:27,659 --> 00:40:35,009
over time now what you may have noticed

886
00:40:30,960 --> 00:40:37,820
is the rand function did not ever take

887
00:40:35,010 --> 00:40:40,950
anything there right the rand function

888
00:40:37,820 --> 00:40:43,050
itself didn't take any parameters so how

889
00:40:40,949 --> 00:40:45,179
was it doing it well you saw it when we

890
00:40:43,050 --> 00:40:47,400
looked in there all those calls it was

891
00:40:45,179 --> 00:40:49,710
using thread-local storage which is a

892
00:40:47,400 --> 00:40:51,780
way of like grabbing out a specific

893
00:40:49,710 --> 00:40:53,820
global variable for whatever thread was

894
00:40:51,780 --> 00:40:55,860
calling you and it was doing a bunch of

895
00:40:53,820 --> 00:40:57,630
work to do that we don't want to do that

896
00:40:55,860 --> 00:40:59,460
work so we're just gonna pass in an

897
00:40:57,630 --> 00:41:01,470
address that's like here's where the

898
00:40:59,460 --> 00:41:03,510
state variable is for your thread look

899
00:41:01,469 --> 00:41:06,059
directly at it to avoid all of those

900
00:41:03,510 --> 00:41:07,560
calls right so that we just have a known

901
00:41:06,059 --> 00:41:09,480
location in memory you could just update

902
00:41:07,559 --> 00:41:10,949
immediately and get rid of all of those

903
00:41:09,480 --> 00:41:13,710
thread-local storage calls that were

904
00:41:10,949 --> 00:41:15,980
causing us so much of random overhead

905
00:41:13,710 --> 00:41:18,000
that just didn't need to be there right

906
00:41:15,980 --> 00:41:19,619
so we're going to pass in a random

907
00:41:18,000 --> 00:41:21,269
series for all of those and the random

908
00:41:19,619 --> 00:41:25,589
series will get updated as such and

909
00:41:21,269 --> 00:41:26,880
we'll return a 32-bit value that is at

910
00:41:25,590 --> 00:41:28,410
least pseudo random at this point

911
00:41:26,880 --> 00:41:30,960
probably better than the random that was

912
00:41:28,409 --> 00:41:32,159
in the CRT actually because that was

913
00:41:30,960 --> 00:41:36,210
gonna be a linear Connor grant Daenerys

914
00:41:32,159 --> 00:41:39,149
probably worse then this one was but

915
00:41:36,210 --> 00:41:40,590
then after if we find we need randomness

916
00:41:39,150 --> 00:41:43,230
that's better for seeing artifacts from

917
00:41:40,590 --> 00:41:47,039
that or who knows what then we can try

918
00:41:43,230 --> 00:41:49,860
to improve our random numbers by again

919
00:41:47,039 --> 00:41:51,029
using permutations there cuz we already

920
00:41:49,860 --> 00:41:53,670
started with the random trainer that's

921
00:41:51,030 --> 00:41:55,110
the first step of the PCG so we just

922
00:41:53,670 --> 00:41:57,720
need to get that mixing step in there if

923
00:41:55,110 --> 00:42:01,318
we wanted to improve it so anyway here's

924
00:41:57,719 --> 00:42:02,848
the here's us doing the XOR shift

925
00:42:01,318 --> 00:42:04,849
and then dividing by the maximum to give

926
00:42:02,849 --> 00:42:07,048
us a floating point value random

927
00:42:04,849 --> 00:42:08,880
randomly from a random floating point

928
00:42:07,048 --> 00:42:10,018
value and here we don't need to change

929
00:42:08,880 --> 00:42:12,690
this at all because this was just

930
00:42:10,018 --> 00:42:16,679
working on top of our existing one so

931
00:42:12,690 --> 00:42:19,019
that's all good all right so now if we

932
00:42:16,679 --> 00:42:21,690
want this to work we just have to follow

933
00:42:19,018 --> 00:42:23,159
the compile errors down so when we're

934
00:42:21,690 --> 00:42:26,219
calling these these just need to take

935
00:42:23,159 --> 00:42:31,068
our random series that we want to

936
00:42:26,219 --> 00:42:31,068
operate on and that's really it all

937
00:42:37,969 --> 00:42:47,729
right and I think that should basically

938
00:42:44,518 --> 00:42:49,588
do it so I now need that random series

939
00:42:47,728 --> 00:42:50,939
somewhere I don't know if we ever call s

940
00:42:49,588 --> 00:42:52,469
R and I don't think we do so we never

941
00:42:50,940 --> 00:42:55,440
seeded this random number but that's

942
00:42:52,469 --> 00:42:58,979
okay so all I'm gonna do here where we

943
00:42:55,440 --> 00:43:02,190
call render tile with the work queue

944
00:42:58,978 --> 00:43:05,068
here I need these to have access to

945
00:43:02,190 --> 00:43:07,650
entropy right and so if you take a look

946
00:43:05,068 --> 00:43:12,150
at where we call a render tile render

947
00:43:07,650 --> 00:43:19,889
tile gets called from our our work

948
00:43:12,150 --> 00:43:22,349
threads here or should there we go I'm

949
00:43:19,889 --> 00:43:24,598
like where is it where is the win32 you

950
00:43:22,349 --> 00:43:25,890
can see our render tile gets called here

951
00:43:24,599 --> 00:43:29,338
like so

952
00:43:25,889 --> 00:43:33,808
so what we need to do is we need the

953
00:43:29,338 --> 00:43:36,478
state for render tile you know we need

954
00:43:33,809 --> 00:43:39,329
whatever that state function is there to

955
00:43:36,478 --> 00:43:41,698
have some idea of what the random value

956
00:43:39,329 --> 00:43:43,499
should be and what you can see is the

957
00:43:41,699 --> 00:43:45,509
work queue when when it acts to the work

958
00:43:43,498 --> 00:43:47,368
queue it gets off a work order what I'd

959
00:43:45,509 --> 00:43:51,088
like to do is just have the work order

960
00:43:47,369 --> 00:43:54,420
itself be it contain the entropy that it

961
00:43:51,088 --> 00:43:58,009
needs to use right so what I'd like to

962
00:43:54,420 --> 00:44:01,229
do here is say alright that work order

963
00:43:58,009 --> 00:44:03,568
whatever that thing is that needs to get

964
00:44:01,228 --> 00:44:06,868
done it should have a random series in

965
00:44:03,568 --> 00:44:09,599
here that is the you know entropy so

966
00:44:06,869 --> 00:44:12,059
we'll pass along that entropy along with

967
00:44:09,599 --> 00:44:14,609
the work order so here where we do

968
00:44:12,059 --> 00:44:15,180
random series we will just take the

969
00:44:14,608 --> 00:44:16,828
random seer

970
00:44:15,179 --> 00:44:17,940
in fact we could even just use the

971
00:44:16,829 --> 00:44:19,200
random series that's sitting in the work

972
00:44:17,940 --> 00:44:20,760
order we don't really need it to be that

973
00:44:19,199 --> 00:44:21,960
it could be local to the stack which

974
00:44:20,760 --> 00:44:23,329
might be a little bit more efficient

975
00:44:21,960 --> 00:44:26,490
depending on you know how these things

976
00:44:23,329 --> 00:44:28,109
work out I don't really know but anyway

977
00:44:26,489 --> 00:44:29,879
so if we take this random series here

978
00:44:28,108 --> 00:44:31,730
I'm gonna go ahead and say from the work

979
00:44:29,880 --> 00:44:34,318
order let's get the entropy out of there

980
00:44:31,730 --> 00:44:37,829
and then that's the one that we'll use

981
00:44:34,318 --> 00:44:39,599
right and so what I need to do now is

982
00:44:37,829 --> 00:44:42,059
whenever I pack one of those work orders

983
00:44:39,599 --> 00:44:43,890
up those work orders need to include the

984
00:44:42,059 --> 00:44:46,950
entropy can see us packing the recorders

985
00:44:43,889 --> 00:44:51,900
up here using the tiles and so the order

986
00:44:46,949 --> 00:44:55,828
entropy we need some way here of getting

987
00:44:51,900 --> 00:44:57,329
some randomized value right and right

988
00:44:55,829 --> 00:44:58,619
now we don't really have a lot of ways

989
00:44:57,329 --> 00:45:01,019
of getting your randomized value

990
00:44:58,619 --> 00:45:02,329
unfortunately we would like to have some

991
00:45:01,019 --> 00:45:04,889
way of getting it but we don't really

992
00:45:02,329 --> 00:45:06,630
and so what we what we need to do is

993
00:45:04,889 --> 00:45:09,629
find some source of entropy that we

994
00:45:06,630 --> 00:45:14,579
could actually use to you know to

995
00:45:09,630 --> 00:45:22,260
produce initially random seeds since I

996
00:45:14,579 --> 00:45:24,960
don't really want to do that since I

997
00:45:22,260 --> 00:45:26,790
don't want to deal with that part quite

998
00:45:24,960 --> 00:45:29,849
yet what I'm gonna do is I'm gonna stick

999
00:45:26,789 --> 00:45:33,719
with using our existing Rand for now to

1000
00:45:29,849 --> 00:45:35,609
see the entropy and because it's not the

1001
00:45:33,719 --> 00:45:37,439
same random function as our other ones

1002
00:45:35,608 --> 00:45:40,139
so they won't basically just produce

1003
00:45:37,440 --> 00:45:48,960
overlapping random sets and then what

1004
00:45:40,139 --> 00:45:50,190
we'll try to do here is replace this in

1005
00:45:48,960 --> 00:45:51,960
fact I don't really even need to call

1006
00:45:50,190 --> 00:45:54,929
Rand right what I could do is just say

1007
00:45:51,960 --> 00:45:59,760
like tile x times something plus tile Y

1008
00:45:54,929 --> 00:46:01,440
times something right for now something

1009
00:45:59,760 --> 00:46:03,240
predictable so that our images will come

1010
00:46:01,440 --> 00:46:04,470
out the same every time but eventually

1011
00:46:03,239 --> 00:46:06,058
you probably want to replace this with a

1012
00:46:04,469 --> 00:46:08,909
real entry value perhaps even one that

1013
00:46:06,059 --> 00:46:10,559
the user can input here that will

1014
00:46:08,909 --> 00:46:12,750
somehow do some permutation or something

1015
00:46:10,559 --> 00:46:14,099
right so we we want to do something more

1016
00:46:12,750 --> 00:46:17,539
real here but for the moment we just

1017
00:46:14,099 --> 00:46:21,180
need to make sure that these are

1018
00:46:17,539 --> 00:46:24,440
reasonable values so in fact I need to

1019
00:46:21,179 --> 00:46:24,440
do it this way Graham series

1020
00:46:25,829 --> 00:46:33,190
yeah and I think that's really all we

1021
00:46:30,400 --> 00:46:35,230
need to do the random series needs to be

1022
00:46:33,190 --> 00:46:38,278
obviously defined before it sees that

1023
00:46:35,230 --> 00:46:41,679
since C++ is in ordered declaration wise

1024
00:46:38,278 --> 00:46:45,460
and so now we need to see whether this

1025
00:46:41,679 --> 00:46:46,899
produces you know usable output right we

1026
00:46:45,460 --> 00:46:48,818
should probably have set the race for

1027
00:46:46,900 --> 00:46:52,528
pixel down lower well we're doing our

1028
00:46:48,818 --> 00:46:52,528
testing here but that's alright

1029
00:46:53,380 --> 00:46:57,369
so you know a couple of different things

1030
00:46:55,929 --> 00:47:00,038
I want to do first of all we can see

1031
00:46:57,369 --> 00:47:02,650
kind of right off the bat though that

1032
00:47:00,039 --> 00:47:04,390
there's there was no obvious problem

1033
00:47:02,650 --> 00:47:06,400
with our randomness right like it looks

1034
00:47:04,389 --> 00:47:08,889
pretty much the same as the other one I

1035
00:47:06,400 --> 00:47:10,510
don't see a lot of obvious like things

1036
00:47:08,889 --> 00:47:13,269
that are busted with this one that

1037
00:47:10,510 --> 00:47:17,559
weren't busted in the other ones so no

1038
00:47:13,269 --> 00:47:20,588
huge no huge deal there if we take a

1039
00:47:17,559 --> 00:47:23,500
look at the total time however what I

1040
00:47:20,588 --> 00:47:26,259
think you'll notice is if we compare

1041
00:47:23,500 --> 00:47:28,630
that run with our existing run the

1042
00:47:26,260 --> 00:47:31,150
difference is dramatic right so all I

1043
00:47:28,630 --> 00:47:33,099
did all I did was replace just that

1044
00:47:31,150 --> 00:47:39,130
random number function and you can see

1045
00:47:33,099 --> 00:47:43,450
we went from having 0.00025 milliseconds

1046
00:47:39,130 --> 00:47:46,480
per per bounce to 0.0009 milliseconds

1047
00:47:43,449 --> 00:47:49,298
per bounce it's over twice as fast and

1048
00:47:46,480 --> 00:47:54,929
the total time went from 46 seconds down

1049
00:47:49,298 --> 00:47:59,559
to 17 seconds right so very very very

1050
00:47:54,929 --> 00:48:02,649
trivial thing that I just did drastic

1051
00:47:59,559 --> 00:48:05,789
speed up right like way way way faster

1052
00:48:02,650 --> 00:48:09,760
it's it's you know getting a 2x speed-up

1053
00:48:05,789 --> 00:48:12,549
for just replacing one call to the C

1054
00:48:09,760 --> 00:48:14,650
runtime library getting rid of that with

1055
00:48:12,548 --> 00:48:18,670
our actual function is twice the

1056
00:48:14,650 --> 00:48:20,858
performance plus right and again you can

1057
00:48:18,670 --> 00:48:22,480
see why did that it was a really simple

1058
00:48:20,858 --> 00:48:24,880
process and I highly encourage you'll do

1059
00:48:22,480 --> 00:48:27,039
this looking at a hot piece of code like

1060
00:48:24,880 --> 00:48:29,289
that you should not see any calls in it

1061
00:48:27,039 --> 00:48:30,730
right like any piece of work that's

1062
00:48:29,289 --> 00:48:32,890
supposed to be as fast as possible

1063
00:48:30,730 --> 00:48:35,559
should not be calling anything as soon

1064
00:48:32,889 --> 00:48:36,909
as there's a call you've probably made a

1065
00:48:35,559 --> 00:48:38,109
mistake somewhere and in this case we

1066
00:48:36,909 --> 00:48:39,548
obviously did we were

1067
00:48:38,108 --> 00:48:41,230
calling out to a bunch of heavyweight

1068
00:48:39,548 --> 00:48:43,048
operations when these need to be

1069
00:48:41,230 --> 00:48:48,909
lightweight operations inside the hot

1070
00:48:43,048 --> 00:48:50,588
path okay so now that that's taken care

1071
00:48:48,909 --> 00:48:53,199
of we can look a little bit further and

1072
00:48:50,588 --> 00:48:55,900
go okay well can we go ahead and extend

1073
00:48:53,199 --> 00:48:57,368
this to be using more of a sim di

1074
00:48:55,900 --> 00:49:00,068
structure I don't know how much time

1075
00:48:57,369 --> 00:49:03,608
I've got left I think I have over an

1076
00:49:00,068 --> 00:49:07,690
hour because I think we started at 1:00

1077
00:49:03,608 --> 00:49:09,518
am I wrong about that I think we have

1078
00:49:07,690 --> 00:49:12,039
over an hour so I think we could make a

1079
00:49:09,518 --> 00:49:13,808
significant dent in that so again let's

1080
00:49:12,039 --> 00:49:16,839
see if we can increase our performance

1081
00:49:13,809 --> 00:49:19,900
again just a little bit more here by

1082
00:49:16,838 --> 00:49:21,909
taking a look at doing our math ops a

1083
00:49:19,900 --> 00:49:24,940
little bit more efficiently and now why

1084
00:49:21,909 --> 00:49:26,348
am I thinking about that right so the

1085
00:49:24,940 --> 00:49:29,470
reason I'm thinking about that is again

1086
00:49:26,349 --> 00:49:31,329
I like to guide the optimization to a

1087
00:49:29,469 --> 00:49:33,848
large extent by looking at what is

1088
00:49:31,329 --> 00:49:36,190
actually happening in the code because

1089
00:49:33,849 --> 00:49:38,798
that can tell me where my opportunities

1090
00:49:36,190 --> 00:49:40,778
lie and if you just take a quick look

1091
00:49:38,798 --> 00:49:45,159
down at all of what's happening here

1092
00:49:40,778 --> 00:49:46,869
what you can see in this code just very

1093
00:49:45,159 --> 00:49:48,219
obviously right you don't have to really

1094
00:49:46,869 --> 00:49:50,588
know very much about assembly language

1095
00:49:48,219 --> 00:49:54,669
at all I'm not an assembly language

1096
00:49:50,588 --> 00:49:55,989
junkie or anything what you can see very

1097
00:49:54,670 --> 00:49:57,249
clearly when you're looking at this code

1098
00:49:55,989 --> 00:50:00,670
much like the first time I looked

1099
00:49:57,248 --> 00:50:03,338
through it I saw those big you know sort

1100
00:50:00,670 --> 00:50:04,150
of warning signs flashing when I saw

1101
00:50:03,338 --> 00:50:06,119
those calls

1102
00:50:04,150 --> 00:50:08,470
I like why are we calling out something

1103
00:50:06,119 --> 00:50:10,749
so that was the obscene to replace here

1104
00:50:08,469 --> 00:50:13,598
much like that what I see here is just a

1105
00:50:10,748 --> 00:50:16,598
lot of SS right I see a lot of Mullis s

1106
00:50:13,599 --> 00:50:20,349
at assess sub SS right everything in

1107
00:50:16,599 --> 00:50:21,910
here is an SS call mmm now what an SS

1108
00:50:20,349 --> 00:50:24,519
instruction students I call SS

1109
00:50:21,909 --> 00:50:28,420
instruction SS instruction is single

1110
00:50:24,518 --> 00:50:31,238
scalar right and anytime we're executing

1111
00:50:28,420 --> 00:50:33,608
a single scalar instruction we could be

1112
00:50:31,239 --> 00:50:36,460
executing something wider than that

1113
00:50:33,608 --> 00:50:38,679
right because a single scalar

1114
00:50:36,460 --> 00:50:41,829
instruction is telling the you know the

1115
00:50:38,679 --> 00:50:44,618
processor to do a multiplication of one

1116
00:50:41,829 --> 00:50:47,980
scalar times one other scalar if we

1117
00:50:44,619 --> 00:50:50,410
instead of doing mul we're doing mul

1118
00:50:47,980 --> 00:50:51,820
pieces which is packed scalars we could

1119
00:50:50,409 --> 00:50:54,190
be doing four or

1120
00:50:51,820 --> 00:50:56,350
eight multiplications in that same

1121
00:50:54,190 --> 00:50:58,240
instruction right so in the same amount

1122
00:50:56,349 --> 00:51:00,190
of time it takes to this mole SS we

1123
00:50:58,239 --> 00:51:02,229
could be multiplying instead of one

1124
00:51:00,190 --> 00:51:06,039
scalar for scalars or eight scalars

1125
00:51:02,230 --> 00:51:08,079
right and so what we really want to be

1126
00:51:06,039 --> 00:51:11,969
able to do here is we want to be able to

1127
00:51:08,079 --> 00:51:15,519
make this function this hot path

1128
00:51:11,969 --> 00:51:17,439
potentially be able to do a wider set of

1129
00:51:15,519 --> 00:51:19,509
operations so instead of testing one

1130
00:51:17,440 --> 00:51:22,570
rate at a time test for raise at a time

1131
00:51:19,510 --> 00:51:25,470
right or instead of testing for raise at

1132
00:51:22,570 --> 00:51:28,360
a time test eight raise at a time okay

1133
00:51:25,469 --> 00:51:34,089
and so that's what we really want to do

1134
00:51:28,360 --> 00:51:36,900
there so how would we do this right well

1135
00:51:34,090 --> 00:51:39,970
if we take a look at this wimon x-men

1136
00:51:36,900 --> 00:51:42,369
stuff here where we go through we've got

1137
00:51:39,969 --> 00:51:46,509
this hot ray index here what I want to

1138
00:51:42,369 --> 00:51:48,789
do at first because this is what's doing

1139
00:51:46,510 --> 00:51:51,130
the majority of the work I'm wondering

1140
00:51:48,789 --> 00:51:55,750
whether I could pull this function out

1141
00:51:51,130 --> 00:51:57,840
without losing too much speed so what

1142
00:51:55,750 --> 00:52:00,429
I'm gonna do first is I'm gonna try

1143
00:51:57,840 --> 00:52:03,460
putting this up here and seeing whether

1144
00:52:00,429 --> 00:52:05,889
the compiler can handle it okay if I

1145
00:52:03,460 --> 00:52:07,929
pull it out right so what I'm gonna do

1146
00:52:05,889 --> 00:52:12,039
is I'm gonna grab this loop here the Ray

1147
00:52:07,929 --> 00:52:17,940
index part right I'm just going to put

1148
00:52:12,039 --> 00:52:20,320
it in here and this is going to be like

1149
00:52:17,940 --> 00:52:24,400
you know the sample arrays or whatever

1150
00:52:20,320 --> 00:52:26,620
right and so what I'm gonna do is I'm

1151
00:52:24,400 --> 00:52:31,530
just gonna pass in and raise per pixel

1152
00:52:26,619 --> 00:52:33,789
here is is these are coming out of here

1153
00:52:31,530 --> 00:52:35,620
what I want to do here is just have

1154
00:52:33,789 --> 00:52:38,800
these be things all of this stuff can be

1155
00:52:35,619 --> 00:52:41,380
specified cleanly and clearly and

1156
00:52:38,800 --> 00:52:43,330
hopefully everything is relatively yeah

1157
00:52:41,380 --> 00:52:45,610
really straightforward I'm just gonna

1158
00:52:43,329 --> 00:52:49,199
let the compiler tell me what the stuff

1159
00:52:45,610 --> 00:52:49,200
is that we actually need here

1160
00:52:55,949 --> 00:53:03,239
looks like you know what can we can we

1161
00:52:59,969 --> 00:53:05,159
simplify this a little bit here so I

1162
00:53:03,239 --> 00:53:06,689
wonder if this stuff can just be sort of

1163
00:53:05,159 --> 00:53:11,368
put into something because there's a lot

1164
00:53:06,690 --> 00:53:13,289
of stuff here that we may need I don't

1165
00:53:11,369 --> 00:53:15,720
want a huge passing festival but at the

1166
00:53:13,289 --> 00:53:29,520
same time I don't know exactly how I

1167
00:53:15,719 --> 00:53:30,598
want those to be pulled out well let's

1168
00:53:29,519 --> 00:53:31,739
keep going this way I'm just gonna

1169
00:53:30,599 --> 00:53:34,410
actually do it this way and we'll just

1170
00:53:31,739 --> 00:53:46,608
see what happens so we've got a random

1171
00:53:34,409 --> 00:53:46,608
series we've got a film X my

1172
00:54:00,070 --> 00:54:07,300
uh yeah and I don't know this may have

1173
00:54:04,690 --> 00:54:09,309
to be treated carefully because of the

1174
00:54:07,300 --> 00:54:11,620
fact that I don't want it to think that

1175
00:54:09,309 --> 00:54:13,989
it has to necessarily reload that guy

1176
00:54:11,619 --> 00:54:16,139
we'll have to see how that is there may

1177
00:54:13,989 --> 00:54:19,029
be some issues there we'll find a

1178
00:54:16,139 --> 00:54:24,449
second-half fix with and half picks half

1179
00:54:19,030 --> 00:54:43,210
takes w6h

1180
00:54:24,449 --> 00:54:55,869
we've got Film Center man there's just

1181
00:54:43,210 --> 00:55:04,059
too much bounces computed is just gonna

1182
00:54:55,869 --> 00:55:05,589
be added in locked here right yeah so

1183
00:55:04,059 --> 00:55:10,929
bounce is computed would have to be kind

1184
00:55:05,590 --> 00:55:20,220
of returned in worlds I assume it's just

1185
00:55:10,929 --> 00:55:20,219
world so final color

1186
00:55:26,869 --> 00:55:46,819
is just the return value here and I'm

1187
00:55:43,400 --> 00:56:03,230
pretty sure that this is all we would

1188
00:55:46,820 --> 00:56:05,690
have to do so bounce is computed it's

1189
00:56:03,230 --> 00:56:16,719
just going to be stored up in here and

1190
00:56:05,690 --> 00:56:16,720
the final color will be put there and

1191
00:56:22,570 --> 00:56:29,510
contributed idea of how many of these we

1192
00:56:27,739 --> 00:56:39,699
have right yeah one over raised per

1193
00:56:29,510 --> 00:56:39,700
pixel yeah

1194
00:56:40,050 --> 00:56:47,519
okay so I believe that's really all we

1195
00:56:44,730 --> 00:56:49,079
need to do there to get this into place

1196
00:56:47,519 --> 00:56:52,469
unfortunate there's just a lot of things

1197
00:56:49,079 --> 00:56:53,940
that are getting computed there and so

1198
00:56:52,469 --> 00:56:57,089
we may need to pass those in it's like a

1199
00:56:53,940 --> 00:56:58,679
struct or something more convenient but

1200
00:56:57,090 --> 00:57:00,120
I just try to pull this out into so that

1201
00:56:58,679 --> 00:57:02,369
our hot path is as simple as possible

1202
00:57:00,119 --> 00:57:04,980
and is encapsulated in a single place so

1203
00:57:02,369 --> 00:57:09,359
it's clear what's going on and can be

1204
00:57:04,980 --> 00:57:12,030
optimized right so if I go ahead and

1205
00:57:09,360 --> 00:57:12,809
paste this in here again we might want

1206
00:57:12,030 --> 00:57:17,250
to make that a little bit more

1207
00:57:12,809 --> 00:57:24,090
structured but we would just say the

1208
00:57:17,250 --> 00:57:26,070
final color here bounce is computed it's

1209
00:57:24,090 --> 00:57:31,100
gonna come from there and the final

1210
00:57:26,070 --> 00:57:33,630
color is gonna come from there as well

1211
00:57:31,099 --> 00:57:36,569
and so really all we have to do here is

1212
00:57:33,630 --> 00:57:41,070
just say call this caster that we've got

1213
00:57:36,570 --> 00:57:54,170
here and pass all the stuff that you

1214
00:57:41,070 --> 00:57:54,170
already computed like so

1215
00:57:58,630 --> 00:58:05,210
somehow we ended up changing back to

1216
00:58:02,440 --> 00:58:08,230
compiling handmade hero I'm not sure how

1217
00:58:05,210 --> 00:58:23,449
I may have accidentally hit a hotkey

1218
00:58:08,230 --> 00:58:25,548
let's try that again yeah all right so

1219
00:58:23,449 --> 00:58:27,439
again all I'm trying to do here is just

1220
00:58:25,548 --> 00:58:30,440
determine whether or not we lost any

1221
00:58:27,440 --> 00:58:37,010
appreciable speed we know that we were

1222
00:58:30,440 --> 00:58:37,730
getting oh oh nine milliseconds per Ray

1223
00:58:37,010 --> 00:58:40,220
before

1224
00:58:37,730 --> 00:58:43,190
and we took 17 seconds I just want to

1225
00:58:40,219 --> 00:58:44,778
see how much worse it gets so you can

1226
00:58:43,190 --> 00:58:47,269
see we do lose a little bit of speed

1227
00:58:44,778 --> 00:58:50,269
having it there so the first question is

1228
00:58:47,269 --> 00:58:52,338
well why are we losing that speed part

1229
00:58:50,269 --> 00:58:54,318
of it may just be because of not knowing

1230
00:58:52,338 --> 00:58:55,909
a few things like the random series for

1231
00:58:54,318 --> 00:58:58,940
example not knowing it that a few of

1232
00:58:55,909 --> 00:59:00,828
these things are localized so it's hard

1233
00:58:58,940 --> 00:59:04,240
for me to necessarily say exactly where

1234
00:59:00,829 --> 00:59:06,289
that's where that loss is coming from

1235
00:59:04,239 --> 00:59:09,288
what I could do is just take a quick

1236
00:59:06,289 --> 00:59:12,920
little look and see here if we actually

1237
00:59:09,289 --> 00:59:17,539
change something like for example this

1238
00:59:12,920 --> 00:59:22,369
random series as it comes through is

1239
00:59:17,539 --> 00:59:25,640
being used for nothing really in the

1240
00:59:22,369 --> 00:59:27,890
outer loop right so if we wanted to we

1241
00:59:25,639 --> 00:59:32,298
could just say that you know order

1242
00:59:27,889 --> 00:59:35,210
entropy here is the series that you're

1243
00:59:32,298 --> 00:59:38,989
supposed to use we won't use one here

1244
00:59:35,210 --> 00:59:41,150
and then instead of passing a pointer

1245
00:59:38,989 --> 00:59:45,399
here we'll just use the actual series

1246
00:59:41,150 --> 00:59:47,510
directly and restore that address of

1247
00:59:45,400 --> 00:59:49,460
right that way it's using something

1248
00:59:47,510 --> 00:59:53,119
local it can see that's never modified

1249
00:59:49,460 --> 00:59:58,420
outside and doesn't have to worry about

1250
00:59:53,119 --> 00:59:58,420
about accessing that at a distance

1251
01:00:06,568 --> 01:00:10,960
and again yeah like I said I'm not

1252
01:00:08,619 --> 01:00:12,759
really sure why we got a slowdown from

1253
01:00:10,960 --> 01:00:14,920
answering that call there

1254
01:00:12,759 --> 01:00:16,838
it does get called several times I

1255
01:00:14,920 --> 01:00:20,588
suppose it could be actual real overhead

1256
01:00:16,838 --> 01:00:23,318
but I don't know so again that's a

1257
01:00:20,588 --> 01:00:30,210
little bit better but still not not

1258
01:00:23,318 --> 01:00:34,420
perfect right and I'm not exactly sure

1259
01:00:30,210 --> 01:00:38,528
why we're sort of getting that as an

1260
01:00:34,420 --> 01:00:40,838
issue there so that may imply that we

1261
01:00:38,528 --> 01:00:42,548
need to keep it all in one place to weld

1262
01:00:40,838 --> 01:00:51,460
it together properly

1263
01:00:42,548 --> 01:00:55,088
I could try packing those things into a

1264
01:00:51,460 --> 01:00:56,978
struct and accessing them that way and

1265
01:00:55,088 --> 01:00:59,170
see if that is actually an improvement

1266
01:00:56,978 --> 01:01:01,568
I'm just not sure again it's hard to

1267
01:00:59,170 --> 01:01:05,079
know specifically where we lost a little

1268
01:01:01,568 --> 01:01:08,440
bit of speed there with the call and to

1269
01:01:05,079 --> 01:01:11,440
what extent that hurt us right so let me

1270
01:01:08,440 --> 01:01:15,358
try packing and then from there I guess

1271
01:01:11,440 --> 01:01:15,358
we'll kind of figure out what happened

1272
01:01:21,639 --> 01:01:35,739
so here's the things that we provide

1273
01:01:25,389 --> 01:01:35,739
right and here's the things that we need

1274
01:02:00,400 --> 01:02:05,780
so if we were to say that well Cass

1275
01:02:02,840 --> 01:02:10,070
sampler A's is just going to take this

1276
01:02:05,780 --> 01:02:17,900
state and everything that it does is

1277
01:02:10,070 --> 01:02:20,890
going to be off of the state we can see

1278
01:02:17,900 --> 01:02:25,420
to what extent that that helps us right

1279
01:02:20,889 --> 01:02:25,420
so let's take a look here

1280
01:02:32,070 --> 01:02:41,970
I also don't know if I could just make

1281
01:02:33,809 --> 01:02:48,170
this be grabbed directly I'm just

1282
01:02:41,969 --> 01:02:48,169
curious what can I say rid of that I

1283
01:02:55,429 --> 01:03:01,230
just want to see what the I want to see

1284
01:02:59,159 --> 01:03:10,819
where I can get the compiler in terms of

1285
01:03:01,230 --> 01:03:13,349
just allowing us to have this be sort of

1286
01:03:10,820 --> 01:03:15,300
isolate it off and right now I'm just

1287
01:03:13,349 --> 01:03:17,730
I'm just seeing some slowdown there that

1288
01:03:15,300 --> 01:03:20,220
I'm not sure why I'm seeing so I'm just

1289
01:03:17,730 --> 01:03:24,659
poking at it a little bit to see if I

1290
01:03:20,219 --> 01:03:26,848
can figure out what it doesn't like and

1291
01:03:24,659 --> 01:03:28,108
I may have to go look at the assembly

1292
01:03:26,849 --> 01:03:37,559
again to figure out what's going on

1293
01:03:28,108 --> 01:03:40,940
there so if I just let it grab

1294
01:03:37,559 --> 01:03:40,940
everything out like so

1295
01:04:01,469 --> 01:04:05,679
I'm going to go ahead and accumulate

1296
01:04:04,119 --> 01:04:12,269
these locally so that they don't

1297
01:04:05,679 --> 01:04:12,269
actually have to access anything outside

1298
01:04:15,838 --> 01:04:39,538
and I'll only write them out here I can

1299
01:04:33,338 --> 01:04:44,199
even make that be an ad so yeah that

1300
01:04:39,539 --> 01:04:46,599
looks roughly okay to me

1301
01:04:44,199 --> 01:04:48,338
and so what I'll do now is I'll just say

1302
01:04:46,599 --> 01:04:54,338
alright there's going to be that cast

1303
01:04:48,338 --> 01:04:59,670
State I'm going to go ahead and lock

1304
01:04:54,338 --> 01:05:03,150
that up here oops

1305
01:04:59,670 --> 01:05:03,150
good BH file

1306
01:05:08,800 --> 01:05:16,370
like so and then I'm going to just fill

1307
01:05:12,710 --> 01:05:17,809
it out so when we go to render a tile

1308
01:05:16,369 --> 01:05:25,009
we're gonna have this cast state

1309
01:05:17,809 --> 01:05:27,769
function and all of the stuff that

1310
01:05:25,010 --> 01:05:51,620
actually gets computed related to that

1311
01:05:27,769 --> 01:05:53,119
it's going to go in there right and this

1312
01:05:51,619 --> 01:05:59,319
all I'm doing here is just moving that

1313
01:05:53,119 --> 01:05:59,319
in to the state itself

1314
01:06:09,829 --> 01:06:27,519
I and all that stuff is now ready to go

1315
01:06:25,309 --> 01:06:27,519
I think

1316
01:06:48,030 --> 01:06:54,820
that'll come out of here that way we

1317
01:06:50,260 --> 01:06:56,410
don't have to bother with this and all

1318
01:06:54,820 --> 01:07:04,870
we would really have to do here is clear

1319
01:06:56,409 --> 01:07:08,589
final color start with nothing and pull

1320
01:07:04,869 --> 01:07:13,150
it out right we could even make that a

1321
01:07:08,590 --> 01:07:22,150
return value if you wanted to not a

1322
01:07:13,150 --> 01:07:29,680
member of caste States so I see but I

1323
01:07:22,150 --> 01:07:32,559
would like it to be and it looks like

1324
01:07:29,679 --> 01:07:34,389
film width and height don't need to be a

1325
01:07:32,559 --> 01:07:39,849
member of it either but again I think I

1326
01:07:34,389 --> 01:07:54,069
would like them to be so I'm gonna put

1327
01:07:39,849 --> 01:07:54,699
them in there anyway oops ooh sorry

1328
01:07:54,070 --> 01:07:57,280
about that

1329
01:07:54,699 --> 01:08:02,259
all right so let's see where we're at

1330
01:07:57,280 --> 01:08:14,220
here looks like we forgot to set the

1331
01:08:02,260 --> 01:08:16,840
world pointer and I think that's it so

1332
01:08:14,219 --> 01:08:18,849
yeah again just trying to figure out how

1333
01:08:16,840 --> 01:08:20,949
to get the compiler to be okay with me

1334
01:08:18,850 --> 01:08:24,370
pulling that code out and not taking too

1335
01:08:20,949 --> 01:08:26,079
much of speed it for it I'm gonna go

1336
01:08:24,369 --> 01:08:28,630
look at the assembly and see if we're

1337
01:08:26,079 --> 01:08:30,279
doing anything particularly bad we may

1338
01:08:28,630 --> 01:08:33,760
be doing something particularly bad I'm

1339
01:08:30,279 --> 01:08:36,819
not sure okay so there we go

1340
01:08:33,760 --> 01:08:41,289
whoa although we've got some that's

1341
01:08:36,819 --> 01:08:43,000
interesting that's really cool you can

1342
01:08:41,289 --> 01:08:49,769
see some of the tiles are kind of a

1343
01:08:43,000 --> 01:08:52,060
little messed up there all right I so

1344
01:08:49,770 --> 01:08:53,290
let me just verify that we're setting

1345
01:08:52,060 --> 01:08:56,010
everything here I suspect we're probably

1346
01:08:53,289 --> 01:08:59,430
not setting everything correctly but

1347
01:08:56,010 --> 01:08:59,430
that's really neat

1348
01:09:00,789 --> 01:09:05,930
so yeah now I got to go through and just

1349
01:09:04,279 --> 01:09:10,639
make sure all this stuff is is set up

1350
01:09:05,930 --> 01:09:11,930
properly our final color it looks like

1351
01:09:10,640 --> 01:09:13,130
we don't actually have to clear final

1352
01:09:11,930 --> 01:09:14,869
color it looks like that gets written

1353
01:09:13,130 --> 01:09:17,359
out properly so that's actually not an

1354
01:09:14,869 --> 01:09:18,619
issue there we were down to the correct

1355
01:09:17,359 --> 01:09:20,240
speed but it looks like we're doing

1356
01:09:18,619 --> 01:09:22,550
things wrong so that doesn't really

1357
01:09:20,239 --> 01:09:28,309
count so let's see what we actually

1358
01:09:22,550 --> 01:09:31,970
messed up here it looks like these are

1359
01:09:28,310 --> 01:09:33,560
our base parameters before we hoops

1360
01:09:31,970 --> 01:09:37,010
calculate the state so I want to

1361
01:09:33,560 --> 01:09:39,100
organize these a little bit here it

1362
01:09:37,010 --> 01:09:42,079
looks like do we ever use the worlds in

1363
01:09:39,100 --> 01:09:43,400
here at all no we don't so the other

1364
01:09:42,079 --> 01:09:47,329
thing I'm gonna do here is just put that

1365
01:09:43,399 --> 01:09:49,879
in here like so and get it out of here

1366
01:09:47,329 --> 01:09:56,300
so you can see these are the things we

1367
01:09:49,880 --> 01:09:58,130
actually are specifying here one cast x

1368
01:09:56,300 --> 01:09:59,449
max that's really only used for the

1369
01:09:58,130 --> 01:10:03,230
iteration so that's not really used up

1370
01:09:59,449 --> 01:10:04,519
here anyway so here we go

1371
01:10:03,229 --> 01:10:08,179
let's take a look at all the things we

1372
01:10:04,520 --> 01:10:10,700
need to compute here uh so rays for

1373
01:10:08,180 --> 01:10:14,030
pixel and Max bounce counts

1374
01:10:10,699 --> 01:10:16,309
those are both you know specified

1375
01:10:14,029 --> 01:10:19,149
exactly as they appear to be specified

1376
01:10:16,310 --> 01:10:21,680
in the queue so those are pretty trivial

1377
01:10:19,149 --> 01:10:24,469
and the world is the same so those are

1378
01:10:21,680 --> 01:10:26,539
just like straight pass through we then

1379
01:10:24,470 --> 01:10:30,710
have let's get rid of this for a second

1380
01:10:26,539 --> 01:10:33,010
here we then have the film X and film Y

1381
01:10:30,710 --> 01:10:35,659
and the film with thin film height and

1382
01:10:33,010 --> 01:10:37,699
those are actually the film X in film Y

1383
01:10:35,659 --> 01:10:40,369
are actually specified as you go through

1384
01:10:37,699 --> 01:10:43,909
the loop so I'm gonna kick them down to

1385
01:10:40,369 --> 01:10:46,279
the very bottom here I and if we look at

1386
01:10:43,909 --> 01:10:49,430
like half pix with half pix like that

1387
01:10:46,279 --> 01:10:51,489
sort of stuff and the film with the

1388
01:10:49,430 --> 01:10:57,079
height that stuff is actually computed

1389
01:10:51,489 --> 01:10:58,550
next right I could actually move this

1390
01:10:57,079 --> 01:11:03,890
stuff up as well I suppose if I wanted

1391
01:10:58,550 --> 01:11:05,690
to we could do that again with that back

1392
01:11:03,890 --> 01:11:08,000
kind of where we had it

1393
01:11:05,689 --> 01:11:10,879
all right so if we take a look at this

1394
01:11:08,000 --> 01:11:14,710
we specify the camera position pur the

1395
01:11:10,880 --> 01:11:18,380
camera Z the camera X and the camera Y

1396
01:11:14,710 --> 01:11:21,439
we are specifying all of those and it

1397
01:11:18,380 --> 01:11:22,819
looks like those are all correct so

1398
01:11:21,439 --> 01:11:23,809
that's good then we specify the width

1399
01:11:22,819 --> 01:11:26,420
and the height

1400
01:11:23,810 --> 01:11:30,890
those are specified here and then we

1401
01:11:26,420 --> 01:11:34,699
specify the the aspect ratio correction

1402
01:11:30,890 --> 01:11:39,469
which seems all totally reasonable we

1403
01:11:34,698 --> 01:11:44,210
then specify the halves for the film and

1404
01:11:39,469 --> 01:11:46,369
we create the film center like so and

1405
01:11:44,210 --> 01:11:51,100
then we have the half pix width and

1406
01:11:46,369 --> 01:11:53,769
height oops that we're specifying here

1407
01:11:51,100 --> 01:11:57,739
which again is pretty straightforward

1408
01:11:53,770 --> 01:11:59,239
and then we have the random series so I

1409
01:11:57,738 --> 01:12:02,089
think that's probably what we messed up

1410
01:11:59,238 --> 01:12:05,929
we forgot to set the random series so

1411
01:12:02,090 --> 01:12:08,300
let's go ahead and do that since that

1412
01:12:05,930 --> 01:12:10,280
comes through since that comes directly

1413
01:12:08,300 --> 01:12:11,449
out of the work order again I'm gonna

1414
01:12:10,279 --> 01:12:13,119
kind of put it up here because that's

1415
01:12:11,448 --> 01:12:21,019
sort of where that comes from

1416
01:12:13,119 --> 01:12:25,269
which is a little easier to follow and

1417
01:12:21,020 --> 01:12:25,270
we'll see if that helps us at all

1418
01:12:39,520 --> 01:12:43,180
all right so that's pretty clean that's

1419
01:12:41,619 --> 01:12:44,800
relatively close to the time we had

1420
01:12:43,180 --> 01:12:46,840
before so I'm happy with that as a

1421
01:12:44,800 --> 01:12:49,210
starting point and now we've got a

1422
01:12:46,840 --> 01:12:54,880
function called cat sample race which we

1423
01:12:49,210 --> 01:12:56,710
can look at as something that will that

1424
01:12:54,880 --> 01:12:58,300
will do sort of all of the heavy lifting

1425
01:12:56,710 --> 01:13:00,430
for us right this is where all of our

1426
01:12:58,300 --> 01:13:03,400
time is spent pretty much this function

1427
01:13:00,430 --> 01:13:06,880
is you know the thing that we want to

1428
01:13:03,399 --> 01:13:09,849
make as fast as possible so if we want

1429
01:13:06,880 --> 01:13:11,640
to start increasing the width of this if

1430
01:13:09,850 --> 01:13:14,500
we want to go ahead and up this to

1431
01:13:11,640 --> 01:13:16,090
computing four or eight rays at a time

1432
01:13:14,500 --> 01:13:17,829
then what we can sort of do is take a

1433
01:13:16,090 --> 01:13:22,150
look at this rays per pixel value and

1434
01:13:17,829 --> 01:13:25,659
say well what if we were to just you

1435
01:13:22,149 --> 01:13:27,729
know we could sort of do this one of two

1436
01:13:25,659 --> 01:13:32,590
ways and don't don't know exactly which

1437
01:13:27,729 --> 01:13:35,409
way would be smarter off offhand so one

1438
01:13:32,590 --> 01:13:37,409
way we can look at it is let's take the

1439
01:13:35,409 --> 01:13:40,779
number of rays per pixel we're gonna do

1440
01:13:37,409 --> 01:13:45,939
and let's multiply that number of rays

1441
01:13:40,779 --> 01:13:52,149
per pixel out so that we're casting you

1442
01:13:45,939 --> 01:13:54,819
know we're casting four or eight rays at

1443
01:13:52,149 --> 01:13:56,379
once and so the number of rays for pixel

1444
01:13:54,819 --> 01:13:58,569
we cast will be or the number of loops

1445
01:13:56,380 --> 01:14:01,239
will be the Rays per pixel divided by

1446
01:13:58,569 --> 01:14:02,889
that with four or eight or sixteen if

1447
01:14:01,239 --> 01:14:07,260
you have maybe X 512 although I've heard

1448
01:14:02,890 --> 01:14:07,260
avx-512 is really dicey right now

1449
01:14:12,270 --> 01:14:16,930
look apparently you don't really want to

1450
01:14:14,380 --> 01:14:19,119
use avx-512 yet it's just not quite the

1451
01:14:16,930 --> 01:14:22,300
chips are not quite handling it like the

1452
01:14:19,119 --> 01:14:25,630
i-9s that's why I've heard anyway

1453
01:14:22,300 --> 01:14:27,010
just that's what I've heard so yeah

1454
01:14:25,630 --> 01:14:28,869
we're talk about four or eight so either

1455
01:14:27,010 --> 01:14:32,020
we divide race by race four pixels by

1456
01:14:28,869 --> 01:14:32,890
four by eight and we go that's one way

1457
01:14:32,020 --> 01:14:33,940
to do it that seems like the most

1458
01:14:32,890 --> 01:14:35,140
straightforward way to do it might be

1459
01:14:33,939 --> 01:14:37,539
the way we do it the other way we could

1460
01:14:35,140 --> 01:14:40,390
do it is cast sample raise actually

1461
01:14:37,539 --> 01:14:44,800
takes for film X's film wise and

1462
01:14:40,390 --> 01:14:47,410
actually does just a whole loop as if

1463
01:14:44,800 --> 01:14:53,079
you were doing four pixels at a time

1464
01:14:47,409 --> 01:14:58,989
right so instead of looping over the X's

1465
01:14:53,079 --> 01:15:01,600
and Y's as you know as a individual

1466
01:14:58,989 --> 01:15:05,349
pixel at a time we loop over for eight

1467
01:15:01,600 --> 01:15:08,800
or 16 pixel blocks so a 4 by 4 block a 2

1468
01:15:05,350 --> 01:15:11,320
by 2 block that kind of thing or you

1469
01:15:08,800 --> 01:15:14,289
know 4 by 2 in the case of 8 something

1470
01:15:11,319 --> 01:15:17,109
like that so basically coming up with

1471
01:15:14,289 --> 01:15:19,000
some way of stacking that film X so my

1472
01:15:17,109 --> 01:15:21,759
and what you can kind of see is that

1473
01:15:19,000 --> 01:15:27,130
really this is the only thing that

1474
01:15:21,760 --> 01:15:29,980
depends on that so we could load in this

1475
01:15:27,130 --> 01:15:34,840
film X and fill film Y could be wide and

1476
01:15:29,979 --> 01:15:39,689
then we'd just run and again I don't

1477
01:15:34,840 --> 01:15:39,690
really know which of those is best

1478
01:15:40,619 --> 01:15:49,680
my gut instinct says honestly that we

1479
01:15:44,020 --> 01:15:49,680
should just do it in pixel blocks

1480
01:15:56,390 --> 01:16:01,619
but that guidance that could be very

1481
01:15:58,350 --> 01:16:06,239
wrong so yeah I'm thinking maybe we just

1482
01:16:01,619 --> 01:16:07,050
do that in pixel blocks and I'm just

1483
01:16:06,238 --> 01:16:08,488
rying to thinking what the difference

1484
01:16:07,050 --> 01:16:10,079
would be so if we did it in pixel blocks

1485
01:16:08,488 --> 01:16:11,309
this whole loop this is basically all

1486
01:16:10,079 --> 01:16:13,350
exactly the same

1487
01:16:11,310 --> 01:16:16,200
everything here is exactly as you see it

1488
01:16:13,350 --> 01:16:19,469
except it all gets eight wide if we did

1489
01:16:16,199 --> 01:16:25,319
it in rays per pixel instead then we

1490
01:16:19,469 --> 01:16:27,719
have to do this eight times to sort of

1491
01:16:25,319 --> 01:16:30,719
stack we need to generate eight

1492
01:16:27,719 --> 01:16:35,279
different bilaterals there and then

1493
01:16:30,719 --> 01:16:36,659
we'll add to a replicated X so we do you

1494
01:16:35,279 --> 01:16:39,139
know we do this eight wide like we

1495
01:16:36,659 --> 01:16:44,729
normally would this X gets replicated

1496
01:16:39,140 --> 01:16:51,869
and then you know we're off off and

1497
01:16:44,729 --> 01:16:54,619
running and presumably everything else

1498
01:16:51,869 --> 01:16:54,619
stays the same

1499
01:17:07,349 --> 01:17:28,529
I don't yeah I don't really think that

1500
01:17:13,529 --> 01:17:35,340
there's anything left there to do so I

1501
01:17:28,529 --> 01:17:37,229
think everything else should be okay so

1502
01:17:35,340 --> 01:17:38,730
I don't know yeah it's a hard call it

1503
01:17:37,229 --> 01:17:40,789
doesn't really make that much of a

1504
01:17:38,729 --> 01:17:43,859
difference I think at the end of the day

1505
01:17:40,789 --> 01:17:47,880
it's so I suppose we can just keep it

1506
01:17:43,859 --> 01:17:52,979
confined to this loop for now so if we

1507
01:17:47,880 --> 01:17:54,090
wanted to to start with that what we

1508
01:17:52,979 --> 01:17:55,979
need to do is take a look at all the

1509
01:17:54,090 --> 01:17:59,340
it's the instructions that we actually

1510
01:17:55,979 --> 01:18:00,928
need to execute here and try to get

1511
01:17:59,340 --> 01:18:05,460
those things working in a way that's

1512
01:18:00,929 --> 01:18:07,050
actually going to be wide right so what

1513
01:18:05,460 --> 01:18:09,179
I want to do here is just start by

1514
01:18:07,050 --> 01:18:10,860
transforming this to something that

1515
01:18:09,179 --> 01:18:15,000
looks like it's going to be actually

1516
01:18:10,859 --> 01:18:16,380
executing wide so what I'm gonna do is

1517
01:18:15,000 --> 01:18:21,029
I'm gonna say that there's something

1518
01:18:16,380 --> 01:18:22,650
here called width or lane width and I'm

1519
01:18:21,029 --> 01:18:24,269
gonna say how many I want there to be

1520
01:18:22,649 --> 01:18:26,908
and so I'm gonna start out with a lane

1521
01:18:24,270 --> 01:18:29,400
with the four and what that means is

1522
01:18:26,908 --> 01:18:33,210
that the raised pixel will be divided by

1523
01:18:29,399 --> 01:18:36,629
that lane width so I'm only going to I

1524
01:18:33,210 --> 01:18:39,630
guess Lane ray count or something like

1525
01:18:36,630 --> 01:18:41,880
that is gonna be this race for pixel

1526
01:18:39,630 --> 01:18:43,828
divided by the lane width so that's how

1527
01:18:41,880 --> 01:18:45,929
many iterations of the loop we actually

1528
01:18:43,828 --> 01:18:49,590
have to do because we're actually

1529
01:18:45,929 --> 01:18:50,719
computing more Ray's than one every time

1530
01:18:49,590 --> 01:18:55,050
through right

1531
01:18:50,719 --> 01:18:58,349
and so this Lane width here oops sorry

1532
01:18:55,050 --> 01:19:02,159
Lane ray count is what we would loop

1533
01:18:58,349 --> 01:19:06,539
over and we would do you know each of

1534
01:19:02,158 --> 01:19:08,250
these only that only that many times now

1535
01:19:06,539 --> 01:19:10,828
if I were to run this it would still run

1536
01:19:08,250 --> 01:19:12,899
and in theory it should now run roughly

1537
01:19:10,828 --> 01:19:15,599
four times faster because we simply

1538
01:19:12,899 --> 01:19:17,848
aren't you know we're not actually doing

1539
01:19:15,599 --> 01:19:20,550
the work that we said that we were going

1540
01:19:17,849 --> 01:19:22,199
to do right I will point out that I

1541
01:19:20,550 --> 01:19:24,329
think we have some weird artifact and

1542
01:19:22,198 --> 01:19:30,178
going on there right you can see some

1543
01:19:24,328 --> 01:19:32,609
sort of weird tile boundary kinds of

1544
01:19:30,179 --> 01:19:33,929
things happening there and I'm not sure

1545
01:19:32,609 --> 01:19:35,098
if that's an artifact of the random

1546
01:19:33,929 --> 01:19:37,649
number generation we'll have to take a

1547
01:19:35,099 --> 01:19:40,409
look at it a little bit later but as you

1548
01:19:37,649 --> 01:19:42,058
sort of dropped that down to a lesser

1549
01:19:40,408 --> 01:19:43,859
number right you can see get the lane

1550
01:19:42,059 --> 01:19:46,320
but this one I don't think we see those

1551
01:19:43,859 --> 01:19:48,179
artifacts but if the lane width is four

1552
01:19:46,319 --> 01:19:54,569
so we're just doing you know two and

1553
01:19:48,179 --> 01:19:55,679
fifty six raised instead of 1024 you see

1554
01:19:54,569 --> 01:20:01,289
it and I don't know if that's because

1555
01:19:55,679 --> 01:20:03,889
the contribution factors like as you

1556
01:20:01,289 --> 01:20:06,630
take more rays you smooth over any

1557
01:20:03,889 --> 01:20:14,039
errors in your now you can still see him

1558
01:20:06,630 --> 01:20:16,109
right you can definitely still see him

1559
01:20:14,039 --> 01:20:20,868
there and I don't think those are

1560
01:20:16,109 --> 01:20:20,868
present previously right

1561
01:20:35,359 --> 01:20:43,519
so here's our second damage and yeah you

1562
01:20:42,079 --> 01:20:51,109
know you know you can't really see those

1563
01:20:43,520 --> 01:20:53,060
right so my assumption again is just

1564
01:20:51,109 --> 01:20:58,609
that that is something so let me let me

1565
01:20:53,060 --> 01:21:07,270
crank that let me crank that Lane count

1566
01:20:58,609 --> 01:21:11,719
back to four there and let's take a look

1567
01:21:07,270 --> 01:21:13,430
if we replace our X or shift here that

1568
01:21:11,720 --> 01:21:22,430
we're we're doing a random unilateral if

1569
01:21:13,430 --> 01:21:26,690
I was to get rid of that again so here's

1570
01:21:22,430 --> 01:21:28,820
a see runtime library Rand I'm assuming

1571
01:21:26,689 --> 01:21:30,259
that it's just an artifact of the way

1572
01:21:28,819 --> 01:21:31,819
that we're seeding the random number

1573
01:21:30,260 --> 01:21:34,010
generator and the fact that our random

1574
01:21:31,819 --> 01:21:36,380
number generator is not very random like

1575
01:21:34,010 --> 01:21:38,570
I said originally that causes that

1576
01:21:36,380 --> 01:21:41,090
problem I just want to verify that yeah

1577
01:21:38,569 --> 01:21:43,309
so you can see that that we're seeing an

1578
01:21:41,090 --> 01:21:47,119
artifact of that not really very random

1579
01:21:43,310 --> 01:21:48,590
random number that's causing it so I'm

1580
01:21:47,119 --> 01:21:50,029
fine with that doesn't I don't care

1581
01:21:48,590 --> 01:21:54,409
about that at all right now that's again

1582
01:21:50,029 --> 01:21:55,909
something that we need to do to take

1583
01:21:54,409 --> 01:21:57,229
care of a little bit later on so but

1584
01:21:55,909 --> 01:21:58,369
there you can actually see it and this

1585
01:21:57,229 --> 01:21:59,929
is exactly I was talking about where

1586
01:21:58,369 --> 01:22:01,130
you're your source of entropy matters

1587
01:21:59,930 --> 01:22:03,800
right

1588
01:22:01,130 --> 01:22:05,779
because if there's a bias to what it's

1589
01:22:03,800 --> 01:22:08,180
producing you will end up seeing that

1590
01:22:05,779 --> 01:22:09,859
somewhere but that's okay again not

1591
01:22:08,180 --> 01:22:12,490
really something that we care about so

1592
01:22:09,859 --> 01:22:12,489
really

1593
01:22:33,210 --> 01:22:37,689
so we'll take care of that a little bit

1594
01:22:35,470 --> 01:22:39,130
later on but for now it's fine for our

1595
01:22:37,689 --> 01:22:42,429
purposes because we're really just

1596
01:22:39,130 --> 01:22:44,079
concerned about the the part of the

1597
01:22:42,430 --> 01:22:46,539
performance and the quality is something

1598
01:22:44,079 --> 01:22:47,710
that will prove slowly over time all

1599
01:22:46,539 --> 01:22:50,760
right so when we're doing our cast

1600
01:22:47,710 --> 01:22:52,899
sampler race here what we need to do is

1601
01:22:50,760 --> 01:22:53,860
we need to start figuring about how

1602
01:22:52,899 --> 01:22:56,049
we're going to make this a little bit

1603
01:22:53,859 --> 01:22:58,210
wider and so if we take a look at what's

1604
01:22:56,050 --> 01:23:00,760
going on here some things like this a

1605
01:22:58,210 --> 01:23:02,380
lot of these operations can just be done

1606
01:23:00,760 --> 01:23:04,510
wide a lot of them like all of this

1607
01:23:02,380 --> 01:23:06,850
stuff here could just be done wide right

1608
01:23:04,510 --> 01:23:13,420
so for example if we introduced a type

1609
01:23:06,850 --> 01:23:15,610
called the lane v3 for example like this

1610
01:23:13,420 --> 01:23:18,940
then a lot of these operations could

1611
01:23:15,609 --> 01:23:22,179
simply be done as wide operations and

1612
01:23:18,939 --> 01:23:28,029
the same is true really of most of these

1613
01:23:22,180 --> 01:23:30,250
things where we've got like you know and

1614
01:23:28,029 --> 01:23:32,199
that's actually a type that I used in

1615
01:23:30,250 --> 01:23:36,159
the real world hence it's built into the

1616
01:23:32,199 --> 01:23:38,949
editor highlighting so if we were to go

1617
01:23:36,159 --> 01:23:41,680
ahead and just start talking about a

1618
01:23:38,949 --> 01:23:44,109
type that was itself actually wider a

1619
01:23:41,680 --> 01:23:46,810
lot of the stuff we could actually just

1620
01:23:44,109 --> 01:23:49,299
make be wide and there really wouldn't

1621
01:23:46,810 --> 01:23:51,430
be much else we'd have to do about it as

1622
01:23:49,300 --> 01:23:53,760
we go through these these sort of bounce

1623
01:23:51,430 --> 01:23:55,960
computations most of this stuff I think

1624
01:23:53,760 --> 01:23:57,480
would actually just work and so we'll

1625
01:23:55,960 --> 01:24:01,029
have to see whether we can make that

1626
01:23:57,479 --> 01:24:04,299
happen now when we do something like a

1627
01:24:01,029 --> 01:24:06,639
bounce computation we have to be really

1628
01:24:04,300 --> 01:24:09,310
careful about how we handle this because

1629
01:24:06,640 --> 01:24:11,680
we need to know whether or not Alayne is

1630
01:24:09,310 --> 01:24:16,060
actually active or not right and there's

1631
01:24:11,680 --> 01:24:18,690
this kind of nasty thing that has to

1632
01:24:16,060 --> 01:24:18,690
happen here

1633
01:24:22,248 --> 01:24:26,760
so we're gonna have to look at that as

1634
01:24:24,238 --> 01:24:29,009
well now when we loop over things like

1635
01:24:26,760 --> 01:24:31,559
the planes that's all going to work

1636
01:24:29,010 --> 01:24:33,239
pretty much exactly as it should but

1637
01:24:31,559 --> 01:24:35,099
what we need to do is lock those plane

1638
01:24:33,238 --> 01:24:36,748
values out into values that we can

1639
01:24:35,099 --> 01:24:39,389
actually operate on a little more

1640
01:24:36,748 --> 01:24:40,738
cleanly and for our purposes what we

1641
01:24:39,389 --> 01:24:44,038
could do there's two ways we can

1642
01:24:40,738 --> 01:24:45,569
approach this and for the moment we'll

1643
01:24:44,038 --> 01:24:47,819
use the slower way but we can try using

1644
01:24:45,569 --> 01:24:49,438
a faster way in the future right now

1645
01:24:47,819 --> 01:24:50,938
what we'll do is we'll use the slow way

1646
01:24:49,439 --> 01:24:53,070
which is that every time we iterate over

1647
01:24:50,939 --> 01:24:56,869
the plains we'll loft the values that

1648
01:24:53,069 --> 01:24:58,679
are in the plane out into actual

1649
01:24:56,868 --> 01:25:00,509
replicated values that we'll test

1650
01:24:58,679 --> 01:25:03,149
against in the future we could actually

1651
01:25:00,510 --> 01:25:04,979
store these probably a little bit

1652
01:25:03,149 --> 01:25:06,929
differently and and maybe test against

1653
01:25:04,979 --> 01:25:11,399
them in a little bit faster fashion

1654
01:25:06,929 --> 01:25:12,510
potentially I it might not really make a

1655
01:25:11,399 --> 01:25:14,639
difference that's why I don't want to do

1656
01:25:12,510 --> 01:25:16,889
it at first because we may find that

1657
01:25:14,639 --> 01:25:20,279
there's really no benefit to be had by

1658
01:25:16,889 --> 01:25:22,409
fussing with it but anyway so assuming

1659
01:25:20,279 --> 01:25:24,628
that we were going to take the plane end

1660
01:25:22,408 --> 01:25:29,488
for example we'd have to put that out

1661
01:25:24,628 --> 01:25:33,149
into a wider variable rate erection is

1662
01:25:29,488 --> 01:25:35,638
already wide this is a denominator right

1663
01:25:33,149 --> 01:25:37,709
and then we get into sort of these if

1664
01:25:35,639 --> 01:25:40,319
statements here which are problematic

1665
01:25:37,708 --> 01:25:42,958
for our purposes because we need to

1666
01:25:40,319 --> 01:25:44,398
compute when we do these ifs we're going

1667
01:25:42,958 --> 01:25:45,688
to end up computing something here

1668
01:25:44,399 --> 01:25:48,809
that's actually it could be different

1669
01:25:45,689 --> 01:25:50,609
for every lane so what we need to do is

1670
01:25:48,809 --> 01:25:53,248
we need to basically treat this more

1671
01:25:50,609 --> 01:25:55,379
like a mask where we're going to always

1672
01:25:53,248 --> 01:25:57,569
be computing these values but then we

1673
01:25:55,378 --> 01:25:59,760
only actually use them sometimes right

1674
01:25:57,569 --> 01:26:03,929
so what we want to do here is we want to

1675
01:25:59,760 --> 01:26:05,550
turn this sort of stuff for example into

1676
01:26:03,929 --> 01:26:07,609
something that's an actual mask so we

1677
01:26:05,550 --> 01:26:11,338
want you know maybe something like this

1678
01:26:07,609 --> 01:26:16,019
which is like our you know our genome

1679
01:26:11,338 --> 01:26:19,439
mask or something here this these tests

1680
01:26:16,019 --> 01:26:20,820
will produce a mask we can use where we

1681
01:26:19,439 --> 01:26:22,349
will have ones in the places where it

1682
01:26:20,819 --> 01:26:25,319
passed and zeros in the places where it

1683
01:26:22,349 --> 01:26:28,498
failed for each lane right and then

1684
01:26:25,319 --> 01:26:30,838
there's no you know there's no hierarchy

1685
01:26:28,498 --> 01:26:32,969
to this right because again when you've

1686
01:26:30,838 --> 01:26:34,229
got four things happening at once some

1687
01:26:32,969 --> 01:26:34,409
of them only true and some of them may

1688
01:26:34,229 --> 01:26:36,060
be

1689
01:26:34,409 --> 01:26:39,840
false so you have to execute all the

1690
01:26:36,060 --> 01:26:41,490
code all the time you can put a test in

1691
01:26:39,840 --> 01:26:43,650
so that if all of the things in the mask

1692
01:26:41,489 --> 01:26:45,630
fail right then you don't have to do it

1693
01:26:43,649 --> 01:26:47,189
but for our purposes there so little

1694
01:26:45,630 --> 01:26:49,500
code here I don't know that a jump is

1695
01:26:47,189 --> 01:26:52,639
really a good idea so that's hard to say

1696
01:26:49,500 --> 01:26:54,720
again you have to test that figured out

1697
01:26:52,640 --> 01:26:57,210
so the two things were computing you're

1698
01:26:54,720 --> 01:26:58,770
the denominator here and the T and again

1699
01:26:57,210 --> 01:27:01,170
this denominator is going to potentially

1700
01:26:58,770 --> 01:27:03,540
be zero we just have to allow divide by

1701
01:27:01,170 --> 01:27:05,789
zero and the mask will mask it out later

1702
01:27:03,539 --> 01:27:07,439
but basically we have to make sure that

1703
01:27:05,789 --> 01:27:09,000
the cemg unit is in a place where it

1704
01:27:07,439 --> 01:27:10,259
won't fault on divide by zero which by

1705
01:27:09,000 --> 01:27:11,010
default they don't think it does so I

1706
01:27:10,260 --> 01:27:14,190
don't think there's anything in

1707
01:27:11,010 --> 01:27:15,989
particular that we have to do there so

1708
01:27:14,189 --> 01:27:18,569
we've got a diene a mask and a t mask

1709
01:27:15,989 --> 01:27:20,699
right you can see these two masks about

1710
01:27:18,569 --> 01:27:23,489
what we need to do is we need to and

1711
01:27:20,699 --> 01:27:25,769
these two masks together and that gives

1712
01:27:23,489 --> 01:27:28,469
us our final mask right so our hid mask

1713
01:27:25,770 --> 01:27:32,970
is just going to be everywhere that the

1714
01:27:28,470 --> 01:27:35,909
denominator mask and the team asked both

1715
01:27:32,970 --> 01:27:38,960
past right and where they both passed is

1716
01:27:35,909 --> 01:27:43,139
a place where we actually have a T value

1717
01:27:38,960 --> 01:27:47,159
that we want to record and so the hid

1718
01:27:43,140 --> 01:27:52,250
distance hit mat index and next normal

1719
01:27:47,159 --> 01:27:55,019
stuff all of that stuff will be set

1720
01:27:52,250 --> 01:27:57,449
conditionally and so what I want to do

1721
01:27:55,020 --> 01:28:01,560
is I want to set these conditional like

1722
01:27:57,449 --> 01:28:06,659
a conditional equals basically where we

1723
01:28:01,560 --> 01:28:09,690
say okay the hit mask is the thing we're

1724
01:28:06,659 --> 01:28:12,359
based to say the hip distance is going

1725
01:28:09,689 --> 01:28:15,379
to be set if the hid mask is true it

1726
01:28:12,359 --> 01:28:15,380
will be set to T right

1727
01:28:22,500 --> 01:28:27,238
and that plane we need a couple other

1728
01:28:25,270 --> 01:28:30,070
things serious we've got the plane end

1729
01:28:27,238 --> 01:28:34,718
put the plane D right so that's a lane

1730
01:28:30,069 --> 01:28:42,569
f/32 we've got the plane D here so that

1731
01:28:34,719 --> 01:28:57,130
plane D has to come out as well like so

1732
01:28:42,569 --> 01:29:03,880
and all of these things are going to get

1733
01:28:57,130 --> 01:29:05,440
set in that fashion right so yeah so you

1734
01:29:03,880 --> 01:29:09,300
can see here exactly we're doing it's

1735
01:29:05,439 --> 01:29:17,078
really straightforward we just need a

1736
01:29:09,300 --> 01:29:19,538
middle class conditional assign so

1737
01:29:17,078 --> 01:29:21,038
basically like I've set this value equal

1738
01:29:19,538 --> 01:29:22,750
to this value if the intermediate and

1739
01:29:21,038 --> 01:29:26,340
hit mask is set to one there or whatever

1740
01:29:22,750 --> 01:29:26,340
right that's all I'm doing

1741
01:29:27,420 --> 01:29:32,590
so then we would want to do the same

1742
01:29:29,920 --> 01:29:34,420
thing with spheres right and in this

1743
01:29:32,590 --> 01:29:35,739
case the mat index I guess is also has

1744
01:29:34,420 --> 01:29:38,859
to be so we have Alain your three two

1745
01:29:35,738 --> 01:29:44,549
here which is the mat index claim that

1746
01:29:38,859 --> 01:29:44,549
index and that's playing that mat index

1747
01:29:45,899 --> 01:29:50,229
and that way we're not referencing

1748
01:29:48,099 --> 01:29:52,179
anything we loft these values out into

1749
01:29:50,229 --> 01:29:54,638
four wide values or however wide we want

1750
01:29:52,179 --> 01:29:57,639
and then we do the operations we were

1751
01:29:54,639 --> 01:29:58,929
going to do so then we do our spheres

1752
01:29:57,639 --> 01:30:03,699
and we'd want to do the spheres the

1753
01:29:58,929 --> 01:30:12,038
exact same way so we'd have a lane V 3

1754
01:30:03,698 --> 01:30:14,759
which is our sphere P we would have our

1755
01:30:12,038 --> 01:30:14,759
sphere radius

1756
01:30:24,698 --> 01:30:31,578
and is there anything else I don't know

1757
01:30:29,719 --> 01:30:38,828
that there is find out second here I

1758
01:30:31,578 --> 01:30:42,349
guess we got the Matt index so again

1759
01:30:38,828 --> 01:30:45,590
nothing particularly odd here

1760
01:30:42,349 --> 01:30:47,569
really nothing nothing bizarre happening

1761
01:30:45,590 --> 01:30:49,998
all of these things will have to become

1762
01:30:47,569 --> 01:30:53,448
lane related but now we've got the exact

1763
01:30:49,998 --> 01:30:55,399
same situation as we had before where

1764
01:30:53,448 --> 01:30:57,109
we've got some if statements here and we

1765
01:30:55,399 --> 01:30:58,578
know that we can't really have if

1766
01:30:57,109 --> 01:31:00,649
statements right like if statements

1767
01:30:58,578 --> 01:31:02,090
aren't gonna fly not unless there's a

1768
01:31:00,649 --> 01:31:04,638
ton of code in them if there's a ton of

1769
01:31:02,090 --> 01:31:05,989
code in an if statement then we do want

1770
01:31:04,639 --> 01:31:07,219
to keep the is we still have to do all

1771
01:31:05,988 --> 01:31:09,618
the code but we want to have the if

1772
01:31:07,219 --> 01:31:10,939
statement have a baling condition which

1773
01:31:09,618 --> 01:31:13,130
would basically be something that looks

1774
01:31:10,939 --> 01:31:14,538
to see whether the the masks that are

1775
01:31:13,130 --> 01:31:16,550
computed are all zeros and if so with

1776
01:31:14,538 --> 01:31:18,679
bales I don't know that we've quite got

1777
01:31:16,550 --> 01:31:19,729
enough code for that we might I mean

1778
01:31:18,679 --> 01:31:21,859
there is a fair bit of code here it

1779
01:31:19,729 --> 01:31:23,900
could be that we could save some time by

1780
01:31:21,859 --> 01:31:26,839
branching around it same is true here

1781
01:31:23,899 --> 01:31:30,708
but again don't really want to look at

1782
01:31:26,840 --> 01:31:39,458
that just quite yet so here's our root

1783
01:31:30,708 --> 01:31:45,708
mask right this stuff all has to get

1784
01:31:39,458 --> 01:31:47,719
computed either way here this part oops

1785
01:31:45,708 --> 01:31:49,458
is a little bizarre because this is

1786
01:31:47,719 --> 01:31:53,840
essentially a thing that's just picking

1787
01:31:49,458 --> 01:31:56,929
which of the hits to use so it's

1788
01:31:53,840 --> 01:32:00,590
actually a dependent so we've got a

1789
01:31:56,929 --> 01:32:04,279
youth playing 32 here which is the guess

1790
01:32:00,590 --> 01:32:06,619
the piste pick which hit we're doing so

1791
01:32:04,279 --> 01:32:10,849
we've got a pick mask there and then

1792
01:32:06,618 --> 01:32:16,549
we're doing conditional assign of T on

1793
01:32:10,849 --> 01:32:17,958
the pick mask like so right we've then

1794
01:32:16,550 --> 01:32:25,779
got our hit mask

1795
01:32:17,958 --> 01:32:28,609
oh sorry our t mask and our hit mask is

1796
01:32:25,779 --> 01:32:31,139
whatever the root mask was

1797
01:32:28,609 --> 01:32:35,429
andddd with the team asked just like

1798
01:32:31,140 --> 01:32:38,329
before and then we've got a bunch of

1799
01:32:35,430 --> 01:32:38,329
conditional assignments

1800
01:32:48,069 --> 01:33:11,229
that's still a valid complaint so we're

1801
01:32:53,840 --> 01:33:11,230
going to leave it all right

1802
01:33:17,359 --> 01:33:23,329
so what we have now done like you can

1803
01:33:21,229 --> 01:33:26,029
see here is we've basically made these

1804
01:33:23,329 --> 01:33:27,920
sort of nominally wide by making some

1805
01:33:26,029 --> 01:33:29,869
types that would work if we define them

1806
01:33:27,920 --> 01:33:31,310
to be wide we haven't defined those

1807
01:33:29,869 --> 01:33:33,890
types yet so this isn't gonna compile at

1808
01:33:31,310 --> 01:33:35,300
all so we have a bunch of errors and

1809
01:33:33,890 --> 01:33:36,980
then we've kind of sketched in what the

1810
01:33:35,300 --> 01:33:38,510
actual operations are we need here we

1811
01:33:36,979 --> 01:33:41,449
need conditional assigned we need like

1812
01:33:38,510 --> 01:33:43,340
you know inner product we need square

1813
01:33:41,449 --> 01:33:45,949
root and so on we need all of those

1814
01:33:43,340 --> 01:33:49,130
things we need normalize or zero and all

1815
01:33:45,949 --> 01:33:51,229
that sort of stuff right so then we get

1816
01:33:49,130 --> 01:33:55,279
to the part where we do our kit maths

1817
01:33:51,229 --> 01:33:58,009
mat index here we kind of not have to

1818
01:33:55,279 --> 01:33:59,869
deal with this other part where if we

1819
01:33:58,010 --> 01:34:01,220
hit something versus if we didn't hit

1820
01:33:59,869 --> 01:34:04,220
something we have two different things

1821
01:34:01,220 --> 01:34:08,060
to do and that is the part that's

1822
01:34:04,220 --> 01:34:10,070
actually a little bit more complicated

1823
01:34:08,060 --> 01:34:12,440
that we have to kind of work on right

1824
01:34:10,069 --> 01:34:15,349
and so what we want to do here is say

1825
01:34:12,439 --> 01:34:17,239
all right let's start with with a couple

1826
01:34:15,350 --> 01:34:19,910
things that we need to put out at the

1827
01:34:17,239 --> 01:34:22,489
head end we have not done any monster

1828
01:34:19,909 --> 01:34:27,250
mination by the way so we need a lane

1829
01:34:22,489 --> 01:34:32,920
u-32 here for our bounces computed right

1830
01:34:27,250 --> 01:34:36,529
we need that we needed a lane u-32

1831
01:34:32,920 --> 01:34:45,010
that's going to be our like active mask

1832
01:34:36,529 --> 01:34:45,009
or our lane mask and our lane increment

1833
01:34:47,680 --> 01:34:52,100
and what I want to do here is our laning

1834
01:34:49,939 --> 01:34:55,750
commits gonna be one across the board

1835
01:34:52,100 --> 01:34:58,850
and our lane mask is gonna be you know

1836
01:34:55,750 --> 01:35:00,199
that's everywhere so for copies where

1837
01:34:58,850 --> 01:35:04,490
we've got the increment and the mask

1838
01:35:00,199 --> 01:35:06,710
both in there right and zero for our

1839
01:35:04,489 --> 01:35:09,319
bounce computed basically something that

1840
01:35:06,710 --> 01:35:11,300
looks like this and what I need to do

1841
01:35:09,319 --> 01:35:14,599
now is every time through here where

1842
01:35:11,300 --> 01:35:16,970
we're going to compute a bounce I want

1843
01:35:14,600 --> 01:35:19,100
to take our bounces computed and I want

1844
01:35:16,970 --> 01:35:23,030
to do an ad on the bounce is computed up

1845
01:35:19,100 --> 01:35:25,160
by the lane increment right and the

1846
01:35:23,029 --> 01:35:28,149
reason I need to do it this way is

1847
01:35:25,159 --> 01:35:31,099
because our bounces computed is now

1848
01:35:28,149 --> 01:35:33,679
actually not just going to be

1849
01:35:31,099 --> 01:35:35,179
the number the width times the the

1850
01:35:33,679 --> 01:35:37,989
number of times to the loop right

1851
01:35:35,179 --> 01:35:41,719
because we're gonna go through the loop

1852
01:35:37,988 --> 01:35:46,638
rays per pixel times divided by the lane

1853
01:35:41,719 --> 01:35:48,770
width but we went before so trying to

1854
01:35:46,639 --> 01:35:51,529
think to how explain this so before

1855
01:35:48,770 --> 01:35:53,960
every time through the loop we knew that

1856
01:35:51,529 --> 01:35:55,670
we were only going through here but

1857
01:35:53,960 --> 01:35:58,819
until we bounced enough because we would

1858
01:35:55,670 --> 01:36:00,800
break out if we if we hit the skylight

1859
01:35:58,819 --> 01:36:02,569
and there was nowhere left to bounce we

1860
01:36:00,800 --> 01:36:05,449
would just break out of the loop right

1861
01:36:02,569 --> 01:36:09,349
so we would naturally not count any

1862
01:36:05,448 --> 01:36:13,009
additional bounces there because we

1863
01:36:09,349 --> 01:36:16,099
wouldn't actually be executing this line

1864
01:36:13,010 --> 01:36:19,610
of code here we will keep going until

1865
01:36:16,099 --> 01:36:22,909
all of the Rays have not can't bounce

1866
01:36:19,609 --> 01:36:26,059
anymore which means that some of the

1867
01:36:22,908 --> 01:36:27,920
lanes will occasionally compute just

1868
01:36:26,060 --> 01:36:30,139
sitting there doing computations that

1869
01:36:27,920 --> 01:36:32,449
will just get thrown away because their

1870
01:36:30,139 --> 01:36:34,099
ray already terminated somewhere with a

1871
01:36:32,448 --> 01:36:36,888
bounce and there's nothing left to do

1872
01:36:34,099 --> 01:36:38,659
with it yet now in the future we could

1873
01:36:36,889 --> 01:36:41,118
get more sophisticated and try to do

1874
01:36:38,658 --> 01:36:43,039
weird things like packing new bounce

1875
01:36:41,118 --> 01:36:44,689
computations in there or whatever right

1876
01:36:43,039 --> 01:36:46,219
but at the moment we're trying to do

1877
01:36:44,689 --> 01:36:48,439
just a dumb thing where we just are

1878
01:36:46,219 --> 01:36:50,779
doing the same algorithm just wider and

1879
01:36:48,439 --> 01:36:52,519
so are in order to properly record the

1880
01:36:50,779 --> 01:36:55,219
statistics here what that means is that

1881
01:36:52,520 --> 01:36:57,349
when we actually terminate a ray bounce

1882
01:36:55,219 --> 01:36:59,270
chain down here I'm gonna have to

1883
01:36:57,349 --> 01:37:01,510
actually zero out that Lane in the

1884
01:36:59,270 --> 01:37:04,730
increment or so that we don't ever

1885
01:37:01,510 --> 01:37:08,300
operate on that again on four bounces

1886
01:37:04,729 --> 01:37:10,069
computed right then at the end when we

1887
01:37:08,300 --> 01:37:12,170
need to do bounce is computed we need to

1888
01:37:10,069 --> 01:37:15,738
just grab out the various parts of

1889
01:37:12,170 --> 01:37:18,349
bounce is computed and and some of them

1890
01:37:15,738 --> 01:37:23,299
together right so we basically want to

1891
01:37:18,349 --> 01:37:25,730
do a horizontal ad here on bounce is

1892
01:37:23,300 --> 01:37:27,050
computed to add all the lanes together

1893
01:37:25,729 --> 01:37:28,939
and that gives us how many bounces we

1894
01:37:27,050 --> 01:37:30,500
actually did how many we did per Lane

1895
01:37:28,939 --> 01:37:34,488
sum together is the total number of

1896
01:37:30,500 --> 01:37:36,069
bounces right and we can do further work

1897
01:37:34,488 --> 01:37:38,598
with that later on

1898
01:37:36,069 --> 01:37:39,590
okay so then when we're in here with our

1899
01:37:38,599 --> 01:37:41,960
hit mask index

1900
01:37:39,590 --> 01:37:44,840
I'm sorry hit art hit math hit matte

1901
01:37:41,960 --> 01:37:46,130
index we get back to the same problem

1902
01:37:44,840 --> 01:37:48,619
which is that we want to do both of

1903
01:37:46,130 --> 01:37:51,829
these paths for everybody so what we

1904
01:37:48,619 --> 01:37:54,050
want to do here sort of like with the

1905
01:37:51,829 --> 01:37:57,559
conditional sign is we need to do these

1906
01:37:54,050 --> 01:37:58,579
operations basically based exactly on

1907
01:37:57,560 --> 01:38:06,020
the thing that we were talking about

1908
01:37:58,579 --> 01:38:07,609
before where we you know where we do all

1909
01:38:06,020 --> 01:38:10,400
of the stuff we're going to do for a

1910
01:38:07,609 --> 01:38:12,199
bounce but we only use it if that thing

1911
01:38:10,399 --> 01:38:13,699
actually did properly hit something and

1912
01:38:12,199 --> 01:38:17,000
if it didn't properly hit something then

1913
01:38:13,699 --> 01:38:21,069
we just ignore the calculations we did

1914
01:38:17,000 --> 01:38:24,460
and we do something else with it right

1915
01:38:21,069 --> 01:38:27,409
so what we need to do here is we need to

1916
01:38:24,460 --> 01:38:28,760
be a little bit more conscious of how

1917
01:38:27,409 --> 01:38:30,050
we're tracking our materials and there

1918
01:38:28,760 --> 01:38:32,000
may be some things that we want to do

1919
01:38:30,050 --> 01:38:35,480
it's hard to say whether this is correct

1920
01:38:32,000 --> 01:38:36,829
or incorrect I don't really know so it's

1921
01:38:35,479 --> 01:38:39,619
worth taking a minute to talk about it

1922
01:38:36,829 --> 01:38:42,859
so what we see here is it's gonna depend

1923
01:38:39,619 --> 01:38:45,140
on how complicated our material is but

1924
01:38:42,859 --> 01:38:49,009
what you can see is that we've got a bad

1925
01:38:45,140 --> 01:38:51,410
downshift here we need to look up the

1926
01:38:49,010 --> 01:38:54,110
materials for each of these things and

1927
01:38:51,409 --> 01:38:57,319
we've got like four or eight lanes worth

1928
01:38:54,109 --> 01:39:00,049
where we would need to go look up off of

1929
01:38:57,319 --> 01:39:02,389
that material index and what you can

1930
01:39:00,050 --> 01:39:05,989
kind of see here is that materials as

1931
01:39:02,390 --> 01:39:08,630
they currently stand are very simple

1932
01:39:05,989 --> 01:39:12,319
they've got a scatter and emission color

1933
01:39:08,630 --> 01:39:16,159
and a reference color and we may really

1934
01:39:12,319 --> 01:39:18,229
want to just as we hit things grab that

1935
01:39:16,159 --> 01:39:19,309
information out and store it rather than

1936
01:39:18,229 --> 01:39:22,039
looking it up after the fact

1937
01:39:19,310 --> 01:39:23,450
I don't really know so if we were just

1938
01:39:22,039 --> 01:39:25,010
gonna stick with something this simple

1939
01:39:23,449 --> 01:39:27,500
we would probably want to just do the

1940
01:39:25,010 --> 01:39:29,840
conditional assign of these and track

1941
01:39:27,500 --> 01:39:31,340
them as we go however the reason I'm not

1942
01:39:29,840 --> 01:39:32,900
going to do that is because I'm going to

1943
01:39:31,340 --> 01:39:35,539
assume that this is going to get more

1944
01:39:32,899 --> 01:39:37,579
complicated later on and that we're

1945
01:39:35,539 --> 01:39:39,949
going to want to not copy it around

1946
01:39:37,579 --> 01:39:42,800
every time we do a hit that could still

1947
01:39:39,949 --> 01:39:44,179
be wrong I don't really know but the

1948
01:39:42,800 --> 01:39:46,279
point is we've now got a really nasty

1949
01:39:44,180 --> 01:39:48,170
downshift here not something I really

1950
01:39:46,279 --> 01:39:51,229
want to deal with but what can you do we

1951
01:39:48,170 --> 01:39:52,730
don't really have a choice so what we

1952
01:39:51,229 --> 01:39:54,769
need to do here is we need to pull out

1953
01:39:52,729 --> 01:39:57,689
the actual values of these materials and

1954
01:39:54,770 --> 01:40:02,810
actually do some kind

1955
01:39:57,689 --> 01:40:05,399
of processing that will yeah that will

1956
01:40:02,810 --> 01:40:05,910
allow us to do as much wide work as we

1957
01:40:05,399 --> 01:40:08,909
can

1958
01:40:05,909 --> 01:40:11,250
after loading some stuff so let's start

1959
01:40:08,909 --> 01:40:12,840
with the easy part first these things

1960
01:40:11,250 --> 01:40:13,649
here where we are doing these

1961
01:40:12,840 --> 01:40:20,670
permutations

1962
01:40:13,649 --> 01:40:23,179
I think these actually will just work I

1963
01:40:20,670 --> 01:40:26,190
guess I need to just set this to lane

1964
01:40:23,180 --> 01:40:28,829
here anywhere we were doing a bilateral

1965
01:40:26,189 --> 01:40:30,779
that needs to return a wide one we need

1966
01:40:28,829 --> 01:40:34,189
sort of a version that does Lane based

1967
01:40:30,779 --> 01:40:40,738
stuff there so these would both be Lane

1968
01:40:34,189 --> 01:40:43,469
and most of the rest of this right I

1969
01:40:40,738 --> 01:40:46,259
think just works so all of this stuff

1970
01:40:43,469 --> 01:40:48,239
here just works and so the only thing we

1971
01:40:46,260 --> 01:40:56,010
really have to do here even ray

1972
01:40:48,238 --> 01:40:57,539
direction I think is probably fine yeah

1973
01:40:56,010 --> 01:41:00,750
I really don't think we need to do

1974
01:40:57,539 --> 01:41:04,890
anything else I think all of this is

1975
01:41:00,750 --> 01:41:06,270
just fine as it is right so I think all

1976
01:41:04,890 --> 01:41:07,890
of that stuff is fine the only thing we

1977
01:41:06,270 --> 01:41:09,719
need to do is is here where we load the

1978
01:41:07,890 --> 01:41:17,130
material out that just that stuff needs

1979
01:41:09,719 --> 01:41:19,529
to get get sort of sliced right so yeah

1980
01:41:17,130 --> 01:41:23,659
this stuff is basically what we're

1981
01:41:19,529 --> 01:41:23,659
talking about so we have an emit color

1982
01:41:23,689 --> 01:41:33,559
that we're gonna have to do here Matt

1983
01:41:26,039 --> 01:41:33,560
emit color we've got a Matt ref color

1984
01:41:39,310 --> 01:41:55,330
and we've got a matte scatter and these

1985
01:41:51,130 --> 01:41:56,800
are the parts that we need to figure out

1986
01:41:55,329 --> 01:41:57,760
how to load and we'll talk about that in

1987
01:41:56,800 --> 01:41:59,050
a second

1988
01:41:57,760 --> 01:42:01,900
for now I want to get the rest of this

1989
01:41:59,050 --> 01:42:03,489
stuff working like I was saying for we

1990
01:42:01,899 --> 01:42:05,949
now have to kind of figure out how we're

1991
01:42:03,489 --> 01:42:10,090
gonna make all of this stuff work

1992
01:42:05,949 --> 01:42:12,760
coherently but as you can see we sort of

1993
01:42:10,090 --> 01:42:16,300
have a couple different problems that we

1994
01:42:12,760 --> 01:42:18,220
have to deal with here right so in one

1995
01:42:16,300 --> 01:42:21,159
case here we're doing sample Hadamard

1996
01:42:18,220 --> 01:42:23,590
attenuation matte color thing sorry

1997
01:42:21,159 --> 01:42:26,619
madam it color we've got the same thing

1998
01:42:23,590 --> 01:42:30,159
happening down here right from the matte

1999
01:42:26,619 --> 01:42:31,930
emit color so in either case actually if

2000
01:42:30,159 --> 01:42:34,569
we look at what we were doing in either

2001
01:42:31,930 --> 01:42:37,510
case we are doing this operation where

2002
01:42:34,569 --> 01:42:40,389
the sample value does get incremented by

2003
01:42:37,510 --> 01:42:43,180
that matte emit color so really that

2004
01:42:40,390 --> 01:42:47,610
part stays the same right that part

2005
01:42:43,180 --> 01:42:53,430
happens in either case with one sort of

2006
01:42:47,609 --> 01:42:56,319
important actually says with one

2007
01:42:53,430 --> 01:42:59,320
important caveat and that's this break

2008
01:42:56,319 --> 01:43:01,329
statement here so every Lane will get

2009
01:42:59,319 --> 01:43:04,439
the its material color added to it

2010
01:43:01,329 --> 01:43:07,989
unless this ray has already terminated

2011
01:43:04,439 --> 01:43:11,979
right so we know that the matte emit

2012
01:43:07,989 --> 01:43:14,380
color here when it gets loaded out we

2013
01:43:11,979 --> 01:43:21,399
know that that sort of has to properly

2014
01:43:14,380 --> 01:43:22,920
get axed as it goes through right so

2015
01:43:21,399 --> 01:43:26,589
what I'm going to say though is just

2016
01:43:22,920 --> 01:43:28,270
since we're doing a Hadamard product

2017
01:43:26,590 --> 01:43:30,610
already we know that if we set the

2018
01:43:28,270 --> 01:43:33,250
emission color to zero on the matte emit

2019
01:43:30,609 --> 01:43:36,399
color then we would be fine

2020
01:43:33,250 --> 01:43:41,909
because it wouldn't do anything so like

2021
01:43:36,399 --> 01:43:45,819
must return zero on mask on on Lane mask

2022
01:43:41,909 --> 01:43:48,670
right so we need to zero out these on

2023
01:43:45,819 --> 01:43:51,359
the on that mask now when we come

2024
01:43:48,670 --> 01:43:51,359
through here

2025
01:43:51,609 --> 01:43:57,849
the important part is our hit map index

2026
01:43:54,279 --> 01:43:59,768
if our hit mat index was zero we need to

2027
01:43:57,849 --> 01:44:03,309
terminate that ray but that's really

2028
01:43:59,769 --> 01:44:06,010
easy for us to do in this case so we

2029
01:44:03,309 --> 01:44:08,649
just need to do an not equal to zero and

2030
01:44:06,010 --> 01:44:11,378
if the thing was not equal to zero then

2031
01:44:08,649 --> 01:44:13,749
it can proceed otherwise it can't right

2032
01:44:11,378 --> 01:44:18,668
so all we really need to do here is

2033
01:44:13,748 --> 01:44:30,849
something that will extend that zero you

2034
01:44:18,668 --> 01:44:34,658
know this sort of thing so whatever our

2035
01:44:30,849 --> 01:44:36,639
lane mask was right and furthermore our

2036
01:44:34,658 --> 01:44:54,038
lane increment in fact you know we could

2037
01:44:36,639 --> 01:44:55,059
do yeah so here we'll just say okay the

2038
01:44:54,038 --> 01:44:56,948
laning current we don't have to store

2039
01:44:55,059 --> 01:44:58,719
you know it's just one but it gets

2040
01:44:56,948 --> 01:45:01,779
masked by whatever the lane mask is

2041
01:44:58,719 --> 01:45:04,719
right so here all we're doing is saying

2042
01:45:01,779 --> 01:45:07,029
hey after we tracked that emission color

2043
01:45:04,719 --> 01:45:10,689
here we're then gonna mask out anyone

2044
01:45:07,029 --> 01:45:12,849
who didn't hit anything is is a dead ray

2045
01:45:10,689 --> 01:45:17,349
Lane now that Lane just stops getting

2046
01:45:12,849 --> 01:45:18,639
computed entirely right then we just and

2047
01:45:17,349 --> 01:45:20,409
that's the equivalent of our break

2048
01:45:18,639 --> 01:45:22,719
statement right that's the break

2049
01:45:20,408 --> 01:45:24,128
statement it's saying that's it you know

2050
01:45:22,719 --> 01:45:29,319
we're not going to go any further in

2051
01:45:24,128 --> 01:45:31,479
there furthermore here we can have this

2052
01:45:29,319 --> 01:45:36,219
max bounce count we can terminate this

2053
01:45:31,479 --> 01:45:39,849
properly we could say that at the end

2054
01:45:36,219 --> 01:45:46,029
here right we know that you know if the

2055
01:45:39,849 --> 01:45:47,949
lane mask you know if all zero right we

2056
01:45:46,029 --> 01:45:51,809
could say if our lane mask falls out so

2057
01:45:47,948 --> 01:45:56,108
there's literally no more lanes at all

2058
01:45:51,809 --> 01:45:59,579
then stop right so only keep going while

2059
01:45:56,109 --> 01:45:59,579
our lanes are you know

2060
01:46:00,859 --> 01:46:11,839
you know if we have something that will

2061
01:46:07,220 --> 01:46:13,340
check if these are all zeros then we

2062
01:46:11,840 --> 01:46:16,940
don't want to you know we don't want to

2063
01:46:13,340 --> 01:46:18,350
do it anyway anymore right or I don't

2064
01:46:16,939 --> 01:46:19,519
know we'll think about what this

2065
01:46:18,350 --> 01:46:20,900
function has to be called apparently all

2066
01:46:19,520 --> 01:46:23,030
zeros we want to be able only check like

2067
01:46:20,899 --> 01:46:24,589
the high bit probably you do that so

2068
01:46:23,029 --> 01:46:35,509
what we probably want to do here is say

2069
01:46:24,590 --> 01:46:41,390
if if high bit if all Lane high if high

2070
01:46:35,510 --> 01:46:43,369
bit of each lane is zero high bit of all

2071
01:46:41,390 --> 01:46:45,380
lanes is zero something like that right

2072
01:46:43,369 --> 01:46:48,079
so we can just say okay look if this

2073
01:46:45,380 --> 01:46:51,560
Lane mask we know there's all ones or

2074
01:46:48,079 --> 01:46:57,970
all zeroes in each slot so look at the

2075
01:46:51,560 --> 01:46:57,970
high bit of each or whatever or whatever

2076
01:46:59,319 --> 01:47:02,989
we don't even need that it's just we

2077
01:47:01,609 --> 01:47:11,719
know that there's one zeros need to one

2078
01:47:02,989 --> 01:47:23,748
if something like that

2079
01:47:11,719 --> 01:47:25,010
I don't know I'll just call it that I

2080
01:47:23,748 --> 01:47:26,960
don't know I don't know what to call it

2081
01:47:25,010 --> 01:47:29,389
but point being we know that we have a

2082
01:47:26,960 --> 01:47:32,389
mask we know that the mass will be ones

2083
01:47:29,389 --> 01:47:34,069
or zeros entirely in each lane based on

2084
01:47:32,389 --> 01:47:36,109
whether or not that lane is active so we

2085
01:47:34,069 --> 01:47:40,189
just need anything the processor can do

2086
01:47:36,109 --> 01:47:42,529
so if it was on arm or sse or whatever

2087
01:47:40,189 --> 01:47:44,868
it was on as long as there's something

2088
01:47:42,529 --> 01:47:47,478
that can say look to see whether there's

2089
01:47:44,868 --> 01:47:49,578
any ones or any zeros in these slots

2090
01:47:47,479 --> 01:47:51,170
whichever kind of function you can

2091
01:47:49,578 --> 01:47:54,558
support we just need you to do that

2092
01:47:51,170 --> 01:47:56,868
thing and when it comes back we'll break

2093
01:47:54,559 --> 01:47:58,699
if the mask is like therefore nominally

2094
01:47:56,868 --> 01:48:00,049
zero but we don't need you to look like

2095
01:47:58,698 --> 01:48:01,038
I just trying to throw what the name

2096
01:48:00,050 --> 01:48:03,619
would be for saying we don't need you to

2097
01:48:01,038 --> 01:48:05,868
look at each bit because we're promising

2098
01:48:03,618 --> 01:48:07,728
you that all the bits in each lane will

2099
01:48:05,868 --> 01:48:09,049
be the same value they'll all be one so

2100
01:48:07,729 --> 01:48:12,110
they'll all be zeros so you don't have

2101
01:48:09,050 --> 01:48:13,099
to check them all right that's all I was

2102
01:48:12,109 --> 01:48:14,268
trying to get across with the name and

2103
01:48:13,099 --> 01:48:18,319
it was a little bit a little bit

2104
01:48:14,269 --> 01:48:19,940
difficult okay so that's what we're

2105
01:48:18,319 --> 01:48:21,920
doing there and now we've got our

2106
01:48:19,939 --> 01:48:22,339
situation where we sort of have what we

2107
01:48:21,920 --> 01:48:25,190
want

2108
01:48:22,340 --> 01:48:26,719
sketched out here it's the load that's a

2109
01:48:25,189 --> 01:48:28,609
little bit a little bit tricky but let

2110
01:48:26,719 --> 01:48:30,679
me finish the rest of this so after we

2111
01:48:28,609 --> 01:48:32,899
update our lane then we go through and

2112
01:48:30,679 --> 01:48:34,489
we just say here that we need to clamp

2113
01:48:32,899 --> 01:48:38,598
these this stuff so we do an inner

2114
01:48:34,488 --> 01:48:45,828
product and we want to do a clamp here

2115
01:48:38,599 --> 01:48:48,920
like this this I can rephrase as I want

2116
01:48:45,828 --> 01:48:54,189
to take the maximum value whichever one

2117
01:48:48,920 --> 01:48:54,190
is higher right I either want to take I

2118
01:48:54,309 --> 01:48:58,670
either want to take the inner product or

2119
01:48:56,658 --> 01:49:01,399
I want to take zero right whichever

2120
01:48:58,670 --> 01:49:03,949
one's higher we're going to produce the

2121
01:49:01,399 --> 01:49:05,779
new attenuation value by multiplying

2122
01:49:03,948 --> 01:49:07,969
these two together and that's all fine

2123
01:49:05,779 --> 01:49:11,658
we're going to update the rate origin

2124
01:49:07,969 --> 01:49:16,729
this way we are going to then do the

2125
01:49:11,658 --> 01:49:21,728
permutations this way and that's about

2126
01:49:16,729 --> 01:49:25,130
it right and off we go

2127
01:49:21,729 --> 01:49:28,369
so each one of these like I said is

2128
01:49:25,130 --> 01:49:30,079
calculating a sample value so at the end

2129
01:49:28,369 --> 01:49:32,329
here we're going to end up with the

2130
01:49:30,079 --> 01:49:35,569
final color that we need to actually

2131
01:49:32,329 --> 01:49:38,269
output that's getting summed and you can

2132
01:49:35,569 --> 01:49:43,630
see that now this is sort of wide this

2133
01:49:38,270 --> 01:49:43,630
contribs now not really an accurate

2134
01:49:44,800 --> 01:49:51,070
value yet because we now have four color

2135
01:49:48,380 --> 01:49:55,970
values that are sort of stacked right

2136
01:49:51,069 --> 01:49:57,859
horizontally so we then need to do v3 we

2137
01:49:55,970 --> 01:50:02,930
need to do a horizontal add on this as

2138
01:49:57,859 --> 01:50:05,539
well where we sort of add together those

2139
01:50:02,930 --> 01:50:07,310
four different VIII's that we've come we

2140
01:50:05,539 --> 01:50:09,920
are however many there are smoosh them

2141
01:50:07,310 --> 01:50:19,340
together into an actual final color that

2142
01:50:09,920 --> 01:50:22,029
we can then return right I think if I'm

2143
01:50:19,340 --> 01:50:25,369
not mistaken this is actually a mistake

2144
01:50:22,029 --> 01:50:27,079
in that case because since we're summing

2145
01:50:25,369 --> 01:50:30,199
everything together still and the

2146
01:50:27,079 --> 01:50:33,199
horizontal add we do need that for still

2147
01:50:30,199 --> 01:50:34,729
in there so this contribu is still

2148
01:50:33,199 --> 01:50:38,199
raised for pixel I think it doesn't

2149
01:50:34,729 --> 01:50:41,599
change right I think that's all the same

2150
01:50:38,199 --> 01:50:43,579
now that contribu do the multiplication

2151
01:50:41,600 --> 01:50:45,950
down here that sample and final color

2152
01:50:43,579 --> 01:50:52,329
all of that stuff is actually laying

2153
01:50:45,949 --> 01:50:55,239
VIII's so that I think all of that

2154
01:50:52,329 --> 01:50:58,220
actually actually needs to be

2155
01:50:55,239 --> 01:51:02,929
contributes to that needs to be Lane b3

2156
01:50:58,220 --> 01:51:08,800
s so these are really still Lane V 3s

2157
01:51:02,930 --> 01:51:08,800
and bounce bounce is computed here I

2158
01:51:10,539 --> 01:51:16,369
think actually comes out here right so

2159
01:51:13,880 --> 01:51:19,369
bounce is computed again that's getting

2160
01:51:16,369 --> 01:51:26,359
added to every time through the loop

2161
01:51:19,369 --> 01:51:29,680
like this so I think all of that is

2162
01:51:26,359 --> 01:51:29,679
pretty much right

2163
01:51:29,770 --> 01:51:46,190
yeah yeah yeah all right so looking at

2164
01:51:44,479 --> 01:51:48,289
how these are happening here where we've

2165
01:51:46,189 --> 01:51:50,689
got camera X and all that stuff so all

2166
01:51:48,289 --> 01:52:01,578
of these now also want to be lane based

2167
01:51:50,689 --> 01:52:06,649
right and they're just lane based

2168
01:52:01,578 --> 01:52:10,039
constants and what we need to do here is

2169
01:52:06,649 --> 01:52:11,960
just assume that they're just going to

2170
01:52:10,039 --> 01:52:13,969
be replicated right there's no these

2171
01:52:11,960 --> 01:52:15,590
values can all be just replicated out so

2172
01:52:13,969 --> 01:52:18,980
these will just replicate them into Lane

2173
01:52:15,590 --> 01:52:25,099
values right so I think now we have

2174
01:52:18,979 --> 01:52:26,868
effectively have everything we need sort

2175
01:52:25,099 --> 01:52:30,440
of sketched out with how this would be

2176
01:52:26,868 --> 01:52:32,479
Cindy eyes right and so what I want to

2177
01:52:30,439 --> 01:52:38,779
do now is I want to just do a quick

2178
01:52:32,479 --> 01:52:41,750
sketch of making this work one wide so

2179
01:52:38,779 --> 01:52:46,130
we did all this work right but I could

2180
01:52:41,750 --> 01:52:47,868
just make the lane with b1 and define

2181
01:52:46,130 --> 01:52:50,900
all these functions to stub out to their

2182
01:52:47,868 --> 01:52:53,179
actual versions that we already wrote

2183
01:52:50,899 --> 01:52:56,569
and it should still work and that way we

2184
01:52:53,179 --> 01:52:58,609
can debug the like masking and all that

2185
01:52:56,569 --> 01:53:00,799
stuff without actually half and use any

2186
01:52:58,609 --> 01:53:01,549
Cindy instructions and without worrying

2187
01:53:00,800 --> 01:53:04,940
about any of that

2188
01:53:01,550 --> 01:53:07,279
right so if I look in handmade ray what

2189
01:53:04,939 --> 01:53:12,169
I'm gonna do is I'm gonna open a thing

2190
01:53:07,279 --> 01:53:14,868
called ray Lane an h-file that's just

2191
01:53:12,170 --> 01:53:16,279
gonna define all of this stuff and so

2192
01:53:14,868 --> 01:53:20,479
what I'm gonna do here is I'm gonna say

2193
01:53:16,279 --> 01:53:27,198
okay well you know an f32 is just a is

2194
01:53:20,479 --> 01:53:29,529
just a Lane f32 in a lane year 32 and a

2195
01:53:27,198 --> 01:53:33,339
lane v3 they're all just what they are

2196
01:53:29,529 --> 01:53:35,868
already right there there's nothing

2197
01:53:33,340 --> 01:53:38,409
special about them at all they're all

2198
01:53:35,868 --> 01:53:41,630
exactly what you think they are right

2199
01:53:38,408 --> 01:53:43,109
and then I'm gonna go ahead and include

2200
01:53:41,630 --> 01:53:44,730
that in here

2201
01:53:43,109 --> 01:53:47,159
so in addition to Ray math we're going

2202
01:53:44,729 --> 01:53:51,719
to include rail aah

2203
01:53:47,159 --> 01:53:54,329
and off we go and so then we only have

2204
01:53:51,720 --> 01:54:01,680
just a few errors left to go like

2205
01:53:54,329 --> 01:54:04,439
bilateral lane right and that's

2206
01:54:01,680 --> 01:54:09,270
something I'll put in here so this is

2207
01:54:04,439 --> 01:54:25,049
going to return a lane f32 and all that

2208
01:54:09,270 --> 01:54:31,110
is is so then we've got this conditional

2209
01:54:25,050 --> 01:54:35,970
assign I'm going to put that in here and

2210
01:54:31,109 --> 01:54:37,529
the conditional assign this just takes

2211
01:54:35,970 --> 01:54:42,500
you know the various different types

2212
01:54:37,529 --> 01:54:54,000
that we've set here we've got you know a

2213
01:54:42,500 --> 01:54:56,609
mask a desk and a source and all we're

2214
01:54:54,000 --> 01:55:05,939
going to do here is say that desk equals

2215
01:54:56,609 --> 01:55:09,389
you know if the mask is one we want the

2216
01:55:05,939 --> 01:55:13,979
source to be assigned so we want to do

2217
01:55:09,390 --> 01:55:15,539
an end with the source right that will

2218
01:55:13,979 --> 01:55:17,549
tell us which of the source things to

2219
01:55:15,539 --> 01:55:19,590
come in then we want to take the

2220
01:55:17,550 --> 01:55:21,390
opposite of the mask whatever the mask

2221
01:55:19,590 --> 01:55:22,949
was we want to flip it so that we now we

2222
01:55:21,390 --> 01:55:25,770
have ones in the places where the mask

2223
01:55:22,949 --> 01:55:27,329
was not set and that's what would tell

2224
01:55:25,770 --> 01:55:29,640
us which parts of the desk to keep and

2225
01:55:27,329 --> 01:55:30,869
then we or those two together right so

2226
01:55:29,640 --> 01:55:33,510
we're just doing a thing where we

2227
01:55:30,869 --> 01:55:35,309
basically we take the mask and we use

2228
01:55:33,510 --> 01:55:36,750
the positive version of the mask to pick

2229
01:55:35,310 --> 01:55:39,150
up the source the negative version of

2230
01:55:36,750 --> 01:55:45,890
the master got the desk and that is what

2231
01:55:39,149 --> 01:55:45,889
updates our desk right so that's good

2232
01:55:46,909 --> 01:55:52,769
what is the problem

2233
01:55:48,840 --> 01:55:55,539
address is a legal right operand right

2234
01:55:52,770 --> 01:55:58,860
operand oh here we go

2235
01:55:55,539 --> 01:55:58,859
what was the problem there

2236
01:56:08,649 --> 01:56:17,859
I don't see what the problem is

2237
01:56:12,969 --> 01:56:21,399
oh I do see the problem is okay so this

2238
01:56:17,859 --> 01:56:22,809
is just a artifact of C for some reasons

2239
01:56:21,399 --> 01:56:25,988
he doesn't let you mask floating-point

2240
01:56:22,810 --> 01:56:30,159
values I don't know why so I have to

2241
01:56:25,988 --> 01:56:33,669
cast this to a you 32 first right it's

2242
01:56:30,158 --> 01:56:35,710
just annoying so these are

2243
01:56:33,670 --> 01:56:38,020
floating-point values and I have to cast

2244
01:56:35,710 --> 01:56:40,510
them right conversion from lane to Lane

2245
01:56:38,020 --> 01:56:48,760
F 32 yes so this will produce an

2246
01:56:40,510 --> 01:56:49,810
entirely it's gonna do it entirely new

2247
01:56:48,760 --> 01:56:52,719
three twos does the only things that

2248
01:56:49,810 --> 01:56:57,659
allow masking an orange together but we

2249
01:56:52,719 --> 01:56:57,658
know that this is actually an F 32 right

2250
01:57:00,448 --> 01:57:05,888
anyway so once we have that we know we

2251
01:57:03,939 --> 01:57:07,988
can do the one for you 32 the one for

2252
01:57:05,889 --> 01:57:10,900
you 32 is even easier in fact we could

2253
01:57:07,988 --> 01:57:15,459
now just call the you 32 one to do the F

2254
01:57:10,899 --> 01:57:17,098
32 one right so you know I'll leave it

2255
01:57:15,460 --> 01:57:20,198
like this for now but we could just call

2256
01:57:17,099 --> 01:57:22,989
we could just call the you 32 one to do

2257
01:57:20,198 --> 01:57:24,488
the F 32 one instead right so in this

2258
01:57:22,988 --> 01:57:26,408
case now we don't need the casting

2259
01:57:24,488 --> 01:57:29,019
because it's actually just the way we

2260
01:57:26,408 --> 01:57:32,738
want it and so we can just do this

2261
01:57:29,020 --> 01:57:37,830
directly now because we don't have to do

2262
01:57:32,738 --> 01:57:37,829
the reinterpreting all the time we go

2263
01:57:38,698 --> 01:57:44,289
right so again if we want to do it this

2264
01:57:41,920 --> 01:57:46,569
way we could do in fact me let me know

2265
01:57:44,289 --> 01:57:50,618
just do it right so what we could do is

2266
01:57:46,569 --> 01:57:58,299
say well pretend this is au 32 you know

2267
01:57:50,618 --> 01:58:03,299
pretend this is au 32 right do the

2268
01:57:58,300 --> 01:58:03,300
operation and then assign desk to it

2269
01:58:04,779 --> 01:58:12,458
or assign it to desk I should say right

2270
01:58:07,130 --> 01:58:12,458
so now we have like an f32 version and a

2271
01:58:18,698 --> 01:58:24,408
and a u32 version should avoid a

2272
01:58:22,519 --> 01:58:25,309
conditional assign oh you know what we

2273
01:58:24,408 --> 01:58:26,420
don't even have to do it that way

2274
01:58:25,309 --> 01:58:29,689
nevermind because this does the assign

2275
01:58:26,420 --> 01:58:32,208
directly so there we go and then finally

2276
01:58:29,689 --> 01:58:34,340
we just need the one that works on the

2277
01:58:32,208 --> 01:58:36,198
threes and that one is pretty easy to do

2278
01:58:34,340 --> 01:58:45,260
because this one will just call three

2279
01:58:36,198 --> 01:58:46,998
times the conditional assign on each of

2280
01:58:45,260 --> 01:58:51,469
the members right so this will be like

2281
01:58:46,998 --> 01:58:56,228
DES Tech's mass source X right this just

2282
01:58:51,469 --> 01:59:08,599
this just replicates the function across

2283
01:58:56,229 --> 01:59:11,989
the various values right and this looks

2284
01:59:08,599 --> 01:59:25,090
like a what is hip distance here hip

2285
01:59:11,988 --> 01:59:28,248
distance distance is Alain F 32 and T

2286
01:59:25,090 --> 01:59:30,349
there's an F 32 hit mask is au 32 what's

2287
01:59:28,248 --> 01:59:34,219
the problem another Rios could convert

2288
01:59:30,349 --> 01:59:38,119
the types ah cuz these new addresses

2289
01:59:34,219 --> 01:59:40,719
it's fine this is our load that we

2290
01:59:38,118 --> 01:59:44,058
haven't finished yet and here's our max

2291
01:59:40,719 --> 01:59:47,590
so our max value again this is a kind of

2292
01:59:44,059 --> 01:59:54,170
a special version we've got to do here

2293
01:59:47,590 --> 01:59:56,420
but that's okay so here's our max that's

2294
01:59:54,170 --> 01:59:58,519
going to take an A and a B and it's

2295
01:59:56,420 --> 02:00:02,599
going to return whichever one is higher

2296
01:59:58,519 --> 02:00:04,429
right that's pretty easy to do if a is

2297
02:00:02,599 --> 02:00:10,069
higher than B then return a otherwise

2298
02:00:04,429 --> 02:00:13,359
return B right that will return the

2299
02:00:10,069 --> 02:00:13,359
maximum value in either case

2300
02:00:14,460 --> 02:00:24,619
and then we've just got our last sort of

2301
02:00:17,539 --> 02:00:28,859
two here we've got an internal rule

2302
02:00:24,619 --> 02:00:37,109
which is mask is erode that's going to

2303
02:00:28,859 --> 02:00:41,880
take one of our lane masks and we've

2304
02:00:37,109 --> 02:00:46,469
also got the horizontal ad that's going

2305
02:00:41,880 --> 02:00:51,989
to return an f32 if you've got a lane of

2306
02:00:46,470 --> 02:00:53,640
thirty-two and it's going to return a v3

2307
02:00:51,989 --> 02:00:55,289
if you've got a lane b3

2308
02:00:53,640 --> 02:00:56,460
so basically whichever one you were

2309
02:00:55,289 --> 02:00:58,350
trying to whereas on the lad it will

2310
02:00:56,460 --> 02:01:00,750
horizontal ad it obviously this one can

2311
02:00:58,350 --> 02:01:02,820
be written in terms of the other one so

2312
02:01:00,750 --> 02:01:07,220
the result in this case can just be

2313
02:01:02,819 --> 02:01:07,219
horizontal ads on the components right

2314
02:01:12,199 --> 02:01:16,289
so we don't really need to write this

2315
02:01:15,000 --> 02:01:18,810
when we only really need to write this

2316
02:01:16,289 --> 02:01:20,880
one in this case because we are talking

2317
02:01:18,810 --> 02:01:22,289
about the scalar version horizontal ad

2318
02:01:20,880 --> 02:01:25,770
actually doesn't do anything there are

2319
02:01:22,289 --> 02:01:27,840
no lanes to add together so the result

2320
02:01:25,770 --> 02:01:30,420
is just whatever the resulting whatever

2321
02:01:27,840 --> 02:01:32,340
you passed in right masked is zeroed

2322
02:01:30,420 --> 02:01:33,630
same thing we don't really have to check

2323
02:01:32,340 --> 02:01:35,460
multiple Maps because we've only got one

2324
02:01:33,630 --> 02:01:37,829
so the result is just if the lane mask

2325
02:01:35,460 --> 02:01:44,039
is not equal to zero or I should say is

2326
02:01:37,829 --> 02:01:45,689
equal to zero right and that's about it

2327
02:01:44,039 --> 02:01:48,149
now if we take a look at what else we've

2328
02:01:45,689 --> 02:01:51,389
got here a conversion from Lane

2329
02:01:48,149 --> 02:01:54,449
thirty-two d'Alene F 32 so we need a a

2330
02:01:51,390 --> 02:01:57,329
u3 to version there I guess maybe we

2331
02:01:54,449 --> 02:02:00,119
don't actually have any of these other

2332
02:01:57,329 --> 02:02:02,609
than used in the v3 one but it's no big

2333
02:02:00,119 --> 02:02:08,970
deal I so curiously you thirty-two

2334
02:02:02,609 --> 02:02:10,799
version and here's the horizontal ad now

2335
02:02:08,970 --> 02:02:13,230
we do have one slight problem here which

2336
02:02:10,800 --> 02:02:14,820
is that I we wouldn't be tracking a full

2337
02:02:13,229 --> 02:02:16,319
64 a bit so if we turned out we

2338
02:02:14,819 --> 02:02:19,799
multiplied - we did too many of these

2339
02:02:16,319 --> 02:02:21,299
bounces we could wrap and so I don't

2340
02:02:19,800 --> 02:02:23,789
know exactly how we want to prevent that

2341
02:02:21,300 --> 02:02:25,940
we won't be having that problem if we

2342
02:02:23,789 --> 02:02:28,729
keep the tile sizes small enough but

2343
02:02:25,939 --> 02:02:32,119
I should probably put it to you in

2344
02:02:28,729 --> 02:02:34,579
because it's a little bit dicey right

2345
02:02:32,119 --> 02:02:39,279
and so in here where we do bounce is

2346
02:02:34,579 --> 02:02:39,279
computed should probably put it to do

2347
02:02:46,238 --> 02:02:50,689
all right so the last thing we need to

2348
02:02:49,310 --> 02:02:53,360
do is have some way of loading these

2349
02:02:50,689 --> 02:02:56,359
things up here you know hip mat index

2350
02:02:53,359 --> 02:02:58,729
again this because of the way we're

2351
02:02:56,359 --> 02:03:14,809
doing it we can just make this whole

2352
02:02:58,729 --> 02:03:16,399
thing it to do here and and end because

2353
02:03:14,810 --> 02:03:19,550
since we happen to know that all of

2354
02:03:16,399 --> 02:03:20,509
these are scalar at the moment this can

2355
02:03:19,550 --> 02:03:22,940
just be cheesed

2356
02:03:20,510 --> 02:03:25,210
by loading out just one but we're gonna

2357
02:03:22,939 --> 02:03:31,189
have to load out lane with of those

2358
02:03:25,210 --> 02:03:33,739
eventually fear mat index looks like it

2359
02:03:31,189 --> 02:03:39,069
wasn't loaded

2360
02:03:33,738 --> 02:03:41,448
this needs to be a dot here there we go

2361
02:03:39,069 --> 02:03:43,609
all right and so now we've got some

2362
02:03:41,448 --> 02:03:46,638
debugging to do and that's probably what

2363
02:03:43,609 --> 02:03:48,619
I'll finish the stream with is just I'll

2364
02:03:46,639 --> 02:03:51,260
probably turn off the automatic ray cast

2365
02:03:48,619 --> 02:03:53,599
part of this here and we'll go debug

2366
02:03:51,260 --> 02:03:58,460
anything that we messed up you can see

2367
02:03:53,600 --> 02:04:00,710
not a particularly great result there so

2368
02:03:58,460 --> 02:04:04,969
so we definitely have a couple bugs in

2369
02:04:00,710 --> 02:04:06,889
it but again all we have to do is just

2370
02:04:04,969 --> 02:04:10,899
to bug these and then we're in position

2371
02:04:06,889 --> 02:04:15,279
to actually next time we do handmade ray

2372
02:04:10,899 --> 02:04:17,988
we're in position to kind of you know

2373
02:04:15,279 --> 02:04:21,250
move to a Cindy is version fairly

2374
02:04:17,988 --> 02:04:23,809
cleanly that won't be too bad right

2375
02:04:21,250 --> 02:04:25,639
okay so the first thing I want to do is

2376
02:04:23,810 --> 02:04:29,830
in build up bat I don't really want to

2377
02:04:25,639 --> 02:04:34,699
be running this anymore I don't want to

2378
02:04:29,829 --> 02:04:36,439
- actually I don't want to actually run

2379
02:04:34,698 --> 02:04:38,519
the ray caster I just want to compile

2380
02:04:36,439 --> 02:04:40,919
because I want to run in

2381
02:04:38,520 --> 02:04:42,420
the debugger and so all I'm gonna do

2382
02:04:40,920 --> 02:04:45,359
here is I'm just gonna step through here

2383
02:04:42,420 --> 02:04:46,890
and see roughly what's going on in the

2384
02:04:45,359 --> 02:04:50,339
parts that I think might be somewhat

2385
02:04:46,890 --> 02:04:52,170
suspicious right so I'm just gonna first

2386
02:04:50,340 --> 02:04:53,730
take a look at like what's happening

2387
02:04:52,170 --> 02:04:55,859
like with off x and off-white

2388
02:04:53,729 --> 02:04:58,409
oh whoops let me also and our build up

2389
02:04:55,859 --> 02:05:01,739
at let me go ahead and change this to be

2390
02:04:58,409 --> 02:05:03,239
unoptimized so that it's easier for us

2391
02:05:01,739 --> 02:05:06,420
to inspect the values in the debugger

2392
02:05:03,239 --> 02:05:09,329
and see what's going on so let's take a

2393
02:05:06,420 --> 02:05:13,560
look at what these are oh and one other

2394
02:05:09,329 --> 02:05:20,970
thing I also like to do is turn off

2395
02:05:13,560 --> 02:05:29,030
threading so somewhere in here we get

2396
02:05:20,970 --> 02:05:29,030
core counts we go

2397
02:05:35,920 --> 02:05:38,440
and so now we won't have multiple

2398
02:05:37,359 --> 02:05:41,529
threads kind of racing through her

2399
02:05:38,439 --> 02:05:47,288
making it annoying so here's our offset

2400
02:05:41,529 --> 02:05:50,550
X and our offset Y I just gonna look and

2401
02:05:47,288 --> 02:05:53,170
see yeah that looks pretty reasonable

2402
02:05:50,550 --> 02:05:54,489
one thing I will say is this is we got

2403
02:05:53,170 --> 02:05:56,559
some errors in here you know when we

2404
02:05:54,488 --> 02:05:59,109
actually go to tighten the stuff up this

2405
02:05:56,559 --> 02:06:01,269
this is not the center of a pixel it's

2406
02:05:59,109 --> 02:06:04,118
the corner of a pixel so this should

2407
02:06:01,269 --> 02:06:06,760
really be a random unilateral I think I

2408
02:06:04,118 --> 02:06:09,658
think that's just wrong in fact let me

2409
02:06:06,760 --> 02:06:09,659
just change that while we're at it

2410
02:06:18,449 --> 02:06:22,579
right I mean unless I'm wrong about that

2411
02:06:23,899 --> 02:06:30,329
film X film why are the very corner so

2412
02:06:27,180 --> 02:06:33,270
you're only going in so you really don't

2413
02:06:30,329 --> 02:06:36,840
want it to be half pix W you want it to

2414
02:06:33,270 --> 02:06:41,690
be just pics W and H we could set it to

2415
02:06:36,840 --> 02:06:44,039
the center I would be the other option I

2416
02:06:41,689 --> 02:06:53,729
mean I could just do this instead I

2417
02:06:44,039 --> 02:06:56,100
suppose right where we would just step

2418
02:06:53,729 --> 02:06:57,449
into that middle and then that way this

2419
02:06:56,100 --> 02:06:59,900
random bilateral maybe I'll do it that

2420
02:06:57,449 --> 02:07:04,380
way I mean why not

2421
02:06:59,899 --> 02:07:11,849
not a la riesen not to I suppose

2422
02:07:04,380 --> 02:07:12,989
oops so just notice that as a stepping

2423
02:07:11,850 --> 02:07:18,560
through might as well fix it one there

2424
02:07:12,988 --> 02:07:18,559
so now our offsets are properly I think

2425
02:07:19,488 --> 02:07:30,859
perfectly set I don't know why yeah I

2426
02:07:27,630 --> 02:07:30,859
don't know why we didn't notice that

2427
02:07:31,939 --> 02:07:38,429
looks like our state value is zero that

2428
02:07:35,159 --> 02:07:40,729
also seems wrong why is our state value

2429
02:07:38,430 --> 02:07:40,730
zero

2430
02:07:44,470 --> 02:07:49,050
we do initialize these somewhere right I

2431
02:07:51,689 --> 02:07:57,339
mean here's where we initialize these we

2432
02:07:54,699 --> 02:08:01,539
put it into order entropy when we come

2433
02:07:57,340 --> 02:08:06,390
through here and we do render tile we

2434
02:08:01,539 --> 02:08:06,390
assign state series to order entropy

2435
02:08:16,559 --> 02:08:20,610
so I'm really not sure why that's zero

2436
02:08:18,809 --> 02:08:22,860
and I would like to know so I'm going to

2437
02:08:20,609 --> 02:08:25,618
step back out here because I'm again

2438
02:08:22,859 --> 02:08:26,939
just a little bit weirded out by that so

2439
02:08:25,618 --> 02:08:29,729
here's our random serious and there's

2440
02:08:26,939 --> 02:08:31,259
nothing in the state value if we take a

2441
02:08:29,729 --> 02:08:33,868
look at the work order itself the

2442
02:08:31,260 --> 02:08:38,460
entropy value is also zero so I'm just

2443
02:08:33,868 --> 02:08:45,179
curious to know oh you know why because

2444
02:08:38,460 --> 02:08:46,529
we don't have any offset here the other

2445
02:08:45,179 --> 02:08:50,000
thing we kind of need to do and I should

2446
02:08:46,529 --> 02:08:50,000
I should probably just do it now as well

2447
02:08:50,658 --> 02:09:03,529
I should probably make sure that this

2448
02:08:54,090 --> 02:09:07,788
entropy value gets updated per the state

2449
02:09:03,529 --> 02:09:07,788
like I think we kind of want to do this

2450
02:09:10,729 --> 02:09:19,529
so that we so that we as we step through

2451
02:09:17,550 --> 02:09:22,050
the pixels we're using different random

2452
02:09:19,529 --> 02:09:23,488
rays because the way we had it before we

2453
02:09:22,050 --> 02:09:25,050
wouldn't update it so every pixel would

2454
02:09:23,488 --> 02:09:28,229
use the same random series which doesn't

2455
02:09:25,050 --> 02:09:32,309
seem like a good idea right all right

2456
02:09:28,229 --> 02:09:35,698
that looks more correct to me there's

2457
02:09:32,309 --> 02:09:40,550
our film P setting up the origin in the

2458
02:09:35,698 --> 02:09:40,549
direction here for this Ray

2459
02:09:48,090 --> 02:09:52,720
all that stuff seems right setting up

2460
02:09:50,859 --> 02:09:55,659
the sample setting up the attenuation

2461
02:09:52,720 --> 02:09:58,630
value setting up the lane mask then we

2462
02:09:55,659 --> 02:10:00,519
come through the bounces start enough

2463
02:09:58,630 --> 02:10:02,560
our hit distance hit mask all that stuff

2464
02:10:00,520 --> 02:10:05,620
gets cleared our lane increment is one

2465
02:10:02,560 --> 02:10:07,960
our lane mask is still on so we're gonna

2466
02:10:05,619 --> 02:10:10,599
do bats computed should should think up

2467
02:10:07,960 --> 02:10:15,880
one we go through our planes we get out

2468
02:10:10,600 --> 02:10:17,710
the planes we do our masks right and I

2469
02:10:15,880 --> 02:10:20,440
guess one problem you know what there's

2470
02:10:17,710 --> 02:10:23,590
our problem right there when we do these

2471
02:10:20,439 --> 02:10:25,750
comparisons one of the problems we're

2472
02:10:23,590 --> 02:10:28,539
gonna run into here is that they need to

2473
02:10:25,750 --> 02:10:32,859
be set to all ones or all zeros and at

2474
02:10:28,539 --> 02:10:35,019
the moment they aren't right and so that

2475
02:10:32,859 --> 02:10:37,089
conditional assign is gonna break so

2476
02:10:35,020 --> 02:10:40,510
that's the first thing you know I'm

2477
02:10:37,090 --> 02:10:42,279
thinking Cindy terms and we didn't

2478
02:10:40,510 --> 02:10:45,310
really replicate what's gonna happen in

2479
02:10:42,279 --> 02:10:46,899
Cindy correctly so what we actually want

2480
02:10:45,310 --> 02:10:50,230
to do there when we do conditional sign

2481
02:10:46,899 --> 02:10:53,199
I suppose is instead of masking we need

2482
02:10:50,229 --> 02:10:54,819
to do it as an actual test because that

2483
02:10:53,199 --> 02:10:59,349
mask is not going to be right now the

2484
02:10:54,819 --> 02:11:07,359
way I could do that is do a mass equals

2485
02:10:59,350 --> 02:11:09,100
mask right so if there's anything set in

2486
02:11:07,359 --> 02:11:14,199
the mask it will become all FS otherwise

2487
02:11:09,100 --> 02:11:21,820
it's gonna become zero right let me try

2488
02:11:14,199 --> 02:11:24,159
that now when we go into the conditional

2489
02:11:21,819 --> 02:11:27,399
assign right the mask will be set to all

2490
02:11:24,159 --> 02:11:29,590
FS and then we'll do a mask of the

2491
02:11:27,399 --> 02:11:32,199
source board with a mask of the inverse

2492
02:11:29,590 --> 02:11:34,449
the desk there right and then we should

2493
02:11:32,199 --> 02:11:35,679
be set to one of the other so the desk

2494
02:11:34,449 --> 02:11:38,409
should now be equal to the source for

2495
02:11:35,680 --> 02:11:42,039
example in this case which it is and so

2496
02:11:38,409 --> 02:11:47,019
that's a little bit better off all right

2497
02:11:42,039 --> 02:11:49,569
let me go ahead and let that run let me

2498
02:11:47,020 --> 02:11:52,680
see I don't know I want a picture of

2499
02:11:49,569 --> 02:11:52,679
where we're at bug wise

2500
02:11:55,789 --> 02:12:00,170
and this is gonna be a lot slower

2501
02:11:57,680 --> 02:12:02,210
because we've introduced a bunch of

2502
02:12:00,170 --> 02:12:05,960
complexity that didn't need to be there

2503
02:12:02,210 --> 02:12:09,109
right for the scalar version in order to

2504
02:12:05,960 --> 02:12:11,750
go wide and so you know this is this is

2505
02:12:09,109 --> 02:12:14,319
going to be a slower version than our

2506
02:12:11,750 --> 02:12:23,119
previous version for scalar for sure

2507
02:12:14,319 --> 02:12:25,659
right and you can kind of see it

2508
02:12:23,119 --> 02:12:25,659
creeping up there

2509
02:13:24,819 --> 02:13:31,119
so let's just take a look at what we

2510
02:13:26,380 --> 02:13:33,279
ended up with there so it's not that far

2511
02:13:31,119 --> 02:13:35,649
off anymore right we're we're a little

2512
02:13:33,279 --> 02:13:37,269
bit closer we're obviously doing a

2513
02:13:35,649 --> 02:13:38,829
little bit of our summation wrong but at

2514
02:13:37,270 --> 02:13:42,250
least we've got our first emission

2515
02:13:38,829 --> 02:13:44,140
tracking properly there so we don't have

2516
02:13:42,250 --> 02:13:46,000
a completely wrong image now we just are

2517
02:13:44,140 --> 02:13:50,079
not summing quite properly so much

2518
02:13:46,000 --> 02:13:51,520
closer okay so let's see if we can

2519
02:13:50,079 --> 02:13:53,019
finish the mat and next stuff and just

2520
02:13:51,520 --> 02:13:55,120
end up with something that's that's

2521
02:13:53,020 --> 02:13:58,330
roughly correct I'm also gonna try to

2522
02:13:55,119 --> 02:14:07,390
reduce the ray count the race for pixel

2523
02:13:58,329 --> 02:14:10,119
there so I'm just gonna say like a 16

2524
02:14:07,390 --> 02:14:13,840
Ray's per pixel right real real tiny

2525
02:14:10,119 --> 02:14:17,500
number of rays now so that we can just

2526
02:14:13,840 --> 02:14:20,050
really quickly run it and get our output

2527
02:14:17,500 --> 02:14:21,399
image right all right so now what we're

2528
02:14:20,050 --> 02:14:24,159
trying to fix that I'm gonna go back to

2529
02:14:21,399 --> 02:14:26,349
the build that bat I'm gonna go ahead

2530
02:14:24,159 --> 02:14:30,189
and make it so that we can still get our

2531
02:14:26,350 --> 02:14:31,539
output back so here we go

2532
02:14:30,189 --> 02:14:36,969
and now what I want to do is say all

2533
02:14:31,539 --> 02:14:39,579
right I want to go see also we're not

2534
02:14:36,970 --> 02:14:41,199
running parallel either so that's the

2535
02:14:39,579 --> 02:14:43,779
other thing that slows us down we're 8

2536
02:14:41,199 --> 02:14:45,159
times slower just from that as well and

2537
02:14:43,779 --> 02:14:50,889
that can I suppose I can put that back

2538
02:14:45,159 --> 02:14:54,069
in now - all right so now what I want to

2539
02:14:50,890 --> 02:14:56,320
see is what am i messing up in terms of

2540
02:14:54,069 --> 02:14:58,420
that summation so our final color you

2541
02:14:56,319 --> 02:15:00,369
know when we hit an emitter we're doing

2542
02:14:58,420 --> 02:15:03,340
the right thing but we're not about

2543
02:15:00,369 --> 02:15:04,000
we're not bouncing right so once we do a

2544
02:15:03,340 --> 02:15:06,369
bounce

2545
02:15:04,000 --> 02:15:08,560
we've got an issue right and we don't

2546
02:15:06,369 --> 02:15:10,059
know exactly what that issue is let's

2547
02:15:08,560 --> 02:15:13,180
double check that mask is 0 it is not

2548
02:15:10,060 --> 02:15:13,960
doing something weird as well so mask is

2549
02:15:13,180 --> 02:15:16,000
yard

2550
02:15:13,960 --> 02:15:17,770
if the lane mask equals zero then it is

2551
02:15:16,000 --> 02:15:20,710
zero so we should break that seems

2552
02:15:17,770 --> 02:15:24,490
reasonable lane mask equals lane mask

2553
02:15:20,710 --> 02:15:26,920
and hit mat index equals zero that

2554
02:15:24,489 --> 02:15:29,139
should in theory work okay because again

2555
02:15:26,920 --> 02:15:31,779
it's just using the low bit so I think

2556
02:15:29,140 --> 02:15:33,880
everything should be fine there but we

2557
02:15:31,779 --> 02:15:35,619
could double-check that let's take a

2558
02:15:33,880 --> 02:15:38,260
look at anything else that's weird here

2559
02:15:35,619 --> 02:15:45,788
we have there hit mat index we're look

2560
02:15:38,260 --> 02:15:47,170
up these yeah I may want to step through

2561
02:15:45,788 --> 02:15:48,488
a debug mode one more time and take a

2562
02:15:47,170 --> 02:15:50,050
look at what's going on in here

2563
02:15:48,488 --> 02:15:54,428
just see if there's anything else

2564
02:15:50,050 --> 02:16:01,659
suspicious we're LARPing the random

2565
02:15:54,429 --> 02:16:03,940
baths and the sample is always

2566
02:16:01,658 --> 02:16:07,868
accumulated with whatever the Matt emit

2567
02:16:03,939 --> 02:16:13,569
color is the attenuation value is built

2568
02:16:07,868 --> 02:16:19,149
up over time properly so that looks

2569
02:16:13,569 --> 02:16:25,840
about right to me and the sample value

2570
02:16:19,149 --> 02:16:29,198
at the end contribute I'm sample all of

2571
02:16:25,840 --> 02:16:32,728
that looks about right so I'm gonna do

2572
02:16:29,198 --> 02:16:35,679
one more step through here in debug mode

2573
02:16:32,728 --> 02:16:43,688
so I take it back take everything back

2574
02:16:35,679 --> 02:16:46,629
that I said and just make sure that this

2575
02:16:43,689 --> 02:16:49,120
works okay again with only 16 rays for

2576
02:16:46,629 --> 02:16:52,659
pixel it should be a lot faster

2577
02:16:49,120 --> 02:16:55,179
hopefully so no big issue there yeah

2578
02:16:52,659 --> 02:16:56,619
there we go and you can see the problem

2579
02:16:55,179 --> 02:16:58,719
that we're having here is our bounces

2580
02:16:56,620 --> 02:17:03,609
aren't working properly so whatever

2581
02:16:58,718 --> 02:17:07,750
emitter hits it works but that's yeah

2582
02:17:03,609 --> 02:17:10,239
that's only if it hit an emitter right

2583
02:17:07,750 --> 02:17:12,790
off the bat so let's take a look at what

2584
02:17:10,239 --> 02:17:14,799
the first hit happens to be here the hit

2585
02:17:12,790 --> 02:17:18,370
material index is one that means that

2586
02:17:14,799 --> 02:17:20,829
this one should keep going the

2587
02:17:18,370 --> 02:17:23,139
attenuation value properly did attenuate

2588
02:17:20,829 --> 02:17:28,120
based on the reflection color and the

2589
02:17:23,138 --> 02:17:28,629
cosine there and our lane mask well

2590
02:17:28,120 --> 02:17:33,010
there you go

2591
02:17:28,629 --> 02:17:34,598
our Lane mask is wrong and I'm not sure

2592
02:17:33,010 --> 02:17:36,040
why so let's just double check that it

2593
02:17:34,599 --> 02:17:38,349
might be a bit thing again like I was

2594
02:17:36,040 --> 02:17:40,569
saying let's see what the lane mask

2595
02:17:38,349 --> 02:17:43,239
actually is equals F F F that's that's

2596
02:17:40,568 --> 02:17:48,068
fine so when we come down here at the

2597
02:17:43,239 --> 02:17:51,449
hit material index is one the lane mask

2598
02:17:48,068 --> 02:17:57,090
so when I do this and I'm getting

2599
02:17:51,450 --> 02:18:05,130
ah that's supposed to be not equal to

2600
02:17:57,090 --> 02:18:09,989
zero that's our problem right there so

2601
02:18:05,129 --> 02:18:12,569
you see that we've got the lien mask and

2602
02:18:09,989 --> 02:18:13,860
this is an and equals really right we

2603
02:18:12,569 --> 02:18:15,600
want to produce two mass from this if it

2604
02:18:13,860 --> 02:18:17,819
equals zero is just to terminate so we

2605
02:18:15,600 --> 02:18:19,920
want to not we want the ones that don't

2606
02:18:17,819 --> 02:18:21,539
terminate so we want not equal to zero

2607
02:18:19,920 --> 02:18:24,989
is what we're trying to actually produce

2608
02:18:21,540 --> 02:18:27,210
here right so that's just updating the

2609
02:18:24,989 --> 02:18:30,229
lane mask incorrectly is the only

2610
02:18:27,209 --> 02:18:30,229
problem that we're getting there

2611
02:18:39,079 --> 02:18:47,218
alright see what kind of image we get

2612
02:18:43,229 --> 02:18:48,359
here so that is looking correct to me

2613
02:18:47,218 --> 02:18:52,649
again

2614
02:18:48,360 --> 02:18:54,630
for the most part let's go ahead and

2615
02:18:52,649 --> 02:18:59,279
change this back up to our optimized

2616
02:18:54,629 --> 02:19:04,859
version which will now unfortunately be

2617
02:18:59,280 --> 02:19:09,960
a lot slower than it was where's our

2618
02:19:04,860 --> 02:19:11,790
race for the pixel 1024 right and I

2619
02:19:09,959 --> 02:19:13,199
think that's it for today because I

2620
02:19:11,790 --> 02:19:16,650
think now we're back to operating

2621
02:19:13,200 --> 02:19:18,719
properly with basically Sindy style code

2622
02:19:16,649 --> 02:19:23,270
and so the only thing that we have to do

2623
02:19:18,718 --> 02:19:25,349
is next session there we go

2624
02:19:23,270 --> 02:19:27,390
the only thing we have to do is next

2625
02:19:25,350 --> 02:19:32,760
session turn this to actually executing

2626
02:19:27,389 --> 02:19:34,920
sim D and go from there right now as you

2627
02:19:32,760 --> 02:19:38,130
can see here we're 21 milliseconds to

2628
02:19:34,920 --> 02:19:40,229
bounce now instead of oh nine and that's

2629
02:19:38,129 --> 02:19:42,809
because again we introduced a lot of

2630
02:19:40,229 --> 02:19:45,600
inefficiency here because we are

2631
02:19:42,809 --> 02:19:47,549
preparing to do it wide and we're not

2632
02:19:45,600 --> 02:19:50,640
actually using any of those nice wide

2633
02:19:47,549 --> 02:19:52,529
instructions and so a lot of things that

2634
02:19:50,640 --> 02:19:56,760
just didn't need to happen anymore you

2635
02:19:52,530 --> 02:20:00,329
know are are still happening let me

2636
02:19:56,760 --> 02:20:02,729
double check so we seem to be a darker

2637
02:20:00,329 --> 02:20:06,899
as well so it looks like maybe we've got

2638
02:20:02,729 --> 02:20:10,409
a summation error in there so we might

2639
02:20:06,899 --> 02:20:12,119
not quite be done debugging yet and so

2640
02:20:10,409 --> 02:20:14,899
let's take a look at what's going on

2641
02:20:12,120 --> 02:20:25,160
with that so if we take a look at this

2642
02:20:14,899 --> 02:20:28,140
contribution here that's our problem

2643
02:20:25,159 --> 02:20:30,271
so the lane width has to be actually set

2644
02:20:28,140 --> 02:20:35,579
properly so I'm gonna go into Ray Lane

2645
02:20:30,271 --> 02:20:37,351
here and I'm gonna find this so Lane

2646
02:20:35,579 --> 02:20:39,479
width 4 is what we had before but we

2647
02:20:37,351 --> 02:20:41,750
don't we're not actually doing that so

2648
02:20:39,479 --> 02:20:45,930
the lane width is one in our current

2649
02:20:41,750 --> 02:20:49,819
implementation and so now I was

2650
02:20:45,930 --> 02:20:49,819
wondering why it was yeah

2651
02:20:50,540 --> 02:20:55,920
was it was getting in

2652
02:20:52,829 --> 02:20:58,350
speed advantage there because it was

2653
02:20:55,920 --> 02:20:59,940
terminating pretty fast and like it

2654
02:20:58,350 --> 02:21:02,069
seemed like it was running about as fast

2655
02:20:59,940 --> 02:21:04,500
as the old one was but it clearly showed

2656
02:21:02,069 --> 02:21:06,360
it was twice as slow per bounce so I'm

2657
02:21:04,500 --> 02:21:08,219
like what's going on it's like okay that

2658
02:21:06,360 --> 02:21:10,920
the reason is because we actually didn't

2659
02:21:08,219 --> 02:21:14,639
run as many rays through it so hey yeah

2660
02:21:10,920 --> 02:21:17,850
it was slower per bounce but it was not

2661
02:21:14,639 --> 02:21:22,349
running as many bounces right so there's

2662
02:21:17,850 --> 02:21:25,500
that so anyway so I think we're good now

2663
02:21:22,350 --> 02:21:26,430
probably and again we just have to take

2664
02:21:25,500 --> 02:21:28,021
a look so there we go

2665
02:21:26,430 --> 02:21:31,290
and you can see that the image is

2666
02:21:28,021 --> 02:21:34,920
basically indistinguishable now I

2667
02:21:31,290 --> 02:21:37,680
believe probably from the other ones in

2668
02:21:34,920 --> 02:21:39,540
that directory let's find out can I flip

2669
02:21:37,680 --> 02:21:41,010
between them yeah so you can see those

2670
02:21:39,540 --> 02:21:43,260
are pretty much indistinguishable so

2671
02:21:41,010 --> 02:21:44,399
those are our three they're interesting

2672
02:21:43,260 --> 02:21:46,200
until the only real difference is we

2673
02:21:44,399 --> 02:21:48,180
fixed the pixel center so this one has a

2674
02:21:46,200 --> 02:21:51,120
correct test fit mem has a correct pixel

2675
02:21:48,180 --> 02:21:52,860
center and the other one doesn't but I

2676
02:21:51,120 --> 02:21:54,690
think we're good now

2677
02:21:52,860 --> 02:21:57,450
and all we really have to do now is

2678
02:21:54,690 --> 02:21:59,819
finish our optimization there to see how

2679
02:21:57,450 --> 02:22:02,640
good we did now I probably should have

2680
02:21:59,819 --> 02:22:05,430
saved one using the correct Rand and for

2681
02:22:02,639 --> 02:22:09,209
where you know we could actually

2682
02:22:05,430 --> 02:22:12,930
benchmark against that but that's really

2683
02:22:09,209 --> 02:22:15,959
all we saved unfortunately so if we want

2684
02:22:12,930 --> 02:22:19,739
to in hand in lane now as well what I

2685
02:22:15,959 --> 02:22:24,139
could do here say if Lane width equals

2686
02:22:19,739 --> 02:22:24,139
one believe I can do that right

2687
02:22:39,568 --> 02:22:45,209
in theory if you run this right then we

2688
02:22:43,079 --> 02:22:48,000
can you know have lain with equals one

2689
02:22:45,209 --> 02:22:49,769
be a case here and then what we can do

2690
02:22:48,000 --> 02:22:51,840
is say alright let's put in some other

2691
02:22:49,770 --> 02:22:59,130
ones here so there's you know a fling

2692
02:22:51,840 --> 02:23:17,520
with equals four then we'll have the

2693
02:22:59,129 --> 02:23:20,549
code for that right and if we want to be

2694
02:23:17,520 --> 02:23:23,370
super saucy up here we can also put in a

2695
02:23:20,549 --> 02:23:25,648
version of it that is eight wide for

2696
02:23:23,370 --> 02:23:27,720
example so what we we need to do if we

2697
02:23:25,648 --> 02:23:29,279
want to increase oh and also for you do

2698
02:23:27,719 --> 02:23:33,108
laymen with equals eight it should say

2699
02:23:29,280 --> 02:23:33,109
hey laden with must be sent to something

2700
02:23:33,379 --> 02:23:37,679
and so now we're just supporting one or

2701
02:23:35,909 --> 02:23:39,030
four and if we were to look at sort of

2702
02:23:37,680 --> 02:23:41,460
if I was to sort of sketch out what this

2703
02:23:39,030 --> 02:23:43,229
would look like then what we're gonna do

2704
02:23:41,459 --> 02:23:52,228
here is say well we've got different

2705
02:23:43,228 --> 02:23:54,179
looking things right so if we were

2706
02:23:52,228 --> 02:23:55,709
actually going to do a limit equals four

2707
02:23:54,180 --> 02:23:58,200
then we have to actually make these

2708
02:23:55,709 --> 02:24:00,478
things work so for example Lane F 32

2709
02:23:58,200 --> 02:24:03,620
we're gonna have to actually pound

2710
02:24:00,478 --> 02:24:07,039
include I don't know what the right

2711
02:24:03,620 --> 02:24:09,840
intrinsic thing is anymore

2712
02:24:07,040 --> 02:24:15,000
let's see what we did a hand made here

2713
02:24:09,840 --> 02:24:26,389
oh it's just always this you know

2714
02:24:15,000 --> 02:24:26,389
ridiculous nonsense maybe some platform

2715
02:24:30,818 --> 02:24:36,430
yeah so we probably need to do something

2716
02:24:33,040 --> 02:24:39,540
here like this depending on which one

2717
02:24:36,430 --> 02:24:44,550
we're on we're going to need to have

2718
02:24:39,540 --> 02:24:44,550
this sort of stuff at the moment I'll do

2719
02:24:57,209 --> 02:25:03,238
one of those so we'll define compiler m

2720
02:25:00,159 --> 02:25:07,139
SVC so we'll get that intrinsic in there

2721
02:25:03,238 --> 02:25:13,148
and then we can actually use the MM

2722
02:25:07,139 --> 02:25:17,409
versions here so like that so I think

2723
02:25:13,148 --> 02:25:19,090
it's M 128 again I never use these I

2724
02:25:17,409 --> 02:25:28,779
always define my own because these

2725
02:25:19,090 --> 02:25:35,020
things are nuts see here yeah M

2726
02:25:28,779 --> 02:25:41,079
underscore underscore M 128 so anyway I

2727
02:25:35,020 --> 02:25:44,380
we would have to define values for each

2728
02:25:41,079 --> 02:25:46,840
of these these are integers these are

2729
02:25:44,379 --> 02:25:50,108
not the lane VIII's are just going to

2730
02:25:46,840 --> 02:25:53,920
have one of these each for the X the Y

2731
02:25:50,109 --> 02:25:56,318
and the Z like so and then each of these

2732
02:25:53,920 --> 02:25:59,049
functions has to actually be implemented

2733
02:25:56,318 --> 02:26:00,278
for it and a whole lot more the reason

2734
02:25:59,049 --> 02:26:02,349
I'm not going to finish this stuff right

2735
02:26:00,279 --> 02:26:04,810
now is specifically because even though

2736
02:26:02,350 --> 02:26:07,329
we can do these you'll note that a whole

2737
02:26:04,809 --> 02:26:14,109
bunch of other things are not actually

2738
02:26:07,329 --> 02:26:16,059
set properly so for example you can see

2739
02:26:14,109 --> 02:26:17,590
here we've got a bunch of stuff where oh

2740
02:26:16,059 --> 02:26:18,969
and I suppose these should also be moved

2741
02:26:17,590 --> 02:26:20,829
up in here I might go ahead and move

2742
02:26:18,969 --> 02:26:23,978
these into the math so here's the Ray

2743
02:26:20,829 --> 02:26:28,568
math stuff right I might go ahead and

2744
02:26:23,978 --> 02:26:31,028
and move these into there like so and

2745
02:26:28,568 --> 02:26:33,250
then random bilateral Lane I think I

2746
02:26:31,029 --> 02:26:35,829
might move into Ray Lane because it's

2747
02:26:33,250 --> 02:26:38,529
going to be dependent so this scalar

2748
02:26:35,829 --> 02:26:39,219
version is here and the non scalar

2749
02:26:38,529 --> 02:26:42,340
version would

2750
02:26:39,219 --> 02:26:44,289
in here right and so the way that would

2751
02:26:42,340 --> 02:26:48,579
work again is you know we'd need to

2752
02:26:44,290 --> 02:26:59,399
create some kind of a right this sort of

2753
02:26:48,579 --> 02:27:04,559
thing where we you know and then set a

2754
02:26:59,398 --> 02:27:04,559
pi32 kind of a thing and you know this

2755
02:27:07,109 --> 02:27:15,130
this kind of nonsense here where we'd

2756
02:27:09,279 --> 02:27:16,750
take four of these values we'd read run

2757
02:27:15,129 --> 02:27:17,438
the thing for it four times and put them

2758
02:27:16,750 --> 02:27:19,209
in here now

2759
02:27:17,439 --> 02:27:24,579
eventually what we'd want to do is

2760
02:27:19,209 --> 02:27:27,129
actually just keep the state wider yeah

2761
02:27:24,579 --> 02:27:30,670
actually you know what that's that's

2762
02:27:27,129 --> 02:27:33,009
gonna be the smarter thing to do so

2763
02:27:30,670 --> 02:27:36,478
really what we want is all of this stuff

2764
02:27:33,010 --> 02:27:40,238
has to kind of be in here probably right

2765
02:27:36,478 --> 02:27:42,818
and I guess what we could do is make the

2766
02:27:40,238 --> 02:27:45,579
series itself that value could be

2767
02:27:42,818 --> 02:27:47,799
dependent on the lane and that might

2768
02:27:45,579 --> 02:27:49,478
just work for all I know I'm trying to

2769
02:27:47,799 --> 02:27:52,269
think now it might be that we can just

2770
02:27:49,478 --> 02:27:55,568
make this all work in terms of lanes

2771
02:27:52,270 --> 02:27:56,979
let's let's try let's try that let's try

2772
02:27:55,568 --> 02:27:59,500
that let's just see I'm just curious

2773
02:27:56,978 --> 02:28:01,000
because that might just work right I'm

2774
02:27:59,500 --> 02:28:04,238
not sure if it would if it wouldn't but

2775
02:28:01,000 --> 02:28:06,728
it might so let's see I I take back what

2776
02:28:04,238 --> 02:28:10,439
I said before and I put one of these in

2777
02:28:06,728 --> 02:28:10,438
here and I just say that this stuff

2778
02:28:11,939 --> 02:28:15,329
looks like this

2779
02:28:25,260 --> 02:28:32,338
and so all of this stuff works on Lena

2780
02:28:28,978 --> 02:28:36,568
32s effectively this would go away so

2781
02:28:32,338 --> 02:28:38,760
you just have random bilateral like so

2782
02:28:36,568 --> 02:28:40,708
and it produces just Elaine's worth of

2783
02:28:38,760 --> 02:28:43,978
them and so then the only weird part

2784
02:28:40,709 --> 02:28:48,350
here is this has to get converted up so

2785
02:28:43,978 --> 02:28:52,889
what we would do here is we'd say you

2786
02:28:48,350 --> 02:28:55,529
know this this is returning Elaine new

2787
02:28:52,889 --> 02:29:00,148
32 and so we'd want to do something

2788
02:28:55,529 --> 02:29:11,668
where we would say you know Lane F 32

2789
02:29:00,148 --> 02:29:14,430
from you 32 so we have some way of doing

2790
02:29:11,668 --> 02:29:21,828
that cast and you know normally it would

2791
02:29:14,430 --> 02:29:21,828
just be something that looks like this

2792
02:29:28,760 --> 02:29:34,228
but it would actually be a real Cindy

2793
02:29:31,318 --> 02:29:36,059
thing in the future right so I'm gonna

2794
02:29:34,228 --> 02:29:38,488
set the lane width back down to one I'm

2795
02:29:36,059 --> 02:29:42,478
gonna go into Ray dot H and I'm gonna

2796
02:29:38,488 --> 02:29:44,939
take this random series bit here and I'm

2797
02:29:42,478 --> 02:29:47,338
gonna just extend it out to that then

2798
02:29:44,939 --> 02:29:49,648
I'm gonna look at any where that we use

2799
02:29:47,338 --> 02:29:51,629
to call this and I'm gonna take it so

2800
02:29:49,648 --> 02:29:54,180
that instead of saying random bilateral

2801
02:29:51,629 --> 02:29:59,029
Lane I'm just gonna make it so that it's

2802
02:29:54,180 --> 02:29:59,029
always calling random bilateral instead

2803
02:29:59,510 --> 02:30:07,680
and then I'm going to compile and see if

2804
02:30:02,639 --> 02:30:09,148
it works it looks like it does so yeah

2805
02:30:07,680 --> 02:30:11,398
so that way what we could do there is

2806
02:30:09,148 --> 02:30:13,618
make that way our random number

2807
02:30:11,398 --> 02:30:15,028
generator will also work lane wide

2808
02:30:13,619 --> 02:30:17,100
because if you take a look at what's

2809
02:30:15,029 --> 02:30:21,810
actually going on in it nothing that it

2810
02:30:17,100 --> 02:30:24,119
does is actually not supported in Cindy

2811
02:30:21,809 --> 02:30:29,939
so we should just be able to use Cindy

2812
02:30:24,119 --> 02:30:31,340
on it right so so that's fine right all

2813
02:30:29,939 --> 02:30:33,600
of this stuff

2814
02:30:31,340 --> 02:30:35,100
is stuff that we could probably do in

2815
02:30:33,600 --> 02:30:36,450
Cindy just fine because there should be

2816
02:30:35,100 --> 02:30:39,030
an X or in there and there should be a

2817
02:30:36,450 --> 02:30:40,350
shift by a intrinsic value in there and

2818
02:30:39,030 --> 02:30:42,510
so those are things that we can just do

2819
02:30:40,350 --> 02:30:45,420
and we shouldn't have to worry too much

2820
02:30:42,510 --> 02:30:46,860
about it now if i zoom in here one of

2821
02:30:45,420 --> 02:30:49,710
the weird things about this is I don't

2822
02:30:46,860 --> 02:30:52,530
see the block pattern anymore so I think

2823
02:30:49,709 --> 02:30:53,909
the fact that that block pattern

2824
02:30:52,530 --> 02:30:55,140
actually wasn't a problem with the

2825
02:30:53,909 --> 02:30:58,021
random number dinner it was just because

2826
02:30:55,139 --> 02:31:01,889
I wasn't rolling the entropy foot

2827
02:30:58,021 --> 02:31:03,480
forward per pixel and had like zeros in

2828
02:31:01,889 --> 02:31:06,029
there and stuff so so actually we're

2829
02:31:03,479 --> 02:31:06,569
fine X are chefs totally fine that's

2830
02:31:06,030 --> 02:31:07,670
good too

2831
02:31:06,569 --> 02:31:12,779
we don't really need to do anything

2832
02:31:07,670 --> 02:31:14,159
fancier than that all right so that's it

2833
02:31:12,780 --> 02:31:15,720
for today I think I'm going to wrap it

2834
02:31:14,159 --> 02:31:17,069
up maybe tomorrow we'll do the actual

2835
02:31:15,719 --> 02:31:19,920
implementation just to not leave it

2836
02:31:17,069 --> 02:31:23,340
hanging and so that we can specify lane

2837
02:31:19,920 --> 02:31:34,799
widths that are greater than four so

2838
02:31:23,340 --> 02:31:37,260
we'll just say like you know and again

2839
02:31:34,799 --> 02:31:44,329
this right here I we you know we can

2840
02:31:37,260 --> 02:31:52,850
just sort of also say that you know

2841
02:31:44,329 --> 02:31:56,309
maybe we'll do this one too you know and

2842
02:31:52,850 --> 02:31:58,350
that would just be that and then I don't

2843
02:31:56,309 --> 02:32:03,119
even know if this is supported yet

2844
02:31:58,350 --> 02:32:08,010
exactly how hey you know it'll be

2845
02:32:03,120 --> 02:32:09,210
supported but I don't know exactly which

2846
02:32:08,010 --> 02:32:12,120
of these things you have to include

2847
02:32:09,209 --> 02:32:14,639
these days but this would just be if we

2848
02:32:12,120 --> 02:32:18,329
were to use the wider equivalents of

2849
02:32:14,639 --> 02:32:19,799
these then we could go ahead and use

2850
02:32:18,329 --> 02:32:25,829
eight white Cindy as well so I'm just

2851
02:32:19,799 --> 02:32:28,529
going to check to see yeah so as far as

2852
02:32:25,829 --> 02:32:32,219
I know if we want to we can just use em

2853
02:32:28,530 --> 02:32:35,310
256 is as well and that way we can have

2854
02:32:32,219 --> 02:32:38,699
an eight y24 wide and one wide path and

2855
02:32:35,309 --> 02:32:44,729
we can just compile it however way we

2856
02:32:38,700 --> 02:32:45,090
want and there you go so I think that's

2857
02:32:44,729 --> 02:32:46,770
really

2858
02:32:45,090 --> 02:32:48,898
all we'll have to do and we'll implement

2859
02:32:46,770 --> 02:32:51,630
those probably tomorrow let me go ahead

2860
02:32:48,898 --> 02:32:52,978
to a brief Q&amp;A here just in case anyone

2861
02:32:51,629 --> 02:33:07,009
has any questions about what we did

2862
02:32:52,978 --> 02:33:13,529
there and again what you can sort of see

2863
02:33:07,010 --> 02:33:16,380
what I did was just a really basic sort

2864
02:33:13,530 --> 02:33:17,820
of prep where I said all right I'm gonna

2865
02:33:16,379 --> 02:33:20,670
put this code into a state where it

2866
02:33:17,819 --> 02:33:22,340
still runs scalar but it runs scalar in

2867
02:33:20,670 --> 02:33:26,159
such a way that it can be made wide

2868
02:33:22,340 --> 02:33:31,620
trivially and then that way I can debug

2869
02:33:26,159 --> 02:33:35,069
it but before it actually runs wide

2870
02:33:31,620 --> 02:33:37,310
where things could get more difficult

2871
02:33:35,069 --> 02:33:37,309
right

2872
02:33:46,189 --> 02:33:53,748
how would one implement something like a

2873
02:33:48,379 --> 02:33:57,398
bloom effect in a ray tracer so it

2874
02:33:53,748 --> 02:34:06,100
depends exactly what you mean by bloom

2875
02:33:57,398 --> 02:34:09,948
but let me go ahead and and sort of

2876
02:34:06,100 --> 02:34:11,720
assume I know what you mean by bloom so

2877
02:34:09,949 --> 02:34:15,279
I don't know if we don't have an image

2878
02:34:11,719 --> 02:34:15,278
processing program installed here do we

2879
02:34:18,670 --> 02:34:26,318
we could we could install here and

2880
02:34:22,699 --> 02:34:34,340
and I could maybe take a look at at

2881
02:34:26,318 --> 02:34:37,010
producing something but I'll just I'll

2882
02:34:34,340 --> 02:34:40,279
just see if I can I don't want to be in

2883
02:34:37,010 --> 02:34:42,309
Bing wait how come we're not how do we

2884
02:34:40,279 --> 02:34:48,069
get end up in this browser this is

2885
02:34:42,309 --> 02:34:48,068
Cortana I all right whatever anyway

2886
02:34:52,671 --> 02:34:57,831
so what I wanted here was halation and

2887
02:34:55,880 --> 02:34:59,390
what I want to talk about here is where

2888
02:34:57,831 --> 02:35:00,560
that I think the bloom you're talking

2889
02:34:59,390 --> 02:35:02,630
about I'm not sure which bloom you're

2890
02:35:00,560 --> 02:35:04,370
actually talking about because there's a

2891
02:35:02,630 --> 02:35:05,421
lot of different places that bloom can

2892
02:35:04,370 --> 02:35:07,790
come from

2893
02:35:05,421 --> 02:35:11,630
but hey Latian is actually the thing

2894
02:35:07,790 --> 02:35:13,729
that you're probably talking about and I

2895
02:35:11,630 --> 02:35:15,470
don't know whether there's some anime

2896
02:35:13,729 --> 02:35:18,800
thing called halation which apparently

2897
02:35:15,470 --> 02:35:20,779
could be chit should I get the actual

2898
02:35:18,800 --> 02:35:29,949
thing instead of the anime please there

2899
02:35:20,780 --> 02:35:33,190
is that not too much to ask so anyway I

2900
02:35:29,950 --> 02:35:35,121
there's a couple different places that

2901
02:35:33,190 --> 02:35:37,730
the bloom you're talking about could

2902
02:35:35,120 --> 02:35:40,069
come from I don't know which one you're

2903
02:35:37,729 --> 02:35:42,341
talking about so the answer change it

2904
02:35:40,069 --> 02:35:45,470
depends on which one you want but

2905
02:35:42,341 --> 02:35:49,729
generally speaking there are two places

2906
02:35:45,470 --> 02:35:52,069
where light that can cause light to

2907
02:35:49,729 --> 02:35:54,380
bloom so the first thing that could

2908
02:35:52,069 --> 02:35:55,761
cause light to bloom and the one that I

2909
02:35:54,380 --> 02:35:57,800
assume you're talking about is called

2910
02:35:55,761 --> 02:36:00,681
film halation and what that is is that's

2911
02:35:57,800 --> 02:36:03,729
when light folk you know photons

2912
02:36:00,681 --> 02:36:09,021
entering the lens of the camera

2913
02:36:03,729 --> 02:36:10,970
they end up hitting the film bouncing

2914
02:36:09,021 --> 02:36:13,820
through the film substrate and hitting a

2915
02:36:10,970 --> 02:36:15,470
part of the film outside of where the

2916
02:36:13,819 --> 02:36:17,181
film was and the reason that this

2917
02:36:15,470 --> 02:36:19,939
happens is because if you have a lot of

2918
02:36:17,181 --> 02:36:22,159
light hitting an area but not all of it

2919
02:36:19,940 --> 02:36:23,751
will be absorbed by the film elements if

2920
02:36:22,159 --> 02:36:25,851
there's so much photons going through

2921
02:36:23,751 --> 02:36:28,720
some of them can scatter out to

2922
02:36:25,851 --> 02:36:32,261
neighboring parts of the image and

2923
02:36:28,720 --> 02:36:34,761
furthermore inside the lens assembly

2924
02:36:32,261 --> 02:36:37,041
light can if there's a lot of light

2925
02:36:34,761 --> 02:36:38,841
coming in to a particular place relative

2926
02:36:37,040 --> 02:36:42,529
to everything else it can bounce around

2927
02:36:38,841 --> 02:36:44,479
elements inside the hood or inside the

2928
02:36:42,530 --> 02:36:47,631
lens assembly and hit places it's not

2929
02:36:44,479 --> 02:36:49,939
supposed to hit so that's one kind of

2930
02:36:47,630 --> 02:36:52,159
halation and that's the kind of relation

2931
02:36:49,940 --> 02:36:55,060
that you see maybe up in here where

2932
02:36:52,159 --> 02:36:58,550
there's just a little bit of blur out

2933
02:36:55,060 --> 02:37:02,360
now there's bigger blurs like like in

2934
02:36:58,550 --> 02:37:06,409
here for example right where it's really

2935
02:37:02,360 --> 02:37:09,350
blew me and that is going to be a comedy

2936
02:37:06,409 --> 02:37:13,369
of the film halation itself here's a

2937
02:37:09,350 --> 02:37:15,829
good example there you go right this is

2938
02:37:13,370 --> 02:37:19,820
the first kind where it's just the film

2939
02:37:15,829 --> 02:37:21,670
itself is is blooming because it's

2940
02:37:19,819 --> 02:37:24,529
hitting neighboring parts of the film

2941
02:37:21,670 --> 02:37:26,719
but there's another kind which is that

2942
02:37:24,530 --> 02:37:28,310
basically light can scatter in the

2943
02:37:26,719 --> 02:37:30,679
atmosphere when there's a lot of light

2944
02:37:28,309 --> 02:37:33,260
coming in if there's any participating

2945
02:37:30,680 --> 02:37:35,750
media it can be scattered there and

2946
02:37:33,260 --> 02:37:37,670
that's more a principle of like fog mist

2947
02:37:35,750 --> 02:37:39,200
atmospheric particles that are

2948
02:37:37,670 --> 02:37:42,860
scattering the light before it ever

2949
02:37:39,200 --> 02:37:44,899
reaches the lens of the camera both of

2950
02:37:42,860 --> 02:37:48,170
these things you could simulate in a ray

2951
02:37:44,898 --> 02:37:50,299
tracer to varying degrees and it depends

2952
02:37:48,170 --> 02:37:52,909
on how you want to do them right but

2953
02:37:50,299 --> 02:37:55,728
both of them are simulated because you

2954
02:37:52,909 --> 02:37:57,559
can just do exactly these phenomenon you

2955
02:37:55,728 --> 02:37:59,329
don't even have to hack that hack them

2956
02:37:57,559 --> 02:38:02,090
if you're willing to just do them

2957
02:37:59,329 --> 02:38:03,559
directly you can actually simulate the

2958
02:38:02,090 --> 02:38:05,930
potential for something to bounce around

2959
02:38:03,559 --> 02:38:07,760
inside the Lema lens assembly you can

2960
02:38:05,930 --> 02:38:10,040
simulate the effect of something

2961
02:38:07,760 --> 02:38:12,319
bouncing in the film substrate layer and

2962
02:38:10,040 --> 02:38:14,990
you can even simulate participating

2963
02:38:12,319 --> 02:38:17,148
medium by storing those volumes and

2964
02:38:14,989 --> 02:38:19,639
introducing random ray permutation

2965
02:38:17,148 --> 02:38:21,769
inside the volume so all three of them

2966
02:38:19,639 --> 02:38:23,750
are things you could simulate they're

2967
02:38:21,770 --> 02:38:24,680
all fairly advanced right that's when

2968
02:38:23,750 --> 02:38:28,969
you're starting to get into like a

2969
02:38:24,680 --> 02:38:31,700
pretty physical light simulator you can

2970
02:38:28,969 --> 02:38:34,969
also of course choose this you can use

2971
02:38:31,700 --> 02:38:38,420
this a ray tracer can do the same tricks

2972
02:38:34,969 --> 02:38:40,398
that an on that a rasterizer can do so

2973
02:38:38,420 --> 02:38:41,689
if you don't really care about accurate

2974
02:38:40,398 --> 02:38:44,269
simulation and you're just looking to

2975
02:38:41,689 --> 02:38:46,489
get that effect for cheap you can just

2976
02:38:44,270 --> 02:38:49,370
use a post-processing filter that's what

2977
02:38:46,489 --> 02:38:52,010
games do and all they do is they take

2978
02:38:49,370 --> 02:38:55,280
the final rendered image and they

2979
02:38:52,010 --> 02:38:58,909
threshold it to see if stuff is very

2980
02:38:55,280 --> 02:39:00,860
bright they just blur it out into the

2981
02:38:58,909 --> 02:39:01,670
neighboring pixels and there's not much

2982
02:39:00,860 --> 02:39:04,460
more to it than that

2983
02:39:01,670 --> 02:39:06,228
right so you can also use the cheese way

2984
02:39:04,459 --> 02:39:08,000
and for an effect like this the cheese

2985
02:39:06,228 --> 02:39:09,978
way may be fine because there's not a

2986
02:39:08,000 --> 02:39:12,680
lot of really important stuff that

2987
02:39:09,978 --> 02:39:15,769
happens in halation that you want to

2988
02:39:12,680 --> 02:39:17,659
capture if you're trying to do

2989
02:39:15,770 --> 02:39:20,220
participating media that's a harder

2990
02:39:17,659 --> 02:39:23,068
thing that is less easy to

2991
02:39:20,219 --> 02:39:25,528
she's period its lessee these cheese in

2992
02:39:23,068 --> 02:39:27,059
a ray tracer and Anna rasterizer a ray

2993
02:39:25,529 --> 02:39:28,439
tracer has a bit of an advantage in

2994
02:39:27,059 --> 02:39:29,969
terms of reproducing it accurately

2995
02:39:28,439 --> 02:39:32,220
because it can just actually do random

2996
02:39:29,969 --> 02:39:33,929
rate permutation and yeah it costs a lot

2997
02:39:32,219 --> 02:39:35,760
to do that though it which once you're

2998
02:39:33,930 --> 02:39:38,850
doing it you're fine

2999
02:39:35,760 --> 02:39:41,609
and so I guess what I would say is

3000
02:39:38,850 --> 02:39:44,630
that's kind of a six of one half dozen

3001
02:39:41,609 --> 02:39:48,000
of the other sort of situation there

3002
02:39:44,629 --> 02:39:51,420
anyway let me take a quick look before I

3003
02:39:48,000 --> 02:39:55,559
end here by the way I wanted to see if

3004
02:39:51,420 --> 02:39:58,529
we should do a capture here so we're

3005
02:39:55,559 --> 02:40:00,269
actually a little bit faster even even

3006
02:39:58,529 --> 02:40:03,840
though we were much faster and we slowed

3007
02:40:00,270 --> 02:40:08,430
ourselves down a little bit so I am

3008
02:40:03,840 --> 02:40:15,260
going to go ahead and do a array cast

3009
02:40:08,430 --> 02:40:15,260
here for posterity while we're waiting

3010
02:40:25,620 --> 02:40:40,970
uh wait first a image second day image

3011
02:40:33,260 --> 02:40:40,969
but haven't we done three separate days

3012
02:40:42,351 --> 02:40:53,690
shouldn't this be second day image third

3013
02:40:45,899 --> 02:40:58,789
day image and anyway it's the 18th

3014
02:40:53,690 --> 02:41:02,239
regardless this is the fourth day right

3015
02:40:58,790 --> 02:41:02,240
am I missing something

3016
02:41:06,649 --> 02:41:10,159
what's going on here

3017
02:41:10,489 --> 02:41:26,209
handmade hero zero handmade parameter a1

3018
02:41:14,149 --> 02:41:46,340
oh there's no o2 we've said it wrong we

3019
02:41:26,209 --> 02:41:52,909
said it wrong oh well let's do it that

3020
02:41:46,340 --> 02:41:57,228
way and I'll fix those in a second my

3021
02:41:52,909 --> 02:42:00,139
bad sorry sorry everyone just a slight

3022
02:41:57,228 --> 02:42:02,149
error there just we'll rename this no

3023
02:42:00,139 --> 02:42:03,439
one will be any the wiser anyway so

3024
02:42:02,149 --> 02:42:09,139
that's what bloom is hopefully that

3025
02:42:03,440 --> 02:42:10,310
helps is the Halton to three secrets a

3026
02:42:09,139 --> 02:42:11,719
good way to generate sales positions

3027
02:42:10,309 --> 02:42:16,219
I've heard about some people using it is

3028
02:42:11,719 --> 02:42:18,079
a low discrepancy series yes so I am not

3029
02:42:16,219 --> 02:42:21,170
really an expert on sampling patterns

3030
02:42:18,079 --> 02:42:22,940
blue noise and blue noise based sampling

3031
02:42:21,170 --> 02:42:24,680
patterns tend to be the correct ways to

3032
02:42:22,940 --> 02:42:26,600
generate sample positions in terms of

3033
02:42:24,680 --> 02:42:30,530
what is most pleasing to your eye at the

3034
02:42:26,600 --> 02:42:32,569
end the Halton series does sort of try

3035
02:42:30,530 --> 02:42:34,850
to approximate a blue noise pattern but

3036
02:42:32,569 --> 02:42:38,360
it's not as good as blue noise I don't

3037
02:42:34,850 --> 02:42:42,380
know you'd have to ask a more

3038
02:42:38,360 --> 02:42:47,329
ray-tracing sort of person if it's good

3039
02:42:42,379 --> 02:42:50,569
enough right and also depending you know

3040
02:42:47,329 --> 02:42:52,039
the the youth scenario may determine

3041
02:42:50,569 --> 02:42:56,420
what is good enough and what is not good

3042
02:42:52,040 --> 02:42:57,920
enough right let me just take a quick

3043
02:42:56,420 --> 02:42:59,870
look here I want to see what these two

3044
02:42:57,920 --> 02:43:01,629
things say are these similar I just

3045
02:42:59,870 --> 02:43:06,579
wanna see if they're symbol or numbers

3046
02:43:01,629 --> 02:43:06,579
yeah yeah there

3047
02:43:10,658 --> 02:43:20,719
so I'm going to change the way these are

3048
02:43:14,869 --> 02:43:28,899
written here so this is going to be day

3049
02:43:20,719 --> 02:43:28,898
zero it's going to be day one

3050
02:43:39,979 --> 02:43:54,560
and then this will be zero - all right

3051
02:43:47,931 --> 02:43:57,110
so we've got three images here that are

3052
02:43:54,560 --> 02:43:59,690
all about the same and I think by the

3053
02:43:57,110 --> 02:44:02,329
time we finished tomorrow and that will

3054
02:43:59,690 --> 02:44:11,420
be four days of handmade ray we will

3055
02:44:02,329 --> 02:44:16,879
have it quite zippy which is nice and

3056
02:44:11,420 --> 02:44:18,260
then really we could do a bounding

3057
02:44:16,879 --> 02:44:20,479
volume hierarchy and try to push the

3058
02:44:18,260 --> 02:44:24,021
sphere count up really high or we could

3059
02:44:20,479 --> 02:44:30,159
go down the accurate light range of

3060
02:44:24,021 --> 02:44:33,351
things and so yeah we'll see all right

3061
02:44:30,159 --> 02:44:34,969
when you learn this way

3062
02:44:33,351 --> 02:44:36,500
oh sorry when you learn this way of

3063
02:44:34,969 --> 02:44:37,819
doing Cindy I remember in handmade here

3064
02:44:36,500 --> 02:44:42,110
when we had optimized to render we use

3065
02:44:37,819 --> 02:44:46,601
mm 28 every way so you can do them

3066
02:44:42,110 --> 02:44:48,920
either way and so it depends on to the

3067
02:44:46,601 --> 02:44:51,021
it's not really a learn this way or not

3068
02:44:48,920 --> 02:44:53,510
learn this way it's just a choice about

3069
02:44:51,021 --> 02:44:54,771
which one you want to do we did both in

3070
02:44:53,510 --> 02:45:01,819
handmade here Oh actually if you

3071
02:44:54,771 --> 02:45:06,860
remember and handmade here we've got

3072
02:45:01,819 --> 02:45:08,329
this one right and this is all using the

3073
02:45:06,860 --> 02:45:11,540
exact same technique that I just did

3074
02:45:08,329 --> 02:45:19,039
where you sort of have a type and that

3075
02:45:11,540 --> 02:45:20,690
type is a four wide thing right but the

3076
02:45:19,040 --> 02:45:23,510
reason you'd use one of the other is if

3077
02:45:20,690 --> 02:45:25,550
you've already got a function that you

3078
02:45:23,510 --> 02:45:27,021
know exactly how it works like we did in

3079
02:45:25,549 --> 02:45:30,709
handmade here where we had a renderer

3080
02:45:27,021 --> 02:45:33,110
and like this is a flow needs to do then

3081
02:45:30,709 --> 02:45:35,359
I usually just hand code it with MMS the

3082
02:45:33,110 --> 02:45:36,800
reason is because the compiler sometimes

3083
02:45:35,360 --> 02:45:40,370
does stupid stuff with overloaded

3084
02:45:36,799 --> 02:45:43,489
operators if I have a function that

3085
02:45:40,370 --> 02:45:46,760
we're gonna evolve over time then I use

3086
02:45:43,489 --> 02:45:49,219
the overloaded operator method and the

3087
02:45:46,760 --> 02:45:51,380
reason that I do it that way is because

3088
02:45:49,219 --> 02:45:53,810
I don't want to lock it down to a bunch

3089
02:45:51,379 --> 02:45:55,939
of mm operations until I actually

3090
02:45:53,810 --> 02:45:57,860
know exactly what those operations are

3091
02:45:55,940 --> 02:45:59,980
because otherwise I'm just wasting my

3092
02:45:57,860 --> 02:45:59,980
time

3093
02:46:04,569 --> 02:46:08,239
what is your take on anti-aliasing

3094
02:46:06,890 --> 02:46:09,800
methods I'm currently looking for one

3095
02:46:08,239 --> 02:46:11,899
for my game I see the witness has

3096
02:46:09,800 --> 02:46:13,909
multisample and I see a Lee multisample

3097
02:46:11,899 --> 02:46:18,409
antis anti-aliasing option only

3098
02:46:13,909 --> 02:46:23,239
no FX AAA or TxAA I don't have a strong

3099
02:46:18,409 --> 02:46:27,021
opinion on it honestly I just don't have

3100
02:46:23,239 --> 02:46:32,569
a lot of experience with those methods

3101
02:46:27,021 --> 02:46:33,950
are there any machines with hardware

3102
02:46:32,569 --> 02:46:35,421
random number generators that just puts

3103
02:46:33,950 --> 02:46:38,271
random values into register with one

3104
02:46:35,421 --> 02:46:40,431
instruction yeah x64 actually has one

3105
02:46:38,271 --> 02:46:43,370
and we may very well use it for the

3106
02:46:40,431 --> 02:47:18,011
initial seed as far as I know there are

3107
02:46:43,370 --> 02:47:23,511
no really fast ones though let's yeah so

3108
02:47:18,011 --> 02:47:28,851
463 clocks cycles down to 117 clock

3109
02:47:23,511 --> 02:47:31,461
cycles so rise in 1200 clock cycles or

3110
02:47:28,851 --> 02:47:34,310
2500 clock cycles so you can see they're

3111
02:47:31,460 --> 02:47:41,710
slow right so I wouldn't necessarily

3112
02:47:34,310 --> 02:47:44,360
call this on anything that you like I

3113
02:47:41,710 --> 02:47:46,251
think of as a replacement for a R and a

3114
02:47:44,360 --> 02:47:47,751
quick R and because you can do like that

3115
02:47:46,251 --> 02:47:50,690
X star shift is gonna be a lot less

3116
02:47:47,751 --> 02:47:56,261
cycles lecture system like 10 or 15 16

3117
02:47:50,690 --> 02:47:59,329
cycles something like that very low and

3118
02:47:56,261 --> 02:48:04,181
so this is gonna be way more expensive

3119
02:47:59,329 --> 02:48:06,920
but the Rd R &amp; R already seen part of it

3120
02:48:04,181 --> 02:48:08,899
we could use that to see the random

3121
02:48:06,920 --> 02:48:14,930
a generator for each work group that

3122
02:48:08,899 --> 02:48:21,079
would be a good use of it right so you

3123
02:48:14,930 --> 02:48:23,439
know that's that's what I would

3124
02:48:21,079 --> 02:48:25,728
recommend and we could easily do that

3125
02:48:23,439 --> 02:48:28,040
the question is do we really care enough

3126
02:48:25,728 --> 02:48:30,260
to bother and then it's dependent on our

3127
02:48:28,040 --> 02:48:33,910
dear Ann's and Bob what we could write

3128
02:48:30,260 --> 02:48:33,909
and it would be fine

3129
02:48:44,209 --> 02:48:48,978
sudonym 73 it's good to see you

3130
02:48:47,059 --> 02:48:50,239
pseudonym 73 I think with our new stream

3131
02:48:48,978 --> 02:48:52,309
time we never get see you again that's

3132
02:48:50,239 --> 02:48:53,449
good to see you good day a long time in

3133
02:48:52,309 --> 02:48:54,769
a stream low discrepancy singers do

3134
02:48:53,450 --> 02:48:57,290
exhibit blue noise behaviors you do them

3135
02:48:54,770 --> 02:48:58,760
right yeah like I mean that's my

3136
02:48:57,290 --> 02:49:00,830
understanding anyway was that that's

3137
02:48:58,760 --> 02:49:02,389
what you were low discrepancy sequences

3138
02:49:00,829 --> 02:49:04,969
we're trying to basically approach blue

3139
02:49:02,389 --> 02:49:06,739
noise but you know I don't know how good

3140
02:49:04,969 --> 02:49:09,500
they actually are but their main

3141
02:49:06,739 --> 02:49:11,360
advantage he says is that you can access

3142
02:49:09,500 --> 02:49:14,030
the quasi random streams in an arbitrary

3143
02:49:11,360 --> 02:49:16,100
order not really relevant yet also you

3144
02:49:14,030 --> 02:49:19,280
can do better than 2/3 halting yeah like

3145
02:49:16,100 --> 02:49:21,440
so for progressive progressive

3146
02:49:19,280 --> 02:49:24,350
refinement is kind of probably where

3147
02:49:21,440 --> 02:49:26,060
they are most useful in that way right

3148
02:49:24,350 --> 02:49:30,229
well you can kind of go like okay I

3149
02:49:26,059 --> 02:49:31,369
could just kind of yeah I mean the way

3150
02:49:30,228 --> 02:49:32,599
we're doing the rate is right now I

3151
02:49:31,370 --> 02:49:37,729
don't know that we care too much about

3152
02:49:32,600 --> 02:49:39,350
that stuff but in theory we might just

3153
02:49:37,728 --> 02:49:42,739
shade our languages expose things like

3154
02:49:39,350 --> 02:49:44,360
conditional assign it's actually more

3155
02:49:42,739 --> 02:49:48,590
that they already just do it

3156
02:49:44,360 --> 02:49:50,780
automatically so if you take a look at

3157
02:49:48,590 --> 02:49:53,600
the way that I wrote this right

3158
02:49:50,780 --> 02:49:57,560
conditional assign is what a shader

3159
02:49:53,600 --> 02:50:01,010
normally does so in say in GLSL and you

3160
02:49:57,559 --> 02:50:04,340
do a equals B in GLSL that's already

3161
02:50:01,010 --> 02:50:05,870
conditional assign Lane mask is you know

3162
02:50:04,340 --> 02:50:09,799
in the shader you'll do something like

3163
02:50:05,870 --> 02:50:13,700
if a is less than B a equals B that's

3164
02:50:09,799 --> 02:50:18,849
actually in the shader compiler directly

3165
02:50:13,700 --> 02:50:18,850
translated into this

3166
02:50:27,380 --> 02:50:34,350
so they're all like the entire shader

3167
02:50:31,649 --> 02:50:36,091
thing is all conditional science there's

3168
02:50:34,351 --> 02:50:39,450
really no such thing as an unconditional

3169
02:50:36,091 --> 02:50:40,921
assign in the shader really I mean sort

3170
02:50:39,450 --> 02:50:43,110
of there is in the sense that if you

3171
02:50:40,921 --> 02:50:44,909
haven't done any predication yet then it

3172
02:50:43,110 --> 02:50:47,131
doesn't need to be conditional but

3173
02:50:44,909 --> 02:50:49,229
they're all mask masked laying

3174
02:50:47,130 --> 02:50:52,369
operations because shaders always

3175
02:50:49,229 --> 02:50:57,529
operate and wide

3176
02:50:52,370 --> 02:51:01,950
they're usually 16 wide or 32 wide so

3177
02:50:57,530 --> 02:51:04,230
you're never in a situation where you're

3178
02:51:01,950 --> 02:51:09,831
performing an assignment that is not

3179
02:51:04,229 --> 02:51:09,831
masked per Lane if that makes sense

3180
02:51:13,159 --> 02:51:24,271
all right no more cues so I will go

3181
02:51:15,931 --> 02:51:31,761
ahead and shut down make sure that was

3182
02:51:24,271 --> 02:51:36,841
okay okay right yeah and this all got

3183
02:51:31,761 --> 02:51:39,409
set properly looks like right everything

3184
02:51:36,841 --> 02:51:39,409
happy there

3185
02:51:46,819 --> 02:51:49,389
yeah

3186
02:51:53,329 --> 02:51:57,950
sweet let's kind of finish build is set

3187
02:51:56,450 --> 02:52:03,350
to optimize till right everything's

3188
02:51:57,950 --> 02:52:05,360
right here alright let's just wait for

3189
02:52:03,350 --> 02:52:08,920
that terminate rather than killing it no

3190
02:52:05,360 --> 02:52:11,480
real reason to kill it there we go and

3191
02:52:08,920 --> 02:52:15,229
delete test bitmap since we don't you

3192
02:52:11,479 --> 02:52:17,090
know there's our output for the day and

3193
02:52:15,229 --> 02:52:18,619
it's all good thank you for joining me

3194
02:52:17,090 --> 02:52:20,630
for another episode of handmade ray

3195
02:52:18,620 --> 02:52:22,550
today and thank you for testing the

3196
02:52:20,629 --> 02:52:25,429
stream I'm gonna end the stream now and

3197
02:52:22,549 --> 02:52:27,590
I'm gonna go just after I stop the

3198
02:52:25,430 --> 02:52:29,300
recording I'm gonna go talk to the folks

3199
02:52:27,590 --> 02:52:32,630
to make sure there were no bugs in the

3200
02:52:29,299 --> 02:52:33,979
video but thanks for joining me if you

3201
02:52:32,629 --> 02:52:37,009
want to follow along with handmade ray

3202
02:52:33,979 --> 02:52:38,779
actually you can preorder handmade hero

3203
02:52:37,010 --> 02:52:40,880
handmade ray the source code here it

3204
02:52:38,780 --> 02:52:42,500
comes with handmade hero and it's

3205
02:52:40,879 --> 02:52:44,029
updated anytime I update handmade hero

3206
02:52:42,500 --> 02:52:45,680
so this weekend there won't be an update

3207
02:52:44,030 --> 02:52:46,970
to handmade ray but next weekend went up

3208
02:52:45,680 --> 02:52:50,149
to hammer here oh all the source code

3209
02:52:46,969 --> 02:52:53,029
will get pushed at that time so that's

3210
02:52:50,149 --> 02:52:55,879
about it I hope you've enjoyed it until

3211
02:52:53,030 --> 02:52:58,489
then have until tomorrow when we'll

3212
02:52:55,879 --> 02:53:01,729
finish up that optimization have fun

3213
02:52:58,489 --> 02:53:04,719
programming and I'll see everyone on the

3214
02:53:01,729 --> 02:53:04,719
Internet take it easy everybody

