1
00:00:00,000 --> 00:00:03,859
one welcome to handmade here the show

2
00:00:01,318 --> 00:00:07,378
recode a complete game live on stream i

3
00:00:03,859 --> 00:00:11,429
actually made a crucial error yesterday

4
00:00:07,378 --> 00:00:14,629
a judgment error than i hate to correct

5
00:00:11,429 --> 00:00:16,740
today it's fairly minor thankfully but i

6
00:00:14,630 --> 00:00:19,170
just thought of it when I was falling

7
00:00:16,739 --> 00:00:21,179
asleep last night or failing to fall

8
00:00:19,170 --> 00:00:22,800
asleep last night so I'm gonna start

9
00:00:21,179 --> 00:00:24,059
today with that and of course we're just

10
00:00:22,800 --> 00:00:26,730
doing what we've been doing which is

11
00:00:24,059 --> 00:00:28,500
cleaning up our renderer and making it

12
00:00:26,730 --> 00:00:30,510
into a nice little system that can be

13
00:00:28,500 --> 00:00:34,079
used more generally which i think is a

14
00:00:30,510 --> 00:00:35,489
very good technique to learn if for no

15
00:00:34,079 --> 00:00:37,079
other reason then even when you're

16
00:00:35,488 --> 00:00:39,000
working on projects where everything is

17
00:00:37,079 --> 00:00:40,340
entirely controlled by you and you don't

18
00:00:39,000 --> 00:00:42,659
need anyone else to use the code

19
00:00:40,340 --> 00:00:44,460
sometimes you need to compartmentalize

20
00:00:42,659 --> 00:00:45,779
things for your own benefit and cleaning

21
00:00:44,460 --> 00:00:47,280
up the renderer has already paid a lot

22
00:00:45,780 --> 00:00:48,870
of dividends for us we've removed all

23
00:00:47,280 --> 00:00:50,969
kinds of things that were problematic in

24
00:00:48,869 --> 00:00:52,468
there things like we still have the

25
00:00:50,969 --> 00:00:54,210
screen resolution getting passed through

26
00:00:52,469 --> 00:00:55,439
and used in places where it turns out if

27
00:00:54,210 --> 00:00:57,628
we just stayed in clip cornice the whole

28
00:00:55,439 --> 00:01:00,899
time it eliminates entire complexities

29
00:00:57,628 --> 00:01:02,218
in those systems things like that they

30
00:01:00,899 --> 00:01:04,170
build up over time as you're developing

31
00:01:02,219 --> 00:01:05,909
a system and figuring out how it should

32
00:01:04,170 --> 00:01:07,530
work at some point you need to go

33
00:01:05,909 --> 00:01:08,640
through and clean those out because

34
00:01:07,530 --> 00:01:11,820
otherwise they're constantly

35
00:01:08,640 --> 00:01:14,400
antagonizing you so simplifying cleaning

36
00:01:11,819 --> 00:01:16,258
up changing the interface to comport

37
00:01:14,400 --> 00:01:18,960
with the new way that things finally

38
00:01:16,259 --> 00:01:20,549
work in the in the end these are

39
00:01:18,959 --> 00:01:23,399
valuable things to learn and I like

40
00:01:20,549 --> 00:01:25,320
spending time on them which is why we

41
00:01:23,400 --> 00:01:27,810
are spending time on them now I'm gonna

42
00:01:25,319 --> 00:01:31,319
go ahead and talk about the mistake I

43
00:01:27,810 --> 00:01:34,460
made yesterday because what I did was I

44
00:01:31,319 --> 00:01:37,048
said very specifically I was like well

45
00:01:34,459 --> 00:01:39,269
inside the renderer if we want this to

46
00:01:37,049 --> 00:01:41,100
be abstract what we could do is there's

47
00:01:39,269 --> 00:01:43,769
number of things we could use a C++

48
00:01:41,099 --> 00:01:45,750
virtual inheritance mechanism we could

49
00:01:43,769 --> 00:01:47,489
use an enum we can use the table of

50
00:01:45,750 --> 00:01:50,310
function pointers we can use we can use

51
00:01:47,489 --> 00:01:51,449
organ use right and that's like well you

52
00:01:50,310 --> 00:01:55,799
can kind of pick whichever one you want

53
00:01:51,450 --> 00:01:57,930
I actually picked wrong and I realized

54
00:01:55,799 --> 00:02:00,240
because I wasn't considering something I

55
00:01:57,930 --> 00:02:03,000
realized there is a good reason to go

56
00:02:00,239 --> 00:02:05,009
with one of those structures the one

57
00:02:03,000 --> 00:02:06,478
that I think you should go with that

58
00:02:05,009 --> 00:02:09,330
there actually is an argument of why

59
00:02:06,478 --> 00:02:10,949
it's correct is you actually should go

60
00:02:09,330 --> 00:02:12,959
with a table of function pointers and

61
00:02:10,949 --> 00:02:13,709
the reason you should go to the table of

62
00:02:12,959 --> 00:02:17,580
function pointers

63
00:02:13,710 --> 00:02:21,210
is because duh why not let renderers get

64
00:02:17,580 --> 00:02:22,560
loaded out of dll's right it's exactly

65
00:02:21,210 --> 00:02:24,840
the kind of thing we might want to do

66
00:02:22,560 --> 00:02:26,280
provide allow people to write their own

67
00:02:24,840 --> 00:02:27,990
renderer dll's

68
00:02:26,280 --> 00:02:30,120
that just drop into the game and then

69
00:02:27,990 --> 00:02:33,480
the game can load them dynamically and

70
00:02:30,120 --> 00:02:36,450
render on them right it's the perfect

71
00:02:33,479 --> 00:02:39,090
excuse to do that there's no cost to us

72
00:02:36,449 --> 00:02:41,129
as long as we just make platform

73
00:02:39,090 --> 00:02:43,650
renderer be a func table of function

74
00:02:41,129 --> 00:02:46,079
pointers at that point anyone can write

75
00:02:43,650 --> 00:02:47,819
a DLL that we can use to render and we

76
00:02:46,080 --> 00:02:49,370
can make a thing in the win32 layer that

77
00:02:47,819 --> 00:02:52,199
loads we don't have to do that right now

78
00:02:49,370 --> 00:02:54,870
but making the platform render B

79
00:02:52,199 --> 00:02:57,030
callback based out of a function of

80
00:02:54,870 --> 00:02:58,170
stable function lets us do that not only

81
00:02:57,030 --> 00:03:00,629
does it let us do that

82
00:02:58,169 --> 00:03:03,359
it lets us mix and match those DLLs like

83
00:03:00,629 --> 00:03:04,889
we could even have different dll's

84
00:03:03,360 --> 00:03:06,480
getting fielding different pointers by

85
00:03:04,889 --> 00:03:14,929
changing which function pointers go to

86
00:03:06,479 --> 00:03:21,319
which ones right why is that relevant

87
00:03:14,930 --> 00:03:21,319
well for example we can have a

88
00:03:21,469 --> 00:03:26,699
accelerated a one that's compiled in

89
00:03:24,840 --> 00:03:29,280
release mode and one that's compiled in

90
00:03:26,699 --> 00:03:31,169
debug mode right and we can call the

91
00:03:29,280 --> 00:03:32,580
release mode renderer right up till the

92
00:03:31,169 --> 00:03:34,709
point where we wanted to buy a frame and

93
00:03:32,580 --> 00:03:36,240
then switch the function pointer that we

94
00:03:34,710 --> 00:03:39,000
actually care about whichever one it is

95
00:03:36,240 --> 00:03:41,340
to be the debug pointer right and step

96
00:03:39,000 --> 00:03:43,469
through that code instead there's all

97
00:03:41,340 --> 00:03:46,349
sorts of things we can do if we want it

98
00:03:43,469 --> 00:03:48,810
so I think this is just a better idea so

99
00:03:46,349 --> 00:03:51,479
I I think there's a good reason why this

100
00:03:48,810 --> 00:03:54,659
is actually the wrong decision and the

101
00:03:51,479 --> 00:03:57,209
right decision really looks more like

102
00:03:54,659 --> 00:03:59,639
like get proc address right it's what we

103
00:03:57,210 --> 00:04:01,590
actually want here so if we're gonna do

104
00:03:59,639 --> 00:04:03,179
that we just need to know the things we

105
00:04:01,590 --> 00:04:04,469
were using a switch statement for should

106
00:04:03,180 --> 00:04:07,319
really just be part of the dispatch

107
00:04:04,469 --> 00:04:08,759
table again not because I have anything

108
00:04:07,319 --> 00:04:10,620
against the switch statements I actually

109
00:04:08,759 --> 00:04:13,139
love switch statements I think they're

110
00:04:10,620 --> 00:04:15,629
great just in this case they're not the

111
00:04:13,139 --> 00:04:18,930
appropriate solution to the problem in

112
00:04:15,629 --> 00:04:20,370
my opinion that's in win32 hand-made

113
00:04:18,930 --> 00:04:22,769
OpenGL here

114
00:04:20,370 --> 00:04:24,660
so these switch statements we really

115
00:04:22,769 --> 00:04:26,939
just want to change them to callbacks

116
00:04:24,660 --> 00:04:27,450
again it's pretty straightforward how we

117
00:04:26,939 --> 00:04:29,969
would do

118
00:04:27,449 --> 00:04:33,029
that we just need a good place to do it

119
00:04:29,970 --> 00:04:35,160
right and off we go

120
00:04:33,029 --> 00:04:37,769
so what I'm going to do here is take the

121
00:04:35,160 --> 00:04:40,590
functions we were calling there's only

122
00:04:37,769 --> 00:04:44,969
three of them I think let me just see

123
00:04:40,589 --> 00:04:48,719
here yeah this is all there is so out of

124
00:04:44,970 --> 00:04:51,390
each of those we may want a way to shut

125
00:04:48,720 --> 00:04:52,590
down the wrath render but I don't know

126
00:04:51,389 --> 00:04:54,149
that probably needs to be

127
00:04:52,589 --> 00:04:56,819
platform-specific so really I think

128
00:04:54,149 --> 00:05:01,259
we're talking just about these at least

129
00:04:56,819 --> 00:05:04,980
at the moment okay so I'm gonna have a

130
00:05:01,259 --> 00:05:09,750
render process texture cube I'm gonna

131
00:05:04,980 --> 00:05:14,189
have a renderer begin frame and I'm

132
00:05:09,750 --> 00:05:15,990
gonna have a renderer end frame and each

133
00:05:14,189 --> 00:05:18,000
of these it's just going to be a macro

134
00:05:15,990 --> 00:05:22,800
that defines the kind of function that

135
00:05:18,000 --> 00:05:25,470
I'm talking about here so for example in

136
00:05:22,800 --> 00:05:26,910
the case of process texture Q what we're

137
00:05:25,470 --> 00:05:30,480
talking about is something that looks

138
00:05:26,910 --> 00:05:32,040
like this this is what the function

139
00:05:30,480 --> 00:05:34,110
prototype always will look like

140
00:05:32,040 --> 00:05:37,580
similarly for begin frame we're talking

141
00:05:34,110 --> 00:05:37,580
about something that looks like this

142
00:05:39,930 --> 00:05:43,800
and then finally for in frame we're

143
00:05:42,569 --> 00:05:49,860
talking about something that looks like

144
00:05:43,800 --> 00:05:51,810
this not quite like that and that's just

145
00:05:49,860 --> 00:05:53,910
a way to quickly define what these are

146
00:05:51,810 --> 00:05:55,560
anytime we want again the reason I use

147
00:05:53,910 --> 00:05:57,300
this defined process is because it

148
00:05:55,560 --> 00:05:59,009
allows me to generate all of the things

149
00:05:57,300 --> 00:06:01,860
that I want just from one line of code

150
00:05:59,009 --> 00:06:05,430
so this right here can generate the type

151
00:06:01,860 --> 00:06:12,240
def for me here for example is going to

152
00:06:05,430 --> 00:06:15,480
be my renderer process texture cue so

153
00:06:12,240 --> 00:06:20,220
this defines a type def of a pointer to

154
00:06:15,480 --> 00:06:23,240
a function so I can use that right and I

155
00:06:20,220 --> 00:06:23,240
can do this for each of these

156
00:06:27,528 --> 00:06:42,589
blender again Frank and here is the end

157
00:06:37,740 --> 00:06:44,430
framed version so each of these is now a

158
00:06:42,589 --> 00:06:47,728
texture pointer I mean I've touched

159
00:06:44,430 --> 00:06:50,098
that's good a function pointer inside my

160
00:06:47,728 --> 00:06:52,620
renderer and we just need to call them

161
00:06:50,098 --> 00:06:53,998
when we want to use them right that's

162
00:06:52,620 --> 00:06:57,028
what we're gonna do in each of these

163
00:06:53,999 --> 00:07:00,120
cases now if you look at what's going on

164
00:06:57,028 --> 00:07:03,810
here each one of these like we've got

165
00:07:00,120 --> 00:07:05,249
the the type that's here again like said

166
00:07:03,810 --> 00:07:07,800
the reason I do the functions is because

167
00:07:05,249 --> 00:07:09,300
now when I actually want to define the

168
00:07:07,800 --> 00:07:11,430
functions themselves that are going to

169
00:07:09,300 --> 00:07:16,770
get used I actually can just do that

170
00:07:11,430 --> 00:07:18,930
directly I'm gonna delete these here we

171
00:07:16,769 --> 00:07:22,438
do know that we need to include this in

172
00:07:18,930 --> 00:07:23,848
the open jail end frame so I'm gonna put

173
00:07:22,439 --> 00:07:27,088
that in here real quick

174
00:07:23,848 --> 00:07:28,949
but let me go ahead and do that so if I

175
00:07:27,088 --> 00:07:32,189
want to define one of these now I can

176
00:07:28,949 --> 00:07:36,658
just do a winter tear open jail end

177
00:07:32,189 --> 00:07:40,199
frame that's the function and I can go

178
00:07:36,658 --> 00:07:46,848
ahead and make in here the calls that I

179
00:07:40,199 --> 00:07:50,129
want to make like so right so inside my

180
00:07:46,848 --> 00:07:52,438
win32 I can define these callbacks that

181
00:07:50,129 --> 00:07:56,149
I want and how I want them again

182
00:07:52,439 --> 00:07:56,149
processed textures would be the same way

183
00:08:03,300 --> 00:08:10,478
just grab these out here and it doesn't

184
00:08:09,278 --> 00:08:12,218
have to do anything special for the

185
00:08:10,478 --> 00:08:13,778
win32 version here so we could consider

186
00:08:12,218 --> 00:08:15,579
that moving in in I'm not going to just

187
00:08:13,778 --> 00:08:17,408
going to leave it all in the win32 side

188
00:08:15,579 --> 00:08:24,519
just in case in the future we want to do

189
00:08:17,408 --> 00:08:31,360
win32 specific things in there and then

190
00:08:24,519 --> 00:08:34,208
finally we just want this version in

191
00:08:31,360 --> 00:08:36,190
here again very very simple you see me

192
00:08:34,208 --> 00:08:38,888
do this before if you're regular to the

193
00:08:36,190 --> 00:08:40,959
series very straightforward that just

194
00:08:38,889 --> 00:08:44,649
goes ahead and provides those callbacks

195
00:08:40,958 --> 00:08:46,388
so that the renderer knows what it's

196
00:08:44,649 --> 00:08:48,220
doing right it's like these are these

197
00:08:46,389 --> 00:08:50,560
are the the three ways that we interact

198
00:08:48,220 --> 00:08:52,449
with the renderer we know how when threw

199
00:08:50,559 --> 00:08:53,799
up in jail works now it's these three

200
00:08:52,448 --> 00:08:55,838
ways right

201
00:08:53,799 --> 00:08:57,939
those are now defined to be compliant

202
00:08:55,839 --> 00:08:59,470
with these texture with these function

203
00:08:57,940 --> 00:09:02,740
pointers which means that when we

204
00:08:59,470 --> 00:09:04,500
actually do a win32 init opengl when we

205
00:09:02,740 --> 00:09:06,818
come through here and do an OpenGL

206
00:09:04,500 --> 00:09:09,129
initialization when we get down here and

207
00:09:06,818 --> 00:09:11,229
are about to return this this is when we

208
00:09:09,129 --> 00:09:13,419
want to set these function pointers so

209
00:09:11,230 --> 00:09:14,920
that they can be called so we here what

210
00:09:13,419 --> 00:09:17,708
we're gonna do is actually just set them

211
00:09:14,919 --> 00:09:19,958
now we do our alloc here I'm gonna set

212
00:09:17,708 --> 00:09:21,849
them just right off the bat so I'm gonna

213
00:09:19,958 --> 00:09:24,969
set them right in here you can see the

214
00:09:21,850 --> 00:09:30,278
the ones I need to set there these right

215
00:09:24,970 --> 00:09:33,269
so there's the header and I'm gonna set

216
00:09:30,278 --> 00:09:35,769
these individual function pointers to be

217
00:09:33,269 --> 00:09:40,509
the functions that I just defined on the

218
00:09:35,769 --> 00:09:44,970
win32 side so each of these is what we

219
00:09:40,509 --> 00:09:49,720
want so here's the begin frame oops

220
00:09:44,970 --> 00:09:50,740
here's the processed extras call and I

221
00:09:49,720 --> 00:09:52,060
feel like I'm going to put that first

222
00:09:50,740 --> 00:09:53,528
because it seems like the ordering is

223
00:09:52,059 --> 00:09:55,509
this one this one this one so I'm just

224
00:09:53,528 --> 00:09:57,818
gonna keep those and that fills out our

225
00:09:55,509 --> 00:09:59,439
function table right now again this is

226
00:09:57,818 --> 00:10:02,379
very similar to what would happen in a

227
00:09:59,440 --> 00:10:05,769
virtual function call scenario only

228
00:10:02,379 --> 00:10:07,568
we're using a slight difference so in a

229
00:10:05,769 --> 00:10:08,980
virtual and I like to go over this a

230
00:10:07,568 --> 00:10:11,379
couple times because people we don't do

231
00:10:08,980 --> 00:10:12,519
any real C++ stuff on this stream

232
00:10:11,379 --> 00:10:13,629
because I don't like it I don't think

233
00:10:12,519 --> 00:10:14,710
it's very good

234
00:10:13,629 --> 00:10:17,370
but it's worth understanding how it

235
00:10:14,710 --> 00:10:19,720
works so the way a C++ implementation

236
00:10:17,370 --> 00:10:21,490
would have worked is very similar to

237
00:10:19,720 --> 00:10:24,490
what we're doing here but with a slight

238
00:10:21,490 --> 00:10:32,350
difference so it a C++ implementation

239
00:10:24,490 --> 00:10:37,779
would do it like this and it would do

240
00:10:32,350 --> 00:10:39,759
this for you automatically do you see

241
00:10:37,779 --> 00:10:42,429
the difference there so in one case we

242
00:10:39,759 --> 00:10:44,019
have a renderer and in the renderer are

243
00:10:42,429 --> 00:10:45,939
the function pointers themselves and

244
00:10:44,019 --> 00:10:48,009
we're calling directly through those

245
00:10:45,940 --> 00:10:50,680
function pointers right so we get a

246
00:10:48,009 --> 00:10:52,569
pointer to a thing and we say to use the

247
00:10:50,679 --> 00:10:54,479
thing it's got some pointers in it we

248
00:10:52,570 --> 00:10:57,220
just jumped through those pointers great

249
00:10:54,480 --> 00:10:59,170
okay that's this that's what we were

250
00:10:57,220 --> 00:11:01,960
doing the Seba Swiss model is in

251
00:10:59,169 --> 00:11:03,429
directed again it says hey we got a

252
00:11:01,960 --> 00:11:06,160
platform renderer we're actually going

253
00:11:03,429 --> 00:11:07,839
to point to the table of function

254
00:11:06,159 --> 00:11:09,639
pointers so we're gonna first look

255
00:11:07,840 --> 00:11:11,110
through that pointer then look through

256
00:11:09,639 --> 00:11:13,059
the other pointers to do our dispatch

257
00:11:11,110 --> 00:11:15,220
why did they want to do it that way

258
00:11:13,059 --> 00:11:17,049
right it adds an extra indirection

259
00:11:15,220 --> 00:11:18,910
that's bad right well you have to

260
00:11:17,049 --> 00:11:20,679
understand C++ involved at a time when

261
00:11:18,909 --> 00:11:23,500
in directed in wasn't really that big of

262
00:11:20,679 --> 00:11:26,679
a deal as compared to maybe space size

263
00:11:23,500 --> 00:11:28,929
amount of memory used right and you can

264
00:11:26,679 --> 00:11:32,219
see why this takes a lot less space

265
00:11:28,929 --> 00:11:36,489
because every object you instantiate

266
00:11:32,220 --> 00:11:38,440
right in the c++ parlance only needs one

267
00:11:36,490 --> 00:11:41,680
pointer it just needs a pointer to the

268
00:11:38,440 --> 00:11:43,750
table whereas in our version every one

269
00:11:41,679 --> 00:11:46,449
you instantiate needs all the pointers

270
00:11:43,750 --> 00:11:48,940
in themselves that may be better for

271
00:11:46,450 --> 00:11:51,460
cache coherency maybe I mean you don't

272
00:11:48,940 --> 00:11:53,260
know until you check it right because

273
00:11:51,460 --> 00:11:54,670
that table would probably be hot in the

274
00:11:53,259 --> 00:11:59,889
cache a lot too right

275
00:11:54,669 --> 00:12:01,599
but point being he adds more size to the

276
00:11:59,889 --> 00:12:03,669
object which you might not want to do

277
00:12:01,600 --> 00:12:05,830
right so it's worth noting that there

278
00:12:03,669 --> 00:12:07,360
are trade-offs there C++ generates this

279
00:12:05,830 --> 00:12:08,860
one for you that's what a virtual

280
00:12:07,360 --> 00:12:10,690
function table is is the thing that

281
00:12:08,860 --> 00:12:12,430
looks like this you never get to see it

282
00:12:10,690 --> 00:12:14,140
but that's what it's doing I'm doing

283
00:12:12,429 --> 00:12:17,079
something sort of similar but not quite

284
00:12:14,139 --> 00:12:19,090
exactly the same and it looks like this

285
00:12:17,080 --> 00:12:21,070
and again what I will do in the future

286
00:12:19,090 --> 00:12:22,930
is I'll probably get proc address these

287
00:12:21,070 --> 00:12:25,120
out of a DLL so that we can have

288
00:12:22,929 --> 00:12:25,959
different renderers that drop into the

289
00:12:25,120 --> 00:12:30,779
game as

290
00:12:25,960 --> 00:12:30,780
we decide that we want them to be right

291
00:12:30,899 --> 00:12:36,639
so that's all oops

292
00:12:34,409 --> 00:12:39,549
that started there it must have hit the

293
00:12:36,639 --> 00:12:41,110
F key accidentally so that's all that

294
00:12:39,549 --> 00:12:41,769
difference is it's not particularly

295
00:12:41,110 --> 00:12:44,230
different

296
00:12:41,769 --> 00:12:45,639
I like these methods a lot better when I

297
00:12:44,230 --> 00:12:47,379
create them myself because it gives me

298
00:12:45,639 --> 00:12:49,210
more control I don't care for the way

299
00:12:47,379 --> 00:12:50,409
C++ tends to do things most of time

300
00:12:49,210 --> 00:12:52,960
which is why I don't use it but it's

301
00:12:50,409 --> 00:12:54,850
worth understanding it's not magic right

302
00:12:52,960 --> 00:12:57,250
you can make the same thing yourself a

303
00:12:54,850 --> 00:12:58,570
C++ can make and if you let's see if I

304
00:12:57,250 --> 00:12:59,860
supposed to make it for you you don't

305
00:12:58,570 --> 00:13:01,300
have to sit around wondering what

306
00:12:59,860 --> 00:13:03,220
they're doing you can actually go look

307
00:13:01,299 --> 00:13:05,169
even in the debugger and see that what I

308
00:13:03,220 --> 00:13:09,660
just said is what's happening right with

309
00:13:05,169 --> 00:13:09,659
those with those function calls right

310
00:13:10,980 --> 00:13:16,420
you can see that your struct has that

311
00:13:13,299 --> 00:13:18,329
pointer in you can see that it looks

312
00:13:16,419 --> 00:13:21,879
through that pointer to get the table

313
00:13:18,330 --> 00:13:23,080
okay so once we have that now we just

314
00:13:21,879 --> 00:13:25,090
need to make sure that we're actually

315
00:13:23,080 --> 00:13:27,580
using these calls when we wish to

316
00:13:25,090 --> 00:13:30,250
dispatch to the platform renderer so

317
00:13:27,580 --> 00:13:33,280
when I compile we will get complaints

318
00:13:30,250 --> 00:13:34,929
now I'm gonna have to pre declare the

319
00:13:33,279 --> 00:13:36,360
platform render here since this it gets

320
00:13:34,929 --> 00:13:39,870
passed in there but that's fine I

321
00:13:36,360 --> 00:13:44,460
probably also have to do the texture cue

322
00:13:39,870 --> 00:13:47,629
yes maybe I guess not

323
00:13:44,460 --> 00:13:47,629
[Music]

324
00:13:50,620 --> 00:13:55,370
probably the game render commands though

325
00:13:53,089 --> 00:13:59,350
these are just for word declares so that

326
00:13:55,370 --> 00:14:02,000
those names can be resolved there we go

327
00:13:59,350 --> 00:14:03,769
and texture cue I was right I did need

328
00:14:02,000 --> 00:14:05,409
it I was like won't I need the texture

329
00:14:03,769 --> 00:14:11,990
cue and yes I do

330
00:14:05,409 --> 00:14:16,159
there it is so now all we need to do is

331
00:14:11,990 --> 00:14:20,509
make sure that that each of these things

332
00:14:16,159 --> 00:14:25,819
wait how did that that is not what I

333
00:14:20,509 --> 00:14:29,528
meant to do it all there that was some

334
00:14:25,820 --> 00:14:29,528
that was some copypasta for me there

335
00:14:33,220 --> 00:14:38,540
that was actually the allocation code

336
00:14:36,230 --> 00:14:41,200
why did I do that I have no idea why I

337
00:14:38,539 --> 00:14:43,250
did that that was just dumb alright well

338
00:14:41,200 --> 00:14:45,528
sorry about that this is the allocation

339
00:14:43,250 --> 00:14:48,919
Kurt I don't know why I put it there our

340
00:14:45,528 --> 00:14:57,679
allocation code at the moment we are

341
00:14:48,919 --> 00:15:00,649
coming out of a we aren't using an

342
00:14:57,679 --> 00:15:02,828
actual dll yet so I'm just gonna leave

343
00:15:00,649 --> 00:15:06,528
this as an internal call you can make

344
00:15:02,828 --> 00:15:09,528
and in fact you can just call win32 and

345
00:15:06,528 --> 00:15:11,028
it opened jail as of you can you could

346
00:15:09,528 --> 00:15:12,889
almost call it directly but I don't want

347
00:15:11,028 --> 00:15:15,528
you to cast it there so I'm gonna

348
00:15:12,889 --> 00:15:18,110
pretend that we have sort of the DLL

349
00:15:15,528 --> 00:15:20,179
loading thing going on here for the

350
00:15:18,110 --> 00:15:27,278
moment and we'll get to that later

351
00:15:20,179 --> 00:15:29,569
right so if we have this call here

352
00:15:27,278 --> 00:15:34,120
really all we're doing is proxying this

353
00:15:29,570 --> 00:15:34,120
call like so

354
00:15:39,679 --> 00:15:45,569
this way all we're going to do is

355
00:15:43,289 --> 00:15:49,639
practice this call here so we need to

356
00:15:45,570 --> 00:15:49,640
call this something else so you know

357
00:15:51,919 --> 00:15:57,329
this is just kind of arbitrary how we're

358
00:15:54,840 --> 00:16:00,300
gonna do this that's how I'm gonna do it

359
00:15:57,330 --> 00:16:01,860
for now so that's all we really need to

360
00:16:00,299 --> 00:16:03,959
do now we just need to change our calls

361
00:16:01,860 --> 00:16:05,029
into it this allocate renderer call is

362
00:16:03,960 --> 00:16:07,290
really just going to be went through

363
00:16:05,029 --> 00:16:10,289
opengl load renderer for now and we're

364
00:16:07,289 --> 00:16:13,110
gonna change that to use of DOL and then

365
00:16:10,289 --> 00:16:14,819
if I come through here and I look at its

366
00:16:13,110 --> 00:16:17,840
that's passed in the wrong order there

367
00:16:14,820 --> 00:16:17,840
there we go

368
00:16:18,059 --> 00:16:24,869
all of these just need to call off of

369
00:16:22,559 --> 00:16:26,939
the renderer right so the renderer that

370
00:16:24,870 --> 00:16:30,060
we have there just we're just calling

371
00:16:26,940 --> 00:16:32,250
off of the renderer so every time we

372
00:16:30,059 --> 00:16:35,609
want to do whatever we're doing here we

373
00:16:32,250 --> 00:16:38,309
just call off of the renderer right very

374
00:16:35,610 --> 00:16:40,169
very straightforward now for a begin

375
00:16:38,309 --> 00:16:42,719
frame I don't like I said I don't really

376
00:16:40,169 --> 00:16:45,000
remember what we were doing for begin

377
00:16:42,720 --> 00:16:46,500
frame here but I'm think we didn't

378
00:16:45,000 --> 00:16:54,450
really do anything for a big in frame

379
00:16:46,500 --> 00:16:56,929
I'm pretty sure it was just the a pretty

380
00:16:54,450 --> 00:16:59,960
sure it was just a straight call through

381
00:16:56,929 --> 00:17:02,669
right I think this is all we were doing

382
00:16:59,960 --> 00:17:05,700
I don't think there was any actual other

383
00:17:02,669 --> 00:17:09,960
stuff so I think this is actually what

384
00:17:05,700 --> 00:17:13,019
and and all we really needed to do here

385
00:17:09,960 --> 00:17:16,100
we just need to cast this to the kind of

386
00:17:13,019 --> 00:17:16,099
pointer we actually have

387
00:17:19,558 --> 00:17:27,970
and I think that's it so that's the only

388
00:17:24,609 --> 00:17:30,009
change I wanted to make and like I said

389
00:17:27,970 --> 00:17:31,659
we can live this out of DLL maybe we can

390
00:17:30,009 --> 00:17:34,148
compiled as a DLL now just to prove that

391
00:17:31,659 --> 00:17:36,760
point but that's really it

392
00:17:34,148 --> 00:17:39,189
and so now everything just works fine

393
00:17:36,759 --> 00:17:41,200
right let's go ahead and make that

394
00:17:39,190 --> 00:17:42,460
change in handmade hero as well so in

395
00:17:41,200 --> 00:17:44,169
here where we do this instead of

396
00:17:42,460 --> 00:17:50,590
allocate renderer I'm just going to call

397
00:17:44,169 --> 00:17:56,590
winter to OpenGL renderer and pass these

398
00:17:50,589 --> 00:17:57,668
in like so and we can still do a lot of

399
00:17:56,589 --> 00:17:58,959
things we could do with an enamel we're

400
00:17:57,669 --> 00:18:01,659
just gonna do them with a file name in

401
00:17:58,960 --> 00:18:03,759
the future right because what we can do

402
00:18:01,659 --> 00:18:05,350
is say look whatever file name you

403
00:18:03,759 --> 00:18:06,700
loaded to render out of is the renderer

404
00:18:05,349 --> 00:18:08,408
you're using and that can be saved and

405
00:18:06,700 --> 00:18:09,819
loaded from disk as well so we'll get

406
00:18:08,409 --> 00:18:11,740
the benefits we would have gotten within

407
00:18:09,819 --> 00:18:13,808
them as well so there's it running

408
00:18:11,740 --> 00:18:16,798
outside of handmade hero the renderer

409
00:18:13,808 --> 00:18:19,690
here's it running inside handmade here

410
00:18:16,798 --> 00:18:21,398
the renderer in both cases these are

411
00:18:19,690 --> 00:18:25,000
both unoptimized their debug builds at

412
00:18:21,398 --> 00:18:27,939
the moment so that I think is just

413
00:18:25,000 --> 00:18:30,069
better and again like I said the reason

414
00:18:27,940 --> 00:18:33,190
that I think that's better is because it

415
00:18:30,069 --> 00:18:37,240
allows us to load the renderer out of a

416
00:18:33,190 --> 00:18:38,950
dll and not have to worry about like

417
00:18:37,240 --> 00:18:41,798
letting other if other people want to

418
00:18:38,950 --> 00:18:43,450
provide new renderers they just can this

419
00:18:41,798 --> 00:18:45,069
is kind of fun I feel like like let's

420
00:18:43,450 --> 00:18:47,080
suppose someone just wants to make a ray

421
00:18:45,069 --> 00:18:49,569
tracer for handmade hero they just can

422
00:18:47,079 --> 00:18:50,740
right they can just replace a dll they

423
00:18:49,569 --> 00:18:53,168
don't have to touch the game code at all

424
00:18:50,740 --> 00:18:55,149
right they can just drop in a new dll

425
00:18:53,169 --> 00:18:57,130
and it would work so I'm kind of curious

426
00:18:55,148 --> 00:18:58,778
right if let's say we want to do that

427
00:18:57,130 --> 00:19:03,130
let's say we actually want to just make

428
00:18:58,778 --> 00:19:04,898
it be part of the DLL we already know

429
00:19:03,130 --> 00:19:08,250
that we can build dll's pretty easily

430
00:19:04,898 --> 00:19:13,418
right we have a way to do those things

431
00:19:08,250 --> 00:19:14,140
and we do them for the game right so if

432
00:19:13,419 --> 00:19:17,770
we wanted to

433
00:19:14,140 --> 00:19:20,590
as far as renderer was concerned right

434
00:19:17,769 --> 00:19:25,359
we can have a thing here that's like you

435
00:19:20,589 --> 00:19:27,849
know renderers and we can build in here

436
00:19:25,359 --> 00:19:30,278
the renderers that we want to build so

437
00:19:27,849 --> 00:19:32,899
if we want to I don't need to include

438
00:19:30,278 --> 00:19:35,170
Ayaka at the moment

439
00:19:32,900 --> 00:19:39,380
so if I want to build one of these I can

440
00:19:35,170 --> 00:19:43,789
and I can make a file that will allow me

441
00:19:39,380 --> 00:19:47,000
to do that and yeah I'm gonna go ahead

442
00:19:43,789 --> 00:19:48,829
and and try so you can see here we pass

443
00:19:47,000 --> 00:19:50,808
some stuff I don't need to specify the

444
00:19:48,829 --> 00:19:53,269
PDB in this stuff we may want to do that

445
00:19:50,808 --> 00:19:56,329
at some point but you can see here we

446
00:19:53,269 --> 00:20:00,829
build in some exports what I want to do

447
00:19:56,329 --> 00:20:03,829
is define those exports to be very

448
00:20:00,829 --> 00:20:07,730
specific calls alright so if I now want

449
00:20:03,829 --> 00:20:09,259
to break this out into a DLL in win32

450
00:20:07,730 --> 00:20:11,750
hand-made open jail which is the code

451
00:20:09,259 --> 00:20:14,599
that we're talking about specifically if

452
00:20:11,750 --> 00:20:17,690
we look at what those have to be what we

453
00:20:14,599 --> 00:20:21,919
can see here is like win32 init open

454
00:20:17,690 --> 00:20:24,650
jail and so forth I'm sorry with you and

455
00:20:21,920 --> 00:20:27,558
frame begin frame and process texture

456
00:20:24,650 --> 00:20:29,690
cue right these are the functions that

457
00:20:27,558 --> 00:20:32,539
we actually want to be generic across

458
00:20:29,690 --> 00:20:35,420
renderers I can change them to be like

459
00:20:32,539 --> 00:20:37,308
this well okay you know I just realized

460
00:20:35,420 --> 00:20:38,990
even that I don't need those don't need

461
00:20:37,308 --> 00:20:41,240
to be exported because we actually just

462
00:20:38,990 --> 00:20:42,259
need the initialization be exported so

463
00:20:41,240 --> 00:20:44,450
if we take a look at what actually

464
00:20:42,259 --> 00:20:47,089
happened here it's really only the the

465
00:20:44,450 --> 00:20:49,910
load call right because since we load

466
00:20:47,089 --> 00:20:52,369
the pointers into the thing we provide

467
00:20:49,910 --> 00:20:53,960
we don't need to export those functions

468
00:20:52,369 --> 00:20:57,589
because no one's gonna bind against them

469
00:20:53,960 --> 00:20:59,840
so if we just export the load then on

470
00:20:57,589 --> 00:21:01,849
load you will call it you'll get back

471
00:20:59,839 --> 00:21:08,269
the struck that's got the functions in

472
00:21:01,849 --> 00:21:10,549
it you need your done right so what I'm

473
00:21:08,269 --> 00:21:16,879
gonna have it be here is just platform

474
00:21:10,549 --> 00:21:20,210
load renderer that call needs to take

475
00:21:16,880 --> 00:21:23,030
some information with it I'm gonna call

476
00:21:20,210 --> 00:21:25,610
it win32 load renderer I think because

477
00:21:23,029 --> 00:21:27,589
since its platform specific it's gonna

478
00:21:25,609 --> 00:21:31,490
need information from the app that's

479
00:21:27,589 --> 00:21:34,279
window specific right that is important

480
00:21:31,490 --> 00:21:35,839
so it's not a platform agnostic load

481
00:21:34,279 --> 00:21:37,879
call because it needs you to pay it

482
00:21:35,839 --> 00:21:40,970
needs to be called from the win32 layer

483
00:21:37,880 --> 00:21:45,050
and you would need another shim so you

484
00:21:40,970 --> 00:21:46,579
need like mac OpenGL or whatever if you

485
00:21:45,049 --> 00:21:48,168
wanted to do this on Mac right

486
00:21:46,579 --> 00:21:51,408
it needs to have match specific startup

487
00:21:48,169 --> 00:21:55,278
code in it okay so that's how that would

488
00:21:51,409 --> 00:21:57,500
work so if I just go ahead and say look

489
00:21:55,278 --> 00:22:00,589
we're gonna export this function okay

490
00:21:57,500 --> 00:22:03,470
that's going to come out this dll right

491
00:22:00,589 --> 00:22:05,980
it's going to come out then what I can

492
00:22:03,470 --> 00:22:11,659
do is build the DLL of this by saying

493
00:22:05,980 --> 00:22:15,140
win32 handmade OpenGL complete compile

494
00:22:11,659 --> 00:22:18,380
this for me that can now be its own

495
00:22:15,140 --> 00:22:20,330
compilation unit right so I'm going to

496
00:22:18,380 --> 00:22:22,820
try that just to see what we can do if

497
00:22:20,329 --> 00:22:25,009
we make it alright so the first thing we

498
00:22:22,819 --> 00:22:29,298
have to do is change a little bit about

499
00:22:25,009 --> 00:22:32,388
the way we do our our compilation here

500
00:22:29,298 --> 00:22:35,210
all of this stuff that we used to call

501
00:22:32,388 --> 00:22:37,638
like that we use to include we don't

502
00:22:35,210 --> 00:22:39,110
need to include anymore so their OpenGL

503
00:22:37,638 --> 00:22:41,509
side of things like all this stuff

504
00:22:39,109 --> 00:22:44,479
actually doesn't need to be here anymore

505
00:22:41,509 --> 00:22:46,519
handmade OpenGL renderer opengl those

506
00:22:44,480 --> 00:22:47,690
things are actually not necessary

507
00:22:46,519 --> 00:22:50,210
anymore

508
00:22:47,690 --> 00:22:52,340
outside of the OpenGL render itself

509
00:22:50,210 --> 00:22:54,409
those are going to be baked in here now

510
00:22:52,339 --> 00:22:59,418
we still need all this stuff because

511
00:22:54,409 --> 00:23:01,669
these things are themselves used inside

512
00:22:59,419 --> 00:23:03,320
the renderer but we don't need to

513
00:23:01,669 --> 00:23:05,720
include any OpenGL specific things in

514
00:23:03,319 --> 00:23:08,418
here right so now let's go ahead and

515
00:23:05,720 --> 00:23:10,610
build let's see what we've got here so

516
00:23:08,419 --> 00:23:12,620
now we just need our platform includes

517
00:23:10,609 --> 00:23:15,648
like things that we rely on from Windows

518
00:23:12,619 --> 00:23:16,518
itself that's just this stuff there we

519
00:23:15,648 --> 00:23:19,099
go

520
00:23:16,519 --> 00:23:21,079
and similarly now inside here we don't

521
00:23:19,099 --> 00:23:22,609
need to include OpenGL anymore because

522
00:23:21,079 --> 00:23:25,009
we're not going to include the OpenGL

523
00:23:22,609 --> 00:23:26,629
renderer right none of this has to know

524
00:23:25,009 --> 00:23:29,359
that opengl exists at all

525
00:23:26,630 --> 00:23:33,139
we never have to talk about OpenGL if we

526
00:23:29,359 --> 00:23:35,538
don't want to right okay so now let's

527
00:23:33,138 --> 00:23:40,189
see what kind of problems we get here

528
00:23:35,538 --> 00:23:43,700
we're getting some read some kind of

529
00:23:40,190 --> 00:23:48,950
problem with a redefinition I don't know

530
00:23:43,700 --> 00:23:49,220
why who is doing that what's happening

531
00:23:48,950 --> 00:23:52,490
here

532
00:23:49,220 --> 00:23:56,870
oops somebody is doing some kind of a

533
00:23:52,490 --> 00:23:58,759
pound include that I don't like I'm not

534
00:23:56,869 --> 00:24:01,229
sure you

535
00:23:58,759 --> 00:24:03,779
don't see why that would have happened

536
00:24:01,230 --> 00:24:10,559
actually twins to accidentally include

537
00:24:03,779 --> 00:24:12,289
the same thing twice number let's take a

538
00:24:10,559 --> 00:24:15,629
look

539
00:24:12,289 --> 00:24:17,009
C++ doesn't compilers don't generally

540
00:24:15,630 --> 00:24:18,840
have the best error reporting for things

541
00:24:17,009 --> 00:24:23,279
like this some I think LLVM has

542
00:24:18,839 --> 00:24:25,529
considerably better error reporting so

543
00:24:23,279 --> 00:24:28,440
yeah but let me just double check what's

544
00:24:25,529 --> 00:24:35,339
going on we don't care what any of these

545
00:24:28,440 --> 00:24:37,200
or these or those or those or those so

546
00:24:35,339 --> 00:24:40,349
we're really just talking about and sign

547
00:24:37,200 --> 00:24:42,779
a made types so this looks I know this

548
00:24:40,349 --> 00:24:44,129
looks pretty reasonable what's the how

549
00:24:42,779 --> 00:24:48,149
did we get multiple defensible for

550
00:24:44,130 --> 00:24:50,790
buffer struct type redefinition where

551
00:24:48,150 --> 00:24:53,850
did it so we're including we're

552
00:24:50,789 --> 00:24:55,980
including handmade types twice I'm just

553
00:24:53,849 --> 00:25:01,849
not sure how I did that because I didn't

554
00:24:55,980 --> 00:25:01,849
think I did but I obviously did oh

555
00:25:04,789 --> 00:25:10,079
there's the couple right there a file

556
00:25:07,140 --> 00:25:14,490
should not include itself just in case

557
00:25:10,079 --> 00:25:17,339
you were wondering all right let's see

558
00:25:14,490 --> 00:25:19,440
what else we got opened Jill debug

559
00:25:17,339 --> 00:25:23,399
callback undeclared event so this GL

560
00:25:19,440 --> 00:25:25,799
debug callback pound define that looks

561
00:25:23,400 --> 00:25:27,740
like that wasn't done yet that's

562
00:25:25,799 --> 00:25:31,019
probably because it's all in here so

563
00:25:27,740 --> 00:25:32,700
some of these definitions should we

564
00:25:31,019 --> 00:25:35,970
should probably move down so I'm

565
00:25:32,700 --> 00:25:39,150
guessing that we just want to do this

566
00:25:35,970 --> 00:25:40,589
here to make sure these are all already

567
00:25:39,150 --> 00:25:42,890
accounted for let me just double check

568
00:25:40,589 --> 00:25:46,500
that yeah there we go

569
00:25:42,890 --> 00:25:49,140
um so win32 load renderer is the only

570
00:25:46,500 --> 00:25:50,940
thing in here that we're actually

571
00:25:49,140 --> 00:25:53,009
exporting so that's the function we want

572
00:25:50,940 --> 00:25:55,350
to export what you can see here is even

573
00:25:53,009 --> 00:25:57,809
though I clearly have it defined you can

574
00:25:55,349 --> 00:26:00,119
see that it can't find this symbol why

575
00:25:57,809 --> 00:26:01,940
not well the reason that it can't find

576
00:26:00,119 --> 00:26:06,299
it is because this thing isn't

577
00:26:01,940 --> 00:26:11,029
unfortunately exported in any it isn't

578
00:26:06,299 --> 00:26:11,029
set up to be named that on

579
00:26:11,690 --> 00:26:17,279
what's heard before I'm compiled

580
00:26:15,029 --> 00:26:19,049
now what do I mean by that well if you

581
00:26:17,279 --> 00:26:20,430
pay attention to all of handmade hero

582
00:26:19,049 --> 00:26:21,809
you already know what happens here but

583
00:26:20,430 --> 00:26:23,730
this is kind of stretching it it goes

584
00:26:21,809 --> 00:26:26,129
way back so for those of you who don't

585
00:26:23,730 --> 00:26:28,740
remember when you compile C++ code

586
00:26:26,130 --> 00:26:32,670
mangles all the names what that means is

587
00:26:28,740 --> 00:26:33,809
hey C++ allows overloaded functions it

588
00:26:32,670 --> 00:26:35,880
means two functions with different

589
00:26:33,809 --> 00:26:38,519
parameters but the same name are

590
00:26:35,880 --> 00:26:40,860
distinguishable in order to support that

591
00:26:38,519 --> 00:26:43,319
in the old days since names were

592
00:26:40,859 --> 00:26:44,789
typically used to bind functions to

593
00:26:43,319 --> 00:26:47,220
their call points what they did is they

594
00:26:44,789 --> 00:26:49,230
just made up new names that included

595
00:26:47,220 --> 00:26:50,759
what the parameters were in the name so

596
00:26:49,230 --> 00:26:53,370
you could still use the old linkage

597
00:26:50,759 --> 00:26:55,970
system for it that means that win32 load

598
00:26:53,369 --> 00:26:58,739
renderer doesn't come out being called

599
00:26:55,970 --> 00:27:00,180
win32 load renderer it comes out being

600
00:26:58,740 --> 00:27:03,359
called some really ridiculous long

601
00:27:00,180 --> 00:27:08,009
mangled name instead what we have to do

602
00:27:03,359 --> 00:27:09,899
if we want to tell it to not mangle the

603
00:27:08,009 --> 00:27:12,569
name so that we can find that and export

604
00:27:09,900 --> 00:27:14,610
it is just call it X turn see once we

605
00:27:12,569 --> 00:27:16,889
call it extra and see it knows that that

606
00:27:14,609 --> 00:27:18,629
name will stay the same and we should be

607
00:27:16,890 --> 00:27:20,520
able to do it of course as I say this it

608
00:27:18,630 --> 00:27:26,730
turns out that it actually did not find

609
00:27:20,519 --> 00:27:29,039
the name so I take it back don't take my

610
00:27:26,730 --> 00:27:37,319
word for it I will have to find out why

611
00:27:29,039 --> 00:27:40,409
it decided not to that's okay so okay I

612
00:27:37,319 --> 00:27:43,919
guess not let me look at that build

613
00:27:40,410 --> 00:27:46,500
again I assumed that it would do that

614
00:27:43,920 --> 00:27:50,550
for me apparently it wouldn't do that

615
00:27:46,500 --> 00:27:54,000
for me so you know oh well such as life

616
00:27:50,549 --> 00:27:55,259
so my assumption was that hey if we're

617
00:27:54,000 --> 00:27:57,180
compiling went through to handmade

618
00:27:55,259 --> 00:27:59,339
OpenGL and I just marked this as extra

619
00:27:57,180 --> 00:28:02,220
and C win32 load renderer

620
00:27:59,339 --> 00:28:04,799
will come out as a function that is

621
00:28:02,220 --> 00:28:06,900
named what it is named but unfortunately

622
00:28:04,799 --> 00:28:08,909
as you can see in here that's not

623
00:28:06,900 --> 00:28:11,460
actually what happened so forcing it to

624
00:28:08,910 --> 00:28:16,620
export this it didn't actually want to

625
00:28:11,460 --> 00:28:19,009
export it woe is me now I'm not sure why

626
00:28:16,619 --> 00:28:22,289
it didn't because I feel like once I do

627
00:28:19,009 --> 00:28:24,359
an extra and see on that it should have

628
00:28:22,289 --> 00:28:26,668
done it for me

629
00:28:24,359 --> 00:28:28,740
so now I just want to know well why are

630
00:28:26,669 --> 00:28:31,049
you having trouble finding that function

631
00:28:28,740 --> 00:28:33,899
I specifically said that this should be

632
00:28:31,048 --> 00:28:36,000
fine right and so I just want to know at

633
00:28:33,898 --> 00:28:37,949
this point what did I screw up I

634
00:28:36,000 --> 00:28:39,569
obviously screwed something up and I'm

635
00:28:37,950 --> 00:28:41,429
just forgetting something important that

636
00:28:39,569 --> 00:28:43,528
I was supposed to do but the question is

637
00:28:41,429 --> 00:28:45,769
how do I figure it out so the first

638
00:28:43,528 --> 00:28:50,490
thing I want to do is just look to see

639
00:28:45,769 --> 00:28:52,169
hey if this went through handmade open

640
00:28:50,490 --> 00:28:53,579
Jill that obj right which is the thing

641
00:28:52,169 --> 00:28:56,009
that got created what I could pile this

642
00:28:53,579 --> 00:29:00,569
file can you just tell me what you

643
00:28:56,009 --> 00:29:02,759
thought was in here so that I know what

644
00:29:00,569 --> 00:29:04,740
the names were right like can you give

645
00:29:02,759 --> 00:29:06,298
me some information um so what I'm gonna

646
00:29:04,740 --> 00:29:08,759
do is try writing a thing called dump in

647
00:29:06,298 --> 00:29:11,250
it's part of the visual studio utilities

648
00:29:08,759 --> 00:29:14,339
I'm just gonna ask it can you just tell

649
00:29:11,250 --> 00:29:17,069
me what can you tell me about this obj

650
00:29:14,339 --> 00:29:19,528
file you compiled what's in it right

651
00:29:17,069 --> 00:29:20,759
what are what you know what do you

652
00:29:19,528 --> 00:29:26,308
actually have it in there maybe I'll do

653
00:29:20,759 --> 00:29:32,970
all of us to see ok maybe not quite that

654
00:29:26,308 --> 00:29:34,190
all yeah the fact that exports didn't

655
00:29:32,970 --> 00:29:36,960
tell me anything

656
00:29:34,190 --> 00:29:40,769
suggests that I've got issues right but

657
00:29:36,960 --> 00:29:43,649
that's kind of beside the point um let's

658
00:29:40,769 --> 00:29:44,909
see here yeah I mean if exports doesn't

659
00:29:43,648 --> 00:29:46,739
show anything I think I'm kind of dead

660
00:29:44,909 --> 00:29:53,159
in the water so that's obviously the

661
00:29:46,740 --> 00:29:56,000
problems that we've got let's take a

662
00:29:53,159 --> 00:29:56,000
look at those symbols there

663
00:29:57,519 --> 00:30:07,058
Oh duh oh man

664
00:30:05,170 --> 00:30:09,160
so maybe the long pre stream threw me

665
00:30:07,058 --> 00:30:10,899
for a loop you'll notice I still was

666
00:30:09,160 --> 00:30:13,300
saying that it's an internal which is

667
00:30:10,900 --> 00:30:15,250
which means static right to us which

668
00:30:13,299 --> 00:30:17,049
means it's not gonna export it so I

669
00:30:15,250 --> 00:30:22,150
don't know what I was thinking there

670
00:30:17,049 --> 00:30:24,759
that is all it is yeah so when you say

671
00:30:22,150 --> 00:30:27,730
something like that and you say that

672
00:30:24,759 --> 00:30:29,379
when you say that something's file scope

673
00:30:27,730 --> 00:30:31,269
only it's not going to appear in the

674
00:30:29,380 --> 00:30:32,559
import table right so we have to remove

675
00:30:31,269 --> 00:30:34,329
that because even though I said extra

676
00:30:32,558 --> 00:30:36,549
and see it won't mangle the name what

677
00:30:34,329 --> 00:30:38,859
I'm curious about is if I get rid of

678
00:30:36,549 --> 00:30:41,379
that is it smart enough to override the

679
00:30:38,859 --> 00:30:43,000
name I think it is yeah that's what I

680
00:30:41,380 --> 00:30:44,170
thought so when I first put that extra

681
00:30:43,000 --> 00:30:45,970
in see in there I was like I shouldn't

682
00:30:44,170 --> 00:30:47,769
have had to do that because usually at

683
00:30:45,970 --> 00:30:49,329
least my recollection and they changed

684
00:30:47,769 --> 00:30:51,639
these things all the time so you know

685
00:30:49,329 --> 00:30:53,740
taken with a grain of salt when you

686
00:30:51,640 --> 00:30:55,750
specify something to export it usually

687
00:30:53,740 --> 00:30:59,558
turns off the name mangling for you on

688
00:30:55,750 --> 00:31:00,730
that automatically usually right so I

689
00:30:59,558 --> 00:31:04,808
was weirded out with the fact I had to

690
00:31:00,730 --> 00:31:06,730
do it I forgot that this static will

691
00:31:04,808 --> 00:31:08,769
over like that takes precedence

692
00:31:06,730 --> 00:31:11,679
this isn't strong enough to override

693
00:31:08,769 --> 00:31:13,569
that don't ask me why probably just

694
00:31:11,679 --> 00:31:16,179
because this is - the linker and this is

695
00:31:13,569 --> 00:31:18,129
- the compiler so it never actually gets

696
00:31:16,179 --> 00:31:20,890
this function far enough to do this I

697
00:31:18,130 --> 00:31:23,320
suspect so I think if I want to do this

698
00:31:20,890 --> 00:31:26,320
I think I'm actually okay I'm not sure

699
00:31:23,319 --> 00:31:29,230
though meaning just get rid of the

700
00:31:26,319 --> 00:31:30,490
internal and you're fine let's double

701
00:31:29,230 --> 00:31:33,730
check so oops

702
00:31:30,490 --> 00:31:36,490
I don't need symbols there sorry I just

703
00:31:33,730 --> 00:31:38,140
need exports let me see if I can get

704
00:31:36,490 --> 00:31:40,179
that to show up well that didn't

705
00:31:38,140 --> 00:31:44,410
actually show up so I'm not sure I'm not

706
00:31:40,179 --> 00:31:47,530
sure if it's okay or not I'm not sure if

707
00:31:44,410 --> 00:31:49,050
it's okay or not so let me finish the

708
00:31:47,529 --> 00:31:54,279
rest of this linking and then we'll see

709
00:31:49,049 --> 00:31:55,539
what will toggle it either way so what

710
00:31:54,279 --> 00:31:57,039
you'll notice is we can't finish

711
00:31:55,539 --> 00:31:58,539
compiling because we have a bunch of

712
00:31:57,039 --> 00:32:01,678
undefined symbols those undefined

713
00:31:58,539 --> 00:32:03,909
symbols are all linker issues their

714
00:32:01,679 --> 00:32:06,160
libraries that we need that we don't

715
00:32:03,910 --> 00:32:08,200
have now I don't know where we defined

716
00:32:06,160 --> 00:32:11,259
these but they're basically all in here

717
00:32:08,200 --> 00:32:14,920
and we're gonna at least need the open G

718
00:32:11,259 --> 00:32:18,700
32 and the GDI 32 stuff so I'm gonna go

719
00:32:14,920 --> 00:32:20,769
ahead and put those on here let me just

720
00:32:18,700 --> 00:32:22,720
go ahead and see where we've got there

721
00:32:20,769 --> 00:32:29,019
and then it yeah yeah

722
00:32:22,720 --> 00:32:31,870
so handmade went so witty to him in open

723
00:32:29,019 --> 00:32:34,839
Jill I don't know where these are coming

724
00:32:31,869 --> 00:32:37,089
in though destroy window create window

725
00:32:34,839 --> 00:32:41,500
register class I don't understand why

726
00:32:37,089 --> 00:32:43,869
those would be involved in winter to him

727
00:32:41,500 --> 00:32:46,930
it made OpenGL though so I want to just

728
00:32:43,869 --> 00:32:49,899
look and see why why are those getting

729
00:32:46,930 --> 00:32:54,670
called right just so I can double check

730
00:32:49,900 --> 00:33:11,080
like that they should be so yeah I'm not

731
00:32:54,670 --> 00:33:14,880
sure yes so we had to create a dummy

732
00:33:11,079 --> 00:33:16,379
window in order to test for these things

733
00:33:14,880 --> 00:33:19,210
first

734
00:33:16,380 --> 00:33:20,620
okay so that's fine I just wanted to

735
00:33:19,210 --> 00:33:22,269
make sure those should be there there's

736
00:33:20,619 --> 00:33:24,099
nothing wrong with doing that so I'll

737
00:33:22,269 --> 00:33:25,779
leave that in there but that means we do

738
00:33:24,099 --> 00:33:27,459
need to link with the user 32 which is

739
00:33:25,779 --> 00:33:31,420
where the standard window functions come

740
00:33:27,460 --> 00:33:34,890
from right so that's all good so that

741
00:33:31,420 --> 00:33:37,330
allows us to build our tol there we go

742
00:33:34,890 --> 00:33:39,130
and now we're done we you know we've

743
00:33:37,329 --> 00:33:40,869
we've got a dll built and it should be

744
00:33:39,130 --> 00:33:43,420
ready to go I'm gonna check those

745
00:33:40,869 --> 00:33:45,339
exports again so it's weird to me that

746
00:33:43,420 --> 00:33:48,269
that doesn't have that in there because

747
00:33:45,339 --> 00:33:50,859
it looks like it does here yeah okay so

748
00:33:48,269 --> 00:33:52,420
as you can see my fears about the

749
00:33:50,859 --> 00:33:55,959
mangled name though we're still correct

750
00:33:52,420 --> 00:33:58,060
so it looks like you still end up do

751
00:33:55,960 --> 00:33:59,620
with do end up with a bunch of name

752
00:33:58,059 --> 00:34:00,879
mangling whether that's actually

753
00:33:59,619 --> 00:34:02,529
prompted dll you don't know that because

754
00:34:00,880 --> 00:34:04,450
you can see here it knows that the name

755
00:34:02,529 --> 00:34:06,220
is a short name I assume that's the one

756
00:34:04,450 --> 00:34:08,648
that it puts in the dll's import table

757
00:34:06,220 --> 00:34:16,000
but who knows let's run depends on it to

758
00:34:08,648 --> 00:34:18,638
find out so again this is something that

759
00:34:16,000 --> 00:34:20,710
will allow us to look at our DLL and see

760
00:34:18,639 --> 00:34:22,960
what it actually is exporting like what

761
00:34:20,710 --> 00:34:24,820
it actually directly says and that's

762
00:34:22,960 --> 00:34:25,300
just a way to know whether we did that

763
00:34:24,820 --> 00:34:27,610
correctly

764
00:34:25,300 --> 00:34:28,960
not so um I was actually the right

765
00:34:27,610 --> 00:34:30,880
director there so here's that one

766
00:34:28,960 --> 00:34:34,690
through to your handmade OpenGL DLL and

767
00:34:30,880 --> 00:34:36,130
if we look at that after incredibly a

768
00:34:34,690 --> 00:34:37,360
long time of it walking tons of things

769
00:34:36,130 --> 00:34:41,860
because kernel now depends on eight

770
00:34:37,360 --> 00:34:47,170
million things in blah blah blah there

771
00:34:41,860 --> 00:34:49,929
we go we should be able to see what we

772
00:34:47,170 --> 00:34:51,460
actually depend on and here they are

773
00:34:49,929 --> 00:34:52,929
these are the four things to depend on

774
00:34:51,460 --> 00:34:54,849
that's what we want those are things we

775
00:34:52,929 --> 00:34:57,190
expect so let's see what we export

776
00:34:54,849 --> 00:34:59,469
here's what we export you can see that

777
00:34:57,190 --> 00:35:05,980
even though the name itself

778
00:34:59,469 --> 00:35:08,500
we didn't extern see it right so you can

779
00:35:05,980 --> 00:35:10,179
see here we didn't extra and see it the

780
00:35:08,500 --> 00:35:12,550
fact that we told it we wanted an export

781
00:35:10,179 --> 00:35:14,409
it did use the comfortable name for us

782
00:35:12,550 --> 00:35:16,480
right so that's exactly what we wanted

783
00:35:14,409 --> 00:35:19,239
to happen so we don't need the extra and

784
00:35:16,480 --> 00:35:21,490
see it understands that name mangling

785
00:35:19,239 --> 00:35:23,109
isn't appropriate for being in the dll

786
00:35:21,489 --> 00:35:25,449
so when we named it that in the export

787
00:35:23,110 --> 00:35:28,450
it puts it in there correctly so now

788
00:35:25,449 --> 00:35:32,199
we've got a dll that we can just use you

789
00:35:28,449 --> 00:35:33,730
know we can just call that so that means

790
00:35:32,199 --> 00:35:35,559
if we wanted to take our went through to

791
00:35:33,730 --> 00:35:38,440
render test now what we could do is say

792
00:35:35,559 --> 00:35:42,250
okay let's go ahead and just get rid of

793
00:35:38,440 --> 00:35:44,920
any notion that the win32 OpenGL

794
00:35:42,250 --> 00:35:46,960
renderer is built into here right let's

795
00:35:44,920 --> 00:35:50,289
get rid of that and instead let's call

796
00:35:46,960 --> 00:35:53,039
this as a function call so let's do it

797
00:35:50,289 --> 00:35:53,039
right here

798
00:35:59,210 --> 00:36:03,269
here's the load library call right and

799
00:36:01,980 --> 00:36:05,789
for those of you that don't remember

800
00:36:03,269 --> 00:36:08,190
we're just going to pass a name of a

801
00:36:05,789 --> 00:36:10,139
library to load dynamic one flower to

802
00:36:08,190 --> 00:36:11,900
load windows we'll load it we can then

803
00:36:10,139 --> 00:36:15,659
get function pointers out of it by name

804
00:36:11,900 --> 00:36:16,920
so if you go familiarize yourself with

805
00:36:15,659 --> 00:36:18,899
this function if you don't know what it

806
00:36:16,920 --> 00:36:20,670
is right this is it right here all you

807
00:36:18,900 --> 00:36:22,950
have to do is just pass a file name to

808
00:36:20,670 --> 00:36:25,590
it that's it right that's all you have

809
00:36:22,949 --> 00:36:28,169
to do so what I want to do is I want to

810
00:36:25,590 --> 00:36:30,720
call load library and again remember we

811
00:36:28,170 --> 00:36:32,159
were we want this to work in unicode or

812
00:36:30,719 --> 00:36:33,839
otherwise so we're gonna use this text

813
00:36:32,159 --> 00:36:36,899
macro to wrap it this is just in case

814
00:36:33,840 --> 00:36:39,059
people compiled unicode verses ascii we

815
00:36:36,900 --> 00:36:43,050
want it to work in either one i believe

816
00:36:39,059 --> 00:36:44,699
you have to use load library a or w if

817
00:36:43,050 --> 00:36:46,350
you want to call specific one so we're

818
00:36:44,699 --> 00:36:48,480
just gonna let it call the default one

819
00:36:46,349 --> 00:36:51,089
for however the person's compiling and

820
00:36:48,480 --> 00:36:53,820
we're gonna pass in and through to

821
00:36:51,090 --> 00:36:57,090
handmade opengl dot dll as a string

822
00:36:53,820 --> 00:36:59,160
that's just it makes it easier for the

823
00:36:57,090 --> 00:37:03,840
person to understand what's going on

824
00:36:59,159 --> 00:37:06,690
right they don't they know that we're

825
00:37:03,840 --> 00:37:08,130
just wrapping the string with whatever

826
00:37:06,690 --> 00:37:11,610
kind of you know whether it's supposed

827
00:37:08,130 --> 00:37:14,369
to be a utf-16 or UTF well we're asking

828
00:37:11,610 --> 00:37:16,980
write or ANSI so i'm gonna go ahead and

829
00:37:14,369 --> 00:37:18,659
do the the load library here the load

830
00:37:16,980 --> 00:37:20,880
library is going to return me this

831
00:37:18,659 --> 00:37:23,039
module and that module handle is

832
00:37:20,880 --> 00:37:24,780
literally just a handle to the loaded

833
00:37:23,039 --> 00:37:27,150
code right it's just a way of

834
00:37:24,780 --> 00:37:28,470
identifying two windows what code I'm

835
00:37:27,150 --> 00:37:33,720
talking about um

836
00:37:28,469 --> 00:37:35,909
and so here's the render DLL at that

837
00:37:33,719 --> 00:37:41,309
point what I want to do is just get the

838
00:37:35,909 --> 00:37:43,589
function pointer for loading this for

839
00:37:41,309 --> 00:37:44,969
loading the renderer out right and so in

840
00:37:43,590 --> 00:37:47,660
order to do that what I want to do is

841
00:37:44,969 --> 00:37:51,419
again up here I kind of want to define

842
00:37:47,659 --> 00:37:53,099
the way that win32 stuff gets loaded the

843
00:37:51,420 --> 00:37:55,800
problem with doing it in here is this is

844
00:37:53,099 --> 00:37:58,619
not this is a platform nastic file so

845
00:37:55,800 --> 00:38:00,300
what I want to do is I want to have in

846
00:37:58,619 --> 00:38:03,719
the code base I want to have a win

847
00:38:00,300 --> 00:38:06,539
through to handmade renderer H this is a

848
00:38:03,719 --> 00:38:09,179
thing where win32 specific stuff will

849
00:38:06,539 --> 00:38:11,960
live it's very short file unfortunately

850
00:38:09,179 --> 00:38:14,639
but we need to have that

851
00:38:11,960 --> 00:38:16,559
accessible basically to the system in

852
00:38:14,639 --> 00:38:21,539
this way because we need a place to

853
00:38:16,559 --> 00:38:23,130
define the window specific call right so

854
00:38:21,539 --> 00:38:28,800
what I want to do there is just say okay

855
00:38:23,130 --> 00:38:30,960
to load though zooming to load those in

856
00:38:28,800 --> 00:38:33,420
we need something cure that will that

857
00:38:30,960 --> 00:38:35,099
will load the render and you know I can

858
00:38:33,420 --> 00:38:36,240
also take advantage of the fact that

859
00:38:35,099 --> 00:38:38,400
we've got this win through through

860
00:38:36,239 --> 00:38:39,929
handmade renderer bit here I can make

861
00:38:38,400 --> 00:38:42,630
that actually be something that you link

862
00:38:39,929 --> 00:38:45,029
in which has the win32 code necessary to

863
00:38:42,630 --> 00:38:46,890
loads the the render as well so I could

864
00:38:45,030 --> 00:38:49,830
like wrap this up in there actually that

865
00:38:46,889 --> 00:38:51,629
might be a good way to do it but we'll

866
00:38:49,829 --> 00:38:53,099
kind of get to that as we go so what I

867
00:38:51,630 --> 00:38:58,710
want to do here is just say all right

868
00:38:53,099 --> 00:39:01,650
there's a win32 load render recall again

869
00:38:58,710 --> 00:39:03,780
this is exactly the same way as I was

870
00:39:01,650 --> 00:39:05,639
doing my other function callbacks and so

871
00:39:03,780 --> 00:39:07,890
inside here where we've got this win

872
00:39:05,639 --> 00:39:09,989
through to load renderer I want that to

873
00:39:07,889 --> 00:39:12,179
be a function prototype because every

874
00:39:09,989 --> 00:39:15,599
dll that's up on win32 that supports

875
00:39:12,179 --> 00:39:17,369
rendering that anyone want to make wants

876
00:39:15,599 --> 00:39:19,289
to conform to this so what we're gonna

877
00:39:17,369 --> 00:39:22,859
do is the exact same thing we did before

878
00:39:19,289 --> 00:39:24,119
we're gonna supply the name here as part

879
00:39:22,860 --> 00:39:26,010
of the macro and then we're just going

880
00:39:24,119 --> 00:39:28,109
to go ahead and define this so here's

881
00:39:26,010 --> 00:39:30,390
our type def for a function pointer to

882
00:39:28,110 --> 00:39:33,349
one of these loaders this is going to be

883
00:39:30,389 --> 00:39:36,900
win through to the renderer the call

884
00:39:33,349 --> 00:39:44,670
that's the type def and then here we're

885
00:39:36,900 --> 00:39:47,910
just going to use that okay so that's it

886
00:39:44,670 --> 00:39:50,820
that's all we need it and now we know

887
00:39:47,909 --> 00:39:53,940
that this is the the function pointer

888
00:39:50,820 --> 00:39:57,150
that we're trying to load we also can

889
00:39:53,940 --> 00:40:00,300
make it so that this name itself is

890
00:39:57,150 --> 00:40:06,769
actually a specific name that we always

891
00:40:00,300 --> 00:40:06,769
know so we could even do it like this

892
00:40:24,599 --> 00:40:32,739
right again these are just there so when

893
00:40:30,099 --> 00:40:34,690
people make these they just do that and

894
00:40:32,739 --> 00:40:36,429
they know that they're gonna define the

895
00:40:34,690 --> 00:40:37,720
right thing and they don't have to think

896
00:40:36,429 --> 00:40:39,909
about it ever again

897
00:40:37,719 --> 00:40:41,649
right so you just do that and you know

898
00:40:39,909 --> 00:40:43,440
that it's defined properly for you and

899
00:40:41,650 --> 00:40:46,660
if we change what's getting passed here

900
00:40:43,440 --> 00:40:50,349
everyone can just recompile and run okay

901
00:40:46,659 --> 00:40:52,629
you know I'm saying so if we do that

902
00:40:50,349 --> 00:40:58,019
right then in here what we can do as

903
00:40:52,630 --> 00:41:01,150
well is just have actually we can have

904
00:40:58,019 --> 00:41:04,119
this be something that just is built

905
00:41:01,150 --> 00:41:09,610
into the the H file so we could say like

906
00:41:04,119 --> 00:41:15,130
hey winter to load renderer you know

907
00:41:09,610 --> 00:41:19,900
load to load render DLL and this would

908
00:41:15,130 --> 00:41:22,990
just take this thing right so whatever

909
00:41:19,900 --> 00:41:25,840
you pass through to this whatever like t

910
00:41:22,989 --> 00:41:28,229
care you know string you get here this

911
00:41:25,840 --> 00:41:31,059
is the file name we can just make that

912
00:41:28,230 --> 00:41:33,340
be something in here that loads the

913
00:41:31,059 --> 00:41:36,730
renderer dll in and then does it get

914
00:41:33,340 --> 00:41:39,420
proc address on that renderer dll using

915
00:41:36,730 --> 00:41:41,679
the winter to load renderer name and

916
00:41:39,420 --> 00:41:43,630
make sure that all of that stuff is

917
00:41:41,679 --> 00:41:45,639
specified properly I don't think you can

918
00:41:43,630 --> 00:41:48,730
get proc to address wide Kara stars so I

919
00:41:45,639 --> 00:41:50,679
think that's literally just like I think

920
00:41:48,730 --> 00:41:54,039
there's no get podcast yeah I think it's

921
00:41:50,679 --> 00:41:55,359
just get proc address I can't quite

922
00:41:54,039 --> 00:42:00,309
remember though so we'll double check

923
00:41:55,360 --> 00:42:02,890
that later but anyway so if we load this

924
00:42:00,309 --> 00:42:04,329
out of the DLL there's our you know

925
00:42:02,889 --> 00:42:06,279
retrieving our function pointer that

926
00:42:04,329 --> 00:42:09,400
means that the user of this can

927
00:42:06,280 --> 00:42:13,360
literally just do this right they can

928
00:42:09,400 --> 00:42:17,440
get their their renderer loader out here

929
00:42:13,360 --> 00:42:22,050
by calling this function and then they

930
00:42:17,440 --> 00:42:22,050
can call it whenever they want right

931
00:42:24,679 --> 00:42:49,969
okay alright so let's see here what's

932
00:42:42,059 --> 00:42:55,710
the problem there it's not what I wanted

933
00:42:49,969 --> 00:43:00,419
just want win32 renderer there it is

934
00:42:55,710 --> 00:43:08,760
um so here's the definition of that

935
00:43:00,420 --> 00:43:10,289
function but Windows DC should have been

936
00:43:08,760 --> 00:43:12,869
defined there so what's the problem

937
00:43:10,289 --> 00:43:29,219
oh the problem is this isn't including

938
00:43:12,869 --> 00:43:31,019
it that's all okay so that probably

939
00:43:29,219 --> 00:43:35,939
should be down here after everything is

940
00:43:31,019 --> 00:43:40,400
defined okay and there we go so that

941
00:43:35,940 --> 00:43:40,400
also has to get included here like so

942
00:43:41,300 --> 00:43:45,380
but otherwise I think we're fine okay

943
00:44:15,690 --> 00:44:20,920
so this is pretty straightforward now

944
00:44:18,460 --> 00:44:22,809
it's basically exactly the same thing we

945
00:44:20,920 --> 00:44:26,470
were doing before it just comes out of a

946
00:44:22,809 --> 00:44:28,869
dll now right so now if we look at what

947
00:44:26,469 --> 00:44:32,289
this code does what we should be able to

948
00:44:28,869 --> 00:44:33,940
do is if we go to the render test now

949
00:44:32,289 --> 00:44:36,969
remember the render test is now being

950
00:44:33,940 --> 00:44:39,760
built with no open jail code in it

951
00:44:36,969 --> 00:44:41,230
whatsoever it doesn't even need to link

952
00:44:39,760 --> 00:44:43,030
to open jail in fact let's go ahead and

953
00:44:41,230 --> 00:44:47,199
make that true just so we can

954
00:44:43,030 --> 00:44:50,580
double-check right so here's a render a

955
00:44:47,199 --> 00:44:54,279
testbed it's passed common linker flags

956
00:44:50,579 --> 00:44:57,519
so common liquor flags here includes all

957
00:44:54,280 --> 00:45:01,600
of these sausage gentlemen right so

958
00:44:57,519 --> 00:45:04,630
OpenGL 32 is included in there so I'm

959
00:45:01,599 --> 00:45:06,549
just gonna get rid of that so OpenGL 32

960
00:45:04,630 --> 00:45:09,579
is no longer included in there right so

961
00:45:06,550 --> 00:45:12,030
we we no longer require OpenGL to even

962
00:45:09,579 --> 00:45:15,549
start we will start up with no OpenGL

963
00:45:12,030 --> 00:45:16,690
bound at all ok so now if we loop

964
00:45:15,550 --> 00:45:18,519
through here and we take a look at what

965
00:45:16,690 --> 00:45:24,849
happens let's set a breakpoint when we

966
00:45:18,519 --> 00:45:26,860
enter our renderer thread right here and

967
00:45:24,849 --> 00:45:29,319
if I step through here what you can see

968
00:45:26,860 --> 00:45:32,079
is when we do win through to load

969
00:45:29,320 --> 00:45:33,610
renderer I'm gonna come through here I'm

970
00:45:32,079 --> 00:45:35,590
here's my file name and through the

971
00:45:33,610 --> 00:45:37,480
availab shell I'm gonna try to load it I

972
00:45:35,590 --> 00:45:39,700
load it successfully I'm gonna try and

973
00:45:37,480 --> 00:45:43,090
get the address of this procedure I did

974
00:45:39,699 --> 00:45:46,149
get it and so now we can call it right

975
00:45:43,090 --> 00:45:48,910
we can call in here and call in it up in

976
00:45:46,150 --> 00:45:52,329
jail so now this is running entirely in

977
00:45:48,909 --> 00:45:54,569
an external DLL right and we can make as

978
00:45:52,329 --> 00:45:56,920
many versions of that dll's we want

979
00:45:54,570 --> 00:45:59,470
which render through different things so

980
00:45:56,920 --> 00:46:01,750
right now literally if you want to go

981
00:45:59,469 --> 00:46:04,368
make a d3 D version you can just do that

982
00:46:01,750 --> 00:46:07,608
drop it in place and you

983
00:46:04,369 --> 00:46:10,160
run on d3d right so we are now not we

984
00:46:07,608 --> 00:46:14,179
have no coupling to open jail whatsoever

985
00:46:10,159 --> 00:46:16,449
in that testbed which is great right so

986
00:46:14,179 --> 00:46:20,629
that's a nice way to keep that flexible

987
00:46:16,449 --> 00:46:22,368
now if we come back here and look we

988
00:46:20,630 --> 00:46:25,400
note that we do have you know we

989
00:46:22,369 --> 00:46:26,778
probably want to as you know maybe put

990
00:46:25,400 --> 00:46:32,499
up an error message or something here

991
00:46:26,778 --> 00:46:32,498
right like if we try to load this

992
00:46:37,338 --> 00:46:40,369
maybe we just exit process if we can't

993
00:46:39,858 --> 00:46:42,199
do it

994
00:46:40,369 --> 00:46:46,430
maybe we even push up put up a message

995
00:46:42,199 --> 00:46:56,108
box right and so for example if I was to

996
00:46:46,429 --> 00:46:56,108
say you know here we go

997
00:46:59,739 --> 00:47:08,659
so it's window text caption type type in

998
00:47:04,759 --> 00:47:14,778
this case is a fatal error so we just

999
00:47:08,659 --> 00:47:15,528
want this because there's really nothing

1000
00:47:14,778 --> 00:47:18,018
else we can do

1001
00:47:15,528 --> 00:47:22,400
and then we probably want Ike on

1002
00:47:18,018 --> 00:47:27,669
exclamation or well I can't stop or icon

1003
00:47:22,400 --> 00:47:27,670
error maybe I kind of error let's say

1004
00:47:35,820 --> 00:47:42,580
okay so if we look at the call to this

1005
00:47:38,949 --> 00:47:48,489
we want the window handle there which we

1006
00:47:42,579 --> 00:48:20,319
have we want our to text things to here

1007
00:47:48,489 --> 00:48:24,659
to be okay

1008
00:48:20,320 --> 00:48:27,130
so now if we fail to actually get this

1009
00:48:24,659 --> 00:48:37,299
it's just exit process with an error

1010
00:48:27,130 --> 00:48:39,910
code there whatever I don't care

1011
00:48:37,300 --> 00:48:44,019
um so now if we fail to actually find

1012
00:48:39,909 --> 00:48:45,460
that that renderer we just can't start

1013
00:48:44,019 --> 00:48:47,469
right if we don't have a renderer we

1014
00:48:45,460 --> 00:48:49,690
can't start so here's us finding the

1015
00:48:47,469 --> 00:48:52,899
render if I now go in and without

1016
00:48:49,690 --> 00:48:57,070
recompiling to generate a new one if I

1017
00:48:52,900 --> 00:48:59,230
just delete right I just get rid of our

1018
00:48:57,070 --> 00:49:02,620
renderer DLL which is this thing right

1019
00:48:59,230 --> 00:49:08,920
here then we should find that it pops up

1020
00:49:02,619 --> 00:49:10,779
a dialog box right and just says hey we

1021
00:49:08,920 --> 00:49:14,559
ain't going nowhere fast my friends

1022
00:49:10,780 --> 00:49:17,470
right um so this is pretty great right

1023
00:49:14,559 --> 00:49:20,039
now we're we're good to go we can just

1024
00:49:17,469 --> 00:49:23,579
treat this render as something that's

1025
00:49:20,039 --> 00:49:26,949
externally usable anyone can do it and

1026
00:49:23,579 --> 00:49:29,710
you don't really have to think about it

1027
00:49:26,949 --> 00:49:32,500
too hard right we can also go one step

1028
00:49:29,710 --> 00:49:34,329
further and figure well okay if this is

1029
00:49:32,500 --> 00:49:37,090
the stuff that someone has to do to get

1030
00:49:34,329 --> 00:49:41,860
started and win32 well why not just make

1031
00:49:37,090 --> 00:49:44,610
it completely trivial for them why not

1032
00:49:41,860 --> 00:49:44,610
just do this

1033
00:49:54,489 --> 00:50:06,979
right so we can just say win32 load

1034
00:50:00,500 --> 00:50:10,969
default under it or initialize default

1035
00:50:06,980 --> 00:50:12,889
render or something like that doesn't

1036
00:50:10,969 --> 00:50:17,449
take anything that well no actually

1037
00:50:12,889 --> 00:50:20,299
it'll take this it'll do all this for

1038
00:50:17,449 --> 00:50:23,059
you including popping up the message box

1039
00:50:20,300 --> 00:50:31,180
if it's not there and then it'll return

1040
00:50:23,059 --> 00:50:34,549
the renderer to you in this case so that

1041
00:50:31,179 --> 00:50:39,649
wraps all of that up really cleanly and

1042
00:50:34,550 --> 00:50:44,320
you can just say hey do everything

1043
00:50:39,650 --> 00:50:44,320
please I don't want to think about it

1044
00:51:30,940 --> 00:51:36,380
so that's just a again a really simple

1045
00:51:34,099 --> 00:51:38,179
utility function so now you know anyone

1046
00:51:36,380 --> 00:51:39,829
can just call it it'll check to see if

1047
00:51:38,179 --> 00:51:45,859
it's there it'll fail catastrophically

1048
00:51:39,829 --> 00:51:48,279
if it's not an off you would go right so

1049
00:51:45,860 --> 00:51:51,320
that's just again just really basic

1050
00:51:48,280 --> 00:51:54,920
nothing particularly exciting going on

1051
00:51:51,320 --> 00:51:56,480
there right very very simple so if we

1052
00:51:54,920 --> 00:51:58,909
wanted that to work in handmade hero as

1053
00:51:56,480 --> 00:52:03,469
well again nothing really particularly

1054
00:51:58,909 --> 00:52:05,839
odd has to happen first of all we got to

1055
00:52:03,469 --> 00:52:09,019
make sure that we don't include any of

1056
00:52:05,840 --> 00:52:11,960
this stuff so now like these things like

1057
00:52:09,019 --> 00:52:13,519
win32 open jail and so on like that

1058
00:52:11,960 --> 00:52:15,470
stuff just shouldn't be in here

1059
00:52:13,519 --> 00:52:17,509
right none of that stuff should be

1060
00:52:15,469 --> 00:52:23,059
included in there it should just be

1061
00:52:17,510 --> 00:52:24,920
missing and yeah we don't want so I

1062
00:52:23,059 --> 00:52:29,329
don't know where all these things are

1063
00:52:24,920 --> 00:52:30,619
defined we don't want that right we

1064
00:52:29,329 --> 00:52:32,659
really we don't need these either

1065
00:52:30,619 --> 00:52:35,029
because those would now be outside in

1066
00:52:32,659 --> 00:52:38,179
fact all of this stuff I don't even know

1067
00:52:35,030 --> 00:52:40,600
if Cindy is necessary they're probably

1068
00:52:38,179 --> 00:52:40,599
not

1069
00:52:49,449 --> 00:52:54,429
so I'm pretty sure that's it right and

1070
00:52:52,989 --> 00:52:55,868
so all we would need to do now is have

1071
00:52:54,429 --> 00:52:58,329
went through your handmade renderer

1072
00:52:55,869 --> 00:53:00,970
included here and then we're good to go

1073
00:52:58,329 --> 00:53:03,639
so at the point where we were doing went

1074
00:53:00,969 --> 00:53:05,829
through to load OpenGL renderer here we

1075
00:53:03,639 --> 00:53:07,838
can just call that utility function that

1076
00:53:05,829 --> 00:53:11,858
same one that we had here which is went

1077
00:53:07,838 --> 00:53:21,849
through to in it right and we would pass

1078
00:53:11,858 --> 00:53:24,848
the window there so then when we run the

1079
00:53:21,849 --> 00:53:26,740
you know this is using that DLL when we

1080
00:53:24,849 --> 00:53:28,869
run handmade hero it now uses the exact

1081
00:53:26,739 --> 00:53:30,519
same DLL like they're literally calling

1082
00:53:28,869 --> 00:53:37,390
the exact same DLL whether you're

1083
00:53:30,519 --> 00:53:39,070
running outside or inside right so I

1084
00:53:37,389 --> 00:53:40,329
didn't think of that yesterday otherwise

1085
00:53:39,070 --> 00:53:42,010
that's the way I would have done it I

1086
00:53:40,329 --> 00:53:43,838
don't know why I didn't think of it a

1087
00:53:42,010 --> 00:53:46,240
renderer is an obvious thing to just

1088
00:53:43,838 --> 00:53:47,588
stick in a DLL now anyone who wants to

1089
00:53:46,239 --> 00:53:49,779
screw around with handmade hero and

1090
00:53:47,588 --> 00:53:52,210
implement completely different renderers

1091
00:53:49,780 --> 00:53:54,160
you can go do a crazy optimized cool

1092
00:53:52,210 --> 00:53:56,470
renderer you could do a ray tracer you

1093
00:53:54,159 --> 00:53:58,358
could do anything you want you can now

1094
00:53:56,469 --> 00:53:59,949
just put that into the renderer and be

1095
00:53:58,358 --> 00:54:01,900
done with it right I wouldn't recommend

1096
00:53:59,949 --> 00:54:03,579
doing that quite yet because we're still

1097
00:54:01,900 --> 00:54:07,389
working on make some of the API stuff

1098
00:54:03,579 --> 00:54:09,309
here but that's what's going on right so

1099
00:54:07,389 --> 00:54:12,338
now we've made that clean split and I

1100
00:54:09,309 --> 00:54:14,108
think that's pretty great because now

1101
00:54:12,338 --> 00:54:17,259
when we have the final version we'll be

1102
00:54:14,108 --> 00:54:19,779
good to go okay um so now what I'd like

1103
00:54:17,260 --> 00:54:22,210
to do is just focus on cleaning up some

1104
00:54:19,780 --> 00:54:24,280
of these other API is here um so let's

1105
00:54:22,210 --> 00:54:28,030
pop back over to our renderer test which

1106
00:54:24,280 --> 00:54:29,740
is this um so looking at the renderer

1107
00:54:28,030 --> 00:54:32,560
tests like I said I'd like to clean up

1108
00:54:29,739 --> 00:54:34,329
some of the camera stuff here and I'd

1109
00:54:32,559 --> 00:54:36,250
like to clean up some of the sprite push

1110
00:54:34,329 --> 00:54:37,838
stuff those are the two things that we

1111
00:54:36,250 --> 00:54:40,300
really have left to clean up there and

1112
00:54:37,838 --> 00:54:44,559
then I feel like we're mostly down to

1113
00:54:40,300 --> 00:54:48,490
just making the header files pretty may

1114
00:54:44,559 --> 00:54:50,259
be breaking down the code into making it

1115
00:54:48,489 --> 00:54:52,239
clear like what you would and wouldn't

1116
00:54:50,260 --> 00:54:54,550
use in various circumstances and so on

1117
00:54:52,239 --> 00:54:57,159
like so just like kind of general text

1118
00:54:54,550 --> 00:54:58,930
cleanup that's not really about the code

1119
00:54:57,159 --> 00:55:01,088
it's just about how it's organized in

1120
00:54:58,929 --> 00:55:02,259
files so that it's easier to carve off

1121
00:55:01,088 --> 00:55:04,539
or things like that

1122
00:55:02,260 --> 00:55:07,750
so we we got maybe a little bit to do

1123
00:55:04,539 --> 00:55:10,000
there but mostly we're good alright so

1124
00:55:07,750 --> 00:55:13,358
if you take a look at all this stuff for

1125
00:55:10,000 --> 00:55:15,639
the camera information just you can look

1126
00:55:13,358 --> 00:55:18,009
at this stuff we're doing with camera

1127
00:55:15,639 --> 00:55:20,799
and I feel like we can wrap a lot of

1128
00:55:18,010 --> 00:55:22,930
that stuff up into some some basic

1129
00:55:20,800 --> 00:55:24,760
functions that people can use in the

1130
00:55:22,929 --> 00:55:26,559
math library again this is just for the

1131
00:55:24,760 --> 00:55:28,660
sake of people who don't want to see

1132
00:55:26,559 --> 00:55:31,469
really think too hard about this stuff

1133
00:55:28,659 --> 00:55:33,940
if we look at get standard camera params

1134
00:55:31,469 --> 00:55:37,480
one of the things that you note here is

1135
00:55:33,940 --> 00:55:39,639
just that that's actually defined in the

1136
00:55:37,480 --> 00:55:41,829
renderer even though I'm not sure that

1137
00:55:39,639 --> 00:55:44,679
the renderer necessarily cares that much

1138
00:55:41,829 --> 00:55:47,519
about things like camera params so if we

1139
00:55:44,679 --> 00:55:50,588
look at the camera params themselves

1140
00:55:47,519 --> 00:55:53,019
it's just focal length now so I think

1141
00:55:50,588 --> 00:55:54,969
what we want to actually do is change

1142
00:55:53,019 --> 00:55:57,969
the way that we're thinking about camera

1143
00:55:54,969 --> 00:56:00,819
params to be sort of their own thing and

1144
00:55:57,969 --> 00:56:03,779
then when you do rendering you can pass

1145
00:56:00,820 --> 00:56:09,789
like whole like more complex things down

1146
00:56:03,780 --> 00:56:11,710
to functions as necessary right so the

1147
00:56:09,789 --> 00:56:13,449
first thing I want to do is sort of get

1148
00:56:11,710 --> 00:56:15,519
rid of anywhere that talks about camera

1149
00:56:13,449 --> 00:56:19,989
params that's directly in the renderer

1150
00:56:15,519 --> 00:56:22,599
so for example well actually you know

1151
00:56:19,989 --> 00:56:24,399
what I don't think we do which is good

1152
00:56:22,599 --> 00:56:26,230
so the renderer doesn't really care

1153
00:56:24,400 --> 00:56:27,818
about these right so what I was thinking

1154
00:56:26,230 --> 00:56:29,949
is we could just make a thing like

1155
00:56:27,818 --> 00:56:31,869
handmade camera that's just got a bunch

1156
00:56:29,949 --> 00:56:33,759
of camera utility stuff in it and that's

1157
00:56:31,869 --> 00:56:35,950
like optional if you want to use it

1158
00:56:33,760 --> 00:56:38,339
right so I'm gonna go ahead and make a

1159
00:56:35,949 --> 00:56:41,649
handmade camera oops

1160
00:56:38,338 --> 00:56:43,869
eh and what I'm gonna do here is just

1161
00:56:41,650 --> 00:56:48,730
grab the stuff I'm gonna just go to

1162
00:56:43,869 --> 00:56:51,940
Lemongrab here the camera params out and

1163
00:56:48,730 --> 00:56:53,318
put him in here okay now when I compile

1164
00:56:51,940 --> 00:56:55,210
I'm gonna get I don't include this

1165
00:56:53,318 --> 00:56:57,608
anywhere so I'm gonna get some problems

1166
00:56:55,210 --> 00:56:59,440
in the places where we don't have those

1167
00:56:57,608 --> 00:57:03,730
camera prams right so I'm going to grab

1168
00:56:59,440 --> 00:57:05,829
again just Lemongrab in here the the

1169
00:57:03,730 --> 00:57:09,599
code that relates to this and putting it

1170
00:57:05,829 --> 00:57:09,599
in the handmade camera stuff

1171
00:57:10,940 --> 00:57:18,269
there we go alright and so now everyone

1172
00:57:16,590 --> 00:57:21,510
who uses those is kind of at a

1173
00:57:18,269 --> 00:57:22,050
disadvantage because hey it's gone right

1174
00:57:21,510 --> 00:57:24,600
oops

1175
00:57:22,050 --> 00:57:26,850
but that's okay anyone who wants to use

1176
00:57:24,599 --> 00:57:30,239
it can use it and they can just include

1177
00:57:26,849 --> 00:57:33,150
that handmade camera dot cpp right and

1178
00:57:30,239 --> 00:57:35,819
handmade camera dot H so now anyone who

1179
00:57:33,150 --> 00:57:37,680
wants those utilities can use them but

1180
00:57:35,820 --> 00:57:40,140
that's where they come from then what I

1181
00:57:37,679 --> 00:57:42,539
want to do is make sure in anywhere we

1182
00:57:40,139 --> 00:57:46,049
use them now we can expand on kind of

1183
00:57:42,539 --> 00:57:48,059
the what a camera pram actually is and

1184
00:57:46,050 --> 00:57:50,130
what it can do for you is sort of what I

1185
00:57:48,059 --> 00:57:53,309
want to push on there right if that

1186
00:57:50,130 --> 00:57:55,559
makes sense so let's go ahead and just

1187
00:57:53,309 --> 00:57:58,559
put that in here again that doesn't

1188
00:57:55,559 --> 00:58:00,420
really matter too much where we put

1189
00:57:58,559 --> 00:58:02,279
these because it's kind of arbitrary

1190
00:58:00,420 --> 00:58:05,639
we're just putting them all in here

1191
00:58:02,280 --> 00:58:09,990
right maybe I'll just make sure they're

1192
00:58:05,639 --> 00:58:20,309
underneath the wherever the renderer

1193
00:58:09,989 --> 00:58:23,189
went just yeah all right okay so now if

1194
00:58:20,309 --> 00:58:25,070
I come back over to win32 render test

1195
00:58:23,190 --> 00:58:27,750
and I look at what we're doing in here

1196
00:58:25,070 --> 00:58:30,450
with the with the camera stuff you can

1197
00:58:27,750 --> 00:58:32,400
see all of this information that I've

1198
00:58:30,449 --> 00:58:35,309
got in terms of setting up a camera view

1199
00:58:32,400 --> 00:58:37,590
for looking at a character on the screen

1200
00:58:35,309 --> 00:58:39,840
and what I like to do is just move that

1201
00:58:37,590 --> 00:58:42,690
over so that it all gets initialized

1202
00:58:39,840 --> 00:58:46,829
automatically I and you don't really

1203
00:58:42,690 --> 00:58:50,269
have to do a lot to think about it right

1204
00:58:46,829 --> 00:58:54,799
and all this stuff we can start to have

1205
00:58:50,269 --> 00:58:59,269
happen automatically as well right so

1206
00:58:54,800 --> 00:58:59,269
let's go ahead and do that

1207
00:59:10,889 --> 00:59:16,049
let's just go ahead and do that so

1208
00:59:16,590 --> 00:59:24,460
here's my camera routines and what I

1209
00:59:22,659 --> 00:59:27,549
want to do is I want to start by pulling

1210
00:59:24,460 --> 00:59:31,210
out some of this information here right

1211
00:59:27,550 --> 00:59:32,950
so what you could see is when this stuff

1212
00:59:31,210 --> 00:59:36,159
happens you can see that we're not

1213
00:59:32,949 --> 00:59:38,649
really using this yet the first place

1214
00:59:36,159 --> 00:59:41,980
that we start to use it is down here and

1215
00:59:38,650 --> 00:59:44,530
we do this like camera ot+ camera offset

1216
00:59:41,980 --> 00:59:47,650
right and we passed a bunch of stuff the

1217
00:59:44,530 --> 00:59:50,019
camera oh information here you can see

1218
00:59:47,650 --> 00:59:55,119
all the stuff that we're doing um all of

1219
00:59:50,019 --> 00:59:59,199
that I want to start making more like I

1220
00:59:55,119 --> 01:00:01,179
want this to be more encapsulate able to

1221
00:59:59,199 --> 01:00:03,519
people who don't know what they're doing

1222
01:00:01,179 --> 01:00:05,980
they can just use something here right

1223
01:00:03,519 --> 01:00:07,329
they can just use something that does

1224
01:00:05,980 --> 01:00:09,610
this automatically for you

1225
01:00:07,329 --> 01:00:13,929
so at the very least I want to do

1226
01:00:09,610 --> 01:00:15,610
something like this and I'll be honest I

1227
01:00:13,929 --> 01:00:17,710
don't understand why this camera Oh

1228
01:00:15,610 --> 01:00:21,430
can't just have the tea baked into it

1229
01:00:17,710 --> 01:00:23,949
right so to actually just to even do it

1230
01:00:21,429 --> 01:00:29,199
slightly differently than that let's not

1231
01:00:23,949 --> 01:00:32,079
even do this yet let's just fix this so

1232
01:00:29,199 --> 01:00:35,169
that we are good to go so if I take this

1233
01:00:32,079 --> 01:00:38,469
camera out here and I just translate it

1234
01:00:35,170 --> 01:00:40,539
right so instead you know when we're

1235
01:00:38,469 --> 01:00:42,159
doing here I can say like get

1236
01:00:40,539 --> 01:00:45,880
translation out of it or whatever let me

1237
01:00:42,159 --> 01:00:47,170
let me look at translate here so you can

1238
01:00:45,880 --> 01:00:50,890
see this translate called

1239
01:00:47,170 --> 01:00:53,800
I'm just gonna go ahead and say you know

1240
01:00:50,889 --> 01:00:55,960
camera matrix and what I'm gonna do is

1241
01:00:53,800 --> 01:00:58,720
I'm going to translate the matrix that

1242
01:00:55,960 --> 01:01:03,820
comes back by this by the camera dolly

1243
01:00:58,719 --> 01:01:05,049
amount right so that's how much I'm

1244
01:01:03,820 --> 01:01:07,269
going to translate that by and you can

1245
01:01:05,050 --> 01:01:09,670
see I also add this camera offset in

1246
01:01:07,269 --> 01:01:11,619
which is this thing here so I really

1247
01:01:09,670 --> 01:01:14,579
just want to add the camera offset to

1248
01:01:11,619 --> 01:01:14,579
right

1249
01:01:14,949 --> 01:01:21,409
so that's really what I'm trying to do

1250
01:01:17,420 --> 01:01:25,159
and then in so when we come down through

1251
01:01:21,409 --> 01:01:27,409
here more I think that pretty much just

1252
01:01:25,159 --> 01:01:29,469
gives us what we want right am I wrong

1253
01:01:27,409 --> 01:01:36,469
about that let me just double check oh

1254
01:01:29,469 --> 01:01:41,389
wait no no no I'm not quite right we do

1255
01:01:36,469 --> 01:01:51,529
use it to multiply first right we use it

1256
01:01:41,389 --> 01:01:53,239
to multiply here however I mean just to

1257
01:01:51,530 --> 01:01:56,440
be clear if we were to make a

1258
01:01:53,239 --> 01:02:01,279
translation matrix to begin with that

1259
01:01:56,440 --> 01:02:04,329
would have just worked so I know this is

1260
01:02:01,280 --> 01:02:08,030
a little bit confusing these operators

1261
01:02:04,329 --> 01:02:10,309
will operate on this if it was on the

1262
01:02:08,030 --> 01:02:20,420
right side here right so we could have

1263
01:02:10,309 --> 01:02:25,760
just said this right that is actually

1264
01:02:20,420 --> 01:02:27,680
the same thing so what we really want to

1265
01:02:25,760 --> 01:02:29,119
be able to do is do a translation but it

1266
01:02:27,679 --> 01:02:32,179
looks like we don't have a thing for

1267
01:02:29,119 --> 01:02:34,240
building a translation matrix here no

1268
01:02:32,179 --> 01:02:36,529
worries

1269
01:02:34,239 --> 01:02:41,328
that's about the easiest matrix you

1270
01:02:36,530 --> 01:02:46,780
could ever build right I'll just call

1271
01:02:41,329 --> 01:02:46,780
that T here's the matrix for building

1272
01:02:54,309 --> 01:03:01,099
if this is the identity matrix here

1273
01:02:56,900 --> 01:03:03,650
right we know that when we actually do

1274
01:03:01,099 --> 01:03:05,539
our translation here that we're going to

1275
01:03:03,650 --> 01:03:07,490
be multiplying we're multiplying column

1276
01:03:05,539 --> 01:03:09,980
vectors by row vectors right that's how

1277
01:03:07,489 --> 01:03:12,409
we've structured our matrices to work so

1278
01:03:09,980 --> 01:03:14,179
we know the W component of one is gonna

1279
01:03:12,409 --> 01:03:15,949
multiplying these values so if we want

1280
01:03:14,179 --> 01:03:18,559
to translate something all we have to do

1281
01:03:15,949 --> 01:03:21,439
is put our translation in that final

1282
01:03:18,559 --> 01:03:24,110
column and that's where in the matrix

1283
01:03:21,440 --> 01:03:26,389
translation will occur right if we then

1284
01:03:24,110 --> 01:03:27,769
put this back here like I said flowing

1285
01:03:26,389 --> 01:03:29,809
through the matrix this will

1286
01:03:27,769 --> 01:03:33,019
automatically do that transform because

1287
01:03:29,809 --> 01:03:35,779
as these rotations come catenate on they

1288
01:03:33,019 --> 01:03:37,219
will rotate the translation that exists

1289
01:03:35,780 --> 01:03:39,950
in the matrix as they're doing their

1290
01:03:37,219 --> 01:03:43,809
multiplication so this camera M just

1291
01:03:39,949 --> 01:03:43,809
basically builds everything we wanted

1292
01:03:44,619 --> 01:03:56,269
and so here we can just say that right

1293
01:03:53,679 --> 01:04:00,109
and that just recreates exactly what we

1294
01:03:56,269 --> 01:04:05,750
already had you know everything should

1295
01:04:00,110 --> 01:04:07,370
work well that's the wrong program that

1296
01:04:05,750 --> 01:04:10,010
just recreates everything we already had

1297
01:04:07,369 --> 01:04:12,980
and as you can see it's just doing that

1298
01:04:10,010 --> 01:04:16,330
operation right nothing particularly

1299
01:04:12,980 --> 01:04:16,329
special going on there

1300
01:04:25,230 --> 01:04:32,039
okay um again we can continue this

1301
01:04:29,460 --> 01:04:34,380
process if we want you notice this is a

1302
01:04:32,039 --> 01:04:36,570
translation that happens in this order

1303
01:04:34,380 --> 01:04:38,910
remember we again we've done all over

1304
01:04:36,570 --> 01:04:41,340
this in handmade hero all before but

1305
01:04:38,909 --> 01:04:42,809
I'll just keep saying it for people who

1306
01:04:41,340 --> 01:04:45,539
you know well it helps to say things

1307
01:04:42,809 --> 01:04:48,269
multiple times right so matrix

1308
01:04:45,539 --> 01:04:50,400
concatenation because of the way we're

1309
01:04:48,269 --> 01:04:54,480
using our matrices which is to say that

1310
01:04:50,400 --> 01:04:58,200
the columns of our matrix are the object

1311
01:04:54,480 --> 01:05:00,690
axes right not the rows the columns it's

1312
01:04:58,199 --> 01:05:02,250
our choice how we wish to organize our

1313
01:05:00,690 --> 01:05:04,139
matrices it's our choice how we set up

1314
01:05:02,250 --> 01:05:06,269
that math we chose to go with the

1315
01:05:04,139 --> 01:05:08,339
traditional math formulation not the

1316
01:05:06,269 --> 01:05:10,610
traditional graphics formulation where

1317
01:05:08,340 --> 01:05:13,440
the objects made are actually rows

1318
01:05:10,610 --> 01:05:17,610
that's a whole nother situation but we

1319
01:05:13,440 --> 01:05:19,320
went the math style because of that when

1320
01:05:17,610 --> 01:05:21,570
we actually concatenate transforms

1321
01:05:19,320 --> 01:05:24,660
together it means that you can think of

1322
01:05:21,570 --> 01:05:27,360
reading the transforms from the right to

1323
01:05:24,659 --> 01:05:30,089
the left so the first thing that happens

1324
01:05:27,360 --> 01:05:31,980
is we translate by camera dolly the next

1325
01:05:30,090 --> 01:05:33,990
thing that happens is we rotate by the

1326
01:05:31,980 --> 01:05:35,820
camera pitch around the x axis that's

1327
01:05:33,989 --> 01:05:38,309
this twist and then the final thing we

1328
01:05:35,820 --> 01:05:40,530
do is we rotate around the z-axis by the

1329
01:05:38,309 --> 01:05:43,110
camera orbit right so the order goes

1330
01:05:40,530 --> 01:05:45,450
from right to left that's because when

1331
01:05:43,110 --> 01:05:45,900
matrices are multiplied together in that

1332
01:05:45,449 --> 01:05:49,949
order

1333
01:05:45,900 --> 01:05:51,210
right you are I can't really give this

1334
01:05:49,949 --> 01:05:52,819
entire equation you should go back to

1335
01:05:51,210 --> 01:05:56,429
him here's when I explained how matrix

1336
01:05:52,820 --> 01:05:58,980
may tradition works but because we are

1337
01:05:56,429 --> 01:06:01,049
doing it in that order and that is how

1338
01:05:58,980 --> 01:06:03,650
we have structured our matrices we are

1339
01:06:01,050 --> 01:06:07,080
constantly doing the reinterpretation

1340
01:06:03,650 --> 01:06:08,880
from right to left so this matrix is

1341
01:06:07,079 --> 01:06:10,739
reinterpreted in the coordinate system

1342
01:06:08,880 --> 01:06:12,300
of this matrix which means that this one

1343
01:06:10,739 --> 01:06:15,179
is the one that is applied conceptually

1344
01:06:12,300 --> 01:06:17,460
first and then it is reinterpreted here

1345
01:06:15,179 --> 01:06:19,769
and then reinterpreted here right and

1346
01:06:17,460 --> 01:06:22,500
again we have lots of information on

1347
01:06:19,769 --> 01:06:24,329
that so if I want this camera offset to

1348
01:06:22,500 --> 01:06:30,000
be applied and I want to get rid of that

1349
01:06:24,329 --> 01:06:32,779
in here I can just do this right I can

1350
01:06:30,000 --> 01:06:32,780
just put it here

1351
01:06:33,469 --> 01:06:39,839
and again that series of matrix

1352
01:06:37,139 --> 01:06:44,629
concatenations will just give me exactly

1353
01:06:39,840 --> 01:06:44,630
what I want um what is the problem

1354
01:06:47,960 --> 01:06:59,940
syntax error semicolon I deleted one too

1355
01:06:53,579 --> 01:07:02,670
many and again I can just build that all

1356
01:06:59,940 --> 01:07:05,220
up with one matrix operation so this is

1357
01:07:02,670 --> 01:07:07,470
the complete one for dolly pet with an

1358
01:07:05,219 --> 01:07:09,599
asset at the end plus an offset at the

1359
01:07:07,469 --> 01:07:12,329
beginning right and then the sort of the

1360
01:07:09,599 --> 01:07:15,719
orbit cam in there as a separate issue

1361
01:07:12,329 --> 01:07:18,509
right now if we wanted to we could also

1362
01:07:15,719 --> 01:07:21,379
add shake in there so if we wanted to

1363
01:07:18,510 --> 01:07:23,730
give it a bit of a way to shake this way

1364
01:07:21,380 --> 01:07:25,980
we also could I don't know that we need

1365
01:07:23,730 --> 01:07:27,539
to do that at the moment but you can see

1366
01:07:25,980 --> 01:07:31,019
why I want to pull that out because then

1367
01:07:27,539 --> 01:07:33,389
that way we can get it more into a way

1368
01:07:31,019 --> 01:07:40,559
of just getting the camera matrix here

1369
01:07:33,389 --> 01:07:43,049
out directly this way so we can say you

1370
01:07:40,559 --> 01:07:47,309
can see me starting down how the road to

1371
01:07:43,050 --> 01:07:51,240
where I want to be in terms of of an API

1372
01:07:47,309 --> 01:07:52,049
here for the camera right so I want to

1373
01:07:51,239 --> 01:07:59,389
make a call

1374
01:07:52,050 --> 01:08:03,210
that's like build camera matrix right

1375
01:07:59,389 --> 01:08:06,029
they kind of want to wait to say that

1376
01:08:03,210 --> 01:08:08,460
this is the matrix that says what the

1377
01:08:06,030 --> 01:08:11,940
camera itself is in the world

1378
01:08:08,460 --> 01:08:14,159
not the camera transfer matrix so those

1379
01:08:11,940 --> 01:08:16,289
are two different things right the

1380
01:08:14,159 --> 01:08:19,139
matrix that moves things into the

1381
01:08:16,289 --> 01:08:21,510
cameras space for viewing is actually

1382
01:08:19,140 --> 01:08:23,280
the inverse matrix of the one that tells

1383
01:08:21,510 --> 01:08:25,920
you where the camera is in the world

1384
01:08:23,279 --> 01:08:27,300
right those are opposite operations so

1385
01:08:25,920 --> 01:08:30,088
I'm not sure if the best name for that

1386
01:08:27,300 --> 01:08:32,609
is but that you know is kind of a

1387
01:08:30,088 --> 01:08:37,579
separate issue so if I just implement

1388
01:08:32,609 --> 01:08:45,088
this directly where you pass the orbit

1389
01:08:37,579 --> 01:08:53,698
the pitch the dolly and the offset

1390
01:08:45,088 --> 01:08:55,639
I now have a function that gets rid of

1391
01:08:53,698 --> 01:09:00,318
some of that math for someone who again

1392
01:08:55,639 --> 01:09:04,139
might not be knowledgeable enough about

1393
01:09:00,319 --> 01:09:06,060
3d math to know what was going on there

1394
01:09:04,139 --> 01:09:08,630
and might be confused but this is

1395
01:09:06,060 --> 01:09:11,489
probably easier for them to understand

1396
01:09:08,630 --> 01:09:14,029
because it's gonna do the math for them

1397
01:09:11,488 --> 01:09:14,028
right

1398
01:09:15,000 --> 01:09:18,658
so hopefully that cleans up fat a little

1399
01:09:17,039 --> 01:09:20,819
bit and just makes it easier to make

1400
01:09:18,658 --> 01:09:24,028
that call but we still have a lot of

1401
01:09:20,819 --> 01:09:27,359
stuff going on here and again we could

1402
01:09:24,029 --> 01:09:29,940
make this much simpler by sort of

1403
01:09:27,359 --> 01:09:31,650
continuing to reduce the degree to which

1404
01:09:29,939 --> 01:09:33,419
you need to interact with these things

1405
01:09:31,649 --> 01:09:35,759
ought to set up the camera so again

1406
01:09:33,420 --> 01:09:38,579
refining the API a little bit further

1407
01:09:35,759 --> 01:09:41,670
the question is what else can we do

1408
01:09:38,579 --> 01:09:43,380
and like how can we do more with fog

1409
01:09:41,670 --> 01:09:46,859
settings and so on like how can we start

1410
01:09:43,380 --> 01:09:48,989
to roll all that stuff up into one you

1411
01:09:46,859 --> 01:09:50,969
know what I mean and so what I would

1412
01:09:48,988 --> 01:09:52,528
like to do here is say well what if get

1413
01:09:50,969 --> 01:09:54,899
standard camera params is maybe

1414
01:09:52,529 --> 01:09:57,449
something again that now could sort of

1415
01:09:54,899 --> 01:10:01,618
come out here and we can have this

1416
01:09:57,448 --> 01:10:04,138
camera params that sort of rolls up a

1417
01:10:01,618 --> 01:10:07,259
bunch of this stuff maybe what I can do

1418
01:10:04,139 --> 01:10:09,659
is just call this camera and and not

1419
01:10:07,260 --> 01:10:11,730
camera params cuz it's just not really

1420
01:10:09,658 --> 01:10:14,129
necessary we don't have an actual camera

1421
01:10:11,729 --> 01:10:17,009
object thing in our game so we don't

1422
01:10:14,130 --> 01:10:18,719
need to worry about that conflicting so

1423
01:10:17,010 --> 01:10:23,010
what we could do is just roll all this

1424
01:10:18,719 --> 01:10:25,198
stuff up here and actually make this be

1425
01:10:23,010 --> 01:10:26,940
something that gets specified more

1426
01:10:25,198 --> 01:10:30,329
directly so let's suppose we just took

1427
01:10:26,939 --> 01:10:35,689
all of this stuff that we've got in line

1428
01:10:30,329 --> 01:10:35,689
here put it all in to this

1429
01:10:39,760 --> 01:10:55,489
and set all of these things based on

1430
01:10:43,909 --> 01:10:58,489
that information so then when you get

1431
01:10:55,489 --> 01:11:01,789
one of these standard camera frames you

1432
01:10:58,489 --> 01:11:06,439
actually get a whole lot more than than

1433
01:11:01,789 --> 01:11:09,800
that right oops and where's that focal

1434
01:11:06,439 --> 01:11:39,679
length oh it's right there

1435
01:11:09,800 --> 01:11:41,690
there we go right so this gets that

1436
01:11:39,680 --> 01:11:44,030
automatically and now when we come down

1437
01:11:41,689 --> 01:11:48,019
here we can sort of start to work with

1438
01:11:44,029 --> 01:11:50,389
this as a as like a bucket that has all

1439
01:11:48,020 --> 01:11:52,190
these things in it so then we can make a

1440
01:11:50,390 --> 01:11:54,410
version of this that just works with

1441
01:11:52,189 --> 01:11:56,029
camera params directly and you'll notice

1442
01:11:54,409 --> 01:11:57,439
I'm not gonna get rid of this one

1443
01:11:56,029 --> 01:11:59,750
because maybe we still want to be able

1444
01:11:57,439 --> 01:12:05,059
to call this one so all I'm gonna do is

1445
01:11:59,750 --> 01:12:08,479
say hey if you call this on here it's

1446
01:12:05,060 --> 01:12:10,580
just a utility to avoid you having to

1447
01:12:08,479 --> 01:12:13,669
think about where those things come from

1448
01:12:10,579 --> 01:12:15,819
so you're just funking through to the

1449
01:12:13,670 --> 01:12:18,470
existing API call again this is about

1450
01:12:15,819 --> 01:12:22,849
granularity here this is about giving

1451
01:12:18,470 --> 01:12:25,010
you those options of calling something

1452
01:12:22,850 --> 01:12:26,630
at a higher level or calling it at a

1453
01:12:25,010 --> 01:12:31,640
lower level if you find that that's

1454
01:12:26,630 --> 01:12:37,520
better right now camera offsets didn't

1455
01:12:31,640 --> 01:12:42,430
get put in here so it needs to so we

1456
01:12:37,520 --> 01:12:42,430
actually want our camera

1457
01:12:44,469 --> 01:12:49,239
probably to look more like this right

1458
01:12:56,019 --> 01:12:59,869
and then we need this to actually have

1459
01:12:58,550 --> 01:13:04,159
all these things in it so there's the

1460
01:12:59,868 --> 01:13:08,948
pitch the orbit the dolly the focal

1461
01:13:04,158 --> 01:13:12,408
length your clip playing our clip plane

1462
01:13:08,948 --> 01:13:14,448
just like the transform parameters and

1463
01:13:12,408 --> 01:13:18,618
then the offset oops

1464
01:13:14,448 --> 01:13:28,009
don't ask me what that just did all

1465
01:13:18,618 --> 01:13:29,630
right okay so once we have all that now

1466
01:13:28,010 --> 01:13:33,519
again we can we can just continue to

1467
01:13:29,630 --> 01:13:36,159
simplify these things really nicely

1468
01:13:33,519 --> 01:13:38,840
which I will which I will do

1469
01:13:36,158 --> 01:13:41,238
and so now right we still want to be

1470
01:13:38,840 --> 01:13:42,679
able to do these things and we can write

1471
01:13:41,238 --> 01:13:45,348
we can still just set these things

1472
01:13:42,679 --> 01:13:46,939
anytime we want we can also just now

1473
01:13:45,349 --> 01:13:50,719
simplify this call because it's just

1474
01:13:46,939 --> 01:13:52,039
that and then we can imagine again what

1475
01:13:50,719 --> 01:13:53,868
you can see where we're going with this

1476
01:13:52,038 --> 01:13:56,148
we'll be able to simplify this call as

1477
01:13:53,868 --> 01:13:58,188
well to be something that you can use

1478
01:13:56,149 --> 01:14:03,409
without having to think about what it's

1479
01:13:58,189 --> 01:14:05,530
doing right so let's keep going there we

1480
01:14:03,408 --> 01:14:05,529
go

1481
01:14:05,569 --> 01:14:10,158
so now you can see again the same exact

1482
01:14:07,578 --> 01:14:13,130
results but now the person who made this

1483
01:14:10,158 --> 01:14:16,308
app if they weren't us and don't know 3d

1484
01:14:13,130 --> 01:14:18,050
math it's getting simpler right it's

1485
01:14:16,309 --> 01:14:21,708
getting simpler and simpler and simpler

1486
01:14:18,050 --> 01:14:25,219
for them and that's good right that's

1487
01:14:21,708 --> 01:14:28,158
what we want so let's keep it even

1488
01:14:25,219 --> 01:14:33,519
let's just keep pushing that as far as

1489
01:14:28,158 --> 01:14:33,518
we can push it so set camera transform

1490
01:14:38,180 --> 01:14:47,990
I'm gonna change the name of this to use

1491
01:14:40,909 --> 01:14:57,829
camera or view from camera right and

1492
01:14:47,989 --> 01:15:03,260
that's gonna be a utility it's gonna

1493
01:14:57,829 --> 01:15:05,930
take a render group and it's gonna take

1494
01:15:03,260 --> 01:15:08,180
a camera and it's gonna do this work for

1495
01:15:05,930 --> 01:15:11,119
you so now you can just make this

1496
01:15:08,180 --> 01:15:14,000
semantic call hey I would like to view

1497
01:15:11,119 --> 01:15:16,279
from this camera please you don't have

1498
01:15:14,000 --> 01:15:18,140
to know anything it'll do all of this

1499
01:15:16,279 --> 01:15:20,869
work for you and now it's just semantic

1500
01:15:18,140 --> 01:15:22,910
begin a group of things here's where I

1501
01:15:20,869 --> 01:15:25,489
want to view them from I push my scene

1502
01:15:22,909 --> 01:15:30,729
on all the stuff I want to draw end and

1503
01:15:25,489 --> 01:15:30,729
that's the end of the frame right

1504
01:15:32,000 --> 01:15:40,699
very very very straightforward right

1505
01:15:36,319 --> 01:15:42,259
um so how do we do that well first of

1506
01:15:40,699 --> 01:15:43,849
all we know we need that camera matrix

1507
01:15:42,260 --> 01:15:46,730
well that's okay that just goes right in

1508
01:15:43,850 --> 01:15:51,020
here then we do all of this stuff off of

1509
01:15:46,729 --> 01:15:51,679
the camera that we have and it's as

1510
01:15:51,020 --> 01:15:56,360
simple as that

1511
01:15:51,680 --> 01:15:59,030
now note this is kind of exactly like

1512
01:15:56,359 --> 01:16:00,559
what I talk about when I sort of use the

1513
01:15:59,029 --> 01:16:04,279
phrase compression oriented programming

1514
01:16:00,560 --> 01:16:05,930
right well I forgot we haven't really

1515
01:16:04,279 --> 01:16:07,369
talked about the fog stuff so we'll talk

1516
01:16:05,930 --> 01:16:13,280
about the fog stuff a little bit later

1517
01:16:07,369 --> 01:16:18,979
um we just took what we saw as how the

1518
01:16:13,279 --> 01:16:20,869
API was being used and we make we reduce

1519
01:16:18,979 --> 01:16:22,909
the complexity of what's getting called

1520
01:16:20,869 --> 01:16:25,729
by making utility functions that do the

1521
01:16:22,909 --> 01:16:27,349
normal things we don't remove the

1522
01:16:25,729 --> 01:16:28,789
ability to do them at the lower levels

1523
01:16:27,350 --> 01:16:30,800
because that's good that gives us the

1524
01:16:28,789 --> 01:16:33,050
granularity if the user of this renderer

1525
01:16:30,800 --> 01:16:35,090
wants to get more and more specific they

1526
01:16:33,050 --> 01:16:37,100
can they don't have to use our camera

1527
01:16:35,090 --> 01:16:39,140
and that's crucial don't force them to

1528
01:16:37,100 --> 01:16:41,750
use something when we don't need to

1529
01:16:39,140 --> 01:16:46,220
force them provide the option right

1530
01:16:41,750 --> 01:16:48,409
provide the option okay um so now again

1531
01:16:46,220 --> 01:16:50,630
here is this same exact thing running

1532
01:16:48,409 --> 01:16:51,859
but again the API so much easy

1533
01:16:50,630 --> 01:16:53,779
for someone who doesn't know what's

1534
01:16:51,859 --> 01:16:56,210
going on look at how simple that is now

1535
01:16:53,779 --> 01:17:02,380
view from camera push simple scene and

1536
01:16:56,210 --> 01:17:02,380
render group right so so so simple okay

1537
01:17:02,529 --> 01:17:06,289
again just thinking it easier and easier

1538
01:17:04,909 --> 01:17:09,019
and easier and increasing that

1539
01:17:06,289 --> 01:17:10,670
accessibility and reducing the

1540
01:17:09,020 --> 01:17:13,970
likelihood of making those errors while

1541
01:17:10,670 --> 01:17:17,210
still at the same time retaining all the

1542
01:17:13,970 --> 01:17:19,520
power right anyone can still now go in

1543
01:17:17,210 --> 01:17:22,039
here and do all of the same meticulous

1544
01:17:19,520 --> 01:17:24,080
calls set their own camera transforms

1545
01:17:22,039 --> 01:17:26,359
from their oma to all of that stuff

1546
01:17:24,079 --> 01:17:29,510
could still work so we have eliminated

1547
01:17:26,359 --> 01:17:31,099
no capabilities and we have introduced

1548
01:17:29,510 --> 01:17:32,840
the power at all all we've done is

1549
01:17:31,100 --> 01:17:35,500
provide utilities that allow people to

1550
01:17:32,840 --> 01:17:42,739
not care if they don't want to care

1551
01:17:35,500 --> 01:17:45,920
right um so now let's see about bringing

1552
01:17:42,739 --> 01:17:52,880
this even like even further like I

1553
01:17:45,920 --> 01:17:58,880
saying um so so let's call it can't

1554
01:17:52,880 --> 01:18:02,060
standard camera here all that stuff

1555
01:17:58,880 --> 01:18:04,130
looks fine so now what I'd like to do is

1556
01:18:02,060 --> 01:18:07,580
just focus on the fact that we never

1557
01:18:04,130 --> 01:18:10,430
implemented the fog okay so let's extend

1558
01:18:07,579 --> 01:18:12,920
our renderer which we like I said we

1559
01:18:10,430 --> 01:18:15,619
never did that renderer group stuff we

1560
01:18:12,920 --> 01:18:19,270
needed to to make the fog work render a

1561
01:18:15,619 --> 01:18:19,269
dusty tepee so I'm looking for actually

1562
01:18:21,760 --> 01:18:28,070
here you can see the way we're passing

1563
01:18:24,949 --> 01:18:31,099
the stuff in note the way that we

1564
01:18:28,069 --> 01:18:33,109
specify whether we want fog or not so

1565
01:18:31,100 --> 01:18:40,970
there's all this stuff Alpha clip

1566
01:18:33,109 --> 01:18:43,399
distance we have these settings the

1567
01:18:40,970 --> 01:18:46,460
person can't accept access them right

1568
01:18:43,399 --> 01:18:50,019
they can't get they can't get to it and

1569
01:18:46,460 --> 01:18:55,270
we need them to be able to to get there

1570
01:18:50,020 --> 01:18:59,930
right um so there's a couple things this

1571
01:18:55,270 --> 01:19:01,880
ortho called here I when we pass in the

1572
01:18:59,930 --> 01:19:04,230
flags right we're not passing any flags

1573
01:19:01,880 --> 01:19:05,489
here so

1574
01:19:04,229 --> 01:19:08,819
i we don't have to worry about

1575
01:19:05,488 --> 01:19:11,819
orthographic I don't think the fog value

1576
01:19:08,819 --> 01:19:12,509
here why that wasn't a flag I have no

1577
01:19:11,819 --> 01:19:16,408
idea

1578
01:19:12,510 --> 01:19:17,998
it so obviously should be a flag but

1579
01:19:16,408 --> 01:19:20,089
what you can see is regardless of

1580
01:19:17,998 --> 01:19:23,670
whether it's a flag or not we need

1581
01:19:20,090 --> 01:19:26,219
direction start and end those need to be

1582
01:19:23,670 --> 01:19:29,849
set right and the same thing is true of

1583
01:19:26,219 --> 01:19:34,590
the clipping the Alpha clip we need to

1584
01:19:29,849 --> 01:19:37,590
set these things and if we don't set

1585
01:19:34,590 --> 01:19:41,309
them then then this stuff won't work

1586
01:19:37,590 --> 01:19:42,599
right so let's go ahead and try to make

1587
01:19:41,309 --> 01:19:44,219
this a little bit better than it is

1588
01:19:42,599 --> 01:19:54,239
right now because right now it's super

1589
01:19:44,219 --> 01:19:58,639
crappy let's do an Alpha clip and a fog

1590
01:19:54,238 --> 01:19:58,638
let's remove the parameter for fog

1591
01:20:12,800 --> 01:20:18,630
something like this and then we can pass

1592
01:20:16,498 --> 01:20:20,279
those values in here all these ones that

1593
01:20:18,630 --> 01:20:24,239
we actually want now the fact that you

1594
01:20:20,279 --> 01:20:26,460
could just set them in the setup it's

1595
01:20:24,238 --> 01:20:30,209
kind of hard to say whether we should

1596
01:20:26,460 --> 01:20:31,889
just do that I don't really know what I

1597
01:20:30,210 --> 01:20:34,230
think about that

1598
01:20:31,889 --> 01:20:38,279
but basically like if we imagine passing

1599
01:20:34,229 --> 01:20:40,018
all these things in here you know I

1600
01:20:38,279 --> 01:20:41,429
don't have a strong opinion about it one

1601
01:20:40,019 --> 01:20:43,909
way or the other I guess is what I'm

1602
01:20:41,429 --> 01:20:43,908
trying to say

1603
01:21:12,899 --> 01:21:19,238
so you can see it's a pretty huge set of

1604
01:21:16,238 --> 01:21:23,019
features we would have to pass here

1605
01:21:19,238 --> 01:21:26,138
right and it doesn't look great right it

1606
01:21:23,020 --> 01:21:28,929
doesn't look great so the question would

1607
01:21:26,139 --> 01:21:31,510
become you know can we do something more

1608
01:21:28,929 --> 01:21:34,599
same here right can we do something bid

1609
01:21:31,510 --> 01:21:35,820
would work better than what then what

1610
01:21:34,599 --> 01:21:58,389
we're doing here

1611
01:21:35,819 --> 01:22:03,719
and I'm I'm not sure serious here's my

1612
01:21:58,389 --> 01:22:03,719
proposal right it's not a good one

1613
01:22:12,029 --> 01:22:15,509
something like this

1614
01:22:25,279 --> 01:22:52,279
and do something like this it's pretty

1615
01:22:39,979 --> 01:22:53,659
easy to do that and I don't love it but

1616
01:22:52,279 --> 01:22:55,759
you can see that it's pretty

1617
01:22:53,659 --> 01:23:11,899
straightforward right

1618
01:22:55,760 --> 01:23:27,280
you would just put these in here and the

1619
01:23:11,899 --> 01:23:32,479
Alpha clip ones in here and so that's

1620
01:23:27,279 --> 01:23:34,009
pretty basic and then you'd pass them if

1621
01:23:32,479 --> 01:23:37,369
you wanted them and you wouldn't if you

1622
01:23:34,010 --> 01:23:42,500
wouldn't right so if you then look at

1623
01:23:37,369 --> 01:23:44,630
you know the what I would actually

1624
01:23:42,500 --> 01:23:46,310
define for these sort of default values

1625
01:23:44,630 --> 01:23:51,319
right

1626
01:23:46,310 --> 01:23:52,910
the default flog grams in this case we

1627
01:23:51,319 --> 01:23:56,420
just got directions start distance and

1628
01:23:52,909 --> 01:23:59,180
end distance the default Fogg params is

1629
01:23:56,420 --> 01:24:03,199
just all zeros actually if you look at

1630
01:23:59,180 --> 01:24:07,190
it right so that one doesn't require

1631
01:24:03,199 --> 01:24:17,059
anything that's just good to go and then

1632
01:24:07,189 --> 01:24:19,639
the default alpha clip is always phrased

1633
01:24:17,060 --> 01:24:22,340
as being off of the near clip plane it

1634
01:24:19,640 --> 01:24:26,710
looks like so I'm guessing what we can

1635
01:24:22,340 --> 01:24:32,020
do is actually define these as like this

1636
01:24:26,710 --> 01:24:32,020
right and the default values are these

1637
01:24:32,170 --> 01:24:38,180
negative 100 and negative 99

1638
01:24:35,930 --> 01:24:40,820
and then the other values are these

1639
01:24:38,180 --> 01:24:50,180
right these are the default ones for a

1640
01:24:40,819 --> 01:24:57,019
clip start and end I'm not really sure

1641
01:24:50,180 --> 01:24:58,610
why they're this way in I'm not sure why

1642
01:24:57,020 --> 01:25:00,640
we don't just start at the near clip

1643
01:24:58,609 --> 01:25:03,609
plane but I'm sure we had a reason

1644
01:25:00,640 --> 01:25:09,410
famous last words

1645
01:25:03,609 --> 01:25:12,409
so yes so then if you want to set up fog

1646
01:25:09,409 --> 01:25:15,250
specifically you set it up this way if

1647
01:25:12,409 --> 01:25:18,829
you don't you set it up the other way

1648
01:25:15,250 --> 01:25:22,430
okay so then in here when you pass these

1649
01:25:18,829 --> 01:25:24,680
in for your fog params and your Alpha

1650
01:25:22,430 --> 01:25:31,159
clip ramps when you come in here you

1651
01:25:24,680 --> 01:25:42,400
actually always do assign them right and

1652
01:25:31,159 --> 01:25:42,399
you pass in these so that way

1653
01:25:53,579 --> 01:25:59,489
when these get passed in you know you

1654
01:25:55,859 --> 01:26:02,819
set them how up however you want to set

1655
01:25:59,489 --> 01:26:11,670
them and you pass them in this pointer

1656
01:26:02,819 --> 01:26:17,219
like I said don't love it but can't

1657
01:26:11,670 --> 01:26:19,279
think of anything better seems about

1658
01:26:17,220 --> 01:26:19,280
right

1659
01:26:20,270 --> 01:26:27,600
and yeah I mean we could have like a set

1660
01:26:24,420 --> 01:26:30,420
call that we use in some other way I

1661
01:26:27,600 --> 01:26:31,050
don't know but that seems pretty good to

1662
01:26:30,420 --> 01:26:38,130
me

1663
01:26:31,050 --> 01:26:43,070
and this is supposed to be what and so I

1664
01:26:38,130 --> 01:26:43,069
think that's okay you know

1665
01:26:43,199 --> 01:26:49,829
so I'm just gonna try that I'm gonna see

1666
01:26:45,930 --> 01:26:52,079
how that goes so yeah if we go ahead and

1667
01:26:49,829 --> 01:27:00,630
look a little bit further down the road

1668
01:26:52,079 --> 01:27:02,100
there sorry I'm just gonna take a look

1669
01:27:00,630 --> 01:27:03,619
at what we would need to do to make that

1670
01:27:02,100 --> 01:27:06,699
stuff work

1671
01:27:03,619 --> 01:27:06,698
[Music]

1672
01:27:15,939 --> 01:27:22,629
don't know why did that that's the exact

1673
01:27:18,408 --> 01:27:22,629
opposite alright so there we go

1674
01:27:23,050 --> 01:27:29,869
okay so sip camera transform we're now

1675
01:27:27,279 --> 01:27:31,908
down to just like looking at where these

1676
01:27:29,868 --> 01:27:33,618
actually get called and what the

1677
01:27:31,908 --> 01:27:35,808
problems are when we actually call them

1678
01:27:33,618 --> 01:27:39,109
and so that's good so now let's go

1679
01:27:35,809 --> 01:27:39,829
through here we don't need to call past

1680
01:27:39,109 --> 01:27:41,538
that anymore

1681
01:27:39,828 --> 01:27:44,299
and we should work okay now if we just

1682
01:27:41,538 --> 01:27:45,768
pass those defaults right so let's go

1683
01:27:44,300 --> 01:27:48,349
ahead and run and verify that we

1684
01:27:45,769 --> 01:27:50,300
actually do so that's good right now

1685
01:27:48,349 --> 01:27:53,420
let's try to put in some alpha clipping

1686
01:27:50,300 --> 01:27:55,219
or some fog just to make it clear that

1687
01:27:53,420 --> 01:28:00,529
it works at all because we don't know if

1688
01:27:55,219 --> 01:28:02,269
it does right so I'm gonna go in here to

1689
01:28:00,529 --> 01:28:05,170
where these were set up I'm gonna first

1690
01:28:02,269 --> 01:28:10,699
loft these I'd like these to be

1691
01:28:05,170 --> 01:28:11,748
available you know up here so that when

1692
01:28:10,698 --> 01:28:15,379
we're actually talking about render

1693
01:28:11,748 --> 01:28:20,960
groups it's clear so there's a render

1694
01:28:15,380 --> 01:28:22,670
setup here it is

1695
01:28:20,960 --> 01:28:24,649
these are kind of like part of this and

1696
01:28:22,670 --> 01:28:26,840
we could actually include those in here

1697
01:28:24,649 --> 01:28:28,129
if we wanted to in the future right I

1698
01:28:26,840 --> 01:28:32,650
don't know that we necessarily want to

1699
01:28:28,130 --> 01:28:39,819
what we could um so if I go ahead and

1700
01:28:32,649 --> 01:28:39,819
hmm and we compile here oops

1701
01:28:40,149 --> 01:28:45,170
instead of having this fog equals false

1702
01:28:42,380 --> 01:28:54,618
nonsense now I can just do a fog params

1703
01:28:45,170 --> 01:28:58,219
in I can do a fog params and the fog

1704
01:28:54,618 --> 01:29:01,399
params I can set the direction again I

1705
01:28:58,219 --> 01:29:05,090
want like based on the camera Z so I'm

1706
01:29:01,399 --> 01:29:07,939
gonna again follow sort of what's base

1707
01:29:05,090 --> 01:29:12,010
you know what we're looking at here so

1708
01:29:07,939 --> 01:29:14,509
I'm going to want the camera Z and

1709
01:29:12,010 --> 01:29:18,010
remember I could actually pull this out

1710
01:29:14,510 --> 01:29:18,010
ahead of time because it's this

1711
01:29:21,270 --> 01:29:26,890
there we go and so here I can just say

1712
01:29:25,029 --> 01:29:29,769
the negative camera Z Direction is the

1713
01:29:26,890 --> 01:29:34,539
direction I want the fog to go the start

1714
01:29:29,770 --> 01:29:36,970
distance is going to be whatever and the

1715
01:29:34,539 --> 01:29:38,680
end distance is going to be whatever so

1716
01:29:36,970 --> 01:29:43,240
what are the distances we actually

1717
01:29:38,680 --> 01:29:47,710
realistically want for the fog well I

1718
01:29:43,239 --> 01:29:52,710
don't know let's set 4 and 20 because

1719
01:29:47,710 --> 01:29:54,909
that's just some distances I don't know

1720
01:29:52,710 --> 01:29:56,739
let's not forget we actually have to

1721
01:29:54,909 --> 01:29:59,349
build our camera matrix first before we

1722
01:29:56,739 --> 01:30:00,909
can get stuff out of it and so now we

1723
01:29:59,350 --> 01:30:03,220
should be able to start to play with

1724
01:30:00,909 --> 01:30:05,619
those values to see some fog eventually

1725
01:30:03,220 --> 01:30:06,699
assuming fog still works I don't

1726
01:30:05,619 --> 01:30:07,869
remember if there's other stuff that we

1727
01:30:06,699 --> 01:30:09,939
have to do to make sure that the fog

1728
01:30:07,869 --> 01:30:11,260
works so I'm not seeing any yet it

1729
01:30:09,939 --> 01:30:12,939
should be based on distance from the

1730
01:30:11,260 --> 01:30:15,909
camera I need to make sure that we

1731
01:30:12,939 --> 01:30:22,509
actually well I think that should have

1732
01:30:15,909 --> 01:30:25,930
done it but I'm not sure it's not to see

1733
01:30:22,510 --> 01:30:31,350
if we're really getting oh we didn't

1734
01:30:25,930 --> 01:30:31,350
pass it got to start by passing it first

1735
01:30:31,859 --> 01:30:39,909
all right so passing the fog down so

1736
01:30:38,170 --> 01:30:41,949
there we go and that's great because now

1737
01:30:39,909 --> 01:30:45,809
our fog is actually quite obviously

1738
01:30:41,949 --> 01:30:50,679
there let's stiffen it up a bit so

1739
01:30:45,810 --> 01:30:52,980
here's a more dramatic fog we'll start

1740
01:30:50,680 --> 01:30:57,960
it at 8 ended at 10 so it's like a very

1741
01:30:52,979 --> 01:31:00,339
dense fog at the end that we oh my god

1742
01:30:57,960 --> 01:31:02,439
that's it very interesting that outline

1743
01:31:00,340 --> 01:31:04,710
we have to look and see what's going on

1744
01:31:02,439 --> 01:31:12,819
there our fog stuff is a little bit

1745
01:31:04,710 --> 01:31:17,350
chewy there it looks like what what

1746
01:31:12,819 --> 01:31:20,170
distance should we start at that that's

1747
01:31:17,350 --> 01:31:26,380
interesting so I think our fog doesn't

1748
01:31:20,170 --> 01:31:30,899
properly handle the doesn't properly

1749
01:31:26,380 --> 01:31:33,609
handle either the Alpha values or the

1750
01:31:30,899 --> 01:31:37,559
multi sampling and I'm not sure which so

1751
01:31:33,609 --> 01:31:37,559
it's something that'll be good to fix

1752
01:31:38,340 --> 01:31:46,060
I'm not sure what ya value we should use

1753
01:31:41,289 --> 01:31:48,279
here okay there we go

1754
01:31:46,060 --> 01:31:50,500
so you can see we've got some kind of

1755
01:31:48,279 --> 01:31:52,149
bugs with the outlining there again I'm

1756
01:31:50,500 --> 01:31:56,488
not sure if that's depth pilla related

1757
01:31:52,149 --> 01:31:56,488
or exactly who's responsible for that

1758
01:32:03,010 --> 01:32:07,170
but but that's what we wanted right

1759
01:32:07,449 --> 01:32:15,699
and similarly it's kind of a weird

1760
01:32:13,510 --> 01:32:17,110
weirdly shaped fog - I feel like yes I

1761
01:32:15,699 --> 01:32:20,460
feel like we've got some work to do

1762
01:32:17,109 --> 01:32:20,460
I feel like our fogs a little bit wonky

1763
01:32:22,050 --> 01:32:27,310
but I can I he's on camera Z so I'm not

1764
01:32:24,729 --> 01:32:28,809
sure but anyway it's basically just the

1765
01:32:27,310 --> 01:32:30,490
specification is what we care about now

1766
01:32:28,810 --> 01:32:31,950
we have to work on our shaders obviously

1767
01:32:30,489 --> 01:32:35,139
we know that so that's not a huge deal

1768
01:32:31,949 --> 01:32:37,750
but if we want to go ahead and set the

1769
01:32:35,140 --> 01:32:40,270
direction to be different maybe we set

1770
01:32:37,750 --> 01:32:44,199
it to the world Y or the world Z rather

1771
01:32:40,270 --> 01:32:48,900
so it's actually an upward fog so maybe

1772
01:32:44,199 --> 01:32:52,599
the fog starts kind of at a low distance

1773
01:32:48,899 --> 01:32:56,529
as measured along Z so you know the

1774
01:32:52,600 --> 01:33:01,450
start of it would be somewhere around

1775
01:32:56,529 --> 01:33:04,529
like one let's say and it would end

1776
01:33:01,449 --> 01:33:04,529
somewhere around negative one

1777
01:33:11,810 --> 01:33:18,050
five Direction is measured relative to

1778
01:33:14,779 --> 01:33:19,460
the camera though so that makes it a

1779
01:33:18,050 --> 01:33:22,070
little bit harder to do this we don't

1780
01:33:19,460 --> 01:33:25,010
have a way to do world space fog at the

1781
01:33:22,069 --> 01:33:27,019
moment which we probably should add but

1782
01:33:25,010 --> 01:33:27,920
if that's the case then it has to be

1783
01:33:27,020 --> 01:33:30,320
much lower

1784
01:33:27,920 --> 01:33:36,619
so the fog start distance would have to

1785
01:33:30,319 --> 01:33:38,479
be if measured upward so we want to

1786
01:33:36,619 --> 01:33:47,199
actually measure downwards from the

1787
01:33:38,479 --> 01:33:50,469
camera and it would be what like that

1788
01:33:47,199 --> 01:33:50,470
not sure

1789
01:34:00,039 --> 01:34:07,569
so there's one that gets stiffer as you

1790
01:34:02,680 --> 01:34:08,860
go down right and again looks like

1791
01:34:07,569 --> 01:34:10,569
everything you probably accept we just

1792
01:34:08,859 --> 01:34:12,039
we have those edging artifacts on our

1793
01:34:10,569 --> 01:34:14,979
fog there so we'll have to figure out

1794
01:34:12,039 --> 01:34:16,359
what we're doing wrong and fix those but

1795
01:34:14,979 --> 01:34:17,739
that's you know kind of for a different

1796
01:34:16,359 --> 01:34:19,420
different day and you can see the fog

1797
01:34:17,739 --> 01:34:21,010
has completely obscured the ground here

1798
01:34:19,420 --> 01:34:28,260
which is exactly what I wanted to see

1799
01:34:21,010 --> 01:34:28,260
happen right um so that's good

1800
01:34:35,500 --> 01:34:39,640
I'm pretty happy with all that so what I

1801
01:34:38,439 --> 01:34:46,599
want to do now is make sure that that

1802
01:34:39,640 --> 01:34:49,990
stuff can be set in the actual camera

1803
01:34:46,600 --> 01:34:57,270
values you know itself so what I want to

1804
01:34:49,989 --> 01:35:03,939
do here is say you know fog direction um

1805
01:34:57,270 --> 01:35:05,740
fog start log end and one of the things

1806
01:35:03,939 --> 01:35:09,009
that would be nice there is if the fog

1807
01:35:05,739 --> 01:35:12,250
was actually based on a point not on the

1808
01:35:09,010 --> 01:35:14,289
camera and you could just pass the point

1809
01:35:12,250 --> 01:35:22,060
so I feel like we kind of wanted to do

1810
01:35:14,289 --> 01:35:23,619
here we want to basically say here's the

1811
01:35:22,060 --> 01:35:27,400
point to measure the fog from and then

1812
01:35:23,619 --> 01:35:32,829
here's the direction because we can

1813
01:35:27,399 --> 01:35:35,229
always pass the camera but you know what

1814
01:35:32,829 --> 01:35:37,029
if we don't want to pass the camera what

1815
01:35:35,229 --> 01:35:40,029
if we want some other point to be the

1816
01:35:37,029 --> 01:35:43,840
fog basis right it's just so good think

1817
01:35:40,029 --> 01:35:45,460
about okay so what we want to do is say

1818
01:35:43,840 --> 01:35:51,239
okay we're gonna make some fog params

1819
01:35:45,460 --> 01:35:51,239
here maybe I'll just do it this way

1820
01:35:55,979 --> 01:35:59,789
leave that to do in there

1821
01:35:59,899 --> 01:36:10,309
and then so once we get to here I can

1822
01:36:02,239 --> 01:36:12,380
just say hey past past the fog there so

1823
01:36:10,310 --> 01:36:23,360
now if I want to set these as default

1824
01:36:12,380 --> 01:36:31,640
values I can just say maybe there's a

1825
01:36:23,359 --> 01:36:33,889
little bit of fog by default I don't

1826
01:36:31,640 --> 01:36:35,930
know exactly what that fog value should

1827
01:36:33,890 --> 01:36:37,280
be but again we'll just use sort of the

1828
01:36:35,930 --> 01:36:41,090
stuff that we were playing around before

1829
01:36:37,279 --> 01:36:42,590
and just call that good um so fog

1830
01:36:41,090 --> 01:36:44,029
direction in this case I guess one

1831
01:36:42,590 --> 01:36:45,500
problem is since it's based on the

1832
01:36:44,029 --> 01:36:47,659
camera

1833
01:36:45,500 --> 01:36:49,430
the fog direction in this case I guess

1834
01:36:47,659 --> 01:36:50,479
we kind of have to hard-code that into

1835
01:36:49,430 --> 01:36:51,740
the camera one way or the other you'd

1836
01:36:50,479 --> 01:36:55,219
have to have that setting for it

1837
01:36:51,739 --> 01:37:02,359
um and so I guess that sort of suggests

1838
01:36:55,220 --> 01:37:06,829
why this maybe is it would just be you

1839
01:37:02,359 --> 01:37:10,099
know because we for most purposes here

1840
01:37:06,829 --> 01:37:12,399
we want that to be you know based on

1841
01:37:10,100 --> 01:37:17,060
some direction that has nothing to do

1842
01:37:12,399 --> 01:37:20,569
that has to do with the cameras location

1843
01:37:17,060 --> 01:37:22,190
probably right and I don't know maybe it

1844
01:37:20,569 --> 01:37:26,059
me it really wants to be more world

1845
01:37:22,189 --> 01:37:29,109
oriented we'll see eventually as we play

1846
01:37:26,060 --> 01:37:29,110
around that a little bit more

1847
01:37:44,399 --> 01:37:56,549
and so here all we're going to do is

1848
01:37:47,680 --> 01:37:56,550
only have the fog start and the fog and

1849
01:37:58,229 --> 01:38:07,869
and we'll go from there so assuming that

1850
01:38:05,710 --> 01:38:09,699
that's right fog start fog ends and

1851
01:38:07,869 --> 01:38:12,099
negative camera Z which i think is

1852
01:38:09,699 --> 01:38:16,559
correct then let's just set these to

1853
01:38:12,100 --> 01:38:16,560
something that makes some sense here

1854
01:38:18,930 --> 01:38:23,070
that's a little bit too much

1855
01:38:29,840 --> 01:38:33,770
and that's a little bit too little

1856
01:38:46,948 --> 01:38:54,388
there we go so now we've got the fog in

1857
01:38:51,448 --> 01:38:57,928
there by default and that you know is

1858
01:38:54,389 --> 01:39:00,989
just a you know parameter that anyone

1859
01:38:57,929 --> 01:39:05,429
can play with as they wish so that's

1860
01:39:00,988 --> 01:39:33,058
fine and now let's just put the Alpha

1861
01:39:05,429 --> 01:39:35,399
clip in there as well okay so if we have

1862
01:39:33,059 --> 01:39:37,619
the start and end points of our clipping

1863
01:39:35,399 --> 01:39:40,379
alpha again those are based on the NIR

1864
01:39:37,618 --> 01:39:42,029
clip plane so we'll just set those to

1865
01:39:40,380 --> 01:39:47,420
the two values we have here we probably

1866
01:39:42,029 --> 01:39:47,420
won't see anything happen at the moment

1867
01:39:51,979 --> 01:39:56,780
but we can try to construct some ways

1868
01:39:54,238 --> 01:39:56,779
that we would

1869
01:40:11,600 --> 01:40:15,500
again just putting these in here

1870
01:40:22,310 --> 01:40:40,650
okay so clip out the start and clip

1871
01:40:25,529 --> 01:40:43,199
alpha end just going here and now we

1872
01:40:40,649 --> 01:40:47,309
have everything initialized via that

1873
01:40:43,199 --> 01:40:51,359
camera params itself and alpha clip is

1874
01:40:47,310 --> 01:40:55,380
now engaged as well so if we actually

1875
01:40:51,359 --> 01:41:01,619
wanted alpha clip itself to be something

1876
01:40:55,380 --> 01:41:04,140
that we saw happen in the render test we

1877
01:41:01,619 --> 01:41:06,689
just need to move the camera closer so

1878
01:41:04,140 --> 01:41:09,420
in theory if we just change the camera

1879
01:41:06,689 --> 01:41:11,969
dolly so like here we change dolly to

1880
01:41:09,420 --> 01:41:13,350
like you know one instead of ten so

1881
01:41:11,970 --> 01:41:15,539
we're right up in it

1882
01:41:13,350 --> 01:41:18,060
we should start clip well that might

1883
01:41:15,539 --> 01:41:20,069
just clip everything away we probably

1884
01:41:18,060 --> 01:41:25,140
need to go back a little bit more than

1885
01:41:20,069 --> 01:41:29,909
that so let's try three and then we can

1886
01:41:25,140 --> 01:41:31,890
try to get that clip working um so you

1887
01:41:29,909 --> 01:41:32,609
can see the clip working unfortunately

1888
01:41:31,890 --> 01:41:34,140
it's a little bit hard because

1889
01:41:32,609 --> 01:41:36,630
everything's brown here but you can see

1890
01:41:34,140 --> 01:41:38,789
the clip working just nicely there so

1891
01:41:36,630 --> 01:41:44,069
we're totally fine let's move back a

1892
01:41:38,789 --> 01:41:46,199
little bit Wow so we have to move back

1893
01:41:44,069 --> 01:41:51,000
quite a bit how much what is our camera

1894
01:41:46,199 --> 01:41:55,050
dolly default - oh it's 20 okay I

1895
01:41:51,000 --> 01:41:56,699
thought it was only ten all right so

1896
01:41:55,050 --> 01:41:58,190
let's move close enough that we start

1897
01:41:56,699 --> 01:42:02,970
clipping through some of these things

1898
01:41:58,189 --> 01:42:05,179
let's try eight meters displacement

1899
01:42:02,970 --> 01:42:05,180
there

1900
01:42:09,649 --> 01:42:13,549
and you see you can get really nice

1901
01:42:11,630 --> 01:42:14,960
alpha clipping I mean you can almost not

1902
01:42:13,550 --> 01:42:17,690
even see that that's what's happening

1903
01:42:14,960 --> 01:42:19,760
it's so smooth so that's really nice

1904
01:42:17,689 --> 01:42:26,000
obscuring those objects right so you can

1905
01:42:19,760 --> 01:42:32,119
see through it so that's really good um

1906
01:42:26,000 --> 01:42:35,979
so that's working just fine so I think

1907
01:42:32,118 --> 01:42:35,979
all that's good now

1908
01:42:43,529 --> 01:42:48,829
and if we wanted to we could also extend

1909
01:42:46,229 --> 01:42:53,069
out the clip out a bit further there

1910
01:42:48,829 --> 01:42:54,840
okay um so that's everything there I

1911
01:42:53,069 --> 01:42:56,460
think we're almost out of time I'm gonna

1912
01:42:54,840 --> 01:42:57,690
go clean up the Hameed here a side of

1913
01:42:56,460 --> 01:43:00,899
things so that it's still cooling but

1914
01:42:57,689 --> 01:43:04,399
that's good I'm happy with where this is

1915
01:43:00,899 --> 01:43:06,869
at now because now you just call that

1916
01:43:04,399 --> 01:43:15,019
and you're kind of off to the races

1917
01:43:06,869 --> 01:43:18,809
here's the camera this camera code is

1918
01:43:15,020 --> 01:43:23,430
really just now here too you know kind

1919
01:43:18,810 --> 01:43:25,770
of do both rotation and offsetting and I

1920
01:43:23,430 --> 01:43:28,980
mean that is something the user has to

1921
01:43:25,770 --> 01:43:30,570
do the way that they want to do it so I

1922
01:43:28,979 --> 01:43:38,309
think all this is really straightforward

1923
01:43:30,569 --> 01:43:43,949
now I may be hard to have a simpler API

1924
01:43:38,310 --> 01:43:49,350
than this right the sum total is call

1925
01:43:43,949 --> 01:43:54,319
this function call this function call

1926
01:43:49,350 --> 01:43:57,110
this function if you want to write then

1927
01:43:54,319 --> 01:43:59,519
download your textures start a frame

1928
01:43:57,109 --> 01:44:01,859
make as many groups as you want say

1929
01:43:59,520 --> 01:44:04,620
where they're viewed from put the

1930
01:44:01,859 --> 01:44:06,500
sprites in that you want finish and then

1931
01:44:04,619 --> 01:44:10,159
render everything when you're done

1932
01:44:06,500 --> 01:44:10,159
pretty straightforward

1933
01:44:15,729 --> 01:44:23,569
and so about the only question I have is

1934
01:44:18,920 --> 01:44:28,118
can we get rid of the render groups and

1935
01:44:23,569 --> 01:44:28,118
we'll have to see are those necessary

1936
01:44:30,368 --> 01:44:33,698
because they might

1937
01:44:56,920 --> 01:45:09,399
I mean it is very possible that we could

1938
01:45:00,429 --> 01:45:13,890
just get rid of the render group so we

1939
01:45:09,399 --> 01:45:13,889
may be able to make one more simplifying

1940
01:45:18,270 --> 01:45:27,730
we may be able to make one more

1941
01:45:20,289 --> 01:45:30,210
simplifying step we don't have any time

1942
01:45:27,729 --> 01:45:30,209
left doing

1943
01:45:34,779 --> 01:45:38,488
what time did we actually start

1944
01:45:43,710 --> 01:45:46,920
anybody now

1945
01:45:52,288 --> 01:45:55,948
help me out here stream

1946
01:46:22,100 --> 01:46:30,940
oh all right 1:30 p.m. okay okay so I

1947
01:46:26,869 --> 01:46:30,939
actually have 15 minutes is that correct

1948
01:46:31,779 --> 01:46:40,858
all right if I actually have 15 minutes

1949
01:46:37,600 --> 01:46:40,859
[Music]

1950
01:47:10,300 --> 01:47:15,020
15 minutes may not be quite the amount

1951
01:47:13,430 --> 01:47:17,690
of time that I would need to do

1952
01:47:15,020 --> 01:47:20,690
something like this so I'm hesitant to

1953
01:47:17,689 --> 01:47:24,679
do it but if we consider the render

1954
01:47:20,689 --> 01:47:27,609
group and its reason for being I would

1955
01:47:24,680 --> 01:47:29,110
say we really don't need it anymore

1956
01:47:27,609 --> 01:47:32,539
[Music]

1957
01:47:29,109 --> 01:47:42,769
basically this stuff can just be stuck

1958
01:47:32,539 --> 01:47:45,340
on to the render commands and I mean if

1959
01:47:42,770 --> 01:47:45,340
we look

1960
01:47:49,779 --> 01:48:02,339
if you kind of look at what's happening

1961
01:47:51,939 --> 01:48:14,649
there it really all we really need is

1962
01:48:02,338 --> 01:48:16,479
just the clear command like this if we

1963
01:48:14,649 --> 01:48:18,039
just undid a little the change we didn't

1964
01:48:16,479 --> 01:48:21,519
how to begin DUP he'll end up peel

1965
01:48:18,038 --> 01:48:23,828
that's really all you would need and you

1966
01:48:21,519 --> 01:48:25,449
really don't need even that you can

1967
01:48:23,828 --> 01:48:26,438
assume that everything is through the

1968
01:48:25,448 --> 01:48:31,738
def heels and you could just have one

1969
01:48:26,439 --> 01:48:31,739
called it's like stop depth peeling now

1970
01:48:32,279 --> 01:48:35,279
right

1971
01:48:59,810 --> 01:49:05,539
so I do think it's probably worth noting

1972
01:49:04,109 --> 01:49:07,679
that you don't really need this thing

1973
01:49:05,539 --> 01:49:12,359
whether that means you should get rid of

1974
01:49:07,680 --> 01:49:16,770
it or not hard to say but we probably

1975
01:49:12,359 --> 01:49:24,869
could right I'm gonna pop back to

1976
01:49:16,770 --> 01:49:27,920
handmade hero just clean that up this is

1977
01:49:24,869 --> 01:49:27,920
the focal length here

1978
01:49:54,270 --> 01:50:02,440
not sure where else we've gots yeah um

1979
01:49:58,149 --> 01:50:04,118
so that's really the entirety of the

1980
01:50:02,439 --> 01:50:08,109
porting so here is this running on the

1981
01:50:04,118 --> 01:50:11,738
renderer here here's this running on the

1982
01:50:08,109 --> 01:50:14,500
renderer inside the game and if we now

1983
01:50:11,738 --> 01:50:17,169
want to return now what is true though

1984
01:50:14,500 --> 01:50:18,639
is we now no longer have like any of our

1985
01:50:17,170 --> 01:50:23,350
fog effects or any of those things

1986
01:50:18,639 --> 01:50:27,550
happening in the game proper so to

1987
01:50:23,350 --> 01:50:30,389
return those to operational I'm just

1988
01:50:27,550 --> 01:50:34,949
gonna put to do in here when we're ready

1989
01:50:30,389 --> 01:50:38,859
add alpha clip and fog back in here

1990
01:50:34,948 --> 01:50:43,799
right now we're not I mean I guess you

1991
01:50:38,859 --> 01:50:48,420
know what we got the time now just do it

1992
01:50:43,800 --> 01:50:48,420
right just do it why not

1993
01:50:51,479 --> 01:50:58,319
here's what they were set to you before

1994
01:50:55,319 --> 01:50:58,319
right

1995
01:51:05,829 --> 01:51:15,920
prom solved so literally just setting

1996
01:51:13,729 --> 01:51:30,019
the values exactly what they used to be

1997
01:51:15,920 --> 01:51:34,100
set to in both the Fogg case and the

1998
01:51:30,020 --> 01:51:36,590
Alpha clip case and now we can just

1999
01:51:34,100 --> 01:51:40,550
adjust those as necessary out here to

2000
01:51:36,590 --> 01:51:44,920
whatever we want and when we actually

2001
01:51:40,550 --> 01:51:44,920
set the game camera up I can just

2002
01:51:47,890 --> 01:51:57,950
eventually we should actually have we

2003
01:51:56,180 --> 01:52:02,390
want to set these values to things that

2004
01:51:57,949 --> 01:52:07,359
we actually care about more so there's

2005
01:52:02,390 --> 01:52:07,360
that but yeah

2006
01:52:14,029 --> 01:52:21,599
but otherwise you know six of one

2007
01:52:17,039 --> 01:52:24,239
half-dozen any other so uh oops I

2008
01:52:21,600 --> 01:52:37,380
deleted the wrong values not very bright

2009
01:52:24,239 --> 01:52:38,939
not very bright today am i it's 80/20 so

2010
01:52:37,380 --> 01:52:42,150
that's all we really need to do there

2011
01:52:38,939 --> 01:52:46,289
and we're you know good to go at that

2012
01:52:42,149 --> 01:52:48,719
point so that should be the same as what

2013
01:52:46,289 --> 01:52:50,340
we're using but before I think we had

2014
01:52:48,720 --> 01:52:51,840
decided those really weren't the good

2015
01:52:50,340 --> 01:52:53,880
values anymore because we kind of

2016
01:52:51,840 --> 01:52:55,140
changed the perspective a little but at

2017
01:52:53,880 --> 01:52:59,460
least they're still working correctly

2018
01:52:55,140 --> 01:53:03,390
now right so that's all good I think

2019
01:52:59,460 --> 01:53:09,329
that's all I want to do I don't think

2020
01:53:03,390 --> 01:53:12,119
there's anything else really that we

2021
01:53:09,329 --> 01:53:15,569
should do today I'm pretty happy with

2022
01:53:12,119 --> 01:53:18,750
how these are and so the only thing that

2023
01:53:15,569 --> 01:53:20,239
I have left to get to not sure if we

2024
01:53:18,750 --> 01:53:22,949
want to remove render groups or not

2025
01:53:20,239 --> 01:53:29,609
that's kind of hard to say maybe they

2026
01:53:22,949 --> 01:53:33,029
should stick in here but this all looks

2027
01:53:29,609 --> 01:53:36,889
really nice right now and I can maybe

2028
01:53:33,029 --> 01:53:36,889
comment this a little bit

2029
01:53:50,529 --> 01:54:00,279
so we'll ask blombo AKA windows to tell

2030
01:53:56,078 --> 01:54:07,049
us what the size of our window is we

2031
01:54:00,279 --> 01:54:11,518
then use to figure out how to fit a

2032
01:54:07,050 --> 01:54:17,498
sixteen by nine drawing region in there

2033
01:54:11,519 --> 01:54:21,668
remember or this is not necessary if you

2034
01:54:17,498 --> 01:54:32,198
don't want a fixed aspect ratio you can

2035
01:54:21,668 --> 01:54:37,139
just use the whole thing so you can just

2036
01:54:32,198 --> 01:54:44,529
pass the entire thing if you want to I'm

2037
01:54:37,139 --> 01:54:46,359
not sure so I can't really remember if

2038
01:54:44,529 --> 01:54:48,429
we correct for that properly or not

2039
01:54:46,359 --> 01:54:52,029
let's just see I guess we've never

2040
01:54:48,429 --> 01:54:53,260
really tested I don't remember so right

2041
01:54:52,029 --> 01:54:59,948
now when we run

2042
01:54:53,260 --> 01:55:01,689
oops go to the render test there so

2043
01:54:59,948 --> 01:55:04,029
right now when we run right we always

2044
01:55:01,689 --> 01:55:06,479
maintain a 16 by 9 aspect ratio so you

2045
01:55:04,029 --> 01:55:11,788
can see we get the black bars in there

2046
01:55:06,479 --> 01:55:14,229
right but if you didn't want that so

2047
01:55:11,788 --> 01:55:19,118
suppose you just always wanted to draw a

2048
01:55:14,229 --> 01:55:21,429
region to be the entire thing you could

2049
01:55:19,118 --> 01:55:27,848
just pass this and that will fill the

2050
01:55:21,429 --> 01:55:30,279
entire thing I don't think that works if

2051
01:55:27,849 --> 01:55:34,469
you don't pass like you'll just stretch

2052
01:55:30,279 --> 01:55:34,469
at that point I think

2053
01:55:37,109 --> 01:55:42,009
note that just works I guess

2054
01:55:39,520 --> 01:55:44,530
so we actually reallocate the buffers

2055
01:55:42,010 --> 01:55:46,179
and everything I guess I couldn't

2056
01:55:44,529 --> 01:55:46,809
remember if we actually did that but I

2057
01:55:46,179 --> 01:55:49,149
guess we do

2058
01:55:46,810 --> 01:55:51,130
so that actually reallocates all the

2059
01:55:49,149 --> 01:55:53,500
buffers and everything for compositing

2060
01:55:51,130 --> 01:55:56,319
and everything every time so you can

2061
01:55:53,500 --> 01:56:10,289
really just do that if you want to happy

2062
01:55:56,319 --> 01:56:10,289
birthday right so that's fine

2063
01:56:48,789 --> 01:57:12,529
there we go so here I'm just commenting

2064
01:57:10,908 --> 01:57:13,729
the code we already know all this is so

2065
01:57:12,529 --> 01:57:15,019
sorry to bore you with this but I

2066
01:57:13,729 --> 01:57:17,089
figured we might as well put in here

2067
01:57:15,020 --> 01:57:19,100
because this is the example app right

2068
01:57:17,090 --> 01:57:20,569
normally I don't put many comments in my

2069
01:57:19,100 --> 01:57:21,980
code because I feel like they tend to

2070
01:57:20,569 --> 01:57:24,439
get out of date but this is the sample

2071
01:57:21,979 --> 01:57:27,500
app so it's kind of what we would expect

2072
01:57:24,439 --> 01:57:32,329
to have this documentation so people can

2073
01:57:27,500 --> 01:57:34,969
read it this is just a thing that is you

2074
01:57:32,329 --> 01:57:36,408
know want to tell people that or call on

2075
01:57:34,969 --> 01:57:37,760
processed texture queue here we don't

2076
01:57:36,408 --> 01:57:42,069
only need to this app doesn't stream

2077
01:57:37,760 --> 01:57:42,070
textures but if it did right

2078
01:58:13,569 --> 01:58:16,569
okay

2079
01:59:32,149 --> 01:59:39,719
make sense so I feel like we've got that

2080
01:59:37,380 --> 01:59:42,270
API down pretty darn good right I think

2081
01:59:39,720 --> 01:59:44,670
anyone could use this most of these

2082
01:59:42,270 --> 01:59:47,670
calls aren't even for the API they're

2083
01:59:44,670 --> 01:59:53,010
just windows nonsense or calls that

2084
01:59:47,670 --> 01:59:59,880
initialize our test scene right so

2085
01:59:53,010 --> 02:00:05,869
really we're talking one call here one

2086
01:59:59,880 --> 02:00:10,050
call here one clock here one call here

2087
02:00:05,869 --> 02:00:11,909
here here here here here here

2088
02:00:10,050 --> 02:00:17,220
right each of them does something very

2089
02:00:11,909 --> 02:00:20,059
specific seems good to me all right

2090
02:00:17,220 --> 02:00:20,060
let's go to Q&amp;A

2091
02:01:15,529 --> 02:01:21,840
Jonathan Blow asks how can I program a

2092
02:01:19,380 --> 02:01:24,180
really good Windows Update system like

2093
02:01:21,840 --> 02:01:26,250
Windows has that makes sure you update

2094
02:01:24,180 --> 02:01:30,350
all the time especially if you are not

2095
02:01:26,250 --> 02:01:35,939
home or are watching a movie right now

2096
02:01:30,350 --> 02:01:41,490
that is a very good question John so

2097
02:01:35,939 --> 02:01:44,369
here's the thing a lot of programmers

2098
02:01:41,489 --> 02:01:47,059
who are inexperienced and aren't as good

2099
02:01:44,369 --> 02:01:50,489
as the programmers who work at windows

2100
02:01:47,060 --> 02:01:56,280
might think that one of the things the

2101
02:01:50,489 --> 02:01:59,010
computer should do is like take

2102
02:01:56,279 --> 02:02:01,679
direction from the person using it so

2103
02:01:59,010 --> 02:02:07,110
for example if that person says don't

2104
02:02:01,680 --> 02:02:11,700
update unless I tell you to then that is

2105
02:02:07,109 --> 02:02:13,439
what the computer should do that's

2106
02:02:11,699 --> 02:02:16,829
old-school programming that is not

2107
02:02:13,439 --> 02:02:19,829
cutting edge and as Microsoft knows

2108
02:02:16,829 --> 02:02:23,850
cutting edge involves artificial

2109
02:02:19,829 --> 02:02:26,279
intelligence and deep learning and one

2110
02:02:23,850 --> 02:02:28,770
of the things that your code needs to

2111
02:02:26,279 --> 02:02:33,000
deep learn is to completely ignore what

2112
02:02:28,770 --> 02:02:35,250
the user is doing or wants right so the

2113
02:02:33,000 --> 02:02:37,260
AI has learned that the best thing you

2114
02:02:35,250 --> 02:02:40,430
do is just to do whatever it wants

2115
02:02:37,260 --> 02:02:42,600
regardless of what the user wants and

2116
02:02:40,430 --> 02:02:47,400
rebooting your machine and installing

2117
02:02:42,600 --> 02:02:51,840
updates whenever it wants is you know is

2118
02:02:47,399 --> 02:02:54,149
what it learned it's deeper he just

2119
02:02:51,840 --> 02:02:56,340
learned deeper and more than you have as

2120
02:02:54,149 --> 02:03:00,960
a human so I don't think you should

2121
02:02:56,340 --> 02:03:02,610
argue with that you know basically what

2122
02:03:00,960 --> 02:03:04,859
you're saying is that your puny little

2123
02:03:02,609 --> 02:03:07,529
human brain that doesn't really know

2124
02:03:04,859 --> 02:03:10,799
anything and doesn't have all kinds of

2125
02:03:07,529 --> 02:03:13,380
flops and things knows better when to

2126
02:03:10,800 --> 02:03:16,289
install updates then Windows does and

2127
02:03:13,380 --> 02:03:17,789
that's just hubris right that's human

2128
02:03:16,289 --> 02:03:21,449
hubris that you were bringing to the

2129
02:03:17,789 --> 02:03:23,819
table you're thinking crazy thoughts

2130
02:03:21,449 --> 02:03:26,010
like I paid two or three thousand

2131
02:03:23,819 --> 02:03:26,909
dollars for this machine and I had to

2132
02:03:26,010 --> 02:03:28,380
pay $200

2133
02:03:26,909 --> 02:03:30,180
for this copy of an operating system

2134
02:03:28,380 --> 02:03:32,880
that's crappier than the one that I had

2135
02:03:30,180 --> 02:03:35,190
20 years ago and you're thinking that

2136
02:03:32,880 --> 02:03:38,489
that gives you some kind of right to

2137
02:03:35,189 --> 02:03:40,979
determine when your machine should do

2138
02:03:38,489 --> 02:03:43,109
stuff right or you're thinking

2139
02:03:40,979 --> 02:03:45,719
absolutely ridiculous things like if you

2140
02:03:43,109 --> 02:03:48,089
pay $2,000 for a computer it should be

2141
02:03:45,720 --> 02:03:50,310
able to do computations for you at the

2142
02:03:48,090 --> 02:03:53,460
time that you want it to rather than

2143
02:03:50,310 --> 02:03:59,340
when it wants to all of those things are

2144
02:03:53,460 --> 02:04:01,319
false and Microsoft has figured out the

2145
02:03:59,340 --> 02:04:03,090
true interest of those questions which

2146
02:04:01,319 --> 02:04:05,159
is that when you pay $200 for an

2147
02:04:03,090 --> 02:04:07,710
operating system it should literally not

2148
02:04:05,159 --> 02:04:11,609
care at all what you want to do who you

2149
02:04:07,710 --> 02:04:12,989
are or if you you know had something

2150
02:04:11,609 --> 02:04:15,210
important that you need to do that time

2151
02:04:12,989 --> 02:04:17,250
that's not important that's not deep

2152
02:04:15,210 --> 02:04:22,409
it's not learning that's not

2153
02:04:17,250 --> 02:04:24,119
artificially intelligent I can't say

2154
02:04:22,409 --> 02:04:31,800
anything other than that's like 1990s

2155
02:04:24,119 --> 02:04:33,479
thinking it's just obviously wrong off

2156
02:04:31,800 --> 02:04:36,239
topic you mentioned in the pre stream

2157
02:04:33,479 --> 02:04:39,899
fetching the cache misses do you mind

2158
02:04:36,239 --> 02:04:41,550
explaining how it's done fetching the

2159
02:04:39,899 --> 02:04:43,619
cache misses can you be more specific

2160
02:04:41,550 --> 02:04:45,930
what what do you charge of fetching

2161
02:04:43,619 --> 02:04:52,380
cache misses do you mean texture cache

2162
02:04:45,930 --> 02:04:53,670
misses sino cron why do you want to

2163
02:04:52,380 --> 02:04:55,170
remove the render group what is the

2164
02:04:53,670 --> 02:04:56,340
alternative my following is a bit spotty

2165
02:04:55,170 --> 02:04:58,560
so I'm sorry if this is obvious from

2166
02:04:56,340 --> 02:04:59,760
watching pure streams I just want to

2167
02:04:58,560 --> 02:05:03,060
make sure that we don't have an

2168
02:04:59,760 --> 02:05:05,130
extraneous step so if really the person

2169
02:05:03,060 --> 02:05:06,840
doesn't really need an extra struct in

2170
02:05:05,130 --> 02:05:08,940
there and they could have just used the

2171
02:05:06,840 --> 02:05:13,319
render command structure and use just a

2172
02:05:08,939 --> 02:05:15,659
bracketing call that's probably better

2173
02:05:13,319 --> 02:05:18,179
and I think that's where we're at I

2174
02:05:15,659 --> 02:05:21,569
don't think you can really use render

2175
02:05:18,180 --> 02:05:22,800
groups for anything at the time render

2176
02:05:21,569 --> 02:05:25,139
commands is really where everything's

2177
02:05:22,800 --> 02:05:27,239
going so it's sort of like a vestige

2178
02:05:25,140 --> 02:05:32,430
will remain and so I feel like it should

2179
02:05:27,239 --> 02:05:35,010
probably just be removed what is your

2180
02:05:32,430 --> 02:05:36,480
opinion of the Vulcan API is it overkill

2181
02:05:35,010 --> 02:05:37,800
to use it for a little indie game or is

2182
02:05:36,479 --> 02:05:40,388
it worth the thousands of setup code

2183
02:05:37,800 --> 02:05:43,059
lines hmm so

2184
02:05:40,389 --> 02:05:44,469
my opinion on vulcan is first of all I

2185
02:05:43,059 --> 02:05:48,219
don't think it's a very good API I don't

2186
02:05:44,469 --> 02:05:49,510
think it was designed well I honestly

2187
02:05:48,219 --> 02:05:51,248
don't think almost any thought was put

2188
02:05:49,510 --> 02:05:52,570
into the design of the API from an

2189
02:05:51,248 --> 02:05:55,630
actual like is this a good API

2190
02:05:52,569 --> 02:05:57,908
standpoint and I say that because I

2191
02:05:55,630 --> 02:06:00,279
actually tried to help on the side of

2192
02:05:57,908 --> 02:06:01,328
the API and got literally nowhere trying

2193
02:06:00,279 --> 02:06:02,889
to convince people to think about the

2194
02:06:01,328 --> 02:06:06,788
sort of things that I literally was just

2195
02:06:02,889 --> 02:06:08,380
talking about on here I think it was

2196
02:06:06,788 --> 02:06:10,509
primarily designed just to be the

2197
02:06:08,380 --> 02:06:14,859
quickest thing they could get out the

2198
02:06:10,510 --> 02:06:17,409
door that was a version of mantle that

2199
02:06:14,859 --> 02:06:19,598
was cross vendor that's what I think I

2200
02:06:17,408 --> 02:06:22,498
think it shows I think it's a really bad

2201
02:06:19,599 --> 02:06:25,719
API I don't like any part of the design

2202
02:06:22,498 --> 02:06:31,349
so I'll just pull stop it's a lousy API

2203
02:06:25,719 --> 02:06:34,328
that said so are most API hice right so

2204
02:06:31,349 --> 02:06:36,340
you know OpenGL a sense of problems with

2205
02:06:34,328 --> 02:06:37,779
it direct3d has tons of problems with it

2206
02:06:36,340 --> 02:06:40,149
metal has tons of problems with it

2207
02:06:37,779 --> 02:06:42,009
whatever you know do people spend a lot

2208
02:06:40,149 --> 02:06:44,919
of time figuring out whether these api's

2209
02:06:42,010 --> 02:06:47,199
are well-designed No so that's not a

2210
02:06:44,918 --> 02:06:49,090
reason not to use it it's just an

2211
02:06:47,198 --> 02:06:52,478
observation that I don't think there's

2212
02:06:49,090 --> 02:06:55,599
any value to the Vulcan API as an API I

2213
02:06:52,479 --> 02:06:59,249
don't think it's good right so you

2214
02:06:55,599 --> 02:07:01,479
wouldn't use it because it's a good API

2215
02:06:59,248 --> 02:07:03,698
but you might still want to use it

2216
02:07:01,479 --> 02:07:06,010
because it's the most effective thing to

2217
02:07:03,698 --> 02:07:07,928
talk to the hardware so that's I think

2218
02:07:06,010 --> 02:07:09,340
the question you need to ask is it the

2219
02:07:07,929 --> 02:07:11,889
most effective thing for you to talk to

2220
02:07:09,340 --> 02:07:15,119
Hardware in the current landscape my

2221
02:07:11,889 --> 02:07:19,510
answer is no I don't think it is on

2222
02:07:15,118 --> 02:07:24,759
Windows you should use direct3d it's the

2223
02:07:19,510 --> 02:07:27,280
native API and the reason why you might

2224
02:07:24,760 --> 02:07:29,918
use OpenGL like we do is for

2225
02:07:27,279 --> 02:07:33,368
cross-platform it used to be that it ran

2226
02:07:29,918 --> 02:07:35,109
on Windows Mac and Linux so for an

2227
02:07:33,368 --> 02:07:38,859
educational stream like this even though

2228
02:07:35,109 --> 02:07:40,359
it's less well supported on Windows it's

2229
02:07:38,859 --> 02:07:43,148
still a useful thing to use for

2230
02:07:40,359 --> 02:07:44,938
educational purposes right it's easier

2231
02:07:43,149 --> 02:07:47,169
for people to follow along on Mac etc

2232
02:07:44,939 --> 02:07:50,320
that landscape hasn't fortunately

2233
02:07:47,168 --> 02:07:51,550
changed Mac has decided they will no

2234
02:07:50,319 --> 02:07:54,609
longer support open jail

2235
02:07:51,550 --> 02:07:56,710
so the hand-made hero of five

2236
02:07:54,609 --> 02:07:58,630
years from now if it was getting started

2237
02:07:56,710 --> 02:08:00,789
at that time wouldn't have that option

2238
02:07:58,630 --> 02:08:02,159
there is no cross-platform API anymore

2239
02:08:00,789 --> 02:08:06,399
right

2240
02:08:02,159 --> 02:08:08,800
there's only metal on Mac and everything

2241
02:08:06,399 --> 02:08:11,409
else that you might call is actually on

2242
02:08:08,800 --> 02:08:13,329
top of metal so you've pretty much got

2243
02:08:11,409 --> 02:08:15,729
to use it otherwise you're just adding a

2244
02:08:13,329 --> 02:08:19,149
ton of cruft right you might as well

2245
02:08:15,729 --> 02:08:20,679
just use a good API that sits on top of

2246
02:08:19,149 --> 02:08:22,359
metal you wouldn't use Vulcan because

2247
02:08:20,680 --> 02:08:26,560
it's a bad API that sits on top of metal

2248
02:08:22,359 --> 02:08:28,239
right so it really is looking like a

2249
02:08:26,560 --> 02:08:30,460
world where in the future what you will

2250
02:08:28,239 --> 02:08:33,760
do is you'll program D 3d on Windows and

2251
02:08:30,460 --> 02:08:37,750
metal on Mac so I don't see any reason

2252
02:08:33,760 --> 02:08:41,500
for Vulcan is not useful from what I can

2253
02:08:37,750 --> 02:08:45,250
see it doesn't really have a reason to

2254
02:08:41,500 --> 02:08:49,029
exist anymore maybe it will become the

2255
02:08:45,250 --> 02:08:51,609
crappy API you use to replace OpenGL ES

2256
02:08:49,029 --> 02:08:55,599
on Android right and that's something it

2257
02:08:51,609 --> 02:08:59,409
could do or maybe it will become the

2258
02:08:55,600 --> 02:09:00,910
Linux default API I don't know but but

2259
02:08:59,409 --> 02:09:12,250
yeah it doesn't serve much of a purpose

2260
02:09:00,909 --> 02:09:13,619
at this point I mean memory cache misses

2261
02:09:12,250 --> 02:09:19,930
[Music]

2262
02:09:13,619 --> 02:09:22,359
okay so memory cache misses that's a

2263
02:09:19,930 --> 02:09:24,460
very broad topic I hate to keep asking

2264
02:09:22,359 --> 02:09:26,199
to be more specific but what kind of

2265
02:09:24,460 --> 02:09:30,250
memory cache misses are you interested

2266
02:09:26,199 --> 02:09:32,500
in hearing about like what prompted you

2267
02:09:30,250 --> 02:09:33,850
to ask about memory cache misses disturb

2268
02:09:32,500 --> 02:09:36,279
was there something specific or you just

2269
02:09:33,850 --> 02:09:40,240
mean in general what is the memory cache

2270
02:09:36,279 --> 02:09:42,519
miss you he what steps are you going to

2271
02:09:40,239 --> 02:09:47,739
do to optimize the render so primarily

2272
02:09:42,520 --> 02:09:51,280
the main thing we we need to do is we

2273
02:09:47,739 --> 02:09:53,439
need to coalesce our textures into

2274
02:09:51,279 --> 02:09:57,819
texture arrays so they can be switched

2275
02:09:53,439 --> 02:10:01,210
quickly that's our number one thing the

2276
02:09:57,819 --> 02:10:05,039
number two thing is to finalize our

2277
02:10:01,210 --> 02:10:08,439
lighting and make a simpler lighting and

2278
02:10:05,039 --> 02:10:10,750
make it so we do less lighting ops

2279
02:10:08,439 --> 02:10:14,379
the shader as well so those are the two

2280
02:10:10,750 --> 02:10:16,448
things that need to happen before the

2281
02:10:14,380 --> 02:10:18,460
renderer would be like a shipping thing

2282
02:10:16,448 --> 02:10:21,089
that that you'd be like okay you know

2283
02:10:18,460 --> 02:10:21,090
this is okay

2284
02:10:21,750 --> 02:10:25,390
accidental rebel I'm making das games

2285
02:10:23,890 --> 02:10:27,460
for fun do you have experience making

2286
02:10:25,390 --> 02:10:30,430
games during the Dussehra a little bit

2287
02:10:27,460 --> 02:10:35,590
but I was still during the Dussehra I

2288
02:10:30,430 --> 02:10:37,449
was still in high school I I didn't

2289
02:10:35,590 --> 02:10:42,360
actually make it into the industry until

2290
02:10:37,448 --> 02:10:48,429
after dusk games had kind of ended and

2291
02:10:42,359 --> 02:10:51,009
so as far as as far as ever working

2292
02:10:48,430 --> 02:10:56,070
professionally on one no but I have done

2293
02:10:51,010 --> 02:11:00,659
das you know mode X programming in DOS

2294
02:10:56,069 --> 02:11:00,659
as a hobby when I was little

2295
02:11:09,988 --> 02:11:15,178
ah okay okay okay now we've got it

2296
02:11:13,590 --> 02:11:17,069
sorry I'll rephrase it is there a

2297
02:11:15,179 --> 02:11:19,170
function that tells you how many L 1 l 2

2298
02:11:17,069 --> 02:11:20,399
etcetera cache misses happened since for

2299
02:11:19,170 --> 02:11:26,099
example the last time you call the

2300
02:11:20,399 --> 02:11:31,229
function yes the problem if I recall and

2301
02:11:26,099 --> 02:11:33,029
I don't think this ever got fixed so

2302
02:11:31,229 --> 02:11:34,169
somebody jump in and correct me if I'm

2303
02:11:33,029 --> 02:11:37,349
wrong here because it may be that they

2304
02:11:34,170 --> 02:11:40,219
fixed it eventually the problem is that

2305
02:11:37,349 --> 02:11:44,340
you can't do it without a device driver

2306
02:11:40,219 --> 02:11:46,980
so there are they're built into the CPU

2307
02:11:44,340 --> 02:11:50,190
they're called performance counters they

2308
02:11:46,979 --> 02:11:54,509
can tell you those things you can't

2309
02:11:50,189 --> 02:12:00,359
access them without ring zero assistance

2310
02:11:54,510 --> 02:12:03,360
I believe so for example in handmade

2311
02:12:00,359 --> 02:12:08,848
hero we have a built-in profiler right

2312
02:12:03,359 --> 02:12:15,988
like if we let's say we build in in

2313
02:12:08,849 --> 02:12:21,659
optimized mode and I run the game oops

2314
02:12:15,988 --> 02:12:23,308
here's the game if I run the game you

2315
02:12:21,658 --> 02:12:25,049
can see in this profile we got all this

2316
02:12:23,309 --> 02:12:27,829
information saying like how many cycles

2317
02:12:25,050 --> 02:12:30,630
we spent in different things right

2318
02:12:27,828 --> 02:12:34,319
we're getting that from the call our

2319
02:12:30,630 --> 02:12:38,248
DTSC read time stamp counter which is a

2320
02:12:34,319 --> 02:12:41,279
cpu performance register that you use to

2321
02:12:38,248 --> 02:12:46,260
figure out how many roughly instructions

2322
02:12:41,279 --> 02:12:50,788
it has issued right not instructions how

2323
02:12:46,260 --> 02:12:52,590
many cycles it has issued it's it's a

2324
02:12:50,788 --> 02:12:54,868
whole ball of wax to say what that

2325
02:12:52,590 --> 02:12:56,670
number actually means but it's related

2326
02:12:54,868 --> 02:12:59,518
to how many instructions got issued in a

2327
02:12:56,670 --> 02:13:00,899
certain sense although you can issue

2328
02:12:59,519 --> 02:13:02,340
multiple instructions on a cycle and

2329
02:13:00,899 --> 02:13:04,379
they're not really measuring cycles

2330
02:13:02,340 --> 02:13:07,288
because of speed step and bla bla bla

2331
02:13:04,380 --> 02:13:08,519
bla bla so are DTSC hard to explain

2332
02:13:07,288 --> 02:13:11,189
exactly what it's measuring and it

2333
02:13:08,519 --> 02:13:12,300
depends on the chip but it's effectively

2334
02:13:11,189 --> 02:13:15,178
a performance counter that tells you

2335
02:13:12,300 --> 02:13:17,579
about how many cycles elapsed since the

2336
02:13:15,179 --> 02:13:19,319
last time you called it there exists

2337
02:13:17,578 --> 02:13:21,538
similar performance counters set up

2338
02:13:19,319 --> 02:13:23,939
things you can do where you can ask the

2339
02:13:21,538 --> 02:13:27,059
chip to count things like l2 cache mates

2340
02:13:23,939 --> 02:13:30,089
is much like you can ask it how to count

2341
02:13:27,060 --> 02:13:33,120
cycles retired to the best of my

2342
02:13:30,090 --> 02:13:36,119
knowledge you can't call them without a

2343
02:13:33,119 --> 02:13:39,599
device driver so what people often do is

2344
02:13:36,119 --> 02:13:41,309
you can install something you don't have

2345
02:13:39,600 --> 02:13:43,440
to write the device driver yourself you

2346
02:13:41,310 --> 02:13:45,660
can install someone else's device driver

2347
02:13:43,439 --> 02:13:48,179
that will access this information for

2348
02:13:45,659 --> 02:13:50,189
you so for example Intel ships a program

2349
02:13:48,180 --> 02:13:53,159
called vtune that does this you probably

2350
02:13:50,189 --> 02:13:54,479
have heard of it's got device drivers

2351
02:13:53,159 --> 02:13:58,260
that will get that information for you

2352
02:13:54,479 --> 02:14:01,919
there's probably others I just don't

2353
02:13:58,260 --> 02:14:03,449
know what they all are when you actually

2354
02:14:01,920 --> 02:14:05,010
care about this most is usually on

2355
02:14:03,448 --> 02:14:05,399
things like Playstation and stuff like

2356
02:14:05,010 --> 02:14:07,619
that

2357
02:14:05,399 --> 02:14:10,259
and there that you just get access to

2358
02:14:07,619 --> 02:14:12,630
them they are provided as part of the

2359
02:14:10,260 --> 02:14:14,010
default system software there for

2360
02:14:12,630 --> 02:14:19,029
obvious reasons right because everyone

2361
02:14:14,010 --> 02:14:21,320
wants to use it on the PC I don't know

2362
02:14:19,029 --> 02:14:23,969
[Music]

2363
02:14:21,319 --> 02:14:25,679
you know Windows 10 or the windows

2364
02:14:23,969 --> 02:14:27,210
performance counters might allow you to

2365
02:14:25,680 --> 02:14:28,890
get those I've never tried to get them

2366
02:14:27,210 --> 02:14:32,340
that way you might be able to get it out

2367
02:14:28,890 --> 02:14:34,199
through that but yeah so the answer to

2368
02:14:32,340 --> 02:14:36,869
your question though broadly speaking is

2369
02:14:34,198 --> 02:14:39,059
yes you absolutely can get that data no

2370
02:14:36,869 --> 02:14:42,000
unfortunately it's not as simple as just

2371
02:14:39,060 --> 02:14:44,250
issuing an AR DTSC like we do but you

2372
02:14:42,000 --> 02:14:54,029
can do it you just have to go a like

2373
02:14:44,250 --> 02:14:55,469
slightly more a roundabout way after

2374
02:14:54,029 --> 02:14:56,939
ending up with the render apart which do

2375
02:14:55,469 --> 02:15:00,090
you think is the next Mac recep Mohamad

2376
02:14:56,939 --> 02:15:03,448
hero going through in like decorating

2377
02:15:00,090 --> 02:15:07,409
the world right like putting in like

2378
02:15:03,448 --> 02:15:11,029
grass and changing like walls depending

2379
02:15:07,409 --> 02:15:11,029
on what rooms are in and stuff like that

2380
02:15:12,170 --> 02:15:20,969
do you ever see Linux as a consumer

2381
02:15:14,460 --> 02:15:24,920
machine not really I could see something

2382
02:15:20,969 --> 02:15:24,920
like the steam like let's say steam

2383
02:15:26,060 --> 02:15:31,050
valve got serious about steam box and

2384
02:15:28,770 --> 02:15:33,510
shipped like a dedicated steam box like

2385
02:15:31,050 --> 02:15:35,760
this is the steam box not multi-vendor

2386
02:15:33,510 --> 02:15:37,670
like we actually just packaged it I

2387
02:15:35,760 --> 02:15:41,119
could see that working

2388
02:15:37,670 --> 02:15:43,279
a dedicated known hardware configuration

2389
02:15:41,119 --> 02:15:44,960
with a specifically optimized version of

2390
02:15:43,279 --> 02:15:46,909
Linux that targets only that hardware

2391
02:15:44,960 --> 02:15:50,649
and it's optimized to run it and runs it

2392
02:15:46,909 --> 02:15:59,119
reliably with a custom UI on top like

2393
02:15:50,649 --> 02:16:01,159
big picture or something could work and

2394
02:15:59,119 --> 02:16:03,920
Martin's mentions that on Linux that you

2395
02:16:01,159 --> 02:16:06,559
can get those l1 l2 cache things with

2396
02:16:03,920 --> 02:16:08,690
the perf utility yeah I don't know

2397
02:16:06,560 --> 02:16:09,949
anything about that I'll take your word

2398
02:16:08,689 --> 02:16:11,750
for it it's the kind of thing I would

2399
02:16:09,948 --> 02:16:14,299
have expected to be able to get on Linux

2400
02:16:11,750 --> 02:16:17,988
so that's cool that they avoid it I said

2401
02:16:14,300 --> 02:16:24,320
that they provide it I just don't know

2402
02:16:17,988 --> 02:16:26,509
of anything similar on Windows I mean I

2403
02:16:24,319 --> 02:16:27,859
shouldn't say that I don't know of any

2404
02:16:26,510 --> 02:16:30,770
way to get it on Windows without

2405
02:16:27,859 --> 02:16:40,218
installing the device drivers of some

2406
02:16:30,770 --> 02:16:41,719
kind right and you know there's multiple

2407
02:16:40,218 --> 02:16:43,669
ways of getting that device driver but

2408
02:16:41,718 --> 02:16:45,138
as far as I know you have to do that

2409
02:16:43,670 --> 02:16:47,920
it's cool that Linux doesn't force you

2410
02:16:45,138 --> 02:16:47,920
to do that right

2411
02:17:02,350 --> 02:17:06,309
alright let's wrap it up

2412
02:17:13,179 --> 02:17:16,620
close these things down here

2413
02:17:25,739 --> 02:17:29,340
there yeah all right thank you everyone

2414
02:17:28,290 --> 02:17:30,300
for joining me for the epicenter

2415
02:17:29,340 --> 02:17:32,280
handmade hero it sort of pleasure

2416
02:17:30,299 --> 02:17:33,359
coating with you as always if you want

2417
02:17:32,280 --> 02:17:34,530
to follow on the series at home you

2418
02:17:33,360 --> 02:17:36,030
could always prepare to the game on hand

2419
02:17:34,530 --> 02:17:39,829
made here at org and it comes with a

2420
02:17:36,030 --> 02:17:42,900
source code so you can follow along and

2421
02:17:39,829 --> 02:17:44,760
try experiments yourself maybe you want

2422
02:17:42,899 --> 02:17:48,539
to try optimizing the renderer to use

2423
02:17:44,760 --> 02:17:52,680
texture rays before I do you've got the

2424
02:17:48,540 --> 02:17:54,900
option to do it right a couple of things

2425
02:17:52,680 --> 02:17:56,130
to note we have a watch page on the hand

2426
02:17:54,899 --> 02:17:58,680
meter a page that allows you to watch

2427
02:17:56,129 --> 02:18:00,269
the series it's got a window that'll

2428
02:17:58,680 --> 02:18:01,739
show this three months live and show the

2429
02:18:00,270 --> 02:18:03,690
schedule when it's not so you know when

2430
02:18:01,739 --> 02:18:04,920
it will be live it's also got the

2431
02:18:03,690 --> 02:18:06,420
episode guide on there so you can catch

2432
02:18:04,920 --> 02:18:07,920
up on past series it's pretty cool you

2433
02:18:06,420 --> 02:18:09,149
can just type in anything you want to

2434
02:18:07,920 --> 02:18:10,860
search for it'll search for all the

2435
02:18:09,149 --> 02:18:11,940
episodes and you can jump right to the

2436
02:18:10,860 --> 02:18:13,530
part of the episode where I talked about

2437
02:18:11,940 --> 02:18:15,300
it it's a pretty awesome feature

2438
02:18:13,530 --> 02:18:16,680
and of course we have the hand made fund

2439
02:18:15,299 --> 02:18:19,199
if you want to contribute to that which

2440
02:18:16,680 --> 02:18:23,579
is what supports work that people do

2441
02:18:19,200 --> 02:18:25,590
like that like that watch pages episode

2442
02:18:23,579 --> 02:18:28,559
guide which wouldn't be possible without

2443
02:18:25,590 --> 02:18:29,670
it also obviously if you just want to

2444
02:18:28,559 --> 02:18:32,309
check out what we're doing it hit at

2445
02:18:29,670 --> 02:18:33,780
Mali rocket you can always join our

2446
02:18:32,309 --> 02:18:35,129
mailing list here and you got the little

2447
02:18:33,780 --> 02:18:36,870
hand made here ahead you can click on

2448
02:18:35,129 --> 02:18:39,389
which brings you to all of our other

2449
02:18:36,870 --> 02:18:41,160
pages my blog as well and and all that

2450
02:18:39,389 --> 02:18:44,489
kind of good stuff so check that out

2451
02:18:41,159 --> 02:18:47,489
when you get a chance that's about it I

2452
02:18:44,489 --> 02:18:48,899
will be back fry well I don't know if

2453
02:18:47,489 --> 02:18:52,079
they'll be back next week I may have to

2454
02:18:48,899 --> 02:18:53,549
take next weekend off in fact it's

2455
02:18:52,079 --> 02:18:55,889
highly likely I think that I will have

2456
02:18:53,549 --> 02:18:57,719
to for other reasons so check the

2457
02:18:55,889 --> 02:19:00,029
schedule page we'll see when I'll be

2458
02:18:57,719 --> 02:19:01,889
back maybe the week after that or in

2459
02:19:00,030 --> 02:19:03,180
three weeks time we'll see so there

2460
02:19:01,889 --> 02:19:06,959
might be a brief little mini

2461
02:19:03,180 --> 02:19:08,940
back-to-school vacation but until then

2462
02:19:06,959 --> 02:19:14,609
whenever it is it'll be a couple weeks

2463
02:19:08,940 --> 02:19:16,140
from now at most hopefully everyone can

2464
02:19:14,610 --> 02:19:18,390
find some interesting program to do in

2465
02:19:16,139 --> 02:19:19,590
the meantime and until then I will see

2466
02:19:18,389 --> 02:19:21,979
everyone on the Internet so take it easy

2467
02:19:19,590 --> 02:19:21,979
everybody

