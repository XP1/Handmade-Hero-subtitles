1
00:00:02,448 --> 00:00:06,838
hello everyone and welcome to handmade

2
00:00:04,799 --> 00:00:10,019
Hero show recode a complete game live on

3
00:00:06,839 --> 00:00:11,759
stream we are well you know honestly

4
00:00:10,019 --> 00:00:15,150
don't really know what we are at the

5
00:00:11,759 --> 00:00:18,329
moment we have our lighting actually

6
00:00:15,150 --> 00:00:21,089
working and I think mostly what we need

7
00:00:18,329 --> 00:00:23,070
to do now is tune the lighting to make

8
00:00:21,089 --> 00:00:25,980
sure that we're getting reasonable

9
00:00:23,070 --> 00:00:27,839
results for what we want and then after

10
00:00:25,980 --> 00:00:30,750
that we just have to optimize it now we

11
00:00:27,839 --> 00:00:31,800
could also just optimize it now and the

12
00:00:30,750 --> 00:00:35,039
reason that I say that is because

13
00:00:31,800 --> 00:00:36,929
looking at the actual profile in terms

14
00:00:35,039 --> 00:00:38,670
of what is slow right now and this is

15
00:00:36,929 --> 00:00:40,829
doing an entire lighting solution as you

16
00:00:38,670 --> 00:00:43,350
can see like actually this entire room

17
00:00:40,829 --> 00:00:45,179
is lit by the actual lights it's not

18
00:00:43,350 --> 00:00:47,219
there's no cheating here so this is

19
00:00:45,179 --> 00:00:50,460
actually spreading throughout the

20
00:00:47,219 --> 00:00:52,320
environment and so on we can't actually

21
00:00:50,460 --> 00:00:54,420
probably do optimization early if we

22
00:00:52,320 --> 00:00:56,399
wanted to and the reason for that is

23
00:00:54,420 --> 00:01:01,469
just that if we look at what our actual

24
00:00:56,399 --> 00:01:04,140
timings sort of announce as far as I can

25
00:01:01,469 --> 00:01:06,239
tell although we do have some we are

26
00:01:04,140 --> 00:01:07,650
spending some significant portions of

27
00:01:06,239 --> 00:01:09,478
time that we probably would want to

28
00:01:07,650 --> 00:01:11,790
optimize in stuff that's specific to the

29
00:01:09,478 --> 00:01:13,709
current lighting scheme actually the

30
00:01:11,790 --> 00:01:15,930
majority of the time is still in the

31
00:01:13,709 --> 00:01:19,139
raycast so we could just optimize our

32
00:01:15,930 --> 00:01:23,368
ray caster and that would probably give

33
00:01:19,140 --> 00:01:25,079
us a you know a large speed increase if

34
00:01:23,368 --> 00:01:27,269
we you know get a little more serious

35
00:01:25,079 --> 00:01:30,810
about that and it doesn't really matter

36
00:01:27,269 --> 00:01:33,629
like it doesn't have much to do with the

37
00:01:30,810 --> 00:01:35,159
actual lighting itself so changes we

38
00:01:33,629 --> 00:01:38,699
made to the lighting wouldn't really be

39
00:01:35,159 --> 00:01:40,259
a big deal at that point now one of the

40
00:01:38,700 --> 00:01:43,680
things that I'm not sure about - in

41
00:01:40,259 --> 00:01:46,349
terms of lighting is we also never

42
00:01:43,680 --> 00:01:49,470
really looked at the the sort of decay

43
00:01:46,349 --> 00:01:55,828
time of the lighting and I think at the

44
00:01:49,469 --> 00:01:57,899
moment it's something like 20 frames ish

45
00:01:55,828 --> 00:01:59,639
I mean it's hard to say exactly what the

46
00:01:57,899 --> 00:02:02,218
frame is because it kind of blends out

47
00:01:59,640 --> 00:02:04,950
over time which is not really a

48
00:02:02,218 --> 00:02:06,899
particularly specific way of thinking

49
00:02:04,950 --> 00:02:12,689
about it but you know right now we're

50
00:02:06,899 --> 00:02:13,810
doing 95 5 blend so I think you know you

51
00:02:12,689 --> 00:02:17,079
could sort of

52
00:02:13,810 --> 00:02:19,270
that over 20 frames you've got a fair

53
00:02:17,080 --> 00:02:21,730
bit of the new lighting in there and

54
00:02:19,270 --> 00:02:23,020
that could certainly get reduced so you

55
00:02:21,729 --> 00:02:26,439
know that could go down to something

56
00:02:23,020 --> 00:02:30,880
like two and still not be horribly laggy

57
00:02:26,439 --> 00:02:32,318
if we wanted to take a look at that I'm

58
00:02:30,879 --> 00:02:35,530
and I'm like I said I'm not really sure

59
00:02:32,318 --> 00:02:38,339
how we want to look at that but the

60
00:02:35,530 --> 00:02:41,140
update voxel call that we have there is

61
00:02:38,340 --> 00:02:43,000
you know where that happens and you can

62
00:02:41,139 --> 00:02:46,208
see that here wheeler pew zhing this T

63
00:02:43,000 --> 00:02:48,549
update blend function and so whatever we

64
00:02:46,209 --> 00:02:49,989
set the solutions T update blend to

65
00:02:48,549 --> 00:02:54,549
that's really what's going to be

66
00:02:49,989 --> 00:02:56,500
determining that that rate so we can set

67
00:02:54,549 --> 00:02:58,540
the T update blend to whatever we want

68
00:02:56,500 --> 00:03:01,780
and so in here oh wow so this was

69
00:02:58,539 --> 00:03:04,150
actually even more so that you know so

70
00:03:01,780 --> 00:03:05,769
it's really a trade-off between response

71
00:03:04,150 --> 00:03:07,629
speed like this is extremely fast

72
00:03:05,769 --> 00:03:09,610
response for an indirect lighting

73
00:03:07,629 --> 00:03:12,340
solution right which is normally updated

74
00:03:09,610 --> 00:03:14,140
pretty slowly and so if we want to you

75
00:03:12,340 --> 00:03:17,530
know that can drop down dramatically so

76
00:03:14,139 --> 00:03:21,969
here's like a really you know much much

77
00:03:17,530 --> 00:03:24,250
deeper and so you can see if we reduce

78
00:03:21,969 --> 00:03:27,159
the blend dramatically you can see how

79
00:03:24,250 --> 00:03:29,560
slow it is to update right like you see

80
00:03:27,159 --> 00:03:33,519
how slow the high light fades from here

81
00:03:29,560 --> 00:03:36,810
to here but as a result you get like no

82
00:03:33,519 --> 00:03:40,329
noise right and so you can control the

83
00:03:36,810 --> 00:03:43,329
difference between the response rate and

84
00:03:40,329 --> 00:03:45,549
the noise pretty easily just with this

85
00:03:43,329 --> 00:03:48,790
parameter and what this parameter should

86
00:03:45,549 --> 00:03:50,769
be we don't know right like I have no

87
00:03:48,789 --> 00:03:54,280
idea what it should be you can see that

88
00:03:50,769 --> 00:03:58,000
it's pretty usable probably you know at

89
00:03:54,280 --> 00:04:01,389
this rate maybe and so it's still not

90
00:03:58,000 --> 00:04:03,009
too bad in terms of light lag but you

91
00:04:01,389 --> 00:04:04,659
still get a little bit of flicker in

92
00:04:03,009 --> 00:04:08,798
there right you can see a little bit of

93
00:04:04,659 --> 00:04:11,079
that flicker as these change and to be

94
00:04:08,799 --> 00:04:13,299
honest I'm not really sure also about

95
00:04:11,079 --> 00:04:15,879
that flicker I don't know if there's

96
00:04:13,299 --> 00:04:18,189
other things we're doing that may lead

97
00:04:15,879 --> 00:04:19,839
to more of that then is necessary as

98
00:04:18,189 --> 00:04:22,689
well like we don't we haven't really

99
00:04:19,839 --> 00:04:24,158
taken a good look at it but you can sort

100
00:04:22,689 --> 00:04:27,500
of see that that you know somewhere

101
00:04:24,158 --> 00:04:29,509
there's a smooth point for our current

102
00:04:27,500 --> 00:04:32,600
scheme and it's somewhere around the

103
00:04:29,509 --> 00:04:37,029
160th it looks like because I can still

104
00:04:32,600 --> 00:04:40,280
see a little bit of flicker here right

105
00:04:37,029 --> 00:04:42,619
so you know in terms of that I don't

106
00:04:40,279 --> 00:04:44,449
know what we want to do there I'm not

107
00:04:42,620 --> 00:04:46,610
sure what the correct trade-off is for

108
00:04:44,449 --> 00:04:47,779
that and casting more rays would also do

109
00:04:46,610 --> 00:04:49,970
it but we don't really probably have the

110
00:04:47,779 --> 00:04:52,250
budget for it but either way it seems

111
00:04:49,970 --> 00:04:54,470
pretty reasonable so at the moment

112
00:04:52,250 --> 00:04:55,939
anyway I'm not sure we really have to

113
00:04:54,470 --> 00:04:58,580
worry about it too much because it seems

114
00:04:55,939 --> 00:05:02,930
pretty good and furthermore like right

115
00:04:58,579 --> 00:05:05,269
now we're not right now we're not really

116
00:05:02,930 --> 00:05:09,829
we don't do anything particularly fancy

117
00:05:05,269 --> 00:05:11,930
in our actual sampling to try and reduce

118
00:05:09,829 --> 00:05:15,379
the amount of noise either like I don't

119
00:05:11,930 --> 00:05:17,240
know very much about sampling theory I

120
00:05:15,379 --> 00:05:18,680
don't spend a lot of time with it and so

121
00:05:17,240 --> 00:05:22,160
it's entirely possible that that could

122
00:05:18,680 --> 00:05:24,740
be improved dramatically as well so I

123
00:05:22,160 --> 00:05:26,150
think we're in ok shape there so then

124
00:05:24,740 --> 00:05:28,970
when we look at the other sorts of

125
00:05:26,149 --> 00:05:31,489
things that I think you know I'm not

126
00:05:28,970 --> 00:05:33,110
sure about at the moment I think you

127
00:05:31,490 --> 00:05:36,978
know some of the biggest stuff is just

128
00:05:33,110 --> 00:05:40,460
oh what is going on there where is all

129
00:05:36,978 --> 00:05:45,800
this light coming from that seems like

130
00:05:40,459 --> 00:05:50,359
kind of a bug doesn't it like how are

131
00:05:45,800 --> 00:05:51,829
these all super bright so that that's

132
00:05:50,360 --> 00:05:53,569
got to be a bug that looks like some

133
00:05:51,829 --> 00:05:55,459
kind of propagation of like a bad value

134
00:05:53,569 --> 00:05:56,659
like how did this all get bright down

135
00:05:55,459 --> 00:05:57,168
here let me see if I can make that

136
00:05:56,660 --> 00:06:00,770
happen again

137
00:05:57,168 --> 00:06:03,228
I wonder if we have some filling bugs

138
00:06:00,769 --> 00:06:06,709
and stuff like that I'm gonna go hop

139
00:06:03,228 --> 00:06:10,490
over there so I feel like really that

140
00:06:06,709 --> 00:06:11,989
you know again just taking stock of it I

141
00:06:10,490 --> 00:06:16,879
think really what we want to do here is

142
00:06:11,990 --> 00:06:19,160
just go and and pick one either you know

143
00:06:16,879 --> 00:06:20,689
optimize the Ray caster which maybe is a

144
00:06:19,160 --> 00:06:23,680
better idea because then it's faster and

145
00:06:20,689 --> 00:06:26,418
we can make better judgments about it oh

146
00:06:23,680 --> 00:06:30,740
I bet I know what happened I bet it was

147
00:06:26,418 --> 00:06:33,620
the I bet the the the voxel movement

148
00:06:30,740 --> 00:06:34,970
yeah you can see it look at that see how

149
00:06:33,620 --> 00:06:36,860
that's propagating weirdly so

150
00:06:34,970 --> 00:06:39,440
something's something's going on weird

151
00:06:36,860 --> 00:06:41,080
down here like the light I mean there's

152
00:06:39,439 --> 00:06:42,610
I didn't even are is there even a lie

153
00:06:41,079 --> 00:06:45,490
in this room I don't know what's oh

154
00:06:42,610 --> 00:06:48,220
there is a light in this room all right

155
00:06:45,490 --> 00:06:50,500
so something about in here like the

156
00:06:48,220 --> 00:06:52,689
lighting is just super bright probably

157
00:06:50,500 --> 00:06:54,550
because it has a ceiling so it can like

158
00:06:52,689 --> 00:06:59,620
reinforce the bounces the bounces don't

159
00:06:54,550 --> 00:07:01,509
escape right yeah so anyway I don't know

160
00:06:59,620 --> 00:07:03,848
which one we want to do let's go ahead

161
00:07:01,509 --> 00:07:05,650
and say like let's take a let's just do

162
00:07:03,848 --> 00:07:07,688
this weekend maybe a performance survey

163
00:07:05,649 --> 00:07:09,728
just do we have an idea of how hard it

164
00:07:07,689 --> 00:07:13,090
would be for us to optimize further from

165
00:07:09,728 --> 00:07:14,860
where we are and then maybe next weekend

166
00:07:13,089 --> 00:07:16,179
and based on that we can decide where

167
00:07:14,860 --> 00:07:18,218
there next weekend we want to try and do

168
00:07:16,180 --> 00:07:20,949
optimization work or whether we want to

169
00:07:18,218 --> 00:07:23,829
do some quality work first and we can

170
00:07:20,949 --> 00:07:25,629
see so again I'm not really sure about

171
00:07:23,829 --> 00:07:29,519
the current performance state of things

172
00:07:25,629 --> 00:07:32,210
and also I'm not really sure about the

173
00:07:29,519 --> 00:07:34,139
when we're doing the Ray casting exactly

174
00:07:32,209 --> 00:07:37,120
[Music]

175
00:07:34,139 --> 00:07:41,110
how we've been centering this this box

176
00:07:37,120 --> 00:07:44,348
right so if you take a look at this you

177
00:07:41,110 --> 00:07:47,468
can see the lighting domain that we are

178
00:07:44,348 --> 00:07:50,459
currently enclosing and you can see that

179
00:07:47,468 --> 00:07:53,949
lighting domain is pretty wide right and

180
00:07:50,459 --> 00:07:55,538
we may not really want it to be quite so

181
00:07:53,949 --> 00:07:58,120
wide like we may want to shrink this

182
00:07:55,538 --> 00:08:01,149
voxel so that the actual span of it

183
00:07:58,120 --> 00:08:02,680
vertically is considerably less and that

184
00:08:01,149 --> 00:08:04,239
might be a good optimization just right

185
00:08:02,680 --> 00:08:06,069
off the bat because it doesn't really

186
00:08:04,240 --> 00:08:10,028
make much sense that we would be doing

187
00:08:06,069 --> 00:08:11,259
this right it's it's just not a

188
00:08:10,028 --> 00:08:13,838
particularly sane thing to be doing

189
00:08:11,259 --> 00:08:15,669
because we don't need to be simulating

190
00:08:13,838 --> 00:08:18,370
this much levels of light in our game

191
00:08:15,668 --> 00:08:20,649
one or two levels up or down should be

192
00:08:18,370 --> 00:08:22,389
plenty and one or two levels you know

193
00:08:20,649 --> 00:08:24,038
when you when you got up to here you're

194
00:08:22,389 --> 00:08:27,250
simulating like the third or fourth

195
00:08:24,038 --> 00:08:30,519
level I guess I don't know how to quite

196
00:08:27,250 --> 00:08:32,559
out deep these are let's take a look I'm

197
00:08:30,519 --> 00:08:35,549
gonna just stack two levels on top of

198
00:08:32,559 --> 00:08:35,549
each other here so I can see

199
00:08:44,438 --> 00:08:50,058
you know we should probably have a

200
00:08:46,100 --> 00:08:59,869
teleport function in this game you would

201
00:08:50,058 --> 00:09:01,909
think all right so here we have let me

202
00:08:59,869 --> 00:09:04,999
see here I'm just gonna zoom out a

203
00:09:01,909 --> 00:09:08,238
little yes you can see like if that's

204
00:09:04,999 --> 00:09:09,589
the stacking rate you know we how many

205
00:09:08,239 --> 00:09:11,028
we really probably only want three

206
00:09:09,589 --> 00:09:13,879
pronounced so this is probably twice as

207
00:09:11,028 --> 00:09:15,919
large as it needs to be so I don't

208
00:09:13,879 --> 00:09:18,199
really know like one of the things we

209
00:09:15,919 --> 00:09:19,278
should get working in debug pretty well

210
00:09:18,198 --> 00:09:21,198
because I think it would it would

211
00:09:19,278 --> 00:09:23,928
actually make sense to ensure that we're

212
00:09:21,198 --> 00:09:27,979
doing it properly is to just take the

213
00:09:23,928 --> 00:09:31,698
light lookup voxel dimensions and split

214
00:09:27,980 --> 00:09:35,360
this out so that we are actually able to

215
00:09:31,698 --> 00:09:39,948
do us more squat like a voxel that's not

216
00:09:35,360 --> 00:09:42,409
as tall as it is wide and well or it's

217
00:09:39,948 --> 00:09:45,708
not as much in Z as it is in x and y you

218
00:09:42,409 --> 00:09:48,198
know what I mean so if I wanted to do

219
00:09:45,708 --> 00:09:50,268
this first I would like to see where

220
00:09:48,198 --> 00:09:52,248
this is actually getting used so I'm

221
00:09:50,269 --> 00:09:54,528
going to go ahead and get rid of those

222
00:09:52,249 --> 00:09:56,989
two and find everywhere that we're still

223
00:09:54,528 --> 00:09:59,178
using them because there's not a lot of

224
00:09:56,989 --> 00:10:01,040
places that we actually are and so I

225
00:09:59,178 --> 00:10:04,999
want to actually just kind of start to

226
00:10:01,039 --> 00:10:08,448
clean that up so here in the light

227
00:10:04,999 --> 00:10:11,209
lookup voxel dim for the the lighting

228
00:10:08,448 --> 00:10:13,868
solution I think that might be a good

229
00:10:11,208 --> 00:10:16,909
place to start getting rid of this right

230
00:10:13,869 --> 00:10:19,220
so we've got the hot dim getting used

231
00:10:16,909 --> 00:10:23,868
here and really we don't I think don't

232
00:10:19,220 --> 00:10:26,629
want to use the hot dim anywhere here if

233
00:10:23,869 --> 00:10:29,509
I recall the Atlas themselves should

234
00:10:26,629 --> 00:10:32,058
actually have the information about the

235
00:10:29,509 --> 00:10:33,769
voxel dim in them so you can see here

236
00:10:32,058 --> 00:10:37,578
that whichever one we're actually

237
00:10:33,769 --> 00:10:39,078
working on we should be able to loop

238
00:10:37,578 --> 00:10:41,628
just over that foxhole

239
00:10:39,078 --> 00:10:42,738
so the speck atlas is really the one

240
00:10:41,629 --> 00:10:47,659
that we're looping over here because

241
00:10:42,739 --> 00:10:50,899
that's the one that we're updating Molly

242
00:10:47,659 --> 00:10:53,110
the cat is currently digging in a pile

243
00:10:50,899 --> 00:10:57,589
of papers

244
00:10:53,110 --> 00:11:06,249
what are you doing being you looking out

245
00:10:57,589 --> 00:11:06,249
there you have my fun what are you doing

246
00:11:06,278 --> 00:11:13,548
she really enjoys a cardboard box full

247
00:11:08,629 --> 00:11:15,438
of papers so the spec atlas here will

248
00:11:13,548 --> 00:11:19,578
give us the information that we need so

249
00:11:15,438 --> 00:11:22,849
the voxel dim Y there and the voxel Jim

250
00:11:19,578 --> 00:11:24,649
X here should give us what we need and

251
00:11:22,850 --> 00:11:28,149
you can see here that we've got the Z

252
00:11:24,649 --> 00:11:31,068
and that's going in in these slices I

253
00:11:28,149 --> 00:11:32,688
think that's actually fine I don't know

254
00:11:31,068 --> 00:11:34,488
if there's anything in particular that

255
00:11:32,688 --> 00:11:38,118
we did here that was weird

256
00:11:34,489 --> 00:11:39,889
and I guess so if you look at the way we

257
00:11:38,119 --> 00:11:41,869
were doing this it looks like we kind of

258
00:11:39,889 --> 00:11:43,579
assumed that we wanted to eventually do

259
00:11:41,869 --> 00:11:45,230
it in the other direction round so you

260
00:11:43,578 --> 00:11:46,578
can see we were passing a voxel X here

261
00:11:45,230 --> 00:11:48,739
and we but yet we had the Z on the

262
00:11:46,578 --> 00:11:50,988
outside so I don't actually know if

263
00:11:48,739 --> 00:11:53,689
there's any real reason we can't just

264
00:11:50,989 --> 00:11:55,249
fix that so at the moment I'm gonna go

265
00:11:53,688 --> 00:11:58,039
ahead and say let's do that so instead

266
00:11:55,249 --> 00:12:02,449
of this being a Z let's just make that

267
00:11:58,039 --> 00:12:05,990
change as well so what that would be is

268
00:12:02,448 --> 00:12:08,599
in here we would say like okay the X is

269
00:12:05,990 --> 00:12:12,350
gonna be the voxel X and then here this

270
00:12:08,600 --> 00:12:14,360
will be a Z and a Y and I and again I

271
00:12:12,350 --> 00:12:16,548
just I don't think there's any reason we

272
00:12:14,360 --> 00:12:19,639
can't do this but we'll find out right

273
00:12:16,548 --> 00:12:21,558
so if that's our iterators so then we

274
00:12:19,639 --> 00:12:24,740
have the Z and the Y here and then we've

275
00:12:21,558 --> 00:12:26,480
got the X here that also allows us to

276
00:12:24,740 --> 00:12:28,548
balance our work a lot more because

277
00:12:26,480 --> 00:12:29,928
before if we were doing Z slices we

278
00:12:28,548 --> 00:12:33,048
would run it I think we would definitely

279
00:12:29,928 --> 00:12:34,068
run into situations where casting would

280
00:12:33,048 --> 00:12:35,600
be occurring out in the middle of

281
00:12:34,068 --> 00:12:37,219
nowhere for no reason and we're already

282
00:12:35,600 --> 00:12:38,659
doing that a lot anyway

283
00:12:37,220 --> 00:12:41,569
but at least here this would minimize

284
00:12:38,659 --> 00:12:43,610
that quite a bit by shrinking the voxel

285
00:12:41,568 --> 00:12:47,178
down and once we do that we don't want

286
00:12:43,610 --> 00:12:49,970
to assign sheets because the sheets will

287
00:12:47,178 --> 00:12:52,129
be unbalanced right like if we start to

288
00:12:49,970 --> 00:12:53,809
detect that were in an area where

289
00:12:52,129 --> 00:12:56,569
there's nothing we could just not do

290
00:12:53,808 --> 00:13:00,048
casts there and when we do that we would

291
00:12:56,568 --> 00:13:01,909
end up with entire like a thread that

292
00:13:00,048 --> 00:13:04,399
like literally had no work to do because

293
00:13:01,909 --> 00:13:05,689
it was in a slice that you know didn't

294
00:13:04,399 --> 00:13:08,750
actually have any any

295
00:13:05,690 --> 00:13:10,430
geometry and or something right so

296
00:13:08,750 --> 00:13:13,909
that's kind of a separate issue but for

297
00:13:10,429 --> 00:13:16,189
the moment like now if we look here this

298
00:13:13,909 --> 00:13:18,769
should rearrange this nicely and then if

299
00:13:16,190 --> 00:13:21,740
we go to the work voxel X stuff so that

300
00:13:18,769 --> 00:13:23,329
we look at where that's actually being

301
00:13:21,740 --> 00:13:26,450
set we can just make sure that that's

302
00:13:23,330 --> 00:13:27,920
correct and so in here where we sign the

303
00:13:26,450 --> 00:13:31,280
work count you can see all this stuff

304
00:13:27,919 --> 00:13:34,490
happening like this with the work count

305
00:13:31,279 --> 00:13:37,429
we want to make that be the spec atlases

306
00:13:34,490 --> 00:13:41,060
so right here we want the spec atlases

307
00:13:37,429 --> 00:13:44,029
voxel dim Z would be the work count and

308
00:13:41,059 --> 00:13:46,369
we would basically assign out for each

309
00:13:44,029 --> 00:13:50,059
slice of the voxel Z we would assign

310
00:13:46,370 --> 00:13:53,029
that to a different thread right now I

311
00:13:50,059 --> 00:13:57,049
don't know we may need to assign I'm

312
00:13:53,029 --> 00:13:59,539
sorry X naught naught C so for each X

313
00:13:57,049 --> 00:14:02,599
you know each like column on the screen

314
00:13:59,539 --> 00:14:03,860
basically we're gonna be sending that to

315
00:14:02,600 --> 00:14:04,909
different thread and again that's

316
00:14:03,860 --> 00:14:06,680
important because if we're starting to

317
00:14:04,909 --> 00:14:08,419
shrink that Z dimension too we don't

318
00:14:06,679 --> 00:14:10,789
want to only able to slice on our lowest

319
00:14:08,419 --> 00:14:12,169
dimension right and we know our X will

320
00:14:10,789 --> 00:14:13,849
always be our widest dimension because

321
00:14:12,169 --> 00:14:17,269
the screen is wider than it is tall and

322
00:14:13,850 --> 00:14:18,320
so on so once we get in here that should

323
00:14:17,269 --> 00:14:19,970
be all we really need to do

324
00:14:18,320 --> 00:14:22,040
unfortunately the speck out the section

325
00:14:19,970 --> 00:14:23,540
gets pulled out here so I should make

326
00:14:22,039 --> 00:14:26,029
sure that we actually do pull it out

327
00:14:23,539 --> 00:14:27,919
here let me just go ahead and pull out

328
00:14:26,029 --> 00:14:30,980
both because they're kind of things you

329
00:14:27,919 --> 00:14:33,559
want generally speaking so I'm gonna go

330
00:14:30,980 --> 00:14:36,440
ahead and do that all right so as we

331
00:14:33,559 --> 00:14:39,019
start to push forward on that let me get

332
00:14:36,440 --> 00:14:43,400
rid of any places refer to that here

333
00:14:39,019 --> 00:14:45,019
okay so here we look at the speck atlas

334
00:14:43,399 --> 00:14:47,120
stuff and we see the signed unsigned

335
00:14:45,019 --> 00:14:49,960
mismatch that should be fine to just

336
00:14:47,120 --> 00:14:53,149
change these two sign that's that's fine

337
00:14:49,960 --> 00:14:56,330
not really an issue let's do it else we

338
00:14:53,149 --> 00:14:58,490
got here we don't care about that so

339
00:14:56,330 --> 00:14:59,870
here where we create the number of works

340
00:14:58,490 --> 00:15:03,110
that we're gonna do here

341
00:14:59,870 --> 00:15:05,509
this memory arena needs to this needs to

342
00:15:03,110 --> 00:15:09,080
push on however many we think we're

343
00:15:05,509 --> 00:15:12,319
going to have for like the X so I would

344
00:15:09,080 --> 00:15:14,300
maybe make so what I would suggest is

345
00:15:12,320 --> 00:15:16,879
this should probably turned into like a

346
00:15:14,299 --> 00:15:19,069
max kind of thing so here I would say

347
00:15:16,879 --> 00:15:19,340
this should be like a max like light

348
00:15:19,070 --> 00:15:22,760
look

349
00:15:19,340 --> 00:15:25,160
Fox will dim so like look we know will

350
00:15:22,759 --> 00:15:27,259
never allow more than a 64 or something

351
00:15:25,159 --> 00:15:29,029
or whatever I mean I don't whatever you

352
00:15:27,259 --> 00:15:31,519
know whatever we want and that's for

353
00:15:29,029 --> 00:15:33,019
people who want to create sort of static

354
00:15:31,519 --> 00:15:34,759
known buffers they don't have to

355
00:15:33,019 --> 00:15:35,840
delegate them dynamically or do anything

356
00:15:34,759 --> 00:15:38,090
else weird like that although I suppose

357
00:15:35,840 --> 00:15:44,720
in this case there's really no needs

358
00:15:38,090 --> 00:15:46,460
reason not to look you could just use

359
00:15:44,720 --> 00:16:05,450
the frame arena for this so I'm gonna

360
00:15:46,460 --> 00:16:07,370
put to do here because we could use a

361
00:16:05,450 --> 00:16:08,990
temporary arena or the per frame arena

362
00:16:07,370 --> 00:16:10,279
like we have sources of memory we could

363
00:16:08,990 --> 00:16:11,389
just use for this and that just get

364
00:16:10,279 --> 00:16:12,289
flushed at the end of the frame we don't

365
00:16:11,389 --> 00:16:13,639
even have to clean them up we don't

366
00:16:12,289 --> 00:16:16,819
think about it so it would be trivial

367
00:16:13,639 --> 00:16:18,230
for us to do that so this is probably

368
00:16:16,820 --> 00:16:20,810
not really necessary and maybe we should

369
00:16:18,230 --> 00:16:22,340
just get rid of it it's fine for now but

370
00:16:20,809 --> 00:16:24,500
I'm gonna put it to do in there cuz it's

371
00:16:22,340 --> 00:16:25,700
like I don't really know if we should

372
00:16:24,500 --> 00:16:27,139
bother with that and then we wouldn't

373
00:16:25,700 --> 00:16:30,530
have to define this and it would just

374
00:16:27,139 --> 00:16:31,870
make the code you know simpler right it

375
00:16:30,529 --> 00:16:34,789
doesn't have this other dependency

376
00:16:31,870 --> 00:16:37,549
alright so anyway but that's fine

377
00:16:34,789 --> 00:16:38,929
so moving through here those are ones we

378
00:16:37,549 --> 00:16:41,870
don't care at the moment that's when we

379
00:16:38,929 --> 00:16:44,569
want to fix here we've got I think it's

380
00:16:41,870 --> 00:16:47,060
just what spec atlas and diffuse atlas

381
00:16:44,570 --> 00:16:50,750
right yeah so let me just go ahead and

382
00:16:47,059 --> 00:16:52,609
shorten those names and there we go

383
00:16:50,750 --> 00:16:55,610
so now I think we're down to just the

384
00:16:52,610 --> 00:16:57,740
iterator and then the part here where

385
00:16:55,610 --> 00:17:02,180
the Z biased program sends down what the

386
00:16:57,740 --> 00:17:05,089
voxel DIMM actually is going to be and I

387
00:17:02,179 --> 00:17:06,349
think for that that should be pretty

388
00:17:05,089 --> 00:17:08,089
straightforward because it's just a

389
00:17:06,349 --> 00:17:09,319
compile time and this one here is where

390
00:17:08,089 --> 00:17:11,958
it will actually specify it so the only

391
00:17:09,319 --> 00:17:14,869
one we really have left to deal with

392
00:17:11,959 --> 00:17:17,750
outside of the rent the opengl layer is

393
00:17:14,869 --> 00:17:20,089
this one and what you can see here is

394
00:17:17,750 --> 00:17:23,209
really this one is just used to compute

395
00:17:20,089 --> 00:17:25,669
the hot the inverse hot dim which let's

396
00:17:23,209 --> 00:17:29,180
just check out where those are being

397
00:17:25,670 --> 00:17:31,960
used so inverse hot dim here i guess is

398
00:17:29,180 --> 00:17:35,769
not even used is that correct

399
00:17:31,960 --> 00:17:40,470
that's correct so it's really only the

400
00:17:35,769 --> 00:17:45,788
hot dip and that's only used for the

401
00:17:40,470 --> 00:17:47,740
entropy index so I guess we don't really

402
00:17:45,788 --> 00:17:50,048
super care about this even a little bit

403
00:17:47,740 --> 00:17:52,808
that feature is that like that's just

404
00:17:50,048 --> 00:17:54,628
not really used so the entropy index

405
00:17:52,808 --> 00:18:03,490
here I suppose

406
00:17:54,628 --> 00:18:05,498
hmm so I suppose we can just maybe do I

407
00:18:03,490 --> 00:18:07,778
mean I don't really know how we want to

408
00:18:05,499 --> 00:18:09,819
do this but it seems like the most

409
00:18:07,778 --> 00:18:11,589
straightforward way would just be to sum

410
00:18:09,819 --> 00:18:13,628
it up and not actually use the hot team

411
00:18:11,589 --> 00:18:16,388
here at all so we would just say like

412
00:18:13,628 --> 00:18:20,678
you know and I could just do this too I

413
00:18:16,388 --> 00:18:21,878
could say voxel DIMM equals spec Atlas

414
00:18:20,679 --> 00:18:26,259
that way we know what we're dealing with

415
00:18:21,878 --> 00:18:28,509
here delete this and then the Z Y and X

416
00:18:26,259 --> 00:18:30,878
those would just be voxel dibbsy voxel

417
00:18:28,509 --> 00:18:33,610
did Y and to compute the entropy we

418
00:18:30,878 --> 00:18:44,490
would just say well I guess it would be

419
00:18:33,609 --> 00:18:44,490
like you know plus X Y times voxel dim X

420
00:18:45,058 --> 00:18:53,740
Z times voxel dim x times voxel dim Y so

421
00:18:51,819 --> 00:18:57,038
just basically computing like a stable

422
00:18:53,740 --> 00:18:58,929
value there I guess I'm not really sure

423
00:18:57,038 --> 00:19:06,669
and also the sample point entropy part

424
00:18:58,929 --> 00:19:08,679
here I don't know I'll be honest since

425
00:19:06,669 --> 00:19:10,269
that comes off of the work I don't know

426
00:19:08,679 --> 00:19:14,710
why we should just make this be

427
00:19:10,269 --> 00:19:16,028
something that probably I don't even

428
00:19:14,710 --> 00:19:16,929
know if we want to do this way this

429
00:19:16,028 --> 00:19:21,808
could just be something that gets

430
00:19:16,929 --> 00:19:21,809
incremented really I mean can't it be

431
00:19:23,249 --> 00:19:29,129
like where's that even happening the

432
00:19:26,528 --> 00:19:32,609
entropy index itself

433
00:19:29,128 --> 00:19:32,609
could just do this

434
00:19:35,269 --> 00:19:49,229
where we just increment each time we

435
00:19:48,148 --> 00:19:50,728
could think about that a little bit

436
00:19:49,229 --> 00:19:51,899
later but at the moment I don't even

437
00:19:50,729 --> 00:19:54,210
know that we need to bother with any of

438
00:19:51,898 --> 00:19:55,558
that stuff so we'll have to look at how

439
00:19:54,210 --> 00:19:57,950
we want to get our entropy source there

440
00:19:55,558 --> 00:20:01,229
but for now that's probably fine

441
00:19:57,950 --> 00:20:04,379
all right so taking a look at the rest

442
00:20:01,229 --> 00:20:06,538
of this stuff where we've got the

443
00:20:04,378 --> 00:20:08,488
because I mean really this this might

444
00:20:06,538 --> 00:20:09,898
want to add something else I guess is

445
00:20:08,489 --> 00:20:11,999
what I'm saying like you know we might

446
00:20:09,898 --> 00:20:15,709
want to do something like you know you

447
00:20:11,999 --> 00:20:17,999
know that right I mean I don't know but

448
00:20:15,710 --> 00:20:20,669
we might want to strive through the

449
00:20:17,999 --> 00:20:22,588
thing in a weird way because the other

450
00:20:20,669 --> 00:20:24,210
things are gonna be incrementing

451
00:20:22,588 --> 00:20:26,460
directly so we may want this to like

452
00:20:24,210 --> 00:20:28,379
wrap in some weird way I don't know

453
00:20:26,460 --> 00:20:31,288
right we will probably want to do

454
00:20:28,378 --> 00:20:32,759
something saner there eventually but it

455
00:20:31,288 --> 00:20:36,690
doesn't need to be based on the voxel in

456
00:20:32,759 --> 00:20:39,088
a particular way so we're down to just

457
00:20:36,690 --> 00:20:40,409
this part of the code now where we're

458
00:20:39,088 --> 00:20:41,638
going to do the compile Z bias program

459
00:20:40,409 --> 00:20:44,609
and in order to compile the Z bias

460
00:20:41,638 --> 00:20:47,008
program we do need to know what the

461
00:20:44,608 --> 00:20:48,478
voxel dimensions are and furthermore we

462
00:20:47,009 --> 00:20:51,149
need to update this piece of code to

463
00:20:48,479 --> 00:20:54,419
actually be correct and think about what

464
00:20:51,148 --> 00:20:55,888
the voxel addressing is now because I

465
00:20:54,419 --> 00:20:59,249
believe this was like the last piece of

466
00:20:55,888 --> 00:21:01,108
code we had that was still we didn't

467
00:20:59,249 --> 00:21:03,960
ever write it to use a full

468
00:21:01,108 --> 00:21:05,728
three-dimensional voxel dimension set so

469
00:21:03,960 --> 00:21:07,319
if you look at what happens inside it

470
00:21:05,729 --> 00:21:10,769
you can see that it's got like just

471
00:21:07,319 --> 00:21:15,298
voxel dim times voxel dim in various

472
00:21:10,769 --> 00:21:18,179
places I think well no it doesn't take

473
00:21:15,298 --> 00:21:20,668
that back it looks like actually it's

474
00:21:18,179 --> 00:21:23,159
pretty sane so we should actually be

475
00:21:20,669 --> 00:21:26,879
able to just yeah I think we should be

476
00:21:23,159 --> 00:21:29,460
able to just fix these by using

477
00:21:26,878 --> 00:21:31,459
whichever ones yeah so I mean there's a

478
00:21:29,460 --> 00:21:34,619
couple of places like here for example

479
00:21:31,460 --> 00:21:38,088
to me that we're gonna have to fix it

480
00:21:34,618 --> 00:21:38,088
but it's actually not that bad

481
00:21:41,440 --> 00:21:46,430
interesting so I think if light lookup

482
00:21:44,420 --> 00:21:48,560
voxel Jim just got a little more savvy

483
00:21:46,430 --> 00:21:51,200
and we actually made light lookup voxels

484
00:21:48,559 --> 00:21:54,019
been dim B of v3 that's really all we

485
00:21:51,200 --> 00:21:56,779
need to do here so if we take a look at

486
00:21:54,019 --> 00:21:58,549
that so light lookup voxel Jim here is

487
00:21:56,779 --> 00:22:01,039
actually not going to be a percent u

488
00:21:58,549 --> 00:22:03,169
it's gonna be like a v3 with a percent

489
00:22:01,039 --> 00:22:05,869
you present U and a percent u right and

490
00:22:03,170 --> 00:22:09,550
furthermore it might actually be a

491
00:22:05,869 --> 00:22:11,719
percent F in this case I don't know I

492
00:22:09,549 --> 00:22:12,859
mean I guess it's not gonna be pretend F

493
00:22:11,720 --> 00:22:14,630
because it's never gonna be that value

494
00:22:12,859 --> 00:22:16,009
but this right here is probably not a v3

495
00:22:14,630 --> 00:22:18,050
s probably a v3

496
00:22:16,009 --> 00:22:22,700
because it's probably it's only ever

497
00:22:18,049 --> 00:22:25,759
really going to be used for the for

498
00:22:22,700 --> 00:22:27,470
multiplying things out by like I don't

499
00:22:25,759 --> 00:22:29,269
think it's ever really used for any kind

500
00:22:27,470 --> 00:22:30,920
of indexing where we have to have those

501
00:22:29,269 --> 00:22:34,039
be integers I could be wrong about that

502
00:22:30,920 --> 00:22:37,370
but we'll see in a second so I'm gonna

503
00:22:34,039 --> 00:22:40,309
pass the voxel dim in here and then I'm

504
00:22:37,369 --> 00:22:42,859
just gonna literally write it out so

505
00:22:40,309 --> 00:22:44,899
voxel de max voxel Dan why voxel dem Z

506
00:22:42,859 --> 00:22:49,189
so now the light look up voxel dam is

507
00:22:44,900 --> 00:22:51,800
actually a three-wide value and so

508
00:22:49,190 --> 00:22:54,289
wherever we have voxel dim in here in

509
00:22:51,799 --> 00:22:59,599
the future we can we can come up with it

510
00:22:54,289 --> 00:23:00,799
right alright so yeah we probably want

511
00:22:59,599 --> 00:23:02,359
to clean up this shader at some point

512
00:23:00,799 --> 00:23:03,589
cuz there's so much old cruft in here

513
00:23:02,359 --> 00:23:05,059
but we'll do that when we actually do

514
00:23:03,589 --> 00:23:15,199
the quality I'm not going to do that for

515
00:23:05,059 --> 00:23:17,119
now so in here you can see us well wait

516
00:23:15,200 --> 00:23:23,450
a minute am I looking at the right thing

517
00:23:17,119 --> 00:23:26,809
here why is that Oh cuz that's the

518
00:23:23,450 --> 00:23:28,370
exterior okay that's fine so when we

519
00:23:26,809 --> 00:23:30,589
look in here basically this is being

520
00:23:28,369 --> 00:23:33,259
computed based on the dimensions and so

521
00:23:30,589 --> 00:23:35,659
you can kind of see like the Y value

522
00:23:33,259 --> 00:23:37,849
that we're looking up is the inverse of

523
00:23:35,660 --> 00:23:40,490
the voxel dim but this is actually now

524
00:23:37,849 --> 00:23:41,839
just going to be the Z and when we look

525
00:23:40,490 --> 00:23:43,609
at this one we're now gonna have to use

526
00:23:41,839 --> 00:23:46,509
the X and the y right because those were

527
00:23:43,609 --> 00:23:49,909
the the sizes we were computing there

528
00:23:46,509 --> 00:23:53,750
we're for an X Y sheet and just the Z

529
00:23:49,910 --> 00:23:56,210
count right so that's really

530
00:23:53,750 --> 00:23:57,740
all we should have to do there for the

531
00:23:56,210 --> 00:23:59,690
rest of them we just have to look at who

532
00:23:57,740 --> 00:24:03,319
is actually being operating here it

533
00:23:59,690 --> 00:24:05,660
looks like again here we're really using

534
00:24:03,319 --> 00:24:07,279
the same values over and over so I feel

535
00:24:05,660 --> 00:24:09,740
like we should be able to just pre

536
00:24:07,279 --> 00:24:11,690
compute these so it feels to me like we

537
00:24:09,740 --> 00:24:16,069
should be able to say look we've got the

538
00:24:11,690 --> 00:24:19,370
like XY sheet and then we've got the the

539
00:24:16,069 --> 00:24:24,129
Z sheet sizes or maybe like X Y stride

540
00:24:19,369 --> 00:24:26,869
and z stride something like that and

541
00:24:24,130 --> 00:24:31,300
these values once we compute them we use

542
00:24:26,869 --> 00:24:31,299
them in a lot of places so we just need

543
00:24:31,329 --> 00:24:39,349
the voxi stride value here and the vox

544
00:24:34,940 --> 00:24:43,610
XY stride value here and that's really

545
00:24:39,349 --> 00:24:46,159
it I think right so this is like a buxom

546
00:24:43,609 --> 00:24:49,250
squared that's the vox XY stride i'd

547
00:24:46,160 --> 00:24:52,009
want to say again because you're going

548
00:24:49,250 --> 00:24:55,160
sort of across the voxel and then this

549
00:24:52,009 --> 00:24:57,289
one is the Vox Z stride here because

550
00:24:55,160 --> 00:25:01,220
again you're going down the voxel same

551
00:24:57,289 --> 00:25:11,859
is true here I think so this is Vox XY

552
00:25:01,220 --> 00:25:15,110
stride and this is Vox z stride and

553
00:25:11,859 --> 00:25:17,629
that's really all it gets used for in

554
00:25:15,109 --> 00:25:21,740
here we then have one more in here where

555
00:25:17,630 --> 00:25:28,930
we're saying the light lookup voxel dim

556
00:25:21,740 --> 00:25:28,930
Y plus the x times the exterior dim so

557
00:25:35,369 --> 00:25:51,109
so producing the center it looks like

558
00:25:44,960 --> 00:25:53,490
well I'm not sure to produce the

559
00:25:51,109 --> 00:25:56,009
x-coordinate it's multiplying Oh so this

560
00:25:53,490 --> 00:25:58,289
is just the X span of the voxel right

561
00:25:56,009 --> 00:26:00,629
because for each y it has to go one in X

562
00:25:58,289 --> 00:26:04,589
so this is just a light lookup voxel dim

563
00:26:00,630 --> 00:26:11,150
X dimension yeah because for each Y it

564
00:26:04,589 --> 00:26:14,750
has to go one full X you know long right

565
00:26:11,150 --> 00:26:22,080
all right so light lookup voxel dim

566
00:26:14,750 --> 00:26:25,289
where else is it used so just here so to

567
00:26:22,079 --> 00:26:28,069
produce the voxel R in this case this is

568
00:26:25,289 --> 00:26:30,569
going to be one where we take the UVW

569
00:26:28,069 --> 00:26:33,720
and we I guess

570
00:26:30,569 --> 00:26:35,039
blow it out to the like this is the

571
00:26:33,720 --> 00:26:36,779
inverse dim so now we're going to take

572
00:26:35,039 --> 00:26:38,069
the forward dim so that doesn't even

573
00:26:36,779 --> 00:26:40,559
have to change because that's gonna just

574
00:26:38,069 --> 00:26:41,189
be a three-wide multiply now so I think

575
00:26:40,559 --> 00:26:45,389
that's it

576
00:26:41,190 --> 00:26:47,309
actually all right so when we're doing

577
00:26:45,390 --> 00:26:50,310
compile Z bias program here we actually

578
00:26:47,309 --> 00:26:53,940
need to use the size of this thing

579
00:26:50,309 --> 00:26:57,210
as of oxalá that's actually something

580
00:26:53,940 --> 00:26:59,549
that when we have the settings here we

581
00:26:57,210 --> 00:27:03,360
don't actually know what that is because

582
00:26:59,549 --> 00:27:04,889
we don't pass it in here however it is

583
00:27:03,359 --> 00:27:09,389
actually something that we just kind of

584
00:27:04,890 --> 00:27:12,509
know anyway because the OpenGL structure

585
00:27:09,390 --> 00:27:14,220
itself has the spec atlas in it so we

586
00:27:12,509 --> 00:27:19,160
should be able to just say look the

587
00:27:14,220 --> 00:27:19,160
OpenGL Aero spec Atlas here right

588
00:27:22,369 --> 00:27:26,969
speculate Alice voxel Jim is the voxel

589
00:27:25,559 --> 00:27:28,769
dim in question that's what you're going

590
00:27:26,970 --> 00:27:34,289
to use for the lighting so off you go

591
00:27:28,769 --> 00:27:36,000
right so that's hardly an issue so

592
00:27:34,289 --> 00:27:38,399
finally we get down to this and now

593
00:27:36,000 --> 00:27:40,890
we're just at the point where the

594
00:27:38,400 --> 00:27:44,040
setting for the voxel dimensions is

595
00:27:40,890 --> 00:27:47,700
picked here so now we can actually say

596
00:27:44,039 --> 00:27:49,829
we can re introduce this and say here's

597
00:27:47,700 --> 00:27:54,538
the actual light look up voxel dim

598
00:27:49,829 --> 00:27:57,418
it's gonna be 32 and that's just what it

599
00:27:54,538 --> 00:28:00,990
is right and now everything should be

600
00:27:57,419 --> 00:28:03,120
operating on that right and hopefully if

601
00:28:00,990 --> 00:28:04,589
we run it now we won't get some disaster

602
00:28:03,119 --> 00:28:08,038
we'll just get the same exact thing we

603
00:28:04,589 --> 00:28:11,189
saw before right and it looks like

604
00:28:08,038 --> 00:28:14,250
that's roughly what we get so now if we

605
00:28:11,190 --> 00:28:16,798
want to change this to being like XY and

606
00:28:14,250 --> 00:28:19,558
Z we should be able to start you know

607
00:28:16,798 --> 00:28:22,200
debugging that now so if I were to

608
00:28:19,558 --> 00:28:25,648
actually make each of these a separate

609
00:28:22,200 --> 00:28:28,558
value and use them here to you know seed

610
00:28:25,648 --> 00:28:30,388
this with something different I should

611
00:28:28,558 --> 00:28:32,700
be able to tweak those values separately

612
00:28:30,388 --> 00:28:36,119
and as I tweak those values I should get

613
00:28:32,700 --> 00:28:39,360
a different shape so if I look for

614
00:28:36,119 --> 00:28:40,678
example at that I should be able to say

615
00:28:39,359 --> 00:28:44,158
like oh okay

616
00:28:40,679 --> 00:28:45,620
I want to shrink down the Z and we

617
00:28:44,159 --> 00:28:50,399
should be able to try and figure out

618
00:28:45,619 --> 00:28:53,879
where we break right so now if I shrink

619
00:28:50,398 --> 00:28:56,278
by the Z and I and I zoom out here you

620
00:28:53,880 --> 00:29:00,210
can kind of see like that this became

621
00:28:56,278 --> 00:29:02,730
more squat right but it otherwise is the

622
00:29:00,210 --> 00:29:05,579
same and looking at it it actually looks

623
00:29:02,730 --> 00:29:08,370
okay I mean I don't know like it doesn't

624
00:29:05,579 --> 00:29:10,619
look particularly wrong so it looks like

625
00:29:08,369 --> 00:29:12,569
I mean maybe we're still doing it

626
00:29:10,619 --> 00:29:16,349
properly but obviously it's it's pretty

627
00:29:12,569 --> 00:29:18,509
hard to say exactly it does look like

628
00:29:16,349 --> 00:29:19,949
our debug drawing code maybe didn't

629
00:29:18,509 --> 00:29:21,960
quite handle that as well as it could

630
00:29:19,950 --> 00:29:24,269
have but only the debug code the actual

631
00:29:21,960 --> 00:29:26,308
runtime code looks fine and one of the

632
00:29:24,269 --> 00:29:29,190
things that you'll notice is already you

633
00:29:26,308 --> 00:29:32,129
know that jumped us up to a much better

634
00:29:29,190 --> 00:29:35,070
frame rate as well so prior to that

635
00:29:32,130 --> 00:29:42,799
change you know if you if you look at

636
00:29:35,069 --> 00:29:46,319
what we're running at at 32 by 32 by 32

637
00:29:42,798 --> 00:29:51,418
if we run it here you can kind of see

638
00:29:46,319 --> 00:29:53,519
the frame rate 125 milliseconds or you

639
00:29:51,419 --> 00:29:58,049
know there abouts right kind of

640
00:29:53,519 --> 00:30:01,079
oscillating we drop that down and we

641
00:29:58,048 --> 00:30:03,950
immediately get just from reducing the

642
00:30:01,079 --> 00:30:06,918
the footprint of the lighting thus

643
00:30:03,950 --> 00:30:08,659
we go down to almost twice as fast right

644
00:30:06,919 --> 00:30:10,610
and that's sort of what we would expect

645
00:30:08,659 --> 00:30:12,019
because the lighting itself takes a

646
00:30:10,609 --> 00:30:15,349
certain amount of time that amount of

647
00:30:12,019 --> 00:30:17,149
time is based entirely on how many

648
00:30:15,349 --> 00:30:19,428
places we want to sample the lighting

649
00:30:17,148 --> 00:30:20,868
from plus sort of the constant overhead

650
00:30:19,429 --> 00:30:23,360
of producing the diffuse maps which

651
00:30:20,868 --> 00:30:25,819
right now is pretty slow so if you take

652
00:30:23,359 --> 00:30:28,269
out that constant overhead we doubled

653
00:30:25,819 --> 00:30:30,829
the speed of the Interior portion and so

654
00:30:28,269 --> 00:30:32,480
as you expect we get almost twice as

655
00:30:30,829 --> 00:30:35,599
fast right that's exactly what we would

656
00:30:32,480 --> 00:30:37,278
expect to see and so if I go ahead and

657
00:30:35,599 --> 00:30:38,988
hop around now you know it's getting

658
00:30:37,278 --> 00:30:40,909
much closer to a playable frame rate

659
00:30:38,989 --> 00:30:42,980
without us ever actually having an

660
00:30:40,909 --> 00:30:44,539
optimized anything just by saying look

661
00:30:42,980 --> 00:30:45,858
let's not compute the lighting in a

662
00:30:44,538 --> 00:30:48,259
bunch of places that we don't actually

663
00:30:45,858 --> 00:30:50,868
care about right which seems like a

664
00:30:48,259 --> 00:30:52,579
pretty obvious thing to want to do since

665
00:30:50,868 --> 00:30:53,808
obviously you don't really want to

666
00:30:52,579 --> 00:31:03,259
compute lighting in places that you

667
00:30:53,808 --> 00:31:04,970
don't need it all right so I think

668
00:31:03,259 --> 00:31:06,288
that's fine and then we can start to

669
00:31:04,970 --> 00:31:08,720
look at some other things here if you

670
00:31:06,288 --> 00:31:10,669
look at the speed too you can see that

671
00:31:08,720 --> 00:31:11,868
we may want to spend a little bit more

672
00:31:10,669 --> 00:31:14,239
time thinking about how we're doing

673
00:31:11,868 --> 00:31:18,378
these a few snaps as well if you take a

674
00:31:14,239 --> 00:31:19,519
look at that excuse me if we were to

675
00:31:18,378 --> 00:31:22,009
take that out of the equation

676
00:31:19,519 --> 00:31:24,970
temporarily so when we're producing

677
00:31:22,009 --> 00:31:27,528
those diffuse maps here if I go over to

678
00:31:24,970 --> 00:31:29,480
the lighting code temporarily and I

679
00:31:27,528 --> 00:31:32,269
disabled the part of the code which

680
00:31:29,480 --> 00:31:34,358
actually tries to sum up the diffuse

681
00:31:32,269 --> 00:31:36,769
maps properly

682
00:31:34,358 --> 00:31:40,548
so here in the work you call back I say

683
00:31:36,769 --> 00:31:42,319
look just don't worry about that it's

684
00:31:40,548 --> 00:31:42,710
just not you know we're not gonna do

685
00:31:42,319 --> 00:31:46,519
that

686
00:31:42,710 --> 00:31:49,220
no one cares right so if I take that out

687
00:31:46,519 --> 00:31:51,259
of the equation temporarily and I come

688
00:31:49,220 --> 00:31:54,259
back over here you can see that going

689
00:31:51,259 --> 00:31:57,889
away you can see that again like we're

690
00:31:54,259 --> 00:32:01,278
getting a lot faster just from that so

691
00:31:57,888 --> 00:32:03,498
we would get another you know 10 to 20

692
00:32:01,278 --> 00:32:05,778
milliseconds shaved off the time if our

693
00:32:03,499 --> 00:32:09,829
diffuse map production code could be

694
00:32:05,778 --> 00:32:11,679
done more efficiently so that's another

695
00:32:09,829 --> 00:32:15,829
thing that we would want to potentially

696
00:32:11,679 --> 00:32:16,640
think about - although it's definitely

697
00:32:15,829 --> 00:32:18,889
like the shorter and

698
00:32:16,640 --> 00:32:20,570
the stick but if you take a look at how

699
00:32:18,890 --> 00:32:23,120
that's working right now you know yes we

700
00:32:20,569 --> 00:32:25,099
did the nominal we did a nominal amount

701
00:32:23,119 --> 00:32:27,469
of work to just like simplify the way

702
00:32:25,099 --> 00:32:32,109
that was working by you know doing it

703
00:32:27,470 --> 00:32:34,009
for wide but what we didn't really do is

704
00:32:32,109 --> 00:32:35,689
actually reduce the number of

705
00:32:34,009 --> 00:32:39,319
multipliers that are involved here so if

706
00:32:35,690 --> 00:32:40,820
you take a look this is you know we take

707
00:32:39,319 --> 00:32:44,929
a look at our four loops here this is a

708
00:32:40,819 --> 00:32:46,369
two right this is an eight and then you

709
00:32:44,930 --> 00:32:50,120
look at these two and this is an eight

710
00:32:46,369 --> 00:32:52,789
and that's an eight right so if you take

711
00:32:50,119 --> 00:32:58,989
a look at at how heavyweight that

712
00:32:52,789 --> 00:33:03,049
routine is it's just a lot of multiplies

713
00:32:58,990 --> 00:33:07,009
right it's just a lot of multiplies and

714
00:33:03,049 --> 00:33:09,019
we reduced it down from 4096 to 1024 by

715
00:33:07,009 --> 00:33:11,420
making it wide but that's still not

716
00:33:09,019 --> 00:33:20,180
great like we would rather this be

717
00:33:11,420 --> 00:33:22,279
significantly less than it is okay so

718
00:33:20,180 --> 00:33:25,310
let's maybe let's think about this loop

719
00:33:22,279 --> 00:33:26,839
just a little bit and see if we can't

720
00:33:25,309 --> 00:33:30,409
maybe think about ways of making this a

721
00:33:26,839 --> 00:33:33,230
little bit more sane looking back at the

722
00:33:30,410 --> 00:33:37,460
actual runtime itself and again checking

723
00:33:33,230 --> 00:33:42,259
that profile you go ahead and put this

724
00:33:37,460 --> 00:33:44,630
back in you can kind of see that the

725
00:33:42,259 --> 00:33:47,359
profile itself oops sorry

726
00:33:44,630 --> 00:33:48,740
gotta fix the debug we gotta clean up

727
00:33:47,359 --> 00:33:50,419
our debug code one of these days it

728
00:33:48,740 --> 00:33:54,019
annoys me that it can't do the hot

729
00:33:50,420 --> 00:33:56,810
reloading properly anyway so if we take

730
00:33:54,019 --> 00:33:59,900
a look here at at this part of the code

731
00:33:56,809 --> 00:34:04,220
when we if zero that out we don't

732
00:33:59,900 --> 00:34:08,720
actually get much of anything left in

733
00:34:04,220 --> 00:34:13,220
the propagation work why okay so what's

734
00:34:08,719 --> 00:34:16,969
actually the problem here it's using

735
00:34:13,219 --> 00:34:20,648
like a non it's using like a block

736
00:34:16,969 --> 00:34:23,648
that's supposedly not supposed to be

737
00:34:20,648 --> 00:34:23,648
used

738
00:34:26,269 --> 00:34:30,570
for allocating and I'm not sure we have

739
00:34:29,190 --> 00:34:32,880
to go find out what's going on there I

740
00:34:30,570 --> 00:34:35,580
don't know why that's even that's bad

741
00:34:32,880 --> 00:34:37,920
but anyway um you can kind of see here

742
00:34:35,579 --> 00:34:39,569
that compute light propagation work is

743
00:34:37,920 --> 00:34:42,900
drops down to a fairly meaningless

744
00:34:39,570 --> 00:34:45,870
amount of the frame time so this part

745
00:34:42,900 --> 00:34:48,889
even though the fill light Atlas like

746
00:34:45,869 --> 00:34:52,170
these fill light out of order things

747
00:34:48,889 --> 00:34:54,269
those are not really optimized at all

748
00:34:52,170 --> 00:34:56,369
they're extremely stupid right now

749
00:34:54,269 --> 00:34:57,570
but even extremely stupid they just

750
00:34:56,369 --> 00:34:59,519
touch so few pixels

751
00:34:57,570 --> 00:35:01,769
I guess that they're just not

752
00:34:59,519 --> 00:35:03,119
contributing to the frame time so we

753
00:35:01,769 --> 00:35:05,639
probably don't have to worry about those

754
00:35:03,119 --> 00:35:08,789
not for a long time so it's really just

755
00:35:05,639 --> 00:35:10,920
this part right here that's our problem

756
00:35:08,789 --> 00:35:12,300
for that you know for this outer part of

757
00:35:10,920 --> 00:35:15,840
the code and then there's the right

758
00:35:12,300 --> 00:35:18,570
caster so if we take a look at what's

759
00:35:15,840 --> 00:35:19,769
going on here there's a couple different

760
00:35:18,570 --> 00:35:22,320
things that probably could be improved

761
00:35:19,769 --> 00:35:25,710
first of all just the loads themselves

762
00:35:22,320 --> 00:35:27,090
are not great so the offset from Texel I

763
00:35:25,710 --> 00:35:28,559
don't know how good this is doing this

764
00:35:27,090 --> 00:35:30,539
could probably be done better we can

765
00:35:28,559 --> 00:35:31,889
look at the assembly code for it but the

766
00:35:30,539 --> 00:35:33,929
main thing I want to look at first is

767
00:35:31,889 --> 00:35:37,349
just can I take some of the multiplies

768
00:35:33,929 --> 00:35:40,319
out right and so what I want to do for

769
00:35:37,349 --> 00:35:43,230
that is I want to see how many 0 weights

770
00:35:40,320 --> 00:35:45,720
we have like if the weights are all 0 I

771
00:35:43,230 --> 00:35:48,510
want to know that right I want to know

772
00:35:45,719 --> 00:35:50,609
that ahead of time so where we go over

773
00:35:48,510 --> 00:35:52,800
to the build diffuse maps thing which

774
00:35:50,610 --> 00:35:54,539
again this is a good excuse to to make

775
00:35:52,800 --> 00:35:56,730
this code that build a few slight maps

776
00:35:54,539 --> 00:36:00,690
code better because right now it's not

777
00:35:56,730 --> 00:36:02,099
particularly good either so right now I

778
00:36:00,690 --> 00:36:04,440
want to go ahead and take a look at the

779
00:36:02,099 --> 00:36:06,569
performance of this and just figure out

780
00:36:04,440 --> 00:36:08,070
not the performance of it but what it's

781
00:36:06,570 --> 00:36:10,740
actually producing and how that would

782
00:36:08,070 --> 00:36:12,930
affect our performance going forward so

783
00:36:10,739 --> 00:36:15,569
what I want to do here is take a look at

784
00:36:12,929 --> 00:36:19,759
every time this might be zero so I

785
00:36:15,570 --> 00:36:23,519
basically want to say you know 0 W count

786
00:36:19,760 --> 00:36:27,780
and so if we take a look here where this

787
00:36:23,519 --> 00:36:28,769
is you know where this weights that is

788
00:36:27,780 --> 00:36:31,940
happening in fact you know what I can

789
00:36:28,769 --> 00:36:31,940
even just make this a separate thing

790
00:36:32,360 --> 00:36:38,610
so here we are I'm going to loop over

791
00:36:36,659 --> 00:36:43,529
this exactly the way oh you know what I

792
00:36:38,610 --> 00:36:46,289
could even just put it here so right

793
00:36:43,530 --> 00:36:48,930
here so I'm just gonna do this I'm gonna

794
00:36:46,289 --> 00:36:51,449
say how many zeros are there through

795
00:36:48,929 --> 00:36:53,789
each of these when we get out the W I'm

796
00:36:51,449 --> 00:37:00,569
gonna go ahead and say look I want to

797
00:36:53,789 --> 00:37:05,759
know if all of these are 0 that's not

798
00:37:00,570 --> 00:37:09,980
what I was trying to do she's trying to

799
00:37:05,760 --> 00:37:22,530
get that one if all of these are 0 then

800
00:37:09,980 --> 00:37:28,740
we want to know about it no bad cut and

801
00:37:22,530 --> 00:37:30,510
paste and so if all of the weights that

802
00:37:28,739 --> 00:37:32,939
we were going to encounter in the

803
00:37:30,510 --> 00:37:36,090
multiply were all 0 so we basically did

804
00:37:32,940 --> 00:37:40,500
not have to sum this one I want to sum

805
00:37:36,090 --> 00:37:42,660
that I want to count that and know at

806
00:37:40,500 --> 00:37:45,360
the end of this how many of those of

807
00:37:42,659 --> 00:37:47,279
those there were and so I'm just gonna

808
00:37:45,360 --> 00:37:49,500
set a breakpoint here and have it show

809
00:37:47,280 --> 00:37:51,360
me that value the zero count value so

810
00:37:49,500 --> 00:37:53,309
like right here right at fill light last

811
00:37:51,360 --> 00:37:54,930
border so I'm going to go ahead and

812
00:37:53,309 --> 00:37:58,739
change this to a debug build which is

813
00:37:54,929 --> 00:38:00,480
our slow build and then I'm gonna set a

814
00:37:58,739 --> 00:38:05,909
breakpoint on that fill out light Atlas

815
00:38:00,480 --> 00:38:12,059
border so fill light Atlas border where

816
00:38:05,909 --> 00:38:16,639
is the lighting good there we go fill

817
00:38:12,059 --> 00:38:16,639
light Atlas border

818
00:38:18,559 --> 00:38:26,179
where are we where is that there it is I

819
00:38:22,429 --> 00:38:28,250
want to stop like there let's say and so

820
00:38:26,179 --> 00:38:29,629
this way I can just find out like how

821
00:38:28,250 --> 00:38:31,250
many of these multipliers are actually

822
00:38:29,630 --> 00:38:36,110
useless because I don't actually know

823
00:38:31,250 --> 00:38:40,340
right now but I would like to know all

824
00:38:36,110 --> 00:38:42,890
right so basically out of 1024

825
00:38:40,340 --> 00:38:46,789
multiplies right we only actually had to

826
00:38:42,889 --> 00:38:48,679
do 828 of them because the other ones

827
00:38:46,789 --> 00:38:54,079
were zero so they could have just been

828
00:38:48,679 --> 00:38:56,989
skipped right so I don't know exactly

829
00:38:54,079 --> 00:38:58,789
how we want to do this but we could try

830
00:38:56,989 --> 00:39:00,829
and coding this slightly differently

831
00:38:58,789 --> 00:39:05,389
right we could try and coding this as

832
00:39:00,829 --> 00:39:07,840
basically like a multiply skip list kind

833
00:39:05,389 --> 00:39:07,839
of a thing

834
00:39:16,539 --> 00:39:22,449
and I'm not sure like I don't really

835
00:39:19,550 --> 00:39:24,950
know exactly how we want to do that but

836
00:39:22,449 --> 00:39:26,719
if you take a look at the savings there

837
00:39:24,949 --> 00:39:29,829
it's it's you know that's like saving

838
00:39:26,719 --> 00:39:32,989
10% of the work that you would be doing

839
00:39:29,829 --> 00:39:36,199
and that could be fairly substantial

840
00:39:32,989 --> 00:39:39,229
right furthermore there's a couple other

841
00:39:36,199 --> 00:39:41,419
things to consider here the way this

842
00:39:39,230 --> 00:39:47,210
loop is working may be kind of stupid as

843
00:39:41,420 --> 00:39:49,700
well just the way the load is working so

844
00:39:47,210 --> 00:39:51,289
if we were to actually even say look

845
00:39:49,699 --> 00:39:56,199
we're still gonna brute-force this

846
00:39:51,289 --> 00:39:56,199
because we're just brutish like that

847
00:40:05,139 --> 00:40:11,029
yeah so I'm gonna look at a couple

848
00:40:08,329 --> 00:40:13,219
different things so first of all I think

849
00:40:11,030 --> 00:40:14,269
the first thing I want to see is let's

850
00:40:13,219 --> 00:40:15,379
take a look at what the assembly

851
00:40:14,269 --> 00:40:19,130
language code for this actually looks

852
00:40:15,380 --> 00:40:21,070
like now we know how many zeros were

853
00:40:19,130 --> 00:40:23,750
actually doing here I can pull that out

854
00:40:21,070 --> 00:40:25,490
and I'm gonna go ahead and see what the

855
00:40:23,750 --> 00:40:28,070
code looks like here just to see how bad

856
00:40:25,489 --> 00:40:30,109
it is and then I'm gonna see like maybe

857
00:40:28,070 --> 00:40:32,990
about doing the loads a little

858
00:40:30,110 --> 00:40:34,640
differently just to see if I can

859
00:40:32,989 --> 00:40:36,589
streamline it a little bit now if I

860
00:40:34,639 --> 00:40:38,839
don't see anything weird then maybe I

861
00:40:36,590 --> 00:40:40,340
won't do that but we'll see so I'm gonna

862
00:40:38,840 --> 00:40:42,350
set a breakpoint here and then I was

863
00:40:40,340 --> 00:40:43,700
gonna look at the disassembly just to

864
00:40:42,349 --> 00:40:47,029
see what it looks like when we actually

865
00:40:43,699 --> 00:40:51,379
go through here so to make this window a

866
00:40:47,030 --> 00:40:54,080
little bit bigger and here's us you know

867
00:40:51,380 --> 00:40:56,990
stepping through the disassembly here

868
00:40:54,079 --> 00:41:00,590
right so if we take a look at where

869
00:40:56,989 --> 00:41:03,379
we're actually I don't know what that's

870
00:41:00,590 --> 00:41:11,269
doing and then ignore this window for

871
00:41:03,380 --> 00:41:18,670
now so once we get into the actual what

872
00:41:11,269 --> 00:41:26,269
is happening here why are we why is that

873
00:41:18,670 --> 00:41:31,190
jumping like that I think that's just

874
00:41:26,269 --> 00:41:33,880
bad like no it isn't what what is

875
00:41:31,190 --> 00:41:33,880
happening there

876
00:41:40,360 --> 00:41:46,269
none of that looks particularly good to

877
00:41:44,050 --> 00:41:53,430
me I want to find out what the heck is

878
00:41:46,269 --> 00:41:56,110
happening here so I'll set from Texel

879
00:41:53,429 --> 00:42:00,210
it's just supposed to do this oh well we

880
00:41:56,110 --> 00:42:00,210
do have the assert pointer is inbounds

881
00:42:01,050 --> 00:42:05,920
so I may disable that just quickly -

882
00:42:04,300 --> 00:42:09,160
that might be throwing the optimizer a

883
00:42:05,920 --> 00:42:16,930
little bit hold on a second so I'm gonna

884
00:42:09,159 --> 00:42:18,549
do a pound to find here I'm gonna go

885
00:42:16,929 --> 00:42:21,759
ahead and say that there's a light Atlas

886
00:42:18,550 --> 00:42:23,200
check pointers thing and we're gonna

887
00:42:21,760 --> 00:42:29,740
have that in fact you know what I'm

888
00:42:23,199 --> 00:42:35,289
gonna do I'm gonna have light Atlas

889
00:42:29,739 --> 00:42:38,049
assert do nothing and so anywhere that

890
00:42:35,289 --> 00:42:43,769
there was a certain here I'm gonna

891
00:42:38,050 --> 00:42:43,769
change it to a light Atlas assert oops

892
00:42:44,070 --> 00:42:51,390
and the reason that I'm doing this is

893
00:42:47,800 --> 00:42:55,720
just to make sure that I don't have to

894
00:42:51,389 --> 00:42:58,420
pay any price in here when I'm trying to

895
00:42:55,719 --> 00:43:01,449
do optimization work so I can turn on so

896
00:42:58,420 --> 00:43:06,550
basically I want control over asserts in

897
00:43:01,449 --> 00:43:10,480
this particular piece of code right go

898
00:43:06,550 --> 00:43:12,400
ahead and stop that alright so yeah

899
00:43:10,480 --> 00:43:14,530
there was way too much jumping around in

900
00:43:12,400 --> 00:43:16,059
that code and I think that that is

901
00:43:14,530 --> 00:43:17,680
probably because we still had those

902
00:43:16,059 --> 00:43:21,969
asserts in there I'm not 100% certain

903
00:43:17,679 --> 00:43:25,829
about that but let's take a look because

904
00:43:21,969 --> 00:43:30,659
this should flow more smoothly here I

905
00:43:25,829 --> 00:43:30,659
would think what is going on Oh

906
00:43:37,900 --> 00:43:45,910
duh I forgot I don't have a way to

907
00:43:42,309 --> 00:43:47,739
freeze this thread so we're we have to

908
00:43:45,909 --> 00:43:51,009
turn off multi-threading first that I

909
00:43:47,739 --> 00:43:52,509
was like what's going on there yeah yeah

910
00:43:51,010 --> 00:43:54,010
so we still have multi-threading turned

911
00:43:52,510 --> 00:43:55,480
on here I've got to turn that off if I

912
00:43:54,010 --> 00:43:57,490
want to step through this really because

913
00:43:55,480 --> 00:43:59,829
otherwise I'm gonna be seeing multiple

914
00:43:57,489 --> 00:44:03,849
threads stepping through it so that's

915
00:43:59,829 --> 00:44:05,829
yeah less good for our analysis so let's

916
00:44:03,849 --> 00:44:07,480
go ahead to begin lighting I don't it

917
00:44:05,829 --> 00:44:09,159
maybe that remedy already has this I

918
00:44:07,480 --> 00:44:22,750
don't know I've never learned in remedy

919
00:44:09,159 --> 00:44:24,849
hat if you can step a single thread like

920
00:44:22,750 --> 00:44:26,289
step single thread is a great feature to

921
00:44:24,849 --> 00:44:27,659
have Visual Studio I don't even know if

922
00:44:26,289 --> 00:44:30,820
it has it it's a real pain in the butt

923
00:44:27,659 --> 00:44:32,739
in Visual Studio remedy may have added a

924
00:44:30,820 --> 00:44:33,850
better one I don't know but either way

925
00:44:32,739 --> 00:44:35,889
I'm just going to go ahead and say look

926
00:44:33,849 --> 00:44:36,279
we just won't like that's not gonna

927
00:44:35,889 --> 00:44:40,239
happen

928
00:44:36,280 --> 00:44:43,870
so multi-threading is turned off and

929
00:44:40,239 --> 00:44:45,429
then we'll run it now so yep alright so

930
00:44:43,869 --> 00:44:47,889
now running in I should be able to see

931
00:44:45,429 --> 00:44:49,719
this more cleanly so now if we step

932
00:44:47,889 --> 00:44:53,589
through we should just go straight

933
00:44:49,719 --> 00:44:56,349
forward and we are I believe that looks

934
00:44:53,590 --> 00:45:01,269
kind of weird why is it why does it

935
00:44:56,349 --> 00:45:04,589
disappear it doesn't look like the

936
00:45:01,269 --> 00:45:08,829
assembly stepping is working here Georg

937
00:45:04,590 --> 00:45:10,420
help I don't know if there's a newer

938
00:45:08,829 --> 00:45:11,710
version but the assembly stepping

939
00:45:10,420 --> 00:45:14,200
doesn't look like it's working like I

940
00:45:11,710 --> 00:45:17,340
can't actually see I can't actually step

941
00:45:14,199 --> 00:45:19,689
per instruction and it used to work I

942
00:45:17,340 --> 00:45:29,470
don't think we've got X 13 pixels with

943
00:45:19,690 --> 00:45:31,240
us do we help George hmm so I guess I

944
00:45:29,469 --> 00:45:35,319
can just look at this cold though even

945
00:45:31,239 --> 00:45:36,459
without stepping through it so if you

946
00:45:35,320 --> 00:45:42,340
look at the way this is loading stuff

947
00:45:36,460 --> 00:45:49,650
here looks like it's doing some aligned

948
00:45:42,340 --> 00:45:49,650
loads see what else we're doing here

949
00:45:51,889 --> 00:46:03,659
it looks actually fairly good right like

950
00:45:56,539 --> 00:46:08,400
did it actually reorder interesting did

951
00:46:03,659 --> 00:46:10,639
actually reorder the calls did it put

952
00:46:08,400 --> 00:46:16,050
these two wait you can't have done that

953
00:46:10,639 --> 00:46:20,029
where are those two calls or did it

954
00:46:16,050 --> 00:46:20,030
inline them oh please

955
00:46:33,989 --> 00:46:39,639
yeah I can't see where the systems I'm

956
00:46:36,518 --> 00:46:43,558
curious where these calls went because I

957
00:46:39,639 --> 00:46:43,558
don't know if it inline them or what

958
00:46:43,768 --> 00:46:53,649
because I wouldn't thought so so that's

959
00:46:45,880 --> 00:46:58,269
get called twice yes so that's weird so

960
00:46:53,650 --> 00:47:03,719
it actually moved those calls up and the

961
00:46:58,268 --> 00:47:03,718
and it jumps back to them or something I

962
00:47:06,208 --> 00:47:13,568
guess that's just a weird did you notice

963
00:47:11,559 --> 00:47:15,278
how weird that was I mean it may have

964
00:47:13,568 --> 00:47:16,358
just done that I don't know but it looks

965
00:47:15,278 --> 00:47:18,150
like it kind of did something pretty

966
00:47:16,358 --> 00:47:24,509
weird there if this is to be believed

967
00:47:18,150 --> 00:47:27,160
where it it changed where those go oh

968
00:47:24,509 --> 00:47:28,748
you know what it could just be it

969
00:47:27,159 --> 00:47:31,058
actually looks like just the assembly

970
00:47:28,748 --> 00:47:32,919
language here was kind of busted the

971
00:47:31,059 --> 00:47:36,548
stepping was busted now it's working

972
00:47:32,920 --> 00:47:38,680
properly right and now it looks much

973
00:47:36,548 --> 00:47:40,268
more sane because we're actually getting

974
00:47:38,679 --> 00:47:41,858
to this before we get to the call so

975
00:47:40,268 --> 00:47:44,848
maybe that was just a bet that was just

976
00:47:41,858 --> 00:47:50,288
a bad display thing that was happening

977
00:47:44,849 --> 00:47:52,028
okay yeah cuz this looks right this

978
00:47:50,289 --> 00:47:52,749
looks this like I was really confused

979
00:47:52,028 --> 00:47:56,170
about what I've seen there I think

980
00:47:52,748 --> 00:47:58,118
that's because it was wrong so now this

981
00:47:56,170 --> 00:48:00,759
looks totally fine right you can see it

982
00:47:58,119 --> 00:48:04,420
doing a move it's doing a shuff - that's

983
00:48:00,759 --> 00:48:07,838
the broadcast so that's the load of the

984
00:48:04,420 --> 00:48:10,449
of the spectacle value there right so it

985
00:48:07,838 --> 00:48:14,228
doesn't move and then it you know gets

986
00:48:10,449 --> 00:48:17,920
the the value and does the shuff so

987
00:48:14,228 --> 00:48:23,548
here's the mob and yeah you can see it's

988
00:48:17,920 --> 00:48:23,548
it's doing the load one at a time I

989
00:48:24,088 --> 00:48:28,768
don't know what the heck that's doing

990
00:48:28,798 --> 00:48:31,798
what

991
00:48:42,969 --> 00:48:47,000
[Music]

992
00:48:50,920 --> 00:49:00,759
that just doesn't make a whole lot of

993
00:48:56,268 --> 00:49:00,758
sense what I'm looking at here either

994
00:49:10,210 --> 00:49:14,840
well we'll take it on faith if that

995
00:49:13,070 --> 00:49:18,860
wasn't too stupid but it looks kind of

996
00:49:14,840 --> 00:49:22,269
stupid this just looks like way too many

997
00:49:18,860 --> 00:49:25,039
shuffles for what's actually happening

998
00:49:22,269 --> 00:49:27,440
so yeah I don't like the looks of this

999
00:49:25,039 --> 00:49:29,150
at all so I I would say actually let's

1000
00:49:27,440 --> 00:49:32,090
let's maybe just clean this routine up

1001
00:49:29,150 --> 00:49:37,639
first because it's easier for us to do

1002
00:49:32,090 --> 00:49:40,490
that yeah so I'm gonna say look the way

1003
00:49:37,639 --> 00:49:46,549
that we're gonna do this is we're gonna

1004
00:49:40,489 --> 00:49:51,469
actually load the so the spec atlas

1005
00:49:46,550 --> 00:49:53,030
where we're doing the 8x8 there let's

1006
00:49:51,469 --> 00:49:55,009
just say we're gonna lock that down for

1007
00:49:53,030 --> 00:49:58,400
now and it's got to be 8 by 8 so we're

1008
00:49:55,010 --> 00:50:01,100
not going to let this range around we're

1009
00:49:58,400 --> 00:50:05,900
gonna hand code this and so it has to

1010
00:50:01,099 --> 00:50:07,549
actually be sane right and so if we did

1011
00:50:05,900 --> 00:50:10,010
that we would know that we can load

1012
00:50:07,550 --> 00:50:13,430
everything so when we're looking at the

1013
00:50:10,010 --> 00:50:14,960
spec Texel here right where we know we

1014
00:50:13,429 --> 00:50:18,219
could load everything for a particular

1015
00:50:14,960 --> 00:50:20,090
spec Texel row with two loads right

1016
00:50:18,219 --> 00:50:24,500
furthermore if you actually about how

1017
00:50:20,090 --> 00:50:29,450
many there are total so in an 8x8

1018
00:50:24,500 --> 00:50:31,579
there's 16 spec texels right so actually

1019
00:50:29,449 --> 00:50:33,169
you could put the spec texels themselves

1020
00:50:31,579 --> 00:50:34,460
if you only cared about that you could

1021
00:50:33,170 --> 00:50:40,760
actually put them in registers because

1022
00:50:34,460 --> 00:50:43,309
there are 16 registers she'd actually

1023
00:50:40,760 --> 00:50:44,990
just load all 16 if you wanted to now we

1024
00:50:43,309 --> 00:50:46,579
can't really necessarily do that because

1025
00:50:44,989 --> 00:50:48,289
we need some place to store other things

1026
00:50:46,579 --> 00:50:51,769
but it means we could do like 4 at a

1027
00:50:48,289 --> 00:50:54,980
time if we wanted to

1028
00:50:51,769 --> 00:50:58,250
certainly so let's just write at least

1029
00:50:54,980 --> 00:51:01,460
one row here let's write that out

1030
00:50:58,250 --> 00:51:05,480
manually and see what happens so in here

1031
00:51:01,460 --> 00:51:08,269
I'm gonna say look let's just get where

1032
00:51:05,480 --> 00:51:12,619
we would be reading this Texel from like

1033
00:51:08,269 --> 00:51:15,250
this and then let's load the two things

1034
00:51:12,619 --> 00:51:19,460
we would the two actual values we want

1035
00:51:15,250 --> 00:51:21,500
out of there so I'm gonna say alright

1036
00:51:19,460 --> 00:51:25,760
you know we've got an

1037
00:51:21,500 --> 00:51:29,239
1:28 here that's the you know that's the

1038
00:51:25,760 --> 00:51:30,980
first one I guess you know and this is

1039
00:51:29,239 --> 00:51:32,359
the second one I mean I don't know how

1040
00:51:30,980 --> 00:51:34,940
we want to actually label these because

1041
00:51:32,360 --> 00:51:38,210
it's actually the first four and then

1042
00:51:34,940 --> 00:51:42,019
the second four so kind of hard to say

1043
00:51:38,210 --> 00:51:43,490
but maybe I'll do maybe I'll say this is

1044
00:51:42,019 --> 00:51:49,820
zero through three and this is four

1045
00:51:43,489 --> 00:51:52,039
through seven I don't know I so when we

1046
00:51:49,820 --> 00:51:55,400
look at the actual spec Texel we're

1047
00:51:52,039 --> 00:51:59,989
gonna now do like an mm like load ups on

1048
00:51:55,400 --> 00:52:03,590
this thing and I'm gonna load an actual

1049
00:51:59,989 --> 00:52:08,689
you know text a lot of this so here's

1050
00:52:03,590 --> 00:52:11,150
the M 128 respect Texel and the same is

1051
00:52:08,690 --> 00:52:17,030
true here only this time the spec Texel

1052
00:52:11,150 --> 00:52:28,849
spec Texel value in the light atlas

1053
00:52:17,030 --> 00:52:34,610
Texel that's a v3 i guess so

1054
00:52:28,849 --> 00:52:39,409
Oh hmm I had not considered the fact

1055
00:52:34,610 --> 00:52:40,099
that this is actually RG and B so I take

1056
00:52:39,409 --> 00:52:43,690
that back

1057
00:52:40,099 --> 00:52:52,190
so this would actually load if it's RGB

1058
00:52:43,690 --> 00:52:57,940
RGB RGB which it is right if it's

1059
00:52:52,190 --> 00:53:02,240
actually that then there's more per row

1060
00:52:57,940 --> 00:53:03,860
so yeah so that explains why there were

1061
00:53:02,239 --> 00:53:05,299
more stuffs in there now I get it

1062
00:53:03,860 --> 00:53:06,470
I was wondering why all the chef's were

1063
00:53:05,300 --> 00:53:08,600
there but that's why they were there

1064
00:53:06,469 --> 00:53:09,889
it's cuz there's actually RGB I was

1065
00:53:08,599 --> 00:53:13,670
thinking I was doing monochrome but I'm

1066
00:53:09,889 --> 00:53:17,139
not alright so yeah if we've got our GB

1067
00:53:13,670 --> 00:53:22,550
RGB then so that's three of the floats

1068
00:53:17,139 --> 00:53:26,019
times eight so there's actually 24 float

1069
00:53:22,550 --> 00:53:32,570
values so there's actually six per row

1070
00:53:26,019 --> 00:53:33,349
and this is not the correct way to look

1071
00:53:32,570 --> 00:53:39,199
at it right

1072
00:53:33,349 --> 00:53:42,818
so if there's six per row it's gonna

1073
00:53:39,199 --> 00:53:45,829
look more like this and these are

1074
00:53:42,818 --> 00:53:49,058
offsets by some amount right I guess I

1075
00:53:45,829 --> 00:53:49,059
should probably just duplicate that line

1076
00:53:54,969 --> 00:54:02,659
so those are all the values that we

1077
00:53:58,579 --> 00:54:06,528
actually have and we then want to like

1078
00:54:02,659 --> 00:54:09,318
process each one right so we want to

1079
00:54:06,528 --> 00:54:12,219
actually do the multiply here the

1080
00:54:09,318 --> 00:54:15,978
multiply accumulate for each of these

1081
00:54:12,219 --> 00:54:19,190
times the correct weight right so we

1082
00:54:15,978 --> 00:54:22,278
want to do like a load of the weight and

1083
00:54:19,190 --> 00:54:26,479
then multiply it in so previously we

1084
00:54:22,278 --> 00:54:32,568
were you know let's just go ahead and

1085
00:54:26,478 --> 00:54:34,968
move this out here right so we need to

1086
00:54:32,568 --> 00:54:38,298
be able to load these weights and for

1087
00:54:34,969 --> 00:54:40,278
each one of like the sy is just what it

1088
00:54:38,298 --> 00:54:42,440
is and for each one of these we have an

1089
00:54:40,278 --> 00:54:49,099
SX that we need to load and then do the

1090
00:54:42,440 --> 00:54:54,489
multiply with right so we know that

1091
00:54:49,099 --> 00:54:54,489
we've got something that looks like this

1092
00:55:05,260 --> 00:55:11,300
right so we're gonna load the weights

1093
00:55:08,570 --> 00:55:12,530
one at a time and then we know we have

1094
00:55:11,300 --> 00:55:16,039
to do this as well

1095
00:55:12,530 --> 00:55:17,540
right so we can actually avoid loading

1096
00:55:16,039 --> 00:55:19,309
the that we can actually avoid like

1097
00:55:17,539 --> 00:55:22,190
specifying it that way by just doing

1098
00:55:19,309 --> 00:55:28,159
this in the accumulator right so the

1099
00:55:22,190 --> 00:55:32,119
light see itself can be part of that

1100
00:55:28,159 --> 00:55:36,440
operation and so all we need to do now

1101
00:55:32,119 --> 00:55:44,779
is actually get the correct shuffle to

1102
00:55:36,440 --> 00:55:48,349
produce the weight value we wanted times

1103
00:55:44,780 --> 00:55:50,330
like a shuffle of these things right so

1104
00:55:48,349 --> 00:55:56,059
because everything that we want to do

1105
00:55:50,329 --> 00:55:58,969
for our for our multiplies is going to

1106
00:55:56,059 --> 00:56:02,929
come from whatever you know one of these

1107
00:55:58,969 --> 00:56:08,119
six so we should be able to do this loop

1108
00:56:02,929 --> 00:56:09,469
cleaner right and make it easier to read

1109
00:56:08,119 --> 00:56:11,679
and easier to think about how fast it

1110
00:56:09,469 --> 00:56:16,489
should run by just doing those directly

1111
00:56:11,679 --> 00:56:18,949
that's my argument anyway so if we load

1112
00:56:16,489 --> 00:56:21,139
everything in then we just need shuffles

1113
00:56:18,949 --> 00:56:28,719
here right we need to be able to do

1114
00:56:21,139 --> 00:56:32,019
shuffles right where we're gonna do like

1115
00:56:28,719 --> 00:56:32,019
something like this

1116
00:56:39,150 --> 00:56:45,430
know what I mean

1117
00:56:41,650 --> 00:56:47,950
and those weights the the weights there

1118
00:56:45,429 --> 00:56:50,949
are the only the only weird part about

1119
00:56:47,949 --> 00:56:53,679
it is the weights are actually VIII's so

1120
00:56:50,949 --> 00:56:55,989
in order to produce the correct v3 we

1121
00:56:53,679 --> 00:56:57,909
need basely and it kind of doesn't I

1122
00:56:55,989 --> 00:57:00,129
kind of don't know that I really want to

1123
00:56:57,909 --> 00:57:03,940
do this in v3 anymore I might just want

1124
00:57:00,130 --> 00:57:09,010
to do this in actual like X like written

1125
00:57:03,940 --> 00:57:10,599
out manually in XY and Z or RG and B in

1126
00:57:09,010 --> 00:57:12,730
this case so they don't have to keep

1127
00:57:10,599 --> 00:57:16,630
working through it that way and if we

1128
00:57:12,730 --> 00:57:19,150
look at the diffuse weight map here we

1129
00:57:16,630 --> 00:57:21,670
can also write this in the way that we

1130
00:57:19,150 --> 00:57:23,800
want as well right so I can make this

1131
00:57:21,670 --> 00:57:29,050
just be the correct series of things to

1132
00:57:23,800 --> 00:57:30,280
load out in in in order so we'll have to

1133
00:57:29,050 --> 00:57:34,720
think about how that should actually

1134
00:57:30,280 --> 00:57:37,930
work so anyway if we move along here we

1135
00:57:34,719 --> 00:57:44,379
know that as we load these in we have

1136
00:57:37,929 --> 00:57:51,279
well and now that I think about it it

1137
00:57:44,380 --> 00:57:55,390
kind of also seems like I could just

1138
00:57:51,280 --> 00:57:57,819
transpose so this bit here I feel like I

1139
00:57:55,389 --> 00:58:03,159
could just be transposing on the load as

1140
00:57:57,818 --> 00:58:11,949
well right so this kind of feels like it

1141
00:58:03,159 --> 00:58:17,199
just wants to be done all this one like

1142
00:58:11,949 --> 00:58:21,129
clean routine here so let's just keep

1143
00:58:17,199 --> 00:58:32,519
going with this so here's my m1 28 light

1144
00:58:21,130 --> 00:58:32,519
CR what's the zero it's like zero PS

1145
00:58:32,550 --> 00:58:37,329
there's an mm 0p o set zero that's what

1146
00:58:35,710 --> 00:58:42,940
they called it I don't know why they

1147
00:58:37,329 --> 00:58:45,160
called it that to did and so you know I

1148
00:58:42,940 --> 00:58:46,630
might just even say this is the R this

1149
00:58:45,159 --> 00:58:58,028
is the G and this is

1150
00:58:46,630 --> 00:59:02,460
B and then the transpose there is this

1151
00:58:58,028 --> 00:59:04,480
shuffle here that we have again like

1152
00:59:02,460 --> 00:59:05,980
it's just kind of annoying like I just

1153
00:59:04,480 --> 00:59:08,079
don't know that I want this in this

1154
00:59:05,980 --> 00:59:10,179
struct because once you start to blow it

1155
00:59:08,079 --> 00:59:16,150
out it just doesn't you know it doesn't

1156
00:59:10,179 --> 00:59:19,118
really make much sense so like doing

1157
00:59:16,150 --> 00:59:22,389
that sort of like rapper you know what I

1158
00:59:19,119 --> 00:59:28,180
mean just doesn't doesn't make much

1159
00:59:22,389 --> 00:59:29,739
sense to me having it in the rapper so

1160
00:59:28,179 --> 00:59:32,169
so I'd rather get rid of it so we can

1161
00:59:29,739 --> 00:59:37,479
still use the shuffle for X and in fact

1162
00:59:32,170 --> 00:59:41,920
I can still I can still do these as has

1163
00:59:37,480 --> 00:59:44,400
just our type here which is fine but I

1164
00:59:41,920 --> 00:59:47,980
just don't want the v3 version of it I

1165
00:59:44,400 --> 00:59:49,000
don't think that's productive alright so

1166
00:59:47,980 --> 00:59:51,940
we can leave it like that and that's

1167
00:59:49,000 --> 00:59:55,599
fine but then when I think I would want

1168
00:59:51,940 --> 00:59:59,409
to do is this transpose here I would

1169
00:59:55,599 --> 01:00:02,318
like the transpose to be done outside

1170
00:59:59,409 --> 01:00:04,058
right and so this part of the code you

1171
01:00:02,318 --> 01:00:09,219
know I would like that to just work that

1172
01:00:04,059 --> 01:00:13,140
way just trying to see if I can still

1173
01:00:09,219 --> 01:00:13,139
use this type and not be grumpy about it

1174
01:00:16,619 --> 01:00:28,690
yeah that especially well yeah all right

1175
01:00:26,199 --> 01:00:29,489
okay okay no you know what maybe I'm

1176
01:00:28,690 --> 01:00:31,720
okay with that

1177
01:00:29,489 --> 01:00:33,518
maybe I'm okay with that it's just it's

1178
01:00:31,719 --> 01:00:36,459
literally just three of those I'm okay

1179
01:00:33,518 --> 01:00:41,169
with that I can do that all right so we

1180
01:00:36,460 --> 01:00:43,000
can leave it that way all right so we we

1181
01:00:41,170 --> 01:00:44,858
can probably leave it that way I'm okay

1182
01:00:43,000 --> 01:00:46,778
with that I overreacted I was a little

1183
01:00:44,858 --> 01:00:48,730
bit grumpy about that but I'm okay with

1184
01:00:46,778 --> 01:00:52,528
that that's fine so if these are all

1185
01:00:48,730 --> 01:00:52,528
just f34 X's in here

1186
01:01:01,230 --> 01:01:05,769
then we look in here and we're gonna try

1187
01:01:03,550 --> 01:01:07,269
and do a summation this is the part that

1188
01:01:05,769 --> 01:01:09,849
I don't think I actually want to do this

1189
01:01:07,269 --> 01:01:13,409
way right so if we instead looked at how

1190
01:01:09,849 --> 01:01:17,049
this was working with each individual

1191
01:01:13,409 --> 01:01:20,039
element right so you know and you could

1192
01:01:17,050 --> 01:01:22,240
think of it more this way as well

1193
01:01:20,039 --> 01:01:33,519
so if we were looking at each individual

1194
01:01:22,239 --> 01:01:36,159
element here are g and b like so then we

1195
01:01:33,519 --> 01:01:37,539
could probably say well alright now we

1196
01:01:36,159 --> 01:01:40,420
just need to figure out what the

1197
01:01:37,539 --> 01:01:46,630
shuffles are right that produce the

1198
01:01:40,420 --> 01:01:48,990
value we need and let me take a look

1199
01:01:46,630 --> 01:01:53,170
here but I think that's that's really it

1200
01:01:48,989 --> 01:01:56,939
right so I think we can boil this entire

1201
01:01:53,170 --> 01:01:56,940
thing down to literally just doing that

1202
01:01:59,670 --> 01:02:09,309
oops and then do it all in one go and

1203
01:02:07,210 --> 01:02:14,679
and be a little bit happier about it

1204
01:02:09,309 --> 01:02:19,690
right and again I'm not sure how many of

1205
01:02:14,679 --> 01:02:25,409
these we actually need here so I think

1206
01:02:19,690 --> 01:02:34,119
this would just be the original 8 right

1207
01:02:25,409 --> 01:02:38,500
because we're summing over 8 pixels so

1208
01:02:34,119 --> 01:02:41,889
this is how many ops we need so we have

1209
01:02:38,500 --> 01:02:43,900
basically you know 24 multiply

1210
01:02:41,889 --> 01:02:47,319
accumulates that have to happen in here

1211
01:02:43,900 --> 01:02:49,869
and we just need to make the correct

1212
01:02:47,320 --> 01:02:54,610
shuffles out of the original loads to

1213
01:02:49,869 --> 01:02:56,829
make that happen right and then again we

1214
01:02:54,610 --> 01:02:59,019
can unwind this further by or

1215
01:02:56,829 --> 01:03:00,460
simplifying it further by again doing

1216
01:02:59,019 --> 01:03:02,800
these loads in a more structured fashion

1217
01:03:00,460 --> 01:03:06,880
but for doing one row this is basically

1218
01:03:02,800 --> 01:03:07,539
what it looks like and then we can also

1219
01:03:06,880 --> 01:03:09,519
prop

1220
01:03:07,539 --> 01:03:11,409
look at what this is actually doing to

1221
01:03:09,519 --> 01:03:13,539
see whether there's a way to make this

1222
01:03:11,409 --> 01:03:17,710
separable as well so we just do instead

1223
01:03:13,539 --> 01:03:20,230
of interior loops we just can do you

1224
01:03:17,710 --> 01:03:22,360
know row sums and then column sums I

1225
01:03:20,230 --> 01:03:23,949
don't know if there's a way that we can

1226
01:03:22,360 --> 01:03:25,360
potentially do it that way

1227
01:03:23,949 --> 01:03:28,599
but hopefully as we work through this

1228
01:03:25,360 --> 01:03:30,340
will we can you know think about that so

1229
01:03:28,599 --> 01:03:31,539
anyway taking a look at this if we want

1230
01:03:30,340 --> 01:03:33,490
to look at what the shuffle is that

1231
01:03:31,539 --> 01:03:40,300
produces the correct values here for

1232
01:03:33,489 --> 01:03:45,489
just the R's right which is I guess what

1233
01:03:40,300 --> 01:03:49,950
we need to have happen here that's just

1234
01:03:45,489 --> 01:03:54,789
going to be the same transpose as this

1235
01:03:49,949 --> 01:03:58,199
right so loading these up I think it's

1236
01:03:54,789 --> 01:03:58,199
just the same transpose actually

1237
01:04:05,429 --> 01:04:25,919
like I want to say that we can just do

1238
01:04:08,219 --> 01:04:27,000
that and then call transpose I think so

1239
01:04:25,920 --> 01:04:29,789
maybe I didn't even have to blow that

1240
01:04:27,000 --> 01:04:31,079
part out so I think I mean correct me if

1241
01:04:29,789 --> 01:04:34,619
I'm wrong here but I think if we just

1242
01:04:31,079 --> 01:04:43,880
have two of these right and then we load

1243
01:04:34,619 --> 01:04:43,880
in or I guess I should say like this

1244
01:04:44,838 --> 01:04:51,539
because the transpose is symmetric right

1245
01:04:47,789 --> 01:04:57,630
it it transpose is it doesn't it doesn't

1246
01:04:51,539 --> 01:04:59,219
care at all whether you started in one

1247
01:04:57,630 --> 01:05:01,800
orientation and transpose to the other

1248
01:04:59,219 --> 01:05:07,219
or vice versa so we should be able to

1249
01:05:01,800 --> 01:05:07,220
just load these in transpose them both

1250
01:05:09,980 --> 01:05:13,280
do the OP

1251
01:05:22,860 --> 01:05:48,690
I think right yeah oops I and I guess so

1252
01:05:45,840 --> 01:05:51,870
well okay so not quite because we also

1253
01:05:48,690 --> 01:05:55,230
in addition we need the weights to

1254
01:05:51,869 --> 01:05:57,089
affect everyone so the transpose puts us

1255
01:05:55,230 --> 01:06:00,750
so that we have all of our ours but we

1256
01:05:57,090 --> 01:06:07,650
still I guess that's not that's not true

1257
01:06:00,750 --> 01:06:13,380
what I said because we still need to we

1258
01:06:07,650 --> 01:06:15,599
would still need to collapse the sums so

1259
01:06:13,380 --> 01:06:19,019
this would not like get our horizontal

1260
01:06:15,599 --> 01:06:23,130
adds in so maybe I'll take that back for

1261
01:06:19,019 --> 01:06:24,960
a second and say maybe we don't do that

1262
01:06:23,130 --> 01:06:26,789
because since this is a straight sum

1263
01:06:24,960 --> 01:06:29,789
this this just needs to replicate a

1264
01:06:26,789 --> 01:06:34,590
particular value right like it just

1265
01:06:29,789 --> 01:06:39,139
needs to say look we want to take s 0 r

1266
01:06:34,590 --> 01:06:47,269
and we want to just have all of that

1267
01:06:39,139 --> 01:06:47,269
right in each case

1268
01:06:54,670 --> 01:07:12,980
so since this is RGB RGB I guess it's

1269
01:06:58,340 --> 01:07:14,840
it's this right so maybe this is the

1270
01:07:12,980 --> 01:07:23,539
right way to look at it you just go by

1271
01:07:14,840 --> 01:07:26,900
each of these values yeah so I guess

1272
01:07:23,539 --> 01:07:28,699
yeah man these are this is why this kind

1273
01:07:26,900 --> 01:07:30,650
of stuff is so annoying right you can

1274
01:07:28,699 --> 01:07:33,859
see how long it takes to do code like

1275
01:07:30,650 --> 01:07:36,470
this it's just this is why Cindy is not

1276
01:07:33,860 --> 01:07:39,019
good right and you usually want this

1277
01:07:36,469 --> 01:07:40,399
stuff to be automated and unfortunately

1278
01:07:39,019 --> 01:07:41,509
we still don't really have particularly

1279
01:07:40,400 --> 01:07:44,059
good ways of doing it because just like

1280
01:07:41,510 --> 01:07:46,970
your brain is having to think about too

1281
01:07:44,059 --> 01:07:50,869
many like indexes and how things are

1282
01:07:46,969 --> 01:07:54,319
sliced up and it just y-you know it's

1283
01:07:50,869 --> 01:07:57,799
just like a bad way of designing the way

1284
01:07:54,320 --> 01:08:00,019
you're supposed to express things and I

1285
01:07:57,800 --> 01:08:02,000
really don't think it has legs you know

1286
01:08:00,019 --> 01:08:04,449
you shouldn't be really doing this

1287
01:08:02,000 --> 01:08:04,449
yourself

1288
01:08:04,750 --> 01:08:08,059
especially now when you consider the

1289
01:08:06,440 --> 01:08:12,619
fact that shaders are a good example of

1290
01:08:08,059 --> 01:08:15,259
how you can just do this stuff and when

1291
01:08:12,619 --> 01:08:16,159
you have properly unpacking loads you

1292
01:08:15,260 --> 01:08:17,300
just don't have to think about it

1293
01:08:16,159 --> 01:08:18,619
anymore because you just write the code

1294
01:08:17,300 --> 01:08:21,079
like you would have written it for

1295
01:08:18,619 --> 01:08:25,279
scalar and they can run at that speed

1296
01:08:21,079 --> 01:08:30,949
right so anyway kind of a side rant but

1297
01:08:25,279 --> 01:08:35,000
it doesn't matter so anyway yeah if we

1298
01:08:30,949 --> 01:08:40,849
take a look at the loads here let's get

1299
01:08:35,000 --> 01:08:44,859
this back to normal so each of these

1300
01:08:40,850 --> 01:08:47,088
shuffles should just now work I think

1301
01:08:44,859 --> 01:08:50,279
because again they're just expansions

1302
01:08:47,088 --> 01:09:04,649
you're basically just replicating

1303
01:08:50,279 --> 01:09:07,069
a particular value out and I think that

1304
01:09:04,649 --> 01:09:07,068
should be it

1305
01:09:13,139 --> 01:09:30,618
and this should line up exactly at least

1306
01:09:16,288 --> 01:09:30,618
a theory oops

1307
01:09:40,849 --> 01:09:46,038
and there we go

1308
01:09:49,908 --> 01:09:59,219
so I think that loads everything not

1309
01:09:56,429 --> 01:10:00,480
sure why this is complaining oh that's

1310
01:09:59,219 --> 01:10:06,439
supposed to be an f32

1311
01:10:00,479 --> 01:10:06,439
I guess

1312
01:10:13,210 --> 01:10:18,029
do we have a load for these somewhere

1313
01:10:22,170 --> 01:10:28,649
you would just think that we would I'm

1314
01:10:25,869 --> 01:10:28,649
not actually sure we do

1315
01:10:29,550 --> 01:10:42,579
apparently not feel like we should have

1316
01:10:34,689 --> 01:10:46,469
a load for these let me go ahead and

1317
01:10:42,579 --> 01:10:46,470
make one so don't see one

1318
01:11:03,960 --> 01:11:11,609
maybe that and this just literally does

1319
01:11:08,529 --> 01:11:11,609
exactly what this does

1320
01:11:17,279 --> 01:11:24,909
oops

1321
01:11:18,550 --> 01:11:28,239
and maybe a little too cheeky love that

1322
01:11:24,909 --> 01:11:33,309
caps lock key never want it still

1323
01:11:28,238 --> 01:11:35,049
kicking probably should just go hack put

1324
01:11:33,310 --> 01:11:40,350
in the registry thing that just disables

1325
01:11:35,050 --> 01:11:45,060
it anyway so here's the load for our

1326
01:11:40,350 --> 01:11:50,230
data type here and I can go ahead and

1327
01:11:45,060 --> 01:11:52,120
load F 32x these and then the nice part

1328
01:11:50,229 --> 01:11:55,209
about that is to now then we can stop

1329
01:11:52,119 --> 01:11:56,170
with a casting nonsense which is always

1330
01:11:55,210 --> 01:11:59,619
kind of annoying

1331
01:11:56,170 --> 01:12:01,720
I hate the way Intel designed these

1332
01:11:59,619 --> 01:12:03,250
intrinsics they're so bad like you don't

1333
01:12:01,720 --> 01:12:04,659
want to have to cast just like here's

1334
01:12:03,250 --> 01:12:08,800
the address to load from why do I have

1335
01:12:04,659 --> 01:12:10,090
to cast into a float star like that

1336
01:12:08,800 --> 01:12:13,900
doesn't really make any sense but

1337
01:12:10,090 --> 01:12:20,289
alright so in here where we're doing the

1338
01:12:13,899 --> 01:12:21,789
ads let me just take a look so so this

1339
01:12:20,289 --> 01:12:25,359
is actually an F 32x

1340
01:12:21,789 --> 01:12:27,970
so when we do this multiply here

1341
01:12:25,359 --> 01:12:29,920
I guess that we'll just do the f 3/2

1342
01:12:27,970 --> 01:12:41,380
times the f32 and we'll be done with it

1343
01:12:29,920 --> 01:12:42,489
and that makes sense than I think about

1344
01:12:41,380 --> 01:12:43,989
it because it's like you're not gonna

1345
01:12:42,489 --> 01:12:45,399
have different coefficients for r g and

1346
01:12:43,989 --> 01:12:46,329
b so i'm not sure why i was i was

1347
01:12:45,399 --> 01:12:50,049
writing it that way

1348
01:12:46,329 --> 01:12:59,439
but all right so where's our shuffle 4x

1349
01:12:50,050 --> 01:13:00,880
ah so we kind of set that up so that we

1350
01:12:59,439 --> 01:13:02,409
would pass in the two different things

1351
01:13:00,880 --> 01:13:05,260
to use in this case it's just replicate

1352
01:13:02,409 --> 01:13:09,880
I might actually make a custom one of

1353
01:13:05,260 --> 01:13:12,250
these that's just like maybe even just a

1354
01:13:09,880 --> 01:13:15,100
function that's like broadcast you know

1355
01:13:12,250 --> 01:13:17,619
and I don't know again like it maybe we

1356
01:13:15,100 --> 01:13:19,120
already had that but I don't think we

1357
01:13:17,619 --> 01:13:21,279
did because we haven't really done much

1358
01:13:19,119 --> 01:13:23,079
with these so there's not much there's

1359
01:13:21,279 --> 01:13:25,389
not really a lot in them you know what I

1360
01:13:23,079 --> 01:13:32,559
mean but I'll just double check to see

1361
01:13:25,390 --> 01:13:39,190
if there's a broadcast yeah I don't I

1362
01:13:32,560 --> 01:13:45,220
don't see one here so I'm gonna go ahead

1363
01:13:39,189 --> 01:13:47,349
and make like a a broadcast where you

1364
01:13:45,220 --> 01:13:50,260
just say all right here's the value

1365
01:13:47,350 --> 01:13:51,820
that's coming in and here's like well

1366
01:13:50,260 --> 01:13:53,440
you know what now I think about it it

1367
01:13:51,819 --> 01:13:56,289
does have to be a macro though because

1368
01:13:53,439 --> 01:13:58,179
if you want to specify which one you

1369
01:13:56,289 --> 01:14:00,489
have to be able to specify that at

1370
01:13:58,180 --> 01:14:03,430
compile time it's not actually a runtime

1371
01:14:00,489 --> 01:14:07,960
thing so I think it does actually it

1372
01:14:03,430 --> 01:14:10,030
would have to be one of these so

1373
01:14:07,960 --> 01:14:13,510
broadcast 4x would just say look here's

1374
01:14:10,029 --> 01:14:18,519
the one I actually want and here's like

1375
01:14:13,510 --> 01:14:20,380
the element index you know and then it

1376
01:14:18,520 --> 01:14:23,619
would be a shuffle

1377
01:14:20,380 --> 01:14:23,618
[Music]

1378
01:14:27,179 --> 01:14:30,730
where we literally just use the same

1379
01:14:29,380 --> 01:14:32,980
index each time actually you know and I

1380
01:14:30,729 --> 01:14:35,229
can even just you can just even call the

1381
01:14:32,979 --> 01:14:40,388
original shuffle so I can just say

1382
01:14:35,229 --> 01:14:43,288
shuffle Forex a index index a index

1383
01:14:40,389 --> 01:14:47,920
index right and then it should work just

1384
01:14:43,288 --> 01:14:49,988
fine so this can just be changed to a

1385
01:14:47,920 --> 01:15:12,788
broadcast 4x and then this can just be

1386
01:14:49,988 --> 01:15:14,649
done once which seems saner and then we

1387
01:15:12,788 --> 01:15:25,268
just change all these shuffle four X's

1388
01:15:14,649 --> 01:15:35,170
to broadcast 4x all right and what else

1389
01:15:25,269 --> 01:15:36,940
oh not sure out for got in there all

1390
01:15:35,170 --> 01:15:38,920
right so let me take a look to see what

1391
01:15:36,939 --> 01:15:44,229
the compiler generates now I just want

1392
01:15:38,920 --> 01:15:54,239
to see what it generates here if I go

1393
01:15:44,229 --> 01:15:58,000
through this code here we go

1394
01:15:54,238 --> 01:16:01,089
so here's us doing the loads and then

1395
01:15:58,000 --> 01:16:06,010
Bruce doing chef mulch F mole a - f

1396
01:16:01,090 --> 01:16:07,960
Malad chef will add much nicer right so

1397
01:16:06,010 --> 01:16:11,139
now we're just dumping the chef moles

1398
01:16:07,960 --> 01:16:13,420
into the Al use they're gonna have a

1399
01:16:11,139 --> 01:16:17,170
party with that and then we're gonna

1400
01:16:13,420 --> 01:16:19,029
loop so it should be pretty hard for the

1401
01:16:17,170 --> 01:16:20,828
CPU to screw that up I mean you're just

1402
01:16:19,029 --> 01:16:23,920
basically giving it a huge bunch of

1403
01:16:20,828 --> 01:16:25,420
flops to chew on so I'm a little bit

1404
01:16:23,920 --> 01:16:26,828
more comfortable reasoning about what

1405
01:16:25,420 --> 01:16:28,630
that's going to do or how we can work

1406
01:16:26,828 --> 01:16:31,090
with it so that's fine let's take a look

1407
01:16:28,630 --> 01:16:37,710
and see if it's at all sane in terms of

1408
01:16:31,090 --> 01:16:37,710
performance I'm gonna have to turn the

1409
01:16:39,250 --> 01:16:46,520
multithreading back on obviously but

1410
01:16:41,890 --> 01:16:49,010
let's just take a look at that of course

1411
01:16:46,520 --> 01:16:52,390
we also may have added a bunch of pugs

1412
01:16:49,010 --> 01:16:54,489
there that's sort of a separate issue

1413
01:16:52,390 --> 01:16:56,810
about what do you do

1414
01:16:54,489 --> 01:17:02,599
it looks like we've got a little bit of

1415
01:16:56,810 --> 01:17:05,510
bugging in there looks like there's a

1416
01:17:02,600 --> 01:17:06,829
bit of a chromatic aberration right so

1417
01:17:05,510 --> 01:17:08,659
think we yet we do have a little bit of

1418
01:17:06,829 --> 01:17:10,539
a problem in there but not much let me

1419
01:17:08,659 --> 01:17:12,979
just see what that did to it okay so

1420
01:17:10,539 --> 01:17:15,079
yeah I mean you can already see though

1421
01:17:12,979 --> 01:17:17,239
like unless I unless I accidentally

1422
01:17:15,079 --> 01:17:19,460
removed some of the ops you can see that

1423
01:17:17,239 --> 01:17:21,349
that actually is a it's a reasonable

1424
01:17:19,460 --> 01:17:22,699
speed improvement so I do think that the

1425
01:17:21,350 --> 01:17:25,160
way we had written that before was just

1426
01:17:22,699 --> 01:17:27,409
a little bit Squinkie for the the

1427
01:17:25,159 --> 01:17:30,649
compiler probably wouldn't necessarily

1428
01:17:27,409 --> 01:17:33,439
know what was going on there so that's

1429
01:17:30,649 --> 01:17:35,659
not not as good so let's take

1430
01:17:33,439 --> 01:17:37,399
double-check let me see what I may have

1431
01:17:35,659 --> 01:17:38,569
screwed up there because again like I

1432
01:17:37,399 --> 01:17:39,799
didn't think particularly hard about

1433
01:17:38,569 --> 01:17:43,960
what we were doing here and I don't

1434
01:17:39,800 --> 01:17:47,539
really remember if this was going to be

1435
01:17:43,960 --> 01:17:49,909
yet an issue there so if you look at how

1436
01:17:47,539 --> 01:17:52,939
the broadcast multipliers work here so

1437
01:17:49,909 --> 01:17:56,289
we're selecting individual values out of

1438
01:17:52,939 --> 01:18:02,239
the out of the spec texels

1439
01:17:56,289 --> 01:18:05,029
which I think are loaded out of the

1440
01:18:02,239 --> 01:18:09,349
correct place and so if we're getting a

1441
01:18:05,029 --> 01:18:11,659
chromatic aberration there again here's

1442
01:18:09,350 --> 01:18:15,010
that transpose so that transpose is like

1443
01:18:11,659 --> 01:18:20,349
reinter leaving these things right and

1444
01:18:15,010 --> 01:18:20,350
that should be fine so

1445
01:18:25,350 --> 01:18:28,569
[Music]

1446
01:18:32,109 --> 01:18:41,359
yeah so let me just double-check what

1447
01:18:34,488 --> 01:18:44,058
we're computing our weights as so the

1448
01:18:41,359 --> 01:18:49,868
weights are packed in here

1449
01:18:44,059 --> 01:18:49,869
as what

1450
01:19:04,130 --> 01:19:11,819
so the weights are just packed in here

1451
01:19:06,269 --> 01:19:29,150
as the TX the tech selects is the

1452
01:19:11,819 --> 01:19:29,149
element oh hang on a second

1453
01:19:39,448 --> 01:19:43,738
so I guess that's fine because that's

1454
01:19:42,279 --> 01:19:46,569
just doing multiple of these at a time

1455
01:19:43,738 --> 01:19:48,459
which is what we would expect so this is

1456
01:19:46,569 --> 01:19:50,948
just figuring out multiple you know it's

1457
01:19:48,460 --> 01:19:56,349
producing it wants to produce four of

1458
01:19:50,948 --> 01:20:00,399
the destination pixel at once right

1459
01:19:56,349 --> 01:20:02,529
so that's unsurprising and so when it's

1460
01:20:00,399 --> 01:20:04,059
doing the multiply here it just wants to

1461
01:20:02,529 --> 01:20:05,618
broadcast because it's trying to produce

1462
01:20:04,060 --> 01:20:08,830
it's trying to take the source and spam

1463
01:20:05,618 --> 01:20:10,750
it out to the to the entire side of it

1464
01:20:08,829 --> 01:20:11,948
however so when I look at this I'm

1465
01:20:10,750 --> 01:20:13,479
trying to figure out where the heck is

1466
01:20:11,948 --> 01:20:20,428
that chromatic aberration then coming

1467
01:20:13,479 --> 01:20:20,428
from if we look at what's happening here

1468
01:20:20,550 --> 01:20:29,889
yeah so this is busted so this is

1469
01:20:24,479 --> 01:20:32,500
loading this is gonna go by entire this

1470
01:20:29,889 --> 01:20:35,349
is going to go buy an entire vector e is

1471
01:20:32,500 --> 01:20:43,979
the problem so this actually needs to be

1472
01:20:35,349 --> 01:20:47,260
more like this because that was loading

1473
01:20:43,979 --> 01:20:49,319
strided poorly it's supposed to load by

1474
01:20:47,260 --> 01:20:58,480
force and it was loading by twelves

1475
01:20:49,319 --> 01:21:00,460
right there we go so again we literally

1476
01:20:58,479 --> 01:21:03,399
just did nothing there I mean we didn't

1477
01:21:00,460 --> 01:21:07,118
even do anything but we got a speed wind

1478
01:21:03,399 --> 01:21:09,549
from it and again that's just because we

1479
01:21:07,118 --> 01:21:13,960
got rid of some cruft that the compiler

1480
01:21:09,550 --> 01:21:19,300
couldn't understand right so literally

1481
01:21:13,960 --> 01:21:21,039
all we did was I mean we we shave what

1482
01:21:19,300 --> 01:21:23,170
did that got significantly faster I

1483
01:21:21,039 --> 01:21:24,609
don't remember what the actual number

1484
01:21:23,170 --> 01:21:29,859
there was but it used to be 30 and now

1485
01:21:24,609 --> 01:21:34,389
it's ten percent of the time literally

1486
01:21:29,859 --> 01:21:36,339
just from rephrasing it right like all

1487
01:21:34,389 --> 01:21:38,170
we did was rephrase it for the compiler

1488
01:21:36,340 --> 01:21:42,279
and off we went

1489
01:21:38,170 --> 01:21:43,480
right so that just dumps a ton of junk

1490
01:21:42,279 --> 01:21:45,609
into the ALUs

1491
01:21:43,479 --> 01:21:51,669
lets him chew through it and that's a

1492
01:21:45,609 --> 01:21:53,738
reasonable improvement for us

1493
01:21:51,670 --> 01:21:56,289
what I don't know is to what extent

1494
01:21:53,738 --> 01:22:00,189
could we just get rid of some of these s

1495
01:21:56,289 --> 01:22:02,079
whys and that I don't know so it would

1496
01:22:00,189 --> 01:22:04,149
be relatively free for us to rephrase

1497
01:22:02,079 --> 01:22:06,698
this thing so that instead of working

1498
01:22:04,149 --> 01:22:09,639
the way that it works now instead what

1499
01:22:06,698 --> 01:22:12,519
it would do is it would just tell us

1500
01:22:09,640 --> 01:22:15,730
which row to load and so sometimes it

1501
01:22:12,520 --> 01:22:20,110
just wouldn't do that just wouldn't load

1502
01:22:15,729 --> 01:22:21,488
a road load a row at all right and so I

1503
01:22:20,109 --> 01:22:24,630
don't know to what extent we can

1504
01:22:21,488 --> 01:22:24,629
actually do that and

1505
01:22:34,090 --> 01:22:41,810
and I guess I wouldn't assume that it

1506
01:22:38,449 --> 01:22:44,000
would be very frequent but if we kept

1507
01:22:41,810 --> 01:22:46,070
our cosine fall-off a little bit sharper

1508
01:22:44,000 --> 01:22:50,060
you know we could imagine doing

1509
01:22:46,069 --> 01:22:56,840
something where we took the cosine

1510
01:22:50,060 --> 01:23:00,110
fall-off and we we sharpen it so that

1511
01:22:56,840 --> 01:23:02,300
it's not quite the cosine fall-off or

1512
01:23:00,109 --> 01:23:04,059
that it drops down you know it loses a

1513
01:23:02,300 --> 01:23:08,210
little bit of energy there or something

1514
01:23:04,060 --> 01:23:11,090
and keeps us from having to load certain

1515
01:23:08,210 --> 01:23:12,949
rows again not sure to what extent we

1516
01:23:11,090 --> 01:23:14,869
really should do that because I also

1517
01:23:12,949 --> 01:23:18,649
don't know we can maybe switch to this

1518
01:23:14,869 --> 01:23:20,630
to separable blur here and that would

1519
01:23:18,649 --> 01:23:24,949
just be way faster anyway because then

1520
01:23:20,630 --> 01:23:29,260
you don't have to do sixty-four wide you

1521
01:23:24,949 --> 01:23:29,260
just do eight wide summations right

1522
01:23:36,800 --> 01:23:42,779
and that might just be the smarter way

1523
01:23:39,960 --> 01:23:44,520
to go so let's think about that for one

1524
01:23:42,779 --> 01:23:48,389
second if we did want to make this be

1525
01:23:44,520 --> 01:23:51,989
something where we separated out those

1526
01:23:48,389 --> 01:23:56,368
some values just trying to think of what

1527
01:23:51,988 --> 01:24:00,598
the what the cosign actually looks like

1528
01:23:56,368 --> 01:24:01,889
in that case and you know could we I'm

1529
01:24:00,599 --> 01:24:02,969
just writing it could be switched to

1530
01:24:01,889 --> 01:24:11,159
some other thing I don't know how

1531
01:24:02,969 --> 01:24:13,319
separable cosign is but you know it

1532
01:24:11,158 --> 01:24:15,049
doesn't have to be a perfect cosign so

1533
01:24:13,319 --> 01:24:19,500
that's I was thinking like you know a

1534
01:24:15,050 --> 01:24:21,210
Gaussian blur is separable and a

1535
01:24:19,500 --> 01:24:25,590
Gaussian and a cosine are obviously very

1536
01:24:21,210 --> 01:24:30,719
closely related in that way so we could

1537
01:24:25,590 --> 01:24:34,050
theoretically just use you know a value

1538
01:24:30,719 --> 01:24:38,750
that was going to be separable then go

1539
01:24:34,050 --> 01:24:38,750
from there so if we look at like

1540
01:24:45,340 --> 01:24:50,890
a cosine curve and like

1541
01:24:57,430 --> 01:25:00,750
it's not right

1542
01:25:04,539 --> 01:25:10,069
um wait what's the right way to produce

1543
01:25:07,189 --> 01:25:19,549
the Gaussian curve I haven't done this

1544
01:25:10,069 --> 01:25:22,250
and so long hold on a second gasps you

1545
01:25:19,550 --> 01:25:33,560
know distribution is where's give me the

1546
01:25:22,250 --> 01:25:34,640
equation please because it's it's you

1547
01:25:33,560 --> 01:25:36,050
know it's what I wrote but you gotta

1548
01:25:34,640 --> 01:25:39,340
have the right parameters to make it

1549
01:25:36,050 --> 01:25:41,770
look useful so it's just the negative

1550
01:25:39,340 --> 01:25:44,350
well I guess we don't have to care about

1551
01:25:41,770 --> 01:25:52,340
specifically how we put it in there but

1552
01:25:44,350 --> 01:25:54,739
it's just that one there but and then we

1553
01:25:52,340 --> 01:25:58,340
got to shift it over by something right

1554
01:25:54,738 --> 01:25:59,689
because we need to come off of there it

1555
01:25:58,340 --> 01:26:01,430
probably isn't a particularly great

1556
01:25:59,689 --> 01:26:13,210
approximation for the cosine either way

1557
01:26:01,430 --> 01:26:13,210
but X minus B squared 2 over 2 C squared

1558
01:26:22,670 --> 01:26:40,970
No

1559
01:26:25,520 --> 01:26:40,970
I'm so bad at desmos yeah all right

1560
01:26:41,810 --> 01:26:45,620
Decimus is so good is that

1561
01:26:53,050 --> 01:27:03,170
it's like we need more parameters than

1562
01:26:55,369 --> 01:27:07,309
that a to the e negative X minus B

1563
01:27:03,170 --> 01:27:09,529
squared - C squared Oh did I put the

1564
01:27:07,310 --> 01:27:12,680
squared in the wrong place though let's

1565
01:27:09,529 --> 01:27:15,619
try that one more time there we go much

1566
01:27:12,680 --> 01:27:19,640
better and then I guess we also want the

1567
01:27:15,619 --> 01:27:24,680
a here can I get these sliders to be a

1568
01:27:19,640 --> 01:27:26,150
little bit more these need to be a

1569
01:27:24,680 --> 01:27:29,329
little bit more granular and currently

1570
01:27:26,149 --> 01:27:31,849
aren't but decimals is just so much fun

1571
01:27:29,329 --> 01:27:34,630
I mean look at how nice this is they

1572
01:27:31,850 --> 01:27:39,010
deserve some kind of award for something

1573
01:27:34,630 --> 01:27:39,010
right when you say

1574
01:27:43,119 --> 01:27:49,510
so you know it's not great but it's not

1575
01:27:47,149 --> 01:27:49,509
horrible

1576
01:27:50,020 --> 01:27:58,000
so if you take a look at how that's

1577
01:27:52,250 --> 01:27:58,000
summing up the values there right a

1578
01:27:58,390 --> 01:28:02,720
Gaussian is something that we can just

1579
01:28:00,289 --> 01:28:05,510
multiply on various axes and it would

1580
01:28:02,720 --> 01:28:07,159
produce the correct results and so we

1581
01:28:05,510 --> 01:28:09,680
wouldn't have to you know it would be a

1582
01:28:07,159 --> 01:28:12,019
shaping curve for this we could also

1583
01:28:09,680 --> 01:28:13,550
just multiply this on both axes we could

1584
01:28:12,020 --> 01:28:15,920
just use the cosine curve and multiply

1585
01:28:13,550 --> 01:28:17,329
that on both axe axes and just say hey

1586
01:28:15,920 --> 01:28:19,659
that's what it's what the answer is

1587
01:28:17,329 --> 01:28:19,659
going to be

1588
01:28:38,020 --> 01:28:44,239
so this is apparently you know just

1589
01:28:41,359 --> 01:28:47,359
randomly googling for it

1590
01:28:44,238 --> 01:28:51,109
this seems totally like something people

1591
01:28:47,359 --> 01:28:53,569
are okay with doing separable so I mean

1592
01:28:51,109 --> 01:28:55,848
I assume I don't actually know this is

1593
01:28:53,569 --> 01:28:58,759
this is just doing it in in one

1594
01:28:55,849 --> 01:29:05,000
frequency domain so but if we were to

1595
01:28:58,760 --> 01:29:07,550
just use this I know we can do this one

1596
01:29:05,000 --> 01:29:09,859
separable and I assume the cosine one if

1597
01:29:07,550 --> 01:29:12,800
we multiplied it would still be okay

1598
01:29:09,859 --> 01:29:18,589
it's basically a cosine squared fall-off

1599
01:29:12,800 --> 01:29:19,880
at that point I guess you could say not

1600
01:29:18,590 --> 01:29:29,119
sure how you would really look at that

1601
01:29:19,880 --> 01:29:32,900
but if you imagine the difference

1602
01:29:29,118 --> 01:29:36,859
between these two things like you know

1603
01:29:32,899 --> 01:29:40,399
would we really care which one of those

1604
01:29:36,859 --> 01:29:42,469
we were using you know probably not for

1605
01:29:40,399 --> 01:29:44,750
lighting especially because it's just

1606
01:29:42,469 --> 01:29:46,578
kind of made up anyway like there aren't

1607
01:29:44,750 --> 01:29:49,399
really surfaces that are going to be

1608
01:29:46,578 --> 01:29:51,828
reflecting things in a perfect Lamberson

1609
01:29:49,399 --> 01:29:53,359
distribution anyway so it's not like

1610
01:29:51,828 --> 01:29:56,000
there's something particularly

1611
01:29:53,359 --> 01:29:58,639
physically accurate about doing that as

1612
01:29:56,000 --> 01:30:02,270
opposed to doing that or vice versa

1613
01:29:58,639 --> 01:30:07,480
right so if that's the actual cosine

1614
01:30:02,270 --> 01:30:07,480
curve and we compute this as the actual

1615
01:30:07,510 --> 01:30:12,440
function for it it seems like that would

1616
01:30:10,010 --> 01:30:16,099
be fine you know what I mean like that

1617
01:30:12,439 --> 01:30:19,250
doesn't seem like a particularly bad

1618
01:30:16,099 --> 01:30:20,989
approximation so that's another thing

1619
01:30:19,250 --> 01:30:23,210
that we could do here instead of

1620
01:30:20,988 --> 01:30:27,848
actually looping over both of these we

1621
01:30:23,210 --> 01:30:31,908
could do something where we produce a

1622
01:30:27,849 --> 01:30:34,578
summed Rho value and then we produce

1623
01:30:31,908 --> 01:30:37,460
some column values out of those saundra

1624
01:30:34,578 --> 01:30:38,840
values you know what I'm saying and it

1625
01:30:37,460 --> 01:30:42,590
seems like that would maybe be the

1626
01:30:38,840 --> 01:30:47,230
smarter way to go so like we take each

1627
01:30:42,590 --> 01:30:50,360
position and we we do the cosine

1628
01:30:47,229 --> 01:30:51,109
fall-off curve if you were just doing it

1629
01:30:50,359 --> 01:30:53,118
by a row

1630
01:30:51,109 --> 01:30:56,509
and then we do the cosine curve if you

1631
01:30:53,118 --> 01:31:01,279
were just doing it by a column and we

1632
01:30:56,510 --> 01:31:03,560
call that our answer right and we could

1633
01:31:01,279 --> 01:31:05,710
leave both of these in place and take a

1634
01:31:03,560 --> 01:31:07,699
look if we actually see a particularly

1635
01:31:05,710 --> 01:31:11,329
noticeable difference between the

1636
01:31:07,698 --> 01:31:12,979
results in here and one thing I can do

1637
01:31:11,329 --> 01:31:15,469
is I can again because we haven't worked

1638
01:31:12,979 --> 01:31:24,379
on the quality yet I can turn the like

1639
01:31:15,469 --> 01:31:27,529
transmission rate of this thing down to

1640
01:31:24,380 --> 01:31:30,050
darken these as well if we want to do

1641
01:31:27,529 --> 01:31:32,448
that and that would allow us to kind of

1642
01:31:30,050 --> 01:31:34,550
see what they look like a little bit

1643
01:31:32,448 --> 01:31:36,049
better just because we're not trying to

1644
01:31:34,550 --> 01:31:40,010
do any exposure curves here so it's kind

1645
01:31:36,050 --> 01:31:42,020
of hard for us to see what are like

1646
01:31:40,010 --> 01:31:44,119
octagonal maps look like if they get

1647
01:31:42,020 --> 01:31:45,530
even you know to the brightness that we

1648
01:31:44,118 --> 01:31:47,089
would probably want them to be actually

1649
01:31:45,529 --> 01:31:49,448
we still wouldn't really be able to see

1650
01:31:47,090 --> 01:31:51,770
them very well so keeping it in here

1651
01:31:49,448 --> 01:31:55,539
would allow us to switch between those

1652
01:31:51,770 --> 01:31:55,540
two pretty pretty easily there right

1653
01:31:56,149 --> 01:32:00,979
so again just taking a look at what

1654
01:31:58,069 --> 01:32:03,649
we're producing for these maps as we go

1655
01:32:00,979 --> 01:32:05,779
if we now switch to separable what we

1656
01:32:03,649 --> 01:32:07,460
could do is see if there really is much

1657
01:32:05,779 --> 01:32:09,019
of a difference between the two that we

1658
01:32:07,460 --> 01:32:10,250
would care about for transmission and I

1659
01:32:09,020 --> 01:32:13,010
don't really know that there would be

1660
01:32:10,250 --> 01:32:17,060
right again these maps on the side here

1661
01:32:13,010 --> 01:32:19,400
are the actual light transfer maps and

1662
01:32:17,060 --> 01:32:20,630
so this is or rather that what we

1663
01:32:19,399 --> 01:32:22,009
actually computed for the lighting and

1664
01:32:20,630 --> 01:32:23,600
coming in various directions so these

1665
01:32:22,010 --> 01:32:25,340
are just the blurs on those that we use

1666
01:32:23,600 --> 01:32:26,960
for diffuse light for diffuse lighting

1667
01:32:25,340 --> 01:32:30,560
which also has to account for more

1668
01:32:26,960 --> 01:32:35,149
angles right so if we want to go ahead

1669
01:32:30,560 --> 01:32:37,070
and change that up if I go back into

1670
01:32:35,149 --> 01:32:43,429
this code and say what would we actually

1671
01:32:37,069 --> 01:32:46,130
do here to make that happen well in

1672
01:32:43,429 --> 01:32:49,760
order to do that we would do two of our

1673
01:32:46,130 --> 01:32:51,800
loops we would basically do the loops

1674
01:32:49,760 --> 01:32:54,199
twice so we would go down once doing the

1675
01:32:51,800 --> 01:32:58,810
rows and then we would go down one more

1676
01:32:54,198 --> 01:32:58,809
time doing the columns right

1677
01:32:59,969 --> 01:33:15,099
yeah so let's go ahead and put in if

1678
01:33:04,090 --> 01:33:17,710
you're around this here and let's see if

1679
01:33:15,099 --> 01:33:24,400
we can throw in a separable version of

1680
01:33:17,710 --> 01:33:25,960
it on the way out so one of the things

1681
01:33:24,399 --> 01:33:27,638
that's a little annoying about this just

1682
01:33:25,960 --> 01:33:35,380
looking at the values that are coming in

1683
01:33:27,639 --> 01:33:40,150
here I think I just kind of want to

1684
01:33:35,380 --> 01:33:43,569
sketch out the routine first so

1685
01:33:40,149 --> 01:33:46,018
basically this is this is this kernel

1686
01:33:43,569 --> 01:33:48,670
like basically this stuff right here

1687
01:33:46,019 --> 01:33:55,949
where we load a spec Texel from

1688
01:33:48,670 --> 01:33:58,989
somewhere and then we do the blend on it

1689
01:33:55,948 --> 01:34:01,558
I think we're still gonna want to do

1690
01:33:58,988 --> 01:34:05,439
this right so we're gonna want to load

1691
01:34:01,559 --> 01:34:07,150
the sy tiles and go down the rows and

1692
01:34:05,439 --> 01:34:09,969
we're gonna want to do this operation

1693
01:34:07,149 --> 01:34:13,748
the same way we're doing it here where

1694
01:34:09,969 --> 01:34:16,899
we are summing up four of these at a

1695
01:34:13,748 --> 01:34:19,300
time and then we write them out right so

1696
01:34:16,899 --> 01:34:26,618
I think this structure actually still

1697
01:34:19,300 --> 01:34:32,320
remains this right here so this would

1698
01:34:26,618 --> 01:34:35,558
produce the first pass where we you know

1699
01:34:32,319 --> 01:34:44,228
we reproduce output values that are sums

1700
01:34:35,559 --> 01:34:46,510
of rows right and the difference is we'd

1701
01:34:44,229 --> 01:34:49,239
actually write out so rather than

1702
01:34:46,510 --> 01:34:53,530
summing this here we would actually be

1703
01:34:49,238 --> 01:34:56,078
summing it like here right and this s

1704
01:34:53,529 --> 01:34:59,998
why we would also use to determine where

1705
01:34:56,078 --> 01:34:59,998
we were writing it out you know

1706
01:35:06,899 --> 01:35:10,839
now we probably don't really actually

1707
01:35:09,369 --> 01:35:12,819
need to do the transpose there because

1708
01:35:10,840 --> 01:35:14,680
when we load it we would because we're

1709
01:35:12,819 --> 01:35:16,599
gonna do another op on this right so we

1710
01:35:14,680 --> 01:35:18,670
could probably leave it in the form that

1711
01:35:16,600 --> 01:35:20,710
it is and then only do the transfer

1712
01:35:18,670 --> 01:35:22,600
transpose once at the end but we can

1713
01:35:20,710 --> 01:35:24,130
talk about that in a second so this

1714
01:35:22,600 --> 01:35:27,579
would basically run through the entire

1715
01:35:24,130 --> 01:35:29,470
thing once right and in fact we could

1716
01:35:27,579 --> 01:35:33,970
change that sy and and just look at it

1717
01:35:29,470 --> 01:35:36,039
as like a tu I as well right so if here

1718
01:35:33,970 --> 01:35:38,079
I basically said like yeah we're gonna

1719
01:35:36,039 --> 01:35:41,229
use T Y into X here we're gonna delete

1720
01:35:38,079 --> 01:35:45,090
the sy version of this thing and so in

1721
01:35:41,229 --> 01:35:49,409
here it would just literally be back

1722
01:35:45,090 --> 01:35:52,060
right so we go through we load the the

1723
01:35:49,409 --> 01:35:54,849
the weights out we would do the

1724
01:35:52,060 --> 01:35:57,760
summation here we would output the value

1725
01:35:54,850 --> 01:36:00,760
and that would run through the array one

1726
01:35:57,760 --> 01:36:06,730
time and then we would then we would

1727
01:36:00,760 --> 01:36:09,640
also want our second pass to be exactly

1728
01:36:06,729 --> 01:36:12,369
the same only now when we do it we're

1729
01:36:09,640 --> 01:36:18,369
gonna be doing by columns right so where

1730
01:36:12,369 --> 01:36:19,930
we load values out of the the where we

1731
01:36:18,369 --> 01:36:24,659
load values they're going to be from the

1732
01:36:19,930 --> 01:36:24,659
diffuse texels not the spec texels right

1733
01:36:25,529 --> 01:36:32,099
there like intermediate texels and so we

1734
01:36:28,930 --> 01:36:32,100
would get these out of the

1735
01:36:39,600 --> 01:36:46,960
you know something would happen here

1736
01:36:41,949 --> 01:36:49,960
right we would then load rows of the

1737
01:36:46,960 --> 01:36:54,939
inte Texel out so we would be loading

1738
01:36:49,960 --> 01:36:58,119
like for wide trying to think of how you

1739
01:36:54,939 --> 01:37:03,250
would even do this exactly the for the

1740
01:36:58,119 --> 01:37:04,390
the problem with it is you actually the

1741
01:37:03,250 --> 01:37:06,520
problem is actually the intermediate

1742
01:37:04,390 --> 01:37:10,840
storage so you actually would want to

1743
01:37:06,520 --> 01:37:12,490
just be leaving things as ours so I

1744
01:37:10,840 --> 01:37:15,400
guess you would just load for wide and

1745
01:37:12,489 --> 01:37:19,359
do four columns at once and then you

1746
01:37:15,399 --> 01:37:27,399
would Swizzle the four columns to write

1747
01:37:19,359 --> 01:37:28,659
them out I think yeah so I think then

1748
01:37:27,399 --> 01:37:31,509
what you would do here is you say all

1749
01:37:28,659 --> 01:37:32,769
right we're then gonna load four columns

1750
01:37:31,510 --> 01:37:37,930
at once and we know there's eight

1751
01:37:32,770 --> 01:37:41,350
columns so yet you would load those you

1752
01:37:37,930 --> 01:37:49,210
would sum across the column and output

1753
01:37:41,350 --> 01:37:50,440
the value right like I have time to

1754
01:37:49,210 --> 01:37:55,480
finish this today this will have to be

1755
01:37:50,439 --> 01:38:00,489
tomorrow so yes so in order to load the

1756
01:37:55,479 --> 01:38:03,069
correct columns here we would probably

1757
01:38:00,489 --> 01:38:04,059
still just do the lows manually and

1758
01:38:03,069 --> 01:38:05,439
again we're gonna have to pretty much

1759
01:38:04,060 --> 01:38:06,460
bake these values like we're there

1760
01:38:05,439 --> 01:38:09,460
Lupe's gonna have to be written

1761
01:38:06,460 --> 01:38:11,649
customized I think to a particular size

1762
01:38:09,460 --> 01:38:13,869
I don't think we can leave it flexible

1763
01:38:11,649 --> 01:38:15,639
but I mean it's kind of not already not

1764
01:38:13,869 --> 01:38:21,819
flexible here right like this already

1765
01:38:15,640 --> 01:38:24,670
assumes a certain number of these anyway

1766
01:38:21,819 --> 01:38:26,679
so if we go in here and say all right

1767
01:38:24,670 --> 01:38:32,850
for these we'd have to load all eight

1768
01:38:26,680 --> 01:38:32,850
columns in that looks more like this

1769
01:38:34,949 --> 01:38:41,340
we'd have to do all of the ops on them

1770
01:38:39,029 --> 01:38:45,439
and the problem that you would then get

1771
01:38:41,340 --> 01:38:48,140
is you can't actually write them out

1772
01:38:45,439 --> 01:38:51,809
because they're in the wrong format so

1773
01:38:48,140 --> 01:39:02,190
yeah it's just really ugly you would

1774
01:38:51,810 --> 01:39:05,480
have to do the ops here so maybe you

1775
01:39:02,189 --> 01:39:05,479
would transpose here

1776
01:39:10,908 --> 01:39:14,448
let me think about this

1777
01:39:39,529 --> 01:39:46,859
so I suppose another way to look at this

1778
01:39:42,658 --> 01:39:50,779
would be that if you were going to just

1779
01:39:46,859 --> 01:39:50,779
replicate the weights themselves

1780
01:40:01,210 --> 01:40:07,329
I'm trying to think of what I'm saying

1781
01:40:02,920 --> 01:40:08,920
is true if you were just gonna replicate

1782
01:40:07,329 --> 01:40:12,479
the wage themselves could we maybe just

1783
01:40:08,920 --> 01:40:12,480
leave this an RGB the entire time

1784
01:40:18,059 --> 01:40:26,760
I think we probably could so you know

1785
01:40:24,719 --> 01:40:28,889
bear with me for a minute so suppose in

1786
01:40:26,760 --> 01:40:33,949
here as we load across this road we

1787
01:40:28,889 --> 01:40:36,538
don't actually do any broadcasting right

1788
01:40:33,948 --> 01:40:38,398
so what this is doing here is it's

1789
01:40:36,538 --> 01:40:40,768
saying well I need to produce the R

1790
01:40:38,399 --> 01:40:43,109
value for this thing right

1791
01:40:40,769 --> 01:40:47,039
and so rather than thinking of it as

1792
01:40:43,109 --> 01:40:48,510
looking as a RGB RGB whatever like you

1793
01:40:47,038 --> 01:40:50,219
know what if we've said instead of that

1794
01:40:48,510 --> 01:40:52,800
like that's not what we're going to do

1795
01:40:50,219 --> 01:40:56,668
so instead we just said like look this

1796
01:40:52,800 --> 01:41:05,248
is like RGB like this is you know this

1797
01:40:56,668 --> 01:41:09,328
is just element zero right trying to

1798
01:41:05,248 --> 01:41:10,378
sketch out what this might look like so

1799
01:41:09,328 --> 01:41:11,728
suppose we were just going to start

1800
01:41:10,378 --> 01:41:13,139
computing elements here and we said look

1801
01:41:11,729 --> 01:41:14,609
this these weights are going to be like

1802
01:41:13,139 --> 01:41:16,469
set up so that they multiply this thing

1803
01:41:14,609 --> 01:41:19,679
properly and we have like this broadcast

1804
01:41:16,469 --> 01:41:23,038
and instead of doing the broadcast we're

1805
01:41:19,679 --> 01:41:25,168
just going to say look s zero we know

1806
01:41:23,038 --> 01:41:26,878
that we could figure out what the values

1807
01:41:25,168 --> 01:41:30,238
are that want to multiply it in to

1808
01:41:26,878 --> 01:41:34,588
produce a zero right so we could just

1809
01:41:30,238 --> 01:41:36,418
say instead like no it's just that right

1810
01:41:34,588 --> 01:41:41,219
so we're just doing the multiply between

1811
01:41:36,418 --> 01:41:43,858
these two and then what we want to do is

1812
01:41:41,219 --> 01:41:47,088
just sum those up so we're just going to

1813
01:41:43,859 --> 01:41:47,088
do like

1814
01:41:57,819 --> 01:42:06,199
that so we just have weights for each of

1815
01:42:04,220 --> 01:42:11,690
the things that we actually want to load

1816
01:42:06,199 --> 01:42:23,630
out I mean I guess trying to think

1817
01:42:11,689 --> 01:42:25,729
exactly what this does here so and it

1818
01:42:23,630 --> 01:42:40,159
wouldn't be because the weights now are

1819
01:42:25,729 --> 01:42:41,329
also not based on oops the weights now

1820
01:42:40,159 --> 01:42:45,529
would not be based on anything in

1821
01:42:41,329 --> 01:42:47,689
particular because if we're just doing a

1822
01:42:45,529 --> 01:42:49,130
row and then column weights we have far

1823
01:42:47,689 --> 01:42:53,419
fewer weights there aren't sixty-four

1824
01:42:49,130 --> 01:42:54,890
weights anymore right so what we could

1825
01:42:53,420 --> 01:42:56,029
do is say look we're just going to

1826
01:42:54,890 --> 01:42:58,300
record the weights that we would

1827
01:42:56,029 --> 01:43:01,670
actually use for this further multiply

1828
01:42:58,300 --> 01:43:04,430
we'll do the multiply and for each

1829
01:43:01,670 --> 01:43:07,100
output element that we have for the row

1830
01:43:04,430 --> 01:43:08,659
of which we know well and in fact we can

1831
01:43:07,100 --> 01:43:13,430
just write it immediately at that point

1832
01:43:08,659 --> 01:43:15,019
right it's just a store so we can just

1833
01:43:13,430 --> 01:43:16,090
say yeah we're gonna write this thing

1834
01:43:15,020 --> 01:43:19,409
out

1835
01:43:16,090 --> 01:43:19,409
[Music]

1836
01:43:24,569 --> 01:43:35,799
somewhere right and off we go and we

1837
01:43:31,118 --> 01:43:37,948
would just do this for each of the six

1838
01:43:35,800 --> 01:43:37,949
elements

1839
01:43:59,850 --> 01:44:05,260
so like that's one way we could do it so

1840
01:44:02,800 --> 01:44:09,550
we just record like what each of these

1841
01:44:05,260 --> 01:44:12,789
weights is supposed to be in some kind

1842
01:44:09,550 --> 01:44:17,170
of a like weight distribution thing

1843
01:44:12,789 --> 01:44:18,850
right furthermore actually like thinking

1844
01:44:17,170 --> 01:44:23,640
about this a little bit more it doesn't

1845
01:44:18,850 --> 01:44:23,640
really even need to be something like

1846
01:44:23,969 --> 01:44:30,060
it's not structured anymore cuz it's

1847
01:44:26,710 --> 01:44:32,770
literally just one set of weights and

1848
01:44:30,060 --> 01:44:35,430
you would apply it in both cases I think

1849
01:44:32,770 --> 01:44:37,690
maybe that's not true

1850
01:44:35,430 --> 01:44:39,100
do the same set of weights in both cases

1851
01:44:37,689 --> 01:44:41,399
but they might be formatted slightly

1852
01:44:39,100 --> 01:44:41,400
differently

1853
01:44:59,100 --> 01:45:03,910
so if we actually just loaded things in

1854
01:45:02,619 --> 01:45:05,529
multiplied by the weights and

1855
01:45:03,909 --> 01:45:07,389
accumulated and that was actually the

1856
01:45:05,529 --> 01:45:08,800
value that we stored in there that would

1857
01:45:07,390 --> 01:45:13,890
give us you know

1858
01:45:08,800 --> 01:45:13,890
so it'd be 36 you know Max or whatever

1859
01:45:14,159 --> 01:45:28,869
per row so it would be 288 of those and

1860
01:45:24,850 --> 01:45:36,010
then another 288 of those in the other

1861
01:45:28,869 --> 01:45:39,819
direction right so it'd be like half the

1862
01:45:36,010 --> 01:45:42,480
number and that seems like not as much

1863
01:45:39,819 --> 01:45:42,479
as it should be

1864
01:45:45,510 --> 01:45:49,900
although that probably was multiplied by

1865
01:45:48,069 --> 01:45:55,389
three wasn't it I don't know if we were

1866
01:45:49,899 --> 01:45:57,159
looking at that correctly before but in

1867
01:45:55,390 --> 01:45:59,230
fact how what is the actual number here

1868
01:45:57,159 --> 01:46:02,019
so now cuz then you can see it pretty

1869
01:45:59,229 --> 01:46:03,879
easily now so if we take a look at how

1870
01:46:02,020 --> 01:46:06,040
many are in here we've got eight times

1871
01:46:03,880 --> 01:46:08,880
two times eight and on the interior

1872
01:46:06,039 --> 01:46:11,949
there's like what

1873
01:46:08,880 --> 01:46:16,630
one two three four five six seven eight

1874
01:46:11,949 --> 01:46:20,399
so eight times three so there's 24 max

1875
01:46:16,630 --> 01:46:20,400
eight times two times eight times 24

1876
01:46:22,140 --> 01:46:24,550
yeah

1877
01:46:23,350 --> 01:46:28,450
so it wasn't applied by 3 there was

1878
01:46:24,550 --> 01:46:32,159
we've got the three in there so I yeah

1879
01:46:28,449 --> 01:46:32,159
if you take a look at the ratio

1880
01:46:39,109 --> 01:46:46,039
it would be about five times faster in

1881
01:46:43,130 --> 01:46:47,630
theory if we did it this way unless

1882
01:46:46,039 --> 01:46:50,989
there's some other like intervening

1883
01:46:47,630 --> 01:46:53,539
factor right so you would come through

1884
01:46:50,989 --> 01:46:58,599
here you would load up a row you would

1885
01:46:53,539 --> 01:47:01,220
compute what the smoosh of that row is

1886
01:46:58,600 --> 01:47:10,910
in RGB directly

1887
01:47:01,220 --> 01:47:21,890
you wouldn't like unsuited don't know if

1888
01:47:10,909 --> 01:47:23,029
I can I think yeah I don't know if we

1889
01:47:21,890 --> 01:47:24,200
can actually do this because if you

1890
01:47:23,029 --> 01:47:25,550
think about what has to happen here so

1891
01:47:24,199 --> 01:47:30,099
in order to get the correct value in the

1892
01:47:25,550 --> 01:47:32,690
first slot weights times so0

1893
01:47:30,100 --> 01:47:40,310
it doesn't actually have a way to get

1894
01:47:32,689 --> 01:47:41,960
that other are in there right like these

1895
01:47:40,310 --> 01:47:43,760
don't allow you to do the cross terms

1896
01:47:41,960 --> 01:47:47,060
properly so I don't think we can

1897
01:47:43,760 --> 01:47:48,560
actually do it this way unfortunately so

1898
01:47:47,060 --> 01:47:55,240
I'm not sure I'm gonna save this for

1899
01:47:48,560 --> 01:47:57,320
tomorrow I'll get rid of this for now

1900
01:47:55,239 --> 01:48:00,289
we'll have to think about how to do it

1901
01:47:57,319 --> 01:48:02,239
exactly because it's really just a

1902
01:48:00,289 --> 01:48:05,060
question of how do we get that it's just

1903
01:48:02,239 --> 01:48:07,279
how do we get stuff in the right spot so

1904
01:48:05,060 --> 01:48:09,260
for now we'll just say look we know we

1905
01:48:07,279 --> 01:48:11,119
can get that we know we got a good

1906
01:48:09,260 --> 01:48:12,230
savings out of it just by making it a

1907
01:48:11,119 --> 01:48:15,590
little bit clearer to the compiler how

1908
01:48:12,229 --> 01:48:19,449
to do it and so now it's just a question

1909
01:48:15,590 --> 01:48:21,500
of can we improve it further from there

1910
01:48:19,449 --> 01:48:23,949
but otherwise it seems okay we'll go to

1911
01:48:21,500 --> 01:48:23,949
a quick Q&amp;A

1912
01:49:14,559 --> 01:49:23,929
are there any caching concerns so I

1913
01:49:22,069 --> 01:49:26,880
don't know that there are any caching

1914
01:49:23,929 --> 01:49:30,310
concerns with the voxel

1915
01:49:26,880 --> 01:49:30,310
[Music]

1916
01:49:43,170 --> 01:49:56,920
so yeah so what do we say it's that so I

1917
01:49:55,569 --> 01:49:58,179
don't know that there's any cash against

1918
01:49:56,920 --> 01:50:00,158
turn to the Vox at the moment cuz it's

1919
01:49:58,179 --> 01:50:03,190
so large that we will not be getting

1920
01:50:00,158 --> 01:50:04,359
good cash out of it really in terms of

1921
01:50:03,189 --> 01:50:09,219
anything other than just regular

1922
01:50:04,359 --> 01:50:11,829
streaming performance right now that can

1923
01:50:09,219 --> 01:50:14,679
be improved by switching away from float

1924
01:50:11,829 --> 01:50:16,210
we would start to get down to areas

1925
01:50:14,679 --> 01:50:19,179
where we might actually be able to do

1926
01:50:16,210 --> 01:50:21,670
something good there and furthermore if

1927
01:50:19,179 --> 01:50:25,719
we wanted to we could get like really

1928
01:50:21,670 --> 01:50:28,719
down into reasonable range by also again

1929
01:50:25,719 --> 01:50:30,460
reducing the number of stacked voxels

1930
01:50:28,719 --> 01:50:33,819
we've got we could also do some things

1931
01:50:30,460 --> 01:50:37,480
like play with the resolution in terms

1932
01:50:33,819 --> 01:50:39,250
of Y as well so there's a lot of things

1933
01:50:37,479 --> 01:50:41,379
we could do to shrink the amount of data

1934
01:50:39,250 --> 01:50:44,170
that we're working with the biggest one

1935
01:50:41,380 --> 01:50:45,810
would be not using floats anymore and we

1936
01:50:44,170 --> 01:50:48,489
could definitely experiment with that

1937
01:50:45,810 --> 01:50:51,670
but at the moment yeah we're fully blown

1938
01:50:48,488 --> 01:50:55,059
out right now and so we are not gonna be

1939
01:50:51,670 --> 01:51:00,130
in a particularly great cash land at the

1940
01:50:55,060 --> 01:51:02,860
moment now that said separate from that

1941
01:51:00,130 --> 01:51:06,130
I think we have done a good job with

1942
01:51:02,859 --> 01:51:08,469
caching concerns in terms of the order

1943
01:51:06,130 --> 01:51:10,510
in which we're working on things so what

1944
01:51:08,469 --> 01:51:14,158
you'll notice is we very specifically

1945
01:51:10,510 --> 01:51:19,869
and I did this 100% intentionally right

1946
01:51:14,158 --> 01:51:24,158
each tile is updated by itself so on a

1947
01:51:19,869 --> 01:51:27,039
particular thread it loads operates and

1948
01:51:24,158 --> 01:51:29,698
writes completely one tile at a time and

1949
01:51:27,039 --> 01:51:34,479
the reason for that is that way although

1950
01:51:29,698 --> 01:51:40,059
we do have no real good control over the

1951
01:51:34,479 --> 01:51:41,889
sampling of the diffuse map which we

1952
01:51:40,060 --> 01:51:44,260
randomly have to pull from because we

1953
01:51:41,890 --> 01:51:46,000
have no idea like as the Rays go out we

1954
01:51:44,260 --> 01:51:48,190
have no idea which one's gonna hit in

1955
01:51:46,000 --> 01:51:49,929
terms of the operating on and writing

1956
01:51:48,189 --> 01:51:53,289
out of the diffuse map that is done

1957
01:51:49,929 --> 01:51:54,670
completely contained and so when we want

1958
01:51:53,289 --> 01:51:55,988
to turn the ratchet on that we're in

1959
01:51:54,670 --> 01:51:57,069
very good shape to do so and we're

1960
01:51:55,988 --> 01:51:59,618
already probably getting four

1961
01:51:57,069 --> 01:52:02,920
good caching there because we don't do

1962
01:51:59,618 --> 01:52:04,658
anything funky right so that was

1963
01:52:02,920 --> 01:52:07,239
intentional and that's to keep us from

1964
01:52:04,658 --> 01:52:09,488
writing scattered scattered if we wrote

1965
01:52:07,238 --> 01:52:18,789
scattered we would be in big trouble but

1966
01:52:09,488 --> 01:52:21,488
we don't do that um I don't know that

1967
01:52:18,789 --> 01:52:23,500
there's anything simple you can do to

1968
01:52:21,488 --> 01:52:27,428
reduce the amount of flicker if you want

1969
01:52:23,500 --> 01:52:30,670
it to be very stable and still be fast

1970
01:52:27,429 --> 01:52:32,590
when you update you certainly can but

1971
01:52:30,670 --> 01:52:37,000
you're just in the realm of denoising so

1972
01:52:32,590 --> 01:52:38,289
at that point you have to have you got

1973
01:52:37,000 --> 01:52:41,979
to start looking at your at filtering

1974
01:52:38,289 --> 01:52:46,510
right like how you're gonna filter the

1975
01:52:41,979 --> 01:52:48,848
results I think probably there's if you

1976
01:52:46,510 --> 01:52:50,320
were an expert at filtering it probably

1977
01:52:48,849 --> 01:52:51,340
wouldn't take you very long to clean up

1978
01:52:50,319 --> 01:52:55,719
these results because there's not very

1979
01:52:51,340 --> 01:52:57,369
much flicker so basically what you're

1980
01:52:55,719 --> 01:53:02,849
looking at there is just you've got a

1981
01:52:57,368 --> 01:53:02,848
filter and that is something that you

1982
01:53:03,359 --> 01:53:09,009
you probably want to be more of an

1983
01:53:05,920 --> 01:53:10,539
expert on than I am to know how long it

1984
01:53:09,010 --> 01:53:13,389
would take you to reasonably build a

1985
01:53:10,539 --> 01:53:15,840
good denoising system for this kind of a

1986
01:53:13,389 --> 01:53:15,840
thing right

1987
01:53:34,149 --> 01:53:38,569
the light series repeating out so have

1988
01:53:36,229 --> 01:53:40,368
the light box is it still there and if

1989
01:53:38,569 --> 01:53:41,809
so is the de modulus is you know so

1990
01:53:40,368 --> 01:53:45,589
that's just because of the textile

1991
01:53:41,810 --> 01:53:48,469
lookups so right now we we're at the

1992
01:53:45,590 --> 01:53:50,090
textile wraps right so when it does

1993
01:53:48,469 --> 01:53:51,439
lighting it's just gonna light outside

1994
01:53:50,090 --> 01:53:53,900
of it we don't care about that because

1995
01:53:51,439 --> 01:53:55,609
you can never see outside there right

1996
01:53:53,899 --> 01:53:58,578
the only reason we're ever seeing that

1997
01:53:55,609 --> 01:54:01,339
stuff right now is because we aren't

1998
01:53:58,578 --> 01:54:05,090
actually properly centering our so like

1999
01:54:01,340 --> 01:54:08,469
if you look at what's happening here and

2000
01:54:05,090 --> 01:54:11,810
you pull out right you see that voxel

2001
01:54:08,469 --> 01:54:14,029
right now we're letting some some

2002
01:54:11,810 --> 01:54:16,880
garbage happen like this should just be

2003
01:54:14,029 --> 01:54:18,979
sliding as we move so the place that

2004
01:54:16,880 --> 01:54:20,810
you're looking at the camera should

2005
01:54:18,979 --> 01:54:23,059
always be in the center and right now

2006
01:54:20,810 --> 01:54:25,550
since we're not doing that you know you

2007
01:54:23,060 --> 01:54:27,829
can still get times when you will see

2008
01:54:25,550 --> 01:54:30,889
across the edge of it we never want to

2009
01:54:27,828 --> 01:54:32,929
allow that to happen so we have to fix

2010
01:54:30,889 --> 01:54:34,099
that slide anyway and that's just a

2011
01:54:32,929 --> 01:54:35,690
question of writing the code that

2012
01:54:34,099 --> 01:54:38,239
properly aligns it to with where you're

2013
01:54:35,689 --> 01:54:39,948
looking and that's all we have to do so

2014
01:54:38,238 --> 01:54:41,689
I don't care that the lighting repeats

2015
01:54:39,948 --> 01:54:43,759
out here because we don't we'll never

2016
01:54:41,689 --> 01:54:47,000
see it you'll never you will never see

2017
01:54:43,760 --> 01:54:49,179
that on the screen so I should be fine

2018
01:54:47,000 --> 01:54:49,179
with that

2019
01:54:51,969 --> 01:54:57,139
you mentioned something about shaders

2020
01:54:54,250 --> 01:54:58,819
being better at this kind of job I lost

2021
01:54:57,139 --> 01:55:00,170
your point on that because of me being

2022
01:54:58,819 --> 01:55:04,090
for the environment can you please

2023
01:55:00,170 --> 01:55:06,109
explain this a little bit more um yes so

2024
01:55:04,090 --> 01:55:13,270
one of the things that you'll notice is

2025
01:55:06,109 --> 01:55:15,738
like when we wrote our shader code okay

2026
01:55:13,270 --> 01:55:20,329
you'll notice that we never had to think

2027
01:55:15,738 --> 01:55:23,718
about Cindy at all ever right

2028
01:55:20,328 --> 01:55:26,179
we literally never ever ever wrote

2029
01:55:23,719 --> 01:55:29,000
anything in here that had anything to do

2030
01:55:26,179 --> 01:55:30,859
with Cindy we just wrote this is this

2031
01:55:29,000 --> 01:55:35,389
just looks like regular code that

2032
01:55:30,859 --> 01:55:38,000
operates on like one value right and yet

2033
01:55:35,389 --> 01:55:40,219
when we write CPU code that does

2034
01:55:38,000 --> 01:55:43,309
basically the same thing we have to do

2035
01:55:40,219 --> 01:55:46,429
all of this mental work ourselves you

2036
01:55:43,309 --> 01:55:48,039
know and the question is why is that and

2037
01:55:46,429 --> 01:55:53,930
the answer is very simple

2038
01:55:48,039 --> 01:55:57,829
the GPU already has in it the proper

2039
01:55:53,930 --> 01:56:02,119
memory cross barring on loads to turn

2040
01:55:57,829 --> 01:56:05,840
things that are packed RGB RGB RGB into

2041
01:56:02,119 --> 01:56:07,609
ours G's and B's and then when it's done

2042
01:56:05,840 --> 01:56:12,230
it has the bar to write them back out

2043
01:56:07,609 --> 01:56:16,750
that way so rather than us having to do

2044
01:56:12,229 --> 01:56:19,609
all of our code that way

2045
01:56:16,750 --> 01:56:22,640
GPUs were just like hey you know

2046
01:56:19,609 --> 01:56:25,819
everyone needs to store things compactly

2047
01:56:22,640 --> 01:56:29,300
as little units that should be packed X

2048
01:56:25,819 --> 01:56:32,809
Y Z X Y Z RGB RGB let's just make a

2049
01:56:29,300 --> 01:56:34,789
thing that will unpack those into ours

2050
01:56:32,810 --> 01:56:37,600
Gees and B's while we're computing them

2051
01:56:34,789 --> 01:56:41,029
and then put them back when we're done

2052
01:56:37,600 --> 01:56:43,579
intel just never did it they just simply

2053
01:56:41,029 --> 01:56:47,000
didn't do it and I don't know why they

2054
01:56:43,579 --> 01:56:48,649
didn't do it it must have been too hard

2055
01:56:47,000 --> 01:56:50,270
for them to do in the store buffers or

2056
01:56:48,649 --> 01:56:53,029
something or the load buffers I don't

2057
01:56:50,270 --> 01:56:56,090
know but they just never did it and so

2058
01:56:53,029 --> 01:56:57,469
it's all this huge headache when you

2059
01:56:56,090 --> 01:56:59,449
want to do something and you decide to

2060
01:56:57,470 --> 01:57:02,350
do on the CPU side it's this huge

2061
01:56:59,449 --> 01:57:07,069
headache it really sucks

2062
01:57:02,350 --> 01:57:11,050
and with avx-512 because that was

2063
01:57:07,069 --> 01:57:13,909
designed originally as a shader API so

2064
01:57:11,050 --> 01:57:19,840
avx-512 was originally ler Ben I which

2065
01:57:13,909 --> 01:57:22,189
was originally for GPU right that has

2066
01:57:19,840 --> 01:57:24,770
proper it's called scattered gathers

2067
01:57:22,189 --> 01:57:28,039
what that's called it has proper scatter

2068
01:57:24,770 --> 01:57:31,550
gather so that actually finally you can

2069
01:57:28,039 --> 01:57:35,390
just load and do your Swizzle on the

2070
01:57:31,550 --> 01:57:39,739
load and it's free right do your work

2071
01:57:35,390 --> 01:57:41,780
and then write it out scattered so it's

2072
01:57:39,739 --> 01:57:46,939
the same is true with neon and if you

2073
01:57:41,779 --> 01:57:51,590
ever seen that but the arm SSE has that

2074
01:57:46,939 --> 01:57:56,149
in it so basically the problem is just

2075
01:57:51,590 --> 01:58:00,650
that on the CPU side there is no way to

2076
01:57:56,149 --> 01:58:01,098
actually do it clean you can't load pack

2077
01:58:00,649 --> 01:58:04,458
day

2078
01:58:01,099 --> 01:58:07,340
and get it out into properly aligned

2079
01:58:04,458 --> 01:58:12,648
form without a crap-ton of shuffles as

2080
01:58:07,340 --> 01:58:14,809
you've seen right and so that's just

2081
01:58:12,649 --> 01:58:19,099
it's just a limitation of the hardware

2082
01:58:14,809 --> 01:58:21,649
if at some point avx-512 became a

2083
01:58:19,099 --> 01:58:25,128
standard feature set which at this point

2084
01:58:21,649 --> 01:58:26,919
may like literally never happen I mean I

2085
01:58:25,128 --> 01:58:29,569
don't even know if Intel's gonna be

2086
01:58:26,918 --> 01:58:33,260
shipping the chips that anyone cares

2087
01:58:29,569 --> 01:58:36,408
about anymore like I mean AMD is by far

2088
01:58:33,260 --> 01:58:39,050
the performance leader now like I mean

2089
01:58:36,408 --> 01:58:41,089
they are just crushing Intel and will

2090
01:58:39,050 --> 01:58:43,550
continue to do so like Intel can't even

2091
01:58:41,090 --> 01:58:46,699
manage to fab new chips anymore

2092
01:58:43,550 --> 01:58:48,439
it would seem so like I don't even know

2093
01:58:46,698 --> 01:58:51,618
if we'll get avx-512

2094
01:58:48,439 --> 01:58:54,439
it may never happen right it may be that

2095
01:58:51,618 --> 01:58:57,738
like you know sort of a marginal set of

2096
01:58:54,439 --> 01:59:01,039
Intel chip supports avx-512 AMD never

2097
01:58:57,738 --> 01:59:04,069
adopts it and AMD is dominant in the x64

2098
01:59:01,038 --> 01:59:07,158
space neon of course is its own thing

2099
01:59:04,069 --> 01:59:08,688
and arm you know may become more

2100
01:59:07,158 --> 01:59:13,608
dominant as well it's already is pretty

2101
01:59:08,689 --> 01:59:15,699
dominant a lot of ways and so you know

2102
01:59:13,609 --> 01:59:18,760
it may be that we never get FAS 512 I

2103
01:59:15,698 --> 01:59:18,759
don't know

2104
01:59:38,149 --> 01:59:46,920
hmm yeah and just to be clear like so

2105
01:59:42,029 --> 01:59:49,529
features like Jaso a a OS stuff while

2106
01:59:46,920 --> 01:59:51,390
obviously a good thing and you want your

2107
01:59:49,529 --> 01:59:52,979
language to make it easy for you to

2108
01:59:51,390 --> 01:59:55,340
write things that reorganize your data

2109
01:59:52,979 --> 01:59:57,629
without you having to rewrite your code

2110
01:59:55,340 --> 02:00:00,989
one of the problems with it again is

2111
01:59:57,630 --> 02:00:02,940
that that there's nothing J I can really

2112
02:00:00,989 --> 02:00:05,729
do to solve this particular problem

2113
02:00:02,939 --> 02:00:08,429
right because the problem is we need

2114
02:00:05,729 --> 02:00:12,000
this data in the same format as the GPU

2115
02:00:08,430 --> 02:00:13,770
needs this data right and so it ties

2116
02:00:12,000 --> 02:00:15,930
that like there's nothing Jay I can't

2117
02:00:13,770 --> 02:00:17,460
reorganize that because it has to be in

2118
02:00:15,930 --> 02:00:19,110
that format and so there's really

2119
02:00:17,460 --> 02:00:21,750
nothing you can you can particularly do

2120
02:00:19,109 --> 02:00:23,099
there right now there are things that

2121
02:00:21,750 --> 02:00:25,470
languages can do to make it easier for

2122
02:00:23,100 --> 02:00:27,750
you to write messed up code like this

2123
02:00:25,470 --> 02:00:31,140
which is they can provide tools for you

2124
02:00:27,750 --> 02:00:34,199
to ask it to do like arrangement of your

2125
02:00:31,140 --> 02:00:36,210
code for you in structured ways someone

2126
02:00:34,199 --> 02:00:39,239
just mentioned is PC and yes that's a

2127
02:00:36,210 --> 02:00:41,550
very good example of language additions

2128
02:00:39,239 --> 02:00:43,139
and then a compiler that backs up those

2129
02:00:41,550 --> 02:00:44,820
language additions to allow you to more

2130
02:00:43,140 --> 02:00:46,140
easily write scalar code that can be

2131
02:00:44,819 --> 02:00:47,699
turned into Sindhi code without you have

2132
02:00:46,140 --> 02:00:51,690
to do anything and it will still be good

2133
02:00:47,699 --> 02:00:55,559
Sindhi code right so that's a great

2134
02:00:51,689 --> 02:01:03,889
feature but again not really present in

2135
02:00:55,560 --> 02:01:03,890
much in our tools very much yet right oh

2136
02:01:05,300 --> 02:01:10,970
is it in so it says the Intel intrinsic

2137
02:01:08,430 --> 02:01:10,970
that is broken

2138
02:01:14,800 --> 02:01:26,199
what's broken about it looks fine to me

2139
02:01:26,979 --> 02:01:31,698
yeah

2140
02:01:29,439 --> 02:01:40,599
maybe you've got a route problem I don't

2141
02:01:31,698 --> 02:01:40,599
know it's loaded for me yeah

2142
02:01:44,750 --> 02:01:51,710
night isn't a control shift are so that

2143
02:01:50,210 --> 02:01:54,949
should load it out of outside of the

2144
02:01:51,710 --> 02:01:58,489
cache right that's a forestry load

2145
02:01:54,949 --> 02:02:06,319
oh you can't specify architecture so

2146
02:01:58,489 --> 02:02:07,579
you're saying you can't like click yeah

2147
02:02:06,319 --> 02:02:11,000
it does look as soon as I clicked on

2148
02:02:07,579 --> 02:02:21,250
that it broke so it does look like they

2149
02:02:11,000 --> 02:02:21,250
broke it yep that is true it would seem

2150
02:02:21,699 --> 02:02:38,090
they broke it you can use the you ops

2151
02:02:31,869 --> 02:02:41,559
page for this though so that's another

2152
02:02:38,090 --> 02:02:51,199
option and that will probably work right

2153
02:02:41,560 --> 02:02:54,380
so yeah I'm saying I this this won't

2154
02:02:51,199 --> 02:02:57,439
tell you what the intrinsic is so I

2155
02:02:54,380 --> 02:02:58,310
don't know I don't know at least I don't

2156
02:02:57,439 --> 02:03:01,429
think it will

2157
02:02:58,310 --> 02:03:04,070
I'm not sure maybe it will I don't think

2158
02:03:01,430 --> 02:03:07,869
it will do but for doing stuff like

2159
02:03:04,069 --> 02:03:09,979
finding out what the instruction like

2160
02:03:07,869 --> 02:03:17,390
performances this is actually better

2161
02:03:09,979 --> 02:03:19,339
anyway so like I would I would encourage

2162
02:03:17,390 --> 02:03:21,380
you also to use this as much as possible

2163
02:03:19,340 --> 02:03:25,010
and unfortunately doesn't have intrinsic

2164
02:03:21,380 --> 02:03:26,840
sin here it'd be cool if they added that

2165
02:03:25,010 --> 02:03:28,250
because then there'd be no reason to use

2166
02:03:26,840 --> 02:03:32,170
the internal intrinsic guide you just

2167
02:03:28,250 --> 02:03:32,170
always use this but

2168
02:03:40,479 --> 02:03:51,019
all right I'm gonna wrap it up I'm

2169
02:03:48,649 --> 02:03:52,609
really liking this lighting I think it's

2170
02:03:51,020 --> 02:03:54,050
gonna be a lot of fun to kind of tune it

2171
02:03:52,609 --> 02:03:55,579
up a little bit I think rig is it's just

2172
02:03:54,050 --> 02:03:57,650
so nice to be able to walk around and

2173
02:03:55,579 --> 02:04:00,439
have that kind of realistic like play

2174
02:03:57,649 --> 02:04:04,629
off the walls and everything and I don't

2175
02:04:00,439 --> 02:04:04,629
know this is getting really cool

2176
02:04:21,769 --> 02:04:30,149
anyway alright close it on up where's my

2177
02:04:27,448 --> 02:04:33,748
web browser I closed it that's not what

2178
02:04:30,149 --> 02:04:34,949
I meant to do all right thank you for

2179
02:04:33,748 --> 02:04:36,148
ready for joining me from episode of

2180
02:04:34,948 --> 02:04:38,009
handmade heroes and a pleasure coding

2181
02:04:36,149 --> 02:04:39,989
with you as always if you would like to

2182
02:04:38,010 --> 02:04:41,130
follow on the series at home you can

2183
02:04:39,988 --> 02:04:43,348
always pre-order the game at handmade

2184
02:04:41,130 --> 02:04:45,090
hero org and it comes with a source code

2185
02:04:43,349 --> 02:04:47,610
which you can use to follow along at

2186
02:04:45,090 --> 02:04:48,929
home if you want to try writing a

2187
02:04:47,609 --> 02:04:50,279
separable version of that filter

2188
02:04:48,929 --> 02:04:52,649
yourself that would be a great thing to

2189
02:04:50,279 --> 02:04:54,958
do tonight because it's a pretty

2190
02:04:52,649 --> 02:04:56,369
bite-sized problem and you can go look

2191
02:04:54,958 --> 02:04:58,828
up separable filters and read about them

2192
02:04:56,368 --> 02:05:00,868
before I get into that which I don't

2193
02:04:58,828 --> 02:05:02,549
know if we really need to do but I do

2194
02:05:00,868 --> 02:05:04,948
think we want to least try it because it

2195
02:05:02,550 --> 02:05:06,208
should be significantly less ops and we

2196
02:05:04,948 --> 02:05:07,998
do need to reduce the number of ops in

2197
02:05:06,208 --> 02:05:09,958
that code so something to think about

2198
02:05:07,998 --> 02:05:11,908
alright I'll be back here tomorrow give

2199
02:05:09,958 --> 02:05:13,319
that a swing till then have fun

2200
02:05:11,908 --> 02:05:13,768
programming and I'll see everyone on the

2201
02:05:13,319 --> 02:05:16,188
Internet

2202
02:05:13,769 --> 02:05:16,189
take it easy everybody

