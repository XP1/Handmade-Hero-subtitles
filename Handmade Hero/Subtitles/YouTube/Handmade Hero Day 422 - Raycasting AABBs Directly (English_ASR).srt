1
00:00:00,800 --> 00:00:04,620
hello everyone and welcome to handmade

2
00:00:02,970 --> 00:00:07,019
heroes show recode a complete game live

3
00:00:04,620 --> 00:00:10,379
on stream we have some more lighting

4
00:00:07,019 --> 00:00:13,439
work to do today yesterday we finished

5
00:00:10,380 --> 00:00:16,278
changing it so that you sent light boxes

6
00:00:13,439 --> 00:00:19,858
directly down to the lighting system and

7
00:00:16,278 --> 00:00:22,170
it blew them out into surfaces for

8
00:00:19,859 --> 00:00:25,618
lighting and that appears to be working

9
00:00:22,170 --> 00:00:27,390
properly now so if we run the game we

10
00:00:25,618 --> 00:00:31,469
are getting the standard lighting the

11
00:00:27,390 --> 00:00:33,570
slow lighting running now with light

12
00:00:31,469 --> 00:00:36,058
boxes community communicated directly to

13
00:00:33,570 --> 00:00:39,359
the lighting system what we want to do

14
00:00:36,058 --> 00:00:42,089
today is to now change it so that when

15
00:00:39,359 --> 00:00:43,619
we do our lighting computations rather

16
00:00:42,090 --> 00:00:45,539
than doing our letting computations on

17
00:00:43,619 --> 00:00:48,808
services at all we're going to do our

18
00:00:45,539 --> 00:00:53,850
lighting computation on actual boxes so

19
00:00:48,808 --> 00:00:55,468
as we go right at the moment what's

20
00:00:53,850 --> 00:00:57,660
happening is these boxes are getting

21
00:00:55,469 --> 00:00:59,399
computed down all right getting

22
00:00:57,659 --> 00:01:01,319
transmitted down to the lighting system

23
00:00:59,399 --> 00:01:04,049
as boxes but then they still get broken

24
00:01:01,320 --> 00:01:05,219
out into flat polygons for the lighting

25
00:01:04,049 --> 00:01:07,290
system and what I want to do now is

26
00:01:05,219 --> 00:01:10,728
change it so that instead of doing that

27
00:01:07,290 --> 00:01:14,040
they actually get changed over to being

28
00:01:10,728 --> 00:01:16,039
hit tested against as actual boxes never

29
00:01:14,040 --> 00:01:19,950
getting blown out into surfaces at all

30
00:01:16,040 --> 00:01:22,020
this is mostly a bookkeeping change but

31
00:01:19,950 --> 00:01:24,299
there is one algorithmic change we have

32
00:01:22,019 --> 00:01:28,459
to make and that algorithmic change is

33
00:01:24,299 --> 00:01:32,400
we need to do our ray cast checking

34
00:01:28,459 --> 00:01:35,819
against an actual right you know an

35
00:01:32,400 --> 00:01:38,549
actual axis aligned bounding box which

36
00:01:35,819 --> 00:01:41,279
is to say that we have a more

37
00:01:38,549 --> 00:01:43,380
complicated task to do than we would

38
00:01:41,280 --> 00:01:46,019
have if all we were doing was test

39
00:01:43,379 --> 00:01:47,879
against a single polygon now what we can

40
00:01:46,019 --> 00:01:52,349
do at first is change the raycast to

41
00:01:47,879 --> 00:01:55,259
just be 6 ray casts one against each of

42
00:01:52,349 --> 00:01:57,449
the faces but we can quickly make that

43
00:01:55,259 --> 00:01:59,040
faster by only using faces that are back

44
00:01:57,450 --> 00:02:02,040
face I was that our front facing to the

45
00:01:59,040 --> 00:02:03,600
Ray and then we can probably do even

46
00:02:02,040 --> 00:02:04,920
better than that by may be doing

47
00:02:03,599 --> 00:02:06,780
intersection testing that's directly

48
00:02:04,920 --> 00:02:09,360
against the box instead of against the

49
00:02:06,780 --> 00:02:11,068
pieces of the box and so on so we have a

50
00:02:09,360 --> 00:02:12,390
lot of options here that we can pursue

51
00:02:11,068 --> 00:02:13,759
and that's basically what we want to

52
00:02:12,389 --> 00:02:16,079
start doing now

53
00:02:13,759 --> 00:02:19,109
in an attempt to get this down to

54
00:02:16,080 --> 00:02:22,320
something nice and concise and that we

55
00:02:19,110 --> 00:02:24,750
can start using to do multi-resolution

56
00:02:22,319 --> 00:02:26,549
work which is sort of the the end goal

57
00:02:24,750 --> 00:02:28,889
of switching to the box in the first

58
00:02:26,550 --> 00:02:30,930
place although in general even if we

59
00:02:28,889 --> 00:02:33,539
weren't switching to multi-resolution it

60
00:02:30,930 --> 00:02:35,040
would still be a much better idea to do

61
00:02:33,539 --> 00:02:36,599
raycasting against the boxes because the

62
00:02:35,039 --> 00:02:40,019
raycasting itself would just be faster

63
00:02:36,599 --> 00:02:41,729
so this change is good no matter what we

64
00:02:40,020 --> 00:02:46,110
were doing if you know that you're not

65
00:02:41,729 --> 00:02:48,030
taking advantage of the ability to

66
00:02:46,110 --> 00:02:50,910
specify polygons by actually using lots

67
00:02:48,030 --> 00:02:53,310
of things that aren't directly related

68
00:02:50,909 --> 00:02:55,590
to a box then you know whatever but

69
00:02:53,310 --> 00:02:57,870
since we are only ever really concerned

70
00:02:55,590 --> 00:03:00,330
with boxes here at that point it really

71
00:02:57,870 --> 00:03:01,500
makes no sense whatsoever not to just

72
00:03:00,330 --> 00:03:03,060
have the letting system work on them

73
00:03:01,500 --> 00:03:06,389
directly because it will always be able

74
00:03:03,060 --> 00:03:09,090
to get a speed improvement based on that

75
00:03:06,389 --> 00:03:11,579
so what I want to do now is I guess just

76
00:03:09,090 --> 00:03:16,530
do the literal translation of this so

77
00:03:11,580 --> 00:03:18,300
here in the lighting test function right

78
00:03:16,530 --> 00:03:20,580
here is where we blow out the box

79
00:03:18,300 --> 00:03:25,290
services and all I really need to do

80
00:03:20,580 --> 00:03:26,640
here is just move this into this this

81
00:03:25,289 --> 00:03:28,289
part right here that goes over the box

82
00:03:26,639 --> 00:03:31,799
services well I really need to do is

83
00:03:28,289 --> 00:03:34,139
move that over into the actual ray

84
00:03:31,800 --> 00:03:35,910
casting test so if you take a look at

85
00:03:34,139 --> 00:03:39,089
the Ray casting test the ray cast test

86
00:03:35,909 --> 00:03:41,370
goes over these source indices here and

87
00:03:39,090 --> 00:03:43,229
so what I want to do is right inside

88
00:03:41,370 --> 00:03:46,230
where we decide that you know this is

89
00:03:43,229 --> 00:03:49,519
one of the boxes that we're going to

90
00:03:46,229 --> 00:03:53,429
test what I want to do is just move this

91
00:03:49,520 --> 00:03:56,159
this thing right here that does the

92
00:03:53,430 --> 00:03:58,050
actual ray cast I just want to move the

93
00:03:56,159 --> 00:04:00,209
part that generates the box services

94
00:03:58,050 --> 00:04:02,040
right above that and what I can do is

95
00:04:00,209 --> 00:04:05,520
like literally take this lighting

96
00:04:02,039 --> 00:04:07,500
surface information here and instead of

97
00:04:05,520 --> 00:04:09,900
having the lighting surface be something

98
00:04:07,500 --> 00:04:12,889
that's actually stored I can just make a

99
00:04:09,900 --> 00:04:16,879
temporary lighting surface like so and

100
00:04:12,889 --> 00:04:19,858
create that lighting surface on-demand

101
00:04:16,879 --> 00:04:21,779
now obviously this is pretty slow right

102
00:04:19,858 --> 00:04:23,189
we're doing a ton of work here for no

103
00:04:21,779 --> 00:04:26,969
real reason because a lot of this

104
00:04:23,189 --> 00:04:28,589
information we don't actually need

105
00:04:26,970 --> 00:04:30,150
and you know there's all sorts of

106
00:04:28,589 --> 00:04:32,639
reasons why we don't really want to do

107
00:04:30,149 --> 00:04:34,079
it like this in the end but again when

108
00:04:32,639 --> 00:04:36,269
you're making code changes like this

109
00:04:34,079 --> 00:04:37,289
that involve a lot of bookkeeping and a

110
00:04:36,269 --> 00:04:39,060
lot of information

111
00:04:37,290 --> 00:04:41,280
it usually benefits you to make them

112
00:04:39,060 --> 00:04:42,480
slowly one step at a time to reduce your

113
00:04:41,279 --> 00:04:43,709
debugging especially in things like

114
00:04:42,480 --> 00:04:45,660
lighting where the results can be

115
00:04:43,709 --> 00:04:49,259
complicated to interpret it's a lot

116
00:04:45,660 --> 00:04:50,580
easier to do slow changes and make sure

117
00:04:49,259 --> 00:04:52,769
that they're working okay rather than

118
00:04:50,579 --> 00:04:54,419
make some giant changes and then I spend

119
00:04:52,769 --> 00:04:57,990
a ton of time trying to debug why you're

120
00:04:54,420 --> 00:04:59,610
getting a black screen and so on okay so

121
00:04:57,990 --> 00:05:01,199
this is what we effectively want to do

122
00:04:59,610 --> 00:05:03,870
now and we'll take a look at that in a

123
00:05:01,199 --> 00:05:06,629
second but what we want to do first is

124
00:05:03,870 --> 00:05:09,060
get rid of the code that was actually

125
00:05:06,629 --> 00:05:11,850
doing any of the the blowing out here so

126
00:05:09,060 --> 00:05:13,980
this stuff can all basically go away

127
00:05:11,850 --> 00:05:16,740
right so we don't really need any of

128
00:05:13,980 --> 00:05:19,680
this what we're going to do instead is

129
00:05:16,740 --> 00:05:24,480
change the solution to have the box

130
00:05:19,680 --> 00:05:27,269
count specified in it directly and

131
00:05:24,480 --> 00:05:36,689
similarly it will also will have the

132
00:05:27,269 --> 00:05:38,370
boxes specified in it directly so then

133
00:05:36,689 --> 00:05:41,310
when we go back to the lighting solution

134
00:05:38,370 --> 00:05:43,228
oops that's in rolled mode still not a

135
00:05:41,310 --> 00:05:46,050
great place for it but yeah we'll fix

136
00:05:43,228 --> 00:05:47,430
that someday these surfaces here that

137
00:05:46,050 --> 00:05:48,810
used to be here these are going to go

138
00:05:47,430 --> 00:05:49,860
away and these are just going to be

139
00:05:48,810 --> 00:05:56,339
replaced with light box

140
00:05:49,860 --> 00:05:58,470
you know box count go so we're no longer

141
00:05:56,339 --> 00:05:59,789
gonna be having our own services in here

142
00:05:58,470 --> 00:06:01,530
we're never really going to have that

143
00:05:59,790 --> 00:06:03,689
instead what we're gonna have is just

144
00:06:01,529 --> 00:06:07,379
the light boxes in here that can be

145
00:06:03,689 --> 00:06:09,389
directly accessed and the this can just

146
00:06:07,379 --> 00:06:11,668
be a pointer we're not storing them that

147
00:06:09,389 --> 00:06:14,310
you can just point to the one that we

148
00:06:11,668 --> 00:06:15,810
were getting before so now when we come

149
00:06:14,310 --> 00:06:17,339
back through here right we're gonna be

150
00:06:15,810 --> 00:06:19,259
able to go okay let's just go through

151
00:06:17,339 --> 00:06:22,709
the boxes themselves and we'll do each

152
00:06:19,259 --> 00:06:24,389
of these surfaces and that'll be fine

153
00:06:22,709 --> 00:06:25,739
we'll have to fix some bugs in there but

154
00:06:24,389 --> 00:06:28,430
otherwise it should be good and also

155
00:06:25,740 --> 00:06:32,009
this right comes from the solution now

156
00:06:28,430 --> 00:06:35,069
all right so the source index think here

157
00:06:32,009 --> 00:06:36,750
was only really getting used as well for

158
00:06:35,069 --> 00:06:40,740
the you know the result index sort of

159
00:06:36,750 --> 00:06:42,538
stuff so what we want to do here is this

160
00:06:40,740 --> 00:06:44,550
this piece of information that flows out

161
00:06:42,538 --> 00:06:46,949
is now gonna have to be a little bit

162
00:06:44,550 --> 00:06:49,050
more complicated right because once we

163
00:06:46,949 --> 00:06:51,360
do our raycast we're going to need to

164
00:06:49,050 --> 00:06:53,430
give some of this in the the relevant

165
00:06:51,360 --> 00:06:55,259
part of this information we're going to

166
00:06:53,430 --> 00:06:56,370
need to give to the routine that

167
00:06:55,259 --> 00:06:58,800
actually has to process this

168
00:06:56,370 --> 00:07:00,180
intersection on the way out so if we

169
00:06:58,800 --> 00:07:02,819
take a look at what happens here you can

170
00:07:00,180 --> 00:07:04,470
see we have like these ray indices we're

171
00:07:02,819 --> 00:07:08,039
looping over here we're doing the

172
00:07:04,470 --> 00:07:11,669
sampling and whatnot and what happens is

173
00:07:08,038 --> 00:07:16,728
once we get that closest point index

174
00:07:11,668 --> 00:07:16,728
right we've got this the hit surface

175
00:07:17,029 --> 00:07:21,959
which is which is this the piece of

176
00:07:20,009 --> 00:07:24,060
information that I'm talking about that

177
00:07:21,959 --> 00:07:26,848
gets returned from the Ray which surface

178
00:07:24,060 --> 00:07:28,740
got hit that hit surface needs to be

179
00:07:26,848 --> 00:07:32,519
used in a couple different places right

180
00:07:28,740 --> 00:07:35,848
so we need some way of taking care of

181
00:07:32,519 --> 00:07:37,829
the hit surface in a way that doesn't

182
00:07:35,848 --> 00:07:40,889
require returning an index to a surface

183
00:07:37,829 --> 00:07:42,329
that we don't have now in order to do

184
00:07:40,889 --> 00:07:44,519
that I'm gonna have to think through

185
00:07:42,329 --> 00:07:46,379
what we actually use so in accumulate

186
00:07:44,519 --> 00:07:50,430
sample you can see that the lighting

187
00:07:46,379 --> 00:07:54,060
surface here is you know it's getting

188
00:07:50,430 --> 00:07:55,709
past when we look at the reason that

189
00:07:54,060 --> 00:07:58,889
it's getting past the only thing that's

190
00:07:55,709 --> 00:08:01,288
it actually needs is the surface normal

191
00:07:58,889 --> 00:08:07,019
for the angular fall-off okay

192
00:08:01,288 --> 00:08:10,318
so that surface normal is actually also

193
00:08:07,019 --> 00:08:11,848
present in the point itself right points

194
00:08:10,319 --> 00:08:14,340
themselves have their surface normals

195
00:08:11,848 --> 00:08:18,000
included in them and so we could just

196
00:08:14,339 --> 00:08:19,978
use that directly so when we actually

197
00:08:18,000 --> 00:08:21,990
come through here and we're passing the

198
00:08:19,978 --> 00:08:24,568
hit surface we don't really have to do

199
00:08:21,990 --> 00:08:27,449
that what we could do instead is just

200
00:08:24,569 --> 00:08:31,560
take whatever the hit point was and pass

201
00:08:27,449 --> 00:08:36,620
its normal right this part here could be

202
00:08:31,560 --> 00:08:36,620
could be that and if we take a look

203
00:08:38,379 --> 00:08:41,168
if we take a look at what's happening

204
00:08:39,610 --> 00:08:46,899
here and then give us a little more room

205
00:08:41,168 --> 00:08:48,759
were kind of getting so closest point

206
00:08:46,899 --> 00:08:50,019
index is the actual thing that we would

207
00:08:48,759 --> 00:08:53,459
need to get that piece of information

208
00:08:50,019 --> 00:08:57,068
out so if we wanted to say solution

209
00:08:53,458 --> 00:08:58,539
points closest point index and that

210
00:08:57,068 --> 00:09:00,610
would give us that normal that we

211
00:08:58,539 --> 00:09:02,409
actually need so it turns out for

212
00:09:00,610 --> 00:09:05,560
acumulate sample we really don't need

213
00:09:02,409 --> 00:09:07,149
the surface so that's a good thing so

214
00:09:05,559 --> 00:09:10,268
the only place we're really using the

215
00:09:07,149 --> 00:09:12,039
hit surface oops the only place that

216
00:09:10,269 --> 00:09:13,360
we're really using the hit surface which

217
00:09:12,039 --> 00:09:17,078
is the thing we would need that index

218
00:09:13,360 --> 00:09:19,690
for is this part right here where we

219
00:09:17,078 --> 00:09:22,328
loop over the lights themselves so what

220
00:09:19,690 --> 00:09:26,769
we could do instead is just have it so

221
00:09:22,328 --> 00:09:29,828
that this index that comes back could

222
00:09:26,769 --> 00:09:32,198
just be array it could it could be

223
00:09:29,828 --> 00:09:35,169
something that just tells us what the

224
00:09:32,198 --> 00:09:37,870
point count is right so just be whatever

225
00:09:35,169 --> 00:09:42,208
the first point index is we start with

226
00:09:37,870 --> 00:09:42,209
that assuming that it's within range

227
00:09:42,629 --> 00:09:51,059
then when we come through here we're

228
00:09:45,370 --> 00:09:55,299
gonna loop over rate point count ramp

229
00:09:51,059 --> 00:09:55,809
rate first point index and that would be

230
00:09:55,299 --> 00:09:58,269
it

231
00:09:55,809 --> 00:10:00,099
that would be all we'd have to do so in

232
00:09:58,269 --> 00:10:03,370
order to make this routine continue

233
00:10:00,100 --> 00:10:04,870
working the way it was working again not

234
00:10:03,370 --> 00:10:06,339
necessarily the most efficient way to do

235
00:10:04,870 --> 00:10:07,870
things yet we're gonna have to start

236
00:10:06,339 --> 00:10:10,569
pairing this down as we try to make it

237
00:10:07,870 --> 00:10:12,578
more and more efficient certainly but we

238
00:10:10,568 --> 00:10:14,458
can start to see how this routine could

239
00:10:12,578 --> 00:10:17,979
still communicate the same information

240
00:10:14,458 --> 00:10:19,958
back that was actually necessary so what

241
00:10:17,980 --> 00:10:25,420
we would have here is a first point

242
00:10:19,958 --> 00:10:27,669
index and a point count like so and when

243
00:10:25,419 --> 00:10:31,419
we've got those pieces of information

244
00:10:27,669 --> 00:10:34,419
flowing back what we would need to do is

245
00:10:31,419 --> 00:10:38,379
just set them here so in the result

246
00:10:34,419 --> 00:10:42,278
first point index and the results point

247
00:10:38,379 --> 00:10:44,350
count what we need to specify is these

248
00:10:42,278 --> 00:10:47,078
two pieces of information here there's

249
00:10:44,350 --> 00:10:51,190
that light index and there's that light

250
00:10:47,078 --> 00:10:52,569
count so those those

251
00:10:51,190 --> 00:10:54,190
the pieces of information that we would

252
00:10:52,570 --> 00:10:55,960
actually need to pass back to do the

253
00:10:54,190 --> 00:11:00,850
iteration on the outside that needs to

254
00:10:55,960 --> 00:11:02,920
get done and similarly when we

255
00:11:00,850 --> 00:11:04,360
initialize this instead of setting it to

256
00:11:02,919 --> 00:11:06,750
the surface count we're just setting it

257
00:11:04,360 --> 00:11:10,060
to the point count so now at the end

258
00:11:06,750 --> 00:11:11,889
here remember we don't have services

259
00:11:10,059 --> 00:11:13,449
anymore so anywhere that was referring

260
00:11:11,889 --> 00:11:15,639
to service this has to be changed to box

261
00:11:13,450 --> 00:11:18,430
there's two places where that has to

262
00:11:15,639 --> 00:11:20,500
occur actually there's more than two so

263
00:11:18,429 --> 00:11:24,009
there's here where we need to loop over

264
00:11:20,500 --> 00:11:26,409
the boxes which now we will do and I

265
00:11:24,009 --> 00:11:29,080
guess we can still use source index for

266
00:11:26,409 --> 00:11:31,240
this so as we're going over the boxes we

267
00:11:29,080 --> 00:11:33,370
need to do that but then the other thing

268
00:11:31,240 --> 00:11:35,950
place we need to do it in the immediate

269
00:11:33,370 --> 00:11:41,620
vicinity is when we're looping over the

270
00:11:35,950 --> 00:11:42,250
emissions that that is we don't that's

271
00:11:41,620 --> 00:11:43,810
not true

272
00:11:42,250 --> 00:11:45,309
nevermind so there is really only one

273
00:11:43,809 --> 00:11:47,769
other place that we have to loop over it

274
00:11:45,309 --> 00:11:50,709
I guess and that's an output so here we

275
00:11:47,769 --> 00:11:52,870
were going over the surfaces and we

276
00:11:50,710 --> 00:11:55,780
don't want to go the services anymore we

277
00:11:52,870 --> 00:12:00,629
need to go over the box count so this

278
00:11:55,779 --> 00:12:00,629
right here is basically a box index oops

279
00:12:03,600 --> 00:12:10,300
so the box index that comes out is also

280
00:12:07,929 --> 00:12:12,459
going to have to again loop over each of

281
00:12:10,299 --> 00:12:16,059
the phases of this thing I then loop

282
00:12:12,460 --> 00:12:19,180
over the points of those faces again not

283
00:12:16,059 --> 00:12:20,739
really a huge problem because we have

284
00:12:19,179 --> 00:12:24,489
the ability to generate those on demand

285
00:12:20,740 --> 00:12:27,070
so we can just do that and be done with

286
00:12:24,490 --> 00:12:29,289
it right this right here is the code

287
00:12:27,070 --> 00:12:30,850
that will do that and we only really

288
00:12:29,289 --> 00:12:34,149
need a very little bit of that code

289
00:12:30,850 --> 00:12:36,310
anyway so in here when we do this and

290
00:12:34,149 --> 00:12:37,689
get the box surface the only things we

291
00:12:36,309 --> 00:12:39,519
were using it for is the x-axis and

292
00:12:37,690 --> 00:12:41,620
y-axis so this actually doesn't really

293
00:12:39,519 --> 00:12:44,769
have to happen where we translate the

294
00:12:41,620 --> 00:12:47,289
thing out all we really need is these

295
00:12:44,769 --> 00:12:49,240
two pieces of information here so that

296
00:12:47,289 --> 00:12:53,679
we can go okay here's the light index

297
00:12:49,240 --> 00:12:55,240
right and furthermore we don't even need

298
00:12:53,679 --> 00:12:57,309
to do this addition because we can just

299
00:12:55,240 --> 00:12:59,620
read out what that actual maximum value

300
00:12:57,309 --> 00:13:01,689
was to begin with and just skip the

301
00:12:59,620 --> 00:13:04,029
subtraction which gives us exactly what

302
00:13:01,690 --> 00:13:04,510
we would have wanted then inside the

303
00:13:04,029 --> 00:13:08,919
this

304
00:13:04,509 --> 00:13:10,870
some call we go get the x-axis y-axis

305
00:13:08,919 --> 00:13:12,610
that can be read directly out of the box

306
00:13:10,870 --> 00:13:15,100
surface itself

307
00:13:12,610 --> 00:13:16,930
so again just we end up in a situation

308
00:13:15,100 --> 00:13:19,269
where most of the work we were doing

309
00:13:16,929 --> 00:13:21,389
could collapse down pretty easily into

310
00:13:19,269 --> 00:13:23,740
something that just operates directly on

311
00:13:21,389 --> 00:13:26,350
generated services rather than storage

312
00:13:23,740 --> 00:13:31,740
services and there's no real issue here

313
00:13:26,350 --> 00:13:31,740
oops so let's go ahead and clean it up

314
00:13:36,779 --> 00:13:50,860
where is that point count yeah all right

315
00:13:47,470 --> 00:13:57,029
uh so this is actually boxes not light

316
00:13:50,860 --> 00:14:07,389
boxes this is not source it is surface

317
00:13:57,029 --> 00:14:11,709
Oh actually I I disagree is source go

318
00:14:07,389 --> 00:14:14,379
ahead and change that and all of these

319
00:14:11,710 --> 00:14:21,820
that are doing source arrow need to be

320
00:14:14,379 --> 00:14:27,939
source dot there we go

321
00:14:21,820 --> 00:14:33,090
and it's over zealous there actually I

322
00:14:27,940 --> 00:14:33,090
suppose why not

323
00:14:38,139 --> 00:14:46,600
so the box surface index

324
00:14:56,589 --> 00:15:02,229
lighting service does not have member

325
00:14:59,458 --> 00:15:28,928
operator you're correct

326
00:15:02,229 --> 00:15:32,049
doesn't and so did we actually even use

327
00:15:28,928 --> 00:15:33,848
that information that hidden X no no no

328
00:15:32,048 --> 00:15:35,948
so this is points this is not even we're

329
00:15:33,849 --> 00:15:39,189
not even getting that information so we

330
00:15:35,948 --> 00:15:42,488
don't even care about that anymore no

331
00:15:39,188 --> 00:15:47,438
object what is the question point

332
00:15:42,489 --> 00:15:59,349
commands like point count so is this a

333
00:15:47,438 --> 00:16:00,548
you 32 in here I guess and that is not

334
00:15:59,349 --> 00:16:10,149
something we actually want to print

335
00:16:00,548 --> 00:16:12,728
light boxes are just boxes all right so

336
00:16:10,149 --> 00:16:16,839
now effectively we've changed the code

337
00:16:12,729 --> 00:16:19,689
over to doing well to doing exactly what

338
00:16:16,839 --> 00:16:21,970
it's doing so what we're doing now is

339
00:16:19,688 --> 00:16:23,828
we're going through and we're blowing

340
00:16:21,970 --> 00:16:28,178
these things out just when we need them

341
00:16:23,828 --> 00:16:30,158
as you can see not particularly fast so

342
00:16:28,178 --> 00:16:32,619
we're gonna have to go through and now

343
00:16:30,158 --> 00:16:34,688
make this a little bit more sane with

344
00:16:32,619 --> 00:16:39,519
how it's working

345
00:16:34,688 --> 00:16:45,458
I can also probably do a little bit of

346
00:16:39,519 --> 00:16:47,078
work to sort of make sure we're to make

347
00:16:45,458 --> 00:16:50,408
sure we know where our timings are being

348
00:16:47,078 --> 00:16:52,328
spent I guess is what I would say so you

349
00:16:50,408 --> 00:16:54,428
can see we're still compiling in Oh too

350
00:16:52,328 --> 00:16:55,899
so we would expect to have reasonable

351
00:16:54,428 --> 00:16:58,749
optimizations here but there's a bunch

352
00:16:55,899 --> 00:17:02,408
of stuff that's going pretty slowly and

353
00:16:58,749 --> 00:17:04,740
the question is well why and so we're

354
00:17:02,408 --> 00:17:09,308
not we don't necessarily know exactly

355
00:17:04,740 --> 00:17:11,459
but one would assume that the blowing

356
00:17:09,308 --> 00:17:11,459
out

357
00:17:11,490 --> 00:17:19,180
doing this every time there's just too

358
00:17:15,730 --> 00:17:21,910
much actual work in generating these box

359
00:17:19,180 --> 00:17:24,900
sources from the indices and that sort

360
00:17:21,910 --> 00:17:27,670
of stuff one would act would just assume

361
00:17:24,900 --> 00:17:31,180
that that is the majority of the problem

362
00:17:27,670 --> 00:17:33,340
there but since we don't really know

363
00:17:31,180 --> 00:17:36,519
that I'd like to go ahead and actually

364
00:17:33,339 --> 00:17:38,669
time it to make sure that this routine

365
00:17:36,519 --> 00:17:41,170
is where all of our time is being spent

366
00:17:38,670 --> 00:17:44,830
B just to make sure I didn't

367
00:17:41,170 --> 00:17:48,400
accidentally introduce something crazier

368
00:17:44,829 --> 00:17:49,869
here where I you know made some mistake

369
00:17:48,400 --> 00:17:51,400
that causes us to do like way more

370
00:17:49,869 --> 00:17:53,799
iterations or something like this

371
00:17:51,400 --> 00:17:54,970
because I want to make sure that the

372
00:17:53,799 --> 00:17:56,319
thing that's taking the time is the

373
00:17:54,970 --> 00:18:01,990
thing that I was expecting to take the

374
00:17:56,319 --> 00:18:04,569
time and not something else right okay

375
00:18:01,990 --> 00:18:14,500
so what I want to do here is just do a

376
00:18:04,569 --> 00:18:16,000
time function so that it'll so I'm just

377
00:18:14,500 --> 00:18:18,519
gonna put a time function in there and

378
00:18:16,000 --> 00:18:20,259
so hopefully what'll happen now is every

379
00:18:18,519 --> 00:18:22,569
time we go to do a raycast it'll get

380
00:18:20,259 --> 00:18:26,799
counted in the profiler so if I need to

381
00:18:22,569 --> 00:18:30,220
go in now and just verify what is

382
00:18:26,799 --> 00:18:31,779
actually happening I can verify that all

383
00:18:30,220 --> 00:18:34,720
the times we've spent in the raycast it

384
00:18:31,779 --> 00:18:36,399
is so that's great and so what we really

385
00:18:34,720 --> 00:18:38,470
just need to do is focus on making sure

386
00:18:36,400 --> 00:18:42,160
that we can hit tests against these

387
00:18:38,470 --> 00:18:44,049
boxes in some efficient fashion the

388
00:18:42,160 --> 00:18:47,440
number of rays being cast here is not

389
00:18:44,049 --> 00:18:49,240
unusually high 30,000 rays seems

390
00:18:47,440 --> 00:18:50,950
reasonable for the number of iterations

391
00:18:49,240 --> 00:18:52,809
and number of services and stuff we have

392
00:18:50,950 --> 00:18:54,130
I'm not verifying it in any particular

393
00:18:52,809 --> 00:18:56,139
way in my head or anything I'm just

394
00:18:54,130 --> 00:18:57,340
saying that's not usually high if that

395
00:18:56,140 --> 00:18:59,890
had come back is like a million or

396
00:18:57,339 --> 00:19:01,779
something I would have suspected that I

397
00:18:59,890 --> 00:19:03,580
made an accidental iteration change

398
00:19:01,779 --> 00:19:06,309
somewhere else so our goal here is just

399
00:19:03,579 --> 00:19:08,859
to drive down this functions doing all

400
00:19:06,309 --> 00:19:10,720
the work and it was definitely running

401
00:19:08,859 --> 00:19:14,079
faster before so the question is how do

402
00:19:10,720 --> 00:19:17,839
we make it run back at that normal speed

403
00:19:14,079 --> 00:19:20,609
right okay

404
00:19:17,839 --> 00:19:23,788
so let's talk about how we are going to

405
00:19:20,609 --> 00:19:28,288
how we can go about doing this a few

406
00:19:23,788 --> 00:19:30,538
things we can do and so on so the very

407
00:19:28,288 --> 00:19:34,888
first thing that we can do is we can we

408
00:19:30,538 --> 00:19:39,440
can use half the surfaces right go ahead

409
00:19:34,888 --> 00:19:39,439
and Milton here

410
00:19:51,210 --> 00:19:55,940
it is day 422 right did I get that right

411
00:20:24,890 --> 00:20:32,280
yes just wanna double-check sometimes

412
00:20:27,298 --> 00:20:34,349
that I forget all right so for recasting

413
00:20:32,279 --> 00:20:36,808
against boxes or in this case let's just

414
00:20:34,349 --> 00:20:40,909
say a a B B's so axis aligned bounding

415
00:20:36,808 --> 00:20:46,950
boxes what we want to think about first

416
00:20:40,910 --> 00:20:48,120
is just the obvious fact that let's just

417
00:20:46,950 --> 00:20:49,558
draw it in 2d because it's a little bit

418
00:20:48,119 --> 00:20:51,839
simpler and doesn't really change the

419
00:20:49,558 --> 00:20:57,389
principle that whatever direction the

420
00:20:51,839 --> 00:20:59,909
Ray is coming from we know that that Ray

421
00:20:57,390 --> 00:21:03,630
only is going to intersect front faces

422
00:20:59,910 --> 00:21:06,808
right so if the Ray is pointing in this

423
00:21:03,630 --> 00:21:09,390
direction it's never going to be tested

424
00:21:06,808 --> 00:21:11,548
against things that are pointing in the

425
00:21:09,390 --> 00:21:14,880
same direction as the Ray is going

426
00:21:11,548 --> 00:21:17,730
because we only we don't allow ray

427
00:21:14,880 --> 00:21:20,130
casting from inside of the cube right we

428
00:21:17,730 --> 00:21:22,289
or the box we only allow ray casting

429
00:21:20,130 --> 00:21:24,540
from outside the box and when we are

430
00:21:22,289 --> 00:21:26,909
coming from outside the box we only want

431
00:21:24,539 --> 00:21:29,849
to intersect faces that could bounce us

432
00:21:26,910 --> 00:21:33,290
off right so the first thing we could do

433
00:21:29,849 --> 00:21:35,759
is we can eliminate half of the faces

434
00:21:33,289 --> 00:21:38,579
pretty much immediately so if we take a

435
00:21:35,759 --> 00:21:42,419
look at how much time is being spent in

436
00:21:38,579 --> 00:21:45,298
here inside the profiler you can see

437
00:21:42,419 --> 00:21:46,530
that it's well it's pretty huge right I

438
00:21:45,298 --> 00:21:50,910
don't even know we should probably some

439
00:21:46,529 --> 00:21:55,859
commas in here 1 2 3 4 5 6 7 8 9 so it's

440
00:21:50,910 --> 00:21:58,140
like a billion cycles right and hey

441
00:21:55,859 --> 00:22:00,329
isn't that nice this is a 4 gigahertz

442
00:21:58,140 --> 00:22:03,150
processor I think and a billion cycles

443
00:22:00,329 --> 00:22:06,509
our amount of time is around a quarter

444
00:22:03,150 --> 00:22:08,929
of a second so hey that works out just

445
00:22:06,509 --> 00:22:12,298
about that works that just about correct

446
00:22:08,929 --> 00:22:14,100
anyway so we're taking about a billion

447
00:22:12,298 --> 00:22:16,679
cycles to do that here so we should

448
00:22:14,099 --> 00:22:19,379
expect to see maybe that number drop not

449
00:22:16,679 --> 00:22:21,150
in half but it should should be

450
00:22:19,380 --> 00:22:24,179
something a fairly significant if we

451
00:22:21,150 --> 00:22:25,950
were to just test that now that's not

452
00:22:24,179 --> 00:22:27,570
going to get us even close to where we

453
00:22:25,950 --> 00:22:30,569
want to be because we want to be if

454
00:22:27,569 --> 00:22:32,159
anything faster than the old version and

455
00:22:30,569 --> 00:22:34,269
that's not gonna get us even in the

456
00:22:32,160 --> 00:22:36,100
ballpark so this is by no means

457
00:22:34,269 --> 00:22:39,779
the majority of the change we want to

458
00:22:36,099 --> 00:22:43,659
make but we should still be able to say

459
00:22:39,779 --> 00:22:45,730
hey only test those those particular

460
00:22:43,660 --> 00:22:48,700
boxes I guess this is too late to do it

461
00:22:45,730 --> 00:22:50,529
there's the dot this test right here is

462
00:22:48,700 --> 00:22:51,789
the test for that but what we want to be

463
00:22:50,529 --> 00:22:56,139
able to do is we want to be able to do

464
00:22:51,789 --> 00:22:57,670
that earlier right so here in the box

465
00:22:56,140 --> 00:23:00,060
source call where we're getting this

466
00:22:57,670 --> 00:23:04,870
this information out for the box surface

467
00:23:00,059 --> 00:23:07,000
what we want to do is we want to test

468
00:23:04,869 --> 00:23:10,119
before we ever generate all this

469
00:23:07,000 --> 00:23:14,890
information and we can do that because

470
00:23:10,119 --> 00:23:17,049
we know the sign of the REA Direction is

471
00:23:14,890 --> 00:23:18,580
going to be the thing that gives us all

472
00:23:17,049 --> 00:23:21,690
of the information we actually need

473
00:23:18,579 --> 00:23:29,259
right because this is access aligned

474
00:23:21,690 --> 00:23:31,779
whatever my Rea direction is what I know

475
00:23:29,259 --> 00:23:36,009
is that the instant I would need to

476
00:23:31,779 --> 00:23:38,349
start testing say the Y positive right

477
00:23:36,009 --> 00:23:39,640
that's Y positive this is Y negative the

478
00:23:38,349 --> 00:23:45,279
incident I would have to start testing

479
00:23:39,640 --> 00:23:48,840
the Y positive plane is precisely when

480
00:23:45,279 --> 00:23:52,269
my ray Direction has a negative Y right

481
00:23:48,839 --> 00:23:54,339
so I don't really need to generate any

482
00:23:52,269 --> 00:23:57,039
of the information I don't even need to

483
00:23:54,339 --> 00:23:59,889
do this test because I know these are

484
00:23:57,039 --> 00:24:01,659
boxes I know their access aligned and so

485
00:23:59,890 --> 00:24:03,940
at that point I can just make the

486
00:24:01,660 --> 00:24:06,850
assumption that the sign of the

487
00:24:03,940 --> 00:24:09,430
components of the normal the Ray normal

488
00:24:06,849 --> 00:24:11,469
are all I really need to figure out

489
00:24:09,430 --> 00:24:16,660
whether I'm gonna test this box surface

490
00:24:11,470 --> 00:24:20,110
or not right so what I can say ahead of

491
00:24:16,660 --> 00:24:23,019
time is rather than doing the ray source

492
00:24:20,109 --> 00:24:24,549
end test and of course I still need to

493
00:24:23,019 --> 00:24:28,180
compute the inner product as you can see

494
00:24:24,549 --> 00:24:30,730
here that the inner product is used for

495
00:24:28,180 --> 00:24:32,890
a piece of information but I can pretty

496
00:24:30,730 --> 00:24:34,509
much say okay this can become an

497
00:24:32,890 --> 00:24:37,090
assertion that doesn't actually

498
00:24:34,509 --> 00:24:39,190
predicating because I pretty much know

499
00:24:37,089 --> 00:24:41,019
that it's always going to be true what I

500
00:24:39,190 --> 00:24:44,110
can do instead is do an if statement

501
00:24:41,019 --> 00:24:46,509
here that will test the sign of the

502
00:24:44,109 --> 00:24:47,709
thing that I actually care about which

503
00:24:46,509 --> 00:24:49,538
is to say the

504
00:24:47,710 --> 00:24:51,519
this index which again is the box

505
00:24:49,538 --> 00:24:55,778
surface index shifted down by one right

506
00:24:51,519 --> 00:25:04,329
that's the axis index whatever the axis

507
00:24:55,778 --> 00:25:10,690
index is like so and we know the

508
00:25:04,329 --> 00:25:12,939
positive right so we know that we have

509
00:25:10,690 --> 00:25:16,028
the axis index which is this and we have

510
00:25:12,940 --> 00:25:17,679
the positive yes or no which is this we

511
00:25:16,028 --> 00:25:19,329
know that our test for whether or not

512
00:25:17,679 --> 00:25:23,130
this thing ever needs to enter this

513
00:25:19,329 --> 00:25:30,609
routine is just going to be all right if

514
00:25:23,130 --> 00:25:34,570
the box if the axis that I'm testing

515
00:25:30,609 --> 00:25:37,349
right if the rain normal what I'm going

516
00:25:34,569 --> 00:25:45,788
to be shooting so the the Ray direction

517
00:25:37,349 --> 00:25:54,038
if the elements of that is greater than

518
00:25:45,788 --> 00:25:58,148
zero that lets me know that I'm testing

519
00:25:54,038 --> 00:25:59,980
the negative right if it's less than

520
00:25:58,148 --> 00:26:07,479
zero that means I'm testing the positive

521
00:25:59,980 --> 00:26:11,349
so I can do something that tells me

522
00:26:07,480 --> 00:26:13,750
whether my normal is positive which is

523
00:26:11,349 --> 00:26:15,879
this and I can do something that tells

524
00:26:13,750 --> 00:26:20,710
me whether my Ray is positive right

525
00:26:15,880 --> 00:26:22,059
which is this and I guess you know test

526
00:26:20,710 --> 00:26:23,259
against positive it's really what this

527
00:26:22,058 --> 00:26:25,089
is because this thing whether the rate

528
00:26:23,259 --> 00:26:27,720
is negative right so if I want to test

529
00:26:25,089 --> 00:26:33,548
against positive and this is positive

530
00:26:27,720 --> 00:26:37,179
then I should do it otherwise I

531
00:26:33,548 --> 00:26:39,009
shouldn't that makes sense so all I'm

532
00:26:37,179 --> 00:26:41,649
doing is seeing whether or not the signs

533
00:26:39,009 --> 00:26:44,140
of these things line up and I should be

534
00:26:41,648 --> 00:26:46,389
able to after debugging it make sure

535
00:26:44,140 --> 00:26:48,159
that that always is true

536
00:26:46,390 --> 00:26:54,690
now this assertion should catch cases

537
00:26:48,159 --> 00:26:54,690
where it's not so to get the code okay

538
00:26:56,230 --> 00:27:05,870
like we go through and step through this

539
00:26:59,660 --> 00:27:08,480
here we got to kind of get this yeah so

540
00:27:05,869 --> 00:27:10,819
what we need to do is make it so this

541
00:27:08,480 --> 00:27:11,930
actually does work correctly let's just

542
00:27:10,819 --> 00:27:13,220
double-check what's going on here

543
00:27:11,930 --> 00:27:19,310
because this could also just be a

544
00:27:13,220 --> 00:27:20,870
threshold problem as well oh we've just

545
00:27:19,309 --> 00:27:22,099
got the assertion backwards I was gonna

546
00:27:20,869 --> 00:27:31,000
say that seems like a plenty of

547
00:27:22,099 --> 00:27:31,000
Tolerance and really want here is that

548
00:27:32,079 --> 00:27:38,049
there we go all right so what we want to

549
00:27:35,809 --> 00:27:41,049
do here is make sure that we're always

550
00:27:38,049 --> 00:27:41,049
up

551
00:27:56,319 --> 00:28:03,349
it's slow morning let me say that again

552
00:28:00,400 --> 00:28:05,538
we want to do here is make sure that the

553
00:28:03,349 --> 00:28:07,939
inner product is sufficiently negative

554
00:28:05,538 --> 00:28:10,220
so the tolerance is going to swap

555
00:28:07,940 --> 00:28:13,669
directions if that makes sense

556
00:28:10,220 --> 00:28:17,240
we want the racehorse normal we want to

557
00:28:13,669 --> 00:28:19,460
assert that it is negative now this is

558
00:28:17,240 --> 00:28:21,319
probably too much tolerance here I don't

559
00:28:19,460 --> 00:28:22,940
know but I'm just guessing that it

560
00:28:21,319 --> 00:28:26,720
should probably be something lower than

561
00:28:22,940 --> 00:28:28,759
that we'll find out in a second but I'm

562
00:28:26,720 --> 00:28:31,400
pretty sure that that is what what

563
00:28:28,759 --> 00:28:33,619
should be happening of course I'm not

564
00:28:31,400 --> 00:28:40,460
seeing anything so that's bad just in

565
00:28:33,619 --> 00:28:42,548
case anyone was wondering what is going

566
00:28:40,460 --> 00:28:42,548
on

567
00:28:56,900 --> 00:29:09,680
okay oh I'm like why is it so slow

568
00:29:05,240 --> 00:29:17,339
because I didn't change it back to I

569
00:29:09,680 --> 00:29:20,340
didn't change back to retail there we go

570
00:29:17,339 --> 00:29:22,859
so now we're only testing a third of the

571
00:29:20,339 --> 00:29:25,189
phases and we're not doing all of the

572
00:29:22,859 --> 00:29:28,529
work necessary to generate those phases

573
00:29:25,190 --> 00:29:30,779
and so now we can see that that hey that

574
00:29:28,529 --> 00:29:33,000
number did actually drop roughly in half

575
00:29:30,779 --> 00:29:36,119
and that's exactly what we expected and

576
00:29:33,000 --> 00:29:38,069
it's exactly what we got right so that's

577
00:29:36,119 --> 00:29:40,889
pretty happy but like I was saying we're

578
00:29:38,069 --> 00:29:43,529
not really even close yet to where we

579
00:29:40,890 --> 00:29:45,990
need to be in terms of getting this to

580
00:29:43,529 --> 00:29:49,190
be fast enough so that's great

581
00:29:45,990 --> 00:29:51,180
you know we're happy campers we can

582
00:29:49,190 --> 00:29:53,100
remove our assertion because now we're

583
00:29:51,180 --> 00:29:55,470
only doing stuff that that we would

584
00:29:53,099 --> 00:29:59,189
expect to be doing right and that's good

585
00:29:55,470 --> 00:30:01,380
now what we want to do as well is start

586
00:29:59,190 --> 00:30:03,120
to break out what we actually need out

587
00:30:01,380 --> 00:30:06,330
of the box for us and what we don't need

588
00:30:03,119 --> 00:30:08,699
right so what you can see here is we

589
00:30:06,329 --> 00:30:12,750
need the width and the height right so

590
00:30:08,700 --> 00:30:14,670
we need these values for sure we need

591
00:30:12,750 --> 00:30:17,490
these values but we only actually need

592
00:30:14,670 --> 00:30:19,860
them in this case right so we don't need

593
00:30:17,490 --> 00:30:25,609
to actually pull these out unless we're

594
00:30:19,859 --> 00:30:25,609
we're getting to this point

595
00:30:28,359 --> 00:30:39,069
right this is the only time we actually

596
00:30:30,429 --> 00:30:42,130
need this information so we can avoid

597
00:30:39,069 --> 00:30:43,720
ever actually doing that sort of pull

598
00:30:42,130 --> 00:30:44,980
out until here now the compiler was

599
00:30:43,720 --> 00:30:46,929
probably smart enough to do that for us

600
00:30:44,980 --> 00:30:48,519
but we don't really want to stress the

601
00:30:46,929 --> 00:30:50,320
compiler any more than we have to on a

602
00:30:48,519 --> 00:30:51,819
critical path like this we want to do as

603
00:30:50,319 --> 00:30:53,288
much work as we can for it to give it

604
00:30:51,819 --> 00:30:54,609
the simplest possible thing to optimize

605
00:30:53,288 --> 00:30:59,558
just so it has the best chance of doing

606
00:30:54,609 --> 00:31:02,079
a good job in this stuff here you can

607
00:30:59,558 --> 00:31:04,778
see that we do a 2.0 times these and

608
00:31:02,079 --> 00:31:06,519
then check against the width so rather

609
00:31:04,778 --> 00:31:08,470
than doing that what we could easily do

610
00:31:06,519 --> 00:31:14,609
here is just stop doing this redundant

611
00:31:08,470 --> 00:31:14,610
work since we have the half-width right

612
00:31:26,278 --> 00:31:33,759
so now we don't really need any of that

613
00:31:29,528 --> 00:31:38,798
in there for the x-axis and y-axis

614
00:31:33,759 --> 00:31:42,429
obviously these are there we go

615
00:31:38,798 --> 00:31:45,759
obviously these are done directly here

616
00:31:42,429 --> 00:31:47,110
so we don't we're not really doing

617
00:31:45,759 --> 00:31:48,490
anything here other than just renaming

618
00:31:47,109 --> 00:31:50,138
some variables but I'm just gonna make

619
00:31:48,490 --> 00:31:55,808
it clear which ones we're doing here

620
00:31:50,138 --> 00:32:05,668
like so transparency isn't necessary the

621
00:31:55,808 --> 00:32:05,668
box source P oops and n are here

622
00:32:07,839 --> 00:32:23,480
here and so now at least we can see a

623
00:32:18,950 --> 00:32:25,120
little bit clearer what's going on all

624
00:32:23,480 --> 00:32:27,019
right

625
00:32:25,119 --> 00:32:28,219
so we just cleaned up some of the

626
00:32:27,019 --> 00:32:29,720
business there shouldn't have really

627
00:32:28,220 --> 00:32:31,339
sped up the code at all and hey it

628
00:32:29,720 --> 00:32:32,750
didn't so again like those are all

629
00:32:31,339 --> 00:32:34,819
things the compiler could have done for

630
00:32:32,750 --> 00:32:36,559
us so it looks roughly the same so now

631
00:32:34,819 --> 00:32:40,329
what we're gonna do is weld this routine

632
00:32:36,559 --> 00:32:40,329
in here so the get box surface call

633
00:32:43,599 --> 00:32:48,619
which does you know a tremendous amount

634
00:32:46,519 --> 00:32:53,420
of work here I'm just gonna grab this

635
00:32:48,619 --> 00:33:00,979
out directly and we're gonna start to

636
00:32:53,420 --> 00:33:05,560
work with it go we're gonna start to

637
00:33:00,980 --> 00:33:05,559
work with it in a more specific way

638
00:33:06,970 --> 00:33:20,920
where's my red cast so I if we drop this

639
00:33:14,829 --> 00:33:20,919
in here instead of calling function

640
00:33:21,009 --> 00:33:28,539
let's start by just taking that exactly

641
00:33:24,740 --> 00:33:31,539
as it is I'll call this box source

642
00:33:28,539 --> 00:33:31,539
source

643
00:33:55,920 --> 00:34:00,400
okay so we've got a couple things we

644
00:33:58,809 --> 00:34:05,710
need to do this it needs to be blocks

645
00:34:00,400 --> 00:34:26,019
min corner well I guess we need to like

646
00:34:05,710 --> 00:34:27,070
pull these out first right all right so

647
00:34:26,019 --> 00:34:29,079
now we should be able to run this

648
00:34:27,070 --> 00:34:32,169
directly now and still get the same

649
00:34:29,079 --> 00:34:34,389
lighting which we do and if you take a

650
00:34:32,168 --> 00:34:35,889
look at what happened is just we didn't

651
00:34:34,389 --> 00:34:37,960
do anything right I mean we did

652
00:34:35,889 --> 00:34:41,949
literally nothing that doubled the speed

653
00:34:37,960 --> 00:34:44,250
of the function right so again now we're

654
00:34:41,949 --> 00:34:48,129
starting it down we're about to xoa

655
00:34:44,250 --> 00:34:49,570
again from where we were before which is

656
00:34:48,130 --> 00:34:51,039
weird right but all we did was drop it

657
00:34:49,570 --> 00:34:54,210
in there and now the compiler can see it

658
00:34:51,039 --> 00:34:58,599
better or some other nonsense who knows

659
00:34:54,210 --> 00:35:00,130
we suddenly get much faster right so

660
00:34:58,599 --> 00:35:02,799
okay that's good news

661
00:35:00,130 --> 00:35:04,720
let's go ahead and push this a little

662
00:35:02,800 --> 00:35:07,480
further though so if you take a look at

663
00:35:04,719 --> 00:35:09,609
what's happening here there's some stuff

664
00:35:07,480 --> 00:35:12,070
right off the bat that we can do let's

665
00:35:09,610 --> 00:35:16,420
let's first of all before I go I guess

666
00:35:12,070 --> 00:35:18,700
any further let's just let's just see

667
00:35:16,420 --> 00:35:20,470
about whether all the things that we're

668
00:35:18,699 --> 00:35:22,239
using are actually necessary and whether

669
00:35:20,469 --> 00:35:24,969
or not we could be doing something

670
00:35:22,239 --> 00:35:28,299
smarter here because obviously there's

671
00:35:24,969 --> 00:35:30,969
there's there's possibilities for

672
00:35:28,300 --> 00:35:32,140
improvement certainly tons of

673
00:35:30,969 --> 00:35:35,909
possibilities for improvements but let's

674
00:35:32,139 --> 00:35:38,739
take take some of the simpler ones so

675
00:35:35,909 --> 00:35:40,599
for starters let me just rename these

676
00:35:38,739 --> 00:35:42,129
variables so that we're not accessing

677
00:35:40,599 --> 00:35:42,849
off of a box source for any particular

678
00:35:42,130 --> 00:35:46,780
reason

679
00:35:42,849 --> 00:36:05,539
right and

680
00:35:46,780 --> 00:36:07,430
there we go all right so now we're not

681
00:36:05,539 --> 00:36:08,690
like putting them into a structure and

682
00:36:07,429 --> 00:36:10,098
taking them out now again shouldn't

683
00:36:08,690 --> 00:36:11,809
change anything Kapow should be smart

684
00:36:10,099 --> 00:36:14,030
enough to have done that and it did but

685
00:36:11,809 --> 00:36:15,380
again remember putting that function in

686
00:36:14,030 --> 00:36:16,640
there in line should have been something

687
00:36:15,380 --> 00:36:19,160
the compiler was smart enough to do and

688
00:36:16,639 --> 00:36:20,568
didn't so you can't always assume that

689
00:36:19,159 --> 00:36:22,068
the compiler is gonna do something

690
00:36:20,568 --> 00:36:23,568
because compilers are very complicated

691
00:36:22,068 --> 00:36:26,798
and the optimization is a difficult

692
00:36:23,568 --> 00:36:30,558
problem especially for a language like C

693
00:36:26,798 --> 00:36:32,690
so it's important to you know actually

694
00:36:30,559 --> 00:36:35,589
make each individual change carefully

695
00:36:32,690 --> 00:36:37,608
and test to make sure that you can't get

696
00:36:35,588 --> 00:36:39,170
that you don't get speed ups when you

697
00:36:37,608 --> 00:36:40,460
change things because a lot of times may

698
00:36:39,170 --> 00:36:41,960
be something that you're not thinking of

699
00:36:40,460 --> 00:36:43,280
is preventing the compiler from doing an

700
00:36:41,960 --> 00:36:44,990
optimization that it should be able to

701
00:36:43,280 --> 00:36:46,880
do or that you think it might be able to

702
00:36:44,989 --> 00:36:50,449
do so you don't really want to make

703
00:36:46,880 --> 00:36:52,309
those assumptions anyway so let's now

704
00:36:50,449 --> 00:36:55,009
start making some structural changes to

705
00:36:52,309 --> 00:36:56,569
this if you look at what I'm doing here

706
00:36:55,010 --> 00:36:57,710
I'm looping over the box services and

707
00:36:56,568 --> 00:36:58,969
then I'm seeing whether or not I'm gonna

708
00:36:57,710 --> 00:37:02,480
test against them by seeing whether

709
00:36:58,969 --> 00:37:05,048
they're equivalent whether the direction

710
00:37:02,480 --> 00:37:08,030
is equivalent the question is why bother

711
00:37:05,048 --> 00:37:13,190
right why not just loop over the three

712
00:37:08,030 --> 00:37:15,349
axes directly like so and if I have the

713
00:37:13,190 --> 00:37:17,269
ability to generate any of the services

714
00:37:15,349 --> 00:37:20,568
I want which I did why not just loop

715
00:37:17,269 --> 00:37:23,349
over the three axes and say whichever

716
00:37:20,568 --> 00:37:25,818
what which did you want me to do right

717
00:37:23,349 --> 00:37:27,500
you want me to test against this one

718
00:37:25,818 --> 00:37:29,659
great that's the one I'm going to test

719
00:37:27,500 --> 00:37:31,579
against forget the if statement just I

720
00:37:29,659 --> 00:37:35,750
know I'm only going to test one of the

721
00:37:31,579 --> 00:37:37,460
faces in each for each axis I'm going to

722
00:37:35,750 --> 00:37:37,699
test one let's just pull out which one

723
00:37:37,460 --> 00:37:41,269
it is

724
00:37:37,699 --> 00:37:44,058
it's going to be whichever one whichever

725
00:37:41,269 --> 00:37:45,469
one is positive there right so we can

726
00:37:44,059 --> 00:37:47,630
get rid of some of the business that's

727
00:37:45,469 --> 00:37:49,399
happening there in a pretty

728
00:37:47,630 --> 00:37:51,470
straightforward way and the only thing

729
00:37:49,400 --> 00:37:53,298
we have to do now is actually be able to

730
00:37:51,469 --> 00:37:57,019
reconstruct this box service index so

731
00:37:53,298 --> 00:38:00,309
that I can pull the light indices out as

732
00:37:57,019 --> 00:38:00,309
necessary right

733
00:38:03,309 --> 00:38:09,259
so that's not even true because we

734
00:38:05,269 --> 00:38:22,280
already have it right here so even

735
00:38:09,260 --> 00:38:23,900
that's not you know that is true

736
00:38:22,280 --> 00:38:25,760
so the box service index I have to pull

737
00:38:23,900 --> 00:38:28,220
out which one of these we're talking

738
00:38:25,760 --> 00:38:30,440
about so in order to create the Box

739
00:38:28,219 --> 00:38:33,799
surface in next year I just need to be

740
00:38:30,440 --> 00:38:37,539
able to take whatever my access index

741
00:38:33,800 --> 00:38:43,789
was rank and add whether I was positive

742
00:38:37,539 --> 00:38:45,259
that's all I need to do so really I

743
00:38:43,789 --> 00:38:46,940
could put that up here because that's

744
00:38:45,260 --> 00:38:48,260
just something that we just know as soon

745
00:38:46,940 --> 00:38:50,150
as we compute whether or not it's

746
00:38:48,260 --> 00:38:52,820
positive we know what the box service

747
00:38:50,150 --> 00:38:54,980
indices as well right so again running

748
00:38:52,820 --> 00:38:57,530
it and what we can see now is we're

749
00:38:54,980 --> 00:38:59,240
basically we're really getting down to

750
00:38:57,530 --> 00:39:01,070
the same speed that we were before hand

751
00:38:59,239 --> 00:39:02,118
in fact I think now we might even be a

752
00:39:01,070 --> 00:39:05,240
little bit faster than we were

753
00:39:02,119 --> 00:39:09,710
originally oh but of course we're not

754
00:39:05,239 --> 00:39:14,569
actually working well that could be why

755
00:39:09,710 --> 00:39:19,570
um yeah it turns out if you don't

756
00:39:14,570 --> 00:39:24,859
actually work you you get faster uh so

757
00:39:19,570 --> 00:39:26,300
let's debug that for a second um so I I

758
00:39:24,858 --> 00:39:27,559
need to figure out whether or not I'm

759
00:39:26,300 --> 00:39:31,039
trying to test against the positive

760
00:39:27,559 --> 00:39:32,269
surface and so what or the negative

761
00:39:31,039 --> 00:39:34,338
surface so what I'm doing here is I'm

762
00:39:32,269 --> 00:39:37,670
tech checking which direction the Ray

763
00:39:34,338 --> 00:39:41,108
goes for this particular axis index I

764
00:39:37,670 --> 00:39:43,400
feel like that should have been correct

765
00:39:41,108 --> 00:39:45,799
trying to take a look at now why that

766
00:39:43,400 --> 00:39:48,849
wasn't correct

767
00:39:45,800 --> 00:39:48,849
[Music]

768
00:39:53,139 --> 00:39:58,750
let me just back this up a bit here

769
00:40:03,750 --> 00:40:14,489
let me just make sure that that was the

770
00:40:05,789 --> 00:40:15,659
change yeah so let's just take that a

771
00:40:14,489 --> 00:40:18,659
little bit slower here because obviously

772
00:40:15,659 --> 00:40:22,230
I was just going a little bit too fast

773
00:40:18,659 --> 00:40:25,559
parently um so what we want to do now is

774
00:40:22,230 --> 00:40:29,309
let's loop over the axes and generate

775
00:40:25,559 --> 00:40:30,568
the box index that we would expect so if

776
00:40:29,309 --> 00:40:32,759
we take a look at what's going on here

777
00:40:30,568 --> 00:40:34,230
we grab the axis index from the box

778
00:40:32,760 --> 00:40:36,030
service index shifted down by one and

779
00:40:34,230 --> 00:40:39,539
let me grab the positive this the

780
00:40:36,030 --> 00:40:41,819
positive based on the and advanced oh

781
00:40:39,539 --> 00:40:43,920
the question is well we know that we

782
00:40:41,818 --> 00:40:45,659
want the positive and the test against

783
00:40:43,920 --> 00:40:47,010
positive to be the same so we're only

784
00:40:45,659 --> 00:40:49,318
going to enter this loop when they're

785
00:40:47,010 --> 00:40:51,710
equivalent right so what I should be

786
00:40:49,318 --> 00:40:54,210
able to do here is say oh well okay

787
00:40:51,710 --> 00:40:57,150
that's pretty straightforward all I

788
00:40:54,210 --> 00:41:02,400
should have to do is create the box

789
00:40:57,150 --> 00:41:04,980
surface index in the opposite way right

790
00:41:02,400 --> 00:41:11,700
I should be able to say take the axis

791
00:41:04,980 --> 00:41:17,789
index shift it up by one and then or in

792
00:41:11,699 --> 00:41:21,029
you know the positive value right that's

793
00:41:17,789 --> 00:41:23,309
the thing that tells me whether thing is

794
00:41:21,030 --> 00:41:27,450
positive along this axis I should be

795
00:41:23,309 --> 00:41:31,230
able to just or in that value you know I

796
00:41:27,449 --> 00:41:33,269
can even be 100% explicit here if the ax

797
00:41:31,230 --> 00:41:34,740
index is greater than zero then it

798
00:41:33,269 --> 00:41:37,500
should be one otherwise it should be

799
00:41:34,739 --> 00:41:38,939
zero right then the box service index is

800
00:41:37,500 --> 00:41:41,130
just whatever the Exynos was shifted up

801
00:41:38,940 --> 00:41:46,940
by one orden with the positive value and

802
00:41:41,130 --> 00:41:50,630
off we go right so I should be able to

803
00:41:46,940 --> 00:41:50,630
to make that work

804
00:41:57,090 --> 00:42:00,630
let's start with that

805
00:42:04,630 --> 00:42:07,900
there we go

806
00:42:16,239 --> 00:42:25,869
and so now we should be able to flatten

807
00:42:24,760 --> 00:42:30,220
this out like I had it so I'm not sure

808
00:42:25,869 --> 00:42:32,259
what I accessed a messed up this part

809
00:42:30,219 --> 00:42:34,000
down here or something I'm not exactly

810
00:42:32,260 --> 00:42:35,620
sure what I did there wrong I made it

811
00:42:34,000 --> 00:42:39,099
maybe messed up the calculation of box

812
00:42:35,619 --> 00:42:41,949
surface index not really sure so anyway

813
00:42:39,099 --> 00:42:43,029
we can just come through here now let me

814
00:42:41,949 --> 00:42:50,710
let me double check this let me see if

815
00:42:43,030 --> 00:42:52,390
what happens when I do this that's still

816
00:42:50,710 --> 00:42:55,630
okay so I'm not sure what I must have

817
00:42:52,389 --> 00:42:57,429
had typos in there but anyway so we can

818
00:42:55,630 --> 00:42:59,590
now look where were the axes directly so

819
00:42:57,429 --> 00:43:02,289
we just do the three different axes and

820
00:42:59,590 --> 00:43:04,720
then do the positive test based on

821
00:43:02,289 --> 00:43:07,420
whatever the rate erection is and then

822
00:43:04,719 --> 00:43:09,159
we can go ahead and compute the rest of

823
00:43:07,420 --> 00:43:11,500
the stuff based on those values so now

824
00:43:09,159 --> 00:43:13,599
we're not even doing that if anymore

825
00:43:11,500 --> 00:43:18,820
we're just directly pulling the values

826
00:43:13,599 --> 00:43:22,989
out all right so let's keep going now in

827
00:43:18,820 --> 00:43:25,690
and continue to think more about what's

828
00:43:22,989 --> 00:43:27,309
what's happening here so there's a

829
00:43:25,690 --> 00:43:29,920
couple of pieces of information that we

830
00:43:27,309 --> 00:43:31,690
know now so one of the things that we

831
00:43:29,920 --> 00:43:37,450
know now that we didn't know before is

832
00:43:31,690 --> 00:43:39,789
the normal is always going to be a it's

833
00:43:37,449 --> 00:43:42,129
always going to look like a zero one

834
00:43:39,789 --> 00:43:45,489
zero zero zero one zero zero negative

835
00:43:42,130 --> 00:43:47,590
one so there's only ever going to be one

836
00:43:45,489 --> 00:43:51,699
element of the normal that actually is

837
00:43:47,590 --> 00:43:53,860
filled right and that's pretty important

838
00:43:51,699 --> 00:43:57,299
because the fact that we know that only

839
00:43:53,860 --> 00:44:03,400
one element of the normal is ever filled

840
00:43:57,300 --> 00:44:05,019
kind of lets us it lets us know that a

841
00:44:03,400 --> 00:44:06,970
bunch of the work that we're going to be

842
00:44:05,019 --> 00:44:10,300
doing down here

843
00:44:06,969 --> 00:44:13,029
is probably easy to simplify in a lot of

844
00:44:10,300 --> 00:44:15,880
ways so for example let's take ray

845
00:44:13,030 --> 00:44:20,560
source n the inner product of the raid

846
00:44:15,880 --> 00:44:22,710
erection and the normal eye we know that

847
00:44:20,559 --> 00:44:26,199
the normal can only have one component

848
00:44:22,710 --> 00:44:29,070
right and if we take a look at all the

849
00:44:26,199 --> 00:44:31,689
places that the normal is used here

850
00:44:29,070 --> 00:44:37,630
let's see where it's being used we've

851
00:44:31,690 --> 00:44:40,380
got here and here and that's it right we

852
00:44:37,630 --> 00:44:46,059
don't use the normal anywhere else so

853
00:44:40,380 --> 00:44:48,670
what we can see is this these two pieces

854
00:44:46,059 --> 00:44:51,250
of information and in fact I can

855
00:44:48,670 --> 00:44:56,139
reorganize this slightly here with no

856
00:44:51,250 --> 00:44:59,920
particular cost if we take a look at

857
00:44:56,139 --> 00:45:03,009
what's what's going on here you can see

858
00:44:59,920 --> 00:45:05,470
that the Ray source direction I started

859
00:45:03,010 --> 00:45:08,050
the race source N and the D value are

860
00:45:05,469 --> 00:45:10,539
both doing full inner products for no

861
00:45:08,050 --> 00:45:13,060
reason because all these two things are

862
00:45:10,539 --> 00:45:15,159
gonna do is they're gonna pick out based

863
00:45:13,059 --> 00:45:16,719
on an access index and positive they're

864
00:45:15,159 --> 00:45:20,519
gonna pick out and then optionally

865
00:45:16,719 --> 00:45:26,739
negate one of the elements of these two

866
00:45:20,519 --> 00:45:29,739
of these two of these two vectors right

867
00:45:26,739 --> 00:45:32,500
so ray D and rel origin are both just

868
00:45:29,739 --> 00:45:34,349
getting extracted they're not really you

869
00:45:32,500 --> 00:45:37,360
don't have to do any of the multiplies

870
00:45:34,349 --> 00:45:39,400
but that one and it doesn't really have

871
00:45:37,360 --> 00:45:42,789
to be a multiply it's just a sign flip

872
00:45:39,400 --> 00:45:45,220
right so what we can do is we can take a

873
00:45:42,789 --> 00:45:48,509
look at what's happening here we can

874
00:45:45,219 --> 00:45:51,789
loft this stuff up a little bit right

875
00:45:48,510 --> 00:45:53,440
and say these pieces of information

876
00:45:51,789 --> 00:45:57,269
should be able to compute it in that way

877
00:45:53,440 --> 00:46:00,880
so for starters let's take racehorses n

878
00:45:57,269 --> 00:46:06,639
right and let's just go in here and put

879
00:46:00,880 --> 00:46:08,320
in what racehorse n would be so in both

880
00:46:06,639 --> 00:46:12,989
these cases it's the raid erection which

881
00:46:08,320 --> 00:46:17,650
we know inner product ad by the N which

882
00:46:12,989 --> 00:46:20,949
we know right after this line right and

883
00:46:17,650 --> 00:46:22,210
so if we're going to and and similarly

884
00:46:20,949 --> 00:46:23,679
we've kind of got a couple situations

885
00:46:22,210 --> 00:46:25,300
where they're a little bit more

886
00:46:23,679 --> 00:46:29,139
confusing but if you take a look at what

887
00:46:25,300 --> 00:46:31,450
happens here with the min corner Plus

888
00:46:29,139 --> 00:46:33,730
this fan this can be computed a little

889
00:46:31,449 --> 00:46:37,029
bit earlier as well right so the span

890
00:46:33,730 --> 00:46:38,440
and the p value we could have put those

891
00:46:37,030 --> 00:46:41,369
right here right because all they

892
00:46:38,440 --> 00:46:43,889
require is that um so

893
00:46:41,369 --> 00:46:45,210
again the devalue the relative origin

894
00:46:43,889 --> 00:46:47,900
can be computed immediately thereafter

895
00:46:45,210 --> 00:46:55,318
and that means the D value can also be

896
00:46:47,900 --> 00:46:56,969
computed inside here as well right now

897
00:46:55,318 --> 00:46:59,038
again I haven't done anything right I

898
00:46:56,969 --> 00:47:00,630
just reorganized the code the order in

899
00:46:59,039 --> 00:47:02,190
which the code was happening so when we

900
00:47:00,630 --> 00:47:06,660
run this we should get exactly the same

901
00:47:02,190 --> 00:47:09,989
result as we got before and we do right

902
00:47:06,659 --> 00:47:12,449
so off we go so now what we want to do

903
00:47:09,989 --> 00:47:14,489
is we just want to go okay let's change

904
00:47:12,449 --> 00:47:16,978
these because we really don't need to do

905
00:47:14,489 --> 00:47:18,599
inner products here there's no point to

906
00:47:16,978 --> 00:47:21,358
it right it doesn't really do anything

907
00:47:18,599 --> 00:47:24,119
for us so what we can do instead is say

908
00:47:21,358 --> 00:47:26,130
alright this computation for D this

909
00:47:24,119 --> 00:47:29,700
inner product we know that the we know

910
00:47:26,130 --> 00:47:30,869
that the normals value is 1 right we

911
00:47:29,699 --> 00:47:32,759
know that that's what it's going to be

912
00:47:30,869 --> 00:47:35,430
and we know that it's going to be in

913
00:47:32,759 --> 00:47:36,599
this access index location right we know

914
00:47:35,429 --> 00:47:38,278
that's the element now the other two

915
00:47:36,599 --> 00:47:41,278
elements going to be zero so the inner

916
00:47:38,278 --> 00:47:45,150
product of anything with n is really

917
00:47:41,278 --> 00:47:46,739
just going to pick out that value does

918
00:47:45,150 --> 00:47:57,170
that make sense so all we're really

919
00:47:46,739 --> 00:48:00,539
doing is this does that make sense and

920
00:47:57,170 --> 00:48:03,920
similarly down here all we're really

921
00:48:00,539 --> 00:48:06,989
doing is the same operation but negated

922
00:48:03,920 --> 00:48:10,278
that's it so that's all the normal

923
00:48:06,989 --> 00:48:12,568
really does for us in this whole routine

924
00:48:10,278 --> 00:48:14,278
we don't ever really need to compute

925
00:48:12,568 --> 00:48:16,259
with it because we're just picking out a

926
00:48:14,278 --> 00:48:17,789
very simple piece of information from it

927
00:48:16,259 --> 00:48:19,170
and you can see the dart you know our

928
00:48:17,789 --> 00:48:24,089
lighting is exactly the same as it was

929
00:48:19,170 --> 00:48:25,769
before so what that means is the normal

930
00:48:24,088 --> 00:48:28,259
as a value just isn't even relevant

931
00:48:25,768 --> 00:48:30,598
anymore right we don't even care about

932
00:48:28,259 --> 00:48:32,929
it it doesn't even function you know

933
00:48:30,599 --> 00:48:35,999
factored into this routine in any way

934
00:48:32,929 --> 00:48:39,568
that's all we that's all we've got right

935
00:48:35,998 --> 00:48:41,248
very very straightforward so furthermore

936
00:48:39,568 --> 00:48:42,478
what we can do here is just have a

937
00:48:41,248 --> 00:48:44,009
signed value and do these with a

938
00:48:42,478 --> 00:48:48,358
multiply if we wanted to and then we

939
00:48:44,009 --> 00:48:52,489
wouldn't even have to have two branches

940
00:48:48,358 --> 00:48:52,489
here either so

941
00:48:52,639 --> 00:49:00,308
oh whoops you know what this is not

942
00:48:55,099 --> 00:49:06,349
quite true these do have to be done

943
00:49:00,309 --> 00:49:08,390
after here because min corner max corner

944
00:49:06,349 --> 00:49:15,400
still has to do its thing that's weird

945
00:49:08,389 --> 00:49:15,400
that it that's weird that that worked

946
00:49:17,139 --> 00:49:26,900
like that lighting was still pretty much

947
00:49:19,639 --> 00:49:29,379
right visually looking even though this

948
00:49:26,900 --> 00:49:31,309
has an incorrect displacement of the

949
00:49:29,380 --> 00:49:34,940
position of the face

950
00:49:31,309 --> 00:49:38,298
I guess cuz if move them yeah that's

951
00:49:34,940 --> 00:49:41,420
interesting right this this is supposed

952
00:49:38,298 --> 00:49:44,329
to be modified first well I'll fix that

953
00:49:41,420 --> 00:49:46,068
in a second all I was gonna say is all

954
00:49:44,329 --> 00:49:48,849
we really need here is a sign value

955
00:49:46,068 --> 00:49:58,028
right so we just need a sign value

956
00:49:48,849 --> 00:49:58,028
that's gonna be 1.0 or or negative 1.0

957
00:49:58,869 --> 00:50:03,200
right that's all we really needed and

958
00:50:01,608 --> 00:50:10,940
then these pieces of information can be

959
00:50:03,199 --> 00:50:14,838
computed down here like so so they don't

960
00:50:10,940 --> 00:50:16,429
really need to be predicated they can

961
00:50:14,838 --> 00:50:18,858
just be handled directly so it's really

962
00:50:16,429 --> 00:50:20,419
just a sign value there so anyway that

963
00:50:18,858 --> 00:50:22,219
allows us to fix the bug which I

964
00:50:20,420 --> 00:50:23,869
introduced there I'm just it's it's

965
00:50:22,219 --> 00:50:25,808
interesting how much you can get away

966
00:50:23,869 --> 00:50:27,798
with and still have a visually correct

967
00:50:25,809 --> 00:50:30,410
looking result I'm sure it would have

968
00:50:27,798 --> 00:50:35,210
shown up in other places but you know

969
00:50:30,409 --> 00:50:36,500
so anyway point being all we really need

970
00:50:35,210 --> 00:50:39,409
is that sign value and then we can

971
00:50:36,500 --> 00:50:40,579
continue going here so let's start

972
00:50:39,409 --> 00:50:42,139
taking a look at some of the other

973
00:50:40,579 --> 00:50:44,720
things that we can be doing that we're

974
00:50:42,139 --> 00:50:46,578
not doing yet so this positive value

975
00:50:44,719 --> 00:50:48,230
here we needed to know because we need

976
00:50:46,579 --> 00:50:50,359
to know whether we do the min corner max

977
00:50:48,230 --> 00:50:53,028
corner thing instantly that's where we

978
00:50:50,358 --> 00:50:54,489
get our sign from but we've got our sort

979
00:50:53,028 --> 00:50:59,269
of our other stuff here which is our

980
00:50:54,489 --> 00:51:02,269
x-axis y-axis stuff let's see

981
00:50:59,269 --> 00:51:07,329
let's put that down there you don't need

982
00:51:02,269 --> 00:51:07,329
that for anything right yeah there we go

983
00:51:09,190 --> 00:51:13,400
so similarly here we've got sine X we

984
00:51:12,050 --> 00:51:15,110
don't really need to be doing a test on

985
00:51:13,400 --> 00:51:18,139
that because we already have a sine

986
00:51:15,110 --> 00:51:19,640
value the sine value is exactly this

987
00:51:18,139 --> 00:51:21,799
right

988
00:51:19,639 --> 00:51:24,279
it's 1.0 or negative 1.0 based on the

989
00:51:21,800 --> 00:51:31,039
positive value so we can just do that

990
00:51:24,280 --> 00:51:33,260
right and then we can switch it the way

991
00:51:31,039 --> 00:51:35,119
we were switching it before so that's

992
00:51:33,260 --> 00:51:38,869
also I suppose something that doesn't

993
00:51:35,119 --> 00:51:41,390
really need to to be predicated either

994
00:51:38,869 --> 00:51:43,610
right so again getting back towards

995
00:51:41,389 --> 00:51:46,579
running as fast as we were before and

996
00:51:43,610 --> 00:51:50,420
not storing any of that information so

997
00:51:46,579 --> 00:51:51,769
let's go ahead and you know I again

998
00:51:50,420 --> 00:51:54,889
continue forwards with what we're doing

999
00:51:51,769 --> 00:51:57,199
so now if we take a look at what we're

1000
00:51:54,889 --> 00:51:59,269
doing a lot of this work to create these

1001
00:51:57,199 --> 00:52:04,339
axes I guess one question is do we

1002
00:51:59,269 --> 00:52:07,400
really need to do it you know and what

1003
00:52:04,340 --> 00:52:11,990
you can see here is we don't really care

1004
00:52:07,400 --> 00:52:12,650
which direction the axes go right we

1005
00:52:11,989 --> 00:52:16,009
don't care

1006
00:52:12,650 --> 00:52:17,539
so getting the sine right on the axis

1007
00:52:16,010 --> 00:52:20,869
which is something we're doing a lot

1008
00:52:17,539 --> 00:52:22,759
isn't really necessary because we don't

1009
00:52:20,869 --> 00:52:24,950
care which way it went

1010
00:52:22,760 --> 00:52:28,400
we're checking for essentially an

1011
00:52:24,949 --> 00:52:31,009
absolute value here right we're looking

1012
00:52:28,400 --> 00:52:33,769
to see whether it's in between this the

1013
00:52:31,010 --> 00:52:35,510
same thing on either side so if what

1014
00:52:33,769 --> 00:52:38,420
we're doing is checking for an absolute

1015
00:52:35,510 --> 00:52:41,090
value then the X check and the Y check

1016
00:52:38,420 --> 00:52:44,599
values really we don't care what the

1017
00:52:41,090 --> 00:52:47,809
sign of the x-axis even is so when we do

1018
00:52:44,599 --> 00:52:50,449
this sine X thing it doesn't matter

1019
00:52:47,809 --> 00:52:53,119
right it just doesn't matter which one

1020
00:52:50,449 --> 00:53:00,739
this was so we can just replace this in

1021
00:52:53,119 --> 00:53:03,640
set instead with this and it would be

1022
00:53:00,739 --> 00:53:03,639
exactly the same

1023
00:53:07,268 --> 00:53:16,488
right so we don't need that piece of

1024
00:53:13,460 --> 00:53:17,539
information at all we we could just get

1025
00:53:16,489 --> 00:53:19,849
rid of it

1026
00:53:17,539 --> 00:53:22,278
and again eliminate a lot of the work

1027
00:53:19,849 --> 00:53:25,489
that we're doing there so now the

1028
00:53:22,278 --> 00:53:27,528
question is well how far can we take

1029
00:53:25,489 --> 00:53:30,380
that right I mean what else can we do

1030
00:53:27,528 --> 00:53:34,548
here so the first thing to note is we

1031
00:53:30,380 --> 00:53:36,680
already had a way of handling here that

1032
00:53:34,548 --> 00:53:37,608
this the fact that we didn't really need

1033
00:53:36,679 --> 00:53:41,629
the half-width

1034
00:53:37,608 --> 00:53:43,578
either so we could also say well the

1035
00:53:41,630 --> 00:53:45,259
probably the better way to do this would

1036
00:53:43,579 --> 00:53:46,789
again be would be to return to what we

1037
00:53:45,259 --> 00:53:50,210
were doing before where we just multiply

1038
00:53:46,789 --> 00:53:53,299
these values by two right and then use

1039
00:53:50,210 --> 00:53:54,949
the width and height that's what we were

1040
00:53:53,298 --> 00:53:56,389
originally doing so now that we see that

1041
00:53:54,949 --> 00:54:03,379
the width and height is actually what we

1042
00:53:56,389 --> 00:54:05,929
have we can also get rid of that right

1043
00:54:03,380 --> 00:54:09,200
so continuing on just simplifying these

1044
00:54:05,929 --> 00:54:11,538
things down but again having to multiply

1045
00:54:09,199 --> 00:54:13,038
by two is kind of annoying here so it

1046
00:54:11,539 --> 00:54:15,380
probably would have been nice to not

1047
00:54:13,039 --> 00:54:16,969
have to do that either maybe we can get

1048
00:54:15,380 --> 00:54:22,249
rid of that as well like we'll find out

1049
00:54:16,969 --> 00:54:24,789
right so let's keep going

1050
00:54:22,248 --> 00:54:27,318
down exactly the same exactly same path

1051
00:54:24,789 --> 00:54:29,749
so if we take a look at what's happening

1052
00:54:27,318 --> 00:54:31,248
here the same logic applies to our inner

1053
00:54:29,748 --> 00:54:35,118
product that applied to the one with the

1054
00:54:31,248 --> 00:54:37,308
normal this Ray position thing here is

1055
00:54:35,119 --> 00:54:40,338
really just getting selected by the x

1056
00:54:37,309 --> 00:54:43,400
axis or the y axis and what we can see

1057
00:54:40,338 --> 00:54:45,650
is the x axis and the y axis are really

1058
00:54:43,400 --> 00:54:48,619
just used to pull out pieces of

1059
00:54:45,650 --> 00:54:50,778
information they're not really used for

1060
00:54:48,619 --> 00:54:52,999
a full dot product because we know

1061
00:54:50,778 --> 00:54:55,268
they're always access aligned and a dot

1062
00:54:52,998 --> 00:54:58,608
product that's axis aligned and unit

1063
00:54:55,268 --> 00:55:00,169
just plucks out a value so now we know

1064
00:54:58,608 --> 00:55:02,150
the sign never changes so we know that

1065
00:55:00,170 --> 00:55:05,380
these are just selections so really what

1066
00:55:02,150 --> 00:55:09,619
we could do is again we can just say hey

1067
00:55:05,380 --> 00:55:14,509
all so this can be computed down here

1068
00:55:09,619 --> 00:55:18,230
right um so we can just say hey why not

1069
00:55:14,509 --> 00:55:20,630
just take the

1070
00:55:18,230 --> 00:55:23,269
values out directly that are the values

1071
00:55:20,630 --> 00:55:23,960
that we want and so what I can do is say

1072
00:55:23,268 --> 00:55:27,199
all right

1073
00:55:23,960 --> 00:55:29,900
the x-axis was predicated on this so

1074
00:55:27,199 --> 00:55:33,798
what it was saying was if the x-axis was

1075
00:55:29,900 --> 00:55:35,930
zero then I'm sorry if the accident is

1076
00:55:33,798 --> 00:55:40,250
was zero then the x-axis is that

1077
00:55:35,929 --> 00:55:43,730
otherwise the x-axis is this that's what

1078
00:55:40,250 --> 00:55:45,380
we were saying so what we could do

1079
00:55:43,730 --> 00:55:48,500
instead is just say well all right if

1080
00:55:45,380 --> 00:55:50,420
that's what the x-axis is can we just go

1081
00:55:48,500 --> 00:55:53,028
ahead and predicate these directly on

1082
00:55:50,420 --> 00:55:56,420
that instead of doing a bunch of fussing

1083
00:55:53,028 --> 00:55:58,670
to make that happen and the answer is

1084
00:55:56,420 --> 00:56:00,289
hopefully yes so here we could just say

1085
00:55:58,670 --> 00:56:08,568
all right well the width then is just

1086
00:56:00,289 --> 00:56:13,278
the spans x-axis right but we don't want

1087
00:56:08,568 --> 00:56:17,440
it signed that's all it is similarly

1088
00:56:13,278 --> 00:56:17,440
here it would just be the y-axis so

1089
00:56:18,909 --> 00:56:27,429
again converting that back it's just

1090
00:56:25,278 --> 00:56:27,429
this

1091
00:56:30,400 --> 00:56:37,869
so there's that wit and of course we can

1092
00:56:34,250 --> 00:56:51,469
do the exact same thing for the height

1093
00:56:37,869 --> 00:56:53,240
right yeah where'd my oh I'm like

1094
00:56:51,469 --> 00:56:55,730
where'd my access truck go it's right

1095
00:56:53,239 --> 00:56:56,389
here so the sack same thing we can do

1096
00:56:55,730 --> 00:56:59,119
for the height

1097
00:56:56,389 --> 00:57:05,960
there's my access index so I want to

1098
00:56:59,119 --> 00:57:09,108
pick out the Y value in the case of the

1099
00:57:05,960 --> 00:57:11,210
axis is 2 and I want to pit up pick out

1100
00:57:09,108 --> 00:57:17,358
the Z value in the case where the axis

1101
00:57:11,210 --> 00:57:19,070
is not so that's all I really need to do

1102
00:57:17,358 --> 00:57:22,460
there to get my width and my height

1103
00:57:19,070 --> 00:57:25,880
right that gives me that value directly

1104
00:57:22,460 --> 00:57:27,199
and similarly in my X chicken Y check I

1105
00:57:25,880 --> 00:57:30,170
just need to be able to do the same

1106
00:57:27,199 --> 00:57:32,689
thing with the Ray position and so I

1107
00:57:30,170 --> 00:57:36,500
again I can just say the exact same

1108
00:57:32,690 --> 00:57:37,909
thing the only difference is it's going

1109
00:57:36,500 --> 00:57:47,630
to come from the rapey instead of this

1110
00:57:37,909 --> 00:57:50,750
fan right pretty straightforward I guess

1111
00:57:47,630 --> 00:57:52,960
I should keep this probably rolled out

1112
00:57:50,750 --> 00:57:56,119
because it's doing the exact same check

1113
00:57:52,960 --> 00:57:58,900
but I'm just gonna leave that for for a

1114
00:57:56,119 --> 00:57:58,900
second instead

1115
00:58:18,449 --> 00:58:21,599
there we go

1116
00:58:22,739 --> 00:58:26,379
so again inner products not necessary in

1117
00:58:25,750 --> 00:58:27,880
this case

1118
00:58:26,380 --> 00:58:30,280
we're just sort of getting the value out

1119
00:58:27,880 --> 00:58:32,289
directly if we want to but again we're

1120
00:58:30,280 --> 00:58:33,880
sort of a little bit sloppy here like we

1121
00:58:32,289 --> 00:58:35,440
maybe could do better than this we'll

1122
00:58:33,880 --> 00:58:37,660
have to see in a second just in terms of

1123
00:58:35,440 --> 00:58:40,809
how we're organizing all of our of our

1124
00:58:37,659 --> 00:58:44,019
information but again we should still

1125
00:58:40,809 --> 00:58:47,909
get the same result here hopefully with

1126
00:58:44,019 --> 00:58:47,909
no issues and we do so that's good

1127
00:58:53,289 --> 00:58:58,759
there we go

1128
00:58:55,489 --> 00:59:02,239
and so if we just keep pressing this and

1129
00:58:58,760 --> 00:59:04,340
you know again we keep sort of wringing

1130
00:59:02,239 --> 00:59:08,629
it out more and more you can see kind of

1131
00:59:04,340 --> 00:59:10,780
how we're continuing to go down so and

1132
00:59:08,630 --> 00:59:14,110
we don't need that anymore

1133
00:59:10,780 --> 00:59:17,330
so there's still more we can do here

1134
00:59:14,110 --> 00:59:19,809
obviously you know looking at sort of

1135
00:59:17,329 --> 00:59:22,069
the way that we're computing this stuff

1136
00:59:19,809 --> 00:59:27,860
with the min corner and Max corner and

1137
00:59:22,070 --> 00:59:34,039
all that and the side and so on so in

1138
00:59:27,860 --> 00:59:36,610
terms of the sine or sorry in terms of

1139
00:59:34,039 --> 00:59:40,250
the span what you can see here is that

1140
00:59:36,610 --> 00:59:42,470
the place that we use the span is for

1141
00:59:40,250 --> 00:59:47,960
two pieces of information we use it for

1142
00:59:42,469 --> 00:59:49,759
the width and height right but and and

1143
00:59:47,960 --> 00:59:53,389
so we're subtracting these two things in

1144
00:59:49,760 --> 00:59:56,240
order to figure out that test but if you

1145
00:59:53,389 --> 01:00:02,210
think about it we really don't need to

1146
00:59:56,239 --> 01:00:08,329
do all of that work because that work is

1147
01:00:02,210 --> 01:00:11,449
just we already know the bounds of the X

1148
01:00:08,329 --> 01:00:17,059
and the y they're exactly the min and

1149
01:00:11,449 --> 01:00:18,919
Max corner right so we could the way

1150
01:00:17,059 --> 01:00:23,659
that we're doing this relative to the

1151
01:00:18,920 --> 01:00:26,240
box here we could instead have just had

1152
01:00:23,659 --> 01:00:31,069
the min and Max corner be relative to

1153
01:00:26,239 --> 01:00:34,149
the position and go from there I have to

1154
01:00:31,070 --> 01:00:34,150
look here

1155
01:00:37,679 --> 01:00:47,960
I guess what I'm trying to say is the

1156
01:00:44,670 --> 01:00:59,099
relative origin right where we subtract

1157
01:00:47,960 --> 01:01:01,769
the Ray origin - minus P there it gives

1158
01:00:59,099 --> 01:01:10,170
us an intersection that is centered

1159
01:01:01,769 --> 01:01:12,119
around the the box's position but it

1160
01:01:10,170 --> 01:01:14,730
doesn't have to be centered around the

1161
01:01:12,119 --> 01:01:17,250
box's position I guess is the way I

1162
01:01:14,730 --> 01:01:20,309
would say it we can do this computation

1163
01:01:17,250 --> 01:01:22,530
relative to any point on the plane so

1164
01:01:20,309 --> 01:01:26,509
what we could choose to do instead is

1165
01:01:22,530 --> 01:01:30,260
just do this relative to the min corner

1166
01:01:26,510 --> 01:01:33,810
because take a look at what happens here

1167
01:01:30,260 --> 01:01:36,960
P is a totally arbitrary choice of a

1168
01:01:33,809 --> 01:01:39,420
point on the plane and there is no place

1169
01:01:36,960 --> 01:01:44,039
where we actually use it other than as

1170
01:01:39,420 --> 01:01:46,860
that point on the plane right so we

1171
01:01:44,039 --> 01:01:49,349
could just say don't bother with the

1172
01:01:46,860 --> 01:01:51,230
span addition here at all and this would

1173
01:01:49,349 --> 01:01:53,880
still be the exact same set of equations

1174
01:01:51,230 --> 01:01:57,570
because as long as we pick any point on

1175
01:01:53,880 --> 01:02:01,190
the plane we're done right the only

1176
01:01:57,570 --> 01:02:03,450
difference is now when we check our

1177
01:02:01,190 --> 01:02:06,380
coordinates for the bounds check our

1178
01:02:03,449 --> 01:02:08,789
gonna be different but hey guess what

1179
01:02:06,380 --> 01:02:11,190
one of the really nice things about this

1180
01:02:08,789 --> 01:02:14,369
is now instead of negative width to

1181
01:02:11,190 --> 01:02:16,889
width it's just zero on one side it's as

1182
01:02:14,369 --> 01:02:20,670
long as it's higher than zero right on

1183
01:02:16,889 --> 01:02:23,250
one side and less than or equal to the

1184
01:02:20,670 --> 01:02:27,659
width on the other side so that means we

1185
01:02:23,250 --> 01:02:31,170
no longer have to multiply we would no

1186
01:02:27,659 --> 01:02:33,210
longer have to we would no longer have

1187
01:02:31,170 --> 01:02:35,789
to check against we do a subtraction on

1188
01:02:33,210 --> 01:02:38,340
the other side to do that check now the

1189
01:02:35,789 --> 01:02:40,230
only question I have there is if I shift

1190
01:02:38,340 --> 01:02:42,360
it to the min corner and I do the

1191
01:02:40,230 --> 01:02:44,789
intersection it should just be regular

1192
01:02:42,360 --> 01:02:47,940
width that I'm testing still as well

1193
01:02:44,789 --> 01:02:51,409
yeah I think that's fine but the

1194
01:02:47,940 --> 01:02:51,409
negative width and height on either side

1195
01:02:54,150 --> 01:02:58,480
this this should just you should just

1196
01:02:56,769 --> 01:02:59,858
not have to multiply it by two anymore

1197
01:02:58,480 --> 01:03:01,659
right because you're just taking

1198
01:02:59,858 --> 01:03:02,828
whatever it is it should be between zero

1199
01:03:01,659 --> 01:03:09,250
and the width that that's it

1200
01:03:02,829 --> 01:03:12,099
right um yeah I mean I think I think

1201
01:03:09,250 --> 01:03:26,519
that basically just works for the exact

1202
01:03:12,099 --> 01:03:26,519
same equations or not it should have

1203
01:03:31,380 --> 01:03:42,160
relative origins reminds P the X check

1204
01:03:37,298 --> 01:03:45,119
is no longer x - if it's greater than 3

1205
01:03:42,159 --> 01:03:45,118
or less than the height

1206
01:04:08,079 --> 01:04:17,470
so I guess the problem there is the sign

1207
01:04:11,949 --> 01:04:20,078
does matter at that point so if the sign

1208
01:04:17,469 --> 01:04:23,230
of the axis is wrong so I really do have

1209
01:04:20,079 --> 01:04:26,170
to kind of do this as the bounds check

1210
01:04:23,230 --> 01:04:29,260
the way that I originally was sort of

1211
01:04:26,170 --> 01:04:39,220
going to finish doing it so I guess I

1212
01:04:29,260 --> 01:04:43,359
can just finish doing it hopefully all

1213
01:04:39,219 --> 01:04:51,819
right so let me explain that

1214
01:04:43,358 --> 01:04:53,380
oops so doing it around the center

1215
01:04:51,820 --> 01:04:55,570
allows me to not care which direction

1216
01:04:53,380 --> 01:04:57,039
the axis goes if I wanted to do it the

1217
01:04:55,570 --> 01:04:58,750
other way I would have to care which

1218
01:04:57,039 --> 01:05:01,239
direction the axis goes and that's why

1219
01:04:58,750 --> 01:05:03,088
that that chain didn't work but let me

1220
01:05:01,239 --> 01:05:05,949
explain to you what I wanted to be doing

1221
01:05:03,088 --> 01:05:08,828
as the next step because it wouldn't

1222
01:05:05,949 --> 01:05:12,039
depend on that exactly and then we'll

1223
01:05:08,829 --> 01:05:16,359
see how we can get there so what I

1224
01:05:12,039 --> 01:05:18,849
wanted to do was when you do the raycast

1225
01:05:16,358 --> 01:05:20,348
you're gonna get a point right and right

1226
01:05:18,849 --> 01:05:22,269
now what I'm doing is I'm taking

1227
01:05:20,349 --> 01:05:24,789
whatever we're calling the min corner

1228
01:05:22,269 --> 01:05:27,159
here I'm taking that and saying well

1229
01:05:24,789 --> 01:05:29,769
okay I'm gonna displace that and make a

1230
01:05:27,159 --> 01:05:30,940
point value here then the axes are

1231
01:05:29,769 --> 01:05:32,409
pointing whatever direction they are

1232
01:05:30,940 --> 01:05:33,460
look maybe they're left-handed maybe

1233
01:05:32,409 --> 01:05:34,568
they're right-handed we don't know

1234
01:05:33,460 --> 01:05:35,980
they're whatever they are because we

1235
01:05:34,568 --> 01:05:37,239
don't want to actually spend the time to

1236
01:05:35,980 --> 01:05:39,550
generate one facing a particular

1237
01:05:37,239 --> 01:05:42,848
direction so they're pointing some

1238
01:05:39,550 --> 01:05:44,318
either in one of these directions right

1239
01:05:42,849 --> 01:05:45,460
we've got one pointing up or down and

1240
01:05:44,318 --> 01:05:47,949
one pointing left or right we don't know

1241
01:05:45,460 --> 01:05:49,510
which but then we can test against

1242
01:05:47,949 --> 01:05:51,848
positive or negative width and we're

1243
01:05:49,510 --> 01:05:55,060
fine because at that point we just kind

1244
01:05:51,849 --> 01:05:56,950
of know that whichever way the axis was

1245
01:05:55,059 --> 01:05:59,230
going we're checking for either side of

1246
01:05:56,949 --> 01:06:01,299
the axis anyway so it's fine the problem

1247
01:05:59,230 --> 01:06:03,429
is this causes us to have to do extra

1248
01:06:01,300 --> 01:06:09,220
work to create like this p-value and so

1249
01:06:03,429 --> 01:06:10,659
on and so at that point it is just it's

1250
01:06:09,219 --> 01:06:13,088
it's a little bit of extra work that we

1251
01:06:10,659 --> 01:06:14,348
probably shouldn't have to do but what I

1252
01:06:13,088 --> 01:06:16,480
was going to say is well with the min

1253
01:06:14,349 --> 01:06:18,640
quarter max corner we already know how

1254
01:06:16,480 --> 01:06:21,489
to test the bounds

1255
01:06:18,639 --> 01:06:23,139
this thing anyway so do we really need

1256
01:06:21,489 --> 01:06:24,730
to do that work because we already know

1257
01:06:23,139 --> 01:06:28,868
what the bounds are even just in world

1258
01:06:24,730 --> 01:06:31,960
space right but what I'm thinking now is

1259
01:06:28,869 --> 01:06:33,880
well okay but when we store these boxes

1260
01:06:31,960 --> 01:06:35,230
we could have distorted the boxes in the

1261
01:06:33,880 --> 01:06:37,358
other way anyway

1262
01:06:35,230 --> 01:06:40,389
right we could just store the boxes as a

1263
01:06:37,358 --> 01:06:42,429
P plus a radius instead of having to do

1264
01:06:40,389 --> 01:06:44,048
a min corner and if we just store them

1265
01:06:42,429 --> 01:06:46,449
that way then this would be a non-issue

1266
01:06:44,048 --> 01:06:48,489
right we'd read the P out and the span

1267
01:06:46,449 --> 01:06:54,759
would already be what we what we would

1268
01:06:48,489 --> 01:06:58,980
know just ahead of time right so instead

1269
01:06:54,759 --> 01:06:58,980
we could do is say like oh okay

1270
01:07:00,599 --> 01:07:11,109
if we imagined doing this it's the same

1271
01:07:08,469 --> 01:07:13,738
same thing right it doesn't matter which

1272
01:07:11,108 --> 01:07:13,739
those we do

1273
01:07:25,079 --> 01:07:30,179
if we imagine doing this then we could

1274
01:07:26,608 --> 01:07:31,380
just say well let how did I make that

1275
01:07:30,179 --> 01:07:34,079
same mistake again

1276
01:07:31,380 --> 01:07:48,869
is there something weird about doing it

1277
01:07:34,079 --> 01:07:58,369
the way that I'm doing it here I must be

1278
01:07:48,869 --> 01:07:58,369
missing something subtle oh there's some

1279
01:08:05,570 --> 01:08:11,640
there we go uh so I must be missing

1280
01:08:10,170 --> 01:08:34,560
something subtle here because you should

1281
01:08:11,639 --> 01:08:35,488
be able to do Oh slow day huh got to

1282
01:08:34,560 --> 01:08:40,859
make sure you actually put that in

1283
01:08:35,488 --> 01:08:42,059
parentheses that's great so I can flip

1284
01:08:40,859 --> 01:08:44,310
the meaning of these two things around

1285
01:08:42,060 --> 01:08:46,680
right and if I did that then I wouldn't

1286
01:08:44,310 --> 01:08:48,600
have to actually compute these values

1287
01:08:46,680 --> 01:08:51,000
right because I could just store the box

1288
01:08:48,600 --> 01:08:53,970
as these two pieces of information that

1289
01:08:51,000 --> 01:08:56,729
p-value and the span value right and

1290
01:08:53,970 --> 01:09:00,230
then I can just check these in this way

1291
01:08:56,729 --> 01:09:05,759
I can also just do absolute value here

1292
01:09:00,229 --> 01:09:06,929
which would be a direct operation I can

1293
01:09:05,759 --> 01:09:10,048
do on the floating point flyer it's just

1294
01:09:06,930 --> 01:09:12,838
knocking out the high bit so I can do

1295
01:09:10,048 --> 01:09:14,220
that in one check right I could do

1296
01:09:12,838 --> 01:09:17,818
something like if absolute value is less

1297
01:09:14,220 --> 01:09:19,048
than or equal to width right I just

1298
01:09:17,819 --> 01:09:21,870
don't know how that's gonna pan out

1299
01:09:19,048 --> 01:09:23,850
speed wise here it's a good question

1300
01:09:21,869 --> 01:09:28,349
actually let's go ahead and just double

1301
01:09:23,850 --> 01:09:31,710
check to see just vaguely so you know

1302
01:09:28,350 --> 01:09:32,940
we're somewhere around the 52 well okay

1303
01:09:31,710 --> 01:09:35,338
so depending on your depending where

1304
01:09:32,939 --> 01:09:37,710
that guy hops we kind of need him to

1305
01:09:35,338 --> 01:09:39,689
stop hopping I suppose let's let's go

1306
01:09:37,710 --> 01:09:42,779
ahead and make it more stable test case

1307
01:09:39,689 --> 01:09:47,568
here so I'm going to go into world mode

1308
01:09:42,779 --> 01:09:47,569
and when we do the the snake

1309
01:09:57,770 --> 01:10:06,280
so here is us running and it's around 26

1310
01:10:02,989 --> 01:10:09,500
milliseconds I believe it's stable yeah

1311
01:10:06,279 --> 01:10:11,029
so I'm just curious to know if this has

1312
01:10:09,500 --> 01:10:32,720
any effect on it at all so if I was to

1313
01:10:11,029 --> 01:10:40,699
do absolute value absolute value I about

1314
01:10:32,720 --> 01:10:41,690
the same about the same so I'm gonna

1315
01:10:40,699 --> 01:10:44,119
leave it like that it's a little bit

1316
01:10:41,689 --> 01:10:46,719
more concise didn't it didn't really

1317
01:10:44,119 --> 01:10:49,039
introduce a dilatory effects there so

1318
01:10:46,720 --> 01:10:51,340
yeah if we take a look at what's going

1319
01:10:49,039 --> 01:10:51,340
on here

1320
01:10:52,039 --> 01:10:56,210
what we want to do is is again continue

1321
01:10:54,470 --> 01:10:59,390
to sort of collapse this stuff down into

1322
01:10:56,210 --> 01:11:01,609
something that's you know as as concise

1323
01:10:59,390 --> 01:11:04,880
as we can possibly make it so this

1324
01:11:01,609 --> 01:11:07,009
information here is all this information

1325
01:11:04,880 --> 01:11:09,319
could just have been stored directly and

1326
01:11:07,010 --> 01:11:10,789
one of the interesting parts about that

1327
01:11:09,319 --> 01:11:13,250
is if we take a look at the work we're

1328
01:11:10,789 --> 01:11:17,119
doing here min corner max corner are

1329
01:11:13,250 --> 01:11:19,430
only used for that value right so what

1330
01:11:17,119 --> 01:11:21,649
we could do is just store the boxes that

1331
01:11:19,430 --> 01:11:25,970
way and then we'd never have to do this

1332
01:11:21,649 --> 01:11:28,849
sort of fairly laborious access

1333
01:11:25,970 --> 01:11:32,390
information check here which is probably

1334
01:11:28,850 --> 01:11:33,950
pretty costly so if we go ahead and did

1335
01:11:32,390 --> 01:11:36,170
that let's just see how that would

1336
01:11:33,949 --> 01:11:38,389
affect things I'm gonna go into platform

1337
01:11:36,170 --> 01:11:45,770
and I'm gonna take that lighting box

1338
01:11:38,390 --> 01:11:50,210
thing and let's just say we've got a P

1339
01:11:45,770 --> 01:11:52,520
and a radius that's just how we're going

1340
01:11:50,210 --> 01:11:54,680
to store it from now on instead

1341
01:11:52,520 --> 01:11:57,560
so in here where we've got sort of the

1342
01:11:54,680 --> 01:11:59,840
span value where we picked out this 0.5

1343
01:11:57,560 --> 01:12:01,340
instead we're not gonna multiply by 0.5

1344
01:11:59,840 --> 01:12:07,610
we're just gonna pick the span out

1345
01:12:01,340 --> 01:12:10,369
directly from that box radius like so

1346
01:12:07,609 --> 01:12:13,009
and the P values is going to be the

1347
01:12:10,369 --> 01:12:13,880
p-value like so and then the min corner

1348
01:12:13,010 --> 01:12:18,220
and Max corner oops

1349
01:12:13,880 --> 01:12:18,220
are just they're just not gonna get used

1350
01:12:32,020 --> 01:12:46,400
right so all we have to do now is when

1351
01:12:43,520 --> 01:12:48,200
we actually produce these pieces of

1352
01:12:46,399 --> 01:12:52,250
information instead of doing min corner

1353
01:12:48,199 --> 01:12:54,800
Max corner we can just compute these

1354
01:12:52,250 --> 01:12:56,750
values which we do anyway right in here

1355
01:12:54,800 --> 01:12:58,070
and this is not the slow part of things

1356
01:12:56,750 --> 01:13:05,479
so really whatever we do here is fine

1357
01:12:58,069 --> 01:13:07,429
for the moment so all we have to do is

1358
01:13:05,479 --> 01:13:10,429
subtract the min corner in the max

1359
01:13:07,430 --> 01:13:13,550
corner to get the radius and to get the

1360
01:13:10,430 --> 01:13:18,170
p value which is the center value of of

1361
01:13:13,550 --> 01:13:21,230
them in general we just have to find the

1362
01:13:18,170 --> 01:13:23,600
midpoint right so that's the center of

1363
01:13:21,229 --> 01:13:27,469
the cube and the radius of the cube and

1364
01:13:23,600 --> 01:13:29,690
that's all there is to it so once we

1365
01:13:27,470 --> 01:13:33,740
have that now everyone who's doing the

1366
01:13:29,689 --> 01:13:35,029
the get box surface stuff right has to

1367
01:13:33,739 --> 01:13:36,849
switch over to doing it the other way

1368
01:13:35,029 --> 01:13:40,389
they have to pass the P and the radius

1369
01:13:36,850 --> 01:13:40,390
and that's fine

1370
01:13:49,399 --> 01:13:54,719
okay

1371
01:13:51,479 --> 01:14:01,408
but the getfox surface call has to be

1372
01:13:54,719 --> 01:14:08,158
fixed now that's the wrong place

1373
01:14:01,408 --> 01:14:09,598
to take the p-value and the radius so

1374
01:14:08,158 --> 01:14:12,210
now we can look and see like okay so

1375
01:14:09,599 --> 01:14:15,179
kickbox surface it doesn't really need

1376
01:14:12,210 --> 01:14:16,460
to do this part anymore because min

1377
01:14:15,179 --> 01:14:24,868
corner and Max corner aren't relevant

1378
01:14:16,460 --> 01:14:27,569
obviously right so oh you know what

1379
01:14:24,868 --> 01:14:30,238
that's not entirely true though so it

1380
01:14:27,569 --> 01:14:35,009
does still need to do that test I I was

1381
01:14:30,238 --> 01:14:37,558
a little bit aggressive there it does

1382
01:14:35,010 --> 01:14:41,159
still need to pick out the correct value

1383
01:14:37,559 --> 01:14:49,920
of that let me just go back and

1384
01:14:41,158 --> 01:14:52,679
double-check that just want to make sure

1385
01:14:49,920 --> 01:14:58,199
we know where P how P is being used in

1386
01:14:52,679 --> 01:15:00,599
that I think I may be wrong about that

1387
01:14:58,198 --> 01:15:04,348
yeah so the problem with that is that's

1388
01:15:00,599 --> 01:15:07,770
not entirely true for the span it is

1389
01:15:04,349 --> 01:15:09,869
true for the Box P the problem is we

1390
01:15:07,770 --> 01:15:12,780
still do need to do one piece of work

1391
01:15:09,868 --> 01:15:17,189
which is to move it to the place where

1392
01:15:12,779 --> 01:15:19,979
it was going to go right so for the p

1393
01:15:17,189 --> 01:15:22,710
value whichever axis index index were on

1394
01:15:19,979 --> 01:15:25,379
we still do have to do one piece of work

1395
01:15:22,710 --> 01:15:31,578
which is whichever element that were on

1396
01:15:25,380 --> 01:15:36,690
we have to add that piece of the span in

1397
01:15:31,578 --> 01:15:39,259
right so if we're going to positive

1398
01:15:36,689 --> 01:15:43,049
x-axis we have to we have to move P to

1399
01:15:39,260 --> 01:15:45,389
wherever the face of the cube is that

1400
01:15:43,050 --> 01:15:50,420
we're actually working on it's all I was

1401
01:15:45,389 --> 01:15:55,949
trying to say there right okay

1402
01:15:50,420 --> 01:15:59,829
so yeah so this routine here now we can

1403
01:15:55,948 --> 01:16:01,119
sort of make all of this

1404
01:15:59,829 --> 01:16:02,979
with that as well with with P and the

1405
01:16:01,119 --> 01:16:04,659
radius so if we take a look at what

1406
01:16:02,979 --> 01:16:06,489
we're actually computing here the span

1407
01:16:04,659 --> 01:16:08,680
we don't really care about anymore the

1408
01:16:06,489 --> 01:16:13,539
width and height of the cube we don't

1409
01:16:08,680 --> 01:16:16,030
care about anymore either right because

1410
01:16:13,539 --> 01:16:21,369
all we really need to do is take the

1411
01:16:16,029 --> 01:16:26,889
radius here and this produces the half

1412
01:16:21,369 --> 01:16:35,699
width and the half height directly same

1413
01:16:26,890 --> 01:16:41,860
again is true of P so the p value just

1414
01:16:35,699 --> 01:16:43,929
directly gets added to P there so really

1415
01:16:41,859 --> 01:16:58,420
all we have to do is is exactly what I

1416
01:16:43,930 --> 01:17:00,100
was suggesting we do here right and we

1417
01:16:58,420 --> 01:17:01,750
can make we can change that routine to

1418
01:17:00,100 --> 01:17:06,030
also working off of sine so it's a

1419
01:17:01,750 --> 01:17:08,380
little bit more efficient than it was so

1420
01:17:06,029 --> 01:17:09,699
yeah that was basically gonna say we're

1421
01:17:08,380 --> 01:17:10,960
bringing it up with a black screen here

1422
01:17:09,699 --> 01:17:13,269
cuz I made too many changes at once

1423
01:17:10,960 --> 01:17:14,590
which again I specifically said not to

1424
01:17:13,270 --> 01:17:16,870
do but then of course I went ahead and

1425
01:17:14,590 --> 01:17:18,940
did it so we have to kind of go through

1426
01:17:16,869 --> 01:17:21,609
now and validate all the stuff but you

1427
01:17:18,939 --> 01:17:25,689
know that's the price you pay for doing

1428
01:17:21,609 --> 01:17:28,839
that all right so if it's positive the p

1429
01:17:25,689 --> 01:17:32,589
value again is just going to be equal to

1430
01:17:28,840 --> 01:17:35,050
whatever whatever the center of the box

1431
01:17:32,590 --> 01:17:38,110
actually was and we're then we're going

1432
01:17:35,050 --> 01:17:40,869
to either move to the you know we're

1433
01:17:38,109 --> 01:17:42,460
gonna move forward along the normal in

1434
01:17:40,869 --> 01:17:43,869
that direction right the other way we

1435
01:17:42,460 --> 01:17:45,489
could state this actually and maybe this

1436
01:17:43,869 --> 01:17:47,199
is cleaner because in this routine we

1437
01:17:45,489 --> 01:17:49,239
don't really care well you know ellis

1438
01:17:47,199 --> 01:17:51,130
leave it this way so we're just gonna

1439
01:17:49,239 --> 01:17:55,389
you know in there we're just saying okay

1440
01:17:51,130 --> 01:17:57,900
the radius elements we're going to go

1441
01:17:55,390 --> 01:17:57,900
ahead and

1442
01:18:01,809 --> 01:18:07,550
how should I say this we are going to

1443
01:18:05,538 --> 01:18:09,859
move from the center of the Box to the

1444
01:18:07,550 --> 01:18:12,559
centre of the face by adding however far

1445
01:18:09,859 --> 01:18:13,938
we have to go radius wise in that

1446
01:18:12,559 --> 01:18:18,800
direction I also want to hold on a

1447
01:18:13,939 --> 01:18:33,309
second let me want to make sure this is

1448
01:18:18,800 --> 01:18:39,739
being done yeah yeah so this is also a

1449
01:18:33,309 --> 01:18:42,590
0.5 so I messed that up the radius of

1450
01:18:39,738 --> 01:18:43,788
the box is only half of the dimension of

1451
01:18:42,590 --> 01:18:45,019
the box right obviously that's what

1452
01:18:43,788 --> 01:18:49,099
makes it a radius and not a diameter

1453
01:18:45,019 --> 01:18:50,559
effectually of the box so sorry that was

1454
01:18:49,099 --> 01:18:55,069
a that was a mistake

1455
01:18:50,559 --> 01:18:57,889
so anyway this should again all be fine

1456
01:18:55,069 --> 01:18:59,509
so once we have our radius value passed

1457
01:18:57,889 --> 01:19:01,429
into us directly we should be able to

1458
01:18:59,510 --> 01:19:03,110
take the half width and half light very

1459
01:19:01,429 --> 01:19:04,729
trivially like all we have to do is just

1460
01:19:03,109 --> 01:19:07,279
say okay let's get a product them with

1461
01:19:04,729 --> 01:19:08,599
the x-axis and off we go right and that

1462
01:19:07,279 --> 01:19:11,988
information is now available to anyone

1463
01:19:08,599 --> 01:19:14,090
who wants to use it I think so I feel

1464
01:19:11,988 --> 01:19:21,379
like that's roughly correct and then

1465
01:19:14,090 --> 01:19:25,340
going back to the raycast just to make

1466
01:19:21,380 --> 01:19:26,929
sure and then we'll go to plug this in

1467
01:19:25,340 --> 01:19:28,248
here again all we're doing is saying

1468
01:19:26,929 --> 01:19:32,569
well whichever direction we're going

1469
01:19:28,248 --> 01:19:34,880
we're capias sine value the span is just

1470
01:19:32,569 --> 01:19:37,130
gonna be the box radius right and so

1471
01:19:34,880 --> 01:19:40,399
let's go ahead and change that to to be

1472
01:19:37,130 --> 01:19:42,019
radius and so we're gonna say is all

1473
01:19:40,399 --> 01:19:43,519
right we need to go in whatever

1474
01:19:42,019 --> 01:19:46,610
direction if we're negative normal we

1475
01:19:43,519 --> 01:19:48,369
need to go down or up if we're positive

1476
01:19:46,609 --> 01:19:51,558
normal right

1477
01:19:48,368 --> 01:19:52,938
so whatever axis whichever positive or

1478
01:19:51,559 --> 01:19:54,769
negative or testing we need to move on

1479
01:19:52,939 --> 01:19:56,929
that axis we need to move from the

1480
01:19:54,769 --> 01:20:00,590
center of the box up to the face or down

1481
01:19:56,929 --> 01:20:02,389
to the face then all of this stuff is

1482
01:20:00,590 --> 01:20:05,119
the same as it was this didn't change at

1483
01:20:02,389 --> 01:20:07,248
all and then when we pick out values of

1484
01:20:05,118 --> 01:20:10,719
the span here this is going to give us

1485
01:20:07,248 --> 01:20:10,719
the half width right

1486
01:20:30,470 --> 01:20:36,260
and one of the things you can see here

1487
01:20:32,090 --> 01:20:38,000
is the X check and the Y check here I

1488
01:20:36,260 --> 01:20:41,000
don't know why we're even still doing

1489
01:20:38,000 --> 01:20:42,680
absolute values on these because we're

1490
01:20:41,000 --> 01:20:45,109
doing an absolute value of them down

1491
01:20:42,680 --> 01:20:50,539
here already so I guess what we could

1492
01:20:45,109 --> 01:20:52,809
say here is first of all we know that

1493
01:20:50,539 --> 01:20:57,170
the radius itself is always going to be

1494
01:20:52,810 --> 01:20:58,970
positive in that way so this really

1495
01:20:57,170 --> 01:21:09,500
shouldn't have to be an absolute value

1496
01:20:58,970 --> 01:21:10,699
at all right and this shouldn't have to

1497
01:21:09,500 --> 01:21:13,579
be an absolute value because we're doing

1498
01:21:10,699 --> 01:21:18,079
the absolute value down there so why we

1499
01:21:13,579 --> 01:21:19,670
have that I don't know just me failing

1500
01:21:18,079 --> 01:21:23,059
to notice it at the time when I typed it

1501
01:21:19,670 --> 01:21:25,039
in so yeah really all this has to do is

1502
01:21:23,060 --> 01:21:27,370
pick out one of these two things right

1503
01:21:25,039 --> 01:21:27,369
here

1504
01:21:28,270 --> 01:21:34,910
same with here right and these are just

1505
01:21:32,149 --> 01:21:37,639
picking out those those radius and r AP

1506
01:21:34,909 --> 01:21:38,989
values and then we do the absolute value

1507
01:21:37,640 --> 01:21:40,130
on the check because we don't really

1508
01:21:38,989 --> 01:21:41,029
know what that is but the half that the

1509
01:21:40,130 --> 01:21:44,359
half-light they should always be

1510
01:21:41,029 --> 01:21:45,829
positive anyway so I think that's all of

1511
01:21:44,359 --> 01:21:49,519
that information that even needs to

1512
01:21:45,829 --> 01:21:51,699
happen to really happen here that makes

1513
01:21:49,520 --> 01:21:51,700
sense

1514
01:21:53,849 --> 01:21:58,270
all right so now we got to figure out

1515
01:21:56,020 --> 01:22:01,300
why this is going wrong right like why

1516
01:21:58,270 --> 01:22:04,300
are we getting a black screen and I'm

1517
01:22:01,300 --> 01:22:07,480
not really 100% sure how we ended up

1518
01:22:04,300 --> 01:22:08,440
with that so something busted is

1519
01:22:07,479 --> 01:22:10,928
happening here

1520
01:22:08,439 --> 01:22:13,750
we just don't know what it is so now we

1521
01:22:10,929 --> 01:22:15,460
have to figure out yeah is that is it

1522
01:22:13,750 --> 01:22:19,538
something in here that we did in

1523
01:22:15,460 --> 01:22:21,819
switching to it my guess is you know

1524
01:22:19,538 --> 01:22:23,859
probably not I don't really know but

1525
01:22:21,819 --> 01:22:26,019
probably not because we should just be

1526
01:22:23,859 --> 01:22:27,308
seeing some we would be seeing erroneous

1527
01:22:26,020 --> 01:22:30,099
lighting but we'd be seeing lighting

1528
01:22:27,309 --> 01:22:36,250
just the same so my suspicion is I

1529
01:22:30,099 --> 01:22:43,449
messed up the box get box surface call

1530
01:22:36,250 --> 01:22:47,260
right so in here when I change to be

1531
01:22:43,448 --> 01:22:48,969
using the p-value instead and the radius

1532
01:22:47,260 --> 01:22:51,219
instead of using them in quarter in the

1533
01:22:48,969 --> 01:22:55,719
max corner my suspicion is that I messed

1534
01:22:51,219 --> 01:22:58,929
that up not not that I messed up the

1535
01:22:55,719 --> 01:23:01,559
raycast routine but again don't really

1536
01:22:58,929 --> 01:23:06,460
know that that's true but that's just my

1537
01:23:01,559 --> 01:23:11,619
my rough guess of probably who is who

1538
01:23:06,460 --> 01:23:14,710
got screwed up here right okay so let's

1539
01:23:11,618 --> 01:23:16,899
go ahead and meant to do that rebuild on

1540
01:23:14,710 --> 01:23:21,429
debug so let's go ahead and rebuild

1541
01:23:16,899 --> 01:23:24,719
debug here and let me run the program

1542
01:23:21,429 --> 01:23:24,719
make sure it's all good

1543
01:23:32,238 --> 01:23:36,538
and let's just validate our gift get box

1544
01:23:34,828 --> 01:23:37,828
surface call revalidate our get box

1545
01:23:36,538 --> 01:23:41,728
service calls so I'm gonna go ahead and

1546
01:23:37,828 --> 01:23:44,759
start inspecting this so what we get

1547
01:23:41,729 --> 01:23:48,958
here is we've got a p-value inner groups

1548
01:23:44,760 --> 01:23:54,659
p-value and a radius value and then we

1549
01:23:48,958 --> 01:24:00,260
need to see what axis index and the

1550
01:23:54,658 --> 01:24:00,259
positive value are and the result so

1551
01:24:00,618 --> 01:24:10,348
taking a look at these

1552
01:24:03,529 --> 01:24:16,438
the p-value that comes in you know

1553
01:24:10,349 --> 01:24:24,149
doesn't doesn't get changed it should

1554
01:24:16,439 --> 01:24:29,309
it's supposed to make correctly if I'm

1555
01:24:24,149 --> 01:24:32,659
wrong but those are exactly the same so

1556
01:24:29,309 --> 01:24:32,659
the axis index here is zero

1557
01:24:41,380 --> 01:24:47,140
so this this operation should have taken

1558
01:24:44,390 --> 01:24:47,140
place right

1559
01:24:55,389 --> 01:25:03,730
this this should have been added and it

1560
01:25:00,829 --> 01:25:03,729
wasn't

1561
01:25:15,180 --> 01:25:19,570
all right so I I don't pretend to know

1562
01:25:17,829 --> 01:25:26,979
why that happens so let's take a look at

1563
01:25:19,569 --> 01:25:28,779
that in in detail oh no no okay right

1564
01:25:26,979 --> 01:25:31,569
this is initially past it no no so that

1565
01:25:28,779 --> 01:25:34,599
was correct I'm sorry yeah I was looking

1566
01:25:31,569 --> 01:25:37,299
at the wrong thing there so here's the

1567
01:25:34,600 --> 01:25:40,539
radius value for starters the radius is

1568
01:25:37,300 --> 01:25:43,420
negative so that's just wrong so I'm

1569
01:25:40,539 --> 01:25:44,710
gonna take a step out and see I must

1570
01:25:43,420 --> 01:25:48,970
have done the subtraction incorrectly

1571
01:25:44,710 --> 01:25:52,539
there in the thing that passes in the

1572
01:25:48,970 --> 01:25:54,670
Box surface so that's a obvious mistake

1573
01:25:52,539 --> 01:25:57,069
and would obviously account for the

1574
01:25:54,670 --> 01:25:59,730
black screen so that you know is needs

1575
01:25:57,069 --> 01:25:59,729
to get fixed immediately

1576
01:26:01,979 --> 01:26:13,299
oops okay so in here where we have our

1577
01:26:10,750 --> 01:26:14,979
subtraction yeah this is supposed to be

1578
01:26:13,300 --> 01:26:17,460
Mac's corner let's make this a little

1579
01:26:14,979 --> 01:26:25,089
more consistent so we'll do max corner

1580
01:26:17,460 --> 01:26:31,329
min corner yeah okay so let's try that

1581
01:26:25,090 --> 01:26:36,250
again our radius is now positive that's

1582
01:26:31,329 --> 01:26:41,800
exactly what we want half width half

1583
01:26:36,250 --> 01:26:43,989
height all right normal it's negative

1584
01:26:41,800 --> 01:26:46,050
one okay much better all right so that's

1585
01:26:43,989 --> 01:26:50,889
looking better now let's see what our

1586
01:26:46,050 --> 01:26:52,119
visuals look like here okay so we're

1587
01:26:50,890 --> 01:26:53,530
back so it looks like the old it was

1588
01:26:52,119 --> 01:26:56,590
just that I had accidentally set the

1589
01:26:53,529 --> 01:26:58,960
radius is to negative so that was a bit

1590
01:26:56,590 --> 01:27:01,720
of a mistake there let's go ahead and

1591
01:26:58,960 --> 01:27:02,020
change this back - OH - and see where

1592
01:27:01,720 --> 01:27:06,400
we're at

1593
01:27:02,020 --> 01:27:12,480
okay all right so again continuing to

1594
01:27:06,399 --> 01:27:16,299
get better pretty nice and smooth there

1595
01:27:12,479 --> 01:27:20,259
we can go back in now and add our little

1596
01:27:16,300 --> 01:27:24,750
our little friend just to increase the

1597
01:27:20,260 --> 01:27:30,270
number of light things bouncing around

1598
01:27:24,750 --> 01:27:34,079
become and so I think we're now actually

1599
01:27:30,270 --> 01:27:35,970
also getting in the range of what we

1600
01:27:34,079 --> 01:27:38,609
were originally running at I think we're

1601
01:27:35,970 --> 01:27:40,320
fairly close I don't remember exactly

1602
01:27:38,609 --> 01:27:42,389
where we are cuz again I'm not really in

1603
01:27:40,319 --> 01:27:44,219
an optimization mode right now I'm kind

1604
01:27:42,390 --> 01:27:48,230
of more just in a like let's make this

1605
01:27:44,220 --> 01:27:48,230
algorithmically relatively correct first

1606
01:27:48,260 --> 01:27:50,820
because we need to use boxes one way or

1607
01:27:50,460 --> 01:27:56,130
the other

1608
01:27:50,819 --> 01:27:59,130
uh so again pretty good right not not

1609
01:27:56,130 --> 01:28:01,319
too shabby so far so now again let's

1610
01:27:59,130 --> 01:28:03,359
just take a look at that rate cast again

1611
01:28:01,319 --> 01:28:09,389
and see where we're at in terms of

1612
01:28:03,359 --> 01:28:18,929
simplification of it so yeah looking

1613
01:28:09,390 --> 01:28:20,820
here at looking here at what we've got I

1614
01:28:18,930 --> 01:28:26,640
mean this is you know pretty drastically

1615
01:28:20,819 --> 01:28:30,659
simplified from where it was box surface

1616
01:28:26,640 --> 01:28:33,930
index is kind of something that's

1617
01:28:30,659 --> 01:28:37,399
annoying to have to compute here because

1618
01:28:33,930 --> 01:28:44,760
it's really only used for this readout

1619
01:28:37,399 --> 01:28:46,289
but you know yeah hard to say I'm gonna

1620
01:28:44,760 --> 01:28:47,699
go ahead and turn off this time function

1621
01:28:46,289 --> 01:28:49,170
by the way cuz that's actually taking

1622
01:28:47,699 --> 01:28:52,649
some time in there I want to see how

1623
01:28:49,170 --> 01:28:59,760
we're doing without it quite a bit

1624
01:28:52,649 --> 01:29:01,259
better actually right so I think we're

1625
01:28:59,760 --> 01:29:04,350
back down to roughly where we were

1626
01:29:01,260 --> 01:29:05,520
before right I think we're getting right

1627
01:29:04,350 --> 01:29:07,440
we're in we're in better shape than

1628
01:29:05,520 --> 01:29:10,430
probably even better shape than we were

1629
01:29:07,439 --> 01:29:10,429
in before potentially

1630
01:29:13,779 --> 01:29:18,539
so yeah you know this is looking pretty

1631
01:29:17,050 --> 01:29:23,889
good

1632
01:29:18,539 --> 01:29:26,170
it's possible I don't actually know but

1633
01:29:23,889 --> 01:29:27,550
it's possible that that the fact that

1634
01:29:26,170 --> 01:29:31,109
this is still in a four loop and this

1635
01:29:27,550 --> 01:29:34,449
can't be optimized is pretty bad right

1636
01:29:31,109 --> 01:29:36,969
so I am tempted as well to sort of macro

1637
01:29:34,448 --> 01:29:42,399
eyes this a little bit and just actually

1638
01:29:36,969 --> 01:29:45,279
do this check unrolls does that make

1639
01:29:42,399 --> 01:29:47,979
sense so you know I don't necessarily

1640
01:29:45,279 --> 01:29:50,019
think that's a great idea but I am

1641
01:29:47,979 --> 01:29:51,729
curious about it so I'm just because we

1642
01:29:50,020 --> 01:29:55,889
only have five minutes left I'm just

1643
01:29:51,729 --> 01:29:55,888
gonna do that because I just want to see

1644
01:29:57,840 --> 01:30:12,219
so here's what would happen if we were

1645
01:30:00,250 --> 01:30:18,368
to unroll it so if it were the x-axis

1646
01:30:12,219 --> 01:30:26,489
then you know it's just X and we pretty

1647
01:30:18,368 --> 01:30:29,380
much know exactly what those values are

1648
01:30:26,488 --> 01:30:35,678
makes sense

1649
01:30:29,380 --> 01:30:45,010
e axis index is just always X and all of

1650
01:30:35,679 --> 01:30:47,260
these like so and and yeah all of this

1651
01:30:45,010 --> 01:30:56,949
stuff we know that the access index is

1652
01:30:47,260 --> 01:31:01,829
equal to zero so it's just rapey Y and

1653
01:30:56,948 --> 01:31:10,738
radius Y and then the Exynos equals two

1654
01:31:01,829 --> 01:31:14,469
is not true so we know we do those two

1655
01:31:10,738 --> 01:31:21,819
and that's pretty much it right that's

1656
01:31:14,469 --> 01:31:37,029
just all we need to do there for the y

1657
01:31:21,819 --> 01:31:40,420
axis do that we know that this is just

1658
01:31:37,029 --> 01:31:45,158
going to be two because that's what one

1659
01:31:40,420 --> 01:31:51,760
shifted up by one is and then again the

1660
01:31:45,158 --> 01:31:57,279
rest of this stuff just becomes y ax e Y

1661
01:31:51,760 --> 01:32:07,150
access is we know the access is not

1662
01:31:57,279 --> 01:32:10,210
equal to zero so it's not and we know

1663
01:32:07,149 --> 01:32:14,079
that it's also not equal to two so it's

1664
01:32:10,210 --> 01:32:21,939
that and off we go

1665
01:32:14,079 --> 01:32:24,908
and finally the z axis again what we're

1666
01:32:21,939 --> 01:32:27,488
going to be shifting up here is two so

1667
01:32:24,908 --> 01:32:35,589
that's gonna become equal to four

1668
01:32:27,488 --> 01:32:37,089
right I'm not mistaken I think because

1669
01:32:35,590 --> 01:32:40,060
Eagle would be four or five depending on

1670
01:32:37,090 --> 01:32:44,110
whether positive is zero so I think

1671
01:32:40,060 --> 01:32:47,699
that's right and again just a few places

1672
01:32:44,109 --> 01:32:47,698
where we actually access that

1673
01:32:48,810 --> 01:33:03,190
information goes away it's not zero it's

1674
01:32:58,060 --> 01:33:05,489
not snowflake it is access to so this

1675
01:33:03,189 --> 01:33:05,488
applies

1676
01:33:07,550 --> 01:33:15,880
so let's just see how that goes I think

1677
01:33:11,449 --> 01:33:15,880
we did it right and we'll see

1678
01:33:22,350 --> 01:33:28,770
so there's no question that that helped

1679
01:33:24,000 --> 01:33:30,270
us I think just not a whole lot so it's

1680
01:33:28,770 --> 01:33:37,770
not clear that we really would want to

1681
01:33:30,270 --> 01:33:41,490
do that necessarily off the bat but you

1682
01:33:37,770 --> 01:33:43,710
know you can kind of see how unrolling

1683
01:33:41,489 --> 01:33:50,880
that loop can simplify things right can

1684
01:33:43,710 --> 01:33:53,850
definitely simplify things and you know

1685
01:33:50,880 --> 01:33:58,140
we can start to look at this as being

1686
01:33:53,850 --> 01:34:02,250
even more simplified if we start to pull

1687
01:33:58,140 --> 01:34:03,600
out you know terms maybe we can look at

1688
01:34:02,250 --> 01:34:07,109
collapsing some of this stuff as well

1689
01:34:03,600 --> 01:34:11,460
you know who knows let's let's we could

1690
01:34:07,109 --> 01:34:23,549
just take a little closer look here at

1691
01:34:11,460 --> 01:34:30,710
that part so so here's another example

1692
01:34:23,550 --> 01:34:33,210
so ray source n doesn't depend on

1693
01:34:30,710 --> 01:34:36,029
anything but the positive or negative

1694
01:34:33,210 --> 01:34:38,810
sign here so that's interesting well I

1695
01:34:36,029 --> 01:34:38,809
guess that doesn't really matter

1696
01:34:49,310 --> 01:34:54,120
yeah there's there's more there

1697
01:34:52,470 --> 01:34:56,010
significantly more we can do here I

1698
01:34:54,119 --> 01:34:58,640
guess it's all I can say we can keep

1699
01:34:56,010 --> 01:34:58,640
looking at this

1700
01:35:10,810 --> 01:35:16,520
but yeah there's definitely more we can

1701
01:35:13,130 --> 01:35:18,170
do here so also if we take a look at

1702
01:35:16,520 --> 01:35:22,670
what happens here so the X check

1703
01:35:18,170 --> 01:35:37,909
becoming Ray P X radius X that is

1704
01:35:22,670 --> 01:35:42,100
actually common for these two so that

1705
01:35:37,909 --> 01:35:42,099
can be switched here and similarly these

1706
01:35:50,920 --> 01:36:00,529
can be switched here that was not I went

1707
01:35:59,960 --> 01:36:05,359
too far

1708
01:36:00,529 --> 01:36:13,149
it's not what I meant to do I meant to

1709
01:36:05,359 --> 01:36:13,149
switch the other half what I meant was

1710
01:36:13,479 --> 01:36:34,879
these right so if I go ahead and pull

1711
01:36:24,020 --> 01:36:35,930
out these there's really not much point

1712
01:36:34,880 --> 01:36:40,609
in what I'm doing right now I just

1713
01:36:35,930 --> 01:36:42,920
wanted to kind of mentally have a feel

1714
01:36:40,609 --> 01:36:44,449
for what is actually happening in the

1715
01:36:42,920 --> 01:36:47,869
routine as it flows down so that this

1716
01:36:44,449 --> 01:36:49,340
will not really improve the speed but

1717
01:36:47,869 --> 01:36:52,069
it's just something to kind of be aware

1718
01:36:49,340 --> 01:36:54,980
of so you can see it starts at Y Z it

1719
01:36:52,069 --> 01:36:57,079
doesn't really change here so the X this

1720
01:36:54,979 --> 01:36:59,029
changes the other one doesn't change and

1721
01:36:57,079 --> 01:37:01,489
then similarly the same is true here so

1722
01:36:59,029 --> 01:37:03,109
only the half height changes here right

1723
01:37:01,489 --> 01:37:09,170
so I'm just kind of looking at the way

1724
01:37:03,109 --> 01:37:11,920
that flows through the code yeah it's

1725
01:37:09,170 --> 01:37:11,920
just worth noting

1726
01:37:14,039 --> 01:37:20,250
oh you know what and this is not

1727
01:37:17,100 --> 01:37:28,770
actually true this does have to be

1728
01:37:20,250 --> 01:37:32,390
redone every time so I think that's

1729
01:37:28,770 --> 01:37:32,390
still substantively the exact same thing

1730
01:37:35,329 --> 01:37:41,399
and so again looking at this I just

1731
01:37:39,750 --> 01:37:42,779
think there's still a fair bit of slop

1732
01:37:41,399 --> 01:37:45,239
in here that we could that we could

1733
01:37:42,779 --> 01:37:47,579
optimize away we have to think it

1734
01:37:45,239 --> 01:37:50,099
through a little bit more but I'm pretty

1735
01:37:47,579 --> 01:37:51,329
sure that we're not done getting rid of

1736
01:37:50,100 --> 01:37:53,579
a lot of this information one thing

1737
01:37:51,329 --> 01:37:58,199
that's interesting here is resource N

1738
01:37:53,579 --> 01:38:03,059
and D if you take a look at where that's

1739
01:37:58,199 --> 01:38:12,659
being used so resource n is only used

1740
01:38:03,060 --> 01:38:20,190
once and D is only used once as well I

1741
01:38:12,659 --> 01:38:22,739
want to say so unless I'm mistaken this

1742
01:38:20,189 --> 01:38:25,969
multiplication by the sign is just

1743
01:38:22,739 --> 01:38:29,369
irrelevant right

1744
01:38:25,970 --> 01:38:32,730
like it just isn't necessary I don't

1745
01:38:29,369 --> 01:38:34,260
think because we're multiplying two

1746
01:38:32,729 --> 01:38:39,809
things by the sign but those things just

1747
01:38:34,260 --> 01:38:44,060
get divided so I think you can even get

1748
01:38:39,810 --> 01:38:44,060
rid of that multiplication entirely

1749
01:38:44,210 --> 01:38:54,989
since no one cares what the sign of

1750
01:38:47,880 --> 01:39:00,989
those two things are so again still kind

1751
01:38:54,989 --> 01:39:02,670
of just an arbitrary just an you know an

1752
01:39:00,989 --> 01:39:04,050
arbitrary sort of aspect of the math

1753
01:39:02,670 --> 01:39:06,890
that just kind of falls out we just

1754
01:39:04,050 --> 01:39:06,890
really don't need to do it

1755
01:39:20,420 --> 01:39:25,890
so yeah keeping going along that line of

1756
01:39:24,449 --> 01:39:30,769
reasoning what you can see here is now

1757
01:39:25,890 --> 01:39:33,960
sign is only used in one place right so

1758
01:39:30,770 --> 01:39:35,760
in a sense all we really the only reason

1759
01:39:33,960 --> 01:39:37,500
we even need to know whether we're the

1760
01:39:35,760 --> 01:39:43,260
positive or they are the negative

1761
01:39:37,500 --> 01:39:48,659
anymore is is strictly because we need

1762
01:39:43,260 --> 01:39:56,060
to have an opinion about how to displace

1763
01:39:48,659 --> 01:39:56,059
the point so that's really it

1764
01:40:12,420 --> 01:40:15,779
it'd be nice if we could get rid of that

1765
01:40:14,340 --> 01:40:17,550
because that's the only reason we need

1766
01:40:15,779 --> 01:40:21,809
to compute that but I think we have to

1767
01:40:17,550 --> 01:40:24,140
unfortunately so anyway that's just kind

1768
01:40:21,810 --> 01:40:24,140
of nice

1769
01:40:31,699 --> 01:40:40,189
and this is starting to look relatively

1770
01:40:34,439 --> 01:40:40,189
respectable you know within reason

1771
01:41:09,248 --> 01:41:14,630
all right I'm gonna go ahead and go to

1772
01:41:11,118 --> 01:41:16,819
Q&amp;A but what I can also do now is I can

1773
01:41:14,630 --> 01:41:18,409
also switch back here to this version of

1774
01:41:16,819 --> 01:41:21,380
the routine and make that same

1775
01:41:18,408 --> 01:41:27,049
optimization because that's true

1776
01:41:21,380 --> 01:41:28,880
regardless of whether it's unrolled so

1777
01:41:27,050 --> 01:41:31,038
for example in here where I do the sign

1778
01:41:28,880 --> 01:41:33,279
multiplication that's just not necessary

1779
01:41:31,038 --> 01:41:33,279
anymore

1780
01:41:33,760 --> 01:41:40,670
right because those that piece of

1781
01:41:36,649 --> 01:41:43,879
information is is never used D and

1782
01:41:40,670 --> 01:41:45,529
racehorses n are only ever used in that

1783
01:41:43,880 --> 01:41:50,210
context that's that's the only place

1784
01:41:45,529 --> 01:41:51,498
they're actually used so you can even

1785
01:41:50,210 --> 01:41:56,408
you could even just get rid of them

1786
01:41:51,498 --> 01:42:01,429
right it's just that oops

1787
01:41:56,408 --> 01:42:04,998
that and no one ever needs to do that

1788
01:42:01,429 --> 01:42:06,739
particular operation of the sign so

1789
01:42:04,998 --> 01:42:08,029
that's a pretty meaningful speed saving

1790
01:42:06,738 --> 01:42:09,948
is even just there because it just

1791
01:42:08,029 --> 01:42:13,300
eliminates multiplies that we're

1792
01:42:09,948 --> 01:42:13,299
completely superfluous and unnecessary

1793
01:42:17,828 --> 01:42:21,130
let's see

1794
01:42:22,479 --> 01:42:30,299
that did not work there it goes

1795
01:43:31,970 --> 01:43:38,720
gee Princip is the letting done after

1796
01:43:34,159 --> 01:43:44,269
this after what the lighting is not even

1797
01:43:38,720 --> 01:43:48,590
close to done we've got several more

1798
01:43:44,270 --> 01:43:50,090
things we have to do to it you may now

1799
01:43:48,590 --> 01:44:04,119
start the episode guide entries from new

1800
01:43:50,090 --> 01:44:04,119
to old oh really oh wow check that out

1801
01:44:04,380 --> 01:44:11,300
that's pretty sweet that's cool my bow

1802
01:44:11,510 --> 01:44:18,180
stuck panda which headers do you include

1803
01:44:13,920 --> 01:44:20,569
for working with OpenGL we included GL

1804
01:44:18,180 --> 01:44:20,570
dot H

1805
01:44:30,969 --> 01:44:38,979
how long until you'll move all this to

1806
01:44:33,130 --> 01:44:40,809
the GPU I don't know I also don't know

1807
01:44:38,979 --> 01:44:44,260
for sure that we will so one of the

1808
01:44:40,809 --> 01:44:47,170
things is once we do it Multi res if we

1809
01:44:44,260 --> 01:44:50,050
wanted to we could also just do it on

1810
01:44:47,170 --> 01:44:50,559
the CPU multi-threaded and probably be

1811
01:44:50,050 --> 01:44:55,420
fine

1812
01:44:50,559 --> 01:44:57,579
so it's it's gonna be an interesting

1813
01:44:55,420 --> 01:45:00,729
call when we're done with it we'll have

1814
01:44:57,578 --> 01:45:02,828
to see just how likely we think it is to

1815
01:45:00,729 --> 01:45:11,670
be able to run efficiently on the GPU

1816
01:45:02,828 --> 01:45:13,719
versus CPU so it's hard to say right

1817
01:45:11,670 --> 01:45:17,699
because it would get four times faster

1818
01:45:13,719 --> 01:45:21,340
than it is right now if we ran it

1819
01:45:17,698 --> 01:45:21,908
multi-threaded probably well that's not

1820
01:45:21,340 --> 01:45:24,069
really true

1821
01:45:21,908 --> 01:45:25,478
but let's for this way if we simply

1822
01:45:24,069 --> 01:45:26,948
optimize it in multi-threaded it would

1823
01:45:25,479 --> 01:45:32,170
be massively faster than it is right now

1824
01:45:26,948 --> 01:45:35,259
probably and so you know we could be

1825
01:45:32,170 --> 01:45:38,019
looking at at a pretty dramatic speed-up

1826
01:45:35,260 --> 01:45:41,110
right from where it is right now on CPU

1827
01:45:38,019 --> 01:45:42,639
and then plus with multi res it would

1828
01:45:41,109 --> 01:45:52,359
scale really well and so on so it's

1829
01:45:42,639 --> 01:45:54,969
possible possible that we could prefer

1830
01:45:52,359 --> 01:45:56,710
doing it on the CPU because the CPU just

1831
01:45:54,969 --> 01:45:59,248
faster at random access kinds of things

1832
01:45:56,710 --> 01:45:59,248
like rate tracing

1833
01:46:00,210 --> 01:46:08,939
if traversal is a big deal but

1834
01:46:06,180 --> 01:46:13,950
and might also not be I don't know so

1835
01:46:08,939 --> 01:46:16,250
who knows why did inlining get box to

1836
01:46:13,949 --> 01:46:18,149
raycast result in such an improvement

1837
01:46:16,250 --> 01:46:22,170
without looking at the generated

1838
01:46:18,149 --> 01:46:28,159
assembly we don't know exactly why but

1839
01:46:22,170 --> 01:46:35,239
the general case is because the compiler

1840
01:46:28,159 --> 01:46:37,859
doesn't have that much logic in it right

1841
01:46:35,239 --> 01:46:38,449
it's running in a fairly short amount of

1842
01:46:37,859 --> 01:46:41,219
time

1843
01:46:38,449 --> 01:46:42,960
it doesn't spend like you know it's a

1844
01:46:41,220 --> 01:46:43,880
what does it take four seconds to build

1845
01:46:42,960 --> 01:46:46,260
the game

1846
01:46:43,880 --> 01:46:48,779
it just doesn't spend a lot of time

1847
01:46:46,260 --> 01:46:50,880
thinking about how to optimize the code

1848
01:46:48,779 --> 01:46:52,229
I know we think of optimizing compilers

1849
01:46:50,880 --> 01:46:53,659
as being pretty advanced or something

1850
01:46:52,229 --> 01:46:55,919
but they're actually really primitive

1851
01:46:53,659 --> 01:46:59,069
especially ones that run in line like

1852
01:46:55,920 --> 01:47:01,440
this so it's got a bunch of heuristics

1853
01:46:59,069 --> 01:47:02,519
that it uses to determine how much of an

1854
01:47:01,439 --> 01:47:07,169
improvement is gonna get if it in line

1855
01:47:02,520 --> 01:47:08,430
something it depends on can power

1856
01:47:07,170 --> 01:47:09,659
switches like maybe we could set some

1857
01:47:08,430 --> 01:47:12,030
faster still it'd be more aggressive

1858
01:47:09,659 --> 01:47:15,659
with inlining than it would right that's

1859
01:47:12,029 --> 01:47:17,219
etc and so you know when you start

1860
01:47:15,659 --> 01:47:18,689
stacking things on top like oh you'd

1861
01:47:17,220 --> 01:47:20,280
have to inline this and then you'd have

1862
01:47:18,689 --> 01:47:21,629
to realize that once you inline it you

1863
01:47:20,279 --> 01:47:22,859
could get rid of this array access

1864
01:47:21,630 --> 01:47:24,210
because now you know what it is and you

1865
01:47:22,859 --> 01:47:27,569
could unroll the loop and bla bla bla

1866
01:47:24,210 --> 01:47:29,489
bla bla right the number of steps you're

1867
01:47:27,569 --> 01:47:33,659
requiring the compiler to take before it

1868
01:47:29,489 --> 01:47:35,069
gets to code that's fast just reduces

1869
01:47:33,659 --> 01:47:37,500
the chances that it figures out it

1870
01:47:35,069 --> 01:47:40,380
should do that thing you know

1871
01:47:37,500 --> 01:47:42,090
and so when you care about when you have

1872
01:47:40,380 --> 01:47:43,739
a particular like thing that actually

1873
01:47:42,090 --> 01:47:45,449
needs to be fast you typically have to

1874
01:47:43,739 --> 01:47:46,829
massage it pretty well to get it into a

1875
01:47:45,449 --> 01:47:48,269
place where the compiler really knows

1876
01:47:46,829 --> 01:47:54,479
exactly what it should do it doesn't

1877
01:47:48,270 --> 01:47:55,860
have to think too hard that's all well

1878
01:47:54,479 --> 01:47:57,359
the lighting boxes remain sort of

1879
01:47:55,859 --> 01:48:02,369
separate from the rest of the render

1880
01:47:57,359 --> 01:48:07,699
commands flow yes they will just be

1881
01:48:02,369 --> 01:48:07,699
pushed on in a separate stream

1882
01:48:09,909 --> 01:48:12,760
grapes cream by the way in the legend

1883
01:48:11,439 --> 01:48:15,219
let's rate the lighting is gonna look

1884
01:48:12,760 --> 01:48:17,170
insanely good once we actually start

1885
01:48:15,220 --> 01:48:19,539
using it right now we're not even right

1886
01:48:17,170 --> 01:48:21,220
like right now we're doing the worst

1887
01:48:19,539 --> 01:48:23,500
possible thing which is we're just

1888
01:48:21,220 --> 01:48:25,240
lighting individual services but we

1889
01:48:23,500 --> 01:48:27,670
actually have interpolation capability

1890
01:48:25,239 --> 01:48:31,090
in there now so once I actually peg

1891
01:48:27,670 --> 01:48:32,619
lights to light samples for

1892
01:48:31,090 --> 01:48:35,440
interpolation across the faces of

1893
01:48:32,619 --> 01:48:38,470
surfaces more it's gonna look a lot

1894
01:48:35,439 --> 01:48:40,750
better so it will it will improve

1895
01:48:38,470 --> 01:48:45,310
dramatically we'll get there

1896
01:48:40,750 --> 01:48:47,949
you'll see in my engine I have 3d models

1897
01:48:45,310 --> 01:48:50,020
that contain a buffer of un8 which is

1898
01:48:47,949 --> 01:48:52,630
cast into a struct which contains OpenGL

1899
01:48:50,020 --> 01:48:53,830
handles for the model my instinct is to

1900
01:48:52,630 --> 01:48:58,270
hide the OpenGL stuff from the game

1901
01:48:53,829 --> 01:48:59,979
engine itself is this a good idea or

1902
01:48:58,270 --> 01:49:01,570
should I just give it into the OpenGL

1903
01:48:59,979 --> 01:49:03,279
overlords and foot-pound including GL in

1904
01:49:01,569 --> 01:49:06,219
my game code maybe just beyond dogmatic

1905
01:49:03,279 --> 01:49:09,159
I would never put pound include GL in

1906
01:49:06,220 --> 01:49:10,630
your game code because you might want a

1907
01:49:09,159 --> 01:49:12,220
port to came to saying that's not GL and

1908
01:49:10,630 --> 01:49:17,949
now you've got to deal with that right

1909
01:49:12,220 --> 01:49:20,610
so I always say platform doesn't go in

1910
01:49:17,949 --> 01:49:23,139
the game code right

1911
01:49:20,609 --> 01:49:25,689
sometimes you have to inline certain

1912
01:49:23,140 --> 01:49:27,850
platform things into the game code like

1913
01:49:25,689 --> 01:49:30,189
Cindy for example hat you know you may

1914
01:49:27,850 --> 01:49:31,660
have to have like things that switch on

1915
01:49:30,189 --> 01:49:34,479
it but you still want to make sure that

1916
01:49:31,659 --> 01:49:37,420
it's not actually ever touched by the

1917
01:49:34,479 --> 01:49:40,329
game code so it's less about whether you

1918
01:49:37,420 --> 01:49:41,859
pound include GLH in the game code or

1919
01:49:40,329 --> 01:49:44,140
not it's whether the game code ever

1920
01:49:41,859 --> 01:49:46,389
refers to anything in there if the game

1921
01:49:44,140 --> 01:49:48,550
code is ever gonna actually be using GL

1922
01:49:46,390 --> 01:49:51,070
that H somehow it has to be doing it

1923
01:49:48,550 --> 01:49:53,710
through some opaque thing where it

1924
01:49:51,069 --> 01:49:55,659
doesn't actually rely on that so that if

1925
01:49:53,710 --> 01:50:01,800
you were trying to port to Vulcan

1926
01:49:55,659 --> 01:50:04,380
direct3d whatever PlayStation 4 Xbox one

1927
01:50:01,800 --> 01:50:06,909
blah-blah-blah-blah-blah Nintendo switch

1928
01:50:04,380 --> 01:50:08,350
you would always be able to use a

1929
01:50:06,909 --> 01:50:09,760
different graphics layer and the game

1930
01:50:08,350 --> 01:50:10,539
code doesn't have to change that's the

1931
01:50:09,760 --> 01:50:12,840
important part

1932
01:50:10,539 --> 01:50:12,840
right

1933
01:50:14,359 --> 01:50:17,960
skyvolt games from the JI programming

1934
01:50:17,000 --> 01:50:19,279
language stabilizers will you be

1935
01:50:17,960 --> 01:50:23,539
considering using it for future handmade

1936
01:50:19,279 --> 01:50:26,149
projects of course yes definitely I

1937
01:50:23,539 --> 01:50:28,760
don't know what the situation will be

1938
01:50:26,149 --> 01:50:30,229
like or when I would have a chance to

1939
01:50:28,760 --> 01:50:33,050
really start to learn it and move over

1940
01:50:30,229 --> 01:50:35,239
to it in a serious way but obviously I

1941
01:50:33,050 --> 01:50:39,710
will be considering it because C++ is a

1942
01:50:35,239 --> 01:50:44,059
giant steaming pile of dog turd so I

1943
01:50:39,710 --> 01:50:46,550
would greatly welcome the possibility of

1944
01:50:44,060 --> 01:50:51,220
programming a language designed by

1945
01:50:46,550 --> 01:50:51,220
people who I think are more sane right

1946
01:50:52,000 --> 01:50:55,850
is there an episode that explains some

1947
01:50:54,260 --> 01:50:58,850
generalities about what open jail

1948
01:50:55,850 --> 01:51:01,850
shaders are yes there are some episodes

1949
01:50:58,850 --> 01:51:05,660
about that if you go to the annotated

1950
01:51:01,850 --> 01:51:09,130
episode guide here that woops and put in

1951
01:51:05,659 --> 01:51:16,519
shader you would probably get some

1952
01:51:09,130 --> 01:51:18,199
information about that so let's see this

1953
01:51:16,520 --> 01:51:22,780
is probably something that might be

1954
01:51:18,199 --> 01:51:22,779
worth listening to to start with

1955
01:51:34,979 --> 01:51:40,569
here is when we actually implement

1956
01:51:38,109 --> 01:51:43,229
compiling and linking shaders so maybe

1957
01:51:40,569 --> 01:51:44,920
starting on day 368 would be good

1958
01:51:43,229 --> 01:51:47,379
introduction of vertex and fragment

1959
01:51:44,920 --> 01:51:57,640
shaders on day 369 that sounds pretty

1960
01:51:47,380 --> 01:52:15,430
good right all right no more Q :

1961
01:51:57,640 --> 01:52:16,750
so I will wrap it up alright thank you

1962
01:52:15,430 --> 01:52:17,650
everyone for joining me for the episode

1963
01:52:16,750 --> 01:52:19,270
of hey I made here oh it's been a

1964
01:52:17,649 --> 01:52:21,399
pleasure coding with you as always if

1965
01:52:19,270 --> 01:52:22,540
you would like to follow along the

1966
01:52:21,399 --> 01:52:24,369
series you could always pre-order the

1967
01:52:22,539 --> 01:52:26,829
game on handmade hero org and it comes

1968
01:52:24,369 --> 01:52:29,949
to the source code so you can play

1969
01:52:26,829 --> 01:52:31,809
around with it if you would like to

1970
01:52:29,949 --> 01:52:32,979
catch up on past episodes we do have an

1971
01:52:31,810 --> 01:52:34,750
episode guide that I was just showing

1972
01:52:32,979 --> 01:52:36,279
it's a great place to do that if you're

1973
01:52:34,750 --> 01:52:37,630
missed old stuff we have a schedule bot

1974
01:52:36,279 --> 01:52:39,880
that says when we're gonna be live you

1975
01:52:37,630 --> 01:52:41,109
want to catch a stream we also have a

1976
01:52:39,880 --> 01:52:42,310
contribution page if you want to

1977
01:52:41,109 --> 01:52:44,199
contribute to things like the episode

1978
01:52:42,310 --> 01:52:46,870
guide which are made by people in the

1979
01:52:44,199 --> 01:52:49,869
community and so we try to funnel money

1980
01:52:46,869 --> 01:52:52,119
to them to support their work that's a

1981
01:52:49,869 --> 01:52:54,309
good place to check that out that's what

1982
01:52:52,119 --> 01:52:56,619
it for today I will be back next week

1983
01:52:54,310 --> 01:52:58,720
when we will continue to optimize our

1984
01:52:56,619 --> 01:53:00,849
lending code at this point our rate cast

1985
01:52:58,720 --> 01:53:02,590
is probably good enough for now we

1986
01:53:00,850 --> 01:53:04,090
probably don't need to spend a lot of

1987
01:53:02,590 --> 01:53:06,130
time optimizing it there's a lot more we

1988
01:53:04,090 --> 01:53:07,690
could be doing but we're probably not

1989
01:53:06,130 --> 01:53:09,100
going to do that because the more

1990
01:53:07,689 --> 01:53:11,259
important optimization which is the one

1991
01:53:09,100 --> 01:53:12,880
that I want to get to first before we go

1992
01:53:11,260 --> 01:53:14,560
any further is starting to deal with

1993
01:53:12,880 --> 01:53:16,060
things multi-resolution and that's just

1994
01:53:14,560 --> 01:53:18,880
so we can scale the lighting so what

1995
01:53:16,060 --> 01:53:21,640
we're gonna do next week is we're going

1996
01:53:18,880 --> 01:53:24,400
to go ahead and blow out the scene to

1997
01:53:21,640 --> 01:53:26,590
some huge number of entities and lights

1998
01:53:24,399 --> 01:53:28,389
and everything and then we're gonna

1999
01:53:26,590 --> 01:53:30,180
start focusing on methods that will

2000
01:53:28,390 --> 01:53:33,840
allow us to still light those scenes

2001
01:53:30,180 --> 01:53:36,550
without tanking our performance so

2002
01:53:33,840 --> 01:53:38,680
that's what I'll be doing hopefully see

2003
01:53:36,550 --> 01:53:40,539
everyone here for that next week until

2004
01:53:38,680 --> 01:53:41,560
then have fun programming and I'll see

2005
01:53:40,539 --> 01:53:43,710
everyone in a minute take it easy

2006
01:53:41,560 --> 01:53:43,710
everybody

