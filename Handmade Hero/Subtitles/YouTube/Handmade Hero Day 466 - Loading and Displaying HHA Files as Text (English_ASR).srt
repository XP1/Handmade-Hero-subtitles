1
00:00:00,350 --> 00:00:05,068
hello everyone and welcome to handmade

2
00:00:02,428 --> 00:00:09,300
heroes show we code a complete game live

3
00:00:05,068 --> 00:00:11,099
on stream i am taking steps last weekend

4
00:00:09,300 --> 00:00:14,940
and this weekend to basically give us

5
00:00:11,099 --> 00:00:19,230
some more how should I put it

6
00:00:14,939 --> 00:00:23,070
a more modern Lee file format the reason

7
00:00:19,230 --> 00:00:26,670
for this is we were doing we decided to

8
00:00:23,070 --> 00:00:29,368
allow sort of more integrated artwork

9
00:00:26,670 --> 00:00:30,720
and pipeline art pipeline stuff in the

10
00:00:29,368 --> 00:00:33,600
game just because we have the

11
00:00:30,719 --> 00:00:35,189
opportunity to use that now and so while

12
00:00:33,600 --> 00:00:36,899
I was in there I just decided let's make

13
00:00:35,189 --> 00:00:39,420
sure that this stuff can be used to

14
00:00:36,899 --> 00:00:42,899
trade asset files and stuff like that in

15
00:00:39,420 --> 00:00:47,189
some way that'll actually be useful and

16
00:00:42,899 --> 00:00:50,160
so I think that's really all we're doing

17
00:00:47,189 --> 00:00:53,878
right now we mostly finished the other

18
00:00:50,159 --> 00:00:56,308
stuff which was getting the PNG like

19
00:00:53,878 --> 00:00:59,039
being able to update art assets in real

20
00:00:56,308 --> 00:01:02,128
time using the PNG that stuff we did

21
00:00:59,039 --> 00:01:04,049
okay and so now we're doing it's just

22
00:01:02,128 --> 00:01:05,518
kind of like settling in on a file

23
00:01:04,049 --> 00:01:08,130
format that has some additional

24
00:01:05,519 --> 00:01:09,900
information in it so that not only can

25
00:01:08,129 --> 00:01:12,239
we maybe use this file format to help

26
00:01:09,900 --> 00:01:14,850
with the art asset reloading just to

27
00:01:12,239 --> 00:01:20,250
make it a little cleaner but this will

28
00:01:14,849 --> 00:01:21,989
also allow us potentially to like let

29
00:01:20,250 --> 00:01:24,150
people do more with these files than I

30
00:01:21,989 --> 00:01:26,250
was originally anticipating we would

31
00:01:24,150 --> 00:01:29,640
allow people to do with handmade here

32
00:01:26,250 --> 00:01:30,780
when it comes out so if we go ahead and

33
00:01:29,640 --> 00:01:34,140
take a look at what we were in the

34
00:01:30,780 --> 00:01:36,868
middle of doing you know we we kept the

35
00:01:34,140 --> 00:01:38,489
code compiling in cleanly and all that

36
00:01:36,868 --> 00:01:42,118
so we actually are still running on the

37
00:01:38,489 --> 00:01:45,688
old file format v-0 but we made a new

38
00:01:42,118 --> 00:01:46,920
file format v1 that was in there and so

39
00:01:45,688 --> 00:01:49,529
you know if you've run the game it's

40
00:01:46,920 --> 00:01:51,030
still exactly the same as it was it

41
00:01:49,530 --> 00:01:53,909
still can load its old assets and all

42
00:01:51,030 --> 00:01:56,549
that stuff so that's good but we're now

43
00:01:53,909 --> 00:02:00,920
taking a look at making it so that we

44
00:01:56,549 --> 00:02:03,420
can do a conversion to a new file format

45
00:02:00,920 --> 00:02:06,689
and also basically do that anytime we

46
00:02:03,420 --> 00:02:10,050
want to and also we want to make it so

47
00:02:06,688 --> 00:02:11,340
that we can sort of have maybe hopefully

48
00:02:10,050 --> 00:02:12,629
this would be like sort of the last file

49
00:02:11,340 --> 00:02:13,930
format hopefully we won't have to do

50
00:02:12,628 --> 00:02:16,568
much more

51
00:02:13,930 --> 00:02:17,980
maybe we make some slight tweaks but I

52
00:02:16,568 --> 00:02:23,379
don't really want to have to fuss with

53
00:02:17,979 --> 00:02:26,199
the file format very often obviously so

54
00:02:23,379 --> 00:02:28,719
looking at what we used to have you can

55
00:02:26,199 --> 00:02:31,719
see we had here like three three things

56
00:02:28,719 --> 00:02:33,609
that got changed and so this was the old

57
00:02:31,719 --> 00:02:36,519
file format we've got the new file

58
00:02:33,610 --> 00:02:38,980
format kind of documented here here's

59
00:02:36,519 --> 00:02:40,360
the header we added some research stuff

60
00:02:38,979 --> 00:02:42,039
in there just in case we want to add

61
00:02:40,360 --> 00:02:43,510
some new arrays we won't have to break

62
00:02:42,039 --> 00:02:46,359
the file format going forwards to add

63
00:02:43,509 --> 00:02:49,030
some new erase the one and then we added

64
00:02:46,360 --> 00:02:50,590
this annotation stuff the point of the

65
00:02:49,030 --> 00:02:52,568
annotation stuff is just now we would be

66
00:02:50,590 --> 00:02:54,099
able to store information about where

67
00:02:52,568 --> 00:02:55,839
assets came from which will make it

68
00:02:54,099 --> 00:02:57,219
easier to hot reload them and it also

69
00:02:55,840 --> 00:02:58,900
make it easier for people when they

70
00:02:57,219 --> 00:03:00,310
trade files to know what assets they

71
00:02:58,900 --> 00:03:09,849
have and where they came from

72
00:03:00,310 --> 00:03:14,039
if they want to you know so that seems

73
00:03:09,848 --> 00:03:20,078
good the last thing I think I want to do

74
00:03:14,039 --> 00:03:22,659
is take the HHA asset struct and we have

75
00:03:20,079 --> 00:03:25,900
a couple of choices here one of the

76
00:03:22,659 --> 00:03:29,049
choices we have is to make this HHA

77
00:03:25,900 --> 00:03:31,659
asset struct a little bit more verbose

78
00:03:29,049 --> 00:03:34,480
so actually put in there what kind of

79
00:03:31,659 --> 00:03:36,189
data everything is and so on the other

80
00:03:34,479 --> 00:03:39,849
choice we have is to add that to the

81
00:03:36,189 --> 00:03:41,919
annotation I think I want to put it in

82
00:03:39,849 --> 00:03:45,879
here and the reason I want to put it in

83
00:03:41,919 --> 00:03:47,229
here is I think I want to say look let's

84
00:03:45,879 --> 00:03:48,909
just since we're going to make this a

85
00:03:47,229 --> 00:03:51,729
more flexible file format let's just go

86
00:03:48,909 --> 00:03:55,379
ahead waste a little space but let's

87
00:03:51,729 --> 00:03:59,738
with every single asset let's say

88
00:03:55,379 --> 00:04:04,180
explicitly where it is in the file how

89
00:03:59,739 --> 00:04:08,379
big it is and what type it is so that

90
00:04:04,180 --> 00:04:10,599
any individual HHA asset can even if you

91
00:04:08,379 --> 00:04:12,579
have no idea what you're looking at

92
00:04:10,599 --> 00:04:14,858
right like you have no idea if it's a

93
00:04:12,579 --> 00:04:16,870
bitmap or a sound or a font or maybe you

94
00:04:14,859 --> 00:04:18,699
don't even know what fonts are like you

95
00:04:16,870 --> 00:04:21,310
have you're just a utility that's

96
00:04:18,699 --> 00:04:25,389
operating on HHA file you have no idea

97
00:04:21,310 --> 00:04:27,550
how to read those something that still

98
00:04:25,389 --> 00:04:29,288
allows you to effectively edit

99
00:04:27,550 --> 00:04:32,079
the file so basically what we're doing

100
00:04:29,288 --> 00:04:34,990
here is we're putting in information

101
00:04:32,079 --> 00:04:37,089
that that you wouldn't actually need if

102
00:04:34,990 --> 00:04:40,090
you knew probably what you were doing

103
00:04:37,089 --> 00:04:42,388
but to make it easier to write utilities

104
00:04:40,089 --> 00:04:44,649
that don't have to know everything right

105
00:04:42,389 --> 00:04:46,598
this also makes us a little more

106
00:04:44,649 --> 00:04:48,638
future-proof it means that if we have an

107
00:04:46,598 --> 00:04:50,620
HHA editor that allows you to let move

108
00:04:48,639 --> 00:04:53,228
assets around like let's say you make a

109
00:04:50,620 --> 00:04:54,819
thing called HHA merge and it allows you

110
00:04:53,228 --> 00:04:56,859
to like maybe it showed like let's say

111
00:04:54,819 --> 00:04:59,110
summit community makes HHA merge it's a

112
00:04:56,860 --> 00:05:01,780
thing that loads to HHA files and allows

113
00:04:59,110 --> 00:05:03,610
you to pick which assets you want from

114
00:05:01,779 --> 00:05:05,679
each and then writes a third file out

115
00:05:03,610 --> 00:05:09,340
that has just those com the combination

116
00:05:05,680 --> 00:05:12,788
of those two assets right well that

117
00:05:09,339 --> 00:05:15,369
utility would have to understand a bunch

118
00:05:12,788 --> 00:05:18,610
of stuff in order to do that right now

119
00:05:15,370 --> 00:05:21,699
why because all we store in the hh8

120
00:05:18,610 --> 00:05:23,740
asset is the offset to the data in order

121
00:05:21,699 --> 00:05:25,478
to know how big the data is so that you

122
00:05:23,740 --> 00:05:28,629
can move it from one file to another and

123
00:05:25,478 --> 00:05:31,449
copy you know copy it right you have to

124
00:05:28,629 --> 00:05:33,550
first know the type and then look at the

125
00:05:31,449 --> 00:05:35,949
action will type in for me the the

126
00:05:33,550 --> 00:05:37,658
actual struct information here to figure

127
00:05:35,949 --> 00:05:39,310
out how big it should be because in

128
00:05:37,658 --> 00:05:40,689
order to move a bitmap you have to come

129
00:05:39,310 --> 00:05:42,098
in here and read the dimensions of the

130
00:05:40,689 --> 00:05:45,069
bitmap because the definition of a

131
00:05:42,098 --> 00:05:47,918
bitmap is of 32-bit integers that are as

132
00:05:45,069 --> 00:05:49,960
many as the dim zero times the dim one

133
00:05:47,918 --> 00:05:52,028
so without read without knowing it's a

134
00:05:49,959 --> 00:05:54,549
bitmap and reading out the dimensions

135
00:05:52,028 --> 00:05:58,139
from the bitmap you can't actually move

136
00:05:54,550 --> 00:06:00,968
the data associated with the asset right

137
00:05:58,139 --> 00:06:04,750
so you can see why this is a

138
00:06:00,968 --> 00:06:06,759
particularly annoying thing right so

139
00:06:04,750 --> 00:06:10,478
what I would rather do here is I would

140
00:06:06,759 --> 00:06:12,819
rather regularize this and say ok we're

141
00:06:10,478 --> 00:06:15,699
gonna be a little more upstanding

142
00:06:12,819 --> 00:06:17,199
citizen here the original file format

143
00:06:15,699 --> 00:06:19,270
was just made for our simplistic

144
00:06:17,199 --> 00:06:23,310
purposes let's be a little bit better

145
00:06:19,269 --> 00:06:27,278
about that make something a little more

146
00:06:23,310 --> 00:06:29,348
robust and editable you know because

147
00:06:27,278 --> 00:06:31,689
we're looking past just shipping file

148
00:06:29,348 --> 00:06:33,878
format to moddable file format almost

149
00:06:31,689 --> 00:06:36,668
and the things you want to do there

150
00:06:33,879 --> 00:06:39,150
become you want to waste a little space

151
00:06:36,668 --> 00:06:40,889
and get back its

152
00:06:39,149 --> 00:06:42,299
flexibility those are you know things

153
00:06:40,889 --> 00:06:43,529
you might want to do it's nothing really

154
00:06:42,300 --> 00:06:44,939
about wasting space you know I wasn't

155
00:06:43,529 --> 00:06:48,539
super concerned about space originally

156
00:06:44,939 --> 00:06:50,550
or anything it's just you don't spend a

157
00:06:48,540 --> 00:06:52,620
lot of time putting in features that you

158
00:06:50,550 --> 00:06:54,780
don't need right these are features we

159
00:06:52,620 --> 00:06:57,180
don't need but now we kind of want to

160
00:06:54,779 --> 00:06:59,729
have them so that going forwards we can

161
00:06:57,180 --> 00:07:03,660
use them right so you know we need them

162
00:06:59,730 --> 00:07:05,610
now or want them let's say so what I

163
00:07:03,660 --> 00:07:08,340
would like to do with the HHA asset is

164
00:07:05,610 --> 00:07:12,270
say ok let's say that there's the v-0

165
00:07:08,339 --> 00:07:15,959
version of the HHA asset like so right

166
00:07:12,269 --> 00:07:18,329
here's that v-0 version and now the new

167
00:07:15,959 --> 00:07:20,399
version of this will actually have

168
00:07:18,329 --> 00:07:23,490
additional information it'll have a data

169
00:07:20,399 --> 00:07:25,319
size and the data size will say okay if

170
00:07:23,490 --> 00:07:27,930
I go to this offset how much do I need

171
00:07:25,319 --> 00:07:30,930
to read and then it will also have at

172
00:07:27,930 --> 00:07:32,370
the end of this a data type right and

173
00:07:30,930 --> 00:07:34,769
then I'll tell us whether it's a bitmap

174
00:07:32,370 --> 00:07:36,930
a sound or a font or anything else we

175
00:07:34,769 --> 00:07:43,529
might want to add right so now there's

176
00:07:36,930 --> 00:07:48,500
an enum HHA asset type and in here we'll

177
00:07:43,529 --> 00:07:51,029
just say bitmap I might put an unknown

178
00:07:48,500 --> 00:07:52,529
or none something where we just

179
00:07:51,029 --> 00:07:55,829
basically say like look there's nothing

180
00:07:52,529 --> 00:07:57,329
here yet I often put that as the 0

181
00:07:55,829 --> 00:07:59,009
element so that if I want to have an

182
00:07:57,329 --> 00:07:59,509
uninitialized one I can and I can test

183
00:07:59,009 --> 00:08:05,039
for it

184
00:07:59,509 --> 00:08:07,230
but right now we just have bitmap sounds

185
00:08:05,040 --> 00:08:09,480
and fonts that's what we've got and so

186
00:08:07,230 --> 00:08:11,400
that's what we're going to say so now

187
00:08:09,480 --> 00:08:14,700
what I want to do is I want to have it

188
00:08:11,399 --> 00:08:18,839
so that I can come in here and I can

189
00:08:14,699 --> 00:08:21,719
specify the data type and the data size

190
00:08:18,839 --> 00:08:23,579
for every asset so now if someone wants

191
00:08:21,720 --> 00:08:26,160
to move an asset from one file to

192
00:08:23,579 --> 00:08:29,339
another they don't need to know anything

193
00:08:26,160 --> 00:08:32,519
about it they just need to know that

194
00:08:29,339 --> 00:08:35,399
they're going to move this much data and

195
00:08:32,519 --> 00:08:38,329
then whatever is in here now in order to

196
00:08:35,399 --> 00:08:40,829
make this also again a little bit more

197
00:08:38,330 --> 00:08:43,259
flexible I want to make sure that the

198
00:08:40,830 --> 00:08:45,150
amount of storage that goes on here is a

199
00:08:43,259 --> 00:08:46,889
little bit more predictable as well so

200
00:08:45,149 --> 00:08:49,259
you can see we've got a bunch of things

201
00:08:46,889 --> 00:08:51,779
we've got like a sound and a bitmap and

202
00:08:49,259 --> 00:08:52,679
a font and there are certain size so I

203
00:08:51,779 --> 00:08:54,509
want to still

204
00:08:52,679 --> 00:08:57,958
maintain that flat structure so they

205
00:08:54,509 --> 00:08:59,850
could just be copied around but I'm

206
00:08:57,958 --> 00:09:02,039
gonna actually put in this union here a

207
00:08:59,850 --> 00:09:06,659
thing that says the maximum size we ever

208
00:09:02,039 --> 00:09:09,360
expect everything to be right so like

209
00:09:06,659 --> 00:09:11,698
maybe we call this you know max Union

210
00:09:09,360 --> 00:09:13,230
size or something right and what we

211
00:09:11,698 --> 00:09:15,028
could do is set that to something that

212
00:09:13,230 --> 00:09:16,319
we think is reasonable like something

213
00:09:15,028 --> 00:09:21,838
that all right I'm not supposed to use a

214
00:09:16,318 --> 00:09:23,789
calculator anymore there we go what I

215
00:09:21,839 --> 00:09:26,999
want to do is set that Union science to

216
00:09:23,789 --> 00:09:28,618
something that I can actually anticipate

217
00:09:26,999 --> 00:09:30,420
being a reasonable block size to ever

218
00:09:28,619 --> 00:09:33,689
move around it's got the bitmaps this

219
00:09:30,419 --> 00:09:35,759
out the bitmap the sound and the font

220
00:09:33,688 --> 00:09:37,230
yeah if you look at how big those are

221
00:09:35,759 --> 00:09:40,829
right now right you can see that they're

222
00:09:37,230 --> 00:09:43,199
not particularly large it looks like

223
00:09:40,828 --> 00:09:45,208
we've got five 32-bit integers here

224
00:09:43,198 --> 00:09:48,838
three here and four here

225
00:09:45,208 --> 00:09:50,518
right so if we said something like this

226
00:09:48,839 --> 00:09:52,170
that would be far bigger than anything

227
00:09:50,519 --> 00:09:55,589
we have right now in plenty of room for

228
00:09:52,169 --> 00:09:57,058
anything that we might need and so if I

229
00:09:55,589 --> 00:09:59,720
go in and see how big that would be

230
00:09:57,058 --> 00:10:02,338
let's suppose we have 10,000 assets

231
00:09:59,720 --> 00:10:03,509
seems maybe let's go even larger than

232
00:10:02,339 --> 00:10:07,230
that let's say we have a bunch of fonts

233
00:10:03,509 --> 00:10:09,360
like 60,000 assets right and then we

234
00:10:07,230 --> 00:10:12,178
want to see how big the asset load would

235
00:10:09,360 --> 00:10:13,620
be for each of those let's actually go

236
00:10:12,178 --> 00:10:16,558
through let's let's make this since this

237
00:10:13,620 --> 00:10:19,409
is one two three of those let's actually

238
00:10:16,558 --> 00:10:23,159
make this so that they all line up right

239
00:10:19,409 --> 00:10:26,669
so we have one two three sixteenths we

240
00:10:23,159 --> 00:10:30,208
have 16 total you 64's which is 16 times

241
00:10:26,669 --> 00:10:33,748
8 right so that would be 7 megabytes for

242
00:10:30,208 --> 00:10:36,239
the asset store that's not even in the

243
00:10:33,749 --> 00:10:39,600
realm of problematic considerations for

244
00:10:36,240 --> 00:10:41,459
us so that's totally fine I could even

245
00:10:39,600 --> 00:10:47,928
bump this a little bit more if we wanted

246
00:10:41,458 --> 00:10:47,928
to just not sure we really need to

247
00:10:51,659 --> 00:10:56,559
assets don't really need much

248
00:10:55,090 --> 00:11:00,160
information because the bulk of their

249
00:10:56,559 --> 00:11:03,429
data goes into the flexible data store

250
00:11:00,159 --> 00:11:07,500
this is only the part that is stored for

251
00:11:03,429 --> 00:11:10,149
use in the actual processing of the game

252
00:11:07,500 --> 00:11:13,080
so I just don't anticipate it ever

253
00:11:10,149 --> 00:11:15,759
needing to be particularly large right

254
00:11:13,080 --> 00:11:21,129
so one thing we can do here I don't know

255
00:11:15,759 --> 00:11:24,069
that we ever did a CT assert oops yeah

256
00:11:21,129 --> 00:11:26,710
we didn't so one thing that might be

257
00:11:24,070 --> 00:11:28,750
nice to do is to assert that this thing

258
00:11:26,710 --> 00:11:30,580
never changes size right and that's

259
00:11:28,750 --> 00:11:32,860
something that you'd like to do in all

260
00:11:30,580 --> 00:11:34,900
of these you'd like to assert that none

261
00:11:32,860 --> 00:11:36,639
of these things change size so you pick

262
00:11:34,899 --> 00:11:38,860
typically you pick what the size of them

263
00:11:36,639 --> 00:11:40,330
should be and then used to assert that

264
00:11:38,860 --> 00:11:43,120
they can't ever be a different size than

265
00:11:40,330 --> 00:11:44,050
that right and so typically what you do

266
00:11:43,120 --> 00:11:45,730
is you have something that's like

267
00:11:44,049 --> 00:11:49,179
compile time assert and you say like

268
00:11:45,730 --> 00:11:54,759
okay you know let's compile time assert

269
00:11:49,179 --> 00:12:00,729
here let's compile time assert that you

270
00:11:54,759 --> 00:12:04,259
know the the size of an HHA asset is the

271
00:12:00,730 --> 00:12:12,220
same as what I just said it should be 16

272
00:12:04,259 --> 00:12:15,279
you know 8 byte entries right

273
00:12:12,220 --> 00:12:16,509
Negus I could just multiply 16 by 8 and

274
00:12:15,279 --> 00:12:17,919
put it in there but I decided not to do

275
00:12:16,509 --> 00:12:21,669
that for reasons we're not quite sure

276
00:12:17,919 --> 00:12:24,549
why so if we you know 1 do that we could

277
00:12:21,669 --> 00:12:25,839
also make these be more cash aligned I

278
00:12:24,549 --> 00:12:26,919
suppose but well you know it doesn't

279
00:12:25,840 --> 00:12:28,180
really matter because we're only going

280
00:12:26,919 --> 00:12:30,429
to touch the first part of them anyway

281
00:12:28,179 --> 00:12:32,379
so they'll generally be that first 64

282
00:12:30,429 --> 00:12:33,549
bytes will generally be in there so

283
00:12:32,379 --> 00:12:36,490
keeping the padding won't actually

284
00:12:33,549 --> 00:12:39,338
matter so I think that's fine so there's

285
00:12:36,490 --> 00:12:41,049
these these compile time asserts are a

286
00:12:39,339 --> 00:12:42,730
thing that we'd want to say look I just

287
00:12:41,049 --> 00:12:48,039
want you to assert this at compile time

288
00:12:42,730 --> 00:12:53,769
and the way that that you do this in

289
00:12:48,039 --> 00:12:58,629
modern C++ is they actually have one but

290
00:12:53,769 --> 00:13:04,590
you can actually create one from you can

291
00:12:58,629 --> 00:13:07,509
actually create one from like

292
00:13:04,590 --> 00:13:08,860
by using like tricks right you can

293
00:13:07,509 --> 00:13:11,110
actually create your own compile-time

294
00:13:08,860 --> 00:13:12,970
assert if the compiler doesn't have one

295
00:13:11,110 --> 00:13:17,100
and the compiler never did have one like

296
00:13:12,970 --> 00:13:19,420
back before 2012 or 2013 or whatever

297
00:13:17,100 --> 00:13:21,040
there was no such thing as a compile

298
00:13:19,419 --> 00:13:22,689
time assert built into the language so

299
00:13:21,039 --> 00:13:25,269
you couldn't do something like say I

300
00:13:22,690 --> 00:13:28,030
require this to actually be true alright

301
00:13:25,269 --> 00:13:31,329
so what you had to do was you had to

302
00:13:28,029 --> 00:13:34,329
figure out some way of triggering an

303
00:13:31,330 --> 00:13:37,150
assertion where the compiler would fail

304
00:13:34,330 --> 00:13:40,750
in the case where the thing wasn't true

305
00:13:37,149 --> 00:13:42,189
right and so let's suppose we want to do

306
00:13:40,750 --> 00:13:44,980
something like that let me take this out

307
00:13:42,190 --> 00:13:46,360
for a second here and we'll just try to

308
00:13:44,980 --> 00:13:49,330
reverse engineer how to make something

309
00:13:46,360 --> 00:13:52,269
like that so let's suppose I wanted to

310
00:13:49,330 --> 00:13:53,860
declare like a global variable or

311
00:13:52,269 --> 00:13:56,470
something like this that just never gets

312
00:13:53,860 --> 00:13:59,909
used right so let's suppose I want to do

313
00:13:56,470 --> 00:14:07,000
something like you know global variable

314
00:13:59,909 --> 00:14:12,480
foo let's suppose I did that right what

315
00:14:07,000 --> 00:14:28,029
you can see here it is oops more time

316
00:14:12,480 --> 00:14:30,070
right there we go so let's suppose that

317
00:14:28,029 --> 00:14:34,209
I wanted to create one of these things

318
00:14:30,070 --> 00:14:38,680
here right well if I created something

319
00:14:34,210 --> 00:14:39,879
of size one it would work if I created

320
00:14:38,679 --> 00:14:42,909
something of size zero

321
00:14:39,879 --> 00:14:44,889
it wouldn't work right so if I want to

322
00:14:42,909 --> 00:14:47,529
generate a compile time error based off

323
00:14:44,889 --> 00:14:50,830
of some expression well what I could do

324
00:14:47,529 --> 00:14:53,230
is I could say look what if I just took

325
00:14:50,830 --> 00:14:56,560
some expression that I could evaluate at

326
00:14:53,230 --> 00:14:59,320
compile time and then made what I

327
00:14:56,559 --> 00:15:02,589
declared this variable to be based on

328
00:14:59,320 --> 00:15:04,840
that so if it's equal the way I want to

329
00:15:02,590 --> 00:15:06,879
be I'll evaluate to 1 which will work if

330
00:15:04,840 --> 00:15:09,250
it's not equal I'll evaluate to 0 right

331
00:15:06,879 --> 00:15:11,320
so what you can see here is that this

332
00:15:09,250 --> 00:15:14,320
worked because it is equal to that size

333
00:15:11,320 --> 00:15:16,450
if I change it right so now I say oh

334
00:15:14,320 --> 00:15:17,340
yeah by the way there's like an ant at

335
00:15:16,450 --> 00:15:23,879
the end of this thing

336
00:15:17,340 --> 00:15:28,230
you can see that now it will error make

337
00:15:23,879 --> 00:15:29,789
sense so you know this isn't probably

338
00:15:28,230 --> 00:15:30,930
not a particularly great way to compare

339
00:15:29,789 --> 00:15:33,329
our time sir it's just the first thing

340
00:15:30,929 --> 00:15:35,370
that came to mind so I just want to show

341
00:15:33,330 --> 00:15:38,160
you how to make it pole cloth you could

342
00:15:35,370 --> 00:15:39,810
probably look up better ways to do it on

343
00:15:38,159 --> 00:15:41,789
the internet there's probably people who

344
00:15:39,809 --> 00:15:43,949
have like thought about the cleanest way

345
00:15:41,789 --> 00:15:46,469
to make a compile-time assert if your

346
00:15:43,950 --> 00:15:48,810
compiler doesn't support it but that's a

347
00:15:46,470 --> 00:15:50,250
obvious way to do it right you say CT

348
00:15:48,809 --> 00:15:53,609
assert right let's say I want to make

349
00:15:50,250 --> 00:15:56,009
this macro now I want that to work I say

350
00:15:53,610 --> 00:15:59,100
okay CT work here's my expression that I

351
00:15:56,009 --> 00:16:01,409
want to be true I just basically do this

352
00:15:59,100 --> 00:16:05,159
right where I say okay I've got an

353
00:16:01,409 --> 00:16:07,559
integer array foo and I want this

354
00:16:05,159 --> 00:16:10,319
expression to be true so whatever the

355
00:16:07,559 --> 00:16:11,819
expression is I want it to be true and

356
00:16:10,320 --> 00:16:15,540
then I'll do this thing enough it'll go

357
00:16:11,820 --> 00:16:18,690
right now of course one problem that

358
00:16:15,539 --> 00:16:20,909
I'll get if I actually do this is that

359
00:16:18,690 --> 00:16:29,310
when I actually run the X like this will

360
00:16:20,909 --> 00:16:35,370
work oops so if I do this it'll work but

361
00:16:29,309 --> 00:16:37,589
and you know it errors out as it should

362
00:16:35,370 --> 00:16:39,090
one problem is that as soon as like good

363
00:16:37,590 --> 00:16:41,580
and make a second one so let's say I

364
00:16:39,090 --> 00:16:44,070
wanted to make sure also that HHA

365
00:16:41,580 --> 00:16:46,879
annotation was always the same size one

366
00:16:44,070 --> 00:16:52,200
two three four five six seven eight nine

367
00:16:46,879 --> 00:16:56,340
ten eleven why are there eleven oh there

368
00:16:52,200 --> 00:16:59,640
it is twelve twelve I don't know why we

369
00:16:56,340 --> 00:17:05,059
have twelve one two three four five six

370
00:16:59,639 --> 00:17:09,299
seven eight nine ten eleven twelve

371
00:17:05,059 --> 00:17:11,639
we've got twelve for some reason that

372
00:17:09,299 --> 00:17:13,169
doesn't seem like a good number I feel

373
00:17:11,640 --> 00:17:16,290
like sixteen everyone likes powers of

374
00:17:13,170 --> 00:17:18,390
two better so if it's twelve I would

375
00:17:16,289 --> 00:17:21,509
want to add 4 to that so we'll just say

376
00:17:18,390 --> 00:17:25,550
that so there's the annotation struct so

377
00:17:21,509 --> 00:17:25,549
I want that one to be 16 large

378
00:17:29,440 --> 00:17:35,389
oops so these are both the same size now

379
00:17:32,808 --> 00:17:37,428
and the problem that we get as you can

380
00:17:35,388 --> 00:17:39,439
see here is I'm trying to assert on two

381
00:17:37,429 --> 00:17:42,620
different things but the problem is that

382
00:17:39,440 --> 00:17:44,778
since I gave this thing a name it's

383
00:17:42,619 --> 00:17:47,508
going to conflict right these are both

384
00:17:44,778 --> 00:17:52,548
going to try to talk about something

385
00:17:47,509 --> 00:17:54,259
called foo and that is going to make it

386
00:17:52,548 --> 00:17:55,519
so that I can't have more than one

387
00:17:54,259 --> 00:17:57,980
compile-time sir

388
00:17:55,519 --> 00:18:02,200
now one thing that people will often do

389
00:17:57,980 --> 00:18:02,200
to fix that is they'll say like oh okay

390
00:18:09,398 --> 00:18:16,668
you just pass in a name right and

391
00:18:14,509 --> 00:18:18,889
that'll work but it's a little annoying

392
00:18:16,669 --> 00:18:21,169
because we'd rather just have it work

393
00:18:18,888 --> 00:18:25,278
without the name right so what we would

394
00:18:21,169 --> 00:18:31,309
rather do here is have something that we

395
00:18:25,278 --> 00:18:33,230
can define in some way that you know

396
00:18:31,308 --> 00:18:37,460
doesn't have that problem right so some

397
00:18:33,230 --> 00:18:40,700
way that we can generate a name here

398
00:18:37,460 --> 00:18:42,048
that we know will be unique right and so

399
00:18:40,700 --> 00:18:44,450
we've done stuff like this before

400
00:18:42,048 --> 00:18:47,658
what we would like to do here is is

401
00:18:44,450 --> 00:18:50,210
maybe use the paste operator right and

402
00:18:47,659 --> 00:18:54,220
stick a counter in there or a line

403
00:18:50,210 --> 00:18:56,899
number for example and when we do that

404
00:18:54,220 --> 00:18:58,899
this would work just fine if it weren't

405
00:18:56,898 --> 00:19:03,469
for the fact that the paste operator is

406
00:18:58,898 --> 00:19:07,308
defined as not having not evaluating

407
00:19:03,470 --> 00:19:10,308
this value until until after the paste

408
00:19:07,308 --> 00:19:13,668
so this will actually stick underscore

409
00:19:10,308 --> 00:19:16,878
underscore line just the actual words

410
00:19:13,669 --> 00:19:18,799
right which isn't I wanted it to use the

411
00:19:16,878 --> 00:19:23,658
line number and it's not doing that

412
00:19:18,798 --> 00:19:26,000
right so what we'd rather do here is

413
00:19:23,659 --> 00:19:28,429
have some way of this actually using the

414
00:19:26,000 --> 00:19:30,288
line number or something like or a

415
00:19:28,429 --> 00:19:32,360
counter or anything like that to

416
00:19:30,288 --> 00:19:34,940
actually get us a differing value here

417
00:19:32,359 --> 00:19:39,839
and so what we want to do is use that

418
00:19:34,940 --> 00:19:43,298
weird trick where we keep calling down

419
00:19:39,839 --> 00:19:46,119
until we get enough deep to make it

420
00:19:43,298 --> 00:19:55,778
actually have evaluated the line and

421
00:19:46,119 --> 00:20:11,500
turned it into a number right so if I do

422
00:19:55,778 --> 00:20:12,750
this in theory I should be able to make

423
00:20:11,500 --> 00:20:15,778
this happen

424
00:20:12,750 --> 00:20:18,250
except that actually has to be the value

425
00:20:15,778 --> 00:20:20,919
so now it will actually turn it into a

426
00:20:18,250 --> 00:20:23,140
number so the first one down will pass

427
00:20:20,919 --> 00:20:25,000
this into here the second one will turn

428
00:20:23,140 --> 00:20:26,500
it into a number and pass it here and

429
00:20:25,000 --> 00:20:29,200
then the final one will pay some number

430
00:20:26,500 --> 00:20:31,538
on the end the C macro thing is not

431
00:20:29,200 --> 00:20:34,929
great I admit that I believe you can't

432
00:20:31,538 --> 00:20:37,480
do it just this way because the first

433
00:20:34,929 --> 00:20:42,370
time in it it just passes the think the

434
00:20:37,480 --> 00:20:44,200
word line it's just just a disaster it's

435
00:20:42,369 --> 00:20:47,558
a bad macro language what can you say

436
00:20:44,200 --> 00:20:51,330
however this will work and so what I can

437
00:20:47,558 --> 00:20:53,678
do here is make a little like CT assert

438
00:20:51,329 --> 00:20:55,418
so no one will ever accidentally use

439
00:20:53,679 --> 00:20:58,870
this name and now we're good to go

440
00:20:55,419 --> 00:21:01,059
there's one sort of a million's here

441
00:20:58,869 --> 00:21:04,178
and what that is is that well okay so

442
00:21:01,058 --> 00:21:07,178
we've got this thing and now what we're

443
00:21:04,179 --> 00:21:08,649
doing in a lot of cases is where you

444
00:21:07,179 --> 00:21:10,720
know declaring something that looks like

445
00:21:08,648 --> 00:21:13,389
that well that's actually a data member

446
00:21:10,720 --> 00:21:16,240
and you know probably the compiler will

447
00:21:13,390 --> 00:21:18,309
get rid of it but who's to say is some

448
00:21:16,240 --> 00:21:20,500
compilers like GCC are really bad with

449
00:21:18,308 --> 00:21:25,808
static data members or global data

450
00:21:20,500 --> 00:21:30,269
members rather I remember there were

451
00:21:25,808 --> 00:21:34,058
versions of GCC that if you ever had a

452
00:21:30,269 --> 00:21:41,500
switch statement that could have looked

453
00:21:34,058 --> 00:21:43,599
at a value in the data segment then it

454
00:21:41,500 --> 00:21:45,730
never got rid of anything in the data

455
00:21:43,599 --> 00:21:50,648
there was some really ridiculous stuff I

456
00:21:45,730 --> 00:21:53,019
remember crazy stuff in GCC that would

457
00:21:50,648 --> 00:21:55,689
keep it from ever removing

458
00:21:53,019 --> 00:21:57,879
data segment stuff so you know do we

459
00:21:55,690 --> 00:22:01,058
want do we care that much no not really

460
00:21:57,880 --> 00:22:03,370
but is there an easier way for us to do

461
00:22:01,058 --> 00:22:05,109
this well let's you know this is the

462
00:22:03,369 --> 00:22:08,949
thing that we need to have error out

463
00:22:05,109 --> 00:22:10,269
right so the question is could we just

464
00:22:08,950 --> 00:22:12,909
turn this into something else like a

465
00:22:10,269 --> 00:22:15,700
function declaration or something that

466
00:22:12,909 --> 00:22:18,549
wouldn't actually you know cause a

467
00:22:15,700 --> 00:22:20,500
problem like could we just say oh you

468
00:22:18,548 --> 00:22:26,139
know you know can we just throw it into

469
00:22:20,500 --> 00:22:29,589
a struct right and see if if that causes

470
00:22:26,140 --> 00:22:32,049
a problem right well the first thing you

471
00:22:29,589 --> 00:22:34,808
can see here is it's warning us because

472
00:22:32,048 --> 00:22:39,849
we have a symbol that can never be used

473
00:22:34,808 --> 00:22:42,849
right and you know maybe we could just

474
00:22:39,849 --> 00:22:46,058
move the name outside it and do that and

475
00:22:42,849 --> 00:22:49,480
we'd be good you know looks pretty good

476
00:22:46,058 --> 00:22:51,940
so that's a little better if I zeroed it

477
00:22:49,480 --> 00:22:59,200
I will get the non-standard extension

478
00:22:51,940 --> 00:23:01,269
error I don't know will this give me a

479
00:22:59,200 --> 00:23:03,519
better error no it's still the

480
00:23:01,269 --> 00:23:09,730
non-standard zero it's still announcer I

481
00:23:03,519 --> 00:23:12,369
want a harder error than that trying to

482
00:23:09,730 --> 00:23:13,700
think if I can get a harder error than

483
00:23:12,369 --> 00:23:17,929
that

484
00:23:13,700 --> 00:23:17,930
[Music]

485
00:23:24,048 --> 00:23:30,408
well you know what this is okay that's

486
00:23:27,179 --> 00:23:33,210
an error we want so let's see that

487
00:23:30,409 --> 00:23:36,510
compiles that doesn't so that's really

488
00:23:33,210 --> 00:23:37,860
all I need for my compile time assert so

489
00:23:36,509 --> 00:23:42,240
I'm going to go ahead and just grab that

490
00:23:37,859 --> 00:23:46,579
I'm gonna put it in here and we'll go

491
00:23:42,240 --> 00:23:58,669
from there so here's my struct name

492
00:23:46,579 --> 00:23:58,668
right here's my brackets expression oops

493
00:24:01,640 --> 00:24:07,549
and off I go so now I should be able to

494
00:24:05,609 --> 00:24:10,079
just loft this up into our platform

495
00:24:07,548 --> 00:24:13,980
library that everyone can use where the

496
00:24:10,079 --> 00:24:17,189
standard assert is and you know here

497
00:24:13,980 --> 00:24:19,769
we've got sort of our debug stuff I can

498
00:24:17,190 --> 00:24:22,200
go ahead and drop this in it's

499
00:24:19,769 --> 00:24:24,240
completely like you don't need it

500
00:24:22,200 --> 00:24:25,798
doesn't need to be compiled out ever it

501
00:24:24,240 --> 00:24:28,710
can be always compiled in because it

502
00:24:25,798 --> 00:24:31,980
doesn't actually do anything so it's

503
00:24:28,710 --> 00:24:33,929
just purely compiled time checking so at

504
00:24:31,980 --> 00:24:37,679
that point this is just you know we're

505
00:24:33,929 --> 00:24:40,528
good to go so what I can do here is I

506
00:24:37,679 --> 00:24:42,450
can place these anytime we've got one of

507
00:24:40,528 --> 00:24:44,759
these I can just place these and we're

508
00:24:42,450 --> 00:24:47,009
saying we need these to be specific

509
00:24:44,759 --> 00:24:49,740
sizes because from now on we're gonna

510
00:24:47,009 --> 00:24:52,769
expect them to be locked in place right

511
00:24:49,740 --> 00:24:56,700
so I can just kind of step in here and

512
00:24:52,769 --> 00:25:03,269
say okay each of these things is you

513
00:24:56,700 --> 00:25:05,009
know gonna be a particular size if

514
00:25:03,269 --> 00:25:07,408
anyone changes it they need to make sure

515
00:25:05,009 --> 00:25:09,599
that they understand that we actually

516
00:25:07,409 --> 00:25:12,750
load these and operate on them directly

517
00:25:09,599 --> 00:25:13,079
so please don't fuss with them and off

518
00:25:12,750 --> 00:25:17,519
we go

519
00:25:13,079 --> 00:25:23,579
so this is one two three four so that's

520
00:25:17,519 --> 00:25:27,450
four sixteen of those so that is 16 for

521
00:25:23,579 --> 00:25:31,619
byte values plus one two three plus

522
00:25:27,450 --> 00:25:34,259
eight eight byte values

523
00:25:31,619 --> 00:25:35,449
let's compile this there we go and now

524
00:25:34,259 --> 00:25:36,808
if we touch anything

525
00:25:35,450 --> 00:25:40,679
[Music]

526
00:25:36,808 --> 00:25:43,190
we should get errors immediately and

527
00:25:40,679 --> 00:25:43,190
that's good

528
00:25:51,298 --> 00:25:56,788
and that's all we needed so that's

529
00:25:53,819 --> 00:25:58,769
that's all we needed so now we've got

530
00:25:56,788 --> 00:26:02,609
our file format laid out the way that we

531
00:25:58,769 --> 00:26:04,288
want it looks like I already had the

532
00:26:02,609 --> 00:26:07,109
asset data type ID stuff I had already

533
00:26:04,288 --> 00:26:09,148
started on that I'm gonna leave that as

534
00:26:07,109 --> 00:26:11,250
hij asset type I think I like that

535
00:26:09,148 --> 00:26:17,759
phrasing better

536
00:26:11,250 --> 00:26:21,028
so we'll just go eliminate that and I'm

537
00:26:17,759 --> 00:26:24,808
gonna get rid of that so now we're just

538
00:26:21,028 --> 00:26:26,849
left with these I don't know what font

539
00:26:24,808 --> 00:26:33,960
type was meant to do

540
00:26:26,849 --> 00:26:37,048
exactly I guess that was just this for

541
00:26:33,960 --> 00:26:40,259
picking fonts I guess that was just for

542
00:26:37,048 --> 00:26:42,509
picking fonts who knows

543
00:26:40,259 --> 00:26:44,250
so anyway looking through here we now

544
00:26:42,509 --> 00:26:47,609
have I think everything that I actually

545
00:26:44,250 --> 00:26:49,528
wanted us to have is it's now specified

546
00:26:47,609 --> 00:26:51,528
not to be cleanly I can move this up to

547
00:26:49,528 --> 00:26:54,179
the top

548
00:26:51,528 --> 00:26:57,089
that's the data type there I want to do

549
00:26:54,179 --> 00:26:59,009
one more thing in it kind of like the CT

550
00:26:57,089 --> 00:27:01,048
assert there that we've got I want to do

551
00:26:59,009 --> 00:27:06,960
one more thing the thing that I would

552
00:27:01,048 --> 00:27:09,990
like to do is make a way for us to

553
00:27:06,960 --> 00:27:13,200
specify which type we were referring to

554
00:27:09,990 --> 00:27:15,390
as kind of a bit of documentation if you

555
00:27:13,200 --> 00:27:18,269
will so the way that I like to do this

556
00:27:15,390 --> 00:27:21,360
is right I mean let me just give an

557
00:27:18,269 --> 00:27:23,250
example so what I would like to do is

558
00:27:21,359 --> 00:27:27,538
here's the data type I'd rather it be

559
00:27:23,250 --> 00:27:30,240
that but the problem is that until very

560
00:27:27,538 --> 00:27:34,140
recently C and C++ didn't have a way of

561
00:27:30,240 --> 00:27:36,690
saying this is this enum is a u-32 so I

562
00:27:34,140 --> 00:27:38,850
want it to be 32 bits the compiler was

563
00:27:36,690 --> 00:27:40,679
free to make it 8 bits or 16 bits or

564
00:27:38,849 --> 00:27:43,319
however many bits it wanted it didn't

565
00:27:40,679 --> 00:27:45,120
have to do any particular size but I

566
00:27:43,319 --> 00:27:47,669
want it to be this size

567
00:27:45,119 --> 00:27:50,129
but I would also like to notate to the

568
00:27:47,670 --> 00:27:52,769
people who may be reading this that it

569
00:27:50,130 --> 00:27:56,220
comes from a particular place so I just

570
00:27:52,769 --> 00:28:03,299
usually do a thing where I pound to find

571
00:27:56,220 --> 00:28:06,350
enum 32 and flag 32 to basically have a

572
00:28:03,299 --> 00:28:12,389
type that is ignored

573
00:28:06,349 --> 00:28:18,178
so they both evaluate to you know 32 a

574
00:28:12,390 --> 00:28:20,040
you 32 as if they were a type but they

575
00:28:18,179 --> 00:28:22,769
allow me to just stick a little date in

576
00:28:20,039 --> 00:28:25,349
there so for example I can say enum 32

577
00:28:22,769 --> 00:28:29,579
this is supposed to be an HSA asset type

578
00:28:25,349 --> 00:28:31,829
right and this is the data type right

579
00:28:29,579 --> 00:28:33,178
and I could just say type right in the

580
00:28:31,829 --> 00:28:36,029
sense because it's that's what it is

581
00:28:33,179 --> 00:28:37,740
it's just the type of the asset okay

582
00:28:36,029 --> 00:28:41,970
and similarly anywhere else that I had a

583
00:28:37,740 --> 00:28:43,890
flag like that I can have that so this

584
00:28:41,970 --> 00:28:45,569
right here you know we had to notate it

585
00:28:43,890 --> 00:28:47,970
like this before I can make that a

586
00:28:45,569 --> 00:28:50,308
little cleaner by just saying okay HHH

587
00:28:47,970 --> 00:28:51,808
sound Shane there we go so now you know

588
00:28:50,308 --> 00:28:54,420
well it's a 32-bit number but it

589
00:28:51,808 --> 00:28:57,779
actually said it's just one of these is

590
00:28:54,420 --> 00:28:59,970
all it's actually trying to tell you so

591
00:28:57,779 --> 00:29:01,529
that's kind of a nice way to do that and

592
00:28:59,970 --> 00:29:05,670
then similarly like with the tag up here

593
00:29:01,529 --> 00:29:13,639
same thing this is an ID it's an HHA tag

594
00:29:05,670 --> 00:29:13,640
ID or what is it called asset tag ID

595
00:29:14,539 --> 00:29:21,480
like so and so now everything is kind of

596
00:29:18,690 --> 00:29:24,390
properly marked up with you know what

597
00:29:21,480 --> 00:29:26,069
it's supposed to have and it's easier

598
00:29:24,390 --> 00:29:28,920
maybe a little bit easier for people to

599
00:29:26,069 --> 00:29:31,169
know what that's supposed to be I tend

600
00:29:28,920 --> 00:29:31,558
to like that if you don't like it no

601
00:29:31,170 --> 00:29:34,470
biggie

602
00:29:31,558 --> 00:29:36,178
you know it's not a thing I think is

603
00:29:34,470 --> 00:29:37,679
particularly important it's just

604
00:29:36,179 --> 00:29:40,820
something I tend to like to do makes

605
00:29:37,679 --> 00:29:40,820
things a little bit nicer to read

606
00:29:40,940 --> 00:29:46,320
alright so that's the final file format

607
00:29:44,119 --> 00:29:48,989
that I think we want to go with right

608
00:29:46,319 --> 00:29:52,529
now and so what I would like to do is

609
00:29:48,990 --> 00:29:56,059
now I would like to just finish the

610
00:29:52,529 --> 00:29:56,059
importer thing right

611
00:29:58,259 --> 00:30:05,789
and so once we imp what so that we can

612
00:30:02,309 --> 00:30:07,109
import everything into the new file into

613
00:30:05,789 --> 00:30:09,210
the new file format from the old file

614
00:30:07,109 --> 00:30:10,589
format so we can still run all of our

615
00:30:09,210 --> 00:30:14,009
old stuff exactly the way that we used

616
00:30:10,589 --> 00:30:15,240
to just as a proof of concept and then

617
00:30:14,009 --> 00:30:16,559
from then on we can just focus on

618
00:30:15,240 --> 00:30:27,960
importing new stuff and how that's going

619
00:30:16,559 --> 00:30:32,549
to work I think that's really all we

620
00:30:27,960 --> 00:30:42,180
need to do now you know looking at these

621
00:30:32,549 --> 00:30:51,559
things there's a couple there's one more

622
00:30:42,180 --> 00:30:58,400
thing that might be arguably a good idea

623
00:30:51,559 --> 00:30:58,399
so if we look at the values

624
00:31:06,669 --> 00:31:12,620
not sure how to state this properly so

625
00:31:10,000 --> 00:31:15,230
one of the things that we want to think

626
00:31:12,619 --> 00:31:20,569
about is how are we going to quickly

627
00:31:15,230 --> 00:31:24,319
access these assets and when we're doing

628
00:31:20,569 --> 00:31:25,908
something like the asset matching we

629
00:31:24,319 --> 00:31:31,038
have a lot of ways we might be able to

630
00:31:25,909 --> 00:31:33,830
accelerate the lookups for example we

631
00:31:31,038 --> 00:31:36,349
know that for something like the head

632
00:31:33,829 --> 00:31:38,359
there might be two things like the

633
00:31:36,349 --> 00:31:44,509
expression that likes you know as the

634
00:31:38,359 --> 00:31:46,250
smiling is it whatever and then the

635
00:31:44,509 --> 00:31:50,210
facing direction right which direction

636
00:31:46,250 --> 00:31:52,788
is it going and one of the things that

637
00:31:50,210 --> 00:31:56,329
we would know about those is we always

638
00:31:52,788 --> 00:31:58,819
know that there's only a certain lookup

639
00:31:56,329 --> 00:32:00,949
like we know there's only four facing

640
00:31:58,819 --> 00:32:03,019
directions or something right so we

641
00:32:00,950 --> 00:32:05,139
could think of trying to do things that

642
00:32:03,019 --> 00:32:07,519
allow us to access those more quickly

643
00:32:05,138 --> 00:32:09,888
the problem with that is it starts to

644
00:32:07,519 --> 00:32:12,589
cut down on our ability to make changes

645
00:32:09,888 --> 00:32:13,939
to those like maybe eventually we want

646
00:32:12,589 --> 00:32:15,829
eight face and directions or sixteen

647
00:32:13,940 --> 00:32:17,240
facing directions having a

648
00:32:15,829 --> 00:32:19,638
floating-point value means you can

649
00:32:17,240 --> 00:32:21,169
always subdivide your range pretty much

650
00:32:19,638 --> 00:32:28,339
forever because you know you're never

651
00:32:21,169 --> 00:32:31,038
gonna really hit that 24 bit limit so

652
00:32:28,339 --> 00:32:32,148
it's hard to say so I'm tempted to do

653
00:32:31,038 --> 00:32:34,308
something like that but I'm just gonna

654
00:32:32,148 --> 00:32:35,719
say look we'll just deal with it on the

655
00:32:34,308 --> 00:32:37,519
back end that's something we'll just

656
00:32:35,720 --> 00:32:39,230
have to write optimized lookups for and

657
00:32:37,519 --> 00:32:43,069
let's just leave it as a floating point

658
00:32:39,230 --> 00:32:44,000
arbitrary bag of crap and we'll just

659
00:32:43,069 --> 00:32:45,470
deal with that after the fact because

660
00:32:44,000 --> 00:32:46,909
that is the thing that would let us have

661
00:32:45,470 --> 00:32:49,548
the most expressive file format and

662
00:32:46,909 --> 00:32:53,299
that's sort of what we're doing here is

663
00:32:49,548 --> 00:32:54,648
letting that happen all right so now

664
00:32:53,298 --> 00:32:57,859
what I want to do is I want to make a

665
00:32:54,648 --> 00:33:01,479
thing if we pop over to the HHI editor I

666
00:32:57,859 --> 00:33:06,558
want to make a thing that allows us to

667
00:33:01,480 --> 00:33:09,649
low in an asset get all the information

668
00:33:06,558 --> 00:33:12,589
that we need out of it and then be able

669
00:33:09,648 --> 00:33:15,229
to write it to a new HHA and that's all

670
00:33:12,589 --> 00:33:18,048
I'm going to try and do today is get

671
00:33:15,230 --> 00:33:19,250
that basic stuff going now the

672
00:33:18,048 --> 00:33:20,809
annotations got

673
00:33:19,250 --> 00:33:23,599
little more complicated since we first

674
00:33:20,809 --> 00:33:27,230
type that in so let's make sure we get

675
00:33:23,599 --> 00:33:30,289
them all in there right so here is our

676
00:33:27,230 --> 00:33:32,509
loaded HHA annotation and what we want

677
00:33:30,289 --> 00:33:34,970
is all of these things right this all

678
00:33:32,509 --> 00:33:37,879
should be in there so we want the source

679
00:33:34,970 --> 00:33:40,850
file date and the check sum the source

680
00:33:37,880 --> 00:33:42,590
file based name offset is not a thing we

681
00:33:40,849 --> 00:33:44,179
need because that's just like actually

682
00:33:42,589 --> 00:33:45,740
going to become a pointer right so

683
00:33:44,180 --> 00:33:48,200
that's that that's the source file base

684
00:33:45,740 --> 00:33:50,480
name down here the asset name and

685
00:33:48,200 --> 00:33:55,279
description and author all the same

686
00:33:50,480 --> 00:33:58,430
right we should also put those reserves

687
00:33:55,279 --> 00:33:59,899
in here I suppose because we want to

688
00:33:58,430 --> 00:34:02,539
carry them through so we'll keep those

689
00:33:59,900 --> 00:34:04,880
in there we have the source file base

690
00:34:02,539 --> 00:34:06,639
name count the asset name count script

691
00:34:04,880 --> 00:34:09,889
count author count those are all

692
00:34:06,640 --> 00:34:12,619
implicitly caught in here so we don't

693
00:34:09,889 --> 00:34:15,919
need those then we've got sprite sheet X

694
00:34:12,619 --> 00:34:17,559
Y and the reserved those we do need so

695
00:34:15,918 --> 00:34:21,079
this is the TV that comes from the file

696
00:34:17,559 --> 00:34:24,019
this is the data that is loaded out of

697
00:34:21,079 --> 00:34:25,940
the file like so and really these are

698
00:34:24,019 --> 00:34:29,869
counted strings this is basically like

699
00:34:25,940 --> 00:34:32,780
the buffer stuff what was that that we

700
00:34:29,869 --> 00:34:35,059
had here that was really the buffer I

701
00:34:32,780 --> 00:34:43,550
don't remember where we defined that

702
00:34:35,059 --> 00:34:46,579
stuff to be honest it's in shared so I I

703
00:34:43,550 --> 00:34:49,250
really want to use a string here like I

704
00:34:46,579 --> 00:34:51,168
said I I feel like that's the best way

705
00:34:49,250 --> 00:34:57,860
to do things typically so I probably

706
00:34:51,168 --> 00:35:00,639
just want that like so and we'll make

707
00:34:57,860 --> 00:35:04,480
sure that's defined somewhere right

708
00:35:00,639 --> 00:35:04,480
that's in what shared

709
00:35:12,719 --> 00:35:31,750
um okay so I would like there to be easy

710
00:35:27,190 --> 00:35:35,559
ways to define these things so let's go

711
00:35:31,750 --> 00:35:37,000
ahead and make some of those inside

712
00:35:35,559 --> 00:35:40,119
handmade shared I don't know if we

713
00:35:37,000 --> 00:35:42,789
already have one but specifically what I

714
00:35:40,119 --> 00:35:45,789
would want here is a way to define a

715
00:35:42,789 --> 00:35:47,860
constant string I don't think we ever

716
00:35:45,789 --> 00:35:52,630
did one of those but basically a way to

717
00:35:47,860 --> 00:35:54,460
define a string in a convenient way so

718
00:35:52,630 --> 00:35:56,769
if we wanted to do something like that

719
00:35:54,460 --> 00:35:59,800
I'm just gonna call it rap Z and

720
00:35:56,769 --> 00:36:02,320
basically all this is gonna do is it'll

721
00:35:59,800 --> 00:36:04,330
take and it probably needs to be we have

722
00:36:02,320 --> 00:36:05,710
a string length somewhere right yeah it

723
00:36:04,329 --> 00:36:09,759
looks like we've got that so it's

724
00:36:05,710 --> 00:36:11,980
external anyway so what I want to do is

725
00:36:09,760 --> 00:36:17,560
say okay if you're gonna take a string

726
00:36:11,980 --> 00:36:19,869
and you want to produce one of our sort

727
00:36:17,559 --> 00:36:24,909
of counted strings from the kind that

728
00:36:19,869 --> 00:36:27,309
see unfortunately defaults - this is our

729
00:36:24,909 --> 00:36:30,549
D string here then what we could do is

730
00:36:27,309 --> 00:36:32,259
you say alright let's convert that it's

731
00:36:30,550 --> 00:36:34,960
gonna be the count is going to be the

732
00:36:32,260 --> 00:36:36,640
string length of Z and then the result

733
00:36:34,960 --> 00:36:38,500
data is just going to be the pointer to

734
00:36:36,639 --> 00:36:41,829
Z and then return it so it's just a way

735
00:36:38,500 --> 00:36:44,590
to like make a wrapper around it and for

736
00:36:41,829 --> 00:36:48,069
what it's worth we can do - we can do

737
00:36:44,590 --> 00:36:50,200
different versions of these we can make

738
00:36:48,070 --> 00:36:52,750
one that works on constant strings as

739
00:36:50,199 --> 00:36:57,569
well so for example in this case we

740
00:36:52,750 --> 00:36:57,570
could make one like this

741
00:37:01,369 --> 00:37:04,490
something like that

742
00:37:04,798 --> 00:37:10,920
and what that would do is just say okay

743
00:37:07,798 --> 00:37:13,818
a constant z string where we have the

744
00:37:10,920 --> 00:37:16,559
string in here there's the Z or whatever

745
00:37:13,818 --> 00:37:18,599
we know that we can make one of these by

746
00:37:16,559 --> 00:37:20,160
getting the count and then having a part

747
00:37:18,599 --> 00:37:30,450
of a data well here's a porter to the

748
00:37:20,159 --> 00:37:31,710
data right let's just do that so we know

749
00:37:30,449 --> 00:37:35,548
we can get a point of the data really

750
00:37:31,710 --> 00:37:39,028
easy what we don't really know is how we

751
00:37:35,548 --> 00:37:41,278
would get the count but remember if this

752
00:37:39,028 --> 00:37:43,469
is a constant then what we can do there

753
00:37:41,278 --> 00:37:45,539
is just say well we know the size of it

754
00:37:43,469 --> 00:37:47,788
the size of it is just going to be

755
00:37:45,539 --> 00:37:49,859
however long it is including the null

756
00:37:47,789 --> 00:37:51,930
terminator so if we just subtract the

757
00:37:49,858 --> 00:37:56,038
null terminator away that would give us

758
00:37:51,929 --> 00:37:58,739
a constant right so what we can do in

759
00:37:56,039 --> 00:38:02,430
this case is say well alright we can

760
00:37:58,739 --> 00:38:05,248
wrap this guy just fine and then these

761
00:38:02,429 --> 00:38:07,108
guys can be constants and they don't

762
00:38:05,248 --> 00:38:10,219
even need to spend the time to do the

763
00:38:07,108 --> 00:38:15,210
string length they'll just know right

764
00:38:10,219 --> 00:38:17,548
and and that should work right what is

765
00:38:15,210 --> 00:38:22,619
this complaining about for string to you

766
00:38:17,548 --> 00:38:27,829
64 that is true that's these parts here

767
00:38:22,619 --> 00:38:27,829
I'm gonna go ahead and do that this way

768
00:38:34,510 --> 00:38:39,280
this would probably not work as well

769
00:38:36,608 --> 00:38:41,679
because the compilers not going to want

770
00:38:39,280 --> 00:38:43,660
to do that assignment in earlier

771
00:38:41,679 --> 00:38:56,739
versions to see it probably work in this

772
00:38:43,659 --> 00:39:04,049
one base name this is not parse to be a

773
00:38:56,739 --> 00:39:08,078
base name so we should probably do that

774
00:39:04,050 --> 00:39:10,030
so this what shouldn't really be done

775
00:39:08,079 --> 00:39:13,240
here the reason for this is so modern

776
00:39:10,030 --> 00:39:19,060
version subsidy allow you to do the

777
00:39:13,239 --> 00:39:20,199
brackets as an assignment older versions

778
00:39:19,059 --> 00:39:22,509
don't

779
00:39:20,199 --> 00:39:24,429
so do in order to maintain some more

780
00:39:22,510 --> 00:39:28,569
compatibility with older compilers I'll

781
00:39:24,429 --> 00:39:31,179
just actually call rap Z in that case

782
00:39:28,568 --> 00:39:34,179
and again that's just just as a courtesy

783
00:39:31,179 --> 00:39:35,588
to people using older compilers 2012

784
00:39:34,179 --> 00:39:38,769
would not have compiled that I don't

785
00:39:35,588 --> 00:39:41,920
know if 2013 would might have but it

786
00:39:38,769 --> 00:39:45,250
might not have as well so anyway this is

787
00:39:41,920 --> 00:39:46,960
not a base name here so I don't remember

788
00:39:45,250 --> 00:39:48,309
if we actually have anything that did

789
00:39:46,960 --> 00:39:51,159
that parsing and don't think we actually

790
00:39:48,309 --> 00:39:52,750
did I think it was just baked into some

791
00:39:51,159 --> 00:39:55,779
routines we could make something that

792
00:39:52,750 --> 00:39:58,239
parsed it but you can see here this will

793
00:39:55,780 --> 00:40:00,099
give us the default annotations that we

794
00:39:58,239 --> 00:40:01,659
wanted and we're gonna leave all the

795
00:40:00,099 --> 00:40:04,930
rest of this blank because we don't know

796
00:40:01,659 --> 00:40:06,848
any of it right we we don't know any of

797
00:40:04,929 --> 00:40:09,699
the other information these are not

798
00:40:06,849 --> 00:40:11,380
probably relevant I mean we could set

799
00:40:09,699 --> 00:40:15,368
them to the information that comes from

800
00:40:11,380 --> 00:40:20,108
source file base the HHA but it's just

801
00:40:15,369 --> 00:40:22,390
probably not useful okay so what we want

802
00:40:20,108 --> 00:40:27,279
to do now is proceed through the process

803
00:40:22,389 --> 00:40:28,929
of loading and all the v0h a file and so

804
00:40:27,280 --> 00:40:32,130
that we can write it and we also I think

805
00:40:28,929 --> 00:40:38,169
want to make something that will dump us

806
00:40:32,130 --> 00:40:41,470
get give us a quick dump of the contents

807
00:40:38,170 --> 00:40:44,769
of an HHA right and I think we we made a

808
00:40:41,469 --> 00:40:45,909
thing look at info - info so I think we

809
00:40:44,769 --> 00:40:49,108
want a similar

810
00:40:45,909 --> 00:40:53,190
that that would in addition to just

811
00:40:49,108 --> 00:40:55,869
printing out the basics of the file

812
00:40:53,190 --> 00:40:57,760
something that would print out all of

813
00:40:55,869 --> 00:41:00,990
the asset erase and stuff like that so

814
00:40:57,760 --> 00:41:05,619
you know let's take a quick gander here

815
00:41:00,989 --> 00:41:08,649
let's go to handmade data and let's use

816
00:41:05,619 --> 00:41:16,838
HJ edit - info to look at you know test

817
00:41:08,650 --> 00:41:20,858
that out no that's pretty good okay my

818
00:41:16,838 --> 00:41:23,380
bad test one done HHA um so this tells

819
00:41:20,858 --> 00:41:25,420
us just that information let's print out

820
00:41:23,380 --> 00:41:28,180
anything that's we could find out from

821
00:41:25,420 --> 00:41:31,480
the header right so let's print out

822
00:41:28,179 --> 00:41:47,769
stuff like the tag count the asset count

823
00:41:31,480 --> 00:41:56,740
right and we could also remember whether

824
00:41:47,769 --> 00:42:02,278
or not it had annotations by maybe just

825
00:41:56,739 --> 00:42:02,278
storing information about that like

826
00:42:06,239 --> 00:42:13,088
something that we could store so we

827
00:42:09,548 --> 00:42:15,389
could store the tag count the asset

828
00:42:13,088 --> 00:42:15,389
count

829
00:42:20,820 --> 00:42:28,200
and then have annotations yes or no

830
00:42:25,010 --> 00:42:31,650
right so then when we load one of these

831
00:42:28,199 --> 00:42:33,719
in here one of these is just not going

832
00:42:31,650 --> 00:42:35,430
to have it so V ones might have it and

833
00:42:33,719 --> 00:42:36,959
we'll set that flag but you know these

834
00:42:35,429 --> 00:42:39,960
never would have it because they just

835
00:42:36,960 --> 00:42:42,720
don't have annotations so this sells us

836
00:42:39,960 --> 00:42:47,280
all right there's 13 assets 25 tags no

837
00:42:42,719 --> 00:42:48,569
annotations it's version zero right and

838
00:42:47,280 --> 00:42:50,190
so then what I want to do is just add

839
00:42:48,570 --> 00:42:59,519
another one of these here which would

840
00:42:50,190 --> 00:43:01,440
say alright let's also have a dump and

841
00:42:59,519 --> 00:43:05,300
the dump would probably print out both

842
00:43:01,440 --> 00:43:05,300
of these things so let's pull this out

843
00:43:08,869 --> 00:43:19,429
into like print header info like so

844
00:43:24,559 --> 00:43:28,489
maybe I'll also do this

845
00:43:36,130 --> 00:44:02,660
it's called source file name right you

846
00:43:57,530 --> 00:44:03,830
know I love that let's do it this way so

847
00:44:02,659 --> 00:44:08,299
that way we can print out one of these

848
00:44:03,829 --> 00:44:11,409
things right and you know get a get a

849
00:44:08,300 --> 00:44:11,410
good groove on there

850
00:44:20,809 --> 00:44:44,960
so then in here I'm just gonna do hey

851
00:44:23,000 --> 00:44:46,730
let's print header like so and then that

852
00:44:44,960 --> 00:44:49,190
way if you do info or dump

853
00:44:46,730 --> 00:44:56,480
you'll get that part first so there's

854
00:44:49,190 --> 00:45:00,679
info there's dump and off we go now

855
00:44:56,480 --> 00:45:08,139
you may be wondering why I started doing

856
00:45:00,679 --> 00:45:11,089
that well if you are familiar with the

857
00:45:08,139 --> 00:45:13,670
bonus pack from handmade from the

858
00:45:11,090 --> 00:45:18,350
handmade fund those who don't know like

859
00:45:13,670 --> 00:45:20,180
if you go to fund here if you contribute

860
00:45:18,349 --> 00:45:21,949
to the handmade fund you get a bunch of

861
00:45:20,179 --> 00:45:24,739
stuff by me like old source code from

862
00:45:21,949 --> 00:45:26,210
old projects one of my really old things

863
00:45:24,739 --> 00:45:28,209
that I wrote but that I've still used

864
00:45:26,210 --> 00:45:31,190
today is this program called tab you

865
00:45:28,210 --> 00:45:33,170
it's just a really it's the smallest

866
00:45:31,190 --> 00:45:38,599
piece of code I mean it's an 8k

867
00:45:33,170 --> 00:45:40,340
executable from 25k of code right but

868
00:45:38,599 --> 00:45:43,969
it's pretty handy and so one of the

869
00:45:40,340 --> 00:45:48,829
things that you can do with it is view a

870
00:45:43,969 --> 00:45:51,319
file that you want to view in a

871
00:45:48,829 --> 00:45:54,049
hierarchical fashion so for example if I

872
00:45:51,320 --> 00:46:00,400
do this and overwrite that test that out

873
00:45:54,050 --> 00:46:04,340
file for example or maybe I can do that

874
00:46:00,400 --> 00:46:08,030
if I was to look at test1dot dump in tab

875
00:46:04,340 --> 00:46:11,300
view you get a little list that you can

876
00:46:08,030 --> 00:46:15,019
you know kind of collapse and stuff

877
00:46:11,300 --> 00:46:17,960
right makes sense and if I hit f5 it'll

878
00:46:15,019 --> 00:46:19,670
refresh the file so what I want to do

879
00:46:17,960 --> 00:46:21,860
now is just kind of lean on the fact

880
00:46:19,670 --> 00:46:25,400
that I have that kind of utility sitting

881
00:46:21,860 --> 00:46:26,480
around to just mean that if I print out

882
00:46:25,400 --> 00:46:28,639
some of these things in hierarchical

883
00:46:26,480 --> 00:46:31,159
order I can also take advantage of any

884
00:46:28,639 --> 00:46:34,670
utility like tab view that can parse

885
00:46:31,159 --> 00:46:37,818
things in based on indentation

886
00:46:34,670 --> 00:46:40,489
right and you don't need to use tab you

887
00:46:37,818 --> 00:46:42,259
could use something else right but since

888
00:46:40,489 --> 00:46:43,730
I had that line around that just seems

889
00:46:42,259 --> 00:46:45,199
like a good thing to do that way I'll

890
00:46:43,730 --> 00:46:49,818
make sure their outputs compliant with

891
00:46:45,199 --> 00:46:52,219
that for easier viewing right okay so in

892
00:46:49,818 --> 00:46:56,889
here when we go through and take a look

893
00:46:52,219 --> 00:47:00,709
at the info dump create stuff and so on

894
00:46:56,889 --> 00:47:08,480
what I want to do here is do like print

895
00:47:00,710 --> 00:47:16,249
asset array like so on or print contents

896
00:47:08,480 --> 00:47:27,369
I want to go ahead and take the contents

897
00:47:16,248 --> 00:47:27,368
as well and print those out

898
00:47:34,500 --> 00:47:41,670
so I'm going to loop over all the assets

899
00:47:37,000 --> 00:47:45,010
here and I'm gonna print them all out

900
00:47:41,670 --> 00:47:48,970
and so much as possible I can also do

901
00:47:45,010 --> 00:47:50,890
the tags separately although we'll

902
00:47:48,969 --> 00:47:57,929
probably want to print those with the

903
00:47:50,889 --> 00:47:57,929
actual theta what we can do both

904
00:47:59,340 --> 00:48:03,760
alright so I'm going to go through the

905
00:48:01,269 --> 00:48:05,650
asset indices here I'm gonna actually

906
00:48:03,760 --> 00:48:18,130
skip 0 because we know that 0 is not a

907
00:48:05,650 --> 00:48:20,139
valid asset so in here we've got our

908
00:48:18,130 --> 00:48:23,170
assets I'm gonna print a particular

909
00:48:20,139 --> 00:48:26,349
asset so this is a set you know number

910
00:48:23,170 --> 00:48:29,079
whatever the number is and then we want

911
00:48:26,349 --> 00:48:30,549
to see we've got information like the

912
00:48:29,079 --> 00:48:31,630
source file base name and the

913
00:48:30,550 --> 00:48:33,550
spritesheet X&amp;Y

914
00:48:31,630 --> 00:48:35,800
and that sort of stuff that's all we've

915
00:48:33,550 --> 00:48:42,100
really got here so I'm gonna use that as

916
00:48:35,800 --> 00:48:45,450
the information I'm gonna use that sort

917
00:48:42,099 --> 00:48:49,989
of as like the name of the asset and

918
00:48:45,449 --> 00:48:53,980
then we'll go from there right so I'm

919
00:48:49,989 --> 00:48:57,099
gonna say let's print the string that's

920
00:48:53,980 --> 00:49:00,969
the source it came from and then let's

921
00:48:57,099 --> 00:49:05,380
print the X the spritesheet X&amp;Y

922
00:49:00,969 --> 00:49:07,000
that it came from that'll be just part

923
00:49:05,380 --> 00:49:11,140
of our way of identifying an asset

924
00:49:07,000 --> 00:49:13,599
loosely speaking so what I need to do

925
00:49:11,139 --> 00:49:18,730
here is get the annotation up for it

926
00:49:13,599 --> 00:49:25,839
I'll just call that a for now or an it's

927
00:49:18,730 --> 00:49:29,889
called an loaded HHA annotation N equals

928
00:49:25,840 --> 00:49:37,000
HHA annotations plus asset index so

929
00:49:29,889 --> 00:49:40,809
that's the asset index there and I can

930
00:49:37,000 --> 00:49:42,219
also grab the HHA asset because we'll

931
00:49:40,809 --> 00:49:44,250
want to print out some data from that as

932
00:49:42,219 --> 00:49:44,250
well

933
00:49:44,460 --> 00:49:53,280
a set equals HHA sets plus I said index

934
00:49:50,480 --> 00:49:55,260
so now that we have those two I can say

935
00:49:53,280 --> 00:49:58,920
first of all all right here's the asset

936
00:49:55,260 --> 00:50:03,089
oops not good asset index and also

937
00:49:58,920 --> 00:50:07,680
here's the annotations I want to know

938
00:50:03,088 --> 00:50:12,599
the source file base name source file

939
00:50:07,679 --> 00:50:16,980
face name dot count and source file base

940
00:50:12,599 --> 00:50:20,460
named data and if I recall correctly

941
00:50:16,980 --> 00:50:24,858
this is actually not because this is a

942
00:50:20,460 --> 00:50:28,108
um M this is like you got to do this

943
00:50:24,858 --> 00:50:31,650
unfortunately right because you need to

944
00:50:28,108 --> 00:50:34,460
actually know what the this has to be 32

945
00:50:31,650 --> 00:50:36,900
bits if it's going to a you write

946
00:50:34,460 --> 00:50:40,199
because we're not printing 64 bit values

947
00:50:36,900 --> 00:50:43,440
there so I'm sorry if it's going to a

948
00:50:40,199 --> 00:50:43,949
width specifier I think maybe that's not

949
00:50:43,440 --> 00:50:46,230
true

950
00:50:43,949 --> 00:50:47,899
maybe that does take a size T I don't

951
00:50:46,230 --> 00:50:50,400
know what it takes

952
00:50:47,900 --> 00:50:54,920
let's see what the compiler says well

953
00:50:50,400 --> 00:51:00,690
we'll see what it does to sprite sheet X

954
00:50:54,920 --> 00:51:02,070
sprite sheet why because I don't know

955
00:51:00,690 --> 00:51:04,769
yeah I don't know what it expects for

956
00:51:02,070 --> 00:51:06,920
that that's a good question I'll find

957
00:51:04,769 --> 00:51:06,920
out

958
00:51:18,630 --> 00:51:26,440
okay so it is an int well I guess

959
00:51:25,630 --> 00:51:28,630
technically it wants

960
00:51:26,440 --> 00:51:32,470
literally an int so we'll give it

961
00:51:28,630 --> 00:51:35,440
literally in it so that's how that

962
00:51:32,469 --> 00:51:37,750
printout would work and now let's try to

963
00:51:35,440 --> 00:51:39,280
make that actually happen so when we

964
00:51:37,750 --> 00:51:41,619
read in one of these files you can see

965
00:51:39,280 --> 00:51:44,470
us kind of sort of maybe a little bit

966
00:51:41,619 --> 00:51:46,179
reading in the assets here like so

967
00:51:44,469 --> 00:51:48,369
the problem that we have is this is

968
00:51:46,179 --> 00:51:51,519
actually not correct anymore because

969
00:51:48,369 --> 00:51:55,630
these are HHS at these zeros that

970
00:51:51,519 --> 00:51:57,159
they're coming from so in here where we

971
00:51:55,630 --> 00:52:01,780
load them the source assets it's

972
00:51:57,159 --> 00:52:04,149
actually an asset v-0 not an asset HHA

973
00:52:01,780 --> 00:52:07,690
regular and so we need to up convert

974
00:52:04,150 --> 00:52:11,920
right so when we actually live this here

975
00:52:07,690 --> 00:52:14,200
and we say this right here this line

976
00:52:11,920 --> 00:52:16,720
should fail now it should say like hey

977
00:52:14,199 --> 00:52:18,730
that's not going to cut it and so what

978
00:52:16,719 --> 00:52:22,629
we need to do now is actually assign the

979
00:52:18,730 --> 00:52:27,219
individual elements of the HHA asset in

980
00:52:22,630 --> 00:52:29,079
a way that will actually work right so

981
00:52:27,219 --> 00:52:29,769
now let's do that it's it's harder than

982
00:52:29,079 --> 00:52:31,869
you might think

983
00:52:29,769 --> 00:52:33,219
some of it's pretty straightforward but

984
00:52:31,869 --> 00:52:35,319
it's harder than you might think right

985
00:52:33,219 --> 00:52:37,889
so we'll see what the EES will do the

986
00:52:35,320 --> 00:52:37,890
easy ones first

987
00:52:38,070 --> 00:52:50,890
JJ asset 0 source assets equals these

988
00:52:46,150 --> 00:52:55,720
horse assets ok so we've got the

989
00:52:50,889 --> 00:52:59,529
distance at data offsets and we've got

990
00:52:55,719 --> 00:53:02,379
the dista set data size and the discus

991
00:52:59,530 --> 00:53:05,110
at first tag index the desktop set one

992
00:53:02,380 --> 00:53:08,050
pass those tag index and the desk a set

993
00:53:05,110 --> 00:53:14,079
type and then we have to do like the

994
00:53:08,050 --> 00:53:17,340
bitmap parts or the sound parts or the

995
00:53:14,079 --> 00:53:21,610
fonts part right so we've got to do

996
00:53:17,340 --> 00:53:24,550
something alright so the first thing I'm

997
00:53:21,610 --> 00:53:26,720
going to do is say that desk asset

998
00:53:24,550 --> 00:53:29,300
equals null asset

999
00:53:26,719 --> 00:53:31,459
clear anything that we don't assign I'm

1000
00:53:29,300 --> 00:53:36,920
then gonna take the parts we actually do

1001
00:53:31,460 --> 00:53:39,889
now so for example the source asset has

1002
00:53:36,920 --> 00:53:48,710
the correct offset in it so that's good

1003
00:53:39,889 --> 00:53:52,759
and I feel like the tags so we are not

1004
00:53:48,710 --> 00:53:53,750
gonna add any tags anymore we were going

1005
00:53:52,760 --> 00:54:03,109
to but we're not anymore

1006
00:53:53,750 --> 00:54:06,199
so the tags will be correct as well and

1007
00:54:03,108 --> 00:54:09,559
so the things we don't know are the data

1008
00:54:06,199 --> 00:54:12,409
type size and the type and then here we

1009
00:54:09,559 --> 00:54:14,630
need to do a check based on the type we

1010
00:54:12,409 --> 00:54:20,420
need to do one of these so we need to do

1011
00:54:14,630 --> 00:54:21,920
a switch on the data type here and this

1012
00:54:20,420 --> 00:54:23,930
is going to be an invalid default case

1013
00:54:21,920 --> 00:54:25,519
because we should never hit in a v-0

1014
00:54:23,929 --> 00:54:27,259
file something that like this that we

1015
00:54:25,519 --> 00:54:29,650
don't understand although I could just

1016
00:54:27,260 --> 00:54:29,650
print it out

1017
00:54:40,309 --> 00:54:52,159
right so we could actually we could

1018
00:54:43,309 --> 00:54:53,659
actually be something like that now I

1019
00:54:52,159 --> 00:54:55,759
don't really understand why the source

1020
00:54:53,659 --> 00:54:57,829
asset index and the desk I set index

1021
00:54:55,760 --> 00:54:58,790
aren't the same index does someone want

1022
00:54:57,829 --> 00:55:03,469
explain that to me

1023
00:54:58,789 --> 00:55:07,820
oh right because we're common that we're

1024
00:55:03,469 --> 00:55:09,529
doing the unpack right so we could leave

1025
00:55:07,820 --> 00:55:14,980
them to be that we could leave them as

1026
00:55:09,530 --> 00:55:19,730
the same indices but we don't have to I

1027
00:55:14,980 --> 00:55:21,619
feel like you just would though I feel

1028
00:55:19,730 --> 00:55:24,829
like we don't really need to do this

1029
00:55:21,619 --> 00:55:27,109
right cuz source asset index is just a

1030
00:55:24,829 --> 00:55:28,969
set index here so I'm just gonna say

1031
00:55:27,110 --> 00:55:31,220
this is asset mix we're not adding any

1032
00:55:28,969 --> 00:55:38,029
asset of the C's here so that should

1033
00:55:31,219 --> 00:55:52,699
just be asset index right and that's

1034
00:55:38,030 --> 00:55:56,000
fine that all looks good to me okay

1035
00:55:52,699 --> 00:56:05,269
so in here what I want to do is say hhas

1036
00:55:56,000 --> 00:56:07,909
oops a asset bitmap and all I'm doing

1037
00:56:05,269 --> 00:56:10,869
here is just assigning the portion of it

1038
00:56:07,909 --> 00:56:10,869
that I care about

1039
00:56:21,820 --> 00:56:27,349
and so depending on which one of this it

1040
00:56:25,429 --> 00:56:29,449
was we just take that data and that data

1041
00:56:27,349 --> 00:56:33,920
is correct we don't need to update that

1042
00:56:29,449 --> 00:56:35,659
data at all right we don't have any

1043
00:56:33,920 --> 00:56:37,099
annotations to speak of so we just have

1044
00:56:35,659 --> 00:56:39,559
to give it the default annotation that's

1045
00:56:37,099 --> 00:56:41,059
all we've got and then so the two things

1046
00:56:39,559 --> 00:56:42,650
we really need to do here is figure out

1047
00:56:41,059 --> 00:56:44,599
what the data size is going to be and

1048
00:56:42,650 --> 00:56:47,210
then figure out what the type is right

1049
00:56:44,599 --> 00:56:50,510
so the data size actually is something

1050
00:56:47,210 --> 00:56:52,730
that we have to determine sort of like

1051
00:56:50,510 --> 00:56:53,900
after the fact right like it's something

1052
00:56:52,730 --> 00:56:58,480
that actually has to be determined like

1053
00:56:53,900 --> 00:57:01,970
kind of in line oops with each of these

1054
00:56:58,480 --> 00:57:03,980
so once we actually snap the value then

1055
00:57:01,969 --> 00:57:08,629
we can figure out how big the the data

1056
00:57:03,980 --> 00:57:11,990
size is often you know in data land

1057
00:57:08,630 --> 00:57:14,510
there and so I think if we take a look

1058
00:57:11,989 --> 00:57:18,649
at the asset loading we should be able

1059
00:57:14,510 --> 00:57:20,839
to figure out how that was going I feel

1060
00:57:18,650 --> 00:57:22,608
like that we should have had a thing

1061
00:57:20,838 --> 00:57:30,710
that said how big it was like you can

1062
00:57:22,608 --> 00:57:32,269
kind of see here yeah I mean

1063
00:57:30,710 --> 00:57:34,760
unfortunately looks like we just kind of

1064
00:57:32,269 --> 00:57:37,699
we kind of winged it right like each

1065
00:57:34,760 --> 00:57:39,109
time here we have so you know one of the

1066
00:57:37,699 --> 00:57:40,549
nice things about doing this conversion

1067
00:57:39,108 --> 00:57:42,199
is going to be we wouldn't have to do

1068
00:57:40,550 --> 00:57:47,830
this anymore like the loader would just

1069
00:57:42,199 --> 00:57:50,929
know how big it actually was going to be

1070
00:57:47,829 --> 00:57:54,239
so that's kind of nice as well and

1071
00:57:50,929 --> 00:57:54,239
[Music]

1072
00:57:55,510 --> 00:57:59,870
yeah kind of feel like that's a nice you

1073
00:57:58,489 --> 00:58:05,619
know this I feel like this stuff could

1074
00:57:59,869 --> 00:58:05,619
get simplified quite a bit right

1075
00:58:15,440 --> 00:58:20,000
because you can see this stuff is a

1076
00:58:17,340 --> 00:58:22,829
little bit annoying right it's like it's

1077
00:58:20,000 --> 00:58:24,750
it's fairly complicated to get that size

1078
00:58:22,829 --> 00:58:27,090
right you can see why I don't want that

1079
00:58:24,750 --> 00:58:28,650
anymore because even though it's fine to

1080
00:58:27,090 --> 00:58:30,780
have this happening in the code here

1081
00:58:28,650 --> 00:58:33,320
like a simple utility that needs to like

1082
00:58:30,780 --> 00:58:36,690
update these things shouldn't have to

1083
00:58:33,320 --> 00:58:38,309
deal with all this crap right like it

1084
00:58:36,690 --> 00:58:39,630
should just go like all right look I

1085
00:58:38,309 --> 00:58:41,849
don't know what font sorry I don't

1086
00:58:39,630 --> 00:58:43,769
process them but I just want to move

1087
00:58:41,849 --> 00:58:45,980
them from one file to another or I'm

1088
00:58:43,769 --> 00:58:49,079
updating this farm it's gonna copy them

1089
00:58:45,980 --> 00:58:50,730
you want to not get that wrong and if it

1090
00:58:49,079 --> 00:58:52,340
everybody had to always do all these

1091
00:58:50,730 --> 00:58:55,230
computations based on all this stuff

1092
00:58:52,340 --> 00:59:00,390
you're totally gonna get that wrong you

1093
00:58:55,230 --> 00:59:04,590
know sometimes right so I feel like we

1094
00:59:00,389 --> 00:59:06,719
really want that part to be more

1095
00:59:04,590 --> 00:59:11,269
sensible right so I like the fact that

1096
00:59:06,719 --> 00:59:16,799
we're gonna be pulling that out so yeah

1097
00:59:11,269 --> 00:59:19,489
anyway like basing this on we've got

1098
00:59:16,800 --> 00:59:19,490
here

1099
00:59:28,449 --> 00:59:32,289
all the stuff seems pretty

1100
00:59:29,858 --> 00:59:34,598
straightforward so I'm gonna go ahead

1101
00:59:32,289 --> 00:59:36,849
and just do it wrote here and then we

1102
00:59:34,599 --> 00:59:42,160
may merge these into two into a place

1103
00:59:36,849 --> 00:59:43,480
where we could keep it consolidated in a

1104
00:59:42,159 --> 00:59:44,618
single file that gives us the

1105
00:59:43,480 --> 00:59:48,639
information that we're talking about

1106
00:59:44,619 --> 00:59:52,240
here right all right so if we said data

1107
00:59:48,639 --> 00:59:56,578
size for the bitmap I'm gonna actually

1108
00:59:52,239 --> 01:00:08,439
go ahead and say a church a bitmap

1109
00:59:56,579 --> 01:00:11,680
bitmap pulls bitmap so that's the data

1110
01:00:08,440 --> 01:00:21,460
size of the bitmap the sound might do

1111
01:00:11,679 --> 01:00:25,179
the same thing and then in here we can

1112
01:00:21,460 --> 01:00:27,670
just say you know star sound and then

1113
01:00:25,179 --> 01:00:31,088
the data size for the sound is handled

1114
01:00:27,670 --> 01:00:34,630
similarly right it's like hey whatever

1115
01:00:31,088 --> 01:00:36,489
the sample size is which is always that

1116
01:00:34,630 --> 01:00:39,338
apparently we don't have multiple sample

1117
01:00:36,489 --> 01:00:41,578
sizes and then we've got like a sample

1118
01:00:39,338 --> 01:00:41,578
count

1119
01:00:47,699 --> 01:00:52,919
and a channel count so that's how many

1120
01:00:50,940 --> 01:00:56,009
of those were gonna have and there so

1121
01:00:52,920 --> 01:01:00,979
that's all fine then we've got the data

1122
01:00:56,009 --> 01:01:00,978
assets aunt part of things

1123
01:01:08,690 --> 01:01:16,048
oops found apparently and this again we

1124
01:01:13,798 --> 01:01:19,170
got to do that computation up it's nasty

1125
01:01:16,048 --> 01:01:22,588
right it's kind of ridiculous this is it

1126
01:01:19,170 --> 01:01:27,960
it's it's actually this this here that

1127
01:01:22,588 --> 01:01:31,078
you know two computations worth so we've

1128
01:01:27,960 --> 01:01:33,858
got the font lift count squared for the

1129
01:01:31,079 --> 01:01:37,440
horizontal advance table we've got the

1130
01:01:33,858 --> 01:01:41,998
glyph blue glyphs themselves and then we

1131
01:01:37,440 --> 01:01:42,358
have the Unicode map and then we off we

1132
01:01:41,998 --> 01:01:48,748
go

1133
01:01:42,358 --> 01:01:51,989
right so it's actually this and there we

1134
01:01:48,748 --> 01:01:54,899
go so you can see why I want to put this

1135
01:01:51,989 --> 01:01:57,599
in the file now because now this stuff

1136
01:01:54,900 --> 01:02:01,889
if it changes utilities don't have to

1137
01:01:57,599 --> 01:02:05,999
know right it can get you know sort of

1138
01:02:01,889 --> 01:02:08,129
fussy if it wants to but it won't affect

1139
01:02:05,998 --> 01:02:10,738
anyone who doesn't actually have to

1140
01:02:08,130 --> 01:02:13,380
understand the data they can just treat

1141
01:02:10,739 --> 01:02:20,929
it as a blind block and just go from

1142
01:02:13,380 --> 01:02:23,219
there so I think this is all good here

1143
01:02:20,929 --> 01:02:26,548
looks pretty reasonable so we're just

1144
01:02:23,219 --> 01:02:29,278
down to type and type is a bit nasty the

1145
01:02:26,548 --> 01:02:32,400
reason type is a bit nasty is because in

1146
01:02:29,278 --> 01:02:35,338
our old sort of our old school like

1147
01:02:32,400 --> 01:02:38,130
here's the stuff that we're storing you

1148
01:02:35,338 --> 01:02:40,710
were just supposed to know right which

1149
01:02:38,130 --> 01:02:42,719
one's these were so what I really need

1150
01:02:40,710 --> 01:02:46,798
is a cracking table like I need a table

1151
01:02:42,719 --> 01:02:51,989
that will translate these and so what I

1152
01:02:46,798 --> 01:02:56,489
effectively need here is like hey let's

1153
01:02:51,989 --> 01:03:01,068
find out what the HHA asset type is I

1154
01:02:56,489 --> 01:03:01,068
can put in here I suppose

1155
01:03:01,889 --> 01:03:10,299
so the what's the HHA asset type so like

1156
01:03:05,349 --> 01:03:12,730
type from ID v0 or something like that

1157
01:03:10,300 --> 01:03:15,130
right and then what i need to do is say

1158
01:03:12,730 --> 01:03:19,599
hey for all of the stuff that wasn't

1159
01:03:15,130 --> 01:03:24,760
here what was it right like what

1160
01:03:19,599 --> 01:03:27,639
actually was it and so looking through

1161
01:03:24,760 --> 01:03:33,600
all of these we've got well none was

1162
01:03:27,639 --> 01:03:36,940
none right so this was an HHA asset none

1163
01:03:33,599 --> 01:03:46,150
the bitmaps are all here right so this

1164
01:03:36,940 --> 01:03:48,220
is HHA asset pit map bitmap bitmap

1165
01:03:46,150 --> 01:03:50,829
apparently there's no stairwell bitmap

1166
01:03:48,219 --> 01:03:55,659
bitmap bitmap bitmap bitmap bitmap

1167
01:03:50,829 --> 01:03:58,779
bitmap and then we've got font and I

1168
01:03:55,659 --> 01:04:00,969
believe bitmap again right

1169
01:03:58,780 --> 01:04:04,680
I believe that's what these are saying

1170
01:04:00,969 --> 01:04:04,679
then we've got sounds

1171
01:04:15,739 --> 01:04:21,109
like so and then we're back to bitmaps

1172
01:04:27,349 --> 01:04:33,118
right so we've got an array that would

1173
01:04:30,389 --> 01:04:35,519
translate these for us now we have the

1174
01:04:33,119 --> 01:04:39,329
opportunity here to do something a

1175
01:04:35,519 --> 01:04:42,329
little bit fancier if we wanted to and

1176
01:04:39,329 --> 01:04:44,699
maybe we want to so what we could do is

1177
01:04:42,329 --> 01:04:47,069
say well in here where we've got this

1178
01:04:44,699 --> 01:04:50,460
like asset name and we don't know what

1179
01:04:47,070 --> 01:04:52,590
the asset name is in this case we could

1180
01:04:50,460 --> 01:04:54,840
say well we sort of know maybe what the

1181
01:04:52,590 --> 01:04:57,450
asset name is if we were to make this

1182
01:04:54,840 --> 01:05:11,960
more of a compound translator of some

1183
01:04:57,449 --> 01:05:14,939
kind we could do this right and actually

1184
01:05:11,960 --> 01:05:17,010
when we do this trance up translation we

1185
01:05:14,940 --> 01:05:20,880
can actually tag these oh that's ones

1186
01:05:17,010 --> 01:05:31,410
not included we can actually tag these

1187
01:05:20,880 --> 01:05:33,119
with what they actually were and again

1188
01:05:31,409 --> 01:05:35,368
you could kind of see why this wasn't a

1189
01:05:33,119 --> 01:05:39,358
great system right in terms of

1190
01:05:35,369 --> 01:05:40,680
flexibility future flexibility which is

1191
01:05:39,358 --> 01:05:41,549
not what's designed for us so I have no

1192
01:05:40,679 --> 01:05:43,710
problem with that but I'm just saying

1193
01:05:41,550 --> 01:05:46,800
it's why I wanted to change it is

1194
01:05:43,710 --> 01:05:48,179
because again you want these if you're

1195
01:05:46,800 --> 01:05:50,280
just using it as a date back in

1196
01:05:48,179 --> 01:05:51,480
datastore it's fine if you're trying to

1197
01:05:50,280 --> 01:05:53,430
do something that would allow like

1198
01:05:51,480 --> 01:05:55,679
modding or things like that you need

1199
01:05:53,429 --> 01:05:57,679
ways of being more flexible about saying

1200
01:05:55,679 --> 01:06:00,659
what things are and where they came from

1201
01:05:57,679 --> 01:06:02,639
because that information is just makes

1202
01:06:00,659 --> 01:06:05,909
it a lot easier to munge the files

1203
01:06:02,639 --> 01:06:08,819
around right and interoperate between

1204
01:06:05,909 --> 01:06:10,710
different versions of things which once

1205
01:06:08,820 --> 01:06:14,160
you start to get a lot of that in the

1206
01:06:10,710 --> 01:06:16,380
mix you just want support you want to

1207
01:06:14,159 --> 01:06:20,879
make it easy right and so that's what a

1208
01:06:16,380 --> 01:06:22,380
lot of this the difference there is none

1209
01:06:20,880 --> 01:06:24,869
of the stuff we had originally was

1210
01:06:22,380 --> 01:06:25,500
problem with the problem really but it

1211
01:06:24,869 --> 01:06:28,200
just isn't

1212
01:06:25,500 --> 01:06:32,340
super flexible for doing something other

1213
01:06:28,199 --> 01:06:38,939
than just shipping the game as it is uh

1214
01:06:32,340 --> 01:06:44,519
so here's a little type from ITV zero

1215
01:06:38,940 --> 01:06:46,980
translation table here's the type here's

1216
01:06:44,519 --> 01:06:50,239
the name and so then what we can do is

1217
01:06:46,980 --> 01:06:54,409
we can use this as a table to crack open

1218
01:06:50,239 --> 01:06:58,199
the sort of secret otherwise

1219
01:06:54,409 --> 01:07:01,109
impenetrable asset type fields that we

1220
01:06:58,199 --> 01:07:03,559
get in here right so we can say like oh

1221
01:07:01,110 --> 01:07:03,559
okay

1222
01:07:03,800 --> 01:07:13,140
we now have a type in foam and that type

1223
01:07:08,429 --> 01:07:18,239
info will point to the first one of

1224
01:07:13,139 --> 01:07:21,059
these unless the asset type that we

1225
01:07:18,239 --> 01:07:24,509
received from the file which has the

1226
01:07:21,059 --> 01:07:27,690
type ID in it right here right if that

1227
01:07:24,510 --> 01:07:29,360
is valid so it's less than the size of

1228
01:07:27,690 --> 01:07:31,980
this thing

1229
01:07:29,360 --> 01:07:38,970
so we understand that the type is if it

1230
01:07:31,980 --> 01:07:43,010
is then let's grab it out and then we

1231
01:07:38,969 --> 01:07:48,000
basically say let's take a look at the

1232
01:07:43,010 --> 01:07:52,260
at the the type IDs Tran whatever the

1233
01:07:48,000 --> 01:07:56,460
translator was so we go down into the

1234
01:07:52,260 --> 01:07:59,670
type info and we can now do better for

1235
01:07:56,460 --> 01:08:02,400
the default annotation right this part

1236
01:07:59,670 --> 01:08:04,320
here we can actually make our default

1237
01:08:02,400 --> 01:08:10,860
annotation have a little more in thin

1238
01:08:04,320 --> 01:08:13,440
that so the asset name could actually be

1239
01:08:10,860 --> 01:08:17,310
something that comes from a buffer here

1240
01:08:13,440 --> 01:08:18,239
so what I can do is you know make a well

1241
01:08:17,310 --> 01:08:20,339
I guess doesn't need to come from a

1242
01:08:18,239 --> 01:08:26,369
buffer I guess it can just be that

1243
01:08:20,338 --> 01:08:29,269
string exactly that string so whatever

1244
01:08:26,369 --> 01:08:29,269
this is here

1245
01:08:33,970 --> 01:08:39,440
is the name that we're going to use and

1246
01:08:37,250 --> 01:08:45,079
furthermore we now have the type as well

1247
01:08:39,439 --> 01:08:48,979
so the type info can give us that

1248
01:08:45,079 --> 01:08:53,559
information so now we have a pretty

1249
01:08:48,979 --> 01:08:55,609
fully featured I think import for that

1250
01:08:53,560 --> 01:08:58,820
and now we just have to go through and

1251
01:08:55,609 --> 01:09:01,460
debug it's looking through here what are

1252
01:08:58,819 --> 01:09:06,069
we doing here one past last asset index

1253
01:09:01,460 --> 01:09:06,069
that's supposed to be last tag index

1254
01:09:12,100 --> 01:09:28,819
that is also supposed to be that and

1255
01:09:15,890 --> 01:09:33,798
what else we got okay this is a string

1256
01:09:28,819 --> 01:09:35,080
right so this has to do a rap Z and off

1257
01:09:33,798 --> 01:09:38,448
we go

1258
01:09:35,079 --> 01:09:40,488
okay so now we got to debug this like we

1259
01:09:38,448 --> 01:09:42,619
don't know if it's going to work I did

1260
01:09:40,488 --> 01:09:44,718
the dump but we don't know if it'll

1261
01:09:42,619 --> 01:09:47,809
actually do anything here's what the

1262
01:09:44,719 --> 01:09:51,380
dump actually came out with here's each

1263
01:09:47,810 --> 01:09:54,140
of the things that was in the file right

1264
01:09:51,380 --> 01:09:55,819
and so maybe it loaded correctly maybe

1265
01:09:54,140 --> 01:09:57,590
didn't load quickly I have no idea the

1266
01:09:55,819 --> 01:09:59,238
only way we can really find out here is

1267
01:09:57,590 --> 01:10:02,539
let's go ahead and start expanding on

1268
01:09:59,238 --> 01:10:04,689
these so make our make our dump print

1269
01:10:02,539 --> 01:10:09,198
out the information that's in them and

1270
01:10:04,689 --> 01:10:12,948
see if they're accurate right so in here

1271
01:10:09,198 --> 01:10:15,229
we've got our print stuff let's expand

1272
01:10:12,948 --> 01:10:19,460
on it first of all let's print out the

1273
01:10:15,229 --> 01:10:23,209
tags tags actually we also will want a

1274
01:10:19,460 --> 01:10:26,300
cracking table for those are these

1275
01:10:23,210 --> 01:10:27,880
values right here so we'll go ahead and

1276
01:10:26,300 --> 01:10:33,760
make a little cracking table for those

1277
01:10:27,880 --> 01:10:33,760
this just needs a name

1278
01:10:43,319 --> 01:10:51,670
and again you can see why

1279
01:10:46,109 --> 01:10:52,630
metaprogramming is so useful this is the

1280
01:10:51,670 --> 01:10:55,690
kind of thing a partner should never

1281
01:10:52,630 --> 01:10:57,670
have to do it's obvious that these are

1282
01:10:55,689 --> 01:10:58,419
the same thing and the language to

1283
01:10:57,670 --> 01:11:02,980
support them

1284
01:10:58,420 --> 01:11:04,599
C++ doesn't I mean I won't belabor the

1285
01:11:02,979 --> 01:11:05,649
point I've said so many things about the

1286
01:11:04,599 --> 01:11:06,940
sleep of a standard committee and how

1287
01:11:05,649 --> 01:11:10,719
bad they are at everything just

1288
01:11:06,939 --> 01:11:11,948
reference that this is just obvious

1289
01:11:10,719 --> 01:11:16,750
stuff that every programming language

1290
01:11:11,948 --> 01:11:18,519
should have had since like 1980 and how

1291
01:11:16,750 --> 01:11:20,559
it doesn't I don't know but it doesn't

1292
01:11:18,520 --> 01:11:24,309
so here we are typing stuff manually

1293
01:11:20,559 --> 01:11:25,570
still um even the most basic meta

1294
01:11:24,309 --> 01:11:28,719
programming features would solve that

1295
01:11:25,569 --> 01:11:31,238
for you right so anyway we want to get

1296
01:11:28,719 --> 01:11:32,618
the tag name out and so that we can

1297
01:11:31,238 --> 01:11:34,000
print that let's just print out the tags

1298
01:11:32,618 --> 01:11:41,589
real quickly here that's really easy for

1299
01:11:34,000 --> 01:11:49,539
us to do we'll just say tag index like

1300
01:11:41,590 --> 01:11:52,139
so load out the tag and then I will

1301
01:11:49,539 --> 01:11:52,139
print it out

1302
01:12:02,118 --> 01:12:07,039
and so all we've got here is effectively

1303
01:12:04,310 --> 01:12:08,510
the tag index the name of the tag and I

1304
01:12:07,039 --> 01:12:09,859
guess we don't need a string printer for

1305
01:12:08,510 --> 01:12:13,340
that because we're actually only getting

1306
01:12:09,859 --> 01:12:18,948
it from that array it's the tag name and

1307
01:12:13,340 --> 01:12:20,150
then the tag value itself now we don't

1308
01:12:18,948 --> 01:12:24,559
want to just print out the tag name

1309
01:12:20,149 --> 01:12:26,000
directly what we want to do is first

1310
01:12:24,560 --> 01:12:27,349
test to make sure that it's valid

1311
01:12:26,000 --> 01:12:28,760
because again remember these files can

1312
01:12:27,349 --> 01:12:30,739
get corrupted or someone could write one

1313
01:12:28,760 --> 01:12:33,020
wrong and we don't want to just crash on

1314
01:12:30,738 --> 01:12:36,229
them and have them not know so we should

1315
01:12:33,020 --> 01:12:41,960
at least say look if the tag ID is less

1316
01:12:36,229 --> 01:12:47,238
than the array count of that array we've

1317
01:12:41,960 --> 01:12:51,429
got then we'll do it right but only then

1318
01:12:47,238 --> 01:12:53,718
so we'll say car tag name equals unknown

1319
01:12:51,429 --> 01:13:00,770
and then we'll just say okay assuming

1320
01:12:53,719 --> 01:13:04,880
you could get at the tag name equals one

1321
01:13:00,770 --> 01:13:09,920
that's referenced by this okay so now if

1322
01:13:04,880 --> 01:13:14,359
I run this again there we go what we

1323
01:13:09,920 --> 01:13:16,609
should be able to see here is okay not

1324
01:13:14,359 --> 01:13:25,000
particularly good there those are all

1325
01:13:16,609 --> 01:13:28,988
unknown good yeah no totally good

1326
01:13:25,000 --> 01:13:32,929
absolutely what I wanted fantastic

1327
01:13:28,988 --> 01:13:35,468
do we just not load tags we just don't

1328
01:13:32,929 --> 01:13:35,469
load tags

1329
01:13:39,409 --> 01:14:05,130
so really we just need to copy the tags

1330
01:13:42,270 --> 01:14:07,770
here so let's just do that these are

1331
01:14:05,130 --> 01:14:12,810
always the same at the moment so the

1332
01:14:07,770 --> 01:14:15,300
tags are just the tags we don't need to

1333
01:14:12,810 --> 01:14:17,550
do anything to them we might in the

1334
01:14:15,300 --> 01:14:20,100
future if we expand what a tag is or how

1335
01:14:17,550 --> 01:14:20,989
it works but at the moment we wouldn't

1336
01:14:20,100 --> 01:14:24,390
have to do that

1337
01:14:20,989 --> 01:14:28,710
so let's see here

1338
01:14:24,390 --> 01:14:34,110
here's a bunch of tags here's some stuff

1339
01:14:28,710 --> 01:14:38,119
that doesn't look right there's 25 tags

1340
01:14:34,109 --> 01:14:38,119
and we don't know what any of these are

1341
01:14:41,300 --> 01:14:46,880
those all seem good those don't

1342
01:14:50,420 --> 01:14:59,899
ah that's because we were gonna expand

1343
01:14:58,369 --> 01:15:06,829
the number of tags and we're not anymore

1344
01:14:59,899 --> 01:15:08,839
so that goes away now we're good okay

1345
01:15:06,829 --> 01:15:10,909
so now we've got our tags we've got our

1346
01:15:08,840 --> 01:15:12,619
assets now let's go see if our assets

1347
01:15:10,909 --> 01:15:25,359
are correct also we can try a different

1348
01:15:12,619 --> 01:15:25,359
file and see how that works

1349
01:15:29,880 --> 01:15:44,069
this claims it has no tags can that

1350
01:15:35,729 --> 01:15:46,908
really be true maybe it is true don't

1351
01:15:44,069 --> 01:15:46,908
remember well enough

1352
01:16:00,060 --> 01:16:03,170
so I don't

1353
01:16:09,658 --> 01:16:13,038
it seems kind of

1354
01:16:13,619 --> 01:16:24,510
not possible maybe it is that there's no

1355
01:16:18,460 --> 01:16:24,510
tax its triumph intro art

1356
01:16:35,590 --> 01:16:38,920
I mean it looks like we're working

1357
01:16:37,060 --> 01:16:40,270
properly so maybe those just don't have

1358
01:16:38,920 --> 01:16:42,069
any tags in them because they were they

1359
01:16:40,270 --> 01:16:43,420
just weren't differentiated in any

1360
01:16:42,069 --> 01:16:44,859
particular way they were just like here

1361
01:16:43,420 --> 01:16:55,600
here's a rock it's got no tags it's just

1362
01:16:44,859 --> 01:16:56,229
a rock you know all right well that's

1363
01:16:55,600 --> 01:16:59,160
fine with me

1364
01:16:56,229 --> 01:17:07,179
what is structure to art bitmap Oh

1365
01:16:59,159 --> 01:17:09,550
lovely so I'm just gonna go ahead and

1366
01:17:07,180 --> 01:17:12,640
expand on this and I'm gonna make it

1367
01:17:09,550 --> 01:17:14,170
print out a bunch more stuff right so

1368
01:17:12,640 --> 01:17:15,700
that we can have a better picture of

1369
01:17:14,170 --> 01:17:19,420
what's going on and then I think we're

1370
01:17:15,699 --> 01:17:21,630
more or less done with the reading we

1371
01:17:19,420 --> 01:17:23,590
just need the writing version right

1372
01:17:21,630 --> 01:17:25,840
which shouldn't be too complicated

1373
01:17:23,590 --> 01:17:28,449
because most of the hard work we already

1374
01:17:25,840 --> 01:17:30,430
did like figuring out the sizes of stuff

1375
01:17:28,449 --> 01:17:32,829
so now it's just like a copy it just

1376
01:17:30,430 --> 01:17:35,039
like grabbed and copy so that's kind of

1377
01:17:32,829 --> 01:17:37,329
nice right

1378
01:17:35,039 --> 01:17:39,130
all right so coming through here what we

1379
01:17:37,329 --> 01:17:41,470
want to do now is expand on the asset

1380
01:17:39,130 --> 01:17:43,420
information that we have so what I would

1381
01:17:41,470 --> 01:17:46,840
like to do is take a look at file

1382
01:17:43,420 --> 01:17:50,350
formats there and I'd like to go through

1383
01:17:46,840 --> 01:17:53,289
the file format and print out everything

1384
01:17:50,350 --> 01:17:57,850
that we have right so I want to print

1385
01:17:53,289 --> 01:18:01,180
out all of this stuff right so I want to

1386
01:17:57,850 --> 01:18:05,560
print out all of that and then I want to

1387
01:18:01,180 --> 01:18:07,659
do a switch on the type and then for

1388
01:18:05,560 --> 01:18:09,190
each one of these things depending on

1389
01:18:07,659 --> 01:18:14,609
which one it is I want to print out the

1390
01:18:09,189 --> 01:18:14,609
rest of it right so I want to do like I

1391
01:18:16,050 --> 01:18:30,190
want to print out those if it's a sound

1392
01:18:21,880 --> 01:18:37,260
I want to print out those and if it's a

1393
01:18:30,189 --> 01:18:37,259
font I want to print out these

1394
01:18:38,350 --> 01:18:44,750
and then for each individual asset I

1395
01:18:42,500 --> 01:18:46,340
will print these common ones first so

1396
01:18:44,750 --> 01:18:48,380
that we just know what those are and

1397
01:18:46,340 --> 01:18:51,409
I'll print the tag array separately like

1398
01:18:48,380 --> 01:18:51,980
so it's like hey here's the tags that go

1399
01:18:51,409 --> 01:18:54,500
with it

1400
01:18:51,979 --> 01:18:58,009
so in here you know it's just like

1401
01:18:54,500 --> 01:19:01,939
whatever the asset type was that's what

1402
01:18:58,010 --> 01:19:03,739
we'll we're going for here and if it's a

1403
01:19:01,939 --> 01:19:04,909
thief if it's some other kind we just

1404
01:19:03,739 --> 01:19:06,409
don't print out any extra day it like if

1405
01:19:04,909 --> 01:19:10,760
we don't know the type we just don't

1406
01:19:06,409 --> 01:19:14,949
print out the information right and what

1407
01:19:10,760 --> 01:19:14,949
I can do here too is I can also say like

1408
01:19:17,770 --> 01:19:21,580
you made me do it like this

1409
01:19:40,390 --> 01:19:47,450
so if it doesn't know the type we'll

1410
01:19:42,770 --> 01:19:48,890
just say like hey man it's this type I

1411
01:19:47,449 --> 01:19:50,989
don't know how to print that out but

1412
01:19:48,890 --> 01:20:08,210
everybody else can print out the actual

1413
01:19:50,989 --> 01:20:14,449
like thing that it is right and so then

1414
01:20:08,210 --> 01:20:17,779
oops there's just not enough data here

1415
01:20:14,449 --> 01:20:21,050
to really worry about making it be

1416
01:20:17,779 --> 01:20:23,869
indented I don't think so what I'll

1417
01:20:21,050 --> 01:20:33,079
probably do is I'll just consolidate

1418
01:20:23,869 --> 01:20:35,229
this and say it's like you know let's do

1419
01:20:33,079 --> 01:20:35,229
that

1420
01:20:44,429 --> 01:20:49,489
and then I'll just print out the hotspot

1421
01:20:56,270 --> 01:21:13,130
or maybe I'll just say alignment right

1422
01:21:08,550 --> 01:21:13,130
so something pretty simple like this I

1423
01:21:13,340 --> 01:21:18,360
think that's all we really need to do

1424
01:21:15,539 --> 01:21:20,869
there and so I'll just do a nature tape

1425
01:21:18,359 --> 01:21:35,460
bitmap here just to make it easier to

1426
01:21:20,869 --> 01:21:37,170
print it out save the sound this can be

1427
01:21:35,460 --> 01:21:42,420
the same and then it's got a chain mode

1428
01:21:37,170 --> 01:21:47,760
so it can be like whatever the sample

1429
01:21:42,420 --> 01:21:50,550
count was and the channel count and then

1430
01:21:47,760 --> 01:21:53,280
the chain value we can switch on and see

1431
01:21:50,550 --> 01:21:59,220
if we know what it is and if we don't

1432
01:21:53,279 --> 01:22:01,319
know what it is then we just won't so we

1433
01:21:59,220 --> 01:22:04,289
have inside file formats we've got the

1434
01:22:01,319 --> 01:22:07,159
various chain values somewhere in here

1435
01:22:04,289 --> 01:22:07,159
here they are

1436
01:22:16,250 --> 01:22:21,920
I don't really remember if there's

1437
01:22:19,130 --> 01:22:23,020
anything no there isn't so the chaining

1438
01:22:21,920 --> 01:22:26,390
[Music]

1439
01:22:23,020 --> 01:22:30,110
the chain value I think just means move

1440
01:22:26,390 --> 01:22:32,300
to the next asset index automatically so

1441
01:22:30,109 --> 01:22:34,750
I'm pretty sure that that's all that is

1442
01:22:32,300 --> 01:22:34,750
right

1443
01:22:52,069 --> 01:22:57,170
so think what I'll do is let's just do

1444
01:22:54,539 --> 01:23:04,399
it this way let's crack the value first

1445
01:22:57,170 --> 01:23:09,989
so let's say okay you know mode equals

1446
01:23:04,399 --> 01:23:16,859
unknown and then we'll to say mode

1447
01:23:09,988 --> 01:23:23,759
equals la mode equals looped mode equals

1448
01:23:16,859 --> 01:23:32,158
chained right and then we'll just say

1449
01:23:23,760 --> 01:23:43,860
like that so that we can say here's the

1450
01:23:32,158 --> 01:23:46,969
mode of that sound fontina yeah I guess

1451
01:23:43,859 --> 01:23:46,969
we'll just print it out

1452
01:24:02,100 --> 01:24:22,960
something like this so we'd have these

1453
01:24:15,819 --> 01:24:37,779
two pieces of information and then we'd

1454
01:24:22,960 --> 01:24:44,890
have like sent I don't know what

1455
01:24:37,779 --> 01:24:49,380
external letting was I assume that's

1456
01:24:44,890 --> 01:24:53,550
just like hey this is how much you would

1457
01:24:49,380 --> 01:24:53,550
go total from line to line

1458
01:25:00,659 --> 01:25:04,420
but I don't know maybe it's the park in

1459
01:25:02,770 --> 01:25:07,750
addition to the ascender and descender

1460
01:25:04,420 --> 01:25:11,409
height I don't know what we encoded that

1461
01:25:07,750 --> 01:25:14,229
us so now we're printing out all of that

1462
01:25:11,409 --> 01:25:16,119
information which is nice and now let's

1463
01:25:14,229 --> 01:25:18,429
just also add to the beginning of every

1464
01:25:16,119 --> 01:25:30,909
font here something which tells us the

1465
01:25:18,430 --> 01:25:37,800
like basic layout of the asset itself so

1466
01:25:30,909 --> 01:25:37,800
wait so this actually needs to be

1467
01:25:48,859 --> 01:25:53,449
when I do a lot of coding that does

1468
01:25:51,050 --> 01:25:54,890
massive jumps like this I make a little

1469
01:25:53,449 --> 01:25:58,010
system that automatically handles the

1470
01:25:54,890 --> 01:26:00,170
tabbing I'm not gonna do that here but

1471
01:25:58,010 --> 01:26:01,190
if you spend a lot of time doing stuff

1472
01:26:00,170 --> 01:26:03,500
like this you want to do it because

1473
01:26:01,189 --> 01:26:14,269
otherwise it ends up going pretty

1474
01:26:03,500 --> 01:26:16,250
bananas on you as you might imagine so

1475
01:26:14,270 --> 01:26:19,130
we need a way to print out a 64-bit

1476
01:26:16,250 --> 01:26:20,960
value here I never remember the stupid

1477
01:26:19,130 --> 01:26:26,300
way that that actually works it's

1478
01:26:20,960 --> 01:26:27,439
something like that I just cannot

1479
01:26:26,300 --> 01:26:30,159
remember so we're gonna have to look

1480
01:26:27,439 --> 01:26:33,549
that one up sorry about that

1481
01:26:30,159 --> 01:26:33,550
we'll do that

1482
01:26:49,649 --> 01:26:54,659
so we want to set the tags here

1483
01:27:09,229 --> 01:27:15,289
and then deal with the type so I would

1484
01:27:12,890 --> 01:27:28,610
also like to actually print out the tags

1485
01:27:15,289 --> 01:27:32,319
and so in here when I actually yeah go

1486
01:27:28,609 --> 01:27:32,319
to do it I would like to be able to do

1487
01:27:35,289 --> 01:27:46,939
one of these but what you'll notice is I

1488
01:27:43,069 --> 01:27:49,939
already Jimmy I already implemented this

1489
01:27:46,939 --> 01:27:56,839
code down here so what I really want to

1490
01:27:49,939 --> 01:28:01,219
do is change this to be so that the part

1491
01:27:56,840 --> 01:28:03,710
that I actually care about can be reused

1492
01:28:01,220 --> 01:28:06,110
and don't have to do it again right so

1493
01:28:03,710 --> 01:28:09,470
what I'd like to do is make this part

1494
01:28:06,109 --> 01:28:13,189
here where we actually print out the tag

1495
01:28:09,470 --> 01:28:16,670
information I'd like that to work so

1496
01:28:13,189 --> 01:28:18,909
like I don't have to do it twice if that

1497
01:28:16,670 --> 01:28:18,909
makes sense

1498
01:28:21,430 --> 01:28:27,170
so I want this to effectively be a thing

1499
01:28:24,260 --> 01:28:29,329
where it's like print tag and I just

1500
01:28:27,170 --> 01:28:33,710
passed the tag and it just does that

1501
01:28:29,329 --> 01:28:39,250
right so if I go ahead and take that out

1502
01:28:33,710 --> 01:28:39,250
I can make that function here

1503
01:28:48,949 --> 01:28:55,189
and this will print out the tag

1504
01:28:51,479 --> 01:28:58,199
information for me so then I can do that

1505
01:28:55,189 --> 01:29:02,759
here and I can do that

1506
01:28:58,199 --> 01:29:09,300
here right so I can say here's the that

1507
01:29:02,760 --> 01:29:14,960
tag and rather than implementing this

1508
01:29:09,300 --> 01:29:14,960
again I will just do this

1509
01:29:33,198 --> 01:29:37,759
so you look up that tag I just need the

1510
01:29:35,270 --> 01:29:42,290
tags array plus the tag index enough we

1511
01:29:37,760 --> 01:29:44,210
go we should probably put in some things

1512
01:29:42,289 --> 01:29:51,469
to check the bounds on the tag look up

1513
01:29:44,210 --> 01:29:53,230
there so you know maybe we change this a

1514
01:29:51,469 --> 01:29:55,850
little bit

1515
01:29:53,229 --> 01:29:58,659
we'll do that one second well you know

1516
01:29:55,850 --> 01:29:58,660
we'll do it now

1517
01:30:09,170 --> 01:30:17,779
so we we want to check to see whether

1518
01:30:14,270 --> 01:30:25,340
the tag index is inside the bounds and

1519
01:30:17,779 --> 01:30:29,529
if it is then we'll print it right if

1520
01:30:25,340 --> 01:30:29,529
it's not then we just want to print like

1521
01:30:31,840 --> 01:30:37,760
some bad error like no bad stop please

1522
01:30:35,510 --> 01:30:41,179
do not do that everything is horrible

1523
01:30:37,760 --> 01:30:43,460
right so here we can just say like

1524
01:30:41,179 --> 01:30:47,449
alright go ahead and print that tag

1525
01:30:43,460 --> 01:30:49,579
index and over here we'll say go ahead

1526
01:30:47,448 --> 01:30:51,289
and print that tag index and then you

1527
01:30:49,579 --> 01:30:56,840
can do your bounds checking so that we

1528
01:30:51,289 --> 01:31:00,109
don't end up in la-la-land right we

1529
01:30:56,840 --> 01:31:02,539
could do the same thing up here right if

1530
01:31:00,109 --> 01:31:05,329
we wanted to we could check to make sure

1531
01:31:02,539 --> 01:31:07,729
these are out of not out of bounds so we

1532
01:31:05,329 --> 01:31:11,140
could say like look if asset index is

1533
01:31:07,729 --> 01:31:16,609
greater than or equal to

1534
01:31:11,140 --> 01:31:21,770
HHA asset counts then I'm sorry less

1535
01:31:16,609 --> 01:31:24,859
than then do this for the thing

1536
01:31:21,770 --> 01:31:28,600
otherwise you know definitely don't do

1537
01:31:24,859 --> 01:31:31,599
that because it's it's just garbage

1538
01:31:28,600 --> 01:31:31,600
right

1539
01:31:37,279 --> 01:31:40,279
yeah

1540
01:31:44,399 --> 01:31:49,929
so assuming that works then off we would

1541
01:31:47,920 --> 01:31:51,970
go put the type in for a name in there

1542
01:31:49,930 --> 01:32:05,170
that's good and so I mean here we just

1543
01:31:51,970 --> 01:32:06,159
need to say this is an error and again

1544
01:32:05,170 --> 01:32:08,079
that just adds a little bit of error

1545
01:32:06,159 --> 01:32:09,430
checking case someone makes a bad HHA

1546
01:32:08,079 --> 01:32:13,029
file somehow I don't think it's ever

1547
01:32:09,430 --> 01:32:14,920
gonna matter but you know so let's go

1548
01:32:13,029 --> 01:32:18,789
ahead and try this again we do the dump

1549
01:32:14,920 --> 01:32:20,890
we reload that so there's our tags they

1550
01:32:18,789 --> 01:32:23,439
look right again which is good here's

1551
01:32:20,890 --> 01:32:24,640
our assets and now we should be able to

1552
01:32:23,439 --> 01:32:25,989
look in here and see a little bit more

1553
01:32:24,640 --> 01:32:30,760
it's like here's the bytes

1554
01:32:25,989 --> 01:32:33,579
there's the offset we've got some tags

1555
01:32:30,760 --> 01:32:34,989
it's says there's 47 tag I think we

1556
01:32:33,579 --> 01:32:37,510
might have flipped those I think I

1557
01:32:34,989 --> 01:32:38,590
probably flipped those yeah it should be

1558
01:32:37,510 --> 01:32:40,690
the other way around so we'll fix that

1559
01:32:38,590 --> 01:32:45,279
in a second there's the two tags in

1560
01:32:40,689 --> 01:32:48,729
question here's the type it's a bitmap

1561
01:32:45,279 --> 01:32:50,170
of that size and here's the alignment

1562
01:32:48,729 --> 01:32:51,489
and that that all looks pretty good

1563
01:32:50,170 --> 01:32:55,560
right

1564
01:32:51,489 --> 01:32:55,559
so that looks that looks pretty good so

1565
01:32:56,189 --> 01:33:06,069
let me just go fix that typo there for

1566
01:32:59,729 --> 01:33:10,109
the from the tag print out so in here

1567
01:33:06,069 --> 01:33:12,960
where we say you at you it's actually

1568
01:33:10,109 --> 01:33:16,649
that's the count first

1569
01:33:12,960 --> 01:33:19,689
there's count and there's the first

1570
01:33:16,649 --> 01:33:21,609
otherwise that looks pretty good so that

1571
01:33:19,689 --> 01:33:24,609
looks like we're loading these pretty

1572
01:33:21,609 --> 01:33:26,949
well right so assuming that we're

1573
01:33:24,609 --> 01:33:29,500
loading them well means that at that

1574
01:33:26,949 --> 01:33:31,479
point we can probably just start to

1575
01:33:29,500 --> 01:33:34,090
write them we'll do that tomorrow and

1576
01:33:31,479 --> 01:33:38,049
then we'll be done with that we should

1577
01:33:34,090 --> 01:33:39,940
do a reader for v1 hhas as well that'll

1578
01:33:38,050 --> 01:33:42,760
be a lot easier because it won't

1579
01:33:39,939 --> 01:33:45,460
actually require us to do anything you

1580
01:33:42,760 --> 01:33:46,539
like it can just load directly the only

1581
01:33:45,460 --> 01:33:48,010
thing we'll have to change is the

1582
01:33:46,539 --> 01:33:49,269
annotations we'll have to actually get

1583
01:33:48,010 --> 01:33:52,300
locked it up so we'll have to have an

1584
01:33:49,270 --> 01:33:55,390
annotation like reader in there but

1585
01:33:52,300 --> 01:33:57,610
other than that we're fine so now we

1586
01:33:55,390 --> 01:33:59,409
should be able to to

1587
01:33:57,609 --> 01:34:01,420
company one of these and see the actual

1588
01:33:59,408 --> 01:34:05,138
data like test fonts for example we

1589
01:34:01,420 --> 01:34:19,270
should be able to take a look at so if I

1590
01:34:05,139 --> 01:34:33,300
do a dump on that please load that up

1591
01:34:19,270 --> 01:34:41,290
here so here's all of our assets just

1592
01:34:33,300 --> 01:34:44,670
bitmaps right if there's no tags we

1593
01:34:41,289 --> 01:34:48,698
should probably just skip the tag fields

1594
01:34:44,670 --> 01:34:49,779
maybe like so you know like if we're

1595
01:34:48,698 --> 01:34:51,579
printing this out just to make it a

1596
01:34:49,779 --> 01:34:52,809
little bit easier to read if there's no

1597
01:34:51,579 --> 01:34:54,670
errors and we just don't think there's

1598
01:34:52,810 --> 01:34:58,590
any tags maybe we can just say look the

1599
01:34:54,670 --> 01:34:58,590
tag count is this

1600
01:34:58,658 --> 01:35:08,888
if the tide count is valid then we print

1601
01:35:06,670 --> 01:35:10,420
out the tag array if it's not then we

1602
01:35:08,889 --> 01:35:12,039
just don't print it because we don't

1603
01:35:10,420 --> 01:35:17,139
need to see a tag array that isn't there

1604
01:35:12,039 --> 01:35:21,279
right so then we load we load this and

1605
01:35:17,139 --> 01:35:23,409
we get all of these have no tags now

1606
01:35:21,279 --> 01:35:27,880
right there just like here's the bitmap

1607
01:35:23,408 --> 01:35:30,429
data and it's fine so that's all good

1608
01:35:27,880 --> 01:35:36,850
and then there should be an actual asset

1609
01:35:30,429 --> 01:35:38,829
here that is font or whatever right I

1610
01:35:36,850 --> 01:35:41,770
think that's all good the only weird

1611
01:35:38,829 --> 01:35:44,969
part is and that looks good is maybe

1612
01:35:41,770 --> 01:35:48,780
this should be like the Fock thing

1613
01:35:44,969 --> 01:35:55,658
should be up in here maybe kind of

1614
01:35:48,779 --> 01:36:00,658
probably possibly so I almost want to

1615
01:35:55,658 --> 01:36:06,779
say like we kind of want to crack that

1616
01:36:00,658 --> 01:36:06,779
name out early like this like thing here

1617
01:36:14,840 --> 01:36:20,090
not sure the best way to really do that

1618
01:36:38,599 --> 01:36:43,119
like I mean I could just do this thing

1619
01:36:40,849 --> 01:36:43,119
twice

1620
01:36:54,488 --> 01:36:59,589
I don't know it's good enough for now

1621
01:36:56,909 --> 01:37:04,539
alright I'll go ahead and go to the Q&amp;A

1622
01:36:59,590 --> 01:37:06,219
here but I think that's pretty good it

1623
01:37:04,539 --> 01:37:11,199
seems like the file formats pretty

1624
01:37:06,219 --> 01:37:13,899
reasonable now and this this gets us our

1625
01:37:11,199 --> 01:37:16,779
import like so now we can use our old

1626
01:37:13,899 --> 01:37:25,539
files if you want to which i think is

1627
01:37:16,779 --> 01:37:27,939
good I would like to know about these am

1628
01:37:25,539 --> 01:37:30,189
I actually doing these properly oh we're

1629
01:37:27,939 --> 01:37:30,609
not printing out the annotations I take

1630
01:37:30,189 --> 01:37:33,099
it back

1631
01:37:30,609 --> 01:37:37,059
I'm not going to the QA yet let me just

1632
01:37:33,100 --> 01:37:41,650
put in I wanted to make those those

1633
01:37:37,060 --> 01:37:43,480
annotations come out as well so I take

1634
01:37:41,649 --> 01:37:47,170
it back we want to print this stuff out

1635
01:37:43,479 --> 01:37:51,009
as well so in here where we get the

1636
01:37:47,170 --> 01:37:55,840
annotations after we print out the the

1637
01:37:51,010 --> 01:37:57,579
asset I want to go ahead and do like the

1638
01:37:55,840 --> 01:38:00,069
asset name so the asset name we could

1639
01:37:57,579 --> 01:38:02,170
actually put on here as well

1640
01:38:00,069 --> 01:38:05,279
we could put that right here if we have

1641
01:38:02,170 --> 01:38:05,279
one you know

1642
01:38:13,270 --> 01:38:17,230
so that would be cool and then the other

1643
01:38:15,310 --> 01:38:19,030
pieces of asset information I should

1644
01:38:17,229 --> 01:38:23,949
probably put in there as well so if I do

1645
01:38:19,029 --> 01:38:25,329
this on a file that well even these

1646
01:38:23,949 --> 01:38:28,449
would would have it right because

1647
01:38:25,329 --> 01:38:29,949
everyone should have it now so if I look

1648
01:38:28,449 --> 01:38:34,569
at them right you can see what they are

1649
01:38:29,949 --> 01:38:36,809
their asset font glyph right an asset

1650
01:38:34,569 --> 01:38:36,809
font

1651
01:38:46,920 --> 01:38:52,119
so okay and trying to think if there's

1652
01:38:50,409 --> 01:38:53,680
what's the other annotation data here

1653
01:38:52,119 --> 01:38:57,640
that we want to put so we've got the

1654
01:38:53,680 --> 01:38:59,110
spritesheet x and y so description and

1655
01:38:57,640 --> 01:39:06,119
author and stuff right

1656
01:38:59,109 --> 01:39:11,549
so let's just print those out so if an

1657
01:39:06,119 --> 01:39:30,909
asset description dot counts if an

1658
01:39:11,550 --> 01:39:32,680
author duck can't if well we can just do

1659
01:39:30,909 --> 01:39:36,579
this where it's like it's from this

1660
01:39:32,680 --> 01:39:38,050
source file and the fact I guess we

1661
01:39:36,579 --> 01:39:39,909
don't really need to put that up here

1662
01:39:38,050 --> 01:39:43,779
and like maybe that could just be part

1663
01:39:39,909 --> 01:39:54,039
of like a from line so we would just say

1664
01:39:43,779 --> 01:40:02,649
like okay it's from this file at this

1665
01:39:54,039 --> 01:40:09,369
sprite information the date was that the

1666
01:40:02,649 --> 01:40:13,979
checksum was that just so we can see

1667
01:40:09,369 --> 01:40:13,979
that date as well so source file date

1668
01:40:15,119 --> 01:40:20,109
source file checksum and again I don't

1669
01:40:18,279 --> 01:40:22,380
remember if percent llu is actually the

1670
01:40:20,109 --> 01:40:24,399
right thing we should look that up

1671
01:40:22,380 --> 01:40:26,289
somebody remind me in a second since

1672
01:40:24,399 --> 01:40:28,799
we're gonna do QA somebody remind me to

1673
01:40:26,289 --> 01:40:28,800
look that up

1674
01:40:32,590 --> 01:40:49,940
because I don't remember and one thing

1675
01:40:48,319 --> 01:40:51,500
I'd sort of mentioned as a meta comment

1676
01:40:49,939 --> 01:40:53,269
again I met a comment I'm a tapper

1677
01:40:51,500 --> 01:40:55,429
turning so you'll notice like almost

1678
01:40:53,270 --> 01:40:57,020
everything i typed in today was just

1679
01:40:55,429 --> 01:40:59,690
busy work that the compiler could have

1680
01:40:57,020 --> 01:41:01,699
done for me if again if c++ had ever

1681
01:40:59,689 --> 01:41:03,979
added anything good to the language it

1682
01:41:01,698 --> 01:41:06,619
wouldn't have had to happen right it's

1683
01:41:03,979 --> 01:41:07,968
all wrote stuff you could have written a

1684
01:41:06,619 --> 01:41:10,238
little routine that just reads the

1685
01:41:07,969 --> 01:41:14,448
structs and it would just print right

1686
01:41:10,238 --> 01:41:16,849
and that could just I mean like every

1687
01:41:14,448 --> 01:41:19,488
other language has that right like you

1688
01:41:16,850 --> 01:41:21,289
can if you just want to in JavaScript if

1689
01:41:19,488 --> 01:41:23,869
you just want to print out the contents

1690
01:41:21,289 --> 01:41:25,069
of a thing you can write a little

1691
01:41:23,869 --> 01:41:26,630
routine that does that and there's a

1692
01:41:25,069 --> 01:41:29,359
built-in one that will just do it for

1693
01:41:26,630 --> 01:41:30,739
you if you don't care right but you

1694
01:41:29,359 --> 01:41:33,529
could write one yourself really easily

1695
01:41:30,738 --> 01:41:35,779
to write so you can it's really because

1696
01:41:33,529 --> 01:41:39,559
you can access the type information and

1697
01:41:35,779 --> 01:41:42,259
that is like the fact that CPS doesn't

1698
01:41:39,560 --> 01:41:43,989
have that is nuts it's been 30 plus

1699
01:41:42,260 --> 01:41:46,909
years and they still don't have it is

1700
01:41:43,988 --> 01:41:48,919
crazy I know they're working on one now

1701
01:41:46,909 --> 01:41:50,929
but now is not the time the time was

1702
01:41:48,920 --> 01:41:55,850
like 1984 was when you should have been

1703
01:41:50,929 --> 01:41:58,489
working on that right like the time has

1704
01:41:55,850 --> 01:42:00,199
passed for you for that to be considered

1705
01:41:58,488 --> 01:42:00,919
an acceptable thing to not have in your

1706
01:42:00,198 --> 01:42:07,789
language

1707
01:42:00,920 --> 01:42:13,520
the time passed about 20 years ago yeah

1708
01:42:07,789 --> 01:42:17,679
so this looks good here all right so I

1709
01:42:13,520 --> 01:42:17,679
think we're good all right to the Q&amp;A

1710
01:42:25,960 --> 01:42:34,779
Martin says that static assert is a C++

1711
01:42:30,439 --> 01:42:40,729
11 feature and is supported by M SVC 13

1712
01:42:34,779 --> 01:42:43,219
so that's probably okay then if it

1713
01:42:40,729 --> 01:42:45,409
really is supported by by 2013 that's

1714
01:42:43,220 --> 01:42:51,710
probably fine because I think we use the

1715
01:42:45,409 --> 01:42:53,689
here Docs which are that if that makes

1716
01:42:51,710 --> 01:42:56,300
sense

1717
01:42:53,689 --> 01:43:02,779
so I'd be okay with that if we want to

1718
01:42:56,300 --> 01:43:04,279
do it that way let's see if this works

1719
01:43:02,779 --> 01:43:06,489
okay should we should be able to do it

1720
01:43:04,279 --> 01:43:06,489
either way

1721
01:43:24,569 --> 01:43:36,880
oops so I don't really need a message

1722
01:43:33,640 --> 01:43:41,079
but we can put one in anyway so we could

1723
01:43:36,880 --> 01:43:47,050
say look the message is just the

1724
01:43:41,079 --> 01:43:50,279
expression so that would replace the

1725
01:43:47,050 --> 01:43:54,640
static assert with the C++ eleven way

1726
01:43:50,279 --> 01:43:55,840
and if I then changed one of the file

1727
01:43:54,640 --> 01:44:07,020
format in theory it should complain

1728
01:43:55,840 --> 01:44:12,789
right so same test right so that's fine

1729
01:44:07,020 --> 01:44:29,590
I'm down with that we could be fancier

1730
01:44:12,789 --> 01:44:37,300
and say right and then it would print

1731
01:44:29,590 --> 01:44:39,940
that out as the message right so maybe

1732
01:44:37,300 --> 01:44:46,890
that's a little too cheeky maybe we

1733
01:44:39,939 --> 01:44:46,889
would just say that

1734
01:44:47,329 --> 01:45:02,210
right so and I'm fine with that and we

1735
01:44:58,560 --> 01:45:02,210
can flip it back if we need to

1736
01:45:09,219 --> 01:45:14,480
Jim zeroes he destroyed do you have a

1737
01:45:11,960 --> 01:45:16,340
trick for getting a number for file to

1738
01:45:14,479 --> 01:45:18,558
use in the struct name assuming you

1739
01:45:16,340 --> 01:45:21,099
don't have a trick for using that in the

1740
01:45:18,559 --> 01:45:21,099
struct name

1741
01:45:25,529 --> 01:45:28,909
[Music]

1742
01:45:36,300 --> 01:45:39,960
how would you do that

1743
01:45:56,149 --> 01:46:04,488
well you could

1744
01:46:01,270 --> 01:46:04,489
[Music]

1745
01:46:12,930 --> 01:46:24,550
you could what I mean you probably can't

1746
01:46:17,710 --> 01:46:29,699
turn the address of it into yeah no I I

1747
01:46:24,550 --> 01:46:29,699
don't I don't have a way to do that

1748
01:46:42,219 --> 01:46:52,838
whoops I have typos something says let's

1749
01:46:46,429 --> 01:46:52,838
look at that thank you

1750
01:47:00,500 --> 01:47:03,750
in earlier episode of handmade here

1751
01:47:02,550 --> 01:47:05,670
around a 160 you answered a question

1752
01:47:03,750 --> 01:47:07,050
regarding your plans splitting handmade

1753
01:47:05,670 --> 01:47:08,010
here in two parts first for any engine

1754
01:47:07,050 --> 01:47:09,960
second or in the game and there was

1755
01:47:08,010 --> 01:47:11,010
clarified you still do you still feel

1756
01:47:09,960 --> 01:47:12,569
your mood towards that goal or do you

1757
01:47:11,010 --> 01:47:13,770
feel this better when you move to the

1758
01:47:12,569 --> 01:47:15,869
game code to still work on the engine

1759
01:47:13,770 --> 01:47:18,930
head features no I mean I think it'll

1760
01:47:15,869 --> 01:47:21,119
still be pretty clear I mean we will

1761
01:47:18,930 --> 01:47:22,860
always its our engine so we'll always

1762
01:47:21,119 --> 01:47:27,569
allow ourselves to go fix something if

1763
01:47:22,859 --> 01:47:30,479
we don't like it but the goal is at some

1764
01:47:27,569 --> 01:47:34,289
point you know day 500 or something to

1765
01:47:30,479 --> 01:47:36,809
just say alright everything's good you

1766
01:47:34,289 --> 01:47:39,300
know it it's pretty much does what we

1767
01:47:36,810 --> 01:47:41,310
want it's pretty close to doing what we

1768
01:47:39,300 --> 01:47:44,760
want now there's a few things like I got

1769
01:47:41,310 --> 01:47:48,780
to finish up the lighting stuff and I

1770
01:47:44,760 --> 01:47:50,699
would like to do a little bit of cleanup

1771
01:47:48,779 --> 01:47:52,319
on the entity stuff like there's

1772
01:47:50,699 --> 01:47:54,300
probably some stuff I'd like to do but

1773
01:47:52,319 --> 01:47:59,130
there's not I think we got mostly

1774
01:47:54,300 --> 01:48:02,039
everything down there so we should be

1775
01:47:59,130 --> 01:48:03,210
good how do you deal with concurrency in

1776
01:48:02,039 --> 01:48:13,019
C++

1777
01:48:03,210 --> 01:48:16,859
well I mean usually you with concurrency

1778
01:48:13,020 --> 01:48:18,870
there's it's kind of a large topic and I

1779
01:48:16,859 --> 01:48:20,849
would rather not go into - note to dip

1780
01:48:18,869 --> 01:48:26,390
right now it's not really relevant we we

1781
01:48:20,850 --> 01:48:30,140
did concurrency related stuff earlier

1782
01:48:26,390 --> 01:48:33,450
but the problem I see with concurrency

1783
01:48:30,140 --> 01:48:35,789
most the time is that I have never

1784
01:48:33,449 --> 01:48:40,229
really seen any good ways of dealing

1785
01:48:35,789 --> 01:48:44,670
with concurrency systemically that

1786
01:48:40,229 --> 01:48:46,769
aren't slow a lot of the stuff that I've

1787
01:48:44,670 --> 01:48:49,980
seen people where they propose like here

1788
01:48:46,770 --> 01:48:52,260
is a system for handling like how you're

1789
01:48:49,979 --> 01:48:54,929
gonna thread this thing it's just much

1790
01:48:52,260 --> 01:48:57,840
slower than a version that was actually

1791
01:48:54,930 --> 01:49:00,440
written customized to only do like the

1792
01:48:57,840 --> 01:49:02,550
minimal amount of you know locked

1793
01:49:00,439 --> 01:49:06,419
exchanges necessary to implement the

1794
01:49:02,550 --> 01:49:07,739
actual algorithm now of course that

1795
01:49:06,420 --> 01:49:08,609
doesn't mean you always want to write it

1796
01:49:07,739 --> 01:49:10,168
because the

1797
01:49:08,609 --> 01:49:13,379
miss concurrency is very hard to get

1798
01:49:10,168 --> 01:49:14,998
right and you always have bugs in it and

1799
01:49:13,378 --> 01:49:17,248
you've got to work to get the bugs out

1800
01:49:14,998 --> 01:49:18,958
of it and that work may not be worth you

1801
01:49:17,248 --> 01:49:25,108
can afford to do at that time or so on

1802
01:49:18,958 --> 01:49:31,769
so it's it's difficult in that regard

1803
01:49:25,109 --> 01:49:34,739
right and so I would basically say that

1804
01:49:31,769 --> 01:49:35,729
the main things you're looking at when

1805
01:49:34,738 --> 01:49:38,638
you're talking about implementing

1806
01:49:35,729 --> 01:49:42,030
concurrent things in C++ is dividing

1807
01:49:38,639 --> 01:49:46,469
things into probably two parts you know

1808
01:49:42,029 --> 01:49:49,889
one where you have a sort of somewhat

1809
01:49:46,469 --> 01:49:52,828
generic system you made that just calls

1810
01:49:49,889 --> 01:49:55,019
people back to do work concurrently

1811
01:49:52,828 --> 01:49:56,009
we've done that in hand made here oh how

1812
01:49:55,019 --> 01:49:59,699
the lighting works that's how the

1813
01:49:56,010 --> 01:50:01,800
renderer software under worked and you

1814
01:49:59,698 --> 01:50:04,558
just assume that that'll be fine for

1815
01:50:01,800 --> 01:50:06,889
most cases where things are just doing

1816
01:50:04,559 --> 01:50:09,659
computations that don't interfere and

1817
01:50:06,889 --> 01:50:12,569
then you have to have some more special

1818
01:50:09,658 --> 01:50:14,429
purpose code that you write for data

1819
01:50:12,569 --> 01:50:16,768
structures who themselves have to be

1820
01:50:14,429 --> 01:50:18,689
handled concurrency concurrently because

1821
01:50:16,769 --> 01:50:22,109
that just ends up being hard to do and

1822
01:50:18,689 --> 01:50:24,599
it's usually very sensitive in terms of

1823
01:50:22,109 --> 01:50:26,369
you can very easily end up with code

1824
01:50:24,599 --> 01:50:28,769
that runs slower than the single

1825
01:50:26,368 --> 01:50:30,179
threaded code if you aren't careful and

1826
01:50:28,769 --> 01:50:33,838
you just are locking all over the place

1827
01:50:30,179 --> 01:50:35,309
or doing bad things like that so you

1828
01:50:33,838 --> 01:50:37,078
know we do a bunch of concurrency and

1829
01:50:35,309 --> 01:50:39,588
handmade hero go back and look at those

1830
01:50:37,078 --> 01:50:41,849
episodes if you're curious about it but

1831
01:50:39,588 --> 01:50:45,628
it's not a really a silver bullet kind

1832
01:50:41,849 --> 01:50:47,519
of thing yhh a version one still

1833
01:50:45,628 --> 01:50:49,588
important is it only to convert the few

1834
01:50:47,519 --> 01:50:52,168
existing assets yes and also I just

1835
01:50:49,588 --> 01:50:54,149
wanted to show how to do it so you know

1836
01:50:52,168 --> 01:50:56,248
you could imagine a project where you

1837
01:50:54,149 --> 01:50:58,229
had a lot of stuff encoded in an old

1838
01:50:56,248 --> 01:51:03,059
file format and now you want to get it

1839
01:50:58,229 --> 01:51:05,309
out this is the case this is how you

1840
01:51:03,059 --> 01:51:06,779
would do it right we don't need to do it

1841
01:51:05,309 --> 01:51:08,189
because we didn't store our data

1842
01:51:06,779 --> 01:51:10,728
permanently in that format or anything

1843
01:51:08,189 --> 01:51:14,429
so it's not really the end of the world

1844
01:51:10,729 --> 01:51:16,458
but it's just I want to show how to do

1845
01:51:14,429 --> 01:51:16,458
it

1846
01:51:16,979 --> 01:51:22,079
how do I feel about the progress of

1847
01:51:19,060 --> 01:51:25,239
hangers are really good actually

1848
01:51:22,079 --> 01:51:26,590
it's I mean I don't we don't have a good

1849
01:51:25,238 --> 01:51:30,519
thing that shows how many weeks of

1850
01:51:26,590 --> 01:51:32,469
programming it has been equivalent but

1851
01:51:30,520 --> 01:51:35,199
it's not many it's not even a year of

1852
01:51:32,469 --> 01:51:36,460
programming yet and we have just a ton

1853
01:51:35,198 --> 01:51:40,750
of stuff in there

1854
01:51:36,460 --> 01:51:42,340
so I'm pretty happy with it it feels

1855
01:51:40,750 --> 01:51:43,810
like a pretty decent engine for what

1856
01:51:42,340 --> 01:51:51,909
it's designed to do and it I feel like

1857
01:51:43,810 --> 01:51:54,370
it showed how to do a bunch of stuff so

1858
01:51:51,909 --> 01:51:57,550
I learned C or C++ first is there good

1859
01:51:54,369 --> 01:51:59,948
advances to us ours well it's a tough

1860
01:51:57,550 --> 01:52:03,010
question really the answer is it depends

1861
01:51:59,948 --> 01:52:05,379
on what you're trying to do so if you're

1862
01:52:03,010 --> 01:52:08,860
just trying to work on stuff that you

1863
01:52:05,380 --> 01:52:10,840
wanted to work on and you know you want

1864
01:52:08,859 --> 01:52:12,759
to program sensibly then you can really

1865
01:52:10,840 --> 01:52:15,310
just learn C and you don't really need

1866
01:52:12,760 --> 01:52:16,690
to see this fuss for anything there

1867
01:52:15,310 --> 01:52:18,160
really it doesn't have very many good

1868
01:52:16,689 --> 01:52:22,059
features in it it's pretty it's pretty

1869
01:52:18,159 --> 01:52:27,639
poor language it's just it's just not a

1870
01:52:22,060 --> 01:52:30,610
good language however if you're trying

1871
01:52:27,640 --> 01:52:33,900
to get a job programming in games you

1872
01:52:30,609 --> 01:52:36,579
need to learn C++ because a lot of

1873
01:52:33,899 --> 01:52:40,359
people think it's good for some reason

1874
01:52:36,579 --> 01:52:42,369
and they you know poop out C++ all over

1875
01:52:40,359 --> 01:52:44,859
the codebase and you need to be able to

1876
01:52:42,369 --> 01:52:47,319
read it and work with it right that's

1877
01:52:44,859 --> 01:52:49,899
just a that's just the way it goes so

1878
01:52:47,319 --> 01:52:51,488
you need to learn C++ eventually if

1879
01:52:49,899 --> 01:52:55,329
you're going to get a job in an industry

1880
01:52:51,488 --> 01:52:59,439
that uses C because most of them use C++

1881
01:52:55,329 --> 01:53:02,529
as well I would start with C and learn

1882
01:52:59,439 --> 01:53:05,319
it because you can't use C++ at all

1883
01:53:02,529 --> 01:53:08,259
without knowing C C is the prerequisite

1884
01:53:05,319 --> 01:53:13,299
so keep things simple learn C first then

1885
01:53:08,260 --> 01:53:14,890
learn C++ as you go after that but

1886
01:53:13,300 --> 01:53:17,590
regrettably most the time you probably

1887
01:53:14,890 --> 01:53:20,619
will have to learn a fair bit of C++

1888
01:53:17,590 --> 01:53:25,440
even though most of it is garbage and

1889
01:53:20,619 --> 01:53:25,439
that's just because of the industry

1890
01:53:30,719 --> 01:53:33,300
given that zeddicus turned his language

1891
01:53:32,340 --> 01:53:35,069
feature and you can't really plan it

1892
01:53:33,300 --> 01:53:36,900
yourself why not just use it because it

1893
01:53:35,069 --> 01:53:41,368
doesn't work on past papyrus it's a new

1894
01:53:36,899 --> 01:53:45,629
it's it was recently added we were to

1895
01:53:41,368 --> 01:53:47,658
look at printf stuff yes I should do

1896
01:53:45,630 --> 01:53:47,659
that

1897
01:53:50,689 --> 01:53:55,159
see here hopefully psycho dude psycho

1898
01:53:53,038 --> 01:54:00,509
forget it right did they get it right

1899
01:53:55,158 --> 01:54:08,038
well they did what we did so let's say

1900
01:54:00,510 --> 01:54:09,300
that that's right I don't know uh I

1901
01:54:08,038 --> 01:54:12,599
should look it up for real stack

1902
01:54:09,300 --> 01:54:16,458
overflows wrong all the time let's see

1903
01:54:12,599 --> 01:54:16,458
if I can get a actual documentation from

1904
01:54:19,668 --> 01:54:22,668
ya

1905
01:54:31,328 --> 01:54:34,838
long billion I know we haven't done much

1906
01:54:32,948 --> 01:54:37,208
with in-game text in the series yet but

1907
01:54:34,838 --> 01:54:39,128
could the asset system be used as it is

1908
01:54:37,208 --> 01:54:41,198
for storing Story text tagged with

1909
01:54:39,128 --> 01:54:42,998
language tag for translation and other

1910
01:54:41,198 --> 01:54:44,708
relevant data tags maybe we would want

1911
01:54:42,998 --> 01:54:46,599
custom tags restoring long codes or do

1912
01:54:44,708 --> 01:54:47,858
you think it better to make a different

1913
01:54:46,599 --> 01:54:49,689
system suited for this purpose also

1914
01:54:47,859 --> 01:54:51,010
tabview is looking cool all at ease now

1915
01:54:49,689 --> 01:54:57,609
is that kind of came in here a dark

1916
01:54:51,010 --> 01:54:59,109
theme good point um I yeah I don't see

1917
01:54:57,609 --> 01:55:01,659
why you couldn't I mean you'd probably

1918
01:54:59,109 --> 01:55:04,629
want to make a new type called HHA

1919
01:55:01,658 --> 01:55:07,808
underscore text and store that as an

1920
01:55:04,628 --> 01:55:10,300
asset type and then you could tag it

1921
01:55:07,809 --> 01:55:13,320
with yeah like you know information

1922
01:55:10,300 --> 01:55:17,668
necessary to know when it should be used

1923
01:55:13,319 --> 01:55:21,788
seems fine to me we could do that I

1924
01:55:17,668 --> 01:55:23,800
don't know what we want to do with that

1925
01:55:21,788 --> 01:55:34,059
really going forward but we definitely

1926
01:55:23,800 --> 01:55:37,628
could do that one past last asset index

1927
01:55:34,059 --> 01:55:40,599
is not an asset count that's why we

1928
01:55:37,628 --> 01:55:44,439
don't do that we wanted to store one

1929
01:55:40,599 --> 01:55:47,229
past the last one not account if we do

1930
01:55:44,439 --> 01:55:49,829
we store account we do call it count

1931
01:55:47,229 --> 01:55:49,829
when we store that

1932
01:55:54,060 --> 01:55:59,950
maybe you could add the line to the

1933
01:55:56,770 --> 01:56:01,930
message or did it print the line numbers

1934
01:55:59,949 --> 01:56:05,559
it prints the line numbers for you the

1935
01:56:01,930 --> 01:56:06,909
compiler gives you an actual error here

1936
01:56:05,560 --> 01:56:09,880
that you can just jump to so we don't

1937
01:56:06,909 --> 01:56:12,880
need to print the line number does the

1938
01:56:09,880 --> 01:56:15,310
CT assert fail if you have two asserts

1939
01:56:12,880 --> 01:56:22,930
in two files in the same line yes I mean

1940
01:56:15,310 --> 01:56:30,280
I it will that's why people often do a

1941
01:56:22,930 --> 01:56:32,070
thing where you pass in a name here but

1942
01:56:30,279 --> 01:56:33,969
you can usually get away without it

1943
01:56:32,069 --> 01:56:41,829
because there's just not that many of

1944
01:56:33,970 --> 01:56:43,659
them I'm interested in knowing how

1945
01:56:41,829 --> 01:56:45,069
telling a patch or DLC is getting

1946
01:56:43,659 --> 01:56:46,920
installed and changes existing code

1947
01:56:45,069 --> 01:56:50,469
works would that be covered at the end

1948
01:56:46,920 --> 01:56:53,109
possibly in our particular case you can

1949
01:56:50,470 --> 01:56:54,730
add stuff to the game by just dropping

1950
01:56:53,109 --> 01:56:57,689
in a new HHA so we kind of already

1951
01:56:54,729 --> 01:56:57,689
covered how that works

1952
01:57:03,829 --> 01:57:09,750
so I guess what I would say is the patch

1953
01:57:08,100 --> 01:57:10,950
part where you patch an executable is

1954
01:57:09,750 --> 01:57:15,810
probably the ship into executable cause

1955
01:57:10,949 --> 01:57:17,819
our executables are tiny how did you

1956
01:57:15,810 --> 01:57:21,200
recompile reloaded yellow when load

1957
01:57:17,819 --> 01:57:24,779
library seems to keep a lock on the file

1958
01:57:21,199 --> 01:57:29,069
well you can just unload the library

1959
01:57:24,779 --> 01:57:31,170
right you just do free library but yeah

1960
01:57:29,069 --> 01:57:36,000
you can copy the DLL or just change the

1961
01:57:31,170 --> 01:57:37,409
DLL name why not use negative 1 instead

1962
01:57:36,000 --> 01:57:40,050
of 0 is there a length to get a harder

1963
01:57:37,409 --> 01:57:41,159
error you could yeah you could but the

1964
01:57:40,050 --> 01:57:47,430
error seemed pretty hard at the end

1965
01:57:41,159 --> 01:57:52,619
anyway so it seemed okay but yeah we

1966
01:57:47,430 --> 01:57:54,020
could do like that it seems like a good

1967
01:57:52,619 --> 01:57:57,108
idea

1968
01:57:54,020 --> 01:57:57,109
[Music]

1969
01:58:12,720 --> 01:58:15,500
yeah

1970
01:58:27,279 --> 01:58:33,380
long-long is not the same as in 6040

1971
01:58:29,988 --> 01:58:36,498
type it is 64 a bit but GCC clang will

1972
01:58:33,380 --> 01:58:39,800
still complain that llu does not match

1973
01:58:36,498 --> 01:58:41,960
you meant 6040 the proper way is to

1974
01:58:39,800 --> 01:58:45,170
include int type set H which provides

1975
01:58:41,960 --> 01:58:48,260
compiler specific PRI you 64 string

1976
01:58:45,170 --> 01:58:52,940
literal as a define so we need to do

1977
01:58:48,260 --> 01:59:04,429
printf percent it pry youth 64 comma are

1978
01:58:52,939 --> 01:59:08,828
you kidding me who did that and why

1979
01:59:04,429 --> 01:59:08,828
Martin's Martin's why would they do that

1980
01:59:10,090 --> 01:59:13,630
that's horrible

1981
01:59:15,158 --> 01:59:18,859
does the preprocessor parts before

1982
01:59:17,328 --> 01:59:25,029
include directive and then resolve the

1983
01:59:18,859 --> 01:59:31,238
line after the included parsed no it's

1984
01:59:25,029 --> 01:59:34,849
the it's the line it's well okay so I

1985
01:59:31,238 --> 01:59:38,078
should specify underscore underscore

1986
01:59:34,849 --> 01:59:41,269
line I'm just where underscore

1987
01:59:38,078 --> 01:59:44,448
technically expands to the line counter

1988
01:59:41,269 --> 01:59:45,230
that is set at that stage of

1989
01:59:44,448 --> 01:59:48,229
pre-processing

1990
01:59:45,229 --> 01:59:50,509
it doesn't even have to be related to

1991
01:59:48,229 --> 01:59:57,138
the file because you can actually change

1992
01:59:50,510 --> 02:00:00,130
it so let's suppose for example we did

1993
01:59:57,139 --> 02:00:00,130
like

1994
02:00:10,739 --> 02:00:44,109
or like this how can I make this

1995
02:00:24,100 --> 02:00:47,410
actually show me something trying to

1996
02:00:44,109 --> 02:00:51,729
think of how I can show the line number

1997
02:00:47,409 --> 02:00:53,260
in an error message cleanly and I'm not

1998
02:00:51,729 --> 02:01:05,069
thinking about I don't think you can't

1999
02:00:53,260 --> 02:01:05,070
do this can you yeah thank you

2000
02:01:07,640 --> 02:01:30,230
it's too bad ah probably can't do this

2001
02:01:11,970 --> 02:01:32,820
either I apologize for the incredibly

2002
02:01:30,229 --> 02:01:39,689
annoying actually it should only need to

2003
02:01:32,819 --> 02:01:49,799
be do this I probably can't do this

2004
02:01:39,689 --> 02:01:58,079
either can i all right uh so let's just

2005
02:01:49,800 --> 02:02:00,090
do this here's an error right and you

2006
02:01:58,079 --> 02:02:05,850
can see that it says it's on handmade

2007
02:02:00,090 --> 02:02:08,460
platform that h2 78 right so really

2008
02:02:05,850 --> 02:02:09,930
what's happening there is when the

2009
02:02:08,460 --> 02:02:13,140
preprocessor starts pre-processing a

2010
02:02:09,930 --> 02:02:16,320
file it sets the line counter and the

2011
02:02:13,140 --> 02:02:19,740
file to be that files name and the first

2012
02:02:16,319 --> 02:02:22,340
line but that can actually be changed at

2013
02:02:19,739 --> 02:02:27,869
any time so for example I can just do

2014
02:02:22,340 --> 02:02:29,369
this and say what I want the line number

2015
02:02:27,869 --> 02:02:30,840
and file name to be now I don't remember

2016
02:02:29,369 --> 02:02:37,949
which order they go in because you

2017
02:02:30,840 --> 02:02:44,159
hardly ever type this it's which order

2018
02:02:37,949 --> 02:02:45,960
is it digit sequence file name okay so

2019
02:02:44,159 --> 02:02:48,989
if I want to I can see this is now line

2020
02:02:45,960 --> 02:02:54,090
56 and now it says the error is on line

2021
02:02:48,989 --> 02:02:56,849
56 which hey it's not but it's not

2022
02:02:54,090 --> 02:02:58,560
something that the compiler maintains is

2023
02:02:56,850 --> 02:03:00,810
important it just says hey you told me

2024
02:02:58,560 --> 02:03:03,180
that that was the line so that's what I

2025
02:03:00,810 --> 02:03:07,160
printed out right similarly I can say

2026
02:03:03,180 --> 02:03:11,760
like you know oh it's actually on real

2027
02:03:07,159 --> 02:03:16,170
fruit-flavored H and now that's where it

2028
02:03:11,760 --> 02:03:18,720
thinks the error is right so the real

2029
02:03:16,170 --> 02:03:19,699
answer is that file in line are actually

2030
02:03:18,720 --> 02:03:22,340
just convention

2031
02:03:19,698 --> 02:03:24,529
that the compiler sets normally to the

2032
02:03:22,340 --> 02:03:26,569
beginning the name of the file and the

2033
02:03:24,529 --> 02:03:29,179
line counter at such a time when it goes

2034
02:03:26,569 --> 02:03:34,759
to process the file but you can set it

2035
02:03:29,179 --> 02:03:37,300
to whatever you want later right use at

2036
02:03:34,760 --> 02:03:37,300
your peril

2037
02:03:43,119 --> 02:03:47,619
the good news is that starting with c99

2038
02:03:45,159 --> 02:04:01,989
printf supports you modifier for size T

2039
02:03:47,619 --> 02:04:07,800
so zu or Z X would work doing the Z

2040
02:04:01,989 --> 02:04:07,800
modifier for size T I'm confused

2041
02:04:16,449 --> 02:04:23,029
so so are you saying that if I wanted to

2042
02:04:19,220 --> 02:04:33,880
I could could I do this could I do this

2043
02:04:23,029 --> 02:04:33,880
now and be okay like would that work

2044
02:04:46,559 --> 02:04:58,079
okay so that works that's cool I think

2045
02:04:55,500 --> 02:05:01,288
that's good Martin's will that be okay

2046
02:04:58,078 --> 02:05:04,109
across on GCC I am always afraid on GCC

2047
02:05:01,288 --> 02:05:06,859
because I know that they a lot of things

2048
02:05:04,109 --> 02:05:06,859
break over there

2049
02:05:16,369 --> 02:05:20,159
have you ever changed the line number or

2050
02:05:18,810 --> 02:05:22,320
file name in that way in an actual

2051
02:05:20,159 --> 02:05:24,479
project yes actually if you do

2052
02:05:22,319 --> 02:05:27,029
metaprogramming you probably will and

2053
02:05:24,479 --> 02:05:29,579
the reason is because you generate a C

2054
02:05:27,029 --> 02:05:32,340
file from a C file and you will want to

2055
02:05:29,579 --> 02:05:42,180
set the error to go to the original C

2056
02:05:32,340 --> 02:05:44,550
file potentially right okay Martin

2057
02:05:42,180 --> 02:05:47,159
zeusie modifier yeah yeah okay so I was

2058
02:05:44,550 --> 02:05:48,779
just asking can you just use zu then is

2059
02:05:47,159 --> 02:05:50,550
that just safe now

2060
02:05:48,779 --> 02:05:56,090
is that just the right way to go from

2061
02:05:50,550 --> 02:05:56,090
you know 11x forwards or not really

2062
02:06:04,599 --> 02:06:20,400
it will only work for a size t type not

2063
02:06:08,529 --> 02:06:34,599
a UN 6040 type okay but that's okay you

2064
02:06:20,399 --> 02:06:35,908
know it's at least compact right so you

2065
02:06:34,599 --> 02:06:41,909
know I'm okay with that

2066
02:06:35,908 --> 02:06:41,908
hmm would that be acceptable on GCC

2067
02:07:27,079 --> 02:07:31,899
yeah so hopefully that's okay all right

2068
02:07:28,909 --> 02:07:31,899
I'm gonna head and close it down

2069
02:07:41,460 --> 02:07:44,828
thank you everyone for joining me for

2070
02:07:43,420 --> 02:07:47,139
the episode a handmade hero it's been a

2071
02:07:44,828 --> 02:07:48,340
pleasure coding with you as always if

2072
02:07:47,139 --> 02:07:49,659
you want to file on the series at home

2073
02:07:48,340 --> 02:07:53,170
you can always pre-order the game on

2074
02:07:49,658 --> 02:07:54,848
handmade hero org and it comes with the

2075
02:07:53,170 --> 02:07:57,130
source code so that you can play around

2076
02:07:54,849 --> 02:07:58,900
with it yourself maybe you would like to

2077
02:07:57,130 --> 02:08:03,400
try your hand at writing out the HHA

2078
02:07:58,899 --> 02:08:06,908
files tomorrow before I do and you could

2079
02:08:03,399 --> 02:08:08,649
try that tonight in fact we also have

2080
02:08:06,908 --> 02:08:10,118
some other stuff you can I point out

2081
02:08:08,649 --> 02:08:11,348
today on the stream the handmade fund is

2082
02:08:10,118 --> 02:08:13,299
the place you can support community

2083
02:08:11,349 --> 02:08:15,010
projects and it comes with some fun

2084
02:08:13,300 --> 02:08:17,289
stuff for me as well like that tab

2085
02:08:15,010 --> 02:08:19,300
utility and the source code to it as

2086
02:08:17,289 --> 02:08:21,219
well as a bunch of other stuff we also

2087
02:08:19,300 --> 02:08:22,840
have a watch page you can use to watch a

2088
02:08:21,219 --> 02:08:24,309
serious it also has an anti episode

2089
02:08:22,840 --> 02:08:26,679
guide on it so for if you want to catch

2090
02:08:24,309 --> 02:08:29,139
up with old episodes the series you can

2091
02:08:26,679 --> 02:08:30,699
search it it's pretty awesome and jump

2092
02:08:29,139 --> 02:08:32,828
right to the places you want to go so

2093
02:08:30,698 --> 02:08:33,729
check out that watch page as well and if

2094
02:08:32,828 --> 02:08:34,868
you want to see any of the other

2095
02:08:33,729 --> 02:08:36,339
products for working out Molly Rocket

2096
02:08:34,868 --> 02:08:38,649
just click on the handmade hero head it

2097
02:08:36,340 --> 02:08:41,828
will get you to all of our pages nice

2098
02:08:38,649 --> 02:08:44,469
and quickly that's about it for today

2099
02:08:41,828 --> 02:08:47,049
I'll be back here tomorrow when I'll

2100
02:08:44,469 --> 02:08:49,510
just do the agency writing and I think

2101
02:08:47,050 --> 02:08:50,920
that'll be about it for HHA maintenance

2102
02:08:49,510 --> 02:08:53,050
hopefully from then on where you kind of

2103
02:08:50,920 --> 02:08:55,658
have nice smooth sailing for

2104
02:08:53,050 --> 02:08:56,889
manipulating our asset files and playing

2105
02:08:55,658 --> 02:08:58,598
with them however we want to which is

2106
02:08:56,889 --> 02:09:00,730
good we can even write a marriage

2107
02:08:58,599 --> 02:09:03,159
utility or other stuff like that really

2108
02:09:00,729 --> 02:09:06,459
quickly I think now that's about it I

2109
02:09:03,158 --> 02:09:08,198
hope to talk to y'all tomorrow about

2110
02:09:06,460 --> 02:09:10,328
that till then f and programming I'll

2111
02:09:08,198 --> 02:09:12,569
see everyone on the Internet take it

2112
02:09:10,328 --> 02:09:12,569
easy everybody

