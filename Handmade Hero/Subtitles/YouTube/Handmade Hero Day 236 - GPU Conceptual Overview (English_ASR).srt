1
00:00:00,030 --> 00:00:04,710
hurting hello everyone and welcome to

2
00:00:03,569 --> 00:00:08,068
hand made here of the show recode a

3
00:00:04,710 --> 00:00:10,919
complete game live on stream yesterday

4
00:00:08,069 --> 00:00:13,320
we took the bold step of deciding to

5
00:00:10,919 --> 00:00:16,109
actually initialize the hardware a 3d

6
00:00:13,320 --> 00:00:18,149
hardware acceleration because I kind of

7
00:00:16,109 --> 00:00:20,550
got tired of not having any vsync in our

8
00:00:18,149 --> 00:00:23,849
game and I don't really know of a way on

9
00:00:20,550 --> 00:00:27,060
Windows anymore to actually get somewhat

10
00:00:23,850 --> 00:00:29,609
reliable vsync without going through one

11
00:00:27,059 --> 00:00:32,789
of the 3d api's the in the old days

12
00:00:29,609 --> 00:00:35,219
there was like a direct raw API that you

13
00:00:32,789 --> 00:00:39,359
could use to get these things separately

14
00:00:35,219 --> 00:00:41,250
from you know separately from the 3d

15
00:00:39,359 --> 00:00:43,170
driver now it's not so easy to do that

16
00:00:41,250 --> 00:00:45,149
that's kind of all very legacy stuff and

17
00:00:43,170 --> 00:00:48,960
I don't know if you can really count on

18
00:00:45,149 --> 00:00:53,159
any of it anymore so we initialize that

19
00:00:48,960 --> 00:00:55,289
and today we have to do some work well

20
00:00:53,159 --> 00:00:56,578
we may have to put the work off because

21
00:00:55,289 --> 00:00:59,969
let me tell you what happened

22
00:00:56,579 --> 00:01:01,439
I found the HDMI capture card here it is

23
00:00:59,969 --> 00:01:03,390
this is the one we bought for handmade

24
00:01:01,439 --> 00:01:05,908
hero and I've been meaning to switch to

25
00:01:03,390 --> 00:01:07,049
it so that we could not have that we

26
00:01:05,909 --> 00:01:08,969
could have a separate machine that

27
00:01:07,049 --> 00:01:11,820
streams so that we wouldn't take up any

28
00:01:08,969 --> 00:01:13,829
system resources with OBS and have a you

29
00:01:11,819 --> 00:01:17,699
know cleaner way to look at profiles and

30
00:01:13,829 --> 00:01:19,109
stuff right but when I went to plug into

31
00:01:17,700 --> 00:01:21,719
this machine I discovered that this

32
00:01:19,109 --> 00:01:25,049
machine's graphics card is so old it

33
00:01:21,719 --> 00:01:31,019
does not have an HDMI output it's got

34
00:01:25,049 --> 00:01:34,920
DVI and DisplayPort so I need to get an

35
00:01:31,019 --> 00:01:37,769
adapter but I get an adapter or a

36
00:01:34,920 --> 00:01:39,509
different graphics card I guess once I

37
00:01:37,769 --> 00:01:40,408
do that then we will be able to do it so

38
00:01:39,509 --> 00:01:43,140
maybe I'll try to

39
00:01:40,409 --> 00:01:46,109
I might have one at the office I don't

40
00:01:43,140 --> 00:01:47,700
really know I'll look tomorrow or I can

41
00:01:46,109 --> 00:01:49,290
order one but it means that that's a

42
00:01:47,700 --> 00:01:52,409
little bit of a problem and I don't

43
00:01:49,290 --> 00:01:56,250
really know any way around it now it's

44
00:01:52,409 --> 00:01:59,280
possible that OBS for all I know might

45
00:01:56,250 --> 00:02:01,228
have some way of me being able to do

46
00:01:59,280 --> 00:02:03,659
some kind of a game capture thing here

47
00:02:01,228 --> 00:02:07,109
that would allow you to see it but I

48
00:02:03,659 --> 00:02:08,550
just don't know so unfortunately we may

49
00:02:07,109 --> 00:02:10,500
be a little bit blind because as you

50
00:02:08,550 --> 00:02:13,350
know when I run the game if you were

51
00:02:10,500 --> 00:02:14,939
here yesterday you know that what

52
00:02:13,349 --> 00:02:17,280
since when I run the game now is when we

53
00:02:14,939 --> 00:02:19,349
start drawing it OpenGL I can see it and

54
00:02:17,280 --> 00:02:21,390
you can we made a thing that just draws

55
00:02:19,349 --> 00:02:23,039
a pink screen I am seeing the pink

56
00:02:21,389 --> 00:02:28,139
screen you are not seeing the pink

57
00:02:23,039 --> 00:02:30,299
screen right now apparently so we're

58
00:02:28,139 --> 00:02:33,149
gonna go ahead and just do what we would

59
00:02:30,300 --> 00:02:34,860
need to do anyway and and I have a bunch

60
00:02:33,150 --> 00:02:36,780
of white blackboard stuff to talk about

61
00:02:34,860 --> 00:02:39,510
today anyway so that'll take up some

62
00:02:36,780 --> 00:02:40,710
time but hopefully we'll be able to at

63
00:02:39,509 --> 00:02:43,609
the CAPTCHA card working and then we can

64
00:02:40,710 --> 00:02:46,409
just go with that from now on if not

65
00:02:43,610 --> 00:02:48,390
we'll just start fussing with OBS to try

66
00:02:46,409 --> 00:02:51,569
and make it so it both captures the game

67
00:02:48,389 --> 00:02:53,189
OpenGL and the desktop either one of

68
00:02:51,569 --> 00:02:54,479
those two separately works okay I just

69
00:02:53,189 --> 00:02:55,889
don't know if there's a good way to make

70
00:02:54,479 --> 00:02:58,409
it so that you can fluidly switch

71
00:02:55,889 --> 00:03:01,289
between them unfortunately so that's the

72
00:02:58,409 --> 00:03:03,840
part that I don't actually know so let's

73
00:03:01,289 --> 00:03:05,280
go ahead and do a brief recap of where

74
00:03:03,840 --> 00:03:06,539
we're at and then I'm gonna go to the

75
00:03:05,280 --> 00:03:08,069
blackboard and kind of give you the

76
00:03:06,539 --> 00:03:11,129
overview of how 3d Hardware works

77
00:03:08,069 --> 00:03:12,659
because nothing I do with it will make

78
00:03:11,129 --> 00:03:13,769
any sense if you don't have a solid

79
00:03:12,659 --> 00:03:16,379
grounding of how that's actually

80
00:03:13,770 --> 00:03:18,540
supposed to work so okay if you remember

81
00:03:16,379 --> 00:03:21,329
from yesterday here is win32 handmade

82
00:03:18,539 --> 00:03:23,639
and we basically just went ahead and did

83
00:03:21,330 --> 00:03:27,690
a initialize opengl with 30 to

84
00:03:23,639 --> 00:03:28,889
initialize there it is and you remember

85
00:03:27,689 --> 00:03:31,289
the stuff we had to do is we had to set

86
00:03:28,889 --> 00:03:34,489
up a what we wanted sort of our our

87
00:03:31,289 --> 00:03:36,840
drawing format to be we had to tell

88
00:03:34,490 --> 00:03:39,900
Windows GDI that that was what we wanted

89
00:03:36,840 --> 00:03:41,400
our window to be set up as we then had

90
00:03:39,900 --> 00:03:43,349
to create an OpenGL context it's

91
00:03:41,400 --> 00:03:44,969
basically saying that sits on top of a

92
00:03:43,349 --> 00:03:47,909
Windows Device context that allows us to

93
00:03:44,969 --> 00:03:50,909
access OpenGL through then we set that

94
00:03:47,909 --> 00:03:52,919
up is the current one for our thread and

95
00:03:50,909 --> 00:03:55,669
then we were done and so then the only

96
00:03:52,919 --> 00:03:59,459
other thing we had to do is actually use

97
00:03:55,669 --> 00:04:01,409
that code somewhere and so we had just a

98
00:03:59,460 --> 00:04:03,570
very simple thing which set a drawing

99
00:04:01,409 --> 00:04:05,099
region it set what color we wanted to

100
00:04:03,569 --> 00:04:08,099
clear to and then cleared the color

101
00:04:05,099 --> 00:04:10,409
buffer to that color we then called swap

102
00:04:08,099 --> 00:04:15,120
buffers to present the drawing that we

103
00:04:10,409 --> 00:04:18,540
had and that was it right that's the end

104
00:04:15,120 --> 00:04:20,370
of it so hopefully that was all pretty

105
00:04:18,540 --> 00:04:22,260
understandable and now we need to take

106
00:04:20,370 --> 00:04:24,389
the step into actually calling the 3d

107
00:04:22,259 --> 00:04:26,039
graphics hardware in some way that does

108
00:04:24,389 --> 00:04:27,000
things we actually want because clearing

109
00:04:26,040 --> 00:04:28,230
the screen to pink is

110
00:04:27,000 --> 00:04:31,769
nice and all but it doesn't really help

111
00:04:28,230 --> 00:04:34,710
us get our game on the screen right okay

112
00:04:31,769 --> 00:04:46,669
so let's go ahead and see what day today

113
00:04:34,709 --> 00:04:49,349
is day 236 yeah let's talk about GPUs

114
00:04:46,670 --> 00:04:51,509
all right so what is a GPU you all

115
00:04:49,350 --> 00:04:53,280
basically know what they are if you've

116
00:04:51,509 --> 00:04:55,259
ever played a game before or your gamer

117
00:04:53,279 --> 00:04:56,279
in any way obviously you know about them

118
00:04:55,259 --> 00:04:59,969
even if you've never done any

119
00:04:56,279 --> 00:05:02,250
programming you know about them and we

120
00:04:59,970 --> 00:05:05,490
talked a little bit about them yesterday

121
00:05:02,250 --> 00:05:07,230
about how they sort of came out of the

122
00:05:05,490 --> 00:05:08,460
old concept that there was a graphics

123
00:05:07,230 --> 00:05:11,910
workstation which this is a computer

124
00:05:08,459 --> 00:05:14,189
that had dedicated hardware in it that

125
00:05:11,910 --> 00:05:16,620
was designed to do graphics operations

126
00:05:14,189 --> 00:05:19,529
and eventually those things became

127
00:05:16,620 --> 00:05:21,000
daughter cards to put into pcs with

128
00:05:19,529 --> 00:05:23,759
companies like 3d effects and Nvidia

129
00:05:21,000 --> 00:05:27,930
sort of bringing that to fruition and

130
00:05:23,759 --> 00:05:30,689
now that is just a standard expected

131
00:05:27,930 --> 00:05:32,668
thing to have in a PC to the point where

132
00:05:30,689 --> 00:05:34,110
they now are basically the same as those

133
00:05:32,668 --> 00:05:35,159
workstations back then they're much more

134
00:05:34,110 --> 00:05:36,389
powerful than the workstations but

135
00:05:35,160 --> 00:05:38,400
they're basically the same conceptually

136
00:05:36,389 --> 00:05:41,879
in that now it's basically not even

137
00:05:38,399 --> 00:05:44,279
possible to really buy a PC that doesn't

138
00:05:41,879 --> 00:05:48,089
have a dedicated 3d hardware

139
00:05:44,279 --> 00:05:51,599
acceleration part on it even if you

140
00:05:48,089 --> 00:05:56,759
don't buy a big beefy desktop style one

141
00:05:51,600 --> 00:05:58,439
then your CPU now oftentimes has a 3d

142
00:05:56,759 --> 00:06:02,370
accelerator built into it right like

143
00:05:58,439 --> 00:06:06,660
intel oftentimes now ships the cpu is

144
00:06:02,370 --> 00:06:09,600
you know 30% of the dye and the GPU is

145
00:06:06,660 --> 00:06:11,580
70% of the dye so a huge portion of your

146
00:06:09,600 --> 00:06:14,820
actual physical chip that you buy from

147
00:06:11,579 --> 00:06:17,009
Intel is actually just a GPU on there so

148
00:06:14,819 --> 00:06:19,259
in in pretty much all respects now

149
00:06:17,009 --> 00:06:22,228
anything that you buy even a cell phone

150
00:06:19,259 --> 00:06:24,599
these days often times looks a lot more

151
00:06:22,228 --> 00:06:26,039
conceptually like an old silicon

152
00:06:24,600 --> 00:06:29,040
graphics workstation in that sense that

153
00:06:26,040 --> 00:06:32,930
there is dedicated hardware for 3d

154
00:06:29,040 --> 00:06:36,120
graphics built in just and it's expected

155
00:06:32,930 --> 00:06:39,150
so that's the world we live in now but

156
00:06:36,120 --> 00:06:40,949
we did not grow up that way we did not

157
00:06:39,149 --> 00:06:44,459
start out in that

158
00:06:40,949 --> 00:06:47,969
you know with that basic design and so

159
00:06:44,459 --> 00:06:50,009
it's really kind of uncomfortable the

160
00:06:47,970 --> 00:06:53,010
way that the system is architected for

161
00:06:50,009 --> 00:06:55,199
CPUs and GPUs it's kind of a very legacy

162
00:06:53,009 --> 00:06:56,789
very clunky way that these two things

163
00:06:55,199 --> 00:07:01,170
work and so let me give you a little bit

164
00:06:56,790 --> 00:07:03,450
of a background on how that works so you

165
00:07:01,170 --> 00:07:04,890
know very much about the cpu now if

166
00:07:03,449 --> 00:07:06,329
you've been watching handmade hero we

167
00:07:04,889 --> 00:07:11,699
know that basically there is you know

168
00:07:06,329 --> 00:07:14,609
main memory right it's a big old chunk

169
00:07:11,699 --> 00:07:17,240
of memory you know this is often times

170
00:07:14,610 --> 00:07:20,610
something like 16 gigabytes today right

171
00:07:17,240 --> 00:07:23,280
and then you've got a CPU this is like a

172
00:07:20,610 --> 00:07:26,040
core i7 or something over here and

173
00:07:23,279 --> 00:07:28,199
there's a little bus right that allows

174
00:07:26,040 --> 00:07:30,210
the chip to access this memory and to

175
00:07:28,199 --> 00:07:31,709
put things you know send things and get

176
00:07:30,209 --> 00:07:33,719
things back from this main memory right

177
00:07:31,709 --> 00:07:35,759
everything's grant and then there's some

178
00:07:33,720 --> 00:07:37,860
like IO ports or who knows what else is

179
00:07:35,759 --> 00:07:39,029
happening on here and and maybe some

180
00:07:37,860 --> 00:07:40,620
other people are viewing this memory

181
00:07:39,029 --> 00:07:42,119
like you know maybe the USB controller

182
00:07:40,620 --> 00:07:43,530
can look at it who knows if it can maybe

183
00:07:42,120 --> 00:07:44,939
it talked about the CPU I don't know

184
00:07:43,529 --> 00:07:46,409
doesn't matter we don't care about any

185
00:07:44,939 --> 00:07:48,870
of those things the only part we care

186
00:07:46,410 --> 00:07:50,010
about is this part right here which is

187
00:07:48,870 --> 00:07:53,240
to say that this is what we've been

188
00:07:50,009 --> 00:07:55,740
working with almost entirely so far and

189
00:07:53,240 --> 00:07:57,990
with this particular system the way that

190
00:07:55,740 --> 00:07:59,220
it is right now with this diagram

191
00:07:57,990 --> 00:08:00,629
there'd never be any way to get

192
00:07:59,220 --> 00:08:03,810
something on the screen right the

193
00:08:00,629 --> 00:08:05,699
screens over here here it is right and

194
00:08:03,810 --> 00:08:07,319
somehow handmade Hiro's been showing up

195
00:08:05,699 --> 00:08:09,000
on there there about but we don't even

196
00:08:07,319 --> 00:08:10,349
really know how and the reason that we

197
00:08:09,000 --> 00:08:11,790
don't know how even though this is like

198
00:08:10,350 --> 00:08:13,860
we've been doing things as low-level as

199
00:08:11,790 --> 00:08:16,560
we possibly can on a PC the reason that

200
00:08:13,860 --> 00:08:19,410
we don't know how is because at some

201
00:08:16,560 --> 00:08:22,290
point the memory that we're trying to

202
00:08:19,410 --> 00:08:23,189
display actually can't live in this main

203
00:08:22,290 --> 00:08:25,920
memory anymore

204
00:08:23,189 --> 00:08:28,110
on this particular machine and the

205
00:08:25,920 --> 00:08:30,720
reason for that is because the actual

206
00:08:28,110 --> 00:08:33,960
memory where the display actually lives

207
00:08:30,720 --> 00:08:37,259
is over on the GPU so here's the GPU and

208
00:08:33,960 --> 00:08:39,030
here is its memory right on the card

209
00:08:37,259 --> 00:08:41,009
this is actually physically on the GPU

210
00:08:39,029 --> 00:08:42,659
card right and this is something you

211
00:08:41,009 --> 00:08:44,970
know often times like one gigabyte it's

212
00:08:42,659 --> 00:08:49,309
smaller it's almost always smaller than

213
00:08:44,970 --> 00:08:52,680
this right now what has to happen and

214
00:08:49,309 --> 00:08:54,579
the reason this has to occur is because

215
00:08:52,679 --> 00:08:57,579
the physical plug

216
00:08:54,580 --> 00:09:01,800
like literally the like the cable the

217
00:08:57,580 --> 00:09:04,540
HDMI cable or in our case the DVI cable

218
00:09:01,799 --> 00:09:06,519
he's connected to this memory right like

219
00:09:04,539 --> 00:09:07,839
this is the card this is the thing in

220
00:09:06,519 --> 00:09:09,909
the computer that has the plug on it

221
00:09:07,840 --> 00:09:11,350
that connects to the screen so if you're

222
00:09:09,909 --> 00:09:15,899
going to show something on the screen

223
00:09:11,350 --> 00:09:20,889
that something has to be in this memory

224
00:09:15,899 --> 00:09:23,649
so what happens is at some point windows

225
00:09:20,889 --> 00:09:27,490
right Microsoft Windows running on the

226
00:09:23,649 --> 00:09:30,519
CPU when we have asked it to has been

227
00:09:27,490 --> 00:09:34,419
moving our bitmap right this bitmap that

228
00:09:30,519 --> 00:09:38,340
we drew has been moving it silently for

229
00:09:34,419 --> 00:09:42,639
us over to the memory here and then this

230
00:09:38,340 --> 00:09:44,800
GPU the card has been transferring it

231
00:09:42,639 --> 00:09:47,199
over the HDMI cable to the screen where

232
00:09:44,799 --> 00:09:49,149
it is displayed and there's actually

233
00:09:47,200 --> 00:09:51,280
Hardware in here that's designed to read

234
00:09:49,149 --> 00:09:52,990
out of memory like this and encode it

235
00:09:51,279 --> 00:09:54,730
into an HDMI signal and put it out the

236
00:09:52,990 --> 00:09:57,129
thing like that's on the that's actually

237
00:09:54,730 --> 00:09:58,450
part of the GPUs chipset right there's a

238
00:09:57,129 --> 00:10:00,429
little chip in here that'll do that or

239
00:09:58,450 --> 00:10:02,830
something it used to be called a DAC

240
00:10:00,429 --> 00:10:04,569
right a digital analog converter because

241
00:10:02,830 --> 00:10:05,950
the signal that was going out was analog

242
00:10:04,570 --> 00:10:07,150
but I don't think they really call it

243
00:10:05,950 --> 00:10:08,560
that anymore I don't know maybe they do

244
00:10:07,149 --> 00:10:11,139
because it's still sort of an analogue

245
00:10:08,559 --> 00:10:13,719
thing but since HDMI is digital it's not

246
00:10:11,139 --> 00:10:15,039
the word DAC is a little ambiguous there

247
00:10:13,720 --> 00:10:16,570
but I don't know I'm not a hardware guy

248
00:10:15,039 --> 00:10:17,589
I don't know the terminology they use

249
00:10:16,570 --> 00:10:20,920
for those sort of things but that's

250
00:10:17,590 --> 00:10:22,629
what's happening okay so what we've been

251
00:10:20,919 --> 00:10:25,029
doing so far is we've basically just

252
00:10:22,629 --> 00:10:27,460
been asking Windows hey look here's our

253
00:10:25,029 --> 00:10:28,720
bitmap that we made ourselves we we have

254
00:10:27,460 --> 00:10:30,490
it in a particular location in memory

255
00:10:28,720 --> 00:10:33,759
and you remember where this was

256
00:10:30,490 --> 00:10:36,460
happening this was happening where we

257
00:10:33,759 --> 00:10:37,960
were calling stretch di bits or anything

258
00:10:36,460 --> 00:10:40,030
like that so right here

259
00:10:37,960 --> 00:10:43,629
yeah win32 display buffer and window

260
00:10:40,029 --> 00:10:45,129
this call right here for this call right

261
00:10:43,629 --> 00:10:47,679
here depending on which branch we were

262
00:10:45,129 --> 00:10:50,049
in that's what did that we gave it the

263
00:10:47,679 --> 00:10:52,359
address of where this was we told it how

264
00:10:50,049 --> 00:10:54,219
big it was and then it moved it over to

265
00:10:52,360 --> 00:10:58,930
the GPU and the GPU displayed it that's

266
00:10:54,220 --> 00:11:00,850
what was actually happening okay now on

267
00:10:58,929 --> 00:11:03,599
some computers that doesn't have to

268
00:11:00,850 --> 00:11:08,230
happen if we were in a situation instead

269
00:11:03,600 --> 00:11:09,779
where we had a CPU GPU combo right

270
00:11:08,230 --> 00:11:13,450
so let's say this is a sky like part

271
00:11:09,779 --> 00:11:15,579
right so the latest Intel chip it's got

272
00:11:13,450 --> 00:11:17,710
one of these on it they have a shared

273
00:11:15,580 --> 00:11:19,300
memory architecture potentially which

274
00:11:17,710 --> 00:11:22,060
means that that picture that we drew

275
00:11:19,299 --> 00:11:25,990
with the CPU is actually in the same

276
00:11:22,059 --> 00:11:28,389
memory as could get scanned out right by

277
00:11:25,990 --> 00:11:31,539
that HDMI cable essentially the HDMI

278
00:11:28,389 --> 00:11:34,720
cable or the DVI X cable in our case is

279
00:11:31,539 --> 00:11:39,370
actually plugged in to the unit on the

280
00:11:34,720 --> 00:11:41,139
computer that has the main memory and so

281
00:11:39,370 --> 00:11:43,120
it's not always the case that this

282
00:11:41,139 --> 00:11:45,100
transfer has to happen it's only the

283
00:11:43,120 --> 00:11:47,259
case if the GPU is on a separate card

284
00:11:45,100 --> 00:11:49,300
and in this machine it is so this is

285
00:11:47,259 --> 00:11:52,299
like a stipple desktop setup but a

286
00:11:49,299 --> 00:11:53,889
typical mobile setup right might look

287
00:11:52,299 --> 00:11:58,120
more like this where there's just one

288
00:11:53,889 --> 00:12:01,029
shared bank of memory okay

289
00:11:58,120 --> 00:12:03,850
so let's talk about what this means for

290
00:12:01,029 --> 00:12:05,289
how things have to happen all right

291
00:12:03,850 --> 00:12:07,720
because this is the diagram that

292
00:12:05,289 --> 00:12:09,519
concerns us and the reason that this is

293
00:12:07,720 --> 00:12:12,009
the diagram that concerns us instead of

294
00:12:09,519 --> 00:12:13,870
this one is because on the PC you are

295
00:12:12,009 --> 00:12:16,240
often on a high-end gaming machine

296
00:12:13,870 --> 00:12:17,769
looking at this so when you're talking

297
00:12:16,240 --> 00:12:19,810
about optimizing you're usually talking

298
00:12:17,769 --> 00:12:22,689
about optimizing for this because this

299
00:12:19,809 --> 00:12:24,849
is the thing where the you know Broz got

300
00:12:22,690 --> 00:12:27,190
to GeForce Titans in there or whatever

301
00:12:24,850 --> 00:12:30,129
so there's actually more there's more

302
00:12:27,190 --> 00:12:31,660
than one of these right so this is the

303
00:12:30,129 --> 00:12:33,820
thing you're looking at for the really

304
00:12:31,659 --> 00:12:35,370
high-end optimizations right this is the

305
00:12:33,820 --> 00:12:38,440
thing you're looking at at the lower end

306
00:12:35,370 --> 00:12:40,539
but because this is the worst-case

307
00:12:38,440 --> 00:12:43,450
meaning this is the most disconnected

308
00:12:40,539 --> 00:12:45,699
things can be and it's an important case

309
00:12:43,450 --> 00:12:47,020
this is the one that everything's

310
00:12:45,700 --> 00:12:49,780
designed around for the most part this

311
00:12:47,019 --> 00:12:52,210
is the this the worst case is this where

312
00:12:49,779 --> 00:12:54,009
we have two different sets of memory and

313
00:12:52,210 --> 00:12:55,389
so even though they're playing machines

314
00:12:54,009 --> 00:12:57,069
out there that just have one unified

315
00:12:55,389 --> 00:12:59,710
memory bank for everything we have to

316
00:12:57,070 --> 00:13:02,560
deal with this diagram so even when you

317
00:12:59,710 --> 00:13:04,480
program this guy you're still

318
00:13:02,559 --> 00:13:06,309
effectively programming it as if it

319
00:13:04,480 --> 00:13:09,009
looked like this and the reason is

320
00:13:06,309 --> 00:13:10,599
because you you know you're trying to

321
00:13:09,009 --> 00:13:13,090
ship one game that runs on several

322
00:13:10,600 --> 00:13:14,830
different types of GPU right and so if

323
00:13:13,090 --> 00:13:16,360
you pretended everything was always in

324
00:13:14,830 --> 00:13:17,710
main memory it would come to a

325
00:13:16,360 --> 00:13:20,110
screeching halt when it tried to run on

326
00:13:17,710 --> 00:13:21,370
one of these so this is the diagram that

327
00:13:20,110 --> 00:13:22,029
concerns us which means what we're

328
00:13:21,370 --> 00:13:24,759
looking at you

329
00:13:22,029 --> 00:13:29,709
is something that essentially looks like

330
00:13:24,759 --> 00:13:33,610
this so here's the CPU and here's system

331
00:13:29,710 --> 00:13:33,940
we'll call the system Ram here is what

332
00:13:33,610 --> 00:13:40,529
we'll call

333
00:13:33,940 --> 00:13:43,900
oops graphics RAM and here's the GPU and

334
00:13:40,529 --> 00:13:47,350
these two things are connected by the

335
00:13:43,899 --> 00:13:49,179
PCI bus right that's that slot that you

336
00:13:47,350 --> 00:13:52,360
plug things into right where you plug

337
00:13:49,179 --> 00:13:54,370
the graphics card into so the GPU has

338
00:13:52,360 --> 00:13:56,649
fast access to everything in here the

339
00:13:54,370 --> 00:13:59,230
CPU has fast text everything in here but

340
00:13:56,649 --> 00:14:01,120
everything that's not right so if the

341
00:13:59,230 --> 00:14:02,740
GPU wanted something from system RAM or

342
00:14:01,120 --> 00:14:06,250
the CPU wants to read graphics Ram it's

343
00:14:02,740 --> 00:14:08,620
got to go over the PCI bus maybe again

344
00:14:06,250 --> 00:14:10,330
if it's a skylake chip if it's a Intel

345
00:14:08,620 --> 00:14:12,399
integrated graphics part something like

346
00:14:10,330 --> 00:14:14,080
that it does not because it's all system

347
00:14:12,399 --> 00:14:15,519
Ram but assuming that we're talking

348
00:14:14,080 --> 00:14:17,889
about something that's like oh this is

349
00:14:15,519 --> 00:14:20,559
an nvidia part and this is an intel part

350
00:14:17,889 --> 00:14:23,259
well then there's this bus and so

351
00:14:20,559 --> 00:14:25,239
there's a speed hit that you take

352
00:14:23,259 --> 00:14:27,159
transferring these two and oftentimes

353
00:14:25,240 --> 00:14:29,200
the speed it isn't so much about

354
00:14:27,159 --> 00:14:31,629
bandwidth in that way that memory

355
00:14:29,200 --> 00:14:34,030
bandwidth is often very good it's it's

356
00:14:31,629 --> 00:14:36,309
rarely about how fast you can transfer

357
00:14:34,029 --> 00:14:38,169
things it's more about the latency it's

358
00:14:36,309 --> 00:14:39,909
more about how long it takes from the

359
00:14:38,169 --> 00:14:43,389
time you start to the time you finish

360
00:14:39,909 --> 00:14:47,259
right it's kind of like a very very big

361
00:14:43,389 --> 00:14:48,460
pipe right that's very long so it's once

362
00:14:47,259 --> 00:14:50,049
you know you're gonna send something you

363
00:14:48,460 --> 00:14:52,000
can send a lot of stuff down it and it

364
00:14:50,049 --> 00:14:54,399
all gets there to the end quite nicely

365
00:14:52,000 --> 00:14:55,809
right but the distance scott traverse is

366
00:14:54,399 --> 00:14:57,279
quite long so from the time you start

367
00:14:55,809 --> 00:14:59,229
sending it if you gotta wait a while to

368
00:14:57,279 --> 00:15:01,720
get it there right and that's pretty

369
00:14:59,230 --> 00:15:05,769
important this is a this there's a lot

370
00:15:01,720 --> 00:15:07,690
of latency in this in this part right so

371
00:15:05,769 --> 00:15:09,370
you got a lot of bandwidth you can send

372
00:15:07,690 --> 00:15:10,870
a lot of stuff down but it takes a while

373
00:15:09,370 --> 00:15:13,690
from when you decide you're gonna send

374
00:15:10,870 --> 00:15:15,970
it you you it's it's not like it normal

375
00:15:13,690 --> 00:15:19,450
memory it's it's you know quite a bit

376
00:15:15,970 --> 00:15:21,790
more so anyway this is the diagram that

377
00:15:19,450 --> 00:15:23,140
we're concerned about and let's just

378
00:15:21,789 --> 00:15:25,629
talk briefly so that you kind of

379
00:15:23,139 --> 00:15:27,370
understand in fact I don't know maybe

380
00:15:25,629 --> 00:15:28,779
since maybe today might be a good day to

381
00:15:27,370 --> 00:15:30,580
just get all of us out in the open so

382
00:15:28,779 --> 00:15:31,689
you kind of have a good feel for it

383
00:15:30,580 --> 00:15:33,129
since we don't have the capture card

384
00:15:31,690 --> 00:15:34,270
anyway maybe we'll just do all

385
00:15:33,129 --> 00:15:35,889
blackboard

386
00:15:34,269 --> 00:15:37,178
who knows I'll go in

387
00:15:35,889 --> 00:15:38,829
as much the detail as I think is

388
00:15:37,178 --> 00:15:42,879
warranted as we kind of go through here

389
00:15:38,828 --> 00:15:44,528
all right so what is the brick like what

390
00:15:42,879 --> 00:15:46,959
what are these things why do we even

391
00:15:44,528 --> 00:15:49,178
have them right I said I used terms to

392
00:15:46,958 --> 00:15:52,028
to explain sort of where it comes from

393
00:15:49,178 --> 00:15:54,519
and implicit in those terms are a whole

394
00:15:52,028 --> 00:15:56,350
bunch of decisions and reasons that we

395
00:15:54,519 --> 00:16:00,009
haven't really stated explicitly so for

396
00:15:56,350 --> 00:16:02,589
example why do we need this DP you like

397
00:16:00,009 --> 00:16:04,269
like why can't this CPU just do the

398
00:16:02,589 --> 00:16:06,249
things that we needed to do like what

399
00:16:04,269 --> 00:16:10,629
what is the idea behind it like what's

400
00:16:06,249 --> 00:16:12,819
going on here right and so the reason is

401
00:16:10,629 --> 00:16:14,739
because these two devices are designed

402
00:16:12,818 --> 00:16:16,868
for very different purposes and they

403
00:16:14,739 --> 00:16:18,970
make different trade-offs both in terms

404
00:16:16,869 --> 00:16:20,259
of their memory architectures and in

405
00:16:18,970 --> 00:16:23,230
terms of their instruction set

406
00:16:20,259 --> 00:16:26,470
architectures so they are getting closer

407
00:16:23,230 --> 00:16:29,589
together but they started out very far

408
00:16:26,470 --> 00:16:31,749
apart so I want to sort of draw a little

409
00:16:29,589 --> 00:16:34,029
bit of a faux diagram here I don't mean

410
00:16:31,749 --> 00:16:37,509
for this to be highly technical but I

411
00:16:34,028 --> 00:16:44,860
want to say something like this is a CPU

412
00:16:37,509 --> 00:16:46,749
in 1999 and this is a GPU in 1999 okay

413
00:16:44,860 --> 00:16:50,649
so before just before the turn of the

414
00:16:46,749 --> 00:16:56,048
millennium and I would say that right

415
00:16:50,649 --> 00:16:59,889
here this might be the just we'll call

416
00:16:56,048 --> 00:17:04,739
it the PU the processing unit of 2030

417
00:16:59,889 --> 00:17:04,739
let's say I don't know maybe who knows

418
00:17:04,740 --> 00:17:10,209
essentially what has happened over the

419
00:17:06,880 --> 00:17:12,399
years is CPUs and GPUs kind of move

420
00:17:10,209 --> 00:17:15,818
towards each other if that makes sense

421
00:17:12,398 --> 00:17:18,369
so they started out very different and

422
00:17:15,818 --> 00:17:21,158
they're becoming very similar so part of

423
00:17:18,369 --> 00:17:24,129
the understanding of why we have two

424
00:17:21,159 --> 00:17:26,528
different types of chips is not as

425
00:17:24,130 --> 00:17:28,750
readily apparent if you look at what the

426
00:17:26,528 --> 00:17:30,638
chips look like today but it's much

427
00:17:28,750 --> 00:17:33,929
easier to understand if you look at what

428
00:17:30,638 --> 00:17:38,259
they looked like a long time ago so a

429
00:17:33,929 --> 00:17:40,630
long time ago what was a CPU well a CPU

430
00:17:38,259 --> 00:17:44,259
was something that was mostly operating

431
00:17:40,630 --> 00:17:46,000
right single instruction single data you

432
00:17:44,259 --> 00:17:48,190
might say right remember we've talked

433
00:17:46,000 --> 00:17:49,359
about Cindy right which is like single

434
00:17:48,190 --> 00:17:49,600
instruction multiple do those those big

435
00:17:49,359 --> 00:17:51,339
why

436
00:17:49,599 --> 00:17:53,019
vectors it was mostly something that

437
00:17:51,339 --> 00:17:55,569
looked more like this where it was like

438
00:17:53,019 --> 00:17:57,819
saying oh I have stuff like you know a

439
00:17:55,569 --> 00:18:01,079
move instruction I have to move like one

440
00:17:57,819 --> 00:18:03,819
32-bit value you know out to some memory

441
00:18:01,079 --> 00:18:05,529
somewhere I'm gonna pull another one in

442
00:18:03,819 --> 00:18:08,918
I'm gonna look at its contents I'm gonna

443
00:18:05,529 --> 00:18:10,869
do a branch right so they tended to be

444
00:18:08,919 --> 00:18:18,309
things that were built for serial

445
00:18:10,869 --> 00:18:22,750
execution right so fast a single thread

446
00:18:18,308 --> 00:18:24,908
you know single line execution so

447
00:18:22,750 --> 00:18:26,200
basically you know CPUs what they tended

448
00:18:24,909 --> 00:18:28,179
to look like is I'm trying to do a

449
00:18:26,200 --> 00:18:30,250
series of operations as fast as I can

450
00:18:28,179 --> 00:18:32,740
those operations operate on one thing at

451
00:18:30,250 --> 00:18:36,150
a time and they're very varied it's a

452
00:18:32,740 --> 00:18:39,970
very random heterogeneous right

453
00:18:36,150 --> 00:18:44,038
instruction stream there's no rhyme or

454
00:18:39,970 --> 00:18:47,110
reason to it it's just whatever okay

455
00:18:44,038 --> 00:18:49,990
meanwhile a GPU is an incredibly

456
00:18:47,109 --> 00:18:52,509
incredibly specific thing and what that

457
00:18:49,990 --> 00:18:57,038
is trying to do is just trying to take

458
00:18:52,509 --> 00:18:59,589
blocks you know and it's trying to fill

459
00:18:57,038 --> 00:19:01,658
them in with pixels so it's just trying

460
00:18:59,589 --> 00:19:03,099
to figure out what on screen is supposed

461
00:19:01,659 --> 00:19:06,220
to fill with pixels and I'm trying to

462
00:19:03,099 --> 00:19:07,449
fill them with predictable linearly or

463
00:19:06,220 --> 00:19:10,839
sometimes perspectively

464
00:19:07,450 --> 00:19:12,880
interpolated color values right so most

465
00:19:10,839 --> 00:19:14,500
of what I need to do is I know I've got

466
00:19:12,880 --> 00:19:16,990
basically these things called textures

467
00:19:14,500 --> 00:19:20,140
which are like images I'm pulling from

468
00:19:16,990 --> 00:19:22,390
very regular very predictable parts of

469
00:19:20,140 --> 00:19:25,720
them right like I'm pulling from

470
00:19:22,390 --> 00:19:27,850
specific coordinates to kind of map them

471
00:19:25,720 --> 00:19:29,019
into here and I'm filling them out sort

472
00:19:27,849 --> 00:19:30,849
of stretching them a little bit just

473
00:19:29,019 --> 00:19:32,769
like we wrote exactly like the kind of

474
00:19:30,849 --> 00:19:34,178
code we wrote but even a little more

475
00:19:32,769 --> 00:19:37,450
primitive than that if that makes sense

476
00:19:34,179 --> 00:19:40,150
and it's very predictable this texture

477
00:19:37,450 --> 00:19:42,669
stuff this is read-only you never write

478
00:19:40,150 --> 00:19:45,190
to it this is basically right only for

479
00:19:42,669 --> 00:19:46,659
the most part but it does have blending

480
00:19:45,190 --> 00:19:48,548
right it's got the ability to like kind

481
00:19:46,659 --> 00:19:49,870
of blend on top but for the most part

482
00:19:48,548 --> 00:19:52,480
you never even really read from this

483
00:19:49,869 --> 00:19:54,129
thing right and that's sort of where

484
00:19:52,480 --> 00:19:55,720
things were you know I don't know the

485
00:19:54,130 --> 00:19:59,230
exact dates here but you know pre

486
00:19:55,720 --> 00:20:01,569
millennium okay and so this thing had a

487
00:19:59,230 --> 00:20:03,160
very specific memory usage it was try it

488
00:20:01,569 --> 00:20:05,409
did very few right

489
00:20:03,160 --> 00:20:07,150
to the texture area and almost

490
00:20:05,410 --> 00:20:09,700
exclusively tons and tons of rights to

491
00:20:07,150 --> 00:20:11,769
this stuff it always kind of read

492
00:20:09,700 --> 00:20:14,049
because of bilinear filtering it always

493
00:20:11,769 --> 00:20:15,460
read and like little quadrants it knew

494
00:20:14,049 --> 00:20:16,960
that it would it would tend to read

495
00:20:15,460 --> 00:20:18,970
little sections out of this right it

496
00:20:16,960 --> 00:20:21,009
would rarely would it read like a whole

497
00:20:18,970 --> 00:20:22,809
row of a texture it much more often

498
00:20:21,009 --> 00:20:24,490
reads like a little chunk of a texture

499
00:20:22,809 --> 00:20:26,139
for whatever part was on the screen it

500
00:20:24,490 --> 00:20:27,460
knows when it's filling it's filling

501
00:20:26,140 --> 00:20:29,200
like generally these little regions

502
00:20:27,460 --> 00:20:30,759
about you know the size of what a

503
00:20:29,200 --> 00:20:33,759
triangle should roughly be on the screen

504
00:20:30,759 --> 00:20:39,369
and so and so forth right very very

505
00:20:33,759 --> 00:20:42,730
regular so these things looked very

506
00:20:39,369 --> 00:20:46,000
different back then as they started to

507
00:20:42,730 --> 00:20:48,640
become more general-purpose here and as

508
00:20:46,000 --> 00:20:51,579
CPUs started running into like heat bear

509
00:20:48,640 --> 00:20:55,060
you know barriers are of how fast they

510
00:20:51,579 --> 00:20:57,099
could run single pieces of code these

511
00:20:55,059 --> 00:20:59,589
two have moved much closer together so

512
00:20:57,099 --> 00:21:02,589
over the years when we got you know to

513
00:20:59,589 --> 00:21:06,129
say where we are right now where it's

514
00:21:02,589 --> 00:21:09,869
like you know it's 2016 and here is GPU

515
00:21:06,130 --> 00:21:13,030
2016 and CPU 2016 these things look

516
00:21:09,869 --> 00:21:17,469
remarkably remarkably similar right the

517
00:21:13,029 --> 00:21:19,180
CPU has either an 8 or a 16 wide right

518
00:21:17,470 --> 00:21:22,839
Cindy unit we talked about this

519
00:21:19,180 --> 00:21:26,740
GPUs actually look a lot like this they

520
00:21:22,839 --> 00:21:30,429
have either a 16 or 32 wide Cindy unit

521
00:21:26,740 --> 00:21:31,960
usually and there's been you know now

522
00:21:30,430 --> 00:21:34,990
there's so much stuff that happens with

523
00:21:31,960 --> 00:21:36,610
shaders and you know we added shaders

524
00:21:34,990 --> 00:21:39,490
which are basically programs the GPU can

525
00:21:36,609 --> 00:21:41,469
act execute we added unordered access

526
00:21:39,490 --> 00:21:43,000
views at compute shaders that could

527
00:21:41,470 --> 00:21:44,799
write to anywhere in memory can read

528
00:21:43,000 --> 00:21:47,430
from every memory basically what

529
00:21:44,799 --> 00:21:51,879
happened is a huge amount of

530
00:21:47,430 --> 00:21:57,610
general-purpose stuff crept into these

531
00:21:51,880 --> 00:22:02,110
and a huge amount of like perf specific

532
00:21:57,609 --> 00:22:04,029
stuff crept into these and so you

533
00:22:02,109 --> 00:22:06,899
started seeing them converge to

534
00:22:04,029 --> 00:22:10,119
something which both could do both right

535
00:22:06,900 --> 00:22:12,250
both the CPU and a GPU are now sort of

536
00:22:10,119 --> 00:22:14,379
set up to do both things and there's

537
00:22:12,250 --> 00:22:16,990
just some because of their legacy that

538
00:22:14,380 --> 00:22:20,500
they do worse than others on either side

539
00:22:16,990 --> 00:22:21,940
okay and so you know a lot about this

540
00:22:20,500 --> 00:22:24,009
architecture we've talked a lot about

541
00:22:21,940 --> 00:22:25,360
this and so what I'd like to do is kind

542
00:22:24,009 --> 00:22:26,829
of give you a perspective of like sort

543
00:22:25,359 --> 00:22:28,898
of what this architecture tour sort of

544
00:22:26,829 --> 00:22:31,389
looks like to have at a very high level

545
00:22:28,898 --> 00:22:33,459
because we don't even really know like

546
00:22:31,390 --> 00:22:35,860
Nvidia won't tell us exactly how their

547
00:22:33,460 --> 00:22:38,860
chip works internally right so we don't

548
00:22:35,859 --> 00:22:41,459
necessarily know but we can give sort of

549
00:22:38,859 --> 00:22:45,129
some examples of sort of how it works

550
00:22:41,460 --> 00:22:46,929
all right so now instead of a device

551
00:22:45,130 --> 00:22:48,610
that's purpose-built for just doing this

552
00:22:46,929 --> 00:22:50,830
like filling triangles in exactly this

553
00:22:48,609 --> 00:22:52,599
way and reading from texture memory and

554
00:22:50,829 --> 00:22:54,548
doing a very specific set of operations

555
00:22:52,599 --> 00:22:56,079
on them all that's out the window

556
00:22:54,548 --> 00:22:58,269
because now we've got shaders on our

557
00:22:56,079 --> 00:23:00,548
backs to do all these things so now what

558
00:22:58,269 --> 00:23:05,200
a GPU actually looks like is usually

559
00:23:00,548 --> 00:23:06,278
just a ton of al use right there are

560
00:23:05,200 --> 00:23:08,380
these these are the arithmetic logic

561
00:23:06,278 --> 00:23:10,450
units these are the things that do like

562
00:23:08,380 --> 00:23:11,710
remember when we did our renderer these

563
00:23:10,450 --> 00:23:13,899
are the things that do like the

564
00:23:11,710 --> 00:23:17,829
four-wide multiply remember when we did

565
00:23:13,898 --> 00:23:19,719
these things are like mm mul PS right

566
00:23:17,829 --> 00:23:21,939
those instructions and they take two

567
00:23:19,720 --> 00:23:25,149
components like an A and a B and it's

568
00:23:21,940 --> 00:23:29,710
like it multiplies a zero times B 0 a 1

569
00:23:25,148 --> 00:23:32,308
times B 1 a 2 times B 2 a 3 times B 3

570
00:23:29,710 --> 00:23:35,740
right you know that

571
00:23:32,308 --> 00:23:39,668
well that is basically what a GPU is a

572
00:23:35,740 --> 00:23:42,819
GPU is a giant one of these so instead

573
00:23:39,669 --> 00:23:44,890
of a four wide one or an eight wide one

574
00:23:42,819 --> 00:23:48,099
with which like the Intel desktop chips

575
00:23:44,890 --> 00:23:51,880
now have eight wide for these they are

576
00:23:48,099 --> 00:23:53,199
more like 32 wide so they're more like

577
00:23:51,880 --> 00:23:55,450
saying hey you know what

578
00:23:53,200 --> 00:23:58,179
or I guess like 16 wide like I said is

579
00:23:55,450 --> 00:23:59,500
another one I think in video 16 wide and

580
00:23:58,179 --> 00:24:01,210
AMD straight to what I don't really know

581
00:23:59,500 --> 00:24:02,589
I have no idea nobody tells me these

582
00:24:01,210 --> 00:24:05,620
things I don't even know might be secret

583
00:24:02,589 --> 00:24:09,129
for all I know anyway they're basically

584
00:24:05,619 --> 00:24:11,648
these giant 16 wide or 32 wide al use so

585
00:24:09,130 --> 00:24:15,870
they basically take in you know some

586
00:24:11,648 --> 00:24:15,869
giant number of floating-point values

587
00:24:16,919 --> 00:24:21,100
right something that looks like this

588
00:24:19,450 --> 00:24:23,048
with literally that many floating-point

589
00:24:21,099 --> 00:24:26,678
values in it and they do some arithmetic

590
00:24:23,048 --> 00:24:29,259
ops on them typically one might be a mad

591
00:24:26,679 --> 00:24:30,100
like a multiply add so it'll take like

592
00:24:29,259 --> 00:24:34,299
an A and

593
00:24:30,099 --> 00:24:36,129
B and a C and do a times B plus C right

594
00:24:34,299 --> 00:24:38,259
it might have that kind thing so a big

595
00:24:36,130 --> 00:24:39,940
old arithmetic operation it can do in

596
00:24:38,259 --> 00:24:43,089
there and they're just set up to do tons

597
00:24:39,940 --> 00:24:44,259
of these and what you see so I don't

598
00:24:43,089 --> 00:24:46,419
know if you guys ever looked at this

599
00:24:44,259 --> 00:24:49,690
maybe you wondered what this was but if

600
00:24:46,420 --> 00:24:51,190
you do like lists and video GPUs or

601
00:24:49,690 --> 00:24:54,190
something like this or you look at how

602
00:24:51,190 --> 00:24:57,460
they quote their numbers you'll see

603
00:24:54,190 --> 00:25:01,240
stuff like a core count or something

604
00:24:57,460 --> 00:25:02,829
they'll list on there right so we come

605
00:25:01,240 --> 00:25:05,650
in here and it'll say something like

606
00:25:02,829 --> 00:25:09,669
let's see processing power band with

607
00:25:05,650 --> 00:25:12,870
transistors I don't know where that is

608
00:25:09,670 --> 00:25:12,870
where is it

609
00:25:13,319 --> 00:25:20,259
they have those you see see if they list

610
00:25:16,900 --> 00:25:23,740
these on if not we can just go to two

611
00:25:20,259 --> 00:25:30,970
and video it's like let's see Nvidia

612
00:25:23,740 --> 00:25:34,049
Titan number of cores okay so this is

613
00:25:30,970 --> 00:25:38,319
what they say right they say CUDA cores

614
00:25:34,049 --> 00:25:39,909
2880 right now you think about that and

615
00:25:38,319 --> 00:25:42,460
you're like well how many cores does my

616
00:25:39,910 --> 00:25:45,130
CPU have any like oh maybe it's got four

617
00:25:42,460 --> 00:25:48,299
cores and you go oh well how many cuda

618
00:25:45,130 --> 00:25:51,670
cores does this GeForce have it's like

619
00:25:48,299 --> 00:25:54,399
2880 it's like oh my god it must be so

620
00:25:51,670 --> 00:25:56,289
much more powerful in a CPU well as you

621
00:25:54,400 --> 00:25:58,180
expect in anything with marketing this

622
00:25:56,289 --> 00:26:00,909
number is completely ridiculous right

623
00:25:58,180 --> 00:26:03,759
what is a coup de coeur where well a

624
00:26:00,910 --> 00:26:10,110
coup de coeur is actually the number of

625
00:26:03,759 --> 00:26:15,670
GPU cores right times the width

626
00:26:10,109 --> 00:26:20,979
oops of the ALU times the number of

627
00:26:15,670 --> 00:26:22,480
values on that core right and again you

628
00:26:20,980 --> 00:26:23,710
know I don't know a lot of the specifics

629
00:26:22,480 --> 00:26:27,039
of these things so I'm just giving you a

630
00:26:23,710 --> 00:26:30,190
baseball park here but if the ALU is 16

631
00:26:27,039 --> 00:26:32,559
wide right then this number is 16 and if

632
00:26:30,190 --> 00:26:35,470
it has say 4 al use on it then this

633
00:26:32,559 --> 00:26:37,599
number is 4 right so the actual number

634
00:26:35,470 --> 00:26:41,110
of cores when they lift something like

635
00:26:37,599 --> 00:26:43,209
this is actually quite a bit lower than

636
00:26:41,109 --> 00:26:43,719
what they're actually saying it's as if

637
00:26:43,210 --> 00:26:45,850
in

638
00:26:43,720 --> 00:26:47,558
divided multiplied the number of cores

639
00:26:45,849 --> 00:26:50,168
by eight because they can do eight wide

640
00:26:47,558 --> 00:26:52,779
instructions and if they have to execute

641
00:26:50,169 --> 00:26:56,110
you you nuts that can each do one of

642
00:26:52,779 --> 00:26:57,308
those right on each core then they would

643
00:26:56,109 --> 00:27:00,069
multiply it by two again so it'd be like

644
00:26:57,308 --> 00:27:03,308
16 times or something right the actual

645
00:27:00,069 --> 00:27:07,210
number that of course that's actually on

646
00:27:03,308 --> 00:27:10,178
there yeah so it'd be something more

647
00:27:07,210 --> 00:27:12,970
like saying oh you know take this number

648
00:27:10,179 --> 00:27:15,038
and divide it by by something big and I

649
00:27:12,970 --> 00:27:17,230
can't they might even do a little bit

650
00:27:15,038 --> 00:27:21,609
more than that like they it might even

651
00:27:17,230 --> 00:27:22,929
be like if they could how many they

652
00:27:21,609 --> 00:27:25,058
could issue I'm not sure it's something

653
00:27:22,929 --> 00:27:27,190
ridiculous but point being this number

654
00:27:25,058 --> 00:27:29,950
is very is has nothing to do with what

655
00:27:27,190 --> 00:27:32,259
you might think an actual core was if

656
00:27:29,950 --> 00:27:34,509
that makes sense I wonder if we can find

657
00:27:32,259 --> 00:27:36,250
some work if someone out there knows

658
00:27:34,509 --> 00:27:38,740
definitively how Nvidia computes their

659
00:27:36,250 --> 00:27:40,450
core account feel free to post it on the

660
00:27:38,740 --> 00:27:42,700
stream because it's it's an equation

661
00:27:40,450 --> 00:27:45,009
like this where the actual number of

662
00:27:42,700 --> 00:27:48,548
cores actually works out to be something

663
00:27:45,009 --> 00:27:50,859
fairly small I don't know let me see

664
00:27:48,548 --> 00:27:58,000
here so twenty eight eighty divided by

665
00:27:50,859 --> 00:28:00,639
64 is 45 right so yeah in this equation

666
00:27:58,000 --> 00:28:02,349
let's say we did this right then the

667
00:28:00,640 --> 00:28:05,530
actual number of cores in this thing is

668
00:28:02,349 --> 00:28:08,288
45 right so yeah it's a lot of cores

669
00:28:05,529 --> 00:28:11,319
potentially but it's a lot less than

670
00:28:08,288 --> 00:28:14,650
twenty eight eighty sounds like right so

671
00:28:11,319 --> 00:28:16,990
just something to be aware of anyway so

672
00:28:14,650 --> 00:28:18,880
what these these things are again is

673
00:28:16,990 --> 00:28:21,400
their cores just like a normal CPU core

674
00:28:18,880 --> 00:28:22,570
as you would expect but and there's a

675
00:28:21,400 --> 00:28:24,190
lot less of them than you think there

676
00:28:22,569 --> 00:28:25,960
are when they write the thing down but

677
00:28:24,190 --> 00:28:27,610
they're simplified so they don't have

678
00:28:25,960 --> 00:28:31,179
nearly as complicated as an instruction

679
00:28:27,609 --> 00:28:32,500
set as an Intel CPU they don't

680
00:28:31,179 --> 00:28:33,880
necessarily have the same kind of

681
00:28:32,500 --> 00:28:35,710
caching or those person because they're

682
00:28:33,880 --> 00:28:37,960
set up for different four source stream

683
00:28:35,710 --> 00:28:39,460
more streaming operation but they're

684
00:28:37,960 --> 00:28:41,380
basically the exact same thing so they

685
00:28:39,460 --> 00:28:43,960
have like all the instructions you

686
00:28:41,380 --> 00:28:46,000
expect to see like a mall and a div and

687
00:28:43,960 --> 00:28:48,069
an ad and whatever they have all those

688
00:28:46,000 --> 00:28:49,569
things although sometimes they're all

689
00:28:48,069 --> 00:28:50,740
done with the same thing so sometimes

690
00:28:49,569 --> 00:28:52,418
you may have something like a multiply

691
00:28:50,740 --> 00:28:53,679
add well if you have a multiply add

692
00:28:52,419 --> 00:28:55,299
instruction you don't need a multiply

693
00:28:53,679 --> 00:28:57,340
instruction or an add instruction you

694
00:28:55,298 --> 00:28:58,839
can just do a mad zero

695
00:28:57,339 --> 00:29:00,549
in one of those places and you end up

696
00:28:58,839 --> 00:29:01,779
with whatever you want or a mad with one

697
00:29:00,549 --> 00:29:05,589
whether it's placing about whatever you

698
00:29:01,779 --> 00:29:07,720
want right okay so that's what a GPU

699
00:29:05,589 --> 00:29:11,819
core actually is and the way that the GP

700
00:29:07,720 --> 00:29:16,029
GPU core works is a lot like what we saw

701
00:29:11,819 --> 00:29:18,129
when we did our rasterizer remember how

702
00:29:16,029 --> 00:29:21,190
we didn't we said oh we can do four

703
00:29:18,130 --> 00:29:24,610
pixels at a time right so what we did is

704
00:29:21,190 --> 00:29:26,320
we said let's do a B C and D pixels at

705
00:29:24,609 --> 00:29:30,909
the same time and well that way we can

706
00:29:26,319 --> 00:29:33,069
fully utilize that system that Intel has

707
00:29:30,910 --> 00:29:35,290
for doing for wide multiplies right well

708
00:29:33,069 --> 00:29:39,639
a GPU does exactly the same thing it

709
00:29:35,289 --> 00:29:41,379
just does it wider now you might ask why

710
00:29:39,640 --> 00:29:43,540
doesn't you know does it do 16 in a row

711
00:29:41,380 --> 00:29:45,940
no and the reason for that is that most

712
00:29:43,539 --> 00:29:47,799
triangles are fairly small right the

713
00:29:45,940 --> 00:29:50,049
higher res the the higher definition the

714
00:29:47,799 --> 00:29:52,089
game.the the more detail the models the

715
00:29:50,049 --> 00:29:55,269
smaller the triangles get triangles

716
00:29:52,089 --> 00:29:57,099
don't usually fill that much of the

717
00:29:55,269 --> 00:29:59,410
screen right they tend to be kind of

718
00:29:57,099 --> 00:30:01,419
tiny and so when you're doing pixel fill

719
00:29:59,410 --> 00:30:03,250
operations it's you kind of want them to

720
00:30:01,420 --> 00:30:07,090
be more square right you want them to be

721
00:30:03,250 --> 00:30:08,859
shaped more like you know like this and

722
00:30:07,089 --> 00:30:10,509
less like something like that because

723
00:30:08,859 --> 00:30:12,129
the time triangles don't tend to look

724
00:30:10,509 --> 00:30:14,500
like that they tend to look more like

725
00:30:12,130 --> 00:30:16,270
that right so what they do instead is

726
00:30:14,500 --> 00:30:18,190
they just add a vertical component to it

727
00:30:16,269 --> 00:30:19,450
instead of just doing four across like

728
00:30:18,190 --> 00:30:22,150
we were doing they do four across four

729
00:30:19,450 --> 00:30:24,190
down so they do sixteen they do them

730
00:30:22,150 --> 00:30:31,810
this way so they basically take you know

731
00:30:24,190 --> 00:30:34,000
pixels they take pixels that look like a

732
00:30:31,809 --> 00:30:36,909
pattern like this and they just unpack

733
00:30:34,000 --> 00:30:39,250
them right you know and well they don't

734
00:30:36,910 --> 00:30:41,140
definitely know unpacking per se but I

735
00:30:39,250 --> 00:30:47,380
mean they just kind of like think of

736
00:30:41,140 --> 00:30:49,450
them this way right so then they do

737
00:30:47,380 --> 00:30:49,780
these giant operations on those and off

738
00:30:49,450 --> 00:30:52,120
you go

739
00:30:49,779 --> 00:30:53,829
okay and they do exactly exactly exactly

740
00:30:52,119 --> 00:30:55,929
the same sort of stuff we did the

741
00:30:53,829 --> 00:30:58,509
triangle probably only touches some of

742
00:30:55,930 --> 00:31:00,070
these pixels they mask just like we did

743
00:30:58,509 --> 00:31:02,079
we had our mass where we were like

744
00:31:00,069 --> 00:31:04,480
writing and we didn't want to write the

745
00:31:02,079 --> 00:31:06,220
final one so we masked it out same thing

746
00:31:04,480 --> 00:31:07,930
it's all exactly the same so the way we

747
00:31:06,220 --> 00:31:09,370
wrote our rasterizer is very very

748
00:31:07,930 --> 00:31:10,160
similar to what these things are doing

749
00:31:09,369 --> 00:31:16,159
internally

750
00:31:10,160 --> 00:31:17,630
right okay so these GPU cores you know

751
00:31:16,160 --> 00:31:19,340
it's got a bunch of those cores and

752
00:31:17,630 --> 00:31:22,100
they're designed to just basically take

753
00:31:19,339 --> 00:31:23,449
share code right that's that shader code

754
00:31:22,099 --> 00:31:24,980
that you write when you see like a

755
00:31:23,450 --> 00:31:26,750
DirectX shader or whatever that kind of

756
00:31:24,980 --> 00:31:28,880
thing shader code which is very much

757
00:31:26,750 --> 00:31:32,599
like CPU code now and they're designed

758
00:31:28,880 --> 00:31:34,340
to execute that 16 or 32 wide that's

759
00:31:32,599 --> 00:31:36,169
what they're trying to do I don't know

760
00:31:34,339 --> 00:31:37,429
if any are 64 oh I don't know how wide

761
00:31:36,170 --> 00:31:43,070
they get but that's what they're trying

762
00:31:37,430 --> 00:31:49,340
to do and so that's why shader is not

763
00:31:43,069 --> 00:31:50,839
quite the same as CPU code and the

764
00:31:49,339 --> 00:31:54,019
reason is because you have to remember

765
00:31:50,839 --> 00:31:56,179
an Intel chip is highly optimized for

766
00:31:54,019 --> 00:31:58,129
executing basically straight-line CPU

767
00:31:56,180 --> 00:31:59,420
code that's got a lot of branches in it

768
00:31:58,130 --> 00:32:02,930
right

769
00:31:59,420 --> 00:32:05,750
it's got jumps branches it's got random

770
00:32:02,930 --> 00:32:08,509
memory access all these things well GPUs

771
00:32:05,750 --> 00:32:11,059
aren't set up to work with that right

772
00:32:08,509 --> 00:32:15,319
they're not made to do this they're made

773
00:32:11,059 --> 00:32:16,909
to do much more coherent code and so one

774
00:32:15,319 --> 00:32:18,500
of the reasons you can't just take CPU

775
00:32:16,910 --> 00:32:20,630
code and shove it into a GPU in expect

776
00:32:18,500 --> 00:32:22,730
that they do faster is because the

777
00:32:20,630 --> 00:32:24,680
degree to which a GPU could be faster

778
00:32:22,730 --> 00:32:26,690
than CPU is entirely dependent on

779
00:32:24,680 --> 00:32:28,880
parallelism and it's dependent on two

780
00:32:26,690 --> 00:32:30,710
kinds of parallelism one utilizing the

781
00:32:28,880 --> 00:32:32,240
fact that there are more cores on GPU

782
00:32:30,710 --> 00:32:35,509
than a CPU you know maybe there's 10

783
00:32:32,240 --> 00:32:37,190
times more cores and utilizing the fact

784
00:32:35,509 --> 00:32:38,839
that the ALU is much bigger maybe it's

785
00:32:37,190 --> 00:32:40,039
twice as big maybe it's four times as

786
00:32:38,839 --> 00:32:41,449
big maybe it's three times as big

787
00:32:40,039 --> 00:32:44,480
something but it's got a boost there

788
00:32:41,450 --> 00:32:47,509
what that means is you have to be able

789
00:32:44,480 --> 00:32:49,880
to go 16 wide you have to be able to go

790
00:32:47,509 --> 00:32:51,410
10 way parallel you have to be able to

791
00:32:49,880 --> 00:32:53,930
do those things with this code if the

792
00:32:51,410 --> 00:32:55,670
code can't do that it's inherently not

793
00:32:53,930 --> 00:32:57,470
gonna get any faster on GPU in fact it

794
00:32:55,670 --> 00:32:59,690
probably will get slower because GPUs

795
00:32:57,470 --> 00:33:05,329
tend to run at slower clock rates with

796
00:32:59,690 --> 00:33:09,140
worse support for arbitrary stuff okay

797
00:33:05,329 --> 00:33:10,609
so with that masking part in mind

798
00:33:09,140 --> 00:33:12,740
remember I talked about the masking here

799
00:33:10,609 --> 00:33:16,369
with that masking part in mind let's

800
00:33:12,740 --> 00:33:18,589
talk about how those ifs work right so

801
00:33:16,369 --> 00:33:22,279
in a CPU you've seen how this works we

802
00:33:18,589 --> 00:33:26,329
say if X you know

803
00:33:22,279 --> 00:33:34,839
do this right maybe let me do something

804
00:33:26,329 --> 00:33:38,720
here y equals 5 if X y plus equals 7

805
00:33:34,839 --> 00:33:41,329
okay so in a CPU what we expect to see

806
00:33:38,720 --> 00:33:43,549
here is something like taking you know

807
00:33:41,329 --> 00:33:46,339
the location of Y so here's the place of

808
00:33:43,549 --> 00:33:48,379
restoring Y we take the 5 in this

809
00:33:46,339 --> 00:33:51,199
instruction and we put it in there

810
00:33:48,380 --> 00:33:54,470
we then load in X so whatever is in X

811
00:33:51,200 --> 00:33:56,900
may be in X is a 1 we load that in we do

812
00:33:54,470 --> 00:33:58,700
a test instruction on it right to see

813
00:33:56,900 --> 00:34:00,800
what it see if it's equal we do some

814
00:33:58,700 --> 00:34:02,930
kind of comparison of some kind and then

815
00:34:00,799 --> 00:34:05,089
we do a jump and we do a jump based on

816
00:34:02,930 --> 00:34:08,000
the result of the comparison so either

817
00:34:05,089 --> 00:34:09,949
we skip the jump doesn't happen and we

818
00:34:08,000 --> 00:34:12,019
do this piece of code or the jump does

819
00:34:09,949 --> 00:34:13,609
happen and we skip over it if we do get

820
00:34:12,019 --> 00:34:14,840
to this piece of code we're then going

821
00:34:13,610 --> 00:34:17,179
to take 7 and we're going to write it

822
00:34:14,840 --> 00:34:20,090
back into here right we add we do an add

823
00:34:17,179 --> 00:34:22,898
instruction and we overwrite the 5 with

824
00:34:20,090 --> 00:34:25,519
5 plus 7 which is 12 right or we don't

825
00:34:22,898 --> 00:34:26,929
so we're used to thinking of code in

826
00:34:25,519 --> 00:34:29,809
this terms where we where we go ahead

827
00:34:26,929 --> 00:34:31,730
and say oh okay do a test jump over so

828
00:34:29,809 --> 00:34:33,230
we think of it as doing like either/or

829
00:34:31,730 --> 00:34:36,110
and maybe there's an else clause here

830
00:34:33,230 --> 00:34:38,240
right so we think of term of code in

831
00:34:36,110 --> 00:34:41,269
terms of either or either or right

832
00:34:38,239 --> 00:34:43,579
if this do this otherwise do that that

833
00:34:41,269 --> 00:34:45,769
is not how anything works in the world

834
00:34:43,579 --> 00:34:49,519
of wide instructions the reason for that

835
00:34:45,769 --> 00:34:52,219
is if this is 16 wide well what does it

836
00:34:49,519 --> 00:34:54,199
mean to do an if we've got 16 different

837
00:34:52,219 --> 00:34:56,329
things here some of them will be yes

838
00:34:54,199 --> 00:34:58,849
some of them will be now what that means

839
00:34:56,329 --> 00:35:01,880
is that in the wide world in the GPU

840
00:34:58,849 --> 00:35:05,630
world all branches are always taken

841
00:35:01,880 --> 00:35:07,340
basically right so what happens is when

842
00:35:05,630 --> 00:35:09,410
you get to an if statement in shader

843
00:35:07,340 --> 00:35:10,670
code what that actually compiles to is

844
00:35:09,409 --> 00:35:14,210
not an if statement at all

845
00:35:10,670 --> 00:35:18,110
it compiles to both branches but with a

846
00:35:14,210 --> 00:35:22,340
mask so it first does a test here to see

847
00:35:18,110 --> 00:35:25,460
which slots of the 16 wide Lane are

848
00:35:22,340 --> 00:35:27,860
going to do which branch right and it

849
00:35:25,460 --> 00:35:29,720
produces a mass that's like oh these are

850
00:35:27,860 --> 00:35:32,690
the places that need to do this branch

851
00:35:29,719 --> 00:35:34,699
then it computes fully the result of

852
00:35:32,690 --> 00:35:35,530
this branch computes fully the result of

853
00:35:34,699 --> 00:35:37,839
this branch

854
00:35:35,530 --> 00:35:40,420
then uses this mask too and them

855
00:35:37,840 --> 00:35:42,970
together and an or you know mask and or

856
00:35:40,420 --> 00:35:46,420
them together to produce the correct

857
00:35:42,969 --> 00:35:48,819
composite result so to the extent at

858
00:35:46,420 --> 00:35:53,050
which this if ever actually happens with

859
00:35:48,820 --> 00:35:56,320
a jump is only if all of them have the

860
00:35:53,050 --> 00:35:59,050
same value basically ifs with a jump are

861
00:35:56,320 --> 00:36:01,660
now just an optimization in GPU land

862
00:35:59,050 --> 00:36:03,519
they're a thing that if you happen to

863
00:36:01,659 --> 00:36:05,859
have all the same value and know you can

864
00:36:03,519 --> 00:36:07,599
skip one whole side of the branch maybe

865
00:36:05,860 --> 00:36:11,110
it will maybe a GPU smart enough to do

866
00:36:07,599 --> 00:36:13,029
that maybe it's not but that's all the

867
00:36:11,110 --> 00:36:15,370
jump is now the jumps in optimization

868
00:36:13,030 --> 00:36:17,710
but it's not the actual control flow the

869
00:36:15,369 --> 00:36:19,329
control flow actually always goes

870
00:36:17,710 --> 00:36:21,460
through both branches conceptually

871
00:36:19,329 --> 00:36:24,039
speaking and the only time that it won't

872
00:36:21,460 --> 00:36:28,480
is if all the values happen to lie in

873
00:36:24,039 --> 00:36:30,699
one side of the other the branch okay so

874
00:36:28,480 --> 00:36:32,199
when you think about how GPUs execute

875
00:36:30,699 --> 00:36:35,710
you have to kind of change your mental

876
00:36:32,199 --> 00:36:38,379
model a little bit into more of the code

877
00:36:35,710 --> 00:36:41,139
is all straight line there is no such

878
00:36:38,380 --> 00:36:44,039
thing as a branch not taken unless

879
00:36:41,139 --> 00:36:46,900
you're optimizing a particular case

880
00:36:44,039 --> 00:36:49,210
they're all taken how does this work

881
00:36:46,900 --> 00:36:52,809
with loops you've seen loops right same

882
00:36:49,210 --> 00:36:55,720
thing loops they loop until the very

883
00:36:52,809 --> 00:36:58,299
last guy no longer tests for the loop so

884
00:36:55,719 --> 00:37:00,219
even if everybody else all the other

885
00:36:58,300 --> 00:37:02,380
lanes had finished and they only need to

886
00:37:00,219 --> 00:37:04,809
do like five loops to this thing but

887
00:37:02,380 --> 00:37:06,760
this last guy at the end he's got to do

888
00:37:04,809 --> 00:37:08,529
like a hundred iterations because that's

889
00:37:06,760 --> 00:37:11,620
just what his lane was set up to do

890
00:37:08,530 --> 00:37:13,120
right you do a hundred iterations on

891
00:37:11,619 --> 00:37:15,130
everybody and every time through the

892
00:37:13,119 --> 00:37:19,750
loop you just throw away 15 years 16

893
00:37:15,130 --> 00:37:21,550
caps and you are sad right now again

894
00:37:19,750 --> 00:37:24,159
that's the basics of GPU

895
00:37:21,550 --> 00:37:25,240
I'm sure GPU vendors do all sorts of

896
00:37:24,159 --> 00:37:27,969
things to try to improve performance

897
00:37:25,239 --> 00:37:29,949
here like maybe they they notice when

898
00:37:27,969 --> 00:37:31,389
you end up with a 4 or 4 split and try

899
00:37:29,949 --> 00:37:32,829
to merge in some other work from

900
00:37:31,389 --> 00:37:35,079
somewhere else you know I have no idea

901
00:37:32,829 --> 00:37:36,340
how sophisticated they try to get with

902
00:37:35,079 --> 00:37:38,440
some of these things but that's the

903
00:37:36,340 --> 00:37:40,329
basic idea and that is why you'll often

904
00:37:38,440 --> 00:37:44,409
see things like they'll talk about a

905
00:37:40,329 --> 00:37:48,360
warp there'll be things that refer to

906
00:37:44,409 --> 00:37:48,359
like everyone in the warp

907
00:37:49,199 --> 00:37:56,829
or something well that's what a warp is

908
00:37:52,389 --> 00:37:59,589
a warp is 16 or 32 guys who's very knit

909
00:37:56,829 --> 00:38:01,090
together and they're gonna take all the

910
00:37:59,590 --> 00:38:04,539
branches and all the loops together

911
00:38:01,090 --> 00:38:06,220
until all of them agree and so the only

912
00:38:04,539 --> 00:38:07,659
time when they actually do any branching

913
00:38:06,219 --> 00:38:10,239
or any terminating of loops is when they

914
00:38:07,659 --> 00:38:12,179
all agree otherwise they're all going

915
00:38:10,239 --> 00:38:15,129
through everything every time always

916
00:38:12,179 --> 00:38:16,569
right and you can see why that's

917
00:38:15,130 --> 00:38:17,829
important to understand from forests

918
00:38:16,570 --> 00:38:19,660
vector because if you write your code in

919
00:38:17,829 --> 00:38:21,219
a shader thinking that it works the

920
00:38:19,659 --> 00:38:22,750
other way you're gonna make very very

921
00:38:21,219 --> 00:38:24,759
different decisions potentially than if

922
00:38:22,750 --> 00:38:29,889
you know that this is the basic way that

923
00:38:24,760 --> 00:38:31,840
it works okay so that's the the basics

924
00:38:29,889 --> 00:38:32,858
of how the GPU execution works the part

925
00:38:31,840 --> 00:38:35,410
that I don't know very much about

926
00:38:32,858 --> 00:38:39,098
because I've never seen any Declassified

927
00:38:35,409 --> 00:38:41,108
stuff about how this works is that's a

928
00:38:39,099 --> 00:38:42,550
part of the GPU that's that's that's all

929
00:38:41,108 --> 00:38:45,429
those a lose that's like you know we

930
00:38:42,550 --> 00:38:47,740
have 48 al use on here or whatever what

931
00:38:45,429 --> 00:38:49,299
I don't know very much is the how the

932
00:38:47,739 --> 00:38:50,769
bookkeeping part of the GPU works

933
00:38:49,300 --> 00:38:52,450
because obviously there's all this

934
00:38:50,769 --> 00:38:54,369
dispatch that has to happen here like

935
00:38:52,449 --> 00:38:55,989
hey go do the transforms on this vertex

936
00:38:54,369 --> 00:38:57,940
buffer hey go fill these pixels hey do

937
00:38:55,989 --> 00:38:59,439
whatever right that part I don't know

938
00:38:57,940 --> 00:39:00,909
very much about and I don't know how

939
00:38:59,440 --> 00:39:02,769
much you can't even know about it if you

940
00:39:00,909 --> 00:39:05,980
don't have some kind of nd egg to

941
00:39:02,769 --> 00:39:09,338
classified information but this is how

942
00:39:05,980 --> 00:39:11,289
those cores work and this now because I

943
00:39:09,338 --> 00:39:13,449
like I said GPUs have gotten so general

944
00:39:11,289 --> 00:39:15,550
this is actually just true it's really

945
00:39:13,449 --> 00:39:17,439
just this no matter what you're doing if

946
00:39:15,550 --> 00:39:20,589
you're filling pixels it looks like this

947
00:39:17,440 --> 00:39:21,940
if you are transforming vertices it

948
00:39:20,588 --> 00:39:23,199
looks like this if you're executing a

949
00:39:21,940 --> 00:39:25,329
tessellation shader it looks like this

950
00:39:23,199 --> 00:39:28,358
it all looks like this now because

951
00:39:25,329 --> 00:39:30,670
shaders have gotten so the ability to do

952
00:39:28,358 --> 00:39:32,469
so much general-purpose stuff that they

953
00:39:30,670 --> 00:39:34,119
really can't design CPUs to take

954
00:39:32,469 --> 00:39:36,069
advantage of any specific thing anymore

955
00:39:34,119 --> 00:39:38,890
like they used to we're not here we're

956
00:39:36,070 --> 00:39:40,630
here so it's really just big old al use

957
00:39:38,889 --> 00:39:43,179
that could basically do anything running

958
00:39:40,630 --> 00:39:45,130
fairly generic code right at a

959
00:39:43,179 --> 00:39:47,858
relatively low clock rate compared to

960
00:39:45,130 --> 00:39:49,900
your GPU the CPU but very wide and with

961
00:39:47,858 --> 00:39:52,889
a lot of those alias right so a lot of

962
00:39:49,900 --> 00:39:57,070
floating-point operations that it can do

963
00:39:52,889 --> 00:39:59,019
all right so that's what a GPU is that's

964
00:39:57,070 --> 00:40:00,338
really what it is and there's some still

965
00:39:59,019 --> 00:40:01,969
special purpose hardware in there for

966
00:40:00,338 --> 00:40:03,980
example there's usually a mem

967
00:40:01,969 --> 00:40:06,259
a unit that's very good at fetching

968
00:40:03,980 --> 00:40:08,358
textures so there's like a thing that

969
00:40:06,260 --> 00:40:10,460
can go fetch and do like a DX TC you

970
00:40:08,358 --> 00:40:12,619
know there might be like a DX TC texture

971
00:40:10,460 --> 00:40:15,320
compression a thing like it hardware

972
00:40:12,619 --> 00:40:16,970
just to get textures really fast there's

973
00:40:15,320 --> 00:40:18,830
usually a texture cache that sits

974
00:40:16,969 --> 00:40:20,179
somewhere in here that's like faster

975
00:40:18,829 --> 00:40:21,829
than the graphics Ram so there's a bunch

976
00:40:20,179 --> 00:40:24,230
of complexity that comes in here to try

977
00:40:21,829 --> 00:40:25,460
and make the GPU fast but at the end of

978
00:40:24,230 --> 00:40:27,559
the day it's just something that's

979
00:40:25,460 --> 00:40:29,449
executing code very much like we see on

980
00:40:27,559 --> 00:40:31,880
the CPU side only instead of having a

981
00:40:29,449 --> 00:40:34,419
lot of like branch enos enos to it it's

982
00:40:31,880 --> 00:40:38,930
it sticks to be very wide very masky

983
00:40:34,420 --> 00:40:42,139
kind of stuff all right so where does

984
00:40:38,929 --> 00:40:44,210
that leave us we're gonna get into some

985
00:40:42,139 --> 00:40:45,829
of that so I want you to kind of be

986
00:40:44,210 --> 00:40:47,929
aware that you have understanding we'll

987
00:40:45,829 --> 00:40:49,699
revisit it later because when we

988
00:40:47,929 --> 00:40:52,549
actually do our GPU code for drawing

989
00:40:49,699 --> 00:40:55,039
anime hero we you know I'll be remanding

990
00:40:52,550 --> 00:40:58,640
some that stuff so keep that in mind but

991
00:40:55,039 --> 00:41:00,949
right now what we have to do is look one

992
00:40:58,639 --> 00:41:04,039
step removed from that basically we have

993
00:41:00,949 --> 00:41:05,539
to worry about how we're actually going

994
00:41:04,039 --> 00:41:08,029
to get the GPU to start doing the work

995
00:41:05,539 --> 00:41:09,980
that we want that's the work that it's

996
00:41:08,030 --> 00:41:11,420
actually gonna do for us right it's got

997
00:41:09,980 --> 00:41:13,969
all these alias it's gonna do all this

998
00:41:11,420 --> 00:41:16,329
stuff for us right but we have to figure

999
00:41:13,969 --> 00:41:17,509
out how to actually get that happening

1000
00:41:16,329 --> 00:41:19,549
okay

1001
00:41:17,510 --> 00:41:22,460
so this is the diagram that concerns us

1002
00:41:19,550 --> 00:41:25,820
what tends to happen the way these

1003
00:41:22,460 --> 00:41:30,260
things usually work is there's a concept

1004
00:41:25,820 --> 00:41:32,300
that memory is mapped and what that

1005
00:41:30,260 --> 00:41:35,000
means is typically some portion of the

1006
00:41:32,300 --> 00:41:36,769
system Ram will be mapped such that it

1007
00:41:35,000 --> 00:41:39,710
lines up with a portion of the graphics

1008
00:41:36,769 --> 00:41:42,650
Ram and so what will happen is the CPU

1009
00:41:39,710 --> 00:41:45,619
will say I would like to put some stuff

1010
00:41:42,650 --> 00:41:48,740
in here so it will write into memory

1011
00:41:45,619 --> 00:41:51,530
that is mapped and that memory will then

1012
00:41:48,739 --> 00:41:53,779
get transferred over the PCI bus to

1013
00:41:51,530 --> 00:41:56,930
essentially you know fill in what it

1014
00:41:53,780 --> 00:41:58,730
needs right that's the concept of mapped

1015
00:41:56,929 --> 00:42:00,500
memory and that's just like when two

1016
00:41:58,730 --> 00:42:01,699
devices want to have some shared memory

1017
00:42:00,500 --> 00:42:03,070
- you know they can map it so it's

1018
00:42:01,699 --> 00:42:05,899
mapped in one space mapped another space

1019
00:42:03,070 --> 00:42:07,280
now as you might imagine that could go

1020
00:42:05,900 --> 00:42:08,539
both ways so the GPU could write things

1021
00:42:07,280 --> 00:42:09,859
in here and then I'd see it over here

1022
00:42:08,539 --> 00:42:11,329
and again that touch gets transfer to

1023
00:42:09,858 --> 00:42:12,559
the PCI bus when there are changes here

1024
00:42:11,329 --> 00:42:14,750
they show up here with a change here

1025
00:42:12,559 --> 00:42:15,199
they show up here and that's a coherent

1026
00:42:14,750 --> 00:42:18,949
like map

1027
00:42:15,199 --> 00:42:22,730
everything and you can you know it's a

1028
00:42:18,949 --> 00:42:25,519
thing that exists but nowadays as you

1029
00:42:22,730 --> 00:42:28,130
can imagine the the graphics workloads

1030
00:42:25,519 --> 00:42:30,289
are so heavy that you you typically need

1031
00:42:28,130 --> 00:42:32,480
to be a little more aggressive with

1032
00:42:30,289 --> 00:42:34,960
things like the way that that works so

1033
00:42:32,480 --> 00:42:39,789
what happens now is oftentimes GPUs have

1034
00:42:34,960 --> 00:42:39,789
essentially DMA transfer controllers

1035
00:42:42,550 --> 00:42:49,640
that they call it copy engines

1036
00:42:46,269 --> 00:42:52,039
oftentimes which are parts of the chip

1037
00:42:49,639 --> 00:42:53,900
that literally do nothing but sit there

1038
00:42:52,039 --> 00:42:56,869
and take instruction from you about

1039
00:42:53,900 --> 00:42:58,700
where to grab stuff and they're just

1040
00:42:56,869 --> 00:43:01,160
sitting there grabbing things and moving

1041
00:42:58,699 --> 00:43:03,618
it into their memory right and I don't

1042
00:43:01,159 --> 00:43:05,929
know but I don't think they actually

1043
00:43:03,619 --> 00:43:08,480
require much in the way of mapping other

1044
00:43:05,929 --> 00:43:11,059
than just it has to be in a part of

1045
00:43:08,480 --> 00:43:14,329
memory that the DMA controller can see

1046
00:43:11,059 --> 00:43:15,650
and so the mapped concept if you're

1047
00:43:14,329 --> 00:43:19,670
actually talking about what happens at a

1048
00:43:15,650 --> 00:43:22,639
lower level oftentimes doesn't end up

1049
00:43:19,670 --> 00:43:24,588
meaning that we're actually trying to

1050
00:43:22,639 --> 00:43:27,529
mirror memory between these two things

1051
00:43:24,588 --> 00:43:29,150
what map ends up meaning most of the

1052
00:43:27,530 --> 00:43:31,880
time when you're using a GPU nowadays is

1053
00:43:29,150 --> 00:43:34,430
just that you put something somewhere in

1054
00:43:31,880 --> 00:43:37,900
a range of memory that the GPUs bus

1055
00:43:34,429 --> 00:43:42,980
controller copy engines can see and get

1056
00:43:37,900 --> 00:43:45,200
right because in general I don't know

1057
00:43:42,980 --> 00:43:47,599
the specifics of the PCI bus I was an

1058
00:43:45,199 --> 00:43:50,750
amiga guy so I don't know I don't know

1059
00:43:47,599 --> 00:43:52,460
PC bus sorts of stuff at all but

1060
00:43:50,750 --> 00:43:55,699
basically my understanding is the PCI

1061
00:43:52,460 --> 00:43:58,099
bus you know devices have to have mapped

1062
00:43:55,699 --> 00:44:00,259
regions that they're allowed to read and

1063
00:43:58,099 --> 00:44:04,039
I don't know to what extent they're

1064
00:44:00,260 --> 00:44:07,730
actually allowed to read any given

1065
00:44:04,039 --> 00:44:09,500
memory but even if they were allowed to

1066
00:44:07,730 --> 00:44:13,068
read any memory in the system you have

1067
00:44:09,500 --> 00:44:18,619
to remember that the CPU has virtual

1068
00:44:13,068 --> 00:44:20,509
memory right we talked all about this so

1069
00:44:18,619 --> 00:44:21,980
you know your application sees some

1070
00:44:20,510 --> 00:44:23,690
virtual memory space you don't even know

1071
00:44:21,980 --> 00:44:24,829
if that memory is all stored in actual

1072
00:44:23,690 --> 00:44:28,650
memory right now someone might be paged

1073
00:44:24,829 --> 00:44:30,750
out to disk whatever so this guy

1074
00:44:28,650 --> 00:44:32,849
the actual GPU when he comes over to get

1075
00:44:30,750 --> 00:44:35,099
memory it had better be in physical

1076
00:44:32,849 --> 00:44:36,778
memory at the very least right because

1077
00:44:35,099 --> 00:44:38,700
if it's off on the disk forget it

1078
00:44:36,778 --> 00:44:40,858
he doesn't know anything about the disk

1079
00:44:38,699 --> 00:44:42,088
he doesn't know how to access the

1080
00:44:40,858 --> 00:44:45,568
harddrive right

1081
00:44:42,088 --> 00:44:47,460
that requires CPU intervention and so

1082
00:44:45,568 --> 00:44:49,798
what actually needs to happen here more

1083
00:44:47,460 --> 00:44:51,809
importantly than anything else is this

1084
00:44:49,798 --> 00:44:55,619
concept that we need to map the memory

1085
00:44:51,809 --> 00:44:57,660
or whatever we need to lock it down it's

1086
00:44:55,619 --> 00:44:59,460
one way to think about it we need to

1087
00:44:57,659 --> 00:45:01,409
pick a range of physical memory and

1088
00:44:59,460 --> 00:45:03,449
actually say we're gonna leave this in

1089
00:45:01,409 --> 00:45:05,278
here and we're not going to let it leave

1090
00:45:03,449 --> 00:45:08,038
or get transfer it out or swapped or do

1091
00:45:05,278 --> 00:45:09,659
it or anything else until this guy

1092
00:45:08,039 --> 00:45:11,369
finishes getting it and we receive

1093
00:45:09,659 --> 00:45:14,639
confirmation from him that he no longer

1094
00:45:11,369 --> 00:45:16,829
needs it right and so again so this

1095
00:45:14,639 --> 00:45:18,358
concept of mapping memory or thinking

1096
00:45:16,829 --> 00:45:21,028
about memory that both the CPU and the

1097
00:45:18,358 --> 00:45:22,858
GPU can read it tends to end up being a

1098
00:45:21,028 --> 00:45:24,710
lot less about thinking of it in terms

1099
00:45:22,858 --> 00:45:27,028
of shared memory with like

1100
00:45:24,710 --> 00:45:30,778
synchronization between it and more

1101
00:45:27,028 --> 00:45:32,760
about transfers where we lock a piece of

1102
00:45:30,778 --> 00:45:35,489
memory on the system Ram side and then

1103
00:45:32,760 --> 00:45:37,890
we tell the graphics chip either put

1104
00:45:35,489 --> 00:45:39,689
some stuff in there please or or move

1105
00:45:37,889 --> 00:45:43,199
some stuff out of there please into your

1106
00:45:39,690 --> 00:45:44,278
memory okay and so you can kind of see

1107
00:45:43,199 --> 00:45:47,368
where I'm going with this that is

1108
00:45:44,278 --> 00:45:50,400
exactly what we need to do if we are

1109
00:45:47,369 --> 00:45:53,519
going to actually send our image or a

1110
00:45:50,400 --> 00:45:55,548
bitmap down to the graphics card so

1111
00:45:53,519 --> 00:45:58,559
we're gonna need a way to do that right

1112
00:45:55,548 --> 00:46:00,329
but before we can do that even before we

1113
00:45:58,559 --> 00:46:02,130
can do that we need something else which

1114
00:46:00,329 --> 00:46:04,769
is we need the way to tell the GPU to do

1115
00:46:02,130 --> 00:46:05,670
anything at all right because we you

1116
00:46:04,769 --> 00:46:07,108
know we could lock down a piece of

1117
00:46:05,670 --> 00:46:09,450
memory and put some stuff in it but how

1118
00:46:07,108 --> 00:46:11,730
are we ever gonna tell the GPU hey come

1119
00:46:09,449 --> 00:46:14,239
get it the GPU needs some way of knowing

1120
00:46:11,730 --> 00:46:17,400
what we're even trying to tell it to do

1121
00:46:14,239 --> 00:46:19,048
okay and so what's that that's a thing

1122
00:46:17,400 --> 00:46:20,789
called a push buffer now you'll notice

1123
00:46:19,048 --> 00:46:22,318
we have a push buffer it's the thing

1124
00:46:20,789 --> 00:46:25,859
that tells our renderer what to do well

1125
00:46:22,318 --> 00:46:28,288
guess what that's modeled exactly after

1126
00:46:25,858 --> 00:46:31,769
how the GPU works so what basically

1127
00:46:28,289 --> 00:46:34,020
happens is you start off by taking some

1128
00:46:31,769 --> 00:46:36,568
chunk of your system Ram you lock it

1129
00:46:34,019 --> 00:46:38,699
down and into there your put actual

1130
00:46:36,568 --> 00:46:40,679
commands which are like I shouldn't say

1131
00:46:38,699 --> 00:46:42,359
commands but basically like an own

1132
00:46:40,679 --> 00:46:45,269
binary structured

1133
00:46:42,360 --> 00:46:46,829
thing just like our push buffer that's

1134
00:46:45,269 --> 00:46:49,050
got like stuff aren't like do this do

1135
00:46:46,829 --> 00:46:51,929
that do whatever that has pointers to

1136
00:46:49,050 --> 00:46:56,280
other lockdown pieces of memory and the

1137
00:46:51,929 --> 00:46:59,129
graphics card is instructed to read from

1138
00:46:56,280 --> 00:47:01,800
the top of that and do what it says

1139
00:46:59,130 --> 00:47:03,720
right so it grabs that push buffer over

1140
00:47:01,800 --> 00:47:05,880
here to its memory presumably starts

1141
00:47:03,719 --> 00:47:07,949
executing off of it does the things in

1142
00:47:05,880 --> 00:47:09,510
it and in there are things like hey go

1143
00:47:07,949 --> 00:47:12,329
grab this other chunk of memory bring it

1144
00:47:09,510 --> 00:47:14,970
in here draw these triangles do whatever

1145
00:47:12,329 --> 00:47:19,529
load the shader set this state blah blah

1146
00:47:14,969 --> 00:47:22,230
blah so the the model of execution you

1147
00:47:19,530 --> 00:47:25,920
have to think of in terms of to actually

1148
00:47:22,230 --> 00:47:30,269
going on the system is well it looks

1149
00:47:25,920 --> 00:47:35,430
kind of like this here is us Chris

1150
00:47:30,269 --> 00:47:37,259
handmade hero right and we've got it a

1151
00:47:35,429 --> 00:47:40,529
little CPU and the CPU is executing in

1152
00:47:37,260 --> 00:47:42,900
handmade hero and that's all great at

1153
00:47:40,530 --> 00:47:47,670
the top of our address range right the

1154
00:47:42,900 --> 00:47:50,280
OpenGL 32 DLL code the system drivers

1155
00:47:47,670 --> 00:47:51,900
and stuff they got mapped in and so once

1156
00:47:50,280 --> 00:47:53,850
in a while and handmade hero we got to

1157
00:47:51,900 --> 00:47:55,650
do some stuff with the graphics we're

1158
00:47:53,849 --> 00:47:57,269
gonna call out to something out here

1159
00:47:55,650 --> 00:47:59,369
these are functions again right that are

1160
00:47:57,269 --> 00:48:02,130
mapped into our address space when we

1161
00:47:59,369 --> 00:48:03,599
load it in that DLL we're going to call

1162
00:48:02,130 --> 00:48:07,710
some of these and what they're gonna do

1163
00:48:03,599 --> 00:48:10,049
is they're gonna prepare in in some of

1164
00:48:07,710 --> 00:48:13,289
our memory right they're gonna prepare

1165
00:48:10,050 --> 00:48:14,160
some of this push buffer data right or

1166
00:48:13,289 --> 00:48:15,389
something like that

1167
00:48:14,159 --> 00:48:16,889
all right they're gonna prepare us we

1168
00:48:15,389 --> 00:48:18,329
don't know we can't even see because

1169
00:48:16,889 --> 00:48:20,099
this is again in videos code whatever

1170
00:48:18,329 --> 00:48:21,960
there to prepare some of that push

1171
00:48:20,099 --> 00:48:23,190
buffer data in our memory this is our

1172
00:48:21,960 --> 00:48:24,809
memory by the way this is our thing

1173
00:48:23,190 --> 00:48:26,970
right hand made here right this is our

1174
00:48:24,809 --> 00:48:28,409
code and here's I push buffer here's

1175
00:48:26,969 --> 00:48:31,169
some more code from the operating system

1176
00:48:28,409 --> 00:48:33,000
whatever this is our main memory so the

1177
00:48:31,170 --> 00:48:35,400
CPU is gonna do that the CPU will

1178
00:48:33,000 --> 00:48:37,980
prepare this push buffer right and then

1179
00:48:35,400 --> 00:48:39,389
at some point and this is entirely up to

1180
00:48:37,980 --> 00:48:41,130
the driver and how it choose to do

1181
00:48:39,389 --> 00:48:43,319
synchronization whatever at some point

1182
00:48:41,130 --> 00:48:44,730
it's gonna take and I assume this has to

1183
00:48:43,320 --> 00:48:48,420
happen it's gonna take what's called a

1184
00:48:44,730 --> 00:48:49,500
ring transition now you don't really

1185
00:48:48,420 --> 00:48:51,570
need to know very much about what that

1186
00:48:49,500 --> 00:48:54,929
is but point being CPUs have the concept

1187
00:48:51,570 --> 00:48:57,390
of rings there's like typically

1188
00:48:54,929 --> 00:49:00,808
ring to ring one ring zero ringing - one

1189
00:48:57,389 --> 00:49:02,129
yes that's a real thing and what these

1190
00:49:00,809 --> 00:49:04,230
are they're basically privileged

1191
00:49:02,130 --> 00:49:06,180
privilege levels for what you can

1192
00:49:04,230 --> 00:49:07,889
execute we're just an application we

1193
00:49:06,179 --> 00:49:09,269
have essentially no privileges we can't

1194
00:49:07,889 --> 00:49:12,299
do most of the things that the kernel

1195
00:49:09,269 --> 00:49:13,829
can do of the operating system we don't

1196
00:49:12,300 --> 00:49:15,750
even know what the memory map is like we

1197
00:49:13,829 --> 00:49:16,920
see a virtual address space right so we

1198
00:49:15,750 --> 00:49:18,358
don't even know where the actual

1199
00:49:16,920 --> 00:49:21,420
physical memory is we got no idea what's

1200
00:49:18,358 --> 00:49:22,769
going on right but the colonel knows all

1201
00:49:21,420 --> 00:49:25,079
that stuff and it could do all that

1202
00:49:22,769 --> 00:49:26,639
stuff and part of the reason for the

1203
00:49:25,079 --> 00:49:28,500
separation is obviously for security and

1204
00:49:26,639 --> 00:49:29,940
for stability you don't want like one

1205
00:49:28,500 --> 00:49:31,619
errant application to crash your whole

1206
00:49:29,940 --> 00:49:34,679
machine if you can avoid it so basically

1207
00:49:31,619 --> 00:49:35,700
these rings of privileges obviously on

1208
00:49:34,679 --> 00:49:38,068
the CPU I think we've talked on the

1209
00:49:35,699 --> 00:49:39,509
before helped to ensure that happens so

1210
00:49:38,068 --> 00:49:41,550
at some point after we've built up

1211
00:49:39,510 --> 00:49:43,829
something and we need it to actually go

1212
00:49:41,550 --> 00:49:46,410
off will actually take a transition into

1213
00:49:43,829 --> 00:49:49,619
the actual driver code which is actually

1214
00:49:46,409 --> 00:49:51,480
in ring zero right so we happen on some

1215
00:49:49,619 --> 00:49:53,130
other ring right that's higher than

1216
00:49:51,480 --> 00:49:55,170
moving zero that doesn't have those kind

1217
00:49:53,130 --> 00:49:56,369
of privileges then we go to the actual

1218
00:49:55,170 --> 00:49:58,349
ring that can actually talk to the

1219
00:49:56,369 --> 00:50:00,510
hardware and in here there's like

1220
00:49:58,349 --> 00:50:03,359
something that is going to kick off our

1221
00:50:00,510 --> 00:50:07,200
push buffer right so this push buffer

1222
00:50:03,358 --> 00:50:09,029
might have had like our memory it may

1223
00:50:07,199 --> 00:50:11,279
have mapped it to a physical thing this

1224
00:50:09,030 --> 00:50:12,809
is our virtual address space right it

1225
00:50:11,280 --> 00:50:14,339
may have already been locked a physical

1226
00:50:12,809 --> 00:50:15,930
in which case the kick off can kick it

1227
00:50:14,338 --> 00:50:17,699
off directly transfer and kick it off

1228
00:50:15,929 --> 00:50:19,259
directly it may not have been in which

1229
00:50:17,699 --> 00:50:21,750
case what it will do is actually do a

1230
00:50:19,260 --> 00:50:24,299
copy first I don't I have no idea that

1231
00:50:21,750 --> 00:50:26,579
happens in our our ring or in their ring

1232
00:50:24,298 --> 00:50:29,548
I have no idea right but at some point

1233
00:50:26,579 --> 00:50:31,048
inside the ring zero at least I assume

1234
00:50:29,548 --> 00:50:33,150
you softly ever exerted this maybe

1235
00:50:31,048 --> 00:50:34,409
they've changed that who even knows but

1236
00:50:33,150 --> 00:50:36,088
at some point it will do what's called a

1237
00:50:34,409 --> 00:50:38,098
kick off which is basically saying this

1238
00:50:36,088 --> 00:50:40,409
push buffer with all the stuff that you

1239
00:50:38,099 --> 00:50:42,420
told the graphics card to do now is

1240
00:50:40,409 --> 00:50:45,328
ready to go so start executing it on the

1241
00:50:42,420 --> 00:50:48,059
graphics card and that will trigger this

1242
00:50:45,329 --> 00:50:50,369
transfer and the GPU will get that and

1243
00:50:48,059 --> 00:50:53,670
start working on it right so the mental

1244
00:50:50,369 --> 00:50:55,760
model that you should have is looks a

1245
00:50:53,670 --> 00:50:58,170
lot like this it should be I've got

1246
00:50:55,760 --> 00:51:00,990
stuff in my memory space that I'm

1247
00:50:58,170 --> 00:51:02,608
building up with calls to OpenGL and we

1248
00:51:00,989 --> 00:51:03,959
can't build it up manually the reason we

1249
00:51:02,608 --> 00:51:05,848
can't build it up manually is because we

1250
00:51:03,960 --> 00:51:07,318
don't know the format it's different for

1251
00:51:05,849 --> 00:51:08,620
every graphics card we don't know what

1252
00:51:07,318 --> 00:51:10,239
the push buffer command buffer

1253
00:51:08,619 --> 00:51:11,769
stuff has to look like right we have no

1254
00:51:10,239 --> 00:51:15,299
idea these are often called command

1255
00:51:11,769 --> 00:51:15,300
buffers by the way not just push buffers

1256
00:51:15,420 --> 00:51:20,470
we under the format so we got a call and

1257
00:51:18,219 --> 00:51:22,750
open jail or again direct3d or mantle or

1258
00:51:20,469 --> 00:51:26,109
anything else we have to call into that

1259
00:51:22,750 --> 00:51:28,690
to construct these things once we have

1260
00:51:26,110 --> 00:51:31,240
constructed them then we at some point

1261
00:51:28,690 --> 00:51:33,010
trust that the driver will take a ring

1262
00:51:31,239 --> 00:51:35,139
transition kick it off and the GPU will

1263
00:51:33,010 --> 00:51:38,080
start doing it right and that's what

1264
00:51:35,139 --> 00:51:40,539
happens so it's a very very buffer

1265
00:51:38,079 --> 00:51:42,429
driven it looks a lot like our renderer

1266
00:51:40,539 --> 00:51:44,800
looks right now you build up buffers

1267
00:51:42,429 --> 00:51:47,199
then you say hey go render this and it

1268
00:51:44,800 --> 00:51:49,600
does the only difference is instead of

1269
00:51:47,199 --> 00:51:52,210
it rendering right then on the CPU it

1270
00:51:49,599 --> 00:51:53,529
gets handed off over the PCI bus over

1271
00:51:52,210 --> 00:51:55,929
the graphics card where the graphics

1272
00:51:53,530 --> 00:51:58,330
card will do it while we're doing other

1273
00:51:55,929 --> 00:52:00,519
things we don't wait we just kick it off

1274
00:51:58,329 --> 00:52:04,690
it goes and does it and later we get the

1275
00:52:00,519 --> 00:52:07,900
results right so that in a nutshell is

1276
00:52:04,690 --> 00:52:10,030
what we're going to be doing and so when

1277
00:52:07,900 --> 00:52:12,070
we call our OpenGL calls they're

1278
00:52:10,030 --> 00:52:14,200
somewhat high-level right cuz they're

1279
00:52:12,070 --> 00:52:16,900
their card and mastic so they just kind

1280
00:52:14,199 --> 00:52:19,389
of have some basic ideas of the things

1281
00:52:16,900 --> 00:52:21,670
that grass don't need to do and then the

1282
00:52:19,389 --> 00:52:23,650
driver will take care of translating

1283
00:52:21,670 --> 00:52:25,240
those somewhat high-level things into

1284
00:52:23,650 --> 00:52:27,639
whatever the actual push buffer stuff

1285
00:52:25,239 --> 00:52:29,859
was you need to do now if this were a

1286
00:52:27,639 --> 00:52:32,829
locked machine meaning we knew the exact

1287
00:52:29,860 --> 00:52:34,660
hardware configuration of it and we had

1288
00:52:32,829 --> 00:52:36,699
all the docs and everything you could

1289
00:52:34,659 --> 00:52:39,250
imagine doing the low-level version of

1290
00:52:36,699 --> 00:52:41,919
this code like on a Raspberry Pi or

1291
00:52:39,250 --> 00:52:43,809
something where you know the format of

1292
00:52:41,920 --> 00:52:45,460
the push buffer you know how to do a

1293
00:52:43,809 --> 00:52:47,079
ring zero kick off of the thing or

1294
00:52:45,460 --> 00:52:49,090
whatever you know all that you could

1295
00:52:47,079 --> 00:52:51,130
write all this yourself there's no magic

1296
00:52:49,090 --> 00:52:53,530
to it it's not like we couldn't write it

1297
00:52:51,130 --> 00:52:56,050
ourselves the problem is on a PC

1298
00:52:53,530 --> 00:52:57,460
there's no way to write it yourself you

1299
00:52:56,050 --> 00:52:58,750
have to run across Walter grabs cards

1300
00:52:57,460 --> 00:52:59,980
you have to run on graphics cards are

1301
00:52:58,750 --> 00:53:01,989
completely undocumented and that you

1302
00:52:59,980 --> 00:53:03,639
don't know the pushover format for so

1303
00:53:01,989 --> 00:53:05,079
yeah good luck you got a GeForce Titan

1304
00:53:03,639 --> 00:53:06,730
in there you'll never be able to talk to

1305
00:53:05,079 --> 00:53:11,590
it with your own code because they won't

1306
00:53:06,730 --> 00:53:12,639
tell you how it works right so so

1307
00:53:11,590 --> 00:53:15,340
basically what we're doing is we're

1308
00:53:12,639 --> 00:53:17,650
calling through OpenGL to do those

1309
00:53:15,340 --> 00:53:19,390
operations that we know we could

1310
00:53:17,650 --> 00:53:20,680
conceptually think of how to do if we

1311
00:53:19,389 --> 00:53:22,089
only knew what the grass art actually

1312
00:53:20,679 --> 00:53:23,589
did and we

1313
00:53:22,090 --> 00:53:26,890
could abstract across multiple ones

1314
00:53:23,590 --> 00:53:29,230
right but that's what's going on so the

1315
00:53:26,889 --> 00:53:31,389
thing that we will try to do tomorrow

1316
00:53:29,230 --> 00:53:33,219
probably because I'm going to go to

1317
00:53:31,389 --> 00:53:34,659
questions here the female will try to do

1318
00:53:33,219 --> 00:53:36,369
tomorrow and maybe we'll even have HTML

1319
00:53:34,659 --> 00:53:39,309
capture card if I'm lucky the thing

1320
00:53:36,369 --> 00:53:42,730
we'll try to do tomorrow is we will try

1321
00:53:39,309 --> 00:53:48,210
to do the very simple operation that is

1322
00:53:42,730 --> 00:53:52,000
as follows we have our main memory and

1323
00:53:48,210 --> 00:53:54,329
we have our screen display

1324
00:53:52,000 --> 00:53:58,719
we made this with our own renderer right

1325
00:53:54,329 --> 00:54:00,279
what we need to do here's the GPU mem

1326
00:53:58,719 --> 00:54:04,239
actually through that a little further

1327
00:54:00,280 --> 00:54:05,650
away right what we need to do is we need

1328
00:54:04,239 --> 00:54:09,000
to take this and we need to put it into

1329
00:54:05,650 --> 00:54:11,639
the GPU memory so that has to happen and

1330
00:54:09,000 --> 00:54:13,960
by the way it's this is a bit of a lie

1331
00:54:11,639 --> 00:54:15,429
the reason this is allies that GPUs

1332
00:54:13,960 --> 00:54:18,250
oftentimes don't store things as

1333
00:54:15,429 --> 00:54:20,529
continuous linear bitmaps like we do

1334
00:54:18,250 --> 00:54:22,420
they also store them with a thing called

1335
00:54:20,530 --> 00:54:24,160
Swizzle

1336
00:54:22,420 --> 00:54:25,539
that's designed to optimize the memory

1337
00:54:24,159 --> 00:54:27,460
access you don't have to worry about

1338
00:54:25,539 --> 00:54:28,960
that right now but just so you know this

1339
00:54:27,460 --> 00:54:36,449
is a bit of a lie this might actually

1340
00:54:28,960 --> 00:54:39,849
look more like this totally

1341
00:54:36,449 --> 00:54:41,649
discombobulated version of that guy so

1342
00:54:39,849 --> 00:54:46,569
we need to move our image over right so

1343
00:54:41,650 --> 00:54:52,260
that's step one move over I should say

1344
00:54:46,570 --> 00:54:55,260
let's just say step one transfer our

1345
00:54:52,260 --> 00:54:55,260
bitmap

1346
00:54:55,420 --> 00:55:03,789
step two we have to then tell it that we

1347
00:55:01,329 --> 00:55:08,548
would like to draw that bitmap to the

1348
00:55:03,789 --> 00:55:13,869
screen right so step two is we need to

1349
00:55:08,548 --> 00:55:15,670
take the screen and fill it with

1350
00:55:13,869 --> 00:55:18,400
probably what will end up being like two

1351
00:55:15,670 --> 00:55:20,260
triangles right because GPUs are

1352
00:55:18,400 --> 00:55:22,720
optimized for drawing triangles so we

1353
00:55:20,260 --> 00:55:26,250
draw like two triangles that encompass

1354
00:55:22,719 --> 00:55:32,739
the whole screen okay so we need to draw

1355
00:55:26,250 --> 00:55:37,119
two triangles and those two triangles

1356
00:55:32,739 --> 00:55:40,899
have to map to our bitmap so we need to

1357
00:55:37,119 --> 00:55:44,559
use textures right to grab this part of

1358
00:55:40,900 --> 00:55:50,108
this triangle and put it here and this

1359
00:55:44,559 --> 00:55:52,869
part and put it there right that's all

1360
00:55:50,108 --> 00:55:56,619
we need to do and we just need to do

1361
00:55:52,869 --> 00:55:58,150
that with a direct copy right we don't

1362
00:55:56,619 --> 00:56:00,190
want no z-buffering we don't want no

1363
00:55:58,150 --> 00:56:02,048
shading we don't want no nothing we just

1364
00:56:00,190 --> 00:56:05,380
want to be directly written to the

1365
00:56:02,048 --> 00:56:07,150
screen and then three we have to display

1366
00:56:05,380 --> 00:56:08,380
it and we've already got that right

1367
00:56:07,150 --> 00:56:11,289
because you saw us clear the screen and

1368
00:56:08,380 --> 00:56:12,970
we did the display so this is all we

1369
00:56:11,289 --> 00:56:14,170
have to do it'll take us a little bit of

1370
00:56:12,969 --> 00:56:16,449
doing to do it because it's a little bit

1371
00:56:14,170 --> 00:56:18,130
cumbersome to do these things because

1372
00:56:16,449 --> 00:56:20,169
again once you start talking about going

1373
00:56:18,130 --> 00:56:21,519
through api's and there's two separate

1374
00:56:20,170 --> 00:56:22,720
sets of memory and all these other sorts

1375
00:56:21,518 --> 00:56:24,008
of things things get a lot more

1376
00:56:22,719 --> 00:56:25,659
complicated when they're just on a CPU

1377
00:56:24,009 --> 00:56:27,909
it's one of the reasons that I really

1378
00:56:25,659 --> 00:56:31,358
just don't like the idea of GPUs I wish

1379
00:56:27,909 --> 00:56:32,980
that we just had super beefy CPUs the

1380
00:56:31,358 --> 00:56:35,889
world would be such a nice better place

1381
00:56:32,980 --> 00:56:37,869
be a lot more reliable - but we haven't

1382
00:56:35,889 --> 00:56:40,268
ever gotten there someday I hope we do

1383
00:56:37,869 --> 00:56:41,950
I'm gonna go ahead and go to the Q&amp;A so

1384
00:56:40,268 --> 00:56:43,328
if you have questions about how graphics

1385
00:56:41,949 --> 00:56:45,219
cards work or what's going on they're

1386
00:56:43,329 --> 00:56:46,568
ones that aren't too Hardware specific

1387
00:56:45,219 --> 00:56:47,980
so that I can answer them because I am

1388
00:56:46,568 --> 00:56:49,838
NOT a hardware guy so I can't really

1389
00:56:47,980 --> 00:56:52,059
tell you some of the real nitty-gritty

1390
00:56:49,838 --> 00:56:55,028
stuff but if you have those questions

1391
00:56:52,059 --> 00:56:56,559
please go ahead and send them now with a

1392
00:56:55,028 --> 00:56:59,190
Q : in front of them and I will try to

1393
00:56:56,559 --> 00:56:59,190
give them an answer

1394
00:57:03,659 --> 00:57:08,018
ratchet freak you can instead of two

1395
00:57:05,980 --> 00:57:09,639
triangles use a single triangle twice as

1396
00:57:08,018 --> 00:57:11,348
big it avoids the overdraw at the

1397
00:57:09,639 --> 00:57:12,098
diagonal sure yeah you can do lots of

1398
00:57:11,349 --> 00:57:14,859
things

1399
00:57:12,099 --> 00:57:16,450
you also can just not do a triangle draw

1400
00:57:14,858 --> 00:57:17,798
at all right because sometimes they

1401
00:57:16,449 --> 00:57:19,480
actually have the constants constant of

1402
00:57:17,798 --> 00:57:21,219
AB lit so if you're worried about the

1403
00:57:19,480 --> 00:57:25,449
actual speed there's a lot of different

1404
00:57:21,219 --> 00:57:28,389
things you can do but I would I would

1405
00:57:25,449 --> 00:57:31,509
try to very strenuously point out the

1406
00:57:28,389 --> 00:57:34,690
fact that you really should not be

1407
00:57:31,509 --> 00:57:41,048
thinking about that in any way at this

1408
00:57:34,690 --> 00:57:42,548
point right like literally I have no

1409
00:57:41,048 --> 00:57:44,710
idea why that would even be entering

1410
00:57:42,548 --> 00:57:47,018
your head at this point because you have

1411
00:57:44,710 --> 00:57:48,400
no idea if this would even be slow in

1412
00:57:47,018 --> 00:57:50,889
fact I can guarantee you that it won't

1413
00:57:48,400 --> 00:57:51,910
be slow the diagonal is so few pixels

1414
00:57:50,889 --> 00:57:54,098
that it's literally completely

1415
00:57:51,909 --> 00:57:56,379
irrelevant right most of the time you

1416
00:57:54,099 --> 00:57:58,769
don't do that operation for speed the

1417
00:57:56,380 --> 00:58:00,759
like giant triangle thing this thing

1418
00:57:58,768 --> 00:58:02,739
most of the time you don't do that

1419
00:58:00,759 --> 00:58:05,170
operation for speed anyway the reason

1420
00:58:02,739 --> 00:58:07,919
you actually do it is to avoid that if

1421
00:58:05,170 --> 00:58:12,608
it's something that needs to do like a

1422
00:58:07,920 --> 00:58:14,409
operation that at at those points if you

1423
00:58:12,608 --> 00:58:17,798
operate on them twice you would get an

1424
00:58:14,409 --> 00:58:19,259
incorrect result right but the speed

1425
00:58:17,798 --> 00:58:24,778
difference between those two is like

1426
00:58:19,259 --> 00:58:24,778
really just not very very not important

1427
00:58:32,449 --> 00:58:36,259
quick see for you a question all it does

1428
00:58:34,489 --> 00:58:39,199
on bare-bones physics level is run

1429
00:58:36,260 --> 00:58:46,070
electrons through if statements right go

1430
00:58:39,199 --> 00:58:50,329
left go right etc with transistors so I

1431
00:58:46,070 --> 00:58:51,320
I think I would say although I'm not the

1432
00:58:50,329 --> 00:58:54,500
right one to ask because I'm not a

1433
00:58:51,320 --> 00:58:58,430
hardware guy I think I would say more

1434
00:58:54,500 --> 00:59:01,309
like it's either go forward or stop

1435
00:58:58,429 --> 00:59:03,859
because I believe a transistor usually

1436
00:59:01,309 --> 00:59:06,500
is like something like this right where

1437
00:59:03,860 --> 00:59:09,410
there's a there's electrons going this

1438
00:59:06,500 --> 00:59:13,400
way and there's a thing that will either

1439
00:59:09,409 --> 00:59:15,319
stop them from going or let them go so I

1440
00:59:13,400 --> 00:59:19,309
don't think they do left or right they

1441
00:59:15,320 --> 00:59:20,570
either go or don't go so I don't know

1442
00:59:19,309 --> 00:59:22,489
but maybe you're right maybe it's left

1443
00:59:20,570 --> 00:59:27,559
or right maybe maybe it's forward or

1444
00:59:22,489 --> 00:59:28,549
into the sink right so they do go in two

1445
00:59:27,559 --> 00:59:30,409
different directions in that sense I

1446
00:59:28,550 --> 00:59:31,940
guess but I don't know I'm not a

1447
00:59:30,409 --> 00:59:36,139
hardware guy I know nothing about

1448
00:59:31,940 --> 00:59:38,329
hardware can't you run a Xeon Phi as

1449
00:59:36,139 --> 00:59:40,309
your main processor or did they make

1450
00:59:38,329 --> 00:59:42,799
them dedicated only not like

1451
00:59:40,309 --> 00:59:45,170
price-performance makes sense there you

1452
00:59:42,800 --> 00:59:49,150
can run a Xeon Phi as your main

1453
00:59:45,170 --> 00:59:49,150
processor with the second one I believe

1454
00:59:49,329 --> 00:59:57,619
but I you can't quite so the problem

1455
00:59:55,969 --> 00:59:59,750
with that is they nukes the texture

1456
00:59:57,619 --> 01:00:01,250
units on it otherwise that pretty much

1457
00:59:59,750 --> 01:00:04,820
would be exactly what you would want

1458
01:00:01,250 --> 01:00:07,639
right but it used to have texture units

1459
01:00:04,820 --> 01:00:09,559
and now it doesn't and I don't know if

1460
01:00:07,639 --> 01:00:10,909
you can really do high-performance

1461
01:00:09,559 --> 01:00:16,699
crafts without texture units I'm not

1462
01:00:10,909 --> 01:00:18,799
sure kronole dragon what barriers are

1463
01:00:16,699 --> 01:00:21,859
there currently from just using the cpu

1464
01:00:18,800 --> 01:00:24,410
as a GPU there aren't any it's just it's

1465
01:00:21,860 --> 01:00:27,740
just cost right

1466
01:00:24,409 --> 01:00:29,000
so if Intel wanted to like the person

1467
01:00:27,739 --> 01:00:31,189
who just mentioned the xeon phi

1468
01:00:29,000 --> 01:00:34,039
you know the xeon phi is like faster

1469
01:00:31,190 --> 01:00:37,429
than GPU add a lot of stuff big big

1470
01:00:34,039 --> 01:00:39,409
computation stuff so you know there's a

1471
01:00:37,429 --> 01:00:41,029
few things that GPUs do better based on

1472
01:00:39,409 --> 01:00:44,299
how the you know like I said texture

1473
01:00:41,030 --> 01:00:46,430
fetching and stuff like that but there

1474
01:00:44,300 --> 01:00:49,130
it's just cost its like Intel doesn't

1475
01:00:46,429 --> 01:00:50,210
want to sell $2,000 CPUs to everyone

1476
01:00:49,130 --> 01:00:53,088
because they know no one would buy them

1477
01:00:50,210 --> 01:00:56,150
because I can't afford them right and so

1478
01:00:53,088 --> 01:01:01,369
you know at the moment it's mostly about

1479
01:00:56,150 --> 01:01:07,579
cost where I shouldn't say cost I should

1480
01:01:01,369 --> 01:01:10,510
say margin maybe like Intel wants to be

1481
01:01:07,579 --> 01:01:13,940
able to sell chips for $100 or whatever

1482
01:01:10,510 --> 01:01:15,140
and make $70 off it or whatever you know

1483
01:01:13,940 --> 01:01:18,230
who I don't know what it is they want a

1484
01:01:15,139 --> 01:01:20,719
fairly fat Marg in there right they

1485
01:01:18,230 --> 01:01:23,990
don't want to do something that's like

1486
01:01:20,719 --> 01:01:26,689
$700 that they make six the word they

1487
01:01:23,989 --> 01:01:29,838
have to pay $650 in that is cost or

1488
01:01:26,690 --> 01:01:31,818
whatever right so like Nvidia and those

1489
01:01:29,838 --> 01:01:35,239
people like their margins are I think

1490
01:01:31,818 --> 01:01:37,940
much lower than the margins that Intel

1491
01:01:35,239 --> 01:01:40,699
has four CPUs and so it's really just a

1492
01:01:37,940 --> 01:01:42,139
cost thing I think Intel could make you

1493
01:01:40,699 --> 01:01:44,419
know they could make something that was

1494
01:01:42,139 --> 01:01:50,779
really fast and was just a single one

1495
01:01:44,420 --> 01:01:52,190
that did it but you know a slim seer can

1496
01:01:50,780 --> 01:01:55,670
we make a first-person 3d mode of the

1497
01:01:52,190 --> 01:01:57,769
game just for education ho keeper Caleb

1498
01:01:55,670 --> 01:02:01,220
where does the ps4 exponent processor

1499
01:01:57,769 --> 01:02:04,460
lie on the CPU GPU spectrum it's it's

1500
01:02:01,219 --> 01:02:07,009
basically like thing it's like a lot

1501
01:02:04,460 --> 01:02:09,199
like skylake so where did I draw that

1502
01:02:07,010 --> 01:02:15,619
guy I don't know where I drew a lot of

1503
01:02:09,199 --> 01:02:19,608
drama game so basically like you know if

1504
01:02:15,619 --> 01:02:22,869
you've got like a skylake chip it's

1505
01:02:19,608 --> 01:02:22,869
something like you know

1506
01:02:26,420 --> 01:02:30,358
get something like this I don't know if

1507
01:02:28,949 --> 01:02:32,789
it's actually that way it's I think it's

1508
01:02:30,358 --> 01:02:36,960
70% not quite 75 so this might not be

1509
01:02:32,789 --> 01:02:39,329
quite right but it's like that and it's

1510
01:02:36,960 --> 01:02:43,740
just one chip and then you've got your

1511
01:02:39,329 --> 01:02:46,348
memory right and the same thing is true

1512
01:02:43,739 --> 01:02:47,699
basically for the AMD like bulldozer

1513
01:02:46,349 --> 01:02:49,740
line of stuff right which is like the

1514
01:02:47,699 --> 01:02:52,618
expo and the ps4 are basically like you

1515
01:02:49,739 --> 01:02:54,509
know we can't know exactly what they are

1516
01:02:52,619 --> 01:02:56,190
because they don't let that out of NDA

1517
01:02:54,510 --> 01:02:59,910
but you know they're basically like an

1518
01:02:56,190 --> 01:03:01,349
AMD bulldozer kind of a type of thing so

1519
01:02:59,909 --> 01:03:04,019
it's basically the exact same thing

1520
01:03:01,349 --> 01:03:06,119
right it's like oh there's some CPUs and

1521
01:03:04,019 --> 01:03:11,989
then there's a big old GPU on a die and

1522
01:03:06,119 --> 01:03:11,990
it looks like that or whatever right and

1523
01:03:12,139 --> 01:03:17,179
not much is really different it's

1524
01:03:14,309 --> 01:03:19,380
exactly the same you know you can

1525
01:03:17,179 --> 01:03:21,029
because you that the big difference

1526
01:03:19,380 --> 01:03:22,890
really is that because you know that

1527
01:03:21,030 --> 01:03:25,260
they're both on one chip you can execute

1528
01:03:22,889 --> 01:03:27,089
you can short-circuit things to the GPU

1529
01:03:25,260 --> 01:03:28,740
really quickly so you can you know kick

1530
01:03:27,090 --> 01:03:30,180
off computation so cheap you're the cook

1531
01:03:28,739 --> 01:03:32,098
away you know it's on the same die like

1532
01:03:30,179 --> 01:03:34,019
that and so there you don't to worry

1533
01:03:32,099 --> 01:03:35,580
about that PCI bus transfer nonsense and

1534
01:03:34,019 --> 01:03:36,838
they all got shared memory so it all

1535
01:03:35,579 --> 01:03:38,639
just kind of parties out of here it's a

1536
01:03:36,838 --> 01:03:40,409
better architecture right like this

1537
01:03:38,639 --> 01:03:42,929
would be the best possible thing would

1538
01:03:40,409 --> 01:03:45,569
be like if Intel and NVIDIA got together

1539
01:03:42,929 --> 01:03:48,118
and just well them together until just

1540
01:03:45,570 --> 01:03:51,539
decided to like make some

1541
01:03:48,119 --> 01:03:58,349
thousand-dollar chip that had like a you

1542
01:03:51,539 --> 01:04:02,400
know 40 cores you know 40 40 I don't

1543
01:03:58,349 --> 01:04:03,900
know not 40 I suppose more like 256 ALUs

1544
01:04:02,400 --> 01:04:05,460
or something on it or whatever that I

1545
01:04:03,900 --> 01:04:08,300
don't know that would be the best

1546
01:04:05,460 --> 01:04:08,300
possible thing for sure

1547
01:04:17,880 --> 01:04:21,910
Quarter Trump says Intel has killed off

1548
01:04:20,079 --> 01:04:24,818
many projects that made good money but

1549
01:04:21,909 --> 01:04:26,048
had bad margins yeah exactly I mean one

1550
01:04:24,818 --> 01:04:27,818
of the things you have to remember is

1551
01:04:26,048 --> 01:04:33,309
that it's a little bit of a problem

1552
01:04:27,818 --> 01:04:35,380
where you know when Intel's

1553
01:04:33,309 --> 01:04:37,298
when Intel comes out with us with a GPU

1554
01:04:35,380 --> 01:04:40,390
and it's not very good or something

1555
01:04:37,298 --> 01:04:41,889
right the temptation might be to think

1556
01:04:40,389 --> 01:04:43,268
that like oh they just don't know how to

1557
01:04:41,889 --> 01:04:45,818
make a GPU as good as in a video or

1558
01:04:43,268 --> 01:04:47,379
something right but the reality is that

1559
01:04:45,818 --> 01:04:50,099
that's just not the case it's usually

1560
01:04:47,380 --> 01:04:52,088
more like they had a very specific price

1561
01:04:50,099 --> 01:04:53,289
target and margin target they were

1562
01:04:52,088 --> 01:04:55,599
looking for and this was the chip that

1563
01:04:53,289 --> 01:04:57,339
fit in that target because Intel's fab

1564
01:04:55,599 --> 01:04:59,949
technology like annihilates in videos

1565
01:04:57,338 --> 01:05:01,688
fab technology to say the least so you

1566
01:04:59,949 --> 01:05:04,838
know if they wanted to they could fab a

1567
01:05:01,688 --> 01:05:06,399
pretty amazing GPU I'm quite certain but

1568
01:05:04,838 --> 01:05:09,308
that's just not where they're gonna make

1569
01:05:06,400 --> 01:05:13,929
their money and so you know if there was

1570
01:05:09,309 --> 01:05:14,589
a market for $2,500 GPUs in in enough

1571
01:05:13,929 --> 01:05:17,139
quantity

1572
01:05:14,588 --> 01:05:22,150
I think suddenly you'd see it Intel one

1573
01:05:17,139 --> 01:05:24,098
right and the other problem is software

1574
01:05:22,150 --> 01:05:27,099
Intel can't write drivers to save their

1575
01:05:24,099 --> 01:05:28,390
life right can't do it no idea how to

1576
01:05:27,099 --> 01:05:29,559
make software Intel's never know how to

1577
01:05:28,389 --> 01:05:30,578
make software I probably never will

1578
01:05:29,559 --> 01:05:32,949
they're getting better than they used to

1579
01:05:30,579 --> 01:05:35,619
be but they're really bad and so a lot

1580
01:05:32,949 --> 01:05:36,909
of the finesse in getting games to run

1581
01:05:35,619 --> 01:05:37,989
well is also at having a well

1582
01:05:36,909 --> 01:05:39,518
functioning driver cuz they're very

1583
01:05:37,989 --> 01:05:41,708
complicated they do a lot of back behind

1584
01:05:39,518 --> 01:05:44,078
the back optimization and a lot of like

1585
01:05:41,708 --> 01:05:45,129
you know complex stuff Intel as has

1586
01:05:44,079 --> 01:05:46,749
traditionally had a lot of trouble with

1587
01:05:45,130 --> 01:05:49,028
that and so that's another big stumbling

1588
01:05:46,748 --> 01:05:50,528
block right that has nothing to do with

1589
01:05:49,028 --> 01:05:53,099
being able to make a fast heart piece of

1590
01:05:50,528 --> 01:05:53,099
hardware so

1591
01:05:55,760 --> 01:05:58,970
long billion I've been told that lots of

1592
01:05:57,559 --> 01:06:00,559
graphics drivers optimize for specific

1593
01:05:58,969 --> 01:06:01,399
games at the driver level how does this

1594
01:06:00,559 --> 01:06:03,110
fit into the equation

1595
01:06:01,400 --> 01:06:05,539
how did this optimization make some

1596
01:06:03,110 --> 01:06:09,430
games run better so what happens with

1597
01:06:05,539 --> 01:06:12,170
that is exactly what you would expect

1598
01:06:09,429 --> 01:06:16,849
this process that I just talked about

1599
01:06:12,170 --> 01:06:19,639
right it's over on the side here

1600
01:06:16,849 --> 01:06:22,250
somewhere right so this process where

1601
01:06:19,639 --> 01:06:24,409
we're building up the push buffer what

1602
01:06:22,250 --> 01:06:27,199
happens is the driver writers will look

1603
01:06:24,409 --> 01:06:29,000
and they'll say oh okay you know we we

1604
01:06:27,199 --> 01:06:31,609
have our driver fully instrumented so if

1605
01:06:29,000 --> 01:06:34,579
we want to we can go and we can run you

1606
01:06:31,610 --> 01:06:37,579
know battlefield or we can run Grand

1607
01:06:34,579 --> 01:06:39,049
Theft Auto and we can look and see how

1608
01:06:37,579 --> 01:06:41,840
it's building up the push buffer is like

1609
01:06:39,050 --> 01:06:44,120
what kind of calls is making and what

1610
01:06:41,840 --> 01:06:46,640
it's doing and since we know how our

1611
01:06:44,119 --> 01:06:47,929
chip works best we can look for ways in

1612
01:06:46,639 --> 01:06:50,509
which they could have done what they did

1613
01:06:47,929 --> 01:06:51,079
more efficiently and we can make that

1614
01:06:50,510 --> 01:06:53,450
happen

1615
01:06:51,079 --> 01:06:57,639
right we can it's sort of it's a lot

1616
01:06:53,449 --> 01:07:01,519
like a fuzzy match kind of a thing right

1617
01:06:57,639 --> 01:07:03,230
it's like oh I know that like in GTA it

1618
01:07:01,519 --> 01:07:04,429
does like this command this command this

1619
01:07:03,230 --> 01:07:06,889
command this command this command or

1620
01:07:04,429 --> 01:07:10,669
whatever right and I know that if I just

1621
01:07:06,889 --> 01:07:12,619
did this earlier and switch the order of

1622
01:07:10,670 --> 01:07:14,990
these two it would render much faster

1623
01:07:12,619 --> 01:07:16,819
right so the driver just does that

1624
01:07:14,989 --> 01:07:19,279
behind your back before actually kicking

1625
01:07:16,820 --> 01:07:21,140
this stuff off the GPU similarly they

1626
01:07:19,280 --> 01:07:23,480
can tune all sorts of stuff about like

1627
01:07:21,139 --> 01:07:25,519
how often they kick things off how big

1628
01:07:23,480 --> 01:07:27,289
the kickoffs are what they wait for

1629
01:07:25,519 --> 01:07:29,000
where the sync points are there's like

1630
01:07:27,289 --> 01:07:31,429
all these things like with that sort of

1631
01:07:29,000 --> 01:07:33,530
process of managing where the GPU is and

1632
01:07:31,429 --> 01:07:34,909
what memory goes where when all of that

1633
01:07:33,530 --> 01:07:36,790
obviously what you could imagine is very

1634
01:07:34,909 --> 01:07:39,769
complicated there's tons of asynchronous

1635
01:07:36,789 --> 01:07:41,320
stuff there they can tune all of that to

1636
01:07:39,769 --> 01:07:43,429
the game and make it run better right

1637
01:07:41,320 --> 01:07:44,960
and so that's why they do a lot of

1638
01:07:43,429 --> 01:07:46,699
detection to see when people are doing

1639
01:07:44,960 --> 01:07:47,840
specific stuff and they do that based on

1640
01:07:46,699 --> 01:07:50,299
the game often times are like oh I know

1641
01:07:47,840 --> 01:07:52,010
this game when it does this thing it's

1642
01:07:50,300 --> 01:07:54,160
safe for me to perform this operation so

1643
01:07:52,010 --> 01:07:54,160
I do

1644
01:08:05,079 --> 01:08:09,739
SSS in the graph why does everyone good

1645
01:08:07,760 --> 01:08:12,170
that works at Intel Kate Intel yet

1646
01:08:09,739 --> 01:08:13,879
simultaneously Intel's engineering is so

1647
01:08:12,170 --> 01:08:17,690
far ahead of everyone else's it doesn't

1648
01:08:13,880 --> 01:08:19,130
compute well I mean if you want to make

1649
01:08:17,689 --> 01:08:20,358
chips you need that kind of a fab

1650
01:08:19,130 --> 01:08:22,460
investment and there's not very many

1651
01:08:20,359 --> 01:08:23,838
places very many places that have it so

1652
01:08:22,460 --> 01:08:27,079
if you're a very smart hardware designer

1653
01:08:23,838 --> 01:08:30,199
where are you gonna go so you may hate

1654
01:08:27,079 --> 01:08:31,670
the bureaucracy or whatever else but at

1655
01:08:30,199 --> 01:08:33,108
the end of the day if you're gonna do a

1656
01:08:31,670 --> 01:08:36,770
lot of chip design stuff I think that's

1657
01:08:33,109 --> 01:08:38,660
where you end up right Carrie Johansen

1658
01:08:36,770 --> 01:08:41,600
what did you think about Larrabee I love

1659
01:08:38,659 --> 01:08:43,189
it I love it love it I wish that Intel

1660
01:08:41,600 --> 01:08:48,440
hadn't essentially killed it with bad

1661
01:08:43,189 --> 01:08:50,239
software practices I mean that's that's

1662
01:08:48,439 --> 01:08:51,829
the long short of it I wish they had had

1663
01:08:50,239 --> 01:08:52,219
I wish that's what I was for going on

1664
01:08:51,829 --> 01:08:54,920
right now

1665
01:08:52,220 --> 01:08:58,520
I wish the xeon phi still had texture

1666
01:08:54,920 --> 01:09:00,230
units does Vulcan fix the problem with

1667
01:08:58,520 --> 01:09:02,299
opengl of not being able to transfer

1668
01:09:00,229 --> 01:09:08,239
buffer objects between processes with

1669
01:09:02,298 --> 01:09:14,060
separate address spaces transfer buffer

1670
01:09:08,239 --> 01:09:16,250
objects between processes what are you

1671
01:09:14,060 --> 01:09:18,560
trying to do that are you talking about

1672
01:09:16,250 --> 01:09:19,760
like a chrome style security system why

1673
01:09:18,560 --> 01:09:23,240
are you trying to transfer buffer

1674
01:09:19,760 --> 01:09:24,980
objects between two processes and no I

1675
01:09:23,239 --> 01:09:27,460
would not be allowed to say either way

1676
01:09:24,979 --> 01:09:29,599
but I'm curious why you want to do that

1677
01:09:27,460 --> 01:09:31,430
not that I think it's bad for it to

1678
01:09:29,600 --> 01:09:37,970
support that story I just I just I'm

1679
01:09:31,430 --> 01:09:39,798
curious Angus folder Intel's compiler is

1680
01:09:37,970 --> 01:09:41,720
meant to be really good right yeah so

1681
01:09:39,798 --> 01:09:43,970
apparently like one guy wrote the IPC

1682
01:09:41,720 --> 01:09:45,560
thing or whatever the the auto

1683
01:09:43,970 --> 01:09:47,000
paralysing one that's supposed to be

1684
01:09:45,560 --> 01:09:48,230
pretty good and it's like some guide

1685
01:09:47,000 --> 01:09:50,119
wrote it who was really good or

1686
01:09:48,229 --> 01:09:53,149
something like that right there are

1687
01:09:50,119 --> 01:09:56,289
normal compiler stuff in the past have

1688
01:09:53,149 --> 01:09:56,289
not was not that good

1689
01:10:09,849 --> 01:10:14,288
let's see can you give us some insight

1690
01:10:12,158 --> 01:10:16,269
without breaking any NDA's how different

1691
01:10:14,288 --> 01:10:23,288
from open jail console graphics API is

1692
01:10:16,270 --> 01:10:26,050
our well yeah I mean so I think the

1693
01:10:23,288 --> 01:10:29,849
right way to think of it is more that

1694
01:10:26,050 --> 01:10:34,538
none of this stuff really matters at all

1695
01:10:29,849 --> 01:10:37,420
it's more about just whether or not you

1696
01:10:34,538 --> 01:10:39,189
can count on certain things so the big

1697
01:10:37,420 --> 01:10:41,559
difference between programming on the

1698
01:10:39,189 --> 01:10:43,269
console and programming on a PC in terms

1699
01:10:41,559 --> 01:10:45,610
of how you deal with the graphics card

1700
01:10:43,270 --> 01:10:47,889
is not that OpenGL is somehow so much

1701
01:10:45,609 --> 01:10:49,118
different the concepts are all basically

1702
01:10:47,889 --> 01:10:50,559
the same the stuff is all the same

1703
01:10:49,118 --> 01:10:54,250
sometimes you can even run the exact

1704
01:10:50,559 --> 01:10:57,070
same shaders right the big difference is

1705
01:10:54,250 --> 01:10:59,500
that you can count on stuff like I know

1706
01:10:57,069 --> 01:11:01,808
that this chip takes this long to do

1707
01:10:59,500 --> 01:11:03,670
this thing I know that this memory is

1708
01:11:01,809 --> 01:11:06,130
shared between the CPU and the GPU I

1709
01:11:03,670 --> 01:11:08,920
know that the CPU can directly call the

1710
01:11:06,130 --> 01:11:10,929
GPU to do some operation right and so

1711
01:11:08,920 --> 01:11:12,969
you can bring those things into the code

1712
01:11:10,929 --> 01:11:14,380
and use them and those are very

1713
01:11:12,969 --> 01:11:16,840
different from what you could do on the

1714
01:11:14,380 --> 01:11:19,078
PC because on the PC you could never

1715
01:11:16,840 --> 01:11:21,400
write that code it wouldn't run up

1716
01:11:19,078 --> 01:11:23,469
abstractly on all the different pcs out

1717
01:11:21,399 --> 01:11:25,839
there so that that price you pay for

1718
01:11:23,469 --> 01:11:31,179
having a heterogeneous computing

1719
01:11:25,840 --> 01:11:33,059
environment is simply that you cannot do

1720
01:11:31,179 --> 01:11:35,889
those things you can't do on a console

1721
01:11:33,059 --> 01:11:37,840
but nowadays that difference is it's

1722
01:11:35,889 --> 01:11:41,260
very small sometimes because a lot of

1723
01:11:37,840 --> 01:11:42,969
times now you know you know Sony doesn't

1724
01:11:41,260 --> 01:11:46,179
want to tell you how the thing works or

1725
01:11:42,969 --> 01:11:47,679
Sony wants to reserve one core for their

1726
01:11:46,179 --> 01:11:49,658
operating system so now you can't even

1727
01:11:47,679 --> 01:11:51,908
count on using all of the cores of the

1728
01:11:49,658 --> 01:11:53,948
thing I read it right it starts to look

1729
01:11:51,908 --> 01:11:56,769
as these things become more like

1730
01:11:53,948 --> 01:11:59,649
livingroom pcs and less like quote

1731
01:11:56,770 --> 01:12:04,539
unquote consoles it's a lot more like

1732
01:11:59,649 --> 01:12:07,988
the PC everyday and so the degree to

1733
01:12:04,538 --> 01:12:10,420
which you're doing mr. fancy-pants stuff

1734
01:12:07,988 --> 01:12:13,658
when you look at like the PlayStation 2

1735
01:12:10,420 --> 01:12:15,630
for example versus PlayStation 4 night

1736
01:12:13,658 --> 01:12:19,000
and day the PlayStation 2 is like

1737
01:12:15,630 --> 01:12:21,099
crazytown and the ps4 is like it's based

1738
01:12:19,000 --> 01:12:24,000
like programming PC with some extra

1739
01:12:21,099 --> 01:12:24,000
stuff you can do because you know

1740
01:12:26,800 --> 01:12:31,208
chrono kun sharing objects weaving

1741
01:12:28,929 --> 01:12:32,590
applications without CPU overhead yeah

1742
01:12:31,208 --> 01:12:34,149
you got to tell me why you want to do

1743
01:12:32,590 --> 01:12:36,369
that I don't know what the use case is

1744
01:12:34,149 --> 01:12:40,808
explain to me why two applications want

1745
01:12:36,368 --> 01:12:41,920
to share an OpenGL object again not

1746
01:12:40,809 --> 01:12:44,679
saying you shouldn't be able do it I'm

1747
01:12:41,920 --> 01:12:45,969
just I'm just curious Kaneko's why do

1748
01:12:44,679 --> 01:12:47,979
you think there's no games about

1749
01:12:45,969 --> 01:12:49,599
programming hardware history of PC

1750
01:12:47,979 --> 01:12:55,090
hardware it's the domain is unimaginably

1751
01:12:49,599 --> 01:12:56,920
rich I don't know I mean Tia T is 100 I

1752
01:12:55,090 --> 01:12:58,269
guess was sort of like that people seem

1753
01:12:56,920 --> 01:12:59,529
to think that was sort of interesting on

1754
01:12:58,269 --> 01:13:01,090
the other hand it's not like a huge

1755
01:12:59,529 --> 01:13:03,009
seller so it's probably like cuz the

1756
01:13:01,090 --> 01:13:05,519
markets not that big might be one of the

1757
01:13:03,010 --> 01:13:05,519
reasons right

1758
01:13:21,599 --> 01:13:28,230
how does G DDR Ram for GPU or concept of

1759
01:13:25,800 --> 01:13:31,139
memory chip design specifically for GPU

1760
01:13:28,229 --> 01:13:34,979
enter into this picture well it's it's

1761
01:13:31,139 --> 01:13:37,078
actually relatively important so again

1762
01:13:34,979 --> 01:13:39,029
I'm not a hardware designer so I'm not

1763
01:13:37,078 --> 01:13:41,368
gonna try and tell you specifically why

1764
01:13:39,029 --> 01:13:44,250
it's important because I'd probably just

1765
01:13:41,368 --> 01:13:49,279
be wrong right but let me give you the

1766
01:13:44,250 --> 01:13:51,840
gist let me give you the gist of it so

1767
01:13:49,279 --> 01:13:55,439
let's take the instruction set designed

1768
01:13:51,840 --> 01:13:56,699
by Intel for Cindy and I'm going to show

1769
01:13:55,439 --> 01:13:59,189
you something we already did in handmade

1770
01:13:56,698 --> 01:14:02,089
hero right in handmade hero we did a

1771
01:13:59,189 --> 01:14:04,979
thing where we computed for addresses

1772
01:14:02,090 --> 01:14:07,590
for textures because we wanted to do

1773
01:14:04,979 --> 01:14:11,039
bilinear filtering right

1774
01:14:07,590 --> 01:14:13,770
and I'm sorry because we were operating

1775
01:14:11,039 --> 01:14:17,639
for wide I should say right so we had

1776
01:14:13,770 --> 01:14:21,360
four pixels now each of those pixels

1777
01:14:17,639 --> 01:14:24,449
wanted to look up right into some piece

1778
01:14:21,359 --> 01:14:26,908
of memory and grab what was there but

1779
01:14:24,448 --> 01:14:29,129
even though we can compute it for wide

1780
01:14:26,908 --> 01:14:32,399
we then had to downshift by extracting

1781
01:14:29,130 --> 01:14:35,849
each one individually executing a scalar

1782
01:14:32,399 --> 01:14:39,839
like a you know you know this is this is

1783
01:14:35,849 --> 01:14:42,510
Cindy for wide scalar operation to go

1784
01:14:39,840 --> 01:14:44,460
fetch the thing then stick it back up

1785
01:14:42,510 --> 01:14:47,760
into the sim D and we had to do that

1786
01:14:44,460 --> 01:14:49,618
four times right that's a classic

1787
01:14:47,760 --> 01:14:51,840
example of how the architecture of the

1788
01:14:49,618 --> 01:14:53,578
memory system is not supporting the

1789
01:14:51,840 --> 01:14:55,770
architecture of the computation what we

1790
01:14:53,578 --> 01:14:57,599
want to do is have four addresses and

1791
01:14:55,770 --> 01:14:59,099
then issue one operation that's like go

1792
01:14:57,599 --> 01:15:04,460
fetch them all and it gets them all

1793
01:14:59,099 --> 01:15:04,460
right and so what should have happened

1794
01:15:09,109 --> 01:15:14,819
and you can see this here see these

1795
01:15:12,779 --> 01:15:17,939
fetches see this this nonsense right

1796
01:15:14,819 --> 01:15:19,349
here look at this right here's all this

1797
01:15:17,939 --> 01:15:20,669
code that's doing four pics of the time

1798
01:15:19,350 --> 01:15:23,340
all of a sudden we have to do it

1799
01:15:20,670 --> 01:15:25,319
manually right to see how we have to

1800
01:15:23,340 --> 01:15:26,940
blow it out - everything is now manually

1801
01:15:25,319 --> 01:15:31,009
done four times four times four times

1802
01:15:26,939 --> 01:15:33,750
four times always four times right and

1803
01:15:31,010 --> 01:15:37,350
that's a classic example of the memory

1804
01:15:33,750 --> 01:15:40,289
subsystem not supporting the AL use and

1805
01:15:37,350 --> 01:15:42,150
so I imagine and I don't know but I

1806
01:15:40,289 --> 01:15:43,439
would I would bet your bottom dollar on

1807
01:15:42,149 --> 01:15:45,089
the GPU

1808
01:15:43,439 --> 01:15:46,859
you don't see anything like that I bet

1809
01:15:45,090 --> 01:15:49,170
you've got a 16 wide fetch that does

1810
01:15:46,859 --> 01:15:50,729
full scatter gathers so it just takes 16

1811
01:15:49,170 --> 01:15:52,440
addresses it goes out and gets all 16

1812
01:15:50,729 --> 01:15:54,419
and brings them back furthermore I bet

1813
01:15:52,439 --> 01:15:56,460
that's a texture unit so that those can

1814
01:15:54,420 --> 01:15:58,649
actually do the bilinear sampling in the

1815
01:15:56,460 --> 01:16:00,899
memory so I bet the memory never even

1816
01:15:58,649 --> 01:16:04,710
has to transfer that stuff it probably

1817
01:16:00,899 --> 01:16:07,949
can grab up a bilinear sample in like

1818
01:16:04,710 --> 01:16:09,180
one go or something right and again

1819
01:16:07,949 --> 01:16:11,099
that's all because that memory is

1820
01:16:09,180 --> 01:16:13,050
designed fit I just think that's what

1821
01:16:11,100 --> 01:16:15,600
should happen with memory like we should

1822
01:16:13,050 --> 01:16:17,250
just have that with memory on the CPU -

1823
01:16:15,600 --> 01:16:19,380
I would like to see it go that way

1824
01:16:17,250 --> 01:16:21,000
because like I said I just want CPUs I

1825
01:16:19,380 --> 01:16:23,489
don't want GPUs in the future I just

1826
01:16:21,000 --> 01:16:26,390
want a big old beefy CPU but you know

1827
01:16:23,489 --> 01:16:26,389
probably not gonna get it

1828
01:16:36,389 --> 01:16:41,559
could you one day maybe do a pre after

1829
01:16:39,338 --> 01:16:43,359
stream short summary about your thoughts

1830
01:16:41,559 --> 01:16:45,748
on os design and what you would do

1831
01:16:43,359 --> 01:16:48,039
differently given current hardware

1832
01:16:45,748 --> 01:16:50,438
that'll be something I'd probably talk

1833
01:16:48,038 --> 01:16:52,688
about in a more formal setting at some

1834
01:16:50,439 --> 01:16:56,550
point but it's not gonna be anytime soon

1835
01:16:52,689 --> 01:16:56,550
probably in about a year or so I

1836
01:16:56,819 --> 01:17:00,729
mustered up one more how come the

1837
01:16:58,899 --> 01:17:02,588
witness has four gigabytes of RAM as a

1838
01:17:00,729 --> 01:17:05,378
minimum requirement I don't doubt it has

1839
01:17:02,588 --> 01:17:06,609
great optimizations as John is an apex

1840
01:17:05,378 --> 01:17:09,099
lab programmer is it because nowadays

1841
01:17:06,609 --> 01:17:11,050
everyone has four gigs at least and they

1842
01:17:09,099 --> 01:17:13,059
thought it's unfeasible or too limiting

1843
01:17:11,050 --> 01:17:17,739
to go below that what can be the design

1844
01:17:13,059 --> 01:17:20,050
behind that requirement so I feel like

1845
01:17:17,738 --> 01:17:23,408
it's probably not really my place to

1846
01:17:20,050 --> 01:17:26,409
answer that but the answer in you know

1847
01:17:23,408 --> 01:17:30,429
in sort of the abstract sense is that

1848
01:17:26,408 --> 01:17:31,868
actually the witnesses memory the way

1849
01:17:30,429 --> 01:17:34,918
that their architecture works in the

1850
01:17:31,868 --> 01:17:38,198
witness is actually not great for memory

1851
01:17:34,918 --> 01:17:43,988
so it does not have great optimizations

1852
01:17:38,198 --> 01:17:46,868
for memory at all it's it's it's it's

1853
01:17:43,988 --> 01:17:48,518
not prickly good at that and I can tell

1854
01:17:46,868 --> 01:17:50,648
you the reason why that is and the

1855
01:17:48,519 --> 01:17:53,829
reason is because when they started the

1856
01:17:50,649 --> 01:17:55,539
witness John was thinking that it was

1857
01:17:53,828 --> 01:17:57,818
going to be a game that would be like

1858
01:17:55,538 --> 01:17:59,498
you know 5,000 entities or 6,000

1859
01:17:57,819 --> 01:18:03,669
entities to make up the island or

1860
01:17:59,498 --> 01:18:07,898
whatever the actual count is like 65,000

1861
01:18:03,668 --> 01:18:10,439
I think and it ease and so the game grew

1862
01:18:07,899 --> 01:18:14,199
from a code base and never was really

1863
01:18:10,439 --> 01:18:17,229
redesigned it grew from a code base

1864
01:18:14,198 --> 01:18:20,799
where it just can't really handle paging

1865
01:18:17,229 --> 01:18:22,059
very well it has sort of asset streaming

1866
01:18:20,800 --> 01:18:28,329
shoehorned in and not a particularly

1867
01:18:22,059 --> 01:18:30,458
good way and and the actual footprint of

1868
01:18:28,328 --> 01:18:33,158
the game itself just it's not really

1869
01:18:30,458 --> 01:18:35,439
designed to to use small amounts of

1870
01:18:33,158 --> 01:18:38,319
memory

1871
01:18:35,439 --> 01:18:43,569
that said does it actually require four

1872
01:18:38,319 --> 01:18:45,729
dicks to run I don't know I'm not really

1873
01:18:43,569 --> 01:18:48,279
sure it does you know I think they

1874
01:18:45,729 --> 01:18:50,739
probably picked a fairly high number

1875
01:18:48,279 --> 01:18:52,239
just cuz why not like any machine that

1876
01:18:50,739 --> 01:18:53,829
can probably that's probably fast enough

1877
01:18:52,239 --> 01:18:55,779
to run it probably has four gigs of RAM

1878
01:18:53,829 --> 01:18:58,750
or something because it's a pretty

1879
01:18:55,779 --> 01:19:05,079
graphics intensive game right so I don't

1880
01:18:58,750 --> 01:19:07,300
know but yeah it's the reason that if it

1881
01:19:05,079 --> 01:19:08,800
does actually take four gigabytes of RAM

1882
01:19:07,300 --> 01:19:12,970
and I don't know if it actually does but

1883
01:19:08,800 --> 01:19:16,300
the reason is very simply because it's

1884
01:19:12,970 --> 01:19:19,480
not designed to be memory optimal at all

1885
01:19:16,300 --> 01:19:21,670
it's not even it's not even it was never

1886
01:19:19,479 --> 01:19:24,279
even a goal of the development process

1887
01:19:21,670 --> 01:19:28,390
to keep that number low I guess is what

1888
01:19:24,279 --> 01:19:29,949
I would say so like literally you know I

1889
01:19:28,390 --> 01:19:31,720
don't want to say literally but almost

1890
01:19:29,949 --> 01:19:38,970
no engineering effort was ever expended

1891
01:19:31,720 --> 01:19:38,970
by anybody to to make sure that happened

1892
01:19:46,340 --> 01:19:50,069
Elven why does it always seem like PC

1893
01:19:48,630 --> 01:19:51,449
games claim that they require much more

1894
01:19:50,069 --> 01:19:52,769
hardware power than they need do they

1895
01:19:51,449 --> 01:19:55,710
want the extra power just in case

1896
01:19:52,770 --> 01:19:57,000
something goes wrong or what well a lot

1897
01:19:55,710 --> 01:20:01,260
of the reason is is to cut down on

1898
01:19:57,000 --> 01:20:02,880
support right you know you don't want to

1899
01:20:01,260 --> 01:20:04,650
necessarily come out and say this is the

1900
01:20:02,880 --> 01:20:07,230
absolute bare minimum that my game could

1901
01:20:04,649 --> 01:20:08,699
run in because then like some user like

1902
01:20:07,229 --> 01:20:10,169
is running like 12 things in the

1903
01:20:08,699 --> 01:20:12,420
background and has like their World of

1904
01:20:10,170 --> 01:20:13,859
Warcraft game open like doing something

1905
01:20:12,420 --> 01:20:14,850
and then you try to run the game and

1906
01:20:13,859 --> 01:20:16,170
they complain to you that it doesn't

1907
01:20:14,850 --> 01:20:18,539
work on the minimum systems back or

1908
01:20:16,170 --> 01:20:21,000
whatever right and so part of it is just

1909
01:20:18,539 --> 01:20:23,220
like you don't want to set your minimum

1910
01:20:21,000 --> 01:20:24,420
systems back down to like the most rage

1911
01:20:23,220 --> 01:20:27,510
of things so if the witness can actually

1912
01:20:24,420 --> 01:20:29,279
run in 3 gigabytes of memory they might

1913
01:20:27,510 --> 01:20:31,020
not have an incentive to say that they

1914
01:20:29,279 --> 01:20:33,409
might be like 4 gig you know make sure

1915
01:20:31,020 --> 01:20:36,090
you know don't let's not push it right

1916
01:20:33,409 --> 01:20:37,739
and so I think most games probably

1917
01:20:36,090 --> 01:20:39,449
followed that better to be safe than

1918
01:20:37,739 --> 01:20:42,059
sorry a little bit you want some margin

1919
01:20:39,449 --> 01:20:43,590
for error because it does lead to more

1920
01:20:42,060 --> 01:20:45,330
support hassle when people because once

1921
01:20:43,590 --> 01:20:47,520
you say this is the minimum spec people

1922
01:20:45,329 --> 01:20:48,899
are going to expect it to run on that

1923
01:20:47,520 --> 01:20:50,460
spec and you're going to get people

1924
01:20:48,899 --> 01:20:51,629
complaining if it doesn't so you want to

1925
01:20:50,460 --> 01:20:54,109
make sure you don't cut it too close to

1926
01:20:51,630 --> 01:20:54,109
the wire right

1927
01:20:59,548 --> 01:21:03,538
question having OS level support for GP

1928
01:21:02,010 --> 01:21:05,609
resources for computing graphic so that

1929
01:21:03,538 --> 01:21:07,948
3d graphics tools can interoperate

1930
01:21:05,609 --> 01:21:09,419
efficiently eg in VFX production where

1931
01:21:07,948 --> 01:21:16,438
you have lots of tools using the same

1932
01:21:09,418 --> 01:21:18,238
data I see so your paints are talking

1933
01:21:16,439 --> 01:21:20,309
about you know and this is probably not

1934
01:21:18,238 --> 01:21:23,848
quite right but like I've got Mudbox and

1935
01:21:20,309 --> 01:21:25,949
I've got Maya and I want them to just

1936
01:21:23,849 --> 01:21:28,010
share the same vertex buffer so they

1937
01:21:25,948 --> 01:21:32,458
don't have to transfer back and forth

1938
01:21:28,010 --> 01:21:35,159
that's a really reasonable I have to say

1939
01:21:32,458 --> 01:21:37,708
I don't actually know I if L can does

1940
01:21:35,158 --> 01:21:40,259
that or not but I wouldn't be able to

1941
01:21:37,708 --> 01:21:43,139
say even if I did I don't think but I

1942
01:21:40,260 --> 01:21:45,689
honestly can say I don't remember it was

1943
01:21:43,139 --> 01:21:47,489
not a usage case I ever looked at long

1944
01:21:45,689 --> 01:21:51,409
boolean what would be a disadvantage of

1945
01:21:47,488 --> 01:21:54,238
having a big beefy CPU or are there none

1946
01:21:51,408 --> 01:21:56,418
well I mean the disadvantage is the

1947
01:21:54,238 --> 01:21:56,418
price

1948
01:22:00,139 --> 01:22:04,550
have you seen that guy that is going to

1949
01:22:02,750 --> 01:22:07,100
recreate quake and handmade hero style I

1950
01:22:04,550 --> 01:22:11,690
I haven't actually watched the stream

1951
01:22:07,100 --> 01:22:12,530
but I some handmade gerra people did

1952
01:22:11,689 --> 01:22:15,049
tell me about it

1953
01:22:12,529 --> 01:22:17,590
which sounds cool I think that's a

1954
01:22:15,050 --> 01:22:17,590
really good idea

1955
01:22:20,979 --> 01:22:24,618
pumpka pumpka

1956
01:22:22,520 --> 01:22:27,710
how long do you expect this project to

1957
01:22:24,618 --> 01:22:28,880
take i think i ballparked fairly

1958
01:22:27,710 --> 01:22:31,250
consistently that would be something

1959
01:22:28,880 --> 01:22:36,710
like 600 episodes and right now we're on

1960
01:22:31,250 --> 01:22:38,810
episode 236 so two more years I don't

1961
01:22:36,710 --> 01:22:41,210
know at an hour a night it's pretty slow

1962
01:22:38,810 --> 01:22:43,369
right and a lot of stuff is like this

1963
01:22:41,210 --> 01:22:48,198
where you don't even get any work in a

1964
01:22:43,368 --> 01:22:50,569
day because you're explaining things so

1965
01:22:48,198 --> 01:22:54,919
what I get fall out for just allocates

1966
01:22:50,569 --> 01:22:55,429
itself an 8 gigabyte block that seems

1967
01:22:54,920 --> 01:22:57,350
fine to me

1968
01:22:55,429 --> 01:22:58,279
I mean if they actually need it if

1969
01:22:57,350 --> 01:23:03,940
they're actually doing something with

1970
01:22:58,279 --> 01:23:03,939
that I mean you know

1971
01:23:16,649 --> 01:23:20,170
quick question about strictly a listing

1972
01:23:18,670 --> 01:23:21,760
due to your forum posts not defending it

1973
01:23:20,170 --> 01:23:23,350
but how would you propose compilers to

1974
01:23:21,760 --> 01:23:25,690
understand that pointers do not overlap

1975
01:23:23,350 --> 01:23:27,039
to optimize loads and so on not sure how

1976
01:23:25,689 --> 01:23:29,859
we could improve generated code without

1977
01:23:27,039 --> 01:23:32,590
having that kind of guarantees assuming

1978
01:23:29,859 --> 01:23:35,219
we need to still support old code

1979
01:23:32,590 --> 01:23:38,319
I don't want compilers to do that I

1980
01:23:35,219 --> 01:23:41,529
don't want compilers to do that when was

1981
01:23:38,319 --> 01:23:44,279
the last time in handmade hero which by

1982
01:23:41,529 --> 01:23:48,729
the way is doing software rasterization

1983
01:23:44,279 --> 01:23:50,738
where we were like oh no we have to

1984
01:23:48,729 --> 01:23:54,779
start compiling this in optimized mode

1985
01:23:50,738 --> 01:23:57,879
at all no where it's only the pixel fill

1986
01:23:54,779 --> 01:23:59,710
right we're not even compiling with

1987
01:23:57,880 --> 01:24:01,600
optimizations on the game ran at 60

1988
01:23:59,710 --> 01:24:05,350
frames a second the old the pixel fill

1989
01:24:01,600 --> 01:24:07,060
is the only thing right so if you just

1990
01:24:05,350 --> 01:24:09,160
write relatively same code you don't

1991
01:24:07,060 --> 01:24:12,280
need the compiler to be doing these

1992
01:24:09,159 --> 01:24:14,109
things for you and so all I really want

1993
01:24:12,279 --> 01:24:18,210
is the ability to tell the compiler when

1994
01:24:14,109 --> 01:24:20,500
I care these two things don't alias

1995
01:24:18,210 --> 01:24:22,119
that's all I need and that's in there

1996
01:24:20,500 --> 01:24:26,590
restrict I can tell it that the two

1997
01:24:22,119 --> 01:24:29,319
pointers don't don't conflict right so

1998
01:24:26,590 --> 01:24:33,190
it's it's it's bad programmers writing

1999
01:24:29,319 --> 01:24:34,988
bad code and then compiler writers

2000
01:24:33,189 --> 01:24:37,529
deciding to try and optimize that code

2001
01:24:34,988 --> 01:24:40,659
for benchmarks or whatever right and

2002
01:24:37,529 --> 01:24:42,969
like that that is not how it should go

2003
01:24:40,659 --> 01:24:45,309
that is really bad and you end up

2004
01:24:42,969 --> 01:24:47,590
costing good programmers the people who

2005
01:24:45,310 --> 01:24:49,660
don't care about these things a lot of

2006
01:24:47,590 --> 01:24:52,360
time because you introduce bugs in their

2007
01:24:49,659 --> 01:24:54,399
code because you choose some strict

2008
01:24:52,359 --> 01:24:55,689
random thing in the spec that no one

2009
01:24:54,399 --> 01:24:57,819
should ever care about it shouldn't have

2010
01:24:55,689 --> 01:25:01,149
been in there as a way of rationalizing

2011
01:24:57,819 --> 01:25:03,039
some stupid optimization that's there

2012
01:25:01,149 --> 01:25:06,099
for somebody who like instantiated

2013
01:25:03,039 --> 01:25:09,210
30,000 levels of templates and was like

2014
01:25:06,100 --> 01:25:15,400
bummed that their code didn't run fast

2015
01:25:09,210 --> 01:25:19,869
it's awful awful awful awful I hate that

2016
01:25:15,399 --> 01:25:23,009
stuff it's bad programmers costing good

2017
01:25:19,869 --> 01:25:23,010
programmers Thai and I hate it

2018
01:25:27,359 --> 01:25:31,439
and room two out of curiosity back then

2019
01:25:29,609 --> 01:25:35,699
when it came out was GDI just a wrapper

2020
01:25:31,439 --> 01:25:39,299
for OpenGL do you mean the other way

2021
01:25:35,699 --> 01:25:40,800
round when it came out GDI was GDI there

2022
01:25:39,300 --> 01:25:43,400
was no such thing as open jail

2023
01:25:40,800 --> 01:25:46,380
GDI was Windows as graphics interface

2024
01:25:43,399 --> 01:25:47,879
when OpenGL first got introduced into

2025
01:25:46,380 --> 01:25:51,720
the windows ecosystem which I believe

2026
01:25:47,880 --> 01:25:53,819
was empty 35 1 what it was was a

2027
01:25:51,720 --> 01:25:55,440
rendering library that sat on top of GDI

2028
01:25:53,819 --> 01:26:00,479
and it was a software renderer so it

2029
01:25:55,439 --> 01:26:02,369
rendered in software and output to the 2

2030
01:26:00,479 --> 01:26:04,769
GDI so it was literally just a software

2031
01:26:02,369 --> 01:26:06,779
under that sat on top of it later as

2032
01:26:04,770 --> 01:26:08,970
Hardware became available it started

2033
01:26:06,779 --> 01:26:11,189
being able to accelerate and at the time

2034
01:26:08,970 --> 01:26:12,570
there was an one like one silicon

2035
01:26:11,189 --> 01:26:14,969
graphics card I think you could get to

2036
01:26:12,569 --> 01:26:17,009
plug into a very expensive plug into a

2037
01:26:14,970 --> 01:26:19,140
PC that did some kind of acceleration I

2038
01:26:17,010 --> 01:26:21,720
remember those being around back in 92

2039
01:26:19,140 --> 01:26:23,700
or something but I don't I never

2040
01:26:21,720 --> 01:26:29,970
actually used one I saw them sitting on

2041
01:26:23,699 --> 01:26:31,679
the shelves at Microsoft Qbert Caleb

2042
01:26:29,970 --> 01:26:38,909
restrict doesn't seem to work with vs

2043
01:26:31,680 --> 01:26:43,350
2013 2015 I don't really know much about

2044
01:26:38,909 --> 01:26:45,119
that like I haven't I haven't spent too

2045
01:26:43,350 --> 01:26:50,070
much time with it in 23 2013 it used to

2046
01:26:45,119 --> 01:26:52,140
work no read isn't restricted like

2047
01:26:50,069 --> 01:26:58,619
stupid limited though and you don't have

2048
01:26:52,140 --> 01:27:00,869
a leus one that's definitive at least no

2049
01:26:58,619 --> 01:27:03,119
mister it doesn't I've never really had

2050
01:27:00,869 --> 01:27:04,380
a problem with restrict I mean yeah be

2051
01:27:03,119 --> 01:27:09,149
nice if there's a better one that said

2052
01:27:04,380 --> 01:27:11,489
like these two pointers don't don't ever

2053
01:27:09,149 --> 01:27:12,719
collide whereas this one might with this

2054
01:27:11,489 --> 01:27:15,949
other one or something but I've never

2055
01:27:12,720 --> 01:27:15,949
really found that to be a problem

2056
01:27:18,130 --> 01:27:22,109
why is it the games get more difficult

2057
01:27:19,840 --> 01:27:24,550
to play as widows us get more advanced

2058
01:27:22,109 --> 01:27:26,319
well it's because the people who

2059
01:27:24,550 --> 01:27:31,300
designed the platform's are getting

2060
01:27:26,319 --> 01:27:33,689
worse honestly if you're talking about

2061
01:27:31,300 --> 01:27:35,739
why they're less likely to run

2062
01:27:33,689 --> 01:27:36,399
originally it was just dll's that was

2063
01:27:35,738 --> 01:27:38,078
the only thing that couldn't be broken

2064
01:27:36,399 --> 01:27:40,448
then you started getting into these side

2065
01:27:38,078 --> 01:27:42,488
by side assemblies manifests registry

2066
01:27:40,448 --> 01:27:45,759
all that stuff was just really bad ideas

2067
01:27:42,488 --> 01:27:47,859
bad design on the windows architecture

2068
01:27:45,760 --> 01:27:49,389
and so now it's almost a given that if

2069
01:27:47,859 --> 01:27:50,979
you take a game executable it won't run

2070
01:27:49,389 --> 01:27:52,779
there's no question they've taking a

2071
01:27:50,979 --> 01:27:55,118
modern Amos doodle and try to run it it

2072
01:27:52,779 --> 01:28:01,539
won't run you have to install a bunch of

2073
01:27:55,118 --> 01:28:07,389
prerequisites first right I think that's

2074
01:28:01,539 --> 01:28:14,139
about it we are out of time so I am

2075
01:28:07,389 --> 01:28:16,690
going to wind down save this off so I

2076
01:28:14,139 --> 01:28:21,340
will hope that I can find some kind of a

2077
01:28:16,689 --> 01:28:25,750
Divi Divi a DisplayPort to HDMI

2078
01:28:21,340 --> 01:28:27,250
converter or I guess a DVI x2 the slave

2079
01:28:25,750 --> 01:28:32,289
port converter either one would be fine

2080
01:28:27,250 --> 01:28:33,550
actually maybe well maybe we'll find one

2081
01:28:32,289 --> 01:28:35,529
maybe I won't so hopefully tomorrow

2082
01:28:33,550 --> 01:28:36,789
we'll have a way I'll do the coding

2083
01:28:35,529 --> 01:28:37,750
either way but hopefully I'll have a way

2084
01:28:36,789 --> 01:28:39,039
for you can actually see that the

2085
01:28:37,750 --> 01:28:41,969
results work so that I'm not the only

2086
01:28:39,039 --> 01:28:44,710
one that see but whether they work and

2087
01:28:41,969 --> 01:28:46,569
at some point either way I will get the

2088
01:28:44,710 --> 01:28:48,069
converter working so that at least by

2089
01:28:46,569 --> 01:28:51,698
next week we'll be able to be doing

2090
01:28:48,069 --> 01:28:53,469
OpenGL that can stream properly either

2091
01:28:51,698 --> 01:28:55,658
way so anyway thank you everyone for

2092
01:28:53,469 --> 01:28:56,800
joining me for this edition of handmade

2093
01:28:55,658 --> 01:28:58,539
share outs when pleasure cooking with

2094
01:28:56,800 --> 01:29:00,190
you as always if you want to follow

2095
01:28:58,539 --> 01:29:01,658
along at home you can always pre-order

2096
01:29:00,189 --> 01:29:02,769
the game on handmade hero org and it

2097
01:29:01,658 --> 01:29:04,658
comes to the source code so you can

2098
01:29:02,770 --> 01:29:06,250
follow along we also have a forum site

2099
01:29:04,658 --> 01:29:07,479
you can go to ask questions a patreon

2100
01:29:06,250 --> 01:29:11,408
page you can use to support the video

2101
01:29:07,479 --> 01:29:13,419
series and a tweet bot which tweets the

2102
01:29:11,408 --> 01:29:14,259
schedule at you so if you want to know

2103
01:29:13,420 --> 01:29:15,639
where we're gonna be live that's the

2104
01:29:14,260 --> 01:29:16,960
place to check but I will tell you right

2105
01:29:15,639 --> 01:29:20,710
now it's tomorrow at 5:00 p.m. Pacific

2106
01:29:16,960 --> 01:29:23,770
Standard Time unless I post otherwise on

2107
01:29:20,710 --> 01:29:26,439
the three pot so that's it for today

2108
01:29:23,770 --> 01:29:29,460
until tomorrow have fun coding everyone

2109
01:29:26,439 --> 01:29:29,460
and I'll see you guys on the Internet

