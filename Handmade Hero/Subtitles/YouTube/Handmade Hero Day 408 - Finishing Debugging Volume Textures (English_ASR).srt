1
00:00:02,658 --> 00:00:06,990
hello everyone and welcome to handmade

2
00:00:05,580 --> 00:00:11,039
Hero the show recode a complete game

3
00:00:06,990 --> 00:00:13,620
live on stream today we have the unhappy

4
00:00:11,039 --> 00:00:17,460
task of needing to do some volume

5
00:00:13,619 --> 00:00:19,710
texture debugging which is going to be

6
00:00:17,460 --> 00:00:27,210
long and arduous I'll just get right to

7
00:00:19,710 --> 00:00:29,609
the to the heart of it basically anytime

8
00:00:27,210 --> 00:00:35,909
you use a GPU to do anything it is

9
00:00:29,609 --> 00:00:39,600
unpleasant and you know today is no

10
00:00:35,909 --> 00:00:41,459
exception I I don't feel like my I feel

11
00:00:39,600 --> 00:00:45,539
like this monitor has gone into some

12
00:00:41,460 --> 00:00:47,250
kind of a weird mode I'm gonna like see

13
00:00:45,539 --> 00:00:48,960
if I can fix it it's it's in like a

14
00:00:47,250 --> 00:00:51,448
weird like color mode where everything

15
00:00:48,960 --> 00:00:54,829
looks like you know what I'm talking

16
00:00:51,448 --> 00:00:57,570
about where they like the monitor

17
00:00:54,829 --> 00:01:00,000
manufacturer is like helping you get a

18
00:00:57,570 --> 00:01:03,289
good picture quote-unquote by having

19
00:01:00,000 --> 00:01:06,810
some like really ridiculous

20
00:01:03,289 --> 00:01:08,459
sort of filtering or color balance

21
00:01:06,810 --> 00:01:12,170
that's happening that's really bad and

22
00:01:08,459 --> 00:01:14,699
it makes everything look messed up so I

23
00:01:12,170 --> 00:01:15,930
think that's what's happening here and

24
00:01:14,700 --> 00:01:20,189
there we go

25
00:01:15,930 --> 00:01:22,490
standard mode looks pretty good standard

26
00:01:20,188 --> 00:01:27,889
mode yes

27
00:01:22,489 --> 00:01:31,919
alright that's actually much better I

28
00:01:27,890 --> 00:01:33,269
think it was on game mode before I don't

29
00:01:31,920 --> 00:01:37,170
know what that was supposed to do but it

30
00:01:33,269 --> 00:01:40,828
made everything look pink and weird all

31
00:01:37,170 --> 00:01:42,599
right so let's let's go ahead and you

32
00:01:40,828 --> 00:01:44,069
couldn't see that because of course

33
00:01:42,599 --> 00:01:45,780
you're just seeing the right G my feed

34
00:01:44,069 --> 00:01:50,728
which probably looks normal I was seeing

35
00:01:45,780 --> 00:01:53,670
this weird really strange sort of like

36
00:01:50,728 --> 00:01:54,420
hyper contrast II mode I don't know what

37
00:01:53,670 --> 00:01:58,109
was going on there

38
00:01:54,420 --> 00:02:02,070
anyway I so what we have to do today is

39
00:01:58,109 --> 00:02:03,299
we have to figure out why we can't you

40
00:02:02,069 --> 00:02:04,529
know the thing that we were trying to do

41
00:02:03,299 --> 00:02:06,630
on the GPU was actually really simple

42
00:02:04,530 --> 00:02:08,479
right all we're trying to do is look up

43
00:02:06,629 --> 00:02:10,288
in a voxel and traverse a linked list

44
00:02:08,479 --> 00:02:12,510
okay it's something that's incredibly

45
00:02:10,288 --> 00:02:13,979
simple we've even basically done this

46
00:02:12,509 --> 00:02:16,049
exact thing

47
00:02:13,979 --> 00:02:17,969
on handmade here before on the CPU and

48
00:02:16,050 --> 00:02:20,550
on the CPU of course it took like no

49
00:02:17,969 --> 00:02:22,289
time at all to get it working and we've

50
00:02:20,550 --> 00:02:25,500
done a bunch of like more advanced

51
00:02:22,289 --> 00:02:28,639
things on the CPU side on the GP side

52
00:02:25,500 --> 00:02:30,840
even something as basic as storing a

53
00:02:28,639 --> 00:02:33,089
three-dimensional array with a pointer

54
00:02:30,840 --> 00:02:36,150
to a linked list is incredibly arduous

55
00:02:33,090 --> 00:02:38,700
it takes like days to get something like

56
00:02:36,150 --> 00:02:41,129
that working typically and the reason

57
00:02:38,699 --> 00:02:43,469
for that is that first of all the api's

58
00:02:41,129 --> 00:02:47,310
are horrid right they're just absolutely

59
00:02:43,469 --> 00:02:50,879
important even relatively modern ones

60
00:02:47,310 --> 00:02:54,810
are awful they are not designed even

61
00:02:50,879 --> 00:02:58,530
close to as well as a modern CPU eisah

62
00:02:54,810 --> 00:03:01,650
modern CPU ices are obviously you know

63
00:02:58,530 --> 00:03:03,900
better but GPUs don't even have Isis

64
00:03:01,650 --> 00:03:06,960
that you can program too directly unless

65
00:03:03,900 --> 00:03:08,129
you go with us only a specific GPU so

66
00:03:06,960 --> 00:03:10,320
you're forced to go through like a

67
00:03:08,129 --> 00:03:12,750
committee designed API that's that's

68
00:03:10,319 --> 00:03:15,930
generally just absolutely awful in like

69
00:03:12,750 --> 00:03:17,460
always it can be awfully dissolve and

70
00:03:15,930 --> 00:03:19,710
then you stack on top of that the fact

71
00:03:17,460 --> 00:03:23,480
that the GPU itself usually offers

72
00:03:19,710 --> 00:03:26,610
either minimal or no debugging features

73
00:03:23,479 --> 00:03:28,560
so you also lose that ability so not

74
00:03:26,610 --> 00:03:30,480
only is your program extremely

75
00:03:28,560 --> 00:03:32,879
mysterious to you because like for

76
00:03:30,479 --> 00:03:35,310
example you saw last week how specifying

77
00:03:32,879 --> 00:03:37,740
GL underscore read versus GL underscore

78
00:03:35,310 --> 00:03:39,270
read underscore integer made a huge

79
00:03:37,740 --> 00:03:44,400
difference in whether or not something

80
00:03:39,270 --> 00:03:46,380
worked right now that just makes no

81
00:03:44,400 --> 00:03:50,430
sense right that's not something that we

82
00:03:46,379 --> 00:03:51,990
would ever put up with in dated a CPU

83
00:03:50,430 --> 00:03:54,810
programming I mean unless maybe you're

84
00:03:51,990 --> 00:03:56,550
into web programming or something but

85
00:03:54,810 --> 00:03:58,740
that's the that's par for the course on

86
00:03:56,550 --> 00:04:00,390
GPU programming like somebody made a

87
00:03:58,740 --> 00:04:02,610
random API they didn't think it through

88
00:04:00,389 --> 00:04:04,469
particularly well and you just have to

89
00:04:02,610 --> 00:04:06,360
deal with all of its ridiculousness and

90
00:04:04,469 --> 00:04:08,069
things that you don't necessarily know

91
00:04:06,360 --> 00:04:09,510
but that they thought were a good idea

92
00:04:08,069 --> 00:04:11,310
but that weren't a good idea you just

93
00:04:09,509 --> 00:04:14,069
have to learn and deal with right it's

94
00:04:11,310 --> 00:04:17,790
really crappy and unfortunates why I

95
00:04:14,069 --> 00:04:19,199
don't like programming on GPUs and you

96
00:04:17,790 --> 00:04:21,689
know I wish they would just kind of go

97
00:04:19,199 --> 00:04:24,769
away eventually but you know that hasn't

98
00:04:21,689 --> 00:04:24,769
materialized anyway

99
00:04:25,589 --> 00:04:34,029
so that's where we're at we are trying

100
00:04:29,168 --> 00:04:36,250
to send down a volume texture a volume

101
00:04:34,029 --> 00:04:37,809
texture RFC is a texture that has three

102
00:04:36,250 --> 00:04:43,389
dimensions to it so it can be indexed

103
00:04:37,810 --> 00:04:44,680
with three variables XY and Z and we

104
00:04:43,389 --> 00:04:47,620
have a shader that's attempting to look

105
00:04:44,680 --> 00:04:48,910
up into those now I wanted to start

106
00:04:47,620 --> 00:04:50,740
today by doing something relatively

107
00:04:48,910 --> 00:04:53,500
simple I want to start today by just

108
00:04:50,740 --> 00:04:55,360
using structured art to verify using

109
00:04:53,500 --> 00:04:58,269
insight which gives us some limited

110
00:04:55,360 --> 00:05:03,098
debugging capability I wanted to verify

111
00:04:58,269 --> 00:05:06,068
that we could get the texture

112
00:05:03,098 --> 00:05:07,120
transmitted properly and what I mean by

113
00:05:06,069 --> 00:05:08,680
this is we've talked about this on a

114
00:05:07,120 --> 00:05:12,158
meter before a structured art is a

115
00:05:08,680 --> 00:05:14,860
concept that is used all throughout the

116
00:05:12,158 --> 00:05:17,680
the pipeline in game development not

117
00:05:14,860 --> 00:05:19,780
just in GPU land but it means that

118
00:05:17,680 --> 00:05:22,900
instead of using your actual assets that

119
00:05:19,779 --> 00:05:25,658
you're trying to debug and your actual

120
00:05:22,899 --> 00:05:28,239
output you instead force a very regular

121
00:05:25,658 --> 00:05:31,180
pattern through the output which allows

122
00:05:28,240 --> 00:05:33,400
you when you look at the results to

123
00:05:31,180 --> 00:05:35,680
quickly see whether they're correct or

124
00:05:33,399 --> 00:05:38,019
not and so what I'd like to do is I just

125
00:05:35,680 --> 00:05:41,019
like to start today pushing a little bit

126
00:05:38,019 --> 00:05:42,459
of that so that we can verify some basic

127
00:05:41,019 --> 00:05:46,269
things about what's going on with our

128
00:05:42,459 --> 00:05:51,698
code without having to be so sort of

129
00:05:46,269 --> 00:05:53,889
like finicky and twiki when we're using

130
00:05:51,699 --> 00:05:57,430
the debugger so what I want to do here

131
00:05:53,889 --> 00:06:00,400
is I want to have a way of taking the

132
00:05:57,430 --> 00:06:02,168
volume texture that we're submitting and

133
00:06:00,399 --> 00:06:04,209
I want to be able to fill it with a

134
00:06:02,168 --> 00:06:06,579
pattern that I could immediately

135
00:06:04,209 --> 00:06:09,968
recognize was the correct pattern

136
00:06:06,579 --> 00:06:13,959
without having to really scrutinize the

137
00:06:09,968 --> 00:06:16,718
values that are in that pattern so what

138
00:06:13,959 --> 00:06:18,728
I'm gonna do here is if you take a look

139
00:06:16,718 --> 00:06:20,079
at when we're going through the element

140
00:06:18,728 --> 00:06:23,668
index here which you can see what we're

141
00:06:20,079 --> 00:06:25,300
doing right now is we pack into our

142
00:06:23,668 --> 00:06:28,718
lookup texels

143
00:06:25,300 --> 00:06:31,689
we're just packing constantly exactly

144
00:06:28,718 --> 00:06:35,860
the the thing the index of the first

145
00:06:31,689 --> 00:06:38,588
like link if you will in the linked list

146
00:06:35,860 --> 00:06:40,869
that starts at this voxel so

147
00:06:38,588 --> 00:06:43,209
you know what we expect CNR voxel is

148
00:06:40,869 --> 00:06:45,999
zeroes everywhere there are no light

149
00:06:43,209 --> 00:06:47,288
sources and not light sources but

150
00:06:45,999 --> 00:06:50,289
lighting elements that have been

151
00:06:47,288 --> 00:06:53,168
computed we see zero everywhere that

152
00:06:50,288 --> 00:06:56,528
that is true and then we expect to see a

153
00:06:53,168 --> 00:06:58,568
single value anywhere there would have

154
00:06:56,528 --> 00:07:01,749
been a lighting element and that value

155
00:06:58,569 --> 00:07:04,330
indexes into an array of values that we

156
00:07:01,749 --> 00:07:05,649
then follow as a chain to pull out all

157
00:07:04,329 --> 00:07:09,968
of the lighting elements that were

158
00:07:05,649 --> 00:07:12,819
relevant to that voxel okay so that's

159
00:07:09,968 --> 00:07:14,168
what what we expect to see now that's

160
00:07:12,819 --> 00:07:15,819
kind of hard to verify because it

161
00:07:14,168 --> 00:07:18,008
basically means that we just have a sea

162
00:07:15,819 --> 00:07:19,749
of zeros with some random numbers stuck

163
00:07:18,009 --> 00:07:24,610
in them and we have no way of really

164
00:07:19,749 --> 00:07:26,169
knowing how correct that was and

165
00:07:24,610 --> 00:07:27,580
furthermore when we go to do the voxel

166
00:07:26,168 --> 00:07:30,998
lookup in the shader we have no way of

167
00:07:27,579 --> 00:07:32,588
knowing what that should be either so

168
00:07:30,999 --> 00:07:33,939
what I'm gonna try to do here is I'm

169
00:07:32,588 --> 00:07:34,649
going to try to do something a little

170
00:07:33,939 --> 00:07:39,990
bit different

171
00:07:34,649 --> 00:07:43,889
I'm going to try to pack a value in here

172
00:07:39,990 --> 00:07:47,168
that will actually be easier to inspect

173
00:07:43,889 --> 00:07:57,689
and give us some ability to figure out

174
00:07:47,168 --> 00:07:57,688
what we are looking at okay

175
00:07:57,779 --> 00:08:02,069
so the first thing I'm going to do is

176
00:07:59,339 --> 00:08:04,529
we're gonna take a look at how we're

177
00:08:02,069 --> 00:08:06,209
packing here and instead of allowing

178
00:08:04,529 --> 00:08:07,979
this to be the final pack because that

179
00:08:06,209 --> 00:08:09,870
actually produces what we would believe

180
00:08:07,980 --> 00:08:11,009
are the correct results instead I'm

181
00:08:09,870 --> 00:08:13,500
gonna go through and I'm gonna pack

182
00:08:11,009 --> 00:08:14,430
something different in here and the way

183
00:08:13,500 --> 00:08:16,139
I'm gonna pack something different it's

184
00:08:14,430 --> 00:08:17,310
I'm basically going to mimic what we

185
00:08:16,139 --> 00:08:20,579
were doing here where we step through

186
00:08:17,310 --> 00:08:22,439
the voxel like so see here we've got

187
00:08:20,579 --> 00:08:25,050
sort of a thing that looks up into the

188
00:08:22,439 --> 00:08:26,879
voxel I'm just gonna copy those loops in

189
00:08:25,050 --> 00:08:28,259
here and you can see what these loops

190
00:08:26,879 --> 00:08:29,790
are doing these loops are just going

191
00:08:28,259 --> 00:08:32,879
over the different dimensions of the

192
00:08:29,790 --> 00:08:35,668
voxel Z Y and X and they're going

193
00:08:32,879 --> 00:08:38,038
through every node in the voxel so when

194
00:08:35,668 --> 00:08:41,418
I come in here I am referencing every

195
00:08:38,038 --> 00:08:44,370
node in sequence of this of this voxel

196
00:08:41,418 --> 00:08:46,649
so what I could do is in here I can just

197
00:08:44,370 --> 00:08:48,899
place if I want to I could literally

198
00:08:46,649 --> 00:08:52,079
place just a running counter so I could

199
00:08:48,899 --> 00:08:54,000
put a u16 in here that's a counter and

200
00:08:52,080 --> 00:08:57,509
what I can do is every time through I

201
00:08:54,000 --> 00:09:01,679
can just assign the counter value that's

202
00:08:57,509 --> 00:09:04,049
in this location to a monotonically

203
00:09:01,679 --> 00:09:06,209
increasing value so if I were to look at

204
00:09:04,049 --> 00:09:10,229
the voxel I should just in memory of

205
00:09:06,210 --> 00:09:12,420
this voxel just see 0 1 2 3 4 5 6 7 8 9

206
00:09:10,230 --> 00:09:16,170
10 all the way up to the limit of of au

207
00:09:12,419 --> 00:09:18,990
16 which is 65535 and when I would get

208
00:09:16,169 --> 00:09:21,569
to 65536 I should see that counter wrap

209
00:09:18,990 --> 00:09:24,389
back to 0 because it's a u16 so I see it

210
00:09:21,570 --> 00:09:27,120
go like 0 through 6 5 5 3 5 I should

211
00:09:24,389 --> 00:09:32,039
then see 0 start again 0 1 2 3 4 5 0

212
00:09:27,120 --> 00:09:34,470
right that's what I should be seeing and

213
00:09:32,039 --> 00:09:36,569
so yeah let me just grab out where that

214
00:09:34,470 --> 00:09:41,310
is it's Destin here I guess yeah it's a

215
00:09:36,570 --> 00:09:43,020
desk so let me just grab that out I also

216
00:09:41,309 --> 00:09:45,629
should remove since we now have the

217
00:09:43,019 --> 00:09:47,939
integer version working I should remove

218
00:09:45,629 --> 00:09:50,330
the look up F texture and get that out

219
00:09:47,940 --> 00:09:50,330
of here

220
00:09:54,960 --> 00:10:05,790
okay I also need to

221
00:10:15,620 --> 00:10:23,789
okay so now if I run this program in

222
00:10:21,539 --> 00:10:25,709
theory nothing in particular should

223
00:10:23,789 --> 00:10:28,589
happen here we should get the same

224
00:10:25,710 --> 00:10:31,470
output as we did before and we roughly

225
00:10:28,590 --> 00:10:34,350
do of course we do have a problem now

226
00:10:31,470 --> 00:10:36,240
which is that our shader will be

227
00:10:34,350 --> 00:10:39,120
faulting all over the place effectively

228
00:10:36,240 --> 00:10:41,700
I don't know if we get any reports of

229
00:10:39,120 --> 00:10:43,379
that I don't think we really do know and

230
00:10:41,700 --> 00:10:45,690
so that may create problems for the

231
00:10:43,379 --> 00:10:47,549
debugging so what I want to do also is

232
00:10:45,690 --> 00:10:49,170
change the shader so that we're not

233
00:10:47,549 --> 00:10:50,549
trying to look up off of these values

234
00:10:49,169 --> 00:10:53,219
that will index into the middle of

235
00:10:50,549 --> 00:10:55,229
nowhere off the bounds of an array so

236
00:10:53,220 --> 00:10:57,750
I'm just gonna pop over to the OpenGL

237
00:10:55,230 --> 00:11:05,519
side of things and I'm gonna take a look

238
00:10:57,750 --> 00:11:07,769
at the shader here in the Z bias shader

239
00:11:05,519 --> 00:11:09,870
and I just want to go ahead and get rid

240
00:11:07,769 --> 00:11:11,699
of the thing where we actually look it

241
00:11:09,870 --> 00:11:14,759
up and instead I want to use that value

242
00:11:11,700 --> 00:11:18,090
just directly so when we look up this

243
00:11:14,759 --> 00:11:20,090
lighting value into the voxel here you

244
00:11:18,090 --> 00:11:25,050
can see we're producing an integer I

245
00:11:20,090 --> 00:11:28,170
instead of doing any of this right where

246
00:11:25,049 --> 00:11:30,029
we're ever looking it up like this text

247
00:11:28,169 --> 00:11:31,740
will fetch stuff or any of this stuff I

248
00:11:30,029 --> 00:11:32,970
don't want to do any of that instead

249
00:11:31,740 --> 00:11:34,799
what I want to do oh and it's like I

250
00:11:32,970 --> 00:11:36,830
already IFFT it out here so I guess our

251
00:11:34,799 --> 00:11:38,969
shader isn't really doing anything bad

252
00:11:36,830 --> 00:11:42,090
instead of doing that what I want to do

253
00:11:38,970 --> 00:11:44,550
is I want to take that value that I got

254
00:11:42,090 --> 00:11:48,660
out and I want to set the use light

255
00:11:44,549 --> 00:11:51,689
color to basically be representative of

256
00:11:48,659 --> 00:11:55,429
what that value was so what I'd like to

257
00:11:51,690 --> 00:12:00,360
do is say use light R equals you know

258
00:11:55,429 --> 00:12:05,849
whatever this light index is divided by

259
00:12:00,360 --> 00:12:09,870
65535 right so I can do a divide here

260
00:12:05,850 --> 00:12:12,360
and get a value from zero to one and

261
00:12:09,870 --> 00:12:15,299
furthermore I could do just a

262
00:12:12,360 --> 00:12:19,039
replication of that as well so I can you

263
00:12:15,299 --> 00:12:22,079
know I believe you can do a shorthand in

264
00:12:19,039 --> 00:12:26,009
in shader syntax I believe you can just

265
00:12:22,080 --> 00:12:26,970
do like a shorthand for replication but

266
00:12:26,009 --> 00:12:28,350
I'm not going to try to do that because

267
00:12:26,970 --> 00:12:31,550
I always for

268
00:12:28,350 --> 00:12:34,379
get how the shaders do their crazy

269
00:12:31,549 --> 00:12:35,759
Swizzle denominator and I don't want to

270
00:12:34,379 --> 00:12:39,169
mess it up so I'm just literally doing

271
00:12:35,759 --> 00:12:39,169
an assignment like you wouldn't see

272
00:12:39,200 --> 00:12:44,759
instead alright so if I run this now I

273
00:12:43,259 --> 00:12:46,139
would actually kind of expect to see

274
00:12:44,759 --> 00:12:48,509
something different here if I didn't

275
00:12:46,139 --> 00:12:51,299
mess it up I would expect to see things

276
00:12:48,509 --> 00:12:53,460
sort of shaded according to where they

277
00:12:51,299 --> 00:12:54,569
are in the voxel grid if that makes

278
00:12:53,460 --> 00:13:00,600
sense

279
00:12:54,570 --> 00:13:03,450
and you know it actually looks like it's

280
00:13:00,600 --> 00:13:05,580
kind of busted right like I don't know

281
00:13:03,450 --> 00:13:06,900
where we are right here but we're kind

282
00:13:05,580 --> 00:13:09,060
of in some kind of a weird like

283
00:13:06,899 --> 00:13:16,289
non-functional state and I'm not sure

284
00:13:09,059 --> 00:13:18,239
why oh right I forgot we're still doing

285
00:13:16,289 --> 00:13:19,799
output texture debug which we really

286
00:13:18,240 --> 00:13:25,409
don't want to do because that's gonna

287
00:13:19,799 --> 00:13:36,839
now crawl this bogus array let me let me

288
00:13:25,409 --> 00:13:39,360
quickly nerf that because again we've

289
00:13:36,840 --> 00:13:41,850
now we've we are no longer sending down

290
00:13:39,360 --> 00:13:44,129
a voxel that can actually be used for

291
00:13:41,850 --> 00:13:47,100
the purposes of traversing the linked

292
00:13:44,129 --> 00:13:49,710
lists it's just got stuffed values in

293
00:13:47,100 --> 00:13:53,070
there so I can't ever do anything with

294
00:13:49,710 --> 00:13:54,769
it that would require me to have a valid

295
00:13:53,070 --> 00:13:58,379
list there right that's not on the table

296
00:13:54,769 --> 00:14:02,720
all right so this is interesting to see

297
00:13:58,379 --> 00:14:05,220
right I see nothing after this happens

298
00:14:02,720 --> 00:14:08,220
which is not even remotely what I would

299
00:14:05,220 --> 00:14:11,190
expect right so that's already kind of

300
00:14:08,220 --> 00:14:15,149
telling me something whoa don't ask me

301
00:14:11,190 --> 00:14:17,850
what that was Visual Studio so I don't

302
00:14:15,149 --> 00:14:20,159
know why I'm seeing this so already

303
00:14:17,850 --> 00:14:23,279
things are kind of a little bit weird

304
00:14:20,159 --> 00:14:25,649
right what I would like to do is take a

305
00:14:23,279 --> 00:14:28,769
look at and see now if I can see that

306
00:14:25,649 --> 00:14:31,939
voxel at least what its values are and

307
00:14:28,769 --> 00:14:34,679
I'm also just a little bit weirded out I

308
00:14:31,940 --> 00:14:36,000
it could be just that so you know what

309
00:14:34,679 --> 00:14:38,459
it's probably because when I do out

310
00:14:36,000 --> 00:14:40,889
protects your debug it's probably

311
00:14:38,460 --> 00:14:42,870
because we've cleared out what was there

312
00:14:40,889 --> 00:14:45,929
and

313
00:14:42,870 --> 00:14:48,480
it's it's overriding right like whatever

314
00:14:45,929 --> 00:14:54,689
we were rendering before is not getting

315
00:14:48,480 --> 00:14:56,879
rendered now so that that may be most of

316
00:14:54,690 --> 00:15:02,760
the problem right like it may be that we

317
00:14:56,879 --> 00:15:06,028
can't actually do it that way and yeah

318
00:15:02,759 --> 00:15:09,000
so here's another thing we could do for

319
00:15:06,028 --> 00:15:10,379
example let's suppose we left this in

320
00:15:09,000 --> 00:15:12,600
here so it can create it

321
00:15:10,379 --> 00:15:19,470
and let's suppose that we just stuff the

322
00:15:12,600 --> 00:15:21,120
vats the voxel like well we can't really

323
00:15:19,470 --> 00:15:24,180
stuff the voxel after-the-fact can we

324
00:15:21,120 --> 00:15:28,440
well so what we can do is we could make

325
00:15:24,179 --> 00:15:30,778
it so that our lookup sort of used a

326
00:15:28,440 --> 00:15:34,470
different thing for the push lighting

327
00:15:30,778 --> 00:15:39,179
right we could be ridiculous here and do

328
00:15:34,470 --> 00:15:42,750
something like well okay like when we go

329
00:15:39,179 --> 00:15:44,250
to send this down will actually send

330
00:15:42,750 --> 00:15:47,759
down a different one than the one that

331
00:15:44,250 --> 00:15:50,250
we actually are gonna use ourselves we

332
00:15:47,759 --> 00:15:52,200
could do it that way I don't really love

333
00:15:50,250 --> 00:15:55,409
that idea though what I would rather do

334
00:15:52,200 --> 00:15:57,570
is just not I would rather just not have

335
00:15:55,409 --> 00:16:01,230
this be happening and leave the other

336
00:15:57,570 --> 00:16:03,300
thing so yeah maybe maybe the best way

337
00:16:01,230 --> 00:16:07,170
to do this so that we don't get into any

338
00:16:03,299 --> 00:16:13,679
more hot water here is when we're in

339
00:16:07,169 --> 00:16:16,278
here doing show lighting like this maybe

340
00:16:13,679 --> 00:16:21,028
we just keep going through the old path

341
00:16:16,278 --> 00:16:24,509
right so when you press f1 you do this

342
00:16:21,028 --> 00:16:27,929
and we never do output lighting itself

343
00:16:24,509 --> 00:16:32,399
so we we skipped this you know this path

344
00:16:27,929 --> 00:16:35,069
is just not a thing for the moment so

345
00:16:32,399 --> 00:16:37,379
it'll keep on running the game exactly

346
00:16:35,070 --> 00:16:39,750
as it would it'll still render just what

347
00:16:37,379 --> 00:16:42,809
we're seeing right here just with the

348
00:16:39,750 --> 00:16:46,889
lighting textures having done their

349
00:16:42,809 --> 00:16:48,750
computation right so you could see we're

350
00:16:46,889 --> 00:16:53,819
still getting black which I don't super

351
00:16:48,750 --> 00:16:56,129
understand right but we kind of expected

352
00:16:53,820 --> 00:16:59,730
something to be wrong because if it was

353
00:16:56,129 --> 00:17:01,500
this went correctly that doesn't help us

354
00:16:59,730 --> 00:17:03,269
find our bugs because we know we've got

355
00:17:01,500 --> 00:17:06,000
bugs because our algorithm was not

356
00:17:03,269 --> 00:17:07,828
working on the GPU so something is wrong

357
00:17:06,000 --> 00:17:09,959
with it

358
00:17:07,828 --> 00:17:13,379
all right so if we want to capture a

359
00:17:09,959 --> 00:17:18,150
frame here I don't really remember what

360
00:17:13,380 --> 00:17:20,240
the key there's a keyboard there is some

361
00:17:18,150 --> 00:17:23,900
way you can capture keyboard with

362
00:17:20,240 --> 00:17:23,900
capture frame at the inside

363
00:17:38,950 --> 00:17:43,390
oh this isn't unity I don't know if

364
00:17:41,589 --> 00:17:45,459
that's actually here we go I'm like I

365
00:17:43,390 --> 00:17:47,050
don't know if unities stuff is actually

366
00:17:45,460 --> 00:17:51,480
the same I would assume it would be but

367
00:17:47,049 --> 00:17:51,480
let's find out so let's see here

368
00:18:08,019 --> 00:18:16,299
I want to know that is what we're doing

369
00:18:15,190 --> 00:18:23,320
currently I just want to know if you got

370
00:18:16,299 --> 00:18:25,389
a hot key on that so I wonder if the the

371
00:18:23,319 --> 00:18:27,039
hot key that's listed under pause and

372
00:18:25,390 --> 00:18:29,560
capture frame if if you could bind

373
00:18:27,039 --> 00:18:31,329
something to that or if it's like I feel

374
00:18:29,559 --> 00:18:34,779
like there should be one right there

375
00:18:31,329 --> 00:18:36,819
should be one that's when you when you

376
00:18:34,779 --> 00:18:42,879
do start graphics debugging I feel like

377
00:18:36,819 --> 00:18:44,829
there should be a hot key here right and

378
00:18:42,880 --> 00:18:46,120
control-z does launch the hood but I

379
00:18:44,829 --> 00:18:49,329
don't really want the hood I guess it

380
00:18:46,119 --> 00:18:51,359
doesn't matter just do that it's no big

381
00:18:49,329 --> 00:18:51,359
deal

382
00:18:52,289 --> 00:19:01,869
all right so wow that captured a lot

383
00:18:55,869 --> 00:19:05,109
more quickly I don't know why but it

384
00:19:01,869 --> 00:19:08,699
certainly did anyway so taking a look

385
00:19:05,109 --> 00:19:11,319
here what I want to do is I want to see

386
00:19:08,700 --> 00:19:13,630
in the fragment shader I want to see

387
00:19:11,319 --> 00:19:18,189
what the look up sampler had for memory

388
00:19:13,630 --> 00:19:23,350
and this is that 64 I'm sorry a 16-bit

389
00:19:18,190 --> 00:19:25,720
per entry 3d texture so if I take a look

390
00:19:23,349 --> 00:19:29,259
at the memory of that texture this is

391
00:19:25,720 --> 00:19:32,200
what I'm seeing right so I don't

392
00:19:29,259 --> 00:19:35,289
understand why it's all black I don't

393
00:19:32,200 --> 00:19:37,480
know why that would be so that's I mean

394
00:19:35,289 --> 00:19:39,759
that's really the first thing that I

395
00:19:37,480 --> 00:19:42,970
want to figure out right cuz I tried to

396
00:19:39,759 --> 00:19:45,519
stuff values into it obviously I didn't

397
00:19:42,970 --> 00:19:51,130
succeed I don't know why and so I'm

398
00:19:45,519 --> 00:19:53,980
gonna try to figure out why all right so

399
00:19:51,130 --> 00:19:56,020
let's take a look at what is happening

400
00:19:53,980 --> 00:19:58,210
if I break in the debugger at the point

401
00:19:56,019 --> 00:20:02,849
where I submit the texture let's just do

402
00:19:58,210 --> 00:20:02,850
the basic due diligence to verify that

403
00:20:03,660 --> 00:20:09,670
of course I don't know why my opengl

404
00:20:08,440 --> 00:20:12,039
thing isn't up here but I guess we

405
00:20:09,670 --> 00:20:15,840
haven't stepped into it yet but anyway

406
00:20:12,039 --> 00:20:15,839
I'm gonna step in to push lighting

407
00:20:17,119 --> 00:20:27,500
oh you know what I may have forgotten to

408
00:20:23,509 --> 00:20:33,940
run the push lighting let's make sure I

409
00:20:27,500 --> 00:20:33,940
did that there's the push lighting

410
00:20:34,480 --> 00:20:45,230
here's the pausing caption right

411
00:20:37,420 --> 00:20:49,100
alright so now let me verify okay there

412
00:20:45,230 --> 00:20:52,519
we go so I wasn't making that mistake it

413
00:20:49,099 --> 00:20:57,139
turns out it was actually fine so here's

414
00:20:52,519 --> 00:20:59,808
the unsigned 16 bit integer view of the

415
00:20:57,140 --> 00:21:01,759
three-dimensional texture and you can

416
00:20:59,808 --> 00:21:04,639
kind of see it going up here exactly as

417
00:21:01,759 --> 00:21:08,210
you would expect now amusingly enough it

418
00:21:04,640 --> 00:21:10,400
ends right at 65535 you may wonder why

419
00:21:08,210 --> 00:21:13,308
that is and that's because it just so

420
00:21:10,400 --> 00:21:17,540
happens that the size we had picked was

421
00:21:13,308 --> 00:21:22,359
256 by 256 by 32 I believe so 256 by 256

422
00:21:17,539 --> 00:21:25,009
as you can see comes out to exactly

423
00:21:22,359 --> 00:21:28,029
65,536 values if you start enumerating

424
00:21:25,009 --> 00:21:32,329
at 0 the last one you will enumerate is

425
00:21:28,029 --> 00:21:39,529
65535 so every slice should have exactly

426
00:21:32,329 --> 00:21:41,839
this layout and it does so that looks

427
00:21:39,529 --> 00:21:43,670
pretty conclusively like we're

428
00:21:41,839 --> 00:21:47,230
submitting that texture correctly

429
00:21:43,670 --> 00:21:50,480
because when I'm looking at it in the

430
00:21:47,230 --> 00:21:53,509
debugger here it looks exactly like what

431
00:21:50,480 --> 00:21:55,970
I would expect it to look like so that's

432
00:21:53,509 --> 00:21:58,400
reassuring the next question would be

433
00:21:55,970 --> 00:22:01,179
well what about the other two textures

434
00:21:58,400 --> 00:22:04,220
are they getting submitted correctly and

435
00:22:01,179 --> 00:22:06,440
that's another question we should be

436
00:22:04,220 --> 00:22:08,990
able to answer by forcing structured art

437
00:22:06,440 --> 00:22:12,320
down the pipe so let's take a look at

438
00:22:08,990 --> 00:22:13,880
what those look like here's what the

439
00:22:12,319 --> 00:22:17,079
other things we're sending are we're

440
00:22:13,880 --> 00:22:23,090
sending lighting Texel and we're sending

441
00:22:17,079 --> 00:22:25,339
Jimi a color value per light so what I'm

442
00:22:23,089 --> 00:22:27,788
gonna do here is I'm gonna go and say

443
00:22:25,339 --> 00:22:36,398
alright from

444
00:22:27,788 --> 00:22:39,628
you know the light index will go through

445
00:22:36,398 --> 00:22:45,488
all of the values that are in this array

446
00:22:39,628 --> 00:22:59,199
and I'm gonna set them so key next dot

447
00:22:45,489 --> 00:23:01,778
key key next next and see okay so I'm

448
00:22:59,200 --> 00:23:06,460
just going to set the next pointer and

449
00:23:01,778 --> 00:23:10,509
the C pointer both to L and I guess

450
00:23:06,460 --> 00:23:12,098
technically I to be extra sure I'm going

451
00:23:10,509 --> 00:23:15,878
to go ahead and say that since there's

452
00:23:12,098 --> 00:23:19,569
only 4096 I'm gonna set these so they

453
00:23:15,878 --> 00:23:21,219
run at 4096 plus L and my reasoning for

454
00:23:19,569 --> 00:23:23,408
that is just to make sure that these two

455
00:23:21,220 --> 00:23:25,329
arrays aren't the same now I feel like

456
00:23:23,409 --> 00:23:27,039
there's almost no chance that these

457
00:23:25,329 --> 00:23:28,778
things would end up overwriting each

458
00:23:27,038 --> 00:23:30,339
other or overlapping in some way because

459
00:23:28,778 --> 00:23:32,229
I just don't see how that would happen

460
00:23:30,339 --> 00:23:35,439
in the code but again the point was

461
00:23:32,229 --> 00:23:37,720
structured art is to make it so that

462
00:23:35,440 --> 00:23:39,970
when you see a particular pattern you

463
00:23:37,720 --> 00:23:43,509
can verify that it's exactly what you

464
00:23:39,970 --> 00:23:45,368
think it should have been right and so

465
00:23:43,509 --> 00:23:46,569
one of the things that we probably will

466
00:23:45,368 --> 00:23:48,668
need to do when we get a little further

467
00:23:46,569 --> 00:23:51,220
down here is we didn't have enough

468
00:23:48,669 --> 00:23:53,320
values to set all of these planes to be

469
00:23:51,220 --> 00:23:56,019
equal to the right thing so what we

470
00:23:53,319 --> 00:23:59,439
probably should do is take whatever the

471
00:23:56,019 --> 00:24:03,220
Z is and like bias the Z the value that

472
00:23:59,440 --> 00:24:05,048
we've stick in here by the Z value times

473
00:24:03,220 --> 00:24:06,669
some increment so we can verify that the

474
00:24:05,048 --> 00:24:09,388
slices are what we think they are as

475
00:24:06,669 --> 00:24:09,389
well right

476
00:24:14,859 --> 00:24:22,658
okay so taking a look here what we want

477
00:24:19,700 --> 00:24:25,429
to do is set the back three p-value here

478
00:24:22,659 --> 00:24:28,669
what I'm gonna do for that is I'm going

479
00:24:25,429 --> 00:24:33,019
to set these to be equal to

480
00:24:28,669 --> 00:24:37,299
floating-point values of L 2.0 times l

481
00:24:33,019 --> 00:24:41,120
and 3.0 actually let's do 4.0 times L

482
00:24:37,298 --> 00:24:42,859
right I could actually be a little bit

483
00:24:41,119 --> 00:24:46,278
easier on myself instead up to a

484
00:24:42,859 --> 00:24:54,048
thousand and ten thousand times L let's

485
00:24:46,278 --> 00:24:56,990
say or 100 something like that and this

486
00:24:54,048 --> 00:25:04,250
way when we stuff those values we will

487
00:24:56,990 --> 00:25:06,409
get something predictable in each

488
00:25:04,250 --> 00:25:09,398
channel that we can now verify in the

489
00:25:06,409 --> 00:25:09,399
actual application

490
00:25:18,190 --> 00:25:24,340
and so now if I run the lighting comp I

491
00:25:20,859 --> 00:25:28,089
should be able to do a possum capture

492
00:25:24,339 --> 00:25:30,609
frame when I capture the frame I should

493
00:25:28,089 --> 00:25:34,599
now be able to take a look at all of

494
00:25:30,609 --> 00:25:36,339
those values and in here if I look at

495
00:25:34,599 --> 00:25:38,829
the fragment shader you can see I've got

496
00:25:36,339 --> 00:25:44,829
the look up sampler depth sampler

497
00:25:38,829 --> 00:25:46,389
texture sampler problem is I want to

498
00:25:44,829 --> 00:25:49,449
actually look at some other ones here

499
00:25:46,390 --> 00:25:52,480
and what's happened is you can see that

500
00:25:49,450 --> 00:25:54,640
even though those the the textures I'm

501
00:25:52,480 --> 00:25:57,548
curious about P next and C and stuff

502
00:25:54,640 --> 00:25:59,380
here I can't actually verify those

503
00:25:57,548 --> 00:26:00,220
because even though they're here like

504
00:25:59,380 --> 00:26:04,570
here they are

505
00:26:00,220 --> 00:26:07,000
this is them I can't actually get them

506
00:26:04,569 --> 00:26:09,908
because the compiler for the shader has

507
00:26:07,000 --> 00:26:12,269
optimized them out because here's where

508
00:26:09,909 --> 00:26:14,380
we were doing those textile fetches and

509
00:26:12,269 --> 00:26:16,750
unfortunately since we're no longer

510
00:26:14,380 --> 00:26:21,340
doing textile fetches from them we can't

511
00:26:16,750 --> 00:26:23,140
actually get them so that's not a really

512
00:26:21,339 --> 00:26:25,389
huge deal or anything because we don't

513
00:26:23,140 --> 00:26:27,880
need to debug those quite yet so let's

514
00:26:25,390 --> 00:26:30,070
put that aside for the moment and let's

515
00:26:27,880 --> 00:26:34,778
just go ahead and see why this isn't

516
00:26:30,069 --> 00:26:37,200
working so if you take a look at what's

517
00:26:34,778 --> 00:26:40,298
going on here I'm fetching a light I

518
00:26:37,200 --> 00:26:42,100
using a textual text I'll fetch into

519
00:26:40,298 --> 00:26:44,349
this thing called lookup sampler right

520
00:26:42,099 --> 00:26:46,629
and look up sampler is the sampler

521
00:26:44,349 --> 00:26:50,079
that's supposed to be getting our voxel

522
00:26:46,630 --> 00:26:53,049
values out now when we pass a voxel

523
00:26:50,079 --> 00:26:55,839
lookup value into the look up sampler

524
00:26:53,048 --> 00:26:57,940
we're expecting to get out those numbers

525
00:26:55,839 --> 00:27:03,189
that are those monotonic issue numbers 0

526
00:26:57,940 --> 00:27:06,880
1 2 3 4 5 6 7 right and what you can see

527
00:27:03,190 --> 00:27:12,460
here is when we get our use light values

528
00:27:06,880 --> 00:27:14,169
and stuff and such we're expecting to

529
00:27:12,460 --> 00:27:15,819
reset these values and you know I'm

530
00:27:14,169 --> 00:27:19,140
gonna do I'm gonna move this out so we

531
00:27:15,819 --> 00:27:19,139
can still see the red fringe

532
00:27:24,679 --> 00:27:32,879
okay so if I switch now you can see the

533
00:27:31,108 --> 00:27:36,269
red fringe which lets me know that my

534
00:27:32,878 --> 00:27:38,339
voxel testing is actually still working

535
00:27:36,269 --> 00:27:40,108
and it means that these values at least

536
00:27:38,339 --> 00:27:45,298
as far as we can tell are within proper

537
00:27:40,108 --> 00:27:50,368
bounds right so Vox I wise Vox XY and z

538
00:27:45,298 --> 00:27:53,788
are all between 0 to 36 and 0 32 for the

539
00:27:50,368 --> 00:27:55,949
Z right and so what we would expect is

540
00:27:53,788 --> 00:27:57,839
when we get a textile fetchin here we

541
00:27:55,950 --> 00:28:00,479
would expect the values coming back from

542
00:27:57,839 --> 00:28:02,759
textile fetch to be exactly those

543
00:28:00,479 --> 00:28:05,190
monotonically increasing values so what

544
00:28:02,759 --> 00:28:08,399
we should be seeing if we set all of the

545
00:28:05,190 --> 00:28:10,979
colors here we should be seeing these

546
00:28:08,398 --> 00:28:13,378
light up in progressively brighter

547
00:28:10,979 --> 00:28:16,288
shades of gray so it start at black at

548
00:28:13,378 --> 00:28:18,509
the min corner of the voxel and get

549
00:28:16,288 --> 00:28:20,759
progressively brighter as it goes up

550
00:28:18,509 --> 00:28:22,229
through any given slice and each slice

551
00:28:20,759 --> 00:28:26,579
should be the same so we should see see

552
00:28:22,229 --> 00:28:28,590
no variance based on the Z height like

553
00:28:26,579 --> 00:28:30,329
looking at this for example we should

554
00:28:28,589 --> 00:28:32,249
see if we if this were working properly

555
00:28:30,329 --> 00:28:38,098
it's not if this were working properly

556
00:28:32,249 --> 00:28:40,229
we should see black at the min corner

557
00:28:38,098 --> 00:28:42,358
white at the max corner and no

558
00:28:40,229 --> 00:28:45,210
difference depending on the Z so it

559
00:28:42,358 --> 00:28:47,608
should be completely uniformly colored

560
00:28:45,210 --> 00:28:50,808
up and down but it should go from black

561
00:28:47,608 --> 00:28:53,608
like here to white like here right

562
00:28:50,808 --> 00:28:55,858
that's what we should be seeing instead

563
00:28:53,608 --> 00:28:57,778
we're seeing no variance at all so what

564
00:28:55,858 --> 00:29:00,089
we're seeing is as if the textile fetch

565
00:28:57,778 --> 00:29:02,759
is always coming back with nothing now

566
00:29:00,089 --> 00:29:07,918
this exactly matches the bug we were

567
00:29:02,759 --> 00:29:10,019
seeing so that is not surprising right

568
00:29:07,919 --> 00:29:12,690
that is this is what we would expect to

569
00:29:10,019 --> 00:29:14,519
see based on what we're seeing before

570
00:29:12,690 --> 00:29:16,499
but it's still not what we would expect

571
00:29:14,519 --> 00:29:18,450
to see based on the code so we obviously

572
00:29:16,499 --> 00:29:20,399
just don't understand something about

573
00:29:18,450 --> 00:29:22,710
this and this is not again this is

574
00:29:20,398 --> 00:29:26,128
exactly why I hate GPU programming it's

575
00:29:22,710 --> 00:29:28,169
because even basic simple stuff is

576
00:29:26,128 --> 00:29:29,998
almost impossible to get right because

577
00:29:28,169 --> 00:29:32,489
even when you write something that's a

578
00:29:29,999 --> 00:29:34,150
trivial line of code that would you've

579
00:29:32,489 --> 00:29:36,190
seen us do this on hand here a million

580
00:29:34,150 --> 00:29:37,570
times we never have any problem getting

581
00:29:36,190 --> 00:29:40,720
this working at a reasonable amount of

582
00:29:37,569 --> 00:29:45,220
time all we're doing is trying to floor

583
00:29:40,720 --> 00:29:49,029
a value right and then look it up in an

584
00:29:45,220 --> 00:29:51,220
array that alone takes hours of

585
00:29:49,029 --> 00:29:53,980
debugging work on GPUs it's just it

586
00:29:51,220 --> 00:29:56,140
sucks right it's absolutely a miserable

587
00:29:53,980 --> 00:29:59,200
debugging experience you always get it

588
00:29:56,140 --> 00:30:01,930
working eventually but it takes like ten

589
00:29:59,200 --> 00:30:04,840
times or hundred times even longer than

590
00:30:01,930 --> 00:30:06,460
it does on a CPU now if you're a really

591
00:30:04,839 --> 00:30:07,779
good graphics programmer and you spend

592
00:30:06,460 --> 00:30:12,130
all your time doing graphics programming

593
00:30:07,779 --> 00:30:13,750
I do not do that but if you are you end

594
00:30:12,130 --> 00:30:15,340
up trying to work around these things

595
00:30:13,750 --> 00:30:18,640
and you develop a lot more techniques

596
00:30:15,339 --> 00:30:21,129
for it right so it's not as bad as I'm

597
00:30:18,640 --> 00:30:23,170
making it seem because if I were someone

598
00:30:21,130 --> 00:30:26,080
who did all who was just on graphics

599
00:30:23,170 --> 00:30:28,539
engines all day I would probably have a

600
00:30:26,079 --> 00:30:30,399
better approach to it right and things

601
00:30:28,539 --> 00:30:31,809
would go some more smoothly but they

602
00:30:30,400 --> 00:30:33,550
still don't ever go particularly

603
00:30:31,809 --> 00:30:36,069
smoothly and they're particularly bad

604
00:30:33,549 --> 00:30:39,369
for anyone who's a generalist such as

605
00:30:36,069 --> 00:30:40,960
myself who just wants to do very simple

606
00:30:39,369 --> 00:30:42,399
stuff I mean even though it looks

607
00:30:40,960 --> 00:30:45,610
somewhat complicated to walk a linked

608
00:30:42,400 --> 00:30:49,810
list off of a voxel these days that is

609
00:30:45,609 --> 00:30:52,059
not I mean a you know a back-end

610
00:30:49,809 --> 00:30:55,960
graphics programmer on a main graph on a

611
00:30:52,059 --> 00:30:58,960
main game engine would not hear that and

612
00:30:55,960 --> 00:31:01,269
go wow you're really you know off in the

613
00:30:58,960 --> 00:31:03,160
deep end there it's like no that's you

614
00:31:01,269 --> 00:31:06,250
know this is not something that they

615
00:31:03,160 --> 00:31:08,529
would I think that an eyelash at so

616
00:31:06,250 --> 00:31:11,950
anyway so what we want to know here is

617
00:31:08,529 --> 00:31:14,289
what's going on with this weird sort of

618
00:31:11,950 --> 00:31:18,009
situation here what I would like to do

619
00:31:14,289 --> 00:31:20,950
is I would like to do divided here of

620
00:31:18,009 --> 00:31:26,170
these values so I can just verify Vox

621
00:31:20,950 --> 00:31:30,700
pee real quick so if I take so if I take

622
00:31:26,170 --> 00:31:35,289
Vox pee again I'm going to sort of get a

623
00:31:30,700 --> 00:31:37,539
lot of this stuff out of here now I'm

624
00:31:35,289 --> 00:31:40,359
going to take Vox pee and I'm going to

625
00:31:37,539 --> 00:31:42,730
say that use light C equals Vox P and

626
00:31:40,359 --> 00:31:46,539
then I'm going to take each of these and

627
00:31:42,730 --> 00:31:50,240
divide them by their respective

628
00:31:46,539 --> 00:31:51,920
indexing values right so what I'm going

629
00:31:50,240 --> 00:31:54,950
to try to do here is basically turn the

630
00:31:51,920 --> 00:31:58,690
color into the voxel address right so we

631
00:31:54,950 --> 00:31:58,690
can just see what's going on there

632
00:32:08,119 --> 00:32:21,189
oh sorry forgot to announce that

633
00:32:14,569 --> 00:32:21,189
variable all right

634
00:32:22,009 --> 00:32:29,089
so what you can see here is a

635
00:32:25,190 --> 00:32:31,038
color-coded version of the look app and

636
00:32:29,089 --> 00:32:34,459
it looks pretty reasonable to me right

637
00:32:31,038 --> 00:32:36,650
if we look at what we're getting here as

638
00:32:34,460 --> 00:32:39,590
far as what the color values are being

639
00:32:36,650 --> 00:32:42,200
output it's more or less what I would

640
00:32:39,589 --> 00:32:46,159
expect it's getting towards black over

641
00:32:42,200 --> 00:32:47,990
here with the blue value indicating Z so

642
00:32:46,160 --> 00:32:51,169
as we go up higher that blue gets

643
00:32:47,990 --> 00:32:53,329
stronger right as we go down the blue

644
00:32:51,169 --> 00:32:55,610
gets weaker as we get up towards this

645
00:32:53,329 --> 00:32:57,740
corner right it's you know so red is

646
00:32:55,609 --> 00:33:02,959
running this way green is running that

647
00:32:57,740 --> 00:33:06,288
way and blue is running like this so

648
00:33:02,960 --> 00:33:08,569
that looks like a pretty stable look up

649
00:33:06,288 --> 00:33:11,390
into the voxel right those values look

650
00:33:08,569 --> 00:33:13,819
like what I would expect those are the

651
00:33:11,390 --> 00:33:16,100
floating-point values we are flooring

652
00:33:13,819 --> 00:33:19,509
those to get voxel indices so what I'd

653
00:33:16,099 --> 00:33:23,178
like to do now is again switch to

654
00:33:19,509 --> 00:33:24,440
looking at this after the flooring now

655
00:33:23,179 --> 00:33:26,240
that I know that that's right

656
00:33:24,440 --> 00:33:28,220
and again what you can see them doing

657
00:33:26,240 --> 00:33:31,339
here is I'm literally just a employing

658
00:33:28,220 --> 00:33:32,990
the most basic black box the Box

659
00:33:31,339 --> 00:33:36,829
debugging technique so that's all I can

660
00:33:32,990 --> 00:33:42,919
do to see where it which step of the

661
00:33:36,829 --> 00:33:44,869
process is going awry right so now

662
00:33:42,919 --> 00:33:47,630
unless I've made some kind of an error

663
00:33:44,869 --> 00:33:54,918
we are now looking at the actual output

664
00:33:47,630 --> 00:33:57,020
of the of the the trunk like the integer

665
00:33:54,919 --> 00:33:59,830
eyes values right because we've lured

666
00:33:57,019 --> 00:34:02,029
them and now we've taken a continuous

667
00:33:59,829 --> 00:34:04,730
value that's running across those

668
00:34:02,029 --> 00:34:06,918
dimensions and I've I've truncated them

669
00:34:04,730 --> 00:34:08,358
and you can sort of see it it's a little

670
00:34:06,919 --> 00:34:10,309
bit hard to see because we're still

671
00:34:08,358 --> 00:34:12,769
we've got a lot of gradations but if for

672
00:34:10,309 --> 00:34:15,079
example you take the large step the one

673
00:34:12,769 --> 00:34:16,639
that's only 32 gradations the one that's

674
00:34:15,079 --> 00:34:18,378
256 gradations you can't really see

675
00:34:16,639 --> 00:34:21,108
because obviously that's a very fine

676
00:34:18,378 --> 00:34:24,139
level of gradation but what you can see

677
00:34:21,108 --> 00:34:26,148
is here on the way up in the Z values

678
00:34:24,139 --> 00:34:29,179
you can see there's little bands there

679
00:34:26,148 --> 00:34:32,358
right that weren't there before

680
00:34:29,179 --> 00:34:34,550
and those bands are the truncation 232

681
00:34:32,358 --> 00:34:34,789
levels so it's not instead of the normal

682
00:34:34,550 --> 00:34:36,650
two

683
00:34:34,789 --> 00:34:38,929
six levels that it was getting before

684
00:34:36,650 --> 00:34:41,750
it's getting 32 levels and you can see

685
00:34:38,929 --> 00:34:44,780
the banding there again looks like a

686
00:34:41,750 --> 00:34:47,239
pretty stable voxel look up right looks

687
00:34:44,780 --> 00:34:49,880
like a pretty reasonable thing okay

688
00:34:47,239 --> 00:34:53,289
so once we have that voxel look up and

689
00:34:49,880 --> 00:34:53,289
we know what's going on there

690
00:34:53,349 --> 00:34:59,269
here is the textile fetch that actually

691
00:34:56,239 --> 00:35:01,549
attempts to get a value out of here and

692
00:34:59,269 --> 00:35:04,250
for some reason and I don't know what

693
00:35:01,550 --> 00:35:08,269
that reason is we are unable apparently

694
00:35:04,250 --> 00:35:10,489
to get the actual those values to come

695
00:35:08,269 --> 00:35:12,320
out to something meaningful I don't know

696
00:35:10,489 --> 00:35:14,809
why so now let's try to do that I'm

697
00:35:12,320 --> 00:35:17,480
pretty sure I've validated what I think

698
00:35:14,809 --> 00:35:19,699
the inputs are to this thing Vox eye is

699
00:35:17,480 --> 00:35:21,199
what I think it should be going in I'm

700
00:35:19,699 --> 00:35:23,599
gonna have to look at textile fetch

701
00:35:21,199 --> 00:35:26,689
again to make sure that I'm not missing

702
00:35:23,599 --> 00:35:28,130
some subtlety of this API that that you

703
00:35:26,690 --> 00:35:36,380
know we need to know that we don't know

704
00:35:28,130 --> 00:35:38,840
and we're doing wrong like I believe it

705
00:35:36,380 --> 00:35:41,170
takes an integer pixel coordinate to

706
00:35:38,840 --> 00:35:44,420
look up into into the text texels I

707
00:35:41,170 --> 00:35:45,889
should say texture coordinate and not a

708
00:35:44,420 --> 00:35:48,139
floating-point value so that's why I'm

709
00:35:45,889 --> 00:35:49,730
passing an integer in I believe that

710
00:35:48,139 --> 00:35:53,379
integer to be correct and I believe it

711
00:35:49,730 --> 00:35:57,679
to run the correct bounds of the voxel

712
00:35:53,380 --> 00:35:59,750
so moving here to setting use light I'm

713
00:35:57,679 --> 00:36:01,969
setting the used light red parameter

714
00:35:59,750 --> 00:36:03,590
actually let's let's set one that we're

715
00:36:01,969 --> 00:36:05,929
not setting below so the red parameter

716
00:36:03,590 --> 00:36:07,519
will now just be set based on whether

717
00:36:05,929 --> 00:36:09,440
we're outside the bounds the green

718
00:36:07,519 --> 00:36:12,139
parameter will be set based on whatever

719
00:36:09,440 --> 00:36:13,940
comes back from light I and here where

720
00:36:12,139 --> 00:36:17,690
we're actually doing this and getting

721
00:36:13,940 --> 00:36:22,220
the 65535 divide out here I would expect

722
00:36:17,690 --> 00:36:27,679
this to give me green values that vary

723
00:36:22,219 --> 00:36:30,889
in a pattern again going along the going

724
00:36:27,679 --> 00:36:34,369
from black at the bottom the bottom left

725
00:36:30,889 --> 00:36:37,730
corner to bright green in the upper

726
00:36:34,369 --> 00:36:40,969
right so bottom left black upper right

727
00:36:37,730 --> 00:36:44,929
green right and you know let me just

728
00:36:40,969 --> 00:36:47,449
verify that this is the case by casting

729
00:36:44,929 --> 00:36:48,199
that as well to a float so we you know

730
00:36:47,449 --> 00:36:53,179
up convert

731
00:36:48,199 --> 00:36:55,669
the light I to a float I feel like

732
00:36:53,179 --> 00:37:00,919
that's you know what we should be

733
00:36:55,670 --> 00:37:02,690
getting here and let's take a look so

734
00:37:00,920 --> 00:37:04,639
you can see we're still getting black so

735
00:37:02,690 --> 00:37:07,519
getting an integer out of this thing

736
00:37:04,639 --> 00:37:09,798
just does not seem to be working and

737
00:37:07,519 --> 00:37:13,849
what I don't really know is why

738
00:37:09,798 --> 00:37:15,920
so when we call textile fetch let's just

739
00:37:13,849 --> 00:37:29,420
find out what that's supposed to be

740
00:37:15,920 --> 00:37:32,780
doing Here I am in the OpenGL

741
00:37:29,420 --> 00:37:33,740
specification and I'm looking at Texel

742
00:37:32,780 --> 00:37:36,859
fetch

743
00:37:33,739 --> 00:37:39,019
so here's textile fetch you can see that

744
00:37:36,858 --> 00:37:41,808
like the one that is relevant to us

745
00:37:39,019 --> 00:37:45,108
would be this one here where it's a

746
00:37:41,809 --> 00:37:47,000
sampler that takes a three-dimensional

747
00:37:45,108 --> 00:37:49,068
vector and a lot value again we don't

748
00:37:47,000 --> 00:37:51,019
have any MIT Maps so we're passing a log

749
00:37:49,068 --> 00:37:53,150
value of zero here because we just want

750
00:37:51,019 --> 00:37:54,769
to look up into the basic texture that

751
00:37:53,150 --> 00:37:58,099
we submitted we didn't submit any lower

752
00:37:54,769 --> 00:38:00,259
resolution versions here where we say

753
00:37:58,099 --> 00:38:02,030
use integer coordinate P to look up a

754
00:38:00,260 --> 00:38:03,890
single Texel from sampler the array

755
00:38:02,030 --> 00:38:05,780
layer comes from the last component of P

756
00:38:03,889 --> 00:38:07,519
for Ray Forbes we're not using array

757
00:38:05,780 --> 00:38:09,200
forms the level of detail a lot of

758
00:38:07,519 --> 00:38:10,849
president is in described in sections

759
00:38:09,199 --> 00:38:13,429
you know blah blah blah pixel fetches

760
00:38:10,849 --> 00:38:14,480
and scale factor in level detail so we

761
00:38:13,429 --> 00:38:18,529
don't care about that because we're not

762
00:38:14,480 --> 00:38:20,599
doing anything fast with that well we

763
00:38:18,530 --> 00:38:23,690
don't know here is how this really

764
00:38:20,599 --> 00:38:24,980
returns things unfortunately because

765
00:38:23,690 --> 00:38:26,838
it's not really giving us much

766
00:38:24,980 --> 00:38:29,539
information there so I think probably

767
00:38:26,838 --> 00:38:32,000
what we would need to do is look up you

768
00:38:29,539 --> 00:38:33,769
sampler and see what's going on with

769
00:38:32,000 --> 00:38:37,489
that somewhere hopefully we can get more

770
00:38:33,769 --> 00:38:39,798
information about you sampler somewhere

771
00:38:37,489 --> 00:38:42,318
and verify what that because that's what

772
00:38:39,798 --> 00:38:45,489
we've defined and we would like to make

773
00:38:42,318 --> 00:38:45,489
sure that that's actually correct

774
00:38:48,210 --> 00:38:53,559
Wow so they literally have no

775
00:38:51,099 --> 00:38:55,179
documentation for this whatsoever

776
00:38:53,559 --> 00:38:56,500
let's look in the general sampler

777
00:38:55,179 --> 00:39:19,809
section and maybe they talked about that

778
00:38:56,500 --> 00:39:23,139
a little bit so texture functions all

779
00:39:19,809 --> 00:39:24,849
right so let's see automatic load of

780
00:39:23,139 --> 00:39:27,339
details created above logic sure data

781
00:39:24,849 --> 00:39:29,230
can be stored GL it's unsigned norma's

782
00:39:27,340 --> 00:39:30,850
if you're unsigned integer or signed

783
00:39:29,230 --> 00:39:32,380
integer data types you look up function

784
00:39:30,849 --> 00:39:33,909
provider that can return there's all

785
00:39:32,380 --> 00:39:35,349
this floating point integer Alice I'm

786
00:39:33,909 --> 00:39:36,940
sure or science are depending on sample

787
00:39:35,349 --> 00:39:38,230
type here if you take into use the right

788
00:39:36,940 --> 00:39:39,220
sampler for text racks just the

789
00:39:38,230 --> 00:39:41,019
following table lists the sporty

790
00:39:39,219 --> 00:39:43,919
combinations of sample types and texture

791
00:39:41,019 --> 00:39:43,920
internal formats

792
00:39:45,480 --> 00:39:51,820
alright so unsigned integer with an

793
00:39:49,690 --> 00:39:55,030
unsigned integer sampler type is what we

794
00:39:51,820 --> 00:40:09,120
should be using now I believe that's

795
00:39:55,030 --> 00:40:12,580
what we did right here is this admission

796
00:40:09,119 --> 00:40:15,269
for our texture it's a 3d texture and we

797
00:40:12,579 --> 00:40:19,630
requested it to be stored unsigned

798
00:40:15,269 --> 00:40:21,489
in in there I don't know if this needs

799
00:40:19,630 --> 00:40:23,710
to be like unsigned integer or something

800
00:40:21,489 --> 00:40:26,139
like this I guess we could take a look

801
00:40:23,710 --> 00:40:28,329
to make sure but that's only like how

802
00:40:26,139 --> 00:40:30,549
we're submitting it so I feel like that

803
00:40:28,329 --> 00:40:37,360
shouldn't really even matter what we're

804
00:40:30,550 --> 00:40:41,250
doing there oops but you never know with

805
00:40:37,360 --> 00:40:41,250
OpenGL you never know

806
00:40:47,059 --> 00:40:52,548
so it looks like that's not even

807
00:40:49,289 --> 00:40:52,549
documented in here

808
00:41:02,090 --> 00:41:07,460
so yeah I don't see any other options

809
00:41:05,929 --> 00:41:10,669
for that so it looks like that's the

810
00:41:07,460 --> 00:41:14,090
only thing that could be happening there

811
00:41:10,670 --> 00:41:16,909
I guess one problem we may be running

812
00:41:14,090 --> 00:41:21,620
into and I don't really know if I don't

813
00:41:16,909 --> 00:41:24,349
know whether we're asking for the proper

814
00:41:21,619 --> 00:41:26,480
versions of OpenGL it may be that you

815
00:41:24,349 --> 00:41:29,150
sampler isn't really supported in this

816
00:41:26,480 --> 00:41:30,710
version of OpenGL or other things like

817
00:41:29,150 --> 00:41:33,440
that why we are not getting an error I

818
00:41:30,710 --> 00:41:36,019
don't know but that's sort of something

819
00:41:33,440 --> 00:41:37,849
that's kind of worrisome so you know I

820
00:41:36,019 --> 00:41:39,409
don't know if this is really an

821
00:41:37,849 --> 00:41:41,659
acceptable thing and maybe we shouldn't

822
00:41:39,409 --> 00:41:42,920
be trying that sample unsigned integers

823
00:41:41,659 --> 00:41:45,049
maybe we should still be trying to

824
00:41:42,920 --> 00:41:47,059
specify floating-point values or

825
00:41:45,050 --> 00:41:49,970
something like this and then convert

826
00:41:47,059 --> 00:41:50,900
them back I'm not sure but again those

827
00:41:49,969 --> 00:41:53,149
are just some thoughts that are running

828
00:41:50,900 --> 00:41:57,769
through my mind I would like to know

829
00:41:53,150 --> 00:42:02,630
what when you sampler was introduced and

830
00:41:57,769 --> 00:42:04,929
I don't really know how to determine

831
00:42:02,630 --> 00:42:04,930
that

832
00:42:17,170 --> 00:42:33,599
I don't know if this really says so I'm

833
00:42:27,730 --> 00:42:33,599
not sure exactly when that came in

834
00:42:34,230 --> 00:42:42,818
here's the 3.3 specification a new

835
00:42:40,989 --> 00:42:58,989
sampler is in there so in theory we

836
00:42:42,818 --> 00:43:01,630
should be okay I don't know so the next

837
00:42:58,989 --> 00:43:03,548
question I have is when I look up one of

838
00:43:01,630 --> 00:43:08,970
these what is the value supposed to come

839
00:43:03,548 --> 00:43:08,969
back as right when I call Texel fetch

840
00:43:10,889 --> 00:43:15,460
does it talk at all about what the value

841
00:43:13,750 --> 00:43:24,269
supposed to come back as in what format

842
00:43:15,460 --> 00:43:24,269
right and the answer appears to be no

843
00:43:38,760 --> 00:43:43,800
let's see so in the pre-digital of the G

844
00:43:41,340 --> 00:43:46,769
or F of G of X is a picture for nothing

845
00:43:43,800 --> 00:43:49,769
I or you making your turn to perfec for

846
00:43:46,769 --> 00:43:52,409
effect for you Veck for in these cases

847
00:43:49,769 --> 00:43:56,550
the sampler argument type also starts

848
00:43:52,409 --> 00:43:57,989
with G indicating the same substitution

849
00:43:56,550 --> 00:43:59,640
done on the return type

850
00:43:57,989 --> 00:44:02,759
it is either a single precision floating

851
00:43:59,639 --> 00:44:05,670
point single signed integer or unsigned

852
00:44:02,760 --> 00:44:08,940
integer sampler matching the basic type

853
00:44:05,670 --> 00:44:11,700
of the return type as described above so

854
00:44:08,940 --> 00:44:14,250
I think it should be giving us an

855
00:44:11,699 --> 00:44:18,539
unsigned integer right I mean that is

856
00:44:14,250 --> 00:44:21,690
what we would expect here from a new

857
00:44:18,539 --> 00:44:31,139
sampler 3d I think it should be giving

858
00:44:21,690 --> 00:44:36,720
us an unsigned integer value back right

859
00:44:31,139 --> 00:44:43,019
I think that should be giving us a you

860
00:44:36,719 --> 00:44:45,539
Veck 3 that's my guess anyway and so if

861
00:44:43,019 --> 00:44:50,300
I run this I shouldn't get any errors

862
00:44:45,539 --> 00:44:53,340
right yeah so this is giving us back a

863
00:44:50,300 --> 00:45:00,180
UN but for some reason that you ain't

864
00:44:53,340 --> 00:45:03,559
appears to be like always zero or

865
00:45:00,179 --> 00:45:07,079
something I don't know because I can't

866
00:45:03,559 --> 00:45:08,909
see any output from it so what I'm

867
00:45:07,079 --> 00:45:11,969
trying to figure out here is how could I

868
00:45:08,909 --> 00:45:14,940
get some information about what is

869
00:45:11,969 --> 00:45:17,189
coming back from Texel fetch I verify

870
00:45:14,940 --> 00:45:19,710
that these values are values that should

871
00:45:17,190 --> 00:45:27,450
work right I mean I looked at them they

872
00:45:19,710 --> 00:45:30,960
are 0 to 255 and 0 to 32 they're exactly

873
00:45:27,449 --> 00:45:35,279
what I think they should be I so they

874
00:45:30,960 --> 00:45:37,530
seem like they should be valid ways to

875
00:45:35,280 --> 00:45:39,540
look up into this texture yet when I

876
00:45:37,530 --> 00:45:42,540
look up into this texture I always get 0

877
00:45:39,539 --> 00:45:44,759
back right I know that the texture

878
00:45:42,539 --> 00:45:45,869
doesn't have zeros in it I looked at

879
00:45:44,760 --> 00:45:49,260
with an exercise in it and then they're

880
00:45:45,869 --> 00:45:52,110
not zeros and so I really just have no

881
00:45:49,260 --> 00:45:55,770
idea why it refuses to

882
00:45:52,110 --> 00:46:00,210
take a sample from this texture I I

883
00:45:55,769 --> 00:46:06,019
don't know I don't know why it's unable

884
00:46:00,210 --> 00:46:06,019
to give me back a value here

885
00:46:11,780 --> 00:46:24,150
um I guess one question I sort of have

886
00:46:20,909 --> 00:46:25,679
is is it possible that the shader itself

887
00:46:24,150 --> 00:46:27,720
needs to have something slightly

888
00:46:25,679 --> 00:46:35,069
different specified for it when the

889
00:46:27,719 --> 00:46:43,859
binding occurs doesn't seem likely to me

890
00:46:35,070 --> 00:46:45,870
that that would be the case but like you

891
00:46:43,860 --> 00:46:49,680
know if there was something in the

892
00:46:45,869 --> 00:46:52,799
actual submission of this that meant

893
00:46:49,679 --> 00:46:57,569
that you had to do something different

894
00:46:52,800 --> 00:46:59,160
when you were binding it right but I

895
00:46:57,570 --> 00:47:01,440
just don't see why that would because

896
00:46:59,159 --> 00:47:05,779
you're only binding like a simple name

897
00:47:01,440 --> 00:47:05,780
right you're just binding like a uniform

898
00:47:06,139 --> 00:47:10,190
and I don't really see

899
00:47:15,278 --> 00:47:21,699
I mean here's the code where that

900
00:47:17,018 --> 00:47:24,038
happens right and you can see it kind of

901
00:47:21,699 --> 00:47:26,679
getting the sampler IDs just by calling

902
00:47:24,039 --> 00:47:32,289
get uniform location and it doesn't seem

903
00:47:26,679 --> 00:47:38,259
like that would ever cause a problem

904
00:47:32,289 --> 00:47:40,778
like you know it's it's this there be no

905
00:47:38,259 --> 00:47:43,179
real reason for them to change how you

906
00:47:40,778 --> 00:47:45,909
were specifying samplers just because

907
00:47:43,179 --> 00:47:51,099
one was unsigned versus signed it seems

908
00:47:45,909 --> 00:47:54,729
like it will always be GL uniform so I

909
00:47:51,099 --> 00:48:00,939
really don't know why it thinks that's a

910
00:47:54,728 --> 00:48:02,948
problem I couldn't say but yeah point

911
00:48:00,938 --> 00:48:06,338
being we definitely know we have one the

912
00:48:02,949 --> 00:48:08,469
question is just what why can't we get

913
00:48:06,338 --> 00:48:11,318
that lookup so it seems like that's our

914
00:48:08,469 --> 00:48:13,599
you know that maybe almost the entirety

915
00:48:11,318 --> 00:48:15,338
of our problem because that would

916
00:48:13,599 --> 00:48:17,289
explain basically all of the failure

917
00:48:15,338 --> 00:48:18,880
we're seeing if we can never get a look

918
00:48:17,289 --> 00:48:20,650
up from our volume texture we can never

919
00:48:18,880 --> 00:48:22,298
get the first link you know lookup chain

920
00:48:20,650 --> 00:48:24,849
so therefore we can never look at the

921
00:48:22,298 --> 00:48:28,088
light values and the game is over before

922
00:48:24,849 --> 00:48:31,989
it's even started so that's what we're

923
00:48:28,088 --> 00:48:34,739
left with is figuring out how that could

924
00:48:31,989 --> 00:48:34,739
be right

925
00:48:35,278 --> 00:48:44,079
why can we not Texel fetch from this you

926
00:48:41,498 --> 00:48:45,968
know why can we not Texel fetch from

927
00:48:44,079 --> 00:48:48,309
this volume texture that we know has the

928
00:48:45,969 --> 00:48:51,429
values in it that we think it does why

929
00:48:48,309 --> 00:48:55,298
do we not get any results when we try to

930
00:48:51,429 --> 00:48:56,940
do it right now maybe there's something

931
00:48:55,298 --> 00:49:00,280
else we could do here

932
00:48:56,940 --> 00:49:00,280
[Music]

933
00:49:07,530 --> 00:49:14,080
hmm I mean I could try doing something

934
00:49:12,099 --> 00:49:15,789
slightly different like maybe if I

935
00:49:14,079 --> 00:49:17,349
believed the divide to be a little bit

936
00:49:15,789 --> 00:49:21,449
weird I could just do something like

937
00:49:17,349 --> 00:49:23,799
this so that I can still see some

938
00:49:21,449 --> 00:49:26,049
semblance of something going on in the

939
00:49:23,800 --> 00:49:29,680
green Channel I don't think that's gonna

940
00:49:26,050 --> 00:49:33,700
change anything right yeah

941
00:49:29,679 --> 00:49:36,009
so that yeah I'm I'm pretty sure that at

942
00:49:33,699 --> 00:49:39,039
this point this textile fetch is just

943
00:49:36,010 --> 00:49:41,680
failing I don't have any idea why it

944
00:49:39,039 --> 00:49:44,110
would fail there's no indication of why

945
00:49:41,679 --> 00:49:46,509
it would fail it's not giving me any

946
00:49:44,110 --> 00:49:48,940
errors of any kind it doesn't think that

947
00:49:46,510 --> 00:49:53,650
the shader code is bad it just doesn't

948
00:49:48,940 --> 00:49:57,220
seem to want to actually do the work

949
00:49:53,650 --> 00:50:00,309
it's supposed to do to correctly access

950
00:49:57,219 --> 00:50:01,689
this value I assume it understands the

951
00:50:00,309 --> 00:50:03,190
fact that this should be an integer

952
00:50:01,690 --> 00:50:05,019
value because it's not complaining about

953
00:50:03,190 --> 00:50:08,950
the fact that I'm passing integer if I

954
00:50:05,019 --> 00:50:12,699
was to pass a float hmm I would think

955
00:50:08,949 --> 00:50:17,829
that it would give me an error and it

956
00:50:12,699 --> 00:50:21,699
does so all of that is operating as we

957
00:50:17,829 --> 00:50:28,889
expect so that's not unusual what's

958
00:50:21,699 --> 00:50:32,489
where's my there is yeah you know it's

959
00:50:28,889 --> 00:50:37,750
it's thinking it is exactly what it is

960
00:50:32,489 --> 00:50:40,000
so that's even verifiable and so the

961
00:50:37,750 --> 00:50:43,150
only question is like when it goes to

962
00:50:40,000 --> 00:50:49,539
call this thing why is it unable to look

963
00:50:43,150 --> 00:50:54,608
up a valid value now I suppose I'm being

964
00:50:49,539 --> 00:50:58,989
slightly presumptuous in the fact that I

965
00:50:54,608 --> 00:51:02,349
don't actually know I mean I would have

966
00:50:58,989 --> 00:51:04,719
assumed that the red channel was the

967
00:51:02,349 --> 00:51:08,920
channel where things come out I guess I

968
00:51:04,719 --> 00:51:12,149
don't know I should be getting a you

969
00:51:08,920 --> 00:51:12,150
Veck three from it

970
00:51:13,199 --> 00:51:17,939
I mean I shouldn't be getting a new

971
00:51:15,150 --> 00:51:27,119
vector3 from it it's a one it's only got

972
00:51:17,940 --> 00:51:31,349
one element in it right it only has a

973
00:51:27,119 --> 00:51:34,950
single value so I should only be getting

974
00:51:31,349 --> 00:51:37,140
a single value out of it right but what

975
00:51:34,949 --> 00:51:38,969
I assume it will do as most text effects

976
00:51:37,139 --> 00:51:42,539
functions do is they always return a

977
00:51:38,969 --> 00:51:44,098
formal element vector regardless of what

978
00:51:42,539 --> 00:51:46,440
you put in them so I'm assuming that

979
00:51:44,099 --> 00:51:49,500
what light I actually is in this case is

980
00:51:46,440 --> 00:51:51,780
a four element vector what I can do here

981
00:51:49,500 --> 00:51:54,358
is I could do something where we just

982
00:51:51,780 --> 00:51:56,339
say okay let's let's take a look at

983
00:51:54,358 --> 00:51:59,098
every possible value that comes out of

984
00:51:56,338 --> 00:52:03,088
this thing and see if they're all zero

985
00:51:59,099 --> 00:52:04,019
right if see if any of them are accurate

986
00:52:03,088 --> 00:52:06,568
or not

987
00:52:04,019 --> 00:52:09,420
and I mean I'm pretty sure they're all

988
00:52:06,568 --> 00:52:11,608
zero but you know we can again I'm just

989
00:52:09,420 --> 00:52:16,559
randomly trying to think of anything to

990
00:52:11,608 --> 00:52:18,389
try here so if I randomly try the the

991
00:52:16,559 --> 00:52:21,599
red Channel I should get exactly the

992
00:52:18,389 --> 00:52:27,239
same thing as I got before if I randomly

993
00:52:21,599 --> 00:52:31,920
try the and again just just to make sure

994
00:52:27,239 --> 00:52:37,098
if I was to set light I hear if I was to

995
00:52:31,920 --> 00:52:40,200
set the our channel to like you know

996
00:52:37,099 --> 00:52:43,369
300,000 I should get you know a half

997
00:52:40,199 --> 00:52:43,368
bright red

998
00:52:46,800 --> 00:52:52,640
what's an integer you don't do that but

999
00:52:54,800 --> 00:53:04,550
what is the problem what did I do

1000
00:52:57,150 --> 00:53:08,070
Oh do I need to specify that it's a

1001
00:53:04,550 --> 00:53:09,269
unsigned value or I guess the maybe the

1002
00:53:08,070 --> 00:53:11,630
right way to do that would be to say to

1003
00:53:09,269 --> 00:53:11,630
doing

1004
00:53:17,309 --> 00:53:24,989
yes oh you know that's a green value

1005
00:53:22,920 --> 00:53:28,590
just like I would expect and if I set it

1006
00:53:24,989 --> 00:53:30,599
to 6,000 oh no you know what I forgot

1007
00:53:28,590 --> 00:53:32,430
this isn't dividing that way anymore so

1008
00:53:30,599 --> 00:53:42,170
let's actually change this back to my 6

1009
00:53:32,429 --> 00:53:42,169
5 5 3 5 go all right so that's green and

1010
00:53:46,909 --> 00:53:58,279
that's dimmer green and I don't think

1011
00:53:56,608 --> 00:54:04,170
there's much else to say about that

1012
00:53:58,280 --> 00:54:11,280
right that's obviously working correctly

1013
00:54:04,170 --> 00:54:13,250
so if I was to start looking at the

1014
00:54:11,280 --> 00:54:16,140
other channels here get rid of that

1015
00:54:13,250 --> 00:54:18,829
something here's me looking at just the

1016
00:54:16,139 --> 00:54:18,829
green Channel

1017
00:54:20,659 --> 00:54:27,799
nothing here's me looking at the blue

1018
00:54:25,320 --> 00:54:27,800
Channel

1019
00:54:29,940 --> 00:54:42,070
nothing here's me looking at the Alpha

1020
00:54:33,130 --> 00:54:49,960
Channel hmm so the Alpha Channel for

1021
00:54:42,070 --> 00:54:54,490
some reason is coming back as a hive

1022
00:54:49,960 --> 00:54:56,909
value even before I've submitted the

1023
00:54:54,489 --> 00:54:56,909
texture

1024
00:55:06,519 --> 00:55:17,469
so I guess the Alpha channel defaults to

1025
00:55:10,809 --> 00:55:21,250
one I mean does it does it default to

1026
00:55:17,469 --> 00:55:22,719
zero zero zero one essentially in in a

1027
00:55:21,250 --> 00:55:28,949
texture or something like this like why

1028
00:55:22,719 --> 00:55:30,939
would that be coming out as bright I

1029
00:55:28,949 --> 00:55:32,439
mean it should it should come out of

1030
00:55:30,940 --> 00:55:34,210
zero it's like I'm getting back at zero

1031
00:55:32,440 --> 00:55:36,519
right

1032
00:55:34,210 --> 00:55:41,650
that seems nonsensical to me that it

1033
00:55:36,519 --> 00:55:45,489
would be anything different the RG and B

1034
00:55:41,650 --> 00:55:50,639
values are all zero but the a value is

1035
00:55:45,489 --> 00:55:55,689
not I'm sorry why is that the case I

1036
00:55:50,639 --> 00:55:57,368
have no idea so yeah I'm totally stumped

1037
00:55:55,690 --> 00:55:59,170
on this I have no idea why this would be

1038
00:55:57,369 --> 00:56:02,410
the case it looks like this is just

1039
00:55:59,170 --> 00:56:03,880
straight-up failing oops not so

1040
00:56:02,409 --> 00:56:08,649
swearing stream yet those things this is

1041
00:56:03,880 --> 00:56:13,240
just straight ups failing and there's no

1042
00:56:08,650 --> 00:56:14,858
particular reason why you know we got no

1043
00:56:13,239 --> 00:56:16,449
errors we verified that the values that

1044
00:56:14,858 --> 00:56:18,549
we're looking up are correct we verified

1045
00:56:16,449 --> 00:56:21,250
that the values we're passing inter

1046
00:56:18,550 --> 00:56:25,150
correct and yet we never get back a

1047
00:56:21,250 --> 00:56:28,809
value other than 0 0 0 1 essentially or

1048
00:56:25,150 --> 00:56:30,099
in this case 0 0 0 6 5 5 3 5 here's what

1049
00:56:28,809 --> 00:56:38,108
we get back from every single texture

1050
00:56:30,099 --> 00:56:43,269
fetch that we issue right so what's the

1051
00:56:38,108 --> 00:56:46,059
deal what gives you know why can't it do

1052
00:56:43,269 --> 00:56:58,659
a Texel fetch into a 3d texture the way

1053
00:56:46,059 --> 00:57:04,299
that it's supposed to anyone anyone from

1054
00:56:58,659 --> 00:57:10,389
Nvidia watching she's me who wants to

1055
00:57:04,300 --> 00:57:13,660
tell me why I can't text the fetch so we

1056
00:57:10,389 --> 00:57:16,150
can try an eye sampler here as well it

1057
00:57:13,659 --> 00:57:17,799
should do the same thing but you never

1058
00:57:16,150 --> 00:57:20,338
know at this point we're just random

1059
00:57:17,800 --> 00:57:33,880
wares

1060
00:57:20,338 --> 00:57:36,750
doing random stuff same deal we could

1061
00:57:33,880 --> 00:57:40,740
try looking up with a you Veck instead

1062
00:57:36,750 --> 00:57:40,739
right I mean I don't know

1063
00:57:59,889 --> 00:58:04,348
so it definitely wants an i vac there

1064
00:58:08,248 --> 00:58:20,588
and puts the castrum into you int where

1065
00:58:16,028 --> 00:58:25,719
is the implicit cast oh it's in this

1066
00:58:20,588 --> 00:58:31,150
testing here but that's okay because

1067
00:58:25,719 --> 00:58:33,399
this is not what this function wanted so

1068
00:58:31,150 --> 00:58:35,499
that's a valid value being passed in the

1069
00:58:33,400 --> 00:58:37,239
format that it wants to the text will

1070
00:58:35,498 --> 00:58:41,528
fetch call that matches the format of

1071
00:58:37,239 --> 00:58:45,880
the texture as requested and it simply

1072
00:58:41,528 --> 00:58:48,298
returns zero in all cases I would like

1073
00:58:45,880 --> 00:58:48,298
an explanation

1074
00:58:56,320 --> 00:59:04,320
we don't by any chance have any Nvidia

1075
00:58:58,119 --> 00:59:04,319
people this dream do we or OpenGL people

1076
00:59:11,599 --> 00:59:15,949
anyone cuz this is the kind of thing

1077
00:59:14,748 --> 00:59:19,759
that happens all the time and I would

1078
00:59:15,949 --> 00:59:21,048
love an explanation for it right like I

1079
00:59:19,759 --> 00:59:22,699
would love to know what their

1080
00:59:21,048 --> 00:59:25,038
recommendation is for how do you figure

1081
00:59:22,699 --> 00:59:29,959
out what is going wrong here because

1082
00:59:25,039 --> 00:59:36,459
this is pretty obvious you know I'm

1083
00:59:29,958 --> 00:59:38,868
saying there's not a lot else in there

1084
00:59:36,458 --> 00:59:41,568
that's really going on now I'm gonna try

1085
00:59:38,869 --> 00:59:43,278
changing some stuff here what if we what

1086
00:59:41,568 --> 00:59:47,228
if we like arbitrarily changed our

1087
00:59:43,278 --> 00:59:47,228
OpenGL version number just curious

1088
00:59:51,068 --> 00:59:58,389
implicit cast from you Veck 3 - I've X 3

1089
00:59:55,389 --> 00:59:58,389
ok

1090
01:00:09,940 --> 01:00:16,010
now for some reason that wasn't giving

1091
01:00:12,559 --> 01:00:17,329
an air before now that granted was just

1092
01:00:16,010 --> 01:00:21,410
something I recently changed but that's

1093
01:00:17,329 --> 01:00:23,539
alright alright so no change so even if

1094
01:00:21,409 --> 01:00:26,569
I bump the OpenGL version number up to

1095
01:00:23,539 --> 01:00:27,980
the most latest one well I don't know if

1096
01:00:26,570 --> 01:00:32,360
that's the latest one but it's a very

1097
01:00:27,980 --> 01:00:34,369
recent one no change so it doesn't look

1098
01:00:32,360 --> 01:00:36,410
like it has something to do with that as

1099
01:00:34,369 --> 01:00:43,009
far as I can tell this is just straight

1100
01:00:36,409 --> 01:00:44,779
up fail and I have no idea why so it

1101
01:00:43,010 --> 01:00:49,970
doesn't seem to be a problem of compat

1102
01:00:44,780 --> 01:00:53,240
like hey you can't do this or that or

1103
01:00:49,969 --> 01:00:55,730
whatever right so I'm not sure what's

1104
01:00:53,239 --> 01:00:59,259
going on there one of the person

1105
01:00:55,730 --> 01:01:04,070
suggested on the chat like hey let's

1106
01:00:59,260 --> 01:01:06,770
let's up our our level of debug

1107
01:01:04,070 --> 01:01:08,980
notifications we could do that for sure

1108
01:01:06,769 --> 01:01:13,969
that you can see here that we've got a

1109
01:01:08,980 --> 01:01:17,199
debug call back what I could do here

1110
01:01:13,969 --> 01:01:17,199
instead is just look at them all

1111
01:01:24,280 --> 01:01:41,650
and the other thing I guess I could do

1112
01:01:25,510 --> 01:01:43,590
is I could print them out right so this

1113
01:01:41,650 --> 01:01:46,780
should just stream all of the debug

1114
01:01:43,590 --> 01:01:52,450
messages and in fact I could preface

1115
01:01:46,780 --> 01:01:56,530
them with something and this way maybe

1116
01:01:52,449 --> 01:01:58,059
the OpenGL driver like in a in a more in

1117
01:01:56,530 --> 01:02:03,250
a subtle way was like telling us

1118
01:01:58,059 --> 01:02:04,929
something that would help us here and we

1119
01:02:03,250 --> 01:02:09,159
just aren't seeing it because we weren't

1120
01:02:04,929 --> 01:02:11,529
looking at all of its debug right now

1121
01:02:09,159 --> 01:02:16,049
it's kind of giving us a giant stream of

1122
01:02:11,530 --> 01:02:19,420
stuff here let me see if I can get a

1123
01:02:16,050 --> 01:02:27,700
bigger view of this but because kind of

1124
01:02:19,420 --> 01:02:32,079
behind my head right now all right so

1125
01:02:27,699 --> 01:02:33,699
here's where we start and the first

1126
01:02:32,079 --> 01:02:37,119
thing that's nice is buffer object one

1127
01:02:33,699 --> 01:02:39,819
bound to GL buffer ARB usage hint is GL

1128
01:02:37,119 --> 01:02:44,889
static draw will use video memory as a

1129
01:02:39,820 --> 01:02:47,200
source for buffer object operations so

1130
01:02:44,889 --> 01:02:50,710
these are all just things telling me

1131
01:02:47,199 --> 01:02:52,210
where this will go like okay it's just

1132
01:02:50,710 --> 01:02:56,559
telling me that these things will go in

1133
01:02:52,210 --> 01:02:59,619
video memory and it looks like that's

1134
01:02:56,559 --> 01:03:01,690
the only thing it's telling me basically

1135
01:02:59,619 --> 01:03:04,750
every frame it tells me that something's

1136
01:03:01,690 --> 01:03:05,530
gonna go in video memory but it looks

1137
01:03:04,750 --> 01:03:07,840
like that's it

1138
01:03:05,530 --> 01:03:09,940
it didn't say a single other thing at

1139
01:03:07,840 --> 01:03:14,490
all so as far as the drive is concerned

1140
01:03:09,940 --> 01:03:14,490
it has nothing to tell us right

1141
01:03:29,380 --> 01:03:36,769
alright someone says that there was a

1142
01:03:34,280 --> 01:03:38,690
stack overflow on white excellent that

1143
01:03:36,769 --> 01:03:41,329
choice returns zero for a 1d single

1144
01:03:38,690 --> 01:03:43,220
channel texture third comment and they

1145
01:03:41,329 --> 01:03:46,009
said sorry for Sakura fling stack

1146
01:03:43,219 --> 01:03:48,439
overflow is fine if the person who

1147
01:03:46,010 --> 01:03:49,070
writes the comment actually knows what

1148
01:03:48,440 --> 01:03:51,230
they're talking about

1149
01:03:49,070 --> 01:03:54,200
the problem with stack overflow is a lot

1150
01:03:51,230 --> 01:03:56,960
of times the comments are wrong and then

1151
01:03:54,199 --> 01:03:58,339
you end up getting like misled by

1152
01:03:56,960 --> 01:04:00,590
something that's the only problem with

1153
01:03:58,340 --> 01:04:11,360
stack overflow when stack overflows

1154
01:04:00,590 --> 01:04:13,670
right that's good you know for some

1155
01:04:11,360 --> 01:04:17,059
reason I cannot open the browser on my

1156
01:04:13,670 --> 01:04:20,990
Linux machine here because I think it's

1157
01:04:17,059 --> 01:04:23,269
putting the browser window on a

1158
01:04:20,989 --> 01:04:31,929
different desktop and I can't seem to

1159
01:04:23,269 --> 01:04:31,929
convince it to use this desktop Oh Linux

1160
01:04:33,650 --> 01:04:37,720
yeah I think that is what it's doing

1161
01:04:40,509 --> 01:04:48,190
let's try Firefox all right

1162
01:04:44,358 --> 01:04:48,190
Firefox seems to work so we'll try that

1163
01:04:49,809 --> 01:04:54,249
okay so if I copy this link

1164
01:05:08,699 --> 01:05:14,500
why is textile fetch always returning

1165
01:05:11,050 --> 01:05:18,430
zero for a 1d single channel texture and

1166
01:05:14,500 --> 01:05:19,869
they said third comment it turns out

1167
01:05:18,429 --> 01:05:21,789
that I also need GL to experiment of gel

1168
01:05:19,869 --> 01:05:23,890
texture 1d gel just max levels zero to

1169
01:05:21,789 --> 01:05:26,500
get it to work the texture filtering

1170
01:05:23,889 --> 01:05:27,819
mode can be left to default okay if

1171
01:05:26,500 --> 01:05:32,139
that's correct though that's really

1172
01:05:27,820 --> 01:05:37,300
messed up because we're doing a textile

1173
01:05:32,139 --> 01:05:40,089
fetch not a texture read so it should be

1174
01:05:37,300 --> 01:05:48,609
reading only from the LOD level that we

1175
01:05:40,090 --> 01:05:51,480
specified right that's if that was

1176
01:05:48,608 --> 01:05:56,199
correct that would be really really

1177
01:05:51,480 --> 01:05:58,780
erroneous behavior not that that's

1178
01:05:56,199 --> 01:06:02,108
surprising right but just to be clear

1179
01:05:58,780 --> 01:06:02,890
about this so what we're doing here

1180
01:06:02,108 --> 01:06:09,849
right

1181
01:06:02,889 --> 01:06:12,219
oops what we're doing here is

1182
01:06:09,849 --> 01:06:15,389
specifically a textile fetch and a

1183
01:06:12,219 --> 01:06:18,579
textile fetch does not use the LOD

1184
01:06:15,389 --> 01:06:21,940
computation at all right taxol fetch

1185
01:06:18,579 --> 01:06:25,719
takes the LOD as the the third parameter

1186
01:06:21,940 --> 01:06:28,900
so filtering is not applied during a

1187
01:06:25,719 --> 01:06:32,980
texture fetch and it does not compute am

1188
01:06:28,900 --> 01:06:39,910
it map right so there should be

1189
01:06:32,980 --> 01:06:42,400
absolutely no cases where anything like

1190
01:06:39,909 --> 01:06:43,989
that is occurring so if that was

1191
01:06:42,400 --> 01:06:48,900
actually the case if this actually did

1192
01:06:43,989 --> 01:06:48,899
fix it that would be hugely messed up

1193
01:06:49,800 --> 01:06:55,570
but you know that doesn't mean it's not

1194
01:06:53,500 --> 01:07:00,639
true cuz this is open gel and anything

1195
01:06:55,570 --> 01:07:03,210
is on the table right but anyway let's

1196
01:07:00,639 --> 01:07:03,210
take a look here

1197
01:07:04,369 --> 01:07:11,059
all right so what we're about to do

1198
01:07:07,460 --> 01:07:15,259
we're gonna take that suggestion we're

1199
01:07:11,059 --> 01:07:18,920
about to do is apply the code that would

1200
01:07:15,259 --> 01:07:21,559
fix a problem if you were getting black

1201
01:07:18,920 --> 01:07:24,680
back when you were sampling a texture

1202
01:07:21,559 --> 01:07:28,009
using regular texture filtering and you

1203
01:07:24,679 --> 01:07:31,728
had MIT Maps turned on but you were

1204
01:07:28,009 --> 01:07:33,048
sampling using a thing that actually

1205
01:07:31,728 --> 01:07:37,399
used the MIT Maps and you would not

1206
01:07:33,048 --> 01:07:39,380
specify them right we are not doing that

1207
01:07:37,400 --> 01:07:48,769
so that should not be occurring in any

1208
01:07:39,380 --> 01:07:53,269
way but here is the GL text image 3d

1209
01:07:48,768 --> 01:07:58,038
call and you can see I believe we

1210
01:07:53,268 --> 01:07:59,508
actually do specify this here you can

1211
01:07:58,039 --> 01:08:04,549
see us specifying it for other things

1212
01:07:59,509 --> 01:08:08,389
right like Minton filter mag filter rap

1213
01:08:04,548 --> 01:08:09,858
SMT and so on we specify a bunch of s if

1214
01:08:08,389 --> 01:08:19,219
I don't think we ever specify max lot

1215
01:08:09,858 --> 01:08:21,170
anywhere yeah we don't so anyway if I

1216
01:08:19,219 --> 01:08:22,698
come back down here first thing I'm

1217
01:08:21,170 --> 01:08:26,719
gonna do is I'm going to try turning off

1218
01:08:22,698 --> 01:08:29,178
filtering entirely and again filtering

1219
01:08:26,719 --> 01:08:32,989
should never have been applied right

1220
01:08:29,179 --> 01:08:35,899
that should not have been happening but

1221
01:08:32,988 --> 01:08:41,468
you know whatever so we're gonna start

1222
01:08:35,899 --> 01:08:44,000
by turning off filtering entirely and

1223
01:08:41,469 --> 01:08:45,500
putting clamp to edge on okay we're not

1224
01:08:44,000 --> 01:08:46,789
setting the max load yet which was the

1225
01:08:45,500 --> 01:08:50,270
suggestion so we'll do that in a

1226
01:08:46,789 --> 01:08:52,639
separate step but and also I should

1227
01:08:50,270 --> 01:08:57,609
verify because we were sort of fussing

1228
01:08:52,639 --> 01:08:57,609
with the shader there and I don't I

1229
01:08:57,759 --> 01:09:02,238
don't want to accidentally not have the

1230
01:09:00,229 --> 01:09:04,218
right thing in here so you can see us

1231
01:09:02,238 --> 01:09:06,048
here saying all right here's the foxhole

1232
01:09:04,219 --> 01:09:08,118
look up we look it up into the texture

1233
01:09:06,048 --> 01:09:10,250
we get packing you back for we're using

1234
01:09:08,118 --> 01:09:13,818
the are channel of the U of X for to set

1235
01:09:10,250 --> 01:09:15,170
the green Channel and then we're leaving

1236
01:09:13,819 --> 01:09:17,480
it alone so that should be fine

1237
01:09:15,170 --> 01:09:21,859
so I'm setting it so that it's never

1238
01:09:17,479 --> 01:09:23,389
supposed to use LEDs for minification

1239
01:09:21,859 --> 01:09:30,950
and magnification it's not supposed to

1240
01:09:23,390 --> 01:09:33,470
emit map at all we get nothing here I

1241
01:09:30,949 --> 01:09:35,568
will set the max LOD level max LOD level

1242
01:09:33,470 --> 01:09:39,529
what that does is if filtering was on

1243
01:09:35,569 --> 01:09:41,750
which is now not it says don't ever use

1244
01:09:39,529 --> 01:09:59,480
anything above a specific blood level so

1245
01:09:41,750 --> 01:10:01,520
if I set it to zero I spell that GL

1246
01:09:59,479 --> 01:10:04,939
texture max lot so it must not be

1247
01:10:01,520 --> 01:10:07,489
defined in the base set I guess I can

1248
01:10:04,939 --> 01:10:13,339
also set min LOD as well if we wanted to

1249
01:10:07,488 --> 01:10:15,529
write and what that saying is like and

1250
01:10:13,340 --> 01:10:19,039
we will just set max by itself first but

1251
01:10:15,529 --> 01:10:21,979
what those are saying is when you go to

1252
01:10:19,039 --> 01:10:24,619
compute which MIT level to look from I

1253
01:10:21,979 --> 01:10:27,439
want you to clamp the values between min

1254
01:10:24,619 --> 01:10:30,529
and Max so that way like let's say that

1255
01:10:27,439 --> 01:10:32,929
I still wanted MIT mapping to occur so I

1256
01:10:30,529 --> 01:10:36,319
was gonna leave filtering on but I only

1257
01:10:32,930 --> 01:10:37,640
had you know to mid flap map levels or

1258
01:10:36,319 --> 01:10:39,679
something so I wanted to make sure it

1259
01:10:37,640 --> 01:10:41,450
would just stop after it went you know

1260
01:10:39,680 --> 01:10:43,220
to like mid level one or something and

1261
01:10:41,449 --> 01:10:44,510
not ever choose MIT level 2 because

1262
01:10:43,220 --> 01:10:46,699
there is no MIT level 2 or something

1263
01:10:44,510 --> 01:10:51,650
like that so that's what meaning max LOD

1264
01:10:46,699 --> 01:10:53,630
allows you to do that's all that is so

1265
01:10:51,649 --> 01:11:01,639
it looks like that's not a defined in

1266
01:10:53,630 --> 01:11:06,220
the base level open jail I guess so I'll

1267
01:11:01,640 --> 01:11:06,220
just grab them it's no big deal

1268
01:11:10,010 --> 01:11:16,230
there they are so we've got those in

1269
01:11:12,630 --> 01:11:18,600
there from play with them and again if

1270
01:11:16,229 --> 01:11:21,238
this works that's majorly busted I don't

1271
01:11:18,600 --> 01:11:25,380
think it's actually gonna yeah and it

1272
01:11:21,238 --> 01:11:30,209
didn't I that would work in the case

1273
01:11:25,380 --> 01:11:36,060
again we're filtering was actually

1274
01:11:30,210 --> 01:11:37,649
applied oh wait nope nope we haven't

1275
01:11:36,060 --> 01:11:39,570
really tested it yet let's run that test

1276
01:11:37,649 --> 01:11:47,969
again I've got to set it to three texts

1277
01:11:39,569 --> 01:11:49,399
3d alright so let's try turning the

1278
01:11:47,969 --> 01:12:00,270
filter off first

1279
01:11:49,399 --> 01:12:02,509
see how that goes so basically I have no

1280
01:12:00,270 --> 01:12:05,550
idea why that's the case

1281
01:12:02,510 --> 01:12:10,889
we didn't textile fetch is not supposed

1282
01:12:05,550 --> 01:12:13,219
to apply any filtering am I wrong about

1283
01:12:10,889 --> 01:12:13,219
this

1284
01:12:27,639 --> 01:12:31,139
I kind of want a

1285
01:12:37,579 --> 01:12:45,050
I mean it's Texel fetch it is never

1286
01:12:41,270 --> 01:12:46,370
supposed to filter anything turning the

1287
01:12:45,050 --> 01:12:49,730
filter on and off should do absolutely

1288
01:12:46,369 --> 01:12:57,349
nothing it performs a look up of a

1289
01:12:49,729 --> 01:12:59,929
single Texel what's it gonna filter how

1290
01:12:57,350 --> 01:13:03,730
do you filter a single Texel value you

1291
01:12:59,930 --> 01:13:03,730
don't have anything to blend it with I

1292
01:13:07,420 --> 01:13:13,970
don't know what to say that seems

1293
01:13:12,020 --> 01:13:16,130
completely nuts to me we don't have to

1294
01:13:13,970 --> 01:13:19,280
set min max laud because turning filter

1295
01:13:16,130 --> 01:13:20,840
off was sufficient and that's the more

1296
01:13:19,279 --> 01:13:26,960
reasonable thing to do over there I

1297
01:13:20,840 --> 01:13:31,460
think but that's ridiculous like why

1298
01:13:26,960 --> 01:13:33,140
would that be happening but anyway like

1299
01:13:31,460 --> 01:13:34,250
I say in stack overflow no problem as

1300
01:13:33,140 --> 01:13:36,140
long as they give you the right answer

1301
01:13:34,250 --> 01:13:37,760
and that was I mean that was more that

1302
01:13:36,140 --> 01:13:38,930
was a good suggestion from Stack

1303
01:13:37,760 --> 01:13:41,420
Overflow even though I'm not using

1304
01:13:38,930 --> 01:13:42,590
exactly what they said to do but they

1305
01:13:41,420 --> 01:13:45,710
were suggesting that somehow it was

1306
01:13:42,590 --> 01:13:47,539
getting filtered I don't know how it was

1307
01:13:45,710 --> 01:13:50,300
getting filtered I would love someone I

1308
01:13:47,539 --> 01:13:53,630
would love an OpenGL person to tell me

1309
01:13:50,300 --> 01:13:55,880
what that was supposed to be because if

1310
01:13:53,630 --> 01:13:59,390
you're doing a textile fetch why is it

1311
01:13:55,880 --> 01:14:02,510
applying filtering it's explicitly never

1312
01:13:59,390 --> 01:14:05,450
supposed to apply filtering if you're

1313
01:14:02,510 --> 01:14:11,710
fetching a Texel that's why it's called

1314
01:14:05,449 --> 01:14:16,059
texture Texel fetch texture that call

1315
01:14:11,710 --> 01:14:18,319
that applies filtering this does not

1316
01:14:16,060 --> 01:14:21,890
anyway I'll turn off filtering on all of

1317
01:14:18,319 --> 01:14:24,469
these because that same bug would happen

1318
01:14:21,890 --> 01:14:26,510
again with the Texel fetch I don't so

1319
01:14:24,470 --> 01:14:28,570
what about our other textile fetch we

1320
01:14:26,510 --> 01:14:31,489
have a depth textile fetch that we do

1321
01:14:28,569 --> 01:14:33,019
should we be worried about that one are

1322
01:14:31,489 --> 01:14:35,929
we getting incorrect results in other

1323
01:14:33,020 --> 01:14:38,320
places because of this as well like I

1324
01:14:35,930 --> 01:14:38,320
don't know

1325
01:14:40,729 --> 01:14:48,809
it's a little disquieting right alright

1326
01:14:47,189 --> 01:14:52,439
well now we're actually getting the

1327
01:14:48,810 --> 01:14:58,800
lookups that we expected it's messed up

1328
01:14:52,439 --> 01:15:05,149
as that might be and like is that

1329
01:14:58,800 --> 01:15:05,150
specified somewhere because it better be

1330
01:15:06,319 --> 01:15:10,920
if they just arbitrarily make it so that

1331
01:15:09,359 --> 01:15:13,019
it returns black if you don't turn off

1332
01:15:10,920 --> 01:15:21,420
filtering even though filtering is not

1333
01:15:13,020 --> 01:15:24,500
applied I do not know what to say here's

1334
01:15:21,420 --> 01:15:24,500
the GL specification

1335
01:15:43,939 --> 01:15:53,090
so here's the texture stuff that's in

1336
01:15:47,149 --> 01:15:54,039
here coordinate rapping and textual

1337
01:15:53,090 --> 01:15:57,119
selection

1338
01:15:54,039 --> 01:15:57,118
[Music]

1339
01:16:16,788 --> 01:16:28,868
I don't know if this overtly discusses

1340
01:16:20,719 --> 01:16:28,868
Texel fetch in here which is a problem

1341
01:16:39,559 --> 01:16:44,409
because I don't know well let me see if

1342
01:16:42,078 --> 01:16:44,408
fetch

1343
01:16:51,020 --> 01:16:55,390
ever really talks about it

1344
01:17:08,220 --> 01:17:12,270
so

1345
01:17:09,109 --> 01:17:12,269
[Music]

1346
01:17:14,510 --> 01:17:20,110
this is talking about buffer textures

1347
01:17:16,880 --> 01:17:26,719
which aren't really the same thing but

1348
01:17:20,109 --> 01:17:29,319
I'm just looking to see if there's any

1349
01:17:26,719 --> 01:17:29,319
like hint

1350
01:17:36,250 --> 01:17:40,329
Effects of completeness on texture

1351
01:17:38,229 --> 01:17:41,949
application texture lookup and texture

1352
01:17:40,329 --> 01:17:43,329
fetch operations performed in shaders

1353
01:17:41,949 --> 01:17:44,679
are affected by completeness of the

1354
01:17:43,329 --> 01:17:52,769
texture being sampled as described in

1355
01:17:44,680 --> 01:17:52,770
sections 11 1 3 5 and 15 to 1 okay

1356
01:18:09,409 --> 01:18:14,590
this is talking about full texture

1357
01:18:12,140 --> 01:18:14,590
fetches

1358
01:18:29,828 --> 01:18:32,488
you

1359
01:18:37,079 --> 01:18:42,109
it really just does not discuss fetches

1360
01:18:48,639 --> 01:18:54,719
so it looks like the I guess what I

1361
01:18:52,118 --> 01:18:59,368
would say is this is I guess the

1362
01:18:54,719 --> 01:18:59,368
paragraph that's causing the problem a

1363
01:19:02,279 --> 01:19:06,130
texture is said to be complete if all

1364
01:19:04,479 --> 01:19:07,209
the image arrays and textured parameters

1365
01:19:06,130 --> 01:19:08,679
required to utilize the texture

1366
01:19:07,210 --> 01:19:10,989
protection operation are consistently

1367
01:19:08,679 --> 01:19:12,880
defined the definition of completeness

1368
01:19:10,988 --> 01:19:14,709
varies depending on texture definitely

1369
01:19:12,880 --> 01:19:15,969
and type four one two and three

1370
01:19:14,710 --> 01:19:18,880
dimensional in one or two dimensional

1371
01:19:15,969 --> 01:19:26,050
texture two extra mipmap complete if all

1372
01:19:18,880 --> 01:19:31,179
the flan hold true so this is probably

1373
01:19:26,050 --> 01:19:33,820
the problem right it's probably the case

1374
01:19:31,179 --> 01:19:35,889
that even though Texel fetch does not

1375
01:19:33,819 --> 01:19:38,198
apply filtering it says that if the

1376
01:19:35,889 --> 01:19:43,420
texture is not complete it returns zero

1377
01:19:38,198 --> 01:19:45,279
zero one zero zero zero one right so it

1378
01:19:43,420 --> 01:19:48,639
seems like it behooves us to literally

1379
01:19:45,279 --> 01:19:51,399
specify all of this stuff about the

1380
01:19:48,639 --> 01:19:53,139
texture I don't even know according to

1381
01:19:51,399 --> 01:20:05,618
that it seems like we would actually

1382
01:19:53,139 --> 01:20:09,489
want to do these as well that makes

1383
01:20:05,618 --> 01:20:13,329
absolutely no sense to me but that I'm

1384
01:20:09,488 --> 01:20:16,959
I'm that seems like the paragraph that's

1385
01:20:13,329 --> 01:20:19,600
the problem because technically what

1386
01:20:16,960 --> 01:20:22,739
does it say about filtering in here

1387
01:20:19,600 --> 01:20:22,739
[Music]

1388
01:20:26,579 --> 01:20:29,979
using the proceeding to finish the

1389
01:20:28,390 --> 01:20:32,350
texture is complete unless any of the

1390
01:20:29,979 --> 01:20:36,579
function so true the internal form of

1391
01:20:32,350 --> 01:20:38,200
the texture is integer weight but that

1392
01:20:36,579 --> 01:20:43,329
means that integer texture can never be

1393
01:20:38,199 --> 01:20:44,739
complete using a texture is complete

1394
01:20:43,329 --> 01:20:46,539
unless any of the following conditions

1395
01:20:44,739 --> 01:20:50,800
hold true the internal form of textures

1396
01:20:46,539 --> 01:20:54,279
integer O and either here we go and

1397
01:20:50,800 --> 01:20:56,829
either the nice grammar there and either

1398
01:20:54,279 --> 01:20:59,019
the and either the magnification filter

1399
01:20:56,829 --> 01:21:01,420
is not nearest or the minification

1400
01:20:59,020 --> 01:21:07,060
filter is nearest or nearest mipmap

1401
01:21:01,420 --> 01:21:12,300
linear in a mira smith map nearest so

1402
01:21:07,060 --> 01:21:12,300
actually never mind we don't need these

1403
01:21:15,659 --> 01:21:26,349
that is what was screwing us that one

1404
01:21:18,579 --> 01:21:32,199
line in the spec in a in a how long is

1405
01:21:26,350 --> 01:21:34,750
this specification how many pages 758 so

1406
01:21:32,199 --> 01:21:38,039
an operation that easily could complete

1407
01:21:34,750 --> 01:21:41,710
that's just a access into an array

1408
01:21:38,039 --> 01:21:45,460
failed and caused us like three hours of

1409
01:21:41,710 --> 01:21:49,659
debugging time because even though no

1410
01:21:45,460 --> 01:21:52,090
filtering was requested the spec says

1411
01:21:49,659 --> 01:21:55,269
that you have to set the mode to nearest

1412
01:21:52,090 --> 01:22:00,970
for an integer texture even if you never

1413
01:21:55,270 --> 01:22:03,160
call the filtering function why do I

1414
01:22:00,970 --> 01:22:06,369
program GPUs I should go work in a bank

1415
01:22:03,159 --> 01:22:09,609
of course they need to program GPUs now

1416
01:22:06,369 --> 01:22:13,930
to do Bitcoin mining anyway absolutely

1417
01:22:09,609 --> 01:22:15,219
abhorrent everyone should be fired and I

1418
01:22:13,930 --> 01:22:18,909
would have fired them but of course I'm

1419
01:22:15,220 --> 01:22:22,420
not in charge so alright hey we can

1420
01:22:18,909 --> 01:22:24,189
execute the array lookup now that we set

1421
01:22:22,420 --> 01:22:26,739
a bunch of random crap that doesn't

1422
01:22:24,189 --> 01:22:28,989
affect the array lookup happy birthday

1423
01:22:26,739 --> 01:22:31,300
all right so now that we can actually

1424
01:22:28,989 --> 01:22:36,489
look this up we can go back to our text

1425
01:22:31,300 --> 01:22:38,529
Texel function and so axially so in this

1426
01:22:36,489 --> 01:22:39,219
case the stack overflow information was

1427
01:22:38,529 --> 01:22:43,269
actually

1428
01:22:39,220 --> 01:22:45,909
be wrong but that's okay because it gave

1429
01:22:43,270 --> 01:22:47,320
us like a hint about something to check

1430
01:22:45,909 --> 01:22:49,000
and we tried some other things that I

1431
01:22:47,319 --> 01:22:51,639
happen to know I should also check and

1432
01:22:49,000 --> 01:22:53,649
those work so that's good

1433
01:22:51,640 --> 01:23:02,860
so Stack Overflow actually gave us a win

1434
01:22:53,649 --> 01:23:05,309
there if if indirectly and one should

1435
01:23:02,859 --> 01:23:08,559
get credit where credit is due

1436
01:23:05,310 --> 01:23:10,840
so all right back to our story our

1437
01:23:08,560 --> 01:23:14,230
textile fetch is now magically returning

1438
01:23:10,840 --> 01:23:16,210
the correct values because it's been

1439
01:23:14,229 --> 01:23:18,819
completely unrelated unnecessary code

1440
01:23:16,210 --> 01:23:20,470
that occurred somewhere else now that we

1441
01:23:18,819 --> 01:23:21,880
actually have those values coming back

1442
01:23:20,470 --> 01:23:23,590
we should be able to actually start

1443
01:23:21,880 --> 01:23:27,489
processing our lighting elements now

1444
01:23:23,590 --> 01:23:29,680
which is pretty effing exciting so let's

1445
01:23:27,489 --> 01:23:36,179
go back and actually see if these values

1446
01:23:29,680 --> 01:23:40,030
are are now operating correctly alright

1447
01:23:36,180 --> 01:23:41,890
so if we take a look I'm starting to

1448
01:23:40,029 --> 01:23:43,599
think that maybe we want all these to be

1449
01:23:41,890 --> 01:23:46,390
integer values instead of floating-point

1450
01:23:43,600 --> 01:23:47,620
values and then we'll just convert them

1451
01:23:46,390 --> 01:23:50,140
to floating-point values in the shader

1452
01:23:47,619 --> 01:23:53,279
so what I'm gonna do here is I'm gonna

1453
01:23:50,140 --> 01:24:00,730
make a little like a little bit of like

1454
01:23:53,279 --> 01:24:02,739
a Bhutanese mu here and say that because

1455
01:24:00,729 --> 01:24:04,750
we're sampling these as energy textures

1456
01:24:02,739 --> 01:24:06,939
I'd like to submit them all as integer

1457
01:24:04,750 --> 01:24:09,729
textures so maybe what I'll do here is

1458
01:24:06,939 --> 01:24:12,960
say like okay this lighting textile

1459
01:24:09,729 --> 01:24:16,149
value that has the next parameter there

1460
01:24:12,960 --> 01:24:17,710
and we've got this position you know

1461
01:24:16,149 --> 01:24:19,839
maybe we can code the position well

1462
01:24:17,710 --> 01:24:22,810
actually now you know nothing about that

1463
01:24:19,840 --> 01:24:24,760
that's probably not necessary but this

1464
01:24:22,810 --> 01:24:27,100
next parameter here that really needs to

1465
01:24:24,760 --> 01:24:28,750
be specified as an f32 so that it'll be

1466
01:24:27,100 --> 01:24:32,920
homogeneous that's really all I want is

1467
01:24:28,750 --> 01:24:34,720
it for me to be a modulus right so let's

1468
01:24:32,920 --> 01:24:36,430
start by making that be the case so when

1469
01:24:34,720 --> 01:24:38,350
we get an L value here that's coming in

1470
01:24:36,430 --> 01:24:39,840
I'm just gonna cast it to an f32 we know

1471
01:24:38,350 --> 01:24:42,370
that it's never more than 16 bits wide

1472
01:24:39,840 --> 01:24:45,039
it could go up to 24 bits wide and it

1473
01:24:42,369 --> 01:24:46,329
would be fine so that's that's all good

1474
01:24:45,039 --> 01:24:50,109
we don't have a problem there we can

1475
01:24:46,329 --> 01:24:52,689
just do that cast and it should cast in

1476
01:24:50,109 --> 01:24:55,089
and out no problem so

1477
01:24:52,689 --> 01:24:56,710
that's all good we should be able to

1478
01:24:55,090 --> 01:24:58,900
inspect these values now and see that

1479
01:24:56,710 --> 01:25:00,039
they're actually correct but in order to

1480
01:24:58,899 --> 01:25:01,779
do that we have to get them to actually

1481
01:25:00,039 --> 01:25:04,029
compile the shaders so in order to get

1482
01:25:01,779 --> 01:25:05,349
them actually compound the shaders what

1483
01:25:04,029 --> 01:25:06,759
I'm going to do is I'm gonna now that

1484
01:25:05,350 --> 01:25:08,380
we've verified that our volume texture

1485
01:25:06,760 --> 01:25:09,940
is at least somewhat correct I'm gonna

1486
01:25:08,380 --> 01:25:12,159
go ahead and get rid of the part where

1487
01:25:09,939 --> 01:25:13,569
we actually nerfed the volume texture

1488
01:25:12,159 --> 01:25:16,840
and I'm gonna let the volume texture

1489
01:25:13,569 --> 01:25:19,659
actually take on the values that it

1490
01:25:16,840 --> 01:25:22,060
should have so when we start here what

1491
01:25:19,659 --> 01:25:24,189
we should see now is we should be able

1492
01:25:22,060 --> 01:25:26,350
to figure out a way to visualize what

1493
01:25:24,189 --> 01:25:29,589
values in our voxel are actually filled

1494
01:25:26,350 --> 01:25:31,120
and which ones aren't right so when

1495
01:25:29,590 --> 01:25:33,310
we're setting these lookup values here

1496
01:25:31,119 --> 01:25:36,099
where we pack it index into the lookup

1497
01:25:33,310 --> 01:25:42,820
value we should now be able to write and

1498
01:25:36,100 --> 01:25:45,130
you know so if you take a look at this

1499
01:25:42,819 --> 01:25:47,679
this is if I'm stuffing values with the

1500
01:25:45,130 --> 01:25:49,449
predictable stuff if I now actually

1501
01:25:47,680 --> 01:25:51,520
change it so that we're keeping our

1502
01:25:49,448 --> 01:25:52,929
values the same the problem is we're

1503
01:25:51,520 --> 01:25:54,580
gonna get mostly black because we don't

1504
01:25:52,930 --> 01:25:57,039
have many values that are particularly

1505
01:25:54,579 --> 01:26:00,279
high what I can go in here and do though

1506
01:25:57,039 --> 01:26:02,469
is say like alright I know where we have

1507
01:26:00,279 --> 01:26:04,479
values that range roughly from zero to a

1508
01:26:02,469 --> 01:26:06,939
thousand or somewhere in there let me

1509
01:26:04,479 --> 01:26:09,099
divide by a much lower number so that I

1510
01:26:06,939 --> 01:26:11,349
should be able to see some squares in

1511
01:26:09,100 --> 01:26:13,300
here that actually have information in

1512
01:26:11,350 --> 01:26:16,630
them and so you can kind of see your

1513
01:26:13,300 --> 01:26:19,000
that occurring right where we're looking

1514
01:26:16,630 --> 01:26:22,300
up into the voxel and getting some green

1515
01:26:19,000 --> 01:26:26,380
in there right where these lights

1516
01:26:22,300 --> 01:26:29,260
actually are so okay that's all well and

1517
01:26:26,380 --> 01:26:30,760
good that's that's everyone's fine with

1518
01:26:29,260 --> 01:26:35,699
that and happy and dancing around

1519
01:26:30,760 --> 01:26:35,699
jiggling like a little monkey on a chain

1520
01:26:38,430 --> 01:26:43,250
alright

1521
01:26:40,960 --> 01:26:44,539
so now we know that we're actually

1522
01:26:43,250 --> 01:26:45,800
looking up into the voxel meaning

1523
01:26:44,539 --> 01:26:47,300
actually see things that are coming out

1524
01:26:45,800 --> 01:26:50,289
in the voxel we can start to get rid of

1525
01:26:47,300 --> 01:26:54,829
this code a little bit here and say okay

1526
01:26:50,289 --> 01:26:56,118
let's take the the fetch value that we

1527
01:26:54,829 --> 01:26:58,189
actually got out of here and and

1528
01:26:56,118 --> 01:27:01,759
actually start using it again like we

1529
01:26:58,189 --> 01:27:05,919
were trying to use it before as he as a

1530
01:27:01,760 --> 01:27:08,090
ivic right and see if we can actually

1531
01:27:05,920 --> 01:27:09,230
make the or as an integer I should say

1532
01:27:08,090 --> 01:27:11,569
and and let's see if we can actually

1533
01:27:09,229 --> 01:27:13,579
make that part one so if we were to cast

1534
01:27:11,569 --> 01:27:16,759
the red channel of this thing to an

1535
01:27:13,579 --> 01:27:19,039
integer and then we were to go ahead and

1536
01:27:16,760 --> 01:27:20,929
actually start using it for some for

1537
01:27:19,039 --> 01:27:24,800
some lookup purposes here we go with

1538
01:27:20,929 --> 01:27:27,109
that if you come in here and we grab out

1539
01:27:24,800 --> 01:27:29,329
a light I instead of using the light

1540
01:27:27,109 --> 01:27:32,539
connect stuff I'm not gonna actually do

1541
01:27:29,329 --> 01:27:34,130
that after the Texel fetches I'm just

1542
01:27:32,539 --> 01:27:36,469
gonna use whatever this light color was

1543
01:27:34,130 --> 01:27:40,100
here that we stuffed in and we're gonna

1544
01:27:36,469 --> 01:27:42,829
use that light color right now I'm gonna

1545
01:27:40,100 --> 01:27:44,989
keep I'm gonna do exactly what this was

1546
01:27:42,829 --> 01:27:46,969
saying here to do which is I'm just

1547
01:27:44,988 --> 01:27:48,709
gonna stuff pure green in there in fact

1548
01:27:46,969 --> 01:27:51,230
I'll I'll switch it to pure blue for now

1549
01:27:48,710 --> 01:27:53,420
you're using green before I minister

1550
01:27:51,229 --> 01:27:56,178
just to clear blue anywhere that it did

1551
01:27:53,420 --> 01:27:57,980
find a light value we want to make blue

1552
01:27:56,179 --> 01:28:03,500
and anywhere that it didn't find a light

1553
01:27:57,979 --> 01:28:17,509
value we want to not make blue what was

1554
01:28:03,500 --> 01:28:19,429
the problem : yeah off you go

1555
01:28:17,510 --> 01:28:21,500
and so that's what we expect to see

1556
01:28:19,429 --> 01:28:24,260
there's all the places where we actually

1557
01:28:21,500 --> 01:28:28,429
had lighting elements sitting around and

1558
01:28:24,260 --> 01:28:30,829
that's totally fine so now we come

1559
01:28:28,429 --> 01:28:33,560
through here and we textile fetch

1560
01:28:30,829 --> 01:28:35,630
ourselves some values off of those

1561
01:28:33,560 --> 01:28:37,639
integers and so now we should do is

1562
01:28:35,630 --> 01:28:39,618
actually try to see what those are so

1563
01:28:37,639 --> 01:28:41,719
I'm gonna actually keep the light sea

1564
01:28:39,618 --> 01:28:44,210
color here I'm not gonna loop over the

1565
01:28:41,719 --> 01:28:46,609
various lights that may have been there

1566
01:28:44,210 --> 01:28:49,069
I'm just gonna let it do one of those

1567
01:28:46,609 --> 01:28:51,289
and see what we get

1568
01:28:49,069 --> 01:28:54,079
and so what we get here is we can kind

1569
01:28:51,289 --> 01:28:57,949
of see we have some varying colors of

1570
01:28:54,079 --> 01:29:00,199
red I don't know if that's what we would

1571
01:28:57,949 --> 01:29:01,789
expect I think it is because I remember

1572
01:29:00,199 --> 01:29:07,849
correctly yeah we set those two

1573
01:29:01,789 --> 01:29:11,840
particularly ludicrous values here

1574
01:29:07,850 --> 01:29:14,120
they're just gonna be 4096 plus L should

1575
01:29:11,840 --> 01:29:16,039
that be very red

1576
01:29:14,119 --> 01:29:20,090
so it's au 32 so it's gonna be

1577
01:29:16,039 --> 01:29:21,949
interpreted as RGB a yeah

1578
01:29:20,090 --> 01:29:24,350
so I actually feel like there should

1579
01:29:21,949 --> 01:29:28,250
have been maybe some green and blue in

1580
01:29:24,350 --> 01:29:32,900
there though and it doesn't look like

1581
01:29:28,250 --> 01:29:34,939
there was so that's a little odd I'm

1582
01:29:32,899 --> 01:29:37,069
gonna go ahead and stuff this value with

1583
01:29:34,939 --> 01:29:39,799
a again structured art just by itself

1584
01:29:37,069 --> 01:29:42,889
just to make sure that I'm getting what

1585
01:29:39,800 --> 01:29:45,199
I expect out of here from a compact

1586
01:29:42,890 --> 01:29:50,300
color so what I'm gonna do is I'm gonna

1587
01:29:45,199 --> 01:29:56,899
specify in here I'm gonna specify

1588
01:29:50,300 --> 01:29:59,570
something like 4 4 8 8 FF right so here

1589
01:29:56,899 --> 01:30:03,409
I've got something that again in RGB a

1590
01:29:59,569 --> 01:30:06,769
order of course I don't remember what we

1591
01:30:03,409 --> 01:30:12,590
specified this being so maybe I should

1592
01:30:06,770 --> 01:30:18,080
go actually verify that first but you

1593
01:30:12,590 --> 01:30:20,449
know so here's the lighting see this is

1594
01:30:18,079 --> 01:30:23,600
specified as storing an RGB a a internal

1595
01:30:20,449 --> 01:30:26,750
and RGB a direct down so what I would

1596
01:30:23,600 --> 01:30:28,970
expect yeah is the first byte again this

1597
01:30:26,750 --> 01:30:31,579
is into a little endian so this oxo or

1598
01:30:28,970 --> 01:30:34,130
matte here is again gonna be read from

1599
01:30:31,579 --> 01:30:37,670
the bottom forward so it's going to be F

1600
01:30:34,130 --> 01:30:39,319
F is the our 8 8 is the G and 4 4 is the

1601
01:30:37,670 --> 01:30:42,980
B so we should be getting kind of an

1602
01:30:39,319 --> 01:30:47,689
orangish tan color in here hopefully

1603
01:30:42,979 --> 01:30:50,629
that's the goal anyway that's bright you

1604
01:30:47,689 --> 01:30:53,869
know has bright red channel halfway

1605
01:30:50,630 --> 01:30:55,970
green channel and yeah there's our tan

1606
01:30:53,869 --> 01:30:57,939
so that's what we expect alright so

1607
01:30:55,970 --> 01:31:00,980
those values seem to be reading out

1608
01:30:57,939 --> 01:31:02,960
correctly as well what I can do here is

1609
01:31:00,979 --> 01:31:05,419
again just make sure that they're

1610
01:31:02,960 --> 01:31:07,179
writing out in order here this will give

1611
01:31:05,420 --> 01:31:10,420
me definitively

1612
01:31:07,179 --> 01:31:11,469
varying shades of red and it does so I'm

1613
01:31:10,420 --> 01:31:14,230
okay with that

1614
01:31:11,469 --> 01:31:20,560
the 4,096 must just have wrapped in a

1615
01:31:14,229 --> 01:31:22,299
nun convenient way had some little bits

1616
01:31:20,560 --> 01:31:24,390
and green that just got truncate or

1617
01:31:22,300 --> 01:31:27,550
something like that it doesn't matter

1618
01:31:24,390 --> 01:31:29,020
all right so anyway there's this

1619
01:31:27,550 --> 01:31:30,550
verifying that those values were

1620
01:31:29,020 --> 01:31:32,110
actually coming out somewhat correctly

1621
01:31:30,550 --> 01:31:35,560
unfortunately this stuff here with the

1622
01:31:32,109 --> 01:31:38,139
p-values and that sort of thing is gonna

1623
01:31:35,560 --> 01:31:40,060
be harder to verify but we can do is use

1624
01:31:38,140 --> 01:31:42,429
the p-values as a color if we want to

1625
01:31:40,060 --> 01:31:45,370
and verify that those are getting looked

1626
01:31:42,429 --> 01:31:49,090
up correctly and so what we what we

1627
01:31:45,369 --> 01:31:50,920
could do there is say look alright maybe

1628
01:31:49,090 --> 01:31:52,869
we just take something cure to see

1629
01:31:50,920 --> 01:31:54,010
whether whether these values are getting

1630
01:31:52,869 --> 01:31:56,380
stored the way that we think they're

1631
01:31:54,010 --> 01:31:58,929
getting stored so again if I were to set

1632
01:31:56,380 --> 01:32:00,520
this value to something predictable and

1633
01:31:58,929 --> 01:32:02,649
I'll set it to basically the same value

1634
01:32:00,520 --> 01:32:04,050
that we were setting to before more or

1635
01:32:02,649 --> 01:32:06,219
less but this time in floating-point

1636
01:32:04,050 --> 01:32:10,989
what I should be able to do is come over

1637
01:32:06,219 --> 01:32:13,300
to the shader here and in the lookup

1638
01:32:10,988 --> 01:32:15,218
sampler part of the code where we do

1639
01:32:13,300 --> 01:32:17,140
this what I could do is say all right

1640
01:32:15,219 --> 01:32:19,179
when we look up this light beam next

1641
01:32:17,140 --> 01:32:21,070
stuff if I set this instead of from the

1642
01:32:19,179 --> 01:32:23,289
light color if I set it to the light P

1643
01:32:21,069 --> 01:32:26,380
what I should be able to see now is that

1644
01:32:23,289 --> 01:32:28,810
that RGB value is coming out as we would

1645
01:32:26,380 --> 01:32:31,119
expect to come out and it does look like

1646
01:32:28,810 --> 01:32:35,380
it more or less is so that's good news

1647
01:32:31,119 --> 01:32:36,969
as well so this loop should now be

1648
01:32:35,380 --> 01:32:38,890
functionally if we were passing down

1649
01:32:36,969 --> 01:32:42,399
correct values we should be able to do

1650
01:32:38,890 --> 01:32:43,929
something with it that's useful such as

1651
01:32:42,399 --> 01:32:54,219
summing up the lighting or do something

1652
01:32:43,929 --> 01:32:55,569
doing you know who knows what so what we

1653
01:32:54,219 --> 01:32:57,130
want to do here is come up with some

1654
01:32:55,569 --> 01:32:59,469
kind of a way that we can sample our

1655
01:32:57,130 --> 01:33:01,179
lighting values in the while loop and

1656
01:32:59,469 --> 01:33:03,460
creating the extra while loop that walks

1657
01:33:01,179 --> 01:33:05,130
through them and so if we wanted to do

1658
01:33:03,460 --> 01:33:07,779
that let's just start with the basics

1659
01:33:05,130 --> 01:33:11,679
first of all let's actually go back and

1660
01:33:07,779 --> 01:33:15,519
and not put Nerf values in there let's

1661
01:33:11,679 --> 01:33:16,510
put the real values in there and what

1662
01:33:15,520 --> 01:33:19,750
we're gonna do here is we're going to

1663
01:33:16,510 --> 01:33:21,010
say okay while the lighting index is not

1664
01:33:19,750 --> 01:33:23,408
equal to zero

1665
01:33:21,010 --> 01:33:26,019
we're gonna loop through here right and

1666
01:33:23,408 --> 01:33:27,819
use the next parameter as we go so we're

1667
01:33:26,019 --> 01:33:30,940
kind of moving through the next

1668
01:33:27,819 --> 01:33:33,788
parameter says we go what we're gonna do

1669
01:33:30,939 --> 01:33:35,618
here is say alright when we do our light

1670
01:33:33,788 --> 01:33:38,559
beam X and do our textile fetch out of

1671
01:33:35,618 --> 01:33:42,759
here we're gonna get the next value and

1672
01:33:38,559 --> 01:33:43,929
the position of the light and that's you

1673
01:33:42,760 --> 01:33:45,729
know something we'll use for our

1674
01:33:43,929 --> 01:33:48,099
lighting calculation later we're also

1675
01:33:45,729 --> 01:33:49,958
gonna get the lighting index of the next

1676
01:33:48,099 --> 01:33:51,550
light to look at and that will keep us

1677
01:33:49,958 --> 01:33:53,408
going in our while loop eventually that

1678
01:33:51,550 --> 01:33:55,869
should return zero and then we'll exit

1679
01:33:53,408 --> 01:33:59,018
out of the loop the light color will

1680
01:33:55,868 --> 01:34:02,319
come presumably from here and for now we

1681
01:33:59,019 --> 01:34:03,550
can just leave it like that and just see

1682
01:34:02,319 --> 01:34:05,708
whether this works at all because we

1683
01:34:03,550 --> 01:34:07,420
don't know whether it will or not it

1684
01:34:05,708 --> 01:34:09,038
certainly looks like it's working and

1685
01:34:07,420 --> 01:34:10,569
not only does it look like it's working

1686
01:34:09,038 --> 01:34:12,309
but it looks like we're actually getting

1687
01:34:10,569 --> 01:34:14,408
the colors we would expect out of our

1688
01:34:12,309 --> 01:34:15,788
lights here right as these point

1689
01:34:14,408 --> 01:34:17,618
samplers now we're not actually

1690
01:34:15,788 --> 01:34:19,149
computing any lighting from them we're

1691
01:34:17,618 --> 01:34:20,618
just setting the light directly and

1692
01:34:19,149 --> 01:34:23,138
we're not even handling and if we do get

1693
01:34:20,618 --> 01:34:25,598
multiple light sources in a region we're

1694
01:34:23,139 --> 01:34:27,880
not really getting anything useful from

1695
01:34:25,599 --> 01:34:33,909
that so that's not as good but that's

1696
01:34:27,880 --> 01:34:36,130
okay because we don't actually we ever

1697
01:34:33,908 --> 01:34:39,549
actually tried to get this to work in

1698
01:34:36,130 --> 01:34:47,219
you know any kind of sane way yet all

1699
01:34:39,550 --> 01:34:49,719
right so the first thing I would say is

1700
01:34:47,219 --> 01:34:52,328
looking at the density of that lighting

1701
01:34:49,719 --> 01:34:56,288
sampling it does look like the lighting

1702
01:34:52,328 --> 01:34:58,058
grid is too dense and I don't really

1703
01:34:56,288 --> 01:34:59,469
want it to be that dense cuz it's just

1704
01:34:58,059 --> 01:35:02,800
gonna cause us to have to do way too

1705
01:34:59,469 --> 01:35:04,269
many lookups to gather the lighting

1706
01:35:02,800 --> 01:35:06,458
samples that we want so the first thing

1707
01:35:04,269 --> 01:35:09,998
I'm gonna do here is I'm gonna go ahead

1708
01:35:06,458 --> 01:35:14,559
and drop this down a bit maybe you know

1709
01:35:09,998 --> 01:35:17,649
a much sparser grid would be a better

1710
01:35:14,559 --> 01:35:18,940
idea so that we're because so because

1711
01:35:17,649 --> 01:35:20,888
we're really not going to take that many

1712
01:35:18,939 --> 01:35:23,978
lighting samples so what I'd like to do

1713
01:35:20,889 --> 01:35:27,010
is drop this down maybe we'll do 64 by

1714
01:35:23,979 --> 01:35:29,559
64 or something like this just so

1715
01:35:27,010 --> 01:35:31,809
there's a lot less data in the voxels

1716
01:35:29,559 --> 01:35:34,079
right so I'm just I'm just cutting that

1717
01:35:31,809 --> 01:35:34,079
down

1718
01:35:34,329 --> 01:35:40,960
something more work course right so now

1719
01:35:38,859 --> 01:35:44,049
you can kind of see the size of these

1720
01:35:40,960 --> 01:35:47,079
things is considerably less small than

1721
01:35:44,050 --> 01:35:49,360
it was and that's more what I was going

1722
01:35:47,079 --> 01:35:51,100
for here because I don't want to be in a

1723
01:35:49,359 --> 01:35:54,039
position where I'm doing a tremendous

1724
01:35:51,100 --> 01:35:57,640
amount of sort of scatter gather that

1725
01:35:54,039 --> 01:35:58,479
may even that may be too much I don't

1726
01:35:57,640 --> 01:36:00,730
know

1727
01:35:58,479 --> 01:36:02,559
I'm gonna for now again I think just

1728
01:36:00,729 --> 01:36:06,059
drop it down even just a little more so

1729
01:36:02,560 --> 01:36:06,060
I'm gonna drop it down to oops

1730
01:36:07,180 --> 01:36:19,300
to a 32 by 32 and and let that do its

1731
01:36:15,310 --> 01:36:21,789
thing so those are some bigger light

1732
01:36:19,300 --> 01:36:24,460
values there it's a bigger you know

1733
01:36:21,789 --> 01:36:27,909
voxel lookup areas there which is what I

1734
01:36:24,460 --> 01:36:30,909
wanted and one of the things that you

1735
01:36:27,909 --> 01:36:34,479
can see is that our lighting sampling is

1736
01:36:30,909 --> 01:36:38,409
not dense enough to cover all of the

1737
01:36:34,479 --> 01:36:40,329
space with actual light right and that's

1738
01:36:38,409 --> 01:36:43,000
not great we want to make sure that we

1739
01:36:40,329 --> 01:36:44,890
have enough lighting samples in area to

1740
01:36:43,000 --> 01:36:47,829
fill all of our box holes and we're not

1741
01:36:44,890 --> 01:36:49,630
seeing that happen now I don't know why

1742
01:36:47,829 --> 01:36:52,149
that's happening necessarily there could

1743
01:36:49,630 --> 01:36:53,890
be two reasons that that's happening one

1744
01:36:52,149 --> 01:36:55,269
reason is that we're just not putting

1745
01:36:53,890 --> 01:36:57,820
enough lighting elements in enough

1746
01:36:55,270 --> 01:36:59,650
places and so that is obviously one

1747
01:36:57,819 --> 01:37:00,969
reason why that could occur the other

1748
01:36:59,649 --> 01:37:02,379
reason why that could occur is we just

1749
01:37:00,970 --> 01:37:04,960
have a bug in how we're filling the

1750
01:37:02,380 --> 01:37:07,270
voxel right we could have a bug where

1751
01:37:04,960 --> 01:37:09,279
we're just not placing it so I don't

1752
01:37:07,270 --> 01:37:11,320
know yet which one of those two it is

1753
01:37:09,279 --> 01:37:13,389
it's not super important that we do know

1754
01:37:11,319 --> 01:37:16,960
at the moment but you can kind of see

1755
01:37:13,390 --> 01:37:19,180
you know what's going on there for the

1756
01:37:16,960 --> 01:37:21,730
time now the interesting thing about

1757
01:37:19,180 --> 01:37:24,190
this right is this inside the shader

1758
01:37:21,729 --> 01:37:25,629
where we're doing our light walking we

1759
01:37:24,189 --> 01:37:28,419
can actually do something a little more

1760
01:37:25,630 --> 01:37:30,220
sophisticated here if we wanted to what

1761
01:37:28,420 --> 01:37:31,869
we can do is we can actually walk a

1762
01:37:30,220 --> 01:37:34,750
region around the voxel so we can

1763
01:37:31,869 --> 01:37:36,789
actually use an offset here if we wanted

1764
01:37:34,750 --> 01:37:39,579
to so for example once we floor this

1765
01:37:36,789 --> 01:37:43,930
voxel I here what we can do is we could

1766
01:37:39,579 --> 01:37:47,710
actually include in here a ability to do

1767
01:37:43,930 --> 01:37:49,390
this sample multiple time

1768
01:37:47,710 --> 01:37:55,140
on voxels in a lot of different

1769
01:37:49,390 --> 01:38:01,840
directions right so we can if we want to

1770
01:37:55,140 --> 01:38:06,130
brought in right this sort of search if

1771
01:38:01,840 --> 01:38:07,630
you will to look at neighboring texels

1772
01:38:06,130 --> 01:38:11,829
so instead of just sampling just one

1773
01:38:07,630 --> 01:38:14,920
texel we can sample the texels in like a

1774
01:38:11,829 --> 01:38:15,609
grid around us for example or anything

1775
01:38:14,920 --> 01:38:17,829
like that

1776
01:38:15,609 --> 01:38:19,029
so in order to do that what i think i'm

1777
01:38:17,829 --> 01:38:20,619
gonna do here is think i'm going to pull

1778
01:38:19,029 --> 01:38:25,689
this out into a function this thing

1779
01:38:20,619 --> 01:38:30,880
right here that's gonna just compute the

1780
01:38:25,689 --> 01:38:33,639
light for one of these so if we take a

1781
01:38:30,880 --> 01:38:35,050
look at this fragment code here if i

1782
01:38:33,640 --> 01:38:37,440
just introduce a function to the

1783
01:38:35,050 --> 01:38:42,489
fragment code where I'm just like okay

1784
01:38:37,439 --> 01:38:47,500
here is a thing that returns a vector e

1785
01:38:42,488 --> 01:38:50,559
which is like a sample voxel light or

1786
01:38:47,500 --> 01:38:53,020
something or maybe like something that

1787
01:38:50,560 --> 01:38:56,710
does maybe something like this some

1788
01:38:53,020 --> 01:39:02,350
voxel light and returns it back for and

1789
01:38:56,710 --> 01:39:06,939
I want it to take ni Veck 3 which is the

1790
01:39:02,350 --> 01:39:10,510
like position to sample app and it's

1791
01:39:06,939 --> 01:39:14,469
gonna return me you know sampled

1792
01:39:10,510 --> 01:39:16,300
lighting result right really wish we had

1793
01:39:14,469 --> 01:39:18,609
indentation here probably break these

1794
01:39:16,300 --> 01:39:22,000
out into separate files but I'm too lazy

1795
01:39:18,609 --> 01:39:24,369
to do so at the moment so what I want to

1796
01:39:22,000 --> 01:39:26,050
do here is basically sum up how many of

1797
01:39:24,369 --> 01:39:28,719
these we've gotten with like a waiting

1798
01:39:26,050 --> 01:39:30,730
value right so what I want to do is say

1799
01:39:28,719 --> 01:39:33,850
okay you know we're gonna return a

1800
01:39:30,729 --> 01:39:36,849
vector results here the results gonna

1801
01:39:33,850 --> 01:39:39,329
start at 0 I'm gonna grab the light I I

1802
01:39:36,850 --> 01:39:41,650
don't care about this fringing right now

1803
01:39:39,329 --> 01:39:43,420
this is something actually that probably

1804
01:39:41,649 --> 01:39:45,750
would just stay down here if we were

1805
01:39:43,420 --> 01:39:48,750
going to do that test in the future

1806
01:39:45,750 --> 01:39:48,750
right

1807
01:39:55,488 --> 01:39:59,779
and that's fine but what I want to do

1808
01:39:57,859 --> 01:40:01,219
here is say okay so I've got this

1809
01:39:59,779 --> 01:40:03,349
summation here where I'm gonna do some

1810
01:40:01,219 --> 01:40:05,750
voxel light and I want to basically take

1811
01:40:03,350 --> 01:40:07,850
all of this stuff where we do you know

1812
01:40:05,750 --> 01:40:09,649
the textile fetch and all that stuff I'm

1813
01:40:07,850 --> 01:40:12,289
gonna do all that and I'm going to sum

1814
01:40:09,649 --> 01:40:16,609
up the values as they come in I'm gonna

1815
01:40:12,289 --> 01:40:18,649
sum up the our GPS and I'm gonna put in

1816
01:40:16,609 --> 01:40:21,500
the Alpha Channel I'm just gonna put a

1817
01:40:18,649 --> 01:40:24,439
value that's indicative of how much like

1818
01:40:21,500 --> 01:40:27,109
that like how much actual content I

1819
01:40:24,439 --> 01:40:29,359
summed up and we don't really care about

1820
01:40:27,109 --> 01:40:31,849
that right now but we will care about

1821
01:40:29,359 --> 01:40:33,229
that eventually to normalize and

1822
01:40:31,850 --> 01:40:34,610
actually even right now we kind of want

1823
01:40:33,229 --> 01:40:35,928
to normalize that sum right because

1824
01:40:34,609 --> 01:40:39,738
we're sort of summing over a loop we

1825
01:40:35,929 --> 01:40:40,789
want to like normalize it down so what

1826
01:40:39,738 --> 01:40:43,369
I'm gonna do here is again I'm just

1827
01:40:40,789 --> 01:40:46,579
gonna do a very simple I'm gonna take

1828
01:40:43,369 --> 01:40:49,099
use light C I'm gonna make that equal to

1829
01:40:46,579 --> 01:40:51,649
well actually I guess I'll do something

1830
01:40:49,100 --> 01:40:54,530
slightly different there I'm gonna call

1831
01:40:51,649 --> 01:40:59,769
this some box a light thing I'm gonna

1832
01:40:54,529 --> 01:40:59,769
call that and I'm gonna get back a a

1833
01:41:02,469 --> 01:41:12,198
light some value that's a vector Y I

1834
01:41:08,658 --> 01:41:15,049
actually call it that BEC for I was

1835
01:41:12,198 --> 01:41:19,519
getting into shader land there so I'm

1836
01:41:15,050 --> 01:41:22,489
going to call it a v4 rather and what I

1837
01:41:19,520 --> 01:41:24,860
want to do here is when I pass this

1838
01:41:22,488 --> 01:41:27,049
voxel I value I'm expecting a sum to

1839
01:41:24,859 --> 01:41:30,710
come back what I want to do is I want to

1840
01:41:27,050 --> 01:41:32,929
compute the the lighting value by taking

1841
01:41:30,710 --> 01:41:35,539
the light sums RGB and dividing it by

1842
01:41:32,929 --> 01:41:37,250
the light somes a right now the problem

1843
01:41:35,539 --> 01:41:39,019
with that is the light somes a may be

1844
01:41:37,250 --> 01:41:40,670
zero like there may have been nothing in

1845
01:41:39,020 --> 01:41:43,130
there and then I would divide by zero

1846
01:41:40,670 --> 01:41:45,770
and have zero in there but I divide by

1847
01:41:43,130 --> 01:41:49,579
zero as well and so in that case that's

1848
01:41:45,770 --> 01:41:51,050
less good obviously so what I kind of

1849
01:41:49,579 --> 01:41:52,969
wanna do in this situation is say like

1850
01:41:51,050 --> 01:41:54,320
alright only if the light some a is

1851
01:41:52,969 --> 01:41:58,698
greater than zero do I want to do

1852
01:41:54,319 --> 01:41:59,988
anything with it if I can't find

1853
01:41:58,698 --> 01:42:01,989
anything there that I'm just gonna set

1854
01:41:59,988 --> 01:42:04,179
to zero and

1855
01:42:01,989 --> 01:42:07,329
not do anything at all right I'm just

1856
01:42:04,180 --> 01:42:09,010
gonna soon there's no lighting so that's

1857
01:42:07,329 --> 01:42:12,069
the basic idea

1858
01:42:09,010 --> 01:42:14,100
presumably we've got some syntax errors

1859
01:42:12,069 --> 01:42:21,429
and stuff incompatible types in

1860
01:42:14,100 --> 01:42:23,460
initialization okay yeah I agree with

1861
01:42:21,430 --> 01:42:23,460
that

1862
01:42:33,609 --> 01:42:48,759
undefined variable Vox I agree with that

1863
01:42:37,630 --> 01:42:51,069
as well and now we should get the same

1864
01:42:48,760 --> 01:42:53,530
results we got before which is what we

1865
01:42:51,069 --> 01:42:56,139
wanted now the other thing that I can do

1866
01:42:53,529 --> 01:42:59,259
here is since I want to you know I want

1867
01:42:56,139 --> 01:43:01,359
to start summing up these values if I

1868
01:42:59,260 --> 01:43:04,690
want to sample multiple voxels around

1869
01:43:01,359 --> 01:43:06,279
the region what I can do is I can

1870
01:43:04,689 --> 01:43:07,839
actually just kind of oops I don't

1871
01:43:06,279 --> 01:43:13,319
really want to cut and paste that quite

1872
01:43:07,840 --> 01:43:16,929
yet what I can do here is sum all of the

1873
01:43:13,319 --> 01:43:22,420
voxel sums I can actually do several of

1874
01:43:16,929 --> 01:43:25,118
these right so I can make something like

1875
01:43:22,420 --> 01:43:26,949
this and I can sample as many voxels in

1876
01:43:25,118 --> 01:43:28,389
the neighborhood of this voxel as I want

1877
01:43:26,948 --> 01:43:39,460
to right

1878
01:43:28,389 --> 01:43:43,679
I can do something like this where I'd

1879
01:43:39,460 --> 01:43:43,679
be sampling essentially a cross pattern

1880
01:43:49,408 --> 01:43:56,289
right so that's sampling sort of the the

1881
01:43:52,510 --> 01:44:01,270
left right up down and back you know

1882
01:43:56,289 --> 01:44:03,460
front texels I can you know it gets more

1883
01:44:01,270 --> 01:44:04,630
expensive as you go like every time I do

1884
01:44:03,460 --> 01:44:08,099
this right it's gonna get more and more

1885
01:44:04,630 --> 01:44:14,920
expensive but it's basically you know

1886
01:44:08,099 --> 01:44:17,050
starts to spread the light out right so

1887
01:44:14,920 --> 01:44:19,000
I can do those sums of the Vox I can do

1888
01:44:17,050 --> 01:44:21,550
this sums inquiry a bunch of things

1889
01:44:19,000 --> 01:44:23,679
around the voxel I can also do this if I

1890
01:44:21,550 --> 01:44:24,520
want to in the entire cube right I could

1891
01:44:23,679 --> 01:44:28,559
do the whole thing

1892
01:44:24,520 --> 01:44:28,559
so I could do like

1893
01:44:33,158 --> 01:44:42,549
a pattern more like this so start at

1894
01:44:37,658 --> 01:44:56,348
negative 1 negative 1 negative 1 and

1895
01:44:42,550 --> 01:44:58,300
then go to 0 1 right move to 0 so that's

1896
01:44:56,349 --> 01:45:08,578
basically like starting at negative 1

1897
01:44:58,300 --> 01:45:11,310
negative 1 go to 0 1 move up 1 right and

1898
01:45:08,578 --> 01:45:15,399
this would just you know it's getting

1899
01:45:11,310 --> 01:45:17,770
ridiculous right obviously but you could

1900
01:45:15,399 --> 01:45:22,598
imagine sampling an entire cube of

1901
01:45:17,770 --> 01:45:25,829
voxels which is what I'm doing here and

1902
01:45:22,599 --> 01:45:28,929
this is just the ridiculousness of

1903
01:45:25,828 --> 01:45:47,198
having way too much fluff at your

1904
01:45:28,929 --> 01:45:51,310
disposal right like so so this sample is

1905
01:45:47,198 --> 01:45:54,750
like everything and we don't need to

1906
01:45:51,310 --> 01:46:00,849
resample 0 0 0 because we already did it

1907
01:45:54,750 --> 01:46:02,789
up here with this one so that one can go

1908
01:46:00,849 --> 01:46:05,340
away but all the rest of them would stay

1909
01:46:02,789 --> 01:46:09,130
and that would sample the entire

1910
01:46:05,340 --> 01:46:11,099
ridiculous cube right and what's

1911
01:46:09,130 --> 01:46:18,118
particularly bizarre about that

1912
01:46:11,099 --> 01:46:22,569
obviously I is you know it still runs it

1913
01:46:18,118 --> 01:46:26,339
60 frames a second you know it's just

1914
01:46:22,569 --> 01:46:26,340
nuts how much flops you got in there

1915
01:46:26,439 --> 01:46:33,039
on these modern chips right it's just

1916
01:46:29,859 --> 01:46:34,929
nuts they're just they're packed with an

1917
01:46:33,039 --> 01:46:37,510
incredible amount of computing power it

1918
01:46:34,929 --> 01:46:40,389
just it's because that remember this is

1919
01:46:37,510 --> 01:46:42,219
running per pixel so it's actually

1920
01:46:40,389 --> 01:46:46,029
querying all of those lights in the

1921
01:46:42,219 --> 01:46:49,899
voxel per pixel right

1922
01:46:46,029 --> 01:46:51,399
which is completely ridiculous and you

1923
01:46:49,899 --> 01:46:54,250
know probably we will move away from

1924
01:46:51,399 --> 01:46:56,829
doing anything like that but there it is

1925
01:46:54,250 --> 01:46:59,770
and you saw you can do it so if you want

1926
01:46:56,829 --> 01:47:03,250
to actually do each individual lighting

1927
01:46:59,770 --> 01:47:08,200
thing there you can and no one can stop

1928
01:47:03,250 --> 01:47:10,750
you on a modern GPU you've actually got

1929
01:47:08,199 --> 01:47:12,579
that kind of power which is nuts so

1930
01:47:10,750 --> 01:47:14,859
anyway if we are to do something like

1931
01:47:12,579 --> 01:47:20,170
this where we sum up all of the lighting

1932
01:47:14,859 --> 01:47:32,170
in sort of those regions like that what

1933
01:47:20,170 --> 01:47:38,649
we don't know here we still have a lot

1934
01:47:32,170 --> 01:47:39,760
of issues with this obviously there's a

1935
01:47:38,649 --> 01:47:41,799
ton of stuff that we're gonna have to do

1936
01:47:39,760 --> 01:47:43,060
here but let's just let's just push this

1937
01:47:41,800 --> 01:47:44,260
a little bit further since we got it

1938
01:47:43,060 --> 01:47:45,430
working today let's just start playing

1939
01:47:44,260 --> 01:47:48,970
with it so you can kind of get a feel

1940
01:47:45,430 --> 01:47:50,890
for what's going on here all right so

1941
01:47:48,970 --> 01:47:52,570
first of all that lighting value is

1942
01:47:50,890 --> 01:47:55,600
getting used as a raw lighting value

1943
01:47:52,569 --> 01:47:57,369
here right and we don't actually need it

1944
01:47:55,600 --> 01:48:01,120
to be used as a raw lighting unit value

1945
01:47:57,369 --> 01:48:02,920
here because we actually do have what

1946
01:48:01,119 --> 01:48:05,189
the surface color should have been

1947
01:48:02,920 --> 01:48:07,239
coming in here the surface reflect color

1948
01:48:05,189 --> 01:48:09,549
so if we want to we can actually

1949
01:48:07,239 --> 01:48:11,859
modulate the incoming lighting value by

1950
01:48:09,550 --> 01:48:15,250
the surface reflect color rather than

1951
01:48:11,859 --> 01:48:20,019
just hard setting it right so we can do

1952
01:48:15,250 --> 01:48:22,449
something like this where we modulate

1953
01:48:20,020 --> 01:48:24,580
instead and in that case what we will

1954
01:48:22,449 --> 01:48:27,059
get is an actual version of the game

1955
01:48:24,579 --> 01:48:29,800
running that just has the lighting

1956
01:48:27,060 --> 01:48:32,289
happening right and so what you can see

1957
01:48:29,800 --> 01:48:35,829
here is now you know if I am to move

1958
01:48:32,289 --> 01:48:38,350
this around I can reset the lighting in

1959
01:48:35,829 --> 01:48:40,269
any particular area and we actually get

1960
01:48:38,350 --> 01:48:42,130
something that starts to look like the

1961
01:48:40,270 --> 01:48:43,480
Lighting's actually being used but we

1962
01:48:42,130 --> 01:48:44,680
definitely haven't done anything that we

1963
01:48:43,479 --> 01:48:47,259
would want to use in a game it's

1964
01:48:44,680 --> 01:48:49,150
certainly not good so what we want to do

1965
01:48:47,260 --> 01:48:52,300
now is is start to fix some of that okay

1966
01:48:49,149 --> 01:48:53,859
so first of all we're getting a bunch of

1967
01:48:52,300 --> 01:48:56,829
information here and we're not using it

1968
01:48:53,859 --> 01:48:58,899
we have a light p-value which is where

1969
01:48:56,829 --> 01:48:59,229
the light is supposed to be where this

1970
01:48:58,899 --> 01:49:01,929
in

1971
01:48:59,229 --> 01:49:04,599
where this emission value is coming from

1972
01:49:01,930 --> 01:49:06,310
and then we have a light C value which

1973
01:49:04,600 --> 01:49:08,289
is the color of the light and we're just

1974
01:49:06,310 --> 01:49:10,180
using it but what we did not do is we

1975
01:49:08,289 --> 01:49:12,609
did not actually see whether or not our

1976
01:49:10,180 --> 01:49:16,210
particular surface which we do know what

1977
01:49:12,609 --> 01:49:19,449
it is right because we have sent down as

1978
01:49:16,210 --> 01:49:21,789
part of this we do know for example the

1979
01:49:19,449 --> 01:49:23,769
world normal and the world position in

1980
01:49:21,789 --> 01:49:25,659
question so we know where we are and we

1981
01:49:23,770 --> 01:49:27,250
know what direction our surface is

1982
01:49:25,659 --> 01:49:30,329
pointing so we should be able to

1983
01:49:27,250 --> 01:49:33,488
actually sample this lighting in a more

1984
01:49:30,329 --> 01:49:36,300
reasonable way so for example if we know

1985
01:49:33,488 --> 01:49:39,039
where the light value is in the world

1986
01:49:36,300 --> 01:49:41,230
where we set specify this light P here

1987
01:49:39,039 --> 01:49:43,899
what we can do is look at the difference

1988
01:49:41,229 --> 01:49:45,789
between those two so we can take the the

1989
01:49:43,899 --> 01:49:49,420
distance to the light source and say

1990
01:49:45,789 --> 01:49:52,539
well we've got the world P that we're at

1991
01:49:49,420 --> 01:49:54,940
and we've got the light P right yes

1992
01:49:52,539 --> 01:49:56,560
because it's the Delta that's how far

1993
01:49:54,939 --> 01:49:58,000
that's the vector along which we would

1994
01:49:56,560 --> 01:50:02,050
have to travel to get to that light

1995
01:49:58,000 --> 01:50:03,729
source right and then we also could say

1996
01:50:02,050 --> 01:50:05,140
well okay if we know the Delta to the

1997
01:50:03,729 --> 01:50:08,529
light source we also know how far away

1998
01:50:05,140 --> 01:50:12,789
we are right because we can take for

1999
01:50:08,529 --> 01:50:15,069
example the distance squared to the

2000
01:50:12,789 --> 01:50:17,500
light source we can easily find by just

2001
01:50:15,069 --> 01:50:20,229
squaring the value the length of the

2002
01:50:17,500 --> 01:50:22,149
Delta right so if we do a length squared

2003
01:50:20,229 --> 01:50:27,250
if Delta we could figure out how far

2004
01:50:22,149 --> 01:50:28,029
away we are I think we have that in here

2005
01:50:27,250 --> 01:50:32,470
somewhere right

2006
01:50:28,029 --> 01:50:34,559
to be half a length squared yeah

2007
01:50:32,470 --> 01:50:37,390
so we'd already to find a length squared

2008
01:50:34,560 --> 01:50:40,210
macro for ourselves so we can find out

2009
01:50:37,390 --> 01:50:43,660
what the length squared is to the light

2010
01:50:40,210 --> 01:50:45,189
source right so that would be zero when

2011
01:50:43,659 --> 01:50:48,939
we're right on it

2012
01:50:45,189 --> 01:50:51,129
and that would be as we get further away

2013
01:50:48,939 --> 01:50:58,179
from the light source that will go down

2014
01:50:51,130 --> 01:51:01,720
right so what we could do there say well

2015
01:50:58,180 --> 01:51:03,520
all right very simple attenuation to

2016
01:51:01,720 --> 01:51:05,079
start with let's say that as we get

2017
01:51:03,520 --> 01:51:09,400
further away from this thing we're gonna

2018
01:51:05,079 --> 01:51:12,079
attenuate it more right and then I'm

2019
01:51:09,399 --> 01:51:16,099
going to sum up

2020
01:51:12,079 --> 01:51:19,100
only the attenuation values and what

2021
01:51:16,100 --> 01:51:20,300
this is gonna do is actually I don't

2022
01:51:19,100 --> 01:51:21,320
really probably hooked emulation because

2023
01:51:20,300 --> 01:51:23,449
I'm not really doing lighting

2024
01:51:21,319 --> 01:51:26,090
attenuation here what I actually want to

2025
01:51:23,449 --> 01:51:27,920
do is contribution blending right so all

2026
01:51:26,090 --> 01:51:30,470
I'm really gonna do here is say all

2027
01:51:27,920 --> 01:51:33,590
right I want to wait the lighting values

2028
01:51:30,470 --> 01:51:35,060
based on how close I am to each one so

2029
01:51:33,590 --> 01:51:37,579
if I have multiple letting values that I

2030
01:51:35,060 --> 01:51:39,200
pick up I'm gonna use the ones that I'm

2031
01:51:37,579 --> 01:51:43,039
closest to more strongly than the ones

2032
01:51:39,199 --> 01:51:44,659
that I'm further away from right so I'm

2033
01:51:43,039 --> 01:51:49,399
going to here say the contribution value

2034
01:51:44,659 --> 01:51:51,409
of this thing is going to be a function

2035
01:51:49,399 --> 01:51:54,289
of the distance squared away from it

2036
01:51:51,409 --> 01:51:55,729
let's say so I'll take 1.0 minus the

2037
01:51:54,289 --> 01:51:57,619
distance squared so the contribution

2038
01:51:55,729 --> 01:51:59,539
will be full if the distance squared is

2039
01:51:57,619 --> 01:52:02,329
zero so I'm right on it and it will

2040
01:51:59,539 --> 01:52:05,390
dwindle away as we get lower right I

2041
01:52:02,329 --> 01:52:07,279
don't want it to ever go below zero so

2042
01:52:05,390 --> 01:52:09,170
in this case I'm also gonna clamp it

2043
01:52:07,279 --> 01:52:11,479
which I think we also have a function

2044
01:52:09,170 --> 01:52:14,029
for you so you I'm gonna clamp it here

2045
01:52:11,479 --> 01:52:24,859
between 0 and 1 so that it can't go

2046
01:52:14,029 --> 01:52:26,869
below right and that's all so now if we

2047
01:52:24,859 --> 01:52:30,170
are fortunate enough to pick up more

2048
01:52:26,869 --> 01:52:32,599
than one lighting sample in the voxel we

2049
01:52:30,170 --> 01:52:34,640
will blend between them right now the

2050
01:52:32,600 --> 01:52:36,800
problem with this is that it'll only

2051
01:52:34,640 --> 01:52:38,119
work if we actually have enough voxel

2052
01:52:36,800 --> 01:52:40,400
coverage and what you can kind of see

2053
01:52:38,119 --> 01:52:42,529
here is we just don't have dense enough

2054
01:52:40,399 --> 01:52:43,969
lighting sampling or we're screwing up

2055
01:52:42,529 --> 01:52:46,250
how we're placing our box is I'm not

2056
01:52:43,970 --> 01:52:49,340
exactly sure which but one other the

2057
01:52:46,250 --> 01:52:51,079
other is true and so again what I can do

2058
01:52:49,340 --> 01:52:52,940
is just to sort of get this basically

2059
01:52:51,079 --> 01:52:54,619
working is I can just again drop that

2060
01:52:52,939 --> 01:53:00,219
voxel resolution down a little bit more

2061
01:52:54,619 --> 01:53:00,220
to pick up more samples in the voxel

2062
01:53:01,239 --> 01:53:06,139
that way we have more lighting samples

2063
01:53:03,590 --> 01:53:10,610
per voxel and we can blend more values

2064
01:53:06,140 --> 01:53:12,770
together right and what you can see as I

2065
01:53:10,609 --> 01:53:15,859
get down to a level where I'm actually

2066
01:53:12,770 --> 01:53:17,450
picking up enough of my samples is

2067
01:53:15,859 --> 01:53:19,399
you're actually starting to see real

2068
01:53:17,449 --> 01:53:22,369
like smooth Lighting's start to

2069
01:53:19,399 --> 01:53:23,899
materialize right which is kind of cool

2070
01:53:22,369 --> 01:53:25,789
now we're not quite there yet and the

2071
01:53:23,899 --> 01:53:29,119
reason is because our samples again are

2072
01:53:25,789 --> 01:53:32,449
just still not we're not grabbing enough

2073
01:53:29,119 --> 01:53:35,689
samples in any given individual voxel to

2074
01:53:32,449 --> 01:53:37,939
make this work right because our

2075
01:53:35,689 --> 01:53:41,269
Lighting's solution is just a little too

2076
01:53:37,939 --> 01:53:43,339
sparse is the problem but you can see

2077
01:53:41,270 --> 01:53:44,570
where I'm going with this right or

2078
01:53:43,340 --> 01:53:46,750
hopefully you can see where I'm going

2079
01:53:44,569 --> 01:53:46,750
with this

2080
01:53:48,340 --> 01:53:52,699
oh the guy like hopped on top and he was

2081
01:53:51,050 --> 01:53:54,890
outside the voxel region there for a

2082
01:53:52,699 --> 01:53:56,420
second right but yeah hopefully you can

2083
01:53:54,890 --> 01:53:58,070
see where I'm going with this you can

2084
01:53:56,420 --> 01:54:00,800
start to see how this lighting would

2085
01:53:58,069 --> 01:54:03,799
materialize as we go right you can start

2086
01:54:00,800 --> 01:54:06,230
to see how the the lighting samples

2087
01:54:03,800 --> 01:54:08,180
would get blended together to produce a

2088
01:54:06,229 --> 01:54:10,729
sort of smooth lighting solution in the

2089
01:54:08,180 --> 01:54:13,190
end as we could sort of start to figure

2090
01:54:10,729 --> 01:54:15,259
out how to make this work how to get

2091
01:54:13,189 --> 01:54:17,389
enough samples into the to the smoothly

2092
01:54:15,260 --> 01:54:22,070
blending part of things to make it work

2093
01:54:17,390 --> 01:54:23,960
and again all this is trying to do this

2094
01:54:22,069 --> 01:54:25,670
step that we're adding here all we're

2095
01:54:23,960 --> 01:54:27,590
trying to do is make something that

2096
01:54:25,670 --> 01:54:31,039
takes lighting samples we've distributed

2097
01:54:27,590 --> 01:54:34,190
throughout the world and smush them

2098
01:54:31,039 --> 01:54:38,810
together into a way that's smoothly

2099
01:54:34,189 --> 01:54:39,809
varying across across the world right

2100
01:54:38,810 --> 01:54:42,929
that's all we're trying to

2101
01:54:39,810 --> 01:54:42,929
[Music]

2102
01:54:47,250 --> 01:54:52,510
so we've got a lot of stuff we've got to

2103
01:54:49,449 --> 01:55:00,090
work on there I also don't know or we

2104
01:54:52,510 --> 01:55:00,090
can work them in Oh to mode right yeah

2105
01:55:00,300 --> 01:55:06,159
so yeah we've got a lot of work to do

2106
01:55:03,489 --> 01:55:08,439
there and it's unclear exactly how we're

2107
01:55:06,159 --> 01:55:10,630
going to get there so we've got a bunch

2108
01:55:08,439 --> 01:55:11,909
of stuff we're gonna do to try and get

2109
01:55:10,630 --> 01:55:16,060
past that

2110
01:55:11,909 --> 01:55:18,159
I'm curious we can keep setting the

2111
01:55:16,060 --> 01:55:20,110
voxel down and putting more stress on

2112
01:55:18,159 --> 01:55:21,909
the GPU but getting more blend samples

2113
01:55:20,109 --> 01:55:28,509
in there I'm just curious what happens

2114
01:55:21,909 --> 01:55:32,109
as we drop it down there we go we

2115
01:55:28,510 --> 01:55:37,180
finally slowed it down right just a

2116
01:55:32,109 --> 01:55:40,000
little bit and so again we can see there

2117
01:55:37,180 --> 01:55:42,990
is it continues to get sort of a

2118
01:55:40,000 --> 01:55:46,840
smoother and less blocky less patchy

2119
01:55:42,989 --> 01:55:49,090
sort of solution to the lighting and it

2120
01:55:46,840 --> 01:55:50,770
starts to be kind of nice right like you

2121
01:55:49,090 --> 01:55:53,050
know we've got a long ways to go but you

2122
01:55:50,770 --> 01:55:57,220
can see how that's starting to create

2123
01:55:53,050 --> 01:55:58,989
more of a nice lighting effect and you

2124
01:55:57,220 --> 01:56:00,579
know most of our problem here is we're

2125
01:55:58,989 --> 01:56:02,409
just not getting much transmission of

2126
01:56:00,579 --> 01:56:04,090
the lighting so there's a bunch of stuff

2127
01:56:02,409 --> 01:56:06,430
we're gonna need to do but it's like you

2128
01:56:04,090 --> 01:56:09,220
can kind of see how having a gather step

2129
01:56:06,430 --> 01:56:14,800
at the end really sort of puts things

2130
01:56:09,220 --> 01:56:19,930
into a nice like really sort of puts

2131
01:56:14,800 --> 01:56:23,140
things into it a sort of more pleasing

2132
01:56:19,930 --> 01:56:26,289
result right so what I'd like to do is

2133
01:56:23,140 --> 01:56:28,270
go ahead and and tomorrow when we

2134
01:56:26,289 --> 01:56:29,829
started in this start thinking about how

2135
01:56:28,270 --> 01:56:32,170
we're gonna flood this region with

2136
01:56:29,829 --> 01:56:34,600
samples properly so that may be

2137
01:56:32,170 --> 01:56:39,760
something at about this level of

2138
01:56:34,600 --> 01:56:41,380
granularity of of gather will will work

2139
01:56:39,760 --> 01:56:42,940
properly and that's gonna take a little

2140
01:56:41,380 --> 01:56:45,250
bit of work on our part but I think

2141
01:56:42,939 --> 01:56:48,339
that's roughly what we would like to do

2142
01:56:45,250 --> 01:56:50,920
right so we'll start playing with that

2143
01:56:48,340 --> 01:56:53,940
some more that's gonna be it I'll go

2144
01:56:50,920 --> 01:56:53,940
ahead and go to questions now

2145
01:57:06,729 --> 01:57:08,789
you

2146
01:57:14,100 --> 01:57:18,730
Nestle is asked why no indication of

2147
01:57:16,659 --> 01:57:20,529
shader code the reason there's no

2148
01:57:18,729 --> 01:57:24,549
indentation on the shadow the shader

2149
01:57:20,529 --> 01:57:28,149
code is because it's in a string right

2150
01:57:24,550 --> 01:57:29,409
because we didn't so we probably should

2151
01:57:28,149 --> 01:57:31,989
because we're doing enough work with

2152
01:57:29,409 --> 01:57:33,579
shares this point we should probably

2153
01:57:31,989 --> 01:57:38,050
should pull the shaders out into

2154
01:57:33,579 --> 01:57:39,130
separate files right well we didn't do

2155
01:57:38,050 --> 01:57:41,079
that

2156
01:57:39,130 --> 01:57:44,079
and so as a result these are just

2157
01:57:41,079 --> 01:57:47,859
strings and for coder by default treat

2158
01:57:44,079 --> 01:57:49,960
strings as non code data which does make

2159
01:57:47,859 --> 01:57:53,019
sense because most of the time they

2160
01:57:49,960 --> 01:57:55,119
aren't what would be nice is if

2161
01:57:53,020 --> 01:57:57,730
magically you could somehow hit two for

2162
01:57:55,119 --> 01:58:04,140
coder maybe by picking a specific thing

2163
01:57:57,729 --> 01:58:06,609
here like like that you know or whatever

2164
01:58:04,140 --> 01:58:08,530
I guess you can't really quite do that

2165
01:58:06,609 --> 01:58:10,630
because it's too long but something

2166
01:58:08,529 --> 01:58:13,329
where you could pass a little hint too

2167
01:58:10,630 --> 01:58:15,489
for coder like hey this is code could

2168
01:58:13,329 --> 01:58:17,409
you just run the indenter as you

2169
01:58:15,489 --> 01:58:20,559
normally would on the blocks below you

2170
01:58:17,409 --> 01:58:22,149
right but that's kind of a very special

2171
01:58:20,560 --> 01:58:24,930
purpose thing it's obvious why it

2172
01:58:22,149 --> 01:58:24,929
doesn't support it

2173
01:58:28,770 --> 01:58:32,820
have you tried CUDA do you think it's a

2174
01:58:31,170 --> 01:58:34,500
recent lady GPU programming AMD is

2175
01:58:32,819 --> 01:58:35,880
trying to get cuter compatible compiler

2176
01:58:34,500 --> 01:58:46,529
so it could be useful on both vendors

2177
01:58:35,880 --> 01:58:48,539
soon I have not tried CUDA no I mean my

2178
01:58:46,529 --> 01:58:51,090
thoughts on that are very simple really

2179
01:58:48,539 --> 01:58:53,519
to summarize it the question is more

2180
01:58:51,090 --> 01:58:55,199
will we ever get there right because

2181
01:58:53,520 --> 01:58:56,610
there's a lot of barriers to it my

2182
01:58:55,199 --> 01:58:58,380
thoughts on that is that GPU programming

2183
01:58:56,609 --> 01:59:00,420
should not be GPU programming it should

2184
01:58:58,380 --> 01:59:01,440
just be CPU programming right if you be

2185
01:59:00,420 --> 01:59:04,859
exactly the same

2186
01:59:01,439 --> 01:59:07,409
a GPU should fund functionally just have

2187
01:59:04,859 --> 01:59:10,409
an ice ax that you compile code to anis

2188
01:59:07,409 --> 01:59:12,659
to a machine level specification that

2189
01:59:10,409 --> 01:59:14,760
specifies everything right and it should

2190
01:59:12,659 --> 01:59:17,760
be extremely direct write a text I'll

2191
01:59:14,760 --> 01:59:20,070
fetch call there should be no concept of

2192
01:59:17,760 --> 01:59:22,380
anything having to do with anything

2193
01:59:20,069 --> 01:59:23,130
involving completeness of textures or

2194
01:59:22,380 --> 01:59:25,500
any of that stuff

2195
01:59:23,130 --> 01:59:28,770
there should be a layout of textures and

2196
01:59:25,500 --> 01:59:32,789
that layout is mandated it is a memory

2197
01:59:28,770 --> 01:59:35,940
layout format a text I'll fetch us an

2198
01:59:32,789 --> 01:59:38,390
array access with guaranteed semantics

2199
01:59:35,939 --> 01:59:40,379
about how that memory is fetched and

2200
01:59:38,390 --> 01:59:41,970
that should be the end of it

2201
01:59:40,380 --> 01:59:44,279
you should be able to write assembly

2202
01:59:41,970 --> 01:59:46,050
language code that gets executed on the

2203
01:59:44,279 --> 01:59:48,779
GPU just like you do on a CPU and it

2204
01:59:46,050 --> 01:59:53,039
should be 100% specified there should be

2205
01:59:48,779 --> 01:59:54,289
absolutely no API at all right it should

2206
01:59:53,039 --> 01:59:57,739
just be like the Intel Architecture

2207
01:59:54,289 --> 02:00:00,329
reference manual that should be it and

2208
01:59:57,739 --> 02:00:03,920
each of the instructions should say

2209
02:00:00,329 --> 02:00:05,579
exactly what it does in terms of memory

2210
02:00:03,920 --> 02:00:10,529
that's what it should be

2211
02:00:05,579 --> 02:00:12,059
right and we're really far from being

2212
02:00:10,529 --> 02:00:13,769
able to have that but that's what it

2213
02:00:12,060 --> 02:00:16,680
should be because that's the only thing

2214
02:00:13,770 --> 02:00:20,130
that provides a reliable debuggable like

2215
02:00:16,680 --> 02:00:23,690
easy to understand programming interface

2216
02:00:20,130 --> 02:00:23,690
for experts right

2217
02:00:28,090 --> 02:00:32,869
4-bit lightning if I remember correctly

2218
02:00:31,189 --> 02:00:34,460
we tried to use pound included

2219
02:00:32,869 --> 02:00:39,470
multi-line strings for the shader code

2220
02:00:34,460 --> 02:00:41,329
but that didn't actually work I think

2221
02:00:39,470 --> 02:00:42,710
the reason was because we were trying to

2222
02:00:41,329 --> 02:00:47,390
remain compatible with Visual Studio

2223
02:00:42,710 --> 02:00:49,460
2013 so it doesn't really have any way

2224
02:00:47,390 --> 02:00:51,020
to do that I think there was a way if

2225
02:00:49,460 --> 02:00:53,359
you go if you go we actually are on

2226
02:00:51,020 --> 02:00:55,340
vigil 26 through 2017 now I think there

2227
02:00:53,359 --> 02:00:57,079
is a way to make it work there but don't

2228
02:00:55,340 --> 02:01:00,529
really want to require that either way I

2229
02:00:57,079 --> 02:01:02,600
remember actually neil was trying to

2230
02:01:00,529 --> 02:01:03,469
figure out or it wasn't neil no you know

2231
02:01:02,600 --> 02:01:06,230
what it wasn't Neil

2232
02:01:03,470 --> 02:01:07,579
it was Martin's I think maybe Martin's

2233
02:01:06,229 --> 02:01:08,750
was trying to figure out I get to work

2234
02:01:07,579 --> 02:01:13,130
and send some suggestions but they

2235
02:01:08,750 --> 02:01:14,420
didn't work and I think if I remember

2236
02:01:13,130 --> 02:01:16,640
correctly the reason they didn't work

2237
02:01:14,420 --> 02:01:21,680
was because it wasn't a late enough

2238
02:01:16,640 --> 02:01:22,850
version the compiler I've just started a

2239
02:01:21,680 --> 02:01:25,369
project and I'm working through the set

2240
02:01:22,850 --> 02:01:27,260
up on day two you had it set up applet

2241
02:01:25,369 --> 02:01:29,119
on debian paint two alternate black and

2242
02:01:27,260 --> 02:01:31,250
white if I made no mistakes then it

2243
02:01:29,119 --> 02:01:33,260
doesn't work on Windows 10 I'm instead

2244
02:01:31,250 --> 02:01:34,489
of getting all white and if I drag the

2245
02:01:33,260 --> 02:01:36,230
window around the new part of the one it

2246
02:01:34,489 --> 02:01:38,569
becomes black do you know if there are

2247
02:01:36,229 --> 02:01:42,099
any si caveats for Windows 10 I should

2248
02:01:38,569 --> 02:01:44,179
be worried about there should be no

2249
02:01:42,100 --> 02:01:47,360
problems with that on Windows 10 that

2250
02:01:44,180 --> 02:01:48,950
doesn't sound right to me it sounds like

2251
02:01:47,359 --> 02:01:51,739
you have a problem with your paint

2252
02:01:48,949 --> 02:01:53,689
handling like maybe you're not calling

2253
02:01:51,739 --> 02:01:55,010
begin and then paint or maybe you didn't

2254
02:01:53,689 --> 02:01:58,849
set up the window handle right or

2255
02:01:55,010 --> 02:02:01,130
something but that should no I I don't

2256
02:01:58,850 --> 02:02:04,630
think that's Windows 10 I think you've

2257
02:02:01,130 --> 02:02:04,630
got a bug somewhere

2258
02:02:13,069 --> 02:02:15,769
like the fact that if you drag the

2259
02:02:14,659 --> 02:02:18,019
window around the new part of the window

2260
02:02:15,770 --> 02:02:20,180
becomes black suggest to me that you

2261
02:02:18,020 --> 02:02:23,150
just have a paint bug like maybe you're

2262
02:02:20,180 --> 02:02:24,230
not actually doing the paint all the

2263
02:02:23,149 --> 02:02:26,509
time or something like that

2264
02:02:24,229 --> 02:02:27,919
Nixie do you have any suggestions on how

2265
02:02:26,510 --> 02:02:30,320
to start going about bobsledding more

2266
02:02:27,920 --> 02:02:31,760
complex 3d meshes rather than simpler

2267
02:02:30,319 --> 02:02:33,289
geometric shapes break them up into

2268
02:02:31,760 --> 02:02:35,449
simpler geometric version of allowed

2269
02:02:33,289 --> 02:02:37,880
meshes first should each match be pre

2270
02:02:35,449 --> 02:02:39,769
Vox alized or do you need to recalculate

2271
02:02:37,880 --> 02:02:46,359
relative to the worldview position and

2272
02:02:39,770 --> 02:02:54,830
possibly just for the camera so so

2273
02:02:46,359 --> 02:02:59,420
you're asking about are you saying like

2274
02:02:54,829 --> 02:03:01,819
so you're on the GPU like on the GPU you

2275
02:02:59,420 --> 02:03:05,980
want to send down a mesh to the GPU and

2276
02:03:01,819 --> 02:03:09,049
have the GPU Vox Allies it Neil is that

2277
02:03:05,979 --> 02:03:10,459
is that a correct interpretation of what

2278
02:03:09,050 --> 02:03:12,710
you wanted to have happen or am i

2279
02:03:10,460 --> 02:03:16,720
misunderstanding you like you you want

2280
02:03:12,710 --> 02:03:19,039
the GPU to voxel ice and mesh into

2281
02:03:16,720 --> 02:03:22,460
something you can then use on the GPU

2282
02:03:19,039 --> 02:03:29,090
like inside that frame is that what you

2283
02:03:22,460 --> 02:03:31,869
mean or is that a misunderstanding of

2284
02:03:29,090 --> 02:03:31,869
the question

2285
02:03:57,949 --> 02:04:08,449
sorry I'm just waiting a second they

2286
02:04:00,680 --> 02:04:09,829
wanted to give me a chance to mix tea

2287
02:04:08,449 --> 02:04:11,539
not necessarily doing it on the GPU but

2288
02:04:09,829 --> 02:04:12,739
to provide what the GPU needs to do this

2289
02:04:11,539 --> 02:04:13,909
sort of lighting with more complex

2290
02:04:12,739 --> 02:04:15,710
meshes okay

2291
02:04:13,909 --> 02:04:17,559
so you're kind of just talking about

2292
02:04:15,710 --> 02:04:21,730
like the more general question of like

2293
02:04:17,560 --> 02:04:21,730
voxel ization in general

2294
02:04:22,010 --> 02:04:27,739
so unfortunately here's what I can say I

2295
02:04:24,470 --> 02:04:31,460
have a great deal of experience of

2296
02:04:27,739 --> 02:04:34,069
oxidizing messes on the CPU side I have

2297
02:04:31,460 --> 02:04:37,939
no experience vocalising messes meshes

2298
02:04:34,069 --> 02:04:40,429
on the GPU side so what I could tell you

2299
02:04:37,939 --> 02:04:44,389
is I can tell you about how voxel

2300
02:04:40,430 --> 02:04:46,100
ization goes on the CPU side and then

2301
02:04:44,390 --> 02:04:48,619
speculate a little bit on the GPU side

2302
02:04:46,100 --> 02:04:52,910
and give you some references so on the

2303
02:04:48,619 --> 02:04:55,399
CPU side for voxel izing meshes I

2304
02:04:52,909 --> 02:04:58,309
actually shipped a commercial product

2305
02:04:55,399 --> 02:05:02,329
that does that so granny has a mesh

2306
02:04:58,310 --> 02:05:05,390
voxel Iser built into it actually and

2307
02:05:02,329 --> 02:05:08,689
what it did that for was for one of the

2308
02:05:05,390 --> 02:05:10,970
things that granny has a really good one

2309
02:05:08,689 --> 02:05:14,839
of even though I don't think anyone uses

2310
02:05:10,970 --> 02:05:19,130
it is it has a thing that will take a

2311
02:05:14,840 --> 02:05:20,900
high-res model and transfer properties

2312
02:05:19,130 --> 02:05:23,569
from the high-res model onto a more

2313
02:05:20,899 --> 02:05:26,509
lower resolution model and it does this

2314
02:05:23,569 --> 02:05:29,599
extremely quickly at the time when I

2315
02:05:26,510 --> 02:05:31,760
shipped it it was common to wait several

2316
02:05:29,600 --> 02:05:36,710
minutes for this to happen and we ours

2317
02:05:31,760 --> 02:05:38,690
ran in like 1.5 seconds for such a thing

2318
02:05:36,710 --> 02:05:41,149
usually or even sometimes sub-second

2319
02:05:38,689 --> 02:05:44,029
timings so it was extremely fast

2320
02:05:41,149 --> 02:05:47,149
relative to the common way this was done

2321
02:05:44,029 --> 02:05:49,369
and the reason for that was because I

2322
02:05:47,149 --> 02:05:50,599
used voxels to accelerate the process

2323
02:05:49,369 --> 02:05:53,809
because they're kind of the natural

2324
02:05:50,600 --> 02:05:55,370
thing you would use for this anyway so

2325
02:05:53,810 --> 02:05:57,740
in order to do that what I had to do is

2326
02:05:55,369 --> 02:05:59,090
voxel eyes measures I had to voxel eyes

2327
02:05:57,739 --> 02:06:00,529
the low res mesh and the high res mesh

2328
02:05:59,090 --> 02:06:03,250
so I could find correspondences between

2329
02:06:00,529 --> 02:06:08,929
them using the voxels as a search region

2330
02:06:03,250 --> 02:06:11,828
I and the way that I was doing that was

2331
02:06:08,930 --> 02:06:15,719
I wanted my

2332
02:06:11,828 --> 02:06:18,099
voxel ization x' to be perfect right so

2333
02:06:15,719 --> 02:06:22,168
there's different ways you can go about

2334
02:06:18,099 --> 02:06:27,369
voxel izing things and some are based on

2335
02:06:22,168 --> 02:06:29,889
and which way you vox eliza mesh it

2336
02:06:27,368 --> 02:06:33,429
depends on how you wish that mesh to be

2337
02:06:29,889 --> 02:06:36,189
used i can give a very specific example

2338
02:06:33,429 --> 02:06:38,618
in two dimension two dimensional voxel

2339
02:06:36,189 --> 02:06:41,260
ization so that you can understand what

2340
02:06:38,618 --> 02:06:42,668
i'm mean by this and it's important to

2341
02:06:41,260 --> 02:06:45,159
understand which one of these two you

2342
02:06:42,668 --> 02:06:48,069
want and which one of these two you want

2343
02:06:45,158 --> 02:06:51,848
is dependent entirely on what you expect

2344
02:06:48,069 --> 02:06:55,868
to be doing with the voxel when you put

2345
02:06:51,849 --> 02:06:58,569
it into use so we talked about

2346
02:06:55,868 --> 02:06:59,458
rasterization right and we wrote a

2347
02:06:58,569 --> 02:07:02,918
rasterizer

2348
02:06:59,458 --> 02:07:04,958
on for handmade hero for a software

2349
02:07:02,918 --> 02:07:06,969
renderer and one of the things that we

2350
02:07:04,958 --> 02:07:09,849
talked about during that and remember a

2351
02:07:06,969 --> 02:07:12,010
rasterizer and a voxel Iser are the same

2352
02:07:09,849 --> 02:07:14,349
thing right

2353
02:07:12,010 --> 02:07:16,780
a rasterizer is fundamentally a thing

2354
02:07:14,349 --> 02:07:21,668
that figures out which pixels on a 2d

2355
02:07:16,779 --> 02:07:23,849
grid are covered by a triangle a voxel

2356
02:07:21,668 --> 02:07:29,288
Iser is a thing that figures out which

2357
02:07:23,849 --> 02:07:30,849
voxels in a 3d grid are covered by what

2358
02:07:29,288 --> 02:07:32,588
everything is your oxidising but a

2359
02:07:30,849 --> 02:07:36,429
triangle let's say so in the case of

2360
02:07:32,588 --> 02:07:39,399
imagine a triangle so remember when we

2361
02:07:36,429 --> 02:07:43,029
did our rasterization what we were doing

2362
02:07:39,399 --> 02:07:48,760
was we were checking to see whether the

2363
02:07:43,029 --> 02:07:51,698
centres of things were covered right

2364
02:07:48,760 --> 02:07:53,019
and so we would consider this pixel for

2365
02:07:51,698 --> 02:07:54,938
example to be in when we were

2366
02:07:53,019 --> 02:07:56,530
rasterizing because it's center was here

2367
02:07:54,939 --> 02:07:59,889
even though there's a segment of it that

2368
02:07:56,529 --> 02:08:01,478
was out but in we would not consider

2369
02:07:59,889 --> 02:08:03,489
this to be in even though there is a

2370
02:08:01,479 --> 02:08:06,249
segment of it that is in right and

2371
02:08:03,488 --> 02:08:08,138
that's typical of a rasterizer and the

2372
02:08:06,248 --> 02:08:09,849
reason that's typical of a rasterizer is

2373
02:08:08,139 --> 02:08:12,099
because a rasterizer expects there is

2374
02:08:09,849 --> 02:08:17,288
then another triangle that comes in here

2375
02:08:12,099 --> 02:08:19,588
and fills this thing right but there's

2376
02:08:17,288 --> 02:08:22,679
another way to look at rasterization a

2377
02:08:19,588 --> 02:08:25,779
conservative rasterizer

2378
02:08:22,679 --> 02:08:29,649
is one that wants to know every

2379
02:08:25,779 --> 02:08:31,449
pixal truck touched by a triangle and so

2380
02:08:29,649 --> 02:08:33,879
in that case what would happen is you

2381
02:08:31,449 --> 02:08:36,849
would want to know you know even though

2382
02:08:33,880 --> 02:08:37,900
like this is considered out for a

2383
02:08:36,850 --> 02:08:40,240
traditional rasterizer

2384
02:08:37,899 --> 02:08:41,739
i would want to consider this in because

2385
02:08:40,239 --> 02:08:45,939
i would want to consider it in whenever

2386
02:08:41,739 --> 02:08:48,219
it touched at all right and so what

2387
02:08:45,939 --> 02:08:49,929
we're looking for there is knowledge of

2388
02:08:48,220 --> 02:08:54,369
whether or not the triangle passes

2389
02:08:49,930 --> 02:08:57,039
through the the rectangle not just

2390
02:08:54,369 --> 02:09:04,989
whether or not the center is included in

2391
02:08:57,039 --> 02:09:07,600
the rectangle so what I did for the Vox

2392
02:09:04,989 --> 02:09:11,010
eliezer because what I wanted was a Vox

2393
02:09:07,600 --> 02:09:14,800
laser that was actually 100% precise I

2394
02:09:11,010 --> 02:09:17,920
wanted something that would know exactly

2395
02:09:14,800 --> 02:09:20,980
what part of every triangle was in

2396
02:09:17,920 --> 02:09:24,850
exactly which voxel right that's what I

2397
02:09:20,979 --> 02:09:27,879
was actually trying to do I and so in

2398
02:09:24,850 --> 02:09:34,440
order to do that what I would do is I'd

2399
02:09:27,880 --> 02:09:34,440
say okay in you know my voxel

2400
02:09:41,779 --> 02:09:47,809
what I would do is say I know where my

2401
02:09:45,288 --> 02:09:51,170
starting point is gonna be so I can

2402
02:09:47,809 --> 02:09:54,469
classify my starting point in to one of

2403
02:09:51,170 --> 02:09:57,500
my voxels and then I know you know where

2404
02:09:54,469 --> 02:09:59,779
the other points are as well right I

2405
02:09:57,500 --> 02:10:02,868
don't know where they might be but let's

2406
02:09:59,779 --> 02:10:06,368
say they're in here so I know three of

2407
02:10:02,868 --> 02:10:08,750
the squares that are filled certainly

2408
02:10:06,368 --> 02:10:11,000
right I know that this square is filled

2409
02:10:08,750 --> 02:10:12,500
this square is filled and this square is

2410
02:10:11,000 --> 02:10:16,880
filled I know that they are touched by

2411
02:10:12,500 --> 02:10:19,010
my triangle and so now really the

2412
02:10:16,880 --> 02:10:25,130
problem that I have is I have to figure

2413
02:10:19,010 --> 02:10:30,889
out how I would walk from the how I

2414
02:10:25,130 --> 02:10:34,520
would walk along these the voxel in

2415
02:10:30,889 --> 02:10:38,118
order to get everywhere that might have

2416
02:10:34,520 --> 02:10:39,590
been filled by the triangle and the way

2417
02:10:38,118 --> 02:10:41,719
that I actually did this would just go

2418
02:10:39,590 --> 02:10:44,090
like okay well let's break it into

2419
02:10:41,719 --> 02:10:46,760
slices first so the first thing I would

2420
02:10:44,090 --> 02:10:50,389
do is I would clip the triangle to

2421
02:10:46,760 --> 02:10:54,739
figure out I'd say well alright here is

2422
02:10:50,389 --> 02:10:59,480
a starting point let's clip the triangle

2423
02:10:54,738 --> 02:11:01,218
to this z slice right and figure out how

2424
02:10:59,479 --> 02:11:04,069
much of what part of the triangle

2425
02:11:01,219 --> 02:11:07,819
occupies this Z slice that turns it into

2426
02:11:04,069 --> 02:11:09,469
a 2d problem right where I then have you

2427
02:11:07,819 --> 02:11:11,090
know something that looks like a clipped

2428
02:11:09,469 --> 02:11:14,389
triangle right like here the triangle

2429
02:11:11,090 --> 02:11:17,059
passes out of the Z slice here that I

2430
02:11:14,389 --> 02:11:19,219
can now voxel eyes as a triangle I would

2431
02:11:17,059 --> 02:11:21,619
then do the exact same thing for the

2432
02:11:19,219 --> 02:11:23,630
next dimension down I would say all

2433
02:11:21,618 --> 02:11:27,799
right let's now click the triangle to

2434
02:11:23,630 --> 02:11:30,770
this bucket and I would get this piece

2435
02:11:27,800 --> 02:11:33,949
and then I would run between the min and

2436
02:11:30,770 --> 02:11:35,780
the max slicing it again to figure out

2437
02:11:33,948 --> 02:11:38,118
exactly what part of the triangle was

2438
02:11:35,779 --> 02:11:39,259
clipped to just this Square and then I

2439
02:11:38,118 --> 02:11:41,538
would slice it again to figure out just

2440
02:11:39,260 --> 02:11:43,280
which one was this square and I would

2441
02:11:41,538 --> 02:11:48,380
you know keep slicing slicing slicing

2442
02:11:43,279 --> 02:11:52,158
right and so that was you know that

2443
02:11:48,380 --> 02:11:55,730
scheme is sort of a successive triangle

2444
02:11:52,158 --> 02:11:55,939
dicing scheme that is for when you need

2445
02:11:55,729 --> 02:11:58,429
to

2446
02:11:55,939 --> 02:12:00,769
know exactly which piece of a triangle

2447
02:11:58,430 --> 02:12:02,150
is in exactly which piece of a voxel and

2448
02:12:00,770 --> 02:12:05,590
you don't want to miss anything you want

2449
02:12:02,149 --> 02:12:05,589
to be exact everywhere right

2450
02:12:06,198 --> 02:12:10,519
and so that was good for the application

2451
02:12:08,149 --> 02:12:13,009
I was using however that's probably

2452
02:12:10,520 --> 02:12:19,010
overkill for a lot of voxel operations

2453
02:12:13,010 --> 02:12:23,210
right if it's something that can be more

2454
02:12:19,010 --> 02:12:24,469
sloppy and you know it's something that

2455
02:12:23,210 --> 02:12:25,698
you're trying to run into much higher

2456
02:12:24,469 --> 02:12:26,989
framerate you know like I said this is

2457
02:12:25,698 --> 02:12:28,819
saying that could take a few seconds to

2458
02:12:26,988 --> 02:12:31,189
work because it's an artistic transfer

2459
02:12:28,819 --> 02:12:33,710
process you're basically like alright

2460
02:12:31,189 --> 02:12:36,679
bake this mesh into this mesh it's not

2461
02:12:33,710 --> 02:12:38,719
something has to run frame-to-frame so I

2462
02:12:36,680 --> 02:12:40,400
wanted to err on the side of accuracy

2463
02:12:38,719 --> 02:12:42,829
rather than on the side of speed because

2464
02:12:40,399 --> 02:12:44,299
we were already also so much faster than

2465
02:12:42,829 --> 02:12:49,488
anything else out there it wasn't really

2466
02:12:44,300 --> 02:12:51,469
necessary to push that boundary in a few

2467
02:12:49,488 --> 02:12:53,419
seconds to do a mesh transfer in any

2468
02:12:51,469 --> 02:12:57,170
case was way better than anyone would

2469
02:12:53,420 --> 02:12:59,480
have needed anyways so if you were

2470
02:12:57,170 --> 02:13:01,340
trying to do voxel ization in some other

2471
02:12:59,479 --> 02:13:05,629
way right if you're trying to do voxel

2472
02:13:01,340 --> 02:13:10,130
ization where you would like to do

2473
02:13:05,630 --> 02:13:13,550
something cleaner less code run faster

2474
02:13:10,130 --> 02:13:17,150
whatever I think there's a lot of ways

2475
02:13:13,550 --> 02:13:22,219
you could approach this problem right so

2476
02:13:17,149 --> 02:13:24,019
let's take a dump of approaching this

2477
02:13:22,219 --> 02:13:27,289
problem just to give an example of how

2478
02:13:24,020 --> 02:13:29,930
you might do it so let's suppose what I

2479
02:13:27,289 --> 02:13:34,640
wanted to do was I just wanted to

2480
02:13:29,930 --> 02:13:36,770
exploit parallelism here to fill this

2481
02:13:34,640 --> 02:13:39,110
thing up right alright and I just you

2482
02:13:36,770 --> 02:13:42,080
know I'm gonna do something simple so if

2483
02:13:39,109 --> 02:13:44,029
I had a triangle let's suppose that I

2484
02:13:42,079 --> 02:13:45,649
looked at that triangle I said what

2485
02:13:44,029 --> 02:13:49,789
voxels are the corners of the triangle

2486
02:13:45,649 --> 02:13:51,409
in right well if I got back the answer

2487
02:13:49,789 --> 02:13:55,819
that all of them are in this particular

2488
02:13:51,409 --> 02:13:58,789
one I'd be done that's the voxel

2489
02:13:55,819 --> 02:14:02,479
addition of the triangle right if I get

2490
02:13:58,789 --> 02:14:06,560
back three different ones what I could

2491
02:14:02,479 --> 02:14:09,529
do is like bisect my triangle or trisect

2492
02:14:06,560 --> 02:14:15,650
to my triangle right I

2493
02:14:09,529 --> 02:14:19,519
do something like you know like that and

2494
02:14:15,649 --> 02:14:21,049
run it again right or I could do

2495
02:14:19,520 --> 02:14:23,000
something where I bisect it a little

2496
02:14:21,050 --> 02:14:27,710
more fairly like maybe I do something

2497
02:14:23,000 --> 02:14:30,948
like the Triforce let's say so I bisect

2498
02:14:27,710 --> 02:14:34,189
each of these and I turn this into four

2499
02:14:30,948 --> 02:14:35,408
triangles and then I ask the same

2500
02:14:34,189 --> 02:14:39,109
question

2501
02:14:35,408 --> 02:14:40,670
if you kept doing that you would

2502
02:14:39,109 --> 02:14:43,029
eventually get two triangles that were

2503
02:14:40,670 --> 02:14:46,489
only in one voxel and you'd be done

2504
02:14:43,029 --> 02:14:47,779
right so one very simple way to Vox lies

2505
02:14:46,488 --> 02:14:49,519
a mesh if you just don't want to think

2506
02:14:47,779 --> 02:14:51,229
about it much is just to dice your

2507
02:14:49,520 --> 02:14:54,260
triangle smaller and smaller and smaller

2508
02:14:51,229 --> 02:14:56,689
until they fit into a single voxel each

2509
02:14:54,260 --> 02:15:02,659
and then that is the voxel that they are

2510
02:14:56,689 --> 02:15:18,589
in right this I believe is typically

2511
02:15:02,658 --> 02:15:24,729
called a race rasterizer right do we can

2512
02:15:18,590 --> 02:15:24,730
we get a definition there

2513
02:15:31,579 --> 02:15:34,630
here we go

2514
02:15:35,119 --> 02:15:47,590
bah bah blah blah blah blah blah that's

2515
02:15:43,250 --> 02:15:47,590
not a definition

2516
02:15:53,769 --> 02:15:59,079
yeah so here you go the bait serious

2517
02:15:57,130 --> 02:16:00,248
pipelines flying steps bound calculate

2518
02:15:59,078 --> 02:16:02,229
the bounding volume of each American

2519
02:16:00,248 --> 02:16:03,488
primitive split split large versions of

2520
02:16:02,229 --> 02:16:05,138
smart dice while primitives dice

2521
02:16:03,488 --> 02:16:06,549
converse the primitive integrative micro

2522
02:16:05,139 --> 02:16:08,590
polygons each approximate a size of a

2523
02:16:06,550 --> 02:16:11,260
pixel shade calculate lighting and

2524
02:16:08,590 --> 02:16:12,788
shading in each micro polygon grid bless

2525
02:16:11,260 --> 02:16:13,809
the grid individual micro Pines each of

2526
02:16:12,788 --> 02:16:18,429
which is brown and check for visibility

2527
02:16:13,809 --> 02:16:21,550
hide right so this is effectively what

2528
02:16:18,429 --> 02:16:23,440
I'm advocating right it's how Pixar's

2529
02:16:21,550 --> 02:16:26,529
renderer worked up until the modern day

2530
02:16:23,439 --> 02:16:29,018
I think actually I know they did a big

2531
02:16:26,529 --> 02:16:31,268
rewrite or in the middle of one now I

2532
02:16:29,019 --> 02:16:33,519
think they were raised for a very very

2533
02:16:31,269 --> 02:16:35,200
long time and don't actually know when

2534
02:16:33,519 --> 02:16:37,719
it was replaced but it was like you know

2535
02:16:35,200 --> 02:16:39,909
Toy Story at least was still using Reyes

2536
02:16:37,718 --> 02:16:41,199
rendering I suspect even probably up to

2537
02:16:39,909 --> 02:16:42,579
like The Incredibles they may have been

2538
02:16:41,200 --> 02:16:44,139
still using Ray's running I don't know I

2539
02:16:42,579 --> 02:16:50,409
don't work at Pixar so I have no idea

2540
02:16:44,138 --> 02:16:53,438
but that is one model of approaching

2541
02:16:50,409 --> 02:16:56,829
this that has the benefit of simplicity

2542
02:16:53,439 --> 02:16:59,139
and parallelism there's not really much

2543
02:16:56,829 --> 02:17:01,299
thought involved it's just like you dice

2544
02:16:59,138 --> 02:17:04,239
and repeat like you're just filling up

2545
02:17:01,299 --> 02:17:06,308
hues of die simple things and going so

2546
02:17:04,239 --> 02:17:08,138
something like that might be appropriate

2547
02:17:06,308 --> 02:17:10,049
for what you're trying to do again if

2548
02:17:08,138 --> 02:17:12,459
you just want something simple because

2549
02:17:10,049 --> 02:17:13,718
rasterizes can get very complicated when

2550
02:17:12,459 --> 02:17:15,699
you start to think about how they work

2551
02:17:13,718 --> 02:17:16,959
at voxel Iser is even more so because of

2552
02:17:15,700 --> 02:17:21,069
the third dimension that's involved

2553
02:17:16,959 --> 02:17:25,000
there that's one way to just write one

2554
02:17:21,068 --> 02:17:27,099
to just get it working right if you want

2555
02:17:25,000 --> 02:17:28,959
to be more fancy about how you voxel

2556
02:17:27,099 --> 02:17:34,540
eyes I think probably what you're

2557
02:17:28,959 --> 02:17:38,589
looking at is like probably I'd start

2558
02:17:34,540 --> 02:17:41,979
crawling references out here out in the

2559
02:17:38,590 --> 02:17:45,849
weeds and I'd see who's up to what at

2560
02:17:41,978 --> 02:17:48,670
this point because GPU voxel ization is

2561
02:17:45,849 --> 02:17:53,939
a current topic and there's a lot of

2562
02:17:48,670 --> 02:17:53,939
papers that you can look at on there

2563
02:17:59,468 --> 02:18:09,308
and so if you want to know you know more

2564
02:18:02,950 --> 02:18:11,590
about that you can probably get let's

2565
02:18:09,308 --> 02:18:13,329
see here I mean you know you can read

2566
02:18:11,590 --> 02:18:15,219
all these this Nvidia stuff but I'm

2567
02:18:13,329 --> 02:18:21,940
assuming they'd have some reference this

2568
02:18:15,218 --> 02:18:23,879
year and so 2013 is probably not the

2569
02:18:21,940 --> 02:18:25,989
most recent thing but you know I mean

2570
02:18:23,879 --> 02:18:28,058
you could start here this looks like a

2571
02:18:25,989 --> 02:18:31,599
pretty good little overview to write I

2572
02:18:28,058 --> 02:18:33,489
mean that's something I and I would I

2573
02:18:31,599 --> 02:18:36,719
would kind of go through so these people

2574
02:18:33,489 --> 02:18:41,610
who do voxel a vocalization for lighting

2575
02:18:36,718 --> 02:18:41,609
you can see how they are doing it right

2576
02:18:42,149 --> 02:18:47,558
no we're in this paper they would talk

2577
02:18:46,149 --> 02:18:49,799
about that but I would expect that they

2578
02:18:47,558 --> 02:18:49,799
would

2579
02:18:54,590 --> 02:18:57,959
[Music]

2580
02:19:03,340 --> 02:19:07,659
oh this is interesting so they're using

2581
02:19:05,260 --> 02:19:11,019
like successive renders from different

2582
02:19:07,659 --> 02:19:13,148
directions to generate the voxel so yeah

2583
02:19:11,019 --> 02:19:14,648
I mean I don't know because this isn't

2584
02:19:13,148 --> 02:19:16,179
my area of research like I said the only

2585
02:19:14,648 --> 02:19:17,920
time I ever really did vocalization I

2586
02:19:16,179 --> 02:19:19,599
was looking for highly accurate CPU side

2587
02:19:17,920 --> 02:19:21,129
vocalization in that scheme I don't

2588
02:19:19,599 --> 02:19:23,679
think would be appropriate for this kind

2589
02:19:21,129 --> 02:19:25,509
of use I would probably look at that

2590
02:19:23,679 --> 02:19:28,210
paper I would crawl the references out

2591
02:19:25,510 --> 02:19:32,069
so on sites here for it I I don't know

2592
02:19:28,209 --> 02:19:32,069
how to get to just the sightseer link

2593
02:19:34,079 --> 02:19:40,269
unfortunately but I'd crawl the

2594
02:19:36,010 --> 02:19:41,889
references out from that maybe and look

2595
02:19:40,269 --> 02:19:44,559
at how people are generally talking

2596
02:19:41,888 --> 02:19:46,718
about doing GPU voxel ization today in

2597
02:19:44,558 --> 02:19:48,398
some papers maybe you've already done

2598
02:19:46,718 --> 02:19:50,739
that and found them not to be

2599
02:19:48,398 --> 02:19:52,750
particularly illuminating and if that's

2600
02:19:50,739 --> 02:19:55,260
the case I apologize but that's probably

2601
02:19:52,750 --> 02:19:55,260
what I would do

2602
02:20:06,180 --> 02:20:13,119
but does that help at all uh Neil I

2603
02:20:09,969 --> 02:20:14,679
don't know so I don't know if that helps

2604
02:20:13,119 --> 02:20:21,909
answer your question or if it doesn't

2605
02:20:14,680 --> 02:20:23,109
really help answer the question I don't

2606
02:20:21,908 --> 02:20:24,818
know if there was something specific

2607
02:20:23,109 --> 02:20:28,300
that you wanted to know about Vox

2608
02:20:24,818 --> 02:20:33,689
Edition they didn't really touch on but

2609
02:20:28,299 --> 02:20:35,918
using an re re ye s or Reyes system is

2610
02:20:33,689 --> 02:20:37,658
probably the simplest thing to get

2611
02:20:35,918 --> 02:20:42,189
working I would say because it's pretty

2612
02:20:37,658 --> 02:20:44,618
easy to write something that just goes

2613
02:20:42,189 --> 02:20:47,078
look either this triangles in a Vossler

2614
02:20:44,619 --> 02:20:50,109
it's not if it's if it's in a voxel then

2615
02:20:47,078 --> 02:20:50,949
I that's it you know I'm done if it's

2616
02:20:50,109 --> 02:20:52,629
not in a Vauxhall

2617
02:20:50,949 --> 02:20:54,789
I just have to write something that like

2618
02:20:52,629 --> 02:20:57,760
subdivides it and if you can actually do

2619
02:20:54,789 --> 02:21:01,109
a something fairly smart there too you

2620
02:20:57,760 --> 02:21:03,908
can just divide the triangle

2621
02:21:01,109 --> 02:21:06,520
based on its longest access to or

2622
02:21:03,908 --> 02:21:10,389
something right or its longest side you

2623
02:21:06,520 --> 02:21:11,529
know so you could do something that kind

2624
02:21:10,389 --> 02:21:12,908
of you know if you have long skinny

2625
02:21:11,529 --> 02:21:15,970
triangles it would be smart enough to

2626
02:21:12,908 --> 02:21:17,498
divide the two long sides and you know

2627
02:21:15,969 --> 02:21:19,988
break it that way or something rather

2628
02:21:17,498 --> 02:21:21,699
than breaking it up along the shorter

2629
02:21:19,988 --> 02:21:26,288
side or something right so you can you

2630
02:21:21,699 --> 02:21:29,770
can increasingly be smarter about how

2631
02:21:26,289 --> 02:21:31,390
you subdivide too and so that's also

2632
02:21:29,770 --> 02:21:33,658
something that I would say you know

2633
02:21:31,389 --> 02:21:36,368
might be worth looking into

2634
02:21:33,658 --> 02:21:38,618
even just doing the dumb approach just

2635
02:21:36,369 --> 02:21:40,149
doing it relatively smart is probably

2636
02:21:38,619 --> 02:21:42,459
fine

2637
02:21:40,148 --> 02:21:44,019
where you go from there it's like once

2638
02:21:42,459 --> 02:21:45,520
you get that working then you can start

2639
02:21:44,020 --> 02:21:47,918
thinking about well okay you know that

2640
02:21:45,520 --> 02:21:50,319
is probably pretty dumb it's probably

2641
02:21:47,918 --> 02:21:51,998
not what you want to do if you're trying

2642
02:21:50,318 --> 02:21:54,728
to get something to run real time and

2643
02:21:51,998 --> 02:21:57,248
really fast and whatever so when you

2644
02:21:54,728 --> 02:22:00,938
actually go to voxel ice that meshes in

2645
02:21:57,248 --> 02:22:02,469
the you know in a high performance

2646
02:22:00,939 --> 02:22:04,090
scenario you probably are going to want

2647
02:22:02,469 --> 02:22:05,738
to start doing the research there and

2648
02:22:04,090 --> 02:22:07,449
finding some people who've tried to

2649
02:22:05,738 --> 02:22:09,578
figure out how to get the highest

2650
02:22:07,449 --> 02:22:11,229
throughput voxel ization they can on the

2651
02:22:09,578 --> 02:22:14,619
GPU side of things and that's probably

2652
02:22:11,228 --> 02:22:15,159
not a subdivision based process but I

2653
02:22:14,619 --> 02:22:16,930
don't know

2654
02:22:15,159 --> 02:22:22,869
because like I said I haven't really

2655
02:22:16,930 --> 02:22:25,090
done that reading alright anyway good

2656
02:22:22,870 --> 02:22:30,160
luck with that Neil hopefully you're

2657
02:22:25,090 --> 02:22:33,280
able to get something work in there I'm

2658
02:22:30,159 --> 02:22:38,189
gonna go ahead and quit out of this here

2659
02:22:33,280 --> 02:22:40,180
and close down the stream for the day

2660
02:22:38,189 --> 02:22:41,590
thank you everyone for joining me for

2661
02:22:40,180 --> 02:22:43,389
the episode of handmade hero it's been a

2662
02:22:41,590 --> 02:22:46,450
pleasure coding with you as always if

2663
02:22:43,389 --> 02:22:49,510
you would like to follow along with our

2664
02:22:46,450 --> 02:22:54,579
series at home you can always pre-order

2665
02:22:49,510 --> 02:22:56,620
the game on hand made here at org and it

2666
02:22:54,579 --> 02:22:58,450
comes with a source code so if you want

2667
02:22:56,620 --> 02:23:00,340
to you know fiddle around with it and

2668
02:22:58,450 --> 02:23:01,810
and try your own experiments with the

2669
02:23:00,340 --> 02:23:04,659
code base like if you want to play

2670
02:23:01,809 --> 02:23:07,119
around with these shares and do stuff

2671
02:23:04,659 --> 02:23:08,770
like that you can go ahead and do so we

2672
02:23:07,120 --> 02:23:10,630
also a forum site go to ask questions

2673
02:23:08,770 --> 02:23:13,510
and a patreon page you'd go to France

2674
02:23:10,629 --> 02:23:15,069
fourth video stereo a schedule bot that

2675
02:23:13,510 --> 02:23:18,340
tweets to schedule at you and an episode

2676
02:23:15,069 --> 02:23:21,549
guide that allows you to catch up on

2677
02:23:18,340 --> 02:23:25,510
previous episodes my understanding is it

2678
02:23:21,549 --> 02:23:27,429
is broken right now I don't know why but

2679
02:23:25,510 --> 02:23:28,898
it's it only goes up to day four a five

2680
02:23:27,430 --> 02:23:32,319
even though we're a little bit past that

2681
02:23:28,898 --> 02:23:34,239
so it's only really for the archival

2682
02:23:32,319 --> 02:23:36,279
purposes at the moment I think there's

2683
02:23:34,239 --> 02:23:38,079
some kind of server stuff that people

2684
02:23:36,280 --> 02:23:40,030
have been working on I don't run this

2685
02:23:38,079 --> 02:23:43,120
site this is a different site where it's

2686
02:23:40,030 --> 02:23:45,909
handmade Network it runs a bunch of sort

2687
02:23:43,120 --> 02:23:48,310
of projects and they're doing some stuff

2688
02:23:45,909 --> 02:23:51,280
on it I don't know so it's not quite up

2689
02:23:48,309 --> 02:23:54,119
to date yet will be eventually but it's

2690
02:23:51,280 --> 02:23:56,470
not quite yet so if you need to grab

2691
02:23:54,120 --> 02:23:58,800
episodes from the very recent past that

2692
02:23:56,469 --> 02:24:02,049
you want to go to the YouTube archive

2693
02:23:58,799 --> 02:24:05,590
which of course you can also get to by

2694
02:24:02,049 --> 02:24:10,269
just going to youtube.com handmade hero

2695
02:24:05,590 --> 02:24:13,049
archive and that channel has all of the

2696
02:24:10,270 --> 02:24:15,250
the videos on there up-to-date as well

2697
02:24:13,049 --> 02:24:19,239
so that's me all you should have to do

2698
02:24:15,250 --> 02:24:25,719
that's it for today I will be back here

2699
02:24:19,239 --> 02:24:27,969
tomorrow when we will try to sort of

2700
02:24:25,719 --> 02:24:28,929
start to bring our lighting stuff

2701
02:24:27,969 --> 02:24:30,278
together a little bit more

2702
02:24:28,930 --> 02:24:32,050
because now we've got everything working

2703
02:24:30,279 --> 02:24:33,670
the building blocks are working that we

2704
02:24:32,049 --> 02:24:35,679
need and we need to start thinking about

2705
02:24:33,670 --> 02:24:37,389
how we're actually gonna do our sampling

2706
02:24:35,680 --> 02:24:39,068
and blurring and blending and that kind

2707
02:24:37,389 --> 02:24:40,358
of stuff and so now that we actually S&amp;T

2708
02:24:39,068 --> 02:24:41,469
we can play around with we can go ahead

2709
02:24:40,359 --> 02:24:43,420
and look at that and that's what we

2710
02:24:41,469 --> 02:24:46,840
doing tomorrow hopefully it will lead

2711
02:24:43,420 --> 02:24:48,219
something fruitful till then have fun

2712
02:24:46,840 --> 02:24:51,059
partnering everyone and I'll see you on

2713
02:24:48,219 --> 02:24:51,059
the Internet take it easy everybody

