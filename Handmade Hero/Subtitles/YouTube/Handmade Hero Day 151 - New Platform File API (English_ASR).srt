1
00:00:00,560 --> 00:00:10,769
all righty let's do this

2
00:00:04,559 --> 00:00:15,618
let us do this ladies and gentlemen it

3
00:00:10,769 --> 00:00:20,990
is my distinct pleasure my singular

4
00:00:15,618 --> 00:00:25,410
honor to welcome you to this edition of

5
00:00:20,989 --> 00:00:28,709
handmade hero this is the show and

6
00:00:25,410 --> 00:00:31,948
ladies gentlemen this is the show not a

7
00:00:28,710 --> 00:00:35,880
show but the show where we code a

8
00:00:31,949 --> 00:00:40,710
complete game live on stream on Twitch

9
00:00:35,880 --> 00:00:44,879
no engines no libraries no extraneous

10
00:00:40,710 --> 00:00:50,429
animals like ferret for example it is

11
00:00:44,878 --> 00:00:51,929
just us in the code and we are you know

12
00:00:50,429 --> 00:00:54,329
I want to say it we were kind of

13
00:00:51,929 --> 00:00:56,159
crushing it on the asset system we kind

14
00:00:54,329 --> 00:00:57,119
of did a pretty good pretty darn good

15
00:00:56,159 --> 00:01:00,089
job so far

16
00:00:57,119 --> 00:01:02,759
and I don't see any reason for us to sit

17
00:01:00,090 --> 00:01:05,640
on our collective arrest I should say on

18
00:01:02,759 --> 00:01:07,560
our collective laurels when we should

19
00:01:05,640 --> 00:01:10,710
forward forward and make things even

20
00:01:07,560 --> 00:01:12,240
awesomer so today let's see if we can

21
00:01:10,709 --> 00:01:14,699
wrap up what we were doing with the

22
00:01:12,239 --> 00:01:16,679
asset file merging and then we would be

23
00:01:14,700 --> 00:01:19,469
in some pretty sweet territory I think

24
00:01:16,680 --> 00:01:23,810
setting ourselves up for a good next

25
00:01:19,469 --> 00:01:23,810
week thanks to what we've done today

26
00:01:24,019 --> 00:01:27,989
sort of like when the basketball player

27
00:01:26,159 --> 00:01:29,520
puts like the you know sends the ball up

28
00:01:27,989 --> 00:01:33,149
and another one comes in like dunks it

29
00:01:29,519 --> 00:01:35,819
right that's like what we're doing only

30
00:01:33,150 --> 00:01:39,450
instead of basketball players it's this

31
00:01:35,819 --> 00:01:42,809
week and next week and the ball is the

32
00:01:39,450 --> 00:01:45,840
game right do you see how that analogy

33
00:01:42,810 --> 00:01:50,368
works I don't know who the opposing

34
00:01:45,840 --> 00:01:52,109
players are in this analogy hmm you know

35
00:01:50,368 --> 00:01:54,420
could be like the visual studio compiler

36
00:01:52,109 --> 00:01:55,739
or something like this or the C++

37
00:01:54,420 --> 00:01:57,689
Standards Committee they could be in

38
00:01:55,739 --> 00:02:00,709
there like blocking us right that could

39
00:01:57,688 --> 00:02:04,349
happen I don't know who the refs are

40
00:02:00,709 --> 00:02:06,000
probably like you know the the Intel

41
00:02:04,349 --> 00:02:07,349
chip because obviously everything has to

42
00:02:06,000 --> 00:02:12,120
run like according to their rules or

43
00:02:07,349 --> 00:02:13,409
something but I think what you know I'm

44
00:02:12,120 --> 00:02:13,650
trying to get across here if nothing

45
00:02:13,409 --> 00:02:16,378
else

46
00:02:13,650 --> 00:02:18,810
is that if you make an analogy you

47
00:02:16,378 --> 00:02:21,449
should probably stop trying to extend

48
00:02:18,810 --> 00:02:22,860
that analogy somewhere after the point

49
00:02:21,449 --> 00:02:25,438
where you say who the two players in the

50
00:02:22,860 --> 00:02:27,239
ball are because after that it starts to

51
00:02:25,438 --> 00:02:29,430
get really confusing and hard to figure

52
00:02:27,239 --> 00:02:31,709
out and then the analogy actually works

53
00:02:29,430 --> 00:02:33,840
against you because you actually get

54
00:02:31,709 --> 00:02:35,519
confused so the people who are trying to

55
00:02:33,840 --> 00:02:37,680
communicate with are only going to be

56
00:02:35,519 --> 00:02:40,980
even more confused so these are the

57
00:02:37,680 --> 00:02:42,120
types of important lessons you know when

58
00:02:40,979 --> 00:02:44,009
we talk about learning programming

59
00:02:42,120 --> 00:02:45,959
obviously one of those things is

60
00:02:44,009 --> 00:02:49,469
learning how to make analogies to

61
00:02:45,959 --> 00:02:51,449
basketball and so I hope everyone has

62
00:02:49,469 --> 00:02:55,199
sort of gained a little bit from that I

63
00:02:51,449 --> 00:02:56,669
know I have so if you are the type of

64
00:02:55,199 --> 00:02:58,560
person who would like to follow along

65
00:02:56,669 --> 00:03:01,888
with my basketball analogies at home

66
00:02:58,560 --> 00:03:03,180
today is day 151 by the way I also don't

67
00:03:01,889 --> 00:03:05,040
watch basketball or know anything about

68
00:03:03,180 --> 00:03:07,290
it so that makes it extra hard so

69
00:03:05,039 --> 00:03:08,969
another pro tip might be try to use

70
00:03:07,289 --> 00:03:12,810
analogies in a sport that you actually

71
00:03:08,969 --> 00:03:14,188
know so anyway today is day 151 if you

72
00:03:12,810 --> 00:03:15,598
would like to follow along with your own

73
00:03:14,188 --> 00:03:16,769
basketball analogies at home and you

74
00:03:15,598 --> 00:03:18,959
have pre-ordered the game on handmade

75
00:03:16,769 --> 00:03:21,150
hero org you want to unpack day 150

76
00:03:18,959 --> 00:03:23,009
source code into a directory because

77
00:03:21,150 --> 00:03:27,500
that is the source code I will be

78
00:03:23,009 --> 00:03:31,108
starting with today all right let's see

79
00:03:27,500 --> 00:03:36,030
what we have in store for today let us

80
00:03:31,109 --> 00:03:37,859
see where we are at I see that I never

81
00:03:36,030 --> 00:03:40,259
actually deleted this somebody asked a

82
00:03:37,859 --> 00:03:41,430
question about when you pass pointers it

83
00:03:40,259 --> 00:03:42,750
looks like we've still got that in there

84
00:03:41,430 --> 00:03:44,819
so maybe our first thing that we'll do

85
00:03:42,750 --> 00:03:48,658
today is delete the little code that we

86
00:03:44,818 --> 00:03:52,668
put in there that was sort of designed

87
00:03:48,658 --> 00:03:55,019
to show people who asked the question

88
00:03:52,669 --> 00:03:56,669
something about why you pass pointers

89
00:03:55,019 --> 00:03:59,340
versus when you would wait a min to pass

90
00:03:56,669 --> 00:04:01,979
things by value hopefully everyone got

91
00:03:59,340 --> 00:04:05,459
that yesterday no need for that code to

92
00:04:01,979 --> 00:04:07,349
stick around all right so we were in the

93
00:04:05,459 --> 00:04:09,150
middle yesterday of making something

94
00:04:07,348 --> 00:04:12,268
that would open a set of asset files

95
00:04:09,150 --> 00:04:13,650
merge their data together and then be

96
00:04:12,269 --> 00:04:15,180
able to run with them and the reason we

97
00:04:13,650 --> 00:04:17,608
were doing that is because I wanted to

98
00:04:15,180 --> 00:04:20,370
take a look at what I might reasonably

99
00:04:17,608 --> 00:04:22,769
believed to be the shipping code that

100
00:04:20,370 --> 00:04:24,449
starts up the game in terms of pulling

101
00:04:22,769 --> 00:04:27,419
in the asset file and in order to do

102
00:04:24,449 --> 00:04:29,490
that I need kind of a map

103
00:04:27,420 --> 00:04:30,540
what that would look like the reason we

104
00:04:29,490 --> 00:04:33,240
were doing that is so that we could

105
00:04:30,540 --> 00:04:36,930
define the platform layer API that we

106
00:04:33,240 --> 00:04:38,189
want for sort of our final file API like

107
00:04:36,930 --> 00:04:39,840
the thing that we're actually going to

108
00:04:38,189 --> 00:04:42,240
support on all of the platforms that

109
00:04:39,839 --> 00:04:45,000
handmade hero ships on so this would not

110
00:04:42,240 --> 00:04:47,370
be Tesco this would actually be like the

111
00:04:45,000 --> 00:04:48,810
API that we want to run the final game

112
00:04:47,370 --> 00:04:50,579
so in order to do that I always say

113
00:04:48,810 --> 00:04:52,079
write the test code first this is an

114
00:04:50,579 --> 00:04:53,849
example of trying to write the test code

115
00:04:52,079 --> 00:04:56,609
first so we're trying to put together

116
00:04:53,850 --> 00:04:59,820
here basically a piece of code that

117
00:04:56,610 --> 00:05:02,040
shows what we would really be doing for

118
00:04:59,819 --> 00:05:03,540
the real final thing where we load the

119
00:05:02,040 --> 00:05:05,610
actual asset files and merge them

120
00:05:03,540 --> 00:05:08,069
together so that we can see what those

121
00:05:05,610 --> 00:05:10,139
data a reading api's would look like

122
00:05:08,069 --> 00:05:17,969
right so let's go ahead and get back to

123
00:05:10,139 --> 00:05:19,139
that all right so what we were

124
00:05:17,970 --> 00:05:20,850
suggesting is that we would have

125
00:05:19,139 --> 00:05:23,009
something called a platform file handle

126
00:05:20,850 --> 00:05:26,939
and the platform file handle would allow

127
00:05:23,009 --> 00:05:30,060
us to basically hold open references to

128
00:05:26,939 --> 00:05:31,949
the asset files in the game right so we

129
00:05:30,060 --> 00:05:33,780
would start up we would look at what

130
00:05:31,949 --> 00:05:36,899
asset files were in the directory we

131
00:05:33,779 --> 00:05:38,789
would load them all well sorry we would

132
00:05:36,899 --> 00:05:40,589
open handles to all of them right and

133
00:05:38,790 --> 00:05:43,790
you can see that I wrote the code there

134
00:05:40,589 --> 00:05:47,099
for that right let's uh this guy out

135
00:05:43,790 --> 00:05:48,480
there we go so this was the code block

136
00:05:47,100 --> 00:05:50,310
that I was working on a base so I said

137
00:05:48,480 --> 00:05:52,650
it's alright we're gonna suppose that

138
00:05:50,310 --> 00:05:55,439
the platform can return to us

139
00:05:52,649 --> 00:05:57,779
sort of a group of files that all have

140
00:05:55,439 --> 00:06:01,170
the same extension that we can iterate

141
00:05:57,779 --> 00:06:02,969
over them that we can then open them and

142
00:06:01,170 --> 00:06:04,830
hold a file handle to them so we can

143
00:06:02,970 --> 00:06:08,490
talk about that file for the rest of the

144
00:06:04,829 --> 00:06:12,300
game while it's running and then that we

145
00:06:08,490 --> 00:06:14,100
can go ahead and read singular chunks

146
00:06:12,300 --> 00:06:16,590
like little little individual chunks out

147
00:06:14,100 --> 00:06:18,900
of that file I also said that I want the

148
00:06:16,589 --> 00:06:21,569
file handle itself to remember whether

149
00:06:18,899 --> 00:06:23,609
it has encountered an error and to be

150
00:06:21,569 --> 00:06:26,370
able to say that there has been an error

151
00:06:23,610 --> 00:06:28,020
on that file handle so that later I can

152
00:06:26,370 --> 00:06:30,209
just do you know I can do a bunch of

153
00:06:28,019 --> 00:06:33,359
operations and then later just check a

154
00:06:30,209 --> 00:06:35,779
single check do a single check to say

155
00:06:33,360 --> 00:06:37,949
were there any errors and if there were

156
00:06:35,779 --> 00:06:41,219
shut down gracefully if there weren't

157
00:06:37,949 --> 00:06:42,569
continue right and so

158
00:06:41,220 --> 00:06:44,400
what we're gonna do you know eventually

159
00:06:42,569 --> 00:06:46,920
will hopefully have some way in here of

160
00:06:44,399 --> 00:06:48,209
notifying users in the game that

161
00:06:46,920 --> 00:06:49,439
something's going wrong maybe like a

162
00:06:48,209 --> 00:06:50,939
little dialog box something like that

163
00:06:49,439 --> 00:06:53,040
it's a little tricky

164
00:06:50,939 --> 00:06:54,660
how we might do that because we'll

165
00:06:53,040 --> 00:06:55,740
probably have to like bake in a debug

166
00:06:54,660 --> 00:06:57,780
font to the executable or something

167
00:06:55,740 --> 00:06:59,720
because if the asset files not there

168
00:06:57,779 --> 00:07:02,609
we can't very well notify someone

169
00:06:59,720 --> 00:07:04,230
without a font right we need a font at

170
00:07:02,610 --> 00:07:06,120
least so we may have to bake a little

171
00:07:04,230 --> 00:07:08,090
debug font in just for the emergency

172
00:07:06,120 --> 00:07:14,160
scenario where we can't even load our

173
00:07:08,089 --> 00:07:15,329
fonts in at all but we'll cross that

174
00:07:14,160 --> 00:07:16,530
bridge when we come to it

175
00:07:15,329 --> 00:07:20,159
that's a little further down the line

176
00:07:16,529 --> 00:07:21,869
all we know is that we need some way of

177
00:07:20,160 --> 00:07:24,990
detecting it so I wanted to make sure

178
00:07:21,870 --> 00:07:27,840
that we had a code path in there that

179
00:07:24,990 --> 00:07:29,460
was where we would note that this error

180
00:07:27,839 --> 00:07:32,549
occurred so that it could be reported

181
00:07:29,459 --> 00:07:35,159
once we have a system so once we do that

182
00:07:32,550 --> 00:07:37,680
we would allocate space to store all of

183
00:07:35,160 --> 00:07:39,990
the assets that we were going to load in

184
00:07:37,680 --> 00:07:42,120
and again we're only talking about the

185
00:07:39,990 --> 00:07:43,620
sort of the metadata for those assets

186
00:07:42,120 --> 00:07:46,079
because the acetate itself is too big

187
00:07:43,620 --> 00:07:47,970
and we want to stream that in so we're

188
00:07:46,079 --> 00:07:51,990
just talking about like you know making

189
00:07:47,970 --> 00:07:54,120
room for if there's you know 30,000

190
00:07:51,990 --> 00:07:56,850
different things in the game we make an

191
00:07:54,120 --> 00:07:59,430
array of 30,000 that holds the metadata

192
00:07:56,850 --> 00:08:00,900
so that we can quickly access that and

193
00:07:59,430 --> 00:08:03,478
know where we need to start loading it

194
00:08:00,899 --> 00:08:05,939
we could even go one step further and

195
00:08:03,478 --> 00:08:07,560
stream that in but honestly it's only

196
00:08:05,939 --> 00:08:09,540
gonna probably be a megabyte or two and

197
00:08:07,560 --> 00:08:11,009
you know especially on PC it would be

198
00:08:09,540 --> 00:08:12,870
actually more inefficient of us to

199
00:08:11,009 --> 00:08:14,279
constantly be loading it so we probably

200
00:08:12,870 --> 00:08:15,780
don't want to do that unless we're on

201
00:08:14,279 --> 00:08:18,569
some much more memory constrained

202
00:08:15,779 --> 00:08:20,549
platform than hammer here ever may ever

203
00:08:18,569 --> 00:08:22,918
actually even run on so that's that's

204
00:08:20,550 --> 00:08:24,389
kind of a separate issue so once we go

205
00:08:22,918 --> 00:08:26,789
ahead and do that what we would like to

206
00:08:24,389 --> 00:08:28,529
do is load all of those assets actually

207
00:08:26,790 --> 00:08:31,410
in and so what we're looking at here is

208
00:08:28,529 --> 00:08:32,968
that code we're gonna have to loop over

209
00:08:31,410 --> 00:08:34,469
and I said this was a very inefficient

210
00:08:32,969 --> 00:08:36,450
way to do it but I don't know that we'll

211
00:08:34,469 --> 00:08:37,919
ever matter we'll cross that bridge when

212
00:08:36,450 --> 00:08:41,310
we come to it but what I would do is

213
00:08:37,918 --> 00:08:43,799
loop over all the files and see if those

214
00:08:41,309 --> 00:08:46,049
files have assets of the particular type

215
00:08:43,799 --> 00:08:48,019
in them right so when we look through

216
00:08:46,049 --> 00:08:50,729
here we find that a you know an asset

217
00:08:48,019 --> 00:08:52,199
that the sort of that main asset array

218
00:08:50,730 --> 00:08:54,330
that tells us how many of each type

219
00:08:52,200 --> 00:08:55,350
there are when we see a particular type

220
00:08:54,330 --> 00:09:00,990
what we wanted

221
00:08:55,350 --> 00:09:04,320
is read out of the file that portion of

222
00:09:00,990 --> 00:09:07,740
the of that asset array so that and put

223
00:09:04,320 --> 00:09:09,090
it in the right place right and then we

224
00:09:07,740 --> 00:09:12,029
will increment the asset count by

225
00:09:09,090 --> 00:09:14,610
however many there were right asset

226
00:09:12,029 --> 00:09:16,829
account for type something like that we

227
00:09:14,610 --> 00:09:18,180
would read like that many in here so

228
00:09:16,830 --> 00:09:20,879
what we need to do first obviously is

229
00:09:18,179 --> 00:09:23,039
compute that asset count for type and

230
00:09:20,879 --> 00:09:25,559
the way that we do that again is taking

231
00:09:23,039 --> 00:09:28,679
the one pass last asset index for

232
00:09:25,559 --> 00:09:31,319
whatever the array says and subtracting

233
00:09:28,679 --> 00:09:33,089
it from the the first asset index right

234
00:09:31,320 --> 00:09:34,890
because that is how many there actually

235
00:09:33,090 --> 00:09:37,050
would be that's how many we would want

236
00:09:34,889 --> 00:09:38,669
to load in to you know we'd have to load

237
00:09:37,049 --> 00:09:40,049
them into obviously the right position

238
00:09:38,669 --> 00:09:41,610
so we'll take care of that in a second

239
00:09:40,049 --> 00:09:46,439
but then we would advance by that many

240
00:09:41,610 --> 00:09:47,669
assets and continue going right so

241
00:09:46,440 --> 00:09:51,240
that's all we would really need to do

242
00:09:47,669 --> 00:09:53,159
there but once we have loaded these guys

243
00:09:51,240 --> 00:09:55,620
in I alluded to this yesterday another

244
00:09:53,159 --> 00:09:57,990
thing that we have to be able to do is

245
00:09:55,620 --> 00:10:00,389
we have to be able to rebase the tag

246
00:09:57,990 --> 00:10:03,690
indices and so let's do that first

247
00:10:00,389 --> 00:10:05,490
before we talk about you know any of the

248
00:10:03,690 --> 00:10:07,770
other stuff here so let's talk about

249
00:10:05,490 --> 00:10:10,560
that so what we have is we have a set of

250
00:10:07,769 --> 00:10:13,919
tag arrays right we have a set of these

251
00:10:10,559 --> 00:10:18,059
asset tags right oops and they're in the

252
00:10:13,919 --> 00:10:21,689
file formats right so we have the HHA

253
00:10:18,059 --> 00:10:24,509
tag right and in the hh8 tag we have ID

254
00:10:21,690 --> 00:10:26,340
and the value now that is what we need

255
00:10:24,509 --> 00:10:28,470
to identify our assets but the way the

256
00:10:26,340 --> 00:10:30,149
assets reference those right if you look

257
00:10:28,470 --> 00:10:31,500
down here is it says the first tag index

258
00:10:30,149 --> 00:10:34,230
and one passed last I guess those are

259
00:10:31,500 --> 00:10:36,629
absolute indices so the HHA asset says

260
00:10:34,230 --> 00:10:39,120
well my first tag is tag five in the tag

261
00:10:36,629 --> 00:10:41,309
table and then my last tag is you know

262
00:10:39,120 --> 00:10:43,019
or one path the last tag is like seven

263
00:10:41,309 --> 00:10:46,949
so I would go five and six or my two

264
00:10:43,019 --> 00:10:49,769
tags right so if there's only one file

265
00:10:46,950 --> 00:10:51,750
that works fine right because those

266
00:10:49,769 --> 00:10:54,000
those will just be correct but if

267
00:10:51,750 --> 00:10:56,190
there's two files then the first files

268
00:10:54,000 --> 00:10:58,080
tag indices will be correct but the

269
00:10:56,190 --> 00:10:59,700
second files would be wrong right if we

270
00:10:58,080 --> 00:11:02,879
can catenate with them on to each other

271
00:10:59,700 --> 00:11:06,120
right so the tag arrays get concatenated

272
00:11:02,879 --> 00:11:08,149
on so tag zero of the second file is

273
00:11:06,120 --> 00:11:10,940
actually one

274
00:11:08,149 --> 00:11:12,889
past the last tag of the first file so

275
00:11:10,940 --> 00:11:15,529
if there's a hundred tags in the first

276
00:11:12,889 --> 00:11:17,299
file right then the hundred and first

277
00:11:15,528 --> 00:11:19,129
tag is actually tagged zero of the

278
00:11:17,299 --> 00:11:21,649
second file so all of the assets in the

279
00:11:19,129 --> 00:11:24,740
second file are pointing essentially are

280
00:11:21,649 --> 00:11:28,838
their indices are wrong and they need to

281
00:11:24,740 --> 00:11:31,850
be rebased by the number of tags right

282
00:11:28,839 --> 00:11:33,529
that came before them so that's what I

283
00:11:31,850 --> 00:11:35,509
want to do first I want to go ahead and

284
00:11:33,528 --> 00:11:37,309
take care of that that's a pretty

285
00:11:35,509 --> 00:11:44,778
straightforward thing to do so we'll go

286
00:11:37,309 --> 00:11:47,479
ahead and we will do it right okay so

287
00:11:44,778 --> 00:11:49,370
what we need to do there once we've

288
00:11:47,480 --> 00:11:52,730
looked at sort of this this stuff here

289
00:11:49,370 --> 00:11:54,500
right I've said that in the asset file

290
00:11:52,730 --> 00:11:56,389
I've already made a tag based thing but

291
00:11:54,500 --> 00:11:58,490
we don't actually set it to anything so

292
00:11:56,389 --> 00:12:02,169
what I want to do is when we read in a

293
00:11:58,490 --> 00:12:05,930
new file right I want to set the files

294
00:12:02,169 --> 00:12:09,229
tag base right to be whatever the

295
00:12:05,929 --> 00:12:10,549
current tag count actually is okay so

296
00:12:09,230 --> 00:12:12,470
the first one will start at zero and

297
00:12:10,549 --> 00:12:16,129
then whatever however made tags are in

298
00:12:12,470 --> 00:12:19,190
that file the next one right will will

299
00:12:16,129 --> 00:12:21,649
actually start at one pass the last one

300
00:12:19,190 --> 00:12:23,720
for for the previous file so they little

301
00:12:21,649 --> 00:12:26,000
like set what that what that rebasing

302
00:12:23,720 --> 00:12:27,920
guy is going to be so then then here

303
00:12:26,000 --> 00:12:31,610
what I can do is I can loop through all

304
00:12:27,919 --> 00:12:33,769
of the files right and I can load out

305
00:12:31,610 --> 00:12:35,600
their tag arrays right

306
00:12:33,769 --> 00:12:38,139
so what I can do is say ok for each file

307
00:12:35,600 --> 00:12:42,350
and put a note here what we're doing no

308
00:12:38,139 --> 00:12:43,610
load tags so when I come in here what I

309
00:12:42,350 --> 00:12:45,440
want to do is say all right assuming

310
00:12:43,610 --> 00:12:47,209
that this was a file that hasn't had any

311
00:12:45,440 --> 00:12:50,360
errors on the file yet what I'm going to

312
00:12:47,208 --> 00:12:53,028
do is is read in that tag array right so

313
00:12:50,360 --> 00:12:56,060
I'm going to read in tag array size like

314
00:12:53,028 --> 00:13:01,039
so and I'm going to read in that tag

315
00:12:56,059 --> 00:13:02,869
array wherever that was right tags oops

316
00:13:01,039 --> 00:13:04,490
that's not where it's gonna be gonna be

317
00:13:02,870 --> 00:13:06,769
somewhere else right so where am I gonna

318
00:13:04,490 --> 00:13:09,500
rotate read it in right I'm gonna read

319
00:13:06,769 --> 00:13:11,028
it in at the asset tags right that I

320
00:13:09,500 --> 00:13:12,799
just allocated a big thing for asset

321
00:13:11,028 --> 00:13:15,708
tags I'm gonna add it I'm gonna load it

322
00:13:12,799 --> 00:13:17,620
in at the tag basis offset so the first

323
00:13:15,708 --> 00:13:19,669
one I'll read in you know I'll just

324
00:13:17,620 --> 00:13:21,259
quickly draw this on the way forward for

325
00:13:19,669 --> 00:13:24,319
you just in case it's it's a little

326
00:13:21,259 --> 00:13:25,549
too confusing I know if you're not a

327
00:13:24,320 --> 00:13:27,440
programmer who's been programming for a

328
00:13:25,549 --> 00:13:28,909
long time so it's hard I think of these

329
00:13:27,440 --> 00:13:30,920
things in my head and it's hard

330
00:13:28,909 --> 00:13:32,719
sometimes if you haven't done it much to

331
00:13:30,919 --> 00:13:33,860
think of them in your head that way but

332
00:13:32,720 --> 00:13:35,899
basically we're really talking about

333
00:13:33,860 --> 00:13:37,190
something real simple when you get down

334
00:13:35,899 --> 00:13:41,840
to it it's just it's just a bunch of

335
00:13:37,190 --> 00:13:44,450
fussing but basically we've got file 0 1

336
00:13:41,840 --> 00:13:47,030
2 right here's their tag arrays these

337
00:13:44,450 --> 00:13:49,370
are the tiger Ray's what we want is we

338
00:13:47,029 --> 00:13:52,339
want all of these guys right to come

339
00:13:49,370 --> 00:13:54,980
into one big array so I want to put this

340
00:13:52,340 --> 00:13:57,379
tag array here I want to put this tag

341
00:13:54,980 --> 00:14:01,070
array right in here and I want to put

342
00:13:57,379 --> 00:14:02,899
this tag array in here right so when I

343
00:14:01,070 --> 00:14:05,420
load them I want to load the first one

344
00:14:02,899 --> 00:14:07,850
at tags 0 right but I want to road the

345
00:14:05,419 --> 00:14:10,370
next one at like whatever file what

346
00:14:07,850 --> 00:14:12,529
zeros tag count was I want to load it at

347
00:14:10,370 --> 00:14:14,060
that tag count right I want to move down

348
00:14:12,529 --> 00:14:15,559
and load the next one in there and then

349
00:14:14,059 --> 00:14:17,779
the next one in there right so that's

350
00:14:15,559 --> 00:14:20,239
all I'm doing here is I made that tag

351
00:14:17,779 --> 00:14:21,679
base so that I know and that's just a

352
00:14:20,240 --> 00:14:23,389
rolling number that kind of incremented

353
00:14:21,679 --> 00:14:24,949
for each one just like I said and then

354
00:14:23,389 --> 00:14:26,569
when we do this platform read data from

355
00:14:24,950 --> 00:14:28,460
file we're gonna read it in at whatever

356
00:14:26,570 --> 00:14:30,050
that tag base offset would be so they

357
00:14:28,460 --> 00:14:32,509
get stacked on top of each other nicely

358
00:14:30,049 --> 00:14:34,159
right so all I really need to do is

359
00:14:32,509 --> 00:14:35,269
compute that tag array size and

360
00:14:34,159 --> 00:14:38,719
obviously that's just going to be the

361
00:14:35,269 --> 00:14:41,889
size of the HHA tag times however many

362
00:14:38,720 --> 00:14:43,790
there actually were in this thing right

363
00:14:41,889 --> 00:14:45,649
but that's really all we're talking

364
00:14:43,789 --> 00:14:47,389
about so we're just gonna read that out

365
00:14:45,649 --> 00:14:54,799
and now we've got the tag array there

366
00:14:47,389 --> 00:14:56,899
and we're good to go right ok so that's

367
00:14:54,799 --> 00:14:58,399
us loading in the tags and we don't

368
00:14:56,899 --> 00:14:59,899
really have to touch the tag so the tags

369
00:14:58,399 --> 00:15:01,879
don't reference anything so they don't

370
00:14:59,899 --> 00:15:03,319
have any values that need to be moved

371
00:15:01,879 --> 00:15:05,600
right they don't have to anything that

372
00:15:03,320 --> 00:15:08,120
has to happen there so we load in the

373
00:15:05,600 --> 00:15:14,480
tags and then I guess we could put here

374
00:15:08,120 --> 00:15:16,460
note allocate all metadata space right

375
00:15:14,480 --> 00:15:18,680
so we load in those tags and that's all

376
00:15:16,460 --> 00:15:21,590
good and then what we need to do is we

377
00:15:18,679 --> 00:15:23,569
need to do those assets rebased

378
00:15:21,590 --> 00:15:25,879
right we need to rebase those assets so

379
00:15:23,570 --> 00:15:27,440
what we need to do here right is we need

380
00:15:25,879 --> 00:15:31,189
to loop through the assets that are

381
00:15:27,440 --> 00:15:33,530
involved in this particular file and we

382
00:15:31,190 --> 00:15:35,130
need to offset the tags by whatever this

383
00:15:33,529 --> 00:15:38,100
files tag base is so they point

384
00:15:35,129 --> 00:15:40,259
into the right part of that tag array

385
00:15:38,100 --> 00:15:43,379
right so inside here we're gonna do is

386
00:15:40,259 --> 00:15:46,139
loop over however many assets there were

387
00:15:43,379 --> 00:15:48,929
in this in this sort of group here right

388
00:15:46,139 --> 00:15:51,389
and we know that when we load it in it's

389
00:15:48,929 --> 00:15:53,279
gonna be loaded in at asset count right

390
00:15:51,389 --> 00:15:56,789
because that's how many assets have been

391
00:15:53,279 --> 00:15:58,709
filled so far right so what we want to

392
00:15:56,789 --> 00:16:00,029
do is say at well and you know what we

393
00:15:58,710 --> 00:16:02,970
could even do it if we wanted the

394
00:16:00,029 --> 00:16:05,519
absolute asset index here we could even

395
00:16:02,970 --> 00:16:10,649
do it by just saying start an asset

396
00:16:05,519 --> 00:16:14,970
count and go to asset count plus asset

397
00:16:10,649 --> 00:16:17,340
count plus asset count for type right so

398
00:16:14,970 --> 00:16:19,139
we could go through there and then we

399
00:16:17,340 --> 00:16:21,509
can get the pointer to the asset really

400
00:16:19,139 --> 00:16:24,269
trivially right all we do is say that

401
00:16:21,509 --> 00:16:26,220
the asset is whatever the assets array

402
00:16:24,269 --> 00:16:28,559
is plus the index that we're looking at

403
00:16:26,220 --> 00:16:31,200
that particular asset we now know that

404
00:16:28,559 --> 00:16:37,679
all we have to do is take those tag

405
00:16:31,200 --> 00:16:40,350
offsets right which is right here and

406
00:16:37,679 --> 00:16:49,789
here all we have to do is take those

407
00:16:40,350 --> 00:16:52,710
guys and rebase them right now you know

408
00:16:49,789 --> 00:16:54,299
like I said it's a little bit janky that

409
00:16:52,710 --> 00:16:56,850
we you know we're kind of using these

410
00:16:54,299 --> 00:16:58,109
things flat loaded HHA asset looks like

411
00:16:56,850 --> 00:17:00,509
something that maybe we shouldn't have

412
00:16:58,110 --> 00:17:02,250
flat loaded because it's got extra stuff

413
00:17:00,509 --> 00:17:03,809
in here and we're having to rebase it so

414
00:17:02,250 --> 00:17:05,309
you know six of one half dozen the other

415
00:17:03,809 --> 00:17:07,828
the tag array looks like something we

416
00:17:05,309 --> 00:17:09,299
definitely it was definitely good to

417
00:17:07,828 --> 00:17:11,698
flat load cuz we can just load it in

418
00:17:09,299 --> 00:17:13,799
chunk and it's done whereas the asset

419
00:17:11,699 --> 00:17:15,240
still we got a lot of fussing and so who

420
00:17:13,799 --> 00:17:17,188
knows so maybe that's not such a good

421
00:17:15,240 --> 00:17:19,199
idea and maybe we should just do these

422
00:17:17,189 --> 00:17:21,240
as temporary loads and you know who

423
00:17:19,199 --> 00:17:22,920
knows it's not gonna matter either way

424
00:17:21,240 --> 00:17:24,720
for this game at all it's only done it

425
00:17:22,920 --> 00:17:26,220
startup and it's not gonna take a huge

426
00:17:24,720 --> 00:17:27,809
amount of memory either way because it's

427
00:17:26,220 --> 00:17:29,519
just the metadata but you know I'm just

428
00:17:27,809 --> 00:17:32,309
trying to call things out like that so

429
00:17:29,519 --> 00:17:33,660
you kind of know roughly sort of all the

430
00:17:32,309 --> 00:17:35,490
things that might be stuff that you

431
00:17:33,660 --> 00:17:36,420
would think about when you're when

432
00:17:35,490 --> 00:17:37,559
you're looking at these sorts of things

433
00:17:36,420 --> 00:17:39,539
because maybe you know you're on a

434
00:17:37,559 --> 00:17:41,960
project that has a ton of individual

435
00:17:39,539 --> 00:17:41,960
assets

436
00:17:42,230 --> 00:17:48,409
millions of assets and then you start

437
00:17:45,169 --> 00:17:49,909
caring or something about that how much

438
00:17:48,409 --> 00:17:53,000
data are stored per asset and how much

439
00:17:49,909 --> 00:17:55,429
work you do on load so anyway when we do

440
00:17:53,000 --> 00:17:58,069
that that would rebase the tags for

441
00:17:55,429 --> 00:18:00,169
these assets the assets that were that

442
00:17:58,069 --> 00:18:01,849
we just loaded in and then we would

443
00:18:00,169 --> 00:18:03,769
advance by the number of the asset count

444
00:18:01,849 --> 00:18:06,319
number now what we also need to do is we

445
00:18:03,769 --> 00:18:07,788
need to widen the desk type right but I

446
00:18:06,319 --> 00:18:10,278
think we've already done that right yeah

447
00:18:07,788 --> 00:18:13,250
we have right so if you look here our

448
00:18:10,278 --> 00:18:15,619
desk type R is is already sort of

449
00:18:13,250 --> 00:18:17,480
setting up the asset type bounds for

450
00:18:15,619 --> 00:18:18,829
this particular asset and we set it here

451
00:18:17,480 --> 00:18:20,778
when we're done so that's kind of

452
00:18:18,829 --> 00:18:22,849
already done for us as well so I think

453
00:18:20,778 --> 00:18:25,220
really the only thing left to do here is

454
00:18:22,849 --> 00:18:27,259
to make sure that we actually read in

455
00:18:25,220 --> 00:18:28,970
the data right we have to actually do

456
00:18:27,259 --> 00:18:30,558
that computation so we want to do

457
00:18:28,970 --> 00:18:32,600
platform read data from file we give it

458
00:18:30,558 --> 00:18:34,398
the file handle that we were trying to

459
00:18:32,599 --> 00:18:36,379
do there we know that we're going to

460
00:18:34,398 --> 00:18:39,558
read this many assets in so it's just

461
00:18:36,380 --> 00:18:43,970
gonna be however many assets there are

462
00:18:39,558 --> 00:18:46,158
to read times the size right so that's

463
00:18:43,970 --> 00:18:47,659
all we have to do there that's how big

464
00:18:46,159 --> 00:18:50,299
of a thing we're reading in we know

465
00:18:47,659 --> 00:18:53,389
we're reading in at a particular offset

466
00:18:50,298 --> 00:18:55,278
right as well that offset is a little

467
00:18:53,388 --> 00:18:57,859
bit complicated if we think about it we

468
00:18:55,278 --> 00:19:00,200
have to start by taking the header and

469
00:18:57,859 --> 00:19:02,599
get the assets array offset that's where

470
00:19:00,200 --> 00:19:04,220
that array starts right in the file we

471
00:19:02,599 --> 00:19:07,009
then have to move forwards from the

472
00:19:04,220 --> 00:19:09,710
start of the asset array to the location

473
00:19:07,009 --> 00:19:11,690
where the first asset in this asset type

474
00:19:09,710 --> 00:19:14,750
array is right we have to move forward

475
00:19:11,690 --> 00:19:17,808
by that much so we need to move forward

476
00:19:14,750 --> 00:19:20,509
by that many assets right that jumps to

477
00:19:17,808 --> 00:19:23,388
the correct place and then we know we

478
00:19:20,509 --> 00:19:25,158
have to read however many we're going to

479
00:19:23,388 --> 00:19:27,379
try and read times the size of the asset

480
00:19:25,159 --> 00:19:29,120
so that's all good and then I finally

481
00:19:27,380 --> 00:19:31,039
last but not least we need a place to

482
00:19:29,119 --> 00:19:32,959
put them and we actually already just

483
00:19:31,038 --> 00:19:35,480
sort of said where we would put them we

484
00:19:32,960 --> 00:19:37,159
would put them at the end of the asset

485
00:19:35,480 --> 00:19:38,929
array as it currently exists right

486
00:19:37,159 --> 00:19:41,690
during all of this we might as well

487
00:19:38,929 --> 00:19:44,500
assert that we never go over the asset

488
00:19:41,690 --> 00:19:47,210
count that we said that we should have

489
00:19:44,500 --> 00:19:48,349
and furthermore at the end of this we

490
00:19:47,210 --> 00:19:49,700
should assert that we have the right

491
00:19:48,349 --> 00:19:54,918
number but looks like we already did

492
00:19:49,700 --> 00:19:56,160
that right so that's also fine so that

493
00:19:54,919 --> 00:19:58,410
seems all good and

494
00:19:56,160 --> 00:20:00,180
tag count think here is not really

495
00:19:58,410 --> 00:20:02,730
relevant we didn't end up loading them

496
00:20:00,180 --> 00:20:05,910
that way so that ends up not really

497
00:20:02,730 --> 00:20:07,110
being that big of a deal either so there

498
00:20:05,910 --> 00:20:09,240
we go

499
00:20:07,109 --> 00:20:14,039
and now what we kind of have to do is

500
00:20:09,240 --> 00:20:16,140
start to actually define these these

501
00:20:14,039 --> 00:20:18,059
functions that we are saying that we

502
00:20:16,140 --> 00:20:20,940
want the platform library to support for

503
00:20:18,059 --> 00:20:22,440
us we need to actually go ahead and make

504
00:20:20,940 --> 00:20:28,830
those a reality right we have to

505
00:20:22,440 --> 00:20:30,960
actually do the work of having those

506
00:20:28,829 --> 00:20:33,299
exists because we were writing these

507
00:20:30,960 --> 00:20:35,670
Scotia risk so we were imagining the

508
00:20:33,299 --> 00:20:37,950
best of all possible worlds for the

509
00:20:35,670 --> 00:20:39,740
thing that we were doing here and of

510
00:20:37,950 --> 00:20:43,740
course that's not actually true anymore

511
00:20:39,740 --> 00:20:54,539
so let's see there's a couple different

512
00:20:43,740 --> 00:20:56,370
ways we could do that so I'm trying to

513
00:20:54,539 --> 00:21:01,409
think of how I want to best approach

514
00:20:56,369 --> 00:21:05,609
that so I think I'm gonna first if zero

515
00:21:01,410 --> 00:21:07,050
out this stuff right and I might I we

516
00:21:05,609 --> 00:21:08,429
there's a couple of different ways we

517
00:21:07,049 --> 00:21:10,289
could do I think I'm just gonna avoid

518
00:21:08,430 --> 00:21:12,570
doing baby steps on this one I think I'm

519
00:21:10,289 --> 00:21:14,909
just gonna go full pull on it because I

520
00:21:12,569 --> 00:21:16,950
think it'll be code that that I can step

521
00:21:14,910 --> 00:21:18,120
through and see if that turns out not to

522
00:21:16,950 --> 00:21:21,170
be the case as we get a little further

523
00:21:18,119 --> 00:21:23,759
in it I might do take switched axe and

524
00:21:21,170 --> 00:21:27,660
load through the original file IO

525
00:21:23,759 --> 00:21:29,519
routine and then mock up the API to work

526
00:21:27,660 --> 00:21:31,890
into that but I think that that might

527
00:21:29,519 --> 00:21:33,960
just end up being more work so unless we

528
00:21:31,890 --> 00:21:35,460
hit some debugging snags I don't think

529
00:21:33,960 --> 00:21:38,549
that's what I'm actually going to want

530
00:21:35,460 --> 00:21:41,970
to do so I think we're gonna leave it

531
00:21:38,549 --> 00:21:44,129
this way for now and I'm going to go

532
00:21:41,970 --> 00:21:45,420
ahead and start defining these actual

533
00:21:44,130 --> 00:21:46,980
things in here so those are going to be

534
00:21:45,420 --> 00:21:49,289
in hand may platform right because these

535
00:21:46,980 --> 00:21:53,360
are going to be actual platform API

536
00:21:49,289 --> 00:21:57,269
things that we want to have exist for us

537
00:21:53,359 --> 00:22:01,199
so in here I'm going to go ahead and

538
00:21:57,269 --> 00:22:02,879
define a new struct oops and of course

539
00:22:01,200 --> 00:22:04,700
since we're trying to remain backwards

540
00:22:02,880 --> 00:22:08,220
compatible with C so that other people

541
00:22:04,700 --> 00:22:09,039
who are using the you are not using C++

542
00:22:08,220 --> 00:22:10,360
who

543
00:22:09,039 --> 00:22:11,980
trying to link with our platform layers

544
00:22:10,359 --> 00:22:14,349
or do other stuff like that can can do

545
00:22:11,980 --> 00:22:16,299
it so let's go ahead and make sure that

546
00:22:14,349 --> 00:22:17,740
we support that still so what I'm going

547
00:22:16,299 --> 00:22:21,879
to do here is I'm gonna say that we've

548
00:22:17,740 --> 00:22:24,849
got a platform file handle I guess and I

549
00:22:21,880 --> 00:22:27,550
don't know you know I wonder if it looks

550
00:22:24,849 --> 00:22:28,779
like yeah it looks like for some reason

551
00:22:27,549 --> 00:22:30,309
we kind of have two different naming

552
00:22:28,779 --> 00:22:32,019
schemes so there's like game underscore

553
00:22:30,309 --> 00:22:33,730
and there's also platform underscore but

554
00:22:32,019 --> 00:22:34,990
I guess anything that like reference to

555
00:22:33,730 --> 00:22:37,960
the platform directly as a platform

556
00:22:34,990 --> 00:22:40,210
underscore things so that's fine so we

557
00:22:37,960 --> 00:22:41,410
have a platform file handle right we

558
00:22:40,210 --> 00:22:43,809
don't really know what's gonna go in

559
00:22:41,410 --> 00:22:46,779
there at the moment but we know we're

560
00:22:43,809 --> 00:22:50,679
gonna have one I think also it may be

561
00:22:46,779 --> 00:22:53,349
the case that it's really a four word

562
00:22:50,680 --> 00:22:56,380
declaration right I think we probably

563
00:22:53,349 --> 00:22:58,359
won't ever show what the platform handle

564
00:22:56,380 --> 00:23:01,420
actually is you know so it's probably

565
00:22:58,359 --> 00:23:04,779
something like that where it's actually

566
00:23:01,420 --> 00:23:08,590
a pointer you know so we've got

567
00:23:04,779 --> 00:23:10,089
something like that we also have and I

568
00:23:08,589 --> 00:23:12,639
suppose we could even make it just be a

569
00:23:10,089 --> 00:23:14,619
pointer here right the platform handle

570
00:23:12,640 --> 00:23:15,940
could just be a pointer and then it

571
00:23:14,619 --> 00:23:23,319
would literally be something like this

572
00:23:15,940 --> 00:23:27,820
right something like that so let's see

573
00:23:23,319 --> 00:23:30,399
let's go a little further here so yeah

574
00:23:27,819 --> 00:23:32,139
inside our loading code when we do our

575
00:23:30,400 --> 00:23:34,660
platform work callback stuff they're

576
00:23:32,140 --> 00:23:37,480
inside our loading code we do have the

577
00:23:34,660 --> 00:23:45,790
problem here where we don't actually we

578
00:23:37,480 --> 00:23:47,920
don't really have we don't really have

579
00:23:45,789 --> 00:23:50,409
things set up to to comment this out so

580
00:23:47,920 --> 00:23:51,970
I guess you know while we're compiling

581
00:23:50,410 --> 00:23:54,009
here I don't know if lobsters nor those

582
00:23:51,970 --> 00:23:56,350
errors or if 0 the map maybe just if 0

583
00:23:54,009 --> 00:23:58,299
them out because we're no longer being

584
00:23:56,349 --> 00:24:02,969
able to point directly into the HHA

585
00:23:58,299 --> 00:24:02,970
contents oh well you know what

586
00:24:03,660 --> 00:24:10,990
interestingly enough I guess well no

587
00:24:09,400 --> 00:24:12,250
ever might I take it back I was gonna

588
00:24:10,990 --> 00:24:14,829
say something but but something isn't

589
00:24:12,250 --> 00:24:17,109
true all right so here we go we've got

590
00:24:14,829 --> 00:24:19,960
platform file group so that's another

591
00:24:17,109 --> 00:24:21,908
thing that's got to go into our platform

592
00:24:19,960 --> 00:24:26,110
file right

593
00:24:21,909 --> 00:24:30,610
so we've got a type def struct platform

594
00:24:26,109 --> 00:24:32,589
file group and that's also going to be a

595
00:24:30,609 --> 00:24:34,479
struct that's that's here but I think

596
00:24:32,589 --> 00:24:36,699
this one's actually going to have actual

597
00:24:34,480 --> 00:24:40,028
data I feel like we're going to have

598
00:24:36,700 --> 00:24:42,250
like file count in it like so it returns

599
00:24:40,028 --> 00:24:45,038
how many there are and then also maybe a

600
00:24:42,250 --> 00:24:55,359
data thing where you know that data

601
00:24:45,038 --> 00:24:57,129
thing is how do we say we did file no I

602
00:24:55,359 --> 00:24:58,959
guess so that day I think is opaque so

603
00:24:57,130 --> 00:25:00,789
we don't actually expose what what that

604
00:24:58,960 --> 00:25:02,288
is we just say that well the platform's

605
00:25:00,788 --> 00:25:04,690
got some data we're not going to tell

606
00:25:02,288 --> 00:25:06,879
you what it is you can only access it by

607
00:25:04,690 --> 00:25:08,558
saying platform open file and saying

608
00:25:06,880 --> 00:25:11,820
which of the files from here you want to

609
00:25:08,558 --> 00:25:15,548
open right so that's what I'm gonna do

610
00:25:11,819 --> 00:25:18,250
so let's go ahead and do that one if I

611
00:25:15,548 --> 00:25:21,190
go ahead and copy this in now we have

612
00:25:18,250 --> 00:25:25,509
another function here right I've got a

613
00:25:21,190 --> 00:25:27,278
type def here so I want to do

614
00:25:25,509 --> 00:25:32,980
essentially this the same stuff that we

615
00:25:27,278 --> 00:25:35,308
were doing I want to do that right I

616
00:25:32,980 --> 00:25:37,899
want to make a new platform specific

617
00:25:35,308 --> 00:25:40,269
function and I don't know how many of

618
00:25:37,898 --> 00:25:43,928
these were going to have we'll have a

619
00:25:40,269 --> 00:25:46,750
platform get all files of type right and

620
00:25:43,929 --> 00:25:47,788
that would be in here so let's see let's

621
00:25:46,750 --> 00:25:54,888
go ahead

622
00:25:47,788 --> 00:26:06,058
and and put that in here right platform

623
00:25:54,888 --> 00:26:11,599
get all files type again and that would

624
00:26:06,058 --> 00:26:15,450
be the sky so platform get all files

625
00:26:11,599 --> 00:26:19,138
like again there we go

626
00:26:15,450 --> 00:26:20,848
and what does that take it's this point

627
00:26:19,138 --> 00:26:28,108
it looks like it's just taking an

628
00:26:20,848 --> 00:26:31,319
extension right or a type right so

629
00:26:28,108 --> 00:26:34,470
that's all that's gonna do and then we

630
00:26:31,319 --> 00:26:37,548
also have we've got platform open file

631
00:26:34,470 --> 00:26:41,368
we've got platform read data from file

632
00:26:37,548 --> 00:26:44,989
and we have platform get all files of

633
00:26:41,368 --> 00:26:50,970
type end we also have platform no file

634
00:26:44,989 --> 00:26:53,879
errors and the thing about platform no

635
00:26:50,970 --> 00:26:56,368
file errors that's the kind of thing we

636
00:26:53,878 --> 00:27:00,719
would probably want to be inlined

637
00:26:56,368 --> 00:27:03,658
but I don't know realistically if we

638
00:27:00,720 --> 00:27:08,249
really want to force that I think maybe

639
00:27:03,659 --> 00:27:10,349
we do and so what I might say I'm just

640
00:27:08,249 --> 00:27:13,700
gonna throw this out there what I might

641
00:27:10,348 --> 00:27:17,460
say is let's actually do things this way

642
00:27:13,700 --> 00:27:20,759
where there's a preamble essentially for

643
00:27:17,460 --> 00:27:22,259
all platforms where there's a be 32 or

644
00:27:20,759 --> 00:27:25,679
you know something like that which is

645
00:27:22,259 --> 00:27:28,558
like has errors right

646
00:27:25,679 --> 00:27:31,259
so that way Platt no platform no file

647
00:27:28,558 --> 00:27:33,589
errors when it when it takes a platform

648
00:27:31,259 --> 00:27:38,329
file handle that can just be a nice

649
00:27:33,589 --> 00:27:44,848
inline function basically so platform

650
00:27:38,329 --> 00:27:47,519
file handle right handle that can just

651
00:27:44,848 --> 00:27:52,730
be an inline function that actually just

652
00:27:47,519 --> 00:28:03,410
returns you know the result

653
00:27:52,730 --> 00:28:04,610
is get the handle has errors right so

654
00:28:03,410 --> 00:28:06,590
something like that

655
00:28:04,609 --> 00:28:08,629
of course again if we're trying to

656
00:28:06,589 --> 00:28:12,109
maintain compatibility with C we can't

657
00:28:08,630 --> 00:28:14,690
do an inline here so I guess I would say

658
00:28:12,109 --> 00:28:17,509
you know maybe let's just do it as a

659
00:28:14,690 --> 00:28:19,519
macro so that it'll work everywhere for

660
00:28:17,509 --> 00:28:24,140
everyone right so it would be something

661
00:28:19,519 --> 00:28:26,210
like this right where we say we return

662
00:28:24,140 --> 00:28:27,620
whatever the not has errors is so that

663
00:28:26,210 --> 00:28:29,179
way we don't actually have to have a

664
00:28:27,619 --> 00:28:30,769
round trip through the platform layer

665
00:28:29,179 --> 00:28:34,780
just to check to see whether particular

666
00:28:30,769 --> 00:28:38,119
file handle has an error on it right

667
00:28:34,779 --> 00:28:41,149
okay so these are the actual functions

668
00:28:38,119 --> 00:28:48,428
that we need so we've got type again and

669
00:28:41,150 --> 00:28:57,860
type end right and that is going to take

670
00:28:48,429 --> 00:29:00,530
one of these platform file groups and it

671
00:28:57,859 --> 00:29:01,879
takes an actual file group right yeah

672
00:29:00,529 --> 00:29:04,039
because it's pointing data so it just

673
00:29:01,880 --> 00:29:07,429
takes the whole file group not a pointer

674
00:29:04,039 --> 00:29:08,720
to one platform built type in yeah so

675
00:29:07,429 --> 00:29:13,269
we've got the end there we've got

676
00:29:08,720 --> 00:29:13,269
platform Open File to do

677
00:29:16,630 --> 00:29:23,870
and platform open file is just going to

678
00:29:21,409 --> 00:29:25,940
take at the moment one of those file

679
00:29:23,869 --> 00:29:30,069
groups so it's gonna take a file group

680
00:29:25,940 --> 00:29:37,929
and the file index in that group right

681
00:29:30,069 --> 00:29:41,808
and that is platform open file all right

682
00:29:37,929 --> 00:29:43,730
and then we did begin and end so we

683
00:29:41,808 --> 00:29:46,308
already did that one and so the only

684
00:29:43,730 --> 00:29:50,839
other one we have left is this guy which

685
00:29:46,308 --> 00:29:53,750
is platform read data from file and it

686
00:29:50,839 --> 00:30:01,689
is ready to go platform the data from

687
00:29:53,750 --> 00:30:07,990
file that's just platform file handle

688
00:30:01,690 --> 00:30:13,600
handle you 64 offset you 64 size and

689
00:30:07,990 --> 00:30:16,009
void star desk right click save that

690
00:30:13,599 --> 00:30:18,638
goes from the source reads at this

691
00:30:16,009 --> 00:30:25,158
offset for this much and puts it there

692
00:30:18,638 --> 00:30:29,028
yeah so that is that I think that's

693
00:30:25,159 --> 00:30:31,940
everything that we would need pretty

694
00:30:29,028 --> 00:30:34,759
sure so when we get all these in there

695
00:30:31,940 --> 00:30:36,558
these these guys have to all be passed

696
00:30:34,759 --> 00:30:39,740
down now right this is extending our

697
00:30:36,558 --> 00:30:42,349
platform API so in addition to these

698
00:30:39,740 --> 00:30:45,500
guys right we basically have have this

699
00:30:42,349 --> 00:30:48,109
stuff now and these debug platform free

700
00:30:45,500 --> 00:30:50,679
file memory read into our file these two

701
00:30:48,109 --> 00:30:53,479
we can probably actually get rid of now

702
00:30:50,679 --> 00:30:57,350
because we're actually how we will

703
00:30:53,480 --> 00:31:03,880
actually be having a real file API right

704
00:30:57,349 --> 00:31:03,879
so this is get all files of type begin

705
00:31:03,940 --> 00:31:15,130
and then we've got this guy platform get

706
00:31:11,329 --> 00:31:15,129
all files of type end

707
00:31:16,750 --> 00:31:37,210
platform open file and platform read a

708
00:31:24,640 --> 00:31:38,980
different file so um yeah I think that's

709
00:31:37,210 --> 00:31:47,890
basically all we need from those guys

710
00:31:38,980 --> 00:31:51,308
and I think I'm not sure exactly how I

711
00:31:47,890 --> 00:31:53,620
want to deal with these these folks I

712
00:31:51,308 --> 00:31:55,990
think they could just be Global's that's

713
00:31:53,619 --> 00:31:58,928
sort of how we started to treat like

714
00:31:55,990 --> 00:32:00,308
platform at entry and platform like I

715
00:31:58,929 --> 00:32:02,679
don't know if you guys remember when we

716
00:32:00,308 --> 00:32:05,470
did this we kind of just said all right

717
00:32:02,679 --> 00:32:08,019
these guys are going to just exist out

718
00:32:05,470 --> 00:32:11,589
in the wild and that seems like a pretty

719
00:32:08,019 --> 00:32:13,420
good idea I wonder so I mean just you

720
00:32:11,589 --> 00:32:15,399
know thinking about it if this is just

721
00:32:13,420 --> 00:32:18,910
gonna be our dispatch table right this

722
00:32:15,400 --> 00:32:22,030
is basically our dispatch table for hot

723
00:32:18,910 --> 00:32:24,519
loading to reconnect what we could do is

724
00:32:22,029 --> 00:32:28,149
we could just do something like this

725
00:32:24,519 --> 00:32:31,000
so this is like our platform dispatch or

726
00:32:28,150 --> 00:32:34,360
a platform API like that we could just

727
00:32:31,000 --> 00:32:39,279
say okay you know this stuff since it's

728
00:32:34,359 --> 00:32:42,519
all known right at least these we could

729
00:32:39,279 --> 00:32:44,170
just put them here right and then we

730
00:32:42,519 --> 00:32:46,629
could just say okay when you call this

731
00:32:44,170 --> 00:32:49,660
thing you get an API right you get the

732
00:32:46,630 --> 00:32:52,630
platform API and then that platform API

733
00:32:49,660 --> 00:32:55,779
as a whole would just be the global

734
00:32:52,630 --> 00:32:58,809
variable that would get called you know

735
00:32:55,779 --> 00:33:02,769
that would get copied every time right

736
00:32:58,808 --> 00:33:06,039
and that seems pretty safe to me that

737
00:33:02,769 --> 00:33:06,700
seems like a pretty good idea if that

738
00:33:06,039 --> 00:33:11,889
makes sense

739
00:33:06,700 --> 00:33:14,710
oops at the platform API there that just

740
00:33:11,890 --> 00:33:15,730
seems pretty logical to me that way we

741
00:33:14,710 --> 00:33:17,980
kind of get out of the business of

742
00:33:15,730 --> 00:33:20,349
having to pass around that those

743
00:33:17,980 --> 00:33:25,419
callbacks right

744
00:33:20,349 --> 00:33:26,949
so if we did that and we you know want

745
00:33:25,419 --> 00:33:28,600
to do this we could do play oh and you

746
00:33:26,950 --> 00:33:30,730
know what else we could do since it's

747
00:33:28,599 --> 00:33:31,148
called platform API we could do it this

748
00:33:30,730 --> 00:33:33,610
way

749
00:33:31,148 --> 00:33:36,250
get rid of platform at the front of

750
00:33:33,609 --> 00:33:37,808
everything right and then that platform

751
00:33:36,250 --> 00:33:43,179
is just kind of like the variable

752
00:33:37,808 --> 00:33:43,928
creates a clear textual thing as you use

753
00:33:43,179 --> 00:33:49,778
it right

754
00:33:43,929 --> 00:34:04,889
so it's platform you know arrow add

755
00:33:49,778 --> 00:34:10,389
entry right sorry dot so let's see

756
00:34:04,888 --> 00:34:13,598
platform dot complete all work don't

757
00:34:10,389 --> 00:34:17,289
care about those right now platform dot

758
00:34:13,599 --> 00:34:20,500
add entry these are this is like

759
00:34:17,289 --> 00:34:24,730
platform dot open file platform dot get

760
00:34:20,500 --> 00:34:26,858
all files of type platform dot read a

761
00:34:24,730 --> 00:34:30,969
different file right just grabbing it

762
00:34:26,858 --> 00:34:35,078
out of that oh and then we also have

763
00:34:30,969 --> 00:34:38,049
platform file error right and I don't

764
00:34:35,079 --> 00:34:43,089
know how exactly we want that one to

765
00:34:38,050 --> 00:34:44,619
work we'll see but I'm assuming it will

766
00:34:43,088 --> 00:34:47,500
also have to be a call into the platform

767
00:34:44,619 --> 00:34:49,539
layer all right so we're initializing

768
00:34:47,500 --> 00:34:51,099
here platform get all files of type

769
00:34:49,539 --> 00:34:55,000
begin

770
00:34:51,099 --> 00:34:57,129
I cannot curt void Oh does it not denied

771
00:34:55,000 --> 00:34:59,889
I did not declare it as returning a

772
00:34:57,128 --> 00:35:02,068
value tonight that's not gonna be good

773
00:34:59,889 --> 00:35:05,949
of course it needs to return a value

774
00:35:02,068 --> 00:35:09,699
everyone knows that so yeah so if we

775
00:35:05,949 --> 00:35:11,828
want to do that begin here should do it

776
00:35:09,699 --> 00:35:13,480
that way and the same would be true a

777
00:35:11,829 --> 00:35:18,329
platform open file right that should

778
00:35:13,480 --> 00:35:21,568
take a platform file handle right and

779
00:35:18,329 --> 00:35:21,568
return that

780
00:35:22,199 --> 00:35:28,538
all right so what's going on here file

781
00:35:25,869 --> 00:35:33,130
header so this is this is file header

782
00:35:28,539 --> 00:35:36,220
magickal you file header right Jake

783
00:35:33,130 --> 00:35:39,880
contents game assets

784
00:35:36,219 --> 00:35:40,629
HHA header it's not even over the member

785
00:35:39,880 --> 00:35:45,400
you're right

786
00:35:40,630 --> 00:35:51,190
because not yeah and the same would be

787
00:35:45,400 --> 00:35:56,079
true here file header file header there

788
00:35:51,190 --> 00:35:59,048
we go so let's see platform dot read

789
00:35:56,079 --> 00:36:02,680
data from file again just kind of moving

790
00:35:59,048 --> 00:36:04,929
it up to speed there so asset type ID is

791
00:36:02,679 --> 00:36:06,518
actually desk type ID in this case right

792
00:36:04,929 --> 00:36:09,368
I changed the name of its we're just if

793
00:36:06,518 --> 00:36:12,399
the asset type were writing again these

794
00:36:09,369 --> 00:36:14,108
are just platform dot and now we get to

795
00:36:12,400 --> 00:36:16,599
the sort of other stuff that I sort of

796
00:36:14,108 --> 00:36:18,038
legacy back right here is a platform so

797
00:36:16,599 --> 00:36:20,829
here it's nice we just go platform

798
00:36:18,039 --> 00:36:22,539
equals memory platform API right and

799
00:36:20,829 --> 00:36:26,289
then we just delete these guys they go

800
00:36:22,539 --> 00:36:32,200
away permanently right and then these

801
00:36:26,289 --> 00:36:40,210
just have to be sort of moved up to

802
00:36:32,199 --> 00:36:48,548
something like this right and these guys

803
00:36:40,210 --> 00:36:53,139
here see okay so now we're almost there

804
00:36:48,548 --> 00:36:55,960
oops this one so now we're almost there

805
00:36:53,139 --> 00:36:58,748
but we have to actually sort of start

806
00:36:55,960 --> 00:37:01,960
putting some of these guys in right so

807
00:36:58,748 --> 00:37:04,748
in handmade asset I'm sorry handmade

808
00:37:01,960 --> 00:37:08,889
platform th we actually need all of

809
00:37:04,748 --> 00:37:11,018
these guys right so we need to to set up

810
00:37:08,889 --> 00:37:13,659
this whole API here right this whole

811
00:37:11,018 --> 00:37:16,929
thing needs to actually occur so we need

812
00:37:13,659 --> 00:37:19,538
to do platform get all file to type

813
00:37:16,929 --> 00:37:22,480
right so we need to make it win through

814
00:37:19,539 --> 00:37:26,528
to version of that and we need to make a

815
00:37:22,480 --> 00:37:28,240
wind turn 8:32 version of this yeah you

816
00:37:26,528 --> 00:37:34,530
know

817
00:37:28,239 --> 00:37:34,529
and so on and so forth and open file and

818
00:37:37,079 --> 00:37:46,659
so on right so now we've got all that

819
00:37:44,860 --> 00:37:49,390
wired up and we just need if we you know

820
00:37:46,659 --> 00:37:56,920
can now go implement these actual

821
00:37:49,389 --> 00:37:58,150
functions we'd be all set I thought we

822
00:37:56,920 --> 00:37:59,289
had one though that I didn't implement

823
00:37:58,150 --> 00:37:59,800
shouldn't have given me an error about

824
00:37:59,289 --> 00:38:03,820
that

825
00:37:59,800 --> 00:38:06,430
there it is file error that's the one so

826
00:38:03,820 --> 00:38:10,360
I need to also have that one that's

827
00:38:06,429 --> 00:38:15,009
that's called file error right and so

828
00:38:10,360 --> 00:38:16,630
platform file error and so platform file

829
00:38:15,010 --> 00:38:18,430
error is just a thing that allows us to

830
00:38:16,630 --> 00:38:24,130
note that there's been an error right so

831
00:38:18,429 --> 00:38:28,899
file error file error that for the file

832
00:38:24,130 --> 00:38:30,849
error and that's just all that's gonna

833
00:38:28,900 --> 00:38:32,980
take is just what the error handle was

834
00:38:30,849 --> 00:38:42,179
and then some kind of stupid message for

835
00:38:32,980 --> 00:38:50,230
now right and that's it so off we go and

836
00:38:42,179 --> 00:38:58,329
here API on the end and do one for file

837
00:38:50,230 --> 00:39:01,630
edit and so I think that's just about it

838
00:38:58,329 --> 00:39:04,319
for wiring so now I just have to

839
00:39:01,630 --> 00:39:07,720
actually go and write these functions

840
00:39:04,320 --> 00:39:12,180
and then we would be in good shape so we

841
00:39:07,719 --> 00:39:15,489
would need to do a window sorry a

842
00:39:12,179 --> 00:39:19,960
version of each of these guys so we've

843
00:39:15,489 --> 00:39:22,289
got this one all right that we want to

844
00:39:19,960 --> 00:39:22,289
define

845
00:39:22,590 --> 00:39:52,970
and this one time deal and who's next

846
00:39:33,119 --> 00:39:58,259
from open file we go and two more and

847
00:39:52,969 --> 00:40:00,839
last one and if you're wondering if a

848
00:39:58,260 --> 00:40:02,220
real like if programming languages were

849
00:40:00,840 --> 00:40:03,720
actually cool if they would do this for

850
00:40:02,219 --> 00:40:06,059
you if the truth is just they would but

851
00:40:03,719 --> 00:40:07,379
of course as we know see both less is

852
00:40:06,059 --> 00:40:09,420
too busy adding lots of extraneous

853
00:40:07,380 --> 00:40:11,820
features and never fixing basic things

854
00:40:09,420 --> 00:40:13,280
like this that they should so it's a lot

855
00:40:11,820 --> 00:40:16,170
of typing that doesn't have to happen

856
00:40:13,280 --> 00:40:19,500
but that's just how it goes sometimes

857
00:40:16,170 --> 00:40:21,809
so in here if we now recompile will have

858
00:40:19,500 --> 00:40:23,039
some return value problems right because

859
00:40:21,809 --> 00:40:24,630
we are an extra turning I think of these

860
00:40:23,039 --> 00:40:27,420
but otherwise we were all wired up now

861
00:40:24,630 --> 00:40:29,070
and we call into the platform layer in a

862
00:40:27,420 --> 00:40:31,409
way that's rebind able and hot loaded

863
00:40:29,070 --> 00:40:33,150
full and all that sort of stuff right so

864
00:40:31,409 --> 00:40:36,719
that's all good but we have to actually

865
00:40:33,150 --> 00:40:38,550
do this this sort of wiring for now what

866
00:40:36,719 --> 00:40:41,279
I can do is I can just return zeros

867
00:40:38,550 --> 00:40:45,000
right I could just sort of fake it for

868
00:40:41,280 --> 00:40:51,390
now and so you know file platform file

869
00:40:45,000 --> 00:40:53,550
group here group equals whatever we can

870
00:40:51,389 --> 00:40:55,829
just return complete garbage to get

871
00:40:53,550 --> 00:40:58,560
ourselves compiling so the thing that we

872
00:40:55,829 --> 00:41:03,690
have left to do is when we actually go

873
00:40:58,559 --> 00:41:05,519
to load an actual thing in we now should

874
00:41:03,690 --> 00:41:07,200
we now actually have to load it right

875
00:41:05,519 --> 00:41:09,329
because we did before what we did is

876
00:41:07,199 --> 00:41:10,710
just kind of pointed to the thing that

877
00:41:09,329 --> 00:41:14,610
we wanted but that's not what we

878
00:41:10,710 --> 00:41:16,550
actually want to do because we don't

879
00:41:14,610 --> 00:41:19,590
want to load all the assets at startup

880
00:41:16,550 --> 00:41:20,760
we want to only load assets as we need

881
00:41:19,590 --> 00:41:22,680
them that was the whole point of the

882
00:41:20,760 --> 00:41:25,950
streaming system so what we need to do

883
00:41:22,679 --> 00:41:27,960
here is bitmap memory we actually want

884
00:41:25,949 --> 00:41:29,939
bitmap memory to sort of be some space

885
00:41:27,960 --> 00:41:32,849
that's reserved for us so when we're in

886
00:41:29,940 --> 00:41:33,869
here in load bitmap right what we want

887
00:41:32,849 --> 00:41:38,069
to do in load

888
00:41:33,869 --> 00:41:42,000
Mapp is push on space for the eventual

889
00:41:38,070 --> 00:41:45,150
bitmap right so in here when we do work

890
00:41:42,000 --> 00:41:47,369
when we do work err a bitmap we also

891
00:41:45,150 --> 00:41:50,070
want to do work bitmap equals push size

892
00:41:47,369 --> 00:41:53,369
right and we want to reserve a memory

893
00:41:50,070 --> 00:41:55,410
slot for it right and actually if you

894
00:41:53,369 --> 00:42:01,440
look at what happens here all of this

895
00:41:55,409 --> 00:42:03,659
stuff actually can just be done pretty

896
00:42:01,440 --> 00:42:06,929
much you know like the work order for

897
00:42:03,659 --> 00:42:11,849
this thing actually doesn't need to do

898
00:42:06,929 --> 00:42:14,669
this stuff I just want to point this out

899
00:42:11,849 --> 00:42:16,500
because again like if you're new to this

900
00:42:14,670 --> 00:42:18,480
sort of stuff a lot of these things I'm

901
00:42:16,500 --> 00:42:20,039
kind of programming is a very sort of

902
00:42:18,480 --> 00:42:22,110
fluid process obviously and it's easy

903
00:42:20,039 --> 00:42:24,389
for people to forget how things are

904
00:42:22,110 --> 00:42:26,190
going so if you think about why we wrote

905
00:42:24,389 --> 00:42:28,440
the function this way originally back

906
00:42:26,190 --> 00:42:30,329
when we wrote it why were these things

907
00:42:28,440 --> 00:42:32,940
getting filled out in thus in the

908
00:42:30,329 --> 00:42:34,829
threaded asset loading system and the

909
00:42:32,940 --> 00:42:38,519
reason was because we didn't know what

910
00:42:34,829 --> 00:42:40,679
the width of a bitmap was when we went

911
00:42:38,519 --> 00:42:42,690
to load it until we actually pulled in

912
00:42:40,679 --> 00:42:45,059
the bitmap file so if we wanted to do

913
00:42:42,690 --> 00:42:47,909
multi-threaded loading we had to defer

914
00:42:45,059 --> 00:42:49,769
that computation of all the extraneous

915
00:42:47,909 --> 00:42:51,690
bitmap data until we actually loaded the

916
00:42:49,769 --> 00:42:54,630
bitmap file but now that we have an

917
00:42:51,690 --> 00:42:56,369
asset processor right that information

918
00:42:54,630 --> 00:42:58,710
has been pulled out into a metadata

919
00:42:56,369 --> 00:43:00,480
structure that we load at startup that's

920
00:42:58,710 --> 00:43:03,420
very small that we can just load

921
00:43:00,480 --> 00:43:05,579
instantly right so we know we have the

922
00:43:03,420 --> 00:43:09,210
metadata it's only the the payload

923
00:43:05,579 --> 00:43:11,519
that's off in you know in the asset file

924
00:43:09,210 --> 00:43:13,380
that has to get pulled in and so since

925
00:43:11,519 --> 00:43:17,269
we have that data we can actually move

926
00:43:13,380 --> 00:43:19,500
all of this stuff out and our work order

927
00:43:17,269 --> 00:43:21,630
that has to go into the threading system

928
00:43:19,500 --> 00:43:25,559
could actually be the same for both

929
00:43:21,630 --> 00:43:28,349
sounds and and bitmaps probably to a

930
00:43:25,559 --> 00:43:32,219
large extent because we don't actually

931
00:43:28,349 --> 00:43:34,139
have to do anything specific to them

932
00:43:32,219 --> 00:43:36,239
really the only thing I can think of

933
00:43:34,139 --> 00:43:37,920
that we might know there's nothing we

934
00:43:36,239 --> 00:43:40,049
would need to do we just so really all

935
00:43:37,920 --> 00:43:43,800
we have to do now is load a little a

936
00:43:40,050 --> 00:43:46,530
chunk of memory and that's all it has to

937
00:43:43,800 --> 00:43:47,460
do so we can collapse these things

938
00:43:46,530 --> 00:43:50,310
together I guess

939
00:43:47,460 --> 00:43:51,780
what I'm saying so I think I would like

940
00:43:50,309 --> 00:43:53,849
to do that so what I want to do now

941
00:43:51,780 --> 00:43:57,840
again this is kind of a handy little

942
00:43:53,849 --> 00:44:01,049
baby steps sort of a situation here oops

943
00:43:57,840 --> 00:44:02,600
let me get rid of that so let's let's go

944
00:44:01,050 --> 00:44:05,490
ahead and continue our baby stepping

945
00:44:02,599 --> 00:44:07,139
because I realized there's a good one

946
00:44:05,489 --> 00:44:11,429
good thing we could do baby step wise

947
00:44:07,139 --> 00:44:13,710
right move this back up to the top for a

948
00:44:11,429 --> 00:44:16,529
second and so what we could do baby

949
00:44:13,710 --> 00:44:23,280
steps wise is I can if there are this

950
00:44:16,530 --> 00:44:26,730
out again right like so and return us to

951
00:44:23,280 --> 00:44:29,400
the previous asset loading where we just

952
00:44:26,730 --> 00:44:33,420
load the whole asset fowl you know in

953
00:44:29,400 --> 00:44:34,980
its entirety right and all I have to do

954
00:44:33,420 --> 00:44:37,349
that is report this to that thing that

955
00:44:34,980 --> 00:44:42,349
we did there right so if we test to

956
00:44:37,349 --> 00:44:42,349
verify that that's working right

957
00:44:44,659 --> 00:44:49,858
right so that's all good all the assets

958
00:44:47,548 --> 00:44:53,280
are loading properly so all I really

959
00:44:49,858 --> 00:44:55,380
need to do now is go do those changes

960
00:44:53,280 --> 00:44:56,849
that I was about to do of prepping the

961
00:44:55,380 --> 00:44:58,858
bitmaps and using a slightly different

962
00:44:56,849 --> 00:45:01,769
thing for loading when we have something

963
00:44:58,858 --> 00:45:03,480
everything working like it is that gives

964
00:45:01,769 --> 00:45:04,889
us the flexibility to do this and know

965
00:45:03,480 --> 00:45:07,500
that we haven't introduced any bugs in

966
00:45:04,889 --> 00:45:10,259
this change before we go do the other

967
00:45:07,500 --> 00:45:12,000
part of using the new file loading

968
00:45:10,260 --> 00:45:12,900
routines which you know could be their

969
00:45:12,000 --> 00:45:16,230
own set of bugs so again just

970
00:45:12,900 --> 00:45:18,358
partitioning the work into clear passes

971
00:45:16,230 --> 00:45:20,130
so that again it minimizes the amount of

972
00:45:18,358 --> 00:45:22,440
time they have to spend debugging

973
00:45:20,130 --> 00:45:25,470
problems with the code and that's just

974
00:45:22,440 --> 00:45:27,599
always a good time saver right so what

975
00:45:25,469 --> 00:45:29,608
I'm gonna do here is I'm going to try to

976
00:45:27,599 --> 00:45:31,859
try to see if I can say that there's

977
00:45:29,608 --> 00:45:32,670
another thing here instead of load

978
00:45:31,858 --> 00:45:35,190
bitmap work

979
00:45:32,670 --> 00:45:37,588
there's just load asset work right and

980
00:45:35,190 --> 00:45:43,588
all load asset work is it's an offset

981
00:45:37,588 --> 00:45:46,409
right a size to load if you will and in

982
00:45:43,588 --> 00:45:48,750
a destination that's it so the only

983
00:45:46,409 --> 00:45:52,288
thing this thing is going to do is it's

984
00:45:48,750 --> 00:45:57,210
just going to execute that that load up

985
00:45:52,289 --> 00:46:03,390
and that's that's it nothing else right

986
00:45:57,210 --> 00:46:05,849
so if I want to do that all I would have

987
00:46:03,389 --> 00:46:06,449
to do right is take what this routine is

988
00:46:05,849 --> 00:46:09,359
doing here

989
00:46:06,449 --> 00:46:13,980
same exact stuff and now it's gonna do

990
00:46:09,358 --> 00:46:15,210
load asset work like so and it's not

991
00:46:13,980 --> 00:46:16,559
going to think about the asset at all

992
00:46:15,210 --> 00:46:18,599
it's not going to get the loaded bitmaps

993
00:46:16,559 --> 00:46:23,160
and that stuff right doesn't have to do

994
00:46:18,599 --> 00:46:25,859
any of this right all it has to do is

995
00:46:23,159 --> 00:46:32,028
know how to do the completion stuff and

996
00:46:25,858 --> 00:46:33,449
then how to end the tasks right so hmm

997
00:46:32,028 --> 00:46:36,329
let's see

998
00:46:33,449 --> 00:46:38,669
what will I need for just that so I need

999
00:46:36,329 --> 00:46:46,760
the tasks right

1000
00:46:38,670 --> 00:46:53,630
and it looks like here I don't quite see

1001
00:46:46,760 --> 00:46:53,630
exactly how this thing is working so

1002
00:46:53,760 --> 00:47:00,720
work bitmap it's assigning the pointer

1003
00:46:57,570 --> 00:47:06,870
but why didn't we just always assign the

1004
00:47:00,719 --> 00:47:10,409
pointer first I'm a little confused

1005
00:47:06,869 --> 00:47:13,170
about that because I feel like all I

1006
00:47:10,409 --> 00:47:16,230
should really have to do is that right

1007
00:47:13,170 --> 00:47:19,050
so really all I need here is the asset

1008
00:47:16,230 --> 00:47:22,740
slot right I just need the slot that

1009
00:47:19,050 --> 00:47:24,780
it's getting set right in fact I could

1010
00:47:22,739 --> 00:47:26,519
even make it a little bit more

1011
00:47:24,780 --> 00:47:29,460
ridiculous than that and say it's not

1012
00:47:26,519 --> 00:47:31,800
even the asset slot it's actually just

1013
00:47:29,460 --> 00:47:34,289
you know the assets stake

1014
00:47:31,800 --> 00:47:36,000
even but I don't know if we need to go

1015
00:47:34,289 --> 00:47:38,400
that far so I'll say that we use the

1016
00:47:36,000 --> 00:47:40,949
slot and we could always change that if

1017
00:47:38,400 --> 00:47:43,470
we need to but so you know this is what

1018
00:47:40,949 --> 00:47:45,859
I'm actually talking about so basically

1019
00:47:43,469 --> 00:47:49,919
this routine would look something like

1020
00:47:45,860 --> 00:47:53,519
do the platform dot read data from file

1021
00:47:49,920 --> 00:47:56,039
right at the work specified offset the

1022
00:47:53,519 --> 00:47:59,130
work specified size into the work

1023
00:47:56,039 --> 00:48:00,389
specified destination and I guess oh

1024
00:47:59,130 --> 00:48:10,500
yeah one other thing we need is a

1025
00:48:00,389 --> 00:48:12,449
platform file handle right mmm I just

1026
00:48:10,500 --> 00:48:14,039
thought of one way we're not gonna waste

1027
00:48:12,449 --> 00:48:15,379
space in a particular place as well

1028
00:48:14,039 --> 00:48:17,670
that's pretty good

1029
00:48:15,380 --> 00:48:18,840
alright because when we when we need to

1030
00:48:17,670 --> 00:48:23,280
get this file handled that will be

1031
00:48:18,840 --> 00:48:26,100
interesting all right so taking a look

1032
00:48:23,280 --> 00:48:30,060
at this we do this this thing here this

1033
00:48:26,099 --> 00:48:33,509
this exactly what we expect and I feel

1034
00:48:30,059 --> 00:48:35,219
like you know we might we might have to

1035
00:48:33,510 --> 00:48:38,460
do a check here right we might have to

1036
00:48:35,219 --> 00:48:42,209
do something like this platform no file

1037
00:48:38,460 --> 00:48:45,570
errors right we would need to check to

1038
00:48:42,210 --> 00:48:47,670
make sure that whatever the file handle

1039
00:48:45,570 --> 00:48:50,940
is didn't peter out on us right didn't

1040
00:48:47,670 --> 00:48:53,309
didn't die because we don't want to say

1041
00:48:50,940 --> 00:48:56,369
that we loaded it if we didn't write if

1042
00:48:53,309 --> 00:48:58,559
we couldn't and there's a couple of ways

1043
00:48:56,369 --> 00:49:00,059
we could do that look we could choose to

1044
00:48:58,559 --> 00:49:06,179
check that like I could do something

1045
00:49:00,059 --> 00:49:07,409
here where I say oh and what is final

1046
00:49:06,179 --> 00:49:09,899
state

1047
00:49:07,409 --> 00:49:13,889
Oh was loaded or locked so we need that

1048
00:49:09,900 --> 00:49:15,450
one as well there we go all right so we

1049
00:49:13,889 --> 00:49:17,639
could also choose to fill in some

1050
00:49:15,449 --> 00:49:20,548
garbage here like some like make it all

1051
00:49:17,639 --> 00:49:22,980
bright pink or something if or you know

1052
00:49:20,548 --> 00:49:25,079
all white or something are all zeros if

1053
00:49:22,980 --> 00:49:26,849
it doesn't succeed so if the file error

1054
00:49:25,079 --> 00:49:28,470
if this turns out to be wrong we could

1055
00:49:26,849 --> 00:49:30,119
still set it to its final state but put

1056
00:49:28,469 --> 00:49:31,858
garbage in there I don't know if we'd

1057
00:49:30,119 --> 00:49:34,528
rather do that or rather try to keep

1058
00:49:31,858 --> 00:49:37,440
trying to load it so I don't know well

1059
00:49:34,528 --> 00:49:40,920
we can do you know play with that a

1060
00:49:37,440 --> 00:49:47,630
little bit later on right as we go and

1061
00:49:40,920 --> 00:49:53,190
so there's like a to do to do should we

1062
00:49:47,630 --> 00:49:57,599
actually fill in bogus data here and set

1063
00:49:53,190 --> 00:50:00,389
to final state anyway right but that's

1064
00:49:57,599 --> 00:50:02,818
only in an era scenario so you know as

1065
00:50:00,389 --> 00:50:04,078
long as we don't crash it's it's not

1066
00:50:02,818 --> 00:50:06,119
clear that we want to do anything in

1067
00:50:04,079 --> 00:50:10,349
particular so that's fine

1068
00:50:06,119 --> 00:50:12,028
all right so right if I compile that see

1069
00:50:10,349 --> 00:50:13,140
if we've got everything here so that's

1070
00:50:12,028 --> 00:50:21,960
work slot

1071
00:50:13,139 --> 00:50:23,909
state load bitmap work that's because I

1072
00:50:21,960 --> 00:50:27,210
named it wrong let's just reload assets

1073
00:50:23,909 --> 00:50:29,548
there we go all right so that's not

1074
00:50:27,210 --> 00:50:32,400
getting called so what I want to do now

1075
00:50:29,548 --> 00:50:34,829
is switch the bitmap loading function to

1076
00:50:32,400 --> 00:50:37,769
use load asset work instead of using

1077
00:50:34,829 --> 00:50:40,140
load bitmap work and have it do all of

1078
00:50:37,768 --> 00:50:42,588
the work right when we called load

1079
00:50:40,139 --> 00:50:46,650
bitmap do all of this setup work

1080
00:50:42,588 --> 00:50:49,528
directly right so what I want to do is I

1081
00:50:46,650 --> 00:50:53,910
want to basically grab this stuff right

1082
00:50:49,528 --> 00:50:57,329
and I want to go ahead and and make all

1083
00:50:53,909 --> 00:51:01,139
this happen right so up front you know I

1084
00:50:57,329 --> 00:51:03,359
want to do all of this right and then

1085
00:51:01,139 --> 00:51:05,929
we're going to totally ifs def this guy

1086
00:51:03,358 --> 00:51:05,929
out entirely

1087
00:51:06,730 --> 00:51:14,320
there we go okay so what's all the stuff

1088
00:51:11,829 --> 00:51:16,299
that we need to set up now right so we

1089
00:51:14,320 --> 00:51:17,950
come in here and we set you know all the

1090
00:51:16,300 --> 00:51:21,220
stuff that was going to be used for the

1091
00:51:17,949 --> 00:51:22,539
for the work order right and all that

1092
00:51:21,219 --> 00:51:24,459
stuff is we're gonna have to still do

1093
00:51:22,539 --> 00:51:27,250
but let's let's take care of this stuff

1094
00:51:24,460 --> 00:51:29,949
first so we have our work bitmap here

1095
00:51:27,250 --> 00:51:33,010
right and we're initializing all of its

1096
00:51:29,949 --> 00:51:34,689
stuff if we grab out the info for the

1097
00:51:33,010 --> 00:51:37,630
asset like we would be doing and that's

1098
00:51:34,690 --> 00:51:39,608
just be this be doing this right if we

1099
00:51:37,630 --> 00:51:41,470
set all this stuff up then we don't have

1100
00:51:39,608 --> 00:51:45,699
to do any of it obviously anymore in the

1101
00:51:41,469 --> 00:51:47,879
in the in in this part of the code so

1102
00:51:45,699 --> 00:51:53,199
all we need to do here is just reserve

1103
00:51:47,880 --> 00:51:56,230
space for the bitmap to be loaded so we

1104
00:51:53,199 --> 00:51:58,329
can just do a push here right in the

1105
00:51:56,230 --> 00:52:00,849
giving assets let me read you know in

1106
00:51:58,329 --> 00:52:05,679
the arena we can just do a push sorry

1107
00:52:00,849 --> 00:52:07,599
sighs right of how big the how big it's

1108
00:52:05,679 --> 00:52:09,069
actually going to be and obviously

1109
00:52:07,599 --> 00:52:11,199
that's just gonna be the size that would

1110
00:52:09,070 --> 00:52:13,840
actually get read so if you remember up

1111
00:52:11,199 --> 00:52:17,409
here we said in the work slot it would

1112
00:52:13,840 --> 00:52:20,650
just be this size right here right so

1113
00:52:17,409 --> 00:52:24,129
I'm gonna go ahead and do that amount

1114
00:52:20,650 --> 00:52:26,800
we're gonna make that room right and so

1115
00:52:24,130 --> 00:52:27,670
that's can well I guess you know what

1116
00:52:26,800 --> 00:52:31,090
there's kind of a chicken and egg thing

1117
00:52:27,670 --> 00:52:33,670
there so I'll just say you know memory

1118
00:52:31,090 --> 00:52:35,320
size or something right and we'll do

1119
00:52:33,670 --> 00:52:39,340
that up here so I'll just say we have

1120
00:52:35,320 --> 00:52:48,119
memory size and the memory size is going

1121
00:52:39,340 --> 00:52:50,980
to be the info well it's the pitch right

1122
00:52:48,119 --> 00:52:53,950
times the height that's the total memory

1123
00:52:50,980 --> 00:52:55,990
size so that's how many how much space

1124
00:52:53,949 --> 00:52:57,519
we actually need for the bitmap we go

1125
00:52:55,989 --> 00:53:00,339
ahead and reserve that much space for

1126
00:52:57,519 --> 00:53:04,179
the bitmap and then we can fill out our

1127
00:53:00,340 --> 00:53:06,309
work order right and put that on there

1128
00:53:04,179 --> 00:53:08,349
and that will just be in the task arena

1129
00:53:06,309 --> 00:53:10,389
so it's just temporary memory right so

1130
00:53:08,349 --> 00:53:12,489
we do load asset work and we want to

1131
00:53:10,389 --> 00:53:15,569
grab that out so let's take a look oops

1132
00:53:12,489 --> 00:53:22,069
and I gotta actually

1133
00:53:15,570 --> 00:53:24,269
I said work in the asset work struct I

1134
00:53:22,070 --> 00:53:29,789
have to fill out all of this stuff all

1135
00:53:24,269 --> 00:53:37,409
right so let's see where was work tasks

1136
00:53:29,789 --> 00:53:40,800
being actually filled out you know where

1137
00:53:37,409 --> 00:53:42,889
was that actually getting set oh there

1138
00:53:40,800 --> 00:53:45,780
it is right there

1139
00:53:42,889 --> 00:53:48,539
so we've got to fill out work tasks we

1140
00:53:45,780 --> 00:53:52,200
want to fill out work slot right which

1141
00:53:48,539 --> 00:53:55,019
is just gonna be this essentially write

1142
00:53:52,199 --> 00:54:00,809
a set slots we want to fill out the work

1143
00:53:55,019 --> 00:54:06,750
slot really know why these were not

1144
00:54:00,809 --> 00:54:07,820
phrased as pluses all right so grab all

1145
00:54:06,750 --> 00:54:10,469
that stuff out

1146
00:54:07,820 --> 00:54:11,640
we then need the platform file handle

1147
00:54:10,469 --> 00:54:15,989
this is the part that I've said Oh we'll

1148
00:54:11,639 --> 00:54:18,029
be able to save some space we'll talk

1149
00:54:15,989 --> 00:54:20,609
about that in a second we need the

1150
00:54:18,030 --> 00:54:25,590
offset in the file so where it actually

1151
00:54:20,610 --> 00:54:31,620
was and that is this right

1152
00:54:25,590 --> 00:54:35,789
it's that date data offset five-minute

1153
00:54:31,619 --> 00:54:37,500
warning cushaw so right I need the

1154
00:54:35,789 --> 00:54:39,690
offset there it is

1155
00:54:37,500 --> 00:54:42,690
I need the size and we've already

1156
00:54:39,690 --> 00:54:49,070
computed that memory size we don't need

1157
00:54:42,690 --> 00:54:53,840
the assets we don't need the ID the work

1158
00:54:49,070 --> 00:55:02,340
bitmap we do actually need obviously

1159
00:54:53,840 --> 00:55:05,820
that's just going to be bitmap yeah so

1160
00:55:02,340 --> 00:55:08,220
is all that stuff set then bitmap and

1161
00:55:05,820 --> 00:55:10,470
then we got final States so all we need

1162
00:55:08,219 --> 00:55:13,709
is destination and the destination is

1163
00:55:10,469 --> 00:55:16,319
the bitmap memory right so I think

1164
00:55:13,710 --> 00:55:17,760
that's the complete work order right

1165
00:55:16,320 --> 00:55:24,809
that's everything that's filled out and

1166
00:55:17,760 --> 00:55:28,380
the slot right the work slot I I just

1167
00:55:24,809 --> 00:55:29,369
don't see why we can't preset it to be

1168
00:55:28,380 --> 00:55:32,068
the bitmap

1169
00:55:29,369 --> 00:55:35,729
right I don't really see why we can't do

1170
00:55:32,068 --> 00:55:39,568
that because when you do when you when

1171
00:55:35,728 --> 00:55:42,298
you get the asset okay as I guess we're

1172
00:55:39,568 --> 00:55:45,869
actually kind of using that as the thing

1173
00:55:42,298 --> 00:55:47,759
so I feel like that's just sloppy and we

1174
00:55:45,869 --> 00:55:49,710
don't really want that what we want to

1175
00:55:47,759 --> 00:55:53,068
do is make sure that the asset is

1176
00:55:49,710 --> 00:55:55,079
actually loaded right I feel like that's

1177
00:55:53,068 --> 00:55:58,969
the cleaner way to do it and I don't

1178
00:55:55,079 --> 00:55:58,969
know why we weren't doing that exactly

1179
00:56:01,009 --> 00:56:04,588
like it just doesn't does it make sense

1180
00:56:03,478 --> 00:56:06,679
to you because it doesn't super make

1181
00:56:04,588 --> 00:56:09,690
sense to me why we wouldn't just do

1182
00:56:06,679 --> 00:56:11,578
something like asset equals zero and

1183
00:56:09,690 --> 00:56:14,690
then do the F here now maybe it's just

1184
00:56:11,579 --> 00:56:19,559
cuz we're trying to avoid him if right

1185
00:56:14,690 --> 00:56:22,829
but I don't know and so we could just do

1186
00:56:19,559 --> 00:56:25,999
that up here right we could set the

1187
00:56:22,829 --> 00:56:29,579
pointer but it just feels like why do

1188
00:56:25,998 --> 00:56:31,828
extra work in the threaded part why why

1189
00:56:29,579 --> 00:56:34,650
put you know sort of set up work up

1190
00:56:31,829 --> 00:56:35,818
there when we don't really you know wet

1191
00:56:34,650 --> 00:56:37,650
something that could have just been done

1192
00:56:35,818 --> 00:56:38,818
clean in line then we know that it

1193
00:56:37,650 --> 00:56:39,630
doesn't have to be thread safe and

1194
00:56:38,818 --> 00:56:41,909
doesn't have to be all these other

1195
00:56:39,630 --> 00:56:43,380
things right like why pile any more

1196
00:56:41,909 --> 00:56:46,710
stuff there than we need to because the

1197
00:56:43,380 --> 00:56:49,798
less stuff we can have being multi

1198
00:56:46,710 --> 00:56:51,269
thread dependent right the better in

1199
00:56:49,798 --> 00:56:54,420
that sense unless we really think we

1200
00:56:51,268 --> 00:56:57,298
need it for the speed or something so if

1201
00:56:54,420 --> 00:57:01,048
we go ahead and do the get bitmap we

1202
00:56:57,298 --> 00:57:05,068
could change that to just look to see

1203
00:57:01,048 --> 00:57:07,949
whether the state of the thing is in a

1204
00:57:05,068 --> 00:57:11,518
state where it could be used and that

1205
00:57:07,949 --> 00:57:14,248
seems fairly reasonable I don't know

1206
00:57:11,518 --> 00:57:17,098
like I said I'm a little wofully about

1207
00:57:14,248 --> 00:57:20,399
it but if you take a look here we could

1208
00:57:17,099 --> 00:57:23,969
basically just say you know the result

1209
00:57:20,400 --> 00:57:32,509
equals zero or you know what we could

1210
00:57:23,969 --> 00:57:32,509
even just do a set slot slot equals

1211
00:57:32,539 --> 00:57:40,650
asset slots plus ID value and then we

1212
00:57:36,239 --> 00:57:45,359
could just do slot state greater than or

1213
00:57:40,650 --> 00:57:49,769
equal to asset loaded if so return the

1214
00:57:45,360 --> 00:57:52,170
bitmap otherwise don't write and that

1215
00:57:49,769 --> 00:57:55,230
would be a pretty trivial way to make

1216
00:57:52,170 --> 00:57:59,309
sure that we were always returning the

1217
00:57:55,230 --> 00:58:01,050
right thing all right and so if I do

1218
00:57:59,309 --> 00:58:03,179
that then I don't have to worry about

1219
00:58:01,050 --> 00:58:07,050
this anymore so I can I can just you

1220
00:58:03,179 --> 00:58:10,859
know I can I can not have to do anything

1221
00:58:07,050 --> 00:58:14,960
particularly odd there right so that

1222
00:58:10,860 --> 00:58:21,740
seems all good and so for the moment

1223
00:58:14,960 --> 00:58:21,740
like I said this particular part is is

1224
00:58:22,010 --> 00:58:31,770
whoops cannot convert loaded sound

1225
00:58:26,849 --> 00:58:35,900
yes that's totally true okay all right

1226
00:58:31,769 --> 00:58:40,440
so assets assets that's actually just

1227
00:58:35,900 --> 00:58:44,820
assets let's see here loaded bitmap work

1228
00:58:40,440 --> 00:58:49,769
that's load asset work alright

1229
00:58:44,820 --> 00:58:50,370
assets is just assets let's see anything

1230
00:58:49,769 --> 00:58:57,239
else

1231
00:58:50,369 --> 00:59:01,170
assets slots is it just slots it is and

1232
00:58:57,239 --> 00:59:03,119
bitmap is equal to bitmap yeah it's not

1233
00:59:01,170 --> 00:59:08,450
a member of load asset work oh well

1234
00:59:03,119 --> 00:59:16,279
that's true it's not it is not and

1235
00:59:08,449 --> 00:59:16,279
that's just equal to work slot equals

1236
00:59:20,010 --> 00:59:31,260
uh I think I think we're just about done

1237
00:59:27,090 --> 00:59:33,350
with that right I think we've basically

1238
00:59:31,260 --> 00:59:36,420
finished everything that we need to do

1239
00:59:33,349 --> 00:59:37,650
so the only caveat there now that

1240
00:59:36,420 --> 00:59:40,200
everything's being taken care of there

1241
00:59:37,650 --> 00:59:43,050
is since we are still not quite doing

1242
00:59:40,199 --> 00:59:45,719
the file stuff right when we come up in

1243
00:59:43,050 --> 00:59:49,740
here so we got to basically do you know

1244
00:59:45,719 --> 00:59:53,429
something like this where we would

1245
00:59:49,739 --> 00:59:54,509
actually set that data you know we would

1246
00:59:53,429 --> 01:00:01,980
actually have to do sort of the data

1247
00:59:54,510 --> 01:00:06,600
load here but you know I'm thinking that

1248
01:00:01,980 --> 01:00:09,329
what I would like to do is in here

1249
01:00:06,599 --> 01:00:13,139
directly when we would have gone ahead

1250
01:00:09,329 --> 01:00:14,610
and done that done that task what I want

1251
01:00:13,139 --> 01:00:17,400
to do is I'm going to just go to nuke

1252
01:00:14,610 --> 01:00:21,349
the task for now you know so make it so

1253
01:00:17,400 --> 01:00:21,349
it doesn't actually do anything right

1254
01:00:21,650 --> 01:00:25,889
other than do the complete right they

1255
01:00:25,079 --> 01:00:29,670
get so it doesn't actually do anything

1256
01:00:25,889 --> 01:00:32,969
and I'll just set the I'll actually just

1257
01:00:29,670 --> 01:00:34,680
set the correct data value in here right

1258
01:00:32,969 --> 01:00:36,719
and that way I'll at least be able to

1259
01:00:34,679 --> 01:00:38,460
see if it's it's pseudo working or not

1260
01:00:36,719 --> 01:00:39,869
right but it's basically just sort of

1261
01:00:38,460 --> 01:00:42,809
cheating it out just saying oh wait

1262
01:00:39,869 --> 01:00:45,230
actually we'll just you know point to

1263
01:00:42,809 --> 01:00:45,230
the right data

1264
01:00:50,199 --> 01:00:56,739
oh yeah well we can't really call that

1265
01:00:54,849 --> 01:00:58,449
either yet until we have a valid file

1266
01:00:56,739 --> 01:01:08,289
handle so I guess that's another thing

1267
01:00:58,449 --> 01:01:09,669
that we have to if zero out all right so

1268
01:01:08,289 --> 01:01:11,559
number back to loading so that's good

1269
01:01:09,670 --> 01:01:14,110
and I think we have everything in

1270
01:01:11,559 --> 01:01:16,840
position now to just as soon as we

1271
01:01:14,110 --> 01:01:20,050
implement the win32 side of things that

1272
01:01:16,840 --> 01:01:22,510
we need we should be good to go right

1273
01:01:20,050 --> 01:01:25,420
and we couldn't do the exact same thing

1274
01:01:22,510 --> 01:01:27,640
to audio so we can change the audio over

1275
01:01:25,420 --> 01:01:29,800
to do exact you know pull this into the

1276
01:01:27,639 --> 01:01:31,539
audio side as well so that's what we'll

1277
01:01:29,800 --> 01:01:35,170
do next week but I want to go ahead and

1278
01:01:31,539 --> 01:01:37,059
go to QA so let's let's do exactly that

1279
01:01:35,170 --> 01:01:41,470
let's go to Q&amp;A if you have any

1280
01:01:37,059 --> 01:01:45,130
questions about what we did you ask them

1281
01:01:41,469 --> 01:01:54,669
now put a Q : in front of them so I can

1282
01:01:45,130 --> 01:01:56,800
see with this system is it possible to

1283
01:01:54,670 --> 01:01:59,500
add an updated version of an asset in a

1284
01:01:56,800 --> 01:02:01,780
new HHA file without modifying the

1285
01:01:59,500 --> 01:02:05,739
original how would the IDs work in this

1286
01:02:01,780 --> 01:02:10,630
case yes so what's interesting about

1287
01:02:05,739 --> 01:02:13,029
that is yes you actually could you could

1288
01:02:10,630 --> 01:02:14,890
in certain circumstances and not in

1289
01:02:13,030 --> 01:02:16,660
others we would have to do a little more

1290
01:02:14,889 --> 01:02:19,929
work in certain circumstances than

1291
01:02:16,659 --> 01:02:25,059
others and the reason I say that is for

1292
01:02:19,929 --> 01:02:28,059
tag for tag matched queries it would

1293
01:02:25,059 --> 01:02:30,489
just work because what we could do is

1294
01:02:28,059 --> 01:02:32,619
just you know if we wanted to say that

1295
01:02:30,489 --> 01:02:38,259
certain HHA files had preference over

1296
01:02:32,619 --> 01:02:41,019
previous HHA files right then we then

1297
01:02:38,260 --> 01:02:42,880
whatever was the last asset that was

1298
01:02:41,019 --> 01:02:44,440
concatenated on would be the one that

1299
01:02:42,880 --> 01:02:46,470
would be picked or whichever the first

1300
01:02:44,440 --> 01:02:50,050
one is whichever way we do it basically

1301
01:02:46,469 --> 01:02:54,309
you know if you take a look at in here

1302
01:02:50,050 --> 01:02:56,019
we've got those asset queries that that

1303
01:02:54,309 --> 01:02:58,110
you can use to that we were using to get

1304
01:02:56,019 --> 01:03:02,739
the assets back from like a tag right

1305
01:02:58,110 --> 01:03:03,720
from a from a tag vector so when we were

1306
01:03:02,739 --> 01:03:06,029
doing that when we do

1307
01:03:03,719 --> 01:03:09,598
guess the best match to get best match

1308
01:03:06,030 --> 01:03:10,829
bitmap right that calls into here and it

1309
01:03:09,599 --> 01:03:13,440
mm-hmm

1310
01:03:10,829 --> 01:03:15,000
where is that this one right here it

1311
01:03:13,440 --> 01:03:19,108
calls into here and what this is gonna

1312
01:03:15,000 --> 01:03:22,800
do is it's gonna pick the first it's

1313
01:03:19,108 --> 01:03:25,170
gonna prefer the first thing if a bunch

1314
01:03:22,800 --> 01:03:28,318
of different assets in the in that asset

1315
01:03:25,170 --> 01:03:30,900
type had the same match amount it's

1316
01:03:28,318 --> 01:03:33,809
gonna prefer the one that came first

1317
01:03:30,900 --> 01:03:34,829
right because it's a greater than if

1318
01:03:33,809 --> 01:03:37,049
it's greater than or equal it would

1319
01:03:34,829 --> 01:03:39,568
further one came last so basically if we

1320
01:03:37,050 --> 01:03:44,250
just sorted when we load if we sort our

1321
01:03:39,568 --> 01:03:47,159
HHA files by newest to oldest then you

1322
01:03:44,250 --> 01:03:50,460
would automatically replace any asset

1323
01:03:47,159 --> 01:03:56,279
you know with a with with the new one

1324
01:03:50,460 --> 01:03:57,389
but for ones where you're in an asset

1325
01:03:56,280 --> 01:04:01,710
type right you're just picking a random

1326
01:03:57,389 --> 01:04:05,400
one that that wouldn't work right that

1327
01:04:01,710 --> 01:04:06,990
would not do it now I don't really know

1328
01:04:05,400 --> 01:04:09,289
if I care about that like I'm not

1329
01:04:06,989 --> 01:04:11,489
thinking of hhas as our patch system

1330
01:04:09,289 --> 01:04:14,608
right which is when you would presumably

1331
01:04:11,489 --> 01:04:16,409
do that but I don't know maybe if you

1332
01:04:14,608 --> 01:04:22,348
wanted it as a mod as a way to mob

1333
01:04:16,409 --> 01:04:23,279
things yeah I'm not sure so if we wanted

1334
01:04:22,349 --> 01:04:26,460
to do something where we actually

1335
01:04:23,280 --> 01:04:30,480
replaced assets we would have to do

1336
01:04:26,460 --> 01:04:32,460
something we would have to have some way

1337
01:04:30,480 --> 01:04:35,150
in the HHA file we have to like add

1338
01:04:32,460 --> 01:04:39,389
essentially some kind of annotation that

1339
01:04:35,150 --> 01:04:42,079
told it to get rid of some asset from a

1340
01:04:39,389 --> 01:04:51,509
previous file right that said like don't

1341
01:04:42,079 --> 01:04:53,160
use this other asset anymore and to be

1342
01:04:51,510 --> 01:05:00,119
honest you know that's not that hard to

1343
01:04:53,159 --> 01:05:02,608
add really I feel like that's really not

1344
01:05:00,119 --> 01:05:04,829
that bad so if we really wanted to do

1345
01:05:02,608 --> 01:05:07,259
that we could write and the way that we

1346
01:05:04,829 --> 01:05:10,890
would do that in a in a pretty trivial

1347
01:05:07,260 --> 01:05:14,329
way right he is inside here we'd

1348
01:05:10,889 --> 01:05:14,328
basically have a thing that was

1349
01:05:19,090 --> 01:05:40,010
something like this so we'd say all

1350
01:05:36,380 --> 01:05:42,920
right I'm going to have a way of

1351
01:05:40,010 --> 01:05:45,170
specifying a table that says I want you

1352
01:05:42,920 --> 01:05:48,230
to get rid of some of the assets from

1353
01:05:45,170 --> 01:05:54,130
some other file right so it would be

1354
01:05:48,230 --> 01:05:54,130
like you know wid something like this

1355
01:05:55,989 --> 01:06:04,959
and you would have this in the file

1356
01:06:01,099 --> 01:06:11,030
itself and then here you would have

1357
01:06:04,960 --> 01:06:13,460
asset index right and then when we

1358
01:06:11,030 --> 01:06:16,820
loaded each individual file in we would

1359
01:06:13,460 --> 01:06:18,679
take the asset removal table and we

1360
01:06:16,820 --> 01:06:22,760
would for any file that matches that

1361
01:06:18,679 --> 01:06:24,769
asset removal table as grid we would we

1362
01:06:22,760 --> 01:06:26,869
would just not as we were spinning over

1363
01:06:24,769 --> 01:06:30,769
the assets we would not grab that

1364
01:06:26,869 --> 01:06:32,960
particular asset index right so if we

1365
01:06:30,769 --> 01:06:35,539
wanted to do that we could so if we

1366
01:06:32,960 --> 01:06:37,519
wanted to allow you to replace certain

1367
01:06:35,539 --> 01:06:38,690
assets or even just remove them like you

1368
01:06:37,519 --> 01:06:40,309
don't actually have to replace it with

1369
01:06:38,690 --> 01:06:43,429
something you could literally just have

1370
01:06:40,309 --> 01:06:47,358
a file that that nerfs out a previous

1371
01:06:43,429 --> 01:06:50,649
files one of its assets right that would

1372
01:06:47,358 --> 01:06:50,650
probably be this proposed trade forward

1373
01:06:51,550 --> 01:06:57,320
what will get rid of the initial flicker

1374
01:06:53,869 --> 01:06:58,700
of the character at startup so basically

1375
01:06:57,320 --> 01:07:01,580
right now we don't try to preload

1376
01:06:58,699 --> 01:07:03,469
anything that makes sense so what

1377
01:07:01,579 --> 01:07:05,329
happens is the first frame on which an

1378
01:07:03,469 --> 01:07:07,759
asset is used is the first time that the

1379
01:07:05,329 --> 01:07:10,190
asset system has a as is told that it

1380
01:07:07,760 --> 01:07:12,080
needs to load it and so you're never

1381
01:07:10,190 --> 01:07:13,760
going to it's not going to be able to

1382
01:07:12,079 --> 01:07:15,769
load it instantaneously it's putting it

1383
01:07:13,760 --> 01:07:20,030
into a thread to be loaded later so

1384
01:07:15,769 --> 01:07:21,570
anytime you encounter a new thing it

1385
01:07:20,030 --> 01:07:23,730
will blink right

1386
01:07:21,570 --> 01:07:25,830
so the thing that will get rid of that

1387
01:07:23,730 --> 01:07:28,230
is just we will introduce some limited

1388
01:07:25,829 --> 01:07:29,549
pre-caching stuff its won't be super

1389
01:07:28,230 --> 01:07:33,510
complicated but basically all we'll do

1390
01:07:29,550 --> 01:07:35,760
is stuff that says ahead of time hey you

1391
01:07:33,510 --> 01:07:38,070
know warm up these sprites because like

1392
01:07:35,760 --> 01:07:39,900
this monster we know it's you know we

1393
01:07:38,070 --> 01:07:42,030
caught it sort of know what's on you

1394
01:07:39,900 --> 01:07:43,500
know in our in our region we know more

1395
01:07:42,030 --> 01:07:45,300
than what's just on the screen we know

1396
01:07:43,500 --> 01:07:48,360
like a fairly big apron around the

1397
01:07:45,300 --> 01:07:49,860
screen we'll just say hey precache you

1398
01:07:48,360 --> 01:07:51,030
know start loading all those guys

1399
01:07:49,860 --> 01:07:53,010
because you're going to need them and

1400
01:07:51,030 --> 01:07:57,200
that way they'll always be there in time

1401
01:07:53,010 --> 01:07:57,200
we won't have to work that makes sense

1402
01:08:05,239 --> 01:08:09,889
as a programmer in putting a game with

1403
01:08:07,130 --> 01:08:11,510
fairly simple graphics any suggestions

1404
01:08:09,889 --> 01:08:13,219
on finding somebody to commission art

1405
01:08:11,510 --> 01:08:16,039
assets from or similar if you don't

1406
01:08:13,219 --> 01:08:18,259
happen to know a good digital artist not

1407
01:08:16,039 --> 01:08:19,850
really that's sort of a not really a

1408
01:08:18,259 --> 01:08:20,899
handmade hero kind of topic if that

1409
01:08:19,850 --> 01:08:38,120
makes sense that's that's not a

1410
01:08:20,899 --> 01:08:47,528
programming thing anybody else all done

1411
01:08:38,119 --> 01:08:47,528
lazy Friday which I am totally fine with

1412
01:08:52,988 --> 01:09:04,689
it's looking quiet yeah all right well

1413
01:09:01,649 --> 01:09:07,929
that's all good we can wind down for

1414
01:09:04,689 --> 01:09:10,960
today I think we've got everything in

1415
01:09:07,930 --> 01:09:13,838
place now although I do want to I didn't

1416
01:09:10,960 --> 01:09:18,009
quite get time today to move the audio I

1417
01:09:13,838 --> 01:09:24,579
like to I'd like to move the audio

1418
01:09:18,009 --> 01:09:27,670
system so you know in handmade asset dot

1419
01:09:24,579 --> 01:09:31,568
H that's our dot CP what I'd like to do

1420
01:09:27,670 --> 01:09:34,088
is I'd like to take a load sound and I'd

1421
01:09:31,569 --> 01:09:36,400
like to move load sound to use just that

1422
01:09:34,088 --> 01:09:38,170
load asset so instead of having another

1423
01:09:36,399 --> 01:09:39,579
work queue callback for sound I'd get

1424
01:09:38,170 --> 01:09:42,190
rid of that so they both could go to the

1425
01:09:39,579 --> 01:09:44,170
same one both bitmaps and audio would go

1426
01:09:42,189 --> 01:09:47,048
for the same one which is this one sorry

1427
01:09:44,170 --> 01:09:48,520
which is this one right so I'd like to

1428
01:09:47,048 --> 01:09:50,890
move the audio over there get that

1429
01:09:48,520 --> 01:09:55,739
working as well so make sure everybody's

1430
01:09:50,890 --> 01:09:58,619
happy and then we implement the win32

1431
01:09:55,738 --> 01:10:00,509
platform later calls that we expect and

1432
01:09:58,619 --> 01:10:05,079
we're good to go

1433
01:10:00,510 --> 01:10:06,699
that would be it and then we're moving

1434
01:10:05,079 --> 01:10:07,750
on to like the very hardest part of the

1435
01:10:06,699 --> 01:10:09,149
asset system because a lot of this stuff

1436
01:10:07,750 --> 01:10:12,219
has been pretty easy as you've seen

1437
01:10:09,149 --> 01:10:15,009
where we'll move on to the the hard part

1438
01:10:12,219 --> 01:10:17,380
which is basically how we want to deal

1439
01:10:15,010 --> 01:10:19,350
with if we've got a bigger asset

1440
01:10:17,380 --> 01:10:22,239
footprint then we'll fit in memory

1441
01:10:19,350 --> 01:10:24,789
eventually right so you know if the

1442
01:10:22,238 --> 01:10:27,789
users machine has two gigs of physical

1443
01:10:24,789 --> 01:10:30,488
memory and we're using you know half a

1444
01:10:27,789 --> 01:10:34,149
gig for game day there or something and

1445
01:10:30,488 --> 01:10:38,319
we want to use you know so we want 1.5

1446
01:10:34,149 --> 01:10:41,319
gigs to be spent on resources you know

1447
01:10:38,319 --> 01:10:44,500
the question is how do we deal with that

1448
01:10:41,319 --> 01:10:48,759
you know how do we handle when we don't

1449
01:10:44,500 --> 01:10:51,189
have when we have four gigs of art

1450
01:10:48,760 --> 01:10:52,690
assets you know we're gonna be loading

1451
01:10:51,189 --> 01:10:55,419
them in and eventually manage to a point

1452
01:10:52,689 --> 01:10:58,238
where we have to start flushing stuff

1453
01:10:55,420 --> 01:10:59,560
out to make room for other things and so

1454
01:10:58,238 --> 01:11:01,500
like I said it's kind of like we have to

1455
01:10:59,560 --> 01:11:05,200
implement our own virtual memory system

1456
01:11:01,500 --> 01:11:06,250
because we want to try and have this

1457
01:11:05,199 --> 01:11:13,119
like constant win

1458
01:11:06,250 --> 01:11:14,800
if that makes sense so so that will be

1459
01:11:13,119 --> 01:11:16,359
pretty challenging but that's really all

1460
01:11:14,800 --> 01:11:20,440
that's left in the asset system that's

1461
01:11:16,359 --> 01:11:22,269
that's kind of tricky and and so we kind

1462
01:11:20,439 --> 01:11:24,789
of saved the worst for last if you will

1463
01:11:22,270 --> 01:11:28,930
and so I don't know where that puts us -

1464
01:11:24,789 --> 01:11:32,199
on our on our to-do list did we already

1465
01:11:28,930 --> 01:11:35,530
do this I don't think we did that yeah

1466
01:11:32,199 --> 01:11:40,989
yeah but that's on there so yeah I feel

1467
01:11:35,529 --> 01:11:44,859
like I feel like we're kind of gonna eat

1468
01:11:40,989 --> 01:11:46,750
all this up I feel like we've I feel

1469
01:11:44,859 --> 01:11:48,939
like we've actually done all of those

1470
01:11:46,750 --> 01:11:51,460
all you have to do is pretty much right

1471
01:11:48,939 --> 01:11:52,869
I mean we'll spend a little more time on

1472
01:11:51,460 --> 01:11:56,289
them later on when we do the game stuff

1473
01:11:52,869 --> 01:11:58,899
but we are able to play both both types

1474
01:11:56,289 --> 01:12:01,779
of sounds now ambient sounds music and

1475
01:11:58,899 --> 01:12:03,729
everything we can do and our asset

1476
01:12:01,779 --> 01:12:06,069
streaming we've all we really have to do

1477
01:12:03,729 --> 01:12:07,839
is this memory management one and so

1478
01:12:06,069 --> 01:12:11,859
we'll be able to basically do a huge

1479
01:12:07,840 --> 01:12:15,390
chunk checked off here yeah it's getting

1480
01:12:11,859 --> 01:12:19,229
good it's gonna be exciting all right

1481
01:12:15,390 --> 01:12:21,640
okay let's wind it down close everybody

1482
01:12:19,229 --> 01:12:23,979
and I don't know what that's supposed to

1483
01:12:21,640 --> 01:12:28,840
be that was me drawing where we're

1484
01:12:23,979 --> 01:12:32,319
loading the tags so yeah let's close all

1485
01:12:28,840 --> 01:12:33,640
that down and say thank you everyone for

1486
01:12:32,319 --> 01:12:35,139
joining me for another episode of hand

1487
01:12:33,640 --> 01:12:36,940
made here it has been a pleasure coding

1488
01:12:35,140 --> 01:12:38,710
with you as always I am gonna be very

1489
01:12:36,939 --> 01:12:41,469
happy to see the asset system all nice

1490
01:12:38,710 --> 01:12:43,989
and bundled up so I think next week will

1491
01:12:41,470 --> 01:12:45,430
be a fun week it will get us probably up

1492
01:12:43,989 --> 01:12:47,199
to the point where we're sort of doing

1493
01:12:45,430 --> 01:12:48,490
the memory management but we're not

1494
01:12:47,199 --> 01:12:49,449
gonna finish the memory management next

1495
01:12:48,489 --> 01:12:51,159
week because there's gonna be some

1496
01:12:49,449 --> 01:12:52,449
trickiness there so I think we're

1497
01:12:51,159 --> 01:12:54,340
looking at probably two weeks before we

1498
01:12:52,449 --> 01:12:56,619
can check that off our list for good

1499
01:12:54,340 --> 01:12:58,150
and then yeah audio kind of looked

1500
01:12:56,619 --> 01:13:00,039
almost done - will maybe take a quick

1501
01:12:58,149 --> 01:13:01,659
peek back at that and see if there's

1502
01:13:00,039 --> 01:13:03,970
anything else you want to do engine wise

1503
01:13:01,659 --> 01:13:05,710
on the audio before checking that off -

1504
01:13:03,970 --> 01:13:08,350
and then we're just down to renderer and

1505
01:13:05,710 --> 01:13:10,989
debug code and the renderer we did a lot

1506
01:13:08,350 --> 01:13:13,240
of the hard work so we're really man

1507
01:13:10,989 --> 01:13:16,929
this is looking good it's looking good

1508
01:13:13,239 --> 01:13:19,510
people 200 days may turn out to not have

1509
01:13:16,930 --> 01:13:20,110
been such a crazy estimate which is only

1510
01:13:19,510 --> 01:13:22,930
like

1511
01:13:20,109 --> 01:13:24,639
200 hours I don't know let's say 210 220

1512
01:13:22,930 --> 01:13:26,170
hours to account for some of the Mareth

1513
01:13:24,640 --> 01:13:28,660
like yes we've done one marathon stream

1514
01:13:26,170 --> 01:13:31,930
and we did one two hour stream but man

1515
01:13:28,659 --> 01:13:34,659
that is so few hours and we're gonna

1516
01:13:31,930 --> 01:13:37,360
have a pretty awesome 2d engine to play

1517
01:13:34,659 --> 01:13:40,389
with for such a few number of hours it's

1518
01:13:37,359 --> 01:13:43,389
like you know five work weeks starting

1519
01:13:40,390 --> 01:13:45,760
from nothing so I don't know it's gonna

1520
01:13:43,390 --> 01:13:47,170
be pretty sweet and I'm pretty excited

1521
01:13:45,760 --> 01:13:51,489
about it I hope you're excited about too

1522
01:13:47,170 --> 01:13:53,140
and yeah so I will go ahead and wind

1523
01:13:51,489 --> 01:13:55,210
things down thank you very much for

1524
01:13:53,140 --> 01:13:58,240
joining me I will see you hopefully here

1525
01:13:55,210 --> 01:13:59,829
back on Monday probably 5 p.m. sir

1526
01:13:58,239 --> 01:14:01,809
daylight time again but be sure to check

1527
01:13:59,829 --> 01:14:03,489
the tweet bot you can always go to

1528
01:14:01,810 --> 01:14:07,000
hammer here oregon check the old tweet

1529
01:14:03,489 --> 01:14:09,909
bot to find out when the stream will be

1530
01:14:07,000 --> 01:14:11,649
if you want to know also as always if

1531
01:14:09,909 --> 01:14:12,909
you want to follow along at home if you

1532
01:14:11,649 --> 01:14:14,799
preorder the game on handmade here at

1533
01:14:12,909 --> 01:14:16,689
org you can get access to the source

1534
01:14:14,800 --> 01:14:17,980
code every night where you can download

1535
01:14:16,689 --> 01:14:20,139
it and play around with it at home and

1536
01:14:17,979 --> 01:14:21,459
experiment all that good stuff we also

1537
01:14:20,140 --> 01:14:24,070
have a forum site where we have

1538
01:14:21,460 --> 01:14:25,750
community annotated episode guide to

1539
01:14:24,069 --> 01:14:27,849
pass videos if you want to catch up on

1540
01:14:25,750 --> 01:14:30,939
older videos we have a forum for you to

1541
01:14:27,850 --> 01:14:32,920
ask questions we have community ports to

1542
01:14:30,939 --> 01:14:35,079
Mac and Linux that they've got so a lot

1543
01:14:32,920 --> 01:14:37,329
of good stuff there we also a patreon

1544
01:14:35,079 --> 01:14:39,069
page that you can go to if you want

1545
01:14:37,329 --> 01:14:40,569
support the video series so check all

1546
01:14:39,069 --> 01:14:42,039
that stuff out on handmade org when you

1547
01:14:40,569 --> 01:14:44,079
get a chance there's some good stuff up

1548
01:14:42,039 --> 01:14:46,000
there all right thank you everyone and

1549
01:14:44,079 --> 01:14:47,949
I'll see you back here on Monday until

1550
01:14:46,000 --> 01:14:51,090
then have fun programming and I will see

1551
01:14:47,949 --> 01:14:51,090
you guys on the Internet's

