1
00:00:01,879 --> 00:00:05,939
hello everyone and welcome to handmade

2
00:00:04,290 --> 00:00:09,900
heroes show recode a complete game live

3
00:00:05,940 --> 00:00:12,839
on stream yesterday we moved all of our

4
00:00:09,900 --> 00:00:15,630
debug control code over into using our

5
00:00:12,839 --> 00:00:17,579
sort of new debug interface stuff but we

6
00:00:15,630 --> 00:00:19,410
didn't get a chance to actually turn any

7
00:00:17,579 --> 00:00:21,118
of that on we just kind of did all the

8
00:00:19,410 --> 00:00:22,920
work of like planning it out and making

9
00:00:21,118 --> 00:00:25,320
it into macros and putting it into the

10
00:00:22,920 --> 00:00:28,500
debug stream and all that stuff but we

11
00:00:25,320 --> 00:00:30,480
don't actually have any way of actually

12
00:00:28,500 --> 00:00:35,219
testing it yet so what we're going to do

13
00:00:30,480 --> 00:00:37,079
here is wire that up and this will kind

14
00:00:35,219 --> 00:00:38,969
of be nice too because now we don't have

15
00:00:37,079 --> 00:00:41,009
to go through a compile cycle to switch

16
00:00:38,969 --> 00:00:43,050
debug switches on and off anymore they

17
00:00:41,009 --> 00:00:44,219
can just be switched in real time which

18
00:00:43,049 --> 00:00:45,959
is going to be nice because we just

19
00:00:44,219 --> 00:00:47,609
found when we tested it going through a

20
00:00:45,960 --> 00:00:49,230
compile cycle for that even though is

21
00:00:47,609 --> 00:00:51,600
only a few seconds is just a little too

22
00:00:49,229 --> 00:00:53,308
long kind of want it to be roughly

23
00:00:51,600 --> 00:00:56,399
instantaneous you know roughly one frame

24
00:00:53,308 --> 00:00:58,799
of lag instead of you know a hundred

25
00:00:56,399 --> 00:01:02,340
twenty frames of lag or however many it

26
00:00:58,799 --> 00:01:04,408
is when msvc gets involved so that's

27
00:01:02,340 --> 00:01:07,710
what we'll be doing today today is day 2

28
00:01:04,409 --> 00:01:09,510
14 so if you are following along at home

29
00:01:07,709 --> 00:01:12,478
with the source code because you're one

30
00:01:09,510 --> 00:01:15,780
of those folks who ordered it on a hopi

31
00:01:12,478 --> 00:01:17,400
art of the game you want to unpack day

32
00:01:15,780 --> 00:01:20,159
213 source code because that's what i'm

33
00:01:17,400 --> 00:01:22,140
starting with today so go ahead and do

34
00:01:20,159 --> 00:01:28,259
that and you will be right where i am

35
00:01:22,140 --> 00:01:31,310
right now all right so where we left

36
00:01:28,259 --> 00:01:34,140
things was we were compiling properly

37
00:01:31,310 --> 00:01:36,689
where we had all of our d bucks which is

38
00:01:34,140 --> 00:01:39,629
actually compiling out and doing the

39
00:01:36,688 --> 00:01:41,459
things that they needed to do but we

40
00:01:39,629 --> 00:01:44,489
want to now start to have them show up

41
00:01:41,459 --> 00:01:46,048
in here and in order to do that

42
00:01:44,489 --> 00:01:49,530
obviously we're going to have to have

43
00:01:46,049 --> 00:01:53,189
some way of having them you know

44
00:01:49,530 --> 00:01:57,269
actually wired into the system right so

45
00:01:53,188 --> 00:01:59,849
what we do know so far is if you take a

46
00:01:57,269 --> 00:02:01,769
look at handmade debug H what we do know

47
00:01:59,849 --> 00:02:04,530
is we've done the work and I'll also

48
00:02:01,769 --> 00:02:07,379
love instructions in sorry interface at

49
00:02:04,530 --> 00:02:09,628
H what we do know is that when these

50
00:02:07,379 --> 00:02:11,340
things if we turn off the the sort of

51
00:02:09,628 --> 00:02:13,669
nullification of them because we did it

52
00:02:11,340 --> 00:02:16,400
right here where we sort of had a

53
00:02:13,669 --> 00:02:17,958
of turning them off like this which you

54
00:02:16,400 --> 00:02:19,580
know eventually is something that would

55
00:02:17,959 --> 00:02:21,979
only happen here in fact we can go ahead

56
00:02:19,580 --> 00:02:23,900
and move that down here now this is the

57
00:02:21,979 --> 00:02:25,909
thing that kind of turns them off so if

58
00:02:23,900 --> 00:02:27,289
they are turned on what we know is that

59
00:02:25,909 --> 00:02:30,469
they're going to call a thing called

60
00:02:27,289 --> 00:02:35,590
initialize debug value and really our

61
00:02:30,469 --> 00:02:38,389
job at this point he is to go ahead and

62
00:02:35,590 --> 00:02:42,019
figure out how we're going to get things

63
00:02:38,389 --> 00:02:45,109
that Hall oops this actually probably

64
00:02:42,019 --> 00:02:46,879
should be that guy things that call that

65
00:02:45,110 --> 00:02:48,440
initialize debug value thing we need to

66
00:02:46,879 --> 00:02:54,739
get those working so that they show up

67
00:02:48,439 --> 00:02:56,120
in the hierarchy soothing okay we looks

68
00:02:54,739 --> 00:03:00,200
like we have a situation here where we

69
00:02:56,120 --> 00:03:02,539
didn't quite fix this one debug if just

70
00:03:00,199 --> 00:03:05,000
uses a path now so we can do it like

71
00:03:02,539 --> 00:03:07,370
that it looks like is that correct or is

72
00:03:05,000 --> 00:03:09,049
that actually wrong and antiquated I

73
00:03:07,370 --> 00:03:12,500
think that's right that's that's fine

74
00:03:09,049 --> 00:03:15,110
all right so yeah what we need to do now

75
00:03:12,500 --> 00:03:17,269
is we need to figure out some way it

76
00:03:15,110 --> 00:03:20,870
looks like there's a bug in this thing

77
00:03:17,269 --> 00:03:22,609
here now which is for some reason when

78
00:03:20,870 --> 00:03:24,140
it's doing the concatenation was doing

79
00:03:22,609 --> 00:03:26,900
the pasting it's still getting debug

80
00:03:24,139 --> 00:03:28,429
variable variable what's the I see it's

81
00:03:26,900 --> 00:03:31,280
because this is supposed to be path or

82
00:03:28,430 --> 00:03:32,780
even update that one so what we need to

83
00:03:31,280 --> 00:03:37,489
do is actually get these guys working

84
00:03:32,780 --> 00:03:39,319
and figure out some way to make sure

85
00:03:37,489 --> 00:03:40,489
that they kind of get exposed in our

86
00:03:39,319 --> 00:03:41,780
debug hierarchy and it looks like we

87
00:03:40,489 --> 00:03:44,599
also have to bug variable have to finish

88
00:03:41,780 --> 00:03:46,159
that one as well so looking at debug

89
00:03:44,599 --> 00:03:49,009
variable it looks like path is getting

90
00:03:46,159 --> 00:03:51,650
use somewhere perhaps where path is not

91
00:03:49,009 --> 00:03:52,909
supposed to be used yep that needs to be

92
00:03:51,650 --> 00:03:55,909
string eyes and it wasn't string a nice

93
00:03:52,909 --> 00:03:57,680
but now I think we're good and so now

94
00:03:55,909 --> 00:03:59,959
we're just at the point where

95
00:03:57,680 --> 00:04:02,180
initialized debug value is going to have

96
00:03:59,959 --> 00:04:04,099
to actually get fielded by our debug

97
00:04:02,180 --> 00:04:05,719
code right we've got everything

98
00:04:04,099 --> 00:04:07,129
compiling and doing its thing but we

99
00:04:05,719 --> 00:04:09,139
need somewhere where this is actually

100
00:04:07,129 --> 00:04:12,139
going to sort of cook in to the debug

101
00:04:09,139 --> 00:04:14,179
system right so let's go ahead and make

102
00:04:12,139 --> 00:04:18,918
that happen I feel like it should

103
00:04:14,180 --> 00:04:20,720
probably actually have had as well you

104
00:04:18,918 --> 00:04:22,158
know since this is kind of an entry

105
00:04:20,720 --> 00:04:24,919
point I feel like this should actually

106
00:04:22,158 --> 00:04:25,800
be debug initialized value or something

107
00:04:24,918 --> 00:04:28,378
like that

108
00:04:25,800 --> 00:04:30,270
um something like this where it's

109
00:04:28,379 --> 00:04:31,830
actually got the debug prefix in front

110
00:04:30,269 --> 00:04:37,258
of it just so it's clear what's going on

111
00:04:31,829 --> 00:04:43,668
there may be something like this like

112
00:04:37,259 --> 00:04:46,650
that okay and with something like that

113
00:04:43,668 --> 00:04:48,089
now we know that any time we see one of

114
00:04:46,649 --> 00:04:49,918
these debug values in the code it's

115
00:04:48,089 --> 00:04:51,149
going to come in like this and really

116
00:04:49,918 --> 00:04:52,560
what we need to do now is we need to

117
00:04:51,149 --> 00:04:55,168
figure out a way of ligand hooking that

118
00:04:52,560 --> 00:04:57,000
into our system hooking that into the

119
00:04:55,168 --> 00:04:58,769
system is not going to be particularly

120
00:04:57,000 --> 00:05:01,079
difficult at the moment I don't think

121
00:04:58,769 --> 00:05:02,490
because all we really need to do is

122
00:05:01,079 --> 00:05:03,990
create one of our little debug

123
00:05:02,490 --> 00:05:06,300
hierarchies and it can be basically a

124
00:05:03,990 --> 00:05:08,250
static hierarchy right because it's not

125
00:05:06,300 --> 00:05:09,718
something that changes every frame it's

126
00:05:08,250 --> 00:05:11,490
something that's consistent across the

127
00:05:09,718 --> 00:05:12,779
entire program for the most part the

128
00:05:11,490 --> 00:05:15,538
only thing that we have to worry about

129
00:05:12,779 --> 00:05:18,689
is whenever the program gets reloaded

130
00:05:15,538 --> 00:05:20,699
right those static values are going to

131
00:05:18,689 --> 00:05:23,639
vaporize right the static values are

132
00:05:20,699 --> 00:05:25,199
going to go away so if we if we want our

133
00:05:23,639 --> 00:05:27,090
system to work with our dynamic code

134
00:05:25,199 --> 00:05:28,800
loading we have to be a little bit more

135
00:05:27,089 --> 00:05:31,619
careful with how that's going to work

136
00:05:28,800 --> 00:05:33,689
exactly but other than that we should be

137
00:05:31,620 --> 00:05:35,848
fine right other than that we should be

138
00:05:33,689 --> 00:05:37,560
fine now there's ways we could make it

139
00:05:35,848 --> 00:05:41,788
work where we don't have to worry about

140
00:05:37,560 --> 00:05:42,930
that as much but I think we want to do

141
00:05:41,788 --> 00:05:44,158
it the way that we're doing it so far

142
00:05:42,930 --> 00:05:46,199
for a number of reasons we'll see as we

143
00:05:44,158 --> 00:05:47,339
kind of go in there but basically what

144
00:05:46,199 --> 00:05:49,408
that means is when we do debug

145
00:05:47,339 --> 00:05:52,709
initialized value you can see here that

146
00:05:49,408 --> 00:05:54,959
this gets past is sort of the the static

147
00:05:52,709 --> 00:05:56,758
value that it's actually talking about

148
00:05:54,959 --> 00:05:58,829
right and sort of what I'm talking about

149
00:05:56,759 --> 00:06:01,889
here is when the the debug system

150
00:05:58,829 --> 00:06:04,050
reloads does a reload that is going to

151
00:06:01,889 --> 00:06:05,728
invalidate all of these pointers right

152
00:06:04,050 --> 00:06:08,129
because if you see what happens here the

153
00:06:05,728 --> 00:06:10,439
way that I've set it up is whenever you

154
00:06:08,129 --> 00:06:12,960
declare one of these debug variables an

155
00:06:10,439 --> 00:06:14,819
if or a regular one it creates a debug

156
00:06:12,959 --> 00:06:16,500
variable that's local to the stack of

157
00:06:14,819 --> 00:06:18,060
that function but persistent so it's

158
00:06:16,500 --> 00:06:19,560
like a global variable but that's only

159
00:06:18,060 --> 00:06:20,610
local to the scope of that function so

160
00:06:19,560 --> 00:06:24,509
other people can't reference it

161
00:06:20,610 --> 00:06:27,479
obviously it creates that value and then

162
00:06:24,509 --> 00:06:31,199
that value is something that's going to

163
00:06:27,478 --> 00:06:32,639
be twiddled with by the debug system

164
00:06:31,199 --> 00:06:35,399
mean the debug system have to reach in

165
00:06:32,639 --> 00:06:37,769
there and change what the value actually

166
00:06:35,399 --> 00:06:39,000
is for people to do stuff like toggle

167
00:06:37,769 --> 00:06:40,769
the debug switches on and off

168
00:06:39,000 --> 00:06:43,470
so in order to do that what I did is I

169
00:06:40,769 --> 00:06:45,990
pass the address of that persistent

170
00:06:43,470 --> 00:06:47,700
value so that basically anyone in the

171
00:06:45,990 --> 00:06:48,900
debug system now knows they can reach in

172
00:06:47,699 --> 00:06:50,789
and poke that value and change it to

173
00:06:48,899 --> 00:06:52,799
something else the problem with that is

174
00:06:50,790 --> 00:06:55,200
as soon as the debug executable gets

175
00:06:52,800 --> 00:06:57,660
reloaded all of that data is now gone

176
00:06:55,199 --> 00:06:59,670
right those pointers are no longer valid

177
00:06:57,660 --> 00:07:01,110
and so what we would want to make sure

178
00:06:59,670 --> 00:07:03,960
that we did if you're trying to support

179
00:07:01,110 --> 00:07:06,900
the dynamic code reloading is we want to

180
00:07:03,959 --> 00:07:10,709
have a way of making like making note

181
00:07:06,899 --> 00:07:13,049
effectively of the fact that those debug

182
00:07:10,709 --> 00:07:14,969
values have gone away right so we could

183
00:07:13,050 --> 00:07:16,560
flush them or something now for bonus

184
00:07:14,970 --> 00:07:20,220
points we might want to try and make it

185
00:07:16,560 --> 00:07:23,550
so that any values that we had set get

186
00:07:20,220 --> 00:07:25,200
carried over to the new version and I

187
00:07:23,550 --> 00:07:28,470
think there's ways we could probably do

188
00:07:25,199 --> 00:07:31,379
that as well and is so we can kind of

189
00:07:28,470 --> 00:07:33,960
think a little bit about that as we go I

190
00:07:31,379 --> 00:07:36,449
I kind of sort of homebrewing an idea

191
00:07:33,959 --> 00:07:38,699
for that it's like percolating in my

192
00:07:36,449 --> 00:07:40,199
head but basically what I'm thinking is

193
00:07:38,699 --> 00:07:43,019
if we wanted to do something like

194
00:07:40,199 --> 00:07:44,459
dynamic code reloading but and in in

195
00:07:43,019 --> 00:07:46,349
addition if we want these values to be

196
00:07:44,459 --> 00:07:48,149
persistent across runs which I think we

197
00:07:46,350 --> 00:07:50,370
do then I think what we want to do is

198
00:07:48,149 --> 00:07:52,469
keep the concept of our config dot H

199
00:07:50,370 --> 00:07:54,600
here with these global constants and

200
00:07:52,470 --> 00:07:56,880
what I was thinking is when we do these

201
00:07:54,600 --> 00:07:59,610
debug value initialize things what we

202
00:07:56,879 --> 00:08:03,959
could do is when the debug value gets

203
00:07:59,610 --> 00:08:08,460
initialized we could pass in right what

204
00:08:03,959 --> 00:08:11,279
that initial value was going to be so

205
00:08:08,459 --> 00:08:13,769
that when the initial value gets so so

206
00:08:11,279 --> 00:08:15,269
that when you relaunch the program it

207
00:08:13,769 --> 00:08:16,769
knows what the value was supposed to

208
00:08:15,269 --> 00:08:18,389
because we can always rewrite this file

209
00:08:16,769 --> 00:08:20,310
with the most recent values that the

210
00:08:18,389 --> 00:08:23,759
person is set in the debug user

211
00:08:20,310 --> 00:08:26,160
interface that's just what I'm thinking

212
00:08:23,759 --> 00:08:28,500
and so basically this thing down here

213
00:08:26,160 --> 00:08:31,740
which creates this this sort of global

214
00:08:28,500 --> 00:08:33,929
constant thing like so what I'm

215
00:08:31,740 --> 00:08:38,430
imagining there is it would sort of say

216
00:08:33,929 --> 00:08:40,459
oh yeah when you create this initial

217
00:08:38,429 --> 00:08:42,629
value this debug initialized value

218
00:08:40,460 --> 00:08:45,300
there's going to be ways of passing

219
00:08:42,629 --> 00:08:47,458
something into that so when you do this

220
00:08:45,299 --> 00:08:49,439
you get those constants those constants

221
00:08:47,458 --> 00:08:53,129
come out right

222
00:08:49,440 --> 00:08:57,810
like so oops that's not what I wanted

223
00:08:53,129 --> 00:09:01,830
not what I wanted in fact what is

224
00:08:57,809 --> 00:09:06,719
happening get rid of that no bad bad

225
00:09:01,830 --> 00:09:11,750
okay let's try that one more time let's

226
00:09:06,720 --> 00:09:16,889
try that one more time right like that

227
00:09:11,750 --> 00:09:18,240
ok so what I want to do here right if I

228
00:09:16,889 --> 00:09:19,350
want to give it a way of getting what

229
00:09:18,240 --> 00:09:21,539
the value should have been that can

230
00:09:19,350 --> 00:09:24,269
persist across runs so I'm letting that

231
00:09:21,539 --> 00:09:25,740
happen through that config thing and so

232
00:09:24,269 --> 00:09:27,179
in order to do that what I mean is what

233
00:09:25,740 --> 00:09:29,759
I need to do here is make sure that this

234
00:09:27,179 --> 00:09:32,429
thing has a couple different types of

235
00:09:29,759 --> 00:09:34,860
value potentially right some way of

236
00:09:32,429 --> 00:09:36,269
making sure that this thing can can

237
00:09:34,860 --> 00:09:38,700
actually initialize itself in a

238
00:09:36,269 --> 00:09:40,850
meaningful way and so this is mostly the

239
00:09:38,700 --> 00:09:44,280
kind of values that we're using right

240
00:09:40,850 --> 00:09:45,629
you could imagine maybe these visa these

241
00:09:44,279 --> 00:09:47,519
would be sort of the value types that

242
00:09:45,629 --> 00:09:49,679
were happening there and so probably

243
00:09:47,519 --> 00:09:54,419
what I would want to do is I would want

244
00:09:49,679 --> 00:09:57,419
to make it so that this guy has a bunch

245
00:09:54,419 --> 00:09:59,849
of variants right and each one of them

246
00:09:57,419 --> 00:10:02,789
is basically just all it's doing is it's

247
00:09:59,850 --> 00:10:05,399
doing it a type it cracks out the type

248
00:10:02,789 --> 00:10:07,709
there that's really all it's meant to do

249
00:10:05,399 --> 00:10:10,169
and again it's just kind of an annoying

250
00:10:07,710 --> 00:10:13,259
C++ C thing you could use a template for

251
00:10:10,169 --> 00:10:14,939
it perhaps if you wanted to well no you

252
00:10:13,259 --> 00:10:17,730
couldn't actually use a template for it

253
00:10:14,940 --> 00:10:20,460
not in this particular case but point

254
00:10:17,730 --> 00:10:23,100
being you could amuse a letter language

255
00:10:20,460 --> 00:10:24,960
for it anyway so what we need to do is

256
00:10:23,100 --> 00:10:26,460
make sure that we have these specified

257
00:10:24,960 --> 00:10:28,710
such that all of the things we might

258
00:10:26,460 --> 00:10:30,240
want to pass or there I'm not sure what

259
00:10:28,710 --> 00:10:33,450
the best way necessarily do that would

260
00:10:30,240 --> 00:10:36,049
be maybe would this be enough to keep it

261
00:10:33,450 --> 00:10:39,210
satisfied I'm not sure let's take a look

262
00:10:36,049 --> 00:10:40,740
yeah so as long as we have all of these

263
00:10:39,210 --> 00:10:48,389
and that's probably actually an s32

264
00:10:40,740 --> 00:10:49,799
there so that is yeah so yeah so one of

265
00:10:48,389 --> 00:10:51,419
the problems is you know with something

266
00:10:49,799 --> 00:10:53,159
like a bool we don't really have much of

267
00:10:51,419 --> 00:10:55,379
a way of stating specifically that it is

268
00:10:53,159 --> 00:10:56,519
a pool or not and so that might be

269
00:10:55,379 --> 00:10:58,950
something that we have to say

270
00:10:56,519 --> 00:11:01,319
specifically we may have to say debug

271
00:10:58,950 --> 00:11:02,180
initialize value like bull right or

272
00:11:01,320 --> 00:11:05,089
something like that

273
00:11:02,179 --> 00:11:06,620
where we've got the S 32s in there but

274
00:11:05,089 --> 00:11:08,990
we also have one of these that's

275
00:11:06,620 --> 00:11:12,560
actually specific to pool and it's like

276
00:11:08,990 --> 00:11:15,139
the initialize pool or b32 like that

277
00:11:12,559 --> 00:11:17,000
right and that one we would use with the

278
00:11:15,139 --> 00:11:18,350
ifs and the reason that I was saying

279
00:11:17,000 --> 00:11:19,519
that we have to do that is because it's

280
00:11:18,350 --> 00:11:21,320
not going to be able to know the

281
00:11:19,519 --> 00:11:23,149
difference between an integer and a

282
00:11:21,320 --> 00:11:25,040
regular it's not gonna be leaders

283
00:11:23,149 --> 00:11:26,450
because we just use our boolean type is

284
00:11:25,039 --> 00:11:28,278
the same as our integer type right we

285
00:11:26,450 --> 00:11:30,170
don't have two different types so it

286
00:11:28,278 --> 00:11:32,720
needs kind of like one additional one

287
00:11:30,169 --> 00:11:36,278
here that's going to be able to do that

288
00:11:32,720 --> 00:11:39,920
bull thing do that the whole thing right

289
00:11:36,278 --> 00:11:41,889
so we need one more there but anyway

290
00:11:39,919 --> 00:11:44,419
that's what we're talking about here and

291
00:11:41,889 --> 00:11:46,879
what we want to do is we want to turn

292
00:11:44,419 --> 00:11:48,289
all these into something reasonable

293
00:11:46,879 --> 00:11:49,610
right we want to turn all these into

294
00:11:48,289 --> 00:11:50,990
something that just kind of does

295
00:11:49,610 --> 00:11:53,839
whatever needs to do so it's like it

296
00:11:50,990 --> 00:11:55,700
calls debug initialized value with sort

297
00:11:53,839 --> 00:11:58,250
of the the base set of things that has

298
00:11:55,700 --> 00:12:00,950
to happen right without the value that's

299
00:11:58,250 --> 00:12:03,649
being set and then once it knows that

300
00:12:00,950 --> 00:12:04,970
it's okay to go you know this is always

301
00:12:03,649 --> 00:12:07,129
going to just return that that in

302
00:12:04,970 --> 00:12:09,470
whatever the event is it's actually be

303
00:12:07,129 --> 00:12:10,759
pointed to hear but once it it's done

304
00:12:09,470 --> 00:12:13,190
with that it's just going to know that

305
00:12:10,759 --> 00:12:14,838
it can set the value to whatever the

306
00:12:13,190 --> 00:12:15,950
value was passed in and that's just a

307
00:12:14,839 --> 00:12:17,510
way of like again getting that

308
00:12:15,950 --> 00:12:20,570
initialization to happen automatically

309
00:12:17,509 --> 00:12:22,189
for the calling code and so this is

310
00:12:20,570 --> 00:12:24,080
again what this is doing you know with

311
00:12:22,190 --> 00:12:28,010
these the weight of this code is being

312
00:12:24,080 --> 00:12:30,680
structured again it's designed to remove

313
00:12:28,009 --> 00:12:34,100
as much work as possible from the other

314
00:12:30,679 --> 00:12:35,899
side of the calling fence right it's

315
00:12:34,100 --> 00:12:39,980
designed as much as possible to sort of

316
00:12:35,899 --> 00:12:41,480
to fix that part of the problem and yeah

317
00:12:39,980 --> 00:12:42,649
so that's that's really all that's

318
00:12:41,480 --> 00:12:49,550
happening there in fact you know what I

319
00:12:42,649 --> 00:12:51,019
realized to you know it's too bad now

320
00:12:49,549 --> 00:12:53,088
that i think about it when we do the

321
00:12:51,019 --> 00:12:54,949
debug initialized value thing it's too

322
00:12:53,089 --> 00:12:58,100
bad i wonder if we could use a comma

323
00:12:54,950 --> 00:12:59,660
here I wonder it I wonder if we could

324
00:12:58,100 --> 00:13:02,360
use a comma here to get out of this

325
00:12:59,659 --> 00:13:03,649
business all entirely let's see can we

326
00:13:02,360 --> 00:13:06,379
do you guys want to take a look at that

327
00:13:03,649 --> 00:13:10,179
I want to I'm into it I don't know if

328
00:13:06,379 --> 00:13:10,179
you're into it but I'm into it

329
00:13:10,590 --> 00:13:17,040
I'm just saying hypothetically speaking

330
00:13:14,659 --> 00:13:18,389
suppose we were to do something that's

331
00:13:17,039 --> 00:13:19,649
not gonna actually compiler thought that

332
00:13:18,389 --> 00:13:22,080
suppose you were to get rid of all this

333
00:13:19,649 --> 00:13:24,149
stuff and we just said no no no no no no

334
00:13:22,080 --> 00:13:25,560
no instead what we're going to do is

335
00:13:24,149 --> 00:13:26,909
when we do debugging are slaves value

336
00:13:25,559 --> 00:13:28,259
and we've got that type in there we're

337
00:13:26,909 --> 00:13:30,029
going to call that and just let that

338
00:13:28,259 --> 00:13:33,539
initialize the event but we're going to

339
00:13:30,029 --> 00:13:34,740
use the sequence operator I mean I said

340
00:13:33,539 --> 00:13:37,649
it we're going to use a sequence

341
00:13:34,740 --> 00:13:39,960
operator to sneak in and do another

342
00:13:37,649 --> 00:13:42,629
operation inside the equals right I

343
00:13:39,960 --> 00:13:46,320
don't know it's a bold move is it is it

344
00:13:42,629 --> 00:13:48,809
brassy is it ballsy yes am I going to go

345
00:13:46,320 --> 00:13:50,010
for it yes I think that's just the way

346
00:13:48,809 --> 00:13:52,289
you got to be sometimes you gotta

347
00:13:50,009 --> 00:13:53,879
program you got a program dirty

348
00:13:52,289 --> 00:13:55,379
sometimes you know what I mean you got

349
00:13:53,879 --> 00:13:57,269
to just get up in there and you got to

350
00:13:55,379 --> 00:13:59,460
do it and so that's what we're going to

351
00:13:57,269 --> 00:14:01,379
do here so if I were to take this event

352
00:13:59,460 --> 00:14:03,870
I know that I can construct if I have

353
00:14:01,379 --> 00:14:06,750
that the type right which in this case I

354
00:14:03,870 --> 00:14:07,950
know is a rule 32 right I know I could

355
00:14:06,750 --> 00:14:09,419
do it this way and in here I'll know the

356
00:14:07,950 --> 00:14:13,650
type as well because the types fast in

357
00:14:09,419 --> 00:14:15,959
there so I'm just wondering if I can use

358
00:14:13,649 --> 00:14:18,539
the sequence operator to steal away a

359
00:14:15,960 --> 00:14:20,879
little bit of an assignment here right

360
00:14:18,539 --> 00:14:23,459
and I don't know right I don't know if I

361
00:14:20,879 --> 00:14:27,029
can do that maybe I can maybe I can't

362
00:14:23,460 --> 00:14:29,210
but we'll find out and oops the event

363
00:14:27,029 --> 00:14:34,350
that we're in question is actually that

364
00:14:29,210 --> 00:14:37,019
right will it work I don't know nobody

365
00:14:34,350 --> 00:14:39,240
knows nobody can ever know how could

366
00:14:37,019 --> 00:14:42,569
they initializing connect connect four

367
00:14:39,240 --> 00:14:44,340
be 32 to debug event yep put them in the

368
00:14:42,570 --> 00:14:47,550
wrong order that's a little bit of a

369
00:14:44,340 --> 00:14:50,070
risk with a sequence operator let's find

370
00:14:47,549 --> 00:14:54,870
out if we're okay here still not good

371
00:14:50,070 --> 00:14:59,610
missing before period which period debug

372
00:14:54,870 --> 00:15:02,190
value path uh that's not right why did I

373
00:14:59,610 --> 00:15:05,190
do that we want no that is right debug

374
00:15:02,190 --> 00:15:08,540
value path why did that network do you

375
00:15:05,190 --> 00:15:11,960
book value path dot it's missing a

376
00:15:08,539 --> 00:15:11,959
closing quote

377
00:15:12,999 --> 00:15:19,609
but why is it missing a closing quote

378
00:15:16,418 --> 00:15:20,869
don't really understand they don't need

379
00:15:19,609 --> 00:15:23,479
those parentheses anymore don't really

380
00:15:20,869 --> 00:15:26,389
understand missing semicolon before

381
00:15:23,479 --> 00:15:29,359
period it doesn't seem to like this

382
00:15:26,389 --> 00:15:32,509
construction very much or at least if

383
00:15:29,359 --> 00:15:35,719
I'm not mistaken it does not seem to

384
00:15:32,509 --> 00:15:39,649
like that very much but of course I

385
00:15:35,719 --> 00:15:44,169
might be mistaken so why does it think

386
00:15:39,649 --> 00:15:49,339
I'm missing the semicolon in there what

387
00:15:44,168 --> 00:15:50,808
exactly Jimmy what exactly are you

388
00:15:49,339 --> 00:15:54,139
complaining about because I know debug

389
00:15:50,808 --> 00:15:56,718
value pound pound path is a valid value

390
00:15:54,139 --> 00:15:59,089
to look at and I feel like I should be

391
00:15:56,719 --> 00:16:01,729
able to access off of it I wonder if

392
00:15:59,089 --> 00:16:04,189
it's just a case of you know is it just

393
00:16:01,729 --> 00:16:05,989
my sequence operator nonsense that I'm

394
00:16:04,188 --> 00:16:10,778
trying to pull which admittedly is a

395
00:16:05,989 --> 00:16:10,778
little bit janky is that your problem

396
00:16:12,519 --> 00:16:19,339
type care unexpected yeah that does look

397
00:16:16,788 --> 00:16:21,499
a little bit like I guess it does not

398
00:16:19,339 --> 00:16:23,389
like my sequence operator there I feel

399
00:16:21,499 --> 00:16:27,168
like that should it's probably because

400
00:16:23,389 --> 00:16:32,389
it's in the initializer that it doesn't

401
00:16:27,168 --> 00:16:35,749
like that would be my guess so maybe

402
00:16:32,389 --> 00:16:37,970
what I can do and again this is me just

403
00:16:35,749 --> 00:16:39,649
like I said I'm really kind of doing

404
00:16:37,970 --> 00:16:41,509
some ridiculous things here you know

405
00:16:39,649 --> 00:16:48,109
don't try this at home but what I could

406
00:16:41,509 --> 00:16:50,778
do here is say oh okay maybe I use the

407
00:16:48,109 --> 00:16:54,408
sequence operator inside the expression

408
00:16:50,778 --> 00:16:56,088
so I do something where I try to put it

409
00:16:54,408 --> 00:17:02,239
in well I can't put it in a parameter

410
00:16:56,089 --> 00:17:03,619
list mm-hmm man I don't know I really

411
00:17:02,239 --> 00:17:05,449
don't know I'm just trying to figure out

412
00:17:03,619 --> 00:17:07,699
this any way I could get it in there in

413
00:17:05,449 --> 00:17:11,709
some way that makes it so that we don't

414
00:17:07,699 --> 00:17:16,639
have to deal with with the rest of it

415
00:17:11,709 --> 00:17:19,068
hmm excuse me so let's try it this way

416
00:17:16,638 --> 00:17:22,359
this is again completely ridiculous what

417
00:17:19,068 --> 00:17:25,789
I'm doing but I'm just going to try it

418
00:17:22,359 --> 00:17:28,759
does not take for up Wow

419
00:17:25,789 --> 00:17:30,019
so that worked apparently okay so i

420
00:17:28,759 --> 00:17:32,329
don't know if you saw what i try to do

421
00:17:30,019 --> 00:17:34,400
here again it's kind of ridiculous but

422
00:17:32,329 --> 00:17:36,649
basically what i wanted to do is I'm

423
00:17:34,400 --> 00:17:39,860
initializing a static I don't want

424
00:17:36,650 --> 00:17:41,630
anything to escape that static

425
00:17:39,859 --> 00:17:43,849
initialization because I only want it to

426
00:17:41,630 --> 00:17:44,990
happen once right I don't want it to

427
00:17:43,849 --> 00:17:47,240
happen every time this code I only

428
00:17:44,990 --> 00:17:49,519
wanted to happen once so it needs to be

429
00:17:47,240 --> 00:17:52,190
on the right side of the expression that

430
00:17:49,519 --> 00:17:56,450
initializes the static so i have a

431
00:17:52,190 --> 00:17:59,450
function call here and what i wanted to

432
00:17:56,450 --> 00:18:02,509
do was I wanted to somehow figure out a

433
00:17:59,450 --> 00:18:05,000
way to get this particular piece of code

434
00:18:02,509 --> 00:18:06,829
to execute in there so what I did is I

435
00:18:05,000 --> 00:18:10,579
use a sequence operator right the comma

436
00:18:06,829 --> 00:18:12,889
to say hey man do this first then do

437
00:18:10,579 --> 00:18:17,119
this second to produce this first

438
00:18:12,890 --> 00:18:18,290
argument and it is ok with that so I'm

439
00:18:17,119 --> 00:18:19,309
just going to go ahead and pretend that

440
00:18:18,289 --> 00:18:21,259
that was okay i'm going to pretend

441
00:18:19,309 --> 00:18:22,940
nothing weird happened even though

442
00:18:21,259 --> 00:18:25,129
something very weird just happened and

443
00:18:22,940 --> 00:18:26,240
i'm going to do it again I'm just going

444
00:18:25,130 --> 00:18:31,550
to straight up do it a second time

445
00:18:26,240 --> 00:18:35,539
because that's the way we roll here so

446
00:18:31,549 --> 00:18:37,369
here it is a second time and here's the

447
00:18:35,539 --> 00:18:39,529
reason I was trying to do it here is

448
00:18:37,369 --> 00:18:41,419
because now we only need one copy of dbh

449
00:18:39,529 --> 00:18:44,029
last value because what we can do is do

450
00:18:41,420 --> 00:18:47,779
the assignment right in here so here's

451
00:18:44,029 --> 00:18:50,690
the value that we want to set we just

452
00:18:47,779 --> 00:18:53,089
set value and then we paste on the type

453
00:18:50,690 --> 00:18:54,769
and we say equals and now we've

454
00:18:53,089 --> 00:18:57,049
generated all of those versions that I

455
00:18:54,769 --> 00:19:02,859
was manually copying out before those

456
00:18:57,049 --> 00:19:10,069
are done now so that's awesome that

457
00:19:02,859 --> 00:19:12,769
saves a lot of typing lot of typing so

458
00:19:10,069 --> 00:19:14,659
now we have all of our types handled and

459
00:19:12,769 --> 00:19:17,180
we didn't have to duplicate functions at

460
00:19:14,660 --> 00:19:19,759
all that's pretty fun sequence operator

461
00:19:17,180 --> 00:19:22,460
occasionally comes in very very handy

462
00:19:19,759 --> 00:19:23,720
very very handy love your sequence

463
00:19:22,460 --> 00:19:25,670
operator for those of you don't know

464
00:19:23,720 --> 00:19:27,680
what it does it just allows you to put

465
00:19:25,670 --> 00:19:29,240
in multiple expressions and then it just

466
00:19:27,680 --> 00:19:32,000
uses the value of what is the last

467
00:19:29,240 --> 00:19:34,400
expression yeah it just takes the value

468
00:19:32,000 --> 00:19:36,109
of whatever the last expression was so

469
00:19:34,400 --> 00:19:37,730
you can just chain a bunch of unrelated

470
00:19:36,109 --> 00:19:39,729
expressions together and it just execute

471
00:19:37,730 --> 00:19:42,349
the last one right

472
00:19:39,730 --> 00:19:45,470
well excuse all them but it evaluates to

473
00:19:42,349 --> 00:19:46,699
the value of the last one all right so

474
00:19:45,470 --> 00:19:49,190
we'll see if that worked that again like

475
00:19:46,700 --> 00:19:51,980
I said kind of ridiculous maneuver there

476
00:19:49,190 --> 00:19:53,600
but sometimes they're warranted let's go

477
00:19:51,980 --> 00:19:55,250
ahead and make debug initialize value

478
00:19:53,599 --> 00:19:58,429
work in some way that makes some sense

479
00:19:55,250 --> 00:20:01,009
to somebody sometime somewhere inside

480
00:19:58,430 --> 00:20:02,360
handmade interface debug interface we

481
00:20:01,009 --> 00:20:09,019
should have that definition for the

482
00:20:02,359 --> 00:20:10,250
debug event there it is right and so I'm

483
00:20:09,019 --> 00:20:12,589
think assuming that well the way we

484
00:20:10,250 --> 00:20:15,319
would want to do this is the clock value

485
00:20:12,589 --> 00:20:17,750
would be 0 the file name would be

486
00:20:15,319 --> 00:20:19,490
whatever the file name is the line

487
00:20:17,750 --> 00:20:22,609
number the block name is the name you

488
00:20:19,490 --> 00:20:24,740
pass in the line number would be

489
00:20:22,609 --> 00:20:26,359
whatever the line number actually is so

490
00:20:24,740 --> 00:20:27,710
we can maybe pass those in now we could

491
00:20:26,359 --> 00:20:32,829
we could easily pass those and if we

492
00:20:27,710 --> 00:20:35,569
want to sue me we've got the thread ID

493
00:20:32,829 --> 00:20:38,659
I'm not sure how much we care about the

494
00:20:35,569 --> 00:20:40,879
thread ID necessarily but we could even

495
00:20:38,660 --> 00:20:42,230
do that if we wanted to that isn't don't

496
00:20:40,880 --> 00:20:44,870
we just have a way to do get threadid

497
00:20:42,230 --> 00:20:50,450
yeah and I don't know how we do get

498
00:20:44,869 --> 00:20:51,889
correr index I feel like the core index

499
00:20:50,450 --> 00:20:54,380
is not relevant I want to say the thread

500
00:20:51,890 --> 00:20:56,150
ID isn't relative it either I don't know

501
00:20:54,380 --> 00:20:57,470
I'm gonna need those initial I 200 now

502
00:20:56,150 --> 00:20:59,120
because this is kind of a permanent

503
00:20:57,470 --> 00:21:00,559
standing variable so I don't know what

504
00:20:59,119 --> 00:21:06,500
it even means to say some of those

505
00:21:00,559 --> 00:21:08,960
things about it all right so if we've

506
00:21:06,500 --> 00:21:10,849
got that set up really all we would need

507
00:21:08,960 --> 00:21:15,049
to do here is pass in the file name and

508
00:21:10,849 --> 00:21:16,399
the line number you know and so I'm

509
00:21:15,049 --> 00:21:19,159
going to go ahead and make it so that

510
00:21:16,400 --> 00:21:22,690
that is what these guys expect to see

511
00:21:19,160 --> 00:21:28,460
here here we are in the interface code

512
00:21:22,690 --> 00:21:31,370
debug initialized value if I want to

513
00:21:28,460 --> 00:21:33,769
hear I can demand those two things and

514
00:21:31,369 --> 00:21:41,079
then these guys will just go ahead and

515
00:21:33,769 --> 00:21:41,079
give them to me right like so

516
00:21:44,369 --> 00:21:50,019
and there we go so now we've initialized

517
00:21:48,190 --> 00:21:52,240
these events so the only thing that we

518
00:21:50,019 --> 00:21:54,250
need to do now the only thing we need to

519
00:21:52,240 --> 00:21:58,150
do in addition to that is figure out

520
00:21:54,250 --> 00:22:02,109
some way to add like something into our

521
00:21:58,150 --> 00:22:05,050
debug system that would allow us to

522
00:22:02,109 --> 00:22:07,089
manipulate these types indirectly right

523
00:22:05,049 --> 00:22:08,889
or you know that would allow them to

524
00:22:07,089 --> 00:22:11,199
sort of do like a pointer to this event

525
00:22:08,890 --> 00:22:13,600
right and so in order to do that we need

526
00:22:11,200 --> 00:22:16,059
to add something that points into these

527
00:22:13,599 --> 00:22:18,159
events and we you know we have a way of

528
00:22:16,059 --> 00:22:19,839
doing that right that's that's a that's

529
00:22:18,160 --> 00:22:21,970
what our sort of system is set up to do

530
00:22:19,839 --> 00:22:26,199
there's like sort of the add to group

531
00:22:21,970 --> 00:22:28,420
thing right we've got a dad how does

532
00:22:26,200 --> 00:22:32,850
this work here we did this inside our

533
00:22:28,420 --> 00:22:32,850
sort of gathering thing and data block

534
00:22:34,589 --> 00:22:42,279
open data block open data block there we

535
00:22:38,619 --> 00:22:44,439
go so this stuff essentially here when

536
00:22:42,279 --> 00:22:46,059
we do open data block and close

537
00:22:44,440 --> 00:22:48,610
datablock really what we want to do here

538
00:22:46,059 --> 00:22:50,889
is we want to do this this part where we

539
00:22:48,609 --> 00:22:52,869
add events to a data block what we

540
00:22:50,890 --> 00:22:54,850
really want to do is just that right

541
00:22:52,869 --> 00:22:56,559
what we want to do is take these things

542
00:22:54,849 --> 00:22:59,949
when we get them we want to add them

543
00:22:56,559 --> 00:23:01,539
just like we were adding other stuff and

544
00:22:59,950 --> 00:23:08,380
then we just need some group to add them

545
00:23:01,539 --> 00:23:10,149
to so if we get the debug state right in

546
00:23:08,380 --> 00:23:11,080
here and i'm going to go ahead we need

547
00:23:10,150 --> 00:23:12,130
there's one other thing that we're going

548
00:23:11,079 --> 00:23:13,449
to need to do because this is so it's

549
00:23:12,130 --> 00:23:15,550
going to fire and it's something that i

550
00:23:13,450 --> 00:23:17,740
mentioned we should probably do the

551
00:23:15,549 --> 00:23:19,899
other day but we didn't do so we're

552
00:23:17,740 --> 00:23:21,819
going to have to do it now what we want

553
00:23:19,900 --> 00:23:24,250
to do here you say ok I've got this

554
00:23:21,819 --> 00:23:26,589
debug state what I'd like to do is I'd

555
00:23:24,250 --> 00:23:29,170
like to add a variable to this group you

556
00:23:26,589 --> 00:23:32,439
know I'd like to push it on there we do

557
00:23:29,170 --> 00:23:35,230
have one sort of nasty thing here which

558
00:23:32,440 --> 00:23:36,789
is that we don't necessarily know that

559
00:23:35,230 --> 00:23:40,809
these calls are coming from the same

560
00:23:36,789 --> 00:23:43,180
thread right so we would need some way

561
00:23:40,809 --> 00:23:45,039
of making sure that when we do that when

562
00:23:43,180 --> 00:23:46,450
we add things to this group we would

563
00:23:45,039 --> 00:23:48,339
like to be able to make sure that only

564
00:23:46,450 --> 00:23:52,240
one thread is doing that addition of the

565
00:23:48,339 --> 00:23:54,428
time right so in order to do that we

566
00:23:52,240 --> 00:23:57,220
need some kind of a mutex here right

567
00:23:54,429 --> 00:23:59,409
we need to take some kind of a lock to

568
00:23:57,220 --> 00:24:03,308
just go I need them you know I need to

569
00:23:59,409 --> 00:24:06,669
access this data member which is this

570
00:24:03,308 --> 00:24:10,269
group structure here I don't have lock

571
00:24:06,669 --> 00:24:12,038
free versions of that code right it's

572
00:24:10,269 --> 00:24:13,419
all just assuming that it can just write

573
00:24:12,038 --> 00:24:16,089
the pointers if they'll be coherent at

574
00:24:13,419 --> 00:24:17,288
the time and so what we need to do here

575
00:24:16,089 --> 00:24:19,628
is like something that would basically

576
00:24:17,288 --> 00:24:22,148
take this lock right we need something

577
00:24:19,628 --> 00:24:25,058
that would go like okay you know you

578
00:24:22,148 --> 00:24:27,219
know we need like an acquirer mutex you

579
00:24:25,058 --> 00:24:32,278
know release mutex thing that just

580
00:24:27,220 --> 00:24:35,710
allows us to modify that data member as

581
00:24:32,278 --> 00:24:37,419
we go and this is the only place that

582
00:24:35,710 --> 00:24:39,970
this really has to happen because most

583
00:24:37,419 --> 00:24:42,519
of the time it's just not an issue there

584
00:24:39,970 --> 00:24:45,129
are two ways we could do this we could

585
00:24:42,519 --> 00:24:49,808
also instead push it and you know what I

586
00:24:45,128 --> 00:24:54,668
just realized it's probably smarter if

587
00:24:49,808 --> 00:24:56,668
we actually do the push it's probably

588
00:24:54,669 --> 00:25:00,429
smarter to just let these be collated

589
00:24:56,669 --> 00:25:01,330
sometime after the fact I mean if you

590
00:25:00,429 --> 00:25:02,830
when you get right down to it that's

591
00:25:01,329 --> 00:25:04,418
probably the case we wouldn't need to

592
00:25:02,829 --> 00:25:07,118
take a mutex or anything like that we

593
00:25:04,419 --> 00:25:09,429
cook what we could do is just add a vent

594
00:25:07,118 --> 00:25:12,730
in here that's like hey I want to record

595
00:25:09,429 --> 00:25:14,950
this permanent variable so actually

596
00:25:12,730 --> 00:25:17,200
that's probably much more likely what we

597
00:25:14,950 --> 00:25:20,919
should do that would also get us out of

598
00:25:17,200 --> 00:25:22,179
the business of having to initialize the

599
00:25:20,919 --> 00:25:23,559
debug system which I said we were going

600
00:25:22,179 --> 00:25:27,940
to have to do we wouldn't have to do

601
00:25:23,558 --> 00:25:31,418
that so yeah never mind that probably is

602
00:25:27,940 --> 00:25:35,980
a better way to do this and we should do

603
00:25:31,419 --> 00:25:41,170
that better way

604
00:25:35,980 --> 00:25:44,390
now okay so yeah if we want to do that

605
00:25:41,170 --> 00:25:48,320
off we go what that's going to look like

606
00:25:44,390 --> 00:25:50,210
is is well this stuff here can pretty

607
00:25:48,319 --> 00:25:51,889
much stay the way that it is really all

608
00:25:50,210 --> 00:25:54,620
that's going to look like is inside

609
00:25:51,890 --> 00:25:59,050
handmade debug interface all we would do

610
00:25:54,619 --> 00:26:01,969
is say well okay when we do you know

611
00:25:59,049 --> 00:26:04,369
when we do all this stuff here and we're

612
00:26:01,970 --> 00:26:06,200
sort of doing these like creating these

613
00:26:04,369 --> 00:26:08,029
persistent variables and we do the debug

614
00:26:06,200 --> 00:26:10,069
initialize value what the debug

615
00:26:08,029 --> 00:26:12,410
initialized value actually would be at

616
00:26:10,069 --> 00:26:14,359
that point right is the debug

617
00:26:12,410 --> 00:26:18,610
initialized value would would actually

618
00:26:14,359 --> 00:26:20,869
have to be or include some some code to

619
00:26:18,609 --> 00:26:23,269
push something onto the debug stream

620
00:26:20,869 --> 00:26:24,859
right so we would want to be one of

621
00:26:23,269 --> 00:26:30,139
these things here that does a record

622
00:26:24,859 --> 00:26:32,059
debug event and record debug event would

623
00:26:30,140 --> 00:26:35,770
just push the fact that this

624
00:26:32,059 --> 00:26:40,460
initialization had occurred right and

625
00:26:35,769 --> 00:26:42,319
yeah so pretty much I think that's

626
00:26:40,460 --> 00:26:44,779
mostly all we need to do so let's look

627
00:26:42,319 --> 00:26:47,809
at how record debug event works in

628
00:26:44,779 --> 00:26:51,670
general looks like it works just yet

629
00:26:47,809 --> 00:26:56,059
exactly what you would think right so

630
00:26:51,670 --> 00:26:59,480
yeah I want to do that operation I'm

631
00:26:56,059 --> 00:27:02,059
just not sure if I guess probably what

632
00:26:59,480 --> 00:27:04,460
we would need to do is kind of 22 stage

633
00:27:02,059 --> 00:27:11,480
that right so we'd want to do it

634
00:27:04,460 --> 00:27:15,079
something like this probably and this

635
00:27:11,480 --> 00:27:16,789
would be not a string so what we want to

636
00:27:15,079 --> 00:27:19,789
do is like we've got debug initialized

637
00:27:16,789 --> 00:27:23,659
value here and then it calls into you

638
00:27:19,789 --> 00:27:26,809
know sort of the one level down version

639
00:27:23,660 --> 00:27:30,500
of that so yeah it would be more like

640
00:27:26,809 --> 00:27:32,269
this here is our initial call it's just

641
00:27:30,500 --> 00:27:35,180
an inline function and the inline

642
00:27:32,269 --> 00:27:37,400
function does a record debug event to do

643
00:27:35,180 --> 00:27:41,000
that this thing and it this is basically

644
00:27:37,400 --> 00:27:43,430
something that's like Mark you know Mark

645
00:27:41,000 --> 00:27:45,140
debug value or something and that mark

646
00:27:43,430 --> 00:27:47,060
debug value hotel where it is then it

647
00:27:45,140 --> 00:27:48,590
would catch after it recorded the debug

648
00:27:47,059 --> 00:27:49,480
event which is thread-safe and all that

649
00:27:48,589 --> 00:27:51,189
then

650
00:27:49,480 --> 00:27:54,099
call in and do this stuff although I

651
00:27:51,190 --> 00:27:57,580
guess now I think about it that stuff

652
00:27:54,099 --> 00:28:00,279
can just go right here as well so you

653
00:27:57,579 --> 00:28:02,379
know yeah I guess this goes away

654
00:28:00,279 --> 00:28:06,308
entirely so I guess this just becomes an

655
00:28:02,380 --> 00:28:08,890
inline like so and this is not existing

656
00:28:06,308 --> 00:28:11,230
this itself will just do what it needs

657
00:28:08,890 --> 00:28:14,799
to do record debug event presumably

658
00:28:11,230 --> 00:28:17,410
returns the event I'm guessing and so

659
00:28:14,798 --> 00:28:19,509
the event there's actually two events

660
00:28:17,410 --> 00:28:23,620
this is the like market marker event

661
00:28:19,509 --> 00:28:25,269
that mark event just has to have an

662
00:28:23,619 --> 00:28:28,928
event pointer that points to our event

663
00:28:25,269 --> 00:28:32,889
and then it's marked right makes some

664
00:28:28,929 --> 00:28:34,960
sense okay so all that has to happen for

665
00:28:32,890 --> 00:28:36,520
that to work as far as I can think of in

666
00:28:34,960 --> 00:28:38,079
my head and again so that makes that

667
00:28:36,519 --> 00:28:40,690
totally thread safe as well which is

668
00:28:38,079 --> 00:28:42,339
kind of nice is that it here we need

669
00:28:40,690 --> 00:28:43,720
some way of marking these things so we

670
00:28:42,339 --> 00:28:47,709
need something that's like debug type

671
00:28:43,720 --> 00:28:51,039
you know Mark event remark debug value

672
00:28:47,710 --> 00:28:55,360
rather and then here we need something

673
00:28:51,039 --> 00:28:58,599
looks like a debug event star event and

674
00:28:55,359 --> 00:29:00,428
that I think would be it right although

675
00:28:58,599 --> 00:29:07,678
this should be called value debug event

676
00:29:00,429 --> 00:29:10,090
to maintain consistency yeah yeah yeah

677
00:29:07,679 --> 00:29:12,730
okay illegal use of this type is an

678
00:29:10,089 --> 00:29:17,259
expression used 64 what are you talking

679
00:29:12,730 --> 00:29:20,470
about what are you saying oh right it

680
00:29:17,259 --> 00:29:22,539
works like this so I guess in this case

681
00:29:20,470 --> 00:29:24,130
and that will probably define event for

682
00:29:22,539 --> 00:29:26,048
us because this is a macro that expands

683
00:29:24,130 --> 00:29:27,850
to something so I guess technically what

684
00:29:26,048 --> 00:29:29,950
I would want to do here is debug event

685
00:29:27,849 --> 00:29:33,519
this is actually like the sub event or

686
00:29:29,950 --> 00:29:36,000
something right so it would be something

687
00:29:33,519 --> 00:29:36,000
that looks like this

688
00:29:38,960 --> 00:30:01,048
and this is valued debug event so that's

689
00:29:45,509 --> 00:30:02,848
it I think seems good yeah alright so I

690
00:30:01,048 --> 00:30:04,979
think that does everything we need to do

691
00:30:02,848 --> 00:30:07,468
these are now in the debug stream they

692
00:30:04,979 --> 00:30:10,080
can be picked up by people who are

693
00:30:07,469 --> 00:30:12,570
trying to collate them and then they can

694
00:30:10,079 --> 00:30:14,819
be added so I don't know again like I

695
00:30:12,569 --> 00:30:16,048
said whether that's the best thing or

696
00:30:14,819 --> 00:30:17,158
not but I just kind of thought of it and

697
00:30:16,048 --> 00:30:19,588
it seems like it solves all the problems

698
00:30:17,159 --> 00:30:22,469
that we might have had with them which

699
00:30:19,588 --> 00:30:23,608
is like yeah you know we would have had

700
00:30:22,469 --> 00:30:24,538
to make sure that it was thread-safe we

701
00:30:23,608 --> 00:30:25,528
would have had to make sure the debug

702
00:30:24,538 --> 00:30:27,058
session was the dish lifetime now we

703
00:30:25,528 --> 00:30:28,440
don't care right any of that these

704
00:30:27,058 --> 00:30:29,908
values just go into the stream like

705
00:30:28,440 --> 00:30:31,679
everything else and then later on the

706
00:30:29,909 --> 00:30:33,109
debug system if it cares will pick them

707
00:30:31,679 --> 00:30:36,419
up if it doesn't care it just won't

708
00:30:33,108 --> 00:30:39,778
right and so in here we'd have something

709
00:30:36,419 --> 00:30:41,239
like case debug type you know mark debug

710
00:30:39,778 --> 00:30:43,499
event or whatever deal with value and

711
00:30:41,239 --> 00:30:45,479
here we would just do a kool-aid ad

712
00:30:43,499 --> 00:30:47,819
variable to group and when we add the

713
00:30:45,479 --> 00:30:50,399
variable to the group we would be adding

714
00:30:47,819 --> 00:30:52,319
that sub event to some group now there's

715
00:30:50,398 --> 00:30:54,238
a little bit more to it than this it's a

716
00:30:52,319 --> 00:30:56,729
little bit more complicated to create

717
00:30:54,239 --> 00:30:58,440
the hierarchy so that's the code will

718
00:30:56,729 --> 00:30:59,669
write for the next 20 30 minutes or

719
00:30:58,440 --> 00:31:01,409
whatever I guess we have 30 minutes left

720
00:30:59,669 --> 00:31:03,179
for the remainder of the show will write

721
00:31:01,409 --> 00:31:05,729
that code but at first let's just get it

722
00:31:03,179 --> 00:31:07,139
working where all the variables kind of

723
00:31:05,729 --> 00:31:10,019
just show up in a list that aren't

724
00:31:07,138 --> 00:31:12,209
hierarchical and then we'll from their

725
00:31:10,019 --> 00:31:15,419
kind of go into something that does a

726
00:31:12,210 --> 00:31:20,159
little bit more fancy pantsy dancing

727
00:31:15,419 --> 00:31:22,830
Nancy stuff to it right so there's

728
00:31:20,159 --> 00:31:25,080
collate add variable to group we have

729
00:31:22,829 --> 00:31:28,048
the debug state we have the event on on

730
00:31:25,079 --> 00:31:29,608
this end in the middle is the problem

731
00:31:28,048 --> 00:31:31,108
because these two things actually are

732
00:31:29,608 --> 00:31:32,878
just fine because if we want to add it

733
00:31:31,108 --> 00:31:35,908
we know it's the sub event so it's just

734
00:31:32,878 --> 00:31:37,378
event value debug event that's the one

735
00:31:35,909 --> 00:31:39,419
that we're trying to add we've already

736
00:31:37,378 --> 00:31:41,009
marked it it's good the problem is we

737
00:31:39,419 --> 00:31:43,889
don't know what group to add it to here

738
00:31:41,009 --> 00:31:46,739
we have no idea so we want to do here is

739
00:31:43,888 --> 00:31:49,269
we want to do something like you know

740
00:31:46,739 --> 00:31:53,559
get group for a name or

741
00:31:49,269 --> 00:31:55,359
thing like this or I I mean you know I

742
00:31:53,559 --> 00:31:57,970
don't know we're gonna it's good that's

743
00:31:55,359 --> 00:32:00,339
what's get group for name everyone loves

744
00:31:57,970 --> 00:32:03,549
get group for name don't you I do I

745
00:32:00,339 --> 00:32:06,399
think I'm not sure point being it's fine

746
00:32:03,549 --> 00:32:07,899
don't worry about it it's just how it

747
00:32:06,400 --> 00:32:09,250
goes sometimes and then it would do

748
00:32:07,900 --> 00:32:11,769
collide I brought a group and and you

749
00:32:09,250 --> 00:32:14,079
know honestly honestly if we're being

750
00:32:11,769 --> 00:32:19,660
honest about it I almost want to say

751
00:32:14,079 --> 00:32:21,460
that if we were going to be super fancy

752
00:32:19,660 --> 00:32:23,769
about it if we were going to like double

753
00:32:21,460 --> 00:32:27,100
up on the fanciness now with extra

754
00:32:23,769 --> 00:32:29,019
fanciness I feel like we almost want to

755
00:32:27,099 --> 00:32:31,899
do this in a way that's a little flyer

756
00:32:29,019 --> 00:32:34,089
than that that's going to be something

757
00:32:31,900 --> 00:32:38,980
more like this where we have debug

758
00:32:34,089 --> 00:32:43,480
events or I guess what is collate add

759
00:32:38,980 --> 00:32:45,130
variable to group returned it adds debug

760
00:32:43,480 --> 00:32:47,470
very like okay so we'd have to brave the

761
00:32:45,130 --> 00:32:51,340
link and we do link and we do like get a

762
00:32:47,470 --> 00:32:55,870
higher you know hierarchical name or

763
00:32:51,339 --> 00:32:58,659
something or get our goal link from name

764
00:32:55,869 --> 00:33:01,389
you know and then in this thing we would

765
00:32:58,660 --> 00:33:03,160
pass the event lock name and we say like

766
00:33:01,390 --> 00:33:08,140
I want you to get me the link for this

767
00:33:03,160 --> 00:33:11,650
thing right whatever it is and and when

768
00:33:08,140 --> 00:33:14,500
you get me that link back what I want to

769
00:33:11,650 --> 00:33:20,700
do is say whatever the link used to be

770
00:33:14,500 --> 00:33:20,700
in there oh this is a tricky one

771
00:33:24,809 --> 00:33:33,339
this is actually pretty tricky I'll be

772
00:33:27,849 --> 00:33:35,949
honest with you it's pretty tricky so

773
00:33:33,339 --> 00:33:37,059
I'm going to draw this out for you I'm

774
00:33:35,950 --> 00:33:41,650
going to tell you what I was trying to

775
00:33:37,059 --> 00:33:43,899
do so we're clear on it and we'll see it

776
00:33:41,650 --> 00:33:45,580
will see I the thing that I wanted to do

777
00:33:43,900 --> 00:33:48,700
i'm not sure if it's not as easy as I

778
00:33:45,579 --> 00:33:50,289
thought it was going to be it's just a

779
00:33:48,700 --> 00:33:58,630
subtlety of this of the way this code

780
00:33:50,289 --> 00:33:59,920
worked oh never mind so I forgot I

781
00:33:58,630 --> 00:34:01,450
already solve this problem in my head

782
00:33:59,920 --> 00:34:03,310
and I even talked about the game of show

783
00:34:01,450 --> 00:34:05,470
I'll tell you what I was thinking just

784
00:34:03,309 --> 00:34:07,419
so you can be a part of the thought

785
00:34:05,470 --> 00:34:08,769
process but what I was thinking is like

786
00:34:07,420 --> 00:34:10,210
okay I'm going to create this debug

787
00:34:08,769 --> 00:34:11,918
hierarchy right it's gonna be like foo

788
00:34:10,210 --> 00:34:13,389
and then there's a bar in here and then

789
00:34:11,918 --> 00:34:14,980
there's like a bass and the bass is

790
00:34:13,389 --> 00:34:16,539
going to be some floating point value

791
00:34:14,980 --> 00:34:17,829
that's like five point oh right and

792
00:34:16,539 --> 00:34:19,449
we're running the game that's all good

793
00:34:17,829 --> 00:34:21,849
and then we go ahead and the executable

794
00:34:19,449 --> 00:34:23,289
reloads right so the executable goes

795
00:34:21,849 --> 00:34:24,789
away which means that the event that

796
00:34:23,289 --> 00:34:26,800
this was pointing to now goes away and

797
00:34:24,789 --> 00:34:29,050
we lose the three-point oh so as

798
00:34:26,800 --> 00:34:30,730
thinking before was like oh I need to be

799
00:34:29,050 --> 00:34:32,080
able to like get back this one and

800
00:34:30,730 --> 00:34:34,240
remember the three-point oh so I can set

801
00:34:32,079 --> 00:34:35,529
it again in blah blah i forgot i just

802
00:34:34,239 --> 00:34:36,908
did all that work to make sure that the

803
00:34:35,530 --> 00:34:39,070
global classes through the flow through

804
00:34:36,909 --> 00:34:40,840
so it's actually going to happen is when

805
00:34:39,070 --> 00:34:43,480
we change these values they'll write out

806
00:34:40,840 --> 00:34:44,860
to the global constant store that like

807
00:34:43,480 --> 00:34:50,409
file you know a little ride out to

808
00:34:44,860 --> 00:34:51,970
handmade config.h these values are going

809
00:34:50,409 --> 00:34:53,679
to be written out into there eventually

810
00:34:51,969 --> 00:34:55,119
which means that I don't they care about

811
00:34:53,679 --> 00:34:58,780
that because the new executed will be

812
00:34:55,119 --> 00:35:02,079
come pre-loaded with the right values so

813
00:34:58,780 --> 00:35:03,100
that's actually kind of handy and so I

814
00:35:02,079 --> 00:35:05,170
don't have to worry about the thing I

815
00:35:03,099 --> 00:35:09,519
was going to do so forget all of that

816
00:35:05,170 --> 00:35:17,519
nonsense that I just said because it's

817
00:35:09,519 --> 00:35:23,349
all completely irrelevant goodbye

818
00:35:17,519 --> 00:35:28,210
goodbye so yeah so get a group for a

819
00:35:23,349 --> 00:35:31,210
name is actually a you know something

820
00:35:28,210 --> 00:35:32,740
like that we could just say that that's

821
00:35:31,210 --> 00:35:34,329
going to return us whatever the group is

822
00:35:32,739 --> 00:35:36,099
that should be added to back to the

823
00:35:34,329 --> 00:35:37,000
original thing I was saying that should

824
00:35:36,099 --> 00:35:39,159
be totally sufficient

825
00:35:37,000 --> 00:35:42,070
we don't have to do the preservation

826
00:35:39,159 --> 00:35:43,420
thing and this again means that the only

827
00:35:42,070 --> 00:35:45,490
thing we actually need to do is

828
00:35:43,420 --> 00:35:47,769
implement this particular function where

829
00:35:45,489 --> 00:35:51,129
it finds out what the group is for a

830
00:35:47,769 --> 00:35:52,509
particular name right and here's that

831
00:35:51,130 --> 00:35:53,769
name now we probably need to pass the

832
00:35:52,510 --> 00:35:54,820
debug stay for that I'm guessing because

833
00:35:53,769 --> 00:35:56,500
otherwise how's it going to do the

834
00:35:54,820 --> 00:35:57,370
search and then the other thing we're

835
00:35:56,500 --> 00:35:58,840
going to need is we're going to need

836
00:35:57,369 --> 00:36:01,630
some group that these things go into

837
00:35:58,840 --> 00:36:03,720
like before we kind of had this

838
00:36:01,630 --> 00:36:07,390
situation where we were adding things to

839
00:36:03,719 --> 00:36:09,849
to a group as the blocks got opened and

840
00:36:07,389 --> 00:36:11,559
closed right and now so we're going to

841
00:36:09,849 --> 00:36:13,360
have another one here that's like these

842
00:36:11,559 --> 00:36:16,630
are like the values group or whatever

843
00:36:13,360 --> 00:36:18,849
right the debug values group so that

844
00:36:16,630 --> 00:36:21,789
group where do we do our route group

845
00:36:18,849 --> 00:36:23,769
right we create one here looks like four

846
00:36:21,789 --> 00:36:27,130
that's four frames we don't care about

847
00:36:23,769 --> 00:36:31,989
that one so it's really in here right is

848
00:36:27,130 --> 00:36:34,840
what we want yeah so we have a problem

849
00:36:31,989 --> 00:36:36,909
here where we have the kool aid stuff we

850
00:36:34,840 --> 00:36:41,380
again have sort of a nasty little

851
00:36:36,909 --> 00:36:43,179
situation that we have and this is just

852
00:36:41,380 --> 00:36:47,530
gets back to us we really need to kind

853
00:36:43,179 --> 00:36:49,089
of go finish sometime soon doing the

854
00:36:47,530 --> 00:36:51,010
collation stuff as more of a permanent

855
00:36:49,090 --> 00:36:52,570
thing because really we want all these

856
00:36:51,010 --> 00:36:54,700
guys to be permanent and then we want to

857
00:36:52,570 --> 00:36:56,410
wipe them out presumably so as we kind

858
00:36:54,699 --> 00:36:58,599
of move through frames we want to wipe

859
00:36:56,409 --> 00:37:01,929
out data that's no longer necessary or

860
00:36:58,599 --> 00:37:04,059
something like this right so we'll push

861
00:37:01,929 --> 00:37:08,079
that for a second and not have to think

862
00:37:04,059 --> 00:37:09,730
about that at the moment but I yeah what

863
00:37:08,079 --> 00:37:14,230
we would want to do here is when we do

864
00:37:09,730 --> 00:37:15,460
that kool-aid ad variable to group you

865
00:37:14,230 --> 00:37:17,619
can see here that that puts it on the

866
00:37:15,460 --> 00:37:20,769
collation arena and that's a problem for

867
00:37:17,619 --> 00:37:22,900
us right so we kind of need to unify

868
00:37:20,769 --> 00:37:25,239
those at some point soon before we get

869
00:37:22,900 --> 00:37:28,059
too much further out of hand because

870
00:37:25,239 --> 00:37:29,289
these are values that we don't want to

871
00:37:28,059 --> 00:37:31,690
go away they're sort of permanent

872
00:37:29,289 --> 00:37:34,179
standing values and so we kind of have

873
00:37:31,690 --> 00:37:35,349
that dichotomy there now again the only

874
00:37:34,179 --> 00:37:36,789
reason we have that the Academy is

875
00:37:35,349 --> 00:37:38,199
because we haven't gone and finished

876
00:37:36,789 --> 00:37:39,789
sort of how we're doing our frame by

877
00:37:38,199 --> 00:37:41,109
frame processing so that means that's

878
00:37:39,789 --> 00:37:42,670
probably the next thing may that's what

879
00:37:41,110 --> 00:37:43,990
we should start on tomorrow either that

880
00:37:42,670 --> 00:37:46,750
or we kind of have a long break so maybe

881
00:37:43,989 --> 00:37:48,159
we put that off until after we come back

882
00:37:46,750 --> 00:37:50,349
since it might take more than a day to

883
00:37:48,159 --> 00:37:53,199
finish hard to say that maybe

884
00:37:50,349 --> 00:37:55,269
doing the day hard to say but anyway so

885
00:37:53,199 --> 00:37:58,029
in here when we do this we would need a

886
00:37:55,269 --> 00:37:59,739
separate way of doing add kohli

887
00:37:58,030 --> 00:38:02,340
parallel-group look we need something we

888
00:37:59,739 --> 00:38:07,000
could say like permanent in here right

889
00:38:02,340 --> 00:38:08,050
and in here where we do our part we

890
00:38:07,000 --> 00:38:09,489
would have to say whether you were

891
00:38:08,050 --> 00:38:13,030
trying to keep it for a while or not

892
00:38:09,489 --> 00:38:14,529
right and again this is really not like

893
00:38:13,030 --> 00:38:16,810
I said this is not good we don't want to

894
00:38:14,530 --> 00:38:18,519
actually leave it this way this is just

895
00:38:16,809 --> 00:38:22,029
like definitely a thing where we like to

896
00:38:18,519 --> 00:38:23,920
do move everything to permanent because

897
00:38:22,030 --> 00:38:26,350
really we don't want to actually do that

898
00:38:23,920 --> 00:38:28,630
kind of flushing that was never the goal

899
00:38:26,349 --> 00:38:30,309
it's just kind of how we left the system

900
00:38:28,630 --> 00:38:31,360
because we hadn't actually figured out

901
00:38:30,309 --> 00:38:34,360
how we were going to do frame by frame

902
00:38:31,360 --> 00:38:37,300
processing yet and yeah so that'll have

903
00:38:34,360 --> 00:38:38,890
to be another thing anyway so in here if

904
00:38:37,300 --> 00:38:40,720
its permanent you know it would go on

905
00:38:38,889 --> 00:38:43,150
the debug arena if it's not permanent it

906
00:38:40,719 --> 00:38:46,209
wouldn't not very complicated right very

907
00:38:43,150 --> 00:38:47,440
simple but that would have to happen and

908
00:38:46,210 --> 00:38:49,210
then we do get group for hierarchical

909
00:38:47,440 --> 00:38:50,559
name at the moment we can do is just say

910
00:38:49,210 --> 00:38:52,480
because we just are trying to get it

911
00:38:50,559 --> 00:38:54,009
working here what we can do is say

912
00:38:52,480 --> 00:38:55,780
forget that we're not actually going to

913
00:38:54,010 --> 00:38:58,960
do any of that at all instead what we're

914
00:38:55,780 --> 00:39:02,410
going to do is just say like okay we

915
00:38:58,960 --> 00:39:03,940
have the debug state values group and

916
00:39:02,409 --> 00:39:06,969
everything is going to go onto the

917
00:39:03,940 --> 00:39:08,170
values group right everything is you

918
00:39:06,969 --> 00:39:12,219
know everything that we have is going to

919
00:39:08,170 --> 00:39:14,470
go onto the value screwed so that is is

920
00:39:12,219 --> 00:39:22,449
easy because we don't do any work here

921
00:39:14,469 --> 00:39:23,379
variable group like so and then the

922
00:39:22,449 --> 00:39:26,289
other thing that we would need to do

923
00:39:23,380 --> 00:39:27,910
again is when we do collate where's the

924
00:39:26,289 --> 00:39:29,679
thing that does the group kolay create

925
00:39:27,909 --> 00:39:31,319
variable group right so this one right

926
00:39:29,679 --> 00:39:33,879
here where we create a variable group

927
00:39:31,320 --> 00:39:41,309
that as well would also need to take

928
00:39:33,880 --> 00:39:41,309
that permanent thing right like so

929
00:39:42,329 --> 00:39:45,610
really you know what I don't know why I

930
00:39:44,230 --> 00:39:47,079
wrote it that way either since we're

931
00:39:45,610 --> 00:39:49,150
just talking about this it would just be

932
00:39:47,079 --> 00:40:02,739
permanent debug State kool-aid arena or

933
00:39:49,150 --> 00:40:05,980
debug State keep up so I'm not sure why

934
00:40:02,739 --> 00:40:06,969
I didn't do it that way both times again

935
00:40:05,980 --> 00:40:08,230
probably because I was too busy to think

936
00:40:06,969 --> 00:40:11,199
about the fact that we probably should

937
00:40:08,230 --> 00:40:12,869
do that but yeah it's hard sometimes I'm

938
00:40:11,199 --> 00:40:16,029
handmade here because you know I have to

939
00:40:12,869 --> 00:40:18,279
parcel things out into like ways that

940
00:40:16,030 --> 00:40:19,960
are more coherent to explain which is

941
00:40:18,280 --> 00:40:21,790
not always exactly how they would do

942
00:40:19,960 --> 00:40:23,530
them and most of the time I can keep it

943
00:40:21,789 --> 00:40:25,239
so that they're the same but sometimes

944
00:40:23,530 --> 00:40:26,740
it's like I would really go fix this now

945
00:40:25,239 --> 00:40:28,359
and just take two hours to do it and it

946
00:40:26,739 --> 00:40:30,879
would be done but I know that doesn't

947
00:40:28,360 --> 00:40:32,110
fit inside a boundary like four episodes

948
00:40:30,880 --> 00:40:35,530
and stuff and it makes it a little bit

949
00:40:32,110 --> 00:40:37,210
tricky in my head but anyway so that's

950
00:40:35,530 --> 00:40:39,310
relatively straightforward and that's

951
00:40:37,210 --> 00:40:43,300
all done and so now we're fine and

952
00:40:39,309 --> 00:40:45,369
everything is good so that should be all

953
00:40:43,300 --> 00:40:50,440
we would need to do there I don't know

954
00:40:45,369 --> 00:40:52,299
why we didn't call that debug state but

955
00:40:50,440 --> 00:40:57,300
now these guys have to say okay this is

956
00:40:52,300 --> 00:41:03,660
not permanent this guy is permanent

957
00:40:57,300 --> 00:41:09,580
right this guy is not this guy's not

958
00:41:03,659 --> 00:41:13,679
this guy's not and funk she does not

959
00:41:09,579 --> 00:41:17,889
take one arguments that's true and

960
00:41:13,679 --> 00:41:20,199
functions not take three arguments that

961
00:41:17,889 --> 00:41:22,809
is also true so there we go so that's

962
00:41:20,199 --> 00:41:24,519
everything but I need to initialize when

963
00:41:22,809 --> 00:41:27,009
we initialize the debug system i want to

964
00:41:24,519 --> 00:41:30,039
create a initial group to hold all of

965
00:41:27,010 --> 00:41:32,980
these these peoples so when we call

966
00:41:30,039 --> 00:41:34,360
debug start in here and this stuff kind

967
00:41:32,980 --> 00:41:35,980
of gets initialized at the beginning i

968
00:41:34,360 --> 00:41:38,860
want to make sure that we have

969
00:41:35,980 --> 00:41:40,780
everything that we need in here so what

970
00:41:38,860 --> 00:41:45,250
I want to do is is make sure that we can

971
00:41:40,780 --> 00:41:49,390
do like a.m. yeah like you know whatever

972
00:41:45,250 --> 00:41:53,170
the thing is values group equals like

973
00:41:49,389 --> 00:41:55,159
Chloe create variable group right and

974
00:41:53,170 --> 00:41:56,480
that's a pretty bad name for

975
00:41:55,159 --> 00:41:58,369
because we're not actually thinking it

976
00:41:56,480 --> 00:42:00,500
as a collation anymore because again

977
00:41:58,369 --> 00:42:06,259
it'll presumably those names will change

978
00:42:00,500 --> 00:42:09,860
again but yeah so there's our values

979
00:42:06,260 --> 00:42:12,080
group so now when we run that I don't

980
00:42:09,860 --> 00:42:13,309
know it should in theory pick up all

981
00:42:12,079 --> 00:42:14,719
those debug variables and all we have to

982
00:42:13,309 --> 00:42:16,309
do now is actually have somewhere to

983
00:42:14,719 --> 00:42:18,289
display them now what we can do display

984
00:42:16,309 --> 00:42:23,059
them temporarily to write is we've got

985
00:42:18,289 --> 00:42:25,009
sort of our debug draw a menu so all we

986
00:42:23,059 --> 00:42:26,570
have to do here in our debug draw a menu

987
00:42:25,010 --> 00:42:28,160
is when we are looping over these things

988
00:42:26,570 --> 00:42:30,890
we can just do a thing where we go like

989
00:42:28,159 --> 00:42:32,480
okay our hacky group instead of this now

990
00:42:30,889 --> 00:42:36,319
is going to actually be something else

991
00:42:32,480 --> 00:42:39,740
so our hacking group is just going to be

992
00:42:36,320 --> 00:42:41,210
debug state values group and this would

993
00:42:39,739 --> 00:42:43,069
show us what's in that group so we can

994
00:42:41,210 --> 00:42:44,570
test it and see if our stuff that picks

995
00:42:43,070 --> 00:42:49,760
up these values is working at all which

996
00:42:44,570 --> 00:42:51,410
I don't know if it is right okay so

997
00:42:49,760 --> 00:42:54,350
let's see what's going on here so first

998
00:42:51,409 --> 00:42:55,940
of all this is some weirdness here so

999
00:42:54,349 --> 00:42:57,710
first of all we're sort of working in

1000
00:42:55,940 --> 00:43:00,230
the sense that Hey look it wired up

1001
00:42:57,710 --> 00:43:02,840
properly but why are we getting the same

1002
00:43:00,230 --> 00:43:04,849
one why are we getting you know a bunch

1003
00:43:02,840 --> 00:43:06,590
of calls that are the same debug value

1004
00:43:04,849 --> 00:43:09,349
because that local persist should have

1005
00:43:06,590 --> 00:43:11,150
only initialized one time so what is

1006
00:43:09,349 --> 00:43:13,579
that about so we got a bunch of

1007
00:43:11,150 --> 00:43:16,340
debugging to do but otherwise were you

1008
00:43:13,579 --> 00:43:18,230
know we're pretty close right we're

1009
00:43:16,340 --> 00:43:21,230
pretty close to what we want because it

1010
00:43:18,230 --> 00:43:23,389
actually did wire up properly and and we

1011
00:43:21,230 --> 00:43:25,099
can actually turn on the actual value in

1012
00:43:23,389 --> 00:43:26,329
real time now instead of a growth iqbal

1013
00:43:25,099 --> 00:43:28,009
do cycle so all we really need to do is

1014
00:43:26,329 --> 00:43:31,309
for out what's going on there with the

1015
00:43:28,010 --> 00:43:35,540
multiple ads and then we can proceed

1016
00:43:31,309 --> 00:43:40,099
right okay so let's let me start at the

1017
00:43:35,539 --> 00:43:42,619
beginning where we have mark debug value

1018
00:43:40,099 --> 00:43:44,630
we're calling kool-aid a very up to

1019
00:43:42,619 --> 00:43:47,210
group we get the group here and in

1020
00:43:44,630 --> 00:43:49,010
theory that should be fine and we're

1021
00:43:47,210 --> 00:43:50,360
adding in the event that's pointed to

1022
00:43:49,010 --> 00:43:53,090
the value debug event which should have

1023
00:43:50,360 --> 00:43:54,710
been that one and in fact I guess now

1024
00:43:53,090 --> 00:43:57,079
think about it we probably should be

1025
00:43:54,710 --> 00:43:58,730
using that one's name as well when we do

1026
00:43:57,079 --> 00:43:59,599
that we that won't matter because we're

1027
00:43:58,730 --> 00:44:01,849
not actually doing anything on it yet

1028
00:43:59,599 --> 00:44:04,909
but when we would go to do that that

1029
00:44:01,849 --> 00:44:07,039
would have been a problem right so now

1030
00:44:04,909 --> 00:44:08,690
when we call kohli add variable to group

1031
00:44:07,039 --> 00:44:10,730
what we want to do is to

1032
00:44:08,690 --> 00:44:13,909
look here inside the interface thing and

1033
00:44:10,730 --> 00:44:16,699
make sure that that's an actual that all

1034
00:44:13,909 --> 00:44:18,230
of this stuff works out properly so we

1035
00:44:16,699 --> 00:44:20,210
have our sub event here that we're

1036
00:44:18,230 --> 00:44:21,619
looking at we are pointing to that one

1037
00:44:20,210 --> 00:44:23,630
properly and that is the one that we're

1038
00:44:21,619 --> 00:44:28,068
trying to add we initialize the sub

1039
00:44:23,630 --> 00:44:31,430
event with the name as we should we

1040
00:44:28,068 --> 00:44:35,960
initialize the line number the thread ID

1041
00:44:31,429 --> 00:44:37,848
the core type looks right as well so all

1042
00:44:35,960 --> 00:44:39,740
that stuff looks for do we got about ten

1043
00:44:37,849 --> 00:44:41,059
minutes left on the clock edition so we

1044
00:44:39,739 --> 00:44:42,588
have actually 15 minutes left which is

1045
00:44:41,059 --> 00:44:47,449
quite a bit of time so if we can debug

1046
00:44:42,588 --> 00:44:50,809
this in that time so our debug ifs here

1047
00:44:47,449 --> 00:44:55,338
hopefully look like there would be

1048
00:44:50,809 --> 00:45:00,588
working relatively well to me like that

1049
00:44:55,338 --> 00:45:05,358
all looks pretty good and yeah I don't

1050
00:45:00,588 --> 00:45:09,679
see I don't really see what the problem

1051
00:45:05,358 --> 00:45:12,500
is here I don't understand why we would

1052
00:45:09,679 --> 00:45:15,348
get multiple ones and we shouldn't ever

1053
00:45:12,500 --> 00:45:17,690
because this is always doing you know an

1054
00:45:15,349 --> 00:45:20,660
initialization only once local persist

1055
00:45:17,690 --> 00:45:22,280
is defined to be static right I mean we

1056
00:45:20,659 --> 00:45:25,969
just make sure that we didn't mess that

1057
00:45:22,280 --> 00:45:27,490
up but presumably we don't and if it

1058
00:45:25,969 --> 00:45:31,818
wasn't we'd get a lot more of them so

1059
00:45:27,489 --> 00:45:33,769
yeah local persist attic so I feel like

1060
00:45:31,818 --> 00:45:35,239
that should have worked obviously it

1061
00:45:33,769 --> 00:45:38,869
doesn't so I'm going to just set a

1062
00:45:35,239 --> 00:45:41,358
breakpoint in debug initialized value so

1063
00:45:38,869 --> 00:45:43,730
I can see what's happening there and

1064
00:45:41,358 --> 00:45:45,289
figure out what's going on so here we

1065
00:45:43,730 --> 00:45:46,789
are getting called with this in game

1066
00:45:45,289 --> 00:45:51,170
update and render his ground chunks

1067
00:45:46,789 --> 00:45:52,699
recompute on exe change so I'm just want

1068
00:45:51,170 --> 00:45:56,750
to take a look here and see what we

1069
00:45:52,699 --> 00:45:58,368
actually got so here's our event and the

1070
00:45:56,750 --> 00:46:00,380
event looks about right it's got a block

1071
00:45:58,369 --> 00:46:02,329
name of nothing which is what we expect

1072
00:46:00,380 --> 00:46:04,760
because we didn't pat that's as f what

1073
00:46:02,329 --> 00:46:06,289
we passed it's got a line number a

1074
00:46:04,760 --> 00:46:08,000
threat ID that it all makes sense it's

1075
00:46:06,289 --> 00:46:10,969
got the type that we expect right which

1076
00:46:08,000 --> 00:46:12,260
is to mark the debug value and it's got

1077
00:46:10,969 --> 00:46:15,338
values in here that don't actually

1078
00:46:12,260 --> 00:46:18,619
correspond to anything quite yet right

1079
00:46:15,338 --> 00:46:22,130
so then we would assign it and now it's

1080
00:46:18,619 --> 00:46:22,490
a sign to debug value right here now of

1081
00:46:22,130 --> 00:46:23,750
course

1082
00:46:22,489 --> 00:46:25,129
debug value is completely meaningless

1083
00:46:23,750 --> 00:46:27,079
but that's because we have initializing

1084
00:46:25,130 --> 00:46:29,539
yet as we initialize it coming through

1085
00:46:27,079 --> 00:46:30,799
here you can see that it gets basically

1086
00:46:29,539 --> 00:46:32,119
what we would expect it to get here is

1087
00:46:30,800 --> 00:46:34,450
the name that we expect it to have

1088
00:46:32,119 --> 00:46:40,130
there's the line number of the thread ID

1089
00:46:34,449 --> 00:46:45,379
the type hmm what type is that debug be

1090
00:46:40,130 --> 00:46:49,390
32 so that's good and then it returns

1091
00:46:45,380 --> 00:46:53,930
whatever that is right so now we should

1092
00:46:49,389 --> 00:46:55,940
if we look at the locals here where we

1093
00:46:53,929 --> 00:46:57,440
don't have the locals I probably turn

1094
00:46:55,940 --> 00:47:00,380
them off because I very rarely use them

1095
00:46:57,440 --> 00:47:02,809
but now I want them if you look at the

1096
00:47:00,380 --> 00:47:06,260
locals here we should have yes and stuff

1097
00:47:02,809 --> 00:47:08,389
and we do so here is that debug value

1098
00:47:06,260 --> 00:47:10,790
ground chunks recompute on eggsy change

1099
00:47:08,389 --> 00:47:13,879
which is this one here here you can see

1100
00:47:10,789 --> 00:47:25,969
it is set properly as far as I could

1101
00:47:13,880 --> 00:47:32,510
tell although although why is it set why

1102
00:47:25,969 --> 00:47:34,989
is its value set to 10 because that is

1103
00:47:32,510 --> 00:47:37,970
what the default value is in the config

1104
00:47:34,989 --> 00:47:39,409
so that's again actually also totally

1105
00:47:37,969 --> 00:47:42,049
correct so that's even working properly

1106
00:47:39,409 --> 00:47:44,868
so it's got all that and then it can do

1107
00:47:42,050 --> 00:47:49,460
its little thing and so that's all good

1108
00:47:44,869 --> 00:47:53,030
everything there looks fine and I'm not

1109
00:47:49,460 --> 00:47:55,420
sure yeah what the problem was there ok

1110
00:47:53,030 --> 00:47:55,420
so

1111
00:47:59,329 --> 00:48:14,989
I think I know what's wrong in fact I

1112
00:48:07,250 --> 00:48:18,980
definitely know what's wrong yes to

1113
00:48:14,989 --> 00:48:21,889
things don't ask me why I thought of

1114
00:48:18,980 --> 00:48:25,789
this just now but sometimes the brain

1115
00:48:21,889 --> 00:48:27,739
works that way thing number one is it's

1116
00:48:25,789 --> 00:48:30,650
in the wrong place of for our processing

1117
00:48:27,739 --> 00:48:32,539
right this is inside the collation frame

1118
00:48:30,650 --> 00:48:34,460
processing which means that if we have

1119
00:48:32,539 --> 00:48:37,579
not had a frame marker yet we will not

1120
00:48:34,460 --> 00:48:39,579
record it and that is not what we want

1121
00:48:37,579 --> 00:48:41,929
at all right that's like a bad situation

1122
00:48:39,579 --> 00:48:44,809
what we want to do is record it

1123
00:48:41,929 --> 00:48:46,759
regardless right so what we want to do

1124
00:48:44,809 --> 00:48:48,440
is in here we want to actually have a

1125
00:48:46,760 --> 00:48:51,770
special case which is like we always

1126
00:48:48,440 --> 00:48:55,130
want these no matter what right so in

1127
00:48:51,769 --> 00:48:56,420
here where we do else processing we

1128
00:48:55,130 --> 00:48:59,390
would want to do a thing where we say

1129
00:48:56,420 --> 00:49:04,630
else if and just like we did this one

1130
00:48:59,389 --> 00:49:07,069
right we would want to do okay else if

1131
00:49:04,630 --> 00:49:09,740
this will actually it's not even else if

1132
00:49:07,070 --> 00:49:17,480
it would actually be up here right it's

1133
00:49:09,739 --> 00:49:22,129
so if eventtype equals mark debug value

1134
00:49:17,480 --> 00:49:23,990
oops that's no good no matter whether we

1135
00:49:22,130 --> 00:49:26,780
have a frame open or not we want to

1136
00:49:23,989 --> 00:49:28,129
capture it right so that was bug number

1137
00:49:26,780 --> 00:49:29,420
one because basically they were all

1138
00:49:28,130 --> 00:49:31,730
happening on the first frame and they

1139
00:49:29,420 --> 00:49:34,550
all got thrown out right we didn't

1140
00:49:31,730 --> 00:49:36,670
bother to prostate them so that should

1141
00:49:34,550 --> 00:49:43,160
solve the problem of them not showing up

1142
00:49:36,670 --> 00:49:46,300
if that makes sense oh wait a minute to

1143
00:49:43,159 --> 00:49:49,909
somehow get past this here if it up

1144
00:49:46,300 --> 00:49:55,300
missing in else copypasta as you guys

1145
00:49:49,909 --> 00:49:57,980
say okay so now we've got all these guys

1146
00:49:55,300 --> 00:50:00,050
right you can actually see them all here

1147
00:49:57,980 --> 00:50:02,300
and so now that the next question is

1148
00:50:00,050 --> 00:50:04,610
just how can we have so many of them

1149
00:50:02,300 --> 00:50:07,910
right like how come there are multiple

1150
00:50:04,610 --> 00:50:11,420
of these guys and the answer to that I

1151
00:50:07,909 --> 00:50:12,799
believe is because the statics are

1152
00:50:11,420 --> 00:50:15,200
probably not

1153
00:50:12,800 --> 00:50:17,120
being used in a thread-safe way meaning

1154
00:50:15,199 --> 00:50:20,389
multiple threads could probably all

1155
00:50:17,119 --> 00:50:23,150
enter that and start using them I guess

1156
00:50:20,389 --> 00:50:25,069
I don't actually know what the rules are

1157
00:50:23,150 --> 00:50:26,630
for that because normally that's not

1158
00:50:25,070 --> 00:50:30,440
something that I spend a lot of time

1159
00:50:26,630 --> 00:50:32,660
looking at statics like almost never use

1160
00:50:30,440 --> 00:50:34,789
so the in a debug systems the only time

1161
00:50:32,659 --> 00:50:36,469
I would ever use them and so I believe

1162
00:50:34,789 --> 00:50:37,699
that this is actually something to do

1163
00:50:36,469 --> 00:50:39,439
with that now you can see that it

1164
00:50:37,699 --> 00:50:41,029
actually works just fine it's just a

1165
00:50:39,440 --> 00:50:44,750
question of why we've got so many of

1166
00:50:41,030 --> 00:50:46,850
them right but I think that might be it

1167
00:50:44,750 --> 00:50:49,219
I feel like maybe the statics are stored

1168
00:50:46,849 --> 00:50:56,449
in thread-local storage or something

1169
00:50:49,219 --> 00:50:57,889
like this maybe I don't know to be

1170
00:50:56,449 --> 00:50:59,659
honest I'm not sure exact what's going

1171
00:50:57,889 --> 00:51:01,159
on there but I have a feeling that it

1172
00:50:59,659 --> 00:51:02,929
has something to do with the threading I

1173
00:51:01,159 --> 00:51:04,069
don't actually know you might have

1174
00:51:02,929 --> 00:51:06,829
nothing to do with the threading for all

1175
00:51:04,070 --> 00:51:09,860
I know but we're going to find out okay

1176
00:51:06,829 --> 00:51:12,230
so that's all working up to the point

1177
00:51:09,860 --> 00:51:14,390
where we're getting multiple copies but

1178
00:51:12,230 --> 00:51:17,240
everything else about it seems to work

1179
00:51:14,389 --> 00:51:21,079
okay so the question is just why are we

1180
00:51:17,239 --> 00:51:22,519
getting multiple values right why so the

1181
00:51:21,079 --> 00:51:24,199
first thing we could do is just turn off

1182
00:51:22,519 --> 00:51:26,900
threading and see if that's actually the

1183
00:51:24,199 --> 00:51:28,789
case as a test so that I know what I'm

1184
00:51:26,900 --> 00:51:29,809
looking for right so I know whether I'm

1185
00:51:28,789 --> 00:51:30,889
looking for something to do with the

1186
00:51:29,809 --> 00:51:31,699
threading or whether it has nothing to

1187
00:51:30,889 --> 00:51:34,549
do with the threading it's just a

1188
00:51:31,699 --> 00:51:35,389
regular old bug that doesn't have to it

1189
00:51:34,550 --> 00:51:39,200
doesn't have anything to do with that

1190
00:51:35,389 --> 00:51:41,500
right so what I'm going to do is I'm

1191
00:51:39,199 --> 00:51:43,909
going to reduce the number of threads

1192
00:51:41,500 --> 00:51:45,440
down to a different number and see if

1193
00:51:43,909 --> 00:51:49,009
that changes the number of duplicates

1194
00:51:45,440 --> 00:51:51,650
that we get right so when we have create

1195
00:51:49,010 --> 00:51:54,260
thread here when we do this right right

1196
00:51:51,650 --> 00:51:58,250
here and we have the sort of thread

1197
00:51:54,260 --> 00:52:00,740
count thing win32 make you I'm going to

1198
00:51:58,250 --> 00:52:02,300
just reduce that number right so

1199
00:52:00,739 --> 00:52:03,769
temporarily i'm going to say that

1200
00:52:02,300 --> 00:52:08,360
there's just one thread in these guys

1201
00:52:03,769 --> 00:52:11,750
and then i'm going to run it and let's

1202
00:52:08,360 --> 00:52:14,150
see see what we get so that looks to me

1203
00:52:11,750 --> 00:52:15,800
like we got less in the ground out in

1204
00:52:14,150 --> 00:52:19,460
the ground chunks out lines but

1205
00:52:15,800 --> 00:52:23,120
everybody else has way plenty you know

1206
00:52:19,460 --> 00:52:26,090
actually has tons of them right so i

1207
00:52:23,119 --> 00:52:26,618
would say that does not look that just

1208
00:52:26,090 --> 00:52:29,108
does not

1209
00:52:26,619 --> 00:52:33,338
look to me like it is it is a threading

1210
00:52:29,108 --> 00:52:35,469
thing right that looks pretty much not

1211
00:52:33,338 --> 00:52:37,268
like a threading thing to me all right

1212
00:52:35,469 --> 00:52:38,199
so if we're not looking for a threading

1213
00:52:37,268 --> 00:52:39,548
thing then we have to just figure out

1214
00:52:38,199 --> 00:52:41,498
how come we're adding these things

1215
00:52:39,548 --> 00:52:45,608
multiple times right look what's

1216
00:52:41,498 --> 00:52:47,379
happening there and I'm not exactly sure

1217
00:52:45,608 --> 00:52:50,018
because I feel like we shouldn't

1218
00:52:47,380 --> 00:52:52,480
actually call that function at all where

1219
00:52:50,018 --> 00:52:53,949
we do the that that initialization I

1220
00:52:52,480 --> 00:52:55,838
feel like that should not be getting

1221
00:52:53,949 --> 00:52:57,818
called multiple times what I want to do

1222
00:52:55,838 --> 00:52:59,980
is I want to go inspect a call site now

1223
00:52:57,818 --> 00:53:01,389
and see if I'm right about that or

1224
00:52:59,980 --> 00:53:04,179
whether the compiler is doing something

1225
00:53:01,389 --> 00:53:06,639
else in there entirely so let's just

1226
00:53:04,179 --> 00:53:08,199
take a break point here and I'm going to

1227
00:53:06,639 --> 00:53:09,788
go ahead and go to the disassembly

1228
00:53:08,199 --> 00:53:11,739
because I just want to see what is

1229
00:53:09,789 --> 00:53:15,278
actually happening inside this

1230
00:53:11,739 --> 00:53:16,838
disassembly right so here we go we're

1231
00:53:15,278 --> 00:53:19,690
coming through this at the first you

1232
00:53:16,838 --> 00:53:22,150
know the very first time we're taking a

1233
00:53:19,690 --> 00:53:24,999
look at this s3 location which i assume

1234
00:53:22,150 --> 00:53:26,980
is where the statics are stored and

1235
00:53:24,998 --> 00:53:29,798
we're taking a look to see whether we've

1236
00:53:26,980 --> 00:53:32,048
initialized it or not and it turns out

1237
00:53:29,798 --> 00:53:33,998
that we have not right so this jump this

1238
00:53:32,048 --> 00:53:36,818
jump not equal that jump would have

1239
00:53:33,998 --> 00:53:39,939
jumped us past right 1266 right there

1240
00:53:36,818 --> 00:53:42,429
you can see it goes to 86 h right 86 h

1241
00:53:39,940 --> 00:53:44,470
is down here somewhere there it is so it

1242
00:53:42,429 --> 00:53:47,919
would just skip over this code and start

1243
00:53:44,469 --> 00:53:51,518
doing other stuff in the event where it

1244
00:53:47,920 --> 00:53:53,798
was not a better didn't need to

1245
00:53:51,518 --> 00:53:56,909
initialize right so then we're going to

1246
00:53:53,798 --> 00:53:59,768
load this stuff in here here we go and

1247
00:53:56,909 --> 00:54:01,420
presumably like again all this stuff

1248
00:53:59,768 --> 00:54:03,909
like where we're actually calling to you

1249
00:54:01,420 --> 00:54:06,999
bug initialized value that stuff is all

1250
00:54:03,909 --> 00:54:08,498
happening only this one time right so

1251
00:54:06,998 --> 00:54:10,838
that should never happen again the

1252
00:54:08,498 --> 00:54:13,689
recompute on eggs you change I don't

1253
00:54:10,838 --> 00:54:16,838
think right here it goes we're putting

1254
00:54:13,690 --> 00:54:21,278
that guy in there we're pushing him on

1255
00:54:16,838 --> 00:54:26,768
to the t bug stack and that's just

1256
00:54:21,278 --> 00:54:29,559
that's just it right nothing else

1257
00:54:26,768 --> 00:54:32,818
happens here it just initializes the

1258
00:54:29,559 --> 00:54:32,819
value exact like you would expect

1259
00:54:34,500 --> 00:54:41,019
hmm so I don't see why that would have

1260
00:54:39,460 --> 00:54:44,289
also let me check one that's actually

1261
00:54:41,019 --> 00:54:47,409
that I can see is being so and that one

1262
00:54:44,289 --> 00:54:58,929
gets added multiple times as well right

1263
00:54:47,409 --> 00:55:00,848
so yeah not only that but it's the same

1264
00:54:58,929 --> 00:55:05,618
debug ID so it's like it just keeps

1265
00:55:00,849 --> 00:55:07,150
looping over itself as well right so I

1266
00:55:05,619 --> 00:55:09,430
don't understand I think we've got a

1267
00:55:07,150 --> 00:55:11,289
problem with our tree I don't think we

1268
00:55:09,429 --> 00:55:14,589
actually have a problem necessarily with

1269
00:55:11,289 --> 00:55:16,000
our I think we're well I don't know what

1270
00:55:14,590 --> 00:55:19,650
we're doing this is a bit of a puzzler

1271
00:55:16,000 --> 00:55:23,139
I'm not sure exactly what's happening

1272
00:55:19,650 --> 00:55:30,010
that's kind of bizarre that's a little

1273
00:55:23,139 --> 00:55:34,809
bizarre pulley add variable to group g

1274
00:55:30,010 --> 00:55:39,820
list insert link event is the one to add

1275
00:55:34,809 --> 00:55:42,119
it does not have children a cert link

1276
00:55:39,820 --> 00:55:47,490
event type is not equal to begin block

1277
00:55:42,119 --> 00:55:50,200
ok that seems pretty innocuous to me

1278
00:55:47,489 --> 00:55:52,868
right that doesn't seem particularly

1279
00:55:50,199 --> 00:55:54,368
weird let's see what happens in our in

1280
00:55:52,869 --> 00:55:56,140
our hockey printout thing here so

1281
00:55:54,369 --> 00:55:59,019
there's only brasília we're just

1282
00:55:56,139 --> 00:56:01,269
printing just this one tree I assume and

1283
00:55:59,019 --> 00:56:07,449
then we're kind of doing our traversal

1284
00:56:01,269 --> 00:56:16,199
here ah and again that seems pretty sane

1285
00:56:07,449 --> 00:56:16,199
to me I don't get it I don't get it

1286
00:56:20,659 --> 00:56:30,119
so it could be because we are collating

1287
00:56:23,969 --> 00:56:32,609
multiple times on the r yeah that's I

1288
00:56:30,119 --> 00:56:34,230
think still it's I think it's all just

1289
00:56:32,610 --> 00:56:35,730
the same thing I think about it it's all

1290
00:56:34,230 --> 00:56:38,070
going to be because we're collating

1291
00:56:35,730 --> 00:56:40,800
multiple times as well right when we do

1292
00:56:38,070 --> 00:56:43,740
collate debug records any time we call

1293
00:56:40,800 --> 00:56:45,360
restart collation it's not going to like

1294
00:56:43,739 --> 00:56:48,449
them it's not going to go wipe those

1295
00:56:45,360 --> 00:56:50,430
guys out so you know presumably if when

1296
00:56:48,449 --> 00:56:52,619
we did restart collation we actually did

1297
00:56:50,429 --> 00:56:54,599
a flush year of those guys then we would

1298
00:56:52,619 --> 00:56:55,739
be fine but of course we don't want to

1299
00:56:54,599 --> 00:57:01,170
do that because we want them to stick

1300
00:56:55,739 --> 00:57:07,519
around permanently right so that's a bit

1301
00:57:01,170 --> 00:57:09,990
of a bummer it's okay I suppose because

1302
00:57:07,519 --> 00:57:12,780
we could also make it so that when these

1303
00:57:09,989 --> 00:57:16,529
things get added we could make it so

1304
00:57:12,780 --> 00:57:18,740
that they if they find themselves in the

1305
00:57:16,530 --> 00:57:20,880
hierarchal name they don't add a new one

1306
00:57:18,739 --> 00:57:23,129
but I don't know so i would say

1307
00:57:20,880 --> 00:57:25,110
basically i think what's happening there

1308
00:57:23,130 --> 00:57:26,730
is when we restart collation it'll just

1309
00:57:25,110 --> 00:57:28,920
reread those events and add them again

1310
00:57:26,730 --> 00:57:32,460
and so i think really what we need to do

1311
00:57:28,920 --> 00:57:34,980
is just stop doing that entirely you can

1312
00:57:32,460 --> 00:57:37,409
see like we do this a couple times right

1313
00:57:34,980 --> 00:57:40,820
when the egg xia is reloaded we do it

1314
00:57:37,409 --> 00:57:42,929
anytime refresh collation happens right

1315
00:57:40,820 --> 00:57:47,340
which is any tiny press like the left

1316
00:57:42,929 --> 00:57:49,500
mouse button as well so I feel like that

1317
00:57:47,340 --> 00:57:52,710
is really what the problem is and when

1318
00:57:49,500 --> 00:58:01,849
the frame when the frame count right in

1319
00:57:52,710 --> 00:58:04,349
here we're doing it every frame yeah

1320
00:58:01,849 --> 00:58:09,329
well that's okay that was the next thing

1321
00:58:04,349 --> 00:58:11,909
we need to fix anyway so I'm just going

1322
00:58:09,329 --> 00:58:13,500
to say that's it for today tomorrow that

1323
00:58:11,909 --> 00:58:16,170
pretty much means that's what we have to

1324
00:58:13,500 --> 00:58:18,000
fix right and that's good anyway because

1325
00:58:16,170 --> 00:58:20,010
it's kind of been going on too long

1326
00:58:18,000 --> 00:58:21,570
having that sort of weird janky like how

1327
00:58:20,010 --> 00:58:24,030
do these events get retired sort of a

1328
00:58:21,570 --> 00:58:26,010
thing so I think probably what we would

1329
00:58:24,030 --> 00:58:27,360
want to do is just legitimately go in

1330
00:58:26,010 --> 00:58:29,100
there and be like okay let's actually

1331
00:58:27,360 --> 00:58:30,400
clean this out and make it so that we

1332
00:58:29,099 --> 00:58:32,259
process one frame at a time

1333
00:58:30,400 --> 00:58:33,670
and that as things pull out of the

1334
00:58:32,260 --> 00:58:35,349
buffer we get rid of them and stuff like

1335
00:58:33,670 --> 00:58:40,358
that which is going to be a little bit

1336
00:58:35,349 --> 00:58:46,710
of work but we'll do it right so I think

1337
00:58:40,358 --> 00:58:46,710
that's all good and I think probably

1338
00:58:46,798 --> 00:58:50,980
yeah I mean we probably should make a

1339
00:58:49,179 --> 00:58:52,118
pretty big dent in tomorrow I don't know

1340
00:58:50,980 --> 00:58:53,139
if we'll be able to finish it in time

1341
00:58:52,119 --> 00:58:54,519
but we could probably make a pretty big

1342
00:58:53,139 --> 00:58:55,778
that's in tomorrow and then that would

1343
00:58:54,519 --> 00:58:57,818
fix our problem with the multiple

1344
00:58:55,778 --> 00:59:00,239
editions so I'm going to go ahead and go

1345
00:58:57,818 --> 00:59:00,239
to the QA

1346
00:59:16,619 --> 00:59:18,679
you

1347
00:59:22,800 --> 00:59:30,550
just as you use says variable initiation

1348
00:59:26,889 --> 00:59:32,920
hack in debug if macro makes my internal

1349
00:59:30,550 --> 00:59:36,100
code quality kitten sad would it be

1350
00:59:32,920 --> 00:59:49,480
possible to move that initiation to

1351
00:59:36,099 --> 00:59:52,659
struct quote quote method I'm not sure

1352
00:59:49,480 --> 00:59:56,889
what you mean does use could you be more

1353
00:59:52,659 --> 00:59:59,139
specific BTW in games persisting the

1354
00:59:56,889 --> 01:00:00,670
debug value between live code loading is

1355
00:59:59,139 --> 01:00:02,799
great i didn't understand what you were

1356
01:00:00,670 --> 01:00:04,570
viewing but then i got it with the demo

1357
01:00:02,800 --> 01:00:06,880
really cool i had completed the value of

1358
01:00:04,570 --> 01:00:08,440
variable with the value of debug value

1359
01:00:06,880 --> 01:00:13,200
of debug of the variable small audition

1360
01:00:08,440 --> 01:00:13,200
for a huge benefit okay

1361
01:00:51,679 --> 01:00:55,129
any questions

1362
01:01:02,179 --> 01:01:04,239
you

1363
01:01:05,449 --> 01:01:10,949
doesn't look like it although I would

1364
01:01:08,280 --> 01:01:15,269
like just used to say what he thought

1365
01:01:10,949 --> 01:01:22,230
was the thing he wanted to have the

1366
01:01:15,269 --> 01:01:24,500
cleaner didn't really understand what he

1367
01:01:22,230 --> 01:01:24,500
was saying

1368
01:01:37,920 --> 01:01:47,780
uh yeah i mean he's talking about this

1369
01:01:41,338 --> 01:01:47,779
right here but i'm not sure

1370
01:02:19,690 --> 01:02:24,079
BTW names are you sad you didn't fix

1371
01:02:22,340 --> 01:02:25,850
collation if no more questions come in

1372
01:02:24,079 --> 01:02:28,400
it would be neat to see it now so you're

1373
01:02:25,849 --> 01:02:30,019
not sad it's going to be a pretty

1374
01:02:28,400 --> 01:02:32,300
involved thing right like that's our

1375
01:02:30,019 --> 01:02:35,480
final sort of thing for handling the

1376
01:02:32,300 --> 01:02:37,190
flow of data through the system so I'm

1377
01:02:35,480 --> 01:02:42,829
not going to fix it in like 10 minutes

1378
01:02:37,190 --> 01:02:46,420
right basically that's the thing where

1379
01:02:42,829 --> 01:02:46,420
it just kind of actually parcels it up

1380
01:02:48,760 --> 01:02:53,060
mr. fourth dimension will you have time

1381
01:02:51,199 --> 01:02:54,500
tomorrow to look at for kodir I am

1382
01:02:53,059 --> 01:02:55,849
trying to decide whether to prioritize

1383
01:02:54,500 --> 01:02:59,929
getting the new demo out tomorrow

1384
01:02:55,849 --> 01:03:02,839
morning i would say it depends on

1385
01:02:59,929 --> 01:03:10,190
whether it's closer to being switchable

1386
01:03:02,840 --> 01:03:16,340
to use for me which i think i think it

1387
01:03:10,190 --> 01:03:18,559
was completion and make inside the

1388
01:03:16,340 --> 01:03:24,070
program i remember what the main holdups

1389
01:03:18,559 --> 01:03:27,699
were uh for for coder and i don't

1390
01:03:24,070 --> 01:03:30,410
remember what they are but i could look

1391
01:03:27,699 --> 01:03:33,379
because like you added undo which is

1392
01:03:30,409 --> 01:03:36,319
awesome and is definitely something that

1393
01:03:33,380 --> 01:03:38,390
would have prevented me from being able

1394
01:03:36,320 --> 01:03:39,650
to switch permanently but that's not

1395
01:03:38,389 --> 01:03:41,449
something I need to do a for a quote of

1396
01:03:39,650 --> 01:03:43,340
friday on cuz like yes awesome that's

1397
01:03:41,449 --> 01:03:45,289
checked off the list but i don't need to

1398
01:03:43,340 --> 01:03:50,059
test it I trust that you have it working

1399
01:03:45,289 --> 01:03:51,139
right and that's undo so I'm trying to

1400
01:03:50,059 --> 01:03:52,579
think if there are any other things I

1401
01:03:51,139 --> 01:03:58,309
need to play with and it would depend

1402
01:03:52,579 --> 01:04:00,769
right it would depend if there's new

1403
01:03:58,309 --> 01:04:04,670
features that would be in that demo that

1404
01:04:00,769 --> 01:04:08,480
I should should see if I can move more

1405
01:04:04,670 --> 01:04:13,820
of my to-do list over to then we could

1406
01:04:08,480 --> 01:04:15,800
do it if not then I don't tend to add I

1407
01:04:13,820 --> 01:04:17,390
don't tend to really need to do a for

1408
01:04:15,800 --> 01:04:20,120
code of friday for things where it's

1409
01:04:17,389 --> 01:04:22,819
like this was a good feature edition but

1410
01:04:20,119 --> 01:04:25,179
it's not currently blocking my my dotty

1411
01:04:22,820 --> 01:04:25,180
max

1412
01:04:26,608 --> 01:04:33,670
yes that's a really long and more winded

1413
01:04:30,690 --> 01:04:35,980
way of doing it mr. first mentioned

1414
01:04:33,670 --> 01:04:39,159
gotcha I do have parameterised commands

1415
01:04:35,980 --> 01:04:41,230
that I'd love to hear response on sure

1416
01:04:39,159 --> 01:04:42,338
well you know don't forget dude you

1417
01:04:41,230 --> 01:04:45,009
don't have to wait for the pre stream

1418
01:04:42,338 --> 01:04:50,858
you could just send me the demo look it

1419
01:04:45,009 --> 01:04:54,369
doesn't mean email and i'll reply so

1420
01:04:50,858 --> 01:04:55,869
what i would say is like you know if i

1421
01:04:54,369 --> 01:04:57,220
have time we could do a for co2 friday

1422
01:04:55,869 --> 01:04:58,869
but even if we don't just send me an

1423
01:04:57,219 --> 01:05:13,088
email and i'll i'll look at it and send

1424
01:04:58,869 --> 01:05:17,559
back or apply the nighties fly why are

1425
01:05:13,088 --> 01:05:20,259
you awesome I just I guess you know

1426
01:05:17,559 --> 01:05:22,359
sometimes you just are awesome which

1427
01:05:20,259 --> 01:05:26,108
dojo did you train to become a code

1428
01:05:22,358 --> 01:05:27,909
warrior I don't know but like code

1429
01:05:26,108 --> 01:05:30,969
warriors bad term because there used to

1430
01:05:27,909 --> 01:05:33,868
be a program called codewarrior that was

1431
01:05:30,969 --> 01:05:35,768
like actually kind of lame it was a

1432
01:05:33,869 --> 01:05:38,009
integrated development environment for

1433
01:05:35,768 --> 01:05:38,008
the Mac

1434
01:05:42,440 --> 01:05:48,900
let's see here disused elaborated with

1435
01:05:45,420 --> 01:05:50,789
a/c muratori prefix really because I

1436
01:05:48,900 --> 01:05:53,160
don't see it but that may be because the

1437
01:05:50,789 --> 01:05:59,069
network is totally broken on my linux

1438
01:05:53,159 --> 01:06:06,509
laptop because linux is amazing so i

1439
01:05:59,068 --> 01:06:08,308
haven't seen it unfortunately i'm

1440
01:06:06,509 --> 01:06:19,829
looking at the raw stream and i don't i

1441
01:06:08,309 --> 01:06:21,719
don't see anything from disused magda

1442
01:06:19,829 --> 01:06:23,969
nobody i quote instead of writing debug

1443
01:06:21,719 --> 01:06:26,190
event name equals initiator another Bell

1444
01:06:23,969 --> 01:06:29,278
chiming blah blah blah make a struct

1445
01:06:26,190 --> 01:06:35,489
constructor debug event that initializes

1446
01:06:29,278 --> 01:06:40,998
the value wait why but why would I do

1447
01:06:35,489 --> 01:06:49,108
that what what would be the point of

1448
01:06:40,998 --> 01:06:53,118
doing that though like that doesn't

1449
01:06:49,108 --> 01:06:53,119
actually do anything different does it

1450
01:07:04,300 --> 01:07:09,650
and i guess i would say i actually have

1451
01:07:08,179 --> 01:07:11,469
a large number of problems with what

1452
01:07:09,650 --> 01:07:15,440
your suggest what you're suggesting

1453
01:07:11,469 --> 01:07:18,409
because if i add a constructor to debug

1454
01:07:15,440 --> 01:07:20,300
event then i can no longer actually make

1455
01:07:18,409 --> 01:07:22,639
one on the stack without it calling that

1456
01:07:20,300 --> 01:07:24,920
constructor and then i have to make

1457
01:07:22,639 --> 01:07:26,299
another constructor that would make it

1458
01:07:24,920 --> 01:07:28,579
so that it would use that one in

1459
01:07:26,300 --> 01:07:30,530
preference of the other one it like no

1460
01:07:28,579 --> 01:07:32,179
like that's making a constructor for a

1461
01:07:30,530 --> 01:07:39,700
debug event is definitely not on the

1462
01:07:32,179 --> 01:07:42,139
table so that I definitely wouldn't do

1463
01:07:39,699 --> 01:07:43,730
but i also am not sure what problem

1464
01:07:42,139 --> 01:07:45,940
you're trying to solve in the existing

1465
01:07:43,730 --> 01:07:45,940
code

1466
01:07:55,260 --> 01:07:59,580
just used so that you don't do

1467
01:07:57,570 --> 01:08:03,570
assignment in the function call in the

1468
01:07:59,579 --> 01:08:09,599
macro which makes me really sad but why

1469
01:08:03,570 --> 01:08:12,450
does it make you sad like what what

1470
01:08:09,599 --> 01:08:14,849
makes you sad about that the sequence of

1471
01:08:12,449 --> 01:08:19,920
operations that the CPU needs to do are

1472
01:08:14,849 --> 01:08:22,979
the same right so why do we care we're

1473
01:08:19,920 --> 01:08:25,798
there which part of the struck which

1474
01:08:22,979 --> 01:08:36,989
part of the line is causing them to

1475
01:08:25,798 --> 01:08:38,939
occur right i mean at least in this case

1476
01:08:36,989 --> 01:08:40,619
you can actually see what's happening

1477
01:08:38,939 --> 01:08:42,750
whereas in your constructor example you

1478
01:08:40,619 --> 01:08:44,159
wouldn't even know what was happening

1479
01:08:42,750 --> 01:08:48,109
you have to go look at the constructor

1480
01:08:44,159 --> 01:08:50,759
right so i would actually say that i

1481
01:08:48,109 --> 01:08:53,838
actually vastly prefer the one as

1482
01:08:50,759 --> 01:08:56,939
written here even though it's kind of a

1483
01:08:53,838 --> 01:08:59,729
typical to making constructor which i

1484
01:08:56,939 --> 01:09:02,608
think is probably worse on all counts

1485
01:08:59,729 --> 01:09:06,659
it's less understandable by a person who

1486
01:09:02,609 --> 01:09:08,069
is going to read it it's more likely to

1487
01:09:06,659 --> 01:09:09,809
create problems in other pieces of code

1488
01:09:08,069 --> 01:09:11,430
because now there is a constructor in

1489
01:09:09,810 --> 01:09:13,259
the struck which didn't have before and

1490
01:09:11,430 --> 01:09:14,670
so now the compiler will demand that you

1491
01:09:13,259 --> 01:09:17,100
call that constructor unless you add a

1492
01:09:14,670 --> 01:09:20,640
secondary constructor to avoid calling

1493
01:09:17,100 --> 01:09:22,410
it when you're going to call it right so

1494
01:09:20,640 --> 01:09:24,240
so yeah i would i would actually

1495
01:09:22,409 --> 01:09:26,068
strongly disagree with with this

1496
01:09:24,239 --> 01:09:29,130
suggestion that making a struct

1497
01:09:26,069 --> 01:09:31,410
constructor for debug event is is a

1498
01:09:29,130 --> 01:09:34,579
better way of writing that code i would

1499
01:09:31,409 --> 01:09:34,579
say it's actually strictly worse

1500
01:09:38,609 --> 01:09:43,960
that said I mean you know in your code

1501
01:09:41,289 --> 01:09:45,369
base you should do whatever you want but

1502
01:09:43,960 --> 01:09:53,439
in my code base I would not make that

1503
01:09:45,369 --> 01:09:55,059
choice also it really bothers me that

1504
01:09:53,439 --> 01:09:58,500
the network on this laptop is so bad

1505
01:09:55,060 --> 01:10:04,270
that I didn't see disused original post

1506
01:09:58,500 --> 01:10:07,029
like that's super oh no there it is I

1507
01:10:04,270 --> 01:10:09,190
did miss it there it is right there okay

1508
01:10:07,029 --> 01:10:13,649
I was going to be really grumpy about

1509
01:10:09,189 --> 01:10:13,649
that if it was like not passing me stuff

1510
01:10:13,829 --> 01:10:17,130
that would have been bad

1511
01:10:25,010 --> 01:10:30,060
and elvin i have not had any chance to

1512
01:10:28,020 --> 01:10:32,040
play any games recently in fact the only

1513
01:10:30,060 --> 01:10:33,750
time I've had the ability to play games

1514
01:10:32,039 --> 01:10:35,489
it was the games that i streamed the

1515
01:10:33,750 --> 01:10:37,619
other like two weeks ago or whatever

1516
01:10:35,489 --> 01:10:39,269
that was the only time I've had to play

1517
01:10:37,619 --> 01:10:44,960
games I wish I had more time to play

1518
01:10:39,270 --> 01:10:44,960
games but at the moment I just don't Sam

1519
01:11:05,539 --> 01:11:13,460
Martin Cohen yes elvin is alex &amp; noise

1520
01:11:09,659 --> 01:11:17,579
said I kept trying to pronounce his name

1521
01:11:13,460 --> 01:11:19,560
elsa noised or whatever but then at some

1522
01:11:17,579 --> 01:11:23,670
point like he just said you can just say

1523
01:11:19,560 --> 01:11:25,710
elvin that's what he said so now I just

1524
01:11:23,670 --> 01:11:28,340
say Elvin which is a lot easier to say

1525
01:11:25,710 --> 01:11:28,340
to say the least

1526
01:11:37,859 --> 01:11:43,299
how did you keep up that awesome beat

1527
01:11:40,479 --> 01:11:54,729
just now it's just like it's the rhythm

1528
01:11:43,300 --> 01:11:56,170
man the night is fly what games type

1529
01:11:54,729 --> 01:11:57,969
again I like all kinds of games they're

1530
01:11:56,170 --> 01:11:59,770
interesting I don't like games that are

1531
01:11:57,970 --> 01:12:01,090
like kind of very the same to like

1532
01:11:59,770 --> 01:12:03,160
something I've already played and just

1533
01:12:01,090 --> 01:12:04,720
kind of like throwing it in like I don't

1534
01:12:03,159 --> 01:12:07,149
like it when they do like we're gonna do

1535
01:12:04,720 --> 01:12:09,909
a new license movie title it's like it's

1536
01:12:07,149 --> 01:12:11,619
the Avengers game and it's like the same

1537
01:12:09,909 --> 01:12:13,210
game as like every other game only like

1538
01:12:11,619 --> 01:12:14,979
the little sprite that like you push the

1539
01:12:13,210 --> 01:12:17,010
button to like punch or whatever is now

1540
01:12:14,979 --> 01:12:19,839
the Hulk instead of like something else

1541
01:12:17,010 --> 01:12:22,000
like those games bore me so much so I

1542
01:12:19,840 --> 01:12:23,710
like games where there's something like

1543
01:12:22,000 --> 01:12:32,760
the game design is like interesting in

1544
01:12:23,710 --> 01:12:32,760
some way you know so

1545
01:12:38,929 --> 01:12:44,328
oh it's l Zen elvin that would help

1546
01:12:42,769 --> 01:12:46,150
because then I never knew why there was

1547
01:12:44,328 --> 01:12:50,509
an X in there I'm like why is there an X

1548
01:12:46,149 --> 01:12:53,138
elzen is easy ellison McInnes call it

1549
01:12:50,510 --> 01:12:53,139
Elle's in as well

1550
01:13:07,939 --> 01:13:15,059
alright I'm going to wind down here out

1551
01:13:11,369 --> 01:13:18,500
see any more programming cues so I'm

1552
01:13:15,060 --> 01:13:28,530
going to call it done let's save that

1553
01:13:18,500 --> 01:13:30,930
amusing little diagram alright so that's

1554
01:13:28,529 --> 01:13:32,759
it for today thank you for joining me

1555
01:13:30,930 --> 01:13:34,380
for another episode of handmade hero so

1556
01:13:32,760 --> 01:13:35,820
if pleasure coding with you as always if

1557
01:13:34,380 --> 01:13:37,140
you would like to follow along with the

1558
01:13:35,819 --> 01:13:38,699
code at home you can always figure out

1559
01:13:37,140 --> 01:13:40,890
of the game on handmade hero org and it

1560
01:13:38,699 --> 01:13:43,949
comes with a source code so you can go

1561
01:13:40,890 --> 01:13:45,660
ahead and follow along at home we also a

1562
01:13:43,949 --> 01:13:47,189
forum site you can go if you want to

1563
01:13:45,659 --> 01:13:49,470
post questions or look at our anti

1564
01:13:47,189 --> 01:13:50,729
episode guide we have a patreon page

1565
01:13:49,470 --> 01:13:52,409
where you could support the video series

1566
01:13:50,729 --> 01:13:54,059
we have a tweet bot the tweets of

1567
01:13:52,409 --> 01:13:55,979
schedule at you so if you want to catch

1568
01:13:54,060 --> 01:13:57,960
the stream live which by the way the

1569
01:13:55,979 --> 01:14:00,509
last live stream for two weeks will be

1570
01:13:57,960 --> 01:14:02,819
tomorrow at five p.m. pacific daylight

1571
01:14:00,510 --> 01:14:06,480
time after that i am away for two weeks

1572
01:14:02,819 --> 01:14:09,149
so i cannot stream to you but i will

1573
01:14:06,479 --> 01:14:11,309
resume after that so everyone has two

1574
01:14:09,149 --> 01:14:18,539
weeks to catch up I expect everyone to

1575
01:14:11,310 --> 01:14:21,630
be caught up so yeah you know that'll be

1576
01:14:18,539 --> 01:14:24,149
some ketchup so yeah that's it for now

1577
01:14:21,630 --> 01:14:25,650
until then until tomorrow have fun

1578
01:14:24,149 --> 01:14:28,609
programming and I will see you guys on

1579
01:14:25,649 --> 01:14:28,609
the internet take it easy everyone

