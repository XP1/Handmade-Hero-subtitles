1
00:00:00,380 --> 00:00:04,830
there we go hello everyone and welcome

2
00:00:03,089 --> 00:00:08,609
back to handmade Hiro sure we could a

3
00:00:04,830 --> 00:00:11,638
complete game live on stream we are back

4
00:00:08,609 --> 00:00:15,268
from two weeks of being off for the

5
00:00:11,638 --> 00:00:19,019
holidays I was not even in the great

6
00:00:15,269 --> 00:00:20,850
state of Washington so I could not do

7
00:00:19,019 --> 00:00:23,368
any streaming but I can now because I'm

8
00:00:20,850 --> 00:00:27,810
back and I am at the handmade here

9
00:00:23,368 --> 00:00:31,320
computer we left off with a very very

10
00:00:27,809 --> 00:00:32,668
simple task or at least step one of what

11
00:00:31,320 --> 00:00:33,808
we need to do is a very very simple task

12
00:00:32,668 --> 00:00:36,299
I don't know if you remember what it was

13
00:00:33,808 --> 00:00:38,070
but we were going to go ahead and put

14
00:00:36,299 --> 00:00:39,299
sorting into our renderer so that our

15
00:00:38,070 --> 00:00:39,829
sprites would appear in the correct

16
00:00:39,299 --> 00:00:43,259
order

17
00:00:39,829 --> 00:00:45,359
and in order to do that we needed to set

18
00:00:43,259 --> 00:00:47,308
a few things up we did that setup so now

19
00:00:45,359 --> 00:00:48,628
all we really have to do is write a sort

20
00:00:47,308 --> 00:00:50,399
and the first sort we're going to write

21
00:00:48,628 --> 00:00:53,670
is a very very simple sort so it should

22
00:00:50,399 --> 00:00:55,410
be pretty easy but we do have to do one

23
00:00:53,670 --> 00:00:58,289
other thing if I remember correctly we

24
00:00:55,409 --> 00:01:00,479
have to decide and possibly manipulate

25
00:00:58,289 --> 00:01:03,149
our data a little bit decide how we want

26
00:01:00,479 --> 00:01:05,308
to handle the fact that we need to

27
00:01:03,149 --> 00:01:07,290
rearrange the order of things so let's

28
00:01:05,308 --> 00:01:09,329
get right to it if you happen to have

29
00:01:07,290 --> 00:01:11,670
pre-ordered the the game and have access

30
00:01:09,329 --> 00:01:14,849
the source code then today is day 2 29

31
00:01:11,670 --> 00:01:16,079
so grab day 228 source is that correct

32
00:01:14,849 --> 00:01:18,030
let me just make sure that's correct now

33
00:01:16,079 --> 00:01:22,289
that we're back here that day 228 was

34
00:01:18,030 --> 00:01:24,780
the last one so day 229 is what you want

35
00:01:22,290 --> 00:01:27,600
to be working with if you want to follow

36
00:01:24,780 --> 00:01:30,180
along with what I'm doing today now if

37
00:01:27,599 --> 00:01:31,919
if we wanted to just underscore what

38
00:01:30,180 --> 00:01:33,840
we're doing here for people who maybe

39
00:01:31,920 --> 00:01:40,109
don't necessarily know what's going on

40
00:01:33,840 --> 00:01:42,689
or who forgot that's unusual I don't

41
00:01:40,109 --> 00:01:48,799
remember this being in there did we for

42
00:01:42,688 --> 00:01:51,449
some reason overflow are our size stuff

43
00:01:48,799 --> 00:01:53,579
this is in our render group to output

44
00:01:51,450 --> 00:01:57,570
where we're actually creating our

45
00:01:53,578 --> 00:01:59,039
temporary nough memory did we have too

46
00:01:57,569 --> 00:02:00,658
much stuff that we were doing with that

47
00:01:59,040 --> 00:02:02,430
I don't even I don't remember this is in

48
00:02:00,659 --> 00:02:05,009
the Phil Gramm chunk work stuff I don't

49
00:02:02,430 --> 00:02:07,610
remember us needing more than that but I

50
00:02:05,009 --> 00:02:13,590
guess maybe we were that's interesting

51
00:02:07,609 --> 00:02:13,979
well point being yeah I guess I won't

52
00:02:13,590 --> 00:02:14,759
show

53
00:02:13,979 --> 00:02:16,348
the thing I was going to show you

54
00:02:14,759 --> 00:02:18,689
because the change we made when we

55
00:02:16,348 --> 00:02:20,310
started means that we hit this which is

56
00:02:18,689 --> 00:02:21,658
basically that when we're doing our

57
00:02:20,310 --> 00:02:23,430
ground chunks like it you know what I

58
00:02:21,658 --> 00:02:24,709
could do I could turn the ground chunks

59
00:02:23,430 --> 00:02:26,939
off for a second and then show you

60
00:02:24,709 --> 00:02:29,489
because we do have to talk about that

61
00:02:26,939 --> 00:02:31,409
stuff anyway which is where we're

62
00:02:29,489 --> 00:02:33,989
getting the memory for that that stuff

63
00:02:31,409 --> 00:02:36,239
but hold on a second so let's go ahead

64
00:02:33,989 --> 00:02:38,250
and turn those ground chunks off so they

65
00:02:36,239 --> 00:02:43,530
aren't causing a problem by overflowing

66
00:02:38,250 --> 00:02:45,959
how much memory memory they need to do

67
00:02:43,530 --> 00:02:47,818
their job alright so if that's an handed

68
00:02:45,959 --> 00:02:51,959
game now right didn't we remove it out

69
00:02:47,818 --> 00:02:54,568
to handmade worlds I think so

70
00:02:51,959 --> 00:02:56,878
so there's Phil Gramm chunk so I believe

71
00:02:54,568 --> 00:03:00,479
with our Phil ground chunk stuff if we

72
00:02:56,878 --> 00:03:01,649
just take this out then we don't have to

73
00:03:00,479 --> 00:03:03,568
worry about what they're doing because

74
00:03:01,650 --> 00:03:07,379
they just won't ever actually compute

75
00:03:03,568 --> 00:03:10,439
anything and off we go all right so

76
00:03:07,378 --> 00:03:13,169
here's the actual game running and it's

77
00:03:10,439 --> 00:03:15,329
not actually waiting for any vertical

78
00:03:13,169 --> 00:03:16,708
retrace right now so a renderer just

79
00:03:15,329 --> 00:03:18,510
happens to be really really fast even

80
00:03:16,709 --> 00:03:21,169
though it's in software because it's you

81
00:03:18,509 --> 00:03:23,608
know it's only doing a few sprites here

82
00:03:21,169 --> 00:03:24,989
so it's running way faster even than it

83
00:03:23,609 --> 00:03:27,269
should right

84
00:03:24,989 --> 00:03:31,079
but anyway ignoring all that what you

85
00:03:27,269 --> 00:03:33,659
can see is if I move around the world

86
00:03:31,079 --> 00:03:35,310
my sprites aren't sorted at all so

87
00:03:33,659 --> 00:03:37,289
they're just kind of randomly like you

88
00:03:35,310 --> 00:03:39,750
know he'll go behind that tree there's

89
00:03:37,289 --> 00:03:41,159
no reason for that and as he moves he

90
00:03:39,750 --> 00:03:42,689
might even change the sort order and the

91
00:03:41,159 --> 00:03:44,519
reason for that is they're just drawn in

92
00:03:42,689 --> 00:03:46,560
whatever order the entities come up in

93
00:03:44,519 --> 00:03:48,030
the region in the same region and that

94
00:03:46,560 --> 00:03:49,259
order can change because it's not even

95
00:03:48,030 --> 00:03:51,299
in forest it because you know the

96
00:03:49,259 --> 00:03:53,068
simulator doesn't care or anything like

97
00:03:51,299 --> 00:03:56,069
that and so you can kind of see that

98
00:03:53,068 --> 00:03:59,128
that's obviously not gonna work for the

99
00:03:56,068 --> 00:04:00,839
game when the game is done we need the

100
00:03:59,128 --> 00:04:03,959
ability to create any kinds of scenes

101
00:04:00,840 --> 00:04:06,019
here and even just the simple basic room

102
00:04:03,959 --> 00:04:09,689
that we created a bunch of trees around

103
00:04:06,019 --> 00:04:11,789
even that it doesn't work right without

104
00:04:09,689 --> 00:04:14,039
sorting so we need some way of sorting

105
00:04:11,789 --> 00:04:16,288
these sprites so that it knows that like

106
00:04:14,039 --> 00:04:19,889
oh okay this tree has to be in front of

107
00:04:16,288 --> 00:04:23,870
the sky if the guy is further back like

108
00:04:19,889 --> 00:04:26,550
that we got to draw this on top of him

109
00:04:23,870 --> 00:04:27,699
similarly here it has to know that he is

110
00:04:26,550 --> 00:04:30,970
always on top

111
00:04:27,699 --> 00:04:33,759
of the trees so that's that's really all

112
00:04:30,970 --> 00:04:36,400
we need to do but that's that's the goal

113
00:04:33,759 --> 00:04:38,019
now we have a problem here I'll go ahead

114
00:04:36,399 --> 00:04:39,789
and turn this back on so we can see this

115
00:04:38,019 --> 00:04:43,479
is what we did just at the end of last

116
00:04:39,790 --> 00:04:45,970
stream which is we need some room to do

117
00:04:43,480 --> 00:04:48,790
our sorting that was essentially what we

118
00:04:45,970 --> 00:04:52,600
were trying to do there and what happens

119
00:04:48,790 --> 00:04:56,230
with that sorting room is apparently if

120
00:04:52,600 --> 00:04:58,570
we do our ground chunk fill let our

121
00:04:56,230 --> 00:05:01,960
ground chunk fill stuff run when it

122
00:04:58,569 --> 00:05:03,759
tries to do its rendering it ends up in

123
00:05:01,959 --> 00:05:06,250
a situation where it's asking for more

124
00:05:03,759 --> 00:05:07,750
memory than it can handle and you can

125
00:05:06,250 --> 00:05:10,750
kind of see what's happening here is

126
00:05:07,750 --> 00:05:14,319
we're asking the task arena for memory

127
00:05:10,750 --> 00:05:16,329
but it looks like when we do that it's

128
00:05:14,319 --> 00:05:17,889
kind of used all of its memory so I'm

129
00:05:16,329 --> 00:05:22,479
gonna I'm just gonna take a look in here

130
00:05:17,889 --> 00:05:25,180
and see what's going on I think when we

131
00:05:22,480 --> 00:05:27,970
do allocate render group I don't

132
00:05:25,180 --> 00:05:29,860
actually know I'm interested to know

133
00:05:27,970 --> 00:05:31,240
what happens here let's take a look at

134
00:05:29,860 --> 00:05:35,290
what happens here so when we do an

135
00:05:31,240 --> 00:05:38,439
allocate render group how much memory

136
00:05:35,290 --> 00:05:41,650
does it take so yeah it looks like

137
00:05:38,439 --> 00:05:43,120
what's happening is in here and you can

138
00:05:41,649 --> 00:05:44,379
we're kind of jumping around because we

139
00:05:43,120 --> 00:05:46,780
have multiple threads I should probably

140
00:05:44,379 --> 00:05:48,430
go in here you can see if we go to our

141
00:05:46,779 --> 00:05:51,219
thread display you can see that our

142
00:05:48,430 --> 00:05:52,750
threads are actually doing stuff right

143
00:05:51,220 --> 00:05:54,640
like we have two people who are

144
00:05:52,750 --> 00:05:57,310
allocating render groups right now as we

145
00:05:54,639 --> 00:06:00,459
speak those are our ground chunk filling

146
00:05:57,310 --> 00:06:02,980
threads doing well doing exactly what

147
00:06:00,459 --> 00:06:05,019
we're watching them do and what I could

148
00:06:02,980 --> 00:06:07,360
do here is I could go ahead and freeze

149
00:06:05,019 --> 00:06:09,069
this thread which says don't run it

150
00:06:07,360 --> 00:06:12,970
anymore so that way when we step we're

151
00:06:09,069 --> 00:06:14,589
only seeing this guy yeah so anyway if I

152
00:06:12,970 --> 00:06:18,790
look in here you can see the max bush

153
00:06:14,589 --> 00:06:20,679
buffer size is a one megabyte so it's

154
00:06:18,790 --> 00:06:23,500
going to use up that one megabyte of

155
00:06:20,680 --> 00:06:25,900
space and the arena that we have for

156
00:06:23,500 --> 00:06:27,819
these this this sort of work these task

157
00:06:25,899 --> 00:06:30,129
arenas I think they're only one megabyte

158
00:06:27,819 --> 00:06:32,560
big so we basically don't have any room

159
00:06:30,129 --> 00:06:35,379
for doing what we need to do there and

160
00:06:32,560 --> 00:06:38,740
so you know again that's just something

161
00:06:35,379 --> 00:06:40,399
that we would have to tune how much

162
00:06:38,740 --> 00:06:41,900
memory we want our

163
00:06:40,399 --> 00:06:44,329
helper tasks and it's based on how much

164
00:06:41,899 --> 00:06:47,239
they would need how much you know we

165
00:06:44,329 --> 00:06:48,948
want them to use so if we actually take

166
00:06:47,240 --> 00:06:51,139
a look at how that gets initialized in

167
00:06:48,949 --> 00:06:52,639
our transient State here you can see

168
00:06:51,139 --> 00:06:54,800
when we do this we could just say like

169
00:06:52,639 --> 00:06:56,629
okay if we give them each two megabytes

170
00:06:54,800 --> 00:06:58,639
to work with then we would have enough

171
00:06:56,629 --> 00:07:00,709
for both the sorting space and the other

172
00:06:58,639 --> 00:07:01,910
space and then we wouldn't have the

173
00:07:00,709 --> 00:07:05,388
situation of running out of memory

174
00:07:01,910 --> 00:07:07,550
presumably so let's take a look at that

175
00:07:05,389 --> 00:07:09,800
and see if we can make that work because

176
00:07:07,550 --> 00:07:12,259
if I if I'm not mistaken that means that

177
00:07:09,800 --> 00:07:13,819
whenever we come through here we would

178
00:07:12,259 --> 00:07:15,560
have allocated all the space so now in

179
00:07:13,819 --> 00:07:18,800
theory we should have one megabyte free

180
00:07:15,560 --> 00:07:22,930
I believe let's take a look when we come

181
00:07:18,800 --> 00:07:33,710
through here I want to see the work

182
00:07:22,930 --> 00:07:36,860
tasks arena yeah there we go

183
00:07:33,709 --> 00:07:38,959
so now we can see what's going on

184
00:07:36,860 --> 00:07:40,610
does it use it should only that that

185
00:07:38,959 --> 00:07:45,168
doesn't make any sense did I just miss

186
00:07:40,610 --> 00:07:55,370
read that it should not take more than

187
00:07:45,168 --> 00:07:59,000
just the one megabyte oh we just use all

188
00:07:55,370 --> 00:08:01,970
that's remaining that's the problem

189
00:07:59,000 --> 00:08:02,560
right there that's the problem right

190
00:08:01,970 --> 00:08:05,510
there

191
00:08:02,560 --> 00:08:07,759
so really I guess it doesn't matter what

192
00:08:05,509 --> 00:08:10,098
we set that to we could have just set

193
00:08:07,759 --> 00:08:13,430
this thing to be less so I could even

194
00:08:10,098 --> 00:08:15,709
leave these if I wanted one megabyte and

195
00:08:13,430 --> 00:08:17,769
then just pick how much we want those

196
00:08:15,709 --> 00:08:20,930
push buffers to be for field round chunk

197
00:08:17,769 --> 00:08:22,579
right because it's this value right here

198
00:08:20,930 --> 00:08:24,319
if we pass zero it says just use

199
00:08:22,579 --> 00:08:26,750
whatever is left in the arena but we

200
00:08:24,319 --> 00:08:29,180
wouldn't want to do that right we'd want

201
00:08:26,750 --> 00:08:32,408
to say like okay yeah maybe just use

202
00:08:29,180 --> 00:08:35,360
half of it or something like that right

203
00:08:32,408 --> 00:08:37,189
and then we'd be fine so that was the

204
00:08:35,360 --> 00:08:38,959
problem is it just eats up all of the

205
00:08:37,190 --> 00:08:41,450
space that's remaining so even if we

206
00:08:38,958 --> 00:08:45,289
allocate more it's a project you know it

207
00:08:41,450 --> 00:08:48,589
doesn't matter okay so anyway point

208
00:08:45,289 --> 00:08:51,528
being we're back to some semblance of

209
00:08:48,589 --> 00:08:53,150
okayness here and everything's fine

210
00:08:51,528 --> 00:08:54,439
except we haven't actually implemented

211
00:08:53,149 --> 00:08:55,909
our sort

212
00:08:54,440 --> 00:08:57,650
because like I said we didn't get to it

213
00:08:55,909 --> 00:09:00,169
at the end of the previous dream so we

214
00:08:57,649 --> 00:09:02,269
need to actually do the work of sorting

215
00:09:00,169 --> 00:09:04,309
and we sort of set ourselves up for this

216
00:09:02,269 --> 00:09:07,189
again by like just reserving some space

217
00:09:04,309 --> 00:09:08,509
so that we can have room to sort we've

218
00:09:07,190 --> 00:09:11,360
got this little thing called sort space

219
00:09:08,509 --> 00:09:13,639
here and we have a tile sort entry which

220
00:09:11,360 --> 00:09:15,560
is a thing that we created I don't

221
00:09:13,639 --> 00:09:17,059
remember where we actually put it

222
00:09:15,559 --> 00:09:19,819
hopefully we put it somewhere reasonable

223
00:09:17,059 --> 00:09:22,099
but probably not it's just sitting right

224
00:09:19,820 --> 00:09:23,960
here let's go ahead and move that in

225
00:09:22,100 --> 00:09:25,460
fact let's move both of these I'm gonna

226
00:09:23,960 --> 00:09:29,780
move these both out here where I can see

227
00:09:25,460 --> 00:09:31,220
them all right there we go so we have

228
00:09:29,779 --> 00:09:32,689
this thing called a towel sort entry it

229
00:09:31,220 --> 00:09:35,779
has a thing called a sort key and it has

230
00:09:32,690 --> 00:09:37,580
a thing called a push buffer offset what

231
00:09:35,779 --> 00:09:39,919
we need to do now is we need to do

232
00:09:37,580 --> 00:09:42,830
something reasonable here where we can

233
00:09:39,919 --> 00:09:44,329
actually sort these so I'm gonna start

234
00:09:42,830 --> 00:09:46,160
by doing the simplest possible thing you

235
00:09:44,330 --> 00:09:47,389
hear me say that all the time but again

236
00:09:46,159 --> 00:09:49,069
it's usually the best course of action

237
00:09:47,389 --> 00:09:51,799
gets something working first and then

238
00:09:49,070 --> 00:09:54,740
think through what works what doesn't

239
00:09:51,799 --> 00:09:56,599
work in it in terms of what you actually

240
00:09:54,740 --> 00:09:58,159
need and how optimal it is and those

241
00:09:56,600 --> 00:10:00,320
sorts of things so I'm gonna do the

242
00:09:58,159 --> 00:10:02,209
simplest possible thing and I'm just

243
00:10:00,320 --> 00:10:04,700
gonna explain to you how we're gonna go

244
00:10:02,210 --> 00:10:06,800
about doing a basic sort of the things

245
00:10:04,700 --> 00:10:08,990
that we have to do that I'm gonna go to

246
00:10:06,799 --> 00:10:09,889
the white board which is actually

247
00:10:08,990 --> 00:10:12,049
probably gonna take a little bit I

248
00:10:09,889 --> 00:10:15,740
should have started it loading a little

249
00:10:12,049 --> 00:10:20,209
bit before sorry black board I bad not

250
00:10:15,740 --> 00:10:21,320
white board all right so I need to draw

251
00:10:20,210 --> 00:10:23,180
something out here so as soon as

252
00:10:21,320 --> 00:10:24,740
mischeif goes ahead and finishes loading

253
00:10:23,179 --> 00:10:26,089
which again it takes a while because

254
00:10:24,740 --> 00:10:28,430
we've got so much data in the black

255
00:10:26,090 --> 00:10:32,300
board but once it finishes loading I

256
00:10:28,429 --> 00:10:34,849
will sketch out for you here on day 229

257
00:10:32,299 --> 00:10:37,099
what it is that we're trying to do just

258
00:10:34,850 --> 00:10:39,340
so you can get a feel for it if it's

259
00:10:37,100 --> 00:10:45,529
something that you're not familiar with

260
00:10:39,340 --> 00:10:47,840
so render sorting okay so we have a very

261
00:10:45,529 --> 00:10:50,329
basic problem to solve the problem is

262
00:10:47,840 --> 00:10:53,300
we've got two things or more right we've

263
00:10:50,330 --> 00:10:55,940
got a and B and we know that a is

264
00:10:53,299 --> 00:10:57,859
supposed to show up in front of B and we

265
00:10:55,940 --> 00:10:59,840
want to make sure that we then draw it

266
00:10:57,860 --> 00:11:01,909
in a specific order so if our render is

267
00:10:59,840 --> 00:11:03,440
front to back we want to draw a first

268
00:11:01,909 --> 00:11:04,939
then the second if our enters back to

269
00:11:03,440 --> 00:11:08,180
front which is how it happens to be

270
00:11:04,940 --> 00:11:10,220
right now we want to do B than a and

271
00:11:08,179 --> 00:11:13,370
I mean by that is if our renderer

272
00:11:10,220 --> 00:11:14,778
basically occludes things going back

273
00:11:13,370 --> 00:11:17,269
towards the screen so meaning it will

274
00:11:14,778 --> 00:11:19,039
draw a and then it will like clip what's

275
00:11:17,269 --> 00:11:20,778
behind it and draw be that would be

276
00:11:19,039 --> 00:11:23,528
front to back meaning it draw the front

277
00:11:20,778 --> 00:11:30,139
stuff first and the back stuff after

278
00:11:23,528 --> 00:11:31,338
right that's front to back whereas the

279
00:11:30,139 --> 00:11:35,028
other way which is the way we're doing

280
00:11:31,339 --> 00:11:37,279
it now is back to front which means it

281
00:11:35,028 --> 00:11:39,708
will draw whatever is in B and then it

282
00:11:37,278 --> 00:11:41,600
will slap a on top of it and a clued B

283
00:11:39,708 --> 00:11:44,629
by making a so that kind of solid where

284
00:11:41,600 --> 00:11:46,100
B it to overwrite what B is right this

285
00:11:44,629 --> 00:11:47,480
is what we have to happen to be doing

286
00:11:46,100 --> 00:11:49,580
which means we want to do B than a so

287
00:11:47,480 --> 00:11:52,730
what we want to do is we want to take

288
00:11:49,580 --> 00:11:54,528
something some list of things which has

289
00:11:52,730 --> 00:11:56,300
stuff in it like you know whatever the

290
00:11:54,528 --> 00:11:59,539
things are and then it has something

291
00:11:56,299 --> 00:12:01,519
like okay it's got a B and then some

292
00:11:59,539 --> 00:12:03,829
more things we want to take lists that

293
00:12:01,519 --> 00:12:06,860
look like this where a comes before B

294
00:12:03,830 --> 00:12:08,360
and we want to produce instead lists

295
00:12:06,860 --> 00:12:11,060
where those things are in the opposite

296
00:12:08,360 --> 00:12:12,769
order right where we know that the

297
00:12:11,059 --> 00:12:14,509
things that are behind always come

298
00:12:12,769 --> 00:12:16,759
before things that are in front of them

299
00:12:14,509 --> 00:12:18,379
in these lists right and there may be

300
00:12:16,759 --> 00:12:20,539
lots of things like that so if there's

301
00:12:18,379 --> 00:12:22,399
another thing that C right we know that

302
00:12:20,539 --> 00:12:24,439
we always want to see the thing our

303
00:12:22,399 --> 00:12:26,509
lists should be like whatever the list

304
00:12:24,440 --> 00:12:28,820
is and that it should just have C could

305
00:12:26,509 --> 00:12:31,370
have other things but then B other

306
00:12:28,820 --> 00:12:34,160
things and then a whatever but it always

307
00:12:31,370 --> 00:12:38,480
has to appear in the order C be a never

308
00:12:34,159 --> 00:12:40,278
in any other order in that list okay so

309
00:12:38,480 --> 00:12:43,278
that's our goal that's what we need to

310
00:12:40,278 --> 00:12:45,379
have happen now what are we starting

311
00:12:43,278 --> 00:12:47,629
with in this situation right what we're

312
00:12:45,379 --> 00:12:49,730
starting with is some push buffer that

313
00:12:47,629 --> 00:12:52,250
just has stuff in it right and that

314
00:12:49,730 --> 00:12:55,100
stuff can come in handy order so we may

315
00:12:52,250 --> 00:12:56,899
have a coming first we may have C coming

316
00:12:55,100 --> 00:12:59,420
second we may have be coming third and

317
00:12:56,899 --> 00:13:01,069
who knows what else right and so what we

318
00:12:59,419 --> 00:13:02,360
need to do is we need to take this push

319
00:13:01,070 --> 00:13:04,070
buffer this this is the thing that

320
00:13:02,360 --> 00:13:06,169
actually has the information in it to

321
00:13:04,070 --> 00:13:07,700
and this is fairly large right it's got

322
00:13:06,169 --> 00:13:09,259
you know it's got position and the

323
00:13:07,700 --> 00:13:11,270
bitmap pointer and all this stuff these

324
00:13:09,259 --> 00:13:13,309
could be many bytes these could be 64

325
00:13:11,269 --> 00:13:16,819
bytes this could be 128 bytes these

326
00:13:13,309 --> 00:13:18,979
could be pretty large okay so we want to

327
00:13:16,820 --> 00:13:22,070
do is we want to produce something that

328
00:13:18,980 --> 00:13:23,690
lets us draw this in the order that

329
00:13:22,070 --> 00:13:25,670
it actually needs to get drawn now what

330
00:13:23,690 --> 00:13:28,490
we could do is try to reorder the whole

331
00:13:25,669 --> 00:13:30,519
thing meaning we could go and say okay I

332
00:13:28,490 --> 00:13:33,620
know that this has to look like this

333
00:13:30,519 --> 00:13:36,769
instead so when we do the sorting I'm

334
00:13:33,620 --> 00:13:38,509
gonna like copy the whole be well in

335
00:13:36,769 --> 00:13:40,429
this case the whole see over here and

336
00:13:38,509 --> 00:13:42,470
the whole a down here and the whole be

337
00:13:40,429 --> 00:13:44,059
up here but that's a lot of copying

338
00:13:42,470 --> 00:13:45,649
especially if the sort has to do

339
00:13:44,059 --> 00:13:47,809
multiple operations to like get things

340
00:13:45,649 --> 00:13:49,129
into position so maybe we don't want to

341
00:13:47,809 --> 00:13:50,389
do that or if we do want to do that

342
00:13:49,129 --> 00:13:51,830
maybe we will only want to do that at

343
00:13:50,389 --> 00:13:53,750
the end and we don't want to do that as

344
00:13:51,830 --> 00:13:57,020
we're trying to produce the list and

345
00:13:53,750 --> 00:13:58,820
moving things around so we probably have

346
00:13:57,019 --> 00:14:00,949
to do in the way a lot of sorting tends

347
00:13:58,820 --> 00:14:02,210
to work who knows we'll see what we end

348
00:14:00,950 --> 00:14:04,370
up with but the way it tends to work

349
00:14:02,210 --> 00:14:06,650
oftentimes is we have some kind of a

350
00:14:04,370 --> 00:14:08,419
sort buffer which is just the minimal

351
00:14:06,649 --> 00:14:10,549
information that we need to execute the

352
00:14:08,419 --> 00:14:13,069
sort properly and typically what that is

353
00:14:10,549 --> 00:14:16,279
is it's two things right it's an index

354
00:14:13,070 --> 00:14:17,450
and a key the key is the minimal amount

355
00:14:16,279 --> 00:14:20,179
of information we need to produce the

356
00:14:17,450 --> 00:14:22,100
sort and the index is something that

357
00:14:20,179 --> 00:14:23,299
allows us to get back to the original

358
00:14:22,100 --> 00:14:23,810
data so that we know what it actually

359
00:14:23,299 --> 00:14:25,729
was

360
00:14:23,809 --> 00:14:27,409
so in this case this could just be an

361
00:14:25,730 --> 00:14:29,360
offset into our push buffer and you'll

362
00:14:27,409 --> 00:14:32,750
notice I've set us up for that here by

363
00:14:29,360 --> 00:14:35,060
having put buffer offset and here is the

364
00:14:32,750 --> 00:14:38,090
key which is just something that allows

365
00:14:35,059 --> 00:14:40,789
us to sort and that I've used at r32 and

366
00:14:38,090 --> 00:14:44,000
so what we're gonna do here is just say

367
00:14:40,789 --> 00:14:46,370
all right let's ah let's produce this

368
00:14:44,000 --> 00:14:47,929
thing which is basically just 64 bits

369
00:14:46,370 --> 00:14:50,600
per entry right each one of these

370
00:14:47,929 --> 00:14:52,909
entries is 64 bits it's 32 bits of key

371
00:14:50,600 --> 00:14:54,769
and 32 bits of index will sort on the 32

372
00:14:52,909 --> 00:14:55,759
bits of key and then we'll after we're

373
00:14:54,769 --> 00:14:56,870
done sorting and we know this

374
00:14:55,759 --> 00:14:58,789
everything's in the right order will use

375
00:14:56,870 --> 00:15:02,419
the 32 bits of index to go grab the data

376
00:14:58,789 --> 00:15:03,009
that we actually need it simple enough

377
00:15:02,419 --> 00:15:07,819
right

378
00:15:03,009 --> 00:15:12,679
okay so if we do this then what we need

379
00:15:07,820 --> 00:15:15,710
to do is we have two separate tasks the

380
00:15:12,679 --> 00:15:19,429
first task and one that is kind of ad

381
00:15:15,710 --> 00:15:21,650
hoc is we need a way of producing the 32

382
00:15:19,429 --> 00:15:25,879
bit sort key so what we need is we need

383
00:15:21,649 --> 00:15:28,579
some way of producing a value which

384
00:15:25,879 --> 00:15:31,070
represents the draw order of these

385
00:15:28,580 --> 00:15:34,009
things now this is easy if we just have

386
00:15:31,070 --> 00:15:35,778
a single Z value but we don't why don't

387
00:15:34,009 --> 00:15:38,179
we well it's because of the two and

388
00:15:35,778 --> 00:15:40,999
half D nonsense that plagues all two and

389
00:15:38,179 --> 00:15:42,289
a half D games it's just the way the of

390
00:15:40,999 --> 00:15:43,730
the world whenever you're doing an

391
00:15:42,289 --> 00:15:46,099
approximation you have to deal with the

392
00:15:43,730 --> 00:15:47,209
consequences of that approximation okay

393
00:15:46,100 --> 00:15:49,490
what are the cost codes of that

394
00:15:47,208 --> 00:15:51,979
approximation well we have two things we

395
00:15:49,490 --> 00:15:53,539
have a Z value right we do actually have

396
00:15:51,980 --> 00:15:56,360
a Z value because we have things like

397
00:15:53,539 --> 00:15:59,389
here's the floor and here's maybe a

398
00:15:56,360 --> 00:16:01,249
floor above it right you know here's

399
00:15:59,389 --> 00:16:03,049
maybe this is a dungeon and here's the

400
00:16:01,249 --> 00:16:04,639
like stairwell down to a driver so we do

401
00:16:03,049 --> 00:16:06,679
have the concept of this thing stacked

402
00:16:04,639 --> 00:16:08,659
on top of each other right that does

403
00:16:06,679 --> 00:16:10,278
exist but we also have the concept that

404
00:16:08,659 --> 00:16:13,338
this is sort of a little bit isometric

405
00:16:10,278 --> 00:16:17,179
which means that trees in the front of

406
00:16:13,339 --> 00:16:20,899
the same floor and trees on a floor okay

407
00:16:17,179 --> 00:16:24,469
so let's collect ground sorry trees

408
00:16:20,899 --> 00:16:25,818
towards us on the ground are in front of

409
00:16:24,470 --> 00:16:27,709
trees that are away from us right

410
00:16:25,818 --> 00:16:30,979
because remember when we were looking at

411
00:16:27,708 --> 00:16:33,739
this example here where we have this

412
00:16:30,980 --> 00:16:35,990
going on there is no Z difference

413
00:16:33,740 --> 00:16:38,959
between these things the handmade Hero

414
00:16:35,990 --> 00:16:41,389
guy is standing on the same plane as the

415
00:16:38,958 --> 00:16:42,768
trees but intuitively we know that these

416
00:16:41,389 --> 00:16:44,720
trees should be in front of the handmade

417
00:16:42,769 --> 00:16:46,459
hero guy down here and the reason for

418
00:16:44,720 --> 00:16:48,800
that is because we're sort of faking

419
00:16:46,458 --> 00:16:51,229
this we have a fake three deenis of the

420
00:16:48,799 --> 00:16:53,448
tree it may just be a sprite but in our

421
00:16:51,230 --> 00:16:56,240
imagination it's extending upward

422
00:16:53,448 --> 00:16:57,979
because it's it's again it's - and at

423
00:16:56,240 --> 00:17:00,409
the it's simulating the fact that maybe

424
00:16:57,980 --> 00:17:03,319
there was a verticality to that

425
00:17:00,409 --> 00:17:05,178
particular thing okay

426
00:17:03,318 --> 00:17:09,288
so we've got this other concept here

427
00:17:05,179 --> 00:17:12,048
which is that the y-value right the

428
00:17:09,288 --> 00:17:15,199
closer the y-value is to the bottom of

429
00:17:12,048 --> 00:17:17,449
the screen the more it should sort right

430
00:17:15,199 --> 00:17:19,250
that the closer it should draw and the

431
00:17:17,449 --> 00:17:21,288
further back the less it should draw

432
00:17:19,250 --> 00:17:23,148
right and so what we want to do is

433
00:17:21,288 --> 00:17:28,308
introduce some concept probably of

434
00:17:23,148 --> 00:17:30,439
mixing the Z and the Y value together to

435
00:17:28,308 --> 00:17:31,908
produce a single sort key that will let

436
00:17:30,440 --> 00:17:33,440
us sort them both and you can imagine

437
00:17:31,909 --> 00:17:36,679
how we might do this right

438
00:17:33,440 --> 00:17:38,690
imagine that we took the Z value and we

439
00:17:36,679 --> 00:17:41,659
multiplied it by some really big number

440
00:17:38,690 --> 00:17:43,669
right like we said you know if our Z

441
00:17:41,659 --> 00:17:46,130
values typically range from like you

442
00:17:43,669 --> 00:17:47,990
know negative 32 to positive 32 or

443
00:17:46,130 --> 00:17:48,659
something like this then you can imagine

444
00:17:47,990 --> 00:17:50,220
us multi

445
00:17:48,659 --> 00:17:52,528
flying it by some really big value like

446
00:17:50,220 --> 00:17:55,879
1024 to pack it something you know into

447
00:17:52,528 --> 00:18:00,269
something and then we take our y-value

448
00:17:55,878 --> 00:18:02,878
and and we pack that into the bottom of

449
00:18:00,269 --> 00:18:04,858
it so we have like 16 bits of Z and 16

450
00:18:02,878 --> 00:18:06,569
bits of Y right something like this if

451
00:18:04,858 --> 00:18:08,519
you imagine doing something like this

452
00:18:06,569 --> 00:18:11,819
where we put the high part of the Z in

453
00:18:08,519 --> 00:18:14,548
here and the low part is the Y then we'd

454
00:18:11,819 --> 00:18:15,928
have a single value which we know will

455
00:18:14,548 --> 00:18:17,878
sort us properly where it's basically

456
00:18:15,929 --> 00:18:20,009
the plane that you're on goes in the top

457
00:18:17,878 --> 00:18:23,339
part and where you are on that plane

458
00:18:20,009 --> 00:18:24,989
goes in the bottom part and we you know

459
00:18:23,339 --> 00:18:26,548
would hope that that would that would

460
00:18:24,989 --> 00:18:30,569
work for us something like this right

461
00:18:26,548 --> 00:18:32,668
now again this sort of approximation who

462
00:18:30,569 --> 00:18:34,439
knows right in two and a half D lands

463
00:18:32,669 --> 00:18:36,389
there is no perfect answer because we

464
00:18:34,440 --> 00:18:38,399
don't have full 3d models for everything

465
00:18:36,388 --> 00:18:40,858
which means that we can't actually

466
00:18:38,398 --> 00:18:42,569
perfectly sort everything the top of the

467
00:18:40,858 --> 00:18:44,519
tree is not going to sort right of

468
00:18:42,569 --> 00:18:47,428
something that was like flying in it

469
00:18:44,519 --> 00:18:49,200
around it that should have been above it

470
00:18:47,429 --> 00:18:50,580
in this other weird way and it wrapped

471
00:18:49,200 --> 00:18:52,499
around you know blah blah blah

472
00:18:50,579 --> 00:18:54,298
you could always create something that

473
00:18:52,499 --> 00:18:56,098
will break the two and a half D case

474
00:18:54,298 --> 00:18:58,618
that would require you to do a full 3d

475
00:18:56,098 --> 00:19:01,108
thing but for our purposes we should be

476
00:18:58,618 --> 00:19:05,699
able to come up with something okay

477
00:19:01,108 --> 00:19:08,428
so that's that's task one oops for the

478
00:19:05,700 --> 00:19:11,190
love of God mischeif they cannot

479
00:19:08,429 --> 00:19:13,019
properly parse the alt key it's so bad

480
00:19:11,190 --> 00:19:14,820
like you alt tab to it and they think

481
00:19:13,019 --> 00:19:18,239
that they got an old accelerator they

482
00:19:14,819 --> 00:19:19,618
didn't I don't know I wish they would

483
00:19:18,239 --> 00:19:21,379
fix that maybe they have I should ask

484
00:19:19,618 --> 00:19:24,598
them if they've ever fixed that anyway

485
00:19:21,378 --> 00:19:31,168
we can update our version of mischeif so

486
00:19:24,598 --> 00:19:33,628
task one is make the keys and two is

487
00:19:31,169 --> 00:19:35,038
sort right so those are the two things

488
00:19:33,628 --> 00:19:37,259
we need to do we need to actually put

489
00:19:35,038 --> 00:19:39,179
keys in there and then we need to sort

490
00:19:37,259 --> 00:19:41,128
and so how much time do we have we've

491
00:19:39,179 --> 00:19:46,710
got about a half hour we should at least

492
00:19:41,128 --> 00:19:48,298
be able to make our keys and it will

493
00:19:46,710 --> 00:19:49,858
release an approximate thing where we

494
00:19:48,298 --> 00:19:51,720
just like you know stuff some keys in

495
00:19:49,858 --> 00:19:54,058
there for testing or whatever and then

496
00:19:51,720 --> 00:19:55,950
we can do our sort and we should be able

497
00:19:54,058 --> 00:19:57,989
to implement a basic sort and just show

498
00:19:55,950 --> 00:19:58,470
kind of how that worked and then we'll

499
00:19:57,989 --> 00:20:00,239
go from there

500
00:19:58,470 --> 00:20:01,279
all right so let's see how far we can

501
00:20:00,239 --> 00:20:04,220
get

502
00:20:01,279 --> 00:20:05,629
the half-hour that we have so in here

503
00:20:04,220 --> 00:20:06,589
actually gets to get more we started

504
00:20:05,630 --> 00:20:10,640
eight minutes late so technically I've

505
00:20:06,589 --> 00:20:11,929
got 40 minutes mm-hmm all right so

506
00:20:10,640 --> 00:20:13,220
here's our render group to output you

507
00:20:11,930 --> 00:20:15,860
can see that it creates some sort space

508
00:20:13,220 --> 00:20:20,720
calls do tile vendor work so any do

509
00:20:15,859 --> 00:20:22,639
tiled render work oops we just basically

510
00:20:20,720 --> 00:20:24,200
do nothing we just in fact we could even

511
00:20:22,640 --> 00:20:25,640
collapse these now if we wanted to write

512
00:20:24,200 --> 00:20:32,480
but here it is

513
00:20:25,640 --> 00:20:36,110
and so render group to output wait what

514
00:20:32,480 --> 00:20:37,759
but what are we doing here oh it's just

515
00:20:36,109 --> 00:20:40,419
we have two functions called render

516
00:20:37,759 --> 00:20:45,170
group to output that's kind of annoying

517
00:20:40,420 --> 00:20:46,940
don't you think well oh well what are

518
00:20:45,170 --> 00:20:49,850
gonna do so anyway in render group to

519
00:20:46,940 --> 00:20:52,640
output here we are and we run through

520
00:20:49,849 --> 00:20:54,109
all of the things that we have and you

521
00:20:52,640 --> 00:20:56,860
know while we're running through all of

522
00:20:54,109 --> 00:21:00,109
these things we're actually drawing them

523
00:20:56,859 --> 00:21:02,119
well what I want to do is stop doing

524
00:21:00,109 --> 00:21:04,399
that and it's gonna be a little

525
00:21:02,119 --> 00:21:07,039
inefficient at first because right now

526
00:21:04,400 --> 00:21:10,130
we don't try to build up this array

527
00:21:07,039 --> 00:21:12,379
separately like we don't try to build up

528
00:21:10,130 --> 00:21:15,470
our sort array separately as things are

529
00:21:12,380 --> 00:21:18,470
actually pushed on although maybe we

530
00:21:15,470 --> 00:21:20,509
just could you know it now I think about

531
00:21:18,470 --> 00:21:21,860
it we just can't do that so really all

532
00:21:20,509 --> 00:21:23,450
we need to do here right is for our

533
00:21:21,859 --> 00:21:25,579
render group to output we just need to

534
00:21:23,450 --> 00:21:26,750
change things a little bit so let me let

535
00:21:25,579 --> 00:21:29,599
me sort of show you what I mean by that

536
00:21:26,750 --> 00:21:30,890
so what we want to do this this runs

537
00:21:29,599 --> 00:21:32,480
through the push buffer which has all of

538
00:21:30,890 --> 00:21:34,820
our grabs commands and it renders them

539
00:21:32,480 --> 00:21:37,460
in the order in which they occur what we

540
00:21:34,819 --> 00:21:40,129
want to do instead is run through the

541
00:21:37,460 --> 00:21:42,559
sort array and render them in that order

542
00:21:40,130 --> 00:21:44,240
right now this is worse for streaming

543
00:21:42,559 --> 00:21:46,429
the memory because it's random scatter

544
00:21:44,240 --> 00:21:47,809
gather but that's just the price of a

545
00:21:46,430 --> 00:21:49,970
sort there's nothing we can do about

546
00:21:47,809 --> 00:21:51,619
that because we have to sort the things

547
00:21:49,970 --> 00:21:53,089
we can't make them contiguous in memory

548
00:21:51,619 --> 00:21:54,619
because we don't know what order they

549
00:21:53,089 --> 00:21:57,019
need to go in until after we see them

550
00:21:54,619 --> 00:21:58,369
all right now maybe we could do

551
00:21:57,019 --> 00:22:00,410
something crazy in the game code that

552
00:21:58,369 --> 00:22:02,089
outputs them in sorted order but again

553
00:22:00,410 --> 00:22:03,440
that starts to get into optimizations we

554
00:22:02,089 --> 00:22:04,730
probably just don't have to do because

555
00:22:03,440 --> 00:22:06,590
it's not going to be that big of a deal

556
00:22:04,730 --> 00:22:08,029
for us but point being you can

557
00:22:06,589 --> 00:22:10,279
understand sort of what I'm saying about

558
00:22:08,029 --> 00:22:11,690
the scatter gather part so instead of

559
00:22:10,279 --> 00:22:13,789
just running through the base addresses

560
00:22:11,690 --> 00:22:14,900
and doing the space as rows address plus

561
00:22:13,789 --> 00:22:16,250
equal signs of entry

562
00:22:14,900 --> 00:22:17,330
instead of doing that we're not going to

563
00:22:16,250 --> 00:22:18,529
do that instead what we're going to do

564
00:22:17,329 --> 00:22:21,349
is we're going to do something where we

565
00:22:18,529 --> 00:22:23,480
go sort entry index equals zero

566
00:22:21,349 --> 00:22:25,339
sort entry indexed is lit less than the

567
00:22:23,480 --> 00:22:27,110
sort entry count however much that is

568
00:22:25,339 --> 00:22:29,299
we're going to go through each one of

569
00:22:27,109 --> 00:22:30,889
those and for each one of those we're

570
00:22:29,299 --> 00:22:32,779
going to do is we're going to jump into

571
00:22:30,890 --> 00:22:34,940
the push buffer at wherever the tile

572
00:22:32,779 --> 00:22:36,740
sort entry tells us we need to be right

573
00:22:34,940 --> 00:22:38,539
so we essentially have a Taos or entry

574
00:22:36,740 --> 00:22:41,210
here which starts at the beginning of

575
00:22:38,539 --> 00:22:42,740
the entries and each time through right

576
00:22:41,210 --> 00:22:45,620
we're just going to increment it by one

577
00:22:42,740 --> 00:22:47,690
and we're gonna see in that entry what

578
00:22:45,619 --> 00:22:49,519
the push buffer offset is for the

579
00:22:47,690 --> 00:22:54,190
element that we actually need to draw

580
00:22:49,519 --> 00:22:56,569
okay so here's the push buffer offset

581
00:22:54,190 --> 00:22:58,430
and so right here where we grab out our

582
00:22:56,569 --> 00:23:00,589
data everything else can be the same

583
00:22:58,430 --> 00:23:02,600
this whole thing can actually be exactly

584
00:23:00,589 --> 00:23:03,889
the same right so we really don't need

585
00:23:02,599 --> 00:23:06,589
to change anything about we're doing

586
00:23:03,890 --> 00:23:08,570
we're just changing the the loop from

587
00:23:06,589 --> 00:23:10,879
streaming serially to doing saying

588
00:23:08,569 --> 00:23:13,429
that's gonna jump around so here when we

589
00:23:10,880 --> 00:23:16,100
grab our header instead of doing render

590
00:23:13,430 --> 00:23:17,840
group push buffer base plus base address

591
00:23:16,099 --> 00:23:20,509
now we're just gonna say well the base

592
00:23:17,839 --> 00:23:22,189
address is this right and we no longer

593
00:23:20,509 --> 00:23:24,019
need to track the base address through

594
00:23:22,190 --> 00:23:28,009
the loop because the things going to

595
00:23:24,019 --> 00:23:30,019
tell us every time okay so in order to

596
00:23:28,009 --> 00:23:34,309
do this all we need is that entry count

597
00:23:30,019 --> 00:23:36,019
and the entry pointer and so for the

598
00:23:34,309 --> 00:23:38,450
render group itself I believe we already

599
00:23:36,019 --> 00:23:41,599
sort of had that right you can kind of

600
00:23:38,450 --> 00:23:43,460
see in here that we well actually that's

601
00:23:41,599 --> 00:23:44,659
not true because it's multi-threaded we

602
00:23:43,460 --> 00:23:46,579
really want this to be different for

603
00:23:44,660 --> 00:23:48,170
each one so technically for render group

604
00:23:46,579 --> 00:23:49,460
to output when we do this thing with the

605
00:23:48,170 --> 00:23:51,380
clip rect and all that sort of thing

606
00:23:49,460 --> 00:23:53,390
what we want to do is we want to

607
00:23:51,380 --> 00:23:55,220
actually have a separate one I think for

608
00:23:53,390 --> 00:23:58,250
each one so we want to pass this in here

609
00:23:55,220 --> 00:24:03,980
we'd want to say like how many sword

610
00:23:58,250 --> 00:24:06,349
entries are there oops and what are they

611
00:24:03,980 --> 00:24:09,009
right so this is the tile sword entry

612
00:24:06,349 --> 00:24:09,009
entries

613
00:24:11,579 --> 00:24:17,019
right and that's literally it for

614
00:24:15,400 --> 00:24:19,240
changing the render routine everything

615
00:24:17,019 --> 00:24:20,799
else will just work fine and now we

616
00:24:19,240 --> 00:24:22,480
don't have to do any of this nonsense

617
00:24:20,799 --> 00:24:24,309
either where we track the base address

618
00:24:22,480 --> 00:24:27,730
so that's all gone which is kind of nice

619
00:24:24,309 --> 00:24:29,919
because it means that now we don't even

620
00:24:27,730 --> 00:24:32,079
have to do that work it's all just kind

621
00:24:29,920 --> 00:24:34,840
of handled as part of that that push

622
00:24:32,079 --> 00:24:36,639
that we're pushing all right so let's

623
00:24:34,839 --> 00:24:38,859
say we do that well we have a couple

624
00:24:36,640 --> 00:24:40,120
problems first of all when we actually

625
00:24:38,859 --> 00:24:42,009
call that we don't have any of this

626
00:24:40,119 --> 00:24:44,169
information when we need to actually

627
00:24:42,009 --> 00:24:45,730
call render group to output so we do

628
00:24:44,170 --> 00:24:46,900
need to do is we need to figure out some

629
00:24:45,730 --> 00:24:49,299
way of getting that particular

630
00:24:46,900 --> 00:24:50,710
information now you can see in here when

631
00:24:49,299 --> 00:24:55,359
we call this render group to output

632
00:24:50,710 --> 00:24:57,610
thing we we have the sort space which is

633
00:24:55,359 --> 00:25:00,129
this this thing here right like where's

634
00:24:57,609 --> 00:25:03,119
our sort space we do have the entry list

635
00:25:00,130 --> 00:25:08,380
so we've got that we know where that is

636
00:25:03,119 --> 00:25:10,359
but we don't actually know yet for each

637
00:25:08,380 --> 00:25:12,760
individual one of those things we don't

638
00:25:10,359 --> 00:25:17,879
actually know which of those applies to

639
00:25:12,759 --> 00:25:20,109
which tile if that makes sense so I

640
00:25:17,880 --> 00:25:22,360
think I want to break this into two so I

641
00:25:20,109 --> 00:25:23,529
don't overwhelm you with stuff normally

642
00:25:22,359 --> 00:25:25,240
I would probably just do this in one

643
00:25:23,529 --> 00:25:26,950
pass but I just want to point this out

644
00:25:25,240 --> 00:25:30,190
so I'm gonna plan out and then we'll do

645
00:25:26,950 --> 00:25:32,110
it in a separate pass the way that we're

646
00:25:30,190 --> 00:25:35,250
rendering the screen right now right it

647
00:25:32,109 --> 00:25:38,469
works like this where we take a chunk

648
00:25:35,250 --> 00:25:39,730
and we render that chunk and the reason

649
00:25:38,470 --> 00:25:41,860
that we do that instead of running the

650
00:25:39,730 --> 00:25:43,180
whole screen is because we we assign

651
00:25:41,859 --> 00:25:44,979
different threads to different chunks

652
00:25:43,180 --> 00:25:46,450
so while thread one is working on this

653
00:25:44,980 --> 00:25:47,680
chunk thread two is working on this one

654
00:25:46,450 --> 00:25:50,529
thread three is working on that one's

655
00:25:47,680 --> 00:25:52,420
for is working on this one etc what we

656
00:25:50,529 --> 00:25:54,670
want to do eventually is probably make

657
00:25:52,420 --> 00:25:57,250
the sorting happen there too so that the

658
00:25:54,670 --> 00:25:59,769
the sorting can be multi-threaded what

659
00:25:57,250 --> 00:26:04,480
that means is we would want to only have

660
00:25:59,769 --> 00:26:06,789
in each of those lists are our entry

661
00:26:04,480 --> 00:26:09,009
lists we only want the ones that pertain

662
00:26:06,789 --> 00:26:12,009
to this particular chunk which means

663
00:26:09,009 --> 00:26:14,319
they should get clipped per chunk as

664
00:26:12,009 --> 00:26:17,259
they go right I'm not going to do that

665
00:26:14,319 --> 00:26:21,220
yet I'm just gonna do it as if they all

666
00:26:17,259 --> 00:26:24,430
kind of go into the same one for now but

667
00:26:21,220 --> 00:26:27,069
that's the basic idea okay so

668
00:26:24,430 --> 00:26:31,360
I'm not sure how exactly we want to do

669
00:26:27,069 --> 00:26:34,509
that or maybe we only want to sort it

670
00:26:31,359 --> 00:26:37,359
once I really don't know because I don't

671
00:26:34,509 --> 00:26:38,829
know let's do the sort once at the head

672
00:26:37,359 --> 00:26:40,419
end and then what we'll do is we'll see

673
00:26:38,829 --> 00:26:42,159
how long the sorting takes and the

674
00:26:40,420 --> 00:26:43,480
sorting takes too much time we'll put it

675
00:26:42,160 --> 00:26:43,990
on the multiple threads how does that

676
00:26:43,480 --> 00:26:47,529
sound

677
00:26:43,990 --> 00:26:48,789
that seems fair and the reason that that

678
00:26:47,529 --> 00:26:50,410
would kind of be nice too is because it

679
00:26:48,789 --> 00:26:51,609
means that the we wouldn't actually have

680
00:26:50,410 --> 00:26:54,130
to have done the sort space thing

681
00:26:51,609 --> 00:26:56,109
meaning we don't actually have to we

682
00:26:54,130 --> 00:26:58,990
could make it so that actually there's

683
00:26:56,109 --> 00:27:00,969
all there's just one this the sorting

684
00:26:58,990 --> 00:27:03,069
thing doesn't actually have that

685
00:27:00,970 --> 00:27:16,200
restriction to it we could do it that

686
00:27:03,069 --> 00:27:22,139
way I'm so torn so if we do it that way

687
00:27:16,200 --> 00:27:22,140
then the other problem is that we

688
00:27:24,210 --> 00:27:27,610
there's always so many things in

689
00:27:26,049 --> 00:27:30,399
programming here's all the things that

690
00:27:27,609 --> 00:27:34,089
are going through my head right now so

691
00:27:30,400 --> 00:27:37,269
the push buffer is not fixed size

692
00:27:34,089 --> 00:27:39,069
obviously and so we also don't really

693
00:27:37,269 --> 00:27:41,170
know for that that's sort of that sort

694
00:27:39,069 --> 00:27:46,809
list we also have this situation where

695
00:27:41,170 --> 00:27:48,490
we don't actually know how we don't

696
00:27:46,809 --> 00:27:52,210
actually know where anything isn't it so

697
00:27:48,490 --> 00:27:55,690
the best time to build up the sort

698
00:27:52,210 --> 00:27:57,910
entries this tile sort entry array the

699
00:27:55,690 --> 00:27:59,880
best time to do that would be at the

700
00:27:57,910 --> 00:28:03,790
time when things are actually pushed on

701
00:27:59,880 --> 00:28:05,530
so again that sort of argues for having

702
00:28:03,789 --> 00:28:07,420
just one of those arrays that kind of

703
00:28:05,529 --> 00:28:10,089
gets built at the same time and in fact

704
00:28:07,420 --> 00:28:11,920
we could do it from the top down so that

705
00:28:10,089 --> 00:28:13,449
basically the end of the push buffer

706
00:28:11,920 --> 00:28:17,110
just builds up that array and then we've

707
00:28:13,450 --> 00:28:19,180
already got it ready to go right that

708
00:28:17,109 --> 00:28:20,859
again would argue for not having this

709
00:28:19,180 --> 00:28:22,900
extra sort space here which means the

710
00:28:20,859 --> 00:28:24,699
sort space thing that I did was just you

711
00:28:22,900 --> 00:28:27,519
know not that we spent any time doing it

712
00:28:24,700 --> 00:28:29,650
but I'm just saying you know it was

713
00:28:27,519 --> 00:28:31,299
unnecessary so I don't know maybe we

714
00:28:29,650 --> 00:28:33,370
don't want to do that so let's let's

715
00:28:31,299 --> 00:28:37,158
think about this so if we were to do

716
00:28:33,369 --> 00:28:39,858
that right it would look like this

717
00:28:37,159 --> 00:28:41,269
inside the render group we've got this

718
00:28:39,858 --> 00:28:43,178
thing that's like push buffer element

719
00:28:41,269 --> 00:28:48,288
count in there we would have like

720
00:28:43,179 --> 00:28:51,470
sorting right and the way that would

721
00:28:48,288 --> 00:28:53,829
work is as we go or I guess we could

722
00:28:51,470 --> 00:28:58,548
even say it would work like this like

723
00:28:53,829 --> 00:29:02,329
you know what did I call those things

724
00:28:58,548 --> 00:29:06,288
it's also an entry so sort entry at

725
00:29:02,329 --> 00:29:11,598
right what I could do there is when we

726
00:29:06,288 --> 00:29:14,210
initially start the render group so when

727
00:29:11,598 --> 00:29:15,798
we do an allocate render group then when

728
00:29:14,210 --> 00:29:18,769
we do the push buffer base thing we

729
00:29:15,798 --> 00:29:20,808
would just say okay the sort entry at is

730
00:29:18,769 --> 00:29:22,669
just the push buffer base plus the max

731
00:29:20,808 --> 00:29:26,239
but buffer size so it's at the end and

732
00:29:22,669 --> 00:29:29,210
then every time we do a push render

733
00:29:26,239 --> 00:29:32,058
element which is this thing here every

734
00:29:29,210 --> 00:29:36,348
time we do a push render element what we

735
00:29:32,058 --> 00:29:39,638
would want to do is inside that push we

736
00:29:36,348 --> 00:29:42,319
also put an entry onto the array so

737
00:29:39,638 --> 00:29:43,939
instead of doing the assertion we would

738
00:29:42,319 --> 00:29:45,888
otherwise do which is this one right

739
00:29:43,940 --> 00:29:48,580
here if group put further size is lesson

740
00:29:45,888 --> 00:29:52,728
master size instead we do sort entry at

741
00:29:48,579 --> 00:29:56,808
so we'd say it's got to be before where

742
00:29:52,729 --> 00:29:58,759
that's going to be right and what we

743
00:29:56,808 --> 00:30:01,668
could do is say you know actually

744
00:29:58,759 --> 00:30:06,528
furthermore it could be sort entry at -

745
00:30:01,669 --> 00:30:09,710
however big the the the tile this guy

746
00:30:06,528 --> 00:30:13,249
the trial sort entry is right so

747
00:30:09,710 --> 00:30:14,749
basically I've got to I could even draw

748
00:30:13,249 --> 00:30:19,700
this since we've got our blackboard back

749
00:30:14,749 --> 00:30:21,379
online we've got two things we we're

750
00:30:19,700 --> 00:30:25,548
sort of using the standard stack heap

751
00:30:21,378 --> 00:30:28,579
kind of style we have two places we're

752
00:30:25,548 --> 00:30:32,089
pushing we push stuff on here as we go

753
00:30:28,579 --> 00:30:35,749
which are the actual entries and we push

754
00:30:32,089 --> 00:30:38,839
stuff on here right which are the the

755
00:30:35,749 --> 00:30:40,548
sorts so when we're done we have two

756
00:30:38,839 --> 00:30:42,168
things we have the data that's all in

757
00:30:40,548 --> 00:30:43,848
here and then we have the sort at the

758
00:30:42,169 --> 00:30:47,440
end which is just a packed thing of

759
00:30:43,848 --> 00:30:47,439
those 64 bits it's this thing

760
00:30:47,970 --> 00:30:53,440
it's this guy he's at the end right and

761
00:30:51,819 --> 00:30:54,609
so what we need to do is we say well

762
00:30:53,440 --> 00:30:59,320
we're out of space if these two things

763
00:30:54,609 --> 00:31:01,089
get each other right so if I was to push

764
00:30:59,319 --> 00:31:03,928
on as big as you want me to push on and

765
00:31:01,089 --> 00:31:06,579
I added an entry at the end would I

766
00:31:03,929 --> 00:31:11,250
collide or not assuming I wouldn't then

767
00:31:06,579 --> 00:31:13,899
we just do it right so we say okay group

768
00:31:11,250 --> 00:31:19,798
push buffer or group sort entry at

769
00:31:13,900 --> 00:31:24,580
rather - equals size of tiles or entry

770
00:31:19,798 --> 00:31:29,139
group sort entry at group push buffer

771
00:31:24,579 --> 00:31:37,359
base so now I know that I've got a tile

772
00:31:29,140 --> 00:31:39,700
sort entry at that location and I can

773
00:31:37,359 --> 00:31:41,949
use it right so the pushover base plus

774
00:31:39,700 --> 00:31:44,350
where the sort entry is I back up by 1

775
00:31:41,950 --> 00:31:46,840
and now I've got that one to use I can

776
00:31:44,349 --> 00:31:48,609
then say okay whatever the sort key is I

777
00:31:46,839 --> 00:31:49,839
need to put that in here now the problem

778
00:31:48,609 --> 00:31:51,548
is we don't have one like I said that's

779
00:31:49,839 --> 00:31:54,490
something we have to do so we're going

780
00:31:51,548 --> 00:31:56,798
to need a sort key and then the other

781
00:31:54,490 --> 00:31:59,349
part I actually do know which is the

782
00:31:56,798 --> 00:32:01,629
push buffer offset right because the

783
00:31:59,349 --> 00:32:04,298
push buffer offset is actually just this

784
00:32:01,630 --> 00:32:06,549
push buffer size thing here right so

785
00:32:04,298 --> 00:32:08,319
before we advanced it it actually would

786
00:32:06,548 --> 00:32:10,269
just be correct so I can just do that

787
00:32:08,319 --> 00:32:12,730
and then we'll put these two guys down

788
00:32:10,269 --> 00:32:14,079
here so that would just build up that

789
00:32:12,730 --> 00:32:15,429
array for me and the only thing I would

790
00:32:14,079 --> 00:32:17,048
need is now whenever you push in a

791
00:32:15,429 --> 00:32:19,450
render element we would actually have to

792
00:32:17,048 --> 00:32:21,849
know whatever the sort key is so that

793
00:32:19,450 --> 00:32:24,640
breaks all our existing stuff because we

794
00:32:21,849 --> 00:32:26,648
don't have a sort key but so you know

795
00:32:24,640 --> 00:32:31,320
what that's okay because that's like I

796
00:32:26,648 --> 00:32:34,239
said something we got to do right okay

797
00:32:31,319 --> 00:32:36,009
so if we were to do that then when we do

798
00:32:34,240 --> 00:32:37,240
render group to output we don't actually

799
00:32:36,009 --> 00:32:39,429
need to pass those things it can

800
00:32:37,240 --> 00:32:43,419
actually get them because now we know

801
00:32:39,429 --> 00:32:45,370
what they are right now we know that the

802
00:32:43,419 --> 00:32:50,890
sword entry count is just the render

803
00:32:45,369 --> 00:32:54,219
group pushed buffer element count and we

804
00:32:50,890 --> 00:32:58,330
know that the sword entries is just the

805
00:32:54,220 --> 00:33:00,480
push buffer base plus the sword entry

806
00:32:58,329 --> 00:33:00,480
app

807
00:33:02,970 --> 00:33:07,329
and so we actually have everything that

808
00:33:05,410 --> 00:33:14,880
we need for those renders they can just

809
00:33:07,329 --> 00:33:18,490
do their thing okay all right so yeah

810
00:33:14,880 --> 00:33:21,880
what what am I looking at here

811
00:33:18,490 --> 00:33:25,180
max push buffer size cannot convert from

812
00:33:21,880 --> 00:33:26,590
you eight star oh that's not supposed to

813
00:33:25,180 --> 00:33:29,620
be a pointer offset that's just supposed

814
00:33:26,589 --> 00:33:31,599
to be the value so that's that's all

815
00:33:29,619 --> 00:33:33,969
we're talking about here right that's

816
00:33:31,599 --> 00:33:35,559
all we're talking about missing in

817
00:33:33,970 --> 00:33:39,009
parentheses of course it's not good so

818
00:33:35,559 --> 00:33:40,659
let's fix that so now all we need to do

819
00:33:39,009 --> 00:33:41,769
is actually put in that sort key and

820
00:33:40,660 --> 00:33:44,590
then we could start actually using this

821
00:33:41,769 --> 00:33:46,480
so push render elements when we do this

822
00:33:44,589 --> 00:33:48,789
we need to pass a sort key for now I'll

823
00:33:46,480 --> 00:33:53,079
just say like okay we've got the offset

824
00:33:48,789 --> 00:33:57,339
here and we know the like we know that

825
00:33:53,079 --> 00:34:01,269
that when we do those push bitmaps we do

826
00:33:57,339 --> 00:34:04,629
the transform thing where does that so

827
00:34:01,269 --> 00:34:06,639
here it is good so the dim basis this

828
00:34:04,630 --> 00:34:10,898
this whole thing here gives us RP right

829
00:34:06,640 --> 00:34:14,349
so the Dimpy that peasy we could use as

830
00:34:10,898 --> 00:34:16,569
a sort key for now and then we can make

831
00:34:14,349 --> 00:34:18,969
it a little bit I guess we can add the

832
00:34:16,570 --> 00:34:21,789
the sort of Y component in as well on

833
00:34:18,969 --> 00:34:25,619
top of that so let's see if we can do

834
00:34:21,789 --> 00:34:32,099
that if we do push render element here

835
00:34:25,619 --> 00:34:32,099
we should be able to say something like

836
00:34:32,510 --> 00:34:42,349
push render elements let's see

837
00:34:35,659 --> 00:34:50,659
short key equals dim P well you know

838
00:34:42,349 --> 00:34:58,460
what who else calls this push rekt it's

839
00:34:50,659 --> 00:35:00,048
got a basis clear well clear it's gonna

840
00:34:58,460 --> 00:35:02,389
probably just always sort to the very

841
00:35:00,048 --> 00:35:04,278
bottom there's only a few people so I

842
00:35:02,389 --> 00:35:07,759
think what I'm gonna do instead I'm

843
00:35:04,278 --> 00:35:10,548
gonna actually say that whatever that

844
00:35:07,760 --> 00:35:12,859
dim basis thing is I think the basis

845
00:35:10,548 --> 00:35:15,349
maybe should just compute that it's

846
00:35:12,858 --> 00:35:17,719
these things here right entity basis P

847
00:35:15,349 --> 00:35:19,338
result it's these things here and so

848
00:35:17,719 --> 00:35:21,588
what I might say is like hey guess what

849
00:35:19,338 --> 00:35:27,130
guys let's just make it so that we

850
00:35:21,588 --> 00:35:27,130
actually have in here on the sort key

851
00:35:27,309 --> 00:35:31,789
I'm just gonna try that see if that

852
00:35:29,630 --> 00:35:34,460
works so then what we would do is say

853
00:35:31,789 --> 00:35:37,430
alright the sort key is just the dim

854
00:35:34,460 --> 00:35:40,608
basis sort key and that way anyone who

855
00:35:37,429 --> 00:35:43,669
calls that will automatically have the

856
00:35:40,608 --> 00:35:46,308
sort key that they actually needed right

857
00:35:43,670 --> 00:35:49,970
and so in here we'd say oh you know push

858
00:35:46,309 --> 00:35:54,019
rekt it that's gonna get the basis so we

859
00:35:49,969 --> 00:35:56,480
just do basis sort key and then in terms

860
00:35:54,018 --> 00:35:58,699
of the the clear I guess we would do

861
00:35:56,480 --> 00:36:01,389
something like real 30 to minimum here I

862
00:35:58,699 --> 00:36:03,409
don't know if we have one of those

863
00:36:01,389 --> 00:36:08,058
that's a good question

864
00:36:03,409 --> 00:36:10,578
and made math dot H and made platform

865
00:36:08,059 --> 00:36:13,910
not H do we have any minimums or

866
00:36:10,579 --> 00:36:17,150
maximums there it is real 30 to maximum

867
00:36:13,909 --> 00:36:20,199
so this would really just be that I

868
00:36:17,150 --> 00:36:20,200
guess I could do this

869
00:36:27,559 --> 00:36:30,980
so that would just be hey it's the

870
00:36:29,358 --> 00:36:34,369
minimum possible value so it's gonna

871
00:36:30,980 --> 00:36:36,079
sort the furthest back if we assume that

872
00:36:34,369 --> 00:36:37,820
the values go in that direction again I

873
00:36:36,079 --> 00:36:41,659
don't know which directions we want to I

874
00:36:37,820 --> 00:36:43,250
guess if z 4r z it comes up at you so it

875
00:36:41,659 --> 00:36:44,480
would be the furthest back would be

876
00:36:43,250 --> 00:36:46,280
consistent with the way the rest are

877
00:36:44,480 --> 00:36:48,920
render is going so let's just say that

878
00:36:46,280 --> 00:36:50,990
that's how that is all right so there's

879
00:36:48,920 --> 00:36:53,000
push render element at with the real

880
00:36:50,989 --> 00:36:54,469
thirty-two minimum so now what we would

881
00:36:53,000 --> 00:36:58,699
need to do is when we call that get

882
00:36:54,469 --> 00:37:01,279
basis P right we would need to produce

883
00:36:58,699 --> 00:37:04,338
the sort key so in here when we're doing

884
00:37:01,280 --> 00:37:07,910
orthographic or anything I guess really

885
00:37:04,338 --> 00:37:09,858
in either case maybe we can compute them

886
00:37:07,909 --> 00:37:14,259
the same way the sort key is just going

887
00:37:09,858 --> 00:37:18,529
to be the result PZ and the result py I

888
00:37:14,260 --> 00:37:21,109
think we could just for now just do it

889
00:37:18,530 --> 00:37:23,150
that way so we'd say okay take some

890
00:37:21,108 --> 00:37:25,900
large value you know like I said I don't

891
00:37:23,150 --> 00:37:28,910
know what we want to take 4096 who knows

892
00:37:25,900 --> 00:37:31,849
do that and then we want the result wide

893
00:37:28,909 --> 00:37:33,440
to offset it now Y gets negative as it

894
00:37:31,849 --> 00:37:36,140
goes down and positive as it goes up

895
00:37:33,440 --> 00:37:37,190
actually so we want this this is

896
00:37:36,139 --> 00:37:38,420
actually going to be the opposite

897
00:37:37,190 --> 00:37:40,099
direction because we want it to get

898
00:37:38,420 --> 00:37:41,480
higher as it comes closer to us which

899
00:37:40,099 --> 00:37:43,640
we're saying is kind of down towards the

900
00:37:41,480 --> 00:37:45,469
bottom screen so there'd be a way to

901
00:37:43,639 --> 00:37:46,969
produce the sort key for now again we'll

902
00:37:45,469 --> 00:37:48,049
probably have to visit you know actually

903
00:37:46,969 --> 00:37:52,098
think that through a little bit more

904
00:37:48,050 --> 00:37:54,380
carefully oh but we don't know what the

905
00:37:52,099 --> 00:37:59,210
Z is so we probably need to use this Z

906
00:37:54,380 --> 00:38:01,160
here at that original Z there we go okay

907
00:37:59,210 --> 00:38:03,740
and I don't know we might want to use

908
00:38:01,159 --> 00:38:06,969
the original Y - yeah I think about it

909
00:38:03,739 --> 00:38:06,969
I'm not sure

910
00:38:11,309 --> 00:38:15,940
I'm not sure I really don't know like I

911
00:38:14,530 --> 00:38:17,680
said we're gonna have to we're gonna

912
00:38:15,940 --> 00:38:20,019
have to think about it

913
00:38:17,679 --> 00:38:22,629
because we it does the offset properly

914
00:38:20,019 --> 00:38:23,769
and we don't have rotation I don't know

915
00:38:22,630 --> 00:38:26,170
I'm not sure which like I said we'll

916
00:38:23,769 --> 00:38:27,969
revisit that a little bit later but

917
00:38:26,170 --> 00:38:29,829
point being we've now got what we the

918
00:38:27,969 --> 00:38:31,809
basics of what we need in there for the

919
00:38:29,829 --> 00:38:34,029
sorting and now we've produced that

920
00:38:31,809 --> 00:38:36,130
array properly which means that when we

921
00:38:34,030 --> 00:38:37,450
do render group to output we actually

922
00:38:36,130 --> 00:38:40,630
have everything in place to actually go

923
00:38:37,449 --> 00:38:41,980
through the entries right and we've

924
00:38:40,630 --> 00:38:43,358
actually put the entries together so we

925
00:38:41,980 --> 00:38:46,960
actually have a valid array so in theory

926
00:38:43,358 --> 00:38:48,369
this should actually draw as well and in

927
00:38:46,960 --> 00:38:54,039
fact we could test that right now to see

928
00:38:48,369 --> 00:38:55,690
if that did anything not fantastic but I

929
00:38:54,039 --> 00:38:58,059
guess that's actually okay because that

930
00:38:55,690 --> 00:38:59,559
could still be correct since we don't

931
00:38:58,059 --> 00:39:01,119
actually know what order when the things

932
00:38:59,559 --> 00:39:03,190
got pushed in they'd be in the opposite

933
00:39:01,119 --> 00:39:06,369
order so actually that kind of makes

934
00:39:03,190 --> 00:39:07,690
sense yeah I think that that might

935
00:39:06,369 --> 00:39:09,970
actually make some sense that on the

936
00:39:07,690 --> 00:39:12,940
other hand does not look good at all

937
00:39:09,969 --> 00:39:14,618
all right so where are we at why are we

938
00:39:12,940 --> 00:39:18,010
getting why are we getting nonsense on

939
00:39:14,619 --> 00:39:21,280
the screen I don't know we got to debug

940
00:39:18,010 --> 00:39:23,650
this so here's our sword entry stuff as

941
00:39:21,280 --> 00:39:28,060
it gets produced and we just have to

942
00:39:23,650 --> 00:39:30,910
figure out is this stuff oh well it's

943
00:39:28,059 --> 00:39:33,759
because the clear would come last so

944
00:39:30,909 --> 00:39:37,539
yeah I mean really since we're not doing

945
00:39:33,760 --> 00:39:40,540
the sort yet that may actually be pretty

946
00:39:37,539 --> 00:39:43,029
much the entirety of the problem let's

947
00:39:40,539 --> 00:39:48,300
just test that let's see if I start at

948
00:39:43,030 --> 00:39:51,690
the at the end and go to the beginning

949
00:39:48,300 --> 00:39:51,690
what happens

950
00:39:54,960 --> 00:40:04,539
I'm not sure so if we do them in reverse

951
00:40:02,829 --> 00:40:07,029
order because remember we push them from

952
00:40:04,539 --> 00:40:09,730
the top back so they're gonna be in the

953
00:40:07,030 --> 00:40:11,740
reverse order when they came in and so I

954
00:40:09,730 --> 00:40:13,059
just want to see okay so that was really

955
00:40:11,739 --> 00:40:14,559
the entirety of the problem it's just

956
00:40:13,059 --> 00:40:16,179
that that array was flipped around I'll

957
00:40:14,559 --> 00:40:19,889
explain that in a second in case anyone

958
00:40:16,179 --> 00:40:21,960
missed it all right so that's all good

959
00:40:19,889 --> 00:40:24,489
so all that was happening there right

960
00:40:21,960 --> 00:40:29,199
since I was pushing from the back of the

961
00:40:24,489 --> 00:40:30,879
buffer I was pushing this way it meant

962
00:40:29,199 --> 00:40:34,599
that the order was exactly reversed

963
00:40:30,880 --> 00:40:36,430
which meant that the clear was like the

964
00:40:34,599 --> 00:40:37,960
last thing that would happen because the

965
00:40:36,429 --> 00:40:39,730
first thing that got pushes the clear so

966
00:40:37,960 --> 00:40:41,800
it's here then all of our stuff would be

967
00:40:39,730 --> 00:40:42,909
on it and so when it went to render it

968
00:40:41,800 --> 00:40:46,930
it would render everything and then

969
00:40:42,909 --> 00:40:48,129
clear right and so again we don't have

970
00:40:46,929 --> 00:40:51,069
to care about that because we're about

971
00:40:48,130 --> 00:40:52,450
to sort this array so really all we have

972
00:40:51,070 --> 00:40:55,990
to worry about is getting our sort keys

973
00:40:52,449 --> 00:40:57,460
correct and this can stay the way that

974
00:40:55,989 --> 00:40:59,019
it was but I just wanted to test that

975
00:40:57,460 --> 00:41:01,000
and make sure that was true okay so now

976
00:40:59,019 --> 00:41:03,699
we're back to doing it in the wrong

977
00:41:01,000 --> 00:41:05,650
order so the clear comes last and we see

978
00:41:03,699 --> 00:41:08,559
nothing but a blank screen let's go

979
00:41:05,650 --> 00:41:09,880
ahead and sort these okay so in order to

980
00:41:08,559 --> 00:41:13,750
sort of things what we need to do is

981
00:41:09,880 --> 00:41:16,450
when we do our render group to output so

982
00:41:13,750 --> 00:41:20,349
before we do anything else guess we've

983
00:41:16,449 --> 00:41:22,329
got our tiled right yeah right here so

984
00:41:20,349 --> 00:41:25,150
here we go we've got tiled render group

985
00:41:22,329 --> 00:41:27,090
to output and this sort of breaks things

986
00:41:25,150 --> 00:41:29,590
up into tiles right and then it calls

987
00:41:27,090 --> 00:41:32,050
this complete all work thing so what we

988
00:41:29,590 --> 00:41:33,610
want to do here is before we do

989
00:41:32,050 --> 00:41:35,440
something like that that render group to

990
00:41:33,610 --> 00:41:38,769
output we need a way of saying okay

991
00:41:35,440 --> 00:41:40,269
we're done and now you can sort and I

992
00:41:38,769 --> 00:41:42,009
don't know if we have that yet on our

993
00:41:40,269 --> 00:41:44,079
render group like I don't remember if we

994
00:41:42,010 --> 00:41:46,900
have I think we might because we had

995
00:41:44,079 --> 00:41:50,199
sort of a begin end thing that was going

996
00:41:46,900 --> 00:41:52,119
on which I think is this I don't

997
00:41:50,199 --> 00:41:53,559
remember it when that actually happens

998
00:41:52,119 --> 00:41:57,670
though I don't remember if that happens

999
00:41:53,559 --> 00:41:59,829
like before or after I I really just

1000
00:41:57,670 --> 00:42:02,909
don't remember I think that happens too

1001
00:41:59,829 --> 00:42:02,909
late right

1002
00:42:03,030 --> 00:42:06,990
inside renders false in fact it

1003
00:42:05,579 --> 00:42:09,599
definitely it's too late that that

1004
00:42:06,989 --> 00:42:12,089
happens after the output already

1005
00:42:09,599 --> 00:42:14,849
occurred so basically what we have to do

1006
00:42:12,090 --> 00:42:16,800
is when we call these like this render

1007
00:42:14,849 --> 00:42:19,259
group to output or this tiled render

1008
00:42:16,800 --> 00:42:22,410
group to output that has to do a sort

1009
00:42:19,260 --> 00:42:26,070
right it has to make sure that things

1010
00:42:22,409 --> 00:42:29,849
are sorted before it doesn't name or

1011
00:42:26,070 --> 00:42:33,090
work right so what we would have to do

1012
00:42:29,849 --> 00:42:37,400
here is go all right let's say right

1013
00:42:33,090 --> 00:42:43,980
here we do something like sort entries

1014
00:42:37,400 --> 00:42:45,740
and both of these guys would do this and

1015
00:42:43,980 --> 00:42:50,099
I'm gonna put it too little to do here

1016
00:42:45,739 --> 00:42:51,629
to say don't do this twice which means

1017
00:42:50,099 --> 00:42:53,400
if we wanted something that got rendered

1018
00:42:51,630 --> 00:42:54,990
multiple times for some reason we would

1019
00:42:53,400 --> 00:42:56,190
end up sorting multiple times which we

1020
00:42:54,989 --> 00:42:58,139
wouldn't really need to do because the

1021
00:42:56,190 --> 00:43:00,510
list would already be sorted just

1022
00:42:58,139 --> 00:43:02,009
something to think about so here's our

1023
00:43:00,510 --> 00:43:03,660
sword entries and what this needs to do

1024
00:43:02,010 --> 00:43:05,430
is it needs to go through that list and

1025
00:43:03,659 --> 00:43:14,699
it needs to sort everything now what

1026
00:43:05,429 --> 00:43:15,569
we're gonna do what we're going to do is

1027
00:43:14,699 --> 00:43:17,460
we're going to do the simplest possible

1028
00:43:15,570 --> 00:43:21,260
sort like the dumbest possible sort we

1029
00:43:17,460 --> 00:43:27,150
could and that's called a bubble sort

1030
00:43:21,260 --> 00:43:28,650
right so here's our bubble sort now

1031
00:43:27,150 --> 00:43:30,570
essentially what we need to do is we

1032
00:43:28,650 --> 00:43:34,190
have something that's got values in it

1033
00:43:30,570 --> 00:43:38,160
right you know five three one zero two

1034
00:43:34,190 --> 00:43:42,450
four six right now we want these things

1035
00:43:38,159 --> 00:43:47,369
to go in a particular order so obviously

1036
00:43:42,449 --> 00:43:49,559
we're not going to try in 16 minutes to

1037
00:43:47,369 --> 00:43:51,000
implement any kind of fancy sort but we

1038
00:43:49,559 --> 00:43:52,349
might be able to do a very simple sort

1039
00:43:51,000 --> 00:43:54,210
and like I said so let's try to just put

1040
00:43:52,349 --> 00:43:55,829
it in the dumbest possible sort and then

1041
00:43:54,210 --> 00:43:58,139
we'll talk about sorting in more detail

1042
00:43:55,829 --> 00:43:59,579
tomorrow so how would we go about

1043
00:43:58,139 --> 00:44:02,369
sorting this in the dumbest possible way

1044
00:43:59,579 --> 00:44:05,819
well if you just wanted to be absolutely

1045
00:44:02,369 --> 00:44:09,269
stupid about it right all you have to do

1046
00:44:05,820 --> 00:44:12,470
is go well if I just went through this

1047
00:44:09,269 --> 00:44:16,050
array and I looked at adjacent values

1048
00:44:12,469 --> 00:44:16,619
every time I saw a value that was out of

1049
00:44:16,050 --> 00:44:18,150
order

1050
00:44:16,619 --> 00:44:20,069
right because it's it's it's really easy

1051
00:44:18,150 --> 00:44:22,380
to conceptualize just testing to values

1052
00:44:20,070 --> 00:44:25,320
right if the array was only two things

1053
00:44:22,380 --> 00:44:27,570
big it'd be trivial to sort it all we

1054
00:44:25,320 --> 00:44:28,080
would have to do is go well which one's

1055
00:44:27,570 --> 00:44:29,910
bigger

1056
00:44:28,079 --> 00:44:31,469
whichever one's bigger make sure you

1057
00:44:29,909 --> 00:44:32,879
swap it so that one comes second so in

1058
00:44:31,469 --> 00:44:35,609
this case they're out of order put the

1059
00:44:32,880 --> 00:44:39,539
three here and put the five there that's

1060
00:44:35,610 --> 00:44:43,200
it right if we just do that for every

1061
00:44:39,539 --> 00:44:44,190
pair right then we know that when one

1062
00:44:43,199 --> 00:44:48,899
pass through

1063
00:44:44,190 --> 00:44:50,900
we have moved every element at least one

1064
00:44:48,900 --> 00:44:53,940
place closer to its eventual destination

1065
00:44:50,900 --> 00:44:56,519
right so the three would move up here

1066
00:44:53,940 --> 00:44:58,380
right and the five would go here the one

1067
00:44:56,519 --> 00:45:00,409
would move up here right

1068
00:44:58,380 --> 00:45:04,140
etc etc like they would kind of move and

1069
00:45:00,409 --> 00:45:06,750
as we go down so even if something that

1070
00:45:04,139 --> 00:45:09,659
was wrong was all the way at the end it

1071
00:45:06,750 --> 00:45:12,050
would only take and passes through the

1072
00:45:09,659 --> 00:45:16,230
array to get it to its correct location

1073
00:45:12,050 --> 00:45:18,780
right because it's gonna move one every

1074
00:45:16,230 --> 00:45:20,099
time even if the one or the zero I

1075
00:45:18,780 --> 00:45:22,140
should say let's say the zero was in the

1076
00:45:20,099 --> 00:45:23,849
worst possible place every time through

1077
00:45:22,139 --> 00:45:26,429
it would move up by one because every

1078
00:45:23,849 --> 00:45:30,569
time we compared two pairs together we

1079
00:45:26,429 --> 00:45:33,690
would move it up by one and so we know

1080
00:45:30,570 --> 00:45:36,539
that if this thing contains n elements

1081
00:45:33,690 --> 00:45:39,090
we would need to do n passes at maximum

1082
00:45:36,539 --> 00:45:40,230
to go through it to move something if it

1083
00:45:39,090 --> 00:45:42,600
was all the way at the end all the way

1084
00:45:40,230 --> 00:45:44,010
in the beginning so that would be you

1085
00:45:42,599 --> 00:45:45,839
know what they would call N squared

1086
00:45:44,010 --> 00:45:47,880
right that would be an N squared

1087
00:45:45,840 --> 00:45:49,110
algorithm it has to do N squared units

1088
00:45:47,880 --> 00:45:51,930
of work because asked to look at n

1089
00:45:49,110 --> 00:45:54,150
elements and asked to do that whole

1090
00:45:51,929 --> 00:45:55,799
thing and times in order to potentially

1091
00:45:54,150 --> 00:45:59,610
move something if it was in the worst

1092
00:45:55,800 --> 00:46:01,260
possible place right so that is actually

1093
00:45:59,610 --> 00:46:03,780
called a bubble sort that thing of just

1094
00:46:01,260 --> 00:46:05,490
like just compare every two and swap if

1095
00:46:03,780 --> 00:46:08,220
they're in the wrong place and just keep

1096
00:46:05,489 --> 00:46:10,409
doing it as many times you need to till

1097
00:46:08,219 --> 00:46:12,179
you never have to swap anything which

1098
00:46:10,409 --> 00:46:15,420
again in the worst case would mean that

1099
00:46:12,179 --> 00:46:17,480
you'd have to do it an entire pass of

1100
00:46:15,420 --> 00:46:19,409
the array for every entry that there was

1101
00:46:17,480 --> 00:46:21,329
because you might have something that

1102
00:46:19,409 --> 00:46:24,359
was that far away from its eventual

1103
00:46:21,329 --> 00:46:27,690
location that's called the bubble sort

1104
00:46:24,360 --> 00:46:30,030
now it's not really a good name I don't

1105
00:46:27,690 --> 00:46:32,940
love the name bubble sort I would

1106
00:46:30,030 --> 00:46:35,220
probably call it a gravity support if I

1107
00:46:32,940 --> 00:46:36,450
if I could rename it and the reason is

1108
00:46:35,219 --> 00:46:37,980
because a bubble sort suggests that

1109
00:46:36,449 --> 00:46:39,569
there's two different things like you

1110
00:46:37,980 --> 00:46:42,000
know if you think about bubbles usually

1111
00:46:39,570 --> 00:46:45,510
bubbles is like I've got air and I've

1112
00:46:42,000 --> 00:46:48,239
got a bubble you know and like air and

1113
00:46:45,510 --> 00:46:50,460
water right and here's my thing and I've

1114
00:46:48,239 --> 00:46:52,139
got a few little bubbles and everything

1115
00:46:50,460 --> 00:46:54,900
else is water and I'm just trying to get

1116
00:46:52,139 --> 00:46:57,599
the bubbles to the top right and that

1117
00:46:54,900 --> 00:47:00,510
kind of talks about this part well but

1118
00:46:57,599 --> 00:47:02,250
this is not a heterogeneous array it's

1119
00:47:00,510 --> 00:47:04,260
all the same stuff so it's really just a

1120
00:47:02,250 --> 00:47:06,420
gravity sort it's really saying apply

1121
00:47:04,260 --> 00:47:09,000
gravity to this thing so that heavy

1122
00:47:06,420 --> 00:47:11,460
things sink and light things rise right

1123
00:47:09,000 --> 00:47:13,559
and everything in it is moving there

1124
00:47:11,460 --> 00:47:15,539
aren't just like a few things moving and

1125
00:47:13,559 --> 00:47:17,039
then some other substrate right it's

1126
00:47:15,539 --> 00:47:18,929
basically just constantly applying

1127
00:47:17,039 --> 00:47:20,670
gravity and letting things like sort

1128
00:47:18,929 --> 00:47:22,559
themselves out almost like shaking up a

1129
00:47:20,670 --> 00:47:24,180
jar with heavy things and light things

1130
00:47:22,559 --> 00:47:27,389
in it so that they you know naturally go

1131
00:47:24,179 --> 00:47:28,440
to their correct positions but whatever

1132
00:47:27,389 --> 00:47:30,480
that's not what they called it it's

1133
00:47:28,440 --> 00:47:31,740
called a bubble sort so that's what we

1134
00:47:30,480 --> 00:47:34,500
have to call it because that's what they

1135
00:47:31,739 --> 00:47:36,509
named it it's a bubble sort so it's

1136
00:47:34,500 --> 00:47:39,449
literally as stupid as I just said it's

1137
00:47:36,510 --> 00:47:41,520
a loop around the outside and if we

1138
00:47:39,449 --> 00:47:43,139
wanted to truly make it N squared we

1139
00:47:41,519 --> 00:47:46,530
could literally write it n squared we

1140
00:47:43,139 --> 00:47:49,369
could say like outer equals zero

1141
00:47:46,530 --> 00:47:52,290
you know outer is less than then count

1142
00:47:49,369 --> 00:47:56,489
plus plus out or something like that and

1143
00:47:52,289 --> 00:47:58,559
then inner right there's less than count

1144
00:47:56,489 --> 00:47:59,849
plus plus inner something like this we

1145
00:47:58,559 --> 00:48:01,170
could literally do it this way and I

1146
00:47:59,849 --> 00:48:03,420
will write it that way at first so you

1147
00:48:01,170 --> 00:48:04,860
can see how it's N squared you can see

1148
00:48:03,420 --> 00:48:06,630
that the total number of iterations here

1149
00:48:04,860 --> 00:48:11,880
is count squared right

1150
00:48:06,630 --> 00:48:13,110
it's count loops of count loops we can

1151
00:48:11,880 --> 00:48:15,800
early-out on this and I'll show you that

1152
00:48:13,110 --> 00:48:15,800
in a second but

1153
00:48:20,409 --> 00:48:27,019
right but inside here all we have to do

1154
00:48:24,500 --> 00:48:30,469
is say okay we know we've got a sword

1155
00:48:27,019 --> 00:48:32,300
entry array so my entries whatever one

1156
00:48:30,469 --> 00:48:34,129
that I'm looking at here I don't

1157
00:48:32,300 --> 00:48:36,890
actually want to go all the way to count

1158
00:48:34,130 --> 00:48:38,630
I want to go to count minus one because

1159
00:48:36,889 --> 00:48:39,650
I'm going to look at pairs so I don't

1160
00:48:38,630 --> 00:48:41,869
need to go all the way to the end of the

1161
00:48:39,650 --> 00:48:42,950
array I know when you go to one before

1162
00:48:41,869 --> 00:48:44,660
the end of the array because I'm going

1163
00:48:42,949 --> 00:48:47,839
to look at two different entries I'm

1164
00:48:44,659 --> 00:48:50,750
going to look at this it's called tile

1165
00:48:47,840 --> 00:48:53,869
sword entry I'm looking at entry a which

1166
00:48:50,750 --> 00:48:59,900
is which is here and I'm looking at

1167
00:48:53,869 --> 00:49:02,600
entry B which is one pass fit right and

1168
00:48:59,900 --> 00:49:04,730
all I want to do is say that if entry a

1169
00:49:02,599 --> 00:49:06,799
sort key right and I we can do whatever

1170
00:49:04,730 --> 00:49:10,849
we want here but if NP a sort key is

1171
00:49:06,800 --> 00:49:13,220
less than entry be sort key then I need

1172
00:49:10,849 --> 00:49:15,319
to swap them right and I can do that

1173
00:49:13,219 --> 00:49:19,659
swap really easily I can just say like

1174
00:49:15,320 --> 00:49:23,420
okay grab entry B entry B equals entry a

1175
00:49:19,659 --> 00:49:25,849
entry a equals the swap value right and

1176
00:49:23,420 --> 00:49:28,460
we can pick whichever way we want to

1177
00:49:25,849 --> 00:49:30,920
sort these so in our case our sort key

1178
00:49:28,460 --> 00:49:33,108
is least what it should be first so what

1179
00:49:30,920 --> 00:49:35,050
we want to do is say well if I guess we

1180
00:49:33,108 --> 00:49:38,358
really want to talk about this way if

1181
00:49:35,050 --> 00:49:40,550
well if entry a sort key is higher than

1182
00:49:38,358 --> 00:49:42,500
entry B's meaning it should be after it

1183
00:49:40,550 --> 00:49:44,810
then we want to do the swap right

1184
00:49:42,500 --> 00:49:45,949
because then Phoebe a is lower we want

1185
00:49:44,809 --> 00:49:47,960
to keep it where it is but we want them

1186
00:49:45,949 --> 00:49:50,269
from least to greatest right but we

1187
00:49:47,960 --> 00:49:51,980
could again like this is your choice you

1188
00:49:50,269 --> 00:49:54,380
can choose how you want it this can be

1189
00:49:51,980 --> 00:49:56,358
any function as that you want as long as

1190
00:49:54,380 --> 00:50:00,858
it's going to produce a reliable

1191
00:49:56,358 --> 00:50:02,509
ordering of these things all right so

1192
00:50:00,858 --> 00:50:06,679
that's our sort and that's literally the

1193
00:50:02,510 --> 00:50:09,500
whole sort that's it there really isn't

1194
00:50:06,679 --> 00:50:11,599
anything else to it so anyway if we were

1195
00:50:09,500 --> 00:50:16,190
to do this this is like I said this is

1196
00:50:11,599 --> 00:50:21,190
the push buffer element count and this

1197
00:50:16,190 --> 00:50:21,190
is the oops

1198
00:50:22,780 --> 00:50:31,070
yeah in fact I could actually just do

1199
00:50:26,659 --> 00:50:36,159
that right so anyway here's our entries

1200
00:50:31,070 --> 00:50:38,780
that's at the push buffer base plus the

1201
00:50:36,159 --> 00:50:43,219
sport entry app probably want to make an

1202
00:50:38,780 --> 00:50:44,800
accessor for that this is kind of a

1203
00:50:43,219 --> 00:50:48,799
little janky doing that every time but

1204
00:50:44,800 --> 00:50:51,890
there we go so there's our there's our

1205
00:50:48,800 --> 00:50:53,269
code for sorting and in theory I mean I

1206
00:50:51,889 --> 00:50:57,920
probably didn't type it exactly right

1207
00:50:53,269 --> 00:50:59,090
but in theory that would work right now

1208
00:50:57,920 --> 00:51:00,289
what's interesting is it actually is

1209
00:50:59,090 --> 00:51:03,500
already working because remember these

1210
00:51:00,289 --> 00:51:05,960
things were these layers have Z so now

1211
00:51:03,500 --> 00:51:07,429
it's not even relying on the order that

1212
00:51:05,960 --> 00:51:08,630
we put them in we could put put them in

1213
00:51:07,429 --> 00:51:11,230
any order and they'll still sort

1214
00:51:08,630 --> 00:51:13,519
properly now which is kind of nice right

1215
00:51:11,230 --> 00:51:17,050
but let's go ahead and take a look at

1216
00:51:13,519 --> 00:51:21,679
this guy all right that is not great

1217
00:51:17,050 --> 00:51:23,990
obviously uh although I'm not even sure

1218
00:51:21,679 --> 00:51:27,079
that that's wrong because those ground

1219
00:51:23,989 --> 00:51:32,389
tiles are in no way told that they're

1220
00:51:27,079 --> 00:51:34,819
behind anything else so there is that so

1221
00:51:32,389 --> 00:51:37,849
I'm gonna go ahead and do something here

1222
00:51:34,820 --> 00:51:39,500
like those we don't really have anyway I

1223
00:51:37,849 --> 00:51:40,579
think that might actually be right is I

1224
00:51:39,500 --> 00:51:41,659
guess I'm saying we don't have any way

1225
00:51:40,579 --> 00:51:43,880
of saying that they're standing on top

1226
00:51:41,659 --> 00:51:45,710
so we really want for that sort key we

1227
00:51:43,880 --> 00:51:49,880
kind of want to say that those ground

1228
00:51:45,710 --> 00:51:54,500
tiles are are behind or like lower down

1229
00:51:49,880 --> 00:51:56,390
right so when I do when I do that fill

1230
00:51:54,500 --> 00:51:59,809
ground chunk I want to be able to like

1231
00:51:56,389 --> 00:52:03,799
put in that those are underneath so like

1232
00:51:59,809 --> 00:52:11,099
I guess it here where we do

1233
00:52:03,800 --> 00:52:17,880
this stuff ah where is that render

1234
00:52:11,099 --> 00:52:20,909
ground chunks yeah this stuff when I do

1235
00:52:17,880 --> 00:52:23,550
this push v map here to place the thing

1236
00:52:20,909 --> 00:52:25,469
what I probably want to do is say you

1237
00:52:23,550 --> 00:52:28,970
know the Z on this guy is actually a

1238
00:52:25,469 --> 00:52:34,469
little bit further back you know

1239
00:52:28,969 --> 00:52:38,939
something like this so that it's always

1240
00:52:34,469 --> 00:52:39,449
gonna be you know a little bit further

1241
00:52:38,940 --> 00:52:42,769
back

1242
00:52:39,449 --> 00:52:51,539
oops didn't mean to do that

1243
00:52:42,769 --> 00:52:53,070
all right hmm all right so that may just

1244
00:52:51,539 --> 00:52:54,480
be that we haven't quite implemented it

1245
00:52:53,070 --> 00:52:56,190
right so I'm gonna turn these off for

1246
00:52:54,480 --> 00:53:00,059
now let's get this working with some

1247
00:52:56,190 --> 00:53:01,559
stuff we can see and then I will we'll

1248
00:53:00,059 --> 00:53:02,670
go back to getting the ground chunks in

1249
00:53:01,559 --> 00:53:03,719
there properly because we don't even

1250
00:53:02,670 --> 00:53:06,030
know if our sorts working properly

1251
00:53:03,719 --> 00:53:09,259
although it works properly for this so

1252
00:53:06,030 --> 00:53:11,430
maybe it works so let's see all right so

1253
00:53:09,260 --> 00:53:13,260
that actually does appear to be working

1254
00:53:11,429 --> 00:53:16,109
properly you can see that we're now

1255
00:53:13,260 --> 00:53:17,610
consistently sorting and we also have a

1256
00:53:16,110 --> 00:53:19,530
couple problems here like you can see

1257
00:53:17,610 --> 00:53:22,349
that like my torso sorting in front of

1258
00:53:19,530 --> 00:53:23,550
my dude and you know like I said we

1259
00:53:22,349 --> 00:53:25,469
haven't done anything to ensure that

1260
00:53:23,550 --> 00:53:28,170
that's not gonna happen

1261
00:53:25,469 --> 00:53:30,119
you can also see in here that all of our

1262
00:53:28,170 --> 00:53:31,680
trees now line up properly too like

1263
00:53:30,119 --> 00:53:35,519
they're sorted properly down the side

1264
00:53:31,679 --> 00:53:37,139
there which is kind of nice yeah so this

1265
00:53:35,519 --> 00:53:39,360
stuff is all kind of sorted nicely which

1266
00:53:37,139 --> 00:53:40,319
is which is great so I think our sword

1267
00:53:39,360 --> 00:53:43,710
is working properly you stop to think

1268
00:53:40,320 --> 00:53:45,390
about the way that we're doing Z&amp;Y like

1269
00:53:43,710 --> 00:53:46,860
I said we have a second job to do that

1270
00:53:45,389 --> 00:53:49,859
we haven't really done we've just kind

1271
00:53:46,860 --> 00:53:51,750
of let lie which is that how we produce

1272
00:53:49,860 --> 00:53:53,400
the sort key thing so we need to think

1273
00:53:51,750 --> 00:53:54,750
hard about how to produce our sort key

1274
00:53:53,400 --> 00:53:57,570
we're gonna have to do some real work

1275
00:53:54,750 --> 00:53:59,730
there but that looks like the problem

1276
00:53:57,570 --> 00:54:01,410
with that now we could that probably

1277
00:53:59,730 --> 00:54:03,780
means that if we just put them if we had

1278
00:54:01,409 --> 00:54:07,799
more of a bias in there maybe it would

1279
00:54:03,780 --> 00:54:09,330
work but again that really just means we

1280
00:54:07,800 --> 00:54:11,430
have to go like work on that sort key

1281
00:54:09,329 --> 00:54:12,719
stuff which we can do tomorrow let me

1282
00:54:11,429 --> 00:54:14,399
just tell I just wanna check to see if

1283
00:54:12,719 --> 00:54:16,250
that's true so that's kind of odd I

1284
00:54:14,400 --> 00:54:18,559
don't know why that's

1285
00:54:16,250 --> 00:54:19,849
I don't know why that's doing that that

1286
00:54:18,559 --> 00:54:22,250
is a little confusing to me because that

1287
00:54:19,849 --> 00:54:23,960
should have worked maybe that means our

1288
00:54:22,250 --> 00:54:32,269
sort key computation is wrong as well I

1289
00:54:23,960 --> 00:54:42,590
don't know either way oh wait a minute

1290
00:54:32,269 --> 00:54:49,719
that Delta thing that that's not

1291
00:54:42,590 --> 00:54:52,670
actually the way that that works okay

1292
00:54:49,719 --> 00:54:55,250
yeah these are not this is not actually

1293
00:54:52,670 --> 00:54:57,800
using the transform that's why this is

1294
00:54:55,250 --> 00:55:00,650
ignored by the sorting so that's

1295
00:54:57,800 --> 00:55:01,940
actually why okay so yeah so we're gonna

1296
00:55:00,650 --> 00:55:04,789
have to do something a little fancier

1297
00:55:01,940 --> 00:55:06,858
there we're gonna have to do something a

1298
00:55:04,789 --> 00:55:10,130
little fancier there so basically the

1299
00:55:06,858 --> 00:55:12,889
reason yeah if you look that's just

1300
00:55:10,130 --> 00:55:17,390
getting passed as the offset but the

1301
00:55:12,889 --> 00:55:18,980
actual Delta is the actual transform is

1302
00:55:17,389 --> 00:55:21,469
actually no it's not actually applying

1303
00:55:18,980 --> 00:55:24,619
any transform at all the transform is

1304
00:55:21,469 --> 00:55:30,469
like the thing that that happens in here

1305
00:55:24,619 --> 00:55:32,588
right it's where is that guy where do we

1306
00:55:30,469 --> 00:55:35,209
apply the transform it's this guy right

1307
00:55:32,588 --> 00:55:37,279
so really what we would need to do when

1308
00:55:35,210 --> 00:55:39,260
we're when we're sort of applying this

1309
00:55:37,280 --> 00:55:41,150
is when we do our ground chunk rendering

1310
00:55:39,260 --> 00:55:43,040
we'd have to do something like this we

1311
00:55:41,150 --> 00:55:45,230
really need to clean up this the offset

1312
00:55:43,039 --> 00:55:47,358
pista you get so many problems with it

1313
00:55:45,230 --> 00:55:50,030
we need to think about how we could make

1314
00:55:47,358 --> 00:55:53,088
it better that makes sense but for

1315
00:55:50,030 --> 00:55:55,550
offset P what we could do here is say

1316
00:55:53,088 --> 00:55:57,469
like okay the bias could come in here if

1317
00:55:55,550 --> 00:56:00,500
we wanted and that would probably do it

1318
00:55:57,469 --> 00:56:03,169
I would think let me find out I just

1319
00:56:00,500 --> 00:56:05,780
want to know from my own yeah that's

1320
00:56:03,170 --> 00:56:08,030
what I thought so that's that's really

1321
00:56:05,780 --> 00:56:11,780
the main problem there is is how that

1322
00:56:08,030 --> 00:56:13,130
bias works out so we'll have to we'll

1323
00:56:11,780 --> 00:56:17,200
have to do something a little bit a

1324
00:56:13,130 --> 00:56:17,200
little bit more logical with that

1325
00:56:26,469 --> 00:56:33,379
okay so let's go to a brief Q&amp;A I guess

1326
00:56:32,000 --> 00:56:37,608
we have technically three minutes left

1327
00:56:33,380 --> 00:56:41,140
but I voiced a shot I didn't have time

1328
00:56:37,608 --> 00:56:41,139
to grab a drink today I was so rushed

1329
00:56:42,010 --> 00:56:51,310
all right so let's see if I can actually

1330
00:56:44,960 --> 00:56:51,309
trigger the Q&amp;A from here there you go

1331
00:56:57,318 --> 00:57:01,779
sorry we were unable to connect to chat

1332
00:56:59,679 --> 00:57:07,059
that doesn't help

1333
00:57:01,780 --> 00:57:07,060
how do I connect to chat again hello

1334
00:57:08,019 --> 00:57:14,349
hello let me see QA there we go

1335
00:57:15,010 --> 00:57:25,810
better dang wag do you know the Vulcan

1336
00:57:22,219 --> 00:57:25,809
release date no I do not

1337
00:57:51,730 --> 00:58:00,719
oh man in sohbat just totally nailed it

1338
00:58:02,250 --> 00:58:10,210
dude

1339
00:58:03,489 --> 00:58:12,118
in sohbat grim Joey can you talk about

1340
00:58:10,210 --> 00:58:17,079
pros and cons of heap sort and quicksort

1341
00:58:12,119 --> 00:58:20,740
and/or explain quaternions well we're

1342
00:58:17,079 --> 00:58:26,050
not gonna explain quaternions but heap

1343
00:58:20,739 --> 00:58:29,919
sort and quicksort basically sorting in

1344
00:58:26,050 --> 00:58:31,810
general we'll talk about tomorrow well

1345
00:58:29,920 --> 00:58:33,789
either tomorrow or the next day

1346
00:58:31,809 --> 00:58:35,949
basically tomorrow we might go fix our

1347
00:58:33,789 --> 00:58:38,170
sort keys first and get that right so

1348
00:58:35,949 --> 00:58:44,649
that the code is all done just with a

1349
00:58:38,170 --> 00:58:46,180
really bad sort and then we can write

1350
00:58:44,650 --> 00:58:48,400
some other sorts like show how another

1351
00:58:46,179 --> 00:58:50,319
some other sorts we could write try

1352
00:58:48,400 --> 00:58:52,210
writing one of those and explain why it

1353
00:58:50,320 --> 00:58:55,570
may or may not be better than the bubble

1354
00:58:52,210 --> 00:58:57,039
sort if that makes sense so so we'll

1355
00:58:55,570 --> 00:58:59,680
definitely do that but but not it here

1356
00:58:57,039 --> 00:59:04,000
in the Q&amp;A we need that's like a that's

1357
00:58:59,679 --> 00:59:05,348
like a full episode every or what sort

1358
00:59:04,000 --> 00:59:10,989
of you planning to ultimately replace

1359
00:59:05,349 --> 00:59:14,170
bubble sort with I don't know I you know

1360
00:59:10,989 --> 00:59:21,429
my tendency is usually to go with a n

1361
00:59:14,170 --> 00:59:23,950
log n which you know is I guess is the

1362
00:59:21,429 --> 00:59:25,629
lowest you can possibly do rather than

1363
00:59:23,949 --> 00:59:30,129
what's the C Center library does which

1364
00:59:25,630 --> 00:59:34,420
is it usually uses an N squared one if

1365
00:59:30,130 --> 00:59:35,769
that makes sense because the N squared

1366
00:59:34,420 --> 00:59:36,909
one's usually faster in practice but I

1367
00:59:35,769 --> 00:59:38,170
don't know if I really care what's

1368
00:59:36,909 --> 00:59:39,818
usually faster in practice I think I

1369
00:59:38,170 --> 00:59:42,460
probably care which one I know will

1370
00:59:39,818 --> 00:59:44,500
never do a really bad case but who knows

1371
00:59:42,460 --> 00:59:45,760
maybe we just never have enough n so it

1372
00:59:44,500 --> 00:59:49,000
probably doesn't matter I don't know

1373
00:59:45,760 --> 00:59:53,079
it's really hard to say since we're not

1374
00:59:49,000 --> 00:59:57,010
sorting millions of things it's it's

1375
00:59:53,079 --> 00:59:58,890
kind of a little weird if that makes

1376
00:59:57,010 --> 01:00:00,930
sense

1377
00:59:58,889 --> 01:00:03,179
midlow bubble sort is the simplest sort

1378
01:00:00,929 --> 01:00:04,980
I worked my way to doing a section sort

1379
01:00:03,179 --> 01:00:08,989
in my practices to assume that must be

1380
01:00:04,980 --> 01:00:11,579
down there for simplicity well I mean I

1381
01:00:08,989 --> 01:00:16,909
feel like how do you get any simpler

1382
01:00:11,579 --> 01:00:19,199
than that I mean it's so simple it's I

1383
01:00:16,909 --> 01:00:24,000
mean I feel like it's kind of the

1384
01:00:19,199 --> 01:00:27,149
simplest she'll sorts are almost the

1385
01:00:24,000 --> 01:00:42,360
same kind of thing so those may be two

1386
01:00:27,150 --> 01:00:44,099
but let's see quickly games N squared is

1387
01:00:42,360 --> 01:00:46,079
actually faster in this cases yeah so

1388
01:00:44,099 --> 01:00:48,869
the the reason that that happens is

1389
01:00:46,079 --> 01:00:50,789
because like N squared is the worst case

1390
01:00:48,869 --> 01:00:56,400
like when you talk about those things on

1391
01:00:50,789 --> 01:00:58,739
the n when you talk about analyzing the

1392
01:00:56,400 --> 01:01:00,059
running time of things from a complexity

1393
01:00:58,739 --> 01:01:02,849
standpoint what you're talking about is

1394
01:01:00,059 --> 01:01:05,190
the worst case and if the worst case

1395
01:01:02,849 --> 01:01:07,409
almost never occurs in practice then

1396
01:01:05,190 --> 01:01:10,800
what you actually care about is the

1397
01:01:07,409 --> 01:01:15,839
expected case like the common case and

1398
01:01:10,800 --> 01:01:19,289
the total cost for any individual

1399
01:01:15,840 --> 01:01:20,640
iteration of the loop right and so what

1400
01:01:19,289 --> 01:01:24,960
ends up happening is sometimes

1401
01:01:20,639 --> 01:01:26,549
algorithms which have the lowest worst

1402
01:01:24,960 --> 01:01:27,780
case complexity aren't necessarily the

1403
01:01:26,550 --> 01:01:32,340
fastest in practice because the worst

1404
01:01:27,780 --> 01:01:34,560
cases never get hit right or the size

1405
01:01:32,340 --> 01:01:36,510
isn't big enough so that the constant

1406
01:01:34,559 --> 01:01:38,880
factors that the actual cost of running

1407
01:01:36,510 --> 01:01:40,710
a single iteration of the loop even

1408
01:01:38,880 --> 01:01:42,059
though the loop gets run less often it's

1409
01:01:40,710 --> 01:01:45,210
it's so expensive that it ends up

1410
01:01:42,059 --> 01:01:46,799
costing more and you have to again it's

1411
01:01:45,210 --> 01:01:49,559
based on how many things are doing if

1412
01:01:46,800 --> 01:01:51,930
you never sort enough items to have that

1413
01:01:49,559 --> 01:01:54,509
scale come into play if you're only ever

1414
01:01:51,929 --> 01:01:56,219
sorting a thousand items and that's not

1415
01:01:54,510 --> 01:02:01,170
enough to really get you far enough up

1416
01:01:56,219 --> 01:02:03,419
to X but exponential curve then the the

1417
01:02:01,170 --> 01:02:05,760
one that's technically worse is actually

1418
01:02:03,420 --> 01:02:09,380
better we'll talk about that tomorrow or

1419
01:02:05,760 --> 01:02:09,380
either tomorrow or Wednesday

1420
01:02:21,929 --> 01:02:25,618
Angus holder can't you just use binary

1421
01:02:24,119 --> 01:02:27,210
insertion to put items into their

1422
01:02:25,619 --> 01:02:29,068
correct position so the array is sorted

1423
01:02:27,210 --> 01:02:30,869
the whole time that way render group to

1424
01:02:29,068 --> 01:02:34,259
output doesn't have to do anything um

1425
01:02:30,869 --> 01:02:36,000
you can but that's not always such a

1426
01:02:34,260 --> 01:02:38,010
good idea and the reason that that's not

1427
01:02:36,000 --> 01:02:40,460
such a good idea is because if you do

1428
01:02:38,010 --> 01:02:43,260
that you're constantly pulling in

1429
01:02:40,460 --> 01:02:48,150
everything in the render group output

1430
01:02:43,260 --> 01:02:53,789
array back into the cache because you're

1431
01:02:48,150 --> 01:02:59,548
like stepping through so we try to

1432
01:02:53,789 --> 01:03:06,839
explain that so I've got this array and

1433
01:02:59,548 --> 01:03:12,869
here's you know sorting afterward and

1434
01:03:06,838 --> 01:03:14,489
here's sorting during okay so the

1435
01:03:12,869 --> 01:03:15,960
important thing to remember is whether

1436
01:03:14,489 --> 01:03:18,778
you sort after or whether you sort

1437
01:03:15,960 --> 01:03:21,240
during it's the same cost because

1438
01:03:18,778 --> 01:03:23,219
sorting a sorting so you're still gonna

1439
01:03:21,239 --> 01:03:24,868
do all of the work of sorting even if

1440
01:03:23,219 --> 01:03:27,808
you sort during because like you said

1441
01:03:24,869 --> 01:03:30,059
binary insertion well binary insertion

1442
01:03:27,809 --> 01:03:32,700
is just a sort that's a kind of sort

1443
01:03:30,059 --> 01:03:35,579
right so you're just running a binary

1444
01:03:32,699 --> 01:03:39,989
insertion sort as you put things in

1445
01:03:35,579 --> 01:03:42,599
right so if anything the cost will be

1446
01:03:39,989 --> 01:03:44,278
higher when you actually do it here

1447
01:03:42,599 --> 01:03:46,140
because you have less information you

1448
01:03:44,278 --> 01:03:48,480
can't see all the elements at once right

1449
01:03:46,139 --> 01:03:50,308
so it's never gonna be cheaper to sort

1450
01:03:48,480 --> 01:03:53,068
during you can only be the same cost but

1451
01:03:50,309 --> 01:03:54,930
a point is it can never be better so why

1452
01:03:53,068 --> 01:03:56,219
might you not want to apply it at that

1453
01:03:54,929 --> 01:03:57,629
time well the reason you might not want

1454
01:03:56,219 --> 01:03:59,459
to apply it is because if I have to

1455
01:03:57,630 --> 01:04:02,338
insert things all right I'm putting

1456
01:03:59,460 --> 01:04:05,548
things into this array right in one case

1457
01:04:02,338 --> 01:04:07,318
I just put them in in order right so by

1458
01:04:05,548 --> 01:04:09,809
the time I get out of this cache line

1459
01:04:07,318 --> 01:04:12,900
and into this cache line I never touched

1460
01:04:09,809 --> 01:04:15,720
this again right I just keep adding and

1461
01:04:12,900 --> 01:04:18,720
adding and adding whereas if I do the

1462
01:04:15,719 --> 01:04:20,608
sort enduring right then I put things in

1463
01:04:18,719 --> 01:04:21,929
here I put things in here but then I

1464
01:04:20,608 --> 01:04:23,130
need to come back here and maybe put

1465
01:04:21,929 --> 01:04:24,599
thing in here and move that

1466
01:04:23,130 --> 01:04:25,800
thing over here and then I need to put

1467
01:04:24,599 --> 01:04:28,440
this thing here and move that over here

1468
01:04:25,800 --> 01:04:30,330
or I need to put in like pointers and

1469
01:04:28,440 --> 01:04:32,849
change the pointers just out of those

1470
01:04:30,329 --> 01:04:35,909
things right so I'm constantly touching

1471
01:04:32,849 --> 01:04:37,769
all sorts of stuff in here and what that

1472
01:04:35,909 --> 01:04:39,299
means is everywhere and there is always

1473
01:04:37,769 --> 01:04:42,150
getting pulled back into the cache and

1474
01:04:39,300 --> 01:04:43,620
it never gets flushed out right so we're

1475
01:04:42,150 --> 01:04:45,150
sorting after one of the nice things is

1476
01:04:43,619 --> 01:04:46,440
I just stream these things out and these

1477
01:04:45,150 --> 01:04:48,840
things could just fall out of the cache

1478
01:04:46,440 --> 01:04:51,450
and never get touched again until at the

1479
01:04:48,840 --> 01:04:54,180
very end when I go to draw from them

1480
01:04:51,449 --> 01:04:56,399
again right when I go to to actually do

1481
01:04:54,179 --> 01:04:58,099
the sort and then they all come in and

1482
01:04:56,400 --> 01:05:02,099
I'll stay in during the whole sort right

1483
01:04:58,099 --> 01:05:04,319
so you need to be careful it's deceptive

1484
01:05:02,099 --> 01:05:05,730
you may think that you're saving work

1485
01:05:04,320 --> 01:05:09,180
but you may actually be doing more work

1486
01:05:05,730 --> 01:05:13,260
right depending on how that cache stuff

1487
01:05:09,179 --> 01:05:14,699
ends up working out so I would say yeah

1488
01:05:13,260 --> 01:05:18,030
there's there's no reason not to

1489
01:05:14,699 --> 01:05:20,579
consider insertion sorting as you go

1490
01:05:18,030 --> 01:05:23,400
maybe it does repair for you but it's

1491
01:05:20,579 --> 01:05:26,219
it's tricky don't think that it's a win

1492
01:05:23,400 --> 01:05:27,570
without actually testing it and seeing

1493
01:05:26,219 --> 01:05:32,819
if it's a win because oftentimes it can

1494
01:05:27,570 --> 01:05:34,200
actually be a lose the lag script have

1495
01:05:32,820 --> 01:05:36,150
you ever made something of this sort of

1496
01:05:34,199 --> 01:05:37,439
project before when you streamed you

1497
01:05:36,150 --> 01:05:39,269
just do everything as you go sort of

1498
01:05:37,440 --> 01:05:40,980
improv coding or do you do stuff off

1499
01:05:39,269 --> 01:05:43,079
stream to repair what you're actually in

1500
01:05:40,980 --> 01:05:44,519
a codon stream I do know preparation on

1501
01:05:43,079 --> 01:05:46,650
the stream and the reason for that is

1502
01:05:44,519 --> 01:05:48,780
I'm sorry I do never know preparation

1503
01:05:46,650 --> 01:05:50,220
off stream the reason for that is

1504
01:05:48,780 --> 01:05:51,480
because the point of this product is to

1505
01:05:50,219 --> 01:05:53,909
show how you work through programming

1506
01:05:51,480 --> 01:05:55,409
problems and so the idea is that I have

1507
01:05:53,909 --> 01:05:56,909
to face the programming problems cold

1508
01:05:55,409 --> 01:05:58,109
and you see how I would work through

1509
01:05:56,909 --> 01:06:00,029
them as if I was actually working

1510
01:05:58,110 --> 01:06:02,220
through them when I actually go to work

1511
01:06:00,030 --> 01:06:03,810
every day at my normal job have I done

1512
01:06:02,219 --> 01:06:05,009
this sort of thing before not this exact

1513
01:06:03,809 --> 01:06:06,480
kind of project but obviously I've done

1514
01:06:05,010 --> 01:06:08,130
a lot of gang code before so it's not

1515
01:06:06,480 --> 01:06:09,510
fair to say that I've never done

1516
01:06:08,130 --> 01:06:11,039
anything like this before obviously I've

1517
01:06:09,510 --> 01:06:12,750
had a lot of practice doing similar

1518
01:06:11,039 --> 01:06:14,820
sorts of things but I've never done a

1519
01:06:12,750 --> 01:06:17,280
game exactly like this game I've never

1520
01:06:14,820 --> 01:06:19,260
even done a two and a half D Zelda

1521
01:06:17,280 --> 01:06:20,580
exploration kind of game so I've never

1522
01:06:19,260 --> 01:06:23,010
even worked on that kind game before so

1523
01:06:20,579 --> 01:06:24,239
maybe it's fair to say that a lot of the

1524
01:06:23,010 --> 01:06:26,070
things that we're doing on here I am

1525
01:06:24,239 --> 01:06:28,589
seeing for the first time and tackling

1526
01:06:26,070 --> 01:06:31,200
for the first time it's just yeah is it

1527
01:06:28,590 --> 01:06:34,079
really you know I've had tons of

1528
01:06:31,199 --> 01:06:36,269
experience doing game code and game

1529
01:06:34,079 --> 01:06:36,900
style programming before so I definitely

1530
01:06:36,269 --> 01:06:38,219
have a lot

1531
01:06:36,900 --> 01:06:39,990
advantage there and there's a fair

1532
01:06:38,219 --> 01:06:41,879
number of things I just go I know how to

1533
01:06:39,989 --> 01:06:43,559
do this already so there's that but I

1534
01:06:41,880 --> 01:06:46,200
try to keep it fairly fresh and I try to

1535
01:06:43,559 --> 01:06:48,239
tackle like I said this this this game

1536
01:06:46,199 --> 01:06:50,000
itself is not one like I've done before

1537
01:06:48,239 --> 01:06:53,339
or anything like that

1538
01:06:50,000 --> 01:06:55,320
and so so you are going to see me work

1539
01:06:53,340 --> 01:06:58,050
through things the first time for some

1540
01:06:55,320 --> 01:07:02,180
certain segments of the code it's my

1541
01:06:58,050 --> 01:07:02,180
first time doing it that way

1542
01:07:06,619 --> 01:07:10,619
see Flixter are we going to rage

1543
01:07:08,730 --> 01:07:14,039
homograph straight stream tomorrow night

1544
01:07:10,619 --> 01:07:15,719
after this one I is that the worries

1545
01:07:14,039 --> 01:07:18,529
going to quaternions I don't know if so

1546
01:07:15,719 --> 01:07:18,529
we probably should

1547
01:07:31,300 --> 01:07:37,880
/ h / HC or / AC how do you disable

1548
01:07:36,079 --> 01:07:40,480
syntax highlighting and Emacs while

1549
01:07:37,880 --> 01:07:42,588
keeping comment and macro highlighted oh

1550
01:07:40,480 --> 01:07:46,039
well that's not actually what's

1551
01:07:42,588 --> 01:07:47,239
happening I just I just it's it's still

1552
01:07:46,039 --> 01:07:48,558
doing syntax highlighting right you can

1553
01:07:47,239 --> 01:07:51,439
see that these are like different colors

1554
01:07:48,559 --> 01:07:54,200
from that or whatever I just don't like

1555
01:07:51,440 --> 01:07:55,970
a lot of busyness with the colors I

1556
01:07:54,199 --> 01:08:00,379
don't like a lot of syntax highlighting

1557
01:07:55,969 --> 01:08:06,949
and so that's actually just in my Emacs

1558
01:08:00,380 --> 01:08:09,800
file oops that's not it yes max there it

1559
01:08:06,949 --> 01:08:11,088
is in the Emacs file and this if you

1560
01:08:09,800 --> 01:08:12,950
pre-ordered the game you've got a copy

1561
01:08:11,088 --> 01:08:16,969
of this it's in the project directory

1562
01:08:12,949 --> 01:08:19,130
under misc kind of see here that I do a

1563
01:08:16,969 --> 01:08:22,338
bunch of set face attributes these sort

1564
01:08:19,130 --> 01:08:24,259
of things I think it's this stuff right

1565
01:08:22,338 --> 01:08:26,448
here I don't know you list hardly at all

1566
01:08:24,259 --> 01:08:28,939
so but you can kind of see here where I

1567
01:08:26,448 --> 01:08:30,738
like set colors of stuff so sometimes

1568
01:08:28,939 --> 01:08:33,500
what I'll do is I'll just set like you

1569
01:08:30,738 --> 01:08:35,988
notice strings and constants I just set

1570
01:08:33,500 --> 01:08:38,088
them to the same color and stuff or

1571
01:08:35,988 --> 01:08:39,948
types and variables are set to the same

1572
01:08:38,088 --> 01:08:41,059
color so it looks like there's that I'm

1573
01:08:39,948 --> 01:08:42,678
turning some of it off but I'm not

1574
01:08:41,060 --> 01:08:44,539
really it's still all on I just assign

1575
01:08:42,679 --> 01:08:45,798
the same colors to a bunch of different

1576
01:08:44,539 --> 01:08:51,259
things because I don't like too much

1577
01:08:45,798 --> 01:08:53,028
busyness the lag strip is your visual

1578
01:08:51,259 --> 01:08:54,890
studio custom theme anywhere I really

1579
01:08:53,029 --> 01:08:58,420
like it it's just the dark it's the

1580
01:08:54,890 --> 01:09:02,989
default dark theme is really all it is

1581
01:08:58,420 --> 01:09:05,298
and then I think I just set oh you know

1582
01:09:02,988 --> 01:09:06,528
what though I think it is if you again

1583
01:09:05,298 --> 01:09:09,079
if you pre-order the game I think it's

1584
01:09:06,529 --> 01:09:11,600
in there yeah it is it's handmade hero

1585
01:09:09,079 --> 01:09:15,318
settings MSV c 2013 BS settings it's

1586
01:09:11,600 --> 01:09:16,789
actually in the misc directory of

1587
01:09:15,319 --> 01:09:19,179
handmade hero so it's actually in the

1588
01:09:16,789 --> 01:09:19,179
project

1589
01:09:53,960 --> 01:09:59,949
alright looks like we're done with

1590
01:09:56,359 --> 01:10:03,500
questions so I think I will wrap it up

1591
01:09:59,949 --> 01:10:04,909
alright thank you everyone for joining

1592
01:10:03,500 --> 01:10:05,840
me for another episode of hand made here

1593
01:10:04,909 --> 01:10:07,550
at some pleasure coding with you as

1594
01:10:05,840 --> 01:10:09,140
always it's nice to have sorting in our

1595
01:10:07,550 --> 01:10:11,150
renderer now our stuff shows up in the

1596
01:10:09,140 --> 01:10:12,410
right order so tomorrow I think what

1597
01:10:11,149 --> 01:10:14,389
we'll do is we'll go look at that sort

1598
01:10:12,409 --> 01:10:16,970
key stuff in more detail before we talk

1599
01:10:14,390 --> 01:10:19,220
about sorting more more efficient

1600
01:10:16,970 --> 01:10:22,159
sorting potentially what we want to do

1601
01:10:19,220 --> 01:10:24,140
is go take a look at how we compute our

1602
01:10:22,159 --> 01:10:26,479
sort keys so that we can get all of our

1603
01:10:24,140 --> 01:10:27,829
stuff set up and like for the ground

1604
01:10:26,479 --> 01:10:29,419
chunks is like that so that everything

1605
01:10:27,829 --> 01:10:30,920
is like biased properly and more things

1606
01:10:29,420 --> 01:10:32,300
like that so we've got a bunch of work

1607
01:10:30,920 --> 01:10:33,800
to do there so we'll tackle out tomorrow

1608
01:10:32,300 --> 01:10:35,930
and then Wednesday we'll talk more about

1609
01:10:33,800 --> 01:10:37,760
sorting and look at a little bit more in

1610
01:10:35,930 --> 01:10:39,310
depth about you know again I showed you

1611
01:10:37,760 --> 01:10:41,989
how to do the simplest possible sort

1612
01:10:39,310 --> 01:10:43,460
we'll talk about how to do more complex

1613
01:10:41,989 --> 01:10:46,219
sorts and probably implement one of them

1614
01:10:43,460 --> 01:10:47,480
so you can see the difference and with a

1615
01:10:46,220 --> 01:10:49,430
number of items were sorting right now

1616
01:10:47,479 --> 01:10:50,719
you probably won't be able to tell the

1617
01:10:49,430 --> 01:10:52,789
difference in runtime because it's just

1618
01:10:50,720 --> 01:10:54,890
not that much time spent in the sort but

1619
01:10:52,789 --> 01:10:56,510
it's worth understanding for what you

1620
01:10:54,890 --> 01:10:58,100
need to sort bigger things and we will

1621
01:10:56,510 --> 01:11:00,500
have to sort more items as we get more

1622
01:10:58,100 --> 01:11:01,730
entities in the game obviously when we

1623
01:11:00,500 --> 01:11:04,810
have more stuff on the screen that's

1624
01:11:01,729 --> 01:11:07,669
that's gonna incur bigger cost all right

1625
01:11:04,810 --> 01:11:09,020
again thanks very much for joining me if

1626
01:11:07,670 --> 01:11:11,480
you would like to follow along at home

1627
01:11:09,020 --> 01:11:13,550
you can always do so by pre-ordering the

1628
01:11:11,479 --> 01:11:14,989
game at handmade hero Network it comes

1629
01:11:13,550 --> 01:11:17,119
with a source code so you can actually

1630
01:11:14,989 --> 01:11:18,889
follow along with what we're doing at

1631
01:11:17,119 --> 01:11:20,569
home if you'd like to and so that's

1632
01:11:18,890 --> 01:11:22,490
pretty fun way to do that we also have a

1633
01:11:20,569 --> 01:11:25,309
forum site which actually is soon to get

1634
01:11:22,489 --> 01:11:26,719
a pretty big upgrade thanks to the guys

1635
01:11:25,310 --> 01:11:31,010
at handmade devs we've been working

1636
01:11:26,720 --> 01:11:33,980
pretty darn hard on getting a real home

1637
01:11:31,010 --> 01:11:35,539
for for projects like handmade hero that

1638
01:11:33,979 --> 01:11:39,349
can have a good forums that can have a

1639
01:11:35,539 --> 01:11:41,300
good like source distribution and stuff

1640
01:11:39,350 --> 01:11:43,820
like that and pretty excited to see what

1641
01:11:41,300 --> 01:11:45,890
they're doing they said that they'll be

1642
01:11:43,819 --> 01:11:47,840
releasing that sometime early this year

1643
01:11:45,890 --> 01:11:49,250
I think so we shouldn't have to wait too

1644
01:11:47,840 --> 01:11:50,360
much longer so that's a big deal for

1645
01:11:49,250 --> 01:11:52,789
right now you could still go to the

1646
01:11:50,359 --> 01:11:55,819
janky version of the forums it's using

1647
01:11:52,789 --> 01:11:57,109
Joomla that's awful but if you want to

1648
01:11:55,819 --> 01:11:57,409
ask questions that's still the place to

1649
01:11:57,109 --> 01:11:59,299
do it

1650
01:11:57,409 --> 01:12:02,659
but coming soon pretty excited about

1651
01:11:59,300 --> 01:12:04,400
that and and yeah really looking forward

1652
01:12:02,659 --> 01:12:05,960
to that we also have patreon page you

1653
01:12:04,399 --> 01:12:07,279
want to support this video series if you

1654
01:12:05,960 --> 01:12:07,730
like what you saw you can subscribe to

1655
01:12:07,279 --> 01:12:09,109
that it's

1656
01:12:07,729 --> 01:12:10,129
is very much appreciated we also have a

1657
01:12:09,109 --> 01:12:11,529
tweet bot that tells you what the

1658
01:12:10,130 --> 01:12:13,940
schedule is if you want to catch it live

1659
01:12:11,529 --> 01:12:15,289
check the tweet bot it always says when

1660
01:12:13,939 --> 01:12:16,639
it's gonna be live and speaking of when

1661
01:12:15,289 --> 01:12:20,800
is going to be live we will be back here

1662
01:12:16,640 --> 01:12:23,510
tomorrow 5:00 p.m. Pacific Standard Time

1663
01:12:20,800 --> 01:12:24,829
to talk more about the sort key stuff

1664
01:12:23,510 --> 01:12:27,680
like I said so hope to see you back here

1665
01:12:24,829 --> 01:12:29,059
for that until then have fun programming

1666
01:12:27,680 --> 01:12:31,869
and I'll see you guys on the Internet

1667
01:12:29,060 --> 01:12:31,870
take and use everyone

