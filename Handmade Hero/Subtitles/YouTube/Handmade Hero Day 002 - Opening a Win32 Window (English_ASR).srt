1
00:00:00,000 --> 00:00:07,500
word button and off we go okay hello

2
00:00:04,859 --> 00:00:11,240
everyone and welcome to day two of the

3
00:00:07,500 --> 00:00:14,669
handmade Hiro coding sessions yesterday

4
00:00:11,240 --> 00:00:16,710
last night we learned how to basically

5
00:00:14,669 --> 00:00:18,929
set up a dev environment so not terribly

6
00:00:16,710 --> 00:00:21,960
exciting stuff but stuff that has to

7
00:00:18,929 --> 00:00:23,429
actually happen and basically what we

8
00:00:21,960 --> 00:00:25,800
did is we configure this command prompt

9
00:00:23,429 --> 00:00:27,448
and we got it to the point where we

10
00:00:25,800 --> 00:00:31,080
could launch our own editor which in

11
00:00:27,449 --> 00:00:32,520
this case I am using Emacs but you can

12
00:00:31,079 --> 00:00:33,899
use whatever you want to although the

13
00:00:32,520 --> 00:00:36,510
Emacs file is included in the source

14
00:00:33,899 --> 00:00:39,840
distribution if you would like to to try

15
00:00:36,509 --> 00:00:42,179
it we started by making a little simple

16
00:00:39,840 --> 00:00:44,309
win32 application here that just starts

17
00:00:42,179 --> 00:00:47,100
up and launches a message box we made

18
00:00:44,308 --> 00:00:48,689
the make file for it quote unquote which

19
00:00:47,100 --> 00:00:51,359
is basically just a batch file that I

20
00:00:48,689 --> 00:00:53,729
wrote which compiles something directly

21
00:00:51,359 --> 00:00:57,269
into a build directory where we can run

22
00:00:53,729 --> 00:01:00,529
it and we learned how to launch the

23
00:00:57,270 --> 00:01:03,030
debugger which is Visual Studio

24
00:01:00,530 --> 00:01:05,219
community 2013 if you have not already

25
00:01:03,030 --> 00:01:08,129
downloaded it and we can do stuff like

26
00:01:05,219 --> 00:01:11,219
step into our code and watch it run this

27
00:01:08,129 --> 00:01:13,048
is handmade hero but a message box is

28
00:01:11,219 --> 00:01:15,150
not a particularly useful thing for a

29
00:01:13,049 --> 00:01:16,890
game to pop up in fact if you have seen

30
00:01:15,150 --> 00:01:19,020
one pop-up in a game it usually means

31
00:01:16,890 --> 00:01:22,019
that the game has encountered a very

32
00:01:19,019 --> 00:01:24,239
serious error of some kind so what we

33
00:01:22,019 --> 00:01:26,368
are going to do tonight is try to open a

34
00:01:24,239 --> 00:01:29,938
window that is a little more useful and

35
00:01:26,368 --> 00:01:31,950
what that kind of window is is we are

36
00:01:29,938 --> 00:01:34,769
going to open basically just a standard

37
00:01:31,950 --> 00:01:36,030
windows window because pretty much any

38
00:01:34,769 --> 00:01:37,739
window that you're going to open in

39
00:01:36,030 --> 00:01:40,710
Windows goes through the same sort of

40
00:01:37,739 --> 00:01:42,239
path for opening it but then what we are

41
00:01:40,709 --> 00:01:45,209
going to do is we're going to create a

42
00:01:42,239 --> 00:01:47,609
special essentially buffer in memory

43
00:01:45,209 --> 00:01:49,289
that we can write in to ourselves and do

44
00:01:47,609 --> 00:01:50,909
all of our rendering into ourselves and

45
00:01:49,290 --> 00:01:53,610
then we are going to show how to display

46
00:01:50,909 --> 00:01:56,368
that buffer in the window now this is

47
00:01:53,609 --> 00:01:58,140
not exactly how a modern game would

48
00:01:56,368 --> 00:02:00,180
usually start up because modern games

49
00:01:58,140 --> 00:02:03,210
often times or pretty much at this point

50
00:02:00,180 --> 00:02:05,368
exclusively let the graphics card do all

51
00:02:03,209 --> 00:02:07,228
the rendering for them and while that is

52
00:02:05,368 --> 00:02:08,699
an interesting thing to do and something

53
00:02:07,228 --> 00:02:10,050
that we will probably explore at the end

54
00:02:08,699 --> 00:02:11,729
of the series when we are strictly

55
00:02:10,050 --> 00:02:13,050
looking at performance optimizations and

56
00:02:11,729 --> 00:02:13,590
we want to do things like play around

57
00:02:13,050 --> 00:02:15,180
with out

58
00:02:13,590 --> 00:02:17,219
that extra power that the GPU gives us

59
00:02:15,180 --> 00:02:19,560
it is not particularly good for

60
00:02:17,219 --> 00:02:21,810
educational purposes because the GPU is

61
00:02:19,560 --> 00:02:23,489
basically an opaque resource where we

62
00:02:21,810 --> 00:02:26,069
have very limited insight into what is

63
00:02:23,489 --> 00:02:27,780
actually doing to render the graphics

64
00:02:26,068 --> 00:02:30,030
for our game in fact a lot of the stuff

65
00:02:27,780 --> 00:02:32,219
is just flat-out trade secrets that we

66
00:02:30,030 --> 00:02:34,799
can't even know Nvidia won't tell us or

67
00:02:32,219 --> 00:02:36,719
AMD won't tell us how the card is even

68
00:02:34,799 --> 00:02:39,450
actually working unless we work there

69
00:02:36,719 --> 00:02:41,789
and so that is the opposite of good for

70
00:02:39,449 --> 00:02:43,229
education maybe good for competition in

71
00:02:41,789 --> 00:02:44,669
the industry but not so good for

72
00:02:43,229 --> 00:02:45,780
education so what we are going to do is

73
00:02:44,669 --> 00:02:48,268
we're going to write the entire renderer

74
00:02:45,780 --> 00:02:50,400
ourselves and in order to do that we

75
00:02:48,269 --> 00:02:52,319
need a way to display something that we

76
00:02:50,400 --> 00:02:55,170
have created rather than something that

77
00:02:52,318 --> 00:02:56,219
is created on the graphics card okay so

78
00:02:55,169 --> 00:02:58,708
we'll get to that part a little bit

79
00:02:56,219 --> 00:03:00,930
later but for now the majority of our

80
00:02:58,709 --> 00:03:06,120
work is just going to be how do we open

81
00:03:00,930 --> 00:03:08,280
a windows window at all and even dating

82
00:03:06,120 --> 00:03:10,560
back to the very very early days of

83
00:03:08,280 --> 00:03:12,360
Windows the way that you have to start

84
00:03:10,560 --> 00:03:14,280
out to open a windows is there's a thing

85
00:03:12,360 --> 00:03:15,569
called a wind clasp and if you remember

86
00:03:14,280 --> 00:03:18,599
from last time I said you have to get

87
00:03:15,568 --> 00:03:20,638
very comfortable with using MSDN we are

88
00:03:18,599 --> 00:03:22,620
going to search for wind clasp and you

89
00:03:20,639 --> 00:03:26,069
will see that MSDN comes up as the first

90
00:03:22,620 --> 00:03:29,310
hit and it has the definition of a wind

91
00:03:26,068 --> 00:03:31,379
clasp and you know what I still don't

92
00:03:29,310 --> 00:03:33,598
want to help MSDN improve right now I'm

93
00:03:31,379 --> 00:03:36,689
on a live stream I cannot take the time

94
00:03:33,598 --> 00:03:39,810
to do that I'm sorry so looking inside

95
00:03:36,689 --> 00:03:42,269
the MSDN for wind class you can see that

96
00:03:39,810 --> 00:03:43,919
it is a struct a good old sea structure

97
00:03:42,269 --> 00:03:45,359
but it's got a little extra decoration

98
00:03:43,919 --> 00:03:46,769
on it and I'm going to take a quick

99
00:03:45,359 --> 00:03:49,620
second to explain what that is since we

100
00:03:46,769 --> 00:03:52,230
will see it in all of these trucks that

101
00:03:49,620 --> 00:03:54,239
we look up in MSDN so I want to cut

102
00:03:52,229 --> 00:03:56,129
paste it in here and you can see that

103
00:03:54,239 --> 00:03:57,629
instead of just a struct like this is

104
00:03:56,129 --> 00:03:59,638
the Declaration of the struct right here

105
00:03:57,629 --> 00:04:01,318
I actually cut it out there is the

106
00:03:59,639 --> 00:04:02,400
struct right that's the actual structure

107
00:04:01,318 --> 00:04:04,379
and if you remember from the intro

108
00:04:02,400 --> 00:04:06,239
stream or if you're familiar with other

109
00:04:04,379 --> 00:04:07,620
computer programming languages a struct

110
00:04:06,239 --> 00:04:10,560
is basically just a record it's a

111
00:04:07,620 --> 00:04:12,419
collection of variables that go together

112
00:04:10,560 --> 00:04:14,129
and when you refer to one you're

113
00:04:12,419 --> 00:04:17,418
referring to basically a memory layout

114
00:04:14,129 --> 00:04:21,060
where each of these individual things is

115
00:04:17,418 --> 00:04:23,430
sequentially ordered and usually stored

116
00:04:21,060 --> 00:04:25,949
back-to-back but as we saw on the

117
00:04:23,430 --> 00:04:26,379
interest ream depending on the sizes of

118
00:04:25,949 --> 00:04:28,629
the

119
00:04:26,379 --> 00:04:30,879
things that are in that struct they may

120
00:04:28,629 --> 00:04:32,949
actually have padding in between them to

121
00:04:30,879 --> 00:04:34,389
maintain what's called alignment and we

122
00:04:32,949 --> 00:04:35,979
will be getting to alignment actually

123
00:04:34,389 --> 00:04:37,449
potentially even later in the stream but

124
00:04:35,980 --> 00:04:38,620
certainly tomorrow if not so I'm not

125
00:04:37,449 --> 00:04:41,079
going to talk too much about alignment

126
00:04:38,620 --> 00:04:42,610
right now but point being this is the

127
00:04:41,079 --> 00:04:44,229
wind class struck and you will notice

128
00:04:42,610 --> 00:04:46,270
that instead of being called wind class

129
00:04:44,230 --> 00:04:48,550
which would look like this it is

130
00:04:46,269 --> 00:04:49,719
actually called tag wind class and you

131
00:04:48,550 --> 00:04:52,600
might wonder why that is

132
00:04:49,720 --> 00:04:55,960
well the reason is because the windows

133
00:04:52,600 --> 00:04:58,720
headers are trying to support basically

134
00:04:55,959 --> 00:05:00,639
I want to say that they're trying to

135
00:04:58,720 --> 00:05:02,560
support older versions of compliers I

136
00:05:00,639 --> 00:05:03,729
guess because I don't think any current

137
00:05:02,560 --> 00:05:05,649
versions of guitars have this problem

138
00:05:03,730 --> 00:05:06,879
but it may also be because they've got

139
00:05:05,649 --> 00:05:08,649
some kind of system that they're trying

140
00:05:06,879 --> 00:05:10,209
to maintain or something like this but

141
00:05:08,649 --> 00:05:12,089
basically what they want to do is they

142
00:05:10,209 --> 00:05:15,129
want to support both C and C++

143
00:05:12,089 --> 00:05:17,349
compilation now what happens in C++ is

144
00:05:15,129 --> 00:05:19,509
that if you declare something struct foo

145
00:05:17,350 --> 00:05:21,070
you can then immediately start using

146
00:05:19,509 --> 00:05:22,930
food to refer to things of that

147
00:05:21,069 --> 00:05:25,480
structure so if I do this and then I say

148
00:05:22,930 --> 00:05:28,329
that I have one of these Foos

149
00:05:25,480 --> 00:05:30,790
I basically use the word foo as if it's

150
00:05:28,329 --> 00:05:32,349
just unannounced it's just a foo you

151
00:05:30,790 --> 00:05:34,990
know what it is it's one of these struck

152
00:05:32,350 --> 00:05:41,560
slight totally clear no ambiguity about

153
00:05:34,990 --> 00:05:45,040
that but in C that was not true in

154
00:05:41,560 --> 00:05:47,680
original C you could not use foo as a

155
00:05:45,040 --> 00:05:49,629
word because it did not actually look up

156
00:05:47,680 --> 00:05:51,400
the names of types when you did not

157
00:05:49,629 --> 00:05:54,189
decorate them what you had to do is you

158
00:05:51,399 --> 00:05:57,569
had to type struct foo right so that is

159
00:05:54,189 --> 00:06:00,790
how you would have declared a individual

160
00:05:57,569 --> 00:06:02,529
an individual one of these Foos

161
00:06:00,790 --> 00:06:04,750
TARDIS that's how you declare an

162
00:06:02,529 --> 00:06:07,000
individual foo is you would have to

163
00:06:04,750 --> 00:06:08,800
preface it with struct now as C++ came

164
00:06:07,000 --> 00:06:11,379
along they got rid of that but if you

165
00:06:08,800 --> 00:06:12,400
are still compiling with C mode or

166
00:06:11,379 --> 00:06:13,750
something like that they wanted to

167
00:06:12,399 --> 00:06:15,549
support that with the windows header so

168
00:06:13,750 --> 00:06:17,860
what they use is they use a thing called

169
00:06:15,550 --> 00:06:20,379
a type def now a type def is just a way

170
00:06:17,860 --> 00:06:22,750
of specifying a new name for some

171
00:06:20,379 --> 00:06:25,089
existing type that can be specified so

172
00:06:22,750 --> 00:06:27,069
for example if I wanted to make this

173
00:06:25,089 --> 00:06:29,379
work which I had before I wanted to make

174
00:06:27,069 --> 00:06:31,990
it so that I could type foo foo in C

175
00:06:29,379 --> 00:06:34,930
well what I can do is I can say type def

176
00:06:31,990 --> 00:06:36,189
foo - foo and basically what it does is

177
00:06:34,930 --> 00:06:37,600
you're basically doing what is

178
00:06:36,189 --> 00:06:39,379
essentially a variable declaration it

179
00:06:37,600 --> 00:06:40,820
looks basically the same as a variable

180
00:06:39,379 --> 00:06:42,649
you can even decorate it like a variable

181
00:06:40,819 --> 00:06:44,659
declaration with Ray bounds or a point

182
00:06:42,649 --> 00:06:46,639
or anything but basically we'll do is

183
00:06:44,660 --> 00:06:48,950
it'll take the name and that name will

184
00:06:46,639 --> 00:06:50,689
now refer to a type that is whatever the

185
00:06:48,949 --> 00:06:53,029
type def was whatever the type death

186
00:06:50,689 --> 00:06:56,120
says it was so if it's a food star then

187
00:06:53,029 --> 00:06:58,159
capital foo you know what that is

188
00:06:56,120 --> 00:07:00,230
actually what I meant to type sorry if

189
00:06:58,160 --> 00:07:01,939
it is a struct foo pointer then

190
00:07:00,230 --> 00:07:03,410
lowercase foo will now refer to a

191
00:07:01,939 --> 00:07:04,879
pointer to foo and perhaps we should

192
00:07:03,410 --> 00:07:06,710
even call that a P foo or something so

193
00:07:04,879 --> 00:07:08,779
you can tell its point of view if I just

194
00:07:06,709 --> 00:07:11,870
say struct foo foo then this basically

195
00:07:08,779 --> 00:07:13,309
emulates what C++ is doing C++ is

196
00:07:11,870 --> 00:07:15,259
automatically doing this so that we

197
00:07:13,310 --> 00:07:18,350
never actually at the type struct foo we

198
00:07:15,259 --> 00:07:20,930
just type lowercase foo and we get a

199
00:07:18,350 --> 00:07:22,760
struct view in its place right so what

200
00:07:20,930 --> 00:07:24,530
the windows headers are doing is they

201
00:07:22,759 --> 00:07:27,800
have decided to basically compress all

202
00:07:24,529 --> 00:07:29,809
of that into one very concise definition

203
00:07:27,800 --> 00:07:32,840
which is they're saying type def struct

204
00:07:29,810 --> 00:07:34,610
tag win class and then at the end of it

205
00:07:32,839 --> 00:07:36,529
after they declare the structure the

206
00:07:34,610 --> 00:07:37,759
type def write this is the type of the

207
00:07:36,529 --> 00:07:39,139
type def they just put the struct

208
00:07:37,759 --> 00:07:41,420
definition to write inline which are

209
00:07:39,139 --> 00:07:43,579
allowed to do the type def then declares

210
00:07:41,420 --> 00:07:46,250
two different types which you can do

211
00:07:43,579 --> 00:07:48,709
with the comma it is basically saying

212
00:07:46,250 --> 00:07:52,069
one type is wind class and the other

213
00:07:48,709 --> 00:07:53,269
type is a pointer to a wind class and

214
00:07:52,069 --> 00:07:55,250
they're going to call that P wind class

215
00:07:53,269 --> 00:07:59,299
so this essentially creates two names

216
00:07:55,250 --> 00:08:02,089
wind class which refers to struct tag

217
00:07:59,300 --> 00:08:05,420
wind class and it creates P wind class

218
00:08:02,089 --> 00:08:08,779
which refers to struct tag wind class

219
00:08:05,420 --> 00:08:10,490
star very simple but that's just to

220
00:08:08,779 --> 00:08:12,799
understand what you are seeing that is

221
00:08:10,490 --> 00:08:14,180
what is going on and that's really all

222
00:08:12,800 --> 00:08:16,400
there is to it now it's worth noting

223
00:08:14,180 --> 00:08:18,980
that I believe there is no reason you

224
00:08:16,399 --> 00:08:20,509
even need to name this truck you could

225
00:08:18,980 --> 00:08:22,790
if you wanted to just get rid of the

226
00:08:20,509 --> 00:08:25,219
name altogether and from now on refer to

227
00:08:22,790 --> 00:08:26,930
the pointers as this and wind class as

228
00:08:25,220 --> 00:08:29,150
the actual struct and you would be fine

229
00:08:26,930 --> 00:08:31,100
so like I said why they put the tag wind

230
00:08:29,149 --> 00:08:32,840
class in there I don't know it may be

231
00:08:31,100 --> 00:08:34,340
some historical reason it may be to

232
00:08:32,840 --> 00:08:35,629
support some kind of compiler thing they

233
00:08:34,340 --> 00:08:37,460
need to do I do not know

234
00:08:35,629 --> 00:08:39,469
I've never looked into it but this would

235
00:08:37,460 --> 00:08:41,780
be the more concise way of doing what

236
00:08:39,469 --> 00:08:44,210
they did which I believe works on all

237
00:08:41,779 --> 00:08:48,110
modern compilers now but you know maybe

238
00:08:44,210 --> 00:08:50,750
maybe in the old days it didn't who

239
00:08:48,110 --> 00:08:52,810
knows we will certainly not go

240
00:08:50,750 --> 00:08:56,870
spelunking to find out but

241
00:08:52,809 --> 00:08:58,729
point is we now have our wind class type

242
00:08:56,870 --> 00:09:00,710
that we want to define here and what we

243
00:08:58,730 --> 00:09:01,820
are going to do is we are going to

244
00:09:00,710 --> 00:09:02,930
define one of these wind class

245
00:09:01,820 --> 00:09:05,420
structures and basically what they are

246
00:09:02,929 --> 00:09:07,189
is in the win32 API this pattern happens

247
00:09:05,419 --> 00:09:09,620
a lot what they do is they create a

248
00:09:07,190 --> 00:09:10,970
struct and the struct is essentially

249
00:09:09,620 --> 00:09:12,740
just the parameters to a function that

250
00:09:10,970 --> 00:09:16,300
you're calling the structure is just a

251
00:09:12,740 --> 00:09:18,500
way for you to fill out a set of of

252
00:09:16,299 --> 00:09:20,479
informational variables that you will

253
00:09:18,500 --> 00:09:22,759
then use when you call a function to

254
00:09:20,480 --> 00:09:24,529
have that function sort of do things

255
00:09:22,759 --> 00:09:26,689
with all of the settings and I think

256
00:09:24,529 --> 00:09:28,250
they did it mostly I don't know if it

257
00:09:26,690 --> 00:09:29,450
was for efficiency or if it was because

258
00:09:28,250 --> 00:09:32,750
they just didn't wanted to make it

259
00:09:29,450 --> 00:09:33,740
easier for you to fill things in but

260
00:09:32,750 --> 00:09:35,240
basically what we were going to do is

261
00:09:33,740 --> 00:09:38,029
we're going to fill in the members of

262
00:09:35,240 --> 00:09:41,299
this with the values that we want for

263
00:09:38,029 --> 00:09:43,879
our window so we are going to define our

264
00:09:41,299 --> 00:09:46,699
window class here and because I'm not

265
00:09:43,879 --> 00:09:48,889
going to want to set all of the actual

266
00:09:46,700 --> 00:09:51,320
values here I am going to use a

267
00:09:48,889 --> 00:09:53,569
initializer in C which we did not cover

268
00:09:51,320 --> 00:09:55,940
in the interest REME what that is is

269
00:09:53,570 --> 00:09:57,500
when you define a variable and I did

270
00:09:55,940 --> 00:09:59,000
show you could do things like this in

271
00:09:57,500 --> 00:10:02,299
the interest ream when you had a simple

272
00:09:59,000 --> 00:10:03,679
a simple thing like if I had an int I

273
00:10:02,299 --> 00:10:05,839
could initialize this way but what I did

274
00:10:03,679 --> 00:10:08,029
not show is a struct a struct has lots

275
00:10:05,840 --> 00:10:10,700
of value so you cannot simply say equals

276
00:10:08,029 --> 00:10:12,169
5 it wouldn't mean anything what you can

277
00:10:10,700 --> 00:10:14,150
do however is do

278
00:10:12,169 --> 00:10:15,889
BRAC you know open in close braces and

279
00:10:14,149 --> 00:10:17,899
then inside there you can actually

280
00:10:15,889 --> 00:10:19,759
initialize all of the values so I could

281
00:10:17,899 --> 00:10:21,529
put a condition my style here I can

282
00:10:19,759 --> 00:10:23,059
visualize hope you if wind proc here

283
00:10:21,529 --> 00:10:25,069
whatever these values were going to be

284
00:10:23,059 --> 00:10:26,599
right I could initialize them and I can

285
00:10:25,070 --> 00:10:30,710
visualize as many as I want and when I

286
00:10:26,600 --> 00:10:32,960
stop all of the values that follow will

287
00:10:30,710 --> 00:10:34,639
all be set to 0 automatically that's

288
00:10:32,960 --> 00:10:38,269
just the way that it's defined to work

289
00:10:34,639 --> 00:10:41,210
and see now spec has recently gone and

290
00:10:38,269 --> 00:10:43,909
done some crazy stuff with this it used

291
00:10:41,210 --> 00:10:45,860
to be that you could type this and that

292
00:10:43,909 --> 00:10:48,049
was the way that you said basically I

293
00:10:45,860 --> 00:10:50,029
want to initialize the first thing to 0

294
00:10:48,049 --> 00:10:51,649
and the rest should all be initialized

295
00:10:50,029 --> 00:10:53,269
to 0 as well and I think you still have

296
00:10:51,649 --> 00:10:56,059
to do that if you're programming in C

297
00:10:53,269 --> 00:10:57,860
but in C++ and again I'm not much of a

298
00:10:56,059 --> 00:11:00,229
spec person anymore I think the C++ spec

299
00:10:57,860 --> 00:11:02,720
is completely out of control but I

300
00:11:00,230 --> 00:11:05,420
believe nowadays the actual way to say

301
00:11:02,720 --> 00:11:06,200
I'm not going to initialize anything but

302
00:11:05,419 --> 00:11:08,509
I would like you to

303
00:11:06,200 --> 00:11:10,190
clear it all to zero for me is actually

304
00:11:08,509 --> 00:11:11,569
just to put nothing in there and if you

305
00:11:10,190 --> 00:11:14,240
put nothing in there then it basically

306
00:11:11,570 --> 00:11:16,129
takes the entire block of memory that it

307
00:11:14,240 --> 00:11:18,560
reserved on the stack for this window

308
00:11:16,129 --> 00:11:21,439
class and it sets it all to zero which

309
00:11:18,559 --> 00:11:24,529
is what I wanted so we are going to do

310
00:11:21,440 --> 00:11:26,810
that and again I can show you the

311
00:11:24,529 --> 00:11:29,299
compilation here we can go ahead in and

312
00:11:26,809 --> 00:11:30,619
I compile that right in the editor I

313
00:11:29,299 --> 00:11:33,679
should I should mention to those of you

314
00:11:30,620 --> 00:11:35,570
who are using my Emacs file alt M does

315
00:11:33,679 --> 00:11:37,879
the compile and basically what that does

316
00:11:35,570 --> 00:11:39,920
is it will search from the directory

317
00:11:37,879 --> 00:11:42,919
that you're in up directories until it

318
00:11:39,919 --> 00:11:44,569
finds a build dot bat one of my handy

319
00:11:42,919 --> 00:11:46,250
little build bat so it fine to build dot

320
00:11:44,570 --> 00:11:48,320
back it will run it so that is this F

321
00:11:46,250 --> 00:11:49,879
what we wanted in it bills are our thing

322
00:11:48,320 --> 00:11:52,340
for us automatically so I am going to

323
00:11:49,879 --> 00:11:54,919
run in here and you can see our window

324
00:11:52,340 --> 00:11:57,500
class and if I go in here and I look at

325
00:11:54,919 --> 00:12:00,049
the window class in the watch window we

326
00:11:57,500 --> 00:12:01,850
can see that it is garbage it is just a

327
00:12:00,049 --> 00:12:03,589
bunch of stuff it is not been

328
00:12:01,850 --> 00:12:05,180
initialized yet you can see there is you

329
00:12:03,590 --> 00:12:07,310
know all kinds of stuff in here that we

330
00:12:05,179 --> 00:12:09,829
you know would not certainly want to to

331
00:12:07,309 --> 00:12:11,629
pass to anything but when I step over

332
00:12:09,830 --> 00:12:13,430
this line you will notice that it clears

333
00:12:11,629 --> 00:12:18,919
absolutely everything to zero which is

334
00:12:13,429 --> 00:12:21,019
what I wanted so all good now you will

335
00:12:18,919 --> 00:12:23,689
see me do this a lot by the way if there

336
00:12:21,019 --> 00:12:27,620
is not a performance concern in the code

337
00:12:23,690 --> 00:12:30,530
that I'm working in I always use a thing

338
00:12:27,620 --> 00:12:32,299
that I call zero is initialization and

339
00:12:30,529 --> 00:12:33,649
we will see this come up a lot

340
00:12:32,299 --> 00:12:35,509
but basically what I like to be able to

341
00:12:33,649 --> 00:12:37,459
do is I like to be able to make it so

342
00:12:35,509 --> 00:12:39,620
there is essentially no initialization

343
00:12:37,460 --> 00:12:41,060
for most of my code most of it can just

344
00:12:39,620 --> 00:12:42,950
be cleared to zero and as long as the

345
00:12:41,059 --> 00:12:43,939
clear to 0 it will work when it goes

346
00:12:42,950 --> 00:12:45,530
forwards I know that sounds a little

347
00:12:43,940 --> 00:12:46,880
strange and it's very different from the

348
00:12:45,529 --> 00:12:48,259
C++ model where everything has a

349
00:12:46,879 --> 00:12:51,080
constructor and there's a lot of startup

350
00:12:48,259 --> 00:12:52,309
B stuff going on but I won't really get

351
00:12:51,080 --> 00:12:54,050
into how that all works because you'll

352
00:12:52,309 --> 00:12:54,949
be seeing how it all works but I just

353
00:12:54,049 --> 00:12:57,259
thought I'd point it out there because

354
00:12:54,950 --> 00:12:58,340
we will be using this a lot in a bunch

355
00:12:57,259 --> 00:12:59,569
of places so when there isn't a

356
00:12:58,340 --> 00:13:00,680
performance concern where I really got

357
00:12:59,570 --> 00:13:02,780
to be specific about how things are

358
00:13:00,679 --> 00:13:08,739
getting initialized oftentimes clear to

359
00:13:02,779 --> 00:13:11,620
zero is the way I'll go so off we go

360
00:13:08,740 --> 00:13:14,629
what are the fields that I want well

361
00:13:11,620 --> 00:13:16,610
there are a lot of fields in here and I

362
00:13:14,629 --> 00:13:19,730
am going to initialize only some of them

363
00:13:16,610 --> 00:13:22,100
the style is a set of binary

364
00:13:19,730 --> 00:13:24,019
flags a bit filled basically that are

365
00:13:22,100 --> 00:13:26,329
things that we want properties that we

366
00:13:24,019 --> 00:13:28,850
want our window to have the LPF and wind

367
00:13:26,328 --> 00:13:30,620
proc is a pointer to a function which

368
00:13:28,850 --> 00:13:32,540
we'll get to in a second so we're going

369
00:13:30,620 --> 00:13:33,980
to we're going to set that and that is

370
00:13:32,539 --> 00:13:36,110
basically a pointer to the function that

371
00:13:33,980 --> 00:13:40,278
we will define that defines how our

372
00:13:36,110 --> 00:13:43,278
window responds to events CBC LS extra

373
00:13:40,278 --> 00:13:44,600
is if we want to store extra bytes along

374
00:13:43,278 --> 00:13:46,639
with the window class based our own

375
00:13:44,600 --> 00:13:48,620
personal bytes we do not actually need

376
00:13:46,639 --> 00:13:50,629
to do that so we are not going to use it

377
00:13:48,620 --> 00:13:52,639
çb wind extra the same thing it is

378
00:13:50,629 --> 00:13:53,929
basically allowing you to create extra

379
00:13:52,639 --> 00:13:55,669
memory associated with your window that

380
00:13:53,929 --> 00:13:57,859
you can use for whatever you want each

381
00:13:55,669 --> 00:13:59,990
instance I believe we will have to set

382
00:13:57,860 --> 00:14:03,110
because basically it used to know what

383
00:13:59,990 --> 00:14:04,430
instance is setting setting the window I

384
00:14:03,110 --> 00:14:06,350
don't know if you can short-circuit that

385
00:14:04,429 --> 00:14:08,509
to zero and not bother studying it so

386
00:14:06,350 --> 00:14:09,350
I'm going to check MSDN handle the

387
00:14:08,509 --> 00:14:10,698
instance that contains a winner

388
00:14:09,350 --> 00:14:13,220
procedure for the class looks like we

389
00:14:10,698 --> 00:14:14,719
probably do there is no note on that I

390
00:14:13,220 --> 00:14:16,399
don't know and I don't want to tempt

391
00:14:14,720 --> 00:14:18,589
fate but thankfully we were passed an

392
00:14:16,399 --> 00:14:21,169
instance right here this is the instance

393
00:14:18,589 --> 00:14:23,449
out of our program it gets passed to win

394
00:14:21,169 --> 00:14:26,000
main so we can put that in there and if

395
00:14:23,448 --> 00:14:28,189
we do not want to this is a little handy

396
00:14:26,000 --> 00:14:31,429
trick in Windows you can always call the

397
00:14:28,190 --> 00:14:33,829
kernel and you can ask it for the H

398
00:14:31,429 --> 00:14:35,719
instance of the currently running code

399
00:14:33,828 --> 00:14:38,659
whoever you are it is a function called

400
00:14:35,720 --> 00:14:40,370
get module handle and we won't really

401
00:14:38,659 --> 00:14:42,110
need to use it right now but just so

402
00:14:40,370 --> 00:14:43,669
people are aware that it is there if you

403
00:14:42,110 --> 00:14:45,259
do not have the H instance lying around

404
00:14:43,669 --> 00:14:46,458
if you did not save it from win main or

405
00:14:45,259 --> 00:14:48,439
you aren't the person who wrote the win

406
00:14:46,458 --> 00:14:50,479
main and you don't want to be that you

407
00:14:48,440 --> 00:14:53,779
can call get module handle and instead

408
00:14:50,480 --> 00:14:55,670
of passing it the name of some XE or DLL

409
00:14:53,778 --> 00:14:58,250
that you would like to get a handle back

410
00:14:55,669 --> 00:15:01,338
to you can actually just go ahead and

411
00:14:58,250 --> 00:15:04,730
pass 0 so basically right here you could

412
00:15:01,339 --> 00:15:06,230
call get module handle 0 and that would

413
00:15:04,730 --> 00:15:07,399
actually work but we don't need to do

414
00:15:06,230 --> 00:15:08,659
that because we actually got passed our

415
00:15:07,399 --> 00:15:10,789
H instance but you might as well play by

416
00:15:08,659 --> 00:15:14,028
the tightest possible version of the

417
00:15:10,789 --> 00:15:15,500
rules we are not going to set an icon at

418
00:15:14,028 --> 00:15:17,269
the moment but eventually for our game

419
00:15:15,500 --> 00:15:18,948
we probably will want to so we're going

420
00:15:17,269 --> 00:15:20,659
to leave that out for now we do not need

421
00:15:18,948 --> 00:15:22,219
to set a cursor because we are you know

422
00:15:20,659 --> 00:15:23,929
it's a game it's not going to have the

423
00:15:22,220 --> 00:15:25,730
windows pointer floating around on it so

424
00:15:23,929 --> 00:15:27,229
the cursor is going to be left 0 we do

425
00:15:25,730 --> 00:15:28,730
not want to clear the background of our

426
00:15:27,230 --> 00:15:31,250
of our window for us so I'm going to

427
00:15:28,730 --> 00:15:33,079
leave HBR background unset that is if we

428
00:15:31,250 --> 00:15:33,409
pass it what's called a brush we'll kind

429
00:15:33,078 --> 00:15:35,149
of see you

430
00:15:33,409 --> 00:15:36,318
those are in a little bit later to clear

431
00:15:35,149 --> 00:15:37,190
the window for us we don't want to do

432
00:15:36,318 --> 00:15:39,289
that because we're going to be doing our

433
00:15:37,190 --> 00:15:42,410
own drawing finally there's the menu

434
00:15:39,289 --> 00:15:44,778
name which is if your window is going to

435
00:15:42,409 --> 00:15:46,309
have one of those little windows sort of

436
00:15:44,778 --> 00:15:47,899
style menus up on it I don't even know

437
00:15:46,309 --> 00:15:49,609
who has those these days everyone's

438
00:15:47,899 --> 00:15:50,990
going with their fancy stuff okay here

439
00:15:49,610 --> 00:15:53,419
there if you have one of these guys

440
00:15:50,990 --> 00:15:54,860
that's that's how those get loaded in

441
00:15:53,419 --> 00:15:56,479
one way that those could get loaded in

442
00:15:54,860 --> 00:15:59,180
and we don't want that either but

443
00:15:56,480 --> 00:16:00,889
finally we need a name for our window

444
00:15:59,179 --> 00:16:02,388
class and the reason that we need a name

445
00:16:00,889 --> 00:16:04,698
for our window class is because when we

446
00:16:02,389 --> 00:16:06,789
actually go to create the window we will

447
00:16:04,698 --> 00:16:10,729
need to be able to pass this name again

448
00:16:06,789 --> 00:16:14,198
so that it can effectively create a

449
00:16:10,730 --> 00:16:14,199
window using the class that we gave it

450
00:16:14,289 --> 00:16:25,429
okay handmade hero window class that

451
00:16:21,528 --> 00:16:27,259
seems like a pretty good name to me okay

452
00:16:25,429 --> 00:16:29,568
so we are going to pass that and now we

453
00:16:27,259 --> 00:16:31,519
just need to deal with these other three

454
00:16:29,568 --> 00:16:33,528
right here so like I said always go to

455
00:16:31,519 --> 00:16:35,149
MSDN there's no way you're going to

456
00:16:33,528 --> 00:16:36,860
remember all of these things I don't

457
00:16:35,149 --> 00:16:38,269
remember all of these things and I've

458
00:16:36,860 --> 00:16:40,278
been pouring windows for a long time so

459
00:16:38,269 --> 00:16:42,169
MSDN is your friend always go back and

460
00:16:40,278 --> 00:16:44,208
look at it it will tell you what you

461
00:16:42,169 --> 00:16:46,849
need to know so let's go back here to

462
00:16:44,208 --> 00:16:48,979
the wind class and in the wind class we

463
00:16:46,850 --> 00:16:51,199
have style it says it's a youant and

464
00:16:48,980 --> 00:16:53,120
what a youant is is that's basically

465
00:16:51,198 --> 00:16:55,669
just a type that windows has defined

466
00:16:53,120 --> 00:16:58,490
using type def like before to basically

467
00:16:55,669 --> 00:17:01,338
be a 32-bit unsigned integer so that is

468
00:16:58,490 --> 00:17:03,860
basically just one of these right

469
00:17:01,339 --> 00:17:05,150
that's all it actually is so we don't

470
00:17:03,860 --> 00:17:07,250
really need to worry too much about

471
00:17:05,150 --> 00:17:08,750
those windows just defines its own names

472
00:17:07,250 --> 00:17:10,490
for all the types and we probably want

473
00:17:08,750 --> 00:17:12,470
to do some stuff like that in the future

474
00:17:10,490 --> 00:17:14,959
as well but that is exactly what that is

475
00:17:12,470 --> 00:17:17,360
there so what you can see here is it

476
00:17:14,959 --> 00:17:19,400
says the class styles this member can be

477
00:17:17,359 --> 00:17:21,948
any combination of the class style and

478
00:17:19,400 --> 00:17:23,870
it's clickable you want to click that in

479
00:17:21,949 --> 00:17:25,459
there you will basically see a thing

480
00:17:23,869 --> 00:17:27,649
that well well know I guess they've

481
00:17:25,459 --> 00:17:29,600
added a double indirection now we will

482
00:17:27,650 --> 00:17:33,140
go click on window class styles again

483
00:17:29,599 --> 00:17:35,439
and finally we get to the actual flags

484
00:17:33,140 --> 00:17:40,309
that you can set in this field for

485
00:17:35,440 --> 00:17:42,380
Windows so CS vitelline client basically

486
00:17:40,308 --> 00:17:44,720
this is the thing this is old school

487
00:17:42,380 --> 00:17:46,610
this has to do with display modes you

488
00:17:44,720 --> 00:17:47,009
know what I'm going to say what a bunch

489
00:17:46,609 --> 00:17:48,119
of these

490
00:17:47,009 --> 00:17:49,319
because we don't really need to know

491
00:17:48,119 --> 00:17:51,058
what they are we don't need bite a long

492
00:17:49,319 --> 00:17:52,589
time we don't need bite align window

493
00:17:51,058 --> 00:17:56,849
those are those are basically

494
00:17:52,589 --> 00:17:58,798
anachronistic at this point class DC is

495
00:17:56,849 --> 00:17:59,879
something there's basically a thing

496
00:17:58,798 --> 00:18:01,379
we're going to see in the future called

497
00:17:59,880 --> 00:18:03,090
a DC we're going to see it very soon

498
00:18:01,380 --> 00:18:04,799
because we actually need to use it to

499
00:18:03,089 --> 00:18:06,659
draw to our window basically what a DC

500
00:18:04,798 --> 00:18:09,599
is is it's a device context it's

501
00:18:06,660 --> 00:18:12,720
something that windows uses to sort of

502
00:18:09,599 --> 00:18:14,279
keep the state of drawing while we are

503
00:18:12,720 --> 00:18:17,279
interfacing with it to draw to our

504
00:18:14,279 --> 00:18:21,149
window and so class DC and there's also

505
00:18:17,279 --> 00:18:22,769
own DC are both things that we sort of

506
00:18:21,150 --> 00:18:27,120
need to be aware of for what we are

507
00:18:22,769 --> 00:18:28,980
doing class DC and own DC in our case

508
00:18:27,119 --> 00:18:30,959
are actually going to do the same thing

509
00:18:28,980 --> 00:18:34,470
for the most part because we're only

510
00:18:30,960 --> 00:18:36,120
going to have one window but the

511
00:18:34,470 --> 00:18:37,860
difference between them is basically

512
00:18:36,119 --> 00:18:39,899
that normally windows just has these

513
00:18:37,859 --> 00:18:41,579
device contexts sitting around inside

514
00:18:39,900 --> 00:18:44,400
windows and when people need to draw

515
00:18:41,579 --> 00:18:47,939
stuff they get one they use it and give

516
00:18:44,400 --> 00:18:49,230
it back that's how it works it's kind of

517
00:18:47,940 --> 00:18:51,690
a weird system but that's how it works

518
00:18:49,230 --> 00:18:53,308
and what these flags do is they

519
00:18:51,690 --> 00:18:55,110
basically say look I'm going to be doing

520
00:18:53,308 --> 00:18:56,460
a bunch of graphic stuff I don't want to

521
00:18:55,109 --> 00:18:58,769
deal with any overhead there might be

522
00:18:56,460 --> 00:19:01,769
with sharing these device concepts for

523
00:18:58,769 --> 00:19:04,019
when I want to draw things so class DC

524
00:19:01,769 --> 00:19:05,519
says I want my own device context for

525
00:19:04,019 --> 00:19:08,548
any window that's created with this

526
00:19:05,519 --> 00:19:11,129
window class and own DC says I want my

527
00:19:08,548 --> 00:19:12,798
own DC for every individual window now

528
00:19:11,130 --> 00:19:14,820
that's technically the one that we want

529
00:19:12,798 --> 00:19:16,798
I'm going to go ahead and put that in

530
00:19:14,819 --> 00:19:18,869
there it's probably not necessary these

531
00:19:16,798 --> 00:19:20,519
days computers are so fast it's kind of

532
00:19:18,869 --> 00:19:22,409
old school to ever specify that but I'm

533
00:19:20,519 --> 00:19:24,210
going to specify it anyway because you

534
00:19:22,410 --> 00:19:25,950
know what for old times sake let's go

535
00:19:24,210 --> 00:19:27,450
ahead and specify it and what that

536
00:19:25,950 --> 00:19:30,179
basically means is we will not have to

537
00:19:27,450 --> 00:19:31,769
get and release DC s for our windows if

538
00:19:30,179 --> 00:19:35,460
we don't want to because we always have

539
00:19:31,769 --> 00:19:36,900
our own DC that we can just use okay and

540
00:19:35,460 --> 00:19:38,579
class EC would basically have done that

541
00:19:36,900 --> 00:19:39,960
same thing because we're only ever going

542
00:19:38,579 --> 00:19:41,099
to create one window with this class but

543
00:19:39,960 --> 00:19:43,110
it's kind of a little disingenuous

544
00:19:41,099 --> 00:19:45,359
because if we were going to create

545
00:19:43,109 --> 00:19:46,918
another window for some reason with the

546
00:19:45,359 --> 00:19:51,569
same window class we would want it to

547
00:19:46,919 --> 00:19:55,830
have its own DC as well all right so we

548
00:19:51,569 --> 00:19:58,019
basically have a CSH redraw and chv CSV

549
00:19:55,829 --> 00:19:59,509
redraw are flags that tell Windows when

550
00:19:58,019 --> 00:20:01,579
it needs to repaint our window

551
00:19:59,509 --> 00:20:04,910
when they are dragged around to

552
00:20:01,579 --> 00:20:06,559
horizontally or vertically and honestly

553
00:20:04,910 --> 00:20:09,080
I haven't thought about those in a long

554
00:20:06,559 --> 00:20:11,779
time you know reflexively I type this

555
00:20:09,079 --> 00:20:13,189
pretty much only always I always specify

556
00:20:11,779 --> 00:20:14,869
those like redraw the window when it

557
00:20:13,190 --> 00:20:16,250
gets moved around but you know I've

558
00:20:14,869 --> 00:20:17,959
never really thought about whether I

559
00:20:16,250 --> 00:20:20,180
still need them anymore so maybe that's

560
00:20:17,960 --> 00:20:21,079
something that while we're on here I'm

561
00:20:20,180 --> 00:20:22,640
going to go ahead and put a little

562
00:20:21,079 --> 00:20:24,049
marker in this code you can see I have a

563
00:20:22,640 --> 00:20:25,520
thing in Emacs that highlights any time

564
00:20:24,049 --> 00:20:27,619
I type to do so I can kind of see where

565
00:20:25,519 --> 00:20:32,210
it is let's go ahead and highlight that

566
00:20:27,619 --> 00:20:35,089
and say check if H redraw V redraw own

567
00:20:32,210 --> 00:20:38,000
DC still matter because we can go in

568
00:20:35,089 --> 00:20:39,409
afterwards it might be fun on some

569
00:20:38,000 --> 00:20:41,660
stream when we're just going through and

570
00:20:39,410 --> 00:20:43,180
doing some interesting explorations we

571
00:20:41,660 --> 00:20:45,259
might want to go ahead and check and see

572
00:20:43,180 --> 00:20:46,700
how important any of these things even

573
00:20:45,259 --> 00:20:48,289
are anymore or if they're just old

574
00:20:46,700 --> 00:20:50,360
things that I always do because it's the

575
00:20:48,289 --> 00:20:52,369
way I always did them and that was that

576
00:20:50,359 --> 00:20:54,259
so a lot of these are the things like

577
00:20:52,369 --> 00:20:55,219
sends double-click messages you know you

578
00:20:54,259 --> 00:20:57,019
can look through here and you could see

579
00:20:55,220 --> 00:20:59,089
all these sorts of things save that save

580
00:20:57,019 --> 00:21:01,369
bits which which tries to restore the

581
00:20:59,089 --> 00:21:02,659
windows and these are all like that most

582
00:21:01,369 --> 00:21:05,149
of these things are just antiquated and

583
00:21:02,660 --> 00:21:06,650
you don't really need to use many of

584
00:21:05,150 --> 00:21:07,759
them we may not even really need to use

585
00:21:06,650 --> 00:21:10,519
the ones that we're even using but

586
00:21:07,759 --> 00:21:12,259
anyway there we go we have a win window

587
00:21:10,519 --> 00:21:13,789
classname we have our instance filled

588
00:21:12,259 --> 00:21:15,230
out we have our Flags filled out so the

589
00:21:13,789 --> 00:21:17,420
only thing we need to do now is actually

590
00:21:15,230 --> 00:21:19,069
define a window procedure and this is

591
00:21:17,420 --> 00:21:21,140
the thing that will handle all of the

592
00:21:19,069 --> 00:21:24,349
messages coming from windows which I'll

593
00:21:21,140 --> 00:21:29,150
show you what those aren't sight that

594
00:21:24,349 --> 00:21:30,769
pertain to us ok so what is that and how

595
00:21:29,150 --> 00:21:32,930
would you have known what that was if I

596
00:21:30,769 --> 00:21:34,609
wasn't here to tell you well here is an

597
00:21:32,930 --> 00:21:36,710
example of again how MSDN can help you

598
00:21:34,609 --> 00:21:37,969
if you go into LP FN wind proc you will

599
00:21:36,710 --> 00:21:39,500
see a thing that says a pointer to the

600
00:21:37,970 --> 00:21:41,269
window procedure you must use the call

601
00:21:39,500 --> 00:21:43,640
window prop function to call the window

602
00:21:41,269 --> 00:21:46,940
procedure for more information see

603
00:21:43,640 --> 00:21:48,500
window proc well if I go ahead and click

604
00:21:46,940 --> 00:21:50,420
on window proc you will see that it

605
00:21:48,500 --> 00:21:52,579
actually defines exactly what the

606
00:21:50,420 --> 00:21:54,470
procedure is right there which is what I

607
00:21:52,579 --> 00:21:55,519
wanted to know and so what I'm going to

608
00:21:54,470 --> 00:22:00,440
do is I'm going to go ahead and cut that

609
00:21:55,519 --> 00:22:02,000
out this is the callback which is the

610
00:22:00,440 --> 00:22:03,950
phrase callback is exactly what it

611
00:22:02,000 --> 00:22:06,890
sounds like it is a thing where windows

612
00:22:03,950 --> 00:22:09,610
calls us back from its code to have us

613
00:22:06,890 --> 00:22:12,500
do something for it and you can see

614
00:22:09,609 --> 00:22:12,979
right here what the parameters are to it

615
00:22:12,500 --> 00:22:15,440
the

616
00:22:12,980 --> 00:22:18,230
gets past an H wind we don't know what

617
00:22:15,440 --> 00:22:21,170
that is yet a unsigned integer it gets

618
00:22:18,230 --> 00:22:23,150
past a w pram and L pram all totally

619
00:22:21,170 --> 00:22:24,710
mysterious to us we have not really

620
00:22:23,150 --> 00:22:26,269
dealt with any of these because even the

621
00:22:24,710 --> 00:22:28,130
unsigned integer which we now know is

622
00:22:26,269 --> 00:22:31,250
just an unsigned 32-bit integer we don't

623
00:22:28,130 --> 00:22:33,050
know what it means so what we're going

624
00:22:31,250 --> 00:22:35,569
to have to do is look at MSDN and see

625
00:22:33,049 --> 00:22:37,730
what that stuff is but for now we know

626
00:22:35,569 --> 00:22:39,919
that this is our main window callback

627
00:22:37,730 --> 00:22:42,049
this is the callback that will be called

628
00:22:39,920 --> 00:22:44,539
any time we have a window of this class

629
00:22:42,049 --> 00:22:46,519
that windows needs to send something to

630
00:22:44,539 --> 00:22:48,319
to have it do something and we'll see a

631
00:22:46,519 --> 00:22:51,109
little bit more about that in the future

632
00:22:48,319 --> 00:22:52,639
so what I like to do and this will

633
00:22:51,109 --> 00:22:54,740
probably frustrate a lot of people so

634
00:22:52,640 --> 00:22:57,080
it's just what I like to do you don't

635
00:22:54,740 --> 00:22:58,849
have to do it I hate all their little

636
00:22:57,079 --> 00:23:00,740
prefixes and weird names as far as I'm

637
00:22:58,849 --> 00:23:03,049
concerned this is instance this is pre

638
00:23:00,740 --> 00:23:04,880
vincent's this is command line and this

639
00:23:03,049 --> 00:23:06,409
is show code so I'm just going to go

640
00:23:04,880 --> 00:23:07,940
ahead and just flat-out rename those

641
00:23:06,410 --> 00:23:10,610
things because I don't like to look at

642
00:23:07,940 --> 00:23:12,200
their weird naming convention any more

643
00:23:10,609 --> 00:23:14,029
than I absolutely have to and the same

644
00:23:12,200 --> 00:23:16,009
is true up here I happen to know what

645
00:23:14,029 --> 00:23:17,450
these things are so I am going to name

646
00:23:16,009 --> 00:23:20,359
them what I want to see them called

647
00:23:17,450 --> 00:23:21,769
which is message window and then just

648
00:23:20,359 --> 00:23:24,169
changing the capitalization scheme there

649
00:23:21,769 --> 00:23:26,299
and what you need to understand here is

650
00:23:24,170 --> 00:23:28,640
that function signatures in C and C++

651
00:23:26,299 --> 00:23:30,950
are really only about the types a

652
00:23:28,640 --> 00:23:32,780
function signature the definition of

653
00:23:30,950 --> 00:23:34,130
that function only depends on the types

654
00:23:32,779 --> 00:23:36,200
that you're trying to pass it the H win

655
00:23:34,130 --> 00:23:38,480
the u into the wpm the L print that part

656
00:23:36,200 --> 00:23:40,370
the name of the parameter is up to you

657
00:23:38,480 --> 00:23:42,410
so even though Windows is the person

658
00:23:40,369 --> 00:23:44,149
who's calling us it's only the fact that

659
00:23:42,410 --> 00:23:45,620
it receives these four specific things

660
00:23:44,150 --> 00:23:47,390
that are important it does not care what

661
00:23:45,619 --> 00:23:48,739
they are called so you can change them

662
00:23:47,390 --> 00:23:50,440
to be called anything that you want

663
00:23:48,740 --> 00:23:52,970
whatever you want them to be called

664
00:23:50,440 --> 00:23:54,830
literally any name here is fine so you

665
00:23:52,970 --> 00:23:56,990
should name things whatever makes it

666
00:23:54,829 --> 00:23:58,970
easiest for you to read and that is what

667
00:23:56,990 --> 00:24:01,789
I like to read so that is what I have

668
00:23:58,970 --> 00:24:02,870
called it now if we go in here we can

669
00:24:01,789 --> 00:24:04,730
see the definition of these things

670
00:24:02,869 --> 00:24:06,739
basically we have an H win which is a

671
00:24:04,730 --> 00:24:09,500
handle to a window H win stands for a

672
00:24:06,740 --> 00:24:11,870
handle window basically and what that is

673
00:24:09,500 --> 00:24:13,730
is that's just a opaque thing we cannot

674
00:24:11,869 --> 00:24:16,609
really look at it at all but it is an

675
00:24:13,730 --> 00:24:18,799
opaque piece of data that we can pass

676
00:24:16,609 --> 00:24:20,689
back to Windows that allows it to know

677
00:24:18,799 --> 00:24:22,909
which window we are talking about so it

678
00:24:20,690 --> 00:24:25,190
passes it to us and says hey here is the

679
00:24:22,910 --> 00:24:26,570
window handle if you need to talk to me

680
00:24:25,190 --> 00:24:28,220
about your window handle

681
00:24:26,569 --> 00:24:32,839
just go ahead and pass this back and

682
00:24:28,220 --> 00:24:36,079
I'll know what you mean pretty simple

683
00:24:32,839 --> 00:24:38,089
there the youant the message so

684
00:24:36,079 --> 00:24:39,798
basically what this is is this is the

685
00:24:38,089 --> 00:24:41,808
message that Windows is asking us to

686
00:24:39,798 --> 00:24:43,730
handle it is going to call us back with

687
00:24:41,808 --> 00:24:45,230
a variety of different things and what

688
00:24:43,730 --> 00:24:47,298
we need to do is we need to go look at

689
00:24:45,230 --> 00:24:50,120
what those things are so system to find

690
00:24:47,298 --> 00:24:52,369
messages here is the list and basically

691
00:24:50,119 --> 00:24:55,398
as you can see over the ages it has

692
00:24:52,369 --> 00:24:57,859
grown to be absurdly huge the number of

693
00:24:55,398 --> 00:24:59,839
things that you can receive now most of

694
00:24:57,859 --> 00:25:01,908
the ones that we care about are not

695
00:24:59,839 --> 00:25:04,759
these kind of things animation control

696
00:25:01,909 --> 00:25:06,889
messages combo boxes all this sort of

697
00:25:04,759 --> 00:25:08,389
stuff since we are not going to be using

698
00:25:06,888 --> 00:25:09,829
Windows hardly at all we are basically

699
00:25:08,388 --> 00:25:11,959
just opening a window and then we are

700
00:25:09,829 --> 00:25:13,548
doing everything else ourselves most of

701
00:25:11,960 --> 00:25:16,129
the things that we care about are very

702
00:25:13,548 --> 00:25:18,200
simple basic window operations that we

703
00:25:16,128 --> 00:25:20,689
need to respond to so they all fall

704
00:25:18,200 --> 00:25:22,819
under the WM category and we will not

705
00:25:20,690 --> 00:25:24,679
really need much from anything else in

706
00:25:22,819 --> 00:25:25,970
here a lot of these things are for if

707
00:25:24,679 --> 00:25:28,490
you want to use the windows standard

708
00:25:25,970 --> 00:25:29,960
control such as track bars the tasks you

709
00:25:28,490 --> 00:25:31,638
know like these sorts of things where

710
00:25:29,960 --> 00:25:33,169
you see like windows standard controls

711
00:25:31,638 --> 00:25:34,788
buttons that you click on if you want to

712
00:25:33,169 --> 00:25:36,830
use their standard controls they all

713
00:25:34,788 --> 00:25:38,089
have special message codes that they

714
00:25:36,829 --> 00:25:39,230
will pass back and forth you and stuff

715
00:25:38,089 --> 00:25:42,980
like that but we're not going to be

716
00:25:39,230 --> 00:25:44,089
doing in that if we make a button we'll

717
00:25:42,980 --> 00:25:46,909
be implementing ourselves so we don't

718
00:25:44,089 --> 00:25:49,278
need to call them so we are going to be

719
00:25:46,909 --> 00:25:51,970
dealing in here and at first basically

720
00:25:49,278 --> 00:25:56,419
what we need is just our window messages

721
00:25:51,970 --> 00:25:57,528
excuse me so I'm going to go ahead and

722
00:25:56,419 --> 00:25:59,509
look in here and see if there's anything

723
00:25:57,528 --> 00:26:01,730
in particular that we want to handle I

724
00:25:59,509 --> 00:26:05,450
think we may simply want just like a few

725
00:26:01,730 --> 00:26:07,429
simple things yeah okay so the ones that

726
00:26:05,450 --> 00:26:09,319
I think we want to handle at start here

727
00:26:07,429 --> 00:26:10,970
and I'm going to use the switch

728
00:26:09,319 --> 00:26:12,349
statement that I discussed in the intro

729
00:26:10,970 --> 00:26:14,750
stream the switch statement of course

730
00:26:12,349 --> 00:26:19,069
allows us to take any value and switch

731
00:26:14,750 --> 00:26:22,009
to see basically if it equals any

732
00:26:19,069 --> 00:26:23,750
constant that we want to input so here I

733
00:26:22,009 --> 00:26:26,599
am going to use these codes which are

734
00:26:23,750 --> 00:26:28,669
defined in Windows to be constants they

735
00:26:26,599 --> 00:26:30,740
are specific numbers basically that will

736
00:26:28,669 --> 00:26:32,870
be used to say which message is coming

737
00:26:30,740 --> 00:26:35,240
in and I am going to field for example

738
00:26:32,869 --> 00:26:37,548
the WM size command which is when the

739
00:26:35,240 --> 00:26:40,429
user changes the size of the window I am

740
00:26:37,548 --> 00:26:43,339
also going to field probably the W

741
00:26:40,429 --> 00:26:46,340
and destroy command which is when

742
00:26:43,339 --> 00:26:49,898
Windows deletes our window and also

743
00:26:46,339 --> 00:26:53,778
perhaps I will field the WM close

744
00:26:49,898 --> 00:26:55,668
message which is basically what happens

745
00:26:53,778 --> 00:26:57,798
when the user clicks on that little X up

746
00:26:55,669 --> 00:27:00,740
in the corner of the window and finally

747
00:26:57,798 --> 00:27:02,778
I think I may also do just at the

748
00:27:00,740 --> 00:27:04,249
beginning here I made you activate app

749
00:27:02,778 --> 00:27:06,230
which is basically thing that lets us

750
00:27:04,249 --> 00:27:07,970
know whether the user has clicked in us

751
00:27:06,230 --> 00:27:10,940
and we are the active window or not and

752
00:27:07,970 --> 00:27:13,220
now you'll remember I also said back in

753
00:27:10,940 --> 00:27:15,259
the intro stream if the thing that we

754
00:27:13,220 --> 00:27:16,700
are switching on does not fall into one

755
00:27:15,259 --> 00:27:18,860
of the constant categories that we have

756
00:27:16,700 --> 00:27:22,159
defined using case statements we can go

757
00:27:18,859 --> 00:27:24,618
and actually use a default statement to

758
00:27:22,159 --> 00:27:25,940
catch up all of the extra slack now what

759
00:27:24,618 --> 00:27:28,220
you are seeing here probably for the

760
00:27:25,940 --> 00:27:30,169
first time because I have not used this

761
00:27:28,220 --> 00:27:31,819
in the interest dream is the way that I

762
00:27:30,169 --> 00:27:33,679
write case statements which is a little

763
00:27:31,819 --> 00:27:35,778
unusual the way I like to write case

764
00:27:33,679 --> 00:27:38,210
statements is I like to actually put a

765
00:27:35,778 --> 00:27:39,919
basic block in there just to find my own

766
00:27:38,210 --> 00:27:41,419
block that is not required that is the

767
00:27:39,919 --> 00:27:43,460
normal way the case statement looks and

768
00:27:41,419 --> 00:27:45,470
this is the code that goes in it right

769
00:27:43,460 --> 00:27:47,149
there but what you will find if you use

770
00:27:45,470 --> 00:27:49,190
case statements often is that if you

771
00:27:47,148 --> 00:27:51,349
actually define variables in here those

772
00:27:49,190 --> 00:27:52,999
variables will propagate out to the

773
00:27:51,349 --> 00:27:55,428
other cases because they are all in the

774
00:27:52,999 --> 00:27:57,139
same block which is this one up here so

775
00:27:55,429 --> 00:27:58,999
if I have it in X I could refer to it

776
00:27:57,138 --> 00:28:00,469
down in here even though I did not mean

777
00:27:58,999 --> 00:28:02,960
for that to happen which could be a

778
00:28:00,470 --> 00:28:05,028
mistake that I would rather prevent so I

779
00:28:02,960 --> 00:28:07,129
always bracket my case statements unless

780
00:28:05,028 --> 00:28:09,048
I have a really good reason not to do so

781
00:28:07,128 --> 00:28:11,329
and then I go ahead and put the break

782
00:28:09,048 --> 00:28:13,220
outside most people put the break inside

783
00:28:11,329 --> 00:28:15,109
a lot of times it will look like this I

784
00:28:13,220 --> 00:28:16,490
don't do that I just think it looks a

785
00:28:15,109 --> 00:28:18,469
little nicer if it just looks like a

786
00:28:16,490 --> 00:28:20,538
standard basic block and the break goes

787
00:28:18,470 --> 00:28:21,889
outside I also find it helps to keep it

788
00:28:20,538 --> 00:28:23,298
from mixing with the other code it

789
00:28:21,888 --> 00:28:25,638
accidentally so that's the way I do it

790
00:28:23,298 --> 00:28:33,470
not really necessary you could put that

791
00:28:25,638 --> 00:28:34,729
break wherever you want so okay here we

792
00:28:33,470 --> 00:28:37,278
have the things that we are going to

793
00:28:34,730 --> 00:28:38,659
actually watch for right now we are

794
00:28:37,278 --> 00:28:40,638
actually not going to handle any of them

795
00:28:38,659 --> 00:28:42,440
actually what we are going to do instead

796
00:28:40,638 --> 00:28:45,378
is we're going to use the thing that I

797
00:28:42,440 --> 00:28:47,330
told you about in the original intro

798
00:28:45,378 --> 00:28:49,730
stream where I was talking about how we

799
00:28:47,329 --> 00:28:51,648
can output stuff to the debug stream

800
00:28:49,730 --> 00:28:52,940
that shows up in the debugger I am just

801
00:28:51,648 --> 00:28:55,398
going to go ahead and print out

802
00:28:52,940 --> 00:28:57,769
when I get any of these messages so the

803
00:28:55,398 --> 00:29:00,439
only thing that I'm going to do is just

804
00:28:57,769 --> 00:29:02,899
print this stuff out that's it nothing

805
00:29:00,440 --> 00:29:09,830
else is going to happen in here right

806
00:29:02,898 --> 00:29:11,719
that's it just these things okay and you

807
00:29:09,829 --> 00:29:12,769
know what mmm i'ma gonna print out the

808
00:29:11,720 --> 00:29:13,940
default cuz there's gonna be a ton of

809
00:29:12,769 --> 00:29:15,019
messages that flood in there I don't

810
00:29:13,940 --> 00:29:18,470
think I'm going to for another default

811
00:29:15,019 --> 00:29:20,028
well oh it's so tempting let's go ahead

812
00:29:18,470 --> 00:29:21,348
and put that in there and then we'll

813
00:29:20,028 --> 00:29:23,598
just turn it on in a second we're going

814
00:29:21,348 --> 00:29:25,278
to turn it on at first so if you

815
00:29:23,598 --> 00:29:28,249
remember from the intro screen output

816
00:29:25,278 --> 00:29:31,278
debug string is basically just a call

817
00:29:28,249 --> 00:29:33,679
that allows you to output something to

818
00:29:31,278 --> 00:29:35,898
this window over here this window right

819
00:29:33,679 --> 00:29:37,519
here it will show up in the debugger we

820
00:29:35,898 --> 00:29:39,079
can watch it and it's a good way when we

821
00:29:37,519 --> 00:29:40,729
are just starting a Windows program and

822
00:29:39,079 --> 00:29:42,408
we do not have anything implemented we

823
00:29:40,729 --> 00:29:43,879
can not really log anything we can't use

824
00:29:42,409 --> 00:29:46,549
any of our own debug services that we

825
00:29:43,878 --> 00:29:47,928
may have written to do debugging it is a

826
00:29:46,548 --> 00:29:49,700
good way to kind of bootstrap things

827
00:29:47,929 --> 00:29:52,009
because it will be a nice little place

828
00:29:49,700 --> 00:29:55,460
to print things out as you go and you

829
00:29:52,009 --> 00:29:57,139
know that that code got executed so now

830
00:29:55,460 --> 00:29:59,720
you will notice that there is an L

831
00:29:57,138 --> 00:30:02,089
result an L result is returned from this

832
00:29:59,720 --> 00:30:03,889
okay and when an L result is is an L

833
00:30:02,089 --> 00:30:05,118
result is basically just a return code

834
00:30:03,888 --> 00:30:07,788
something that we return back to say

835
00:30:05,118 --> 00:30:09,769
what we basically did with the message

836
00:30:07,788 --> 00:30:11,989
so each one of these messages Windows

837
00:30:09,769 --> 00:30:14,868
has certain meanings that it will resign

838
00:30:11,989 --> 00:30:17,778
to that it will assign to what we return

839
00:30:14,868 --> 00:30:20,418
and if you look in MSDN you can actually

840
00:30:17,778 --> 00:30:22,700
see what those are so you go in here and

841
00:30:20,419 --> 00:30:24,200
it'll basically say if an application

842
00:30:22,700 --> 00:30:26,210
processes the message it should return

843
00:30:24,200 --> 00:30:27,679
zero right so basically what that's

844
00:30:26,210 --> 00:30:29,358
saying is if we actually handle the

845
00:30:27,679 --> 00:30:31,369
message which in this case I suppose we

846
00:30:29,358 --> 00:30:32,928
did we should return zero so what I'm

847
00:30:31,368 --> 00:30:35,658
going to do instead is I'm just going to

848
00:30:32,929 --> 00:30:37,309
set result equal to zero and assume that

849
00:30:35,659 --> 00:30:39,278
we handled the message because the next

850
00:30:37,308 --> 00:30:42,168
thing that we have to do to finish our

851
00:30:39,278 --> 00:30:44,239
window procedure is we have to basically

852
00:30:42,169 --> 00:30:46,220
do a catch-all to handle all the

853
00:30:44,239 --> 00:30:49,129
messages that we don't handle and in

854
00:30:46,220 --> 00:30:51,229
there I am going to assign result right

855
00:30:49,128 --> 00:30:53,358
I'm going to assign that return value

856
00:30:51,229 --> 00:30:55,369
and I got to obviously return the return

857
00:30:53,358 --> 00:30:57,228
value here eventually as well from the

858
00:30:55,368 --> 00:31:00,769
function I am going to assign to that

859
00:30:57,229 --> 00:31:03,558
return value basically the result of

860
00:31:00,769 --> 00:31:05,329
calling Windows is default window

861
00:31:03,558 --> 00:31:05,829
callback which they have defined and

862
00:31:05,329 --> 00:31:08,230
what that

863
00:31:05,829 --> 00:31:10,148
it's a catch-all that says if you don't

864
00:31:08,230 --> 00:31:13,028
want to worry about particular messages

865
00:31:10,148 --> 00:31:15,308
you can call me and I handle all the

866
00:31:13,028 --> 00:31:18,069
messages in whatever the default way is

867
00:31:15,308 --> 00:31:19,960
so it's basically like saying okay I am

868
00:31:18,069 --> 00:31:22,119
sort of the first person on the food

869
00:31:19,960 --> 00:31:23,679
chain for these messages my main window

870
00:31:22,119 --> 00:31:25,449
callback will be the one who looks at

871
00:31:23,679 --> 00:31:27,100
the messages and goes is it one of these

872
00:31:25,450 --> 00:31:28,840
four that I care about but if it's not

873
00:31:27,099 --> 00:31:31,240
one of the four that I care about I can

874
00:31:28,839 --> 00:31:33,428
go ahead and pass it on to Windows and

875
00:31:31,240 --> 00:31:35,798
let it do the default behavior and as

876
00:31:33,429 --> 00:31:37,690
you'll see we may actually even want to

877
00:31:35,798 --> 00:31:39,069
do that for some of these messages and

878
00:31:37,690 --> 00:31:41,110
other messages we might handle in the

879
00:31:39,069 --> 00:31:43,599
future we may still even want to call

880
00:31:41,109 --> 00:31:45,339
the default window procedure even when

881
00:31:43,599 --> 00:31:48,129
we do handle a message because we may

882
00:31:45,339 --> 00:31:51,250
just want to do something extra than

883
00:31:48,130 --> 00:31:52,778
what it does if that makes sense so the

884
00:31:51,250 --> 00:31:54,759
default window procedure is documented

885
00:31:52,778 --> 00:31:56,589
in all of these things basically and

886
00:31:54,759 --> 00:31:58,329
it's just called def window proc you can

887
00:31:56,589 --> 00:32:01,449
click on it and see its definition and

888
00:31:58,329 --> 00:32:04,928
as you might expect it looks absolutely

889
00:32:01,450 --> 00:32:06,460
identical to well that is if my internet

890
00:32:04,929 --> 00:32:08,080
is still working let's hope that it is

891
00:32:06,460 --> 00:32:12,429
since we've been having problems today

892
00:32:08,079 --> 00:32:13,898
with it yeah I need to get some some

893
00:32:12,429 --> 00:32:16,000
kind of guaranteed internet so my stream

894
00:32:13,898 --> 00:32:18,609
can't be interrupted if that's possible

895
00:32:16,000 --> 00:32:20,558
anyway the default window procedure is

896
00:32:18,609 --> 00:32:23,079
literally exactly the same function

897
00:32:20,558 --> 00:32:24,849
signature as ours only instead of it

898
00:32:23,079 --> 00:32:28,119
being a callback where windows calls us

899
00:32:24,849 --> 00:32:30,009
it is a win API which means that we are

900
00:32:28,119 --> 00:32:32,048
calling it now call back and win API I

901
00:32:30,009 --> 00:32:33,158
mentioned them a little bit in the intro

902
00:32:32,048 --> 00:32:35,168
stream they are decoration that

903
00:32:33,159 --> 00:32:36,970
specifies a calling convention we have

904
00:32:35,169 --> 00:32:38,919
not gotten to calling conventions yet so

905
00:32:36,970 --> 00:32:40,149
I'm going to kind of defer talking about

906
00:32:38,919 --> 00:32:43,899
what those are for a little while but

907
00:32:40,148 --> 00:32:46,209
otherwise you can see that it's exactly

908
00:32:43,898 --> 00:32:47,558
the same it returns an L result which is

909
00:32:46,210 --> 00:32:49,120
basically just again it's just an

910
00:32:47,558 --> 00:32:50,710
unsigned integer I believe is all or

911
00:32:49,119 --> 00:32:52,839
might be a signed integer let's take a

912
00:32:50,710 --> 00:32:55,090
look we can actually take a look at what

913
00:32:52,839 --> 00:32:56,980
L result is actually defined to be in

914
00:32:55,089 --> 00:32:59,648
the windows headers so inside here

915
00:32:56,980 --> 00:33:02,440
windows data types it does look like

916
00:32:59,648 --> 00:33:05,259
it's signed there come on MSDN you can

917
00:33:02,440 --> 00:33:05,860
do it I know you can return it there we

918
00:33:05,259 --> 00:33:07,450
go

919
00:33:05,859 --> 00:33:09,129
so if you come in here windows data

920
00:33:07,450 --> 00:33:10,870
types it will actually tell you what

921
00:33:09,130 --> 00:33:13,630
they all are you can actually see the

922
00:33:10,869 --> 00:33:15,428
pound defines that specify the actual

923
00:33:13,630 --> 00:33:17,169
literal value of these things so if we

924
00:33:15,429 --> 00:33:19,840
go to an L result you can see that it's

925
00:33:17,169 --> 00:33:22,000
defined to be a long pointer

926
00:33:19,839 --> 00:33:23,049
okay that is not what I was expecting it

927
00:33:22,000 --> 00:33:24,670
to be but I guess they want you to be

928
00:33:23,049 --> 00:33:26,349
able to return pointer values in there

929
00:33:24,670 --> 00:33:28,990
which means it will actually potentially

930
00:33:26,349 --> 00:33:30,609
be 64 bits on our device I guess you

931
00:33:28,990 --> 00:33:32,890
know what since that's interesting to me

932
00:33:30,609 --> 00:33:34,479
let's pause for one second and let's

933
00:33:32,890 --> 00:33:34,840
take a look let's see what's going on

934
00:33:34,480 --> 00:33:37,660
here

935
00:33:34,839 --> 00:33:39,549
size of L result oh you know what I

936
00:33:37,660 --> 00:33:41,140
don't even have to do that here we can

937
00:33:39,549 --> 00:33:43,389
just go ahead and kind of pause what we

938
00:33:41,140 --> 00:33:45,190
were doing right all of this would still

939
00:33:43,390 --> 00:33:47,110
be valid code looks like valid code to

940
00:33:45,190 --> 00:33:49,240
me so let's go ahead and build that

941
00:33:47,109 --> 00:33:51,279
everything builds fine and I'm just

942
00:33:49,240 --> 00:33:54,069
going to go exploring so we go in here

943
00:33:51,279 --> 00:33:57,599
this is our well you know I don't even

944
00:33:54,069 --> 00:33:59,829
think I need to do that let's go in here

945
00:33:57,599 --> 00:34:01,059
let's see if I can take it the size of

946
00:33:59,829 --> 00:34:02,049
it right here or if it's close to pound

947
00:34:01,059 --> 00:34:05,019
fine yeah there we go

948
00:34:02,049 --> 00:34:06,579
so size of L result returns eight which

949
00:34:05,019 --> 00:34:08,710
as you remember it's all invite so that

950
00:34:06,579 --> 00:34:10,840
means eight bytes which means 64 bits

951
00:34:08,710 --> 00:34:12,670
which is exactly what we thought when we

952
00:34:10,840 --> 00:34:14,590
saw a long pointer so basically what

953
00:34:12,670 --> 00:34:16,630
they've done here is they have said okay

954
00:34:14,590 --> 00:34:19,390
main window callback returns something

955
00:34:16,630 --> 00:34:20,769
that is 64 bits and that way they could

956
00:34:19,389 --> 00:34:21,909
return probably the reason they're doing

957
00:34:20,769 --> 00:34:23,949
that because that way they can return

958
00:34:21,909 --> 00:34:25,599
anything any single value that they want

959
00:34:23,949 --> 00:34:28,119
to including a pointer to something

960
00:34:25,599 --> 00:34:30,969
which because we are compiling in 64-bit

961
00:34:28,119 --> 00:34:33,039
mode you remember VC varis 32 we called

962
00:34:30,969 --> 00:34:35,230
in fact I can show you right here in the

963
00:34:33,039 --> 00:34:37,659
misc shelled up at remember this little

964
00:34:35,230 --> 00:34:38,500
guy here compiling in 64-bit mode well

965
00:34:37,659 --> 00:34:40,269
that's what that means

966
00:34:38,500 --> 00:34:42,789
since our memory 64-bit address space

967
00:34:40,269 --> 00:34:44,980
need 64-bit pointers something we'll be

968
00:34:42,789 --> 00:34:46,150
getting to later because we don't

969
00:34:44,980 --> 00:34:47,800
actually need to worry too much about

970
00:34:46,150 --> 00:34:49,180
the size of things but point being since

971
00:34:47,800 --> 00:34:50,530
windows wants us to be able to return

972
00:34:49,179 --> 00:34:52,750
things that are pointer size it needs

973
00:34:50,530 --> 00:34:54,760
full 64 bits there even if we don't use

974
00:34:52,750 --> 00:34:56,500
the full 64 bits for most messages it

975
00:34:54,760 --> 00:34:59,200
needs to be big enough to handle the

976
00:34:56,500 --> 00:35:03,309
return value of the biggest message so

977
00:34:59,199 --> 00:35:04,809
that is good to know I think the last

978
00:35:03,309 --> 00:35:06,849
time I really seriously thought about

979
00:35:04,809 --> 00:35:09,909
window procedures it was still in 32-bit

980
00:35:06,849 --> 00:35:12,460
windows and those were 32 bits long so

981
00:35:09,909 --> 00:35:14,529
hey there's 64 bits now the times they

982
00:35:12,460 --> 00:35:16,329
are a-changin so we are going to go here

983
00:35:14,530 --> 00:35:18,130
at head and call def window proc it is

984
00:35:16,329 --> 00:35:20,440
just a pass-through and we are going to

985
00:35:18,130 --> 00:35:22,090
pass it the exact parameters that we

986
00:35:20,440 --> 00:35:24,369
were given we have no idea what they

987
00:35:22,090 --> 00:35:26,230
mean we don't care we figure it we'll

988
00:35:24,369 --> 00:35:27,339
figure it out so all we will have to do

989
00:35:26,230 --> 00:35:29,619
is figure out what the parameters mean

990
00:35:27,340 --> 00:35:31,900
for these messages so that we can handle

991
00:35:29,619 --> 00:35:32,900
them alright so now we will compile this

992
00:35:31,900 --> 00:35:34,309
just to make sure we haven't done

993
00:35:32,900 --> 00:35:36,349
anything wrong everything compiles fine

994
00:35:34,309 --> 00:35:38,240
no errors and what we're going to do now

995
00:35:36,349 --> 00:35:40,099
is we're going to open a window using

996
00:35:38,239 --> 00:35:41,719
the window class but in order to do that

997
00:35:40,099 --> 00:35:44,568
we of course have to do what's called

998
00:35:41,719 --> 00:35:45,798
registering the window class so the way

999
00:35:44,568 --> 00:35:47,630
that that works is we use a thing called

1000
00:35:45,798 --> 00:35:49,338
register window class or register wind

1001
00:35:47,630 --> 00:35:51,710
class I don't remember the thing let's

1002
00:35:49,338 --> 00:35:53,269
let's take a look here don't remember

1003
00:35:51,710 --> 00:35:58,159
the exact spelling of register wind

1004
00:35:53,269 --> 00:36:01,940
class register window class register

1005
00:35:58,159 --> 00:36:04,308
class see register class that's what we

1006
00:36:01,940 --> 00:36:07,010
want so I was wrong in both guesses

1007
00:36:04,309 --> 00:36:10,490
register class we are going to go ahead

1008
00:36:07,010 --> 00:36:13,039
and register class and register class

1009
00:36:10,489 --> 00:36:15,288
just takes a pointer to our window class

1010
00:36:13,039 --> 00:36:16,700
the window class that we are trying to

1011
00:36:15,289 --> 00:36:19,339
register now you notice it returns

1012
00:36:16,699 --> 00:36:21,980
something called an atom and you may ask

1013
00:36:19,338 --> 00:36:24,230
what is an atom well an atom was just

1014
00:36:21,980 --> 00:36:26,329
something that was used in the old days

1015
00:36:24,230 --> 00:36:28,400
windows I mean they're still around but

1016
00:36:26,329 --> 00:36:30,829
you almost never actually use them they

1017
00:36:28,400 --> 00:36:33,588
were basically things used in Windows to

1018
00:36:30,829 --> 00:36:36,289
sort of memento as to like remember a

1019
00:36:33,588 --> 00:36:39,318
particular string value or if value you

1020
00:36:36,289 --> 00:36:42,380
wanted to refer to again and in fact I

1021
00:36:39,318 --> 00:36:44,329
don't know if I can I can find an actual

1022
00:36:42,380 --> 00:36:46,400
let me see if I can find an actual thing

1023
00:36:44,329 --> 00:36:47,778
to show you here where you just register

1024
00:36:46,400 --> 00:36:51,200
an actual atom

1025
00:36:47,778 --> 00:36:53,239
uh that's let me let me take a look you

1026
00:36:51,199 --> 00:36:55,939
know what I because I think if I dig

1027
00:36:53,239 --> 00:36:59,118
deep into the old thing here let's let's

1028
00:36:55,940 --> 00:37:02,329
let's take a look query cancel autoplay

1029
00:36:59,119 --> 00:37:06,019
example I think that will show us an

1030
00:37:02,329 --> 00:37:09,140
example of that let's take a look let's

1031
00:37:06,019 --> 00:37:12,048
take a look yes so here was a typical

1032
00:37:09,139 --> 00:37:14,179
one for example that I remember being an

1033
00:37:12,048 --> 00:37:16,489
atom based thing if I am not very much

1034
00:37:14,179 --> 00:37:19,278
an error is it not no all right

1035
00:37:16,489 --> 00:37:20,808
darn alright I do not know then I do not

1036
00:37:19,278 --> 00:37:24,199
know a good example of something where

1037
00:37:20,809 --> 00:37:25,339
we're still going to use an atom racking

1038
00:37:24,199 --> 00:37:27,649
my brain I'm sorry I can't think of it

1039
00:37:25,338 --> 00:37:29,269
someone in the chat probably knows and

1040
00:37:27,650 --> 00:37:30,650
it really isn't that important so we're

1041
00:37:29,269 --> 00:37:33,318
not going to dwell on it for now but

1042
00:37:30,650 --> 00:37:35,838
point being we probably will not see

1043
00:37:33,318 --> 00:37:37,190
atoms much at all you you used to use

1044
00:37:35,838 --> 00:37:38,449
them for things like and like I said

1045
00:37:37,190 --> 00:37:39,769
we're not going to use these but you'd

1046
00:37:38,449 --> 00:37:42,288
get an atom back if you wanted to

1047
00:37:39,769 --> 00:37:44,239
register a named property that you could

1048
00:37:42,289 --> 00:37:45,920
associate with a window and other things

1049
00:37:44,239 --> 00:37:46,379
like this but we have no need for any

1050
00:37:45,920 --> 00:37:48,269
that stuff

1051
00:37:46,380 --> 00:37:49,890
so racking my brain again but I can't

1052
00:37:48,269 --> 00:37:51,389
think of a canceled autoplay might

1053
00:37:49,889 --> 00:37:53,069
be one but I can't think of anything

1054
00:37:51,389 --> 00:37:54,809
that we're going to do besides this one

1055
00:37:53,070 --> 00:37:56,039
call that actually uses an atom and

1056
00:37:54,809 --> 00:37:57,360
we're not even going to use the atom

1057
00:37:56,039 --> 00:37:58,860
we're just going to register the class

1058
00:37:57,360 --> 00:38:00,870
and that's all we're probably going to

1059
00:37:58,860 --> 00:38:02,579
do so we go ahead and register this

1060
00:38:00,869 --> 00:38:05,009
window class registering the window

1061
00:38:02,579 --> 00:38:07,049
class technically could fail and so we

1062
00:38:05,010 --> 00:38:08,370
could check to see whether when the atom

1063
00:38:07,050 --> 00:38:09,630
comes back at least I think that it can

1064
00:38:08,369 --> 00:38:12,059
fail let's take a look

1065
00:38:09,630 --> 00:38:13,860
function of seeds let's see do two to

1066
00:38:12,059 --> 00:38:16,019
function fails return values zero so

1067
00:38:13,860 --> 00:38:17,309
technically if we want to we can just

1068
00:38:16,019 --> 00:38:18,929
double check to make sure that this

1069
00:38:17,309 --> 00:38:21,809
succeeds it never actually in practice

1070
00:38:18,929 --> 00:38:24,029
fails but if it does you know if we want

1071
00:38:21,809 --> 00:38:26,039
to start being correct once we actually

1072
00:38:24,030 --> 00:38:27,420
build a nice little logging system in an

1073
00:38:26,039 --> 00:38:30,239
error system which we will be getting to

1074
00:38:27,420 --> 00:38:32,039
later on we may want to log that why not

1075
00:38:30,239 --> 00:38:34,409
for complete mistake I don't know how we

1076
00:38:32,039 --> 00:38:35,610
will ever test it probably I guess we

1077
00:38:34,409 --> 00:38:37,049
could test it by registering the window

1078
00:38:35,610 --> 00:38:38,430
class twice because I think maybe it

1079
00:38:37,050 --> 00:38:40,230
would fail now we'll probably just

1080
00:38:38,429 --> 00:38:46,710
return it's the same atom again well I

1081
00:38:40,230 --> 00:38:49,800
don't know we can try anyway once we

1082
00:38:46,710 --> 00:38:51,449
register the window class we can then

1083
00:38:49,800 --> 00:38:54,030
create something of the window class we

1084
00:38:51,449 --> 00:38:57,029
can ask it to create a window for us and

1085
00:38:54,030 --> 00:38:59,550
this will be our window handle we can

1086
00:38:57,030 --> 00:39:01,019
call create window and create window is

1087
00:38:59,550 --> 00:39:03,630
a function that will create a window of

1088
00:39:01,019 --> 00:39:05,940
some class that you specify now we want

1089
00:39:03,630 --> 00:39:07,140
met want to specify extra things to it

1090
00:39:05,940 --> 00:39:08,670
so there's actually two versions as the

1091
00:39:07,139 --> 00:39:10,109
old version which is create window and

1092
00:39:08,670 --> 00:39:11,430
there's a new version which create

1093
00:39:10,110 --> 00:39:13,110
window X which has a few more parameters

1094
00:39:11,429 --> 00:39:14,639
so we're going to use the newer version

1095
00:39:13,110 --> 00:39:16,980
which is create window X which is just a

1096
00:39:14,639 --> 00:39:20,250
sort of a newer version of it and we are

1097
00:39:16,980 --> 00:39:22,380
going to call that oops there we go we

1098
00:39:20,250 --> 00:39:25,289
are going to call that to create our

1099
00:39:22,380 --> 00:39:29,099
window so here we go create window X

1100
00:39:25,289 --> 00:39:30,929
there we go and we are going to fill out

1101
00:39:29,099 --> 00:39:32,849
much like we did with the structure even

1102
00:39:30,929 --> 00:39:34,079
though this one is not structured you

1103
00:39:32,849 --> 00:39:36,119
know I'm just going to go ahead and do a

1104
00:39:34,079 --> 00:39:39,659
rectangular kill there to get rid of all

1105
00:39:36,119 --> 00:39:42,150
those guys there we go so I'm going to

1106
00:39:39,659 --> 00:39:43,679
use this to basically create the window

1107
00:39:42,150 --> 00:39:45,780
I'm going to pass it all the things that

1108
00:39:43,679 --> 00:39:47,250
it asks for now extended style is

1109
00:39:45,780 --> 00:39:48,780
another one of those bit fields like we

1110
00:39:47,250 --> 00:39:50,130
saw up here where you order together a

1111
00:39:48,780 --> 00:39:51,900
bunch of bits that tell you what style

1112
00:39:50,130 --> 00:39:54,059
you want I don't think we want any of

1113
00:39:51,900 --> 00:39:55,500
those styles just yet but we can double

1114
00:39:54,059 --> 00:39:58,349
check in here here's extended window

1115
00:39:55,500 --> 00:39:59,809
styles that we can go in here again MSDN

1116
00:39:58,349 --> 00:40:01,639
being so slow

1117
00:39:59,809 --> 00:40:04,489
a real bummer it is kind of slowing down

1118
00:40:01,639 --> 00:40:06,440
the stream in an unfortunate way so I'm

1119
00:40:04,489 --> 00:40:07,849
actually going to sort of preload a few

1120
00:40:06,440 --> 00:40:10,099
of those here okay here we go

1121
00:40:07,849 --> 00:40:11,360
so the extended files except files if

1122
00:40:10,099 --> 00:40:13,039
you want drag and drop we don't really

1123
00:40:11,360 --> 00:40:16,340
want that top of a window in the taskbar

1124
00:40:13,039 --> 00:40:17,480
client edge posited I don't really know

1125
00:40:16,340 --> 00:40:19,100
paint all descendants from bottom up

1126
00:40:17,480 --> 00:40:20,539
order doesn't really seem like this much

1127
00:40:19,099 --> 00:40:23,750
here we want we're not layer window

1128
00:40:20,539 --> 00:40:26,599
we don't need left alignment scroll bars

1129
00:40:23,750 --> 00:40:28,070
and you know activate bla bla bla bla

1130
00:40:26,599 --> 00:40:29,960
bla bla bla bla bla I don't think we

1131
00:40:28,070 --> 00:40:31,820
need any of these right now so we are

1132
00:40:29,960 --> 00:40:33,829
just going to pass zeroes the extended

1133
00:40:31,820 --> 00:40:35,930
style the class name is of course the

1134
00:40:33,829 --> 00:40:37,130
class that we just registered so we're

1135
00:40:35,929 --> 00:40:39,440
just going to go ahead and straight-up

1136
00:40:37,130 --> 00:40:41,539
pass it out of the the struct that we

1137
00:40:39,440 --> 00:40:43,210
had filled out before the window name

1138
00:40:41,539 --> 00:40:45,829
for now is going to be handmade hero

1139
00:40:43,210 --> 00:40:47,539
until we have some other reason for

1140
00:40:45,829 --> 00:40:49,250
changing that and now we get to the

1141
00:40:47,539 --> 00:40:51,139
actual window style which we do want

1142
00:40:49,250 --> 00:40:52,309
specify and there's a whole bunch of

1143
00:40:51,139 --> 00:40:53,599
things you can say like whether or not

1144
00:40:52,309 --> 00:40:55,549
the window has a border whether it has a

1145
00:40:53,599 --> 00:40:57,380
caption on it you know all sorts of

1146
00:40:55,550 --> 00:40:58,550
things like this but we probably don't

1147
00:40:57,380 --> 00:41:00,650
need to worry too much about those

1148
00:40:58,550 --> 00:41:02,090
because there is a aggregate style that

1149
00:41:00,650 --> 00:41:03,710
basically just creates a default window

1150
00:41:02,090 --> 00:41:05,390
that has the standard stuff that you

1151
00:41:03,710 --> 00:41:06,980
usually want to have on it so we are

1152
00:41:05,389 --> 00:41:08,210
just going to specify that which is an

1153
00:41:06,980 --> 00:41:10,610
aggregation of all of these different

1154
00:41:08,210 --> 00:41:12,769
flags that we might want to use right

1155
00:41:10,610 --> 00:41:13,579
all good so we're going to do that and

1156
00:41:12,769 --> 00:41:15,949
the other thing we're going to specify

1157
00:41:13,579 --> 00:41:17,869
at the moment which we may retract later

1158
00:41:15,949 --> 00:41:19,460
because we may want to create it

1159
00:41:17,869 --> 00:41:21,380
invisible first and then do some

1160
00:41:19,460 --> 00:41:23,389
shenanigans but we are also going to

1161
00:41:21,380 --> 00:41:24,470
best W specify WS visible because if we

1162
00:41:23,389 --> 00:41:26,779
say otherwise

1163
00:41:24,469 --> 00:41:28,669
it may not start visible I don't

1164
00:41:26,780 --> 00:41:29,870
remember overlapped windows because of

1165
00:41:28,670 --> 00:41:31,010
some interaction of the flags actually

1166
00:41:29,869 --> 00:41:32,239
will automatically do this when you

1167
00:41:31,010 --> 00:41:33,680
create them but normally when you create

1168
00:41:32,239 --> 00:41:35,959
a window it is invisible and waits for

1169
00:41:33,679 --> 00:41:38,480
you to show it and we are not going to

1170
00:41:35,960 --> 00:41:41,179
quite do that yet so now we can pass X Y

1171
00:41:38,480 --> 00:41:42,650
width and height for the window and what

1172
00:41:41,179 --> 00:41:44,989
we are going to do there is we are

1173
00:41:42,650 --> 00:41:47,150
actually going to pass this special

1174
00:41:44,989 --> 00:41:48,259
value called CW use default normally you

1175
00:41:47,150 --> 00:41:50,720
would actually specify the coordinates

1176
00:41:48,260 --> 00:41:52,460
of on the screen that you would want to

1177
00:41:50,719 --> 00:41:54,109
do and we don't want to really talk

1178
00:41:52,460 --> 00:41:55,400
about coordinates just yet because that

1179
00:41:54,110 --> 00:41:56,690
is something we're going to talk about

1180
00:41:55,400 --> 00:41:58,369
later so we're just going to pass use

1181
00:41:56,690 --> 00:42:00,530
default which just says open this window

1182
00:41:58,369 --> 00:42:02,630
on the screen anywhere that you want to

1183
00:42:00,530 --> 00:42:05,660
and I believe we could do that for the

1184
00:42:02,630 --> 00:42:07,460
width and height as well yes we can so

1185
00:42:05,659 --> 00:42:08,690
that will take care of for us parent

1186
00:42:07,460 --> 00:42:10,429
window is if you want to have windows

1187
00:42:08,690 --> 00:42:13,670
inside windows which we do not want to

1188
00:42:10,429 --> 00:42:15,139
have so we do not need to do that we can

1189
00:42:13,670 --> 00:42:16,639
passes zero for that and it will assume

1190
00:42:15,139 --> 00:42:18,828
that we are just a top-level window that

1191
00:42:16,639 --> 00:42:20,659
is on the desktop we do not have a menu

1192
00:42:18,829 --> 00:42:22,220
so we don't need that we have an

1193
00:42:20,659 --> 00:42:24,920
instance so we're going to go ahead and

1194
00:42:22,219 --> 00:42:26,298
use that instance and we do not need to

1195
00:42:24,920 --> 00:42:27,470
pass anything to our window there is a

1196
00:42:26,298 --> 00:42:29,480
way that you can basically pass a

1197
00:42:27,469 --> 00:42:30,889
parameter to the window if you were to

1198
00:42:29,480 --> 00:42:32,798
pass something here as this last

1199
00:42:30,889 --> 00:42:35,568
parameter it would basically come in

1200
00:42:32,798 --> 00:42:37,579
during a message called WM create that

1201
00:42:35,568 --> 00:42:39,619
comes in here oops I can't spell

1202
00:42:37,579 --> 00:42:41,630
properly WM create that comes in here

1203
00:42:39,619 --> 00:42:44,869
and you would get that value if you want

1204
00:42:41,630 --> 00:42:47,780
to do something special with it okay so

1205
00:42:44,869 --> 00:42:49,818
this is basically all we need really to

1206
00:42:47,780 --> 00:42:52,130
start up and if we check our window

1207
00:42:49,818 --> 00:42:54,889
handle when it comes back we can see

1208
00:42:52,130 --> 00:42:55,970
down here in the return values if the

1209
00:42:54,889 --> 00:42:57,108
function see the return value is a

1210
00:42:55,969 --> 00:42:59,239
handle to the new window the Flex fails

1211
00:42:57,108 --> 00:43:00,108
return value is null now null happens to

1212
00:42:59,239 --> 00:43:02,298
be equal to zero

1213
00:43:00,108 --> 00:43:04,039
so we can actually just do an if on the

1214
00:43:02,298 --> 00:43:06,139
value and that will be the same as

1215
00:43:04,039 --> 00:43:08,210
checking for now some people love to

1216
00:43:06,139 --> 00:43:09,889
actually type the word null all the time

1217
00:43:08,210 --> 00:43:11,240
just in case null changes from being

1218
00:43:09,889 --> 00:43:13,608
defined to be zero to be something else

1219
00:43:11,239 --> 00:43:14,899
I don't love it so I don't but if you

1220
00:43:13,608 --> 00:43:16,818
are the kind of person who really cares

1221
00:43:14,900 --> 00:43:25,838
about something like that you would type

1222
00:43:16,818 --> 00:43:28,730
this we're not going to do that okay

1223
00:43:25,838 --> 00:43:30,769
same deal here this will almost never

1224
00:43:28,730 --> 00:43:32,929
fail in any practical circumstance but

1225
00:43:30,769 --> 00:43:34,309
if we have a nice error handling system

1226
00:43:32,929 --> 00:43:35,868
that we will develop in the future

1227
00:43:34,309 --> 00:43:37,339
we may want to start handling that so

1228
00:43:35,869 --> 00:43:38,599
I'm going to mark that with to do just

1229
00:43:37,338 --> 00:43:40,670
so we know there's something to do there

1230
00:43:38,599 --> 00:43:41,960
now once we get in here we have one last

1231
00:43:40,670 --> 00:43:44,210
thing to do before we will show our

1232
00:43:41,960 --> 00:43:46,760
window on the screen and that is that we

1233
00:43:44,210 --> 00:43:48,380
need to start a message loop windows

1234
00:43:46,760 --> 00:43:50,000
does not by default start sending

1235
00:43:48,380 --> 00:43:52,608
messages to your window unless you

1236
00:43:50,000 --> 00:43:54,380
actually start pulling them off of

1237
00:43:52,608 --> 00:43:56,598
what's called a queue and the way this

1238
00:43:54,380 --> 00:43:58,548
works is anytime you have an application

1239
00:43:56,599 --> 00:44:00,140
in Windows it creates a queue of

1240
00:43:58,548 --> 00:44:02,059
messages for you that essentially starts

1241
00:44:00,139 --> 00:44:03,440
filling up with messages that Windows is

1242
00:44:02,059 --> 00:44:04,849
trying to send you or anyone else who's

1243
00:44:03,440 --> 00:44:06,470
trying to send you a message through the

1244
00:44:04,849 --> 00:44:08,329
windows system for that matter and what

1245
00:44:06,469 --> 00:44:12,108
we need to do is we need to loop through

1246
00:44:08,329 --> 00:44:14,930
our messages and we need to extract them

1247
00:44:12,108 --> 00:44:15,980
so that we can send them to our window

1248
00:44:14,929 --> 00:44:17,989
and the way we're going to do that

1249
00:44:15,980 --> 00:44:19,670
temporarily is we're going to use that

1250
00:44:17,989 --> 00:44:21,500
with the get message function now what

1251
00:44:19,670 --> 00:44:23,420
the get message function does is that

1252
00:44:21,500 --> 00:44:25,489
basically allows us to pull messages off

1253
00:44:23,420 --> 00:44:27,650
of our queue and if there are no

1254
00:44:25,489 --> 00:44:30,349
messages in the queue it will just

1255
00:44:27,650 --> 00:44:32,119
sit there and wait now it takes a

1256
00:44:30,349 --> 00:44:34,369
pointer again I don't know if you

1257
00:44:32,119 --> 00:44:37,099
remember me discussing in the original

1258
00:44:34,369 --> 00:44:40,339
screen that basically Windows likes to

1259
00:44:37,099 --> 00:44:42,559
use Hungarian notation so LP means long

1260
00:44:40,340 --> 00:44:44,300
pointer so instead of writing this which

1261
00:44:42,559 --> 00:44:46,759
would be much clearer in the function

1262
00:44:44,300 --> 00:44:48,950
signature they write this and make you

1263
00:44:46,760 --> 00:44:50,510
have to know that P means pointer it's

1264
00:44:48,949 --> 00:44:53,569
annoying but that is the way Windows

1265
00:44:50,510 --> 00:44:55,070
works so this is just an MSG which is

1266
00:44:53,570 --> 00:44:58,370
another struct that we will look at in a

1267
00:44:55,070 --> 00:44:59,450
second and that is an MSG pointer so we

1268
00:44:58,369 --> 00:45:01,789
are going to take the address of that

1269
00:44:59,449 --> 00:45:04,159
and pass it to window so it knows where

1270
00:45:01,789 --> 00:45:06,279
to put the message that it retrieves we

1271
00:45:04,159 --> 00:45:08,269
are going to pass the window handle

1272
00:45:06,280 --> 00:45:09,769
actually you know what we're not going

1273
00:45:08,269 --> 00:45:11,269
to pass the window handle because if we

1274
00:45:09,769 --> 00:45:13,880
have any other windows or messages not

1275
00:45:11,269 --> 00:45:16,670
bound we may want to get them so we can

1276
00:45:13,880 --> 00:45:18,500
actually pass zero for that or no which

1277
00:45:16,670 --> 00:45:20,780
will retrieve messages from any window

1278
00:45:18,500 --> 00:45:22,489
that belongs to us so that's kind of

1279
00:45:20,780 --> 00:45:24,230
handy so we'll just grab all of the

1280
00:45:22,489 --> 00:45:25,879
messages that are coming in and these

1281
00:45:24,230 --> 00:45:27,469
two filters here filter min and Max are

1282
00:45:25,880 --> 00:45:28,579
if we're only looking for specific kinds

1283
00:45:27,469 --> 00:45:30,589
of messages which we're not we're

1284
00:45:28,579 --> 00:45:31,849
looking for all the messages that might

1285
00:45:30,590 --> 00:45:34,070
be bound for our window because we might

1286
00:45:31,849 --> 00:45:39,230
want to process them so what we can do

1287
00:45:34,070 --> 00:45:40,730
there is we can pass essentially dummy

1288
00:45:39,230 --> 00:45:42,500
values to that to make sure that we get

1289
00:45:40,730 --> 00:45:44,329
all of them let's see how that actually

1290
00:45:42,500 --> 00:45:46,280
works here I forget the magic

1291
00:45:44,329 --> 00:45:49,519
incantation these are values for service

1292
00:45:46,280 --> 00:45:50,810
messages use W if you are both 0 get

1293
00:45:49,519 --> 00:45:51,800
veterans all available messages so

1294
00:45:50,809 --> 00:45:53,150
basically what we want to do is just

1295
00:45:51,800 --> 00:45:56,090
pass all zeros of this function

1296
00:45:53,150 --> 00:45:58,700
essentially and that will be what we

1297
00:45:56,090 --> 00:46:00,980
want to do now we want to keep going we

1298
00:45:58,699 --> 00:46:03,139
want to be doing this for a very long

1299
00:46:00,980 --> 00:46:04,550
time and as you can see it says if the

1300
00:46:03,139 --> 00:46:07,219
function retrieves a message other than

1301
00:46:04,550 --> 00:46:09,350
WM quick the return value is nonzero and

1302
00:46:07,219 --> 00:46:11,299
WM quit is the thing that would

1303
00:46:09,349 --> 00:46:13,099
basically be someone's posting a message

1304
00:46:11,300 --> 00:46:14,360
to our application telling it to exit so

1305
00:46:13,099 --> 00:46:18,319
what we would like to do is basically

1306
00:46:14,360 --> 00:46:21,410
keep running until get message returns

1307
00:46:18,320 --> 00:46:23,120
false right if it wasn't a WM quit now

1308
00:46:21,409 --> 00:46:24,379
this is not exactly how we will use our

1309
00:46:23,119 --> 00:46:25,730
message loop in the future so this is a

1310
00:46:24,380 --> 00:46:27,349
little bit of a stand-in so date don't

1311
00:46:25,730 --> 00:46:30,050
take anything I'm saying here

1312
00:46:27,349 --> 00:46:31,519
too seriously because yes you can see

1313
00:46:30,050 --> 00:46:33,560
this here the possibility of a negative

1314
00:46:31,519 --> 00:46:36,110
1 return value in the case that h1 is an

1315
00:46:33,559 --> 00:46:37,549
invalid parameter means that such code

1316
00:46:36,110 --> 00:46:38,960
can lead to fatal application errors

1317
00:46:37,550 --> 00:46:39,769
instead use code like this you can see

1318
00:46:38,960 --> 00:46:41,000
that they've they've written it here

1319
00:46:39,769 --> 00:46:42,679
this was the thing that I was referring

1320
00:46:41,000 --> 00:46:43,670
- we're actually not going to using get

1321
00:46:42,679 --> 00:46:45,409
message so we don't have to worry about

1322
00:46:43,670 --> 00:46:47,599
too much about this but at the risk of

1323
00:46:45,409 --> 00:46:50,000
somebody like looking at this and doing

1324
00:46:47,599 --> 00:46:52,190
the wrong thing maybe we'll just do it

1325
00:46:50,000 --> 00:46:53,449
like this just even to start off on the

1326
00:46:52,190 --> 00:46:55,909
right foot like I said we won't actually

1327
00:46:53,449 --> 00:46:58,309
be using this in the future that looks

1328
00:46:55,909 --> 00:46:59,629
like I've got a oh I did it again I said

1329
00:46:58,309 --> 00:47:01,309
I would never use Mira torii for on the

1330
00:46:59,630 --> 00:47:03,349
stream sorry didn't mean to do that

1331
00:47:01,309 --> 00:47:05,389
all right there we go there's our four

1332
00:47:03,349 --> 00:47:07,340
statement so we are going to go ahead

1333
00:47:05,389 --> 00:47:10,250
and take a look at get message here it's

1334
00:47:07,340 --> 00:47:12,380
funny that it says bool but it says it

1335
00:47:10,250 --> 00:47:15,800
can return a negative one it's kind of

1336
00:47:12,380 --> 00:47:18,108
fantastic right yeah what are you going

1337
00:47:15,800 --> 00:47:20,420
to do ladies and gentlemen but basically

1338
00:47:18,108 --> 00:47:22,639
what we'll do here is we'll say this is

1339
00:47:20,420 --> 00:47:26,659
the message result that we're going to

1340
00:47:22,639 --> 00:47:28,819
get back it comes and then we will check

1341
00:47:26,659 --> 00:47:31,339
on the message result to make sure that

1342
00:47:28,820 --> 00:47:34,730
it is above zero if it is above zero

1343
00:47:31,340 --> 00:47:38,119
then we will handle it otherwise we will

1344
00:47:34,730 --> 00:47:40,909
break out of our out of our loop here

1345
00:47:38,119 --> 00:47:43,010
and exit so that should be fine now I'm

1346
00:47:40,909 --> 00:47:45,170
curious to know what they actually

1347
00:47:43,010 --> 00:47:47,630
define bool to be they must define it to

1348
00:47:45,170 --> 00:47:49,460
be a integer type of some kind because

1349
00:47:47,630 --> 00:47:51,559
if rule was really only a boolean

1350
00:47:49,460 --> 00:47:52,670
somehow which it Odyssey can't be

1351
00:47:51,559 --> 00:47:55,009
because that wouldn't probably work in

1352
00:47:52,670 --> 00:47:57,289
in old's old-school sea but if that was

1353
00:47:55,010 --> 00:47:58,820
a boolean of some kind then we would not

1354
00:47:57,289 --> 00:48:00,769
be able to test it for a negative value

1355
00:47:58,820 --> 00:48:01,789
so I'm assuming that's an in I guess we

1356
00:48:00,769 --> 00:48:03,619
don't need to look it up right now but

1357
00:48:01,789 --> 00:48:05,210
point being I was doing pool is actually

1358
00:48:03,619 --> 00:48:08,088
some kind of an integer that they'd find

1359
00:48:05,210 --> 00:48:10,338
that all right so we are going to check

1360
00:48:08,088 --> 00:48:11,809
here if if we get this then what we have

1361
00:48:10,338 --> 00:48:14,960
to do is we have to tell Windows to

1362
00:48:11,809 --> 00:48:17,960
actually translate and dispatch this

1363
00:48:14,960 --> 00:48:19,789
message now the this is total windows

1364
00:48:17,960 --> 00:48:22,338
minutia basically what it does is

1365
00:48:19,789 --> 00:48:26,000
translate message is a thing that turns

1366
00:48:22,338 --> 00:48:27,889
keyboard messages into more proper

1367
00:48:26,000 --> 00:48:30,170
keyboard messages we do not have to

1368
00:48:27,889 --> 00:48:31,549
worry about this at all right now but we

1369
00:48:30,170 --> 00:48:33,769
will have to think about it a little bit

1370
00:48:31,550 --> 00:48:36,859
later because basically what we have to

1371
00:48:33,769 --> 00:48:38,150
do is we have to field keyboard messages

1372
00:48:36,858 --> 00:48:40,279
in the future and we will want them to

1373
00:48:38,150 --> 00:48:41,630
be translated properly now for games it

1374
00:48:40,280 --> 00:48:43,250
may never actually matter about a mystic

1375
00:48:41,630 --> 00:48:45,230
that in there anyway so ignore this for

1376
00:48:43,250 --> 00:48:46,699
now it's a thing that basically takes a

1377
00:48:45,230 --> 00:48:49,070
message that came in off of the message

1378
00:48:46,699 --> 00:48:52,009
queue does some processing on it and

1379
00:48:49,070 --> 00:48:54,380
gets it ready to actually send it out so

1380
00:48:52,010 --> 00:48:56,390
here we go that dispatch message

1381
00:48:54,380 --> 00:48:58,430
the function that will actually send

1382
00:48:56,389 --> 00:49:00,250
messages to windows that have them and

1383
00:48:58,429 --> 00:49:02,569
you can see it's just a thing that again

1384
00:49:00,250 --> 00:49:04,369
actually dispatches the message now

1385
00:49:02,570 --> 00:49:06,410
these things technically return error

1386
00:49:04,369 --> 00:49:07,909
codes but we have no way of actually

1387
00:49:06,409 --> 00:49:08,989
handling the error codes if Windows did

1388
00:49:07,909 --> 00:49:10,309
not want to dispatch one of this

1389
00:49:08,989 --> 00:49:12,769
messages there's nothing we can do about

1390
00:49:10,309 --> 00:49:14,389
it so there's probably not much point in

1391
00:49:12,769 --> 00:49:16,250
actually checking these we could exit

1392
00:49:14,389 --> 00:49:18,349
the application but that seems like a

1393
00:49:16,250 --> 00:49:19,489
little draconian just for failure so I'm

1394
00:49:18,349 --> 00:49:21,469
not sure what we would do there we could

1395
00:49:19,489 --> 00:49:22,789
log it maybe we could log it in the

1396
00:49:21,469 --> 00:49:26,149
future but I don't really even know if

1397
00:49:22,789 --> 00:49:28,309
that's necessary so this will go ahead

1398
00:49:26,150 --> 00:49:30,710
and loop forever until we get back

1399
00:49:28,309 --> 00:49:32,299
something other than a positive result

1400
00:49:30,710 --> 00:49:35,449
from get message let's go ahead and

1401
00:49:32,300 --> 00:49:37,820
compile that we have some undefined

1402
00:49:35,449 --> 00:49:41,059
errors we undefined code there in them

1403
00:49:37,820 --> 00:49:44,000
in CSU's default so for some reason that

1404
00:49:41,059 --> 00:49:47,059
was not there why so I got that straight

1405
00:49:44,000 --> 00:49:50,780
out of create window did I not so I

1406
00:49:47,059 --> 00:49:53,239
wonder why that was not recognized did I

1407
00:49:50,780 --> 00:49:53,780
spell it wrong or something let's find

1408
00:49:53,239 --> 00:49:57,319
out

1409
00:49:53,780 --> 00:50:00,019
so I wanted to pass si oh it's CW I used

1410
00:49:57,320 --> 00:50:03,260
class style that was that's up in here

1411
00:50:00,019 --> 00:50:06,739
for CS i was i was like CSM to see this

1412
00:50:03,260 --> 00:50:08,990
is CW which is I guess for window create

1413
00:50:06,739 --> 00:50:10,399
window let's say I don't know who knows

1414
00:50:08,989 --> 00:50:11,419
how they name things but they name them

1415
00:50:10,400 --> 00:50:13,480
so there we go

1416
00:50:11,420 --> 00:50:15,920
if we go over here and run our program

1417
00:50:13,480 --> 00:50:17,510
well got to unset that breakpoint first

1418
00:50:15,920 --> 00:50:18,980
but you will notice that we finally have

1419
00:50:17,510 --> 00:50:20,900
a window on the screen there is our

1420
00:50:18,980 --> 00:50:22,369
lovely window and if we go over here and

1421
00:50:20,900 --> 00:50:25,070
look at the debug output you will see

1422
00:50:22,369 --> 00:50:25,429
that we got our window messages there

1423
00:50:25,070 --> 00:50:28,100
they are

1424
00:50:25,429 --> 00:50:30,230
activate app WM size and that was

1425
00:50:28,099 --> 00:50:31,730
because as I go ahead and drag around in

1426
00:50:30,230 --> 00:50:33,650
here I'm generating tons of WM size

1427
00:50:31,730 --> 00:50:35,329
messages if I click on this we will get

1428
00:50:33,650 --> 00:50:37,730
the WM close message as you can see and

1429
00:50:35,329 --> 00:50:39,799
we will never get a WM destroy message

1430
00:50:37,730 --> 00:50:42,349
no matter what we do because that would

1431
00:50:39,800 --> 00:50:43,670
have to come basically from something

1432
00:50:42,349 --> 00:50:45,769
that was going to forcefully try to

1433
00:50:43,670 --> 00:50:47,480
close the window normally we would be

1434
00:50:45,769 --> 00:50:49,820
calling that ourselves so there you go

1435
00:50:47,480 --> 00:50:51,829
we have a window on the screen so now

1436
00:50:49,820 --> 00:50:53,930
what we would like to do obviously is we

1437
00:50:51,829 --> 00:50:55,880
would like to draw something to it just

1438
00:50:53,929 --> 00:50:57,980
to prove that we finally have a window

1439
00:50:55,880 --> 00:50:59,570
that actually has something on it and

1440
00:50:57,980 --> 00:51:01,460
the way that we can do that is we can

1441
00:50:59,570 --> 00:51:04,970
feel the message called WM paint

1442
00:51:01,460 --> 00:51:08,030
so inside WM paint there we go

1443
00:51:04,969 --> 00:51:10,848
we are going to use that DC thing that I

1444
00:51:08,030 --> 00:51:13,880
was talking about so basically what we

1445
00:51:10,849 --> 00:51:16,250
can do inside WM paint is we can go

1446
00:51:13,880 --> 00:51:19,039
ahead and ask windows to allow us to

1447
00:51:16,250 --> 00:51:21,349
paint to our window using their graphics

1448
00:51:19,039 --> 00:51:23,568
API because on Windows if we're painting

1449
00:51:21,349 --> 00:51:24,619
to a window we have to use it and so

1450
00:51:23,568 --> 00:51:26,719
what they have is they have a thing

1451
00:51:24,619 --> 00:51:28,579
called begin paint and end paint which

1452
00:51:26,719 --> 00:51:31,699
allow us to say we are about to update

1453
00:51:28,579 --> 00:51:34,130
our window here it is right and then we

1454
00:51:31,699 --> 00:51:36,980
are going to go ahead and use and paint

1455
00:51:34,130 --> 00:51:39,530
to tell it when we are done so here we

1456
00:51:36,980 --> 00:51:42,409
go - oops it was right there and just

1457
00:51:39,530 --> 00:51:45,410
click on it and paint there it is so we

1458
00:51:42,409 --> 00:51:47,389
are going to go into n paint there we go

1459
00:51:45,409 --> 00:51:49,489
and we're going to pass that window

1460
00:51:47,389 --> 00:51:51,799
handle that we came in that we got here

1461
00:51:49,489 --> 00:51:53,868
we're going to pass our window handle we

1462
00:51:51,800 --> 00:51:58,269
are going to pass the address of a

1463
00:51:53,869 --> 00:52:00,829
paints truck all right let's see paint

1464
00:51:58,269 --> 00:52:03,588
that it can fill out for us and it is

1465
00:52:00,829 --> 00:52:05,900
going to return one of those contacts

1466
00:52:03,588 --> 00:52:07,309
for us one of those device contacts so

1467
00:52:05,900 --> 00:52:08,588
let's take a little documentation of

1468
00:52:07,309 --> 00:52:11,989
that so we understand what's going on

1469
00:52:08,588 --> 00:52:13,519
inside begin paint we pass it the window

1470
00:52:11,989 --> 00:52:15,169
that we are trying to paint right here

1471
00:52:13,519 --> 00:52:17,179
right the handle to the window to be

1472
00:52:15,170 --> 00:52:18,500
repainted and we pass it a pointer to

1473
00:52:17,179 --> 00:52:19,848
one of these paints trucks which is

1474
00:52:18,500 --> 00:52:21,679
another one of these trucks that Windows

1475
00:52:19,849 --> 00:52:24,050
uses to pass information back and forth

1476
00:52:21,679 --> 00:52:25,460
it's passing it out to us this time so

1477
00:52:24,050 --> 00:52:26,480
what it's going to do is it's going to

1478
00:52:25,460 --> 00:52:27,858
fill this out with a bunch of

1479
00:52:26,480 --> 00:52:31,010
information that we need such as a

1480
00:52:27,858 --> 00:52:32,598
rectangle structure which tells us where

1481
00:52:31,010 --> 00:52:34,910
we need to paint a thing which says

1482
00:52:32,599 --> 00:52:36,380
whether or not should be erased this

1483
00:52:34,909 --> 00:52:38,568
sorts of stuff whether it's an

1484
00:52:36,380 --> 00:52:40,338
incremental update those sorts of things

1485
00:52:38,568 --> 00:52:41,809
we're not allowed to test those those

1486
00:52:40,338 --> 00:52:43,759
are internal to the system as you can

1487
00:52:41,809 --> 00:52:46,250
see here labeled that way but we are

1488
00:52:43,760 --> 00:52:47,720
going to go ahead and filled that in a

1489
00:52:46,250 --> 00:52:48,949
relatively straightforward way so we're

1490
00:52:47,719 --> 00:52:50,328
going to do that and then n paint of

1491
00:52:48,949 --> 00:52:51,949
course just takes the window and the

1492
00:52:50,329 --> 00:52:53,869
paints truck back so that it knows which

1493
00:52:51,949 --> 00:52:56,179
that you know just basically to close

1494
00:52:53,869 --> 00:52:59,809
off the paint there we go so all we are

1495
00:52:56,179 --> 00:53:02,809
going to do is we are going to do a pat

1496
00:52:59,809 --> 00:53:04,880
blit padlet is a function which

1497
00:53:02,809 --> 00:53:06,828
basically just tells windows it's sort

1498
00:53:04,880 --> 00:53:09,920
of a graphics utility which basically

1499
00:53:06,829 --> 00:53:11,869
tells it to do blackness or whiteness or

1500
00:53:09,920 --> 00:53:13,010
do some kind of another bit operation to

1501
00:53:11,869 --> 00:53:14,990
things so we just want to fill our

1502
00:53:13,010 --> 00:53:16,849
window with white for now that's going

1503
00:53:14,989 --> 00:53:18,259
to be a very simple thing for us to do

1504
00:53:16,849 --> 00:53:21,050
just so we can see

1505
00:53:18,260 --> 00:53:23,480
we are painting to our window the way

1506
00:53:21,050 --> 00:53:25,190
that we want to okay device context

1507
00:53:23,480 --> 00:53:28,820
passes the device context that we're

1508
00:53:25,190 --> 00:53:30,650
painting with it takes the left the size

1509
00:53:28,820 --> 00:53:32,390
of the window right which we already

1510
00:53:30,650 --> 00:53:33,980
actually will we do know what it is I'll

1511
00:53:32,389 --> 00:53:36,460
show you what it is in a second and then

1512
00:53:33,980 --> 00:53:39,199
eventually it takes a flag that says

1513
00:53:36,460 --> 00:53:41,059
sorry a value these are constants right

1514
00:53:39,199 --> 00:53:43,519
whiteness blackness DST invert these are

1515
00:53:41,059 --> 00:53:45,049
constants defined in the windows H and s

1516
00:53:43,519 --> 00:53:48,349
already sorted header files that t'elp

1517
00:53:45,050 --> 00:53:49,940
applet what kind of fill it should do to

1518
00:53:48,349 --> 00:53:51,650
the rectangle that we are going to

1519
00:53:49,940 --> 00:53:53,900
specify now what is the rectangle well

1520
00:53:51,650 --> 00:53:56,289
fortunately for us we actually know what

1521
00:53:53,900 --> 00:53:59,090
the rectangle is because we got it back

1522
00:53:56,289 --> 00:54:01,550
from begin paint remember when I said

1523
00:53:59,090 --> 00:54:03,289
inside begin paint there was this paint

1524
00:54:01,550 --> 00:54:05,210
struct here and this paint struct

1525
00:54:03,289 --> 00:54:07,369
basically tells us what we need to know

1526
00:54:05,210 --> 00:54:08,809
the RC paint if you go down and look at

1527
00:54:07,369 --> 00:54:10,700
the documentation for that is a rect

1528
00:54:08,809 --> 00:54:12,079
structure that specifies the upper left

1529
00:54:10,699 --> 00:54:14,809
and lower right corners of the rectangle

1530
00:54:12,079 --> 00:54:17,750
in which the painting is requested right

1531
00:54:14,809 --> 00:54:20,659
so we basically have in here after we do

1532
00:54:17,750 --> 00:54:24,019
that we have a rectangle we can go paint

1533
00:54:20,659 --> 00:54:25,279
our C paint like that and we can access

1534
00:54:24,019 --> 00:54:27,469
its members now what are the members of

1535
00:54:25,280 --> 00:54:30,109
erect they are what you might expect the

1536
00:54:27,469 --> 00:54:33,259
left the top the right and the bottom

1537
00:54:30,108 --> 00:54:35,719
positions of that rectangle right so min

1538
00:54:33,260 --> 00:54:36,859
and Max on X&amp;Y again don't worry too

1539
00:54:35,719 --> 00:54:39,469
much about coordinate systems we'll be

1540
00:54:36,858 --> 00:54:40,789
covering them in the next stream more

1541
00:54:39,469 --> 00:54:42,529
approximate even the string after that

1542
00:54:40,789 --> 00:54:44,509
and they are lungs which are just yet

1543
00:54:42,530 --> 00:54:46,310
again another definition for int windows

1544
00:54:44,510 --> 00:54:47,960
has a ton of definitions for integers

1545
00:54:46,309 --> 00:54:49,940
depending on what size they are or what

1546
00:54:47,960 --> 00:54:51,829
exactly they correspond to but these are

1547
00:54:49,940 --> 00:54:55,159
basically just integer values as we will

1548
00:54:51,829 --> 00:54:58,539
see when we step into this code so when

1549
00:54:55,159 --> 00:55:02,358
we do Pat blit let's go back to Pat blit

1550
00:54:58,539 --> 00:55:04,130
when we did Pat blitt oops that's the

1551
00:55:02,358 --> 00:55:07,130
one we actually want there it is it

1552
00:55:04,130 --> 00:55:08,809
needs a left it needs a basically the

1553
00:55:07,130 --> 00:55:10,430
left the top it is the width and the

1554
00:55:08,809 --> 00:55:12,710
height but we didn't have the width and

1555
00:55:10,429 --> 00:55:14,509
height in our rec structure we have the

1556
00:55:12,710 --> 00:55:16,550
right and the bottom which are maxes so

1557
00:55:14,510 --> 00:55:18,680
we have to subtract right from left and

1558
00:55:16,550 --> 00:55:19,910
bottom from top to get that width we

1559
00:55:18,679 --> 00:55:20,960
want to see how big those are so we're

1560
00:55:19,909 --> 00:55:23,629
going to have to do that right we're

1561
00:55:20,960 --> 00:55:26,960
going to have to do bottom and like this

1562
00:55:23,630 --> 00:55:31,420
- top right and we're going to have to

1563
00:55:26,960 --> 00:55:34,059
do right - left in order to get

1564
00:55:31,420 --> 00:55:35,108
those widths and Heights that we wanted

1565
00:55:34,059 --> 00:55:37,599
right oops

1566
00:55:35,108 --> 00:55:40,869
backwards height is going to be that one

1567
00:55:37,599 --> 00:55:43,960
and width right and then we already know

1568
00:55:40,869 --> 00:55:46,960
what our x and y are right because we

1569
00:55:43,960 --> 00:55:48,639
already know that our that our X is this

1570
00:55:46,960 --> 00:55:50,019
and you know what I'm going to should

1571
00:55:48,639 --> 00:55:51,068
probably pass ones that Pat but once

1572
00:55:50,018 --> 00:55:52,389
those are lungs in the air but the

1573
00:55:51,068 --> 00:55:54,849
defined events here so we might as well

1574
00:55:52,389 --> 00:55:56,409
convert them out to ends like I said

1575
00:55:54,849 --> 00:55:58,329
Windows has so many definitions for in

1576
00:55:56,409 --> 00:56:00,129
sits kind of a rat's nest most of its

1577
00:55:58,329 --> 00:56:03,059
historical at this point but what are

1578
00:56:00,130 --> 00:56:07,990
you gonna do we have the X and y for a

1579
00:56:03,059 --> 00:56:12,339
for the the recti light so we can go

1580
00:56:07,989 --> 00:56:15,429
ahead and do it wit height there we go

1581
00:56:12,338 --> 00:56:17,679
nice and clean see how we compile pat

1582
00:56:15,429 --> 00:56:19,298
blitt well we know how to deal with this

1583
00:56:17,679 --> 00:56:21,278
right taught you in the last stream if

1584
00:56:19,298 --> 00:56:23,679
something if an import symbol is not

1585
00:56:21,278 --> 00:56:26,798
defined we go down to the bottom here we

1586
00:56:23,679 --> 00:56:30,098
take a look at who it was and we grab

1587
00:56:26,798 --> 00:56:32,380
that library GDI 32 dot Lib is what we

1588
00:56:30,099 --> 00:56:34,720
need for pep lit so we are going to go

1589
00:56:32,380 --> 00:56:38,259
into our build up bat and stick it on

1590
00:56:34,719 --> 00:56:41,139
the end there we go compile and done now

1591
00:56:38,259 --> 00:56:42,880
when we run we should see a white window

1592
00:56:41,139 --> 00:56:43,690
ladies and gentlemen pretty nice huh

1593
00:56:42,880 --> 00:56:46,838
it's lovely

1594
00:56:43,690 --> 00:56:48,909
totally lovely absolutely fabulous that

1595
00:56:46,838 --> 00:56:51,038
is the best white window that I bet you

1596
00:56:48,909 --> 00:56:52,929
have ever seen now just to prove how

1597
00:56:51,039 --> 00:56:54,849
awesome we are because you know that we

1598
00:56:52,929 --> 00:56:57,278
are why don't we do something absolutely

1599
00:56:54,849 --> 00:56:58,838
ridiculous here why don't we just do

1600
00:56:57,278 --> 00:57:00,278
sometimes they'll paint it with black

1601
00:56:58,838 --> 00:57:01,778
and sometimes they'll paint it with

1602
00:57:00,278 --> 00:57:03,670
white because there is blackness and

1603
00:57:01,778 --> 00:57:05,710
there was whiteness right so what I

1604
00:57:03,670 --> 00:57:09,430
could do is like a look at pop put here

1605
00:57:05,710 --> 00:57:12,400
go up here and this is just a little a

1606
00:57:09,429 --> 00:57:13,989
little amusing diversion

1607
00:57:12,400 --> 00:57:15,548
that's a D word that it wants is the

1608
00:57:13,989 --> 00:57:17,379
last thing so what we're going to do

1609
00:57:15,548 --> 00:57:19,389
here is going to take our D word which

1610
00:57:17,380 --> 00:57:21,608
is our operation we are going to sign it

1611
00:57:19,389 --> 00:57:23,650
to whiteness right but I'm going to use

1612
00:57:21,608 --> 00:57:26,528
the static keyword now what the static

1613
00:57:23,650 --> 00:57:29,410
keyword is is normally every variable is

1614
00:57:26,528 --> 00:57:31,389
local to us right every variable is

1615
00:57:29,409 --> 00:57:33,219
local to where we defined it remember I

1616
00:57:31,389 --> 00:57:36,009
said these blocks these braces the

1617
00:57:33,219 --> 00:57:37,358
variables are local to us but what I'm

1618
00:57:36,009 --> 00:57:39,909
going to do is I'm actually say you know

1619
00:57:37,358 --> 00:57:42,098
what I want this variable to persist I

1620
00:57:39,909 --> 00:57:44,170
want you to create it and I want it to

1621
00:57:42,099 --> 00:57:45,250
stick around so that when I come back

1622
00:57:44,170 --> 00:57:47,710
through here

1623
00:57:45,250 --> 00:57:50,650
it will actually be set to whatever it's

1624
00:57:47,710 --> 00:57:52,030
the the value was the last time we ran

1625
00:57:50,650 --> 00:57:53,470
this thing so it's basically creating

1626
00:57:52,030 --> 00:57:55,660
permanent storage essentially a global

1627
00:57:53,469 --> 00:57:58,149
variable it's almost like we were to

1628
00:57:55,659 --> 00:57:59,980
declare it out here as a global variable

1629
00:57:58,150 --> 00:58:02,710
but unlike a global variable it is

1630
00:57:59,980 --> 00:58:05,289
locally scoped to this area in terms of

1631
00:58:02,710 --> 00:58:07,210
lexical like it lexically scoped meaning

1632
00:58:05,289 --> 00:58:09,039
that we can't refer to it anywhere else

1633
00:58:07,210 --> 00:58:12,039
so it keeps it kind of contained but it

1634
00:58:09,039 --> 00:58:14,079
is global now I never ever ever ever use

1635
00:58:12,039 --> 00:58:16,719
these they're a very very very very bad

1636
00:58:14,079 --> 00:58:20,380
idea in code that I actually need to

1637
00:58:16,719 --> 00:58:22,689
ship but I always use them when I am

1638
00:58:20,380 --> 00:58:23,860
debugging because it's very handy to be

1639
00:58:22,690 --> 00:58:25,960
able to stick something in really

1640
00:58:23,860 --> 00:58:27,160
quickly that is there and this is F what

1641
00:58:25,960 --> 00:58:28,420
I'm doing right now I just want to debug

1642
00:58:27,159 --> 00:58:29,799
something to make sure that we are

1643
00:58:28,420 --> 00:58:32,650
actually painting our window every time

1644
00:58:29,800 --> 00:58:34,750
so I'm going to use one now but I never

1645
00:58:32,650 --> 00:58:36,130
use these basically because they create

1646
00:58:34,750 --> 00:58:37,599
nightmares for thread safety and all

1647
00:58:36,130 --> 00:58:39,550
sorts of other stuff so we will see a

1648
00:58:37,599 --> 00:58:40,480
little more of that later but don't do

1649
00:58:39,550 --> 00:58:42,340
this

1650
00:58:40,480 --> 00:58:44,019
willy-nilly this is something I'm only

1651
00:58:42,340 --> 00:58:45,370
doing right now for debugging purposes

1652
00:58:44,019 --> 00:58:47,469
so basically what'll happen is the first

1653
00:58:45,369 --> 00:58:49,630
time we come through here when you sees

1654
00:58:47,469 --> 00:58:50,889
this this static what it will do is it

1655
00:58:49,630 --> 00:58:52,240
will initialize operation to whiteness

1656
00:58:50,889 --> 00:58:53,799
but the rest of the times through it

1657
00:58:52,239 --> 00:58:55,509
will not initialize it only the first

1658
00:58:53,800 --> 00:58:57,460
time through will it original eyes it to

1659
00:58:55,510 --> 00:58:59,440
whiteness the rest of the times it will

1660
00:58:57,460 --> 00:59:01,570
just leave it at whatever value it was

1661
00:58:59,440 --> 00:59:03,460
so what that means is we can every time

1662
00:59:01,570 --> 00:59:06,309
we go through here after we do this

1663
00:59:03,460 --> 00:59:08,650
clear like this we can go and say if the

1664
00:59:06,309 --> 00:59:10,960
operation was whiteness right remember

1665
00:59:08,650 --> 00:59:14,710
the if statements from our intro stream

1666
00:59:10,960 --> 00:59:16,840
we can then set it to blackness and if

1667
00:59:14,710 --> 00:59:18,490
it was not equal to whiteness we will

1668
00:59:16,840 --> 00:59:19,780
set it back to whiteness which will

1669
00:59:18,489 --> 00:59:21,039
basically create a toggle so when it

1670
00:59:19,780 --> 00:59:22,570
comes to through here and it's set to

1671
00:59:21,039 --> 00:59:23,619
whiteness it'll turn to black wet set to

1672
00:59:22,570 --> 00:59:24,970
black he'll turn to white and they'll

1673
00:59:23,619 --> 00:59:28,119
toggle back and forth and back and forth

1674
00:59:24,969 --> 00:59:29,949
and back and forth right good we hit run

1675
00:59:28,119 --> 00:59:32,769
we get our white window which is what we

1676
00:59:29,949 --> 00:59:34,210
expect we then drag it and there we go

1677
00:59:32,769 --> 00:59:35,920
don't know if the stream can keep up

1678
00:59:34,210 --> 00:59:38,889
with that but we are basically creating

1679
00:59:35,920 --> 00:59:41,019
a Epilepsy window that just to

1680
00:59:38,889 --> 00:59:45,369
demonstrate when we are we drawing the

1681
00:59:41,019 --> 00:59:49,030
window pretty good for One Nights work

1682
00:59:45,369 --> 00:59:51,489
at only an hour so hopefully that is

1683
00:59:49,030 --> 00:59:53,590
enough to tide you over till tomorrow

1684
00:59:51,489 --> 00:59:55,779
when we will field these messages a

1685
00:59:53,590 --> 00:59:58,019
little more appropriately and we will

1686
00:59:55,780 --> 00:59:59,730
actually create a bit

1687
00:59:58,019 --> 01:00:02,730
app that we can blitt to our window

1688
00:59:59,730 --> 01:00:04,530
which will take it up to the point where

1689
01:00:02,730 --> 01:00:07,199
we can actually start to use it to

1690
01:00:04,530 --> 01:00:10,380
render our game which is what we need so

1691
01:00:07,199 --> 01:00:11,819
I hope that was a good enough quick

1692
01:00:10,380 --> 01:00:14,010
introduction of how to get a Windows

1693
01:00:11,820 --> 01:00:15,030
window onto the screen within the space

1694
01:00:14,010 --> 01:00:17,070
of an hour there's only so much we can

1695
01:00:15,030 --> 01:00:19,500
do but we will be going through tomorrow

1696
01:00:17,070 --> 01:00:21,539
and flushing this out in more detail and

1697
01:00:19,500 --> 01:00:24,840
getting a nice proper window that we can

1698
01:00:21,539 --> 01:00:27,119
actually use for rendering our game in

1699
01:00:24,840 --> 01:00:29,700
good shape so thank you so much everyone

1700
01:00:27,119 --> 01:00:33,539
for joining me I will pause the stream

1701
01:00:29,699 --> 01:00:37,159
now and we will go ahead and answer Q&amp;A

1702
01:00:33,539 --> 01:00:37,159
s as soon as I toggle the recording

