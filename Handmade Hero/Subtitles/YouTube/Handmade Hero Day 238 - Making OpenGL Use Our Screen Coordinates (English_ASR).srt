1
00:00:00,770 --> 00:00:06,060
here we go hello everyone and welcome to

2
00:00:04,710 --> 00:00:09,660
handmade Hero the show we code a

3
00:00:06,059 --> 00:00:13,410
complete game live on stream we are back

4
00:00:09,660 --> 00:00:16,109
for an exciting Monday after last Friday

5
00:00:13,410 --> 00:00:17,490
when we implemented Hardware display of

6
00:00:16,109 --> 00:00:19,580
our game so now we're actually going

7
00:00:17,489 --> 00:00:21,570
through the GPU to display our game I

8
00:00:19,579 --> 00:00:24,358
thought that was gonna take longer than

9
00:00:21,570 --> 00:00:26,518
it did it turned out to really not take

10
00:00:24,359 --> 00:00:27,180
very long at all which means here we are

11
00:00:26,518 --> 00:00:30,089
on Monday

12
00:00:27,179 --> 00:00:31,678
and I don't necessarily know what we

13
00:00:30,089 --> 00:00:34,439
should be doing there's a number of

14
00:00:31,678 --> 00:00:35,519
different things we could do like I said

15
00:00:34,439 --> 00:00:38,159
there's a number of things on our list

16
00:00:35,520 --> 00:00:42,180
that we want to do and I'm not sure what

17
00:00:38,159 --> 00:00:46,769
the the most logical one is and so

18
00:00:42,179 --> 00:00:48,988
there's a I guess what I would say is it

19
00:00:46,770 --> 00:00:50,489
feels to me like probably the best thing

20
00:00:48,988 --> 00:00:52,500
to do is since we had some momentum on

21
00:00:50,488 --> 00:00:55,709
the GPU stuff and people don't seem to

22
00:00:52,500 --> 00:00:58,378
be minding to much that we're doing GPU

23
00:00:55,710 --> 00:01:00,620
stuff I think maybe the most convenient

24
00:00:58,378 --> 00:01:03,149
thing for us to do would just be to

25
00:01:00,619 --> 00:01:05,459
actually look a little more seriously at

26
00:01:03,149 --> 00:01:07,560
the GPU stuff and maybe show how to make

27
00:01:05,459 --> 00:01:09,899
our renderer go through the GPU so that

28
00:01:07,560 --> 00:01:11,219
we can basically pick which one we want

29
00:01:09,900 --> 00:01:12,780
to do whether we want our software

30
00:01:11,219 --> 00:01:15,269
rendering or whether we want our GPU

31
00:01:12,780 --> 00:01:17,099
rendering because really that is

32
00:01:15,269 --> 00:01:18,450
incredibly incredibly simple to do

33
00:01:17,099 --> 00:01:21,569
there's really not very much work

34
00:01:18,450 --> 00:01:23,850
involved in it especially because we

35
00:01:21,569 --> 00:01:27,478
don't really even have to take a step

36
00:01:23,849 --> 00:01:29,609
into shaders to do that a little later

37
00:01:27,478 --> 00:01:31,530
on in our game we probably will have to

38
00:01:29,609 --> 00:01:32,909
do that because as we decide to add a

39
00:01:31,530 --> 00:01:35,579
little more lighting and stuff

40
00:01:32,909 --> 00:01:37,680
we'll probably want our students just I

41
00:01:35,578 --> 00:01:40,529
want probably just really need for the

42
00:01:37,680 --> 00:01:42,600
most part shaders to do what it is that

43
00:01:40,530 --> 00:01:43,950
we're gonna want to do and so at some

44
00:01:42,599 --> 00:01:45,929
point we'll have to do that but even

45
00:01:43,950 --> 00:01:47,490
with just what I've taught so far you

46
00:01:45,930 --> 00:01:51,659
can pretty much forth the entire game

47
00:01:47,489 --> 00:01:54,989
except for one thing so there's really

48
00:01:51,659 --> 00:01:58,140
only one hard thing that stands in our

49
00:01:54,989 --> 00:02:01,289
way of making that work and that thing

50
00:01:58,140 --> 00:02:03,930
is how to get the textures like

51
00:02:01,290 --> 00:02:05,399
basically the bitmaps that we're using

52
00:02:03,930 --> 00:02:09,599
for the game like you know our little

53
00:02:05,399 --> 00:02:13,229
sprites it's how to get those down to

54
00:02:09,598 --> 00:02:15,750
the card in a in a efficient fashion

55
00:02:13,229 --> 00:02:17,518
and so if you recall how our

56
00:02:15,750 --> 00:02:18,959
architecture works at the moment we

57
00:02:17,519 --> 00:02:21,840
don't have to think about that because

58
00:02:18,959 --> 00:02:24,030
what happens is that when we find that

59
00:02:21,840 --> 00:02:25,469
we need an image or predict that we're

60
00:02:24,030 --> 00:02:29,669
going to need an image on a frame that's

61
00:02:25,469 --> 00:02:31,949
coming up soon mmm choosing we really

62
00:02:29,669 --> 00:02:34,738
don't have to do anything other than get

63
00:02:31,949 --> 00:02:36,419
it off the drive and then put it in

64
00:02:34,739 --> 00:02:38,310
memory in a location where our render

65
00:02:36,419 --> 00:02:39,899
can get it and that's a very

66
00:02:38,310 --> 00:02:42,420
straightforward operation because it's

67
00:02:39,900 --> 00:02:43,769
entirely on the CPU and there's no need

68
00:02:42,419 --> 00:02:47,429
to communicate with the graphs card

69
00:02:43,769 --> 00:02:50,219
about anything there all we need to do

70
00:02:47,430 --> 00:02:52,739
is have a flag basically on our side

71
00:02:50,219 --> 00:02:54,419
that says this thing has finished

72
00:02:52,739 --> 00:02:56,009
loading you can now draw with it so that

73
00:02:54,419 --> 00:02:57,208
the renderer doesn't try to draw with it

74
00:02:56,009 --> 00:02:59,149
before it's actually finished loading

75
00:02:57,209 --> 00:03:03,000
that's that's really all we had to do

76
00:02:59,150 --> 00:03:05,579
now when we go to doing this on the GPU

77
00:03:03,000 --> 00:03:08,370
all of the rendering stuff can pretty

78
00:03:05,579 --> 00:03:09,840
much stay exactly the same as it did and

79
00:03:08,370 --> 00:03:13,170
the reason for that is because the

80
00:03:09,840 --> 00:03:14,729
amount of of command throughput that

81
00:03:13,169 --> 00:03:17,879
we're going to have is just not that

82
00:03:14,729 --> 00:03:19,289
complicated in a 2-d game like this even

83
00:03:17,879 --> 00:03:21,689
if we have thousands of sprites on the

84
00:03:19,289 --> 00:03:27,060
screen that's just not a really high

85
00:03:21,689 --> 00:03:30,239
amount of traffic to send down to the

86
00:03:27,060 --> 00:03:32,609
graphics card but for our texture data

87
00:03:30,239 --> 00:03:35,009
there is a lot of data we're a 1920 by

88
00:03:32,609 --> 00:03:37,079
1080 game we've got a lot of full screen

89
00:03:35,009 --> 00:03:38,939
layers in like our cutscene for example

90
00:03:37,079 --> 00:03:41,609
so even just for the intro sequence

91
00:03:38,939 --> 00:03:42,750
alone there's a lot that we might have

92
00:03:41,609 --> 00:03:44,939
to manage there and we don't want to

93
00:03:42,750 --> 00:03:46,620
have a stuttery framerate while we're

94
00:03:44,939 --> 00:03:49,889
doing transfers of stuff like those

95
00:03:46,620 --> 00:03:52,530
plates and so we need to insert an extra

96
00:03:49,889 --> 00:03:55,290
stage in our asset streaming to be able

97
00:03:52,530 --> 00:03:57,120
to stream textures to the graphics card

98
00:03:55,289 --> 00:03:58,679
in some kind of a reasonable way and

99
00:03:57,120 --> 00:04:03,209
that is not always as easy as it should

100
00:03:58,680 --> 00:04:05,819
be there's nothing inherently

101
00:04:03,209 --> 00:04:07,769
complicated about it but unfortunately

102
00:04:05,818 --> 00:04:10,828
GPUs were not designed to do it

103
00:04:07,769 --> 00:04:13,230
originally that you know textures were

104
00:04:10,829 --> 00:04:14,969
typically not streamed in real time they

105
00:04:13,229 --> 00:04:18,269
were uploaded during like a loading

106
00:04:14,969 --> 00:04:19,709
screen and so nowadays when you're

107
00:04:18,269 --> 00:04:21,959
actually trying to stream the api's

108
00:04:19,709 --> 00:04:24,360
aren't really set up for it so you have

109
00:04:21,959 --> 00:04:25,918
to kind of go through some extension

110
00:04:24,360 --> 00:04:26,699
mechanisms to really do it and not all

111
00:04:25,918 --> 00:04:28,889
cards

112
00:04:26,699 --> 00:04:30,899
support it well some are very buggy with

113
00:04:28,889 --> 00:04:32,759
it there's sort of this concept of

114
00:04:30,899 --> 00:04:34,109
fencing you have to use to sort of do

115
00:04:32,759 --> 00:04:35,730
stuff like know when something it's

116
00:04:34,110 --> 00:04:39,180
finished uploading this there's just a

117
00:04:35,730 --> 00:04:41,189
lot of complexity there so I think maybe

118
00:04:39,180 --> 00:04:43,800
you know just what I'm leaning towards

119
00:04:41,189 --> 00:04:46,889
is maybe what we do is we poured

120
00:04:43,800 --> 00:04:48,480
everything over and we just let our

121
00:04:46,889 --> 00:04:50,729
frame rate be very stuttery at the

122
00:04:48,480 --> 00:04:53,400
moment when something needs to be

123
00:04:50,730 --> 00:04:55,200
download of the card we just do it and

124
00:04:53,399 --> 00:05:01,709
we accept the fact that it's stuttery

125
00:04:55,199 --> 00:05:04,319
right maybe we do that and then what we

126
00:05:01,709 --> 00:05:06,120
can do is look at that as a separate

127
00:05:04,319 --> 00:05:07,889
issue and choose to address it at

128
00:05:06,120 --> 00:05:10,079
whatever time it is that we feel is

129
00:05:07,889 --> 00:05:11,579
necessary we would have to address it

130
00:05:10,079 --> 00:05:13,709
eventually if we can't really leave it

131
00:05:11,579 --> 00:05:16,349
that way it'll have to get fixed at some

132
00:05:13,709 --> 00:05:19,379
point but that's probably the way to

133
00:05:16,350 --> 00:05:21,450
keep things easy enough to understand at

134
00:05:19,379 --> 00:05:24,240
first without having to force people

135
00:05:21,449 --> 00:05:25,709
into too much of a GPU understanding

136
00:05:24,240 --> 00:05:28,889
right off the bat because the rest of

137
00:05:25,709 --> 00:05:30,529
stuff is is relatively simple so I think

138
00:05:28,889 --> 00:05:32,789
maybe that's what I'll start doing today

139
00:05:30,529 --> 00:05:34,919
and that way we can sort of get that

140
00:05:32,790 --> 00:05:36,569
working and then we can kind of get all

141
00:05:34,920 --> 00:05:38,610
that going maybe this that's what we'll

142
00:05:36,569 --> 00:05:40,290
do this week and then we'll sort of end

143
00:05:38,610 --> 00:05:42,060
with having the ability to switch

144
00:05:40,290 --> 00:05:43,800
between the two renders and then we can

145
00:05:42,060 --> 00:05:45,149
turn on vsync which is one of the

146
00:05:43,800 --> 00:05:47,670
reasons I wanted to be able to go these

147
00:05:45,149 --> 00:05:49,739
paths and we'd also then then have a

148
00:05:47,670 --> 00:05:51,830
path that we would know would always be

149
00:05:49,740 --> 00:05:55,170
fast enough to run at 60 frames a second

150
00:05:51,829 --> 00:05:58,969
1920 by 1080 so we can also test with

151
00:05:55,170 --> 00:06:01,140
the GPU so it doesn't force our hand at

152
00:05:58,970 --> 00:06:03,480
forcing us to optimize our software

153
00:06:01,139 --> 00:06:07,229
rasterizer if that's not what we want to

154
00:06:03,480 --> 00:06:09,210
do in the short term right which let's

155
00:06:07,230 --> 00:06:11,069
be honest I was never expecting to

156
00:06:09,209 --> 00:06:13,139
suffer a renderer to run 1920 by 1080 by

157
00:06:11,069 --> 00:06:15,449
64 and sorry that was totally crazy that

158
00:06:13,139 --> 00:06:17,759
it ended up actually tuning that and so

159
00:06:15,449 --> 00:06:20,339
you know I don't necessarily want to

160
00:06:17,759 --> 00:06:22,379
sort of insert into the stream this

161
00:06:20,339 --> 00:06:24,000
constant need for us to go back and

162
00:06:22,379 --> 00:06:25,290
optimize that when that's really was

163
00:06:24,000 --> 00:06:26,819
never supposed to be a thing was most

164
00:06:25,290 --> 00:06:28,939
mostly educational the reason we're

165
00:06:26,819 --> 00:06:31,680
doing it just happened to be really fast

166
00:06:28,939 --> 00:06:34,199
so anyway let's go ahead and take a look

167
00:06:31,680 --> 00:06:35,790
at that now today's day 2:38 so you're

168
00:06:34,199 --> 00:06:37,439
gonna want to if you're falling along at

169
00:06:35,790 --> 00:06:37,939
home if you preorder the game on

170
00:06:37,439 --> 00:06:41,420
handmade

171
00:06:37,939 --> 00:06:43,339
you're gonna want to start with day 237

172
00:06:41,420 --> 00:06:45,500
source code that's what I'm starting

173
00:06:43,339 --> 00:06:47,389
with today and just to sort of refresh

174
00:06:45,500 --> 00:06:52,160
your memory about where we left off here

175
00:06:47,389 --> 00:06:55,099
is me running the game and you can kind

176
00:06:52,160 --> 00:06:57,380
of see that this is exactly what we

177
00:06:55,100 --> 00:06:59,150
would have expected it to look like only

178
00:06:57,379 --> 00:07:01,750
now it's running through a graphics card

179
00:06:59,149 --> 00:07:03,919
instead of running through you know a

180
00:07:01,750 --> 00:07:05,959
software renderer and you can kind of

181
00:07:03,920 --> 00:07:07,879
see that that everything still works the

182
00:07:05,959 --> 00:07:09,709
same way that it did now if I remember

183
00:07:07,879 --> 00:07:14,509
correctly I think there was a bug in my

184
00:07:09,709 --> 00:07:17,979
in my float conversion because I feel

185
00:07:14,509 --> 00:07:17,980
like if we let this guy run

186
00:07:18,079 --> 00:07:21,649
didn't-didn't we get to a point where

187
00:07:19,970 --> 00:07:24,260
there is a bug in the radix sort or

188
00:07:21,649 --> 00:07:25,879
something and I'm guessing it probably

189
00:07:24,259 --> 00:07:28,550
wasn't actually in the radix sort is

190
00:07:25,879 --> 00:07:31,699
probably in my my float to int

191
00:07:28,550 --> 00:07:35,300
conversion code but I just feel like at

192
00:07:31,699 --> 00:07:38,449
some point here maybe when it gets to

193
00:07:35,300 --> 00:07:41,439
the next scene it we have an assertion

194
00:07:38,449 --> 00:07:46,129
that the sort order wasn't correct

195
00:07:41,439 --> 00:07:47,449
that's just my recollection and and I

196
00:07:46,129 --> 00:07:52,180
don't I don't actually know if that's

197
00:07:47,449 --> 00:07:52,180
true but I felt like that was true mmm

198
00:07:55,449 --> 00:08:03,889
well I don't know maybe we have to get

199
00:08:00,350 --> 00:08:05,870
to a further out scene I'm not sure I

200
00:08:03,889 --> 00:08:10,009
just felt like that was true was that

201
00:08:05,870 --> 00:08:13,579
not true well I mean well I'm sure it'll

202
00:08:10,009 --> 00:08:14,839
it'll crop up again if if I'm if I'm not

203
00:08:13,579 --> 00:08:16,459
mistaken

204
00:08:14,839 --> 00:08:18,589
next time we kind of leave it running so

205
00:08:16,459 --> 00:08:21,199
I guess I don't have to worry about that

206
00:08:18,589 --> 00:08:23,389
for now cuz you know next time we sort

207
00:08:21,199 --> 00:08:25,279
of preview our our cut scene it should

208
00:08:23,389 --> 00:08:27,529
happen if it's gonna happen so I don't

209
00:08:25,279 --> 00:08:31,729
know what's going on there well that's

210
00:08:27,529 --> 00:08:33,288
interesting so in this sort we have two

211
00:08:31,730 --> 00:08:35,870
things at the same Z level and you can

212
00:08:33,288 --> 00:08:38,288
see that Santa Claus has has moved

213
00:08:35,870 --> 00:08:43,190
behind the background there's not good

214
00:08:38,288 --> 00:08:45,019
right so now that we're sorting in Z we

215
00:08:43,190 --> 00:08:46,700
kind of have to deal with that although

216
00:08:45,019 --> 00:08:48,470
we could also have a way for cutscenes

217
00:08:46,700 --> 00:08:50,210
and stuff like that to turn off the Z

218
00:08:48,470 --> 00:08:51,180
sorting entirely if we wanted to since

219
00:08:50,210 --> 00:08:53,430
we don't actually

220
00:08:51,179 --> 00:08:57,179
see sorting for this that's worth noting

221
00:08:53,429 --> 00:08:58,739
so it looks kind of like maybe I'm wrong

222
00:08:57,179 --> 00:09:00,809
about that I don't know it I thought

223
00:08:58,740 --> 00:09:03,330
there was a bug but maybe there wasn't

224
00:09:00,809 --> 00:09:07,789
we'll see if it crops up again and we'll

225
00:09:03,330 --> 00:09:12,780
take a look at it if it does okay so

226
00:09:07,789 --> 00:09:15,240
here we go let's go ahead and and talk

227
00:09:12,779 --> 00:09:17,009
about what we're gonna do here so right

228
00:09:15,240 --> 00:09:21,360
now you can kind of see what happens

229
00:09:17,009 --> 00:09:24,509
where we have our rendering we we have a

230
00:09:21,360 --> 00:09:27,600
very sort of properly in my opinion

231
00:09:24,509 --> 00:09:29,879
walled off renderer in the sense that we

232
00:09:27,600 --> 00:09:32,430
don't really count on very much about

233
00:09:29,879 --> 00:09:33,929
the renderer in the external code so

234
00:09:32,429 --> 00:09:35,969
really all that happens is we called

235
00:09:33,929 --> 00:09:39,569
like you know tiled render group to

236
00:09:35,970 --> 00:09:41,399
output and stuff like that that's really

237
00:09:39,570 --> 00:09:42,780
all that happens so we we push a bunch

238
00:09:41,399 --> 00:09:44,039
of stuff on that are like you know

239
00:09:42,779 --> 00:09:45,990
instructions to the renderer to do

240
00:09:44,039 --> 00:09:47,549
something specific and then we call like

241
00:09:45,990 --> 00:09:49,409
this tiled render group to output and

242
00:09:47,549 --> 00:09:51,209
then we call and render and that's

243
00:09:49,409 --> 00:09:54,419
that's really all there is to it

244
00:09:51,210 --> 00:09:59,240
right so it's not it's not super

245
00:09:54,419 --> 00:10:02,879
hands-on and that's somewhat intentional

246
00:09:59,240 --> 00:10:05,009
because the idea here is that I've kind

247
00:10:02,879 --> 00:10:06,629
of known all along that you know the

248
00:10:05,009 --> 00:10:08,639
renderer is something that may want to

249
00:10:06,629 --> 00:10:10,019
be swapped out for example in the exact

250
00:10:08,639 --> 00:10:12,360
case that we're talking about here where

251
00:10:10,019 --> 00:10:14,579
we have a software one and then we also

252
00:10:12,360 --> 00:10:16,379
want to have a hardware one right and

253
00:10:14,580 --> 00:10:17,730
even if you didn't want to have software

254
00:10:16,379 --> 00:10:19,070
and hardware you might for example have

255
00:10:17,730 --> 00:10:22,289
two different Hardware ones for example

256
00:10:19,070 --> 00:10:23,730
people ask about Vulcan or direct3d and

257
00:10:22,289 --> 00:10:26,009
that sort of stuff well if someone was

258
00:10:23,730 --> 00:10:29,700
going to port the renderer to one of

259
00:10:26,009 --> 00:10:32,100
those other one of those other API is

260
00:10:29,700 --> 00:10:35,490
you know you may be on a driver that

261
00:10:32,100 --> 00:10:37,440
doesn't support say Vulcan yet and so if

262
00:10:35,490 --> 00:10:39,480
you have a Vulcan path you may still

263
00:10:37,440 --> 00:10:42,540
need to have an OpenGL like fallback

264
00:10:39,480 --> 00:10:46,200
path right or similarly if you have like

265
00:10:42,539 --> 00:10:47,849
a DirectX 12 path you may need a

266
00:10:46,200 --> 00:10:49,350
fallback path for machines that don't

267
00:10:47,850 --> 00:10:51,330
have DirectX 12 right maybe you're

268
00:10:49,350 --> 00:10:55,259
running on Windows 7 which doesn't run

269
00:10:51,330 --> 00:10:56,310
DirectX 12 so it's just kind of one of

270
00:10:55,259 --> 00:10:58,350
those things that if you're a

271
00:10:56,309 --> 00:11:02,189
professional game programmer you have

272
00:10:58,350 --> 00:11:04,320
probably gotten into the habit just by

273
00:11:02,190 --> 00:11:04,889
nothing other than experience of keeping

274
00:11:04,320 --> 00:11:07,410
the renderer

275
00:11:04,889 --> 00:11:08,579
sort of separated out even before you

276
00:11:07,409 --> 00:11:10,169
get to the point where you really need

277
00:11:08,578 --> 00:11:12,748
to now is it essential to do that at a

278
00:11:10,169 --> 00:11:14,338
time no it's always fine to sort of like

279
00:11:12,749 --> 00:11:16,678
again use a more compression or an

280
00:11:14,339 --> 00:11:18,749
approach and like start separating it

281
00:11:16,678 --> 00:11:20,938
out at the time that you need to but

282
00:11:18,749 --> 00:11:22,589
because that's just something that I you

283
00:11:20,938 --> 00:11:25,108
know I'm just well aware of I just tend

284
00:11:22,589 --> 00:11:27,600
to write renderers from the start at

285
00:11:25,109 --> 00:11:30,059
this point to be fairly modular in that

286
00:11:27,600 --> 00:11:34,109
sense so it's already set up to be

287
00:11:30,058 --> 00:11:35,368
pretty reasonable as as it as you know

288
00:11:34,109 --> 00:11:37,829
it's something that can be swapped out

289
00:11:35,369 --> 00:11:39,480
but it's not quite there yet right we

290
00:11:37,828 --> 00:11:42,238
haven't done the work of really truly

291
00:11:39,480 --> 00:11:44,699
separating it out and so what I'd like

292
00:11:42,239 --> 00:11:47,309
to do now is start to move you know

293
00:11:44,698 --> 00:11:51,599
start to extract it out in its entirety

294
00:11:47,308 --> 00:11:53,308
so that we really can choose which you

295
00:11:51,600 --> 00:11:55,199
know how we want to actually render

296
00:11:53,308 --> 00:11:58,168
things whether we want them to be

297
00:11:55,198 --> 00:11:59,818
hardware or software based and so

298
00:11:58,168 --> 00:12:01,470
there's a couple different ways we can

299
00:11:59,818 --> 00:12:04,139
do this and it depends on how much code

300
00:12:01,470 --> 00:12:06,869
we actually want to share now you can

301
00:12:04,139 --> 00:12:08,039
kind of look at our render group in here

302
00:12:06,869 --> 00:12:10,139
and this is all the code for the

303
00:12:08,039 --> 00:12:12,208
software renderer right but if you

304
00:12:10,139 --> 00:12:15,629
actually take a look at where the the

305
00:12:12,208 --> 00:12:17,909
work actually gets done you know we do

306
00:12:15,629 --> 00:12:19,739
our sort entries for example and then we

307
00:12:17,909 --> 00:12:21,808
go into sort of this do tiled render

308
00:12:19,739 --> 00:12:24,899
work thing and the do tiled render work

309
00:12:21,808 --> 00:12:27,688
I always fail at searching for that

310
00:12:24,899 --> 00:12:28,948
because it's wrapped in the Emacs can't

311
00:12:27,688 --> 00:12:32,159
find it because it's wrapped in this

312
00:12:28,948 --> 00:12:33,838
platform work queue callback thing but

313
00:12:32,159 --> 00:12:35,999
really this thing right here render

314
00:12:33,839 --> 00:12:38,040
group to output this is where all the

315
00:12:35,999 --> 00:12:39,569
time is spent right it's all of the time

316
00:12:38,039 --> 00:12:41,399
is spent going through these things and

317
00:12:39,568 --> 00:12:43,678
calling one of these rendering functions

318
00:12:41,399 --> 00:12:46,110
and specifically for our purposes

319
00:12:43,678 --> 00:12:48,269
obviously we optimize the expensive one

320
00:12:46,110 --> 00:12:49,798
so draw rectangle quickly is really the

321
00:12:48,269 --> 00:12:51,600
one that we're spending most of our time

322
00:12:49,798 --> 00:12:54,808
and almost everything goes to that path

323
00:12:51,600 --> 00:12:57,119
okay and what you'll notice about this

324
00:12:54,808 --> 00:12:59,249
is really all of the stuff that actually

325
00:12:57,119 --> 00:13:02,639
determines what the game looks like on

326
00:12:59,249 --> 00:13:06,678
screen goes through this function so if

327
00:13:02,639 --> 00:13:11,369
we want to render to a piece of hardware

328
00:13:06,678 --> 00:13:12,749
instead of rendering to you know instead

329
00:13:11,369 --> 00:13:16,019
of rendering through our software

330
00:13:12,749 --> 00:13:18,480
renderer really all we have to do is

331
00:13:16,019 --> 00:13:22,230
produce a new version of this

332
00:13:18,480 --> 00:13:25,980
function that instead of dispatching to

333
00:13:22,230 --> 00:13:29,789
our software renderer dispatches to say

334
00:13:25,980 --> 00:13:33,990
OpenGL so I'm just gonna literally start

335
00:13:29,789 --> 00:13:35,578
by doing exactly that thing so I'm gonna

336
00:13:33,990 --> 00:13:37,889
go ahead here and you know we're gonna

337
00:13:35,578 --> 00:13:39,899
open up Winton if you handmade and I'm

338
00:13:37,889 --> 00:13:46,198
going to make a new file that's like

339
00:13:39,899 --> 00:13:47,970
handmade OpenGL render group and really

340
00:13:46,198 --> 00:13:49,679
what this is and you know what honestly

341
00:13:47,970 --> 00:13:51,060
I don't even know if that name needs to

342
00:13:49,679 --> 00:13:53,208
be that long I'm just gonna call it

343
00:13:51,059 --> 00:13:55,679
handmade OpenGL and we're just gonna

344
00:13:53,208 --> 00:13:57,809
start with that and say that we'll just

345
00:13:55,679 --> 00:14:01,769
put whatever opengl stuff is in there

346
00:13:57,809 --> 00:14:05,729
okay and so here is our render group to

347
00:14:01,769 --> 00:14:07,649
output call okay and I'm just gonna

348
00:14:05,730 --> 00:14:12,060
literally translate this into something

349
00:14:07,649 --> 00:14:14,789
that that will I think will work with

350
00:14:12,059 --> 00:14:16,289
opengl and so what we can see here is

351
00:14:14,789 --> 00:14:18,208
that this entry coordinate system thing

352
00:14:16,289 --> 00:14:20,009
that was always a test thing we don't

353
00:14:18,208 --> 00:14:23,159
really need that at the moment at all

354
00:14:20,009 --> 00:14:25,409
right that's not doing anything and so I

355
00:14:23,159 --> 00:14:28,649
can I can literally just leave that case

356
00:14:25,409 --> 00:14:31,338
and not do anything with it okay

357
00:14:28,649 --> 00:14:34,289
we've got this guy here which is how we

358
00:14:31,339 --> 00:14:36,839
draw most of our sprites we've got clear

359
00:14:34,289 --> 00:14:39,120
and we've got rectangle so far that's

360
00:14:36,839 --> 00:14:40,769
all we actually have to deal with in our

361
00:14:39,120 --> 00:14:42,769
render it's really it's it's very very

362
00:14:40,769 --> 00:14:45,750
straightforward right it's very simple

363
00:14:42,769 --> 00:14:49,318
and so if we take a look at what happens

364
00:14:45,750 --> 00:14:53,370
now does this does this sort entries

365
00:14:49,318 --> 00:14:55,289
thing ever even get called it doesn't

366
00:14:53,370 --> 00:14:56,578
does it so it's really just so sort of

367
00:14:55,289 --> 00:14:59,849
oh well it kind of gets used right here

368
00:14:56,578 --> 00:15:01,169
I guess so anyway if we take a look at

369
00:14:59,850 --> 00:15:03,589
what actually happens in this routine

370
00:15:01,169 --> 00:15:06,778
it's not really particularly difficult

371
00:15:03,589 --> 00:15:08,220
to imagine replacing this very small

372
00:15:06,778 --> 00:15:10,379
number of operations that we have to do

373
00:15:08,220 --> 00:15:14,009
with their equivalents in OpenGL now

374
00:15:10,379 --> 00:15:16,679
clear right we've already seen how that

375
00:15:14,009 --> 00:15:19,470
works so there really wouldn't be any

376
00:15:16,679 --> 00:15:21,388
thing magic for us to do about clear we

377
00:15:19,470 --> 00:15:24,569
could literally just come in here and do

378
00:15:21,389 --> 00:15:28,889
exactly what what this says we have a

379
00:15:24,568 --> 00:15:30,870
color value here right and and we know

380
00:15:28,889 --> 00:15:31,500
the target width and height so really

381
00:15:30,870 --> 00:15:33,389
everything

382
00:15:31,500 --> 00:15:36,509
that we might want to do here is it's

383
00:15:33,389 --> 00:15:38,220
really straightforward for us I'm gonna

384
00:15:36,509 --> 00:15:40,049
go ahead and and pull this out here

385
00:15:38,220 --> 00:15:42,720
temporarily just for another reason it

386
00:15:40,049 --> 00:15:44,490
looks like a butt so if I wanted to

387
00:15:42,720 --> 00:15:46,560
clear we just need to know what the

388
00:15:44,490 --> 00:15:48,870
color is and then we do the color buffer

389
00:15:46,559 --> 00:15:51,359
Bickler that's really it and of course

390
00:15:48,870 --> 00:15:54,480
the color if we go look at what the

391
00:15:51,360 --> 00:15:57,450
color actually is inside handmade render

392
00:15:54,480 --> 00:16:01,529
group dot h we've got that clear entry

393
00:15:57,450 --> 00:16:03,240
where is that guy it's just a v4 so you

394
00:16:01,529 --> 00:16:06,360
know literally we can just pass this

395
00:16:03,240 --> 00:16:07,740
thing down exactly as it is and we

396
00:16:06,360 --> 00:16:10,919
really shouldn't have to do anything

397
00:16:07,740 --> 00:16:12,450
else okay so passing that down and

398
00:16:10,919 --> 00:16:13,789
clearing that would be a complete

399
00:16:12,450 --> 00:16:23,730
implementation of the clear command

400
00:16:13,789 --> 00:16:24,899
that's it so that's nice and now we're

401
00:16:23,730 --> 00:16:28,230
just left with two ways to fill a

402
00:16:24,899 --> 00:16:30,209
rectangle one way to fill a rectangle we

403
00:16:28,230 --> 00:16:32,220
have to actually do it with a solid

404
00:16:30,210 --> 00:16:37,680
color and the other way we have to do it

405
00:16:32,220 --> 00:16:39,149
with a with a with an image right so the

406
00:16:37,679 --> 00:16:40,109
image one's going to be the hard one for

407
00:16:39,149 --> 00:16:42,689
the reason that I was talking about

408
00:16:40,110 --> 00:16:45,120
before it's because we really don't have

409
00:16:42,690 --> 00:16:46,740
any notion at the moment of how we're

410
00:16:45,120 --> 00:16:51,120
gonna background load those things so

411
00:16:46,740 --> 00:16:52,440
that's gonna be an issue but we'll cross

412
00:16:51,120 --> 00:16:55,080
that bridge when we come to it

413
00:16:52,440 --> 00:16:56,940
for now what we'll do is let's just say

414
00:16:55,080 --> 00:16:59,250
that we draw both of these basically the

415
00:16:56,940 --> 00:17:01,950
same way so we're gonna draw them both

416
00:16:59,250 --> 00:17:04,230
as solid colored rectangles we'll just

417
00:17:01,950 --> 00:17:06,870
do that for now and then we'll kind of

418
00:17:04,230 --> 00:17:09,088
go from there all right so if we start

419
00:17:06,869 --> 00:17:10,859
by doing that let's see if you take a

420
00:17:09,088 --> 00:17:12,389
look at what happens here the this is

421
00:17:10,859 --> 00:17:16,619
our rectangle our rectangle goes from

422
00:17:12,390 --> 00:17:18,839
here to here and it's in this color so

423
00:17:16,619 --> 00:17:22,289
if that's what we're trying to do if

424
00:17:18,838 --> 00:17:24,509
this is essentially our min P you know

425
00:17:22,289 --> 00:17:26,039
what I'm saying and this is our max P in

426
00:17:24,509 --> 00:17:28,199
terms of where they are on the screen

427
00:17:26,039 --> 00:17:31,200
and here is our color that we're gonna

428
00:17:28,199 --> 00:17:33,930
do for our rectangle if that's what

429
00:17:31,200 --> 00:17:35,970
we're looking at then again we already

430
00:17:33,930 --> 00:17:39,210
pretty much learned exactly how to do

431
00:17:35,970 --> 00:17:42,029
this in fact we really learned already

432
00:17:39,210 --> 00:17:43,799
how to do all of these things right you

433
00:17:42,029 --> 00:17:45,298
can kind of see how I was doing these

434
00:17:43,799 --> 00:17:47,069
here with this DL begin

435
00:17:45,298 --> 00:17:48,569
angles thing we already sort of have

436
00:17:47,069 --> 00:17:51,288
exactly the code that we're doing for

437
00:17:48,569 --> 00:17:54,028
this so we could do that exact same code

438
00:17:51,288 --> 00:17:56,720
with with really no effort right we

439
00:17:54,028 --> 00:18:00,690
could just go ahead and say all right go

440
00:17:56,720 --> 00:18:03,509
ahead and draw some triangles here and

441
00:18:00,690 --> 00:18:06,179
instead of like negative P P that sort

442
00:18:03,509 --> 00:18:10,739
of thing instead of drawing it that way

443
00:18:06,179 --> 00:18:15,090
let's just use our min px right and our

444
00:18:10,739 --> 00:18:16,590
min P Y that sort of thing and then this

445
00:18:15,089 --> 00:18:20,939
would be our max px

446
00:18:16,589 --> 00:18:25,709
Sabir minge-y I mean essentially it I'm

447
00:18:20,940 --> 00:18:29,429
just doing negative P with min P is all

448
00:18:25,710 --> 00:18:35,519
I'm doing and and P with P with max P

449
00:18:29,429 --> 00:18:39,570
right that's all we're talking about and

450
00:18:35,519 --> 00:18:41,548
and that's it now there is actually even

451
00:18:39,569 --> 00:18:44,329
a I don't know that we actually want to

452
00:18:41,548 --> 00:18:47,099
do this but we can you can you can even

453
00:18:44,329 --> 00:18:50,489
if you want to when you're passing a

454
00:18:47,099 --> 00:18:51,808
vector there's a FV style call like

455
00:18:50,489 --> 00:18:53,548
where you pass a vector where you back

456
00:18:51,808 --> 00:18:55,168
to just pass a poor nerd the floats I'm

457
00:18:53,548 --> 00:18:57,509
not going to do that because we mix and

458
00:18:55,169 --> 00:19:00,840
match a fair bit here so I'm not going

459
00:18:57,509 --> 00:19:02,278
to bother doing that I just wanted to

460
00:19:00,839 --> 00:19:03,868
kind of point it out but it's there you

461
00:19:02,278 --> 00:19:06,839
can actually pass vector a step in jail

462
00:19:03,868 --> 00:19:10,199
that way just as a rays of flutes

463
00:19:06,839 --> 00:19:14,009
so we have our min P we have a max beam

464
00:19:10,200 --> 00:19:17,700
in P right of 1 0 we have max max min

465
00:19:14,009 --> 00:19:20,220
min Max Max and min max that looks that

466
00:19:17,700 --> 00:19:23,460
looks right to me so that would draw our

467
00:19:20,220 --> 00:19:25,618
triangle now we do have one problem that

468
00:19:23,460 --> 00:19:28,108
you'll notice here that weeds with that

469
00:19:25,618 --> 00:19:30,298
we'd have to solve fairly soon which is

470
00:19:28,108 --> 00:19:33,298
that this brings up the coordinate

471
00:19:30,298 --> 00:19:35,628
problem again which is that we this is

472
00:19:33,298 --> 00:19:38,069
remember we talked about the unit cube

473
00:19:35,628 --> 00:19:40,288
all of these coordinates are in the unit

474
00:19:38,069 --> 00:19:41,730
cube and we don't have yet a projection

475
00:19:40,288 --> 00:19:44,759
matrix that will actually give us

476
00:19:41,730 --> 00:19:46,829
something that would correctly map us

477
00:19:44,759 --> 00:19:48,149
into the unit cube for these coordinates

478
00:19:46,829 --> 00:19:49,259
that we're passing which are actually

479
00:19:48,148 --> 00:19:51,808
screen space coordinate that we've

480
00:19:49,259 --> 00:19:54,089
already transferred so that's a problem

481
00:19:51,808 --> 00:19:56,128
but other than that this would do

482
00:19:54,089 --> 00:19:57,740
exactly what we would want it to do

483
00:19:56,128 --> 00:20:02,119
right

484
00:19:57,740 --> 00:20:04,519
and so in both cases for four rectangles

485
00:20:02,119 --> 00:20:06,678
we could do exactly this in fact we

486
00:20:04,519 --> 00:20:09,168
could really do the same exact thing we

487
00:20:06,679 --> 00:20:12,380
could just have a function up here which

488
00:20:09,169 --> 00:20:17,149
is like rectangle vertices or something

489
00:20:12,380 --> 00:20:20,750
like this and or I guess I should say

490
00:20:17,148 --> 00:20:22,879
just rectangle opengl rectangle I don't

491
00:20:20,750 --> 00:20:25,429
know something like this and we could we

492
00:20:22,880 --> 00:20:28,220
can just have this be something that you

493
00:20:25,429 --> 00:20:30,140
pass these two and then we can just use

494
00:20:28,220 --> 00:20:37,720
it right so we can say okay there's a

495
00:20:30,140 --> 00:20:37,720
min P there's a max P there's a color

496
00:20:38,589 --> 00:20:44,689
and that's it right and so that's pretty

497
00:20:42,288 --> 00:20:50,148
straightforward the color value we would

498
00:20:44,690 --> 00:20:51,649
probably just do like so because the

499
00:20:50,148 --> 00:20:53,089
entire thing typically has a color value

500
00:20:51,648 --> 00:20:56,329
that's not interpolated so that's

501
00:20:53,089 --> 00:20:58,970
roughly what that would look like and

502
00:20:56,329 --> 00:21:00,470
off we would go so there's our Open GL

503
00:20:58,970 --> 00:21:02,360
rectangle now there's a number of

504
00:21:00,470 --> 00:21:04,669
reasons why we probably won't end up

505
00:21:02,359 --> 00:21:07,278
doing it exactly this way and the reason

506
00:21:04,669 --> 00:21:10,100
for that is because this is just a lot

507
00:21:07,278 --> 00:21:11,929
of function calls and stuff and when we

508
00:21:10,099 --> 00:21:13,278
get up to higher numbers of primitives

509
00:21:11,929 --> 00:21:14,960
we're gonna want to do these in a more

510
00:21:13,278 --> 00:21:17,298
efficient way and in fact open jail has

511
00:21:14,960 --> 00:21:18,350
more efficient ways of doing it that

512
00:21:17,298 --> 00:21:20,058
we'll look at a little bit later and

513
00:21:18,349 --> 00:21:21,558
basically what they involve is packing

514
00:21:20,058 --> 00:21:23,148
all of these things into one buffer so

515
00:21:21,558 --> 00:21:25,129
we just write out a big buffer and then

516
00:21:23,148 --> 00:21:27,259
we just say hey Open GL take this whole

517
00:21:25,130 --> 00:21:30,230
buffer as if it's a bunch of vertices

518
00:21:27,259 --> 00:21:32,808
and draw it that way right so you know

519
00:21:30,230 --> 00:21:34,250
don't be don't be deceived although this

520
00:21:32,808 --> 00:21:35,720
looks like just a lot of business

521
00:21:34,250 --> 00:21:37,038
happening here and it's like wow that's

522
00:21:35,720 --> 00:21:39,288
a lot of function calls going on for

523
00:21:37,038 --> 00:21:42,470
every rectangle or whatever yes that's

524
00:21:39,288 --> 00:21:44,808
true but really we'll be able to flatten

525
00:21:42,470 --> 00:21:48,288
that down into just one function call

526
00:21:44,808 --> 00:21:49,369
sort of as we after we get everything

527
00:21:48,288 --> 00:21:52,609
working and want to start just

528
00:21:49,369 --> 00:21:55,459
concentrating on cleaning up the the

529
00:21:52,609 --> 00:21:57,139
usage a little bit more so don't let

530
00:21:55,460 --> 00:21:59,720
that bother you too much it's really not

531
00:21:57,140 --> 00:22:00,860
an issue but it's usually best to kind

532
00:21:59,720 --> 00:22:02,120
of leave it this way when you're first

533
00:22:00,859 --> 00:22:03,678
learning because you can see exactly

534
00:22:02,119 --> 00:22:06,109
what's going on it's a lot easier you'd

535
00:22:03,679 --> 00:22:07,759
have to worry about what is OpenGL how

536
00:22:06,109 --> 00:22:10,369
is OpenGL parsing your buffer and did

537
00:22:07,759 --> 00:22:11,359
you pass it the right sort of waited to

538
00:22:10,369 --> 00:22:13,099
decode it and all that's

539
00:22:11,359 --> 00:22:15,949
there's a lot of business that comes in

540
00:22:13,099 --> 00:22:18,769
with the parsing that's why you may want

541
00:22:15,950 --> 00:22:20,600
to not you know just not quite do that

542
00:22:18,769 --> 00:22:23,450
at first that's why I'm not showing that

543
00:22:20,599 --> 00:22:26,509
as the first thing we do so we can do

544
00:22:23,450 --> 00:22:30,319
this this in both cases here we have the

545
00:22:26,509 --> 00:22:33,980
entry color I can now convert this to

546
00:22:30,319 --> 00:22:36,049
basically doing the same thing that it

547
00:22:33,980 --> 00:22:37,339
was doing before but calling our OpenGL

548
00:22:36,049 --> 00:22:40,549
version of functions so there we go

549
00:22:37,339 --> 00:22:42,289
there's the opengl rectangle for that in

550
00:22:40,549 --> 00:22:43,819
this case we have essentially the same

551
00:22:42,289 --> 00:22:46,789
thing but we've got to do a little bit

552
00:22:43,819 --> 00:22:49,609
differently so here's our entry P I

553
00:22:46,789 --> 00:22:51,529
believe our entry P it's like these two

554
00:22:49,609 --> 00:22:54,139
vectors are what stretched to the other

555
00:22:51,529 --> 00:22:57,649
side so in this case we probably want to

556
00:22:54,140 --> 00:23:01,160
actually compute that max P and can I

557
00:22:57,650 --> 00:23:03,380
guess in this case maybe we do say both

558
00:23:01,160 --> 00:23:05,690
of these so we've got our min P is going

559
00:23:03,380 --> 00:23:09,020
to be the entropy and our max P is going

560
00:23:05,690 --> 00:23:12,259
to be you know sort of the things

561
00:23:09,019 --> 00:23:15,200
stretched or sorry displaced by these to

562
00:23:12,259 --> 00:23:18,410
get to the other corner right so there's

563
00:23:15,200 --> 00:23:20,360
our min game and then entry color is

564
00:23:18,410 --> 00:23:22,640
still the same so so really if you know

565
00:23:20,359 --> 00:23:27,679
if you take a look at what this what

566
00:23:22,640 --> 00:23:30,170
this turns out to be here I guess I also

567
00:23:27,680 --> 00:23:34,580
don't know why why do we pass no pixels

568
00:23:30,170 --> 00:23:36,940
to meters to that function does anyone

569
00:23:34,579 --> 00:23:36,939
know

570
00:23:40,809 --> 00:23:48,710
what is that use for absolutely nothing

571
00:23:44,869 --> 00:23:50,089
all right I think that was only for when

572
00:23:48,710 --> 00:23:51,710
we had lighting and I guess we still

573
00:23:50,089 --> 00:23:53,509
pass it for some reason that's not

574
00:23:51,710 --> 00:23:57,529
immediately clear but it looks like that

575
00:23:53,509 --> 00:24:02,660
can just completely go away great so so

576
00:23:57,529 --> 00:24:05,480
there's I mean at the risk of of sort of

577
00:24:02,660 --> 00:24:07,970
being overly dismissive of how hard it

578
00:24:05,480 --> 00:24:10,910
is to get us off for to get a hardware

579
00:24:07,970 --> 00:24:12,769
renderer working hey since there's just

580
00:24:10,910 --> 00:24:15,170
a ton of hardware there to do everything

581
00:24:12,769 --> 00:24:18,950
for you really honestly this is

582
00:24:15,170 --> 00:24:20,870
basically what what it looks like and so

583
00:24:18,950 --> 00:24:23,150
we really just have to do a few simple

584
00:24:20,869 --> 00:24:25,549
things to start with we would have to

585
00:24:23,150 --> 00:24:27,830
obviously set up the viewport to be

586
00:24:25,549 --> 00:24:33,169
based on whatever the output thing was

587
00:24:27,829 --> 00:24:35,179
here so but really that's about it

588
00:24:33,170 --> 00:24:38,450
there's there's not really a whole lot

589
00:24:35,180 --> 00:24:41,019
more to it so we have to do that to get

590
00:24:38,450 --> 00:24:44,360
ourselves set up correctly for drawing

591
00:24:41,019 --> 00:24:46,849
but other than that it's really not that

592
00:24:44,359 --> 00:24:48,259
complicated so let's talk a little bit

593
00:24:46,849 --> 00:24:51,709
about the things that we're not doing

594
00:24:48,259 --> 00:24:53,720
yet so we're not doing the texturing so

595
00:24:51,710 --> 00:24:55,759
we need to do this part right here so

596
00:24:53,720 --> 00:24:57,079
that part's not done our rectangles are

597
00:24:55,759 --> 00:24:58,279
basically done it's just our texturing

598
00:24:57,079 --> 00:25:00,289
isn't done so we need to figure out a

599
00:24:58,279 --> 00:25:02,869
way to do the texturing part of it so

600
00:25:00,289 --> 00:25:04,339
that's one thing but the other thing

601
00:25:02,869 --> 00:25:05,959
that we need to do is like I said we

602
00:25:04,339 --> 00:25:07,549
need to now establish a screen space

603
00:25:05,960 --> 00:25:09,470
because what we did before again was

604
00:25:07,549 --> 00:25:11,750
just actually give it coordinates that

605
00:25:09,470 --> 00:25:13,759
were the unit cube and that doesn't

606
00:25:11,750 --> 00:25:15,650
really help us when we actually have to

607
00:25:13,759 --> 00:25:17,629
start drawing individual rectangles at

608
00:25:15,650 --> 00:25:19,880
different places on the screen so what

609
00:25:17,630 --> 00:25:26,470
we want to do now is we want to be able

610
00:25:19,880 --> 00:25:28,970
to set up our matrices so that our our

611
00:25:26,470 --> 00:25:30,740
projection matrix when OpenGL actually

612
00:25:28,970 --> 00:25:32,539
uses the projection matrix that

613
00:25:30,740 --> 00:25:34,460
projection matrix actually Maps our

614
00:25:32,539 --> 00:25:37,789
coordinates into the unit cube for us

615
00:25:34,460 --> 00:25:39,380
from our screen space okay that that's

616
00:25:37,789 --> 00:25:45,649
what we would like that's what we would

617
00:25:39,380 --> 00:25:46,730
like to have happen okay so how do we do

618
00:25:45,650 --> 00:25:51,320
that

619
00:25:46,730 --> 00:25:56,579
well if you've been paying attention to

620
00:25:51,319 --> 00:26:00,389
our maths and you know maths the plural

621
00:25:56,579 --> 00:26:02,220
of course coming from the Britain then

622
00:26:00,390 --> 00:26:04,590
you should actually kind of already have

623
00:26:02,220 --> 00:26:06,089
an idea of how we would do this this is

624
00:26:04,589 --> 00:26:07,949
not really a mystery and it's not

625
00:26:06,089 --> 00:26:09,269
particularly complicated sometimes it

626
00:26:07,950 --> 00:26:12,509
can take a little while to get right

627
00:26:09,269 --> 00:26:14,549
because hey there's enough sort of fuzzy

628
00:26:12,509 --> 00:26:17,099
things around that that could be

629
00:26:14,549 --> 00:26:22,349
possible but in general pretty basic

630
00:26:17,099 --> 00:26:26,069
here is how this works right as I told

631
00:26:22,349 --> 00:26:30,689
you before in OpenGL what happens is we

632
00:26:26,069 --> 00:26:33,329
have a point in clip space and that gets

633
00:26:30,690 --> 00:26:36,929
computed from the points that we pass in

634
00:26:33,329 --> 00:26:40,829
right so our actual P gets passed in and

635
00:26:36,929 --> 00:26:44,120
it's multiplied by M projection a

636
00:26:40,829 --> 00:26:47,819
projection matrix and an M Model View

637
00:26:44,119 --> 00:26:49,799
right and like I was saying before

638
00:26:47,819 --> 00:26:52,589
although we haven't really covered this

639
00:26:49,799 --> 00:26:54,029
much in hand-made here oh these are

640
00:26:52,589 --> 00:26:55,319
actually multiplied together so for all

641
00:26:54,029 --> 00:26:57,389
intents and purposes it's just one

642
00:26:55,319 --> 00:27:00,720
matrix it's just like what we do know

643
00:26:57,390 --> 00:27:02,340
there's really just one M and since we

644
00:27:00,720 --> 00:27:03,539
have set our modelview matrix to the

645
00:27:02,339 --> 00:27:06,409
identity matrix which means it doesn't

646
00:27:03,539 --> 00:27:09,808
do anything essentially our entire

647
00:27:06,410 --> 00:27:13,230
opengl fixed function pipeline operation

648
00:27:09,808 --> 00:27:15,149
at this point looks like this okay this

649
00:27:13,230 --> 00:27:20,429
is all we're doing so we're literally

650
00:27:15,150 --> 00:27:22,290
just doing a P prime equals M P the most

651
00:27:20,429 --> 00:27:26,540
basic vector transform you could

652
00:27:22,289 --> 00:27:29,730
possibly do you know we're multiplying a

653
00:27:26,539 --> 00:27:31,799
for this is this is a four element right

654
00:27:29,730 --> 00:27:33,240
this is a four by four and producing

655
00:27:31,799 --> 00:27:36,808
another four and remember the reason

656
00:27:33,240 --> 00:27:39,420
it's four is because it's X Y Z W it's

657
00:27:36,808 --> 00:27:41,940
got that synthetic coordinate now in our

658
00:27:39,420 --> 00:27:43,620
case we don't use Z right we're not

659
00:27:41,940 --> 00:27:46,470
actually using Z because we've handled

660
00:27:43,619 --> 00:27:48,089
that so this is Z is always zero right

661
00:27:46,470 --> 00:27:50,130
for all intents for us we don't care

662
00:27:48,089 --> 00:27:52,558
what it is and since we're transferring

663
00:27:50,130 --> 00:27:54,900
points W is always 1 so really we're

664
00:27:52,558 --> 00:27:57,899
just talking about XY 0 1 is the vector

665
00:27:54,900 --> 00:27:59,600
we're always transforming and M is this

666
00:27:57,900 --> 00:28:02,059
matrix that we can set up to be whatever

667
00:27:59,599 --> 00:28:06,319
want so we know that we're trying to

668
00:28:02,058 --> 00:28:07,879
produce a P prime here that has the

669
00:28:06,319 --> 00:28:09,558
structure that looks like this we want Z

670
00:28:07,880 --> 00:28:11,660
to stay zero or really honestly we don't

671
00:28:09,558 --> 00:28:14,779
care it doesn't matter what Z is at all

672
00:28:11,660 --> 00:28:19,038
to us to be honest so we don't really

673
00:28:14,779 --> 00:28:22,279
care what what Z actually is beyond just

674
00:28:19,038 --> 00:28:26,240
respecting what OpenGL needs it to be

675
00:28:22,279 --> 00:28:29,269
and trying to think of how to to say

676
00:28:26,240 --> 00:28:32,870
this essentially there's a step that we

677
00:28:29,269 --> 00:28:37,579
have not talked about that occurs after

678
00:28:32,869 --> 00:28:40,729
you do your transform and that is if you

679
00:28:37,579 --> 00:28:43,730
are trying to do the perspective stuff

680
00:28:40,730 --> 00:28:45,950
that we covered a while back what

681
00:28:43,730 --> 00:28:48,019
happens is whenever you transfer them

682
00:28:45,950 --> 00:28:51,500
you end up with something in the the W

683
00:28:48,019 --> 00:28:54,440
coordinate and OpenGL will divide the

684
00:28:51,500 --> 00:28:56,359
vector by whatever that value is so if

685
00:28:54,440 --> 00:28:58,788
the W coordinate is like three or

686
00:28:56,359 --> 00:29:01,129
something it will divide this out to

687
00:28:58,788 --> 00:29:03,650
produce a one so it will divide

688
00:29:01,130 --> 00:29:09,440
everything by three the reason it does

689
00:29:03,650 --> 00:29:10,940
that is that's the hacked way and hacked

690
00:29:09,440 --> 00:29:16,009
may be a strong term there's a little

691
00:29:10,940 --> 00:29:17,659
bit of mathematical rigor to it but the

692
00:29:16,009 --> 00:29:20,029
reason for that is if you remember how

693
00:29:17,659 --> 00:29:21,620
we did our divide by Z thing to sort of

694
00:29:20,029 --> 00:29:22,908
get the perspective so that things

695
00:29:21,619 --> 00:29:25,219
shrink as they get further from the

696
00:29:22,909 --> 00:29:26,780
camera that's how they work that in

697
00:29:25,220 --> 00:29:30,710
there because remember a matrix

698
00:29:26,779 --> 00:29:35,990
transform is always linear and dividing

699
00:29:30,710 --> 00:29:39,350
by Z is totally not linear right just to

700
00:29:35,990 --> 00:29:41,650
be completely clear if even if I was

701
00:29:39,349 --> 00:29:44,329
just to talk about the single variable Z

702
00:29:41,650 --> 00:29:46,519
that's Z to the first power

703
00:29:44,329 --> 00:29:49,939
that's linear right and we're talking

704
00:29:46,519 --> 00:29:53,269
about something that is now doing Z you

705
00:29:49,940 --> 00:29:55,130
know to some kind of a of an inverse

706
00:29:53,269 --> 00:29:58,429
power right it would be Z to the

707
00:29:55,130 --> 00:30:02,210
negative 1 power it'd be 1 over Z which

708
00:29:58,429 --> 00:30:03,950
is in no way to the power of 1 so

709
00:30:02,210 --> 00:30:05,870
basically the way that they hack that

710
00:30:03,950 --> 00:30:08,929
into the pipeline to make it sort of

711
00:30:05,869 --> 00:30:11,509
still feel like it's all matrix e is it

712
00:30:08,929 --> 00:30:13,190
just it's specified that after you do

713
00:30:11,509 --> 00:30:14,900
this matrix transformation you do

714
00:30:13,190 --> 00:30:19,250
I'd buy the W coordinate to

715
00:30:14,900 --> 00:30:26,480
quote-unquote renormalize write or

716
00:30:19,250 --> 00:30:30,579
reimagine eyes those coordinates where W

717
00:30:26,480 --> 00:30:30,579
is always going to be equal to two one

718
00:30:31,420 --> 00:30:41,090
it's I don't really know what to say

719
00:30:37,069 --> 00:30:42,769
about it it's it's not we could kind of

720
00:30:41,089 --> 00:30:44,269
go into that in a little more detail but

721
00:30:42,769 --> 00:30:45,950
I'd rather just kind of leave that be

722
00:30:44,269 --> 00:30:47,150
for now because it's really it's more of

723
00:30:45,950 --> 00:30:49,220
a topic for when you're starting to

724
00:30:47,150 --> 00:30:51,259
think about how to do 3d transforms with

725
00:30:49,220 --> 00:30:52,819
these and we just don't have that in

726
00:30:51,259 --> 00:30:55,099
hand made here we've already talked

727
00:30:52,819 --> 00:30:57,500
about how to handle the perspective with

728
00:30:55,099 --> 00:31:02,269
Z and so really it's just kind of a

729
00:30:57,500 --> 00:31:03,859
topic that's super not relevant here so

730
00:31:02,269 --> 00:31:06,109
point being we're gonna leave that

731
00:31:03,859 --> 00:31:07,849
bottom part we're just not really gonna

732
00:31:06,109 --> 00:31:09,409
think about that much we're just going

733
00:31:07,849 --> 00:31:10,969
to assume that we come out with a 0 &amp; 1

734
00:31:09,410 --> 00:31:12,680
here and we're gonna make that be true

735
00:31:10,970 --> 00:31:15,230
so it's really just the X and the y that

736
00:31:12,680 --> 00:31:17,750
we care about right and this part that

737
00:31:15,230 --> 00:31:19,029
has to be in clip space like I said clip

738
00:31:17,750 --> 00:31:21,789
space is this sort of synthetic

739
00:31:19,029 --> 00:31:24,889
coordinate system where a negative one

740
00:31:21,789 --> 00:31:28,009
is over here this is negative 1 negative

741
00:31:24,890 --> 00:31:29,180
1 this is 1 1 right

742
00:31:28,009 --> 00:31:31,849
thank you I shouldn't bother drawing

743
00:31:29,180 --> 00:31:35,060
that there and so it's sort of this this

744
00:31:31,849 --> 00:31:37,730
this dimension to cube right that's

745
00:31:35,059 --> 00:31:40,220
that's it's sort of radius 1 in all

746
00:31:37,730 --> 00:31:42,200
directions you might say and what we

747
00:31:40,220 --> 00:31:45,350
need to do is we need to map the entire

748
00:31:42,200 --> 00:31:48,140
visible screen into this space which

749
00:31:45,349 --> 00:31:50,149
means that in order to do the coordinate

750
00:31:48,140 --> 00:31:52,670
system we want where our coordinates are

751
00:31:50,150 --> 00:31:54,110
currently like 0 to width of the screen

752
00:31:52,670 --> 00:31:57,560
or something like that that's what we

753
00:31:54,109 --> 00:32:01,129
have we need to essentially divide and

754
00:31:57,559 --> 00:32:03,500
displace our values so that 0 ends up

755
00:32:01,130 --> 00:32:06,020
being mapped to negative 1 and width

756
00:32:03,500 --> 00:32:07,609
ends up being mapped to 1 right that's

757
00:32:06,019 --> 00:32:10,549
what we actually need to have happen

758
00:32:07,609 --> 00:32:12,799
here and it I agree it's kind of stupid

759
00:32:10,549 --> 00:32:14,450
that we have to do that because OpenGL

760
00:32:12,799 --> 00:32:16,970
is then just gonna turn right back

761
00:32:14,450 --> 00:32:19,549
around and remap negative 1 and 1 to 0

762
00:32:16,970 --> 00:32:21,710
to width so we're literally doing this

763
00:32:19,549 --> 00:32:24,710
for no other reason than to shoehorn it

764
00:32:21,710 --> 00:32:26,000
into the GPUs concept of what the

765
00:32:24,710 --> 00:32:26,750
graphics boat pipeline is supposed to

766
00:32:26,000 --> 00:32:32,480
look at look

767
00:32:26,750 --> 00:32:34,099
like oh well life is hard but a small

768
00:32:32,480 --> 00:32:40,160
price to pay to access all the power on

769
00:32:34,099 --> 00:32:41,990
the GPU so you know who cares so anyway

770
00:32:40,160 --> 00:32:44,690
so that's what we actually have to do

771
00:32:41,990 --> 00:32:47,029
and so that's what we have to setup our

772
00:32:44,690 --> 00:32:49,460
matrix to do so what we're essentially

773
00:32:47,029 --> 00:32:51,230
doing here is we're saying okay we need

774
00:32:49,460 --> 00:32:54,319
to set up a matrix and we can really

775
00:32:51,230 --> 00:32:56,990
think of these matrices in in ass more

776
00:32:54,319 --> 00:32:59,899
simplified fashion when we don't care

777
00:32:56,990 --> 00:33:01,160
what those bottom values and we don't

778
00:32:59,900 --> 00:33:02,720
have to do anything the bottom values if

779
00:33:01,160 --> 00:33:05,090
we know that we're inputting something

780
00:33:02,720 --> 00:33:07,190
that looks like this and we know that

781
00:33:05,089 --> 00:33:10,669
we're outputting something that looks

782
00:33:07,190 --> 00:33:14,180
like this right then it tells us some

783
00:33:10,670 --> 00:33:16,400
things about this matrix that allow us

784
00:33:14,180 --> 00:33:17,960
to sort of by default fill in some

785
00:33:16,400 --> 00:33:19,880
values so we don't have to think too

786
00:33:17,960 --> 00:33:22,069
hard about a bunch of the different

787
00:33:19,880 --> 00:33:25,520
values for example if this has to be

788
00:33:22,069 --> 00:33:27,470
equal to one well the X and the y value

789
00:33:25,519 --> 00:33:29,299
that's coming in here obviously can't be

790
00:33:27,470 --> 00:33:31,220
multiplied by anything because if they

791
00:33:29,299 --> 00:33:33,829
were we might be we might end up with an

792
00:33:31,220 --> 00:33:35,480
on one value here so essentially all we

793
00:33:33,829 --> 00:33:37,189
want at the bottom is just something

794
00:33:35,480 --> 00:33:39,079
that reproduces the one so we want to

795
00:33:37,190 --> 00:33:40,759
knock out all of these terms and just be

796
00:33:39,079 --> 00:33:42,230
left with the one technically we could

797
00:33:40,759 --> 00:33:43,759
put anything we wanted here because this

798
00:33:42,230 --> 00:33:45,259
is OE zero but it seems like better to

799
00:33:43,759 --> 00:33:46,970
leave it zero so that we know even if we

800
00:33:45,259 --> 00:33:51,529
pass the Z coordinate we'd still get a

801
00:33:46,970 --> 00:33:54,200
one okay so we know that we want this

802
00:33:51,529 --> 00:33:56,569
this to come through a zero we don't

803
00:33:54,200 --> 00:33:58,910
want anything in there at the moment not

804
00:33:56,569 --> 00:34:00,649
that it really matters so since this is

805
00:33:58,910 --> 00:34:01,850
a zero and this is a zero I feel like

806
00:34:00,650 --> 00:34:03,769
maybe we just treat that as a pass

807
00:34:01,849 --> 00:34:05,449
through so that again would be almost

808
00:34:03,769 --> 00:34:07,430
exactly the same it's just the identity

809
00:34:05,450 --> 00:34:08,898
matrix kind of portions here so that way

810
00:34:07,430 --> 00:34:10,970
we just take whatever is in here and we

811
00:34:08,898 --> 00:34:13,549
pass it through here right and that

812
00:34:10,969 --> 00:34:15,439
seems fine and then furthermore this

813
00:34:13,550 --> 00:34:17,000
value we never want to affect these

814
00:34:15,440 --> 00:34:19,340
values so we're essentially saying that

815
00:34:17,000 --> 00:34:20,960
when it whatever it gets multiplied by

816
00:34:19,340 --> 00:34:23,480
in these remember because it's going to

817
00:34:20,960 --> 00:34:26,360
be it's gonna be x times this location Y

818
00:34:23,480 --> 00:34:28,010
times this location plus you know this

819
00:34:26,360 --> 00:34:30,200
times this location plus this times this

820
00:34:28,010 --> 00:34:32,090
location you can kind of see that we

821
00:34:30,199 --> 00:34:34,549
already know that we don't want our Z

822
00:34:32,090 --> 00:34:35,990
value ever to affect anything so even if

823
00:34:34,550 --> 00:34:37,310
it wasn't zero we want to make sure that

824
00:34:35,989 --> 00:34:38,329
it doesn't actually affect our x and y

825
00:34:37,309 --> 00:34:39,070
for the time being because that's not

826
00:34:38,329 --> 00:34:41,949
something we actually

827
00:34:39,070 --> 00:34:44,410
wanted that happen so really what that

828
00:34:41,949 --> 00:34:47,019
means is we're left with just some very

829
00:34:44,409 --> 00:34:48,849
specific places here we're left with

830
00:34:47,019 --> 00:34:53,429
essentially something that looks like

831
00:34:48,849 --> 00:34:56,920
this right something sort of like this

832
00:34:53,429 --> 00:34:58,899
and what we can sort of see about the

833
00:34:56,920 --> 00:35:01,900
equation as this comes out I don't know

834
00:34:58,900 --> 00:35:03,760
can I erase there we go

835
00:35:01,900 --> 00:35:06,820
what we can see about what happens to

836
00:35:03,760 --> 00:35:08,920
this equation if we assume a priori that

837
00:35:06,820 --> 00:35:13,300
this is what it's going to look like is

838
00:35:08,920 --> 00:35:14,950
that we'd have ax plus B y plus e right

839
00:35:13,300 --> 00:35:20,019
if I just doing the multiplication here

840
00:35:14,949 --> 00:35:24,029
right ax B Y e and then I was gonna just

841
00:35:20,019 --> 00:35:28,690
do the exact same thing here CX plus dy

842
00:35:24,030 --> 00:35:31,210
plus F right there we go so if you take

843
00:35:28,690 --> 00:35:33,159
a look at what happens there these are

844
00:35:31,210 --> 00:35:36,579
our equations that we know we're going

845
00:35:33,159 --> 00:35:38,679
to have as a result and so we can using

846
00:35:36,579 --> 00:35:44,349
these equations sort of back figure out

847
00:35:38,679 --> 00:35:46,599
what our what values we want to put in

848
00:35:44,349 --> 00:35:48,699
for these coefficients in our matrix to

849
00:35:46,599 --> 00:35:52,239
give us the transform that we want so

850
00:35:48,699 --> 00:35:55,539
what we know now is we want write ax

851
00:35:52,239 --> 00:36:00,579
plus B y plus e right that's our x

852
00:35:55,539 --> 00:36:02,860
coordinate we want that equation to

853
00:36:00,579 --> 00:36:05,170
essentially be something that takes in

854
00:36:02,860 --> 00:36:10,480
right we're trying to produce a function

855
00:36:05,170 --> 00:36:13,480
that takes in an x value and outputs a

856
00:36:10,480 --> 00:36:17,860
new x value such that this was in the

857
00:36:13,480 --> 00:36:20,079
range from from zero to width and this

858
00:36:17,860 --> 00:36:25,650
is in the range of negative 1 to 1

859
00:36:20,079 --> 00:36:28,929
okay so what we know is that for example

860
00:36:25,650 --> 00:36:31,269
since we're not rotating things we can

861
00:36:28,929 --> 00:36:34,389
pretty much say one additional thing

862
00:36:31,269 --> 00:36:36,639
since the Y value doesn't have any

863
00:36:34,389 --> 00:36:38,139
participation here like it doesn't

864
00:36:36,639 --> 00:36:40,509
matter what the Y value is for our

865
00:36:38,139 --> 00:36:42,789
computation of the X we can also say

866
00:36:40,510 --> 00:36:43,930
that like these terms similarly the X as

867
00:36:42,789 --> 00:36:46,329
now becomes 2 might we could say that

868
00:36:43,929 --> 00:36:48,129
these terms also are irrelevant right

869
00:36:46,329 --> 00:36:50,049
because we don't were not rotating

870
00:36:48,130 --> 00:36:52,090
anything so we don't ever need the Y

871
00:36:50,050 --> 00:36:52,869
component to move into the X space or

872
00:36:52,090 --> 00:36:54,568
vice versa

873
00:36:52,869 --> 00:36:57,940
so we can also kind of get rid of these

874
00:36:54,568 --> 00:36:59,528
all right so we're back we're down to a

875
00:36:57,940 --> 00:37:02,798
really really simple equation we're

876
00:36:59,528 --> 00:37:07,659
basically saying f of X you know equals

877
00:37:02,798 --> 00:37:14,048
ax plus B here in this case and we're

878
00:37:07,659 --> 00:37:15,338
saying F of y equals dy plus F in this

879
00:37:14,048 --> 00:37:19,449
case we've got a little bit of too many

880
00:37:15,338 --> 00:37:20,889
FS here but oh well life goes on in fact

881
00:37:19,449 --> 00:37:23,318
this is probably a G it's a separate

882
00:37:20,889 --> 00:37:25,088
function right so we've got these two

883
00:37:23,318 --> 00:37:27,818
functions and we just want something

884
00:37:25,088 --> 00:37:30,460
that does this mapping and it's pretty

885
00:37:27,818 --> 00:37:32,949
easy for us to figure out what that

886
00:37:30,460 --> 00:37:35,019
would be right because this mapping

887
00:37:32,949 --> 00:37:38,710
defines exactly what we want

888
00:37:35,018 --> 00:37:41,199
we know that for X for example our f of

889
00:37:38,710 --> 00:37:44,588
0 we want to be equal to negative 1 and

890
00:37:41,199 --> 00:37:49,778
we know that our f of width we want to

891
00:37:44,588 --> 00:37:52,900
be equal to 1 and that's two sort of

892
00:37:49,778 --> 00:37:55,929
equations we have right and we only have

893
00:37:52,900 --> 00:37:57,700
two unknowns a and E so if you write

894
00:37:55,929 --> 00:38:01,268
this out right if you write this out

895
00:37:57,699 --> 00:38:06,338
just substituting if x is 0 then we

896
00:38:01,268 --> 00:38:08,618
would have a times zero plus e equals

897
00:38:06,338 --> 00:38:10,509
negative 1 and that immediately just

898
00:38:08,619 --> 00:38:13,150
tells us that e equals negative 1 right

899
00:38:10,509 --> 00:38:15,429
because that term goes away so there

900
00:38:13,150 --> 00:38:19,410
we're done we solve one term right and f

901
00:38:15,429 --> 00:38:21,909
of width equals one well then we know

902
00:38:19,409 --> 00:38:23,768
again multiplying this or rather

903
00:38:21,909 --> 00:38:28,778
expanding this out we would just have a

904
00:38:23,768 --> 00:38:35,588
times width plus e equals 1 we know that

905
00:38:28,778 --> 00:38:36,849
e is negative 1 right yeah sorry it's

906
00:38:35,588 --> 00:38:40,239
right up above there not sure why I'm

907
00:38:36,849 --> 00:38:45,309
forgetting so we have a width minus 1

908
00:38:40,239 --> 00:38:48,489
equals 1 or a width equals 2 right and

909
00:38:45,309 --> 00:38:53,289
hey guess what you divide this out and

910
00:38:48,489 --> 00:38:59,409
you get width or sorry a equals 2 over

911
00:38:53,289 --> 00:39:01,989
width right so that lets us know exactly

912
00:38:59,409 --> 00:39:03,699
what our what our function for for f is

913
00:39:01,989 --> 00:39:05,619
in this case and it allows us to fill in

914
00:39:03,699 --> 00:39:07,748
our matrix exactly what we wanted our

915
00:39:05,619 --> 00:39:10,838
II in this case is a negative one RA in

916
00:39:07,748 --> 00:39:14,078
this case is a 2 over width and you can

917
00:39:10,838 --> 00:39:17,528
kind of see why that is right it's

918
00:39:14,079 --> 00:39:19,480
because we're trying to expand it to a

919
00:39:17,528 --> 00:39:22,028
thing that's 2 units wide

920
00:39:19,480 --> 00:39:23,528
right remember our unit cube is 2 units

921
00:39:22,028 --> 00:39:26,018
wide we're trying to expand this thing

922
00:39:23,528 --> 00:39:28,329
as 2 units wide we're trying to get rid

923
00:39:26,018 --> 00:39:30,669
of the fact that it goes from 0 to width

924
00:39:28,329 --> 00:39:31,809
we want to be 0 to 1 or so we can map it

925
00:39:30,670 --> 00:39:33,430
as a unit interval right so we're

926
00:39:31,809 --> 00:39:36,400
dividing by with to normalize this to 0

927
00:39:33,429 --> 00:39:38,679
to 1 right we're multiplying by 2 to

928
00:39:36,400 --> 00:39:42,160
blow it out to a 2 wide thing and then

929
00:39:38,679 --> 00:39:44,679
we're offsetting it by that one to make

930
00:39:42,159 --> 00:39:46,899
sure that we shift it back over so that

931
00:39:44,679 --> 00:39:49,028
it starts at negative 1 instead of 0 so

932
00:39:46,900 --> 00:39:50,950
you can you can see that we solve the

933
00:39:49,028 --> 00:39:52,690
math purely algebraically but it makes

934
00:39:50,949 --> 00:39:54,368
concrete sense when we look at it over

935
00:39:52,690 --> 00:39:56,170
here and hey big surprise these

936
00:39:54,369 --> 00:39:57,910
equations are exactly the same so you

937
00:39:56,170 --> 00:39:59,230
know we don't even have to solve the

938
00:39:57,909 --> 00:40:03,548
other one we know it's just going to be

939
00:39:59,230 --> 00:40:05,949
2 over height and minus 1 right so that

940
00:40:03,548 --> 00:40:09,940
tells us exactly what our matrix looks

941
00:40:05,949 --> 00:40:13,449
like now our matrix is just this matrix

942
00:40:09,940 --> 00:40:17,829
right it's the 2 over width wow that's

943
00:40:13,449 --> 00:40:24,038
really bad handwriting 2 over width 0 0

944
00:40:17,829 --> 00:40:31,170
0 sorry negative 1 0 2 over height 0

945
00:40:24,039 --> 00:40:33,278
negative 1 0 0 1 0 and 0 0 0 1 okay and

946
00:40:31,170 --> 00:40:37,809
that's the thing that will compress us

947
00:40:33,278 --> 00:40:39,278
down into that unit cube so you know we

948
00:40:37,809 --> 00:40:40,960
probably don't want to jump right into

949
00:40:39,278 --> 00:40:42,338
trying that right away because hey we've

950
00:40:40,960 --> 00:40:43,449
got all this other work over here too

951
00:40:42,338 --> 00:40:45,818
like we don't even know how we're going

952
00:40:43,449 --> 00:40:48,699
to call this function this handmade open

953
00:40:45,818 --> 00:40:50,949
yield function so what we can do instead

954
00:40:48,699 --> 00:40:53,528
is we can jump over to the stuff that we

955
00:40:50,949 --> 00:40:55,088
already have working right because you

956
00:40:53,528 --> 00:40:58,358
know we've got this thing over here

957
00:40:55,088 --> 00:41:00,849
where we've we've got this code working

958
00:40:58,358 --> 00:41:02,558
where we're drawing stuff we should be

959
00:41:00,849 --> 00:41:04,390
able to test it over here because you

960
00:41:02,559 --> 00:41:05,920
know we probably we only got like 15

961
00:41:04,389 --> 00:41:07,210
minutes left we probably don't have time

962
00:41:05,920 --> 00:41:10,119
to get all the rest of stuff working

963
00:41:07,210 --> 00:41:11,528
over there today right let's test just

964
00:41:10,119 --> 00:41:13,150
that one piece over here

965
00:41:11,528 --> 00:41:15,099
and get that working in something that

966
00:41:13,150 --> 00:41:17,798
we know works so let's shift this

967
00:41:15,099 --> 00:41:19,298
remember we fixed this by just directly

968
00:41:17,798 --> 00:41:20,918
passing the coordinates to the unit cube

969
00:41:19,298 --> 00:41:23,978
let's go back to doing it the way we

970
00:41:20,918 --> 00:41:26,168
were doing it before let's go back to

971
00:41:23,978 --> 00:41:27,848
doing it with in fact you know what we

972
00:41:26,168 --> 00:41:29,318
could do we could just use the min P Max

973
00:41:27,849 --> 00:41:30,849
P thing we were doing over here right we

974
00:41:29,318 --> 00:41:33,969
could just take this open jail rectangle

975
00:41:30,849 --> 00:41:41,709
thing exactly how it is here it hears

976
00:41:33,969 --> 00:41:44,548
that like so let's get rid of that so

977
00:41:41,708 --> 00:41:49,028
there's our Open GL rectangle function

978
00:41:44,548 --> 00:41:50,380
and I guess we you know at the moment we

979
00:41:49,028 --> 00:41:53,619
could still leave the color thing in

980
00:41:50,380 --> 00:41:57,278
here I suppose we could just say that

981
00:41:53,619 --> 00:42:00,579
the color is you know all one's just

982
00:41:57,278 --> 00:42:02,518
white so we can still do exactly this

983
00:42:00,579 --> 00:42:07,719
thing and now we can specify our min P

984
00:42:02,518 --> 00:42:09,458
and our max P like so so we know our min

985
00:42:07,719 --> 00:42:12,539
P is just going to be 0 0 and we knew

986
00:42:09,458 --> 00:42:15,188
our max B is going to be buffer width

987
00:42:12,539 --> 00:42:22,209
buffer height I believe I'm sorry window

988
00:42:15,188 --> 00:42:25,208
width window height is that correct no

989
00:42:22,208 --> 00:42:26,978
that's not correct that's not correct at

990
00:42:25,208 --> 00:42:30,038
all we actually want it it's in it's in

991
00:42:26,978 --> 00:42:32,498
terms of the buffer I believe right at

992
00:42:30,039 --> 00:42:35,619
the moment there's some aspect ratio

993
00:42:32,498 --> 00:42:40,629
stuff we would want to do here I'll fact

994
00:42:35,619 --> 00:42:45,130
I'll mention that to do decide how we

995
00:42:40,630 --> 00:42:48,999
want to handle aspect ratio black bars

996
00:42:45,130 --> 00:42:50,528
for prop so yeah it's not really that

997
00:42:48,998 --> 00:42:52,228
it's actually the buffer within the

998
00:42:50,528 --> 00:42:54,938
buffer height right because that's

999
00:42:52,228 --> 00:42:57,728
that's the actual size that we're trying

1000
00:42:54,938 --> 00:42:59,768
to fit into the display so I believe

1001
00:42:57,728 --> 00:43:03,489
that would be a more correct way of

1002
00:42:59,768 --> 00:43:04,688
looking at it probably but you can it's

1003
00:43:03,489 --> 00:43:06,159
six of one half dozen the other it

1004
00:43:04,688 --> 00:43:07,838
depends on exactly what you're trying to

1005
00:43:06,159 --> 00:43:09,369
do so you could pass either there and it

1006
00:43:07,838 --> 00:43:11,409
would just have different behavior when

1007
00:43:09,369 --> 00:43:12,999
you when the window isn't the same size

1008
00:43:11,409 --> 00:43:17,528
as the back buffer if they're the same

1009
00:43:12,998 --> 00:43:20,198
size it won't matter so anyway that's an

1010
00:43:17,528 --> 00:43:22,228
example of that and now if we run it

1011
00:43:20,199 --> 00:43:24,579
we'll go back to the old bug we have

1012
00:43:22,228 --> 00:43:26,228
right where we've kind of got this thing

1013
00:43:24,579 --> 00:43:29,109
where you know we're drawing in the

1014
00:43:26,228 --> 00:43:31,268
wrong place and we're drawing like I

1015
00:43:29,108 --> 00:43:32,558
know you can't probably tell exactly

1016
00:43:31,268 --> 00:43:35,379
what's going on there

1017
00:43:32,559 --> 00:43:39,519
but we're basically drawing like one

1018
00:43:35,380 --> 00:43:42,759
pixel of our of our bitmap right weird

1019
00:43:39,518 --> 00:43:43,328
it's like totally wrong because it's

1020
00:43:42,759 --> 00:43:45,429
huge

1021
00:43:43,329 --> 00:43:47,798
remember the whole thing is specified

1022
00:43:45,429 --> 00:43:50,198
from negative 1 to 1 and we're passing

1023
00:43:47,798 --> 00:43:54,038
like 1920 like we're passing something

1024
00:43:50,199 --> 00:43:57,099
that's that's that's like a thousand

1025
00:43:54,039 --> 00:43:59,979
times the screen size as the coordinate

1026
00:43:57,099 --> 00:44:04,359
you know over in the corner not not what

1027
00:43:59,978 --> 00:44:06,218
we would want right so let's go ahead

1028
00:44:04,358 --> 00:44:08,708
and try to fix that with our projection

1029
00:44:06,219 --> 00:44:10,749
matrix so we have load identity here

1030
00:44:08,708 --> 00:44:13,748
what we're gonna want to do now is learn

1031
00:44:10,748 --> 00:44:16,179
one new OpenGL call which is a way to

1032
00:44:13,748 --> 00:44:19,419
load something other than the identity

1033
00:44:16,179 --> 00:44:21,548
so what we want to do is do like load

1034
00:44:19,420 --> 00:44:23,409
matrix call and there's a couple of

1035
00:44:21,548 --> 00:44:24,759
different ones of these which I'll kind

1036
00:44:23,409 --> 00:44:25,958
of show you now they basically are the

1037
00:44:24,759 --> 00:44:28,059
same as sort of the other ones where you

1038
00:44:25,958 --> 00:44:29,919
say what you are you you know what kind

1039
00:44:28,059 --> 00:44:31,959
of matrix are you passing let me find

1040
00:44:29,920 --> 00:44:37,778
something here that's a documentation

1041
00:44:31,958 --> 00:44:39,568
for it the service is unavailable okay I

1042
00:44:37,778 --> 00:44:43,028
don't know what that means

1043
00:44:39,568 --> 00:44:46,719
I don't want Stack Overflow I want like

1044
00:44:43,028 --> 00:44:48,369
a spec page please how about this is

1045
00:44:46,719 --> 00:44:52,329
this that doesn't seem to be loading

1046
00:44:48,369 --> 00:44:55,028
here we go all right

1047
00:44:52,329 --> 00:44:57,249
so here you can see geo load matrix D

1048
00:44:55,028 --> 00:44:59,409
and G load matrix F the two flavors of

1049
00:44:57,248 --> 00:45:01,208
this and again like I said it's kind of

1050
00:44:59,409 --> 00:45:02,949
almost like a Hungarian notation sort of

1051
00:45:01,208 --> 00:45:04,568
a thing it's not really as bad as some

1052
00:45:02,949 --> 00:45:05,920
very notation it's it's actually kind of

1053
00:45:04,568 --> 00:45:07,239
good because in this case unlike

1054
00:45:05,920 --> 00:45:07,659
Hungarian tation which is completely

1055
00:45:07,239 --> 00:45:09,579
useless

1056
00:45:07,659 --> 00:45:11,528
this actually differentiates these two

1057
00:45:09,579 --> 00:45:14,619
functions for a calling program like if

1058
00:45:11,528 --> 00:45:17,018
it was in C where you where you can't

1059
00:45:14,619 --> 00:45:19,358
overload functions that's kind of there

1060
00:45:17,018 --> 00:45:21,218
to prevent that right so it's not bad

1061
00:45:19,358 --> 00:45:24,009
like Hungarian it's not superfluous like

1062
00:45:21,219 --> 00:45:25,329
Hungary notation is we're not passing

1063
00:45:24,009 --> 00:45:26,739
doubles that's what the D stands for

1064
00:45:25,329 --> 00:45:30,729
we're passing floats so we're going to

1065
00:45:26,739 --> 00:45:33,278
be calling load matrix F right and as

1066
00:45:30,728 --> 00:45:36,248
you can see it's expected to pass a GL

1067
00:45:33,278 --> 00:45:39,909
float here so what we need is we need an

1068
00:45:36,248 --> 00:45:42,788
array of floats that comprises the

1069
00:45:39,909 --> 00:45:46,048
matrix so we need our projection matrix

1070
00:45:42,789 --> 00:45:48,400
here and we need to specify

1071
00:45:46,048 --> 00:45:53,469
the actual matrix that we just talked

1072
00:45:48,400 --> 00:45:57,430
about now here is write the identity

1073
00:45:53,469 --> 00:45:59,469
matrix so if we wanted to you could sort

1074
00:45:57,429 --> 00:46:04,419
of imagine this being the identity

1075
00:45:59,469 --> 00:46:05,709
matrix like so that would be what that

1076
00:46:04,420 --> 00:46:08,318
would look like and I guess I could

1077
00:46:05,710 --> 00:46:09,250
probably do it like this because we

1078
00:46:08,318 --> 00:46:11,679
wouldn't be able to use those

1079
00:46:09,250 --> 00:46:15,190
initializers there so there's the the

1080
00:46:11,679 --> 00:46:16,808
matrix and when we do GL load matrix F

1081
00:46:15,190 --> 00:46:19,960
we can basically just pass at a pointer

1082
00:46:16,809 --> 00:46:21,670
to any array of 16 floats and it will

1083
00:46:19,960 --> 00:46:23,139
just load that in place of the current

1084
00:46:21,670 --> 00:46:26,440
projection matrix will replace it which

1085
00:46:23,139 --> 00:46:27,879
is what we want but as soon as we start

1086
00:46:26,440 --> 00:46:29,139
to do anything more complicated with

1087
00:46:27,880 --> 00:46:32,260
this matrix we run into a particular

1088
00:46:29,139 --> 00:46:35,048
problem now what we can do right off the

1089
00:46:32,260 --> 00:46:38,890
bat is we can put in our terms here like

1090
00:46:35,048 --> 00:46:42,818
I said where we had kind of our our two

1091
00:46:38,889 --> 00:46:47,980
over width right and our our two over

1092
00:46:42,818 --> 00:46:49,900
height that and I don't know if we have

1093
00:46:47,980 --> 00:46:53,170
our math supported here I don't remember

1094
00:46:49,900 --> 00:46:55,088
if we do or not but we probably want to

1095
00:46:53,170 --> 00:46:57,099
use a safe ratio one here just because

1096
00:46:55,088 --> 00:46:58,900
remember there's nothing that says that

1097
00:46:57,099 --> 00:47:01,088
our buffer width might not be zero it's

1098
00:46:58,900 --> 00:47:02,680
some weird kind of unusual case so you

1099
00:47:01,088 --> 00:47:05,019
know we might want to go ahead and take

1100
00:47:02,679 --> 00:47:06,489
a little bit of a precaution there to

1101
00:47:05,019 --> 00:47:08,788
make sure that we don't divide by zero

1102
00:47:06,489 --> 00:47:11,229
in that case and just go nuts go haywire

1103
00:47:08,789 --> 00:47:13,359
so those will be fine no matter what we

1104
00:47:11,230 --> 00:47:16,179
do but we then need to put in our

1105
00:47:13,358 --> 00:47:18,940
negative ones here and there's a problem

1106
00:47:16,179 --> 00:47:20,048
with this that we'll talk about in in a

1107
00:47:18,940 --> 00:47:22,900
second

1108
00:47:20,048 --> 00:47:26,139
that that's why I can't just literally

1109
00:47:22,900 --> 00:47:28,088
think of it like that necessarily okay

1110
00:47:26,139 --> 00:47:30,308
so we don't have math in here can we

1111
00:47:28,088 --> 00:47:32,469
just get math in here is there any

1112
00:47:30,309 --> 00:47:40,599
reason we can't just include the math

1113
00:47:32,469 --> 00:47:44,230
library square root is not found where

1114
00:47:40,599 --> 00:47:49,019
is square root normally found dare I ask

1115
00:47:44,230 --> 00:47:49,019
intrinsics looks like in transics

1116
00:47:53,679 --> 00:47:58,489
and so you know like if assuming we did

1117
00:47:57,349 --> 00:47:59,719
all our math right and assuming

1118
00:47:58,489 --> 00:48:02,509
everything else is fine you know we

1119
00:47:59,719 --> 00:48:05,209
would expect this to just work with the

1120
00:48:02,510 --> 00:48:08,450
projection matrix s so but of course it

1121
00:48:05,210 --> 00:48:11,750
doesn't although that looks broken for

1122
00:48:08,449 --> 00:48:13,699
other reasons so don't take that with

1123
00:48:11,750 --> 00:48:16,670
the slight grain of salt but point being

1124
00:48:13,699 --> 00:48:19,429
this is wrong already even before that

1125
00:48:16,670 --> 00:48:22,070
at least if I remember correctly and the

1126
00:48:19,429 --> 00:48:24,619
reason for that is because of an

1127
00:48:22,070 --> 00:48:28,400
encoding issue and let me explain to you

1128
00:48:24,619 --> 00:48:31,579
what that encoding issue is when I draw

1129
00:48:28,400 --> 00:48:34,309
this you notice I'm just drawing out a

1130
00:48:31,579 --> 00:48:38,029
matrix the way that you would see it in

1131
00:48:34,309 --> 00:48:39,679
a math book and that's totally fine

1132
00:48:38,030 --> 00:48:43,519
we all understand what this is and I

1133
00:48:39,679 --> 00:48:45,230
kind of showed you something that tells

1134
00:48:43,519 --> 00:48:46,849
you how this matrix works because I

1135
00:48:45,230 --> 00:48:48,380
showed you matrix multiplication I said

1136
00:48:46,849 --> 00:48:50,869
oh we kind of go like this and we go

1137
00:48:48,380 --> 00:48:53,780
like that we take the X multiply the X

1138
00:48:50,869 --> 00:48:57,769
the y by the Y positions you know Z by Z

1139
00:48:53,780 --> 00:49:00,920
W by W and and we go like this what that

1140
00:48:57,769 --> 00:49:03,440
means is you now know the structure of

1141
00:49:00,920 --> 00:49:06,200
this matrix and what its values mean by

1142
00:49:03,440 --> 00:49:08,210
looking at it because we've defined the

1143
00:49:06,199 --> 00:49:10,609
operations on it and it's all clear

1144
00:49:08,210 --> 00:49:13,010
what's going on okay so there's no

1145
00:49:10,610 --> 00:49:14,660
ambiguity when I show you this and

1146
00:49:13,010 --> 00:49:17,360
furthermore there's no ambiguity in math

1147
00:49:14,659 --> 00:49:20,000
because math writes things such that

1148
00:49:17,360 --> 00:49:22,190
column vectors multiply this way if you

1149
00:49:20,000 --> 00:49:23,719
wanted to multiply the other way you

1150
00:49:22,190 --> 00:49:25,579
could write a row vector right I could

1151
00:49:23,719 --> 00:49:30,259
write a you know sort of a vector that

1152
00:49:25,579 --> 00:49:32,960
looked like this and then if I was doing

1153
00:49:30,260 --> 00:49:36,290
multiplication that way you would see a

1154
00:49:32,960 --> 00:49:39,500
a different type of equation emerge

1155
00:49:36,289 --> 00:49:41,300
right it would be x times the x position

1156
00:49:39,500 --> 00:49:43,760
here the Y times the Y position here the

1157
00:49:41,300 --> 00:49:46,250
Zetas loosen here and it would go by

1158
00:49:43,760 --> 00:49:48,380
columns the multiplication write the

1159
00:49:46,250 --> 00:49:51,530
column the matrices columns would get

1160
00:49:48,380 --> 00:49:53,539
multiplied in here not the rows right

1161
00:49:51,530 --> 00:49:55,370
and that's a pretty important

1162
00:49:53,539 --> 00:49:57,619
distinction to understand now in math

1163
00:49:55,369 --> 00:49:59,539
you have both of those things in math

1164
00:49:57,619 --> 00:50:02,059
it's just matrix multiplication is

1165
00:49:59,539 --> 00:50:03,710
defined anytime you have two

1166
00:50:02,059 --> 00:50:05,750
matrices because the vector is just a

1167
00:50:03,710 --> 00:50:08,809
small matrix right vector is just a

1168
00:50:05,750 --> 00:50:12,230
matrix that that only has a 1 for one of

1169
00:50:08,809 --> 00:50:15,230
its dimensions but math is defined just

1170
00:50:12,230 --> 00:50:18,619
fine as long as the number of columns of

1171
00:50:15,230 --> 00:50:20,630
the input matches the number of rows I'm

1172
00:50:18,619 --> 00:50:22,900
sorry of the left-hand side matches the

1173
00:50:20,630 --> 00:50:24,110
number of rows on the right-hand side

1174
00:50:22,900 --> 00:50:26,000
right

1175
00:50:24,110 --> 00:50:28,370
that's all it cares about it doesn't

1176
00:50:26,000 --> 00:50:31,989
care about anything else as long as that

1177
00:50:28,369 --> 00:50:35,269
was true which it is in both cases right

1178
00:50:31,989 --> 00:50:37,789
we're fine and the and it'll just

1179
00:50:35,269 --> 00:50:39,650
generate a different sized thing as the

1180
00:50:37,789 --> 00:50:42,440
result if you add more right if I added

1181
00:50:39,650 --> 00:50:44,480
more in here we would just generate a

1182
00:50:42,440 --> 00:50:47,659
bigger result but the math is still

1183
00:50:44,480 --> 00:50:49,550
defined now it breaks down if I don't do

1184
00:50:47,659 --> 00:50:51,230
that if I if I tried to do it where I

1185
00:50:49,550 --> 00:50:52,400
was just doing two elements here it

1186
00:50:51,230 --> 00:50:55,309
would break down because you'd multiply

1187
00:50:52,400 --> 00:50:56,990
this by this this by this and you get to

1188
00:50:55,309 --> 00:50:58,460
hear me like I don't know what to do the

1189
00:50:56,989 --> 00:50:59,719
math is not defined anymore what does it

1190
00:50:58,460 --> 00:51:02,360
multiply there's nothing to multiply it

1191
00:50:59,719 --> 00:51:04,549
by right similarly I couldn't get rid of

1192
00:51:02,360 --> 00:51:07,070
these two same reason I also couldn't

1193
00:51:04,550 --> 00:51:09,320
get rid of just of these because then

1194
00:51:07,070 --> 00:51:11,390
these would have nothing right right but

1195
00:51:09,320 --> 00:51:13,340
as long as it's defined as long as the

1196
00:51:11,389 --> 00:51:16,989
number of rows in in the left side and

1197
00:51:13,340 --> 00:51:21,710
the number of columns on the right agree

1198
00:51:16,989 --> 00:51:23,059
we're fine so the map just works and the

1199
00:51:21,710 --> 00:51:25,940
map is clear and we all know what's

1200
00:51:23,059 --> 00:51:27,230
going on there but once that math has to

1201
00:51:25,940 --> 00:51:32,840
happen inside a computer we have a

1202
00:51:27,230 --> 00:51:35,179
problem ok these are just arrays they're

1203
00:51:32,840 --> 00:51:36,980
just memory locations they're just a

1204
00:51:35,179 --> 00:51:40,489
series of floating-point values that

1205
00:51:36,980 --> 00:51:44,800
come one after the other there is no

1206
00:51:40,489 --> 00:51:47,659
rigid rule inside the computer about

1207
00:51:44,800 --> 00:51:52,220
which way you were specifying your

1208
00:51:47,659 --> 00:52:00,129
matrix for example when I say you want

1209
00:51:52,219 --> 00:52:02,750
to multiply a matrix times a vector well

1210
00:52:00,130 --> 00:52:06,530
OpenGL or anybody else doesn't know

1211
00:52:02,750 --> 00:52:11,989
whether that means right that I've got

1212
00:52:06,530 --> 00:52:14,990
this happening right and my matrice

1213
00:52:11,989 --> 00:52:15,558
defined that way or whether I've got

1214
00:52:14,989 --> 00:52:19,159
this

1215
00:52:15,559 --> 00:52:23,059
happening and my matrix is defined this

1216
00:52:19,159 --> 00:52:25,608
way right and you might ask well what's

1217
00:52:23,059 --> 00:52:28,298
the difference the difference is where

1218
00:52:25,608 --> 00:52:31,818
these values would appear right and

1219
00:52:28,298 --> 00:52:33,978
furthermore we don't know how it chooses

1220
00:52:31,818 --> 00:52:35,748
to store the things in this matrix

1221
00:52:33,978 --> 00:52:39,078
whether it's going to store them like

1222
00:52:35,748 --> 00:52:41,929
say this way so this is the first value

1223
00:52:39,079 --> 00:52:43,849
this is the fourth value then we go to

1224
00:52:41,929 --> 00:52:45,198
this one's a fifth value and so on or

1225
00:52:43,849 --> 00:52:48,588
whether it chooses to store them this

1226
00:52:45,199 --> 00:52:50,358
way so there's all this ambiguity in

1227
00:52:48,588 --> 00:52:54,858
here and you have to make sure that you

1228
00:52:50,358 --> 00:52:57,588
get it right okay and so the way that it

1229
00:52:54,858 --> 00:53:00,889
looks if we write it out in C to match

1230
00:52:57,588 --> 00:53:02,449
the math if I remember correctly is not

1231
00:53:00,889 --> 00:53:04,938
the way that open gels fixed function

1232
00:53:02,449 --> 00:53:06,818
pipeline happens to work open eels fixed

1233
00:53:04,938 --> 00:53:10,278
function pipeline I believe goes down

1234
00:53:06,818 --> 00:53:12,558
considers multiplication by columns so

1235
00:53:10,278 --> 00:53:16,880
it says if the vectors were silently row

1236
00:53:12,559 --> 00:53:19,849
vectors actually and and so it goes like

1237
00:53:16,880 --> 00:53:21,890
safe ratio zero zero negative one the

1238
00:53:19,849 --> 00:53:27,229
negative one would actually happen over

1239
00:53:21,889 --> 00:53:28,458
here right now I'm gonna go ahead and

1240
00:53:27,228 --> 00:53:29,928
verify that cuz like I said it's been a

1241
00:53:28,458 --> 00:53:32,208
long time since I've used the fixed

1242
00:53:29,929 --> 00:53:34,189
function pipeline and so you know I

1243
00:53:32,208 --> 00:53:37,848
could I might very well be

1244
00:53:34,188 --> 00:53:41,208
misremembering that fact but I believe

1245
00:53:37,849 --> 00:53:44,920
that you need to put those in there now

1246
00:53:41,208 --> 00:53:47,448
I'm going to take a little shortcut here

1247
00:53:44,920 --> 00:53:50,739
or rather just a little I'm gonna

1248
00:53:47,449 --> 00:53:52,999
condense this just a little more cleanly

1249
00:53:50,739 --> 00:53:55,208
so you could read the matrix a little

1250
00:53:52,998 --> 00:53:55,208
bit better

1251
00:53:59,679 --> 00:54:06,440
okay so now you can kind of see it a

1252
00:54:03,858 --> 00:54:07,730
little more clearly but I believe that's

1253
00:54:06,440 --> 00:54:12,409
the way it has to go now I'm going to

1254
00:54:07,730 --> 00:54:15,440
hope that this documentation has it but

1255
00:54:12,409 --> 00:54:16,909
let's take a look here and and yet you

1256
00:54:15,440 --> 00:54:18,349
can actually see just right from this

1257
00:54:16,909 --> 00:54:20,329
definition so cure they've written it

1258
00:54:18,349 --> 00:54:22,220
out in math form for us and take a look

1259
00:54:20,329 --> 00:54:24,710
at the indices right it goes straight

1260
00:54:22,219 --> 00:54:29,000
down the column there's the 0 the 1 the

1261
00:54:24,710 --> 00:54:33,139
2 the 3 right which is exactly not how C

1262
00:54:29,000 --> 00:54:34,880
would interpret it right so they are

1263
00:54:33,139 --> 00:54:36,379
assuming that that the things go in

1264
00:54:34,880 --> 00:54:39,910
columns which means it has to look like

1265
00:54:36,380 --> 00:54:43,640
this so this is really the more correct

1266
00:54:39,909 --> 00:54:48,019
projection matrix for for what we're

1267
00:54:43,639 --> 00:54:49,309
doing right and so now as we get well

1268
00:54:48,019 --> 00:54:52,088
okay so there we go

1269
00:54:49,309 --> 00:54:55,279
so I guess there were no other problems

1270
00:54:52,088 --> 00:54:56,570
we got exactly what we expected and I

1271
00:54:55,280 --> 00:54:57,589
just wasn't sure there might I thought

1272
00:54:56,570 --> 00:55:00,109
there might have been one other problem

1273
00:54:57,588 --> 00:55:01,789
in there but anyway now we've got

1274
00:55:00,108 --> 00:55:04,098
something which actually takes screen

1275
00:55:01,789 --> 00:55:06,440
coordinates in and produces what we

1276
00:55:04,099 --> 00:55:07,849
would have expected so now we're

1277
00:55:06,440 --> 00:55:09,740
basically out of time

1278
00:55:07,849 --> 00:55:12,680
but we've done what we wanted to do here

1279
00:55:09,739 --> 00:55:15,529
and so I think we're in perfect position

1280
00:55:12,679 --> 00:55:18,079
for tomorrow to basically have our

1281
00:55:15,530 --> 00:55:19,820
render reported over because if you look

1282
00:55:18,079 --> 00:55:22,400
at what has to happen again very very

1283
00:55:19,820 --> 00:55:24,230
straightforward really all we need to do

1284
00:55:22,400 --> 00:55:28,280
is just go ahead and set up this same

1285
00:55:24,230 --> 00:55:30,710
thing so we're talking about about

1286
00:55:28,280 --> 00:55:34,700
literally calling this exact same stuff

1287
00:55:30,710 --> 00:55:36,588
essentially as the preamble to to what's

1288
00:55:34,699 --> 00:55:39,230
going on here this would literally just

1289
00:55:36,588 --> 00:55:43,130
be like the output target window with

1290
00:55:39,230 --> 00:55:44,900
output target and au height and then

1291
00:55:43,130 --> 00:55:48,380
we've loaded in we'd literally do

1292
00:55:44,900 --> 00:55:50,240
exactly the same stuff and and then we

1293
00:55:48,380 --> 00:55:52,099
would be done and so we're not that far

1294
00:55:50,239 --> 00:55:54,079
from actually having a fully implemented

1295
00:55:52,099 --> 00:55:56,150
Hardware renderer just at a very basic

1296
00:55:54,079 --> 00:55:57,679
level really all we're gonna have to

1297
00:55:56,150 --> 00:55:59,088
deal with this is just doing a little

1298
00:55:57,679 --> 00:56:00,319
bit of the integration to make sure we

1299
00:55:59,088 --> 00:56:02,539
can call this function from the right

1300
00:56:00,320 --> 00:56:03,859
place and that swap buffers will happen

1301
00:56:02,539 --> 00:56:05,900
properly and that sort of stuff and then

1302
00:56:03,858 --> 00:56:07,699
deal with that texture bit but that's

1303
00:56:05,900 --> 00:56:08,750
really it so hopefully you guys

1304
00:56:07,699 --> 00:56:09,858
understood that I know there's a little

1305
00:56:08,750 --> 00:56:11,449
bit of major stuff in there and maybe

1306
00:56:09,858 --> 00:56:12,889
you guys aren't as

1307
00:56:11,449 --> 00:56:14,119
couple of major series we did kind of

1308
00:56:12,889 --> 00:56:15,920
cover them but maybe we need to cover

1309
00:56:14,119 --> 00:56:18,289
them again if that's so you know let me

1310
00:56:15,920 --> 00:56:21,050
know but for now let's go ahead and go

1311
00:56:18,289 --> 00:56:23,059
to the Q &amp; A so I can answer any

1312
00:56:21,050 --> 00:56:27,980
questions that you guys might have about

1313
00:56:23,059 --> 00:56:30,469
that let me see if I can kind of get

1314
00:56:27,980 --> 00:56:31,539
here I don't know for actually I think

1315
00:56:30,469 --> 00:56:34,219
we're working

1316
00:56:31,539 --> 00:56:37,639
are we working sometimes the computer

1317
00:56:34,219 --> 00:56:39,079
decides to like stop paying attention to

1318
00:56:37,639 --> 00:56:41,869
the chat I need to get this machine

1319
00:56:39,079 --> 00:56:43,159
using the automated Q : thing it's not

1320
00:56:41,869 --> 00:56:44,509
using it I'm still got to read the chat

1321
00:56:43,159 --> 00:56:48,789
manually on this machine which is kind

1322
00:56:44,510 --> 00:56:48,790
of annoying that Alright

1323
00:57:04,099 --> 00:57:08,619
in Sopot was pretty great there by the

1324
00:57:06,440 --> 00:57:08,619
way

1325
00:57:15,509 --> 00:57:22,358
who rocks 998 what key part layer to use

1326
00:57:18,668 --> 00:57:28,298
oh just normal the normal US standard

1327
00:57:22,358 --> 00:57:29,619
u.s. keyboard layout Huber Caleb will

1328
00:57:28,298 --> 00:57:31,478
hand made up in jail B including the

1329
00:57:29,619 --> 00:57:33,579
platform layer or game layer it will

1330
00:57:31,478 --> 00:57:35,408
actually be in the game layer and the

1331
00:57:33,579 --> 00:57:38,229
reason for that it although it's it's

1332
00:57:35,409 --> 00:57:40,568
sort of technically a third tier in

1333
00:57:38,228 --> 00:57:43,658
between the two but it doesn't go in the

1334
00:57:40,568 --> 00:57:46,768
platform specific layer because it can

1335
00:57:43,659 --> 00:57:49,298
be shared between multiple open

1336
00:57:46,768 --> 00:57:51,428
implementations of OpenGL so you don't

1337
00:57:49,298 --> 00:57:54,278
want it like welded the reason you don't

1338
00:57:51,429 --> 00:57:56,559
weld it into like the win32 layer is

1339
00:57:54,278 --> 00:57:59,588
because then you have to rewrite it all

1340
00:57:56,559 --> 00:58:02,469
again for for mac even though it's 99%

1341
00:57:59,588 --> 00:58:04,869
the same so typically you end up having

1342
00:58:02,469 --> 00:58:06,818
the handmade opengl thing as a separate

1343
00:58:04,869 --> 00:58:08,919
platform clean you don't want to use any

1344
00:58:06,818 --> 00:58:12,159
platform stuff in there and that way you

1345
00:58:08,918 --> 00:58:14,650
can reuse it and and so you like wiggle

1346
00:58:12,159 --> 00:58:16,209
swap buffers that will still live out in

1347
00:58:14,650 --> 00:58:20,108
the platform layer but all the generic

1348
00:58:16,208 --> 00:58:23,759
opengl will live in a file that can be

1349
00:58:20,108 --> 00:58:23,759
reused in multiple platforms

1350
00:58:52,280 --> 00:59:10,640
I see no other cues Elven jumped in a

1351
00:59:09,949 --> 00:59:12,139
bit late

1352
00:59:10,639 --> 00:59:15,289
so are we using the fixed function

1353
00:59:12,139 --> 00:59:18,469
OpenGL API right now or will we write

1354
00:59:15,289 --> 00:59:20,779
our own matrix struct at some point I'm

1355
00:59:18,469 --> 00:59:23,769
not sure that's an ore question I think

1356
00:59:20,780 --> 00:59:25,970
the answer to both of those is yes right

1357
00:59:23,769 --> 00:59:31,820
now we're using the fixed function API

1358
00:59:25,969 --> 00:59:32,779
when we switch to using shaders I don't

1359
00:59:31,820 --> 00:59:36,590
know that we'll have our own matrix

1360
00:59:32,780 --> 00:59:41,600
struct but we would we would obviously

1361
00:59:36,590 --> 00:59:43,490
be passing the the shader will do the

1362
00:59:41,599 --> 00:59:45,679
transform at that point so technically

1363
00:59:43,489 --> 00:59:48,679
it's our matrix at that point and we can

1364
00:59:45,679 --> 00:59:50,690
use it in whichever order we want but

1365
00:59:48,679 --> 00:59:53,000
that's kind of a separate thing that's

1366
00:59:50,690 --> 00:59:54,470
neither here are there AHS method wrist

1367
00:59:53,000 --> 00:59:55,429
brace is recommended for programmers in

1368
00:59:54,469 --> 00:59:58,009
general or just something you've had

1369
00:59:55,429 --> 00:59:59,569
issues with I'm not really qualified to

1370
00:59:58,010 --> 01:00:02,570
ask him not really a physical therapist

1371
00:59:59,570 --> 01:00:09,500
I think it probably depends on the

1372
01:00:02,570 --> 01:00:11,420
person q for Caleb if you include

1373
01:00:09,500 --> 01:00:12,769
handmade OpenGL in the game layer won't

1374
01:00:11,420 --> 01:00:14,269
that force you to include when is that H

1375
01:00:12,769 --> 01:00:18,230
and all the OpenGL headers in the game

1376
01:00:14,269 --> 01:00:20,300
layer so no to be clear remember

1377
01:00:18,230 --> 01:00:25,429
everything gets built sort of together

1378
01:00:20,300 --> 01:00:29,230
right so it doesn't really matter for

1379
01:00:25,429 --> 01:00:31,250
our purposes what is in what layer

1380
01:00:29,230 --> 01:00:34,010
because everything gets built is one

1381
01:00:31,250 --> 01:00:36,260
giant file so the important part really

1382
01:00:34,010 --> 01:00:39,650
has nothing to do with whether or not

1383
01:00:36,260 --> 01:00:42,520
you put it before or after the Windows H

1384
01:00:39,650 --> 01:00:44,990
right because you can easily just put it

1385
01:00:42,519 --> 01:00:47,900
after Windows out H that's where it

1386
01:00:44,989 --> 01:00:50,000
comes right that's pretty trivial the

1387
01:00:47,900 --> 01:00:53,690
the important part that I want to sort

1388
01:00:50,000 --> 01:00:57,260
of hammer home is you just don't want to

1389
01:00:53,690 --> 01:01:00,079
use any non OpenGL calls in this file

1390
01:00:57,260 --> 01:01:01,790
because if you use Windows specific

1391
01:01:00,079 --> 01:01:04,279
calls like let's say we put wiggle swap

1392
01:01:01,789 --> 01:01:05,630
buffers in here then all of a sudden the

1393
01:01:04,280 --> 01:01:07,759
Mac port can't you

1394
01:01:05,630 --> 01:01:10,130
use this file even though otherwise it

1395
01:01:07,759 --> 01:01:11,929
would have been able to and so the idea

1396
01:01:10,130 --> 01:01:14,059
is you want to keep your OpenGL file

1397
01:01:11,929 --> 01:01:16,608
even though it is platform specific in

1398
01:01:14,059 --> 01:01:17,960
the sense that it's calling the OS you

1399
01:01:16,608 --> 01:01:19,518
actually don't want to make it D

1400
01:01:17,960 --> 01:01:21,500
platform specific because you want to be

1401
01:01:19,518 --> 01:01:23,328
able to reuse it in all of the different

1402
01:01:21,500 --> 01:01:26,900
platforms so basically what will happen

1403
01:01:23,329 --> 01:01:28,700
is like the win32 platform file will

1404
01:01:26,900 --> 01:01:33,548
pound include the handmade opengl dot

1405
01:01:28,699 --> 01:01:37,328
CPP file and so will the Apple one right

1406
01:01:33,548 --> 01:01:37,329
that's how you do that

1407
01:01:40,298 --> 01:01:43,548
grizzly ninja was pushed before

1408
01:01:42,230 --> 01:01:44,900
rendering primarily in the software

1409
01:01:43,548 --> 01:01:46,639
under because the real Hardware renderer

1410
01:01:44,900 --> 01:01:49,639
works that way due to GPUs

1411
01:01:46,639 --> 01:01:51,558
no it's in the software renderer because

1412
01:01:49,639 --> 01:01:53,358
of sorting remember we never would have

1413
01:01:51,559 --> 01:01:54,650
been able to implement our sorting if we

1414
01:01:53,358 --> 01:01:58,130
hadn't have gone with the push buffer

1415
01:01:54,650 --> 01:01:59,450
style and so really in a 2-d game where

1416
01:01:58,130 --> 01:02:01,338
you know you you're gonna want to sort

1417
01:01:59,449 --> 01:02:03,679
for transparency reasons to get better

1418
01:02:01,338 --> 01:02:06,349
compositing and stuff and potentially

1419
01:02:03,679 --> 01:02:08,179
for performance as well you gotta do

1420
01:02:06,349 --> 01:02:10,009
deferred you gotta wait you gotta just

1421
01:02:08,179 --> 01:02:12,078
buffer and then render later because

1422
01:02:10,009 --> 01:02:18,528
otherwise you can't sort and you need it

1423
01:02:12,079 --> 01:02:20,720
you need sort right pics 1234 will the

1424
01:02:18,528 --> 01:02:26,480
game be given away to dev viewers for

1425
01:02:20,719 --> 01:02:27,768
free no it is pre orderable in fact on

1426
01:02:26,480 --> 01:02:31,059
handmade arrrgh

1427
01:02:27,768 --> 01:02:31,058
it's right there

1428
01:02:41,139 --> 01:02:46,389
off-topic have you worked with talk to

1429
01:02:43,088 --> 01:02:50,768
or met Andre lamothe before no on all

1430
01:02:46,389 --> 01:02:53,048
three counts I in fact have not even

1431
01:02:50,768 --> 01:02:55,149
ever read something by Andre Lamaze so I

1432
01:02:53,048 --> 01:02:57,608
literally have no contact with Andy

1433
01:02:55,150 --> 01:03:00,250
laughing anyway other than that I know

1434
01:02:57,608 --> 01:03:03,190
he wrote some books that is that is

1435
01:03:00,250 --> 01:03:07,088
really all I can could say about what I

1436
01:03:03,190 --> 01:03:08,470
know about under the moth Lost TGM I

1437
01:03:07,088 --> 01:03:12,460
feel uncomfortable ooting points

1438
01:03:08,469 --> 01:03:13,959
represent representing pixels have you

1439
01:03:12,460 --> 01:03:15,309
ever had problems with OpenGL and

1440
01:03:13,960 --> 01:03:19,389
floating-point values like passing them

1441
01:03:15,309 --> 01:03:21,849
to shaders or text words so I'm not sure

1442
01:03:19,389 --> 01:03:24,009
exactly what you're saying but I'm gonna

1443
01:03:21,849 --> 01:03:25,539
I'm gonna take a guess maybe what you're

1444
01:03:24,010 --> 01:03:27,130
saying and you can correct me if I'm

1445
01:03:25,539 --> 01:03:28,990
wrong but are you basically saying that

1446
01:03:27,130 --> 01:03:31,539
you're uncomfortable with knowing what

1447
01:03:28,989 --> 01:03:33,788
will happen when you pass a

1448
01:03:31,539 --> 01:03:40,480
floating-point value in terms of where

1449
01:03:33,789 --> 01:03:47,680
it lands on on the pixels themselves is

1450
01:03:40,480 --> 01:03:51,759
that is that what you mean or or do you

1451
01:03:47,679 --> 01:03:52,288
mean something else if that's what you

1452
01:03:51,759 --> 01:03:56,199
mean

1453
01:03:52,289 --> 01:03:58,720
that is not only would I say that that's

1454
01:03:56,199 --> 01:04:00,669
very normal I would actually say that

1455
01:03:58,719 --> 01:04:02,588
probably the vast majority of

1456
01:04:00,670 --> 01:04:03,700
programmers have no idea what happens

1457
01:04:02,588 --> 01:04:10,920
when they pass floating point

1458
01:04:03,699 --> 01:04:17,259
coordinates to OpenGL and a lot of times

1459
01:04:10,920 --> 01:04:19,900
they get it wrong and I think honestly

1460
01:04:17,259 --> 01:04:24,778
the that that the fault of that is

1461
01:04:19,900 --> 01:04:27,460
mostly with the OpenGL materials don't

1462
01:04:24,778 --> 01:04:33,039
start with a really clear diagram of how

1463
01:04:27,460 --> 01:04:36,639
texture coordinates and and pixels work

1464
01:04:33,039 --> 01:04:38,950
together and how pixel coordinates work

1465
01:04:36,639 --> 01:04:41,909
together that stuff is all very

1466
01:04:38,949 --> 01:04:44,558
rigorously defined and at least nowadays

1467
01:04:41,909 --> 01:04:48,170
as far as I know all graphics cards

1468
01:04:44,559 --> 01:04:51,410
properly obey a rigorous specification

1469
01:04:48,170 --> 01:04:55,550
for where for what exactly it means to

1470
01:04:51,409 --> 01:04:58,579
specify a floating-point value and have

1471
01:04:55,550 --> 01:05:00,890
it map to pixels but that wasn't always

1472
01:04:58,579 --> 01:05:02,539
the case so one thing we could do on

1473
01:05:00,889 --> 01:05:04,219
handmade here at some point maybe I have

1474
01:05:02,539 --> 01:05:07,730
to schedule something for this is to

1475
01:05:04,219 --> 01:05:11,319
actually talk about that we don't really

1476
01:05:07,730 --> 01:05:16,880
have a lot of occasion to need to know

1477
01:05:11,320 --> 01:05:19,519
in our particular case but that's not to

1478
01:05:16,880 --> 01:05:22,340
say that it wouldn't be good to to cover

1479
01:05:19,519 --> 01:05:24,190
it because it does happen it does come

1480
01:05:22,340 --> 01:05:28,880
up

1481
01:05:24,190 --> 01:05:38,599
do you use any element buffer or vbo in

1482
01:05:28,880 --> 01:05:41,420
your opengl wait where did that go let's

1483
01:05:38,599 --> 01:05:46,730
see to use any element buffers or vertex

1484
01:05:41,420 --> 01:05:49,940
buffers in your opengl if no y so the

1485
01:05:46,730 --> 01:05:52,880
answer is that we will be using vertex

1486
01:05:49,940 --> 01:05:55,760
buffers in the opengl code and the

1487
01:05:52,880 --> 01:05:58,970
reason for that is because the function

1488
01:05:55,760 --> 01:06:01,960
call overhead of doing GL vertex calls

1489
01:05:58,969 --> 01:06:06,730
is not really

1490
01:06:01,960 --> 01:06:09,800
we don't want it there's no need for it

1491
01:06:06,730 --> 01:06:12,380
we're just the way that our renderer is

1492
01:06:09,800 --> 01:06:16,269
set up it just needs to stream a large

1493
01:06:12,380 --> 01:06:19,220
number of rectangles essentially out

1494
01:06:16,269 --> 01:06:20,449
into to the graphics card and say I need

1495
01:06:19,219 --> 01:06:22,969
you to draw all these rectangles with

1496
01:06:20,449 --> 01:06:26,509
these textures and so there's no real

1497
01:06:22,969 --> 01:06:30,769
need for us to do that now unfortunately

1498
01:06:26,510 --> 01:06:33,620
for us and we can try to take steps to

1499
01:06:30,769 --> 01:06:36,079
avoid this but I don't know to what

1500
01:06:33,619 --> 01:06:39,139
degree we'll want to but unfortunately

1501
01:06:36,079 --> 01:06:42,019
for us we do have a problem which is

1502
01:06:39,139 --> 01:06:44,599
that the majority of systems that we're

1503
01:06:42,019 --> 01:06:47,840
probably going to run on is certainly at

1504
01:06:44,599 --> 01:06:53,089
the low end do not allow you to set

1505
01:06:47,840 --> 01:06:57,019
textures out of a buffer you can do that

1506
01:06:53,090 --> 01:06:58,430
on say like an video hardware you can do

1507
01:06:57,019 --> 01:07:00,710
fully buying this graphics where you're

1508
01:06:58,429 --> 01:07:01,309
literally just specifying like what

1509
01:07:00,710 --> 01:07:05,720
texture

1510
01:07:01,309 --> 01:07:07,940
drawing with on a per element basis but

1511
01:07:05,719 --> 01:07:10,909
you can't do that in the general case at

1512
01:07:07,940 --> 01:07:13,970
least not yet and so we will have the

1513
01:07:10,909 --> 01:07:17,359
problem of our vertex buffer scheme will

1514
01:07:13,969 --> 01:07:18,829
not be particularly fast or at least

1515
01:07:17,360 --> 01:07:21,800
it's not as fast as we might like it to

1516
01:07:18,829 --> 01:07:25,480
be because we won't probably bother

1517
01:07:21,800 --> 01:07:30,170
packing our textures into texture pages

1518
01:07:25,480 --> 01:07:31,969
like maybe we will maybe we won't but it

1519
01:07:30,170 --> 01:07:35,420
depends like we could have our asset

1520
01:07:31,969 --> 01:07:37,969
Packer do that potentially but it's it's

1521
01:07:35,420 --> 01:07:39,740
hard to say right there's a lot of

1522
01:07:37,969 --> 01:07:41,779
downsides to doing it as well in terms

1523
01:07:39,739 --> 01:07:43,669
of the streaming and and all these other

1524
01:07:41,780 --> 01:07:46,610
things so it's unclear like what we want

1525
01:07:43,670 --> 01:07:48,680
to do with that but we will be doing

1526
01:07:46,610 --> 01:07:49,820
vertex buffer objects just because

1527
01:07:48,679 --> 01:07:53,169
there's no point in having the function

1528
01:07:49,820 --> 01:07:56,960
call overhead for building the the

1529
01:07:53,170 --> 01:07:58,519
rectangle stuff but but it won't be

1530
01:07:56,960 --> 01:07:59,630
really that much of a speed win because

1531
01:07:58,519 --> 01:08:01,730
a lot of our time will be spent

1532
01:07:59,630 --> 01:08:06,019
switching textures I would suspect

1533
01:08:01,730 --> 01:08:07,940
that's my guess anyway at the moment

1534
01:08:06,019 --> 01:08:09,800
we're not using them yet because I only

1535
01:08:07,940 --> 01:08:12,860
just barely taught people how to do

1536
01:08:09,800 --> 01:08:14,960
OpenGL at all so before we switch to

1537
01:08:12,860 --> 01:08:17,539
using those we will have the pipeline

1538
01:08:14,960 --> 01:08:22,119
working in fixed function with no buffer

1539
01:08:17,539 --> 01:08:24,500
objects and then we will switch it over

1540
01:08:22,119 --> 01:08:26,029
but it's purely an optimization as well

1541
01:08:24,500 --> 01:08:27,619
there's there's no difference like it

1542
01:08:26,029 --> 01:08:29,088
doesn't do anything different it's just

1543
01:08:27,619 --> 01:08:31,539
an optimization to get rid of the

1544
01:08:29,088 --> 01:08:31,539
function calls

1545
01:08:35,439 --> 01:08:40,629
did you do your own geo ortho call when

1546
01:08:38,920 --> 01:08:42,929
you set up the projection matrix also

1547
01:08:40,630 --> 01:08:45,909
thanks for all the matrix explanations

1548
01:08:42,929 --> 01:08:48,279
so not really I mean yes and no

1549
01:08:45,908 --> 01:08:51,998
basically this is the equivalent of a GL

1550
01:08:48,279 --> 01:08:54,579
ortho call so sort of we did but we we

1551
01:08:51,998 --> 01:08:56,618
didn't reach GL ortho because GL our

1552
01:08:54,578 --> 01:09:00,099
throw slightly different so you can take

1553
01:08:56,618 --> 01:09:01,598
a look at geo ortho I just wanted to

1554
01:09:00,099 --> 01:09:02,980
show you how to do it cuz geol ortho is

1555
01:09:01,599 --> 01:09:06,429
just a utility function doesn't do

1556
01:09:02,979 --> 01:09:07,808
anything right I mean look if see if I

1557
01:09:06,429 --> 01:09:15,899
can find something as a better laid out

1558
01:09:07,809 --> 01:09:15,900
version of that oh nice good that's good

1559
01:09:15,969 --> 01:09:21,429
does somebody have the actual one that's

1560
01:09:18,729 --> 01:09:22,868
not all typeset all messed up this one's

1561
01:09:21,429 --> 01:09:31,170
all messed up the typesetting is all

1562
01:09:22,868 --> 01:09:31,170
messed up yeah

1563
01:09:32,759 --> 01:09:38,460
well I mean the type sings all messed up

1564
01:09:37,020 --> 01:09:41,460
on that so I couldn't quite point you to

1565
01:09:38,460 --> 01:09:45,060
it but essentially what's happening here

1566
01:09:41,460 --> 01:09:48,298
is we're just doing the our own version

1567
01:09:45,060 --> 01:09:50,850
of GL ortho that doesn't actually need

1568
01:09:48,298 --> 01:09:55,170
to bother with the z-coordinate

1569
01:09:50,850 --> 01:10:02,880
right normally GL ortho actually still

1570
01:09:55,170 --> 01:10:06,659
does depth like it still has to do Z

1571
01:10:02,880 --> 01:10:08,039
it's also support z-buffering and

1572
01:10:06,659 --> 01:10:10,409
z-buffering is of course the thing where

1573
01:10:08,039 --> 01:10:12,689
you actually track a depth value per

1574
01:10:10,409 --> 01:10:14,460
pixel it should probably call it death

1575
01:10:12,689 --> 01:10:16,738
buffering is the probably more correct

1576
01:10:14,460 --> 01:10:18,630
term but in order to support that

1577
01:10:16,738 --> 01:10:21,659
feature which we don't need and aren't

1578
01:10:18,630 --> 01:10:24,480
using they need to have the ability to

1579
01:10:21,659 --> 01:10:27,059
actually generate proper Z coordinates

1580
01:10:24,479 --> 01:10:31,469
and do proper homogeneous coordinates

1581
01:10:27,060 --> 01:10:33,060
there for the Z so their matrix is not

1582
01:10:31,470 --> 01:10:36,869
gonna be the same as this it's gonna be

1583
01:10:33,060 --> 01:10:38,100
basically the same as this but it's

1584
01:10:36,869 --> 01:10:41,309
gonna be a little bit different right

1585
01:10:38,100 --> 01:10:42,690
and so if you look up to you Laura

1586
01:10:41,310 --> 01:10:44,190
though and find a place that actually

1587
01:10:42,689 --> 01:10:45,539
has it type set properly you will see a

1588
01:10:44,189 --> 01:10:47,099
matrix that looks very much like our

1589
01:10:45,539 --> 01:10:49,019
matrix but it's not quite the same the

1590
01:10:47,100 --> 01:10:51,600
reason for that is it's not passing

1591
01:10:49,020 --> 01:10:55,520
through these values the way that we are

1592
01:10:51,600 --> 01:10:58,920
it's actually putting things into the

1593
01:10:55,520 --> 01:11:01,670
the values that we'll get used for doing

1594
01:10:58,920 --> 01:11:01,670
def buffering

1595
01:11:12,970 --> 01:11:16,539
let's see

1596
01:11:25,828 --> 01:11:30,139
trust if there any other q questions

1597
01:11:33,380 --> 01:11:36,579
I don't see any

1598
01:11:46,510 --> 01:11:52,289
I see no further questions so I think

1599
01:11:49,779 --> 01:11:52,288
that's it

1600
01:12:00,599 --> 01:12:10,469
and hey look the stream has ended

1601
01:12:03,979 --> 01:12:13,589
alright well I guess that's just that so

1602
01:12:10,469 --> 01:12:20,908
that's all there is to it go ahead save

1603
01:12:13,590 --> 01:12:22,349
this so we can wind down alright thank

1604
01:12:20,908 --> 01:12:23,549
you everyone for joining me for another

1605
01:12:22,349 --> 01:12:24,989
episode of hand made here it's been a

1606
01:12:23,550 --> 01:12:28,889
pleasure coding with you as always if

1607
01:12:24,988 --> 01:12:30,209
you would like to follow along with code

1608
01:12:28,889 --> 01:12:33,270
at home you can always spiro to the game

1609
01:12:30,210 --> 01:12:34,500
on handmade hero org and it comes with a

1610
01:12:33,270 --> 01:12:39,810
source code so you can play around that

1611
01:12:34,500 --> 01:12:41,729
at home but but that is not the only

1612
01:12:39,810 --> 01:12:43,590
reason to go to handmade here org

1613
01:12:41,729 --> 01:12:45,328
there's also a forum site you can go to

1614
01:12:43,590 --> 01:12:47,069
where you can ask questions there's a

1615
01:12:45,328 --> 01:12:49,408
patreon page you can go to to support

1616
01:12:47,069 --> 01:12:52,198
the video series and there's a tweet bot

1617
01:12:49,408 --> 01:12:53,609
that you can subscribe to to know when

1618
01:12:52,198 --> 01:12:57,839
the videos serious is going to be live

1619
01:12:53,609 --> 01:13:00,078
if that's your thing that's about it

1620
01:12:57,840 --> 01:13:00,078
really

1621
01:13:00,560 --> 01:13:05,159
yeah double check that tweet bot for the

1622
01:13:03,569 --> 01:13:06,328
time for tomorrow but I can tell you

1623
01:13:05,158 --> 01:13:08,429
ahead of time it's 5:00 p.m. Pacific

1624
01:13:06,328 --> 01:13:11,519
Standard Time right back here on Twitch

1625
01:13:08,429 --> 01:13:12,989
so if you want to follow with getting

1626
01:13:11,520 --> 01:13:15,090
the OpenGL renderer running which I

1627
01:13:12,988 --> 01:13:18,779
think we're there really isn't that much

1628
01:13:15,090 --> 01:13:21,360
more to do we will cover that tomorrow

1629
01:13:18,779 --> 01:13:22,889
and probably the next day just to

1630
01:13:21,359 --> 01:13:26,399
probably about two days would be what

1631
01:13:22,889 --> 01:13:28,618
would be required so yeah hope to see

1632
01:13:26,399 --> 01:13:30,149
you back here for that until then have

1633
01:13:28,618 --> 01:13:30,658
fun programming and I'll see you guys on

1634
01:13:30,149 --> 01:13:33,319
the Internet

1635
01:13:30,658 --> 01:13:33,319
take it easy everyone

