1
00:00:01,340 --> 00:00:07,080
okay oh dear I've started the recording

2
00:00:04,440 --> 00:00:08,970
for once with a with a shell window open

3
00:00:07,080 --> 00:00:10,530
how unprofessional hello everyone and

4
00:00:08,970 --> 00:00:14,309
welcome to handmade Hero show recode a

5
00:00:10,529 --> 00:00:15,838
complete game live on stream we are well

6
00:00:14,308 --> 00:00:17,879
you know it's gonna be interesting

7
00:00:15,839 --> 00:00:22,469
day-to-day because essentially what

8
00:00:17,879 --> 00:00:27,239
we've got is we have we've have it all

9
00:00:22,469 --> 00:00:30,928
as Lemongrab would say but we'll fat

10
00:00:27,239 --> 00:00:35,129
Lemongrab but we wrote a ton of code

11
00:00:30,928 --> 00:00:38,609
over the past week weekend to use a

12
00:00:35,130 --> 00:00:41,790
single text file input - well as many

13
00:00:38,609 --> 00:00:44,519
text files as wanted technically but to

14
00:00:41,789 --> 00:00:48,988
take a text file input and use that to

15
00:00:44,520 --> 00:00:53,609
sort of specify a packing set and markup

16
00:00:48,988 --> 00:00:57,149
for all of our assets and we got all of

17
00:00:53,609 --> 00:00:59,850
that done it didn't take very long was

18
00:00:57,149 --> 00:01:02,549
good and we kind of I think did a

19
00:00:59,850 --> 00:01:03,780
reasonable job of it but we never ran

20
00:01:02,549 --> 00:01:06,810
any of it

21
00:01:03,780 --> 00:01:09,780
so we have no idea how much stuff we may

22
00:01:06,810 --> 00:01:12,390
have screwed up we don't have any idea

23
00:01:09,780 --> 00:01:14,728
how buggy it might be and so really what

24
00:01:12,390 --> 00:01:17,430
we want to do this weekend today and

25
00:01:14,728 --> 00:01:20,969
tomorrow is get all that code working

26
00:01:17,430 --> 00:01:24,360
you know get the bugs out of it get the

27
00:01:20,969 --> 00:01:26,400
like other parts of the system that

28
00:01:24,359 --> 00:01:29,459
haven't been brought up to speed with

29
00:01:26,400 --> 00:01:32,609
this integrated with it for example now

30
00:01:29,459 --> 00:01:34,530
we have an open question that we want to

31
00:01:32,609 --> 00:01:36,900
go address this will probably be what we

32
00:01:34,530 --> 00:01:40,320
do right after we get everything working

33
00:01:36,900 --> 00:01:43,710
here which is we now have an obvious

34
00:01:40,319 --> 00:01:45,389
place and the clean path ready for us to

35
00:01:43,709 --> 00:01:48,798
save changes

36
00:01:45,390 --> 00:01:51,450
so basically when we do I don't know

37
00:01:48,799 --> 00:01:54,689
folks who maybe don't catch the stream

38
00:01:51,450 --> 00:01:57,868
every time might not know if we actually

39
00:01:54,688 --> 00:02:00,089
go on here and we run the game there's

40
00:01:57,868 --> 00:02:02,188
still owe and let me go ahead and put us

41
00:02:00,090 --> 00:02:05,399
in release mode so we're running

42
00:02:02,188 --> 00:02:06,868
reasonably quickly you'll have to bear

43
00:02:05,399 --> 00:02:07,920
with me here we have some for code of

44
00:02:06,868 --> 00:02:09,330
stuff I have to talk about as well

45
00:02:07,920 --> 00:02:10,739
because we're still in the old for coder

46
00:02:09,330 --> 00:02:13,890
and we're gonna switch to the new for a

47
00:02:10,739 --> 00:02:16,950
coder shortly is as another thing

48
00:02:13,889 --> 00:02:19,679
yeah so many things in here to talk

49
00:02:16,949 --> 00:02:21,628
about so let's hand made here oh let me

50
00:02:19,680 --> 00:02:24,510
switch to our build file here and

51
00:02:21,628 --> 00:02:26,578
switches to an optimized build anyway as

52
00:02:24,509 --> 00:02:28,590
I was saying inside handmade here we

53
00:02:26,579 --> 00:02:32,359
made some tools that were designed to

54
00:02:28,590 --> 00:02:34,979
allow us to quickly change how we were

55
00:02:32,359 --> 00:02:36,060
like aligning art assets and stuff like

56
00:02:34,979 --> 00:02:38,608
that

57
00:02:36,060 --> 00:02:40,799
and so the F keys across the top you can

58
00:02:38,609 --> 00:02:43,739
kind of see if I like click on those

59
00:02:40,799 --> 00:02:45,930
right there's a bunch of jump that goes

60
00:02:43,739 --> 00:02:47,609
on here and some of it we haven't really

61
00:02:45,930 --> 00:02:49,200
done anything with you know there's some

62
00:02:47,609 --> 00:02:52,260
stuff happening in here that really

63
00:02:49,199 --> 00:02:53,548
probably needs to get updated a little

64
00:02:52,259 --> 00:02:55,948
bit but then we've got you know some

65
00:02:53,549 --> 00:02:58,590
stuff in here you can see there's like a

66
00:02:55,949 --> 00:03:00,060
camera thing that we were using for

67
00:02:58,590 --> 00:03:01,949
camera debugging that like shows us

68
00:03:00,060 --> 00:03:03,750
stuff right and we can adjust things

69
00:03:01,949 --> 00:03:05,519
like the fogging distances and that's

70
00:03:03,750 --> 00:03:07,919
how we like tweaked those right it was

71
00:03:05,519 --> 00:03:10,739
very handy for that and then we've also

72
00:03:07,919 --> 00:03:14,699
got this other thing we can do here on I

73
00:03:10,739 --> 00:03:16,799
guess f3 where at any time if I like

74
00:03:14,699 --> 00:03:18,569
click somewhere right I can I can

75
00:03:16,799 --> 00:03:20,159
highlight and you know we bring it low

76
00:03:18,568 --> 00:03:21,929
so you can see it you can see there's a

77
00:03:20,158 --> 00:03:24,780
little like wire highlight that kind of

78
00:03:21,930 --> 00:03:26,639
goes around stuff and if I click on

79
00:03:24,780 --> 00:03:29,068
those things then I can actually edit

80
00:03:26,639 --> 00:03:31,229
you know the stuff that's that that I

81
00:03:29,068 --> 00:03:32,369
selected so if I if I you know click on

82
00:03:31,229 --> 00:03:35,879
one of these things here like you know

83
00:03:32,370 --> 00:03:39,090
the glove or whatever right I can look

84
00:03:35,878 --> 00:03:41,068
at what is in the glove and I can I can

85
00:03:39,090 --> 00:03:43,949
sort of get some different information

86
00:03:41,068 --> 00:03:45,988
points about it one of them is just like

87
00:03:43,949 --> 00:03:47,639
you know what was in the file for it so

88
00:03:45,989 --> 00:03:50,280
you know do have any like import errors

89
00:03:47,639 --> 00:03:51,930
or anything like that and like what it

90
00:03:50,280 --> 00:03:53,188
was who made it did it have a name or

91
00:03:51,930 --> 00:03:54,870
description we never had a way of set

92
00:03:53,188 --> 00:03:56,400
those before we do now and so those will

93
00:03:54,870 --> 00:03:58,680
actually come up as being set to

94
00:03:56,400 --> 00:04:01,859
something let me actually run our new

95
00:03:58,680 --> 00:04:03,180
system too which is pretty cool but so

96
00:04:01,859 --> 00:04:04,409
you know we've got this our stuff and

97
00:04:03,180 --> 00:04:05,669
then the other one was this alignment

98
00:04:04,408 --> 00:04:07,289
point saying the alignment points thing

99
00:04:05,669 --> 00:04:10,139
is actually for editing in the game

100
00:04:07,289 --> 00:04:12,000
right because you know we can change so

101
00:04:10,139 --> 00:04:14,159
like for here you can see the default

102
00:04:12,000 --> 00:04:16,288
alignment point I can change that and it

103
00:04:14,158 --> 00:04:18,238
takes whatever the game thinks the

104
00:04:16,288 --> 00:04:20,548
location of that thing is and it offsets

105
00:04:18,238 --> 00:04:22,528
it right because we don't know you know

106
00:04:20,548 --> 00:04:25,138
maybe the artist wanted to like base the

107
00:04:22,528 --> 00:04:26,300
thing around the base of the glove or

108
00:04:25,139 --> 00:04:27,769
maybe they wanted it around the

109
00:04:26,300 --> 00:04:30,020
Fist of the Glover you know maybe we

110
00:04:27,769 --> 00:04:32,568
want it around there who knows and so

111
00:04:30,019 --> 00:04:34,639
that idea of be able to create these

112
00:04:32,569 --> 00:04:36,908
like attachment points is something that

113
00:04:34,639 --> 00:04:42,829
we need in it and we did a bunch of that

114
00:04:36,908 --> 00:04:44,240
if I look at like the the sprite for the

115
00:04:42,829 --> 00:04:45,740
the character that's being drawn right

116
00:04:44,240 --> 00:04:48,439
now right which is just one of our

117
00:04:45,740 --> 00:04:51,259
random orphans that we picked if you

118
00:04:48,439 --> 00:04:53,959
look at how her textures are set up what

119
00:04:51,259 --> 00:04:55,939
you can see is that actually the hot

120
00:04:53,959 --> 00:04:58,279
points have already been set to like

121
00:04:55,939 --> 00:05:00,168
attach her body to her head right and

122
00:04:58,279 --> 00:05:02,448
you can see that here where you've got

123
00:05:00,168 --> 00:05:04,399
these different attachment points here's

124
00:05:02,449 --> 00:05:06,079
the one that goes to its child this is

125
00:05:04,399 --> 00:05:08,060
the body this is one that goes to the

126
00:05:06,079 --> 00:05:10,038
child this is the one that goes to the

127
00:05:08,060 --> 00:05:11,329
world right you can see that base point

128
00:05:10,038 --> 00:05:14,180
there is one that goes to the world and

129
00:05:11,329 --> 00:05:19,788
then this one here that goes the base of

130
00:05:14,180 --> 00:05:22,340
neck is like up there right and yeah if

131
00:05:19,788 --> 00:05:25,038
you look at this this one has it's two

132
00:05:22,339 --> 00:05:27,079
body one right where that is so these

133
00:05:25,038 --> 00:05:29,240
two points like snap together and that's

134
00:05:27,079 --> 00:05:32,598
what puts the head on top of the body

135
00:05:29,240 --> 00:05:34,009
right now the problem that we had before

136
00:05:32,598 --> 00:05:36,228
and it wasn't really a problem it was

137
00:05:34,009 --> 00:05:37,879
more of like to do because we're like we

138
00:05:36,228 --> 00:05:40,598
knew what we wanted to do with it but we

139
00:05:37,879 --> 00:05:43,550
didn't have any way to actually do it

140
00:05:40,598 --> 00:05:45,589
what we have there was once you did

141
00:05:43,550 --> 00:05:48,680
those edits they got saved baked back

142
00:05:45,589 --> 00:05:51,109
into the HHH egg so they are permanent

143
00:05:48,680 --> 00:05:53,120
and like you know I run the game again

144
00:05:51,110 --> 00:05:57,288
it's always there right so it's being

145
00:05:53,120 --> 00:06:00,528
saved properly back into the game as as

146
00:05:57,288 --> 00:06:03,110
such right so it works the way that we

147
00:06:00,528 --> 00:06:05,240
want it to work and that's all good but

148
00:06:03,110 --> 00:06:08,900
what we couldn't have done and never did

149
00:06:05,240 --> 00:06:11,180
do is rebuild that HHA that data pack

150
00:06:08,899 --> 00:06:13,370
file because if we rebuilt it we would

151
00:06:11,180 --> 00:06:15,490
have lost all of that information right

152
00:06:13,370 --> 00:06:18,439
all of that information would disappear

153
00:06:15,490 --> 00:06:20,269
and so as we go forward and we're going

154
00:06:18,439 --> 00:06:23,180
to be expecting a lot of these things

155
00:06:20,269 --> 00:06:24,859
right I'm gonna go into that mode right

156
00:06:23,180 --> 00:06:26,658
like if I was doing editing here and I

157
00:06:24,860 --> 00:06:30,439
edit this one we're gonna edit a bunch

158
00:06:26,658 --> 00:06:31,848
of these things and and we want to be

159
00:06:30,439 --> 00:06:34,158
able to save them in a permanent way

160
00:06:31,848 --> 00:06:36,439
that makes it easy for us to deal with

161
00:06:34,158 --> 00:06:39,288
and so when we're going to be doing all

162
00:06:36,439 --> 00:06:40,009
that we want those to go out into the

163
00:06:39,288 --> 00:06:41,599
text file

164
00:06:40,009 --> 00:06:43,610
that we can then check in to source code

165
00:06:41,600 --> 00:06:45,140
control and version and all that stuff

166
00:06:43,610 --> 00:06:47,600
and cut and paste between them if we

167
00:06:45,139 --> 00:06:49,610
need to you know fix something all that

168
00:06:47,600 --> 00:06:51,710
sort of stuff we're just tying in to the

169
00:06:49,610 --> 00:06:53,930
the fact that there's a lot of text

170
00:06:51,709 --> 00:06:56,000
editing tools out there right it doesn't

171
00:06:53,930 --> 00:06:58,699
matter if it's text or binary in the

172
00:06:56,000 --> 00:07:01,519
abstract but in terms of actually being

173
00:06:58,699 --> 00:07:04,519
able to work with it having a text file

174
00:07:01,519 --> 00:07:06,109
format for things that are small tends

175
00:07:04,519 --> 00:07:07,729
to be pretty useful because it means you

176
00:07:06,110 --> 00:07:09,980
can leverage all these other tools like

177
00:07:07,730 --> 00:07:11,960
binary diff doesn't work particularly

178
00:07:09,980 --> 00:07:15,710
well for example right but text ifs are

179
00:07:11,959 --> 00:07:17,089
pretty good so all that stuff just means

180
00:07:15,709 --> 00:07:19,009
that when we actually do one of these

181
00:07:17,089 --> 00:07:23,839
edits what we'd like to do is be able to

182
00:07:19,009 --> 00:07:27,319
generate the hht that corresponds to

183
00:07:23,839 --> 00:07:29,029
that HHA file sort of from wool cloth so

184
00:07:27,319 --> 00:07:31,969
that we can write out all those changes

185
00:07:29,029 --> 00:07:34,009
and edit them that way right like that's

186
00:07:31,970 --> 00:07:37,520
something we'd really like to be able to

187
00:07:34,009 --> 00:07:39,560
do and so I need to put that back in as

188
00:07:37,519 --> 00:07:40,879
well or not back in I need to put it in

189
00:07:39,560 --> 00:07:43,579
in the first place because now we have a

190
00:07:40,879 --> 00:07:47,689
clear way that we could do that and we'd

191
00:07:43,579 --> 00:07:49,550
like to have that be operational okay

192
00:07:47,689 --> 00:07:51,529
so let's take a look at how we're gonna

193
00:07:49,550 --> 00:07:53,210
accomplish some of these things so the

194
00:07:51,529 --> 00:07:54,559
first thing that we want to do is kind

195
00:07:53,209 --> 00:07:58,759
of take a step backwards and say well

196
00:07:54,560 --> 00:08:02,209
alright let's suppose first of all that

197
00:07:58,759 --> 00:08:04,009
I mean maybe let's just try that one

198
00:08:02,209 --> 00:08:06,500
step that part of it first

199
00:08:04,009 --> 00:08:11,959
what if we wanted to be able to save an

200
00:08:06,500 --> 00:08:14,750
hht file out from our HHA edits right so

201
00:08:11,959 --> 00:08:17,539
for example if I was going to go in here

202
00:08:14,750 --> 00:08:19,639
like I said before we already have this

203
00:08:17,540 --> 00:08:22,340
idea that in here we have like an import

204
00:08:19,639 --> 00:08:24,860
and save this save feature is grayed out

205
00:08:22,339 --> 00:08:26,179
because we haven't made any changes but

206
00:08:24,860 --> 00:08:28,069
that's the only reason it's grayed out

207
00:08:26,180 --> 00:08:30,590
so you know we could even re-enable it

208
00:08:28,069 --> 00:08:33,319
to make it so that it can do a resave in

209
00:08:30,589 --> 00:08:35,179
the case where it wants to so if I did

210
00:08:33,320 --> 00:08:38,390
go in here for example and said oh you

211
00:08:35,179 --> 00:08:40,939
know maybe I just touched this thing you

212
00:08:38,389 --> 00:08:42,379
can see that that will create an undo

213
00:08:40,940 --> 00:08:44,900
record which will then mean that we

214
00:08:42,379 --> 00:08:46,370
could save our HHA again if we did that

215
00:08:44,899 --> 00:08:48,980
we could make it so that it saved the

216
00:08:46,370 --> 00:08:51,110
hht alongside it and then it could be

217
00:08:48,980 --> 00:08:53,690
our discretion whether we want to merge

218
00:08:51,110 --> 00:08:55,070
that hht in or not or

219
00:08:53,690 --> 00:08:58,400
whatever else we might want to do with

220
00:08:55,070 --> 00:09:00,740
it and so that's that's thing number one

221
00:08:58,399 --> 00:09:02,509
right and there's a couple different

222
00:09:00,740 --> 00:09:04,460
ways that we could choose to do that and

223
00:09:02,509 --> 00:09:06,889
I'm not sure exactly how we want to do

224
00:09:04,460 --> 00:09:09,950
that just yet but we'll talk about it as

225
00:09:06,889 --> 00:09:11,779
we go so if we wanted to do that how

226
00:09:09,950 --> 00:09:13,100
would we how would we start off with

227
00:09:11,779 --> 00:09:15,289
something like that right like how would

228
00:09:13,100 --> 00:09:17,840
we make something that allowed us to

229
00:09:15,289 --> 00:09:19,599
write out one of these files now if you

230
00:09:17,840 --> 00:09:23,990
remember correctly what they look like

231
00:09:19,600 --> 00:09:25,550
is you know is this so a tags file for

232
00:09:23,990 --> 00:09:27,379
handmade hero is really pretty

233
00:09:25,549 --> 00:09:29,689
straightforward it's just got you know

234
00:09:27,379 --> 00:09:32,659
here's the type of thing that it's

235
00:09:29,690 --> 00:09:35,090
looking at here's what the the file name

236
00:09:32,659 --> 00:09:36,769
was that it came from and here are the

237
00:09:35,090 --> 00:09:39,170
tags are associated with it there's also

238
00:09:36,769 --> 00:09:42,799
some additional things such as the

239
00:09:39,169 --> 00:09:45,799
author description and the HHA those are

240
00:09:42,799 --> 00:09:47,329
set by default up here and we don't

241
00:09:45,799 --> 00:09:50,990
really specify them anywhere else

242
00:09:47,330 --> 00:09:59,000
because we don't have to write we don't

243
00:09:50,990 --> 00:10:01,519
care about that part so what we'd like

244
00:09:59,000 --> 00:10:03,379
to do now is have a way of writing out

245
00:10:01,519 --> 00:10:05,539
these hht files that basically produces

246
00:10:03,379 --> 00:10:08,149
something that looks exactly like this

247
00:10:05,539 --> 00:10:11,059
so we can save changes that we make

248
00:10:08,149 --> 00:10:13,309
inside the game and eventually for all

249
00:10:11,059 --> 00:10:16,250
we know we might just make a tag editor

250
00:10:13,309 --> 00:10:18,139
in there as well so that we never maybe

251
00:10:16,250 --> 00:10:19,669
we never really touched these hhc files

252
00:10:18,139 --> 00:10:22,189
very often anyway they're just our

253
00:10:19,669 --> 00:10:24,019
archival format and we know that we can

254
00:10:22,190 --> 00:10:26,090
go in here and edit them in text if we

255
00:10:24,019 --> 00:10:27,799
need to if we screw something up or if

256
00:10:26,090 --> 00:10:29,420
we want to be able to inspect the change

257
00:10:27,799 --> 00:10:31,339
that we've made cuz something broke or

258
00:10:29,419 --> 00:10:33,649
whatever we'd be able to do a diff on

259
00:10:31,340 --> 00:10:35,540
them so it's a good thing to have in

260
00:10:33,649 --> 00:10:37,879
there but for all we know we might never

261
00:10:35,539 --> 00:10:39,500
really touch these by hand very often if

262
00:10:37,879 --> 00:10:41,179
we actually put in something edit the

263
00:10:39,500 --> 00:10:43,519
tags because obviously the rest of this

264
00:10:41,179 --> 00:10:46,069
stuff is stuff that you know doesn't

265
00:10:43,519 --> 00:10:47,809
really need to get edited much so that's

266
00:10:46,070 --> 00:10:49,670
one way to think of it now there's a

267
00:10:47,809 --> 00:10:52,699
couple of subtleties here which is that

268
00:10:49,669 --> 00:10:56,269
in here we've got like block and body

269
00:10:52,700 --> 00:10:59,629
and stuff like that I don't think we

270
00:10:56,269 --> 00:11:02,870
saved this information so one of the

271
00:10:59,629 --> 00:11:05,149
problems that we'll have is we'll have

272
00:11:02,870 --> 00:11:07,190
to start preserving that information if

273
00:11:05,149 --> 00:11:10,639
we want to be able to

274
00:11:07,190 --> 00:11:13,910
to rebuild hht files so in here for

275
00:11:10,639 --> 00:11:15,639
example inside where we've got the asset

276
00:11:13,909 --> 00:11:19,299
source file right this thing right here

277
00:11:15,639 --> 00:11:22,129
so when we talk about asset source file

278
00:11:19,299 --> 00:11:24,649
we don't actually have you can see in

279
00:11:22,129 --> 00:11:27,500
here we don't actually have the type of

280
00:11:24,649 --> 00:11:29,629
asset import that we actually used now

281
00:11:27,500 --> 00:11:33,318
we have a thing that says where the

282
00:11:29,629 --> 00:11:34,909
assets went that we imported right so

283
00:11:33,318 --> 00:11:37,490
that we could import them again into the

284
00:11:34,909 --> 00:11:39,889
same place but we don't actually have

285
00:11:37,490 --> 00:11:41,709
anything that's more specific than that

286
00:11:39,889 --> 00:11:45,799
right we don't actually have anything

287
00:11:41,708 --> 00:11:48,679
that that tells us any information about

288
00:11:45,799 --> 00:11:51,889
what this source file was actually set

289
00:11:48,679 --> 00:11:58,419
up to do and that's gonna be the hardest

290
00:11:51,889 --> 00:12:01,730
thing I think for us to deal with as

291
00:11:58,419 --> 00:12:03,528
long as we don't care about vaporizing

292
00:12:01,730 --> 00:12:05,420
our current HHA edits which I don't

293
00:12:03,528 --> 00:12:07,188
think we do cuz we only did a little bit

294
00:12:05,419 --> 00:12:10,490
of edits on them basically just to test

295
00:12:07,188 --> 00:12:15,669
the editor I think it's probably ok

296
00:12:10,490 --> 00:12:18,889
because every time here for word that we

297
00:12:15,669 --> 00:12:21,490
actually are going to be doing this we

298
00:12:18,889 --> 00:12:24,850
can just store in this asset source file

299
00:12:21,490 --> 00:12:27,889
what it was that we use for import and

300
00:12:24,850 --> 00:12:31,730
because we can always read this file

301
00:12:27,889 --> 00:12:35,110
itself in first we probably are fine and

302
00:12:31,730 --> 00:12:37,909
to that end we may also be able to

303
00:12:35,110 --> 00:12:40,459
actually have this overwrite the current

304
00:12:37,909 --> 00:12:43,698
state of things so we probably could

305
00:12:40,458 --> 00:12:47,929
even make it work now although I'm not

306
00:12:43,698 --> 00:12:51,649
entirely sure so let's see about that

307
00:12:47,929 --> 00:12:54,979
if I look and we talk about a you know

308
00:12:51,649 --> 00:12:56,568
inside the asset importer if you

309
00:12:54,980 --> 00:12:59,000
remember correctly what happens in here

310
00:12:56,568 --> 00:13:01,818
is we do this note we have this notion

311
00:12:59,000 --> 00:13:04,818
of like a parse pieces call right and

312
00:13:01,818 --> 00:13:06,558
inside parse pieces actually can use

313
00:13:04,818 --> 00:13:08,659
some of these new features you got here

314
00:13:06,558 --> 00:13:11,419
just jump right to it inside parse

315
00:13:08,659 --> 00:13:13,578
pieces what we have is this checking

316
00:13:11,419 --> 00:13:15,740
where it says like oh you know is it a

317
00:13:13,578 --> 00:13:18,078
block is it a head is it a body is it a

318
00:13:15,740 --> 00:13:20,539
character right so effectively what we

319
00:13:18,078 --> 00:13:25,909
do is we store that type token in

320
00:13:20,539 --> 00:13:28,669
right and we we sort of remember from

321
00:13:25,909 --> 00:13:34,279
that string what is the layout that we

322
00:13:28,669 --> 00:13:37,549
should be using and because of that what

323
00:13:34,279 --> 00:13:40,549
kind of happens here is once this piece

324
00:13:37,549 --> 00:13:43,309
import occurs we sort of lose the

325
00:13:40,549 --> 00:13:46,429
ability to we don't have any way to

326
00:13:43,309 --> 00:13:56,809
recall what this actually is

327
00:13:46,429 --> 00:14:06,259
Oh although you know I just had an

328
00:13:56,809 --> 00:14:10,819
interesting idea though so I just had an

329
00:14:06,259 --> 00:14:13,809
interesting idea and I'm not sure how I

330
00:14:10,820 --> 00:14:13,810
feel about it

331
00:14:22,830 --> 00:14:26,940
I don't think I like it so I think I'm

332
00:14:25,110 --> 00:14:28,919
gonna skip it what I was gonna say let

333
00:14:26,940 --> 00:14:30,839
me just put it out there what I was

334
00:14:28,919 --> 00:14:32,519
gonna say is there is another way we

335
00:14:30,839 --> 00:14:34,950
could do this that wouldn't require the

336
00:14:32,519 --> 00:14:37,289
change that I'm about to make which is

337
00:14:34,950 --> 00:14:40,170
that if you always rewrote the file by

338
00:14:37,289 --> 00:14:43,799
first reading the file in and writing it

339
00:14:40,169 --> 00:14:45,269
out as you go there's two really

340
00:14:43,799 --> 00:14:50,870
interesting things that would happen

341
00:14:45,269 --> 00:14:53,459
there and it's kind of tempting

342
00:14:50,870 --> 00:14:55,259
let me fully describe what I'm talking

343
00:14:53,458 --> 00:14:58,289
about because I don't want it to just be

344
00:14:55,259 --> 00:15:00,000
happening in my head I don't want the

345
00:14:58,289 --> 00:15:01,588
battle about which to do to only happen

346
00:15:00,000 --> 00:15:02,850
to my head you know I try to avoid that

347
00:15:01,589 --> 00:15:04,050
a hammer here wherever possible so

348
00:15:02,850 --> 00:15:09,060
everyone could kind of hear my thought

349
00:15:04,049 --> 00:15:12,509
process so here's what's going to happen

350
00:15:09,059 --> 00:15:14,969
in the abstract and then let me tell you

351
00:15:12,509 --> 00:15:16,289
about why the thought I had was a little

352
00:15:14,970 --> 00:15:20,310
bit interesting to me and I haven't

353
00:15:16,289 --> 00:15:22,889
really considered this before so let's

354
00:15:20,309 --> 00:15:25,379
suppose that what we did is the most

355
00:15:22,889 --> 00:15:27,778
straightforward way of augmenting the

356
00:15:25,379 --> 00:15:29,549
current system to do what it is that I

357
00:15:27,778 --> 00:15:30,720
wanted to do right so the way that I

358
00:15:29,549 --> 00:15:39,689
thought up first because the way you

359
00:15:30,720 --> 00:15:41,639
would normally do this right so let's

360
00:15:39,690 --> 00:15:45,450
say that's what I wanted I wanted to

361
00:15:41,639 --> 00:15:47,699
just say let's take this let's take the

362
00:15:45,450 --> 00:15:49,440
system and just I want to be able to

363
00:15:47,700 --> 00:15:51,930
output that this thing is a block or

364
00:15:49,440 --> 00:15:55,200
whatever I have the final name in here

365
00:15:51,929 --> 00:15:57,359
right and I know the assets themselves

366
00:15:55,200 --> 00:16:00,120
so I can get you know the the rest of

367
00:15:57,360 --> 00:16:02,220
the information out of it like what

368
00:16:00,120 --> 00:16:04,409
their tags were and stuff like that but

369
00:16:02,220 --> 00:16:07,170
if you look at what hat is happening

370
00:16:04,409 --> 00:16:08,458
there I do have well actually and now I

371
00:16:07,169 --> 00:16:10,500
think about there's actually more issues

372
00:16:08,458 --> 00:16:11,939
to that I might have first right is I

373
00:16:10,500 --> 00:16:14,070
don't know which one of these it is

374
00:16:11,940 --> 00:16:15,959
because I not storing that in here so

375
00:16:14,070 --> 00:16:18,660
what I need to do is I need to add that

376
00:16:15,958 --> 00:16:21,208
information back second I would need to

377
00:16:18,659 --> 00:16:23,969
write out which tags are common to this

378
00:16:21,208 --> 00:16:25,229
thing that are not in the template so

379
00:16:23,970 --> 00:16:28,379
I'd have to actually do a diff

380
00:16:25,230 --> 00:16:30,089
of-the-art asset tags themselves and see

381
00:16:28,379 --> 00:16:33,269
which tags are on the assets that aren't

382
00:16:30,089 --> 00:16:35,430
in the template for that thing or store

383
00:16:33,269 --> 00:16:38,579
the extra tags here my

384
00:16:35,429 --> 00:16:40,889
self-right so that's a little bit of

385
00:16:38,580 --> 00:16:42,480
extra work to that I hadn't included so

386
00:16:40,889 --> 00:16:44,309
I need to do those two things but then

387
00:16:42,480 --> 00:16:46,110
once I did those things you could prompt

388
00:16:44,309 --> 00:16:48,509
presumably all see how I would like

389
00:16:46,110 --> 00:16:50,610
rewrite out say block block orphanage or

390
00:16:48,509 --> 00:16:52,259
one dot PNG right it's pretty

391
00:16:50,610 --> 00:16:57,690
straightforward to see how we would do

392
00:16:52,259 --> 00:17:00,149
that but the thing about that is if you

393
00:16:57,690 --> 00:17:03,270
actually consider what's happening there

394
00:17:00,149 --> 00:17:05,549
a lot of other information when I write

395
00:17:03,269 --> 00:17:07,139
this out will also get lost let's just

396
00:17:05,549 --> 00:17:10,470
talk about something very basic this

397
00:17:07,140 --> 00:17:12,329
comment right where's that comment gonna

398
00:17:10,470 --> 00:17:14,009
come from the comments not stored

399
00:17:12,328 --> 00:17:16,198
anywhere we have no idea why that

400
00:17:14,009 --> 00:17:23,099
comment was in there worse yet what

401
00:17:16,199 --> 00:17:25,620
about this even worse what about that

402
00:17:23,099 --> 00:17:28,678
right those are things that maybe I

403
00:17:25,619 --> 00:17:29,879
wanted to re-enable later and so the

404
00:17:28,679 --> 00:17:32,190
more I think about the more I'm thinking

405
00:17:29,880 --> 00:17:33,210
that my weird idea is maybe not so weird

406
00:17:32,190 --> 00:17:37,039
and it might actually be the right thing

407
00:17:33,210 --> 00:17:38,970
so what if instead of doing it that way

408
00:17:37,039 --> 00:17:42,299
what if we do it a completely different

409
00:17:38,970 --> 00:17:46,650
way what if we instead make a system

410
00:17:42,299 --> 00:17:49,129
that just reads the files that all of

411
00:17:46,650 --> 00:17:54,059
the tag files as if it was going to do

412
00:17:49,130 --> 00:17:57,179
an import but instead of importing it

413
00:17:54,058 --> 00:18:00,420
just rewrites a new file for that tag

414
00:17:57,179 --> 00:18:04,019
file and it just looks at whatever

415
00:18:00,420 --> 00:18:06,450
you've added and inserts that in there

416
00:18:04,019 --> 00:18:08,849
right so every time it reads one of

417
00:18:06,450 --> 00:18:10,920
these lines it just mean it just copies

418
00:18:08,849 --> 00:18:13,289
the line into the text file unless it

419
00:18:10,920 --> 00:18:15,360
sees that you've modified what it says

420
00:18:13,289 --> 00:18:19,619
on that line and then it puts it in

421
00:18:15,359 --> 00:18:22,558
there right it's a little more work but

422
00:18:19,619 --> 00:18:24,359
then it kind of all allows the code to

423
00:18:22,558 --> 00:18:27,029
actually function properly and all the

424
00:18:24,359 --> 00:18:29,519
things in there like the comments or the

425
00:18:27,029 --> 00:18:31,079
defaults right we wouldn't have any idea

426
00:18:29,519 --> 00:18:32,759
that there was a default block we would

427
00:18:31,079 --> 00:18:34,589
just see that all of these assets had

428
00:18:32,759 --> 00:18:36,000
these names we could sort of try to

429
00:18:34,589 --> 00:18:37,199
reproduce that but we wouldn't even

430
00:18:36,000 --> 00:18:40,039
necessarily know where the default

431
00:18:37,200 --> 00:18:42,480
blocks got changed and when or why right

432
00:18:40,039 --> 00:18:43,889
and more importantly we wouldn't

433
00:18:42,480 --> 00:18:46,980
necessarily know the difference between

434
00:18:43,890 --> 00:18:49,320
something that looked you know like

435
00:18:46,980 --> 00:18:50,759
author and a rep burg here and then off

436
00:18:49,319 --> 00:18:52,798
something else for the rest of these and

437
00:18:50,759 --> 00:18:54,360
one that just had author specified on

438
00:18:52,798 --> 00:18:54,839
this one and then a default for an

439
00:18:54,359 --> 00:18:56,819
irreverent

440
00:18:54,839 --> 00:18:58,678
here or something right because all we

441
00:18:56,819 --> 00:19:00,178
would see is what the author actually

442
00:18:58,679 --> 00:19:11,190
was on each of the assets that's all we

443
00:19:00,179 --> 00:19:12,870
would know so I'm really leaning towards

444
00:19:11,190 --> 00:19:14,669
that I think I'm just gonna do it I've

445
00:19:12,869 --> 00:19:17,189
never done anything like that before but

446
00:19:14,669 --> 00:19:20,490
it really seems like the right solution

447
00:19:17,190 --> 00:19:22,710
and I don't have an argument against it

448
00:19:20,490 --> 00:19:24,808
the only thing I was gonna say is that

449
00:19:22,710 --> 00:19:26,639
it makes it a little weird to do edits

450
00:19:24,808 --> 00:19:29,668
for things that don't exist in here at

451
00:19:26,638 --> 00:19:31,079
all but I guess those are things we

452
00:19:29,669 --> 00:19:33,028
could just handle specially so if you

453
00:19:31,079 --> 00:19:37,589
add a new thing to the system in its

454
00:19:33,028 --> 00:19:40,829
entirety using the UI we have to store

455
00:19:37,589 --> 00:19:43,079
that separately but I think that's okay

456
00:19:40,829 --> 00:19:46,710
I don't mind just storing that

457
00:19:43,079 --> 00:19:48,178
separately I don't think so we'll see so

458
00:19:46,710 --> 00:19:49,110
I think I'm actually gonna do that as

459
00:19:48,179 --> 00:19:51,659
strange as it sounds

460
00:19:49,109 --> 00:19:52,288
let's just do that I mean you know go

461
00:19:51,659 --> 00:19:53,970
big or go home

462
00:19:52,288 --> 00:19:56,519
right I mean that's that's the thing I

463
00:19:53,970 --> 00:19:58,110
mean this is we're Pro we're

464
00:19:56,519 --> 00:20:00,480
professionals we're professionals twitch

465
00:19:58,109 --> 00:20:03,089
streamers here we're we're twitch

466
00:20:00,480 --> 00:20:04,589
partners okay this is not this is this

467
00:20:03,089 --> 00:20:06,480
is not some rinky-dink programming

468
00:20:04,589 --> 00:20:09,089
stream right this is this is a full deal

469
00:20:06,480 --> 00:20:10,829
we have custom emoticons we have custom

470
00:20:09,089 --> 00:20:13,079
emoticons on here does anyone even know

471
00:20:10,829 --> 00:20:13,859
that we've got we just set these up I

472
00:20:13,079 --> 00:20:15,449
don't even know

473
00:20:13,859 --> 00:20:17,008
check this out does this work I don't

474
00:20:15,450 --> 00:20:20,159
know if this works or not I think it

475
00:20:17,009 --> 00:20:22,769
might work but you know I couldn't

476
00:20:20,159 --> 00:20:26,250
really tell you because I'm not 100%

477
00:20:22,769 --> 00:20:29,370
sure but I think I think we have custom

478
00:20:26,250 --> 00:20:31,558
emoticons in tells me here for a second

479
00:20:29,369 --> 00:20:33,418
people let's let's go and eat let's go

480
00:20:31,558 --> 00:20:38,190
into the emotes thing here and panel

481
00:20:33,419 --> 00:20:40,259
okay try doing any mode of H a and D ma

482
00:20:38,190 --> 00:20:44,429
to which is the thing they assigned us

483
00:20:40,259 --> 00:20:47,639
hand ma to do hand ma to capital G

484
00:20:44,429 --> 00:20:51,720
lowercase l.o.v.e yeah Oh someone's got

485
00:20:47,638 --> 00:20:54,119
them right there right there yeah and

486
00:20:51,720 --> 00:20:58,589
then there's Hemi there's Molly there's

487
00:20:54,119 --> 00:21:01,189
Hiro and there's glove we've got are

488
00:20:58,589 --> 00:21:04,970
those coming through let me take a look

489
00:21:01,190 --> 00:21:04,970
let me see if we got that

490
00:21:05,759 --> 00:21:15,808
let's see here oh yeah check that out

491
00:21:08,798 --> 00:21:21,099
check that out look at that

492
00:21:15,808 --> 00:21:23,019
crushing it alright so so we've got all

493
00:21:21,099 --> 00:21:24,939
kinds of custom emotes here there's even

494
00:21:23,019 --> 00:21:27,129
ones for like special subscribers like

495
00:21:24,940 --> 00:21:28,960
we went all out like everything is up

496
00:21:27,130 --> 00:21:30,520
there I don't know what let's see we're

497
00:21:28,960 --> 00:21:32,500
the ones for the special subscribers are

498
00:21:30,519 --> 00:21:33,418
there's there's two other ones that we

499
00:21:32,500 --> 00:21:36,700
put up there

500
00:21:33,419 --> 00:21:40,270
hand them out to baby and hand mop -

501
00:21:36,700 --> 00:21:42,009
Krampus are also in there for special

502
00:21:40,269 --> 00:21:43,480
subscribers which I don't I'll be honest

503
00:21:42,009 --> 00:21:45,250
with you I don't really know how that

504
00:21:43,480 --> 00:21:47,558
works I said I was a pro streamer I'm

505
00:21:45,250 --> 00:21:49,869
not a pro streamer let's admit that up

506
00:21:47,558 --> 00:21:52,839
front I do the best I can but I don't

507
00:21:49,869 --> 00:21:55,449
really understand twitch super well so

508
00:21:52,839 --> 00:21:58,839
you know alls I'm saying is there's

509
00:21:55,450 --> 00:22:00,730
emojis in there and I don't know how

510
00:21:58,839 --> 00:22:03,009
they work but they're in there and I

511
00:22:00,730 --> 00:22:04,659
think that counts for something

512
00:22:03,009 --> 00:22:06,759
the fact that I don't really know how to

513
00:22:04,659 --> 00:22:11,440
use the UI that sets up the twitch

514
00:22:06,759 --> 00:22:13,538
emotes notwithstanding I did Anna did

515
00:22:11,440 --> 00:22:16,360
draw them and I did upload them so you

516
00:22:13,538 --> 00:22:18,129
know that's so pro streamer right I in

517
00:22:16,359 --> 00:22:19,719
and you know it's not my fault I don't

518
00:22:18,130 --> 00:22:22,169
have one of those weird chairs that luck

519
00:22:19,720 --> 00:22:25,179
comes up to here for some reason

520
00:22:22,169 --> 00:22:27,190
but we're still pro streamers so alright

521
00:22:25,179 --> 00:22:28,720
let's just do it I talked about this the

522
00:22:27,190 --> 00:22:29,860
other day actually so one of the

523
00:22:28,720 --> 00:22:31,298
questions was what's the difference

524
00:22:29,859 --> 00:22:32,288
between like this tokenizer and maybe

525
00:22:31,298 --> 00:22:34,349
one that's a little more investor

526
00:22:32,288 --> 00:22:37,869
strength there are some things certainly

527
00:22:34,349 --> 00:22:39,189
but the biggest change that I usually

528
00:22:37,869 --> 00:22:40,479
make structurally and I'm gonna make

529
00:22:39,190 --> 00:22:42,009
that change right now

530
00:22:40,480 --> 00:22:45,788
is that there's two stages to

531
00:22:42,009 --> 00:22:47,980
tokenization roll and unroll

532
00:22:45,788 --> 00:22:50,679
and so I'll show you what that looks

533
00:22:47,980 --> 00:22:52,360
like because we're gonna want it now to

534
00:22:50,679 --> 00:22:52,840
preserve our comments and so I'll show

535
00:22:52,359 --> 00:22:55,149
you why

536
00:22:52,839 --> 00:22:56,829
so in a tokenizer typically what you do

537
00:22:55,150 --> 00:22:58,809
is you have this function called get

538
00:22:56,829 --> 00:23:00,730
token or something similar to it you've

539
00:22:58,808 --> 00:23:02,139
seen the way ours works ours is pretty

540
00:23:00,730 --> 00:23:03,700
basic right we're not trying to break

541
00:23:02,140 --> 00:23:05,020
any land-speed records here we're not

542
00:23:03,700 --> 00:23:06,819
trying to anything too fancy we just

543
00:23:05,019 --> 00:23:09,429
want basic tokenization and that's what

544
00:23:06,819 --> 00:23:11,349
we're doing but when we call this get

545
00:23:09,429 --> 00:23:13,780
token what you can see is there some

546
00:23:11,349 --> 00:23:15,969
filtering that is occurring on the token

547
00:23:13,779 --> 00:23:16,960
all right and let's talk about what that

548
00:23:15,970 --> 00:23:19,000
filtering is

549
00:23:16,960 --> 00:23:21,430
so first and most important eat all

550
00:23:19,000 --> 00:23:23,619
white space right and what eat all white

551
00:23:21,430 --> 00:23:24,880
space is gonna do up here you can see is

552
00:23:23,619 --> 00:23:26,679
it's gonna skip right over those

553
00:23:24,880 --> 00:23:31,000
comments right those comments are just

554
00:23:26,680 --> 00:23:33,160
gone munch you know there they go

555
00:23:31,000 --> 00:23:35,740
and so that's one big thing that we're

556
00:23:33,160 --> 00:23:37,720
losing when we call get token is any

557
00:23:35,740 --> 00:23:40,990
comments that are in stream are gone now

558
00:23:37,720 --> 00:23:42,910
normally mmm-hmm that's what you want

559
00:23:40,990 --> 00:23:45,009
when you're parsing because you don't

560
00:23:42,910 --> 00:23:46,450
want to think about token you don't want

561
00:23:45,009 --> 00:23:48,549
to think about comments in your token

562
00:23:46,450 --> 00:23:50,140
stream you don't want to check and let

563
00:23:48,549 --> 00:23:52,720
me just again for those of you who don't

564
00:23:50,140 --> 00:23:55,000
work with parsers very often it might be

565
00:23:52,720 --> 00:23:57,220
a little non-obvious how all this stuff

566
00:23:55,000 --> 00:23:58,420
works and that's okay this stuff is kind

567
00:23:57,220 --> 00:24:00,250
of complicated once you work with

568
00:23:58,420 --> 00:24:01,660
compilers a little bit you get used to

569
00:24:00,250 --> 00:24:04,329
it but at first it's a little bit

570
00:24:01,660 --> 00:24:06,100
strange certainly um but you know take a

571
00:24:04,329 --> 00:24:08,799
look at what how this code works right

572
00:24:06,099 --> 00:24:13,029
you can see in here we do stuff like oh

573
00:24:08,799 --> 00:24:15,879
I just saw the token default so now I

574
00:24:13,029 --> 00:24:19,210
know that the next thing is going to be

575
00:24:15,880 --> 00:24:23,790
this open brace right because it's a

576
00:24:19,210 --> 00:24:27,670
default so this is backwards by the way

577
00:24:23,789 --> 00:24:31,029
nice job guys no one caught that

578
00:24:27,670 --> 00:24:32,590
so is default is gonna say look I've got

579
00:24:31,029 --> 00:24:33,910
one of these I don't need to look for

580
00:24:32,589 --> 00:24:35,619
the string because it's the default not

581
00:24:33,910 --> 00:24:37,420
a normal one so what I'm gonna do

582
00:24:35,619 --> 00:24:40,239
instead is do require token open race

583
00:24:37,420 --> 00:24:41,980
because I know that I get the default

584
00:24:40,240 --> 00:24:44,799
token they get an open brace right and

585
00:24:41,980 --> 00:24:47,200
you can see that happening in here right

586
00:24:44,799 --> 00:24:49,359
defaults open brace so that's we're

587
00:24:47,200 --> 00:24:51,940
looking for but the problem is the user

588
00:24:49,359 --> 00:24:56,169
can stick any number of comments in here

589
00:24:51,940 --> 00:24:59,200
right and so what I would have to do in

590
00:24:56,170 --> 00:25:02,650
the parser if I if I actually made a

591
00:24:59,200 --> 00:25:05,650
comment be its own token right is every

592
00:25:02,650 --> 00:25:07,990
time we got a token like right here

593
00:25:05,650 --> 00:25:09,400
every time we did token equals default

594
00:25:07,990 --> 00:25:12,309
doesn't like that I would have to do a

595
00:25:09,400 --> 00:25:14,980
while loop while it's a comment eat all

596
00:25:12,309 --> 00:25:17,769
the comments right you seen I'm saying

597
00:25:14,980 --> 00:25:19,569
and so that's a problem because it makes

598
00:25:17,769 --> 00:25:23,319
all of this code more complicated and

599
00:25:19,569 --> 00:25:25,230
weird but what we can do like I said is

600
00:25:23,319 --> 00:25:27,669
have the parser just handle those and

601
00:25:25,230 --> 00:25:29,529
that's the way we wrote it every time

602
00:25:27,670 --> 00:25:31,690
you get a token it returns the neck

603
00:25:29,529 --> 00:25:34,180
actual meaningful token and it throws

604
00:25:31,690 --> 00:25:37,480
away anything that's just incidental to

605
00:25:34,180 --> 00:25:40,420
the co stream such as a return or the

606
00:25:37,480 --> 00:25:44,440
comment or whatever right but what if we

607
00:25:40,420 --> 00:25:47,650
want all that stuff back right what if

608
00:25:44,440 --> 00:25:50,380
we want all of that stuff back because I

609
00:25:47,650 --> 00:25:50,769
want to reproduce the input to the

610
00:25:50,380 --> 00:25:53,500
output

611
00:25:50,769 --> 00:25:54,579
I want the comments I want the new lines

612
00:25:53,500 --> 00:25:57,160
where they were

613
00:25:54,579 --> 00:25:58,089
I want it laid out exactly as the user

614
00:25:57,160 --> 00:26:01,870
had intended

615
00:25:58,089 --> 00:26:05,319
I don't want right to put this sort of

616
00:26:01,869 --> 00:26:09,669
other stuff I don't want it to throw

617
00:26:05,319 --> 00:26:13,149
away all of what they did and only have

618
00:26:09,670 --> 00:26:14,769
the bear the bear structure of it come

619
00:26:13,150 --> 00:26:17,440
out the other end I want their comments

620
00:26:14,769 --> 00:26:19,150
preserved so if we're gonna do that

621
00:26:17,440 --> 00:26:21,039
again it's actually not that hard this

622
00:26:19,150 --> 00:26:22,420
is something I don't know if other

623
00:26:21,039 --> 00:26:23,980
people do this this is just something I

624
00:26:22,420 --> 00:26:25,509
made up at some point but I would

625
00:26:23,980 --> 00:26:27,130
suspect that other people probably do

626
00:26:25,509 --> 00:26:30,460
similarly because it's just it's the

627
00:26:27,130 --> 00:26:33,010
design that you would do right is you

628
00:26:30,460 --> 00:26:35,440
turn your get token into a get token raw

629
00:26:33,009 --> 00:26:36,789
so instead of having get token be the

630
00:26:35,440 --> 00:26:38,620
thing that actually processes the token

631
00:26:36,789 --> 00:26:39,909
you have a thing called get token raw

632
00:26:38,619 --> 00:26:42,250
which is actually the thing that now

633
00:26:39,910 --> 00:26:44,440
processes your tokens and then you

634
00:26:42,250 --> 00:26:46,720
introduce the get token call as

635
00:26:44,440 --> 00:26:49,420
something that operates on top of that

636
00:26:46,720 --> 00:26:52,539
so everyone who was calling it token

637
00:26:49,420 --> 00:26:54,180
before it can still call it oops put

638
00:26:52,539 --> 00:26:56,379
that one to low

639
00:26:54,180 --> 00:26:58,420
everyone who was calling get tokens

640
00:26:56,380 --> 00:27:01,630
still calls get token but anyone who

641
00:26:58,420 --> 00:27:03,970
wants to reproduce the stream can call

642
00:27:01,630 --> 00:27:06,430
get token draw and that way you can get

643
00:27:03,970 --> 00:27:12,970
those individual pieces back much more

644
00:27:06,430 --> 00:27:14,769
easily okay and what gets who can draw

645
00:27:12,970 --> 00:27:17,170
does is it actually preserves all of

646
00:27:14,769 --> 00:27:17,710
that stuff right so all of the

647
00:27:17,170 --> 00:27:19,900
whitespace

648
00:27:17,710 --> 00:27:22,240
all of the comments all of that stuff

649
00:27:19,900 --> 00:27:24,550
can actually just be handled in here and

650
00:27:22,240 --> 00:27:28,029
so now what we do is we take this

651
00:27:24,549 --> 00:27:30,819
routine for eat all whitespace right

652
00:27:28,029 --> 00:27:33,220
and we grab that and we we kind of shove

653
00:27:30,819 --> 00:27:34,450
it into here right so we say look this

654
00:27:33,220 --> 00:27:37,509
is actually where we're going to be

655
00:27:34,450 --> 00:27:40,539
processing the whitespace not what you

656
00:27:37,509 --> 00:27:41,950
were getting before right and so in here

657
00:27:40,539 --> 00:27:45,180
what we'll do is we'll say all right

658
00:27:41,950 --> 00:27:45,180
let's get this whitespace

659
00:27:45,788 --> 00:27:50,319
and process that properly so here is

660
00:27:47,950 --> 00:27:52,119
what we'll be looking for right these

661
00:27:50,319 --> 00:27:55,778
are our whitespace characters that we

662
00:27:52,118 --> 00:27:57,269
know of right so these are the

663
00:27:55,778 --> 00:28:00,519
whitespace characters that we know of

664
00:27:57,269 --> 00:28:03,308
and you know we also have these comment

665
00:28:00,519 --> 00:28:04,808
ones right so forward slash and star and

666
00:28:03,308 --> 00:28:06,700
that sort of stuff those are things that

667
00:28:04,808 --> 00:28:13,569
we have to care about right so we've

668
00:28:06,700 --> 00:28:18,340
also gotten this so here's our white

669
00:28:13,569 --> 00:28:21,189
space and here is our our slashes and so

670
00:28:18,339 --> 00:28:24,668
let's go ahead and process the slashes

671
00:28:21,190 --> 00:28:26,590
first okay and if I want to if I look up

672
00:28:24,669 --> 00:28:29,379
here I notice we're not using slash for

673
00:28:26,589 --> 00:28:31,148
anything maybe I might do this a

674
00:28:29,378 --> 00:28:32,888
slightly different way because we happen

675
00:28:31,148 --> 00:28:34,988
to not use these for anything else what

676
00:28:32,888 --> 00:28:37,388
I could do is actually move these into

677
00:28:34,989 --> 00:28:39,819
my default clause and that would work as

678
00:28:37,388 --> 00:28:43,358
well right so I could put those in here

679
00:28:39,819 --> 00:28:47,308
as something more like this right and so

680
00:28:43,358 --> 00:28:52,778
the way that would look is like this and

681
00:28:47,308 --> 00:28:54,668
so these become welded together so what

682
00:28:52,778 --> 00:28:56,499
I'm doing now is saying all right let's

683
00:28:54,669 --> 00:28:58,989
take a look when we do our default thing

684
00:28:56,499 --> 00:29:01,298
like we were doing before we're going to

685
00:28:58,989 --> 00:29:03,369
scan for things like identifiers in here

686
00:29:01,298 --> 00:29:04,658
but we're also going to scan for the

687
00:29:03,368 --> 00:29:07,868
other things that we were scanning for

688
00:29:04,659 --> 00:29:12,159
us such as if there was a piece of white

689
00:29:07,868 --> 00:29:14,949
space here right if there was comment

690
00:29:12,159 --> 00:29:17,799
you know C style CSS style comment if

691
00:29:14,950 --> 00:29:20,590
there was a C style comment and then if

692
00:29:17,798 --> 00:29:22,450
it isn't any of those things then we

693
00:29:20,589 --> 00:29:24,730
will continue processing it the way that

694
00:29:22,450 --> 00:29:26,919
we were processing before as you know

695
00:29:24,730 --> 00:29:30,099
something else so what we want to do

696
00:29:26,919 --> 00:29:33,549
here is if we see a whitespace character

697
00:29:30,099 --> 00:29:38,408
then we will do a while loop to get all

698
00:29:33,548 --> 00:29:40,599
of the white space out right and we'll

699
00:29:38,409 --> 00:29:44,739
just consider that one big chunk of

700
00:29:40,599 --> 00:29:47,408
white space if we don't right so if

701
00:29:44,739 --> 00:29:50,169
instead we see one of these comments

702
00:29:47,409 --> 00:29:52,539
we'll get out the comment the only thing

703
00:29:50,169 --> 00:29:54,009
we then have to do is again like you can

704
00:29:52,538 --> 00:29:56,799
look at what's happening in here right

705
00:29:54,009 --> 00:29:58,960
at the end of all of these

706
00:29:56,799 --> 00:30:01,029
we're doing a token text count equals

707
00:29:58,960 --> 00:30:04,509
the input data minus the data right this

708
00:30:01,029 --> 00:30:06,789
sort of thing here this is always going

709
00:30:04,509 --> 00:30:09,369
to be true for all of these cases we're

710
00:30:06,789 --> 00:30:11,889
always going to suck up as much of the

711
00:30:09,369 --> 00:30:13,539
token as we could there right and so all

712
00:30:11,890 --> 00:30:16,809
I really have to do to support these

713
00:30:13,539 --> 00:30:18,670
comments as proper tokens is to just say

714
00:30:16,808 --> 00:30:23,589
hey every time you grab one of these

715
00:30:18,670 --> 00:30:26,440
just now set it to comment right off you

716
00:30:23,589 --> 00:30:28,240
go and I could differentiate between

717
00:30:26,440 --> 00:30:31,120
these if I wanted to I could say that

718
00:30:28,240 --> 00:30:33,220
this was a CPP comment right or I could

719
00:30:31,119 --> 00:30:34,959
say that this is a si comment I don't

720
00:30:33,220 --> 00:30:38,740
know that we're ever gonna care which

721
00:30:34,960 --> 00:30:42,160
kind of comment was which I think we

722
00:30:38,740 --> 00:30:44,079
just don't need to know so for now I'm

723
00:30:42,160 --> 00:30:45,759
not going to differentiate between those

724
00:30:44,079 --> 00:30:50,558
I'm just going to say that there is such

725
00:30:45,759 --> 00:30:53,470
a thing as a token comment right now

726
00:30:50,558 --> 00:30:55,299
let's go a little bit further let's keep

727
00:30:53,470 --> 00:30:57,279
pushing our advantage here in to the

728
00:30:55,299 --> 00:30:58,928
extent that we have one and say all

729
00:30:57,279 --> 00:31:00,789
right so in that case let's say we've

730
00:30:58,929 --> 00:31:02,980
also got token white space and let's say

731
00:31:00,789 --> 00:31:06,670
we've also got a token let's say newline

732
00:31:02,980 --> 00:31:08,589
right and this way we can sort of do

733
00:31:06,670 --> 00:31:11,590
some processing of a few other things as

734
00:31:08,589 --> 00:31:13,269
well so if I wanted to do that now we

735
00:31:11,589 --> 00:31:14,859
know that we've got token comment in

736
00:31:13,269 --> 00:31:16,808
both of these cases that should just

737
00:31:14,859 --> 00:31:18,250
work because we're already have the code

738
00:31:16,808 --> 00:31:19,269
for sucking up what's ever inside the

739
00:31:18,250 --> 00:31:21,670
comment

740
00:31:19,269 --> 00:31:23,769
let's also process these other things so

741
00:31:21,670 --> 00:31:25,390
let's stop thinking about is whitespace

742
00:31:23,769 --> 00:31:28,839
maybe that's the wrong thing to think

743
00:31:25,390 --> 00:31:32,700
about and let's do something a little

744
00:31:28,839 --> 00:31:35,019
bit different which is let's think about

745
00:31:32,700 --> 00:31:36,220
whitespace let's think about is

746
00:31:35,019 --> 00:31:37,960
whitespace a little bit more broadly

747
00:31:36,220 --> 00:31:43,569
interesting enough look so we have two

748
00:31:37,960 --> 00:31:46,569
is white spaces why is that so we have

749
00:31:43,569 --> 00:31:54,939
is white space with ab32 X and is

750
00:31:46,569 --> 00:31:58,389
whitespace oops that's a in line why is

751
00:31:54,940 --> 00:32:01,350
it coming here that's weird it's like

752
00:31:58,390 --> 00:32:01,350
some kind of weird bug

753
00:32:01,880 --> 00:32:05,650
well I'm not sure what's going on there

754
00:32:08,319 --> 00:32:15,829
hmm wonder if that parsers busted or

755
00:32:12,109 --> 00:32:18,289
something this is sort of not the full

756
00:32:15,829 --> 00:32:20,599
version of it's not even the it's it's

757
00:32:18,289 --> 00:32:22,159
quite old of the new for coder stuff

758
00:32:20,599 --> 00:32:24,019
that I was doing in here so I wonder if

759
00:32:22,160 --> 00:32:25,070
there's some kind of I'm not sure what's

760
00:32:24,019 --> 00:32:27,769
going on there where there's it's

761
00:32:25,069 --> 00:32:28,909
listing two of these but one of them it

762
00:32:27,769 --> 00:32:31,339
doesn't seem to know where it actually

763
00:32:28,910 --> 00:32:33,200
is like there it is but this one it

764
00:32:31,339 --> 00:32:34,699
doesn't seem to know and I wonder if

765
00:32:33,200 --> 00:32:38,720
there's some kind of a weird bug in

766
00:32:34,700 --> 00:32:40,519
there there's only one is whitespace

767
00:32:38,720 --> 00:32:43,130
routine here but I'm just not sure where

768
00:32:40,519 --> 00:32:46,119
it's getting that one from so who knows

769
00:32:43,130 --> 00:32:48,920
anyway I won't belabor the point for now

770
00:32:46,119 --> 00:32:50,779
so we here what I'd like to do is take a

771
00:32:48,920 --> 00:32:54,140
look at these and say oh and you know

772
00:32:50,779 --> 00:32:56,299
what actually looking at this it looks

773
00:32:54,140 --> 00:33:01,730
like the is whitespace here doesn't

774
00:32:56,299 --> 00:33:08,690
actually have end-of-line included so

775
00:33:01,730 --> 00:33:11,690
actually this would have not really

776
00:33:08,690 --> 00:33:13,690
worked properly I wonder how that was

777
00:33:11,690 --> 00:33:16,759
working before if it's because I think

778
00:33:13,690 --> 00:33:19,340
it must have been oh no it does it does

779
00:33:16,759 --> 00:33:22,160
it has is end of line there so I think

780
00:33:19,339 --> 00:33:26,179
what we want to do is something like is

781
00:33:22,160 --> 00:33:29,420
spacing right and then we can basically

782
00:33:26,180 --> 00:33:31,930
duplicate this out into here so we can

783
00:33:29,420 --> 00:33:36,470
check for these things individually and

784
00:33:31,930 --> 00:33:38,870
so this will just call is spacing or is

785
00:33:36,470 --> 00:33:41,150
end of line but then you can you can

786
00:33:38,869 --> 00:33:43,669
call is spacing as something that's a

787
00:33:41,150 --> 00:33:45,259
little bit more specific so you know the

788
00:33:43,670 --> 00:33:48,050
difference between those two so I'm

789
00:33:45,259 --> 00:33:51,259
going to do an is spacing here and this

790
00:33:48,049 --> 00:33:55,700
will eat up all spacing characters and

791
00:33:51,259 --> 00:33:59,119
we'll call that token spacing versus

792
00:33:55,700 --> 00:34:02,000
token newline right so if we have token

793
00:33:59,119 --> 00:34:05,589
is spacing will suck all of those up

794
00:34:02,000 --> 00:34:11,679
into one thing that's the spacing token

795
00:34:05,589 --> 00:34:11,679
and then if you have a new line

796
00:34:12,858 --> 00:34:25,769
is end of line then what we want to do

797
00:34:20,429 --> 00:34:27,030
is remember that that's the case and it

798
00:34:25,769 --> 00:34:39,809
looks like I should call that end of

799
00:34:27,030 --> 00:34:41,309
line so when we get that there's an

800
00:34:39,809 --> 00:34:43,379
important thing to remember here which

801
00:34:41,309 --> 00:34:45,359
is that end of line processing is kind

802
00:34:43,378 --> 00:34:47,068
of delicate right

803
00:34:45,358 --> 00:34:49,469
and so when we actually suck up this

804
00:34:47,068 --> 00:34:54,960
token we want to do this in kind of a in

805
00:34:49,469 --> 00:34:56,338
a bit of a meticulous way if you look at

806
00:34:54,960 --> 00:34:58,760
end of line here you can see we're

807
00:34:56,338 --> 00:35:01,139
checking for either of these two things

808
00:34:58,760 --> 00:35:07,260
but there's a number of ways that line

809
00:35:01,139 --> 00:35:09,000
endings can occur let me show you what I

810
00:35:07,260 --> 00:35:12,390
mean by that there's Linux there's Mac

811
00:35:09,000 --> 00:35:15,199
and there's Windows it was hoping this

812
00:35:12,389 --> 00:35:15,199
would be here we go

813
00:35:19,380 --> 00:35:26,369
so you can see on here a little table of

814
00:35:21,900 --> 00:35:29,010
how line endings have gone right and

815
00:35:26,369 --> 00:35:32,970
what you can see is that there's a lot

816
00:35:29,010 --> 00:35:36,140
of nasty variance between what these

817
00:35:32,969 --> 00:35:39,239
were now let me give you a little bit of

818
00:35:36,139 --> 00:35:40,379
background on how it got this way cuz

819
00:35:39,239 --> 00:35:43,558
you're probably looking at this

820
00:35:40,380 --> 00:35:45,619
especially if you're fairly young and

821
00:35:43,559 --> 00:35:48,599
never lived through the terminal years

822
00:35:45,619 --> 00:35:50,730
you probably are wondering why you could

823
00:35:48,599 --> 00:35:51,690
get messed up this badly although you

824
00:35:50,730 --> 00:35:53,309
know if you've ever seen

825
00:35:51,690 --> 00:35:55,139
CSS you're probably not wondering that

826
00:35:53,309 --> 00:35:58,019
but you're probably like wow this is

827
00:35:55,139 --> 00:36:00,650
relatively clean so if you think about

828
00:35:58,019 --> 00:36:02,969
how these escape sequences are working

829
00:36:00,650 --> 00:36:06,329
these are special ASCII codes write a

830
00:36:02,969 --> 00:36:10,379
backslash n actually translates to it -

831
00:36:06,329 --> 00:36:14,039
oh X a as a hex value right and back

832
00:36:10,380 --> 00:36:16,920
says R is o x OD right or just o XD as a

833
00:36:14,039 --> 00:36:18,839
hex code right and so those are

834
00:36:16,920 --> 00:36:20,430
non-printing characters and they

835
00:36:18,838 --> 00:36:22,469
represent when you're trying to go to

836
00:36:20,429 --> 00:36:26,019
the next line and if you look at what

837
00:36:22,469 --> 00:36:27,789
happens here backslash R + backslash

838
00:36:26,019 --> 00:36:29,679
and you might be like well why is there

839
00:36:27,789 --> 00:36:31,179
some that are just back session why are

840
00:36:29,679 --> 00:36:32,529
there some that are back sis are back

841
00:36:31,179 --> 00:36:34,299
session why are there some that are just

842
00:36:32,530 --> 00:36:35,890
back such are why are there some that

843
00:36:34,300 --> 00:36:38,380
are backslash-n back so sorry how did

844
00:36:35,889 --> 00:36:41,769
that happen and the answer is because

845
00:36:38,380 --> 00:36:44,829
these date all the way back to the years

846
00:36:41,769 --> 00:36:48,400
when you actually weren't talking about

847
00:36:44,829 --> 00:36:51,309
like raster displays on a micro computer

848
00:36:48,400 --> 00:36:53,829
or something like that right you were

849
00:36:51,309 --> 00:36:57,219
actually talking about things like I

850
00:36:53,829 --> 00:36:59,829
have a mainframe and it's connected via

851
00:36:57,219 --> 00:37:04,089
some kind of cabling or even over a

852
00:36:59,829 --> 00:37:05,739
phone wire to like a vt100 terminal or

853
00:37:04,090 --> 00:37:10,059
something that's just a dumb terminal

854
00:37:05,739 --> 00:37:13,179
that all it is is a screen and a

855
00:37:10,059 --> 00:37:15,549
keyboard and a little chip that's smart

856
00:37:13,179 --> 00:37:19,239
only smart enough a load ship there's

857
00:37:15,550 --> 00:37:21,370
still a big board that's only smart

858
00:37:19,239 --> 00:37:23,500
enough to like send things off the wire

859
00:37:21,369 --> 00:37:27,609
when they're pressed and receive things

860
00:37:23,500 --> 00:37:30,130
back from the wire when they are

861
00:37:27,610 --> 00:37:32,140
received and all it had from memory was

862
00:37:30,130 --> 00:37:32,410
just the buffer of this what was on the

863
00:37:32,139 --> 00:37:37,389
screen

864
00:37:32,409 --> 00:37:40,329
that's all it remembered right so what

865
00:37:37,389 --> 00:37:43,629
these things correspond to were actually

866
00:37:40,329 --> 00:37:47,380
two different operations sometimes one

867
00:37:43,630 --> 00:37:50,099
is go back to the beginning of the line

868
00:37:47,380 --> 00:37:53,019
and I believe that's backslash or right

869
00:37:50,099 --> 00:37:56,170
so in the old days if you if the

870
00:37:53,019 --> 00:37:58,210
terminal got o x OD what it meant was

871
00:37:56,170 --> 00:38:00,159
wherever you were on the line because

872
00:37:58,210 --> 00:38:02,260
remember it's keeping track as as

873
00:38:00,159 --> 00:38:04,480
letters are coming down the pipe

874
00:38:02,260 --> 00:38:08,650
it's stacking them one right after each

875
00:38:04,480 --> 00:38:11,619
other across the screen right then if

876
00:38:08,650 --> 00:38:14,650
you do backslash R right which was Oh X

877
00:38:11,619 --> 00:38:17,079
OD right if that came if you've got that

878
00:38:14,650 --> 00:38:20,320
oh XD down the pipe what it meant was

879
00:38:17,079 --> 00:38:22,659
wherever the cursor is go all the way

880
00:38:20,320 --> 00:38:24,640
back to the beginning of the line go go

881
00:38:22,659 --> 00:38:28,989
down just go back to the beginning of

882
00:38:24,639 --> 00:38:31,420
the line right backslash n on the other

883
00:38:28,989 --> 00:38:34,319
hand or Oh X a if that came down the

884
00:38:31,420 --> 00:38:37,389
pipe it meant move down one line right

885
00:38:34,320 --> 00:38:39,309
but it didn't necessarily mean go back

886
00:38:37,389 --> 00:38:43,338
to the beginning of the

887
00:38:39,309 --> 00:38:44,869
and so the protocol for these terminals

888
00:38:43,338 --> 00:38:46,338
and the protocol for these transmitted

889
00:38:44,869 --> 00:38:49,010
formats and however else you want to

890
00:38:46,338 --> 00:38:52,279
look at it because there was no real

891
00:38:49,010 --> 00:38:54,410
standard it was fairly flexible some

892
00:38:52,280 --> 00:38:56,930
people decided well you know what

893
00:38:54,409 --> 00:38:58,879
generally when we go back we want to go

894
00:38:56,929 --> 00:39:01,338
down the line and back to the beginning

895
00:38:58,880 --> 00:39:05,838
so let's just send o X a and that'll

896
00:39:01,338 --> 00:39:07,519
mean like go down and back right other

897
00:39:05,838 --> 00:39:08,989
people were like no let's have two codes

898
00:39:07,519 --> 00:39:10,369
one that is the thing that go back to

899
00:39:08,989 --> 00:39:12,519
being aligned and one that is to go down

900
00:39:10,369 --> 00:39:15,108
the line right let's do that

901
00:39:12,519 --> 00:39:17,300
other people were like well you know

902
00:39:15,108 --> 00:39:19,699
what I agree we should only send one but

903
00:39:17,300 --> 00:39:21,470
instead of sending Oh X a let's just

904
00:39:19,699 --> 00:39:22,608
send o XD that's the thing they need to

905
00:39:21,469 --> 00:39:24,709
go back to the beginning of the line

906
00:39:22,608 --> 00:39:26,239
that's that that's the one we would

907
00:39:24,710 --> 00:39:28,250
probably want to automatically go down

908
00:39:26,239 --> 00:39:29,719
not the one that goes down that one we

909
00:39:28,250 --> 00:39:31,818
might want to use just to like stay

910
00:39:29,719 --> 00:39:35,750
where we are or whatever right etc etc

911
00:39:31,818 --> 00:39:38,989
etc etc so it's just it's just

912
00:39:35,750 --> 00:39:40,818
historical accident that we ended up

913
00:39:38,989 --> 00:39:42,618
with this nowadays you would never do

914
00:39:40,818 --> 00:39:44,809
this you just have one way of encoding

915
00:39:42,619 --> 00:39:49,190
end of line but that is not the way

916
00:39:44,809 --> 00:39:50,989
organic systems evolve right so what

917
00:39:49,190 --> 00:39:52,849
that means for us is if we want to

918
00:39:50,989 --> 00:39:54,529
generally not care what kind of text

919
00:39:52,849 --> 00:39:56,059
editor produced this thing because we

920
00:39:54,530 --> 00:39:57,349
don't know what you know this text

921
00:39:56,059 --> 00:39:58,369
editor could have done anything who

922
00:39:57,349 --> 00:40:00,318
knows what it's stuck at at the end of

923
00:39:58,369 --> 00:40:02,119
the line maybe it's doing mac format or

924
00:40:00,318 --> 00:40:03,440
UNIX format or Windows format or who

925
00:40:02,119 --> 00:40:05,720
knows what or any of these other things

926
00:40:03,440 --> 00:40:08,568
we have up here like Linux Mac cost

927
00:40:05,719 --> 00:40:11,088
FreeBSD ax xenix biasa MIGA and RIS cos

928
00:40:08,568 --> 00:40:15,318
for example or maybe it's Atari windows

929
00:40:11,088 --> 00:40:16,279
das deck tops-10 right like or baby it's

930
00:40:15,318 --> 00:40:19,099
the Commodore

931
00:40:16,280 --> 00:40:21,560
maybe it's the the c64 I don't know

932
00:40:19,099 --> 00:40:23,780
right so who knows where this came from

933
00:40:21,559 --> 00:40:25,670
or Mac offs but maybe it coming

934
00:40:23,780 --> 00:40:26,960
someone's using an old Mac one of those

935
00:40:25,670 --> 00:40:30,440
ones that has a little smiley face when

936
00:40:26,960 --> 00:40:33,619
you boot all right so if we're doing

937
00:40:30,440 --> 00:40:35,809
that then what we want to do is when we

938
00:40:33,619 --> 00:40:38,869
get an end-of-line we want to look to

939
00:40:35,809 --> 00:40:41,480
see if it matches any of these possible

940
00:40:38,869 --> 00:40:43,789
sequences and if it does we want to

941
00:40:41,480 --> 00:40:46,039
generally assume that the largest

942
00:40:43,789 --> 00:40:49,279
sequence we could match is the end of

943
00:40:46,039 --> 00:40:52,320
line so that if it inserted this or this

944
00:40:49,280 --> 00:40:54,060
we will suck that up as a single

945
00:40:52,320 --> 00:40:56,430
end of line character instead of

946
00:40:54,059 --> 00:40:59,279
treating it as - end of lines which

947
00:40:56,429 --> 00:41:01,049
would be incorrect right so what I want

948
00:40:59,280 --> 00:41:03,090
to do is say all right this is an end of

949
00:41:01,050 --> 00:41:09,150
line token and then I want to look and

950
00:41:03,090 --> 00:41:15,870
see if tokenizer at zero equals

951
00:41:09,150 --> 00:41:18,680
something and scoops and tokenizer at 1

952
00:41:15,869 --> 00:41:30,539
equals something then we'll consider

953
00:41:18,679 --> 00:41:31,949
advancing I'm sorry right this covers

954
00:41:30,539 --> 00:41:37,139
you in fact I could I could do it this

955
00:41:31,949 --> 00:41:42,000
way as well so what I could do is do two

956
00:41:37,139 --> 00:41:43,949
of these checks like that right and so

957
00:41:42,000 --> 00:41:45,300
all I want to do here is say look when I

958
00:41:43,949 --> 00:41:47,519
get an end of line character if it's

959
00:41:45,300 --> 00:41:49,470
just a backslash R by itself or just a

960
00:41:47,519 --> 00:41:51,150
backslash n by itself we'll assume that

961
00:41:49,469 --> 00:41:53,309
that is what the text editor is using

962
00:41:51,150 --> 00:41:55,470
for and of line but if we see a

963
00:41:53,309 --> 00:41:57,210
backslash R followed by a backslash N or

964
00:41:55,469 --> 00:41:59,819
we see a backslash n followed by a

965
00:41:57,210 --> 00:42:02,250
backslash R we can assume that we need

966
00:41:59,820 --> 00:42:03,900
to move one more character forward right

967
00:42:02,250 --> 00:42:06,719
because we've sucked up one of the

968
00:42:03,900 --> 00:42:10,769
characters but we haven't sucked up the

969
00:42:06,719 --> 00:42:12,419
other character right so we want to skip

970
00:42:10,769 --> 00:42:15,030
that so that we don't treat it as two

971
00:42:12,420 --> 00:42:16,889
end of lines this will handle all four

972
00:42:15,030 --> 00:42:20,250
variants of the end of line that we

973
00:42:16,889 --> 00:42:22,799
could see no matter which crazy type

974
00:42:20,250 --> 00:42:25,289
type of text editing line ending we got

975
00:42:22,800 --> 00:42:27,450
it should still work because this way if

976
00:42:25,289 --> 00:42:29,610
it's back to star boxes an or back stem

977
00:42:27,449 --> 00:42:31,799
boxers are will eat them both if it's

978
00:42:29,610 --> 00:42:33,599
just a bare black R or a bare back end

979
00:42:31,800 --> 00:42:36,000
we will just consider one of them if

980
00:42:33,599 --> 00:42:38,909
it's - backslash ends or - backslash

981
00:42:36,000 --> 00:42:40,949
ours that obviously means there actually

982
00:42:38,909 --> 00:42:43,170
are two end of lines because there was

983
00:42:40,949 --> 00:42:45,210
nothing there are no end of line formats

984
00:42:43,170 --> 00:42:47,789
that have two backslash ends meaning one

985
00:42:45,210 --> 00:42:48,869
carriage return that's not a valid line

986
00:42:47,789 --> 00:42:51,000
ending that I mean your text Center to

987
00:42:48,869 --> 00:42:54,420
ever use so we don't have to worry about

988
00:42:51,000 --> 00:42:57,360
that one right so now we have all of the

989
00:42:54,420 --> 00:42:59,309
ways we can get whitespace and comments

990
00:42:57,360 --> 00:43:02,220
and stuff into the system and now we can

991
00:42:59,309 --> 00:43:04,079
call get token raw and get token raw

992
00:43:02,219 --> 00:43:07,759
will then give us what we actually

993
00:43:04,079 --> 00:43:07,759
needed to use right

994
00:43:10,159 --> 00:43:16,379
okay so now we can sort of imagine what

995
00:43:13,889 --> 00:43:19,078
you would do if you did want get token

996
00:43:16,380 --> 00:43:21,358
we probably won't really use get token

997
00:43:19,079 --> 00:43:23,278
very much because we're going to have to

998
00:43:21,358 --> 00:43:26,670
sort of do a little bit of a porting

999
00:43:23,278 --> 00:43:29,039
style shim here probably I mean it

1000
00:43:26,670 --> 00:43:31,829
depends on how we want to do it you'll

1001
00:43:29,039 --> 00:43:34,680
see there's probably some fancy-pants

1002
00:43:31,829 --> 00:43:36,180
stuff we can do here so maybe we will

1003
00:43:34,679 --> 00:43:37,440
actually call get token well we'll see

1004
00:43:36,179 --> 00:43:39,538
how we want to make it work at the end

1005
00:43:37,440 --> 00:43:41,250
but so you can now see how get token

1006
00:43:39,539 --> 00:43:43,470
would be implemented so that you can get

1007
00:43:41,250 --> 00:43:46,048
either one what you're going to do here

1008
00:43:43,469 --> 00:43:49,139
is you're going to say hey let's get the

1009
00:43:46,048 --> 00:43:54,000
actual token from get token wrong and

1010
00:43:49,139 --> 00:43:55,818
we'll see what it is right and I

1011
00:43:54,000 --> 00:44:00,989
probably want this to happen up up top

1012
00:43:55,818 --> 00:44:02,429
right and so what I'll do is I'll go

1013
00:44:00,989 --> 00:44:05,250
into my loop

1014
00:44:02,429 --> 00:44:07,469
I'll get token raw and I just won't exit

1015
00:44:05,250 --> 00:44:11,639
the loop when it's a token that I don't

1016
00:44:07,469 --> 00:44:14,759
care about right so if I want to write I

1017
00:44:11,639 --> 00:44:20,190
can just do an if you know token dot

1018
00:44:14,760 --> 00:44:22,260
type equals blah else break and in the

1019
00:44:20,190 --> 00:44:24,480
equals block Clause I can just put the

1020
00:44:22,260 --> 00:44:25,950
types that I actually care about right

1021
00:44:24,480 --> 00:44:28,230
these ones here I'm sorry that I

1022
00:44:25,949 --> 00:44:31,818
actually don't care about I can just do

1023
00:44:28,230 --> 00:44:31,818
those so if it's a spacing

1024
00:44:38,369 --> 00:44:45,849
if it's a spacing if it's an end of the

1025
00:44:41,949 --> 00:44:54,909
line or if it's comment I'm just gonna

1026
00:44:45,849 --> 00:44:57,839
ignore it right so that'll allow me to

1027
00:44:54,909 --> 00:44:59,859
kind of eat forward through the stream

1028
00:44:57,840 --> 00:45:01,690
and then the other thing I want to do

1029
00:44:59,860 --> 00:45:03,760
here we'll talk about one second but

1030
00:45:01,690 --> 00:45:05,679
what that means is when I call get token

1031
00:45:03,760 --> 00:45:08,740
now I'm only gonna get things that were

1032
00:45:05,679 --> 00:45:10,839
actually valid to the code stream and

1033
00:45:08,739 --> 00:45:12,849
that actually have meaning anything that

1034
00:45:10,840 --> 00:45:14,769
was just whitespace end of line four

1035
00:45:12,849 --> 00:45:17,230
comments will still get filtered out so

1036
00:45:14,769 --> 00:45:18,849
now it's it has not changed the behavior

1037
00:45:17,230 --> 00:45:21,250
of the parser at all the part still

1038
00:45:18,849 --> 00:45:23,409
works exactly as it used to but we now

1039
00:45:21,250 --> 00:45:25,119
have the ability at any time to really

1040
00:45:23,409 --> 00:45:27,039
talk about the token stream at a lower

1041
00:45:25,119 --> 00:45:29,139
level if we want to which is exactly

1042
00:45:27,039 --> 00:45:33,070
what we want to do for doing this sort

1043
00:45:29,139 --> 00:45:35,849
of throughput processing sort of you

1044
00:45:33,070 --> 00:45:38,260
know what's the word I'm looking for

1045
00:45:35,849 --> 00:45:42,159
unmolested copying basically we don't

1046
00:45:38,260 --> 00:45:43,930
want to change in any way the input into

1047
00:45:42,159 --> 00:45:46,839
the output if no changes have occurred

1048
00:45:43,929 --> 00:45:49,359
and we want to preserve all of that sort

1049
00:45:46,840 --> 00:45:52,390
of connective tissue that was in there

1050
00:45:49,360 --> 00:45:53,680
originally okay so there's one other

1051
00:45:52,389 --> 00:45:55,329
thing I want to do here because since we

1052
00:45:53,679 --> 00:45:57,579
ended up doing a slightly more hardcore

1053
00:45:55,329 --> 00:46:00,389
parser I also want to talk about one

1054
00:45:57,579 --> 00:46:05,139
other thing which is there is a string

1055
00:46:00,389 --> 00:46:07,629
kind of type right there is token string

1056
00:46:05,139 --> 00:46:09,039
and what I want to talk about here is

1057
00:46:07,630 --> 00:46:11,230
just that if you look at what happens

1058
00:46:09,039 --> 00:46:15,009
with token string so in here you can see

1059
00:46:11,230 --> 00:46:17,980
we get this right you can see what

1060
00:46:15,010 --> 00:46:22,480
happens here we go in and we say look if

1061
00:46:17,980 --> 00:46:24,789
we had a quote then what we're gonna do

1062
00:46:22,480 --> 00:46:26,679
is we're gonna actually skip that

1063
00:46:24,789 --> 00:46:28,869
initial quote care write that initial

1064
00:46:26,679 --> 00:46:31,960
quote card is gonna get skipped and you

1065
00:46:28,869 --> 00:46:35,469
can see us right here not actually

1066
00:46:31,960 --> 00:46:37,570
touching that end quote either so we're

1067
00:46:35,469 --> 00:46:44,139
leaving that the actual value of the

1068
00:46:37,570 --> 00:46:47,650
token okay is is what's inside the

1069
00:46:44,139 --> 00:46:51,289
double quotes and that means that it's

1070
00:46:47,650 --> 00:46:54,320
again it's modifying the input

1071
00:46:51,289 --> 00:46:57,079
in a sense right we can't just copy the

1072
00:46:54,320 --> 00:47:00,530
token value to the output and expect it

1073
00:46:57,079 --> 00:47:02,480
to work right we don't want that to

1074
00:47:00,530 --> 00:47:05,120
happen we want this to be preserved and

1075
00:47:02,480 --> 00:47:07,519
so if we do that what we can do is

1076
00:47:05,119 --> 00:47:10,579
recognize the fact that actually let's

1077
00:47:07,519 --> 00:47:12,559
leave that in there right let's just

1078
00:47:10,579 --> 00:47:15,440
leave that in there don't update this

1079
00:47:12,559 --> 00:47:18,829
right don't update that at all

1080
00:47:15,440 --> 00:47:22,039
and don't do this right let it actually

1081
00:47:18,829 --> 00:47:25,819
advance over that this has two really

1082
00:47:22,039 --> 00:47:27,559
interesting benefits the first is the

1083
00:47:25,820 --> 00:47:29,150
fact that here well there's one there's

1084
00:47:27,559 --> 00:47:31,309
I guess there is one thing that has to

1085
00:47:29,150 --> 00:47:37,880
sort lightly get a little bit more

1086
00:47:31,309 --> 00:47:39,650
complicated well actually no it doesn't

1087
00:47:37,880 --> 00:47:42,530
have to do that now that I think about

1088
00:47:39,650 --> 00:47:44,450
it so actually this is kind of cool so

1089
00:47:42,530 --> 00:47:47,720
let me show you what happens here if we

1090
00:47:44,449 --> 00:47:49,939
do this if everybody always uses the

1091
00:47:47,719 --> 00:47:51,919
actual input that they're given as their

1092
00:47:49,940 --> 00:47:54,440
token value and that gets modified later

1093
00:47:51,920 --> 00:47:56,090
as we'll talk about in a second then

1094
00:47:54,440 --> 00:47:57,289
what you can see here is this part of

1095
00:47:56,090 --> 00:47:59,630
the process actually gets simpler

1096
00:47:57,289 --> 00:48:01,400
instead of everybody having to think

1097
00:47:59,630 --> 00:48:04,880
about how they're gonna set it now

1098
00:48:01,400 --> 00:48:07,570
literally nobody does so this is always

1099
00:48:04,880 --> 00:48:10,610
the code oops

1100
00:48:07,570 --> 00:48:13,100
this right here is now always the code

1101
00:48:10,610 --> 00:48:15,860
every time so no matter what happens

1102
00:48:13,099 --> 00:48:18,049
when we come in through here right no

1103
00:48:15,860 --> 00:48:20,030
matter what happens we always set the

1104
00:48:18,050 --> 00:48:22,580
size of the text to just be wherever we

1105
00:48:20,030 --> 00:48:24,440
ended up right so what however far we

1106
00:48:22,579 --> 00:48:28,069
advanced from the time that we started

1107
00:48:24,440 --> 00:48:30,380
right which is here we always end up

1108
00:48:28,070 --> 00:48:31,940
setting our count to be that much nice

1109
00:48:30,380 --> 00:48:34,940
and uniform really kind of cool right

1110
00:48:31,940 --> 00:48:37,519
and then what we do is in here when we

1111
00:48:34,940 --> 00:48:39,829
actually get the tokens and we go to say

1112
00:48:37,519 --> 00:48:43,429
let's produce sort of the processed

1113
00:48:39,829 --> 00:48:45,739
version of the token this is the point

1114
00:48:43,429 --> 00:48:47,779
at which we can do something about it

1115
00:48:45,739 --> 00:48:50,000
so in here when we get this string what

1116
00:48:47,780 --> 00:48:53,690
I can say is let's trim the quotes off

1117
00:48:50,000 --> 00:48:55,369
of the string so pretty simple right all

1118
00:48:53,690 --> 00:48:59,030
I have to do is say look if the token

1119
00:48:55,369 --> 00:49:01,849
and let me just flip back here so if the

1120
00:48:59,030 --> 00:49:04,880
token text has anything in it right so

1121
00:49:01,849 --> 00:49:05,239
if token texts count is great well it's

1122
00:49:04,880 --> 00:49:07,519
just

1123
00:49:05,239 --> 00:49:11,239
right you know if it's if it's not zero

1124
00:49:07,519 --> 00:49:14,920
right if there's something in the token

1125
00:49:11,239 --> 00:49:17,509
and the the very first thing in it

1126
00:49:14,920 --> 00:49:30,260
happens to be a quote care skip it

1127
00:49:17,510 --> 00:49:32,980
right make sense that trims the the

1128
00:49:30,260 --> 00:49:36,080
leading quote here is the trailing quote

1129
00:49:32,980 --> 00:49:38,599
same thing if token texts count still

1130
00:49:36,079 --> 00:49:44,049
has something in it then if the last

1131
00:49:38,599 --> 00:49:44,049
character is a quote skip it

1132
00:49:44,170 --> 00:49:50,960
right and so what this allows us to do

1133
00:49:48,380 --> 00:49:55,130
is this allows us to make a really

1134
00:49:50,960 --> 00:49:56,780
simple tokenizer two-stage process that

1135
00:49:55,130 --> 00:49:59,000
means that now there's no special

1136
00:49:56,780 --> 00:50:01,880
handling everybody just goes through

1137
00:49:59,000 --> 00:50:04,099
sees what's in their particular chunk

1138
00:50:01,880 --> 00:50:06,680
that they want to figure out how big it

1139
00:50:04,099 --> 00:50:08,779
is however much they ingested is how big

1140
00:50:06,679 --> 00:50:11,449
the token is always and then there's a

1141
00:50:08,780 --> 00:50:14,510
second stage that just goes through and

1142
00:50:11,449 --> 00:50:18,849
says look I'm gonna go through this and

1143
00:50:14,510 --> 00:50:22,790
I'm gonna go ahead and in fact I could

1144
00:50:18,849 --> 00:50:26,860
do this a little bit differently we will

1145
00:50:22,789 --> 00:50:28,820
always break here but we can make that

1146
00:50:26,860 --> 00:50:30,980
in the second stage

1147
00:50:28,820 --> 00:50:33,680
I will eat any token that's just white

1148
00:50:30,980 --> 00:50:35,240
space cuz I don't want that right and

1149
00:50:33,679 --> 00:50:38,239
then when I get an actual token I'll

1150
00:50:35,239 --> 00:50:40,309
return it and by the way if I look and

1151
00:50:38,239 --> 00:50:42,379
see that this thing is a token that

1152
00:50:40,309 --> 00:50:48,500
needs some kind of further processing I

1153
00:50:42,380 --> 00:50:50,930
will process it right and off you go so

1154
00:50:48,500 --> 00:50:53,840
that's this really nice two-stage design

1155
00:50:50,929 --> 00:50:55,819
for a tokenizer it pays some extra

1156
00:50:53,840 --> 00:50:57,800
dividends to I'll show you those right

1157
00:50:55,820 --> 00:50:59,860
here let's suppose that we wanted to

1158
00:50:57,800 --> 00:51:01,880
start doing error line number tracking

1159
00:50:59,860 --> 00:51:02,990
so you can see that we kind of set

1160
00:51:01,880 --> 00:51:04,940
ourselves up for this we have this

1161
00:51:02,989 --> 00:51:06,109
notion of a line number in there we have

1162
00:51:04,940 --> 00:51:09,050
this notion of tokenized

1163
00:51:06,110 --> 00:51:11,539
inside here we sort of say hey yeah

1164
00:51:09,050 --> 00:51:14,240
let's set that line number to one

1165
00:51:11,539 --> 00:51:17,329
because we're on the first line let's

1166
00:51:14,239 --> 00:51:18,709
set that filename to something because

1167
00:51:17,329 --> 00:51:19,789
we need to actually

1168
00:51:18,710 --> 00:51:22,190
know what the file name is actually

1169
00:51:19,789 --> 00:51:24,440
gonna be um and I might say I don't know

1170
00:51:22,190 --> 00:51:26,079
about the file name but probably let's

1171
00:51:24,440 --> 00:51:28,550
let's make the file name a string

1172
00:51:26,079 --> 00:51:30,380
probably right I think we want that to

1173
00:51:28,550 --> 00:51:35,300
be the case so we'd say something like

1174
00:51:30,380 --> 00:51:37,338
this so this is the file name that that

1175
00:51:35,300 --> 00:51:39,890
were parsing in terms of you know for

1176
00:51:37,338 --> 00:51:42,079
air reporting so when we tokenize the

1177
00:51:39,889 --> 00:51:43,969
input we would do it this way and I

1178
00:51:42,079 --> 00:51:45,858
don't know exactly how we want to do

1179
00:51:43,969 --> 00:51:48,649
that per se if we want to initialize

1180
00:51:45,858 --> 00:51:49,699
that or force people to do it but you

1181
00:51:48,650 --> 00:51:51,108
know it looks something like this

1182
00:51:49,699 --> 00:51:52,939
so in here we'd say all right there's

1183
00:51:51,108 --> 00:51:54,858
the file name that we're parsing we're

1184
00:51:52,940 --> 00:51:57,679
starting on line number one now if we

1185
00:51:54,858 --> 00:51:59,719
want to report those errors it becomes

1186
00:51:57,679 --> 00:52:01,699
really good we can actually be super

1187
00:51:59,719 --> 00:52:04,489
hardcore here and even say column number

1188
00:52:01,699 --> 00:52:07,279
right so if we if we really want to be

1189
00:52:04,489 --> 00:52:08,779
mr. fancy pants this is a parser that

1190
00:52:07,280 --> 00:52:11,420
people are actually now using in the

1191
00:52:08,780 --> 00:52:12,589
real world and in life and it produces

1192
00:52:11,420 --> 00:52:14,570
good error messages or something like

1193
00:52:12,588 --> 00:52:16,820
that we can even have column number Y

1194
00:52:14,570 --> 00:52:19,519
well take a look at what happens inside

1195
00:52:16,820 --> 00:52:21,380
here we say advanced cares every time we

1196
00:52:19,519 --> 00:52:23,750
do advanced cares count well guess what

1197
00:52:21,380 --> 00:52:26,210
that's the line number count not

1198
00:52:23,750 --> 00:52:27,739
particularly confusing also as far as I

1199
00:52:26,210 --> 00:52:31,358
know does advanced cares ever do

1200
00:52:27,739 --> 00:52:31,358
anything other than advanced cares one

1201
00:52:33,190 --> 00:52:41,179
there's a two here so it does

1202
00:52:37,699 --> 00:52:42,710
occasionally do too well that's fine all

1203
00:52:41,179 --> 00:52:43,669
right so anyway in advanced Kerris we

1204
00:52:42,710 --> 00:52:45,050
know that we're always advanced by

1205
00:52:43,670 --> 00:52:48,079
certain count that means that the

1206
00:52:45,050 --> 00:52:50,260
tokenize our column number right that we

1207
00:52:48,079 --> 00:52:53,569
we've got here is always gonna be

1208
00:52:50,260 --> 00:52:55,070
advanced by that much so it's pretty

1209
00:52:53,570 --> 00:52:57,230
easy to find out what the column number

1210
00:52:55,070 --> 00:52:58,760
is and furthermore every time we

1211
00:52:57,230 --> 00:53:00,349
generate a token we know that the line

1212
00:52:58,760 --> 00:53:02,960
number is always the tokenizer

1213
00:53:00,349 --> 00:53:05,838
line number it's actually than that and

1214
00:53:02,960 --> 00:53:08,210
the column number is just the tokenizer

1215
00:53:05,838 --> 00:53:09,799
column number right so we know the

1216
00:53:08,210 --> 00:53:11,389
column number always advances here all

1217
00:53:09,800 --> 00:53:13,220
we need to do now is know what the line

1218
00:53:11,389 --> 00:53:15,500
number is guess what we're parsing end

1219
00:53:13,219 --> 00:53:17,269
of lines now that makes it really really

1220
00:53:15,500 --> 00:53:18,889
really simple to do that because now all

1221
00:53:17,269 --> 00:53:20,719
we do is every time we see a new line we

1222
00:53:18,889 --> 00:53:22,159
reset the line number I'm sorry we

1223
00:53:20,719 --> 00:53:27,348
advanced the line number and we reset

1224
00:53:22,159 --> 00:53:29,118
the column number right now all of a

1225
00:53:27,349 --> 00:53:30,769
sudden we can actually do really robust

1226
00:53:29,119 --> 00:53:32,030
error messages where we actually say

1227
00:53:30,769 --> 00:53:34,730
exactly where the error message

1228
00:53:32,030 --> 00:53:36,590
came from which is pretty baller and so

1229
00:53:34,730 --> 00:53:39,110
on here for example where we do this out

1230
00:53:36,590 --> 00:53:43,460
F and we've got all this nonsense have

1231
00:53:39,110 --> 00:53:57,670
it happening in here by the way I'm not

1232
00:53:43,460 --> 00:54:02,420
sure why that's being passed it out F so

1233
00:53:57,670 --> 00:54:11,119
why is out F getting the file name in

1234
00:54:02,420 --> 00:54:14,800
the line number does anybody know why

1235
00:54:11,119 --> 00:54:19,519
that's happening I think this is not

1236
00:54:14,800 --> 00:54:21,530
correct I mean it should be error F if

1237
00:54:19,519 --> 00:54:33,679
it's getting those things is the thing

1238
00:54:21,530 --> 00:54:37,430
that seems bad because why would you be

1239
00:54:33,679 --> 00:54:42,169
pet well you know what I don't know I'm

1240
00:54:37,429 --> 00:54:44,029
not gonna criticize myself we'll just

1241
00:54:42,170 --> 00:54:47,510
leave it the way it is for now that's

1242
00:54:44,030 --> 00:54:50,210
fine but it's stupid and so what I'd

1243
00:54:47,510 --> 00:54:51,770
like to do is figure out why we were

1244
00:54:50,210 --> 00:54:55,820
doing that and do we actually use that

1245
00:54:51,769 --> 00:54:57,920
and if we do actually use that how so

1246
00:54:55,820 --> 00:54:59,600
let me take a look at where that's

1247
00:54:57,920 --> 00:55:02,000
actually happening so if I list

1248
00:54:59,599 --> 00:55:05,139
locations for out F I want to see like

1249
00:55:02,000 --> 00:55:07,579
who who's doing that and why

1250
00:55:05,139 --> 00:55:10,730
so when here we got our error messages

1251
00:55:07,579 --> 00:55:13,670
those are fine if you look at look on

1252
00:55:10,730 --> 00:55:20,090
here for example so that's that's doing

1253
00:55:13,670 --> 00:55:23,570
an error message but it's actually got

1254
00:55:20,090 --> 00:55:26,780
the source grid like that's that does

1255
00:55:23,570 --> 00:55:30,340
yeah that's not what we actually want

1256
00:55:26,780 --> 00:55:30,340
there so yeah I'm just looking at this

1257
00:55:37,309 --> 00:55:46,338
so I don't really know it looks to me

1258
00:55:41,039 --> 00:55:46,338
like a deaf shouldn't really have that

1259
00:55:47,719 --> 00:55:52,078
probably I mean I mean you could there's

1260
00:55:50,190 --> 00:55:57,269
ways in which I could see that being the

1261
00:55:52,079 --> 00:56:01,140
case but just I'm really torn okay so

1262
00:55:57,269 --> 00:56:07,320
let's let's say this let's let's let's

1263
00:56:01,139 --> 00:56:12,210
do this because these chunks say the

1264
00:56:07,320 --> 00:56:14,070
file and line number here we have to

1265
00:56:12,210 --> 00:56:17,280
imagine what would you be doing with

1266
00:56:14,070 --> 00:56:19,170
that file on line number right and do we

1267
00:56:17,280 --> 00:56:21,750
want that file on line number to

1268
00:56:19,170 --> 00:56:23,280
correspond to like the text file input

1269
00:56:21,750 --> 00:56:25,710
in the case where you're processing a

1270
00:56:23,280 --> 00:56:27,480
text file input or do we want that to

1271
00:56:25,710 --> 00:56:30,750
correspond to the piece of code that's

1272
00:56:27,480 --> 00:56:32,789
issuing the error message right and I

1273
00:56:30,750 --> 00:56:36,150
don't really know the answer to that

1274
00:56:32,789 --> 00:56:39,119
question I'm not sure and that's why

1275
00:56:36,150 --> 00:56:43,349
it's just a little bit Squinkie in this

1276
00:56:39,119 --> 00:56:46,140
case right I think what I'm gonna say is

1277
00:56:43,349 --> 00:56:48,960
that should just the out F should be

1278
00:56:46,139 --> 00:56:51,509
like a separate thing right the out F

1279
00:56:48,960 --> 00:56:53,699
should be doing it should be talking

1280
00:56:51,510 --> 00:56:55,589
about code errors so that you can jump

1281
00:56:53,699 --> 00:56:57,689
to the piece of the code that issued the

1282
00:56:55,588 --> 00:57:00,449
error in case you wanted to do that or

1283
00:56:57,690 --> 00:57:02,909
something I'm gonna say that that's more

1284
00:57:00,449 --> 00:57:06,710
what it is maybe I don't know sort of

1285
00:57:02,909 --> 00:57:06,710
kind of don't quote me on this

1286
00:57:11,349 --> 00:57:18,650
I'm really torn here as opposed

1287
00:57:14,719 --> 00:57:20,689
destroying the what the actual file was

1288
00:57:18,650 --> 00:57:22,820
that got loaded and that was generating

1289
00:57:20,690 --> 00:57:26,030
the error I'm just thinking that's

1290
00:57:22,820 --> 00:57:28,430
probably what you want but I really

1291
00:57:26,030 --> 00:57:30,140
don't know let's say that that was the

1292
00:57:28,429 --> 00:57:33,279
case and we can always change it later

1293
00:57:30,139 --> 00:57:37,009
if it turns out that it's stupid right

1294
00:57:33,280 --> 00:57:39,200
so I'm not gonna do this because that is

1295
00:57:37,010 --> 00:57:41,300
not what I want to do what I'm gonna do

1296
00:57:39,199 --> 00:57:46,339
instead is I'm going to call out F in

1297
00:57:41,300 --> 00:57:47,960
both cases right like so and I'm going

1298
00:57:46,340 --> 00:57:51,260
to actually put the error information

1299
00:57:47,960 --> 00:57:56,420
into here right so I'm going to say here

1300
00:57:51,260 --> 00:57:58,250
that this is the error in question and

1301
00:57:56,420 --> 00:58:00,200
then here comes the the rest of the

1302
00:57:58,250 --> 00:58:02,480
information oh and also we should put

1303
00:58:00,199 --> 00:58:05,719
print out what that token was in the

1304
00:58:02,480 --> 00:58:09,590
case where there is a token as a

1305
00:58:05,719 --> 00:58:11,209
separate issue right okay so in here

1306
00:58:09,590 --> 00:58:13,250
what I want to do is say well there's

1307
00:58:11,210 --> 00:58:16,280
some token in here that's the token that

1308
00:58:13,250 --> 00:58:18,650
we want to record as being the error as

1309
00:58:16,280 --> 00:58:21,290
well and I'll quote that so you can you

1310
00:58:18,650 --> 00:58:23,720
know see what it was and then there's

1311
00:58:21,289 --> 00:58:26,179
the error message that you actually have

1312
00:58:23,719 --> 00:58:28,789
and that'll go in there I don't know to

1313
00:58:26,179 --> 00:58:30,259
what extent this does carriage turns or

1314
00:58:28,789 --> 00:58:31,900
anything like that so we'll have to kind

1315
00:58:30,260 --> 00:58:35,540
of talk about that a little bit later

1316
00:58:31,900 --> 00:58:37,940
and I guess that's because it's

1317
00:58:35,539 --> 00:58:41,659
streaming I guess this would probably

1318
00:58:37,940 --> 00:58:43,519
need that as well I want to say I'm not

1319
00:58:41,659 --> 00:58:46,309
100% sure about that but you know we'll

1320
00:58:43,519 --> 00:58:47,960
just say that that's true so this would

1321
00:58:46,309 --> 00:58:49,789
be how we would have to make that

1322
00:58:47,960 --> 00:58:51,530
formatting work right in order for

1323
00:58:49,789 --> 00:58:54,529
everything to work okay and so we here

1324
00:58:51,530 --> 00:58:58,790
we would pass the token eyes sorry the

1325
00:58:54,530 --> 00:59:01,010
on token file name the on token line

1326
00:58:58,789 --> 00:59:03,349
number and the on token column number

1327
00:59:01,010 --> 00:59:05,750
right so that would give us those three

1328
00:59:03,349 --> 00:59:08,480
pieces of information so we would just

1329
00:59:05,750 --> 00:59:10,250
be able to print those out that's

1330
00:59:08,480 --> 00:59:12,199
necessary and then finally for the

1331
00:59:10,250 --> 00:59:15,170
actual content of the token we would

1332
00:59:12,199 --> 00:59:16,759
just pass in its text field so that

1333
00:59:15,170 --> 00:59:20,230
gives us error reporting pretty cleanly

1334
00:59:16,760 --> 00:59:23,360
in here where we don't actually have the

1335
00:59:20,230 --> 00:59:25,369
you know a specific token we still could

1336
00:59:23,360 --> 00:59:27,980
print out a token if we wanted to

1337
00:59:25,369 --> 00:59:31,250
and I'll show you how that is the case

1338
00:59:27,980 --> 00:59:32,719
so let's suppose instead here we were to

1339
00:59:31,250 --> 00:59:34,460
you know want to print out something

1340
00:59:32,719 --> 00:59:36,739
similar to this so we want to print out

1341
00:59:34,460 --> 00:59:39,260
something that looks like that but now

1342
00:59:36,739 --> 00:59:41,329
we don't have the on token that's okay

1343
00:59:39,260 --> 00:59:44,810
because we could make our own on token

1344
00:59:41,329 --> 00:59:46,819
right that if we wanted to we could

1345
00:59:44,809 --> 00:59:48,139
pretty easily do that and the way that

1346
00:59:46,820 --> 00:59:50,900
we would do that is we'd say well look

1347
00:59:48,139 --> 00:59:54,710
we know that the token neither can still

1348
00:59:50,900 --> 00:59:58,400
get us a token right so what we could do

1349
00:59:54,710 --> 01:00:00,710
is just actually like peek the token

1350
00:59:58,400 --> 01:00:03,880
like get whatever the next token would

1351
01:00:00,710 --> 01:00:07,639
have been if we wanted to do that and

1352
01:00:03,880 --> 01:00:09,980
use that so for example if we wanted to

1353
01:00:07,639 --> 01:00:12,199
in here in a handmade tokenizer

1354
01:00:09,980 --> 01:00:14,480
you can kind of see how we've got

1355
01:00:12,199 --> 01:00:16,730
everything stored here if we wanted to

1356
01:00:14,480 --> 01:00:18,800
we can pretty trivially do a thing where

1357
01:00:16,730 --> 01:00:21,050
we get the next token without actually

1358
01:00:18,800 --> 01:00:24,140
pulling it off of the input stream and

1359
01:00:21,050 --> 01:00:26,240
there's a lot of ways we can do that the

1360
01:00:24,139 --> 01:00:29,210
easiest way by far to do it if we want

1361
01:00:26,239 --> 01:00:32,779
to have a peek token call or a peek

1362
01:00:29,210 --> 01:00:35,090
token raw either way it's really pretty

1363
01:00:32,780 --> 01:00:44,480
straightforward all you would do is say

1364
01:00:35,090 --> 01:00:51,550
look I want to do keep token raw hey

1365
01:00:44,480 --> 01:00:51,550
save the state store the state

1366
01:00:57,320 --> 01:01:02,160
right pretty straightforward

1367
01:01:00,780 --> 01:01:04,860
so all you have to do there say hey

1368
01:01:02,159 --> 01:01:06,989
let's get that token now there's a

1369
01:01:04,860 --> 01:01:11,250
reason why you might not want to do this

1370
01:01:06,989 --> 01:01:14,549
and it's worth noting we don't have the

1371
01:01:11,250 --> 01:01:17,849
problem currently but it's really worth

1372
01:01:14,550 --> 01:01:19,950
knowing that this could be bad so if you

1373
01:01:17,849 --> 01:01:22,920
were actually to call peak token wrong

1374
01:01:19,949 --> 01:01:24,299
like this and I'll support this call

1375
01:01:22,920 --> 01:01:25,470
because I mind as well but I don't know

1376
01:01:24,300 --> 01:01:29,039
that I'm actually gonna use it and I'll

1377
01:01:25,469 --> 01:01:31,739
say why in a second so if we wanted to

1378
01:01:29,039 --> 01:01:33,599
we could call peak token wrong so I

1379
01:01:31,739 --> 01:01:37,649
could just say look give me whatever the

1380
01:01:33,599 --> 01:01:40,049
next token is off of this tokenizer

1381
01:01:37,650 --> 01:01:43,050
and then I'll display that as the on

1382
01:01:40,050 --> 01:01:45,090
token there are some reasons why you

1383
01:01:43,050 --> 01:01:47,250
probably don't want to do that

1384
01:01:45,090 --> 01:01:50,579
and the reason why you probably don't

1385
01:01:47,250 --> 01:01:53,639
want to do it is just because look if

1386
01:01:50,579 --> 01:01:56,849
you do that you're definitely in danger

1387
01:01:53,639 --> 01:01:59,460
of re-entering your own code so let's

1388
01:01:56,849 --> 01:02:01,980
say that we have something in here that

1389
01:01:59,460 --> 01:02:03,960
generates an error message the peak

1390
01:02:01,980 --> 01:02:06,059
token call could generate an error

1391
01:02:03,960 --> 01:02:08,369
message which then causes this code to

1392
01:02:06,059 --> 01:02:10,049
loop infinitely as it keeps calling peak

1393
01:02:08,369 --> 01:02:13,829
token and keeps getting an error message

1394
01:02:10,050 --> 01:02:16,170
right so there's something to be said

1395
01:02:13,829 --> 01:02:18,179
for not really doing peak token that way

1396
01:02:16,170 --> 01:02:19,769
but for our particular purposes it's

1397
01:02:18,179 --> 01:02:24,299
really not a big deal so I'm just gonna

1398
01:02:19,769 --> 01:02:27,179
say screw it it's fine right so off we

1399
01:02:24,300 --> 01:02:28,800
go and it's just it's just worth noting

1400
01:02:27,179 --> 01:02:30,599
that there's other ways you might want

1401
01:02:28,800 --> 01:02:33,300
to do that that it depends on what

1402
01:02:30,599 --> 01:02:34,799
you're doing obviously but off you go so

1403
01:02:33,300 --> 01:02:36,780
this also means that we probably just

1404
01:02:34,800 --> 01:02:38,280
want to make one of these just to make

1405
01:02:36,780 --> 01:02:39,960
it a little bit clearer what's going on

1406
01:02:38,280 --> 01:02:42,080
here we probably want to do one of these

1407
01:02:39,960 --> 01:02:46,619
where we just pass the arg whisk right

1408
01:02:42,079 --> 01:02:49,670
so something like this and then this is

1409
01:02:46,619 --> 01:02:55,949
really just the same call in all cases

1410
01:02:49,670 --> 01:02:58,079
oops so there's the you know the actual

1411
01:02:55,949 --> 01:03:00,449
call that we're talking about and then

1412
01:02:58,079 --> 01:03:02,460
in these cases it's just a question of

1413
01:03:00,449 --> 01:03:04,710
how do you actually fulfill the

1414
01:03:02,460 --> 01:03:07,260
parameters in question do you get them

1415
01:03:04,710 --> 01:03:09,179
from the caller like in this case

1416
01:03:07,260 --> 01:03:11,369
or do you generate one of them

1417
01:03:09,179 --> 01:03:13,559
yourselves like in this case but this

1418
01:03:11,369 --> 01:03:15,630
way we're now being more uniform about

1419
01:03:13,559 --> 01:03:17,519
the way it's being called and so that

1420
01:03:15,630 --> 01:03:20,039
way if we modify the way that this works

1421
01:03:17,519 --> 01:03:21,900
in the future both of our errors will

1422
01:03:20,039 --> 01:03:24,509
automatically inherit the the changes

1423
01:03:21,900 --> 01:03:25,680
without having to be sort of kept in

1424
01:03:24,510 --> 01:03:27,690
sync or anything like that so that's

1425
01:03:25,679 --> 01:03:30,359
just a little bit more pleasant in that

1426
01:03:27,690 --> 01:03:33,150
regard all right so if we look at what

1427
01:03:30,360 --> 01:03:36,240
happens here we can see that we've got

1428
01:03:33,150 --> 01:03:38,940
just a one slight error where we didn't

1429
01:03:36,239 --> 01:03:42,409
copy the change that we made in the CPP

1430
01:03:38,940 --> 01:03:45,179
file up to the H file gotta love that C

1431
01:03:42,409 --> 01:03:49,859
nonsense there so anyway just put it in

1432
01:03:45,179 --> 01:03:52,019
here you can see it's the same thing it

1433
01:03:49,860 --> 01:03:54,119
just takes a filename now so everywhere

1434
01:03:52,019 --> 01:03:56,550
that we were tokenizing we can now pass

1435
01:03:54,119 --> 01:03:57,900
an optional filename and so we should go

1436
01:03:56,550 --> 01:03:59,640
ahead and do that pretty much everywhere

1437
01:03:57,900 --> 01:04:05,369
because we like the error reporting to

1438
01:03:59,639 --> 01:04:07,549
be good there oops I would I do what did

1439
01:04:05,369 --> 01:04:07,550
I do

1440
01:04:08,030 --> 01:04:13,350
it's got semicolon

1441
01:04:11,070 --> 01:04:15,809
so here where we've got like file buffer

1442
01:04:13,349 --> 01:04:18,118
what we need to do is is get the actual

1443
01:04:15,809 --> 01:04:20,719
file name in there and so if we take a

1444
01:04:18,119 --> 01:04:25,170
look back at our platform layer I

1445
01:04:20,719 --> 01:04:27,319
believe we've got the what does that

1446
01:04:25,170 --> 01:04:32,880
called

1447
01:04:27,320 --> 01:04:34,500
platform file info so inside platform

1448
01:04:32,880 --> 01:04:37,500
file info you can see here we've got

1449
01:04:34,500 --> 01:04:40,170
this base name pointer here so I believe

1450
01:04:37,500 --> 01:04:42,480
that's all we need to pass for like what

1451
01:04:40,170 --> 01:04:44,970
the name of the file is so it doesn't

1452
01:04:42,480 --> 01:04:47,608
include a path or extension it's kind of

1453
01:04:44,969 --> 01:04:52,618
a little bit weird that we're doing that

1454
01:04:47,608 --> 01:04:54,389
at the moment but guess that was just

1455
01:04:52,619 --> 01:05:00,690
our convention because we were kind of

1456
01:04:54,389 --> 01:05:03,269
using that as a thing before probably

1457
01:05:00,690 --> 01:05:10,829
want to put the extension back in there

1458
01:05:03,269 --> 01:05:13,230
honestly I yeah that's not great but

1459
01:05:10,829 --> 01:05:15,029
anyway at the moment anyway you know

1460
01:05:13,230 --> 01:05:18,170
that's fine so that's going to be wrap

1461
01:05:15,030 --> 01:05:20,900
base name off of that file foe

1462
01:05:18,170 --> 01:05:22,369
and then presumably there was some other

1463
01:05:20,900 --> 01:05:25,220
places that were tokenizing

1464
01:05:22,369 --> 01:05:28,910
as well was that the only tokenizer

1465
01:05:25,219 --> 01:05:31,250
maybe that's the only one all right

1466
01:05:28,909 --> 01:05:33,139
that's the only one so now we'll get

1467
01:05:31,250 --> 01:05:35,480
those error messages will actually tell

1468
01:05:33,139 --> 01:05:37,518
us exactly where we're getting the error

1469
01:05:35,480 --> 01:05:40,429
and that's a lot better right because

1470
01:05:37,518 --> 01:05:42,229
that way if we look at you know problems

1471
01:05:40,429 --> 01:05:45,169
that we get when we're done with the

1472
01:05:42,230 --> 01:05:47,960
export that'll allow us to know what the

1473
01:05:45,170 --> 01:05:49,778
heck happened right which is kind of

1474
01:05:47,960 --> 01:05:52,490
something that we want to be able to do

1475
01:05:49,778 --> 01:05:54,739
all right so now let's move forward from

1476
01:05:52,489 --> 01:05:57,709
there and we also kind of need some ways

1477
01:05:54,739 --> 01:05:58,909
of maybe printing those out and showing

1478
01:05:57,710 --> 01:06:00,409
those a little bit more clearly right

1479
01:05:58,909 --> 01:06:02,659
now we can look at them on any given

1480
01:06:00,409 --> 01:06:04,190
asset if it had an error when it was

1481
01:06:02,659 --> 01:06:06,048
imported we can see that but that's

1482
01:06:04,190 --> 01:06:07,730
really the only way we can't say after

1483
01:06:06,048 --> 01:06:10,038
we do an import show me all the errors I

1484
01:06:07,730 --> 01:06:12,019
don't think that's currently something

1485
01:06:10,039 --> 01:06:13,970
that works and so we kind of want that

1486
01:06:12,018 --> 01:06:16,699
to be the case so like in here you know

1487
01:06:13,969 --> 01:06:18,919
we would like to be able to ask at the

1488
01:06:16,699 --> 01:06:20,210
end of things say show me all the errors

1489
01:06:18,920 --> 01:06:21,409
that happened during this import so

1490
01:06:20,210 --> 01:06:24,048
that's probably something we want to put

1491
01:06:21,409 --> 01:06:26,210
in here as well into some kind of buffer

1492
01:06:24,048 --> 01:06:27,829
that we could just view the errors so

1493
01:06:26,210 --> 01:06:29,568
that's just another thing that would be

1494
01:06:27,829 --> 01:06:30,220
nice to be able to do something to think

1495
01:06:29,568 --> 01:06:33,739
about

1496
01:06:30,219 --> 01:06:34,969
so that's pretty much it now we need to

1497
01:06:33,739 --> 01:06:37,459
do is talk about how we're gonna

1498
01:06:34,969 --> 01:06:39,889
actually do that you know writing

1499
01:06:37,460 --> 01:06:42,588
process alongside or reading process so

1500
01:06:39,889 --> 01:06:44,210
when we call parse hht here and we're

1501
01:06:42,588 --> 01:06:47,568
reading through it right this is the

1502
01:06:44,210 --> 01:06:50,690
function that would actually need to do

1503
01:06:47,568 --> 01:06:53,239
that sort of you know copy and what you

1504
01:06:50,690 --> 01:06:56,210
can see is as this is is plying through

1505
01:06:53,239 --> 01:06:58,298
here parse top-level block is one gonna

1506
01:06:56,210 --> 01:07:00,920
want to do its own copying is necessary

1507
01:06:58,298 --> 01:07:03,349
but any other token that we're getting

1508
01:07:00,920 --> 01:07:06,650
here we want to kind of copy it to the

1509
01:07:03,349 --> 01:07:10,849
the output right so what we'd rather do

1510
01:07:06,650 --> 01:07:13,670
is say anytime we get a top-level token

1511
01:07:10,849 --> 01:07:17,420
we want to be able to put sort of

1512
01:07:13,670 --> 01:07:19,099
incidentals and move them from the input

1513
01:07:17,420 --> 01:07:22,159
to the output and we don't really want

1514
01:07:19,099 --> 01:07:23,838
to fuss with them at all and so we

1515
01:07:22,159 --> 01:07:25,608
should probably not quite do that piece

1516
01:07:23,838 --> 01:07:27,380
of code yet and the reason I said is cuz

1517
01:07:25,608 --> 01:07:29,808
it's just not very complicated like all

1518
01:07:27,380 --> 01:07:31,940
it would be is it get token raw check to

1519
01:07:29,809 --> 01:07:34,100
see which type it was if it's one of the

1520
01:07:31,940 --> 01:07:35,900
we process if it's one of the things

1521
01:07:34,099 --> 01:07:37,699
that we want to just copy like comment

1522
01:07:35,900 --> 01:07:41,329
or whitespace we do so and then we

1523
01:07:37,699 --> 01:07:43,730
process the rest exact same way we may

1524
01:07:41,329 --> 01:07:46,400
not want to quite do the input to output

1525
01:07:43,730 --> 01:07:48,590
copy exactly that way and because of

1526
01:07:46,400 --> 01:07:50,510
that is why I sing I kind of want to

1527
01:07:48,590 --> 01:07:52,820
look up at something more complicated

1528
01:07:50,510 --> 01:07:56,720
first to see how we might want to do

1529
01:07:52,820 --> 01:07:58,850
that so if we come through here and we

1530
01:07:56,719 --> 01:08:00,529
look at parse top level block and pretty

1531
01:07:58,849 --> 01:08:01,940
much that's that does like all of the

1532
01:08:00,530 --> 01:08:04,340
parsing right this pretty much does

1533
01:08:01,940 --> 01:08:06,500
everything if you look at how this is

1534
01:08:04,340 --> 01:08:08,079
grabbing the you know it's just kind of

1535
01:08:06,500 --> 01:08:11,480
lemon grabbing off of the data they're

1536
01:08:08,079 --> 01:08:13,819
just pulling things off one at a time we

1537
01:08:11,480 --> 01:08:15,500
probably just looking at it right we

1538
01:08:13,820 --> 01:08:18,739
probably want to do a thing that just

1539
01:08:15,500 --> 01:08:21,050
says look at certain points in the input

1540
01:08:18,739 --> 01:08:25,639
stream just copy everything that you saw

1541
01:08:21,050 --> 01:08:26,960
because it's all fine right and so we

1542
01:08:25,640 --> 01:08:31,190
just want to put a thing in here that

1543
01:08:26,960 --> 01:08:33,680
says yeah just get all of that stuff

1544
01:08:31,189 --> 01:08:36,889
that you've got like get all of that

1545
01:08:33,680 --> 01:08:42,560
stuff you've seen so far it's all fine

1546
01:08:36,890 --> 01:08:46,220
so copy it right that's probably more

1547
01:08:42,560 --> 01:08:48,190
like what we want to do and so I don't

1548
01:08:46,220 --> 01:08:52,850
think we really want to do something

1549
01:08:48,189 --> 01:08:54,409
where we're doing a token by token copy

1550
01:08:52,850 --> 01:08:55,940
that way

1551
01:08:54,409 --> 01:08:58,130
and so what I'd rather do here is say

1552
01:08:55,939 --> 01:09:01,460
all right look when we actually get down

1553
01:08:58,130 --> 01:09:06,260
into here by the time we've gotten to

1554
01:09:01,460 --> 01:09:18,230
this I guess I want to say something

1555
01:09:06,260 --> 01:09:23,989
like I think I think I just want to say

1556
01:09:18,229 --> 01:09:26,409
like okay if you got the open brace just

1557
01:09:23,989 --> 01:09:26,409
like

1558
01:09:33,088 --> 01:09:40,479
this you know I'm saying like take

1559
01:09:38,679 --> 01:09:41,949
everything up to and maybe you know I

1560
01:09:40,479 --> 01:09:55,479
don't even need that I could just be

1561
01:09:41,948 --> 01:09:58,448
like this and so I could just say or you

1562
01:09:55,479 --> 01:10:00,610
know up to and including maybe so like

1563
01:09:58,448 --> 01:10:03,158
do this whole thing right so this would

1564
01:10:00,609 --> 01:10:05,198
just basically say look everything just

1565
01:10:03,158 --> 01:10:07,569
copy everything up to the open brace so

1566
01:10:05,198 --> 01:10:10,839
far is all good we haven't had to make

1567
01:10:07,569 --> 01:10:14,469
any changes to it so just copy all that

1568
01:10:10,840 --> 01:10:16,179
right and then we can look at the

1569
01:10:14,469 --> 01:10:21,010
parsing here and say okay we're gonna

1570
01:10:16,179 --> 01:10:23,109
get all of this stuff out right and

1571
01:10:21,010 --> 01:10:25,900
we're gonna have there's gonna be like a

1572
01:10:23,109 --> 01:10:29,918
new set of stuff that we need to sort of

1573
01:10:25,899 --> 01:10:34,958
output here and we should try to figure

1574
01:10:29,918 --> 01:10:39,189
out whether that stuff needs to come in

1575
01:10:34,958 --> 01:10:40,809
probably like line by line right and so

1576
01:10:39,189 --> 01:10:43,209
the way I want to do that is say alright

1577
01:10:40,809 --> 01:10:44,529
there's one thing that we haven't put in

1578
01:10:43,208 --> 01:10:47,229
here that we need to put in here and

1579
01:10:44,529 --> 01:10:50,349
that's these markup points so let's

1580
01:10:47,229 --> 01:10:55,059
let's try to put those in so that we

1581
01:10:50,349 --> 01:11:00,429
have the full picture pretty sure that's

1582
01:10:55,059 --> 01:11:03,729
the only thing that we edit right is

1583
01:11:00,429 --> 01:11:05,050
alignment points I mean we got tags so

1584
01:11:03,729 --> 01:11:08,939
we can look at week and if there's

1585
01:11:05,050 --> 01:11:08,939
potentially but

1586
01:11:13,310 --> 01:11:20,820
so here you go with haja line point type

1587
01:11:16,890 --> 01:11:23,850
rent and HSA line point if I look at a

1588
01:11:20,819 --> 01:11:27,049
bitmap that's all there is like dim and

1589
01:11:23,850 --> 01:11:31,380
Orick dim are processing based things so

1590
01:11:27,050 --> 01:11:34,020
it's really just these two I would say

1591
01:11:31,380 --> 01:11:35,940
this this array and so if that's all

1592
01:11:34,020 --> 01:11:41,640
we're doing then we really all we have

1593
01:11:35,939 --> 01:11:44,279
to do is is output these right each of

1594
01:11:41,640 --> 01:11:52,950
those just has to kind of be specified

1595
01:11:44,279 --> 01:11:55,130
and the size and the P percent probably

1596
01:11:52,949 --> 01:12:03,149
we want to just represent them as their

1597
01:11:55,130 --> 01:12:06,930
16-bit versions we could represent them

1598
01:12:03,149 --> 01:12:08,309
as f/32 I don't know I think I kind of

1599
01:12:06,930 --> 01:12:10,530
just leaned towards just keeping them as

1600
01:12:08,310 --> 01:12:13,350
whole numbers cuz I don't see us ever

1601
01:12:10,529 --> 01:12:14,460
editing these in text really because

1602
01:12:13,350 --> 01:12:16,880
we're always gonna use the editor so we

1603
01:12:14,460 --> 01:12:21,750
just replicate the 16-bit value about

1604
01:12:16,880 --> 01:12:23,760
seems fine maybe possibly probably I'm

1605
01:12:21,750 --> 01:12:25,380
not sure we can think about that later

1606
01:12:23,760 --> 01:12:31,170
but for now I think I'm gonna say that's

1607
01:12:25,380 --> 01:12:34,140
how that goes yeah probably should so

1608
01:12:31,170 --> 01:12:36,899
what I want to do is say look if the

1609
01:12:34,140 --> 01:12:40,410
token is a line then that's going to be

1610
01:12:36,899 --> 01:12:43,500
in a line point statement and the align

1611
01:12:40,409 --> 01:12:47,220
point statements will probably just go

1612
01:12:43,500 --> 01:12:48,390
like 0 through whatever and I don't know

1613
01:12:47,220 --> 01:12:49,949
how we want to specify that but we get

1614
01:12:48,390 --> 01:12:53,670
to say like this particular line point

1615
01:12:49,949 --> 01:12:55,349
like a line point 0 is this now an open

1616
01:12:53,670 --> 01:12:57,810
question is do we care about preserving

1617
01:12:55,350 --> 01:12:59,310
the actual indices themselves meaning is

1618
01:12:57,810 --> 01:13:01,230
there any reason to say like a line

1619
01:12:59,310 --> 01:13:02,930
point zero stays aligned point zero and

1620
01:13:01,229 --> 01:13:07,109
a line point three is a line point three

1621
01:13:02,930 --> 01:13:09,030
or should we just condense them down as

1622
01:13:07,109 --> 01:13:11,489
we remove things I'm gonna say let's

1623
01:13:09,029 --> 01:13:13,319
just leave them sparse because I don't

1624
01:13:11,489 --> 01:13:15,000
know how we might want to do that in the

1625
01:13:13,319 --> 01:13:17,219
future you know I don't I don't know

1626
01:13:15,000 --> 01:13:19,020
what we want to do there so I'm gonna go

1627
01:13:17,220 --> 01:13:21,449
ahead and say that like a line can

1628
01:13:19,020 --> 01:13:25,650
actually have like a bracket syntax or

1629
01:13:21,449 --> 01:13:26,429
something maybe on it that allows us to

1630
01:13:25,649 --> 01:13:31,460
specify

1631
01:13:26,430 --> 01:13:33,780
what it is right and you know again

1632
01:13:31,460 --> 01:13:35,880
don't know maybe we should just use a

1633
01:13:33,779 --> 01:13:37,679
parenthesis but we're using parents or

1634
01:13:35,880 --> 01:13:41,340
different values so I might say let's

1635
01:13:37,680 --> 01:13:44,010
not do that and let's actually say that

1636
01:13:41,340 --> 01:13:45,710
we'll do do it this way so we'll say

1637
01:13:44,010 --> 01:13:51,270
that there's gonna be an open bracket

1638
01:13:45,710 --> 01:13:54,659
poops and a closed brackets and then

1639
01:13:51,270 --> 01:13:55,620
we'll actually get you know an index out

1640
01:13:54,659 --> 01:13:59,340
of it

1641
01:13:55,619 --> 01:13:59,849
so we'll also require a number to come

1642
01:13:59,340 --> 01:14:04,110
out of there

1643
01:13:59,850 --> 01:14:06,510
right so we'll get all those will

1644
01:14:04,109 --> 01:14:08,189
require an equal sign because you're

1645
01:14:06,510 --> 01:14:12,480
gonna have to assign this particular

1646
01:14:08,189 --> 01:14:15,889
line point to something right and then

1647
01:14:12,479 --> 01:14:18,329
we will look at how we want this to be

1648
01:14:15,890 --> 01:14:20,910
structured and again I think we just

1649
01:14:18,329 --> 01:14:25,559
want this to be 100% rigid I don't think

1650
01:14:20,909 --> 01:14:29,539
there should be any way to really modify

1651
01:14:25,560 --> 01:14:29,539
it so it's gonna be these three things

1652
01:14:30,920 --> 01:14:36,449
P percent size and then there's gonna be

1653
01:14:34,079 --> 01:14:47,279
the like name of the thing and whether

1654
01:14:36,449 --> 01:14:48,809
it goes to the parent or not right so I

1655
01:14:47,279 --> 01:14:53,880
don't really know what I want the syntax

1656
01:14:48,810 --> 01:14:57,750
is that to be let's think about it so

1657
01:14:53,880 --> 01:15:00,779
inside the hht file it would look

1658
01:14:57,750 --> 01:15:05,939
something like this so we'd say align

1659
01:15:00,779 --> 01:15:09,779
point 0 is supposed to have a P percent

1660
01:15:05,939 --> 01:15:10,979
so you know P percent a size you know

1661
01:15:09,779 --> 01:15:13,920
and I mean if we really wanted it to

1662
01:15:10,979 --> 01:15:15,449
look like C it would be the P percent

1663
01:15:13,920 --> 01:15:19,440
would look like this the size would look

1664
01:15:15,449 --> 01:15:25,340
like that and then the the type would be

1665
01:15:19,439 --> 01:15:29,219
here so you know like like that right

1666
01:15:25,340 --> 01:15:30,840
and if it was HH align to parent it

1667
01:15:29,220 --> 01:15:34,260
would look like that

1668
01:15:30,840 --> 01:15:39,840
and in here for the pay percent we would

1669
01:15:34,260 --> 01:15:47,369
specify I don't know the two values

1670
01:15:39,840 --> 01:15:49,289
right so that would be sort of the way

1671
01:15:47,369 --> 01:15:51,390
that it would look if it were maximally

1672
01:15:49,289 --> 01:15:55,710
expanded to look exactly like it would

1673
01:15:51,390 --> 01:15:59,930
in C++ right now the braces are not

1674
01:15:55,710 --> 01:16:02,699
necessary right so we could just do this

1675
01:15:59,930 --> 01:16:05,250
certainly if we wanted to and the HHA

1676
01:16:02,699 --> 01:16:06,510
line is also not necessary because we

1677
01:16:05,250 --> 01:16:07,619
know that that's the only thing that be

1678
01:16:06,510 --> 01:16:11,369
read and the only reason we have to do

1679
01:16:07,619 --> 01:16:15,149
that sort of stuff and C++ C++ you know

1680
01:16:11,369 --> 01:16:17,460
is is divine designed by three frogs and

1681
01:16:15,149 --> 01:16:18,869
they just let as many tree frogs jump

1682
01:16:17,460 --> 01:16:20,460
all over a keyboard as possible and then

1683
01:16:18,869 --> 01:16:23,159
they call that the new specification so

1684
01:16:20,460 --> 01:16:25,439
you know in a real language you wouldn't

1685
01:16:23,159 --> 01:16:27,899
have to use the prefix because it would

1686
01:16:25,439 --> 01:16:29,369
know that inside an assignment

1687
01:16:27,899 --> 01:16:32,849
expression it was the thing that you

1688
01:16:29,369 --> 01:16:33,899
were signing it to and off you we go to

1689
01:16:32,850 --> 01:16:34,980
be fair they tried to do some of that

1690
01:16:33,899 --> 01:16:37,739
with namespaces but of course they

1691
01:16:34,979 --> 01:16:39,149
screwed it up anyway uh let's go ahead

1692
01:16:37,739 --> 01:16:40,319
and look at how this looks you know we

1693
01:16:39,149 --> 01:16:42,659
could do something like that and then

1694
01:16:40,319 --> 01:16:44,460
it's pretty close to C so it looks

1695
01:16:42,659 --> 01:16:47,159
basically the same as it would look if

1696
01:16:44,460 --> 01:16:51,029
you were writing it and see but it's a

1697
01:16:47,159 --> 01:16:54,779
little less verbose doesn't have as many

1698
01:16:51,029 --> 01:16:57,399
you know sort of arbitrary constructs in

1699
01:16:54,779 --> 01:16:59,569
it that are you know sitting around

1700
01:16:57,399 --> 01:17:02,829
so if we were going to do this what we

1701
01:16:59,569 --> 01:17:07,429
would say is okay there's a tokenizer

1702
01:17:02,829 --> 01:17:16,960
requirement that we get a number of

1703
01:17:07,430 --> 01:17:20,329
comma a number comma a number of comma

1704
01:17:16,960 --> 01:17:23,480
and then after that we are going to get

1705
01:17:20,329 --> 01:17:26,479
an identifier now after the identifier

1706
01:17:23,479 --> 01:17:29,509
we don't necessarily know if we're going

1707
01:17:26,479 --> 01:17:33,369
to get a semicolon or not right we don't

1708
01:17:29,510 --> 01:17:37,190
know what the next thing is going to be

1709
01:17:33,369 --> 01:17:38,930
so what we need to do is we need to test

1710
01:17:37,189 --> 01:17:39,409
to see whether or not that would be the

1711
01:17:38,930 --> 01:17:42,350
case

1712
01:17:39,409 --> 01:17:44,479
before going any further and here's

1713
01:17:42,350 --> 01:17:48,500
where this sort of thing becomes a

1714
01:17:44,479 --> 01:17:50,449
little bit more Squinkie there because

1715
01:17:48,500 --> 01:17:52,939
it means that we would have to use a

1716
01:17:50,449 --> 01:17:54,859
peak token here in order to see whether

1717
01:17:52,939 --> 01:17:57,829
or not the next thing was a semicolon

1718
01:17:54,859 --> 01:18:00,889
because if it was then we would need to

1719
01:17:57,829 --> 01:18:05,390
not parse it and let the the code down

1720
01:18:00,890 --> 01:18:08,030
here below parse it right and to be

1721
01:18:05,390 --> 01:18:12,050
honest I don't know how the tags list is

1722
01:18:08,029 --> 01:18:15,289
actually doing that so if you go up to

1723
01:18:12,050 --> 01:18:23,720
the tag list and you look at how the tag

1724
01:18:15,289 --> 01:18:27,050
list is parsing itself right it looks

1725
01:18:23,720 --> 01:18:30,409
like I see how that works so well no I

1726
01:18:27,050 --> 01:18:32,300
don't so it's not really working

1727
01:18:30,409 --> 01:18:33,949
properly in here right this this really

1728
01:18:32,300 --> 01:18:36,170
does need to be a peak token right

1729
01:18:33,949 --> 01:18:38,119
because if it wasn't a peak token then

1730
01:18:36,170 --> 01:18:40,699
it wouldn't leave the tokenizer in state

1731
01:18:38,119 --> 01:18:42,559
that would actually work so I'm pretty

1732
01:18:40,699 --> 01:18:45,590
sure that this actually should probably

1733
01:18:42,560 --> 01:18:47,510
you know have been written that way in

1734
01:18:45,590 --> 01:18:48,890
the first place so so I might go ahead

1735
01:18:47,510 --> 01:18:49,850
and say all right let's say we're going

1736
01:18:48,890 --> 01:18:53,390
to use peak token

1737
01:18:49,850 --> 01:19:00,440
so here I'll peak token and I'll just

1738
01:18:53,390 --> 01:19:03,680
say all right you know if the token

1739
01:19:00,439 --> 01:19:05,389
that's coming next and you know here's

1740
01:19:03,680 --> 01:19:07,539
another question how did optional token

1741
01:19:05,390 --> 01:19:07,539
work

1742
01:19:10,680 --> 01:19:15,760
so optional tokens totally busted right

1743
01:19:13,630 --> 01:19:21,480
because it didn't it actually always

1744
01:19:15,760 --> 01:19:21,480
grabs the token is anyone calling that

1745
01:19:26,880 --> 01:19:34,270
yeah so this is we kind of broke this

1746
01:19:30,939 --> 01:19:36,099
right cuz it's yeah so that's good

1747
01:19:34,270 --> 01:19:39,520
actually that we did that so we want to

1748
01:19:36,100 --> 01:19:41,410
do a peek token and then what we want to

1749
01:19:39,520 --> 01:19:44,230
do is say look only get the thing if it

1750
01:19:41,409 --> 01:19:51,279
was the right type right

1751
01:19:44,229 --> 01:19:52,750
oops now this is a little inefficient

1752
01:19:51,279 --> 01:19:54,340
here because as you can kind of see

1753
01:19:52,750 --> 01:19:56,439
we're doing the same work twice which is

1754
01:19:54,340 --> 01:19:57,610
kind of dumb and if we really cared

1755
01:19:56,439 --> 01:19:59,589
about this via the parser we wouldn't

1756
01:19:57,609 --> 01:20:00,880
want to do that but we don't really have

1757
01:19:59,590 --> 01:20:03,069
to care in this case which is kind of

1758
01:20:00,880 --> 01:20:06,400
nice because we're processing so little

1759
01:20:03,069 --> 01:20:07,960
text that it will never see it

1760
01:20:06,399 --> 01:20:10,000
so that's kind of nice we don't have to

1761
01:20:07,960 --> 01:20:12,730
be too worried about the way that codes

1762
01:20:10,000 --> 01:20:17,500
working um so then yeah we can just do

1763
01:20:12,729 --> 01:20:22,079
hey look if optional token token I guess

1764
01:20:17,500 --> 01:20:24,159
what do you want to call that or I guess

1765
01:20:22,079 --> 01:20:30,309
then we want to require the other

1766
01:20:24,159 --> 01:20:33,430
identifiers and that's it because you

1767
01:20:30,310 --> 01:20:35,230
can only have one other one right so

1768
01:20:33,430 --> 01:20:36,760
we're just gonna grab that you'll just

1769
01:20:35,229 --> 01:20:38,709
let me grab that out and then we're good

1770
01:20:36,760 --> 01:20:41,110
to go and then we can change this code

1771
01:20:38,710 --> 01:20:43,960
up here to do the same so this can do a

1772
01:20:41,109 --> 01:20:45,429
peak token and that way to leave the

1773
01:20:43,960 --> 01:20:47,470
semicolon in the input stream if it

1774
01:20:45,430 --> 01:20:48,579
actually gets the identifier here then

1775
01:20:47,470 --> 01:20:52,720
I'll just say like oh okay

1776
01:20:48,579 --> 01:20:54,819
actually retire it and off you go

1777
01:20:52,720 --> 01:20:56,860
now there's some pretty easy ways that

1778
01:20:54,819 --> 01:20:58,809
you cannot do this work twice and we

1779
01:20:56,859 --> 01:21:02,619
should feel pretty stupid for not doing

1780
01:20:58,810 --> 01:21:08,410
them but we are just going to not do

1781
01:21:02,619 --> 01:21:12,489
them you know I can it's just it's dumb

1782
01:21:08,409 --> 01:21:17,639
to waste the time on that so anyway here

1783
01:21:12,489 --> 01:21:17,639
in peak token we've got

1784
01:21:18,670 --> 01:21:23,399
sort of what's the problem

1785
01:21:23,640 --> 01:21:35,340
did I not oh you know what I only put

1786
01:21:28,060 --> 01:21:35,340
Pete token raw in there some reason

1787
01:21:37,560 --> 01:21:41,580
there we go

1788
01:21:39,448 --> 01:21:43,779
don't ask me what I was doing with that

1789
01:21:41,579 --> 01:21:48,789
because we won both of those we wanted

1790
01:21:43,779 --> 01:21:51,789
Pete token and Pete token raw I only put

1791
01:21:48,789 --> 01:21:54,369
Pete token in and I never put Pete token

1792
01:21:51,789 --> 01:21:54,850
and I called it P token wrong I don't

1793
01:21:54,369 --> 01:21:57,460
know yeah

1794
01:21:54,850 --> 01:22:00,010
out to lunch I guess anyway so I think

1795
01:21:57,460 --> 01:22:02,069
that's all good let's go ahead and jump

1796
01:22:00,010 --> 01:22:07,900
down here so that we have to implement

1797
01:22:02,069 --> 01:22:10,689
require token let's see this should be

1798
01:22:07,899 --> 01:22:14,349
tokenizer that was just a autocomplete

1799
01:22:10,689 --> 01:22:16,000
bug there and then optional token or is

1800
01:22:14,350 --> 01:22:18,219
undefined so we're pretty much good to

1801
01:22:16,000 --> 01:22:21,399
go we just have to add that or we don't

1802
01:22:18,219 --> 01:22:22,960
have that operator and so we just have

1803
01:22:21,399 --> 01:22:24,879
to add that in again it's super simple

1804
01:22:22,960 --> 01:22:28,270
it's just a one line in our switch

1805
01:22:24,880 --> 01:22:30,219
statement here so it's really easy for

1806
01:22:28,270 --> 01:22:33,640
us to add operators if we want them

1807
01:22:30,219 --> 01:22:34,179
right it's trivial so I think that's

1808
01:22:33,640 --> 01:22:39,869
everything

1809
01:22:34,179 --> 01:22:42,880
and let's see last but not least this

1810
01:22:39,869 --> 01:22:46,329
here is supposed to be required to

1811
01:22:42,880 --> 01:22:51,340
anumber s3 too so that'll get us that

1812
01:22:46,329 --> 01:22:55,689
number out as well this also is

1813
01:22:51,340 --> 01:23:06,329
something we can lemongrab we want that

1814
01:22:55,689 --> 01:23:06,329
to be a P percent

1815
01:23:13,930 --> 01:23:24,190
and the size this token identifier is

1816
01:23:21,979 --> 01:23:26,569
like we're gonna have up to two

1817
01:23:24,189 --> 01:23:41,869
potential things that combine for the

1818
01:23:26,569 --> 01:23:43,939
type so this is like type zero and I

1819
01:23:41,869 --> 01:23:46,309
think that's everything

1820
01:23:43,939 --> 01:23:49,460
that should parse the entire line point

1821
01:23:46,310 --> 01:23:55,039
thing out and now we know what it is

1822
01:23:49,460 --> 01:24:00,319
right and so really all we have to do

1823
01:23:55,039 --> 01:24:03,350
now is say well okay so as we're part as

1824
01:24:00,319 --> 01:24:05,809
we're doing our import on this thing and

1825
01:24:03,350 --> 01:24:08,270
you know we're reading in the file we

1826
01:24:05,810 --> 01:24:10,970
just have to kind aside like what are we

1827
01:24:08,270 --> 01:24:13,370
going to do with the information that

1828
01:24:10,970 --> 01:24:15,320
we've received so there's two things

1829
01:24:13,369 --> 01:24:18,470
that we can do with the information that

1830
01:24:15,319 --> 01:24:22,009
we get when we process an art asset one

1831
01:24:18,470 --> 01:24:25,159
is we can go update the art the version

1832
01:24:22,010 --> 01:24:26,810
of the art asset that we have and update

1833
01:24:25,159 --> 01:24:29,420
it with the information that we now have

1834
01:24:26,810 --> 01:24:31,340
in it right the other thing that we can

1835
01:24:29,420 --> 01:24:33,289
do is we can take the information that

1836
01:24:31,340 --> 01:24:36,319
we have and write it back out to the

1837
01:24:33,289 --> 01:24:38,329
text stream now in these cases we sort

1838
01:24:36,319 --> 01:24:39,739
of have probably differing ways in which

1839
01:24:38,329 --> 01:24:42,819
we're going to do this we can make this

1840
01:24:39,739 --> 01:24:46,159
more flexible if we want to but the most

1841
01:24:42,819 --> 01:24:50,500
like rigid and you know single path

1842
01:24:46,159 --> 01:24:52,909
version of this is any time we do it

1843
01:24:50,500 --> 01:24:55,399
since we know that a line points are

1844
01:24:52,909 --> 01:24:58,609
things that come from the HHA and get

1845
01:24:55,399 --> 01:25:00,049
edited in the HHA you know the align

1846
01:24:58,609 --> 01:25:02,000
points would get updated from there

1847
01:25:00,050 --> 01:25:03,350
probably I don't know the other way we

1848
01:25:02,000 --> 01:25:05,180
could do it is look at which one was

1849
01:25:03,350 --> 01:25:07,910
modified later

1850
01:25:05,180 --> 01:25:09,800
so I suppose that's also one way to do

1851
01:25:07,909 --> 01:25:11,869
it and I'm not sure again which one of

1852
01:25:09,800 --> 01:25:14,989
those two we want to do it's pretty

1853
01:25:11,869 --> 01:25:17,809
tough to say because again in both cases

1854
01:25:14,989 --> 01:25:20,750
we're not sure so I what I would

1855
01:25:17,810 --> 01:25:23,300
recommend that we do here is we actually

1856
01:25:20,750 --> 01:25:26,180
have in our context something that says

1857
01:25:23,300 --> 01:25:29,270
which of this is going to be right so

1858
01:25:26,180 --> 01:25:30,920
when we actually do an update we can

1859
01:25:29,270 --> 01:25:33,590
basically say look are we trying to

1860
01:25:30,920 --> 01:25:35,420
write out a new hht so we should be like

1861
01:25:33,590 --> 01:25:37,610
copying forward the information that

1862
01:25:35,420 --> 01:25:39,590
we've edited or is what we're actually

1863
01:25:37,609 --> 01:25:41,739
trying to do just do the import so the

1864
01:25:39,590 --> 01:25:45,350
hht should actually like overwrite

1865
01:25:41,739 --> 01:25:48,849
what's going on in the hij right and so

1866
01:25:45,350 --> 01:25:51,289
what I want to do there is just say okay

1867
01:25:48,850 --> 01:25:56,350
which one of these two things are we

1868
01:25:51,289 --> 01:26:00,769
doing so you know is this a is this a

1869
01:25:56,350 --> 01:26:05,079
hht rewrite or not and so we'll just say

1870
01:26:00,770 --> 01:26:09,760
you know if true we are writing a new

1871
01:26:05,079 --> 01:26:15,140
hht from the existing one not importing

1872
01:26:09,760 --> 01:26:16,850
its values right um and you can imagine

1873
01:26:15,140 --> 01:26:22,550
getting arbitrarily complicated with

1874
01:26:16,850 --> 01:26:23,960
this sort of stuff but you know it's in

1875
01:26:22,550 --> 01:26:26,029
order to keep things simple I'm just

1876
01:26:23,960 --> 01:26:26,600
gonna say we'll just have two buttons on

1877
01:26:26,029 --> 01:26:29,359
the UI

1878
01:26:26,600 --> 01:26:31,730
there's import in which case it's just

1879
01:26:29,359 --> 01:26:34,069
reading everything in and then there's

1880
01:26:31,729 --> 01:26:37,819
like save and that's gonna write stuff

1881
01:26:34,069 --> 01:26:40,519
out and we're not gonna we're not going

1882
01:26:37,819 --> 01:26:47,929
to conflate those two right we're gonna

1883
01:26:40,520 --> 01:26:50,930
do those two things as sort of we're

1884
01:26:47,930 --> 01:26:53,300
gonna do those two things in ways that

1885
01:26:50,930 --> 01:26:54,980
the user is manually saying which one

1886
01:26:53,300 --> 01:26:58,130
they're doing we're not gonna try and

1887
01:26:54,979 --> 01:27:00,139
guess based on looking at what the like

1888
01:26:58,130 --> 01:27:02,720
file modification times are something

1889
01:27:00,140 --> 01:27:05,450
who's trying to overwrite who because

1890
01:27:02,720 --> 01:27:07,369
that seems dicey to me and I don't think

1891
01:27:05,449 --> 01:27:09,889
I want to go down that route I think

1892
01:27:07,369 --> 01:27:12,289
it's gonna be too hard to always do it

1893
01:27:09,890 --> 01:27:15,130
the right way and I'd rather just have

1894
01:27:12,289 --> 01:27:18,710
it be exact

1895
01:27:15,130 --> 01:27:21,079
um so in each of these fields right when

1896
01:27:18,710 --> 01:27:22,730
we're doing these parses what you can

1897
01:27:21,079 --> 01:27:24,649
see happening here is right we grab the

1898
01:27:22,729 --> 01:27:28,009
author in the description the name the

1899
01:27:24,649 --> 01:27:30,229
HHA the tags the align and so on and

1900
01:27:28,010 --> 01:27:32,480
what I'd like to do is after each one of

1901
01:27:30,229 --> 01:27:34,119
those I'd like to see which one of these

1902
01:27:32,479 --> 01:27:37,000
two things we're doing

1903
01:27:34,119 --> 01:27:40,859
um in the case for the rewrite if we

1904
01:27:37,000 --> 01:27:40,859
actually do want to rewrite it and so on

1905
01:27:41,159 --> 01:27:50,949
here's a required semi oh oh that's

1906
01:27:48,159 --> 01:27:52,989
after the Wilder okay so I misspoke

1907
01:27:50,949 --> 01:27:55,539
there these things actually do suck up

1908
01:27:52,989 --> 01:27:57,789
the semicolon themselves so that was

1909
01:27:55,539 --> 01:27:59,829
that was less good I guess I was wrong

1910
01:27:57,789 --> 01:28:02,109
you don't actually need to do a peak

1911
01:27:59,829 --> 01:28:07,170
token here we actually wrote this to

1912
01:28:02,109 --> 01:28:07,170
work this way I guess that's fine I

1913
01:28:08,670 --> 01:28:12,430
guess there's no reason not to do that

1914
01:28:10,689 --> 01:28:14,619
the less peak tokens I guess the simpler

1915
01:28:12,430 --> 01:28:16,300
things are so I suppose that's fine

1916
01:28:14,619 --> 01:28:21,869
and if we want to do that we can just

1917
01:28:16,300 --> 01:28:21,869
say well you know this here is just a

1918
01:28:26,850 --> 01:28:33,160
this is just a get token and we can see

1919
01:28:31,930 --> 01:28:34,840
if this if you want to get something

1920
01:28:33,159 --> 01:28:37,239
call you can see why that's kind of ugly

1921
01:28:34,840 --> 01:28:39,569
right it's it's just not great and

1922
01:28:37,239 --> 01:28:42,219
everyone's doing requests on so you know

1923
01:28:39,569 --> 01:28:44,229
we made the peak token we might as well

1924
01:28:42,220 --> 01:28:46,720
use it and make the code simpler that's

1925
01:28:44,229 --> 01:28:48,699
just it just seems better to me right so

1926
01:28:46,720 --> 01:28:51,159
you know let's leave that as a peak

1927
01:28:48,699 --> 01:28:53,139
token we won't actually suck up the

1928
01:28:51,159 --> 01:28:54,819
semicolon will leave the semicolon in

1929
01:28:53,140 --> 01:28:56,829
place and then we'll just delete all

1930
01:28:54,819 --> 01:28:59,309
these and make our lives easier right

1931
01:28:56,829 --> 01:28:59,309
forget it

1932
01:29:03,180 --> 01:29:10,390
right and that way nobody has to look

1933
01:29:07,659 --> 01:29:11,649
for that it's you only parse the parts

1934
01:29:10,390 --> 01:29:13,000
that are actually relevant to you and

1935
01:29:11,649 --> 01:29:14,349
then you can let the semicolon be

1936
01:29:13,000 --> 01:29:18,699
handled by the end of the clause and

1937
01:29:14,350 --> 01:29:22,210
everyone's happy right alright so if in

1938
01:29:18,699 --> 01:29:24,369
here we do you know one of these line of

1939
01:29:22,210 --> 01:29:26,260
port parses or any of these things where

1940
01:29:24,369 --> 01:29:29,409
we like you know get the author parse or

1941
01:29:26,260 --> 01:29:34,570
whatever so when we do these what we

1942
01:29:29,409 --> 01:29:35,800
kind of want to do is we want to say

1943
01:29:34,569 --> 01:29:37,539
whether or not this thing is getting

1944
01:29:35,800 --> 01:29:40,360
copied the output or not in some kind of

1945
01:29:37,539 --> 01:29:43,210
clean way probably right so when we read

1946
01:29:40,359 --> 01:29:45,609
an author a description or a name field

1947
01:29:43,210 --> 01:29:48,050
those are just not things that we edit

1948
01:29:45,609 --> 01:29:50,479
in the game so I feel like

1949
01:29:48,050 --> 01:29:53,390
all of these can just sort of have a by

1950
01:29:50,479 --> 01:29:55,969
default pass-through level where we just

1951
01:29:53,390 --> 01:29:57,110
say like at any time that is just

1952
01:29:55,970 --> 01:29:59,840
something that's going to get passed

1953
01:29:57,109 --> 01:30:01,639
through so when we do like the require

1954
01:29:59,840 --> 01:30:07,880
token at the end then we'll just do the

1955
01:30:01,640 --> 01:30:11,050
copy all input right but but when you

1956
01:30:07,880 --> 01:30:13,699
have something like this alignment point

1957
01:30:11,050 --> 01:30:16,730
that's the part where we may want to

1958
01:30:13,699 --> 01:30:19,189
override it so in one of these things

1959
01:30:16,729 --> 01:30:21,709
what we'll say is look which one of

1960
01:30:19,189 --> 01:30:24,739
these are we actually doing let's

1961
01:30:21,710 --> 01:30:27,170
remember where things started and we'll

1962
01:30:24,739 --> 01:30:33,229
do a sort of a back up to there as

1963
01:30:27,170 --> 01:30:37,010
necessary right where we can say we

1964
01:30:33,229 --> 01:30:40,849
don't actually want you to copy this

1965
01:30:37,010 --> 01:30:47,150
alignment thing in we want to cut to

1966
01:30:40,850 --> 01:30:51,730
ignore it and you know you know skip

1967
01:30:47,149 --> 01:30:54,859
basically the stuff that was coming so

1968
01:30:51,729 --> 01:30:57,799
we'll do an if here and we'll basically

1969
01:30:54,859 --> 01:31:00,170
you know well I guess we'll just do all

1970
01:30:57,800 --> 01:31:03,050
this and then we'll do the if right so

1971
01:31:00,170 --> 01:31:04,909
we suck up all of that input and then

1972
01:31:03,050 --> 01:31:07,699
we'll say if the context says we're

1973
01:31:04,909 --> 01:31:10,550
doing an hht rewrite then what we

1974
01:31:07,699 --> 01:31:14,539
actually want to do is we want to write

1975
01:31:10,550 --> 01:31:16,159
back to the output our own version of

1976
01:31:14,539 --> 01:31:19,970
what this thing should actually look

1977
01:31:16,159 --> 01:31:22,460
like so rather than using what we got as

1978
01:31:19,970 --> 01:31:24,740
the input here we're instead going to

1979
01:31:22,460 --> 01:31:26,689
discard it and then in the other case

1980
01:31:24,739 --> 01:31:29,210
where we do actually want to use it

1981
01:31:26,689 --> 01:31:34,939
that's where we're going to stuff it

1982
01:31:29,210 --> 01:31:38,810
back into the alignment point for the

1983
01:31:34,939 --> 01:31:40,460
assets in question all right now this is

1984
01:31:38,810 --> 01:31:42,020
gonna get a little more complicated and

1985
01:31:40,460 --> 01:31:43,340
I'm not sure how we actually want to do

1986
01:31:42,020 --> 01:31:45,530
it because if you actually look at what

1987
01:31:43,340 --> 01:31:47,119
goes on in here these alignment points

1988
01:31:45,529 --> 01:31:52,130
can be more specific

1989
01:31:47,119 --> 01:31:54,199
so inside like handmade or well base

1990
01:31:52,130 --> 01:31:55,970
came by a ship to you for example this

1991
01:31:54,199 --> 01:31:58,279
would work just fine for something like

1992
01:31:55,970 --> 01:31:59,750
a block where we aren't really talking

1993
01:31:58,279 --> 01:32:01,039
about Lion points for more than just the

1994
01:31:59,750 --> 01:32:01,279
whole thing in fact blocks don't only

1995
01:32:01,039 --> 01:32:02,599
have

1996
01:32:01,279 --> 01:32:04,908
alignment points so it's not really

1997
01:32:02,599 --> 01:32:10,010
relevant but let's take something simple

1998
01:32:04,908 --> 01:32:11,868
like this plate in the intro cutscene if

1999
01:32:10,010 --> 01:32:13,639
we wanted to set an alignment for this

2000
01:32:11,868 --> 01:32:14,929
plate it's pretty easy because we can

2001
01:32:13,639 --> 01:32:16,940
just use exactly the line we've

2002
01:32:14,929 --> 01:32:19,158
specified because in that particular

2003
01:32:16,939 --> 01:32:22,098
case where we've got something like this

2004
01:32:19,158 --> 01:32:23,328
you know if we want to specify an

2005
01:32:22,099 --> 01:32:24,980
alignment point we can just say well

2006
01:32:23,328 --> 01:32:25,389
there's the alignment point and we're

2007
01:32:24,979 --> 01:32:27,558
done

2008
01:32:25,389 --> 01:32:30,920
and we don't really have to look at it

2009
01:32:27,559 --> 01:32:32,449
any more closely but the problem that

2010
01:32:30,920 --> 01:32:34,670
we're gonna have is alignment points

2011
01:32:32,448 --> 01:32:37,368
actually are much more complicated than

2012
01:32:34,670 --> 01:32:40,099
that because a single import directive

2013
01:32:37,368 --> 01:32:46,009
can actually import a lot more than one

2014
01:32:40,099 --> 01:32:48,020
alignment point set right the reason for

2015
01:32:46,010 --> 01:32:50,300
that is if you look at what happens in

2016
01:32:48,020 --> 01:32:53,360
like the bass game for example one of

2017
01:32:50,300 --> 01:32:56,719
these things like you know the body hero

2018
01:32:53,359 --> 01:32:58,759
for example that's got in addition to

2019
01:32:56,719 --> 01:33:01,099
possibly wanting multiple of these which

2020
01:32:58,760 --> 01:33:05,119
we supported with this array statement

2021
01:33:01,099 --> 01:33:07,819
there's actually also the grid right so

2022
01:33:05,118 --> 01:33:12,529
not only do you have to specify which

2023
01:33:07,819 --> 01:33:14,210
one of the which one of the alignment

2024
01:33:12,529 --> 01:33:16,788
points you're talking about you also

2025
01:33:14,210 --> 01:33:20,328
have to specify which grid location

2026
01:33:16,788 --> 01:33:21,859
right so it's really more expanded than

2027
01:33:20,328 --> 01:33:24,288
even that

2028
01:33:21,859 --> 01:33:26,149
so inside our bracket syntax I think

2029
01:33:24,288 --> 01:33:30,139
we're gonna need something harder quark

2030
01:33:26,149 --> 01:33:34,729
here which really is this right so

2031
01:33:30,139 --> 01:33:37,609
there's grid X grid Y and then the index

2032
01:33:34,729 --> 01:33:41,808
of the alignment point and that's really

2033
01:33:37,609 --> 01:33:44,808
the more fully expanded version of this

2034
01:33:41,809 --> 01:33:49,909
thing that we need to support and like I

2035
01:33:44,809 --> 01:33:52,309
said it's a little complicated

2036
01:33:49,908 --> 01:33:53,479
if you were entering these by hand the

2037
01:33:52,309 --> 01:33:55,369
whole reason we have an editor in the

2038
01:33:53,479 --> 01:33:57,558
game is so that we don't edit them by

2039
01:33:55,368 --> 01:34:00,769
hand so I don't know that we care that

2040
01:33:57,559 --> 01:34:02,510
it's you know fairly Squinkie because

2041
01:34:00,770 --> 01:34:04,250
we're never got to touch it so as long

2042
01:34:02,510 --> 01:34:05,750
as it's legible and we can let go

2043
01:34:04,250 --> 01:34:09,140
inspect it me like okay I see what that

2044
01:34:05,750 --> 01:34:12,920
means we don't really have to care what

2045
01:34:09,140 --> 01:34:14,539
the other right all right so if we come

2046
01:34:12,920 --> 01:34:17,539
back here to the alignment side of

2047
01:34:14,539 --> 01:34:18,949
things we grab all this information and

2048
01:34:17,539 --> 01:34:21,380
then what we're gonna do here is say

2049
01:34:18,949 --> 01:34:23,269
well inside here we're gonna talk about

2050
01:34:21,380 --> 01:34:25,970
that a little bit more cynically I'm

2051
01:34:23,270 --> 01:34:28,580
going to say in here that we've got

2052
01:34:25,970 --> 01:34:30,949
token type 1 and I'm gonna go ahead and

2053
01:34:28,579 --> 01:34:33,680
have that fall through properly so that

2054
01:34:30,949 --> 01:34:35,569
way we do the full parse and then we can

2055
01:34:33,680 --> 01:34:38,060
look at the rewrite here if we're going

2056
01:34:35,569 --> 01:34:41,710
to do the rewrite then this is where we

2057
01:34:38,060 --> 01:34:46,730
actually output all of our stuff and

2058
01:34:41,710 --> 01:34:49,310
what we can also probably say is we

2059
01:34:46,729 --> 01:34:51,649
probably don't actually need to do it

2060
01:34:49,310 --> 01:34:53,539
here we could just instead do it a

2061
01:34:51,649 --> 01:34:55,629
little further out so you know we'd

2062
01:34:53,539 --> 01:35:00,109
actually be doing it more like out here

2063
01:34:55,630 --> 01:35:02,090
here and I'm saying that sort of thing

2064
01:35:00,109 --> 01:35:04,789
so like when we get to the end of this

2065
01:35:02,090 --> 01:35:06,529
thing in fact you know we could even do

2066
01:35:04,789 --> 01:35:09,109
it where do we get the final semicolon

2067
01:35:06,529 --> 01:35:10,579
or the close breaks right so in here we

2068
01:35:09,109 --> 01:35:15,139
could say look if we're gonna rewrite it

2069
01:35:10,579 --> 01:35:19,930
now is the time is to you know output

2070
01:35:15,140 --> 01:35:23,300
the alignment points and do it that way

2071
01:35:19,930 --> 01:35:25,490
otherwise you know let's just preserve

2072
01:35:23,300 --> 01:35:27,260
everything that was written in here as

2073
01:35:25,489 --> 01:35:28,939
it was written in here and there's other

2074
01:35:27,260 --> 01:35:30,289
ways we could do that if we want to but

2075
01:35:28,939 --> 01:35:33,529
I think that's the way that we would

2076
01:35:30,289 --> 01:35:34,760
want do it so in here we would do it or

2077
01:35:33,529 --> 01:35:36,259
if we're gonna rewrite it we do it there

2078
01:35:34,760 --> 01:35:39,710
if we're not gonna rewrite it here's

2079
01:35:36,260 --> 01:35:44,050
where we would set it right and that's

2080
01:35:39,710 --> 01:35:47,180
how we do it now we can be fancier Jimmy

2081
01:35:44,050 --> 01:35:50,360
if we want to reproduce the input

2082
01:35:47,180 --> 01:35:53,119
exactly in all cases we could be fancier

2083
01:35:50,359 --> 01:35:55,309
what we could do is rewrite only the

2084
01:35:53,119 --> 01:35:58,189
ones that we saw when we saw them and

2085
01:35:55,310 --> 01:36:00,590
then remember which ones we rewrote and

2086
01:35:58,189 --> 01:36:02,869
go through and see if there are any ones

2087
01:36:00,590 --> 01:36:04,369
that are specified that we didn't

2088
01:36:02,869 --> 01:36:08,899
rewrite and we would do that by keeping

2089
01:36:04,369 --> 01:36:10,220
a flags array right well you do that by

2090
01:36:08,899 --> 01:36:13,039
keeping a thing that said look let's

2091
01:36:10,220 --> 01:36:15,829
let's set each of these things based on

2092
01:36:13,039 --> 01:36:18,590
whether or not we've seen it we will you

2093
01:36:15,829 --> 01:36:20,420
know process the output either at the

2094
01:36:18,590 --> 01:36:22,430
time we saw it so that we keep the order

2095
01:36:20,420 --> 01:36:25,069
the same or we

2096
01:36:22,430 --> 01:36:27,170
we won't now again at some point you get

2097
01:36:25,069 --> 01:36:29,479
into a case of diminishing returns there

2098
01:36:27,170 --> 01:36:32,329
do you care do you not about reproducing

2099
01:36:29,479 --> 01:36:33,469
the input exactly and you get into a

2100
01:36:32,329 --> 01:36:35,510
point where if you did care about

2101
01:36:33,470 --> 01:36:37,250
reproducing input exactly you may want

2102
01:36:35,510 --> 01:36:39,320
to start doing more of an AST style

2103
01:36:37,250 --> 01:36:41,779
approach where you actually produce the

2104
01:36:39,319 --> 01:36:44,029
parse for the thing and just modify it

2105
01:36:41,779 --> 01:36:46,399
in place so that you don't have to be

2106
01:36:44,029 --> 01:36:49,399
having so much tracking of what you did

2107
01:36:46,399 --> 01:36:52,159
and didn't see so you know it's hard to

2108
01:36:49,399 --> 01:36:53,539
say how you want to go about doing that

2109
01:36:52,159 --> 01:36:55,880
there's a lot of different ways you

2110
01:36:53,539 --> 01:36:58,069
could do it and which one is the most

2111
01:36:55,880 --> 01:37:00,350
efficient to implement largely depends

2112
01:36:58,069 --> 01:37:02,329
on exactly what you want as it always

2113
01:37:00,350 --> 01:37:04,640
does everything's a trade-off everything

2114
01:37:02,329 --> 01:37:08,149
costs more code or takes less code or is

2115
01:37:04,640 --> 01:37:09,770
better or is worse and also so if we

2116
01:37:08,149 --> 01:37:11,359
don't want to do a rewrite though then

2117
01:37:09,770 --> 01:37:13,100
what we do want to do is set the

2118
01:37:11,359 --> 01:37:14,779
alignment point for this particular grid

2119
01:37:13,100 --> 01:37:16,520
index and so what we're going to be

2120
01:37:14,779 --> 01:37:22,069
doing there right is we're going to be

2121
01:37:16,520 --> 01:37:26,870
doing the the zooming setting that

2122
01:37:22,069 --> 01:37:30,349
alignment up onto whatever the actual

2123
01:37:26,869 --> 01:37:33,680
import is that we do so in here where we

2124
01:37:30,350 --> 01:37:36,170
do the parse top of a block right you

2125
01:37:33,680 --> 01:37:39,800
know we've we're sort of processing this

2126
01:37:36,170 --> 01:37:41,449
and then we're looking at this you know

2127
01:37:39,800 --> 01:37:43,610
parse pieces sort of thing that happens

2128
01:37:41,449 --> 01:37:45,739
and what you can see here is this is a

2129
01:37:43,609 --> 01:37:48,859
little bit too late to the party right

2130
01:37:45,739 --> 01:37:52,069
we actually want to know what we're

2131
01:37:48,859 --> 01:37:54,289
reading from a lot earlier than this so

2132
01:37:52,069 --> 01:37:56,719
what we'd like to do is be able to

2133
01:37:54,289 --> 01:37:59,000
access at least this part of the

2134
01:37:56,720 --> 01:38:00,890
information like way earlier than that

2135
01:37:59,000 --> 01:38:03,319
right like we want it we want to

2136
01:38:00,890 --> 01:38:06,530
actually start this process potentially

2137
01:38:03,319 --> 01:38:08,509
a lot earlier than that if that makes

2138
01:38:06,529 --> 01:38:10,309
sense because what we want to have at

2139
01:38:08,510 --> 01:38:12,260
this point is we want to have this asset

2140
01:38:10,310 --> 01:38:14,180
source file the reason we want to have

2141
01:38:12,260 --> 01:38:16,760
that asset source file is if you look at

2142
01:38:14,180 --> 01:38:19,070
what we're actually storing for the

2143
01:38:16,760 --> 01:38:20,360
asset source file in here it is the

2144
01:38:19,069 --> 01:38:23,359
thing that actually gives us that

2145
01:38:20,359 --> 01:38:25,049
translation table right so the thing in

2146
01:38:23,359 --> 01:38:28,920
here

2147
01:38:25,050 --> 01:38:31,619
are you sir the asset index array this

2148
01:38:28,920 --> 01:38:33,270
right here this thing here is the thing

2149
01:38:31,619 --> 01:38:35,189
that actually tells us where we would go

2150
01:38:33,270 --> 01:38:37,260
to get those alignment points right

2151
01:38:35,189 --> 01:38:38,609
because here's the asset indices and the

2152
01:38:37,260 --> 01:38:41,190
asset is the thing that has the

2153
01:38:38,609 --> 01:38:43,500
alignment points stored in it so if we

2154
01:38:41,189 --> 01:38:45,869
don't have this piece of information yet

2155
01:38:43,500 --> 01:38:48,119
we wouldn't actually know whether there

2156
01:38:45,869 --> 01:38:50,579
are any of these things to set or not

2157
01:38:48,119 --> 01:38:52,979
right we would have no idea where to put

2158
01:38:50,579 --> 01:38:55,800
that particular piece of information one

2159
01:38:52,979 --> 01:38:58,199
way or the other and so what that boils

2160
01:38:55,800 --> 01:39:00,869
down to is we sort of want to do the

2161
01:38:58,199 --> 01:39:03,510
parse and get the data set up first and

2162
01:39:00,869 --> 01:39:06,809
then we want to call this actual

2163
01:39:03,510 --> 01:39:08,520
function which again means we sort of

2164
01:39:06,810 --> 01:39:11,190
want to reverse the order in which we're

2165
01:39:08,520 --> 01:39:13,440
doing these things now it requires us

2166
01:39:11,189 --> 01:39:16,139
having process the tag arrays to do that

2167
01:39:13,439 --> 01:39:19,109
and the alignment points here as you can

2168
01:39:16,140 --> 01:39:20,579
see is now something that it kind of

2169
01:39:19,109 --> 01:39:22,019
creates an order dependency here that

2170
01:39:20,579 --> 01:39:24,059
that you know we have to figure out a

2171
01:39:22,020 --> 01:39:25,800
way that we want to resolve because we

2172
01:39:24,060 --> 01:39:28,170
would like to ideally parse these things

2173
01:39:25,800 --> 01:39:30,510
first and then when we when we load this

2174
01:39:28,170 --> 01:39:34,470
stuff they'll just get stamped on as we

2175
01:39:30,510 --> 01:39:36,300
process those in place but again maybe

2176
01:39:34,470 --> 01:39:38,340
we don't really want to do that at that

2177
01:39:36,300 --> 01:39:40,619
time maybe we want to do that in a

2178
01:39:38,340 --> 01:39:42,810
slightly different way such as for

2179
01:39:40,619 --> 01:39:46,739
example having the process multi tile

2180
01:39:42,810 --> 01:39:48,840
import side of things do the tag welding

2181
01:39:46,739 --> 01:39:50,849
or who knows what else right there's

2182
01:39:48,840 --> 01:39:52,770
ways we could imagine doing this so that

2183
01:39:50,850 --> 01:39:57,090
we actually call this stuff first and

2184
01:39:52,770 --> 01:40:00,060
then at the end afterwards do this sort

2185
01:39:57,090 --> 01:40:05,010
of stamping kind of onto the onto the

2186
01:40:00,060 --> 01:40:07,680
assets in arrears right and yeah so

2187
01:40:05,010 --> 01:40:09,420
again it's really kind of hard to think

2188
01:40:07,680 --> 01:40:11,760
about exactly how these things

2189
01:40:09,420 --> 01:40:17,279
want to be ordered and how they want to

2190
01:40:11,760 --> 01:40:19,350
be processed in that sense but what I

2191
01:40:17,279 --> 01:40:22,139
can say is that if we just want to

2192
01:40:19,350 --> 01:40:24,240
cheese out for now it's actually pretty

2193
01:40:22,140 --> 01:40:27,000
easy for us to do so and the reason for

2194
01:40:24,239 --> 01:40:29,789
that is we can just parse this and

2195
01:40:27,000 --> 01:40:32,460
remember it right that's really easy for

2196
01:40:29,789 --> 01:40:35,159
us to do because you know if we want to

2197
01:40:32,460 --> 01:40:37,039
there's no reason that in here we can't

2198
01:40:35,159 --> 01:40:38,578
just store up these alignment points

2199
01:40:37,039 --> 01:40:41,670
ahead of time

2200
01:40:38,578 --> 01:40:45,299
right again really really simple for us

2201
01:40:41,670 --> 01:40:49,670
to do cost us almost nothing and so when

2202
01:40:45,300 --> 01:40:54,449
we're in here what we can do is say look

2203
01:40:49,670 --> 01:40:58,010
make a temporary structure we know that

2204
01:40:54,448 --> 01:41:03,500
we've got this many things to remember

2205
01:40:58,010 --> 01:41:06,329
so what we can say is like align points

2206
01:41:03,500 --> 01:41:07,800
and we know inside the final format that

2207
01:41:06,328 --> 01:41:17,340
there's only a certain number of those

2208
01:41:07,800 --> 01:41:21,179
that you can have and so we can store

2209
01:41:17,340 --> 01:41:23,610
all the ones we read pretty easily right

2210
01:41:21,179 --> 01:41:25,889
we initialize it to nothing so we know

2211
01:41:23,609 --> 01:41:28,469
that there's none of them got the outset

2212
01:41:25,889 --> 01:41:31,500
and then when we read them in we just

2213
01:41:28,469 --> 01:41:36,300
store them into this array right at the

2214
01:41:31,500 --> 01:41:38,158
location implied by the by the indices

2215
01:41:36,300 --> 01:41:40,260
here so when we get all of this

2216
01:41:38,158 --> 01:41:42,359
information we can then say well you

2217
01:41:40,260 --> 01:41:44,579
know just go to and I don't know how

2218
01:41:42,359 --> 01:41:48,000
these are indexed at the moment whether

2219
01:41:44,578 --> 01:41:53,698
we do grid X or grid Y but I can look

2220
01:41:48,000 --> 01:41:58,170
here so it's Y X right so grid X grid Y

2221
01:41:53,698 --> 01:42:00,448
and then whichever one it is here that's

2222
01:41:58,170 --> 01:42:02,750
going to be our line point so we can

2223
01:42:00,448 --> 01:42:05,759
just say like HS a a line point point

2224
01:42:02,750 --> 01:42:08,729
equals that one and then the point

2225
01:42:05,760 --> 01:42:11,280
itself can be set in specifically these

2226
01:42:08,729 --> 01:42:13,468
ways so I can say look I want to fill

2227
01:42:11,279 --> 01:42:21,109
out all of the parts of that so here's

2228
01:42:13,469 --> 01:42:29,099
the p % 0 oops

2229
01:42:21,109 --> 01:42:32,670
here's the p % 1 here's the size and

2230
01:42:29,099 --> 01:42:34,949
here's the type and we can fill all of

2231
01:42:32,670 --> 01:42:36,599
those fields out now we want to put some

2232
01:42:34,948 --> 01:42:38,368
error checking in here because anyone

2233
01:42:36,599 --> 01:42:40,770
they can put anything they want in here

2234
01:42:38,368 --> 01:42:42,448
so we want to first before we set one of

2235
01:42:40,770 --> 01:42:44,699
these alignment points what we'd like to

2236
01:42:42,448 --> 01:42:49,859
do is check everything for errors and

2237
01:42:44,698 --> 01:42:52,888
issue ears where they occur now if you

2238
01:42:49,859 --> 01:42:54,688
imagined this doing this piece

2239
01:42:52,889 --> 01:42:57,359
you can imagine we need to do if this

2240
01:42:54,689 --> 01:42:59,249
thing is in range then you then do the

2241
01:42:57,359 --> 01:43:00,988
thing otherwise air out if it's in range

2242
01:42:59,248 --> 01:43:02,998
air out and we want to have all this air

2243
01:43:00,988 --> 01:43:04,408
through cynic that says a lot of typing

2244
01:43:02,998 --> 01:43:07,469
we don't really want to do that so we'd

2245
01:43:04,408 --> 01:43:09,179
much rather do something like look only

2246
01:43:07,469 --> 01:43:11,309
put this in if we know all of our values

2247
01:43:09,179 --> 01:43:14,158
are correct so if we know all these

2248
01:43:11,309 --> 01:43:16,889
things fell within the tolerances that

2249
01:43:14,158 --> 01:43:19,529
we expect them to then actually proceed

2250
01:43:16,889 --> 01:43:21,569
otherwise bail and then what we want to

2251
01:43:19,529 --> 01:43:24,628
do is in here sort of upgrade this

2252
01:43:21,569 --> 01:43:26,969
concept so instead of required token and

2253
01:43:24,628 --> 01:43:30,748
just having anything come back here we

2254
01:43:26,969 --> 01:43:33,538
want to have require number and we want

2255
01:43:30,748 --> 01:43:35,368
to actually have a range right so we

2256
01:43:33,538 --> 01:43:37,559
want to do here is say look we want to

2257
01:43:35,368 --> 01:43:39,719
require and furthermore we wanna cry an

2258
01:43:37,559 --> 01:43:41,340
integer range right so what we're gonna

2259
01:43:39,719 --> 01:43:43,529
do is say I want you to give me a number

2260
01:43:41,340 --> 01:43:45,479
back and I want you to give me back that

2261
01:43:43,529 --> 01:43:47,759
number because they'll return the token

2262
01:43:45,479 --> 01:43:51,059
I suppose I want that number four grid X

2263
01:43:47,760 --> 01:43:54,559
to be from here to here right like I

2264
01:43:51,059 --> 01:43:57,619
want it to fall between these two right

2265
01:43:54,559 --> 01:44:04,050
and so this is going to be again

2266
01:43:57,618 --> 01:44:06,719
coincident with this so each one of

2267
01:44:04,050 --> 01:44:08,070
these instead of doing a car token is

2268
01:44:06,719 --> 01:44:10,078
always going to be required integer

2269
01:44:08,069 --> 01:44:13,248
range and in here we'll just say all

2270
01:44:10,078 --> 01:44:15,929
right that's what those two have to be

2271
01:44:13,248 --> 01:44:18,359
this one same thing require integer

2272
01:44:15,929 --> 01:44:20,849
range it's gonna be between zero and HHA

2273
01:44:18,359 --> 01:44:23,248
get map align point count so we've again

2274
01:44:20,849 --> 01:44:24,719
like now we can issue proper errors to

2275
01:44:23,248 --> 01:44:27,328
anyone who like put something wrong in

2276
01:44:24,719 --> 01:44:29,939
there and then finally like these for

2277
01:44:27,328 --> 01:44:31,679
size and P percent it's still exactly

2278
01:44:29,939 --> 01:44:34,949
the same thing it's just the energy

2279
01:44:31,679 --> 01:44:36,628
range is much larger this time but you

2280
01:44:34,948 --> 01:44:38,458
know it's still still again exactly the

2281
01:44:36,628 --> 01:44:41,429
same thing so each one of these where

2282
01:44:38,458 --> 01:44:43,590
you've got one of these requirements

2283
01:44:41,429 --> 01:44:54,449
here it's just going to be between zero

2284
01:44:43,590 --> 01:44:56,010
and the maximum for a u16 right so again

2285
01:44:54,448 --> 01:44:57,178
we can read each of those in and then we

2286
01:44:56,010 --> 01:45:01,739
can go from there

2287
01:44:57,179 --> 01:45:04,139
we of these ones we do how we do each of

2288
01:45:01,738 --> 01:45:06,569
these we kind of need to be a little bit

2289
01:45:04,139 --> 01:45:08,909
more specific about we

2290
01:45:06,569 --> 01:45:12,179
haven't quite handled type yet right but

2291
01:45:08,909 --> 01:45:17,760
now each of these can be done with just

2292
01:45:12,180 --> 01:45:19,170
this one simple function kind of makes

2293
01:45:17,760 --> 01:45:21,780
it sound like one of those around the

2294
01:45:19,170 --> 01:45:24,779
web things this one simple function will

2295
01:45:21,779 --> 01:45:27,979
get you all of yeah I won't go down that

2296
01:45:24,779 --> 01:45:30,389
route anyway so what I can do there is

2297
01:45:27,979 --> 01:45:32,639
to do that what I can do there is just

2298
01:45:30,390 --> 01:45:36,720
you know sort of duplicate my require

2299
01:45:32,640 --> 01:45:39,210
token idea here and just add a second

2300
01:45:36,720 --> 01:45:42,659
level to it right so I know that I'm

2301
01:45:39,210 --> 01:45:47,489
going to get an Esther D to you know

2302
01:45:42,659 --> 01:45:52,729
here where we get like one past Max and

2303
01:45:47,489 --> 01:45:56,579
min as a way of specifying our range

2304
01:45:52,729 --> 01:45:58,500
maybe that and so in here I can do the

2305
01:45:56,579 --> 01:46:01,559
same thing I was doing before where I

2306
01:45:58,500 --> 01:46:04,140
say all right let's get a token by

2307
01:46:01,560 --> 01:46:05,970
calling require token and I will say

2308
01:46:04,140 --> 01:46:07,350
that it has to be a number but then I'm

2309
01:46:05,970 --> 01:46:09,869
gonna do is going to check the range of

2310
01:46:07,350 --> 01:46:12,240
the number and so I'm going to say look

2311
01:46:09,869 --> 01:46:14,069
we'll issue an additional error if this

2312
01:46:12,239 --> 01:46:16,500
doesn't fall within the range that I

2313
01:46:14,069 --> 01:46:18,420
expected so first of all if it does

2314
01:46:16,500 --> 01:46:21,390
equal the number because it might not

2315
01:46:18,420 --> 01:46:23,460
right it could be that there was already

2316
01:46:21,390 --> 01:46:25,140
an error with require token and we don't

2317
01:46:23,460 --> 01:46:25,680
really need to issue a second error

2318
01:46:25,140 --> 01:46:27,840
right

2319
01:46:25,680 --> 01:46:29,670
so assuming it was actually a token

2320
01:46:27,840 --> 01:46:31,770
number then what I'm gonna do is check

2321
01:46:29,670 --> 01:46:35,250
to see if it's within range and if it is

2322
01:46:31,770 --> 01:46:38,400
good if it's not we will just issue the

2323
01:46:35,250 --> 01:46:39,479
ear and maybe even clamp the the value

2324
01:46:38,399 --> 01:46:41,879
that's coming out of it but I don't

2325
01:46:39,479 --> 01:46:45,209
think we'll do that so we'll just say

2326
01:46:41,880 --> 01:46:47,760
like look if it's a number then let's

2327
01:46:45,210 --> 01:46:49,920
check so we'll then say okay if token s

2328
01:46:47,760 --> 01:46:55,170
32 is greater than equal to the min

2329
01:46:49,920 --> 01:46:59,220
value in token s 32 is less than one

2330
01:46:55,170 --> 01:47:01,260
pass the max value and I could have done

2331
01:46:59,220 --> 01:47:02,340
where you actually pass the range in for

2332
01:47:01,260 --> 01:47:03,600
the name we won't have to minus one

2333
01:47:02,340 --> 01:47:05,970
because you almost always want to pass

2334
01:47:03,600 --> 01:47:08,190
other thing in there oh well know what

2335
01:47:05,970 --> 01:47:10,860
you know what no I'm wrong because

2336
01:47:08,189 --> 01:47:13,259
here's the thing we do actually want to

2337
01:47:10,859 --> 01:47:15,420
allow that max value in the u 16 max

2338
01:47:13,260 --> 01:47:19,119
case so maybe it's fine to just do this

2339
01:47:15,420 --> 01:47:20,409
right and so you pass in a range here

2340
01:47:19,119 --> 01:47:22,390
and then what that means is that each of

2341
01:47:20,409 --> 01:47:24,550
these just has to do like okay you know

2342
01:47:22,390 --> 01:47:25,720
the range is that range minus one

2343
01:47:24,550 --> 01:47:27,340
because I don't actually want you to

2344
01:47:25,720 --> 01:47:32,770
pass in the highest value because that

2345
01:47:27,340 --> 01:47:39,360
would be out of bounds okay so you know

2346
01:47:32,770 --> 01:47:39,360
this is valid and this is invalid that

2347
01:47:57,090 --> 01:48:01,150
allows us to print out a pretty handy

2348
01:47:59,680 --> 01:48:04,329
error message right we're basically

2349
01:48:01,149 --> 01:48:05,979
saying look we expect you to give us a

2350
01:48:04,329 --> 01:48:07,720
number being here in here you didn't so

2351
01:48:05,979 --> 01:48:08,739
go back to that place the source rod to

2352
01:48:07,720 --> 01:48:10,180
figure out why you were trying to

2353
01:48:08,739 --> 01:48:11,529
specify something out of the range of

2354
01:48:10,180 --> 01:48:13,930
the possible things that we allow you to

2355
01:48:11,529 --> 01:48:15,670
do here and then we're good to go so

2356
01:48:13,930 --> 01:48:18,369
like I said the only thing we don't have

2357
01:48:15,670 --> 01:48:21,190
now is that type I'm out of time so I

2358
01:48:18,369 --> 01:48:24,779
really shouldn't be doing any more so

2359
01:48:21,189 --> 01:48:30,250
will wind down pretty soon here but

2360
01:48:24,779 --> 01:48:34,949
there's a char token range so in here if

2361
01:48:30,250 --> 01:48:37,119
I just kind of jump to the other ears

2362
01:48:34,949 --> 01:48:42,279
don't ask me why we pass the token

2363
01:48:37,119 --> 01:48:45,250
they're possible loss of data for the

2364
01:48:42,279 --> 01:48:49,719
sr22 oh that's fine we know they're in

2365
01:48:45,250 --> 01:48:52,529
range so these are all castable so

2366
01:48:49,720 --> 01:48:52,530
that's all good

2367
01:48:57,119 --> 01:49:01,140
and I think I'll probably leave the rest

2368
01:48:59,039 --> 01:49:05,399
for next time there is a few things we

2369
01:49:01,140 --> 01:49:06,450
can do here we've wanted to maybe I'll

2370
01:49:05,399 --> 01:49:09,179
do them really quickly let's just look

2371
01:49:06,449 --> 01:49:11,849
so if you're looking here there's this

2372
01:49:09,180 --> 01:49:15,060
sort of a line point name from type and

2373
01:49:11,850 --> 01:49:17,130
a line point type from name and you can

2374
01:49:15,060 --> 01:49:19,980
see that that would do the translation

2375
01:49:17,130 --> 01:49:24,119
for us here and so if you use any of

2376
01:49:19,979 --> 01:49:24,959
these align point names which are in

2377
01:49:24,119 --> 01:49:27,630
here somewhere

2378
01:49:24,960 --> 01:49:30,420
okay so here none default top of head

2379
01:49:27,630 --> 01:49:32,760
and base of neck right if you actually

2380
01:49:30,420 --> 01:49:37,710
do those we can actually translate them

2381
01:49:32,760 --> 01:49:42,449
for you and so that's probably what we

2382
01:49:37,710 --> 01:49:46,529
would do there so in here we can do that

2383
01:49:42,449 --> 01:49:50,159
checking what I might do is say require

2384
01:49:46,529 --> 01:49:53,670
type 0 to be that thing so we might say

2385
01:49:50,159 --> 01:49:57,659
something like this type 0 text

2386
01:49:53,670 --> 01:50:00,510
haja line point type and we would say

2387
01:49:57,659 --> 01:50:04,920
this is the base type right and we'd say

2388
01:50:00,510 --> 01:50:06,720
if base type equals HHA align nun or i

2389
01:50:04,920 --> 01:50:11,899
should say it's not equal to that that

2390
01:50:06,720 --> 01:50:11,900
we know it was ok otherwise it's not ok

2391
01:50:13,159 --> 01:50:18,599
and similarly we need to do type 1 here

2392
01:50:16,529 --> 01:50:19,679
and see what that would do so in here

2393
01:50:18,600 --> 01:50:23,930
you know I can actually do it like this

2394
01:50:19,680 --> 01:50:26,369
I guess so in here oops

2395
01:50:23,930 --> 01:50:28,409
so in here we'd say like get that thing

2396
01:50:26,369 --> 01:50:31,289
you know get that get the get the type

2397
01:50:28,409 --> 01:50:33,630
there and see if it's valid if it's not

2398
01:50:31,289 --> 01:50:35,640
that we would error out and say yeah I

2399
01:50:33,630 --> 01:50:38,060
know that's not going to work right so

2400
01:50:35,640 --> 01:50:46,500
this type 0 here

2401
01:50:38,060 --> 01:50:47,340
unrecognized alignment point type and

2402
01:50:46,500 --> 01:50:49,260
then the only other thing we have to do

2403
01:50:47,340 --> 01:50:51,569
here is if we get this optional token we

2404
01:50:49,260 --> 01:50:55,050
may want to align you know I'm gonna

2405
01:50:51,569 --> 01:50:57,389
actually do it like this we're gonna or

2406
01:50:55,050 --> 01:51:00,329
in here you know the two parent so we

2407
01:50:57,390 --> 01:51:03,300
would in here say or into parent if it's

2408
01:51:00,329 --> 01:51:05,369
if it's appropriate and so we're gonna

2409
01:51:03,300 --> 01:51:06,070
want to grab that let me just let me

2410
01:51:05,369 --> 01:51:10,448
grab that out

2411
01:51:06,069 --> 01:51:13,059
here and so we want to Orion that to

2412
01:51:10,448 --> 01:51:14,439
parent in the case where this is valid

2413
01:51:13,060 --> 01:51:16,300
and if it's not valid we want to issue

2414
01:51:14,439 --> 01:51:20,009
an error again right so we want to do

2415
01:51:16,300 --> 01:51:27,820
something like this where if type 1 and

2416
01:51:20,010 --> 01:51:29,860
I guess do we have require identifier we

2417
01:51:27,819 --> 01:51:32,019
don't um so what I want to do here is

2418
01:51:29,859 --> 01:51:40,118
say look I requiring an Edifier and if

2419
01:51:32,020 --> 01:51:42,159
the token in this case equals this to

2420
01:51:40,118 --> 01:51:45,009
parent value which I think we should

2421
01:51:42,158 --> 01:51:46,598
just use to parent then we'll order this

2422
01:51:45,010 --> 01:51:47,829
in if it's not then it's an error

2423
01:51:46,599 --> 01:51:49,510
because we don't allow any other

2424
01:51:47,828 --> 01:51:52,090
modifiers to alignment points at the

2425
01:51:49,510 --> 01:51:58,030
moment and then we could so we could

2426
01:51:52,090 --> 01:52:01,449
just say like expected to parent and get

2427
01:51:58,029 --> 01:52:02,439
it right so I think that's really all we

2428
01:52:01,448 --> 01:52:04,839
need to do there

2429
01:52:02,439 --> 01:52:06,908
and I think then then we're done right

2430
01:52:04,840 --> 01:52:08,710
so we've got all of that and we build

2431
01:52:06,908 --> 01:52:11,649
the type properly and all that stuff is

2432
01:52:08,710 --> 01:52:13,029
saved and so that produces the complete

2433
01:52:11,649 --> 01:52:16,269
list which we can then do this

2434
01:52:13,029 --> 01:52:17,800
processing here and then we can you know

2435
01:52:16,270 --> 01:52:19,869
at tomorrow decide what we're going to

2436
01:52:17,800 --> 01:52:21,429
do at the end of all that now I don't

2437
01:52:19,868 --> 01:52:22,929
want to leave it in a non compelling

2438
01:52:21,429 --> 01:52:26,949
state so all I'm going to do is just

2439
01:52:22,929 --> 01:52:28,599
stub this out at the moment and leave

2440
01:52:26,948 --> 01:52:31,719
that as it to do so this is a not

2441
01:52:28,599 --> 01:52:32,800
implemented right here and we will pick

2442
01:52:31,719 --> 01:52:36,908
it up tomorrow

2443
01:52:32,800 --> 01:52:45,670
when we return from now oops we will go

2444
01:52:36,908 --> 01:52:47,859
to the Q and a and we'll address that

2445
01:52:45,670 --> 01:52:51,578
later on looks like we've got one more

2446
01:52:47,859 --> 01:52:56,250
air in here yeah well you know what we

2447
01:52:51,578 --> 01:52:59,329
could just make this a u16 up here right

2448
01:52:56,250 --> 01:53:03,149
in theory

2449
01:52:59,329 --> 01:53:05,760
okay so even though this is returning

2450
01:53:03,149 --> 01:53:07,229
something that has to be au 16 it

2451
01:53:05,760 --> 01:53:10,079
doesn't think I guess it's integral

2452
01:53:07,229 --> 01:53:21,419
promoting it up or what what's the

2453
01:53:10,079 --> 01:53:25,050
what's the deal there it's probably

2454
01:53:21,420 --> 01:53:27,720
because it's it it probably because it

2455
01:53:25,050 --> 01:53:29,489
assumes that enums are signed and so

2456
01:53:27,720 --> 01:53:31,619
it's looking and seeing that it's eight

2457
01:53:29,489 --> 01:53:34,559
zero zero zero is the maximum value

2458
01:53:31,619 --> 01:53:36,899
that's defined in the enum and that

2459
01:53:34,560 --> 01:53:39,000
means it can't store it in a 16-bit

2460
01:53:36,899 --> 01:53:42,659
signed value so then it goes in stores

2461
01:53:39,000 --> 01:53:44,819
it is 32 I don't know integral promotion

2462
01:53:42,659 --> 01:53:46,619
rules and see I never studied them so I

2463
01:53:44,819 --> 01:53:49,889
never know what they are they're always

2464
01:53:46,619 --> 01:53:51,180
bad it seems like I don't like them but

2465
01:53:49,890 --> 01:53:53,490
you know they are what they are

2466
01:53:51,180 --> 01:54:02,640
alright let's go ahead and go to the Q &amp;

2467
01:53:53,489 --> 01:54:05,099
A does anyone know by the way I can't

2468
01:54:02,640 --> 01:54:09,600
inside the twitch chat if I do like QA

2469
01:54:05,100 --> 01:54:15,000
it doesn't work why do I have to go over

2470
01:54:09,600 --> 01:54:18,660
to the handmade here oh the handmade

2471
01:54:15,000 --> 01:54:21,239
Network IRC to enter QA does anyone know

2472
01:54:18,659 --> 01:54:23,420
why that is like I have no idea why that

2473
01:54:21,239 --> 01:54:23,420
is

2474
01:54:52,099 --> 01:54:56,760
how would you print an enum tag as a

2475
01:54:54,479 --> 01:54:58,800
string in C well you I mean you can't

2476
01:54:56,760 --> 01:55:03,059
that's why we have these ridiculous

2477
01:54:58,800 --> 01:55:05,338
translation tables right C and C++ again

2478
01:55:03,059 --> 01:55:08,609
despite C++ having been developed for 30

2479
01:55:05,338 --> 01:55:12,029
years now still can't tell you what the

2480
01:55:08,609 --> 01:55:13,289
name of an enum is they were like I

2481
01:55:12,029 --> 01:55:15,179
don't know how you could possibly do

2482
01:55:13,288 --> 01:55:17,368
that that's like technology so far

2483
01:55:15,179 --> 01:55:20,010
beyond the C++ standard committee

2484
01:55:17,368 --> 01:55:21,598
they're like we got nothing we don't

2485
01:55:20,010 --> 01:55:23,550
know we don't know how we would give you

2486
01:55:21,599 --> 01:55:28,769
back the name of a strength of an enum

2487
01:55:23,550 --> 01:55:31,889
that's that's like I mean Elon Musk can

2488
01:55:28,769 --> 01:55:35,149
put a man on Mars maybe right that might

2489
01:55:31,889 --> 01:55:38,338
happen but getting the name of an enum

2490
01:55:35,149 --> 01:55:41,249
that I mean what do you expect from us

2491
01:55:38,338 --> 01:55:42,838
here right I mean we're only the C++

2492
01:55:41,248 --> 01:55:45,300
standards committee that's not the kind

2493
01:55:42,838 --> 01:55:46,859
of thing we're ever gonna be capable of

2494
01:55:45,300 --> 01:55:48,119
doing like we're still trying to learn

2495
01:55:46,859 --> 01:55:51,989
how to use the sippy cup and ride a

2496
01:55:48,118 --> 01:55:53,549
tricycle right so the answer is anytime

2497
01:55:51,988 --> 01:55:55,018
you actually want to print one of these

2498
01:55:53,550 --> 01:55:56,909
out you have to make your own table so

2499
01:55:55,019 --> 01:56:00,088
you're constantly copying and making

2500
01:55:56,908 --> 01:56:02,158
your own table so if you look at

2501
01:56:00,088 --> 01:56:04,109
something like how we do it right in

2502
01:56:02,158 --> 01:56:06,268
handmade hero we have to do it this way

2503
01:56:04,109 --> 01:56:07,919
were you going here and have a little

2504
01:56:06,269 --> 01:56:11,609
translation table that says what the

2505
01:56:07,918 --> 01:56:14,818
names are from the various things that

2506
01:56:11,609 --> 01:56:20,129
you've got and it's it's terrible right

2507
01:56:14,819 --> 01:56:21,869
now I showed on on a hand made here a

2508
01:56:20,128 --> 01:56:24,418
bonus stream we don't do this in

2509
01:56:21,868 --> 01:56:26,338
handmade hirabai showed how to do it you

2510
01:56:24,418 --> 01:56:28,408
can write your own language augmentation

2511
01:56:26,338 --> 01:56:29,818
where you write your own preprocessor

2512
01:56:28,408 --> 01:56:31,978
that goes through your code first and

2513
01:56:29,819 --> 01:56:34,319
turns ministry every industrial-strength

2514
01:56:31,979 --> 01:56:37,918
C programming house or C++ program house

2515
01:56:34,319 --> 01:56:39,899
has this so like you know I'm sure like

2516
01:56:37,918 --> 01:56:42,059
the people who write like the frostbite

2517
01:56:39,899 --> 01:56:43,530
engine or whatever they probably have a

2518
01:56:42,059 --> 01:56:45,449
pre pass it does something like that

2519
01:56:43,529 --> 01:56:47,478
right or the Unreal Engine probably has

2520
01:56:45,448 --> 01:56:50,188
a pre pass that does something like that

2521
01:56:47,479 --> 01:56:53,668
and that's basically because the

2522
01:56:50,189 --> 01:56:56,329
language is so decrepit you know it

2523
01:56:53,668 --> 01:56:56,328
can't do it

2524
01:56:59,708 --> 01:57:05,569
and is there a reason you don't write

2525
01:57:03,130 --> 01:57:07,639
bailout style functions to avoid too

2526
01:57:05,569 --> 01:57:10,549
much nesting of if-else blocks

2527
01:57:07,639 --> 01:57:13,489
yes so there is a reason I like to have

2528
01:57:10,550 --> 01:57:16,248
only one return point in my functions as

2529
01:57:13,488 --> 01:57:18,439
much as possible and the reason for that

2530
01:57:16,248 --> 01:57:21,288
is because it makes it a lot easier for

2531
01:57:18,439 --> 01:57:24,319
me to think about what is always

2532
01:57:21,288 --> 01:57:27,109
happening and at the start and ends of

2533
01:57:24,319 --> 01:57:29,029
routines so it gives me an easy way to

2534
01:57:27,109 --> 01:57:30,139
say oh you know what any time I go

2535
01:57:29,029 --> 01:57:31,849
through this routine like whether it

2536
01:57:30,139 --> 01:57:34,099
airs or not or whether this happens or

2537
01:57:31,849 --> 01:57:37,880
not I know it's gonna go down here and

2538
01:57:34,099 --> 01:57:41,179
do something right and each of my blocks

2539
01:57:37,880 --> 01:57:43,519
shows me a new level of certainty that

2540
01:57:41,179 --> 01:57:45,559
I've gotten to that I can also say

2541
01:57:43,519 --> 01:57:48,800
here's what would happen if I was

2542
01:57:45,559 --> 01:57:51,349
unwinding out of there right and so I

2543
01:57:48,800 --> 01:57:55,248
tend to just like things to be laid out

2544
01:57:51,349 --> 01:57:57,889
that way that's why I don't use there's

2545
01:57:55,248 --> 01:58:00,618
several things I don't use as a result I

2546
01:57:57,889 --> 01:58:03,849
don't use exception handling I don't use

2547
01:58:00,618 --> 01:58:07,609
go-to to jump out of blocks like that

2548
01:58:03,849 --> 01:58:10,849
and I don't use if return if return if

2549
01:58:07,609 --> 01:58:12,558
return style I don't have a problem with

2550
01:58:10,849 --> 01:58:15,349
any of those things well exception

2551
01:58:12,559 --> 01:58:17,150
handling is typically not very good for

2552
01:58:15,349 --> 01:58:19,038
reasons that don't really have much to

2553
01:58:17,149 --> 01:58:22,279
do with exception handling as a core

2554
01:58:19,038 --> 01:58:27,469
concept but so I might cost against that

2555
01:58:22,279 --> 01:58:29,359
but in general I would say I don't have

2556
01:58:27,469 --> 01:58:32,529
a problem with if return subprogram I

2557
01:58:29,359 --> 01:58:32,529
just don't care for it

2558
01:58:40,590 --> 01:58:43,440
would you be willing to use

2559
01:58:42,090 --> 01:58:44,940
metaprogramming tempest through that job

2560
01:58:43,439 --> 01:58:46,439
just because you absolutely have to I'd

2561
01:58:44,939 --> 01:58:48,239
be willing to use metaprogramming for it

2562
01:58:46,439 --> 01:58:49,829
with an with an actual pre pass that I

2563
01:58:48,239 --> 01:58:51,109
write myself I wouldn't be willing to

2564
01:58:49,829 --> 01:58:53,279
use templates for it

2565
01:58:51,109 --> 01:58:56,069
templates are so broken I just I just

2566
01:58:53,279 --> 01:58:58,469
don't I if I if I'm thinking to myself I

2567
01:58:56,069 --> 01:59:01,109
need templates I just write a medical

2568
01:58:58,470 --> 01:59:04,170
pilot prepass I'm always happier that

2569
01:59:01,109 --> 01:59:08,309
way because templates just they're just

2570
01:59:04,170 --> 01:59:09,480
awful Synthesia scan the difference

2571
01:59:08,310 --> 01:59:12,300
between the pointers have undefined

2572
01:59:09,479 --> 01:59:16,919
behavior I guess we use it for the count

2573
01:59:12,300 --> 01:59:18,600
variable so it depends differences

2574
01:59:16,920 --> 01:59:20,460
between pointers don't have undefined

2575
01:59:18,600 --> 01:59:24,900
behavior if they come from the same

2576
01:59:20,460 --> 01:59:28,170
allocation and ours do so meaning if you

2577
01:59:24,899 --> 01:59:31,439
allocate a block of memory where you

2578
01:59:28,170 --> 01:59:35,399
said I'm gonna have 10,000 carry stars

2579
01:59:31,439 --> 01:59:38,039
care characters in this stream then you

2580
01:59:35,399 --> 01:59:40,469
can difference that's actually

2581
01:59:38,039 --> 01:59:44,279
guaranteed by the spec if you allocate

2582
01:59:40,470 --> 01:59:46,770
to separate blocks of memory and then do

2583
01:59:44,279 --> 01:59:48,989
a difference I think actually

2584
01:59:46,770 --> 01:59:51,570
technically if it if they are byte

2585
01:59:48,989 --> 01:59:54,869
pointers which a care start is I think

2586
01:59:51,569 --> 01:59:57,029
that may still be required to work but

2587
01:59:54,869 --> 02:00:02,399
if they were anything else it wouldn't

2588
01:59:57,029 --> 02:00:04,710
have right so if it was like if they

2589
02:00:02,399 --> 02:00:05,579
were integer pointers then that would be

2590
02:00:04,710 --> 02:00:07,739
undefined

2591
02:00:05,579 --> 02:00:09,659
because the compiler is allowed to do

2592
02:00:07,739 --> 02:00:13,439
any kind of short cutting of the

2593
02:00:09,659 --> 02:00:14,989
difference there and while anything

2594
02:00:13,439 --> 02:00:18,000
that's a power of two would probably

2595
02:00:14,989 --> 02:00:20,010
still work anything that's not a power

2596
02:00:18,000 --> 02:00:21,930
of two might not work because the

2597
02:00:20,010 --> 02:00:23,820
compiler made you shortcut math tricks

2598
02:00:21,930 --> 02:00:26,820
assuming that they're both aligned to

2599
02:00:23,819 --> 02:00:28,519
the same value since there if they were

2600
02:00:26,819 --> 02:00:31,519
in the same allocation they would be

2601
02:00:28,520 --> 02:00:31,520
right

2602
02:00:34,930 --> 02:00:41,409
I'm probably not explained as well let

2603
02:00:37,520 --> 02:00:43,970
me say it a little bit more clearly so

2604
02:00:41,409 --> 02:00:46,609
let's suppose that we allocate a block

2605
02:00:43,970 --> 02:00:48,949
of memory and we have two pointers into

2606
02:00:46,609 --> 02:00:50,689
the block of memory if we ask the

2607
02:00:48,949 --> 02:00:55,130
compiler to generate a difference

2608
02:00:50,689 --> 02:00:57,439
between those two pointers then it may

2609
02:00:55,130 --> 02:00:59,300
want to take advantage of the fact that

2610
02:00:57,439 --> 02:01:01,460
the pointers because remember difference

2611
02:00:59,300 --> 02:01:02,630
we need pointers in C it's supposed to

2612
02:01:01,460 --> 02:01:04,520
give you the difference in the pointers

2613
02:01:02,630 --> 02:01:06,800
divided by the size they're pointing to

2614
02:01:04,520 --> 02:01:08,540
right so if the things they're pointing

2615
02:01:06,800 --> 02:01:12,279
to our 12 bytes long let's say it's a

2616
02:01:08,539 --> 02:01:16,130
struct with three integers in it right

2617
02:01:12,279 --> 02:01:19,369
then it can do you know B minus a

2618
02:01:16,130 --> 02:01:22,220
divided by three that's right different

2619
02:01:19,369 --> 02:01:24,349
divided by 12 right and give you back

2620
02:01:22,220 --> 02:01:27,650
that result the problem is integer

2621
02:01:24,350 --> 02:01:30,020
divided might be slow so it might want

2622
02:01:27,649 --> 02:01:32,809
to do it faster by recognizing the fact

2623
02:01:30,020 --> 02:01:36,340
that if both of these things are known

2624
02:01:32,810 --> 02:01:39,170
to be array indices off the base value

2625
02:01:36,340 --> 02:01:41,150
so if I know I need to allocated block

2626
02:01:39,170 --> 02:01:43,100
and I made an int pointer to the

2627
02:01:41,149 --> 02:01:45,379
beginning of the block and I have an int

2628
02:01:43,100 --> 02:01:48,050
pointer to the third integer and the

2629
02:01:45,380 --> 02:01:51,470
16th integer so they're both aligned to

2630
02:01:48,050 --> 02:01:52,520
four byte boundaries right I'm sorry we

2631
02:01:51,470 --> 02:01:55,550
were talking about 12 bytes structures

2632
02:01:52,520 --> 02:01:57,140
so each one is aligned to a 12 bite down

2633
02:01:55,550 --> 02:01:59,960
Dury because they're each you know

2634
02:01:57,140 --> 02:02:04,520
brackets blah they've advanced that far

2635
02:01:59,960 --> 02:02:07,369
from the front the compiler may choose

2636
02:02:04,520 --> 02:02:11,210
to output a sequence that generates a

2637
02:02:07,369 --> 02:02:14,269
synthetic divided by 12 that only works

2638
02:02:11,210 --> 02:02:17,569
if the values were all aligned to the

2639
02:02:14,270 --> 02:02:20,360
original 12 white values so if instead

2640
02:02:17,569 --> 02:02:22,969
you just have allocations randomly in

2641
02:02:20,359 --> 02:02:24,619
space and they're not both aligned to

2642
02:02:22,970 --> 02:02:27,409
the same 12 byte offset from the

2643
02:02:24,619 --> 02:02:32,899
beginning the compiler is allowed to

2644
02:02:27,409 --> 02:02:34,849
generate code that just doesn't work not

2645
02:02:32,899 --> 02:02:38,439
the way I would expect the language but

2646
02:02:34,850 --> 02:02:38,440
that's the way they spec the language

2647
02:02:43,689 --> 02:02:47,299
how do you feel about guidelines

2648
02:02:45,470 --> 02:02:49,100
encouraging coupling enums with guards

2649
02:02:47,300 --> 02:02:51,710
and label arrays static assertions on

2650
02:02:49,100 --> 02:02:53,630
min and Max of enum values and macros to

2651
02:02:51,710 --> 02:02:57,770
establish enums creating corresponding

2652
02:02:53,630 --> 02:03:05,930
label arrays um I don't think I know

2653
02:02:57,770 --> 02:03:06,950
what you mean by label arrays I don't

2654
02:03:05,930 --> 02:03:08,869
think I know what you mean by a label

2655
02:03:06,949 --> 02:03:11,420
arrays sorry I can't really comment on

2656
02:03:08,869 --> 02:03:13,849
that one it may be just a term I'm not

2657
02:03:11,420 --> 02:03:15,500
familiar with maybe look if I understand

2658
02:03:13,850 --> 02:03:17,930
right it's about only really echo stuff

2659
02:03:15,500 --> 02:03:19,460
from handmade Network IRC to twitch RC

2660
02:03:17,930 --> 02:03:21,530
however the map a goofy a Mahiro and

2661
02:03:19,460 --> 02:03:23,270
twitches i believe hard coded so they

2662
02:03:21,529 --> 02:03:25,389
okay map the other way alright

2663
02:03:23,270 --> 02:03:27,470
well that's too bad but there you go

2664
02:03:25,390 --> 02:03:28,820
regarding enum strings would you be

2665
02:03:27,470 --> 02:03:32,060
happy if you could write procedural

2666
02:03:28,819 --> 02:03:35,199
macros to solve this problem no I want

2667
02:03:32,060 --> 02:03:37,760
to just have it know what the number

2668
02:03:35,199 --> 02:03:39,139
it's it's obvious like it should you

2669
02:03:37,760 --> 02:03:43,690
should just be able to say what's the

2670
02:03:39,140 --> 02:03:43,690
string for one of these things like I

2671
02:03:44,260 --> 02:03:48,739
mean that's a choral introspection it's

2672
02:03:47,029 --> 02:03:50,750
like a core language feature it's not it

2673
02:03:48,739 --> 02:03:53,210
shouldn't be something that you have to

2674
02:03:50,750 --> 02:03:54,949
add to the language it's like the most

2675
02:03:53,210 --> 02:03:56,329
important language feature I mean I'm a

2676
02:03:54,949 --> 02:03:59,149
meta programming central kind of person

2677
02:03:56,329 --> 02:04:00,829
in my mind that's like day one it should

2678
02:03:59,149 --> 02:04:02,569
be able to do that like before it can

2679
02:04:00,829 --> 02:04:04,550
even add two numbers together to be able

2680
02:04:02,569 --> 02:04:07,069
to tell you what the name of an enum is

2681
02:04:04,550 --> 02:04:13,550
in medico like that's more important

2682
02:04:07,069 --> 02:04:14,960
than math as a student who's being

2683
02:04:13,550 --> 02:04:16,190
taught see this lesson College can

2684
02:04:14,960 --> 02:04:18,710
explain to me why you think it is a

2685
02:04:16,189 --> 02:04:20,089
terrible language yeah I mean I've

2686
02:04:18,710 --> 02:04:25,399
talked about it lots of times on stream

2687
02:04:20,090 --> 02:04:27,289
but basically C++ if you look at what I

2688
02:04:25,399 --> 02:04:29,389
would consider kind of the core metric

2689
02:04:27,289 --> 02:04:32,329
of a programming language which is

2690
02:04:29,390 --> 02:04:35,300
programming express ability versus

2691
02:04:32,329 --> 02:04:39,199
language complexity it's a horrible

2692
02:04:35,300 --> 02:04:42,079
language right it's absolutely massive

2693
02:04:39,199 --> 02:04:45,859
C++ is one of the largest languages in

2694
02:04:42,079 --> 02:04:47,569
existence I guess I don't want to say

2695
02:04:45,859 --> 02:04:49,189
it's the largest language in existence

2696
02:04:47,569 --> 02:04:51,649
because I don't know if that's true but

2697
02:04:49,189 --> 02:04:53,359
it might be the largest language is

2698
02:04:51,649 --> 02:04:54,229
instance if if someone out there is a

2699
02:04:53,359 --> 02:04:56,149
language

2700
02:04:54,229 --> 02:04:58,159
a computer languages person could you

2701
02:04:56,149 --> 02:05:00,679
tell me is C++ the largest language

2702
02:04:58,159 --> 02:05:02,569
because it might be right if it's not

2703
02:05:00,680 --> 02:05:07,070
it's up there right you know if you'd

2704
02:05:02,569 --> 02:05:08,779
listed the top 10 largest specs so that

2705
02:05:07,069 --> 02:05:10,880
makes them hard to implement it makes it

2706
02:05:08,779 --> 02:05:12,739
harder to learn it makes it difficult to

2707
02:05:10,880 --> 02:05:13,760
really know all the rules because even

2708
02:05:12,739 --> 02:05:17,059
people who really think they know the

2709
02:05:13,760 --> 02:05:20,420
real see us often don't right it's huge

2710
02:05:17,060 --> 02:05:22,280
right um so it's up there somewhere you

2711
02:05:20,420 --> 02:05:23,440
know it's in the top five top ten

2712
02:05:22,279 --> 02:05:26,750
largest languages

2713
02:05:23,439 --> 02:05:28,549
it hardly is able to do anything it has

2714
02:05:26,750 --> 02:05:30,319
almost no features like we were just

2715
02:05:28,550 --> 02:05:32,210
saying it can't even tell you like

2716
02:05:30,319 --> 02:05:36,109
here's the thing it can't tell you what

2717
02:05:32,210 --> 02:05:37,310
are the members of this structure you're

2718
02:05:36,109 --> 02:05:39,799
talking about one of the largest

2719
02:05:37,310 --> 02:05:43,150
languages in existence it can't even

2720
02:05:39,800 --> 02:05:47,690
iterate over the members of a structure

2721
02:05:43,149 --> 02:05:49,639
like they have added every single random

2722
02:05:47,689 --> 02:05:53,029
thing that came into their heads to C++

2723
02:05:49,640 --> 02:05:55,039
and almost none of them are useful right

2724
02:05:53,029 --> 02:05:57,050
and so it's just I think it's an

2725
02:05:55,039 --> 02:05:58,970
incredible it's almost like an exercise

2726
02:05:57,050 --> 02:06:03,920
it's remarkable really if you think

2727
02:05:58,970 --> 02:06:06,860
about it C++ has gone 30 years adding

2728
02:06:03,920 --> 02:06:09,109
stuff all the time having huge amounts

2729
02:06:06,859 --> 02:06:12,289
of stuff and it's gained almost no

2730
02:06:09,109 --> 02:06:14,299
actual useful features like most of the

2731
02:06:12,289 --> 02:06:15,680
features are critically broken or worse

2732
02:06:14,300 --> 02:06:21,110
than the version that you would have

2733
02:06:15,680 --> 02:06:22,940
just written in C it's crazy I just

2734
02:06:21,109 --> 02:06:25,099
don't know how they ended up being so

2735
02:06:22,939 --> 02:06:26,750
bad at it so what you end up with is a

2736
02:06:25,100 --> 02:06:28,250
language that has some good beginnings

2737
02:06:26,750 --> 02:06:30,920
because C was a good language at the

2738
02:06:28,250 --> 02:06:33,350
time but that every high-level language

2739
02:06:30,920 --> 02:06:35,449
feature that you actually wanted got

2740
02:06:33,350 --> 02:06:37,300
added in a totally broken way or not

2741
02:06:35,449 --> 02:06:42,920
added in a halt which is even worse

2742
02:06:37,300 --> 02:06:46,130
right and so it's just a terrible

2743
02:06:42,920 --> 02:06:47,810
language it's impressively bad and it's

2744
02:06:46,130 --> 02:06:50,390
impressively bad from the standpoint of

2745
02:06:47,810 --> 02:06:52,610
it's not that it's new it's not that

2746
02:06:50,390 --> 02:06:54,950
it's young it's not that it hasn't had

2747
02:06:52,609 --> 02:06:57,679
plenty of examples of how it could be

2748
02:06:54,949 --> 02:07:00,139
made better or use cases out there

2749
02:06:57,680 --> 02:07:02,270
there's tons of code that was flowing

2750
02:07:00,140 --> 02:07:07,309
around and C to look at they just

2751
02:07:02,270 --> 02:07:19,489
absolutely missed it every single time

2752
02:07:07,309 --> 02:07:21,170
every single time off topic what is your

2753
02:07:19,488 --> 02:07:24,138
stance a compile-time cogeneration like

2754
02:07:21,170 --> 02:07:27,440
Indy do you mean like like the feet the

2755
02:07:24,139 --> 02:07:28,159
meta pregnancies in like ji I am 100%

2756
02:07:27,439 --> 02:07:30,198
for them

2757
02:07:28,158 --> 02:07:35,328
I don't program indeed though so I

2758
02:07:30,198 --> 02:07:37,638
couldn't tell you about label arrays

2759
02:07:35,328 --> 02:07:39,738
arrays the same size of the enum with

2760
02:07:37,639 --> 02:07:41,569
strings correspond to the label of each

2761
02:07:39,738 --> 02:07:43,250
enum item four contiguous enums or

2762
02:07:41,569 --> 02:07:46,158
couples of labels and offset for sparse

2763
02:07:43,250 --> 02:07:48,050
all your emails oh okay

2764
02:07:46,158 --> 02:07:51,769
so going back to the original question

2765
02:07:48,050 --> 02:07:53,750
then sorry i'm i will reread the

2766
02:07:51,770 --> 02:07:55,010
original question with that how do you

2767
02:07:53,750 --> 02:07:56,750
feel about guidelines encouraging

2768
02:07:55,010 --> 02:07:58,369
coupling enums with guards and label

2769
02:07:56,750 --> 02:08:00,738
arrays static assertions on min and Max

2770
02:07:58,368 --> 02:08:02,448
values and macros to establish enums

2771
02:08:00,738 --> 02:08:06,468
creating the corresponding label arrays

2772
02:08:02,448 --> 02:08:08,629
um I do them sometimes if I have lots

2773
02:08:06,469 --> 02:08:12,198
and lots of enums and I edit them a lot

2774
02:08:08,630 --> 02:08:15,349
I I will use a pound include with the

2775
02:08:12,198 --> 02:08:18,678
enums in the even INL file to generate

2776
02:08:15,349 --> 02:08:21,050
both if I don't have them at a program

2777
02:08:18,679 --> 02:08:23,779
available so I I do though I do do that

2778
02:08:21,050 --> 02:08:26,349
sometimes it's a little cumbersome but

2779
02:08:23,779 --> 02:08:26,349
it works

2780
02:08:32,609 --> 02:08:39,759
so all right I'm gonna wrap it up here

2781
02:08:36,270 --> 02:08:41,640
let's go ahead and get ready to stop

2782
02:08:39,760 --> 02:08:47,320
recording

2783
02:08:41,640 --> 02:08:48,430
all right let's thank you everyone for

2784
02:08:47,319 --> 02:08:49,599
joining me for those sent a handmade

2785
02:08:48,430 --> 02:08:51,909
hero sort of pleasure recording with you

2786
02:08:49,600 --> 02:08:53,110
as always if you would like to follow

2787
02:08:51,909 --> 02:08:54,789
along the series at home you can always

2788
02:08:53,109 --> 02:08:56,619
peer to the game on handmade hero 2 org

2789
02:08:54,789 --> 02:08:58,510
come to the source code so you're

2790
02:08:56,619 --> 02:09:01,449
welcome to play around with it do your

2791
02:08:58,510 --> 02:09:03,400
own experimentation and try out stuff

2792
02:09:01,449 --> 02:09:05,529
inside the code base which is a great

2793
02:09:03,399 --> 02:09:08,439
way to learn in addition to watching

2794
02:09:05,529 --> 02:09:10,539
series we'll be back here tomorrow when

2795
02:09:08,439 --> 02:09:13,269
we'll try to get that translation

2796
02:09:10,539 --> 02:09:16,449
process working and that'll start our

2797
02:09:13,270 --> 02:09:19,960
kind of debugging of the new sort of hht

2798
02:09:16,449 --> 02:09:22,149
based import/export process it's pretty

2799
02:09:19,960 --> 02:09:24,039
complicated stuff you know it's kind of

2800
02:09:22,149 --> 02:09:25,149
a more proper art pipeline now but you

2801
02:09:24,039 --> 02:09:26,859
know we did a good job keeping it pretty

2802
02:09:25,149 --> 02:09:28,179
contained I think and so hopefully we

2803
02:09:26,859 --> 02:09:29,769
should have something tomorrow by the

2804
02:09:28,180 --> 02:09:31,659
end of tomorrow that's you know somewhat

2805
02:09:29,770 --> 02:09:34,180
reasonable and then we can kind of look

2806
02:09:31,659 --> 02:09:35,889
at cleaning it up so PU back here for

2807
02:09:34,180 --> 02:09:37,810
that till then have fun for everyone and

2808
02:09:35,890 --> 02:09:40,260
I will see you on the Internet

2809
02:09:37,810 --> 02:09:40,260
take it easy everybody

