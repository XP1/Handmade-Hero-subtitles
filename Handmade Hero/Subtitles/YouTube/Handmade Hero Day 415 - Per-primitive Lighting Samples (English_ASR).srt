1
00:00:01,399 --> 00:00:06,089
hello everyone and welcome to handmade

2
00:00:04,650 --> 00:00:09,690
Hero the show recoat a complete game

3
00:00:06,089 --> 00:00:15,389
live on stream we are going to be doing

4
00:00:09,689 --> 00:00:17,329
some work with lighting today we kind of

5
00:00:15,388 --> 00:00:19,259
got to a place where the lighting

6
00:00:17,329 --> 00:00:22,829
bounces were actually working pretty

7
00:00:19,260 --> 00:00:25,289
well last time but I think today what we

8
00:00:22,829 --> 00:00:28,528
probably want to start looking at a

9
00:00:25,289 --> 00:00:30,449
little more seriously because I think

10
00:00:28,528 --> 00:00:34,019
it's probably our biggest problem at the

11
00:00:30,449 --> 00:00:36,600
moment is how we're going to correctly

12
00:00:34,020 --> 00:00:40,579
deal with the reconstruction of the

13
00:00:36,600 --> 00:00:42,719
lighting from the samples that we have

14
00:00:40,579 --> 00:00:44,520
because that's actually something that

15
00:00:42,719 --> 00:00:47,969
right now we don't have a very good

16
00:00:44,520 --> 00:00:49,079
handle on furthermore I think the other

17
00:00:47,969 --> 00:00:52,020
thing that we bob would probably want to

18
00:00:49,079 --> 00:00:53,808
do and we might do this first because

19
00:00:52,020 --> 00:00:56,640
it's a little more straightforward is

20
00:00:53,808 --> 00:00:59,128
now that we pretty much know how we want

21
00:00:56,640 --> 00:01:03,030
things to work we might want to do

22
00:00:59,128 --> 00:01:06,450
something where our render system allows

23
00:01:03,030 --> 00:01:10,439
you to send down two things one

24
00:01:06,450 --> 00:01:13,409
occluders that are blocking light and we

25
00:01:10,438 --> 00:01:15,359
could send those down separately so we

26
00:01:13,409 --> 00:01:18,210
can basically say like okay not

27
00:01:15,359 --> 00:01:21,239
everything like for example sprites are

28
00:01:18,209 --> 00:01:24,539
not occluders cubes are occluders

29
00:01:21,239 --> 00:01:26,640
sprites will have a separate thing sent

30
00:01:24,540 --> 00:01:28,560
down with them let's say which says what

31
00:01:26,640 --> 00:01:34,859
the shape of the occluder is or how the

32
00:01:28,560 --> 00:01:37,799
occluder works so that we won't Jimmy so

33
00:01:34,859 --> 00:01:44,629
we won't actually have to worry about

34
00:01:37,799 --> 00:01:45,750
that stuff like the incredibly weird

35
00:01:44,629 --> 00:01:49,618
bent

36
00:01:45,750 --> 00:01:52,409
you know sprites for so things that

37
00:01:49,618 --> 00:01:55,109
still face the camera are drawn properly

38
00:01:52,409 --> 00:01:56,759
so that those themselves aren't what's

39
00:01:55,109 --> 00:02:00,269
blocking the light there's actually like

40
00:01:56,759 --> 00:02:02,399
a little invisible cube or something in

41
00:02:00,269 --> 00:02:05,069
there that is what's blocking the light

42
00:02:02,399 --> 00:02:07,560
so that the shadowing can work more

43
00:02:05,069 --> 00:02:10,459
correctly even though the drawing is not

44
00:02:07,560 --> 00:02:10,459
done quite that way

45
00:02:11,759 --> 00:02:18,188
so that's one thing the other thing that

46
00:02:16,389 --> 00:02:20,859
we can choose to do there is think a

47
00:02:18,188 --> 00:02:23,979
little bit about how we want to specify

48
00:02:20,860 --> 00:02:26,290
the sampling area as well so for example

49
00:02:23,979 --> 00:02:30,369
right now we always sample things based

50
00:02:26,289 --> 00:02:32,650
entirely on the occluders themselves but

51
00:02:30,370 --> 00:02:35,799
we don't have to do that right we can

52
00:02:32,650 --> 00:02:38,010
choose our gather points separately from

53
00:02:35,799 --> 00:02:41,140
exactly where our occluders happen to be

54
00:02:38,009 --> 00:02:44,979
if we wanted to there's nothing really

55
00:02:41,139 --> 00:02:48,009
stopping us from doing that so we kind

56
00:02:44,979 --> 00:02:50,280
of have to do some thinking about how

57
00:02:48,009 --> 00:02:52,358
that sort of thing wants to work and

58
00:02:50,280 --> 00:02:54,759
there's a lot of different ways that we

59
00:02:52,359 --> 00:02:56,349
can do it and so that's I think the next

60
00:02:54,759 --> 00:02:58,060
thing that we have to experiment with in

61
00:02:56,348 --> 00:03:00,548
order to converge towards a better

62
00:02:58,060 --> 00:03:02,019
lighting solution because we sort of

63
00:03:00,549 --> 00:03:04,000
have a good way to bounce light around

64
00:03:02,019 --> 00:03:06,400
now and while we will refine that a

65
00:03:04,000 --> 00:03:08,289
little bit in the future I think what's

66
00:03:06,400 --> 00:03:10,829
holding us back at the moment is really

67
00:03:08,289 --> 00:03:13,298
has more to do with specifying and

68
00:03:10,829 --> 00:03:15,280
reconstructing their lighting samples

69
00:03:13,299 --> 00:03:17,139
than it does with computing the actual

70
00:03:15,280 --> 00:03:21,250
lighting which is something that I think

71
00:03:17,139 --> 00:03:23,919
is not quite as it's not quite as

72
00:03:21,250 --> 00:03:25,060
problematic at the moment so let me just

73
00:03:23,919 --> 00:03:27,969
give you a little example of what I'm

74
00:03:25,060 --> 00:03:35,109
talking about if I go ahead here and

75
00:03:27,969 --> 00:03:42,908
load up our current state of the game so

76
00:03:35,109 --> 00:03:45,489
here's that project file if I go ahead

77
00:03:42,908 --> 00:03:47,469
and build the project file what you will

78
00:03:45,489 --> 00:03:50,349
notice is that at the top of the

79
00:03:47,469 --> 00:03:53,109
platform file we do have a thing which

80
00:03:50,348 --> 00:03:56,289
just is like a hard-coded lighting

81
00:03:53,109 --> 00:03:57,549
resolution and what we can do in the

82
00:03:56,289 --> 00:03:59,439
future is this doesn't have to be

83
00:03:57,549 --> 00:04:01,479
hard-coded we can easily just allocate

84
00:03:59,439 --> 00:04:03,818
space for these dynamically so that you

85
00:04:01,479 --> 00:04:05,829
could switch their resolution of the

86
00:04:03,818 --> 00:04:07,628
lighting on the fly so we just have it

87
00:04:05,829 --> 00:04:08,799
hard-coded for now because that's was

88
00:04:07,628 --> 00:04:10,929
the easier thing to do at the time

89
00:04:08,799 --> 00:04:12,549
there's nothing magic about it that

90
00:04:10,930 --> 00:04:14,829
means it has to be hard-coded so that's

91
00:04:12,549 --> 00:04:17,199
not really a concern but well you'll

92
00:04:14,829 --> 00:04:23,019
notice is if I change it to large cells

93
00:04:17,199 --> 00:04:24,340
so this is 8 8 by 8 by 8 voxel so the

94
00:04:23,019 --> 00:04:26,439
cells

95
00:04:24,339 --> 00:04:28,299
are twice as large in every dimension as

96
00:04:26,439 --> 00:04:32,439
say the sixteen by sixteen when was

97
00:04:28,300 --> 00:04:35,020
right so if I run the game with that as

98
00:04:32,439 --> 00:04:37,389
the arrangement and I asked for a

99
00:04:35,019 --> 00:04:38,769
lighting solution what you can see is

100
00:04:37,389 --> 00:04:41,168
that the lighting solution actually

101
00:04:38,769 --> 00:04:42,909
looks pretty reasonable and when I

102
00:04:41,168 --> 00:04:44,829
switch back I actually get something

103
00:04:42,910 --> 00:04:46,630
that's that's probably usable now

104
00:04:44,829 --> 00:04:49,569
there's some things with it that still

105
00:04:46,629 --> 00:04:50,829
probably should be improved so I'm not

106
00:04:49,569 --> 00:04:53,589
trying to suggest that it's great or

107
00:04:50,829 --> 00:04:57,009
anything but it's definitely a lighting

108
00:04:53,589 --> 00:05:00,429
solution that you know could could be

109
00:04:57,009 --> 00:05:04,599
could be considered usable already even

110
00:05:00,430 --> 00:05:06,009
in its current state so you know because

111
00:05:04,600 --> 00:05:07,660
remember these will all have bitmaps on

112
00:05:06,009 --> 00:05:09,819
them eventually too so we're looking at

113
00:05:07,660 --> 00:05:11,770
kind of pure lighting right now

114
00:05:09,819 --> 00:05:15,279
whereas in the future it will be even

115
00:05:11,769 --> 00:05:17,560
noisier because of the bitmap interface

116
00:05:15,279 --> 00:05:19,089
that's on there so be less heart it will

117
00:05:17,560 --> 00:05:20,649
be much harder for you to tell that

118
00:05:19,089 --> 00:05:23,099
there are certain bugs in the lighting

119
00:05:20,649 --> 00:05:25,149
interpolation or things like that right

120
00:05:23,100 --> 00:05:26,680
okay

121
00:05:25,149 --> 00:05:28,560
so looking at this that's actually not a

122
00:05:26,680 --> 00:05:30,189
bad lighting solution like I'm actually

123
00:05:28,560 --> 00:05:32,560
okay with that

124
00:05:30,189 --> 00:05:36,100
and I wouldn't be like you know super

125
00:05:32,560 --> 00:05:38,978
worried about this as my lighting

126
00:05:36,100 --> 00:05:41,770
solution this is fine however if I am

127
00:05:38,978 --> 00:05:43,870
now to change my lighting solution over

128
00:05:41,769 --> 00:05:48,430
to sixteen by sixteen by sixteen

129
00:05:43,870 --> 00:05:50,410
oops which is a more detailed lighting

130
00:05:48,430 --> 00:05:52,150
solution so this is actually like a

131
00:05:50,410 --> 00:05:57,460
better lighting solution if you will

132
00:05:52,149 --> 00:06:00,459
right in a way it's basically keeping

133
00:05:57,459 --> 00:06:02,439
more accurate track of where things were

134
00:06:00,459 --> 00:06:04,649
sorting wise I mean it's not really more

135
00:06:02,439 --> 00:06:09,160
accurate but it's like I should I put it

136
00:06:04,649 --> 00:06:11,228
it's the vaak the voxels are now more

137
00:06:09,160 --> 00:06:13,510
smaller so when you ask for what's in

138
00:06:11,228 --> 00:06:17,139
one you only get stuff that's closer to

139
00:06:13,509 --> 00:06:20,259
you than before right but what you see

140
00:06:17,139 --> 00:06:23,019
is it starts to ruin the lighting right

141
00:06:20,259 --> 00:06:26,589
and the reason is because you get too

142
00:06:23,019 --> 00:06:28,120
many voxel samples and there's places in

143
00:06:26,589 --> 00:06:29,859
the voxel where just we didn't take a

144
00:06:28,120 --> 00:06:31,780
lighting sample at all and so the

145
00:06:29,860 --> 00:06:33,788
interpolation starts to break down or

146
00:06:31,779 --> 00:06:35,619
there's some bugs in it like we don't

147
00:06:33,788 --> 00:06:38,019
really know but this would be this would

148
00:06:35,620 --> 00:06:41,800
be perfectly explica ball by

149
00:06:38,019 --> 00:06:44,409
I just said and that's bad because we

150
00:06:41,800 --> 00:06:47,470
would like to be able to run the voxel

151
00:06:44,410 --> 00:06:54,159
at a fairly reasonable discritization

152
00:06:47,470 --> 00:06:57,699
level because the bigger the voxel the

153
00:06:54,158 --> 00:07:01,360
the bigger the voxel region is the

154
00:06:57,699 --> 00:07:04,030
slower our lighting runs if the voxels

155
00:07:01,360 --> 00:07:06,490
are very large then each pixel when it

156
00:07:04,029 --> 00:07:09,279
goes to fetch all of the lights it needs

157
00:07:06,490 --> 00:07:12,220
to consider is going to be fetching way

158
00:07:09,279 --> 00:07:14,348
more information that it has to sift

159
00:07:12,220 --> 00:07:18,039
through and that is what will cost the

160
00:07:14,348 --> 00:07:19,629
majority of our time right so we want to

161
00:07:18,038 --> 00:07:23,139
be able to make these voxels actually

162
00:07:19,629 --> 00:07:26,620
very small if we wanted to a 32 by 32 by

163
00:07:23,139 --> 00:07:31,360
32 voxel oh we installed something for

164
00:07:26,620 --> 00:07:33,060
this calculator thing didn't we speed

165
00:07:31,360 --> 00:07:36,009
crunch people worth telling me to try

166
00:07:33,060 --> 00:07:40,810
maybe I should try this program I will

167
00:07:36,009 --> 00:07:43,210
paint it to the taskbar it was

168
00:07:40,810 --> 00:07:47,139
recommended on stream so if I do 32

169
00:07:43,209 --> 00:07:50,019
times 32 times 32 then that is the

170
00:07:47,139 --> 00:07:52,718
number of cells in our voxel right if I

171
00:07:50,019 --> 00:07:58,750
assume that each voxel is using

172
00:07:52,718 --> 00:08:02,620
something on the order of a u16 right

173
00:07:58,750 --> 00:08:08,408
then it's really only times 2 that

174
00:08:02,620 --> 00:08:10,778
that's only 64 K right so you know we

175
00:08:08,408 --> 00:08:13,149
can have a very detailed voxel here

176
00:08:10,778 --> 00:08:16,689
right like even a voxel that was 64 by

177
00:08:13,149 --> 00:08:19,299
64 by 64 is only gonna be half a

178
00:08:16,689 --> 00:08:21,459
megabyte I mean we could go up probably

179
00:08:19,300 --> 00:08:25,840
I don't even know how far we could go

180
00:08:21,459 --> 00:08:29,978
here but we could go pretty far that is

181
00:08:25,839 --> 00:08:31,989
only 32 megabytes right so you know we

182
00:08:29,978 --> 00:08:35,168
could choose to have an extremely

183
00:08:31,990 --> 00:08:37,570
detailed voxel here like so and not

184
00:08:35,168 --> 00:08:39,968
really be using very much graphics card

185
00:08:37,570 --> 00:08:42,520
memory compared to what you have today

186
00:08:39,969 --> 00:08:45,670
and that would allow our lighting to be

187
00:08:42,519 --> 00:08:48,278
like really fast right but the problem

188
00:08:45,669 --> 00:08:51,439
is if we actually look at what will

189
00:08:48,278 --> 00:08:54,110
occur when we see this result

190
00:08:51,440 --> 00:08:58,240
you can see where the lighting samples

191
00:08:54,110 --> 00:09:01,340
are taken now quite clearly right and

192
00:08:58,240 --> 00:09:05,060
there's just not enough information in

193
00:09:01,340 --> 00:09:07,790
each voxel area right so when it goes to

194
00:09:05,059 --> 00:09:09,919
interpolate between them you know the

195
00:09:07,789 --> 00:09:14,199
next voxel area is like right there

196
00:09:09,919 --> 00:09:17,449
right and so the problem that we see now

197
00:09:14,200 --> 00:09:27,890
that that we need to figure out a way to

198
00:09:17,450 --> 00:09:30,910
start working away from is that voxel

199
00:09:27,889 --> 00:09:34,669
queries aren't necessarily what we want

200
00:09:30,909 --> 00:09:36,319
in all cases because while they're

201
00:09:34,669 --> 00:09:39,829
really efficient at telling us what's

202
00:09:36,320 --> 00:09:42,290
next to us they're not so efficient at

203
00:09:39,830 --> 00:09:45,050
telling us what the closest things to us

204
00:09:42,289 --> 00:09:49,159
are right because that's actually what

205
00:09:45,049 --> 00:09:50,539
we want to know we want some let me go

206
00:09:49,159 --> 00:09:51,949
ahead and pop over to Milton actually

207
00:09:50,539 --> 00:09:58,549
just so I can describe this in a little

208
00:09:51,950 --> 00:10:00,290
bit better detail yeah gonna grab the

209
00:09:58,549 --> 00:10:05,479
drawing tablet here for a second just so

210
00:10:00,289 --> 00:10:08,750
I can illustrate something so let's say

211
00:10:05,480 --> 00:10:19,149
I go ahead and open up Milton here and

212
00:10:08,750 --> 00:10:27,730
draw a little picture of this J 4 1 5 so

213
00:10:19,149 --> 00:10:33,230
voxel interpolation of lighting that

214
00:10:27,730 --> 00:10:35,629
handwriting some majesty of it so the

215
00:10:33,230 --> 00:10:37,700
problem that we face here and I could

216
00:10:35,629 --> 00:10:39,320
just do the 2d version because easier to

217
00:10:37,700 --> 00:10:40,340
visualize but the 3d version just gets

218
00:10:39,320 --> 00:10:41,510
worse because now you have one more

219
00:10:40,340 --> 00:10:46,490
dimension in which the same thing is

220
00:10:41,509 --> 00:10:51,110
true you can imagine what happens for

221
00:10:46,490 --> 00:10:54,350
this problem we have some lighting like

222
00:10:51,110 --> 00:10:57,320
so right each of these lighting

223
00:10:54,350 --> 00:11:00,680
locations will have an actual valid

224
00:10:57,320 --> 00:11:04,730
value of lighting at it and so if we are

225
00:11:00,679 --> 00:11:07,429
to pick some point let's say here

226
00:11:04,730 --> 00:11:11,149
question we are trying to ask of our

227
00:11:07,429 --> 00:11:14,539
system is I would like to know what the

228
00:11:11,149 --> 00:11:16,339
clothes sample points are so that I may

229
00:11:14,539 --> 00:11:18,649
mix them together and produce a

230
00:11:16,339 --> 00:11:22,100
reasonable lighting result for my

231
00:11:18,649 --> 00:11:25,610
location right that's what I'm trying to

232
00:11:22,100 --> 00:11:27,170
do so in the case where the voxel areas

233
00:11:25,610 --> 00:11:31,370
are large let's say that this whole

234
00:11:27,169 --> 00:11:32,990
thing is fixed in one voxel right then

235
00:11:31,370 --> 00:11:34,909
this is no problem because not only I'm

236
00:11:32,990 --> 00:11:37,159
gonna light by these voxels I'm also

237
00:11:34,909 --> 00:11:39,110
gonna slowly blend to the lighting of

238
00:11:37,159 --> 00:11:41,569
this next voxel over as I move in this

239
00:11:39,110 --> 00:11:43,399
direction so as I move this point over

240
00:11:41,570 --> 00:11:46,250
this way I'm gonna be including more and

241
00:11:43,399 --> 00:11:49,070
more stamp weight from samples over here

242
00:11:46,250 --> 00:11:52,269
so not really a big deal and we get some

243
00:11:49,070 --> 00:11:57,528
reasonable results out of it right

244
00:11:52,269 --> 00:11:59,720
however what we don't have is anything

245
00:11:57,528 --> 00:12:04,669
that allows us to solve the situation

246
00:11:59,720 --> 00:12:08,079
where it looks more like this let's say

247
00:12:04,669 --> 00:12:13,490
the voxels are only that big now

248
00:12:08,078 --> 00:12:15,828
well now hey I know really definitively

249
00:12:13,490 --> 00:12:17,720
when I ask for what's nearby me I know

250
00:12:15,828 --> 00:12:19,669
that nothing is immediately nearby me

251
00:12:17,720 --> 00:12:22,730
but that's not really what I want to

252
00:12:19,669 --> 00:12:24,169
know I wanted to know if I had to go get

253
00:12:22,730 --> 00:12:26,120
a lighting sample where would I get it

254
00:12:24,169 --> 00:12:28,519
from right I need lighting samples I

255
00:12:26,120 --> 00:12:31,129
can't the answer there are no lighting

256
00:12:28,519 --> 00:12:35,659
samples next to you while accurate is

257
00:12:31,129 --> 00:12:37,698
not useful right I need to know about

258
00:12:35,659 --> 00:12:39,559
these lighting samples and I need to get

259
00:12:37,698 --> 00:12:44,028
enough of them so that I can actually do

260
00:12:39,559 --> 00:12:46,609
some work right and so that's the

261
00:12:44,028 --> 00:12:48,379
current problem that we face when

262
00:12:46,610 --> 00:12:51,860
dealing with this voxel ization

263
00:12:48,379 --> 00:12:58,970
situation is we're not really doing a

264
00:12:51,860 --> 00:13:01,339
good enough job here of representing a

265
00:12:58,970 --> 00:13:05,778
query that gives us back the lighting

266
00:13:01,339 --> 00:13:08,329
samples that are nearby and it's fun

267
00:13:05,778 --> 00:13:11,208
clear how to really do that this is a

268
00:13:08,328 --> 00:13:12,679
classic reconstruction problem it would

269
00:13:11,208 --> 00:13:16,389
be great if I was an expert in

270
00:13:12,679 --> 00:13:16,389
reconstruction problems I'm not

271
00:13:18,830 --> 00:13:24,360
so that does put us in a bit of a

272
00:13:21,090 --> 00:13:26,310
disadvantage but whether or other

273
00:13:24,360 --> 00:13:31,370
disadvantage or not we're gonna have to

274
00:13:26,309 --> 00:13:36,419
solve it so thinking through in my head

275
00:13:31,370 --> 00:13:38,279
some information about this what I'm

276
00:13:36,419 --> 00:13:43,229
kind of thinking is you know if you had

277
00:13:38,279 --> 00:13:48,259
a spatial query one thing you might want

278
00:13:43,230 --> 00:13:52,289
to do is have this query be somewhat

279
00:13:48,259 --> 00:13:54,980
adaptive based on the density of

280
00:13:52,289 --> 00:13:57,179
lighting samples in a region right I

281
00:13:54,980 --> 00:13:59,269
mean that's another way we could sort of

282
00:13:57,179 --> 00:14:02,849
think about it a little bit better right

283
00:13:59,269 --> 00:14:04,319
so let's say for example you were

284
00:14:02,850 --> 00:14:07,560
putting in lighting samples into

285
00:14:04,320 --> 00:14:09,210
something right you could imagine an

286
00:14:07,559 --> 00:14:12,389
alternate style of system that basically

287
00:14:09,210 --> 00:14:15,690
said well once I get too many lighting

288
00:14:12,389 --> 00:14:18,720
samples in an area then like I split the

289
00:14:15,690 --> 00:14:20,790
area right so once you know I get too

290
00:14:18,720 --> 00:14:23,040
many I split it in half or something

291
00:14:20,789 --> 00:14:24,719
right and then I keep adding them and

292
00:14:23,039 --> 00:14:27,000
once I get too many of those I split

293
00:14:24,720 --> 00:14:28,470
that in half right and I keep adding and

294
00:14:27,000 --> 00:14:30,389
then I split that one in half or

295
00:14:28,470 --> 00:14:36,360
something and then I keep adding right

296
00:14:30,389 --> 00:14:41,009
and so on so if the lighting locations

297
00:14:36,360 --> 00:14:42,990
were done on CPU side that doesn't seem

298
00:14:41,009 --> 00:14:45,689
like a bad idea necessarily it's hard to

299
00:14:42,990 --> 00:14:47,820
say but you could imagine doing

300
00:14:45,690 --> 00:14:49,620
something like constructing a KD tree

301
00:14:47,820 --> 00:14:53,129
where now you would basically say well

302
00:14:49,620 --> 00:14:55,200
we break the world into buckets and the

303
00:14:53,129 --> 00:14:58,019
buckets all have a reasonable number of

304
00:14:55,200 --> 00:15:00,390
lighting samples so when you query your

305
00:14:58,019 --> 00:15:02,129
location you will get a bucket back that

306
00:15:00,389 --> 00:15:04,350
has like for lighting samples because

307
00:15:02,129 --> 00:15:09,809
there are no buckets that don't have for

308
00:15:04,350 --> 00:15:12,810
letting samples or more right and that

309
00:15:09,809 --> 00:15:14,339
seems somewhat useful to solving the

310
00:15:12,809 --> 00:15:17,039
first problem which is not enough

311
00:15:14,340 --> 00:15:19,080
lighting samples in my region right so

312
00:15:17,039 --> 00:15:20,490
we could imagine constructing a data

313
00:15:19,080 --> 00:15:22,050
structure that was a little bit

314
00:15:20,490 --> 00:15:25,039
different than a voxel although still

315
00:15:22,049 --> 00:15:29,279
quite simple and it would have that

316
00:15:25,039 --> 00:15:30,809
property to it right the problem with

317
00:15:29,279 --> 00:15:33,120
that is

318
00:15:30,809 --> 00:15:35,669
if we do want to do that construction of

319
00:15:33,120 --> 00:15:39,720
the location of the letting samples on

320
00:15:35,669 --> 00:15:42,389
the GPU that could be harder if we do it

321
00:15:39,720 --> 00:15:44,610
on the CPU side it's not because the CPU

322
00:15:42,389 --> 00:15:46,199
side has random access to memory can do

323
00:15:44,610 --> 00:15:48,029
anything it really wants to doesn't

324
00:15:46,200 --> 00:15:50,700
necessarily have to be parallelized

325
00:15:48,029 --> 00:15:53,159
to be fast depending on how many of

326
00:15:50,700 --> 00:15:54,629
these we're talking about so on so you

327
00:15:53,159 --> 00:15:57,899
could see this being something that

328
00:15:54,629 --> 00:15:59,519
maybe it's possible to do every frame or

329
00:15:57,899 --> 00:16:01,980
every two frames you know we can update

330
00:15:59,519 --> 00:16:06,120
our lighting sample points more slowly

331
00:16:01,980 --> 00:16:07,590
if we have to for example so you know

332
00:16:06,120 --> 00:16:09,840
you could see this being something that

333
00:16:07,590 --> 00:16:11,850
that is plausible to do on the CPU side

334
00:16:09,840 --> 00:16:13,560
and send down and then we could use

335
00:16:11,850 --> 00:16:15,180
whatever structure you wanted because we

336
00:16:13,559 --> 00:16:18,089
can always bake that structure into a

337
00:16:15,179 --> 00:16:21,509
texture and then the GPU is the GPU is

338
00:16:18,090 --> 00:16:24,509
just fine it using a data structure like

339
00:16:21,509 --> 00:16:26,970
this it's just harder for it to build it

340
00:16:24,509 --> 00:16:28,500
and you can't do it but usually you end

341
00:16:26,970 --> 00:16:30,930
up with wanting to do things like use

342
00:16:28,500 --> 00:16:32,519
CUDA or something or a computer you

343
00:16:30,929 --> 00:16:38,069
typically don't want to be doing this

344
00:16:32,519 --> 00:16:41,689
sort of thing in a non random access

345
00:16:38,070 --> 00:16:46,020
fashion but it is done it's not

346
00:16:41,690 --> 00:16:48,780
completely of question so that's one

347
00:16:46,019 --> 00:16:50,759
thing I'm thinking of and like I said

348
00:16:48,779 --> 00:16:53,009
the downside to it there is that with a

349
00:16:50,759 --> 00:16:55,230
voxel you kind of have a nicer situation

350
00:16:53,009 --> 00:16:57,870
of well with a voxel if you do want to

351
00:16:55,230 --> 00:17:01,019
keep a linked list price per voxel like

352
00:16:57,870 --> 00:17:02,460
we're doing now then you do need Atomics

353
00:17:01,019 --> 00:17:04,170
in the shader so you do need to be able

354
00:17:02,460 --> 00:17:07,019
to keep a linked list which requires a

355
00:17:04,170 --> 00:17:09,000
shader atomic but that's really the only

356
00:17:07,019 --> 00:17:14,519
thing you need right you don't actually

357
00:17:09,000 --> 00:17:18,088
need any random writes or anything like

358
00:17:14,519 --> 00:17:24,059
that you just need the ability to access

359
00:17:18,088 --> 00:17:26,279
that one atomic so I guess what I would

360
00:17:24,059 --> 00:17:29,009
say is you know there's there's that as

361
00:17:26,279 --> 00:17:30,660
an approach I like the sound of that

362
00:17:29,009 --> 00:17:32,220
approach because I think it offers a

363
00:17:30,660 --> 00:17:34,590
couple different things first of all

364
00:17:32,220 --> 00:17:38,460
allows us to get access to more points

365
00:17:34,589 --> 00:17:42,029
initially with our first query so I like

366
00:17:38,460 --> 00:17:44,660
that part and the other thing that I

367
00:17:42,029 --> 00:17:50,349
like about that is I like this

368
00:17:44,660 --> 00:17:54,590
that it will also subdivide regions

369
00:17:50,349 --> 00:17:57,319
which are overpopulated even if they're

370
00:17:54,589 --> 00:18:00,230
already pretty small so with our voxel

371
00:17:57,319 --> 00:18:02,779
for example once we set a voxel

372
00:18:00,230 --> 00:18:04,370
dimension if we started having lots of

373
00:18:02,779 --> 00:18:07,779
sample points in one area now I don't

374
00:18:04,369 --> 00:18:10,250
think that's likely but let's say we did

375
00:18:07,779 --> 00:18:14,720
we could now with a system like this it

376
00:18:10,250 --> 00:18:16,789
could get subdivided further so it puts

377
00:18:14,720 --> 00:18:23,269
the detail where the detail is needed

378
00:18:16,789 --> 00:18:26,389
rather than just presuming a sort of a

379
00:18:23,269 --> 00:18:29,150
known thing up front so that's all good

380
00:18:26,390 --> 00:18:31,280
stuff about it but I think there's bad

381
00:18:29,150 --> 00:18:33,710
things about it too which means I'm not

382
00:18:31,279 --> 00:18:36,619
really excited to jump at it quite yet

383
00:18:33,710 --> 00:18:40,069
one is again the complexity of building

384
00:18:36,619 --> 00:18:42,259
one of these while not too bad is much

385
00:18:40,069 --> 00:18:44,450
more than a voxel it's still a big step

386
00:18:42,259 --> 00:18:47,509
up from voxel in terms of the complexity

387
00:18:44,450 --> 00:18:49,460
necessary to build one so that makes it

388
00:18:47,509 --> 00:18:50,690
less likely to work on the GPU it makes

389
00:18:49,460 --> 00:18:54,559
it more expensive even if it's on the

390
00:18:50,690 --> 00:19:01,910
CPU probably right so that's one

391
00:18:54,559 --> 00:19:03,769
downside is the expense of building the

392
00:19:01,910 --> 00:19:05,120
other downside that's relative to

393
00:19:03,769 --> 00:19:10,400
performance is the expense of

394
00:19:05,119 --> 00:19:13,009
computation that's probably the wrong

395
00:19:10,400 --> 00:19:17,390
way to say that let's say expensive

396
00:19:13,009 --> 00:19:20,509
lookup so one nice thing about the voxel

397
00:19:17,390 --> 00:19:22,580
is its immediate right I take a set of

398
00:19:20,509 --> 00:19:25,430
coordinates I truncate those coordinates

399
00:19:22,579 --> 00:19:30,230
to a voxel cell and now I I'm going I'm

400
00:19:25,430 --> 00:19:32,779
off right that doesn't work anymore once

401
00:19:30,230 --> 00:19:35,930
you have a variable space partition like

402
00:19:32,779 --> 00:19:37,730
this one because at that point what you

403
00:19:35,930 --> 00:19:41,630
have to do is Traverse from like a root

404
00:19:37,730 --> 00:19:44,240
node down right you have to start at you

405
00:19:41,630 --> 00:19:47,330
know the whole thing go where is my

406
00:19:44,240 --> 00:19:49,789
point on this classifier oh it's on like

407
00:19:47,329 --> 00:19:52,009
this side of it okay where is my point

408
00:19:49,789 --> 00:19:53,359
on this classifier oh it's on this side

409
00:19:52,009 --> 00:19:55,039
of it where is my point on this

410
00:19:53,359 --> 00:19:58,000
classifier oh it's on this side of it

411
00:19:55,039 --> 00:20:04,119
okay this is my region right

412
00:19:58,000 --> 00:20:06,160
so each one of our pixel lookups now has

413
00:20:04,119 --> 00:20:10,469
this much more expensive traversal

414
00:20:06,160 --> 00:20:21,790
scheme involved right and that to me

415
00:20:10,470 --> 00:20:29,579
sounds bad for obvious reasons so the

416
00:20:21,789 --> 00:20:33,250
third thing is the boundary problem and

417
00:20:29,579 --> 00:20:36,579
that is that while this would fix the

418
00:20:33,250 --> 00:20:41,079
empty cell problem right voxels have the

419
00:20:36,579 --> 00:20:44,349
empty sub-problem and they also have the

420
00:20:41,079 --> 00:20:46,419
boundary problem it would fix the empty

421
00:20:44,349 --> 00:20:46,959
cell problem but the boundary problem

422
00:20:46,420 --> 00:20:49,690
remains

423
00:20:46,960 --> 00:20:57,039
and what's that problem well in either

424
00:20:49,690 --> 00:21:01,289
case if I am here and I see this sample

425
00:20:57,039 --> 00:21:01,289
here's a lighting sample right

426
00:21:06,359 --> 00:21:11,579
so here's some lighting samples ideally

427
00:21:09,750 --> 00:21:13,890
what I would like to do right here is

428
00:21:11,579 --> 00:21:16,349
I'd like to interpolate between here and

429
00:21:13,890 --> 00:21:20,370
here possibly even a little bit of here

430
00:21:16,349 --> 00:21:24,178
hard to say right but I don't really

431
00:21:20,369 --> 00:21:26,819
have a way of doing that because in

432
00:21:24,179 --> 00:21:28,860
order to look at the samples in here I

433
00:21:26,819 --> 00:21:33,960
have to compute the lighting for my cell

434
00:21:28,859 --> 00:21:35,668
and the cell next to me right and the

435
00:21:33,960 --> 00:21:37,409
problem that we get there is then you

436
00:21:35,669 --> 00:21:39,538
end up with the fall-off the

437
00:21:37,409 --> 00:21:42,120
fall-off functions for reconstruction

438
00:21:39,538 --> 00:21:45,720
now have problems where the voxel

439
00:21:42,119 --> 00:21:48,058
boundary right causes them to snap in or

440
00:21:45,720 --> 00:21:55,829
out of consideration because this one

441
00:21:48,058 --> 00:21:58,528
here right would not be considered right

442
00:21:55,829 --> 00:22:00,538
but this one would as it moves towards

443
00:21:58,528 --> 00:22:02,788
this boundary you end up in a situation

444
00:22:00,538 --> 00:22:07,288
where the consideration region falls out

445
00:22:02,788 --> 00:22:09,750
of where this possibly would be and then

446
00:22:07,288 --> 00:22:11,819
when you get into this region right

447
00:22:09,750 --> 00:22:14,490
across the border maybe one of these

448
00:22:11,819 --> 00:22:16,109
guys pops in it's you you end up in this

449
00:22:14,490 --> 00:22:17,429
situation where you have to be really

450
00:22:16,109 --> 00:22:21,269
careful about how you set up your

451
00:22:17,429 --> 00:22:25,788
reconstruction because you can't have

452
00:22:21,269 --> 00:22:28,500
things pop across voxel boundaries right

453
00:22:25,788 --> 00:22:31,679
letting has to be continuous otherwise a

454
00:22:28,500 --> 00:22:33,349
pixel right here at a pixel right here

455
00:22:31,679 --> 00:22:35,190
will get two different results

456
00:22:33,349 --> 00:22:37,589
completely different results and you'll

457
00:22:35,190 --> 00:22:41,850
see a seam running along the voxel

458
00:22:37,589 --> 00:22:45,240
boundary so what we're really trying to

459
00:22:41,849 --> 00:22:51,829
avoid here is that problem of seams that

460
00:22:45,240 --> 00:22:51,829
show up because of the spatial partition

461
00:23:00,730 --> 00:23:07,179
and in order to get rid of those we need

462
00:23:04,089 --> 00:23:09,759
something in either case because even if

463
00:23:07,179 --> 00:23:14,769
we say that we pre divided everything

464
00:23:09,759 --> 00:23:16,629
down right so that we always have you

465
00:23:14,769 --> 00:23:19,329
know four samples for region or

466
00:23:16,630 --> 00:23:20,770
something close to it then we know we're

467
00:23:19,329 --> 00:23:23,259
never in a case where we're sampling a

468
00:23:20,769 --> 00:23:24,819
region that's empty but we don't know if

469
00:23:23,259 --> 00:23:26,288
for example we're sampling a region

470
00:23:24,819 --> 00:23:28,359
where there was a lighting sample right

471
00:23:26,288 --> 00:23:30,308
here that we should have been taking

472
00:23:28,359 --> 00:23:32,439
into account and we're not taking into

473
00:23:30,308 --> 00:23:33,548
account and when we move over here we

474
00:23:32,440 --> 00:23:37,538
are starting to take it into account

475
00:23:33,548 --> 00:23:42,129
right so the boundary problem kind of

476
00:23:37,538 --> 00:23:46,179
remains luckily to a certain extent we

477
00:23:42,130 --> 00:23:48,730
were doing interpolation between fixed

478
00:23:46,179 --> 00:23:51,009
points in space in our voxel case and

479
00:23:48,730 --> 00:23:53,288
that's how we got around that we would

480
00:23:51,009 --> 00:23:55,359
just say well we always blend but you

481
00:23:53,288 --> 00:23:58,720
know between the eight voxels that are

482
00:23:55,359 --> 00:24:00,369
all in the area right but again even

483
00:23:58,720 --> 00:24:02,319
that's kind of ugly because that means

484
00:24:00,369 --> 00:24:06,839
we're doing eight times as much work for

485
00:24:02,319 --> 00:24:06,839
only one reason and that is to prevent

486
00:24:06,990 --> 00:24:14,669
that is to prevent that overlap that

487
00:24:09,759 --> 00:24:14,669
that snapping problem those like seams

488
00:24:22,308 --> 00:24:26,269
so the reconstruction problem is like

489
00:24:24,778 --> 00:24:31,048
really hard for all of these reasons

490
00:24:26,269 --> 00:24:32,609
right and you want to find something I

491
00:24:31,048 --> 00:24:35,480
mean your ideal thing is something that

492
00:24:32,609 --> 00:24:35,479
it's continuous everywhere

493
00:24:40,799 --> 00:24:45,779
because that means no visible seams

494
00:24:51,358 --> 00:25:14,128
has nice accuracy what uses samples well

495
00:25:05,608 --> 00:25:24,788
and low overhead right

496
00:25:14,128 --> 00:25:27,158
not too many samples considered and

497
00:25:24,788 --> 00:25:28,628
there's some aspects this so continuous

498
00:25:27,159 --> 00:25:29,949
everywhere no visible seams is kind of

499
00:25:28,628 --> 00:25:31,509
the one we're talking about about how

500
00:25:29,949 --> 00:25:34,719
you make sure that you know as your

501
00:25:31,509 --> 00:25:37,419
because you're not considering all 8,000

502
00:25:34,719 --> 00:25:38,859
samples every pixel how do you make sure

503
00:25:37,419 --> 00:25:41,979
that the subset of samples that you

504
00:25:38,858 --> 00:25:44,948
consider doesn't lead to seams that's

505
00:25:41,979 --> 00:25:46,088
one problem we got to deal with the nice

506
00:25:44,949 --> 00:25:48,429
accuracy when we haven't talked about

507
00:25:46,088 --> 00:25:49,719
too much but you know let's say we've

508
00:25:48,429 --> 00:25:51,969
got a place in the world where there is

509
00:25:49,719 --> 00:25:53,798
a seam that's really supposed to be

510
00:25:51,969 --> 00:25:57,909
there right so there's a lighting at a

511
00:25:53,798 --> 00:26:01,418
corner or something like this right and

512
00:25:57,909 --> 00:26:06,699
you know it's dark here it's light here

513
00:26:01,419 --> 00:26:09,489
it's light here maybe right and dark

514
00:26:06,699 --> 00:26:11,979
here or something we want to as much as

515
00:26:09,489 --> 00:26:13,479
possible to try and reconstruct the fact

516
00:26:11,979 --> 00:26:14,709
that you know if there's a bunch of dark

517
00:26:13,479 --> 00:26:16,568
samples here and a bunch of light

518
00:26:14,709 --> 00:26:18,399
samples here that the lighting should

519
00:26:16,568 --> 00:26:20,288
change pretty rapidly in between those

520
00:26:18,398 --> 00:26:22,028
two and we should have a dark side and

521
00:26:20,288 --> 00:26:23,618
the light side right we really don't

522
00:26:22,028 --> 00:26:25,719
want something where like the light side

523
00:26:23,618 --> 00:26:27,728
bleeds way over here or the dark side

524
00:26:25,719 --> 00:26:31,239
pleads way over here or whatever right

525
00:26:27,729 --> 00:26:33,308
so if we do a good job placing our

526
00:26:31,239 --> 00:26:34,598
initial samples in the world to capture

527
00:26:33,308 --> 00:26:36,759
the lighting features we care about

528
00:26:34,598 --> 00:26:37,868
which we probably can do because we know

529
00:26:36,759 --> 00:26:39,429
what the scene looks like so we can

530
00:26:37,868 --> 00:26:43,648
probably place samples fairly

531
00:26:39,429 --> 00:26:47,319
intelligently we want those samples then

532
00:26:43,648 --> 00:26:52,658
to to make sense when you use when you

533
00:26:47,318 --> 00:26:55,408
reconstruct them we want them to you

534
00:26:52,659 --> 00:27:00,539
know to produce good results based on

535
00:26:55,409 --> 00:27:00,539
the information that was presented right

536
00:27:02,670 --> 00:27:11,680
so yeah so one thing that I am thinking

537
00:27:06,430 --> 00:27:17,289
about is well is I wonder if we need to

538
00:27:11,680 --> 00:27:24,789
I wonder if we need to think about this

539
00:27:17,289 --> 00:27:27,269
problem in a slightly different fashion

540
00:27:24,789 --> 00:27:27,269
too

541
00:27:42,089 --> 00:27:49,808
so one way of looking at this problem is

542
00:27:47,380 --> 00:27:51,490
that we have an unordered set of samples

543
00:27:49,808 --> 00:27:57,009
and we're trying to reconstruct from

544
00:27:51,490 --> 00:27:59,200
those samples right but another way to

545
00:27:57,009 --> 00:28:00,490
look at this problem would be that we're

546
00:27:59,200 --> 00:28:04,480
actually just gonna take lighting

547
00:28:00,490 --> 00:28:08,440
samples and we're gonna use those

548
00:28:04,480 --> 00:28:10,630
lighting samples directly right that is

549
00:28:08,440 --> 00:28:14,200
one way we could look at this problem

550
00:28:10,630 --> 00:28:16,300
and it might be that we have so few

551
00:28:14,200 --> 00:28:19,569
lighting samples that we actually care

552
00:28:16,299 --> 00:28:20,710
about that that would work and I

553
00:28:19,569 --> 00:28:25,389
realized that what I'm saying is a

554
00:28:20,710 --> 00:28:29,340
little bit strange at the moment so let

555
00:28:25,390 --> 00:28:32,080
me explain but what I what I mean is

556
00:28:29,339 --> 00:28:36,879
well we're looking at this problem like

557
00:28:32,079 --> 00:28:38,230
I've got a cube and so when I send this

558
00:28:36,880 --> 00:28:46,120
down I know that I'm going to produce

559
00:28:38,230 --> 00:28:49,730
like some occluders or whatever right or

560
00:28:46,119 --> 00:28:52,159
something like this yeah

561
00:28:49,730 --> 00:28:54,259
and then I do some stuff and then I draw

562
00:28:52,160 --> 00:28:55,790
this polygon and I go sample and I look

563
00:28:54,259 --> 00:29:01,849
to see where I've got my various

564
00:28:55,789 --> 00:29:03,529
lighting samples right and this is what

565
00:29:01,849 --> 00:29:05,599
leads to the reconstruction problem

566
00:29:03,529 --> 00:29:08,000
because I need to look out into the

567
00:29:05,599 --> 00:29:10,579
world and find what samples are relevant

568
00:29:08,000 --> 00:29:13,130
to where I am now this has a nice

569
00:29:10,579 --> 00:29:14,539
benefit of if we were to have lots of

570
00:29:13,130 --> 00:29:16,400
things in this area they could possibly

571
00:29:14,539 --> 00:29:20,450
pull from lots of lighting

572
00:29:16,400 --> 00:29:22,790
however we could alternately say we

573
00:29:20,450 --> 00:29:24,080
don't want to bother with that instead

574
00:29:22,789 --> 00:29:26,450
what we'll do is we'll just say that a

575
00:29:24,079 --> 00:29:29,659
cube gets some lighting samples on it

576
00:29:26,450 --> 00:29:34,519
and it just uses exactly those letting

577
00:29:29,660 --> 00:29:39,350
samples to interpolate period right like

578
00:29:34,519 --> 00:29:41,450
it doesn't do anything else so when you

579
00:29:39,349 --> 00:29:44,359
are actually drawing one of these you

580
00:29:41,450 --> 00:29:46,880
just always have each quad that you draw

581
00:29:44,359 --> 00:29:49,369
let's say just has its lighting samples

582
00:29:46,880 --> 00:29:55,340
prescribed and it just uses those 4

583
00:29:49,369 --> 00:29:56,859
lighting samples end of story right so

584
00:29:55,339 --> 00:29:59,449
we could do something like that

585
00:29:56,859 --> 00:30:01,609
where we basically say these are our

586
00:29:59,450 --> 00:30:02,990
letting samples and we pre say which

587
00:30:01,609 --> 00:30:05,659
levy samples you're interpreting between

588
00:30:02,990 --> 00:30:08,089
there's no voxel involved those lighting

589
00:30:05,660 --> 00:30:10,430
samples the occluders and the lighting

590
00:30:08,089 --> 00:30:11,990
samples all go into letting solution but

591
00:30:10,430 --> 00:30:14,330
the results of the lighting samples are

592
00:30:11,990 --> 00:30:16,579
only sampled by the people who actually

593
00:30:14,329 --> 00:30:17,960
wanted those light examples specifically

594
00:30:16,579 --> 00:30:20,569
and there's a one-to-one correspondence

595
00:30:17,960 --> 00:30:27,759
between the two no spatial partition at

596
00:30:20,569 --> 00:30:27,759
all right

597
00:30:35,108 --> 00:30:52,608
so looking here this is our scene broken

598
00:30:42,528 --> 00:30:54,829
down in this way kind of already you can

599
00:30:52,608 --> 00:30:57,918
kind of see if we looked at this right

600
00:30:54,829 --> 00:30:59,089
if we were just to say look forget it we

601
00:30:57,919 --> 00:31:01,580
don't want to do the reconstruction

602
00:30:59,089 --> 00:31:01,848
problem we're not going to bother with

603
00:31:01,579 --> 00:31:05,478
that

604
00:31:01,848 --> 00:31:08,329
no more voxel it's just a waste of our

605
00:31:05,479 --> 00:31:10,278
time this is the chunking of the scene

606
00:31:08,329 --> 00:31:16,699
that we'll use and we'll just render it

607
00:31:10,278 --> 00:31:18,979
on these borders right now we can even

608
00:31:16,700 --> 00:31:22,519
go one step further and say it doesn't

609
00:31:18,979 --> 00:31:24,048
have to be regular because one of the

610
00:31:22,519 --> 00:31:25,819
things that will run into problems with

611
00:31:24,048 --> 00:31:29,358
with any regular sampling scheme is you

612
00:31:25,819 --> 00:31:31,220
will see the sampling scheme right but

613
00:31:29,358 --> 00:31:33,079
we could say no forget it

614
00:31:31,220 --> 00:31:34,519
we don't even want to do that we want to

615
00:31:33,079 --> 00:31:42,470
be saucy ER gentlemen we're gonna be

616
00:31:34,519 --> 00:31:44,899
even saucy er right what we want to do

617
00:31:42,470 --> 00:31:48,009
instead is say look here's a plate and

618
00:31:44,898 --> 00:31:51,528
here's where we put the lighting samples

619
00:31:48,009 --> 00:31:54,378
so they're just gonna still do the splat

620
00:31:51,528 --> 00:31:56,179
right with some radial interpolation so

621
00:31:54,378 --> 00:31:58,699
it's really hard for you to see where

622
00:31:56,179 --> 00:32:00,528
the seam is because it's not this

623
00:31:58,700 --> 00:32:03,190
regular thing where you can see the seam

624
00:32:00,528 --> 00:32:05,479
is like running look right like that

625
00:32:03,190 --> 00:32:07,729
because we can still do a thing where

626
00:32:05,479 --> 00:32:10,848
instead of the plate being instead of

627
00:32:07,729 --> 00:32:14,509
tying it to the vertices we can instead

628
00:32:10,848 --> 00:32:17,868
just tie it to points and when you draw

629
00:32:14,509 --> 00:32:23,028
this surface sample these eight sample

630
00:32:17,868 --> 00:32:24,528
points or whatever right and as I'm

631
00:32:23,028 --> 00:32:26,210
seeing this out loud I've never

632
00:32:24,528 --> 00:32:27,679
considered something like this before

633
00:32:26,210 --> 00:32:30,769
it just sounds like a really good idea

634
00:32:27,679 --> 00:32:32,359
now maybe that's famous less words but

635
00:32:30,769 --> 00:32:34,579
this to me seems a lot more sane because

636
00:32:32,358 --> 00:32:37,098
the reconstruction problem goes away

637
00:32:34,579 --> 00:32:38,628
right because now you could reconstruct

638
00:32:37,098 --> 00:32:40,579
your points however you want because

639
00:32:38,628 --> 00:32:42,339
you're always using the same points on

640
00:32:40,579 --> 00:32:45,048
this surface

641
00:32:42,339 --> 00:32:46,459
so this flat because everything in our

642
00:32:45,048 --> 00:32:47,629
game is a flat surface with a bitmap

643
00:32:46,460 --> 00:32:50,090
mapped on it right

644
00:32:47,630 --> 00:32:52,130
so everything across that entire surface

645
00:32:50,089 --> 00:32:54,528
will be lit by the same end sample

646
00:32:52,130 --> 00:32:56,299
points so any arbitrary scan

647
00:32:54,528 --> 00:32:57,769
reconstruction scheme you use will be

648
00:32:56,298 --> 00:33:00,589
continuous as long as the actual

649
00:32:57,769 --> 00:33:02,720
addition is not itself discontinuous

650
00:33:00,589 --> 00:33:04,639
which is really easy to avoid there are

651
00:33:02,720 --> 00:33:08,710
no sampling boundaries because that

652
00:33:04,640 --> 00:33:14,360
shape never never crosses any boundary

653
00:33:08,710 --> 00:33:15,798
right - it's faster because now you

654
00:33:14,359 --> 00:33:17,750
don't have to look up in voxels or

655
00:33:15,798 --> 00:33:19,908
anything else you just every polygon

656
00:33:17,750 --> 00:33:22,009
comes down with an ID it looks up that

657
00:33:19,909 --> 00:33:24,230
ID and that gets it the linked list of

658
00:33:22,009 --> 00:33:26,538
samples to use right and it just goes

659
00:33:24,230 --> 00:33:27,860
through them so it's the same scheme we

660
00:33:26,538 --> 00:33:31,089
have now but instead of first looking

661
00:33:27,859 --> 00:33:34,219
into a voxel to find that first u16

662
00:33:31,089 --> 00:33:40,509
forget that lookup just pass down the

663
00:33:34,220 --> 00:33:43,509
u16 that you wanted to use directly prob

664
00:33:40,509 --> 00:33:43,509
right

665
00:33:50,490 --> 00:33:56,039
I mean I think that may just that may be

666
00:33:53,579 --> 00:34:00,089
the winner because then all we really

667
00:33:56,039 --> 00:34:03,089
have to do is come up with a good way of

668
00:34:00,089 --> 00:34:09,569
scattering points across our geometries

669
00:34:03,089 --> 00:34:14,549
right of where we want to take those

670
00:34:09,570 --> 00:34:17,970
lighting samples and then we're pretty

671
00:34:14,550 --> 00:34:23,639
much done we don't have to create a

672
00:34:17,969 --> 00:34:25,730
spatial hierarchy or transmit it all we

673
00:34:23,639 --> 00:34:29,639
have to do is pre scatter those points

674
00:34:25,730 --> 00:34:37,440
and make sure that then the GPU has that

675
00:34:29,639 --> 00:34:39,149
array of points and I think that's it we

676
00:34:37,440 --> 00:34:41,610
still have the trouble of we have to

677
00:34:39,148 --> 00:34:43,259
move the ray tracer over to the GPU at

678
00:34:41,610 --> 00:34:44,610
some point but we knew we were gonna

679
00:34:43,260 --> 00:34:47,490
have to do that regardless because

680
00:34:44,610 --> 00:34:52,919
that's how we're generating our lighting

681
00:34:47,489 --> 00:35:01,439
solution so I think this may be the

682
00:34:52,918 --> 00:35:07,618
thing I want to try I can't think of a

683
00:35:01,440 --> 00:35:08,950
lot of reasons not to so I think I'm

684
00:35:07,619 --> 00:35:12,400
gonna do that

685
00:35:08,949 --> 00:35:32,078
that seems like the best approach all

686
00:35:12,400 --> 00:35:35,680
right this thing is kind of fun well

687
00:35:32,079 --> 00:35:37,660
anyway it's not as artificially as

688
00:35:35,679 --> 00:35:42,909
intelligent to some calculators maybe

689
00:35:37,659 --> 00:35:44,559
but I mean it's no WolframAlpha anyway

690
00:35:42,909 --> 00:35:46,328
so if we were going to do that then we

691
00:35:44,559 --> 00:35:48,940
wouldn't need this voxel here at all

692
00:35:46,329 --> 00:35:50,230
right I'll leave it in place in case we

693
00:35:48,940 --> 00:35:51,519
decide we need it later

694
00:35:50,230 --> 00:35:57,190
I won't delete it till we're sure this

695
00:35:51,519 --> 00:35:59,469
is working the way we want but yeah so

696
00:35:57,190 --> 00:36:01,690
everything else can stay the same the C

697
00:35:59,469 --> 00:36:03,759
and D values we can leave because we do

698
00:36:01,690 --> 00:36:05,740
still want a light lookup table that is

699
00:36:03,760 --> 00:36:08,380
a linked list so that part should remain

700
00:36:05,739 --> 00:36:10,719
roughly the same what we do need to

701
00:36:08,380 --> 00:36:12,250
change is when we're actually sending

702
00:36:10,719 --> 00:36:14,709
these down we've got these textured

703
00:36:12,250 --> 00:36:17,679
vertices here those are going to go into

704
00:36:14,710 --> 00:36:20,769
this push buffer and all that and so

705
00:36:17,679 --> 00:36:23,108
we've got these quad bitmaps texture

706
00:36:20,769 --> 00:36:25,869
vertex array situation right and what

707
00:36:23,108 --> 00:36:30,699
this is is this is just a big array of

708
00:36:25,869 --> 00:36:32,260
that says what bitmap to use and what

709
00:36:30,699 --> 00:36:34,929
the vertices are so there's four

710
00:36:32,260 --> 00:36:36,700
vertices four bitmap and so on right so

711
00:36:34,929 --> 00:36:39,129
what we want to do here is we want to

712
00:36:36,699 --> 00:36:41,169
augment this structure right now what we

713
00:36:39,130 --> 00:36:42,970
pass the GPU is just this textured

714
00:36:41,170 --> 00:36:45,338
vertex this big textured vertex array

715
00:36:42,969 --> 00:36:48,368
what we want to do in addition to that

716
00:36:45,338 --> 00:36:51,250
now is we're gonna want to pass a u16

717
00:36:48,369 --> 00:36:54,000
which is like a lighting sample index

718
00:36:51,250 --> 00:36:54,000
right

719
00:37:03,949 --> 00:37:09,989
something like this so it's basically

720
00:37:06,480 --> 00:37:12,449
every quad will have a light sample that

721
00:37:09,989 --> 00:37:14,789
gets handed down with it and that light

722
00:37:12,449 --> 00:37:26,279
sample is you know the thing that it

723
00:37:14,789 --> 00:37:37,800
needs to work with right and to be

724
00:37:26,280 --> 00:37:39,510
honest I'm not 100% sure I think somehow

725
00:37:37,800 --> 00:37:41,839
I've never done something which gets

726
00:37:39,510 --> 00:37:46,349
streamed into the pixel shader that way

727
00:37:41,838 --> 00:37:49,409
so it may be an interesting it may be

728
00:37:46,349 --> 00:37:50,910
kind of an interesting thing to see how

729
00:37:49,409 --> 00:37:54,799
we do that because I don't think I've

730
00:37:50,909 --> 00:37:54,799
ever tried it before it should work but

731
00:37:58,969 --> 00:38:05,219
setting up an array that's per primitive

732
00:38:02,210 --> 00:38:08,369
is not the same as setting up an array

733
00:38:05,219 --> 00:38:10,769
that's per vertex most things are done

734
00:38:08,369 --> 00:38:15,180
per vertex and so I don't really

735
00:38:10,769 --> 00:38:22,230
remember or know I think you have to set

736
00:38:15,179 --> 00:38:25,440
something up with the with the strides

737
00:38:22,230 --> 00:38:28,710
to make it work properly it's it's gonna

738
00:38:25,440 --> 00:38:33,358
be odd right but what I mean to say is

739
00:38:28,710 --> 00:38:38,599
so in here when we're sending down

740
00:38:33,358 --> 00:38:38,598
primitives right we've got stuff like

741
00:38:42,199 --> 00:38:49,079
here where we've got these in vert PE

742
00:38:45,750 --> 00:38:51,510
vert and vert UV vert color right those

743
00:38:49,079 --> 00:38:53,130
are all inputs to the vertex shader that

744
00:38:51,510 --> 00:38:56,400
happened one per vertex and are

745
00:38:53,130 --> 00:39:00,570
transformed what we want to do here is

746
00:38:56,400 --> 00:39:03,690
we want to have ins like down here in

747
00:39:00,570 --> 00:39:07,680
the fragment shader but we want them to

748
00:39:03,690 --> 00:39:10,110
be per primitive right so every triangle

749
00:39:07,679 --> 00:39:12,769
actually every quad but OpenGL doesn't

750
00:39:10,110 --> 00:39:17,730
really deal with quads every triangle

751
00:39:12,769 --> 00:39:19,949
wants to have au 16 input that doesn't

752
00:39:17,730 --> 00:39:26,909
vary over the face of the triangle and

753
00:39:19,949 --> 00:39:31,079
that only came from one point in the in

754
00:39:26,909 --> 00:39:31,589
an array now we can choose this if we

755
00:39:31,079 --> 00:39:35,250
needed to

756
00:39:31,590 --> 00:39:38,070
by just replicating the U 16 multiple

757
00:39:35,250 --> 00:39:40,769
times right we could just write the U 16

758
00:39:38,070 --> 00:39:44,370
three times or four times like one per

759
00:39:40,769 --> 00:39:46,739
vertex right in other words up here in

760
00:39:44,369 --> 00:39:50,730
this textured vertex thing we could just

761
00:39:46,739 --> 00:39:53,069
have like a u 16 that was in here or

762
00:39:50,730 --> 00:39:55,769
something like this and that would say

763
00:39:53,070 --> 00:39:58,050
like here's the light value to get or

764
00:39:55,769 --> 00:39:59,849
whatever right and we would just

765
00:39:58,050 --> 00:40:02,070
replicate it or just use the first one

766
00:39:59,849 --> 00:40:04,710
but at the moment that doesn't seem like

767
00:40:02,070 --> 00:40:06,780
a particularly good idea I don't know

768
00:40:04,710 --> 00:40:08,519
maybe maybe it would be good for now in

769
00:40:06,780 --> 00:40:09,840
fact maybe maybe that's the easier way

770
00:40:08,519 --> 00:40:13,710
to do it for now instead of moving it

771
00:40:09,840 --> 00:40:19,769
out to a separate thing because since

772
00:40:13,710 --> 00:40:21,630
we're just doing this for testing yeah I

773
00:40:19,769 --> 00:40:25,559
mean you know I could see that being

774
00:40:21,630 --> 00:40:28,110
good idea so maybe I'll do that for now

775
00:40:25,559 --> 00:40:34,769
so right now we've got textured vertex

776
00:40:28,110 --> 00:40:36,000
Commission color P and UV right and what

777
00:40:34,769 --> 00:40:39,509
we would be doing here is saying well

778
00:40:36,000 --> 00:40:42,329
we're gonna add something to the end of

779
00:40:39,510 --> 00:40:43,800
this and at the moment there's what like

780
00:40:42,329 --> 00:40:47,579
10 floats in this thing or something

781
00:40:43,800 --> 00:40:50,690
like this 10 32-bit values right that's

782
00:40:47,579 --> 00:40:52,230
9 right there 10 it's actually is it 11

783
00:40:50,690 --> 00:40:56,130
is that right

784
00:40:52,230 --> 00:40:58,409
so here's four well you know what

785
00:40:56,130 --> 00:41:00,119
check this out now that I've got the

786
00:40:58,409 --> 00:41:04,349
speed crunch the four plus three plus

787
00:41:00,119 --> 00:41:05,489
two plus one plus one so I guess maybe

788
00:41:04,349 --> 00:41:07,440
it wouldn't be the worst thing in the

789
00:41:05,489 --> 00:41:09,389
world to get off of eleven as a stride

790
00:41:07,440 --> 00:41:12,630
but even so we don't really need it to

791
00:41:09,389 --> 00:41:13,799
be in here as my point an omission I

792
00:41:12,630 --> 00:41:15,450
guess probably doesn't really need to be

793
00:41:13,800 --> 00:41:18,000
in here anymore either

794
00:41:15,449 --> 00:41:24,089
but that's a separate issue maybe it

795
00:41:18,000 --> 00:41:25,769
still does we'll see and I suppose what

796
00:41:24,090 --> 00:41:27,900
we could do there even is just say like

797
00:41:25,769 --> 00:41:29,579
okay there's the light offset and it

798
00:41:27,900 --> 00:41:33,150
could even be a 32-bit value if we want

799
00:41:29,579 --> 00:41:36,269
it to be because at this point we don't

800
00:41:33,150 --> 00:41:42,030
have the problem of needing to really

801
00:41:36,269 --> 00:41:44,099
use linked lists so much anyway we can

802
00:41:42,030 --> 00:41:45,960
just point directly into an array and

803
00:41:44,099 --> 00:41:48,089
have like a zero terminator so we just

804
00:41:45,960 --> 00:41:51,599
go till you get a zero or something like

805
00:41:48,090 --> 00:41:54,200
this or you can even go we could even do

806
00:41:51,599 --> 00:41:54,199
something like this

807
00:41:55,579 --> 00:42:01,949
use a 16-bit offset and account so that

808
00:42:00,449 --> 00:42:05,189
the count basically just says how many

809
00:42:01,949 --> 00:42:06,689
to read right we could do a lot of stuff

810
00:42:05,190 --> 00:42:09,000
like that

811
00:42:06,690 --> 00:42:10,409
so we have a lot of ways of playing with

812
00:42:09,000 --> 00:42:11,760
this but for now we have to get in here

813
00:42:10,409 --> 00:42:15,379
and I'm gonna put to do on it because

814
00:42:11,760 --> 00:42:15,380
like I said we don't need it for vertex

815
00:42:23,630 --> 00:42:28,849
so when we're ready when we're in the

816
00:42:25,429 --> 00:42:32,349
mood to like get into another protracted

817
00:42:28,849 --> 00:42:34,759
fight with opengl about some basic stuff

818
00:42:32,349 --> 00:42:35,989
switching to sending that down in a

819
00:42:34,760 --> 00:42:36,710
separate buffer that gets read per

820
00:42:35,989 --> 00:42:38,839
vertex

821
00:42:36,710 --> 00:42:40,400
I'm sorry per primitive would be good

822
00:42:38,840 --> 00:42:41,690
the reason I don't want to do that right

823
00:42:40,400 --> 00:42:43,579
now is cuz I'm imagining it will be a

824
00:42:41,690 --> 00:42:45,289
complete mess to do so it might even

825
00:42:43,579 --> 00:42:46,849
require us to do like a geometry shader

826
00:42:45,289 --> 00:42:48,409
or something that replicates for all I

827
00:42:46,849 --> 00:42:56,839
know there may not be a built-in way to

828
00:42:48,409 --> 00:42:58,009
actually set that up which is stupid but

829
00:42:56,840 --> 00:43:00,200
that may be the case

830
00:42:58,010 --> 00:43:03,590
you never know is grabs stuff rocks

831
00:43:00,199 --> 00:43:06,199
api's are almost universally lousy so

832
00:43:03,590 --> 00:43:08,570
what we need to do is just have some way

833
00:43:06,199 --> 00:43:11,149
for the moment to sort of hack it in

834
00:43:08,570 --> 00:43:14,510
there and then once we have it working

835
00:43:11,150 --> 00:43:19,180
in the hacked way then we will figure

836
00:43:14,510 --> 00:43:22,300
out how to sort of play with it further

837
00:43:19,179 --> 00:43:24,919
alright so if we were going to do that

838
00:43:22,300 --> 00:43:26,570
then what we need to do here is extend

839
00:43:24,920 --> 00:43:29,480
our notion in the Z biased program of

840
00:43:26,570 --> 00:43:31,760
what comes in so here you can see the

841
00:43:29,480 --> 00:43:33,860
things that we're coming in P and UV and

842
00:43:31,760 --> 00:43:35,870
color emission wasn't getting read in

843
00:43:33,860 --> 00:43:40,970
this one and that's because we didn't

844
00:43:35,869 --> 00:43:43,069
actually use it for anything but the

845
00:43:40,969 --> 00:43:44,959
rest of the things were so if we have a

846
00:43:43,070 --> 00:43:48,530
light offset and a light count we want

847
00:43:44,960 --> 00:43:50,269
to read those values in and those are

848
00:43:48,530 --> 00:43:52,460
integer values but don't actually know

849
00:43:50,269 --> 00:43:54,619
whether it will allow us to specify an

850
00:43:52,460 --> 00:43:57,349
integer as an integer in the vertex data

851
00:43:54,619 --> 00:44:01,940
I'm not 100% sure whether it allows that

852
00:43:57,349 --> 00:44:08,119
or not in our voxel how we used to do

853
00:44:01,940 --> 00:44:12,559
that here in the in in this thing we did

854
00:44:08,119 --> 00:44:15,859
use to sample the texture that way but I

855
00:44:12,559 --> 00:44:20,659
don't know so we can sample we were able

856
00:44:15,860 --> 00:44:22,460
to sample texture integers I just don't

857
00:44:20,659 --> 00:44:26,869
know whether we're allowed to sample

858
00:44:22,460 --> 00:44:29,480
vertex buffer integers I'm assuming we

859
00:44:26,869 --> 00:44:33,500
will so I'll try that first but we'll

860
00:44:29,480 --> 00:44:35,349
find out in a second I'm sure right so

861
00:44:33,500 --> 00:44:38,500
if we do

862
00:44:35,349 --> 00:44:41,650
and in here this is going to be a short

863
00:44:38,500 --> 00:44:43,329
right and I don't know whether we can do

864
00:44:41,650 --> 00:44:51,639
an unsigned short here or not but that's

865
00:44:43,329 --> 00:44:53,319
what I'm going to try and really all I

866
00:44:51,639 --> 00:44:55,929
want to do right now is just see whether

867
00:44:53,320 --> 00:44:59,289
or not these work right that's it that's

868
00:44:55,929 --> 00:45:01,960
all I want to try and do so I'm gonna go

869
00:44:59,289 --> 00:45:04,150
ahead and say these are both ends I'm

870
00:45:01,960 --> 00:45:05,889
just gonna run the program now and see

871
00:45:04,150 --> 00:45:08,950
whether that shader compiles that's all

872
00:45:05,889 --> 00:45:10,750
I want to do at first right so it looks

873
00:45:08,949 --> 00:45:11,949
like it at least compiles that's good

874
00:45:10,750 --> 00:45:13,780
news

875
00:45:11,949 --> 00:45:18,279
so now what I need to do is go all right

876
00:45:13,780 --> 00:45:24,610
if we have these things getting put in I

877
00:45:18,280 --> 00:45:34,470
also need them to be put out as well

878
00:45:24,610 --> 00:45:36,820
right now normally we type this right

879
00:45:34,469 --> 00:45:39,399
you can see up here we've done smooth

880
00:45:36,820 --> 00:45:41,710
out smooth that's Matt now smooth what

881
00:45:39,400 --> 00:45:44,610
that actually means is prospectively

882
00:45:41,710 --> 00:45:48,550
correct interpolated across the triangle

883
00:45:44,610 --> 00:45:51,370
that's what that means we don't want

884
00:45:48,550 --> 00:45:54,670
that right we're just this is just a

885
00:45:51,369 --> 00:45:56,170
hack to get this in there so all we

886
00:45:54,670 --> 00:45:58,720
actually want to do is just pass it

887
00:45:56,170 --> 00:46:06,880
straight through so if we take a look at

888
00:45:58,719 --> 00:46:09,629
the open gel GLSL quick reference we

889
00:46:06,880 --> 00:46:09,630
should be able to

890
00:46:17,179 --> 00:46:24,529
yeah where is arduous oh that's not it

891
00:46:26,780 --> 00:46:37,530
these are not gos oh there it is um so

892
00:46:34,320 --> 00:46:39,690
the things that we can specify in terms

893
00:46:37,530 --> 00:46:42,180
of how we want things interpolated

894
00:46:39,690 --> 00:46:45,690
hopefully are listed on here of course

895
00:46:42,179 --> 00:46:47,719
the fact that I don't see that listed

896
00:46:45,690 --> 00:46:50,720
anywhere here doesn't fill me with

897
00:46:47,719 --> 00:46:50,719
confidence

898
00:46:58,190 --> 00:47:09,809
um am i missing it or did they just not

899
00:47:06,358 --> 00:47:13,440
put it on here we may have to go to the

900
00:47:09,809 --> 00:47:17,820
actual spec cuz I don't see it I might

901
00:47:13,440 --> 00:47:18,659
just be missing it though here okay

902
00:47:17,820 --> 00:47:22,980
there it is there it is

903
00:47:18,659 --> 00:47:24,469
I blew right by it so here's the part

904
00:47:22,980 --> 00:47:26,550
we're talking about which are qualifiers

905
00:47:24,469 --> 00:47:29,159
and specifically we're talking about

906
00:47:26,550 --> 00:47:30,840
interpolation qualifiers and as you can

907
00:47:29,159 --> 00:47:32,969
see here what I just said is listed at

908
00:47:30,840 --> 00:47:36,809
the top smooth is perspective correct

909
00:47:32,969 --> 00:47:38,879
interpolation right what we actually

910
00:47:36,809 --> 00:47:40,259
want if you wanted some weird sauciness

911
00:47:38,880 --> 00:47:42,358
you could do no perspective

912
00:47:40,260 --> 00:47:43,410
interpolation right and that would give

913
00:47:42,358 --> 00:47:46,289
you linear that would give you the old

914
00:47:43,409 --> 00:47:49,559
effects of the PlayStation 1 if you

915
00:47:46,289 --> 00:47:53,250
wanted right so you could have some fun

916
00:47:49,559 --> 00:47:55,710
with that flat though is what we're

917
00:47:53,250 --> 00:47:58,710
actually looking for we want it to not

918
00:47:55,710 --> 00:48:02,130
touch our values at all because we just

919
00:47:58,710 --> 00:48:04,199
don't we don't have multiple of them to

920
00:48:02,130 --> 00:48:06,269
interpolate in the first place so just

921
00:48:04,199 --> 00:48:07,759
to avoid any wackiness with the

922
00:48:06,269 --> 00:48:12,119
interpolation we're just gonna say look

923
00:48:07,760 --> 00:48:17,220
what I output leave exactly the same

924
00:48:12,119 --> 00:48:18,660
right don't interpolate at all now the

925
00:48:17,219 --> 00:48:20,939
problem with this is I don't actually

926
00:48:18,659 --> 00:48:27,118
know if I can like I said if I can

927
00:48:20,940 --> 00:48:30,000
actually get this into the the pixel

928
00:48:27,119 --> 00:48:31,380
shader itself and not have to put it in

929
00:48:30,000 --> 00:48:34,550
here so that's why I'm doing this

930
00:48:31,380 --> 00:48:41,990
compilation test to see ok so that

931
00:48:34,550 --> 00:48:41,990
suggests wait

932
00:48:44,000 --> 00:49:02,210
oh okay so I assume and I don't really

933
00:48:59,750 --> 00:49:07,429
know but I assume that I have to output

934
00:49:02,210 --> 00:49:10,190
this to the like I have to actually send

935
00:49:07,429 --> 00:49:11,629
this down to the pixel shader what I

936
00:49:10,190 --> 00:49:13,789
would have liked to have done right is

937
00:49:11,630 --> 00:49:16,280
just said that this comes directly in in

938
00:49:13,789 --> 00:49:18,590
the pixel shader but I just don't know

939
00:49:16,280 --> 00:49:21,470
if that's actually possible right that's

940
00:49:18,590 --> 00:49:23,690
what I'm trying to guess really I know

941
00:49:21,469 --> 00:49:25,069
exactly what I want the GPU to do but I

942
00:49:23,690 --> 00:49:29,119
don't really know how to make it do it

943
00:49:25,070 --> 00:49:33,340
which is generally the case with GPUs so

944
00:49:29,119 --> 00:49:42,710
these are gonna be flat in here right

945
00:49:33,340 --> 00:49:46,340
like so and in theory this should look

946
00:49:42,710 --> 00:49:48,769
now yeah now what I don't really

947
00:49:46,340 --> 00:49:52,010
understand is what no interpolation

948
00:49:48,769 --> 00:49:53,960
really means in this case because if we

949
00:49:52,010 --> 00:49:56,780
are talking about something that's

950
00:49:53,960 --> 00:49:59,990
declared both in the vertex shader and

951
00:49:56,780 --> 00:50:03,320
in the fragment shader as not having any

952
00:49:59,989 --> 00:50:05,179
interpolation then which vertex does it

953
00:50:03,320 --> 00:50:07,940
take presumably it takes the one from

954
00:50:05,179 --> 00:50:09,019
the first vertex but I don't know it

955
00:50:07,940 --> 00:50:10,309
doesn't matter because we'll just send

956
00:50:09,019 --> 00:50:13,179
the same one down all the time but

957
00:50:10,309 --> 00:50:13,179
either way

958
00:50:21,570 --> 00:50:27,490
so in here where we've got this flat in

959
00:50:25,659 --> 00:50:29,469
unsigned short right these are now our

960
00:50:27,489 --> 00:50:33,909
light offsets or no light counts and

961
00:50:29,469 --> 00:50:35,919
what we can do now is in our some voxel

962
00:50:33,909 --> 00:50:37,480
light routine right we can leave that in

963
00:50:35,920 --> 00:50:39,519
there again we'll delete it later when

964
00:50:37,480 --> 00:50:42,460
we're sure we don't need it anymore but

965
00:50:39,519 --> 00:50:48,190
what I can do is say okay let me cut and

966
00:50:42,460 --> 00:50:50,650
paste that a second time and just have a

967
00:50:48,190 --> 00:50:52,780
Sun light routine and that sunlight

968
00:50:50,650 --> 00:50:55,809
routine will do the light summation for

969
00:50:52,780 --> 00:50:59,740
us without having to do any of the voxel

970
00:50:55,809 --> 00:51:03,099
stuffs so this light I here thing that's

971
00:50:59,739 --> 00:51:06,329
just going to take this frag light

972
00:51:03,099 --> 00:51:06,329
offset directly

973
00:51:13,230 --> 00:51:21,820
and it's gonna start at that and it's

974
00:51:16,599 --> 00:51:24,250
gonna count down the light or I guess I

975
00:51:21,820 --> 00:51:25,990
could count up the frag light count and

976
00:51:24,250 --> 00:51:30,369
it's just going to sample into the

977
00:51:25,989 --> 00:51:34,649
texture based directly on that right so

978
00:51:30,369 --> 00:51:34,650
what we want to do is something like

979
00:51:50,489 --> 00:51:59,849
something like this so we grab a count

980
00:51:56,260 --> 00:52:03,130
of the lights that we're going to use we

981
00:51:59,849 --> 00:52:09,849
grabbed the first one and then each time

982
00:52:03,130 --> 00:52:11,920
through we just loop through right I

983
00:52:09,849 --> 00:52:13,599
don't know enough about GPUs to know

984
00:52:11,920 --> 00:52:15,550
what the fastest way to do loops like

985
00:52:13,599 --> 00:52:16,839
that is that's probably something we

986
00:52:15,550 --> 00:52:18,640
would want to look up eventually if this

987
00:52:16,840 --> 00:52:20,200
turns out to be a thing that we do but

988
00:52:18,639 --> 00:52:21,609
for now it will work which is all we

989
00:52:20,199 --> 00:52:27,579
really want we just want a way to test

990
00:52:21,610 --> 00:52:30,370
it right so while there is lights left

991
00:52:27,579 --> 00:52:32,469
we just keep going and that's really it

992
00:52:30,369 --> 00:52:34,630
we do the summation exactly the way that

993
00:52:32,469 --> 00:52:37,389
we were doing it before and off we go

994
00:52:34,630 --> 00:52:40,990
then in here instead of doing the sum

995
00:52:37,389 --> 00:52:43,559
voxel I thing we just say okay that's

996
00:52:40,989 --> 00:52:48,369
gone we're not going to do it anymore

997
00:52:43,559 --> 00:52:51,730
instead of all of this stuff we're just

998
00:52:48,369 --> 00:52:55,509
going to do a v3l and actually all

999
00:52:51,730 --> 00:53:01,240
literally all of this stuff we're just

1000
00:52:55,510 --> 00:53:04,410
going to do a v3l that's what are we

1001
00:53:01,239 --> 00:53:04,409
calling this just some light

1002
00:53:09,829 --> 00:53:14,119
and that's it right so all we need to do

1003
00:53:12,498 --> 00:53:16,368
is just now some of the lights that

1004
00:53:14,119 --> 00:53:19,249
we've been told this primitive cares

1005
00:53:16,369 --> 00:53:20,150
about and they can be whatever we don't

1006
00:53:19,248 --> 00:53:24,649
care what they are

1007
00:53:20,150 --> 00:53:26,660
we're gonna use them right and then we

1008
00:53:24,650 --> 00:53:31,809
output a final interpolated value and

1009
00:53:26,659 --> 00:53:36,618
we're done that's it

1010
00:53:31,809 --> 00:53:38,900
and a story so one nice bonus to this is

1011
00:53:36,619 --> 00:53:40,489
this will be way faster right this is a

1012
00:53:38,900 --> 00:53:41,930
way more efficient way of doing the

1013
00:53:40,489 --> 00:53:44,239
lighting than reading it for the

1014
00:53:41,929 --> 00:53:50,899
question is just will it work and we

1015
00:53:44,239 --> 00:53:52,489
don't know but we're gonna try ok so now

1016
00:53:50,900 --> 00:53:55,689
we just have to get this compiling so

1017
00:53:52,489 --> 00:53:55,688
that we can get somewhere to start from

1018
00:53:57,338 --> 00:54:02,619
implicit cast from medium PU it to int

1019
00:54:03,039 --> 00:54:10,910
is that so tell me pray tell wouldn't

1020
00:54:08,119 --> 00:54:14,619
right here where did I do that and it's

1021
00:54:10,909 --> 00:54:14,618
like right on that line actually

1022
00:54:17,619 --> 00:54:31,670
implicit castrum into bool okay while

1023
00:54:23,688 --> 00:54:36,618
light count is greater than zero are you

1024
00:54:31,670 --> 00:54:38,209
happy now compiler okay so now and we're

1025
00:54:36,619 --> 00:54:40,189
still working just fine to you'll notice

1026
00:54:38,208 --> 00:54:42,649
we don't get any light because of course

1027
00:54:40,188 --> 00:54:44,058
we're not actually passing any values

1028
00:54:42,650 --> 00:54:47,088
down there so the light count will

1029
00:54:44,059 --> 00:54:51,048
always be zero but we're running under

1030
00:54:47,088 --> 00:54:55,248
that shader now so now our job is just

1031
00:54:51,048 --> 00:54:58,759
to actually pass down some light

1032
00:54:55,248 --> 00:55:03,348
information that actually correctly

1033
00:54:58,759 --> 00:55:05,239
lines up with these surfaces right so

1034
00:55:03,349 --> 00:55:09,920
the first thing that I want to do is I

1035
00:55:05,239 --> 00:55:11,929
want to cheese out right that's the

1036
00:55:09,920 --> 00:55:14,229
right the most important thing to do is

1037
00:55:11,929 --> 00:55:17,329
to cheese out first

1038
00:55:14,228 --> 00:55:18,899
using of course what I always say

1039
00:55:17,329 --> 00:55:20,650
structure dark

1040
00:55:18,900 --> 00:55:23,470
concept of structured art first

1041
00:55:20,650 --> 00:55:29,800
introduced to me actually by Mike bilko

1042
00:55:23,469 --> 00:55:32,079
he was a programmer from the the it was

1043
00:55:29,800 --> 00:55:34,660
a company that can't remember was

1044
00:55:32,079 --> 00:55:37,569
distinctive suffer no I can't remember

1045
00:55:34,659 --> 00:55:39,460
the name of the company because it had

1046
00:55:37,570 --> 00:55:42,280
gone away and got merged into another

1047
00:55:39,460 --> 00:55:48,010
company by the time I met him but it was

1048
00:55:42,280 --> 00:55:50,769
a company that did hockey games and I

1049
00:55:48,010 --> 00:55:52,330
think they got absorbed by EA or

1050
00:55:50,769 --> 00:55:57,130
something eventually I can't quite

1051
00:55:52,329 --> 00:55:59,400
remember but anyway he was the first

1052
00:55:57,130 --> 00:56:03,309
person who used the term structured art

1053
00:55:59,400 --> 00:56:06,880
that I had heard and it's like the

1054
00:56:03,309 --> 00:56:08,380
greatest technique right like it's

1055
00:56:06,880 --> 00:56:11,320
always a good thing to drill into your

1056
00:56:08,380 --> 00:56:15,099
head like whenever you're going to do

1057
00:56:11,320 --> 00:56:16,900
something new that's whose only real way

1058
00:56:15,099 --> 00:56:19,809
of verifying what it's doing is by

1059
00:56:16,900 --> 00:56:22,450
visually looking at it instead of trying

1060
00:56:19,809 --> 00:56:25,509
the real solution first do a fake one

1061
00:56:22,449 --> 00:56:26,859
first that outputs very obvious values

1062
00:56:25,510 --> 00:56:28,810
and if you don't see those values you

1063
00:56:26,860 --> 00:56:31,530
know you have a bug before you even got

1064
00:56:28,809 --> 00:56:33,849
to the like full part of it right so

1065
00:56:31,530 --> 00:56:35,740
structured out sending down solids red

1066
00:56:33,849 --> 00:56:37,259
greens and blues and various patterns

1067
00:56:35,739 --> 00:56:39,129
like that sort of thing

1068
00:56:37,260 --> 00:56:40,930
checkerboards blah blah blah very

1069
00:56:39,130 --> 00:56:43,119
important right it's it's how you can

1070
00:56:40,929 --> 00:56:45,519
see more clearly when you have bugs

1071
00:56:43,119 --> 00:56:47,500
because a lot of graphic stuff is very

1072
00:56:45,519 --> 00:56:49,000
subtle you might think that you've

1073
00:56:47,500 --> 00:56:51,070
gotten something working but you really

1074
00:56:49,000 --> 00:56:52,480
don't or you may have stuff that's so

1075
00:56:51,070 --> 00:56:54,760
hard to tell what you know it's wrong

1076
00:56:52,480 --> 00:56:57,849
but you can't tell why structured art

1077
00:56:54,760 --> 00:56:59,500
can help reveal those patterns to you so

1078
00:56:57,849 --> 00:57:01,269
that you can more quickly zero in on

1079
00:56:59,500 --> 00:57:04,480
what you actually have to fix and what's

1080
00:57:01,269 --> 00:57:06,090
wrong right so what I want to do is I

1081
00:57:04,480 --> 00:57:08,590
want to start with some structured art I

1082
00:57:06,090 --> 00:57:11,710
want to try to figure out a way to start

1083
00:57:08,590 --> 00:57:15,910
by sending down let's say red green blue

1084
00:57:11,710 --> 00:57:19,690
white as the for as for lighting samples

1085
00:57:15,909 --> 00:57:22,899
on the corner of every quad so that way

1086
00:57:19,690 --> 00:57:24,970
every quad we look at should have a red

1087
00:57:22,900 --> 00:57:27,250
corner a green corner a blue corner and

1088
00:57:24,969 --> 00:57:29,559
a white corner and a wash in between as

1089
00:57:27,250 --> 00:57:32,610
it interpolates between those samples

1090
00:57:29,559 --> 00:57:36,980
right I

1091
00:57:32,610 --> 00:57:36,980
that's what we want okay

1092
00:57:38,099 --> 00:57:42,839
so let's figure out a way to do that

1093
00:57:39,840 --> 00:57:44,610
let's go ahead into our render group

1094
00:57:42,840 --> 00:57:46,650
here and we need to start thinking about

1095
00:57:44,610 --> 00:57:48,240
how this is going to work this is going

1096
00:57:46,650 --> 00:57:50,190
to get more complicated our render group

1097
00:57:48,239 --> 00:57:52,919
is going to have to get smarter over

1098
00:57:50,190 --> 00:57:54,510
time but at the moment we can do

1099
00:57:52,920 --> 00:57:58,050
something relatively straightforward

1100
00:57:54,510 --> 00:58:02,160
when we go to push a quad down the pipe

1101
00:57:58,050 --> 00:58:04,680
like so what we can do in that push quad

1102
00:58:02,159 --> 00:58:07,469
is we can then use that push quad to

1103
00:58:04,679 --> 00:58:18,419
reserve the texture room that we needed

1104
00:58:07,469 --> 00:58:20,219
right so here is the the funnel through

1105
00:58:18,420 --> 00:58:23,070
which everything in our game goes you

1106
00:58:20,219 --> 00:58:24,599
can see it like right here so what I'm

1107
00:58:23,070 --> 00:58:26,220
gonna say is I'm just gonna start with a

1108
00:58:24,599 --> 00:58:33,079
stupidest possible thing I'm gonna say

1109
00:58:26,219 --> 00:58:40,559
all right vert zero gets a light index

1110
00:58:33,079 --> 00:58:42,719
and a light color and I'm gonna

1111
00:58:40,559 --> 00:58:44,400
replicate it to all vertices now why am

1112
00:58:42,719 --> 00:58:47,189
i replicating it to all vertices again

1113
00:58:44,400 --> 00:58:51,450
the only reason for it is just to

1114
00:58:47,190 --> 00:58:53,010
eliminate possible mistakes thus far in

1115
00:58:51,449 --> 00:58:55,079
the future what we would like to do is

1116
00:58:53,010 --> 00:58:57,000
make it per fragment and then we will

1117
00:58:55,079 --> 00:58:59,069
not be specifying it here anymore it we

1118
00:58:57,000 --> 00:59:01,739
specify it in a separate side band array

1119
00:58:59,070 --> 00:59:05,960
for the moment though we're not going to

1120
00:59:01,739 --> 00:59:05,959
do that yeah okay

1121
00:59:06,090 --> 00:59:10,860
so what we're gonna do here is we're

1122
00:59:07,679 --> 00:59:13,409
gonna hard code these in the future we

1123
00:59:10,860 --> 00:59:17,450
will probably I don't know it's not like

1124
00:59:13,409 --> 00:59:17,449
color it's like Talent

1125
00:59:36,250 --> 00:59:45,710
okay so we've got the the light count in

1126
00:59:43,550 --> 00:59:47,000
here and what we want to do is say from

1127
00:59:45,710 --> 00:59:50,780
now on we're just gonna have the light

1128
00:59:47,000 --> 00:59:53,119
count as always for right and the light

1129
00:59:50,780 --> 00:59:56,870
index is always going to be whatever our

1130
00:59:53,119 --> 01:00:06,670
quad index was right so we know that we

1131
00:59:56,869 --> 01:00:10,250
have a quad index which is the vert cap

1132
01:00:06,670 --> 01:00:12,760
in fact we know that that's what it is

1133
01:00:10,250 --> 01:00:18,730
right so we know that like our vert

1134
01:00:12,760 --> 01:00:18,730
index is this

1135
01:00:22,030 --> 01:00:30,250
so we can just use that because it's

1136
01:00:26,900 --> 01:00:34,130
already going up by four right

1137
01:00:30,250 --> 01:00:38,480
so that should allow us to do what we

1138
01:00:34,130 --> 01:00:43,010
wanted to do which is just striate these

1139
01:00:38,480 --> 01:00:47,679
correctly what did I actually call this

1140
01:00:43,010 --> 01:00:47,680
is it first light index light offset

1141
01:00:48,099 --> 01:00:55,599
surprise it's light index now all right

1142
01:00:53,260 --> 01:00:57,890
what did I call it a fragment shader I

1143
01:00:55,599 --> 01:01:02,050
call it light offset it's not light

1144
01:00:57,889 --> 01:01:02,049
offsets light index it's an actual index

1145
01:01:12,429 --> 01:01:21,579
all right lovely now when we run this we

1146
01:01:19,280 --> 01:01:27,980
should not see any real difference here

1147
01:01:21,579 --> 01:01:30,549
Jimmy ooh did I mess up something when I

1148
01:01:27,980 --> 01:01:30,550
changed that

1149
01:01:36,739 --> 01:01:59,839
I did my bad this was supposed to be

1150
01:01:45,920 --> 01:02:01,970
replaced as well and wasn't lovely so

1151
01:01:59,840 --> 01:02:04,250
now we have a vertex stream that

1152
01:02:01,969 --> 01:02:06,409
properly has four spaces reserved in the

1153
01:02:04,250 --> 01:02:08,360
texture for it right because I have

1154
01:02:06,409 --> 01:02:10,940
properly placed you know each one of

1155
01:02:08,360 --> 01:02:12,980
them has four spaces we say that there

1156
01:02:10,940 --> 01:02:15,320
are four of them so now our shader

1157
01:02:12,980 --> 01:02:17,630
should be able to read that we just now

1158
01:02:15,320 --> 01:02:22,130
have two steps we have to do one we have

1159
01:02:17,630 --> 01:02:23,930
to put something in there right and

1160
01:02:22,130 --> 01:02:26,119
we'll do that step second the other

1161
01:02:23,929 --> 01:02:29,359
thing we have to do is actually bind the

1162
01:02:26,119 --> 01:02:33,470
vertex these additional vertex values

1163
01:02:29,360 --> 01:02:36,740
right so what you can see here is is

1164
01:02:33,469 --> 01:02:38,149
when we do for example this this binding

1165
01:02:36,739 --> 01:02:41,079
down here right you can see we're not

1166
01:02:38,150 --> 01:02:46,700
actually binding any vertex information

1167
01:02:41,079 --> 01:02:49,358
up here in the use program begin you can

1168
01:02:46,699 --> 01:02:52,659
see we've got the is valid array stuff

1169
01:02:49,358 --> 01:02:54,949
that is what we actually now need to do

1170
01:02:52,659 --> 01:03:02,839
so we're gonna have to do a thing that's

1171
01:02:54,949 --> 01:03:06,099
like is valid array light offset is

1172
01:03:02,840 --> 01:03:06,100
valid or a light count

1173
01:03:21,699 --> 01:03:27,919
so those two things we now have to

1174
01:03:24,829 --> 01:03:33,380
describe and they are both the same kind

1175
01:03:27,920 --> 01:03:38,960
right they're unsigned short there's

1176
01:03:33,380 --> 01:03:41,360
only one of them in each case since

1177
01:03:38,960 --> 01:03:43,400
they're pairs I guess now that I think

1178
01:03:41,360 --> 01:03:46,309
about it I probably should just do them

1179
01:03:43,400 --> 01:03:49,730
as one but I don't know if you can do

1180
01:03:46,309 --> 01:03:52,460
that I don't know what you call that

1181
01:03:49,730 --> 01:03:54,500
it's because there's a Veck - I don't

1182
01:03:52,460 --> 01:03:56,449
know in the shader if there's a unsigned

1183
01:03:54,500 --> 01:03:58,219
short - so I'm just going to leave it as

1184
01:03:56,449 --> 01:04:10,879
two separate arrays for now but that's

1185
01:03:58,219 --> 01:04:12,559
worth noting so I don't know we don't

1186
01:04:10,880 --> 01:04:14,660
want them normalized that's what this

1187
01:04:12,559 --> 01:04:18,159
parameter is right we want them to

1188
01:04:14,659 --> 01:04:18,159
remain unknown alized

1189
01:04:24,110 --> 01:04:28,559
right yeah so we don't want them

1190
01:04:26,639 --> 01:04:30,750
normalized like the GL unsigned byte for

1191
01:04:28,559 --> 01:04:32,340
example it gets normalized so it's a it

1192
01:04:30,750 --> 01:04:34,079
takes a zero to two to five range in

1193
01:04:32,340 --> 01:04:44,940
maps at zero to one we don't want to do

1194
01:04:34,079 --> 01:04:46,619
that for some reason I did it again I

1195
01:04:44,940 --> 01:04:48,300
really want to call this light offset in

1196
01:04:46,619 --> 01:05:05,639
some places in light index in others we

1197
01:04:48,300 --> 01:05:08,760
don't know why so once we've got that we

1198
01:05:05,639 --> 01:05:10,529
should be pretty good to go here that

1199
01:05:08,760 --> 01:05:13,020
should all be sent down but we need

1200
01:05:10,530 --> 01:05:15,410
obviously somewhere that this gets

1201
01:05:13,019 --> 01:05:15,409
recorded

1202
01:05:22,429 --> 01:05:31,819
so we disabled it probably should have

1203
01:05:29,070 --> 01:05:31,820
put these in an array

1204
01:05:41,250 --> 01:05:45,989
I didn't put a Rea on the end of these

1205
01:05:43,170 --> 01:05:52,440
for reasons that nobody knows we don't

1206
01:05:45,989 --> 01:05:56,789
know why probably because I don't really

1207
01:05:52,440 --> 01:05:58,590
care about them it's like I said we

1208
01:05:56,789 --> 01:05:59,849
should probably sent down as a single

1209
01:05:58,590 --> 01:06:01,200
array and it probably should be sent

1210
01:05:59,849 --> 01:06:02,069
down only the fragment shader but we

1211
01:06:01,199 --> 01:06:05,989
don't really know how to do that just

1212
01:06:02,070 --> 01:06:11,580
yet all right so we'll disable those two

1213
01:06:05,989 --> 01:06:13,649
and enable them as necessary when we do

1214
01:06:11,579 --> 01:06:18,179
use program begin that will

1215
01:06:13,650 --> 01:06:21,119
automatically happen so I think that's

1216
01:06:18,179 --> 01:06:24,029
all good so really then what we have to

1217
01:06:21,119 --> 01:06:26,699
do is make sure that the part where we

1218
01:06:24,030 --> 01:06:29,070
actually get the locations so this Open

1219
01:06:26,699 --> 01:06:35,759
GL create program for example right here

1220
01:06:29,070 --> 01:06:42,090
we need light vert light index vert

1221
01:06:35,760 --> 01:06:49,020
light count and those should just give

1222
01:06:42,090 --> 01:06:53,480
us back at the binding location so now

1223
01:06:49,019 --> 01:07:00,300
in theory anyway we are sending down

1224
01:06:53,480 --> 01:07:03,150
those values we have not put well

1225
01:07:00,300 --> 01:07:06,480
actually no so so now in theory anyway

1226
01:07:03,150 --> 01:07:08,430
we know we have a bug because the

1227
01:07:06,480 --> 01:07:10,559
lighting when I run the lighting it will

1228
01:07:08,429 --> 01:07:12,329
write values in there they they'll be

1229
01:07:10,559 --> 01:07:18,989
like you know who knows what the values

1230
01:07:12,329 --> 01:07:22,139
will be but they'll be in there so we do

1231
01:07:18,989 --> 01:07:26,299
sort of know that that's not quite right

1232
01:07:22,139 --> 01:07:31,079
yet because we must be binding something

1233
01:07:26,300 --> 01:07:33,330
incorrectly or we would be seeing some

1234
01:07:31,079 --> 01:07:37,440
of that information coming through I

1235
01:07:33,329 --> 01:07:39,659
think I don't want a 100% count on that

1236
01:07:37,440 --> 01:07:43,490
just yet so I am going to go ahead and

1237
01:07:39,659 --> 01:07:46,699
set the lighting stuff anyway

1238
01:07:43,489 --> 01:07:46,699
just to be safe

1239
01:07:50,800 --> 01:07:55,640
but I'm pretty sure I did I must have

1240
01:07:53,389 --> 01:07:57,019
not quite gotten everything set up

1241
01:07:55,639 --> 01:08:01,460
properly there because I think we should

1242
01:07:57,019 --> 01:08:08,480
have seen that come through and we

1243
01:08:01,460 --> 01:08:11,679
didn't right so ah you know what though

1244
01:08:08,480 --> 01:08:15,159
this right here is the wrong name that's

1245
01:08:11,679 --> 01:08:15,159
that's one of it

1246
01:08:24,140 --> 01:08:29,130
so here in the Z bias program if we want

1247
01:08:27,149 --> 01:08:32,579
this this would have to be vert light

1248
01:08:29,130 --> 01:08:34,739
index and vert light count and and right

1249
01:08:32,579 --> 01:08:45,000
and we didn't set them either so you

1250
01:08:34,739 --> 01:08:47,358
have to finish this part of it as a

1251
01:08:45,000 --> 01:08:47,359
pass-through

1252
01:08:55,259 --> 01:08:58,409
Am I

1253
01:08:59,270 --> 01:09:08,150
something very bad has happened but I

1254
01:09:03,500 --> 01:09:12,380
don't know what it's just getting slower

1255
01:09:08,149 --> 01:09:17,349
and slower and slower that's a very

1256
01:09:12,380 --> 01:09:17,350
curious result wouldn't you say

1257
01:09:20,649 --> 01:09:26,619
so why is it doing that that's as if the

1258
01:09:24,130 --> 01:09:33,210
frag light count values were going up

1259
01:09:26,619 --> 01:09:33,210
and up and up and up or something right

1260
01:09:33,720 --> 01:09:38,070
something strange is happening there

1261
01:09:49,109 --> 01:09:54,079
can't say I see immediately what it is

1262
01:09:57,319 --> 01:10:04,289
it could be that we're not unbinding

1263
01:10:01,170 --> 01:10:05,640
something that we bound would be another

1264
01:10:04,289 --> 01:10:07,319
thing that could cause something like

1265
01:10:05,640 --> 01:10:10,590
that like if we're constantly adding

1266
01:10:07,319 --> 01:10:17,219
more and more vertex buffers right so if

1267
01:10:10,590 --> 01:10:20,430
for example so here's where we enable

1268
01:10:17,220 --> 01:10:23,490
our vertex array a trip array is here

1269
01:10:20,430 --> 01:10:27,030
right the light of next to the light

1270
01:10:23,489 --> 01:10:35,010
count we enable both of these and give

1271
01:10:27,029 --> 01:10:40,739
them pointers and so maybe I didn't

1272
01:10:35,010 --> 01:10:48,840
actually do this right here although it

1273
01:10:40,739 --> 01:10:52,649
sure looks like I did right it looks

1274
01:10:48,840 --> 01:10:55,069
like they both get disabled and Plus

1275
01:10:52,649 --> 01:10:58,279
that couldn't really have done it I

1276
01:10:55,069 --> 01:10:58,279
don't think

1277
01:11:09,750 --> 01:11:13,449
so let me flip back over here real quick

1278
01:11:12,100 --> 01:11:26,200
I just want to make sure what we're

1279
01:11:13,449 --> 01:11:30,189
passing down do we ever pass anything

1280
01:11:26,199 --> 01:11:35,939
else down I don't think I think

1281
01:11:30,189 --> 01:11:38,939
everything goes through push quad right

1282
01:11:35,939 --> 01:11:38,939
yeah

1283
01:11:47,920 --> 01:11:53,460
so looking at this the light index goes

1284
01:11:54,510 --> 01:12:12,070
goes up the light count doesn't just one

1285
01:12:08,800 --> 01:12:14,529
thing I should change or verify light

1286
01:12:12,069 --> 01:12:17,229
index is light index and like count is

1287
01:12:14,529 --> 01:12:27,368
like count correct that would also be

1288
01:12:17,229 --> 01:12:29,019
potentially bad yeah so I'm not sure

1289
01:12:27,368 --> 01:12:31,899
what that's what's happening there

1290
01:12:29,020 --> 01:12:33,940
that's very interesting right

1291
01:12:31,899 --> 01:12:36,789
you see what's happening there right it

1292
01:12:33,939 --> 01:12:39,988
starts out fast ends up getting slower

1293
01:12:36,789 --> 01:12:39,988
and slower and slower and slower

1294
01:12:44,979 --> 01:12:52,659
now that could just be because more

1295
01:12:49,149 --> 01:12:57,129
stuff is on the screen but I can't

1296
01:12:52,659 --> 01:13:00,539
imagine why let me just let me just do a

1297
01:12:57,130 --> 01:13:00,539
quick check here just to see

1298
01:13:16,149 --> 01:13:25,759
let's suppose we don't do this right

1299
01:13:20,689 --> 01:13:29,169
like we don't we don't do this call so

1300
01:13:25,760 --> 01:13:29,170
instead we just do like

1301
01:13:36,929 --> 01:13:42,000
so it's definitely the while loop that's

1302
01:13:40,170 --> 01:13:44,569
the problem here

1303
01:13:42,000 --> 01:13:44,569
right

1304
01:13:53,429 --> 01:14:03,630
oh I know what the problem is

1305
01:14:00,649 --> 01:14:09,089
we were still fetching the next light

1306
01:14:03,630 --> 01:14:12,829
index we don't want that we just want to

1307
01:14:09,090 --> 01:14:12,829
loop loops we just want to loop through

1308
01:14:14,479 --> 01:14:24,329
that could that could easily be it so

1309
01:14:17,340 --> 01:14:28,409
let's let's double check that nope still

1310
01:14:24,329 --> 01:14:30,510
wrong because the light index was yeah

1311
01:14:28,408 --> 01:14:32,609
was getting modified there so I feel

1312
01:14:30,510 --> 01:14:34,170
like that could have been bad although

1313
01:14:32,609 --> 01:14:36,479
well no because it would still only do

1314
01:14:34,170 --> 01:14:38,908
however many it was supposed to do in

1315
01:14:36,479 --> 01:14:40,379
count so even though it was reading from

1316
01:14:38,908 --> 01:14:47,879
that light index that shouldn't really

1317
01:14:40,380 --> 01:14:49,980
have been a problem right all right well

1318
01:14:47,880 --> 01:14:53,279
so let's set light count equal to four

1319
01:14:49,979 --> 01:14:55,289
which is what we think it should be and

1320
01:14:53,279 --> 01:15:00,929
let's try to verify that it actually

1321
01:14:55,289 --> 01:15:02,609
works okay if it's four all right so it

1322
01:15:00,929 --> 01:15:05,460
looks like what we're having is a

1323
01:15:02,609 --> 01:15:09,500
problem that the light count is not

1324
01:15:05,460 --> 01:15:15,989
properly getting set to four always I

1325
01:15:09,500 --> 01:15:18,929
guess because in theory we should never

1326
01:15:15,988 --> 01:15:21,319
have a vertex whose light count is not

1327
01:15:18,929 --> 01:15:21,319
four

1328
01:15:22,399 --> 01:15:26,879
right I mean you can look at this and

1329
01:15:25,050 --> 01:15:29,070
see four at zero light count equals

1330
01:15:26,880 --> 01:15:30,420
light count verticals let count for it

1331
01:15:29,069 --> 01:15:32,488
to let connects like I have for three

1332
01:15:30,420 --> 01:15:34,350
electronics like count they're all set

1333
01:15:32,488 --> 01:15:41,879
to light count and light count is equal

1334
01:15:34,350 --> 01:15:46,079
to four so I'm not sure why it would

1335
01:15:41,880 --> 01:15:51,480
ever not be equal to four but guess what

1336
01:15:46,079 --> 01:15:55,039
it isn't the question is how is it

1337
01:15:51,479 --> 01:15:55,039
getting set to something other than four

1338
01:16:01,930 --> 01:16:12,280
is there anything that draws non quads

1339
01:16:17,560 --> 01:16:22,400
thought everything drew quads at the end

1340
01:16:21,020 --> 01:16:28,610
of the day I thought everything went

1341
01:16:22,399 --> 01:16:31,399
through that pipe and I don't mean I

1342
01:16:28,609 --> 01:16:33,349
don't really mean that I don't mean is

1343
01:16:31,399 --> 01:16:40,039
everything about quads what I mean is

1344
01:16:33,350 --> 01:16:41,690
does everything draw actual does

1345
01:16:40,039 --> 01:16:44,590
everything go through the actual draw

1346
01:16:41,689 --> 01:16:44,589
quad call

1347
01:17:17,510 --> 01:17:25,220
so yeah I'm not too sure about that

1348
01:17:21,550 --> 01:17:27,350
let's maybe try to take advantage of the

1349
01:17:25,220 --> 01:17:30,170
fact that we in theory can run graphics

1350
01:17:27,350 --> 01:17:31,300
debugging here and let's see what

1351
01:17:30,170 --> 01:17:35,690
happens

1352
01:17:31,300 --> 01:17:40,640
whoo here we we only have about 20

1353
01:17:35,689 --> 01:17:41,960
minutes left or so but let's just take a

1354
01:17:40,640 --> 01:17:43,430
look and see if we can get that part

1355
01:17:41,960 --> 01:17:46,369
working because that way we can start

1356
01:17:43,430 --> 01:17:48,920
tomorrow with a working way of sending

1357
01:17:46,369 --> 01:17:50,750
these down in a working order so I

1358
01:17:48,920 --> 01:17:52,609
forget the magic dance I had to do to

1359
01:17:50,750 --> 01:17:54,289
get this thing to work before I'm just

1360
01:17:52,609 --> 01:17:57,250
gonna try to do stark graphics to

1361
01:17:54,289 --> 01:17:57,250
bugging hopefully that'll work

1362
01:18:04,090 --> 01:18:08,779
and now I'll just go ahead and do pause

1363
01:18:06,890 --> 01:18:16,010
and capture frame I think this how think

1364
01:18:08,779 --> 01:18:19,670
that works yeah so here we have here we

1365
01:18:16,010 --> 01:18:24,050
have paused and captured a frame so if

1366
01:18:19,670 --> 01:18:26,180
we go into our vertex attributes now we

1367
01:18:24,050 --> 01:18:28,520
should be able to see what we're

1368
01:18:26,180 --> 01:18:32,720
actually getting so you know here's a

1369
01:18:28,520 --> 01:18:34,720
pass right here for example we should be

1370
01:18:32,720 --> 01:18:40,480
able to see what elements are being set

1371
01:18:34,720 --> 01:18:40,480
and all that good stuff all right so

1372
01:18:49,569 --> 01:18:53,479
unfortunately I guess we have to use the

1373
01:18:51,889 --> 01:19:01,219
buggy version because you can see it is

1374
01:18:53,479 --> 01:19:16,718
optimized out our other our other short

1375
01:19:01,219 --> 01:19:34,460
I guess one thing we could do to prevent

1376
01:19:16,719 --> 01:19:36,849
disaster let's try that start graphics

1377
01:19:34,460 --> 01:19:36,849
debugging

1378
01:19:41,359 --> 01:19:44,960
so that's still nice and zippy so that

1379
01:19:43,189 --> 01:19:49,639
is working insight

1380
01:19:44,960 --> 01:19:52,899
pause and capture frame and now

1381
01:19:49,640 --> 01:19:58,579
hopefully we have to know we still don't

1382
01:19:52,899 --> 01:20:00,349
well maybe that explains it if the

1383
01:19:58,579 --> 01:20:03,199
problem is that we're not binding that

1384
01:20:00,350 --> 01:20:05,539
array because we should see two unsigned

1385
01:20:03,199 --> 01:20:08,239
short arrays here but we're not so let's

1386
01:20:05,539 --> 01:20:11,029
figure out why all right maybe I just

1387
01:20:08,239 --> 01:20:20,449
have a spelling error and that would be

1388
01:20:11,029 --> 01:20:37,279
simple so in here the name of this input

1389
01:20:20,449 --> 01:20:40,880
oh great well that was easy so I guess

1390
01:20:37,279 --> 01:20:43,689
we did have a spelling error that's

1391
01:20:40,880 --> 01:20:43,690
probably it

1392
01:20:44,979 --> 01:20:54,079
that was just a typo but it was a bad

1393
01:20:48,140 --> 01:20:58,420
type of thank you to the graphics

1394
01:20:54,079 --> 01:21:02,149
devoted her for working and there we go

1395
01:20:58,420 --> 01:21:04,430
all right so I still would have expected

1396
01:21:02,149 --> 01:21:05,869
to see some data in there so I'm not

1397
01:21:04,430 --> 01:21:09,230
sure everything's working quite right

1398
01:21:05,869 --> 01:21:11,029
yet but at least we got rid of that

1399
01:21:09,229 --> 01:21:14,359
that was definitely a bad typo so that's

1400
01:21:11,029 --> 01:21:18,679
no good so let's finish by stuffing some

1401
01:21:14,359 --> 01:21:24,339
things into that array and then we will

1402
01:21:18,680 --> 01:21:24,340
go ahead and play around with things

1403
01:21:24,609 --> 01:21:30,139
tomorrow in in actually sort of setting

1404
01:21:27,560 --> 01:21:32,150
up the lighting samples so what I want

1405
01:21:30,140 --> 01:21:33,800
to do again is just push some structured

1406
01:21:32,149 --> 01:21:35,179
art down here so I'm gonna go into

1407
01:21:33,800 --> 01:21:39,860
render drilling put it you know one that

1408
01:21:35,180 --> 01:21:42,740
doesn't have my head in front of it so

1409
01:21:39,859 --> 01:21:45,949
when we do our output lighting textures

1410
01:21:42,739 --> 01:21:49,059
now we don't really need to do a lot of

1411
01:21:45,949 --> 01:21:51,500
the stuff that we were doing before so

1412
01:21:49,060 --> 01:21:53,840
we'll have to kind of rewrite these

1413
01:21:51,500 --> 01:21:55,050
routine since we don't need the voxel

1414
01:21:53,840 --> 01:21:59,210
stuff like none of this

1415
01:21:55,050 --> 01:21:59,210
it's necessary right

1416
01:22:01,159 --> 01:22:14,279
this stuff is all kind of old news and

1417
01:22:11,819 --> 01:22:15,659
so what we can do what we got to do now

1418
01:22:14,279 --> 01:22:18,899
is kind of think about this a little bit

1419
01:22:15,659 --> 01:22:21,359
differently but for now let's just let's

1420
01:22:18,899 --> 01:22:23,039
do this the simple way so in here where

1421
01:22:21,359 --> 01:22:24,359
we've got like PAC index and that stuff

1422
01:22:23,039 --> 01:22:26,760
and we're sort of creating linked lists

1423
01:22:24,359 --> 01:22:28,109
we're gonna nuke that out right that's

1424
01:22:26,760 --> 01:22:29,579
not gonna happen anymore and in fact

1425
01:22:28,109 --> 01:22:30,869
maybe I'll just leave this in again

1426
01:22:29,579 --> 01:22:33,029
because we don't really know what we're

1427
01:22:30,869 --> 01:22:34,229
gonna do here this is all experimental

1428
01:22:33,029 --> 01:22:35,639
code so you don't want to delete a bunch

1429
01:22:34,229 --> 01:22:39,929
of code that maybe then I decided I

1430
01:22:35,640 --> 01:22:42,030
actually need again so let's start with

1431
01:22:39,930 --> 01:22:43,800
this and delete it in a separate pass

1432
01:22:42,029 --> 01:22:46,469
here so we can kind of keep the old one

1433
01:22:43,800 --> 01:22:48,989
around so we don't need any of this

1434
01:22:46,470 --> 01:22:51,510
voxel stuff right the voxel stuff goes

1435
01:22:48,989 --> 01:22:53,460
away and so we don't eat any of the

1436
01:22:51,510 --> 01:22:55,739
packing stuff either like the lookup or

1437
01:22:53,460 --> 01:22:58,500
the next pointers those are no longer

1438
01:22:55,739 --> 01:23:02,399
relevant to us and we can ignore them

1439
01:22:58,500 --> 01:23:05,939
completely so then what we have here in

1440
01:23:02,399 --> 01:23:08,699
our lighting element is when we pull it

1441
01:23:05,939 --> 01:23:10,739
out what we want to do is basically have

1442
01:23:08,699 --> 01:23:12,329
the packing index specified in the

1443
01:23:10,739 --> 01:23:14,880
lighting element I think that's probably

1444
01:23:12,329 --> 01:23:16,409
what we want to do so what we want to do

1445
01:23:14,880 --> 01:23:22,069
is say alright the place that we're

1446
01:23:16,409 --> 01:23:22,069
gonna pack this thing that pack index

1447
01:23:22,310 --> 01:23:27,270
should probably be directly in the

1448
01:23:25,470 --> 01:23:31,340
lighting element self so where we're

1449
01:23:27,270 --> 01:23:36,060
gonna put this lighting sample back

1450
01:23:31,340 --> 01:23:38,010
that's gonna just be directly specified

1451
01:23:36,060 --> 01:23:39,630
by the lighting element right so

1452
01:23:38,010 --> 01:23:44,070
everything we write from here on out is

1453
01:23:39,630 --> 01:23:45,539
going to go there no voxel involved I'm

1454
01:23:44,069 --> 01:23:49,889
going to compile that it should complain

1455
01:23:45,539 --> 01:23:52,529
because there won't be a pack index but

1456
01:23:49,890 --> 01:23:54,600
we're gonna add one now the destination

1457
01:23:52,529 --> 01:24:01,050
of stuff here this stuff is all garbage

1458
01:23:54,600 --> 01:24:02,880
now so this is not relevant I guess the

1459
01:24:01,050 --> 01:24:04,619
way the right way to do this to leave

1460
01:24:02,880 --> 01:24:07,289
that probably in there and getting set

1461
01:24:04,619 --> 01:24:10,159
let me just go ahead and create false

1462
01:24:07,289 --> 01:24:10,159
versions of these

1463
01:24:23,389 --> 01:24:47,699
let's see what else we got seldom an

1464
01:24:26,368 --> 01:24:49,679
inverse seldom and so now all we should

1465
01:24:47,698 --> 01:24:54,268
have to do is just augment that lighting

1466
01:24:49,679 --> 01:24:55,889
element right to specify where it should

1467
01:24:54,269 --> 01:24:59,550
get packed like we're into the lighting

1468
01:24:55,889 --> 01:25:00,900
array it needs to get packed so here

1469
01:24:59,550 --> 01:25:03,989
I'll just have the pack index sitting at

1470
01:25:00,899 --> 01:25:05,158
the bottom we're able to compile now but

1471
01:25:03,988 --> 01:25:09,948
we're not actually setting it anywhere

1472
01:25:05,158 --> 01:25:09,948
so when we do extract oops

1473
01:25:13,349 --> 01:25:18,210
reflectors from quads and we come down

1474
01:25:15,210 --> 01:25:20,420
through here whatever we create in terms

1475
01:25:18,210 --> 01:25:27,210
of things that we want to pack in here

1476
01:25:20,420 --> 01:25:29,069
we're gonna have to we're gonna have to

1477
01:25:27,210 --> 01:25:34,288
set each lighting elements pack index to

1478
01:25:29,069 --> 01:25:35,969
something same right now it occurs to me

1479
01:25:34,288 --> 01:25:37,800
that actually we can overwrite the

1480
01:25:35,969 --> 01:25:40,889
packing values here so we could actually

1481
01:25:37,800 --> 01:25:42,179
keep pretty much exactly what we have we

1482
01:25:40,889 --> 01:25:44,429
really don't need to change this at all

1483
01:25:42,179 --> 01:25:47,868
so what we could probably do is say all

1484
01:25:44,429 --> 01:25:50,340
right you know what forget about that

1485
01:25:47,868 --> 01:25:52,920
lets say the packing index here is equal

1486
01:25:50,340 --> 01:25:55,650
to zero let's say that every time we

1487
01:25:52,920 --> 01:25:59,519
create a new element we set its packing

1488
01:25:55,649 --> 01:26:05,460
index whatever the packing index

1489
01:25:59,519 --> 01:26:08,809
actually is and here we'll do an elk

1490
01:26:05,460 --> 01:26:08,809
count like an element count

1491
01:26:12,140 --> 01:26:18,060
we don't I guess we know what it is it's

1492
01:26:14,550 --> 01:26:20,579
just it's just sub count the two sub

1493
01:26:18,060 --> 01:26:21,900
counts down times each other right but

1494
01:26:20,579 --> 01:26:24,119
then what we can do is say all right

1495
01:26:21,899 --> 01:26:25,920
well now that we know like we grat we're

1496
01:26:24,119 --> 01:26:30,420
grabbing out these vertices here right

1497
01:26:25,920 --> 01:26:36,000
vert 0 1 2 right what we can do is say 4

1498
01:26:30,420 --> 01:26:39,659
at 0 light index equals 4 1 light index

1499
01:26:36,000 --> 01:26:45,289
equals vert 2 light index equals 4 3

1500
01:26:39,659 --> 01:26:51,449
light index equals pack index right vert

1501
01:26:45,289 --> 01:26:55,460
zero light count wouldn't it be great if

1502
01:26:51,449 --> 01:26:55,460
like C could actually do stuff like this

1503
01:26:56,300 --> 01:27:05,820
you know such a piece of junk it's

1504
01:27:04,020 --> 01:27:07,890
hilarious how they've like never added

1505
01:27:05,819 --> 01:27:10,500
anything that's any good ever and

1506
01:27:07,890 --> 01:27:15,210
there's so much stuff that's like so

1507
01:27:10,500 --> 01:27:18,779
obvious they're just like yeah we'd

1508
01:27:15,210 --> 01:27:20,550
rather just dink around with stupid

1509
01:27:18,779 --> 01:27:22,170
changes designed to make lousy

1510
01:27:20,550 --> 01:27:25,199
programmers make less mistakes

1511
01:27:22,170 --> 01:27:29,640
it's like merit thanks for nothing guys

1512
01:27:25,199 --> 01:27:37,220
all right so X sub count times y sub

1513
01:27:29,640 --> 01:27:47,430
count so there I will basically say okay

1514
01:27:37,220 --> 01:27:52,560
let's just actually have to set this

1515
01:27:47,430 --> 01:27:55,380
first let's just actually have this

1516
01:27:52,560 --> 01:27:57,000
thing however much subdivides we'll use

1517
01:27:55,380 --> 01:27:58,949
that number of lighting samples for this

1518
01:27:57,000 --> 01:28:03,149
particular surface so that will actually

1519
01:27:58,949 --> 01:28:05,449
be accurate right at least I think it

1520
01:28:03,149 --> 01:28:05,449
should be

1521
01:28:07,939 --> 01:28:14,029
yeah but these do clip out that's true

1522
01:28:15,859 --> 01:28:21,239
all right so I don't think this will

1523
01:28:19,319 --> 01:28:23,549
work though because like I said before

1524
01:28:21,239 --> 01:28:25,109
even though now in theory we're packing

1525
01:28:23,550 --> 01:28:27,060
the lights into the right locations it

1526
01:28:25,109 --> 01:28:30,659
seemed like we weren't actually grabbing

1527
01:28:27,060 --> 01:28:34,140
them out properly before so something's

1528
01:28:30,659 --> 01:28:35,869
a little bit busted in that gather so we

1529
01:28:34,140 --> 01:28:40,950
don't really know I'm gonna stuff

1530
01:28:35,869 --> 01:28:43,559
structured light down ahead of time I

1531
01:28:40,949 --> 01:28:45,689
think like I was saying in order to make

1532
01:28:43,560 --> 01:28:47,010
sure things work but we also need to go

1533
01:28:45,689 --> 01:28:50,729
take a look and find out

1534
01:28:47,010 --> 01:28:53,850
why we're getting this sort of never

1535
01:28:50,729 --> 01:28:56,279
actually able to grab the colors and

1536
01:28:53,850 --> 01:28:58,260
it's probably just something that I

1537
01:28:56,279 --> 01:29:01,319
messed up in the OpenGL setup because

1538
01:28:58,260 --> 01:29:04,440
it's really easy to do mess ups with

1539
01:29:01,319 --> 01:29:06,119
your OpenGL setup so anyway like looking

1540
01:29:04,439 --> 01:29:09,359
through here I just wanna make sure this

1541
01:29:06,119 --> 01:29:13,859
is sane I've got the sunlight call with

1542
01:29:09,359 --> 01:29:16,289
the what's being returned from that

1543
01:29:13,859 --> 01:29:20,309
discuss directly modulated looking at

1544
01:29:16,289 --> 01:29:24,319
the result it's doing Texel fetches the

1545
01:29:20,310 --> 01:29:30,090
way that we normally would and that

1546
01:29:24,319 --> 01:29:32,099
seems okay it's so yeah everything's

1547
01:29:30,090 --> 01:29:34,579
fetching off of that light I which seems

1548
01:29:32,100 --> 01:29:34,579
okay

1549
01:29:50,600 --> 01:30:04,590
that seems like what I would expect so I

1550
01:29:57,090 --> 01:30:06,060
think let me just go ahead and see if

1551
01:30:04,590 --> 01:30:15,480
this is working at all though I just

1552
01:30:06,060 --> 01:30:18,030
want to I just want to bump a red

1553
01:30:15,479 --> 01:30:19,469
channel there to make sure yeah I didn't

1554
01:30:18,029 --> 01:30:21,000
know if there was like something else

1555
01:30:19,470 --> 01:30:22,260
that was potentially going on there I

1556
01:30:21,000 --> 01:30:25,140
wasn't sure so I just want to make sure

1557
01:30:22,260 --> 01:30:28,110
that we can actually so we know that our

1558
01:30:25,140 --> 01:30:30,900
summations if if something properly

1559
01:30:28,109 --> 01:30:32,399
summed into that light we would see the

1560
01:30:30,899 --> 01:30:34,469
result there there's not like some

1561
01:30:32,399 --> 01:30:39,629
Squinkie thing happening that would you

1562
01:30:34,470 --> 01:30:42,180
know knock that out so we did we have

1563
01:30:39,630 --> 01:30:46,650
one of two things potentially happening

1564
01:30:42,180 --> 01:30:49,050
we don't know which either we are the

1565
01:30:46,649 --> 01:30:52,379
actual packing somehow is now really

1566
01:30:49,050 --> 01:30:54,119
wrong and the light is not getting put

1567
01:30:52,380 --> 01:30:57,119
into the light array in the same fashion

1568
01:30:54,119 --> 01:30:59,489
or this light sampling where we're

1569
01:30:57,119 --> 01:31:01,769
sampling the light index here we're

1570
01:30:59,489 --> 01:31:06,769
somehow getting the value the actual

1571
01:31:01,770 --> 01:31:09,420
light index value is not properly at

1572
01:31:06,770 --> 01:31:14,490
pointing to one of these arrays in the

1573
01:31:09,420 --> 01:31:16,560
right way like it's you know it's

1574
01:31:14,489 --> 01:31:21,869
indexing off of the wrong things somehow

1575
01:31:16,560 --> 01:31:24,390
we're just not sure how so that I'm just

1576
01:31:21,869 --> 01:31:27,449
not sure what the best way to go about

1577
01:31:24,390 --> 01:31:30,270
looking at is probably see if we can

1578
01:31:27,449 --> 01:31:33,269
capture frame and take a look to see

1579
01:31:30,270 --> 01:31:36,480
what these values are likely to be we

1580
01:31:33,270 --> 01:31:39,480
can't say for sure what they are because

1581
01:31:36,479 --> 01:31:41,009
we can't step into the shader I found

1582
01:31:39,479 --> 01:31:42,750
out why that was by the way I think

1583
01:31:41,010 --> 01:31:49,289
James Whitman was the person who wrote

1584
01:31:42,750 --> 01:31:51,479
in and mentioned it which is that the

1585
01:31:49,289 --> 01:31:53,189
reason I can debug shaders on my dev

1586
01:31:51,479 --> 01:31:55,769
machine and not this machine is actually

1587
01:31:53,189 --> 01:31:58,189
just because they haven't supported

1588
01:31:55,770 --> 01:32:00,390
shader debugging on the 1080s

1589
01:31:58,189 --> 01:32:03,989
that graphics card doesn't support them

1590
01:32:00,390 --> 01:32:04,380
yet so the fact that I'm using an older

1591
01:32:03,989 --> 01:32:06,269
graph

1592
01:32:04,380 --> 01:32:09,239
Fix card in my main debt machine is

1593
01:32:06,270 --> 01:32:12,930
actually a plus because I don't remember

1594
01:32:09,239 --> 01:32:14,550
what that thing is it might be a 600

1595
01:32:12,930 --> 01:32:17,190
series might be an 800 sir I don't

1596
01:32:14,550 --> 01:32:19,619
remember it's an Nvidia card running in

1597
01:32:17,189 --> 01:32:21,569
sight on that card you can step through

1598
01:32:19,619 --> 01:32:26,059
the shaders running in sight on this

1599
01:32:21,569 --> 01:32:28,229
card you can't so what are you gonna do

1600
01:32:26,060 --> 01:32:31,860
so we can't actually step through and

1601
01:32:28,229 --> 01:32:33,899
see specifically what might be wrong

1602
01:32:31,859 --> 01:32:37,199
there but we can look at those arrays

1603
01:32:33,899 --> 01:32:39,329
right that will be inspected and so

1604
01:32:37,199 --> 01:32:42,510
let's just go on a little bit of a

1605
01:32:39,329 --> 01:32:45,000
fishing expedition here because rather

1606
01:32:42,510 --> 01:32:50,010
than start fiddling with it completely

1607
01:32:45,000 --> 01:32:53,729
blind why not use the tool we do have to

1608
01:32:50,010 --> 01:32:57,659
just eliminate some parts of the problem

1609
01:32:53,729 --> 01:32:59,039
from suspicion right so what I'm gonna

1610
01:32:57,659 --> 01:33:00,479
do here is I'm gonna do a pause and

1611
01:32:59,039 --> 01:33:02,159
capture frame and just look to see if I

1612
01:33:00,479 --> 01:33:05,609
can at least verify that those are rate

1613
01:33:02,159 --> 01:33:06,750
well you know what we gotta actually run

1614
01:33:05,609 --> 01:33:11,699
the lighting or there won't be anything

1615
01:33:06,750 --> 01:33:19,050
in those arrays all right so do one more

1616
01:33:11,699 --> 01:33:20,849
time okay so if i run the lighting

1617
01:33:19,050 --> 01:33:22,680
solution under on the lighting solution

1618
01:33:20,850 --> 01:33:25,320
well this'll just switch back to regular

1619
01:33:22,680 --> 01:33:27,510
mode this should now have sent something

1620
01:33:25,319 --> 01:33:29,579
down to those arrays and we can now look

1621
01:33:27,510 --> 01:33:31,500
and see whether it actually did and what

1622
01:33:29,579 --> 01:33:35,399
those if those values are coherent or if

1623
01:33:31,500 --> 01:33:38,010
they're not right so here's the vertex

1624
01:33:35,399 --> 01:33:39,659
attributes and we can read across and

1625
01:33:38,010 --> 01:33:43,350
see the buffers that correspond to them

1626
01:33:39,659 --> 01:33:46,889
so but for us four and five are

1627
01:33:43,350 --> 01:33:48,329
correctly set to non-normalized and they

1628
01:33:46,890 --> 01:33:50,340
are the two values that should have our

1629
01:33:48,329 --> 01:33:51,569
light counts and our light indices so

1630
01:33:50,340 --> 01:33:53,310
what we should see is one of these

1631
01:33:51,569 --> 01:33:57,359
should just have a bunch of count values

1632
01:33:53,310 --> 01:34:02,420
in it and one of them let's I guess we

1633
01:33:57,359 --> 01:34:10,799
need to set this to 16-bit integer

1634
01:34:02,420 --> 01:34:16,170
unsigned did that show us so that's not

1635
01:34:10,800 --> 01:34:19,670
good at all if that's actually right

1636
01:34:16,170 --> 01:34:19,670
that's not good

1637
01:34:30,560 --> 01:34:40,250
oh okay but that's the whole buffer so

1638
01:34:35,510 --> 01:34:42,260
okay ignore that for one second that's

1639
01:34:40,250 --> 01:34:45,380
the whole buffer there I don't know if

1640
01:34:42,260 --> 01:34:48,350
it lets us see it strided so that might

1641
01:34:45,380 --> 01:34:52,970
be harder to deal with so here's the

1642
01:34:48,350 --> 01:34:54,890
entire buffer right it's we're gonna

1643
01:34:52,970 --> 01:34:57,380
have to sort of pick and choose through

1644
01:34:54,890 --> 01:35:00,740
it to figure out where our actual

1645
01:34:57,380 --> 01:35:02,390
unsigned int values are but we do know

1646
01:35:00,739 --> 01:35:06,139
the size of the thing so we should be

1647
01:35:02,390 --> 01:35:08,300
able to take our vertex layout and see

1648
01:35:06,140 --> 01:35:10,070
it correctly right I don't know if

1649
01:35:08,300 --> 01:35:12,560
there's any nice tool in here that

1650
01:35:10,069 --> 01:35:14,539
really lets us do it probably there

1651
01:35:12,560 --> 01:35:17,960
isn't it would be nice though if there

1652
01:35:14,539 --> 01:35:19,640
was like because it should be able to do

1653
01:35:17,960 --> 01:35:20,810
that maybe it can if I go to the vertex

1654
01:35:19,640 --> 01:35:26,920
shader maybe you could do that so we

1655
01:35:20,810 --> 01:35:26,920
don't have to slice it out I'm not sure

1656
01:35:47,819 --> 01:35:55,149
yeah I don't know there might be a

1657
01:35:53,560 --> 01:35:57,940
smarter way to do this than what I'm

1658
01:35:55,149 --> 01:35:59,949
about to do so I apologize for that

1659
01:35:57,939 --> 01:36:02,949
I am NOT the kind of person who spends

1660
01:35:59,949 --> 01:36:03,970
all their day day and graphics coding so

1661
01:36:02,949 --> 01:36:05,859
I'm just gonna have to do this the hard

1662
01:36:03,970 --> 01:36:07,750
way for now I'm going to set it to

1663
01:36:05,859 --> 01:36:09,489
16-bit unsigned which is what we want to

1664
01:36:07,750 --> 01:36:10,989
see but remember we're looking at the

1665
01:36:09,489 --> 01:36:13,420
buffer that actually represents all of

1666
01:36:10,989 --> 01:36:15,010
our vertex data so what that means is

1667
01:36:13,420 --> 01:36:18,399
that all we're really seeing that memory

1668
01:36:15,010 --> 01:36:20,530
view is we're just seeing these textured

1669
01:36:18,399 --> 01:36:22,469
vertices stacked up so if you take a

1670
01:36:20,529 --> 01:36:26,139
look at how many there are here right

1671
01:36:22,470 --> 01:36:28,449
there's there's 32-bit values at the

1672
01:36:26,140 --> 01:36:31,060
front there is four plus three plus two

1673
01:36:28,449 --> 01:36:34,000
of them right pluck these it's 11 so we

1674
01:36:31,060 --> 01:36:38,170
know there's 12 32-bit values in here

1675
01:36:34,000 --> 01:36:40,720
right twelve thirty-two values is 24 no

1676
01:36:38,170 --> 01:36:43,960
if we get set now we can't

1677
01:36:40,720 --> 01:36:46,000
so three rows of this is how many there

1678
01:36:43,960 --> 01:36:47,050
are for each of our vertices you can see

1679
01:36:46,000 --> 01:36:49,560
that there's nonsense sides you know

1680
01:36:47,050 --> 01:36:52,810
that's their floating-point values right

1681
01:36:49,560 --> 01:36:56,830
so we see here is zero four zero four

1682
01:36:52,810 --> 01:37:02,289
zero four zero four four four four four

1683
01:36:56,829 --> 01:37:06,130
four four four four right 8 for 8 for 8

1684
01:37:02,289 --> 01:37:08,859
for 8 for 12 for 12 for 12 for that's

1685
01:37:06,130 --> 01:37:10,989
exactly what we would expect everything

1686
01:37:08,859 --> 01:37:12,309
has four we should be able to get to

1687
01:37:10,989 --> 01:37:16,779
some of that more than four those would

1688
01:37:12,310 --> 01:37:18,400
be ones that are subdivided right so we

1689
01:37:16,779 --> 01:37:22,269
should be able to find some in here that

1690
01:37:18,399 --> 01:37:25,139
are so divided I would hope although I'm

1691
01:37:22,270 --> 01:37:25,140
not really seeing it

1692
01:37:28,020 --> 01:37:45,050
oh well you know what unless we call

1693
01:37:38,399 --> 01:37:52,529
that every frame that wouldn't work

1694
01:37:45,050 --> 01:37:55,909
either so yeah I guess that's true we

1695
01:37:52,529 --> 01:38:01,259
have to actually do that reassignment a

1696
01:37:55,909 --> 01:38:05,340
little more carefully we have to do this

1697
01:38:01,260 --> 01:38:06,869
is not necessarily related to the

1698
01:38:05,340 --> 01:38:08,489
problem we were tracking but I just

1699
01:38:06,869 --> 01:38:11,579
realized we've got one of the problem

1700
01:38:08,489 --> 01:38:13,380
since we don't run the lighting solution

1701
01:38:11,579 --> 01:38:15,000
every frame because we just we're not

1702
01:38:13,380 --> 01:38:17,579
trying to do the full gpu-accelerated

1703
01:38:15,000 --> 01:38:19,350
frame by frame one and we just want to

1704
01:38:17,579 --> 01:38:23,159
be able to it to be as slow as we need

1705
01:38:19,350 --> 01:38:24,960
it to be to test this extract can't

1706
01:38:23,159 --> 01:38:27,239
really do the remap I would kind of got

1707
01:38:24,960 --> 01:38:32,970
overzealous there there's extract can't

1708
01:38:27,239 --> 01:38:35,819
do the remap because it has to it has to

1709
01:38:32,970 --> 01:38:40,409
be run only when you hit the f1 key so

1710
01:38:35,819 --> 01:38:47,729
we can't actually have this correspond

1711
01:38:40,409 --> 01:38:58,170
properly so when we do that f1 there and

1712
01:38:47,729 --> 01:39:00,839
we do output lighting quads this would

1713
01:38:58,170 --> 01:39:09,810
actually have to reconstruct that

1714
01:39:00,840 --> 01:39:13,159
information right and there's really

1715
01:39:09,810 --> 01:39:13,160
nothing we can do about that

1716
01:39:14,390 --> 01:39:17,390
unfortunately

1717
01:39:23,099 --> 01:39:37,679
so we may have to kind of step up our

1718
01:39:25,770 --> 01:39:39,210
game here a little bit or just leave

1719
01:39:37,679 --> 01:39:46,310
things the way that they were without

1720
01:39:39,210 --> 01:39:46,310
subdividing right

1721
01:39:52,859 --> 01:39:58,769
so yeah so we can't really write into

1722
01:39:55,469 --> 01:40:00,899
that we have to use what we've got and

1723
01:39:58,770 --> 01:40:04,170
so for now we would have to do something

1724
01:40:00,899 --> 01:40:06,448
where we would say okay the X sub count

1725
01:40:04,170 --> 01:40:08,760
and the Y sub count they pretty much

1726
01:40:06,448 --> 01:40:11,219
have to be fixed that too because we

1727
01:40:08,760 --> 01:40:13,140
know we only have four elements to write

1728
01:40:11,219 --> 01:40:17,670
into for every quad that comes down

1729
01:40:13,140 --> 01:40:21,719
right so the PAC index here in fact has

1730
01:40:17,670 --> 01:40:25,710
to be exactly zero one two three four

1731
01:40:21,719 --> 01:40:28,140
that's what has to happen and the PAC

1732
01:40:25,710 --> 01:40:30,869
index has to come from the vertex right

1733
01:40:28,140 --> 01:40:34,020
so we have to do PAC and x equals vert

1734
01:40:30,869 --> 01:40:39,000
zero light index we have to target that

1735
01:40:34,020 --> 01:40:42,060
we don't have a choice and we can only

1736
01:40:39,000 --> 01:40:43,800
do four that's just that's what we have

1737
01:40:42,060 --> 01:40:45,480
to do right now and we can improve that

1738
01:40:43,800 --> 01:40:47,400
going forwards when we actually have a

1739
01:40:45,479 --> 01:40:50,879
more streamlined light situation but

1740
01:40:47,399 --> 01:40:53,309
that's actually what we have to do so

1741
01:40:50,880 --> 01:40:55,500
that's the only fair way to do it and

1742
01:40:53,310 --> 01:40:59,910
now we will actually have a lighting

1743
01:40:55,500 --> 01:41:04,109
solution that would line up properly in

1744
01:40:59,909 --> 01:41:05,880
theory okay so that's fine before I go

1745
01:41:04,109 --> 01:41:09,389
to Q&amp;A I do want to finish what I was

1746
01:41:05,880 --> 01:41:11,039
doing though which is to run the

1747
01:41:09,390 --> 01:41:12,810
graphics debugger and just see what's in

1748
01:41:11,039 --> 01:41:16,109
those other buffers the lighting buffers

1749
01:41:12,810 --> 01:41:17,850
themselves so here if I was to capture a

1750
01:41:16,109 --> 01:41:20,399
frame I should be able to look at what

1751
01:41:17,850 --> 01:41:23,360
the lighting buffers are that the vertex

1752
01:41:20,399 --> 01:41:27,299
I'm sorry the fragment shader is

1753
01:41:23,359 --> 01:41:33,479
sampling from so that I would like to

1754
01:41:27,300 --> 01:41:39,300
take a look at here is the verse there

1755
01:41:33,479 --> 01:41:40,919
is here is the actually you know what no

1756
01:41:39,300 --> 01:41:44,489
that's not it that's the frame buffer

1757
01:41:40,920 --> 01:41:46,800
which I don't care about I actually want

1758
01:41:44,488 --> 01:41:50,639
the fragment shader which I have to move

1759
01:41:46,800 --> 01:41:52,529
to different before there we go so

1760
01:41:50,640 --> 01:41:57,030
here's the see sampler in the D sampler

1761
01:41:52,529 --> 01:41:59,340
the PX sampler it's at etc I'm just

1762
01:41:57,029 --> 01:42:00,569
going to look and see what whether these

1763
01:41:59,340 --> 01:42:02,760
have anything in them

1764
01:42:00,569 --> 01:42:07,559
make sense right I mean they should in

1765
01:42:02,760 --> 01:42:08,670
theory but I don't really know so oops I

1766
01:42:07,560 --> 01:42:09,750
gotta remember which one I clicked on

1767
01:42:08,670 --> 01:42:12,599
since it doesn't really give me any

1768
01:42:09,750 --> 01:42:14,399
information so let's take a look at the

1769
01:42:12,599 --> 01:42:17,179
SI sampler that should be the color

1770
01:42:14,399 --> 01:42:17,179
values right

1771
01:42:27,340 --> 01:42:34,390
all right so I mean there's plenty of

1772
01:42:31,270 --> 01:42:35,890
color values in here there's definitely

1773
01:42:34,390 --> 01:42:37,570
a lot of blacks but there's definitely a

1774
01:42:35,890 --> 01:42:39,550
lot of colors so I don't know that's a

1775
01:42:37,569 --> 01:42:43,269
little bit hard to say but there's

1776
01:42:39,550 --> 01:42:50,230
certainly you certainly expect to see

1777
01:42:43,270 --> 01:42:52,210
something right so I'm a little confused

1778
01:42:50,229 --> 01:42:56,019
as to why we're not able to see anything

1779
01:42:52,210 --> 01:43:02,619
at all that seems a bit odd to me I

1780
01:42:56,020 --> 01:43:03,760
would like to just verify again that the

1781
01:43:02,619 --> 01:43:05,229
vertex shader is getting that

1782
01:43:03,760 --> 01:43:06,640
information but I'm thinking that it is

1783
01:43:05,229 --> 01:43:09,609
I mean based on what we looked at before

1784
01:43:06,640 --> 01:43:11,890
it certainly seemed like it was so

1785
01:43:09,609 --> 01:43:21,219
that's a little bit odd does the

1786
01:43:11,890 --> 01:43:23,890
fragment shader list an input how come

1787
01:43:21,220 --> 01:43:27,460
like this I don't really want uniforms I

1788
01:43:23,890 --> 01:43:29,730
just want the here it is this is what I

1789
01:43:27,460 --> 01:43:29,730
wanted

1790
01:43:33,500 --> 01:43:43,069
can you show me this I just want to look

1791
01:43:35,779 --> 01:43:46,579
at this why does it say Jail unsigned

1792
01:43:43,069 --> 01:43:52,789
int I guess that's because that's what

1793
01:43:46,579 --> 01:43:55,430
it comes through as I wonder if that

1794
01:43:52,789 --> 01:43:57,079
means I've defining it as a short is

1795
01:43:55,430 --> 01:44:09,949
wrong and I need to define it as an

1796
01:43:57,079 --> 01:44:12,409
integer instead because I told it it was

1797
01:44:09,948 --> 01:44:14,479
an unsigned short but it says it's an

1798
01:44:12,409 --> 01:44:16,939
unsigned int and I don't know exactly

1799
01:44:14,479 --> 01:44:20,509
how that fetch is gonna be working I

1800
01:44:16,939 --> 01:44:22,069
feel like the vertex specification does

1801
01:44:20,510 --> 01:44:24,079
correctly say that's an unsigned short

1802
01:44:22,069 --> 01:44:25,639
so I feel like the fetch should fetch

1803
01:44:24,079 --> 01:44:27,500
you to the short and turn it into an int

1804
01:44:25,640 --> 01:44:33,500
but I don't know if that means that it

1805
01:44:27,500 --> 01:44:35,948
shouldn't be specified that way in the

1806
01:44:33,500 --> 01:44:35,948
actual

1807
01:44:41,710 --> 01:44:46,539
in the actual shader itself you and I'm

1808
01:44:44,710 --> 01:44:49,600
saying like I'm wondering if that means

1809
01:44:46,539 --> 01:44:54,729
that that this is not actually it should

1810
01:44:49,600 --> 01:44:57,070
be just unsigned int here you know or

1811
01:44:54,729 --> 01:44:58,329
just plain int we don't need it to be

1812
01:44:57,069 --> 01:45:03,099
unsigned for any particular reason

1813
01:44:58,329 --> 01:45:05,619
obviously I don't know that doesn't seem

1814
01:45:03,100 --> 01:45:10,210
likely but if that's what it actually

1815
01:45:05,619 --> 01:45:15,989
thinks the actual input is I wonder if

1816
01:45:10,210 --> 01:45:15,989
that implies we have to set it this way

1817
01:45:21,930 --> 01:45:29,680
like maybe it just doesn't deal with

1818
01:45:24,189 --> 01:45:39,819
shorts well that definitely changed

1819
01:45:29,680 --> 01:45:41,170
things right I mean before we were kind

1820
01:45:39,819 --> 01:45:44,559
of crashing out there and now all of a

1821
01:45:41,170 --> 01:45:48,520
sudden we're getting a kind of a freeze

1822
01:45:44,560 --> 01:45:54,550
in there right and all I did was change

1823
01:45:48,520 --> 01:45:57,610
it to an unsigned in in each of these

1824
01:45:54,550 --> 01:46:04,810
cases that's it I didn't touch anything

1825
01:45:57,609 --> 01:46:12,489
else right so I'm interested to see is

1826
01:46:04,810 --> 01:46:16,170
there a way we can get some is there a

1827
01:46:12,489 --> 01:46:16,170
way we can get some debug info on that

1828
01:46:22,359 --> 01:46:25,359
yeah

1829
01:46:35,448 --> 01:46:46,488
doesn't look like let's never put

1830
01:46:43,880 --> 01:46:48,819
anything into the log that really tells

1831
01:46:46,488 --> 01:46:48,819
us anything

1832
01:46:59,109 --> 01:47:03,069
so let's play with that a little bit

1833
01:47:07,000 --> 01:47:14,359
when we actually go in here to some

1834
01:47:09,289 --> 01:47:17,090
light and we get our fried light index

1835
01:47:14,359 --> 01:47:18,889
out here and our frag light count I'm

1836
01:47:17,090 --> 01:47:22,819
wondering if our frag let count is

1837
01:47:18,890 --> 01:47:24,110
completely bogus now somehow I'm gonna

1838
01:47:22,819 --> 01:47:35,809
go ahead and do the same trick we did

1839
01:47:24,109 --> 01:47:37,909
before first we'll try this so it is

1840
01:47:35,810 --> 01:47:55,850
that light count value is a bogus value

1841
01:47:37,909 --> 01:47:57,079
at the moment it would seem right so I'm

1842
01:47:55,850 --> 01:48:00,560
not sure where we're getting those

1843
01:47:57,079 --> 01:48:03,140
errant values in there but somehow we're

1844
01:48:00,560 --> 01:48:12,620
not set up to read this properly we just

1845
01:48:03,140 --> 01:48:16,850
don't know how sooo what what would be

1846
01:48:12,619 --> 01:48:19,489
the best way since we can't see what

1847
01:48:16,850 --> 01:48:22,820
these values are when we look at what

1848
01:48:19,489 --> 01:48:29,569
they should be in the buffer they look

1849
01:48:22,819 --> 01:48:32,359
correct right it was like 0 for 4 for 12

1850
01:48:29,569 --> 01:48:34,219
for 16 for those sorts of values right

1851
01:48:32,359 --> 01:48:37,069
which was exactly what we thought they

1852
01:48:34,220 --> 01:48:39,260
should be and the indices are also

1853
01:48:37,069 --> 01:48:46,309
correct so we don't really know why

1854
01:48:39,260 --> 01:48:48,710
we're getting weird results in here but

1855
01:48:46,310 --> 01:48:53,590
for now I'll leave this in and we'll go

1856
01:48:48,710 --> 01:48:53,590
to the Q&amp;A I like to revisit tomorrow

1857
01:49:01,109 --> 01:49:04,289
all right

1858
01:49:21,319 --> 01:49:29,519
okay question time what texture file

1859
01:49:26,670 --> 01:49:33,270
type will you use we actually at the

1860
01:49:29,520 --> 01:49:39,030
moment just have our own pack file we

1861
01:49:33,270 --> 01:49:41,640
probably will just use a basic like a

1862
01:49:39,029 --> 01:49:44,639
very simple zip to zip them or something

1863
01:49:41,640 --> 01:49:48,119
like this we don't need to do texture

1864
01:49:44,640 --> 01:49:50,070
compression because we don't have enough

1865
01:49:48,119 --> 01:49:53,849
textures that that would require it and

1866
01:49:50,069 --> 01:49:58,189
if you use texture if you use Hardware

1867
01:49:53,850 --> 01:50:02,760
texture compression your quality suffers

1868
01:49:58,189 --> 01:50:04,739
and I don't want that so because we

1869
01:50:02,760 --> 01:50:07,440
don't need it we won't come we won't use

1870
01:50:04,739 --> 01:50:10,380
like txt or anything TC or anything like

1871
01:50:07,439 --> 01:50:15,419
that because that just makes our quality

1872
01:50:10,380 --> 01:50:16,680
lower for no benefit we don't need the

1873
01:50:15,420 --> 01:50:19,380
extra bandwidth and we don't need the

1874
01:50:16,680 --> 01:50:22,980
extra space so someone asked if we get

1875
01:50:19,380 --> 01:50:29,789
set oh it's a soft he asked if we could

1876
01:50:22,979 --> 01:50:32,539
set the font larger and that does look

1877
01:50:29,789 --> 01:50:32,539
like we can

1878
01:50:53,289 --> 01:50:57,810
I don't know what font we actually want

1879
01:50:55,569 --> 01:50:57,809
though

1880
01:51:09,039 --> 01:51:21,300
I think I use liberation mono or droid

1881
01:51:15,399 --> 01:51:21,299
sans' mono Keys droid sans' mono now oh

1882
01:51:21,960 --> 01:51:26,350
I forgot

1883
01:51:23,770 --> 01:51:29,490
right windows can't install a font from

1884
01:51:26,350 --> 01:51:33,720
a substituted Drive because you know

1885
01:51:29,489 --> 01:51:33,719
they're just that good at their job

1886
01:51:34,590 --> 01:51:37,800
there we go

1887
01:51:40,920 --> 01:51:56,020
so now we should be able to pick droid

1888
01:51:45,159 --> 01:51:58,680
sans mono in here or not can we not do a

1889
01:51:56,020 --> 01:51:58,680
fixed font

1890
01:52:06,829 --> 01:52:12,619
I guess I had to reboot the program so

1891
01:52:10,760 --> 01:52:21,610
now it should be roughly the same font

1892
01:52:12,619 --> 01:52:21,609
as in the as in the editor

1893
01:52:27,229 --> 01:52:36,738
in what structure do you organize world

1894
01:52:29,029 --> 01:52:39,259
objects we use a sparse grid basically

1895
01:52:36,738 --> 01:52:49,399
it's basically like a how should I put

1896
01:52:39,260 --> 01:52:52,489
it we use a hash table of 3d locations

1897
01:52:49,399 --> 01:52:55,069
and we truncate everything to a sort of

1898
01:52:52,488 --> 01:53:00,259
course 3d location and store it into

1899
01:52:55,069 --> 01:53:02,448
sort of a block that's and we store all

1900
01:53:00,260 --> 01:53:18,650
the entities and their actual locations

1901
01:53:02,448 --> 01:53:20,899
inside that block I think you missed an

1902
01:53:18,649 --> 01:53:25,219
equal sign in one of the shaders when

1903
01:53:20,899 --> 01:53:29,029
defining him something one one one that

1904
01:53:25,219 --> 01:53:36,350
wouldn't have been a shader would it you

1905
01:53:29,029 --> 01:53:43,698
talking about this you're correct I did

1906
01:53:36,350 --> 01:53:44,960
I don't think that'll help us but thanks

1907
01:53:43,698 --> 01:53:50,019
for the a for the catch

1908
01:53:44,960 --> 01:53:50,020
oh good bye Emma stove

1909
01:53:52,619 --> 01:54:03,269
just used any comments on using sequel

1910
01:53:55,930 --> 01:54:03,270
light as a file format for a game uh I

1911
01:54:05,279 --> 01:54:10,960
guess I would say I don't have any

1912
01:54:08,609 --> 01:54:13,380
objections to using sequel light as the

1913
01:54:10,960 --> 01:54:18,189
file for a game as long as you're not

1914
01:54:13,380 --> 01:54:19,329
performance critical I would not use

1915
01:54:18,189 --> 01:54:22,149
sequel light for anything that was

1916
01:54:19,329 --> 01:54:25,000
performance critical but if it's not

1917
01:54:22,149 --> 01:54:28,359
performance critical like you're not

1918
01:54:25,000 --> 01:54:37,390
storing very much data in it then it

1919
01:54:28,359 --> 01:54:39,069
should be okay so the risk oh man isn't

1920
01:54:37,390 --> 01:54:40,390
it weird how OpenGL is with how you have

1921
01:54:39,069 --> 01:54:41,889
to interface with it to do things like

1922
01:54:40,390 --> 01:54:43,270
you send it a string and then you put

1923
01:54:41,890 --> 01:54:45,310
two shaders together to make a program

1924
01:54:43,270 --> 01:54:53,650
it's like esoteric and stuff yeah it's

1925
01:54:45,310 --> 01:54:56,920
awful net modern computers have two

1926
01:54:53,649 --> 01:55:01,269
chips in them of equal complexity more

1927
01:54:56,920 --> 01:55:04,060
or less the GPU in the CPU the CPU has a

1928
01:55:01,270 --> 01:55:07,270
real compiler that you can edit with

1929
01:55:04,060 --> 01:55:09,670
real language with a real debugger and a

1930
01:55:07,270 --> 01:55:12,790
real memory system and the GP has none

1931
01:55:09,670 --> 01:55:15,640
of those things so you can't even just

1932
01:55:12,789 --> 01:55:17,800
code GPU code into your regular code and

1933
01:55:15,640 --> 01:55:19,780
have it go through the same linker and

1934
01:55:17,800 --> 01:55:22,690
output actual code into an executable

1935
01:55:19,779 --> 01:55:25,329
that gets bound like the whole there

1936
01:55:22,689 --> 01:55:27,669
isn't even a executable file format for

1937
01:55:25,329 --> 01:55:30,220
these things that works together right

1938
01:55:27,670 --> 01:55:31,270
it's this ugly polyp off to the side

1939
01:55:30,220 --> 01:55:35,770
it's horrible

1940
01:55:31,270 --> 01:55:39,640
right it's as if you couldn't have to

1941
01:55:35,770 --> 01:55:41,710
see program to see files have the same

1942
01:55:39,640 --> 01:55:43,600
variable in them they had to like create

1943
01:55:41,710 --> 01:55:45,489
a string that named that variable and

1944
01:55:43,600 --> 01:55:49,060
then manually call the function to look

1945
01:55:45,489 --> 01:55:51,939
it up right it's just nuts the whole

1946
01:55:49,060 --> 01:55:55,270
point of the compiler is it does it does

1947
01:55:51,939 --> 01:55:57,729
the mapping of strings to offsets for

1948
01:55:55,270 --> 01:55:59,500
you that's what compiler does right so

1949
01:55:57,729 --> 01:56:01,869
one of the main things it does and we

1950
01:55:59,500 --> 01:56:04,119
just don't even have that yet and it's

1951
01:56:01,869 --> 01:56:06,279
crazy we've been programming these GPUs

1952
01:56:04,119 --> 01:56:11,859
for like I don't even

1953
01:56:06,279 --> 01:56:16,409
No almost 20 years now I want to say and

1954
01:56:11,859 --> 01:56:16,409
we haven't gotten it it's it's crazy

1955
01:56:20,220 --> 01:56:24,670
murk Elbe what percentage is the way

1956
01:56:22,689 --> 01:56:27,250
through the game do you think you are I

1957
01:56:24,670 --> 01:56:28,600
have no idea we do a lot of educational

1958
01:56:27,250 --> 01:56:30,010
stuff on the stream that isn't

1959
01:56:28,600 --> 01:56:35,530
necessarily about trying to finish the

1960
01:56:30,010 --> 01:56:37,510
game so it's hard to say careers

1961
01:56:35,529 --> 01:56:39,969
question why f/32 has a lowercase F

1962
01:56:37,510 --> 01:56:41,890
while F 32 maxes up again stuff because

1963
01:56:39,970 --> 01:56:46,420
I use lowercase four types and uppercase

1964
01:56:41,890 --> 01:56:47,500
four values in what video index do you

1965
01:56:46,420 --> 01:56:49,739
start with discretion about using a

1966
01:56:47,500 --> 01:56:52,329
three-dimensional voxel for lighting uh

1967
01:56:49,739 --> 01:56:53,710
I don't know we've done a bunch of

1968
01:56:52,329 --> 01:56:54,760
streams unloading cuz it's a tough

1969
01:56:53,710 --> 01:56:56,529
problem and I'm just kind of like

1970
01:56:54,760 --> 01:56:58,750
developing a new solution I'm not just

1971
01:56:56,529 --> 01:57:04,689
implementing an existing solution so we

1972
01:56:58,750 --> 01:57:07,029
didn't start right off with a voxel so I

1973
01:57:04,689 --> 01:57:09,489
don't remember it be you know 15 streams

1974
01:57:07,029 --> 01:57:11,729
back 15 episodes back maybe somewhere in

1975
01:57:09,489 --> 01:57:11,729
there

1976
01:57:16,310 --> 01:57:21,200
could we use the normalized light count

1977
01:57:18,770 --> 01:57:22,940
index to one and use them to build a

1978
01:57:21,199 --> 01:57:27,859
color maybe in this way we can see what

1979
01:57:22,939 --> 01:57:29,989
value we get yeah we could try to just

1980
01:57:27,859 --> 01:57:32,319
use those as colored values and see what

1981
01:57:29,989 --> 01:57:32,319
we see

1982
01:57:32,500 --> 01:57:37,000
that's not a bad idea I don't know

1983
01:57:38,329 --> 01:57:43,039
so if we were to do that right what we

1984
01:57:40,939 --> 01:57:48,169
could do is say instead of calling some

1985
01:57:43,039 --> 01:57:51,109
light at all which is down here and we

1986
01:57:48,170 --> 01:57:55,279
could you know just directly write it

1987
01:57:51,109 --> 01:57:58,569
out the the color we could say that the

1988
01:57:55,279 --> 01:58:02,000
light value equals the frag light

1989
01:57:58,569 --> 01:58:07,159
account and the green value equals the

1990
01:58:02,000 --> 01:58:08,810
frag light offset since we know this

1991
01:58:07,159 --> 01:58:11,779
value should be pretty small what we

1992
01:58:08,810 --> 01:58:19,220
could do is say like oh it's whatever

1993
01:58:11,779 --> 01:58:21,309
this is divided by you know 16 so we

1994
01:58:19,220 --> 01:58:24,140
just have a red channel that was like a

1995
01:58:21,310 --> 01:58:27,050
quarter hot when there were four which

1996
01:58:24,140 --> 01:58:28,640
is what we should see most the time for

1997
01:58:27,050 --> 01:58:31,970
the frag light offset we'd have to

1998
01:58:28,640 --> 01:58:35,810
divide it by a much higher number you

1999
01:58:31,970 --> 01:58:39,400
know but that should give us two

2000
01:58:35,810 --> 01:58:45,100
channels that you know show us roughly

2001
01:58:39,399 --> 01:58:48,158
what's going on there I so

2002
01:58:45,100 --> 01:58:48,159
[Music]

2003
01:58:52,408 --> 01:58:54,438
Oh

2004
01:59:11,359 --> 01:59:29,929
of course it doesn't yeah guess I don't

2005
01:59:26,750 --> 01:59:31,550
need to cast those I mean they are

2006
01:59:29,930 --> 01:59:33,860
floating point values already and when

2007
01:59:31,550 --> 01:59:41,630
it doesn't like the F suffix as well so

2008
01:59:33,859 --> 01:59:44,359
get rid of those undefined variable frag

2009
01:59:41,630 --> 01:59:45,800
light offset of course I always want to

2010
01:59:44,359 --> 01:59:50,920
call it light offset instead of light

2011
01:59:45,800 --> 01:59:50,920
index don't ask me why

2012
02:00:00,140 --> 02:00:05,030
so you know I mean this is what we

2013
02:00:02,869 --> 02:00:08,710
thought right which is that we're

2014
02:00:05,029 --> 02:00:08,710
getting completely bogus values in there

2015
02:00:09,189 --> 02:00:15,649
the question is just why you know we

2016
02:00:13,909 --> 02:00:19,550
looked at the values in the buffer and

2017
02:00:15,649 --> 02:00:23,619
they looked right let me see what

2018
02:00:19,550 --> 02:00:23,619
happens if I change it back to shorts

2019
02:00:31,420 --> 02:00:40,270
excuse I assume it will make a

2020
02:00:37,130 --> 02:00:40,270
difference but I don't really know

2021
02:00:44,279 --> 02:00:49,349
so we're just we're just not getting the

2022
02:00:47,670 --> 02:00:50,730
values that we should be getting based

2023
02:00:49,350 --> 02:00:57,420
on the buffer we must have like the

2024
02:00:50,729 --> 02:01:01,169
offset wrong or something or like the

2025
02:00:57,420 --> 02:01:03,659
vertex pointer is off somehow you know

2026
02:01:01,170 --> 02:01:05,730
but basically that's I mean it was still

2027
02:01:03,659 --> 02:01:09,590
it's a good suggestion right it totally

2028
02:01:05,729 --> 02:01:09,589
confirms what we thought was happening

2029
02:01:11,659 --> 02:01:17,039
but it doesn't really help us figure out

2030
02:01:14,130 --> 02:01:30,690
why I just don't know why we're getting

2031
02:01:17,039 --> 02:01:35,989
those bogus values in there I mean these

2032
02:01:30,689 --> 02:01:35,989
look like the right thing

2033
02:01:36,289 --> 02:01:39,408
[Music]

2034
02:01:56,000 --> 02:02:05,600
I mean I guess uh yeah I don't know

2035
02:02:00,380 --> 02:02:06,739
I really just don't know why we're doing

2036
02:02:05,600 --> 02:02:12,260
this well after we're gonna have to

2037
02:02:06,739 --> 02:02:14,599
figure out mr. Alda have you considered

2038
02:02:12,260 --> 02:02:15,710
cascaded voxels as investigated Bosco in

2039
02:02:14,600 --> 02:02:17,870
tracing as the data structure for

2040
02:02:15,710 --> 02:02:21,520
handmade here are letting samples not

2041
02:02:17,869 --> 02:02:25,720
for the samples but we will when we

2042
02:02:21,520 --> 02:02:28,070
eventually go to do the ray tracing

2043
02:02:25,720 --> 02:02:32,869
accelerated we probably will do

2044
02:02:28,069 --> 02:02:37,969
something multi res have you ever seen

2045
02:02:32,869 --> 02:02:44,859
the source code of a GPU driver not one

2046
02:02:37,970 --> 02:02:50,900
of the not Nvidia's or a TIA

2047
02:02:44,859 --> 02:02:55,399
AMD's I have seen the source code of the

2048
02:02:50,899 --> 02:02:59,359
Intel drivers at least one of them

2049
02:02:55,399 --> 02:03:03,229
because I worked on it the one that was

2050
02:02:59,359 --> 02:03:05,619
going to be for Al Arabi so I have seen

2051
02:03:03,229 --> 02:03:05,619
that code

2052
02:03:12,310 --> 02:03:17,620
oh you're right I did not run the

2053
02:03:15,279 --> 02:03:19,539
Ludington well no but we don't need to

2054
02:03:17,619 --> 02:03:21,970
run the loading calculation because the

2055
02:03:19,539 --> 02:03:24,310
letting calculation isn't required these

2056
02:03:21,970 --> 02:03:28,060
values are set at push time they're

2057
02:03:24,310 --> 02:03:34,090
supposed to be set to 0 for 8 right so

2058
02:03:28,060 --> 02:03:44,890
they're always set and we're just not

2059
02:03:34,090 --> 02:03:46,119
getting those values we don't need to

2060
02:03:44,890 --> 02:03:48,250
run the learning calculation because

2061
02:03:46,119 --> 02:03:54,550
those values are actually just getting

2062
02:03:48,250 --> 02:03:58,500
set immediately they get set in push

2063
02:03:54,550 --> 02:04:02,409
quad and we should say should just look

2064
02:03:58,500 --> 02:04:06,220
like monotonically increasing values but

2065
02:04:02,409 --> 02:04:08,529
they don't so we're getting something is

2066
02:04:06,220 --> 02:04:12,490
is weird about the way we're pulling

2067
02:04:08,529 --> 02:04:14,409
these values in is not good but I'm not

2068
02:04:12,489 --> 02:04:22,090
sure because we should see a range of

2069
02:04:14,409 --> 02:04:24,970
values and we're not out so what kind of

2070
02:04:22,090 --> 02:04:28,650
work did you in the Intel driver so I

2071
02:04:24,970 --> 02:04:32,590
didn't do much I was just contracting

2072
02:04:28,649 --> 02:04:36,849
and it wasn't it was the Intel driver

2073
02:04:32,590 --> 02:04:41,050
for when they were going to make a x86

2074
02:04:36,850 --> 02:04:44,050
based graphics part it was the Larrabee

2075
02:04:41,050 --> 02:04:46,659
project which eventually became the like

2076
02:04:44,050 --> 02:04:48,460
Xeon Phi you can buy them now but

2077
02:04:46,659 --> 02:04:50,680
they're not used for graphics they were

2078
02:04:48,460 --> 02:04:55,619
trying to make those work for like

2079
02:04:50,680 --> 02:04:59,170
DirectX rendering and stuff like that

2080
02:04:55,619 --> 02:05:01,479
and most of stuff I did was I only did

2081
02:04:59,170 --> 02:05:02,949
like a few months of work on it but I

2082
02:05:01,479 --> 02:05:08,739
did stuff to analyze like state

2083
02:05:02,949 --> 02:05:13,779
transitions and some stuff to play with

2084
02:05:08,739 --> 02:05:15,399
house shaders were compiled onto it but

2085
02:05:13,779 --> 02:05:18,699
that's really and they did not end up

2086
02:05:15,399 --> 02:05:23,250
shipping those cards for that purpose so

2087
02:05:18,699 --> 02:05:23,250
it was purely like research oriented

2088
02:05:27,828 --> 02:05:32,069
black pants see what kinds of things do

2089
02:05:30,389 --> 02:05:35,909
you most enjoy coding and what things

2090
02:05:32,069 --> 02:05:39,118
the least so the only thing is I don't

2091
02:05:35,908 --> 02:05:40,828
really enjoy coding are things where I

2092
02:05:39,118 --> 02:05:43,529
don't have access to what's actually

2093
02:05:40,828 --> 02:05:45,719
happening so you could say like this

2094
02:05:43,529 --> 02:05:48,958
kind of GPU coding is something I enjoy

2095
02:05:45,719 --> 02:05:50,519
least and the reason is because I'm not

2096
02:05:48,958 --> 02:05:53,309
really programming computer I'm

2097
02:05:50,519 --> 02:05:55,860
programming somebody's idea of how I

2098
02:05:53,309 --> 02:05:59,038
should program a computer same reason I

2099
02:05:55,859 --> 02:06:02,779
don't like we're gonna be C++ high-level

2100
02:05:59,038 --> 02:06:06,538
constructs same reason I don't like

2101
02:06:02,779 --> 02:06:11,219
programming operating system API calls I

2102
02:06:06,538 --> 02:06:13,559
like programming you know something

2103
02:06:11,219 --> 02:06:16,590
that's well specified and complete I

2104
02:06:13,559 --> 02:06:20,369
don't really like programming on top of

2105
02:06:16,590 --> 02:06:22,019
like hacky nonsense so you know I don't

2106
02:06:20,368 --> 02:06:23,279
like using graphics api's and I don't

2107
02:06:22,019 --> 02:06:25,349
like using a spring system API is

2108
02:06:23,279 --> 02:06:26,609
because I disagree with how they've been

2109
02:06:25,349 --> 02:06:28,439
designed and I know that they're not

2110
02:06:26,609 --> 02:06:30,868
doing what I probably think they should

2111
02:06:28,439 --> 02:06:33,059
be doing in terms of how I want them to

2112
02:06:30,868 --> 02:06:37,819
talk to the hardware that is underneath

2113
02:06:33,059 --> 02:06:40,860
right so that's the thing I like least

2114
02:06:37,819 --> 02:06:46,438
what I'd like most is when I have the

2115
02:06:40,859 --> 02:06:47,788
control to do what I want to do so when

2116
02:06:46,439 --> 02:06:49,110
I'm just doing my own code that's much

2117
02:06:47,788 --> 02:06:51,920
more satisfying and when I'm using a

2118
02:06:49,109 --> 02:06:51,920
language that's sane

2119
02:07:03,909 --> 02:07:07,989
if you're recruiting for Casso would be

2120
02:07:06,069 --> 02:07:09,909
would you be able to debug the graphs

2121
02:07:07,989 --> 02:07:11,069
part of it do they give you hardware

2122
02:07:09,909 --> 02:07:13,989
info down to and potatios

2123
02:07:11,069 --> 02:07:18,489
some do some don't depends on the

2124
02:07:13,989 --> 02:07:24,279
console but yet almost universally you

2125
02:07:18,489 --> 02:07:25,960
have a lot more so for example you may

2126
02:07:24,279 --> 02:07:27,699
not necessarily have great debugging but

2127
02:07:25,960 --> 02:07:29,020
you will have a lot more information on

2128
02:07:27,699 --> 02:07:36,359
what the chip does and you will have a

2129
02:07:29,020 --> 02:07:38,590
lot more opportunities to you know

2130
02:07:36,359 --> 02:07:43,079
program it the way you think and create

2131
02:07:38,590 --> 02:07:43,079
an API that makes sense and works well

2132
02:07:56,170 --> 02:08:00,469
alright that soon the queues so tomorrow

2133
02:07:58,698 --> 02:08:02,208
we will pick up where we left off and

2134
02:08:00,469 --> 02:08:04,819
try to figure out why we're getting kind

2135
02:08:02,208 --> 02:08:06,319
of wrong values in ingested into the

2136
02:08:04,819 --> 02:08:12,049
shader there there's probably something

2137
02:08:06,319 --> 02:08:14,149
happening but we'll see

2138
02:08:12,050 --> 02:08:15,380
draaga do you normally comment more than

2139
02:08:14,149 --> 02:08:16,549
you do for this stream your code is

2140
02:08:15,380 --> 02:08:17,538
clean to look at but it feels like it

2141
02:08:16,550 --> 02:08:19,458
big companies they would eat you up for

2142
02:08:17,538 --> 02:08:22,728
not decorating a lot more well that's

2143
02:08:19,458 --> 02:08:26,208
yeah that's no I actually don't comment

2144
02:08:22,729 --> 02:08:27,679
more than this and I would say that in

2145
02:08:26,208 --> 02:08:32,958
general that's why I don't work at big

2146
02:08:27,679 --> 02:08:35,420
companies I think big companies are

2147
02:08:32,958 --> 02:08:36,889
basically like kind of living examples

2148
02:08:35,420 --> 02:08:38,599
of how to take a problem that should

2149
02:08:36,889 --> 02:08:40,609
take like one or two programmers to

2150
02:08:38,599 --> 02:08:42,909
solve and take 500 programmers to solve

2151
02:08:40,609 --> 02:08:45,380
it I mean that's that's what they do I I

2152
02:08:42,908 --> 02:08:45,799
wouldn't work at a big company unless I

2153
02:08:45,380 --> 02:08:47,569
had to

2154
02:08:45,800 --> 02:08:51,679
if I needed the money you know I

2155
02:08:47,569 --> 02:08:54,609
couldn't get a job and I need the money

2156
02:08:51,679 --> 02:08:57,649
then you know I'm I'll I'll do whatever

2157
02:08:54,609 --> 02:09:00,049
but that's why I don't work at them I

2158
02:08:57,649 --> 02:09:02,538
think they don't have good processes and

2159
02:09:00,050 --> 02:09:08,119
I think their output speaks for itself

2160
02:09:02,538 --> 02:09:09,768
you know I mean I think I can't think of

2161
02:09:08,118 --> 02:09:12,288
a large company whose software is

2162
02:09:09,769 --> 02:09:14,469
shipped in a routine manner at a high

2163
02:09:12,288 --> 02:09:17,118
quality level with good features and

2164
02:09:14,469 --> 02:09:21,109
same design they I can't think of a

2165
02:09:17,118 --> 02:09:27,768
single one on the other hand I can think

2166
02:09:21,109 --> 02:09:31,998
of some small companies that do so you

2167
02:09:27,769 --> 02:09:35,360
know yeah I I think you would I think at

2168
02:09:31,998 --> 02:09:36,649
a big company after I don't know how

2169
02:09:35,359 --> 02:09:39,348
many episodes of handmade here we've

2170
02:09:36,649 --> 02:09:40,578
done here I think if you took the

2171
02:09:39,349 --> 02:09:42,319
equivalent of time it's taken us to do

2172
02:09:40,578 --> 02:09:44,478
this stuff on here I think in at a big

2173
02:09:42,319 --> 02:09:46,518
company even if you they didn't have to

2174
02:09:44,479 --> 02:09:48,499
be explaining it on streem they probably

2175
02:09:46,519 --> 02:09:49,760
would have gotten almost to the point

2176
02:09:48,498 --> 02:09:51,260
where they could maybe show a bitmap on

2177
02:09:49,760 --> 02:09:53,239
the screen or something because they

2178
02:09:51,260 --> 02:09:56,329
would have had so many code reviews and

2179
02:09:53,238 --> 02:09:58,549
meetings and everything else related to

2180
02:09:56,328 --> 02:10:00,849
every last little thing they did they

2181
02:09:58,550 --> 02:10:03,199
would never have been able to ever do

2182
02:10:00,849 --> 02:10:06,170
hardly any of the stuff that we ended up

2183
02:10:03,198 --> 02:10:07,488
doing and they certainly wouldn't have

2184
02:10:06,170 --> 02:10:08,460
been able to do all the experiments that

2185
02:10:07,488 --> 02:10:09,809
we've done or

2186
02:10:08,460 --> 02:10:13,829
all of the learning digressions we've

2187
02:10:09,810 --> 02:10:15,870
done and so on they're just incredibly

2188
02:10:13,829 --> 02:10:19,309
slow they get incredibly low output per

2189
02:10:15,869 --> 02:10:22,500
programmer at big companies it's nuts I

2190
02:10:19,310 --> 02:10:25,980
mean I think Twitter is a classic

2191
02:10:22,500 --> 02:10:28,050
example I would challenge you to try and

2192
02:10:25,979 --> 02:10:29,009
figure out how Twitter has I don't even

2193
02:10:28,050 --> 02:10:30,360
know my engineers they have they have

2194
02:10:29,010 --> 02:10:36,390
something like over a thousand engineers

2195
02:10:30,359 --> 02:10:38,279
I mean I I just don't I can't even

2196
02:10:36,390 --> 02:10:40,800
in my brain imagine what they're all

2197
02:10:38,279 --> 02:10:42,899
doing I don't know but the answer is

2198
02:10:40,800 --> 02:10:44,670
usually that they're all really not

2199
02:10:42,899 --> 02:10:46,649
doing anything they're mostly spending

2200
02:10:44,670 --> 02:10:48,390
their time doing stuff like adhering to

2201
02:10:46,649 --> 02:10:49,769
weird coding standards or arguing with

2202
02:10:48,390 --> 02:10:51,860
their manager about something or being

2203
02:10:49,770 --> 02:10:53,880
in the meeting being dismayed or

2204
02:10:51,859 --> 02:10:55,409
spending a lot of time in code reviews

2205
02:10:53,880 --> 02:10:59,969
reviewing code that will get deleted the

2206
02:10:55,409 --> 02:11:01,829
week after and it just sucks up all your

2207
02:10:59,969 --> 02:11:03,689
productivity so that you need ten times

2208
02:11:01,829 --> 02:11:07,260
a hundred times the number of engineers

2209
02:11:03,689 --> 02:11:09,449
you should need to do something I don't

2210
02:11:07,260 --> 02:11:14,550
necessarily blame them for this because

2211
02:11:09,449 --> 02:11:16,590
I don't know how you scale up if you

2212
02:11:14,550 --> 02:11:18,869
really want that many engineers working

2213
02:11:16,590 --> 02:11:20,670
I don't know how you make them all

2214
02:11:18,869 --> 02:11:22,109
efficient you probably can't or maybe

2215
02:11:20,670 --> 02:11:25,560
you need much more advanced stuff than

2216
02:11:22,109 --> 02:11:27,839
we have now but the same time that's why

2217
02:11:25,560 --> 02:11:29,789
I would never work there especially not

2218
02:11:27,840 --> 02:11:30,869
on something small like it's weird like

2219
02:11:29,789 --> 02:11:32,159
things like Twitter they ship an

2220
02:11:30,869 --> 02:11:34,890
incredibly small product that's like a

2221
02:11:32,159 --> 02:11:37,559
four or five person team I would think

2222
02:11:34,890 --> 02:11:42,260
could ship Twitter right but it takes

2223
02:11:37,560 --> 02:11:46,530
them one two thousand engineers you know

2224
02:11:42,260 --> 02:11:49,680
and I'm just like I don't know yeah I

2225
02:11:46,529 --> 02:11:51,090
mean why do you what why and how come

2226
02:11:49,680 --> 02:11:51,869
you haven't asked the question why like

2227
02:11:51,090 --> 02:11:58,489
what how come you don't have a good

2228
02:11:51,869 --> 02:11:58,488
answer as to why right so I don't know

2229
02:12:02,300 --> 02:12:06,150
well feel I work for a large company but

2230
02:12:04,529 --> 02:12:08,000
in a very researchy area honestly I feel

2231
02:12:06,149 --> 02:12:10,319
like I have the best of both worlds and

2232
02:12:08,000 --> 02:12:15,539
yeah you might be able to sew like one

2233
02:12:10,319 --> 02:12:21,269
of the nice things about if you can if

2234
02:12:15,539 --> 02:12:23,159
you can work in a pocket of a large

2235
02:12:21,270 --> 02:12:26,160
company that's sane like Microsoft

2236
02:12:23,159 --> 02:12:27,840
Research at least for a while I don't

2237
02:12:26,159 --> 02:12:30,149
know if it's the same these days but you

2238
02:12:27,840 --> 02:12:33,420
know you could just be doing research on

2239
02:12:30,149 --> 02:12:35,399
your own thing publishing papers and no

2240
02:12:33,420 --> 02:12:39,329
one's bothering you right you get a

2241
02:12:35,399 --> 02:12:41,909
paycheck and a nice office and you can

2242
02:12:39,329 --> 02:12:44,789
go explore important problems and you

2243
02:12:41,909 --> 02:12:47,279
probably aren't bothered a ton and

2244
02:12:44,789 --> 02:12:48,689
they're probably not forcing a code

2245
02:12:47,279 --> 02:12:53,399
review stuff and they're probably not

2246
02:12:48,689 --> 02:12:57,589
forcing you to do this or that right and

2247
02:12:53,399 --> 02:13:00,119
so you know that's that's a good option

2248
02:12:57,590 --> 02:13:01,680
costs eighty said I work at Frostbite

2249
02:13:00,119 --> 02:13:03,840
and I think you would fit right in

2250
02:13:01,680 --> 02:13:05,700
yeah like I said you know big company is

2251
02:13:03,840 --> 02:13:08,869
hard to specify like like I said I can

2252
02:13:05,699 --> 02:13:11,099
think of small teams that do good work

2253
02:13:08,869 --> 02:13:12,359
and there might be some medium-sized

2254
02:13:11,100 --> 02:13:13,800
teams that do big work I wouldn't

2255
02:13:12,359 --> 02:13:16,109
consider the Frostbite team to be that

2256
02:13:13,800 --> 02:13:17,989
large to be honest with you compared to

2257
02:13:16,109 --> 02:13:20,729
what I assume people mean by big company

2258
02:13:17,989 --> 02:13:23,399
and there are obviously teams like I

2259
02:13:20,729 --> 02:13:28,759
don't think the Bungie team goes nuts

2260
02:13:23,399 --> 02:13:31,500
with code reviews for example right and

2261
02:13:28,760 --> 02:13:33,090
so I think there's there's definitely

2262
02:13:31,500 --> 02:13:35,039
like fifty to a hundred sighs

2263
02:13:33,090 --> 02:13:37,199
programming teams usually in the game

2264
02:13:35,039 --> 02:13:39,600
industry but not always like the team

2265
02:13:37,199 --> 02:13:41,939
that does Reaper the audio editor for

2266
02:13:39,600 --> 02:13:44,490
example I bet they don't spend a lot of

2267
02:13:41,939 --> 02:13:46,589
time doing stupid stuff like you know

2268
02:13:44,489 --> 02:13:47,939
commenting a bunch of code and then that

2269
02:13:46,590 --> 02:13:49,079
way the comments will be wrong the next

2270
02:13:47,939 --> 02:13:57,679
day when you change something in the

2271
02:13:49,079 --> 02:13:57,680
algorithm right so yeah

2272
02:13:58,609 --> 02:14:01,909
and for all I know there might be some

2273
02:14:00,710 --> 02:14:03,560
large company summer that does have a

2274
02:14:01,909 --> 02:14:06,139
thousand engineers and actually somehow

2275
02:14:03,560 --> 02:14:07,610
maintain sanity and doesn't force them

2276
02:14:06,140 --> 02:14:14,240
to do a bunch of stupid stuff I don't

2277
02:14:07,609 --> 02:14:16,460
know but a lot of large companies don't

2278
02:14:14,239 --> 02:14:28,069
a lot of large companies are very bad at

2279
02:14:16,460 --> 02:14:30,590
that right and I can I can speak from a

2280
02:14:28,069 --> 02:14:33,139
little bit of insider information I

2281
02:14:30,590 --> 02:14:34,970
suppose for a company like Microsoft for

2282
02:14:33,140 --> 02:14:36,110
example if you're on I guess saying

2283
02:14:34,970 --> 02:14:38,060
Microsoft Research might be saying

2284
02:14:36,109 --> 02:14:41,149
Microsoft Windows for example is

2285
02:14:38,060 --> 02:14:42,890
completely I mean forget it I've seen

2286
02:14:41,149 --> 02:14:44,809
what goes on in the development of stuff

2287
02:14:42,890 --> 02:14:48,619
on there and it's there will never be

2288
02:14:44,810 --> 02:14:49,940
another you know there will never be a

2289
02:14:48,619 --> 02:14:52,069
positive development in Microsoft

2290
02:14:49,939 --> 02:14:53,809
Windows it's over because the way they

2291
02:14:52,069 --> 02:14:56,210
do development doesn't even allow people

2292
02:14:53,810 --> 02:14:59,200
to be effective even if if they were a

2293
02:14:56,210 --> 02:15:03,680
good programmer wouldn't matter right

2294
02:14:59,199 --> 02:15:07,179
and so it's definitely very risky and

2295
02:15:03,680 --> 02:15:09,890
very possible for your company to

2296
02:15:07,180 --> 02:15:11,930
develop these methodologies that it

2297
02:15:09,890 --> 02:15:13,329
thinks are good ideas but that actually

2298
02:15:11,930 --> 02:15:15,920
mean that you will just never be

2299
02:15:13,329 --> 02:15:17,720
productive again right and then your

2300
02:15:15,920 --> 02:15:19,909
code will always be big and bloated and

2301
02:15:17,720 --> 02:15:21,409
slow and bad and you will be have

2302
02:15:19,909 --> 02:15:30,189
trouble adding features in the features

2303
02:15:21,409 --> 02:15:32,449
you do add will be lousy right so yeah

2304
02:15:30,189 --> 02:15:36,589
so anyway so I stay away from big

2305
02:15:32,449 --> 02:15:39,050
companies for this reason but again yeah

2306
02:15:36,590 --> 02:15:41,600
that doesn't really mean that all big

2307
02:15:39,050 --> 02:15:43,220
companies are awful to work at or

2308
02:15:41,600 --> 02:15:45,470
anything and it also doesn't mean that

2309
02:15:43,220 --> 02:15:47,750
you can't take a company even one like I

2310
02:15:45,470 --> 02:15:49,550
said that I know is really bad in some

2311
02:15:47,750 --> 02:15:56,020
product areas and he would never want to

2312
02:15:49,550 --> 02:15:59,029
work there you still might find

2313
02:15:56,020 --> 02:16:03,200
divisions or regions inside that company

2314
02:15:59,029 --> 02:16:08,029
that are nice to work for right that

2315
02:16:03,199 --> 02:16:10,729
happens so it's it depends you know if

2316
02:16:08,029 --> 02:16:11,500
someone says you work for Microsoft it

2317
02:16:10,729 --> 02:16:12,399
could mean a lot of

2318
02:16:11,500 --> 02:16:14,619
things it might mean that you're

2319
02:16:12,399 --> 02:16:17,229
absolutely miserable and and every day

2320
02:16:14,619 --> 02:16:18,489
is horrible because you're working on I

2321
02:16:17,229 --> 02:16:20,619
guess stuff windows or something or it

2322
02:16:18,489 --> 02:16:22,389
might mean that you're having a great

2323
02:16:20,619 --> 02:16:25,359
time researching like cool speech

2324
02:16:22,390 --> 02:16:26,680
recognition stuff in some corner of the

2325
02:16:25,359 --> 02:16:28,719
Microsoft Research building and nobody

2326
02:16:26,680 --> 02:16:31,780
bothers you and you're you've got plenty

2327
02:16:28,720 --> 02:16:35,079
of smart people around to to talk to you

2328
02:16:31,779 --> 02:16:37,269
know so like when a company gets that

2329
02:16:35,079 --> 02:16:40,000
big another sort of corollary that is

2330
02:16:37,269 --> 02:16:42,639
there are going to be very big

2331
02:16:40,000 --> 02:16:46,599
differences potentially in what it feels

2332
02:16:42,638 --> 02:16:48,638
like to work at different sections of

2333
02:16:46,599 --> 02:16:50,920
the company and I feel like the person

2334
02:16:48,638 --> 02:16:52,569
you mentioned dice that's probably could

2335
02:16:50,920 --> 02:16:54,549
be true at EA as well it could be that

2336
02:16:52,569 --> 02:17:04,718
dice is very nice to work at but other

2337
02:16:54,549 --> 02:17:07,379
parts of EA are right so I think that's

2338
02:17:04,718 --> 02:17:07,379
just the case

2339
02:17:41,659 --> 02:17:44,510
having worked at a few large companies I

2340
02:17:43,219 --> 02:17:45,831
found the need for commenting code arise

2341
02:17:44,510 --> 02:17:47,210
from disproportionate skill levels among

2342
02:17:45,831 --> 02:17:48,469
the developer is less skilled or less

2343
02:17:47,210 --> 02:17:51,319
interested engineers tend to complain

2344
02:17:48,469 --> 02:17:56,029
about uncommented code so my problem

2345
02:17:51,319 --> 02:17:57,649
with comments is that it's almost

2346
02:17:56,030 --> 02:17:59,120
impossible to keep them accurate that's

2347
02:17:57,649 --> 02:18:00,949
the problem I don't really have a

2348
02:17:59,120 --> 02:18:01,610
problem with commented code if the code

2349
02:18:00,950 --> 02:18:03,350
is finished

2350
02:18:01,610 --> 02:18:05,989
and no one's ever going to touch it

2351
02:18:03,350 --> 02:18:08,059
again then commenting it is kind of like

2352
02:18:05,989 --> 02:18:10,369
just writing the docs for the code right

2353
02:18:08,059 --> 02:18:12,290
and that's fine

2354
02:18:10,370 --> 02:18:15,051
but if you know a piece of code isn't

2355
02:18:12,290 --> 02:18:16,969
done it should never be commented with

2356
02:18:15,050 --> 02:18:19,341
anything other than notes about what you

2357
02:18:16,969 --> 02:18:21,139
still need to do to it or pitfalls that

2358
02:18:19,341 --> 02:18:22,819
you need to watch out for that you think

2359
02:18:21,139 --> 02:18:25,069
you might forget that's the only thing

2360
02:18:22,819 --> 02:18:27,081
that should be in the comments but

2361
02:18:25,069 --> 02:18:29,841
commenting the code like what the code

2362
02:18:27,081 --> 02:18:32,690
does is not acceptable to me because

2363
02:18:29,841 --> 02:18:34,760
I've never seen it stay in sync the

2364
02:18:32,690 --> 02:18:37,430
amount of effort you have to put in to

2365
02:18:34,760 --> 02:18:39,139
keep the comments in sync is way more

2366
02:18:37,430 --> 02:18:41,030
than the effort you're saving on the

2367
02:18:39,139 --> 02:18:44,180
other engineers part who has to come in

2368
02:18:41,030 --> 02:18:47,841
and read it so the only time I you think

2369
02:18:44,180 --> 02:18:50,479
commenting is valid is in those cases

2370
02:18:47,841 --> 02:18:53,050
right either you you finish this code

2371
02:18:50,479 --> 02:18:56,569
it's like a library right and it's like

2372
02:18:53,050 --> 02:18:59,719
the code is done I'm not changing it at

2373
02:18:56,569 --> 02:19:02,690
all for quite some time except to fix

2374
02:18:59,719 --> 02:19:04,429
bugs that would be in contrast to the

2375
02:19:02,690 --> 02:19:07,489
comments right that would be violating

2376
02:19:04,430 --> 02:19:08,780
comments then okay here is some

2377
02:19:07,489 --> 02:19:10,360
documentation that says how the code

2378
02:19:08,780 --> 02:19:14,870
works and how you should use it yes

2379
02:19:10,360 --> 02:19:16,640
right but on the other hand if it's code

2380
02:19:14,870 --> 02:19:18,260
that's under active development no no

2381
02:19:16,639 --> 02:19:20,989
comments like the comments should only

2382
02:19:18,260 --> 02:19:22,159
be notes about what you've learned in

2383
02:19:20,989 --> 02:19:25,251
development or something like that

2384
02:19:22,159 --> 02:19:26,630
because those can will always be correct

2385
02:19:25,251 --> 02:19:31,341
if they're just saying something that

2386
02:19:26,630 --> 02:19:33,109
happened right so you know I think -

2387
02:19:31,341 --> 02:19:36,291
duze is mostly what should be in here

2388
02:19:33,110 --> 02:19:38,780
and notes like you know like this are

2389
02:19:36,290 --> 02:19:41,929
fine we'll just say why I did something

2390
02:19:38,780 --> 02:19:43,909
in case I forgot or whatever fine but

2391
02:19:41,930 --> 02:19:46,130
something that says like here's how this

2392
02:19:43,909 --> 02:19:48,139
piece of code works always bad if the

2393
02:19:46,130 --> 02:19:50,989
code isn't done because it will just rot

2394
02:19:48,139 --> 02:19:54,010
and you'll forget to update the comment

2395
02:19:50,989 --> 02:19:54,011
you know

2396
02:19:55,569 --> 02:20:02,619
and that's the problem so you know I

2397
02:20:00,440 --> 02:20:05,870
mean one of the main things I shipped

2398
02:20:02,620 --> 02:20:08,180
was the animation library for rad and

2399
02:20:05,870 --> 02:20:10,370
you might say that was commented very

2400
02:20:08,180 --> 02:20:12,380
extensively because it had documentation

2401
02:20:10,370 --> 02:20:14,300
that shipped with it right and I kept

2402
02:20:12,379 --> 02:20:15,709
that documentation up to date by when I

2403
02:20:14,299 --> 02:20:18,020
finished something I would change the

2404
02:20:15,709 --> 02:20:19,339
doc documentation in like a separate

2405
02:20:18,021 --> 02:20:20,271
pass and then that which about two

2406
02:20:19,340 --> 02:20:25,729
customers right

2407
02:20:20,271 --> 02:20:27,829
very important very necessary but

2408
02:20:25,729 --> 02:20:30,379
commenting code as you're developing it

2409
02:20:27,829 --> 02:20:32,629
just doesn't make sense it's a real

2410
02:20:30,379 --> 02:20:35,359
waste of time

2411
02:20:32,629 --> 02:20:37,159
and I and I really feel like people who

2412
02:20:35,360 --> 02:20:38,870
think you should comment code while

2413
02:20:37,159 --> 02:20:41,119
you're in the process of developing it I

2414
02:20:38,870 --> 02:20:44,720
don't think they know what they're

2415
02:20:41,120 --> 02:20:46,760
talking about I think that's something

2416
02:20:44,719 --> 02:20:49,879
they're saying that they haven't really

2417
02:20:46,760 --> 02:20:52,130
tested and haven't really measured which

2418
02:20:49,879 --> 02:20:53,329
which is unfortunately what a lot of

2419
02:20:52,129 --> 02:20:56,770
people when they say things like that

2420
02:20:53,329 --> 02:20:56,771
they haven't really measured it right

2421
02:20:58,030 --> 02:21:05,230
all right that's about it I'm gonna wind

2422
02:21:02,810 --> 02:21:05,229
it down

2423
02:21:12,450 --> 02:21:16,600
all righty thank you everyone for

2424
02:21:15,250 --> 02:21:18,129
joining me for another set of handmade

2425
02:21:16,600 --> 02:21:20,079
hero it's been a pleasure coding with

2426
02:21:18,129 --> 02:21:22,329
you as always if you want to follow

2427
02:21:20,079 --> 02:21:24,370
along with the series as always you can

2428
02:21:22,329 --> 02:21:25,600
pre-order the game on handmade hero org

2429
02:21:24,370 --> 02:21:27,399
and it comes with a source code so you

2430
02:21:25,600 --> 02:21:29,290
can play around with it yourself you

2431
02:21:27,398 --> 02:21:30,488
could for example find the lighting bug

2432
02:21:29,290 --> 02:21:32,109
that we're gonna have to find tomorrow

2433
02:21:30,488 --> 02:21:34,270
you could find it before me it would be

2434
02:21:32,109 --> 02:21:36,399
great practice for you you don't know

2435
02:21:34,270 --> 02:21:39,060
the answer already and it would give you

2436
02:21:36,398 --> 02:21:43,449
some practice working with GPU code

2437
02:21:39,059 --> 02:21:44,799
which can be kind of tricky to to work

2438
02:21:43,450 --> 02:21:47,439
with because you can't do things like

2439
02:21:44,799 --> 02:21:48,879
step through it so that might be a good

2440
02:21:47,439 --> 02:21:52,710
exercise for tonight for those of you

2441
02:21:48,879 --> 02:21:55,119
who are looking for some homework anyway

2442
02:21:52,709 --> 02:21:56,799
and I will try to upload this

2443
02:21:55,120 --> 02:21:58,090
immediately so I will upload it

2444
02:21:56,799 --> 02:22:01,209
immediately after this so you guys can

2445
02:21:58,090 --> 02:22:03,279
can can debug it anyway

2446
02:22:01,209 --> 02:22:05,589
we also a forum site you can go to flask

2447
02:22:03,279 --> 02:22:07,899
questions we have a new non patreon

2448
02:22:05,590 --> 02:22:09,670
contribution page so you don't have to

2449
02:22:07,898 --> 02:22:10,869
use patreon anymore we got rid of it it

2450
02:22:09,670 --> 02:22:13,600
just goes through our own send out

2451
02:22:10,870 --> 02:22:16,810
back-end stuff now so it should be all

2452
02:22:13,600 --> 02:22:19,120
nice and clean no weird changes coming

2453
02:22:16,809 --> 02:22:21,699
down the pipe or anything and it now has

2454
02:22:19,120 --> 02:22:23,260
yearly contribution options to try and

2455
02:22:21,700 --> 02:22:24,670
help people making small contributions

2456
02:22:23,260 --> 02:22:26,439
to not have to worry about the credit

2457
02:22:24,670 --> 02:22:28,478
card fees you can pledge a larger amount

2458
02:22:26,439 --> 02:22:30,309
less frequently instead of a smaller

2459
02:22:28,478 --> 02:22:31,539
amount more frequently and and help to

2460
02:22:30,309 --> 02:22:34,659
get rid of some of those fees that were

2461
02:22:31,540 --> 02:22:35,920
the bane of the patreon problem we also

2462
02:22:34,659 --> 02:22:37,450
have a schedule bot that says we're

2463
02:22:35,920 --> 02:22:39,040
going to be live case you want to cut

2464
02:22:37,450 --> 02:22:41,859
the stream live we also have an episode

2465
02:22:39,040 --> 02:22:43,090
guide which should be updated shortly I

2466
02:22:41,859 --> 02:22:44,290
know it's missing a few episodes on

2467
02:22:43,090 --> 02:22:45,609
there that apparently they had some

2468
02:22:44,290 --> 02:22:46,960
problems integrating it with they did

2469
02:22:45,609 --> 02:22:49,420
some moves to the server over at ham

2470
02:22:46,959 --> 02:22:51,488
main network not something I have a lot

2471
02:22:49,420 --> 02:22:52,988
of insight into but they are dealing

2472
02:22:51,488 --> 02:22:54,609
with it right now and so hopefully the

2473
02:22:52,988 --> 02:22:56,680
episode guide will be up-to-date the

2474
02:22:54,609 --> 02:22:58,359
annotations have been done midlow has

2475
02:22:56,680 --> 02:22:59,800
been on top of it it's just they can't

2476
02:22:58,359 --> 02:23:01,720
get pushed to the server for some reason

2477
02:22:59,799 --> 02:23:03,188
so that'll get sorted out soon and then

2478
02:23:01,719 --> 02:23:06,488
the episode guide I'll be out back up to

2479
02:23:03,189 --> 02:23:08,500
date that's ready for today I'll be back

2480
02:23:06,488 --> 02:23:10,238
here tomorrow defiance what's going on

2481
02:23:08,500 --> 02:23:12,459
with why we can't send those letting

2482
02:23:10,238 --> 02:23:13,988
vibes down to the GPU correctly until

2483
02:23:12,459 --> 02:23:15,250
then have fun programming and I'll see

2484
02:23:13,988 --> 02:23:17,670
everyone on the Internet take it easy

2485
02:23:15,250 --> 02:23:17,670
everybody

