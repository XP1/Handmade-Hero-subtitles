1
00:00:01,370 --> 00:00:05,819
hello everybody and welcome handmade

2
00:00:03,899 --> 00:00:09,960
hero show recode a complete game live on

3
00:00:05,819 --> 00:00:12,960
stream we are going to pretty much do

4
00:00:09,960 --> 00:00:16,019
some cleanup today and testing where we

5
00:00:12,960 --> 00:00:17,969
left off last weekend was we got

6
00:00:16,019 --> 00:00:20,250
everything working that we were trying

7
00:00:17,969 --> 00:00:21,960
to do with respect to rewriting files

8
00:00:20,250 --> 00:00:25,710
and changing the alignment points in

9
00:00:21,960 --> 00:00:27,118
them and so on but we you know we

10
00:00:25,710 --> 00:00:29,550
haven't really put it through its paces

11
00:00:27,118 --> 00:00:30,989
and there's probably some bugs lurking

12
00:00:29,550 --> 00:00:35,880
there it's kind of subtle what we

13
00:00:30,989 --> 00:00:37,170
decided to do I kind of tried something

14
00:00:35,880 --> 00:00:39,600
a little bit different from what I would

15
00:00:37,170 --> 00:00:41,609
normally have done in that we actually

16
00:00:39,600 --> 00:00:43,350
try to preserve the file the way that

17
00:00:41,609 --> 00:00:46,159
the user wrote it which is kind of a

18
00:00:43,350 --> 00:00:48,629
step beyond what you might ordinarily do

19
00:00:46,159 --> 00:00:51,299
and with that comes some complications

20
00:00:48,628 --> 00:00:54,899
and as a result I'm not really 100% sure

21
00:00:51,299 --> 00:00:57,089
of what we did right it's anytime you

22
00:00:54,899 --> 00:01:01,198
kind of do something new like that

23
00:00:57,090 --> 00:01:03,510
you're always experimenting and you have

24
00:01:01,198 --> 00:01:06,030
to kind of give it a little while to

25
00:01:03,509 --> 00:01:07,679
sink in and you'll probably learn some

26
00:01:06,030 --> 00:01:08,939
things about how the code was structured

27
00:01:07,680 --> 00:01:10,830
that later on you'll be like okay

28
00:01:08,938 --> 00:01:11,969
probably this isn't the best way to do

29
00:01:10,829 --> 00:01:14,188
it you know now that I've done it one

30
00:01:11,969 --> 00:01:15,688
time I would change some things about it

31
00:01:14,188 --> 00:01:17,279
to second time and so on

32
00:01:15,688 --> 00:01:21,989
sooo it's definitely the kind of thing

33
00:01:17,280 --> 00:01:23,549
where I'm like yeah we may you know we

34
00:01:21,989 --> 00:01:24,839
may revisit some of that or you know

35
00:01:23,549 --> 00:01:27,630
maybe we'll leave it as it is if it

36
00:01:24,840 --> 00:01:29,939
works well enough and but I would still

37
00:01:27,629 --> 00:01:32,938
say something like if you were going to

38
00:01:29,938 --> 00:01:35,429
do this now knowing what we know maybe

39
00:01:32,938 --> 00:01:38,008
you do it a little bit differently but

40
00:01:35,430 --> 00:01:40,200
anyway I would like to start off by just

41
00:01:38,009 --> 00:01:43,200
addressing some bugs that were reported

42
00:01:40,200 --> 00:01:45,420
in the github because during the week

43
00:01:43,200 --> 00:01:47,728
sometimes other folks who play around

44
00:01:45,420 --> 00:01:50,040
with the codebase will report bugs into

45
00:01:47,728 --> 00:01:52,859
the github and we can go ahead and fix

46
00:01:50,040 --> 00:01:55,439
those bugs just because hey they've

47
00:01:52,859 --> 00:01:57,868
already been found by somebody we might

48
00:01:55,438 --> 00:02:00,478
as well to do that so I'm gonna go ahead

49
00:01:57,868 --> 00:02:02,099
and this was a clean reboot here they

50
00:02:00,478 --> 00:02:04,109
actually replaced the breakers in the

51
00:02:02,099 --> 00:02:06,298
apartment the other day and so all the

52
00:02:04,109 --> 00:02:08,699
machines powered down nice they had to

53
00:02:06,299 --> 00:02:11,700
be rebooted anyway I if we go ahead and

54
00:02:08,699 --> 00:02:13,949
and just jump into the code here I'm

55
00:02:11,699 --> 00:02:16,560
gonna open up for coder

56
00:02:13,949 --> 00:02:20,629
and try to remember what the old hotkeys

57
00:02:16,560 --> 00:02:24,420
were for everything so if we go to

58
00:02:20,629 --> 00:02:28,439
handmade hero here and I build the

59
00:02:24,419 --> 00:02:31,909
project let's just take a look at the

60
00:02:28,439 --> 00:02:36,180
ones that that Kim had explained before

61
00:02:31,909 --> 00:02:37,680
he said that in the Edit edible boolean

62
00:02:36,180 --> 00:02:39,569
edible size we just really quickly

63
00:02:37,680 --> 00:02:42,000
ported those over to being able to use

64
00:02:39,569 --> 00:02:45,599
regular strings it looks like we forgot

65
00:02:42,000 --> 00:02:48,629
a couple of the capital s is so if we

66
00:02:45,599 --> 00:02:50,759
just jump to editable boolean you could

67
00:02:48,629 --> 00:02:52,889
kind of come down here and see these

68
00:02:50,759 --> 00:02:56,310
things here where we do the format

69
00:02:52,889 --> 00:02:59,069
string when we pass we we made our own

70
00:02:56,310 --> 00:03:02,039
printf so it can take our own types and

71
00:02:59,069 --> 00:03:04,829
if you look here this label text is

72
00:03:02,039 --> 00:03:07,769
coming in as a string and so we want

73
00:03:04,830 --> 00:03:09,980
that to be a capital S so that the for

74
00:03:07,770 --> 00:03:12,840
mastering nose properly had a par set

75
00:03:09,979 --> 00:03:15,869
the other one is apparently editable

76
00:03:12,840 --> 00:03:17,969
size had the same problem and so if we

77
00:03:15,870 --> 00:03:20,340
jump to that function you can see just

78
00:03:17,969 --> 00:03:22,109
looking through here it's the same exact

79
00:03:20,340 --> 00:03:24,810
problem right so there's the label text

80
00:03:22,110 --> 00:03:26,040
and we just need that capital S alright

81
00:03:24,810 --> 00:03:27,900
so again these things were written

82
00:03:26,039 --> 00:03:29,340
before we were using strings so we're

83
00:03:27,900 --> 00:03:30,510
just kind of like moving them over to

84
00:03:29,340 --> 00:03:36,120
the new way of doing things which

85
00:03:30,509 --> 00:03:38,849
because it C isn't perfect you know the

86
00:03:36,120 --> 00:03:40,349
the way that I even even in C the way I

87
00:03:38,849 --> 00:03:43,620
do these now is I just bite the bullet

88
00:03:40,349 --> 00:03:45,269
and have some more kind of expensive

89
00:03:43,620 --> 00:03:49,770
ways of doing things but that don't have

90
00:03:45,270 --> 00:03:51,659
this problem saner languages don't

91
00:03:49,770 --> 00:03:53,250
require you have a format specifier

92
00:03:51,659 --> 00:03:56,129
whatever the type is that you pass

93
00:03:53,250 --> 00:03:57,719
that's the type of the input right so

94
00:03:56,129 --> 00:04:01,079
it's it shouldn't really be possible to

95
00:03:57,719 --> 00:04:04,169
make a mistake like this but C++ is ver

96
00:04:01,080 --> 00:04:06,570
args are horrible and you know as usual

97
00:04:04,169 --> 00:04:08,909
a C++ committee didn't see the need to

98
00:04:06,569 --> 00:04:12,239
improve them over 30 years so that's

99
00:04:08,909 --> 00:04:14,329
where you're at so anyway if we take a

100
00:04:12,239 --> 00:04:16,798
look at the last one you mentioned error

101
00:04:14,330 --> 00:04:19,199
apparently is not calling the correct

102
00:04:16,798 --> 00:04:20,370
thing he's probably talking about yeah

103
00:04:19,199 --> 00:04:23,399
okay this would actually how I don't

104
00:04:20,370 --> 00:04:26,670
know I jump there so this one here he's

105
00:04:23,399 --> 00:04:30,929
saying it needs to pass argh list

106
00:04:26,670 --> 00:04:32,250
I'm not sure I did he make that change I

107
00:04:30,930 --> 00:04:33,300
guess because I'm saying like this looks

108
00:04:32,250 --> 00:04:35,610
like it passed it correctly so I'm

109
00:04:33,300 --> 00:04:36,990
assuming that the one in ours doesn't

110
00:04:35,610 --> 00:04:38,670
look like this because the buggy was

111
00:04:36,990 --> 00:04:41,430
reporting that was that we weren't

112
00:04:38,670 --> 00:04:43,830
passing that and so I'm assuming that oh

113
00:04:41,430 --> 00:04:46,379
you know what no he's just he's just

114
00:04:43,829 --> 00:04:49,379
saying we were calling out arglist and

115
00:04:46,379 --> 00:04:51,689
that's that's 100% correct so we should

116
00:04:49,379 --> 00:04:55,829
actually call that because remember we

117
00:04:51,689 --> 00:04:57,839
had to split those functions up okay so

118
00:04:55,829 --> 00:05:00,029
let me go ahead and jump there and we'll

119
00:04:57,839 --> 00:05:01,979
take a look let's see here that's not

120
00:05:00,029 --> 00:05:04,739
the one we're talking about but this one

121
00:05:01,980 --> 00:05:09,120
is and so we have an out arglist

122
00:05:04,740 --> 00:05:10,980
I believe don't we yes so we have one

123
00:05:09,120 --> 00:05:13,620
that we can call explicitly and you can

124
00:05:10,980 --> 00:05:15,629
see it here and so if I want to I can

125
00:05:13,620 --> 00:05:17,579
call this one explicitly I don't know

126
00:05:15,629 --> 00:05:19,949
that we did a pound to find for it but

127
00:05:17,579 --> 00:05:21,810
it looks like we didn't and so you kind

128
00:05:19,949 --> 00:05:24,300
of need to pass the file name and line

129
00:05:21,810 --> 00:05:27,209
number two out if arglist in order to

130
00:05:24,300 --> 00:05:29,189
make it work and so that would have to

131
00:05:27,209 --> 00:05:35,609
happen here as well now there's a number

132
00:05:29,189 --> 00:05:37,709
of ways like I said before that we can

133
00:05:35,610 --> 00:05:40,470
do this and I'm not sure which one we

134
00:05:37,709 --> 00:05:41,250
really want to do sometimes it can be a

135
00:05:40,470 --> 00:05:43,350
little confusing

136
00:05:41,250 --> 00:05:46,800
if you look at what we're doing here

137
00:05:43,350 --> 00:05:48,720
we're putting the args the error we're

138
00:05:46,800 --> 00:05:52,530
putting that actually into the format

139
00:05:48,720 --> 00:05:53,910
string as a prepend and that's something

140
00:05:52,529 --> 00:05:55,319
that we want to do anyway because we

141
00:05:53,910 --> 00:05:57,810
want to put the value of the token in

142
00:05:55,319 --> 00:05:59,759
there and so that kind of informs our

143
00:05:57,810 --> 00:06:02,129
decision as to what's passed to out FR

144
00:05:59,759 --> 00:06:03,779
list out if arglist takes a file name

145
00:06:02,129 --> 00:06:06,120
and a line number so they can tell you

146
00:06:03,779 --> 00:06:08,759
who is reporting it and so in this case

147
00:06:06,120 --> 00:06:10,620
I think we just want to do this right we

148
00:06:08,759 --> 00:06:13,529
just want to say look we're gonna use

149
00:06:10,620 --> 00:06:16,410
this file name and line number to report

150
00:06:13,529 --> 00:06:18,389
the error here because we're just trying

151
00:06:16,410 --> 00:06:20,100
to talk about ourselves having reported

152
00:06:18,389 --> 00:06:22,769
it we don't really want to pass the

153
00:06:20,100 --> 00:06:26,820
error along the location along from on

154
00:06:22,769 --> 00:06:28,799
token that again is just a judgment call

155
00:06:26,819 --> 00:06:31,649
it's a little weird the way we chose to

156
00:06:28,800 --> 00:06:34,139
do this and so you know we support this

157
00:06:31,649 --> 00:06:37,349
idea of every entry in the buffer being

158
00:06:34,139 --> 00:06:38,909
able to say who put it in there but when

159
00:06:37,350 --> 00:06:40,330
it comes to error messages it's a little

160
00:06:38,910 --> 00:06:42,039
confusing

161
00:06:40,329 --> 00:06:44,228
because again you don't know whether

162
00:06:42,038 --> 00:06:45,788
you're talking about the file name and

163
00:06:44,228 --> 00:06:47,769
line number of the person reporting the

164
00:06:45,788 --> 00:06:49,568
error or the file name and line number

165
00:06:47,769 --> 00:06:51,490
that generated the air and you could

166
00:06:49,569 --> 00:06:53,379
pass either one and there's no right

167
00:06:51,490 --> 00:06:56,079
answer it's just what did you want to do

168
00:06:53,379 --> 00:06:57,849
and what did you want to have available

169
00:06:56,079 --> 00:06:58,389
to the code when it's looking at those

170
00:06:57,848 --> 00:07:00,069
things

171
00:06:58,389 --> 00:07:02,379
anyone who's iterating over the chunks

172
00:07:00,069 --> 00:07:03,939
gets whatever one we decide to pass here

173
00:07:02,379 --> 00:07:05,680
since nobody's really using that

174
00:07:03,939 --> 00:07:07,449
information at this point I mean another

175
00:07:05,680 --> 00:07:09,848
argument will be just get rid of it it's

176
00:07:07,449 --> 00:07:12,189
probably not it's not really something

177
00:07:09,848 --> 00:07:14,348
that we should even have just inserted

178
00:07:12,189 --> 00:07:16,810
in the stream if you want it so again I

179
00:07:14,348 --> 00:07:21,158
don't really know what we want to do

180
00:07:16,810 --> 00:07:24,189
there it's a little bit hazy to me which

181
00:07:21,158 --> 00:07:24,908
way this should go now one way of

182
00:07:24,189 --> 00:07:27,009
thinking of it

183
00:07:24,908 --> 00:07:29,110
alternatively would be to say well what

184
00:07:27,009 --> 00:07:30,729
if you know we were trying to print one

185
00:07:29,110 --> 00:07:32,650
of these outs and you wanted to like

186
00:07:30,728 --> 00:07:35,288
click on it and go to where the error

187
00:07:32,649 --> 00:07:37,870
was that seems to suggest a different

188
00:07:35,288 --> 00:07:40,449
approach right and so you could imagine

189
00:07:37,870 --> 00:07:42,610
us saying you know I'm token filename

190
00:07:40,449 --> 00:07:45,158
and on took and line number maybe those

191
00:07:42,610 --> 00:07:47,650
are things that we should be passing you

192
00:07:45,158 --> 00:07:50,079
know directly here right look maybe we

193
00:07:47,649 --> 00:07:52,899
should be passing those you can click

194
00:07:50,079 --> 00:07:55,930
and jump to that line something like

195
00:07:52,899 --> 00:07:58,899
that and that does have some some merit

196
00:07:55,930 --> 00:08:00,459
to it so another thing I might ask is do

197
00:07:58,899 --> 00:08:01,478
we really you know when when we're

198
00:08:00,459 --> 00:08:04,930
recording these here we're just

199
00:08:01,478 --> 00:08:06,939
recording a founding pointer and again

200
00:08:04,930 --> 00:08:09,759
that's less good because it means we

201
00:08:06,939 --> 00:08:11,528
can't extract regions out of the strings

202
00:08:09,759 --> 00:08:14,379
like we were doing with everything else

203
00:08:11,528 --> 00:08:16,750
and so it kind of again suggests that

204
00:08:14,379 --> 00:08:19,028
maybe these chunks want to be using a

205
00:08:16,750 --> 00:08:23,560
string to remember what the file name

206
00:08:19,028 --> 00:08:27,250
was as well again kind of just a lot

207
00:08:23,560 --> 00:08:28,959
wrapped up in there if I go back to how

208
00:08:27,250 --> 00:08:30,399
tokens were working so if you take a

209
00:08:28,959 --> 00:08:33,429
look at the tokenizer here we have the

210
00:08:30,399 --> 00:08:35,528
token type you can see that the file

211
00:08:33,429 --> 00:08:37,328
name is itself a string right so we

212
00:08:35,528 --> 00:08:38,740
can't really pass this as a null

213
00:08:37,328 --> 00:08:39,968
terminated thing because we've kind of

214
00:08:38,740 --> 00:08:42,519
moved away from those notes or made

215
00:08:39,969 --> 00:08:44,410
things so if we really wanted to do that

216
00:08:42,519 --> 00:08:47,589
in order to pass a file name and line

217
00:08:44,409 --> 00:08:52,088
number here of the error we would need

218
00:08:47,589 --> 00:08:53,230
to actually have out F take strings now

219
00:08:52,089 --> 00:08:56,470
again I don't

220
00:08:53,230 --> 00:08:58,269
really no wrong file I don't really know

221
00:08:56,470 --> 00:09:02,019
how I feel about that one way or the

222
00:08:58,269 --> 00:09:04,059
other a changing this to a string would

223
00:09:02,019 --> 00:09:06,069
make the stream truck slightly larger

224
00:09:04,059 --> 00:09:07,809
not probably in a way we care about

225
00:09:06,070 --> 00:09:11,110
because these are not really heavyweight

226
00:09:07,809 --> 00:09:14,769
operations here we don't really use

227
00:09:11,110 --> 00:09:18,879
these chunks in any time of like

228
00:09:14,769 --> 00:09:21,789
hardcore way so you know it's it's hard

229
00:09:18,879 --> 00:09:28,450
to say right like I again not really

230
00:09:21,789 --> 00:09:29,649
sure so it's kind of one of those things

231
00:09:28,450 --> 00:09:32,620
where I just don't know what we would

232
00:09:29,649 --> 00:09:35,439
want to do here and we could obviously

233
00:09:32,620 --> 00:09:38,730
have a wrapper that wraps this constant

234
00:09:35,440 --> 00:09:41,280
string in a way that would allow us to

235
00:09:38,730 --> 00:09:44,379
still pass it and all that sort of stuff

236
00:09:41,279 --> 00:09:45,579
since I'm so conflicted out all that I'm

237
00:09:44,379 --> 00:09:48,220
just gonna say look we're just gonna

238
00:09:45,580 --> 00:09:50,560
pass this for now and I'll put it to you

239
00:09:48,220 --> 00:09:56,740
in here that says look in the future if

240
00:09:50,559 --> 00:10:01,779
we want to we can change stream chunk to

241
00:09:56,740 --> 00:10:05,940
take strings and then we could pass the

242
00:10:01,779 --> 00:10:10,689
on token filename line here right

243
00:10:05,940 --> 00:10:13,330
because we could and we're not gonna be

244
00:10:10,690 --> 00:10:15,790
bad now but we could and so I think

245
00:10:13,330 --> 00:10:18,460
that's all of the changes that Kim

246
00:10:15,789 --> 00:10:22,839
requested it looks like we've got so

247
00:10:18,460 --> 00:10:29,350
there's an error there cannot convert

248
00:10:22,840 --> 00:10:32,170
argument three to stream star now that's

249
00:10:29,350 --> 00:10:34,629
actually just because I'm calling the

250
00:10:32,169 --> 00:10:37,689
wrong function I said I wanted to call

251
00:10:34,629 --> 00:10:40,330
that and just didn't type it in so now I

252
00:10:37,690 --> 00:10:44,020
have and that should be about it all

253
00:10:40,330 --> 00:10:46,740
right so that's really all there is to

254
00:10:44,019 --> 00:10:49,389
what we're doing at the moment from this

255
00:10:46,740 --> 00:10:51,850
I'm gonna go ahead and close out this

256
00:10:49,389 --> 00:10:56,590
particular issue than just say I think

257
00:10:51,850 --> 00:10:59,310
it should be resolved as of day 519 so I

258
00:10:56,590 --> 00:10:59,310
believe

259
00:11:01,549 --> 00:11:13,609
Dave 5:19 and hopefully that's you know

260
00:11:11,840 --> 00:11:16,430
that'll take care of those to the extent

261
00:11:13,610 --> 00:11:18,800
that there was problems with them we

262
00:11:16,429 --> 00:11:20,959
must just not have hit those because we

263
00:11:18,799 --> 00:11:22,279
you know hadn't tested it or something

264
00:11:20,960 --> 00:11:25,070
right

265
00:11:22,279 --> 00:11:26,389
so in here it looks like most of these

266
00:11:25,070 --> 00:11:28,100
are things are not super important

267
00:11:26,389 --> 00:11:33,169
they're not relevant to what we're doing

268
00:11:28,100 --> 00:11:36,080
right now and this test asset builder is

269
00:11:33,169 --> 00:11:37,490
probably never gonna get updated so

270
00:11:36,080 --> 00:11:38,960
we'll probably end up closing that one

271
00:11:37,490 --> 00:11:40,060
out one way or another but we don't

272
00:11:38,960 --> 00:11:46,009
really need it right now

273
00:11:40,059 --> 00:11:47,959
oops this push size bug one I'm not sure

274
00:11:46,009 --> 00:11:51,620
I've really looked at it yet it was

275
00:11:47,960 --> 00:11:56,440
reported as a problem with the size

276
00:11:51,620 --> 00:11:58,850
being spawn size in it and this is in

277
00:11:56,440 --> 00:12:03,500
handy memory data is pushed size

278
00:11:58,850 --> 00:12:06,080
underscore so the core push routine so

279
00:12:03,500 --> 00:12:09,889
let me just go look at what we're

280
00:12:06,080 --> 00:12:13,970
talking about here when size and it

281
00:12:09,889 --> 00:12:17,799
comes in let's see what we're doing here

282
00:12:13,970 --> 00:12:19,990
so I don't the bug reports a little bit

283
00:12:17,799 --> 00:12:23,990
hazy

284
00:12:19,990 --> 00:12:25,850
if the arena current blocks size is

285
00:12:23,990 --> 00:12:31,100
smaller than the specified size in it

286
00:12:25,850 --> 00:12:34,100
this will be a buffer overflow yeah I

287
00:12:31,100 --> 00:12:37,370
mean just for future reference that is

288
00:12:34,100 --> 00:12:42,080
not really like you want to explain what

289
00:12:37,370 --> 00:12:45,049
you mean by this right the fixes are

290
00:12:42,080 --> 00:12:47,870
fine but it's more like I'm not sure

291
00:12:45,049 --> 00:12:52,129
what you mean by this I guess you just

292
00:12:47,870 --> 00:12:55,100
mean in general this situation causes a

293
00:12:52,129 --> 00:12:58,399
buffer overflow so let's see why so the

294
00:12:55,100 --> 00:13:00,129
statement is that if the arena current

295
00:12:58,399 --> 00:13:05,689
block size which is

296
00:13:00,129 --> 00:13:05,689
[Music]

297
00:13:20,049 --> 00:13:26,558
I can't say I'm quite seeing yet so if

298
00:13:25,269 --> 00:13:28,749
you look at what happens when you come

299
00:13:26,558 --> 00:13:33,850
through this piece of code

300
00:13:28,749 --> 00:13:36,189
if the arena has a current block then

301
00:13:33,850 --> 00:13:38,409
it's going to do some calculations if it

302
00:13:36,188 --> 00:13:41,649
doesn't need to do that so if there is

303
00:13:38,409 --> 00:13:43,539
no current block at all then it's going

304
00:13:41,649 --> 00:13:49,629
to do something else so it will always

305
00:13:43,539 --> 00:13:51,730
enter here so I think maybe the right

306
00:13:49,629 --> 00:13:55,569
thing to say was if there is no current

307
00:13:51,730 --> 00:14:02,670
block this would be a bug because that

308
00:13:55,568 --> 00:14:07,298
does look true to me right meaning this

309
00:14:02,669 --> 00:14:11,548
this get effective size for here I think

310
00:14:07,298 --> 00:14:15,159
needs to happen in all cases so I think

311
00:14:11,548 --> 00:14:21,999
probably I guess I can't say why this

312
00:14:15,159 --> 00:14:30,308
wasn't getting called always cuz that's

313
00:14:21,999 --> 00:14:35,170
a little bit strange right I mean

314
00:14:30,308 --> 00:14:36,698
correct me if I'm wrong here but it

315
00:14:35,169 --> 00:14:39,509
seems like we should just call that

316
00:14:36,698 --> 00:14:43,958
always we don't really have to though

317
00:14:39,509 --> 00:14:46,360
yeah I'm not seeing it yet so let's take

318
00:14:43,958 --> 00:14:48,969
both cases separately one where current

319
00:14:46,360 --> 00:14:51,459
block is zero and one where current

320
00:14:48,970 --> 00:14:53,769
block is not zero in the case where

321
00:14:51,458 --> 00:14:57,808
current block is zero it will not call

322
00:14:53,769 --> 00:15:00,639
this so the size will remain zero right

323
00:14:57,808 --> 00:15:03,490
you will automatically enter this case

324
00:15:00,639 --> 00:15:06,188
because since this is true you will come

325
00:15:03,490 --> 00:15:09,009
in here that means that you will use the

326
00:15:06,188 --> 00:15:12,730
original size past you will not try to

327
00:15:09,009 --> 00:15:15,720
do any kind of alignment for it right

328
00:15:12,730 --> 00:15:18,249
you won't do any of this sort of thing

329
00:15:15,720 --> 00:15:20,230
you will then check to see if you need

330
00:15:18,249 --> 00:15:23,079
to do any kind of power of two

331
00:15:20,230 --> 00:15:25,149
alignments to it which is sort of a

332
00:15:23,078 --> 00:15:31,088
separate thing for debugging only and

333
00:15:25,149 --> 00:15:32,139
that would be fine if it's too small for

334
00:15:31,089 --> 00:15:34,570
the arena

335
00:15:32,139 --> 00:15:35,620
minimum blocks well you know a tenuous

336
00:15:34,570 --> 00:15:37,840
you small you're just saying look if

337
00:15:35,620 --> 00:15:40,570
there hasn't been any initialization of

338
00:15:37,840 --> 00:15:46,030
the minimum block size then we are going

339
00:15:40,570 --> 00:15:48,160
to create that minimum block size what I

340
00:15:46,029 --> 00:15:50,529
would say about that again you can see

341
00:15:48,159 --> 00:15:53,679
this is fairly complicated but what it's

342
00:15:50,529 --> 00:15:56,559
doing is just saying look if we aren't

343
00:15:53,679 --> 00:15:58,629
going to do an allocation because

344
00:15:56,559 --> 00:16:00,549
remember if underfloor / checking is on

345
00:15:58,629 --> 00:16:02,200
we're not going to use blocks we're just

346
00:16:00,549 --> 00:16:06,669
going to allocate everything piecemeal

347
00:16:02,200 --> 00:16:08,320
right and so this stuff is is designed

348
00:16:06,669 --> 00:16:09,969
to make sure that you don't aggregate

349
00:16:08,320 --> 00:16:11,950
things together because otherwise they

350
00:16:09,970 --> 00:16:16,000
can overwrite out of their bounds and

351
00:16:11,950 --> 00:16:17,230
not crash so the entire point of

352
00:16:16,000 --> 00:16:22,360
underflow and over to the technique is

353
00:16:17,230 --> 00:16:27,149
not to aggregate so then you'd set the

354
00:16:22,360 --> 00:16:30,340
arena minimum block size to one megabyte

355
00:16:27,149 --> 00:16:31,990
if you were not doing any kind of

356
00:16:30,340 --> 00:16:38,040
allocation checking and no one had set

357
00:16:31,990 --> 00:16:40,960
one you then allocate a block excuse me

358
00:16:38,039 --> 00:16:44,860
you allocate however big this needs to

359
00:16:40,960 --> 00:16:48,730
be or whatever the minimum block size is

360
00:16:44,860 --> 00:16:51,220
right you then allocate it and you get

361
00:16:48,730 --> 00:16:54,879
back the block that you wanted you then

362
00:16:51,220 --> 00:16:57,310
fall out of here and say okay if the

363
00:16:54,879 --> 00:16:58,960
amount used plus the size is less than

364
00:16:57,309 --> 00:17:00,939
the current block size which it has to

365
00:16:58,960 --> 00:17:04,299
be because we or we just did that and

366
00:17:00,940 --> 00:17:07,000
used a zero then we do the alignment

367
00:17:04,299 --> 00:17:12,299
offset which is to say that we call up

368
00:17:07,000 --> 00:17:18,459
two params dot alignment which is

369
00:17:12,299 --> 00:17:22,419
somewhere here it is here and you know

370
00:17:18,459 --> 00:17:25,870
what we in theory are supposed to have

371
00:17:22,420 --> 00:17:28,900
happen here and I you know I guess you

372
00:17:25,869 --> 00:17:34,089
could argue that this is maybe a bug but

373
00:17:28,900 --> 00:17:37,120
I don't know I mean because we because

374
00:17:34,089 --> 00:17:39,939
we're claiming that these things always

375
00:17:37,119 --> 00:17:44,500
have to be aligned to the Mac like that

376
00:17:39,940 --> 00:17:45,549
the memory blocks are required to be

377
00:17:44,500 --> 00:17:49,410
aligned to the max

378
00:17:45,549 --> 00:17:55,450
something you could ever align to right

379
00:17:49,410 --> 00:17:59,529
and so you know I'm not sure if you want

380
00:17:55,450 --> 00:18:01,330
to call that a bug or not but at least

381
00:17:59,529 --> 00:18:04,839
according to our comment that was by

382
00:18:01,329 --> 00:18:06,369
design meaning we don't try to realign

383
00:18:04,839 --> 00:18:08,709
things if we know they're the first

384
00:18:06,369 --> 00:18:10,509
thing in a block that is the most

385
00:18:08,710 --> 00:18:12,220
aligned you're allowed to be you know

386
00:18:10,509 --> 00:18:15,180
you can't be more aligned than a fork a

387
00:18:12,220 --> 00:18:20,700
page we just don't let you do that right

388
00:18:15,180 --> 00:18:20,700
so I think that

389
00:18:34,148 --> 00:18:44,228
I mean I think that you know maybe we

390
00:18:42,308 --> 00:18:46,868
could put another assertion in here that

391
00:18:44,229 --> 00:18:49,058
just says look you know you you know

392
00:18:46,868 --> 00:18:51,278
make sure that the amount you return is

393
00:18:49,058 --> 00:18:52,959
not bigger than that but I don't

394
00:18:51,278 --> 00:18:54,548
actually see the bug in that case let's

395
00:18:52,959 --> 00:18:56,109
try the other ones so let's say there is

396
00:18:54,548 --> 00:18:57,788
a current block when we come through

397
00:18:56,108 --> 00:19:00,188
here we're gonna say get effective size

398
00:18:57,788 --> 00:19:02,229
four and this is I think the case that

399
00:19:00,189 --> 00:19:05,489
was reported as being wrong and you know

400
00:19:02,229 --> 00:19:08,469
I'll add the assertion here as well

401
00:19:05,489 --> 00:19:10,269
meaning you know when we come through

402
00:19:08,469 --> 00:19:16,149
here when it says note the base will

403
00:19:10,269 --> 00:19:19,538
automatically be aligned now we would

404
00:19:16,148 --> 00:19:21,278
have to say that well yeah and the power

405
00:19:19,538 --> 00:19:22,808
of two alignments so we just have to

406
00:19:21,278 --> 00:19:24,788
assert that the power of two alignment

407
00:19:22,808 --> 00:19:26,918
is always going to be less than whatever

408
00:19:24,788 --> 00:19:30,818
the page alignment is which we can also

409
00:19:26,919 --> 00:19:36,038
do which is to say that if we came

410
00:19:30,818 --> 00:19:38,528
through here and you know this alignment

411
00:19:36,038 --> 00:19:43,808
offset shouldn't put us further over so

412
00:19:38,528 --> 00:19:50,709
we can just say look assert that the

413
00:19:43,808 --> 00:19:54,028
arena current block used is less than or

414
00:19:50,709 --> 00:19:59,949
equal to the arena current block size

415
00:19:54,028 --> 00:20:01,538
right I believe it's yeah so we can just

416
00:19:59,949 --> 00:20:03,778
assert that you know once we've done

417
00:20:01,538 --> 00:20:03,778
this

418
00:20:24,269 --> 00:20:30,460
you know something like this and we can

419
00:20:27,400 --> 00:20:35,410
also say that you know we want to ensure

420
00:20:30,460 --> 00:20:37,299
that the page size is is sort of the

421
00:20:35,410 --> 00:20:40,150
maximum there so when you know the

422
00:20:37,299 --> 00:20:42,579
alignment comes in we could assert that

423
00:20:40,150 --> 00:20:45,850
you're not allowed to align to anything

424
00:20:42,579 --> 00:20:47,230
larger than the page size right again

425
00:20:45,849 --> 00:20:49,240
this has nothing to do that with a bug

426
00:20:47,230 --> 00:20:51,279
that was reported and it's also not a

427
00:20:49,240 --> 00:20:53,109
bug as far as I'm concerned but it is

428
00:20:51,279 --> 00:20:55,899
the kind of thing that maybe you want to

429
00:20:53,109 --> 00:21:00,009
just put in there to be clear about what

430
00:20:55,900 --> 00:21:03,370
is and isn't allowed in this case so we

431
00:21:00,009 --> 00:21:06,670
could say you know look whatever you're

432
00:21:03,369 --> 00:21:09,209
going to do in terms of alignment we're

433
00:21:06,670 --> 00:21:14,350
going to require that that alignment be

434
00:21:09,210 --> 00:21:17,920
reasonable and not absurd right so yeah

435
00:21:14,349 --> 00:21:21,730
so you know I could do something like

436
00:21:17,920 --> 00:21:23,289
that I'm not sure I'm just not sure what

437
00:21:21,730 --> 00:21:24,819
the best way to express that would be

438
00:21:23,289 --> 00:21:26,139
again it's really unlikely that anyone

439
00:21:24,819 --> 00:21:29,849
would ever do that but if for some

440
00:21:26,140 --> 00:21:36,400
reason they did that's a problem right

441
00:21:29,849 --> 00:21:45,009
and when we do that alignment where's

442
00:21:36,400 --> 00:21:46,900
the align pattu here it is yeah you can

443
00:21:45,009 --> 00:21:48,819
see here too that this is required to be

444
00:21:46,900 --> 00:21:50,050
a power too because otherwise that code

445
00:21:48,819 --> 00:21:52,659
wouldn't work so like you pretty much

446
00:21:50,049 --> 00:21:54,750
just need to ensure through all of this

447
00:21:52,660 --> 00:21:57,100
that it is going to obey those rules

448
00:21:54,750 --> 00:21:58,839
it's just kind of implicit in the way

449
00:21:57,099 --> 00:22:04,619
that we designed it is you know it's it

450
00:21:58,839 --> 00:22:04,619
has to be reasonable in that respect so

451
00:22:04,980 --> 00:22:11,110
yeah I guess what I'd say is we can add

452
00:22:09,279 --> 00:22:16,720
some assertions in here like we can say

453
00:22:11,109 --> 00:22:20,969
like assert that params alignment you

454
00:22:16,720 --> 00:22:25,120
know is less than let's say you know

455
00:22:20,970 --> 00:22:28,220
1024 right like you can't align to

456
00:22:25,119 --> 00:22:30,829
anything bigger than you know what

457
00:22:28,220 --> 00:22:33,980
with that let's say you can't do

458
00:22:30,829 --> 00:22:36,288
anything other than 128 bytes or less

459
00:22:33,980 --> 00:22:47,390
and we also want to assert that it is a

460
00:22:36,288 --> 00:22:50,839
power to just to make sure that no one

461
00:22:47,390 --> 00:22:53,059
puts any thing in there that's gonna be

462
00:22:50,839 --> 00:22:55,519
really weird we would never do that at

463
00:22:53,058 --> 00:22:58,700
least not on purpose so we could catch a

464
00:22:55,519 --> 00:22:59,960
mistake you know if we made one but

465
00:22:58,700 --> 00:23:01,460
somebody else who doesn't really know

466
00:22:59,960 --> 00:23:03,409
what they're doing who maybe tries to

467
00:23:01,460 --> 00:23:08,500
call this code well that could certainly

468
00:23:03,409 --> 00:23:12,380
backfire right so I guess that's another

469
00:23:08,500 --> 00:23:14,089
possible reason to do so just to make it

470
00:23:12,380 --> 00:23:17,720
a little bit easier for other people to

471
00:23:14,089 --> 00:23:20,359
not do something bad I can't think of

472
00:23:17,720 --> 00:23:23,870
much else other than that so if we do

473
00:23:20,359 --> 00:23:26,000
and is POW to that would just be

474
00:23:23,869 --> 00:23:27,949
something where we would not sure where

475
00:23:26,000 --> 00:23:30,980
we'd want to put that exactly but since

476
00:23:27,950 --> 00:23:33,169
we've got the aligns in here we can just

477
00:23:30,980 --> 00:23:37,700
do one of these where we just say like

478
00:23:33,169 --> 00:23:45,830
is pow - and then we can take you know

479
00:23:37,700 --> 00:23:48,500
input here so if you know we if we have

480
00:23:45,829 --> 00:23:50,599
a value that we want to be equal to

481
00:23:48,500 --> 00:23:55,190
power to I think we should be able to

482
00:23:50,599 --> 00:24:07,639
check that relatively expediently so you

483
00:23:55,190 --> 00:24:11,960
know if I take the value I'm assuming I

484
00:24:07,640 --> 00:24:15,169
can do something like you know take the

485
00:24:11,960 --> 00:24:18,019
value and subtract one from it right and

486
00:24:15,169 --> 00:24:20,929
so if I subtract one from any power of 2

487
00:24:18,019 --> 00:24:25,089
in binary it will set all the things all

488
00:24:20,929 --> 00:24:28,340
the bits before the what you know a a

489
00:24:25,089 --> 00:24:30,740
simple way to say what a power of two is

490
00:24:28,339 --> 00:24:37,158
in binary is it's something that has

491
00:24:30,740 --> 00:24:39,798
only one bit set right and so if it has

492
00:24:37,159 --> 00:24:42,050
only one bit set then if I subtract one

493
00:24:39,798 --> 00:24:44,930
from it I'm going to get all of the bit

494
00:24:42,049 --> 00:24:46,849
to the right of that bit turned on that

495
00:24:44,930 --> 00:24:50,750
bit and all the rest of the bits to the

496
00:24:46,849 --> 00:24:55,179
left turned off right and the that's the

497
00:24:50,750 --> 00:24:59,269
only time I think that that could happen

498
00:24:55,180 --> 00:25:03,920
because any other value shouldn't

499
00:24:59,269 --> 00:25:06,859
produce that same pattern right because

500
00:25:03,920 --> 00:25:10,130
anything else would either have bits set

501
00:25:06,859 --> 00:25:12,649
to the left still or there would have

502
00:25:10,130 --> 00:25:15,470
been a hole somewhere and so you

503
00:25:12,650 --> 00:25:19,960
wouldn't actually get all of the bits

504
00:25:15,470 --> 00:25:22,700
turned on right there would be a stopper

505
00:25:19,960 --> 00:25:25,460
you know or something so and I would

506
00:25:22,700 --> 00:25:28,309
assume i if I take the value minus one

507
00:25:25,460 --> 00:25:31,279
right and then I end it with the value

508
00:25:28,309 --> 00:25:35,029
so I say whatever I had originally just

509
00:25:31,279 --> 00:25:37,160
and those two together right I guess I

510
00:25:35,029 --> 00:25:43,009
shouldn't say and those two together I

511
00:25:37,160 --> 00:25:45,830
should say if I take this and I and with

512
00:25:43,009 --> 00:25:50,410
the knot of it right so I flip it around

513
00:25:45,829 --> 00:25:50,409
then I should get the same value back

514
00:25:52,720 --> 00:26:02,029
right because if all of the things below

515
00:25:57,200 --> 00:26:03,799
it are set to 1 if I flip them if I

516
00:26:02,029 --> 00:26:05,000
invert everything so all those becomes 0

517
00:26:03,799 --> 00:26:07,879
and all the rest of the things the right

518
00:26:05,000 --> 00:26:09,950
become 1 if I end it I should get just

519
00:26:07,880 --> 00:26:12,200
the top part and the top part should be

520
00:26:09,950 --> 00:26:15,590
the same as it was before because there

521
00:26:12,200 --> 00:26:20,059
shouldn't be any other bits set that are

522
00:26:15,589 --> 00:26:23,829
higher than it right so I think that

523
00:26:20,059 --> 00:26:28,220
would work the only question I have is I

524
00:26:23,829 --> 00:26:33,559
guess that doesn't necessarily fix the

525
00:26:28,220 --> 00:26:35,870
fact that well so that could still allow

526
00:26:33,559 --> 00:26:40,389
you to have more up top actually now I

527
00:26:35,869 --> 00:26:43,858
think about it so it's not quite right

528
00:26:40,390 --> 00:26:43,859
[Music]

529
00:26:48,160 --> 00:26:51,529
so I guess I need one additional check

530
00:26:50,599 --> 00:26:54,230
to make sure that you don't have

531
00:26:51,529 --> 00:26:58,190
anything else up on top right look up on

532
00:26:54,230 --> 00:27:05,839
the high end of the value and so when I

533
00:26:58,190 --> 00:27:19,370
do that I would also need to say yeah if

534
00:27:05,839 --> 00:27:20,869
I were to use the bottom part not sure

535
00:27:19,369 --> 00:27:24,789
what the quickest way to do that being

536
00:27:20,869 --> 00:27:37,250
that one's a little harder although it

537
00:27:24,789 --> 00:27:38,299
shouldn't be that much harder right we

538
00:27:37,250 --> 00:27:41,720
may have to go to the blackboard for

539
00:27:38,299 --> 00:27:45,200
this and yes this is something that I

540
00:27:41,720 --> 00:27:53,210
have done before but I'm too old now I

541
00:27:45,200 --> 00:27:55,640
forget everything you used to have a

542
00:27:53,210 --> 00:27:57,529
good memory for things not so much

543
00:27:55,640 --> 00:27:59,840
anymore to be fair I was never much of a

544
00:27:57,529 --> 00:28:02,480
bit twiddling kind of guy people who

545
00:27:59,839 --> 00:28:07,069
live and die by bit twiddling and stuff

546
00:28:02,480 --> 00:28:09,200
are definitely more oh no my my pen is

547
00:28:07,069 --> 00:28:12,789
plugged into the wrong machine somehow

548
00:28:09,200 --> 00:28:20,590
that's no good that's not gonna help

549
00:28:12,789 --> 00:28:20,589
what hmm well hold on one second

550
00:28:41,750 --> 00:28:49,079
okay maybe this will have improved our

551
00:28:45,359 --> 00:28:51,259
situation yes okay so let's let's try

552
00:28:49,079 --> 00:28:51,259
that again

553
00:28:57,529 --> 00:29:04,200
it's a little weird though like why am i

554
00:29:00,569 --> 00:29:05,939
getting do we why am I getting you weird

555
00:29:04,200 --> 00:29:11,789
Oh cuz the opacity got turned down

556
00:29:05,940 --> 00:29:13,559
somehow not sure how there we go um I

557
00:29:11,789 --> 00:29:16,440
must have accidentally clicked that at

558
00:29:13,559 --> 00:29:18,000
some point so let's take a look here and

559
00:29:16,440 --> 00:29:19,820
just let me show you what I'm talking

560
00:29:18,000 --> 00:29:22,650
about

561
00:29:19,819 --> 00:29:32,639
that is not how I normally do it it's

562
00:29:22,650 --> 00:29:35,420
been too long so what I was saying

563
00:29:32,640 --> 00:29:41,930
before is fairly straightforward right

564
00:29:35,420 --> 00:29:44,009
suppose you have a binary number like so

565
00:29:41,930 --> 00:29:47,160
and it doesn't matter how long it is

566
00:29:44,009 --> 00:29:50,250
just any binary number and I want to go

567
00:29:47,160 --> 00:29:53,070
ahead and subtract one from it

568
00:29:50,250 --> 00:29:55,470
right it's gonna carry this way so that

569
00:29:53,069 --> 00:29:57,659
if this was a zero right it's going to

570
00:29:55,470 --> 00:30:00,180
keep trying to borrow till it gets to

571
00:29:57,660 --> 00:30:01,769
here so if I subtract one from this

572
00:30:00,180 --> 00:30:05,070
number I'm gonna get a number that looks

573
00:30:01,769 --> 00:30:06,960
like this right which is that number

574
00:30:05,069 --> 00:30:09,149
minus one right in this case you've got

575
00:30:06,960 --> 00:30:11,220
remember your powers of two here right

576
00:30:09,150 --> 00:30:14,100
so you got this first one is 1 then 2

577
00:30:11,220 --> 00:30:15,809
then 4 then 8 so if you look at what

578
00:30:14,099 --> 00:30:18,059
these values are set to you know this

579
00:30:15,809 --> 00:30:20,399
one's set to 8 because there's only one

580
00:30:18,059 --> 00:30:22,319
bit set it's the 8 bit these three

581
00:30:20,400 --> 00:30:24,509
bottom bits are all set in the next

582
00:30:22,319 --> 00:30:27,149
number one plus two plus four is seven

583
00:30:24,509 --> 00:30:29,099
right which is exactly what you'd expect

584
00:30:27,150 --> 00:30:32,580
it went from seven to one by subtracting

585
00:30:29,099 --> 00:30:37,500
one and so what I was saying before is

586
00:30:32,579 --> 00:30:39,960
that well if you go ahead and and these

587
00:30:37,500 --> 00:30:43,529
two things together you can pretty

588
00:30:39,960 --> 00:30:46,980
quickly tell whether or not this part

589
00:30:43,529 --> 00:30:49,399
was a power of two because if you were

590
00:30:46,980 --> 00:30:49,400
to end

591
00:30:49,470 --> 00:30:54,809
the your result back with the thing that

592
00:30:52,470 --> 00:30:57,660
you had originally you can either test

593
00:30:54,809 --> 00:30:59,579
for zeros here or you can just test to

594
00:30:57,660 --> 00:31:02,330
see if you got the same number again

595
00:30:59,579 --> 00:31:02,329
right

596
00:31:06,319 --> 00:31:13,409
the problem that I'm having is how do I

597
00:31:09,750 --> 00:31:16,950
test to see loops how do I test to see

598
00:31:13,410 --> 00:31:19,380
what these are right because you need

599
00:31:16,950 --> 00:31:20,970
something fundamentally that right here

600
00:31:19,380 --> 00:31:25,430
you know let's suppose that I want to

601
00:31:20,970 --> 00:31:28,440
differentiate here is a power of two

602
00:31:25,430 --> 00:31:29,730
here is something that is not a power of

603
00:31:28,440 --> 00:31:34,110
two right

604
00:31:29,730 --> 00:31:36,029
this one is eight and this one is eight

605
00:31:34,109 --> 00:31:39,389
plus sixteen right I should break these

606
00:31:36,029 --> 00:31:41,849
in some other way this let's say this

607
00:31:39,390 --> 00:31:45,270
one is eight this one is eight plus

608
00:31:41,849 --> 00:31:47,579
sixteen right which is twenty four not a

609
00:31:45,269 --> 00:31:50,460
power of two right so this one has to be

610
00:31:47,579 --> 00:31:53,220
yes and this one has to be know if this

611
00:31:50,460 --> 00:31:56,640
routine is gonna be worth anything in

612
00:31:53,220 --> 00:31:58,650
the checking right and so when we look

613
00:31:56,640 --> 00:32:01,620
at it we need some way of determining

614
00:31:58,650 --> 00:32:06,509
that we don't have this particular

615
00:32:01,619 --> 00:32:09,179
circumstance so again starting off with

616
00:32:06,509 --> 00:32:11,009
doing the subtraction in both cases we

617
00:32:09,180 --> 00:32:13,440
would get the same answer for our

618
00:32:11,009 --> 00:32:15,839
subtraction in the bottom bits right

619
00:32:13,440 --> 00:32:18,660
we're getting it one one zero I'm sorry

620
00:32:15,839 --> 00:32:20,369
one one one with a zero here and the

621
00:32:18,660 --> 00:32:22,860
only difference between the two is going

622
00:32:20,369 --> 00:32:24,629
to be here right so the difference is

623
00:32:22,859 --> 00:32:26,759
going to be in one of them were going to

624
00:32:24,630 --> 00:32:28,620
get a one up here and then the other one

625
00:32:26,759 --> 00:32:32,400
we're going to get a zero so we end up

626
00:32:28,619 --> 00:32:35,039
with these two different values and we

627
00:32:32,400 --> 00:32:38,310
know that this one should yield a yes

628
00:32:35,039 --> 00:32:41,690
and this one should yield and no but we

629
00:32:38,309 --> 00:32:45,750
don't really have any way of knowing

630
00:32:41,690 --> 00:32:47,670
that that's true right we can trivially

631
00:32:45,750 --> 00:32:49,890
check to see whether this part was a

632
00:32:47,670 --> 00:32:51,570
power of two now because I believe any

633
00:32:49,890 --> 00:32:54,150
other pattern that would have occurred

634
00:32:51,569 --> 00:32:58,059
down here for example let's say we had

635
00:32:54,150 --> 00:33:01,600
one one zero zero one zero one zero

636
00:32:58,059 --> 00:33:04,240
one I started one zero zero one if we

637
00:33:01,599 --> 00:33:12,069
did a subtract one on each of these they

638
00:33:04,240 --> 00:33:15,190
would become 1 0 1 1 1 0 0 1 and 1 0 0 0

639
00:33:12,069 --> 00:33:17,980
right because subtracting a 1 from each

640
00:33:15,190 --> 00:33:21,580
of these never propagates up to this

641
00:33:17,980 --> 00:33:23,890
value so if we were then to do the

642
00:33:21,579 --> 00:33:26,019
operation I was suggesting before which

643
00:33:23,890 --> 00:33:31,420
is to say that if you not these values

644
00:33:26,019 --> 00:33:37,389
you would be producing 0 1 0 0 0 1 1 0

645
00:33:31,420 --> 00:33:40,960
or 0 1 1 1 and in each of these cases if

646
00:33:37,390 --> 00:33:42,720
you were to end the value back to the

647
00:33:40,960 --> 00:33:46,059
thing that you started with originally

648
00:33:42,720 --> 00:33:48,759
it would not propagate this number

649
00:33:46,059 --> 00:33:52,389
through right so you will definitely not

650
00:33:48,759 --> 00:33:55,839
match right you will definitely not

651
00:33:52,390 --> 00:33:58,290
match so if you did equals equals value

652
00:33:55,839 --> 00:34:01,899
right which is what I was doing before

653
00:33:58,289 --> 00:34:04,839
you this will successfully tell you that

654
00:34:01,900 --> 00:34:07,690
right so we definitely have something

655
00:34:04,839 --> 00:34:12,369
that tells us if it's successful power

656
00:34:07,690 --> 00:34:14,950
of 2 in terms of those those low bits

657
00:34:12,369 --> 00:34:18,190
right but I'm just not sure whether or

658
00:34:14,949 --> 00:34:23,319
not it works all the way up to high bits

659
00:34:18,190 --> 00:34:25,570
now I guess the answer is are we sure

660
00:34:23,320 --> 00:34:28,420
that that same process doesn't still

661
00:34:25,570 --> 00:34:29,950
work because now I think about it if it

662
00:34:28,420 --> 00:34:31,990
works like this it should work on any

663
00:34:29,949 --> 00:34:33,489
bit so I may have just talked myself out

664
00:34:31,989 --> 00:34:36,009
of it for no reason so let's see what

665
00:34:33,489 --> 00:34:38,889
happens so let's say we were to do it

666
00:34:36,010 --> 00:34:41,020
here again we got these two so if we now

667
00:34:38,889 --> 00:34:46,150
invert them what do we get well we get 0

668
00:34:41,019 --> 00:34:48,309
1 0 0 0 or 1 1 0 0 0 in this case we

669
00:34:46,150 --> 00:34:51,550
want this to be yes and this to be no if

670
00:34:48,309 --> 00:34:55,630
we and this back with the original value

671
00:34:51,550 --> 00:34:57,820
right which was this we do get the the

672
00:34:55,630 --> 00:35:00,430
same value back if we and this we don't

673
00:34:57,820 --> 00:35:03,309
so you know what I just I'm just being

674
00:35:00,429 --> 00:35:06,759
too careful I guess I I did it correctly

675
00:35:03,309 --> 00:35:08,289
I mean famous last words right but it

676
00:35:06,760 --> 00:35:09,850
looks like that does work for any bit

677
00:35:08,289 --> 00:35:10,949
pattern because it just can't propagate

678
00:35:09,849 --> 00:35:15,039
far enough down

679
00:35:10,949 --> 00:35:17,429
you watch me be wrong about that we

680
00:35:15,039 --> 00:35:20,699
didn't exactly attack that particular

681
00:35:17,429 --> 00:35:24,129
verification with a heck of a lot of

682
00:35:20,699 --> 00:35:28,239
rigor there I suppose but you know we'll

683
00:35:24,130 --> 00:35:30,329
see so yeah again you know just a simple

684
00:35:28,239 --> 00:35:32,619
way to say is this thing in power -

685
00:35:30,329 --> 00:35:35,860
that's all you really need to do right

686
00:35:32,619 --> 00:35:38,049
I'm arguing you subtract one from the

687
00:35:35,860 --> 00:35:40,420
value to do the bit propagation you and

688
00:35:38,050 --> 00:35:42,310
it with the non of that and you see

689
00:35:40,420 --> 00:35:47,619
whether you get the same value back if

690
00:35:42,309 --> 00:35:52,029
you do great if you don't then no that's

691
00:35:47,619 --> 00:35:54,940
the theory anyway and yeah so we'll see

692
00:35:52,030 --> 00:35:56,380
if that holds up anyway again not even a

693
00:35:54,940 --> 00:35:58,539
central part of the code that's just

694
00:35:56,380 --> 00:36:00,309
there to provide that assertion so now

695
00:35:58,539 --> 00:36:03,130
let's go through this routine and take a

696
00:36:00,309 --> 00:36:05,139
look at the part that was actually

697
00:36:03,130 --> 00:36:08,440
reported as the bug again all of that

698
00:36:05,139 --> 00:36:10,719
was not what was claimed so what was

699
00:36:08,440 --> 00:36:13,900
reported as a bug was saying look if

700
00:36:10,719 --> 00:36:16,599
current block does exist but the size is

701
00:36:13,900 --> 00:36:19,360
less than it should be right so let's

702
00:36:16,599 --> 00:36:22,480
suppose that size in it comes in as you

703
00:36:19,360 --> 00:36:25,690
know 70 or something but current block

704
00:36:22,480 --> 00:36:27,639
only has a space for 60 because that's

705
00:36:25,690 --> 00:36:29,829
what it says if the current block size

706
00:36:27,639 --> 00:36:32,909
is smaller than the size in it right so

707
00:36:29,829 --> 00:36:35,860
this comes in at 60 this is set to 70

708
00:36:32,909 --> 00:36:38,379
what's going to happen well first size

709
00:36:35,860 --> 00:36:42,160
will be adjusted for the amount that it

710
00:36:38,380 --> 00:36:43,570
might need for alignment right and so

711
00:36:42,159 --> 00:36:45,190
when that happens you can see it

712
00:36:43,570 --> 00:36:47,970
happening here it's gonna say whatever

713
00:36:45,190 --> 00:36:51,280
the alignment off offset needs to be

714
00:36:47,969 --> 00:36:52,809
we're going to go ahead and add that to

715
00:36:51,280 --> 00:36:54,490
the size because we're gonna need that

716
00:36:52,809 --> 00:36:57,699
presumably for shifting or something

717
00:36:54,489 --> 00:37:00,869
like that right so then we say okay if

718
00:36:57,699 --> 00:37:05,889
there's not an arena current block right

719
00:37:00,869 --> 00:37:10,480
which is to say that if we you know have

720
00:37:05,889 --> 00:37:11,559
some kind of a if we have some kind of

721
00:37:10,480 --> 00:37:14,079
situation where we haven't creating

722
00:37:11,559 --> 00:37:15,909
before or we've got this and so this

723
00:37:14,079 --> 00:37:18,340
might be the bug here where this looks

724
00:37:15,909 --> 00:37:20,469
like this is not in bracketed properly

725
00:37:18,340 --> 00:37:24,430
right like I feel like that should save

726
00:37:20,469 --> 00:37:28,409
that because you

727
00:37:24,429 --> 00:37:30,489
even even if that isn't the bug as as

728
00:37:28,409 --> 00:37:32,649
reported there what you can see

729
00:37:30,489 --> 00:37:35,079
happening there it's like hey this

730
00:37:32,650 --> 00:37:37,119
comparison wants to be clearly between

731
00:37:35,079 --> 00:37:39,340
these two things and I don't ever like

732
00:37:37,119 --> 00:37:41,049
eat leaving something like that dangling

733
00:37:39,340 --> 00:37:42,970
anyway because it's unclear what you

734
00:37:41,050 --> 00:37:44,500
meant the or to refer to there and

735
00:37:42,969 --> 00:37:46,169
you're kind of just relying on see

736
00:37:44,500 --> 00:37:49,869
precedence rules to do the right thing

737
00:37:46,170 --> 00:37:59,349
is that actually what was suggested as

738
00:37:49,869 --> 00:38:00,819
the bug it's not but okay so they're

739
00:37:59,349 --> 00:38:03,940
suggesting that you changes to an and

740
00:38:00,820 --> 00:38:06,910
which is something else entirely

741
00:38:03,940 --> 00:38:10,690
I don't understand why you would want to

742
00:38:06,909 --> 00:38:14,920
do that because you want to do this if

743
00:38:10,690 --> 00:38:20,139
you don't have a block or if it exceeds

744
00:38:14,920 --> 00:38:24,250
the size of the block so I I'm gonna go

745
00:38:20,139 --> 00:38:27,460
ahead and say this is just wrong and I

746
00:38:24,250 --> 00:38:28,480
don't know C++ rules by heart so I don't

747
00:38:27,460 --> 00:38:30,340
actually know whether you need this

748
00:38:28,480 --> 00:38:31,809
parenthesis or not but I want it there

749
00:38:30,340 --> 00:38:35,350
anyway

750
00:38:31,809 --> 00:38:37,529
because I just like that to be clear

751
00:38:35,349 --> 00:38:42,239
specifically so I don't have to remember

752
00:38:37,530 --> 00:38:42,240
C++ is precedence rules for operators

753
00:38:43,469 --> 00:38:49,629
why you know why would I want to have to

754
00:38:46,510 --> 00:38:52,600
remember that so if you come through

755
00:38:49,630 --> 00:38:55,630
here you're gonna say look in this case

756
00:38:52,599 --> 00:38:57,940
the case we're talking about the size is

757
00:38:55,630 --> 00:39:00,280
going to overflow this so you are going

758
00:38:57,940 --> 00:39:03,880
to enter this case that means you're

759
00:39:00,280 --> 00:39:05,830
going to reset the size to be size in it

760
00:39:03,880 --> 00:39:08,230
and the reason is because now again you

761
00:39:05,829 --> 00:39:10,150
know that it's aligned so you don't have

762
00:39:08,230 --> 00:39:13,980
to have the alignment anymore because

763
00:39:10,150 --> 00:39:13,980
the alignment should just work

764
00:39:18,630 --> 00:39:23,530
the rest of this just works exact same

765
00:39:21,329 --> 00:39:26,699
way it worked before

766
00:39:23,530 --> 00:39:26,699
[Music]

767
00:39:27,019 --> 00:39:40,320
don't see any problem in here it's so

768
00:39:37,980 --> 00:39:51,990
this was line 146 do I have the right

769
00:39:40,320 --> 00:39:54,180
lines here so that would have been I see

770
00:39:51,989 --> 00:39:57,299
so they were actually suggesting look if

771
00:39:54,179 --> 00:39:59,190
you you want to test to see that this

772
00:39:57,300 --> 00:40:01,970
part of it and make sure you'd call get

773
00:39:59,190 --> 00:40:04,829
effective size for up here but you don't

774
00:40:01,969 --> 00:40:07,259
so I just I fundamentally disagree with

775
00:40:04,829 --> 00:40:09,750
this bug report i I don't think you do

776
00:40:07,260 --> 00:40:12,630
that because this changes the alignment

777
00:40:09,750 --> 00:40:19,710
back to normal so I think you it's

778
00:40:12,630 --> 00:40:21,750
totally fine right if that makes sense

779
00:40:19,710 --> 00:40:23,400
the only thing I'm not sure about here I

780
00:40:21,750 --> 00:40:25,679
see why they want to do that now I think

781
00:40:23,400 --> 00:40:30,410
about it though because this is this

782
00:40:25,679 --> 00:40:30,409
check here since this wouldn't be called

783
00:40:32,210 --> 00:40:39,360
you would really want to do that right

784
00:40:35,550 --> 00:40:40,080
because if they're well even that but

785
00:40:39,360 --> 00:40:41,220
that doesn't make any sense because

786
00:40:40,079 --> 00:40:43,739
you're gonna do this with it so you

787
00:40:41,219 --> 00:40:45,659
really don't have to do that either

788
00:40:43,739 --> 00:40:49,889
so yeah no I think this bug report is

789
00:40:45,659 --> 00:40:54,869
just wrong I guess is what I'd say this

790
00:40:49,889 --> 00:40:56,489
one I do agree with because well no I

791
00:40:54,869 --> 00:40:58,980
don't review with this one either I just

792
00:40:56,489 --> 00:41:06,599
want the extra parentheses in there to

793
00:40:58,980 --> 00:41:08,610
be more clear but this is also wrong so

794
00:41:06,599 --> 00:41:11,239
I guess I would say this entire bug

795
00:41:08,610 --> 00:41:11,240
report is wrong

796
00:41:13,260 --> 00:41:22,210
would be my guess so yeah I'm pretty

797
00:41:19,840 --> 00:41:23,950
sure that there wasn't a bug there now

798
00:41:22,210 --> 00:41:26,139
what I do want to know is there might

799
00:41:23,949 --> 00:41:29,679
have been a bug if this that's totally

800
00:41:26,139 --> 00:41:31,868
separate and unrelated to the particular

801
00:41:29,679 --> 00:41:35,039
bug report that was issued which is to

802
00:41:31,869 --> 00:41:37,630
say that this operator precedence here

803
00:41:35,039 --> 00:41:47,320
might have been an issue so let me check

804
00:41:37,630 --> 00:41:49,269
to see operator precedence or see just a

805
00:41:47,320 --> 00:41:51,340
lot of quick check the table we can also

806
00:41:49,269 --> 00:41:54,849
look at the grammar those are easy ways

807
00:41:51,340 --> 00:41:59,800
to to look but what I want to see is who

808
00:41:54,849 --> 00:42:02,109
gets bound higher of course this this

809
00:41:59,800 --> 00:42:09,670
isn't what I want because it's not

810
00:42:02,108 --> 00:42:10,630
telling me which order these go in the

811
00:42:09,670 --> 00:42:12,608
operators are listed in order of

812
00:42:10,630 --> 00:42:14,200
precedence highest to lowest their

813
00:42:12,608 --> 00:42:20,348
associativity indicates which operates

814
00:42:14,199 --> 00:42:24,279
equal preference in the expression so

815
00:42:20,349 --> 00:42:27,309
let's see highest to lowest means that

816
00:42:24,280 --> 00:42:31,810
this is the most powerful so let's take

817
00:42:27,309 --> 00:42:34,739
a look so logical or goes below these so

818
00:42:31,809 --> 00:42:46,690
that means we should so so I don't know

819
00:42:34,739 --> 00:42:49,750
here's what I'm gonna say the second

820
00:42:46,690 --> 00:42:53,369
issue is definitely not wrong what's the

821
00:42:49,750 --> 00:42:53,369
second issue this one here

822
00:42:53,789 --> 00:42:57,019
[Music]

823
00:43:00,960 --> 00:43:12,880
so the second issue is this one ginger

824
00:43:08,710 --> 00:43:17,798
bill and you're saying you want to be

825
00:43:12,880 --> 00:43:21,880
greater than or equal to but it doesn't

826
00:43:17,798 --> 00:43:23,889
have to do that what this is saying is

827
00:43:21,880 --> 00:43:27,970
if I were to take the current base

828
00:43:23,889 --> 00:43:31,239
position and I add the size to it then I

829
00:43:27,969 --> 00:43:34,149
need to end that value needs to be

830
00:43:31,239 --> 00:43:35,618
either equal to the block size because

831
00:43:34,150 --> 00:43:38,410
that means I have not overwritten it

832
00:43:35,619 --> 00:43:42,930
I've ended at the location where it also

833
00:43:38,409 --> 00:43:46,779
itself believes it to have ended right

834
00:43:42,929 --> 00:43:48,519
or I need to be less than that so the

835
00:43:46,780 --> 00:43:51,130
case where I need to allocate a new

836
00:43:48,519 --> 00:43:58,059
block is specifically the one where I

837
00:43:51,130 --> 00:44:00,430
would exceed the size right want to go

838
00:43:58,059 --> 00:44:03,119
ahead and update this to tell me why you

839
00:44:00,429 --> 00:44:03,118
think that's wrong

840
00:44:10,588 --> 00:44:23,068
maybe the buffer overflow is because you

841
00:44:13,510 --> 00:44:27,760
had a bug in your code so let me try to

842
00:44:23,068 --> 00:44:30,548
let me try to give you a like a more

843
00:44:27,760 --> 00:44:33,280
constructive way we can step through it

844
00:44:30,548 --> 00:44:36,159
how about I just set up one of these to

845
00:44:33,280 --> 00:44:44,950
be in exactly the situation that we're

846
00:44:36,159 --> 00:44:49,000
talking about and then we could do we

847
00:44:44,949 --> 00:44:52,358
could just see right III don't know

848
00:44:49,000 --> 00:44:53,679
does am I the only person who doesn't

849
00:44:52,358 --> 00:44:56,108
understand what the bug report is

850
00:44:53,679 --> 00:44:57,639
actually reporting so what I changed was

851
00:44:56,108 --> 00:44:59,380
not a bug it's just something I would

852
00:44:57,639 --> 00:45:01,358
like to do for clarity so that wasn't a

853
00:44:59,380 --> 00:45:04,210
bug so I don't I still don't see any

854
00:45:01,358 --> 00:45:05,500
bugs in this code despite the bug report

855
00:45:04,210 --> 00:45:08,679
saying that there are two bugs in it I

856
00:45:05,500 --> 00:45:12,068
actually see none and so I'm trying to

857
00:45:08,679 --> 00:45:16,568
figure out what they actually are

858
00:45:12,068 --> 00:45:20,528
and this is wrong at least from the

859
00:45:16,568 --> 00:45:23,619
perspective of what it's saying there

860
00:45:20,528 --> 00:45:30,458
may be some other bug that's different

861
00:45:23,619 --> 00:45:32,709
or something I don't know

862
00:45:30,458 --> 00:45:36,068
so let me go ahead and construct the

863
00:45:32,708 --> 00:45:39,038
case just because again it's educational

864
00:45:36,068 --> 00:45:41,380
to see one way or the other so we might

865
00:45:39,039 --> 00:45:47,109
as well do it so if I just go into

866
00:45:41,380 --> 00:45:49,749
handmade CBP let's say right and in here

867
00:45:47,108 --> 00:45:53,828
I construct the exact case that we're

868
00:45:49,748 --> 00:45:57,248
talking about so the bug claimed that we

869
00:45:53,829 --> 00:45:58,989
were going to have a problem let me do

870
00:45:57,248 --> 00:46:00,669
it maybe at the end here actually now I

871
00:45:58,989 --> 00:46:03,940
think about it just so I can make sure

872
00:46:00,670 --> 00:46:06,789
that the that the memory subsystem has

873
00:46:03,940 --> 00:46:07,900
been started up and has the platform

874
00:46:06,789 --> 00:46:10,479
allocator calls because we're going to

875
00:46:07,900 --> 00:46:12,068
be asking it to do an allocation so I

876
00:46:10,478 --> 00:46:14,139
want to be able to construct a memory

877
00:46:12,068 --> 00:46:17,048
arena that would be in the situation

878
00:46:14,139 --> 00:46:19,690
that we're talking about here right so

879
00:46:17,048 --> 00:46:21,759
let's suppose that I take an arena and

880
00:46:19,690 --> 00:46:26,199
well I don't even need to do that I can

881
00:46:21,759 --> 00:46:29,079
just do this right and let me make sure

882
00:46:26,199 --> 00:46:32,289
that I only do it once so we'll also do

883
00:46:29,079 --> 00:46:35,940
a thing where we say look let's put in a

884
00:46:32,289 --> 00:46:39,819
temporary here where we just say like

885
00:46:35,940 --> 00:46:45,789
persist do still have persist now we

886
00:46:39,818 --> 00:46:48,449
know local persist okay so what I'm

887
00:46:45,789 --> 00:46:50,859
going to do is say local persist do once

888
00:46:48,449 --> 00:46:53,139
that's going to get initialized to zero

889
00:46:50,858 --> 00:46:55,268
so that I'm gonna say look if not do

890
00:46:53,139 --> 00:46:58,748
once will come into this path and now we

891
00:46:55,268 --> 00:47:00,939
can construct this situation right that

892
00:46:58,748 --> 00:47:02,858
is supposed to cause the bug according

893
00:47:00,940 --> 00:47:05,170
to the bug report and then what I can do

894
00:47:02,858 --> 00:47:08,139
is see whether it actually causes a bug

895
00:47:05,170 --> 00:47:10,180
and if it does then we can debug it

896
00:47:08,139 --> 00:47:13,778
right so that you know is kind of a good

897
00:47:10,179 --> 00:47:15,068
way to reproduce the the bug so first

898
00:47:13,778 --> 00:47:17,650
what we'll do is we'll create an arena

899
00:47:15,068 --> 00:47:20,708
and what we need to do is create the

900
00:47:17,650 --> 00:47:23,440
circumstance where as the bug said it

901
00:47:20,708 --> 00:47:25,309
the the current block size needs to be

902
00:47:23,440 --> 00:47:28,789
smaller than what we're going to

903
00:47:25,309 --> 00:47:31,190
okay so what we can do is we can set

904
00:47:28,789 --> 00:47:33,230
this arena you know we know that there's

905
00:47:31,190 --> 00:47:35,059
gonna be a minimum block size for it so

906
00:47:33,230 --> 00:47:36,409
let's test the most common case which

907
00:47:35,059 --> 00:47:39,019
would be that's that no one set the

908
00:47:36,409 --> 00:47:41,329
minimum block size right so let's go

909
00:47:39,019 --> 00:47:45,079
ahead and allocate we'll try two

910
00:47:41,329 --> 00:47:47,150
different things but let's go ahead and

911
00:47:45,079 --> 00:47:49,130
allocate a block that will succeed right

912
00:47:47,150 --> 00:47:52,160
so we'll do a push size on the arena

913
00:47:49,130 --> 00:47:54,349
where we say here's the thing our size

914
00:47:52,159 --> 00:47:58,909
is gonna be the minimum block size for

915
00:47:54,349 --> 00:48:00,679
the arena right - something right so

916
00:47:58,909 --> 00:48:02,989
we'll just say it's gonna be minus-30

917
00:48:00,679 --> 00:48:04,909
right a number that's not a nice even

918
00:48:02,989 --> 00:48:07,789
power of two just to make sure that

919
00:48:04,909 --> 00:48:10,399
we're not you know gonna bias in favor

920
00:48:07,789 --> 00:48:13,130
of a good result so just say allocate

921
00:48:10,400 --> 00:48:18,289
everything except for 30 bytes of a

922
00:48:13,130 --> 00:48:19,700
block okay so we're gonna do that and

923
00:48:18,289 --> 00:48:21,710
then what we're gonna do is we're gonna

924
00:48:19,699 --> 00:48:23,269
leave the arena push params to be

925
00:48:21,710 --> 00:48:25,639
whatever they would normally be and you

926
00:48:23,269 --> 00:48:27,530
know if the bug report had said these

927
00:48:25,639 --> 00:48:28,609
params caused a problem when then we

928
00:48:27,530 --> 00:48:30,380
would want to put those brands in there

929
00:48:28,610 --> 00:48:31,760
but we didn't get any guidance along

930
00:48:30,380 --> 00:48:38,119
those lines so we're just gonna be like

931
00:48:31,760 --> 00:48:42,020
this right um so there's our first test

932
00:48:38,119 --> 00:48:44,659
allocation and here's our second right

933
00:48:42,019 --> 00:48:50,710
and I'm gonna make sizes for these as

934
00:48:44,659 --> 00:48:50,710
well just so we can remember them right

935
00:48:53,889 --> 00:49:00,980
and so now I'm gonna do is just make

936
00:48:57,199 --> 00:49:02,569
something I don't know 50 right so now

937
00:49:00,980 --> 00:49:07,400
we're gonna have something that also

938
00:49:02,570 --> 00:49:08,750
needs to go you know we we need to put

939
00:49:07,400 --> 00:49:14,590
something in there and we're expecting

940
00:49:08,750 --> 00:49:17,960
there only be 30 right 30 bytes long and

941
00:49:14,590 --> 00:49:19,910
50 bytes can't fit in the 30 so it

942
00:49:17,960 --> 00:49:22,190
should if it's working properly

943
00:49:19,909 --> 00:49:24,349
triggered allocation if it's broken it

944
00:49:22,190 --> 00:49:26,809
should hit the bug case that's you know

945
00:49:24,349 --> 00:49:29,690
that's being contemplated here so let's

946
00:49:26,809 --> 00:49:33,710
go ahead and and do that as well

947
00:49:29,690 --> 00:49:36,789
so let's allocate size a here and size B

948
00:49:33,710 --> 00:49:38,829
here right

949
00:49:36,789 --> 00:49:41,500
and now we should get back both of those

950
00:49:38,829 --> 00:49:43,480
what I might do is say look let's change

951
00:49:41,500 --> 00:49:45,719
these two u8 as well so that we can

952
00:49:43,480 --> 00:49:47,740
easily look at them in the debugger -

953
00:49:45,719 --> 00:49:49,029
because it's just a little bit of a

954
00:49:47,739 --> 00:49:51,250
handy thing doesn't really matter one

955
00:49:49,030 --> 00:49:52,420
way or the other we'll do that and then

956
00:49:51,250 --> 00:49:55,869
the other thing we can do is we could

957
00:49:52,420 --> 00:49:57,940
also like memset these basically so we

958
00:49:55,869 --> 00:50:03,039
could say like set I don't know if we've

959
00:49:57,940 --> 00:50:05,200
got a set a call or anything here there

960
00:50:03,039 --> 00:50:07,659
you go zero sighs so now we'll also

961
00:50:05,199 --> 00:50:10,539
clear them to zero just to make sure I

962
00:50:07,659 --> 00:50:12,489
like double check this code should do

963
00:50:10,539 --> 00:50:15,130
that but just to make sure that somehow

964
00:50:12,489 --> 00:50:17,409
this code isn't doing something better

965
00:50:15,130 --> 00:50:21,099
than we would do when we get the memory

966
00:50:17,409 --> 00:50:22,960
back let's try to also ensure that we

967
00:50:21,099 --> 00:50:27,279
got something usable back that we can

968
00:50:22,960 --> 00:50:28,869
also use right okay and so now we should

969
00:50:27,280 --> 00:50:30,640
be able to step through this code and

970
00:50:28,869 --> 00:50:32,980
I'll set it to debug build so we can

971
00:50:30,639 --> 00:50:36,219
watch it we can like actually step

972
00:50:32,980 --> 00:50:38,139
through each individual line and watch

973
00:50:36,219 --> 00:50:41,739
it happen and then we should be able to

974
00:50:38,139 --> 00:50:45,400
see the bug happen directly right at

975
00:50:41,739 --> 00:50:48,219
least in theory so let's go ahead and do

976
00:50:45,400 --> 00:50:48,579
that so why am I not seeing what am I

977
00:50:48,219 --> 00:50:50,739
seeing

978
00:50:48,579 --> 00:50:58,779
missing type specifier what's the

979
00:50:50,739 --> 00:51:00,909
problem ah yes sorry I gotta just finish

980
00:50:58,780 --> 00:51:02,440
that up so we'll set new ones to true at

981
00:51:00,909 --> 00:51:04,480
the bottom so that we won't do it at an

982
00:51:02,440 --> 00:51:05,710
infinity of times accidentally we don't

983
00:51:04,480 --> 00:51:07,630
really need to do that because we're not

984
00:51:05,710 --> 00:51:10,090
really keeping this we're not leaving

985
00:51:07,630 --> 00:51:11,980
this in the game so it's not really a

986
00:51:10,090 --> 00:51:14,380
big deal whether we do it or not but I

987
00:51:11,980 --> 00:51:17,139
just wanted to make sure that so now I'm

988
00:51:14,380 --> 00:51:21,490
gonna go ahead and do MS dev and open it

989
00:51:17,139 --> 00:51:23,889
up here like so and what we should be

990
00:51:21,489 --> 00:51:25,659
able to do is go to that part of the

991
00:51:23,889 --> 00:51:27,069
code I mean if there was definitely a

992
00:51:25,659 --> 00:51:29,049
bug in it we just run it and it would

993
00:51:27,070 --> 00:51:31,059
crash there but since we don't actually

994
00:51:29,050 --> 00:51:32,170
know let's and and maybe there's a

995
00:51:31,059 --> 00:51:34,719
subtle bug that wouldn't immediately

996
00:51:32,170 --> 00:51:35,680
crash we should at least look and do our

997
00:51:34,719 --> 00:51:36,849
due diligence I mean the whole point of

998
00:51:35,679 --> 00:51:40,179
this is to look and see if there's a bug

999
00:51:36,849 --> 00:51:43,449
we don't want to just you know say oh

1000
00:51:40,179 --> 00:51:47,079
it's probably fine right um so let's do

1001
00:51:43,449 --> 00:51:49,000
the arena oh you know what there's a

1002
00:51:47,079 --> 00:51:50,199
problem here which is that the minimum

1003
00:51:49,000 --> 00:51:53,230
block size won't get in

1004
00:51:50,199 --> 00:51:57,009
initialized yet so we actually can't

1005
00:51:53,230 --> 00:52:00,159
quite do that because we don't know what

1006
00:51:57,010 --> 00:52:02,050
this will actually be so that's a little

1007
00:52:00,159 --> 00:52:03,759
bit harder I guess I'll just say look I

1008
00:52:02,050 --> 00:52:05,519
happen to know what it is so I was

1009
00:52:03,760 --> 00:52:10,000
trying to be clever there but you know

1010
00:52:05,519 --> 00:52:13,088
oops so let's try this and see if we can

1011
00:52:10,000 --> 00:52:16,780
get the case to trigger just you know

1012
00:52:13,088 --> 00:52:19,328
hard-coded there all right so here's me

1013
00:52:16,780 --> 00:52:21,790
running to that location and here's me

1014
00:52:19,329 --> 00:52:23,560
going in to push sighs it's going to do

1015
00:52:21,789 --> 00:52:25,719
clear to zero in alignment of four which

1016
00:52:23,559 --> 00:52:28,269
seems like a reasonable test case so

1017
00:52:25,719 --> 00:52:30,039
here we come through this code there is

1018
00:52:28,269 --> 00:52:32,380
no current block so it means we enter

1019
00:52:30,039 --> 00:52:37,139
here and it means that we're going to

1020
00:52:32,380 --> 00:52:38,858
allocate a block size of 1024 x 1024 and

1021
00:52:37,139 --> 00:52:41,319
off we go

1022
00:52:38,858 --> 00:52:43,088
we're going to only use slightly less

1023
00:52:41,320 --> 00:52:45,550
than that so if you look at what's going

1024
00:52:43,088 --> 00:52:48,639
to happen here right we've got a block

1025
00:52:45,550 --> 00:52:50,890
size that's that's that big we're using

1026
00:52:48,639 --> 00:52:53,289
I believe 10 for horotec well actually I

1027
00:52:50,889 --> 00:52:57,309
guess I just look at it here right and

1028
00:52:53,289 --> 00:53:01,809
so the actual amount left is gonna be

1029
00:52:57,309 --> 00:53:04,299
that 30 bytes that we wanted okay um so

1030
00:53:01,809 --> 00:53:06,880
there's us allocating it and here's us

1031
00:53:04,300 --> 00:53:09,760
clearing it and now we've returned it to

1032
00:53:06,880 --> 00:53:11,559
the user right so they've got that now

1033
00:53:09,760 --> 00:53:13,359
we're gonna try to do a push size on

1034
00:53:11,559 --> 00:53:15,670
test B and this is where the bug is

1035
00:53:13,358 --> 00:53:17,889
supposed to trigger right so we come

1036
00:53:15,670 --> 00:53:22,630
into the code and we've got a size in it

1037
00:53:17,889 --> 00:53:24,848
here of 50 and we're going to now try to

1038
00:53:22,630 --> 00:53:26,680
allocate that we do have a current block

1039
00:53:24,849 --> 00:53:28,030
and so we're going to get an effective

1040
00:53:26,679 --> 00:53:30,068
size back and you can see that the

1041
00:53:28,030 --> 00:53:31,839
effective size actually did come back as

1042
00:53:30,068 --> 00:53:34,179
something else which means it is gonna

1043
00:53:31,838 --> 00:53:36,880
have to be aligned right which seems

1044
00:53:34,179 --> 00:53:39,578
reasonable so now we do our test

1045
00:53:36,880 --> 00:53:41,170
we say look do we need to go in here and

1046
00:53:39,579 --> 00:53:43,810
of course we do because it's going to

1047
00:53:41,170 --> 00:53:47,650
not work right it's not it's gonna

1048
00:53:43,809 --> 00:53:49,420
overflow so of course we still have one

1049
00:53:47,650 --> 00:53:50,530
test we're gonna have to check which is

1050
00:53:49,420 --> 00:53:52,680
when this is right on the boundary

1051
00:53:50,530 --> 00:53:55,030
because that's also the one that's being

1052
00:53:52,679 --> 00:53:57,279
suggested as case so we'll do that in a

1053
00:53:55,030 --> 00:53:59,980
second but here we go

1054
00:53:57,280 --> 00:54:01,750
we allocate a new block and we put this

1055
00:53:59,980 --> 00:54:03,190
in the block and we clear it and we're

1056
00:54:01,750 --> 00:54:05,380
happy right and everything

1057
00:54:03,190 --> 00:54:09,190
good okay so now let's try them on

1058
00:54:05,380 --> 00:54:12,880
that's right on the boundary right so we

1059
00:54:09,190 --> 00:54:17,039
know we have 30 bytes left right

1060
00:54:12,880 --> 00:54:20,230
and so if I were to put 31 bytes in

1061
00:54:17,039 --> 00:54:23,019
that's the minimum I could ask for

1062
00:54:20,230 --> 00:54:27,219
that would overflow if I asked for 30 it

1063
00:54:23,019 --> 00:54:30,369
would fit right but if I ask for 31 it

1064
00:54:27,219 --> 00:54:33,159
won't and the argument here is that I

1065
00:54:30,369 --> 00:54:34,930
can ask for 31 and it will still say

1066
00:54:33,159 --> 00:54:37,509
that it fits and fail that's what the

1067
00:54:34,929 --> 00:54:41,889
bug report is claiming off by one error

1068
00:54:37,510 --> 00:54:43,960
right so this should find that case if

1069
00:54:41,889 --> 00:54:46,328
that was happening because we know we

1070
00:54:43,960 --> 00:54:49,119
got exactly the block size here minus 30

1071
00:54:46,329 --> 00:54:51,460
and then we're gonna try and put 31 into

1072
00:54:49,119 --> 00:54:53,829
it although now that think about it the

1073
00:54:51,460 --> 00:54:57,608
alignments gonna be wrong here try that

1074
00:54:53,829 --> 00:55:00,519
one more time we would need it to not

1075
00:54:57,608 --> 00:55:02,529
change its size when a line so we

1076
00:55:00,519 --> 00:55:05,050
probably will have to change the

1077
00:55:02,530 --> 00:55:07,180
alignment here to be one byte alignment

1078
00:55:05,050 --> 00:55:14,369
because otherwise this will expand to be

1079
00:55:07,179 --> 00:55:18,759
32 at least well you know what here

1080
00:55:14,369 --> 00:55:23,250
how's that well no because we need to be

1081
00:55:18,760 --> 00:55:23,250
33 this will fit and will work right

1082
00:55:25,019 --> 00:55:32,289
without changing the alignment I can't

1083
00:55:27,429 --> 00:55:34,509
do one byte over its right I mean well

1084
00:55:32,289 --> 00:55:36,639
well no I guess I could because if it's

1085
00:55:34,510 --> 00:55:39,550
only aligning the bottom it won't align

1086
00:55:36,639 --> 00:55:43,179
the top so that's actually fine that's

1087
00:55:39,550 --> 00:55:47,440
fine that should produce exactly the

1088
00:55:43,179 --> 00:55:49,210
case that that you wanted right okay so

1089
00:55:47,440 --> 00:55:51,130
we come down here to the arena we say

1090
00:55:49,210 --> 00:55:53,050
all right let's allocate something with

1091
00:55:51,130 --> 00:55:55,119
32 bytes left which we're gonna do here

1092
00:55:53,050 --> 00:55:57,190
and then let's go in and see what

1093
00:55:55,119 --> 00:55:59,559
happens when we try to allocate 33 bytes

1094
00:55:57,190 --> 00:56:01,329
which is one more bite than we would be

1095
00:55:59,559 --> 00:56:04,568
able to actually fit into this buffer

1096
00:56:01,329 --> 00:56:07,720
right so we come through and we're

1097
00:56:04,568 --> 00:56:10,960
hoping our size stayed 33 it did okay so

1098
00:56:07,719 --> 00:56:16,328
now trying to again look at the bug that

1099
00:56:10,960 --> 00:56:17,210
is claimed so if we look in cubes so we

1100
00:56:16,329 --> 00:56:22,160
look at how much

1101
00:56:17,210 --> 00:56:25,670
is in the current block used right and

1102
00:56:22,159 --> 00:56:28,279
we look to see that block size is this

1103
00:56:25,670 --> 00:56:32,358
so if I actually go and and subtract

1104
00:56:28,280 --> 00:56:34,849
this from it right you see that we can

1105
00:56:32,358 --> 00:56:37,219
fit 32 bytes in here and we're asking it

1106
00:56:34,849 --> 00:56:38,750
to fit 33 so this is the closest case I

1107
00:56:37,219 --> 00:56:41,659
can possibly construct for the bug that

1108
00:56:38,750 --> 00:56:42,920
you're talking about right so now what

1109
00:56:41,659 --> 00:56:44,509
you're saying is we won't go into this

1110
00:56:42,920 --> 00:56:45,829
routine but of course we did go into 13

1111
00:56:44,510 --> 00:56:47,990
and precisely for the reason I said

1112
00:56:45,829 --> 00:56:50,599
which is that this has to be higher than

1113
00:56:47,989 --> 00:56:54,969
this in order to fail and it is right

1114
00:56:50,599 --> 00:57:00,500
why is that the case well the arena

1115
00:56:54,969 --> 00:57:06,818
current block size is this which is 1024

1116
00:57:00,500 --> 00:57:09,920
x 1024 and the arena current block used

1117
00:57:06,818 --> 00:57:17,449
plus the size we're asking for is 1 over

1118
00:57:09,920 --> 00:57:25,760
that right which is exactly what it

1119
00:57:17,449 --> 00:57:26,929
should have done so not sure how else to

1120
00:57:25,760 --> 00:57:28,579
demonstrate the fact that the code

1121
00:57:26,929 --> 00:57:31,029
doesn't have that bug that you're

1122
00:57:28,579 --> 00:57:31,030
talking about

1123
00:57:44,949 --> 00:57:49,210
[Music]

1124
00:57:46,380 --> 00:57:51,539
anyone wanna tell me why this bug still

1125
00:57:49,210 --> 00:57:51,539
open

1126
00:58:04,400 --> 00:58:15,579
try allocating for 1024 1024 bytes okay

1127
00:58:16,420 --> 00:58:26,389
when do you want that just as the first

1128
00:58:19,400 --> 00:58:31,130
allocation or the second allocation just

1129
00:58:26,389 --> 00:58:33,318
out of curiosity I mean I guess I could

1130
00:58:31,130 --> 00:58:36,318
try it as either right so here's what

1131
00:58:33,318 --> 00:58:38,480
would happen if we do if we try to

1132
00:58:36,318 --> 00:58:42,820
allocate four megabytes as the second

1133
00:58:38,480 --> 00:58:45,889
allocation so we go ahead and do

1134
00:58:42,820 --> 00:58:45,889
[Music]

1135
00:58:55,699 --> 00:59:02,379
where's my there it is okay so here's us

1136
00:58:59,150 --> 00:59:04,400
doing that so in here we would want to

1137
00:59:02,380 --> 00:59:05,990
just do the same we already know what

1138
00:59:04,400 --> 00:59:09,380
happens when we do that and so here

1139
00:59:05,989 --> 00:59:11,389
we've got a size B which is this and I'm

1140
00:59:09,380 --> 00:59:13,940
not sure why this is a relevant test

1141
00:59:11,389 --> 00:59:16,879
case necessarily but you can see it

1142
00:59:13,940 --> 00:59:25,150
adjusts the size if it needs to here and

1143
00:59:16,880 --> 00:59:25,150
then you know allocates that block

1144
00:59:31,239 --> 00:59:41,209
exactly as you would expect

1145
00:59:33,108 --> 00:59:45,170
so nothing weird there as the first

1146
00:59:41,210 --> 00:59:48,318
allocation okay so what you want to do

1147
00:59:45,170 --> 00:59:55,639
is I assume retained this do you want

1148
00:59:48,318 --> 00:59:59,500
that or that and I'm not sure which one

1149
00:59:55,639 --> 01:00:10,029
you want so I'll just do this one first

1150
00:59:59,500 --> 01:00:13,730
right so yeah if we go ahead and

1151
01:00:10,030 --> 01:00:14,750
allocate that first we kind of know

1152
01:00:13,730 --> 01:00:16,159
what's gonna happen here because there's

1153
01:00:14,750 --> 01:00:20,710
no block so we're just gonna allocate

1154
01:00:16,159 --> 01:00:20,710
that much right it's very predictable

1155
01:00:20,920 --> 01:00:30,108
you know nothing nothing much goes on so

1156
01:00:26,630 --> 01:00:35,210
then in here where we get size B we're

1157
01:00:30,108 --> 01:00:36,949
gonna allocate the 33 but that's the the

1158
01:00:35,210 --> 01:00:41,929
block is presumably completely used

1159
01:00:36,949 --> 01:00:44,058
right so it would go into there no

1160
01:00:41,929 --> 01:00:48,068
matter what you allocated like as long

1161
01:00:44,059 --> 01:00:48,069
as it wasn't zero bytes you're done

1162
01:00:50,889 --> 01:00:55,598
so I totally

1163
01:00:55,960 --> 01:01:06,548
I am looking at the chat by the way but

1164
01:01:02,500 --> 01:01:07,690
no one's no one's saying anything in the

1165
01:01:06,548 --> 01:01:18,009
chat that's useful

1166
01:01:07,690 --> 01:01:31,510
are they here's the same test but with

1167
01:01:18,010 --> 01:01:37,750
the 32 so like I guess what I'll say

1168
01:01:31,510 --> 01:01:39,940
about this is I mean that is I don't

1169
01:01:37,750 --> 01:01:51,039
know what else I could possibly test

1170
01:01:39,940 --> 01:01:56,980
they're the you know like the right way

1171
01:01:51,039 --> 01:01:59,380
to phrase this I think would be this

1172
01:01:56,980 --> 01:02:01,420
seems like a premature bug report like

1173
01:01:59,380 --> 01:02:07,900
if you actually had a repro case for it

1174
01:02:01,420 --> 01:02:09,670
you should send the repro case so that

1175
01:02:07,900 --> 01:02:16,000
we can actually do it because this

1176
01:02:09,670 --> 01:02:21,099
definitely doesn't repro right and and

1177
01:02:16,000 --> 01:02:22,809
so you know it's okay to put bugs in

1178
01:02:21,099 --> 01:02:24,700
that's just like I think there might be

1179
01:02:22,809 --> 01:02:26,500
a bug here but this was like kind of an

1180
01:02:24,699 --> 01:02:28,659
oddly specific bug report it's

1181
01:02:26,500 --> 01:02:32,858
suggesting like you know if you're gonna

1182
01:02:28,659 --> 01:02:34,899
put that into a bug report um or that

1183
01:02:32,858 --> 01:02:37,210
you should have actually isolated the

1184
01:02:34,900 --> 01:02:41,289
bug right but that's not what happened

1185
01:02:37,210 --> 01:02:43,150
here this is this is not a bug and there

1186
01:02:41,289 --> 01:02:45,250
may be a bug in the code somewhere but

1187
01:02:43,150 --> 01:02:47,230
this ain't it right there isn't an off

1188
01:02:45,250 --> 01:02:51,778
by one error on that line at least not

1189
01:02:47,230 --> 01:02:56,608
the kind that's being talked about so

1190
01:02:51,778 --> 01:02:59,048
again you know I would say this kind of

1191
01:02:56,608 --> 01:03:01,019
is sort of a general thing that I would

1192
01:02:59,048 --> 01:03:03,159
say two things about it first of all

1193
01:03:01,019 --> 01:03:04,358
hopefully that was useful just to see

1194
01:03:03,159 --> 01:03:06,219
how you would go through something like

1195
01:03:04,358 --> 01:03:06,980
that to verify whether you've got a bug

1196
01:03:06,219 --> 01:03:09,759
of the kind

1197
01:03:06,980 --> 01:03:12,260
yes or not Thursdays if you want to

1198
01:03:09,760 --> 01:03:14,840
submit bug reports of something it's

1199
01:03:12,260 --> 01:03:16,400
usually a good idea to make sure that

1200
01:03:14,840 --> 01:03:19,990
you're actually submitting something

1201
01:03:16,400 --> 01:03:22,340
concrete that you know about right

1202
01:03:19,989 --> 01:03:29,449
because especially with something like

1203
01:03:22,340 --> 01:03:30,829
this it's like well you know it takes a

1204
01:03:29,449 --> 01:03:33,409
bunch of time for the person on the

1205
01:03:30,829 --> 01:03:35,599
other end to verify that your bug does

1206
01:03:33,409 --> 01:03:38,839
or doesn't exist since you're already

1207
01:03:35,599 --> 01:03:44,179
there to do that you should actually do

1208
01:03:38,840 --> 01:03:46,820
it right and try to get the thing in

1209
01:03:44,179 --> 01:03:51,049
there right but I don't know

1210
01:03:46,820 --> 01:03:53,570
yeah why is this still open I guess

1211
01:03:51,050 --> 01:03:58,700
would be my my larger question so this

1212
01:03:53,570 --> 01:04:01,450
should just get closed right I mean I

1213
01:03:58,699 --> 01:04:01,449
guess I'll close it myself

1214
01:04:17,440 --> 01:04:23,740
so yeah but hey you know it can't hurt

1215
01:04:21,280 --> 01:04:27,760
to double check with the that the

1216
01:04:23,739 --> 01:04:30,339
alligators working as planned as well

1217
01:04:27,760 --> 01:04:32,350
and you know one thing that I would

1218
01:04:30,340 --> 01:04:38,079
generally do on a project a little later

1219
01:04:32,349 --> 01:04:42,610
on not right now is I would probably

1220
01:04:38,079 --> 01:04:44,440
unit test my alligators you know and a

1221
01:04:42,610 --> 01:04:47,110
couple other like there's a few small

1222
01:04:44,440 --> 01:04:51,280
things inside a game typically that are

1223
01:04:47,110 --> 01:04:55,539
like fairly system II things that can be

1224
01:04:51,280 --> 01:04:56,800
unit tested and often times I will do

1225
01:04:55,539 --> 01:05:00,579
that so something like the alligator

1226
01:04:56,800 --> 01:05:02,350
where you you know we didn't have an off

1227
01:05:00,579 --> 01:05:05,049
by one error there but you know you

1228
01:05:02,349 --> 01:05:08,710
could see having such an off by one

1229
01:05:05,050 --> 01:05:13,660
error and the interesting thing about

1230
01:05:08,710 --> 01:05:15,690
having and off by one error is that you

1231
01:05:13,659 --> 01:05:18,368
know that's the kind of thing that a

1232
01:05:15,690 --> 01:05:20,590
carefully targeted unit tests can find

1233
01:05:18,369 --> 01:05:22,829
and so one thing that I will often do is

1234
01:05:20,590 --> 01:05:25,800
for something like an alligator you know

1235
01:05:22,829 --> 01:05:27,579
I'll put things in there that

1236
01:05:25,800 --> 01:05:31,390
intentionally probe those boundaries

1237
01:05:27,579 --> 01:05:33,309
much like the code I just wrote to check

1238
01:05:31,389 --> 01:05:45,129
for that bug and then just run that

1239
01:05:33,309 --> 01:05:47,858
right so you know like even though we

1240
01:05:45,130 --> 01:05:49,990
stress the alligator quite significantly

1241
01:05:47,858 --> 01:05:53,980
in handmade hero right now by calling it

1242
01:05:49,989 --> 01:05:56,259
all the time to allocate everything all

1243
01:05:53,980 --> 01:05:59,829
that really tells you is that in the

1244
01:05:56,260 --> 01:06:03,310
mine run of allocations you don't have

1245
01:05:59,829 --> 01:06:07,059
any bugs right but what it doesn't tell

1246
01:06:03,309 --> 01:06:10,599
you is in that like point oh one percent

1247
01:06:07,059 --> 01:06:13,059
of cases maybe you're just never hitting

1248
01:06:10,599 --> 01:06:15,250
them right because you never happen to

1249
01:06:13,059 --> 01:06:17,639
allocate anything quite that small or

1250
01:06:15,250 --> 01:06:20,710
quite that on aligned or quite that

1251
01:06:17,639 --> 01:06:28,179
something right

1252
01:06:20,710 --> 01:06:30,699
and so I think that's probably I think

1253
01:06:28,179 --> 01:06:32,769
that's probably a good argument right

1254
01:06:30,699 --> 01:06:34,750
for a place to put some unit testing in

1255
01:06:32,769 --> 01:06:37,000
because it's not hard unit test it's an

1256
01:06:34,750 --> 01:06:38,889
isolated system with well-defined inputs

1257
01:06:37,000 --> 01:06:40,690
and outputs so that's a pretty good

1258
01:06:38,889 --> 01:06:43,269
place to put that testing and it would

1259
01:06:40,690 --> 01:06:47,130
look a lot like an expanded version of

1260
01:06:43,269 --> 01:06:50,429
what we just did try to pick a lot of

1261
01:06:47,130 --> 01:06:52,990
allocations that will force it to do

1262
01:06:50,429 --> 01:06:55,419
things right on the edge of what its

1263
01:06:52,989 --> 01:06:58,149
defined to do to make sure that there

1264
01:06:55,420 --> 01:07:00,130
aren't places where it gets one wrong

1265
01:06:58,150 --> 01:07:01,630
oops it like thought it didn't need to

1266
01:07:00,130 --> 01:07:03,400
allocate but it did or thought it did

1267
01:07:01,630 --> 01:07:07,300
need allocate but it didn't and then we

1268
01:07:03,400 --> 01:07:12,160
check a few more things right where you

1269
01:07:07,300 --> 01:07:14,560
would kind of go from there now the

1270
01:07:12,159 --> 01:07:17,769
reason I haven't so you know I get asked

1271
01:07:14,559 --> 01:07:19,269
about unit tests a lot and so you might

1272
01:07:17,769 --> 01:07:20,530
ask well if I'm saying that I might

1273
01:07:19,269 --> 01:07:23,199
write a unit test or something like that

1274
01:07:20,530 --> 01:07:24,310
why not write it earlier and there's

1275
01:07:23,199 --> 01:07:27,759
actually a really good reason for that

1276
01:07:24,309 --> 01:07:30,119
too the reason for that is unit testing

1277
01:07:27,760 --> 01:07:33,280
wastes a lot of time and effort right

1278
01:07:30,119 --> 01:07:34,659
and so if your unit testing doesn't find

1279
01:07:33,280 --> 01:07:38,530
any bugs it was a complete waste of time

1280
01:07:34,659 --> 01:07:40,420
actually right and that's kind of an

1281
01:07:38,530 --> 01:07:43,240
important thing to internalize a lot of

1282
01:07:40,420 --> 01:07:45,039
people don't think about how much time

1283
01:07:43,239 --> 01:07:46,689
things take and whether those that time

1284
01:07:45,039 --> 01:07:50,440
be better spent elsewhere so what that

1285
01:07:46,690 --> 01:07:52,179
means is any time you spent make writing

1286
01:07:50,440 --> 01:07:54,940
unit tests is times you flush down the

1287
01:07:52,179 --> 01:07:56,230
toilet that's a given if it finds bugs

1288
01:07:54,940 --> 01:07:57,700
that would have taken a long time to

1289
01:07:56,230 --> 01:07:59,860
find or that would have slipped into the

1290
01:07:57,699 --> 01:08:02,469
project and caused catastrophic failures

1291
01:07:59,860 --> 01:08:04,809
on end-user machines it was well worth

1292
01:08:02,469 --> 01:08:07,419
it if it doesn't it wasn't worth

1293
01:08:04,809 --> 01:08:10,119
anything right and that's just the truth

1294
01:08:07,420 --> 01:08:13,809
there's no real way to get around that

1295
01:08:10,119 --> 01:08:15,579
hard fact what that means is even if you

1296
01:08:13,809 --> 01:08:17,470
are going to do unit testing because you

1297
01:08:15,579 --> 01:08:19,989
have specific systems you want to make

1298
01:08:17,470 --> 01:08:21,190
sure are more bulletproof because you

1299
01:08:19,989 --> 01:08:23,229
think there might be bugs in there and

1300
01:08:21,189 --> 01:08:26,169
you are afraid that they will get

1301
01:08:23,229 --> 01:08:28,750
released with those bugs you don't

1302
01:08:26,170 --> 01:08:30,340
necessarily just write unit tests you

1303
01:08:28,750 --> 01:08:33,189
still have to pick when you write them

1304
01:08:30,340 --> 01:08:34,220
and there's two things about that number

1305
01:08:33,189 --> 01:08:36,949
one

1306
01:08:34,220 --> 01:08:38,990
you want to wait as long as possible to

1307
01:08:36,949 --> 01:08:41,630
write the unit tests because since code

1308
01:08:38,989 --> 01:08:43,429
tends to evolve and change if you write

1309
01:08:41,630 --> 01:08:45,380
the unit test too early you'll end up

1310
01:08:43,430 --> 01:08:47,030
testing something that you then change

1311
01:08:45,380 --> 01:08:49,489
and have to rewrite the unit test for

1312
01:08:47,029 --> 01:08:54,460
very important so no wait as long as

1313
01:08:49,489 --> 01:08:58,250
possible and two you want to make sure

1314
01:08:54,460 --> 01:09:00,920
that you use the information you have

1315
01:08:58,250 --> 01:09:03,979
available to guide your unit tests if

1316
01:09:00,920 --> 01:09:06,260
you have systems that start showing bugs

1317
01:09:03,979 --> 01:09:08,869
that are hard to find that's a great

1318
01:09:06,260 --> 01:09:10,730
place to say maybe this is somewhere I

1319
01:09:08,869 --> 01:09:13,640
can use some unit testing because now

1320
01:09:10,729 --> 01:09:16,189
you have evidence that there are subtle

1321
01:09:13,640 --> 01:09:20,180
bugs occurring and rather than spend the

1322
01:09:16,189 --> 01:09:23,929
time to debug them raw maybe your tests

1323
01:09:20,180 --> 01:09:25,909
can help you right and so if we had had

1324
01:09:23,930 --> 01:09:28,840
some subtle bugs with the allocator

1325
01:09:25,909 --> 01:09:31,579
already I might have said at that point

1326
01:09:28,840 --> 01:09:33,710
let's start doing some testing because

1327
01:09:31,579 --> 01:09:35,569
by doing that testing we will make it

1328
01:09:33,710 --> 01:09:37,909
easier to get the bugs out because we'll

1329
01:09:35,569 --> 01:09:39,349
have concrete things we can step through

1330
01:09:37,909 --> 01:09:41,180
it's like oh we don't have to run the

1331
01:09:39,350 --> 01:09:42,740
game and wait for it to crash we can

1332
01:09:41,180 --> 01:09:45,200
like actually get it to crash like right

1333
01:09:42,739 --> 01:09:50,630
away and that's really important right

1334
01:09:45,199 --> 01:09:52,550
but also then I'm like okay I'm I'm sort

1335
01:09:50,630 --> 01:09:54,739
of getting dual duty out of that

1336
01:09:52,550 --> 01:09:57,440
debugging in addition to being able to

1337
01:09:54,739 --> 01:09:59,809
debug the bug I have which is unknown

1338
01:09:57,439 --> 01:10:01,129
problem so I know I'm not wasting my

1339
01:09:59,810 --> 01:10:03,289
time because I'm gonna have to find it

1340
01:10:01,130 --> 01:10:06,859
one way or the other I can also do

1341
01:10:03,289 --> 01:10:08,569
leverage that time to basically make a

1342
01:10:06,859 --> 01:10:10,250
unit test I could maybe run again in the

1343
01:10:08,569 --> 01:10:15,949
future to verify I haven't broken

1344
01:10:10,250 --> 01:10:18,350
anything right so again stay away from

1345
01:10:15,949 --> 01:10:20,949
dogmatic approaches to things like unit

1346
01:10:18,350 --> 01:10:24,950
testing and think more carefully about

1347
01:10:20,949 --> 01:10:28,699
what is giving you the most payback for

1348
01:10:24,949 --> 01:10:30,289
your time and that is a great way to

1349
01:10:28,699 --> 01:10:31,789
ensure that you won't spend a lot of

1350
01:10:30,289 --> 01:10:33,319
time reading unit tests on things that

1351
01:10:31,789 --> 01:10:35,899
actually never end up shipping because

1352
01:10:33,319 --> 01:10:37,549
they get deleted or rewritten or that

1353
01:10:35,899 --> 01:10:39,049
you don't end up time spending time

1354
01:10:37,550 --> 01:10:41,079
running unit tests on things that didn't

1355
01:10:39,050 --> 01:10:45,890
need to be attested in the first place

1356
01:10:41,079 --> 01:10:47,539
vallabha bla bla bla bla bla right so I

1357
01:10:45,890 --> 01:10:50,060
guess that's what I would say

1358
01:10:47,539 --> 01:10:54,560
uh and you really need to understand

1359
01:10:50,060 --> 01:10:56,390
that much like anything else there's you

1360
01:10:54,560 --> 01:10:58,250
know there's very few programming things

1361
01:10:56,390 --> 01:10:59,420
there's a couple probably but there's

1362
01:10:58,250 --> 01:11:02,720
very few programming things that aren't

1363
01:10:59,420 --> 01:11:03,859
useful sometimes and unit tests are just

1364
01:11:02,720 --> 01:11:05,659
like everything else they're useful

1365
01:11:03,859 --> 01:11:08,689
sometimes so the important thing to

1366
01:11:05,659 --> 01:11:10,909
remember is you have to understand what

1367
01:11:08,689 --> 01:11:13,729
they do you have to understand why you

1368
01:11:10,909 --> 01:11:15,800
are doing them and what the benefits are

1369
01:11:13,729 --> 01:11:18,019
so that you can make intelligent choices

1370
01:11:15,800 --> 01:11:20,119
about when they are employed and that

1371
01:11:18,020 --> 01:11:23,780
statement is pretty much true about

1372
01:11:20,119 --> 01:11:27,829
everything in programming and so you

1373
01:11:23,779 --> 01:11:29,750
kinda want to make sure that you

1374
01:11:27,829 --> 01:11:31,729
understand cognitively what's going on

1375
01:11:29,750 --> 01:11:35,029
there and hopefully that captures it all

1376
01:11:31,729 --> 01:11:37,669
up last thing I'll say is it sounded

1377
01:11:35,029 --> 01:11:39,259
like the bug report for the arena

1378
01:11:37,670 --> 01:11:41,029
alligator there was actually a bug

1379
01:11:39,260 --> 01:11:43,940
report from somebody trying to compile

1380
01:11:41,029 --> 01:11:45,920
it in a language that isn't C++ at that

1381
01:11:43,939 --> 01:11:47,000
point I would say just don't send bug

1382
01:11:45,920 --> 01:11:52,190
reports if you didn't bother to

1383
01:11:47,000 --> 01:11:53,810
reproduce them in C++ right like if you

1384
01:11:52,189 --> 01:11:55,129
haven't actually taken the time to

1385
01:11:53,810 --> 01:11:58,400
actually verify that the language that

1386
01:11:55,130 --> 01:11:59,690
we build in has the bug then you really

1387
01:11:58,399 --> 01:12:01,939
shouldn't be submitting a bug report

1388
01:11:59,689 --> 01:12:03,500
right because you have no idea it might

1389
01:12:01,939 --> 01:12:04,849
be something with that language or that

1390
01:12:03,500 --> 01:12:08,539
languages precedence rules or that

1391
01:12:04,850 --> 01:12:10,880
languages who knows what that's causing

1392
01:12:08,539 --> 01:12:13,550
the bug so it's really inappropriate to

1393
01:12:10,880 --> 01:12:16,130
submit a bug report unless you've

1394
01:12:13,550 --> 01:12:18,380
verified the bug in the language that

1395
01:12:16,130 --> 01:12:20,500
you're reporting the bug in right so I

1396
01:12:18,380 --> 01:12:23,720
would say that's probably a bare minimum

1397
01:12:20,500 --> 01:12:25,430
if you do wants the report a bug you're

1398
01:12:23,720 --> 01:12:27,680
welcome to do so but maybe mark at the

1399
01:12:25,430 --> 01:12:29,240
top for me this bug was never tested in

1400
01:12:27,680 --> 01:12:31,880
C++ so I can just move it to the end of

1401
01:12:29,239 --> 01:12:33,260
the list and never look at it until the

1402
01:12:31,880 --> 01:12:34,430
very end of the project right because

1403
01:12:33,260 --> 01:12:36,409
otherwise it wastes a bunch of time like

1404
01:12:34,430 --> 01:12:38,990
I did today not really getting anything

1405
01:12:36,409 --> 01:12:40,849
done and it's like okay had I known that

1406
01:12:38,989 --> 01:12:42,380
that bug was never actually reproduced

1407
01:12:40,850 --> 01:12:44,120
in the head made here a code base I

1408
01:12:42,380 --> 01:12:48,230
wouldn't have bothered looking at it

1409
01:12:44,119 --> 01:12:49,939
right not for a long time anyway okay so

1410
01:12:48,229 --> 01:12:53,179
I think we're good to go

1411
01:12:49,939 --> 01:12:55,219
now with those bugs that one got closed

1412
01:12:53,180 --> 01:12:58,010
out I don't know why I I should have

1413
01:12:55,220 --> 01:12:59,180
gone back to here though so I thought

1414
01:12:58,010 --> 01:13:01,219
think there's anything else we really

1415
01:12:59,180 --> 01:13:03,380
want to get right away this one

1416
01:13:01,219 --> 01:13:05,149
is a problem on Macs I think that people

1417
01:13:03,380 --> 01:13:07,639
were having so we do want to look at

1418
01:13:05,149 --> 01:13:10,578
this one eventually I it's probably

1419
01:13:07,639 --> 01:13:11,659
something we want to fix in general to

1420
01:13:10,578 --> 01:13:14,840
do with the way that we're allocating

1421
01:13:11,658 --> 01:13:16,939
frame buffers potentially so we do want

1422
01:13:14,840 --> 01:13:21,019
to get that eventually probably these

1423
01:13:16,939 --> 01:13:23,629
two both want to deal with that

1424
01:13:21,019 --> 01:13:25,010
I'm guessing also you know Martin's

1425
01:13:23,630 --> 01:13:26,690
reported a thing here that we should

1426
01:13:25,010 --> 01:13:28,699
definitely fix it's it's a dumb thing

1427
01:13:26,689 --> 01:13:31,129
we're doing so there are some things

1428
01:13:28,698 --> 01:13:32,478
here that probably want to get fixed

1429
01:13:31,130 --> 01:13:35,809
this one probably won't get fixed but

1430
01:13:32,479 --> 01:13:39,519
that's sort of a separate issue all

1431
01:13:35,809 --> 01:13:42,849
right so now we're down to trying to

1432
01:13:39,519 --> 01:13:46,630
actually work with the asset system here

1433
01:13:42,849 --> 01:13:51,590
and what we want to do is go ahead and

1434
01:13:46,630 --> 01:13:54,550
just work with it a little look for bugs

1435
01:13:51,590 --> 01:13:57,819
right because we probably got some and

1436
01:13:54,550 --> 01:14:00,409
we want to make sure that those bugs are

1437
01:13:57,819 --> 01:14:01,728
are tracked down and killed early so

1438
01:14:00,408 --> 01:14:03,618
we're not like dealing with a bunch of

1439
01:14:01,729 --> 01:14:05,719
stuff you can see that right now we

1440
01:14:03,618 --> 01:14:07,639
haven't really done anything in terms of

1441
01:14:05,719 --> 01:14:10,849
like saving out the heroes alignment

1442
01:14:07,639 --> 01:14:13,300
points to them for the most part so we

1443
01:14:10,849 --> 01:14:15,529
got like a bunch of work to do here and

1444
01:14:13,300 --> 01:14:17,389
then we have to also put in alignment

1445
01:14:15,529 --> 01:14:19,130
points for everybody else now it turns

1446
01:14:17,389 --> 01:14:20,659
out our art assets were wrong for the

1447
01:14:19,130 --> 01:14:22,849
hero so that's something that has to be

1448
01:14:20,658 --> 01:14:25,578
repaired and will repair that a little

1449
01:14:22,849 --> 01:14:27,860
later so the head face direction his is

1450
01:14:25,578 --> 01:14:29,929
backwards oh well

1451
01:14:27,859 --> 01:14:32,420
so we'll fix that in the art assets a

1452
01:14:29,929 --> 01:14:36,380
little later and and make that change as

1453
01:14:32,420 --> 01:14:40,158
well but everything else we should be

1454
01:14:36,380 --> 01:14:41,420
able to work with a little bit more so

1455
01:14:40,158 --> 01:14:44,328
let's take a look at what's going on

1456
01:14:41,420 --> 01:14:47,179
here let's suppose I open up the editor

1457
01:14:44,328 --> 01:14:48,799
here and I just want to start playing

1458
01:14:47,179 --> 01:14:51,618
around this a little and see you know if

1459
01:14:48,800 --> 01:14:53,779
it works at all basically and so if you

1460
01:14:51,618 --> 01:14:54,380
take a look at at the alignment points

1461
01:14:53,779 --> 01:14:57,559
here

1462
01:14:54,380 --> 01:15:00,529
I'm just looking through yeah this looks

1463
01:14:57,559 --> 01:15:01,579
all like what I would expect um just

1464
01:15:00,529 --> 01:15:03,529
looking through the alignment points

1465
01:15:01,578 --> 01:15:08,689
here right you can see that we've kind

1466
01:15:03,529 --> 01:15:12,319
of got one here for the for the body and

1467
01:15:08,689 --> 01:15:13,969
then one for attaching the head and what

1468
01:15:12,319 --> 01:15:15,469
I was kind of saying before right you

1469
01:15:13,969 --> 01:15:19,550
can see the way this work

1470
01:15:15,469 --> 01:15:23,090
I would like a little bit more ability

1471
01:15:19,550 --> 01:15:25,039
to sort of turn these on and off right

1472
01:15:23,090 --> 01:15:27,199
now what I have to do like let's say I

1473
01:15:25,039 --> 01:15:30,679
wanted to set up this default alignment

1474
01:15:27,198 --> 01:15:32,509
for the body you can see that I can like

1475
01:15:30,679 --> 01:15:34,158
edit it here just fine but it's really

1476
01:15:32,510 --> 01:15:35,690
hard to see whether I'm putting it in

1477
01:15:34,158 --> 01:15:39,289
the right place or not because the heads

1478
01:15:35,689 --> 01:15:40,759
in the way now I can go switch this to

1479
01:15:39,289 --> 01:15:44,630
something else temporarily

1480
01:15:40,760 --> 01:15:46,489
and then place all the markers that I

1481
01:15:44,630 --> 01:15:48,460
think should be placed and where they

1482
01:15:46,488 --> 01:15:50,839
should be placed right like I don't know

1483
01:15:48,460 --> 01:15:52,670
exactly where this should be

1484
01:15:50,840 --> 01:15:56,480
but it's something like that probably

1485
01:15:52,670 --> 01:15:58,429
right and then switch this back but you

1486
01:15:56,479 --> 01:16:02,539
can kind of see how that's pretty janky

1487
01:15:58,429 --> 01:16:05,690
don't really like it and so I feel like

1488
01:16:02,539 --> 01:16:08,868
I need to have maybe maybe I want this

1489
01:16:05,689 --> 01:16:11,118
thing that I'm doing here if you turn

1490
01:16:08,868 --> 01:16:15,710
off an alignment point maybe it stops

1491
01:16:11,118 --> 01:16:18,559
functioning entirely so that we can just

1492
01:16:15,710 --> 01:16:21,408
turn it off temporarily adjust the thing

1493
01:16:18,560 --> 01:16:23,179
and then turn it back on right that

1494
01:16:21,408 --> 01:16:26,509
seems a little better to me and so I

1495
01:16:23,179 --> 01:16:29,868
might go make that change the other

1496
01:16:26,510 --> 01:16:32,659
change I think we need to make is now

1497
01:16:29,868 --> 01:16:35,899
seems like the right time to go into the

1498
01:16:32,658 --> 01:16:39,289
renderer and put our Z bias stuff back

1499
01:16:35,899 --> 01:16:42,039
in because as you can see when we

1500
01:16:39,289 --> 01:16:45,019
actually put sprites on here they will

1501
01:16:42,039 --> 01:16:48,859
interpenetrate the ground and the reason

1502
01:16:45,020 --> 01:16:50,239
for that is we're aligning the tile that

1503
01:16:48,859 --> 01:16:52,509
we're well I shouldn't say tile

1504
01:16:50,238 --> 01:16:58,189
billboards a more correct term for it

1505
01:16:52,510 --> 01:17:04,400
we're aligning that billboard hmm such

1506
01:16:58,189 --> 01:17:07,428
that we we need it to put the highlight

1507
01:17:04,399 --> 01:17:11,089
point at a specific lineup spot in three

1508
01:17:07,429 --> 01:17:14,090
dimensions but in order to do that it

1509
01:17:11,090 --> 01:17:18,199
may be placed such that the ground right

1510
01:17:14,090 --> 01:17:21,739
is it sinks through the ground so we

1511
01:17:18,198 --> 01:17:26,839
want to do is create the correct bias

1512
01:17:21,738 --> 01:17:28,849
information in z2 or the correct

1513
01:17:26,840 --> 01:17:31,310
placement of the quad I mean

1514
01:17:28,850 --> 01:17:32,690
whatever we want to do right we need to

1515
01:17:31,310 --> 01:17:35,900
make sure that we're doing that

1516
01:17:32,689 --> 01:17:38,149
correctly and we put that off until now

1517
01:17:35,899 --> 01:17:41,089
because we wanted to have our actual

1518
01:17:38,149 --> 01:17:42,920
assets correct first but you can see

1519
01:17:41,090 --> 01:17:45,140
that that's a problem right and there's

1520
01:17:42,920 --> 01:17:48,470
two problems there the first one is that

1521
01:17:45,140 --> 01:17:52,010
interpenetration problem and we'd like

1522
01:17:48,470 --> 01:17:53,840
to get that fixed the other one is kind

1523
01:17:52,010 --> 01:17:57,020
of a related problem which is that if I

1524
01:17:53,840 --> 01:17:59,900
hop in a doorway you can see that I clip

1525
01:17:57,020 --> 01:18:04,360
through the doorway as well so figuring

1526
01:17:59,899 --> 01:18:09,409
out how to get that Z in there correctly

1527
01:18:04,359 --> 01:18:13,579
that's something we really want to get

1528
01:18:09,409 --> 01:18:17,899
get right and one of the things about

1529
01:18:13,579 --> 01:18:19,489
that that occurs to me is I think that

1530
01:18:17,899 --> 01:18:23,029
I've kind of been approaching that

1531
01:18:19,489 --> 01:18:26,420
problem wrong sort of this entire time

1532
01:18:23,029 --> 01:18:27,979
to a certain extent right because I

1533
01:18:26,420 --> 01:18:33,949
think it's actually something that we

1534
01:18:27,979 --> 01:18:38,859
can sort of solve correctly if we really

1535
01:18:33,949 --> 01:18:42,909
work out the math precisely right and

1536
01:18:38,859 --> 01:18:47,000
the reason I say that is because I think

1537
01:18:42,909 --> 01:18:49,849
99% of the time right what I want to

1538
01:18:47,000 --> 01:18:55,210
have happen is I want to have the

1539
01:18:49,850 --> 01:18:59,900
placement of the sprite essentially be a

1540
01:18:55,210 --> 01:19:04,699
card in 3d Z wires such that no matter

1541
01:18:59,899 --> 01:19:07,039
where I put this head the Z value for

1542
01:19:04,699 --> 01:19:10,130
the base of the sprite will be the Z

1543
01:19:07,039 --> 01:19:13,789
value where the base of the position was

1544
01:19:10,130 --> 01:19:15,590
and then the top of the sprite will be

1545
01:19:13,789 --> 01:19:17,689
the Z value that is wherever it should

1546
01:19:15,590 --> 01:19:21,409
have been for its height right and

1547
01:19:17,689 --> 01:19:24,139
that's why I want to have happen so we

1548
01:19:21,409 --> 01:19:25,789
should be able to solve for that and I

1549
01:19:24,140 --> 01:19:27,200
think I said we were gonna do something

1550
01:19:25,789 --> 01:19:30,920
like that like let's do something like

1551
01:19:27,199 --> 01:19:32,659
that so I kind of knew that was coming

1552
01:19:30,920 --> 01:19:34,970
down the pipe but we haven't explicitly

1553
01:19:32,659 --> 01:19:37,189
formulated it and we should and that

1554
01:19:34,970 --> 01:19:39,940
will I think get us to the point where

1555
01:19:37,189 --> 01:19:42,649
we can finally see like a robust

1556
01:19:39,939 --> 01:19:46,129
completely 3d integrated

1557
01:19:42,649 --> 01:19:48,489
2d and 3d thing which is pretty hard to

1558
01:19:46,130 --> 01:19:51,590
come by not many games managed to do it

1559
01:19:48,489 --> 01:19:54,289
to the level that we want it done here

1560
01:19:51,590 --> 01:19:56,000
and we've done a lot of things that get

1561
01:19:54,289 --> 01:19:58,550
it pretty close but that's the one we

1562
01:19:56,000 --> 01:20:00,920
haven't quite finished yet and I think

1563
01:19:58,550 --> 01:20:02,570
we should try to do that now because

1564
01:20:00,920 --> 01:20:05,050
instead of we don't want to start

1565
01:20:02,569 --> 01:20:07,759
working with our art assets and baked

1566
01:20:05,050 --> 01:20:12,039
things into them that are wrong because

1567
01:20:07,760 --> 01:20:14,239
we didn't do this part of the process

1568
01:20:12,039 --> 01:20:16,189
all right so I think we should do that

1569
01:20:14,239 --> 01:20:17,090
today my only question is do we have

1570
01:20:16,189 --> 01:20:19,789
enough time to do it

1571
01:20:17,090 --> 01:20:22,699
looking at the time I think we have

1572
01:20:19,789 --> 01:20:29,479
about 40 minutes so I think that's at

1573
01:20:22,699 --> 01:20:30,619
least a good time to to maybe get

1574
01:20:29,479 --> 01:20:35,149
started on it

1575
01:20:30,619 --> 01:20:39,649
right all right so let's take a look at

1576
01:20:35,149 --> 01:20:48,349
how we want this to work so if we go

1577
01:20:39,649 --> 01:20:51,409
into if we go into handmade the renderer

1578
01:20:48,350 --> 01:20:58,400
right and we look at the Z bias shader

1579
01:20:51,409 --> 01:21:01,309
which ships which apparently is actually

1580
01:20:58,399 --> 01:21:04,159
in here okay I want to look at the Z by

1581
01:21:01,310 --> 01:21:07,520
a shader this is the OpenGL part so

1582
01:21:04,159 --> 01:21:09,380
actually we want here right yeah and so

1583
01:21:07,520 --> 01:21:10,820
if we take a look at the Z bias I guess

1584
01:21:09,380 --> 01:21:13,159
I can just jump to it like this don't

1585
01:21:10,819 --> 01:21:16,579
know why I'm doing that if you look at

1586
01:21:13,159 --> 01:21:19,039
the Z by a shader what you can see here

1587
01:21:16,579 --> 01:21:21,319
is there's this modified Z thing and

1588
01:21:19,039 --> 01:21:24,890
it's basically saying look whatever the

1589
01:21:21,319 --> 01:21:28,279
in vertex you know is we got to do some

1590
01:21:24,890 --> 01:21:30,619
some nonsense here and produce a new Z

1591
01:21:28,279 --> 01:21:33,859
right and so what we're going to do is

1592
01:21:30,619 --> 01:21:35,599
produce a Z vertex that has this bias

1593
01:21:33,859 --> 01:21:41,569
baked into it so the Z value that we're

1594
01:21:35,600 --> 01:21:45,440
actually passing gets changed right now

1595
01:21:41,569 --> 01:21:47,869
the problem with that is that I'm not

1596
01:21:45,439 --> 01:21:54,829
sure that's gonna actually be as

1597
01:21:47,869 --> 01:21:58,849
expressive as we want it to be right it

1598
01:21:54,829 --> 01:22:01,970
might be but it might actually just be a

1599
01:21:58,850 --> 01:22:05,260
pain in the butt because really all

1600
01:22:01,970 --> 01:22:08,990
we're trying to do here is specify a

1601
01:22:05,260 --> 01:22:11,210
transform on these points that puts them

1602
01:22:08,989 --> 01:22:15,349
such that they're effective Z values

1603
01:22:11,210 --> 01:22:23,470
fall within specific range for the Z

1604
01:22:15,350 --> 01:22:25,910
buffer right and so I just don't know I

1605
01:22:23,470 --> 01:22:29,869
just don't know if that wants to be

1606
01:22:25,909 --> 01:22:34,750
encoded the way that's being coded here

1607
01:22:29,869 --> 01:22:37,369
right that's that's the the touchy part

1608
01:22:34,750 --> 01:22:39,170
okay so I'm gonna go to the blackboard

1609
01:22:37,369 --> 01:22:42,739
and try to explain what I'm thinking out

1610
01:22:39,170 --> 01:22:48,710
loud and hopefully that will give you

1611
01:22:42,739 --> 01:22:53,989
some perspective on exactly why we there

1612
01:22:48,710 --> 01:22:55,430
we go on exactly why we need to consider

1613
01:22:53,989 --> 01:23:01,359
the encoding

1614
01:22:55,430 --> 01:23:01,360
wait why does that say Dave 5:18

1615
01:23:03,618 --> 01:23:18,920
supposed to say Dave 5:19 right I mean I

1616
01:23:14,899 --> 01:23:21,138
wrote it right there yeah I don't know I

1617
01:23:18,920 --> 01:23:22,368
maybe I hit a hot key by accident I

1618
01:23:21,139 --> 01:23:25,159
don't know what I did

1619
01:23:22,368 --> 01:23:28,189
sorry about that it's safe 519 right

1620
01:23:25,158 --> 01:23:31,578
great folks I mean it just is I don't

1621
01:23:28,189 --> 01:23:34,428
know why that said that sorry about that

1622
01:23:31,578 --> 01:23:40,549
I hope that doesn't confuse anyone later

1623
01:23:34,429 --> 01:23:43,368
on anyway so Dave 5:19 so what I was

1624
01:23:40,550 --> 01:23:46,940
trying to say here is look what's gonna

1625
01:23:43,368 --> 01:23:50,118
happen is we're gonna have some ground

1626
01:23:46,939 --> 01:23:53,089
point here and we're going to be putting

1627
01:23:50,118 --> 01:23:55,429
a sprite card in here but that sprite

1628
01:23:53,090 --> 01:23:57,949
card is gonna be set up in a way that

1629
01:23:55,429 --> 01:23:59,690
really doesn't necessarily correspond to

1630
01:23:57,948 --> 01:24:02,288
what we want to see values to be why

1631
01:23:59,689 --> 01:24:05,988
because what we want to do is take

1632
01:24:02,288 --> 01:24:08,448
essentially a slot right this is

1633
01:24:05,988 --> 01:24:11,988
basically like a little plate of virtual

1634
01:24:08,448 --> 01:24:17,058
plate and what we want to do is say this

1635
01:24:11,988 --> 01:24:19,339
Z set right so the Z range from here to

1636
01:24:17,059 --> 01:24:23,090
here right this would be the maximum

1637
01:24:19,340 --> 01:24:24,889
value well shouldn't say maximum value

1638
01:24:23,090 --> 01:24:26,300
because that's a little ambiguous when

1639
01:24:24,889 --> 01:24:28,340
you talk about Z because depends on how

1640
01:24:26,300 --> 01:24:31,038
you want to do your Z buffer on stuff so

1641
01:24:28,340 --> 01:24:34,699
let's say this is the closest to the

1642
01:24:31,038 --> 01:24:39,050
camera and this is the farthest from the

1643
01:24:34,698 --> 01:24:41,448
camera right so if you take a look at

1644
01:24:39,050 --> 01:24:42,889
what's happening here no matter what we

1645
01:24:41,448 --> 01:24:44,509
end up a lighting our sprite to be

1646
01:24:42,889 --> 01:24:46,038
because we may end up having our sprite

1647
01:24:44,510 --> 01:24:52,250
you know look like that or something

1648
01:24:46,038 --> 01:24:55,189
right its lowest point we still want to

1649
01:24:52,250 --> 01:24:57,408
be sorted as if it was here because

1650
01:24:55,189 --> 01:25:00,948
that's just how we're saying the sorting

1651
01:24:57,408 --> 01:25:05,719
works you get placed as if you're at

1652
01:25:00,948 --> 01:25:11,649
this point in space tough right so we

1653
01:25:05,719 --> 01:25:14,809
want the Z value to be that 4 here right

1654
01:25:11,649 --> 01:25:16,129
and more specifically the way you might

1655
01:25:14,809 --> 01:25:20,989
think about it you

1656
01:25:16,130 --> 01:25:24,940
is we want this point to behave as if it

1657
01:25:20,988 --> 01:25:29,479
were sorted into this location Z wise

1658
01:25:24,939 --> 01:25:31,849
right and then furthermore we want this

1659
01:25:29,479 --> 01:25:35,779
point to behave as if it were sorted

1660
01:25:31,850 --> 01:25:37,730
into this location Z wise and the fact

1661
01:25:35,779 --> 01:25:40,069
that they're not even remotely there

1662
01:25:37,729 --> 01:25:42,379
doesn't actually matter to us because

1663
01:25:40,069 --> 01:25:46,250
what we're trying to do is falsely

1664
01:25:42,380 --> 01:25:48,440
present this sprite as if it was in that

1665
01:25:46,250 --> 01:25:53,840
location right I mean that's what we're

1666
01:25:48,439 --> 01:25:58,638
fundamentally trying to do so the

1667
01:25:53,840 --> 01:26:01,400
problem that we have is we'd like to

1668
01:25:58,639 --> 01:26:03,859
express that directly but obviously each

1669
01:26:01,399 --> 01:26:07,670
one of these quads kind of needs some

1670
01:26:03,859 --> 01:26:09,799
way to encode this and we don't really

1671
01:26:07,670 --> 01:26:11,690
want to spend a ton of space in coding

1672
01:26:09,800 --> 01:26:14,090
it because the more space we spend in

1673
01:26:11,689 --> 01:26:16,669
coding it the more expensive it's going

1674
01:26:14,090 --> 01:26:21,739
to be right so when we actually send

1675
01:26:16,670 --> 01:26:23,750
down triangles we know that we're going

1676
01:26:21,738 --> 01:26:26,089
to be interpolating those values when we

1677
01:26:23,750 --> 01:26:32,689
actually send down triangles we're just

1678
01:26:26,090 --> 01:26:38,810
gonna have vertices that have X Y Z W on

1679
01:26:32,689 --> 01:26:41,479
them and that's all we get we could if

1680
01:26:38,810 --> 01:26:44,389
we wanted to make our pipeline more

1681
01:26:41,479 --> 01:26:46,669
outrageous certainly do something more

1682
01:26:44,389 --> 01:26:50,900
complicated than this we could have a

1683
01:26:46,670 --> 01:26:52,819
shader that actually takes some kind of

1684
01:26:50,899 --> 01:26:54,948
other primitive thing like here's the

1685
01:26:52,819 --> 01:26:57,289
plane I want to use for sorting and then

1686
01:26:54,948 --> 01:27:00,049
it could output that as additional

1687
01:26:57,289 --> 01:27:01,010
things to the pixel shader as necessary

1688
01:27:00,050 --> 01:27:04,820
and all these other sorts of things

1689
01:27:01,010 --> 01:27:07,280
right so we certainly could get more

1690
01:27:04,819 --> 01:27:09,679
complicated than this but I want to try

1691
01:27:07,279 --> 01:27:11,899
and keep it simpler if possible because

1692
01:27:09,679 --> 01:27:13,880
every step we take in that direction

1693
01:27:11,899 --> 01:27:15,619
again makes it more and more unlikely

1694
01:27:13,880 --> 01:27:18,139
that you can port this thing to various

1695
01:27:15,619 --> 01:27:20,000
platforms it makes it require harder and

1696
01:27:18,139 --> 01:27:23,319
harder core hardware and so we kind of

1697
01:27:20,000 --> 01:27:25,520
want to manage what we're mandating

1698
01:27:23,319 --> 01:27:29,960
because you know if you wanted to turn

1699
01:27:25,520 --> 01:27:32,240
off stuff like our depth P

1700
01:27:29,960 --> 01:27:35,659
you could just do so and get worse

1701
01:27:32,239 --> 01:27:37,579
anti-aliasing right or something you

1702
01:27:35,659 --> 01:27:40,130
know be sparkly or something but you

1703
01:27:37,579 --> 01:27:43,159
could still run it right whereas if we

1704
01:27:40,130 --> 01:27:46,720
do some really crazy stuff that makes it

1705
01:27:43,159 --> 01:27:50,479
very hard to do it without a fancy

1706
01:27:46,720 --> 01:27:52,130
graphics card scaling it down in the

1707
01:27:50,479 --> 01:27:55,489
future might be very difficult and again

1708
01:27:52,130 --> 01:27:57,650
it's an educational project not a game

1709
01:27:55,489 --> 01:27:58,969
design to just push the limits and who

1710
01:27:57,649 --> 01:28:00,109
cares if anyone understands how it works

1711
01:27:58,970 --> 01:28:01,610
and who cares we can run it on the

1712
01:28:00,109 --> 01:28:04,699
Raspberry Pi someday and who cares and

1713
01:28:01,609 --> 01:28:08,630
who cares who cares right so again we

1714
01:28:04,699 --> 01:28:10,309
want to sort of say look let's just have

1715
01:28:08,630 --> 01:28:12,680
some consideration for what might go on

1716
01:28:10,310 --> 01:28:15,500
there and see if we can do something

1717
01:28:12,680 --> 01:28:18,380
with just that W parameter you know can

1718
01:28:15,500 --> 01:28:25,039
we just make sure or can we try to make

1719
01:28:18,380 --> 01:28:28,010
that be enough right okay so if we look

1720
01:28:25,039 --> 01:28:30,170
at how the Z bias is actually working

1721
01:28:28,010 --> 01:28:32,989
then what's going on here is we're

1722
01:28:30,170 --> 01:28:37,489
taking the actual transform of the

1723
01:28:32,989 --> 01:28:40,809
object and really all we're doing is

1724
01:28:37,489 --> 01:28:46,609
saying well we're going to take the

1725
01:28:40,810 --> 01:28:48,890
zooming we're going to go ahead and fake

1726
01:28:46,609 --> 01:28:50,750
the z-buffer by doing two transforms the

1727
01:28:48,890 --> 01:28:52,880
first transform is gonna be the actual

1728
01:28:50,750 --> 01:28:55,279
vertices that we've got the second

1729
01:28:52,880 --> 01:28:58,940
transform is going to be the vertices

1730
01:28:55,279 --> 01:29:00,349
that we had but with a value added to

1731
01:28:58,939 --> 01:29:02,479
their Z so they're going to be

1732
01:29:00,350 --> 01:29:04,640
artificially moved closer or further

1733
01:29:02,479 --> 01:29:07,099
away if you want to they're gonna

1734
01:29:04,640 --> 01:29:11,950
artificially be moved closer to the

1735
01:29:07,100 --> 01:29:15,079
camera and then we're gonna take that

1736
01:29:11,949 --> 01:29:18,109
modified Z and that's the Z that we're

1737
01:29:15,079 --> 01:29:24,170
actually going to that we're actually

1738
01:29:18,109 --> 01:29:26,119
going to pass down to the renderer for

1739
01:29:24,170 --> 01:29:28,640
z-buffering right so when it actually

1740
01:29:26,119 --> 01:29:31,399
does the depth buffer check it's going

1741
01:29:28,640 --> 01:29:33,710
to use that modified version instead of

1742
01:29:31,399 --> 01:29:36,699
the version that's actually

1743
01:29:33,710 --> 01:29:39,699
representative of where the pixels are

1744
01:29:36,699 --> 01:29:39,699
okay

1745
01:29:41,668 --> 01:29:46,738
and so this gives us an easy way to

1746
01:29:43,578 --> 01:29:49,109
change what the Z value should be of a

1747
01:29:46,738 --> 01:29:50,908
surface but it also does make it a

1748
01:29:49,109 --> 01:29:53,158
little bit trickier for us to figure out

1749
01:29:50,908 --> 01:29:55,888
how we would create the circumstance

1750
01:29:53,158 --> 01:29:58,498
that we actually wanted to create it's

1751
01:29:55,889 --> 01:30:00,868
especially weird because of the fact

1752
01:29:58,498 --> 01:30:04,408
that if you think about how the game is

1753
01:30:00,868 --> 01:30:07,469
currently presenting the information

1754
01:30:04,408 --> 01:30:11,069
that it's trying to present we are

1755
01:30:07,469 --> 01:30:15,599
actually adjusting in a sense the

1756
01:30:11,069 --> 01:30:17,938
location in in Y all most of the of the

1757
01:30:15,599 --> 01:30:19,650
sprite right now it may be a little bit

1758
01:30:17,939 --> 01:30:21,418
confusing what I'm saying when I'm

1759
01:30:19,649 --> 01:30:23,368
saying that what I mean to say is if

1760
01:30:21,418 --> 01:30:25,408
this is the floor tile again that we're

1761
01:30:23,368 --> 01:30:30,208
looking at right so you know here's a

1762
01:30:25,408 --> 01:30:31,978
wall or something if I'm trying to place

1763
01:30:30,208 --> 01:30:33,630
someone in the center of the tile then

1764
01:30:31,979 --> 01:30:36,599
the problem that we have is you know the

1765
01:30:33,630 --> 01:30:39,779
artwork is drawn to sort of have some

1766
01:30:36,599 --> 01:30:43,498
volume to it right so if this is you

1767
01:30:39,779 --> 01:30:45,569
know the hero then this position here

1768
01:30:43,498 --> 01:30:49,769
they are actually you know sort of

1769
01:30:45,569 --> 01:30:52,380
circum circle er region around there

1770
01:30:49,769 --> 01:30:54,389
right so that if you look at where this

1771
01:30:52,380 --> 01:30:57,300
would be if it was actually a 3d object

1772
01:30:54,389 --> 01:31:01,498
meaning instead of having hand-drawn art

1773
01:30:57,300 --> 01:31:05,909
we have 3d you know assets that actually

1774
01:31:01,498 --> 01:31:07,918
got rendered well the position of this

1775
01:31:05,908 --> 01:31:12,259
bottom most part that we're rendering

1776
01:31:07,918 --> 01:31:16,918
here so this part right here right

1777
01:31:12,260 --> 01:31:21,418
actually isn't displaced in Z in the

1778
01:31:16,918 --> 01:31:24,300
world it's displaced in Y right it's

1779
01:31:21,418 --> 01:31:26,429
moved in Y this direction so that it

1780
01:31:24,300 --> 01:31:33,529
transforms to there instead of here

1781
01:31:26,429 --> 01:31:36,029
right and that's why it doesn't clip

1782
01:31:33,529 --> 01:31:38,099
when it is actually moved out it's

1783
01:31:36,029 --> 01:31:41,179
because it's actually also moved closer

1784
01:31:38,099 --> 01:31:47,369
instead of just you know being moved

1785
01:31:41,179 --> 01:31:51,269
down which is what's happening now and

1786
01:31:47,368 --> 01:31:53,009
so you know that is the operation we

1787
01:31:51,269 --> 01:31:55,199
would actually be trying to mimic

1788
01:31:53,010 --> 01:31:58,789
is that moving it out in Y and then

1789
01:31:55,199 --> 01:32:05,569
producing whatever that Z value would be

1790
01:31:58,789 --> 01:32:11,369
now I guess there's a small part of me

1791
01:32:05,569 --> 01:32:14,460
that asks the question should we just be

1792
01:32:11,369 --> 01:32:20,489
displacing the things in Y to get there

1793
01:32:14,460 --> 01:32:24,600
Z and then that's what we do and I don't

1794
01:32:20,489 --> 01:32:27,708
really know the answer to that question

1795
01:32:24,600 --> 01:32:27,709
[Music]

1796
01:32:34,429 --> 01:32:40,319
but I guess what I would say is I think

1797
01:32:36,779 --> 01:32:42,898
it's not exactly clear that that's what

1798
01:32:40,319 --> 01:32:44,549
you want because if you actually do that

1799
01:32:42,899 --> 01:32:46,109
you are moving the actual physical

1800
01:32:44,550 --> 01:32:50,699
location of the thing which would change

1801
01:32:46,109 --> 01:32:53,189
a lot of other behaviors that wouldn't

1802
01:32:50,698 --> 01:32:54,388
work so I think you still need to draw

1803
01:32:53,189 --> 01:32:57,570
it there and you just need to come with

1804
01:32:54,389 --> 01:32:59,699
a Z bias value that is the Z that you

1805
01:32:57,569 --> 01:33:05,878
would have used had you just placed it

1806
01:32:59,698 --> 01:33:08,428
to that location right and so again I'm

1807
01:33:05,878 --> 01:33:10,760
not sure exactly what that value wants

1808
01:33:08,429 --> 01:33:10,760
to be

1809
01:33:23,949 --> 01:33:33,409
and I'm as a result not quite sure how

1810
01:33:30,409 --> 01:33:35,779
we would encode it so if you think about

1811
01:33:33,409 --> 01:33:37,849
some ways we would have encoded it if

1812
01:33:35,779 --> 01:33:40,550
you just went pie-in-the-sky

1813
01:33:37,850 --> 01:33:42,890
if you imagine looking at this thing

1814
01:33:40,550 --> 01:33:45,860
from the front so let's suppose we're

1815
01:33:42,890 --> 01:33:50,710
just looking at it like this so you know

1816
01:33:45,859 --> 01:33:55,369
this is the ground this is the wall

1817
01:33:50,710 --> 01:33:57,140
right and so if we look at this here

1818
01:33:55,369 --> 01:34:03,470
you know let's say we're standing on

1819
01:33:57,140 --> 01:34:05,510
that right and so I would normally draw

1820
01:34:03,470 --> 01:34:07,400
a sprite card that just looked like this

1821
01:34:05,510 --> 01:34:09,350
but of course what we actually end up

1822
01:34:07,399 --> 01:34:12,949
doing is we draw a sprite card that

1823
01:34:09,350 --> 01:34:14,750
looks more like this right we just place

1824
01:34:12,949 --> 01:34:16,550
it so that it's on an angle so that it

1825
01:34:14,750 --> 01:34:19,729
looks more facing to the camera than it

1826
01:34:16,550 --> 01:34:21,710
really should be and then we also drop

1827
01:34:19,729 --> 01:34:23,179
down a little bit right so that it

1828
01:34:21,710 --> 01:34:25,010
appears a little bit closer and maybe

1829
01:34:23,180 --> 01:34:29,360
that's a little bit pronounced compared

1830
01:34:25,010 --> 01:34:31,369
to where it would be right but suffice

1831
01:34:29,359 --> 01:34:33,589
to say the Z bias necessary to make this

1832
01:34:31,369 --> 01:34:36,349
not interpenetrate the ground is

1833
01:34:33,590 --> 01:34:39,860
precisely the Z bias that's given by

1834
01:34:36,350 --> 01:34:42,620
this interpenetration depth now it just

1835
01:34:39,859 --> 01:34:44,779
so happens that it's pretty handy how

1836
01:34:42,619 --> 01:34:47,840
this would get computed it's not a hard

1837
01:34:44,779 --> 01:34:50,149
thing to compute really what you would

1838
01:34:47,840 --> 01:34:52,190
do is you just say well if I wanted to

1839
01:34:50,149 --> 01:34:53,689
know the Z bias of this transformation I

1840
01:34:52,189 --> 01:34:55,489
could just recognize the fact that this

1841
01:34:53,689 --> 01:34:57,169
is a right triangle I know how far I

1842
01:34:55,489 --> 01:34:59,569
just placed it down from here because

1843
01:34:57,170 --> 01:35:01,489
that's exactly the alignment points y

1844
01:34:59,569 --> 01:35:03,049
offset from the bottom of the sprite so

1845
01:35:01,489 --> 01:35:08,449
that's pretty straightforward right this

1846
01:35:03,050 --> 01:35:11,690
is just that Y offset here right and so

1847
01:35:08,449 --> 01:35:16,750
if I want to I just need to be able to

1848
01:35:11,689 --> 01:35:16,750
figure out right if this is the sine of

1849
01:35:16,989 --> 01:35:23,779
theta here which it is then this is the

1850
01:35:20,930 --> 01:35:29,950
cosine of theta here right

1851
01:35:23,779 --> 01:35:31,880
proportionally so Y offset cosine theta

1852
01:35:29,949 --> 01:35:35,119
well actually that's not quite true

1853
01:35:31,880 --> 01:35:36,850
sorry in order to figure out what the

1854
01:35:35,119 --> 01:35:38,829
hypotenuse here

1855
01:35:36,850 --> 01:35:42,250
actually is I need to do this around the

1856
01:35:38,829 --> 01:35:46,720
horn right so this leg right here I know

1857
01:35:42,250 --> 01:35:51,819
that H sine theta is going to be the Y

1858
01:35:46,720 --> 01:35:56,230
offset right and I'll just call that Y

1859
01:35:51,819 --> 01:35:58,149
for now so if I then want to know what

1860
01:35:56,229 --> 01:36:00,089
the hypotenuse is well okay that's

1861
01:35:58,149 --> 01:36:05,170
pretty easy I just divided by the sine

1862
01:36:00,090 --> 01:36:07,449
right of the angle and then I want to

1863
01:36:05,170 --> 01:36:11,409
know this value here right so I want to

1864
01:36:07,449 --> 01:36:14,500
know what the cosine angle times it is

1865
01:36:11,409 --> 01:36:16,569
right so I want to know what you know

1866
01:36:14,500 --> 01:36:20,859
what X is basically and I know that x

1867
01:36:16,569 --> 01:36:24,039
equals H cosine theta right so if I want

1868
01:36:20,859 --> 01:36:29,319
to know what X is x equals H cosine

1869
01:36:24,039 --> 01:36:32,109
theta right in this case and I know that

1870
01:36:29,319 --> 01:36:36,939
H is y over sine theta I can just plug

1871
01:36:32,109 --> 01:36:40,899
that in here and say x equals y cosine

1872
01:36:36,939 --> 01:36:45,669
theta over sine theta which hey is just

1873
01:36:40,899 --> 01:36:50,589
Y tan theta right so once I know what

1874
01:36:45,670 --> 01:36:52,869
angle I am choosing to drop these guys

1875
01:36:50,590 --> 01:36:55,690
by because remember this angle right

1876
01:36:52,869 --> 01:36:57,609
here right that we're using here that's

1877
01:36:55,689 --> 01:37:01,779
it so effectively the angle of tilt

1878
01:36:57,609 --> 01:37:03,579
right it's the same in either case so

1879
01:37:01,779 --> 01:37:06,550
whatever angle of tilt I want to give

1880
01:37:03,579 --> 01:37:10,180
them this would give me if I know the

1881
01:37:06,550 --> 01:37:13,420
tangent of that angle then I know what

1882
01:37:10,180 --> 01:37:19,180
this Z biased value would be right I

1883
01:37:13,420 --> 01:37:26,319
know how far it has to get displaced in

1884
01:37:19,180 --> 01:37:29,920
Z in order to be correct right so I know

1885
01:37:26,319 --> 01:37:34,389
that value the problem is again that's

1886
01:37:29,920 --> 01:37:36,489
really not even how we're computing the

1887
01:37:34,390 --> 01:37:38,770
Z bias right now the way we're computing

1888
01:37:36,489 --> 01:37:41,649
the Z value is Z bias is an actual

1889
01:37:38,770 --> 01:37:44,170
movement in Z the actual movement in Z

1890
01:37:41,649 --> 01:37:48,219
means how far do you move this point up

1891
01:37:44,170 --> 01:37:51,329
to get it to the correct z value right

1892
01:37:48,220 --> 01:37:51,329
after transform

1893
01:37:52,270 --> 01:38:00,040
and that part is a little more confusing

1894
01:37:54,909 --> 01:38:01,689
to me and not 100% clear on what that

1895
01:38:00,039 --> 01:38:04,800
would be because in order to get a Z

1896
01:38:01,689 --> 01:38:07,569
value that's the same as this one right

1897
01:38:04,800 --> 01:38:09,730
you're assuming that there's some that

1898
01:38:07,569 --> 01:38:13,059
there's the plane of the camera right

1899
01:38:09,729 --> 01:38:16,299
which is passing through here and so in

1900
01:38:13,060 --> 01:38:18,910
order to put this point on the same

1901
01:38:16,300 --> 01:38:21,250
plane of the camera and to be fair these

1902
01:38:18,909 --> 01:38:26,139
planes look like that right they look

1903
01:38:21,250 --> 01:38:28,689
more like this right and so what we're

1904
01:38:26,140 --> 01:38:31,270
saying is well we want this point to be

1905
01:38:28,689 --> 01:38:33,639
on the same plane of the camera as like

1906
01:38:31,270 --> 01:38:38,470
this point is or somewhere around there

1907
01:38:33,640 --> 01:38:40,690
right and so what we want to do is say

1908
01:38:38,470 --> 01:38:42,789
well that plane of the camera that one

1909
01:38:40,689 --> 01:38:48,759
here we need to move this up to that

1910
01:38:42,789 --> 01:38:54,750
point but like that point is really not

1911
01:38:48,760 --> 01:39:01,659
obvious to me how you encode any

1912
01:38:54,750 --> 01:39:04,329
convenient way so like using either the

1913
01:39:01,659 --> 01:39:05,829
angle of tilt which I guess you wouldn't

1914
01:39:04,329 --> 01:39:07,149
necessarily know so the angle it tilts

1915
01:39:05,829 --> 01:39:12,100
probably bad but maybe the angle of the

1916
01:39:07,149 --> 01:39:13,509
camera which maybe you could do a

1917
01:39:12,100 --> 01:39:15,520
computation a little easier would be an

1918
01:39:13,510 --> 01:39:17,500
easier thing to compute but again you

1919
01:39:15,520 --> 01:39:21,580
can see why it's pretty tough to figure

1920
01:39:17,500 --> 01:39:30,010
out what you would put into the Z there

1921
01:39:21,579 --> 01:39:32,189
to make that work hmm and I really don't

1922
01:39:30,010 --> 01:39:32,190
know

1923
01:39:50,300 --> 01:40:04,130
I guess one way of thinking about that

1924
01:39:54,380 --> 01:40:06,109
requires another vector I'm not having a

1925
01:40:04,130 --> 01:40:08,000
brainstorm here I'm not having the flash

1926
01:40:06,109 --> 01:40:11,529
of brilliance that's how you encode this

1927
01:40:08,000 --> 01:40:16,880
in for each vertex into just one

1928
01:40:11,529 --> 01:40:20,509
parameter like I said pretty obvious to

1929
01:40:16,880 --> 01:40:24,680
me how you would do it if you could just

1930
01:40:20,510 --> 01:40:28,159
encode points and say this is transform

1931
01:40:24,680 --> 01:40:31,310
this entire other point right like

1932
01:40:28,159 --> 01:40:32,930
forget it like you know don't transform

1933
01:40:31,310 --> 01:40:34,490
this point I'm giving you transform this

1934
01:40:32,930 --> 01:40:39,500
completely other point that has nothing

1935
01:40:34,489 --> 01:40:41,210
to do with it that makes some sense

1936
01:40:39,500 --> 01:40:43,640
because then you would just say all

1937
01:40:41,210 --> 01:40:45,319
right this is the place I want this

1938
01:40:43,640 --> 01:40:46,789
vertex to appear like it is it's

1939
01:40:45,319 --> 01:40:48,559
actually over here but I don't care

1940
01:40:46,789 --> 01:40:53,470
so just transform this one and produce

1941
01:40:48,560 --> 01:40:53,470
that Z value and then use that right

1942
01:41:05,489 --> 01:41:12,689
yeah then I'm not I'm not coming up with

1943
01:41:12,069 --> 01:41:16,079
anything

1944
01:41:12,689 --> 01:41:20,429
and another thing that

1945
01:41:16,079 --> 01:41:20,430
[Music]

1946
01:41:26,800 --> 01:41:33,010
another thing that kind of creates a

1947
01:41:28,810 --> 01:41:41,350
problem here is that the location that

1948
01:41:33,010 --> 01:41:47,079
you transform to in pixel space is also

1949
01:41:41,350 --> 01:41:49,270
wrong you know what I mean you know the

1950
01:41:47,079 --> 01:41:52,869
ideal way to do it would be to say

1951
01:41:49,270 --> 01:41:54,550
something like I'm gonna tell you where

1952
01:41:52,869 --> 01:41:59,890
in the depth buffer you should be

1953
01:41:54,550 --> 01:42:04,510
looking in addition so like you almost

1954
01:41:59,890 --> 01:42:08,020
want to like draw a quad and say

1955
01:42:04,510 --> 01:42:11,710
rasterize this quad and do the depth

1956
01:42:08,020 --> 01:42:20,380
buffer testing on it and then write the

1957
01:42:11,710 --> 01:42:23,730
pixel right the pixel if you find that

1958
01:42:20,380 --> 01:42:23,730
you could have right

1959
01:42:29,270 --> 01:42:34,800
and again not not a particularly

1960
01:42:33,090 --> 01:42:37,739
plausible thing to do you could

1961
01:42:34,800 --> 01:42:40,920
obviously make a fairly inventive

1962
01:42:37,739 --> 01:42:45,239
renderer that worked that way but I

1963
01:42:40,920 --> 01:42:47,819
don't know so I'm kind of I'm kind of at

1964
01:42:45,239 --> 01:42:50,670
a loss to know exactly how I would

1965
01:42:47,819 --> 01:42:55,559
encode this so that you're gonna get a Z

1966
01:42:50,670 --> 01:42:58,350
bias that's that's really stable and

1967
01:42:55,560 --> 01:42:59,730
you've seen on and made hero the

1968
01:42:58,350 --> 01:43:01,590
difference between getting something

1969
01:42:59,729 --> 01:43:03,929
really right and not quite getting it

1970
01:43:01,590 --> 01:43:07,400
right so like for example when we redid

1971
01:43:03,930 --> 01:43:09,780
our camera code to like do type

1972
01:43:07,399 --> 01:43:15,269
computation of like the fading bounds

1973
01:43:09,779 --> 01:43:16,829
and like good interpolation it just felt

1974
01:43:15,270 --> 01:43:18,600
so much better you know and there

1975
01:43:16,829 --> 01:43:20,250
weren't weird artifacts where the fading

1976
01:43:18,600 --> 01:43:23,910
was off sometimes it just feels so much

1977
01:43:20,250 --> 01:43:28,739
more solid and so I feel like this is

1978
01:43:23,909 --> 01:43:31,050
one of the last parts of the sprite

1979
01:43:28,739 --> 01:43:36,840
compositing 2d 3d hybrid thing that's

1980
01:43:31,050 --> 01:43:40,199
that's really nasty but I feel like we

1981
01:43:36,840 --> 01:43:42,060
can get it exactly right or at least get

1982
01:43:40,199 --> 01:43:44,609
it that solid thing that's just like

1983
01:43:42,060 --> 01:43:48,020
yeah this is how you do it to have it

1984
01:43:44,609 --> 01:43:55,109
really compute well but I'm just not

1985
01:43:48,020 --> 01:43:58,430
thinking of the magic answer you know

1986
01:43:55,109 --> 01:44:00,899
maybe maybe I got this out the other day

1987
01:43:58,430 --> 01:44:02,970
because I had noticed it was around and

1988
01:44:00,899 --> 01:44:08,039
I and I put it on the owl the Owls over

1989
01:44:02,970 --> 01:44:10,829
there and I was thinking maybe when we

1990
01:44:08,039 --> 01:44:14,010
really need to get down to business here

1991
01:44:10,829 --> 01:44:16,199
we go right get our little tennis tennis

1992
01:44:14,010 --> 01:44:17,550
headband on I don't play tennis by the

1993
01:44:16,199 --> 01:44:20,609
way but I associate these kinds of

1994
01:44:17,550 --> 01:44:24,840
headbands with people who play tennis so

1995
01:44:20,609 --> 01:44:25,920
we just put our TAS headband on and I

1996
01:44:24,840 --> 01:44:28,619
think the important thing to remember

1997
01:44:25,920 --> 01:44:30,480
headbands is that they help keep your

1998
01:44:28,619 --> 01:44:33,359
thoughts in right there they're like

1999
01:44:30,479 --> 01:44:36,089
keeping someday secure the thought right

2000
01:44:33,359 --> 01:44:37,500
yeah I'm saying they just any of the

2001
01:44:36,090 --> 01:44:41,319
thoughts that we're going to kind of get

2002
01:44:37,500 --> 01:44:44,380
out through this ring right here those

2003
01:44:41,319 --> 01:44:46,599
are being reflected back in giving you

2004
01:44:44,380 --> 01:44:49,539
the power of both your thoughts right

2005
01:44:46,599 --> 01:44:53,860
now and your thoughts from a few seconds

2006
01:44:49,539 --> 01:44:56,710
ago and that you know that's where it's

2007
01:44:53,859 --> 01:45:02,529
at so putting our headband on and trying

2008
01:44:56,710 --> 01:45:04,510
to think harder about this right let's

2009
01:45:02,529 --> 01:45:06,550
try to write some more direct

2010
01:45:04,510 --> 01:45:09,090
correspondences here and see if we can

2011
01:45:06,550 --> 01:45:12,579
something starts to jump out at us right

2012
01:45:09,090 --> 01:45:18,550
so when we take a look at what we're

2013
01:45:12,578 --> 01:45:23,939
trying to do here we have this part of

2014
01:45:18,550 --> 01:45:29,980
the wall right right here's the wall

2015
01:45:23,939 --> 01:45:33,189
here's the floor we we would get exactly

2016
01:45:29,979 --> 01:45:37,059
the results we wanted if we just drew

2017
01:45:33,189 --> 01:45:40,178
the sprites like this right and we can

2018
01:45:37,060 --> 01:45:43,929
do that if you go look at how like we

2019
01:45:40,179 --> 01:45:48,789
actually have code right where we do our

2020
01:45:43,929 --> 01:45:50,889
sprite transforms I think it's in here I

2021
01:45:48,789 --> 01:45:52,300
think we do it in here I don't know if

2022
01:45:50,889 --> 01:45:56,020
we'd actually then don't don't quote me

2023
01:45:52,300 --> 01:45:58,270
on that maybe we do it in here maybe we

2024
01:45:56,020 --> 01:46:05,560
don't let me look at the element code

2025
01:45:58,270 --> 01:46:09,790
sorry enemy code and see if we do so in

2026
01:46:05,560 --> 01:46:11,560
here you can see us doing our push yeah

2027
01:46:09,789 --> 01:46:13,779
so we're calling sprite values for up

2028
01:46:11,560 --> 01:46:18,480
right and then we call it push sprites

2029
01:46:13,779 --> 01:46:22,479
so you can see push sprite somewhere

2030
01:46:18,479 --> 01:46:26,709
here it is you can see push sprite on

2031
01:46:22,479 --> 01:46:29,769
you here doing this thing right and you

2032
01:46:26,710 --> 01:46:32,649
can see when we create these we're just

2033
01:46:29,770 --> 01:46:34,179
not putting in any Z bias at all right

2034
01:46:32,649 --> 01:46:35,500
so that's why we're clipping through the

2035
01:46:34,179 --> 01:46:41,230
floor we don't have any Z bias in there

2036
01:46:35,500 --> 01:46:43,118
at all and when we're creating these so

2037
01:46:41,229 --> 01:46:46,029
you can see sprite values for upright

2038
01:46:43,118 --> 01:46:48,039
rights right values for upright when

2039
01:46:46,029 --> 01:46:54,909
we're creating this the t camera up

2040
01:46:48,039 --> 01:47:00,699
there variable is really what determines

2041
01:46:54,909 --> 01:47:03,519
how bent the thing is right and so if in

2042
01:47:00,699 --> 01:47:06,579
here I say okay the t camera up and I

2043
01:47:03,520 --> 01:47:11,020
can that we can just look at this in

2044
01:47:06,579 --> 01:47:14,819
practice right so if I say look we're

2045
01:47:11,020 --> 01:47:17,110
gonna use that that T camera up value

2046
01:47:14,819 --> 01:47:18,969
then we don't need to worry about Z bias

2047
01:47:17,109 --> 01:47:21,130
as much well you know that's even that's

2048
01:47:18,970 --> 01:47:23,710
not true no I think about it that's only

2049
01:47:21,130 --> 01:47:26,350
true at the top right so that's only

2050
01:47:23,710 --> 01:47:29,020
true for like this sort of the sorting

2051
01:47:26,350 --> 01:47:31,840
that happens like here right against the

2052
01:47:29,020 --> 01:47:34,180
wall so I take that back

2053
01:47:31,840 --> 01:47:36,090
that's not true even if we set that it's

2054
01:47:34,180 --> 01:47:38,920
the bottom when we do that alignment

2055
01:47:36,090 --> 01:47:40,630
because of the alignments the bottom

2056
01:47:38,920 --> 01:47:42,399
would still interpenetrate through so

2057
01:47:40,630 --> 01:47:47,920
it's not true changing it wouldn't be

2058
01:47:42,399 --> 01:47:50,439
the case okay so let's go ahead and

2059
01:47:47,920 --> 01:47:51,789
continue to work that through and I'll

2060
01:47:50,439 --> 01:47:56,349
forego what I was saying for because

2061
01:47:51,789 --> 01:47:58,869
it's actually not accurate um but let's

2062
01:47:56,350 --> 01:48:00,579
pretend that t camera was directly up

2063
01:47:58,869 --> 01:48:03,069
and now let's work through what we would

2064
01:48:00,579 --> 01:48:05,920
do to correct the alignment in that case

2065
01:48:03,069 --> 01:48:08,500
right because I think that case we could

2066
01:48:05,920 --> 01:48:09,970
get correct so let's suppose the

2067
01:48:08,500 --> 01:48:12,430
alignment point was actually up here

2068
01:48:09,970 --> 01:48:14,619
what's going to happen well we're going

2069
01:48:12,430 --> 01:48:18,640
to shift down to bring the alignment

2070
01:48:14,619 --> 01:48:21,159
point into shocking that alignment with

2071
01:48:18,640 --> 01:48:26,710
the position of the entity on the ground

2072
01:48:21,159 --> 01:48:30,189
that will shift this card down like this

2073
01:48:26,710 --> 01:48:34,090
right yielding to this much

2074
01:48:30,189 --> 01:48:36,879
interpenetration right so right there is

2075
01:48:34,090 --> 01:48:41,440
where we would clip out if we wanted to

2076
01:48:36,880 --> 01:48:43,779
fix this if T camera up again was not

2077
01:48:41,439 --> 01:48:45,789
used so really if the camera up would be

2078
01:48:43,779 --> 01:48:47,979
zero I think so it was just straight Z

2079
01:48:45,789 --> 01:48:53,439
right we're just using straight Z up and

2080
01:48:47,979 --> 01:48:54,549
down uh so if T cam was that's the worst

2081
01:48:53,439 --> 01:49:00,699
handwriting Wow

2082
01:48:54,550 --> 01:49:06,889
it's just been bad today huh if T camera

2083
01:49:00,699 --> 01:49:09,380
up right if T camera up equaled zero

2084
01:49:06,889 --> 01:49:10,880
meaning we're not using the up Vector of

2085
01:49:09,380 --> 01:49:13,069
the camera which will lie things down

2086
01:49:10,880 --> 01:49:15,590
because the camera is looking a little

2087
01:49:13,069 --> 01:49:17,719
bit rotated right so that'll live things

2088
01:49:15,590 --> 01:49:22,069
down more than they would be if we were

2089
01:49:17,719 --> 01:49:24,948
looking straight top-down so if we're

2090
01:49:22,069 --> 01:49:28,039
using that bend then what we're gonna

2091
01:49:24,948 --> 01:49:29,539
find is as we use that T camera up this

2092
01:49:28,039 --> 01:49:31,760
would get wrong but if we have this at

2093
01:49:29,539 --> 01:49:34,069
zero then we would literally just be

2094
01:49:31,760 --> 01:49:37,789
using the z axis for this right

2095
01:49:34,069 --> 01:49:39,859
so Z bias if we just set the Z bias to

2096
01:49:37,789 --> 01:49:41,600
however long this distance is which we

2097
01:49:39,859 --> 01:49:45,799
know what it is actually it's the

2098
01:49:41,600 --> 01:49:48,679
alignment point Y times the height of

2099
01:49:45,800 --> 01:49:51,469
the sprite right because that's how far

2100
01:49:48,679 --> 01:49:53,630
we're moving it so we would be able to

2101
01:49:51,469 --> 01:49:56,090
set the Z bias exactly correct because

2102
01:49:53,630 --> 01:49:58,969
this is what it would be right the Z

2103
01:49:56,090 --> 01:50:01,340
bias on all four points in fact would be

2104
01:49:58,969 --> 01:50:03,319
set to that now once we get rotation

2105
01:50:01,340 --> 01:50:05,960
involved there'd be a little more to it

2106
01:50:03,319 --> 01:50:07,579
we'd have to account we'd have to do the

2107
01:50:05,960 --> 01:50:11,319
plane multiplication to find out what it

2108
01:50:07,579 --> 01:50:11,319
was but then it would be correct right

2109
01:50:11,350 --> 01:50:18,350
okay but now we get to a much much much

2110
01:50:16,039 --> 01:50:23,269
worse problem or at least I think it's

2111
01:50:18,350 --> 01:50:26,900
much worse right and what happens is now

2112
01:50:23,270 --> 01:50:30,050
if we let T camera up go to something

2113
01:50:26,899 --> 01:50:32,420
that is not right so not equal to zero

2114
01:50:30,050 --> 01:50:34,909
right even something small like point

2115
01:50:32,420 --> 01:50:36,859
one but we're actually more than halfway

2116
01:50:34,908 --> 01:50:40,039
to T camera up we're at point six five

2117
01:50:36,859 --> 01:50:41,710
because I think what we set our t camera

2118
01:50:40,039 --> 01:50:46,219
up that's what we thought was a good

2119
01:50:41,710 --> 01:50:50,239
balance of sort of shift as the camera

2120
01:50:46,219 --> 01:50:52,880
moves that's gonna lie these things down

2121
01:50:50,238 --> 01:50:56,059
a lot flatter so what will then end up

2122
01:50:52,880 --> 01:51:01,760
seeing is something that looks more like

2123
01:50:56,060 --> 01:51:05,539
this right and now you can see what the

2124
01:51:01,760 --> 01:51:08,329
problem is if we were to still set the Z

2125
01:51:05,539 --> 01:51:10,810
bias to the values that it would have

2126
01:51:08,329 --> 01:51:13,639
been if T camera up were not involved

2127
01:51:10,810 --> 01:51:17,030
well then we would be in big trouble

2128
01:51:13,639 --> 01:51:20,118
because we'd be setting these values to

2129
01:51:17,029 --> 01:51:20,538
much closer values of Z than they should

2130
01:51:20,118 --> 01:51:22,098
have been

2131
01:51:20,538 --> 01:51:24,139
because we're gonna shift them up way

2132
01:51:22,099 --> 01:51:29,510
more than they need to be looking at it

2133
01:51:24,139 --> 01:51:31,340
again from the side right the easy case

2134
01:51:29,510 --> 01:51:33,500
was the case that we had something that

2135
01:51:31,340 --> 01:51:36,650
looked like that and we just shifted it

2136
01:51:33,500 --> 01:51:39,590
down right so it looked like that right

2137
01:51:36,649 --> 01:51:41,238
all we did is shift it down so all we do

2138
01:51:39,590 --> 01:51:42,650
is like take this point and move it to

2139
01:51:41,238 --> 01:51:44,388
here take this point and move it to here

2140
01:51:42,649 --> 01:51:45,558
there's actually two points it's you

2141
01:51:44,389 --> 01:51:48,769
know it's a quad but you get the idea

2142
01:51:45,559 --> 01:51:52,070
right we we shift it down like this then

2143
01:51:48,769 --> 01:51:54,889
the question is uh hmm okay what do we

2144
01:51:52,069 --> 01:51:57,078
shift the Z by to make it appear as if

2145
01:51:54,889 --> 01:51:59,118
it was so right here obvious answer

2146
01:51:57,078 --> 01:52:01,250
however much we shifted down by in the

2147
01:51:59,118 --> 01:52:05,000
first place right we just apply the

2148
01:52:01,250 --> 01:52:08,779
negative and that's the Z bias pretty

2149
01:52:05,000 --> 01:52:11,300
simple should just work right but now

2150
01:52:08,779 --> 01:52:12,349
what do we do when this is what it

2151
01:52:11,300 --> 01:52:16,730
actually looks like

2152
01:52:12,349 --> 01:52:19,659
and we've lie down right and now we want

2153
01:52:16,729 --> 01:52:24,288
to know how will I still see this thing

2154
01:52:19,658 --> 01:52:26,268
you know in this case and it's got to

2155
01:52:24,288 --> 01:52:29,328
produce a z value that's the same as

2156
01:52:26,269 --> 01:52:31,880
this thing Z value well I don't know

2157
01:52:29,328 --> 01:52:36,759
what that is unless I project this thing

2158
01:52:31,880 --> 01:52:36,760
onto this plane right

2159
01:52:58,689 --> 01:53:06,780
did I just accidentally say the answer

2160
01:53:02,649 --> 01:53:06,779
to the question

2161
01:53:22,529 --> 01:53:30,109
I feel as though I may have accidentally

2162
01:53:26,430 --> 01:53:30,110
said the answer to the question

2163
01:53:40,399 --> 01:53:49,439
if the thing is I know the plane in Z

2164
01:53:46,829 --> 01:53:53,309
that this needs to project to but I

2165
01:53:49,439 --> 01:53:54,569
don't know where it projects what if the

2166
01:53:53,310 --> 01:53:56,010
Z value

2167
01:53:54,569 --> 01:53:58,649
I'm sorry the W value is how we're

2168
01:53:56,010 --> 01:54:04,199
passing it down what if the W value I

2169
01:53:58,649 --> 01:54:08,489
set is just the Z value the Z height in

2170
01:54:04,199 --> 01:54:10,199
world space of the plane to which you

2171
01:54:08,489 --> 01:54:13,909
need to project it and then you just

2172
01:54:10,199 --> 01:54:13,909
project it in the vertex shader

2173
01:54:38,269 --> 01:54:44,309
so in the case of the bottom vertex I

2174
01:54:41,880 --> 01:54:48,409
know exactly what that Z plane is

2175
01:54:44,309 --> 01:54:48,409
because I know the Z value of this point

2176
01:54:48,800 --> 01:55:01,380
right so I know the world Z plane that I

2177
01:54:51,899 --> 01:55:03,268
would project to in the case of this so

2178
01:55:01,380 --> 01:55:06,420
in the case of this I would just set it

2179
01:55:03,269 --> 01:55:08,670
to this it would know this point and it

2180
01:55:06,420 --> 01:55:10,109
would find the intersection from here

2181
01:55:08,670 --> 01:55:16,319
going backwards in the camera direction

2182
01:55:10,109 --> 01:55:19,920
to that plane right and that would be

2183
01:55:16,319 --> 01:55:27,478
the actual Z value camera relative Z

2184
01:55:19,920 --> 01:55:32,309
value right if I want to know what the Z

2185
01:55:27,479 --> 01:55:36,630
value should be for this point well I

2186
01:55:32,309 --> 01:55:37,650
want you to reject as if it were well I

2187
01:55:36,630 --> 01:55:39,479
don't really know where I want to

2188
01:55:37,649 --> 01:55:41,518
project as if it were there I guess

2189
01:55:39,479 --> 01:55:43,650
that's kind of a problem where do you

2190
01:55:41,519 --> 01:55:49,789
want that back point to project you and

2191
01:55:43,649 --> 01:55:57,420
Z I mean maybe you just say that it's

2192
01:55:49,788 --> 01:55:59,578
some kind of a well so I don't really

2193
01:55:57,420 --> 01:56:01,649
know but I guess you would say the

2194
01:55:59,578 --> 01:56:06,299
height value is where that top point

2195
01:56:01,649 --> 01:56:08,819
should project so if you want it to

2196
01:56:06,300 --> 01:56:10,529
project to this Z plane you would say it

2197
01:56:08,819 --> 01:56:12,238
would go right there the problem is you

2198
01:56:10,529 --> 01:56:15,679
actually want to see it so you kind of

2199
01:56:12,238 --> 01:56:15,678
need it to go more like right there

2200
01:56:20,238 --> 01:56:27,769
so do I actually know what I'm talking

2201
01:56:22,460 --> 01:56:29,210
about or not well I might still know

2202
01:56:27,770 --> 01:56:30,200
what I'm talking about and the reason I

2203
01:56:29,210 --> 01:56:32,630
might still know what I'm talking about

2204
01:56:30,199 --> 01:56:34,579
is because actually this is the point

2205
01:56:32,630 --> 01:56:36,140
you would pass in not that one because

2206
01:56:34,579 --> 01:56:37,670
this was the original point much like

2207
01:56:36,140 --> 01:56:39,739
this was the original point so you're

2208
01:56:37,670 --> 01:56:42,409
passing the Z of this and the Z of this

2209
01:56:39,738 --> 01:56:48,879
and this would actually get projected up

2210
01:56:42,409 --> 01:56:48,880
to this plane which might be correct

2211
01:56:56,279 --> 01:57:01,929
I'm willing to believe that this is part

2212
01:56:59,409 --> 01:57:06,479
of the answer possibly not the entire

2213
01:57:01,930 --> 01:57:06,480
answer but it's an interesting start

2214
01:57:09,720 --> 01:57:15,420
so basically passing the worldspace z

2215
01:57:26,800 --> 01:57:28,860
ah

2216
01:57:29,099 --> 01:57:38,190
I'm willing to give them try so passing

2217
01:57:32,279 --> 01:57:43,828
the worldspace Z point which that you

2218
01:57:38,189 --> 01:57:47,178
want to project to and what we can do

2219
01:57:43,828 --> 01:57:50,519
there is just pass the actual Z value

2220
01:57:47,179 --> 01:57:52,980
anytime we don't want to do this so you

2221
01:57:50,520 --> 01:57:54,750
want a bias of 0 because project is

2222
01:57:52,979 --> 01:58:01,919
saying project it to the same plane it's

2223
01:57:54,750 --> 01:58:04,368
already in right I don't know does that

2224
01:58:01,920 --> 01:58:04,368
sound good

2225
01:58:11,448 --> 01:58:15,089
I'm gonna go ahead and stop there for

2226
01:58:13,500 --> 01:58:19,170
today and I'm gonna say Saturday and

2227
01:58:15,090 --> 01:58:21,989
Sunday when we resume I might try it I I

2228
01:58:19,170 --> 01:58:24,590
can't say for sure that's right but I

2229
01:58:21,988 --> 01:58:27,269
might try that we'll go to a brief Q&amp;A

2230
01:58:24,590 --> 01:58:30,560
and I think that's the best I've got

2231
01:58:27,270 --> 01:58:33,989
right now if people have better ideas

2232
01:58:30,560 --> 01:58:36,980
they're gonna have to they're gonna have

2233
01:58:33,988 --> 01:58:36,979
to tell me what they are

2234
01:59:06,810 --> 01:59:11,530
what kind of testing unit replays do you

2235
01:59:09,760 --> 01:59:13,510
used on 1935 have you used over the

2236
01:59:11,529 --> 01:59:20,739
years its automated testing even really

2237
01:59:13,510 --> 01:59:25,420
a thing at game studios yeah actually it

2238
01:59:20,739 --> 01:59:27,789
definitely is used but it depends on the

2239
01:59:25,420 --> 01:59:30,149
studio and what value they place on it

2240
01:59:27,789 --> 01:59:40,840
and so on

2241
01:59:30,149 --> 01:59:42,819
what I would say is I have written a

2242
01:59:40,840 --> 01:59:44,770
couple different systems ranging from

2243
01:59:42,819 --> 01:59:47,679
full recording of everything to just

2244
01:59:44,770 --> 01:59:51,640
sort of log based stuff that I do use

2245
01:59:47,680 --> 01:59:53,650
for more for watching playthroughs than

2246
01:59:51,640 --> 01:59:58,329
for catching bugs usually but you can

2247
01:59:53,649 --> 02:00:00,339
also sometimes do bugs with them I did

2248
01:59:58,329 --> 02:00:01,750
write walk monster for the witness but

2249
02:00:00,340 --> 02:00:04,750
we didn't end up needing it because I

2250
02:00:01,750 --> 02:00:07,380
later made a system that actually just

2251
02:00:04,750 --> 02:00:09,279
told you everywhere the player could go

2252
02:00:07,380 --> 02:00:13,000
from a starting point so you don't

2253
02:00:09,279 --> 02:00:15,909
really need that kind of testing and I

2254
02:00:13,000 --> 02:00:19,270
really haven't seen much else done at

2255
02:00:15,909 --> 02:00:21,579
projects I've been on for unit testing

2256
02:00:19,270 --> 02:00:23,290
on the 3d animation system I did for rad

2257
02:00:21,579 --> 02:00:26,220
game tools that had a complete set of

2258
02:00:23,289 --> 02:00:29,890
unit tests for all the core functions

2259
02:00:26,220 --> 02:00:31,570
inside like sort of the runtime library

2260
02:00:29,890 --> 02:00:34,020
that that I made for it so basically

2261
02:00:31,569 --> 02:00:38,139
like the memory allocator the math

2262
02:00:34,020 --> 02:00:41,770
routines those were tested with unit

2263
02:00:38,140 --> 02:00:43,539
tests so and that makes more sense to

2264
02:00:41,770 --> 02:00:45,250
you on a project like that where tons of

2265
02:00:43,539 --> 02:00:46,590
studios are using it the more bugs you

2266
02:00:45,250 --> 02:00:48,399
can find with unit testing the less

2267
02:00:46,590 --> 02:00:57,340
problems for other people so that's

2268
02:00:48,399 --> 02:00:59,439
reasonable right so yeah outside of my

2269
02:00:57,340 --> 02:01:01,480
personal experience though I would say

2270
02:00:59,439 --> 02:01:04,599
that there are definitely studios I know

2271
02:01:01,479 --> 02:01:07,659
of that at least have used that kind of

2272
02:01:04,600 --> 02:01:09,400
testing I specifically remember Chris

2273
02:01:07,659 --> 02:01:13,630
butcher telling me that Bungie was a

2274
02:01:09,399 --> 02:01:15,099
huge fan of doing random walk testing so

2275
02:01:13,630 --> 02:01:15,350
they would just basically feed random

2276
02:01:15,100 --> 02:01:17,570
use

2277
02:01:15,350 --> 02:01:19,550
inputs into their games just something

2278
02:01:17,569 --> 02:01:21,429
they would do and they just feed random

2279
02:01:19,550 --> 02:01:24,579
inputs over and over and over again and

2280
02:01:21,430 --> 02:01:26,750
they said they found stuff with that I

2281
02:01:24,579 --> 02:01:30,079
don't know to what extent are using that

2282
02:01:26,750 --> 02:01:31,460
these days on like destiny but it was

2283
02:01:30,079 --> 02:01:34,369
definitely something that they used to

2284
02:01:31,460 --> 02:01:37,189
do on at least one of the halo like Halo

2285
02:01:34,369 --> 02:01:39,349
Reach maybe and and so on I don't know

2286
02:01:37,189 --> 02:01:43,609
what other games but I know that was a

2287
02:01:39,350 --> 02:01:45,910
specific case trying to think of what

2288
02:01:43,609 --> 02:01:47,179
other unit tests Reeves losing games I

2289
02:01:45,909 --> 02:01:50,769
don't know

2290
02:01:47,180 --> 02:01:54,500
randomized testing is fairly popular

2291
02:01:50,770 --> 02:01:59,150
because again games the hard bugs and

2292
02:01:54,500 --> 02:02:01,369
games you can't really it's it's pretty

2293
02:01:59,149 --> 02:02:02,539
hard to design unit tests for them so

2294
02:02:01,369 --> 02:02:05,630
you kind of need a different kind of

2295
02:02:02,539 --> 02:02:08,300
testing you need something that tries a

2296
02:02:05,630 --> 02:02:10,310
bunch of stuff and sees what breaks in

2297
02:02:08,300 --> 02:02:11,539
it was a unit of the Tri slate things

2298
02:02:10,310 --> 02:02:13,910
because usually the units to start

2299
02:02:11,539 --> 02:02:16,609
broken usually if the interaction of

2300
02:02:13,909 --> 02:02:18,859
units that gets broken you know or

2301
02:02:16,609 --> 02:02:20,329
gameplay logic stuff that just turns out

2302
02:02:18,859 --> 02:02:21,439
to put you in an unwinnable state or

2303
02:02:20,329 --> 02:02:22,939
something that really that you know

2304
02:02:21,439 --> 02:02:25,009
doesn't crash or anything and you can't

2305
02:02:22,939 --> 02:02:27,109
really detect that's wrong you just need

2306
02:02:25,010 --> 02:02:28,909
someone to walk over and go how did the

2307
02:02:27,109 --> 02:02:31,429
player end up up on this ledge that's a

2308
02:02:28,909 --> 02:02:33,380
totally busted thing and then you can go

2309
02:02:31,430 --> 02:02:35,980
look and see if you can find out why

2310
02:02:33,380 --> 02:02:35,980
right

2311
02:02:40,039 --> 02:02:45,118
can use the 1935 not just yet

2312
02:02:43,380 --> 02:02:46,500
gun games for people who don't want to

2313
02:02:45,118 --> 02:02:50,670
fuss the flappers through code would you

2314
02:02:46,500 --> 02:02:53,039
say STL is a good solution I've never

2315
02:02:50,670 --> 02:02:55,109
used it so I can't really say that it's

2316
02:02:53,039 --> 02:02:57,408
a good solution because that implies

2317
02:02:55,109 --> 02:03:00,929
that I've like assessed it and

2318
02:02:57,408 --> 02:03:02,250
determined that it was at some kind of a

2319
02:03:00,929 --> 02:03:06,810
quality level or something which I

2320
02:03:02,250 --> 02:03:11,639
definitely haven't done but what I can

2321
02:03:06,810 --> 02:03:15,539
say about it is it's shipped in a lot of

2322
02:03:11,639 --> 02:03:18,179
games right so it can't be that bad

2323
02:03:15,539 --> 02:03:20,488
right it's not completely awful because

2324
02:03:18,179 --> 02:03:24,090
you know that there are games out there

2325
02:03:20,488 --> 02:03:28,250
running on it right now that are running

2326
02:03:24,090 --> 02:03:36,659
on millions of machines so it's at least

2327
02:03:28,250 --> 02:03:40,399
it must do something right it's about

2328
02:03:36,658 --> 02:03:42,388
it's about as good as I can can give

2329
02:03:40,399 --> 02:03:44,099
without actually spending some time

2330
02:03:42,389 --> 02:03:47,819
looking at it myself I couldn't tell you

2331
02:03:44,100 --> 02:03:49,590
whether it was good or not but it

2332
02:03:47,819 --> 02:03:52,039
certainly can't be that bad

2333
02:03:49,590 --> 02:03:52,039
right

2334
02:04:14,500 --> 02:04:19,140
alright looks like we're all done I

2335
02:04:16,329 --> 02:04:19,140
don't see any other questions

2336
02:04:29,038 --> 02:04:33,960
all right thank you everybody for

2337
02:04:32,250 --> 02:04:35,340
joining me further sort of handmade hero

2338
02:04:33,960 --> 02:04:37,559
it's been a pleasure coding with you as

2339
02:04:35,340 --> 02:04:39,538
always if you would like to follow along

2340
02:04:37,559 --> 02:04:41,788
with the series at home you can always

2341
02:04:39,538 --> 02:04:43,018
go to hammer here about organ pre-order

2342
02:04:41,788 --> 02:04:46,889
the game it comes with all the source

2343
02:04:43,019 --> 02:04:50,309
code so you can follow along do your own

2344
02:04:46,889 --> 02:04:52,319
sort of test on the Z buy stuff you got

2345
02:04:50,309 --> 02:04:53,429
all tomorrow I'm not here tomorrow I'm

2346
02:04:52,319 --> 02:04:56,969
here back here on Sunday

2347
02:04:53,429 --> 02:04:59,639
yet all tomorrow to try out your own Z

2348
02:04:56,969 --> 02:05:02,130
bias equations it's a pretty well

2349
02:04:59,639 --> 02:05:05,309
isolated thing and pretty easy

2350
02:05:02,130 --> 02:05:06,828
experiment with so you know take a look

2351
02:05:05,309 --> 02:05:08,880
see if you can figure it out yourself

2352
02:05:06,828 --> 02:05:11,308
see if you can make something that

2353
02:05:08,880 --> 02:05:13,739
produces nice results with sprites and

2354
02:05:11,309 --> 02:05:15,779
sorts them in in a way that's pretty

2355
02:05:13,738 --> 02:05:18,089
consistent with everything 3d that we

2356
02:05:15,779 --> 02:05:21,420
want to do in the game it'd be a really

2357
02:05:18,090 --> 02:05:25,980
good exercise really useful for people

2358
02:05:21,420 --> 02:05:27,569
to sort of you know see see what trout

2359
02:05:25,979 --> 02:05:28,618
their chops right like see if see if

2360
02:05:27,569 --> 02:05:30,238
you've learned something from all the

2361
02:05:28,618 --> 02:05:31,828
math we've done see if you can come up

2362
02:05:30,238 --> 02:05:33,509
with something if you just want to try

2363
02:05:31,828 --> 02:05:36,920
the thing that I said maybe you want to

2364
02:05:33,510 --> 02:05:39,980
try figuring out your own and you know

2365
02:05:36,920 --> 02:05:44,899
again would be a really great exercise

2366
02:05:39,979 --> 02:05:47,578
I'll be back here on Sunday I'm out of

2367
02:05:44,899 --> 02:05:49,529
I'm not around I'm I would say out of

2368
02:05:47,578 --> 02:05:52,920
the office but I guess I just mean I'm

2369
02:05:49,529 --> 02:05:56,550
not around tomorrow and so I will be

2370
02:05:52,920 --> 02:05:58,469
back on Sunday until then yeah again if

2371
02:05:56,550 --> 02:05:59,940
you do watch I got any further Mali

2372
02:05:58,469 --> 02:06:00,989
rocket stuff besides handmade here you

2373
02:05:59,939 --> 02:06:03,419
can always click on the little Mali

2374
02:06:00,988 --> 02:06:05,069
rocket head here and it will take you to

2375
02:06:03,420 --> 02:06:06,210
our other stuff our comic is out now

2376
02:06:05,069 --> 02:06:08,250
which I always try to point people

2377
02:06:06,210 --> 02:06:10,349
towards since just got released and

2378
02:06:08,250 --> 02:06:11,969
hardly anyone knows about it so if you

2379
02:06:10,349 --> 02:06:14,038
want comic to read you can always go to

2380
02:06:11,969 --> 02:06:15,989
me out of the infinite you can either go

2381
02:06:14,038 --> 02:06:18,779
to me how the infinite calm or you know

2382
02:06:15,988 --> 02:06:20,038
you can click on it through here and if

2383
02:06:18,779 --> 02:06:23,279
you want to find other stuff people ask

2384
02:06:20,038 --> 02:06:24,868
about 1935 all that stuff as we get it

2385
02:06:23,279 --> 02:06:28,229
it's always up here right we've got a

2386
02:06:24,868 --> 02:06:30,118
blog you can even go to news anyway

2387
02:06:28,229 --> 02:06:31,979
anywhere on here there's tons of mailing

2388
02:06:30,118 --> 02:06:34,288
list sign up places you can sign up for

2389
02:06:31,979 --> 02:06:36,149
our mailing lists all that stuff we send

2390
02:06:34,288 --> 02:06:38,488
out stuff as soon as we have something

2391
02:06:36,149 --> 02:06:41,038
official to announce so trust me as soon

2392
02:06:38,488 --> 02:06:42,299
as I want to show screenshots for 1935

2393
02:06:41,038 --> 02:06:45,269
you'll be getting a mailing it

2394
02:06:42,300 --> 02:06:49,199
I won't sneak them out and not tell

2395
02:06:45,270 --> 02:06:51,120
anyone I mean the point of putting games

2396
02:06:49,199 --> 02:06:52,979
out there is that you hope people buy

2397
02:06:51,119 --> 02:06:56,670
them so that you survive as a company

2398
02:06:52,979 --> 02:07:00,869
we're not gonna keep it hid from anybody

2399
02:06:56,670 --> 02:07:03,510
trust me so anyway that's it for today

2400
02:07:00,869 --> 02:07:06,359
and I will see everyone back here on

2401
02:07:03,510 --> 02:07:09,119
Sunday that point we'll get to see

2402
02:07:06,359 --> 02:07:11,789
whether or not Z plane projection is

2403
02:07:09,119 --> 02:07:14,970
useful or whether it's just a dumb idea

2404
02:07:11,789 --> 02:07:16,380
we had our sweatband on so I'm hoping

2405
02:07:14,970 --> 02:07:19,470
that that will increase the chances that

2406
02:07:16,380 --> 02:07:21,329
it's hardcore but you never know until

2407
02:07:19,470 --> 02:07:23,430
then have fun for everyone

2408
02:07:21,329 --> 02:07:25,640
and I'll see you on the Internet take it

2409
02:07:23,430 --> 02:07:25,640
easy everybody

