1
00:00:00,560 --> 00:00:04,439
hello everyone and welcome to hand made

2
00:00:03,060 --> 00:00:07,108
here on the show where we code complete

3
00:00:04,440 --> 00:00:09,449
game live on Twitch when my microphone

4
00:00:07,108 --> 00:00:11,190
does not get in the way I really need a

5
00:00:09,449 --> 00:00:12,959
longer cord for this thing it actually

6
00:00:11,189 --> 00:00:14,849
caused us to lose a whole episodes

7
00:00:12,960 --> 00:00:17,160
recording although we got it back from

8
00:00:14,849 --> 00:00:19,019
Twitter just because I can't even when I

9
00:00:17,160 --> 00:00:23,160
go down to like adjust it I'm in danger

10
00:00:19,019 --> 00:00:25,469
of bumping the power cord but anyway we

11
00:00:23,160 --> 00:00:27,778
will not last stop that us we will not

12
00:00:25,469 --> 00:00:29,608
let that stop us we are in the middle of

13
00:00:27,778 --> 00:00:31,649
doing some rendering code here on

14
00:00:29,609 --> 00:00:35,130
handmade hero and we found out on Friday

15
00:00:31,649 --> 00:00:36,960
much to our surprise that the

16
00:00:35,130 --> 00:00:39,719
optimization work that we did over the

17
00:00:36,960 --> 00:00:41,789
past two weeks to our renderer has left

18
00:00:39,719 --> 00:00:45,120
us with a renderer now that is actually

19
00:00:41,789 --> 00:00:49,140
running at 60 frames a second 1920 by

20
00:00:45,119 --> 00:00:50,820
1080 which we were not expecting I guess

21
00:00:49,140 --> 00:00:55,649
machines are just extremely fast these

22
00:00:50,820 --> 00:00:58,409
days and when you have a 2-d game you

23
00:00:55,649 --> 00:01:00,570
don't even need a GPU in the system

24
00:00:58,409 --> 00:01:02,189
anymore even if you're doing full sub

25
00:01:00,570 --> 00:01:04,618
pixel accurate rotation and all these

26
00:01:02,189 --> 00:01:06,118
are the sorts of things I guess we'll

27
00:01:04,618 --> 00:01:08,760
see if that holds up once we start

28
00:01:06,118 --> 00:01:11,489
throwing more sprites and stuff at it

29
00:01:08,760 --> 00:01:13,290
we'll see it's hard to say but we were

30
00:01:11,489 --> 00:01:16,530
all pretty shocked anyway at least I was

31
00:01:13,290 --> 00:01:19,020
to to find out kind of at the end of the

32
00:01:16,530 --> 00:01:24,090
day exactly how fast this thing was

33
00:01:19,019 --> 00:01:27,030
running so a little bit crazy a little

34
00:01:24,090 --> 00:01:28,920
bit crazy it's true but that's where

35
00:01:27,030 --> 00:01:30,599
we're at so we have some more work we

36
00:01:28,920 --> 00:01:32,040
need to do what we're gonna do this week

37
00:01:30,599 --> 00:01:34,169
is we're gonna clean up all of the

38
00:01:32,040 --> 00:01:36,479
render code now that we kind of have

39
00:01:34,170 --> 00:01:39,570
things roughly working we're gonna take

40
00:01:36,478 --> 00:01:41,879
a snapshot kind of and look at what we

41
00:01:39,569 --> 00:01:44,849
have at the end of that and then we're

42
00:01:41,879 --> 00:01:46,618
gonna make some estimates as to allude

43
00:01:44,849 --> 00:01:48,030
to these way back at the beginning of

44
00:01:46,618 --> 00:01:50,188
the optimization pass we're gonna try

45
00:01:48,030 --> 00:01:52,829
and make some estimates as to what we

46
00:01:50,188 --> 00:01:56,609
actually think our throughput should be

47
00:01:52,828 --> 00:01:57,929
and how much you know basically what do

48
00:01:56,609 --> 00:02:01,468
we think the renderer could run at

49
00:01:57,930 --> 00:02:02,939
capacity on this particular machine so

50
00:02:01,468 --> 00:02:04,709
that we have some idea of like where

51
00:02:02,938 --> 00:02:06,118
we're at in terms of that it may be that

52
00:02:04,709 --> 00:02:07,859
we're already pretty close to the metal

53
00:02:06,118 --> 00:02:10,618
it may be that we're actually far away

54
00:02:07,859 --> 00:02:12,830
we really don't know and so the goal is

55
00:02:10,618 --> 00:02:14,870
is going to be to try and like

56
00:02:12,830 --> 00:02:17,810
sort of catch that up try to try to make

57
00:02:14,870 --> 00:02:19,939
make some determination about that and

58
00:02:17,810 --> 00:02:21,319
it turns out that just by doing the

59
00:02:19,939 --> 00:02:23,000
straight porting work we needed to do to

60
00:02:21,319 --> 00:02:25,370
get things into optimizable state before

61
00:02:23,000 --> 00:02:27,919
we did that estimate happen to make our

62
00:02:25,370 --> 00:02:29,689
code extremely fast which i guess is

63
00:02:27,919 --> 00:02:32,509
just how it goes sometimes so hey we'll

64
00:02:29,689 --> 00:02:34,430
take it anyway we are going to be doing

65
00:02:32,509 --> 00:02:36,349
programming today we may do a little bit

66
00:02:34,430 --> 00:02:38,180
on the blackboard but we're gonna be

67
00:02:36,349 --> 00:02:40,699
doing programming today so if you want

68
00:02:38,180 --> 00:02:43,580
to follow along at home today is a day

69
00:02:40,699 --> 00:02:45,169
127 so unpack day 126 is source code

70
00:02:43,580 --> 00:02:46,520
from the source archive if you have

71
00:02:45,169 --> 00:02:52,399
pre-ordered the game and wanted to

72
00:02:46,520 --> 00:02:54,950
follow along at home alright so the

73
00:02:52,400 --> 00:02:56,180
first order of business that we have to

74
00:02:54,949 --> 00:02:57,769
do here is we have to deal with

75
00:02:56,180 --> 00:02:59,990
something that we have not really been

76
00:02:57,770 --> 00:03:02,330
dealing with and it's a it's something

77
00:02:59,990 --> 00:03:04,219
that we kind of have to tidy up and we

78
00:03:02,330 --> 00:03:05,750
left it till now because it wasn't

79
00:03:04,219 --> 00:03:07,340
really super relevant to any stuff for

80
00:03:05,750 --> 00:03:10,009
doing but in order to kind of finish

81
00:03:07,340 --> 00:03:12,740
things up we've got to address it at

82
00:03:10,009 --> 00:03:14,689
this point so if you remember where we

83
00:03:12,740 --> 00:03:17,989
left things we were running quite fast

84
00:03:14,689 --> 00:03:20,659
actually but we did not quite have a

85
00:03:17,989 --> 00:03:23,030
complete multi-threaded tiled renderer

86
00:03:20,659 --> 00:03:25,430
working because if you remember there

87
00:03:23,030 --> 00:03:26,959
are all of these black lines everywhere

88
00:03:25,430 --> 00:03:30,709
and so everything is running quite

89
00:03:26,959 --> 00:03:33,080
nicely actually but we shrunk our tiles

90
00:03:30,709 --> 00:03:34,280
by a little bit which is kind of nice

91
00:03:33,080 --> 00:03:35,870
because it allows us to see them but

92
00:03:34,280 --> 00:03:37,430
that's certainly not what we would ever

93
00:03:35,870 --> 00:03:38,780
ship in the game we don't want our game

94
00:03:37,430 --> 00:03:40,459
to look like it's running at a bunch of

95
00:03:38,780 --> 00:03:42,110
tiles not to mention the fact that it

96
00:03:40,459 --> 00:03:44,030
messes up all of our background tiles as

97
00:03:42,110 --> 00:03:46,459
well because they now have the lines in

98
00:03:44,030 --> 00:03:48,590
them too so there's all kinds of reasons

99
00:03:46,459 --> 00:03:51,920
why this is not a particularly good

100
00:03:48,590 --> 00:03:54,080
thing to have happening so what we would

101
00:03:51,919 --> 00:03:56,869
like to do is we would like to go ahead

102
00:03:54,080 --> 00:03:59,930
and and look at why we had to do that

103
00:03:56,870 --> 00:04:02,360
and sort of get into a position where we

104
00:03:59,930 --> 00:04:03,610
no longer have to worry about that

105
00:04:02,360 --> 00:04:07,130
mm-hmm

106
00:04:03,610 --> 00:04:09,290
also I have a few sort of tidbits I

107
00:04:07,129 --> 00:04:12,049
double checked these I looked them up

108
00:04:09,289 --> 00:04:14,569
and I also double check them with the

109
00:04:12,049 --> 00:04:16,459
rad folks who as you know are usually

110
00:04:14,569 --> 00:04:18,259
the authority I would go to when I want

111
00:04:16,459 --> 00:04:20,509
actually to actually know something

112
00:04:18,259 --> 00:04:22,819
about how the processor works in

113
00:04:20,509 --> 00:04:25,110
practice because they confront these

114
00:04:22,819 --> 00:04:28,439
sorts of things head-on all the time

115
00:04:25,110 --> 00:04:29,550
they confirmed for me I remember I kind

116
00:04:28,439 --> 00:04:33,779
of went back and forth on this a couple

117
00:04:29,550 --> 00:04:36,180
times but they confirmed for me that s

118
00:04:33,779 --> 00:04:39,359
fences are not necessary now you

119
00:04:36,180 --> 00:04:40,470
remember I said at the beginning when we

120
00:04:39,360 --> 00:04:42,569
started talking about multi-threaded

121
00:04:40,470 --> 00:04:44,670
code I said that the x64 processor had

122
00:04:42,569 --> 00:04:46,949
very strong memory ordering so rights

123
00:04:44,670 --> 00:04:48,210
were gonna be ordered in general but

124
00:04:46,949 --> 00:04:49,379
then I kind of backtracked that a little

125
00:04:48,209 --> 00:04:51,180
bit I was like well there's this s fence

126
00:04:49,379 --> 00:04:53,670
instruction now I don't know maybe my

127
00:04:51,180 --> 00:04:55,800
knowledge is out-of-date and so and I

128
00:04:53,670 --> 00:04:58,410
and I kind of said we kind of got a we

129
00:04:55,800 --> 00:05:00,090
kind of have to go do a little bit of

130
00:04:58,410 --> 00:05:01,260
reading or figure out what the what the

131
00:05:00,089 --> 00:05:06,049
truth is so we know whether we have to

132
00:05:01,259 --> 00:05:06,050
insert these or not and the answer is

133
00:05:06,110 --> 00:05:10,500
that it has not changed s fences are not

134
00:05:09,540 --> 00:05:13,950
necessary

135
00:05:10,500 --> 00:05:17,759
and so the reason that s fences are in

136
00:05:13,949 --> 00:05:19,259
there and do not necessary is because of

137
00:05:17,759 --> 00:05:21,360
a thing and this this actually was true

138
00:05:19,259 --> 00:05:24,509
all the way back it wasn't even a change

139
00:05:21,360 --> 00:05:26,129
from from my sort of knowledge of how

140
00:05:24,509 --> 00:05:27,539
things worked so that was pretty nice

141
00:05:26,129 --> 00:05:28,769
for me because a lot of times on

142
00:05:27,540 --> 00:05:31,169
handmade here when I go to teach

143
00:05:28,769 --> 00:05:32,639
something I have to kind of couch it and

144
00:05:31,168 --> 00:05:33,810
say well this is how it used to work and

145
00:05:32,639 --> 00:05:35,519
then I got to go check and oftentimes

146
00:05:33,810 --> 00:05:37,079
it's like it's been evolved somewhat

147
00:05:35,519 --> 00:05:39,000
since then so I got to be like alright

148
00:05:37,079 --> 00:05:40,740
remember I said this well that's not

149
00:05:39,000 --> 00:05:44,009
exactly true anymore stuff like this but

150
00:05:40,740 --> 00:05:45,680
this is still the same since when I

151
00:05:44,009 --> 00:05:47,879
first learned it so that's kind of nice

152
00:05:45,680 --> 00:05:49,769
but anyway what I want to talk about

153
00:05:47,879 --> 00:05:55,139
here is a thing called right combining

154
00:05:49,769 --> 00:05:56,728
memory really quickly so essentially the

155
00:05:55,139 --> 00:05:58,949
way things work in the processor

156
00:05:56,728 --> 00:06:00,029
hopefully it's it's all sort of sunk in

157
00:05:58,949 --> 00:06:01,529
by now since we've talked about this

158
00:06:00,029 --> 00:06:04,529
many many many many times is that we

159
00:06:01,529 --> 00:06:06,389
have a CPU and it's got registers right

160
00:06:04,529 --> 00:06:08,279
and the registers are where things

161
00:06:06,389 --> 00:06:09,689
actually happen so we kind of have these

162
00:06:08,279 --> 00:06:11,069
registers and maybe it's a sim D

163
00:06:09,689 --> 00:06:12,540
register or something like this so it's

164
00:06:11,069 --> 00:06:14,550
wide it's got a bunch of values who

165
00:06:12,540 --> 00:06:17,129
knows but point being these registers

166
00:06:14,550 --> 00:06:20,009
then get written or they get read from

167
00:06:17,129 --> 00:06:22,620
the cache right and the cache is the

168
00:06:20,009 --> 00:06:24,360
thing that basically stores the contents

169
00:06:22,620 --> 00:06:27,000
of memory locations that are being

170
00:06:24,360 --> 00:06:28,290
frequently used by this processor well

171
00:06:27,000 --> 00:06:29,850
anything that gets used by the processor

172
00:06:28,290 --> 00:06:32,280
goes into the cache first before it is

173
00:06:29,850 --> 00:06:34,110
used at least most of the time and then

174
00:06:32,279 --> 00:06:35,399
you know it gets operated on in the

175
00:06:34,110 --> 00:06:37,169
cache then later it will get put back

176
00:06:35,399 --> 00:06:38,069
out to memory so memory is out here

177
00:06:37,168 --> 00:06:39,509
somewhere and

178
00:06:38,069 --> 00:06:41,159
much slower so we're working in the cash

179
00:06:39,509 --> 00:06:42,810
and then things kind of come back and

180
00:06:41,160 --> 00:06:44,310
forth in and out and so on and this cash

181
00:06:42,810 --> 00:06:46,319
also happens to be a thing we talked

182
00:06:44,310 --> 00:06:48,000
about cash snooping where there's other

183
00:06:46,319 --> 00:06:49,529
processors and their caches and they

184
00:06:48,000 --> 00:06:51,120
talk to each other to figure out who

185
00:06:49,529 --> 00:06:54,059
owns what memory at what times and all

186
00:06:51,120 --> 00:06:55,920
this other sorts of good stuff so the

187
00:06:54,060 --> 00:06:57,000
answer in terms of fencing we talked

188
00:06:55,920 --> 00:06:59,610
about this you should all know what

189
00:06:57,000 --> 00:07:03,930
fencing is on the CPU side CPU fencing

190
00:06:59,610 --> 00:07:06,270
the answer is on the x64 right there is

191
00:07:03,930 --> 00:07:09,360
no need to worry about right ordering

192
00:07:06,269 --> 00:07:11,009
because rights are always ordered and so

193
00:07:09,360 --> 00:07:13,379
the order in which you see the rights

194
00:07:11,009 --> 00:07:15,029
occur in the code meaning whatever the

195
00:07:13,379 --> 00:07:17,430
compiler outputs in the order those

196
00:07:15,029 --> 00:07:19,349
rights will be retired in that order ok

197
00:07:17,430 --> 00:07:20,759
so we still need that right barrier

198
00:07:19,350 --> 00:07:22,200
there because the right barrier remember

199
00:07:20,759 --> 00:07:23,610
is not an instruction it's just a thing

200
00:07:22,199 --> 00:07:26,279
that tells the compiler not to move

201
00:07:23,610 --> 00:07:28,050
stores around but the question was do we

202
00:07:26,279 --> 00:07:32,759
need to also tell the CPU not to move

203
00:07:28,050 --> 00:07:34,920
them around ok and so the answer as to

204
00:07:32,759 --> 00:07:36,329
why that offense is even there if the

205
00:07:34,920 --> 00:07:39,270
CPU is always ordering instructions is

206
00:07:36,329 --> 00:07:43,829
because sometimes there's actually a

207
00:07:39,269 --> 00:07:45,329
concept of special memory right in some

208
00:07:43,829 --> 00:07:46,919
sense and and I guess specials probably

209
00:07:45,329 --> 00:07:48,810
the wrong word from it let's just say

210
00:07:46,920 --> 00:07:53,460
that there are things that are memory

211
00:07:48,810 --> 00:07:54,930
types ok so not all memory is treated

212
00:07:53,459 --> 00:07:56,399
the same by the processors basically

213
00:07:54,930 --> 00:07:58,259
what this means normally when we have

214
00:07:56,399 --> 00:07:59,159
memory that we allocated and we know

215
00:07:58,259 --> 00:08:00,629
what's going on with it

216
00:07:59,160 --> 00:08:02,310
it's something we got from the operating

217
00:08:00,629 --> 00:08:04,800
system is just plain old vanilla memory

218
00:08:02,310 --> 00:08:06,420
for our use those rights will be ordered

219
00:08:04,800 --> 00:08:07,949
so in this case like for example this

220
00:08:06,420 --> 00:08:10,050
stuff right here it's all just vanilla

221
00:08:07,949 --> 00:08:11,039
stuff it was declared on the stack or in

222
00:08:10,050 --> 00:08:12,930
the heap or something like this

223
00:08:11,040 --> 00:08:14,400
happening there is no need to worry

224
00:08:12,930 --> 00:08:17,400
about it those rights are strongly

225
00:08:14,399 --> 00:08:18,810
ordered but there is another thing well

226
00:08:17,399 --> 00:08:21,419
I already wrote it I'll just point it up

227
00:08:18,810 --> 00:08:22,949
here called right combining memory and

228
00:08:21,420 --> 00:08:24,180
there's also other types of memory the

229
00:08:22,949 --> 00:08:25,589
processor has different ways you can

230
00:08:24,180 --> 00:08:27,720
think about memory so when you have a

231
00:08:25,589 --> 00:08:29,489
special circumstance sometimes you get a

232
00:08:27,720 --> 00:08:31,200
different type of memory and right

233
00:08:29,490 --> 00:08:32,639
combining memory for example is one of

234
00:08:31,199 --> 00:08:37,830
those types of memory and what that

235
00:08:32,639 --> 00:08:39,990
usually is is if the hardware like like

236
00:08:37,830 --> 00:08:44,070
say a GPU or something like this right

237
00:08:39,990 --> 00:08:46,200
in fact I'll just write GPU here so if a

238
00:08:44,070 --> 00:08:49,740
GPU where something has some memory out

239
00:08:46,200 --> 00:08:52,410
on it out on the card itself and the CPU

240
00:08:49,740 --> 00:08:54,600
on the the sort of the the

241
00:08:52,409 --> 00:08:57,419
bored side of things has mapped that

242
00:08:54,600 --> 00:08:59,370
memory right so basically the GPU this

243
00:08:57,419 --> 00:09:02,519
these two memory regions are basically

244
00:08:59,370 --> 00:09:04,589
like coinciding right so we have some

245
00:09:02,519 --> 00:09:06,870
GPU memory and it's backed by some

246
00:09:04,589 --> 00:09:08,730
memory on the on the mainboard and like

247
00:09:06,870 --> 00:09:11,490
the CPU is gonna write into this memory

248
00:09:08,730 --> 00:09:13,589
somewhere right and then the GPU like

249
00:09:11,490 --> 00:09:15,389
the PCI bus is gonna you know sort of

250
00:09:13,589 --> 00:09:17,939
sync these across to the GPU or stuff

251
00:09:15,389 --> 00:09:21,720
like this right so if we have some weird

252
00:09:17,938 --> 00:09:23,879
stuff going on here what can happen

253
00:09:21,720 --> 00:09:25,769
sometimes is the memory in the machine

254
00:09:23,879 --> 00:09:27,420
if it has special constraints like this

255
00:09:25,769 --> 00:09:29,578
all sorts of weird things happen once

256
00:09:27,419 --> 00:09:31,229
the PCI bus once the GPU is like looking

257
00:09:29,578 --> 00:09:33,539
at memory you're also you know who knows

258
00:09:31,230 --> 00:09:35,730
what's happening right when the CPU is

259
00:09:33,539 --> 00:09:38,009
writing to memory like this memory that

260
00:09:35,730 --> 00:09:41,278
has special Hardware consequences beyond

261
00:09:38,009 --> 00:09:43,470
the normal just storage of bits then

262
00:09:41,278 --> 00:09:45,299
what happens is it has to write out

263
00:09:43,470 --> 00:09:50,850
cache lines in a carefully considered

264
00:09:45,299 --> 00:09:52,620
way okay because whenever it decides to

265
00:09:50,850 --> 00:09:55,699
actually flush a cache line out to

266
00:09:52,620 --> 00:09:58,528
memory and make that considered a write

267
00:09:55,698 --> 00:10:00,508
the G it will actually have consequences

268
00:09:58,528 --> 00:10:02,639
in terms of the speed at which things

269
00:10:00,509 --> 00:10:04,379
can be done because it has to make sure

270
00:10:02,639 --> 00:10:05,579
that the GPU can see it and then it's

271
00:10:04,379 --> 00:10:07,230
visible in the right way and that the

272
00:10:05,578 --> 00:10:08,818
GPU wasn't looking at it so maybe that's

273
00:10:07,230 --> 00:10:11,100
the lock with system bus who knows what

274
00:10:08,818 --> 00:10:13,469
happens I don't have any idea I don't

275
00:10:11,100 --> 00:10:16,769
study these kinds of things at all but

276
00:10:13,470 --> 00:10:18,930
the point is complex stuff starts to be

277
00:10:16,769 --> 00:10:22,799
afoot here and what that means is the

278
00:10:18,929 --> 00:10:24,888
CPU actually is much slower at dealing

279
00:10:22,799 --> 00:10:27,870
with writes that go out to this memory

280
00:10:24,889 --> 00:10:31,259
so what it will often do is try to

281
00:10:27,870 --> 00:10:32,879
combine right this is where the right

282
00:10:31,259 --> 00:10:36,750
combining comes to it will try to

283
00:10:32,879 --> 00:10:41,269
combine writes to this memory so that it

284
00:10:36,750 --> 00:10:44,909
does not actually have to flush them out

285
00:10:41,269 --> 00:10:47,129
serially right so the example here would

286
00:10:44,909 --> 00:10:49,049
be let's say we have two cache lines

287
00:10:47,129 --> 00:10:52,019
right here's cache line a and here's

288
00:10:49,049 --> 00:10:53,909
cache line B okay the CPU writes to this

289
00:10:52,019 --> 00:10:56,370
part of this cache line and then it

290
00:10:53,909 --> 00:10:58,708
writes to this part of this cache line

291
00:10:56,370 --> 00:11:00,360
right then it writes to this part of

292
00:10:58,708 --> 00:11:03,629
this cache line and then it writes to

293
00:11:00,360 --> 00:11:05,490
this part of this cache line right well

294
00:11:03,629 --> 00:11:06,299
with right combining memory it might be

295
00:11:05,490 --> 00:11:08,159
smarter for the

296
00:11:06,299 --> 00:11:10,049
you two wait and see what's going on

297
00:11:08,159 --> 00:11:11,669
here wait for these to kind of get

298
00:11:10,049 --> 00:11:15,179
filled up with all those rights and then

299
00:11:11,669 --> 00:11:17,669
flush them out right but the problem is

300
00:11:15,179 --> 00:11:20,759
here if you know let's say we just had

301
00:11:17,669 --> 00:11:22,500
the rights in order we wrote you know

302
00:11:20,759 --> 00:11:23,639
this was a bad idea for me to label them

303
00:11:22,500 --> 00:11:25,169
that way let me write them in the order

304
00:11:23,639 --> 00:11:27,059
they're written so we have this thing

305
00:11:25,169 --> 00:11:28,620
gets written one this thing gets written

306
00:11:27,059 --> 00:11:31,529
two then this thing gets written three

307
00:11:28,620 --> 00:11:33,269
right well it may end up in a situation

308
00:11:31,529 --> 00:11:35,819
where this thing wants to get flushed

309
00:11:33,269 --> 00:11:37,529
but this thing wants to be held because

310
00:11:35,820 --> 00:11:38,850
it knows that the three is going in

311
00:11:37,529 --> 00:11:40,289
there and it doesn't want to write it

312
00:11:38,850 --> 00:11:42,149
out to memory until the three is in

313
00:11:40,289 --> 00:11:44,839
there so only has to do one right of

314
00:11:42,149 --> 00:11:47,429
this cash line out to that memory right

315
00:11:44,840 --> 00:11:50,399
then what would happen is the two may

316
00:11:47,429 --> 00:11:52,319
end up happening before the one so what

317
00:11:50,399 --> 00:11:56,399
the s fence is is the S fence is

318
00:11:52,320 --> 00:11:58,890
actually in there only for putting in

319
00:11:56,399 --> 00:12:00,720
memory fences when you are writing to

320
00:11:58,889 --> 00:12:04,529
things like right combining memory which

321
00:12:00,720 --> 00:12:07,019
may reorder rights for you if you are

322
00:12:04,529 --> 00:12:08,939
not writing to that kind of memory then

323
00:12:07,019 --> 00:12:11,069
you do not ever have to worry about s

324
00:12:08,940 --> 00:12:12,900
fence because normal memory never needs

325
00:12:11,070 --> 00:12:15,060
an s fence the rights are ordered

326
00:12:12,899 --> 00:12:19,139
automatically and the cache works

327
00:12:15,059 --> 00:12:20,939
properly no matter what you do right so

328
00:12:19,139 --> 00:12:23,580
I just thought I'd point that out okay

329
00:12:20,940 --> 00:12:24,960
so that's that that's right combining if

330
00:12:23,580 --> 00:12:26,340
that's what the S fences are for so we

331
00:12:24,960 --> 00:12:28,500
don't need that s fence and I've double

332
00:12:26,340 --> 00:12:30,990
triple verified that so we're all good

333
00:12:28,500 --> 00:12:32,850
we only need the right barrier that's

334
00:12:30,990 --> 00:12:34,799
the only part that we have to ensure is

335
00:12:32,850 --> 00:12:37,590
working properly and remember our

336
00:12:34,799 --> 00:12:40,169
interlock compare exchanges would be

337
00:12:37,590 --> 00:12:43,290
increased inserting memory fences anyway

338
00:12:40,169 --> 00:12:44,939
so those are also sensing us but we

339
00:12:43,289 --> 00:12:47,250
don't even really need to care about

340
00:12:44,940 --> 00:12:48,690
that too much because the the right

341
00:12:47,250 --> 00:12:55,590
barrier is already happening for us up

342
00:12:48,690 --> 00:12:58,410
here okay so let's talk about our other

343
00:12:55,590 --> 00:13:00,480
problem that we have here which is the

344
00:12:58,409 --> 00:13:02,009
the whole problem with us shrinking

345
00:13:00,480 --> 00:13:04,259
everything so if we went down here to

346
00:13:02,009 --> 00:13:06,539
our tiles you can see where we do our

347
00:13:04,259 --> 00:13:09,299
tile cueing here's our tiled render

348
00:13:06,539 --> 00:13:10,860
group to output thing which goes through

349
00:13:09,299 --> 00:13:12,809
each of the tiles that we want to render

350
00:13:10,860 --> 00:13:15,000
and it renders them but of course it

351
00:13:12,809 --> 00:13:16,649
shrinks them first and you can kind of

352
00:13:15,000 --> 00:13:19,620
see here that that it's doing this

353
00:13:16,649 --> 00:13:20,579
shrinking right and so we have to ask

354
00:13:19,620 --> 00:13:23,399
ourselves

355
00:13:20,580 --> 00:13:24,660
what is going on here and why did we

356
00:13:23,399 --> 00:13:27,929
have to do this and there's two reasons

357
00:13:24,659 --> 00:13:30,689
that we had to do it and both of them we

358
00:13:27,929 --> 00:13:33,269
can fix by being a little bit smarter if

359
00:13:30,690 --> 00:13:34,800
there's one sort of nasty element to it

360
00:13:33,269 --> 00:13:36,689
and you'll kind of see what we have to

361
00:13:34,799 --> 00:13:38,039
do to work around that but but most of

362
00:13:36,690 --> 00:13:40,290
its actually just sort of a head end

363
00:13:38,039 --> 00:13:42,629
problem that we can solve so let's talk

364
00:13:40,289 --> 00:13:46,230
about why we were doing this shrinking

365
00:13:42,629 --> 00:13:53,159
okay so let's talk about our tiles and

366
00:13:46,230 --> 00:13:55,620
our alignment here okay so the first

367
00:13:53,159 --> 00:13:58,139
problem that we have right and you can

368
00:13:55,620 --> 00:13:59,909
kind of see that this is this is going

369
00:13:58,139 --> 00:14:02,639
to be the case is we are always

370
00:13:59,909 --> 00:14:05,370
processing for pixels at a time right so

371
00:14:02,639 --> 00:14:08,639
at a bare minimum when we are doing this

372
00:14:05,370 --> 00:14:11,490
rendering we kind of have to know that

373
00:14:08,639 --> 00:14:15,059
we can always process for pixels at a

374
00:14:11,490 --> 00:14:18,330
time right so if for example our bitmap

375
00:14:15,059 --> 00:14:20,069
that we had allocated was not going to

376
00:14:18,330 --> 00:14:22,590
be a multiple of four so let's say that

377
00:14:20,070 --> 00:14:25,050
we look at how you know why this thing

378
00:14:22,590 --> 00:14:27,660
is and in fact I believe we actually had

379
00:14:25,049 --> 00:14:28,469
this this circumstance already if we

380
00:14:27,659 --> 00:14:31,019
take a look here

381
00:14:28,470 --> 00:14:32,160
I think 950 because we had nineteen

382
00:14:31,019 --> 00:14:33,689
twenty divided by two

383
00:14:32,159 --> 00:14:37,259
right Coop's nineteen twenty eight

384
00:14:33,690 --> 00:14:38,250
divided - oh it was 960 never mind all

385
00:14:37,259 --> 00:14:39,419
right never mind I was gonna say we

386
00:14:38,250 --> 00:14:42,480
might even had that with our original

387
00:14:39,419 --> 00:14:44,189
thing but never mind so point being we

388
00:14:42,480 --> 00:14:46,019
need to make sure first of all that if

389
00:14:44,190 --> 00:14:49,020
we always that if we break things up

390
00:14:46,019 --> 00:14:51,689
into sort of four pixel buckets that

391
00:14:49,019 --> 00:14:53,730
they're actually always will be four

392
00:14:51,690 --> 00:14:55,470
pixel buckets to do and that we don't

393
00:14:53,730 --> 00:14:56,820
end up with like a three pixel bucket at

394
00:14:55,470 --> 00:14:59,070
the end and then some like either

395
00:14:56,820 --> 00:15:01,620
invalid or like the first pixel of the

396
00:14:59,070 --> 00:15:02,970
next line shows up over here right so

397
00:15:01,620 --> 00:15:04,679
the first thing we have to do is make

398
00:15:02,970 --> 00:15:06,210
sure we have to set up the memory so

399
00:15:04,679 --> 00:15:10,679
that we know we always have a even

400
00:15:06,210 --> 00:15:12,509
multiple of four pixels on every for

401
00:15:10,679 --> 00:15:13,889
every row right that just has that we

402
00:15:12,509 --> 00:15:17,009
just flat out I have to do that that's a

403
00:15:13,889 --> 00:15:18,569
requirement so there's that but beyond

404
00:15:17,009 --> 00:15:20,519
that we also have to look at the fact

405
00:15:18,570 --> 00:15:22,110
that we are actually currently writing

406
00:15:20,519 --> 00:15:23,909
our stuff unaligned

407
00:15:22,110 --> 00:15:26,100
right we do a load on the lines and we

408
00:15:23,909 --> 00:15:29,129
do a store on a line for the desk and we

409
00:15:26,100 --> 00:15:30,779
actually start right on or end right on

410
00:15:29,129 --> 00:15:33,179
the complete pixel remember we had our

411
00:15:30,779 --> 00:15:33,809
choice of doing that and since start up

412
00:15:33,179 --> 00:15:35,370
with easier

413
00:15:33,809 --> 00:15:37,199
right masking what we chose to do was

414
00:15:35,370 --> 00:15:39,360
end on the correct pixel but what that

415
00:15:37,200 --> 00:15:41,160
means is that if we always end on the

416
00:15:39,360 --> 00:15:43,740
correct pixel that means if we were

417
00:15:41,159 --> 00:15:46,049
actually doing something that was like

418
00:15:43,740 --> 00:15:47,430
this sort of trying to think of what the

419
00:15:46,049 --> 00:15:50,338
right look read if we're always ending

420
00:15:47,429 --> 00:15:54,329
on a for right and we were bleeding

421
00:15:50,339 --> 00:15:55,890
something in here then that means we're

422
00:15:54,330 --> 00:15:59,220
always gonna kind of have a thing where

423
00:15:55,889 --> 00:16:00,659
the the blit is actually sort of

424
00:15:59,220 --> 00:16:04,970
operating on sort of this with this

425
00:16:00,659 --> 00:16:04,969
wider region and I have to think about

426
00:16:10,070 --> 00:16:14,250
thinking about this I don't know that

427
00:16:12,539 --> 00:16:16,049
that ever actually matters for what

428
00:16:14,250 --> 00:16:21,509
we're doing though now that I think

429
00:16:16,049 --> 00:16:22,620
about it I was gonna say something here

430
00:16:21,509 --> 00:16:23,850
about that alignment but I don't know

431
00:16:22,620 --> 00:16:27,539
that we actually really care that much

432
00:16:23,850 --> 00:16:29,670
about that alignment that alignment may

433
00:16:27,539 --> 00:16:33,209
always be fine because either it got

434
00:16:29,669 --> 00:16:34,740
clipped to the boundary or it didn't so

435
00:16:33,210 --> 00:16:35,610
yeah so we're okay there never mind so

436
00:16:34,740 --> 00:16:36,839
we don't have to worry too much about

437
00:16:35,610 --> 00:16:38,730
that actually I think that actually

438
00:16:36,839 --> 00:16:42,900
could stay what we do have to worry

439
00:16:38,730 --> 00:16:45,480
about is again our tiles right our tiles

440
00:16:42,899 --> 00:16:47,429
have to be multiples of four always

441
00:16:45,480 --> 00:16:48,960
because if our tiles aren't multiples of

442
00:16:47,429 --> 00:16:50,849
four then if our even though our bitmap

443
00:16:48,960 --> 00:16:53,540
was multiple of four we would again

444
00:16:50,850 --> 00:16:56,009
create this situation where we have

445
00:16:53,539 --> 00:16:57,809
tiles that don't quite align to this

446
00:16:56,009 --> 00:17:00,299
four pixel boundary now you may wonder

447
00:16:57,809 --> 00:17:02,549
why that's actually relevant because who

448
00:17:00,299 --> 00:17:04,169
cares that the tiles are or aren't the

449
00:17:02,549 --> 00:17:06,389
reason for that is because we want to

450
00:17:04,170 --> 00:17:08,100
avoid a situation I'm going to go ahead

451
00:17:06,390 --> 00:17:09,900
and mark off some some things here so

452
00:17:08,099 --> 00:17:12,328
here's four pixels four pixels four

453
00:17:09,900 --> 00:17:15,089
pixels four pixels right suppose that

454
00:17:12,328 --> 00:17:17,879
our tile boundary happened right here so

455
00:17:15,088 --> 00:17:20,220
there's two pixels on in this tile and

456
00:17:17,880 --> 00:17:24,449
two pixels on this tile right so here

457
00:17:20,220 --> 00:17:26,039
are the pixels so this is tile a over

458
00:17:24,449 --> 00:17:28,140
here in these two pixels belong to tile

459
00:17:26,039 --> 00:17:30,119
a and here's the tile B and these pixels

460
00:17:28,140 --> 00:17:32,300
the belong to tile B right

461
00:17:30,119 --> 00:17:35,729
so squares we have a situation like that

462
00:17:32,299 --> 00:17:37,799
the problem that we will end up in if we

463
00:17:35,730 --> 00:17:39,660
allow this to happen is that our tiles

464
00:17:37,799 --> 00:17:41,700
are now being rendered by two separate

465
00:17:39,660 --> 00:17:43,410
threads potentially right because the

466
00:17:41,700 --> 00:17:44,519
work queue could decide well you know

467
00:17:43,410 --> 00:17:46,470
we're not doing anything special there

468
00:17:44,519 --> 00:17:47,549
the work you could easily hand this over

469
00:17:46,470 --> 00:17:50,789
to korzy

470
00:17:47,549 --> 00:17:52,680
right and this over to core one and they

471
00:17:50,789 --> 00:17:54,539
could be happily going along processing

472
00:17:52,680 --> 00:17:57,930
these at the exact same time now what

473
00:17:54,539 --> 00:17:59,250
that means is remember interlocked

474
00:17:57,930 --> 00:18:02,039
increments and those sorts of things

475
00:17:59,250 --> 00:18:03,809
always work synchronous with the CP with

476
00:18:02,039 --> 00:18:06,480
the cores and won't have a problem but

477
00:18:03,809 --> 00:18:10,440
these here are not anything like that we

478
00:18:06,480 --> 00:18:13,950
load in an unaligned thing here right so

479
00:18:10,440 --> 00:18:15,960
we would potentially be loading in this

480
00:18:13,950 --> 00:18:16,980
part here right that we're trying to get

481
00:18:15,960 --> 00:18:20,549
at

482
00:18:16,980 --> 00:18:22,019
we may be loading in some kind of a for

483
00:18:20,549 --> 00:18:23,759
wide thing like let's say that this

484
00:18:22,019 --> 00:18:26,279
happened to be you know if we if we back

485
00:18:23,759 --> 00:18:28,769
if we were doing it so that we ended

486
00:18:26,279 --> 00:18:31,619
right here maybe we load this part right

487
00:18:28,769 --> 00:18:34,619
here in right we load this into core

488
00:18:31,619 --> 00:18:36,959
zero so it's got the AABB there right

489
00:18:34,619 --> 00:18:39,000
but then core one may come and load that

490
00:18:36,960 --> 00:18:42,000
exact same thing in right it may also

491
00:18:39,000 --> 00:18:44,430
load in AABB they both will process it

492
00:18:42,000 --> 00:18:47,460
and now they'll both try to right back

493
00:18:44,430 --> 00:18:49,289
to it right and the problem is if they

494
00:18:47,460 --> 00:18:52,230
both are trying to right back to this

495
00:18:49,289 --> 00:18:54,690
same piece of data one of the or the

496
00:18:52,230 --> 00:18:57,870
other will overwrite the work that the

497
00:18:54,690 --> 00:19:00,390
other person did right because this

498
00:18:57,869 --> 00:19:02,429
person's going to replace the a a with

499
00:19:00,390 --> 00:19:04,020
some new stuff right it's going to

500
00:19:02,430 --> 00:19:06,210
replace that with something else right

501
00:19:04,019 --> 00:19:08,849
like X X or something and it's gonna try

502
00:19:06,210 --> 00:19:10,650
to write back x x.b be here but then

503
00:19:08,849 --> 00:19:12,059
this guy is going to replace the BV with

504
00:19:10,650 --> 00:19:14,070
something else right it's gonna replace

505
00:19:12,059 --> 00:19:16,169
it with y Y or something so what's going

506
00:19:14,069 --> 00:19:18,450
to try to write back YY but when it

507
00:19:16,170 --> 00:19:21,870
tries to write back YY the a and the a

508
00:19:18,450 --> 00:19:24,539
are still in that for wide block so the

509
00:19:21,869 --> 00:19:26,069
a a will overwrite the X X and undo the

510
00:19:24,539 --> 00:19:30,029
work that this core did if this core

511
00:19:26,069 --> 00:19:32,549
retires the memory afterwards right so

512
00:19:30,029 --> 00:19:33,720
again strong right ordering is all fine

513
00:19:32,549 --> 00:19:35,250
but you have to remember that once

514
00:19:33,720 --> 00:19:37,500
things get loaded into a processor

515
00:19:35,250 --> 00:19:38,880
they're in the register of the processor

516
00:19:37,500 --> 00:19:41,339
and that's what you're working on the

517
00:19:38,880 --> 00:19:43,440
cache has no idea that that's supposed

518
00:19:41,339 --> 00:19:45,149
to refer to it or until you go back and

519
00:19:43,440 --> 00:19:46,680
do a store later so you're constantly

520
00:19:45,150 --> 00:19:47,790
talking about like moving this memory

521
00:19:46,680 --> 00:19:49,890
into the bus are working out and putting

522
00:19:47,789 --> 00:19:52,200
it back out during that time when it is

523
00:19:49,890 --> 00:19:54,810
inside the processors registers you have

524
00:19:52,200 --> 00:19:56,610
no synchronization with the other cores

525
00:19:54,809 --> 00:19:58,980
at all and so you'd better make sure

526
00:19:56,609 --> 00:20:01,109
that no two people are going to write

527
00:19:58,980 --> 00:20:04,170
over what each other we're trying

528
00:20:01,109 --> 00:20:07,349
to store as data right so we need to

529
00:20:04,170 --> 00:20:09,509
make sure that we align we absolutely

530
00:20:07,349 --> 00:20:11,339
have to align I don't know what just

531
00:20:09,509 --> 00:20:12,869
happened there okay we have to make sure

532
00:20:11,339 --> 00:20:14,609
that we align our tiles to these four

533
00:20:12,869 --> 00:20:17,039
wide boundaries and that nobody is ever

534
00:20:14,609 --> 00:20:21,178
doing any kind of unaligned fetching

535
00:20:17,039 --> 00:20:24,149
across those tile boundaries in any way

536
00:20:21,179 --> 00:20:26,820
but I'm pretty sure there's no way they

537
00:20:24,150 --> 00:20:28,650
can so even though we're doing unaligned

538
00:20:26,819 --> 00:20:30,928
here I don't think that actually matters

539
00:20:28,650 --> 00:20:32,730
at all we timed it we notice that the

540
00:20:30,929 --> 00:20:36,210
lined or unlined this didn't seem to

541
00:20:32,730 --> 00:20:38,039
matter so that was fine we can always

542
00:20:36,210 --> 00:20:39,179
reject that again later but what we do

543
00:20:38,039 --> 00:20:40,619
need to make sure so we can make that

544
00:20:39,179 --> 00:20:42,240
online we just have to make sure that it

545
00:20:40,619 --> 00:20:44,099
never crosses that boundary we know it

546
00:20:42,240 --> 00:20:45,058
won't cross the boundary at the end but

547
00:20:44,099 --> 00:20:46,048
in order to make sure that it also

548
00:20:45,058 --> 00:20:47,220
doesn't cross the mouth beginning we

549
00:20:46,048 --> 00:20:51,480
need to make sure that these tiles are

550
00:20:47,220 --> 00:20:55,769
always exactly four wide so let's start

551
00:20:51,480 --> 00:20:57,210
by doing that part and and we should be

552
00:20:55,769 --> 00:20:58,500
able to make sure actually just by

553
00:20:57,210 --> 00:20:59,519
assertion that the rest of its true

554
00:20:58,500 --> 00:21:02,369
because it seems like it's already

555
00:20:59,519 --> 00:21:04,048
actually is true and that'll be fine so

556
00:21:02,369 --> 00:21:05,428
what we need to do here is say okay

557
00:21:04,048 --> 00:21:08,940
we've got our tile with we've got our

558
00:21:05,429 --> 00:21:11,730
tile height that we computed and we need

559
00:21:08,940 --> 00:21:13,558
to make sure that those are rounded to

560
00:21:11,730 --> 00:21:15,599
the nearest four because if we don't

561
00:21:13,558 --> 00:21:17,399
then we won't be able to align this

562
00:21:15,599 --> 00:21:19,139
right furthermore we need to make sure

563
00:21:17,400 --> 00:21:22,740
that anywhere that we're ready to is

564
00:21:19,140 --> 00:21:24,570
actually aligned to the actual four byte

565
00:21:22,740 --> 00:21:28,589
boundary absolutely because that's what

566
00:21:24,569 --> 00:21:30,659
we're actually looking at so we kind of

567
00:21:28,589 --> 00:21:37,379
needed it to make those two things

568
00:21:30,660 --> 00:21:39,929
happen exactly no you know what I missed

569
00:21:37,380 --> 00:21:44,340
one thing we are doing our load

570
00:21:39,929 --> 00:21:45,480
unaligned but all okay so we do have to

571
00:21:44,339 --> 00:21:48,659
do the thing that I was thinking of

572
00:21:45,480 --> 00:21:51,750
sorry haven't paged this entire routine

573
00:21:48,660 --> 00:21:55,169
in it ends wherever the bitmap ends

574
00:21:51,750 --> 00:21:56,759
right so it's gonna end wherever the

575
00:21:55,169 --> 00:21:59,520
bitmap happened in which may be in the

576
00:21:56,759 --> 00:22:00,179
middle but I guess that now that's still

577
00:21:59,519 --> 00:22:02,190
okay too

578
00:22:00,179 --> 00:22:04,650
it really just does not matter because

579
00:22:02,190 --> 00:22:07,350
as long as the it's clipped to the tiles

580
00:22:04,650 --> 00:22:09,450
I think we're fine all right never mind

581
00:22:07,349 --> 00:22:12,689
I had a like a brains faster than a

582
00:22:09,450 --> 00:22:13,910
reverse brain spasm okay so back to our

583
00:22:12,690 --> 00:22:16,070
plan here

584
00:22:13,910 --> 00:22:17,900
what we need to do is we need to make

585
00:22:16,069 --> 00:22:20,269
sure that we're going to always get

586
00:22:17,900 --> 00:22:22,730
aligned tiles and so what we want to do

587
00:22:20,269 --> 00:22:25,700
first of all is say let's make sure that

588
00:22:22,730 --> 00:22:29,180
the output target always actually allows

589
00:22:25,700 --> 00:22:30,289
us to get that that sort of to get the

590
00:22:29,180 --> 00:22:32,480
amount of the tiling that we actually

591
00:22:30,289 --> 00:22:35,299
need so what we can do is we can just

592
00:22:32,480 --> 00:22:38,150
count on if we want to we can count on

593
00:22:35,299 --> 00:22:41,779
the upstream code to always allocate the

594
00:22:38,150 --> 00:22:42,410
target to basically be correct if that

595
00:22:41,779 --> 00:22:44,690
makes sense

596
00:22:42,410 --> 00:22:45,950
so we have our output target and you

597
00:22:44,690 --> 00:22:48,289
know what I realize this is probably

598
00:22:45,950 --> 00:22:51,049
actually wrong here because the tile

599
00:22:48,289 --> 00:22:52,819
width we need to think a little bit more

600
00:22:51,049 --> 00:22:57,079
about what this this actually means but

601
00:22:52,819 --> 00:22:58,939
we can we can sort of talk about that in

602
00:22:57,079 --> 00:23:00,529
a second what we want to do here is we

603
00:22:58,940 --> 00:23:02,360
want to say all right when we separate

604
00:23:00,529 --> 00:23:03,889
this into a four by four array of tiles

605
00:23:02,359 --> 00:23:05,659
we want to make sure that we actually

606
00:23:03,890 --> 00:23:09,110
ended up with things that are going to

607
00:23:05,660 --> 00:23:11,810
be on even multiples of four so when we

608
00:23:09,109 --> 00:23:14,179
take the tile with here we want to take

609
00:23:11,809 --> 00:23:16,730
a look now and see and make sure that

610
00:23:14,180 --> 00:23:19,250
that's what we actually got so the tile

611
00:23:16,730 --> 00:23:22,849
width right we need to go ahead and say

612
00:23:19,250 --> 00:23:28,339
if you know assert essentially that the

613
00:23:22,849 --> 00:23:32,419
tile with is well I should be a little

614
00:23:28,339 --> 00:23:34,939
more specific here I'll tell you exactly

615
00:23:32,420 --> 00:23:37,700
what we need to do so we're going to

616
00:23:34,940 --> 00:23:39,470
compute some tile with right and we

617
00:23:37,700 --> 00:23:41,390
could have any old resolution here let's

618
00:23:39,470 --> 00:23:42,890
say we have you know the resolution that

619
00:23:41,390 --> 00:23:44,900
the user wanted or something was nine

620
00:23:42,890 --> 00:23:47,750
hundred and sixty seven pixels right

621
00:23:44,900 --> 00:23:49,580
something like this well nine hundred

622
00:23:47,750 --> 00:23:51,650
and sixty seven pixels right if I

623
00:23:49,579 --> 00:23:54,169
actually go and divide that by four so I

624
00:23:51,650 --> 00:24:05,300
go ahead and say you know I want to do a

625
00:23:54,170 --> 00:24:05,750
quick calculi no 67 plus three divided

626
00:24:05,299 --> 00:24:07,970
by four

627
00:24:05,750 --> 00:24:10,940
I get two hundred and forty two point

628
00:24:07,970 --> 00:24:12,670
five right and so obviously I'm not

629
00:24:10,940 --> 00:24:15,110
going to fit the right number of those

630
00:24:12,670 --> 00:24:16,850
you know that that width is not actually

631
00:24:15,109 --> 00:24:18,619
going to be correct

632
00:24:16,849 --> 00:24:20,000
like I guess I could just do it this way

633
00:24:18,619 --> 00:24:22,489
as well nine hundred and sixty-seven I

634
00:24:20,000 --> 00:24:24,710
divided by four so I know that I can fit

635
00:24:22,490 --> 00:24:26,839
two hundred and forty forty-one of those

636
00:24:24,710 --> 00:24:27,470
in there right I'm sorry

637
00:24:26,839 --> 00:24:31,339
each one will

638
00:24:27,470 --> 00:24:32,990
241 wide but I have to round it up in

639
00:24:31,339 --> 00:24:37,369
order to cover the screen because 240

640
00:24:32,990 --> 00:24:40,308
175 if I actually has tiled 241 I would

641
00:24:37,369 --> 00:24:42,109
be missing some pixels at the end so 242

642
00:24:40,308 --> 00:24:46,399
would have to be the width of the tiles

643
00:24:42,109 --> 00:24:49,009
right if there's going to be 4 of them

644
00:24:46,400 --> 00:24:52,519
right so there'd be 242 would be the

645
00:24:49,009 --> 00:24:54,710
width right now 242 then we have to

646
00:24:52,519 --> 00:25:03,079
press these in back to the 4 pixels that

647
00:24:54,710 --> 00:25:05,929
is 60 60.5 4 pixel units right so again

648
00:25:03,079 --> 00:25:09,949
that's not an even multiple either right

649
00:25:05,929 --> 00:25:14,450
so really it would have to process 61 4

650
00:25:09,950 --> 00:25:17,150
pixel units in order to actually work

651
00:25:14,450 --> 00:25:18,860
out right so what we then need to go

652
00:25:17,150 --> 00:25:22,269
back and do is say okay well if we're

653
00:25:18,859 --> 00:25:24,319
gonna process 61 for a pixel units right

654
00:25:22,269 --> 00:25:26,109
and we know that we're going to have

655
00:25:24,319 --> 00:25:28,879
four of these

656
00:25:26,109 --> 00:25:30,199
then how many does that actually give us

657
00:25:28,880 --> 00:25:35,030
at the end of the day if we were going

658
00:25:30,200 --> 00:25:40,090
to use 4 by 61 by 4 basically right or

659
00:25:35,029 --> 00:25:43,609
16 times 61 right that's gonna give us

660
00:25:40,089 --> 00:25:45,319
976 right so that means our effective

661
00:25:43,609 --> 00:25:50,808
resolution what we're actually gonna be

662
00:25:45,319 --> 00:25:52,369
filling here is 976 pixels okay and

663
00:25:50,808 --> 00:25:53,359
hopefully I went through that a little

664
00:25:52,369 --> 00:25:54,649
bit quickly but you see what I did there

665
00:25:53,359 --> 00:25:56,779
basically I was just saying all right if

666
00:25:54,650 --> 00:25:59,120
we were actually to do the divides and

667
00:25:56,779 --> 00:26:00,829
then round up how many pixels would we

668
00:25:59,119 --> 00:26:03,408
have to fill at a minimum if he wanted

669
00:26:00,829 --> 00:26:07,129
to do always 4 pixel units and four

670
00:26:03,409 --> 00:26:10,490
chunks across a row right and the answer

671
00:26:07,130 --> 00:26:13,640
is we would have to do 976 pixels so

672
00:26:10,490 --> 00:26:16,519
what we need to ensure is that the

673
00:26:13,640 --> 00:26:21,400
destination buffer always would allow us

674
00:26:16,519 --> 00:26:24,769
to overwrite the end of it by that much

675
00:26:21,400 --> 00:26:26,360
does that make sense because since we're

676
00:26:24,769 --> 00:26:28,730
going to be processing it in these

677
00:26:26,359 --> 00:26:30,798
batches it just means that that's the

678
00:26:28,730 --> 00:26:33,650
way things are going to line up right

679
00:26:30,798 --> 00:26:35,450
and we have to be able to to overwrite

680
00:26:33,650 --> 00:26:40,009
it by a certain amount now we only

681
00:26:35,450 --> 00:26:41,058
really have to overwrite we can set the

682
00:26:40,009 --> 00:26:43,369
clipping

683
00:26:41,058 --> 00:26:45,980
we can set that clipping line to the

684
00:26:43,369 --> 00:26:48,859
nearest for a pixel boundary so we said

685
00:26:45,980 --> 00:26:52,099
we wanted 967 right and we can actually

686
00:26:48,859 --> 00:26:53,418
hard clip to there so we don't need to

687
00:26:52,099 --> 00:26:57,019
worry about the fact that we don't

688
00:26:53,419 --> 00:26:59,090
really need the full 976 right because

689
00:26:57,019 --> 00:27:01,278
we can just have that final tile be kind

690
00:26:59,089 --> 00:27:05,689
of small right

691
00:27:01,278 --> 00:27:07,278
but that 967 will not actually work

692
00:27:05,690 --> 00:27:08,360
because we will actually right over that

693
00:27:07,278 --> 00:27:10,700
slightly so we just have to make sure

694
00:27:08,359 --> 00:27:12,709
that that is rounded to a 4 pixel

695
00:27:10,700 --> 00:27:14,509
boundary if that makes sense because

696
00:27:12,710 --> 00:27:15,889
what we'll do is that final tile like

697
00:27:14,509 --> 00:27:18,889
each of these tiles right this will be

698
00:27:15,888 --> 00:27:26,689
61 this will be 61 this will be 61 right

699
00:27:18,888 --> 00:27:29,748
for a total of oops 61 times 4 times 3

700
00:27:26,690 --> 00:27:34,009
for a total of 732 so you know this will

701
00:27:29,749 --> 00:27:38,269
be 732 and then we will have nine

702
00:27:34,009 --> 00:27:40,460
hundred and sixty seven minus that 732

703
00:27:38,269 --> 00:27:42,888
right so nine hundred and sixty seven

704
00:27:40,460 --> 00:27:45,409
minus seven hundred thirty-two and we

705
00:27:42,888 --> 00:27:51,138
end up with 235 right

706
00:27:45,409 --> 00:27:54,649
this is 235 pixels here right and these

707
00:27:51,138 --> 00:27:59,209
guys right were 732 divide before these

708
00:27:54,648 --> 00:28:02,058
guys were the way I did that what I do

709
00:27:59,210 --> 00:28:04,730
wrong there what did I do wrong there

710
00:28:02,058 --> 00:28:07,878
these guys are 61 times for their 244

711
00:28:04,730 --> 00:28:11,599
that's does yeah so these guys are 244

712
00:28:07,878 --> 00:28:13,459
each so these guys would be 244 each for

713
00:28:11,599 --> 00:28:15,980
each tile but then the final tile would

714
00:28:13,460 --> 00:28:17,690
be missing some right that's just how

715
00:28:15,980 --> 00:28:20,480
that would that would work out and it

716
00:28:17,690 --> 00:28:21,950
would be 235 pixels so that's fine we

717
00:28:20,480 --> 00:28:24,470
can set the clipping region so that we

718
00:28:21,950 --> 00:28:27,110
only process 235 pixels but we're going

719
00:28:24,470 --> 00:28:30,288
to go over by however much this this is

720
00:28:27,109 --> 00:28:35,648
off by rounding to 4 right

721
00:28:30,288 --> 00:28:39,558
so whatever 235 divided by 4 is right 58

722
00:28:35,648 --> 00:28:43,489
0.75 so we would need 59 times 4 or 236

723
00:28:39,558 --> 00:28:47,678
right so it's off by 1 we just need to

724
00:28:43,490 --> 00:28:51,019
make sure that that that buffer actually

725
00:28:47,679 --> 00:28:52,519
supports us over writing a little bit we

726
00:28:51,019 --> 00:28:54,950
have to be able to overwrite it just

727
00:28:52,519 --> 00:28:58,079
that little bit right

728
00:28:54,950 --> 00:29:01,019
and then we're good

729
00:28:58,079 --> 00:29:02,849
so all the things we need to do we need

730
00:29:01,019 --> 00:29:04,619
to make sure that each of the tile

731
00:29:02,849 --> 00:29:07,859
boundaries happens on a four pixel

732
00:29:04,619 --> 00:29:11,308
boundary we need to make sure that the

733
00:29:07,859 --> 00:29:13,379
final tile actually has spaced out at

734
00:29:11,308 --> 00:29:15,569
past the end of it so we can overwrite

735
00:29:13,380 --> 00:29:17,850
that little region because we're doing

736
00:29:15,569 --> 00:29:19,678
those rights you know that's just the

737
00:29:17,849 --> 00:29:22,919
way that we're doing the rights wide

738
00:29:19,679 --> 00:29:25,769
potentially and then once we have gotten

739
00:29:22,920 --> 00:29:27,960
all of that worked out we should just be

740
00:29:25,769 --> 00:29:31,440
good to go to leave our tiles exactly

741
00:29:27,960 --> 00:29:33,090
you know for exactly fitfully filling

742
00:29:31,440 --> 00:29:34,830
the screen without any sort of borders

743
00:29:33,089 --> 00:29:38,039
so that's the stuff that we need to do

744
00:29:34,829 --> 00:29:40,019
and we need to ensure the alignment of

745
00:29:38,039 --> 00:29:41,250
the start of the row as well we need to

746
00:29:40,019 --> 00:29:42,210
make sure we've talked about alignment

747
00:29:41,250 --> 00:29:43,589
before we need to make sure that that

748
00:29:42,210 --> 00:29:45,240
start of the row is also aligned because

749
00:29:43,589 --> 00:29:47,730
if each of these is going to be aligned

750
00:29:45,240 --> 00:29:50,819
we need to start it out aligned as well

751
00:29:47,730 --> 00:29:53,519
right so let's go ahead and try to put

752
00:29:50,819 --> 00:29:55,980
our buffer into this forum as much as we

753
00:29:53,519 --> 00:30:00,539
can so the first thing I want to do is I

754
00:29:55,980 --> 00:30:03,539
want to assert that whatever the output

755
00:30:00,539 --> 00:30:06,659
targets actual destination is Right the

756
00:30:03,539 --> 00:30:15,629
output target go ahead and look up what

757
00:30:06,660 --> 00:30:18,509
these actually are see here wait so the

758
00:30:15,630 --> 00:30:20,760
memory right for that I want to make

759
00:30:18,509 --> 00:30:23,940
sure that that memory if I were to look

760
00:30:20,759 --> 00:30:26,490
at what the memory actually is I want to

761
00:30:23,940 --> 00:30:29,490
ensure that that memory is already

762
00:30:26,490 --> 00:30:32,250
aligned to a four pixel boundary right

763
00:30:29,490 --> 00:30:34,920
and now a four pixel boundary remember

764
00:30:32,250 --> 00:30:38,929
pixels actually take up four bytes of

765
00:30:34,920 --> 00:30:43,050
space so we're actually talking about 16

766
00:30:38,929 --> 00:30:45,870
actual bytes for 4 pixels right so what

767
00:30:43,049 --> 00:30:48,960
we want to do is make sure that if we

768
00:30:45,869 --> 00:30:53,009
were to look at at this value ANDed with

769
00:30:48,960 --> 00:30:55,860
15 so looking at those bottom bits there

770
00:30:53,009 --> 00:30:58,349
we want to make sure that they are all

771
00:30:55,859 --> 00:31:00,209
equal to 0 so that it is aligned at the

772
00:30:58,349 --> 00:31:03,409
start right and we want to be able to

773
00:31:00,210 --> 00:31:03,410
assert I'm going to turn off

774
00:31:04,150 --> 00:31:11,920
our optimization here so we want to make

775
00:31:06,940 --> 00:31:14,710
sure that it is not ever on a line right

776
00:31:11,920 --> 00:31:16,120
and so right now I guess I don't

777
00:31:14,710 --> 00:31:17,680
actually know if we're doing any work in

778
00:31:16,119 --> 00:31:19,000
the platform layer to actually make sure

779
00:31:17,680 --> 00:31:20,200
that it is aligned but you can see that

780
00:31:19,000 --> 00:31:22,359
we are actually getting aligned so

781
00:31:20,200 --> 00:31:23,680
that's a good thing so the next thing we

782
00:31:22,359 --> 00:31:25,719
need to do is make sure that our tile

783
00:31:23,680 --> 00:31:26,980
widths are tri lights don't matter

784
00:31:25,720 --> 00:31:28,720
because our tile Heights remember we

785
00:31:26,980 --> 00:31:30,610
never process four pixels vertically we

786
00:31:28,720 --> 00:31:33,160
only process four pixels horizontally so

787
00:31:30,609 --> 00:31:37,990
our tile widths they happen to actually

788
00:31:33,160 --> 00:31:39,730
be totally fine as long as they're for

789
00:31:37,990 --> 00:31:43,059
as long as there are four pixels wide

790
00:31:39,730 --> 00:31:46,569
right so we can get rid of these hmm

791
00:31:43,059 --> 00:31:47,829
guess we should leave that one so what

792
00:31:46,569 --> 00:31:50,319
we want to do is go ahead and say tile

793
00:31:47,829 --> 00:31:54,159
lip whatever the tile with is it needs

794
00:31:50,319 --> 00:31:55,750
to get rounded up to the next to two to

795
00:31:54,160 --> 00:31:57,130
the four byte boundary right and

796
00:31:55,750 --> 00:31:58,920
actually we can bake that in here I

797
00:31:57,130 --> 00:32:02,050
suppose if we want to we can just say

798
00:31:58,920 --> 00:32:05,860
whatever the the tile width is we can

799
00:32:02,049 --> 00:32:07,599
round it up by adding in first whatever

800
00:32:05,859 --> 00:32:09,549
the the value is that we're dividing by

801
00:32:07,599 --> 00:32:11,049
minus one right that's just a little

802
00:32:09,549 --> 00:32:12,220
trick for getting the rounded value

803
00:32:11,049 --> 00:32:13,569
because it's basically like since we're

804
00:32:12,220 --> 00:32:15,910
going to truncate we just make sure that

805
00:32:13,569 --> 00:32:17,379
we will put it up to just before

806
00:32:15,910 --> 00:32:18,490
whatever the next round you would have

807
00:32:17,380 --> 00:32:19,870
been and then divide that way it will

808
00:32:18,490 --> 00:32:21,910
always give us that rounding if it

809
00:32:19,869 --> 00:32:23,649
happened to be over whatever the

810
00:32:21,910 --> 00:32:26,890
rounding point was so this will give us

811
00:32:23,650 --> 00:32:29,140
the tile with rounded up to the nearest

812
00:32:26,890 --> 00:32:32,140
four although I guess now that I think

813
00:32:29,140 --> 00:32:33,280
about it that's that's actually dumb I

814
00:32:32,140 --> 00:32:34,690
take that back

815
00:32:33,279 --> 00:32:37,269
because we want to be able to change

816
00:32:34,690 --> 00:32:38,410
tile count it just happens to be the

817
00:32:37,269 --> 00:32:40,509
right thing but we want to be able to

818
00:32:38,410 --> 00:32:42,250
change this to any number so let's not

819
00:32:40,509 --> 00:32:43,779
do it that way instead let's go ahead

820
00:32:42,250 --> 00:32:46,450
and say we just want to round this guy

821
00:32:43,779 --> 00:32:48,250
so we want to take tile whip right and

822
00:32:46,450 --> 00:32:49,660
we want to whatever the result value is

823
00:32:48,250 --> 00:32:51,430
of tied with we want to round it to the

824
00:32:49,660 --> 00:32:53,650
nearest four so what I'm gonna do there

825
00:32:51,430 --> 00:32:56,080
is I'm gonna do tile with you know I

826
00:32:53,650 --> 00:32:57,850
want it to add in three and divide by

827
00:32:56,079 --> 00:32:59,109
four right so I want to do what I was

828
00:32:57,849 --> 00:33:01,179
doing there but I want to do it after

829
00:32:59,109 --> 00:33:03,789
the fact so that we actually ensure that

830
00:33:01,180 --> 00:33:06,370
we we have we've done that that rounding

831
00:33:03,789 --> 00:33:08,139
so that will give us the the actual

832
00:33:06,369 --> 00:33:09,609
number if I then multiply it by four at

833
00:33:08,140 --> 00:33:14,350
at the end that will give us the actual

834
00:33:09,609 --> 00:33:15,879
number rounded up right so if we kind of

835
00:33:14,349 --> 00:33:17,379
if we take a look in here I want to see

836
00:33:15,880 --> 00:33:19,020
what what numbers we were actually good

837
00:33:17,380 --> 00:33:22,510
and maybe that we're already getting

838
00:33:19,019 --> 00:33:23,558
those numbers anyway like I said we we

839
00:33:22,509 --> 00:33:25,900
kind of just put that in there because

840
00:33:23,558 --> 00:33:26,889
we wanted to be safe about it but we may

841
00:33:25,900 --> 00:33:28,570
have already actually been getting

842
00:33:26,890 --> 00:33:31,720
numbers that didn't actually need to be

843
00:33:28,569 --> 00:33:34,720
rounded so let's go ahead and here so if

844
00:33:31,720 --> 00:33:38,620
we take a look at tile width right oops

845
00:33:34,720 --> 00:33:40,660
I want to do that before so you take a

846
00:33:38,619 --> 00:33:43,178
look at tile width it's already 64 which

847
00:33:40,660 --> 00:33:44,769
is already plenty divisible so that's

848
00:33:43,179 --> 00:33:45,940
that's not gonna be a problem let's

849
00:33:44,769 --> 00:33:47,109
let's go ahead and let it run so that

850
00:33:45,940 --> 00:33:49,150
those are probably ground chunks that

851
00:33:47,109 --> 00:33:57,158
are coming in here so let's go ahead and

852
00:33:49,150 --> 00:33:58,809
do this again 480 run it 480 so we're

853
00:33:57,159 --> 00:34:00,309
actually already getting ones that are

854
00:33:58,808 --> 00:34:01,899
that are nicely rounded we may have to

855
00:34:00,308 --> 00:34:03,849
test them with some sizes that aren't

856
00:34:01,900 --> 00:34:06,519
rounded just to make sure that our math

857
00:34:03,849 --> 00:34:09,099
is working here properly but you know

858
00:34:06,519 --> 00:34:10,539
what are you gonna do so this will do

859
00:34:09,099 --> 00:34:11,918
the truncation and then it will it will

860
00:34:10,539 --> 00:34:13,358
multiply back out so this will leave us

861
00:34:11,918 --> 00:34:15,819
with a value that's that's properly

862
00:34:13,358 --> 00:34:17,590
rounded so then what we need to do is we

863
00:34:15,820 --> 00:34:19,899
make need to make sure that our last

864
00:34:17,590 --> 00:34:21,280
that final tile with actually account to

865
00:34:19,898 --> 00:34:23,710
the fact that it's going to be smaller

866
00:34:21,280 --> 00:34:25,869
right so what we need to do is we need

867
00:34:23,710 --> 00:34:28,389
to do a final tile whip and that final

868
00:34:25,869 --> 00:34:30,429
tile whip needs to be whatever the total

869
00:34:28,389 --> 00:34:33,280
was so whatever the full screen size is

870
00:34:30,429 --> 00:34:35,200
minus the tiles that will actually be

871
00:34:33,280 --> 00:34:38,950
this sort of potentially inflated size

872
00:34:35,199 --> 00:34:40,418
right so we need to say whatever the

873
00:34:38,949 --> 00:34:42,638
tiles that would have been done besides

874
00:34:40,418 --> 00:34:45,069
the final tile that final tile only

875
00:34:42,639 --> 00:34:47,440
accounts for however much is left right

876
00:34:45,070 --> 00:34:55,389
then what we need to do in here when

877
00:34:47,440 --> 00:34:56,559
we're doing this right well actually now

878
00:34:55,389 --> 00:34:58,358
think about it we could actually do this

879
00:34:56,559 --> 00:34:59,650
a little bit easier in fact you know

880
00:34:58,358 --> 00:35:01,090
what we don't even need to do that all

881
00:34:59,650 --> 00:35:03,700
we need to do is when we do our clip

882
00:35:01,090 --> 00:35:05,619
Breck max our maximum there all we need

883
00:35:03,699 --> 00:35:06,519
to do is say you know what if that

884
00:35:05,619 --> 00:35:10,858
cliprect

885
00:35:06,519 --> 00:35:14,500
maximum would actually be greater than

886
00:35:10,858 --> 00:35:16,119
that the actual output target then just

887
00:35:14,500 --> 00:35:18,369
go ahead and set it to the output target

888
00:35:16,119 --> 00:35:20,260
right that'll automatically clip us when

889
00:35:18,369 --> 00:35:22,358
we get to the end so that's that's as

890
00:35:20,260 --> 00:35:25,420
easy as doing anything else would be

891
00:35:22,358 --> 00:35:27,819
right so then if we go in here we no

892
00:35:25,420 --> 00:35:29,559
longer need to do these sort of

893
00:35:27,820 --> 00:35:30,700
adjustments because we're trying to sort

894
00:35:29,559 --> 00:35:33,670
of take care of that

895
00:35:30,699 --> 00:35:36,399
in a separate way so now we've got our

896
00:35:33,670 --> 00:35:38,079
tile with adjusted and we can sort of

897
00:35:36,400 --> 00:35:41,559
say let's go ahead and make sure that

898
00:35:38,079 --> 00:35:47,019
you know that that'll works let's run

899
00:35:41,559 --> 00:35:49,210
that here see how we're doing uh we are

900
00:35:47,019 --> 00:35:54,840
loading from something that it's not

901
00:35:49,210 --> 00:35:54,840
allowed hold on a second

902
00:35:59,699 --> 00:36:04,299
the clip F max F is greater than the

903
00:36:02,409 --> 00:36:06,659
upper target with this equals alpha

904
00:36:04,300 --> 00:36:08,800
Tiger with that looks correct to me

905
00:36:06,659 --> 00:36:12,819
alright so we'll have to go debug this

906
00:36:08,800 --> 00:36:14,980
and see what's going on there of course

907
00:36:12,820 --> 00:36:16,690
I don't actually know if we actually did

908
00:36:14,980 --> 00:36:19,269
render enough oh you know what else I

909
00:36:16,690 --> 00:36:21,519
can do I'll go ahead and make it so that

910
00:36:19,269 --> 00:36:24,099
we're also running single threaded for

911
00:36:21,519 --> 00:36:25,300
the moment so that we can not have to

912
00:36:24,099 --> 00:36:28,029
worry about multiple threads while we're

913
00:36:25,300 --> 00:36:29,289
debugging which is kind of nice by the

914
00:36:28,030 --> 00:36:30,490
way in the thread view you I don't know

915
00:36:29,289 --> 00:36:32,349
if you guys noticed you can see our

916
00:36:30,489 --> 00:36:34,479
worker threads right and they're all

917
00:36:32,349 --> 00:36:36,130
chillin in thread proc waiting for work

918
00:36:34,480 --> 00:36:37,300
they won't do anything since now we're

919
00:36:36,130 --> 00:36:38,890
not pushing the mam or single threaded

920
00:36:37,300 --> 00:36:40,330
right now but just so you can see them

921
00:36:38,889 --> 00:36:43,449
on thread window there there they are

922
00:36:40,329 --> 00:36:45,579
we made those alright anyway so we're

923
00:36:43,449 --> 00:36:48,639
loading off of nonsense here

924
00:36:45,579 --> 00:36:54,190
unfortunately and I'm not sure where we

925
00:36:48,639 --> 00:36:57,449
actually are so X I equals know what min

926
00:36:54,190 --> 00:37:02,460
x equals negative 1 so this backed up

927
00:36:57,449 --> 00:37:02,460
behind the pixel boundary

928
00:37:06,900 --> 00:37:12,880
okay so right we're only clipping to the

929
00:37:11,050 --> 00:37:19,420
end but we don't do it handle any

930
00:37:12,880 --> 00:37:21,160
clipping at the beginning hmm all right

931
00:37:19,420 --> 00:37:22,780
so this may actually be the thing that I

932
00:37:21,159 --> 00:37:23,980
keep saying that we need to think about

933
00:37:22,780 --> 00:37:25,150
and then when I go in and look at it we

934
00:37:23,980 --> 00:37:27,579
don't need to think about it but let's

935
00:37:25,150 --> 00:37:32,400
see if this is actually it I think that

936
00:37:27,579 --> 00:37:32,400
would actually be it so here you go

937
00:37:34,570 --> 00:37:40,720
so the way that things are working at

938
00:37:36,190 --> 00:37:43,960
the moment yeah okay so this is what I

939
00:37:40,719 --> 00:37:45,338
this is this is the problem I sort of

940
00:37:43,960 --> 00:37:46,659
went in and said oh it won't happen on

941
00:37:45,338 --> 00:37:48,730
this end but it will happen on the other

942
00:37:46,659 --> 00:37:50,019
end so we will have to deal with it I I

943
00:37:48,730 --> 00:37:52,269
knew we'd have to deal with it at some

944
00:37:50,019 --> 00:37:54,759
point so the problem that we have right

945
00:37:52,269 --> 00:37:56,858
now is when you blitt something in right

946
00:37:54,760 --> 00:37:58,420
and I guess I'll do it over here first

947
00:37:56,858 --> 00:38:00,569
so when you blitz something in here's a

948
00:37:58,420 --> 00:38:04,450
screen and here's a this is the bitmap

949
00:38:00,570 --> 00:38:06,640
we stop we align things to the end of

950
00:38:04,449 --> 00:38:08,829
the blitz so this will get clipped right

951
00:38:06,639 --> 00:38:11,769
the rectangle will get clipped and then

952
00:38:08,829 --> 00:38:13,900
we'll start at this end in terms of

953
00:38:11,769 --> 00:38:15,880
lining things up and we'll kind of go

954
00:38:13,900 --> 00:38:18,430
like this right where each of these is

955
00:38:15,880 --> 00:38:19,838
for pixels and you know this part

956
00:38:18,429 --> 00:38:21,759
doesn't matter because it gets masked it

957
00:38:19,838 --> 00:38:24,969
won't get written and we'll fill them in

958
00:38:21,760 --> 00:38:28,780
here right but the problem is if we do

959
00:38:24,969 --> 00:38:31,179
that over here on this side right yes we

960
00:38:28,780 --> 00:38:33,430
will do the clipping but then when we

961
00:38:31,179 --> 00:38:37,059
actually do the 4 pixel alignment bit

962
00:38:33,429 --> 00:38:39,579
right we will end up being off sort of

963
00:38:37,059 --> 00:38:41,920
on the on the end right and we'll be

964
00:38:39,579 --> 00:38:46,569
writing into the beginning of the buffer

965
00:38:41,920 --> 00:38:48,608
here which obviously is is not you know

966
00:38:46,570 --> 00:38:51,160
is not particularly useful that's not

967
00:38:48,608 --> 00:38:56,769
particularly that's not great right it's

968
00:38:51,159 --> 00:38:58,059
not fabulous so I feel like the easiest

969
00:38:56,769 --> 00:39:00,039
way to solve that problem and this is

970
00:38:58,059 --> 00:39:01,000
what I was saying before but then I was

971
00:39:00,039 --> 00:39:02,108
like man we don't need to do it at the

972
00:39:01,000 --> 00:39:04,449
end it's true we don't need to at the

973
00:39:02,108 --> 00:39:06,519
end we need to at the beginning because

974
00:39:04,449 --> 00:39:09,569
the way we wrote the routine I feel like

975
00:39:06,519 --> 00:39:13,889
the way to solve this problem properly

976
00:39:09,570 --> 00:39:16,030
is we would need to make sure that we

977
00:39:13,889 --> 00:39:20,379
that we always allocated some extra

978
00:39:16,030 --> 00:39:23,250
space the beginning however which would

979
00:39:20,380 --> 00:39:26,380
be trivial for us to go and do however

980
00:39:23,250 --> 00:39:29,500
this presents a problem for us

981
00:39:26,380 --> 00:39:31,599
it presents a problem that is the

982
00:39:29,500 --> 00:39:33,969
problem that I kept alluding to and that

983
00:39:31,599 --> 00:39:35,440
I you know was saying we maybe wouldn't

984
00:39:33,969 --> 00:39:36,639
have to face because I was like looking

985
00:39:35,440 --> 00:39:38,619
through and going no but we do it to

986
00:39:36,639 --> 00:39:42,098
face it and that is what happens when

987
00:39:38,619 --> 00:39:45,460
this occurs at a tile boundary right so

988
00:39:42,099 --> 00:39:47,350
I was saying up here that you know this

989
00:39:45,460 --> 00:39:49,900
would be a bad condition well guess what

990
00:39:47,349 --> 00:39:52,360
that is exactly what will happen if we

991
00:39:49,900 --> 00:39:56,430
have a bitmap that happens to end say

992
00:39:52,360 --> 00:39:58,630
right here but that is six long right

993
00:39:56,429 --> 00:40:01,269
because we'll align it so that we're

994
00:39:58,630 --> 00:40:03,190
writing to these four pixels but then

995
00:40:01,269 --> 00:40:05,289
when we go to write these will actually

996
00:40:03,190 --> 00:40:06,519
be talking about this this set of four

997
00:40:05,289 --> 00:40:08,710
even though there are only two we're

998
00:40:06,519 --> 00:40:11,610
gonna write and we'll end up with that

999
00:40:08,710 --> 00:40:14,050
with that problem with the writing right

1000
00:40:11,610 --> 00:40:15,670
so what that says to me is we do

1001
00:40:14,050 --> 00:40:17,440
actually have to do the thing that I

1002
00:40:15,670 --> 00:40:19,030
kept thinking we would have to do which

1003
00:40:17,440 --> 00:40:20,380
is that we will have to make sure that

1004
00:40:19,030 --> 00:40:22,690
we are essentially always writing

1005
00:40:20,380 --> 00:40:24,789
aligned and that we mask both our front

1006
00:40:22,690 --> 00:40:26,590
and our back right because remember the

1007
00:40:24,789 --> 00:40:28,750
reason that we were writing unaligned is

1008
00:40:26,590 --> 00:40:34,420
so that we could avoid having to do one

1009
00:40:28,750 --> 00:40:36,699
of the mask rights what can I say that's

1010
00:40:34,420 --> 00:40:39,789
just the way it is sometimes you try to

1011
00:40:36,699 --> 00:40:41,619
avoid it and it doesn't work so that's

1012
00:40:39,789 --> 00:40:42,849
what we're gonna have to do and the

1013
00:40:41,619 --> 00:40:46,389
reason that it's a little bit annoying

1014
00:40:42,849 --> 00:40:49,210
I'll show you why is because before you

1015
00:40:46,389 --> 00:40:50,949
know it there's no magic to it it's

1016
00:40:49,210 --> 00:40:52,990
exactly what we did here right what we

1017
00:40:50,949 --> 00:40:55,029
did is we said okay when we're starting

1018
00:40:52,989 --> 00:40:58,349
up we know how much we're going to fill

1019
00:40:55,030 --> 00:41:00,760
and if the fill width is is not you know

1020
00:40:58,349 --> 00:41:03,309
gonna is not actually going to be

1021
00:41:00,760 --> 00:41:05,380
aligned then we need to align the start

1022
00:41:03,309 --> 00:41:08,199
right and so that's all we really did

1023
00:41:05,380 --> 00:41:12,250
was just align that start right I'm

1024
00:41:08,199 --> 00:41:14,730
sorry we need to make a mask for the

1025
00:41:12,250 --> 00:41:17,590
start and then and then go ahead right

1026
00:41:14,730 --> 00:41:20,670
but what we actually want to do here is

1027
00:41:17,590 --> 00:41:24,550
we actually want to make sure that we

1028
00:41:20,670 --> 00:41:29,139
align the actual whole blip to whatever

1029
00:41:24,550 --> 00:41:30,640
the nearest boundary is right and if we

1030
00:41:29,139 --> 00:41:33,039
align the whole blit to the to a

1031
00:41:30,639 --> 00:41:34,059
boundary what that's unfortunately to do

1032
00:41:33,039 --> 00:41:36,519
is it's going to mean that there might

1033
00:41:34,059 --> 00:41:38,590
be a mask at the start and the end

1034
00:41:36,519 --> 00:41:42,369
because if we are always working on

1035
00:41:38,590 --> 00:41:44,680
aligned for 4-byte wide I'm sorry for

1036
00:41:42,369 --> 00:41:48,250
pixel wide options then that means that

1037
00:41:44,679 --> 00:41:51,909
the start up and the end might might

1038
00:41:48,250 --> 00:41:52,840
both be clipped right so if there's no

1039
00:41:51,909 --> 00:41:54,819
way getting around if there's nobody

1040
00:41:52,840 --> 00:41:58,990
getting around it that's fine let's go

1041
00:41:54,820 --> 00:42:00,640
ahead and and work it out so I'm going

1042
00:41:58,989 --> 00:42:02,528
to take a look here I'm

1043
00:42:00,639 --> 00:42:05,739
going to say alright we've got this fill

1044
00:42:02,528 --> 00:42:09,369
rect let's see here I got a page this

1045
00:42:05,739 --> 00:42:10,929
code into my own little memory cache so

1046
00:42:09,369 --> 00:42:14,079
what I want to look at here is I want to

1047
00:42:10,929 --> 00:42:16,298
say well if we've got it we don't really

1048
00:42:14,079 --> 00:42:19,059
care about the fill width so much what

1049
00:42:16,298 --> 00:42:23,108
we care about actually is the min X

1050
00:42:19,059 --> 00:42:25,119
right we need to get that min X aligned

1051
00:42:23,108 --> 00:42:28,000
and I guess we need to get the max X

1052
00:42:25,119 --> 00:42:29,950
aligned as well and so the first thing

1053
00:42:28,000 --> 00:42:33,608
that we probably want to check is is the

1054
00:42:29,949 --> 00:42:34,868
min X aligned right and so I'm going to

1055
00:42:33,608 --> 00:42:37,659
start with that so I'm going to say all

1056
00:42:34,869 --> 00:42:40,599
right if the fill rect min X is not

1057
00:42:37,659 --> 00:42:46,328
aligned we'll move it back okay so we'll

1058
00:42:40,599 --> 00:42:48,940
say if the fill rect min X is is not

1059
00:42:46,329 --> 00:42:52,089
aligned we got to move it back and I

1060
00:42:48,940 --> 00:42:56,039
guess we'll we'll sort of say we've got

1061
00:42:52,088 --> 00:42:59,679
our start up clip fast and our so to our

1062
00:42:56,039 --> 00:43:01,240
I guess our left to fats and our right

1063
00:42:59,679 --> 00:43:02,889
clip mask might be the right thing

1064
00:43:01,239 --> 00:43:05,139
because there's one at the end when one

1065
00:43:02,889 --> 00:43:07,480
at the beginning one at the end or I

1066
00:43:05,139 --> 00:43:10,358
could call them beginning start clip

1067
00:43:07,480 --> 00:43:12,789
mask and end clip mask and they're not

1068
00:43:10,358 --> 00:43:14,259
sure what's going there but anyway we'll

1069
00:43:12,789 --> 00:43:15,640
got these two clip mask will assume that

1070
00:43:14,259 --> 00:43:18,250
there's no clipping well then say all

1071
00:43:15,639 --> 00:43:19,980
right if the Phil rec min X is actually

1072
00:43:18,250 --> 00:43:22,900
something that's that's going to be

1073
00:43:19,980 --> 00:43:26,619
unaligned we'll go ahead and align it so

1074
00:43:22,900 --> 00:43:29,829
we'll say that the min X is gonna knock

1075
00:43:26,619 --> 00:43:33,309
out whatever those bits are right so the

1076
00:43:29,829 --> 00:43:36,278
the min X gets knocked down and I guess

1077
00:43:33,309 --> 00:43:39,099
we could say new min X maybe equals that

1078
00:43:36,278 --> 00:43:42,338
and then say full rectum in x equals and

1079
00:43:39,099 --> 00:43:48,220
x like so and we need to go ahead and

1080
00:43:42,338 --> 00:43:51,338
make our our masks here and I feel like

1081
00:43:48,219 --> 00:43:53,259
we might as well just do that actually

1082
00:43:51,338 --> 00:43:54,278
you know this is this is actually you

1083
00:43:53,259 --> 00:43:55,809
know what we don't even need to do that

1084
00:43:54,278 --> 00:43:57,849
this is gonna be a lot simpler than that

1085
00:43:55,809 --> 00:44:02,829
what we can really just do here is say

1086
00:43:57,849 --> 00:44:06,519
start up cliff mask equals you know clip

1087
00:44:02,829 --> 00:44:07,990
masks and we'll just go ahead and make a

1088
00:44:06,518 --> 00:44:12,769
little table of them since there's only

1089
00:44:07,989 --> 00:44:15,319
going to be a few right we'll just say

1090
00:44:12,769 --> 00:44:18,019
that whatever it is and three look that

1091
00:44:15,320 --> 00:44:20,330
up and that's the clip mask right and

1092
00:44:18,019 --> 00:44:22,969
then go ahead and make sure that it is

1093
00:44:20,329 --> 00:44:24,769
actually aligned okay so that's pretty

1094
00:44:22,969 --> 00:44:29,929
straightforward then what we have to do

1095
00:44:24,769 --> 00:44:32,090
is say all right if the max X is is also

1096
00:44:29,929 --> 00:44:34,250
not aligned then that one has to do it

1097
00:44:32,090 --> 00:44:36,309
has to be aligned as well and that's

1098
00:44:34,250 --> 00:44:39,139
gonna be the exact same thing only

1099
00:44:36,309 --> 00:44:43,730
unfortunately this time it's got a round

1100
00:44:39,139 --> 00:44:45,319
up not down right and so we need to let

1101
00:44:43,730 --> 00:44:46,820
the check out the clip mask thing there

1102
00:44:45,320 --> 00:44:50,840
it's actually just it's I think it's

1103
00:44:46,820 --> 00:44:52,400
just the we could actually just subtract

1104
00:44:50,840 --> 00:44:54,470
the value from it but we'll take a look

1105
00:44:52,400 --> 00:44:57,200
at that in a second anyway so the fill

1106
00:44:54,469 --> 00:44:59,359
Rack filler X Max X here is going to be

1107
00:44:57,199 --> 00:45:01,879
you know done the exact same way to

1108
00:44:59,360 --> 00:45:04,070
knock out those bits but then if we can

1109
00:45:01,880 --> 00:45:05,390
just add 4 to it to basically round it

1110
00:45:04,070 --> 00:45:06,710
up instead of down if that makes sense

1111
00:45:05,389 --> 00:45:09,949
so that seems pretty straightforward

1112
00:45:06,710 --> 00:45:12,650
there so once we have those aligned I

1113
00:45:09,949 --> 00:45:16,189
don't know if fill width is or either of

1114
00:45:12,650 --> 00:45:17,480
these things I'm used ever again no so

1115
00:45:16,190 --> 00:45:21,050
we should be able to actually kind of

1116
00:45:17,480 --> 00:45:22,340
blow these away I think I don't think

1117
00:45:21,050 --> 00:45:24,050
anything has to happen there so if we

1118
00:45:22,340 --> 00:45:26,210
change all the filler echt up there then

1119
00:45:24,050 --> 00:45:29,230
really all we need to do is is make our

1120
00:45:26,210 --> 00:45:34,309
clip Basques here so this will be the

1121
00:45:29,230 --> 00:45:37,639
the M 128 I clipped masks we need to set

1122
00:45:34,309 --> 00:45:43,269
those so we need to say we've got each

1123
00:45:37,639 --> 00:45:46,069
of these right something like this and

1124
00:45:43,269 --> 00:45:50,889
those will be correct for startup clip

1125
00:45:46,070 --> 00:45:50,890
masks right so this is essentially

1126
00:45:52,269 --> 00:45:58,400
taking what's set to all ones right oops

1127
00:45:56,090 --> 00:46:00,170
I got put in clip that's there this

1128
00:45:58,400 --> 00:46:02,869
one's set to all ones and let me go

1129
00:46:00,170 --> 00:46:08,059
ahead and we shift it so that we end up

1130
00:46:02,869 --> 00:46:09,980
with ones that are properly done for the

1131
00:46:08,059 --> 00:46:11,900
startup so this goes ahead and mash out

1132
00:46:09,980 --> 00:46:13,219
the first sorry this one goes out head

1133
00:46:11,900 --> 00:46:14,809
and mash up first pixel this one a

1134
00:46:13,219 --> 00:46:18,319
second pixel this mask masks out the

1135
00:46:14,809 --> 00:46:21,739
third pixel right now we want to do the

1136
00:46:18,320 --> 00:46:24,330
exact same thing for the I guess I

1137
00:46:21,739 --> 00:46:26,849
should do it this way

1138
00:46:24,329 --> 00:46:29,219
we want to do the exact same thing for

1139
00:46:26,849 --> 00:46:30,539
the startup in the shut down clip masks

1140
00:46:29,219 --> 00:46:31,980
there start clip mask

1141
00:46:30,539 --> 00:46:32,730
there's end clip masks and I said we

1142
00:46:31,980 --> 00:46:35,670
could Rob ibly do this a little bit

1143
00:46:32,730 --> 00:46:36,179
clever but I don't wanna get clever just

1144
00:46:35,670 --> 00:46:40,490
yet

1145
00:46:36,179 --> 00:46:43,079
so we'll do this the straightforward way

1146
00:46:40,489 --> 00:46:45,839
and all this is gonna be is the exact

1147
00:46:43,079 --> 00:46:47,849
opposite right this is just gonna be

1148
00:46:45,840 --> 00:46:49,829
shifts in the opposite direction so

1149
00:46:47,849 --> 00:46:52,409
instead of masking out the first pixels

1150
00:46:49,829 --> 00:46:57,269
this max out the end pixels so however

1151
00:46:52,409 --> 00:46:58,889
unaligned that max X is there we're

1152
00:46:57,269 --> 00:47:00,150
gonna do the opposite thing wait I got

1153
00:46:58,889 --> 00:47:03,329
to think about that it's not actually

1154
00:47:00,150 --> 00:47:05,280
correct so well let's just do it in

1155
00:47:03,329 --> 00:47:09,029
blackboard instead of thinking it's

1156
00:47:05,280 --> 00:47:11,310
always better to do the drawing so at

1157
00:47:09,030 --> 00:47:12,750
the end what's gonna happen here is that

1158
00:47:11,309 --> 00:47:13,829
they're right on the zero boundary then

1159
00:47:12,750 --> 00:47:16,650
we don't have a problem it's aligned

1160
00:47:13,829 --> 00:47:18,630
right but let's say that it was here so

1161
00:47:16,650 --> 00:47:20,760
they it actually has to write one of

1162
00:47:18,630 --> 00:47:22,920
these guys then what we want to do is we

1163
00:47:20,760 --> 00:47:26,400
want to have you know in in our

1164
00:47:22,920 --> 00:47:28,769
processor order right like so we want to

1165
00:47:26,400 --> 00:47:33,990
have FS down here and zeros up here

1166
00:47:28,769 --> 00:47:38,059
right so what we wanted to do is we want

1167
00:47:33,989 --> 00:47:40,859
to have sort of a shift we want to shift

1168
00:47:38,059 --> 00:47:42,779
this way we want to shift right right

1169
00:47:40,860 --> 00:47:45,500
and we want to shift right by three

1170
00:47:42,780 --> 00:47:48,660
right so I think it actually looks

1171
00:47:45,500 --> 00:47:52,170
something more like that right no three

1172
00:47:48,659 --> 00:47:54,289
two one like so so I think we want to do

1173
00:47:52,170 --> 00:47:56,700
something actually more like that right

1174
00:47:54,289 --> 00:47:58,440
and technically we could even if we want

1175
00:47:56,699 --> 00:48:00,419
to here just do these these don't

1176
00:47:58,440 --> 00:48:01,769
actually have to be predicated I don't

1177
00:48:00,420 --> 00:48:03,119
know if we want them predicated or not

1178
00:48:01,769 --> 00:48:05,820
but we don't actually have to have them

1179
00:48:03,119 --> 00:48:07,440
predicated right so anyway we've got

1180
00:48:05,820 --> 00:48:09,059
start clipping masks and in clipped mass

1181
00:48:07,440 --> 00:48:11,070
I think those are set right now so this

1182
00:48:09,059 --> 00:48:12,659
one would be you know shift out three of

1183
00:48:11,070 --> 00:48:14,550
the pixels this one would only shift out

1184
00:48:12,659 --> 00:48:16,589
the first two this one we shift out the

1185
00:48:14,550 --> 00:48:19,590
first one and I think that's what we

1186
00:48:16,590 --> 00:48:22,350
actually want right because as that gets

1187
00:48:19,590 --> 00:48:24,870
up higher in terms of where it is on the

1188
00:48:22,349 --> 00:48:26,909
line meant that's what we want to do and

1189
00:48:24,869 --> 00:48:28,170
so we have a start clipping mask on in

1190
00:48:26,909 --> 00:48:30,089
clipped mask the only problem is now we

1191
00:48:28,170 --> 00:48:32,610
don't actually know when to use the end

1192
00:48:30,090 --> 00:48:35,280
clip mask right because the routine

1193
00:48:32,610 --> 00:48:38,070
already handles that start up here where

1194
00:48:35,280 --> 00:48:40,140
it does the it resets the clip mask

1195
00:48:38,070 --> 00:48:42,090
to be negative one but what we have to

1196
00:48:40,139 --> 00:48:44,039
do now is when this is why it's a little

1197
00:48:42,090 --> 00:48:45,630
ugly as we unless I'm missing some

1198
00:48:44,039 --> 00:48:46,739
clever thing and this is why I didn't

1199
00:48:45,630 --> 00:48:48,210
really want to do in the first place we

1200
00:48:46,739 --> 00:48:51,119
actually have to put in some predication

1201
00:48:48,210 --> 00:48:53,880
here to actually set the clip mask right

1202
00:48:51,119 --> 00:48:55,920
we have to do something where we're

1203
00:48:53,880 --> 00:49:00,150
going to check to see what the what the

1204
00:48:55,920 --> 00:49:02,309
status is in terms of X I write because

1205
00:49:00,150 --> 00:49:05,190
you can kind of see it stepping up here

1206
00:49:02,309 --> 00:49:07,259
now I don't actually know x i's never

1207
00:49:05,190 --> 00:49:09,269
used anywhere so what I'd like to do

1208
00:49:07,260 --> 00:49:12,300
here is potentially make this a little

1209
00:49:09,269 --> 00:49:14,639
bit friendlier for the test right so we

1210
00:49:12,300 --> 00:49:16,140
can maybe loop over something other than

1211
00:49:14,639 --> 00:49:17,549
that so we'll do that in a second but

1212
00:49:16,139 --> 00:49:21,750
for right now what I'll do is just say

1213
00:49:17,550 --> 00:49:24,690
okay if whatever X I is gonna be next

1214
00:49:21,750 --> 00:49:26,309
right so I'm gonna you know if X I plus

1215
00:49:24,690 --> 00:49:29,570
4 that's the iteration we're about to do

1216
00:49:26,309 --> 00:49:33,539
right if whatever we do next

1217
00:49:29,570 --> 00:49:36,059
plus 4 would be outside the bounds then

1218
00:49:33,539 --> 00:49:38,009
that's going to be the the last one so I

1219
00:49:36,059 --> 00:49:39,690
want to actually go ahead and set the

1220
00:49:38,010 --> 00:49:45,090
clip mass to the end clip mask on that

1221
00:49:39,690 --> 00:49:46,860
final run right if that makes sense so

1222
00:49:45,090 --> 00:49:48,329
that's what I want to start out by doing

1223
00:49:46,860 --> 00:49:55,640
right

1224
00:49:48,329 --> 00:49:55,639
oops start clip mask and clip mask yeah

1225
00:49:56,960 --> 00:50:04,079
it's dark - clip mask

1226
00:50:00,000 --> 00:50:06,030
there we go so I want to fix that up a

1227
00:50:04,079 --> 00:50:07,679
little bit potentially but I just want

1228
00:50:06,030 --> 00:50:10,920
to see if we're getting a little closer

1229
00:50:07,679 --> 00:50:16,469
there ooh that's a little ugly a little

1230
00:50:10,920 --> 00:50:18,809
bit ugly that that is not quite correct

1231
00:50:16,469 --> 00:50:23,250
I think we all have to agree that that

1232
00:50:18,809 --> 00:50:25,259
is not that does not look fabulous I

1233
00:50:23,250 --> 00:50:28,380
think we're all like we're all on the

1234
00:50:25,260 --> 00:50:30,450
same page there uh-huh but you know it's

1235
00:50:28,380 --> 00:50:32,519
getting there

1236
00:50:30,449 --> 00:50:36,089
oh whoops I've got the sense of this

1237
00:50:32,519 --> 00:50:37,829
reversed if it's under max X it's not on

1238
00:50:36,090 --> 00:50:41,550
the last one so that's okay that's

1239
00:50:37,829 --> 00:50:45,299
problem number one sorry about that okay

1240
00:50:41,550 --> 00:50:47,220
so actually now we look a little more

1241
00:50:45,300 --> 00:50:49,740
correct right that looks like a more

1242
00:50:47,219 --> 00:50:50,778
correct lit and we are also not crashing

1243
00:50:49,739 --> 00:50:52,818
which is a nice

1244
00:50:50,778 --> 00:50:55,369
aspect of it so what I want to do now is

1245
00:50:52,818 --> 00:50:57,798
see if we're always aligned so I'm going

1246
00:50:55,369 --> 00:50:59,869
to take out these store these use the

1247
00:50:57,798 --> 00:51:01,429
store you and the load you I want to go

1248
00:50:59,869 --> 00:51:03,588
ahead and and make sure we're always

1249
00:51:01,429 --> 00:51:06,469
loading and storing actually aligned

1250
00:51:03,588 --> 00:51:08,599
right and so we shouldn't it those will

1251
00:51:06,469 --> 00:51:11,119
crash if we're they will like actually

1252
00:51:08,599 --> 00:51:12,890
fault if we're not aligned so I just

1253
00:51:11,119 --> 00:51:14,390
want to make sure that we're not getting

1254
00:51:12,889 --> 00:51:17,418
that crash and they're we're not getting

1255
00:51:14,389 --> 00:51:18,588
that crash okay so let's step it up

1256
00:51:17,418 --> 00:51:20,719
another notch

1257
00:51:18,588 --> 00:51:24,679
make sure everything's kosher here I'm

1258
00:51:20,719 --> 00:51:26,599
going to set us 202 and see how we're

1259
00:51:24,679 --> 00:51:29,719
doing you know to we're doing pretty

1260
00:51:26,599 --> 00:51:33,338
good here that's that's looking okay so

1261
00:51:29,719 --> 00:51:36,949
that's that's that's not too bad right

1262
00:51:33,338 --> 00:51:39,259
that's all good and I'll go ahead and

1263
00:51:36,949 --> 00:51:45,858
also see what happens if we if we turn

1264
00:51:39,259 --> 00:51:52,278
on threading child render group here we

1265
00:51:45,858 --> 00:51:55,578
go so there we go so it's looking pretty

1266
00:51:52,278 --> 00:52:00,199
good we don't have those those nasty

1267
00:51:55,579 --> 00:52:02,630
tiles anymore so that's all nice and so

1268
00:52:00,199 --> 00:52:06,108
I think that's pretty reasonable now the

1269
00:52:02,630 --> 00:52:08,119
platform code has to still be

1270
00:52:06,108 --> 00:52:10,548
guaranteeing us that it's doing that

1271
00:52:08,119 --> 00:52:11,989
it's allocating the memory aligned and I

1272
00:52:10,548 --> 00:52:13,639
want to go just double check to make

1273
00:52:11,989 --> 00:52:14,778
sure that it is in fact doing that and

1274
00:52:13,639 --> 00:52:16,308
that we're not getting that by accident

1275
00:52:14,778 --> 00:52:19,309
if that makes sense

1276
00:52:16,309 --> 00:52:20,959
because again this assertion here we

1277
00:52:19,309 --> 00:52:23,869
need to make sure that these are all

1278
00:52:20,958 --> 00:52:25,399
actually assumptions that are not going

1279
00:52:23,869 --> 00:52:29,568
to be totally invalid

1280
00:52:25,400 --> 00:52:35,269
right so let's take a look if I go in

1281
00:52:29,568 --> 00:52:37,188
here to where we allocate that right you

1282
00:52:35,268 --> 00:52:40,788
can see us virtual a locking this here

1283
00:52:37,188 --> 00:52:42,139
and so in here we do the win32 resize

1284
00:52:40,789 --> 00:52:43,309
dip section that's where we do the

1285
00:52:42,139 --> 00:52:45,679
virtual elect with our bitmap memory

1286
00:52:43,309 --> 00:52:47,599
size you can see the bitmap memory size

1287
00:52:45,679 --> 00:52:49,400
here is not actually doing anything in

1288
00:52:47,599 --> 00:52:51,588
particular to make sure that the size is

1289
00:52:49,400 --> 00:52:53,389
around a properly but virtual a lock

1290
00:52:51,588 --> 00:52:54,619
will always return us memory that starts

1291
00:52:53,389 --> 00:52:57,618
on a page boundary which by definition

1292
00:52:54,619 --> 00:53:03,199
will be aligned to actually I think fork

1293
00:52:57,619 --> 00:53:04,200
K not just 16 bytes so it'll be way over

1294
00:53:03,199 --> 00:53:07,139
a line for that

1295
00:53:04,199 --> 00:53:09,149
but the problem is the the pitch here we

1296
00:53:07,139 --> 00:53:11,699
don't actually have any guarantee that

1297
00:53:09,150 --> 00:53:13,680
we're actually going to be aligned to

1298
00:53:11,699 --> 00:53:15,149
four pixel boundaries so what I want to

1299
00:53:13,679 --> 00:53:18,960
do is make sure that we're aligned to

1300
00:53:15,150 --> 00:53:22,380
four pixel boundaries at least when we

1301
00:53:18,960 --> 00:53:24,838
do this so what I want to do is change

1302
00:53:22,380 --> 00:53:26,760
the way that we're making this happen a

1303
00:53:24,838 --> 00:53:28,828
little bit here I want to go ahead and

1304
00:53:26,760 --> 00:53:31,050
bring the pitch computation up above

1305
00:53:28,829 --> 00:53:32,430
here I want to say that the pitch

1306
00:53:31,050 --> 00:53:34,410
computation is going to be the width

1307
00:53:32,429 --> 00:53:36,389
times bytes per pixel and then I'm going

1308
00:53:34,409 --> 00:53:38,670
to allocate based on multiplying the

1309
00:53:36,389 --> 00:53:40,170
pitch times the height and what I want

1310
00:53:38,670 --> 00:53:43,740
to do there is I want to go ahead and

1311
00:53:40,170 --> 00:53:46,740
round this value so that this value will

1312
00:53:43,739 --> 00:53:49,289
be rounded to an even multiple of four

1313
00:53:46,739 --> 00:53:51,899
right so I want to say or to sixteen

1314
00:53:49,289 --> 00:53:53,460
bytes basically right so I want to do

1315
00:53:51,900 --> 00:53:57,059
something I'm just gonna call a line

1316
00:53:53,460 --> 00:53:58,858
sixteen right and I want a line sixteen

1317
00:53:57,059 --> 00:54:01,980
to align things properly now I don't

1318
00:53:58,858 --> 00:54:05,730
know if we've ever actually put in any

1319
00:54:01,980 --> 00:54:08,639
kind of alignment code into anything

1320
00:54:05,730 --> 00:54:10,500
here I don't think we have but I'd like

1321
00:54:08,639 --> 00:54:12,690
to kind of introduce that so what I want

1322
00:54:10,500 --> 00:54:15,088
to do is introduce a thing a line

1323
00:54:12,690 --> 00:54:16,920
sixteen which takes some kind of a value

1324
00:54:15,088 --> 00:54:20,338
doesn't matter what the value is and

1325
00:54:16,920 --> 00:54:21,930
then does exactly what's happening in

1326
00:54:20,338 --> 00:54:24,179
these things here right it's it's

1327
00:54:21,929 --> 00:54:27,690
something that's going to to produce the

1328
00:54:24,179 --> 00:54:29,489
desired rounding right so what I'm gonna

1329
00:54:27,690 --> 00:54:32,220
do there is gonna say I want to take the

1330
00:54:29,489 --> 00:54:35,338
value whatever that value is I want to

1331
00:54:32,219 --> 00:54:38,309
add 15 to it right and then I want to

1332
00:54:35,338 --> 00:54:40,500
masked out whatever the part of it is

1333
00:54:38,309 --> 00:54:43,078
that that would have been on aligned

1334
00:54:40,500 --> 00:54:44,789
right so this will round it up right

1335
00:54:43,079 --> 00:54:47,700
this will round it up to the nearest

1336
00:54:44,789 --> 00:54:50,219
value that it that is a multiple of 16

1337
00:54:47,699 --> 00:54:53,299
so that way we can guarantee that that

1338
00:54:50,219 --> 00:54:55,618
pitch is always going to actually be

1339
00:54:53,300 --> 00:54:57,660
it's actually always going to be valid

1340
00:54:55,619 --> 00:54:59,579
for the assumptions that we have in the

1341
00:54:57,659 --> 00:55:01,858
renderer which again it was already

1342
00:54:59,579 --> 00:55:03,780
happening because of the width that we

1343
00:55:01,858 --> 00:55:05,699
happen to choose but I just wanted to

1344
00:55:03,780 --> 00:55:07,589
make sure that that would always be the

1345
00:55:05,699 --> 00:55:09,809
case because now our renderer literally

1346
00:55:07,588 --> 00:55:11,429
cannot accept anything other than that

1347
00:55:09,809 --> 00:55:13,889
so we wanted to make sure that that's

1348
00:55:11,429 --> 00:55:17,179
fine and now that is fine so I think

1349
00:55:13,889 --> 00:55:19,239
we're good now on rendering

1350
00:55:17,179 --> 00:55:22,669
everything looks fine here we are at

1351
00:55:19,239 --> 00:55:25,068
1920 by 1080 and everything's fine

1352
00:55:22,670 --> 00:55:28,880
so that's all good we still haven't

1353
00:55:25,068 --> 00:55:29,989
actually done anything with our with our

1354
00:55:28,880 --> 00:55:31,910
sorting or any of that stuff yet but

1355
00:55:29,989 --> 00:55:35,118
we're we're in good shape here I think

1356
00:55:31,909 --> 00:55:36,828
that's all pretty reasonable how much

1357
00:55:35,119 --> 00:55:40,338
time we got left here we got 2 minutes

1358
00:55:36,829 --> 00:55:41,960
left so we did that that's all good

1359
00:55:40,338 --> 00:55:43,880
we'll come back here we can remove this

1360
00:55:41,960 --> 00:55:46,460
now we've got the assertion in there so

1361
00:55:43,880 --> 00:55:50,000
that'll fire in the case where we have a

1362
00:55:46,460 --> 00:55:53,358
problem I can also I suppose based on

1363
00:55:50,000 --> 00:55:55,670
looking at how this was with o2d weekend

1364
00:55:53,358 --> 00:55:57,799
where our game even at 1920 by 1080 is

1365
00:55:55,670 --> 00:56:00,200
totally fine to use right now even in

1366
00:55:57,800 --> 00:56:01,550
debug builds because if we turn

1367
00:56:00,199 --> 00:56:03,649
multi-threading on we just get a pretty

1368
00:56:01,550 --> 00:56:07,849
big boost from it so that's nice

1369
00:56:03,650 --> 00:56:09,740
obviously mm-hmm but at this point I

1370
00:56:07,849 --> 00:56:10,970
also want to go ahead and maybe just

1371
00:56:09,739 --> 00:56:15,049
play with it a little bit to make sure

1372
00:56:10,969 --> 00:56:16,730
nothing breaks oh I know what I can do

1373
00:56:15,050 --> 00:56:19,609
in the last two minutes actually this

1374
00:56:16,730 --> 00:56:21,710
will be better so Martin's pointed out

1375
00:56:19,608 --> 00:56:23,750
something that we forgot to do I don't

1376
00:56:21,710 --> 00:56:26,568
know if you guys noticed it I'll show

1377
00:56:23,750 --> 00:56:27,769
you what the problem is but for some

1378
00:56:26,568 --> 00:56:29,989
reason and I don't know why I just

1379
00:56:27,769 --> 00:56:31,608
wasn't thinking I put these global

1380
00:56:29,989 --> 00:56:33,919
pointer assignments inside memory is

1381
00:56:31,608 --> 00:56:35,920
initialized but the problem there is

1382
00:56:33,920 --> 00:56:39,079
that that doesn't actually help us

1383
00:56:35,920 --> 00:56:41,420
during reload right so if we're using

1384
00:56:39,079 --> 00:56:43,220
our hot reloading function you know

1385
00:56:41,420 --> 00:56:44,960
we're doing all this sort of stuff

1386
00:56:43,219 --> 00:56:48,289
and we go ahead and we do a hot reload

1387
00:56:44,960 --> 00:56:50,990
we'll crash and we'll crash because we

1388
00:56:48,289 --> 00:56:52,539
do not actually have the valid pointers

1389
00:56:50,989 --> 00:56:55,098
anymore because our global memory our

1390
00:56:52,539 --> 00:56:57,769
global variables our statics all get

1391
00:56:55,099 --> 00:56:59,900
wiped whenever our DLL gets reloaded so

1392
00:56:57,769 --> 00:57:02,119
the more proper thing to do and what I

1393
00:56:59,900 --> 00:57:04,608
should have been doing the entire time

1394
00:57:02,119 --> 00:57:07,160
is I should always be setting up those

1395
00:57:04,608 --> 00:57:09,230
pointers right at the beginning right

1396
00:57:07,159 --> 00:57:10,848
you should always copy them in because

1397
00:57:09,230 --> 00:57:12,980
in case we got reloaded we want to make

1398
00:57:10,849 --> 00:57:15,200
sure that that's the case right and so

1399
00:57:12,980 --> 00:57:16,400
now we can just verify that we don't

1400
00:57:15,199 --> 00:57:19,669
actually crash so that was something

1401
00:57:16,400 --> 00:57:21,400
that I should have done all right so now

1402
00:57:19,670 --> 00:57:23,838
we're actually rendering very nicely

1403
00:57:21,400 --> 00:57:26,630
everything is kosher everything looks

1404
00:57:23,838 --> 00:57:28,818
nice and smooth and pretty so that's all

1405
00:57:26,630 --> 00:57:30,230
good we should probably take care of our

1406
00:57:28,818 --> 00:57:31,550
debug rectangles at some point

1407
00:57:30,230 --> 00:57:33,559
because they're not sub-pixel correct

1408
00:57:31,550 --> 00:57:37,369
maybe we never really care about that

1409
00:57:33,559 --> 00:57:39,380
but so yes so that's good for today and

1410
00:57:37,369 --> 00:57:41,329
I think that now that we're doing

1411
00:57:39,380 --> 00:57:43,119
aligned with the and and we've got the

1412
00:57:41,329 --> 00:57:45,739
masking in there we're in good shape I

1413
00:57:43,119 --> 00:57:47,720
worry when we go back to return to the

1414
00:57:45,739 --> 00:57:49,489
to optimizing that function I'm a little

1415
00:57:47,719 --> 00:57:51,379
nervous about the having to have that

1416
00:57:49,489 --> 00:57:52,519
extra branch in there but I'm hoping

1417
00:57:51,380 --> 00:57:55,369
that maybe that doesn't work out to be

1418
00:57:52,519 --> 00:57:57,739
that big of a deal because hey the X 64

1419
00:57:55,369 --> 00:57:59,539
is actually really good at branching so

1420
00:57:57,739 --> 00:58:02,269
we may be fine so that should be good

1421
00:57:59,539 --> 00:58:03,980
all right so we'll leave that we'll go

1422
00:58:02,269 --> 00:58:06,650
to the Q&amp;A I don't know that there'll be

1423
00:58:03,980 --> 00:58:07,760
a whole lot of Q&amp;A because really all we

1424
00:58:06,650 --> 00:58:08,599
had to do was do that alignment stuff

1425
00:58:07,760 --> 00:58:11,990
but if you have questions about

1426
00:58:08,599 --> 00:58:20,799
alignment now would be the time to ask

1427
00:58:11,989 --> 00:58:20,799
them okay

1428
00:58:42,730 --> 00:58:47,769
the bitmap memory size tattoos and

1429
00:58:45,039 --> 00:58:50,190
squares bytes per pixel odd did I not

1430
00:58:47,769 --> 00:58:53,559
remove one of the bytes for pixels ah

1431
00:58:50,190 --> 00:58:55,269
thank you yeah so when I moved out the

1432
00:58:53,559 --> 00:58:56,440
pitch I forgot to delete this bytes per

1433
00:58:55,269 --> 00:58:58,480
pixel which doesn't need to be there

1434
00:58:56,440 --> 00:59:01,389
anymore so thanks for catching that

1435
00:58:58,480 --> 00:59:03,309
that's good yeah because you see we

1436
00:59:01,389 --> 00:59:05,460
pulled out the bytes per pixel into here

1437
00:59:03,309 --> 00:59:08,170
so we didn't actually need to keep it

1438
00:59:05,460 --> 00:59:09,579
inside wouldn't actually do anything but

1439
00:59:08,170 --> 00:59:10,990
it just it's just waste memory right

1440
00:59:09,579 --> 00:59:19,900
because we're not we know we're not

1441
00:59:10,989 --> 00:59:21,459
gonna use that memory so yeah can you

1442
00:59:19,900 --> 00:59:23,680
test if weird resolutions are actually

1443
00:59:21,460 --> 00:59:26,079
working yes and that was what I was kind

1444
00:59:23,679 --> 00:59:27,639
of saying before going to the QA I

1445
00:59:26,079 --> 00:59:29,170
wanted to kind of do I want to test two

1446
00:59:27,639 --> 00:59:34,539
things first thing I want to do is test

1447
00:59:29,170 --> 00:59:35,680
like weird stuff with this right because

1448
00:59:34,539 --> 00:59:37,059
I don't actually you know we probably

1449
00:59:35,679 --> 00:59:38,710
got we could have some bugs in the math

1450
00:59:37,059 --> 00:59:42,849
we're like it doesn't work properly

1451
00:59:38,710 --> 00:59:44,800
reset weird tile sizes right so I want

1452
00:59:42,849 --> 00:59:47,619
to just set like make sure that you know

1453
00:59:44,800 --> 00:59:50,230
we can pick whatever we want there and

1454
00:59:47,619 --> 00:59:52,180
it doesn't go down in giant flames so

1455
00:59:50,230 --> 00:59:59,108
there's like you can see a bug there

1456
00:59:52,179 --> 01:00:02,019
that we have which I'm not sure whose

1457
00:59:59,108 --> 01:00:04,779
fault it is but you can see that

1458
01:00:02,019 --> 01:00:06,519
actually in the in the renderer for the

1459
01:00:04,780 --> 01:00:10,150
tile chunks they appear to be off

1460
01:00:06,519 --> 01:00:14,139
slightly so that's something we should

1461
01:00:10,150 --> 01:00:16,510
probably track down so we're working

1462
01:00:14,139 --> 01:00:18,969
fine but we do have some kind of a

1463
01:00:16,510 --> 01:00:20,170
clipping bug right I don't know that may

1464
01:00:18,969 --> 01:00:24,179
not come out on stream but there's like

1465
01:00:20,170 --> 01:00:26,769
a very little there's like a hairline

1466
01:00:24,179 --> 01:00:30,068
part where it did not fill so it's like

1467
01:00:26,769 --> 01:00:32,920
it was over clipping or something to

1468
01:00:30,068 --> 01:00:34,900
that due to that effect oh well you know

1469
01:00:32,920 --> 01:00:38,670
what that's just because this is not

1470
01:00:34,900 --> 01:00:38,670
rounding though

1471
01:00:39,719 --> 01:00:46,089
that's all that's all that actually is

1472
01:00:42,219 --> 01:00:48,849
so what we have to do here is we have to

1473
01:00:46,090 --> 01:00:51,220
make sure that we essentially we need to

1474
01:00:48,849 --> 01:00:52,630
be able to round up the tile width I

1475
01:00:51,219 --> 01:00:54,579
guess like I was sort of saying if if

1476
01:00:52,630 --> 01:00:58,720
the tile count here doesn't divide

1477
01:00:54,579 --> 01:01:00,579
evenly into it we're rounding up the

1478
01:00:58,719 --> 01:01:03,069
tile width so that it fits in a you know

1479
01:01:00,579 --> 01:01:04,659
that it always is a power 4 but we need

1480
01:01:03,070 --> 01:01:06,490
to do something to make sure that we

1481
01:01:04,659 --> 01:01:08,139
always fill the correct number what we

1482
01:01:06,489 --> 01:01:10,629
probably should do is just adjust the

1483
01:01:08,139 --> 01:01:13,089
last one like maybe we should do

1484
01:01:10,630 --> 01:01:14,650
something more like this I don't know

1485
01:01:13,090 --> 01:01:17,950
what do you guys think of this if we

1486
01:01:14,650 --> 01:01:25,119
just say if this happens to be the last

1487
01:01:17,949 --> 01:01:27,879
one right if this is the last tile in

1488
01:01:25,119 --> 01:01:31,750
either direction we just make sure that

1489
01:01:27,880 --> 01:01:33,700
it actually you know that it actually

1490
01:01:31,750 --> 01:01:39,519
lines that it actually goes all the way

1491
01:01:33,699 --> 01:01:43,449
to the end right so that that may be the

1492
01:01:39,519 --> 01:01:47,500
better solution so there that's there

1493
01:01:43,449 --> 01:01:50,500
that's go in there okay

1494
01:01:47,500 --> 01:01:53,920
so that seems good so 9 is probably not

1495
01:01:50,500 --> 01:01:56,019
a good number I'll leave it at 4 here

1496
01:01:53,920 --> 01:01:59,139
for now though we may actually want to

1497
01:01:56,019 --> 01:02:00,610
be smaller than that we'll see I'm not

1498
01:01:59,139 --> 01:02:02,980
actually sure what the optimal number is

1499
01:02:00,610 --> 01:02:05,559
but we'll do some timings so let me also

1500
01:02:02,980 --> 01:02:07,510
check while we're at it the actual

1501
01:02:05,559 --> 01:02:10,509
overall resolution so if we want to run

1502
01:02:07,510 --> 01:02:12,970
in some totally weird you know thing

1503
01:02:10,510 --> 01:02:15,940
besides 1920 by 1080 right if we're

1504
01:02:12,969 --> 01:02:18,779
trying to run in some really weird mode

1505
01:02:15,940 --> 01:02:32,460
I will go ahead and just introduce some

1506
01:02:18,780 --> 01:02:37,810
graphics number like 1371 let's say by

1507
01:02:32,460 --> 01:02:39,760
913 or better yet well you know what

1508
01:02:37,809 --> 01:02:44,400
let's let's get some Prime's in here

1509
01:02:39,760 --> 01:02:48,240
that aren't divisible by anything Prime

1510
01:02:44,400 --> 01:02:48,240
list of prime numbers

1511
01:02:48,429 --> 01:02:55,598
let's take a look at the prime numbers

1512
01:02:51,369 --> 01:02:59,318
so let's do a prime number

1513
01:02:55,599 --> 01:03:03,548
how about you know I'm feeling good

1514
01:02:59,318 --> 01:03:06,250
about maybe something like 1277 or 1279

1515
01:03:03,548 --> 01:03:09,940
nice and prime nothing divides into it

1516
01:03:06,250 --> 01:03:12,639
evenly so that's good and you know maybe

1517
01:03:09,940 --> 01:03:17,849
we'll go out and grab how do you feel

1518
01:03:12,639 --> 01:03:21,909
about maybe 719 so it's pretty close to

1519
01:03:17,849 --> 01:03:24,400
720p mode there but it's totally prime

1520
01:03:21,909 --> 01:03:27,460
so nothing divides evenly into it and

1521
01:03:24,400 --> 01:03:29,349
let's make sure so there yeah awesome so

1522
01:03:27,460 --> 01:03:31,659
you can see we definitely have a bug

1523
01:03:29,349 --> 01:03:33,220
somewhere where we're not incrementing

1524
01:03:31,659 --> 01:03:36,338
one of the values properly so that's a

1525
01:03:33,219 --> 01:03:40,298
good thing to test we're running just

1526
01:03:36,338 --> 01:03:43,509
fine but our pitch is off so we need to

1527
01:03:40,298 --> 01:03:45,278
go figure out why our pitches off now

1528
01:03:43,510 --> 01:03:47,589
what's weird is this almost looks like

1529
01:03:45,278 --> 01:03:50,079
it's maybe just the blit in win32 that's

1530
01:03:47,588 --> 01:03:56,588
off so I want to go whoo double check

1531
01:03:50,079 --> 01:04:03,269
that blitz I don't actually know what

1532
01:03:56,588 --> 01:04:03,269
that does so stretch di bits buffer info

1533
01:04:04,929 --> 01:04:15,618
so the the pitch the pitch is not

1534
01:04:09,679 --> 01:04:17,089
actually being used here so I actually

1535
01:04:15,619 --> 01:04:21,800
suspect that it's actually just this

1536
01:04:17,090 --> 01:04:23,570
code that's wrong that's that's my Sigma

1537
01:04:21,800 --> 01:04:27,680
that's my suspicion so I'm gonna take a

1538
01:04:23,570 --> 01:04:32,269
look at stretch di bits and see if it

1539
01:04:27,679 --> 01:04:34,489
accepts the pitch okay in the pin like

1540
01:04:32,269 --> 01:04:35,509
the bitmap info I'm assuming it's where

1541
01:04:34,489 --> 01:04:37,609
that would go because you can see

1542
01:04:35,510 --> 01:04:41,300
there's no mention of pitch anywhere in

1543
01:04:37,610 --> 01:04:42,829
here so we gotta go we've got to go make

1544
01:04:41,300 --> 01:04:49,820
sure that's that's actually gonna be

1545
01:04:42,829 --> 01:04:53,989
right so in the bitmap info header this

1546
01:04:49,820 --> 01:05:00,800
may be a non-starter unfortunately right

1547
01:04:53,989 --> 01:05:05,029
there is no pitch it looks like so we

1548
01:05:00,800 --> 01:05:06,769
may not be allowed to use stretch so so

1549
01:05:05,030 --> 01:05:09,050
honestly I think that's probably all

1550
01:05:06,769 --> 01:05:12,590
that is is we the thing we're using to

1551
01:05:09,050 --> 01:05:14,210
copy it to the screen can't handle and

1552
01:05:12,590 --> 01:05:17,630
our trail solution so I think we

1553
01:05:14,210 --> 01:05:23,199
actually are handling it but they are

1554
01:05:17,630 --> 01:05:27,858
not handling it so yeah that's

1555
01:05:23,199 --> 01:05:32,149
unfortunate to say the least but that

1556
01:05:27,858 --> 01:05:34,279
just looks like how it goes so so yeah

1557
01:05:32,150 --> 01:05:37,550
we can't can't really do much with that

1558
01:05:34,280 --> 01:05:39,530
I'm afraid what we can do is we did

1559
01:05:37,550 --> 01:05:42,080
verify that it looks like it renders

1560
01:05:39,530 --> 01:05:44,000
properly in our code anyway but stretch

1561
01:05:42,079 --> 01:05:45,469
di bits is not going to accept that I

1562
01:05:44,000 --> 01:05:49,699
don't know we could probably try to

1563
01:05:45,469 --> 01:05:51,529
create something else here but yeah I

1564
01:05:49,699 --> 01:05:53,179
mean copying it to Windows we we just

1565
01:05:51,530 --> 01:05:58,340
have to do some kind of a copy ourselves

1566
01:05:53,179 --> 01:06:00,289
there anyway right so anyway I think

1567
01:05:58,340 --> 01:06:02,960
that's roughly correct the other thing

1568
01:06:00,289 --> 01:06:06,920
we could do is we could change the back

1569
01:06:02,960 --> 01:06:09,800
buffer inside the actual renderer to be

1570
01:06:06,920 --> 01:06:12,440
different so for example you know we

1571
01:06:09,800 --> 01:06:16,210
could do something where we set it to

1572
01:06:12,440 --> 01:06:18,050
1920 by 1080 so it's it's always running

1573
01:06:16,210 --> 01:06:19,309
properly through windows

1574
01:06:18,050 --> 01:06:21,530
and it doesn't need to know about our

1575
01:06:19,309 --> 01:06:25,340
pitch and what's happening there but

1576
01:06:21,530 --> 01:06:27,470
then what we could do is inside the the

1577
01:06:25,340 --> 01:06:31,940
render itself when we come in here we

1578
01:06:27,469 --> 01:06:36,909
could just fake the size right to be

1579
01:06:31,940 --> 01:06:41,389
different so for example in handmade CPP

1580
01:06:36,909 --> 01:06:43,549
where we do the output target stuff

1581
01:06:41,389 --> 01:06:48,500
let's go ahead and see where that

1582
01:06:43,550 --> 01:06:55,820
actually is when I do to render so we've

1583
01:06:48,500 --> 01:06:59,210
got raw buffer right so here withdraw

1584
01:06:55,820 --> 01:07:02,330
buffer we kind of go ahead and set up

1585
01:06:59,210 --> 01:07:08,539
this stuff for the buffer so what I'm

1586
01:07:02,329 --> 01:07:11,769
thinking is maybe maybe we can just here

1587
01:07:08,539 --> 01:07:15,139
do a little thing where we hard set it

1588
01:07:11,769 --> 01:07:16,909
so that even though Windows has the

1589
01:07:15,139 --> 01:07:21,139
backing store that it's okay with we

1590
01:07:16,909 --> 01:07:21,859
still run in a prime mode and see how

1591
01:07:21,139 --> 01:07:34,420
that goes

1592
01:07:21,860 --> 01:07:34,420
so that that looks sort of correct to me

1593
01:07:40,179 --> 01:07:56,210
yeah I think we're all good there looks

1594
01:07:44,300 --> 01:07:59,420
pretty reasonable all right okay uh so

1595
01:07:56,210 --> 01:08:06,429
yeah I think I'll leave that in here

1596
01:07:59,420 --> 01:08:11,300
just so we have a like note Casey enable

1597
01:08:06,429 --> 01:08:15,250
this to test weird buffer sizes in the

1598
01:08:11,300 --> 01:08:15,250
renderer and there we go

1599
01:08:28,079 --> 01:08:33,220
will you check for cash aliasing with

1600
01:08:31,510 --> 01:08:34,989
this much alignment hitting cache

1601
01:08:33,220 --> 01:08:36,490
aliasing is much easier

1602
01:08:34,989 --> 01:08:38,109
unfortunately I can't check for cache

1603
01:08:36,489 --> 01:08:41,760
aliasing very quickly right now because

1604
01:08:38,109 --> 01:08:44,079
we need some ability to go read

1605
01:08:41,760 --> 01:08:46,210
performance information which we don't

1606
01:08:44,079 --> 01:08:47,979
really have at the moment so eventually

1607
01:08:46,210 --> 01:08:53,800
we could get there but yeah at the

1608
01:08:47,979 --> 01:08:55,119
moment no I can't and I catch so yeah I

1609
01:08:53,800 --> 01:08:57,820
know what kind of aliasing you're

1610
01:08:55,119 --> 01:08:59,649
talking about well we'll try to get to

1611
01:08:57,819 --> 01:09:02,920
that later that's kind of a very

1612
01:08:59,649 --> 01:09:04,710
advanced topic but we can try to to get

1613
01:09:02,920 --> 01:09:07,899
to that later maybe we can run some

1614
01:09:04,710 --> 01:09:09,369
Intel performance gathering library that

1615
01:09:07,899 --> 01:09:10,960
will allow us to read like l2 cache

1616
01:09:09,369 --> 01:09:13,750
misses and stuff like that from the from

1617
01:09:10,960 --> 01:09:14,800
the chip and and that that has some

1618
01:09:13,750 --> 01:09:16,840
aliasing data in it if I remember

1619
01:09:14,800 --> 01:09:19,350
correctly so you can you can actually

1620
01:09:16,840 --> 01:09:19,350
look at those

1621
01:09:27,430 --> 01:09:31,609
what about the extra pixel around the

1622
01:09:29,960 --> 01:09:34,789
edges to deal with bilinear filtering

1623
01:09:31,609 --> 01:09:36,470
will you get rid of that I don't know if

1624
01:09:34,789 --> 01:09:40,338
we will ever get rid of that we will

1625
01:09:36,470 --> 01:09:43,369
take a look at that maybe I'm not sure

1626
01:09:40,338 --> 01:09:44,930
in a somewhere possibly this week when

1627
01:09:43,369 --> 01:09:46,909
we go through and just look at what

1628
01:09:44,930 --> 01:09:51,039
we're doing regarding pixel centers and

1629
01:09:46,909 --> 01:09:53,180
stuff but we may not ever fix that

1630
01:09:51,039 --> 01:09:55,670
depending on how we choose to do our

1631
01:09:53,180 --> 01:09:58,340
bitmap stuff we may end up making it so

1632
01:09:55,670 --> 01:10:01,369
that what we actually do there is we

1633
01:09:58,340 --> 01:10:04,239
always Pat our bitmaps so that we can

1634
01:10:01,369 --> 01:10:04,239
fetch a little extra

1635
01:10:22,310 --> 01:10:27,860
looks like that is the end of the

1636
01:10:24,859 --> 01:10:27,859
questions

1637
01:10:33,229 --> 01:10:38,118
did I not recompile with that zero it

1638
01:10:36,000 --> 01:10:38,118
out

1639
01:10:39,319 --> 01:10:42,500
there we go

1640
01:10:46,010 --> 01:10:57,560
yeah and so one of the things that that

1641
01:10:51,738 --> 01:10:59,719
I'll do and I was I guess maybe we

1642
01:10:57,560 --> 01:11:02,000
should do this sometime soon I'll have

1643
01:10:59,720 --> 01:11:04,190
to update the art pack with full res

1644
01:11:02,000 --> 01:11:07,699
assets because I actually I asked

1645
01:11:04,189 --> 01:11:12,109
yangshin to do all the assets for 4k

1646
01:11:07,699 --> 01:11:13,670
resolution and so I actually all these

1647
01:11:12,109 --> 01:11:15,409
are actually downsampled

1648
01:11:13,670 --> 01:11:18,440
I downsampled them because when we

1649
01:11:15,409 --> 01:11:22,970
started working we didn't have scaling

1650
01:11:18,439 --> 01:11:25,969
and so what I probably will do is we'll

1651
01:11:22,970 --> 01:11:28,220
go ahead and properly sized them now for

1652
01:11:25,970 --> 01:11:30,560
1920 by 1080 since obviously that's what

1653
01:11:28,220 --> 01:11:33,890
we're gonna want to run the game in and

1654
01:11:30,560 --> 01:11:36,230
so I'll only scale them down by 2x for

1655
01:11:33,890 --> 01:11:37,640
use so we'll have to do that eventually

1656
01:11:36,229 --> 01:11:39,259
I don't know when we'll do that maybe in

1657
01:11:37,640 --> 01:11:40,670
a couple weeks when we want to start

1658
01:11:39,260 --> 01:11:42,470
playing around with some of the some of

1659
01:11:40,670 --> 01:11:51,199
the other stuff maybe after we're done

1660
01:11:42,470 --> 01:11:52,730
with debug output so yeah when you keep

1661
01:11:51,199 --> 01:11:55,039
the rendering of the two lines on

1662
01:11:52,729 --> 01:11:58,250
separate hyper threads so we haven't

1663
01:11:55,039 --> 01:12:01,880
actually done that yet right and the

1664
01:11:58,250 --> 01:12:03,649
reason for that is because and it's

1665
01:12:01,880 --> 01:12:07,039
something that we have to get to or at

1666
01:12:03,649 --> 01:12:08,689
least I mean to be honest maybe what we

1667
01:12:07,039 --> 01:12:11,300
should do is just not bother any more

1668
01:12:08,689 --> 01:12:14,779
with it because I wasn't expecting the

1669
01:12:11,300 --> 01:12:17,449
renderer to be so fast as it is already

1670
01:12:14,779 --> 01:12:21,920
and so it might not be that useful for

1671
01:12:17,449 --> 01:12:23,599
us to belabor the point but as you can

1672
01:12:21,920 --> 01:12:26,060
see we're not actually using too hyper

1673
01:12:23,600 --> 01:12:29,930
threads yet we just have a single thread

1674
01:12:26,060 --> 01:12:31,520
do both and so the reason that we're

1675
01:12:29,930 --> 01:12:33,200
doing that currently is because with the

1676
01:12:31,520 --> 01:12:35,810
job queue it's actually somewhat

1677
01:12:33,199 --> 01:12:41,569
difficult for us to make sure that the

1678
01:12:35,810 --> 01:12:43,820
same like core will grab two of the same

1679
01:12:41,569 --> 01:12:45,439
tile and then use threads interleaved

1680
01:12:43,819 --> 01:12:48,829
it's it's kind of tricky to figure out

1681
01:12:45,439 --> 01:12:50,329
how to really make that work right and

1682
01:12:48,829 --> 01:12:52,909
so that's like sort of a separate thing

1683
01:12:50,329 --> 01:12:54,979
and so since it's so fast doing the

1684
01:12:52,909 --> 01:12:58,099
rendering the way that's doing it I am

1685
01:12:54,979 --> 01:12:59,389
wondering whether it's something we just

1686
01:12:58,100 --> 01:13:06,050
actually don't need to do

1687
01:12:59,390 --> 01:13:11,180
and I don't know I really don't so

1688
01:13:06,050 --> 01:13:12,590
yeah it's tough to say and it may be

1689
01:13:11,180 --> 01:13:15,560
something we should just bolt and get

1690
01:13:12,590 --> 01:13:18,500
rid of the every other line thing

1691
01:13:15,560 --> 01:13:20,680
entirely right that may just be be

1692
01:13:18,500 --> 01:13:20,680
better

1693
01:13:33,649 --> 01:13:37,319
and if the person who's asking whether

1694
01:13:35,670 --> 01:13:40,199
it's going to be a 4k Zelda one style

1695
01:13:37,319 --> 01:13:42,479
game it's actually not gonna be 4k like

1696
01:13:40,199 --> 01:13:44,069
I just had the art assets done in 4k

1697
01:13:42,479 --> 01:13:46,829
because I wasn't sure what how we needed

1698
01:13:44,069 --> 01:13:51,119
to scale them exactly so it'll be 1920

1699
01:13:46,829 --> 01:13:55,920
by 1080 is what it'll actually be and I

1700
01:13:51,119 --> 01:13:58,019
at some point maybe many you know

1701
01:13:55,920 --> 01:14:00,510
several years down the line when people

1702
01:13:58,020 --> 01:14:03,150
are actually have 4k displays and

1703
01:14:00,510 --> 01:14:05,430
actually are have graphics cards that

1704
01:14:03,149 --> 01:14:08,699
output to them reliably and stuff we

1705
01:14:05,430 --> 01:14:10,680
could ship the you know a very large

1706
01:14:08,699 --> 01:14:12,750
version of the game that had the 4k

1707
01:14:10,680 --> 01:14:16,560
assets in it potentially as well I don't

1708
01:14:12,750 --> 01:14:19,649
know what we'll do there but yeah I mean

1709
01:14:16,560 --> 01:14:22,610
the long and short of it is we do we

1710
01:14:19,649 --> 01:14:26,009
should have the capability to run at 4k

1711
01:14:22,609 --> 01:14:28,409
in terms of art assets at such time when

1712
01:14:26,010 --> 01:14:29,850
that actually makes some sense but at

1713
01:14:28,409 --> 01:14:33,389
the moment the vast majority of people

1714
01:14:29,850 --> 01:14:34,470
don't have a 4k display not to mention

1715
01:14:33,390 --> 01:14:37,220
whether they had necessarily have a

1716
01:14:34,470 --> 01:14:40,770
machine that would run it so it's not

1717
01:14:37,220 --> 01:14:45,949
really that's not part of the goal of

1718
01:14:40,770 --> 01:14:48,540
this game alright looks like we are

1719
01:14:45,949 --> 01:14:50,010
concluded all right so this is good

1720
01:14:48,539 --> 01:14:51,420
today we've got our render and a place

1721
01:14:50,010 --> 01:14:52,980
where now it we could actually use it

1722
01:14:51,420 --> 01:14:55,260
because doesn't have weird tile

1723
01:14:52,979 --> 01:14:58,259
boundaries on it anymore so that's a

1724
01:14:55,260 --> 01:15:00,300
good thing that's all very good and so

1725
01:14:58,260 --> 01:15:03,060
what we need to do tomorrow is we need

1726
01:15:00,300 --> 01:15:06,480
to start taking a look at some other

1727
01:15:03,060 --> 01:15:07,800
aspects of that that code I want to go

1728
01:15:06,479 --> 01:15:09,750
through and just tighten up some more

1729
01:15:07,800 --> 01:15:11,579
things maybe take a look at the sort of

1730
01:15:09,750 --> 01:15:15,869
the render queue the way things are

1731
01:15:11,579 --> 01:15:17,309
flowing through it and just the the way

1732
01:15:15,869 --> 01:15:18,539
that pixel centers and textile center is

1733
01:15:17,310 --> 01:15:20,160
working that code I just want to kind of

1734
01:15:18,539 --> 01:15:21,899
do a pass now that we've done a bunch of

1735
01:15:20,159 --> 01:15:23,010
work on it here I want to do a pass to

1736
01:15:21,899 --> 01:15:25,170
make sure everything is kind of kosher

1737
01:15:23,010 --> 01:15:28,010
there and and we don't have any weird

1738
01:15:25,170 --> 01:15:30,090
surprises going on but that does seem

1739
01:15:28,010 --> 01:15:32,159
like you know hopefully that wouldn't

1740
01:15:30,090 --> 01:15:34,650
take too long just wanna do some of that

1741
01:15:32,159 --> 01:15:37,590
stuff and maybe we'll try to I don't

1742
01:15:34,649 --> 01:15:40,109
know people always seem extremely upset

1743
01:15:37,590 --> 01:15:41,489
about sorting so maybe we could also

1744
01:15:40,109 --> 01:15:43,439
kind of roll that in there I don't know

1745
01:15:41,488 --> 01:15:45,149
but they hate it when like he comes here

1746
01:15:43,439 --> 01:15:47,399
and he's not behind the tree

1747
01:15:45,149 --> 01:15:49,739
everyone just can't deal with it I don't

1748
01:15:47,399 --> 01:15:51,929
really know why but they can't handle it

1749
01:15:49,739 --> 01:15:53,639
so we could do that potentially as well

1750
01:15:51,930 --> 01:15:55,650
so anyway just want to start doing some

1751
01:15:53,640 --> 01:15:56,970
render cleanup passes get us down to the

1752
01:15:55,649 --> 01:15:58,170
point where we're in a place where we're

1753
01:15:56,970 --> 01:15:59,699
comfortable we've got the threading

1754
01:15:58,170 --> 01:16:02,940
working we've got an optimized version

1755
01:15:59,699 --> 01:16:04,800
of one of the Blitz well it's actually a

1756
01:16:02,939 --> 01:16:06,689
texture mapper at this point we've got

1757
01:16:04,800 --> 01:16:08,220
an optimized texture mapper and then

1758
01:16:06,689 --> 01:16:10,619
we'll have sort of like cleanup the

1759
01:16:08,220 --> 01:16:11,520
render queue and we can actually take a

1760
01:16:10,619 --> 01:16:14,130
look at like okay here's the whole

1761
01:16:11,520 --> 01:16:15,150
renderer here's the performance looks

1762
01:16:14,130 --> 01:16:17,069
like right now

1763
01:16:15,149 --> 01:16:19,019
what's the memory throughput in total

1764
01:16:17,069 --> 01:16:21,539
that we actually are getting and how

1765
01:16:19,020 --> 01:16:23,370
close is that to the maximum so that we

1766
01:16:21,539 --> 01:16:25,380
have some idea of you know what our

1767
01:16:23,369 --> 01:16:29,039
performance is so we'll go ahead and do

1768
01:16:25,380 --> 01:16:29,310
that tomorrow and again same time same

1769
01:16:29,039 --> 01:16:31,560
place

1770
01:16:29,310 --> 01:16:35,970
5:00 5:00 p.m. Pacific Daylight Time

1771
01:16:31,560 --> 01:16:37,620
here on Twitch so hopefully that will be

1772
01:16:35,970 --> 01:16:39,390
something you will come and join us for

1773
01:16:37,619 --> 01:16:46,680
I'm gonna go ahead and shut things down

1774
01:16:39,390 --> 01:16:47,460
here info header alright thank you

1775
01:16:46,680 --> 01:16:48,869
everyone for joining me for another

1776
01:16:47,460 --> 01:16:50,760
episode of hand made he wrote some

1777
01:16:48,869 --> 01:16:51,989
pleasure coding with you as always if

1778
01:16:50,760 --> 01:16:54,539
you would like to follow along at home

1779
01:16:51,989 --> 01:16:57,090
you can always go to handmade hero org

1780
01:16:54,539 --> 01:16:58,199
and pre-order the game it comes with all

1781
01:16:57,090 --> 01:17:00,569
the source code so that you can play

1782
01:16:58,199 --> 01:17:02,489
around with it at home we also have a

1783
01:17:00,569 --> 01:17:04,289
forum site we can ask questions and view

1784
01:17:02,489 --> 01:17:06,149
the annotate episode guide get ports to

1785
01:17:04,289 --> 01:17:07,319
Mac and Linux all kinds of good stuff we

1786
01:17:06,149 --> 01:17:08,460
have a patreon page if you want to

1787
01:17:07,319 --> 01:17:10,469
support the video series you can

1788
01:17:08,460 --> 01:17:12,239
subscribe to that we also have a tweet

1789
01:17:10,470 --> 01:17:13,500
bot which tweets the schedule at you and

1790
01:17:12,239 --> 01:17:15,119
we have a little live button which gives

1791
01:17:13,500 --> 01:17:17,369
you a countdown until the next live

1792
01:17:15,119 --> 01:17:21,960
stream so check all that out it's all

1793
01:17:17,369 --> 01:17:24,239
pretty useful and in the meantime until

1794
01:17:21,960 --> 01:17:26,789
tomorrow at 5 p.m. when I hope to see

1795
01:17:24,239 --> 01:17:28,979
everyone back here have a good time

1796
01:17:26,789 --> 01:17:29,579
coding and I will see you all on the

1797
01:17:28,979 --> 01:17:32,239
Internet's

1798
01:17:29,579 --> 01:17:32,239
take it easy everyone

