1
00:00:02,000 --> 00:00:06,878
so uh

2
00:00:04,480 --> 00:00:10,000
this was the first one

3
00:00:06,878 --> 00:00:10,000
hopefully you can see that there

4
00:00:10,558 --> 00:00:13,839
uh

5
00:00:11,599 --> 00:00:16,640
and it's pretty great looking the the

6
00:00:13,839 --> 00:00:19,198
printer we worked with is local and we

7
00:00:16,640 --> 00:00:21,439
were really able to do like kind of a

8
00:00:19,199 --> 00:00:22,640
it's really good like it just looks

9
00:00:21,439 --> 00:00:23,600
amazing

10
00:00:22,640 --> 00:00:25,439
um

11
00:00:23,600 --> 00:00:27,359
the colors are like really nice it's

12
00:00:25,439 --> 00:00:28,879
hard to show it on camera this camera is

13
00:00:27,359 --> 00:00:30,880
also a bit desaturated but it's just

14
00:00:28,879 --> 00:00:33,200
such high print quality on this thing

15
00:00:30,879 --> 00:00:35,200
they did an amazing job looks it's one

16
00:00:33,200 --> 00:00:37,840
of the best looking graphic novels we

17
00:00:35,200 --> 00:00:39,359
have on the shelf and that's you know

18
00:00:37,840 --> 00:00:41,200
that's all down to the print right i

19
00:00:39,359 --> 00:00:42,839
mean you can

20
00:00:41,200 --> 00:00:44,960
anna does great artwork obviously but

21
00:00:42,840 --> 00:00:46,399
like when you're talking about what the

22
00:00:44,960 --> 00:00:48,239
difference is between what it looks like

23
00:00:46,399 --> 00:00:50,640
on the screen and what it looks like

24
00:00:48,238 --> 00:00:53,038
uh printed it's just how good are those

25
00:00:50,640 --> 00:00:54,640
printers you know and uh they were just

26
00:00:53,039 --> 00:00:56,800
great working with the pre-press and

27
00:00:54,640 --> 00:00:58,320
everything they they like had such good

28
00:00:56,799 --> 00:01:00,159
people and we we went through and like

29
00:00:58,320 --> 00:01:03,920
corrected all this stuff

30
00:01:00,159 --> 00:01:06,239
uh in terms of how to ink it properly um

31
00:01:03,920 --> 00:01:07,840
so it it just ended up being like a a

32
00:01:06,239 --> 00:01:09,920
really great time so we're excited about

33
00:01:07,840 --> 00:01:11,600
doing book two

34
00:01:09,920 --> 00:01:12,799
uh

35
00:01:11,599 --> 00:01:13,759
and

36
00:01:12,799 --> 00:01:15,759
you know

37
00:01:13,760 --> 00:01:17,280
i we're hoping the kickstarter works out

38
00:01:15,759 --> 00:01:19,200
obviously

39
00:01:17,280 --> 00:01:20,560
but uh

40
00:01:19,200 --> 00:01:22,240
you know

41
00:01:20,560 --> 00:01:26,200
if you want to check it out

42
00:01:22,239 --> 00:01:26,199
the link should be down below

43
00:01:26,719 --> 00:01:30,158
oh the jeff and casey show okay yeah we

44
00:01:28,719 --> 00:01:31,920
can talk about that

45
00:01:30,159 --> 00:01:32,880
sure um

46
00:01:31,920 --> 00:01:36,079
actually

47
00:01:32,879 --> 00:01:38,959
we put the kickstarter link in here

48
00:01:36,078 --> 00:01:42,478
people who want to check out the book

49
00:01:38,959 --> 00:01:45,839
uh so the jeff and casey show is has two

50
00:01:42,478 --> 00:01:45,840
problems right now

51
00:01:45,920 --> 00:01:48,719
um

52
00:01:46,879 --> 00:01:49,839
problem number one

53
00:01:48,719 --> 00:01:51,438
is

54
00:01:49,840 --> 00:01:52,560
just that

55
00:01:51,438 --> 00:01:53,839
we

56
00:01:52,560 --> 00:01:55,759
you know

57
00:01:53,840 --> 00:01:58,000
jeff kind of had like

58
00:01:55,759 --> 00:01:58,000
a

59
00:01:59,599 --> 00:02:05,199
so he used to live in seattle right

60
00:02:02,319 --> 00:02:07,519
so we were in the same city all the time

61
00:02:05,200 --> 00:02:10,800
so it's pretty easy to record

62
00:02:07,519 --> 00:02:14,079
he sort of now splits his time uh he

63
00:02:10,800 --> 00:02:15,840
lives part of time in california

64
00:02:14,080 --> 00:02:17,599
uh and part of the time

65
00:02:15,840 --> 00:02:20,080
uh back here

66
00:02:17,598 --> 00:02:21,439
and so it's kind of like hard to sync up

67
00:02:20,080 --> 00:02:23,040
schedules because you know when he's

68
00:02:21,439 --> 00:02:24,719
back here

69
00:02:23,039 --> 00:02:26,479
um only part of the time he's obviously

70
00:02:24,719 --> 00:02:28,878
doing important stuff

71
00:02:26,479 --> 00:02:30,479
and all that and you know especially now

72
00:02:28,878 --> 00:02:32,000
with the fact that rad got bought by

73
00:02:30,479 --> 00:02:34,159
epic and all that stuff there's just a

74
00:02:32,000 --> 00:02:35,519
lot of like

75
00:02:34,159 --> 00:02:37,280
difficulty in scheduling that's one

76
00:02:35,519 --> 00:02:39,200
thing the other thing was coronavirus

77
00:02:37,280 --> 00:02:40,878
right so people were quarantining and

78
00:02:39,199 --> 00:02:42,560
staying at home a lot and and all that

79
00:02:40,878 --> 00:02:43,679
sort of stuff

80
00:02:42,560 --> 00:02:45,680
uh

81
00:02:43,680 --> 00:02:47,280
so you know

82
00:02:45,680 --> 00:02:50,879
should we record more episodes jeff in

83
00:02:47,280 --> 00:02:54,080
case so yes um both of us are vaccinated

84
00:02:50,878 --> 00:02:55,840
both of us try to be pretty careful but

85
00:02:54,080 --> 00:02:58,080
i don't know jeff is

86
00:02:55,840 --> 00:03:00,000
is in contact with more people so i

87
00:02:58,080 --> 00:03:01,570
don't know we could try to be safe but

88
00:03:00,000 --> 00:03:03,598
you get me and him in in

89
00:03:01,569 --> 00:03:05,519
[Music]

90
00:03:03,598 --> 00:03:07,439
you know yelling at the top of our lungs

91
00:03:05,519 --> 00:03:08,560
like we do at the podcast in the same

92
00:03:07,439 --> 00:03:10,158
room together if either of us caught

93
00:03:08,560 --> 00:03:11,439
coronavirus we're accidentally going to

94
00:03:10,158 --> 00:03:13,598
give it to the other person there's

95
00:03:11,439 --> 00:03:14,800
there's no way

96
00:03:13,598 --> 00:03:16,719
around that i mean suppose we could do

97
00:03:14,800 --> 00:03:20,159
the podcast with masks on

98
00:03:16,719 --> 00:03:21,439
but uh you know it's it's definitely a

99
00:03:20,158 --> 00:03:22,479
an issue so

100
00:03:21,439 --> 00:03:25,359
you know

101
00:03:22,479 --> 00:03:26,560
um we'll see we'll get back to it soon

102
00:03:25,360 --> 00:03:28,000
and

103
00:03:26,560 --> 00:03:29,519
you know coronavirus hopefully will

104
00:03:28,000 --> 00:03:31,360
become less of an issue anyway as

105
00:03:29,519 --> 00:03:33,039
treatments you know they're working on

106
00:03:31,360 --> 00:03:34,879
good treatments and stuff for it and i

107
00:03:33,039 --> 00:03:37,120
think they'll probably have you know

108
00:03:34,878 --> 00:03:39,039
better treatments coming up and and so

109
00:03:37,120 --> 00:03:40,878
at some point we could just say like hey

110
00:03:39,039 --> 00:03:42,798
it doesn't matter let's just do it but

111
00:03:40,878 --> 00:03:44,158
we still have that scheduling problem so

112
00:03:42,799 --> 00:03:45,680
you know

113
00:03:44,158 --> 00:03:47,759
when jeff's schedule opens up maybe a

114
00:03:45,680 --> 00:03:51,840
little bit more

115
00:03:47,759 --> 00:03:51,840
uh we'll we'll try to do it for sure

116
00:03:58,239 --> 00:04:04,560
have you looked at twitch's code

117
00:04:02,080 --> 00:04:04,800
i have not uh i assume you're referring

118
00:04:04,560 --> 00:04:06,158
to

119
00:04:04,800 --> 00:04:08,959
[Music]

120
00:04:06,158 --> 00:04:10,318
the uh they had like a hack or something

121
00:04:08,959 --> 00:04:12,080
i i

122
00:04:10,318 --> 00:04:13,518
i know that they did because they sent

123
00:04:12,080 --> 00:04:15,120
out an email i haven't really read the

124
00:04:13,519 --> 00:04:16,720
news on it i think i saw something about

125
00:04:15,120 --> 00:04:18,879
it but um

126
00:04:16,720 --> 00:04:21,280
i know that they did because in order to

127
00:04:18,879 --> 00:04:23,439
stream tonight i had to reset my stream

128
00:04:21,279 --> 00:04:25,039
key because they sent out an email

129
00:04:23,439 --> 00:04:25,759
where they were like

130
00:04:25,040 --> 00:04:27,759
hey

131
00:04:25,759 --> 00:04:30,960
uh you guys got gotta reset all your

132
00:04:27,759 --> 00:04:33,120
stream keys and i'm like okay

133
00:04:30,959 --> 00:04:35,680
um

134
00:04:33,120 --> 00:04:37,759
so i haven't looked at anything uh from

135
00:04:35,680 --> 00:04:39,519
the leak i don't know that i would wanna

136
00:04:37,759 --> 00:04:41,199
ever look at twitch's code because i'm

137
00:04:39,519 --> 00:04:42,959
sure it's pretty special

138
00:04:41,199 --> 00:04:45,040
so i don't want to see that

139
00:04:42,959 --> 00:04:47,599
it'd probably give me nightmares

140
00:04:45,040 --> 00:04:48,720
um and i guess i'm not super concerned

141
00:04:47,600 --> 00:04:51,919
about it

142
00:04:48,720 --> 00:04:51,919
necessarily because

143
00:04:54,079 --> 00:04:57,039
i mean

144
00:04:55,279 --> 00:04:59,198
you know we're we're not a high profile

145
00:04:57,040 --> 00:05:00,720
streamer we we don't

146
00:04:59,199 --> 00:05:00,980
you know

147
00:05:00,720 --> 00:05:03,199
uh

148
00:05:00,980 --> 00:05:05,199
[Music]

149
00:05:03,199 --> 00:05:07,360
you know i'm not afraid someone's gonna

150
00:05:05,199 --> 00:05:08,960
go find out how much uh the handmade

151
00:05:07,360 --> 00:05:10,479
hero stream makes a year because it's

152
00:05:08,959 --> 00:05:13,680
not very much

153
00:05:10,478 --> 00:05:15,519
right um you know i can see why maybe

154
00:05:13,680 --> 00:05:17,120
like people's having people having that

155
00:05:15,519 --> 00:05:19,599
information compromise could could be

156
00:05:17,120 --> 00:05:20,959
kind of a problem right

157
00:05:19,600 --> 00:05:23,039
uh if you were trying to keep that

158
00:05:20,959 --> 00:05:25,839
information secret but but we're we're

159
00:05:23,038 --> 00:05:27,120
not i mean you know i think twitch pays

160
00:05:25,839 --> 00:05:29,198
us something like a thousand dollars a

161
00:05:27,120 --> 00:05:30,720
month

162
00:05:29,199 --> 00:05:32,639
uh

163
00:05:30,720 --> 00:05:35,360
so you know that's information i would

164
00:05:32,639 --> 00:05:36,560
just give out so i i don't really uh

165
00:05:35,360 --> 00:05:39,840
i don't really have too many concerns

166
00:05:36,560 --> 00:05:39,839
about the leak other than

167
00:05:39,918 --> 00:05:42,478
kind of one of the obvious things which

168
00:05:41,360 --> 00:05:43,919
is that like

169
00:05:42,478 --> 00:05:45,758
man like

170
00:05:43,918 --> 00:05:47,120
why do we bother with all this stuff you

171
00:05:45,759 --> 00:05:49,038
know there's like two-factor

172
00:05:47,120 --> 00:05:52,478
authentication and all this crap like

173
00:05:49,038 --> 00:05:54,079
come on man like

174
00:05:52,478 --> 00:05:56,159
i mean no one's ever hacked one of my

175
00:05:54,079 --> 00:05:58,240
accounts

176
00:05:56,160 --> 00:06:00,000
and at this rate i don't know why they

177
00:05:58,240 --> 00:06:01,918
would because

178
00:06:00,000 --> 00:06:03,680
it's all it seems like it's easier

179
00:06:01,918 --> 00:06:05,519
rather than trying to hack one of my

180
00:06:03,680 --> 00:06:07,918
accounts they're they're not even gonna

181
00:06:05,519 --> 00:06:10,079
bother just hack the server right why

182
00:06:07,918 --> 00:06:11,680
would you bother trying to come hack

183
00:06:10,079 --> 00:06:14,159
casey muratory

184
00:06:11,680 --> 00:06:15,439
right when you could just hack twitch

185
00:06:14,160 --> 00:06:17,759
you know

186
00:06:15,439 --> 00:06:17,759
um

187
00:06:17,839 --> 00:06:21,119
so it's getting kind of ridiculous

188
00:06:19,120 --> 00:06:23,038
because practicing your own kind of

189
00:06:21,120 --> 00:06:25,120
cyber security is now becoming kind of a

190
00:06:23,038 --> 00:06:26,879
moot point because at some point all of

191
00:06:25,120 --> 00:06:28,879
the places that you log into are all

192
00:06:26,879 --> 00:06:30,639
hacked so it's like okay great yeah they

193
00:06:28,879 --> 00:06:32,719
they can't compromise

194
00:06:30,639 --> 00:06:34,000
my account specifically but it doesn't

195
00:06:32,720 --> 00:06:35,440
matter because they compromise the whole

196
00:06:34,000 --> 00:06:37,439
server so they effectively got my

197
00:06:35,439 --> 00:06:40,560
account anyway right

198
00:06:37,439 --> 00:06:42,319
so it's just it's just embarrassing

199
00:06:40,560 --> 00:06:45,879
um

200
00:06:42,319 --> 00:06:45,879
it's just embarrassing

201
00:06:53,279 --> 00:06:57,038
yeah i mean you know and and uh strange

202
00:06:56,240 --> 00:06:58,560
zack

203
00:06:57,038 --> 00:07:01,598
exactly like

204
00:06:58,560 --> 00:07:03,598
i mean a low-profile streamer such as

205
00:07:01,598 --> 00:07:06,079
myself or or anything else like you know

206
00:07:03,598 --> 00:07:07,439
like sony was hacked to a while back

207
00:07:06,079 --> 00:07:09,038
right and

208
00:07:07,439 --> 00:07:11,918
you think about the average playstation

209
00:07:09,038 --> 00:07:14,478
user right i mean how how much energy am

210
00:07:11,918 --> 00:07:16,639
i gonna dedicate into securing

211
00:07:14,478 --> 00:07:18,478
my playstation account right i mean who

212
00:07:16,639 --> 00:07:20,300
cares you know yeah good you can you

213
00:07:18,478 --> 00:07:21,680
could go on there and and um

214
00:07:20,300 --> 00:07:24,319
[Music]

215
00:07:21,680 --> 00:07:26,079
and file the refund for cyberpunk 2077

216
00:07:24,319 --> 00:07:27,199
for me right

217
00:07:26,079 --> 00:07:28,478
um

218
00:07:27,199 --> 00:07:29,919
it just doesn't make a lot of sense

219
00:07:28,478 --> 00:07:32,399
because it's like these companies get

220
00:07:29,918 --> 00:07:36,399
hacked and you know your

221
00:07:32,399 --> 00:07:38,000
your account is comparably you know

222
00:07:36,399 --> 00:07:39,598
is is meaningless right your account's

223
00:07:38,000 --> 00:07:42,160
nothing no one cares what what's in that

224
00:07:39,598 --> 00:07:43,439
thing um and so like why do we take all

225
00:07:42,160 --> 00:07:45,439
these steps why do we have all these

226
00:07:43,439 --> 00:07:47,519
passwords like what is the point of this

227
00:07:45,439 --> 00:07:49,759
they hack the whole server what was the

228
00:07:47,519 --> 00:07:51,279
point of any of this stuff why am i

229
00:07:49,759 --> 00:07:54,240
sitting there trying to enter a stupid

230
00:07:51,279 --> 00:07:56,638
password on like a bad like like uh

231
00:07:54,240 --> 00:07:58,319
gamepad keyboard

232
00:07:56,639 --> 00:08:00,478
who is that protecting when the hackers

233
00:07:58,319 --> 00:08:02,479
just hacked the entire system right it's

234
00:08:00,478 --> 00:08:04,240
like you would think by now some of

235
00:08:02,478 --> 00:08:05,680
these companies would would actually

236
00:08:04,240 --> 00:08:08,160
have some reasonable security but but

237
00:08:05,680 --> 00:08:10,079
they definitely don't because every week

238
00:08:08,160 --> 00:08:11,680
it's another it's another thing like

239
00:08:10,079 --> 00:08:12,878
this right like it's it's another thing

240
00:08:11,680 --> 00:08:15,000
every time

241
00:08:12,879 --> 00:08:16,960
uh and it's just you know shows no

242
00:08:15,000 --> 00:08:20,319
[Music]

243
00:08:16,959 --> 00:08:20,318
no sign of letting up so

244
00:08:20,399 --> 00:08:24,478
uh so hass and gds i think you are

245
00:08:22,240 --> 00:08:26,720
working on a web server project what do

246
00:08:24,478 --> 00:08:29,839
you use for data persistence

247
00:08:26,720 --> 00:08:33,120
just files sqlite or your own version of

248
00:08:29,839 --> 00:08:35,679
file system in a single file uh none of

249
00:08:33,120 --> 00:08:37,759
those although it is closest to the last

250
00:08:35,679 --> 00:08:40,639
one

251
00:08:37,759 --> 00:08:42,879
at the moment i am just using raw

252
00:08:40,639 --> 00:08:43,759
writing so basically

253
00:08:42,879 --> 00:08:45,519
you

254
00:08:43,759 --> 00:08:48,159
um

255
00:08:45,519 --> 00:08:49,519
you just write to a raw device directly

256
00:08:48,159 --> 00:08:51,360
right so

257
00:08:49,519 --> 00:08:52,029
so like linux

258
00:08:51,360 --> 00:08:53,200
when you

259
00:08:52,029 --> 00:08:55,278
[Music]

260
00:08:53,200 --> 00:08:57,040
want to access like file

261
00:08:55,278 --> 00:09:00,399
a file handle of a device right you can

262
00:08:57,039 --> 00:09:02,000
just raw write to it if you want to

263
00:09:00,399 --> 00:09:03,839
and i don't know that that's what we'll

264
00:09:02,000 --> 00:09:06,958
actually ship with i'm going to have to

265
00:09:03,839 --> 00:09:08,320
decide this stuff a little bit

266
00:09:06,958 --> 00:09:09,439
soon because it's getting close to the

267
00:09:08,320 --> 00:09:12,480
time when we want to actually put

268
00:09:09,440 --> 00:09:13,360
something up uh and i kind of develop

269
00:09:12,480 --> 00:09:16,320
like

270
00:09:13,360 --> 00:09:18,639
hybrid on windows and linux

271
00:09:16,320 --> 00:09:21,200
and i don't actually know to what extent

272
00:09:18,639 --> 00:09:23,278
some of this stuff works well on linux

273
00:09:21,200 --> 00:09:25,920
or not uh that's

274
00:09:23,278 --> 00:09:27,759
that's the only really tricky spot for

275
00:09:25,919 --> 00:09:29,199
me of doing this server programming is

276
00:09:27,759 --> 00:09:30,720
that you know you're not gonna ship a

277
00:09:29,200 --> 00:09:32,320
windows server

278
00:09:30,720 --> 00:09:34,080
because like

279
00:09:32,320 --> 00:09:36,240
why you know

280
00:09:34,080 --> 00:09:37,519
who's gonna pay microsoft 200

281
00:09:36,240 --> 00:09:39,039
per server

282
00:09:37,519 --> 00:09:40,399
and you know you could have 10 20

283
00:09:39,039 --> 00:09:41,838
servers depending on how you scale up

284
00:09:40,399 --> 00:09:43,759
your system right who's going to pay

285
00:09:41,839 --> 00:09:47,040
microsoft for that crap

286
00:09:43,759 --> 00:09:48,159
when it doesn't do anything right um

287
00:09:47,039 --> 00:09:49,278
so the fact that i'm a game developer

288
00:09:48,159 --> 00:09:50,799
means i'm used to printing on windows

289
00:09:49,278 --> 00:09:53,120
and it's a little bit of a

290
00:09:50,799 --> 00:09:55,120
handicap because it's like well

291
00:09:53,120 --> 00:09:58,399
you know i just don't know all the

292
00:09:55,120 --> 00:10:00,560
esoterica um from linux the way i kind

293
00:09:58,399 --> 00:10:02,639
of do on windows you know on windows if

294
00:10:00,559 --> 00:10:05,439
i want to do something weird i kind of

295
00:10:02,639 --> 00:10:06,879
know like i know how it goes i know some

296
00:10:05,440 --> 00:10:08,320
of the

297
00:10:06,879 --> 00:10:10,320
vagaries of the operating system and it

298
00:10:08,320 --> 00:10:13,360
makes it a lot easier to do to do kind

299
00:10:10,320 --> 00:10:15,600
of weird stuff right whereas on linux

300
00:10:13,360 --> 00:10:17,759
you know i'm like okay you know i can go

301
00:10:15,600 --> 00:10:19,120
read the documentation and it says this

302
00:10:17,759 --> 00:10:21,200
will work

303
00:10:19,120 --> 00:10:24,078
and then maybe i can test it on my

304
00:10:21,200 --> 00:10:27,278
machine but then like i go to deploy it

305
00:10:24,078 --> 00:10:28,799
on whatever centos nonsense or something

306
00:10:27,278 --> 00:10:30,958
um

307
00:10:28,799 --> 00:10:32,639
is on the the server on some server farm

308
00:10:30,958 --> 00:10:35,359
it doesn't work or whatever so there's

309
00:10:32,639 --> 00:10:36,799
there's kind of this whole thing and

310
00:10:35,360 --> 00:10:38,800
that part

311
00:10:36,799 --> 00:10:41,278
um is one of the big things that just

312
00:10:38,799 --> 00:10:44,159
isn't done yet as far as getting our

313
00:10:41,278 --> 00:10:46,799
server stuff deployed uh is figuring out

314
00:10:44,159 --> 00:10:47,919
how that stuff is really going to work

315
00:10:46,799 --> 00:10:50,240
um

316
00:10:47,919 --> 00:10:51,360
and the reason i say that is because

317
00:10:50,240 --> 00:10:53,839
for us

318
00:10:51,360 --> 00:10:55,919
like pricing and what server farms to

319
00:10:53,839 --> 00:10:57,920
use and that sort of stuff has been like

320
00:10:55,919 --> 00:10:58,719
very challenging you know what i'm

321
00:10:57,919 --> 00:11:01,439
saying

322
00:10:58,720 --> 00:11:03,519
um

323
00:11:01,440 --> 00:11:04,640
i thought we were going to be able to

324
00:11:03,519 --> 00:11:05,440
use

325
00:11:04,639 --> 00:11:06,879
uh

326
00:11:05,440 --> 00:11:08,480
like there's a couple places i was like

327
00:11:06,879 --> 00:11:10,240
oh these are pretty low cost places we

328
00:11:08,480 --> 00:11:12,079
can get servers at and they have things

329
00:11:10,240 --> 00:11:14,879
like 10 gigabit per second unmetered

330
00:11:12,078 --> 00:11:16,559
which is kind of what i wanted um but

331
00:11:14,879 --> 00:11:18,399
like you look at this and they don't use

332
00:11:16,559 --> 00:11:20,000
ecc ram so you're like okay that's

333
00:11:18,399 --> 00:11:21,679
probably not great

334
00:11:20,000 --> 00:11:23,039
um and so you kind of go around and

335
00:11:21,679 --> 00:11:24,399
around you're like okay this place looks

336
00:11:23,039 --> 00:11:26,078
pretty good but you know are they too

337
00:11:24,399 --> 00:11:29,039
expensive no all right i guess they're

338
00:11:26,078 --> 00:11:30,879
okay and how how's it gonna deploy

339
00:11:29,039 --> 00:11:32,399
so i don't know there's a lot of ways

340
00:11:30,879 --> 00:11:34,799
you can go with this stuff and it's and

341
00:11:32,399 --> 00:11:37,759
it's again the problem there is mostly

342
00:11:34,799 --> 00:11:38,719
just that you know i'm a game programmer

343
00:11:37,759 --> 00:11:40,319
um

344
00:11:38,720 --> 00:11:43,519
the web server

345
00:11:40,320 --> 00:11:45,600
side of things is not hard for me from a

346
00:11:43,519 --> 00:11:47,679
programming standpoint because all the

347
00:11:45,600 --> 00:11:50,879
things that are involved i've done

348
00:11:47,679 --> 00:11:52,078
before but the platform stuff is not and

349
00:11:50,879 --> 00:11:53,919
so it's been a bit of a struggle

350
00:11:52,078 --> 00:11:55,519
platform-wise figure out like how are we

351
00:11:53,919 --> 00:11:56,799
going to get these servers where are

352
00:11:55,519 --> 00:11:58,879
they going to be and who's going to host

353
00:11:56,799 --> 00:12:00,799
them and how much they're going to cost

354
00:11:58,879 --> 00:12:02,639
what is the realistic

355
00:12:00,799 --> 00:12:04,319
actual like performance of these data

356
00:12:02,639 --> 00:12:06,560
center things you know like

357
00:12:04,320 --> 00:12:07,920
a perfect example would be if i'd done

358
00:12:06,559 --> 00:12:09,599
this a bunch of times before where i'd

359
00:12:07,919 --> 00:12:11,838
like deployed

360
00:12:09,600 --> 00:12:13,440
you know custom server infrastructures

361
00:12:11,839 --> 00:12:15,519
before

362
00:12:13,440 --> 00:12:18,160
um i would just know a few things like

363
00:12:15,519 --> 00:12:20,000
one of the things i would know is

364
00:12:18,159 --> 00:12:20,958
a few data centers i'd worked with

365
00:12:20,000 --> 00:12:24,320
before

366
00:12:20,958 --> 00:12:27,518
what actual throughput do you get

367
00:12:24,320 --> 00:12:29,440
right like like if you buy a 10 gigabit

368
00:12:27,519 --> 00:12:32,320
per second

369
00:12:29,440 --> 00:12:34,160
uh uplink from such and such data center

370
00:12:32,320 --> 00:12:35,440
what do you actually get right because

371
00:12:34,159 --> 00:12:37,039
you see all these things like oh this is

372
00:12:35,440 --> 00:12:38,560
10 gigabit second guaranteed or this is

373
00:12:37,039 --> 00:12:40,719
five gigabit per second guaranteed or

374
00:12:38,559 --> 00:12:42,319
whatever yeah i don't know what they

375
00:12:40,720 --> 00:12:43,839
actually mean by that right you know

376
00:12:42,320 --> 00:12:46,000
it's it's the kind of thing that people

377
00:12:43,839 --> 00:12:48,320
fudge the numbers about and

378
00:12:46,000 --> 00:12:50,159
or you know it's not exactly entirely

379
00:12:48,320 --> 00:12:52,160
above board or those sorts of things so

380
00:12:50,159 --> 00:12:54,078
so i do think that like to a certain

381
00:12:52,159 --> 00:12:55,360
extent

382
00:12:54,078 --> 00:12:56,399
um

383
00:12:55,360 --> 00:12:57,919
you know there's going to be some

384
00:12:56,399 --> 00:12:59,278
growing pains the end of this year is

385
00:12:57,919 --> 00:13:00,799
going to be pretty rough for me i think

386
00:12:59,278 --> 00:13:02,240
because as i try to put this stuff

387
00:13:00,799 --> 00:13:04,479
online and actually get it battle

388
00:13:02,240 --> 00:13:07,759
hardened i'm sure i'm going to have

389
00:13:04,480 --> 00:13:09,278
um a lot of issues with things don't go

390
00:13:07,759 --> 00:13:11,200
the way i thought they would because

391
00:13:09,278 --> 00:13:13,519
what you know is said

392
00:13:11,200 --> 00:13:15,440
um in documentation or on people's

393
00:13:13,519 --> 00:13:17,679
websites or whatever isn't really what

394
00:13:15,440 --> 00:13:19,440
happens right and those are the kinds of

395
00:13:17,679 --> 00:13:21,599
things that once you've been able around

396
00:13:19,440 --> 00:13:23,519
the block a few times you you know

397
00:13:21,600 --> 00:13:24,639
but until then you haven't

398
00:13:23,519 --> 00:13:27,679
so strange accident had a good

399
00:13:24,639 --> 00:13:29,360
experience with ovh 10 uh gb line so

400
00:13:27,679 --> 00:13:31,359
that's great information

401
00:13:29,360 --> 00:13:32,720
um thank you for saying that like that's

402
00:13:31,360 --> 00:13:34,029
i'll check that out i know who you're

403
00:13:32,720 --> 00:13:35,440
talking about um

404
00:13:34,029 --> 00:13:36,639
[Music]

405
00:13:35,440 --> 00:13:38,240
hearing stuff like that's just useful

406
00:13:36,639 --> 00:13:39,919
for me right like hearing that people

407
00:13:38,240 --> 00:13:41,600
did such and such and and had a bad

408
00:13:39,919 --> 00:13:43,679
experience or had a good experience it's

409
00:13:41,600 --> 00:13:44,800
just it's just useful right

410
00:13:43,679 --> 00:13:45,759
uh

411
00:13:44,799 --> 00:13:47,919
one of the other things i considered

412
00:13:45,759 --> 00:13:49,919
doing just building our own machines and

413
00:13:47,919 --> 00:13:52,159
mailing them to data centers right but i

414
00:13:49,919 --> 00:13:54,159
just felt like that might be too much

415
00:13:52,159 --> 00:13:56,559
variability there and too much back and

416
00:13:54,159 --> 00:13:58,319
forth oh you know what's the which power

417
00:13:56,559 --> 00:13:59,439
supply do you need to use for this data

418
00:13:58,320 --> 00:14:01,440
center and

419
00:13:59,440 --> 00:14:02,959
oh it got it got dropped in shipping and

420
00:14:01,440 --> 00:14:03,760
now the machine doesn't work and you

421
00:14:02,958 --> 00:14:05,599
know

422
00:14:03,759 --> 00:14:07,679
so i i just

423
00:14:05,600 --> 00:14:09,759
there's so many ways you can deploy a

424
00:14:07,679 --> 00:14:12,000
server architecture nowadays it's like

425
00:14:09,759 --> 00:14:13,360
writing the server architecture is very

426
00:14:12,000 --> 00:14:14,399
difficult

427
00:14:13,360 --> 00:14:16,480
certainly

428
00:14:14,399 --> 00:14:19,440
but it's the part that i understand

429
00:14:16,480 --> 00:14:20,399
right getting the actual hardware you

430
00:14:19,440 --> 00:14:21,760
know

431
00:14:20,399 --> 00:14:22,639
um

432
00:14:21,759 --> 00:14:24,159
is

433
00:14:22,639 --> 00:14:26,159
is like a new part for me because it's

434
00:14:24,159 --> 00:14:28,000
just not something i've done

435
00:14:26,159 --> 00:14:30,159
and uh so i'm not looking forward to

436
00:14:28,000 --> 00:14:32,799
that but you know it has to get done and

437
00:14:30,159 --> 00:14:34,159
it has to get done relatively soon so

438
00:14:32,799 --> 00:14:36,159
uh

439
00:14:34,159 --> 00:14:39,360
you know i'll have more to say about

440
00:14:36,159 --> 00:14:42,480
that later you know what exactly we use

441
00:14:39,360 --> 00:14:44,399
uh in terms of of of storing files may

442
00:14:42,480 --> 00:14:47,120
have to change slightly depending

443
00:14:44,399 --> 00:14:48,958
on the circumstance but just raw right

444
00:14:47,120 --> 00:14:50,959
um

445
00:14:48,958 --> 00:14:52,078
is is basically what i wanted to do

446
00:14:50,958 --> 00:14:55,119
because

447
00:14:52,078 --> 00:14:56,319
the reason for that is just i just don't

448
00:14:55,120 --> 00:14:57,519
so

449
00:14:56,320 --> 00:14:59,199
when you're talking about something like

450
00:14:57,519 --> 00:15:03,039
a server the operating system basically

451
00:14:59,198 --> 00:15:04,879
gives you almost zero benefit like like

452
00:15:03,039 --> 00:15:07,278
ideally for something like a web server

453
00:15:04,879 --> 00:15:08,240
there would be no operating system

454
00:15:07,278 --> 00:15:10,000
and

455
00:15:08,240 --> 00:15:12,480
to a certain extent you could do that

456
00:15:10,000 --> 00:15:15,519
right you could write something really

457
00:15:12,480 --> 00:15:17,199
honestly bare metal but the investment

458
00:15:15,519 --> 00:15:19,360
in figuring out how to get all the

459
00:15:17,198 --> 00:15:20,879
driver stuff that you need set up like

460
00:15:19,360 --> 00:15:22,639
in your own custom code and all that

461
00:15:20,879 --> 00:15:24,559
stuff that

462
00:15:22,639 --> 00:15:26,799
that's a pretty

463
00:15:24,559 --> 00:15:28,078
that's a pretty dangerous route to go

464
00:15:26,799 --> 00:15:29,679
down right

465
00:15:28,078 --> 00:15:31,599
um it's not like the old days when

466
00:15:29,679 --> 00:15:33,198
computers were more uniform so you kind

467
00:15:31,600 --> 00:15:34,159
of knew like if we're deploying you know

468
00:15:33,198 --> 00:15:36,719
if if

469
00:15:34,159 --> 00:15:38,078
we're deploying an amiga 500 then we

470
00:15:36,720 --> 00:15:39,278
don't need an operating system because

471
00:15:38,078 --> 00:15:41,519
we could just

472
00:15:39,278 --> 00:15:43,519
implement the the the individual

473
00:15:41,519 --> 00:15:45,839
hardware uh things we need right on

474
00:15:43,519 --> 00:15:48,000
there and it works right

475
00:15:45,839 --> 00:15:50,720
so you know at least for this first

476
00:15:48,000 --> 00:15:52,799
round of deployment um we're we're going

477
00:15:50,720 --> 00:15:54,800
to be sitting on top of linux kernel but

478
00:15:52,799 --> 00:15:57,838
nothing else

479
00:15:54,799 --> 00:16:00,319
and i don't really want a file system

480
00:15:57,839 --> 00:16:02,000
it doesn't do anything for us

481
00:16:00,320 --> 00:16:03,920
it just gets in the way we don't want

482
00:16:02,000 --> 00:16:05,039
metadata we don't want multiple files we

483
00:16:03,919 --> 00:16:06,319
just want

484
00:16:05,039 --> 00:16:07,838
the server to be able to store the data

485
00:16:06,320 --> 00:16:09,759
that it needs it knows where the data is

486
00:16:07,839 --> 00:16:11,759
and it knows how it's organized so it

487
00:16:09,759 --> 00:16:13,680
doesn't want anything other than just a

488
00:16:11,759 --> 00:16:16,800
raw ability to like read and write

489
00:16:13,679 --> 00:16:18,879
sectors ideally knowing how big this the

490
00:16:16,799 --> 00:16:20,078
optimal sector size is even would be a

491
00:16:18,879 --> 00:16:21,600
plus for us

492
00:16:20,078 --> 00:16:23,120
uh because we can't take advantage of it

493
00:16:21,600 --> 00:16:24,480
so like the closer we can get to raw

494
00:16:23,120 --> 00:16:26,159
right the better

495
00:16:24,480 --> 00:16:27,600
but i didn't want to go all the way to

496
00:16:26,159 --> 00:16:29,039
like we're writing the disk driver

497
00:16:27,600 --> 00:16:30,480
because i just felt like that was way

498
00:16:29,039 --> 00:16:32,879
too risky and way too big of a time

499
00:16:30,480 --> 00:16:33,600
investment so we're up one for that but

500
00:16:32,879 --> 00:16:35,198
we'll

501
00:16:33,600 --> 00:16:36,480
go down as far as we can otherwise we

502
00:16:35,198 --> 00:16:38,240
don't really want anything else running

503
00:16:36,480 --> 00:16:39,440
on the system as far as i'm concerned

504
00:16:38,240 --> 00:16:40,879
everything else

505
00:16:39,440 --> 00:16:42,480
um

506
00:16:40,879 --> 00:16:44,078
is just a security headache and a

507
00:16:42,480 --> 00:16:45,839
maintenance headache for me right

508
00:16:44,078 --> 00:16:47,599
anything else that runs on there is just

509
00:16:45,839 --> 00:16:50,079
something i don't really understand i

510
00:16:47,600 --> 00:16:50,959
don't know linux file systems very well

511
00:16:50,078 --> 00:16:53,278
right

512
00:16:50,958 --> 00:16:55,119
so i i would just have as little as

513
00:16:53,278 --> 00:16:56,559
possible um

514
00:16:55,120 --> 00:16:58,320
as close as possible just booting

515
00:16:56,559 --> 00:16:59,838
directly into our code and then just

516
00:16:58,320 --> 00:17:01,519
having the hardware do exactly what my

517
00:16:59,839 --> 00:17:03,440
code says is what i would prefer because

518
00:17:01,519 --> 00:17:05,038
that's gonna be the most secure because

519
00:17:03,440 --> 00:17:07,279
there's not other things running that

520
00:17:05,038 --> 00:17:09,919
people can attack right and it's also

521
00:17:07,279 --> 00:17:11,519
just going to be um the least

522
00:17:09,919 --> 00:17:13,038
maintenance headache because the less

523
00:17:11,519 --> 00:17:14,480
code that's running the less i have to

524
00:17:13,038 --> 00:17:18,439
worry about someone else's code like

525
00:17:14,480 --> 00:17:18,439
breaking or whatever right

526
00:17:22,160 --> 00:17:26,400
so by raw writes what i mean is

527
00:17:25,439 --> 00:17:28,319
um

528
00:17:26,400 --> 00:17:32,320
at least in certain circumstances

529
00:17:28,318 --> 00:17:35,519
depending on on how things are set up

530
00:17:32,319 --> 00:17:37,519
uh you don't actually need the operating

531
00:17:35,519 --> 00:17:39,759
system to

532
00:17:37,519 --> 00:17:43,038
do any kind of

533
00:17:39,759 --> 00:17:44,960
like brokering of where or what you're

534
00:17:43,038 --> 00:17:46,798
writing so so normally what happens

535
00:17:44,960 --> 00:17:48,000
right

536
00:17:46,798 --> 00:17:50,240
when you

537
00:17:48,000 --> 00:17:51,599
there's there's like two levels of file

538
00:17:50,240 --> 00:17:53,279
system maybe we could go to the white

539
00:17:51,599 --> 00:17:54,798
the the light board for this actually

540
00:17:53,279 --> 00:17:56,798
i'll i'll i'll go to light bar for this

541
00:17:54,798 --> 00:17:58,240
let me let me just feel this one other

542
00:17:56,798 --> 00:17:59,759
question that was here

543
00:17:58,240 --> 00:18:00,480
uh someone said not a game dev here but

544
00:17:59,759 --> 00:18:01,919
wanted to let you know that your

545
00:18:00,480 --> 00:18:04,240
approach to software took me out of a

546
00:18:01,919 --> 00:18:07,360
burnout short story long arigato

547
00:18:04,240 --> 00:18:08,400
gozaimasu ah toitashimaste

548
00:18:07,359 --> 00:18:11,119
um

549
00:18:08,400 --> 00:18:12,080
very glad to hear that obviously

550
00:18:11,119 --> 00:18:16,879
uh

551
00:18:12,079 --> 00:18:16,879
so let me go ahead and just and just uh

552
00:18:17,038 --> 00:18:21,440
take take a second to draw it out um

553
00:18:20,319 --> 00:18:23,359
because because i think i can explain

554
00:18:21,440 --> 00:18:24,480
this a little bit better with a diagram

555
00:18:23,359 --> 00:18:26,240
uh if if this is something you're

556
00:18:24,480 --> 00:18:27,679
actually interested in uh it's not a

557
00:18:26,240 --> 00:18:29,359
terribly difficult concept so i should

558
00:18:27,679 --> 00:18:31,280
be able to just you know

559
00:18:29,359 --> 00:18:32,479
say here's roughly what i mean

560
00:18:31,279 --> 00:18:33,759
and hopefully that'll that'll be a lot

561
00:18:32,480 --> 00:18:37,360
clearer than me just kind of saying

562
00:18:33,759 --> 00:18:40,359
stuff here uh if that makes sense

563
00:18:37,359 --> 00:18:40,359
so

564
00:18:42,319 --> 00:18:44,879
um

565
00:18:43,519 --> 00:18:46,960
so

566
00:18:44,880 --> 00:18:50,640
what happens right

567
00:18:46,960 --> 00:18:50,640
uh if you take a look

568
00:18:51,119 --> 00:18:54,719
if you take a look at what's going on um

569
00:18:53,279 --> 00:18:57,119
in a typical

570
00:18:54,720 --> 00:18:58,319
scenario where you're not really trying

571
00:18:57,119 --> 00:19:00,319
to take control of the system where

572
00:18:58,319 --> 00:19:01,678
you're not trying to be sort of down at

573
00:19:00,319 --> 00:19:05,119
a lower level

574
00:19:01,679 --> 00:19:07,679
uh you typically have like a a tiered

575
00:19:05,119 --> 00:19:09,839
sort of uh for every kind of a file

576
00:19:07,679 --> 00:19:13,200
right that you do you have like a tiered

577
00:19:09,839 --> 00:19:15,439
waterfall kind of thing uh going on so

578
00:19:13,200 --> 00:19:17,600
you know maybe somebody you know calls

579
00:19:15,440 --> 00:19:21,038
like f right you know

580
00:19:17,599 --> 00:19:22,879
um up here at the top level and and this

581
00:19:21,038 --> 00:19:26,160
is in your application so like your

582
00:19:22,880 --> 00:19:28,880
application is got some call uh that's

583
00:19:26,160 --> 00:19:31,600
doing an f right and that f right you

584
00:19:28,880 --> 00:19:34,080
know it has a file handle in it and that

585
00:19:31,599 --> 00:19:36,639
file handle is really just something

586
00:19:34,079 --> 00:19:38,319
that is is going through like a library

587
00:19:36,640 --> 00:19:40,720
probably right i mean at least in the

588
00:19:38,319 --> 00:19:42,960
case of uh f right

589
00:19:40,720 --> 00:19:44,720
so there's a file handle in here

590
00:19:42,960 --> 00:19:47,038
and the file handle is like tracking a

591
00:19:44,720 --> 00:19:49,120
bunch of information it's it's you know

592
00:19:47,038 --> 00:19:51,119
it's gonna keep like a buffer so if you

593
00:19:49,119 --> 00:19:54,000
f write something and it's small it'll

594
00:19:51,119 --> 00:19:55,918
like coalesce it in a buffer right

595
00:19:54,000 --> 00:19:58,160
so this file handle has like a buffer

596
00:19:55,919 --> 00:19:59,919
associated with it probably and so

597
00:19:58,160 --> 00:20:01,759
whatever you write is going to go into

598
00:19:59,919 --> 00:20:03,280
this buffer

599
00:20:01,759 --> 00:20:05,599
eventually it's going to decide to flush

600
00:20:03,279 --> 00:20:07,440
that buffer so when that buffer fills up

601
00:20:05,599 --> 00:20:09,038
or when you close the stream or when you

602
00:20:07,440 --> 00:20:10,880
flush the stream or you know whatever

603
00:20:09,038 --> 00:20:12,798
else the library like whatever the

604
00:20:10,880 --> 00:20:15,120
library wants to do

605
00:20:12,798 --> 00:20:16,480
when this buffer is ready

606
00:20:15,119 --> 00:20:18,158
uh and you know just to make this even

607
00:20:16,480 --> 00:20:19,599
more explicit maybe i can i can draw it

608
00:20:18,159 --> 00:20:22,080
like this so there's a buffer and it's

609
00:20:19,599 --> 00:20:23,678
filling up you ask to f write this piece

610
00:20:22,079 --> 00:20:25,439
of information and it puts it into this

611
00:20:23,679 --> 00:20:28,640
buffer right

612
00:20:25,440 --> 00:20:30,240
so you actually had this piece you put

613
00:20:28,640 --> 00:20:32,400
it down into this buffer now the buffer

614
00:20:30,240 --> 00:20:35,038
has this piece that's going to then

615
00:20:32,400 --> 00:20:36,798
thunk through to like a lower level call

616
00:20:35,038 --> 00:20:38,879
like a syscall on the operating system

617
00:20:36,798 --> 00:20:40,960
or something that's actually designed to

618
00:20:38,880 --> 00:20:42,400
write some data

619
00:20:40,960 --> 00:20:45,120
and there's a couple different ones for

620
00:20:42,400 --> 00:20:46,159
this um but you could think of it this

621
00:20:45,119 --> 00:20:48,399
way as

622
00:20:46,159 --> 00:20:51,360
what you probably have is you have the

623
00:20:48,400 --> 00:20:53,038
os here and this is a syscall

624
00:20:51,359 --> 00:20:55,759
like on linux

625
00:20:53,038 --> 00:20:57,440
so what happens is this buffer now

626
00:20:55,759 --> 00:20:58,400
there's if effectively an interrupt

627
00:20:57,440 --> 00:21:01,120
happens

628
00:20:58,400 --> 00:21:02,400
um that transitions to the os depend

629
00:21:01,119 --> 00:21:04,399
again this is very

630
00:21:02,400 --> 00:21:05,679
os dependent but

631
00:21:04,400 --> 00:21:07,600
on something like linux you're going to

632
00:21:05,679 --> 00:21:09,038
have a syscall occur so it's not really

633
00:21:07,599 --> 00:21:11,599
an interrupt that's the wrong word for

634
00:21:09,038 --> 00:21:12,960
it assist call occurs uh which is an

635
00:21:11,599 --> 00:21:15,439
actual instruction

636
00:21:12,960 --> 00:21:18,240
and the operating system basically wakes

637
00:21:15,440 --> 00:21:20,159
up and takes back control right so in

638
00:21:18,240 --> 00:21:22,240
you know these are happening at a higher

639
00:21:20,159 --> 00:21:24,880
level this this right here is all

640
00:21:22,240 --> 00:21:26,960
happening in some higher level ring

641
00:21:24,880 --> 00:21:29,360
right so this is it some higher level

642
00:21:26,960 --> 00:21:32,079
ring in the processor this is now going

643
00:21:29,359 --> 00:21:33,599
to happen in like ring zero

644
00:21:32,079 --> 00:21:35,678
or something

645
00:21:33,599 --> 00:21:37,759
right so the syscall there's a privilege

646
00:21:35,679 --> 00:21:40,400
escalation when you do this and the

647
00:21:37,759 --> 00:21:42,480
syscall wakes up and it's like oh okay

648
00:21:40,400 --> 00:21:44,159
this person wants to write this buffer

649
00:21:42,480 --> 00:21:45,440
so this buffer is now coming down to

650
00:21:44,159 --> 00:21:46,799
syscall

651
00:21:45,440 --> 00:21:49,600
the problem is

652
00:21:46,798 --> 00:21:51,599
the syscall is really just there to

653
00:21:49,599 --> 00:21:53,918
accept the buffer from you and actually

654
00:21:51,599 --> 00:21:55,918
just put it in another buffer usually

655
00:21:53,919 --> 00:21:58,400
right so what it's usually going to do

656
00:21:55,919 --> 00:22:01,280
is it's going to say okay you know uh

657
00:21:58,400 --> 00:22:04,798
i've got a a disk cache right that's

658
00:22:01,279 --> 00:22:07,440
like backing uh what i write stuff and

659
00:22:04,798 --> 00:22:09,679
you know who knows how big that is but

660
00:22:07,440 --> 00:22:11,360
he told me what the file handle that was

661
00:22:09,679 --> 00:22:13,280
open was because this file handle for

662
00:22:11,359 --> 00:22:15,119
the library had probably another file

663
00:22:13,279 --> 00:22:16,158
handle like a file index

664
00:22:15,119 --> 00:22:18,239
right

665
00:22:16,159 --> 00:22:21,039
like you know 0 1 2 3 4 or whatever that

666
00:22:18,240 --> 00:22:23,038
corresponds to the os so the os got that

667
00:22:21,038 --> 00:22:26,400
and it got the buffer and it's like okay

668
00:22:23,038 --> 00:22:27,839
he wants to use this handle this index

669
00:22:26,400 --> 00:22:29,759
which i know which one that was and he

670
00:22:27,839 --> 00:22:32,000
wants to do this buffer so what actual

671
00:22:29,759 --> 00:22:34,798
file is that let's let's take a look at

672
00:22:32,000 --> 00:22:38,640
what i'm doing cache wise with files and

673
00:22:34,798 --> 00:22:39,440
let me find like the cache location

674
00:22:38,640 --> 00:22:42,480
right

675
00:22:39,440 --> 00:22:45,200
um and that has its own buffer because

676
00:22:42,480 --> 00:22:47,919
remember all disk io on modern operating

677
00:22:45,200 --> 00:22:50,558
systems goes usually through some kind

678
00:22:47,919 --> 00:22:53,120
of a cache you know what i'm saying so

679
00:22:50,558 --> 00:22:55,839
so typically what goes on is you don't

680
00:22:53,119 --> 00:22:58,959
actually write any data yet

681
00:22:55,839 --> 00:23:00,480
your buffer goes into some slot in the

682
00:22:58,960 --> 00:23:02,159
cache right

683
00:23:00,480 --> 00:23:04,960
um where it's like

684
00:23:02,159 --> 00:23:07,200
this is part of a larger piece like i

685
00:23:04,960 --> 00:23:08,640
don't know how big this is i i haven't

686
00:23:07,200 --> 00:23:10,400
looked at the linux kernel

687
00:23:08,640 --> 00:23:13,120
in forever so you know maybe there's a

688
00:23:10,400 --> 00:23:15,440
256k chunk and we only read and write

689
00:23:13,119 --> 00:23:16,959
out those 256k chunks typically or

690
00:23:15,440 --> 00:23:19,200
something you know i don't know maybe

691
00:23:16,960 --> 00:23:20,960
it's only 4k who knows what it is you

692
00:23:19,200 --> 00:23:23,038
can go look that up

693
00:23:20,960 --> 00:23:25,120
the point being they're going to put

694
00:23:23,038 --> 00:23:27,200
your buffer into a

695
00:23:25,119 --> 00:23:28,479
piece of that cache but it's but it's

696
00:23:27,200 --> 00:23:30,720
just going to sit there they're not

697
00:23:28,480 --> 00:23:31,839
necessarily going to write it uh maybe

698
00:23:30,720 --> 00:23:34,960
they're going to assemble some other

699
00:23:31,839 --> 00:23:36,639
rights first um maybe they need to read

700
00:23:34,960 --> 00:23:38,480
out like what was in the other parts of

701
00:23:36,640 --> 00:23:40,960
the chunk into the cache and assemble

702
00:23:38,480 --> 00:23:42,960
this part because it overhangs part of

703
00:23:40,960 --> 00:23:44,880
the like you're like in the middle of

704
00:23:42,960 --> 00:23:46,880
that somewhere who knows right it could

705
00:23:44,880 --> 00:23:47,840
be doing anything again until you if you

706
00:23:46,880 --> 00:23:48,960
don't actually go down and look at what

707
00:23:47,839 --> 00:23:50,959
the os code is doing you know you could

708
00:23:48,960 --> 00:23:52,079
do all sorts of things here

709
00:23:50,960 --> 00:23:54,960
right

710
00:23:52,079 --> 00:23:57,678
um so this is going to happen uh and

711
00:23:54,960 --> 00:23:59,840
even that of course is not actually

712
00:23:57,679 --> 00:24:01,360
the end of it right because because this

713
00:23:59,839 --> 00:24:04,720
is just like some

714
00:24:01,359 --> 00:24:06,240
uh disk you know subsystem right

715
00:24:04,720 --> 00:24:09,360
um but there's still going to be like

716
00:24:06,240 --> 00:24:12,079
one more level like below this one uh

717
00:24:09,359 --> 00:24:12,959
which is like the actual hardware part

718
00:24:12,079 --> 00:24:15,918
right

719
00:24:12,960 --> 00:24:18,558
um and this who knows how this works

720
00:24:15,919 --> 00:24:20,720
like like we have no idea right uh

721
00:24:18,558 --> 00:24:22,639
because it could be who knows what's

722
00:24:20,720 --> 00:24:24,240
what kind of driver you've got who knows

723
00:24:22,640 --> 00:24:25,278
what kind of storage subsystem you've

724
00:24:24,240 --> 00:24:28,558
got

725
00:24:25,278 --> 00:24:31,519
but at some point right there's going to

726
00:24:28,558 --> 00:24:33,278
be a like a hardware layer down here and

727
00:24:31,519 --> 00:24:34,639
there's the actual like there's the

728
00:24:33,278 --> 00:24:38,480
actual drive

729
00:24:34,640 --> 00:24:41,278
right um so we've got a drive here

730
00:24:38,480 --> 00:24:42,640
and it's got some i o system right and

731
00:24:41,278 --> 00:24:45,599
this could be anything it could be the

732
00:24:42,640 --> 00:24:48,240
pci bus in the case of like an nvme um

733
00:24:45,599 --> 00:24:51,038
it could be like an like a sata cable

734
00:24:48,240 --> 00:24:53,839
like right in the case of an ssd drive

735
00:24:51,038 --> 00:24:56,720
like who knows there's some io and it

736
00:24:53,839 --> 00:24:57,759
has to go from here to here somehow

737
00:24:56,720 --> 00:24:59,278
right

738
00:24:57,759 --> 00:25:01,919
so what's gonna happen is eventually

739
00:24:59,278 --> 00:25:04,720
this buffer is going to go into some

740
00:25:01,919 --> 00:25:06,400
kind of a driver layer right

741
00:25:04,720 --> 00:25:09,278
and that driver layer is going to be

742
00:25:06,400 --> 00:25:10,880
responsible this probably was locked in

743
00:25:09,278 --> 00:25:12,480
physical memory so that the like

744
00:25:10,880 --> 00:25:15,600
whatever the driver is can like

745
00:25:12,480 --> 00:25:17,759
communicate the physical memory across

746
00:25:15,599 --> 00:25:19,278
this i o channel right

747
00:25:17,759 --> 00:25:21,278
so this was probably locked in physical

748
00:25:19,278 --> 00:25:23,119
memory some way somewhere it's gonna

749
00:25:21,278 --> 00:25:25,200
like sit there for a little while and

750
00:25:23,119 --> 00:25:27,278
some driver is gonna do something to

751
00:25:25,200 --> 00:25:29,600
like push it out to the drive eventually

752
00:25:27,278 --> 00:25:35,599
and it goes into some chunk like this

753
00:25:29,599 --> 00:25:37,678
250 56k chunk like maps into there right

754
00:25:35,599 --> 00:25:39,839
and if you think about all of this stuff

755
00:25:37,679 --> 00:25:42,720
that has to happen and and i'm like

756
00:25:39,839 --> 00:25:44,720
that's just like the broadest

757
00:25:42,720 --> 00:25:46,159
possible overview right like what i'm

758
00:25:44,720 --> 00:25:49,120
talking about here

759
00:25:46,159 --> 00:25:52,320
is like just the basic overview so it's

760
00:25:49,119 --> 00:25:54,000
a really high level right

761
00:25:52,319 --> 00:25:56,240
if you look at all that stuff that's

762
00:25:54,000 --> 00:25:58,319
happening it's just a tremendous waste

763
00:25:56,240 --> 00:26:00,079
of everyone's time

764
00:25:58,319 --> 00:26:02,240
if you actually could have just done

765
00:26:00,079 --> 00:26:05,439
this yourself right

766
00:26:02,240 --> 00:26:07,038
so if instead of calling some function

767
00:26:05,440 --> 00:26:08,640
that just said i got this little piece

768
00:26:07,038 --> 00:26:10,000
assembled into a buffer so you can pass

769
00:26:08,640 --> 00:26:12,400
it to a buffer so you can pass it to a

770
00:26:10,000 --> 00:26:13,759
driver so the driver can send it over

771
00:26:12,400 --> 00:26:16,320
the pci bus

772
00:26:13,759 --> 00:26:18,240
to a drive or something right

773
00:26:16,319 --> 00:26:19,359
instead of doing all that what we would

774
00:26:18,240 --> 00:26:22,079
rather do

775
00:26:19,359 --> 00:26:24,639
is just re-find out

776
00:26:22,079 --> 00:26:27,038
what the native page size is for this

777
00:26:24,640 --> 00:26:28,880
drive and just give the operating system

778
00:26:27,038 --> 00:26:31,200
direct calls it's like

779
00:26:28,880 --> 00:26:32,799
i'm gonna lock some memory in physical

780
00:26:31,200 --> 00:26:34,080
memory for you

781
00:26:32,798 --> 00:26:36,558
i'm gonna leave it

782
00:26:34,079 --> 00:26:38,079
there until i see this right complete so

783
00:26:36,558 --> 00:26:39,440
i'm just gonna put the whole thing you

784
00:26:38,079 --> 00:26:40,558
need to write you don't need to read

785
00:26:39,440 --> 00:26:42,320
anything

786
00:26:40,558 --> 00:26:44,879
i'm going to put the whole chunk that

787
00:26:42,319 --> 00:26:46,480
you're going to send as an entire chunk

788
00:26:44,880 --> 00:26:49,200
over to the drive

789
00:26:46,480 --> 00:26:51,120
so that there's no middleman right it

790
00:26:49,200 --> 00:26:53,038
could the driver can literally just take

791
00:26:51,119 --> 00:26:54,798
this directly without all these copies

792
00:26:53,038 --> 00:26:56,640
of copies of copies

793
00:26:54,798 --> 00:26:58,879
to get something down to where it needs

794
00:26:56,640 --> 00:27:00,640
to go right

795
00:26:58,880 --> 00:27:02,320
um and incidentally this exact same

796
00:27:00,640 --> 00:27:04,159
procedure is actually not that different

797
00:27:02,319 --> 00:27:07,200
from what happens with a network card

798
00:27:04,159 --> 00:27:08,880
it's a little bit easier um in one sense

799
00:27:07,200 --> 00:27:11,679
in that there's not that sort of random

800
00:27:08,880 --> 00:27:13,520
placement problem of buffers uh onto

801
00:27:11,679 --> 00:27:15,840
places on the drive but it's very

802
00:27:13,519 --> 00:27:18,158
similar in that if you don't use

803
00:27:15,839 --> 00:27:19,199
something like registered i o or stuff

804
00:27:18,159 --> 00:27:20,000
like that

805
00:27:19,200 --> 00:27:21,759
uh

806
00:27:20,000 --> 00:27:23,919
you're you're asking the os though to

807
00:27:21,759 --> 00:27:26,720
like copy it into places where it can be

808
00:27:23,919 --> 00:27:28,559
reached by the actual nick that's trying

809
00:27:26,720 --> 00:27:30,159
to grab it out and all these other sorts

810
00:27:28,558 --> 00:27:33,759
of things right

811
00:27:30,159 --> 00:27:36,000
so the idea uh behind all of this was

812
00:27:33,759 --> 00:27:39,119
like kind of like convenience and making

813
00:27:36,000 --> 00:27:41,519
things look like an old 1970s computer

814
00:27:39,119 --> 00:27:44,398
that was like streaming out data but but

815
00:27:41,519 --> 00:27:47,519
really it's it's not good right um like

816
00:27:44,398 --> 00:27:50,479
you don't want any of this

817
00:27:47,519 --> 00:27:52,720
um and so what you tend to do nowadays

818
00:27:50,480 --> 00:27:54,960
if you actually care about this sort of

819
00:27:52,720 --> 00:27:58,159
stuff which to be fair

820
00:27:54,960 --> 00:28:00,000
web stuff doesn't tend to um you know a

821
00:27:58,159 --> 00:28:01,520
lot of web stuff is just like let's have

822
00:28:00,000 --> 00:28:03,839
a python

823
00:28:01,519 --> 00:28:06,158
interpreter running on top of the c

824
00:28:03,839 --> 00:28:07,839
runtime library running on top of

825
00:28:06,159 --> 00:28:10,080
the os running on top of the driver

826
00:28:07,839 --> 00:28:11,839
right like so you know you wouldn't be

827
00:28:10,079 --> 00:28:13,599
alone if you just call

828
00:28:11,839 --> 00:28:14,639
f right you know like tons of people are

829
00:28:13,599 --> 00:28:16,158
doing that

830
00:28:14,640 --> 00:28:18,080
that's totally standard in the web world

831
00:28:16,159 --> 00:28:19,520
but if you actually care about high

832
00:28:18,079 --> 00:28:21,199
performance

833
00:28:19,519 --> 00:28:23,839
server stuff which some people in the

834
00:28:21,200 --> 00:28:25,600
web world do right some people get paid

835
00:28:23,839 --> 00:28:28,720
a lot of money i would assume at places

836
00:28:25,599 --> 00:28:31,918
like you know google or something

837
00:28:28,720 --> 00:28:34,399
to take uh and try to you know speed up

838
00:28:31,919 --> 00:28:36,240
the like super crappy all the crap that

839
00:28:34,398 --> 00:28:37,519
sits on top try to speed up that bottom

840
00:28:36,240 --> 00:28:39,519
part they would probably care about this

841
00:28:37,519 --> 00:28:41,359
sort of stuff um but you'll see things

842
00:28:39,519 --> 00:28:43,278
like on um

843
00:28:41,359 --> 00:28:46,000
on windows you have like registered o

844
00:28:43,278 --> 00:28:49,440
and you have um some some other things

845
00:28:46,000 --> 00:28:50,880
like there are custom apis for it but uh

846
00:28:49,440 --> 00:28:53,200
you also have on linux there's a thing

847
00:28:50,880 --> 00:28:54,799
that's really good uh it's called iou

848
00:28:53,200 --> 00:28:56,240
ring

849
00:28:54,798 --> 00:28:58,879
um

850
00:28:56,240 --> 00:29:01,038
i don't know if you've ever seen this

851
00:28:58,880 --> 00:29:02,960
this is what what i used

852
00:29:01,038 --> 00:29:05,038
uh for the linux layer

853
00:29:02,960 --> 00:29:06,720
and basically what iou ring is is it's a

854
00:29:05,038 --> 00:29:08,319
way of kind of getting rid of all of

855
00:29:06,720 --> 00:29:11,440
that process

856
00:29:08,319 --> 00:29:12,720
um and it's a way of just writing and

857
00:29:11,440 --> 00:29:14,798
saying look

858
00:29:12,720 --> 00:29:16,480
i don't want to issue syscalls i don't

859
00:29:14,798 --> 00:29:18,398
want to do any of that stuff all i'm

860
00:29:16,480 --> 00:29:20,480
going to do is just get some locked

861
00:29:18,398 --> 00:29:23,439
memory um i should talk about what the

862
00:29:20,480 --> 00:29:24,640
lock memory stuff is

863
00:29:23,440 --> 00:29:26,159
maybe we can do that if anyone has any

864
00:29:24,640 --> 00:29:27,759
questions but i'm gonna get some memory

865
00:29:26,159 --> 00:29:30,080
that's visible to me and the kernel and

866
00:29:27,759 --> 00:29:31,519
the drivers and whatever right and all

867
00:29:30,079 --> 00:29:33,278
i'm gonna do is just write the stuff i

868
00:29:31,519 --> 00:29:35,759
need into that memory

869
00:29:33,278 --> 00:29:38,079
and i'm gonna trust that the kernel will

870
00:29:35,759 --> 00:29:41,440
look at a little ring buffer that tells

871
00:29:38,079 --> 00:29:43,759
it what i want to do and just do it so i

872
00:29:41,440 --> 00:29:45,360
never we're like two separate threads

873
00:29:43,759 --> 00:29:48,158
running in parallel

874
00:29:45,359 --> 00:29:51,359
um so what happens is you have like you

875
00:29:48,159 --> 00:29:52,480
know your app thread

876
00:29:51,359 --> 00:29:54,240
and you could have more than one app

877
00:29:52,480 --> 00:29:56,319
thread obviously but you know at least

878
00:29:54,240 --> 00:29:58,319
one app thread and you have a kernel

879
00:29:56,319 --> 00:30:00,558
thread

880
00:29:58,319 --> 00:30:02,720
and they're running in parallel and what

881
00:30:00,558 --> 00:30:05,038
will happen is the app thread will like

882
00:30:02,720 --> 00:30:07,519
you know it'll like prep some buffers

883
00:30:05,038 --> 00:30:09,200
right so it'll like go okay i got to put

884
00:30:07,519 --> 00:30:11,359
some stuff i want to write out in here

885
00:30:09,200 --> 00:30:12,319
when it's ready right it'll just like

886
00:30:11,359 --> 00:30:15,599
issue

887
00:30:12,319 --> 00:30:18,000
a um a write to memory

888
00:30:15,599 --> 00:30:18,798
and the kernel thread is just looking at

889
00:30:18,000 --> 00:30:21,679
that

890
00:30:18,798 --> 00:30:24,240
memory area right

891
00:30:21,679 --> 00:30:27,120
if this thread was like a sleep

892
00:30:24,240 --> 00:30:29,120
then it is still sort of a cis call you

893
00:30:27,119 --> 00:30:30,239
you have to do like a call that checks

894
00:30:29,119 --> 00:30:32,479
and if the shed was asleep it will like

895
00:30:30,240 --> 00:30:34,399
wake it up or whatever right but if this

896
00:30:32,480 --> 00:30:36,640
thread was busy so let's say this was

897
00:30:34,398 --> 00:30:38,319
busy like processing the last part so

898
00:30:36,640 --> 00:30:39,840
the kernel thread is like processing

899
00:30:38,319 --> 00:30:41,200
some other write you were doing like

900
00:30:39,839 --> 00:30:42,398
getting that ready and handing it off to

901
00:30:41,200 --> 00:30:44,960
drive or whatever

902
00:30:42,398 --> 00:30:46,479
if you write into the memory into the

903
00:30:44,960 --> 00:30:49,440
ring buffer

904
00:30:46,480 --> 00:30:51,839
before it finishes it will just look

905
00:30:49,440 --> 00:30:53,440
here it'll it'll like go okay i'm done

906
00:30:51,839 --> 00:30:55,199
with the last thing i did let me look

907
00:30:53,440 --> 00:30:56,798
and it'll find the next thing to do and

908
00:30:55,200 --> 00:30:58,960
it'll just start doing it so it'll start

909
00:30:56,798 --> 00:31:00,398
processing the next one right so this

910
00:30:58,960 --> 00:31:01,759
one that you prepped it will process

911
00:31:00,398 --> 00:31:03,599
here and of course here it was

912
00:31:01,759 --> 00:31:05,919
processing something you wrote before

913
00:31:03,599 --> 00:31:08,079
and so you can create really high high

914
00:31:05,919 --> 00:31:10,720
bandwidth low overhead

915
00:31:08,079 --> 00:31:13,519
channels between uh the

916
00:31:10,720 --> 00:31:15,839
between the kernel and you

917
00:31:13,519 --> 00:31:17,519
um that don't require these sys calls in

918
00:31:15,839 --> 00:31:19,759
this buffering

919
00:31:17,519 --> 00:31:22,558
so so this is more what i'm talking

920
00:31:19,759 --> 00:31:25,278
about the raw write part of it all i

921
00:31:22,558 --> 00:31:28,000
meant by that was not going through any

922
00:31:25,278 --> 00:31:30,319
file system stuff so so no file system

923
00:31:28,000 --> 00:31:32,319
layer at all you just write crap to the

924
00:31:30,319 --> 00:31:34,480
disk and you pull crap back from the

925
00:31:32,319 --> 00:31:35,519
disk as close as possible as you can get

926
00:31:34,480 --> 00:31:38,000
to that

927
00:31:35,519 --> 00:31:40,159
um and again the reason for that is just

928
00:31:38,000 --> 00:31:41,759
to avoid the overhead of going through a

929
00:31:40,159 --> 00:31:43,440
file simulator because if you're your

930
00:31:41,759 --> 00:31:45,278
own web server what do you need a file

931
00:31:43,440 --> 00:31:47,200
system for right

932
00:31:45,278 --> 00:31:49,519
it's not like multiple people are like

933
00:31:47,200 --> 00:31:51,519
using this machine and and you need you

934
00:31:49,519 --> 00:31:53,359
know someone to be able to talk about

935
00:31:51,519 --> 00:31:55,200
this jpeg that you know they put there

936
00:31:53,359 --> 00:31:56,479
it's like you're the only person running

937
00:31:55,200 --> 00:31:59,600
you're the server who's serving

938
00:31:56,480 --> 00:32:01,519
everything so there's no reason why you

939
00:31:59,599 --> 00:32:04,158
would have to go through some

940
00:32:01,519 --> 00:32:06,000
intermediary to know what like the name

941
00:32:04,159 --> 00:32:07,679
of a file is or where it is or how big

942
00:32:06,000 --> 00:32:09,440
it is because you're the only one who

943
00:32:07,679 --> 00:32:11,120
wrote anything and you're the only one

944
00:32:09,440 --> 00:32:12,720
who reads anything so just keep that

945
00:32:11,119 --> 00:32:17,119
table yourself and you don't have to go

946
00:32:12,720 --> 00:32:19,120
through ext4 or you know refs or

947
00:32:17,119 --> 00:32:20,319
butter fs nowadays on linux i guess

948
00:32:19,119 --> 00:32:21,918
probably

949
00:32:20,319 --> 00:32:24,720
um

950
00:32:21,919 --> 00:32:26,159
so between iou ring and trying as cl

951
00:32:24,720 --> 00:32:29,120
much as possible depending on the

952
00:32:26,159 --> 00:32:31,840
circumstance to just use raw writes to

953
00:32:29,119 --> 00:32:34,719
an unformatted drive with no file system

954
00:32:31,839 --> 00:32:36,558
you can get rid of a lot of crap for me

955
00:32:34,720 --> 00:32:38,880
it's not as much about performance

956
00:32:36,558 --> 00:32:40,079
because i don't know that disk i o i

957
00:32:38,880 --> 00:32:42,159
mean i'll know more when this is

958
00:32:40,079 --> 00:32:44,398
deployed in the wild i don't know that i

959
00:32:42,159 --> 00:32:45,679
haven't been sweating disc io because i

960
00:32:44,398 --> 00:32:48,879
don't know that we really are going to

961
00:32:45,679 --> 00:32:51,919
care that much about disk i o

962
00:32:48,880 --> 00:32:54,399
but for me it's it's not about it's not

963
00:32:51,919 --> 00:32:56,399
about speed it's about reliability the

964
00:32:54,398 --> 00:32:58,239
less of this crap there is the better in

965
00:32:56,398 --> 00:33:01,119
my opinion because linux is just a janky

966
00:32:58,240 --> 00:33:03,200
pile and i don't want any of it running

967
00:33:01,119 --> 00:33:05,759
the kernel may be sort of okay but the

968
00:33:03,200 --> 00:33:08,399
user space definitely isn't so so

969
00:33:05,759 --> 00:33:10,158
ideally i would like to if not in the

970
00:33:08,398 --> 00:33:11,759
first incarnation of our server stuff

971
00:33:10,159 --> 00:33:13,760
because like i said you know you can

972
00:33:11,759 --> 00:33:15,759
only do so much

973
00:33:13,759 --> 00:33:18,079
but i want to minimize it at least and

974
00:33:15,759 --> 00:33:21,440
then going forward i would always want

975
00:33:18,079 --> 00:33:23,278
to remove user space stuff from our

976
00:33:21,440 --> 00:33:25,278
servers until we're basically down to

977
00:33:23,278 --> 00:33:27,038
nothing where it's just our code running

978
00:33:25,278 --> 00:33:29,359
is the only thing running in user space

979
00:33:27,038 --> 00:33:31,038
would be ideal for us because again it

980
00:33:29,359 --> 00:33:33,439
just gets rid of a huge maintenance

981
00:33:31,038 --> 00:33:35,679
headache because none of the linux user

982
00:33:33,440 --> 00:33:38,480
space stuff is good and it doesn't do

983
00:33:35,679 --> 00:33:40,559
anything right if that's for if you're a

984
00:33:38,480 --> 00:33:42,640
user of a machine a web server is

985
00:33:40,558 --> 00:33:44,398
somebody who just wants complete control

986
00:33:42,640 --> 00:33:46,080
over the entire machine

987
00:33:44,398 --> 00:33:47,839
and just uses all the threads to serve

988
00:33:46,079 --> 00:33:49,519
stuff right

989
00:33:47,839 --> 00:33:52,079
it doesn't want

990
00:33:49,519 --> 00:33:54,079
other processes running right there's no

991
00:33:52,079 --> 00:33:55,839
benefit to those other processes if if

992
00:33:54,079 --> 00:33:57,278
your server knows what it's doing in and

993
00:33:55,839 --> 00:33:58,959
has all the features it needs you don't

994
00:33:57,278 --> 00:33:59,759
you don't need those right

995
00:33:58,960 --> 00:34:01,200
um

996
00:33:59,759 --> 00:34:03,200
let me check to see sorry i wasn't

997
00:34:01,200 --> 00:34:04,399
looking at chat there uh does that kind

998
00:34:03,200 --> 00:34:06,880
of make sense

999
00:34:04,398 --> 00:34:08,960
um

1000
00:34:06,880 --> 00:34:09,919
there

1001
00:34:08,960 --> 00:34:11,760
um

1002
00:34:09,918 --> 00:34:13,118
oh man there's a lot of chat that's good

1003
00:34:11,760 --> 00:34:16,119
i guess

1004
00:34:13,119 --> 00:34:16,119
um

1005
00:34:22,639 --> 00:34:25,639
two

1006
00:34:38,320 --> 00:34:42,879
okay so yeah um i've read the sequel

1007
00:34:41,039 --> 00:34:44,559
thank you for putting the q colon in

1008
00:34:42,878 --> 00:34:46,398
there because the q colon makes it

1009
00:34:44,559 --> 00:34:48,799
easier for me to see does the scheme

1010
00:34:46,398 --> 00:34:50,878
used here have similarity to command

1011
00:34:48,800 --> 00:34:53,200
buffers in gpu also what is the

1012
00:34:50,878 --> 00:34:56,000
significance of these apis featuring

1013
00:34:53,199 --> 00:35:00,399
cues just storing commands what benefits

1014
00:34:56,000 --> 00:35:02,639
does it have um so yes like the the way

1015
00:35:00,400 --> 00:35:04,320
you can think about iou ring is very

1016
00:35:02,639 --> 00:35:06,159
similar to how you can think about gpu

1017
00:35:04,320 --> 00:35:07,359
command buffers they're very very

1018
00:35:06,159 --> 00:35:10,239
similar

1019
00:35:07,358 --> 00:35:11,598
the primary difference between them

1020
00:35:10,239 --> 00:35:14,559
is only that

1021
00:35:11,599 --> 00:35:17,119
as far as iou ring is concerned anyway i

1022
00:35:14,559 --> 00:35:19,119
don't think there's any chance

1023
00:35:17,119 --> 00:35:20,000
at all i mean there may never be any

1024
00:35:19,119 --> 00:35:22,400
chance

1025
00:35:20,000 --> 00:35:24,960
um but at least currently since iou ring

1026
00:35:22,400 --> 00:35:26,880
is very new there's no chance that the

1027
00:35:24,960 --> 00:35:29,440
iou ring stuff is getting implemented in

1028
00:35:26,880 --> 00:35:32,000
hardware iou ring is more just a way of

1029
00:35:29,440 --> 00:35:33,519
packaging a syscall into a ring buffer

1030
00:35:32,000 --> 00:35:35,280
so that it can be executed without the

1031
00:35:33,519 --> 00:35:37,920
syscall right

1032
00:35:35,280 --> 00:35:40,079
um when you think about gpu stuff

1033
00:35:37,920 --> 00:35:41,440
depending on what circumstances you're

1034
00:35:40,079 --> 00:35:42,560
talking about you could actually be

1035
00:35:41,440 --> 00:35:45,039
talking about something that actually

1036
00:35:42,559 --> 00:35:46,880
gets executed on the graphics card

1037
00:35:45,039 --> 00:35:48,719
now that would be a really cool thing to

1038
00:35:46,880 --> 00:35:51,200
happen um

1039
00:35:48,719 --> 00:35:53,199
in the in the i o u ring space and there

1040
00:35:51,199 --> 00:35:55,279
actually is precedent for that there are

1041
00:35:53,199 --> 00:35:57,679
things um like uh

1042
00:35:55,280 --> 00:35:59,839
oh what's the name of that stuff

1043
00:35:57,679 --> 00:36:02,559
in infiniband so there's things like

1044
00:35:59,838 --> 00:36:04,639
infiniband um or other things that are

1045
00:36:02,559 --> 00:36:07,039
in the service space that are like

1046
00:36:04,639 --> 00:36:10,000
all about like high performance

1047
00:36:07,039 --> 00:36:12,880
kernel not involved nonsense to like

1048
00:36:10,000 --> 00:36:15,599
communicate between machines and stuff

1049
00:36:12,880 --> 00:36:17,358
so there obviously is high-end hardware

1050
00:36:15,599 --> 00:36:18,800
that does have some of that stuff but it

1051
00:36:17,358 --> 00:36:20,319
doesn't have anything to do with iou

1052
00:36:18,800 --> 00:36:21,519
ring as far as i know there's no

1053
00:36:20,320 --> 00:36:23,519
integration between those two things

1054
00:36:21,519 --> 00:36:24,639
they're just separate like infiniband i

1055
00:36:23,519 --> 00:36:26,960
think is a thing where you can basically

1056
00:36:24,639 --> 00:36:29,118
say like i want to map this memory

1057
00:36:26,960 --> 00:36:31,280
across multiple machines so basically

1058
00:36:29,119 --> 00:36:32,400
like it's like a back plane like a back

1059
00:36:31,280 --> 00:36:34,400
channel

1060
00:36:32,400 --> 00:36:35,920
that'll like sync the memory so if you

1061
00:36:34,400 --> 00:36:37,519
write something the other machine will

1062
00:36:35,920 --> 00:36:39,358
see the rights like in the data center

1063
00:36:37,519 --> 00:36:41,358
right and things like that and again the

1064
00:36:39,358 --> 00:36:43,279
point there it's not going any faster

1065
00:36:41,358 --> 00:36:45,279
right you're still going over a wire so

1066
00:36:43,280 --> 00:36:47,200
it's going the same speed as anything

1067
00:36:45,280 --> 00:36:48,640
else but the idea is you can reduce a

1068
00:36:47,199 --> 00:36:50,159
bunch of overhead

1069
00:36:48,639 --> 00:36:52,400
if there's a piece of hardware sitting

1070
00:36:50,159 --> 00:36:54,879
there that's just looking at you know

1071
00:36:52,400 --> 00:36:56,400
this this sort of uh mapped memory and

1072
00:36:54,880 --> 00:36:58,240
feeding it to other machines really

1073
00:36:56,400 --> 00:36:59,760
quickly uh it can get rid of all this

1074
00:36:58,239 --> 00:37:01,838
overhead of the kernel ever even having

1075
00:36:59,760 --> 00:37:03,760
to know right so

1076
00:37:01,838 --> 00:37:07,440
again a lot of this stuff is just about

1077
00:37:03,760 --> 00:37:09,119
getting the overhead out of the system

1078
00:37:07,440 --> 00:37:10,400
when you ask the second part of your

1079
00:37:09,119 --> 00:37:12,079
question which is what is the

1080
00:37:10,400 --> 00:37:13,039
significance of these apis featuring

1081
00:37:12,079 --> 00:37:15,680
queues

1082
00:37:13,039 --> 00:37:18,480
what benefits does it have um that's the

1083
00:37:15,679 --> 00:37:20,399
benefit right um so the oops i didn't

1084
00:37:18,480 --> 00:37:22,800
mean to do that

1085
00:37:20,400 --> 00:37:25,838
i just accidentally locked my own thing

1086
00:37:22,800 --> 00:37:27,760
that i was using to the read chat

1087
00:37:25,838 --> 00:37:30,880
oops

1088
00:37:27,760 --> 00:37:30,880
uh okay um

1089
00:37:31,119 --> 00:37:34,240
so the significance there

1090
00:37:32,880 --> 00:37:36,000
just to to draw the skin because i

1091
00:37:34,239 --> 00:37:38,000
didn't do a very good job drawing that

1092
00:37:36,000 --> 00:37:40,079
diagram obviously um because i was

1093
00:37:38,000 --> 00:37:41,599
talking about the buffer flow there

1094
00:37:40,079 --> 00:37:43,599
uh but if if you think about what

1095
00:37:41,599 --> 00:37:45,680
actually occurs when you do one of these

1096
00:37:43,599 --> 00:37:47,599
sys calls right so if i want to do

1097
00:37:45,679 --> 00:37:49,358
something like a right syscall so you

1098
00:37:47,599 --> 00:37:52,079
know i want to do something like a right

1099
00:37:49,358 --> 00:37:53,199
not not f right because that's like

1100
00:37:52,079 --> 00:37:54,800
one level higher right that's the

1101
00:37:53,199 --> 00:37:56,559
buffered version if i want to do

1102
00:37:54,800 --> 00:37:58,000
something like a write syscall so i'm

1103
00:37:56,559 --> 00:38:00,320
calling linux

1104
00:37:58,000 --> 00:38:02,320
and i'm going to actually issue like a

1105
00:38:00,320 --> 00:38:03,680
direct write for the syscall and you can

1106
00:38:02,320 --> 00:38:05,680
look up in the table there's like a

1107
00:38:03,679 --> 00:38:07,838
syscall called right

1108
00:38:05,679 --> 00:38:09,358
that's this call

1109
00:38:07,838 --> 00:38:10,960
what's going to happen in the assembly

1110
00:38:09,358 --> 00:38:13,279
language is you will literally see a

1111
00:38:10,960 --> 00:38:15,679
thing that says syscall

1112
00:38:13,280 --> 00:38:18,960
there's this is an actual instruction

1113
00:38:15,679 --> 00:38:20,719
like on an x86 cpu right

1114
00:38:18,960 --> 00:38:22,240
and what the syscall instruction does is

1115
00:38:20,719 --> 00:38:23,519
it's basically a transition to the

1116
00:38:22,239 --> 00:38:25,919
operating system that's designed to

1117
00:38:23,519 --> 00:38:28,639
happen quickly and what happens is the

1118
00:38:25,920 --> 00:38:28,639
registers

1119
00:38:28,719 --> 00:38:34,239
are the parameters

1120
00:38:31,679 --> 00:38:37,199
so what will happen is your code will go

1121
00:38:34,239 --> 00:38:39,039
like okay set you know this register to

1122
00:38:37,199 --> 00:38:42,159
the file handle set this register to the

1123
00:38:39,039 --> 00:38:44,400
address it's registered the size syscall

1124
00:38:42,159 --> 00:38:46,799
the operating system goes oh what's

1125
00:38:44,400 --> 00:38:49,838
going on oh is this call which syscall

1126
00:38:46,800 --> 00:38:51,359
oh i should one other thing was write

1127
00:38:49,838 --> 00:38:53,759
which thing you called that's in a

1128
00:38:51,358 --> 00:38:56,480
register too you put a number the number

1129
00:38:53,760 --> 00:38:58,240
is is which um

1130
00:38:56,480 --> 00:38:59,760
operating system function you wanted you

1131
00:38:58,239 --> 00:39:02,639
look in the table you'll see like right

1132
00:38:59,760 --> 00:39:04,079
is you know seven or something right um

1133
00:39:02,639 --> 00:39:05,679
that's how it knows what to do so it

1134
00:39:04,079 --> 00:39:07,760
wakes up and goes whoa what's in

1135
00:39:05,679 --> 00:39:09,358
register blah oh it's seven i'm gonna do

1136
00:39:07,760 --> 00:39:11,280
a right it's it's not seven by the way

1137
00:39:09,358 --> 00:39:13,598
i'm making that number up go look at the

1138
00:39:11,280 --> 00:39:14,400
table you'll you'll see

1139
00:39:13,599 --> 00:39:16,480
um

1140
00:39:14,400 --> 00:39:18,079
so it's like okay that's that's what i

1141
00:39:16,480 --> 00:39:19,679
needed um

1142
00:39:18,079 --> 00:39:21,359
i'll go do that one i'll look at the

1143
00:39:19,679 --> 00:39:23,358
other registers find what i need to do

1144
00:39:21,358 --> 00:39:25,199
i'll actually process this here

1145
00:39:23,358 --> 00:39:27,199
and shove it off and then when i'm done

1146
00:39:25,199 --> 00:39:29,358
i'm gonna detransition right i'm gonna

1147
00:39:27,199 --> 00:39:31,199
go i took a ring transition down to the

1148
00:39:29,358 --> 00:39:33,039
operating system to do the assist call

1149
00:39:31,199 --> 00:39:35,118
and now i'm going to transition back to

1150
00:39:33,039 --> 00:39:38,320
user space so you're constantly doing

1151
00:39:35,119 --> 00:39:40,880
that ring transition which costs right

1152
00:39:38,320 --> 00:39:42,400
you're paying for that ring transition

1153
00:39:40,880 --> 00:39:43,760
um and not only you're paying for that

1154
00:39:42,400 --> 00:39:45,119
ring transition but you might have to

1155
00:39:43,760 --> 00:39:46,640
pay for like saving and restoring

1156
00:39:45,119 --> 00:39:47,920
registers like all sorts of stuff could

1157
00:39:46,639 --> 00:39:50,159
have to happen here because you're

1158
00:39:47,920 --> 00:39:51,680
effectively going from your code with

1159
00:39:50,159 --> 00:39:53,759
all the registers set to whatever they

1160
00:39:51,679 --> 00:39:55,519
are and the memory mapping whatever it

1161
00:39:53,760 --> 00:39:57,920
is into the operating system which has

1162
00:39:55,519 --> 00:40:00,639
to wake up in the middle of that

1163
00:39:57,920 --> 00:40:02,800
no context at all and it has to like go

1164
00:40:00,639 --> 00:40:04,318
okay let me like get everything set up

1165
00:40:02,800 --> 00:40:05,920
let me handle this thing

1166
00:40:04,318 --> 00:40:08,239
all right i'm done now and let's get out

1167
00:40:05,920 --> 00:40:08,960
of it right

1168
00:40:08,239 --> 00:40:11,838
so

1169
00:40:08,960 --> 00:40:13,760
that inefficiency of this of filling out

1170
00:40:11,838 --> 00:40:15,920
the register is doing the syscall

1171
00:40:13,760 --> 00:40:17,680
and taking that ring transition overhead

1172
00:40:15,920 --> 00:40:19,838
where it's like kernel transition and

1173
00:40:17,679 --> 00:40:21,759
back kernel transition and back

1174
00:40:19,838 --> 00:40:24,318
if you're trying to do a lot of writes

1175
00:40:21,760 --> 00:40:26,560
you're just wasting all your time doing

1176
00:40:24,318 --> 00:40:28,159
these sys calls like there's no point to

1177
00:40:26,559 --> 00:40:29,440
those these things you're just sitting

1178
00:40:28,159 --> 00:40:30,960
around doing it you'd like to be able to

1179
00:40:29,440 --> 00:40:33,599
start doing them in bulk

1180
00:40:30,960 --> 00:40:35,119
that's what iou ring basically gives you

1181
00:40:33,599 --> 00:40:36,318
so the reason that these things tend to

1182
00:40:35,119 --> 00:40:38,160
look like

1183
00:40:36,318 --> 00:40:39,599
a commit a cue and and that's what they

1184
00:40:38,159 --> 00:40:40,879
look like by the way so they tend to

1185
00:40:39,599 --> 00:40:41,760
look like this

1186
00:40:40,880 --> 00:40:44,480
um

1187
00:40:41,760 --> 00:40:47,359
these systems tend to look like a a like

1188
00:40:44,480 --> 00:40:49,760
an in and an out cue right and they've

1189
00:40:47,358 --> 00:40:51,598
got like you know chunks so your

1190
00:40:49,760 --> 00:40:52,720
application like it puts something in

1191
00:40:51,599 --> 00:40:55,359
here

1192
00:40:52,719 --> 00:40:58,799
right and the os reads it and writes the

1193
00:40:55,358 --> 00:41:00,639
output here right it like reads writes

1194
00:40:58,800 --> 00:41:02,160
reads writes and they don't have to go

1195
00:41:00,639 --> 00:41:04,480
in order so you might read these and

1196
00:41:02,159 --> 00:41:06,719
like if this one took a really long time

1197
00:41:04,480 --> 00:41:08,559
then maybe this one actually goes here

1198
00:41:06,719 --> 00:41:10,239
and this one goes here and then this one

1199
00:41:08,559 --> 00:41:11,759
actually goes like all the way over here

1200
00:41:10,239 --> 00:41:13,598
right

1201
00:41:11,760 --> 00:41:14,880
so the reason that these cues work well

1202
00:41:13,599 --> 00:41:15,760
is because now you don't need syscalls

1203
00:41:14,880 --> 00:41:17,920
at all

1204
00:41:15,760 --> 00:41:20,720
right all you do is just slam all your

1205
00:41:17,920 --> 00:41:22,240
data into this into this command buffer

1206
00:41:20,719 --> 00:41:24,318
and the operating system's just reading

1207
00:41:22,239 --> 00:41:26,239
it it you're writing it it's reading it

1208
00:41:24,318 --> 00:41:27,679
there's no need for a syscall at all you

1209
00:41:26,239 --> 00:41:29,519
can just keep going like that for as

1210
00:41:27,679 --> 00:41:31,679
long as you want and the only time you

1211
00:41:29,519 --> 00:41:33,119
ever need to make any kind of syscall is

1212
00:41:31,679 --> 00:41:35,598
just if you

1213
00:41:33,119 --> 00:41:37,280
if you look so i don't

1214
00:41:35,599 --> 00:41:39,119
i've never looked at the actual codes i

1215
00:41:37,280 --> 00:41:41,359
don't know exactly what they do here on

1216
00:41:39,119 --> 00:41:43,519
linux you can check but

1217
00:41:41,358 --> 00:41:44,880
if this thread goes to sleep because you

1218
00:41:43,519 --> 00:41:47,119
didn't have anything in the queue like

1219
00:41:44,880 --> 00:41:49,200
it finished it like red it read up to

1220
00:41:47,119 --> 00:41:51,760
here and it goes oh there's nothing i

1221
00:41:49,199 --> 00:41:53,919
looked at the the index and and this one

1222
00:41:51,760 --> 00:41:55,280
is this is the last one right i don't

1223
00:41:53,920 --> 00:41:56,639
need to read anymore they haven't filled

1224
00:41:55,280 --> 00:41:58,079
out anything else

1225
00:41:56,639 --> 00:41:59,759
it may go to sleep

1226
00:41:58,079 --> 00:42:01,760
right

1227
00:41:59,760 --> 00:42:02,880
if it goes to sleep you need to wake it

1228
00:42:01,760 --> 00:42:03,599
up

1229
00:42:02,880 --> 00:42:05,599
so

1230
00:42:03,599 --> 00:42:07,920
if that happens then there would be a

1231
00:42:05,599 --> 00:42:09,680
cis call to wake that threat up but if

1232
00:42:07,920 --> 00:42:11,519
you think about it in that case it's

1233
00:42:09,679 --> 00:42:13,358
probably okay because you couldn't have

1234
00:42:11,519 --> 00:42:16,079
been doing anything that high bandwidth

1235
00:42:13,358 --> 00:42:17,279
if you if you if it underflowed if the

1236
00:42:16,079 --> 00:42:18,880
if the operating system like got to the

1237
00:42:17,280 --> 00:42:21,519
end it was like i'm done

1238
00:42:18,880 --> 00:42:23,280
so in the scenario where you care which

1239
00:42:21,519 --> 00:42:24,559
is where you're just writing tons of new

1240
00:42:23,280 --> 00:42:25,920
blocks and you just want to slam all

1241
00:42:24,559 --> 00:42:27,519
these things into buffer and just like

1242
00:42:25,920 --> 00:42:29,039
have the operating system just like

1243
00:42:27,519 --> 00:42:30,318
picking them off writing them writing

1244
00:42:29,039 --> 00:42:32,318
them writing them right without ever

1245
00:42:30,318 --> 00:42:34,400
having to do all these transitions

1246
00:42:32,318 --> 00:42:36,400
um

1247
00:42:34,400 --> 00:42:38,559
that's the case where you actually care

1248
00:42:36,400 --> 00:42:39,519
about avoiding tons of unnecessary sys

1249
00:42:38,559 --> 00:42:40,318
calls

1250
00:42:39,519 --> 00:42:42,559
uh

1251
00:42:40,318 --> 00:42:44,400
and that's where it's you're not gonna

1252
00:42:42,559 --> 00:42:45,920
have to make any in the case where this

1253
00:42:44,400 --> 00:42:47,200
thread goes to sleep well you couldn't

1254
00:42:45,920 --> 00:42:48,800
have been doing that much work anyway

1255
00:42:47,199 --> 00:42:51,118
because obviously you weren't calling

1256
00:42:48,800 --> 00:42:52,800
this very often because you called it so

1257
00:42:51,119 --> 00:42:54,720
a few times that the kernel beat you to

1258
00:42:52,800 --> 00:42:56,318
the end of it right

1259
00:42:54,719 --> 00:42:58,719
um so

1260
00:42:56,318 --> 00:43:01,358
that's one thing you do have to do now i

1261
00:42:58,719 --> 00:43:01,358
believe

1262
00:43:01,440 --> 00:43:05,039
again i don't remember because i didn't

1263
00:43:03,039 --> 00:43:07,440
i don't program linux right

1264
00:43:05,039 --> 00:43:09,039
um but you know i had to look at how

1265
00:43:07,440 --> 00:43:11,760
they do it because i needed to program

1266
00:43:09,039 --> 00:43:14,079
it this one time

1267
00:43:11,760 --> 00:43:15,839
i believe the idea would generally be

1268
00:43:14,079 --> 00:43:17,519
because in these systems it usually is

1269
00:43:15,838 --> 00:43:19,039
you don't call it every time you insert

1270
00:43:17,519 --> 00:43:20,960
something either you insert all the

1271
00:43:19,039 --> 00:43:22,719
things you want to insert and anytime

1272
00:43:20,960 --> 00:43:25,838
you want you can call to check to make

1273
00:43:22,719 --> 00:43:27,598
sure the thread's awake so also you can

1274
00:43:25,838 --> 00:43:28,799
make sure that you don't tend to like

1275
00:43:27,599 --> 00:43:30,079
stutter much because you can make sure

1276
00:43:28,800 --> 00:43:31,839
you dump a bunch of stick in there and

1277
00:43:30,079 --> 00:43:33,440
stuff in there and then kick it off if

1278
00:43:31,838 --> 00:43:34,960
you want to now you don't want to wait

1279
00:43:33,440 --> 00:43:37,760
too long because you want the operation

1280
00:43:34,960 --> 00:43:39,199
to be like to get overlap but but that's

1281
00:43:37,760 --> 00:43:41,680
basically the idea

1282
00:43:39,199 --> 00:43:44,799
um and so yeah it's it's exactly like a

1283
00:43:41,679 --> 00:43:46,239
gpu in that way um you're just filling

1284
00:43:44,800 --> 00:43:48,880
up these buffers so that you can both do

1285
00:43:46,239 --> 00:43:51,358
work at the same time right but it's a

1286
00:43:48,880 --> 00:43:53,519
little bit unlike a gpu in that in a gpu

1287
00:43:51,358 --> 00:43:56,639
expect some of this work to be uh be

1288
00:43:53,519 --> 00:43:58,719
done by a processor that's like a sep a

1289
00:43:56,639 --> 00:44:01,838
different processor than the cpu

1290
00:43:58,719 --> 00:44:03,358
that you're on whereas in um like

1291
00:44:01,838 --> 00:44:04,318
something like i o u ring you're

1292
00:44:03,358 --> 00:44:06,078
actually talking about the same

1293
00:44:04,318 --> 00:44:08,480
processor so you're just talking about

1294
00:44:06,079 --> 00:44:10,560
two cores on that processor using this

1295
00:44:08,480 --> 00:44:12,480
to avoid having to

1296
00:44:10,559 --> 00:44:13,920
um do a bunch of sys calls on the same

1297
00:44:12,480 --> 00:44:15,358
core to do this

1298
00:44:13,920 --> 00:44:17,599
uh

1299
00:44:15,358 --> 00:44:19,279
so off you go there's probably also some

1300
00:44:17,599 --> 00:44:20,838
other benefits i don't know i haven't

1301
00:44:19,280 --> 00:44:22,800
worked with iou ring

1302
00:44:20,838 --> 00:44:24,880
much but you can think about there might

1303
00:44:22,800 --> 00:44:27,280
be some other benefits too if the kernel

1304
00:44:24,880 --> 00:44:28,960
thread is just doing its thing and your

1305
00:44:27,280 --> 00:44:31,359
thread is just doing your thing and

1306
00:44:28,960 --> 00:44:32,800
you're on separate cores even then

1307
00:44:31,358 --> 00:44:35,119
you're not going to be polluting like

1308
00:44:32,800 --> 00:44:37,519
your l1 and l2 caches every time you hit

1309
00:44:35,119 --> 00:44:39,599
one of those syscalls anything that the

1310
00:44:37,519 --> 00:44:41,759
kernel needs to go touch for pages of

1311
00:44:39,599 --> 00:44:45,519
data that need to actually do stuff such

1312
00:44:41,760 --> 00:44:48,319
as like ext for pa like like metadata or

1313
00:44:45,519 --> 00:44:49,759
butterfs metadata or stuff in the kernel

1314
00:44:48,318 --> 00:44:51,199
that it needs to check for permissions

1315
00:44:49,760 --> 00:44:53,200
or i don't know right like who knows

1316
00:44:51,199 --> 00:44:54,318
what the linux kernel does it's like 30

1317
00:44:53,199 --> 00:44:56,480
million lines of code or something at

1318
00:44:54,318 --> 00:44:58,639
this point

1319
00:44:56,480 --> 00:45:00,960
whatever it's doing in there

1320
00:44:58,639 --> 00:45:03,519
if those are on the same

1321
00:45:00,960 --> 00:45:05,920
uh core as when you did your syscall

1322
00:45:03,519 --> 00:45:08,639
that's polluting your cash right that's

1323
00:45:05,920 --> 00:45:10,079
taking up space in your l1 or your l2

1324
00:45:08,639 --> 00:45:11,838
whereas if you're two separate threads

1325
00:45:10,079 --> 00:45:13,440
on two separate cores each doing your

1326
00:45:11,838 --> 00:45:14,799
own thing you'll get a lot better cash

1327
00:45:13,440 --> 00:45:16,559
currency because you're just touching

1328
00:45:14,800 --> 00:45:18,240
your stuff that's in l1 and they're just

1329
00:45:16,559 --> 00:45:20,400
touching their stuff that's in l1 and

1330
00:45:18,239 --> 00:45:21,519
you guys are never like fighting over

1331
00:45:20,400 --> 00:45:24,880
which cache lines are going to be

1332
00:45:21,519 --> 00:45:26,880
resident in your l1 or l2 so it seems to

1333
00:45:24,880 --> 00:45:28,800
me and i've never profiled this so don't

1334
00:45:26,880 --> 00:45:30,400
you know take that with a grain of salt

1335
00:45:28,800 --> 00:45:31,680
but it seems to me that there probably

1336
00:45:30,400 --> 00:45:33,760
are other wins you could get there as

1337
00:45:31,679 --> 00:45:36,960
well that aren't just about avoiding

1338
00:45:33,760 --> 00:45:38,240
like syscall overhead or avoiding um you

1339
00:45:36,960 --> 00:45:39,199
know unnecessary buffering and things

1340
00:45:38,239 --> 00:45:41,039
like that

1341
00:45:39,199 --> 00:45:44,039
but

1342
00:45:41,039 --> 00:45:44,039
yeah

1343
00:45:53,358 --> 00:45:58,239
okay so there was a question here before

1344
00:45:55,838 --> 00:45:59,920
it scrolls off um

1345
00:45:58,239 --> 00:46:01,598
in one of your very old handmade hero

1346
00:45:59,920 --> 00:46:03,039
episodes you were talking about how you

1347
00:46:01,599 --> 00:46:04,880
would like to program on linux but linux

1348
00:46:03,039 --> 00:46:07,119
debuggers had always just been worse

1349
00:46:04,880 --> 00:46:08,559
than the mediocre visual studios

1350
00:46:07,119 --> 00:46:09,680
i do think that using gdp is not

1351
00:46:08,559 --> 00:46:11,838
actually great but i'm assuming there

1352
00:46:09,679 --> 00:46:13,199
were and are other options can you maybe

1353
00:46:11,838 --> 00:46:15,279
go more into depth on what makes

1354
00:46:13,199 --> 00:46:17,118
debugging linux that much worse than

1355
00:46:15,280 --> 00:46:19,440
using the monstrosity as visual studio

1356
00:46:17,119 --> 00:46:21,519
um yeah so actually

1357
00:46:19,440 --> 00:46:23,440
when i said debug and layout sucked i

1358
00:46:21,519 --> 00:46:26,239
actually meant all of it so

1359
00:46:23,440 --> 00:46:28,800
i agree gdb is not great um and to be

1360
00:46:26,239 --> 00:46:30,318
clear about that it's it's you have to

1361
00:46:28,800 --> 00:46:32,720
be careful when you say gdp is not great

1362
00:46:30,318 --> 00:46:34,960
because gdp actually really

1363
00:46:32,719 --> 00:46:37,199
i mean i don't i don't like using it and

1364
00:46:34,960 --> 00:46:40,159
i don't use it very much so i i can't

1365
00:46:37,199 --> 00:46:42,399
say like definitively

1366
00:46:40,159 --> 00:46:43,440
but in my experience gdb has a lot of

1367
00:46:42,400 --> 00:46:46,160
features

1368
00:46:43,440 --> 00:46:47,838
so usually it's not that gdb sucks

1369
00:46:46,159 --> 00:46:49,920
because it doesn't do the thing you want

1370
00:46:47,838 --> 00:46:51,440
it to do usually it can do whatever the

1371
00:46:49,920 --> 00:46:53,200
thing is that you wanted to do and maybe

1372
00:46:51,440 --> 00:46:55,519
there's some edge cases there but you

1373
00:46:53,199 --> 00:46:57,679
know it's it has a lot of advanced

1374
00:46:55,519 --> 00:46:59,358
features gdb

1375
00:46:57,679 --> 00:47:01,919
uh the problem is is like the

1376
00:46:59,358 --> 00:47:05,119
usability's terrible so you you waste so

1377
00:47:01,920 --> 00:47:06,400
much time hunting for bugs with gdb that

1378
00:47:05,119 --> 00:47:09,200
you could have just found them easier

1379
00:47:06,400 --> 00:47:10,960
some other way like with a printf log or

1380
00:47:09,199 --> 00:47:13,759
by just putting in more asserts in your

1381
00:47:10,960 --> 00:47:15,358
code or whatever you could have

1382
00:47:13,760 --> 00:47:16,880
it's not going to save you time and the

1383
00:47:15,358 --> 00:47:19,199
only point of a debugger is to save you

1384
00:47:16,880 --> 00:47:21,358
time right i mean most of us would

1385
00:47:19,199 --> 00:47:23,279
presumably agree that we will find the

1386
00:47:21,358 --> 00:47:25,759
bug eventually because we can put we can

1387
00:47:23,280 --> 00:47:27,519
do work in other ways to get to the bug

1388
00:47:25,760 --> 00:47:29,359
so it's not like a debugger is the only

1389
00:47:27,519 --> 00:47:31,599
thing that can find bugs the point of a

1390
00:47:29,358 --> 00:47:33,759
debugger is to find the bug faster if

1391
00:47:31,599 --> 00:47:36,318
the bugs are actually getting found

1392
00:47:33,760 --> 00:47:38,559
slower when using the debugger that is a

1393
00:47:36,318 --> 00:47:40,719
useless utility and gdb to me is exactly

1394
00:47:38,559 --> 00:47:42,319
that useless utility with the exception

1395
00:47:40,719 --> 00:47:45,118
of just telling you like where your code

1396
00:47:42,318 --> 00:47:46,880
crashed if it's zig-zagged or something

1397
00:47:45,119 --> 00:47:48,240
um

1398
00:47:46,880 --> 00:47:50,160
it really can't

1399
00:47:48,239 --> 00:47:51,919
it really can't find bugs faster than

1400
00:47:50,159 --> 00:47:53,838
you could find them yourself without it

1401
00:47:51,920 --> 00:47:54,960
right and that's why i think it's kind

1402
00:47:53,838 --> 00:47:57,358
of crappy

1403
00:47:54,960 --> 00:47:59,920
the same tends to be true of almost all

1404
00:47:57,358 --> 00:48:02,000
debuggers on linux they're really slow

1405
00:47:59,920 --> 00:48:04,720
trying to step through them is arduous

1406
00:48:02,000 --> 00:48:07,039
they oftentimes can't display

1407
00:48:04,719 --> 00:48:08,399
local variables properly or watch window

1408
00:48:07,039 --> 00:48:10,318
stuff properly

1409
00:48:08,400 --> 00:48:12,160
most of them can't show disassembly

1410
00:48:10,318 --> 00:48:14,719
there's like very few that can actually

1411
00:48:12,159 --> 00:48:17,118
disassembly you i mean that's a

1412
00:48:14,719 --> 00:48:18,399
very important aspect of a debugger if

1413
00:48:17,119 --> 00:48:19,680
you're a serious programmer is to see

1414
00:48:18,400 --> 00:48:20,639
the

1415
00:48:19,679 --> 00:48:23,118
um

1416
00:48:20,639 --> 00:48:24,799
it's just a mess it's just a mess

1417
00:48:23,119 --> 00:48:27,039
so i'm actually talking about everything

1418
00:48:24,800 --> 00:48:28,559
i tried probably 10 different debuggers

1419
00:48:27,039 --> 00:48:30,880
maybe 15

1420
00:48:28,559 --> 00:48:33,280
um the last time i looked for one and

1421
00:48:30,880 --> 00:48:35,519
they were all universally horrible i

1422
00:48:33,280 --> 00:48:38,400
think the thing i ended up using

1423
00:48:35,519 --> 00:48:39,199
uh the most was qt creator

1424
00:48:38,400 --> 00:48:41,358
uh

1425
00:48:39,199 --> 00:48:44,239
which kinda sorta has a debugger that

1426
00:48:41,358 --> 00:48:46,239
works um but but it's really bad uh it

1427
00:48:44,239 --> 00:48:50,078
was just like the least bad of the like

1428
00:48:46,239 --> 00:48:52,879
20 000 like clion and qt creator and

1429
00:48:50,079 --> 00:48:54,318
this and cgdb and that

1430
00:48:52,880 --> 00:48:58,079
um

1431
00:48:54,318 --> 00:49:00,480
i will say that at that time uh nak st

1432
00:48:58,079 --> 00:49:03,200
the guy who does the um

1433
00:49:00,480 --> 00:49:05,199
essence operating system he recently

1434
00:49:03,199 --> 00:49:07,279
wrote a front end for gdb that people

1435
00:49:05,199 --> 00:49:10,239
have said good things about and i mean

1436
00:49:07,280 --> 00:49:11,599
since he writes his own operating system

1437
00:49:10,239 --> 00:49:13,919
you know you kind of know that's a

1438
00:49:11,599 --> 00:49:15,760
certain level of conf com

1439
00:49:13,920 --> 00:49:18,880
competence as well

1440
00:49:15,760 --> 00:49:21,440
so i haven't checked that out yet

1441
00:49:18,880 --> 00:49:23,200
when i actually go to do debugging

1442
00:49:21,440 --> 00:49:25,200
of some of this stuff on the actual

1443
00:49:23,199 --> 00:49:26,159
servers i will probably try to get that

1444
00:49:25,199 --> 00:49:27,759
running

1445
00:49:26,159 --> 00:49:28,960
because i'll probably need a debugger

1446
00:49:27,760 --> 00:49:31,119
here and there

1447
00:49:28,960 --> 00:49:33,920
uh when i go to move it from the local

1448
00:49:31,119 --> 00:49:35,680
machines to the linux server machines i

1449
00:49:33,920 --> 00:49:37,838
anticipate obviously there'll probably

1450
00:49:35,679 --> 00:49:38,879
be a lot of of nasty debugging that i

1451
00:49:37,838 --> 00:49:40,880
have to do

1452
00:49:38,880 --> 00:49:42,838
uh to like get everything

1453
00:49:40,880 --> 00:49:45,519
proper but

1454
00:49:42,838 --> 00:49:47,599
i i i can't really speak to that because

1455
00:49:45,519 --> 00:49:50,838
i haven't tried it but that's on my list

1456
00:49:47,599 --> 00:49:50,838
for sure

1457
00:50:00,719 --> 00:50:04,719
um

1458
00:50:01,599 --> 00:50:06,480
okay what exactly

1459
00:50:04,719 --> 00:50:09,519
uh

1460
00:50:06,480 --> 00:50:11,440
are we at for questions here

1461
00:50:09,519 --> 00:50:13,440
let's take a look

1462
00:50:11,440 --> 00:50:16,440
i'm going to take a little sippy poo

1463
00:50:13,440 --> 00:50:16,440
here

1464
00:50:39,039 --> 00:50:44,639
the mic's a bit hot yeah is it is it uh

1465
00:50:41,920 --> 00:50:44,639
too loud

1466
00:50:46,480 --> 00:50:50,400
um i assume this one's fine this one

1467
00:50:48,880 --> 00:50:53,720
looks fine is it just the other one that

1468
00:50:50,400 --> 00:50:53,720
was too hot

1469
00:51:21,280 --> 00:51:25,119
i don't so here's the problem i don't

1470
00:51:23,358 --> 00:51:26,799
actually think it is too hot i think

1471
00:51:25,119 --> 00:51:28,400
there's just a weird clipping problem i

1472
00:51:26,800 --> 00:51:31,280
don't know what it is

1473
00:51:28,400 --> 00:51:32,720
um it may actually just be obs uh but i

1474
00:51:31,280 --> 00:51:34,839
have to root it down there there's

1475
00:51:32,719 --> 00:51:37,279
definitely some kind of weird like sound

1476
00:51:34,838 --> 00:51:38,480
anomaly and i don't know where it's

1477
00:51:37,280 --> 00:51:41,119
coming from

1478
00:51:38,480 --> 00:51:43,199
i don't uh it's it's something i got a

1479
00:51:41,119 --> 00:51:46,480
root root down but but i don't know that

1480
00:51:43,199 --> 00:51:47,519
it's it's the actual uh board mic i can

1481
00:51:46,480 --> 00:51:51,920
try

1482
00:51:47,519 --> 00:51:56,079
turning the board mic down a little um

1483
00:51:51,920 --> 00:51:56,079
and c but i don't know that that'll help

1484
00:52:02,960 --> 00:52:07,519
on the topic of syscalls the kernel has

1485
00:52:04,800 --> 00:52:09,119
its own address space uh right or is it

1486
00:52:07,519 --> 00:52:11,440
just protected

1487
00:52:09,119 --> 00:52:13,920
and not accessible from user space can

1488
00:52:11,440 --> 00:52:15,200
it copy user memory in

1489
00:52:13,920 --> 00:52:17,519
um

1490
00:52:15,199 --> 00:52:19,759
so it's kind of the wrong way to think

1491
00:52:17,519 --> 00:52:22,239
about it

1492
00:52:19,760 --> 00:52:25,280
a little bit so let me just make sure

1493
00:52:22,239 --> 00:52:28,318
we're on the same page with that

1494
00:52:25,280 --> 00:52:30,720
so memory is just memory

1495
00:52:28,318 --> 00:52:33,838
you have physical ram in your machine

1496
00:52:30,719 --> 00:52:35,039
and the ram has the data in it

1497
00:52:33,838 --> 00:52:37,199
uh

1498
00:52:35,039 --> 00:52:38,960
the thing that is different between you

1499
00:52:37,199 --> 00:52:41,039
and the kernel

1500
00:52:38,960 --> 00:52:44,400
is the mapping

1501
00:52:41,039 --> 00:52:47,679
right so your process has a mapping that

1502
00:52:44,400 --> 00:52:50,400
says which addresses go with which

1503
00:52:47,679 --> 00:52:53,440
physical ram chips right like how do you

1504
00:52:50,400 --> 00:52:53,440
you know how do you map them

1505
00:52:53,599 --> 00:52:57,838
uh and it has protection bits that says

1506
00:52:56,159 --> 00:53:00,558
whether you're allowed to read or write

1507
00:52:57,838 --> 00:53:01,519
from them and so on as well right

1508
00:53:00,559 --> 00:53:03,440
so

1509
00:53:01,519 --> 00:53:06,318
the real way to think about it is that

1510
00:53:03,440 --> 00:53:08,880
when you do something like

1511
00:53:06,318 --> 00:53:11,199
ask the kernel to do something

1512
00:53:08,880 --> 00:53:13,599
it's really the kernel's discretion like

1513
00:53:11,199 --> 00:53:15,199
if the kernel wanted to it can just work

1514
00:53:13,599 --> 00:53:17,440
with your

1515
00:53:15,199 --> 00:53:19,358
you know with your memory layout

1516
00:53:17,440 --> 00:53:21,760
the reason that usually something has to

1517
00:53:19,358 --> 00:53:24,078
happen there is because the colonel

1518
00:53:21,760 --> 00:53:25,760
wants to hide stuff from you

1519
00:53:24,079 --> 00:53:29,119
and maybe doesn't want you to know where

1520
00:53:25,760 --> 00:53:33,200
things are right so it has to do work

1521
00:53:29,119 --> 00:53:35,280
with the setup of the memory page tables

1522
00:53:33,199 --> 00:53:38,239
to make sure that you can't

1523
00:53:35,280 --> 00:53:39,280
access a page in in physical ram that it

1524
00:53:38,239 --> 00:53:42,479
wants

1525
00:53:39,280 --> 00:53:43,359
to keep hidden from you right

1526
00:53:42,480 --> 00:53:45,519
um

1527
00:53:43,358 --> 00:53:47,039
but it's not like you have to copy user

1528
00:53:45,519 --> 00:53:49,759
memory in

1529
00:53:47,039 --> 00:53:52,079
necessarily the kernel can access your

1530
00:53:49,760 --> 00:53:55,200
memory just fine

1531
00:53:52,079 --> 00:53:57,119
the reason it may have to copy something

1532
00:53:55,199 --> 00:53:58,318
usually is because of some other

1533
00:53:57,119 --> 00:54:00,960
constraint

1534
00:53:58,318 --> 00:54:03,039
and the other constraint is something

1535
00:54:00,960 --> 00:54:05,280
like the following

1536
00:54:03,039 --> 00:54:05,279
a

1537
00:54:05,440 --> 00:54:10,079
you made a call that appears

1538
00:54:07,838 --> 00:54:12,558
instantaneous but it's actually slow

1539
00:54:10,079 --> 00:54:14,480
it's actually latent the example like we

1540
00:54:12,559 --> 00:54:16,480
gave with write like i'm going to write

1541
00:54:14,480 --> 00:54:19,119
this stuff somewhere

1542
00:54:16,480 --> 00:54:21,920
well i need the contents of the buffer

1543
00:54:19,119 --> 00:54:24,480
that you pass to write i need that to

1544
00:54:21,920 --> 00:54:26,240
remain valid until

1545
00:54:24,480 --> 00:54:27,760
you actually

1546
00:54:26,239 --> 00:54:30,479
until the disk actually finishes

1547
00:54:27,760 --> 00:54:32,720
committing it right

1548
00:54:30,480 --> 00:54:35,440
so because i want it to appear

1549
00:54:32,719 --> 00:54:37,439
instantaneous to the user

1550
00:54:35,440 --> 00:54:38,798
i have to copy it out of that buffer

1551
00:54:37,440 --> 00:54:40,240
into something that i know will stick

1552
00:54:38,798 --> 00:54:42,239
around right

1553
00:54:40,239 --> 00:54:44,798
so that's thing one

1554
00:54:42,239 --> 00:54:46,078
thing two is the exact same thing is

1555
00:54:44,798 --> 00:54:48,719
true

1556
00:54:46,079 --> 00:54:51,200
not for the buffer but for the mapping

1557
00:54:48,719 --> 00:54:53,519
of the buffer as well so in other words

1558
00:54:51,199 --> 00:54:55,919
if the vm system

1559
00:54:53,519 --> 00:54:58,480
might wake up in the middle of this

1560
00:54:55,920 --> 00:55:00,559
right even if the user promises to not

1561
00:54:58,480 --> 00:55:02,880
change the buffer for a while if the vm

1562
00:55:00,559 --> 00:55:05,280
system might wake up and change the

1563
00:55:02,880 --> 00:55:07,599
mapping of that so that it gets mapped

1564
00:55:05,280 --> 00:55:10,640
out of that same physical page well the

1565
00:55:07,599 --> 00:55:12,960
problem there is things like the disk

1566
00:55:10,639 --> 00:55:15,199
right like like a piece of hardware

1567
00:55:12,960 --> 00:55:15,920
it doesn't go through virtual memory

1568
00:55:15,199 --> 00:55:18,480
so

1569
00:55:15,920 --> 00:55:20,400
when i translated the virtual address to

1570
00:55:18,480 --> 00:55:22,159
a physical address to pass it to the

1571
00:55:20,400 --> 00:55:25,440
disk

1572
00:55:22,159 --> 00:55:27,838
if that then gets moved or whatever

1573
00:55:25,440 --> 00:55:29,200
that whole right falls apart right now

1574
00:55:27,838 --> 00:55:31,358
it's going to write some other thing

1575
00:55:29,199 --> 00:55:33,519
from that same physical rampage that

1576
00:55:31,358 --> 00:55:35,519
means something else right

1577
00:55:33,519 --> 00:55:37,519
so typically the reason that the copies

1578
00:55:35,519 --> 00:55:38,798
happen is not because the kernel

1579
00:55:37,519 --> 00:55:40,480
couldn't just read your memory the

1580
00:55:38,798 --> 00:55:42,000
colonel can read any memory it wants

1581
00:55:40,480 --> 00:55:44,000
right

1582
00:55:42,000 --> 00:55:46,239
the problem is actually that the kernel

1583
00:55:44,000 --> 00:55:48,480
usually is trying to pretend that

1584
00:55:46,239 --> 00:55:51,358
something is instantaneous that's not

1585
00:55:48,480 --> 00:55:53,358
and the consequences for that um are

1586
00:55:51,358 --> 00:55:55,598
that it has to do a copy to put it

1587
00:55:53,358 --> 00:55:56,960
somewhere that's okay right now there's

1588
00:55:55,599 --> 00:55:58,720
other reasons for the copy too like i

1589
00:55:56,960 --> 00:56:00,639
said one is to assemble buffers that are

1590
00:55:58,719 --> 00:56:02,239
the right size for writing to things

1591
00:56:00,639 --> 00:56:03,679
like disks so somebody's asked to like

1592
00:56:02,239 --> 00:56:05,679
assemble things you can think of this as

1593
00:56:03,679 --> 00:56:06,798
very analogous to assembling cache lines

1594
00:56:05,679 --> 00:56:09,679
in a cache

1595
00:56:06,798 --> 00:56:11,519
like when a cpu a cpu can't write like a

1596
00:56:09,679 --> 00:56:13,598
byte of memory right like that doesn't

1597
00:56:11,519 --> 00:56:15,199
happen when a cpu tries to write one

1598
00:56:13,599 --> 00:56:17,519
byte of memory what actually happens is

1599
00:56:15,199 --> 00:56:19,118
that one byte gets assembled into a 64

1600
00:56:17,519 --> 00:56:20,719
byte cache line which then gets put out

1601
00:56:19,119 --> 00:56:23,358
to the cache which then gets put out to

1602
00:56:20,719 --> 00:56:25,358
main memory right

1603
00:56:23,358 --> 00:56:28,159
um so there's like these right combining

1604
00:56:25,358 --> 00:56:30,558
buffers that are there to assemble right

1605
00:56:28,159 --> 00:56:32,159
and the same happens in the os it has to

1606
00:56:30,559 --> 00:56:34,640
assemble things that are the correct

1607
00:56:32,159 --> 00:56:36,719
size for use with hardware because the

1608
00:56:34,639 --> 00:56:38,879
hardware doesn't just arbitrarily take

1609
00:56:36,719 --> 00:56:42,039
like individual byte ranges and work

1610
00:56:38,880 --> 00:56:42,039
with them

1611
00:56:45,119 --> 00:56:48,240
uh someone said uh i believe the

1612
00:56:46,639 --> 00:56:50,960
original question mentioned this but if

1613
00:56:48,239 --> 00:56:52,399
not sql what are you storing and what

1614
00:56:50,960 --> 00:56:54,960
does the interface to get that data look

1615
00:56:52,400 --> 00:56:57,519
like raw read as well key values uh yeah

1616
00:56:54,960 --> 00:56:59,280
so it's it's basically just custom coded

1617
00:56:57,519 --> 00:57:00,880
so um

1618
00:56:59,280 --> 00:57:02,640
because the server

1619
00:57:00,880 --> 00:57:04,720
so you know i mean i'm i'm an

1620
00:57:02,639 --> 00:57:06,798
architecture person i like working on

1621
00:57:04,719 --> 00:57:08,318
these kind of problems so like the last

1622
00:57:06,798 --> 00:57:10,239
thing i'm gonna do is have like a weird

1623
00:57:08,318 --> 00:57:11,599
like structured query language to do

1624
00:57:10,239 --> 00:57:12,798
stuff right like it's just going to be

1625
00:57:11,599 --> 00:57:15,359
like a nice little interface you can

1626
00:57:12,798 --> 00:57:16,559
just write raw c code that just works

1627
00:57:15,358 --> 00:57:18,639
right

1628
00:57:16,559 --> 00:57:20,400
so it's just custom whatever it needs

1629
00:57:18,639 --> 00:57:21,598
implemented it implements directly on

1630
00:57:20,400 --> 00:57:23,760
top of

1631
00:57:21,599 --> 00:57:26,640
that raw write system

1632
00:57:23,760 --> 00:57:29,520
and it's flexible right like it doesn't

1633
00:57:26,639 --> 00:57:31,679
i don't make like a procrustean sql like

1634
00:57:29,519 --> 00:57:34,400
bed for like all of my stuff to have to

1635
00:57:31,679 --> 00:57:35,838
sit on top of because you know

1636
00:57:34,400 --> 00:57:38,240
especially when you think about the fact

1637
00:57:35,838 --> 00:57:41,199
that like sql is not really meant

1638
00:57:38,239 --> 00:57:44,318
for many things it was really just meant

1639
00:57:41,199 --> 00:57:46,318
for like transaction processing right

1640
00:57:44,318 --> 00:57:47,599
and a lot of things you do on servers

1641
00:57:46,318 --> 00:57:49,599
aren't transaction processing some

1642
00:57:47,599 --> 00:57:50,400
things are like maybe the purchase

1643
00:57:49,599 --> 00:57:51,760
of

1644
00:57:50,400 --> 00:57:54,079
you know star code galaxy where you

1645
00:57:51,760 --> 00:57:55,760
retry click the buy button maybe that's

1646
00:57:54,079 --> 00:57:57,680
something that kind of looks like what

1647
00:57:55,760 --> 00:57:59,760
sql was designed for

1648
00:57:57,679 --> 00:58:02,399
but the rest of the stuff you know

1649
00:57:59,760 --> 00:58:06,480
anything else that there is really isn't

1650
00:58:02,400 --> 00:58:08,798
serving you back uh stuff to to um

1651
00:58:06,480 --> 00:58:09,920
when you try to read uh

1652
00:58:08,798 --> 00:58:11,519
stuff that's on the server like you're

1653
00:58:09,920 --> 00:58:13,280
trying to get like web server stuff to

1654
00:58:11,519 --> 00:58:15,599
you like it doesn't look like sql like

1655
00:58:13,280 --> 00:58:17,359
sql just wasn't designed for that and so

1656
00:58:15,599 --> 00:58:19,599
it's not a very it just isn't very

1657
00:58:17,358 --> 00:58:22,000
useful so the reason that people use

1658
00:58:19,599 --> 00:58:23,359
that kind of thing for for that nowadays

1659
00:58:22,000 --> 00:58:25,599
really just tends to be because it's

1660
00:58:23,358 --> 00:58:27,759
just what was there um and it's very

1661
00:58:25,599 --> 00:58:29,440
robust right because like transaction

1662
00:58:27,760 --> 00:58:31,839
processing was a very well studied

1663
00:58:29,440 --> 00:58:34,000
problem so you know you can go buy

1664
00:58:31,838 --> 00:58:36,798
something that probably won't just you

1665
00:58:34,000 --> 00:58:38,639
know light on fire and explode um but

1666
00:58:36,798 --> 00:58:41,599
it's usually not the right tool for the

1667
00:58:38,639 --> 00:58:44,558
job unless you're literally doing

1668
00:58:41,599 --> 00:58:46,240
you know like an atm machine sql server

1669
00:58:44,559 --> 00:58:48,319
or like a parts database where you have

1670
00:58:46,239 --> 00:58:50,639
to know exactly the number of screws

1671
00:58:48,318 --> 00:58:54,480
left in the inventory or whatever it's

1672
00:58:50,639 --> 00:58:54,480
just not really um

1673
00:58:55,039 --> 00:59:01,400
it's not really

1674
00:58:56,798 --> 00:59:01,400
that useful for a lot of things you do

1675
00:59:14,480 --> 00:59:21,358
uh have you looked into eb uh ebpf uh no

1676
00:59:19,519 --> 00:59:24,079
i have seen that mentioned and i even

1677
00:59:21,358 --> 00:59:25,598
looked at what it was

1678
00:59:24,079 --> 00:59:27,280
uh i thought i looked and said oh i

1679
00:59:25,599 --> 00:59:28,318
don't need to know about this is what

1680
00:59:27,280 --> 00:59:31,280
happened

1681
00:59:28,318 --> 00:59:31,279
uh but

1682
00:59:31,519 --> 00:59:35,920
maybe i'm wrong

1683
00:59:33,599 --> 00:59:35,920
uh

1684
00:59:37,199 --> 00:59:41,439
oh right this is the packet processing

1685
00:59:39,199 --> 00:59:41,439
thing

1686
00:59:42,239 --> 00:59:44,879
yes yes

1687
00:59:45,039 --> 00:59:48,558
uh no i have not looked into this i

1688
00:59:47,280 --> 00:59:51,519
don't think i care about it but i

1689
00:59:48,559 --> 00:59:53,280
haven't looked into it so i couldn't say

1690
00:59:51,519 --> 00:59:56,759
i did see it mentioned yes but no i

1691
00:59:53,280 --> 00:59:56,760
haven't i haven't

1692
01:00:07,358 --> 01:00:11,119
oh i okay windows is adding an iring

1693
01:00:09,119 --> 01:00:13,440
feature okay so i see the question is

1694
01:00:11,119 --> 01:00:15,039
why does it need

1695
01:00:13,440 --> 01:00:16,960
okay so so

1696
01:00:15,039 --> 01:00:19,519
i've read the sequel you're asking why

1697
01:00:16,960 --> 01:00:22,559
windows needs uh to add io ring if it

1698
01:00:19,519 --> 01:00:24,559
has iocp

1699
01:00:22,559 --> 01:00:27,519
um

1700
01:00:24,559 --> 01:00:30,000
i haven't looked at anything windows

1701
01:00:27,519 --> 01:00:32,318
related that looks like that so i don't

1702
01:00:30,000 --> 01:00:34,079
actually know

1703
01:00:32,318 --> 01:00:35,599
very much about

1704
01:00:34,079 --> 01:00:38,400
uh

1705
01:00:35,599 --> 01:00:40,240
what windows is planning to add for iou

1706
01:00:38,400 --> 01:00:42,400
ring

1707
01:00:40,239 --> 01:00:43,439
so i really couldn't comment what i will

1708
01:00:42,400 --> 01:00:45,358
say is

1709
01:00:43,440 --> 01:00:48,079
i o completion ports

1710
01:00:45,358 --> 01:00:50,960
are not solving the same problem

1711
01:00:48,079 --> 01:00:52,480
so i o completion ports the problem that

1712
01:00:50,960 --> 01:00:56,079
that is solving

1713
01:00:52,480 --> 01:00:57,199
is how you have multiple

1714
01:00:56,079 --> 01:01:00,960
threads

1715
01:00:57,199 --> 01:01:04,318
on the user side responding to

1716
01:01:00,960 --> 01:01:06,240
completion events from the system side

1717
01:01:04,318 --> 01:01:08,960
that is what iocp does

1718
01:01:06,239 --> 01:01:10,959
it is not designed for high bandwidth

1719
01:01:08,960 --> 01:01:12,960
outbound stuff

1720
01:01:10,960 --> 01:01:16,480
so it doesn't really have anything in

1721
01:01:12,960 --> 01:01:17,519
there designed to be a low latency

1722
01:01:16,480 --> 01:01:20,639
io

1723
01:01:17,519 --> 01:01:22,400
dispatch right

1724
01:01:20,639 --> 01:01:24,558
so at the very least you would think

1725
01:01:22,400 --> 01:01:26,720
that that would have to be there but the

1726
01:01:24,559 --> 01:01:29,359
other thing to think about

1727
01:01:26,719 --> 01:01:32,318
is that again it's still a call the

1728
01:01:29,358 --> 01:01:34,000
interface to iocp is a little clunky you

1729
01:01:32,318 --> 01:01:35,920
have to call get me all the completion

1730
01:01:34,000 --> 01:01:37,920
records and they copy them into your

1731
01:01:35,920 --> 01:01:39,680
buffer that's not really what you want

1732
01:01:37,920 --> 01:01:41,680
what you wanted was

1733
01:01:39,679 --> 01:01:43,118
a index you read without ever calling

1734
01:01:41,679 --> 01:01:45,118
the operating system and you see what it

1735
01:01:43,119 --> 01:01:46,960
is and that tells you where in your ring

1736
01:01:45,119 --> 01:01:48,559
buffer to read up through no operating

1737
01:01:46,960 --> 01:01:51,280
system involved right so again it's

1738
01:01:48,559 --> 01:01:52,480
about getting the calls out

1739
01:01:51,280 --> 01:01:53,839
this is how operating systems should

1740
01:01:52,480 --> 01:01:54,960
always have worked

1741
01:01:53,838 --> 01:01:57,358
uh

1742
01:01:54,960 --> 01:01:58,400
by about 1990 we should have started

1743
01:01:57,358 --> 01:02:00,239
moving towards operating systems where

1744
01:01:58,400 --> 01:02:02,000
this is all you did right you should

1745
01:02:00,239 --> 01:02:03,519
just write into memory and do it because

1746
01:02:02,000 --> 01:02:05,039
that's how old home computers used to

1747
01:02:03,519 --> 01:02:06,719
work right

1748
01:02:05,039 --> 01:02:08,160
um

1749
01:02:06,719 --> 01:02:09,838
you know what i'm saying

1750
01:02:08,159 --> 01:02:11,279
uh so really what you want is just

1751
01:02:09,838 --> 01:02:12,960
memory you right into that says here

1752
01:02:11,280 --> 01:02:13,920
this all the syscalls i want that's how

1753
01:02:12,960 --> 01:02:15,760
an operating system should always have

1754
01:02:13,920 --> 01:02:17,519
worked here's what this calls i want and

1755
01:02:15,760 --> 01:02:18,880
then i just look at an outbound queue to

1756
01:02:17,519 --> 01:02:20,318
see which one of those are done like

1757
01:02:18,880 --> 01:02:22,960
that's what you wanted that's what you

1758
01:02:20,318 --> 01:02:25,038
always wanted and it's what you had in a

1759
01:02:22,960 --> 01:02:26,960
certain extent to a certain extent um

1760
01:02:25,039 --> 01:02:28,079
although it was more interrupt it was

1761
01:02:26,960 --> 01:02:29,119
more like cause you know a single

1762
01:02:28,079 --> 01:02:30,318
processor so what are you gonna do

1763
01:02:29,119 --> 01:02:31,519
you're gonna interrupt and do it right

1764
01:02:30,318 --> 01:02:32,960
there but

1765
01:02:31,519 --> 01:02:35,119
what we should have moved to as we got

1766
01:02:32,960 --> 01:02:35,838
more cores was that and we didn't so you

1767
01:02:35,119 --> 01:02:38,318
know

1768
01:02:35,838 --> 01:02:40,000
somewhere in the 2000 to 2010 time frame

1769
01:02:38,318 --> 01:02:41,679
we really screwed up

1770
01:02:40,000 --> 01:02:45,480
uh and now it's just a question of like

1771
01:02:41,679 --> 01:02:45,480
trying to get back to normal

1772
01:02:48,079 --> 01:02:54,318
how do you organize the data

1773
01:02:50,318 --> 01:02:57,679
uh well that's yeah that's

1774
01:02:54,318 --> 01:02:59,519
a very very involved conversation

1775
01:02:57,679 --> 01:03:01,358
um

1776
01:02:59,519 --> 01:03:02,880
it would not make very much sense to

1777
01:03:01,358 --> 01:03:06,880
anyone other than me as i guess i would

1778
01:03:02,880 --> 01:03:06,880
say about how i organize the data

1779
01:03:13,599 --> 01:03:18,000
our overlap sends not going to be as

1780
01:03:15,440 --> 01:03:19,440
performant yeah i mean overlap sends

1781
01:03:18,000 --> 01:03:21,519
require

1782
01:03:19,440 --> 01:03:23,599
require you to actually call a function

1783
01:03:21,519 --> 01:03:26,798
right that function doesn't have to do a

1784
01:03:23,599 --> 01:03:28,960
syscall it could be a local call right

1785
01:03:26,798 --> 01:03:30,960
um but it's still to do something it's

1786
01:03:28,960 --> 01:03:32,318
not just rights

1787
01:03:30,960 --> 01:03:33,599
um you have to remember there's a big

1788
01:03:32,318 --> 01:03:35,679
difference between calling a function

1789
01:03:33,599 --> 01:03:36,798
and writing to memory calling a function

1790
01:03:35,679 --> 01:03:38,239
means you have to put a bunch of stuff

1791
01:03:36,798 --> 01:03:40,400
into registers

1792
01:03:38,239 --> 01:03:41,279
you have to issue the actual function

1793
01:03:40,400 --> 01:03:44,240
call

1794
01:03:41,280 --> 01:03:45,839
that function has to do some crap it has

1795
01:03:44,239 --> 01:03:47,759
to do the right you would have done

1796
01:03:45,838 --> 01:03:49,759
already and then it pops out the

1797
01:03:47,760 --> 01:03:51,039
compiler cannot optimize around it

1798
01:03:49,760 --> 01:03:53,280
because it doesn't know what that call

1799
01:03:51,039 --> 01:03:56,000
does it's a system call right it's not a

1800
01:03:53,280 --> 01:03:58,880
syscall but it is a call to a library

1801
01:03:56,000 --> 01:04:01,599
that the compiler can't see so it can't

1802
01:03:58,880 --> 01:04:03,039
do a bunch of optimizations if you're

1803
01:04:01,599 --> 01:04:05,519
talking about something where you just

1804
01:04:03,039 --> 01:04:07,599
know there's a flat memory

1805
01:04:05,519 --> 01:04:09,440
you know the format you need to write to

1806
01:04:07,599 --> 01:04:11,680
you can write code that blasts that in

1807
01:04:09,440 --> 01:04:13,519
there really quickly and the optimizer

1808
01:04:11,679 --> 01:04:15,598
can optimize straight over it everything

1809
01:04:13,519 --> 01:04:17,519
just works there's no call involved none

1810
01:04:15,599 --> 01:04:20,000
of that right

1811
01:04:17,519 --> 01:04:21,679
um and so you know again i don't know

1812
01:04:20,000 --> 01:04:23,599
the details of the windows one i can't

1813
01:04:21,679 --> 01:04:24,960
really say but i just want to point out

1814
01:04:23,599 --> 01:04:26,559
what the differences are there there's a

1815
01:04:24,960 --> 01:04:28,159
big difference between calling functions

1816
01:04:26,559 --> 01:04:31,680
to do stuff

1817
01:04:28,159 --> 01:04:33,279
um and just writing to memory

1818
01:04:31,679 --> 01:04:35,038
writing to memory is always a superior

1819
01:04:33,280 --> 01:04:36,480
option

1820
01:04:35,039 --> 01:04:38,400
john disagrees with me about this by the

1821
01:04:36,480 --> 01:04:39,679
way i don't know if he's still here

1822
01:04:38,400 --> 01:04:42,480
um

1823
01:04:39,679 --> 01:04:45,038
but but we had this argument once

1824
01:04:42,480 --> 01:04:46,480
and and he didn't believe me

1825
01:04:45,039 --> 01:04:47,280
so

1826
01:04:46,480 --> 01:04:49,358
uh

1827
01:04:47,280 --> 01:04:51,760
so you could you could argue with him

1828
01:04:49,358 --> 01:04:54,318
about that because i was like

1829
01:04:51,760 --> 01:04:55,520
you never call functions

1830
01:04:54,318 --> 01:04:56,239
to

1831
01:04:55,519 --> 01:04:58,798
to

1832
01:04:56,239 --> 01:05:00,719
prepare stuff to send to to the os like

1833
01:04:58,798 --> 01:05:03,038
that's not what you want what you want

1834
01:05:00,719 --> 01:05:03,919
is just you write flat memory

1835
01:05:03,039 --> 01:05:06,000
out

1836
01:05:03,920 --> 01:05:09,039
and the os picks it up

1837
01:05:06,000 --> 01:05:10,559
out of a queue right um

1838
01:05:09,039 --> 01:05:12,000
but john was like no you should have a

1839
01:05:10,559 --> 01:05:14,160
function that you call and then that

1840
01:05:12,000 --> 01:05:16,559
thing just does

1841
01:05:14,159 --> 01:05:18,960
the whatever the format stuff is that

1842
01:05:16,559 --> 01:05:20,319
needs to happen there right

1843
01:05:18,960 --> 01:05:23,039
um

1844
01:05:20,318 --> 01:05:24,880
and

1845
01:05:23,039 --> 01:05:27,039
i mean i guess one thing i would say is

1846
01:05:24,880 --> 01:05:29,358
it's probably the case that you could

1847
01:05:27,039 --> 01:05:31,039
find reasons why you would do one or the

1848
01:05:29,358 --> 01:05:32,000
other so it's not like there's a right

1849
01:05:31,039 --> 01:05:33,920
answer

1850
01:05:32,000 --> 01:05:36,599
but for me i always go the other way i'm

1851
01:05:33,920 --> 01:05:39,670
like no you just write everything right

1852
01:05:36,599 --> 01:05:39,670
[Music]

1853
01:05:42,079 --> 01:05:46,960
i would be totally fine yeah with an api

1854
01:05:44,000 --> 01:05:48,798
that it was just both ways yeah uh

1855
01:05:46,960 --> 01:05:50,960
because then it's like look if you can

1856
01:05:48,798 --> 01:05:52,480
if you can make

1857
01:05:50,960 --> 01:05:54,159
uh

1858
01:05:52,480 --> 01:05:55,679
performance gains by just going the

1859
01:05:54,159 --> 01:05:57,038
memory route then do so if you just

1860
01:05:55,679 --> 01:05:58,480
don't care

1861
01:05:57,039 --> 01:06:00,480
about that very much and you want to

1862
01:05:58,480 --> 01:06:01,358
make sure that you know it just does it

1863
01:06:00,480 --> 01:06:02,960
the way

1864
01:06:01,358 --> 01:06:04,480
you know it thinks it's best you just

1865
01:06:02,960 --> 01:06:06,318
call this function and it will do it for

1866
01:06:04,480 --> 01:06:08,719
you that totally seems fine too yeah

1867
01:06:06,318 --> 01:06:10,000
absolutely

1868
01:06:08,719 --> 01:06:11,279
i just always want the memory one

1869
01:06:10,000 --> 01:06:13,119
available because that's what i would

1870
01:06:11,280 --> 01:06:14,798
usually use

1871
01:06:13,119 --> 01:06:17,200
i think it also reduces dependency like

1872
01:06:14,798 --> 01:06:18,480
now i don't need that function right i

1873
01:06:17,199 --> 01:06:19,519
know that i can just make this flat

1874
01:06:18,480 --> 01:06:20,559
memory

1875
01:06:19,519 --> 01:06:22,480
it just it just i feel like it

1876
01:06:20,559 --> 01:06:23,200
simplifies my life a little bit as well

1877
01:06:22,480 --> 01:06:25,039
but

1878
01:06:23,199 --> 01:06:26,960
yeah

1879
01:06:25,039 --> 01:06:29,760
um

1880
01:06:26,960 --> 01:06:31,199
either way the idea here is just that

1881
01:06:29,760 --> 01:06:32,720
the ring structure is much more

1882
01:06:31,199 --> 01:06:34,639
efficient so even if you're going

1883
01:06:32,719 --> 01:06:36,399
through a function to do it

1884
01:06:34,639 --> 01:06:37,920
um

1885
01:06:36,400 --> 01:06:39,838
it's just going to be that ring on the

1886
01:06:37,920 --> 01:06:41,440
other side of that function anyway right

1887
01:06:39,838 --> 01:06:42,719
so that's might be why the windows

1888
01:06:41,440 --> 01:06:44,079
people are doing it maybe they already

1889
01:06:42,719 --> 01:06:47,838
have that ring is happening they're just

1890
01:06:44,079 --> 01:06:47,839
like let's just expose it right

1891
01:06:59,920 --> 01:07:02,880
do you have any tips in general on how

1892
01:07:01,440 --> 01:07:06,079
to go about reading and understanding

1893
01:07:02,880 --> 01:07:07,760
old large code repositories uh yes sir

1894
01:07:06,079 --> 01:07:09,200
uh get them building and step through in

1895
01:07:07,760 --> 01:07:11,599
the debugger

1896
01:07:09,199 --> 01:07:13,118
that's how i do it

1897
01:07:11,599 --> 01:07:15,599
um

1898
01:07:13,119 --> 01:07:17,920
let the debugger walk you through how

1899
01:07:15,599 --> 01:07:20,160
the code's working it's way easier uh in

1900
01:07:17,920 --> 01:07:22,240
my opinion do it that way

1901
01:07:20,159 --> 01:07:23,118
get a good debugger and and step through

1902
01:07:22,239 --> 01:07:26,118
it

1903
01:07:23,119 --> 01:07:26,119
yeah

1904
01:07:31,760 --> 01:07:34,799
john says i think the actual big

1905
01:07:33,358 --> 01:07:36,239
frontier in software that everyone

1906
01:07:34,798 --> 01:07:37,599
ignores is we have to make ways for

1907
01:07:36,239 --> 01:07:38,879
people to do things somewhat easily

1908
01:07:37,599 --> 01:07:41,519
without making it impossible to do the

1909
01:07:38,880 --> 01:07:43,838
efficient good version i totally agree

1910
01:07:41,519 --> 01:07:43,838
um

1911
01:07:44,000 --> 01:07:47,280
i mean this is part of the whole like

1912
01:07:45,519 --> 01:07:49,838
graphics api should probably just have

1913
01:07:47,280 --> 01:07:51,519
been something on github right

1914
01:07:49,838 --> 01:07:54,558
and then the vendors just like publish

1915
01:07:51,519 --> 01:07:56,880
the damn memory thing you write you know

1916
01:07:54,559 --> 01:07:59,680
because it's like we end up with this

1917
01:07:56,880 --> 01:08:02,720
weird in-between where it's like

1918
01:07:59,679 --> 01:08:04,318
you end up with something like

1919
01:08:02,719 --> 01:08:06,399
like really

1920
01:08:04,318 --> 01:08:07,358
messed up like vulcan

1921
01:08:06,400 --> 01:08:10,559
or

1922
01:08:07,358 --> 01:08:12,558
whatever where it's like it's like half

1923
01:08:10,559 --> 01:08:14,400
a raw memory api

1924
01:08:12,559 --> 01:08:17,838
but half a like

1925
01:08:14,400 --> 01:08:20,000
user api that's supposed to be doing

1926
01:08:17,838 --> 01:08:22,000
like we end up in these really weird

1927
01:08:20,000 --> 01:08:22,880
zones of like

1928
01:08:22,000 --> 01:08:24,640
that

1929
01:08:22,880 --> 01:08:26,960
or

1930
01:08:24,640 --> 01:08:28,719
the total ridiculous thing of like no

1931
01:08:26,960 --> 01:08:30,640
thought was given to the efficiency and

1932
01:08:28,719 --> 01:08:32,640
it's just like some it's like qt or

1933
01:08:30,640 --> 01:08:33,920
something you're just like oh my god

1934
01:08:32,640 --> 01:08:36,159
right

1935
01:08:33,920 --> 01:08:36,158
um

1936
01:08:36,399 --> 01:08:40,479
so yeah it's it's bad like like it would

1937
01:08:38,719 --> 01:08:42,319
be nice if we just said like we're

1938
01:08:40,479 --> 01:08:43,919
always gonna have a really clean

1939
01:08:42,319 --> 01:08:44,960
low-level thing where you just write to

1940
01:08:43,920 --> 01:08:46,480
memory

1941
01:08:44,960 --> 01:08:47,920
and you don't ever call anything

1942
01:08:46,479 --> 01:08:49,439
basically

1943
01:08:47,920 --> 01:08:52,480
and it works

1944
01:08:49,439 --> 01:08:54,000
but you have to be a pro to do it and

1945
01:08:52,479 --> 01:08:55,759
then if you want

1946
01:08:54,000 --> 01:08:57,520
go to this github

1947
01:08:55,759 --> 01:09:00,479
and get these libraries that will do

1948
01:08:57,520 --> 01:09:02,480
that for you and you call those

1949
01:09:00,479 --> 01:09:04,158
but they use the good thing underneath

1950
01:09:02,479 --> 01:09:06,158
that like anyone could use so you don't

1951
01:09:04,158 --> 01:09:07,278
have to use the library if it sucks or

1952
01:09:06,158 --> 01:09:08,879
whatever

1953
01:09:07,279 --> 01:09:11,199
it would be nice to get somewhere more

1954
01:09:08,880 --> 01:09:13,520
like that instead of like

1955
01:09:11,198 --> 01:09:14,798
sh they ship both things like we have

1956
01:09:13,520 --> 01:09:16,560
something that's supposed to be sort of

1957
01:09:14,798 --> 01:09:18,319
easy to use but also sort of performant

1958
01:09:16,560 --> 01:09:19,359
and it ends up being neither

1959
01:09:18,319 --> 01:09:21,520
right

1960
01:09:19,359 --> 01:09:23,199
um or they ship it and they know it's

1961
01:09:21,520 --> 01:09:24,719
not performant but there's some lie

1962
01:09:23,198 --> 01:09:27,198
about how it's gonna get performant and

1963
01:09:24,719 --> 01:09:28,000
it never does right

1964
01:09:27,198 --> 01:09:30,318
um

1965
01:09:28,000 --> 01:09:32,238
kind of like the c plus plus optimizer

1966
01:09:30,319 --> 01:09:33,520
like it's it's always like the optimizer

1967
01:09:32,238 --> 01:09:34,798
like it's gonna get better and then all

1968
01:09:33,520 --> 01:09:37,120
these problems are gonna go away and

1969
01:09:34,798 --> 01:09:39,039
then like it never does right so you

1970
01:09:37,119 --> 01:09:40,798
have these weird like vague promises

1971
01:09:39,039 --> 01:09:46,039
about why this will eventually be good

1972
01:09:40,798 --> 01:09:46,039
it's like well no like it probably won't

1973
01:09:56,399 --> 01:10:00,000
are you doing sort of check sums or

1974
01:09:57,760 --> 01:10:01,199
parity codes on disk rights

1975
01:10:00,000 --> 01:10:02,800
absolutely

1976
01:10:01,198 --> 01:10:03,839
um

1977
01:10:02,800 --> 01:10:06,480
so

1978
01:10:03,840 --> 01:10:08,079
when you write out data

1979
01:10:06,479 --> 01:10:10,000
uh you pretty much always want to hash

1980
01:10:08,079 --> 01:10:13,279
it right

1981
01:10:10,000 --> 01:10:16,079
i you really really want to know

1982
01:10:13,279 --> 01:10:16,880
if the data that you wrote out comes

1983
01:10:16,079 --> 01:10:18,158
back

1984
01:10:16,880 --> 01:10:22,319
the same

1985
01:10:18,158 --> 01:10:24,319
uh so so absolutely yeah i i stor i

1986
01:10:22,319 --> 01:10:26,559
start redundantly and i hash it so i

1987
01:10:24,319 --> 01:10:29,840
know uh when one of the redundant

1988
01:10:26,560 --> 01:10:29,840
versions is is bunk

1989
01:10:39,279 --> 01:10:43,920
yeah the ebpf stuff i don't know uh one

1990
01:10:42,000 --> 01:10:45,039
bit brain i just it just looked like i

1991
01:10:43,920 --> 01:10:46,158
was like i don't know if i care about

1992
01:10:45,039 --> 01:10:48,319
this because it just looked like

1993
01:10:46,158 --> 01:10:49,759
possibly a bad idea but you know i don't

1994
01:10:48,319 --> 01:10:53,439
know maybe it's great

1995
01:10:49,760 --> 01:10:55,280
it is true that in that space you often

1996
01:10:53,439 --> 01:10:57,039
have ridiculous stuff like

1997
01:10:55,279 --> 01:10:59,119
microcontrollers designed to do packet

1998
01:10:57,039 --> 01:11:00,880
filtering and they all have their own

1999
01:10:59,119 --> 01:11:02,640
like little like language thing and

2000
01:11:00,880 --> 01:11:04,880
whatever so like maybe it's good to just

2001
01:11:02,640 --> 01:11:07,280
standardize that i just i don't know

2002
01:11:04,880 --> 01:11:10,079
like the linux kernel is kind of going

2003
01:11:07,279 --> 01:11:12,158
off the deep end these days so i i'm

2004
01:11:10,079 --> 01:11:13,600
i don't know

2005
01:11:12,158 --> 01:11:15,119
i feel like they've piled too much

2006
01:11:13,600 --> 01:11:17,199
complexity in there and it's not a good

2007
01:11:15,119 --> 01:11:20,158
thing like that's not going to be good

2008
01:11:17,198 --> 01:11:20,158
down the line right

2009
01:11:20,479 --> 01:11:23,919
uh 3dfx glide is it was just open gel

2010
01:11:23,039 --> 01:11:26,800
really

2011
01:11:23,920 --> 01:11:29,279
3dfx slide is is not

2012
01:11:26,800 --> 01:11:30,880
it is just

2013
01:11:29,279 --> 01:11:32,479
pretty much just opengl it was it's

2014
01:11:30,880 --> 01:11:34,719
slightly different

2015
01:11:32,479 --> 01:11:34,718
but

2016
01:11:38,000 --> 01:11:41,198
but like if you could program opengl you

2017
01:11:39,760 --> 01:11:42,560
could just program glide right now like

2018
01:11:41,198 --> 01:11:44,079
you you would barely know the difference

2019
01:11:42,560 --> 01:11:46,480
i think

2020
01:11:44,079 --> 01:11:47,679
it was opengl back in the day though so

2021
01:11:46,479 --> 01:11:49,198
we're not talking about like modern over

2022
01:11:47,679 --> 01:11:50,719
gel we're talking about opengl where you

2023
01:11:49,198 --> 01:11:52,000
called like gl vertex for every vertex

2024
01:11:50,719 --> 01:11:55,800
kind of thing

2025
01:11:52,000 --> 01:11:55,800
that's what glide was like

2026
01:11:58,238 --> 01:12:00,479
yeah

2027
01:12:00,880 --> 01:12:03,279
all right

2028
01:12:03,600 --> 01:12:06,320
i should mention

2029
01:12:06,960 --> 01:12:11,840
so how are we doing here 8 27 got about

2030
01:12:09,520 --> 01:12:15,199
30 minutes left

2031
01:12:11,840 --> 01:12:15,199
so we could do some more questions

2032
01:12:16,238 --> 01:12:20,238
here in this programming anime

2033
01:12:19,119 --> 01:12:21,279
by the way i don't know if you guys got

2034
01:12:20,238 --> 01:12:23,599
to see it

2035
01:12:21,279 --> 01:12:25,599
i've got the book one comic book here it

2036
01:12:23,600 --> 01:12:27,360
looks pretty awesome

2037
01:12:25,600 --> 01:12:29,199
so if you're interested in checking out

2038
01:12:27,359 --> 01:12:30,399
the kickstarter for book 2

2039
01:12:29,198 --> 01:12:32,960
you should definitely do that i tried to

2040
01:12:30,399 --> 01:12:34,399
put a link at the bottom

2041
01:12:32,960 --> 01:12:36,079
i love the print job that they did on

2042
01:12:34,399 --> 01:12:37,839
this thing as i said before it's it's

2043
01:12:36,079 --> 01:12:39,279
really kind of awesome

2044
01:12:37,840 --> 01:12:41,039
if anyone out there is an artist who

2045
01:12:39,279 --> 01:12:42,800
wants to print a comic book you should

2046
01:12:41,039 --> 01:12:44,079
totally use this printer because they're

2047
01:12:42,800 --> 01:12:46,560
that good

2048
01:12:44,079 --> 01:12:48,559
uh it was really educational they just

2049
01:12:46,560 --> 01:12:51,520
have like such good like it just came

2050
01:12:48,560 --> 01:12:53,920
out so good and uh they even did the

2051
01:12:51,520 --> 01:12:56,239
spot uv on the front

2052
01:12:53,920 --> 01:12:57,119
just looks really good

2053
01:12:56,238 --> 01:12:58,718
anyway

2054
01:12:57,119 --> 01:13:00,479
uh yeah

2055
01:12:58,719 --> 01:13:01,760
check out our kickstarter if you don't

2056
01:13:00,479 --> 01:13:03,519
have questions

2057
01:13:01,760 --> 01:13:06,400
the link should be in the bottom but

2058
01:13:03,520 --> 01:13:06,400
i'll post it now

2059
01:13:08,479 --> 01:13:14,519
yeah let me see if i can get it to focus

2060
01:13:10,479 --> 01:13:14,519
uh here you go

2061
01:13:20,158 --> 01:13:23,519
i have the contrast turned way down so

2062
01:13:22,158 --> 01:13:25,039
you can't really see how vibrant the

2063
01:13:23,520 --> 01:13:28,640
colors are of course because that's just

2064
01:13:25,039 --> 01:13:30,880
i i don't like super vibrant webcams um

2065
01:13:28,640 --> 01:13:33,039
but it looks really good like they just

2066
01:13:30,880 --> 01:13:34,480
they're so good this printer was awesome

2067
01:13:33,039 --> 01:13:36,640
there's so many things that you don't

2068
01:13:34,479 --> 01:13:39,198
know about printing until you work with

2069
01:13:36,640 --> 01:13:41,280
a really good printer uh like to get all

2070
01:13:39,198 --> 01:13:42,399
of the stuff really crisp and the colors

2071
01:13:41,279 --> 01:13:44,719
just right

2072
01:13:42,399 --> 01:13:47,039
um

2073
01:13:44,719 --> 01:13:49,679
they are so good it looks way better

2074
01:13:47,039 --> 01:13:51,679
than most of the stuff we've got from

2075
01:13:49,679 --> 01:13:53,199
other places like we've got comics on

2076
01:13:51,679 --> 01:13:54,800
the shelf here you know

2077
01:13:53,198 --> 01:13:56,238
and a lot of them just don't look that

2078
01:13:54,800 --> 01:13:57,840
good like the colors are kind of not

2079
01:13:56,238 --> 01:13:59,678
that great and the end like there's you

2080
01:13:57,840 --> 01:14:01,360
know there's the edging is not perfect

2081
01:13:59,679 --> 01:14:02,158
or it's a little bit blurry or whatever

2082
01:14:01,359 --> 01:14:04,960
right

2083
01:14:02,158 --> 01:14:07,198
um and this place was just awesome they

2084
01:14:04,960 --> 01:14:10,239
were so good they're here in seattle too

2085
01:14:07,198 --> 01:14:11,599
they're like local it was awesome

2086
01:14:10,238 --> 01:14:12,718
but anyway yeah

2087
01:14:11,600 --> 01:14:14,079
if you don't have book one the

2088
01:14:12,719 --> 01:14:16,480
kickstarter for book two you can get

2089
01:14:14,079 --> 01:14:18,079
book one too so check it out if you want

2090
01:14:16,479 --> 01:14:19,279
a good if you want a good feline space

2091
01:14:18,079 --> 01:14:20,800
opera

2092
01:14:19,279 --> 01:14:22,399
uh

2093
01:14:20,800 --> 01:14:26,320
you know

2094
01:14:22,399 --> 01:14:26,319
you you would be hard pressed to find

2095
01:14:26,560 --> 01:14:29,840
a better comic than me on the infinite

2096
01:14:30,719 --> 01:14:33,920
so we need some more questions here

2097
01:14:34,079 --> 01:14:37,279
besides all the horrors you've seen in

2098
01:14:35,520 --> 01:14:38,719
regards to getting desired hardware

2099
01:14:37,279 --> 01:14:40,079
performance in your server work what

2100
01:14:38,719 --> 01:14:41,439
have you found

2101
01:14:40,079 --> 01:14:43,840
on this endeavor that's been pretty

2102
01:14:41,439 --> 01:14:43,839
interesting

2103
01:14:46,079 --> 01:14:49,119
i mean it really depends on what you're

2104
01:14:47,920 --> 01:14:50,960
talking about

2105
01:14:49,119 --> 01:14:54,479
um

2106
01:14:50,960 --> 01:14:55,279
i guess i would say uh programming wise

2107
01:14:54,479 --> 01:15:00,158
i

2108
01:14:55,279 --> 01:15:01,759
think i was pleasantly surprised by wasm

2109
01:15:00,158 --> 01:15:05,039
um

2110
01:15:01,760 --> 01:15:06,079
the webassembly spec

2111
01:15:05,039 --> 01:15:07,920
it's not

2112
01:15:06,079 --> 01:15:09,198
what i would want

2113
01:15:07,920 --> 01:15:11,199
exactly

2114
01:15:09,198 --> 01:15:13,839
but it was

2115
01:15:11,198 --> 01:15:16,319
they it's like fairly simple like they

2116
01:15:13,840 --> 01:15:19,199
were like look we're just gonna have

2117
01:15:16,319 --> 01:15:20,799
a few instructions they fit on like one

2118
01:15:19,198 --> 01:15:22,639
simple html page like here's all the

2119
01:15:20,800 --> 01:15:25,039
instructions that they're gonna be we're

2120
01:15:22,640 --> 01:15:26,960
just gonna compile c to it there's no

2121
01:15:25,039 --> 01:15:29,359
like all the m script and stuff and all

2122
01:15:26,960 --> 01:15:31,600
that stuff is garbage and stupid but the

2123
01:15:29,359 --> 01:15:33,439
actual just hey i can put together a

2124
01:15:31,600 --> 01:15:36,719
little assembly language and i can send

2125
01:15:33,439 --> 01:15:38,399
it to the browser and it works

2126
01:15:36,719 --> 01:15:40,480
i was pleasantly surprised

2127
01:15:38,399 --> 01:15:42,960
because everything else i've ever seen

2128
01:15:40,479 --> 01:15:45,039
from the w3c is like the exact opposite

2129
01:15:42,960 --> 01:15:47,119
of that right

2130
01:15:45,039 --> 01:15:49,920
it's like

2131
01:15:47,119 --> 01:15:51,840
thousands of pages to implement a simple

2132
01:15:49,920 --> 01:15:54,158
layout language that doesn't really work

2133
01:15:51,840 --> 01:15:56,159
right like css or something right

2134
01:15:54,158 --> 01:15:57,439
so like i feel like the people who did

2135
01:15:56,158 --> 01:15:59,279
wasm

2136
01:15:57,439 --> 01:16:02,000
manage to avoid

2137
01:15:59,279 --> 01:16:04,559
the thing that all the other w3c specs

2138
01:16:02,000 --> 01:16:07,920
do which is end up with

2139
01:16:04,560 --> 01:16:10,080
gigantic piles of api

2140
01:16:07,920 --> 01:16:11,039
and then they still don't freaking work

2141
01:16:10,079 --> 01:16:14,319
right

2142
01:16:11,039 --> 01:16:16,800
um the wasm stuff like kind of works

2143
01:16:14,319 --> 01:16:19,198
like it kind of works and it's kind of

2144
01:16:16,800 --> 01:16:22,000
simple it's it's by far the best thing

2145
01:16:19,198 --> 01:16:24,559
i've seen out of the w3c

2146
01:16:22,000 --> 01:16:27,039
i wish the mem they had there's a

2147
01:16:24,560 --> 01:16:29,120
there's a little bit

2148
01:16:27,039 --> 01:16:30,880
so they haven't really figured out good

2149
01:16:29,119 --> 01:16:32,880
answers to like how you get memory

2150
01:16:30,880 --> 01:16:34,560
working exactly right

2151
01:16:32,880 --> 01:16:36,800
and that's unfortunate

2152
01:16:34,560 --> 01:16:38,159
the single 32-bit address space thing

2153
01:16:36,800 --> 01:16:39,600
that they do

2154
01:16:38,158 --> 01:16:42,639
has

2155
01:16:39,600 --> 01:16:44,400
it really limits

2156
01:16:42,640 --> 01:16:49,159
what the code can do in terms of

2157
01:16:44,399 --> 01:16:49,158
efficiency like that's that's not good

2158
01:16:52,000 --> 01:16:54,800
i would really have liked it if they

2159
01:16:53,439 --> 01:16:57,519
would have tackled that head-on and

2160
01:16:54,800 --> 01:16:58,719
appreciated the importance of the mmu

2161
01:16:57,520 --> 01:16:59,520
okay

2162
01:16:58,719 --> 01:17:02,000
but

2163
01:16:59,520 --> 01:17:03,440
that said i'm just talking i'm not

2164
01:17:02,000 --> 01:17:05,359
talking about this compared to the

2165
01:17:03,439 --> 01:17:08,000
ultimate thing i'm just talking about

2166
01:17:05,359 --> 01:17:09,439
this compared to everything else that is

2167
01:17:08,000 --> 01:17:12,640
in your browser

2168
01:17:09,439 --> 01:17:13,919
this was surprisingly good to me right

2169
01:17:12,640 --> 01:17:16,800
because everything else is in the

2170
01:17:13,920 --> 01:17:19,359
browser is nowhere near usable

2171
01:17:16,800 --> 01:17:21,360
right it's not like with wasm i'd be

2172
01:17:19,359 --> 01:17:23,119
like okay here's the here's the things i

2173
01:17:21,359 --> 01:17:25,198
think maybe we could do better here

2174
01:17:23,119 --> 01:17:26,399
right

2175
01:17:25,198 --> 01:17:28,238
the the thing you could do better with

2176
01:17:26,399 --> 01:17:29,679
css is throw it away right right it's

2177
01:17:28,238 --> 01:17:31,198
complete garbage there's nothing good

2178
01:17:29,679 --> 01:17:33,279
about it i have nothing positive to say

2179
01:17:31,198 --> 01:17:35,198
right so if you take a look at the

2180
01:17:33,279 --> 01:17:36,559
difference between something like css

2181
01:17:35,198 --> 01:17:39,198
and something like wasm i just think

2182
01:17:36,560 --> 01:17:41,920
they deserve some credit for

2183
01:17:39,198 --> 01:17:44,960
not doing the thing that they always do

2184
01:17:41,920 --> 01:17:47,279
so the people who did wasm i i really

2185
01:17:44,960 --> 01:17:49,198
like the fact that they stayed out of

2186
01:17:47,279 --> 01:17:51,039
some of these disasters

2187
01:17:49,198 --> 01:17:52,960
disastrous traps that all the other web

2188
01:17:51,039 --> 01:17:54,560
tech has gone down and so that was

2189
01:17:52,960 --> 01:17:56,480
pleasant

2190
01:17:54,560 --> 01:17:58,640
it was really freaking easy

2191
01:17:56,479 --> 01:18:01,839
to get my wasm stuff working

2192
01:17:58,640 --> 01:18:03,679
as a thing to ship for our client code

2193
01:18:01,840 --> 01:18:06,159
the compatibility may not be fabulous

2194
01:18:03,679 --> 01:18:08,158
yet so you know

2195
01:18:06,158 --> 01:18:10,238
we'll see about that

2196
01:18:08,158 --> 01:18:12,238
but i'm just saying it's off to a much

2197
01:18:10,238 --> 01:18:13,439
better start right it's off to a much

2198
01:18:12,238 --> 01:18:14,479
better start than these other things

2199
01:18:13,439 --> 01:18:18,000
where you just look at them and you just

2200
01:18:14,479 --> 01:18:18,000
go like oh my god you know

2201
01:18:19,359 --> 01:18:22,158
what are your thoughts on cpu side

2202
01:18:20,719 --> 01:18:23,679
channel attack mitigation seriously

2203
01:18:22,158 --> 01:18:26,238
affected the performance of memory

2204
01:18:23,679 --> 01:18:28,158
mapped files and io in general do you

2205
01:18:26,238 --> 01:18:30,238
think the api should have a way to opt

2206
01:18:28,158 --> 01:18:31,839
out of that i've seen 2 to 8x

2207
01:18:30,238 --> 01:18:32,879
performance loss in my code because of

2208
01:18:31,840 --> 01:18:36,640
this

2209
01:18:32,880 --> 01:18:40,319
wow really 2 to 8x performance

2210
01:18:36,640 --> 01:18:42,079
that's crazy um

2211
01:18:40,319 --> 01:18:43,840
so i guess what i would say is i don't

2212
01:18:42,079 --> 01:18:48,000
have a lot of experience with it

2213
01:18:43,840 --> 01:18:49,760
um thus far i have not had the uh

2214
01:18:48,000 --> 01:18:50,880
i've never had the experience of finding

2215
01:18:49,760 --> 01:18:51,920
out that the reason that my code was

2216
01:18:50,880 --> 01:18:54,159
running slow is because of a side

2217
01:18:51,920 --> 01:18:56,480
channel attack mitigation

2218
01:18:54,158 --> 01:18:56,479
um

2219
01:18:57,920 --> 01:19:01,279
so i'm i

2220
01:18:59,520 --> 01:19:03,440
have nothing to add

2221
01:19:01,279 --> 01:19:06,079
i do think that being able to opt out of

2222
01:19:03,439 --> 01:19:08,719
them would be a good idea uh the reason

2223
01:19:06,079 --> 01:19:10,158
for that is just that

2224
01:19:08,719 --> 01:19:13,039
if you're running a dedicated server

2225
01:19:10,158 --> 01:19:14,639
there is no side channel attack right

2226
01:19:13,039 --> 01:19:17,600
um nobody is running code on your

2227
01:19:14,640 --> 01:19:20,640
machine just you so no one can do

2228
01:19:17,600 --> 01:19:23,600
spectre no one can do meltdown

2229
01:19:20,640 --> 01:19:25,039
no one can do row hammer right

2230
01:19:23,600 --> 01:19:26,880
and the only way anyone's ever going to

2231
01:19:25,039 --> 01:19:28,399
mount an attack like that

2232
01:19:26,880 --> 01:19:30,159
would be if they found some really good

2233
01:19:28,399 --> 01:19:32,079
exploits about how to get your code to

2234
01:19:30,158 --> 01:19:33,599
issue the attack on itself

2235
01:19:32,079 --> 01:19:35,439
and i just don't see that being very

2236
01:19:33,600 --> 01:19:37,039
plausible there are plenty of side

2237
01:19:35,439 --> 01:19:38,399
channel attacks that work on servers but

2238
01:19:37,039 --> 01:19:39,198
they're usually side channel attacks

2239
01:19:38,399 --> 01:19:41,439
like

2240
01:19:39,198 --> 01:19:43,439
leakage about how much time something

2241
01:19:41,439 --> 01:19:45,198
takes right

2242
01:19:43,439 --> 01:19:46,960
they don't tend to be

2243
01:19:45,198 --> 01:19:49,279
uh

2244
01:19:46,960 --> 01:19:52,079
to the like time like actual wall clock

2245
01:19:49,279 --> 01:19:54,800
time um they don't tend to be down to

2246
01:19:52,079 --> 01:19:57,359
the kind of like cycle accurate sort of

2247
01:19:54,800 --> 01:20:00,239
stuff you probably have to do

2248
01:19:57,359 --> 01:20:02,319
um for side channel stuff and also they

2249
01:20:00,238 --> 01:20:03,678
wouldn't be like

2250
01:20:02,319 --> 01:20:04,960
nothing is going through a ring

2251
01:20:03,679 --> 01:20:06,719
transition so that like i'm not sure

2252
01:20:04,960 --> 01:20:09,039
where the side channel part comes in

2253
01:20:06,719 --> 01:20:10,319
right so you pretty much have to defend

2254
01:20:09,039 --> 01:20:12,560
against those things already when you're

2255
01:20:10,319 --> 01:20:13,840
writing a server uh because of the user

2256
01:20:12,560 --> 01:20:15,840
space pro

2257
01:20:13,840 --> 01:20:17,760
attack as well that happens there so i'm

2258
01:20:15,840 --> 01:20:19,360
pretty sure it's just not an issue so it

2259
01:20:17,760 --> 01:20:20,560
would be nice to disable some of those

2260
01:20:19,359 --> 01:20:22,158
because they're really just not an issue

2261
01:20:20,560 --> 01:20:24,480
for servers

2262
01:20:22,158 --> 01:20:27,599
um that aren't running other people's

2263
01:20:24,479 --> 01:20:27,599
code you know

2264
01:20:28,238 --> 01:20:33,559
but you know who knows i don't know

2265
01:20:41,600 --> 01:20:45,360
what's the thing you're most excited for

2266
01:20:43,359 --> 01:20:47,039
or proud of you've been working on in

2267
01:20:45,359 --> 01:20:48,339
the last 12 months like the most

2268
01:20:47,039 --> 01:20:51,600
positive thing

2269
01:20:48,340 --> 01:20:51,600
[Music]

2270
01:20:58,238 --> 01:21:02,638
i guess there's two things i don't know

2271
01:21:00,719 --> 01:21:04,319
i'll say two things

2272
01:21:02,639 --> 01:21:05,279
so one thing

2273
01:21:04,319 --> 01:21:06,399
is

2274
01:21:05,279 --> 01:21:08,479
the

2275
01:21:06,399 --> 01:21:10,559
the distribution algorithm

2276
01:21:08,479 --> 01:21:12,799
like like how the architecture is for

2277
01:21:10,560 --> 01:21:15,920
our server thing we're deploying for how

2278
01:21:12,800 --> 01:21:18,239
it scales right so how you

2279
01:21:15,920 --> 01:21:20,239
add more machines to it

2280
01:21:18,238 --> 01:21:21,759
um it's also thing i'm most terrified

2281
01:21:20,238 --> 01:21:22,718
about right

2282
01:21:21,760 --> 01:21:25,280
so

2283
01:21:22,719 --> 01:21:25,279
so like

2284
01:21:27,039 --> 01:21:31,039
i think i did a good architecture for

2285
01:21:28,560 --> 01:21:32,400
that solution it's a very hard problem

2286
01:21:31,039 --> 01:21:34,399
it's the hardest problem you face in

2287
01:21:32,399 --> 01:21:37,039
server design is is how do you

2288
01:21:34,399 --> 01:21:38,879
run many servers without the cost of

2289
01:21:37,039 --> 01:21:40,000
running many servers

2290
01:21:38,880 --> 01:21:42,560
without the communication between the

2291
01:21:40,000 --> 01:21:44,158
servers like you know limiting a lot of

2292
01:21:42,560 --> 01:21:47,199
the gain you get or creating bugs or

2293
01:21:44,158 --> 01:21:48,879
creating slow downs that sort of thing

2294
01:21:47,198 --> 01:21:51,519
i'm excited for how i solve that problem

2295
01:21:48,880 --> 01:21:53,440
i'm also terrified because

2296
01:21:51,520 --> 01:21:56,400
the only way you ever know if that works

2297
01:21:53,439 --> 01:21:57,759
is when you get like eight machines deep

2298
01:21:56,399 --> 01:21:59,279
because people actually liked your

2299
01:21:57,760 --> 01:22:02,719
service and you had to add more and then

2300
01:21:59,279 --> 01:22:02,719
you find out it didn't doesn't work

2301
01:22:02,880 --> 01:22:06,000
right

2302
01:22:04,479 --> 01:22:08,559
um

2303
01:22:06,000 --> 01:22:11,679
so you know uh i've been trying to war

2304
01:22:08,560 --> 01:22:13,520
game it out as best i can but there's

2305
01:22:11,679 --> 01:22:15,199
nothing that's the same as actually

2306
01:22:13,520 --> 01:22:16,880
deploying right i mean there's nothing

2307
01:22:15,198 --> 01:22:18,879
that's the same as

2308
01:22:16,880 --> 01:22:21,600
you can try to simulate all you want but

2309
01:22:18,880 --> 01:22:22,840
nothing is the same exactly the same as

2310
01:22:21,600 --> 01:22:26,000
when you actually

2311
01:22:22,840 --> 01:22:26,000
deploy so

2312
01:22:26,560 --> 01:22:31,760
you know

2313
01:22:28,238 --> 01:22:33,919
uh so there's that the other thing uh is

2314
01:22:31,760 --> 01:22:36,560
is stupid but i actually am excited

2315
01:22:33,920 --> 01:22:39,600
about it which is the star code galaxy

2316
01:22:36,560 --> 01:22:41,520
the text version

2317
01:22:39,600 --> 01:22:43,360
there there's like a

2318
01:22:41,520 --> 01:22:45,040
there's like a thing

2319
01:22:43,359 --> 01:22:48,479
at the beginning of star code galaxy the

2320
01:22:45,039 --> 01:22:50,000
first things you do is like a text

2321
01:22:48,479 --> 01:22:51,198
like it looks like a roguelike kind of

2322
01:22:50,000 --> 01:22:54,319
thing you know like like you know the

2323
01:22:51,198 --> 01:22:55,599
old school with the ascii text thing

2324
01:22:54,319 --> 01:22:57,198
and

2325
01:22:55,600 --> 01:22:58,719
i i did some stuff in that in the code

2326
01:22:57,198 --> 01:23:00,719
base there that i thought was pretty fun

2327
01:22:58,719 --> 01:23:01,920
like you know see you'll see when it

2328
01:23:00,719 --> 01:23:04,480
comes out

2329
01:23:01,920 --> 01:23:06,719
it's stupid it's not

2330
01:23:04,479 --> 01:23:08,479
it wasn't hard or interesting really but

2331
01:23:06,719 --> 01:23:10,239
it was just like oh it was kind of fun

2332
01:23:08,479 --> 01:23:11,919
you know so there's there are some fun

2333
01:23:10,238 --> 01:23:14,559
stuff in there because you know

2334
01:23:11,920 --> 01:23:16,399
i never got a chance to do uh uh one of

2335
01:23:14,560 --> 01:23:18,800
those ascii

2336
01:23:16,399 --> 01:23:21,839
dungeon things so you know it was

2337
01:23:18,800 --> 01:23:21,840
sprint entertaining

2338
01:23:27,198 --> 01:23:30,079
yeah lucid frost five to ten percent

2339
01:23:29,119 --> 01:23:31,760
sounds more like what i would have

2340
01:23:30,079 --> 01:23:33,519
expected that the two to eight times

2341
01:23:31,760 --> 01:23:35,280
just doesn't sound right are you sure

2342
01:23:33,520 --> 01:23:38,080
that's what it was it just sounds wrong

2343
01:23:35,279 --> 01:23:39,119
to me now i don't know because i don't

2344
01:23:38,079 --> 01:23:40,880
you know like i said i've never really

2345
01:23:39,119 --> 01:23:42,319
hunted down a thing like that so i'm i'm

2346
01:23:40,880 --> 01:23:44,719
not prepared to say that you're wrong

2347
01:23:42,319 --> 01:23:46,719
because you may be right you know it's

2348
01:23:44,719 --> 01:23:50,480
just 2 day 8x just doesn't sound

2349
01:23:46,719 --> 01:23:50,480
plausible for a side channel mitigation

2350
01:23:57,600 --> 01:24:01,360
is the small instruction set for wasm

2351
01:23:59,119 --> 01:24:03,439
libel to be enough x86 is a big isa and

2352
01:24:01,359 --> 01:24:04,880
i imagine much of the of that variety

2353
01:24:03,439 --> 01:24:07,039
provides value

2354
01:24:04,880 --> 01:24:07,039
so

2355
01:24:07,359 --> 01:24:11,920
i think what i would say is

2356
01:24:09,760 --> 01:24:12,960
obviously you're you're not wrong

2357
01:24:11,920 --> 01:24:14,079
uh

2358
01:24:12,960 --> 01:24:15,279
you're definitely going to lose some

2359
01:24:14,079 --> 01:24:17,760
things because you go to a smaller

2360
01:24:15,279 --> 01:24:20,399
instruction set you and x86 gets some

2361
01:24:17,760 --> 01:24:22,400
power out of being this big old beefy

2362
01:24:20,399 --> 01:24:23,599
nightmare instruction set that's kind of

2363
01:24:22,399 --> 01:24:25,198
one of the things that it gets power

2364
01:24:23,600 --> 01:24:26,639
from like having memory operands for

2365
01:24:25,198 --> 01:24:28,079
everything

2366
01:24:26,639 --> 01:24:30,000
and having these gigantic long

2367
01:24:28,079 --> 01:24:31,519
instructions to do 50 million things or

2368
01:24:30,000 --> 01:24:34,479
whatever

2369
01:24:31,520 --> 01:24:36,080
no question right

2370
01:24:34,479 --> 01:24:38,479
but you have to remember

2371
01:24:36,079 --> 01:24:41,359
not everything

2372
01:24:38,479 --> 01:24:43,439
is about taking advantage of maximum

2373
01:24:41,359 --> 01:24:44,719
performance there are

2374
01:24:43,439 --> 01:24:46,638
and

2375
01:24:44,719 --> 01:24:49,119
one of the things so it's it's important

2376
01:24:46,639 --> 01:24:49,119
distinguish

2377
01:24:51,119 --> 01:24:56,000
when i get really angry at web

2378
01:24:53,679 --> 01:24:58,639
technology it's not

2379
01:24:56,000 --> 01:25:01,679
because it's slow per se

2380
01:24:58,639 --> 01:25:02,719
meaning i'm usually not angry that web

2381
01:25:01,679 --> 01:25:05,279
stuff

2382
01:25:02,719 --> 01:25:07,359
is slow and that's the only thing it's

2383
01:25:05,279 --> 01:25:10,399
just i'm just angry about the slowness

2384
01:25:07,359 --> 01:25:12,479
what i'm angry about is it fails on all

2385
01:25:10,399 --> 01:25:15,039
fronts it's slow

2386
01:25:12,479 --> 01:25:18,879
it's buggy it doesn't actually work

2387
01:25:15,039 --> 01:25:20,479
right it's ugly it's unreliable right

2388
01:25:18,880 --> 01:25:22,480
so it's kind of like they had a problem

2389
01:25:20,479 --> 01:25:24,718
to solve many problems they could solve

2390
01:25:22,479 --> 01:25:26,879
and they solved none of them right

2391
01:25:24,719 --> 01:25:29,439
the thing i like about wasm is

2392
01:25:26,880 --> 01:25:30,719
it seems to actually solve a little bit

2393
01:25:29,439 --> 01:25:32,319
of a problem

2394
01:25:30,719 --> 01:25:34,800
is it going to be the fastest way to run

2395
01:25:32,319 --> 01:25:37,519
x86 code absolutely not

2396
01:25:34,800 --> 01:25:40,000
is it going to be relatively fast yes

2397
01:25:37,520 --> 01:25:41,920
right

2398
01:25:40,000 --> 01:25:43,840
it's relatively fast

2399
01:25:41,920 --> 01:25:45,920
it supports threads

2400
01:25:43,840 --> 01:25:48,560
it supports arbitrary addressing it just

2401
01:25:45,920 --> 01:25:50,560
can't do the full 64-bit mmu stuff which

2402
01:25:48,560 --> 01:25:53,760
is a bummer like i said

2403
01:25:50,560 --> 01:25:55,520
it has 128-bit cmd support not all the

2404
01:25:53,760 --> 01:25:57,600
instructions but a lot of them

2405
01:25:55,520 --> 01:25:59,600
right

2406
01:25:57,600 --> 01:26:01,679
and it's very simple the instruction set

2407
01:25:59,600 --> 01:26:03,120
fits on a couple pages you can read it

2408
01:26:01,679 --> 01:26:04,399
you can understand it you can look at a

2409
01:26:03,119 --> 01:26:07,198
disassembly

2410
01:26:04,399 --> 01:26:09,119
and you can see what it's doing

2411
01:26:07,198 --> 01:26:10,479
that's a success to me

2412
01:26:09,119 --> 01:26:12,960
is it

2413
01:26:10,479 --> 01:26:15,759
is it the best on any particular access

2414
01:26:12,960 --> 01:26:17,600
no is it a reasonable solution to a real

2415
01:26:15,760 --> 01:26:19,679
problem that i feel like i can use to

2416
01:26:17,600 --> 01:26:21,840
deploy something that will actually work

2417
01:26:19,679 --> 01:26:24,639
and that i won't hate and that is fast

2418
01:26:21,840 --> 01:26:26,800
enough to be usable and reasonably have

2419
01:26:24,639 --> 01:26:28,639
a good user experience yes i do think so

2420
01:26:26,800 --> 01:26:30,079
i think it might be we'll see

2421
01:26:28,639 --> 01:26:32,000
i think it might be

2422
01:26:30,079 --> 01:26:34,079
and that to me is a success coming from

2423
01:26:32,000 --> 01:26:36,639
the w3c that is a success because most

2424
01:26:34,079 --> 01:26:38,479
of their things accomplish none of those

2425
01:26:36,639 --> 01:26:40,719
they aren't fast enough to be usable

2426
01:26:38,479 --> 01:26:41,759
they aren't reliable enough to be usable

2427
01:26:40,719 --> 01:26:43,840
they aren't

2428
01:26:41,760 --> 01:26:44,880
precise or rigorous enough to be usable

2429
01:26:43,840 --> 01:26:47,760
right

2430
01:26:44,880 --> 01:26:49,520
so if wasm had tried to have like 8 000

2431
01:26:47,760 --> 01:26:50,960
instructions i think that might have

2432
01:26:49,520 --> 01:26:52,080
been a mistake

2433
01:26:50,960 --> 01:26:53,760
right

2434
01:26:52,079 --> 01:26:55,198
yes you could have gotten some more

2435
01:26:53,760 --> 01:26:57,280
performance out of it by having a richer

2436
01:26:55,198 --> 01:26:58,719
target but you lose something you lose

2437
01:26:57,279 --> 01:27:01,359
the simplicity

2438
01:26:58,719 --> 01:27:03,279
um and it makes the the transpiler

2439
01:27:01,359 --> 01:27:05,039
harder the thing that actually goes and

2440
01:27:03,279 --> 01:27:06,960
turns that into machine code that's in

2441
01:27:05,039 --> 01:27:08,800
all the browsers it makes that easier to

2442
01:27:06,960 --> 01:27:10,319
screw up it makes it more likely to

2443
01:27:08,800 --> 01:27:12,880
introduce slowness because the

2444
01:27:10,319 --> 01:27:14,238
transpiler sucked right so you have to

2445
01:27:12,880 --> 01:27:15,520
remember there's multiple things they

2446
01:27:14,238 --> 01:27:17,919
had to optimize for

2447
01:27:15,520 --> 01:27:19,280
when doing something like wasm and

2448
01:27:17,920 --> 01:27:22,239
normally that is the kind of thing that

2449
01:27:19,279 --> 01:27:23,840
w3c just completely fails at and in my

2450
01:27:22,238 --> 01:27:25,439
opinion they did not completely fail

2451
01:27:23,840 --> 01:27:28,560
this time

2452
01:27:25,439 --> 01:27:30,638
wasm is not the horror show that their

2453
01:27:28,560 --> 01:27:32,719
other specs are

2454
01:27:30,639 --> 01:27:34,480
is it as good as it could be no but

2455
01:27:32,719 --> 01:27:35,920
nothing is

2456
01:27:34,479 --> 01:27:39,359
do i hope it gets a little bit better

2457
01:27:35,920 --> 01:27:40,158
over time yes but is it an epic disaster

2458
01:27:39,359 --> 01:27:42,158
no

2459
01:27:40,158 --> 01:27:44,559
and that is something

2460
01:27:42,158 --> 01:27:46,399
however small to celebrate when it comes

2461
01:27:44,560 --> 01:27:49,400
to the web

2462
01:27:46,399 --> 01:27:49,399
right

2463
01:28:03,279 --> 01:28:05,679
i'm young dev working as a front-end

2464
01:28:04,639 --> 01:28:07,039
developer and i feel like there's not

2465
01:28:05,679 --> 01:28:08,399
much i can do to apply handmade

2466
01:28:07,039 --> 01:28:09,840
principles to regular js coding

2467
01:28:08,399 --> 01:28:11,599
day-to-day do you have any tips for

2468
01:28:09,840 --> 01:28:14,159
doing that when you have to work with

2469
01:28:11,600 --> 01:28:16,480
the standard front-end html css js stack

2470
01:28:14,158 --> 01:28:16,479
um

2471
01:28:16,800 --> 01:28:22,400
i mean yes and no what i will say is

2472
01:28:19,600 --> 01:28:23,920
that uh obviously if you can use wasm

2473
01:28:22,399 --> 01:28:25,759
well there you go you can compile c

2474
01:28:23,920 --> 01:28:26,800
right in there and run it inside your js

2475
01:28:25,760 --> 01:28:28,800
just fine

2476
01:28:26,800 --> 01:28:30,639
so that's one way to pull the escape

2477
01:28:28,800 --> 01:28:32,639
hatch

2478
01:28:30,639 --> 01:28:34,639
but

2479
01:28:32,639 --> 01:28:36,800
one thing i would say is

2480
01:28:34,639 --> 01:28:38,719
html css

2481
01:28:36,800 --> 01:28:40,960
you can program that more low level

2482
01:28:38,719 --> 01:28:42,399
right html css js you can program that

2483
01:28:40,960 --> 01:28:43,439
more low level

2484
01:28:42,399 --> 01:28:45,439
you can

2485
01:28:43,439 --> 01:28:47,839
uh instead of like using 20 000

2486
01:28:45,439 --> 01:28:49,599
frameworks and like calling like react

2487
01:28:47,840 --> 01:28:51,440
and all this stuff from js you can

2488
01:28:49,600 --> 01:28:53,120
actually think about like how do i write

2489
01:28:51,439 --> 01:28:55,198
very straightforward

2490
01:28:53,119 --> 01:28:58,639
simple javascript code that does what i

2491
01:28:55,198 --> 01:29:01,039
actually needed to do more efficiently

2492
01:28:58,639 --> 01:29:03,039
and and you will see the benefits when

2493
01:29:01,039 --> 01:29:04,560
you don't have to download this giant

2494
01:29:03,039 --> 01:29:07,279
react.js

2495
01:29:04,560 --> 01:29:09,280
like or you know framework

2496
01:29:07,279 --> 01:29:12,000
that just dumps all this crap in there

2497
01:29:09,279 --> 01:29:13,759
your pages load faster they run faster

2498
01:29:12,000 --> 01:29:14,960
they're less buggy because you can see

2499
01:29:13,760 --> 01:29:17,280
you know when you wrote it you wrote

2500
01:29:14,960 --> 01:29:19,760
exactly what needed to happen so you can

2501
01:29:17,279 --> 01:29:22,079
apply handmade principles to anything

2502
01:29:19,760 --> 01:29:24,639
it's just don't use more than you have

2503
01:29:22,079 --> 01:29:27,039
to it's really it's just being you know

2504
01:29:24,639 --> 01:29:28,400
frugal is what it is so it doesn't

2505
01:29:27,039 --> 01:29:31,119
matter what you're programming in you

2506
01:29:28,399 --> 01:29:33,119
can still cut down on the crap so if you

2507
01:29:31,119 --> 01:29:34,719
have to work on js yeah it's an annoying

2508
01:29:33,119 --> 01:29:36,559
language it sucks i mean it does

2509
01:29:34,719 --> 01:29:40,000
javascript is a terrible language

2510
01:29:36,560 --> 01:29:42,320
uh but hey i mean

2511
01:29:40,000 --> 01:29:43,679
you can still not use all these bloated

2512
01:29:42,319 --> 01:29:45,840
libraries and you can write your own

2513
01:29:43,679 --> 01:29:47,520
little custom stuff that's cleaner more

2514
01:29:45,840 --> 01:29:50,079
straightforward and more likely to work

2515
01:29:47,520 --> 01:29:51,760
and it will have uh benefits of being

2516
01:29:50,079 --> 01:29:53,439
faster because your page load times will

2517
01:29:51,760 --> 01:29:56,480
go down and your interpreter times will

2518
01:29:53,439 --> 01:29:56,479
go down right

2519
01:29:59,039 --> 01:30:01,679
that's cool that you can turn

2520
01:30:00,000 --> 01:30:04,238
mitigations off by putting mitigations

2521
01:30:01,679 --> 01:30:05,440
off in a set s config grub okay that's

2522
01:30:04,238 --> 01:30:08,158
cool

2523
01:30:05,439 --> 01:30:08,158
that's cool yeah

2524
01:30:16,238 --> 01:30:21,519
interesting mitigations for 288x on a

2525
01:30:18,319 --> 01:30:24,399
pneuma system with mcdram caches

2526
01:30:21,520 --> 01:30:26,239
on a regular desktop x8664 it's about 15

2527
01:30:24,399 --> 01:30:27,759
percent that's such a big difference

2528
01:30:26,238 --> 01:30:29,759
right

2529
01:30:27,760 --> 01:30:31,360
wow

2530
01:30:29,760 --> 01:30:34,360
yeah i've never had that experience

2531
01:30:31,359 --> 01:30:34,359
obviously

2532
01:30:45,279 --> 01:30:49,759
oh freak cs yes uh so starco galaxy is

2533
01:30:48,079 --> 01:30:51,039
coming um

2534
01:30:49,760 --> 01:30:52,159
when i get the

2535
01:30:51,039 --> 01:30:54,479
uh

2536
01:30:52,158 --> 01:30:56,638
this server system deployed

2537
01:30:54,479 --> 01:30:57,519
uh then i will be working on getting it

2538
01:30:56,639 --> 01:30:59,840
out

2539
01:30:57,520 --> 01:31:02,239
runs on top of it basically

2540
01:30:59,840 --> 01:31:04,560
uh so the the the coding course is star

2541
01:31:02,238 --> 01:31:06,238
code galaxy i sent out a mail today in

2542
01:31:04,560 --> 01:31:07,600
fact those of you who are on the circle

2543
01:31:06,238 --> 01:31:09,799
galaxy mailing list should have gotten a

2544
01:31:07,600 --> 01:31:11,679
mail today hopefully everyone got it

2545
01:31:09,800 --> 01:31:14,000
startedgalaxy.com has a little signup

2546
01:31:11,679 --> 01:31:15,359
sheet i sent out a mail um and it talks

2547
01:31:14,000 --> 01:31:16,800
a little bit about

2548
01:31:15,359 --> 01:31:18,960
what we're what we're working on and

2549
01:31:16,800 --> 01:31:21,119
what's still to go

2550
01:31:18,960 --> 01:31:21,119
so

2551
01:31:21,600 --> 01:31:24,960
in ref term you annotated the headers

2552
01:31:23,439 --> 01:31:26,319
and seem to have split things up to make

2553
01:31:24,960 --> 01:31:27,600
things like the glyph table use like a

2554
01:31:26,319 --> 01:31:30,399
library would you say that's a good

2555
01:31:27,600 --> 01:31:33,120
example of an api you made

2556
01:31:30,399 --> 01:31:34,960
um yeah i mean that

2557
01:31:33,119 --> 01:31:36,158
you know that was a weekend project so i

2558
01:31:34,960 --> 01:31:38,079
don't really want to say it's a good

2559
01:31:36,158 --> 01:31:40,559
example of an api but that's just how

2560
01:31:38,079 --> 01:31:43,119
you ship code sanely in my opinion right

2561
01:31:40,560 --> 01:31:45,679
like if you go look at that glyph table

2562
01:31:43,119 --> 01:31:47,599
uh it's pretty easy to use right i made

2563
01:31:45,679 --> 01:31:49,119
sure that the things you call make sense

2564
01:31:47,600 --> 01:31:50,719
that anyone could grab it and drop it in

2565
01:31:49,119 --> 01:31:52,319
and they'd be unlikely to screw it up

2566
01:31:50,719 --> 01:31:53,760
right could i have done more though

2567
01:31:52,319 --> 01:31:55,679
definitely sure

2568
01:31:53,760 --> 01:31:57,600
um but if you look at that glyph table

2569
01:31:55,679 --> 01:31:59,600
you can see that you know i took a

2570
01:31:57,600 --> 01:32:01,760
little time to make sure it was easy to

2571
01:31:59,600 --> 01:32:03,199
drop it in and you know it's not

2572
01:32:01,760 --> 01:32:05,119
probably not the best api i could think

2573
01:32:03,198 --> 01:32:06,000
of like if i went and thought hard about

2574
01:32:05,119 --> 01:32:07,599
it

2575
01:32:06,000 --> 01:32:09,198
but it's a usable api and more

2576
01:32:07,600 --> 01:32:11,199
importantly it's an api that comes out

2577
01:32:09,198 --> 01:32:13,439
of having written the thing that needs

2578
01:32:11,198 --> 01:32:16,319
to use the api so i know that the api

2579
01:32:13,439 --> 01:32:18,319
fits into place properly uh to a

2580
01:32:16,319 --> 01:32:19,519
terminal right which is which is also

2581
01:32:18,319 --> 01:32:22,158
one of the that's the most important

2582
01:32:19,520 --> 01:32:23,600
thing in an api right is that the shape

2583
01:32:22,158 --> 01:32:26,158
of the api

2584
01:32:23,600 --> 01:32:27,280
is useful to the people who want to use

2585
01:32:26,158 --> 01:32:28,879
it and they don't have to do all this

2586
01:32:27,279 --> 01:32:31,920
code to work around the fact that the

2587
01:32:28,880 --> 01:32:34,400
api doesn't naturally call

2588
01:32:31,920 --> 01:32:35,920
the way that you

2589
01:32:34,399 --> 01:32:40,359
need it to for the thing the problem

2590
01:32:35,920 --> 01:32:40,359
it's supposed to solve you know

2591
01:32:43,920 --> 01:32:47,920
in the printing creation of meow the

2592
01:32:45,198 --> 01:32:48,960
infinite did you have to write and code

2593
01:32:47,920 --> 01:32:51,039
uh

2594
01:32:48,960 --> 01:32:53,920
so i'm not exactly sure what that

2595
01:32:51,039 --> 01:32:55,359
question is but actually i did write

2596
01:32:53,920 --> 01:32:56,399
some code

2597
01:32:55,359 --> 01:32:58,479
for

2598
01:32:56,399 --> 01:33:02,238
meow the infinite uh

2599
01:32:58,479 --> 01:33:04,799
so let me show you book two

2600
01:33:02,238 --> 01:33:05,678
so the the kickstarter that i posted

2601
01:33:04,800 --> 01:33:06,960
um

2602
01:33:05,679 --> 01:33:09,119
the kickstarter that we're running right

2603
01:33:06,960 --> 01:33:10,560
now which please check out if you get a

2604
01:33:09,119 --> 01:33:12,158
chance it's got a cool trailer and

2605
01:33:10,560 --> 01:33:14,800
everything

2606
01:33:12,158 --> 01:33:16,238
um i'll post it here

2607
01:33:14,800 --> 01:33:21,440
um

2608
01:33:16,238 --> 01:33:24,399
i don't know if i did any code

2609
01:33:21,439 --> 01:33:26,399
that was would be used in book two but

2610
01:33:24,399 --> 01:33:28,399
in book one and some of you know about

2611
01:33:26,399 --> 01:33:30,158
this because i posted it on my blog in

2612
01:33:28,399 --> 01:33:32,079
book one there's this character that's

2613
01:33:30,158 --> 01:33:36,839
like this creepy autonomous

2614
01:33:32,079 --> 01:33:36,840
automaton cat let me show you

2615
01:33:37,198 --> 01:33:40,559
so there's this there's this like

2616
01:33:38,880 --> 01:33:42,480
ancient um

2617
01:33:40,560 --> 01:33:44,000
mechanical marvel

2618
01:33:42,479 --> 01:33:45,439
right it's right there it's called the

2619
01:33:44,000 --> 01:33:47,279
prime puss

2620
01:33:45,439 --> 01:33:48,238
uh and you can go to have an audience

2621
01:33:47,279 --> 01:33:49,439
with it

2622
01:33:48,238 --> 01:33:51,439
right that's one of the things that you

2623
01:33:49,439 --> 01:33:52,960
can uh that you can do in this world is

2624
01:33:51,439 --> 01:33:53,678
like people go to have an audience you

2625
01:33:52,960 --> 01:33:56,319
bite

2626
01:33:53,679 --> 01:33:56,319
let me just show you

2627
01:33:56,560 --> 01:34:00,560
sorry about spoilers if you don't want

2628
01:33:58,238 --> 01:34:01,919
spoilers plug your ears for a second um

2629
01:34:00,560 --> 01:34:03,760
but you would have if you would have

2630
01:34:01,920 --> 01:34:04,399
already bought the book

2631
01:34:03,760 --> 01:34:06,719
so

2632
01:34:04,399 --> 01:34:08,158
you go you go to this place called comet

2633
01:34:06,719 --> 01:34:09,279
city and you buy one of these little

2634
01:34:08,158 --> 01:34:11,198
tickets

2635
01:34:09,279 --> 01:34:13,119
right

2636
01:34:11,198 --> 01:34:14,399
um and you can have an audience with the

2637
01:34:13,119 --> 01:34:17,039
prime puss

2638
01:34:14,399 --> 01:34:20,479
and it's it's this this thing here right

2639
01:34:17,039 --> 01:34:23,279
and if you look at the text

2640
01:34:20,479 --> 01:34:25,919
there was no real way to do that in like

2641
01:34:23,279 --> 01:34:27,759
photoshop um and anna would have had to

2642
01:34:25,920 --> 01:34:29,119
have like done all that by hand and just

2643
01:34:27,760 --> 01:34:30,560
didn't

2644
01:34:29,119 --> 01:34:32,238
it didn't make any sense because if you

2645
01:34:30,560 --> 01:34:33,440
look i'll try to zoom it in even closer

2646
01:34:32,238 --> 01:34:35,279
if i can

2647
01:34:33,439 --> 01:34:36,399
if you look it's like all jittery and

2648
01:34:35,279 --> 01:34:38,800
the size

2649
01:34:36,399 --> 01:34:41,359
like i mean at the size the the offset

2650
01:34:38,800 --> 01:34:43,039
uh bait for the baseline is different

2651
01:34:41,359 --> 01:34:45,279
um and stuff like that

2652
01:34:43,039 --> 01:34:49,118
right

2653
01:34:45,279 --> 01:34:50,079
um so if you look at something like that

2654
01:34:49,118 --> 01:34:52,319
uh

2655
01:34:50,079 --> 01:34:53,920
it's like it takes too long to create by

2656
01:34:52,319 --> 01:34:56,399
hand so what i did is i wrote like a

2657
01:34:53,920 --> 01:34:57,600
photoshop script that does that for you

2658
01:34:56,399 --> 01:34:59,279
automatically

2659
01:34:57,600 --> 01:35:00,960
it didn't take very long but photoscrap

2660
01:34:59,279 --> 01:35:02,880
photoshop has like a little like

2661
01:35:00,960 --> 01:35:04,239
really crappy like javascript thing in

2662
01:35:02,880 --> 01:35:05,679
it um

2663
01:35:04,238 --> 01:35:07,678
so so you can do stuff like that like

2664
01:35:05,679 --> 01:35:09,199
you can go take the text and like assign

2665
01:35:07,679 --> 01:35:10,239
random randomized baseline so there's

2666
01:35:09,198 --> 01:35:11,599
like a little thing that you could plug

2667
01:35:10,238 --> 01:35:13,359
in some numbers to

2668
01:35:11,600 --> 01:35:17,360
and it would just like randomize the

2669
01:35:13,359 --> 01:35:17,359
text and that made it a lot easier so

2670
01:35:28,079 --> 01:35:32,158
your email went to spam but i found it

2671
01:35:30,000 --> 01:35:34,560
thanks yeah gosh i don't know what to do

2672
01:35:32,158 --> 01:35:36,079
about that we tried to send out so

2673
01:35:34,560 --> 01:35:37,920
we used to send out a really bare bones

2674
01:35:36,079 --> 01:35:39,118
email um i don't know those of you have

2675
01:35:37,920 --> 01:35:40,639
been on the molly rocket wailing list

2676
01:35:39,118 --> 01:35:42,319
for potentially years because we've it's

2677
01:35:40,639 --> 01:35:44,400
been around forever like we send out

2678
01:35:42,319 --> 01:35:46,238
project updates occasionally to it we've

2679
01:35:44,399 --> 01:35:47,759
been doing that forever

2680
01:35:46,238 --> 01:35:49,839
um i don't know that we used to have

2681
01:35:47,760 --> 01:35:52,400
much of a problem with spam

2682
01:35:49,840 --> 01:35:54,560
uh but like somehow we ended up we now

2683
01:35:52,399 --> 01:35:55,439
get filed to spam a lot we tried this

2684
01:35:54,560 --> 01:35:59,199
time

2685
01:35:55,439 --> 01:36:01,359
to have ours not go to spam by making we

2686
01:35:59,198 --> 01:36:02,799
we made a an email template that's a lot

2687
01:36:01,359 --> 01:36:05,039
more like

2688
01:36:02,800 --> 01:36:07,360
um what you normally get for advertising

2689
01:36:05,039 --> 01:36:10,639
emails or whatever

2690
01:36:07,359 --> 01:36:12,479
but apparently it's the webspam

2691
01:36:10,639 --> 01:36:14,560
so i don't i don't know what to do about

2692
01:36:12,479 --> 01:36:16,959
that uh i mean i do know to do it long

2693
01:36:14,560 --> 01:36:19,199
term it's just stop doing email

2694
01:36:16,960 --> 01:36:19,198
um

2695
01:36:22,399 --> 01:36:25,839
we

2696
01:36:23,118 --> 01:36:27,359
we need to like move past it uh

2697
01:36:25,840 --> 01:36:28,880
we need it we need a new infrastructure

2698
01:36:27,359 --> 01:36:30,399
for the web where people who sign up for

2699
01:36:28,880 --> 01:36:31,279
things get them

2700
01:36:30,399 --> 01:36:33,599
right

2701
01:36:31,279 --> 01:36:34,800
spam was a stupid idea anyway

2702
01:36:33,600 --> 01:36:36,320
you could have just had it so that

2703
01:36:34,800 --> 01:36:37,920
people said which addresses they wanted

2704
01:36:36,319 --> 01:36:39,519
to receive stuff from and then they get

2705
01:36:37,920 --> 01:36:40,719
them right

2706
01:36:39,520 --> 01:36:42,480
you shouldn't even have to sign up for a

2707
01:36:40,719 --> 01:36:44,800
mailing list you should just put that as

2708
01:36:42,479 --> 01:36:47,118
a thing in your email that's like rss

2709
01:36:44,800 --> 01:36:49,039
basically right

2710
01:36:47,118 --> 01:36:51,279
so

2711
01:36:49,039 --> 01:36:54,960
yeah i don't know what to do i do not

2712
01:36:51,279 --> 01:36:54,960
know why gmail puts us in spam

2713
01:36:57,118 --> 01:37:01,519
probably because i complain about how

2714
01:36:58,399 --> 01:37:01,519
much google sucks all the time

2715
01:37:04,399 --> 01:37:08,319
but i don't know if anyone knows how to

2716
01:37:06,079 --> 01:37:10,079
how to d how to stop getting us spam

2717
01:37:08,319 --> 01:37:11,759
like that it's really annoying it's it's

2718
01:37:10,079 --> 01:37:13,039
it's almost like it's one of those

2719
01:37:11,760 --> 01:37:15,119
things where i wish you could just like

2720
01:37:13,039 --> 01:37:16,800
sue them right it's like look people

2721
01:37:15,118 --> 01:37:18,399
signed up for this

2722
01:37:16,800 --> 01:37:20,400
your responsibility was to deliver this

2723
01:37:18,399 --> 01:37:22,158
to them you're calling it spam it's like

2724
01:37:20,399 --> 01:37:25,439
what the heck dude like you have to fix

2725
01:37:22,158 --> 01:37:25,439
this but they never will right

2726
01:37:25,760 --> 01:37:30,719
what email address was it sent from it's

2727
01:37:28,000 --> 01:37:33,520
sent via spark post

2728
01:37:30,719 --> 01:37:34,399
so so it's it's it's sent via like a

2729
01:37:33,520 --> 01:37:37,520
commercial

2730
01:37:34,399 --> 01:37:37,519
email provider right

2731
01:37:37,840 --> 01:37:41,520
um

2732
01:37:39,439 --> 01:37:42,399
and it has it has proper

2733
01:37:41,520 --> 01:37:44,480
uh

2734
01:37:42,399 --> 01:37:46,319
you know like if you go look at our dns

2735
01:37:44,479 --> 01:37:48,559
on mollyrocket.com it has the proper

2736
01:37:46,319 --> 01:37:50,559
like authentication stuff

2737
01:37:48,560 --> 01:37:53,679
for proving that this is like a legit

2738
01:37:50,560 --> 01:37:55,440
legit mail one of those spv spf whatever

2739
01:37:53,679 --> 01:37:57,199
the stupid

2740
01:37:55,439 --> 01:37:58,638
thing is right

2741
01:37:57,198 --> 01:38:01,118
um

2742
01:37:58,639 --> 01:38:02,960
and it's it's set up to be correct and

2743
01:38:01,118 --> 01:38:06,238
the weird part too is it never goes to

2744
01:38:02,960 --> 01:38:08,079
spam for us so we don't get to know

2745
01:38:06,238 --> 01:38:08,489
that that happened

2746
01:38:08,079 --> 01:38:10,479
um

2747
01:38:08,489 --> 01:38:12,399
[Music]

2748
01:38:10,479 --> 01:38:14,079
so like it's just it sucks it's really

2749
01:38:12,399 --> 01:38:17,359
sucks i don't know how to say it other

2750
01:38:14,079 --> 01:38:18,880
than that it sucks and i don't know how

2751
01:38:17,359 --> 01:38:20,559
google decides these things because of

2752
01:38:18,880 --> 01:38:23,440
course they won't tell you

2753
01:38:20,560 --> 01:38:26,080
uh and i just don't understand like i

2754
01:38:23,439 --> 01:38:27,678
don't know what you do about it

2755
01:38:26,079 --> 01:38:29,600
since google is an advertising company

2756
01:38:27,679 --> 01:38:30,639
they probably want to to just like file

2757
01:38:29,600 --> 01:38:33,119
everything to spam so you have to pay

2758
01:38:30,639 --> 01:38:35,520
them to advertise

2759
01:38:33,118 --> 01:38:35,519
um

2760
01:38:36,079 --> 01:38:40,319
it's not great

2761
01:38:37,920 --> 01:38:41,600
uh but yeah it's really annoying because

2762
01:38:40,319 --> 01:38:44,158
we'd like to be able to communicate with

2763
01:38:41,600 --> 01:38:45,600
the customers who literally told us they

2764
01:38:44,158 --> 01:38:47,759
want us to send them an email and it

2765
01:38:45,600 --> 01:38:50,000
really sucks that we can't do that you

2766
01:38:47,760 --> 01:38:50,000
know

2767
01:38:51,198 --> 01:38:53,359
but

2768
01:38:55,679 --> 01:38:59,840
but that's the way it is

2769
01:38:57,679 --> 01:38:59,840
so

2770
01:39:00,639 --> 01:39:04,440
yeah i don't know

2771
01:39:14,238 --> 01:39:18,479
yeah it comes from mollymail

2772
01:39:15,719 --> 01:39:22,679
mollyrocket.com yeah did anyone get it

2773
01:39:18,479 --> 01:39:22,678
who and it wasn't sent to spam

2774
01:39:34,238 --> 01:39:37,198
i'm curious if it

2775
01:39:38,079 --> 01:39:42,559
so weird so like it thinks it's spam for

2776
01:39:40,479 --> 01:39:44,238
some people and it doesn't think it's

2777
01:39:42,560 --> 01:39:46,480
spam for other people

2778
01:39:44,238 --> 01:39:51,039
so i'm guessing that it's like depending

2779
01:39:46,479 --> 01:39:52,638
on what things you've marked spam before

2780
01:39:51,039 --> 01:39:54,719
like if you've marked things like that

2781
01:39:52,639 --> 01:39:56,159
as spam or maybe you marked ours as spam

2782
01:39:54,719 --> 01:39:57,118
before because you didn't like it i

2783
01:39:56,158 --> 01:39:58,719
don't know

2784
01:39:57,118 --> 01:40:00,719
i really don't know because it's weird

2785
01:39:58,719 --> 01:40:02,399
that multiple people

2786
01:40:00,719 --> 01:40:04,000
some people get it and it's spam and

2787
01:40:02,399 --> 01:40:06,079
some people don't

2788
01:40:04,000 --> 01:40:07,520
um and like i'm on gmail it doesn't go

2789
01:40:06,079 --> 01:40:08,880
to my spam

2790
01:40:07,520 --> 01:40:10,080
right

2791
01:40:08,880 --> 01:40:11,520
um

2792
01:40:10,079 --> 01:40:13,760
and like somebody posted that they have

2793
01:40:11,520 --> 01:40:16,719
gmail and it went to their spam

2794
01:40:13,760 --> 01:40:18,639
why right i i just don't know you'd

2795
01:40:16,719 --> 01:40:20,880
think gmail either thinks it's spam or

2796
01:40:18,639 --> 01:40:24,159
doesn't think it's spam

2797
01:40:20,880 --> 01:40:26,239
uh but that's obviously not the case so

2798
01:40:24,158 --> 01:40:28,158
you know how is it spam for one person

2799
01:40:26,238 --> 01:40:31,158
and not spam for another that

2800
01:40:28,158 --> 01:40:31,158
right

2801
01:40:43,520 --> 01:40:46,719
uh so i don't know how to fix that and

2802
01:40:45,118 --> 01:40:48,799
maybe we need to switch to a different

2803
01:40:46,719 --> 01:40:51,800
provider

2804
01:40:48,800 --> 01:40:51,800
um

2805
01:40:57,359 --> 01:41:03,079
you know maybe we should just switch to

2806
01:40:58,960 --> 01:41:03,079
a different provider i don't know

2807
01:41:15,920 --> 01:41:18,920
uh

2808
01:41:19,760 --> 01:41:22,719
but i'd really like to get it fixed

2809
01:41:21,039 --> 01:41:26,479
because it's very hard for us to

2810
01:41:22,719 --> 01:41:29,480
communicate with people without it right

2811
01:41:26,479 --> 01:41:29,479
um

2812
01:41:38,399 --> 01:41:42,079
yeah the sundial yeah

2813
01:41:40,319 --> 01:41:45,079
the sundial ones go through who the who

2814
01:41:42,079 --> 01:41:45,079
knows

2815
01:41:56,479 --> 01:42:00,319
uh no there's not going to be any

2816
01:41:57,520 --> 01:42:03,040
capacity for the scg course it's it's

2817
01:42:00,319 --> 01:42:05,519
just it's it's own thing that you can

2818
01:42:03,039 --> 01:42:05,519
just buy

2819
01:42:07,198 --> 01:42:09,439
so

2820
01:42:11,840 --> 01:42:15,360
the the weird thing imc bass or the

2821
01:42:13,920 --> 01:42:17,279
weird thing that i can't figure out

2822
01:42:15,359 --> 01:42:19,599
right though is because if it was a

2823
01:42:17,279 --> 01:42:21,599
question of who it came from

2824
01:42:19,600 --> 01:42:23,920
then why aren't they all going to spam

2825
01:42:21,600 --> 01:42:25,679
like why do some people it doesn't go to

2826
01:42:23,920 --> 01:42:27,520
spam

2827
01:42:25,679 --> 01:42:30,079
for gmail and why do other people it

2828
01:42:27,520 --> 01:42:32,400
does so it just seems buggy

2829
01:42:30,079 --> 01:42:34,880
because if they marked ips as having

2830
01:42:32,399 --> 01:42:36,719
sent spam they should all go

2831
01:42:34,880 --> 01:42:37,600
like nobody should get it in their inbox

2832
01:42:36,719 --> 01:42:40,000
right

2833
01:42:37,600 --> 01:42:41,840
how is it possible that some people get

2834
01:42:40,000 --> 01:42:43,679
it and some people don't it's really

2835
01:42:41,840 --> 01:42:45,920
frustrating

2836
01:42:43,679 --> 01:42:45,920
um

2837
01:42:46,079 --> 01:42:50,559
and and i just do not know so what we

2838
01:42:49,039 --> 01:42:53,118
might try to do

2839
01:42:50,560 --> 01:42:56,119
is like switch to different provider

2840
01:42:53,118 --> 01:42:56,118
um

2841
01:42:57,118 --> 01:43:02,880
and see if that has any better luck

2842
01:43:00,719 --> 01:43:04,480
uh but i don't know what else to do like

2843
01:43:02,880 --> 01:43:06,400
i don't know who else i don't know what

2844
01:43:04,479 --> 01:43:08,799
to do i don't think we could improve

2845
01:43:06,399 --> 01:43:11,439
matters by serving the spam ourselves

2846
01:43:08,800 --> 01:43:13,679
right

2847
01:43:11,439 --> 01:43:16,479
um

2848
01:43:13,679 --> 01:43:18,079
right so if we try to send the email

2849
01:43:16,479 --> 01:43:19,839
i'm assuming that'd be even less likely

2850
01:43:18,079 --> 01:43:22,079
to go through because then it's not

2851
01:43:19,840 --> 01:43:24,639
coming from a known location at least

2852
01:43:22,079 --> 01:43:26,880
gmail knows that spark post is the back

2853
01:43:24,639 --> 01:43:28,560
end for lots of people's mailing lists

2854
01:43:26,880 --> 01:43:30,960
so they should be expecting to get it

2855
01:43:28,560 --> 01:43:32,000
and i don't know what's going on

2856
01:43:30,960 --> 01:43:34,158
um

2857
01:43:32,000 --> 01:43:35,679
there but like at least it's not

2858
01:43:34,158 --> 01:43:36,559
they know it's not a dedicated spam

2859
01:43:35,679 --> 01:43:38,399
house

2860
01:43:36,560 --> 01:43:40,719
but i really just don't know

2861
01:43:38,399 --> 01:43:40,719
um

2862
01:43:47,439 --> 01:43:51,879
but it's but it's really it's really

2863
01:43:48,880 --> 01:43:51,880
nasty

2864
01:44:07,198 --> 01:44:10,638
i may have to just switch away like like

2865
01:44:09,118 --> 01:44:12,559
here's a question for those of you out

2866
01:44:10,639 --> 01:44:14,880
there who might know

2867
01:44:12,560 --> 01:44:14,880
um

2868
01:44:17,520 --> 01:44:22,320
who should you send your

2869
01:44:19,520 --> 01:44:25,480
mailing list through

2870
01:44:22,319 --> 01:44:25,479
you know

2871
01:44:51,439 --> 01:44:55,439
like what's the way to send a marketing

2872
01:44:52,960 --> 01:44:55,439
email

2873
01:44:56,000 --> 01:44:59,880
because i honestly don't know

2874
01:45:13,760 --> 01:45:18,239
you want to use a commercial esp like

2875
01:45:15,840 --> 01:45:21,199
mailchimp or iterable or whoever but you

2876
01:45:18,238 --> 01:45:22,879
have to warm your ips properly you have

2877
01:45:21,198 --> 01:45:25,039
to maintain the quality of your list

2878
01:45:22,880 --> 01:45:28,239
over time like if you send stuff out and

2879
01:45:25,039 --> 01:45:30,960
get poor open rates you'll be penalized

2880
01:45:28,238 --> 01:45:34,399
but we don't include any tracking

2881
01:45:30,960 --> 01:45:34,399
there are no open rates

2882
01:45:34,479 --> 01:45:38,439
like what does that even mean

2883
01:45:45,840 --> 01:45:49,920
like like we don't have click tracking

2884
01:45:48,639 --> 01:45:53,319
in our

2885
01:45:49,920 --> 01:45:53,319
in our emails

2886
01:46:01,279 --> 01:46:04,559
so so i don't really know

2887
01:46:05,198 --> 01:46:08,479
it's really troublesome though this is a

2888
01:46:06,639 --> 01:46:09,679
disaster like we used to have no problem

2889
01:46:08,479 --> 01:46:11,279
like we used to send out the mailing

2890
01:46:09,679 --> 01:46:13,118
list every week

2891
01:46:11,279 --> 01:46:14,880
for a while and we had no problems fast

2892
01:46:13,118 --> 01:46:17,198
forward a few years and now we just

2893
01:46:14,880 --> 01:46:19,679
can't seem to i don't know it's really

2894
01:46:17,198 --> 01:46:20,019
really it really bothers me

2895
01:46:19,679 --> 01:46:23,139
um

2896
01:46:20,020 --> 01:46:23,139
[Music]

2897
01:46:24,399 --> 01:46:27,839
so i don't know

2898
01:46:29,118 --> 01:46:35,599
yeah nxsy uh well neil

2899
01:46:33,359 --> 01:46:35,599
um

2900
01:46:35,760 --> 01:46:40,480
i was wondering that

2901
01:46:37,439 --> 01:46:42,638
actually like i was wondering if our

2902
01:46:40,479 --> 01:46:45,039
mail looks too much like spam because it

2903
01:46:42,639 --> 01:46:47,039
doesn't have a bunch of tracking crap

2904
01:46:45,039 --> 01:46:49,279
in it or something

2905
01:46:47,039 --> 01:46:50,960
um which is the if that were actually

2906
01:46:49,279 --> 01:46:51,920
true that'd be like the most offensive

2907
01:46:50,960 --> 01:46:54,158
thing that's

2908
01:46:51,920 --> 01:46:56,079
could possibly happen you try to send an

2909
01:46:54,158 --> 01:46:59,439
email to your customers

2910
01:46:56,079 --> 01:47:00,880
that doesn't try to

2911
01:46:59,439 --> 01:47:02,319
screw them and capture all their

2912
01:47:00,880 --> 01:47:06,079
information

2913
01:47:02,319 --> 01:47:06,079
and you get penalized

2914
01:47:07,039 --> 01:47:11,359
i don't know man it's very frustrating

2915
01:47:10,560 --> 01:47:12,719
um

2916
01:47:11,359 --> 01:47:15,839
and

2917
01:47:12,719 --> 01:47:15,840
i just don't understand

2918
01:47:18,399 --> 01:47:21,399
but

2919
01:47:33,039 --> 01:47:38,158
yeah email is garbage i'm not sure what

2920
01:47:35,439 --> 01:47:41,359
else you use i mean i can't post anybody

2921
01:47:38,158 --> 01:47:43,359
on twitter nobody reads my twitter

2922
01:47:41,359 --> 01:47:44,238
right

2923
01:47:43,359 --> 01:47:46,960
um

2924
01:47:44,238 --> 01:47:47,919
but it's really bad like it's a massive

2925
01:47:46,960 --> 01:47:48,880
problem

2926
01:47:47,920 --> 01:47:50,560
um

2927
01:47:48,880 --> 01:47:52,319
and like people should just be getting

2928
01:47:50,560 --> 01:47:54,159
sued

2929
01:47:52,319 --> 01:47:56,079
like like i feel like someone should

2930
01:47:54,158 --> 01:47:58,960
just class action google about this it's

2931
01:47:56,079 --> 01:48:03,079
just it's unacceptable right

2932
01:47:58,960 --> 01:48:03,079
it's it's really not cool

2933
01:48:12,399 --> 01:48:16,559
well our mailing list has like 9 000

2934
01:48:14,479 --> 01:48:18,879
people on it

2935
01:48:16,560 --> 01:48:20,800
and like

2936
01:48:18,880 --> 01:48:21,920
when we send out a mail lots of people

2937
01:48:20,800 --> 01:48:23,760
read it

2938
01:48:21,920 --> 01:48:25,520
if i post a tweet about something like

2939
01:48:23,760 --> 01:48:26,480
one of our projects it gets like seven

2940
01:48:25,520 --> 01:48:28,639
likes

2941
01:48:26,479 --> 01:48:30,479
right nobody cares

2942
01:48:28,639 --> 01:48:32,159
um

2943
01:48:30,479 --> 01:48:33,678
so there's a pretty big difference and

2944
01:48:32,158 --> 01:48:36,479
that's with

2945
01:48:33,679 --> 01:48:38,319
most of it going to spam even so like

2946
01:48:36,479 --> 01:48:40,799
the mailing list seems to work better

2947
01:48:38,319 --> 01:48:43,118
even to this day even with all the spam

2948
01:48:40,800 --> 01:48:46,800
but i just don't it's really very it

2949
01:48:43,118 --> 01:48:48,319
makes me very unhappy i do

2950
01:48:46,800 --> 01:48:49,600
uh think there's possibilities for

2951
01:48:48,319 --> 01:48:51,599
replacing in the future with better

2952
01:48:49,600 --> 01:48:52,400
things

2953
01:48:51,600 --> 01:48:54,400
um

2954
01:48:52,399 --> 01:48:56,399
and so we'll see

2955
01:48:54,399 --> 01:48:58,960
it definitely enrages me to the point

2956
01:48:56,399 --> 01:49:00,719
where it's like you know

2957
01:48:58,960 --> 01:49:03,039
uh since we're distributing a server

2958
01:49:00,719 --> 01:49:04,719
architecture it has stuff baked in there

2959
01:49:03,039 --> 01:49:06,960
now so that you can get updates from us

2960
01:49:04,719 --> 01:49:09,118
directly without going through gmail

2961
01:49:06,960 --> 01:49:11,118
because of this exact reason it

2962
01:49:09,118 --> 01:49:12,479
definitely does just like increase my

2963
01:49:11,118 --> 01:49:14,079
level of rage

2964
01:49:12,479 --> 01:49:16,000
that just makes me want to freaking

2965
01:49:14,079 --> 01:49:17,599
destroy

2966
01:49:16,000 --> 01:49:19,599
places like gmail

2967
01:49:17,599 --> 01:49:21,440
for being so freaking terrible and not

2968
01:49:19,599 --> 01:49:24,840
caring about their customers even the

2969
01:49:21,439 --> 01:49:24,839
slightest bit

2970
01:49:32,158 --> 01:49:36,319
it sounds like uh hotmail outlook i

2971
01:49:34,960 --> 01:49:38,880
think they're the same right it sounds

2972
01:49:36,319 --> 01:49:40,639
like somehow they just didn't accept it

2973
01:49:38,880 --> 01:49:42,880
this is terrible it makes me so

2974
01:49:40,639 --> 01:49:44,560
depressed

2975
01:49:42,880 --> 01:49:46,880
this is their only job

2976
01:49:44,560 --> 01:49:46,880
right

2977
01:49:48,560 --> 01:49:53,360
it's so ridiculous it's just so freaking

2978
01:49:50,960 --> 01:49:53,359
terrible

2979
01:49:53,439 --> 01:49:58,000
these companies need to go away they

2980
01:49:56,319 --> 01:49:59,359
can't do anything

2981
01:49:58,000 --> 01:50:01,599
google is like one of the most

2982
01:49:59,359 --> 01:50:03,839
incompetent piles of failure

2983
01:50:01,599 --> 01:50:08,079
i have ever seen for a trillion dollar

2984
01:50:03,840 --> 01:50:08,079
company it's absolutely insane

2985
01:50:08,560 --> 01:50:13,280
it's just ridiculous how hard is it to

2986
01:50:10,960 --> 01:50:17,279
send text back and forth the answer is

2987
01:50:13,279 --> 01:50:17,279
infinitely hard if you're google

2988
01:50:17,599 --> 01:50:22,840
or microsoft

2989
01:50:19,198 --> 01:50:22,839
as it turns out

2990
01:50:35,439 --> 01:50:39,839
yeah mailjet.com what is that

2991
01:50:52,158 --> 01:50:57,359
i feel like mail jet so they're okay but

2992
01:50:55,359 --> 01:51:00,399
they weren't originally mail jet wasn't

2993
01:50:57,359 --> 01:51:03,279
originally an smtp server right that's a

2994
01:51:00,399 --> 01:51:03,279
new thing i think

2995
01:51:04,238 --> 01:51:07,279
but i i think i'm gonna have to switch

2996
01:51:05,840 --> 01:51:08,560
away from spark post because it just

2997
01:51:07,279 --> 01:51:10,238
doesn't seem like we get any good

2998
01:51:08,560 --> 01:51:12,159
delivery but maybe that's our fault i

2999
01:51:10,238 --> 01:51:14,158
don't know like i said you can't tell

3000
01:51:12,158 --> 01:51:16,238
because one of the problems with the

3001
01:51:14,158 --> 01:51:17,519
quote unquote spam filtering is that

3002
01:51:16,238 --> 01:51:18,799
they hide everything from you because

3003
01:51:17,520 --> 01:51:19,679
they want to make sure that spammers

3004
01:51:18,800 --> 01:51:21,039
can't work their way around it the

3005
01:51:19,679 --> 01:51:23,279
problem is that means legitimate people

3006
01:51:21,039 --> 01:51:25,198
can't work their way around it like

3007
01:51:23,279 --> 01:51:26,319
they don't solve the problem by doing

3008
01:51:25,198 --> 01:51:28,719
what they do

3009
01:51:26,319 --> 01:51:33,079
they're not solving the problem

3010
01:51:28,719 --> 01:51:33,079
you know um

3011
01:51:40,560 --> 01:51:44,880
with the header validation i'm seeing

3012
01:51:42,238 --> 01:51:46,879
spf pass and dkm pass but none from

3013
01:51:44,880 --> 01:51:49,279
dmarc

3014
01:51:46,880 --> 01:51:51,279
send grid is the biggest

3015
01:51:49,279 --> 01:51:52,719
what's dmarc so maybe we have to add

3016
01:51:51,279 --> 01:51:54,559
that maybe that was something that got

3017
01:51:52,719 --> 01:51:58,198
added since then

3018
01:51:54,560 --> 01:51:58,199
that i don't know about

3019
01:52:10,880 --> 01:52:13,440
so maybe i'll look into that after but i

3020
01:52:12,560 --> 01:52:14,480
just really want to get this

3021
01:52:13,439 --> 01:52:16,238
straightened out because it's very

3022
01:52:14,479 --> 01:52:17,678
depressing and i guess the the right

3023
01:52:16,238 --> 01:52:19,359
thing to look at it is like i just have

3024
01:52:17,679 --> 01:52:20,880
to build a better way for us to

3025
01:52:19,359 --> 01:52:23,198
communicate with our customers which

3026
01:52:20,880 --> 01:52:24,000
i'll now be able to do which is nice

3027
01:52:23,198 --> 01:52:25,759
right

3028
01:52:24,000 --> 01:52:27,520
um because we'll actually have a server

3029
01:52:25,760 --> 01:52:29,119
infrastructure up so i can start to do

3030
01:52:27,520 --> 01:52:30,560
things to replace these ridiculously

3031
01:52:29,118 --> 01:52:32,319
crappy services

3032
01:52:30,560 --> 01:52:34,159
that suck and can't even do basic things

3033
01:52:32,319 --> 01:52:36,079
like send text back and forth but it's

3034
01:52:34,158 --> 01:52:38,079
like that's you know

3035
01:52:36,079 --> 01:52:40,559
i need a way to

3036
01:52:38,079 --> 01:52:42,079
bootstrap that process and you know i

3037
01:52:40,560 --> 01:52:44,639
need to somehow

3038
01:52:42,079 --> 01:52:46,319
right i need to be able to communicate

3039
01:52:44,639 --> 01:52:47,599
with our customers to the up until the

3040
01:52:46,319 --> 01:52:49,198
point where you can actually create a

3041
01:52:47,599 --> 01:52:51,440
better conduit

3042
01:52:49,198 --> 01:52:51,439
um

3043
01:52:52,639 --> 01:52:55,279
so i don't know

3044
01:52:56,960 --> 01:53:00,639
but i'll look at that dmarc thing

3045
01:52:58,639 --> 01:53:02,719
because maybe that is part of it i don't

3046
01:53:00,639 --> 01:53:04,079
know like that was not something you

3047
01:53:02,719 --> 01:53:06,399
could do back when we set this up

3048
01:53:04,079 --> 01:53:07,198
originally so maybe we need to set that

3049
01:53:06,399 --> 01:53:08,158
up

3050
01:53:07,198 --> 01:53:11,158
uh

3051
01:53:08,158 --> 01:53:11,158
right

3052
01:53:16,079 --> 01:53:19,599
uh and we'll see

3053
01:53:17,760 --> 01:53:21,360
i'll have to look

3054
01:53:19,599 --> 01:53:24,639
i can log into the spark post thing now

3055
01:53:21,359 --> 01:53:27,639
and see see if it's see if it's there

3056
01:53:24,639 --> 01:53:27,639
um

3057
01:53:48,158 --> 01:53:53,359
so i don't see anything about dmarc here

3058
01:53:51,039 --> 01:53:54,880
so maybe i have to i'll have to go read

3059
01:53:53,359 --> 01:53:56,399
up about it i don't see anything about

3060
01:53:54,880 --> 01:53:58,159
that like it does

3061
01:53:56,399 --> 01:54:02,079
you know it's got the stuff about like

3062
01:53:58,158 --> 01:54:04,238
adding cname records in the text records

3063
01:54:02,079 --> 01:54:07,760
but i don't see anything

3064
01:54:04,238 --> 01:54:11,439
uh on here about about dmarc

3065
01:54:07,760 --> 01:54:11,440
have to go read up on what that is

3066
01:54:14,158 --> 01:54:17,359
send grid huh

3067
01:54:17,599 --> 01:54:20,400
i'll look at them as well because we're

3068
01:54:18,800 --> 01:54:23,199
just we're not having any luck with

3069
01:54:20,399 --> 01:54:25,839
spark posts so i'll have to look and see

3070
01:54:23,198 --> 01:54:27,198
if i can find another option

3071
01:54:25,840 --> 01:54:28,960
thanks for the tips though because i

3072
01:54:27,198 --> 01:54:32,000
really want to get this straightened out

3073
01:54:28,960 --> 01:54:34,399
at least to a certain degree so

3074
01:54:32,000 --> 01:54:36,238
so we'll see

3075
01:54:34,399 --> 01:54:37,839
all right folks so i think we're

3076
01:54:36,238 --> 01:54:41,118
basically at time here i said it was

3077
01:54:37,840 --> 01:54:41,119
till nine and it's a nine

3078
01:54:42,158 --> 01:54:46,079
thanks for hanging out

3079
01:54:44,639 --> 01:54:50,118
hopefully some of those

3080
01:54:46,079 --> 01:54:50,118
question answers were useful

3081
01:54:56,960 --> 01:55:01,118
and thanks for the suggestions about the

3082
01:54:58,880 --> 01:55:03,199
the spam stuff because i yeah i need

3083
01:55:01,118 --> 01:55:04,479
something to try we can't really keep

3084
01:55:03,198 --> 01:55:06,399
going the way we're going because we

3085
01:55:04,479 --> 01:55:08,959
can't even send mail to our own mailing

3086
01:55:06,399 --> 01:55:10,879
list which is kind of ridiculous

3087
01:55:08,960 --> 01:55:11,840
um

3088
01:55:10,880 --> 01:55:13,599
so

3089
01:55:11,840 --> 01:55:15,199
i would like to at least try to get it a

3090
01:55:13,599 --> 01:55:16,400
little bit better

3091
01:55:15,198 --> 01:55:19,118
uh

3092
01:55:16,399 --> 01:55:21,118
and you know so i can try the send grid

3093
01:55:19,118 --> 01:55:22,639
stuff and i'll just i'll just try it

3094
01:55:21,118 --> 01:55:24,158
right i'll just try

3095
01:55:22,639 --> 01:55:25,840
and see because if we get it if it's

3096
01:55:24,158 --> 01:55:26,799
better it's better

3097
01:55:25,840 --> 01:55:28,000
um

3098
01:55:26,800 --> 01:55:29,920
but at least it gives me something

3099
01:55:28,000 --> 01:55:31,760
proactive i can do whereas right now you

3100
01:55:29,920 --> 01:55:35,599
know there's nothing proactive for me to

3101
01:55:31,760 --> 01:55:35,599
do which is a frustrating feeling

3102
01:55:40,158 --> 01:55:44,960
i have my own mail server but

3103
01:55:41,760 --> 01:55:47,840
thunderbird put it in spam there you go

3104
01:55:44,960 --> 01:55:47,840
thanks thunderbird

3105
01:55:49,279 --> 01:55:55,198
all of this stuff has to get rebuilt

3106
01:55:52,560 --> 01:55:57,520
guys it has to i mean

3107
01:55:55,198 --> 01:55:59,359
think about how simple this problem is

3108
01:55:57,520 --> 01:56:01,360
if instead of signing up for a mailing

3109
01:55:59,359 --> 01:56:04,238
list you just put into your email

3110
01:56:01,359 --> 01:56:05,839
program the email address that you were

3111
01:56:04,238 --> 01:56:09,279
trying to subscribe to

3112
01:56:05,840 --> 01:56:09,279
none of this would be a problem

3113
01:56:10,079 --> 01:56:12,319
right

3114
01:56:12,800 --> 01:56:17,760
because it would be pull instead of push

3115
01:56:15,520 --> 01:56:20,880
so like rss is the right solution to

3116
01:56:17,760 --> 01:56:21,840
this problem or something similar right

3117
01:56:20,880 --> 01:56:24,000
um

3118
01:56:21,840 --> 01:56:25,679
and they were just like now

3119
01:56:24,000 --> 01:56:27,599
like that's just no

3120
01:56:25,679 --> 01:56:31,199
we can't do that we have to do this

3121
01:56:27,599 --> 01:56:31,199
ridiculous stupid idea

3122
01:56:35,198 --> 01:56:40,559
yeah i mean rss wasn't perfect

3123
01:56:38,158 --> 01:56:43,439
i wouldn't use that term but at least

3124
01:56:40,560 --> 01:56:45,520
it's reliable like you know that anybody

3125
01:56:43,439 --> 01:56:48,960
who wanted to get your mailing list will

3126
01:56:45,520 --> 01:56:51,360
get it if rss was still a thing now

3127
01:56:48,960 --> 01:56:53,198
nobody uses rss nobody even knows what

3128
01:56:51,359 --> 01:56:55,598
it is so you can't really operate a

3129
01:56:53,198 --> 01:56:57,359
mailing list using rss because you would

3130
01:56:55,599 --> 01:57:00,319
have like six customers the six people

3131
01:56:57,359 --> 01:57:01,759
who still remember how to use rss right

3132
01:57:00,319 --> 01:57:03,198
but that was the correct answer you

3133
01:57:01,760 --> 01:57:05,520
should have just had a thing in you on

3134
01:57:03,198 --> 01:57:08,719
your inbox just said add feed and they

3135
01:57:05,520 --> 01:57:08,719
would just show up as males

3136
01:57:08,800 --> 01:57:12,480
right i mean how hard would that have

3137
01:57:10,238 --> 01:57:12,479
been

3138
01:57:13,118 --> 01:57:15,519
but no

3139
01:57:16,960 --> 01:57:21,679
anyway thank you very much everyone for

3140
01:57:18,639 --> 01:57:22,639
joining me uh

3141
01:57:21,679 --> 01:57:24,560
yeah

3142
01:57:22,639 --> 01:57:26,000
it was it was fun answering questions it

3143
01:57:24,560 --> 01:57:27,599
was not so fun talking about the spam

3144
01:57:26,000 --> 01:57:29,439
thing because that always upsets me

3145
01:57:27,599 --> 01:57:30,960
every time i find that out

3146
01:57:29,439 --> 01:57:33,198
um

3147
01:57:30,960 --> 01:57:33,198
but

3148
01:57:34,319 --> 01:57:39,639
semi-damn idea you could set up a

3149
01:57:35,840 --> 01:57:39,639
newsletter on sub stack

3150
01:57:41,198 --> 01:57:44,638
so that's not a dumb idea i mean i would

3151
01:57:43,279 --> 01:57:47,279
be fine setting up a newsletter on

3152
01:57:44,639 --> 01:57:47,279
substance

3153
01:57:49,439 --> 01:57:52,439
uh

3154
01:58:01,118 --> 01:58:05,279
so you know that's not a dumb idea

3155
01:58:03,599 --> 01:58:06,880
you said it you called it a dumb idea

3156
01:58:05,279 --> 01:58:08,000
well you called it a semi-dumb idea so i

3157
01:58:06,880 --> 01:58:11,599
think you knew there was at least some

3158
01:58:08,000 --> 01:58:11,599
smartness in there you knew it

3159
01:58:12,158 --> 01:58:16,319
because then it's like okay it's coming

3160
01:58:13,760 --> 01:58:20,000
from sub sac if they stop start

3161
01:58:16,319 --> 01:58:22,000
sending sub stack to spam

3162
01:58:20,000 --> 01:58:23,920
then like

3163
01:58:22,000 --> 01:58:25,118
people who paid for this newsletter are

3164
01:58:23,920 --> 01:58:26,319
not going to get it or whatever right

3165
01:58:25,118 --> 01:58:28,000
because like there's a bunch of people

3166
01:58:26,319 --> 01:58:29,198
who charge for their newsletters on

3167
01:58:28,000 --> 01:58:31,599
substance

3168
01:58:29,198 --> 01:58:34,719
so in theory if you start a newsletter

3169
01:58:31,599 --> 01:58:36,239
on subsect that's not

3170
01:58:34,719 --> 01:58:39,439
paid it's just free

3171
01:58:36,238 --> 01:58:41,759
which as far as i know you can do

3172
01:58:39,439 --> 01:58:41,759
um

3173
01:58:44,479 --> 01:58:47,198
you might be able to just kind of like

3174
01:58:45,679 --> 01:58:48,239
ride those coattails right it's like

3175
01:58:47,198 --> 01:58:50,000
yeah we're just using this as our

3176
01:58:48,238 --> 01:58:52,559
company's mailing list unfortunately i

3177
01:58:50,000 --> 01:58:55,039
can't import our existing mailing list

3178
01:58:52,560 --> 01:58:55,400
to substack

3179
01:58:55,039 --> 01:58:56,960
um

3180
01:58:55,399 --> 01:58:59,839
[Music]

3181
01:58:56,960 --> 01:59:02,079
at least i don't think you can

3182
01:58:59,840 --> 01:59:03,440
but you know i could try to communicate

3183
01:59:02,079 --> 01:59:05,920
with our customers that if they are

3184
01:59:03,439 --> 01:59:07,759
having trouble getting delivery

3185
01:59:05,920 --> 01:59:09,118
of our email because the people at

3186
01:59:07,760 --> 01:59:10,560
google

3187
01:59:09,118 --> 01:59:12,479
learn to program

3188
01:59:10,560 --> 01:59:14,840
from a toll-free number they got in a

3189
01:59:12,479 --> 01:59:17,519
cracker jack box

3190
01:59:14,840 --> 01:59:19,360
um you know maybe that's like just

3191
01:59:17,520 --> 01:59:21,920
another option i just like

3192
01:59:19,359 --> 01:59:23,920
you know i send the newsletter out via

3193
01:59:21,920 --> 01:59:25,599
sendgrid or something and maybe get some

3194
01:59:23,920 --> 01:59:27,279
people maybe it doesn't and then if

3195
01:59:25,599 --> 01:59:29,039
people have been having trouble getting

3196
01:59:27,279 --> 01:59:31,759
the newsletter

3197
01:59:29,039 --> 01:59:33,760
delivered to them

3198
01:59:31,760 --> 01:59:36,000
they can they know that they can go to

3199
01:59:33,760 --> 01:59:38,560
sub stack and subscribe there and have a

3200
01:59:36,000 --> 01:59:40,719
better chance of getting it

3201
01:59:38,560 --> 01:59:44,199
not a bad idea

3202
01:59:40,719 --> 01:59:44,198
not a bad idea

3203
01:59:44,880 --> 01:59:49,760
uh i i could see giving that a shot i

3204
01:59:47,439 --> 01:59:52,879
mean what do i have to lose right i copy

3205
01:59:49,760 --> 01:59:52,880
the email over to substack

3206
01:59:54,319 --> 01:59:58,479
right

3207
01:59:55,760 --> 02:00:03,119
um

3208
01:59:58,479 --> 02:00:03,118
so like that seems pretty good

3209
02:00:09,118 --> 02:00:13,158
that seems actually pretty good

3210
02:00:13,198 --> 02:00:17,439
thank you for that semi-dumb idea which

3211
02:00:15,439 --> 02:00:19,759
i'm gonna have to say is not semi-dumb

3212
02:00:17,439 --> 02:00:19,759
at all

3213
02:00:20,560 --> 02:00:22,800
so

3214
02:00:23,599 --> 02:00:27,360
i'm gonna go think about that that's

3215
02:00:24,880 --> 02:00:29,520
what i'm going to do as soon as i

3216
02:00:27,359 --> 02:00:31,198
close this stream

3217
02:00:29,520 --> 02:00:32,639
so thank you that was great that's a

3218
02:00:31,198 --> 02:00:34,638
very good idea

3219
02:00:32,639 --> 02:00:36,719
i'm sorry it's a semi-dumb idea

3220
02:00:34,639 --> 02:00:39,199
according to you but according to me

3221
02:00:36,719 --> 02:00:40,399
it's actually a pretty good idea

3222
02:00:39,198 --> 02:00:41,839
all right everybody

3223
02:00:40,399 --> 02:00:42,719
thanks for joining me

3224
02:00:41,840 --> 02:00:44,480
um

3225
02:00:42,719 --> 02:00:46,880
we'll have some more stuff to talk about

3226
02:00:44,479 --> 02:00:48,158
i think during the uh during the

3227
02:00:46,880 --> 02:00:50,239
infinite kickstarter we're trying to do

3228
02:00:48,158 --> 02:00:51,920
a couple other things for promotional

3229
02:00:50,238 --> 02:00:53,439
stuff for sure but

3230
02:00:51,920 --> 02:00:55,440
for the most part

3231
02:00:53,439 --> 02:00:57,039
uh it'll be a normal weekend i'll be

3232
02:00:55,439 --> 02:01:00,638
back here on sunday to do handmade

3233
02:00:57,039 --> 02:01:02,238
heroes so they'll be that as well

3234
02:01:00,639 --> 02:01:03,440
i'm gonna go see if i can figure out

3235
02:01:02,238 --> 02:01:04,879
about that subsection because that's

3236
02:01:03,439 --> 02:01:06,479
actually a pretty good idea that's a way

3237
02:01:04,880 --> 02:01:08,239
that they can't really

3238
02:01:06,479 --> 02:01:09,598
screw you quite quite the way that they

3239
02:01:08,238 --> 02:01:11,678
currently are because now you've got a

3240
02:01:09,599 --> 02:01:13,760
lot more angry people if they start to

3241
02:01:11,679 --> 02:01:15,199
block that email address so that's not a

3242
02:01:13,760 --> 02:01:17,039
bad idea i might give that a shot thanks

3243
02:01:15,198 --> 02:01:19,198
for the suggestions

3244
02:01:17,039 --> 02:01:21,198
i will report back if i if i try that

3245
02:01:19,198 --> 02:01:22,799
maybe on sunday um during handmade here

3246
02:01:21,198 --> 02:01:24,158
i'll i'll

3247
02:01:22,800 --> 02:01:26,159
i'll give a little postmortem on how

3248
02:01:24,158 --> 02:01:27,439
that went if i give it a shot all right

3249
02:01:26,158 --> 02:01:31,118
thanks everybody

3250
02:01:27,439 --> 02:01:32,319
um i will uh i'll see you guys on sunday

3251
02:01:31,118 --> 02:01:34,079
until then

3252
02:01:32,319 --> 02:01:37,840
have fun programming and i'll see you on

3253
02:01:34,079 --> 02:01:37,840
the internet take it easy everybody

