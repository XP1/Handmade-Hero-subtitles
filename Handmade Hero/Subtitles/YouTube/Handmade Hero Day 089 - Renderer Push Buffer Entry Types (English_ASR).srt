1
00:00:01,010 --> 00:00:05,700
alright hello everyone and welcome to

2
00:00:04,259 --> 00:00:09,690
handmade Shiro the show where we code a

3
00:00:05,700 --> 00:00:13,019
complete game live on Twitch no engine

4
00:00:09,689 --> 00:00:14,699
no libraries because you know what it's

5
00:00:13,019 --> 00:00:16,320
just it's old-school day up in here all

6
00:00:14,699 --> 00:00:18,118
the time you know what I'm saying like

7
00:00:16,320 --> 00:00:22,439
we kick it old-school

8
00:00:18,118 --> 00:00:23,939
none of the crazy rap music's and heavy

9
00:00:22,439 --> 00:00:27,060
metals that the kids are listening to

10
00:00:23,939 --> 00:00:29,310
today with their you know ridiculous

11
00:00:27,059 --> 00:00:30,329
hair and their there are other things

12
00:00:29,309 --> 00:00:31,768
you know it's just like that's that's

13
00:00:30,329 --> 00:00:34,229
not you know that's not how do we roll

14
00:00:31,768 --> 00:00:36,539
you know we don't we don't try to put on

15
00:00:34,229 --> 00:00:37,890
rollerblades and go like criss cross

16
00:00:36,539 --> 00:00:39,269
through the cones or the other things

17
00:00:37,890 --> 00:00:42,079
that the people are doing in California

18
00:00:39,270 --> 00:00:44,300
you know that's just not how we are here

19
00:00:42,079 --> 00:00:49,489
this is old-school traditional

20
00:00:44,299 --> 00:00:53,789
programmer values here on handmade hero

21
00:00:49,488 --> 00:00:56,280
and so you know with that said off we go

22
00:00:53,789 --> 00:00:57,539
if you have pre-ordered the game and

23
00:00:56,280 --> 00:01:00,390
want to follow along with the source

24
00:00:57,539 --> 00:01:02,039
code you can go ahead and check out that

25
00:01:00,390 --> 00:01:04,890
link that you should have gotten your

26
00:01:02,039 --> 00:01:06,659
email and today is day 89 so you're

27
00:01:04,890 --> 00:01:07,769
gonna want to unpack day 88 source code

28
00:01:06,659 --> 00:01:10,710
that's what you're gonna want to do

29
00:01:07,769 --> 00:01:13,469
because that's where I am at and so you

30
00:01:10,709 --> 00:01:15,929
know do that so that you and I will be

31
00:01:13,469 --> 00:01:17,519
aligned will be working on the same code

32
00:01:15,930 --> 00:01:19,259
because otherwise we will be divergent

33
00:01:17,519 --> 00:01:21,929
and despite the fact that that appears

34
00:01:19,259 --> 00:01:25,409
to be some kind of an awful young adult

35
00:01:21,930 --> 00:01:28,200
novel that is currently not sweeping the

36
00:01:25,409 --> 00:01:32,310
nation because it probably wasn't very

37
00:01:28,200 --> 00:01:34,890
good i I feel like we should avoid that

38
00:01:32,310 --> 00:01:37,379
in terms of our code base all right so

39
00:01:34,890 --> 00:01:39,390
let's take a look at what happened on

40
00:01:37,379 --> 00:01:42,478
Friday because some stuff happened on

41
00:01:39,390 --> 00:01:46,228
Friday and it kind of changed everything

42
00:01:42,478 --> 00:01:47,670
around a little bit so what happened on

43
00:01:46,228 --> 00:01:49,618
Friday is I just kind of finally got

44
00:01:47,670 --> 00:01:52,560
sick of not having a renderer and so we

45
00:01:49,618 --> 00:01:54,859
just started pulling things out into for

46
00:01:52,560 --> 00:01:57,390
lack of a better term a renderer and

47
00:01:54,859 --> 00:01:59,368
honestly I kind of felt like it was the

48
00:01:57,390 --> 00:02:00,629
right thing to do because once I started

49
00:01:59,368 --> 00:02:02,280
doing it I was like yes we should

50
00:02:00,629 --> 00:02:03,688
probably be doing this so I think what's

51
00:02:02,280 --> 00:02:05,070
probably gonna happen here is either

52
00:02:03,688 --> 00:02:06,839
we're just gonna go ahead and write the

53
00:02:05,069 --> 00:02:08,429
renderer this week and next week or

54
00:02:06,840 --> 00:02:11,090
however long it takes probably longer

55
00:02:08,429 --> 00:02:13,080
than that if we write the whole renderer

56
00:02:11,090 --> 00:02:13,800
so we'll take a couple of weeks and

57
00:02:13,080 --> 00:02:16,260
write the renderer

58
00:02:13,800 --> 00:02:18,750
or will at least take a week and write

59
00:02:16,259 --> 00:02:20,840
enough of the renderer to make it not be

60
00:02:18,750 --> 00:02:23,039
bothering me anymore

61
00:02:20,840 --> 00:02:25,860
so yeah maybe we don't write the whole

62
00:02:23,039 --> 00:02:27,359
renderer but we write enough if that

63
00:02:25,860 --> 00:02:29,790
makes sense I don't know which one will

64
00:02:27,360 --> 00:02:31,020
do it remains to be seen you know maybe

65
00:02:29,789 --> 00:02:31,979
we get up a good head of steam we'll

66
00:02:31,020 --> 00:02:33,570
just write the whole thing but I think

67
00:02:31,979 --> 00:02:35,369
at this point it was getting annoying

68
00:02:33,569 --> 00:02:37,560
enough that I just decided to make the

69
00:02:35,370 --> 00:02:39,509
call because we've just got a bunch of

70
00:02:37,560 --> 00:02:41,430
crufty code in there that was sitting

71
00:02:39,509 --> 00:02:42,899
around doing ugly stuff because we

72
00:02:41,430 --> 00:02:45,000
didn't have a renderer and at some point

73
00:02:42,900 --> 00:02:47,159
you just kinda have to say let's do that

74
00:02:45,000 --> 00:02:49,800
yeah and similarly we had another thing

75
00:02:47,159 --> 00:02:53,520
that we might consider to be a blocking

76
00:02:49,800 --> 00:02:54,990
factor which is that in our ground

77
00:02:53,520 --> 00:02:57,030
rendering code which we had kind of

78
00:02:54,990 --> 00:02:58,200
started to want to make into more of a

79
00:02:57,030 --> 00:02:59,520
thing so we could have multiple ground

80
00:02:58,199 --> 00:03:01,109
levels and stuff that was kind of a next

81
00:02:59,520 --> 00:03:03,810
big milestone that we wanted to kind of

82
00:03:01,110 --> 00:03:06,060
hit we run into the problem that we

83
00:03:03,810 --> 00:03:07,860
don't have scaling at all right because

84
00:03:06,060 --> 00:03:09,930
we don't have a renderer and so how are

85
00:03:07,860 --> 00:03:13,020
we gonna test out render you know

86
00:03:09,930 --> 00:03:14,700
rendering of our ground pieces if we

87
00:03:13,020 --> 00:03:17,820
can't scale them because maybe we want

88
00:03:14,699 --> 00:03:20,099
sort of lower levels on the on the

89
00:03:17,819 --> 00:03:21,449
screen to be shrunk right so they look

90
00:03:20,099 --> 00:03:21,750
like they're further away or something

91
00:03:21,449 --> 00:03:23,669
like that

92
00:03:21,750 --> 00:03:25,590
and we want them to kind of be able to

93
00:03:23,669 --> 00:03:27,359
do that smoothly as we go up and down

94
00:03:25,590 --> 00:03:30,240
stairs or other things like this if

95
00:03:27,360 --> 00:03:32,850
that's the case then we need some way

96
00:03:30,240 --> 00:03:34,290
even if it's not a very good renderer or

97
00:03:32,849 --> 00:03:37,139
it's on a very fast renderer we at least

98
00:03:34,289 --> 00:03:40,019
need something right in order to test

99
00:03:37,139 --> 00:03:42,419
that and get a feeling for whether or

100
00:03:40,020 --> 00:03:46,770
not it's going to be workable for what

101
00:03:42,419 --> 00:03:48,719
we need to do right so I think that's

102
00:03:46,770 --> 00:03:50,969
where I'm at and so I think I'm just

103
00:03:48,719 --> 00:03:53,849
gonna go with it until we hit something

104
00:03:50,969 --> 00:03:56,909
that that suggests that we need to do

105
00:03:53,849 --> 00:03:59,250
something differently so let's talk

106
00:03:56,909 --> 00:04:01,289
briefly on the blackboard about what's

107
00:03:59,250 --> 00:04:03,990
gonna happen here just so everyone's on

108
00:04:01,289 --> 00:04:06,060
the same page and you know just at the

109
00:04:03,990 --> 00:04:10,500
head of the week here we can kind of get

110
00:04:06,060 --> 00:04:14,219
a little bit of a kind of a an over an

111
00:04:10,500 --> 00:04:16,829
overview it is day to night 89 yes so

112
00:04:14,219 --> 00:04:20,250
what I want to be able to do with this

113
00:04:16,829 --> 00:04:23,609
renderer is I want to be able to have

114
00:04:20,250 --> 00:04:25,819
the game code right I want to be able to

115
00:04:23,610 --> 00:04:27,540
have the game code issue a bunch of

116
00:04:25,819 --> 00:04:29,430
essentially instruct

117
00:04:27,540 --> 00:04:31,110
that are going to tell the renderer what

118
00:04:29,430 --> 00:04:34,769
to do but I don't want them to actually

119
00:04:31,110 --> 00:04:37,470
be executed right away okay in other

120
00:04:34,769 --> 00:04:39,449
words I want the game to be able to

121
00:04:37,470 --> 00:04:40,650
issue instructions so when we're coming

122
00:04:39,449 --> 00:04:42,389
through here and it wants to render

123
00:04:40,649 --> 00:04:44,159
things every time it wants to render

124
00:04:42,389 --> 00:04:46,919
things what I want to do is I want to

125
00:04:44,160 --> 00:04:48,120
put it into a buffer okay so I want to

126
00:04:46,920 --> 00:04:50,819
put it into a buffer here where it says

127
00:04:48,120 --> 00:04:53,939
like okay you know render the head of

128
00:04:50,819 --> 00:04:56,639
the thing and then render you know this

129
00:04:53,939 --> 00:04:59,579
particles or something right that are

130
00:04:56,639 --> 00:05:01,050
here I want to basically build up a list

131
00:04:59,579 --> 00:05:03,089
of things for the render to do and I

132
00:05:01,050 --> 00:05:04,379
called this a push buffer and the reason

133
00:05:03,089 --> 00:05:05,939
that I called it a push buffer is just

134
00:05:04,379 --> 00:05:09,209
because you keep pushing things on to it

135
00:05:05,939 --> 00:05:10,769
it doesn't like shrink or anything ever

136
00:05:09,209 --> 00:05:12,389
right it just you keep pushing on to it

137
00:05:10,769 --> 00:05:13,709
non to it non to it and eventually the

138
00:05:12,389 --> 00:05:14,969
renderer actually renders the whole

139
00:05:13,709 --> 00:05:16,879
thing and then discards it entirely

140
00:05:14,970 --> 00:05:20,040
right that's just how it works

141
00:05:16,879 --> 00:05:21,659
so why do I want to do that well there's

142
00:05:20,040 --> 00:05:23,550
a couple different reasons I wanted to

143
00:05:21,660 --> 00:05:25,580
do that and I'll briefly say what they

144
00:05:23,550 --> 00:05:25,579
are

145
00:05:25,949 --> 00:05:29,670
the first reason and probably the most

146
00:05:27,930 --> 00:05:31,350
important one is that I want to be able

147
00:05:29,670 --> 00:05:34,830
to sort okay

148
00:05:31,350 --> 00:05:36,240
so I want sorting in here because what I

149
00:05:34,829 --> 00:05:37,319
want to be able to do is I want to be

150
00:05:36,240 --> 00:05:38,550
able to take all the things that we're

151
00:05:37,319 --> 00:05:40,170
gonna get rendered and I want to be able

152
00:05:38,550 --> 00:05:42,300
to think about them in terms of what

153
00:05:40,170 --> 00:05:44,069
order I want to do them in and in order

154
00:05:42,300 --> 00:05:46,259
to do that I need to see them all now I

155
00:05:44,069 --> 00:05:48,449
could try to structure the game so that

156
00:05:46,259 --> 00:05:49,949
it went through and actually did

157
00:05:48,449 --> 00:05:51,659
everything that it need to do in the

158
00:05:49,949 --> 00:05:54,990
order in which it had to be rendered

159
00:05:51,660 --> 00:05:56,640
right we could do that but that imposes

160
00:05:54,990 --> 00:05:58,290
a lot of constraints on the game and it

161
00:05:56,639 --> 00:05:59,789
makes the game do a lot of thinking that

162
00:05:58,290 --> 00:06:01,830
I don't really want the game to have to

163
00:05:59,790 --> 00:06:04,560
do I would like the game routines to be

164
00:06:01,829 --> 00:06:06,089
structured so that they're about making

165
00:06:04,560 --> 00:06:07,530
it fast and flexible for us to do

166
00:06:06,089 --> 00:06:10,889
interesting things and so that they're

167
00:06:07,529 --> 00:06:12,329
optimized for doing a lot of off-screen

168
00:06:10,889 --> 00:06:14,459
calculations as well like I was saying

169
00:06:12,329 --> 00:06:17,009
and so what I don't want to do is build

170
00:06:14,459 --> 00:06:18,810
the whole game architecture or just

171
00:06:17,009 --> 00:06:20,610
around how you're gonna render it now

172
00:06:18,810 --> 00:06:22,410
that may sound like a weird thing to do

173
00:06:20,610 --> 00:06:24,210
not the what I'm suggesting but the

174
00:06:22,410 --> 00:06:25,410
thing I'm suggesting against that may

175
00:06:24,209 --> 00:06:26,519
sound like a weird thing to do to ever

176
00:06:25,410 --> 00:06:28,500
build the game entirely around a

177
00:06:26,519 --> 00:06:29,819
renderer but that wasn't that unusual in

178
00:06:28,500 --> 00:06:31,379
the old days because when system

179
00:06:29,819 --> 00:06:35,219
resources were severely constrained

180
00:06:31,379 --> 00:06:38,310
think Atari 2600 ColecoVision commodore

181
00:06:35,220 --> 00:06:39,600
64 in those days it may have been the

182
00:06:38,310 --> 00:06:43,199
case that you literally

183
00:06:39,600 --> 00:06:45,480
could not make the game work if you ever

184
00:06:43,199 --> 00:06:46,860
wanted to do something like queue up a

185
00:06:45,480 --> 00:06:48,000
bunch of render commands and then

186
00:06:46,860 --> 00:06:50,009
execute them right

187
00:06:48,000 --> 00:06:51,509
that's simply nonsensical because you

188
00:06:50,009 --> 00:06:53,490
did not have the kind of system

189
00:06:51,509 --> 00:06:56,009
resources it would take to do that

190
00:06:53,490 --> 00:06:57,449
efficiently your game would run awful it

191
00:06:56,009 --> 00:06:58,920
wouldn't have enough memory to run it

192
00:06:57,449 --> 00:07:00,539
would be too slow you know who knows

193
00:06:58,920 --> 00:07:02,730
what would happen but that simply wasn't

194
00:07:00,540 --> 00:07:04,710
on the table nowadays we have the luxury

195
00:07:02,730 --> 00:07:07,620
of having just this incredible amount of

196
00:07:04,709 --> 00:07:09,089
Korus power under the hood and so what

197
00:07:07,620 --> 00:07:11,639
we can do is we can make different

198
00:07:09,089 --> 00:07:13,649
trade-offs there now I don't advocate

199
00:07:11,639 --> 00:07:15,060
making the trade-off of let's just write

200
00:07:13,649 --> 00:07:16,859
a bunch of crappy code and use all the

201
00:07:15,060 --> 00:07:18,089
CPU to allow us to run crappy code you

202
00:07:16,860 --> 00:07:19,350
know I advocate against that very

203
00:07:18,089 --> 00:07:20,909
strongly because I'm tired of running

204
00:07:19,350 --> 00:07:22,710
really lousy stuff run machines all the

205
00:07:20,910 --> 00:07:24,450
time which is typically what people tend

206
00:07:22,709 --> 00:07:25,680
to be shipping these days so I don't

207
00:07:24,449 --> 00:07:27,810
advocate that but what I do advocate

208
00:07:25,680 --> 00:07:29,670
doing is trying to figure out where you

209
00:07:27,810 --> 00:07:31,199
can make those trade-offs for the

210
00:07:29,670 --> 00:07:32,790
betterment of the game code as a whole

211
00:07:31,199 --> 00:07:33,870
right and this is one place that we can

212
00:07:32,790 --> 00:07:35,970
do that because there's a bunch of

213
00:07:33,870 --> 00:07:37,980
things we can get if we do this if we

214
00:07:35,970 --> 00:07:39,810
allow the sorting first of all we allow

215
00:07:37,980 --> 00:07:41,819
the game code to be structured in a more

216
00:07:39,810 --> 00:07:44,220
efficient fashion and it doesn't need to

217
00:07:41,819 --> 00:07:45,629
have that sorting logic baked into how

218
00:07:44,220 --> 00:07:46,770
we structure things so all of the stuff

219
00:07:45,629 --> 00:07:48,810
in the game can get more efficient and

220
00:07:46,769 --> 00:07:50,729
more flexible because of that so that's

221
00:07:48,810 --> 00:07:53,000
a plus and the other thing that's a plus

222
00:07:50,730 --> 00:07:57,060
is it means that we can sort things

223
00:07:53,000 --> 00:07:58,800
essentially on if you will we can sort

224
00:07:57,060 --> 00:08:00,839
things differently depending on the

225
00:07:58,800 --> 00:08:03,900
circumstance and so let me explain a

226
00:08:00,839 --> 00:08:06,599
little bit what that means right so

227
00:08:03,899 --> 00:08:08,609
let's say we then want to take this push

228
00:08:06,600 --> 00:08:10,500
buffer and do the rendering and so this

229
00:08:08,610 --> 00:08:17,069
is comes to the next big benefit here

230
00:08:10,500 --> 00:08:19,079
which is the output target right so the

231
00:08:17,069 --> 00:08:20,790
output target is where this push buffer

232
00:08:19,079 --> 00:08:24,859
is actually going to go eventually right

233
00:08:20,790 --> 00:08:27,720
so OpenGL is one place it could go right

234
00:08:24,860 --> 00:08:30,780
direct3d is another place it could go

235
00:08:27,720 --> 00:08:36,149
right mantle is another place it could

236
00:08:30,779 --> 00:08:36,959
go so like trying to think if there's

237
00:08:36,149 --> 00:08:39,478
anything else really

238
00:08:36,960 --> 00:08:42,599
software are api's I don't think so you

239
00:08:39,479 --> 00:08:44,400
could imagine some console API here like

240
00:08:42,599 --> 00:08:46,920
it's like a you know whatever the the

241
00:08:44,399 --> 00:08:48,809
x-bow nor the ps4 is doing your son like

242
00:08:46,919 --> 00:08:51,870
that and then finally our software

243
00:08:48,809 --> 00:08:53,379
renderer right that we right okay and

244
00:08:51,870 --> 00:08:54,610
this software render the

245
00:08:53,379 --> 00:08:56,679
like the different versions of this

246
00:08:54,610 --> 00:08:58,389
right you could imagine maybe there's an

247
00:08:56,679 --> 00:08:59,829
SSC two versions when we do now maybe

248
00:08:58,389 --> 00:09:01,449
there's an EDX version maybe there's an

249
00:08:59,830 --> 00:09:04,210
AV x2 version maybe there's a neon

250
00:09:01,450 --> 00:09:05,440
version for arm-based processors so

251
00:09:04,210 --> 00:09:07,570
there might be different software

252
00:09:05,440 --> 00:09:09,640
renders and so one of the things that

253
00:09:07,570 --> 00:09:13,120
this push buffer does allow us to do is

254
00:09:09,639 --> 00:09:16,299
to the sorting you can almost think of

255
00:09:13,120 --> 00:09:18,220
more as processing right so don't think

256
00:09:16,299 --> 00:09:19,899
of it just as sorting think of it as any

257
00:09:18,220 --> 00:09:22,060
kind of process you might want to do it

258
00:09:19,899 --> 00:09:24,250
allows us to translate this push buffer

259
00:09:22,059 --> 00:09:27,309
into the most efficient thing for the

260
00:09:24,250 --> 00:09:30,759
target without having to rewrite all the

261
00:09:27,309 --> 00:09:33,089
game code right so it does provide a way

262
00:09:30,759 --> 00:09:35,740
for us to get a layer of portability

263
00:09:33,090 --> 00:09:37,960
that makes it it makes it possible for

264
00:09:35,740 --> 00:09:40,960
us to optimize for a lot of renderers

265
00:09:37,960 --> 00:09:45,430
blender targets without us actually

266
00:09:40,960 --> 00:09:46,900
having to to rewrite the game and while

267
00:09:45,429 --> 00:09:48,549
again that's something that sort of

268
00:09:46,899 --> 00:09:50,470
sounds a little bit like well isn't that

269
00:09:48,549 --> 00:09:51,699
kind of cheesy like don't we want to try

270
00:09:50,470 --> 00:09:54,700
and make things optimally efficient

271
00:09:51,700 --> 00:09:58,150
again there is this this concept of what

272
00:09:54,700 --> 00:10:01,990
will you actually end up doing right you

273
00:09:58,149 --> 00:10:04,059
know if you go to the extreme of sort of

274
00:10:01,990 --> 00:10:06,519
the we want to make everything efficient

275
00:10:04,059 --> 00:10:08,319
philosophy it's kind of untenable just

276
00:10:06,519 --> 00:10:10,689
like the extreme that we're at right now

277
00:10:08,320 --> 00:10:11,920
today in most software where you don't

278
00:10:10,690 --> 00:10:13,030
care about performance at all and you're

279
00:10:11,919 --> 00:10:14,019
just like I don't care I don't think

280
00:10:13,029 --> 00:10:16,689
about it I didn't know how memory works

281
00:10:14,019 --> 00:10:17,919
it's a mystery I get back these

282
00:10:16,690 --> 00:10:18,910
reference counted things and I don't

283
00:10:17,919 --> 00:10:22,149
even know where they come from

284
00:10:18,909 --> 00:10:23,949
right just like that the performance

285
00:10:22,149 --> 00:10:26,110
extreme is also a bad decision because

286
00:10:23,950 --> 00:10:28,540
if you actually wanted to make the most

287
00:10:26,110 --> 00:10:30,580
optimal thing that ever existed in you

288
00:10:28,539 --> 00:10:33,939
know in the history of humankind for

289
00:10:30,580 --> 00:10:35,259
this particular platform you would never

290
00:10:33,940 --> 00:10:37,540
finish it right because there's always

291
00:10:35,259 --> 00:10:42,100
more optimization to do so what we're

292
00:10:37,539 --> 00:10:44,169
looking for all the time right is the

293
00:10:42,100 --> 00:10:46,659
right balance we're looking for the

294
00:10:44,169 --> 00:10:49,029
right balance of something we can

295
00:10:46,659 --> 00:10:51,839
achieve that we will actually have time

296
00:10:49,029 --> 00:10:55,269
to do in the course of the project and

297
00:10:51,840 --> 00:10:56,920
that efficiency that that actually

298
00:10:55,269 --> 00:10:58,629
causes it to be a good high quality

299
00:10:56,919 --> 00:11:01,149
product that when you run it you feel

300
00:10:58,629 --> 00:11:02,919
good it's reliable it's fast it's not

301
00:11:01,149 --> 00:11:06,039
wasting your time it's not stuttery it's

302
00:11:02,919 --> 00:11:07,419
not ugly and so on right and so push

303
00:11:06,039 --> 00:11:09,429
buffers allow you to have a

304
00:11:07,419 --> 00:11:13,240
nice balance there in my opinion it

305
00:11:09,429 --> 00:11:15,189
allows you to insert this sort of this

306
00:11:13,240 --> 00:11:17,409
this thought if you will this thinking

307
00:11:15,190 --> 00:11:19,300
in between the output target and the

308
00:11:17,409 --> 00:11:21,189
game that allows you to do optimizations

309
00:11:19,299 --> 00:11:23,529
in a nice space so you could almost

310
00:11:21,190 --> 00:11:26,530
think of it as an I are an intermediate

311
00:11:23,529 --> 00:11:28,329
representation for your render language

312
00:11:26,529 --> 00:11:31,059
like it's sort of like a compiler has an

313
00:11:28,330 --> 00:11:34,450
intermediate step and this thing should

314
00:11:31,059 --> 00:11:36,669
be designed basically for two purposes

315
00:11:34,450 --> 00:11:38,920
it should be designed to allow the game

316
00:11:36,669 --> 00:11:41,229
to quickly you know this should be a

317
00:11:38,919 --> 00:11:42,909
fast pipe here so it should be quickly

318
00:11:41,230 --> 00:11:45,220
describe what it needs to describe in

319
00:11:42,909 --> 00:11:47,259
terms of rendering and also minimally

320
00:11:45,220 --> 00:11:49,300
right it should we want to minimize

321
00:11:47,259 --> 00:11:50,529
because again we want that balance we

322
00:11:49,299 --> 00:11:51,879
don't want to be super piggy we don't

323
00:11:50,529 --> 00:11:55,179
want to put the pig hat on I've got it

324
00:11:51,879 --> 00:11:56,350
here but we don't want to put it on we

325
00:11:55,179 --> 00:11:58,839
also want to be relatively minimal we

326
00:11:56,350 --> 00:12:00,460
don't want the game to be spamming giant

327
00:11:58,840 --> 00:12:01,899
stuff into this push buffer every frame

328
00:12:00,460 --> 00:12:03,370
that's going to cause a performance

329
00:12:01,899 --> 00:12:05,529
problem for us so we want to be able to

330
00:12:03,370 --> 00:12:06,610
quickly and concisely represent the

331
00:12:05,529 --> 00:12:08,169
things that it needs to represent in

332
00:12:06,610 --> 00:12:10,570
order for rendered to occur and then

333
00:12:08,169 --> 00:12:12,639
what we want to do is write good highly

334
00:12:10,570 --> 00:12:14,560
optimized ways of taking this push

335
00:12:12,639 --> 00:12:16,569
buffer and turning it into one of our

336
00:12:14,559 --> 00:12:19,719
output targets either OpenGL calls

337
00:12:16,570 --> 00:12:22,120
direct3d calls some other API I don't

338
00:12:19,720 --> 00:12:24,220
know a console if we ported to one or

339
00:12:22,120 --> 00:12:26,470
our software renderer which will be the

340
00:12:24,220 --> 00:12:28,240
first thing that we do which will be

341
00:12:26,470 --> 00:12:29,440
written presumably will do the SSE to

342
00:12:28,240 --> 00:12:31,389
one because that will run everywhere so

343
00:12:29,440 --> 00:12:35,080
everyone will be able to follow on home

344
00:12:31,389 --> 00:12:37,000
and let's be honest I don't even know if

345
00:12:35,080 --> 00:12:38,590
I have a BX I don't think that - I don't

346
00:12:37,000 --> 00:12:40,840
know if I have a BX in this box it

347
00:12:38,590 --> 00:12:43,149
probably doesn't have it I'm not sure so

348
00:12:40,840 --> 00:12:45,009
anyway that's what we're going to be

349
00:12:43,149 --> 00:12:49,149
doing we started doing the push buffer

350
00:12:45,009 --> 00:12:50,169
stuff and so I'm going to kind of - here

351
00:12:49,149 --> 00:12:51,429
I'm not gonna spend much time maybe

352
00:12:50,169 --> 00:12:52,899
three more minutes talking on the

353
00:12:51,429 --> 00:12:54,459
blackboard and then we'll spend the 40

354
00:12:52,899 --> 00:12:55,870
minutes just kind of working with the

355
00:12:54,460 --> 00:12:57,970
push buffer and showing how we want that

356
00:12:55,870 --> 00:12:59,919
stuff to work and kind of getting things

357
00:12:57,970 --> 00:13:02,740
set up for a little more of our renderer

358
00:12:59,919 --> 00:13:04,419
stuff to happen okay so that push buffer

359
00:13:02,740 --> 00:13:06,580
that's that's how this is going to work

360
00:13:04,419 --> 00:13:08,679
and we've already kind of done the work

361
00:13:06,580 --> 00:13:11,590
on Friday of getting a sort of semblance

362
00:13:08,679 --> 00:13:12,609
of this started we have these output

363
00:13:11,590 --> 00:13:14,080
targets here we don't really know

364
00:13:12,610 --> 00:13:17,129
anything about them I happen to know a

365
00:13:14,080 --> 00:13:18,780
bunch about OpenGL and stuff like that

366
00:13:17,129 --> 00:13:21,210
and I know something about software

367
00:13:18,779 --> 00:13:23,189
renders as well so you know I'm at an

368
00:13:21,210 --> 00:13:24,450
advantage here certainly compared to

369
00:13:23,190 --> 00:13:25,830
people at home who may be a new

370
00:13:24,450 --> 00:13:28,140
experience with this before but in

371
00:13:25,830 --> 00:13:29,990
general I'm trying to take the tack as

372
00:13:28,139 --> 00:13:32,429
if I don't really know much about it

373
00:13:29,990 --> 00:13:34,889
because there are ones that I have no

374
00:13:32,429 --> 00:13:37,379
experience with I don't have I don't

375
00:13:34,889 --> 00:13:39,960
even have a machine that runs mantle

376
00:13:37,379 --> 00:13:41,669
right now I don't think and so on so I'm

377
00:13:39,960 --> 00:13:44,850
still thinking of it in terms of like

378
00:13:41,669 --> 00:13:46,679
yeah there's output targets here and we

379
00:13:44,850 --> 00:13:48,149
don't necessarily know everything about

380
00:13:46,679 --> 00:13:49,319
the arbiter grits we're targeting we

381
00:13:48,149 --> 00:13:51,090
don't even necessarily know what they

382
00:13:49,320 --> 00:13:52,770
all are because a lot of time the game

383
00:13:51,090 --> 00:13:55,920
ships we could end up with a surprise

384
00:13:52,769 --> 00:13:58,319
the chrono scoop could ship Vulcan right

385
00:13:55,919 --> 00:14:00,059
and we want to target it we don't know

386
00:13:58,320 --> 00:14:02,670
anything a bad Vulcan right I've never

387
00:14:00,059 --> 00:14:03,719
even seen the spec for Vulcan so again

388
00:14:02,669 --> 00:14:05,099
what we're trying to do here is set

389
00:14:03,720 --> 00:14:07,139
ourselves up for success so that we can

390
00:14:05,100 --> 00:14:09,029
rapidly adapt to new targets and get

391
00:14:07,139 --> 00:14:10,529
reasonable efficiency out of those

392
00:14:09,029 --> 00:14:13,639
targets without having to rewrite our

393
00:14:10,529 --> 00:14:17,639
whole game because that would be bad

394
00:14:13,639 --> 00:14:20,039
okay so that's what we're trying to do

395
00:14:17,639 --> 00:14:21,779
and then our push buffer is essentially

396
00:14:20,039 --> 00:14:23,219
going to get handed in our first phase

397
00:14:21,779 --> 00:14:26,399
we're going to be doing our software

398
00:14:23,220 --> 00:14:28,860
target here so our software target is

399
00:14:26,399 --> 00:14:30,990
going to essentially be doing what I

400
00:14:28,860 --> 00:14:33,450
would call I kinda just decided this is

401
00:14:30,990 --> 00:14:37,259
what we're doing at least to start GPU

402
00:14:33,450 --> 00:14:44,160
rendering or I should say maybe more

403
00:14:37,259 --> 00:14:47,039
civically GPU esque rendering right and

404
00:14:44,159 --> 00:14:49,829
what that means is we are going to be

405
00:14:47,039 --> 00:14:52,379
writing a renderer that works the way a

406
00:14:49,830 --> 00:14:53,820
GPU would roughly now obviously it's not

407
00:14:52,379 --> 00:14:56,429
exactly like a GPU would work but it's

408
00:14:53,820 --> 00:14:58,140
similar and why are we doing that the

409
00:14:56,429 --> 00:15:00,449
answer is because there's really no

410
00:14:58,139 --> 00:15:01,470
reason for us to ship a software

411
00:15:00,450 --> 00:15:03,990
renderer right

412
00:15:01,470 --> 00:15:05,370
we literally there's no point in

413
00:15:03,990 --> 00:15:08,430
shipping us off for render these days it

414
00:15:05,370 --> 00:15:12,060
just doesn't make any sense right but at

415
00:15:08,429 --> 00:15:14,549
the same time knowing how a GPU works

416
00:15:12,059 --> 00:15:16,469
I mean GPU is simple it's just a CPU

417
00:15:14,549 --> 00:15:17,909
just it's it's just like a Intel

418
00:15:16,470 --> 00:15:19,290
processor at the end of the day just has

419
00:15:17,909 --> 00:15:21,569
a few different trade-offs in there but

420
00:15:19,289 --> 00:15:22,620
it's very very similar it's just you

421
00:15:21,570 --> 00:15:23,820
know kind of purpose-built for a

422
00:15:22,620 --> 00:15:27,149
specific task instead of with more

423
00:15:23,820 --> 00:15:28,860
general tasks right what's very

424
00:15:27,149 --> 00:15:30,689
important to know when you're working

425
00:15:28,860 --> 00:15:32,669
with UVU's is how they actually

426
00:15:30,690 --> 00:15:34,200
function and so what I think is the most

427
00:15:32,669 --> 00:15:35,669
interesting thing for us to do with our

428
00:15:34,200 --> 00:15:37,500
software render cuz I do want to show

429
00:15:35,669 --> 00:15:39,120
you how that whole pipeline works is to

430
00:15:37,500 --> 00:15:41,730
write something that works essentially

431
00:15:39,120 --> 00:15:42,899
the way the GPU actually does work what

432
00:15:41,730 --> 00:15:45,480
that means is we're gonna be a little

433
00:15:42,899 --> 00:15:48,720
slower so we'll be a little slower than

434
00:15:45,480 --> 00:15:53,240
if we didn't write then if we were you

435
00:15:48,720 --> 00:15:55,259
know a hundred percent CPU focused okay

436
00:15:53,240 --> 00:15:58,440
so we'll be a little slower than that

437
00:15:55,259 --> 00:16:00,779
because we won't take any shortcuts that

438
00:15:58,440 --> 00:16:02,970
would only be that would structure the

439
00:16:00,779 --> 00:16:04,769
algorithm so that they run specifically

440
00:16:02,970 --> 00:16:07,710
for a CPU and what a CPU wants to do

441
00:16:04,769 --> 00:16:09,689
right we won't do that but what it does

442
00:16:07,710 --> 00:16:13,110
mean is that we'll get like basically

443
00:16:09,690 --> 00:16:14,910
all the insight out of it right so we're

444
00:16:13,110 --> 00:16:16,769
gonna maximize the degree to which we

445
00:16:14,909 --> 00:16:19,259
get insight into how games are actually

446
00:16:16,769 --> 00:16:20,699
running today because that's the biggest

447
00:16:19,259 --> 00:16:22,049
takeaway I think and it's the thing

448
00:16:20,700 --> 00:16:24,120
that's the most meat immediately

449
00:16:22,049 --> 00:16:25,829
applicable to everything so when we walk

450
00:16:24,120 --> 00:16:27,990
away from this we'll say ok we kind of

451
00:16:25,830 --> 00:16:29,670
now have seen how everything in a GPU

452
00:16:27,990 --> 00:16:34,200
works roughly at least the parts that we

453
00:16:29,669 --> 00:16:36,479
care about and we have some idea of why

454
00:16:34,200 --> 00:16:37,740
shaders look the way they do why they

455
00:16:36,480 --> 00:16:39,539
have the performance characteristics

456
00:16:37,740 --> 00:16:42,649
that they do that sort of thing right

457
00:16:39,539 --> 00:16:45,689
and so what that means in practice

458
00:16:42,649 --> 00:16:49,379
really the primary thing that that

459
00:16:45,690 --> 00:16:52,590
implies is that we are not going to be

460
00:16:49,379 --> 00:16:54,059
doing a scanline renderer right and so

461
00:16:52,590 --> 00:16:55,320
there's kinds of renderers there's

462
00:16:54,059 --> 00:16:58,349
there's two kind of ways you could look

463
00:16:55,320 --> 00:17:02,550
at a renderer working and and they look

464
00:16:58,350 --> 00:17:05,610
like this right so here's my pixel grid

465
00:17:02,549 --> 00:17:12,240
I know it ain't great right here's my

466
00:17:05,609 --> 00:17:14,068
pixel grid again okay so one way to do

467
00:17:12,240 --> 00:17:15,990
it is to say alright if I'm going to

468
00:17:14,068 --> 00:17:18,599
draw something like a triangle right and

469
00:17:15,990 --> 00:17:21,150
I've got that triangle here there it is

470
00:17:18,599 --> 00:17:23,969
one way to draw a triangle would be to

471
00:17:21,150 --> 00:17:25,709
say let's figure out what sort of scan

472
00:17:23,970 --> 00:17:28,980
lines the triangle touches or something

473
00:17:25,709 --> 00:17:32,580
right and I'm gonna then go through them

474
00:17:28,980 --> 00:17:35,519
and figure out what the span is of this

475
00:17:32,579 --> 00:17:38,609
triangle on every scanline right

476
00:17:35,519 --> 00:17:41,789
basically which pixels it spans if that

477
00:17:38,609 --> 00:17:43,509
makes sense okay that one it wouldn't

478
00:17:41,789 --> 00:17:45,789
actually cover so I'd probably be here

479
00:17:43,509 --> 00:17:48,099
right something like that so you

480
00:17:45,789 --> 00:17:50,649
basically figure out which pixels it

481
00:17:48,099 --> 00:17:54,039
touches by doing it in iterative scheme

482
00:17:50,650 --> 00:17:56,650
where you first figure out how much to

483
00:17:54,039 --> 00:17:59,259
step each edge every way as you go down

484
00:17:56,650 --> 00:18:02,140
and you start with a span that's however

485
00:17:59,259 --> 00:18:05,440
wide it is and you exactly rasterize the

486
00:18:02,140 --> 00:18:07,210
rows you need to rasterize right you

487
00:18:05,440 --> 00:18:08,710
know that's the old-school way of making

488
00:18:07,210 --> 00:18:10,569
a software rasterizer that's the way

489
00:18:08,710 --> 00:18:12,370
software rasterizer is typically worked

490
00:18:10,569 --> 00:18:13,799
back in the pentium days when they work

491
00:18:12,369 --> 00:18:16,479
the common thing that game shipped on

492
00:18:13,799 --> 00:18:18,309
we're not going to do that even if that

493
00:18:16,480 --> 00:18:19,660
turned out to be the faster way to do it

494
00:18:18,309 --> 00:18:20,859
today we're not gonna do it that way

495
00:18:19,660 --> 00:18:22,480
that doesn't mean it would be but that

496
00:18:20,859 --> 00:18:26,399
we're not going to the way we're

497
00:18:22,480 --> 00:18:29,349
actually gonna do things is by actually

498
00:18:26,400 --> 00:18:32,200
it's it's called it's an implicit

499
00:18:29,349 --> 00:18:33,429
surface rasterizer essentially instead

500
00:18:32,200 --> 00:18:36,190
of explicitly you could think of this as

501
00:18:33,430 --> 00:18:38,860
an explicit rasterizer right and this is

502
00:18:36,190 --> 00:18:40,900
an implicit rasterizer instead of

503
00:18:38,859 --> 00:18:43,000
walking the pixels that we want to fill

504
00:18:40,900 --> 00:18:45,220
what we're going to do instead is only

505
00:18:43,000 --> 00:18:48,160
get a rough approximation of what they

506
00:18:45,220 --> 00:18:49,660
would be on some boundary and so let's

507
00:18:48,160 --> 00:18:52,060
say that boundary because this is

508
00:18:49,660 --> 00:18:55,480
probably what we actually will use is 16

509
00:18:52,059 --> 00:18:58,629
pixels in a square so it's a 4 by 4

510
00:18:55,480 --> 00:19:00,579
right it's 4 this way and for this way

511
00:18:58,630 --> 00:19:04,690
and what we will do is we will try to

512
00:19:00,579 --> 00:19:06,939
determine which four by fours it might

513
00:19:04,690 --> 00:19:09,160
touch on the screen right so instead of

514
00:19:06,940 --> 00:19:11,620
being explicit we're more doing some

515
00:19:09,160 --> 00:19:13,300
bidding to figure out roughly what 4 by

516
00:19:11,619 --> 00:19:15,989
4 is it touches and then we will

517
00:19:13,299 --> 00:19:17,829
evaluate every pixel in the 4 by 4

518
00:19:15,990 --> 00:19:20,019
regardless of whether the triangle

519
00:19:17,829 --> 00:19:22,179
touches it or not so if the triangle

520
00:19:20,019 --> 00:19:24,670
actually passes through it like this and

521
00:19:22,180 --> 00:19:25,900
these pixels are never touched and

522
00:19:24,670 --> 00:19:27,789
similarly it passes through it like this

523
00:19:25,900 --> 00:19:29,800
and these pixels are never touched it

524
00:19:27,789 --> 00:19:32,200
doesn't matter we will actually compute

525
00:19:29,799 --> 00:19:35,319
the results for all of these pixels and

526
00:19:32,200 --> 00:19:40,080
then we will simply mask away these

527
00:19:35,319 --> 00:19:42,309
pixels here and fill only these right

528
00:19:40,079 --> 00:19:44,799
now there's a lot of reasons for doing

529
00:19:42,309 --> 00:19:47,440
it this way hopefully a fair number of

530
00:19:44,799 --> 00:19:49,089
them will become clearer to you as we

531
00:19:47,440 --> 00:19:51,490
actually implement it I don't want to

532
00:19:49,089 --> 00:19:53,769
kind of go into them all now but this is

533
00:19:51,490 --> 00:19:56,730
how GPUs work nowadays they they do this

534
00:19:53,769 --> 00:19:58,019
sort of they do this sort of the scheme

535
00:19:56,730 --> 00:20:00,360
and so that is what we will be focusing

536
00:19:58,019 --> 00:20:04,079
on which means that our renderer will

537
00:20:00,359 --> 00:20:08,369
look something like push buffer here

538
00:20:04,079 --> 00:20:11,909
right here is the push buffer goes into

539
00:20:08,369 --> 00:20:13,859
some kind of a pinning phase right which

540
00:20:11,910 --> 00:20:16,170
is going to figure out where on the

541
00:20:13,859 --> 00:20:19,199
screen stuff lives of all of our

542
00:20:16,170 --> 00:20:22,830
triangles right it is then going to go

543
00:20:19,200 --> 00:20:25,559
into a 4x4 selection right so it's gonna

544
00:20:22,829 --> 00:20:27,720
pick what four by fours need to get

545
00:20:25,559 --> 00:20:29,399
filled for any given triangle or

546
00:20:27,720 --> 00:20:34,559
whatever the primitive is this is for

547
00:20:29,400 --> 00:20:37,519
primitives here now right and then we're

548
00:20:34,559 --> 00:20:39,240
gonna have a four by four you know

549
00:20:37,519 --> 00:20:41,069
basically I don't know what you want to

550
00:20:39,240 --> 00:20:42,210
call this it's not it might be weird to

551
00:20:41,069 --> 00:20:43,740
call it a rasterizer but I'll call it a

552
00:20:42,210 --> 00:20:46,140
rasterizer but basically something that

553
00:20:43,740 --> 00:20:49,279
actually does the calculation for the

554
00:20:46,140 --> 00:20:52,950
4x4 right and this will be written

555
00:20:49,279 --> 00:20:55,410
essentially so that on SSE right on sse2

556
00:20:52,950 --> 00:20:57,660
which will be our minimum target that's

557
00:20:55,410 --> 00:20:59,460
four wide which means it calculates four

558
00:20:57,660 --> 00:21:03,150
at a time that means we will be doing

559
00:20:59,460 --> 00:21:05,340
four times basically the pipeline for

560
00:21:03,150 --> 00:21:07,110
sse2 we'll be doing two times the

561
00:21:05,339 --> 00:21:10,799
pipeline for AVX because that's eight

562
00:21:07,109 --> 00:21:11,789
wide and we'll be do or you know I'll be

563
00:21:10,799 --> 00:21:15,000
honest I don't remember their naming

564
00:21:11,789 --> 00:21:16,740
schemes and one times the new avx-512 I

565
00:21:15,000 --> 00:21:18,720
think it was called Baby X 256 or

566
00:21:16,740 --> 00:21:22,259
something I don't even know Intel's

567
00:21:18,720 --> 00:21:23,970
naming schemes mystify me I never know

568
00:21:22,259 --> 00:21:26,460
what I'm talking about I know the

569
00:21:23,970 --> 00:21:29,670
instructions I'm thinking of but that's

570
00:21:26,460 --> 00:21:35,880
it so there's another one that's 16 wide

571
00:21:29,670 --> 00:21:37,340
I think that's coming out in skylake so

572
00:21:35,880 --> 00:21:39,570
like the end of this year or sometime

573
00:21:37,339 --> 00:21:45,179
this will be a thing that that's on

574
00:21:39,569 --> 00:21:47,399
desktops and so this cindy pipeline will

575
00:21:45,180 --> 00:21:50,640
actually be able to do the entire 4x4

576
00:21:47,400 --> 00:21:52,440
rasterization in like just you know a

577
00:21:50,640 --> 00:21:53,940
list of instructions that looks like

578
00:21:52,440 --> 00:21:55,289
it's just pop rating on one pixel is

579
00:21:53,940 --> 00:21:57,600
actually doing the full hole 16 by 16

580
00:21:55,289 --> 00:21:59,309
right so this will be quad pomp this

581
00:21:57,599 --> 00:22:01,559
will be double pumped and this will be

582
00:21:59,309 --> 00:22:03,480
single pumped and that's roughly what

583
00:22:01,559 --> 00:22:05,369
we'll do and this right here is

584
00:22:03,480 --> 00:22:08,640
essentially where our shaders will come

585
00:22:05,369 --> 00:22:10,500
in right this will be what what

586
00:22:08,640 --> 00:22:13,950
where we write sort of what we want to

587
00:22:10,500 --> 00:22:16,259
happen per pixel and we will have

588
00:22:13,950 --> 00:22:18,509
basically that working in a way that

589
00:22:16,259 --> 00:22:20,549
allows us to run it at one of these

590
00:22:18,509 --> 00:22:22,980
granularity is depending on the platform

591
00:22:20,549 --> 00:22:25,919
I don't know if we'll ever do an

592
00:22:22,980 --> 00:22:28,589
implementation 480 X 2 weeks or 512 our

593
00:22:25,920 --> 00:22:30,570
cells actually but what we will do is

594
00:22:28,589 --> 00:22:33,539
set up the code so that it essentially

595
00:22:30,569 --> 00:22:36,480
is already working as if it was IV X 512

596
00:22:33,539 --> 00:22:39,359
and it just quad pumps the SSE to part

597
00:22:36,480 --> 00:22:42,329
of it that's probably how we'll set it

598
00:22:39,359 --> 00:22:44,519
up all right so that's what we're

599
00:22:42,329 --> 00:22:47,939
building okay and we're starting with

600
00:22:44,519 --> 00:22:49,730
this part and we'll maybe sort of

601
00:22:47,940 --> 00:22:53,400
cautiously start to work our way down

602
00:22:49,730 --> 00:22:55,589
until we get to this and right now we're

603
00:22:53,400 --> 00:22:58,340
working primarily with rectangles right

604
00:22:55,589 --> 00:23:00,659
and because we're a sprite engine I'm

605
00:22:58,339 --> 00:23:02,939
thinking that probably we will be

606
00:23:00,660 --> 00:23:04,710
exclusively rectangles meaning although

607
00:23:02,940 --> 00:23:07,830
we may think about things in terms of

608
00:23:04,710 --> 00:23:09,420
triangles on a rare occasion I'm trying

609
00:23:07,829 --> 00:23:11,220
to think in my head if we ever actually

610
00:23:09,420 --> 00:23:13,620
want an actual triangle and we probably

611
00:23:11,220 --> 00:23:16,140
don't which means we can save a lot of

612
00:23:13,619 --> 00:23:18,569
fussing through the pipeline by just

613
00:23:16,140 --> 00:23:21,120
dealing with rectangles explicitly and

614
00:23:18,569 --> 00:23:23,429
that actually includes this because as

615
00:23:21,119 --> 00:23:25,889
you will see when we get there it is

616
00:23:23,430 --> 00:23:27,750
actually almost the same cost to fill

617
00:23:25,890 --> 00:23:29,370
rectangles as it is to fill triangles so

618
00:23:27,750 --> 00:23:32,940
we will essentially save ourselves half

619
00:23:29,369 --> 00:23:36,359
the work by just filling rectangles

620
00:23:32,940 --> 00:23:42,029
explicitly if that makes sense and

621
00:23:36,359 --> 00:23:43,049
hopefully it does make sense to you okay

622
00:23:42,029 --> 00:23:45,299
hopefully we're all on the same page

623
00:23:43,049 --> 00:23:47,579
we've got a good 30 minutes left here so

624
00:23:45,299 --> 00:23:49,019
I'm gonna stop the blackboard session

625
00:23:47,579 --> 00:23:50,730
because we can come back to it later

626
00:23:49,019 --> 00:23:52,319
when we start to get into some of these

627
00:23:50,730 --> 00:23:54,450
things in more detail so right now I

628
00:23:52,319 --> 00:23:56,639
just want to take the rest of this time

629
00:23:54,450 --> 00:23:58,590
to start looking at our push buffer and

630
00:23:56,640 --> 00:24:01,140
start thinking about how to make this

631
00:23:58,589 --> 00:24:04,079
into something that's nice and clean for

632
00:24:01,140 --> 00:24:05,730
the game side to use and maybe extend

633
00:24:04,079 --> 00:24:08,369
its feature set a little bit even though

634
00:24:05,730 --> 00:24:09,420
we have no backing for it to allow it to

635
00:24:08,369 --> 00:24:11,639
express the things that we're going to

636
00:24:09,420 --> 00:24:13,110
want to express and when I say that I'm

637
00:24:11,640 --> 00:24:15,450
kind of explicitly talking about things

638
00:24:13,109 --> 00:24:19,500
like scaling and rotation which we have

639
00:24:15,450 --> 00:24:21,620
not been doing because we want to be

640
00:24:19,500 --> 00:24:24,740
able to push those through the pipeline

641
00:24:21,619 --> 00:24:26,899
so that they can actually be used in in

642
00:24:24,740 --> 00:24:29,509
the the subsequent stages right and

643
00:24:26,900 --> 00:24:32,300
right now the game has no way of even

644
00:24:29,509 --> 00:24:34,220
asking for scaling or rotation so it

645
00:24:32,299 --> 00:24:35,509
wouldn't matter if we had a back end of

646
00:24:34,220 --> 00:24:36,079
the renderer that could actually handle

647
00:24:35,509 --> 00:24:37,579
it

648
00:24:36,079 --> 00:24:39,619
it doesn't matter the game can't ask for

649
00:24:37,579 --> 00:24:41,808
it so that's another thing that we kind

650
00:24:39,619 --> 00:24:44,029
of want to look at so let's just start

651
00:24:41,808 --> 00:24:46,160
get our feet wet it's a Monday I don't

652
00:24:44,029 --> 00:24:48,889
expect much from myself let alone you

653
00:24:46,160 --> 00:24:51,590
guys on a Monday you know we're all

654
00:24:48,890 --> 00:24:55,490
sleepy so so I don't blame you I don't

655
00:24:51,589 --> 00:24:57,409
blame you I'm tired too I know you've

656
00:24:55,490 --> 00:24:59,870
been out partying that's just how it

657
00:24:57,410 --> 00:25:01,250
goes it's totally fine let's not get

658
00:24:59,869 --> 00:25:03,169
hung up on it okay let's just take it

659
00:25:01,250 --> 00:25:04,220
easy so what I'm going to do is I'm

660
00:25:03,170 --> 00:25:05,750
going to start pulling some of the stuff

661
00:25:04,220 --> 00:25:07,789
out we've got some stuff here draw

662
00:25:05,750 --> 00:25:10,069
rectangle draw rectangle outline draw a

663
00:25:07,789 --> 00:25:12,349
bitmap draw Matt right you can see it

664
00:25:10,069 --> 00:25:14,240
all there I'm gonna go ahead and say

665
00:25:12,349 --> 00:25:16,699
that stuff is coming in here so we can

666
00:25:14,240 --> 00:25:19,279
look at it all just you know kind of

667
00:25:16,700 --> 00:25:20,990
have it all in one place we can pile

668
00:25:19,279 --> 00:25:22,220
make sure nothing's broken there we also

669
00:25:20,990 --> 00:25:26,109
we didn't break anything

670
00:25:22,220 --> 00:25:28,000
oops did actually no I did dead end

671
00:25:26,109 --> 00:25:30,919
there we go

672
00:25:28,000 --> 00:25:32,808
you know what I type Ms dibs so often

673
00:25:30,920 --> 00:25:34,160
because at work I have a batch file that

674
00:25:32,808 --> 00:25:37,009
will do that for me I'm wondering if I

675
00:25:34,160 --> 00:25:38,960
should just go ahead and make ms dev dot

676
00:25:37,009 --> 00:25:44,089
bat here in the misc directory and just

677
00:25:38,960 --> 00:25:47,350
say you know what Devin there you go so

678
00:25:44,089 --> 00:25:51,919
let's see if that works now he gone the

679
00:25:47,349 --> 00:25:53,269
MS dev lovely alright so that was what

680
00:25:51,920 --> 00:25:54,920
it used to be called they changed the

681
00:25:53,269 --> 00:25:57,200
executable to Devon nobody knows why

682
00:25:54,920 --> 00:25:58,279
they just did I guess they were they

683
00:25:57,200 --> 00:26:01,429
wanted to make sure everyone had to

684
00:25:58,279 --> 00:26:03,799
learn a new thing to type and really it

685
00:26:01,429 --> 00:26:07,519
was really worth it because now everyone

686
00:26:03,799 --> 00:26:10,279
knows it's dev M not M s dev so good

687
00:26:07,519 --> 00:26:11,629
decision guys anyway let's go ahead and

688
00:26:10,279 --> 00:26:14,269
take a look at where we're at to make

689
00:26:11,630 --> 00:26:17,540
sure everything's fine it looks fine to

690
00:26:14,269 --> 00:26:19,369
me we're just kind of in doing that

691
00:26:17,539 --> 00:26:20,420
cache filling there so that's totally

692
00:26:19,369 --> 00:26:21,319
fine and

693
00:26:20,420 --> 00:26:23,690
yeah I don't think there's really

694
00:26:21,319 --> 00:26:25,939
anything that we need to worry about

695
00:26:23,690 --> 00:26:28,220
here it looks like everything was left

696
00:26:25,940 --> 00:26:34,340
in a workable state so let's go ahead

697
00:26:28,220 --> 00:26:36,259
and start playing with this okay so here

698
00:26:34,339 --> 00:26:37,549
we are in here may render hoops EPP

699
00:26:36,259 --> 00:26:40,039
that's got two functions in it here we

700
00:26:37,549 --> 00:26:42,379
are in h this has the stuff that we were

701
00:26:40,039 --> 00:26:45,259
working with so we have a render group

702
00:26:42,380 --> 00:26:47,240
here and you know what we've got piece

703
00:26:45,259 --> 00:26:49,069
count it's still in there but I don't

704
00:26:47,240 --> 00:26:52,099
think we use that anymore why am i a

705
00:26:49,069 --> 00:26:55,429
misaligned let's rotate that over there

706
00:26:52,099 --> 00:26:56,539
there we go so piece count is there I'm

707
00:26:55,430 --> 00:26:58,640
gonna get rid of that because I don't

708
00:26:56,539 --> 00:27:00,649
think we need that for anything I don't

709
00:26:58,640 --> 00:27:04,130
think it actually is used so I'm just

710
00:27:00,650 --> 00:27:05,740
going to vaporize it and get rid of it

711
00:27:04,130 --> 00:27:08,330
there we go

712
00:27:05,740 --> 00:27:13,299
and so what I'd like to do now is go

713
00:27:08,329 --> 00:27:15,799
ahead and say well let's look at adding

714
00:27:13,299 --> 00:27:16,759
multiple types of commands in here

715
00:27:15,799 --> 00:27:20,269
because that's something we're

716
00:27:16,759 --> 00:27:22,369
definitely going to want to do we're

717
00:27:20,269 --> 00:27:24,950
gonna need something that allows us to

718
00:27:22,369 --> 00:27:26,329
kind of interleave commands or do sort

719
00:27:24,950 --> 00:27:27,950
of more fancy stuff with the commands

720
00:27:26,329 --> 00:27:30,799
that end up in this push buffer so I'm

721
00:27:27,950 --> 00:27:34,430
gonna try to expand things to that

722
00:27:30,799 --> 00:27:37,940
effect so first of all let's make this a

723
00:27:34,430 --> 00:27:41,810
a push buffer entry or maybe I should

724
00:27:37,940 --> 00:27:43,160
say it will be a render group entry that

725
00:27:41,809 --> 00:27:44,629
might be a little bit smarter because

726
00:27:43,160 --> 00:27:46,580
hey it's a push buffer is kind of the

727
00:27:44,630 --> 00:27:49,490
implementation of it it's not what it

728
00:27:46,579 --> 00:27:52,069
actually is so that's fine and so that

729
00:27:49,490 --> 00:27:54,049
way I can sort of change that that sort

730
00:27:52,069 --> 00:27:55,669
of name there which doesn't make sense

731
00:27:54,049 --> 00:27:57,409
entity visible piece is not what it

732
00:27:55,670 --> 00:27:59,840
actually is so I'm gonna replace any

733
00:27:57,410 --> 00:28:02,000
visible peace with render group entry so

734
00:27:59,839 --> 00:28:03,199
that we can kind of have that taken care

735
00:28:02,000 --> 00:28:05,569
of there we go

736
00:28:03,200 --> 00:28:08,330
and same thing here just replace that

737
00:28:05,569 --> 00:28:10,730
anywhere that exists where else we got

738
00:28:08,329 --> 00:28:11,869
it you got it here okay so this is

739
00:28:10,730 --> 00:28:14,059
another thing too I'm gonna pull this

740
00:28:11,869 --> 00:28:15,859
out again into that render group and and

741
00:28:14,059 --> 00:28:19,429
there's really this is strictly just for

742
00:28:15,859 --> 00:28:21,139
my own personal benefit of being able to

743
00:28:19,430 --> 00:28:23,600
look at things in one place this is this

744
00:28:21,140 --> 00:28:24,920
is an organizational thing has nothing

745
00:28:23,599 --> 00:28:27,139
to do with the code it's it's purely

746
00:28:24,920 --> 00:28:29,180
organizational so I'm gonna call this

747
00:28:27,140 --> 00:28:32,280
you know render push buffer or something

748
00:28:29,180 --> 00:28:35,670
or a render group you know render

749
00:28:32,279 --> 00:28:37,410
group to output I don't know something

750
00:28:35,670 --> 00:28:38,670
like that and then I'm just going to go

751
00:28:37,410 --> 00:28:40,170
ahead and say that all the stuff that

752
00:28:38,670 --> 00:28:42,779
was happening in there that's going to

753
00:28:40,170 --> 00:28:45,779
happen in here and we will pass now we

754
00:28:42,779 --> 00:28:48,869
will see what it actually is that we

755
00:28:45,779 --> 00:28:49,859
need to pass to make that work obviously

756
00:28:48,869 --> 00:28:54,299
we're going to need the render group

757
00:28:49,859 --> 00:28:55,079
itself that's you know thank thing 1 but

758
00:28:54,299 --> 00:28:57,089
then we're going to need some other

759
00:28:55,079 --> 00:28:59,579
stuff like the output buffer and things

760
00:28:57,089 --> 00:29:02,669
like that so let's see so screen Center

761
00:28:59,579 --> 00:29:05,189
X screen Center Y those can be

762
00:29:02,670 --> 00:29:06,900
determined from the buffer itself let's

763
00:29:05,190 --> 00:29:09,900
see what else we've got here meters 2

764
00:29:06,900 --> 00:29:11,700
pixels that obviously is something that

765
00:29:09,900 --> 00:29:13,140
we can do directly off the render group

766
00:29:11,700 --> 00:29:15,299
because we're restoring that although

767
00:29:13,140 --> 00:29:16,650
that's probably something that we'll do

768
00:29:15,299 --> 00:29:19,139
in a slightly different way a little bit

769
00:29:16,650 --> 00:29:21,300
further down but that's yeah a little

770
00:29:19,140 --> 00:29:22,380
bit a little bit further along in the

771
00:29:21,299 --> 00:29:25,559
process if you will

772
00:29:22,380 --> 00:29:28,170
there we go render group screen Center

773
00:29:25,559 --> 00:29:30,929
will solve in a second and draw a buffer

774
00:29:28,170 --> 00:29:33,330
same thing alright so basically all we

775
00:29:30,930 --> 00:29:35,519
need here is that draw buffer so let's

776
00:29:33,329 --> 00:29:37,589
go ahead and grab that draw buffer out

777
00:29:35,519 --> 00:29:39,690
of things it's just a loaded bitmap

778
00:29:37,589 --> 00:29:41,970
right and that's the target that we're

779
00:29:39,690 --> 00:29:47,460
drawing to so we're gonna go ahead and

780
00:29:41,970 --> 00:29:48,809
and pass that as well right there's that

781
00:29:47,460 --> 00:29:51,390
sort of the target we'll call that the

782
00:29:48,809 --> 00:29:54,659
output target for now so that output

783
00:29:51,390 --> 00:29:56,580
target is this bitmap and the bitmap is

784
00:29:54,660 --> 00:29:57,660
going to I think give us everything else

785
00:29:56,579 --> 00:29:59,460
we need because that's what we're

786
00:29:57,660 --> 00:30:02,160
drawing to there those output targets

787
00:29:59,460 --> 00:30:05,279
and then that screen Center we can

788
00:30:02,160 --> 00:30:08,610
compute pretty trivially by just doing

789
00:30:05,279 --> 00:30:11,160
it off of the output target rank so

790
00:30:08,609 --> 00:30:13,439
there's the output target again the

791
00:30:11,160 --> 00:30:14,700
target let's take a look if there's

792
00:30:13,440 --> 00:30:15,360
anything else that needs to happen I

793
00:30:14,700 --> 00:30:20,910
don't think there is

794
00:30:15,359 --> 00:30:23,189
so this is our draw buffer and this is

795
00:30:20,910 --> 00:30:26,250
also our render group get passed here

796
00:30:23,190 --> 00:30:27,840
and now we should be again nothing

797
00:30:26,250 --> 00:30:29,819
should be changed we should see exactly

798
00:30:27,839 --> 00:30:32,459
the same stuff and again this is just a

799
00:30:29,819 --> 00:30:34,710
simple programming step you'll notice

800
00:30:32,460 --> 00:30:35,759
and I want to keep emphasizing this I

801
00:30:34,710 --> 00:30:37,789
know you guys have heard a bunch of time

802
00:30:35,759 --> 00:30:40,589
so I really can't emphasize it enough

803
00:30:37,789 --> 00:30:42,809
you'll notice that no design work is

804
00:30:40,589 --> 00:30:44,459
happening here the design is happening

805
00:30:42,809 --> 00:30:45,329
organically and that's really really

806
00:30:44,460 --> 00:30:47,759
important under

807
00:30:45,329 --> 00:30:49,918
like basically I have some stuff that I

808
00:30:47,759 --> 00:30:52,288
want to do and I'm just pulling things

809
00:30:49,919 --> 00:30:55,110
out and letting what was already in

810
00:30:52,288 --> 00:30:58,109
place as a structural set of

811
00:30:55,109 --> 00:31:00,748
requirements for the code guide what

812
00:30:58,109 --> 00:31:02,609
lives where and who does what when right

813
00:31:00,749 --> 00:31:04,679
I'm just and I'm making these sort of

814
00:31:02,609 --> 00:31:06,238
incremental steps that's a really

815
00:31:04,679 --> 00:31:07,769
important skill to learn it's a really

816
00:31:06,239 --> 00:31:10,489
important skill to practice because it's

817
00:31:07,769 --> 00:31:13,710
what keeps you out of the bad habit of

818
00:31:10,489 --> 00:31:15,239
over-designing overthinking not getting

819
00:31:13,710 --> 00:31:18,269
anything done sitting there drawing

820
00:31:15,239 --> 00:31:19,798
things you know class diagrams or things

821
00:31:18,269 --> 00:31:21,808
like this which are all just basically

822
00:31:19,798 --> 00:31:24,148
totally useless like you really want to

823
00:31:21,808 --> 00:31:27,450
focus on write the code that works and

824
00:31:24,148 --> 00:31:30,388
then start pulling it up and cleaning it

825
00:31:27,450 --> 00:31:32,249
up and making it into nicer pieces using

826
00:31:30,388 --> 00:31:34,258
those compression steps that's just kind

827
00:31:32,249 --> 00:31:35,879
of like pull things out make them

828
00:31:34,259 --> 00:31:37,288
simpler pull things out make them

829
00:31:35,878 --> 00:31:39,238
simpler you know that's sort of

830
00:31:37,288 --> 00:31:40,440
leveraging that's the way to do it it

831
00:31:39,239 --> 00:31:41,639
works really well you've seen it work a

832
00:31:40,440 --> 00:31:43,019
bunch of times really well in the stream

833
00:31:41,638 --> 00:31:45,269
and it's gonna keep working well for us

834
00:31:43,019 --> 00:31:47,579
so I really want to emphasize it's

835
00:31:45,269 --> 00:31:49,579
really the best way to go if you take

836
00:31:47,579 --> 00:31:52,199
anything else away from handmade hero

837
00:31:49,579 --> 00:31:53,428
please take that away it's it's a really

838
00:31:52,200 --> 00:31:56,609
valuable programming thing I wish I'd

839
00:31:53,429 --> 00:31:57,659
known a long long long time ago and in

840
00:31:56,608 --> 00:31:59,398
some sense it's something everyone

841
00:31:57,659 --> 00:32:01,950
starts out doing like I used to do it

842
00:31:59,398 --> 00:32:05,428
instinctively until a bunch of C++

843
00:32:01,950 --> 00:32:08,129
nonsense you know books and stuff and

844
00:32:05,429 --> 00:32:10,109
people essentially taught me out of it

845
00:32:08,128 --> 00:32:12,209
by telling me that this was better code

846
00:32:10,108 --> 00:32:16,019
was the other way they're wrong it's not

847
00:32:12,210 --> 00:32:18,119
so please you know follow your instincts

848
00:32:16,019 --> 00:32:19,710
because your instincts are good don't

849
00:32:18,118 --> 00:32:23,819
follow the books because the books are

850
00:32:19,710 --> 00:32:25,769
lousy and so ok so again we're in a good

851
00:32:23,819 --> 00:32:27,628
place here we've got our render group to

852
00:32:25,769 --> 00:32:29,339
output working and so now what I want to

853
00:32:27,628 --> 00:32:31,079
do is introduce a different type of

854
00:32:29,339 --> 00:32:33,238
command so that when we're going through

855
00:32:31,079 --> 00:32:35,278
the push buffer we can have commands

856
00:32:33,239 --> 00:32:37,308
that are kind of interleaved now again

857
00:32:35,278 --> 00:32:39,239
this is somewhat inefficient because

858
00:32:37,308 --> 00:32:40,710
because we have different commands we

859
00:32:39,239 --> 00:32:42,690
have to look at each one to see what we

860
00:32:40,710 --> 00:32:44,038
need to do but remember that's why we're

861
00:32:42,690 --> 00:32:45,470
focusing on trying to be concise with

862
00:32:44,038 --> 00:32:47,339
these commands so that we're not

863
00:32:45,470 --> 00:32:52,230
constantly like we don't want to have

864
00:32:47,339 --> 00:32:57,109
like triangle or rectangle be

865
00:32:52,230 --> 00:33:00,230
necessarily the have have a

866
00:32:57,109 --> 00:33:03,859
this we don't want anything that isn't

867
00:33:00,230 --> 00:33:06,170
relatively expensive to render to be in

868
00:33:03,859 --> 00:33:09,949
the push buffer as a single item if that

869
00:33:06,170 --> 00:33:11,630
makes sense like we don't want to fill

870
00:33:09,950 --> 00:33:13,580
the put like let's say particle let's

871
00:33:11,630 --> 00:33:14,750
say we had particle effects so tons of

872
00:33:13,579 --> 00:33:16,759
rectangles that are drawn with the same

873
00:33:14,750 --> 00:33:18,650
texture we wouldn't want to push each

874
00:33:16,759 --> 00:33:21,048
particle into the push buffer because we

875
00:33:18,650 --> 00:33:22,309
have to keep deciding as each one goes

876
00:33:21,048 --> 00:33:23,779
there to say what is this oh it's a

877
00:33:22,308 --> 00:33:25,940
particle call some particle code right

878
00:33:23,779 --> 00:33:29,298
so we want to do is aggregate those

879
00:33:25,940 --> 00:33:31,850
things up to the point as far as we can

880
00:33:29,298 --> 00:33:34,369
basically right and so something like a

881
00:33:31,849 --> 00:33:36,349
bitmap blip we can actually probably

882
00:33:34,369 --> 00:33:38,569
make that one entry because that's gonna

883
00:33:36,349 --> 00:33:40,389
require switching what texture we're

884
00:33:38,569 --> 00:33:43,369
using potentially and things like that

885
00:33:40,390 --> 00:33:44,660
so we can we can think about that as

886
00:33:43,369 --> 00:33:46,039
being appropriate for a push buffer

887
00:33:44,660 --> 00:33:47,540
because maybe there's a hundred thousand

888
00:33:46,039 --> 00:33:49,819
of those on the screen that's not that

889
00:33:47,539 --> 00:33:51,109
big of a deal but things were there's

890
00:33:49,819 --> 00:33:53,599
going to be like 10 thousand a hundred

891
00:33:51,109 --> 00:33:55,219
thousand of them it's not an option to

892
00:33:53,599 --> 00:33:56,990
put them in the push bumper individually

893
00:33:55,220 --> 00:33:59,120
because all of that testing to see what

894
00:33:56,990 --> 00:34:01,130
they are will kill us so we have to be

895
00:33:59,119 --> 00:34:02,959
careful what we do we'll start right now

896
00:34:01,130 --> 00:34:04,640
with just doing something very basic but

897
00:34:02,960 --> 00:34:06,410
you know keep that in mind that we're

898
00:34:04,640 --> 00:34:09,980
gonna have to do some things there that

899
00:34:06,410 --> 00:34:12,289
allow us to that the proof that will

900
00:34:09,980 --> 00:34:14,510
prevent that switching overhead from

901
00:34:12,289 --> 00:34:15,469
becoming any kind of dominant factor we

902
00:34:14,510 --> 00:34:16,490
don't have to think about it all the

903
00:34:15,469 --> 00:34:17,719
time but we have to think about it a

904
00:34:16,489 --> 00:34:20,299
little is I guess the way they would say

905
00:34:17,719 --> 00:34:22,579
it so when we when we grab out an entry

906
00:34:20,300 --> 00:34:24,919
here right and I'm going to change the

907
00:34:22,579 --> 00:34:26,809
word piece to the word entry so that

908
00:34:24,918 --> 00:34:29,509
it's a little more clear what that is

909
00:34:26,809 --> 00:34:32,148
there so when we grab out one of these

910
00:34:29,510 --> 00:34:36,619
and we're looking to see what we want to

911
00:34:32,148 --> 00:34:38,690
do with it right when I do that what I

912
00:34:36,619 --> 00:34:42,230
want to do is I want to say okay let's

913
00:34:38,690 --> 00:34:45,190
see what type it actually is so when we

914
00:34:42,230 --> 00:34:47,570
grab an entry we're actually going to

915
00:34:45,190 --> 00:34:49,760
we're going to see what type it is and

916
00:34:47,570 --> 00:34:52,429
then based on what type it is we're

917
00:34:49,760 --> 00:34:56,380
actually gonna do different stuff right

918
00:34:52,429 --> 00:34:59,240
so we might have a render group entry

919
00:34:56,380 --> 00:35:01,400
that's going to be a clear right oops

920
00:34:59,239 --> 00:35:02,868
sorry it's going to be a clear we might

921
00:35:01,400 --> 00:35:04,400
have a render group entry because I

922
00:35:02,869 --> 00:35:07,220
spoke of that one before

923
00:35:04,400 --> 00:35:09,139
that's going to be like a rectangle

924
00:35:07,219 --> 00:35:10,279
which is you know like I've seen before

925
00:35:09,139 --> 00:35:15,379
that we kind of know

926
00:35:10,280 --> 00:35:16,970
is where a lot of our sprite puddings

927
00:35:15,380 --> 00:35:19,519
gonna come and then we'll have other

928
00:35:16,969 --> 00:35:20,779
stuff here right now we don't know what

929
00:35:19,519 --> 00:35:22,820
that stuff is going to be but I would

930
00:35:20,780 --> 00:35:25,130
we're gonna handle basically everything

931
00:35:22,820 --> 00:35:26,330
that we possibly that goes through there

932
00:35:25,130 --> 00:35:28,550
we want to make sure that we handle it

933
00:35:26,329 --> 00:35:30,650
so what I'm gonna do here is introduce

934
00:35:28,550 --> 00:35:33,350
another one of our in Falco path things

935
00:35:30,650 --> 00:35:35,450
which is invalid default case and what

936
00:35:33,349 --> 00:35:37,940
invalid default cases is it's just a

937
00:35:35,449 --> 00:35:41,689
macro that lets us know that the default

938
00:35:37,940 --> 00:35:44,150
case in our switch statement is not

939
00:35:41,690 --> 00:35:47,059
allowed to ever happen right it's just

940
00:35:44,150 --> 00:35:48,860
not and so if it ever does we want to

941
00:35:47,059 --> 00:35:50,179
assert because basically the only things

942
00:35:48,860 --> 00:35:53,000
that should ever get pushed on here are

943
00:35:50,179 --> 00:35:54,079
things that we can handle and if there's

944
00:35:53,000 --> 00:35:55,610
something that we don't want to handle

945
00:35:54,079 --> 00:35:57,799
for some reason we should add a case for

946
00:35:55,610 --> 00:35:59,180
it and note we're not doing anything for

947
00:35:57,800 --> 00:36:00,320
that case we're just not handling that

948
00:35:59,179 --> 00:36:01,940
thing like let's say it was something

949
00:36:00,320 --> 00:36:05,840
that was only applicable to OpenGL or

950
00:36:01,940 --> 00:36:07,280
something like that right okay and so

951
00:36:05,840 --> 00:36:09,019
then what I'm gonna do further is I'm

952
00:36:07,280 --> 00:36:12,050
gonna say all right that base address

953
00:36:09,019 --> 00:36:14,269
right is actually going to go up

954
00:36:12,050 --> 00:36:16,490
whatever we're advancing by it's

955
00:36:14,269 --> 00:36:18,199
actually gonna go up by a different

956
00:36:16,489 --> 00:36:20,059
value depending on what's in here right

957
00:36:18,199 --> 00:36:22,579
so they're gonna kind of be compressed

958
00:36:20,059 --> 00:36:23,809
now that may not be the fastest option

959
00:36:22,579 --> 00:36:26,119
at the end of the day but I just wanna I

960
00:36:23,809 --> 00:36:30,289
want to make sure we support it so that

961
00:36:26,119 --> 00:36:32,809
I'm gonna do that for now we'll see we

962
00:36:30,289 --> 00:36:34,579
will see what we want to do at the end

963
00:36:32,809 --> 00:36:36,559
of the day for it because there's other

964
00:36:34,579 --> 00:36:38,059
stuff we could do there we can do it

965
00:36:36,559 --> 00:36:40,159
this way the other way we can do it is

966
00:36:38,059 --> 00:36:41,719
by having some pointer chasing happening

967
00:36:40,159 --> 00:36:44,210
there again I'm not sure which one of

968
00:36:41,719 --> 00:36:47,509
those we want to do so we will kind of

969
00:36:44,210 --> 00:36:49,429
leave it open and we'll see we'll sort

970
00:36:47,510 --> 00:36:51,320
of see what happens when we get to it

971
00:36:49,429 --> 00:36:53,089
all right so when we do this what we

972
00:36:51,320 --> 00:36:55,970
want to do now is say we've got our

973
00:36:53,090 --> 00:36:58,610
render group entry so let's say render

974
00:36:55,969 --> 00:37:04,039
entry clear is a thing that we have and

975
00:36:58,610 --> 00:37:05,390
we're just gonna cast right are we're

976
00:37:04,039 --> 00:37:08,659
gonna we're gonna basically cast

977
00:37:05,389 --> 00:37:10,159
whatever the entry was to be the thing

978
00:37:08,659 --> 00:37:11,569
that we know that it actually is now

979
00:37:10,159 --> 00:37:13,759
after that type this is this is

980
00:37:11,570 --> 00:37:15,500
basically a discriminated Union if you

981
00:37:13,760 --> 00:37:18,450
will and then we're gonna have a

982
00:37:15,500 --> 00:37:21,539
rectangle that's another option here

983
00:37:18,449 --> 00:37:26,669
and that's gonna be done like this where

984
00:37:21,539 --> 00:37:28,109
we have render entry rectangle so and

985
00:37:26,670 --> 00:37:30,059
then we're gonna act on those and so

986
00:37:28,108 --> 00:37:32,548
what we want to do here you know what I

987
00:37:30,059 --> 00:37:36,180
could do too is I could just actually

988
00:37:32,548 --> 00:37:39,630
call this entry as well like so and

989
00:37:36,179 --> 00:37:41,399
actually make this the type list entity

990
00:37:39,630 --> 00:37:43,528
entry or something like that so when we

991
00:37:41,400 --> 00:37:45,869
know that's type we turn into entry so

992
00:37:43,528 --> 00:37:48,568
then at the end we will take whatever

993
00:37:45,869 --> 00:37:51,690
the size of the entry actually is right

994
00:37:48,568 --> 00:37:55,768
and we will advance by that thing

995
00:37:51,690 --> 00:37:57,990
like so so there we go okay so now if we

996
00:37:55,768 --> 00:38:00,028
have these two now instead of making

997
00:37:57,989 --> 00:38:01,588
render group entry the vast thing I'm

998
00:38:00,028 --> 00:38:04,798
actually going to make it so that

999
00:38:01,588 --> 00:38:09,869
there's two types there's a render entry

1000
00:38:04,798 --> 00:38:12,268
clear and a render entry rectangle and

1001
00:38:09,869 --> 00:38:13,858
right now rectangle we know what that

1002
00:38:12,268 --> 00:38:16,259
looks like for now at least it looks

1003
00:38:13,858 --> 00:38:19,278
like this and then we've got a rectangle

1004
00:38:16,260 --> 00:38:21,839
entry clear that is a different one and

1005
00:38:19,278 --> 00:38:23,759
and that's going to be some other thing

1006
00:38:21,838 --> 00:38:26,338
presumably what render entered clear

1007
00:38:23,759 --> 00:38:30,028
will be was just an RGBA that's whatever

1008
00:38:26,338 --> 00:38:31,980
we want to do our clear to right and

1009
00:38:30,028 --> 00:38:34,798
then of course everything needs

1010
00:38:31,980 --> 00:38:38,278
essentially one of these at the top of

1011
00:38:34,798 --> 00:38:39,568
it like so we'll call that well we can

1012
00:38:38,278 --> 00:38:42,588
actually call that the header I suppose

1013
00:38:39,568 --> 00:38:45,690
like so on and in fact I could call this

1014
00:38:42,588 --> 00:38:47,759
render group entry header which might be

1015
00:38:45,690 --> 00:38:50,250
a little bit clearer I could also call

1016
00:38:47,759 --> 00:38:51,539
it typeless render group energy I don't

1017
00:38:50,250 --> 00:38:53,309
know it's not worth thinking about too

1018
00:38:51,539 --> 00:38:55,528
much so we'll just leave with that and

1019
00:38:53,309 --> 00:38:57,990
so we're gonna have an enum here which

1020
00:38:55,528 --> 00:39:01,710
is going to be the type who's going to

1021
00:38:57,989 --> 00:39:04,318
be the render group entry type and the

1022
00:39:01,710 --> 00:39:08,579
types are going to be the two kinds that

1023
00:39:04,318 --> 00:39:11,608
I have right so I've got clear I've got

1024
00:39:08,579 --> 00:39:13,950
rectangle okay and so what I'm going to

1025
00:39:11,608 --> 00:39:16,139
do in here is in that header I'm going

1026
00:39:13,949 --> 00:39:20,699
to have the type there I'm going to have

1027
00:39:16,139 --> 00:39:21,778
a in addition to the type there was

1028
00:39:20,699 --> 00:39:24,739
something else that I wanted to have

1029
00:39:21,778 --> 00:39:24,739
what was it

1030
00:39:26,519 --> 00:39:32,320
maybe there wasn't now that I'm thinking

1031
00:39:29,469 --> 00:39:35,199
about it am I am I did I misspeak do we

1032
00:39:32,320 --> 00:39:36,760
only need the the header for some reason

1033
00:39:35,199 --> 00:39:38,799
I was thinking in my head just moments

1034
00:39:36,760 --> 00:39:41,020
ago I'm like well we'll put the type in

1035
00:39:38,800 --> 00:39:43,990
there and then we'll put something else

1036
00:39:41,019 --> 00:39:45,489
and then for some reason I'm not

1037
00:39:43,989 --> 00:39:47,769
thinking of anything so it may literally

1038
00:39:45,489 --> 00:39:50,169
just be the type that may be the only

1039
00:39:47,769 --> 00:39:52,360
thing we actually need all right I take

1040
00:39:50,170 --> 00:39:53,980
it back take it back maybe it's a Monday

1041
00:39:52,360 --> 00:39:55,120
I just forgot what it was in a minute

1042
00:39:53,980 --> 00:39:57,550
I'm gonna be like oh yeah we need that

1043
00:39:55,119 --> 00:40:00,969
thing but there we go

1044
00:39:57,550 --> 00:40:04,600
all right so what you can see what I've

1045
00:40:00,969 --> 00:40:06,039
done here right is I've essentially made

1046
00:40:04,599 --> 00:40:08,500
it what's called I've made what's called

1047
00:40:06,039 --> 00:40:10,989
a scrim innate immune yin all right and

1048
00:40:08,500 --> 00:40:14,070
I'll put that up here so you know I'll

1049
00:40:10,989 --> 00:40:18,669
just say okay render group entry is a

1050
00:40:14,070 --> 00:40:20,170
discriminated Union right and

1051
00:40:18,670 --> 00:40:22,809
essentially what a screw native Union is

1052
00:40:20,170 --> 00:40:25,210
and furthermore it's it's a you might

1053
00:40:22,809 --> 00:40:27,159
call it an efficient discriminated union

1054
00:40:25,210 --> 00:40:30,039
or a memory efficient discriminated

1055
00:40:27,159 --> 00:40:33,519
Union right maybe a compact

1056
00:40:30,039 --> 00:40:35,349
discriminated Union so Union as you know

1057
00:40:33,519 --> 00:40:37,719
is something we've used before in actual

1058
00:40:35,349 --> 00:40:40,150
see where we do like Union and we say

1059
00:40:37,719 --> 00:40:42,639
okay you know we've got a Union it's got

1060
00:40:40,150 --> 00:40:43,960
the render group entry header

1061
00:40:42,639 --> 00:40:45,909
yeah I'm sorry it's got the red we have

1062
00:40:43,960 --> 00:40:50,010
to clear it's the clear we got the

1063
00:40:45,909 --> 00:40:54,039
render group entry rectangle or whatever

1064
00:40:50,010 --> 00:40:56,020
sorry so rectangle right and what that

1065
00:40:54,039 --> 00:40:58,659
does is that makes it so that the size

1066
00:40:56,019 --> 00:41:01,989
of each of these things is whatever the

1067
00:40:58,659 --> 00:41:03,969
largest one is so they'll all fit but

1068
00:41:01,989 --> 00:41:05,229
what I want to do oh and and I should

1069
00:41:03,969 --> 00:41:08,349
say that's a regular Union a

1070
00:41:05,230 --> 00:41:11,619
discriminated Union right is one that

1071
00:41:08,349 --> 00:41:13,750
stores what type it is it discriminates

1072
00:41:11,619 --> 00:41:15,429
essentially is what there's a type field

1073
00:41:13,750 --> 00:41:16,960
that discriminates among the the

1074
00:41:15,429 --> 00:41:19,109
possible types that it is so that's

1075
00:41:16,960 --> 00:41:21,429
called the discriminated union typically

1076
00:41:19,110 --> 00:41:22,829
probably from category theory I don't

1077
00:41:21,429 --> 00:41:25,929
actually know where that term comes down

1078
00:41:22,829 --> 00:41:27,579
and furthermore what I'm doing is I'm

1079
00:41:25,929 --> 00:41:30,460
saying I'm gonna actually compact these

1080
00:41:27,579 --> 00:41:32,139
down so that instead of using like the

1081
00:41:30,460 --> 00:41:34,780
largest size possible so I know that

1082
00:41:32,139 --> 00:41:36,279
they all fit and not having to and and I

1083
00:41:34,780 --> 00:41:37,630
can always advance by the same size

1084
00:41:36,280 --> 00:41:38,140
every time like base address would

1085
00:41:37,630 --> 00:41:39,970
always be

1086
00:41:38,139 --> 00:41:42,129
equals the size of whatever the Union

1087
00:41:39,969 --> 00:41:44,288
the whole Union size is I'm actually

1088
00:41:42,130 --> 00:41:45,430
gonna say I'm gonna look at since I'm

1089
00:41:44,289 --> 00:41:46,690
already looking at the type is I'm gonna

1090
00:41:45,429 --> 00:41:49,899
advance by whatever

1091
00:41:46,690 --> 00:41:51,240
I know its size to be and there's

1092
00:41:49,900 --> 00:41:53,440
actually a reason that I'm doing that

1093
00:41:51,239 --> 00:41:54,459
it's a little forward-looking but it's

1094
00:41:53,440 --> 00:41:56,889
basically so that we can push

1095
00:41:54,460 --> 00:41:59,500
arbitrarily sized stuff on the push

1096
00:41:56,889 --> 00:42:00,639
buffer and I think that you will agree

1097
00:41:59,500 --> 00:42:03,400
with me when we get to the end of this

1098
00:42:00,639 --> 00:42:06,358
that that turns out to be a really handy

1099
00:42:03,400 --> 00:42:09,760
trick but we haven't gotten there yet so

1100
00:42:06,358 --> 00:42:12,578
no need to really go into it now anyway

1101
00:42:09,760 --> 00:42:15,430
so essentially what we're doing here is

1102
00:42:12,579 --> 00:42:17,589
we're making one of those unions and I

1103
00:42:15,429 --> 00:42:19,568
guess like I said maybe we really don't

1104
00:42:17,588 --> 00:42:21,190
need that header I don't know I'll leave

1105
00:42:19,568 --> 00:42:24,460
it on there for now but might be that we

1106
00:42:21,190 --> 00:42:27,760
only need the type so with that in mind

1107
00:42:24,460 --> 00:42:30,420
we now have the ability to sort of walk

1108
00:42:27,760 --> 00:42:33,069
through these however we want to and

1109
00:42:30,420 --> 00:42:34,960
process them differently so in the case

1110
00:42:33,068 --> 00:42:36,338
where we get it clear we can actually do

1111
00:42:34,960 --> 00:42:37,869
the clearing operation here in the case

1112
00:42:36,338 --> 00:42:39,518
we get a rectangle we could do the

1113
00:42:37,869 --> 00:42:42,309
rectangle operation now we know what the

1114
00:42:39,518 --> 00:42:44,469
rectangle operation is it's this right

1115
00:42:42,309 --> 00:42:47,559
but you can see this already had a

1116
00:42:44,469 --> 00:42:48,848
discriminated operation in it it was

1117
00:42:47,559 --> 00:42:51,278
looking to see whether it had a bitmap

1118
00:42:48,849 --> 00:42:53,048
or just a regular rectangle so our next

1119
00:42:51,278 --> 00:42:56,259
step after we get this working with the

1120
00:42:53,048 --> 00:42:58,809
clear is basically going to be let's

1121
00:42:56,259 --> 00:43:00,130
pull those two out so now we have the

1122
00:42:58,809 --> 00:43:02,769
concept of two different types of

1123
00:43:00,130 --> 00:43:04,358
rectangles we can also add rectangle

1124
00:43:02,768 --> 00:43:05,709
outlines in here right so now that we

1125
00:43:04,358 --> 00:43:08,828
have types we can start to kind of go

1126
00:43:05,710 --> 00:43:10,298
nuts with having as many different sorts

1127
00:43:08,829 --> 00:43:13,990
of things as we have render operations

1128
00:43:10,298 --> 00:43:15,818
which is exactly what I want so let's

1129
00:43:13,989 --> 00:43:18,159
keep going with this let me go ahead and

1130
00:43:15,818 --> 00:43:20,440
compile so what we have to do now is say

1131
00:43:18,159 --> 00:43:21,788
that push piece push piece is actually

1132
00:43:20,440 --> 00:43:24,039
doing something slightly different

1133
00:43:21,789 --> 00:43:25,809
we've got push render element again I

1134
00:43:24,039 --> 00:43:28,480
kind of set us up for success this is a

1135
00:43:25,809 --> 00:43:30,069
little bit of the just the experience

1136
00:43:28,480 --> 00:43:31,539
talking I kind of know roughly how these

1137
00:43:30,068 --> 00:43:32,619
things go so I'm not having to go

1138
00:43:31,539 --> 00:43:34,509
through all the steps I would have to go

1139
00:43:32,619 --> 00:43:35,740
to to determine what a good architecture

1140
00:43:34,509 --> 00:43:38,528
of every bush buffer is I kind of know

1141
00:43:35,739 --> 00:43:39,879
one that I like that works but you know

1142
00:43:38,528 --> 00:43:40,929
it's not that much different if you

1143
00:43:39,880 --> 00:43:42,548
didn't know you just have to go through

1144
00:43:40,929 --> 00:43:43,598
more iterations of trying things out but

1145
00:43:42,548 --> 00:43:45,250
you'd be programming in roughly the same

1146
00:43:43,599 --> 00:43:46,568
way yeah you just wouldn't have that

1147
00:43:45,250 --> 00:43:48,179
benefit of the look-ahead that you do

1148
00:43:46,568 --> 00:43:50,230
when you've done it before

1149
00:43:48,179 --> 00:43:51,339
and it's hard and there's nothing you

1150
00:43:50,230 --> 00:43:53,800
can do about that that's just

1151
00:43:51,340 --> 00:43:55,750
variants and the more experience you

1152
00:43:53,800 --> 00:43:57,460
have the easier it becomes because you

1153
00:43:55,750 --> 00:43:59,949
can make better decisions right so

1154
00:43:57,460 --> 00:44:01,720
anyway what I want to do here is say

1155
00:43:59,949 --> 00:44:03,879
when we push a render element we're now

1156
00:44:01,719 --> 00:44:05,469
going to push not only the size of the

1157
00:44:03,880 --> 00:44:06,820
render element we're also going to push

1158
00:44:05,469 --> 00:44:08,199
the type of the render element and you

1159
00:44:06,820 --> 00:44:11,680
know what I should do here I should

1160
00:44:08,199 --> 00:44:13,960
actually do this here I'm gonna do even

1161
00:44:11,679 --> 00:44:15,429
get another trick this is the full

1162
00:44:13,960 --> 00:44:18,940
ridiculousness

1163
00:44:15,429 --> 00:44:20,829
of the world you know this is a real

1164
00:44:18,940 --> 00:44:24,280
ridiculous trick I'm just going to show

1165
00:44:20,829 --> 00:44:25,750
it to you because why not right so what

1166
00:44:24,280 --> 00:44:29,140
I'm gonna do here is I'm going to do a

1167
00:44:25,750 --> 00:44:32,409
little trick which is like you know

1168
00:44:29,139 --> 00:44:35,799
we'll prepend something to the type name

1169
00:44:32,409 --> 00:44:37,960
itself to make the identifier so our

1170
00:44:35,800 --> 00:44:40,510
types in our enum are the same as our

1171
00:44:37,960 --> 00:44:43,780
structures only with this prepended to

1172
00:44:40,510 --> 00:44:46,660
them okay and then what I'm gonna do is

1173
00:44:43,780 --> 00:44:49,360
I'm gonna define push render element to

1174
00:44:46,659 --> 00:44:51,429
be a macro the macro is gonna take the

1175
00:44:49,360 --> 00:44:54,579
group and it's gonna take the type to

1176
00:44:51,429 --> 00:44:56,409
push on okay makes sense and then what

1177
00:44:54,579 --> 00:44:58,539
that's gonna do is that's going to call

1178
00:44:56,409 --> 00:45:00,579
our actual function it's gonna pass the

1179
00:44:58,539 --> 00:45:02,590
group straight through it's gonna take

1180
00:45:00,579 --> 00:45:04,900
the size of whatever that type is and

1181
00:45:02,590 --> 00:45:07,269
pass that but then it's also gonna go

1182
00:45:04,900 --> 00:45:10,599
ahead and take that render group entry

1183
00:45:07,269 --> 00:45:14,019
type prefix it's gonna paste it on to

1184
00:45:10,599 --> 00:45:16,750
the type game okay you see how I'm doing

1185
00:45:14,019 --> 00:45:18,639
that and what that allows us to do is

1186
00:45:16,750 --> 00:45:21,159
that allows us to make a nice type safe

1187
00:45:18,639 --> 00:45:24,309
way without having to pull in crazy

1188
00:45:21,159 --> 00:45:27,549
templates for doing any nonsense there's

1189
00:45:24,309 --> 00:45:29,860
there's no fussiness there oh and to

1190
00:45:27,550 --> 00:45:31,180
boot up again I'll cast it for it there

1191
00:45:29,860 --> 00:45:32,950
so we know it's the same so now we know

1192
00:45:31,179 --> 00:45:34,449
we're getting back the right type and we

1193
00:45:32,949 --> 00:45:36,849
also know that we're setting the type

1194
00:45:34,449 --> 00:45:39,099
field to the correct thing in that step

1195
00:45:36,849 --> 00:45:40,900
right so now when we call push render

1196
00:45:39,099 --> 00:45:44,170
element all we have to do is say which

1197
00:45:40,900 --> 00:45:45,880
one we actually wanted to have right in

1198
00:45:44,170 --> 00:45:48,789
this case we wanted to get a rectangle

1199
00:45:45,880 --> 00:45:50,260
out of this and once we've done that we

1200
00:45:48,789 --> 00:45:54,250
know that everything else will be taken

1201
00:45:50,260 --> 00:45:57,640
care of for us so in here we've got that

1202
00:45:54,250 --> 00:46:00,880
type we were passing in so when we get

1203
00:45:57,639 --> 00:46:04,489
the push buffer result out we want to go

1204
00:46:00,880 --> 00:46:06,590
ahead and call that a at least the

1205
00:46:04,489 --> 00:46:08,179
a header rank if that makes sense you

1206
00:46:06,590 --> 00:46:09,980
can think of this as returning a header

1207
00:46:08,179 --> 00:46:11,929
because we know that no matter what we

1208
00:46:09,980 --> 00:46:14,500
allocate it will have that sort of

1209
00:46:11,929 --> 00:46:16,969
header on it if that makes sense

1210
00:46:14,500 --> 00:46:18,920
although I suppose we could go one level

1211
00:46:16,969 --> 00:46:20,750
deeper and allow things that don't have

1212
00:46:18,920 --> 00:46:22,820
that header on it to be inserted there

1213
00:46:20,750 --> 00:46:24,829
that's something we might decide to do

1214
00:46:22,820 --> 00:46:27,320
and if that was the case we'll put put a

1215
00:46:24,829 --> 00:46:28,789
push size above this one level deeper

1216
00:46:27,320 --> 00:46:30,619
again not something we have to worry

1217
00:46:28,789 --> 00:46:32,900
about right now so we do that when we

1218
00:46:30,619 --> 00:46:34,789
push a render element on when we do this

1219
00:46:32,900 --> 00:46:36,590
result here when we grab the result

1220
00:46:34,789 --> 00:46:39,139
again we're going to be casting it to

1221
00:46:36,590 --> 00:46:40,640
this just so we can sort of access it

1222
00:46:39,139 --> 00:46:42,769
and then we're going to say all right

1223
00:46:40,639 --> 00:46:45,139
the type equals whatever the type is if

1224
00:46:42,769 --> 00:46:47,269
we want to support running out of space

1225
00:46:45,139 --> 00:46:49,489
it's actually very easy we just do one

1226
00:46:47,269 --> 00:46:51,019
if at the head end of things to make

1227
00:46:49,489 --> 00:46:53,599
sure that we actually got one otherwise

1228
00:46:51,019 --> 00:46:55,849
its discarded we essentially forget

1229
00:46:53,599 --> 00:46:58,250
about it and that's really all we need

1230
00:46:55,849 --> 00:46:59,750
to do if that makes sense

1231
00:46:58,250 --> 00:47:02,000
it's really pretty straightforward

1232
00:46:59,750 --> 00:47:02,900
that's the the underscored one there all

1233
00:47:02,000 --> 00:47:08,179
right

1234
00:47:02,900 --> 00:47:10,369
so oops what happened there oh sorry

1235
00:47:08,179 --> 00:47:14,179
gotta have a paste operate in the right

1236
00:47:10,369 --> 00:47:17,619
place there there we go my bad

1237
00:47:14,179 --> 00:47:20,629
alright so grabbing out the header right

1238
00:47:17,619 --> 00:47:23,930
we'll just do it like this render group

1239
00:47:20,630 --> 00:47:25,700
entry header right that gets us our

1240
00:47:23,929 --> 00:47:28,069
header and then we're just going to cast

1241
00:47:25,699 --> 00:47:33,679
the header to whichever one we want like

1242
00:47:28,070 --> 00:47:39,109
so we change the names of these types to

1243
00:47:33,679 --> 00:47:40,699
be like this so there they are so and

1244
00:47:39,108 --> 00:47:44,179
again oops

1245
00:47:40,699 --> 00:47:46,909
like so so now we've got those

1246
00:47:44,179 --> 00:47:49,250
straightened out and I believe things

1247
00:47:46,909 --> 00:47:51,469
probably will still run just fine they

1248
00:47:49,250 --> 00:47:52,639
do and so all we've done now just make

1249
00:47:51,469 --> 00:47:54,949
things a little more convenient for

1250
00:47:52,639 --> 00:47:56,719
ourselves again to put ourselves in a

1251
00:47:54,949 --> 00:48:00,469
more regional position so let's go ahead

1252
00:47:56,719 --> 00:48:02,599
and do that next step so let's do one

1253
00:48:00,469 --> 00:48:05,599
where we've got sort of bitmap which is

1254
00:48:02,599 --> 00:48:08,989
our old call and rectangle which is just

1255
00:48:05,599 --> 00:48:12,799
like a solid rectangle right let's pull

1256
00:48:08,989 --> 00:48:15,589
those out into two separate cases so

1257
00:48:12,800 --> 00:48:17,150
we've got these two cases here I'm going

1258
00:48:15,590 --> 00:48:18,119
to pull those out into two separate

1259
00:48:17,150 --> 00:48:20,400
cases I

1260
00:48:18,119 --> 00:48:22,829
got one which is rendered bitmap I've

1261
00:48:20,400 --> 00:48:24,720
got one which is render rectangle and

1262
00:48:22,829 --> 00:48:27,329
we're gonna look at these two together

1263
00:48:24,719 --> 00:48:29,399
so what we're gonna do is say assert

1264
00:48:27,329 --> 00:48:32,849
that this one has a bitmap and draw the

1265
00:48:29,400 --> 00:48:37,650
bitmap like so the other one is going to

1266
00:48:32,849 --> 00:48:39,359
us essentially just draw it as if it was

1267
00:48:37,650 --> 00:48:40,920
a rectangle and now when we look at

1268
00:48:39,358 --> 00:48:42,690
these two things we're gonna have two

1269
00:48:40,920 --> 00:48:45,539
separate versions here we're going to

1270
00:48:42,690 --> 00:48:48,179
have the bitmap version right and then a

1271
00:48:45,539 --> 00:48:51,059
rectangle version which doesn't have the

1272
00:48:48,179 --> 00:48:52,768
bitmap at all okay those are the two

1273
00:48:51,059 --> 00:48:56,490
ones that we're going to have and then

1274
00:48:52,768 --> 00:48:59,038
we're gonna compile that right now when

1275
00:48:56,489 --> 00:49:01,528
we push this on a push to do a push

1276
00:48:59,039 --> 00:49:04,019
piece call we've sort of got two

1277
00:49:01,528 --> 00:49:06,869
different pushes to do now we've got the

1278
00:49:04,018 --> 00:49:08,788
push piece call that that pushes on a

1279
00:49:06,869 --> 00:49:12,890
bitmap and we've got the push piece call

1280
00:49:08,789 --> 00:49:16,190
that pushes on a rectangle right and

1281
00:49:12,889 --> 00:49:19,348
these right here are the ones that do

1282
00:49:16,190 --> 00:49:22,048
rectangle pushes this one and this one

1283
00:49:19,349 --> 00:49:24,329
and then we've got the bitmap one which

1284
00:49:22,048 --> 00:49:28,349
is here so what I'm going to do is I'm

1285
00:49:24,329 --> 00:49:29,730
going to go ahead and sort of I'm going

1286
00:49:28,349 --> 00:49:30,989
to take this one step at a time we have

1287
00:49:29,730 --> 00:49:32,248
a little more stuff that we want to do

1288
00:49:30,989 --> 00:49:34,588
to it but I'm take this one step at a

1289
00:49:32,248 --> 00:49:36,838
time so first I'm going to do is I'm

1290
00:49:34,588 --> 00:49:40,650
going to still call the push piece

1291
00:49:36,838 --> 00:49:42,230
function for the bitmap like that and

1292
00:49:40,650 --> 00:49:43,528
it's gonna get called here as we can see

1293
00:49:42,230 --> 00:49:51,929
oops

1294
00:49:43,528 --> 00:49:53,818
tangle entry bitmap so and inside why

1295
00:49:51,929 --> 00:49:59,909
does that not have what did I do

1296
00:49:53,818 --> 00:50:01,409
this is bitmap yeah so that should work

1297
00:49:59,909 --> 00:50:03,868
except for now we should hit an

1298
00:50:01,409 --> 00:50:05,248
assertion the assertion we should hit is

1299
00:50:03,869 --> 00:50:07,829
as soon as we try to draw a solid

1300
00:50:05,248 --> 00:50:09,538
rectangle and that entry bitmap is not

1301
00:50:07,829 --> 00:50:12,210
filled in right and you can see what

1302
00:50:09,539 --> 00:50:14,160
that smell so now we have to do is make

1303
00:50:12,210 --> 00:50:18,150
it so that when we actually call that

1304
00:50:14,159 --> 00:50:20,998
one in particular we will actually push

1305
00:50:18,150 --> 00:50:23,309
a rectangle on not something else so

1306
00:50:20,998 --> 00:50:26,159
let's take a look at how the when that

1307
00:50:23,309 --> 00:50:29,460
push rect ever actually gets used if

1308
00:50:26,159 --> 00:50:31,889
that makes sense I can actually see cuz

1309
00:50:29,460 --> 00:50:34,470
the five-minute warning is blocking me

1310
00:50:31,889 --> 00:50:35,578
the moment which is not what I what I

1311
00:50:34,469 --> 00:50:37,739
was hoping for but let's take a look

1312
00:50:35,579 --> 00:50:40,170
about push back so we draw hitpoints

1313
00:50:37,739 --> 00:50:42,358
we've got draw stare well we've got a

1314
00:50:40,170 --> 00:50:44,548
couple of these here we've also got sort

1315
00:50:42,358 --> 00:50:46,889
of any space that was drawing rectangle

1316
00:50:44,548 --> 00:50:49,079
outlines so when that gets called I'm

1317
00:50:46,889 --> 00:50:50,699
just going to duplicate this code for

1318
00:50:49,079 --> 00:50:55,140
the time being

1319
00:50:50,699 --> 00:50:57,000
duplicate it like so and then we will

1320
00:50:55,139 --> 00:50:59,460
take a look at what we can do to make it

1321
00:50:57,000 --> 00:51:01,829
so that that's not being duplicated in

1322
00:50:59,460 --> 00:51:05,940
that way so there goes the bitmap right

1323
00:51:01,829 --> 00:51:08,670
off we go and then we have that a line

1324
00:51:05,940 --> 00:51:14,130
which is not actually in there for the

1325
00:51:08,670 --> 00:51:18,510
rectangles okay so I think that should

1326
00:51:14,130 --> 00:51:19,829
do it for our rectangles and they are

1327
00:51:18,510 --> 00:51:21,869
still being thrown as you can see

1328
00:51:19,829 --> 00:51:24,240
there's our rectangles they're

1329
00:51:21,869 --> 00:51:26,730
underneath the guy as we would expect so

1330
00:51:24,239 --> 00:51:28,288
that's fine but we've got a bit of

1331
00:51:26,730 --> 00:51:29,940
duplicated code there and there's some

1332
00:51:28,289 --> 00:51:33,089
stuff that we want to start to take a

1333
00:51:29,940 --> 00:51:35,190
look at in terms of again pulling that

1334
00:51:33,088 --> 00:51:39,719
out and like you can see all of this

1335
00:51:35,190 --> 00:51:41,759
stuff here kind of being common right

1336
00:51:39,719 --> 00:51:43,379
and similarly when we do the push we're

1337
00:51:41,759 --> 00:51:46,710
getting that same we're getting a lot of

1338
00:51:43,380 --> 00:51:48,240
sort of duplicated code there right so

1339
00:51:46,710 --> 00:51:50,670
what I'd like to do is I'd like to kind

1340
00:51:48,239 --> 00:51:54,389
of compress that down into something a

1341
00:51:50,670 --> 00:51:56,309
little more sort of useable for the time

1342
00:51:54,389 --> 00:51:58,798
being at least even if we don't stick

1343
00:51:56,309 --> 00:52:01,319
with it what I'd like to do is say okay

1344
00:51:58,798 --> 00:52:04,009
there's going to be a shared piece here

1345
00:52:01,318 --> 00:52:07,018
there's going to be sort of a render

1346
00:52:04,009 --> 00:52:09,210
entity basis or something like this for

1347
00:52:07,018 --> 00:52:11,729
lack of a better term where that's

1348
00:52:09,210 --> 00:52:15,599
actually kind of gonna gonna have the

1349
00:52:11,730 --> 00:52:18,298
basis this offset the offset Z the Z see

1350
00:52:15,599 --> 00:52:21,509
that stuff that really is about

1351
00:52:18,298 --> 00:52:24,179
positioning it relative to an entity

1352
00:52:21,509 --> 00:52:25,980
right I'm gonna pull that stuff out

1353
00:52:24,179 --> 00:52:28,828
because it's really sort of a

1354
00:52:25,980 --> 00:52:31,318
positioning scheme that has very little

1355
00:52:28,829 --> 00:52:33,269
to do with what the shape is that you're

1356
00:52:31,318 --> 00:52:35,009
actually drawing right look none of this

1357
00:52:33,268 --> 00:52:37,258
has anything to do with the shape that

1358
00:52:35,009 --> 00:52:40,858
you're actually drawing like the bitmap

1359
00:52:37,259 --> 00:52:42,389
or whatever or the rectangle it's it's

1360
00:52:40,858 --> 00:52:45,309
much more specific furthermore we could

1361
00:52:42,389 --> 00:52:48,489
also compress these our GPAs down to the

1362
00:52:45,309 --> 00:52:51,608
which does seem like a good idea as well

1363
00:52:48,489 --> 00:52:54,339
so you know in fact I could even pull

1364
00:52:51,608 --> 00:52:55,389
the dimension out there we'll see if

1365
00:52:54,340 --> 00:52:57,700
that's a good idea

1366
00:52:55,389 --> 00:52:59,440
it might not be a good idea but we'll

1367
00:52:57,699 --> 00:53:01,509
see if it's a good idea all right so

1368
00:52:59,440 --> 00:53:04,720
let's go ahead and do that then these

1369
00:53:01,510 --> 00:53:07,030
guys basically get a new notion of basis

1370
00:53:04,719 --> 00:53:09,309
and their basis is actually doubly and

1371
00:53:07,030 --> 00:53:11,710
directed right so they've got an entity

1372
00:53:09,309 --> 00:53:13,960
basis like so it's not actually in

1373
00:53:11,710 --> 00:53:17,139
directed because it's built straight in

1374
00:53:13,960 --> 00:53:21,099
but you get the idea right so there we

1375
00:53:17,139 --> 00:53:22,809
go now um I also want to do here

1376
00:53:21,099 --> 00:53:25,420
what else do I want to okay so then I

1377
00:53:22,809 --> 00:53:27,969
can take this stuff and go all right all

1378
00:53:25,420 --> 00:53:31,059
I really ever got out of this stuff was

1379
00:53:27,969 --> 00:53:33,989
that center bit right all I ever got out

1380
00:53:31,059 --> 00:53:39,809
of it was just centered that's it really

1381
00:53:33,989 --> 00:53:41,979
so I just need to be able to call my I

1382
00:53:39,809 --> 00:53:44,409
just need to be able to call something

1383
00:53:41,980 --> 00:53:46,150
that will take one of these entity bases

1384
00:53:44,409 --> 00:53:49,000
and do all these computations for me

1385
00:53:46,150 --> 00:53:50,800
right so what I want to do is just

1386
00:53:49,000 --> 00:53:54,159
introduce a function where you basically

1387
00:53:50,800 --> 00:53:57,550
you know you do something like compute

1388
00:53:54,159 --> 00:53:58,389
entity offset or compute basis offset

1389
00:53:57,550 --> 00:54:03,310
and you notice we've got a little

1390
00:53:58,389 --> 00:54:09,989
weirdness here to half dim the half dims

1391
00:54:03,309 --> 00:54:13,900
a little odd because what is entry a

1392
00:54:09,989 --> 00:54:17,588
that's the Alpha why does this guy never

1393
00:54:13,900 --> 00:54:20,289
use the dimension of the bitmap oh

1394
00:54:17,588 --> 00:54:24,219
because it's baked it's actually baked

1395
00:54:20,289 --> 00:54:25,449
in okay so that's actually that's

1396
00:54:24,219 --> 00:54:27,368
actually something we should take care

1397
00:54:25,449 --> 00:54:31,179
of as well I probably did this a little

1398
00:54:27,369 --> 00:54:32,559
bit too soon all right so let's do this

1399
00:54:31,179 --> 00:54:34,539
let's do this into her so I might go

1400
00:54:32,559 --> 00:54:36,130
about five minutes over we started a

1401
00:54:34,539 --> 00:54:38,259
little bit late so I don't feel too bad

1402
00:54:36,130 --> 00:54:40,930
about it so what I want to do is when we

1403
00:54:38,260 --> 00:54:43,900
do a push rect call I don't know if you

1404
00:54:40,929 --> 00:54:45,338
can see here where is where is that push

1405
00:54:43,900 --> 00:54:49,809
vertical oh you know what that's good I

1406
00:54:45,338 --> 00:54:51,699
moved it out so we do a push rect call f

1407
00:54:49,809 --> 00:54:54,250
did I not pull it out where is pushback

1408
00:54:51,699 --> 00:54:55,838
oh it's in the H bar that's right so

1409
00:54:54,250 --> 00:54:57,090
when we do a push rect call and these I

1410
00:54:55,838 --> 00:54:58,829
could probably move out of the

1411
00:54:57,090 --> 00:55:01,140
faul now as well but don't we need to be

1412
00:54:58,829 --> 00:55:02,969
in the H file so you know what they

1413
00:55:01,139 --> 00:55:10,019
probably shouldn't be let's get them out

1414
00:55:02,969 --> 00:55:11,519
of here alright so if I do my push wreck

1415
00:55:10,019 --> 00:55:13,800
call I take a look at my push read call

1416
00:55:11,519 --> 00:55:18,090
right really I think what should have

1417
00:55:13,800 --> 00:55:21,960
happened is we should try to do the

1418
00:55:18,090 --> 00:55:24,170
offset we should bake in whatever

1419
00:55:21,960 --> 00:55:26,579
whatever that was that we were doing

1420
00:55:24,170 --> 00:55:28,590
that made it different from computing

1421
00:55:26,579 --> 00:55:31,590
the entity offsets from everything else

1422
00:55:28,590 --> 00:55:33,570
right so in here we're doing this thing

1423
00:55:31,590 --> 00:55:36,090
where we take the center and we offset

1424
00:55:33,570 --> 00:55:38,039
it we really want to make it so that

1425
00:55:36,090 --> 00:55:40,380
this is just sort of this coordination

1426
00:55:38,039 --> 00:55:42,480
point and they both draw from the same

1427
00:55:40,380 --> 00:55:44,460
one so instead of doing a center minus

1428
00:55:42,480 --> 00:55:45,869
half dim in a center plus half dim what

1429
00:55:44,460 --> 00:55:47,849
we want to do is kind of bake that out

1430
00:55:45,869 --> 00:55:51,389
over here I think that seems like a

1431
00:55:47,849 --> 00:55:51,960
smarter thing to do to me if that makes

1432
00:55:51,389 --> 00:55:53,969
sense

1433
00:55:51,960 --> 00:55:56,760
so what I'd like to do is I'd like to

1434
00:55:53,969 --> 00:55:59,750
suggest that we go ahead and say well

1435
00:55:56,760 --> 00:56:01,830
whatever the meters to pixels was right

1436
00:55:59,750 --> 00:56:04,650
we're gonna go ahead and compute that

1437
00:56:01,829 --> 00:56:06,569
half dim here right so the dim will just

1438
00:56:04,650 --> 00:56:09,630
come come out that way

1439
00:56:06,570 --> 00:56:11,430
and then what we're going to do do we

1440
00:56:09,630 --> 00:56:14,130
actually when we do draw a rectangle

1441
00:56:11,429 --> 00:56:15,690
Center plus half dim center - half dim

1442
00:56:14,130 --> 00:56:17,519
yes so this will just turn into

1443
00:56:15,690 --> 00:56:20,010
something which instead of using the

1444
00:56:17,519 --> 00:56:22,860
half dim actually uses the full dim if

1445
00:56:20,010 --> 00:56:24,360
that makes sense like so and I'm trying

1446
00:56:22,860 --> 00:56:25,349
to think if there's anything else do we

1447
00:56:24,360 --> 00:56:27,570
actually need

1448
00:56:25,349 --> 00:56:30,920
where does dim actually get used in here

1449
00:56:27,570 --> 00:56:34,170
because I don't actually know so dim

1450
00:56:30,920 --> 00:56:37,980
entry bitmap so dim only really gets

1451
00:56:34,170 --> 00:56:41,190
used for the rectangles right like so

1452
00:56:37,980 --> 00:56:43,740
and so really yeah really what we could

1453
00:56:41,190 --> 00:56:46,380
do is we can we can totally sort of slap

1454
00:56:43,739 --> 00:56:48,449
this down into something a lot more

1455
00:56:46,380 --> 00:56:50,490
sense of sensible so we'll do the meters

1456
00:56:48,449 --> 00:56:52,919
to pixels here - to do our dim call

1457
00:56:50,489 --> 00:56:54,659
which will actually have here as well

1458
00:56:52,920 --> 00:56:57,389
and again we'll start moving things

1459
00:56:54,659 --> 00:56:59,519
around a bit here so we'll do it that

1460
00:56:57,389 --> 00:57:01,889
way so we'll do basically rp+ empty dim

1461
00:56:59,519 --> 00:57:04,400
and we'll start here so that that is

1462
00:57:01,889 --> 00:57:07,619
more what I want to see right Pete of X

1463
00:57:04,400 --> 00:57:09,030
P that Y like that this is more what I

1464
00:57:07,619 --> 00:57:09,639
want to see so they're all based off

1465
00:57:09,030 --> 00:57:12,519
this

1466
00:57:09,639 --> 00:57:14,230
same point essentially so now we've sort

1467
00:57:12,518 --> 00:57:15,038
of gotten rid of the notion that the

1468
00:57:14,230 --> 00:57:17,798
other one's different

1469
00:57:15,039 --> 00:57:19,059
and then this half dim here when we when

1470
00:57:17,798 --> 00:57:22,659
we compute our offset we'll just

1471
00:57:19,059 --> 00:57:24,640
subtract that half dim away or of course

1472
00:57:22,659 --> 00:57:26,739
I guess we have to do it the two

1473
00:57:24,639 --> 00:57:30,578
different ways because of our of our

1474
00:57:26,739 --> 00:57:33,068
whole y flipping thing so we have to do

1475
00:57:30,579 --> 00:57:35,470
something where we do 1/2 10 dot Y and

1476
00:57:33,068 --> 00:57:37,929
our half-game X we want to basically

1477
00:57:35,469 --> 00:57:40,389
subtract the 1/2 dim X and add the half

1478
00:57:37,929 --> 00:57:41,858
dim why I believe right because of the

1479
00:57:40,389 --> 00:57:43,058
way that we're we're flipping things I

1480
00:57:41,858 --> 00:57:44,469
don't actually know if that's true I

1481
00:57:43,059 --> 00:57:45,760
don't remember what was it what was the

1482
00:57:44,469 --> 00:57:48,159
way that we were doing it here let me

1483
00:57:45,760 --> 00:57:49,510
take a quick look so I don't remember I

1484
00:57:48,159 --> 00:57:52,000
want to make sure we're basically doing

1485
00:57:49,510 --> 00:57:56,589
it exactly the same way that we were

1486
00:57:52,000 --> 00:58:00,298
before so it was just minus and plus

1487
00:57:56,588 --> 00:58:03,119
that's all it was all right here we go

1488
00:58:00,298 --> 00:58:06,639
sorry like I said Monday it's a bit

1489
00:58:03,119 --> 00:58:09,220
difficult so in here I guess we've

1490
00:58:06,639 --> 00:58:12,879
already done anything that we would have

1491
00:58:09,219 --> 00:58:14,439
needed to do in that sense so it's just

1492
00:58:12,880 --> 00:58:16,630
minus and plus all right I'm gonna leave

1493
00:58:14,440 --> 00:58:18,509
it that way and say that that was the

1494
00:58:16,630 --> 00:58:21,309
way that it was going to work for now

1495
00:58:18,509 --> 00:58:22,719
yeah let's go ahead and let's go ahead

1496
00:58:21,309 --> 00:58:25,119
and assume that that's correct for now

1497
00:58:22,719 --> 00:58:27,608
well debug it in a second all right so

1498
00:58:25,119 --> 00:58:31,420
if I've got that I don't need the v2

1499
00:58:27,608 --> 00:58:34,420
there anymore I'm gonna take a look now

1500
00:58:31,420 --> 00:58:36,849
at just pulling out that computation and

1501
00:58:34,420 --> 00:58:40,059
all that's going to do is like compute

1502
00:58:36,849 --> 00:58:43,298
some kind of a entity base for us it's

1503
00:58:40,059 --> 00:58:45,309
gonna take one of these guys the render

1504
00:58:43,298 --> 00:58:48,940
entity basis right it's gonna be like

1505
00:58:45,309 --> 00:58:51,519
get render entity basis P or something

1506
00:58:48,940 --> 00:58:55,028
like this it's going to take one of

1507
00:58:51,518 --> 00:58:57,278
these which was what entity basis and in

1508
00:58:55,028 --> 00:58:59,619
both cases we'll compute that right like

1509
00:58:57,278 --> 00:59:03,400
so and then what we'll do is it'll just

1510
00:58:59,619 --> 00:59:06,369
do this right so it'll do literally this

1511
00:59:03,400 --> 00:59:08,950
chunk of code right here and just in a

1512
00:59:06,369 --> 00:59:13,358
duplicated way presumably and so that'll

1513
00:59:08,949 --> 00:59:16,509
return a v2 I guess is what that'll do

1514
00:59:13,358 --> 00:59:18,278
and let's see render interfaces peak

1515
00:59:16,509 --> 00:59:21,030
we'll take one of these oops

1516
00:59:18,278 --> 00:59:25,920
I'm going to the basis

1517
00:59:21,030 --> 00:59:28,769
like so and so call that entity basis so

1518
00:59:25,920 --> 00:59:36,300
and we will also pass it the vendor

1519
00:59:28,769 --> 00:59:39,509
group render group that and we will do

1520
00:59:36,300 --> 00:59:41,640
that there we will return the value that

1521
00:59:39,510 --> 00:59:48,170
computes and we just need to go ahead

1522
00:59:41,639 --> 00:59:50,609
and change entry to entity basis that's

1523
00:59:48,170 --> 00:59:54,690
mostly all we actually need to do there

1524
00:59:50,610 --> 00:59:59,430
and then vaporize this stuff make sure

1525
00:59:54,690 --> 01:00:01,500
it's all kosher okay okay so we need

1526
00:59:59,429 --> 01:00:03,359
that screen Center X screen Center Y

1527
01:00:01,500 --> 01:00:06,000
that's got to be in there so let's go

1528
01:00:03,360 --> 01:00:09,150
ahead and pass that screen Center like

1529
01:00:06,000 --> 01:00:11,099
so and then in here we will go ahead and

1530
01:00:09,150 --> 01:00:15,000
pass vendor group oops

1531
01:00:11,099 --> 01:00:17,039
render group and screen Center now

1532
01:00:15,000 --> 01:00:20,369
screen Center is probably actually also

1533
01:00:17,039 --> 01:00:21,900
known all throughout the pipeline so we

1534
01:00:20,369 --> 01:00:23,549
could also choose to sort of bake that

1535
01:00:21,900 --> 01:00:24,930
in a little bit further but that's

1536
01:00:23,550 --> 01:00:26,610
something we'll get to a little bit

1537
01:00:24,929 --> 01:00:29,879
later we also need to take the address

1538
01:00:26,610 --> 01:00:35,519
of these and bases here like so and

1539
01:00:29,880 --> 01:00:39,180
these are V twos not the threes all

1540
01:00:35,519 --> 01:00:43,079
right so our entry it says we don't have

1541
01:00:39,179 --> 01:00:44,669
a dim that is a mistake and this was

1542
01:00:43,079 --> 01:00:46,559
actually supposed to be pulled out to

1543
01:00:44,670 --> 01:00:48,030
just be in the rectangle because I

1544
01:00:46,559 --> 01:00:50,130
realized it was only in the rectangle

1545
01:00:48,030 --> 01:00:53,640
there where we were doing that so off we

1546
01:00:50,130 --> 01:00:56,250
go alright so we've got an empty basis

1547
01:00:53,639 --> 01:00:58,199
now we've just got to fill it out again

1548
01:00:56,250 --> 01:01:01,579
here are the members of that right and

1549
01:00:58,199 --> 01:01:04,049
peace is no longer have dims at all

1550
01:01:01,579 --> 01:01:07,889
right if I'm not mistaken those are just

1551
01:01:04,050 --> 01:01:08,970
gone and then we also have in here our

1552
01:01:07,889 --> 01:01:10,769
render group I guess it's just called

1553
01:01:08,969 --> 01:01:13,349
group in here should probably call it

1554
01:01:10,769 --> 01:01:15,119
the same thing everywhere but sometimes

1555
01:01:13,349 --> 01:01:17,219
again but I'm talking on the screen

1556
01:01:15,119 --> 01:01:18,809
stream it's kind of hard for me a lot of

1557
01:01:17,219 --> 01:01:20,039
times to concentrate as fully on the

1558
01:01:18,809 --> 01:01:22,289
code so the code doesn't come out as

1559
01:01:20,039 --> 01:01:22,619
good as I would otherwise I apologize

1560
01:01:22,289 --> 01:01:28,710
for that

1561
01:01:22,619 --> 01:01:31,199
I do the best I can so alright probably

1562
01:01:28,710 --> 01:01:32,079
made some mistakes there but let's see

1563
01:01:31,199 --> 01:01:33,939
where we're at

1564
01:01:32,079 --> 01:01:36,940
all right so I think we're in good shape

1565
01:01:33,940 --> 01:01:39,099
that all looks correct so I guess we can

1566
01:01:36,940 --> 01:01:45,300
stop for now we're only a little bit

1567
01:01:39,099 --> 01:01:45,299
over so we can go ahead to that Q&amp;A

1568
01:01:47,010 --> 01:01:52,420
we're you know we made some decent

1569
01:01:49,510 --> 01:01:54,430
headway there we're gonna want to to

1570
01:01:52,420 --> 01:01:56,019
keep pushing forwards on this pulling

1571
01:01:54,429 --> 01:01:58,149
things out making this a little bit

1572
01:01:56,019 --> 01:02:00,460
cleaner you can sort of see it starting

1573
01:01:58,150 --> 01:02:02,019
to clean up a little bit and it will

1574
01:02:00,460 --> 01:02:03,099
continue to get cleaner over the course

1575
01:02:02,019 --> 01:02:05,409
of the week until we've got a really

1576
01:02:03,099 --> 01:02:07,089
really nice push buffer system the specs

1577
01:02:05,409 --> 01:02:08,589
everything out that we want and then we

1578
01:02:07,090 --> 01:02:10,900
can sort of focus our attention to

1579
01:02:08,590 --> 01:02:12,519
actually how we turn those into more

1580
01:02:10,900 --> 01:02:13,660
efficient drawing calls and add some of

1581
01:02:12,519 --> 01:02:15,849
those features that we need like

1582
01:02:13,659 --> 01:02:18,699
rotation and scaling which is kind of

1583
01:02:15,849 --> 01:02:24,880
where the more media pixel finnicky work

1584
01:02:18,699 --> 01:02:29,319
happens all right q : before the

1585
01:02:24,880 --> 01:02:29,740
questions please if you could just put Q

1586
01:02:29,320 --> 01:02:31,440
:

1587
01:02:29,739 --> 01:02:34,239
before your questions so I can see them

1588
01:02:31,440 --> 01:02:37,320
and the other thing that I would like to

1589
01:02:34,239 --> 01:02:40,029
do is again if you're new to the stream

1590
01:02:37,320 --> 01:02:41,920
our post stream questions are for

1591
01:02:40,030 --> 01:02:44,050
programming what we actually have been

1592
01:02:41,920 --> 01:02:46,630
working on so please keep your questions

1593
01:02:44,050 --> 01:02:48,370
confined to that if you want to just do

1594
01:02:46,630 --> 01:02:50,590
general chatty questions or off-topic

1595
01:02:48,369 --> 01:02:52,900
questions I'm totally all for that but

1596
01:02:50,590 --> 01:02:56,079
we do those before the streams so come

1597
01:02:52,900 --> 01:02:58,599
back about 15 minutes before a scheduled

1598
01:02:56,079 --> 01:03:00,969
start time and ask away I'm happy to

1599
01:02:58,599 --> 01:03:02,230
answer them there but I skip I just

1600
01:03:00,969 --> 01:03:04,809
flat-out skipped most of the time

1601
01:03:02,230 --> 01:03:06,130
questions that are not about the

1602
01:03:04,809 --> 01:03:07,539
programming here in the post stream

1603
01:03:06,130 --> 01:03:13,860
because I like to concentrate on the

1604
01:03:07,539 --> 01:03:13,860
actual code if that makes sense

1605
01:03:14,829 --> 01:03:24,829
and student in 73

1606
01:03:17,568 --> 01:03:26,900
he's a very frequent viewer I guess I'll

1607
01:03:24,829 --> 01:03:29,809
say of the show he is sort of our

1608
01:03:26,900 --> 01:03:31,579
resident math expert it would seem from

1609
01:03:29,809 --> 01:03:33,259
most of the comments that he makes are

1610
01:03:31,579 --> 01:03:34,699
very they're not the kinds of comments

1611
01:03:33,259 --> 01:03:36,318
that somebody who doesn't know a lot of

1612
01:03:34,699 --> 01:03:38,568
math would ever make

1613
01:03:36,318 --> 01:03:41,748
he says warning there may be lots of pre

1614
01:03:38,568 --> 01:03:43,940
stream questions today so I guess I'm

1615
01:03:41,748 --> 01:03:52,698
glad I warned against that I don't know

1616
01:03:43,940 --> 01:03:59,088
if what that means exactly but yeah so

1617
01:03:52,699 --> 01:04:01,999
I'm not sure when you meet a bug in the

1618
01:03:59,088 --> 01:04:05,028
game and are able to recreate it will

1619
01:04:01,998 --> 01:04:09,768
you get a bug line in the programming or

1620
01:04:05,028 --> 01:04:14,989
how does it work I'm not sure what that

1621
01:04:09,768 --> 01:04:18,318
question is asking exactly but when you

1622
01:04:14,989 --> 01:04:20,329
get a bug typically there's two types of

1623
01:04:18,318 --> 01:04:21,829
bugs there's ones that are very easy to

1624
01:04:20,329 --> 01:04:23,209
track down and you quickly know where

1625
01:04:21,829 --> 01:04:24,469
they are so you go find them and fix

1626
01:04:23,208 --> 01:04:25,879
them other ones are much more

1627
01:04:24,469 --> 01:04:28,479
complicated and you have to spend time

1628
01:04:25,880 --> 01:04:30,619
creating situations that allow you to

1629
01:04:28,478 --> 01:04:32,958
deduce what's going on and then you can

1630
01:04:30,619 --> 01:04:35,749
fix them but I'm not sure what a bug

1631
01:04:32,958 --> 01:04:44,498
line is so sorry about that

1632
01:04:35,748 --> 01:04:44,498
is it worth aligning render entries hmm

1633
01:04:45,278 --> 01:04:52,699
so here's what I'll say at the moment no

1634
01:04:49,900 --> 01:04:54,739
probably not and that is because all of

1635
01:04:52,699 --> 01:04:58,759
our render entries will already be 8

1636
01:04:54,739 --> 01:05:02,059
byte aligned anyway right because

1637
01:04:58,759 --> 01:05:04,159
basically you know you've got these you

1638
01:05:02,059 --> 01:05:06,528
sort of got these render entries things

1639
01:05:04,159 --> 01:05:07,548
and they're all gonna have pointers in

1640
01:05:06,528 --> 01:05:11,478
them so they're all gonna be a byte

1641
01:05:07,548 --> 01:05:13,338
aligned so you're pretty good to go but

1642
01:05:11,478 --> 01:05:15,768
when we start pushing things on that are

1643
01:05:13,338 --> 01:05:18,739
more variably sized we will probably

1644
01:05:15,768 --> 01:05:21,588
align those because we don't want to

1645
01:05:18,739 --> 01:05:23,739
probably leave things on a byte on odd

1646
01:05:21,588 --> 01:05:26,920
byte boundaries or anything like that

1647
01:05:23,739 --> 01:05:29,329
alignment past that

1648
01:05:26,920 --> 01:05:30,980
probably not but I don't know I mean

1649
01:05:29,329 --> 01:05:34,549
really the answer is we'd have to test

1650
01:05:30,980 --> 01:05:36,440
it you never know with alignment

1651
01:05:34,550 --> 01:05:37,789
sometimes it benefits you sometimes it

1652
01:05:36,440 --> 01:05:39,769
hurts you if you spend a lot of time

1653
01:05:37,789 --> 01:05:42,079
patting things out for alignment and

1654
01:05:39,769 --> 01:05:44,000
then but that ends up taking more total

1655
01:05:42,079 --> 01:05:45,199
space you may find that your memory

1656
01:05:44,000 --> 01:05:48,050
bandwidth or cache pollution or

1657
01:05:45,199 --> 01:05:49,489
something becomes that eats up any games

1658
01:05:48,050 --> 01:05:52,910
you could have gotten from any sort of

1659
01:05:49,489 --> 01:05:55,969
alignment win right what is mantle

1660
01:05:52,909 --> 01:06:00,519
mantle is AMD's direct Hardware access

1661
01:05:55,969 --> 01:06:06,309
well direct narrowly direct more direct

1662
01:06:00,519 --> 01:06:06,309
graphics API for accessing their GPUs

1663
01:06:08,108 --> 01:06:12,319
any recommendations of some reading

1664
01:06:10,519 --> 01:06:15,409
about GPUs rendering rasterization

1665
01:06:12,320 --> 01:06:18,260
except for a Google search for once when

1666
01:06:15,409 --> 01:06:19,699
someone asks that question because I get

1667
01:06:18,260 --> 01:06:20,960
that sort of question a lot like do you

1668
01:06:19,699 --> 01:06:22,460
have any good ideas for reading about

1669
01:06:20,960 --> 01:06:24,699
blah and I'm always have to be like no I

1670
01:06:22,460 --> 01:06:29,869
don't know where this image is I do

1671
01:06:24,699 --> 01:06:35,629
actually I absolutely do and what you

1672
01:06:29,869 --> 01:06:37,070
want to do is go to Fabien x' blog when

1673
01:06:35,630 --> 01:06:41,050
I grow up I'll be an inventor

1674
01:06:37,070 --> 01:06:44,059
this one right here Fabien blog is

1675
01:06:41,050 --> 01:06:46,970
Fabien Gazin he works at rad

1676
01:06:44,059 --> 01:06:50,029
he's like definitely one of the best

1677
01:06:46,969 --> 01:06:53,509
programmers I know or have ever known

1678
01:06:50,030 --> 01:06:55,550
for that matter and if he happens to

1679
01:06:53,510 --> 01:06:58,520
have written in a blog entry about

1680
01:06:55,550 --> 01:07:00,260
something much like I said if Raymond

1681
01:06:58,519 --> 01:07:01,909
Chen writes a blog entries about Windows

1682
01:07:00,260 --> 01:07:03,890
programming you probably want to read it

1683
01:07:01,909 --> 01:07:06,559
if Fabien writes an entry about

1684
01:07:03,889 --> 01:07:08,629
programming especially graphics or

1685
01:07:06,559 --> 01:07:10,519
optimization you really want to read it

1686
01:07:08,630 --> 01:07:13,250
and in this case we are lucky enough

1687
01:07:10,519 --> 01:07:15,019
that he has written one about the

1688
01:07:13,250 --> 01:07:16,130
graphics pipeline so what you can do is

1689
01:07:15,019 --> 01:07:19,159
you can go in here and there's a

1690
01:07:16,130 --> 01:07:22,220
graphics pipeline one I would highly

1691
01:07:19,159 --> 01:07:24,559
recommend clicking on that and if you

1692
01:07:22,219 --> 01:07:27,348
can set aside some time for going

1693
01:07:24,559 --> 01:07:30,099
through these you can start here on port

1694
01:07:27,349 --> 01:07:32,088
1 and he will set you up for

1695
01:07:30,099 --> 01:07:34,700
understanding a lot of the stuff that

1696
01:07:32,088 --> 01:07:37,730
has to do with why graphics works the

1697
01:07:34,699 --> 01:07:40,368
way it does right it's really great it's

1698
01:07:37,730 --> 01:07:43,190
it's gonna be even probably more

1699
01:07:40,369 --> 01:07:45,349
then he knows more than I do about it so

1700
01:07:43,190 --> 01:07:47,210
it's gonna cover probably even more than

1701
01:07:45,349 --> 01:07:50,079
what we will cover so if you can spend

1702
01:07:47,210 --> 01:07:52,309
the time to dig into some of this and

1703
01:07:50,079 --> 01:07:55,180
understand it you will probably a very

1704
01:07:52,309 --> 01:07:57,349
happy camper now regrettably is a 2011

1705
01:07:55,179 --> 01:07:59,088
trip through the graphics pipeline which

1706
01:07:57,349 --> 01:08:01,039
means that it is a little out of date

1707
01:07:59,088 --> 01:08:03,288
and graphics does sort of change over

1708
01:08:01,039 --> 01:08:06,559
time but to say the very least

1709
01:08:03,289 --> 01:08:08,599
it will certainly give you the

1710
01:08:06,559 --> 01:08:10,700
perspective you would need to understand

1711
01:08:08,599 --> 01:08:12,710
a graphics pipeline from 2015 because

1712
01:08:10,699 --> 01:08:14,748
they don't change that much and it will

1713
01:08:12,710 --> 01:08:17,420
give you the right perspective so that

1714
01:08:14,748 --> 01:08:18,858
you'll be able to read other stuff that

1715
01:08:17,420 --> 01:08:20,359
tells you how it's been updated and

1716
01:08:18,859 --> 01:08:24,670
understand what they're saying when they

1717
01:08:20,359 --> 01:08:27,650
tell you that right so very very very

1718
01:08:24,670 --> 01:08:31,279
important blog highly recommend reading

1719
01:08:27,649 --> 01:08:33,649
it and this series in particular for the

1720
01:08:31,279 --> 01:08:36,710
question you were asking is definitely

1721
01:08:33,649 --> 01:08:39,229
the one to read I can't think of

1722
01:08:36,710 --> 01:08:40,548
anything else that's even close although

1723
01:08:39,229 --> 01:08:43,039
there may be some that I'm just unaware

1724
01:08:40,548 --> 01:08:44,389
of but that's that's the one and if you

1725
01:08:43,039 --> 01:08:45,798
actually mean internalize all of this

1726
01:08:44,389 --> 01:08:47,329
you'll probably know more about the reax

1727
01:08:45,798 --> 01:08:49,698
life with them than I do I don't think

1728
01:08:47,329 --> 01:08:50,960
I've read all of these in the lip at the

1729
01:08:49,698 --> 01:08:53,809
level of detail that I probably should

1730
01:08:50,960 --> 01:08:56,230
have so you know I would I would highly

1731
01:08:53,810 --> 01:08:56,230
recommend them

1732
01:09:03,420 --> 01:09:09,579
why use pointers over references there

1733
01:09:07,509 --> 01:09:11,259
is no difference between those two

1734
01:09:09,579 --> 01:09:14,079
things pointers are just a superset

1735
01:09:11,259 --> 01:09:15,548
right so the reason I use point instead

1736
01:09:14,079 --> 01:09:16,930
of reference is is that pointers or

1737
01:09:15,548 --> 01:09:19,988
references do exactly the same thing

1738
01:09:16,930 --> 01:09:22,239
there's no in especially when we're not

1739
01:09:19,988 --> 01:09:24,250
using any C++ features really we use a

1740
01:09:22,238 --> 01:09:26,588
little bit of C++ suite but we you know

1741
01:09:24,250 --> 01:09:29,890
our coding style is very C like we don't

1742
01:09:26,588 --> 01:09:31,028
use a lot of C++ isms a pointer in a

1743
01:09:29,890 --> 01:09:31,989
reference both mean the same thing

1744
01:09:31,029 --> 01:09:33,250
there's no difference between the two of

1745
01:09:31,988 --> 01:09:34,689
them in terms of what the CPU is gonna

1746
01:09:33,250 --> 01:09:37,060
do it's not telling it to do anything

1747
01:09:34,689 --> 01:09:37,899
differently and so pointer is a superset

1748
01:09:37,060 --> 01:09:38,980
of a reference because the reference

1749
01:09:37,899 --> 01:09:41,798
can't be assigned to something else

1750
01:09:38,979 --> 01:09:43,358
right a pointer can be changed to assign

1751
01:09:41,798 --> 01:09:46,238
something else a reference can't be

1752
01:09:43,359 --> 01:09:48,700
although my understanding is they they

1753
01:09:46,238 --> 01:09:51,189
change that recently I think I have want

1754
01:09:48,699 --> 01:09:52,778
to say I want to say that the new C++

1755
01:09:51,189 --> 01:09:54,129
spec actually allows you to change what

1756
01:09:52,779 --> 01:09:56,560
references point or something I don't

1757
01:09:54,130 --> 01:09:58,869
even remember it's kind of silly

1758
01:09:56,560 --> 01:10:00,340
so yeah references they don't do

1759
01:09:58,869 --> 01:10:01,869
anything so I don't use them they're

1760
01:10:00,340 --> 01:10:05,789
kind of a useless language feature

1761
01:10:01,869 --> 01:10:05,789
honestly they don't actually do anything

1762
01:10:05,850 --> 01:10:11,200
so I don't use them because you know why

1763
01:10:09,219 --> 01:10:12,369
add complexity for no reason you have to

1764
01:10:11,199 --> 01:10:13,269
use pointers you're going to use

1765
01:10:12,369 --> 01:10:14,349
pointers because pointers are very

1766
01:10:13,270 --> 01:10:15,280
important to do a bunch of things that

1767
01:10:14,350 --> 01:10:17,320
you want to be able to do like

1768
01:10:15,279 --> 01:10:18,579
arithmetic and references can't do those

1769
01:10:17,319 --> 01:10:21,279
things and so they're just kind of a

1770
01:10:18,579 --> 01:10:23,460
weaker pointer so I don't like to use

1771
01:10:21,279 --> 01:10:23,460
them

1772
01:10:30,630 --> 01:10:35,260
about mantle were you aware AMD drop

1773
01:10:33,579 --> 01:10:37,600
development for it and put a lot of that

1774
01:10:35,260 --> 01:10:39,310
manpower to helping push Vulcan no

1775
01:10:37,600 --> 01:10:42,390
actually I'm not aware of that yet I

1776
01:10:39,310 --> 01:10:45,160
mean I I well I was aware that they were

1777
01:10:42,390 --> 01:10:47,860
trying to help with Vulcan and trying to

1778
01:10:45,159 --> 01:10:49,359
make mantle sort of be a basis for

1779
01:10:47,859 --> 01:10:51,130
Vulcan and so on I did know they were

1780
01:10:49,359 --> 01:10:53,739
doing that but I didn't know they were

1781
01:10:51,130 --> 01:10:57,190
dropping support for mantle yet are you

1782
01:10:53,739 --> 01:11:00,279
sure I mean I I don't follow AMD very

1783
01:10:57,189 --> 01:11:05,409
closely sorry AMD people no offense I

1784
01:11:00,279 --> 01:11:07,719
just don't so I had no idea for all I

1785
01:11:05,409 --> 01:11:09,880
knew you know Vulcans not a thing yet

1786
01:11:07,720 --> 01:11:11,380
right so for all I knew I assumed they

1787
01:11:09,880 --> 01:11:14,460
were still going to do mantle at some

1788
01:11:11,380 --> 01:11:14,460
point but maybe they're not

1789
01:11:22,880 --> 01:11:26,940
the push buffer is an abstraction layer

1790
01:11:25,079 --> 01:11:28,260
relying on memory for communication

1791
01:11:26,939 --> 01:11:29,669
instead of a bunch of functions if I

1792
01:11:28,260 --> 01:11:32,220
understand correctly is that how you

1793
01:11:29,670 --> 01:11:35,489
prefer API design in general the answer

1794
01:11:32,220 --> 01:11:38,310
is yes I I do prefer API designed to be

1795
01:11:35,489 --> 01:11:39,929
memory based not function based and the

1796
01:11:38,310 --> 01:11:42,539
reason for that is I feel like it's

1797
01:11:39,930 --> 01:11:45,270
better SPECT it's more flexible it has a

1798
01:11:42,539 --> 01:11:47,880
bunch of important aspects things you

1799
01:11:45,270 --> 01:11:50,430
can do for it such as tracing capture

1800
01:11:47,880 --> 01:11:52,199
and stuff like that and so API is that

1801
01:11:50,430 --> 01:11:54,090
are based on functions tend to be hairy

1802
01:11:52,199 --> 01:11:56,189
they tend to be complex they tend to be

1803
01:11:54,090 --> 01:11:58,289
difficult to document whereas API is

1804
01:11:56,189 --> 01:12:01,829
based on memory layout tend to be the

1805
01:11:58,289 --> 01:12:05,180
opposite of all those things so yeah

1806
01:12:01,829 --> 01:12:08,100
it's what I prefer certainly for

1807
01:12:05,180 --> 01:12:11,750
anything like a renderer there are other

1808
01:12:08,100 --> 01:12:13,920
times when maybe API is make more sense

1809
01:12:11,750 --> 01:12:15,779
become a stay P has make more sense

1810
01:12:13,920 --> 01:12:17,579
because you have kind of a sprawling

1811
01:12:15,779 --> 01:12:19,259
concern like the whole game for example

1812
01:12:17,579 --> 01:12:20,489
has pieces that have api's in them and

1813
01:12:19,260 --> 01:12:23,340
you wouldn't want to turn those into

1814
01:12:20,489 --> 01:12:26,279
memory api's because they're just it's

1815
01:12:23,340 --> 01:12:27,810
gonna be too complex for that so I guess

1816
01:12:26,279 --> 01:12:29,399
I should say I prefer that kind of API

1817
01:12:27,810 --> 01:12:31,770
design when you have a problem it's

1818
01:12:29,399 --> 01:12:34,079
straightforward like rendering is that

1819
01:12:31,770 --> 01:12:42,660
has very well-defined ins and outs in

1820
01:12:34,079 --> 01:12:52,289
that way any more questions about the

1821
01:12:42,659 --> 01:12:56,430
code anyone anyone not seeing any so I

1822
01:12:52,289 --> 01:13:01,670
think we're close to wrapping up I would

1823
01:12:56,430 --> 01:13:01,670
say yeah

1824
01:13:03,289 --> 01:13:09,760
all right well I don't see any more code

1825
01:13:05,720 --> 01:13:09,760
questions so I guess we are done here

1826
01:13:10,720 --> 01:13:17,119
yeah seems good I think that basically

1827
01:13:14,960 --> 01:13:21,159
the push buffer stuff should be

1828
01:13:17,119 --> 01:13:23,989
relatively clear again no mystery here

1829
01:13:21,159 --> 01:13:26,750
we we need it for two reasons we need it

1830
01:13:23,989 --> 01:13:28,130
one sort of to support that multi target

1831
01:13:26,750 --> 01:13:30,199
stuff I like to use it to support the

1832
01:13:28,130 --> 01:13:32,690
multi target stuff but also for the

1833
01:13:30,199 --> 01:13:33,729
sorting and sort of organization all the

1834
01:13:32,689 --> 01:13:35,689
things that are coming out of the game

1835
01:13:33,729 --> 01:13:37,819
so we're going to try and push towards

1836
01:13:35,689 --> 01:13:39,619
that one thing that we'll probably try

1837
01:13:37,819 --> 01:13:40,819
to do relatively soon after we get some

1838
01:13:39,619 --> 01:13:41,960
of these more of these divisions in

1839
01:13:40,819 --> 01:13:44,809
there a little bit more as we'll try to

1840
01:13:41,960 --> 01:13:46,039
add that sorting in and that'll actually

1841
01:13:44,810 --> 01:13:49,640
fix a bug that we've had for a while

1842
01:13:46,039 --> 01:13:52,100
right if you remember our little dude

1843
01:13:49,640 --> 01:13:54,110
here he goes behind trees sometimes

1844
01:13:52,100 --> 01:13:56,960
depending on the order in which the game

1845
01:13:54,109 --> 01:13:58,519
happens to traverse those entities so

1846
01:13:56,960 --> 01:14:01,279
that will fix that bug for us which is

1847
01:13:58,520 --> 01:14:03,500
kind of nice you know it's just nice to

1848
01:14:01,279 --> 01:14:07,519
kind of have that taken care of for us

1849
01:14:03,500 --> 01:14:09,649
so that's good so yeah so I would I

1850
01:14:07,520 --> 01:14:11,630
would say that we'll get like a nice

1851
01:14:09,649 --> 01:14:12,829
benefit out doing that and then soon

1852
01:14:11,630 --> 01:14:15,109
after that we'll probably get another

1853
01:14:12,829 --> 01:14:17,090
benefit to which is that our integer

1854
01:14:15,109 --> 01:14:18,439
snap coordinates which kind of cause you

1855
01:14:17,090 --> 01:14:20,869
can see a little shimmering and the two

1856
01:14:18,439 --> 01:14:22,819
in the trees they kind of have that sort

1857
01:14:20,869 --> 01:14:24,470
of stopping pattern which you see a lot

1858
01:14:22,819 --> 01:14:26,659
in games nowadays actually I've seen

1859
01:14:24,470 --> 01:14:28,460
like a lot of 8-bit games or sort of

1860
01:14:26,659 --> 01:14:32,329
demake style games having this kind of

1861
01:14:28,460 --> 01:14:33,829
ugly jitter we'll be fixing that pretty

1862
01:14:32,329 --> 01:14:35,479
soon as well too because now we'll have

1863
01:14:33,829 --> 01:14:36,859
a real renderer that can deal with that

1864
01:14:35,479 --> 01:14:40,459
stuff properly it makes a big difference

1865
01:14:36,859 --> 01:14:40,789
and so we'll try to take care of that as

1866
01:14:40,460 --> 01:14:44,449
well

1867
01:14:40,789 --> 01:14:45,890
so anyway good stuff on the horizon I'm

1868
01:14:44,449 --> 01:14:48,529
excited to get the renderer taken care

1869
01:14:45,890 --> 01:14:50,630
of as well so let's go ahead and save

1870
01:14:48,529 --> 01:14:52,599
our state here on the blackboard will

1871
01:14:50,630 --> 01:14:55,369
close down our compiler in our editor

1872
01:14:52,600 --> 01:14:56,240
and we will close down for the day I'll

1873
01:14:55,369 --> 01:14:58,090
double check to make sure there's any

1874
01:14:56,239 --> 01:15:01,550
other questions

1875
01:14:58,090 --> 01:15:05,930
see if there's anything else does not

1876
01:15:01,550 --> 01:15:06,680
look like it all right so thank you

1877
01:15:05,930 --> 01:15:08,090
everyone for joining me for another

1878
01:15:06,680 --> 01:15:10,100
episode of handmade hero that pleasure

1879
01:15:08,090 --> 01:15:12,110
coding with you as always I am excited

1880
01:15:10,100 --> 01:15:14,360
to do some renderer works this is going

1881
01:15:12,109 --> 01:15:15,769
to be a fun week I think it's it's I

1882
01:15:14,359 --> 01:15:16,729
don't know getting stuff on the screen

1883
01:15:15,770 --> 01:15:18,650
graphically is

1884
01:15:16,729 --> 01:15:20,209
he's fun so tweaking with that it's just

1885
01:15:18,649 --> 01:15:22,699
it's a lot of fun

1886
01:15:20,210 --> 01:15:24,409
so anyway I'm excited to do that it just

1887
01:15:22,699 --> 01:15:26,119
kind of emerged it's just where the code

1888
01:15:24,409 --> 01:15:27,889
was going so we're going there that's

1889
01:15:26,119 --> 01:15:30,109
just how it's gonna go so I hope you'll

1890
01:15:27,890 --> 01:15:33,050
join me tomorrow again 5:00 p.m. Pacific

1891
01:15:30,109 --> 01:15:35,719
Daylight Time again hope see here on

1892
01:15:33,050 --> 01:15:37,760
Twitch same time same place if you would

1893
01:15:35,720 --> 01:15:40,340
like to follow along the source code you

1894
01:15:37,760 --> 01:15:43,100
can always preorder on handmade hero org

1895
01:15:40,340 --> 01:15:44,270
the game if you preorder the game you

1896
01:15:43,100 --> 01:15:45,530
get the source code during the whole

1897
01:15:44,270 --> 01:15:47,180
development so you can keep downloading

1898
01:15:45,529 --> 01:15:51,880
it playing with it doing whatever you

1899
01:15:47,180 --> 01:15:53,960
want right up till the day we ship and

1900
01:15:51,880 --> 01:15:55,699
if you want to do that you can do that I

1901
01:15:53,960 --> 01:15:57,649
have my hero org you can also if you

1902
01:15:55,699 --> 01:15:58,970
want to support our video series this

1903
01:15:57,649 --> 01:16:01,250
educational series you can subscribe to

1904
01:15:58,970 --> 01:16:03,470
our patreon always much appreciated we

1905
01:16:01,250 --> 01:16:04,909
also have a forums page and the forums

1906
01:16:03,470 --> 01:16:06,380
page is where you can ask questions or

1907
01:16:04,909 --> 01:16:08,029
find ports Mac and Linux there's also an

1908
01:16:06,380 --> 01:16:10,340
episode guide on there that's pretty

1909
01:16:08,029 --> 01:16:12,380
cool catch up with past episodes there's

1910
01:16:10,340 --> 01:16:13,850
a tweet bop tweets the schedule so if

1911
01:16:12,380 --> 01:16:17,060
you want to know when the video series

1912
01:16:13,850 --> 01:16:19,970
will be live that's the place to go so

1913
01:16:17,060 --> 01:16:22,670
definitely check that out and yeah I

1914
01:16:19,970 --> 01:16:24,440
hope you guys are gonna have a good week

1915
01:16:22,670 --> 01:16:27,079
and I hope to see you back here tomorrow

1916
01:16:24,439 --> 01:16:29,859
for some more renderer action

1917
01:16:27,079 --> 01:16:29,859
take it easy everyone

