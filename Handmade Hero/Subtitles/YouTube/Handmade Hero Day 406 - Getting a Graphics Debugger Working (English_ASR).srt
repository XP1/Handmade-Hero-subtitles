1
00:00:01,790 --> 00:00:06,450
hello everyone and welcome to handmade

2
00:00:04,769 --> 00:00:08,549
Hero the show recode a complete game

3
00:00:06,450 --> 00:00:10,740
live on stream this is our first time

4
00:00:08,550 --> 00:00:13,469
back actually programming on handmade

5
00:00:10,740 --> 00:00:14,759
hero we did some test streams this is

6
00:00:13,468 --> 00:00:17,189
our first time back program at handmade

7
00:00:14,759 --> 00:00:19,800
hero since we fixed the streaming

8
00:00:17,190 --> 00:00:22,140
machine and the whole reason we fix the

9
00:00:19,800 --> 00:00:25,199
streaming machine was because we were

10
00:00:22,140 --> 00:00:28,618
trying to program a shader and our AMD

11
00:00:25,199 --> 00:00:30,840
card was like card crashing the driver I

12
00:00:28,618 --> 00:00:33,899
I don't even really know if we had a bug

13
00:00:30,839 --> 00:00:35,519
in the shader I mean we certainly hadn't

14
00:00:33,899 --> 00:00:36,390
even gotten close to finishing the

15
00:00:35,520 --> 00:00:37,440
shader because we were just in the

16
00:00:36,390 --> 00:00:38,878
middle of working on it so it's not like

17
00:00:37,439 --> 00:00:40,710
it's done or anything so it certainly

18
00:00:38,878 --> 00:00:41,699
has bugs in the sense that there are

19
00:00:40,710 --> 00:00:43,649
whole parts of it they're not even

20
00:00:41,700 --> 00:00:47,090
implemented but I don't know if there's

21
00:00:43,649 --> 00:00:50,189
actually anything in it that was crashy

22
00:00:47,090 --> 00:00:54,109
but we certainly had something in that

23
00:00:50,189 --> 00:00:57,448
that was crashy for the old AMD card so

24
00:00:54,109 --> 00:01:00,238
we decided it was time to finally take

25
00:00:57,448 --> 00:01:02,608
take the step of upgrading to a two

26
00:01:00,238 --> 00:01:04,228
machine setup which we did it took a lot

27
00:01:02,609 --> 00:01:07,140
longer than I was expecting to build

28
00:01:04,228 --> 00:01:11,239
because we had a bad CPU in the mix

29
00:01:07,140 --> 00:01:14,670
turns out the streaming setup is too

30
00:01:11,239 --> 00:01:16,769
core i7s one in each machine and one of

31
00:01:14,670 --> 00:01:20,310
them was bad which took forever to try

32
00:01:16,769 --> 00:01:23,129
and debug so that wasn't great but that

33
00:01:20,310 --> 00:01:24,629
you know finally got resolved and now

34
00:01:23,129 --> 00:01:26,310
we've done some test streams and it

35
00:01:24,629 --> 00:01:28,379
seems like everything is recording and

36
00:01:26,310 --> 00:01:29,909
streaming properly aid we haven't had

37
00:01:28,379 --> 00:01:31,078
anything weird happen like a machine

38
00:01:29,909 --> 00:01:35,759
crash in the middle of the stream or

39
00:01:31,078 --> 00:01:39,029
anything so hopefully we can now do some

40
00:01:35,759 --> 00:01:41,688
programming on GPU stuff and if we do

41
00:01:39,030 --> 00:01:44,489
crash it's okay right it should not

42
00:01:41,688 --> 00:01:46,258
cause any kind of problems also we got

43
00:01:44,489 --> 00:01:48,810
some fringe benefits the fact that now

44
00:01:46,259 --> 00:01:51,030
we're streaming using an HDMI capture on

45
00:01:48,810 --> 00:01:52,649
a secondary machine also means that we

46
00:01:51,030 --> 00:01:54,239
no longer have to worry about weird

47
00:01:52,649 --> 00:01:57,689
stuff like when we're trying to profile

48
00:01:54,239 --> 00:01:59,188
our game or get the streaming of the

49
00:01:57,688 --> 00:02:01,828
game working we no longer have to do

50
00:01:59,188 --> 00:02:04,048
special things to try and work around

51
00:02:01,828 --> 00:02:05,728
the fact that like OBS is running in the

52
00:02:04,049 --> 00:02:07,409
background or that the whole window

53
00:02:05,728 --> 00:02:09,330
capture is running in an interrupted

54
00:02:07,409 --> 00:02:12,420
compositor and all sorts of other things

55
00:02:09,330 --> 00:02:13,920
like this so it does give us a much more

56
00:02:12,419 --> 00:02:14,969
true setup to

57
00:02:13,919 --> 00:02:18,000
it would be like if you were game

58
00:02:14,969 --> 00:02:20,098
developing on you know just a machine

59
00:02:18,000 --> 00:02:21,719
your own machine because normally when

60
00:02:20,098 --> 00:02:23,189
you're developing you don't have these

61
00:02:21,719 --> 00:02:24,780
constraints like you're not trying to

62
00:02:23,189 --> 00:02:27,598
stream the running of the game and

63
00:02:24,780 --> 00:02:33,150
you're not trying to do any sort of

64
00:02:27,598 --> 00:02:34,229
weird like you know coding in with OBS

65
00:02:33,150 --> 00:02:36,120
running the background and all those

66
00:02:34,229 --> 00:02:38,939
sorts of stuff so this is more like what

67
00:02:36,120 --> 00:02:41,069
a typical dev machine would be if you

68
00:02:38,939 --> 00:02:43,259
were using it so that's also kind of a

69
00:02:41,068 --> 00:02:45,268
nice fringe benefit and obviously we can

70
00:02:43,259 --> 00:02:46,889
also if we do crash the driver it's no

71
00:02:45,269 --> 00:02:48,689
big deal we can just reboot the Machine

72
00:02:46,889 --> 00:02:52,229
and the stream and the recording don't

73
00:02:48,689 --> 00:02:54,329
stop so again just it just it's a nice

74
00:02:52,229 --> 00:02:56,009
way to bring us closer to how it will

75
00:02:54,330 --> 00:02:58,410
actually feel if you're doing this on

76
00:02:56,009 --> 00:03:01,169
your machine is you know at home or

77
00:02:58,409 --> 00:03:02,639
working at a company on developing stuff

78
00:03:01,169 --> 00:03:05,099
you don't normally have to worry about

79
00:03:02,639 --> 00:03:06,149
those things you know and now we don't

80
00:03:05,099 --> 00:03:09,750
have to worry about them either so

81
00:03:06,150 --> 00:03:14,069
that's pretty nice ok so I will go ahead

82
00:03:09,750 --> 00:03:16,229
and sort of open up the code base here

83
00:03:14,068 --> 00:03:17,789
now it's been a long time so I fully

84
00:03:16,229 --> 00:03:19,679
expect everyone to have forgotten what

85
00:03:17,789 --> 00:03:22,078
we're doing so we'll take it pretty slow

86
00:03:19,680 --> 00:03:25,769
today don't ask me why I remember what

87
00:03:22,079 --> 00:03:31,109
we're doing I probably should have

88
00:03:25,769 --> 00:03:34,950
forgotten as well but I didn't so I

89
00:03:31,109 --> 00:03:36,750
guess that's good but I'm gonna go ahead

90
00:03:34,949 --> 00:03:39,000
and open up for coder here and just get

91
00:03:36,750 --> 00:03:42,389
the game running and do the various sort

92
00:03:39,000 --> 00:03:43,979
of basic startup stuff so here's our

93
00:03:42,389 --> 00:03:45,988
handmade project I'm gonna go ahead and

94
00:03:43,979 --> 00:03:48,509
build it and make sure we're still

95
00:03:45,989 --> 00:03:49,890
building and running that again we kind

96
00:03:48,509 --> 00:03:52,379
of did test this on the test stream we

97
00:03:49,889 --> 00:03:54,479
didn't do any code changes though but

98
00:03:52,379 --> 00:03:56,489
we've got the kind of weird visual

99
00:03:54,479 --> 00:03:58,469
studio you know when I reinstalled video

100
00:03:56,489 --> 00:04:04,289
studio it's it's visual studio whatever

101
00:03:58,469 --> 00:04:07,829
the latest one is i20 visual studio 20

102
00:04:04,289 --> 00:04:11,818
49 starring Harrison Ford and Ryan

103
00:04:07,829 --> 00:04:13,590
Gosling so anyway if we if we load up

104
00:04:11,818 --> 00:04:15,539
the project I don't know what all this

105
00:04:13,590 --> 00:04:16,590
garbage is I could probably figure out a

106
00:04:15,539 --> 00:04:19,769
way to stop but if we look in the

107
00:04:16,589 --> 00:04:22,469
settings but if we load up the game it's

108
00:04:19,769 --> 00:04:25,560
still running correctly and I believe

109
00:04:22,470 --> 00:04:27,600
this is actually also correct because we

110
00:04:25,560 --> 00:04:29,730
left off when we're doing lighting

111
00:04:27,600 --> 00:04:31,980
and we hadn't optimized the lighting at

112
00:04:29,730 --> 00:04:34,290
all so if I remember correctly what we

113
00:04:31,980 --> 00:04:40,319
had done is we put the lighting on a

114
00:04:34,290 --> 00:04:42,569
switch and so we would it won't actually

115
00:04:40,319 --> 00:04:46,500
do any calculations till we like hit

116
00:04:42,569 --> 00:04:48,569
whatever the hotkey is and then it would

117
00:04:46,500 --> 00:04:52,199
sort of try to run the shader to show it

118
00:04:48,569 --> 00:04:53,879
as well and so that is where we're at

119
00:04:52,199 --> 00:04:56,789
and that's where we're going to go back

120
00:04:53,879 --> 00:04:59,279
to here now also note that we have like

121
00:04:56,790 --> 00:05:00,720
kind of we haven't really done any of

122
00:04:59,279 --> 00:05:02,939
the work in the renderer to really fully

123
00:05:00,720 --> 00:05:05,340
support what we were trying to do so

124
00:05:02,939 --> 00:05:09,959
there's also some weird artifacts here

125
00:05:05,339 --> 00:05:12,659
like for example this since this text

126
00:05:09,959 --> 00:05:14,099
actually goes through the same shader we

127
00:05:12,660 --> 00:05:15,450
didn't like have anything in the render

128
00:05:14,100 --> 00:05:17,879
that switches the text to a separate

129
00:05:15,449 --> 00:05:20,459
shader all of the lighting code is

130
00:05:17,879 --> 00:05:23,219
actually running on the text as well so

131
00:05:20,459 --> 00:05:24,589
the text is like when all of the world

132
00:05:23,220 --> 00:05:27,420
is black because there are no lights

133
00:05:24,589 --> 00:05:32,219
then you also will get the text

134
00:05:27,420 --> 00:05:37,830
appearing black as well so that's where

135
00:05:32,220 --> 00:05:41,850
we're at now if you bring up the code

136
00:05:37,829 --> 00:05:46,229
here if you take a look at the rendering

137
00:05:41,850 --> 00:05:50,660
code that we have so you can see here at

138
00:05:46,230 --> 00:05:53,040
the bottom we've got sort of how the

139
00:05:50,660 --> 00:05:55,410
where where we left off in terms of how

140
00:05:53,040 --> 00:05:57,660
we were doing the debugging here you can

141
00:05:55,410 --> 00:06:00,960
actually see what we were sort of trying

142
00:05:57,660 --> 00:06:04,620
to do so the way this was working just

143
00:06:00,959 --> 00:06:06,779
to refresh everyone's memory is we put

144
00:06:04,620 --> 00:06:09,660
in a little I don't know like a shunt

145
00:06:06,779 --> 00:06:11,489
here basically that instead of trying to

146
00:06:09,660 --> 00:06:12,990
do lighting on the GPU at first we were

147
00:06:11,490 --> 00:06:16,650
actually just computing lighting on the

148
00:06:12,990 --> 00:06:18,710
CPU so we had this little piece of code

149
00:06:16,649 --> 00:06:22,279
here that would take all of the

150
00:06:18,709 --> 00:06:25,769
quadrilaterals that we'd sent down right

151
00:06:22,279 --> 00:06:29,009
so normally when the game's rendering

152
00:06:25,769 --> 00:06:30,569
all of the sprites and all of the cubes

153
00:06:29,009 --> 00:06:33,899
that make up the sort of floating

154
00:06:30,569 --> 00:06:36,810
landmass all of those are going down as

155
00:06:33,899 --> 00:06:38,549
a set of quadrilaterals that can

156
00:06:36,810 --> 00:06:40,259
optionally have textures on them but

157
00:06:38,550 --> 00:06:40,860
they can also if you want them to be as

158
00:06:40,259 --> 00:06:43,199
they like

159
00:06:40,860 --> 00:06:45,658
landmasses are at the moment just be

160
00:06:43,199 --> 00:06:48,509
solid color and the way solid color is

161
00:06:45,658 --> 00:06:50,879
implemented is with just it's you always

162
00:06:48,509 --> 00:06:52,650
do select a texture on every quad but

163
00:06:50,879 --> 00:06:55,530
you can select just a pure white texture

164
00:06:52,649 --> 00:06:57,418
so instead of it being something like

165
00:06:55,529 --> 00:06:59,250
grassy or whatever that it would

166
00:06:57,418 --> 00:07:02,549
normally be it can also just be you know

167
00:06:59,250 --> 00:07:05,250
whatever the color of the quad is and

168
00:07:02,550 --> 00:07:06,990
not have any actual texture on it so

169
00:07:05,250 --> 00:07:08,819
that's the way we were implementing that

170
00:07:06,990 --> 00:07:10,519
and you can see here in the extract

171
00:07:08,819 --> 00:07:12,840
reflectors from quads function

172
00:07:10,519 --> 00:07:14,908
essentially what we were doing is going

173
00:07:12,839 --> 00:07:17,519
through all of those and making little

174
00:07:14,908 --> 00:07:18,750
dummy reflector objects which are sort

175
00:07:17,519 --> 00:07:19,978
of these things that we compute the

176
00:07:18,750 --> 00:07:21,598
lighting on and they're just sort of

177
00:07:19,978 --> 00:07:23,459
like we haven't really decided how

178
00:07:21,598 --> 00:07:24,389
exactly that's going to work so we were

179
00:07:23,459 --> 00:07:25,978
just playing around with it and

180
00:07:24,389 --> 00:07:28,168
basically what does it just puts a bunch

181
00:07:25,978 --> 00:07:29,370
of like little elements in the scene

182
00:07:28,168 --> 00:07:31,079
that we're gonna transfer the light

183
00:07:29,370 --> 00:07:37,590
around on right it's just a very

184
00:07:31,079 --> 00:07:40,050
approximate thing yep

185
00:07:37,589 --> 00:07:41,448
I think we're using the verts one now

186
00:07:40,050 --> 00:07:43,710
but I'm not sure I'll go check

187
00:07:41,449 --> 00:07:45,689
extract reflectors from virtues the same

188
00:07:43,709 --> 00:07:47,370
thing but instead of using this like the

189
00:07:45,689 --> 00:07:50,250
quadrilaterals themselves is where to

190
00:07:47,370 --> 00:07:55,139
put it this one put it at the vertices

191
00:07:50,250 --> 00:07:56,250
right or near the vertices so I think

192
00:07:55,139 --> 00:07:58,949
what it does didn't like that in the

193
00:07:56,250 --> 00:08:00,449
corner or something like that right we

194
00:07:58,949 --> 00:08:03,028
then have the lighting test function

195
00:08:00,449 --> 00:08:04,830
which would essentially do sort of you

196
00:08:03,028 --> 00:08:06,629
know a crappy lighting simulation and

197
00:08:04,829 --> 00:08:09,750
the way that this worked was it would go

198
00:08:06,629 --> 00:08:11,490
over all of the reflectors and it would

199
00:08:09,750 --> 00:08:14,430
do a lighting computation on them now we

200
00:08:11,490 --> 00:08:17,430
had two things we were doing one of them

201
00:08:14,430 --> 00:08:20,098
there was this approximation of how much

202
00:08:17,430 --> 00:08:21,269
each of these reflectors was occluding

203
00:08:20,098 --> 00:08:23,878
sorted like sort of an ambient occlusion

204
00:08:21,269 --> 00:08:26,060
thing and I don't really think we're

205
00:08:23,879 --> 00:08:28,860
using that anymore

206
00:08:26,060 --> 00:08:31,439
could be wrong about that but I'm not

207
00:08:28,860 --> 00:08:32,849
yeah I think we sort of decided that was

208
00:08:31,439 --> 00:08:36,690
maybe not the most interesting thing to

209
00:08:32,849 --> 00:08:41,009
do and so what I did instead was I ended

210
00:08:36,690 --> 00:08:43,380
up putting in shadow casting in here so

211
00:08:41,009 --> 00:08:45,179
effectively what happens is in the

212
00:08:43,379 --> 00:08:47,278
compute lighting when we would actually

213
00:08:45,179 --> 00:08:50,278
look at the transfer of light between

214
00:08:47,278 --> 00:08:54,679
each of the elements we actually do hit

215
00:08:50,278 --> 00:08:57,809
testing on the lighting elements as well

216
00:08:54,679 --> 00:08:59,429
so that's how that was working and what

217
00:08:57,809 --> 00:09:01,019
that would do is for every one of these

218
00:08:59,429 --> 00:09:03,929
lighting elements that we generated it

219
00:09:01,019 --> 00:09:06,809
would sort of store what it thought the

220
00:09:03,929 --> 00:09:07,949
end lighting was and we hadn't done

221
00:09:06,809 --> 00:09:09,869
anything fancy here

222
00:09:07,950 --> 00:09:11,970
it was really basic but it was sort of

223
00:09:09,870 --> 00:09:13,950
working right it could sort of it sort

224
00:09:11,970 --> 00:09:16,340
of had shadows and it sort of had

225
00:09:13,950 --> 00:09:20,040
lighting transfer that made some sense

226
00:09:16,340 --> 00:09:23,660
so it's not completely out to lunch but

227
00:09:20,039 --> 00:09:23,659
it's also not like good or anything yet

228
00:09:23,750 --> 00:09:28,710
we then had output lighting quads and

229
00:09:26,279 --> 00:09:31,949
what output lighting quads does is well

230
00:09:28,710 --> 00:09:33,420
there's sort of two verse of what we do

231
00:09:31,950 --> 00:09:35,040
when we out because we I need to get me

232
00:09:33,419 --> 00:09:37,289
compute this lighting on these like

233
00:09:35,039 --> 00:09:40,889
intermediate elements we then need some

234
00:09:37,289 --> 00:09:42,839
way of having that actually you know go

235
00:09:40,889 --> 00:09:44,970
feedback in to the rendering so you can

236
00:09:42,840 --> 00:09:46,440
actually see it and you can kind of see

237
00:09:44,970 --> 00:09:48,990
here that we have a number of different

238
00:09:46,440 --> 00:09:51,690
ways that that happens right so output

239
00:09:48,990 --> 00:09:54,690
letting quads is one that just instead

240
00:09:51,690 --> 00:09:58,770
of rendering the scene it actually just

241
00:09:54,690 --> 00:10:03,360
hijacks the scene essentially and over

242
00:09:58,769 --> 00:10:05,850
writes the scene with the just like a

243
00:10:03,360 --> 00:10:08,159
basically a debug view by taking each of

244
00:10:05,850 --> 00:10:11,460
the lighting elements and replacing the

245
00:10:08,159 --> 00:10:14,240
quad that it came from with itself you

246
00:10:11,460 --> 00:10:16,680
know with with the the lighting element

247
00:10:14,240 --> 00:10:18,870
so that you get to see what we computed

248
00:10:16,679 --> 00:10:21,149
for lighting elements we then add an

249
00:10:18,870 --> 00:10:22,889
output lighting verts one and this was

250
00:10:21,149 --> 00:10:25,289
kind of shame because this actually was

251
00:10:22,889 --> 00:10:29,370
kind of cool-looking right it started to

252
00:10:25,289 --> 00:10:32,129
look reasonable if not particularly good

253
00:10:29,370 --> 00:10:33,960
and what that did was it went through

254
00:10:32,129 --> 00:10:36,049
and it took the lighting elements and it

255
00:10:33,960 --> 00:10:42,300
put the lighting element information

256
00:10:36,049 --> 00:10:44,069
back into each quadrilateral but each of

257
00:10:42,299 --> 00:10:47,429
the vertices of the quadrilateral have

258
00:10:44,070 --> 00:10:49,140
the lighting information separate so

259
00:10:47,429 --> 00:10:50,939
that you could get a color wash across

260
00:10:49,139 --> 00:10:52,350
things because because you know it was

261
00:10:50,940 --> 00:10:54,630
for when we did extract lighting for

262
00:10:52,350 --> 00:10:56,070
vertex lighting elements we would be

263
00:10:54,629 --> 00:10:58,230
computing the lighting lighting near

264
00:10:56,070 --> 00:11:00,629
each of the vertices and so we ended up

265
00:10:58,230 --> 00:11:03,000
having sort of a better you know a

266
00:11:00,629 --> 00:11:04,740
pretty nice letting thing there but

267
00:11:03,000 --> 00:11:06,059
still not nearly good enough to use it

268
00:11:04,740 --> 00:11:13,409
was just like okay that's much better

269
00:11:06,059 --> 00:11:16,289
it was rain all right so now we get down

270
00:11:13,409 --> 00:11:17,909
to some of the other stuff here it's

271
00:11:16,289 --> 00:11:21,750
what we were trying to work on when we

272
00:11:17,909 --> 00:11:24,500
ended up crashing the AMD card so output

273
00:11:21,750 --> 00:11:28,980
texture debug what this does is this is

274
00:11:24,500 --> 00:11:30,419
something that takes sort of a more

275
00:11:28,980 --> 00:11:33,960
voxel approach we were starting to work

276
00:11:30,419 --> 00:11:36,089
on and what this was was a way of saying

277
00:11:33,960 --> 00:11:38,250
okay what we want to be able to do is

278
00:11:36,090 --> 00:11:41,430
maybe do per-pixel lighting on the GPU

279
00:11:38,250 --> 00:11:43,769
where every time we're filling any pixel

280
00:11:41,429 --> 00:11:46,109
at all we want to be able to look up

281
00:11:43,769 --> 00:11:47,909
into a lighting table that tells us what

282
00:11:46,110 --> 00:11:52,409
the lighting should be around this area

283
00:11:47,909 --> 00:11:55,709
right so what this does right here

284
00:11:52,409 --> 00:11:57,419
output texture debug is this is

285
00:11:55,710 --> 00:12:02,970
something that just puts that

286
00:11:57,419 --> 00:12:05,639
information into the into the renderer

287
00:12:02,970 --> 00:12:08,070
in a way we can see so it just goes

288
00:12:05,639 --> 00:12:10,319
through each of the you know in we

289
00:12:08,070 --> 00:12:12,800
haven't gone over like what we're

290
00:12:10,320 --> 00:12:15,600
actually talking about here in terms of

291
00:12:12,799 --> 00:12:17,549
what's in the voxel grid but assuming

292
00:12:15,600 --> 00:12:20,460
that you have a voxel grid of these

293
00:12:17,549 --> 00:12:24,269
dimensions it goes through each cell in

294
00:12:20,460 --> 00:12:28,170
the voxel grid takes whatever the like

295
00:12:24,269 --> 00:12:31,500
lighting value was there and creates a

296
00:12:28,169 --> 00:12:34,559
cube in that in that grid of the vaak

297
00:12:31,500 --> 00:12:38,009
like in the render stream it creates an

298
00:12:34,559 --> 00:12:40,589
actual cube that will be drawn and puts

299
00:12:38,009 --> 00:12:43,080
it there with the lighting color that it

300
00:12:40,590 --> 00:12:44,910
should have and that was basically just

301
00:12:43,080 --> 00:12:47,100
so we could see that there was a grid

302
00:12:44,909 --> 00:12:50,250
and that values were getting filled in

303
00:12:47,100 --> 00:12:51,870
in the grid right but that doesn't have

304
00:12:50,250 --> 00:12:54,779
anything to do with actually using that

305
00:12:51,870 --> 00:12:57,240
lighting for per pixel computations it's

306
00:12:54,779 --> 00:12:59,629
just there to create a render stream

307
00:12:57,240 --> 00:13:02,279
that we can view if we want to see

308
00:12:59,629 --> 00:13:03,529
whether the voxel has valid data in it

309
00:13:02,279 --> 00:13:07,139
that's all it is

310
00:13:03,529 --> 00:13:08,970
all right so then we've got output

311
00:13:07,139 --> 00:13:12,029
loading textures output lighting

312
00:13:08,970 --> 00:13:13,500
textures is the actual code that's

313
00:13:12,029 --> 00:13:16,049
closer to what we would be doing if we

314
00:13:13,500 --> 00:13:17,850
were doing this for real and again we

315
00:13:16,049 --> 00:13:20,238
probably I don't know that we will do

316
00:13:17,850 --> 00:13:22,730
this on the CPU either way

317
00:13:20,239 --> 00:13:25,548
we may do all of the lighting on the GPU

318
00:13:22,730 --> 00:13:28,278
it's hard to say so doing it for real

319
00:13:25,548 --> 00:13:30,470
just means doing the correct set of

320
00:13:28,278 --> 00:13:34,639
steps I don't necessarily mean the way

321
00:13:30,470 --> 00:13:36,350
we would necessarily ship it but point

322
00:13:34,639 --> 00:13:38,749
being what we do for output loading

323
00:13:36,350 --> 00:13:41,298
textures here is we go through and we

324
00:13:38,749 --> 00:13:43,850
see for all of our lighting elements

325
00:13:41,298 --> 00:13:45,528
that we've got we go through all of

326
00:13:43,850 --> 00:13:48,379
those lighting elements and we figure

327
00:13:45,528 --> 00:13:51,168
out what the bounding area is of those

328
00:13:48,379 --> 00:13:53,149
lighting elements because that is the

329
00:13:51,168 --> 00:13:59,178
total amount of space that we will have

330
00:13:53,149 --> 00:14:02,869
to have covered by our voxel right we

331
00:13:59,178 --> 00:14:05,298
then go through and figure out how big

332
00:14:02,869 --> 00:14:07,428
the voxel has to be right so how big

333
00:14:05,298 --> 00:14:10,548
each voxel cell has to be to cover that

334
00:14:07,428 --> 00:14:14,418
area because we don't ever change the

335
00:14:10,548 --> 00:14:16,850
dimensions the cell counts right there's

336
00:14:14,418 --> 00:14:20,659
always the same number of cells in the

337
00:14:16,850 --> 00:14:23,600
voxel along X or Y and on Z all we do is

338
00:14:20,659 --> 00:14:28,788
stretch how big those cells are so that

339
00:14:23,600 --> 00:14:31,038
they properly fit into the so that it

340
00:14:28,788 --> 00:14:33,558
properly covers the entirety of the

341
00:14:31,038 --> 00:14:35,688
lighting elements that are involved we

342
00:14:33,558 --> 00:14:38,868
then go through each of the elements

343
00:14:35,688 --> 00:14:40,730
themselves we look to see where we would

344
00:14:38,869 --> 00:14:44,739
have to place those elements in the

345
00:14:40,730 --> 00:14:47,359
voxel and we place them into the voxel

346
00:14:44,739 --> 00:14:49,788
you can see here we sort of grabbed out

347
00:14:47,359 --> 00:14:55,038
whatever the the emission value was of

348
00:14:49,788 --> 00:14:58,548
that lighting element and we looks like

349
00:14:55,038 --> 00:15:02,239
what we're doing curious saying I'm not

350
00:14:58,548 --> 00:15:04,970
not really sure what this is meant to be

351
00:15:02,239 --> 00:15:07,309
doing here but it looks like we're

352
00:15:04,970 --> 00:15:09,319
looking for a bright emitter just to

353
00:15:07,308 --> 00:15:12,738
find one bright emitter right like debug

354
00:15:09,318 --> 00:15:14,719
X debug why here so I'm not sure what I

355
00:15:12,739 --> 00:15:17,089
don't quite remember what we were doing

356
00:15:14,720 --> 00:15:19,369
with our debug X debug wide debug Z and

357
00:15:17,089 --> 00:15:22,879
we were just wanted to see some emitter

358
00:15:19,369 --> 00:15:25,038
that had a is not really brightness it's

359
00:15:22,879 --> 00:15:28,610
it's the radius so it's we were looking

360
00:15:25,038 --> 00:15:30,889
for a large emitter I'm not sure why we

361
00:15:28,610 --> 00:15:32,149
were bothering with this but that's one

362
00:15:30,889 --> 00:15:32,590
of those things we can look back at the

363
00:15:32,149 --> 00:15:36,250
Mt

364
00:15:32,590 --> 00:15:38,980
Gide if we need to know I suppose but

365
00:15:36,250 --> 00:15:40,570
anyway as we go through these what we

366
00:15:38,980 --> 00:15:43,860
were doing is we're saying for each of

367
00:15:40,570 --> 00:15:48,430
the elements we daisy-chained them

368
00:15:43,860 --> 00:15:51,279
effectively into their location in the

369
00:15:48,429 --> 00:15:55,299
grid right so we take a look at each

370
00:15:51,279 --> 00:15:59,439
element in series and we put them into

371
00:15:55,299 --> 00:16:02,349
the lighting at their correct voxel grid

372
00:15:59,440 --> 00:16:06,130
by creating a linked list at each voxel

373
00:16:02,350 --> 00:16:08,550
location right and that was

374
00:16:06,129 --> 00:16:23,409
substantively what we were doing now I

375
00:16:08,549 --> 00:16:25,359
don't know where our actual hmm the only

376
00:16:23,409 --> 00:16:29,529
thing that's a little bit weird there is

377
00:16:25,360 --> 00:16:30,820
I'm not sure okay so we were so in line

378
00:16:29,529 --> 00:16:32,259
I was like I'm not sure where we're

379
00:16:30,820 --> 00:16:35,110
doing the thing that actually packs it

380
00:16:32,259 --> 00:16:37,750
into a texture but I do now no it was

381
00:16:35,110 --> 00:16:42,159
just it's just right done right there so

382
00:16:37,750 --> 00:16:46,210
in addition to that we also sort of had

383
00:16:42,159 --> 00:16:48,250
a format for this texture right and you

384
00:16:46,210 --> 00:16:50,320
can see that happening here sort of

385
00:16:48,250 --> 00:16:54,220
we're actually packing these down to

386
00:16:50,320 --> 00:16:58,300
16-bit values here so if we take a look

387
00:16:54,220 --> 00:17:03,029
I assume that is in our render structure

388
00:16:58,299 --> 00:17:03,029
here let's go ahead and take a look

389
00:17:10,849 --> 00:17:30,949
respect out somewhere I feel like we

390
00:17:18,589 --> 00:17:34,970
should this part I don't remember yeah I

391
00:17:30,950 --> 00:17:37,700
don't see where we actually if if yes I

392
00:17:34,970 --> 00:17:39,890
should say we actually defined it

393
00:17:37,700 --> 00:17:47,509
anywhere what we were doing with that

394
00:17:39,890 --> 00:17:50,120
but so you can kind of see how we were

395
00:17:47,509 --> 00:17:51,529
doing this right well there it is so

396
00:17:50,119 --> 00:17:52,009
let's see it's we know that that's a

397
00:17:51,529 --> 00:17:53,720
desk

398
00:17:52,009 --> 00:17:56,779
we know that the desk texture is it's

399
00:17:53,720 --> 00:17:59,960
lighting textures right dest and you can

400
00:17:56,779 --> 00:18:02,109
see it looking at the P next texture so

401
00:17:59,960 --> 00:18:12,829
that should be in here right

402
00:18:02,109 --> 00:18:14,929
planning textures so it is here it's in

403
00:18:12,829 --> 00:18:17,240
handmade platform though right because

404
00:18:14,930 --> 00:18:18,620
it has to be accessed by the OpenGL code

405
00:18:17,240 --> 00:18:20,950
so yeah that makes sense

406
00:18:18,619 --> 00:18:25,429
all right so anyway this was the actual

407
00:18:20,950 --> 00:18:27,950
thing we were building right and this is

408
00:18:25,430 --> 00:18:30,019
you know in a kind of a wonky format

409
00:18:27,950 --> 00:18:33,049
because it's designed to be read by the

410
00:18:30,019 --> 00:18:36,259
card and so the idea here is that here

411
00:18:33,049 --> 00:18:38,230
is the voxel and here is a index right

412
00:18:36,259 --> 00:18:40,910
like so this is basically a texture a

413
00:18:38,230 --> 00:18:44,509
three-dimensional texture of 16-bit

414
00:18:40,910 --> 00:18:51,190
values each 16-bit value is just a look

415
00:18:44,509 --> 00:18:54,589
up into this other you know sort of a.m.

416
00:18:51,190 --> 00:18:56,990
it's it's sort of a voxel look up into

417
00:18:54,589 --> 00:19:00,980
just a big linear list of of information

418
00:18:56,990 --> 00:19:03,410
right so if we go to this this lighting

419
00:19:00,980 --> 00:19:06,559
Texel here called p next what that is is

420
00:19:03,410 --> 00:19:10,400
it's a thing that says what the position

421
00:19:06,559 --> 00:19:12,980
is and what the next value was right and

422
00:19:10,400 --> 00:19:14,690
similarly I believe that this is a

423
00:19:12,980 --> 00:19:18,500
parallel texture here right so we

424
00:19:14,690 --> 00:19:21,470
basically have two textures two 32-bit

425
00:19:18,500 --> 00:19:24,679
textures one that I'm not 32-bit search

426
00:19:21,470 --> 00:19:29,269
for sorry we have one

427
00:19:24,679 --> 00:19:31,809
texture that is for 32-bit values right

428
00:19:29,269 --> 00:19:35,298
XY and Z of the position of the light

429
00:19:31,808 --> 00:19:38,450
letting element and a next value which

430
00:19:35,298 --> 00:19:41,628
is just an actual index into the P next

431
00:19:38,450 --> 00:19:43,340
array right this could actually be you

432
00:19:41,628 --> 00:19:45,048
16 but we don't have any reason for it

433
00:19:43,339 --> 00:19:48,259
to be at the moment because we can't use

434
00:19:45,048 --> 00:19:52,038
the 16 for anything else and then we've

435
00:19:48,259 --> 00:19:58,368
got another parallel array here that is

436
00:19:52,038 --> 00:20:00,470
a color for each of these right so by

437
00:19:58,368 --> 00:20:02,209
looking up into P next and see you can

438
00:20:00,470 --> 00:20:03,409
find out both what the position of the

439
00:20:02,210 --> 00:20:05,659
light is the color of the light is and

440
00:20:03,409 --> 00:20:09,919
whatever the next light element would be

441
00:20:05,659 --> 00:20:12,019
in this voxel right so the idea here is

442
00:20:09,919 --> 00:20:15,649
that anybody who's trying to render a

443
00:20:12,019 --> 00:20:19,278
pixel can do a lookup value the lookup

444
00:20:15,648 --> 00:20:20,989
value is going to tell them what the

445
00:20:19,278 --> 00:20:23,388
color is of the light they're what the

446
00:20:20,990 --> 00:20:26,509
position of the light is and then where

447
00:20:23,388 --> 00:20:27,798
to look for the next light like and they

448
00:20:26,509 --> 00:20:29,628
could just keep going until that value

449
00:20:27,798 --> 00:20:32,749
is zero and know that they've processed

450
00:20:29,628 --> 00:20:34,158
all of the lights in that voxel cell so

451
00:20:32,749 --> 00:20:35,990
in theory what we should be able to do

452
00:20:34,159 --> 00:20:38,570
at that point is make it so that when we

453
00:20:35,990 --> 00:20:42,079
move a point around in space it can look

454
00:20:38,569 --> 00:20:45,168
up in its location it can look up the

455
00:20:42,079 --> 00:20:48,710
eight voxels that are around where it is

456
00:20:45,169 --> 00:20:52,700
as a sort of bilinear blend and take all

457
00:20:48,710 --> 00:20:55,278
into account all of the the lighting

458
00:20:52,700 --> 00:20:57,319
elements that are in that area and that

459
00:20:55,278 --> 00:21:01,278
can be the lighting value for the pixel

460
00:20:57,319 --> 00:21:05,089
right that's the entirety of the scheme

461
00:21:01,278 --> 00:21:07,669
it's not particularly exciting so you

462
00:21:05,089 --> 00:21:11,388
know that's and we've got a hard bound

463
00:21:07,669 --> 00:21:12,769
here on 4096 elements because that's how

464
00:21:11,388 --> 00:21:17,408
big the texture is that's gonna store

465
00:21:12,769 --> 00:21:17,409
them all so if you wanted to you have to

466
00:21:18,220 --> 00:21:24,919
you would have to go in there and be a

467
00:21:22,579 --> 00:21:26,538
little bit more specific about how many

468
00:21:24,919 --> 00:21:28,340
they're gonna be like maybe that needs

469
00:21:26,538 --> 00:21:32,509
to be a larger array like maybe that

470
00:21:28,339 --> 00:21:33,918
means to be 8192 maybe you could you

471
00:21:32,509 --> 00:21:35,480
know maybe these to be six five five

472
00:21:33,919 --> 00:21:38,570
three six I don't know how big it needs

473
00:21:35,480 --> 00:21:40,038
to actually be because right now so

474
00:21:38,569 --> 00:21:43,460
we're doing the lighting on the CPU and

475
00:21:40,038 --> 00:21:45,079
we don't use any sort of LOD for

476
00:21:43,460 --> 00:21:46,909
lighting we're just computing it like

477
00:21:45,079 --> 00:21:50,359
completely N squared

478
00:21:46,909 --> 00:21:53,090
you just can't push the number very high

479
00:21:50,359 --> 00:21:54,558
but when we fix those things we may want

480
00:21:53,089 --> 00:21:57,199
to push the number quite a bit higher

481
00:21:54,558 --> 00:22:00,619
than this and at that point we would

482
00:21:57,200 --> 00:22:02,179
need to expand that texture because

483
00:22:00,619 --> 00:22:07,308
it'll we would run out of room and the

484
00:22:02,179 --> 00:22:07,970
texture to some sorta lighting so that's

485
00:22:07,308 --> 00:22:10,099
about it

486
00:22:07,970 --> 00:22:11,028
that's where we're at and like I said I

487
00:22:10,099 --> 00:22:11,990
don't have anything in particular I

488
00:22:11,028 --> 00:22:13,519
wanna do today we're just sort of

489
00:22:11,990 --> 00:22:16,460
getting back into it so let's just go

490
00:22:13,519 --> 00:22:17,628
ahead and relook up if I remember

491
00:22:16,460 --> 00:22:20,200
correctly like I said the way this

492
00:22:17,628 --> 00:22:22,428
worked is we had sort of a lighting

493
00:22:20,200 --> 00:22:25,278
operation that we would do here and I

494
00:22:22,429 --> 00:22:29,240
thought that would happen there was that

495
00:22:25,278 --> 00:22:32,089
yeah you can see we have our F key input

496
00:22:29,240 --> 00:22:34,339
thing here so I believe what happens is

497
00:22:32,089 --> 00:22:37,490
when you push the F key we'll compute

498
00:22:34,339 --> 00:22:43,579
the lighting and we'll send it down let

499
00:22:37,490 --> 00:22:45,798
me just verify that that's true and then

500
00:22:43,579 --> 00:22:48,079
we can go ahead and try to start start

501
00:22:45,798 --> 00:22:50,450
to try and get that working again so you

502
00:22:48,079 --> 00:22:58,128
can see here that we just recheck all

503
00:22:50,450 --> 00:23:00,889
the F keys so f1 is the first F key and

504
00:22:58,128 --> 00:23:02,000
it looks like we've got yeah two places

505
00:23:00,888 --> 00:23:03,918
where that happens you can see that

506
00:23:02,000 --> 00:23:06,079
letting test getting called here so in

507
00:23:03,919 --> 00:23:08,840
theory if we just press f1 it will do

508
00:23:06,079 --> 00:23:09,230
the lighting this is what crashed the

509
00:23:08,839 --> 00:23:10,189
computer

510
00:23:09,230 --> 00:23:11,509
well didn't really crash for your

511
00:23:10,190 --> 00:23:12,798
Creston graphics driver I guess last

512
00:23:11,509 --> 00:23:17,589
time which was enough to take down the

513
00:23:12,798 --> 00:23:17,589
stream so if I push it you know we pause

514
00:23:17,950 --> 00:23:25,548
and here I've done letting computation

515
00:23:21,619 --> 00:23:34,398
you can see all of the voxel cubes here

516
00:23:25,548 --> 00:23:37,970
that I I guess we're from when we before

517
00:23:34,398 --> 00:23:40,219
the stream got crashed out I don't know

518
00:23:37,970 --> 00:23:42,409
if we had like reverted it from that or

519
00:23:40,220 --> 00:23:44,778
what had happened because I'm not sure

520
00:23:42,409 --> 00:23:47,649
this is actually running the exact code

521
00:23:44,778 --> 00:23:51,528
path that crashed the stream last time

522
00:23:47,648 --> 00:23:52,069
but yeah you get the idea so we've this

523
00:23:51,528 --> 00:23:54,740
is the one that

524
00:23:52,069 --> 00:23:58,210
puts all the cubes and I believe all

525
00:23:54,740 --> 00:24:01,490
these cubes are currently using the

526
00:23:58,210 --> 00:24:02,690
shader that if they're all black like

527
00:24:01,490 --> 00:24:04,490
I'm they're not showing any color

528
00:24:02,690 --> 00:24:05,809
because I think all these should have

529
00:24:04,490 --> 00:24:09,319
their lighting color associated with

530
00:24:05,809 --> 00:24:11,539
them now I think that means that the

531
00:24:09,319 --> 00:24:12,799
video card just doesn't crash on the

532
00:24:11,539 --> 00:24:15,349
shader because I think it means the

533
00:24:12,799 --> 00:24:17,299
shader is actually running right I think

534
00:24:15,349 --> 00:24:20,000
that means that now I'll go verify that

535
00:24:17,299 --> 00:24:22,940
fact but I think that means we you know

536
00:24:20,000 --> 00:24:24,380
we left the code as is basically I'm not

537
00:24:22,940 --> 00:24:28,070
positive about that so that may not be

538
00:24:24,380 --> 00:24:30,680
true all right so let's go over to

539
00:24:28,069 --> 00:24:33,109
OpenGL and see what's up with that

540
00:24:30,680 --> 00:24:36,110
and we can also I think we installed

541
00:24:33,109 --> 00:24:39,079
render doc on this machine and it will

542
00:24:36,109 --> 00:24:40,490
work unlike before when we didn't have

543
00:24:39,079 --> 00:24:43,159
any way to do graphs debugging so we'll

544
00:24:40,490 --> 00:24:44,779
also be able to use a debugger around

545
00:24:43,160 --> 00:24:47,050
the graphics now which is really nice

546
00:24:44,779 --> 00:24:47,049
actually

547
00:24:48,039 --> 00:24:53,680
so anyway so let's take a look at what's

548
00:24:51,049 --> 00:24:57,529
going on here

549
00:24:53,680 --> 00:24:59,660
so this I believe is yeah so this is the

550
00:24:57,529 --> 00:25:01,940
main shader right this is the Z bias

551
00:24:59,660 --> 00:25:03,970
program and what you can see here is it

552
00:25:01,940 --> 00:25:08,779
does have the while loop for lighting

553
00:25:03,970 --> 00:25:11,779
right in it right so we are actually

554
00:25:08,779 --> 00:25:15,559
running this we are doing these textile

555
00:25:11,779 --> 00:25:19,519
fetches we are yeah we're doing

556
00:25:15,559 --> 00:25:21,019
everything exactly like what we plan to

557
00:25:19,519 --> 00:25:25,490
do and what had crashed the scream I

558
00:25:21,019 --> 00:25:30,799
think but don't quote me on that it may

559
00:25:25,490 --> 00:25:32,329
be that this is not actually doing it

560
00:25:30,799 --> 00:25:34,039
maybe that we like commented something

561
00:25:32,329 --> 00:25:37,699
out that was crashing it I don't quite

562
00:25:34,039 --> 00:25:38,990
exactly remember that right so it looks

563
00:25:37,700 --> 00:25:40,519
like what we were doing at the end of

564
00:25:38,990 --> 00:25:44,150
this is just seeing whether this loop

565
00:25:40,519 --> 00:25:45,589
worked at all what's odd about this is

566
00:25:44,150 --> 00:25:49,730
it looks like we're stuffing the green

567
00:25:45,589 --> 00:25:51,109
value right you can see this here and so

568
00:25:49,730 --> 00:25:52,700
what's odd about this loop is what it

569
00:25:51,109 --> 00:25:54,799
looks likes going on here is it looks

570
00:25:52,700 --> 00:25:58,160
like this lighting index is just coming

571
00:25:54,799 --> 00:25:59,539
back zero right away right in other

572
00:25:58,160 --> 00:26:04,060
words I'm assuming that if I went ahead

573
00:25:59,539 --> 00:26:06,149
and did this okay we can see I've got a

574
00:26:04,059 --> 00:26:09,028
light color here

575
00:26:06,150 --> 00:26:11,610
that's being stuffed to read if I was to

576
00:26:09,028 --> 00:26:14,220
get into inside this loop I would stuff

577
00:26:11,609 --> 00:26:17,278
green and I'm assuming that what I do

578
00:26:14,220 --> 00:26:18,990
here is always just see red right so

579
00:26:17,278 --> 00:26:21,808
here's before we've computed any

580
00:26:18,990 --> 00:26:24,630
lighting now I press the F key I've

581
00:26:21,808 --> 00:26:27,990
computed lighting but there are no green

582
00:26:24,630 --> 00:26:29,669
elements right so there's never a pixel

583
00:26:27,990 --> 00:26:37,528
that thinks it ever got a lighting value

584
00:26:29,669 --> 00:26:40,919
no matter what happens so yet obviously

585
00:26:37,528 --> 00:26:44,308
not great we need to figure out why our

586
00:26:40,919 --> 00:26:45,750
texels texture situation is not doing

587
00:26:44,308 --> 00:26:49,798
anything right like why are we not

588
00:26:45,750 --> 00:26:53,700
getting anything I before I dive too far

589
00:26:49,798 --> 00:26:55,558
into that what I would like to do is and

590
00:26:53,700 --> 00:26:59,159
I can set this back to black now that we

591
00:26:55,558 --> 00:27:02,009
know that's the case what I'd like to do

592
00:26:59,159 --> 00:27:04,710
is see what we have in terms of

593
00:27:02,009 --> 00:27:06,179
debugging capabilities now since we have

594
00:27:04,710 --> 00:27:07,470
the ability to use a graph to bugger I

595
00:27:06,179 --> 00:27:09,149
think now would be a good time to show

596
00:27:07,470 --> 00:27:11,100
how to use one because like I've said

597
00:27:09,148 --> 00:27:15,569
many times a stream before if you do

598
00:27:11,099 --> 00:27:17,158
have one you want to use it if you don't

599
00:27:15,569 --> 00:27:20,970
have one you don't have one so that's

600
00:27:17,159 --> 00:27:24,510
not an issue but we do have one in this

601
00:27:20,970 --> 00:27:27,390
case we've got render dock and what we

602
00:27:24,509 --> 00:27:29,398
can do with a tool like this again since

603
00:27:27,390 --> 00:27:30,899
we did not we tried to use one on the

604
00:27:29,398 --> 00:27:34,229
stream before so you remember us trying

605
00:27:30,898 --> 00:27:36,569
to but we couldn't what we can do with

606
00:27:34,230 --> 00:27:40,558
the cool tool like this is run it and

607
00:27:36,569 --> 00:27:44,750
what these tools effectively do is they

608
00:27:40,558 --> 00:27:50,009
will patch calls to the driver to

609
00:27:44,750 --> 00:27:53,490
capture the state of the graphics

610
00:27:50,009 --> 00:27:56,369
library and it as it runs so effectively

611
00:27:53,490 --> 00:27:59,190
like you know if you think about OpenGL

612
00:27:56,369 --> 00:28:00,989
right when the OpenGL driver is running

613
00:27:59,190 --> 00:28:03,600
you know there's a bunch of calls to

614
00:28:00,990 --> 00:28:05,159
OpenGL that would allow us to say read

615
00:28:03,599 --> 00:28:07,469
back what the texture is at a particular

616
00:28:05,159 --> 00:28:09,960
texture location or read back the state

617
00:28:07,470 --> 00:28:13,140
of a vertex buffer call or read back

618
00:28:09,960 --> 00:28:15,179
this read back that right so there's a

619
00:28:13,140 --> 00:28:17,820
lot of ways we can go get information

620
00:28:15,179 --> 00:28:19,680
from the graphics card also

621
00:28:17,819 --> 00:28:21,539
[Music]

622
00:28:19,680 --> 00:28:25,740
from external point of view if you

623
00:28:21,539 --> 00:28:28,950
imagine what happens in the in the

624
00:28:25,740 --> 00:28:31,650
executable in our executable we asked

625
00:28:28,950 --> 00:28:33,660
the driver for all of those calls to

626
00:28:31,650 --> 00:28:36,330
OpenGL right and we're calling in to the

627
00:28:33,660 --> 00:28:38,880
driver with OpenGL calls asking it to do

628
00:28:36,329 --> 00:28:41,189
stuff what tools like this do is they

629
00:28:38,880 --> 00:28:43,590
can insert themselves in between the

630
00:28:41,190 --> 00:28:46,799
driver and those calls so that they also

631
00:28:43,589 --> 00:28:49,470
know they can record every call we made

632
00:28:46,799 --> 00:28:53,789
and capture the information we were

633
00:28:49,470 --> 00:28:56,339
pointing to from that call right so

634
00:28:53,789 --> 00:28:59,309
basically what happens is these tools

635
00:28:56,339 --> 00:29:01,470
are sort of recorders that just sit in

636
00:28:59,309 --> 00:29:03,419
between your executable and the graphics

637
00:29:01,470 --> 00:29:06,480
driver record everything you ask the

638
00:29:03,420 --> 00:29:08,519
graphics driver to do and by looking at

639
00:29:06,480 --> 00:29:11,069
all of those things that you ask the

640
00:29:08,519 --> 00:29:14,150
driver to do it can also know what calls

641
00:29:11,069 --> 00:29:17,099
to make to the driver to gab to grab out

642
00:29:14,150 --> 00:29:19,680
various textures and other things that

643
00:29:17,099 --> 00:29:23,789
it can then store to show you the state

644
00:29:19,680 --> 00:29:25,470
of the program as it goes right more

645
00:29:23,789 --> 00:29:27,359
sophisticated ones can also do stuff

646
00:29:25,470 --> 00:29:29,339
like replaying the graphic stream up to

647
00:29:27,359 --> 00:29:33,299
a particular point so that you can see

648
00:29:29,339 --> 00:29:36,299
the state of like a specific buffer or

649
00:29:33,299 --> 00:29:38,430
something at that point and all sorts of

650
00:29:36,299 --> 00:29:40,139
other things like that so it's you know

651
00:29:38,430 --> 00:29:41,070
like if you just understand that basic

652
00:29:40,140 --> 00:29:43,680
work down then you can kind of imagine

653
00:29:41,069 --> 00:29:45,240
all the things that they can do so it's

654
00:29:43,680 --> 00:29:49,620
kind of nice to have something like that

655
00:29:45,240 --> 00:29:50,940
around yeah and it just it just helps a

656
00:29:49,619 --> 00:29:56,309
lot with crash debugging as you'll see

657
00:29:50,940 --> 00:29:57,750
so I we made a profile here when we sort

658
00:29:56,309 --> 00:30:00,329
of tested this out on the test stream

659
00:29:57,750 --> 00:30:02,250
and basically all you have to do to run

660
00:30:00,329 --> 00:30:04,079
one of these programs on your executable

661
00:30:02,250 --> 00:30:06,690
is you just have to fill out some

662
00:30:04,079 --> 00:30:08,970
information here just like you would in

663
00:30:06,690 --> 00:30:11,250
the debug settings of like visual studio

664
00:30:08,970 --> 00:30:13,829
that we did for debugging it right it

665
00:30:11,250 --> 00:30:15,240
needs to know where the executable is it

666
00:30:13,829 --> 00:30:17,429
needs to know what directory the

667
00:30:15,240 --> 00:30:19,170
executable should start up in and it

668
00:30:17,430 --> 00:30:21,180
needs to know any other information that

669
00:30:19,170 --> 00:30:22,470
you would normally pass now we don't

670
00:30:21,180 --> 00:30:23,700
have any command line arguments or

671
00:30:22,470 --> 00:30:25,559
environment variables that are relevant

672
00:30:23,700 --> 00:30:26,880
to the program so we don't have to worry

673
00:30:25,559 --> 00:30:30,720
about those but if you did you know you

674
00:30:26,880 --> 00:30:32,730
would put them in here so that's all we

675
00:30:30,720 --> 00:30:36,180
really need to do

676
00:30:32,730 --> 00:30:37,740
and then once we have that going what

677
00:30:36,180 --> 00:30:39,120
these tools generally do and again if

678
00:30:37,740 --> 00:30:41,160
you know there's there's more than one

679
00:30:39,119 --> 00:30:43,289
of them u n site is another one that I

680
00:30:41,160 --> 00:30:45,480
have used a bunch for that's for NVIDIA

681
00:30:43,289 --> 00:30:47,250
cards typically we're using this one

682
00:30:45,480 --> 00:30:50,190
because it's a little more like sort of

683
00:30:47,250 --> 00:30:51,539
cross vendor right so if you have an AMD

684
00:30:50,190 --> 00:30:53,070
card out there you should be able to use

685
00:30:51,539 --> 00:30:56,099
this as well you don't have to have an

686
00:30:53,069 --> 00:30:58,289
nvidia card for specifically so once you

687
00:30:56,099 --> 00:31:01,529
have one of these all set up

688
00:30:58,289 --> 00:31:03,809
I can't tell right now yeah as I say

689
00:31:01,529 --> 00:31:06,269
that my head is hiding so I gonna have

690
00:31:03,809 --> 00:31:08,490
to do this the launch and close buttons

691
00:31:06,269 --> 00:31:10,259
so once we have it all set up we need to

692
00:31:08,490 --> 00:31:13,380
get this launch button and what that

693
00:31:10,259 --> 00:31:17,009
should do is it should run our program

694
00:31:13,380 --> 00:31:18,570
right now thankfully render dock has

695
00:31:17,009 --> 00:31:20,400
built into it the concept that it's not

696
00:31:18,569 --> 00:31:23,220
really recording everything all the time

697
00:31:20,400 --> 00:31:25,110
all it's doing is just watching right

698
00:31:23,220 --> 00:31:27,509
and you can see that it's added an

699
00:31:25,109 --> 00:31:29,490
overlay here and this overlay like I

700
00:31:27,509 --> 00:31:33,450
said since it's hooked into our

701
00:31:29,490 --> 00:31:35,069
application and intercepting our calls

702
00:31:33,450 --> 00:31:37,110
to the driver what it can also do is

703
00:31:35,069 --> 00:31:39,960
insert its own rendering into our

704
00:31:37,109 --> 00:31:41,519
rendering right it can insert some calls

705
00:31:39,960 --> 00:31:44,490
that render this overlay and so that's

706
00:31:41,519 --> 00:31:48,119
exactly what it has done here right so

707
00:31:44,490 --> 00:31:49,529
once we are getting a state where we

708
00:31:48,119 --> 00:31:51,000
actually want to capture you can see it

709
00:31:49,529 --> 00:31:53,039
says what the instructions are right

710
00:31:51,000 --> 00:31:56,279
here you just print F - what'd you hit

711
00:31:53,039 --> 00:31:57,899
f12 or print screen to start the capture

712
00:31:56,279 --> 00:32:03,869
right and that will capture whatever

713
00:31:57,900 --> 00:32:08,480
frame we were on that time who charged a

714
00:32:03,869 --> 00:32:11,009
now we don't want to capture a frame yet

715
00:32:08,480 --> 00:32:14,730
because we haven't sent the lighting

716
00:32:11,009 --> 00:32:16,140
textures down to the card at all so we

717
00:32:14,730 --> 00:32:17,849
wouldn't really do us any good to look

718
00:32:16,140 --> 00:32:20,280
now because we expect those textures to

719
00:32:17,849 --> 00:32:22,289
be zeroed so first what I need to do is

720
00:32:20,279 --> 00:32:25,920
hit f1 so that we know that we've

721
00:32:22,289 --> 00:32:28,799
actually run the lighting in theory at

722
00:32:25,920 --> 00:32:30,720
least sent it down you can see that this

723
00:32:28,799 --> 00:32:32,190
got a lot slower here but I think that's

724
00:32:30,720 --> 00:32:34,170
probably just because we have a lot more

725
00:32:32,190 --> 00:32:36,690
cues I'm not really sure why it's slower

726
00:32:34,170 --> 00:32:39,600
we haven't done any work to see why it

727
00:32:36,690 --> 00:32:44,429
is but you can kind of see that it's

728
00:32:39,599 --> 00:32:46,648
like it's it's pretty pokey

729
00:32:44,429 --> 00:32:48,149
I'm not sure why that is that might be

730
00:32:46,648 --> 00:32:51,719
something to do with render doc itself

731
00:32:48,148 --> 00:32:54,868
I'm not sure but anyway then I'm gonna

732
00:32:51,720 --> 00:32:56,220
go ahead and hit f12 to get a capture on

733
00:32:54,868 --> 00:32:58,319
that and you can see it kind of pauses

734
00:32:56,220 --> 00:33:01,288
for a second capturing a frame takes a

735
00:32:58,319 --> 00:33:03,089
lot more time right and the reason for

736
00:33:01,288 --> 00:33:04,408
that is because again it's got to

737
00:33:03,089 --> 00:33:07,079
intercept all those calls and record

738
00:33:04,409 --> 00:33:08,899
data but we've done that now and so we

739
00:33:07,079 --> 00:33:13,618
should be able to close the application

740
00:33:08,898 --> 00:33:16,709
and you can see here it loading up what

741
00:33:13,618 --> 00:33:18,148
it captured and processing it so we got

742
00:33:16,710 --> 00:33:21,179
to give that a second hopefully it works

743
00:33:18,148 --> 00:33:22,469
but now once you do that you can see get

744
00:33:21,179 --> 00:33:23,820
a lot of really great information this

745
00:33:22,470 --> 00:33:25,980
is why I say these tools are really nice

746
00:33:23,819 --> 00:33:27,628
if you have one you should use it if you

747
00:33:25,980 --> 00:33:28,829
know if one works on your card or your

748
00:33:27,628 --> 00:33:32,038
console or whatever you're programming

749
00:33:28,829 --> 00:33:35,519
on because you can kind of see that

750
00:33:32,038 --> 00:33:37,259
we've got like a lot of information

751
00:33:35,519 --> 00:33:39,778
already about just what's going on like

752
00:33:37,259 --> 00:33:42,269
even just this is sort of a nice thing

753
00:33:39,778 --> 00:33:43,710
to see because it's kind of just it's

754
00:33:42,269 --> 00:33:47,429
just like stepping through your own

755
00:33:43,710 --> 00:33:49,798
program in the debugger you get to see

756
00:33:47,429 --> 00:33:53,009
like exactly what it does unambiguously

757
00:33:49,798 --> 00:33:54,418
right you know you you always think you

758
00:33:53,009 --> 00:33:56,639
know what your program does because you

759
00:33:54,419 --> 00:33:58,830
wrote it but you don't always know

760
00:33:56,638 --> 00:33:59,248
whether you've you're thinking about it

761
00:33:58,829 --> 00:34:01,199
correctly

762
00:33:59,249 --> 00:34:03,089
now unfortunately render doc seems to be

763
00:34:01,200 --> 00:34:04,850
a little janky here like I can barely

764
00:34:03,089 --> 00:34:09,480
even use it I think probably because

765
00:34:04,849 --> 00:34:12,659
it's trying to do too much background

766
00:34:09,480 --> 00:34:17,068
processing to update something I'm not

767
00:34:12,659 --> 00:34:18,329
sure but it's well yeah so I don't know

768
00:34:17,068 --> 00:34:19,769
maybe we will have to use insight

769
00:34:18,329 --> 00:34:22,679
because this is pretty bad right like

770
00:34:19,769 --> 00:34:25,019
this is not really useable here for

771
00:34:22,679 --> 00:34:27,858
whatever reason like I can't really

772
00:34:25,019 --> 00:34:31,349
click on anything you know I'm saying

773
00:34:27,858 --> 00:34:33,628
and like I said I I think I said this on

774
00:34:31,349 --> 00:34:37,200
the test stream I've never used render

775
00:34:33,628 --> 00:34:40,409
doc so I'm the wrong one to say what

776
00:34:37,199 --> 00:34:41,908
should happen in in in a circumstance

777
00:34:40,409 --> 00:34:43,769
like this where it's not acting

778
00:34:41,909 --> 00:34:46,260
particularly nicely you can see that

779
00:34:43,769 --> 00:34:48,298
it's sort of just freaking out all the

780
00:34:46,260 --> 00:34:51,079
time like I can't even really interact

781
00:34:48,298 --> 00:34:51,079
with it hardly at all

782
00:34:53,710 --> 00:35:04,000
so yeah I don't know why that is but I

783
00:35:00,650 --> 00:35:04,000
guess that's a non-starter

784
00:35:15,989 --> 00:35:23,879
yeah so anyway if you can get render dr.

785
00:35:21,300 --> 00:35:25,230
work go for it that was that is about

786
00:35:23,880 --> 00:35:26,640
the experience I normally have with

787
00:35:25,230 --> 00:35:29,280
render doc which is why I tend to use

788
00:35:26,639 --> 00:35:31,170
insight because insight doesn't seem to

789
00:35:29,280 --> 00:35:33,660
have quite so much that kind of a

790
00:35:31,170 --> 00:35:35,300
problem so that's why I've never really

791
00:35:33,659 --> 00:35:37,730
gotten into render doc is because I've

792
00:35:35,300 --> 00:35:41,369
I've just never really gotten it to work

793
00:35:37,730 --> 00:35:44,550
so I'm gonna go ahead and put insight on

794
00:35:41,369 --> 00:35:47,070
here instead that is not okay I'm gonna

795
00:35:44,550 --> 00:35:49,710
click on this anyway this is not the

796
00:35:47,070 --> 00:35:51,869
insight you want we do not need life in

797
00:35:49,710 --> 00:35:53,338
digital brought to you by insight that

798
00:35:51,869 --> 00:35:57,838
is not actually what we want we want

799
00:35:53,338 --> 00:36:00,088
this one so what this does is if you

800
00:35:57,838 --> 00:36:01,829
download this one here insight visual

801
00:36:00,088 --> 00:36:03,929
studio edition unfortunately they don't

802
00:36:01,829 --> 00:36:06,779
have a version that runs outside vigil

803
00:36:03,929 --> 00:36:07,799
studio so you kind of have to use Visual

804
00:36:06,780 --> 00:36:09,570
Studio with it this is really

805
00:36:07,800 --> 00:36:11,130
unfortunate because you know I would

806
00:36:09,570 --> 00:36:15,210
rather it just kind of be a standalone

807
00:36:11,130 --> 00:36:18,500
thing but unfortunately it's not so I'm

808
00:36:15,210 --> 00:36:22,699
gonna go ahead and download it here I

809
00:36:18,500 --> 00:36:22,699
think that actually downloaded anything

810
00:36:25,260 --> 00:36:33,840
I think all you need is this cuz I think

811
00:36:30,960 --> 00:36:35,490
we already have a driver I don't know if

812
00:36:33,840 --> 00:36:52,280
we do or not while this is downloading

813
00:36:35,489 --> 00:36:57,209
ah all right so I guess I need to login

814
00:36:52,280 --> 00:37:02,760
as a member so as far as I know this is

815
00:36:57,210 --> 00:37:04,889
not hard to do I assume that this is

816
00:37:02,760 --> 00:37:06,060
pretty straightforward like I did not

817
00:37:04,889 --> 00:37:07,259
have to do anything special that but it

818
00:37:06,059 --> 00:37:08,880
looks like I will have to actually

819
00:37:07,260 --> 00:37:10,050
download it this way if you hold on one

820
00:37:08,880 --> 00:37:12,170
second though I can do that pretty

821
00:37:10,050 --> 00:37:12,170
easily

822
00:37:28,179 --> 00:37:35,929
helpfully I already have exactly such a

823
00:37:33,980 --> 00:37:38,750
developer camp now why you need to

824
00:37:35,929 --> 00:37:41,679
developer account in order to download

825
00:37:38,750 --> 00:37:45,320
this tool I have no idea

826
00:37:41,679 --> 00:37:46,940
that's a good question if anyone from

827
00:37:45,320 --> 00:37:50,410
Nvidia happens to be watching the show

828
00:37:46,940 --> 00:37:53,630
and wanted to tell me what the point is

829
00:37:50,409 --> 00:38:06,920
that would be great because it just

830
00:37:53,630 --> 00:38:12,280
seems superfluous but if I look up my

831
00:38:06,920 --> 00:38:14,630
log in here I know I've got it somewhere

832
00:38:12,280 --> 00:38:19,300
there we go

833
00:38:14,630 --> 00:38:19,300
so if I go ahead here

834
00:38:28,840 --> 00:38:41,480
let's try to log in let's go ahead and

835
00:38:40,130 --> 00:38:44,680
login as me

836
00:38:41,480 --> 00:38:47,929
and unfortunately I do use gigantic

837
00:38:44,679 --> 00:38:50,299
impossible passwords even for things

838
00:38:47,929 --> 00:38:52,608
like this where it doesn't matter if

839
00:38:50,300 --> 00:38:55,070
anyone steals your password because it's

840
00:38:52,608 --> 00:39:00,009
literally a junk account that is used

841
00:38:55,070 --> 00:39:00,010
only for downloading insight but oh well

842
00:39:10,780 --> 00:39:21,560
hopefully I type that correctly and off

843
00:39:18,679 --> 00:39:26,750
we go alright so we need to download

844
00:39:21,559 --> 00:39:30,199
this here but I don't know how to do

845
00:39:26,750 --> 00:39:32,710
that still because where did the

846
00:39:30,199 --> 00:39:40,759
download go here we go downloads

847
00:39:32,710 --> 00:39:43,309
download download there we go so now

848
00:39:40,760 --> 00:39:45,080
we've got it downloaded and the only

849
00:39:43,309 --> 00:39:48,199
thing that we have to verify is that we

850
00:39:45,079 --> 00:39:51,049
have a driver that's late enough because

851
00:39:48,199 --> 00:39:56,059
it does it did say that that was

852
00:39:51,050 --> 00:39:58,490
important I'm gonna this way that was

853
00:39:56,059 --> 00:40:11,469
only necessary for a loop for looking

854
00:39:58,489 --> 00:40:11,469
that up there we go back there ok

855
00:40:13,768 --> 00:40:19,028
so in theory now we've got insight and

856
00:40:16,449 --> 00:40:20,379
we can try that one instead because like

857
00:40:19,028 --> 00:40:22,568
I said I would like to have a debugger

858
00:40:20,380 --> 00:40:24,730
and since render doc doesn't work I

859
00:40:22,568 --> 00:40:26,768
think we might as well switch to insight

860
00:40:24,730 --> 00:40:28,269
like I said even though I had like that

861
00:40:26,768 --> 00:40:29,259
was not some kind of thing that NVIDIA

862
00:40:28,268 --> 00:40:32,048
gave me special

863
00:40:29,260 --> 00:40:34,660
that's just like anyone who goes to

864
00:40:32,048 --> 00:40:37,659
their little join now thing can create

865
00:40:34,659 --> 00:40:39,548
one of these accounts and use insight as

866
00:40:37,659 --> 00:40:43,078
far as I know there's no like special

867
00:40:39,548 --> 00:40:46,929
you don't have to be some kind of a like

868
00:40:43,079 --> 00:40:49,329
provable game developer to do it as far

869
00:40:46,929 --> 00:40:51,210
as I know so the only thing that I

870
00:40:49,329 --> 00:40:53,048
wanted to check here was was the

871
00:40:51,210 --> 00:40:56,019
requirements there they said like

872
00:40:53,048 --> 00:41:00,730
something about having to have the right

873
00:40:56,018 --> 00:41:05,129
version you know quite remember where we

874
00:41:00,730 --> 00:41:11,170
saw that was it the page before here

875
00:41:05,130 --> 00:41:16,019
let's see cuz I check the version of our

876
00:41:11,170 --> 00:41:19,568
graphics driver so down here here we go

877
00:41:16,018 --> 00:41:23,169
and video display driver three eight

878
00:41:19,568 --> 00:41:27,239
four nine four or newer so let's just

879
00:41:23,170 --> 00:41:27,240
verify that that's what we've got

880
00:41:37,090 --> 00:41:46,690
so this is 380 205 which is I guess

881
00:41:42,099 --> 00:41:49,210
pretty old then I mean well not that for

882
00:41:46,690 --> 00:41:51,639
old I guess but definitely not the one

883
00:41:49,210 --> 00:41:55,150
they recommended so let's go ahead and

884
00:41:51,639 --> 00:41:58,509
update that because again this is one of

885
00:41:55,150 --> 00:42:01,090
the nice benefits of having a stream

886
00:41:58,510 --> 00:42:03,340
that that doesn't go down if we want to

887
00:42:01,090 --> 00:42:08,220
reboot the machine so let's go ahead and

888
00:42:03,340 --> 00:42:12,220
do that this is a GeForce 1080 card

889
00:42:08,219 --> 00:42:13,329
there we go we don't actually need to do

890
00:42:12,219 --> 00:42:14,829
this because it's all one integrated

891
00:42:13,329 --> 00:42:18,569
driver but I think they just want to

892
00:42:14,829 --> 00:42:18,569
collect product information I guess

893
00:42:18,869 --> 00:42:24,940
alright so 388 0 is quite a bit later

894
00:42:23,619 --> 00:42:26,469
than what we have

895
00:42:24,940 --> 00:42:29,710
and definitely later than the one they

896
00:42:26,469 --> 00:42:33,039
recommended right because they said 384

897
00:42:29,710 --> 00:42:33,699
if I remember correctly these are hard

898
00:42:33,039 --> 00:42:37,300
to keep straight

899
00:42:33,699 --> 00:42:41,169
they said 384 9 for newer this would be

900
00:42:37,300 --> 00:42:49,900
388 so off we go we will agree in

901
00:42:41,170 --> 00:42:55,200
download and now in theory we should be

902
00:42:49,900 --> 00:42:55,200
able to update the graphics driver

903
00:42:57,829 --> 00:43:00,579
sure

904
00:43:04,289 --> 00:43:07,289
waiting

905
00:43:11,889 --> 00:43:15,088
well this is exciting

906
00:43:19,190 --> 00:43:25,740
how big is this graphics driver four

907
00:43:23,070 --> 00:43:27,300
hundred forty megabytes compressed the

908
00:43:25,739 --> 00:43:35,009
graphics driver

909
00:43:27,300 --> 00:43:36,480
I suppose that's probably because

910
00:43:35,010 --> 00:43:39,330
there's lots of like patch stuff in

911
00:43:36,480 --> 00:43:41,400
there and like here's like eight hundred

912
00:43:39,329 --> 00:43:43,170
thousand games we've hand optimized in

913
00:43:41,400 --> 00:43:45,840
all of the shaders that weari patch and

914
00:43:43,170 --> 00:43:47,909
all that stuff so it's probably not the

915
00:43:45,840 --> 00:43:51,300
graphics driver that's that sighs it's

916
00:43:47,909 --> 00:44:01,319
probably like a ton of like data for

917
00:43:51,300 --> 00:44:08,340
every application checking system

918
00:44:01,320 --> 00:44:10,500
compatibility okay we do want a graphs

919
00:44:08,340 --> 00:44:15,180
driver I don't know what that is or that

920
00:44:10,500 --> 00:44:19,099
I definitely don't want a GeForce

921
00:44:15,179 --> 00:44:19,099
experience or physics

922
00:44:27,510 --> 00:44:34,859
that's interesting so there's a GT X

923
00:44:29,550 --> 00:44:36,450
1080 Terry 1070 TI I'm not sure what

924
00:44:34,858 --> 00:44:38,069
that means I don't know what the TI

925
00:44:36,449 --> 00:44:40,230
means I just thought it was some like

926
00:44:38,070 --> 00:44:43,740
branding thing right that's like oh it's

927
00:44:40,230 --> 00:44:47,130
you know the 1080 is good but like the

928
00:44:43,739 --> 00:44:49,019
1080i is like really good but I guess

929
00:44:47,130 --> 00:44:51,000
now we've got a 1070 TI so then the

930
00:44:49,019 --> 00:44:53,550
question is is a 1070 TI better than a

931
00:44:51,000 --> 00:44:56,099
1080 I assume it's not better than a

932
00:44:53,550 --> 00:44:59,300
1080 TI but I don't know if it's better

933
00:44:56,099 --> 00:45:04,500
than a 1080 regular what is the T I mean

934
00:44:59,300 --> 00:45:07,200
it's anyone's guess really now we're

935
00:45:04,500 --> 00:45:12,300
getting some nice ads here for some

936
00:45:07,199 --> 00:45:14,669
random games which is always good does

937
00:45:12,300 --> 00:45:17,960
this let me pick between them so I can

938
00:45:14,670 --> 00:45:21,409
be like destiny shadow war destiny

939
00:45:17,960 --> 00:45:21,409
shadow of war

940
00:45:22,340 --> 00:45:30,358
titanium 1070 what if I want to learn

941
00:45:27,300 --> 00:45:34,430
more about this what if this what if

942
00:45:30,358 --> 00:45:34,429
behind this learn more button look

943
00:45:36,639 --> 00:45:41,118
there we go we got a speed boost there

944
00:45:39,409 --> 00:45:42,618
that was like in Mario Kart where you

945
00:45:41,119 --> 00:45:45,110
hit the little thing that like boosts

946
00:45:42,619 --> 00:45:48,559
you forward okay there we go so now we

947
00:45:45,110 --> 00:45:53,019
should be good to go hopefully if

948
00:45:48,559 --> 00:45:53,019
Windows doesn't like

949
00:45:57,670 --> 00:45:59,730
you

950
00:46:40,318 --> 00:46:44,889
so that's interesting I guess we'll have

951
00:46:43,030 --> 00:46:50,170
to remember that updating the graphics

952
00:46:44,889 --> 00:46:54,429
driver it it will reinstall effectively

953
00:46:50,170 --> 00:46:56,650
the HDMI sound output right and that's

954
00:46:54,429 --> 00:47:00,419
actually a problem because what Windows

955
00:46:56,650 --> 00:47:03,099
does in that situation is it will then

956
00:47:00,420 --> 00:47:06,430
revert this setting which is the way

957
00:47:03,099 --> 00:47:08,289
we're getting output so I always got to

958
00:47:06,429 --> 00:47:10,538
make sure I check to see if I'm getting

959
00:47:08,289 --> 00:47:12,250
output but luckily I did there so it

960
00:47:10,539 --> 00:47:16,410
looks like it's back and hopefully it

961
00:47:12,250 --> 00:47:19,568
should be fine that's fine right yeah

962
00:47:16,409 --> 00:47:22,269
alright so I think we are now ok I'm

963
00:47:19,568 --> 00:47:25,420
gonna go ahead and ask it to install in

964
00:47:22,269 --> 00:47:26,440
site and here is a giant License

965
00:47:25,420 --> 00:47:28,180
Agreement that no one could possibly

966
00:47:26,440 --> 00:47:30,220
understand and I don't even know if this

967
00:47:28,179 --> 00:47:32,409
is enforceable in court because how any

968
00:47:30,219 --> 00:47:33,578
normal person who isn't a lawyer would

969
00:47:32,409 --> 00:47:37,538
have any idea what they're agreeing to I

970
00:47:33,579 --> 00:47:40,480
don't know I would really like someone

971
00:47:37,539 --> 00:47:41,680
to test that in court someday but I'm

972
00:47:40,480 --> 00:47:46,199
gonna go in here to customize it just

973
00:47:41,679 --> 00:47:46,199
make sure that everything makes sense I

974
00:47:48,960 --> 00:47:52,929
don't know what these things are we

975
00:47:51,460 --> 00:47:54,039
probably don't really need this but we

976
00:47:52,929 --> 00:47:57,210
might as well put it on there who knows

977
00:47:54,039 --> 00:47:57,210
maybe someday we will need it

978
00:48:02,630 --> 00:48:07,539
that's a friendly-looking name

979
00:48:20,610 --> 00:48:28,420
so now if we're not completely wrong

980
00:48:24,250 --> 00:48:31,900
about this we should be able to use the

981
00:48:28,420 --> 00:48:34,510
insight utility anytime we want to to

982
00:48:31,900 --> 00:48:38,200
profile stuff now we again don't really

983
00:48:34,510 --> 00:48:39,550
know whether that's true or not because

984
00:48:38,199 --> 00:48:41,109
we haven't tried it yet on this machine

985
00:48:39,550 --> 00:48:42,519
because we were gonna try and use render

986
00:48:41,110 --> 00:48:45,430
dock well fortunately no dock didn't

987
00:48:42,519 --> 00:48:46,719
really work looks like I said it's kind

988
00:48:45,429 --> 00:48:49,690
of par for the course render dock

989
00:48:46,719 --> 00:48:52,599
unfortunately that's it's just the

990
00:48:49,690 --> 00:48:57,309
experience I've always had with it and

991
00:48:52,599 --> 00:49:02,019
so if I now go to visual studio and we

992
00:48:57,309 --> 00:49:03,909
go to our project we should now have

993
00:49:02,019 --> 00:49:07,650
additional options now that insight is

994
00:49:03,909 --> 00:49:10,179
installed so you can see here insight is

995
00:49:07,650 --> 00:49:13,570
got its own drop-down that's put in here

996
00:49:10,179 --> 00:49:15,639
and one of the options that we have is

997
00:49:13,570 --> 00:49:17,289
start graphics debugging so like

998
00:49:15,639 --> 00:49:19,449
normally when we hit debug and we do

999
00:49:17,289 --> 00:49:21,820
start debugging with f5 that would run

1000
00:49:19,449 --> 00:49:23,919
just regular but now if we want to we

1001
00:49:21,820 --> 00:49:26,850
can say start gravis debugging and if we

1002
00:49:23,920 --> 00:49:35,380
do start graphics debugging yeah you can

1003
00:49:26,849 --> 00:49:36,819
we don't care if it's secure if you do

1004
00:49:35,380 --> 00:49:38,380
start gravis debugging then in theory

1005
00:49:36,820 --> 00:49:41,530
what should happen is it should launch

1006
00:49:38,380 --> 00:49:45,340
our application with the insight HUD

1007
00:49:41,530 --> 00:49:48,130
enabled right and you can see that

1008
00:49:45,340 --> 00:49:50,500
that's actually exactly what's going on

1009
00:49:48,130 --> 00:49:52,420
here so you know now the application is

1010
00:49:50,500 --> 00:49:55,360
running it's showing us some performance

1011
00:49:52,420 --> 00:49:56,950
information which is nice if we're

1012
00:49:55,360 --> 00:49:59,440
trying to optimize the game right this

1013
00:49:56,949 --> 00:50:01,239
can tell us information about that and

1014
00:49:59,440 --> 00:50:02,590
if I run the lighting thing you can see

1015
00:50:01,239 --> 00:50:05,619
that we've we've go ahead and run that

1016
00:50:02,590 --> 00:50:08,079
now you'll notice render dock slowed to

1017
00:50:05,619 --> 00:50:09,849
a crawl when we were in this mode but

1018
00:50:08,079 --> 00:50:13,869
insights just humming along which is

1019
00:50:09,849 --> 00:50:17,529
kind of nice right so now if I go over

1020
00:50:13,869 --> 00:50:18,549
here into the if I you know alt tab back

1021
00:50:17,530 --> 00:50:20,320
to the real studio while the game is

1022
00:50:18,550 --> 00:50:22,030
still running what you'll notice is

1023
00:50:20,320 --> 00:50:25,630
there is a thing that says pause and

1024
00:50:22,030 --> 00:50:27,490
capture frame and so if I want to I can

1025
00:50:25,630 --> 00:50:29,880
just now do the same thing we're trying

1026
00:50:27,489 --> 00:50:32,469
to thread or dock get a frame of data

1027
00:50:29,880 --> 00:50:34,690
and take a look at it

1028
00:50:32,469 --> 00:50:36,009
so if I hit that it's gonna take a

1029
00:50:34,690 --> 00:50:38,380
little bit because it's got to actually

1030
00:50:36,010 --> 00:50:39,790
figure out you know like I said the same

1031
00:50:38,380 --> 00:50:42,818
things a render doc had to wear it's got

1032
00:50:39,789 --> 00:50:44,739
to go through each sort of step of the

1033
00:50:42,818 --> 00:50:49,838
program and grab all the information

1034
00:50:44,739 --> 00:50:56,769
that it needs who knows how long that

1035
00:50:49,838 --> 00:51:01,358
will take but hopefully it'll finish at

1036
00:50:56,769 --> 00:51:03,039
some point all right there we go it's

1037
00:51:01,358 --> 00:51:04,659
got this weird HUD thing here but I

1038
00:51:03,039 --> 00:51:08,710
never use this because it doesn't work

1039
00:51:04,659 --> 00:51:10,750
on my other actual death machine

1040
00:51:08,710 --> 00:51:12,429
I've never gotten it to work I think cuz

1041
00:51:10,750 --> 00:51:14,019
I use a multi-monitor setup and maybe it

1042
00:51:12,429 --> 00:51:16,419
doesn't handle a multi-monitor setup or

1043
00:51:14,019 --> 00:51:19,239
something but it literally doesn't work

1044
00:51:16,420 --> 00:51:22,088
at all so I never use that I always use

1045
00:51:19,239 --> 00:51:24,939
the other part of it which I don't know

1046
00:51:22,088 --> 00:51:27,299
how to get back to here of course on

1047
00:51:24,940 --> 00:51:38,019
multi Mun usually don't have to care a

1048
00:51:27,300 --> 00:51:39,970
little computer so I'm not sure exactly

1049
00:51:38,019 --> 00:51:43,539
what's going on here the HUD on this

1050
00:51:39,969 --> 00:51:45,730
machine works you can see here I'm

1051
00:51:43,539 --> 00:51:47,710
running through all of the events like

1052
00:51:45,730 --> 00:51:53,108
every quad that gets drawn we can look

1053
00:51:47,710 --> 00:51:54,309
at separately right which is pretty it's

1054
00:51:53,108 --> 00:51:56,828
pretty great

1055
00:51:54,309 --> 00:51:57,880
except I mean for the fact that you know

1056
00:51:56,829 --> 00:52:00,940
their only reason that's the case is

1057
00:51:57,880 --> 00:52:02,740
because we never did a texture atlas to

1058
00:52:00,940 --> 00:52:07,539
pack our textures but that's a separate

1059
00:52:02,739 --> 00:52:10,929
issue so the hot eyes actually working

1060
00:52:07,539 --> 00:52:15,250
here but unfortunately I don't actually

1061
00:52:10,929 --> 00:52:17,679
know how to get back to visual studio

1062
00:52:15,250 --> 00:52:21,300
like if I alt-tab the visual studio it

1063
00:52:17,679 --> 00:52:21,299
does not bring it up

1064
00:52:29,300 --> 00:52:40,340
is there some way I can force it to

1065
00:52:32,059 --> 00:52:41,809
minimize again like I said on my main

1066
00:52:40,340 --> 00:52:45,440
dev machine I don't have this this

1067
00:52:41,809 --> 00:52:46,670
problem because I have the debugger pops

1068
00:52:45,440 --> 00:52:49,340
up in the other monitor so I've never

1069
00:52:46,670 --> 00:52:51,889
tried to figure out why it wouldn't let

1070
00:52:49,340 --> 00:52:54,350
me view it so we kind of have opposite

1071
00:52:51,889 --> 00:52:57,129
problems on this machine the HUD works

1072
00:52:54,349 --> 00:53:02,029
but I can't get back to visual studio

1073
00:52:57,130 --> 00:53:10,240
which is not great there must be some

1074
00:53:02,030 --> 00:53:10,240
way so I guess one thing I could do

1075
00:53:15,090 --> 00:53:23,150
so by killing the application I am I was

1076
00:53:19,230 --> 00:53:23,150
that was actually able to get back here

1077
00:53:27,199 --> 00:53:32,909
except I didn't kill the application I

1078
00:53:29,969 --> 00:53:36,799
hit alt f4 the applications still here

1079
00:53:32,909 --> 00:53:36,799
so I guess that just killed the hood I

1080
00:53:36,980 --> 00:53:46,500
don't know that is very peculiar and not

1081
00:53:43,440 --> 00:53:49,110
at all how it works on my dev machine

1082
00:53:46,500 --> 00:53:52,380
but okay

1083
00:53:49,110 --> 00:53:54,510
I guess that's all right I'm not too

1084
00:53:52,380 --> 00:53:57,869
worried about it as long as we get

1085
00:53:54,510 --> 00:54:00,510
something working that's fine point

1086
00:53:57,869 --> 00:54:02,009
being when you actually can back get

1087
00:54:00,510 --> 00:54:04,380
back to visual studio which I guess we

1088
00:54:02,010 --> 00:54:06,090
can so that's good

1089
00:54:04,380 --> 00:54:10,260
what you can see here is it adds a bunch

1090
00:54:06,090 --> 00:54:13,769
more windows to your to your IDE right

1091
00:54:10,260 --> 00:54:15,060
and these things are basically the same

1092
00:54:13,769 --> 00:54:16,980
sorts of things that we had and render

1093
00:54:15,059 --> 00:54:18,630
doc only like unlike render doc we can

1094
00:54:16,980 --> 00:54:19,949
actually interact with them and so we

1095
00:54:18,630 --> 00:54:22,800
can actually get some information out of

1096
00:54:19,949 --> 00:54:24,960
them and what you can see is you get a

1097
00:54:22,800 --> 00:54:27,060
lot of pretty good information if you

1098
00:54:24,960 --> 00:54:29,159
take a look up here this thing called

1099
00:54:27,059 --> 00:54:31,019
the scrubber that's sort of the

1100
00:54:29,159 --> 00:54:32,519
equivalent of the event list thing it's

1101
00:54:31,019 --> 00:54:34,530
like saying here's all the things that

1102
00:54:32,519 --> 00:54:37,469
happened and you can kind of go between

1103
00:54:34,530 --> 00:54:39,780
them I don't think they update over here

1104
00:54:37,469 --> 00:54:41,689
maybe they do if you if you don't have

1105
00:54:39,780 --> 00:54:44,490
to do the Alta for to kill the app thing

1106
00:54:41,690 --> 00:54:47,070
but the point is you can scrub through

1107
00:54:44,489 --> 00:54:49,139
these things and what you can do is you

1108
00:54:47,070 --> 00:54:51,630
can look and see what all the

1109
00:54:49,139 --> 00:54:53,909
information is at the time of any

1110
00:54:51,630 --> 00:54:56,970
particular dispatch so for example for

1111
00:54:53,909 --> 00:54:59,699
this particular set of this particular

1112
00:54:56,969 --> 00:55:02,879
quad you can take a look at what the

1113
00:54:59,699 --> 00:55:04,649
vertex specifications were so you've got

1114
00:55:02,880 --> 00:55:06,809
all the sorts of stuff in here that we

1115
00:55:04,650 --> 00:55:11,250
were setting up right like here's the

1116
00:55:06,809 --> 00:55:12,869
vertex format here's like GL float for

1117
00:55:11,250 --> 00:55:15,599
elements of GL float that was for the

1118
00:55:12,869 --> 00:55:19,289
position X Y Z W we've got two elements

1119
00:55:15,599 --> 00:55:22,679
of GL float for like the textures right

1120
00:55:19,289 --> 00:55:24,360
we've got four elements of unsigned byte

1121
00:55:22,679 --> 00:55:26,039
for the color and that's recep these are

1122
00:55:24,360 --> 00:55:27,829
just the vertex stuff that we set up

1123
00:55:26,039 --> 00:55:29,599
right

1124
00:55:27,829 --> 00:55:31,819
and you could also see like some of the

1125
00:55:29,599 --> 00:55:35,690
settings we have here whether you know

1126
00:55:31,820 --> 00:55:37,700
array buffers are enabled or indirect

1127
00:55:35,690 --> 00:55:38,960
drawing primitive restart you know we're

1128
00:55:37,699 --> 00:55:41,659
not using these things so they're off

1129
00:55:38,960 --> 00:55:43,940
but it would tell you if they were on we

1130
00:55:41,659 --> 00:55:47,000
also have like the generic attributes

1131
00:55:43,940 --> 00:55:49,159
you can set with like immediate mode or

1132
00:55:47,000 --> 00:55:50,869
you know those sorts of things you know

1133
00:55:49,159 --> 00:55:52,250
everything everything you want to know

1134
00:55:50,869 --> 00:55:55,759
about versification will show up in this

1135
00:55:52,250 --> 00:55:57,800
window right the transform view if you

1136
00:55:55,760 --> 00:55:58,850
click on that instead this is basically

1137
00:55:57,800 --> 00:56:01,130
showing you all the things you can find

1138
00:55:58,849 --> 00:56:02,839
out about this this like dispatch right

1139
00:56:01,130 --> 00:56:05,059
so it's whatever it's selected here

1140
00:56:02,840 --> 00:56:07,220
these are the the parts of it you can

1141
00:56:05,059 --> 00:56:09,320
see so if you look at the transform you

1142
00:56:07,219 --> 00:56:11,299
can see like it says you know was death

1143
00:56:09,320 --> 00:56:14,210
clamping on you know what what's the

1144
00:56:11,300 --> 00:56:17,480
depth mode is it negative 1 to 1 or 1 0

1145
00:56:14,210 --> 00:56:20,240
to 1 whatever here's what the viewport

1146
00:56:17,480 --> 00:56:22,550
was set to right like 1920 by 1080 and 0

1147
00:56:20,239 --> 00:56:25,009
to 1 for the near for clip planes blah

1148
00:56:22,550 --> 00:56:27,019
blah blah right so again just a lot of

1149
00:56:25,010 --> 00:56:28,190
good information it's it's basically

1150
00:56:27,019 --> 00:56:29,599
really helps with debugging

1151
00:56:28,190 --> 00:56:33,619
when you just want to know like what's

1152
00:56:29,599 --> 00:56:36,440
up right here's the vertex shader so

1153
00:56:33,619 --> 00:56:39,650
inside the vertex shader you can see

1154
00:56:36,440 --> 00:56:41,720
that basically there's no captured

1155
00:56:39,650 --> 00:56:43,760
information that we've got here I don't

1156
00:56:41,719 --> 00:56:46,279
know if that's because we accidentally

1157
00:56:43,760 --> 00:56:50,480
stopped the running oops I didn't mean

1158
00:56:46,280 --> 00:56:53,360
to undock that scrubber so what I can do

1159
00:56:50,480 --> 00:56:55,190
is see whether if I continue running

1160
00:56:53,360 --> 00:56:59,900
here I get it back or if there's some

1161
00:56:55,190 --> 00:57:03,820
way to get it back so it looks like I

1162
00:56:59,900 --> 00:57:03,820
can't really get it back

1163
00:57:06,599 --> 00:57:15,219
we'd like to be able to get that to work

1164
00:57:09,730 --> 00:57:19,719
let me see again I'm gonna just try some

1165
00:57:15,219 --> 00:57:22,419
other things here so if I go ahead and

1166
00:57:19,719 --> 00:57:35,259
do insight start graphics debugging

1167
00:57:22,420 --> 00:57:36,970
again so now I'm gonna window this just

1168
00:57:35,260 --> 00:57:40,800
to see if that helps so now that this is

1169
00:57:36,969 --> 00:57:45,250
in a window I'm gonna go over to that

1170
00:57:40,800 --> 00:57:48,730
pause and capture frame option and I'm

1171
00:57:45,250 --> 00:57:50,320
gonna do it so now okay so basically it

1172
00:57:48,730 --> 00:57:53,409
looks like it was just the fact that was

1173
00:57:50,320 --> 00:57:55,690
fullscreen couldn't handle so this is

1174
00:57:53,409 --> 00:58:00,429
much better now because you can see to

1175
00:57:55,690 --> 00:58:02,380
here if I leave this the game if I don't

1176
00:58:00,429 --> 00:58:04,989
have to alt f4 the HUD version of the

1177
00:58:02,380 --> 00:58:07,059
game replay thing then the other nice

1178
00:58:04,989 --> 00:58:09,579
thing is when you scrub through you get

1179
00:58:07,059 --> 00:58:12,579
to see everything that's being drawn at

1180
00:58:09,579 --> 00:58:14,289
the time right and and I can even do

1181
00:58:12,579 --> 00:58:16,630
that like I can make this smaller right

1182
00:58:14,289 --> 00:58:20,110
and I can scrub through these and I can

1183
00:58:16,630 --> 00:58:22,030
write I can see actually how far I've

1184
00:58:20,110 --> 00:58:24,340
gone through the drawing process which

1185
00:58:22,030 --> 00:58:26,680
is awesome right and I guess now that

1186
00:58:24,340 --> 00:58:29,289
this works on the HUD to which I said my

1187
00:58:26,679 --> 00:58:30,940
dead machine that's not true but now

1188
00:58:29,289 --> 00:58:33,550
that the this works on the HUD as well

1189
00:58:30,940 --> 00:58:35,920
it means that you can actually scrub it

1190
00:58:33,550 --> 00:58:38,470
on the hood and I don't know if it's

1191
00:58:35,920 --> 00:58:46,119
smart enough to keep them synched it

1192
00:58:38,469 --> 00:58:49,449
might be I don't think it is so if I set

1193
00:58:46,119 --> 00:58:54,639
this one it does set this one if I set

1194
00:58:49,449 --> 00:58:55,929
this one no it does all right so I just

1195
00:58:54,639 --> 00:58:59,500
wanted to keep them synced as well so if

1196
00:58:55,929 --> 00:59:01,569
I come out to here right I I'm on three

1197
00:58:59,500 --> 00:59:04,750
eight seven seven it'll set it to three

1198
00:59:01,570 --> 00:59:07,480
at 7-7 here so for our purposes that

1199
00:59:04,750 --> 00:59:10,420
doesn't really super matter at the

1200
00:59:07,480 --> 00:59:12,909
moment right because we're not trying to

1201
00:59:10,420 --> 00:59:14,470
bug a specific part of the drawing but

1202
00:59:12,909 --> 00:59:16,389
you can imagine why that would be nice

1203
00:59:14,469 --> 00:59:18,789
if you had a specific thing that was

1204
00:59:16,389 --> 00:59:21,969
messed up you can imagine why

1205
00:59:18,789 --> 00:59:23,619
- like dial-in - just where that was so

1206
00:59:21,969 --> 00:59:26,230
that you know you you're not just

1207
00:59:23,619 --> 00:59:28,329
hunting through a giant thing of garbage

1208
00:59:26,230 --> 00:59:29,889
now there's other ways you can do that

1209
00:59:28,329 --> 00:59:31,809
you could there's things called debug

1210
00:59:29,889 --> 00:59:35,079
markers you can output in the OpenGL

1211
00:59:31,809 --> 00:59:36,130
stream specifically for purposes like

1212
00:59:35,079 --> 00:59:38,199
this where you have an integrated

1213
00:59:36,130 --> 00:59:40,210
debugger and so if we were trying to

1214
00:59:38,199 --> 00:59:41,739
nail something specific that was not

1215
00:59:40,210 --> 00:59:43,449
visual like this is good for finding

1216
00:59:41,739 --> 00:59:45,309
visual errors if there's a particular

1217
00:59:43,449 --> 00:59:47,079
draw call we want to debug or something

1218
00:59:45,309 --> 00:59:48,670
there's also ways you can do that we can

1219
00:59:47,079 --> 00:59:51,849
go in and insert a debug marker into the

1220
00:59:48,670 --> 00:59:54,700
debug stream and it would show up as

1221
00:59:51,849 --> 01:00:00,730
something we could we could jump to here

1222
00:59:54,699 --> 01:00:03,279
right so this right here allows us to

1223
01:00:00,730 --> 01:00:06,219
show some various things about what gets

1224
01:00:03,280 --> 01:00:07,090
set and what gets changed right but we

1225
01:00:06,219 --> 01:00:08,949
don't really care about that at the

1226
01:00:07,090 --> 01:00:10,480
moment so anyway let's take a look at

1227
01:00:08,949 --> 01:00:13,029
here if I can now look at the vertex

1228
01:00:10,480 --> 01:00:13,960
shader yeah so I can so since I didn't

1229
01:00:13,030 --> 01:00:15,190
have to alt f4

1230
01:00:13,960 --> 01:00:17,320
out of the window this is what I was

1231
01:00:15,190 --> 01:00:19,990
expecting to see here so you can see

1232
01:00:17,320 --> 01:00:22,390
that if we step to the if we messed up

1233
01:00:19,989 --> 01:00:24,279
if we select vertex shader we can

1234
01:00:22,389 --> 01:00:26,409
actually open out the source code for

1235
01:00:24,280 --> 01:00:29,050
the vertex shader as well and this is

1236
01:00:26,409 --> 01:00:30,609
just what we fed you know what we fed to

1237
01:00:29,050 --> 01:00:34,990
the graphics card when we sent down the

1238
01:00:30,610 --> 01:00:37,840
shader right and yeah we can look at

1239
01:00:34,989 --> 01:00:39,669
basically anything we want there these

1240
01:00:37,840 --> 01:00:41,079
here which are kind of the more

1241
01:00:39,670 --> 01:00:44,050
important part usually because we kind

1242
01:00:41,079 --> 01:00:46,179
of know what text we sent down these

1243
01:00:44,050 --> 01:00:48,519
here are the uniform values at the time

1244
01:00:46,179 --> 01:00:50,199
and this is really great Ruby - because

1245
01:00:48,519 --> 01:00:53,289
it lets me see right

1246
01:00:50,199 --> 01:00:55,089
what like the transform matrix was so I

1247
01:00:53,289 --> 01:00:57,489
can verify that we sent that down right

1248
01:00:55,090 --> 01:00:59,380
at a particular draw call it lets me see

1249
01:00:57,489 --> 01:01:01,719
like what we set for other fog values

1250
01:00:59,380 --> 01:01:04,360
like our you know our special values

1251
01:01:01,719 --> 01:01:05,109
that we set are all here and that's

1252
01:01:04,360 --> 01:01:06,849
really great

1253
01:01:05,110 --> 01:01:10,150
right it's so much more visible than we

1254
01:01:06,849 --> 01:01:11,889
had before for the raster ops this is

1255
01:01:10,150 --> 01:01:13,990
just a thing that says okay how are

1256
01:01:11,889 --> 01:01:16,000
things how is our triangles gonna get

1257
01:01:13,989 --> 01:01:17,979
filled right so you know what's the

1258
01:01:16,000 --> 01:01:21,340
calling state what's the line state

1259
01:01:17,980 --> 01:01:23,710
point state is rasterizer discard

1260
01:01:21,340 --> 01:01:27,480
enabled is smoothing enabled is multi

1261
01:01:23,710 --> 01:01:27,480
sampling on right it is in our case

1262
01:01:27,570 --> 01:01:32,140
everything you want to know here we've

1263
01:01:30,519 --> 01:01:33,009
got the fragment shader which is the

1264
01:01:32,139 --> 01:01:38,199
same

1265
01:01:33,009 --> 01:01:40,179
as we had been you know expecting it to

1266
01:01:38,199 --> 01:01:42,518
be right this is this is the fragment

1267
01:01:40,179 --> 01:01:44,108
shader we're expecting and this is the

1268
01:01:42,518 --> 01:01:47,709
fragment shader that has our while loop

1269
01:01:44,108 --> 01:01:49,000
in it right and so now the interesting

1270
01:01:47,710 --> 01:01:52,929
part and the thing that I actually

1271
01:01:49,000 --> 01:01:55,989
wanted to get to is that these pieces of

1272
01:01:52,929 --> 01:01:57,940
information here this is exactly what I

1273
01:01:55,989 --> 01:01:59,949
wanted to bugger for like first of all

1274
01:01:57,940 --> 01:02:03,220
we can actually see all of the

1275
01:01:59,949 --> 01:02:05,500
information that we set in our in our

1276
01:02:03,219 --> 01:02:07,808
shader like what the voxel dimensions

1277
01:02:05,500 --> 01:02:09,730
are and those sorts of things and it

1278
01:02:07,809 --> 01:02:13,720
looks like those aren't set properly

1279
01:02:09,730 --> 01:02:16,179
either so that that's probably a big

1280
01:02:13,719 --> 01:02:19,629
problem we've got to make sure those are

1281
01:02:16,179 --> 01:02:22,389
set but the other thing is the thing

1282
01:02:19,630 --> 01:02:24,369
that I really wanted to see that's you

1283
01:02:22,389 --> 01:02:27,368
know the kind of hard to debug normally

1284
01:02:24,369 --> 01:02:34,028
is I'd like to know what is contained in

1285
01:02:27,369 --> 01:02:35,559
our samplers right so what textures are

1286
01:02:34,028 --> 01:02:38,469
actually loaded and what do those

1287
01:02:35,559 --> 01:02:40,778
textures look like right so what we can

1288
01:02:38,469 --> 01:02:42,848
see here just right off the bat one of

1289
01:02:40,778 --> 01:02:46,329
the nice things about it is we can see

1290
01:02:42,849 --> 01:02:48,700
for example our depth map right or other

1291
01:02:46,329 --> 01:02:50,589
things like that we can look at the

1292
01:02:48,699 --> 01:02:52,528
various things that we've rendered which

1293
01:02:50,588 --> 01:02:55,900
are kind of interesting in our def peels

1294
01:02:52,528 --> 01:02:57,579
right and stuff like that so we can see

1295
01:02:55,900 --> 01:02:59,858
all of that sort of stuff in here and

1296
01:02:57,579 --> 01:03:01,740
that's just really informational when

1297
01:02:59,858 --> 01:03:03,909
we're debugging you know it really helps

1298
01:03:01,739 --> 01:03:05,828
figure out what's going on when we have

1299
01:03:03,909 --> 01:03:09,848
bugs so I really like that part of it

1300
01:03:05,829 --> 01:03:11,859
right so let's go ahead and actually try

1301
01:03:09,849 --> 01:03:14,528
a debugging step here first of all I

1302
01:03:11,858 --> 01:03:16,028
think I want to fix this box in seldom

1303
01:03:14,528 --> 01:03:18,909
box mink or anything while I'm looking

1304
01:03:16,028 --> 01:03:23,679
at it because that should have been set

1305
01:03:18,909 --> 01:03:27,338
and isn't set so you can see here this

1306
01:03:23,679 --> 01:03:30,608
is the attempt to set it Foxman corner

1307
01:03:27,338 --> 01:03:34,028
and Vox in seldom are being set to these

1308
01:03:30,608 --> 01:03:36,429
open gel constant values here I don't

1309
01:03:34,028 --> 01:03:39,849
know maybe those never got set or

1310
01:03:36,429 --> 01:03:40,480
something we'll have to see what what

1311
01:03:39,849 --> 01:03:41,829
the deal is

1312
01:03:40,480 --> 01:03:44,019
here's where they should have been

1313
01:03:41,829 --> 01:03:45,519
getting set it looks like

1314
01:03:44,019 --> 01:03:48,820
[Music]

1315
01:03:45,519 --> 01:03:52,300
when we get the lighting entry transfer

1316
01:03:48,820 --> 01:03:54,519
we're pulling it out there and so in

1317
01:03:52,300 --> 01:03:56,859
theory right when we call this push

1318
01:03:54,519 --> 01:04:00,460
lighting that information should have

1319
01:03:56,858 --> 01:04:03,699
been set right here now why it wasn't

1320
01:04:00,460 --> 01:04:06,699
set I'm not sure but that's what we're

1321
01:04:03,699 --> 01:04:08,379
gonna have to find out now what may have

1322
01:04:06,699 --> 01:04:09,699
happened there and let's just verify it

1323
01:04:08,380 --> 01:04:10,990
is I may not have run the lighting

1324
01:04:09,699 --> 01:04:13,899
because this was just my test to see if

1325
01:04:10,989 --> 01:04:16,389
I could get it working in windowed mode

1326
01:04:13,900 --> 01:04:18,700
there so let's go to windowed mode again

1327
01:04:16,389 --> 01:04:21,279
let's run the lighting and maybe now

1328
01:04:18,699 --> 01:04:22,838
when I pause and capture frame we may

1329
01:04:21,280 --> 01:04:26,880
find that those are set properly because

1330
01:04:22,838 --> 01:04:26,880
it maybe I just I don't think I did ooh

1331
01:04:28,139 --> 01:04:31,710
what happened here

1332
01:04:38,349 --> 01:04:48,410
it looks like it can't write to the end

1333
01:04:43,550 --> 01:04:50,950
of the peak message block why would that

1334
01:04:48,409 --> 01:04:50,949
be the case

1335
01:04:59,900 --> 01:05:17,000
okay what is going on here how come I

1336
01:05:13,139 --> 01:05:17,000
can't view the disassembly of our code

1337
01:05:19,670 --> 01:05:27,450
is this some kind of Visual Studio 2017

1338
01:05:23,190 --> 01:05:29,789
nonsense or is that just because I can't

1339
01:05:27,449 --> 01:05:33,960
debug something that has insight running

1340
01:05:29,789 --> 01:05:35,820
in it maybe let's hope that's the case

1341
01:05:33,960 --> 01:05:37,440
because if I lost the ability to view

1342
01:05:35,820 --> 01:05:49,588
debug mode I don't even know what to say

1343
01:05:37,440 --> 01:05:50,700
about that this is looking sketchy this

1344
01:05:49,588 --> 01:05:56,338
is looking sketchy

1345
01:05:50,699 --> 01:05:57,868
let me reboot this one thing I will say

1346
01:05:56,338 --> 01:05:59,279
it's insight does crash on me fairly

1347
01:05:57,869 --> 01:06:02,940
frequently on my dead machine so that's

1348
01:05:59,280 --> 01:06:06,119
not surprising that's just something I

1349
01:06:02,940 --> 01:06:08,909
live with I'm not sure why it crashes so

1350
01:06:06,119 --> 01:06:10,200
frequently or like what you know what is

1351
01:06:08,909 --> 01:06:12,569
the cause of those crashes but it

1352
01:06:10,199 --> 01:06:14,489
definitely crashes so you will have to

1353
01:06:12,570 --> 01:06:16,980
sort of expect that it was not as bad as

1354
01:06:14,489 --> 01:06:18,329
render doc in terms of like like the

1355
01:06:16,980 --> 01:06:24,050
whole like not being able to use it

1356
01:06:18,329 --> 01:06:27,150
thing but definitely had issues alright

1357
01:06:24,050 --> 01:06:29,880
so it looks like I can't alt tab between

1358
01:06:27,150 --> 01:06:35,639
it for some reason one thing I do wonder

1359
01:06:29,880 --> 01:06:37,410
- I'm interested to know so in and build

1360
01:06:35,639 --> 01:06:40,108
up at we've got this handmade streaming

1361
01:06:37,409 --> 01:06:42,000
thing and if I remember correctly that

1362
01:06:40,108 --> 01:06:46,380
was like a workaround for the fact that

1363
01:06:42,000 --> 01:06:48,329
we had like we had to sort of change the

1364
01:06:46,380 --> 01:06:50,970
double buffering modes and stuff like

1365
01:06:48,329 --> 01:06:52,529
this so I'm wondering if maybe also if

1366
01:06:50,969 --> 01:06:54,569
we got rid of that it might help because

1367
01:06:52,530 --> 01:06:57,930
the normal way to run it is not with

1368
01:06:54,570 --> 01:06:59,369
double buffering off so we can get rid

1369
01:06:57,929 --> 01:07:00,750
of that now because we don't have to

1370
01:06:59,369 --> 01:07:03,990
worry about that workaround for

1371
01:07:00,750 --> 01:07:05,699
streaming so we can basically get rid of

1372
01:07:03,989 --> 01:07:08,429
references to handmade streaming in the

1373
01:07:05,699 --> 01:07:10,939
codebase entirely we can always use

1374
01:07:08,429 --> 01:07:14,538
double buffer in our pixel format

1375
01:07:10,940 --> 01:07:16,818
and we can get rid of the sort of go to

1376
01:07:14,539 --> 01:07:18,829
no streaming second power Flags nonsense

1377
01:07:16,818 --> 01:07:22,989
so this stuff can get get out of there

1378
01:07:18,829 --> 01:07:28,000
right however I don't know that we ever

1379
01:07:22,989 --> 01:07:30,199
actually set handmade streaming to one

1380
01:07:28,000 --> 01:07:32,239
because we never would have set that

1381
01:07:30,199 --> 01:07:34,960
well actually maybe we did in the show

1382
01:07:32,239 --> 01:07:34,959
let's find out

1383
01:07:40,119 --> 01:07:44,059
so we never set that in the show anyway

1384
01:07:42,440 --> 01:08:00,349
so double buffering would have been

1385
01:07:44,059 --> 01:08:02,240
running already I guess uh and I don't

1386
01:08:00,349 --> 01:08:04,430
know about this to do here can we just

1387
01:08:02,239 --> 01:08:05,689
build both with one eggsy I'm not sure

1388
01:08:04,429 --> 01:08:17,059
what that was referring to anyway so I'm

1389
01:08:05,690 --> 01:08:18,829
gonna get rid of that as well yes so so

1390
01:08:17,060 --> 01:08:20,239
yeah I don't know it just looks like we

1391
01:08:18,829 --> 01:08:22,818
can't alt tab between them but I'm not

1392
01:08:20,238 --> 01:08:25,389
sure why it looks like n site brick

1393
01:08:22,819 --> 01:08:25,390
breaks that

1394
01:08:27,868 --> 01:08:33,019
so I guess I just won't do that just

1395
01:08:30,448 --> 01:08:33,019
have to remember not to

1396
01:09:03,338 --> 01:09:19,329
I sent a report all right so let's see

1397
01:09:15,639 --> 01:09:22,750
here if if I only alt-tab a once though

1398
01:09:19,329 --> 01:09:24,818
it seemed like it worked I don't know

1399
01:09:22,750 --> 01:09:27,310
maybe that's wishful thinking but so if

1400
01:09:24,819 --> 01:09:29,080
I run the lighting and then I go here

1401
01:09:27,310 --> 01:09:32,170
and hit pause and capture frame oops

1402
01:09:29,079 --> 01:09:39,099
that's wrong first I got a start

1403
01:09:32,170 --> 01:09:42,429
graphics debugging so if I go ahead and

1404
01:09:39,099 --> 01:09:45,009
do a pause and capture frame without alt

1405
01:09:42,429 --> 01:09:49,989
tabbing back it does not crash and once

1406
01:09:45,009 --> 01:09:52,810
I've done that it looks like I'm fine so

1407
01:09:49,988 --> 01:10:01,718
it's just don't do it before you hit

1408
01:09:52,810 --> 01:10:04,719
pause to capture frame I guess so yeah I

1409
01:10:01,719 --> 01:10:06,340
don't know hopefully that's reliable I

1410
01:10:04,719 --> 01:10:10,389
don't know if it will be but let's just

1411
01:10:06,340 --> 01:10:16,289
hope that it is and go from there so

1412
01:10:10,389 --> 01:10:22,289
there's the lighting and I'll tap back

1413
01:10:16,289 --> 01:10:26,618
pause and capture frame so it looks like

1414
01:10:22,289 --> 01:10:31,539
maybe I can't do it

1415
01:10:26,618 --> 01:10:34,059
if I have run the lighting capture why

1416
01:10:31,539 --> 01:10:36,488
would it need to launch this what is it

1417
01:10:34,060 --> 01:10:39,130
doing I feel like it's launching a

1418
01:10:36,488 --> 01:10:47,279
second copy of the executable or

1419
01:10:39,130 --> 01:10:49,840
something would everyone agree with that

1420
01:10:47,279 --> 01:10:55,929
it looks like it's launching a second

1421
01:10:49,840 --> 01:10:59,099
copy of the executable I'm going to take

1422
01:10:55,929 --> 01:10:59,099
a look on here and see what's up

1423
01:11:02,310 --> 01:11:12,219
so here's the section that we would pop

1424
01:11:04,899 --> 01:11:29,460
up in so let me go ahead and pin this so

1425
01:11:12,219 --> 01:11:29,460
if I go ahead and run here we go so

1426
01:11:30,359 --> 01:11:33,969
there's our win32 your handmade right

1427
01:11:33,520 --> 01:11:41,050
there

1428
01:11:33,969 --> 01:11:46,000
I run the lighting alt-tab I hit pause

1429
01:11:41,050 --> 01:11:52,260
and capture frame so it looks like I

1430
01:11:46,000 --> 01:11:52,260
didn't I did not even actually have to

1431
01:11:52,350 --> 01:12:05,980
to look I don't think I ever actually

1432
01:11:56,679 --> 01:12:07,658
clicked pause and capture frame so maybe

1433
01:12:05,979 --> 01:12:09,698
it didn't I don't know that's pretty

1434
01:12:07,658 --> 01:12:14,500
bizarre so I'm gonna hit debug sure

1435
01:12:09,698 --> 01:12:17,129
launch another copy if you want to where

1436
01:12:14,500 --> 01:12:17,130
we crash it

1437
01:12:26,500 --> 01:12:33,300
I don't even want to know

1438
01:12:42,560 --> 01:12:52,440
so here's the Nvidia graphics stack

1439
01:12:49,189 --> 01:12:56,000
where are the threads this is what

1440
01:12:52,439 --> 01:12:56,000
crashed this is the only thread we get

1441
01:13:02,899 --> 01:13:20,399
yeah well this does create a bit of a

1442
01:13:11,880 --> 01:13:26,640
problem if we can't ever actually get it

1443
01:13:20,399 --> 01:13:29,729
to stable II be able to not crash I mean

1444
01:13:26,640 --> 01:13:31,770
hopefully this is just whatever we're

1445
01:13:29,729 --> 01:13:33,209
specifying erroneously that is the

1446
01:13:31,770 --> 01:13:35,910
reason why we crashed the AMD driver

1447
01:13:33,210 --> 01:13:38,399
maybe this is also what crashes this

1448
01:13:35,909 --> 01:13:40,050
driver look maybe when we're specifying

1449
01:13:38,399 --> 01:13:44,750
those textures we're specifying them

1450
01:13:40,050 --> 01:13:44,750
incorrectly or something like this I

1451
01:13:45,079 --> 01:13:56,059
don't know but I'm not sure how we can

1452
01:13:53,130 --> 01:13:56,060
debug this much further

1453
01:14:08,449 --> 01:14:14,010
so the first thing I'm going to do here

1454
01:14:10,529 --> 01:14:15,359
because I don't have any other ideas is

1455
01:14:14,010 --> 01:14:17,159
I'm going to take a look to see if

1456
01:14:15,359 --> 01:14:21,000
there's something I can do to maybe make

1457
01:14:17,159 --> 01:14:23,510
things more stable so when we send down

1458
01:14:21,000 --> 01:14:23,510
the lighting

1459
01:14:34,270 --> 01:14:41,360
whoa very tired let me sit down the

1460
01:14:37,640 --> 01:14:44,510
lighting it's right here

1461
01:14:41,359 --> 01:14:46,909
and what you can see is we you know

1462
01:14:44,510 --> 01:14:48,829
specify these textures here I'm trying

1463
01:14:46,909 --> 01:14:52,099
to figure out is there something that

1464
01:14:48,829 --> 01:14:57,170
we're doing in here that's causing the

1465
01:14:52,100 --> 01:15:03,800
problem so for example let's suppose we

1466
01:14:57,170 --> 01:15:06,140
just didn't send those down I'm just

1467
01:15:03,800 --> 01:15:12,489
trying to guess what we might be doing

1468
01:15:06,140 --> 01:15:14,750
that could cause the the faulting right

1469
01:15:12,489 --> 01:15:17,000
so let's suppose I did that so I've

1470
01:15:14,750 --> 01:15:19,069
rebuilt now where I've got a version

1471
01:15:17,000 --> 01:15:22,340
that doesn't that doesn't even send down

1472
01:15:19,069 --> 01:15:28,000
any textures at all I and now I'm gonna

1473
01:15:22,340 --> 01:15:28,000
start debugging again run the lighting

1474
01:15:28,899 --> 01:15:35,649
everything appears temporarily normal

1475
01:15:32,140 --> 01:15:35,650
come back here

1476
01:15:35,800 --> 01:15:40,940
it's see what's really about that is I

1477
01:15:39,140 --> 01:15:42,050
don't even ever have to click on that it

1478
01:15:40,939 --> 01:15:44,539
looks like right

1479
01:15:42,050 --> 01:15:47,329
it looks like it's before I even click

1480
01:15:44,539 --> 01:15:50,090
on it all I have to do is just go to the

1481
01:15:47,329 --> 01:15:53,029
menus I know that sounds weird but it

1482
01:15:50,090 --> 01:15:58,039
really felt like that so like if I come

1483
01:15:53,029 --> 01:15:59,630
back here for example see that all I had

1484
01:15:58,039 --> 01:16:06,489
to do is click on the insight menu and

1485
01:15:59,630 --> 01:16:09,199
it crashed like all I had to do was that

1486
01:16:06,489 --> 01:16:10,880
why that is I have no idea I wonder if

1487
01:16:09,199 --> 01:16:15,010
there's anything on here that I can do

1488
01:16:10,880 --> 01:16:15,010
that would cause it to not do that

1489
01:17:08,179 --> 01:17:16,750
so I don't see anything particularly

1490
01:17:12,500 --> 01:17:16,750
useful in here

1491
01:17:40,789 --> 01:17:43,789
hmm

1492
01:17:48,779 --> 01:17:55,300
so I guess this has been a complete bust

1493
01:17:53,050 --> 01:17:57,219
we could not really get rendered luck to

1494
01:17:55,300 --> 01:18:00,940
work we cannot really get insight to

1495
01:17:57,219 --> 01:18:03,689
work and that's unfortunate because you

1496
01:18:00,939 --> 01:18:06,399
know that sort of means that in order to

1497
01:18:03,689 --> 01:18:08,138
in order to use the graphics debugger

1498
01:18:06,399 --> 01:18:10,089
you have to already have debug your

1499
01:18:08,139 --> 01:18:11,769
graphics assuming that it's something

1500
01:18:10,090 --> 01:18:13,538
that we're doing I don't actually know

1501
01:18:11,769 --> 01:18:15,280
that it could be that it's not it could

1502
01:18:13,538 --> 01:18:17,469
be this has nothing to do with us and

1503
01:18:15,279 --> 01:18:18,578
these would just crash anyway but

1504
01:18:17,469 --> 01:18:21,760
assuming that there's something we're

1505
01:18:18,578 --> 01:18:24,308
doing buggy and that is the reason why

1506
01:18:21,760 --> 01:18:26,170
we are crashing then it's like a

1507
01:18:24,309 --> 01:18:27,670
catch-22 it's like hey I'd like to use a

1508
01:18:26,170 --> 01:18:29,949
grafter burger to help debug my program

1509
01:18:27,670 --> 01:18:31,359
I was like oh sorry you have to already

1510
01:18:29,948 --> 01:18:37,379
have debugged your graphics in order to

1511
01:18:31,359 --> 01:18:37,380
use the graphs to work very well that's

1512
01:18:40,679 --> 01:18:44,949
so I'm just gonna poke at this a little

1513
01:18:42,698 --> 01:18:47,888
bit longer just to see what we can learn

1514
01:18:44,948 --> 01:18:51,038
about it if I go ahead and run my

1515
01:18:47,889 --> 01:18:57,460
program I'm assuming that that doesn't

1516
01:18:51,038 --> 01:18:59,979
happen normally no it does so basically

1517
01:18:57,460 --> 01:19:02,260
something about the instrumentation and

1518
01:18:59,979 --> 01:19:08,259
we're getting it we're getting it really

1519
01:19:02,260 --> 01:19:11,099
weird we're getting a really weird crash

1520
01:19:08,260 --> 01:19:15,159
in there that I don't super understand

1521
01:19:11,099 --> 01:19:16,840
and the fact that I can't ever get any

1522
01:19:15,158 --> 01:19:19,509
disassembly on my application is

1523
01:19:16,840 --> 01:19:21,309
freaking me out too like you know I

1524
01:19:19,510 --> 01:19:24,639
should be able to go to a disassembly of

1525
01:19:21,309 --> 01:19:32,590
this and okay so okay so in the I am

1526
01:19:24,639 --> 01:19:35,699
able to get the disassembly I am able to

1527
01:19:32,590 --> 01:19:35,699
get the disassembly

1528
01:19:37,500 --> 01:19:44,880
if I just don't have insight running

1529
01:19:39,630 --> 01:19:47,039
that's less less of a problem so let's

1530
01:19:44,880 --> 01:19:48,569
let's figure out what's going on here

1531
01:19:47,039 --> 01:19:51,510
I'm trying to I'm trying to get a handle

1532
01:19:48,569 --> 01:19:53,460
on what what's happening here so if we

1533
01:19:51,510 --> 01:19:58,199
take a look at this code here at this

1534
01:19:53,460 --> 01:20:00,359
time to block peek message bit what I'm

1535
01:19:58,199 --> 01:20:05,970
assuming is I'm assuming that this bit

1536
01:20:00,359 --> 01:20:12,719
here is you know is the part that has to

1537
01:20:05,970 --> 01:20:15,480
do with with finishing this time block

1538
01:20:12,720 --> 01:20:17,940
the reason that I think that just for

1539
01:20:15,479 --> 01:20:20,189
folks who aren't assembly language

1540
01:20:17,939 --> 01:20:21,629
reading sorts of people because I'm

1541
01:20:20,189 --> 01:20:24,179
taking a look here and you see this

1542
01:20:21,630 --> 01:20:27,270
locked ad right

1543
01:20:24,180 --> 01:20:28,440
the lock prefix instruction is the thing

1544
01:20:27,270 --> 01:20:32,880
that lets us know that we're doing a

1545
01:20:28,439 --> 01:20:34,619
multi-threaded operation here which you

1546
01:20:32,880 --> 01:20:38,069
know the call to peek message occurring

1547
01:20:34,619 --> 01:20:39,239
right here we know that that has none no

1548
01:20:38,069 --> 01:20:40,199
such things right that's going to call

1549
01:20:39,239 --> 01:20:41,840
into Windows if they had any

1550
01:20:40,199 --> 01:20:44,189
synchronization to be behind that call

1551
01:20:41,840 --> 01:20:47,789
and then we're picking up the value from

1552
01:20:44,189 --> 01:20:50,369
it but then we go right into this lock

1553
01:20:47,789 --> 01:21:00,180
tab and so if we take a look at what

1554
01:20:50,369 --> 01:21:02,909
happens in the debug code the timed

1555
01:21:00,180 --> 01:21:04,800
block function it creates one of these

1556
01:21:02,909 --> 01:21:06,840
little automatic things that like

1557
01:21:04,800 --> 01:21:08,460
creates and destroys itself you can see

1558
01:21:06,840 --> 01:21:11,640
it does a begin block and then an end

1559
01:21:08,460 --> 01:21:14,789
block right and so we don't want to do

1560
01:21:11,640 --> 01:21:21,960
is look at the end block call for

1561
01:21:14,789 --> 01:21:24,930
wherever that is right here and that

1562
01:21:21,960 --> 01:21:28,770
records a debug event and record debug

1563
01:21:24,930 --> 01:21:31,140
event is this code right here so this

1564
01:21:28,770 --> 01:21:34,410
our DTSC that you see there that reads

1565
01:21:31,140 --> 01:21:36,210
the clock value that's right here and no

1566
01:21:34,409 --> 01:21:37,859
one else is going to be doing an RDP SC

1567
01:21:36,210 --> 01:21:38,939
right so this is the reading of the

1568
01:21:37,859 --> 01:21:41,369
clock value right here

1569
01:21:38,939 --> 01:21:43,259
you can see there's an I'm all that I'm

1570
01:21:41,369 --> 01:21:46,199
all is gonna be probably for this

1571
01:21:43,260 --> 01:21:48,869
referencing off the array here right and

1572
01:21:46,199 --> 01:21:49,729
you can see the locked add the locked

1573
01:21:48,869 --> 01:21:53,420
add is

1574
01:21:49,729 --> 01:21:55,369
atomic add you 64 right so this all fits

1575
01:21:53,420 --> 01:21:57,529
the profile exactly of what I would have

1576
01:21:55,369 --> 01:21:59,300
expected the ending of time block to be

1577
01:21:57,529 --> 01:22:01,849
and so that's what I think I'm looking

1578
01:21:59,300 --> 01:22:03,860
at even though the source code Visual

1579
01:22:01,850 --> 01:22:05,539
Studio did a very poor job of telling me

1580
01:22:03,859 --> 01:22:07,969
that this was the destructor it should

1581
01:22:05,539 --> 01:22:10,149
have said right this time to block part

1582
01:22:07,970 --> 01:22:12,409
should have been like right there

1583
01:22:10,149 --> 01:22:15,969
because that's what this code came from

1584
01:22:12,409 --> 01:22:15,970
but it you know it's too dumb to do that

1585
01:22:16,119 --> 01:22:27,229
so anyway what I'm seeing here is that

1586
01:22:22,069 --> 01:22:32,109
you know after this after this compare

1587
01:22:27,229 --> 01:22:35,500
and jump here it's this assertion is

1588
01:22:32,109 --> 01:22:38,509
what's happening so essentially what's

1589
01:22:35,500 --> 01:22:41,060
crashing the application isn't that

1590
01:22:38,510 --> 01:22:43,550
really a crash it's an assertion that we

1591
01:22:41,060 --> 01:22:46,910
don't run out of space for our debug

1592
01:22:43,550 --> 01:22:52,640
event table like that's what actually

1593
01:22:46,909 --> 01:22:55,488
happened so I guess what's happening is

1594
01:22:52,640 --> 01:22:58,760
something about the way we're running it

1595
01:22:55,488 --> 01:23:06,500
right now is causing our debug events to

1596
01:22:58,760 --> 01:23:08,539
pile up and overflow I so they're just

1597
01:23:06,500 --> 01:23:10,430
we are adding debug events adding debug

1598
01:23:08,539 --> 01:23:13,100
events and we're never like clearing out

1599
01:23:10,430 --> 01:23:17,090
the debug events that's that's what's

1600
01:23:13,100 --> 01:23:20,840
basically happening why that's happening

1601
01:23:17,090 --> 01:23:22,789
we don't know but it is happening so we

1602
01:23:20,840 --> 01:23:24,949
got two options the first thing we can

1603
01:23:22,789 --> 01:23:26,359
do is probably the easiest just to fix

1604
01:23:24,949 --> 01:23:31,090
things now but then we're gonna have to

1605
01:23:26,359 --> 01:23:31,089
fix figure out what to do about it later

1606
01:23:32,119 --> 01:23:36,170
so what we want to do here just say oh

1607
01:23:33,680 --> 01:23:41,440
okay well you know let's just just turn

1608
01:23:36,170 --> 01:23:44,869
off hamate eternal right at that point

1609
01:23:41,439 --> 01:23:47,059
we won't have any debug events in the

1610
01:23:44,869 --> 01:23:51,738
first place so then we shouldn't have

1611
01:23:47,060 --> 01:23:55,430
any problem so here's the graphs

1612
01:23:51,738 --> 01:24:00,759
debugging running I launch the lighting

1613
01:23:55,430 --> 01:24:04,789
done and then I click back here

1614
01:24:00,760 --> 01:24:10,730
and it's all good so it looks like if we

1615
01:24:04,789 --> 01:24:24,198
all tab away we stop getting those debug

1616
01:24:10,729 --> 01:24:26,959
events cleared I don't know exactly why

1617
01:24:24,198 --> 01:24:28,789
that would be but it must have something

1618
01:24:26,960 --> 01:24:35,270
to do with the fact that we're no longer

1619
01:24:28,789 --> 01:24:38,448
getting a swap message but we are on

1620
01:24:35,270 --> 01:24:41,860
some other threads or something doing

1621
01:24:38,448 --> 01:24:44,719
work that creates debug messages I

1622
01:24:41,859 --> 01:24:47,238
really don't know but point being at

1623
01:24:44,719 --> 01:24:50,060
least we did figure out how to get it to

1624
01:24:47,238 --> 01:24:56,448
work right so that means we can it pause

1625
01:24:50,060 --> 01:24:59,030
and capture frame now and in theory that

1626
01:24:56,448 --> 01:25:04,988
should allow us to inspect the lighting

1627
01:24:59,029 --> 01:25:04,988
information maybe after all that work

1628
01:25:23,380 --> 01:25:34,039
there we go yeah maybe

1629
01:25:31,039 --> 01:25:36,319
there we go so at that point we are

1630
01:25:34,039 --> 01:25:38,449
functional right and we can look at me

1631
01:25:36,319 --> 01:25:43,670
can see the textures are so in theory

1632
01:25:38,449 --> 01:25:45,260
that would allow us to do the debug

1633
01:25:43,670 --> 01:25:50,420
stuff I wanted to do but man that was a

1634
01:25:45,260 --> 01:25:52,250
lot of work so at that point however it

1635
01:25:50,420 --> 01:25:54,199
I'm not sure what I want to do now I'm

1636
01:25:52,250 --> 01:25:59,539
not sure if I want to actually do the

1637
01:25:54,199 --> 01:26:01,909
the debug if I want to actually look and

1638
01:25:59,539 --> 01:26:05,119
see what the debug looks like on the

1639
01:26:01,909 --> 01:26:08,269
lighting or if I'd rather go and fix the

1640
01:26:05,119 --> 01:26:10,819
whatever the overflow path is on the

1641
01:26:08,270 --> 01:26:12,590
debug events I suppose the more sensible

1642
01:26:10,819 --> 01:26:20,059
thing is to fix the overflow path than

1643
01:26:12,590 --> 01:26:20,989
the debug events because presumably if

1644
01:26:20,060 --> 01:26:24,310
we took a look at the lighting we

1645
01:26:20,989 --> 01:26:24,309
wouldn't have time to fix it to anyway

1646
01:26:24,880 --> 01:26:33,190
does that depend so let's let's just see

1647
01:26:27,619 --> 01:26:35,599
what's going on here so we know that the

1648
01:26:33,189 --> 01:26:41,269
way that these things are cleared right

1649
01:26:35,600 --> 01:26:43,340
is at the end of our win32 loop we every

1650
01:26:41,270 --> 01:26:46,640
time you know we come through the win32

1651
01:26:43,340 --> 01:26:50,869
loop we do a sort of a mutex thing here

1652
01:26:46,640 --> 01:26:53,900
where we swap the debug arrays where is

1653
01:26:50,869 --> 01:26:57,059
that this is for textures

1654
01:26:53,899 --> 01:26:57,059
[Music]

1655
01:27:07,079 --> 01:27:18,189
so it's right here that's that's debug

1656
01:27:12,880 --> 01:27:22,869
frame end so debug frame end is you know

1657
01:27:18,189 --> 01:27:29,889
called you know substantively every time

1658
01:27:22,869 --> 01:27:34,619
through the loop and I don't really know

1659
01:27:29,890 --> 01:27:34,619
any way that it can avoid being called I

1660
01:27:43,770 --> 01:27:49,030
mean as far as I know it's gonna be

1661
01:27:45,850 --> 01:27:56,520
called every time unless well is it

1662
01:27:49,029 --> 01:27:56,519
inside global pause no

1663
01:28:09,559 --> 01:28:18,899
so basically there's really no way

1664
01:28:14,038 --> 01:28:23,728
around it so how we are still producing

1665
01:28:18,899 --> 01:28:26,429
debug events without calling through

1666
01:28:23,729 --> 01:28:29,099
this I'm not sure I guess what maybe

1667
01:28:26,429 --> 01:28:30,809
could happen is if our windows let's say

1668
01:28:29,099 --> 01:28:35,279
windows is sending us a bunch of

1669
01:28:30,809 --> 01:28:41,269
messages that we would generate debug

1670
01:28:35,279 --> 01:28:44,609
information for somehow like in here I

1671
01:28:41,269 --> 01:28:46,409
don't know that there's any look I don't

1672
01:28:44,609 --> 01:28:49,069
know that there's any way in here that

1673
01:28:46,408 --> 01:28:49,069
that would happen

1674
01:28:59,380 --> 01:29:11,869
so what we do know is this is the place

1675
01:29:02,029 --> 01:29:22,119
where it's happening right so one thing

1676
01:29:11,869 --> 01:29:30,109
might be if we ended up in here right

1677
01:29:22,119 --> 01:29:34,430
let's let's do this so just so we can

1678
01:29:30,109 --> 01:29:38,380
debug it maybe a little bit better if we

1679
01:29:34,430 --> 01:29:42,909
were to go ahead and make a counter here

1680
01:29:38,380 --> 01:29:51,800
that we check so that we could just see

1681
01:29:42,909 --> 01:29:56,149
how many times through we've gone so

1682
01:29:51,800 --> 01:29:58,190
let's say we set like a global here and

1683
01:29:56,149 --> 01:30:06,229
we just made a global variable called

1684
01:29:58,189 --> 01:30:13,969
you know I guess I don't want to set

1685
01:30:06,229 --> 01:30:16,549
that there so if I just counted how many

1686
01:30:13,970 --> 01:30:19,300
times I've gone through this loop then I

1687
01:30:16,550 --> 01:30:23,420
wonder if I can just see really easily

1688
01:30:19,300 --> 01:30:25,909
how many times you know when we get that

1689
01:30:23,420 --> 01:30:29,270
fault did we get like caught up in this

1690
01:30:25,909 --> 01:30:32,899
loop somehow where we're peak our peak

1691
01:30:29,270 --> 01:30:39,620
message is getting like somehow like an

1692
01:30:32,899 --> 01:30:43,000
infinitely long thing I'm not sure but

1693
01:30:39,619 --> 01:30:43,000
let's just find out if that's the case

1694
01:30:59,279 --> 01:31:06,179
all right so we're launching into the

1695
01:31:01,649 --> 01:31:08,129
debugger for no apparent reason you know

1696
01:31:06,179 --> 01:31:11,029
I don't care about your browse info just

1697
01:31:08,130 --> 01:31:11,029
do whatever you want

1698
01:31:20,139 --> 01:31:27,828
so actually that's not where I wanted to

1699
01:31:25,069 --> 01:31:32,359
break I don't actually want to open up

1700
01:31:27,828 --> 01:31:35,059
that debugger like so what I want to do

1701
01:31:32,359 --> 01:31:40,009
actually here is slightly different what

1702
01:31:35,060 --> 01:31:41,719
I want to do is I want to do the version

1703
01:31:40,010 --> 01:31:49,099
that actually broke inside here

1704
01:31:41,719 --> 01:31:57,260
sorry Nvidia for all of these does this

1705
01:31:49,099 --> 01:31:59,510
one work there it goes

1706
01:31:57,260 --> 01:32:01,219
so I don't actually need insight to be

1707
01:31:59,510 --> 01:32:03,650
running it looks like and that's great

1708
01:32:01,219 --> 01:32:05,868
because that way we can take that out of

1709
01:32:03,649 --> 01:32:13,250
the equation so let's take a look at

1710
01:32:05,868 --> 01:32:17,809
what for counter looks like so that's

1711
01:32:13,250 --> 01:32:22,219
massive so somehow we're getting stuck

1712
01:32:17,810 --> 01:32:24,829
in this for loop where we you know we

1713
01:32:22,219 --> 01:32:28,279
come through here we get an actual

1714
01:32:24,828 --> 01:32:33,578
message we process the message whatever

1715
01:32:28,279 --> 01:32:36,590
it is right and then we are kind of just

1716
01:32:33,578 --> 01:32:38,569
infinitely we're just going forever and

1717
01:32:36,590 --> 01:32:41,119
so we're generating a debug message

1718
01:32:38,569 --> 01:32:42,710
every time and somehow we got five

1719
01:32:41,118 --> 01:32:47,809
hundred twenty four thousand Windows

1720
01:32:42,710 --> 01:32:54,859
messages right what I would like to know

1721
01:32:47,810 --> 01:32:59,530
is what are these messages like what can

1722
01:32:54,859 --> 01:33:02,059
I inspect what messages we're getting

1723
01:32:59,529 --> 01:33:10,809
that's causing this kind of absurd

1724
01:33:02,060 --> 01:33:14,989
overflow so message 18:48

1725
01:33:10,810 --> 01:33:19,730
let's take a look at that in hex so o X

1726
01:33:14,988 --> 01:33:23,779
738 so what message is that exactly

1727
01:33:19,729 --> 01:33:25,250
would be my first question and in order

1728
01:33:23,779 --> 01:33:31,059
to answer that question what I'm gonna

1729
01:33:25,250 --> 01:33:31,059
do here is say let's copy that in

1730
01:33:42,189 --> 01:33:46,309
like why are we getting that message

1731
01:33:44,449 --> 01:33:48,380
just spammed at us and maybe it's not

1732
01:33:46,310 --> 01:33:50,300
always that message I mean we don't know

1733
01:33:48,380 --> 01:33:51,470
it could be that every time through

1734
01:33:50,300 --> 01:33:53,000
we're getting a different message to

1735
01:33:51,470 --> 01:33:58,130
what I really probably want to do is log

1736
01:33:53,000 --> 01:34:00,199
these messages and and you know what

1737
01:33:58,130 --> 01:34:02,440
let's just do that because it won't take

1738
01:34:00,199 --> 01:34:02,439
very long

1739
01:34:16,449 --> 01:34:22,460
so what I'm going to do here is I'm just

1740
01:34:19,369 --> 01:34:24,140
creating a global variable again just

1741
01:34:22,460 --> 01:34:27,649
for debug purposes we'll delete these in

1742
01:34:24,140 --> 01:34:29,119
a moment called message buff and what

1743
01:34:27,649 --> 01:34:30,979
I'm going to do is I'm going to take the

1744
01:34:29,119 --> 01:34:34,430
four counter so every time through this

1745
01:34:30,979 --> 01:34:37,759
four loop right right after we get the

1746
01:34:34,430 --> 01:34:40,490
message I'm gonna stuff the message into

1747
01:34:37,760 --> 01:34:43,280
this message buffer so whatever the

1748
01:34:40,489 --> 01:34:45,800
message is that we got I'm gonna stuff

1749
01:34:43,279 --> 01:34:47,300
it into this buffer and I'm gonna use it

1750
01:34:45,800 --> 01:34:48,619
like it just a rolling like a ring

1751
01:34:47,300 --> 01:34:50,029
buffer I'm gonna write all the way

1752
01:34:48,619 --> 01:34:51,140
through it and when I get to the end I'm

1753
01:34:50,029 --> 01:34:53,149
just gonna loop right back to beginning

1754
01:34:51,140 --> 01:34:55,130
so that's what this mod does here right

1755
01:34:53,149 --> 01:34:56,779
I'm gonna take however many there are

1756
01:34:55,130 --> 01:34:58,100
and it's gonna mod by that so I'm just

1757
01:34:56,779 --> 01:35:03,469
kind of rolling in a ring around it

1758
01:34:58,100 --> 01:35:04,970
right so this way I can see you know are

1759
01:35:03,470 --> 01:35:07,010
we just getting spammed with this

1760
01:35:04,970 --> 01:35:10,220
message ad infinitum or is something

1761
01:35:07,010 --> 01:35:12,770
else going on I don't know but I do know

1762
01:35:10,220 --> 01:35:15,110
that when I come in here right yeah we

1763
01:35:12,770 --> 01:35:17,330
get your throw that exception and so now

1764
01:35:15,109 --> 01:35:21,500
if I pop back out I can see you know

1765
01:35:17,329 --> 01:35:27,050
what message buff looks like and it

1766
01:35:21,500 --> 01:35:30,289
seems pretty clear I mean that pretty

1767
01:35:27,050 --> 01:35:31,550
much says it all right we're just

1768
01:35:30,289 --> 01:35:34,189
getting spammed with that message

1769
01:35:31,550 --> 01:35:36,470
whatever that message is so the next

1770
01:35:34,189 --> 01:35:40,729
step is to find out what that message is

1771
01:35:36,470 --> 01:35:42,320
right and I don't know if there's a

1772
01:35:40,729 --> 01:35:43,229
window message look up there's an error

1773
01:35:42,319 --> 01:35:45,269
look up

1774
01:35:43,229 --> 01:35:46,529
right that's kind of handy so if you

1775
01:35:45,270 --> 01:35:48,780
have a Windows error you can go in here

1776
01:35:46,529 --> 01:35:50,369
and you can look it up but knowing what

1777
01:35:48,779 --> 01:35:53,009
that message is that's a little bit

1778
01:35:50,369 --> 01:35:57,029
harder however what we should be able to

1779
01:35:53,010 --> 01:36:09,300
do I think is we should be able to go in

1780
01:35:57,029 --> 01:36:10,769
and let's take a look here here we go we

1781
01:36:09,300 --> 01:36:12,390
should be able to use our search project

1782
01:36:10,770 --> 01:36:14,820
like we do oftentimes a hand-made hero

1783
01:36:12,390 --> 01:36:16,890
we should be able to say like okay well

1784
01:36:14,819 --> 01:36:22,949
let's just look up where WM mousemove is

1785
01:36:16,890 --> 01:36:25,200
right so here's like you know the wind

1786
01:36:22,949 --> 01:36:29,189
user H which has just like all these

1787
01:36:25,199 --> 01:36:32,689
messages in it right so maybe if we're

1788
01:36:29,189 --> 01:36:36,479
lucky we can just sort of blindly find

1789
01:36:32,689 --> 01:36:39,059
that Windows message you can see they're

1790
01:36:36,479 --> 01:36:42,449
listed in hex here so we know the one

1791
01:36:39,060 --> 01:36:48,200
that we're looking for in hacks is hex

1792
01:36:42,449 --> 01:36:50,189
seven three eight oops

1793
01:36:48,199 --> 01:36:51,539
and so the first thing you can do is

1794
01:36:50,189 --> 01:36:55,289
just see whether I find it in wind user

1795
01:36:51,539 --> 01:36:57,630
but sadly I didn't right so the next

1796
01:36:55,289 --> 01:37:00,989
question is well okay whatever seven

1797
01:36:57,630 --> 01:37:02,520
three eight is you know I know where the

1798
01:37:00,989 --> 01:37:07,050
windows directory is it's wherever I am

1799
01:37:02,520 --> 01:37:10,110
right now right Here I am it's this

1800
01:37:07,050 --> 01:37:11,850
absolutely freaking absurd nonsense that

1801
01:37:10,109 --> 01:37:15,000
like Windows does now when they install

1802
01:37:11,850 --> 01:37:16,980
things right a completely ridiculous

1803
01:37:15,000 --> 01:37:20,520
title but here's like where all the

1804
01:37:16,979 --> 01:37:21,839
stuff is I guess there's like when may

1805
01:37:20,520 --> 01:37:24,410
just make sure I can find wind user in

1806
01:37:21,840 --> 01:37:31,260
here so I'm not crazy there's one user

1807
01:37:24,409 --> 01:37:34,529
so if I take this directory and then I

1808
01:37:31,260 --> 01:37:40,670
go to find in files wherever that ended

1809
01:37:34,529 --> 01:37:50,340
up there it is

1810
01:37:40,670 --> 01:37:56,430
oh boy I can't even paste can i you've

1811
01:37:50,340 --> 01:37:59,539
got alright I guess I get to find that

1812
01:37:56,430 --> 01:37:59,539
entire name

1813
01:38:03,630 --> 01:38:10,100
so it's Program Files x86 Windows kits

1814
01:38:10,130 --> 01:38:21,350
10 include um

1815
01:38:27,319 --> 01:38:31,579
so what I'm going to do here is search

1816
01:38:28,640 --> 01:38:34,850
to see if I can find that Windows

1817
01:38:31,579 --> 01:38:36,829
message anywhere just by chance right

1818
01:38:34,850 --> 01:38:39,980
this is not a scientific process I wish

1819
01:38:36,829 --> 01:38:45,739
it was but I'm just gonna see if I can

1820
01:38:39,979 --> 01:38:48,229
find it so here's our find results and

1821
01:38:45,739 --> 01:38:51,769
you can see there's a ton of like grids

1822
01:38:48,229 --> 01:38:54,559
and crap and stuff like this what I'm

1823
01:38:51,770 --> 01:38:58,670
gonna do is search in here to see if I

1824
01:38:54,560 --> 01:39:02,150
can find any WMS can't so it's not

1825
01:38:58,670 --> 01:39:06,109
looking good for us right my next

1826
01:39:02,149 --> 01:39:08,529
thought is what's WM user set to these

1827
01:39:06,109 --> 01:39:08,529
days

1828
01:39:25,158 --> 01:39:36,029
so actually oh okay Wow

1829
01:39:29,729 --> 01:39:46,319
so WM user set to hex Oh 400 so actually

1830
01:39:36,029 --> 01:39:47,880
that that that I don't know if we've

1831
01:39:46,319 --> 01:39:50,099
gone over this on handmade here before

1832
01:39:47,880 --> 01:39:51,000
us let us mention him so one of the

1833
01:39:50,099 --> 01:39:53,190
things they did when they originally

1834
01:39:51,000 --> 01:39:54,779
designed Windows was they have these

1835
01:39:53,189 --> 01:39:56,908
windows messages that get passed around

1836
01:39:54,779 --> 01:39:57,988
right like we get some like WM

1837
01:39:56,908 --> 01:39:59,819
underscore this time you know screw into

1838
01:39:57,988 --> 01:40:01,979
that and they're just a ways of the

1839
01:39:59,819 --> 01:40:03,899
operating systems calling your you know

1840
01:40:01,979 --> 01:40:05,578
one callback function and giving it lots

1841
01:40:03,899 --> 01:40:09,719
of different things that happened like

1842
01:40:05,578 --> 01:40:10,769
event types right but one things they

1843
01:40:09,719 --> 01:40:13,230
did is they said well you know what

1844
01:40:10,770 --> 01:40:16,500
we're only gonna use a certain segment

1845
01:40:13,229 --> 01:40:19,439
of those and we're gonna define WM user

1846
01:40:16,500 --> 01:40:22,309
to be a certain number that above that

1847
01:40:19,439 --> 01:40:26,578
number you can make your own messages

1848
01:40:22,309 --> 01:40:28,650
right so WM user I thought different

1849
01:40:26,578 --> 01:40:32,569
user was a lot higher than that but it's

1850
01:40:28,649 --> 01:40:35,250
not so what that means is WM user that

1851
01:40:32,569 --> 01:40:41,420
738 is actually something getting sent

1852
01:40:35,250 --> 01:40:44,250
by some other app in the system right

1853
01:40:41,420 --> 01:40:46,649
that's not a Windows message it's some

1854
01:40:44,250 --> 01:40:51,960
kind of special message registered by

1855
01:40:46,649 --> 01:40:54,539
somebody sent to us I guess I don't know

1856
01:40:51,960 --> 01:40:58,109
how to back figure out who sent a

1857
01:40:54,539 --> 01:41:02,519
message I don't know that spy can give

1858
01:40:58,109 --> 01:41:05,899
us that information but I'm gonna try so

1859
01:41:02,520 --> 01:41:05,900
I'm gonna fire up spy plus plus here

1860
01:41:06,349 --> 01:41:10,199
which we've used before in Hana me here

1861
01:41:08,399 --> 01:41:13,078
it's just a way of watching the Windows

1862
01:41:10,198 --> 01:41:14,399
messages come in so what I'm going to do

1863
01:41:13,078 --> 01:41:20,599
is I'm gonna switch back to handmade

1864
01:41:14,399 --> 01:41:25,879
hero and I'm going to go ahead and run

1865
01:41:20,599 --> 01:41:25,880
the application here so I'm running

1866
01:41:27,590 --> 01:41:36,829
and I'm gonna go through here and say

1867
01:41:29,510 --> 01:41:39,310
alright where if I can even get it to go

1868
01:41:36,829 --> 01:41:39,309
that long

1869
01:41:42,159 --> 01:41:46,550
so it looks like we also it looks like

1870
01:41:44,840 --> 01:41:50,829
we have some kind of a weird lock up

1871
01:41:46,550 --> 01:41:50,829
when we alt-tab away we stopped running

1872
01:41:51,909 --> 01:41:58,269
for some reason but why

1873
01:42:01,538 --> 01:42:13,380
like like why would did you see that why

1874
01:42:11,288 --> 01:42:15,969
is that happening

1875
01:42:13,380 --> 01:42:18,159
so something's wrong but I just don't

1876
01:42:15,969 --> 01:42:22,239
know what and so we have to figure out a

1877
01:42:18,158 --> 01:42:26,488
way to track this down cuz yeah this is

1878
01:42:22,238 --> 01:42:26,488
this is weird right

1879
01:42:35,210 --> 01:42:40,779
not sure why we don't get a sizing bar

1880
01:42:38,210 --> 01:42:40,779
on this thing

1881
01:42:44,000 --> 01:42:49,729
anyway so now in spy plus plus though we

1882
01:42:47,479 --> 01:42:53,289
you know here's the app running we

1883
01:42:49,729 --> 01:42:53,289
should be able to go ahead and just grab

1884
01:43:00,159 --> 01:43:10,279
the handmade hero window in fact I could

1885
01:43:02,960 --> 01:43:13,359
probably even do it this way and I'm

1886
01:43:10,279 --> 01:43:13,359
just going to look at the messages

1887
01:43:19,699 --> 01:43:31,488
well I thought I was going to but I

1888
01:43:29,039 --> 01:43:31,488
guess I'm not

1889
01:43:41,488 --> 01:43:51,238
so why are we not seeing any messages if

1890
01:43:49,170 --> 01:44:03,960
I picked a different one would I see

1891
01:43:51,238 --> 01:44:04,619
messages is this not spy 64 oh well

1892
01:44:03,960 --> 01:44:06,930
there you go

1893
01:44:04,619 --> 01:44:08,369
for some reason even though I guess

1894
01:44:06,930 --> 01:44:09,780
maybe it thought I don't know why it

1895
01:44:08,369 --> 01:44:20,909
thought we would want to launch the

1896
01:44:09,779 --> 01:44:26,210
32-bit version assuming that x86 like I

1897
01:44:20,909 --> 01:44:26,210
want spy 64 people

1898
01:44:36,819 --> 01:44:42,429
I feel like we went through this already

1899
01:44:38,828 --> 01:44:49,748
on the old machine but I guess we

1900
01:44:42,429 --> 01:44:51,338
unfortunately we unfortunately will have

1901
01:44:49,748 --> 01:44:54,908
to do this work again to figure out how

1902
01:44:51,338 --> 01:44:57,429
to get Spy 64 the 64-bit version of spy

1903
01:44:54,908 --> 01:44:59,108
because the 32-bit version of spy can't

1904
01:44:57,429 --> 01:45:02,559
look at the messages of a 64-bit

1905
01:44:59,109 --> 01:45:05,979
application so it's not gonna do us any

1906
01:45:02,559 --> 01:45:08,559
good so we need the 64-bit edition of

1907
01:45:05,979 --> 01:45:11,439
spy which I thought visual studio would

1908
01:45:08,559 --> 01:45:15,359
have launched but the fact that says x86

1909
01:45:11,439 --> 01:45:16,989
on it suggests to me that it isn't

1910
01:45:15,359 --> 01:45:18,669
launching it and that it's actually

1911
01:45:16,988 --> 01:45:20,708
launching the 32-bit version because I

1912
01:45:18,668 --> 01:45:22,088
think it would say x64 version if it was

1913
01:45:20,708 --> 01:45:24,568
I don't know that that's necessarily

1914
01:45:22,088 --> 01:45:24,568
true

1915
01:45:26,609 --> 01:45:35,010
but here's the one I actually wanted and

1916
01:45:29,828 --> 01:45:35,009
I'm gonna try to pin that out as well

1917
01:45:42,439 --> 01:45:47,729
ya see x64 edition so that's the one we

1918
01:45:45,448 --> 01:45:50,129
actually wanted I'm gonna see if I can

1919
01:45:47,729 --> 01:45:52,799
pin this so that we can run in any time

1920
01:45:50,130 --> 01:45:53,328
we want so we don't to go through that

1921
01:45:52,800 --> 01:45:56,489
again

1922
01:45:53,328 --> 01:45:59,929
alright so now assuming that that was

1923
01:45:56,488 --> 01:46:02,819
the problem I should be able to get the

1924
01:45:59,929 --> 01:46:05,099
messages for this window which is what I

1925
01:46:02,819 --> 01:46:09,268
wanted to see in the first place and

1926
01:46:05,099 --> 01:46:12,659
yeah there we go so there's all our

1927
01:46:09,269 --> 01:46:15,690
messages everything seems to be

1928
01:46:12,658 --> 01:46:18,238
operating fine right now so let's take a

1929
01:46:15,689 --> 01:46:21,118
look at what happens when I go over here

1930
01:46:18,238 --> 01:46:25,678
and do whatever the bad thing is that

1931
01:46:21,118 --> 01:46:28,279
didn't like doesn't look like I'm

1932
01:46:25,679 --> 01:46:28,279
crashing now

1933
01:46:49,289 --> 01:46:53,939
of course I could also be the case that

1934
01:46:51,470 --> 01:46:57,989
just the fact that wind spy is looking

1935
01:46:53,939 --> 01:47:01,049
at it you know means it's fine because

1936
01:46:57,988 --> 01:47:04,589
it's doing something that you know makes

1937
01:47:01,050 --> 01:47:08,070
that not happen but you can see that

1938
01:47:04,590 --> 01:47:10,470
we're mostly getting eighty fours these

1939
01:47:08,069 --> 01:47:13,259
are all eighty four is definitely not

1940
01:47:10,470 --> 01:47:14,820
seven three eighths or whatever so

1941
01:47:13,260 --> 01:47:17,280
that's not really helping all right so

1942
01:47:14,819 --> 01:47:19,699
here if we run this let's launch the

1943
01:47:17,279 --> 01:47:19,699
lighting

1944
01:47:36,569 --> 01:47:40,500
see if I get scratch again

1945
01:47:42,609 --> 01:47:53,229
oh you know what I also forgot our

1946
01:47:48,220 --> 01:47:57,220
cietrade ID that doesn't restore it on

1947
01:47:53,229 --> 01:48:05,879
startup does it so we have come to the

1948
01:47:57,220 --> 01:48:08,320
end poor see Trey

1949
01:48:05,880 --> 01:48:09,760
see Trey doesn't last three reboots I

1950
01:48:08,319 --> 01:48:36,340
should probably do something about that

1951
01:48:09,760 --> 01:48:37,780
huh haha sorry see Trey we have come to

1952
01:48:36,340 --> 01:48:39,130
the end but let me just finish what I

1953
01:48:37,779 --> 01:48:45,819
was doing here because I'm interested to

1954
01:48:39,130 --> 01:48:49,680
know so I don't actually want a message

1955
01:48:45,819 --> 01:48:55,630
search I would actually want is Windows

1956
01:48:49,680 --> 01:48:58,170
and I want to look at this window can I

1957
01:48:55,630 --> 01:48:58,170
do that

1958
01:49:03,109 --> 01:49:09,599
probably not

1959
01:49:05,750 --> 01:49:12,180
anyway I just want this to be able to

1960
01:49:09,600 --> 01:49:17,000
crash on us but I can't seem to do it

1961
01:49:12,180 --> 01:49:17,000
while spy is watching right

1962
01:49:17,180 --> 01:49:33,810
unfortunately so yeah if I run light

1963
01:49:25,729 --> 01:49:41,279
switch and it does not seem to crash now

1964
01:49:33,810 --> 01:49:45,020
either right let me see what happens if

1965
01:49:41,279 --> 01:49:45,019
I close by run

1966
01:49:51,810 --> 01:50:01,190
I don't know what happened here so I run

1967
01:50:01,520 --> 01:50:11,610
light switch yeah we magically like

1968
01:50:09,569 --> 01:50:13,170
fixed the problem somewhere like

1969
01:50:11,609 --> 01:50:15,210
whatever the application was that was

1970
01:50:13,170 --> 01:50:18,869
sending those seven to eight has stopped

1971
01:50:15,210 --> 01:50:31,920
sending them which is bad because now we

1972
01:50:18,869 --> 01:50:34,260
can't figure out who it was curiouser

1973
01:50:31,920 --> 01:50:43,579
and curiouser so let's try running the

1974
01:50:34,260 --> 01:50:43,579
full graphics debug one like so

1975
01:50:46,670 --> 01:50:55,590
so that still crashes it so well you

1976
01:50:52,770 --> 01:50:57,659
know as long as I've got a way to crash

1977
01:50:55,590 --> 01:51:00,510
it I think we're good right as long as

1978
01:50:57,658 --> 01:51:04,078
I've got a way to force that situation I

1979
01:51:00,510 --> 01:51:07,469
can hopefully find the answer right so

1980
01:51:04,078 --> 01:51:13,189
let me go ahead and run spy again maybe

1981
01:51:07,469 --> 01:51:14,849
if I'm lucky if I set up spy right now

1982
01:51:13,189 --> 01:51:25,259
like so

1983
01:51:14,849 --> 01:51:30,569
can it okay cannot fine really

1984
01:51:25,260 --> 01:51:32,400
Oh probably cos got to refresh it go

1985
01:51:30,569 --> 01:51:37,259
ahead and hit messages getting all the

1986
01:51:32,399 --> 01:51:40,729
messages here right oh wait I forgot to

1987
01:51:37,260 --> 01:51:45,929
run it under the thing that more time

1988
01:51:40,729 --> 01:51:47,069
insight start graphics debugging all

1989
01:51:45,929 --> 01:51:53,179
right so now we're under the graphics

1990
01:51:47,069 --> 01:51:53,179
debugger refresh the windows

1991
01:51:58,460 --> 01:52:10,189
now we're watching the messages in here

1992
01:52:02,739 --> 01:52:11,149
I'm gonna switch back to insight can't

1993
01:52:10,189 --> 01:52:14,829
click provoke it

1994
01:52:11,149 --> 01:52:14,829
alright lighting

1995
01:52:18,180 --> 01:52:20,810
No

1996
01:52:26,130 --> 01:52:29,460
the screen

1997
01:52:34,430 --> 01:52:44,070
well so what we know is that we're

1998
01:52:39,569 --> 01:52:46,529
getting that crazy message and we're

1999
01:52:44,069 --> 01:52:48,689
getting flooded we can prevent that

2000
01:52:46,529 --> 01:52:50,759
pretty easily so I can fix this

2001
01:52:48,689 --> 01:52:53,699
particular bug but I would like to know

2002
01:52:50,760 --> 01:52:55,470
who is sending it and why I am

2003
01:52:53,699 --> 01:52:57,809
interested to know if maybe there's

2004
01:52:55,470 --> 01:52:59,310
something I could just track myself that

2005
01:52:57,810 --> 01:53:01,440
would find out what that is

2006
01:52:59,310 --> 01:53:04,770
so what I'm going to do here is I'm just

2007
01:53:01,439 --> 01:53:09,210
gonna take a second and I'm gonna look

2008
01:53:04,770 --> 01:53:11,250
and see in the windows project that

2009
01:53:09,210 --> 01:53:14,310
where I can search things I'm gonna see

2010
01:53:11,250 --> 01:53:16,619
about that message structure what's all

2011
01:53:14,310 --> 01:53:21,480
the stuff I could get and then I'll have

2012
01:53:16,619 --> 01:53:24,300
to also see I suppose if there's any

2013
01:53:21,479 --> 01:53:28,589
queries I can use to get additional

2014
01:53:24,300 --> 01:53:31,050
information on the message right so you

2015
01:53:28,590 --> 01:53:31,650
know this is not going to give me very

2016
01:53:31,050 --> 01:53:39,329
much

2017
01:53:31,649 --> 01:53:42,109
unfortunately let me see if there's any

2018
01:53:39,329 --> 01:53:42,109
information on that

2019
01:54:01,810 --> 01:54:10,510
oh boy stackoverflow says there isn't

2020
01:54:07,779 --> 01:54:15,969
any way to do it which often means that

2021
01:54:10,510 --> 01:54:17,230
there actually is a way to do it there's

2022
01:54:15,970 --> 01:54:18,400
been multiple times that I've found

2023
01:54:17,229 --> 01:54:22,629
someone sections are like there is no

2024
01:54:18,399 --> 01:54:31,059
way and then I find the way so I'm not

2025
01:54:22,630 --> 01:54:32,430
sure that's necessarily true but it

2026
01:54:31,060 --> 01:54:35,550
usually doesn't mean there's no

2027
01:54:32,430 --> 01:54:35,550
straightforward way

2028
01:54:56,708 --> 01:54:59,368
yeah

2029
01:55:01,380 --> 01:55:27,279
hmm I can't really think of anything

2030
01:55:08,920 --> 01:55:29,760
offhand want to see if anyone had

2031
01:55:27,279 --> 01:55:29,759
actually

2032
01:55:38,039 --> 01:55:43,680
I mean the things I'm thinking ever not

2033
01:55:41,939 --> 01:55:45,599
particularly attractive right like it

2034
01:55:43,680 --> 01:55:48,329
seems like okay so one way to do it

2035
01:55:45,600 --> 01:55:53,960
would be to try to make something that

2036
01:55:48,329 --> 01:55:57,119
cooked to everything to find out who

2037
01:55:53,960 --> 01:55:59,730
when whenever someone calls send message

2038
01:55:57,119 --> 01:56:02,789
we get the actual call we like hook all

2039
01:55:59,729 --> 01:56:10,529
calls to send message and then full can

2040
01:56:02,789 --> 01:56:12,060
see like yeah we look and see anyone

2041
01:56:10,529 --> 01:56:14,479
who's gonna send an IX seven to eight

2042
01:56:12,060 --> 01:56:14,480
message

2043
01:56:20,729 --> 01:56:36,459
yeah I don't know I don't know about

2044
01:56:26,859 --> 01:56:39,609
that so I guess I mean I guess at the

2045
01:56:36,460 --> 01:56:43,899
moment we just fix it because I'm not

2046
01:56:39,609 --> 01:56:46,868
sure what else we can actually do we

2047
01:56:43,899 --> 01:56:48,609
know that the problem is that we're

2048
01:56:46,868 --> 01:56:51,420
getting spammed with a particular

2049
01:56:48,609 --> 01:57:07,210
message that we can't seem to avoid

2050
01:56:51,420 --> 01:57:09,908
right I suppose it could be our message

2051
01:57:07,210 --> 01:57:18,788
like do we ever send that message

2052
01:57:09,908 --> 01:57:22,089
anywhere I'm not sure I don't think we

2053
01:57:18,788 --> 01:57:32,319
defined any custom windows messages did

2054
01:57:22,090 --> 01:57:36,819
we because we don't have any of that so

2055
01:57:32,319 --> 01:57:39,658
it can't be ours I don't think we're

2056
01:57:36,819 --> 01:57:42,399
never we're never using a custom message

2057
01:57:39,658 --> 01:57:43,839
so we're not sending it someone else

2058
01:57:42,399 --> 01:57:54,009
would have to be sending it to our

2059
01:57:43,840 --> 01:57:57,880
window maybe we can look at regice move

2060
01:57:54,010 --> 01:57:59,920
you look at registration for them so I

2061
01:57:57,880 --> 01:58:01,748
don't know if you can iterate over who

2062
01:57:59,920 --> 01:58:04,510
has registered stuff I don't think you

2063
01:58:01,748 --> 01:58:06,069
can but this is a function called

2064
01:58:04,510 --> 01:58:08,710
register window message where you give

2065
01:58:06,069 --> 01:58:12,488
it a string and it gives you back a

2066
01:58:08,710 --> 01:58:14,948
message well but it's not one of those

2067
01:58:12,488 --> 01:58:21,339
it says it's between oxc thousand and

2068
01:58:14,948 --> 01:58:22,629
oxf all the way and so that it could not

2069
01:58:21,340 --> 01:58:24,969
have been registered through register

2070
01:58:22,630 --> 01:58:26,199
window message so if you haven't called

2071
01:58:24,969 --> 01:58:29,439
register window message you're not

2072
01:58:26,198 --> 01:58:31,238
supposed to be sending the message in

2073
01:58:29,439 --> 01:58:32,349
the first place because it could

2074
01:58:31,238 --> 01:58:33,279
conflict' with some other

2075
01:58:32,350 --> 01:58:36,039
you're not supposed to be sending

2076
01:58:33,279 --> 01:58:40,599
outside your application that's seven

2077
01:58:36,039 --> 01:58:42,939
two seven three eight message so this is

2078
01:58:40,600 --> 01:58:47,610
a real puzzler I don't know where this

2079
01:58:42,939 --> 01:58:50,169
message is coming from I'm not sure I

2080
01:58:47,609 --> 01:58:51,670
would really like to know

2081
01:58:50,170 --> 01:58:53,440
but either way we've got different ways

2082
01:58:51,670 --> 01:58:55,239
we can deal with it one way we can deal

2083
01:58:53,439 --> 01:59:02,679
with it is by discarding that particular

2084
01:58:55,239 --> 01:59:07,300
message right another way we could deal

2085
01:59:02,680 --> 01:59:08,829
with it is trying to make this thing so

2086
01:59:07,300 --> 01:59:12,220
that just never like you know we could

2087
01:59:08,829 --> 01:59:15,760
do this so we don't ever time our called

2088
01:59:12,220 --> 01:59:17,650
a peak message and so we're not

2089
01:59:15,760 --> 01:59:20,199
generating debug events so we won't

2090
01:59:17,649 --> 01:59:22,839
crash but we'd still like have to sit

2091
01:59:20,199 --> 01:59:30,369
here processing them all which isn't

2092
01:59:22,840 --> 01:59:32,020
great but you know it would in theory

2093
01:59:30,369 --> 01:59:34,689
fix the problem so let's see what

2094
01:59:32,020 --> 01:59:35,950
happens if we do that so if I start

2095
01:59:34,689 --> 01:59:39,189
graphics debugging now on the

2096
01:59:35,949 --> 01:59:43,149
application run the lighting alt-tab

2097
01:59:39,189 --> 01:59:50,439
back go to insight now we've avoided the

2098
01:59:43,149 --> 01:59:54,339
crash right so that's good I you know

2099
01:59:50,439 --> 01:59:55,809
I'm happy about that but you know we we

2100
01:59:54,340 --> 01:59:59,590
figured out what the problem was but

2101
01:59:55,810 --> 02:00:02,230
it's like well I would really like to

2102
01:59:59,590 --> 02:00:05,050
know who is spamming us with a WM user

2103
02:00:02,229 --> 02:00:07,239
message outside of the legal range that

2104
02:00:05,050 --> 02:00:09,279
you're never supposed to cross app spam

2105
02:00:07,239 --> 02:00:11,300
it seems like there's a bug in some

2106
02:00:09,279 --> 02:00:14,448
other program

2107
02:00:11,300 --> 02:00:14,449
[Music]

2108
02:00:18,618 --> 02:00:32,779
and I don't know is there a reason our

2109
02:00:25,170 --> 02:00:32,779
cietrade icon isn't here by the way

2110
02:00:45,529 --> 02:00:49,460
sure does take a long time

2111
02:01:01,380 --> 02:01:06,480
well I'll go ahead and start with

2112
02:01:02,880 --> 02:01:08,900
questions anyway while we're dealing

2113
02:01:06,479 --> 02:01:08,899
with this

2114
02:01:45,869 --> 02:01:52,909
best alloys said regarding message o X

2115
02:01:49,470 --> 02:01:58,470
seven three eight and then posted a link

2116
02:01:52,909 --> 02:02:12,359
let's take a look at that link okay

2117
02:01:58,470 --> 02:02:13,770
copy link address and I spent her a lot

2118
02:02:12,359 --> 02:02:15,359
of time last week debugging a third

2119
02:02:13,770 --> 02:02:17,370
prayer application that froze up in some

2120
02:02:15,359 --> 02:02:18,809
places on Windows 10 1703 but work

2121
02:02:17,369 --> 02:02:20,099
perfectly on previous versions long

2122
02:02:18,810 --> 02:02:22,350
story short this application calls peak

2123
02:02:20,100 --> 02:02:24,390
message many times on every trip around

2124
02:02:22,350 --> 02:02:27,079
smashes loop as a verse in 1703 it

2125
02:02:24,390 --> 02:02:29,100
appears to the widow message o x7 3:8 is

2126
02:02:27,079 --> 02:02:31,289
occasionally sent in the internals of

2127
02:02:29,100 --> 02:02:32,670
peak message that message goes into the

2128
02:02:31,289 --> 02:02:35,519
queue so get message returns immediately

2129
02:02:32,670 --> 02:02:37,710
and the loop goes around again that pegs

2130
02:02:35,520 --> 02:02:39,720
the CPU at what this is exactly what we

2131
02:02:37,710 --> 02:02:40,980
just saw the solution was the pass I can

2132
02:02:39,720 --> 02:02:44,010
put to check whether the message ID is

2133
02:02:40,979 --> 02:02:45,389
those hex 738 and if it is ignore the

2134
02:02:44,010 --> 02:02:49,190
message by jumping back to right before

2135
02:02:45,390 --> 02:02:49,190
the get message indication invocation

2136
02:02:50,149 --> 02:02:57,679
okay so is Windows itself actually

2137
02:02:53,489 --> 02:03:01,469
sending something in the WM user range

2138
02:02:57,680 --> 02:03:02,610
have they lost their minds I mean I

2139
02:03:01,470 --> 02:03:08,490
already know they lost their minds

2140
02:03:02,609 --> 02:03:10,049
Windows 10 is you know is you know an

2141
02:03:08,489 --> 02:03:13,139
operating system written by children so

2142
02:03:10,050 --> 02:03:15,529
I don't know why I'm surprised if that's

2143
02:03:13,140 --> 02:03:18,510
really the case that's nuts

2144
02:03:15,529 --> 02:03:20,719
windows itself should never be sending a

2145
02:03:18,510 --> 02:03:23,039
WM user range message that's crazy

2146
02:03:20,720 --> 02:03:27,750
because other applications may have

2147
02:03:23,039 --> 02:03:31,529
already used that message right that

2148
02:03:27,750 --> 02:03:35,899
could break all sorts of stuff so I

2149
02:03:31,529 --> 02:03:35,899
let's hope that's not really the case

2150
02:03:36,560 --> 02:03:45,000
all right let's let's kill this go go

2151
02:03:41,279 --> 02:03:46,829
away yes stop debugging so if that's

2152
02:03:45,000 --> 02:03:49,260
really the case then I might actually

2153
02:03:46,829 --> 02:03:54,800
say let's filter out message if other

2154
02:03:49,260 --> 02:03:56,960
people are seeing this happen then 738

2155
02:03:54,800 --> 02:03:59,309
should should definitely get filtered

2156
02:03:56,960 --> 02:04:03,448
but the problem is

2157
02:03:59,309 --> 02:04:14,760
that I mean how do we filter it

2158
02:04:03,448 --> 02:04:17,158
effectively right like I mean we can't

2159
02:04:14,760 --> 02:04:21,748
just ignore it forever can we I mean we

2160
02:04:17,158 --> 02:04:24,978
have to remove it from the queue or do

2161
02:04:21,748 --> 02:04:24,978
we just let it pile up

2162
02:04:42,659 --> 02:04:54,069
because we can skip polling it entirely

2163
02:04:45,430 --> 02:05:03,850
right but like WM paint and W mousemove

2164
02:04:54,069 --> 02:05:07,569
we can skip entirely but if this message

2165
02:05:03,850 --> 02:05:10,060
I don't know whether this message is a

2166
02:05:07,569 --> 02:05:12,099
generated message or not if it's a

2167
02:05:10,060 --> 02:05:14,170
generated message then we could skip it

2168
02:05:12,100 --> 02:05:15,220
entirely if it's not a generated message

2169
02:05:14,170 --> 02:05:16,239
I don't know that we can skip entirely

2170
02:05:15,220 --> 02:05:17,890
because I don't know if it would just

2171
02:05:16,238 --> 02:05:26,349
fill up on our thread the whole time

2172
02:05:17,890 --> 02:05:37,989
right so that's kind of right it's kind

2173
02:05:26,350 --> 02:05:40,000
of a little bit tricky so you know if

2174
02:05:37,988 --> 02:05:48,299
you imagine extending this routine out a

2175
02:05:40,000 --> 02:05:48,300
little bit to something that was like

2176
02:05:48,539 --> 02:05:53,939
d-word skipped messages right

2177
02:06:03,859 --> 02:06:09,238
if you imagine a sink here we'll all

2178
02:06:06,779 --> 02:06:10,769
right we want to skip WM paint we want

2179
02:06:09,238 --> 02:06:14,359
to skip WM mass move everyone want to

2180
02:06:10,770 --> 02:06:16,500
skip whatever the heck elect 7 3 8 is

2181
02:06:14,359 --> 02:06:19,469
that's not even a message that's

2182
02:06:16,500 --> 02:06:21,630
supposed to exist then we could do a

2183
02:06:19,470 --> 02:06:23,730
thing here where we do a fryer loop over

2184
02:06:21,630 --> 02:06:25,770
like skip index equals zero you know

2185
02:06:23,729 --> 02:06:31,529
skip the next yields rate count skip

2186
02:06:25,770 --> 02:06:40,040
messages plus plus skip index like so

2187
02:06:31,529 --> 02:06:42,988
and then we would just do this right

2188
02:06:40,039 --> 02:06:43,590
we're each time through we would say all

2189
02:06:42,988 --> 02:06:46,439
right

2190
02:06:43,590 --> 02:06:51,539
like we we're gonna start the messages

2191
02:06:46,439 --> 02:06:53,579
at like last message equals zero or

2192
02:06:51,539 --> 02:07:03,300
something we're gonna start the messages

2193
02:06:53,579 --> 02:07:06,029
I at last message we're gonna go to you

2194
02:07:03,300 --> 02:07:09,779
know skip minus one and then we're gonna

2195
02:07:06,029 --> 02:07:13,829
skip stack that set last message equal

2196
02:07:09,779 --> 02:07:22,710
to skip plus 1 so it will hop over every

2197
02:07:13,829 --> 02:07:29,309
time whatever that thing was right seems

2198
02:07:22,710 --> 02:07:35,130
reasonable enough and you know we I

2199
02:07:29,310 --> 02:07:39,180
guess we end on that it'll kind of it'll

2200
02:07:35,130 --> 02:07:40,069
end at FF FF FF FF D but I'm ok with

2201
02:07:39,180 --> 02:07:44,610
that

2202
02:07:40,069 --> 02:07:46,649
if that makes sense so yeah I think that

2203
02:07:44,609 --> 02:07:50,460
would be fine the other way we could do

2204
02:07:46,649 --> 02:07:54,569
it is via ranges which maybe is better I

2205
02:07:50,460 --> 02:07:57,930
don't know but whatever so anyway in

2206
02:07:54,569 --> 02:08:00,090
here when we're doing this yeah we could

2207
02:07:57,930 --> 02:08:03,000
just get rid of all of this code now and

2208
02:08:00,090 --> 02:08:05,699
it would just look like this so we would

2209
02:08:03,000 --> 02:08:08,550
go through and try each of the ranges as

2210
02:08:05,699 --> 02:08:11,219
we go and that skip message is obviously

2211
02:08:08,550 --> 02:08:15,230
just like skip messages skip index like

2212
02:08:11,219 --> 02:08:15,230
so right

2213
02:08:15,270 --> 02:08:26,030
so that would skip message 738 entirely

2214
02:08:21,119 --> 02:08:26,029
so it just doesn't ever get there and

2215
02:08:29,149 --> 02:08:33,299
yeah I think that's fine

2216
02:08:31,170 --> 02:08:37,829
this is complaining that we might not

2217
02:08:33,300 --> 02:08:40,079
initialize this but we will I mean and I

2218
02:08:37,829 --> 02:08:43,199
actually I'm not sure why static

2219
02:08:40,079 --> 02:08:45,059
analysis can't figure that out because

2220
02:08:43,199 --> 02:08:47,779
it should be able to see that you always

2221
02:08:45,060 --> 02:08:50,100
get in here this is a constant value

2222
02:08:47,779 --> 02:08:51,300
certain the static analysis and the

2223
02:08:50,100 --> 02:08:55,590
compiler must not be able to poke

2224
02:08:51,300 --> 02:09:03,480
through that for loop which is fine on

2225
02:08:55,590 --> 02:09:10,940
I'll clear it so now in theory anyway

2226
02:09:03,479 --> 02:09:17,899
in the vaguest of theories if I run this

2227
02:09:10,939 --> 02:09:22,069
I should be able to put this back in

2228
02:09:17,899 --> 02:09:25,188
actually so now if I run

2229
02:09:22,069 --> 02:09:25,188
[Music]

2230
02:09:30,389 --> 02:09:37,800
and here we are running I if I do

2231
02:09:35,368 --> 02:09:44,029
lighting and then switch back and do

2232
02:09:37,800 --> 02:09:44,029
this stuff I don't crash anymore right

2233
02:09:55,039 --> 02:09:59,269
so there I've run the lighting I can

2234
02:09:56,960 --> 02:10:01,789
come back here I can say hey possum

2235
02:09:59,270 --> 02:10:03,950
capture frame and all that works so it

2236
02:10:01,789 --> 02:10:06,800
looks like yeah we can just skip that

2237
02:10:03,949 --> 02:10:08,239
message probably and then and we don't

2238
02:10:06,800 --> 02:10:09,949
have to care if windows start spamming

2239
02:10:08,239 --> 02:10:11,510
us with it for some reason maybe it's a

2240
02:10:09,949 --> 02:10:23,420
generative message maybe it isn't I

2241
02:10:11,510 --> 02:10:25,329
don't know I mean that's just like yeah

2242
02:10:23,420 --> 02:10:32,480
I don't want to say about that

2243
02:10:25,329 --> 02:10:33,170
I guess there's one other thing we could

2244
02:10:32,479 --> 02:10:35,869
do

2245
02:10:33,170 --> 02:10:39,859
yeah I'm not gonna do it though all

2246
02:10:35,869 --> 02:10:45,819
right so let's go back to let me let me

2247
02:10:39,859 --> 02:10:45,819
see about questions

2248
02:10:53,908 --> 02:11:03,158
and there's another someone else posted

2249
02:10:56,590 --> 02:11:11,739
an additional looks like the same info

2250
02:11:03,158 --> 02:11:13,328
though alright so that was a kind of

2251
02:11:11,738 --> 02:11:26,709
frustrating thing to have to do but at

2252
02:11:13,328 --> 02:11:28,268
least it actually worked so you know at

2253
02:11:26,710 --> 02:11:29,980
the end of the day I guess that is a

2254
02:11:28,269 --> 02:11:31,119
good thing I'm not gonna complain we

2255
02:11:29,979 --> 02:11:33,729
were able to figure out what was going

2256
02:11:31,118 --> 02:11:37,868
on it was pretty bizarre but you know

2257
02:11:33,729 --> 02:11:44,288
there there you are of it so if you take

2258
02:11:37,868 --> 02:11:46,630
a look here at at our rendering

2259
02:11:44,288 --> 02:11:48,069
information we can now start to ask the

2260
02:11:46,630 --> 02:11:51,010
questions that I actually wanted to like

2261
02:11:48,069 --> 02:11:53,380
here's the fragment shader for example

2262
02:11:51,010 --> 02:11:55,150
and we can look up stuff like you know

2263
02:11:53,380 --> 02:11:57,219
the look up sampler or whatever we can

2264
02:11:55,149 --> 02:12:00,969
kind of go in here and see what the

2265
02:11:57,219 --> 02:12:02,158
value actually is what the values are

2266
02:12:00,969 --> 02:12:04,359
for these things

2267
02:12:02,158 --> 02:12:08,948
right now we have them commented out

2268
02:12:04,359 --> 02:12:10,929
because I had tested that to see if that

2269
02:12:08,948 --> 02:12:11,979
would help which it you know turned out

2270
02:12:10,929 --> 02:12:15,819
tonight everything do oh no buddy don't

2271
02:12:11,979 --> 02:12:17,259
turkey time today so at least in theory

2272
02:12:15,819 --> 02:12:18,719
now that we kind of got all that craft

2273
02:12:17,260 --> 02:12:21,010
out of the way and figured out what

2274
02:12:18,719 --> 02:12:23,550
Windows 10 was doing to destroy our

2275
02:12:21,010 --> 02:12:23,550
application

2276
02:12:31,859 --> 02:12:36,069
what just happened there why did that

2277
02:12:34,649 --> 02:12:45,250
here we go

2278
02:12:36,069 --> 02:12:47,889
paste please thank you it would be nice

2279
02:12:45,250 --> 02:12:54,640
to know why Windows has started sending

2280
02:12:47,890 --> 02:13:00,310
a 738 and X 738 message I mean that's

2281
02:12:54,640 --> 02:13:02,440
just totally effed up but at least we

2282
02:13:00,310 --> 02:13:04,420
fix it so I guess tomorrow will be

2283
02:13:02,439 --> 02:13:08,079
cleared to actually debug our lighting

2284
02:13:04,420 --> 02:13:09,250
like we wanted to and we got rid of the

2285
02:13:08,079 --> 02:13:10,750
thing that was standing in our way we

2286
02:13:09,250 --> 02:13:13,029
got rid of render dock unfortunately

2287
02:13:10,750 --> 02:13:16,238
that didn't work insight does appear to

2288
02:13:13,029 --> 02:13:17,380
be working so we can that and we got rid

2289
02:13:16,238 --> 02:13:19,988
of the Windows 10 thing that was

2290
02:13:17,380 --> 02:13:22,029
preventing it from working so we should

2291
02:13:19,988 --> 02:13:29,500
be good to go so I guess I'll end the

2292
02:13:22,029 --> 02:13:33,369
stream there other issue what do you

2293
02:13:29,500 --> 02:13:35,409
mean by generated message so this is

2294
02:13:33,369 --> 02:13:38,199
kind of a confusing aspect of Windows

2295
02:13:35,409 --> 02:13:42,149
but what happens is when you call peak

2296
02:13:38,199 --> 02:13:45,250
message and get message right the

2297
02:13:42,149 --> 02:13:47,559
intended behavior of those functions is

2298
02:13:45,250 --> 02:13:49,779
that there's a message queue for your

2299
02:13:47,560 --> 02:13:53,770
application in Windows and it's per

2300
02:13:49,779 --> 02:13:55,929
thread usually so whenever you're

2301
02:13:53,770 --> 02:13:59,440
whatever thread you're on when you call

2302
02:13:55,930 --> 02:14:01,390
the functions to check messages it looks

2303
02:13:59,439 --> 02:14:03,279
at the message queue the for that thread

2304
02:14:01,390 --> 02:14:06,160
and if there is a message waiting in the

2305
02:14:03,279 --> 02:14:08,409
queue you get the message back right and

2306
02:14:06,159 --> 02:14:10,359
that's that's exactly right that's what

2307
02:14:08,409 --> 02:14:15,279
you would expect nothing weird about

2308
02:14:10,359 --> 02:14:17,019
that but that is only for certain kinds

2309
02:14:15,279 --> 02:14:20,170
of window messages the majority of

2310
02:14:17,020 --> 02:14:22,120
window messages first other special

2311
02:14:20,170 --> 02:14:26,140
kinds of window messages such as paint

2312
02:14:22,119 --> 02:14:30,579
and mouse move instead of that what it

2313
02:14:26,140 --> 02:14:32,440
does is if you ever ask for one meaning

2314
02:14:30,579 --> 02:14:34,359
if when you call peek message and you

2315
02:14:32,439 --> 02:14:37,479
pass the range and the range includes

2316
02:14:34,359 --> 02:14:40,420
paint or mouse move if there are no

2317
02:14:37,479 --> 02:14:42,638
messages in your queue to give you so if

2318
02:14:40,420 --> 02:14:44,859
there's enough

2319
02:14:42,639 --> 02:14:47,649
is nothing actually in the queue that

2320
02:14:44,859 --> 02:14:51,578
someone has posted like a WM size

2321
02:14:47,649 --> 02:14:53,559
message or something then it will

2322
02:14:51,578 --> 02:14:56,948
generate a paint and a mouse move

2323
02:14:53,559 --> 02:15:00,668
message for you right so it will

2324
02:14:56,948 --> 02:15:06,698
basically create them to tell you you

2325
02:15:00,668 --> 02:15:08,828
need them if the mouse has moved or your

2326
02:15:06,698 --> 02:15:11,228
your window has been obscured and needs

2327
02:15:08,828 --> 02:15:15,578
to be repainted it will generate them on

2328
02:15:11,229 --> 02:15:17,769
the fly now we don't use WM paint or WM

2329
02:15:15,578 --> 02:15:21,429
Mouse move so we don't actually want it

2330
02:15:17,769 --> 02:15:24,880
to generate them so we just say don't

2331
02:15:21,429 --> 02:15:26,979
bother right because it's just wasting

2332
02:15:24,880 --> 02:15:28,859
work and causing this loop to have to go

2333
02:15:26,979 --> 02:15:36,789
around a bunch more times potentially

2334
02:15:28,859 --> 02:15:38,529
when we really don't want to uplink

2335
02:15:36,788 --> 02:15:44,158
coder says this seems to be a known bug

2336
02:15:38,529 --> 02:15:45,429
since Windows 10 build 1703 how is that

2337
02:15:44,158 --> 02:15:48,009
possible

2338
02:15:45,429 --> 02:15:50,219
what were they doing posting a Windows

2339
02:15:48,010 --> 02:15:53,010
message that's in the WM user range

2340
02:15:50,219 --> 02:16:00,010
that's nuts

2341
02:15:53,010 --> 02:16:06,699
that's nuts Raymond where is Raymond

2342
02:16:00,010 --> 02:16:10,329
Chen Raymond Chen what is Oh X 738 tell

2343
02:16:06,698 --> 02:16:13,238
me why is Windows posting Oh X 7 3 8

2344
02:16:10,328 --> 02:16:20,458
messages to applications that's in the

2345
02:16:13,238 --> 02:16:20,458
WM user range Raymond what is going on

2346
02:16:22,529 --> 02:16:26,859
how is the performance of the from

2347
02:16:24,880 --> 02:16:28,538
scratch written render compared to

2348
02:16:26,859 --> 02:16:30,908
OpenGL we haven't updated the from

2349
02:16:28,538 --> 02:16:33,068
scratch renderer yet to do 3d so it

2350
02:16:30,908 --> 02:16:33,968
still runs the old 2d path so we don't

2351
02:16:33,068 --> 02:16:38,829
have a way to compare the performance

2352
02:16:33,968 --> 02:16:41,978
yet how in for coder you make possible

2353
02:16:38,829 --> 02:16:46,988
to have type def highlight irie compiled

2354
02:16:41,978 --> 02:16:48,849
it from source I actually we licensed

2355
02:16:46,988 --> 02:16:51,010
the source code to for for code or from

2356
02:16:48,849 --> 02:16:53,769
alan since it's the editor we use it

2357
02:16:51,010 --> 02:16:56,170
Molly for everything so we can just

2358
02:16:53,769 --> 02:16:57,519
rebuild it if we need to

2359
02:16:56,170 --> 02:16:58,808
I don't know if there's a way to do it

2360
02:16:57,519 --> 02:17:00,309
other than that there might be there's

2361
02:16:58,808 --> 02:17:03,518
there might be keyword highlighting but

2362
02:17:00,308 --> 02:17:06,239
at the time there wasn't programmable

2363
02:17:03,519 --> 02:17:06,239
keyword highlighting

2364
02:17:15,968 --> 02:17:26,598
let's see if got any more questions

2365
02:17:18,379 --> 02:17:27,948
about what we're doing today crab this

2366
02:17:26,599 --> 02:17:29,540
has been answered many times I'll dig

2367
02:17:27,949 --> 02:17:31,189
back through YouTube but when why did

2368
02:17:29,540 --> 02:17:34,460
HMH move from being fully software in a

2369
02:17:31,189 --> 02:17:37,398
product using graphs api's so i don't

2370
02:17:34,459 --> 02:17:39,409
remember why but i think it was just

2371
02:17:37,398 --> 02:17:43,129
because we wanted to be able to do more

2372
02:17:39,409 --> 02:17:44,420
like high res rendering and and be able

2373
02:17:43,129 --> 02:17:46,058
to use them any sprites as we want and

2374
02:17:44,420 --> 02:17:51,318
not have to care and stuff like that so

2375
02:17:46,058 --> 02:17:53,148
we at some point we just did both so you

2376
02:17:51,318 --> 02:17:55,369
could switch between them we've added

2377
02:17:53,148 --> 02:17:56,388
some 3d stuff now which our 2d path

2378
02:17:55,370 --> 02:17:58,880
doesn't know about

2379
02:17:56,388 --> 02:18:00,858
so we'll ping-pong back there at some

2380
02:17:58,879 --> 02:18:05,058
point and update it so that the software

2381
02:18:00,859 --> 02:18:10,250
render version will match the 3d the

2382
02:18:05,058 --> 02:18:12,920
harbor under version as well so in the

2383
02:18:10,250 --> 02:18:15,558
end we will run on both as equivalently

2384
02:18:12,920 --> 02:18:16,699
the only difference will be that the you

2385
02:18:15,558 --> 02:18:20,840
know software renderer is always gonna

2386
02:18:16,699 --> 02:18:23,179
be much slower I in compared to the

2387
02:18:20,840 --> 02:18:25,760
hardware render peak you know that's

2388
02:18:23,179 --> 02:18:33,290
obvious right cuz it's not able to use

2389
02:18:25,760 --> 02:18:34,579
the most of the power on the machine and

2390
02:18:33,290 --> 02:18:36,559
she has to run the game with the letting

2391
02:18:34,579 --> 02:18:38,738
actually on just roll time sake no not

2392
02:18:36,558 --> 02:18:40,938
till we've fixed the new one

2393
02:18:38,738 --> 02:18:46,429
how would you cast a pointer and call it

2394
02:18:40,939 --> 02:18:48,469
directly with that an extra type - how

2395
02:18:46,429 --> 02:18:54,228
would you cast a pointer and call it

2396
02:18:48,468 --> 02:18:55,428
directly without an extra type death are

2397
02:18:54,228 --> 02:19:05,448
you talking we talk about like a

2398
02:18:55,429 --> 02:19:06,349
function pointer so I'm not sure I'm not

2399
02:19:05,449 --> 02:19:07,880
sure that what you're asking but I'll

2400
02:19:06,349 --> 02:19:10,639
try to answer it

2401
02:19:07,879 --> 02:19:11,089
so here it I'll just make one right here

2402
02:19:10,638 --> 02:19:14,299
right

2403
02:19:11,090 --> 02:19:17,659
so I think what you're saying is let's

2404
02:19:14,299 --> 02:19:19,909
suppose that I had a function correct me

2405
02:19:17,659 --> 02:19:24,199
if I'm wrong let's suppose that I had a

2406
02:19:19,909 --> 02:19:26,058
function like this is this what we're

2407
02:19:24,199 --> 02:19:27,219
talking about and you want to call this

2408
02:19:26,058 --> 02:19:38,438
function

2409
02:19:27,218 --> 02:19:40,808
I so is this what we're talking about

2410
02:19:38,439 --> 02:19:46,260
and then you have a thing that's like oh

2411
02:19:40,808 --> 02:19:46,259
okay I've got a void star let's say

2412
02:19:46,738 --> 02:19:52,000
that's a pointer to that function is

2413
02:19:49,750 --> 02:19:54,549
that is that roughly what we're talking

2414
02:19:52,000 --> 02:19:56,379
about so you've got this situation and

2415
02:19:54,549 --> 02:19:59,500
you want to know how you call it

2416
02:19:56,379 --> 02:20:01,269
without making any kind of type def so

2417
02:19:59,500 --> 02:20:06,129
you want to do something where you're

2418
02:20:01,270 --> 02:20:08,140
gonna call like food pointer five is

2419
02:20:06,129 --> 02:20:09,398
this is this what you're trying to do

2420
02:20:08,139 --> 02:20:11,709
and then it'll you know it says though I

2421
02:20:09,398 --> 02:20:20,079
can't I don't know how to do that is

2422
02:20:11,709 --> 02:20:22,238
that what we're talking about or santak

2423
02:20:20,079 --> 02:20:23,620
how about 2d house prints they're just

2424
02:20:22,238 --> 02:20:24,670
go back and look we there's a whole

2425
02:20:23,620 --> 02:20:26,350
bunch of streams where we were doing

2426
02:20:24,670 --> 02:20:28,210
that we we didn't do like a fully

2427
02:20:26,350 --> 02:20:30,720
optimized one but it you know it ran

2428
02:20:28,209 --> 02:20:30,719
reasonably

2429
02:20:36,549 --> 02:20:41,409
okay yeah so so this is what he wants to

2430
02:20:39,129 --> 02:20:43,929
know about all right so if you want to

2431
02:20:41,409 --> 02:20:48,719
do this it's really kind of difficult to

2432
02:20:43,930 --> 02:20:53,729
do because the the this is where the C

2433
02:20:48,719 --> 02:20:56,789
the C way that they use declarations is

2434
02:20:53,728 --> 02:20:59,590
just very counterintuitive and difficult

2435
02:20:56,790 --> 02:21:04,090
but the basic idea right the way you

2436
02:20:59,590 --> 02:21:06,250
would do it like start this way so

2437
02:21:04,090 --> 02:21:09,280
suppose you did have the type def the

2438
02:21:06,250 --> 02:21:10,780
thing that you don't want right the

2439
02:21:09,280 --> 02:21:11,380
thing that you don't want looks like

2440
02:21:10,780 --> 02:21:13,750
that

2441
02:21:11,379 --> 02:21:19,149
correct so if I wanted to be able to

2442
02:21:13,750 --> 02:21:22,600
call this without having to worry about

2443
02:21:19,149 --> 02:21:24,539
like without your constraint then what I

2444
02:21:22,600 --> 02:21:29,200
need to do here is I need to cast it

2445
02:21:24,540 --> 02:21:31,720
inside the parentheses here right so

2446
02:21:29,200 --> 02:21:35,320
before it tries to use it as a function

2447
02:21:31,719 --> 02:21:37,569
I need to cast it in here right

2448
02:21:35,319 --> 02:21:43,989
but that will work right and we can

2449
02:21:37,569 --> 02:21:52,389
verify that that will work because I can

2450
02:21:43,989 --> 02:21:55,510
actually make it happen here right so

2451
02:21:52,389 --> 02:21:56,889
we're definitely calling it so now the

2452
02:21:55,510 --> 02:21:58,719
question is well what if I want to get

2453
02:21:56,889 --> 02:22:00,849
rid of this type def well what I would

2454
02:21:58,719 --> 02:22:03,340
need to do here is I need to figure out

2455
02:22:00,850 --> 02:22:06,550
a way to put the information from the

2456
02:22:03,340 --> 02:22:09,819
type def which is effectively this right

2457
02:22:06,549 --> 02:22:14,978
in here so what I'd like to be able to

2458
02:22:09,819 --> 02:22:16,779
do is that right but it's not quite

2459
02:22:14,978 --> 02:22:21,489
right because if you look at what

2460
02:22:16,780 --> 02:22:24,280
happens here it's like all right the the

2461
02:22:21,489 --> 02:22:25,750
the way this is gonna get read is gonna

2462
02:22:24,280 --> 02:22:32,130
get read in the wrong order

2463
02:22:25,750 --> 02:22:34,959
right foo pointer is Right a pointer to

2464
02:22:32,129 --> 02:22:38,799
function taking an integer returning a

2465
02:22:34,959 --> 02:22:40,059
void or sort of like well not really

2466
02:22:38,799 --> 02:22:42,369
because it's gonna read it in the

2467
02:22:40,059 --> 02:22:45,369
opposite direction so like you know

2468
02:22:42,370 --> 02:22:49,030
doing it exactly that way is doesn't

2469
02:22:45,370 --> 02:22:52,141
actually work right because of the low

2470
02:22:49,030 --> 02:22:57,820
of the of the see order where the

2471
02:22:52,140 --> 02:23:01,931
parenthetical for the argument list not

2472
02:22:57,819 --> 02:23:05,500
try to say this it goes in the other

2473
02:23:01,931 --> 02:23:08,771
place from where the type from where the

2474
02:23:05,500 --> 02:23:11,979
type name is I'm not saying that very

2475
02:23:08,771 --> 02:23:16,329
well but like right I mean it goes it

2476
02:23:11,979 --> 02:23:18,789
goes after the the type name instead of

2477
02:23:16,329 --> 02:23:21,899
before so the pointer part you know

2478
02:23:18,790 --> 02:23:24,790
would have to go would have to have like

2479
02:23:21,899 --> 02:23:31,709
the the argument part has to go after it

2480
02:23:24,790 --> 02:23:34,990
right how you actually make it

2481
02:23:31,709 --> 02:23:37,810
understand the how you actually make it

2482
02:23:34,989 --> 02:23:39,310
do the cast I'm not sure because as you

2483
02:23:37,810 --> 02:23:44,440
can see like I believe this is the

2484
02:23:39,310 --> 02:23:55,181
correct form right but it doesn't

2485
02:23:44,440 --> 02:23:57,460
actually allow you to do it so yeah so

2486
02:23:55,181 --> 02:24:00,521
basically this is this is the form for a

2487
02:23:57,459 --> 02:24:02,020
function type right and we need a

2488
02:24:00,521 --> 02:24:04,601
pointer to a function type so what it

2489
02:24:02,021 --> 02:24:08,409
read here was like void star returning a

2490
02:24:04,601 --> 02:24:10,721
void star an integer by parenthetical

2491
02:24:08,409 --> 02:24:13,869
izing that I forced it to read the star

2492
02:24:10,720 --> 02:24:16,000
first so it goes like pointer to a

2493
02:24:13,870 --> 02:24:18,730
function taking an integer returning a

2494
02:24:16,000 --> 02:24:22,440
void because it's inside another set of

2495
02:24:18,729 --> 02:24:22,439
parentheses I know this is really weird

2496
02:24:22,560 --> 02:24:32,709
but you can kind of imagine that it's

2497
02:24:27,610 --> 02:24:35,710
reading an invisible identifier name

2498
02:24:32,709 --> 02:24:40,859
inside the inner most set of parentheses

2499
02:24:35,709 --> 02:24:40,859
I guess is the best way to say it so

2500
02:24:42,859 --> 02:24:51,189
sorry I'm doing such a bad job

2501
02:24:44,209 --> 02:24:54,020
explaining this let me do it from the

2502
02:24:51,189 --> 02:24:56,779
let me do it two ways and see if that

2503
02:24:54,020 --> 02:24:58,399
helps make it clear maybe that was

2504
02:24:56,779 --> 02:25:02,408
already clear but I doubt it was just

2505
02:24:58,398 --> 02:25:02,408
because it was really confusing so

2506
02:25:03,398 --> 02:25:07,939
what's going to happen inside the C

2507
02:25:06,439 --> 02:25:11,720
compiler is it's going to make an

2508
02:25:07,939 --> 02:25:22,668
abstract syntax tree that describes what

2509
02:25:11,719 --> 02:25:24,818
the heck is going on here right so so

2510
02:25:22,668 --> 02:25:30,309
inside the compiler somewhere here's my

2511
02:25:24,818 --> 02:25:30,309
Milton Ness what day are we on for a six

2512
02:25:42,629 --> 02:25:46,858
so inside the compiler it's gonna have

2513
02:25:44,549 --> 02:25:49,259
to make an address in Czech Street and

2514
02:25:46,859 --> 02:25:53,040
so you know objects abstract syntax

2515
02:25:49,260 --> 02:25:54,840
trees have a binary descending notion to

2516
02:25:53,040 --> 02:25:57,840
them that makes them different from a

2517
02:25:54,840 --> 02:25:59,068
left-to-right reading order right and so

2518
02:25:57,840 --> 02:26:00,960
it's worth thinking about this just for

2519
02:25:59,068 --> 02:26:01,859
a second because this is why these sorts

2520
02:26:00,959 --> 02:26:03,509
of things come up

2521
02:26:01,859 --> 02:26:05,010
the reason these sorts of things come up

2522
02:26:03,510 --> 02:26:06,870
and see in other languages as well

2523
02:26:05,010 --> 02:26:09,359
is because there's a fundamental

2524
02:26:06,870 --> 02:26:11,699
difference between a linear line of text

2525
02:26:09,359 --> 02:26:13,079
and how a compiler ends up interpreting

2526
02:26:11,699 --> 02:26:15,060
that linear line of text when it

2527
02:26:13,079 --> 02:26:16,559
actually goes to process it semantically

2528
02:26:15,059 --> 02:26:18,420
okay

2529
02:26:16,559 --> 02:26:21,119
and so you can think about operator

2530
02:26:18,420 --> 02:26:23,579
precedence as a very common way in which

2531
02:26:21,120 --> 02:26:28,340
this happens so for example you may see

2532
02:26:23,579 --> 02:26:28,340
a linear line of text that is a plus B

2533
02:26:28,488 --> 02:26:37,469
times C plus D right and if you were to

2534
02:26:34,770 --> 02:26:39,210
look at this as a line of text then the

2535
02:26:37,469 --> 02:26:41,909
order of operations that you would

2536
02:26:39,209 --> 02:26:47,278
perform is very clear it would be to

2537
02:26:41,909 --> 02:26:49,920
take a right and add B to it right I

2538
02:26:47,279 --> 02:26:52,350
would then take the sum of this which is

2539
02:26:49,920 --> 02:26:56,430
like a plus B right I produce the result

2540
02:26:52,350 --> 02:26:59,550
then I would multiply by C right so now

2541
02:26:56,430 --> 02:27:07,409
I've got C times a plus B and then I

2542
02:26:59,549 --> 02:27:09,238
would add D to it right so that's what I

2543
02:27:07,409 --> 02:27:11,430
would actually end up with if I was

2544
02:27:09,238 --> 02:27:13,379
interpreting this as just a stream of

2545
02:27:11,430 --> 02:27:16,920
things going from left to right I would

2546
02:27:13,379 --> 02:27:18,358
do a plus B that's a value times C just

2547
02:27:16,920 --> 02:27:21,210
like I was hitting them on calculator

2548
02:27:18,359 --> 02:27:23,100
buttons so it does the a plus B first

2549
02:27:21,209 --> 02:27:27,299
then it does the time C then it does the

2550
02:27:23,100 --> 02:27:28,829
plus D right but that's not how the

2551
02:27:27,299 --> 02:27:31,170
compiler wants to do it because it's

2552
02:27:28,829 --> 02:27:32,699
trying to imitate how math is notated so

2553
02:27:31,170 --> 02:27:36,059
we all know that there's like an

2554
02:27:32,699 --> 02:27:38,250
implicit idea that multiplication will

2555
02:27:36,059 --> 02:27:41,250
happen first and then plus will happen

2556
02:27:38,250 --> 02:27:42,719
because that's the math way right so

2557
02:27:41,250 --> 02:27:45,988
instead what happens is when the

2558
02:27:42,719 --> 02:27:47,818
compiler parses this it uses the what

2559
02:27:45,988 --> 02:27:51,920
it's called operator precedence which is

2560
02:27:47,818 --> 02:27:54,750
which operators bind together first to

2561
02:27:51,920 --> 02:27:55,950
create a different look for this

2562
02:27:54,750 --> 02:27:58,020
expression

2563
02:27:55,950 --> 02:27:59,579
and there's two ways that a compiler

2564
02:27:58,020 --> 02:28:01,979
could do this it doesn't have to do with

2565
02:27:59,579 --> 02:28:03,689
an abstract syntax tree which I'll talk

2566
02:28:01,978 --> 02:28:07,289
about a second you can actually do this

2567
02:28:03,689 --> 02:28:09,899
with just straight up stack parsing

2568
02:28:07,290 --> 02:28:12,090
right it can do something by saying well

2569
02:28:09,899 --> 02:28:16,409
I've got an A and I've got a plus right

2570
02:28:12,090 --> 02:28:20,909
I know that a plus can might be a high

2571
02:28:16,409 --> 02:28:23,489
precedence a plus might be an operator

2572
02:28:20,909 --> 02:28:26,069
that happens after certain other tighter

2573
02:28:23,489 --> 02:28:28,260
binding operators like times so what I'm

2574
02:28:26,069 --> 02:28:30,959
gonna do is I'm just gonna push like a +

2575
02:28:28,260 --> 02:28:33,030
+ on a stack and then I'm gonna see what

2576
02:28:30,959 --> 02:28:36,209
comes next and I got a B and then I get

2577
02:28:33,030 --> 02:28:37,229
a times and a C and on the stack I then

2578
02:28:36,209 --> 02:28:40,259
say oh okay

2579
02:28:37,228 --> 02:28:41,309
C times B is like a totally fine

2580
02:28:40,260 --> 02:28:42,989
operation for me to perform because

2581
02:28:41,309 --> 02:28:45,329
there's nothing that can happen that's

2582
02:28:42,989 --> 02:28:47,819
tighter binding them at let's say so

2583
02:28:45,329 --> 02:28:51,030
then I just compute that and then leave

2584
02:28:47,819 --> 02:28:53,939
the new result of that like B times C on

2585
02:28:51,030 --> 02:28:56,400
the stack right then I see the plus

2586
02:28:53,939 --> 02:28:58,770
which I push again and I'm like oh this

2587
02:28:56,399 --> 02:29:00,270
plus in fact you know you could even

2588
02:28:58,770 --> 02:29:02,010
think of this as the more general case

2589
02:29:00,270 --> 02:29:04,380
where you don't have to make it about

2590
02:29:02,010 --> 02:29:04,770
anything I just push be x + C on the

2591
02:29:04,379 --> 02:29:08,159
stack

2592
02:29:04,770 --> 02:29:10,350
I see the plus I know this plus is a

2593
02:29:08,159 --> 02:29:11,789
higher precedence than this x or I

2594
02:29:10,350 --> 02:29:12,840
should say lower precedence and the

2595
02:29:11,790 --> 02:29:15,660
times it depends on how you want to

2596
02:29:12,840 --> 02:29:19,739
define your precedents there it's looser

2597
02:29:15,659 --> 02:29:24,600
binding so then I can go back and say

2598
02:29:19,739 --> 02:29:27,719
anything that was previously you know

2599
02:29:24,600 --> 02:29:31,649
less you know a tighter binding me can

2600
02:29:27,719 --> 02:29:32,639
now get collapsed right so we can do

2601
02:29:31,649 --> 02:29:34,529
things like that

2602
02:29:32,639 --> 02:29:36,500
you know it can it can have sort of a

2603
02:29:34,530 --> 02:29:39,000
stack logic to it like that's where like

2604
02:29:36,500 --> 02:29:40,889
and if you ever heard of shunting yard

2605
02:29:39,000 --> 02:29:43,469
came up on the stream one time I'd

2606
02:29:40,889 --> 02:29:44,639
actually never use this algorithm but

2607
02:29:43,469 --> 02:29:50,750
it's kind of neat it's a Dijkstra

2608
02:29:44,639 --> 02:29:53,309
algorithm that actually just like

2609
02:29:50,750 --> 02:29:55,020
processes in order you don't have to

2610
02:29:53,309 --> 02:29:57,090
build a tree you can build a tree if you

2611
02:29:55,020 --> 02:29:59,880
wanted to but it can just process it

2612
02:29:57,090 --> 02:30:02,040
expressions in order and it knows when

2613
02:29:59,879 --> 02:30:06,899
to collapse each precedence based on

2614
02:30:02,040 --> 02:30:09,930
what it sees right but anyway the point

2615
02:30:06,899 --> 02:30:11,520
is at some point usually compilers that

2616
02:30:09,930 --> 02:30:13,590
do more comp separations they don't try

2617
02:30:11,520 --> 02:30:15,149
to execute everything in line like that

2618
02:30:13,590 --> 02:30:17,430
what they what they do is they try to

2619
02:30:15,148 --> 02:30:19,288
build a tree that says what's going on

2620
02:30:17,430 --> 02:30:21,658
and what that tree looks like is it

2621
02:30:19,289 --> 02:30:24,359
looks like an order of operations style

2622
02:30:21,658 --> 02:30:26,788
sorting of the information so the most

2623
02:30:24,359 --> 02:30:29,100
high level constructs we have here are

2624
02:30:26,789 --> 02:30:31,619
the pluses so the first plus would be

2625
02:30:29,100 --> 02:30:33,689
here and it would have an a on its left

2626
02:30:31,619 --> 02:30:38,180
and it would have everything else on

2627
02:30:33,689 --> 02:30:40,770
this side on its right right now again

2628
02:30:38,180 --> 02:30:44,130
the most important thing on this side is

2629
02:30:40,770 --> 02:30:46,800
a plus it's the most like coarse-grained

2630
02:30:44,129 --> 02:30:49,498
operator so that will have the B times C

2631
02:30:46,799 --> 02:30:50,788
on this side and the D on this side and

2632
02:30:49,498 --> 02:30:52,648
on this side then we would have the

2633
02:30:50,789 --> 02:30:57,329
times operator and we'd have the B and

2634
02:30:52,648 --> 02:30:59,998
the C right so this expression when a

2635
02:30:57,328 --> 02:31:01,379
compiler looks at it the compiler

2636
02:30:59,998 --> 02:31:03,988
actually looks at it in a very different

2637
02:31:01,379 --> 02:31:05,728
way it's gonna turn it into using this

2638
02:31:03,988 --> 02:31:07,288
operator precedence rules a tree that

2639
02:31:05,728 --> 02:31:08,969
looks like this and then when it's

2640
02:31:07,289 --> 02:31:11,010
thinking about the tree it's actually

2641
02:31:08,969 --> 02:31:12,958
thinking about it like this so when it

2642
02:31:11,010 --> 02:31:15,270
goes to generate code it's gonna say oh

2643
02:31:12,959 --> 02:31:17,640
I've gotta add two things and it's gonna

2644
02:31:15,270 --> 02:31:20,010
look down the two branches to say

2645
02:31:17,639 --> 02:31:21,389
alright I need to prepare what's going

2646
02:31:20,010 --> 02:31:22,889
on the left side and prepare what's

2647
02:31:21,389 --> 02:31:26,849
going on on the right side so that I can

2648
02:31:22,889 --> 02:31:28,948
do my ad right and then it will you know

2649
02:31:26,850 --> 02:31:30,959
progressively go down the tree and wind

2650
02:31:28,949 --> 02:31:32,668
back up so then you end up getting all

2651
02:31:30,959 --> 02:31:36,689
the way down to the times a plus B it

2652
02:31:32,668 --> 02:31:38,609
will create like the mul a B right and

2653
02:31:36,689 --> 02:31:40,859
it's gonna put that into a location that

2654
02:31:38,609 --> 02:31:43,050
the plus can then do right so then it'll

2655
02:31:40,859 --> 02:31:45,090
do an ad whatever this is whatever the

2656
02:31:43,049 --> 02:31:47,908
result was here right it's gonna add

2657
02:31:45,090 --> 02:31:50,639
that the R and the D I'm gonna put that

2658
02:31:47,908 --> 02:31:52,618
in another result right result two or

2659
02:31:50,639 --> 02:31:56,248
whatever and then it's gonna do the add

2660
02:31:52,619 --> 02:31:59,180
of the result two and the a and put that

2661
02:31:56,248 --> 02:32:01,469
in the final result of this tree right

2662
02:31:59,180 --> 02:32:03,568
so it kind of goes down the tree and

2663
02:32:01,469 --> 02:32:05,429
then resolves the tree on the way up

2664
02:32:03,568 --> 02:32:06,840
outputting each of this sort of like

2665
02:32:05,430 --> 02:32:08,309
assembly instructions it will need this

2666
02:32:06,840 --> 02:32:11,180
is not real assembly language obviously

2667
02:32:08,309 --> 02:32:11,180
but you get the idea right

2668
02:32:11,609 --> 02:32:16,649
so the same exact process that happens

2669
02:32:14,879 --> 02:32:19,198
there that hopefully is fairly intuitive

2670
02:32:16,648 --> 02:32:21,629
with the equation how that happens right

2671
02:32:19,199 --> 02:32:23,810
because I have to turn this into a

2672
02:32:21,629 --> 02:32:26,269
linear series of operations on the

2673
02:32:23,809 --> 02:32:28,969
CPU and I need them to go in the order

2674
02:32:26,270 --> 02:32:30,319
the programmer expects if B is time C

2675
02:32:28,969 --> 02:32:32,299
you supposed to happen first I'd better

2676
02:32:30,318 --> 02:32:34,309
not add a and B first I'm gonna get the

2677
02:32:32,299 --> 02:32:35,778
wrong result so it needs to build a tree

2678
02:32:34,309 --> 02:32:38,840
that reflects the correct order of

2679
02:32:35,779 --> 02:32:40,880
operations that same process is

2680
02:32:38,840 --> 02:32:44,180
happening everywhere in the compiler for

2681
02:32:40,879 --> 02:32:46,608
all things not just operator precedence

2682
02:32:44,180 --> 02:32:57,949
so when you see something in the

2683
02:32:46,609 --> 02:33:00,529
compiler like a cast so let's say I see

2684
02:32:57,949 --> 02:33:02,920
something like this I will get something

2685
02:33:00,529 --> 02:33:05,930
that's like okay there's an equals

2686
02:33:02,920 --> 02:33:08,180
operator which is this right here the

2687
02:33:05,930 --> 02:33:11,328
hot them the most granular thing right

2688
02:33:08,180 --> 02:33:13,729
I've got a target of the equals here

2689
02:33:11,328 --> 02:33:17,078
which is a and then I've got a cast

2690
02:33:13,728 --> 02:33:19,760
expression here right cast expression

2691
02:33:17,078 --> 02:33:22,520
the left side of the cast expression is

2692
02:33:19,760 --> 02:33:24,408
the keyword int on the inside of here

2693
02:33:22,520 --> 02:33:27,619
and the right side of the cast

2694
02:33:24,408 --> 02:33:31,010
expression is six point 2f a constant

2695
02:33:27,619 --> 02:33:37,790
right this is a key word this is a

2696
02:33:31,010 --> 02:33:39,920
variable this is a constant right so

2697
02:33:37,790 --> 02:33:41,510
then when it goes to execute this it's

2698
02:33:39,920 --> 02:33:43,879
like okay and actually strong word

2699
02:33:41,510 --> 02:33:45,619
generate code for it it goes okay I know

2700
02:33:43,879 --> 02:33:47,448
you know I've got some information about

2701
02:33:45,619 --> 02:33:49,430
a from up above in the code I know where

2702
02:33:47,449 --> 02:33:52,069
I'm gonna put this okay I've got to do a

2703
02:33:49,430 --> 02:33:54,078
cast it's a constant cast so I can cast

2704
02:33:52,068 --> 02:33:55,039
this maybe just right now inside the

2705
02:33:54,078 --> 02:33:56,389
compiler I don't have to actually

2706
02:33:55,040 --> 02:33:57,770
generate information to cast it right

2707
02:33:56,389 --> 02:33:59,000
and I know I need to cast it to an

2708
02:33:57,770 --> 02:34:00,170
integer I know what an integer is

2709
02:33:59,000 --> 02:34:02,750
because I have a type table tells

2710
02:34:00,170 --> 02:34:06,529
managers a 32-bit value that's signed in

2711
02:34:02,750 --> 02:34:08,029
blah blah blah right so that's what's

2712
02:34:06,529 --> 02:34:10,040
happening okay

2713
02:34:08,029 --> 02:34:11,899
so now we finally get to what we're

2714
02:34:10,040 --> 02:34:15,229
trying to write here and we'll take what

2715
02:34:11,898 --> 02:34:16,608
I wrote the first time and we'll take a

2716
02:34:15,228 --> 02:34:18,978
look at it a little more carefully and

2717
02:34:16,609 --> 02:34:20,750
then we'll look at how I fixed it by

2718
02:34:18,978 --> 02:34:24,228
putting the parentheses in there all

2719
02:34:20,750 --> 02:34:32,379
right so the first thing that I wrote

2720
02:34:24,228 --> 02:34:40,899
was all right I want a void star

2721
02:34:32,379 --> 02:34:40,899
inte all right like that food pointer

2722
02:34:41,890 --> 02:34:48,440
right and this whole thing was inside a

2723
02:34:47,000 --> 02:34:50,780
set of parentheses but we don't really

2724
02:34:48,440 --> 02:34:53,840
care about that because that was just so

2725
02:34:50,780 --> 02:34:55,851
we could call it as a function we really

2726
02:34:53,840 --> 02:34:58,460
care is getting the cat getting it to

2727
02:34:55,851 --> 02:35:01,130
cast to the type of a pointer to a

2728
02:34:58,459 --> 02:35:03,709
function so I wrote that one first and

2729
02:35:01,129 --> 02:35:04,819
this one casts it to an actual function

2730
02:35:03,709 --> 02:35:06,319
which you can't do

2731
02:35:04,819 --> 02:35:07,879
you can only cast a pointers to

2732
02:35:06,319 --> 02:35:08,899
functions you can't cast to a function

2733
02:35:07,879 --> 02:35:14,209
because that would be like this whole

2734
02:35:08,899 --> 02:35:17,299
block of data and write code all right

2735
02:35:14,209 --> 02:35:19,220
so what we know here is because these of

2736
02:35:17,299 --> 02:35:21,020
these parentheses this informs the

2737
02:35:19,220 --> 02:35:23,510
compiler that it has a cast expression

2738
02:35:21,021 --> 02:35:26,120
so these two things become the cast

2739
02:35:23,510 --> 02:35:27,800
expression right so then it needs to

2740
02:35:26,120 --> 02:35:29,601
make sense of both sides of the cast

2741
02:35:27,799 --> 02:35:31,909
expression it's sort of like if I had an

2742
02:35:29,601 --> 02:35:33,950
operator here right a magical operator

2743
02:35:31,909 --> 02:35:42,170
that meant cast I would write it like

2744
02:35:33,950 --> 02:35:44,391
this right and this operator is the cast

2745
02:35:42,170 --> 02:35:46,460
expression but we don't write it that

2746
02:35:44,390 --> 02:35:48,920
way and see because if there isn't an

2747
02:35:46,459 --> 02:35:51,949
operator for cast so instead it's if you

2748
02:35:48,920 --> 02:35:55,489
parenthesize a type name it is a cast

2749
02:35:51,950 --> 02:35:57,440
right so that's what happened this casts

2750
02:35:55,489 --> 02:36:00,199
right so those go away and we just have

2751
02:35:57,440 --> 02:36:01,760
this on the left side and this on the

2752
02:36:00,200 --> 02:36:02,870
right well okay so this is just a

2753
02:36:01,760 --> 02:36:04,970
variable so there's nothing interesting

2754
02:36:02,870 --> 02:36:07,700
here so now the question is what happens

2755
02:36:04,970 --> 02:36:13,369
over here it's got a parse this

2756
02:36:07,700 --> 02:36:16,521
definition somehow right and it has to

2757
02:36:13,370 --> 02:36:20,090
figure out what that means but all it

2758
02:36:16,521 --> 02:36:22,489
sees is a type on one side void star and

2759
02:36:20,090 --> 02:36:26,569
a function parameter list on the other

2760
02:36:22,489 --> 02:36:29,360
side int right so what it thinks is

2761
02:36:26,569 --> 02:36:32,629
going on here is oh okay I'm defining a

2762
02:36:29,360 --> 02:36:35,300
function prototype right and I'm

2763
02:36:32,629 --> 02:36:39,589
defining the parameter list on this side

2764
02:36:35,299 --> 02:36:42,770
right so this is the Paramus which just

2765
02:36:39,590 --> 02:36:44,299
has int in it and no more parameters

2766
02:36:42,771 --> 02:36:45,680
like I would the parameters would chain

2767
02:36:44,299 --> 02:36:48,108
up here if there was comma

2768
02:36:45,680 --> 02:36:50,659
CAIR star or whatever and then it's got

2769
02:36:48,109 --> 02:37:06,380
a return type over on this side right

2770
02:36:50,659 --> 02:37:12,680
and that is a pointer that is a pointer

2771
02:37:06,379 --> 02:37:16,278
to there's only one print for a pointer

2772
02:37:12,680 --> 02:37:20,479
to avoid right so it's function pointer

2773
02:37:16,279 --> 02:37:25,100
here to avoid so what it sees would we

2774
02:37:20,478 --> 02:37:27,948
go to cast this is it sees that this

2775
02:37:25,100 --> 02:37:30,559
left side is completely you know it's

2776
02:37:27,949 --> 02:37:32,600
just a line of type information so it's

2777
02:37:30,559 --> 02:37:35,059
just gonna take it in order right from

2778
02:37:32,600 --> 02:37:37,068
its gonna read it basically this way and

2779
02:37:35,059 --> 02:37:38,659
it's gonna say you know pointer to avoid

2780
02:37:37,068 --> 02:37:41,148
and that's so it's like okay that's the

2781
02:37:38,659 --> 02:37:43,129
return value and when it sees this

2782
02:37:41,148 --> 02:37:45,079
integer here it's gonna say oh okay

2783
02:37:43,129 --> 02:37:46,188
that's the paramus cuz it's what it sees

2784
02:37:45,079 --> 02:37:47,629
the parentheses I should say it's gonna

2785
02:37:46,189 --> 02:37:50,930
be that's the pram list it's gonna read

2786
02:37:47,629 --> 02:37:54,379
it out right so that's what its gonna

2787
02:37:50,930 --> 02:37:57,500
think however if you introduce a

2788
02:37:54,379 --> 02:37:59,869
parenthetical there right so how I fixed

2789
02:37:57,500 --> 02:38:05,959
that function right was I said oh okay

2790
02:37:59,870 --> 02:38:08,779
void star int right then what's gonna

2791
02:38:05,959 --> 02:38:13,639
happen is because it builds these from

2792
02:38:08,779 --> 02:38:17,180
the innermost part out right from the

2793
02:38:13,639 --> 02:38:19,278
innermost part out and I really left one

2794
02:38:17,180 --> 02:38:21,920
part out here that again it's hard

2795
02:38:19,279 --> 02:38:24,140
because C++ and C and C++ just use this

2796
02:38:21,920 --> 02:38:26,840
syntax very difficult to grok there's

2797
02:38:24,139 --> 02:38:29,689
remember how I said oh you know permit

2798
02:38:26,840 --> 02:38:31,790
this parenthetical is an implicit lis

2799
02:38:29,689 --> 02:38:33,380
like I wrote a cast operator well

2800
02:38:31,790 --> 02:38:35,300
imagine there was another operator

2801
02:38:33,379 --> 02:38:38,318
that's like a function operator right

2802
02:38:35,299 --> 02:38:43,299
well what would it look like then

2803
02:38:38,318 --> 02:38:46,340
instead of void star parentheses int and

2804
02:38:43,299 --> 02:38:48,079
right in here there's a magical function

2805
02:38:46,340 --> 02:38:51,469
operator that's the part that's so

2806
02:38:48,079 --> 02:38:54,978
confusing there's like funk is right

2807
02:38:51,469 --> 02:38:55,639
here so it's really void star keyword

2808
02:38:54,978 --> 02:38:57,648
func

2809
02:38:55,639 --> 02:38:59,478
like this is a keyword it says make a

2810
02:38:57,648 --> 02:39:02,059
function right and

2811
02:38:59,478 --> 02:39:04,788
the parameters come after it or

2812
02:39:02,059 --> 02:39:06,769
something right so if we have this

2813
02:39:04,789 --> 02:39:08,300
magical funk operator it'd be a lot

2814
02:39:06,770 --> 02:39:11,210
easier to see what was going on because

2815
02:39:08,299 --> 02:39:13,099
there it is right and the things that go

2816
02:39:11,209 --> 02:39:15,049
on this side of it are the parameters

2817
02:39:13,100 --> 02:39:20,059
and the things that come on this side of

2818
02:39:15,049 --> 02:39:23,929
it is the return value right that makes

2819
02:39:20,059 --> 02:39:25,939
sense so what we're doing effectively

2820
02:39:23,930 --> 02:39:30,199
when we add this parenthesis is that

2821
02:39:25,939 --> 02:39:36,408
magical funk the operators now on the

2822
02:39:30,199 --> 02:39:37,970
outside right so it's gonna start with

2823
02:39:36,408 --> 02:39:40,818
the pointer because it's the most

2824
02:39:37,969 --> 02:39:43,129
parenthetical thing and it's gonna flip

2825
02:39:40,818 --> 02:39:49,420
the order of these two things it's gonna

2826
02:39:43,129 --> 02:39:52,068
say pointer no right and funk goes here

2827
02:39:49,420 --> 02:39:53,859
does that make sense but it's really

2828
02:39:52,068 --> 02:39:57,078
hard to see that because it's this

2829
02:39:53,859 --> 02:39:58,998
parenthesis that is the de-facto funk

2830
02:39:57,078 --> 02:40:01,728
operator it's the fact that we have a

2831
02:39:58,998 --> 02:40:04,158
parenthetical paramus that makes the

2832
02:40:01,728 --> 02:40:06,318
function but what that does see the

2833
02:40:04,158 --> 02:40:08,959
parser works from that the way that c

2834
02:40:06,318 --> 02:40:10,879
type parsing is designed right is it

2835
02:40:08,959 --> 02:40:12,978
works from the innermost thing out and

2836
02:40:10,879 --> 02:40:14,688
that's exactly like what happens again

2837
02:40:12,978 --> 02:40:18,938
with that operator precedence the

2838
02:40:14,689 --> 02:40:18,939
innermost parentheses

2839
02:40:21,078 --> 02:40:26,090
you know pluses should happen after

2840
02:40:22,760 --> 02:40:28,130
stars right so normally this plus would

2841
02:40:26,090 --> 02:40:29,238
have happened first if it was a plus I'm

2842
02:40:28,129 --> 02:40:31,158
sorry normally is plus would have

2843
02:40:29,238 --> 02:40:33,408
happened second if it was a plus B times

2844
02:40:31,158 --> 02:40:36,049
C but because we parenthetical eyes it

2845
02:40:33,408 --> 02:40:38,568
the parser starts on the inside right

2846
02:40:36,049 --> 02:40:40,219
and it will do that first when it

2847
02:40:38,568 --> 02:40:41,930
constructing the tree and that's the

2848
02:40:40,219 --> 02:40:44,209
exact same thing that happens here the

2849
02:40:41,930 --> 02:40:46,970
most parenthetical thing is the thing

2850
02:40:44,209 --> 02:40:50,658
that starts the type declaration so it

2851
02:40:46,969 --> 02:40:53,688
reads star first before ever getting to

2852
02:40:50,658 --> 02:40:58,189
the parenthetical list that says create

2853
02:40:53,689 --> 02:41:03,789
a function so when you read one of these

2854
02:40:58,189 --> 02:41:07,550
if you see void star int like so think

2855
02:41:03,789 --> 02:41:10,039
this is a function taking an integer

2856
02:41:07,549 --> 02:41:12,908
right I should point to this this is a

2857
02:41:10,039 --> 02:41:12,909
function

2858
02:41:13,418 --> 02:41:21,459
taking an integer returning a void star

2859
02:41:16,998 --> 02:41:24,439
why because function has the most like

2860
02:41:21,459 --> 02:41:26,510
powerful granularity there right it's

2861
02:41:24,439 --> 02:41:31,189
the thing that will appear at the top of

2862
02:41:26,510 --> 02:41:33,828
that tree so you start with it just like

2863
02:41:31,189 --> 02:41:35,930
you would start with plus at the top of

2864
02:41:33,828 --> 02:41:37,850
the tree because it's the most you know

2865
02:41:35,930 --> 02:41:39,908
I I'm using the wrong I don't know how

2866
02:41:37,850 --> 02:41:43,520
to say it right I'm you it's the

2867
02:41:39,908 --> 02:41:47,600
coarsest grain operation func is the

2868
02:41:43,520 --> 02:41:50,390
coarse grain operation in the type

2869
02:41:47,600 --> 02:41:52,998
definition right so we start by saying

2870
02:41:50,389 --> 02:41:54,680
func then we say okay what's on either

2871
02:41:52,998 --> 02:41:57,260
side of the func what's the rent value

2872
02:41:54,680 --> 02:42:01,459
it's this what's the parameters it's

2873
02:41:57,260 --> 02:42:04,789
this right but if we were to insert a

2874
02:42:01,459 --> 02:42:07,459
parenthesis then what we're really

2875
02:42:04,789 --> 02:42:09,918
saying there is oh just like we

2876
02:42:07,459 --> 02:42:11,899
parenthesize plus expressions to make

2877
02:42:09,918 --> 02:42:16,180
them happen first when normally they

2878
02:42:11,898 --> 02:42:19,340
would be the coarsest thing this

2879
02:42:16,180 --> 02:42:21,859
parenthetical makes the pointer the most

2880
02:42:19,340 --> 02:42:25,939
important first thing and it happens

2881
02:42:21,859 --> 02:42:28,789
first then we read the next thing

2882
02:42:25,939 --> 02:42:32,779
outside the parentheses which is the

2883
02:42:28,789 --> 02:42:35,390
func right which is this because it now

2884
02:42:32,779 --> 02:42:37,729
has the highest of course look the you

2885
02:42:35,389 --> 02:42:40,698
know most powerful coarseness does that

2886
02:42:37,728 --> 02:42:45,978
help clarify that at all I know this is

2887
02:42:40,699 --> 02:42:47,630
really weird and complicated and it's

2888
02:42:45,978 --> 02:42:50,568
one of the most hard things to

2889
02:42:47,629 --> 02:42:52,099
understand in C it's also one of the

2890
02:42:50,568 --> 02:42:54,799
most hard things when you're writing a C

2891
02:42:52,100 --> 02:42:57,408
compiler to get right is going wait a

2892
02:42:54,799 --> 02:42:59,148
minute it's not actually the most hard

2893
02:42:57,408 --> 02:43:00,949
thing is probably the preprocessor cuz

2894
02:42:59,148 --> 02:43:03,828
the pound defined macro syntax is so

2895
02:43:00,949 --> 02:43:06,260
messed up but it's one of the hardest

2896
02:43:03,828 --> 02:43:08,629
things to grap your head around cuz you

2897
02:43:06,260 --> 02:43:10,908
know we all kind of Intuit when there's

2898
02:43:08,629 --> 02:43:13,519
actual operators we can actually see

2899
02:43:10,908 --> 02:43:15,139
it's a lot easier to understand how this

2900
02:43:13,520 --> 02:43:17,449
gets broken up cuz you're like oh right

2901
02:43:15,139 --> 02:43:18,939
plus this happened after time so they

2902
02:43:17,449 --> 02:43:21,078
come up higher in the tree in whatever

2903
02:43:18,939 --> 02:43:22,908
but this stuff is really hard because

2904
02:43:21,078 --> 02:43:26,859
there's no operators they're all

2905
02:43:22,908 --> 02:43:26,859
implicit in the like the parentheses

2906
02:43:47,459 --> 02:43:51,519
tutor I was doing some compiler things

2907
02:43:50,170 --> 02:43:53,290
she wants to go could a parser

2908
02:43:51,520 --> 02:43:55,359
programming maybe operate a pressing

2909
02:43:53,290 --> 02:43:57,189
only stream I'm not really the one to do

2910
02:43:55,359 --> 02:43:59,649
that that would really be a John thing

2911
02:43:57,189 --> 02:44:02,319
he's more the compiler guy he said he

2912
02:43:59,648 --> 02:44:04,119
would do one one time but he's just you

2913
02:44:02,319 --> 02:44:05,409
know I think he's got enough stuff he's

2914
02:44:04,120 --> 02:44:09,189
interested in doing right now that just

2915
02:44:05,409 --> 02:44:18,189
hasn't bubbled up but you know go bug

2916
02:44:09,189 --> 02:44:20,770
Mesa ready can you explain how you would

2917
02:44:18,189 --> 02:44:25,540
fix some stuff such as the fog in pub G

2918
02:44:20,770 --> 02:44:26,920
is the fog broken what do you want to

2919
02:44:25,540 --> 02:44:30,149
fix about the fog do you want to look

2920
02:44:26,920 --> 02:44:30,148
more realistic fog or something

2921
02:44:30,389 --> 02:44:35,079
what blackboard program are you using

2922
02:44:32,728 --> 02:44:39,659
there's a program that was written

2923
02:44:35,079 --> 02:44:43,209
specifically for this stream by Sergio

2924
02:44:39,659 --> 02:44:46,420
art that's sorry sir Serge it's

2925
02:44:43,209 --> 02:44:48,879
Serg e underscore RGB he doesn't use

2926
02:44:46,420 --> 02:44:52,148
Sergio as the chat so on the chat it's

2927
02:44:48,879 --> 02:44:55,029
Serge RGB I don't know if he's probably

2928
02:44:52,148 --> 02:45:01,809
not on today but he wrote this program

2929
02:44:55,030 --> 02:45:04,120
called Milton and it's pretty cool it's

2930
02:45:01,809 --> 02:45:05,469
a great black boarding program how they

2931
02:45:04,120 --> 02:45:08,829
recommend using it if you're streaming

2932
02:45:05,469 --> 02:45:11,409
and you can get it for free and it comes

2933
02:45:08,829 --> 02:45:17,109
with source code so it's it's pretty

2934
02:45:11,409 --> 02:45:18,760
awesome actually all right I think

2935
02:45:17,109 --> 02:45:24,700
that's it so I'm going and wrap it up

2936
02:45:18,760 --> 02:45:26,648
oops yeah this the I try to avoid that

2937
02:45:24,700 --> 02:45:28,030
stuff you know we've never covered this

2938
02:45:26,648 --> 02:45:30,579
on handmade here uh simply because it's

2939
02:45:28,030 --> 02:45:32,079
just ridiculous like I don't even think

2940
02:45:30,579 --> 02:45:34,930
people should bother learning it unless

2941
02:45:32,079 --> 02:45:36,909
you just you know unless you're doing C

2942
02:45:34,930 --> 02:45:39,639
compiler stuff because just make the

2943
02:45:36,909 --> 02:45:41,920
time test you know make the type def

2944
02:45:39,639 --> 02:45:45,608
it's easier to read everyone understands

2945
02:45:41,920 --> 02:45:47,379
that whereas if you try to put a

2946
02:45:45,609 --> 02:45:50,170
function pointer in a cast expression

2947
02:45:47,379 --> 02:45:52,089
it's just nuts I mean you can imagine

2948
02:45:50,170 --> 02:45:54,189
how nuts this stuff gets and it's just

2949
02:45:52,090 --> 02:45:56,010
and nobody knows why like most people

2950
02:45:54,189 --> 02:45:59,290
don't understand what's going on here

2951
02:45:56,010 --> 02:45:59,960
and why would you it's a it's like a

2952
02:45:59,290 --> 02:46:02,390
compiler

2953
02:45:59,959 --> 02:46:04,909
artifact almost if that's how that works

2954
02:46:02,389 --> 02:46:06,680
like who I mean I don't know the

2955
02:46:04,909 --> 02:46:08,719
function precedent like that's

2956
02:46:06,680 --> 02:46:10,340
remembering what precedents function

2957
02:46:08,719 --> 02:46:13,039
versus pointer is in the type

2958
02:46:10,340 --> 02:46:14,510
declaration syntax of C is just not it's

2959
02:46:13,040 --> 02:46:16,220
not the thing that a programmer should

2960
02:46:14,510 --> 02:46:19,010
really have to spend their time like

2961
02:46:16,219 --> 02:46:22,728
dealing with you know because operator

2962
02:46:19,010 --> 02:46:24,559
precedence in the in the mass sense it's

2963
02:46:22,728 --> 02:46:26,569
logical for that to be something that

2964
02:46:24,559 --> 02:46:29,180
programmer has to know because they have

2965
02:46:26,569 --> 02:46:31,039
to know how to do math anyway so the

2966
02:46:29,180 --> 02:46:36,500
fact that you need to know that multiply

2967
02:46:31,040 --> 02:46:38,540
happens before plus for addition you

2968
02:46:36,500 --> 02:46:40,069
know that's just obvious that's you're

2969
02:46:38,540 --> 02:46:42,650
not burdening the programmer with that

2970
02:46:40,069 --> 02:46:44,000
because if they didn't know that then

2971
02:46:42,649 --> 02:46:45,889
they don't even know how to do the kind

2972
02:46:44,000 --> 02:46:47,889
of math basic math they need to know how

2973
02:46:45,889 --> 02:46:53,989
to do to be effective at programming

2974
02:46:47,889 --> 02:46:56,059
anyway but in the case where you've got

2975
02:46:53,989 --> 02:46:58,549
like something like these weird type

2976
02:46:56,059 --> 02:47:03,399
definitions they're just they're just

2977
02:46:58,549 --> 02:47:06,228
dumb like type definitions don't branch

2978
02:47:03,399 --> 02:47:09,139
like they really just don't for the most

2979
02:47:06,228 --> 02:47:11,299
part and so it's dumb that they aren't

2980
02:47:09,139 --> 02:47:16,430
just a line of things like it'd be way

2981
02:47:11,299 --> 02:47:20,389
more saying if C looked like that right

2982
02:47:16,430 --> 02:47:23,149
or better yet like that where it's like

2983
02:47:20,389 --> 02:47:26,209
five integers is foo or something like

2984
02:47:23,149 --> 02:47:27,978
that you know what I mean like it would

2985
02:47:26,209 --> 02:47:30,139
be better if you just could read the

2986
02:47:27,978 --> 02:47:35,569
thing in order and it was what it said

2987
02:47:30,139 --> 02:47:38,779
right and you know it's like pointer to

2988
02:47:35,569 --> 02:47:44,629
five integers is a lot more legible than

2989
02:47:38,780 --> 02:47:46,310
what we ended up with in my opinion but

2990
02:47:44,629 --> 02:47:48,199
it's like at this point you know it's

2991
02:47:46,309 --> 02:47:49,579
the horse is out of the barn so it's

2992
02:47:48,200 --> 02:47:52,010
like you can't really change that knocks

2993
02:47:49,579 --> 02:47:53,450
we're also used to you know typing this

2994
02:47:52,010 --> 02:47:57,819
that I can understand why you got to

2995
02:47:53,450 --> 02:47:57,820
keep it but it's not good I don't think

2996
02:48:01,979 --> 02:48:12,639
all right I'm gonna wrap it up thank you

2997
02:48:11,139 --> 02:48:14,139
everyone for joining me for the lip soda

2998
02:48:12,639 --> 02:48:16,840
handmade hero it's been a pleasure

2999
02:48:14,139 --> 02:48:19,659
coding with you as always if you would

3000
02:48:16,840 --> 02:48:22,239
like to follow along with the series at

3001
02:48:19,659 --> 02:48:24,940
home you can always pre-order the game

3002
02:48:22,239 --> 02:48:27,879
on hand made here at org and it comes

3003
02:48:24,940 --> 02:48:32,200
with a source code now why we just

3004
02:48:27,879 --> 02:48:34,899
crashed Windows 10 apparently by closing

3005
02:48:32,200 --> 02:48:36,550
some applications I don't know but

3006
02:48:34,899 --> 02:48:40,090
that's kind of par for the course today

3007
02:48:36,549 --> 02:48:43,979
it's been a real unreliable programming

3008
02:48:40,090 --> 02:48:47,139
day but not because of anything we wrote

3009
02:48:43,979 --> 02:48:49,270
largely due to Microsoft and graphics

3010
02:48:47,139 --> 02:48:51,579
card stuff but oh well

3011
02:48:49,270 --> 02:48:53,260
anyway you can always go to hammer here

3012
02:48:51,579 --> 02:48:54,430
org and pre-order the game comes with

3013
02:48:53,260 --> 02:48:56,469
source code if you want to play around

3014
02:48:54,430 --> 02:48:58,600
with it as of tonight when I update our

3015
02:48:56,469 --> 02:49:00,729
code the source code for handmade ray

3016
02:48:58,600 --> 02:49:02,170
should also be in there so if you wanted

3017
02:49:00,729 --> 02:49:03,850
to take a look at the ray tracer we did

3018
02:49:02,170 --> 02:49:04,989
as a test dream while we're working on

3019
02:49:03,850 --> 02:49:06,819
getting a streaming setup working

3020
02:49:04,989 --> 02:49:08,170
that'll also be in the source tree now

3021
02:49:06,819 --> 02:49:12,879
both in the github and in the

3022
02:49:08,170 --> 02:49:13,629
downloadable zip files so that should be

3023
02:49:12,879 --> 02:49:17,529
it

3024
02:49:13,629 --> 02:49:18,729
yeah until next time don't forget we

3025
02:49:17,530 --> 02:49:20,050
have a schedule bot that tells you when

3026
02:49:18,729 --> 02:49:21,279
the streams gonna be live and we have an

3027
02:49:20,049 --> 02:49:22,689
episode guide if you want to catch up on

3028
02:49:21,280 --> 02:49:25,090
old episodes I referenced that in the

3029
02:49:22,690 --> 02:49:27,700
stream today actually I think at the pre

3030
02:49:25,090 --> 02:49:29,159
stream might I point to someone to it so

3031
02:49:27,700 --> 02:49:31,450
don't forget to check that out as well

3032
02:49:29,159 --> 02:49:35,020
that's it for today thanks for joining

3033
02:49:31,450 --> 02:49:37,150
me everyone and until I I guess until

3034
02:49:35,020 --> 02:49:39,550
tomorrow we'll be back here at what time

3035
02:49:37,149 --> 02:49:44,049
I think it's 10 o'clock tomorrow Pacific

3036
02:49:39,549 --> 02:49:46,420
Daylight Time its Pacific a lifetime

3037
02:49:44,049 --> 02:49:48,429
right yeah I think it's yeah 10 o'clock

3038
02:49:46,420 --> 02:49:49,989
Pacific Daylight Time tomorrow until

3039
02:49:48,430 --> 02:49:51,280
then have fun programming and I'll see

3040
02:49:49,989 --> 02:49:53,340
everyone on the Internet take it easy

3041
02:49:51,280 --> 02:49:53,340
everybody

