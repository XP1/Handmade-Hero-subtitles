1
00:00:03,470 --> 00:00:07,230
hello everyone and welcome to hand made

2
00:00:05,969 --> 00:00:12,980
here oh sure we could a complete game

3
00:00:07,230 --> 00:00:17,160
live on stream we left off at a rather

4
00:00:12,980 --> 00:00:20,189
enticing location yesterday or I should

5
00:00:17,160 --> 00:00:22,679
say last weekend it's yesterday in

6
00:00:20,189 --> 00:00:29,028
stream time but it's last weekend in the

7
00:00:22,679 --> 00:00:31,948
real-time world we now have some pretty

8
00:00:29,028 --> 00:00:34,070
some pretty great ray-tracing times

9
00:00:31,949 --> 00:00:37,649
compared to what we used to have and

10
00:00:34,070 --> 00:00:39,808
actually much better quality results - I

11
00:00:37,649 --> 00:00:44,780
don't know although I'll tell you right

12
00:00:39,808 --> 00:00:47,218
now that is not what I want to see I

13
00:00:44,780 --> 00:00:49,020
don't remember exactly where we left off

14
00:00:47,219 --> 00:00:52,679
what we were doing lighting testing I

15
00:00:49,020 --> 00:00:57,120
think we turned off the actual casting

16
00:00:52,679 --> 00:00:59,128
and took a time and took a time sample

17
00:00:57,119 --> 00:01:00,839
at the end of last stream so we're gonna

18
00:00:59,128 --> 00:01:03,238
have to turn the Ray caster back on

19
00:01:00,840 --> 00:01:06,150
first before we do that I believe we

20
00:01:03,238 --> 00:01:08,759
just turned the cost metric to zero when

21
00:01:06,150 --> 00:01:13,228
we're actually doing that test so at the

22
00:01:08,760 --> 00:01:16,759
top of grid ray cast we usually set cost

23
00:01:13,228 --> 00:01:19,829
metric to zero - this line right here

24
00:01:16,759 --> 00:01:22,019
but if we turn it back on it's in really

25
00:01:19,829 --> 00:01:23,700
good shape the speed is quite good and

26
00:01:22,019 --> 00:01:29,188
the quality is actually better than the

27
00:01:23,700 --> 00:01:30,780
old one so as far as the raycast I think

28
00:01:29,188 --> 00:01:32,459
we're getting pretty close to done but

29
00:01:30,780 --> 00:01:34,739
there's a couple things I think we can

30
00:01:32,459 --> 00:01:38,089
do that would improve the speed of it

31
00:01:34,739 --> 00:01:41,399
dramatically now one of the things that

32
00:01:38,090 --> 00:01:44,478
we have to look at now is we were taking

33
00:01:41,400 --> 00:01:46,380
some timings in just the standalone like

34
00:01:44,478 --> 00:01:50,868
let's take a look at how fast this

35
00:01:46,379 --> 00:01:50,868
routine can run profile part of things

36
00:01:54,170 --> 00:01:58,618
and what you can see here is that if we

37
00:01:56,728 --> 00:02:02,340
start looking at like how long the

38
00:01:58,618 --> 00:02:04,200
bookends take which is to say without

39
00:02:02,340 --> 00:02:07,728
actually doing any ray tracing just

40
00:02:04,200 --> 00:02:10,500
doing like setup work and then the

41
00:02:07,728 --> 00:02:11,789
cooldown work like basically the the two

42
00:02:10,500 --> 00:02:14,370
things that have to happen on either

43
00:02:11,789 --> 00:02:16,109
side of the ray tracing which is at

44
00:02:14,370 --> 00:02:17,849
startup we have to do some some builds

45
00:02:16,110 --> 00:02:21,290
right we have to get some spatial

46
00:02:17,848 --> 00:02:25,560
structures ready for our grid walk and

47
00:02:21,289 --> 00:02:28,709
then on exit we have to do a bunch of

48
00:02:25,560 --> 00:02:32,159
stuff there's two basic phases one phase

49
00:02:28,709 --> 00:02:35,519
is we have to write out the actual color

50
00:02:32,159 --> 00:02:38,879
data to like summit basically summit

51
00:02:35,519 --> 00:02:41,489
into the into the textures that we're

52
00:02:38,879 --> 00:02:45,090
going to download to the GPU and then

53
00:02:41,489 --> 00:02:49,980
the other thing we have to do is we have

54
00:02:45,090 --> 00:02:56,599
to blur the spec map into the diffuse

55
00:02:49,979 --> 00:02:58,798
map so those two processes are you know

56
00:02:56,599 --> 00:03:01,469
taking a lot of time right now

57
00:02:58,799 --> 00:03:05,370
you can see that what we've got it down

58
00:03:01,469 --> 00:03:08,609
to five point one seconds for our stress

59
00:03:05,370 --> 00:03:13,739
test that's down from seven point four

60
00:03:08,609 --> 00:03:16,109
and we know that even if we weren't

61
00:03:13,739 --> 00:03:19,769
retracing at all it's two point five

62
00:03:16,109 --> 00:03:23,010
right so only half our time is now

63
00:03:19,769 --> 00:03:26,519
currently spent in the ray tracer so

64
00:03:23,009 --> 00:03:28,318
what that means is that really we want

65
00:03:26,519 --> 00:03:31,079
to look at this number as if this number

66
00:03:28,318 --> 00:03:32,849
is really itself - the 2.5 so it's

67
00:03:31,079 --> 00:03:35,700
really like and this is a this is

68
00:03:32,849 --> 00:03:38,579
rounded up it's 2.6 so really this

69
00:03:35,699 --> 00:03:40,018
number is more like 2.5 that's what

70
00:03:38,579 --> 00:03:43,079
that's what we're actually looking at

71
00:03:40,019 --> 00:03:46,709
for the time if they're actual ray

72
00:03:43,079 --> 00:03:48,269
tracing takes and then the other stuff

73
00:03:46,709 --> 00:03:51,329
so stuff that supports the ray tracer

74
00:03:48,269 --> 00:03:54,359
and building the maps at the end that's

75
00:03:51,329 --> 00:03:57,780
the other half of the time now that's

76
00:03:54,359 --> 00:03:59,879
both good and bad a it means that our

77
00:03:57,780 --> 00:04:01,769
ray tracer is getting very fast because

78
00:03:59,879 --> 00:04:03,388
now it's starting to be actually not

79
00:04:01,769 --> 00:04:05,610
even the hotspot it's starting to drop

80
00:04:03,389 --> 00:04:09,870
below the 50% line

81
00:04:05,610 --> 00:04:11,430
so good on us for that but it also means

82
00:04:09,870 --> 00:04:13,050
that well we're gonna have to start

83
00:04:11,430 --> 00:04:14,250
going and looking at the other pieces of

84
00:04:13,050 --> 00:04:17,280
the code and optimizing them but that's

85
00:04:14,250 --> 00:04:19,949
okay because we we knew sort of we had

86
00:04:17,279 --> 00:04:22,409
to do that and also you know this is how

87
00:04:19,949 --> 00:04:24,329
optimization works the faster you make

88
00:04:22,410 --> 00:04:26,550
one part and the more you focus on one

89
00:04:24,329 --> 00:04:27,930
part the slower everything else gets by

90
00:04:26,550 --> 00:04:29,790
comparison because that thing keeps

91
00:04:27,930 --> 00:04:33,360
getting faster any other things stay the

92
00:04:29,790 --> 00:04:36,960
same speed so we did an optimized

93
00:04:33,360 --> 00:04:39,000
compute irradiance and we know that that

94
00:04:36,959 --> 00:04:40,349
really dropped the time dramatically and

95
00:04:39,000 --> 00:04:46,350
we know that that's the case because

96
00:04:40,350 --> 00:04:47,970
whoa wow I haven't seen for Koda crash

97
00:04:46,350 --> 00:04:49,140
in a very long time and all I was doing

98
00:04:47,970 --> 00:04:54,750
was looking if I wonder what's going on

99
00:04:49,139 --> 00:04:56,399
here OOP my it must be bad Ram this is

100
00:04:54,750 --> 00:04:58,680
an ancient version of for coder that I'm

101
00:04:56,399 --> 00:05:01,529
using I just never have any time anymore

102
00:04:58,680 --> 00:05:03,480
oh he's so busy with everything that I

103
00:05:01,529 --> 00:05:06,809
don't ever have any time to actually

104
00:05:03,480 --> 00:05:08,550
update my for coder but one of these

105
00:05:06,810 --> 00:05:11,009
days I will update the stream for coder

106
00:05:08,550 --> 00:05:13,530
to something I was gonna switch to ryan

107
00:05:11,009 --> 00:05:14,728
flurries custom layer and just backdoor

108
00:05:13,529 --> 00:05:17,489
it might changes into it that way there

109
00:05:14,728 --> 00:05:19,680
was like a public repository of it it's

110
00:05:17,490 --> 00:05:23,389
been long overdue but you know well just

111
00:05:19,680 --> 00:05:23,389
dedicated a stream or two to doing that

112
00:05:24,168 --> 00:05:34,969
anyway what I was trying to say was if

113
00:05:31,439 --> 00:05:40,019
you take a look at what all this entails

114
00:05:34,970 --> 00:05:42,630
basically in that remaining 2.5 seconds

115
00:05:40,019 --> 00:05:47,310
that we know is being taken up by the

116
00:05:42,629 --> 00:05:52,139
actual meat of the raytracer we haven't

117
00:05:47,310 --> 00:05:56,280
taken a sample yet to see how fast it

118
00:05:52,139 --> 00:05:58,550
would be if the grid ray tracer were

119
00:05:56,279 --> 00:06:04,228
running but the fastest possible

120
00:05:58,550 --> 00:06:07,620
irradiance computations so if we were

121
00:06:04,228 --> 00:06:12,209
for example to take compute voxel or

122
00:06:07,620 --> 00:06:14,430
irradiance at and try to reduce the

123
00:06:12,209 --> 00:06:16,649
total runtime of it to something even

124
00:06:14,430 --> 00:06:19,550
less like we did optimization of it as

125
00:06:16,649 --> 00:06:22,969
you can see here to sort of simplify

126
00:06:19,550 --> 00:06:25,430
things a bit but the question is like

127
00:06:22,970 --> 00:06:26,960
can we can we take a sample that sort of

128
00:06:25,430 --> 00:06:29,509
gets rid of some of this and also like

129
00:06:26,959 --> 00:06:31,310
we don't know very much about this we

130
00:06:29,509 --> 00:06:35,180
haven't looked at get hoc tehy drill

131
00:06:31,310 --> 00:06:37,579
offset at all but if you take a look at

132
00:06:35,180 --> 00:06:39,620
how this is working here it's entirely

133
00:06:37,579 --> 00:06:44,419
possible that this would flow much more

134
00:06:39,620 --> 00:06:49,910
cleanly if this were done in float is

135
00:06:44,420 --> 00:06:52,310
what SSE as well right because you can

136
00:06:49,910 --> 00:06:55,370
see there's actually two fairly large

137
00:06:52,310 --> 00:06:57,680
parts to this there's the get octahedral

138
00:06:55,370 --> 00:07:00,290
offset part and then there's the

139
00:06:57,680 --> 00:07:04,670
octahedral from unit vector part so it's

140
00:07:00,290 --> 00:07:07,520
actually it's actually got to do both of

141
00:07:04,670 --> 00:07:09,920
these things and both of these things

142
00:07:07,519 --> 00:07:15,109
could be they could be being done very

143
00:07:09,920 --> 00:07:17,900
stupidly by the compiler right so we

144
00:07:15,110 --> 00:07:20,600
probably need to take this and make this

145
00:07:17,899 --> 00:07:22,729
more sane as well because we want this

146
00:07:20,600 --> 00:07:26,330
whole routine to flow as smoothly as

147
00:07:22,730 --> 00:07:28,520
possible and especially when you start

148
00:07:26,329 --> 00:07:31,159
seeing things like sine of an absolute

149
00:07:28,519 --> 00:07:34,599
value it's always possible that those

150
00:07:31,160 --> 00:07:37,730
things are not implemented very cleanly

151
00:07:34,600 --> 00:07:39,860
when the compiler has to look at them

152
00:07:37,730 --> 00:07:42,980
and figure out that what's being done

153
00:07:39,860 --> 00:07:45,710
can be I mean like so especially when

154
00:07:42,980 --> 00:07:48,189
you see this like that's just not you

155
00:07:45,709 --> 00:07:50,599
know you probably never want that right

156
00:07:48,189 --> 00:07:52,339
now we don't really know like maybe the

157
00:07:50,600 --> 00:07:53,720
compiler is doing some things smart

158
00:07:52,339 --> 00:07:59,719
there so we could look at the

159
00:07:53,720 --> 00:08:01,550
disassembly and see but based on what we

160
00:07:59,720 --> 00:08:03,410
saw before if I had to guess right now

161
00:08:01,550 --> 00:08:05,660
before we look at the disassembly I

162
00:08:03,410 --> 00:08:10,420
would say you know we're probably in a

163
00:08:05,660 --> 00:08:14,570
lot of trouble there because FM's f is

164
00:08:10,420 --> 00:08:19,360
like maybe going to be done with an and

165
00:08:14,569 --> 00:08:22,610
but maybe it's not I mean I don't know I

166
00:08:19,360 --> 00:08:25,730
don't know what it's going to produce in

167
00:08:22,610 --> 00:08:27,240
fact let's just find out so if I go

168
00:08:25,730 --> 00:08:29,970
ahead and

169
00:08:27,240 --> 00:08:32,778
take a look at this I don't know if it

170
00:08:29,970 --> 00:08:36,330
welds the voxel irradiance sampler

171
00:08:32,778 --> 00:08:39,689
directly into this routine it should but

172
00:08:36,330 --> 00:08:47,100
I don't know if it does actually

173
00:08:39,690 --> 00:08:50,010
it's alright compute radiance at so it

174
00:08:47,100 --> 00:08:53,399
doesn't because here we are and you can

175
00:08:50,009 --> 00:08:56,370
see us calling from here and what I want

176
00:08:53,399 --> 00:08:59,100
to do in here is I just want to take a

177
00:08:56,370 --> 00:09:03,120
look mainly at this and maybe now would

178
00:08:59,100 --> 00:09:05,339
be a good time to sort of get this over

179
00:09:03,120 --> 00:09:07,259
on the other side here because we maybe

180
00:09:05,339 --> 00:09:10,589
just want to be able to see it about

181
00:09:07,259 --> 00:09:13,139
larger and at the moment I'm not really

182
00:09:10,589 --> 00:09:14,580
looking particularly hard at the state

183
00:09:13,139 --> 00:09:16,139
it like I'm not trying to debug this

184
00:09:14,580 --> 00:09:18,870
assembly code so I don't really need a

185
00:09:16,139 --> 00:09:21,689
watch window right now mostly all I'm

186
00:09:18,870 --> 00:09:23,519
looking at here and you know what why do

187
00:09:21,690 --> 00:09:25,130
I still have code bytes on we don't

188
00:09:23,519 --> 00:09:29,278
really need code bytes at the moment

189
00:09:25,129 --> 00:09:32,669
just makes a little harder to read you

190
00:09:29,278 --> 00:09:35,009
know here's here's here's a random

191
00:09:32,669 --> 00:09:37,019
remedy request I always throw these out

192
00:09:35,009 --> 00:09:39,169
on stream i feel bad for george cuz i'm

193
00:09:37,019 --> 00:09:45,240
just like you know it would be cool if

194
00:09:39,169 --> 00:09:46,979
unicorns could fly but like if you look

195
00:09:45,240 --> 00:09:49,560
at this it's pretty hard to read because

196
00:09:46,980 --> 00:09:52,320
it's kind of just unformatted right and

197
00:09:49,559 --> 00:09:55,619
it would be kind of cool if this could

198
00:09:52,320 --> 00:09:56,550
be tabulated a little bit like you know

199
00:09:55,620 --> 00:09:59,730
if there was another one of these

200
00:09:56,549 --> 00:10:03,269
checkboxes that was like aligned columns

201
00:09:59,730 --> 00:10:05,879
or something and you could see the

202
00:10:03,269 --> 00:10:08,939
assembly language code so these would

203
00:10:05,879 --> 00:10:12,360
all like all of the params would like

204
00:10:08,940 --> 00:10:14,850
all of the the arguments would line up

205
00:10:12,360 --> 00:10:17,278
here so like you know movies move SD

206
00:10:14,850 --> 00:10:18,839
would have the x mm 0 b in the same

207
00:10:17,278 --> 00:10:21,059
places like the mauve even though

208
00:10:18,839 --> 00:10:24,120
they're different lengths mnemonics

209
00:10:21,059 --> 00:10:28,679
right something like that would probably

210
00:10:24,120 --> 00:10:31,470
be pretty cool and you know I don't know

211
00:10:28,679 --> 00:10:34,569
there's probably just a couple simple

212
00:10:31,470 --> 00:10:37,550
things you could do to make that

213
00:10:34,570 --> 00:10:40,640
to make that kind of readable another

214
00:10:37,549 --> 00:10:42,379
example would be like suppose you color

215
00:10:40,639 --> 00:10:44,659
highlighted these some house so

216
00:10:42,379 --> 00:10:46,730
everywhere that xmm one was used it was

217
00:10:44,659 --> 00:10:49,669
a specific color or you could just click

218
00:10:46,730 --> 00:10:51,740
on it anyways and if you whatever you

219
00:10:49,669 --> 00:10:53,569
clicked on that one at least would

220
00:10:51,740 --> 00:10:56,720
highlight so you could could see like oh

221
00:10:53,570 --> 00:10:58,310
you know this is moving in X M M one and

222
00:10:56,720 --> 00:11:00,440
I'm kind of wondering like where that's

223
00:10:58,309 --> 00:11:02,778
used so it would then highlight the next

224
00:11:00,440 --> 00:11:04,820
place that X mm ohms use it you know

225
00:11:02,778 --> 00:11:06,919
happens to be here but if it was like

226
00:11:04,820 --> 00:11:08,450
lower down it might take you a little

227
00:11:06,919 --> 00:11:09,919
while to find that right when you're

228
00:11:08,450 --> 00:11:11,330
just blind reading some assembly from

229
00:11:09,919 --> 00:11:13,610
the compiler if it's your own code you

230
00:11:11,330 --> 00:11:15,050
usually don't need this but when you're

231
00:11:13,610 --> 00:11:16,879
looking at the code that the compiler

232
00:11:15,049 --> 00:11:18,019
generates which is most often what

233
00:11:16,879 --> 00:11:19,820
you're looking at because you know it's

234
00:11:18,019 --> 00:11:23,240
pretty rare these days to really write

235
00:11:19,820 --> 00:11:24,379
routines in assembly you're not gonna

236
00:11:23,240 --> 00:11:25,339
have a whole lot of them so a lot of

237
00:11:24,379 --> 00:11:26,689
times when you're looking at the

238
00:11:25,339 --> 00:11:33,620
assembly language you're looking at semi

239
00:11:26,690 --> 00:11:35,420
language that wasn't yours and so it's

240
00:11:33,620 --> 00:11:36,980
kind of it would be kind of cool to have

241
00:11:35,419 --> 00:11:38,479
a little bit more in here you know it

242
00:11:36,980 --> 00:11:39,920
doesn't have to be nuts because this is

243
00:11:38,480 --> 00:11:41,230
not a reverse engineering tool you know

244
00:11:39,919 --> 00:11:43,429
you see those tools that are like

245
00:11:41,230 --> 00:11:44,778
designed for reverse engineering and

246
00:11:43,429 --> 00:11:46,309
then there's like all these crazy things

247
00:11:44,778 --> 00:11:48,379
like aw let me mark up what this one is

248
00:11:46,309 --> 00:11:50,479
and let me replace this use of X in one

249
00:11:48,379 --> 00:11:52,129
with an actual name so I can see it you

250
00:11:50,480 --> 00:11:54,200
know that stuff it would just be a waste

251
00:11:52,129 --> 00:11:55,909
of your time because nobody who's just

252
00:11:54,200 --> 00:11:57,350
casually inspecting compiler code like

253
00:11:55,909 --> 00:11:59,028
you would in a debugger like this is

254
00:11:57,350 --> 00:12:01,070
gonna use any of those features so they

255
00:11:59,028 --> 00:12:03,409
just be wasted but just a slightly

256
00:12:01,070 --> 00:12:04,970
better view of it here would be cool

257
00:12:03,409 --> 00:12:05,838
because that would allow you to read it

258
00:12:04,970 --> 00:12:07,579
a little bit more easily

259
00:12:05,839 --> 00:12:09,980
so just features that allow you to read

260
00:12:07,578 --> 00:12:11,539
the code a little bit more easily not

261
00:12:09,980 --> 00:12:14,810
really reverse engineer it but just read

262
00:12:11,539 --> 00:12:16,929
it seemed like they would be worth it I

263
00:12:14,809 --> 00:12:20,539
don't know just throwing that out there

264
00:12:16,929 --> 00:12:28,309
so anyway if we take a look at this code

265
00:12:20,539 --> 00:12:30,278
here you know I'll be honest I don't

266
00:12:28,309 --> 00:12:32,899
even think I know that instruction

267
00:12:30,278 --> 00:12:35,600
that's probably sort of embarrassing for

268
00:12:32,899 --> 00:12:40,700
me to say but I honestly just don't even

269
00:12:35,600 --> 00:12:43,850
remember if I've ever used that so let's

270
00:12:40,700 --> 00:12:46,028
find out because yeah I do not know what

271
00:12:43,850 --> 00:12:46,028
that is

272
00:12:46,519 --> 00:12:53,970
it's a single scalar some kind but I

273
00:12:50,879 --> 00:12:57,870
just I have no idea what that does let's

274
00:12:53,970 --> 00:13:01,560
see so it is a pretty simple instruction

275
00:12:57,870 --> 00:13:04,350
it support zero only and it's a one

276
00:13:01,559 --> 00:13:08,458
throughput one you up so it's only on

277
00:13:04,350 --> 00:13:11,220
port zero and it's one cycle long seems

278
00:13:08,458 --> 00:13:12,568
pretty straightforward I don't know if

279
00:13:11,220 --> 00:13:14,040
the intrinsics guide will have that in

280
00:13:12,568 --> 00:13:15,509
it we can look because I may have to

281
00:13:14,039 --> 00:13:18,059
look in the architecture manual but I

282
00:13:15,509 --> 00:13:33,959
assume this is probably in here

283
00:13:18,059 --> 00:13:36,679
oh so that's just the compare that's

284
00:13:33,958 --> 00:13:36,679
just the compare

285
00:13:39,299 --> 00:13:55,379
so interestingly like what's the ah okay

286
00:13:49,059 --> 00:13:57,459
oh wow okay so I feel kind of dumb I

287
00:13:55,379 --> 00:14:00,970
never knew this I guess it's because

288
00:13:57,460 --> 00:14:05,769
when I write SSE code I pretty much

289
00:14:00,970 --> 00:14:06,940
always am running it wide so I've

290
00:14:05,769 --> 00:14:08,350
actually never encountered this

291
00:14:06,940 --> 00:14:11,950
instruction which I know is kind of

292
00:14:08,350 --> 00:14:13,450
crazy yeah I feel like that was worth

293
00:14:11,950 --> 00:14:15,759
doing because you know it's just kind of

294
00:14:13,450 --> 00:14:16,990
dumb that I didn't know that this is

295
00:14:15,759 --> 00:14:19,029
kind of the nature of modern programming

296
00:14:16,990 --> 00:14:20,769
when you have so much stuff to do you

297
00:14:19,029 --> 00:14:24,159
don't have a chance to really get as

298
00:14:20,769 --> 00:14:28,409
into it as you would like so normally I

299
00:14:24,159 --> 00:14:30,579
always use the comp instructions and

300
00:14:28,409 --> 00:14:32,740
what you can see here is they have a

301
00:14:30,580 --> 00:14:35,290
special one just for if you're only

302
00:14:32,740 --> 00:14:37,960
doing a single scalar and what it looks

303
00:14:35,289 --> 00:14:43,059
like it does is it actually does the

304
00:14:37,960 --> 00:14:48,610
comparison of just the low order float

305
00:14:43,059 --> 00:14:49,569
and it puts it right into the it puts it

306
00:14:48,610 --> 00:14:53,590
right into the flags

307
00:14:49,570 --> 00:14:55,210
I assume this says you know this says

308
00:14:53,590 --> 00:14:56,350
return to boolean result but that's

309
00:14:55,210 --> 00:14:58,960
because they're talking about the

310
00:14:56,350 --> 00:15:01,029
intrinsic but there is no such thing as

311
00:14:58,960 --> 00:15:02,740
return the result right I mean this is

312
00:15:01,029 --> 00:15:05,230
an instruction so it does something with

313
00:15:02,740 --> 00:15:08,169
result and if you're talking about

314
00:15:05,230 --> 00:15:10,600
something that doesn't take register as

315
00:15:08,169 --> 00:15:12,370
a destination because it doesn't here

316
00:15:10,600 --> 00:15:14,800
you can see that the only other register

317
00:15:12,370 --> 00:15:17,139
is would be this one and so if it's just

318
00:15:14,799 --> 00:15:19,629
doing one boolean result that's going

319
00:15:17,139 --> 00:15:21,279
into the flags so that means you can do

320
00:15:19,629 --> 00:15:24,100
this and then do a jump I didn't know

321
00:15:21,279 --> 00:15:25,569
that because I always do wide when I'm

322
00:15:24,100 --> 00:15:26,769
writing Cindy because the whole point of

323
00:15:25,570 --> 00:15:29,680
running Cindy is really doing wide I

324
00:15:26,769 --> 00:15:31,750
never really think about what the

325
00:15:29,679 --> 00:15:34,750
instruction patterns are gonna be for

326
00:15:31,750 --> 00:15:35,799
single float but of course single float

327
00:15:34,750 --> 00:15:38,200
happens all the time

328
00:15:35,799 --> 00:15:41,559
any time you're compiling code that's

329
00:15:38,200 --> 00:15:45,640
just typed the word float so this right

330
00:15:41,559 --> 00:15:47,139
here is presumably an instruction that

331
00:15:45,639 --> 00:15:49,360
they're basically saying look we're

332
00:15:47,139 --> 00:15:52,509
going to compare these two probably

333
00:15:49,360 --> 00:15:57,339
because it's like this

334
00:15:52,509 --> 00:15:58,720
where did it go octahedral from you here

335
00:15:57,339 --> 00:16:01,480
we go

336
00:15:58,720 --> 00:16:02,889
probably because of this like again it's

337
00:16:01,480 --> 00:16:04,269
hard to see exactly what's doing here

338
00:16:02,889 --> 00:16:07,600
because I haven't followed through the

339
00:16:04,269 --> 00:16:08,769
code and it's really not marked up here

340
00:16:07,600 --> 00:16:12,308
it also it's hard to tell where it came

341
00:16:08,769 --> 00:16:14,438
from but if you take a look at what's

342
00:16:12,308 --> 00:16:16,058
going on here it's probably doing like

343
00:16:14,438 --> 00:16:18,608
this test or something and trying to

344
00:16:16,058 --> 00:16:21,548
jump around it right

345
00:16:18,609 --> 00:16:25,809
that's the charitable one that's the

346
00:16:21,548 --> 00:16:29,438
charitable interpretation the fact that

347
00:16:25,808 --> 00:16:33,668
I see multiple ones of these makes me a

348
00:16:29,438 --> 00:16:35,649
little nervous it could be that those

349
00:16:33,668 --> 00:16:43,389
are there for a reason and the fact that

350
00:16:35,649 --> 00:16:49,058
there's only two so what's the second

351
00:16:43,389 --> 00:16:53,739
one though there's not really gonna be

352
00:16:49,058 --> 00:16:58,858
an if in here right folks

353
00:16:53,739 --> 00:16:58,859
so is it back in here

354
00:17:07,039 --> 00:17:18,450
so I'm I'm not I'm not super comfortable

355
00:17:16,049 --> 00:17:26,789
with that I don't really know what

356
00:17:18,450 --> 00:17:29,880
that's doing right so that's that's a

357
00:17:26,789 --> 00:17:31,649
little bit scary because I can't really

358
00:17:29,880 --> 00:17:33,270
work out I'd have to start stepping

359
00:17:31,650 --> 00:17:35,700
through this and really pay attention to

360
00:17:33,269 --> 00:17:37,589
what it's doing but I don't really

361
00:17:35,700 --> 00:17:40,610
understand why we should be seeing two

362
00:17:37,589 --> 00:17:43,980
of those because if it was doing a

363
00:17:40,609 --> 00:17:47,669
branch I'm not sure what the other one

364
00:17:43,980 --> 00:17:51,809
was we're not really doing any other

365
00:17:47,670 --> 00:17:54,750
branches in here right you could kind of

366
00:17:51,809 --> 00:17:57,359
see like there isn't there really isn't

367
00:17:54,750 --> 00:17:59,849
anything else where anyone should be

368
00:17:57,359 --> 00:18:03,059
doing any kind of branch all the rest of

369
00:17:59,849 --> 00:18:08,059
these as far as I know are just straight

370
00:18:03,059 --> 00:18:08,059
line code so that's a little disquieting

371
00:18:09,500 --> 00:18:14,519
and again that that just makes me

372
00:18:12,690 --> 00:18:16,440
nervous because I don't know why the

373
00:18:14,519 --> 00:18:19,049
compiler would think that it needed to

374
00:18:16,440 --> 00:18:21,269
do two tests like that because there

375
00:18:19,049 --> 00:18:22,950
really aren't two things to test so

376
00:18:21,269 --> 00:18:25,730
let's just double check let's see what's

377
00:18:22,950 --> 00:18:27,690
going on there I'm gonna go to floor

378
00:18:25,730 --> 00:18:29,519
here but you know this is a

379
00:18:27,690 --> 00:18:34,680
straight-line piece of code right it's

380
00:18:29,519 --> 00:18:36,900
not a test Hadamard product v2 floor

381
00:18:34,680 --> 00:18:39,509
those are all obviously you know not

382
00:18:36,900 --> 00:18:44,930
gonna do branches unless the compiler

383
00:18:39,509 --> 00:18:47,609
did something really crazy ah so

384
00:18:44,930 --> 00:18:52,200
octahedron oh no no never mind sorry I

385
00:18:47,609 --> 00:18:53,849
just jump to the wrong function so

386
00:18:52,200 --> 00:18:58,620
looking at this you know the absolute

387
00:18:53,849 --> 00:19:00,269
value here there's three of them so I

388
00:18:58,619 --> 00:19:02,339
would have expected to see three of

389
00:19:00,269 --> 00:19:06,480
these if it was somehow interpreting

390
00:19:02,339 --> 00:19:08,250
that as a branch but it doesn't you know

391
00:19:06,480 --> 00:19:13,110
that does oh there they are one two

392
00:19:08,250 --> 00:19:16,140
three I just missed the third one so you

393
00:19:13,109 --> 00:19:18,569
can see three distinct calls to that I'm

394
00:19:16,140 --> 00:19:20,549
not sure where the actual

395
00:19:18,569 --> 00:19:23,428
other branch would be at that point

396
00:19:20,548 --> 00:19:26,429
meaning the branch that that does VZ

397
00:19:23,429 --> 00:19:32,309
less than zero

398
00:19:26,429 --> 00:19:34,860
I'm not sure where that is right so I

399
00:19:32,308 --> 00:19:40,980
don't know if the compiler did something

400
00:19:34,859 --> 00:19:56,808
smarter there or if I'm just missing one

401
00:19:40,980 --> 00:19:56,808
of these so there's three

402
00:20:10,630 --> 00:20:26,180
so I'm not seeing so I'm not seeing much

403
00:20:24,589 --> 00:20:32,750
else so I don't know why I'm not seeing

404
00:20:26,180 --> 00:20:35,539
four of them I mean one reason might be

405
00:20:32,750 --> 00:20:37,220
so here's the thought like it could be

406
00:20:35,539 --> 00:20:39,319
that the reason that I'm not seeing four

407
00:20:37,220 --> 00:20:42,049
of them is because this test is the same

408
00:20:39,319 --> 00:20:43,579
as that test so what it may have done is

409
00:20:42,049 --> 00:20:46,789
just welded those two pieces of code

410
00:20:43,579 --> 00:20:50,059
together here I'm saying in other words

411
00:20:46,789 --> 00:20:52,159
when you saw absolute value if absolute

412
00:20:50,059 --> 00:20:54,730
value was being done stupidly which may

413
00:20:52,160 --> 00:20:57,560
well have been I don't know

414
00:20:54,730 --> 00:21:01,130
vac you know it could be saying like

415
00:20:57,559 --> 00:21:04,879
okay let's do a test on this to see if

416
00:21:01,130 --> 00:21:07,280
it was less than zero you know I really

417
00:21:04,880 --> 00:21:11,030
don't know so I think what I would

418
00:21:07,279 --> 00:21:15,410
prefer to do here is just make this not

419
00:21:11,029 --> 00:21:18,619
as stupid so if we take a look at what's

420
00:21:15,410 --> 00:21:21,470
going on with absolute value I'm pretty

421
00:21:18,619 --> 00:21:23,449
sure we've already done this right and

422
00:21:21,470 --> 00:21:25,460
you can see here that this is how you

423
00:21:23,450 --> 00:21:28,309
would prefer to do absolute value so you

424
00:21:25,460 --> 00:21:32,170
you basically just say look we know the

425
00:21:28,309 --> 00:21:32,169
sign bit is the highest bit of each lane

426
00:21:34,150 --> 00:21:40,550
so if we just load in you know into the

427
00:21:39,049 --> 00:21:43,369
register a thing with the high bit set

428
00:21:40,549 --> 00:21:47,210
and everything else clear then we should

429
00:21:43,369 --> 00:21:50,869
just be able to mask off that part right

430
00:21:47,210 --> 00:21:54,019
now if you take a look at how this is

431
00:21:50,869 --> 00:21:57,829
written I don't know that this is

432
00:21:54,019 --> 00:21:59,569
particularly smart I suppose it depends

433
00:21:57,829 --> 00:22:02,839
exactly how the compiler wants to

434
00:21:59,569 --> 00:22:05,269
generate this it probably will just put

435
00:22:02,839 --> 00:22:09,019
this and load it I mean I don't really

436
00:22:05,269 --> 00:22:12,829
know but let's suppose you were actually

437
00:22:09,019 --> 00:22:14,690
going to generate it for real you know

438
00:22:12,829 --> 00:22:17,720
this is probably not the fastest way you

439
00:22:14,690 --> 00:22:19,759
would want to do this so for example if

440
00:22:17,720 --> 00:22:20,670
you wanted to you could just get rid of

441
00:22:19,759 --> 00:22:25,930
this

442
00:22:20,670 --> 00:22:28,810
and make this an and not right because

443
00:22:25,930 --> 00:22:30,759
we're nodding this and there really was

444
00:22:28,809 --> 00:22:32,169
no reason that we had to not it because

445
00:22:30,759 --> 00:22:35,019
there's an instruction that knots it for

446
00:22:32,170 --> 00:22:37,240
you so if the compiler actually thought

447
00:22:35,019 --> 00:22:40,809
that it needed to do that specifically

448
00:22:37,240 --> 00:22:42,970
you know not so good and in fact you

449
00:22:40,809 --> 00:22:44,619
know we could just say all right look

450
00:22:42,970 --> 00:22:48,100
let's take let's see what's gonna happen

451
00:22:44,619 --> 00:22:51,039
on the compiler we're using here if I go

452
00:22:48,099 --> 00:22:54,269
to God bolts and yeah well we don't need

453
00:22:51,039 --> 00:22:58,299
a privacy policy because streaming this

454
00:22:54,269 --> 00:23:00,430
you can't know that but but it's true so

455
00:22:58,299 --> 00:23:03,029
if we take a look at the compiler here

456
00:23:00,430 --> 00:23:05,890
and MSV sees compiler is kind of bad at

457
00:23:03,029 --> 00:23:07,000
SSE style optimization so it's probably

458
00:23:05,890 --> 00:23:09,340
gonna be the worst case it's probably

459
00:23:07,000 --> 00:23:11,440
gonna be worse than clang would be my

460
00:23:09,339 --> 00:23:13,869
guess but if I go ahead and grab this

461
00:23:11,440 --> 00:23:16,680
here and we just go ahead and paste that

462
00:23:13,869 --> 00:23:20,259
and we don't really need an inline here

463
00:23:16,680 --> 00:23:24,100
and we don't really need our weird kind

464
00:23:20,259 --> 00:23:25,720
of like boilerplate stuff there that

465
00:23:24,099 --> 00:23:31,119
we're using so I'm just gonna go ahead

466
00:23:25,720 --> 00:23:33,940
and and get rid of that so if we write

467
00:23:31,119 --> 00:23:36,579
this code straight line I'm pretty sure

468
00:23:33,940 --> 00:23:39,070
that it requires me to include and trim

469
00:23:36,579 --> 00:23:41,169
dot H before it can do anything but

470
00:23:39,069 --> 00:23:46,689
otherwise it should be fine

471
00:23:41,170 --> 00:23:51,120
and let me just see this larger let me

472
00:23:46,690 --> 00:23:56,170
see what else we've got floats and PS

473
00:23:51,119 --> 00:24:01,679
get problems F 32 right I'm gonna get

474
00:23:56,170 --> 00:24:01,680
that one better you 32

475
00:24:10,460 --> 00:24:25,680
and done

476
00:24:15,799 --> 00:24:27,089
right should be nope okay so we take a

477
00:24:25,680 --> 00:24:28,950
look at the assembly language that's

478
00:24:27,089 --> 00:24:32,129
coming out of this now which hopefully

479
00:24:28,950 --> 00:24:36,269
we should be able to get you can see

480
00:24:32,130 --> 00:24:39,030
that we've we've got the absolute value

481
00:24:36,269 --> 00:24:40,769
routine here's what it looks like oh and

482
00:24:39,029 --> 00:24:44,250
while we're at it you know what else we

483
00:24:40,769 --> 00:25:03,410
should probably do is is let's do the

484
00:24:44,250 --> 00:25:08,549
other one too so this is what we were

485
00:25:03,410 --> 00:25:10,800
doing before right so hopefully we can

486
00:25:08,549 --> 00:25:17,369
take a look at what these two routines

487
00:25:10,799 --> 00:25:18,960
do right I'll I'll label them one and

488
00:25:17,369 --> 00:25:20,639
two so we can see because I'm just

489
00:25:18,960 --> 00:25:26,250
curious like what we were getting before

490
00:25:20,640 --> 00:25:27,240
with this absolute values all right so

491
00:25:26,250 --> 00:25:29,549
if you take a look at what these

492
00:25:27,240 --> 00:25:32,039
compiled to here it's not going to be

493
00:25:29,549 --> 00:25:34,379
very instructive because these are non

494
00:25:32,039 --> 00:25:39,450
it looks like we still have something

495
00:25:34,380 --> 00:25:41,160
going on I can't no no that's right

496
00:25:39,450 --> 00:25:43,590
I just don't know what that with this

497
00:25:41,160 --> 00:25:46,560
little I don't know what that little

498
00:25:43,589 --> 00:25:48,480
orange checkmark means no if that's a

499
00:25:46,559 --> 00:25:50,220
bad boy I was gonna say is we don't

500
00:25:48,480 --> 00:25:52,890
really have the compiler options in here

501
00:25:50,220 --> 00:25:55,019
for optimization and so we don't really

502
00:25:52,890 --> 00:25:56,550
know what it's going to do when it's

503
00:25:55,019 --> 00:26:00,509
asked to produce you know code that's

504
00:25:56,549 --> 00:26:02,639
more usable so if I just grab like a

505
00:26:00,509 --> 00:26:04,259
bunch of stuff here so at least the

506
00:26:02,640 --> 00:26:08,759
thing knows like you know we don't need

507
00:26:04,259 --> 00:26:12,450
exceptions we do want inlining we don't

508
00:26:08,759 --> 00:26:15,089
need float consistency right so if I

509
00:26:12,450 --> 00:26:16,769
just get rid of some of these ones that

510
00:26:15,089 --> 00:26:20,480
we don't care about and just focus on

511
00:26:16,769 --> 00:26:20,480
some of the optimization ones like this

512
00:26:20,849 --> 00:26:28,459
here's what this will produce right so

513
00:26:24,559 --> 00:26:30,990
supposedly that's doing the right thing

514
00:26:28,460 --> 00:26:32,549
right you can see here that and it's

515
00:26:30,990 --> 00:26:38,370
doing with the load so it's not

516
00:26:32,549 --> 00:26:51,419
generating the value right for reasons

517
00:26:38,369 --> 00:26:55,169
that I could not tell you yeah I don't

518
00:26:51,420 --> 00:26:57,779
know feel like and looking at these here

519
00:26:55,170 --> 00:26:59,850
I just don't even know why like for some

520
00:26:57,779 --> 00:27:03,420
reason it thinks that it needs to do

521
00:26:59,849 --> 00:27:06,149
this this load even though here it knows

522
00:27:03,420 --> 00:27:09,320
it can do it I guess because it's just

523
00:27:06,150 --> 00:27:12,750
happens to be F abs I guess I don't know

524
00:27:09,319 --> 00:27:15,179
but it looking at what it's doing here

525
00:27:12,750 --> 00:27:16,890
for some reason this D word pointer load

526
00:27:15,180 --> 00:27:19,230
it's doing it as a memory operand which

527
00:27:16,890 --> 00:27:20,880
is the correct thing to do here and it's

528
00:27:19,230 --> 00:27:23,970
not doing it here it's doing a move

529
00:27:20,880 --> 00:27:27,030
aligned and then an and now it's a move

530
00:27:23,970 --> 00:27:28,470
aligned so the compiler even knows that

531
00:27:27,029 --> 00:27:31,079
this thing could be a memory operand

532
00:27:28,470 --> 00:27:33,240
because it is aligned so it you know cuz

533
00:27:31,079 --> 00:27:39,899
unaligned memory operands fault on non

534
00:27:33,240 --> 00:27:41,250
vivre non the prefix instructions so

535
00:27:39,900 --> 00:27:43,350
I'll be honest they don't really

536
00:27:41,250 --> 00:27:47,160
understand why it generated this code

537
00:27:43,349 --> 00:27:49,609
that seems just like bad code gen maybe

538
00:27:47,160 --> 00:27:52,830
there is a reason for it I don't know

539
00:27:49,609 --> 00:27:58,229
but you know off you go cuz a move

540
00:27:52,829 --> 00:27:59,689
followed by an and in that way it just

541
00:27:58,230 --> 00:28:04,500
doesn't make any sense

542
00:27:59,690 --> 00:28:07,220
like I just don't know I I don't know

543
00:28:04,500 --> 00:28:07,220
what the point of that is

544
00:28:09,119 --> 00:28:19,679
oh never mind no no I do see so for some

545
00:28:13,799 --> 00:28:22,470
reason I see what's going on it didn't

546
00:28:19,680 --> 00:28:29,400
do it because it thinks it needs to load

547
00:28:22,470 --> 00:28:32,519
out of our CX the address of this which

548
00:28:29,400 --> 00:28:38,990
is completely nonsensical because this

549
00:28:32,519 --> 00:28:41,069
is just I mean that's that's just a

550
00:28:38,990 --> 00:28:42,690
register like that should just be in a

551
00:28:41,069 --> 00:28:47,689
register when this routine is called

552
00:28:42,690 --> 00:28:49,830
right I mean that should just be an X mm

553
00:28:47,690 --> 00:28:52,259
whatever the first pass registers I

554
00:28:49,829 --> 00:28:53,789
don't even remember which one it is but

555
00:28:52,259 --> 00:28:57,750
that should just be in the register so

556
00:28:53,789 --> 00:29:02,549
so I I have no idea why it why it would

557
00:28:57,750 --> 00:29:06,539
do that maybe it's cuz it can't see the

558
00:29:02,549 --> 00:29:10,289
call sites I don't know so anyway these

559
00:29:06,539 --> 00:29:12,480
all look really good and what I'm not

560
00:29:10,289 --> 00:29:17,609
sure about is so where are all these ifs

561
00:29:12,480 --> 00:29:23,220
coming from in my code is it like a

562
00:29:17,609 --> 00:29:25,529
compiler version thing or or like are we

563
00:29:23,220 --> 00:29:27,210
just getting unlucky like because I mean

564
00:29:25,529 --> 00:29:29,339
I can go write this code it's not a big

565
00:29:27,210 --> 00:29:33,090
deal but I'm just not sure I understand

566
00:29:29,339 --> 00:29:34,589
why the compiler is outputting all of

567
00:29:33,089 --> 00:29:38,939
these fish statements I don't know where

568
00:29:34,589 --> 00:29:40,349
they're coming from right I'm just I

569
00:29:38,940 --> 00:29:43,049
just don't understand because we're

570
00:29:40,349 --> 00:29:44,490
getting a bunch of them we only asked

571
00:29:43,049 --> 00:29:47,250
for one if statement but we're getting

572
00:29:44,490 --> 00:29:50,549
three right and so I really just don't

573
00:29:47,250 --> 00:29:55,049
know why so unfortunately this is not

574
00:29:50,549 --> 00:29:56,849
particularly helpful and I guess you

575
00:29:55,049 --> 00:29:58,009
know I can't really figure out where

576
00:29:56,849 --> 00:30:00,719
that's coming from

577
00:29:58,009 --> 00:30:03,150
I'm gonna just go ahead and try then

578
00:30:00,720 --> 00:30:06,450
because I don't know what else to do if

579
00:30:03,150 --> 00:30:07,680
I just you know if we look we say okay

580
00:30:06,450 --> 00:30:10,380
we're going to come here we're gonna

581
00:30:07,680 --> 00:30:13,289
look down here we see all these compare

582
00:30:10,380 --> 00:30:17,190
instructions and all these jumps jump

583
00:30:13,289 --> 00:30:19,740
jump jump jump right let's just see what

584
00:30:17,190 --> 00:30:22,890
happens if we replace the absolute value

585
00:30:19,740 --> 00:30:26,490
with our other code for absolute value

586
00:30:22,890 --> 00:30:30,230
right so if I take a look in here and I

587
00:30:26,490 --> 00:30:33,630
say let's just you know go ahead and and

588
00:30:30,230 --> 00:30:37,710
and do you know this this same pattern

589
00:30:33,630 --> 00:30:40,290
here but let's do it in here in fact we

590
00:30:37,710 --> 00:30:42,509
could even just call this version of the

591
00:30:40,289 --> 00:30:44,069
function I'm not sure that that makes a

592
00:30:42,509 --> 00:30:46,680
lot of sense but either way

593
00:30:44,069 --> 00:30:47,849
so suppose we do this and we say all

594
00:30:46,680 --> 00:30:50,460
right we're going to do the exact same

595
00:30:47,849 --> 00:30:54,240
thing only now instead of doing the NPS

596
00:30:50,460 --> 00:31:02,009
with something that got passed in we're

597
00:30:54,240 --> 00:31:07,769
actually going to have to do an mm

598
00:31:02,009 --> 00:31:10,500
convert here like so and what we're

599
00:31:07,769 --> 00:31:14,359
gonna do is we're going to and with a

600
00:31:10,500 --> 00:31:17,250
with a set 1 of this thing right and

601
00:31:14,359 --> 00:31:20,219
also since this is not wide these can be

602
00:31:17,250 --> 00:31:22,619
set 1 SS is I don't remember if that's

603
00:31:20,220 --> 00:31:25,799
the intrinsic though it may be that you

604
00:31:22,619 --> 00:31:30,689
just do an mm conferred yeah I think you

605
00:31:25,799 --> 00:31:40,740
just do a convert s sf32 no convert f/32

606
00:31:30,690 --> 00:31:43,110
SS convert a the naming scheme it's just

607
00:31:40,740 --> 00:31:46,200
the convert I just need to convert my

608
00:31:43,109 --> 00:31:47,729
float in here and and you know it's

609
00:31:46,200 --> 00:31:53,600
always an adventure of me trying to

610
00:31:47,730 --> 00:31:56,220
remember the crazy names naming scheme

611
00:31:53,599 --> 00:32:00,389
okay so it's not you don't switch the

612
00:31:56,220 --> 00:32:04,009
f32 in the SS I guess which doesn't make

613
00:32:00,390 --> 00:32:04,009
any sense to me but okay

614
00:32:08,849 --> 00:32:17,259
unless it's unless it is a set oh you

615
00:32:14,380 --> 00:32:23,080
know what would help here just give me

616
00:32:17,259 --> 00:32:24,339
the vanilla stuff no so it is mms it's

617
00:32:23,079 --> 00:32:27,189
it's oh nevermind what am I talking

618
00:32:24,339 --> 00:32:31,659
about it is that so I don't know all

619
00:32:27,190 --> 00:32:34,390
right so if we just set these so we're

620
00:32:31,660 --> 00:32:36,340
just basically going to do a set s s

621
00:32:34,390 --> 00:32:38,080
instead of a set one because we don't we

622
00:32:36,339 --> 00:32:40,869
only need to set the bottom we don't

623
00:32:38,079 --> 00:32:46,389
need to set them all and then I'm going

624
00:32:40,869 --> 00:32:49,389
to load just this one value here so I

625
00:32:46,390 --> 00:32:51,040
think that should be fine and now I just

626
00:32:49,390 --> 00:32:54,370
want to see because again this is AK

627
00:32:51,039 --> 00:32:57,099
same thing we load the mask we put you

628
00:32:54,369 --> 00:33:00,579
know we put the mask into the next

629
00:32:57,099 --> 00:33:04,869
member edge astir we and it so we get

630
00:33:00,579 --> 00:33:07,990
rid of the bit and then we convert we do

631
00:33:04,869 --> 00:33:11,979
convert s sf32 to get the result out

632
00:33:07,990 --> 00:33:13,980
right so if I actually go back and now

633
00:33:11,980 --> 00:33:16,450
look at the assembly language for that

634
00:33:13,980 --> 00:33:20,019
and just say look are we still seeing

635
00:33:16,450 --> 00:33:23,710
all these calm I you know all these

636
00:33:20,019 --> 00:33:26,619
jumps and you can see there's actually

637
00:33:23,710 --> 00:33:32,170
no jumps now at least I don't see any

638
00:33:26,619 --> 00:33:39,509
wait what's this though I've got like a

639
00:33:32,170 --> 00:33:39,509
call in there now what's the call to

640
00:33:47,048 --> 00:34:03,749
is the call to this so now it's doing a

641
00:33:57,460 --> 00:34:07,509
call it stopped welding it in there and

642
00:34:03,749 --> 00:34:10,269
there's still those comparisons alright

643
00:34:07,509 --> 00:34:12,460
so that was worse I'm so stumped right

644
00:34:10,269 --> 00:34:21,068
now where are those comparisons coming

645
00:34:12,460 --> 00:34:24,760
from so then at that F ABS F was fine

646
00:34:21,068 --> 00:34:27,878
that was not causing any problems so I

647
00:34:24,760 --> 00:34:30,849
guess that's can just remain and in fact

648
00:34:27,878 --> 00:34:34,118
it seemed to be able to do a better job

649
00:34:30,849 --> 00:34:35,530
when it was there probably just because

650
00:34:34,119 --> 00:34:36,700
it's left code and it knows that's an

651
00:34:35,530 --> 00:34:46,019
intrinsic for itself

652
00:34:36,699 --> 00:34:46,019
I guess cuz the call is now gone right

653
00:34:46,858 --> 00:34:54,398
so I don't know I'm gonna start welding

654
00:34:52,418 --> 00:34:59,818
this in because I have no idea what it's

655
00:34:54,398 --> 00:35:03,789
doing right so let's start by putting

656
00:34:59,818 --> 00:35:06,730
this piece of code directly into the

657
00:35:03,789 --> 00:35:08,949
lighting right because I just again I

658
00:35:06,730 --> 00:35:12,389
have no idea what it's doing so since I

659
00:35:08,949 --> 00:35:16,048
just don't know I feel like I need to

660
00:35:12,389 --> 00:35:22,719
start inspecting this very carefully so

661
00:35:16,048 --> 00:35:26,730
this here is T right and the diffuse

662
00:35:22,719 --> 00:35:29,318
that lists in this case is going to be

663
00:35:26,730 --> 00:35:30,670
I'm sorry the öktem coefficient that's

664
00:35:29,318 --> 00:35:34,568
going to be coming from the diffuse

665
00:35:30,670 --> 00:35:40,630
atlas here right like that and this R

666
00:35:34,568 --> 00:35:44,889
that we've got the R is going to be what

667
00:35:40,630 --> 00:35:48,450
we pass in here right so that's the you

668
00:35:44,889 --> 00:35:48,449
know it's the sample n right

669
00:35:58,150 --> 00:36:02,599
so take a look at that um and if you

670
00:36:01,519 --> 00:36:04,280
take a look at what's going on here we

671
00:36:02,599 --> 00:36:06,980
also don't really need this to be packed

672
00:36:04,280 --> 00:36:11,660
anymore because we're loading these out

673
00:36:06,980 --> 00:36:15,380
anyway so we can just you know look at

674
00:36:11,659 --> 00:36:17,269
them like that right so that's pretty

675
00:36:15,380 --> 00:36:19,039
straightforward and I think that you

676
00:36:17,269 --> 00:36:22,099
know that wouldn't change the behavior

677
00:36:19,039 --> 00:36:24,019
of this thing at all right

678
00:36:22,099 --> 00:36:25,789
that's so we're not really doing

679
00:36:24,019 --> 00:36:34,519
anything weird here all we're doing is

680
00:36:25,789 --> 00:36:35,869
saying okay wait no this is what that is

681
00:36:34,519 --> 00:36:38,780
what we're running so I don't need that

682
00:36:35,869 --> 00:36:40,970
yeah so that's just the same you know

683
00:36:38,780 --> 00:36:42,260
there's nothing there's there's nothing

684
00:36:40,969 --> 00:36:44,149
different about that it's just the same

685
00:36:42,260 --> 00:36:46,520
thing as we were running before but now

686
00:36:44,150 --> 00:36:48,260
we've welded it in now that should not

687
00:36:46,519 --> 00:36:50,088
really change anything I don't think

688
00:36:48,260 --> 00:36:51,920
because it was already being welded in

689
00:36:50,088 --> 00:36:53,690
by the compiler but every time you

690
00:36:51,920 --> 00:36:56,690
change the code it helps to look because

691
00:36:53,690 --> 00:36:58,130
at this point right we have no idea what

692
00:36:56,690 --> 00:36:59,480
the compiler is doing we really don't

693
00:36:58,130 --> 00:37:01,910
know why it's making these decisions

694
00:36:59,480 --> 00:37:04,130
that's what I'm trying to figure out so

695
00:37:01,909 --> 00:37:06,679
I just want to test every change I make

696
00:37:04,130 --> 00:37:09,789
just to see and make sure that I'm still

697
00:37:06,679 --> 00:37:13,250
getting these spurious comparison here

698
00:37:09,789 --> 00:37:15,108
and there is an actual there is one

699
00:37:13,250 --> 00:37:17,179
compare right so it makes sense that

700
00:37:15,108 --> 00:37:19,219
there'd be one of these if the compiler

701
00:37:17,179 --> 00:37:21,608
just did it directly I just don't

702
00:37:19,219 --> 00:37:24,608
understand where there's three right

703
00:37:21,608 --> 00:37:27,679
okay so we've we've now put that

704
00:37:24,608 --> 00:37:30,529
octahedral from unit vector call in

705
00:37:27,679 --> 00:37:31,818
directly and these now should all be

706
00:37:30,530 --> 00:37:34,430
pretty straightforward you this is just

707
00:37:31,818 --> 00:37:39,380
three multiplies these are just some

708
00:37:34,429 --> 00:37:40,539
calls to floor there's really just a lot

709
00:37:39,380 --> 00:37:44,619
in there

710
00:37:40,539 --> 00:37:44,619
you know I'm saying I got a re-up mighty

711
00:37:57,820 --> 00:38:04,519
yeah um so yeah I don't really know

712
00:38:03,170 --> 00:38:06,619
what's going on but again I'm just gonna

713
00:38:04,519 --> 00:38:10,309
continue down this path until I find out

714
00:38:06,619 --> 00:38:13,550
so I'm gonna go grab octahedral from

715
00:38:10,309 --> 00:38:16,969
unit vector and I'm gonna paste that in

716
00:38:13,550 --> 00:38:21,230
directly as well so now instead of the

717
00:38:16,969 --> 00:38:23,239
UV getting computed by a call I'm going

718
00:38:21,230 --> 00:38:26,690
to ask it to convert compute to the UV

719
00:38:23,239 --> 00:38:33,589
directly and so if this now is going to

720
00:38:26,690 --> 00:38:35,990
be UV like so then I can say okay well R

721
00:38:33,590 --> 00:38:38,600
is the thing that's going to get used in

722
00:38:35,989 --> 00:38:41,419
here so previously where we were doing

723
00:38:38,599 --> 00:38:43,309
like vxv whatever that's all going to be

724
00:38:41,420 --> 00:38:48,800
ours that are you know because there

725
00:38:43,309 --> 00:38:57,829
isn't a V anymore and I think that's it

726
00:38:48,800 --> 00:39:00,320
right UV UV UV UV and so that's now the

727
00:38:57,829 --> 00:39:03,199
code welded together so now there's no

728
00:39:00,320 --> 00:39:05,240
jumps that were there's no calls that

729
00:39:03,199 --> 00:39:07,189
were asking the compiler to do so now

730
00:39:05,239 --> 00:39:09,108
we've told it to inline everything now

731
00:39:07,190 --> 00:39:10,849
presumably because it was already in

732
00:39:09,108 --> 00:39:12,889
lining everything again we should still

733
00:39:10,849 --> 00:39:17,960
end up with roughly the same code so I

734
00:39:12,889 --> 00:39:20,139
don't expect to see oh crap it's been

735
00:39:17,960 --> 00:39:22,869
staring me in the face the entire time

736
00:39:20,139 --> 00:39:26,139
that's where it's coming from

737
00:39:22,869 --> 00:39:26,140
it's this

738
00:39:33,068 --> 00:39:38,838
that's what it that's what it is right

739
00:39:37,480 --> 00:39:44,510
duh

740
00:39:38,838 --> 00:39:46,759
so here was one test and here were the

741
00:39:44,510 --> 00:39:47,960
other two there and there I don't know I

742
00:39:46,760 --> 00:39:55,730
mean I don't know why I didn't see that

743
00:39:47,960 --> 00:39:57,679
but just didn't so these functions here

744
00:39:55,730 --> 00:40:01,130
these sign of functions I think that's

745
00:39:57,679 --> 00:40:02,929
really all we needed to look at I

746
00:40:01,130 --> 00:40:07,369
probably didn't need to go through all

747
00:40:02,929 --> 00:40:10,690
that but hey so these are pretty

748
00:40:07,369 --> 00:40:10,690
straightforward right

749
00:40:10,780 --> 00:40:15,980
you know I don't know why the compiler

750
00:40:14,539 --> 00:40:17,389
wouldn't understand that but I think

751
00:40:15,980 --> 00:40:19,818
it's just because maybe it's a little

752
00:40:17,389 --> 00:40:24,889
too subtle for it to suss out you know I

753
00:40:19,818 --> 00:40:28,880
don't blame it but it's pretty

754
00:40:24,889 --> 00:40:30,858
straightforward for us to just do the

755
00:40:28,880 --> 00:40:33,858
same thing we did with absolute value

756
00:40:30,858 --> 00:40:36,980
right so if we want to take a look at

757
00:40:33,858 --> 00:40:38,480
what's going on here in the sign of all

758
00:40:36,980 --> 00:40:42,199
we're trying to do is return one or

759
00:40:38,480 --> 00:40:44,750
negative one right and we just want it

760
00:40:42,199 --> 00:40:48,739
to match the sign of the input so what

761
00:40:44,750 --> 00:40:52,929
we can do is we could say look if we

762
00:40:48,739 --> 00:40:57,169
just load up a mask here for this thing

763
00:40:52,929 --> 00:40:59,088
like so and we assume that the value

764
00:40:57,170 --> 00:41:01,460
that's coming in here is the sign that

765
00:40:59,088 --> 00:41:03,380
we we wanted and we know that we want

766
00:41:01,460 --> 00:41:05,318
one to be returned and we just want to

767
00:41:03,380 --> 00:41:13,910
flip the sign one way or the other

768
00:41:05,318 --> 00:41:18,920
that's pretty straightforward because if

769
00:41:13,909 --> 00:41:22,730
we take whatever the value if we take

770
00:41:18,920 --> 00:41:26,240
just that bit from the value and then we

771
00:41:22,730 --> 00:41:28,969
use one as the other value we can just

772
00:41:26,239 --> 00:41:32,118
blend the two together by taking just

773
00:41:28,969 --> 00:41:34,568
the one bit from the input value and the

774
00:41:32,119 --> 00:41:37,039
rest of the bits from the value one and

775
00:41:34,568 --> 00:41:39,019
merging those together will just give us

776
00:41:37,039 --> 00:41:42,500
the answer so we'd never need to do a

777
00:41:39,019 --> 00:41:42,900
test here there's there's no reason why

778
00:41:42,500 --> 00:41:45,869
we would

779
00:41:42,900 --> 00:41:47,960
ever have to do a test here right so if

780
00:41:45,869 --> 00:41:50,818
we take a look at what's happening

781
00:41:47,960 --> 00:41:55,079
because we're an SSC blah blah blah like

782
00:41:50,818 --> 00:41:58,500
four point whatever we should be able to

783
00:41:55,079 --> 00:42:00,809
just grab a blend and basically say look

784
00:41:58,500 --> 00:42:03,568
here's the blend that we're going to do

785
00:42:00,809 --> 00:42:06,240
and what you can do here is you can see

786
00:42:03,568 --> 00:42:11,548
how this is working if the mask is set

787
00:42:06,239 --> 00:42:13,169
it grabs from from B so if it's one it's

788
00:42:11,548 --> 00:42:15,980
gonna grab from this one if it's zero

789
00:42:13,170 --> 00:42:20,010
it's gonna grab from the original right

790
00:42:15,980 --> 00:42:22,559
so we don't have to use a negation here

791
00:42:20,010 --> 00:42:26,369
and this is why I say like really for

792
00:42:22,559 --> 00:42:28,890
more optimal code like I feel like if we

793
00:42:26,369 --> 00:42:32,390
look at the absolute value code I feel

794
00:42:28,889 --> 00:42:36,058
like the easier thing is just to load

795
00:42:32,389 --> 00:42:38,759
the the non nodded value you know I mean

796
00:42:36,059 --> 00:42:40,798
it doesn't really matter but like you

797
00:42:38,760 --> 00:42:45,028
can see like sign bit from you see how

798
00:42:40,798 --> 00:42:47,460
this is doing this right like so it's

799
00:42:45,028 --> 00:42:49,829
just better if you do this and and not

800
00:42:47,460 --> 00:42:52,798
is a little confusing because I don't

801
00:42:49,829 --> 00:42:55,380
remember who gets knotted so I find it's

802
00:42:52,798 --> 00:42:57,538
best to always check so you see it's a

803
00:42:55,380 --> 00:42:59,760
that gets knotted that's the opposite of

804
00:42:57,539 --> 00:43:01,890
my intuition usually and so you know

805
00:42:59,760 --> 00:43:05,278
since we want the mask to be knotted the

806
00:43:01,889 --> 00:43:06,808
mask would have to come first so this

807
00:43:05,278 --> 00:43:08,429
will just automatically not the mask

808
00:43:06,809 --> 00:43:10,619
that way everyone's loading the same

809
00:43:08,429 --> 00:43:14,659
value so it can just store just one

810
00:43:10,619 --> 00:43:18,829
value which is the high bit right um and

811
00:43:14,659 --> 00:43:18,828
you can always just load that same value

812
00:43:20,510 --> 00:43:27,990
so that seems good right so when we load

813
00:43:25,559 --> 00:43:32,010
this up you know we're really just doing

814
00:43:27,989 --> 00:43:33,419
this sign bit from here and we could

815
00:43:32,010 --> 00:43:35,069
even have just a thing that does that

816
00:43:33,420 --> 00:43:39,710
automatically probably but it doesn't

817
00:43:35,068 --> 00:43:39,710
matter so I'm going to do a blend V here

818
00:43:42,559 --> 00:43:50,779
and load that up again I'm gonna do a

819
00:43:46,070 --> 00:43:53,240
blend V here and since this is wide I

820
00:43:50,780 --> 00:43:56,960
don't think there's an SS version right

821
00:43:53,239 --> 00:43:58,849
meaning there's not that so it's gonna

822
00:43:56,960 --> 00:44:00,470
do this wide whether we like it or not

823
00:43:58,849 --> 00:44:03,889
and that's fine because we're only gonna

824
00:44:00,469 --> 00:44:05,269
use the bottom anyway so whatever so

825
00:44:03,889 --> 00:44:08,420
anyway we've got our mask

826
00:44:05,269 --> 00:44:10,190
and we know we know that it's if it's

827
00:44:08,420 --> 00:44:15,889
zero somewhere it's gonna take the lower

828
00:44:10,190 --> 00:44:17,690
part so we want our 1.0 to be what we're

829
00:44:15,889 --> 00:44:23,839
taking most of and then just wear that

830
00:44:17,690 --> 00:44:28,670
high bit is set we want our value to be

831
00:44:23,840 --> 00:44:32,240
there right and that's it that is the

832
00:44:28,670 --> 00:44:35,809
entire sign of operation that'll just

833
00:44:32,239 --> 00:44:39,139
merge those two together right and so I

834
00:44:35,809 --> 00:44:41,480
think now if we look we should be

835
00:44:39,139 --> 00:44:45,440
getting rid of all of the jumps except

836
00:44:41,480 --> 00:44:48,409
for this one here and we'll take a look

837
00:44:45,440 --> 00:44:51,230
at how we could get rid of that jump as

838
00:44:48,409 --> 00:44:54,139
well in a second here because we don't

839
00:44:51,230 --> 00:44:57,559
need that one either so we might as well

840
00:44:54,139 --> 00:44:59,359
just especially because it's not

841
00:44:57,559 --> 00:45:00,710
necessarily very predictable I mean it

842
00:44:59,360 --> 00:45:02,840
might be but it you know I don't

843
00:45:00,710 --> 00:45:05,510
actually know so there's that one

844
00:45:02,840 --> 00:45:08,840
compare that's this line and here's the

845
00:45:05,510 --> 00:45:10,580
J and B which this J and B is for the

846
00:45:08,840 --> 00:45:12,380
Comus because you can see the flags are

847
00:45:10,579 --> 00:45:13,849
not touched I don't think anyone here

848
00:45:12,380 --> 00:45:17,210
she's doing the compare leaving the

849
00:45:13,849 --> 00:45:19,190
flags SS jumping down here right so I

850
00:45:17,210 --> 00:45:20,449
think and now you can see our these are

851
00:45:19,190 --> 00:45:24,230
our two blends that's where those

852
00:45:20,449 --> 00:45:27,469
comesss used to be so I think we're good

853
00:45:24,230 --> 00:45:30,619
right I think we're all good so I

854
00:45:27,469 --> 00:45:33,859
believe we've still got everything nice

855
00:45:30,619 --> 00:45:35,480
and and and happy here all of our

856
00:45:33,860 --> 00:45:42,440
transmittance seems so we're working

857
00:45:35,480 --> 00:45:44,869
okay at some point we probably need to

858
00:45:42,440 --> 00:45:46,550
find some better ways to test this but

859
00:45:44,869 --> 00:45:50,659
you know so we could just see where the

860
00:45:46,550 --> 00:45:56,190
light scatters to for now is pretty good

861
00:45:50,659 --> 00:45:57,239
all right so given all that we might as

862
00:45:56,190 --> 00:45:58,740
well just finish what we're doing

863
00:45:57,239 --> 00:46:01,199
because that inspection kind of led down

864
00:45:58,739 --> 00:46:02,729
a little bit of a optimization path

865
00:46:01,199 --> 00:46:12,149
there we might as well finish off by

866
00:46:02,730 --> 00:46:15,659
just getting rid of these jumps right so

867
00:46:12,150 --> 00:46:17,338
if we would like to we can see here that

868
00:46:15,659 --> 00:46:19,440
you know we're doing these absolute

869
00:46:17,338 --> 00:46:21,269
value sums here those should all be

870
00:46:19,440 --> 00:46:23,460
straightforward in the UV estrogen sinus

871
00:46:21,269 --> 00:46:25,798
all of this stuff can just be done this

872
00:46:23,460 --> 00:46:29,789
is the only part that we don't know how

873
00:46:25,798 --> 00:46:35,099
to do yet and so all we really need to

874
00:46:29,789 --> 00:46:37,289
do is is use another blend right so we

875
00:46:35,099 --> 00:46:40,700
know that this would be the condition

876
00:46:37,289 --> 00:46:43,829
this our Z less than zero

877
00:46:40,699 --> 00:46:46,078
really this you can see these two

878
00:46:43,829 --> 00:46:52,380
computations they just compute temporary

879
00:46:46,079 --> 00:46:54,750
about variables right so since these

880
00:46:52,380 --> 00:46:56,640
just compute temporary variables really

881
00:46:54,750 --> 00:46:58,889
this is the only thing that's happening

882
00:46:56,639 --> 00:47:00,420
in here right like we can just compile

883
00:46:58,889 --> 00:47:02,400
this code and it's exactly the same

884
00:47:00,420 --> 00:47:04,650
because computing these two temporary

885
00:47:02,400 --> 00:47:06,900
variables doesn't do anything unless you

886
00:47:04,650 --> 00:47:09,960
then assign the mating so this is really

887
00:47:06,900 --> 00:47:13,980
the only part we need and so if we want

888
00:47:09,960 --> 00:47:18,449
to we can just do like a basic

889
00:47:13,980 --> 00:47:23,990
conditional assignment here and just say

890
00:47:18,449 --> 00:47:29,449
hey yeah like UV x equals like you know

891
00:47:23,989 --> 00:47:29,449
mask assign something like this

892
00:47:38,909 --> 00:47:47,379
where we just say all right we just need

893
00:47:41,619 --> 00:47:53,829
a mask here and you know we'll produce

894
00:47:47,380 --> 00:47:55,750
that mask somehow right this is what we

895
00:47:53,829 --> 00:47:57,549
need to do now it doesn't really make a

896
00:47:55,750 --> 00:47:59,019
lot of sense for us to do this in calls

897
00:47:57,550 --> 00:48:02,769
because like all of this should really

898
00:47:59,019 --> 00:48:04,030
be done in f/32 X's soon anyway because

899
00:48:02,769 --> 00:48:07,059
we would want all this to kind of

900
00:48:04,030 --> 00:48:09,760
dovetail into our other paths here right

901
00:48:07,059 --> 00:48:12,369
so I mean you know I'm not gonna

902
00:48:09,760 --> 00:48:17,530
overthink this I'm just gonna say okay

903
00:48:12,369 --> 00:48:20,589
look let's make an f32 for X here

904
00:48:17,530 --> 00:48:25,990
that's our Z mask and that's just gonna

905
00:48:20,590 --> 00:48:27,760
be equal to the that our Z value so it's

906
00:48:25,989 --> 00:48:33,429
just like look whatever the our Z value

907
00:48:27,760 --> 00:48:37,690
is if it's less than do we have a zero

908
00:48:33,429 --> 00:48:41,289
if 32x yeah so basically if our Z is

909
00:48:37,690 --> 00:48:45,960
less than zero then what we want to do

910
00:48:41,289 --> 00:48:49,869
is we want to use that to do our our

911
00:48:45,960 --> 00:48:53,050
blend I don't know yeah we've got so

912
00:48:49,869 --> 00:48:54,219
it's just this it's just select so from

913
00:48:53,050 --> 00:48:57,750
there I can just say all right

914
00:48:54,219 --> 00:49:01,539
our UVs are gonna be selected from that

915
00:48:57,750 --> 00:49:03,820
and then we don't really have a good way

916
00:49:01,539 --> 00:49:05,409
of pulling these out yet and again I

917
00:49:03,820 --> 00:49:07,660
don't really know that we want to but

918
00:49:05,409 --> 00:49:09,190
you know so temporarily I might just

919
00:49:07,659 --> 00:49:10,960
kind of pull them out just to make sure

920
00:49:09,190 --> 00:49:14,320
things work okay but then we can we can

921
00:49:10,960 --> 00:49:20,800
move on so if we just do a select here

922
00:49:14,320 --> 00:49:23,640
would look like this right so it is just

923
00:49:20,800 --> 00:49:23,640
that masks assign

924
00:49:27,690 --> 00:49:33,059
right and then again the only problem

925
00:49:30,460 --> 00:49:35,110
we're gonna have now oops sorry

926
00:49:33,059 --> 00:49:39,489
the only problem that we're gonna have

927
00:49:35,110 --> 00:49:41,740
now is this stuff is not all in f/32 X's

928
00:49:39,489 --> 00:49:45,279
right so like all of these things are

929
00:49:41,739 --> 00:50:02,259
not actually f32 X's and we kind of want

930
00:49:45,280 --> 00:50:03,700
them to be that right okay so so if you

931
00:50:02,260 --> 00:50:05,850
take a look at how these are getting

932
00:50:03,699 --> 00:50:08,349
extracted here

933
00:50:05,849 --> 00:50:11,409
Martin's part pointed out something that

934
00:50:08,349 --> 00:50:13,839
was really smart and it just was me kind

935
00:50:11,409 --> 00:50:15,759
of being a space cadet so generally

936
00:50:13,840 --> 00:50:18,579
speaking extract is just not a very good

937
00:50:15,760 --> 00:50:20,650
idea right if you were actually trying

938
00:50:18,579 --> 00:50:22,329
to extract an integer value into a

939
00:50:20,650 --> 00:50:24,760
general purpose register then that's

940
00:50:22,329 --> 00:50:26,349
what you would want to do but we don't

941
00:50:24,760 --> 00:50:29,860
actually want to do that here in a lot

942
00:50:26,349 --> 00:50:31,449
of cases we just still want a float so

943
00:50:29,860 --> 00:50:34,510
really what we want to be doing is just

944
00:50:31,449 --> 00:50:37,029
this always so we always want extract

945
00:50:34,510 --> 00:50:41,340
zero but we just want to shut down and

946
00:50:37,030 --> 00:50:45,430
put the value X looking for into the low

947
00:50:41,340 --> 00:50:49,720
float of the packed version right

948
00:50:45,429 --> 00:50:51,789
because there is no x87 code happening

949
00:50:49,719 --> 00:50:53,709
here right so we're never trying to

950
00:50:51,789 --> 00:50:55,719
transit something out of the SSE

951
00:50:53,710 --> 00:51:01,659
registers out of the xmm registers and

952
00:50:55,719 --> 00:51:03,129
put them in to the sorry we're never

953
00:51:01,659 --> 00:51:05,589
trying to transit them out and then put

954
00:51:03,130 --> 00:51:07,059
them into somewhere else like we're not

955
00:51:05,590 --> 00:51:09,250
moving them out of the register store

956
00:51:07,059 --> 00:51:12,340
we're this is strictly compiler dressing

957
00:51:09,250 --> 00:51:14,710
to say hey you know we need to move this

958
00:51:12,340 --> 00:51:16,240
down to the to the first Lane just

959
00:51:14,710 --> 00:51:18,369
because we know you always generate

960
00:51:16,239 --> 00:51:20,349
everything in the first Lane I'll deal

961
00:51:18,369 --> 00:51:22,059
you just say where it was but there is

962
00:51:20,349 --> 00:51:25,989
no way for the tell the compiler that

963
00:51:22,059 --> 00:51:30,759
like so anytime we down shift from SSE

964
00:51:25,989 --> 00:51:33,279
wide to compiler floats it's too dumb to

965
00:51:30,760 --> 00:51:34,450
know like that we might just want to

966
00:51:33,280 --> 00:51:37,780
leave it in one lane and there's some

967
00:51:34,449 --> 00:51:40,449
reasons why at least in the old days

968
00:51:37,780 --> 00:51:42,640
I don't know if it's still true but

969
00:51:40,449 --> 00:51:45,669
there are some reasons why you might not

970
00:51:42,639 --> 00:51:48,489
want to do that anyway the reason is

971
00:51:45,670 --> 00:51:51,730
because at least on the older chips if

972
00:51:48,489 --> 00:51:55,269
you you'll notice that these are it's

973
00:51:51,730 --> 00:51:57,340
not purely set-dressing even at the

974
00:51:55,269 --> 00:52:00,820
lower level so if you look at like a

975
00:51:57,340 --> 00:52:03,460
mole PS right you can see that it's

976
00:52:00,820 --> 00:52:08,440
generating an actual mole PS assembly

977
00:52:03,460 --> 00:52:10,300
mnemonic and instruction SS is generally

978
00:52:08,440 --> 00:52:12,880
something different right so it's not

979
00:52:10,300 --> 00:52:15,400
actually purely set dressing you might

980
00:52:12,880 --> 00:52:17,440
say well what the heck like why is there

981
00:52:15,400 --> 00:52:20,740
a mole SS I mean it's the whole the

982
00:52:17,440 --> 00:52:23,829
register is for wide and it takes one

983
00:52:20,739 --> 00:52:28,299
you know cycle to do it so what's the

984
00:52:23,829 --> 00:52:31,900
are sorry for cycles to do it what's the

985
00:52:28,300 --> 00:52:35,350
deal and the answer is at least in older

986
00:52:31,900 --> 00:52:37,780
chips I know it could save power like it

987
00:52:35,349 --> 00:52:42,269
would actually somehow down throttle if

988
00:52:37,780 --> 00:52:44,350
all the code was SS code I think I think

989
00:52:42,269 --> 00:52:46,929
right

990
00:52:44,349 --> 00:52:48,940
whereas PS code has to do the full for

991
00:52:46,929 --> 00:52:51,279
wide and I think it requires more power

992
00:52:48,940 --> 00:52:58,269
I think do not quote me on that but I

993
00:52:51,280 --> 00:53:01,269
seem to recall something like that so

994
00:52:58,269 --> 00:53:03,009
you know if you just take a look at

995
00:53:01,269 --> 00:53:06,730
what's going on there it's pretty clear

996
00:53:03,010 --> 00:53:08,560
that that there could be at least on

997
00:53:06,730 --> 00:53:10,690
certain platforms and I don't know if

998
00:53:08,559 --> 00:53:14,259
it's always true but there could be

999
00:53:10,690 --> 00:53:17,110
reasons why you do want that to always

1000
00:53:14,260 --> 00:53:19,240
be in that first Lane right for power

1001
00:53:17,110 --> 00:53:22,960
reasons so if we take a look at these

1002
00:53:19,239 --> 00:53:24,579
extracts if this extract code here we

1003
00:53:22,960 --> 00:53:27,369
kind of don't want to do this so I'm

1004
00:53:24,579 --> 00:53:34,809
just gonna I'm gonna leave this here and

1005
00:53:27,369 --> 00:53:36,400
say change to convert SS I don't quite

1006
00:53:34,809 --> 00:53:38,049
want to do it yet but that's you know

1007
00:53:36,400 --> 00:53:42,660
that's what we're gonna do I'm gonna do

1008
00:53:38,050 --> 00:53:44,860
an extract here just because again I

1009
00:53:42,659 --> 00:53:47,829
just want to take this one step at a

1010
00:53:44,860 --> 00:53:49,480
time but eventually what we want to do

1011
00:53:47,829 --> 00:53:51,679
is kind of collapse all this code down

1012
00:53:49,480 --> 00:53:54,710
because we can actually do some of it

1013
00:53:51,679 --> 00:53:57,379
- right like so you know there's no any

1014
00:53:54,710 --> 00:53:59,000
reason not to just finish off this

1015
00:53:57,380 --> 00:54:01,430
routine right there's no reason not to

1016
00:53:59,000 --> 00:54:06,530
do that all right so if I go ahead and

1017
00:54:01,429 --> 00:54:08,838
do an extract zero here now we've done

1018
00:54:06,530 --> 00:54:11,510
all this you know in the SSE registers

1019
00:54:08,838 --> 00:54:13,730
and then transited back quote-unquote

1020
00:54:11,510 --> 00:54:17,329
out but you know really it would just be

1021
00:54:13,730 --> 00:54:20,750
staying in lane zero anyway and so I

1022
00:54:17,329 --> 00:54:22,818
think now we should have that entire

1023
00:54:20,750 --> 00:54:26,510
section of the routine just running with

1024
00:54:22,818 --> 00:54:29,358
no branch right so you know now if we

1025
00:54:26,510 --> 00:54:32,569
take a look we shouldn't see any more

1026
00:54:29,358 --> 00:54:34,880
jumps in here it should just be one big

1027
00:54:32,568 --> 00:54:37,670
straight piece of code right that just

1028
00:54:34,880 --> 00:54:40,119
goes straight on down and you know that

1029
00:54:37,670 --> 00:54:44,838
that is exactly what it looks like to me

1030
00:54:40,119 --> 00:54:49,190
right no no branchy branch right nope no

1031
00:54:44,838 --> 00:55:00,889
branch opposed um but again like yet is

1032
00:54:49,190 --> 00:55:04,639
this particularly smart you know not

1033
00:55:00,889 --> 00:55:05,690
really because you can kind of see here

1034
00:55:04,639 --> 00:55:09,489
that we've got some pretty

1035
00:55:05,690 --> 00:55:12,200
straightforward stuff happening with UV

1036
00:55:09,489 --> 00:55:16,729
there's a little bit of a Swizzle going

1037
00:55:12,199 --> 00:55:21,279
on here so it's it's not like 100% the

1038
00:55:16,730 --> 00:55:28,760
same everywhere but it's pretty close

1039
00:55:21,280 --> 00:55:31,790
right so yeah so yeah if we take a look

1040
00:55:28,760 --> 00:55:35,960
at what actually needs to happen here it

1041
00:55:31,789 --> 00:55:39,369
seems like we could probably get some

1042
00:55:35,960 --> 00:55:42,230
free speed up there as well just because

1043
00:55:39,369 --> 00:55:46,130
you know what we're doing here doesn't

1044
00:55:42,230 --> 00:55:47,838
really what we're doing here you know we

1045
00:55:46,130 --> 00:55:49,190
can just get a few free multiplies in or

1046
00:55:47,838 --> 00:55:50,929
whatever like because some of its just

1047
00:55:49,190 --> 00:55:53,358
kind of wide without again without

1048
00:55:50,929 --> 00:55:55,489
really thinking their routine much like

1049
00:55:53,358 --> 00:55:56,838
without really overthinking much if you

1050
00:55:55,489 --> 00:55:59,088
look at everything we're doing

1051
00:55:56,838 --> 00:56:01,190
I think it's literally all just for the

1052
00:55:59,088 --> 00:56:03,949
txt Y computation like there isn't

1053
00:56:01,190 --> 00:56:05,250
anything else that's happening here so

1054
00:56:03,949 --> 00:56:13,250
all were really

1055
00:56:05,250 --> 00:56:15,599
doing at that point is saying well we

1056
00:56:13,250 --> 00:56:20,579
and you know we can also get rid of this

1057
00:56:15,599 --> 00:56:22,349
code now we don't need this so that'll

1058
00:56:20,579 --> 00:56:38,279
make it a little easier on us to read as

1059
00:56:22,349 --> 00:56:40,920
well there we go okay so now if we take

1060
00:56:38,280 --> 00:56:46,470
a look at this routine we should be able

1061
00:56:40,920 --> 00:56:47,849
to just sort of say well okay where is

1062
00:56:46,469 --> 00:56:50,879
this stuff actually getting used so if

1063
00:56:47,849 --> 00:56:53,759
you look at T X into y like who cares

1064
00:56:50,880 --> 00:56:57,030
right look what are those what are those

1065
00:56:53,760 --> 00:56:59,190
doing in and when so let's take a look

1066
00:56:57,030 --> 00:57:00,930
at where they actually get used and what

1067
00:56:59,190 --> 00:57:02,340
you can see here is really it's just

1068
00:57:00,929 --> 00:57:04,589
part of the text little pointer thing

1069
00:57:02,340 --> 00:57:09,470
you can see it here at the T X T y

1070
00:57:04,590 --> 00:57:12,750
stride there and what you can see is

1071
00:57:09,469 --> 00:57:18,859
when we actually do this DX e Y you can

1072
00:57:12,750 --> 00:57:18,860
see the stride Z Delta X Y bit here

1073
00:57:21,739 --> 00:57:35,759
looking at looking at the strides it

1074
00:57:33,510 --> 00:57:40,830
looks like we could probably just add

1075
00:57:35,760 --> 00:57:44,250
another term in here right and then this

1076
00:57:40,829 --> 00:57:46,009
would just this would just take care of

1077
00:57:44,250 --> 00:57:52,880
it right

1078
00:57:46,010 --> 00:57:55,140
where does X Y this what's it right here

1079
00:57:52,880 --> 00:57:57,019
no it wouldn't I take that back because

1080
00:57:55,139 --> 00:58:00,559
this is this is specific to this

1081
00:57:57,019 --> 00:58:00,559
nonsense here

1082
00:58:05,400 --> 00:58:12,760
so the base offset which got computed

1083
00:58:08,440 --> 00:58:14,740
here so the term would really yeah it

1084
00:58:12,760 --> 00:58:20,528
would go in here sorry

1085
00:58:14,739 --> 00:58:24,429
so min XYZ time start XYZ you could just

1086
00:58:20,528 --> 00:58:27,309
put a term in here that had these two in

1087
00:58:24,429 --> 00:58:28,929
it and then it would just get handled

1088
00:58:27,309 --> 00:58:30,970
when you did the extraction here it

1089
00:58:28,929 --> 00:58:33,788
would extract out those additional terms

1090
00:58:30,969 --> 00:58:36,250
as well right so we probably can

1091
00:58:33,789 --> 00:58:38,859
slipstream that like really cleanly to

1092
00:58:36,250 --> 00:58:48,880
so that top part of the code can be

1093
00:58:38,858 --> 00:58:49,929
simplified quite a bit I think of course

1094
00:58:48,880 --> 00:58:51,940
a lot of this code could probably

1095
00:58:49,929 --> 00:58:57,909
simplified as well yeah but that's sort

1096
00:58:51,940 --> 00:58:59,920
of a separate issue yeah all right so

1097
00:58:57,909 --> 00:59:01,538
anyway if I take a look at that

1098
00:58:59,920 --> 00:59:03,579
let's just see what happens if we start

1099
00:59:01,539 --> 00:59:05,079
bulking this up a little bit but keeping

1100
00:59:03,579 --> 00:59:06,490
these things together seems pretty

1101
00:59:05,079 --> 00:59:08,140
reasonable because it looks to me like

1102
00:59:06,489 --> 00:59:11,679
they kind of always end up doing the

1103
00:59:08,139 --> 00:59:13,568
same thing anyway right so those txt Y

1104
00:59:11,679 --> 00:59:16,269
values we can really just flood those

1105
00:59:13,568 --> 00:59:18,278
out as an f32 for X that just has the X

1106
00:59:16,269 --> 00:59:22,659
and the y in it together and that seems

1107
00:59:18,278 --> 00:59:26,108
like pretty straightforward right at

1108
00:59:22,659 --> 00:59:28,048
least it seems like that to me so again

1109
00:59:26,108 --> 00:59:30,219
we're gonna be sloppy with the loading

1110
00:59:28,048 --> 00:59:33,009
we're just not going to be very careful

1111
00:59:30,219 --> 00:59:34,808
with how things get loaded here because

1112
00:59:33,010 --> 00:59:37,750
I don't know that I really want to start

1113
00:59:34,809 --> 00:59:39,910
doing any data reorganization and or

1114
00:59:37,750 --> 00:59:41,260
padding stuff or whatever because they

1115
00:59:39,909 --> 00:59:42,670
don't know that we really care about

1116
00:59:41,260 --> 00:59:44,200
that I don't know how much performance

1117
00:59:42,670 --> 00:59:45,880
that would really get us so I'm just

1118
00:59:44,199 --> 00:59:47,169
trying to get the stupidity out right

1119
00:59:45,880 --> 00:59:49,088
that's that's really it I'm not trying

1120
00:59:47,170 --> 00:59:51,130
to go for like the the fastest possible

1121
00:59:49,088 --> 00:59:54,909
routine or anything just try to get the

1122
00:59:51,130 --> 00:59:56,769
stupidity out that's it so if we take a

1123
00:59:54,909 --> 00:59:59,288
look at what's going on in here you can

1124
00:59:56,769 --> 01:00:01,329
see that we're doing like a divide x and

1125
00:59:59,289 --> 01:00:04,839
our XY and and there's the one norm here

1126
01:00:01,329 --> 01:00:06,400
right so this this summation there's

1127
01:00:04,838 --> 01:00:08,409
there's not a lot we can do there

1128
01:00:06,400 --> 01:00:10,920
because we're sort of doing a summation

1129
01:00:08,409 --> 01:00:10,920
and

1130
01:00:11,599 --> 01:00:16,799
you know the horizontal ads are slow

1131
01:00:14,329 --> 01:00:18,929
really slow on these chips and not good

1132
01:00:16,800 --> 01:00:20,810
and they take the permute port if I

1133
01:00:18,929 --> 01:00:23,969
remember correctly so it's just it's bad

1134
01:00:20,809 --> 01:00:26,219
so we probably don't really want to get

1135
01:00:23,969 --> 01:00:29,369
too fancy with this part would be my

1136
01:00:26,219 --> 01:00:37,129
assumption so we may just want to do

1137
01:00:29,369 --> 01:00:45,179
like the basic thing that's crappy first

1138
01:00:37,130 --> 01:00:47,760
and then you know we'll if we really

1139
01:00:45,179 --> 01:00:50,579
want to someday come and make this

1140
01:00:47,760 --> 01:00:53,970
routine dramatically better we can try

1141
01:00:50,579 --> 01:00:59,940
that as well but at the moment probably

1142
01:00:53,969 --> 01:01:02,699
just don't want to go there so for now I

1143
01:00:59,940 --> 01:01:11,220
think I might just do something like

1144
01:01:02,699 --> 01:01:15,989
this and just call it a day right so now

1145
01:01:11,219 --> 01:01:18,209
we have our UV in here and we would need

1146
01:01:15,989 --> 01:01:20,009
one shuffle in order to make this line

1147
01:01:18,210 --> 01:01:23,510
work out because now we've got like a

1148
01:01:20,010 --> 01:01:27,560
thing that's like an O X Y right and

1149
01:01:23,510 --> 01:01:30,570
that's gonna be this line of code but

1150
01:01:27,559 --> 01:01:38,099
unfortunately as you can see like this

1151
01:01:30,570 --> 01:01:39,510
one is right but this one is the other

1152
01:01:38,099 --> 01:01:44,429
way round

1153
01:01:39,510 --> 01:01:48,780
no I'm sayin so we need the X we need

1154
01:01:44,429 --> 01:01:51,929
the two bottom pieces to to shuffle

1155
01:01:48,780 --> 01:01:59,940
around and so I don't know we can do

1156
01:01:51,929 --> 01:02:03,210
maybe this and there's really no point

1157
01:01:59,940 --> 01:02:05,490
to the second half of that because we're

1158
01:02:03,210 --> 01:02:09,000
just shuffling the bottom two PS values

1159
01:02:05,489 --> 01:02:11,759
are around in there and that's fine but

1160
01:02:09,000 --> 01:02:14,519
it it always shuffles two vectors at the

1161
01:02:11,760 --> 01:02:16,130
same time so there I don't know yeah

1162
01:02:14,519 --> 01:02:22,440
there's there's really no point to it

1163
01:02:16,130 --> 01:02:26,789
except that we could use a shuffle

1164
01:02:22,440 --> 01:02:38,280
I hesitate to even bother to bring this

1165
01:02:26,789 --> 01:02:41,429
up but so we could use a PFT here PFT

1166
01:02:38,280 --> 01:02:43,410
would be better right and the reason

1167
01:02:41,429 --> 01:02:46,108
that PFT would be better is because dust

1168
01:02:43,409 --> 01:02:49,639
destroy the destination register if you

1169
01:02:46,108 --> 01:02:55,318
think about how like this function works

1170
01:02:49,639 --> 01:02:57,269
if you look at chef PS you destroy

1171
01:02:55,318 --> 01:03:00,210
whichever the register is that you are

1172
01:02:57,269 --> 01:03:02,219
passing in here and you can't just pass

1173
01:03:00,210 --> 01:03:04,289
the thing you want to shuffle here and

1174
01:03:02,219 --> 01:03:08,000
the other one here because it's lane

1175
01:03:04,289 --> 01:03:10,289
locked so flipping the two bottom pieces

1176
01:03:08,000 --> 01:03:12,030
wouldn't be possible because I believe

1177
01:03:10,289 --> 01:03:18,920
the two bottom pieces come from the

1178
01:03:12,030 --> 01:03:18,920
destination right I think

1179
01:03:31,489 --> 01:03:40,519
oh no never mind no no no so it's okay

1180
01:03:36,949 --> 01:03:44,480
because you could get you mom

1181
01:03:40,519 --> 01:03:50,929
no no you can't so see the destination

1182
01:03:44,480 --> 01:03:56,630
here well you know it doesn't even say

1183
01:03:50,929 --> 01:03:58,789
which one's the destination so I don't

1184
01:03:56,630 --> 01:04:04,519
know we'd have to go this doesn't say so

1185
01:03:58,789 --> 01:04:06,980
I'm not sure how to look for that this

1186
01:04:04,519 --> 01:04:08,480
doesn't say but assuming that a is the

1187
01:04:06,980 --> 01:04:10,699
destination which I don't know if it is

1188
01:04:08,480 --> 01:04:13,090
if if a is the destination you can't do

1189
01:04:10,699 --> 01:04:16,159
it if B is the destination again right

1190
01:04:13,090 --> 01:04:18,430
so I'm again because we're not trying to

1191
01:04:16,159 --> 01:04:22,129
be super smart here

1192
01:04:18,429 --> 01:04:24,789
you know whatevs but it's definitely the

1193
01:04:22,130 --> 01:04:28,640
case that you know if we were being

1194
01:04:24,789 --> 01:04:30,769
saucy salamanders about this then the

1195
01:04:28,639 --> 01:04:32,059
shuffle stuff you know really should

1196
01:04:30,769 --> 01:04:36,670
just have a big to do want that's like

1197
01:04:32,059 --> 01:04:44,449
some places where we shuffle Forex

1198
01:04:36,670 --> 01:04:50,329
probably should be using a chef tea

1199
01:04:44,449 --> 01:04:59,869
instead of a chef yes because they don't

1200
01:04:50,329 --> 01:05:02,299
destroyed the destination right so it's

1201
01:04:59,869 --> 01:05:04,940
just something to be aware of you know

1202
01:05:02,300 --> 01:05:07,039
again you know I don't want you to have

1203
01:05:04,940 --> 01:05:08,329
to over always overthink stuff like that

1204
01:05:07,039 --> 01:05:16,360
because you know it's not always

1205
01:05:08,329 --> 01:05:19,250
important but it's worth noting like

1206
01:05:16,360 --> 01:05:21,079
when you're at if you're actually up

1207
01:05:19,250 --> 01:05:23,510
against it at some point right and

1208
01:05:21,079 --> 01:05:26,659
you're really trying to optimize some

1209
01:05:23,510 --> 01:05:28,690
code there are because SSE is like an

1210
01:05:26,659 --> 01:05:32,750
absolutely terrible instruction set like

1211
01:05:28,690 --> 01:05:37,490
it's just absolutely horrid that

1212
01:05:32,750 --> 01:05:39,590
horribleness means that being a shrewd

1213
01:05:37,489 --> 01:05:42,349
optimizer actually does make a

1214
01:05:39,590 --> 01:05:44,510
difference because all these like crazy

1215
01:05:42,349 --> 01:05:45,318
tricks and knowledge about all the

1216
01:05:44,510 --> 01:05:47,660
specific

1217
01:05:45,318 --> 01:05:49,699
hisses of each instruction do actually

1218
01:05:47,659 --> 01:05:51,679
end up making a difference you know

1219
01:05:49,699 --> 01:05:53,269
that's not the case on really

1220
01:05:51,679 --> 01:05:54,828
well-designed instruction sets you know

1221
01:05:53,268 --> 01:05:57,698
the better the instruction set usually

1222
01:05:54,829 --> 01:05:57,699
that's not true

1223
01:05:58,239 --> 01:06:03,139
so I just thought I'd point out that

1224
01:06:01,458 --> 01:06:05,239
that's another kind of one of those

1225
01:06:03,139 --> 01:06:07,998
little weird things where it's like look

1226
01:06:05,239 --> 01:06:13,309
if you're actually trying if you really

1227
01:06:07,998 --> 01:06:15,078
are targeting sse4 you know not AVX

1228
01:06:13,309 --> 01:06:16,519
because that has the prefix instructions

1229
01:06:15,079 --> 01:06:18,259
at which point you know it's unclear how

1230
01:06:16,518 --> 01:06:21,078
much it matters a slight difference

1231
01:06:18,259 --> 01:06:23,380
maybe but you know who cares so if you

1232
01:06:21,079 --> 01:06:25,519
don't have any prefix instructions and

1233
01:06:23,380 --> 01:06:26,449
you know you're really actually trying

1234
01:06:25,518 --> 01:06:28,368
to get it to go as fast as possible

1235
01:06:26,449 --> 01:06:30,650
there are all these little gotchas in

1236
01:06:28,369 --> 01:06:32,059
there and you want to be aware of them

1237
01:06:30,650 --> 01:06:34,548
because if you really need the

1238
01:06:32,059 --> 01:06:36,890
performance there's a bunch of stuff you

1239
01:06:34,548 --> 01:06:45,619
can think about right so you know just

1240
01:06:36,889 --> 01:06:49,248
want to point it out so that's all so if

1241
01:06:45,619 --> 01:06:52,489
we go ahead and do this code as as

1242
01:06:49,248 --> 01:06:55,278
written then you know the the sine of

1243
01:06:52,489 --> 01:06:59,568
function needs to get ported to F 32x

1244
01:06:55,278 --> 01:07:02,268
obviously which we can do and then we

1245
01:06:59,568 --> 01:07:04,579
can get rid of that and just take a look

1246
01:07:02,268 --> 01:07:08,088
at where the XY is used if you take a

1247
01:07:04,579 --> 01:07:09,859
look at how this piece of code is now

1248
01:07:08,088 --> 01:07:11,900
functioning you can see that it's

1249
01:07:09,858 --> 01:07:16,098
exactly the same so we can just stop

1250
01:07:11,900 --> 01:07:17,180
doing the extraction and just let it be

1251
01:07:16,099 --> 01:07:21,109
exact

1252
01:07:17,179 --> 01:07:23,808
I'm sorry let it be wide and these are

1253
01:07:21,108 --> 01:07:25,038
now don't need to be lofted and the

1254
01:07:23,809 --> 01:07:27,109
result doesn't need to be extracted

1255
01:07:25,039 --> 01:07:30,049
right so now it's just again it just

1256
01:07:27,108 --> 01:07:33,798
keeps getting a little bit simpler this

1257
01:07:30,048 --> 01:07:35,748
now doesn't have to be done as a v2 at

1258
01:07:33,798 --> 01:07:38,900
all this can just be the one vector

1259
01:07:35,748 --> 01:07:41,088
right it's one plus the UV and now the

1260
01:07:38,900 --> 01:07:43,670
UV is correct so then we get down to

1261
01:07:41,088 --> 01:07:47,538
here where we've got this particular

1262
01:07:43,670 --> 01:07:48,909
coefficient it needs to be loaded what

1263
01:07:47,539 --> 01:07:56,349
are you complaining about

1264
01:07:48,909 --> 01:07:56,348
here o 0.5 F needs to actually be looted

1265
01:07:59,849 --> 01:08:07,230
you know what that's probably not gonna

1266
01:08:02,619 --> 01:08:07,230
get used again so never mind

1267
01:08:10,260 --> 01:08:17,530
okay so again yes sign of not a thing

1268
01:08:15,670 --> 01:08:19,690
that we actually have but we could have

1269
01:08:17,529 --> 01:08:21,880
it pretty easily so if you take a look

1270
01:08:19,689 --> 01:08:24,250
at sign of this is the one we want we

1271
01:08:21,880 --> 01:08:26,140
already wrote it wide so if I just go

1272
01:08:24,250 --> 01:08:28,630
over to for example where we had

1273
01:08:26,140 --> 01:08:30,520
absolute value which we also wrote wide

1274
01:08:28,630 --> 01:08:31,659
and sign but from an inverse sign but

1275
01:08:30,520 --> 01:08:34,930
from and blah blah blah blah blah blah

1276
01:08:31,659 --> 01:08:37,389
blah blah blah all we should have to do

1277
01:08:34,930 --> 01:08:39,550
here is say look we already wrote this

1278
01:08:37,390 --> 01:08:42,579
wide so let's just start actually doing

1279
01:08:39,550 --> 01:08:44,949
that as well this whole nonsense

1280
01:08:42,579 --> 01:08:50,229
situation can just stay exactly the same

1281
01:08:44,949 --> 01:08:52,659
and this piece here can just do what it

1282
01:08:50,229 --> 01:08:55,088
was going to do instead of doing all of

1283
01:08:52,659 --> 01:08:57,069
those conversions and stuff it can just

1284
01:08:55,088 --> 01:09:00,069
actually do this just the actual

1285
01:08:57,069 --> 01:09:05,439
instruction right so we still need to

1286
01:09:00,069 --> 01:09:08,979
set PS here and the value now though is

1287
01:09:05,439 --> 01:09:12,108
already wide so that will just work and

1288
01:09:08,979 --> 01:09:18,489
I think that's mostly all we need

1289
01:09:12,109 --> 01:09:21,320
that's a set one PS and off we go okay

1290
01:09:18,489 --> 01:09:23,210
so this now has to be fully wide so

1291
01:09:21,319 --> 01:09:27,829
that's just a vector of ones instead of

1292
01:09:23,210 --> 01:09:29,329
one the Hadamard product here where

1293
01:09:27,829 --> 01:09:30,979
we've got the öktem coefficient times a

1294
01:09:29,329 --> 01:09:32,960
UV that's just going to be a straight

1295
01:09:30,979 --> 01:09:34,879
multiply because the Hadamard product is

1296
01:09:32,960 --> 01:09:36,859
just a wide multiply when this becomes

1297
01:09:34,880 --> 01:09:39,380
wide so really this is the only thing

1298
01:09:36,859 --> 01:09:42,380
that we needed that we don't have right

1299
01:09:39,380 --> 01:09:46,130
and I don't know if we have a loader for

1300
01:09:42,380 --> 01:09:47,690
v2 s we probably don't so I'm just going

1301
01:09:46,130 --> 01:09:49,909
to assume that it looks something like

1302
01:09:47,689 --> 01:09:53,210
that and then it can multiply the UV

1303
01:09:49,909 --> 01:09:54,949
this here where it has to load 1.5 s in

1304
01:09:53,210 --> 01:09:58,130
both places again is just going to be

1305
01:09:54,949 --> 01:10:00,170
probably a vector of 1.5 s nothing

1306
01:09:58,130 --> 01:10:04,310
particularly fancy there so it'd be

1307
01:10:00,170 --> 01:10:08,619
something like this and you know these

1308
01:10:04,310 --> 01:10:13,220
other lands can just be 0 for now right

1309
01:10:08,619 --> 01:10:15,529
so that will produce this I value and to

1310
01:10:13,220 --> 01:10:18,140
produce our txt Y values at that point

1311
01:10:15,529 --> 01:10:22,009
we just need to floor it so at that

1312
01:10:18,140 --> 01:10:23,810
point we're really talking about this if

1313
01:10:22,010 --> 01:10:27,199
you take a look at how this is working

1314
01:10:23,810 --> 01:10:29,630
it's producing actual integers I don't

1315
01:10:27,199 --> 01:10:32,239
know to what extent we actually want

1316
01:10:29,630 --> 01:10:33,920
those to be integers so to be completely

1317
01:10:32,239 --> 01:10:37,869
honest with you we may want to leave

1318
01:10:33,920 --> 01:10:39,829
them as as not that at all

1319
01:10:37,869 --> 01:10:42,559
because if you look at what happens

1320
01:10:39,829 --> 01:10:45,019
through here we just extract these at

1321
01:10:42,560 --> 01:10:47,470
the end but everyone else is just just

1322
01:10:45,020 --> 01:10:50,180
actually f/32 is the tollway

1323
01:10:47,470 --> 01:10:52,010
so I don't think there's any reason to

1324
01:10:50,180 --> 01:10:53,360
actually force a conversion there I'm

1325
01:10:52,010 --> 01:10:54,800
not sure that it would actually do

1326
01:10:53,359 --> 01:10:56,329
anything for us we're not working with

1327
01:10:54,800 --> 01:10:56,810
particular large values here so it

1328
01:10:56,329 --> 01:11:04,369
shouldn't matter

1329
01:10:56,810 --> 01:11:07,670
I don't think and so this txy here I

1330
01:11:04,369 --> 01:11:15,109
think we can just do a floor on I and

1331
01:11:07,670 --> 01:11:16,789
call it a day so at that point this is

1332
01:11:15,109 --> 01:11:20,779
really just a set one I don't know why I

1333
01:11:16,789 --> 01:11:23,630
did that it's really just just this so

1334
01:11:20,779 --> 01:11:26,509
anyway at that point I've got the the

1335
01:11:23,630 --> 01:11:28,279
two uses of 2x and 2y here

1336
01:11:26,510 --> 01:11:30,350
which again now I think I just want to

1337
01:11:28,279 --> 01:11:32,569
fold that into the base offset because I

1338
01:11:30,350 --> 01:11:35,720
don't see any reason why I wouldn't this

1339
01:11:32,569 --> 01:11:38,989
is just a horizontal ad right so I think

1340
01:11:35,720 --> 01:11:41,030
what we can do is in here we'll just say

1341
01:11:38,989 --> 01:11:43,340
all right so the base offsets just gonna

1342
01:11:41,029 --> 01:11:47,210
get the TX y value added in and you can

1343
01:11:43,340 --> 01:11:50,060
see here that the y part needs to be

1344
01:11:47,210 --> 01:11:50,600
multiplied by the row stride you know

1345
01:11:50,060 --> 01:11:54,230
I'm saying

1346
01:11:50,600 --> 01:12:00,410
so in here there's like a thing you know

1347
01:11:54,229 --> 01:12:05,269
that looks something like this where we

1348
01:12:00,409 --> 01:12:09,170
boost the X and the y that's backwards

1349
01:12:05,270 --> 01:12:11,870
though so it's that right because the y

1350
01:12:09,170 --> 01:12:19,250
is multiplied by the diffuse terrorist

1351
01:12:11,869 --> 01:12:22,000
right there so I think that's the only

1352
01:12:19,250 --> 01:12:32,029
place the base offset is used so I think

1353
01:12:22,000 --> 01:12:34,850
that that just works right and and and I

1354
01:12:32,029 --> 01:12:37,179
don't know I don't know that there's

1355
01:12:34,850 --> 01:12:40,610
anything else we would need to do there

1356
01:12:37,180 --> 01:12:44,900
so yeah that's some code I probably

1357
01:12:40,609 --> 01:12:50,079
screwed it up but but that's the actual

1358
01:12:44,899 --> 01:12:50,079
code in question what is happening here

1359
01:12:52,689 --> 01:12:57,559
all right

1360
01:12:54,050 --> 01:12:59,480
so apparently I I did screw it up right

1361
01:12:57,560 --> 01:13:01,850
and you can tell that because we're

1362
01:12:59,479 --> 01:13:04,369
loading out of bounds here so this this

1363
01:13:01,850 --> 01:13:06,380
somehow do you know was was very unhappy

1364
01:13:04,369 --> 01:13:11,420
and did you know didn't like anything

1365
01:13:06,380 --> 01:13:13,130
about its life and so it decided that it

1366
01:13:11,420 --> 01:13:16,550
just couldn't go on anymore somewhere

1367
01:13:13,130 --> 01:13:20,449
around here and this is probably not the

1368
01:13:16,550 --> 01:13:21,890
actual instruction that faulted because

1369
01:13:20,449 --> 01:13:23,359
you know these are broadcast

1370
01:13:21,890 --> 01:13:24,590
instructions and you can see that that

1371
01:13:23,359 --> 01:13:27,199
is not what's happening here this is

1372
01:13:24,590 --> 01:13:29,110
actually a move unaligned so it's you

1373
01:13:27,199 --> 01:13:36,349
know it's going to be one of these and

1374
01:13:29,109 --> 01:13:38,779
so this base X Y Z value here is

1375
01:13:36,350 --> 01:13:41,010
probably just wrong right

1376
01:13:38,779 --> 01:13:43,710
because that's the thing we changed so

1377
01:13:41,010 --> 01:13:51,480
if we just take a look and you know we

1378
01:13:43,710 --> 01:13:53,939
we nerf it right oops so now in theory

1379
01:13:51,479 --> 01:13:57,328
when we run this we should end up in a

1380
01:13:53,939 --> 01:14:01,229
situation where now it's it's wrong but

1381
01:13:57,328 --> 01:14:02,639
it should be okay cool it shouldn't ever

1382
01:14:01,229 --> 01:14:04,979
fetch out of balance right because it's

1383
01:14:02,639 --> 01:14:06,599
always ever it's just loading one value

1384
01:14:04,979 --> 01:14:09,868
now forever right it's never actually

1385
01:14:06,599 --> 01:14:11,039
doing offset so we know that the offset

1386
01:14:09,868 --> 01:14:13,529
is wrong here

1387
01:14:11,039 --> 01:14:15,149
this line looks pretty innocuous I mean

1388
01:14:13,529 --> 01:14:18,078
I could be very wrong about that but

1389
01:14:15,149 --> 01:14:21,269
since all this thing was doing before

1390
01:14:18,078 --> 01:14:23,969
the only thing that it had to do at all

1391
01:14:21,270 --> 01:14:27,719
was just multiply the row stride by the

1392
01:14:23,969 --> 01:14:29,939
Y which should have done and multiply

1393
01:14:27,719 --> 01:14:32,880
the X by just one write it what didn't

1394
01:14:29,939 --> 01:14:36,779
change so I don't think there should be

1395
01:14:32,880 --> 01:14:38,909
anything weird about that like I don't

1396
01:14:36,779 --> 01:14:42,149
think that line should be wrong famous

1397
01:14:38,908 --> 01:14:44,309
last words so I think we're mostly

1398
01:14:42,149 --> 01:14:46,198
looking at this code up here for

1399
01:14:44,310 --> 01:14:48,829
whatever the bug is like whatever's

1400
01:14:46,198 --> 01:14:48,828
wrong with it right

1401
01:14:53,949 --> 01:14:59,760
okay so yeah

1402
01:15:17,800 --> 01:15:27,349
yes so that looks pretty straightforward

1403
01:15:24,760 --> 01:15:32,409
to be completely honest with you so I'm

1404
01:15:27,349 --> 01:15:44,449
not sure where exactly that's going

1405
01:15:32,408 --> 01:15:46,698
strange that's a little confusing

1406
01:15:44,448 --> 01:15:48,198
because there's not very much in there I

1407
01:15:46,698 --> 01:15:50,658
suppose I should double-check the sign

1408
01:15:48,198 --> 01:15:52,038
of as well because then that is

1409
01:15:50,658 --> 01:15:54,768
technically part of the stuff we wrote

1410
01:15:52,038 --> 01:16:00,408
taking a look at this here we're doing a

1411
01:15:54,769 --> 01:16:10,269
blend v where the mask is doing value P

1412
01:16:00,408 --> 01:16:14,388
and that I mean that looks right to me

1413
01:16:10,269 --> 01:16:18,289
no same thing weird there so that seems

1414
01:16:14,389 --> 01:16:20,719
fine so I may just have to do step

1415
01:16:18,288 --> 01:16:23,300
through this to see if there's something

1416
01:16:20,719 --> 01:16:35,510
weird going on here the shuffle Forex

1417
01:16:23,300 --> 01:16:43,838
could also be be busted let me just see

1418
01:16:35,510 --> 01:16:50,809
what those are I'm fine to do looks

1419
01:16:43,838 --> 01:16:54,588
pretty reasonable though right I mean

1420
01:16:50,809 --> 01:16:56,689
there's nothing nothing particularly

1421
01:16:54,588 --> 01:16:59,418
weird there so I made just step through

1422
01:16:56,689 --> 01:17:06,399
this real quick to see if I see anything

1423
01:16:59,418 --> 01:17:09,019
weird going on and again I don't I can I

1424
01:17:06,399 --> 01:17:11,539
can sort of refer back to this code here

1425
01:17:09,019 --> 01:17:13,819
and just see if there's anything that I

1426
01:17:11,538 --> 01:17:14,748
that I see that's jumping out at me so

1427
01:17:13,819 --> 01:17:16,219
if you take a look at the öktem

1428
01:17:14,748 --> 01:17:17,868
coefficient here which is what this is

1429
01:17:16,219 --> 01:17:19,639
loading into the diffuse atlas

1430
01:17:17,868 --> 01:17:21,588
it's supposed to do that times the UV

1431
01:17:19,639 --> 01:17:23,449
you know which we're assuming we've

1432
01:17:21,588 --> 01:17:26,269
computed and that's what it does it's

1433
01:17:23,448 --> 01:17:29,738
going to offset it by 1.5 1.5 on both

1434
01:17:26,269 --> 01:17:29,739
which is what this will do

1435
01:17:30,750 --> 01:17:37,289
and then it wants to floor that value

1436
01:17:34,590 --> 01:17:40,340
which again is what this will do so you

1437
01:17:37,289 --> 01:17:43,260
know again not very complicated here

1438
01:17:40,340 --> 01:17:49,400
looking at the UV computation it's going

1439
01:17:43,260 --> 01:17:53,070
to be 0.5 times 1 plus the UV again

1440
01:17:49,399 --> 01:17:58,769
pretty simple like I don't see a lot of

1441
01:17:53,069 --> 01:18:00,539
weirdness there so this part just

1442
01:17:58,770 --> 01:18:02,280
doesn't look that complicated and maybe

1443
01:18:00,539 --> 01:18:05,909
I'm overlooking something right like

1444
01:18:02,279 --> 01:18:08,789
maybe I'm like forehead slapping there a

1445
01:18:05,909 --> 01:18:11,010
little bit but so it looks more like

1446
01:18:08,789 --> 01:18:12,329
this part would be the problem of course

1447
01:18:11,010 --> 01:18:14,280
that doesn't really make any sense

1448
01:18:12,329 --> 01:18:19,859
because it seems like that part was

1449
01:18:14,279 --> 01:18:21,300
already working fine so I don't know but

1450
01:18:19,859 --> 01:18:22,529
you know this little part here could

1451
01:18:21,300 --> 01:18:24,659
have been wrong or something so let's

1452
01:18:22,529 --> 01:18:26,429
just let's just take a look carefully

1453
01:18:24,659 --> 01:18:31,670
through it and just bet and see what we

1454
01:18:26,430 --> 01:18:33,630
can do so yeah so taking a look at the

1455
01:18:31,670 --> 01:18:41,399
octahedral from unit vector part of

1456
01:18:33,630 --> 01:18:44,039
things so if we come through this

1457
01:18:41,399 --> 01:18:46,679
routine here you can see the absolute

1458
01:18:44,039 --> 01:18:48,720
value here is just you know the sum of

1459
01:18:46,680 --> 01:18:51,470
these values and we just didn't you know

1460
01:18:48,720 --> 01:18:51,470
we didn't do anything

1461
01:18:59,760 --> 01:19:04,449
yeah I mean we didn't really do anything

1462
01:19:01,720 --> 01:19:06,340
that so that's just sums those up and in

1463
01:19:04,449 --> 01:19:07,750
all the four lanes we'll all have the

1464
01:19:06,340 --> 01:19:12,430
same value there right because these are

1465
01:19:07,750 --> 01:19:15,609
all f/32 Forex replicates we compute the

1466
01:19:12,430 --> 01:19:19,000
UV then by doing one which is just you

1467
01:19:15,609 --> 01:19:20,889
know one by doing one over the one norm

1468
01:19:19,000 --> 01:19:23,199
which is the sum we just did so that

1469
01:19:20,890 --> 01:19:30,220
should just be a div PS right I'm gonna

1470
01:19:23,199 --> 01:19:40,630
thank okay guess I don't have that in

1471
01:19:30,220 --> 01:19:42,909
here no area so that's just gonna be a

1472
01:19:40,630 --> 01:19:47,670
div which is what we would expect and

1473
01:19:42,909 --> 01:19:47,670
then we're going to multiply it by the

1474
01:19:49,710 --> 01:19:56,500
RX the r dot y value and we're zeroing

1475
01:19:52,840 --> 01:20:01,000
out the other lanes right so again

1476
01:19:56,500 --> 01:20:03,090
pretty straightforward I don't see like

1477
01:20:01,000 --> 01:20:07,420
how I don't know how we screwed that up

1478
01:20:03,090 --> 01:20:13,810
but maybe we did we then have the Oh X Y

1479
01:20:07,420 --> 01:20:15,369
here and the Oh X Y value is like then

1480
01:20:13,810 --> 01:20:17,410
it's like the thing that we might use

1481
01:20:15,369 --> 01:20:19,390
you know so we're only going to use it

1482
01:20:17,409 --> 01:20:22,389
in places where the V is less than zero

1483
01:20:19,390 --> 01:20:25,210
but so we want to compute the X Y the X

1484
01:20:22,390 --> 01:20:28,480
Y is going to be the sine of x + y which

1485
01:20:25,210 --> 01:20:31,989
is what we have or of the UV x + y which

1486
01:20:28,479 --> 01:20:36,129
is what we have here times 1 minus the

1487
01:20:31,989 --> 01:20:37,659
absolute value of y in X so that's where

1488
01:20:36,130 --> 01:20:40,869
this shuffle comes in it's just trying

1489
01:20:37,659 --> 01:20:43,149
to reverse the order of those two values

1490
01:20:40,869 --> 01:20:46,739
and we can verify that that you know

1491
01:20:43,149 --> 01:20:46,739
does or doesn't work because who knows

1492
01:20:47,069 --> 01:20:52,179
but it seems like that's fine again I

1493
01:20:50,470 --> 01:20:54,310
don't I don't see a lot of places where

1494
01:20:52,180 --> 01:20:57,159
that can go wrong we then compute the

1495
01:20:54,310 --> 01:20:58,270
mask here and the mask is just is Z less

1496
01:20:57,159 --> 01:21:01,479
than zero right

1497
01:20:58,270 --> 01:21:04,930
and if Z is less than zero then we want

1498
01:21:01,479 --> 01:21:07,089
to select out lanes of X Y in that

1499
01:21:04,930 --> 01:21:10,539
particular case whereas otherwise we

1500
01:21:07,090 --> 01:21:11,760
just want to leave it untouched and then

1501
01:21:10,539 --> 01:21:17,470
we flow into the other route

1502
01:21:11,760 --> 01:21:20,140
right so again I don't know I don't

1503
01:21:17,470 --> 01:21:21,960
quite see where the problem comes in

1504
01:21:20,140 --> 01:21:27,310
because all that seemed pretty good

1505
01:21:21,960 --> 01:21:30,100
right so I'm kind of tempted here

1506
01:21:27,310 --> 01:21:32,020
because I don't know I'm kind of tempted

1507
01:21:30,100 --> 01:21:33,820
to just call the original code and then

1508
01:21:32,020 --> 01:21:34,930
look at the to value and see you know am

1509
01:21:33,819 --> 01:21:38,079
I really am I actually getting

1510
01:21:34,930 --> 01:21:41,100
differences in these values or was

1511
01:21:38,079 --> 01:21:44,170
something else happening here right so

1512
01:21:41,100 --> 01:21:47,200
right about here where we do the floor I

1513
01:21:44,170 --> 01:21:51,390
should be able to say like hey can we

1514
01:21:47,199 --> 01:21:51,389
just let's just do a spot check please

1515
01:21:52,199 --> 01:22:04,899
giving the octahedral offset here for

1516
01:21:59,949 --> 01:22:07,300
this particular direction right and and

1517
01:22:04,899 --> 01:22:10,029
that's all I wanted to do there like I

1518
01:22:07,300 --> 01:22:12,610
just want it to tell me like hey run the

1519
01:22:10,029 --> 01:22:13,989
original code path and let me see like

1520
01:22:12,609 --> 01:22:16,029
what these values are because they

1521
01:22:13,989 --> 01:22:17,619
should be basically exact all the time

1522
01:22:16,029 --> 01:22:19,509
because we're even flooring at the end

1523
01:22:17,619 --> 01:22:20,949
so although maybe there could be

1524
01:22:19,510 --> 01:22:23,800
occasional places where it's very

1525
01:22:20,949 --> 01:22:25,329
slightly different but because and then

1526
01:22:23,800 --> 01:22:26,110
when it gets to the floor it changes

1527
01:22:25,329 --> 01:22:28,149
which way it floors

1528
01:22:26,109 --> 01:22:31,989
most of the time these should actually

1529
01:22:28,149 --> 01:22:35,409
be exact exact I don't really want to

1530
01:22:31,989 --> 01:22:46,119
struggle to read these values out so I'm

1531
01:22:35,409 --> 01:22:49,269
just going to give it an OD here so here

1532
01:22:46,119 --> 01:22:52,000
we are actually probably put this on the

1533
01:22:49,270 --> 01:23:00,100
next line there so let's actually do

1534
01:22:52,000 --> 01:23:05,050
this and so now all I want to do is say

1535
01:23:00,100 --> 01:23:09,130
look we've got T X Y and we've got check

1536
01:23:05,050 --> 01:23:16,090
and I want to see both these this is the

1537
01:23:09,130 --> 01:23:17,800
place where I almost need like George to

1538
01:23:16,090 --> 01:23:18,699
remind me how the heck this thing works

1539
01:23:17,800 --> 01:23:20,850
because I don't remember

1540
01:23:18,699 --> 01:23:20,849
ah

1541
01:23:21,738 --> 01:23:27,788
that's weird I mean it shouldn't matter

1542
01:23:24,319 --> 01:23:27,788
because it's gonna get handled later but

1543
01:23:32,710 --> 01:23:38,569
so that's because of this right so we do

1544
01:23:36,738 --> 01:23:40,788
have things happening in the other two

1545
01:23:38,569 --> 01:23:46,210
lanes is that gonna cause a problem

1546
01:23:40,788 --> 01:23:46,210
later cuz those are the right values but

1547
01:23:49,929 --> 01:23:53,859
is that gonna cause a problem

1548
01:23:55,269 --> 01:23:59,840
it shouldn't right cuz here's a multiply

1549
01:23:58,069 --> 01:24:02,899
that should knock out the other those

1550
01:23:59,840 --> 01:24:04,489
two lanes you know there's a zero zero

1551
01:24:02,899 --> 01:24:10,219
that's supposed to that should knock

1552
01:24:04,488 --> 01:24:13,808
those out so why would that that

1553
01:24:10,219 --> 01:24:13,809
shouldn't cause a problem should it ah

1554
01:24:14,469 --> 01:24:34,510
well that's wrong so yeah this is just

1555
01:24:26,899 --> 01:24:38,658
wrong okay well good to know right

1556
01:24:34,510 --> 01:24:42,739
so the question is where is this going

1557
01:24:38,658 --> 01:24:43,998
wrong and I have no idea because it

1558
01:24:42,738 --> 01:24:46,069
looked pretty good to me so we're gonna

1559
01:24:43,998 --> 01:24:48,889
have to go through and and see where

1560
01:24:46,069 --> 01:24:54,469
this is going wrong roughly since I do

1561
01:24:48,889 --> 01:24:57,159
have the luxury of doing so imma do this

1562
01:24:54,469 --> 01:25:00,078
expansion one more time because why not

1563
01:24:57,158 --> 01:25:03,589
so here I'm get octahedral offset I'm

1564
01:25:00,078 --> 01:25:07,998
gonna grab this and in here I'm actually

1565
01:25:03,590 --> 01:25:11,420
going to put oops I'm actually gonna put

1566
01:25:07,998 --> 01:25:15,738
this in like this where I can just say

1567
01:25:11,420 --> 01:25:17,889
alright do this computation mmm excuse

1568
01:25:15,738 --> 01:25:17,888
me

1569
01:25:22,380 --> 01:25:32,500
where I've got the direction here and I

1570
01:25:28,899 --> 01:25:36,699
just want to go ahead and and run this

1571
01:25:32,500 --> 01:25:38,890
code with the original set of things so

1572
01:25:36,699 --> 01:25:40,809
I can have the intermediate values so

1573
01:25:38,890 --> 01:25:43,060
all I'm gonna do is just change these

1574
01:25:40,810 --> 01:25:51,460
two different names that I can expect in

1575
01:25:43,060 --> 01:25:54,510
the watch window like so so that as we

1576
01:25:51,460 --> 01:25:54,510
come through here

1577
01:26:03,389 --> 01:26:07,590
that's all we need right

1578
01:26:29,350 --> 01:26:36,470
okay so this is just going to produce

1579
01:26:33,439 --> 01:26:40,099
all of the intermediate values and then

1580
01:26:36,470 --> 01:27:03,320
what I want to do here is probably

1581
01:26:40,100 --> 01:27:07,840
something like this almost this is not a

1582
01:27:03,319 --> 01:27:07,840
very good way to do this that's okay

1583
01:27:09,819 --> 01:27:34,039
actually honestly we just can just do

1584
01:27:12,289 --> 01:27:36,760
that okay so I think we're good now and

1585
01:27:34,039 --> 01:27:42,220
again there's no point to any of this

1586
01:27:36,760 --> 01:27:45,050
other than simply that we are trying to

1587
01:27:42,220 --> 01:27:48,110
compare intermediate values so we can

1588
01:27:45,050 --> 01:27:52,000
see where this went wrong so in theory I

1589
01:27:48,109 --> 01:27:55,909
should force a fault here hopefully

1590
01:27:52,000 --> 01:27:58,640
whenever these are incorrect so like

1591
01:27:55,909 --> 01:28:00,920
that and so now when we look at these

1592
01:27:58,640 --> 01:28:03,140
values we should be able to see that

1593
01:28:00,920 --> 01:28:07,279
they're wrong right so these these are

1594
01:28:03,140 --> 01:28:10,130
the input values there and txy check is

1595
01:28:07,279 --> 01:28:12,380
is for ramp and so now i should just be

1596
01:28:10,130 --> 01:28:14,270
able to look at the other values to

1597
01:28:12,380 --> 01:28:16,250
figure out where in the chain we're

1598
01:28:14,270 --> 01:28:18,020
going wrong because we're just trying to

1599
01:28:16,250 --> 01:28:20,300
reproduce a piece of code we already had

1600
01:28:18,020 --> 01:28:22,070
so it seems like a waste of time for me

1601
01:28:20,300 --> 01:28:23,390
to try to hunt a bug myself when I could

1602
01:28:22,069 --> 01:28:25,429
just run the two pieces of code in

1603
01:28:23,390 --> 01:28:28,100
parallel and see which one where they

1604
01:28:25,430 --> 01:28:30,829
diverge right so since I have the luxury

1605
01:28:28,100 --> 01:28:34,850
of doing that I'm going to so let's

1606
01:28:30,829 --> 01:28:38,029
first look at the check UV so the check

1607
01:28:34,850 --> 01:28:40,480
UV values are these and in fact we can

1608
01:28:38,029 --> 01:28:44,210
just look at like the X and the y here

1609
01:28:40,479 --> 01:28:46,819
like so so those are the check UV x and

1610
01:28:44,210 --> 01:28:52,789
y values that we're producing those are

1611
01:28:46,819 --> 01:28:56,809
right after we do this this plus bit

1612
01:28:52,789 --> 01:28:58,310
here right so after we do get octahedral

1613
01:28:56,810 --> 01:29:07,190
from unit vector which is like this bit

1614
01:28:58,310 --> 01:29:12,680
here then we do this it's this line

1615
01:29:07,189 --> 01:29:15,259
right it's 0.5 1 plus the UV so we just

1616
01:29:12,680 --> 01:29:28,119
want to see what this is so if we take a

1617
01:29:15,260 --> 01:29:32,119
look at so those are wrong yeah I mean

1618
01:29:28,119 --> 01:29:34,069
that ain't that ain't no good so we've

1619
01:29:32,119 --> 01:29:37,369
got something wrong happening up here

1620
01:29:34,069 --> 01:29:39,859
you know which means I think since we

1621
01:29:37,369 --> 01:29:42,500
were doing this it feels like this is

1622
01:29:39,859 --> 01:29:45,710
probably must be wrong somehow right

1623
01:29:42,500 --> 01:29:51,109
like this this piece of code is is

1624
01:29:45,710 --> 01:29:52,579
probably busted this Oh X Y so that

1625
01:29:51,109 --> 01:29:54,799
means we got to paste this in and just

1626
01:29:52,579 --> 01:29:57,109
take a look and verify that but that

1627
01:29:54,800 --> 01:30:05,360
that's presumably what's wrong so let's

1628
01:29:57,109 --> 01:30:08,059
take a look so if we grab the octahedral

1629
01:30:05,359 --> 01:30:12,739
from unit vector part of this and we

1630
01:30:08,060 --> 01:30:14,840
just shove that in here like so this

1631
01:30:12,739 --> 01:30:22,489
should all be fine so if we just do

1632
01:30:14,840 --> 01:30:25,909
these as ours like so we were calling

1633
01:30:22,489 --> 01:30:29,779
this check UV right so this is actually

1634
01:30:25,909 --> 01:30:34,309
going to be called check UV check UV

1635
01:30:29,779 --> 01:30:38,009
check UV check UV h IQ v check UV a

1636
01:30:34,310 --> 01:30:44,010
check UV look at that

1637
01:30:38,010 --> 01:30:48,750
and this is our and here then this

1638
01:30:44,010 --> 01:30:50,610
should be fine right and the problem

1639
01:30:48,750 --> 01:30:54,149
that we're going to have here is this

1640
01:30:50,609 --> 01:30:56,250
gets destroyed a little bit so we

1641
01:30:54,149 --> 01:31:00,299
probably just want to be able to look at

1642
01:30:56,250 --> 01:31:03,649
these two values separately so we might

1643
01:31:00,300 --> 01:31:07,350
want to do like make this an interim UV

1644
01:31:03,649 --> 01:31:12,179
that we that we check differently so for

1645
01:31:07,350 --> 01:31:14,400
example if we did this now we can look

1646
01:31:12,180 --> 01:31:16,380
at with the original value of a UV + o

1647
01:31:14,399 --> 01:31:17,879
XY was and then what the final value is

1648
01:31:16,380 --> 01:31:19,079
so that we know like whether the select

1649
01:31:17,880 --> 01:31:20,730
is working or something right because

1650
01:31:19,079 --> 01:31:22,170
otherwise that value gets destroyed and

1651
01:31:20,729 --> 01:31:24,750
it's pretty hard for us to know what the

1652
01:31:22,170 --> 01:31:26,579
heck is going on in here so if we want

1653
01:31:24,750 --> 01:31:31,350
to do the same change to this routine

1654
01:31:26,579 --> 01:31:33,809
right all we really need to do is make

1655
01:31:31,350 --> 01:31:37,170
sure that these are computed outside for

1656
01:31:33,810 --> 01:31:40,350
starters like so and then we just need

1657
01:31:37,170 --> 01:31:44,300
to make a new version of this that that

1658
01:31:40,350 --> 01:31:47,960
does both right so we would have like

1659
01:31:44,300 --> 01:31:50,960
this here would be called check iuv

1660
01:31:47,960 --> 01:31:50,960
right

1661
01:31:53,449 --> 01:31:58,039
so that we have both of those and then

1662
01:31:56,060 --> 01:31:59,750
this piece of code here would produce a

1663
01:31:58,039 --> 01:32:03,560
secondary values and then we would have

1664
01:31:59,750 --> 01:32:05,869
Chucky V equals check I UV and then this

1665
01:32:03,560 --> 01:32:10,640
would assign the o XY based on whether

1666
01:32:05,869 --> 01:32:26,510
it thought it needed to or not right so

1667
01:32:10,640 --> 01:32:29,150
I believe that's all we need yeah and

1668
01:32:26,510 --> 01:32:33,789
now if we run this hopefully again we

1669
01:32:29,149 --> 01:32:37,099
can just look up and see what what our

1670
01:32:33,789 --> 01:32:39,920
divergence pattern looks like so for

1671
01:32:37,100 --> 01:32:42,680
starters let's look at check one norm I

1672
01:32:39,920 --> 01:32:44,329
don't think this is wrong but you know

1673
01:32:42,680 --> 01:32:52,700
we might since we now have them you

1674
01:32:44,329 --> 01:32:53,239
might as well verify everything what the

1675
01:32:52,699 --> 01:33:00,649
heck

1676
01:32:53,239 --> 01:33:02,389
oh dude where did our absolute value go

1677
01:33:00,649 --> 01:33:03,949
so okay when I just said I don't think

1678
01:33:02,390 --> 01:33:11,329
this is wrong that was totally wrong

1679
01:33:03,949 --> 01:33:13,539
where'd our absolute value go what the

1680
01:33:11,329 --> 01:33:13,539
hey

1681
01:33:18,390 --> 01:33:29,310
that was stupid that was really dumb

1682
01:33:31,079 --> 01:33:37,090
okay so now we're reproducing the valium

1683
01:33:34,180 --> 01:33:42,510
so it was just we just forgot the

1684
01:33:37,090 --> 01:33:48,000
absolute value happy birthday all right

1685
01:33:42,510 --> 01:33:48,000
so now we should be good to go I think

1686
01:33:53,310 --> 01:33:59,620
and so now we just have straight line

1687
01:33:56,729 --> 01:34:01,929
sampling there and we can also take a

1688
01:33:59,619 --> 01:34:04,809
look at how fast that is because it's

1689
01:34:01,930 --> 01:34:06,310
pretty easy for us to do so how are we

1690
01:34:04,810 --> 01:34:07,930
doing on we don't really know how our

1691
01:34:06,310 --> 01:34:10,210
timings are it's really very difficult

1692
01:34:07,930 --> 01:34:12,280
to take them because at this point this

1693
01:34:10,210 --> 01:34:14,109
number is dropping quite a bit and so

1694
01:34:12,279 --> 01:34:15,939
we're getting down to the play point

1695
01:34:14,109 --> 01:34:22,359
where like debug collation and all this

1696
01:34:15,939 --> 01:34:24,819
stuff like if you look at how long these

1697
01:34:22,359 --> 01:34:27,609
things are taking this is now like half

1698
01:34:24,819 --> 01:34:30,819
of our frame time right probably need to

1699
01:34:27,609 --> 01:34:31,869
fix our debug system someday but and so

1700
01:34:30,819 --> 01:34:32,679
like if you look you know you could look

1701
01:34:31,869 --> 01:34:34,960
at this and it looks like oh that's

1702
01:34:32,680 --> 01:34:37,360
really high number it's this is heavily

1703
01:34:34,960 --> 01:34:41,800
multi-threaded so this number is like x

1704
01:34:37,359 --> 01:34:44,649
many right so the actual frame time it's

1705
01:34:41,800 --> 01:34:47,440
taking is actually quite a bit less than

1706
01:34:44,649 --> 01:34:51,639
this it's gonna be that divided by four

1707
01:34:47,439 --> 01:34:53,859
right so this number is more like the

1708
01:34:51,640 --> 01:34:55,720
same as that frame display number right

1709
01:34:53,859 --> 01:34:56,979
and you can you can see that happening

1710
01:34:55,720 --> 01:34:59,530
in here

1711
01:34:56,979 --> 01:35:00,789
oh sorry t-bo collation no no no not

1712
01:34:59,529 --> 01:35:04,389
debug collision so just the frame

1713
01:35:00,789 --> 01:35:08,109
display just that right so waiting on

1714
01:35:04,390 --> 01:35:10,210
the frame to actually happen is roughly

1715
01:35:08,109 --> 01:35:13,509
the same amount of time as we're

1716
01:35:10,210 --> 01:35:14,770
actually spending in here right and then

1717
01:35:13,510 --> 01:35:16,480
of course we've got all this code as

1718
01:35:14,770 --> 01:35:17,620
well which you know probably is taking

1719
01:35:16,479 --> 01:35:22,359
too long but that's sort of a separate

1720
01:35:17,619 --> 01:35:23,859
issue so anyway like you know we're

1721
01:35:22,359 --> 01:35:28,089
getting into good shape here because as

1722
01:35:23,859 --> 01:35:30,089
this shrinks down were we're pretty much

1723
01:35:28,090 --> 01:35:32,099
taking the lighting out of the

1724
01:35:30,090 --> 01:35:36,300
the Pat are sorry the ray tracing out of

1725
01:35:32,099 --> 01:35:40,079
the part where it's it's the slow part

1726
01:35:36,300 --> 01:35:42,539
of our of our system right so if I go

1727
01:35:40,079 --> 01:35:47,039
and run I'm just curious here so if I do

1728
01:35:42,539 --> 01:35:48,779
it builds I don't know why I'm in the

1729
01:35:47,039 --> 01:35:51,269
code directory that's not what I meant

1730
01:35:48,779 --> 01:35:54,960
to do I mean to go to debug and do build

1731
01:35:51,270 --> 01:35:57,179
a trace like prof. like so I'm just

1732
01:35:54,960 --> 01:36:00,210
curious if that affected our runtime

1733
01:35:57,179 --> 01:36:03,599
positively or negatively because I'm not

1734
01:36:00,210 --> 01:36:05,069
sure what it will do right you know we

1735
01:36:03,599 --> 01:36:06,300
made some changes we don't know what the

1736
01:36:05,069 --> 01:36:08,969
effects of the changes are so it's just

1737
01:36:06,300 --> 01:36:11,489
curious I just wanted it's not at all

1738
01:36:08,969 --> 01:36:12,840
what I was trying to do this is the

1739
01:36:11,488 --> 01:36:15,629
horror of using two different editors

1740
01:36:12,840 --> 01:36:19,260
one at one in at work and one hunt

1741
01:36:15,630 --> 01:36:22,529
stream life is horrible

1742
01:36:19,260 --> 01:36:24,869
all right so in the lining system here

1743
01:36:22,529 --> 01:36:27,420
if I look at this timings you can see

1744
01:36:24,868 --> 01:36:30,509
here's the optimized version here and

1745
01:36:27,420 --> 01:36:33,960
and that's a city like slower right so

1746
01:36:30,510 --> 01:36:35,940
we're at a point where we're we're

1747
01:36:33,960 --> 01:36:40,289
pushing this piece of code unless I'm

1748
01:36:35,939 --> 01:36:44,158
wrong about that we're pushing this

1749
01:36:40,289 --> 01:36:46,050
piece of code in a certain direction and

1750
01:36:44,158 --> 01:36:48,509
that direction may not be good right

1751
01:36:46,050 --> 01:36:50,250
meaning because we haven't welded this

1752
01:36:48,510 --> 01:36:53,940
into the surrounding code there's just a

1753
01:36:50,250 --> 01:36:55,260
lot of cruft going on in here and we

1754
01:36:53,939 --> 01:36:57,779
kind of need to make sure that we're

1755
01:36:55,260 --> 01:37:00,389
actually going to do it correctly now

1756
01:36:57,779 --> 01:37:01,979
also visual studio is really crap the

1757
01:37:00,389 --> 01:37:09,719
compiler for us to see code so it's not

1758
01:37:01,979 --> 01:37:11,759
going to do us any favors but we do want

1759
01:37:09,719 --> 01:37:14,489
to make sure that we can do some of this

1760
01:37:11,760 --> 01:37:16,710
stuff smart right so we've got some

1761
01:37:14,488 --> 01:37:20,129
issues in here because that's running

1762
01:37:16,710 --> 01:37:22,289
more slowly than it should be right

1763
01:37:20,130 --> 01:37:24,859
because if we just left it the way it

1764
01:37:22,289 --> 01:37:29,988
was it in theory would have been better

1765
01:37:24,859 --> 01:37:29,988
now granted I can't really say why

1766
01:37:30,738 --> 01:37:37,408
doesn't make a lot of sense but I would

1767
01:37:33,329 --> 01:37:39,238
like to look real quick to see let's say

1768
01:37:37,408 --> 01:37:41,969
here in the release build I would like

1769
01:37:39,238 --> 01:37:42,479
to look to see what it is generating now

1770
01:37:41,969 --> 01:37:44,989
for

1771
01:37:42,479 --> 01:37:44,988
that code

1772
01:38:01,470 --> 01:38:07,770
I mean it looks pretty clean so I'm not

1773
01:38:06,029 --> 01:38:10,319
really sure why that would have gotten

1774
01:38:07,770 --> 01:38:11,910
slower that's that's a bit of a that's a

1775
01:38:10,319 --> 01:38:17,389
bit of a mystery to me to be completely

1776
01:38:11,909 --> 01:38:17,389
honest so I'm I'm not entirely sure but

1777
01:38:17,510 --> 01:38:22,369
we definitely have some stuff we've got

1778
01:38:19,829 --> 01:38:24,300
to do and you know so I'm just gonna

1779
01:38:22,369 --> 01:38:26,180
push a little forward on cleaning up

1780
01:38:24,300 --> 01:38:44,699
this code and we'll go from there

1781
01:38:26,180 --> 01:38:47,570
so convert s 32 seems fine just looking

1782
01:38:44,699 --> 01:38:47,569
at what we're doing here

1783
01:38:49,489 --> 01:38:54,359
so I mean really like this stuff is it's

1784
01:38:52,109 --> 01:38:56,009
not good and I might just go ahead and

1785
01:38:54,359 --> 01:38:57,389
fix that really quickly here while we're

1786
01:38:56,010 --> 01:39:01,110
at it because I've got these two dues in

1787
01:38:57,390 --> 01:39:03,900
here right so what I actually want here

1788
01:39:01,109 --> 01:39:07,019
is I want this these all to call extract

1789
01:39:03,899 --> 01:39:10,799
zero right so that these are all gonna

1790
01:39:07,020 --> 01:39:12,660
do exactly the same thing but so all I

1791
01:39:10,800 --> 01:39:15,890
need to do here is just do a shuffle for

1792
01:39:12,659 --> 01:39:22,170
X right we're if we're doing extract one

1793
01:39:15,890 --> 01:39:24,720
we just put one everywhere like so so

1794
01:39:22,170 --> 01:39:28,350
this is this is what I actually want to

1795
01:39:24,720 --> 01:39:33,420
be doing so for each one of these you

1796
01:39:28,350 --> 01:39:36,329
know it just looks like this and what we

1797
01:39:33,420 --> 01:39:39,210
could do is call that a convert f/32 so

1798
01:39:36,329 --> 01:39:42,359
to mirror this the other thing we could

1799
01:39:39,210 --> 01:39:47,180
do is say all right convert f/32 VI

1800
01:39:42,359 --> 01:39:47,179
right and it's just this

1801
01:39:55,909 --> 01:40:09,300
right I think um so then what we could

1802
01:40:08,159 --> 01:40:11,670
do is anywhere that we were doing

1803
01:40:09,300 --> 01:40:13,829
extract you can just do a convert f/32

1804
01:40:11,670 --> 01:40:16,980
and it'll just pull out the value for

1805
01:40:13,829 --> 01:40:22,489
you right so if we go to like you know

1806
01:40:16,979 --> 01:40:32,819
here this is this is convert F 32 0

1807
01:40:22,489 --> 01:40:37,500
convert F 32 1 convert F 32 - what are

1808
01:40:32,819 --> 01:40:38,699
we complaining about here that and then

1809
01:40:37,500 --> 01:40:40,590
the rest of the places where this was

1810
01:40:38,699 --> 01:40:46,979
happening same thing so this is like

1811
01:40:40,590 --> 01:40:51,210
converted F 32 0 convert F 32 1 convert

1812
01:40:46,979 --> 01:40:57,089
F 32 - blah blah blah blah blah convert

1813
01:40:51,210 --> 01:41:04,670
F 32 so you're am converted F 32 oh wait

1814
01:40:57,090 --> 01:41:04,670
no no not correct these are all zeros

1815
01:41:06,050 --> 01:41:09,050
okay

1816
01:41:12,439 --> 01:41:26,039
and that pull that one of each these

1817
01:41:17,640 --> 01:41:28,760
this is just pulling out the zero so

1818
01:41:26,039 --> 01:41:28,760
that'd be like this

1819
01:41:36,689 --> 01:41:42,948
[Music]

1820
01:41:39,158 --> 01:41:45,559
and to a certain extent if you're always

1821
01:41:42,948 --> 01:41:51,408
purling out zero you wouldn't need the

1822
01:41:45,560 --> 01:41:53,750
shuffle right so I don't know if the

1823
01:41:51,408 --> 01:41:56,899
compar smart enough to remove the

1824
01:41:53,750 --> 01:42:01,429
shuffle so we may need to convert F 30

1825
01:41:56,899 --> 01:42:03,738
to zero as like a special case you know

1826
01:42:01,429 --> 01:42:11,060
I mean I don't know so that's kind of a

1827
01:42:03,738 --> 01:42:14,289
separate issue too let's take a look so

1828
01:42:11,060 --> 01:42:17,090
all right off we go

1829
01:42:14,289 --> 01:42:19,310
so that shouldn't change the runtime and

1830
01:42:17,090 --> 01:42:22,039
I'll think I guess we'll find out but

1831
01:42:19,310 --> 01:42:25,520
that should be basically the same yeah

1832
01:42:22,039 --> 01:42:27,140
so it looks like that was back down to

1833
01:42:25,520 --> 01:42:28,640
what we expected is that just variance

1834
01:42:27,140 --> 01:42:32,329
that's happening so we're not slower

1835
01:42:28,640 --> 01:42:33,829
we're basically the same speed okay so

1836
01:42:32,329 --> 01:42:36,039
it looks like there's actually a fair

1837
01:42:33,829 --> 01:42:37,460
bit of variance in there actually I

1838
01:42:36,039 --> 01:42:40,850
shouldn't have jumped to conclusions

1839
01:42:37,460 --> 01:42:43,939
okay so if anything we're actually

1840
01:42:40,850 --> 01:42:45,320
probably a little faster because it

1841
01:42:43,939 --> 01:42:47,629
looks like it more consistently gets

1842
01:42:45,319 --> 01:42:50,448
down lower there so okay whatever so I

1843
01:42:47,630 --> 01:42:52,819
was that's below kind of our our noise

1844
01:42:50,448 --> 01:42:56,359
floor for this particular test we don't

1845
01:42:52,819 --> 01:43:05,000
have a way of really looking at that so

1846
01:42:56,359 --> 01:43:08,420
you know we've seen values that are at

1847
01:43:05,000 --> 01:43:10,579
least this low so just be advised that's

1848
01:43:08,420 --> 01:43:13,730
where we're sort of at now at our best

1849
01:43:10,579 --> 01:43:16,100
um so what I kind of wanted to do then

1850
01:43:13,729 --> 01:43:18,559
is just say well what what would happen

1851
01:43:16,100 --> 01:43:23,810
if we just said where we do the compute

1852
01:43:18,560 --> 01:43:26,690
irradiance so like here where we do this

1853
01:43:23,810 --> 01:43:28,969
compute voxel irradiance at you know

1854
01:43:26,689 --> 01:43:32,359
what if we just what if we just went in

1855
01:43:28,969 --> 01:43:34,819
there and and did just that right like

1856
01:43:32,359 --> 01:43:36,948
what if we just welded this directly in

1857
01:43:34,819 --> 01:43:42,170
there so it just Falls straight through

1858
01:43:36,948 --> 01:43:50,419
and this stuff can just be

1859
01:43:42,170 --> 01:43:52,909
factor Dow and similarly like this stuff

1860
01:43:50,420 --> 01:43:54,079
that comes in here can just stay in the

1861
01:43:52,909 --> 01:43:55,300
registers and doesn't have to do

1862
01:43:54,079 --> 01:43:57,800
anything right

1863
01:43:55,300 --> 01:44:00,800
so I don't know what will happen there

1864
01:43:57,800 --> 01:44:02,989
but I'm just gonna try it real quick to

1865
01:44:00,800 --> 01:44:08,480
see what happens so if we were to grab

1866
01:44:02,988 --> 01:44:11,329
like this entire load of crap here and

1867
01:44:08,479 --> 01:44:14,389
you can see that reflect color foo which

1868
01:44:11,329 --> 01:44:16,369
was already it's already in exactly the

1869
01:44:14,390 --> 01:44:19,250
right format in fact let's just we can

1870
01:44:16,369 --> 01:44:21,050
start with that I suppose you can see

1871
01:44:19,250 --> 01:44:23,329
here that this is about to load this

1872
01:44:21,050 --> 01:44:27,980
thing up exactly the way that it already

1873
01:44:23,329 --> 01:44:30,050
actually is right and the only thing I'm

1874
01:44:27,979 --> 01:44:32,779
not sure about is when we do the tile

1875
01:44:30,050 --> 01:44:37,610
loads we've got to get rid of the zero

1876
01:44:32,779 --> 01:44:39,639
lane I'm sorry the three lane if we want

1877
01:44:37,609 --> 01:44:43,399
to make sure that's zero but if I look

1878
01:44:39,640 --> 01:44:46,699
it shouldn't matter because it never

1879
01:44:43,399 --> 01:44:48,619
actually gets used right so we nerf that

1880
01:44:46,698 --> 01:44:51,289
value anyway so the lanes not actually

1881
01:44:48,619 --> 01:44:56,689
there so in theory this right here can

1882
01:44:51,289 --> 01:45:01,269
just return this value right so in

1883
01:44:56,689 --> 01:45:01,269
theory we can say all right this this is

1884
01:45:02,529 --> 01:45:11,779
let me just real quick so if we pull

1885
01:45:06,380 --> 01:45:15,289
this out here and the ABB raycast which

1886
01:45:11,779 --> 01:45:20,559
calls this somewhere like right here

1887
01:45:15,289 --> 01:45:25,670
right so if this thing needs this to be

1888
01:45:20,560 --> 01:45:27,710
to be this way we can just have the the

1889
01:45:25,670 --> 01:45:30,350
wide light sample come back here and

1890
01:45:27,710 --> 01:45:33,170
this this routine which is now super

1891
01:45:30,350 --> 01:45:35,000
slow compared to our new routine can do

1892
01:45:33,170 --> 01:45:37,730
the old way so we can keep both of those

1893
01:45:35,000 --> 01:45:39,429
running just fine but now what we'll do

1894
01:45:37,729 --> 01:45:41,629
is we'll just for the other case we'll

1895
01:45:39,429 --> 01:45:43,159
we'll just return it as an effort you've

1896
01:45:41,630 --> 01:45:44,960
why it's that we're not doing like

1897
01:45:43,159 --> 01:45:46,159
extractions and then just just to weld

1898
01:45:44,960 --> 01:45:46,869
them back together right it doesn't make

1899
01:45:46,159 --> 01:45:50,750
any sense

1900
01:45:46,869 --> 01:45:53,179
so this here we'll just do an f32 for X

1901
01:45:50,750 --> 01:45:55,399
this was just saying reflect color foo

1902
01:45:53,179 --> 01:45:56,090
it's already exactly what it needs to be

1903
01:45:55,399 --> 01:45:57,589
so we're just going to

1904
01:45:56,090 --> 01:46:00,560
say look here's their flecked level

1905
01:45:57,590 --> 01:46:02,659
right that's what comes back and we're

1906
01:46:00,560 --> 01:46:03,710
gonna get rid of of that so now we've

1907
01:46:02,658 --> 01:46:05,629
just got the emission level in the

1908
01:46:03,710 --> 01:46:08,118
transmission level that happened

1909
01:46:05,630 --> 01:46:11,179
automatically and then the reflect level

1910
01:46:08,118 --> 01:46:15,679
it just gets melted in there and off we

1911
01:46:11,179 --> 01:46:16,940
go so I think that should just work fine

1912
01:46:15,679 --> 01:46:18,710
that should produce exactly the same

1913
01:46:16,939 --> 01:46:20,569
results it's just again getting rid of

1914
01:46:18,710 --> 01:46:23,480
some of the cruft of backing into this

1915
01:46:20,569 --> 01:46:25,099
slowly from where we were to you know

1916
01:46:23,479 --> 01:46:27,138
slowly optimizing each part now you can

1917
01:46:25,099 --> 01:46:29,360
start to weld those parts together and

1918
01:46:27,139 --> 01:46:32,868
you know I mean that's like way more

1919
01:46:29,359 --> 01:46:34,189
efficient now right and again part of

1920
01:46:32,868 --> 01:46:37,069
that's just because the visual studio

1921
01:46:34,189 --> 01:46:39,948
compiler sucks at optimizing as a C code

1922
01:46:37,069 --> 01:46:42,139
so we're not really optimizing this much

1923
01:46:39,948 --> 01:46:45,229
all we're really doing is getting cruft

1924
01:46:42,139 --> 01:46:46,460
moving cruft out of it and moving that

1925
01:46:45,229 --> 01:46:48,289
craft out of its just helping the

1926
01:46:46,460 --> 01:46:50,569
compiler do an okay job right but we

1927
01:46:48,289 --> 01:46:52,219
haven't done anything like all this has

1928
01:46:50,569 --> 01:46:53,840
just been kind of just nothing right

1929
01:46:52,219 --> 01:46:57,618
this is all stuff like a Pilar in theory

1930
01:46:53,840 --> 01:46:58,670
could do if it was really fancy and so

1931
01:46:57,618 --> 01:47:00,769
all we're doing is just like

1932
01:46:58,670 --> 01:47:02,630
hand-holding the compiler right and and

1933
01:47:00,770 --> 01:47:04,849
getting it to the point where it's like

1934
01:47:02,630 --> 01:47:14,750
oh okay right I see what you were doing

1935
01:47:04,849 --> 01:47:16,039
there right so that's fine and you know

1936
01:47:14,750 --> 01:47:18,770
maybe this routine can be done a little

1937
01:47:16,039 --> 01:47:21,889
bit better I don't know but if we take a

1938
01:47:18,770 --> 01:47:23,030
look at what happens on the outside you

1939
01:47:21,889 --> 01:47:26,960
can see that we're just doing the max

1940
01:47:23,029 --> 01:47:29,960
here with this reflect level this whole

1941
01:47:26,960 --> 01:47:33,109
thing right can just be could just be

1942
01:47:29,960 --> 01:47:34,039
dropped in here now so I don't know if

1943
01:47:33,109 --> 01:47:37,519
we want to do that or not

1944
01:47:34,039 --> 01:47:40,789
like this may just be stupid so I don't

1945
01:47:37,520 --> 01:47:46,159
know but if I was to just say all right

1946
01:47:40,789 --> 01:47:53,960
you know dump this whole thing right so

1947
01:47:46,158 --> 01:47:56,269
now reflect level is this and we're just

1948
01:47:53,960 --> 01:48:00,880
going to optimize this disaster in place

1949
01:47:56,270 --> 01:48:03,340
here so here's this whole giant nonsense

1950
01:48:00,880 --> 01:48:05,889
Factory

1951
01:48:03,340 --> 01:48:07,630
and we know that the diffuser at lists

1952
01:48:05,889 --> 01:48:09,010
code should just just work because it's

1953
01:48:07,630 --> 01:48:11,139
named the same thing so these things

1954
01:48:09,010 --> 01:48:13,480
don't have to happen probe be single and

1955
01:48:11,139 --> 01:48:16,690
probe n single are two different things

1956
01:48:13,479 --> 01:48:20,500
now so we kind of need to call our probe

1957
01:48:16,689 --> 01:48:23,469
n single and these two things like

1958
01:48:20,500 --> 01:48:27,250
occlusion D in probe P single or don't

1959
01:48:23,469 --> 01:48:29,649
get used until down here right so

1960
01:48:27,250 --> 01:48:38,649
there's the sample P so I'll just name

1961
01:48:29,649 --> 01:48:45,368
it that to make it easier on us and then

1962
01:48:38,649 --> 01:48:48,879
occlusion D isn't even used as it is it

1963
01:48:45,368 --> 01:48:52,529
no it must be it's the thing that does

1964
01:48:48,880 --> 01:48:52,529
the occlusion end is what it's called

1965
01:48:56,429 --> 01:49:04,079
okay so we're just going to start here

1966
01:48:58,689 --> 01:49:09,149
which is doing literally nothing and

1967
01:49:04,079 --> 01:49:09,149
where's our one and 0 here one

1968
01:49:09,689 --> 01:49:21,119
and zero there we go okay so again

1969
01:49:18,270 --> 01:49:23,730
nothing fancy happening here nothing

1970
01:49:21,119 --> 01:49:26,069
even interesting just welding those

1971
01:49:23,729 --> 01:49:31,429
things together and so there's now the

1972
01:49:26,069 --> 01:49:33,210
final routine and go ahead and run it I

1973
01:49:31,430 --> 01:49:36,000
don't really expect it to do anything

1974
01:49:33,210 --> 01:49:37,409
here particularly much but you can see

1975
01:49:36,000 --> 01:49:41,189
like this number just continues to go

1976
01:49:37,409 --> 01:49:42,960
down and really again there's there's

1977
01:49:41,189 --> 01:49:44,519
nothing magic about it it's just helping

1978
01:49:42,960 --> 01:49:47,850
the compiler see what the heck is going

1979
01:49:44,520 --> 01:49:54,330
on and so again if we take a look at

1980
01:49:47,850 --> 01:49:56,310
where we actually are on this welding

1981
01:49:54,329 --> 01:49:58,769
those together more directly you know

1982
01:49:56,310 --> 01:50:02,910
all we did was that we're now starting

1983
01:49:58,770 --> 01:50:05,310
to get down towards like we're rapidly

1984
01:50:02,909 --> 01:50:07,198
descending into where there's very

1985
01:50:05,310 --> 01:50:08,969
little time spent in the Ray tracer at

1986
01:50:07,198 --> 01:50:12,119
all right because we know that this is a

1987
01:50:08,969 --> 01:50:14,579
floor like basically 2.6 is the fastest

1988
01:50:12,119 --> 01:50:20,309
we could be if we did nothing we do no

1989
01:50:14,579 --> 01:50:24,090
computations were at 2.6 right do any

1990
01:50:20,310 --> 01:50:25,560
more t action here oh yeah there's a

1991
01:50:24,090 --> 01:50:27,949
little bit left there's a little bit of

1992
01:50:25,560 --> 01:50:27,949
T left

1993
01:50:36,470 --> 01:50:45,350
okay so you know just looking at the

1994
01:50:43,079 --> 01:50:47,939
grid ray caster at that point and saying

1995
01:50:45,350 --> 01:50:50,100
you know should this be welded or not I

1996
01:50:47,939 --> 01:50:52,859
think for at least for MSV sees sake we

1997
01:50:50,100 --> 01:50:55,170
probably should and then you can take a

1998
01:50:52,859 --> 01:50:59,069
look and these things are already in

1999
01:50:55,170 --> 01:51:03,000
lanes so some of this may just be able

2000
01:50:59,069 --> 01:51:05,039
to persist and some of it may not so

2001
01:51:03,000 --> 01:51:06,960
let's take a look at probe piece single

2002
01:51:05,039 --> 01:51:10,439
for example because we don't really know

2003
01:51:06,960 --> 01:51:12,659
what some of this stuff even does so

2004
01:51:10,439 --> 01:51:16,919
because we haven't looked at that part

2005
01:51:12,659 --> 01:51:18,630
of the routine today even at all so

2006
01:51:16,920 --> 01:51:20,880
let's take a look at where that code

2007
01:51:18,630 --> 01:51:23,609
actually does anything so that's going

2008
01:51:20,880 --> 01:51:28,380
to be in the sample P part of the code

2009
01:51:23,609 --> 01:51:31,219
right which is it's just this here right

2010
01:51:28,380 --> 01:51:34,739
and so the question is is there anything

2011
01:51:31,220 --> 01:51:38,430
fancy we could do there to prep probe P

2012
01:51:34,739 --> 01:51:42,420
single in a faster way I don't see a lot

2013
01:51:38,430 --> 01:51:46,050
going on there but you know obviously

2014
01:51:42,420 --> 01:51:48,260
this could be streamlined a bit I should

2015
01:51:46,050 --> 01:51:48,260
think

2016
01:51:59,850 --> 01:52:11,740
so looking at probe sample P this is

2017
01:52:05,470 --> 01:52:14,050
just done completely wide right and if

2018
01:52:11,739 --> 01:52:17,319
you look at what's going on there it's

2019
01:52:14,050 --> 01:52:33,900
only doing it just to do this just to do

2020
01:52:17,319 --> 01:52:37,809
this right so if we wanted to actually

2021
01:52:33,899 --> 01:52:49,539
we could just add this and have it be in

2022
01:52:37,810 --> 01:52:53,470
the right place to begin with right also

2023
01:52:49,539 --> 01:52:55,090
what the crap is going on here so here's

2024
01:52:53,470 --> 01:52:56,800
what I'll say I don't know that I want

2025
01:52:55,090 --> 01:52:58,869
to do it now so let's maybe wait till

2026
01:52:56,800 --> 01:53:01,180
tomorrow to do this so let's go to QA

2027
01:52:58,869 --> 01:53:03,989
now but I'm just gonna say look now we

2028
01:53:01,180 --> 01:53:07,119
can streamline this code pretty

2029
01:53:03,989 --> 01:53:09,130
significantly because we can make this

2030
01:53:07,119 --> 01:53:11,500
stuff just line up with what it actually

2031
01:53:09,130 --> 01:53:14,020
needs to be on the way out and save a

2032
01:53:11,500 --> 01:53:18,340
bunch of shuffling right take some

2033
01:53:14,020 --> 01:53:20,020
pressure off of port five which i think

2034
01:53:18,340 --> 01:53:20,440
is the only port on sky like that can do

2035
01:53:20,020 --> 01:53:26,760
anything

2036
01:53:20,439 --> 01:53:26,759
shuffle related so let's just say like

2037
01:53:42,250 --> 01:53:45,739
because now I think now that we know

2038
01:53:44,569 --> 01:53:47,449
that we're just look we're just gonna

2039
01:53:45,739 --> 01:53:49,460
leave these in X Y Z's we're not trying

2040
01:53:47,449 --> 01:53:51,349
to do this multiple at a time so it's

2041
01:53:49,460 --> 01:53:53,630
we're only gonna get a 3x speed-up ever

2042
01:53:51,350 --> 01:53:55,700
on this stuff we're not gonna get 4x and

2043
01:53:53,630 --> 01:53:57,350
so just that's the way it is we gave up

2044
01:53:55,699 --> 01:53:59,720
on that because we don't really want to

2045
01:53:57,350 --> 01:54:00,800
do the match nations that might be

2046
01:53:59,720 --> 01:54:02,300
necessary to get that happened so we're

2047
01:54:00,800 --> 01:54:04,579
not gonna do that but we want to just

2048
01:54:02,300 --> 01:54:06,829
get this flowing smoothly with that

2049
01:54:04,579 --> 01:54:08,149
three wideness because there's a lot of

2050
01:54:06,829 --> 01:54:09,649
opportunities for us to advantage of

2051
01:54:08,149 --> 01:54:12,049
that so we're just gonna do that right

2052
01:54:09,649 --> 01:54:14,210
and it won't be the world's most optimal

2053
01:54:12,050 --> 01:54:15,770
ray caster but it's pretty darn good and

2054
01:54:14,210 --> 01:54:18,819
it's getting faster and faster and

2055
01:54:15,770 --> 01:54:21,080
faster so I'm pretty happy with it right

2056
01:54:18,819 --> 01:54:23,869
so I think that's all we really need

2057
01:54:21,079 --> 01:54:25,970
there and and so let's just go to a

2058
01:54:23,869 --> 01:54:29,470
brief Q&amp;A and then tomorrow we'll just

2059
01:54:25,970 --> 01:54:32,590
pick them up right back where we are and

2060
01:54:29,470 --> 01:54:32,590
you know

2061
01:54:43,118 --> 01:54:47,448
sorry to be off-topic I finished all the

2062
01:54:45,439 --> 01:54:48,799
five days in the intro to see and it was

2063
01:54:47,448 --> 01:54:50,178
awesome but there's a huge gap between

2064
01:54:48,800 --> 01:54:51,409
the intro and the main course that I'm

2065
01:54:50,179 --> 01:54:52,368
not able to fully understand what's your

2066
01:54:51,408 --> 01:54:54,529
suggestion I'm new to programming

2067
01:54:52,368 --> 01:54:56,899
started reading Kane I recently um I

2068
01:54:54,529 --> 01:54:59,000
don't have a suggestion at the immediate

2069
01:54:56,899 --> 01:55:01,399
moment the only way I can say is I do

2070
01:54:59,000 --> 01:55:05,510
have a C course coming up so I'm trying

2071
01:55:01,399 --> 01:55:09,408
to address this there's going to be a C

2072
01:55:05,510 --> 01:55:11,510
course coming up you can put your name

2073
01:55:09,408 --> 01:55:13,879
in the star code galaxy to sign up for

2074
01:55:11,510 --> 01:55:18,500
when it's ready and that's a complete

2075
01:55:13,880 --> 01:55:20,539
course basically it will take you from

2076
01:55:18,500 --> 01:55:23,359
knowing nothing so like it would it the

2077
01:55:20,539 --> 01:55:27,019
idea is it takes you from any number of

2078
01:55:23,359 --> 01:55:30,920
points so knowing no coding knowing

2079
01:55:27,020 --> 01:55:35,000
coding but not C knowing C but not

2080
01:55:30,920 --> 01:55:36,408
low-level or knowing low-level and from

2081
01:55:35,000 --> 01:55:41,149
any of those points takes you to

2082
01:55:36,408 --> 01:55:42,920
complete game implementation so it

2083
01:55:41,149 --> 01:55:44,329
should do what you need unfortunately

2084
01:55:42,920 --> 01:55:46,279
it's not quite ready yet I'm trying to

2085
01:55:44,329 --> 01:55:47,779
get it out soon it's just I always I

2086
01:55:46,279 --> 01:55:50,899
just have so much stuff to do it's hard

2087
01:55:47,779 --> 01:55:52,849
for me to always yeah there's too much

2088
01:55:50,899 --> 01:55:56,598
stuff to do in the world unfortunately

2089
01:55:52,849 --> 01:55:59,270
and so you know and not very many people

2090
01:55:56,599 --> 01:56:01,719
are ever doing any of it so that's just

2091
01:55:59,270 --> 01:56:01,719
where we're at

2092
01:56:04,969 --> 01:56:09,359
but yeah the intro to see stuff was just

2093
01:56:07,500 --> 01:56:10,770
a thing that I was that I tried for

2094
01:56:09,359 --> 01:56:12,839
tests streaming to see how things would

2095
01:56:10,770 --> 01:56:14,640
go but then it turned out tons of people

2096
01:56:12,840 --> 01:56:18,630
use it because there's so little good

2097
01:56:14,640 --> 01:56:20,460
intro to see stuff so I've been asked

2098
01:56:18,630 --> 01:56:22,800
for the past five years of handmade hero

2099
01:56:20,460 --> 01:56:25,079
all the time like how do I learn this

2100
01:56:22,800 --> 01:56:26,850
base stuff and I'm like I don't know

2101
01:56:25,079 --> 01:56:29,429
because the learning materials are all

2102
01:56:26,850 --> 01:56:32,460
terrible so I'm trying to rectify that

2103
01:56:29,429 --> 01:56:36,079
so hopefully eventually star code Galaxy

2104
01:56:32,460 --> 01:56:42,869
star code galaxy com4 if you missed it

2105
01:56:36,079 --> 01:56:44,880
star code galaxy comm if you just go to

2106
01:56:42,869 --> 01:56:50,130
our code galaxy comm and sign up there

2107
01:56:44,880 --> 01:56:54,810
that'll be well I'll send it out and and

2108
01:56:50,130 --> 01:56:56,130
then folks can can have an option we

2109
01:56:54,810 --> 01:56:57,600
haven't announced like pricing or

2110
01:56:56,130 --> 01:56:59,579
available in this of it but it you know

2111
01:56:57,600 --> 01:57:02,340
I think it'll be around 50 bucks so

2112
01:56:59,579 --> 01:57:05,460
it'll be pretty cheap and it'll come

2113
01:57:02,340 --> 01:57:06,630
with everything so that's that's the

2114
01:57:05,460 --> 01:57:07,980
current plan I don't know what the

2115
01:57:06,630 --> 01:57:09,690
actual release plan will be but it

2116
01:57:07,979 --> 01:57:11,250
shouldn't be it's not gonna be one of

2117
01:57:09,689 --> 01:57:13,879
these like ten thousand dollar coding

2118
01:57:11,250 --> 01:57:19,189
bootcamp nonsense things it'll it'll be

2119
01:57:13,880 --> 01:57:19,190
it'll be very affordable

2120
01:57:38,590 --> 01:57:45,849
well good all right well I guess if

2121
01:57:44,078 --> 01:57:48,009
people have questions that they haven't

2122
01:57:45,849 --> 01:57:49,328
thought of are posted here they can

2123
01:57:48,010 --> 01:57:52,900
always ask them tomorrow because we'll

2124
01:57:49,328 --> 01:57:55,868
be picking up right here where we are

2125
01:57:52,899 --> 01:57:57,670
leaving off so I will go ahead and close

2126
01:57:55,868 --> 01:57:58,929
it down thank you everyone for join me

2127
01:57:57,670 --> 01:57:59,920
for in the episode a handmade hero it's

2128
01:57:58,929 --> 01:58:01,359
been a pleasure coding with you as

2129
01:57:59,920 --> 01:58:02,408
always if you want to follow series at

2130
01:58:01,359 --> 01:58:04,868
home you can always prepare to the

2131
01:58:02,408 --> 01:58:06,158
source code period of the game rather it

2132
01:58:04,868 --> 01:58:08,019
comes with a source code so you can

2133
01:58:06,158 --> 01:58:10,538
follow along at home that's on handmade

2134
01:58:08,020 --> 01:58:11,920
hero org I'll be back here tomorrow to

2135
01:58:10,538 --> 01:58:14,889
do the rest of that routine just get

2136
01:58:11,920 --> 01:58:16,989
that slip streamed and and nice and

2137
01:58:14,889 --> 01:58:19,328
clean so we you know there's not all

2138
01:58:16,988 --> 01:58:20,589
these weird extraneous shuffles I hope

2139
01:58:19,328 --> 01:58:22,420
see you back here for that till then

2140
01:58:20,590 --> 01:58:23,619
have fun programming everyone and I'll

2141
01:58:22,420 --> 01:58:26,010
see you on the Internet ticking

2142
01:58:23,618 --> 01:58:26,009
everybody

