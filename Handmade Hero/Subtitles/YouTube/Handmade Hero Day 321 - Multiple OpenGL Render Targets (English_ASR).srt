1
00:00:01,399 --> 00:00:06,028
hello everyone and welcome to handmade

2
00:00:04,318 --> 00:00:09,059
hero the show recode a complete game

3
00:00:06,028 --> 00:00:12,000
live on stream we finished yesterday

4
00:00:09,058 --> 00:00:13,529
debugging a bug that we had and well I

5
00:00:12,000 --> 00:00:14,968
guess I wouldn't say debugging is

6
00:00:13,529 --> 00:00:16,410
probably the wrong term because I pretty

7
00:00:14,968 --> 00:00:18,179
much knew immediately back when we first

8
00:00:16,410 --> 00:00:20,879
in Canada but what the bug actually was

9
00:00:18,179 --> 00:00:22,528
but it was two streams worth of mass

10
00:00:20,879 --> 00:00:24,419
explanations to explain the bug and then

11
00:00:22,528 --> 00:00:26,939
say how to fix it so I guess we didn't

12
00:00:24,420 --> 00:00:28,859
really spend finish up the debugging we

13
00:00:26,939 --> 00:00:31,050
finished up the explanation so that we

14
00:00:28,859 --> 00:00:34,170
could go and fix the bug and that is now

15
00:00:31,050 --> 00:00:37,230
done which brings us back to where we

16
00:00:34,170 --> 00:00:41,520
were before which is to say that at the

17
00:00:37,229 --> 00:00:43,378
moment our game is actually has more

18
00:00:41,520 --> 00:00:44,910
features in the software renderer than

19
00:00:43,378 --> 00:00:46,320
it does in the hardware renderer because

20
00:00:44,909 --> 00:00:48,419
we implement things in the software

21
00:00:46,320 --> 00:00:51,119
renderer first so that I can show how

22
00:00:48,420 --> 00:00:52,260
they work and so if you take a look at

23
00:00:51,119 --> 00:00:54,659
what's going on in the game right now

24
00:00:52,259 --> 00:00:56,280
you can see this is debug mode so it's

25
00:00:54,659 --> 00:00:57,750
running a little slowly in the software

26
00:00:56,280 --> 00:01:00,960
renderer since the software ender really

27
00:00:57,750 --> 00:01:02,698
needs optimizations compiled on but what

28
00:01:00,960 --> 00:01:06,239
you can see here if I laborious Lee

29
00:01:02,698 --> 00:01:11,129
slowly sort of hop over to this part of

30
00:01:06,239 --> 00:01:13,679
the sort of makeshift rectangular blob

31
00:01:11,129 --> 00:01:15,329
thing that we've created is that we have

32
00:01:13,680 --> 00:01:17,670
the ability now to do this sort of

33
00:01:15,329 --> 00:01:21,000
overlay right this sort of alpha bunted

34
00:01:17,670 --> 00:01:22,920
overlay in the software renderer but we

35
00:01:21,000 --> 00:01:24,868
don't have that ability in the hardware

36
00:01:22,920 --> 00:01:27,629
render so if I go in here and i set the

37
00:01:24,868 --> 00:01:29,549
render type to be back to hardware

38
00:01:27,629 --> 00:01:32,250
you'll see that we immediately hit a

39
00:01:29,549 --> 00:01:34,409
certain in our in our hardware renderer

40
00:01:32,250 --> 00:01:36,328
that's just like hey there's a thing

41
00:01:34,409 --> 00:01:38,520
that you told me to do and i don't know

42
00:01:36,328 --> 00:01:41,609
i like never heard of it right so it

43
00:01:38,519 --> 00:01:43,379
doesn't have a case for this thing so we

44
00:01:41,609 --> 00:01:45,060
can't even run in hardware now and

45
00:01:43,379 --> 00:01:46,500
actually support all the features that

46
00:01:45,060 --> 00:01:48,390
we support in the software renderer

47
00:01:46,500 --> 00:01:49,920
because we just added it so the last

48
00:01:48,390 --> 00:01:51,930
thing that we have to do to really say

49
00:01:49,920 --> 00:01:53,460
that we're done with that alpha blended

50
00:01:51,930 --> 00:01:55,110
overlay feature is we're going to have

51
00:01:53,459 --> 00:01:57,269
to have some way in the hardware

52
00:01:55,109 --> 00:02:00,930
renderer to duplicate the results of the

53
00:01:57,269 --> 00:02:02,728
software renderer right and so that's

54
00:02:00,930 --> 00:02:04,380
what we need to start on today and this

55
00:02:02,728 --> 00:02:05,968
would be an extremely simple task and

56
00:02:04,379 --> 00:02:08,310
wasn't for the fact that 3d graphics API

57
00:02:05,968 --> 00:02:09,568
eyes are always swell and when I say

58
00:02:08,310 --> 00:02:12,209
swell I mean the kind of thing that

59
00:02:09,568 --> 00:02:13,689
happens when you have a severe traumatic

60
00:02:12,209 --> 00:02:15,879
injury to one of your

61
00:02:13,689 --> 00:02:19,060
limbs and it gets really huge huge and

62
00:02:15,879 --> 00:02:21,699
purple and disgusting that's what i mean

63
00:02:19,060 --> 00:02:26,500
by swell so let's go ahead and open up

64
00:02:21,699 --> 00:02:29,799
our project not that and compile it here

65
00:02:26,500 --> 00:02:31,629
and if you take a look inside our opengl

66
00:02:29,800 --> 00:02:34,000
subsystem you can see the part where we

67
00:02:31,629 --> 00:02:37,269
were getting that illegal default case

68
00:02:34,000 --> 00:02:39,280
it's right here and the thing that we

69
00:02:37,270 --> 00:02:42,969
were trying to reproduce if we go over

70
00:02:39,280 --> 00:02:46,629
to the software renderer we can jump

71
00:02:42,969 --> 00:02:48,639
down there it's this guy right here so

72
00:02:46,629 --> 00:02:52,750
this is the case that we're missing it's

73
00:02:48,639 --> 00:02:54,329
the the the render target blending case

74
00:02:52,750 --> 00:02:56,919
that was the part that was triggering

75
00:02:54,330 --> 00:02:58,930
but if you take a look at what's going

76
00:02:56,919 --> 00:02:59,979
on here you will see and I mikhamet

77
00:02:58,930 --> 00:03:02,110
those out because they don't really do

78
00:02:59,979 --> 00:03:03,549
anything right now if you take a look at

79
00:03:02,110 --> 00:03:05,230
what else we need to think about here if

80
00:03:03,550 --> 00:03:06,760
there's more to it than just that and

81
00:03:05,229 --> 00:03:09,489
the reason I say there's more to it than

82
00:03:06,759 --> 00:03:11,530
just that is because every single render

83
00:03:09,490 --> 00:03:14,170
command that's coming down the pipe now

84
00:03:11,530 --> 00:03:17,319
has a variable output target so those

85
00:03:14,169 --> 00:03:20,019
output targets per you know / sprite

86
00:03:17,319 --> 00:03:21,879
that's coming down the pipeline any

87
00:03:20,020 --> 00:03:23,500
sprite can be vectored to any render

88
00:03:21,879 --> 00:03:25,030
target in the game right now so we can

89
00:03:23,500 --> 00:03:27,280
have you know the renderer could

90
00:03:25,030 --> 00:03:28,449
actually support just arbitrary numbers

91
00:03:27,280 --> 00:03:30,039
of render targets well you could say

92
00:03:28,449 --> 00:03:31,208
want for render targets these sprites go

93
00:03:30,039 --> 00:03:37,209
this one these sprites go this one these

94
00:03:31,209 --> 00:03:42,039
fresco this one happy birthday right so

95
00:03:37,209 --> 00:03:44,620
given that that's the case we need some

96
00:03:42,039 --> 00:03:46,929
weight of duplicating that functionality

97
00:03:44,620 --> 00:03:50,050
inside the hardware render we need some

98
00:03:46,930 --> 00:03:52,650
way of saying hey every specific sprite

99
00:03:50,050 --> 00:03:56,019
wants to be pointed at a particular

100
00:03:52,650 --> 00:03:57,760
render target and of course in OpenGL we

101
00:03:56,019 --> 00:03:59,830
don't even know what that means we've

102
00:03:57,759 --> 00:04:02,169
never done anything with render targets

103
00:03:59,830 --> 00:04:04,900
in OpenGL so we don't actually know

104
00:04:02,169 --> 00:04:06,699
anything about how we might do that in

105
00:04:04,900 --> 00:04:08,830
our software render because we wrote it

106
00:04:06,699 --> 00:04:11,199
all it's very clear that all we need to

107
00:04:08,830 --> 00:04:13,900
do is create an extra piece of memory

108
00:04:11,199 --> 00:04:15,189
that we can point at and say here is the

109
00:04:13,900 --> 00:04:16,870
memory to scribble on when you're

110
00:04:15,189 --> 00:04:18,399
bleeding those rights and we've got

111
00:04:16,870 --> 00:04:20,079
another render target that's about all

112
00:04:18,399 --> 00:04:21,759
there was we had to clear it obviously

113
00:04:20,079 --> 00:04:24,969
but other than that there wasn't very

114
00:04:21,759 --> 00:04:27,129
much to it but now in the OpenGL side of

115
00:04:24,970 --> 00:04:29,260
things we're forced to say well okay we

116
00:04:27,129 --> 00:04:30,459
need that functionality but we don't

117
00:04:29,259 --> 00:04:33,219
actually know how to get that

118
00:04:30,459 --> 00:04:34,719
functionality because that's all inside

119
00:04:33,220 --> 00:04:38,980
open jail so what we're going to have to

120
00:04:34,720 --> 00:04:41,860
do is learn how to talk about render

121
00:04:38,980 --> 00:04:44,470
targets to OpenGL so that it knows what

122
00:04:41,860 --> 00:04:48,069
we're trying to do and this is even more

123
00:04:44,470 --> 00:04:50,080
complicated than that simple statement

124
00:04:48,069 --> 00:04:51,670
might make it sound because if all we

125
00:04:50,079 --> 00:04:54,519
cared about was multiple render targets

126
00:04:51,670 --> 00:04:56,439
well that would be one set of annoying

127
00:04:54,519 --> 00:04:58,599
OpenGL calls we have to make but

128
00:04:56,439 --> 00:05:01,719
actually because we care about something

129
00:04:58,600 --> 00:05:03,670
else besides just the render targets

130
00:05:01,720 --> 00:05:06,430
which obviously makes sense when you

131
00:05:03,670 --> 00:05:09,310
think about it we also care about using

132
00:05:06,430 --> 00:05:12,129
those render targets as textures right

133
00:05:09,310 --> 00:05:14,470
so what because what we want to do is we

134
00:05:12,129 --> 00:05:16,209
want to take that secondary render

135
00:05:14,470 --> 00:05:19,270
target that we were putting all the top

136
00:05:16,209 --> 00:05:20,859
level those top floor sprites on we want

137
00:05:19,269 --> 00:05:23,560
to take that render target and then use

138
00:05:20,860 --> 00:05:25,569
it as a texture to alpha blend it over

139
00:05:23,560 --> 00:05:28,959
the existing render target that holds

140
00:05:25,569 --> 00:05:30,730
everything else right so hopefully you

141
00:05:28,959 --> 00:05:32,469
can see there that we actually have to

142
00:05:30,730 --> 00:05:34,629
sort of sets of things that we have to

143
00:05:32,470 --> 00:05:36,910
learn how to do in OpenGL one of them is

144
00:05:34,629 --> 00:05:39,159
to ask OpenGL to give us more render

145
00:05:36,910 --> 00:05:41,439
targets than just the one that we get by

146
00:05:39,160 --> 00:05:43,510
default when we start it up and the

147
00:05:41,439 --> 00:05:46,689
other one is to say hey I've got a

148
00:05:43,509 --> 00:05:50,230
render target and I need to talk about

149
00:05:46,689 --> 00:05:52,449
it as a texture later on as well so keep

150
00:05:50,230 --> 00:05:54,850
that in mind right because those two

151
00:05:52,449 --> 00:05:58,990
things are sort of additional concepts

152
00:05:54,850 --> 00:06:00,700
as far as open gel is concerned so you

153
00:05:58,990 --> 00:06:02,290
obviously already know everything there

154
00:06:00,699 --> 00:06:03,789
is to know about the software side

155
00:06:02,290 --> 00:06:05,950
because we implemented hopefully that

156
00:06:03,790 --> 00:06:08,319
was so clear to you so really all this

157
00:06:05,949 --> 00:06:09,849
is is just fussing with graphics api's

158
00:06:08,319 --> 00:06:11,230
to try and get them to do the exact same

159
00:06:09,850 --> 00:06:13,060
thing we just implemented very

160
00:06:11,230 --> 00:06:17,200
straightforwardly in our software

161
00:06:13,060 --> 00:06:19,720
renderer so let's take a look at at the

162
00:06:17,199 --> 00:06:23,289
OpenGL side of things I always forget I

163
00:06:19,720 --> 00:06:26,050
think it's like GL doc someone told us

164
00:06:23,290 --> 00:06:28,990
what there was a good link Doc's GL for

165
00:06:26,050 --> 00:06:32,020
looking up opengl documentation because

166
00:06:28,990 --> 00:06:33,100
i had been using other docs when we were

167
00:06:32,019 --> 00:06:34,449
doing up to a parent someone was like

168
00:06:33,100 --> 00:06:36,430
hey you should use doc doc gels better

169
00:06:34,449 --> 00:06:39,159
they are correct it is definitely better

170
00:06:36,430 --> 00:06:40,959
and look at that you can even specify

171
00:06:39,160 --> 00:06:42,160
the colors so we can harmonize

172
00:06:40,959 --> 00:06:45,250
those cars with it you know if we want

173
00:06:42,160 --> 00:06:48,729
to anyway uh so very much like you

174
00:06:45,250 --> 00:06:50,800
remember we had GL gen textures to

175
00:06:48,728 --> 00:06:53,079
generate texture handles that we could

176
00:06:50,800 --> 00:06:55,810
use there's a corresponding call that

177
00:06:53,079 --> 00:06:57,399
allows us to generate frame buffers and

178
00:06:55,810 --> 00:07:00,459
if I go ahead I guess I don't really

179
00:06:57,399 --> 00:07:01,750
know very much about why these links are

180
00:07:00,459 --> 00:07:04,418
I don't know if he's actually give us

181
00:07:01,750 --> 00:07:07,509
different documentation pages but anyway

182
00:07:04,418 --> 00:07:09,579
here is GL gen frame buffers and you can

183
00:07:07,509 --> 00:07:13,449
see that it works essentially the same

184
00:07:09,579 --> 00:07:17,348
way as the texture handle stuff works

185
00:07:13,449 --> 00:07:19,478
now in that way that I really didn't

186
00:07:17,348 --> 00:07:20,918
realize this until I think someone

187
00:07:19,478 --> 00:07:22,769
mentioned it while I was doing him a

188
00:07:20,918 --> 00:07:26,500
hero I always thought you needed to ask

189
00:07:22,769 --> 00:07:28,120
for frame buffer names or for texture

190
00:07:26,500 --> 00:07:30,189
names but it turned out you don't you

191
00:07:28,120 --> 00:07:33,098
can just use names and as long as their

192
00:07:30,189 --> 00:07:36,339
unused it doesn't matter I believe that

193
00:07:33,098 --> 00:07:39,490
is true for frame buffers as well so I

194
00:07:36,339 --> 00:07:43,359
think if we say buying frame buffer I

195
00:07:39,490 --> 00:07:44,530
think we can actually just use the frame

196
00:07:43,360 --> 00:07:53,439
buffer handles that we are actually

197
00:07:44,529 --> 00:07:55,809
using right and if you look here it says

198
00:07:53,439 --> 00:07:57,788
like okay it becomes target frontier

199
00:07:55,810 --> 00:07:59,259
free respectively until whatever blah

200
00:07:57,788 --> 00:08:00,879
Blau it talks to chill frame about 30

201
00:07:59,259 --> 00:08:02,229
prefer his name and fame before object

202
00:08:00,879 --> 00:08:03,968
please return for called Jill Jeffers or

203
00:08:02,228 --> 00:08:07,240
0 to break the existing binding of frame

204
00:08:03,968 --> 00:08:09,519
so that makes it sound like you can't do

205
00:08:07,240 --> 00:08:12,300
it but I'm not sure let's see if they

206
00:08:09,519 --> 00:08:20,218
use the same verbiage in GL bind texture

207
00:08:12,300 --> 00:08:20,218
and I'm not sure GL go flying texture

208
00:08:21,310 --> 00:08:36,620
hello there we go let's see the people

209
00:08:35,330 --> 00:08:38,150
to show the texture names of the

210
00:08:36,620 --> 00:08:39,679
corresponding texture contests are local

211
00:08:38,149 --> 00:08:42,889
to the shared objects based current GL

212
00:08:39,679 --> 00:08:44,269
turning a spell you must use gel genders

213
00:08:42,889 --> 00:08:47,960
to generate a new set of texture names

214
00:08:44,269 --> 00:08:52,509
so it sounds like these or documentation

215
00:08:47,960 --> 00:08:56,090
are not really correct for the most part

216
00:08:52,509 --> 00:08:59,779
because we know this isn't true right we

217
00:08:56,090 --> 00:09:01,580
know that we don't have that maybe is it

218
00:08:59,779 --> 00:09:04,240
possible that it's only in later

219
00:09:01,580 --> 00:09:10,040
versions of OpenGL that it says that it

220
00:09:04,240 --> 00:09:13,940
says you may use and now it says you

221
00:09:10,039 --> 00:09:19,099
must use so it kind of sounds like you

222
00:09:13,940 --> 00:09:22,580
don't really have the option that's very

223
00:09:19,100 --> 00:09:25,190
interesting once you go up out of OpenGL

224
00:09:22,580 --> 00:09:27,920
to it looks like they require you to

225
00:09:25,190 --> 00:09:29,690
have used the generation calls that's

226
00:09:27,919 --> 00:09:31,189
very interesting so maybe I wasn't quite

227
00:09:29,690 --> 00:09:36,470
so wrong when I thought you need to call

228
00:09:31,190 --> 00:09:38,780
that maybe only old-school opengl allows

229
00:09:36,470 --> 00:09:42,019
you to do without calling gen textures

230
00:09:38,779 --> 00:09:44,120
very interesting so in that case I'm

231
00:09:42,019 --> 00:09:45,289
going to go ahead and use the gen calls

232
00:09:44,120 --> 00:09:47,870
even though it would be a little bit

233
00:09:45,289 --> 00:09:49,699
easier not to because it looks like

234
00:09:47,870 --> 00:09:51,529
based on reading that that as they went

235
00:09:49,700 --> 00:09:55,190
up in OpenGL versions they may have

236
00:09:51,529 --> 00:09:57,620
tightened those restrictions so anyway

237
00:09:55,190 --> 00:09:59,660
geo jen frame buffers it's exactly the

238
00:09:57,620 --> 00:10:01,490
same as Jill gem textures call I say how

239
00:09:59,659 --> 00:10:04,610
many frame buffers I wanted and I get

240
00:10:01,490 --> 00:10:09,200
back the IDs so what I can do here is I

241
00:10:04,610 --> 00:10:12,139
can say well we we know essentially at

242
00:10:09,200 --> 00:10:14,030
the outset here when we do OpenGL render

243
00:10:12,139 --> 00:10:17,360
commands we know when we start things

244
00:10:14,029 --> 00:10:21,139
off that I can sort of go through all of

245
00:10:17,360 --> 00:10:24,740
the render targets that we have and I

246
00:10:21,139 --> 00:10:27,379
can sort of prep you know do any prep

247
00:10:24,740 --> 00:10:29,269
that I need to do so what I could do

248
00:10:27,379 --> 00:10:31,700
here is say well you know however many

249
00:10:29,269 --> 00:10:33,679
render targets that says there are if I

250
00:10:31,700 --> 00:10:34,290
need to allocate more render targets

251
00:10:33,679 --> 00:10:36,479
than that

252
00:10:34,289 --> 00:10:37,649
then I will write or something like that

253
00:10:36,480 --> 00:10:39,690
the other thing i could do is just say

254
00:10:37,649 --> 00:10:42,990
look we're going to support 16 max and

255
00:10:39,690 --> 00:10:44,790
render targets which will never use look

256
00:10:42,990 --> 00:10:47,850
we won't use that many render targets

257
00:10:44,789 --> 00:10:49,828
I'm sure we can just allocate a bunch of

258
00:10:47,850 --> 00:10:53,370
render targets perhaps and then just you

259
00:10:49,828 --> 00:10:55,258
know assert that we never go over right

260
00:10:53,370 --> 00:10:57,929
that seems like an easy thing to do as

261
00:10:55,259 --> 00:11:00,509
well so what happens here when we come

262
00:10:57,929 --> 00:11:01,919
into OpenGL render commands we do have a

263
00:11:00,509 --> 00:11:03,300
little bit of a problem which is that we

264
00:11:01,919 --> 00:11:05,219
don't really have anywhere in particular

265
00:11:03,299 --> 00:11:07,258
to store these things right look we

266
00:11:05,220 --> 00:11:10,350
don't have any any good place to put

267
00:11:07,259 --> 00:11:11,789
them and so you know we could use sort

268
00:11:10,350 --> 00:11:13,379
of a global variable to hold them I

269
00:11:11,789 --> 00:11:15,019
don't know if we wanted to like Fanchon

270
00:11:13,379 --> 00:11:17,850
that I'll use a global variable for now

271
00:11:15,019 --> 00:11:19,980
and we'll just see whether or not we

272
00:11:17,850 --> 00:11:22,409
want to do something fancier after the

273
00:11:19,980 --> 00:11:26,909
fact is it just global variable what's

274
00:11:22,409 --> 00:11:27,958
my what's my global there we go so what

275
00:11:26,909 --> 00:11:29,399
I'm going to do is I'm just going to say

276
00:11:27,958 --> 00:11:32,008
that we can have a maximum number of

277
00:11:29,399 --> 00:11:33,389
these and you can see they're glu ents

278
00:11:32,009 --> 00:11:35,879
right in the documentation so i'm going

279
00:11:33,389 --> 00:11:37,169
to say I've got a global variable glgl

280
00:11:35,879 --> 00:11:42,778
Union so this is just going to be frame

281
00:11:37,169 --> 00:11:45,059
buffer handles and I'm just going to say

282
00:11:42,778 --> 00:11:47,639
that we can have like 16 of those max

283
00:11:45,059 --> 00:11:49,799
right and i'm also going to create a

284
00:11:47,639 --> 00:11:56,039
variable here right which is just a

285
00:11:49,799 --> 00:11:57,689
global frame buffer count ok and i'm

286
00:11:56,039 --> 00:11:59,429
going to start out by assuming that we

287
00:11:57,690 --> 00:12:00,720
have a global frame buffer count of one

288
00:11:59,429 --> 00:12:02,609
and the reason that i'm going to start

289
00:12:00,720 --> 00:12:06,480
out assuming that is because the default

290
00:12:02,610 --> 00:12:08,068
value frame buffer handle of 0 and I'll

291
00:12:06,480 --> 00:12:10,350
notate that here even though I don't

292
00:12:08,068 --> 00:12:13,110
really have to just to say hey by the

293
00:12:10,350 --> 00:12:18,000
way there is a zero the first one is

294
00:12:13,110 --> 00:12:20,009
zero I there is a frame buffer handle 0

295
00:12:18,000 --> 00:12:21,958
which is the default frame buffer right

296
00:12:20,009 --> 00:12:23,610
and we want to keep that concept around

297
00:12:21,958 --> 00:12:24,869
that 0 is the default frame buffer

298
00:12:23,610 --> 00:12:27,360
because that's kind of a convention we

299
00:12:24,870 --> 00:12:29,429
adopted in the renderer and so we don't

300
00:12:27,360 --> 00:12:31,709
want to deal with frame buffer 0 ever as

301
00:12:29,429 --> 00:12:34,008
anything other than that default but all

302
00:12:31,708 --> 00:12:38,429
the rest of the handles we would like to

303
00:12:34,009 --> 00:12:39,930
be able to prepare ok so what I'm going

304
00:12:38,429 --> 00:12:41,969
to do here is I guess I'm going to go

305
00:12:39,929 --> 00:12:43,948
ahead and sort of mimic what we are

306
00:12:41,970 --> 00:12:45,720
doing in the other one we've got sort of

307
00:12:43,948 --> 00:12:46,559
this notion of a clear color and a color

308
00:12:45,720 --> 00:12:48,960
buffer

309
00:12:46,559 --> 00:12:51,509
here if I take a look back at the

310
00:12:48,960 --> 00:12:54,720
handmade render you can see how we do

311
00:12:51,509 --> 00:12:58,500
right we clear each one of these things

312
00:12:54,720 --> 00:13:01,379
and we can actually do that now we

313
00:12:58,500 --> 00:13:03,570
probably should have had a way to do to

314
00:13:01,379 --> 00:13:06,059
specify a clear color / render target

315
00:13:03,570 --> 00:13:07,470
which we don't currently do but you know

316
00:13:06,059 --> 00:13:08,969
since we don't really need that yet we

317
00:13:07,470 --> 00:13:12,389
don't need to do it yet but if we ever

318
00:13:08,970 --> 00:13:13,950
find it we need to we could certainly so

319
00:13:12,389 --> 00:13:17,039
what I want to do here is I want to go

320
00:13:13,950 --> 00:13:18,930
ahead and and mimic exactly what we were

321
00:13:17,039 --> 00:13:21,449
doing before so I'm going to come in

322
00:13:18,929 --> 00:13:23,399
here and say alright we've got a GL

323
00:13:21,450 --> 00:13:24,990
clear color of whatever the command said

324
00:13:23,399 --> 00:13:26,519
to clear it too and then we want to

325
00:13:24,990 --> 00:13:28,019
clear the color buffer bit of a frame

326
00:13:26,519 --> 00:13:30,329
buffer and we're going to do that for

327
00:13:28,019 --> 00:13:32,338
each of our frame buffers right but

328
00:13:30,330 --> 00:13:34,379
before we do I want to make sure that

329
00:13:32,339 --> 00:13:35,580
I've actually allocated enough frame

330
00:13:34,379 --> 00:13:37,289
buffers and you know what I could do

331
00:13:35,580 --> 00:13:39,570
here since we're really not constrained

332
00:13:37,289 --> 00:13:42,028
could just say hey go up to a lot if you

333
00:13:39,570 --> 00:13:44,278
want to write because we're not actually

334
00:13:42,028 --> 00:13:45,539
allocating them unless we need them so

335
00:13:44,278 --> 00:13:47,159
what I can say here is like all right

336
00:13:45,539 --> 00:13:48,990
assert that the array count of the

337
00:13:47,159 --> 00:13:51,000
global frame buffer handles assert that

338
00:13:48,990 --> 00:13:53,610
however many you're asking me to do is

339
00:13:51,000 --> 00:13:54,779
going to be less than that right look I

340
00:13:53,610 --> 00:13:56,879
don't want you to give me anything

341
00:13:54,779 --> 00:13:58,919
that's going to be more than that but

342
00:13:56,879 --> 00:14:03,710
assuming that we're ok then all I want

343
00:13:58,919 --> 00:14:05,819
to do is say if the max render target is

344
00:14:03,710 --> 00:14:08,730
greater than or equal to the global

345
00:14:05,820 --> 00:14:11,190
frame buffer count then we need to

346
00:14:08,730 --> 00:14:13,589
allocate more right and what I can do

347
00:14:11,190 --> 00:14:16,680
there is I can just ask the GL at that

348
00:14:13,589 --> 00:14:19,710
point using GL Jen frame buffers I can

349
00:14:16,679 --> 00:14:21,059
just say ok and it's not going to be

350
00:14:19,710 --> 00:14:22,589
quite as simple as this for reasons that

351
00:14:21,059 --> 00:14:24,959
you'll see in just quite one minute but

352
00:14:22,589 --> 00:14:26,700
let's pretend temporarily that was i'm

353
00:14:24,960 --> 00:14:28,440
going to call GL jen frame buffers and

354
00:14:26,700 --> 00:14:30,420
then i'm going to say ok the number of

355
00:14:28,440 --> 00:14:33,390
frame buffers that i actually need is

356
00:14:30,419 --> 00:14:35,669
however many it will take me to get up

357
00:14:33,389 --> 00:14:37,769
to here so i'll just say like ok the

358
00:14:35,669 --> 00:14:40,889
global frame buffer count right is going

359
00:14:37,769 --> 00:14:44,250
to then have to be equal to this right

360
00:14:40,889 --> 00:14:46,088
so what I could say is new frame buffer

361
00:14:44,250 --> 00:14:52,659
account

362
00:14:46,089 --> 00:14:54,519
like so and so I know that my new frame

363
00:14:52,659 --> 00:14:59,409
buffer count is however many i would

364
00:14:54,519 --> 00:15:05,259
need to store right in fact i could even

365
00:14:59,409 --> 00:15:06,639
do this we go i could say the new

366
00:15:05,259 --> 00:15:08,769
framework countess everybody i need to

367
00:15:06,639 --> 00:15:10,870
store the max render target index right

368
00:15:08,769 --> 00:15:12,789
that's how much i would need and then i

369
00:15:10,870 --> 00:15:15,129
can jenn frame buffers for however much

370
00:15:12,789 --> 00:15:17,409
gets me up to there right so if this is

371
00:15:15,129 --> 00:15:20,620
my new frame buffer count i can just say

372
00:15:17,409 --> 00:15:23,019
how many would get me up to that from

373
00:15:20,620 --> 00:15:25,179
where i currently am and i want you to

374
00:15:23,019 --> 00:15:27,789
put those in the global frame buffer

375
00:15:25,179 --> 00:15:29,528
handles array right I want you to put

376
00:15:27,789 --> 00:15:31,028
them at whatever the current frame

377
00:15:29,528 --> 00:15:33,278
buffer county is so starting we're

378
00:15:31,028 --> 00:15:35,948
starting at the end of the currently

379
00:15:33,278 --> 00:15:37,749
used ones generate me however many more

380
00:15:35,948 --> 00:15:41,049
than I need and then we'll say that

381
00:15:37,749 --> 00:15:43,839
we're done right so that gets us all the

382
00:15:41,049 --> 00:15:46,120
frame buffers we need and so that all we

383
00:15:43,839 --> 00:15:49,540
have to do is actually bind the correct

384
00:15:46,120 --> 00:15:52,328
frame buffer right so the same way that

385
00:15:49,539 --> 00:15:54,998
we bound textures in geo we can do I'll

386
00:15:52,328 --> 00:15:58,899
look actually I know happen to know this

387
00:15:54,999 --> 00:16:01,928
command but i will i will look it up

388
00:15:58,899 --> 00:16:05,289
just so you can see it where oops that

389
00:16:01,928 --> 00:16:06,639
that the cintiq has a bad placement of

390
00:16:05,289 --> 00:16:10,419
that particular buttons i always reach

391
00:16:06,639 --> 00:16:13,419
for the mouse and I hit it ok so there's

392
00:16:10,419 --> 00:16:17,469
GL bind frame buffer go ahead and go

393
00:16:13,419 --> 00:16:20,789
there please and here you can see the

394
00:16:17,470 --> 00:16:23,800
call to it essentially what we have is a

395
00:16:20,789 --> 00:16:25,208
a target so if you remember buying

396
00:16:23,799 --> 00:16:26,588
texture we have the same thing where

397
00:16:25,208 --> 00:16:28,328
it's like do you want to bind the 1d

398
00:16:26,589 --> 00:16:29,410
texture to use extra 3d texture what

399
00:16:28,328 --> 00:16:31,568
kind of texture you're trying to bind

400
00:16:29,409 --> 00:16:34,838
and then which texture are you binding

401
00:16:31,568 --> 00:16:36,188
right and the same is true for GL buying

402
00:16:34,839 --> 00:16:38,920
frame buffer we have a couple different

403
00:16:36,188 --> 00:16:41,110
things we could bind right we can bind

404
00:16:38,919 --> 00:16:43,178
the draw frame buffer which is the frame

405
00:16:41,110 --> 00:16:44,678
buffer we're trying to draw to the read

406
00:16:43,178 --> 00:16:46,448
frame buffer which is the frame buffer

407
00:16:44,678 --> 00:16:48,338
you would read back from if you made a

408
00:16:46,448 --> 00:16:50,649
jail call that said give me the contents

409
00:16:48,339 --> 00:16:52,420
of the frame buffer or GL frame buffer

410
00:16:50,649 --> 00:16:54,879
which is basically binding both of those

411
00:16:52,419 --> 00:16:56,318
right now we might as well buying both

412
00:16:54,879 --> 00:16:57,970
of those even though we don't really

413
00:16:56,318 --> 00:16:59,528
need it because I don't really care but

414
00:16:57,970 --> 00:16:59,889
you know if we were being more Civic we

415
00:16:59,528 --> 00:17:02,499
might

416
00:16:59,889 --> 00:17:04,298
just only bind the draw frame buffer

417
00:17:02,499 --> 00:17:07,659
because we're never reading back from it

418
00:17:04,298 --> 00:17:11,230
anyway so you know six and one half

419
00:17:07,659 --> 00:17:17,319
dozen together so anyway our target here

420
00:17:11,230 --> 00:17:19,599
is that is going to be this right and

421
00:17:17,318 --> 00:17:21,188
the frame buffer we're trying to bind is

422
00:17:19,599 --> 00:17:26,948
just whatever the global frame buffer

423
00:17:21,189 --> 00:17:28,569
handles is for this target and that will

424
00:17:26,949 --> 00:17:29,830
come back as zero for the first one

425
00:17:28,568 --> 00:17:32,528
which of course is the default frame

426
00:17:29,829 --> 00:17:37,960
buffer and I'll come back as whatever

427
00:17:32,528 --> 00:17:41,919
else it should be for any of the ones

428
00:17:37,960 --> 00:17:44,380
that we generated okay so then when we

429
00:17:41,919 --> 00:17:46,269
come out of here we'll set ourselves up

430
00:17:44,380 --> 00:17:47,590
to bind the default frame buffer because

431
00:17:46,269 --> 00:17:50,470
that's probably what we'll be drawing to

432
00:17:47,589 --> 00:17:52,599
most of the time and we'll also set

433
00:17:50,470 --> 00:17:55,179
ourselves a little memento which is

434
00:17:52,599 --> 00:18:02,168
basically like frame you know current

435
00:17:55,179 --> 00:18:03,370
frame buffer like so so now we know what

436
00:18:02,169 --> 00:18:05,350
the frame buffer is that we're drawing

437
00:18:03,369 --> 00:18:07,949
too and then down here we can sort of

438
00:18:05,349 --> 00:18:11,168
say like all right let's go ahead and

439
00:18:07,950 --> 00:18:13,480
you know pick up the values we actually

440
00:18:11,169 --> 00:18:15,820
needed to pick up you can see in here

441
00:18:13,480 --> 00:18:17,889
the clip render target index is the

442
00:18:15,819 --> 00:18:20,379
thing that we're looking for so we can

443
00:18:17,888 --> 00:18:22,719
go ahead and say what we want to do is

444
00:18:20,380 --> 00:18:24,460
look at that clip render target so say

445
00:18:22,720 --> 00:18:26,380
like if the clip round target index is

446
00:18:24,460 --> 00:18:29,350
not equal to whatever the frame buffer

447
00:18:26,380 --> 00:18:31,000
is that we're currently using you know

448
00:18:29,349 --> 00:18:33,490
what I I'd like to write these this way

449
00:18:31,000 --> 00:18:35,349
I usually write code like this such that

450
00:18:33,490 --> 00:18:38,740
the thing I'm assigning to stays on the

451
00:18:35,349 --> 00:18:40,359
same side to see what I'm saying like if

452
00:18:38,740 --> 00:18:42,730
I'm going to do a test for naught equals

453
00:18:40,359 --> 00:18:45,879
and then assign I usually like to make

454
00:18:42,730 --> 00:18:47,798
it so that they line up like that anyway

455
00:18:45,880 --> 00:18:49,539
so you can see your service just saying

456
00:18:47,798 --> 00:18:51,490
okay if the current frame buffer is not

457
00:18:49,538 --> 00:18:53,528
the one that you want me to use I will

458
00:18:51,490 --> 00:18:55,480
go ahead and bind the new one otherwise

459
00:18:53,528 --> 00:18:57,579
I leave the old one bound whatever one

460
00:18:55,480 --> 00:18:59,528
we were on before and just to make it

461
00:18:57,579 --> 00:19:01,839
again a little bit cleaner it's not

462
00:18:59,528 --> 00:19:03,220
really particularly clean either way I'm

463
00:19:01,839 --> 00:19:06,849
going to go ahead and after we're out

464
00:19:03,220 --> 00:19:08,470
I'm just going to undo any like leftover

465
00:19:06,849 --> 00:19:11,009
binding that there might have been just

466
00:19:08,470 --> 00:19:13,639
so nobody below us gets confused right

467
00:19:11,009 --> 00:19:16,398
so that's basically it for the

468
00:19:13,638 --> 00:19:19,058
sort of the basic I need to like

469
00:19:16,398 --> 00:19:21,048
generate and bind frame buffers but

470
00:19:19,058 --> 00:19:22,608
obviously as you can see this isn't

471
00:19:21,048 --> 00:19:24,858
really going to do us any good because

472
00:19:22,608 --> 00:19:26,838
even though we bound those frame buffers

473
00:19:24,858 --> 00:19:29,148
we don't have any access to their

474
00:19:26,838 --> 00:19:30,108
contents we haven't done the additional

475
00:19:29,148 --> 00:19:32,478
work that I was talking about before

476
00:19:30,108 --> 00:19:35,689
where we actually to create a texture

477
00:19:32,479 --> 00:19:37,519
that is the backing of a frame buffer so

478
00:19:35,690 --> 00:19:39,859
that we can use it to draw with because

479
00:19:37,519 --> 00:19:41,838
we still have no way even though I like

480
00:19:39,858 --> 00:19:44,898
implemented that code we don't have any

481
00:19:41,838 --> 00:19:46,940
way of making that work in here in in

482
00:19:44,898 --> 00:19:48,978
this blender render target I need to

483
00:19:46,940 --> 00:19:53,088
draw a full-screen rectangle right here

484
00:19:48,979 --> 00:19:55,639
using some other frame buffer as the

485
00:19:53,088 --> 00:19:57,950
source but I can't I don't have any way

486
00:19:55,638 --> 00:20:02,468
to get at this stuff through the through

487
00:19:57,950 --> 00:20:04,548
the GL at the moment not as a texture

488
00:20:02,469 --> 00:20:05,869
okay so let's go ahead and compile that

489
00:20:04,548 --> 00:20:07,098
and we'll see the first problem we're

490
00:20:05,868 --> 00:20:08,658
going to have which actually has nothing

491
00:20:07,098 --> 00:20:11,178
to do with that and that is simply that

492
00:20:08,659 --> 00:20:12,829
we don't actually know oops I guess I've

493
00:20:11,179 --> 00:20:18,589
got a different problem here what is the

494
00:20:12,828 --> 00:20:21,558
problem whoops cgl on there that's Casey

495
00:20:18,588 --> 00:20:23,538
notation at work i use cgl because i

496
00:20:21,558 --> 00:20:25,908
have my own defines for everything but

497
00:20:23,538 --> 00:20:27,048
that's a separate point this is the

498
00:20:25,909 --> 00:20:29,389
problem I was actually trying to point

499
00:20:27,048 --> 00:20:31,959
out and let me go ahead and fix the

500
00:20:29,388 --> 00:20:36,468
other place I used to do there we go uh

501
00:20:31,959 --> 00:20:38,869
so in GL gen frame buffers and GL buying

502
00:20:36,469 --> 00:20:41,538
frame buffer I you'll notice they're not

503
00:20:38,868 --> 00:20:42,588
there neither is the identifier this is

504
00:20:41,538 --> 00:20:44,450
the thing I was saying where it's not

505
00:20:42,588 --> 00:20:46,759
quite as easy as I make it look I just

506
00:20:44,450 --> 00:20:48,139
typing it in and what's the problem

507
00:20:46,759 --> 00:20:50,239
there well the problem there is the same

508
00:20:48,138 --> 00:20:52,189
problem we ran into before with our srgb

509
00:20:50,239 --> 00:20:55,098
stuff frame buffers for something that

510
00:20:52,190 --> 00:20:57,349
was added after OpenGL one point X that

511
00:20:55,098 --> 00:20:58,638
means that it is not natively defined in

512
00:20:57,348 --> 00:21:00,200
the windows header files because of

513
00:20:58,638 --> 00:21:02,269
course windows doesn't keep open trail

514
00:21:00,200 --> 00:21:07,308
up to date why would they they want you

515
00:21:02,269 --> 00:21:08,778
to use direct x so if we want to use

516
00:21:07,308 --> 00:21:12,558
these we have to add them to our

517
00:21:08,778 --> 00:21:15,229
extension querying and we pretty much

518
00:21:12,558 --> 00:21:18,138
will require these so we need to kind of

519
00:21:15,229 --> 00:21:21,109
have a thing here to say whether or not

520
00:21:18,138 --> 00:21:22,638
we allow the whether or not we have them

521
00:21:21,108 --> 00:21:25,398
and we need to kind of fail if we if we

522
00:21:22,638 --> 00:21:27,229
don't have them so let's take a look at

523
00:21:25,398 --> 00:21:30,739
what that frame buffer

524
00:21:27,230 --> 00:21:32,900
extension actually would be okay that's

525
00:21:30,740 --> 00:21:36,109
not what I want to do help what is

526
00:21:32,900 --> 00:21:40,548
happening okay so let's see here buying

527
00:21:36,109 --> 00:21:42,949
frame buffer extension so here is deal

528
00:21:40,548 --> 00:21:45,319
our frame buffer object I believe this

529
00:21:42,950 --> 00:21:49,819
is the extension we're looking for so I

530
00:21:45,319 --> 00:21:52,609
think we can probably use this one to

531
00:21:49,819 --> 00:21:59,149
indicate whether it's there or not let's

532
00:21:52,609 --> 00:22:00,678
find out well not really a chin from

533
00:21:59,150 --> 00:22:02,630
Bedford mine for about 4 yeah I guess

534
00:22:00,679 --> 00:22:04,429
this one has them originally I think

535
00:22:02,630 --> 00:22:06,770
this would probably be the right one GL

536
00:22:04,429 --> 00:22:08,450
ARB framed by four object it might just

537
00:22:06,769 --> 00:22:12,710
be our frame buffer I want to take a

538
00:22:08,450 --> 00:22:16,580
look at just a see let me see here is

539
00:22:12,710 --> 00:22:20,000
there a GL ARB frame buffer just by

540
00:22:16,579 --> 00:22:22,279
itself no ok so let's take a look at

541
00:22:20,000 --> 00:22:24,500
this and assume that we can get that

542
00:22:22,279 --> 00:22:28,160
extension let's find out what happens if

543
00:22:24,500 --> 00:22:31,308
we can or can't so let's go ahead and

544
00:22:28,160 --> 00:22:36,919
put that in here GL ARB frame buffer

545
00:22:31,308 --> 00:22:40,970
object result GL our frame buffer object

546
00:22:36,919 --> 00:22:45,259
equals true and so in here what we'd

547
00:22:40,970 --> 00:22:47,450
like to do is you know probably we'd

548
00:22:45,259 --> 00:22:50,599
like to say that we just can't render an

549
00:22:47,450 --> 00:22:54,340
open jail without that but I don't know

550
00:22:50,599 --> 00:22:56,719
look I'm not sure exactly how we want to

551
00:22:54,339 --> 00:22:58,579
I'm not sure how we want to deal with

552
00:22:56,720 --> 00:23:01,308
that like should we just not draw the

553
00:22:58,579 --> 00:23:03,798
top floor alpha blended because we could

554
00:23:01,308 --> 00:23:07,839
do that and maybe that's the best thing

555
00:23:03,798 --> 00:23:07,839
to do so yeah maybe I'll support that

556
00:23:07,900 --> 00:23:14,030
maybe I'll support that anyway so what

557
00:23:11,690 --> 00:23:16,190
we do need though regardless is we need

558
00:23:14,029 --> 00:23:18,230
GL gen frame buffers in GL bind frame

559
00:23:16,190 --> 00:23:20,298
buffer we need those to actually be

560
00:23:18,230 --> 00:23:23,539
available to us right so what we need to

561
00:23:20,298 --> 00:23:24,980
do is we need to define these somewhere

562
00:23:23,539 --> 00:23:27,678
where we can actually call them and

563
00:23:24,980 --> 00:23:32,509
we're not using a wiggle get proc

564
00:23:27,679 --> 00:23:35,179
address in here it looks like yeah so I

565
00:23:32,509 --> 00:23:37,548
need to go back to win the wintry to

566
00:23:35,179 --> 00:23:40,370
code here right we're go get proc

567
00:23:37,548 --> 00:23:44,269
address you can see it in

568
00:23:40,369 --> 00:23:46,399
here and you can see us sort of grabbing

569
00:23:44,269 --> 00:23:49,639
these various wiggle functions we need

570
00:23:46,400 --> 00:23:52,160
to get the ones we need to use we go get

571
00:23:49,640 --> 00:23:54,920
proc address to get those extended

572
00:23:52,160 --> 00:23:57,080
functions here and so in order to do

573
00:23:54,920 --> 00:23:59,720
that we're going to have to probably

574
00:23:57,079 --> 00:24:01,250
pass these two open jail in it or

575
00:23:59,720 --> 00:24:03,589
something like this i'm not sure exactly

576
00:24:01,250 --> 00:24:05,058
how we want to do it but point being we

577
00:24:03,589 --> 00:24:07,549
have the exact same problem we'll see

578
00:24:05,058 --> 00:24:08,960
maybe I maybe I I kind of think I know

579
00:24:07,549 --> 00:24:11,419
roughly how I want to do it let's see

580
00:24:08,960 --> 00:24:13,519
here so you can kind of see how we did

581
00:24:11,420 --> 00:24:15,650
these here right we have these wiggle

582
00:24:13,519 --> 00:24:17,808
create context ribs are you know when

583
00:24:15,650 --> 00:24:20,540
API kind of stuff that's happening here

584
00:24:17,808 --> 00:24:23,750
so what we need to do is we need to go

585
00:24:20,539 --> 00:24:27,170
grab the definitions of these from some

586
00:24:23,750 --> 00:24:29,690
source that's going to have them define

587
00:24:27,170 --> 00:24:37,120
the way they would be defined in side

588
00:24:29,690 --> 00:24:44,570
the win api system right excuse me yeah

589
00:24:37,119 --> 00:24:48,079
windows geo extensions i don't know i'm

590
00:24:44,569 --> 00:24:52,460
coughing so much all right uh let's see

591
00:24:48,079 --> 00:24:59,119
what we've got here so yeah we want GL

592
00:24:52,460 --> 00:25:01,579
blind oops fine frame buffers and here

593
00:24:59,119 --> 00:25:05,029
it is right we've got geo buying frame

594
00:25:01,579 --> 00:25:07,039
buffer XD GL dilip frame buffers exe

595
00:25:05,029 --> 00:25:09,500
Jill Jen frame buffer so this is really

596
00:25:07,039 --> 00:25:12,289
what we want here and while we're at it

597
00:25:09,500 --> 00:25:14,089
I'm just going to grab some of the other

598
00:25:12,289 --> 00:25:19,609
ones that we need I think we will need

599
00:25:14,089 --> 00:25:26,299
GL framebuffer texture 2d I don't know

600
00:25:19,609 --> 00:25:29,569
if we'll need any of that thing that

601
00:25:26,299 --> 00:25:34,519
might be it if we're lucky but will we

602
00:25:29,569 --> 00:25:36,049
be lucky I don't know alright so what we

603
00:25:34,519 --> 00:25:39,379
need to do now is we need to kind of

604
00:25:36,049 --> 00:25:43,308
have these be defined in a way that they

605
00:25:39,380 --> 00:25:45,679
can be seen and accessed by the OpenGL

606
00:25:43,308 --> 00:25:50,420
layer under windows so I'm going to go

607
00:25:45,679 --> 00:25:53,210
ahead and sort of get these defines well

608
00:25:50,420 --> 00:25:53,960
actually I don't need 1d or 3d texture

609
00:25:53,210 --> 00:25:56,240
render target

610
00:25:53,960 --> 00:25:57,710
so I only need a 2d one I don't really

611
00:25:56,240 --> 00:25:58,849
need to check the frame buffer status

612
00:25:57,710 --> 00:26:01,970
because we'll assume that we're going to

613
00:25:58,849 --> 00:26:06,678
be okay with that and so here we go with

614
00:26:01,970 --> 00:26:10,548
our calls that will actually need we've

615
00:26:06,679 --> 00:26:12,500
got our definitions all in a row here

616
00:26:10,548 --> 00:26:14,990
right so that all looks pretty good and

617
00:26:12,500 --> 00:26:17,359
so all I really need to do now is just

618
00:26:14,990 --> 00:26:19,839
sort of change the names of these around

619
00:26:17,359 --> 00:26:27,740
a little so that we can have a typedef

620
00:26:19,839 --> 00:26:28,849
as well so GL delete frame buffers geo

621
00:26:27,740 --> 00:26:31,429
and I don't really even need that

622
00:26:28,849 --> 00:26:41,240
because i'm not going to free them frame

623
00:26:31,429 --> 00:26:48,970
buffers GL framebuffer texture 2d and

624
00:26:41,240 --> 00:26:48,970
that's it so yeah GL bind frame buffer

625
00:26:50,230 --> 00:26:57,880
little variable geo jen frame buffers

626
00:26:58,058 --> 00:27:13,759
variable geo frame buffer texture 2d and

627
00:27:05,509 --> 00:27:16,069
that's about it right so API entry in

628
00:27:13,759 --> 00:27:17,480
this case I think is just winapi I don't

629
00:27:16,069 --> 00:27:18,980
think there's anything else you have to

630
00:27:17,480 --> 00:27:20,509
do I don't even know if when appies

631
00:27:18,980 --> 00:27:22,308
defined as anything anymore i think

632
00:27:20,509 --> 00:27:23,990
that's mostly for if you're doing 32-bit

633
00:27:22,308 --> 00:27:26,629
i don't think we need any i don't think

634
00:27:23,990 --> 00:27:28,819
we really need it there but that's

635
00:27:26,630 --> 00:27:30,500
neither here nor there anyway so we've

636
00:27:28,819 --> 00:27:32,720
got GL buying frame buffers Jill Jen

637
00:27:30,500 --> 00:27:36,230
fame breakfast Jill frame buffer texture

638
00:27:32,720 --> 00:27:38,390
2d these all have to be actually loaded

639
00:27:36,230 --> 00:27:40,429
now at some point and so where we do

640
00:27:38,390 --> 00:27:44,110
wiggle swap interval X and those sorts

641
00:27:40,429 --> 00:27:48,440
of guys we just have to go ahead and

642
00:27:44,109 --> 00:27:50,869
unload these these folks into memory so

643
00:27:48,440 --> 00:27:53,120
we've got GL buying frame buffer and

644
00:27:50,869 --> 00:27:56,329
that's going to you know have to do

645
00:27:53,119 --> 00:27:58,658
Whittle get proc address oops proc

646
00:27:56,329 --> 00:27:58,658
address

647
00:27:59,690 --> 00:28:09,700
on its own name same thing is going to

648
00:28:03,440 --> 00:28:09,700
be true of these two fine fellows here

649
00:28:13,269 --> 00:28:30,500
there we are and finally the frame

650
00:28:19,429 --> 00:28:32,509
buffer texture2d there we go now we have

651
00:28:30,500 --> 00:28:33,950
some other things that we're going to

652
00:28:32,509 --> 00:28:36,889
need and you can kind of see them here

653
00:28:33,950 --> 00:28:39,710
we need all of those defines that we

654
00:28:36,888 --> 00:28:43,569
might call that we were using like for

655
00:28:39,710 --> 00:28:46,129
example the GF draw you know the jail

656
00:28:43,569 --> 00:28:48,200
thing we're saying which which kind we

657
00:28:46,128 --> 00:28:50,119
were binding is it the reed frame

658
00:28:48,200 --> 00:28:52,970
buffers the draw frame buffer that sort

659
00:28:50,119 --> 00:28:57,589
of stuff right so we need to get this

660
00:28:52,970 --> 00:29:03,500
pound to fine as well that's got to come

661
00:28:57,589 --> 00:29:06,259
up here and then we also are going to

662
00:29:03,500 --> 00:29:08,450
need the attachment like I think we're

663
00:29:06,259 --> 00:29:10,548
going to need color attachment and some

664
00:29:08,450 --> 00:29:11,870
of these types but we'll go I guess I'll

665
00:29:10,548 --> 00:29:14,058
just leave this up and we'll see which

666
00:29:11,869 --> 00:29:16,278
ones we actually need and we'll grab

667
00:29:14,058 --> 00:29:18,859
them out so let's go ahead and compile

668
00:29:16,278 --> 00:29:21,798
this and see where we're at so GL

669
00:29:18,859 --> 00:29:26,028
framebuffer oops that i did i cut and

670
00:29:21,798 --> 00:29:28,210
pasted the wrong one I guess I did where

671
00:29:26,028 --> 00:29:28,210
is that

672
00:29:31,130 --> 00:29:49,040
and actually know where that is signs

673
00:29:41,089 --> 00:29:56,869
that your graphics API is too large 22

674
00:29:49,039 --> 00:30:01,909
22 22 22 22 22 22 22 there it is that's

675
00:29:56,869 --> 00:30:04,789
one looking for all right so we've got

676
00:30:01,910 --> 00:30:08,720
our frame buffer there let's go ahead

677
00:30:04,789 --> 00:30:12,049
and pile so now we're compiling and in

678
00:30:08,720 --> 00:30:14,809
theory you know we probably can run but

679
00:30:12,049 --> 00:30:17,809
you know we won't oh and I should switch

680
00:30:14,809 --> 00:30:19,369
back to defaulting to the OpenGL

681
00:30:17,809 --> 00:30:21,109
renderer since we're trying to develop

682
00:30:19,369 --> 00:30:26,779
the OpenGL renderer so let's go ahead

683
00:30:21,109 --> 00:30:28,819
and switch we go so here we are on the

684
00:30:26,779 --> 00:30:30,410
OpenGL renderer and you know as you can

685
00:30:28,819 --> 00:30:33,710
see everything's going along swimmingly

686
00:30:30,410 --> 00:30:35,180
but when we come up here you can kind of

687
00:30:33,710 --> 00:30:38,299
see we're getting some kind of weird

688
00:30:35,180 --> 00:30:39,710
like really slow stuff like gets super

689
00:30:38,299 --> 00:30:41,450
slow when we're in the middle of those

690
00:30:39,710 --> 00:30:42,890
two so something Bad's happening right

691
00:30:41,450 --> 00:30:45,440
we don't know but at least we're not

692
00:30:42,890 --> 00:30:47,360
crashing so you know that's always good

693
00:30:45,440 --> 00:30:50,029
but we do have sort of a bit of a

694
00:30:47,359 --> 00:30:51,409
situation there now like I said we don't

695
00:30:50,029 --> 00:30:52,970
really need to bug that yet because we

696
00:30:51,410 --> 00:30:55,430
haven't actually implemented all the

697
00:30:52,970 --> 00:30:57,319
stuff we actually need to implement to

698
00:30:55,430 --> 00:30:58,340
even get the get it working so we don't

699
00:30:57,319 --> 00:30:59,569
really care about the fact that it

700
00:30:58,339 --> 00:31:01,159
happens to slow there because we haven't

701
00:30:59,569 --> 00:31:03,470
even actually made valid render targets

702
00:31:01,160 --> 00:31:04,610
we've made totally bogus render targets

703
00:31:03,470 --> 00:31:07,370
that don't even have anything to draw

704
00:31:04,609 --> 00:31:09,679
into so there's that but ignoring that

705
00:31:07,369 --> 00:31:11,959
for a second let's go ahead and flip

706
00:31:09,680 --> 00:31:13,250
back to the open trail thing here at

707
00:31:11,960 --> 00:31:15,110
least now we know that we've got the

708
00:31:13,250 --> 00:31:18,259
stuff that we needed so what I want to

709
00:31:15,109 --> 00:31:23,149
do here is say well ok we really don't

710
00:31:18,259 --> 00:31:26,329
want to to do to allow the max render

711
00:31:23,150 --> 00:31:29,090
target thing to be used in any situation

712
00:31:26,329 --> 00:31:31,579
where we don't have access to those

713
00:31:29,089 --> 00:31:33,919
additional Frank frame buffer texture

714
00:31:31,579 --> 00:31:36,079
calls so I'm just going to say max

715
00:31:33,920 --> 00:31:38,509
render target index I'm going to say

716
00:31:36,079 --> 00:31:41,480
that that equals what comes in but I'm

717
00:31:38,509 --> 00:31:44,720
going to say if for example if the

718
00:31:41,480 --> 00:31:45,079
OpenGL info doesn't have the extension

719
00:31:44,720 --> 00:31:49,220
that

720
00:31:45,079 --> 00:31:54,259
need so i could say like you know if we

721
00:31:49,220 --> 00:31:57,650
don't have GL buying frame buffer then

722
00:31:54,259 --> 00:32:01,460
we won't do this extra stuff right in

723
00:31:57,650 --> 00:32:04,280
fact I could do this if GL fine buying

724
00:32:01,460 --> 00:32:10,069
frame buffer is actually valid then i

725
00:32:04,279 --> 00:32:11,720
will say that i'll use the actual ones

726
00:32:10,069 --> 00:32:15,439
you said otherwise we'll just pretend we

727
00:32:11,720 --> 00:32:17,089
only have one right then we can go ahead

728
00:32:15,440 --> 00:32:20,019
and say the max render target index

729
00:32:17,089 --> 00:32:23,449
everywhere else that we were using it

730
00:32:20,019 --> 00:32:25,579
it's like that and here we'll just say

731
00:32:23,450 --> 00:32:29,930
the same exact thing so we'll say like

732
00:32:25,579 --> 00:32:32,750
used render target index equals zero and

733
00:32:29,930 --> 00:32:34,250
we'll do you know we could we could do

734
00:32:32,750 --> 00:32:36,230
the same thing I suppose we could just

735
00:32:34,250 --> 00:32:38,420
say and I can even make a pool for this

736
00:32:36,230 --> 00:32:47,390
so i could say pull through to use

737
00:32:38,420 --> 00:32:49,880
render targets not equal to 0 so there's

738
00:32:47,390 --> 00:32:51,470
my use render targets question and so

739
00:32:49,880 --> 00:32:54,670
everywhere in here we'll just say like

740
00:32:51,470 --> 00:32:59,120
ok you know use render target index

741
00:32:54,670 --> 00:33:00,080
equals the clip render target index in

742
00:32:59,119 --> 00:33:01,879
fact you know what I don't even have to

743
00:33:00,079 --> 00:33:07,399
do that really now I think about it all

744
00:33:01,880 --> 00:33:16,010
I really have to do is allow this to do

745
00:33:07,400 --> 00:33:20,060
its thing and I can just say and clip

746
00:33:16,009 --> 00:33:22,339
render target index is a less difficult

747
00:33:20,059 --> 00:33:23,869
to the max render target index right I

748
00:33:22,339 --> 00:33:27,500
can just say like don't allow anything

749
00:33:23,869 --> 00:33:32,809
that's outside the range right so that

750
00:33:27,500 --> 00:33:35,269
should be fine ok so use render target

751
00:33:32,809 --> 00:33:37,819
index or use render targets is there so

752
00:33:35,269 --> 00:33:38,809
there we go and so now in theory will

753
00:33:37,819 --> 00:33:41,419
get a little protection there we should

754
00:33:38,809 --> 00:33:43,940
also in here not bother to try and get

755
00:33:41,420 --> 00:33:46,880
any of those if the extensions not there

756
00:33:43,940 --> 00:33:49,070
so we could say and I don't know where

757
00:33:46,880 --> 00:33:51,790
that we actually do that call where we'd

758
00:33:49,069 --> 00:33:51,789
get the info

759
00:33:56,619 --> 00:34:00,219
where do we do that

760
00:34:05,329 --> 00:34:10,420
don't we get open Jill info somewhere

761
00:34:14,969 --> 00:34:29,589
Jill get info so we do that here that's

762
00:34:23,639 --> 00:34:32,799
not very helpful to be completely honest

763
00:34:29,590 --> 00:34:34,240
with you so when we call in it we would

764
00:34:32,800 --> 00:34:39,130
like to know whether we should try to

765
00:34:34,239 --> 00:34:51,449
load these or not right I mean you know

766
00:34:39,130 --> 00:34:51,450
we want to do something like maybe this

767
00:34:58,289 --> 00:35:04,059
so this is Jill arm frame buffer objects

768
00:35:02,230 --> 00:35:05,769
so if we have that then we will get

769
00:35:04,059 --> 00:35:10,539
these otherwise we leave them as zero

770
00:35:05,769 --> 00:35:12,699
right and that seems okay so yeah so

771
00:35:10,539 --> 00:35:14,259
that's the the basics there but the

772
00:35:12,699 --> 00:35:15,579
problem that we will have now is that

773
00:35:14,260 --> 00:35:16,840
we're not actually doing anything with

774
00:35:15,579 --> 00:35:20,440
those frame buffer so we've got to go

775
00:35:16,840 --> 00:35:25,450
rectify that right so yeah you know it

776
00:35:20,440 --> 00:35:27,130
is um so close that up so let's go back

777
00:35:25,449 --> 00:35:28,569
in and see how to do the rest of the

778
00:35:27,130 --> 00:35:31,390
thing that we need to do in our open

779
00:35:28,570 --> 00:35:34,030
Jill code to actually get render targets

780
00:35:31,389 --> 00:35:36,639
that we need so basically what happens

781
00:35:34,030 --> 00:35:38,500
is when we do these frame buffer

782
00:35:36,639 --> 00:35:40,539
generations what we've done is we've

783
00:35:38,500 --> 00:35:43,420
created like basically blank frame

784
00:35:40,539 --> 00:35:46,719
buffer objects that don't have the

785
00:35:43,420 --> 00:35:48,400
necessary set up to actually be used in

786
00:35:46,719 --> 00:35:50,919
the way that we need them to use to be

787
00:35:48,400 --> 00:35:53,710
used and so what we have to do is we

788
00:35:50,920 --> 00:35:58,150
have to go actually say to opengl hey

789
00:35:53,710 --> 00:36:00,610
there's a texture the texture is going

790
00:35:58,150 --> 00:36:02,349
to be used as a backing store for this

791
00:36:00,610 --> 00:36:03,730
frame buffer so when you render I want

792
00:36:02,349 --> 00:36:05,559
you to render into a texture and I'm

793
00:36:03,730 --> 00:36:07,329
going to use the texture later we need

794
00:36:05,559 --> 00:36:11,079
to make that statement that I alluded to

795
00:36:07,329 --> 00:36:14,289
and we need to to give open jail that

796
00:36:11,079 --> 00:36:15,400
information right and so the way we're

797
00:36:14,289 --> 00:36:17,409
going to do that you can actually see

798
00:36:15,400 --> 00:36:20,590
sometimes it's actually easier to read

799
00:36:17,409 --> 00:36:22,179
the the extensions by the way because

800
00:36:20,590 --> 00:36:24,190
they bundle the related calls together

801
00:36:22,179 --> 00:36:25,779
but you can see that one that I was

802
00:36:24,190 --> 00:36:28,130
grabbing out here this frame buffer

803
00:36:25,780 --> 00:36:31,010
texture2d right

804
00:36:28,130 --> 00:36:32,300
and that's what we actually have to call

805
00:36:31,010 --> 00:36:35,480
and what that frame Buster texture2d

806
00:36:32,300 --> 00:36:38,800
thing allows us to do is to say that we

807
00:36:35,480 --> 00:36:42,079
have a texture that we want to use as a

808
00:36:38,800 --> 00:36:43,990
as sort of the the thing that the frame

809
00:36:42,079 --> 00:36:45,920
buffer represents so let's go in there

810
00:36:43,989 --> 00:36:48,619
so you can see we have to pass through

811
00:36:45,920 --> 00:36:50,659
this first of all we have to tell it

812
00:36:48,619 --> 00:36:51,920
what we're trying to talk about here and

813
00:36:50,659 --> 00:36:54,170
obviously we're talking about the frame

814
00:36:51,920 --> 00:36:57,170
buffer that we we have bound to the

815
00:36:54,170 --> 00:36:59,900
frame buffer slot so we need to do this

816
00:36:57,170 --> 00:37:01,780
after we do the gen the frame buffer is

817
00:36:59,900 --> 00:37:15,079
right so here we're going to have to do

818
00:37:01,780 --> 00:37:17,060
essentially this right so we need to do

819
00:37:15,079 --> 00:37:20,090
a target index that loops from whatever

820
00:37:17,059 --> 00:37:22,369
our previous frame ever count was up to

821
00:37:20,090 --> 00:37:25,130
our new frame buffer count go through

822
00:37:22,369 --> 00:37:28,460
those targets we need to set you know we

823
00:37:25,130 --> 00:37:31,070
have to bind one up so that we can start

824
00:37:28,460 --> 00:37:34,730
talking about it to the up to the GL we

825
00:37:31,070 --> 00:37:37,670
then have to call that GL framebuffer

826
00:37:34,730 --> 00:37:40,460
texture2d that I stated before and we

827
00:37:37,670 --> 00:37:42,200
need to pass these back parameters say

828
00:37:40,460 --> 00:37:44,869
hey we're talking about this thing that

829
00:37:42,199 --> 00:37:46,879
we bound right here then we've got the

830
00:37:44,869 --> 00:37:48,469
attachment we don't have depth or

831
00:37:46,880 --> 00:37:50,000
stencil buffers but you can am at you

832
00:37:48,469 --> 00:37:52,459
can understand when you do rendering

833
00:37:50,000 --> 00:37:53,869
right we talked about Z buffering or def

834
00:37:52,460 --> 00:37:56,329
buffering as it's called right stuff

835
00:37:53,869 --> 00:37:57,559
like that anything that has a buffer

836
00:37:56,329 --> 00:38:00,230
that's associated with rendering

837
00:37:57,559 --> 00:38:01,400
obviously has to be there and be talked

838
00:38:00,230 --> 00:38:03,469
about when you're talking about a frame

839
00:38:01,400 --> 00:38:05,180
buffer so if we were going to use the

840
00:38:03,469 --> 00:38:07,309
buffering we would need to create a

841
00:38:05,179 --> 00:38:08,869
depth attachment where we said this is

842
00:38:07,309 --> 00:38:10,130
where you start the depth data and if we

843
00:38:08,869 --> 00:38:11,750
were using stencil by frame which we

844
00:38:10,130 --> 00:38:13,369
haven't talked about and aren't going to

845
00:38:11,750 --> 00:38:15,619
talk about we would need to do that as

846
00:38:13,369 --> 00:38:18,319
well right but all we're actually doing

847
00:38:15,619 --> 00:38:20,509
is color buffers right all we need is

848
00:38:18,320 --> 00:38:22,850
just one color buffer so we really only

849
00:38:20,510 --> 00:38:27,470
need just this color buffer attachment

850
00:38:22,849 --> 00:38:29,630
zero right that's the only thing that we

851
00:38:27,469 --> 00:38:31,369
need to bind and so then we have a

852
00:38:29,630 --> 00:38:33,140
texture target which is like what

853
00:38:31,369 --> 00:38:34,699
texture target we're trying to do yet we

854
00:38:33,139 --> 00:38:36,739
want a 2d texture target here obviously

855
00:38:34,699 --> 00:38:38,569
right because we're not trying to render

856
00:38:36,739 --> 00:38:40,789
to a cube map or anything fancy like

857
00:38:38,570 --> 00:38:41,720
that we just want a plain old texture we

858
00:38:40,789 --> 00:38:43,550
have to specify

859
00:38:41,719 --> 00:38:45,709
texture or object we're doing so we're

860
00:38:43,550 --> 00:38:47,660
going to need like global frame buffer

861
00:38:45,710 --> 00:38:49,608
textures or something like that right

862
00:38:47,659 --> 00:38:51,829
we're going to need a mirroring array

863
00:38:49,608 --> 00:38:54,319
that has the texture handles in it and

864
00:38:51,829 --> 00:38:55,670
then finally we need what mipmap level

865
00:38:54,320 --> 00:38:58,369
and that we're not using any look

866
00:38:55,670 --> 00:39:06,019
mapping here so we can just say 0 and

867
00:38:58,369 --> 00:39:07,280
off we go that's about it all right so

868
00:39:06,019 --> 00:39:08,840
that's pretty much everything that we

869
00:39:07,280 --> 00:39:10,700
need to do to attach the frame buffer

870
00:39:08,840 --> 00:39:12,050
texture there but we do have another

871
00:39:10,699 --> 00:39:16,189
problem which is that we never actually

872
00:39:12,050 --> 00:39:18,260
generated a texture right so we actually

873
00:39:16,190 --> 00:39:19,909
need to get these textures to stick them

874
00:39:18,260 --> 00:39:21,980
into the frame buffer so that it those

875
00:39:19,909 --> 00:39:23,389
here is the textures that go with the

876
00:39:21,980 --> 00:39:25,909
frame buffer so we basically have the

877
00:39:23,389 --> 00:39:28,460
exact same problem we just had and now

878
00:39:25,909 --> 00:39:31,399
we have to do this for textures as well

879
00:39:28,460 --> 00:39:32,960
right so you have to do that all right

880
00:39:31,400 --> 00:39:34,608
so we've got our global frame buffer

881
00:39:32,960 --> 00:39:38,780
textures we need to do the exact same

882
00:39:34,608 --> 00:39:40,759
calls essentially right Jen textures

883
00:39:38,780 --> 00:39:44,060
where we're going to say like you know

884
00:39:40,760 --> 00:39:45,500
we can probably do like new text you

885
00:39:44,059 --> 00:39:50,869
know this is the new count or whatever

886
00:39:45,500 --> 00:40:04,130
here go so we need to generate that many

887
00:39:50,869 --> 00:40:05,180
more and the same thing here right so we

888
00:40:04,130 --> 00:40:06,740
generate frame reference to generate

889
00:40:05,179 --> 00:40:09,348
textures then each time through we're

890
00:40:06,739 --> 00:40:12,259
going to have to actually generate the

891
00:40:09,349 --> 00:40:14,570
texture as well and create it at the

892
00:40:12,260 --> 00:40:18,200
size that we actually need it to be in

893
00:40:14,570 --> 00:40:19,880
order to have it be bindable to the

894
00:40:18,199 --> 00:40:22,519
frame buffer and used for rendering

895
00:40:19,880 --> 00:40:25,730
right so we have to do the same exact

896
00:40:22,519 --> 00:40:29,858
thing that we would do with a normal

897
00:40:25,730 --> 00:40:29,858
texture right and

898
00:40:33,900 --> 00:40:38,610
might as well pull this out it's easier

899
00:40:36,610 --> 00:40:42,039
to see if there's the texture handle

900
00:40:38,610 --> 00:40:44,380
right so we do the GL buying texture for

901
00:40:42,039 --> 00:40:46,840
the texture handle we passed that same

902
00:40:44,380 --> 00:40:50,470
text for handle here saying hey that's

903
00:40:46,840 --> 00:40:52,840
the texture I want to be back in here

904
00:40:50,469 --> 00:40:54,489
when we do our bind texture I'll unbind

905
00:40:52,840 --> 00:41:00,940
it here as well so it doesn't isn't left

906
00:40:54,489 --> 00:41:03,519
found oops so there we go and now all we

907
00:41:00,940 --> 00:41:06,789
need to do is specify the information

908
00:41:03,519 --> 00:41:09,519
about this texture that we that we

909
00:41:06,789 --> 00:41:12,779
actually care about right and I believe

910
00:41:09,519 --> 00:41:16,690
we have this call in here somewhere

911
00:41:12,780 --> 00:41:18,820
there it is where we do allocate texture

912
00:41:16,690 --> 00:41:20,320
and when we do on the K texture you can

913
00:41:18,820 --> 00:41:22,660
kind of see how it does it here like

914
00:41:20,320 --> 00:41:25,360
width and height and it sets some basic

915
00:41:22,659 --> 00:41:27,819
parameters of the texture now in my mind

916
00:41:25,360 --> 00:41:30,880
I feel like we might as well just reuse

917
00:41:27,820 --> 00:41:33,670
this code right we don't need the GL

918
00:41:30,880 --> 00:41:38,619
flush per se necessarily but then again

919
00:41:33,670 --> 00:41:40,659
I don't think we really want the flush

920
00:41:38,619 --> 00:41:42,759
there either that was the thing to avoid

921
00:41:40,659 --> 00:41:47,170
us having a problem when we were using

922
00:41:42,760 --> 00:41:48,820
the multi-threaded texture stuff which

923
00:41:47,170 --> 00:41:52,750
we found out really wasn't going to work

924
00:41:48,820 --> 00:41:55,690
anyway so you know there's that so we

925
00:41:52,750 --> 00:42:00,840
can probably just reuse this code I

926
00:41:55,690 --> 00:42:00,840
think that's probably a safe thing to do

927
00:42:01,159 --> 00:42:06,679
yeah I don't see any reason we can't

928
00:42:04,250 --> 00:42:09,798
just call this so I think what we can do

929
00:42:06,679 --> 00:42:12,858
is call allocate texture and let that do

930
00:42:09,798 --> 00:42:16,880
what we wanted to do and you know it

931
00:42:12,858 --> 00:42:21,920
returns this pointer from u32 handle

932
00:42:16,880 --> 00:42:25,390
nonsense here so we can actually cast

933
00:42:21,920 --> 00:42:28,099
back using u32 from pointer and be done

934
00:42:25,389 --> 00:42:31,940
so I'm going to go ahead here and say

935
00:42:28,099 --> 00:42:34,460
well such as contentious oh yes so so I

936
00:42:31,940 --> 00:42:35,990
don't even need this this gem texture

937
00:42:34,460 --> 00:42:48,190
batch thing that I did here I could I

938
00:42:35,989 --> 00:42:51,048
could actually just do it this way okay

939
00:42:48,190 --> 00:42:54,289
so what we need now is the allocate

940
00:42:51,048 --> 00:42:56,929
texture call to actually fill in you

941
00:42:54,289 --> 00:42:58,520
know we need the parameters that we're

942
00:42:56,929 --> 00:43:00,199
going to do there and you can see we

943
00:42:58,519 --> 00:43:03,318
just need the width the height and the

944
00:43:00,199 --> 00:43:05,509
data right and when you do when you pass

945
00:43:03,318 --> 00:43:07,190
data down I believe you can always just

946
00:43:05,510 --> 00:43:08,960
pass 0 here if you're just trying to

947
00:43:07,190 --> 00:43:11,179
specify the size but not actually the

948
00:43:08,960 --> 00:43:13,818
contents right and we don't really want

949
00:43:11,179 --> 00:43:15,798
to specify any contents so I believe we

950
00:43:13,818 --> 00:43:18,829
can just say hey we want this thing to

951
00:43:15,798 --> 00:43:22,068
be whatever the width and height are of

952
00:43:18,829 --> 00:43:24,700
the rendering and we don't care what you

953
00:43:22,068 --> 00:43:28,670
stick in it it can be 0 we don't care

954
00:43:24,699 --> 00:43:30,858
right and so allocate texture here in

955
00:43:28,670 --> 00:43:32,240
this case since their actual things that

956
00:43:30,858 --> 00:43:34,190
we're now calling they need to be

957
00:43:32,239 --> 00:43:37,939
elevated up at a summer where they can

958
00:43:34,190 --> 00:43:39,619
be seen so there we go so last but not

959
00:43:37,940 --> 00:43:40,760
least we need to grab member I said

960
00:43:39,619 --> 00:43:42,500
leave this open because we're going to

961
00:43:40,760 --> 00:43:43,789
need to grab something out of there this

962
00:43:42,500 --> 00:43:45,260
is the part where we need to grab

963
00:43:43,789 --> 00:43:47,028
something out of there and it's this guy

964
00:43:45,260 --> 00:43:50,539
right here which is how to specify color

965
00:43:47,028 --> 00:43:52,460
attachment 0 which is just the basic one

966
00:43:50,539 --> 00:43:54,170
now why are there multiple color you

967
00:43:52,460 --> 00:43:56,990
know why are there multiple tetris the

968
00:43:54,170 --> 00:43:59,119
reason is because in later revisions of

969
00:43:56,989 --> 00:44:00,649
graphics cards you could actually target

970
00:43:59,119 --> 00:44:03,500
several different render targets from

971
00:44:00,650 --> 00:44:04,789
the same pass so when you draw like if

972
00:44:03,500 --> 00:44:05,960
you drew a single triangle you could

973
00:44:04,789 --> 00:44:07,549
actually have an output to multiple

974
00:44:05,960 --> 00:44:10,010
render targets at once so the color

975
00:44:07,548 --> 00:44:12,679
attachments 0 1 2 3 4 or whatever is a

976
00:44:10,010 --> 00:44:14,240
way of saying oh you can actually render

977
00:44:12,679 --> 00:44:14,659
to more than one target at a time if you

978
00:44:14,239 --> 00:44:17,959
want

979
00:44:14,659 --> 00:44:22,489
so that's why you have to specify which

980
00:44:17,960 --> 00:44:23,750
one you're talking about alright so now

981
00:44:22,489 --> 00:44:24,919
we probably need to step through this

982
00:44:23,750 --> 00:44:26,150
and see what we're actually doing

983
00:44:24,920 --> 00:44:28,250
because it's probably not going to work

984
00:44:26,150 --> 00:44:31,130
nothing what you do in graphics works

985
00:44:28,250 --> 00:44:32,599
the first time out but at least you can

986
00:44:31,130 --> 00:44:35,630
see that we've gotten a little bit

987
00:44:32,599 --> 00:44:36,980
better so you know I mean I don't want

988
00:44:35,630 --> 00:44:39,260
to say that maybe it worked the first

989
00:44:36,980 --> 00:44:41,000
time out but maybe it did I don't know

990
00:44:39,260 --> 00:44:43,130
because you can notice we don't get that

991
00:44:41,000 --> 00:44:45,800
slow down anymore right which means that

992
00:44:43,130 --> 00:44:47,960
we're we're at least partially perhaps

993
00:44:45,800 --> 00:44:50,750
maybe filling out those frame buffers

994
00:44:47,960 --> 00:44:52,250
correctly now right but we don't know

995
00:44:50,750 --> 00:44:53,480
and so we'll certainly have to go in and

996
00:44:52,250 --> 00:44:54,980
look you know we don't know what's going

997
00:44:53,480 --> 00:44:58,099
on it might be good it might be bad for

998
00:44:54,980 --> 00:45:00,409
not sure so uh now what we need to do is

999
00:44:58,099 --> 00:45:03,529
go in and actually you know we've done

1000
00:45:00,409 --> 00:45:05,509
the work it ostensibly depending on how

1001
00:45:03,530 --> 00:45:08,960
much we may have screwed up we've done

1002
00:45:05,510 --> 00:45:10,940
the work ostensibly to actually do the

1003
00:45:08,960 --> 00:45:13,159
frame buffer stuff all we need to do now

1004
00:45:10,940 --> 00:45:15,889
in order to complete the the first pass

1005
00:45:13,159 --> 00:45:18,889
on the code is actually pull out the

1006
00:45:15,889 --> 00:45:22,119
render targets themselves and use them

1007
00:45:18,889 --> 00:45:26,319
as textures to blend right to do a bland

1008
00:45:22,119 --> 00:45:34,929
that's all we need to do so we have a

1009
00:45:26,320 --> 00:45:34,930
OpenGL a rectangle blit thing here and

1010
00:45:35,800 --> 00:45:46,160
yeah yeah now now we just need to take a

1011
00:45:44,900 --> 00:45:49,510
look at what's going to happen here so

1012
00:45:46,159 --> 00:45:51,379
yeah you can kind of see we've got the

1013
00:45:49,510 --> 00:45:52,790
yeah we've got I think we've got

1014
00:45:51,380 --> 00:45:55,160
everything pretty much sit up straight

1015
00:45:52,789 --> 00:45:57,110
this is all we need to do is to just

1016
00:45:55,159 --> 00:46:00,349
draw a full-screen rectangle right

1017
00:45:57,110 --> 00:46:01,640
that's pretty much it so I think we're

1018
00:46:00,349 --> 00:46:04,789
still in screen space here so I think

1019
00:46:01,639 --> 00:46:09,519
all we really need to do here is to sort

1020
00:46:04,789 --> 00:46:17,199
of take this code like this code here

1021
00:46:09,519 --> 00:46:19,789
where we're doing our bind texture okay

1022
00:46:17,199 --> 00:46:23,659
and is OpenGL rectangle does that to a

1023
00:46:19,789 --> 00:46:25,639
GL begin it does okay

1024
00:46:23,659 --> 00:46:27,288
so we decide to come in here and say all

1025
00:46:25,639 --> 00:46:28,759
right we're going to bind a texture we

1026
00:46:27,289 --> 00:46:30,589
need to find out where that texture is

1027
00:46:28,760 --> 00:46:34,130
so we're going to leave that out for a

1028
00:46:30,588 --> 00:46:36,259
second and then we are going to call

1029
00:46:34,130 --> 00:46:42,108
OpenGL rectangle and we're going to call

1030
00:46:36,260 --> 00:46:52,599
oops I wanted Joe rectangle we go we're

1031
00:46:42,108 --> 00:46:56,088
going to pass in the min and the max

1032
00:46:52,599 --> 00:47:07,430
we're going to pass in color value right

1033
00:46:56,088 --> 00:47:09,380
and that color value is just no

1034
00:47:07,429 --> 00:47:12,578
modification right 111 no modulation

1035
00:47:09,380 --> 00:47:15,530
just full and then the Alpha value okay

1036
00:47:12,579 --> 00:47:17,089
and then we've got the UV de min max UV

1037
00:47:15,530 --> 00:47:19,250
but they're already set their default

1038
00:47:17,088 --> 00:47:21,739
values are exactly what we want them to

1039
00:47:19,250 --> 00:47:23,630
be right we've got to deal with the

1040
00:47:21,739 --> 00:47:26,000
source target index here but that's the

1041
00:47:23,630 --> 00:47:30,528
only other thing and so now what I need

1042
00:47:26,000 --> 00:47:33,199
to do is I need to use that source entry

1043
00:47:30,528 --> 00:47:37,150
index to just grab out of the render

1044
00:47:33,199 --> 00:47:40,129
target or sorry the little frame buffer

1045
00:47:37,150 --> 00:47:41,809
textures I just need to grab the texture

1046
00:47:40,130 --> 00:47:43,430
handle that represents whichever texture

1047
00:47:41,809 --> 00:47:45,798
thought we were targeting and then

1048
00:47:43,429 --> 00:47:48,139
render now what I want to do here is

1049
00:47:45,798 --> 00:47:50,119
before i do any of this i want to make

1050
00:47:48,139 --> 00:47:51,739
sure we're actually using render targets

1051
00:47:50,119 --> 00:47:53,028
because if we're not then we just want

1052
00:47:51,739 --> 00:47:56,689
to ignore these commands because there's

1053
00:47:53,028 --> 00:47:58,699
nothing we can do about them right so

1054
00:47:56,690 --> 00:48:05,280
just going to do it straight up that's

1055
00:47:58,699 --> 00:48:08,879
all good and conversion from you 32

1056
00:48:05,280 --> 00:48:17,700
what are you talking about from you

1057
00:48:08,880 --> 00:48:19,619
shoot you real 32 oh I see so what we're

1058
00:48:17,699 --> 00:48:20,849
doing here I say hey all right we need

1059
00:48:19,619 --> 00:48:22,859
to draw a rectangle we need to draw a

1060
00:48:20,849 --> 00:48:24,960
rectangle over the entire screen so what

1061
00:48:22,860 --> 00:48:27,210
we need to do is go ahead and grab out

1062
00:48:24,960 --> 00:48:28,829
the texture that represents the target

1063
00:48:27,210 --> 00:48:32,280
we were trying to go from then we do the

1064
00:48:28,829 --> 00:48:34,380
Alpha now we've got one problem here and

1065
00:48:32,280 --> 00:48:36,690
that is the state our blending state is

1066
00:48:34,380 --> 00:48:38,519
actually not what we want it to be and

1067
00:48:36,690 --> 00:48:42,389
the reason for that is we did not use

1068
00:48:38,519 --> 00:48:45,659
premultiplied alpha so we can't use this

1069
00:48:42,389 --> 00:48:49,109
blend funk right so even though we want

1070
00:48:45,659 --> 00:48:51,509
to to leave that blood funk on Just In

1071
00:48:49,110 --> 00:48:54,750
in here right for just this one

1072
00:48:51,510 --> 00:48:57,870
operation we need to modulate the

1073
00:48:54,750 --> 00:48:59,429
incoming source by the Alpha value right

1074
00:48:57,869 --> 00:49:00,569
because remember premultiplied alpha non

1075
00:48:59,429 --> 00:49:02,309
p multiplied alpha they are two

1076
00:49:00,570 --> 00:49:04,530
different plan modes this is the blend

1077
00:49:02,309 --> 00:49:06,779
mode for premultiplied alpha this is the

1078
00:49:04,530 --> 00:49:08,070
blend mode for non p multiplied alpha

1079
00:49:06,780 --> 00:49:09,630
and if you don't remember what that is

1080
00:49:08,070 --> 00:49:10,800
you got to go back and look I can talk

1081
00:49:09,630 --> 00:49:13,019
about in the Q&amp;A if people have

1082
00:49:10,800 --> 00:49:14,490
forgotten but that's basically what we

1083
00:49:13,019 --> 00:49:16,079
need to do now we're almost out of time

1084
00:49:14,489 --> 00:49:18,359
so we probably won't get a chance to

1085
00:49:16,079 --> 00:49:21,960
debug this and get it working but that's

1086
00:49:18,360 --> 00:49:24,269
the basic code that we needed right and

1087
00:49:21,960 --> 00:49:26,280
so hey that's actually not too far off

1088
00:49:24,269 --> 00:49:29,489
at least now we are blending something

1089
00:49:26,280 --> 00:49:33,960
in unfortunately that something is just

1090
00:49:29,489 --> 00:49:36,149
a solid white nonsense right so not

1091
00:49:33,960 --> 00:49:40,619
quite there but at least we're getting

1092
00:49:36,150 --> 00:49:42,750
closer right um so that is pretty much

1093
00:49:40,619 --> 00:49:46,259
all there actually is to it there isn't

1094
00:49:42,750 --> 00:49:49,070
a there really isn't much more other

1095
00:49:46,260 --> 00:49:53,360
than the debugging stage of things

1096
00:49:49,070 --> 00:49:56,309
that's about it so yeah I assume that

1097
00:49:53,360 --> 00:50:00,059
yet texture2d is is always on so that's

1098
00:49:56,309 --> 00:50:01,889
good um so yeah so really all I think we

1099
00:50:00,059 --> 00:50:04,460
have to do is just just actually make

1100
00:50:01,889 --> 00:50:07,039
sure that we're getting the correct

1101
00:50:04,460 --> 00:50:09,030
stuff set up for our frame buffers here

1102
00:50:07,039 --> 00:50:11,070
because you know I probably did

1103
00:50:09,030 --> 00:50:12,650
something wrong or you know something

1104
00:50:11,070 --> 00:50:17,710
bad happened here i'm not sure what

1105
00:50:12,650 --> 00:50:21,130
where we where it's not working properly

1106
00:50:17,710 --> 00:50:24,429
who knows what else right so probably

1107
00:50:21,130 --> 00:50:27,490
that's all we need to do is debug what

1108
00:50:24,429 --> 00:50:29,199
we did wrong with our textures and then

1109
00:50:27,489 --> 00:50:31,029
we'll be good to go now the other thing

1110
00:50:29,199 --> 00:50:33,719
that we could have done wrong here i

1111
00:50:31,030 --> 00:50:36,190
suppose is the front of target index

1112
00:50:33,719 --> 00:50:41,439
talk remember so i think i think

1113
00:50:36,190 --> 00:50:45,909
everything else we did here makes sense

1114
00:50:41,440 --> 00:50:53,980
though i don't quote me on that but i

1115
00:50:45,909 --> 00:50:56,799
think we're okay yeah yeah this all

1116
00:50:53,980 --> 00:50:58,480
looks roughly right so i don't think we

1117
00:50:56,800 --> 00:51:02,039
have anything majorly wrong but we

1118
00:50:58,480 --> 00:51:06,460
probably forgot something specific now

1119
00:51:02,039 --> 00:51:10,239
one thing we could do is we can also try

1120
00:51:06,460 --> 00:51:13,420
to determine whether or not we've got a

1121
00:51:10,239 --> 00:51:19,118
bug here by I don't we've never used the

1122
00:51:13,420 --> 00:51:21,159
debug services from OpenGL but yeah but

1123
00:51:19,119 --> 00:51:22,329
that's one thing we could consider going

1124
00:51:21,159 --> 00:51:24,069
and doing I don't know if we should do

1125
00:51:22,329 --> 00:51:27,190
it not the other thing that I could do

1126
00:51:24,070 --> 00:51:31,410
here is just take a look at to see if I

1127
00:51:27,190 --> 00:51:31,409
forgot anything so we could

1128
00:51:33,179 --> 00:51:43,019
geo fir textures and just look at you

1129
00:51:40,829 --> 00:51:46,849
know some code to make sure that I did

1130
00:51:43,019 --> 00:51:46,849
everything that I was supposed to do

1131
00:51:47,389 --> 00:51:51,960
let's see I don't want to bind a render

1132
00:51:49,920 --> 00:51:54,630
buffer a render buffer is like the sort

1133
00:51:51,960 --> 00:51:57,108
of thing that you get by default when

1134
00:51:54,630 --> 00:52:01,890
you don't try to do render to texture

1135
00:51:57,108 --> 00:52:03,779
it's like you know it's effectively a

1136
00:52:01,889 --> 00:52:08,670
texture but one that was like the kind

1137
00:52:03,780 --> 00:52:09,660
of the kind that you have back when you

1138
00:52:08,670 --> 00:52:10,920
don't have a tech where you have

1139
00:52:09,659 --> 00:52:15,828
rendered texture the default thing you

1140
00:52:10,920 --> 00:52:20,789
have that's a render buffer um let's see

1141
00:52:15,829 --> 00:52:22,680
this is not what I actually wanted right

1142
00:52:20,789 --> 00:52:25,980
strove I framebuffer name gel viewport

1143
00:52:22,679 --> 00:52:28,440
lay out a framework for storage def

1144
00:52:25,980 --> 00:52:30,329
component know from remember fur gives

1145
00:52:28,440 --> 00:52:31,950
us attachment render buffer death

1146
00:52:30,329 --> 00:52:36,900
Jennifer for Jill Jen render buffer is

1147
00:52:31,949 --> 00:52:42,689
no writer texture when do they actually

1148
00:52:36,900 --> 00:52:46,170
set the texture there it is right so

1149
00:52:42,690 --> 00:52:47,880
that looks all correct so what I could

1150
00:52:46,170 --> 00:52:50,849
do here too is like a call check frame

1151
00:52:47,880 --> 00:52:52,710
buffer status and see whether we have an

1152
00:52:50,849 --> 00:52:55,140
obvious error or something like that

1153
00:52:52,710 --> 00:52:56,280
right and I guess I might as well do

1154
00:52:55,139 --> 00:52:58,489
that while I'm here I gotta just a few

1155
00:52:56,280 --> 00:53:02,280
seconds I can I contribute leak all that

1156
00:52:58,489 --> 00:53:04,858
and and check it right so up here when

1157
00:53:02,280 --> 00:53:09,930
we do find frame before I can just go

1158
00:53:04,858 --> 00:53:17,338
like okay check the frame buffer and do

1159
00:53:09,929 --> 00:53:21,389
like a what is that going to return deck

1160
00:53:17,338 --> 00:53:24,389
frame buffers status oops just check

1161
00:53:21,389 --> 00:53:26,068
that little frame buffer status check

1162
00:53:24,389 --> 00:53:31,289
that little frame buffer status there we

1163
00:53:26,068 --> 00:53:34,650
go so in went through to handmade where

1164
00:53:31,289 --> 00:53:39,150
we get the rest of our calls from there

1165
00:53:34,650 --> 00:53:41,720
we go we can just say okay global

1166
00:53:39,150 --> 00:53:41,720
variable

1167
00:53:42,699 --> 00:53:56,048
she'll check frame buffer status typedef

1168
00:53:57,969 --> 00:54:10,429
winapi feel check frame buffer status

1169
00:54:04,449 --> 00:54:12,858
chilling them target and so then when I

1170
00:54:10,429 --> 00:54:31,338
do the rest of these guys here I can

1171
00:54:12,858 --> 00:54:32,690
just do the same thing and and now we

1172
00:54:31,338 --> 00:54:38,058
should be able to at least see whether

1173
00:54:32,690 --> 00:54:40,539
it thinks are our frame breath or is

1174
00:54:38,059 --> 00:54:40,539
valid or not

1175
00:54:48,278 --> 00:55:06,199
it's an enum right so at that point we

1176
00:55:03,409 --> 00:55:13,058
just need whatever that frame buffer

1177
00:55:06,199 --> 00:55:19,068
complete identifier is oops clear and

1178
00:55:13,059 --> 00:55:22,069
just grab that out there we go and so i

1179
00:55:19,068 --> 00:55:24,349
will post that guy with the top here and

1180
00:55:22,068 --> 00:55:26,449
then I think we can run and just see

1181
00:55:24,349 --> 00:55:29,170
whether it thinks that we made a frame

1182
00:55:26,449 --> 00:55:31,669
buffer correctly or if we didn't right

1183
00:55:29,170 --> 00:55:33,079
now we have to actually trigger it so we

1184
00:55:31,670 --> 00:55:37,579
have to kind of come up here to get it

1185
00:55:33,079 --> 00:55:41,739
going but in theory you know that would

1186
00:55:37,579 --> 00:55:41,739
have fired in that case so let's let's

1187
00:55:45,849 --> 00:55:53,180
all right I so let's see what we got for

1188
00:55:49,548 --> 00:55:59,509
status 360 53 you know what let's take a

1189
00:55:53,179 --> 00:56:04,699
look at that impacts OCD 5r sorry aight

1190
00:55:59,509 --> 00:56:08,900
CD 58 CD 585 so it thinks that our frame

1191
00:56:04,699 --> 00:56:10,399
buffer was valid apparently right so

1192
00:56:08,900 --> 00:56:11,630
that's a good sign I want to take a look

1193
00:56:10,400 --> 00:56:17,778
at what we're clearing the sky two

1194
00:56:11,630 --> 00:56:22,970
commands a clear color so we're clearing

1195
00:56:17,778 --> 00:56:25,190
it to some grayish thing with an alpha

1196
00:56:22,969 --> 00:56:34,038
value of zero so that seems reasonable

1197
00:56:25,190 --> 00:56:36,470
as well i should think so that seems ok

1198
00:56:34,039 --> 00:56:42,130
i guess one thing I don't know is

1199
00:56:36,469 --> 00:56:46,009
whether GL viewport is per frame buffer

1200
00:56:42,130 --> 00:56:52,028
to be completely honest I cannot

1201
00:56:46,009 --> 00:56:52,028
remember so I'm going to look

1202
00:56:56,059 --> 00:57:08,490
let's see you frame buffer object field

1203
00:57:05,400 --> 00:57:10,318
viewports Sophie glv part is not

1204
00:57:08,489 --> 00:57:22,078
implicated in this at all so I don't

1205
00:57:10,318 --> 00:57:24,960
think it should be so clear so I I feel

1206
00:57:22,079 --> 00:57:33,089
like these should just work right I

1207
00:57:24,960 --> 00:57:34,650
don't think there should be any I don't

1208
00:57:33,088 --> 00:57:40,380
think there should be any weirdness

1209
00:57:34,650 --> 00:57:42,720
there uh so yeah current frame buffer

1210
00:57:40,380 --> 00:57:46,289
and a target index if clip which is not

1211
00:57:42,719 --> 00:57:49,588
equal to set the scissor and that all

1212
00:57:46,289 --> 00:57:53,430
seems fine and then down here where

1213
00:57:49,588 --> 00:57:55,679
we've got use render targets we're going

1214
00:57:53,429 --> 00:57:58,608
to bind which ever want to do is source

1215
00:57:55,679 --> 00:58:01,980
targeted oh wait that's my problem

1216
00:57:58,608 --> 00:58:05,759
that's my problem right there I never

1217
00:58:01,980 --> 00:58:07,500
stored the texture handle so maybe we

1218
00:58:05,759 --> 00:58:10,699
did everything right and we just never

1219
00:58:07,500 --> 00:58:15,150
stored the texture handle so like I do

1220
00:58:10,699 --> 00:58:21,298
global frame buffer textures equals

1221
00:58:15,150 --> 00:58:23,579
texture handle right because we use that

1222
00:58:21,298 --> 00:58:25,288
later so we were just using a bogus

1223
00:58:23,579 --> 00:58:28,920
texture handle so obviously we weren't

1224
00:58:25,289 --> 00:58:35,700
going to get your results there okay hop

1225
00:58:28,920 --> 00:58:39,088
along mr. hero Hey look it worked so

1226
00:58:35,699 --> 00:58:41,730
we're sort of working now you know we're

1227
00:58:39,088 --> 00:58:43,650
sort of multi render targeting and off

1228
00:58:41,730 --> 00:58:45,358
we go and it all looks good so I think

1229
00:58:43,650 --> 00:58:53,930
we're in good shape and we can go to the

1230
00:58:45,358 --> 00:58:57,199
unit so let's go to the QA QA um yeah

1231
00:58:53,929 --> 00:58:57,199
good deal

1232
01:00:34,659 --> 01:00:38,859
so like no Q&amp;A at all

1233
01:02:21,989 --> 01:02:26,229
the any key what are the biggest

1234
01:02:24,400 --> 01:02:32,380
challenges you have faced with the game

1235
01:02:26,230 --> 01:02:34,329
thus far well this is like an

1236
01:02:32,380 --> 01:02:36,210
educational stream so I wouldn't really

1237
01:02:34,329 --> 01:02:41,920
say that we face a lot of challenges

1238
01:02:36,210 --> 01:02:45,099
really I mean the thing that was most

1239
01:02:41,920 --> 01:02:48,940
forward to me is I normally do 3d games

1240
01:02:45,099 --> 01:02:51,789
I don't usually do 2d much in 2d and so

1241
01:02:48,940 --> 01:02:54,340
the sprite sorting stuff is a little

1242
01:02:51,789 --> 01:02:55,719
weird because I don't really know there

1243
01:02:54,340 --> 01:02:57,160
doesn't seem to be much of a right

1244
01:02:55,719 --> 01:03:02,108
answer to it we had to kind of do

1245
01:02:57,159 --> 01:03:03,670
something you know kind of hockey and

1246
01:03:02,108 --> 01:03:06,598
we'll see how it works when we put the

1247
01:03:03,670 --> 01:03:10,030
real art in there and and finish the Z

1248
01:03:06,599 --> 01:03:11,920
finish this evening but I mean I yeah I

1249
01:03:10,030 --> 01:03:14,680
wouldn't say that really like it's not

1250
01:03:11,920 --> 01:03:16,809
designed to be challenging it's designed

1251
01:03:14,679 --> 01:03:20,789
to be educational so we're not trying to

1252
01:03:16,809 --> 01:03:23,650
tackle like you know any unusual

1253
01:03:20,789 --> 01:03:27,608
problems here you know we're just we're

1254
01:03:23,650 --> 01:03:30,880
trying to do just a nice professional

1255
01:03:27,608 --> 01:03:34,119
quality job on the various parts of a

1256
01:03:30,880 --> 01:03:35,890
2-d game that you might have and we go a

1257
01:03:34,119 --> 01:03:38,559
little further than a lot of 2d games go

1258
01:03:35,889 --> 01:03:40,598
that's for sure you know like most

1259
01:03:38,559 --> 01:03:42,309
traditional 2d games don't have the

1260
01:03:40,599 --> 01:03:45,160
ability to see down multiple levels and

1261
01:03:42,309 --> 01:03:47,049
all that sort of stuff necessarily but

1262
01:03:45,159 --> 01:03:48,759
you know so we're kind of I guess we're

1263
01:03:47,050 --> 01:03:52,180
trying to be like higher end in terms of

1264
01:03:48,760 --> 01:03:54,940
the features we support for you know a

1265
01:03:52,179 --> 01:03:57,429
2d exploration any kind of game like

1266
01:03:54,940 --> 01:03:59,608
that but we're not you know we're we're

1267
01:03:57,429 --> 01:04:05,429
not trying to do anything particularly

1268
01:03:59,608 --> 01:04:05,429
weird so yeah

1269
01:04:11,440 --> 01:04:23,450
does AZ do work across Nvidia AMD and

1270
01:04:15,920 --> 01:04:29,030
Intel so I guess what I would say is AZ

1271
01:04:23,449 --> 01:04:32,960
do is is something that's taken pretty

1272
01:04:29,030 --> 01:04:35,570
seriously by Nvidia less seriously by

1273
01:04:32,960 --> 01:04:38,690
AMD and even less seriously by Intel at

1274
01:04:35,570 --> 01:04:41,030
the moment so for example stuff that you

1275
01:04:38,690 --> 01:04:43,309
really want like envy command list I

1276
01:04:41,030 --> 01:04:46,460
don't think I don't even know if anyone

1277
01:04:43,309 --> 01:04:48,409
else supports it besides them so some of

1278
01:04:46,460 --> 01:04:51,889
the AZ do stuff just only exists on

1279
01:04:48,409 --> 01:04:53,809
nvidia others of the eighth of the azo

1280
01:04:51,889 --> 01:04:57,619
stuff like pinned memory and stuff is

1281
01:04:53,809 --> 01:04:59,509
definitely on AMD but not so much on

1282
01:04:57,619 --> 01:05:01,880
intel like there's a bunch of things

1283
01:04:59,510 --> 01:05:04,280
that Intel doesn't do with respect to

1284
01:05:01,880 --> 01:05:08,900
bind list Mindless and pinned memory

1285
01:05:04,280 --> 01:05:10,760
things so I haven't tried really hard

1286
01:05:08,900 --> 01:05:12,559
yet it's on my list of things to do I

1287
01:05:10,760 --> 01:05:16,100
haven't tried really hard yet to see how

1288
01:05:12,559 --> 01:05:20,570
easy do you can be on intel and AMD on

1289
01:05:16,099 --> 01:05:23,029
nvidia you can get real good but on AMD

1290
01:05:20,570 --> 01:05:25,220
and intel not so much at the moment but

1291
01:05:23,030 --> 01:05:28,730
we'll see maybe that'll change as i as i

1292
01:05:25,219 --> 01:05:32,239
pound on it more but that's the current

1293
01:05:28,730 --> 01:05:34,099
situation so the answer is sort of to

1294
01:05:32,239 --> 01:05:37,189
eliminate extent they all support it and

1295
01:05:34,099 --> 01:05:42,980
video supports it quite a bit on the

1296
01:05:37,190 --> 01:05:45,110
other two your mileage varies compare

1297
01:05:42,980 --> 01:05:51,769
the handmade hero engine complexity

1298
01:05:45,110 --> 01:05:53,780
versus 1935 they're not even I mean

1299
01:05:51,769 --> 01:05:57,070
they're they're like night and day

1300
01:05:53,780 --> 01:05:57,070
probably i guess i would say

1301
01:06:07,340 --> 01:06:11,820
q for catching up to the previous

1302
01:06:09,900 --> 01:06:14,130
episodes do you recommend going through

1303
01:06:11,820 --> 01:06:17,670
all the videos or to try to understand

1304
01:06:14,130 --> 01:06:20,760
the current code base I would say that

1305
01:06:17,670 --> 01:06:22,500
catching up is not probably a useful

1306
01:06:20,760 --> 01:06:23,520
thing i would say that usually what you

1307
01:06:22,500 --> 01:06:24,570
want to do is just start at the

1308
01:06:23,519 --> 01:06:26,130
beginning it's meant to be an

1309
01:06:24,570 --> 01:06:27,690
educational stream it's meant to kind of

1310
01:06:26,130 --> 01:06:30,150
go through everything step-by-step and I

1311
01:06:27,690 --> 01:06:31,920
think that's where it's useful being up

1312
01:06:30,150 --> 01:06:33,690
to date isn't really relevant I mean it

1313
01:06:31,920 --> 01:06:37,019
doesn't matter if you're if you're

1314
01:06:33,690 --> 01:06:38,190
watching it live I mean you know if you

1315
01:06:37,019 --> 01:06:39,539
want a tuning occasionally and ask

1316
01:06:38,190 --> 01:06:42,720
questions and stuff that's always great

1317
01:06:39,539 --> 01:06:46,679
but there's no real overwhelming reason

1318
01:06:42,719 --> 01:06:48,539
you need to watch it live right so I

1319
01:06:46,679 --> 01:06:49,919
would say the most effective way to

1320
01:06:48,539 --> 01:06:53,550
learn from the series if that's what

1321
01:06:49,920 --> 01:06:56,460
you're trying to do is to just watch the

1322
01:06:53,550 --> 01:06:58,200
the episodes in order at your pace

1323
01:06:56,460 --> 01:07:01,800
whatever you feel comfortable watching

1324
01:06:58,199 --> 01:07:05,489
and learning you know and and don't try

1325
01:07:01,800 --> 01:07:07,650
to push yourself for for any particular

1326
01:07:05,489 --> 01:07:08,849
reason if you're finding you're going

1327
01:07:07,650 --> 01:07:10,260
through them fast and it's all pretty

1328
01:07:08,849 --> 01:07:11,639
obvious then you just you'll watch them

1329
01:07:10,260 --> 01:07:13,950
really quickly if you get stuck on

1330
01:07:11,639 --> 01:07:16,529
places just stop there and figure out

1331
01:07:13,949 --> 01:07:19,169
what it is that was you know that you

1332
01:07:16,530 --> 01:07:20,550
didn't understand what I was doing or

1333
01:07:19,170 --> 01:07:21,840
whatever to figure that part out or what

1334
01:07:20,550 --> 01:07:24,090
I would say that's the right way to

1335
01:07:21,840 --> 01:07:26,160
learn from it and not you know not

1336
01:07:24,090 --> 01:07:28,110
feeling like for some reason you gotta

1337
01:07:26,159 --> 01:07:29,879
catch up because it's not going anywhere

1338
01:07:28,110 --> 01:07:31,110
when we do however many it takes to

1339
01:07:29,880 --> 01:07:33,000
finish the whole game six hundred

1340
01:07:31,110 --> 01:07:35,340
episodes or whatever it is they're just

1341
01:07:33,000 --> 01:07:38,400
going to sit there right and so even if

1342
01:07:35,340 --> 01:07:40,950
you you know were 200 episodes behind at

1343
01:07:38,400 --> 01:07:43,680
that point well I'm going to stop and so

1344
01:07:40,949 --> 01:07:45,980
you will catch up eventually if that

1345
01:07:43,679 --> 01:07:45,980
makes sense

1346
01:09:01,640 --> 01:09:09,650
all right no more q's just think that's

1347
01:09:07,079 --> 01:09:09,649
the end of it

1348
01:09:10,829 --> 01:09:14,130
thank you everyone for joining me for

1349
01:09:12,750 --> 01:09:15,810
their soda handmade hero it's my

1350
01:09:14,130 --> 01:09:17,100
pleasure coating with you as always if

1351
01:09:15,810 --> 01:09:18,539
you would like to follow along the

1352
01:09:17,100 --> 01:09:20,039
series at home you can always pure to

1353
01:09:18,539 --> 01:09:22,019
the game it comes with the source code

1354
01:09:20,039 --> 01:09:24,869
so that you can do your own

1355
01:09:22,020 --> 01:09:27,530
experimentation and learn from the from

1356
01:09:24,869 --> 01:09:30,779
you know from experimentation from doing

1357
01:09:27,529 --> 01:09:31,858
always good we have a forum site you can

1358
01:09:30,779 --> 01:09:33,329
go to if you want to ask questions a

1359
01:09:31,859 --> 01:09:35,490
patreon page if you want to support the

1360
01:09:33,329 --> 01:09:36,960
video series we have a schedule bot you

1361
01:09:35,489 --> 01:09:38,819
can go to if you want to know when the

1362
01:09:36,960 --> 01:09:40,199
series is going to be live and we have

1363
01:09:38,819 --> 01:09:42,449
an episode guide you can go to trying to

1364
01:09:40,199 --> 01:09:45,539
catch up on old episodes that's about it

1365
01:09:42,449 --> 01:09:46,800
for today I will be back tomorrow 5 p.m.

1366
01:09:45,539 --> 01:09:48,810
pacific daylight time with till then

1367
01:09:46,800 --> 01:09:52,550
have fun programming and i'll see you

1368
01:09:48,810 --> 01:09:52,550
guys on the internet tickety's everyone

