1
00:00:00,949 --> 00:00:04,799
hello everyone and welcome to handmade

2
00:00:03,060 --> 00:00:09,540
Hero show Rico to complete game live on

3
00:00:04,799 --> 00:00:13,109
stream we are in in a lighting mood

4
00:00:09,539 --> 00:00:16,858
today we actually have a lot of lighting

5
00:00:13,109 --> 00:00:19,800
stuff done at this point but we have to

6
00:00:16,859 --> 00:00:21,240
debug because we're sort of cranking

7
00:00:19,800 --> 00:00:24,149
down on finishing the lighting system

8
00:00:21,239 --> 00:00:27,839
and at the end of the last lighting

9
00:00:24,149 --> 00:00:29,189
stream we did some changes to how we

10
00:00:27,839 --> 00:00:31,618
were going to store our lighting over

11
00:00:29,189 --> 00:00:34,350
time and we did not have a chance to

12
00:00:31,618 --> 00:00:38,579
debug them so our lighting needs to be

13
00:00:34,350 --> 00:00:42,179
sort of cleaned up and debugged that's

14
00:00:38,579 --> 00:00:43,770
what we have to do today and yeah I will

15
00:00:42,179 --> 00:00:46,019
go ahead and get right to it because

16
00:00:43,770 --> 00:00:49,800
it's going to take a while because

17
00:00:46,020 --> 00:00:52,739
lighting is complicated okay

18
00:00:49,799 --> 00:00:55,319
I let me just go ahead and show you what

19
00:00:52,738 --> 00:00:58,468
I'm talking about here because you may

20
00:00:55,320 --> 00:01:02,009
not remember or you may have missed last

21
00:00:58,469 --> 00:01:04,530
week's Sunday episode where we did this

22
00:01:02,009 --> 00:01:07,890
the basic problem that we have to solve

23
00:01:04,530 --> 00:01:10,650
is that lighting is difficult business

24
00:01:07,890 --> 00:01:10,978
so just showing you what's so going on

25
00:01:10,650 --> 00:01:14,880
here

26
00:01:10,978 --> 00:01:19,079
this I believe is debug mode let me just

27
00:01:14,879 --> 00:01:21,500
make sure yeah so this is a debug mode

28
00:01:19,079 --> 00:01:24,719
build so it's very slow at the moment

29
00:01:21,500 --> 00:01:26,879
but what's going on here is you can see

30
00:01:24,719 --> 00:01:29,099
just like pure chaos happening with our

31
00:01:26,879 --> 00:01:30,390
lighting it's completely bugged out it's

32
00:01:29,099 --> 00:01:31,859
not supposed to be doing this weird

33
00:01:30,390 --> 00:01:33,959
disco effect or anything like this

34
00:01:31,859 --> 00:01:35,400
it was working just fine before but then

35
00:01:33,959 --> 00:01:36,890
we changed how's the storage stuff was

36
00:01:35,400 --> 00:01:39,659
working in there we've broken everything

37
00:01:36,890 --> 00:01:42,239
so our goal obviously is to unbreak

38
00:01:39,659 --> 00:01:43,500
things as you might imagine so we're

39
00:01:42,239 --> 00:01:46,078
gonna go ahead and work on that today

40
00:01:43,500 --> 00:01:48,239
now what is it that we broke and why did

41
00:01:46,078 --> 00:01:51,139
we break it I'll just kind of go over

42
00:01:48,239 --> 00:01:53,849
that really quickly on the blackboard

43
00:01:51,140 --> 00:01:57,629
unless a whiteboard because it's clearly

44
00:01:53,849 --> 00:02:03,978
a blackboard at this point let's get the

45
00:01:57,629 --> 00:02:03,978
day number in here day four to six

46
00:02:04,310 --> 00:02:17,530
lighting storage so

47
00:02:09,879 --> 00:02:18,939
lighting is too expensive we it's not

48
00:02:17,530 --> 00:02:20,770
that we don't know how to compute

49
00:02:18,939 --> 00:02:22,180
lighting we do right in computer

50
00:02:20,770 --> 00:02:24,400
graphics we know how to compute lighting

51
00:02:22,180 --> 00:02:27,099
now we're actually pretty good at it

52
00:02:24,400 --> 00:02:29,349
and if you want to spend an hour's worth

53
00:02:27,099 --> 00:02:32,349
of computing time on a computer

54
00:02:29,349 --> 00:02:34,900
somewhere that spins up hundreds of

55
00:02:32,349 --> 00:02:36,489
cores you can do even incredibly

56
00:02:34,900 --> 00:02:39,310
complicated scenes with incredibly

57
00:02:36,489 --> 00:02:41,530
detailed lighting and get very very

58
00:02:39,310 --> 00:02:44,349
realistic computations out the other end

59
00:02:41,530 --> 00:02:47,349
so it's not a question of not knowing

60
00:02:44,349 --> 00:02:49,299
how to do perfect lighting we kind of do

61
00:02:47,349 --> 00:02:51,159
what we don't know how to do is do

62
00:02:49,300 --> 00:02:52,689
perfect lighting quickly in fact we

63
00:02:51,159 --> 00:02:55,568
don't even know if it's possible to do

64
00:02:52,689 --> 00:02:59,439
perfect lighting quickly it may just not

65
00:02:55,568 --> 00:03:01,089
be with today's horse power so what we

66
00:02:59,439 --> 00:03:03,639
have to do is we have to figure out ways

67
00:03:01,090 --> 00:03:06,099
of getting lighting that's usable and

68
00:03:03,639 --> 00:03:07,779
interesting in our game and that looks

69
00:03:06,099 --> 00:03:10,180
somewhat accurate so that it feels

70
00:03:07,780 --> 00:03:12,068
believable and usable but that obviously

71
00:03:10,180 --> 00:03:13,329
isn't really a real lighting solution

72
00:03:12,068 --> 00:03:15,548
because we just kind of know ahead of

73
00:03:13,329 --> 00:03:19,989
time that that's going to be far too

74
00:03:15,549 --> 00:03:23,980
expensive for our purposes so what we

75
00:03:19,989 --> 00:03:26,890
are doing here is we are using results

76
00:03:23,979 --> 00:03:29,560
from previous frames to smooth out the

77
00:03:26,889 --> 00:03:31,328
results from subsequent frames to keep

78
00:03:29,560 --> 00:03:33,610
the lighting sort of continuous over

79
00:03:31,329 --> 00:03:38,109
time the reason that we do this is

80
00:03:33,610 --> 00:03:40,840
because if we have to compute sampled

81
00:03:38,109 --> 00:03:42,820
lighting every frame the amount of noise

82
00:03:40,840 --> 00:03:44,620
that we're going to get there in our

83
00:03:42,819 --> 00:03:46,840
results is going to be very high simply

84
00:03:44,620 --> 00:03:48,489
because we can't spend the amount of

85
00:03:46,840 --> 00:03:50,979
time we would need to to take enough

86
00:03:48,489 --> 00:03:53,109
samples to get a really good accurate

87
00:03:50,979 --> 00:03:55,119
result for every frame starting from

88
00:03:53,109 --> 00:03:58,500
scratch so we need to do is start from a

89
00:03:55,120 --> 00:04:01,060
previous result and refine that result

90
00:03:58,500 --> 00:04:04,030
with new information every frame and

91
00:04:01,060 --> 00:04:06,189
keep that continuity so that the user

92
00:04:04,030 --> 00:04:09,009
doesn't see like big flashes in the

93
00:04:06,189 --> 00:04:10,989
lighting what this means is it creates a

94
00:04:09,009 --> 00:04:13,000
very difficult problem for us in terms

95
00:04:10,989 --> 00:04:14,379
of bookkeeping it doesn't create a

96
00:04:13,000 --> 00:04:16,060
problem for us in terms of computation

97
00:04:14,379 --> 00:04:17,858
the computation is getting easier when

98
00:04:16,060 --> 00:04:19,478
we do this and that's why we're doing it

99
00:04:17,858 --> 00:04:22,449
but it creates a problem in terms of

100
00:04:19,478 --> 00:04:22,959
bookkeeping because in order to figure

101
00:04:22,449 --> 00:04:26,680
out

102
00:04:22,959 --> 00:04:28,478
what last frame was lighting wise we

103
00:04:26,680 --> 00:04:30,280
need some way of corresponding the

104
00:04:28,478 --> 00:04:32,370
solution that happened last frame the

105
00:04:30,279 --> 00:04:35,948
solution that happened in this frame and

106
00:04:32,370 --> 00:04:38,860
that means that we need to store our

107
00:04:35,949 --> 00:04:41,169
lighting in some persistent storage so

108
00:04:38,860 --> 00:04:43,120
what we were doing previously is we were

109
00:04:41,168 --> 00:04:44,740
caching it based on some IDs and we

110
00:04:43,120 --> 00:04:46,870
never really had a scheme for how we're

111
00:04:44,740 --> 00:04:48,340
gonna do those IDs when I went to

112
00:04:46,870 --> 00:04:50,079
actually put that into practice I

113
00:04:48,339 --> 00:04:52,719
realized hey wait a minute I don't even

114
00:04:50,079 --> 00:04:54,490
really think I need to do an ID based

115
00:04:52,720 --> 00:04:55,840
lighting scheme actually what I could do

116
00:04:54,490 --> 00:04:58,360
is just have entities in the entity

117
00:04:55,839 --> 00:05:00,519
system store their last lighting

118
00:04:58,360 --> 00:05:02,379
information why not and then they can

119
00:05:00,519 --> 00:05:04,329
always throw it away when they get far

120
00:05:02,379 --> 00:05:06,189
enough away from the viewer to know that

121
00:05:04,329 --> 00:05:07,779
we don't need to know what their

122
00:05:06,189 --> 00:05:11,949
lighting was last time because it's

123
00:05:07,779 --> 00:05:13,719
irrelevant now right so we actually made

124
00:05:11,949 --> 00:05:16,330
that change it wasn't too hard of a

125
00:05:13,720 --> 00:05:19,030
change to make so that structural

126
00:05:16,329 --> 00:05:21,848
modification has been made and the way

127
00:05:19,029 --> 00:05:24,008
that it works is if you remember we sort

128
00:05:21,848 --> 00:05:30,219
of have a world that's chunked up into

129
00:05:24,009 --> 00:05:31,569
pieces right these are world chunks and

130
00:05:30,220 --> 00:05:32,949
it's a three dimensional grid so

131
00:05:31,569 --> 00:05:39,519
actually you know it's it's something

132
00:05:32,949 --> 00:05:41,020
that's this sort of a thing right then

133
00:05:39,519 --> 00:05:44,258
if you take a look at like one of these

134
00:05:41,019 --> 00:05:47,439
chunks inside it we store all of our

135
00:05:44,259 --> 00:05:49,060
entity data right and right now we

136
00:05:47,439 --> 00:05:50,620
haven't done anything to compress that

137
00:05:49,060 --> 00:05:55,060
entity data but in the future what we'll

138
00:05:50,620 --> 00:05:56,590
probably do is take the full notion of

139
00:05:55,060 --> 00:05:58,478
what an entity could be which can have

140
00:05:56,589 --> 00:06:01,060
all sorts of huge stuff and maybe it's

141
00:05:58,478 --> 00:06:03,189
like a 16 K giant piece of information

142
00:06:01,060 --> 00:06:05,500
and we'll just take the part of it that

143
00:06:03,189 --> 00:06:07,629
actually matters so if it's something

144
00:06:05,500 --> 00:06:09,069
that doesn't you know it's not on fire

145
00:06:07,629 --> 00:06:10,329
it won't star fire information it

146
00:06:09,069 --> 00:06:13,329
doesn't have health it won't star health

147
00:06:10,329 --> 00:06:15,550
information right so it'll just store

148
00:06:13,329 --> 00:06:17,168
the compact version immunities what I

149
00:06:15,550 --> 00:06:18,520
decided to do is say oh well if we've

150
00:06:17,168 --> 00:06:20,019
already got this notion that we're going

151
00:06:18,519 --> 00:06:22,718
to compact entities and put them into

152
00:06:20,019 --> 00:06:24,668
storage why don't we just also have the

153
00:06:22,718 --> 00:06:28,089
idea that when we compact entities into

154
00:06:24,668 --> 00:06:29,500
storage we can also go ahead and put the

155
00:06:28,089 --> 00:06:31,418
lighting information into that storage

156
00:06:29,500 --> 00:06:32,949
as well so that's all we decided to do

157
00:06:31,418 --> 00:06:35,379
was put the letting information into

158
00:06:32,949 --> 00:06:37,169
here and so that's the entirety of the

159
00:06:35,379 --> 00:06:39,749
change so

160
00:06:37,168 --> 00:06:42,089
it's actually pretty efficient I think

161
00:06:39,749 --> 00:06:44,430
and will be pretty good the problem is

162
00:06:42,089 --> 00:06:46,799
nothing in particular with the scheme

163
00:06:44,430 --> 00:06:48,990
it's just we've got a bugs bug or bugs

164
00:06:46,800 --> 00:06:50,610
get our implementation of this game so

165
00:06:48,990 --> 00:06:51,870
our job today is just to go through this

166
00:06:50,610 --> 00:06:53,580
system now that the change has been made

167
00:06:51,870 --> 00:06:55,949
go through it with a fine-tooth comb

168
00:06:53,579 --> 00:06:58,468
make sure it's working correctly because

169
00:06:55,949 --> 00:07:00,090
it obviously isn't yet and then when

170
00:06:58,468 --> 00:07:02,550
we're done with that we can proceed to

171
00:07:00,089 --> 00:07:04,109
do more optimization on our lighting now

172
00:07:02,550 --> 00:07:10,490
that we know exactly how it will be

173
00:07:04,110 --> 00:07:10,490
stored and updated every frame all right

174
00:07:11,000 --> 00:07:18,750
so let's pop over to the entity and

175
00:07:16,649 --> 00:07:20,339
remember exactly how this is working you

176
00:07:18,750 --> 00:07:22,918
can see we have lighting Point State

177
00:07:20,339 --> 00:07:24,959
here and what this is is it just stores

178
00:07:22,918 --> 00:07:27,120
like I said we're not doing anything

179
00:07:24,959 --> 00:07:29,338
efficient right now entities are just

180
00:07:27,120 --> 00:07:30,810
these big old piggy structures that in

181
00:07:29,338 --> 00:07:32,158
fact I don't even know where the pig hat

182
00:07:30,810 --> 00:07:35,329
is do we still have the pig yeah we've

183
00:07:32,158 --> 00:07:35,329
got the pig hat here I'll put it on

184
00:07:46,649 --> 00:07:52,750
so we are not trying in any way to do

185
00:07:51,040 --> 00:07:55,660
anything efficient here we're just

186
00:07:52,750 --> 00:07:57,480
saying okay this is a problem for a

187
00:07:55,660 --> 00:08:00,340
later date when we're going to have this

188
00:07:57,480 --> 00:08:02,080
packing concept here and when we have

189
00:08:00,339 --> 00:08:04,509
this packing concept we will just pack

190
00:08:02,079 --> 00:08:07,569
in exactly the right number of these

191
00:08:04,509 --> 00:08:10,659
things right so however many it is that

192
00:08:07,569 --> 00:08:12,610
an entity has if it's got you know two

193
00:08:10,660 --> 00:08:14,590
pieces and only one piece has lighting

194
00:08:12,610 --> 00:08:16,300
then we would just store the one piece

195
00:08:14,589 --> 00:08:18,669
worth of lighting in a compressed sort

196
00:08:16,300 --> 00:08:20,259
of format and then if anybody doesn't

197
00:08:18,670 --> 00:08:22,180
have any lighting in all we wouldn't

198
00:08:20,259 --> 00:08:23,949
store it etc but for and right now we're

199
00:08:22,180 --> 00:08:26,379
doing the maximally piggy thing of just

200
00:08:23,949 --> 00:08:28,569
hey the whole big gigantic entity we're

201
00:08:26,379 --> 00:08:30,689
storing them all why because it's just

202
00:08:28,569 --> 00:08:33,460
not the problem we're focusing on and

203
00:08:30,689 --> 00:08:35,259
introducing that extra complexity means

204
00:08:33,460 --> 00:08:36,370
we will create more work for us all the

205
00:08:35,259 --> 00:08:38,409
time because we have to be thinking

206
00:08:36,370 --> 00:08:41,320
about that so again that's a change we

207
00:08:38,409 --> 00:08:42,759
want to delay until a future time when

208
00:08:41,320 --> 00:08:44,379
it actually becomes relevant to us

209
00:08:42,759 --> 00:08:47,710
rather than doing it now when it would

210
00:08:44,379 --> 00:08:50,320
just cost us development time through

211
00:08:47,710 --> 00:08:51,310
the entire development process so it is

212
00:08:50,320 --> 00:08:53,470
important to make sure that

213
00:08:51,309 --> 00:08:57,729
optimizations like that happen at the

214
00:08:53,470 --> 00:08:59,860
appropriate time and not earlier so in

215
00:08:57,730 --> 00:09:01,659
here we've got the letting point States

216
00:08:59,860 --> 00:09:03,279
these are the states of the points that

217
00:09:01,659 --> 00:09:07,269
are tracking the lighting information

218
00:09:03,279 --> 00:09:08,679
for this entity and what you can see if

219
00:09:07,269 --> 00:09:10,210
we bop over - I don't know why I'm

220
00:09:08,679 --> 00:09:13,569
saying Bop all of a sudden today all the

221
00:09:10,210 --> 00:09:15,670
time if we head over to the lighting

222
00:09:13,570 --> 00:09:17,710
code you can see in here what the

223
00:09:15,669 --> 00:09:21,279
lighting point state actually stores the

224
00:09:17,710 --> 00:09:22,690
emission which is a color value and and

225
00:09:21,279 --> 00:09:25,659
the brightness thereof and then a

226
00:09:22,690 --> 00:09:28,060
directional value which says the average

227
00:09:25,659 --> 00:09:30,490
light direction for the light that's

228
00:09:28,059 --> 00:09:32,349
incoming and this piece of information

229
00:09:30,490 --> 00:09:34,149
is the piece of information that we are

230
00:09:32,350 --> 00:09:35,769
tracking frame to frame because it needs

231
00:09:34,149 --> 00:09:38,079
to get like sort of average to smooth

232
00:09:35,769 --> 00:09:39,429
things out then we've got the lighting

233
00:09:38,080 --> 00:09:41,500
solution here which is the thing we're

234
00:09:39,429 --> 00:09:43,359
actually working on and what you can see

235
00:09:41,500 --> 00:09:48,250
is that just has a bunch of light boxes

236
00:09:43,360 --> 00:09:50,320
and those light boxes themselves have

237
00:09:48,250 --> 00:09:53,399
the information that we're talking about

238
00:09:50,320 --> 00:09:55,379
here in terms of what

239
00:09:53,399 --> 00:09:58,409
goes with what so the lighting boxes

240
00:09:55,379 --> 00:09:59,909
have all of the information about you

241
00:09:58,409 --> 00:10:02,309
know an individual cube that's going to

242
00:09:59,909 --> 00:10:05,189
collect light or block light and then it

243
00:10:02,309 --> 00:10:08,339
has the lighting storage and lighting

244
00:10:05,190 --> 00:10:11,250
indices which are basically used in that

245
00:10:08,340 --> 00:10:13,350
computation to first refer to the

246
00:10:11,250 --> 00:10:15,779
previous frame so this this pointer here

247
00:10:13,350 --> 00:10:19,500
will refer to the entity storage there

248
00:10:15,779 --> 00:10:21,360
that we're talking about that it will

249
00:10:19,500 --> 00:10:24,690
get that emission from and then

250
00:10:21,360 --> 00:10:26,550
furthermore we have at the by the same

251
00:10:24,690 --> 00:10:29,460
token indices into the main lighting

252
00:10:26,549 --> 00:10:31,829
array of where those will actually be

253
00:10:29,460 --> 00:10:37,500
stored when we're processing them if

254
00:10:31,830 --> 00:10:38,970
that makes sense so and you can really

255
00:10:37,500 --> 00:10:41,940
think of these as just another pointer

256
00:10:38,970 --> 00:10:43,769
effectively it's just pointing into

257
00:10:41,940 --> 00:10:46,740
unknown array which is like these

258
00:10:43,769 --> 00:10:49,740
emission things here so that's how this

259
00:10:46,740 --> 00:10:52,680
system is supposed to work and we now

260
00:10:49,740 --> 00:10:54,509
have to just make sure that it does

261
00:10:52,679 --> 00:10:57,629
actually work because it doesn't appear

262
00:10:54,509 --> 00:10:59,159
to be doing something correctly that may

263
00:10:57,629 --> 00:11:01,769
be something small maybe something big

264
00:10:59,159 --> 00:11:05,730
but we need to go find out so what you

265
00:11:01,769 --> 00:11:10,169
can see in here is when we do excuse me

266
00:11:05,730 --> 00:11:12,870
when we do push a cube on what we do is

267
00:11:10,169 --> 00:11:14,549
we create the bounds for it and we see

268
00:11:12,870 --> 00:11:16,860
whether or not it intersects the

269
00:11:14,549 --> 00:11:18,990
lighting if it does intersect the

270
00:11:16,860 --> 00:11:21,480
lighting then we figure out how many

271
00:11:18,990 --> 00:11:23,399
lights is there are going to be in it

272
00:11:21,480 --> 00:11:25,710
and we sort of do this in an ad hoc

273
00:11:23,399 --> 00:11:27,509
fashion at the moment in the future

274
00:11:25,710 --> 00:11:29,400
we've kind of tried to set up the system

275
00:11:27,509 --> 00:11:31,889
so that we can adjust the number of

276
00:11:29,399 --> 00:11:33,929
lighting points to suit our needs and

277
00:11:31,889 --> 00:11:36,120
this may become important right when

278
00:11:33,929 --> 00:11:38,909
we're generating the world we may decide

279
00:11:36,120 --> 00:11:40,470
that we need to have different ways of

280
00:11:38,909 --> 00:11:42,269
test lighting lighting across services

281
00:11:40,470 --> 00:11:44,670
because some services want more light

282
00:11:42,269 --> 00:11:48,029
points somewhat less to keep things

283
00:11:44,669 --> 00:11:49,709
efficient so right now we do this in a

284
00:11:48,029 --> 00:11:52,919
very ad hoc fashion where we just kind

285
00:11:49,710 --> 00:11:54,690
of slam in some light points by default

286
00:11:52,919 --> 00:11:56,399
across the cube without really having

287
00:11:54,690 --> 00:11:58,710
any information from the user about

288
00:11:56,399 --> 00:12:00,439
whether or not it should be highly

289
00:11:58,710 --> 00:12:03,330
tessellated too low tessellated whatever

290
00:12:00,440 --> 00:12:05,190
but that's what's happening at the

291
00:12:03,330 --> 00:12:06,810
moment so we just pre compute a number

292
00:12:05,190 --> 00:12:10,950
of light points that number of light

293
00:12:06,809 --> 00:12:13,739
points is going to be 4 right 4 per

294
00:12:10,950 --> 00:12:16,830
surface because there's 24 per chunk and

295
00:12:13,740 --> 00:12:19,320
each chunk gets divided up across six

296
00:12:16,830 --> 00:12:21,389
phases of the cube so the light points

297
00:12:19,320 --> 00:12:24,120
for chunk will end up being 4 in this

298
00:12:21,389 --> 00:12:26,730
case we take the light index and we

299
00:12:24,120 --> 00:12:28,799
assign the light index to start with to

300
00:12:26,730 --> 00:12:31,050
be whatever the place is in the light

301
00:12:28,799 --> 00:12:34,439
index array that we've we've come up to

302
00:12:31,049 --> 00:12:37,829
at this point and what you can see here

303
00:12:34,440 --> 00:12:39,840
is we then advance by that many by that

304
00:12:37,830 --> 00:12:41,670
by the amount that's in the chunk right

305
00:12:39,840 --> 00:12:45,440
so this is basically our way of

306
00:12:41,669 --> 00:12:48,299
allocating 24 light points to every cube

307
00:12:45,440 --> 00:12:51,210
linearly as those cubes get pushed onto

308
00:12:48,299 --> 00:12:52,829
the renderer so then inside here we

309
00:12:51,210 --> 00:12:55,050
create a light box in the same fashion

310
00:12:52,830 --> 00:12:57,090
and we just push one on linearly as we

311
00:12:55,049 --> 00:12:58,859
get a cube and then we fill out the

312
00:12:57,090 --> 00:13:02,370
light box and the light box has light

313
00:12:58,860 --> 00:13:05,430
indices that correspond to every four

314
00:13:02,370 --> 00:13:07,379
light indices in that block of 24 and

315
00:13:05,429 --> 00:13:09,419
you can see that the last one here is

316
00:13:07,379 --> 00:13:12,779
actually assigned to the twenty-fifth

317
00:13:09,419 --> 00:13:15,299
light and that's because this is a

318
00:13:12,779 --> 00:13:18,389
stopper it basically says here's where

319
00:13:15,299 --> 00:13:20,279
the lights stop so this is face zero one

320
00:13:18,389 --> 00:13:22,710
two three four and five those are all

321
00:13:20,279 --> 00:13:24,629
the faces of the cube and where they're

322
00:13:22,710 --> 00:13:27,150
lighting to see start inside the range

323
00:13:24,629 --> 00:13:29,580
and then here's light index six which is

324
00:13:27,149 --> 00:13:32,399
not an actual light you use it's just

325
00:13:29,580 --> 00:13:34,830
like an end cap and again that's a very

326
00:13:32,399 --> 00:13:36,360
standard way of doing arrays where you

327
00:13:34,830 --> 00:13:39,660
just have indices in them and you need

328
00:13:36,360 --> 00:13:41,610
to know their spans you need to know

329
00:13:39,659 --> 00:13:44,309
where the last band stops you just add

330
00:13:41,610 --> 00:13:45,930
one extra index so that you don't have

331
00:13:44,309 --> 00:13:47,789
to store a count for every single one

332
00:13:45,929 --> 00:13:49,799
since the counts always implicit by just

333
00:13:47,789 --> 00:13:53,759
differencing with the next index in the

334
00:13:49,799 --> 00:13:55,829
array we then push this on by taking the

335
00:13:53,759 --> 00:13:57,809
light index which again has not moved

336
00:13:55,830 --> 00:13:59,900
from what it was so it still records the

337
00:13:57,809 --> 00:14:03,449
last one index and we just move it up

338
00:13:59,899 --> 00:14:06,600
right and the light count in this case

339
00:14:03,450 --> 00:14:09,210
will be zero for anything that doesn't

340
00:14:06,600 --> 00:14:11,129
have lighting so if it didn't intersect

341
00:14:09,210 --> 00:14:12,780
then it will get assigned light indices

342
00:14:11,129 --> 00:14:14,730
but it won't get assigned light counts

343
00:14:12,779 --> 00:14:16,439
so I believe that will prevent it from

344
00:14:14,730 --> 00:14:19,379
participating in the lighting maybe I'm

345
00:14:16,440 --> 00:14:20,460
wrong about that so we should

346
00:14:19,379 --> 00:14:22,799
double-check that but

347
00:14:20,460 --> 00:14:25,200
presumably if you always push zero on to

348
00:14:22,799 --> 00:14:26,729
the lighting then the shader will notice

349
00:14:25,200 --> 00:14:29,250
that there are no lights that it needs

350
00:14:26,730 --> 00:14:31,320
to sum and it just won't bother summing

351
00:14:29,250 --> 00:14:32,970
them and again where that happens just

352
00:14:31,320 --> 00:14:35,520
and I can double check this for my own

353
00:14:32,970 --> 00:14:37,889
purposes because I want to make sure in

354
00:14:35,519 --> 00:14:41,329
the Z biased program which is there too

355
00:14:37,889 --> 00:14:43,830
which is the thing that does the initial

356
00:14:41,330 --> 00:14:46,980
rendering and computes the lighting you

357
00:14:43,830 --> 00:14:48,300
can see in this program here that's

358
00:14:46,980 --> 00:14:50,970
sorry that's the vertex shader you can

359
00:14:48,299 --> 00:14:52,949
see in this program here when it goes to

360
00:14:50,970 --> 00:14:56,399
some the lighting it's going to loop

361
00:14:52,950 --> 00:14:58,680
over the light count to do that right so

362
00:14:56,399 --> 00:15:00,689
even the case where there are no lights

363
00:14:58,679 --> 00:15:03,539
we would expect in here there to be

364
00:15:00,690 --> 00:15:10,950
early-out let's take a look if there

365
00:15:03,539 --> 00:15:19,620
actually is where are we here where's

366
00:15:10,950 --> 00:15:22,220
our some like some like not sunlight so

367
00:15:19,620 --> 00:15:26,159
that's actually not right this is wrong

368
00:15:22,220 --> 00:15:27,750
because it's the Frog like count that

369
00:15:26,159 --> 00:15:32,149
will be equal to zero so this is

370
00:15:27,750 --> 00:15:32,149
actually incorrect I believe

371
00:15:43,850 --> 00:15:47,440
I guess

372
00:16:01,220 --> 00:16:13,950
mmm I say so I guess I mean if we look

373
00:16:10,440 --> 00:16:16,290
at what's happening here the result RGB

374
00:16:13,950 --> 00:16:18,180
is it's just gonna come out as zeros

375
00:16:16,289 --> 00:16:21,870
here because you're gonna hit this and

376
00:16:18,179 --> 00:16:24,088
the light counts gonna be zero and so I

377
00:16:21,870 --> 00:16:26,009
suspect this will make anything that

378
00:16:24,089 --> 00:16:28,709
doesn't have a light index just end up

379
00:16:26,009 --> 00:16:33,049
being black is what it looks like what

380
00:16:28,708 --> 00:16:38,458
happened the reason that I don't Oh easy

381
00:16:33,049 --> 00:16:41,069
we're fine so actually this is fine

382
00:16:38,458 --> 00:16:42,989
because light count won't will still be

383
00:16:41,070 --> 00:16:45,149
zero so this will be zero the entire

384
00:16:42,990 --> 00:16:48,750
time - so both of these will be zero

385
00:16:45,149 --> 00:16:50,009
nevermind so that's fine so that's why

386
00:16:48,750 --> 00:16:51,778
it's gonna like the trees should be

387
00:16:50,009 --> 00:16:54,088
black that was the case but yeah it's

388
00:16:51,778 --> 00:16:56,549
fine cuz remember light count gets only

389
00:16:54,089 --> 00:16:58,980
gets set in the case we actually enter

390
00:16:56,549 --> 00:17:01,828
this so this is actually fun no need for

391
00:16:58,980 --> 00:17:04,980
worry anyway that's how cubes get pushed

392
00:17:01,828 --> 00:17:07,769
down and what you can see based on from

393
00:17:04,980 --> 00:17:10,199
how they're pushed down here you can see

394
00:17:07,769 --> 00:17:13,918
here that the light point state is

395
00:17:10,199 --> 00:17:19,230
passed in and this value here tells you

396
00:17:13,919 --> 00:17:21,870
what the storage address is for the the

397
00:17:19,230 --> 00:17:24,328
individual light points that need to get

398
00:17:21,869 --> 00:17:26,548
written back so we pass in a light

399
00:17:24,328 --> 00:17:29,849
storage pointer here and that light

400
00:17:26,548 --> 00:17:32,629
storage pointer gets written back to the

401
00:17:29,849 --> 00:17:35,129
light box by saying hey when you go to

402
00:17:32,630 --> 00:17:37,080
keep the results of the lighting that

403
00:17:35,130 --> 00:17:39,630
you're about to compute on this frame

404
00:17:37,079 --> 00:17:42,359
they go here and by the way you can also

405
00:17:39,630 --> 00:17:45,480
if this looks valid to you you can grab

406
00:17:42,359 --> 00:17:48,959
the lighting out of here to use in this

407
00:17:45,480 --> 00:17:52,890
computation so that's what's going on

408
00:17:48,960 --> 00:17:54,029
there now I want to make sure and I

409
00:17:52,890 --> 00:17:55,410
guess what can do this into the bugger

410
00:17:54,029 --> 00:17:57,808
little bit later I want to make sure

411
00:17:55,410 --> 00:18:00,960
that this lighting this light storage

412
00:17:57,808 --> 00:18:03,509
actually round-trips okay because we

413
00:18:00,960 --> 00:18:06,569
have inside the sim region where these

414
00:18:03,509 --> 00:18:08,339
things get copied out we need to make

415
00:18:06,569 --> 00:18:10,439
sure that they're actually copying out

416
00:18:08,339 --> 00:18:12,569
the light information because I don't

417
00:18:10,440 --> 00:18:13,538
know if they are aren't I'm assuming the

418
00:18:12,569 --> 00:18:16,628
whole structure gets

419
00:18:13,538 --> 00:18:18,940
copied at this point it's been a long

420
00:18:16,628 --> 00:18:20,108
time since we've done anything with this

421
00:18:18,940 --> 00:18:22,808
and so I don't know if there's any

422
00:18:20,108 --> 00:18:25,210
intervening factors in here that caused

423
00:18:22,808 --> 00:18:27,579
that to not be the case so I believe it

424
00:18:25,210 --> 00:18:29,139
would be in begin sim or begin world

425
00:18:27,579 --> 00:18:31,720
change I guess

426
00:18:29,138 --> 00:18:35,339
so inside begin world change you can see

427
00:18:31,720 --> 00:18:38,739
here is we have this sort of entity

428
00:18:35,339 --> 00:18:43,658
struct here that gets pulled out and I

429
00:18:38,739 --> 00:18:45,848
believe we always just kind of write the

430
00:18:43,659 --> 00:18:47,889
source to the desk yes so you can see

431
00:18:45,848 --> 00:18:50,168
right here we've got decompression step

432
00:18:47,888 --> 00:18:52,598
the source just gets moved into the desk

433
00:18:50,169 --> 00:18:55,840
like so so since the source gets moved

434
00:18:52,598 --> 00:18:59,319
into the desk like that that should mean

435
00:18:55,839 --> 00:19:01,269
that all the lighting gets copied in and

436
00:18:59,319 --> 00:19:04,239
then the question is an end world change

437
00:19:01,269 --> 00:19:06,249
does it get copied back out and here you

438
00:19:04,239 --> 00:19:08,440
can see it should be getting copied back

439
00:19:06,249 --> 00:19:10,769
out as well so these are the two steps

440
00:19:08,440 --> 00:19:14,379
that compression decompression steps

441
00:19:10,769 --> 00:19:15,878
that are happening that you know really

442
00:19:14,378 --> 00:19:18,788
don't do anything yet but will

443
00:19:15,878 --> 00:19:20,498
eventually they appear to be copying the

444
00:19:18,788 --> 00:19:24,308
light so we would expect it to be

445
00:19:20,499 --> 00:19:27,308
persisted properly across frames inside

446
00:19:24,308 --> 00:19:29,108
the lighting we now have to go take a

447
00:19:27,308 --> 00:19:30,999
look and see whether we're actually

448
00:19:29,108 --> 00:19:33,069
obeying any of this stuff properly in

449
00:19:30,999 --> 00:19:34,419
the first place inside the lighting

450
00:19:33,069 --> 00:19:35,710
routines because they've been modified a

451
00:19:34,419 --> 00:19:37,090
bunch of times now as we've been playing

452
00:19:35,710 --> 00:19:39,579
with stuff it's possible that we just

453
00:19:37,089 --> 00:19:41,348
messed them up so when we come into

454
00:19:39,579 --> 00:19:43,989
lighting test here what you can see is

455
00:19:41,348 --> 00:19:45,158
we first remember how many boxes we

456
00:19:43,989 --> 00:19:46,720
started with because remember we're

457
00:19:45,159 --> 00:19:49,528
gonna do a spatial hierarchy we create

458
00:19:46,720 --> 00:19:51,940
new boxes that basically encapsulate

459
00:19:49,528 --> 00:19:54,220
different sections of the world so that

460
00:19:51,940 --> 00:19:55,509
we can cut down on the number of things

461
00:19:54,220 --> 00:20:00,788
we're a cast against when we're a

462
00:19:55,509 --> 00:20:03,999
casting so if we take a look at what's

463
00:20:00,788 --> 00:20:10,089
going on in here when we do our lighting

464
00:20:03,999 --> 00:20:13,058
test when we when we go ahead and

465
00:20:10,089 --> 00:20:14,978
process this information we go through

466
00:20:13,058 --> 00:20:18,908
each of the original boxes that was

467
00:20:14,979 --> 00:20:20,979
pushed on there and we are sort of doing

468
00:20:18,909 --> 00:20:22,419
our copy out right here so this is the

469
00:20:20,979 --> 00:20:24,999
part we have to look for to see whether

470
00:20:22,419 --> 00:20:26,870
or not we're picking up the previous

471
00:20:24,999 --> 00:20:29,120
frames lighting correctly

472
00:20:26,869 --> 00:20:31,339
so we go through each of the boxes we

473
00:20:29,119 --> 00:20:34,219
look at what the first light index is

474
00:20:31,339 --> 00:20:40,189
for that box we go over each surface

475
00:20:34,220 --> 00:20:42,559
right so we go for a particular q4a put

476
00:20:40,190 --> 00:20:45,110
your luggage box we go zero to five each

477
00:20:42,559 --> 00:20:47,029
of the phases we get out what surface

478
00:20:45,109 --> 00:20:52,639
that is by using the radius and point

479
00:20:47,029 --> 00:20:55,279
position of that light box we then take

480
00:20:52,640 --> 00:20:57,710
and subdivide each face and we put

481
00:20:55,279 --> 00:21:00,259
points in for that face so we start out

482
00:20:57,710 --> 00:21:04,190
at that initial light index we go

483
00:21:00,259 --> 00:21:07,309
through by adding the base point array

484
00:21:04,190 --> 00:21:10,250
we look at each point as we go

485
00:21:07,309 --> 00:21:12,409
we record the surface normal and the

486
00:21:10,250 --> 00:21:14,390
actual location the point by displacing

487
00:21:12,410 --> 00:21:18,430
it this is basically creating a location

488
00:21:14,390 --> 00:21:20,870
of this point that's on the box right

489
00:21:18,430 --> 00:21:24,500
again nothing particularly weird here

490
00:21:20,869 --> 00:21:26,479
kind of straightforward and the surface

491
00:21:24,500 --> 00:21:27,619
that all the surface information is the

492
00:21:26,480 --> 00:21:29,660
same as we were using before we just use

493
00:21:27,619 --> 00:21:31,789
this routine to create information about

494
00:21:29,660 --> 00:21:33,200
the surface we create the reflected

495
00:21:31,789 --> 00:21:35,059
color by pulling that out of the box

496
00:21:33,200 --> 00:21:37,400
that was stored when we actually made

497
00:21:35,059 --> 00:21:39,169
the box in the first place and then when

498
00:21:37,400 --> 00:21:41,060
we do our admission we take whatever the

499
00:21:39,170 --> 00:21:44,509
ocean has passed down we multiply it by

500
00:21:41,059 --> 00:21:47,919
the max light emission and we we tracked

501
00:21:44,509 --> 00:21:50,960
that value through the pipeline right

502
00:21:47,920 --> 00:21:52,130
you can see in here by taking whatever

503
00:21:50,960 --> 00:21:55,069
the emission values that's passed down

504
00:21:52,130 --> 00:21:57,680
and we blow it out to white and then so

505
00:21:55,069 --> 00:21:59,689
because you know it doesn't right now we

506
00:21:57,680 --> 00:22:02,779
don't pass down RGB emissions we could

507
00:21:59,690 --> 00:22:04,759
we probably should so anyway we store

508
00:22:02,779 --> 00:22:05,930
that for whatever light index this is we

509
00:22:04,759 --> 00:22:07,519
store that in the emission array and

510
00:22:05,930 --> 00:22:09,440
again that's the absolute light index

511
00:22:07,519 --> 00:22:11,629
that we got we didn't grant the light

512
00:22:09,440 --> 00:22:14,090
index at the end of this we would expect

513
00:22:11,630 --> 00:22:18,190
the light index in effect I should just

514
00:22:14,089 --> 00:22:21,589
go ahead and assert that here that after

515
00:22:18,190 --> 00:22:25,279
this is all said and done the box light

516
00:22:21,589 --> 00:22:30,709
index six should be what we ended up

517
00:22:25,279 --> 00:22:33,769
with and in fact I could just make that

518
00:22:30,710 --> 00:22:37,460
happen here to say that whatever the

519
00:22:33,769 --> 00:22:38,779
surface index plus one is right that's

520
00:22:37,460 --> 00:22:40,400
what we should have ended up with at the

521
00:22:38,779 --> 00:22:42,680
end of every

522
00:22:40,400 --> 00:22:44,750
right because free-surface we should

523
00:22:42,680 --> 00:22:46,370
output exactly four of these and they

524
00:22:44,750 --> 00:22:50,990
should line up with what we think they

525
00:22:46,369 --> 00:22:53,869
are in the box so that looks roughly

526
00:22:50,990 --> 00:23:03,620
correct here what I would say is just

527
00:22:53,869 --> 00:23:05,659
you know this doesn't copy out any

528
00:23:03,619 --> 00:23:07,609
information about the light yet the

529
00:23:05,660 --> 00:23:09,860
reason it doesn't is because right now

530
00:23:07,609 --> 00:23:12,199
were in fact this is the to do for it

531
00:23:09,859 --> 00:23:13,789
right here right now we don't reload the

532
00:23:12,200 --> 00:23:15,769
emission we just blend with it after

533
00:23:13,789 --> 00:23:18,259
that's probably not the best we can do

534
00:23:15,769 --> 00:23:19,549
but it's what we were doing before so I

535
00:23:18,259 --> 00:23:21,259
want to keep it with what we're doing

536
00:23:19,549 --> 00:23:22,759
for I don't want to add any new stuff in

537
00:23:21,259 --> 00:23:24,890
here while we're just debugging so we're

538
00:23:22,759 --> 00:23:28,789
gonna leave it that way for now we then

539
00:23:24,890 --> 00:23:31,490
come through here we do our light our

540
00:23:28,789 --> 00:23:33,409
light propagation computation I don't

541
00:23:31,490 --> 00:23:35,450
know whether we're supposed to zero emit

542
00:23:33,410 --> 00:23:39,340
see I don't think we are because the

543
00:23:35,450 --> 00:23:39,340
emits emu dust

544
00:23:44,380 --> 00:23:47,669
let's think about this

545
00:23:53,900 --> 00:24:02,180
the destiny should always be cleared by

546
00:23:56,900 --> 00:24:07,600
the previous loop and it should start at

547
00:24:02,180 --> 00:24:07,600
zero so we shouldn't have to clear that

548
00:24:17,190 --> 00:24:21,090
and we could assert on that right we

549
00:24:19,259 --> 00:24:29,610
could come in here and go alright

550
00:24:21,089 --> 00:24:40,349
if handmade slow 4x equals zero and X is

551
00:24:29,609 --> 00:24:46,229
less than point count so right here

552
00:24:40,349 --> 00:24:48,928
where we're about to go into this stage

553
00:24:46,230 --> 00:24:58,798
of the game what I could do is say all

554
00:24:48,929 --> 00:25:02,220
right my lighting point I want to make

555
00:24:58,798 --> 00:25:09,778
sure actually that's wrong it's just the

556
00:25:02,220 --> 00:25:11,450
emit C so it's just this stuff here so

557
00:25:09,778 --> 00:25:22,079
what I want to do is say all right

558
00:25:11,450 --> 00:25:23,850
my emit C 1 equals I guess I'll just get

559
00:25:22,079 --> 00:25:26,668
the actual one out equals whichever one

560
00:25:23,849 --> 00:25:33,259
we're on right now and I want to assert

561
00:25:26,669 --> 00:25:33,259
that this is set to zero

562
00:25:36,898 --> 00:25:41,349
so that's just a check to make sure that

563
00:25:39,490 --> 00:25:45,220
that always is starting off cleared

564
00:25:41,349 --> 00:25:46,990
because again we expect that though he's

565
00:25:45,220 --> 00:25:49,659
to start clear and always be cleared by

566
00:25:46,990 --> 00:25:51,278
the previous frame but who knows maybe

567
00:25:49,659 --> 00:25:53,250
we've got a bug in there so I feel like

568
00:25:51,278 --> 00:25:55,720
we want to make sure that that's true

569
00:25:53,250 --> 00:25:57,849
and so I'm just gonna go ahead and say

570
00:25:55,720 --> 00:25:59,558
you know make sure that's true when we

571
00:25:57,849 --> 00:26:00,819
do compute light propagation we're gonna

572
00:25:59,558 --> 00:26:02,980
have to go check that routine in a

573
00:26:00,819 --> 00:26:05,558
second but right now let's just go ahead

574
00:26:02,980 --> 00:26:07,480
and focus on the final stages here so if

575
00:26:05,558 --> 00:26:09,009
we assume that the light got propagated

576
00:26:07,480 --> 00:26:10,899
properly because we didn't really touch

577
00:26:09,009 --> 00:26:14,619
that routine so hopefully it's still

578
00:26:10,898 --> 00:26:16,509
fine we then got a loop over all of the

579
00:26:14,619 --> 00:26:18,879
boxes that we have again doing the exact

580
00:26:16,509 --> 00:26:21,940
same procedure that we did here and for

581
00:26:18,880 --> 00:26:25,539
each box now we have to copy out the

582
00:26:21,940 --> 00:26:28,240
light state blend and store right so we

583
00:26:25,538 --> 00:26:31,028
grab out the box we grab out where we're

584
00:26:28,240 --> 00:26:33,159
storing it and then we want to look to

585
00:26:31,028 --> 00:26:34,599
see whether or not this was valid the

586
00:26:33,159 --> 00:26:37,179
way we're doing that is we're looking at

587
00:26:34,599 --> 00:26:39,398
whatever the stored direction was and we

588
00:26:37,179 --> 00:26:42,669
want to make sure that the stored

589
00:26:39,398 --> 00:26:45,219
Direction is actually not all zeros

590
00:26:42,669 --> 00:26:47,470
because the direction cannot be all

591
00:26:45,220 --> 00:26:51,460
zeros a direction always has to point

592
00:26:47,470 --> 00:26:53,259
somewhere right so the only times we

593
00:26:51,460 --> 00:26:56,829
could ever have a direction of zero is

594
00:26:53,259 --> 00:26:58,538
if we are starting afresh so it's just a

595
00:26:56,829 --> 00:26:59,980
cleared array so it's the first lighting

596
00:26:58,538 --> 00:27:01,000
solution in which case we have nothing

597
00:26:59,980 --> 00:27:04,509
to blend with anyway

598
00:27:01,000 --> 00:27:06,669
or we didn't collect any light for this

599
00:27:04,509 --> 00:27:08,769
point we've never we just never saw

600
00:27:06,669 --> 00:27:10,269
anything in which case again we can't

601
00:27:08,769 --> 00:27:12,599
blend with it because it's not a valid

602
00:27:10,269 --> 00:27:16,419
so there's no bid no light there right

603
00:27:12,599 --> 00:27:18,609
so we wouldn't have any information

604
00:27:16,419 --> 00:27:19,630
there should always be light coming in

605
00:27:18,609 --> 00:27:21,668
pretty much everywhere

606
00:27:19,630 --> 00:27:22,809
most of the time I would think unless we

607
00:27:21,669 --> 00:27:25,419
created an area of the world that was

608
00:27:22,808 --> 00:27:27,398
literally pitch-black at that point we

609
00:27:25,419 --> 00:27:29,139
may have to rethink this and maybe have

610
00:27:27,398 --> 00:27:31,359
an actual flag that says whether the

611
00:27:29,138 --> 00:27:32,558
lighting was valid or not at the moment

612
00:27:31,359 --> 00:27:36,250
though we're just going to assume that

613
00:27:32,558 --> 00:27:37,480
that that's it's fine to use this now we

614
00:27:36,250 --> 00:27:39,759
wouldn't actually need a flag we could

615
00:27:37,480 --> 00:27:43,319
just set one of these to be some bogus

616
00:27:39,759 --> 00:27:45,429
value in fact in fact you could imagine

617
00:27:43,319 --> 00:27:47,138
setting one of these values to like a

618
00:27:45,429 --> 00:27:49,120
thousand we know the direction has to be

619
00:27:47,138 --> 00:27:49,778
normalized so we can just set the value

620
00:27:49,119 --> 00:27:52,118
to a thousand

621
00:27:49,778 --> 00:27:54,848
you know that can't ever be true so if

622
00:27:52,118 --> 00:27:56,738
you see Direction X equal a thousand you

623
00:27:54,848 --> 00:27:58,298
know this is an invalid point if you see

624
00:27:56,739 --> 00:28:03,278
anything else you know it's a valid

625
00:27:58,298 --> 00:28:05,739
point right all right so I can actually

626
00:28:03,278 --> 00:28:10,118
put that in here to do KC

627
00:28:05,739 --> 00:28:14,440
maybe we should in it directions to have

628
00:28:10,118 --> 00:28:18,158
an X of a thousand or something so that

629
00:28:14,440 --> 00:28:23,440
we can handle points that get no

630
00:28:18,159 --> 00:28:25,419
lighting so we go through here and we

631
00:28:23,440 --> 00:28:27,129
say if this was a valid point then we're

632
00:28:25,419 --> 00:28:29,528
gonna have to do a loop that actually

633
00:28:27,128 --> 00:28:31,838
blends and if it's not then we don't

634
00:28:29,528 --> 00:28:33,219
have to worry about that so let's start

635
00:28:31,838 --> 00:28:35,079
with the blended one because this is the

636
00:28:33,219 --> 00:28:37,088
one that happens on most frames since on

637
00:28:35,079 --> 00:28:39,579
most frames most points will have had

638
00:28:37,088 --> 00:28:41,979
lighting the previous rain we go through

639
00:28:39,579 --> 00:28:43,689
and we loop through the local index the

640
00:28:41,979 --> 00:28:45,909
way we loop through the local index is

641
00:28:43,690 --> 00:28:47,830
we take the total count for how many

642
00:28:45,909 --> 00:28:52,239
there's going to be let me go ahead and

643
00:28:47,829 --> 00:28:53,468
pull that out because that way in the

644
00:28:52,239 --> 00:28:56,798
debugger will be easier for us to

645
00:28:53,469 --> 00:28:58,960
inspect so here we're gonna take the

646
00:28:56,798 --> 00:29:00,489
last light index for this box and the

647
00:28:58,960 --> 00:29:01,960
first and we're gonna subtract two so we

648
00:29:00,489 --> 00:29:04,690
know how many loops over we're gonna

649
00:29:01,960 --> 00:29:07,058
loop over that many and the global point

650
00:29:04,690 --> 00:29:10,450
index is going to be equal to whatever

651
00:29:07,058 --> 00:29:11,950
that local index is plus the base index

652
00:29:10,450 --> 00:29:14,499
which is the one we're sort of working

653
00:29:11,950 --> 00:29:16,330
off of first one for the box we're then

654
00:29:14,499 --> 00:29:19,479
going to say all right into the box

655
00:29:16,329 --> 00:29:22,239
itself store back the emission also

656
00:29:19,479 --> 00:29:23,649
store that into our light array because

657
00:29:22,239 --> 00:29:25,419
we're gonna use that later to output the

658
00:29:23,648 --> 00:29:26,978
points we could probably do that right

659
00:29:25,419 --> 00:29:28,899
in here so output lighting points

660
00:29:26,979 --> 00:29:33,749
actually could be welded directly into

661
00:29:28,898 --> 00:29:36,459
here probably to be honest with you

662
00:29:33,749 --> 00:29:40,710
that's probably what we should do but

663
00:29:36,460 --> 00:29:40,710
you know I'll go ahead and say

664
00:29:45,880 --> 00:29:50,990
that's what we want to do anyway we

665
00:29:48,919 --> 00:29:53,270
store it back to the two places like so

666
00:29:50,990 --> 00:29:55,669
and then we perform the actual lerp to

667
00:29:53,269 --> 00:29:57,558
get it and the lerp is between the box

668
00:29:55,669 --> 00:30:00,049
storage local index omission which is

669
00:29:57,558 --> 00:30:04,369
the one from the previous frame and the

670
00:30:00,048 --> 00:30:06,139
new one that we've computed right so

671
00:30:04,369 --> 00:30:08,418
we're just doing that blank blend and

672
00:30:06,140 --> 00:30:10,100
storing it back and the T value is how

673
00:30:08,419 --> 00:30:14,950
far we're going right which at this

674
00:30:10,099 --> 00:30:14,949
point is just a fixed value of 0.1 right

675
00:30:21,490 --> 00:30:27,349
and right now we just know that you know

676
00:30:25,579 --> 00:30:29,960
we just blend towards the new lighting

677
00:30:27,349 --> 00:30:31,459
solution and we don't really have any

678
00:30:29,960 --> 00:30:33,350
rhyme or reason for how we're doing that

679
00:30:31,460 --> 00:30:35,960
we just know we add a little bit every

680
00:30:33,349 --> 00:30:37,189
time so this probably will get better as

681
00:30:35,960 --> 00:30:39,048
we start to think about how the lighting

682
00:30:37,190 --> 00:30:42,140
a sample to make more intelligent

683
00:30:39,048 --> 00:30:44,179
decisions here we then do the same thing

684
00:30:42,140 --> 00:30:45,500
with the lighting direction so to do the

685
00:30:44,179 --> 00:30:48,080
lighting direction what we do is we

686
00:30:45,500 --> 00:30:51,230
store back into the box and into the

687
00:30:48,079 --> 00:30:53,720
average rection to light array the

688
00:30:51,230 --> 00:30:56,808
normalized version of the lerp between

689
00:30:53,720 --> 00:31:01,038
the average direction to the light from

690
00:30:56,808 --> 00:31:02,450
this frame and the the one that we

691
00:31:01,038 --> 00:31:04,970
stored on the previous frame now you'll

692
00:31:02,450 --> 00:31:06,200
notice we also normalize the one that we

693
00:31:04,970 --> 00:31:08,210
computed this frame the reason is

694
00:31:06,200 --> 00:31:09,740
because we don't want to lurk between

695
00:31:08,210 --> 00:31:11,240
one thing that's been normalized and one

696
00:31:09,740 --> 00:31:12,890
thing that hasn't because the thing that

697
00:31:11,240 --> 00:31:16,250
hasn't been normalized will dominate

698
00:31:12,890 --> 00:31:18,470
because it will have been it's too long

699
00:31:16,250 --> 00:31:21,500
because it's the sum right so it needs

700
00:31:18,470 --> 00:31:24,829
to get normalized down first so that's

701
00:31:21,500 --> 00:31:27,769
how that works so if we come through

702
00:31:24,829 --> 00:31:29,808
here we can see that the other version

703
00:31:27,769 --> 00:31:32,690
which does not which assumes that the

704
00:31:29,808 --> 00:31:37,579
the points were not the previous state

705
00:31:32,690 --> 00:31:40,640
was not valid right for the the previous

706
00:31:37,579 --> 00:31:42,619
boxes we're doing this per box the

707
00:31:40,640 --> 00:31:44,900
particular box in question was not valid

708
00:31:42,619 --> 00:31:47,418
then we're gonna do the same loop over

709
00:31:44,900 --> 00:31:49,720
the same indices in fact we can pull

710
00:31:47,419 --> 00:31:49,720
this out

711
00:31:51,700 --> 00:31:54,940
like so

712
00:31:58,859 --> 00:32:02,129
and what you can see it to I loop over

713
00:32:00,329 --> 00:32:04,829
these weird exactly the same thing we

714
00:32:02,130 --> 00:32:07,710
did here but the difference is now we

715
00:32:04,829 --> 00:32:10,980
don't blend so we just store back the

716
00:32:07,710 --> 00:32:17,159
exact results we got this time and

717
00:32:10,980 --> 00:32:18,599
that's all we're doing so yeah we still

718
00:32:17,159 --> 00:32:21,350
have to do the normalization but other

719
00:32:18,599 --> 00:32:24,148
than that that's all that happens here

720
00:32:21,349 --> 00:32:26,308
so that looks pretty sane I don't see a

721
00:32:24,148 --> 00:32:28,558
lot of weirdness happening honestly

722
00:32:26,308 --> 00:32:32,240
there oops sorry

723
00:32:28,558 --> 00:32:32,240
output letting textures is what I meant

724
00:32:39,859 --> 00:32:45,418
so if we take a look at output loading

725
00:32:41,940 --> 00:32:48,419
textures here output letting textures go

726
00:32:45,419 --> 00:32:49,799
through all the points and does some

727
00:32:48,419 --> 00:32:52,220
let's see what is this what is this

728
00:32:49,798 --> 00:32:52,220
doing here

729
00:33:01,119 --> 00:33:06,879
so really all we do here is we just

730
00:33:03,730 --> 00:33:08,860
store the location and the color and we

731
00:33:06,880 --> 00:33:10,510
store the direction we pack that into

732
00:33:08,859 --> 00:33:16,990
the W coordinate and it looks like

733
00:33:10,509 --> 00:33:20,769
because we because we have to be able to

734
00:33:16,990 --> 00:33:22,809
reconstruct the Z I don't know why we

735
00:33:20,769 --> 00:33:27,750
negate D Z here because we're never

736
00:33:22,809 --> 00:33:30,669
going to use it so that's really just

737
00:33:27,750 --> 00:33:32,920
superfluous right the DZ never gets used

738
00:33:30,670 --> 00:33:36,810
but what we do is we negate the red

739
00:33:32,920 --> 00:33:36,810
Channel I should put a note in here

740
00:33:52,759 --> 00:33:58,339
so we need to basically record what that

741
00:33:55,490 --> 00:34:00,140
sign of that DZ was because we don't

742
00:33:58,339 --> 00:34:02,298
know which it is it could have been

743
00:34:00,140 --> 00:34:04,820
either because the only constraint on

744
00:34:02,298 --> 00:34:08,000
the direction is that it be normalized

745
00:34:04,819 --> 00:34:09,648
it doesn't have any implications for

746
00:34:08,000 --> 00:34:12,440
which direction it has to be normalized

747
00:34:09,648 --> 00:34:15,878
in so for example take the easy case

748
00:34:12,440 --> 00:34:19,429
where you've got a normal that's 0 0 1

749
00:34:15,878 --> 00:34:21,739
well all you're gonna get is 0 0 and

750
00:34:19,429 --> 00:34:24,858
you'll have no idea whether it was 0 0 1

751
00:34:21,739 --> 00:34:27,259
or 0 0 negative 1 so you need one more

752
00:34:24,858 --> 00:34:28,940
bit of information to determine which of

753
00:34:27,260 --> 00:34:30,589
the two square roots right there's a

754
00:34:28,940 --> 00:34:32,119
plus or minus in the square root which

755
00:34:30,588 --> 00:34:38,029
of the two you're gonna pick that's all

756
00:34:32,119 --> 00:34:39,710
we're doing here so that's really it and

757
00:34:38,030 --> 00:34:42,260
like I said this output lighting

758
00:34:39,710 --> 00:34:45,108
textures is really something that can be

759
00:34:42,260 --> 00:34:48,200
done directly in line with the copy out

760
00:34:45,108 --> 00:34:51,049
here so we could just be doing that and

761
00:34:48,199 --> 00:34:54,079
then we wouldn't have to copy the omit 0

762
00:34:51,050 --> 00:34:56,480
like omit C 0 an average direction to

763
00:34:54,079 --> 00:34:59,989
light don't actually need to be written

764
00:34:56,480 --> 00:35:01,490
back to themselves in that way we could

765
00:34:59,989 --> 00:35:02,868
just write directly to the textures at

766
00:35:01,489 --> 00:35:07,309
that point which is what we would

767
00:35:02,869 --> 00:35:10,519
probably want to do all right so that's

768
00:35:07,309 --> 00:35:13,250
the complete that's the complete

769
00:35:10,519 --> 00:35:16,759
roundtrip builds facial partition for

770
00:35:13,250 --> 00:35:18,409
lighting is presumably not implicated

771
00:35:16,760 --> 00:35:20,990
here because it doesn't do anything

772
00:35:18,409 --> 00:35:22,399
differently this time so the only thing

773
00:35:20,989 --> 00:35:25,368
that we're really talking about here is

774
00:35:22,400 --> 00:35:27,559
compute light propagation compute light

775
00:35:25,369 --> 00:35:29,750
propagation hopefully is working

776
00:35:27,559 --> 00:35:31,608
correctly let's double check it and then

777
00:35:29,750 --> 00:35:32,838
we just get down to debugging stepping

778
00:35:31,608 --> 00:35:35,119
through the debugger because I don't see

779
00:35:32,838 --> 00:35:36,829
anything semantically wrong so far

780
00:35:35,119 --> 00:35:40,160
everything seems to be doing what I

781
00:35:36,829 --> 00:35:41,690
would expect it to be doing so inside

782
00:35:40,159 --> 00:35:43,909
the beaut light propagation we start

783
00:35:41,690 --> 00:35:46,400
with emit C 0 and emit C 1 as you would

784
00:35:43,909 --> 00:35:47,899
expect we go through the number of

785
00:35:46,400 --> 00:35:52,059
iterations that we want to go through

786
00:35:47,900 --> 00:35:55,630
and we assume that the light power

787
00:35:52,059 --> 00:35:56,820
distributed every time is going to be

788
00:35:55,630 --> 00:35:59,670
the

789
00:35:56,820 --> 00:36:02,580
total number of rays but by the end the

790
00:35:59,670 --> 00:36:05,730
ray like the light retention per

791
00:36:02,579 --> 00:36:07,319
iteration is gonna take away from the

792
00:36:05,730 --> 00:36:09,179
lighting so however we would distribute

793
00:36:07,320 --> 00:36:12,539
a full amount of the light power each

794
00:36:09,179 --> 00:36:15,119
time - however much we want to retain

795
00:36:12,539 --> 00:36:16,259
each time and then we divide by the

796
00:36:15,119 --> 00:36:18,239
total rate count to figure out what's

797
00:36:16,260 --> 00:36:22,010
going on right again this is going to

798
00:36:18,239 --> 00:36:24,709
get tuned quite a bit more in the future

799
00:36:22,010 --> 00:36:32,820
we loop through all of the emitters and

800
00:36:24,710 --> 00:36:46,610
for each emitter we go ahead and you

801
00:36:32,820 --> 00:36:46,610
know also just curiouser

802
00:36:50,409 --> 00:36:57,949
so in here light point index should

803
00:36:53,630 --> 00:37:00,410
start out at one right and presumably

804
00:36:57,949 --> 00:37:02,029
right now it's not I actually want to

805
00:37:00,409 --> 00:37:05,089
catch this bug because I think like this

806
00:37:02,030 --> 00:37:07,400
is a little subtle bug here so in here

807
00:37:05,090 --> 00:37:09,430
where we do light index and we assign

808
00:37:07,400 --> 00:37:12,680
the light index I want to assert that

809
00:37:09,429 --> 00:37:14,659
the light index is not equal to zero and

810
00:37:12,679 --> 00:37:16,369
I think we're not handling that case at

811
00:37:14,659 --> 00:37:22,389
the moment so I feel like this should

812
00:37:16,369 --> 00:37:22,389
assert on that assertion how is it not

813
00:37:25,269 --> 00:37:40,849
are we actually setting light point

814
00:37:29,030 --> 00:37:44,630
index here so we are actually setting

815
00:37:40,849 --> 00:37:55,339
light point index here in the render

816
00:37:44,630 --> 00:38:01,970
commands I feel like I want a quick look

817
00:37:55,340 --> 00:38:10,789
at that I guess that is the right place

818
00:38:01,969 --> 00:38:12,319
for it all right well okay so when we're

819
00:38:10,789 --> 00:38:13,909
running this here we also are doing the

820
00:38:12,320 --> 00:38:16,850
debug check now to to make sure that

821
00:38:13,909 --> 00:38:18,379
those emit see ones are valid which they

822
00:38:16,849 --> 00:38:21,170
apparently are so that's also good

823
00:38:18,380 --> 00:38:28,730
alright so let's go ahead and keep going

824
00:38:21,170 --> 00:38:30,019
here inside our compute light

825
00:38:28,730 --> 00:38:33,380
propagation we're going to loop through

826
00:38:30,019 --> 00:38:35,539
each of the points that we have sort of

827
00:38:33,380 --> 00:38:37,130
packed into the lighter right here

828
00:38:35,539 --> 00:38:40,519
we go through each of these and we say

829
00:38:37,130 --> 00:38:42,470
okay let's let's go ahead and check to

830
00:38:40,519 --> 00:38:43,789
see whether there's any emission coming

831
00:38:42,469 --> 00:38:45,379
from this particular a light point

832
00:38:43,789 --> 00:38:47,539
assuming that there is we're going to go

833
00:38:45,380 --> 00:38:49,070
ahead and cast some rays from it we will

834
00:38:47,539 --> 00:38:50,269
sample the hemisphere to figure out what

835
00:38:49,070 --> 00:38:52,850
direction we're going to send the Rays

836
00:38:50,269 --> 00:38:57,949
and we'll do the raycast as a result

837
00:38:52,849 --> 00:39:00,710
inside our our test here if we hit

838
00:38:57,949 --> 00:39:04,099
something we see which light index we

839
00:39:00,710 --> 00:39:07,070
hit we grab that out this way we also

840
00:39:04,099 --> 00:39:08,809
get the number by looking at the next

841
00:39:07,070 --> 00:39:11,480
one and subtracting there so this is how

842
00:39:08,809 --> 00:39:14,420
many of them there are in question we

843
00:39:11,480 --> 00:39:17,139
then go through each of those and we say

844
00:39:14,420 --> 00:39:20,530
okay for each of those light points

845
00:39:17,139 --> 00:39:24,469
we're going to go ahead and take

846
00:39:20,530 --> 00:39:26,180
whatever the surface point index offset

847
00:39:24,469 --> 00:39:28,429
is here we're going to offset it from

848
00:39:26,179 --> 00:39:30,679
that that base index we're gonna look to

849
00:39:28,429 --> 00:39:32,449
see for that particular point how far

850
00:39:30,679 --> 00:39:34,789
away are we from it if that's the

851
00:39:32,449 --> 00:39:38,809
closest one we'll keep it we then go

852
00:39:34,789 --> 00:39:41,420
ahead and do our all

853
00:39:38,809 --> 00:39:45,739
our work on that particular point and

854
00:39:41,420 --> 00:39:48,230
off we go right so again it looks all

855
00:39:45,739 --> 00:39:49,609
pretty straightforward here I don't see

856
00:39:48,230 --> 00:39:52,010
anything quickly weird or interesting

857
00:39:49,610 --> 00:39:54,710
actually we just have a basic copy back

858
00:39:52,010 --> 00:39:58,700
that happens afterward here so that's

859
00:39:54,710 --> 00:40:02,059
all pretty straightforward yeah that

860
00:39:58,699 --> 00:40:03,859
seems fine so yeah I don't know what's

861
00:40:02,059 --> 00:40:06,110
wrong at the moment so we're gonna have

862
00:40:03,860 --> 00:40:08,440
to dive in a little more detail I don't

863
00:40:06,110 --> 00:40:10,490
I also feel like at this point we should

864
00:40:08,440 --> 00:40:13,610
because we're debugging we should get

865
00:40:10,489 --> 00:40:14,959
our f1 working again f1 was supposed to

866
00:40:13,610 --> 00:40:17,240
draw the lighting points you can see

867
00:40:14,960 --> 00:40:19,220
it's not drawing any lighting points so

868
00:40:17,239 --> 00:40:20,569
let's go ahead and and get that routine

869
00:40:19,219 --> 00:40:21,829
working as well because we need we're

870
00:40:20,570 --> 00:40:24,350
gonna need that for debugging it's a

871
00:40:21,829 --> 00:40:26,569
basic visualization that we need here so

872
00:40:24,349 --> 00:40:29,319
yeah inside out put lighting points I

873
00:40:26,570 --> 00:40:37,280
believe that's what happens when you hit

874
00:40:29,320 --> 00:40:38,330
f1 right so what we need to do here is

875
00:40:37,280 --> 00:40:40,610
we need to figure out how to make this

876
00:40:38,329 --> 00:40:42,440
thing work correctly so we do a get

877
00:40:40,610 --> 00:40:46,269
current quads with the point count

878
00:40:42,440 --> 00:40:48,920
that's not correct actually what we're

879
00:40:46,269 --> 00:40:51,199
we're going over boxes here and plus

880
00:40:48,920 --> 00:40:53,119
point count it's gonna be four times the

881
00:40:51,199 --> 00:40:55,099
point no I guess that's right because

882
00:40:53,119 --> 00:40:56,839
there's one for every point so that

883
00:40:55,099 --> 00:40:58,250
seems fine so anyway we come through

884
00:40:56,840 --> 00:41:05,240
here we're gonna do get current quads

885
00:40:58,250 --> 00:41:08,570
for the point count yeah we loop over

886
00:41:05,239 --> 00:41:10,489
each of our boxes for each box we go

887
00:41:08,570 --> 00:41:13,820
through each surface we get the surface

888
00:41:10,489 --> 00:41:16,549
for each of those we take a look and we

889
00:41:13,820 --> 00:41:19,250
go through the point index point indices

890
00:41:16,550 --> 00:41:21,950
for that particular surface we grab at

891
00:41:19,250 --> 00:41:27,980
that point we take the p value of the

892
00:41:21,949 --> 00:41:30,169
point and we take the emission color we

893
00:41:27,980 --> 00:41:31,730
then go ahead and and do the clamping

894
00:41:30,170 --> 00:41:34,480
here I feel like this needs to get

895
00:41:31,730 --> 00:41:34,480
adjusted

896
00:41:39,429 --> 00:41:49,118
because the emission values here are

897
00:41:41,769 --> 00:41:53,288
gonna be wrong that's alright we'll deal

898
00:41:49,119 --> 00:42:00,250
with that later so yeah so then we clamp

899
00:41:53,289 --> 00:42:04,270
the emissions we draw the points that

900
00:42:00,250 --> 00:42:06,250
all looks pretty sane right so I think

901
00:42:04,269 --> 00:42:08,139
we're getting some problems where our

902
00:42:06,250 --> 00:42:09,789
light points are not getting initially

903
00:42:08,139 --> 00:42:12,818
eyes properly is what it looks like it's

904
00:42:09,789 --> 00:42:15,190
happening actually so it looks like

905
00:42:12,818 --> 00:42:17,829
something bad is happening in here that

906
00:42:15,190 --> 00:42:20,139
we're like writing to the wrong thing or

907
00:42:17,829 --> 00:42:22,390
something weird is happening but I'm not

908
00:42:20,139 --> 00:42:24,548
exactly sure what so let's take a look

909
00:42:22,389 --> 00:42:28,269
in that routine actually assuming I

910
00:42:24,548 --> 00:42:29,588
still got that breakpoint set yeah so

911
00:42:28,269 --> 00:42:32,230
when we come through you're like what

912
00:42:29,588 --> 00:42:34,349
are our p-value for example are they

913
00:42:32,230 --> 00:42:38,789
what just happened

914
00:42:34,349 --> 00:42:38,789
are we just not setting the point count

915
00:42:45,989 --> 00:42:50,489
so we're setting the point count to the

916
00:42:48,269 --> 00:42:56,539
commands light point index we're setting

917
00:42:50,489 --> 00:42:56,539
the box count here

918
00:42:56,719 --> 00:43:00,230
what's going on

919
00:43:03,588 --> 00:43:10,429
so my light box count is zero

920
00:43:07,300 --> 00:43:10,429
[Music]

921
00:43:16,030 --> 00:43:24,340
I guess that's because in this case we

922
00:43:19,619 --> 00:43:26,380
when we do output letting points we have

923
00:43:24,340 --> 00:43:34,870
not actually called the lighting routine

924
00:43:26,380 --> 00:43:36,880
yet so when we do update lighting here

925
00:43:34,869 --> 00:43:38,710
and we do we're probably going to have

926
00:43:36,880 --> 00:43:40,809
to move this down so that we actually

927
00:43:38,710 --> 00:43:45,820
just do the if around the lighting

928
00:43:40,809 --> 00:43:47,679
textures and we output the lights which

929
00:43:45,820 --> 00:43:49,420
we can do now that the lighting runs

930
00:43:47,679 --> 00:43:52,000
more in real time before we couldn't do

931
00:43:49,420 --> 00:43:53,170
that so that's fine I don't mind making

932
00:43:52,000 --> 00:43:54,489
that change because like I said the

933
00:43:53,170 --> 00:43:57,280
lighting is supposed to run in real time

934
00:43:54,489 --> 00:44:09,969
now unlike before when it was running in

935
00:43:57,280 --> 00:44:14,650
non real-time so I'm okay with that so

936
00:44:09,969 --> 00:44:17,859
if we want recompute lighting yeah so

937
00:44:14,650 --> 00:44:21,059
all this stuff is is really we can clean

938
00:44:17,860 --> 00:44:21,059
this up quite a bit now

939
00:44:28,670 --> 00:44:32,630
yeah there's just a lot of garbage in

940
00:44:30,409 --> 00:44:34,038
here we can clean this up and make this

941
00:44:32,630 --> 00:44:36,230
a lot simpler now that we always run in

942
00:44:34,039 --> 00:44:38,390
real time so what we can do here is just

943
00:44:36,230 --> 00:44:40,849
have the show lighting information just

944
00:44:38,389 --> 00:44:42,078
be a visualization that happens here so

945
00:44:40,849 --> 00:44:44,150
really what we can do is just say

946
00:44:42,079 --> 00:44:45,798
alright in here

947
00:44:44,150 --> 00:44:47,329
we know we've got this sort of show

948
00:44:45,798 --> 00:44:52,099
lighting debug thingy that we're doing

949
00:44:47,329 --> 00:44:56,900
here so I can just go ahead and grab

950
00:44:52,099 --> 00:44:58,130
that and say if we're doing show

951
00:44:56,900 --> 00:45:02,990
lighting then we're gonna do that

952
00:44:58,130 --> 00:45:04,910
otherwise we're gonna do this right and

953
00:45:02,989 --> 00:45:07,639
the crucial thing here I guess is that

954
00:45:04,909 --> 00:45:09,469
after we've done all of this and passed

955
00:45:07,639 --> 00:45:13,098
all of this information down we actually

956
00:45:09,469 --> 00:45:15,709
need to clear we need to take all of

957
00:45:13,099 --> 00:45:18,798
that stuff that we would have drawn and

958
00:45:15,710 --> 00:45:20,510
we need to not draw it right because

959
00:45:18,798 --> 00:45:24,349
this will output the lighting points

960
00:45:20,510 --> 00:45:25,880
like on top of what we were doing before

961
00:45:24,349 --> 00:45:28,670
and we don't actually want that to

962
00:45:25,880 --> 00:45:30,079
happen so what we need to do is after we

963
00:45:28,670 --> 00:45:32,930
do the lighting test and we were going

964
00:45:30,079 --> 00:45:36,740
to output letting points we need to do a

965
00:45:32,929 --> 00:45:38,328
like we don't really want to call it

966
00:45:36,739 --> 00:45:48,169
clear because that's just clearing the

967
00:45:38,329 --> 00:45:49,609
screen discard all render commands we

968
00:45:48,170 --> 00:45:51,920
need to discard all previous render

969
00:45:49,608 --> 00:45:54,558
commands kind of thing so you know we we

970
00:45:51,920 --> 00:45:58,220
did a bunch of rendering we don't want

971
00:45:54,559 --> 00:46:01,220
to do it anymore because we were doing

972
00:45:58,219 --> 00:46:02,209
it just for the sake of computing some

973
00:46:01,219 --> 00:46:05,179
lighting and we're gonna do we're gonna

974
00:46:02,210 --> 00:46:07,039
do like a test render here so just don't

975
00:46:05,179 --> 00:46:08,719
do that so we need something that

976
00:46:07,039 --> 00:46:10,250
discourage all of that and then we can

977
00:46:08,719 --> 00:46:12,528
go ahead and do output lighting points

978
00:46:10,250 --> 00:46:15,949
on that frame and that's all we really

979
00:46:12,528 --> 00:46:18,969
need to do now updating lighting is

980
00:46:15,949 --> 00:46:23,980
something that we still probably want

981
00:46:18,969 --> 00:46:28,788
updating lighting that is something that

982
00:46:23,980 --> 00:46:31,929
probably also wants to get done so in

983
00:46:28,789 --> 00:46:31,930
here we would have

984
00:46:34,699 --> 00:46:41,509
this like so so when we go through to do

985
00:46:38,429 --> 00:46:45,119
that lighting test yeah we would need to

986
00:46:41,510 --> 00:46:49,440
call that function so that the lighting

987
00:46:45,119 --> 00:46:57,150
information is valid at the time how we

988
00:46:49,440 --> 00:47:08,639
would get it why was the box count

989
00:46:57,150 --> 00:47:14,380
getting cleared to zero I don't know so

990
00:47:08,639 --> 00:47:17,788
that's a little bit confusing actually

991
00:47:14,380 --> 00:47:17,789
[Music]

992
00:47:19,880 --> 00:47:25,110
because the test lighting should not

993
00:47:23,159 --> 00:47:29,389
have been we'll take a look at that a

994
00:47:25,110 --> 00:47:29,390
second too so that kind of needs to get

995
00:47:30,320 --> 00:47:38,809
that kind of needs to get addressed as

996
00:47:33,150 --> 00:47:38,809
well all right we can get rid of those

997
00:47:47,920 --> 00:47:57,440
so in here

998
00:47:50,298 --> 00:48:03,949
I think all we really need to do is say

999
00:47:57,440 --> 00:48:07,579
well no matter what happens I guess we

1000
00:48:03,949 --> 00:48:09,828
can just leave lighting enabled I don't

1001
00:48:07,579 --> 00:48:11,539
think we ever need to disable it if we

1002
00:48:09,829 --> 00:48:19,099
do we could just disable just that one

1003
00:48:11,539 --> 00:48:21,770
part so I think this becomes a little

1004
00:48:19,099 --> 00:48:27,859
more straightforward now so we really

1005
00:48:21,769 --> 00:48:29,659
just need these two things f1 and f4 and

1006
00:48:27,858 --> 00:48:30,889
then the iteration counts we can adjust

1007
00:48:29,659 --> 00:48:36,558
as well obviously we can leave that

1008
00:48:30,889 --> 00:48:39,500
happening I think all that is really the

1009
00:48:36,559 --> 00:48:47,630
only part we need and then if we take a

1010
00:48:39,500 --> 00:48:50,889
look in here we've got the updating

1011
00:48:47,630 --> 00:48:50,890
lighting and the show lighting

1012
00:48:57,530 --> 00:49:03,230
I think that's all we really care about

1013
00:49:00,469 --> 00:49:10,219
so I think that's all relatively

1014
00:49:03,230 --> 00:49:11,840
straight forward so far and so what we

1015
00:49:10,219 --> 00:49:15,409
really need now is we need a way to

1016
00:49:11,840 --> 00:49:16,550
actually do that render group discard so

1017
00:49:15,409 --> 00:49:24,589
in here what I'm going to do is I'm

1018
00:49:16,550 --> 00:49:29,060
going to find this thing and all this is

1019
00:49:24,590 --> 00:49:31,220
gonna do is when we go you know look at

1020
00:49:29,059 --> 00:49:35,900
what's in these render commands you can

1021
00:49:31,219 --> 00:49:37,699
see that we've got sort of this the set

1022
00:49:35,900 --> 00:49:39,470
of things we're streaming out here all

1023
00:49:37,699 --> 00:49:43,099
we really have to do is just reset those

1024
00:49:39,469 --> 00:49:53,839
right so we just have to take that that

1025
00:49:43,099 --> 00:49:59,329
command structure oops and clear it out

1026
00:49:53,840 --> 00:50:10,420
so we basically reset the push buffer

1027
00:49:59,329 --> 00:50:10,420
data at you know what the

1028
00:50:22,130 --> 00:50:27,119
we don't really want to render the

1029
00:50:25,019 --> 00:50:30,358
croisé but we probably want to leave

1030
00:50:27,119 --> 00:50:34,530
everything else intact in other words we

1031
00:50:30,358 --> 00:50:37,949
probably just want to change the vertex

1032
00:50:34,530 --> 00:50:48,230
array back so honestly the only thing we

1033
00:50:37,949 --> 00:50:54,439
probably want to do here is just say is

1034
00:50:48,230 --> 00:50:54,440
just save vertex count equals zero I

1035
00:50:56,929 --> 00:50:59,929
think

1036
00:51:08,389 --> 00:51:14,248
yeah it's not that simple though because

1037
00:51:10,949 --> 00:51:16,679
we have the records of the push buffer

1038
00:51:14,248 --> 00:51:18,419
on there you know what since this is

1039
00:51:16,679 --> 00:51:28,588
debug why don't we just let it render

1040
00:51:18,420 --> 00:51:45,989
and then clear actually that actually

1041
00:51:28,588 --> 00:51:46,889
seems like a better idea that way we

1042
00:51:45,989 --> 00:51:58,108
don't have to worry about any of that

1043
00:51:46,889 --> 00:52:02,458
stuff there now we can actually up with

1044
00:51:58,108 --> 00:52:06,509
these and hopefully see something that

1045
00:52:02,458 --> 00:52:09,379
does not look like it cleared I think

1046
00:52:06,509 --> 00:52:11,480
that's because it's inside a depth feel

1047
00:52:09,380 --> 00:52:14,570
unfortunately

1048
00:52:11,480 --> 00:52:14,570
[Music]

1049
00:52:16,400 --> 00:52:23,608
so I think we would probably have to do

1050
00:52:19,108 --> 00:52:25,318
the end depth peel first now to be

1051
00:52:23,608 --> 00:52:30,449
honest with you I don't know why and

1052
00:52:25,318 --> 00:52:33,329
depth peel couldn't happen before and

1053
00:52:30,449 --> 00:52:37,068
sim because n stem is not rendering so

1054
00:52:33,329 --> 00:52:37,068
what we could do is just do it here

1055
00:52:45,739 --> 00:52:49,779
and I would have thought that clear

1056
00:52:47,420 --> 00:52:49,780
would work

1057
00:52:53,369 --> 00:52:56,659
so doesn't seem to though

1058
00:53:03,088 --> 00:53:07,179
so we should go check why our clear

1059
00:53:05,679 --> 00:53:09,699
doesn't work because I think it looks

1060
00:53:07,179 --> 00:53:10,808
like everything else is working but I

1061
00:53:09,699 --> 00:53:12,278
would like to be able to clear the

1062
00:53:10,809 --> 00:53:17,798
screen there because I don't want to

1063
00:53:12,278 --> 00:53:21,010
show anything else so inside the OpenGL

1064
00:53:17,798 --> 00:53:22,568
layer where I look at the clear is this

1065
00:53:21,010 --> 00:53:25,470
just because we actually don't process

1066
00:53:22,568 --> 00:53:25,469
clear commands

1067
00:53:39,239 --> 00:53:45,009
yeah I think the reason for this is it

1068
00:53:42,400 --> 00:53:46,749
looks like we just don't actually

1069
00:53:45,009 --> 00:53:49,028
process clear commands as actual

1070
00:53:46,748 --> 00:53:56,738
commands you can kind of see right here

1071
00:53:49,028 --> 00:53:59,108
what we do is we just we just take and

1072
00:53:56,739 --> 00:54:01,958
we clear at the beginning but we don't

1073
00:53:59,108 --> 00:54:03,699
actually do a clear command so we should

1074
00:54:01,958 --> 00:54:05,679
probably put the clear command in there

1075
00:54:03,699 --> 00:54:08,619
I'm not sure why we don't it might have

1076
00:54:05,679 --> 00:54:10,239
been historical because it seems like it

1077
00:54:08,619 --> 00:54:20,739
should be fine

1078
00:54:10,239 --> 00:54:22,329
to put the clear command in here look I

1079
00:54:20,739 --> 00:54:24,989
don't see any reason why we couldn't do

1080
00:54:22,329 --> 00:54:24,989
that let's try it

1081
00:54:36,309 --> 00:54:45,190
so we'll call this a full clear because

1082
00:54:42,380 --> 00:54:45,190
it just wipes out everything

1083
00:54:56,760 --> 00:55:09,860
and then inside the render group make a

1084
00:55:06,329 --> 00:55:09,860
full clear to go with our depth clear

1085
00:55:16,769 --> 00:55:24,239
the depth clear looks like it doesn't

1086
00:55:18,179 --> 00:55:27,239
have a struct associated with it do any

1087
00:55:24,239 --> 00:55:29,358
of these they've done so looks like only

1088
00:55:27,239 --> 00:55:34,939
textured quads actually has any data

1089
00:55:29,358 --> 00:55:34,940
which is fine so let's take a look

1090
00:55:38,210 --> 00:55:42,269
so that clear color that's in the render

1091
00:55:40,949 --> 00:55:45,049
commands I'm gonna get rid of it I'm

1092
00:55:42,269 --> 00:55:45,050
gonna put it over here

1093
00:55:54,329 --> 00:55:57,838
and I'm gonna leave that comment there

1094
00:55:55,679 --> 00:56:00,929
because it's the same thing right we're

1095
00:55:57,838 --> 00:56:03,480
gonna use the same value there and we're

1096
00:56:00,929 --> 00:56:07,399
gonna go from here so when we get it

1097
00:56:03,480 --> 00:56:17,460
clear now this is gonna actually change

1098
00:56:07,400 --> 00:56:18,720
the information I don't know I don't

1099
00:56:17,460 --> 00:56:22,550
know that we'll have to change the fog

1100
00:56:18,719 --> 00:56:22,549
part the fog part I think should be fine

1101
00:56:23,539 --> 00:56:28,730
yeah and all this should be fine as well

1102
00:56:26,059 --> 00:56:31,320
so in here where we get the header out

1103
00:56:28,730 --> 00:56:34,858
when we actually need to get the value

1104
00:56:31,320 --> 00:56:36,960
from this it should just be this right

1105
00:56:34,858 --> 00:56:44,119
here the same code that we were using

1106
00:56:36,960 --> 00:56:44,119
before where we get that full clear

1107
00:56:49,869 --> 00:56:55,609
and then in here we can say okay for

1108
00:56:52,789 --> 00:56:57,289
each of the things we're going to do now

1109
00:56:55,610 --> 00:57:01,070
instead of getting the clear color out

1110
00:56:57,289 --> 00:57:04,909
of the the render commands we're just

1111
00:57:01,070 --> 00:57:11,980
going to get it exactly as we would have

1112
00:57:04,909 --> 00:57:11,980
before and off we go

1113
00:57:17,838 --> 00:57:25,429
I am not sure what this wants us to do

1114
00:57:23,869 --> 00:57:27,829
so this is basically saying like

1115
00:57:25,429 --> 00:57:31,248
whatever the clear color whatever the

1116
00:57:27,829 --> 00:57:34,278
last clear color was but we're gonna use

1117
00:57:31,248 --> 00:57:47,179
it I don't know that I care about that

1118
00:57:34,278 --> 00:57:53,858
just yet so instead I'm just gonna say

1119
00:57:47,179 --> 00:57:53,858
like okay just clear it to black for now

1120
00:57:55,929 --> 00:58:01,578
so now we can do an actual push here

1121
00:57:59,150 --> 00:58:11,479
that pushes actual information onto the

1122
00:58:01,579 --> 00:58:14,140
render stock and yeah that should just

1123
00:58:11,478 --> 00:58:14,139
look like this

1124
00:58:23,050 --> 00:58:28,570
so now in here when we go to do a push

1125
00:58:25,699 --> 00:58:45,759
render elements we're going to push on

1126
00:58:28,570 --> 00:58:47,930
the render entry full clear like so and

1127
00:58:45,760 --> 00:58:52,369
so now the clear color gets stored

1128
00:58:47,929 --> 00:58:56,088
directly in the entry I think that will

1129
00:58:52,369 --> 00:59:05,030
work but I don't know so we'll find out

1130
00:58:56,088 --> 00:59:07,119
I so when I say I think that will work

1131
00:59:05,030 --> 00:59:16,130
is what I mean is it won't work at all

1132
00:59:07,119 --> 00:59:21,130
so it looks like inside of the open gel

1133
00:59:16,130 --> 00:59:24,130
they are here uh when this clear happens

1134
00:59:21,130 --> 00:59:30,108
[Music]

1135
00:59:24,130 --> 00:59:38,650
happens a couple times let's see it's

1136
00:59:30,108 --> 00:59:38,650
basically right here and in the cutscene

1137
00:59:46,340 --> 00:59:55,329
so this has to happen actually I guess

1138
00:59:49,449 --> 00:59:55,329
outside the deaf feels as well I think

1139
00:59:56,289 --> 01:00:00,619
because the Deaf peels are a special

1140
00:59:58,670 --> 01:00:05,570
block so the clear can't happen inside

1141
01:00:00,619 --> 01:00:08,000
there yeah okay so that's all it was

1142
01:00:05,570 --> 01:00:09,710
so now in theory we should be able to

1143
01:00:08,000 --> 01:00:13,010
figure out a way to make sure that this

1144
01:00:09,710 --> 01:00:15,500
actually works we needed to clear

1145
01:00:13,010 --> 01:00:17,270
everything but I thought it was gonna do

1146
01:00:15,500 --> 01:00:22,210
I feel like it was I thought it was

1147
01:00:17,269 --> 01:00:22,210
supposed to clear all of our surfaces

1148
01:00:24,820 --> 01:00:31,390
because we go through every depth peel

1149
01:00:28,130 --> 01:00:31,390
and do we clear it

1150
01:00:41,849 --> 01:00:52,269
so I'm not sure why that shouldn't reset

1151
01:00:45,340 --> 01:01:07,000
our state correctly but it definitely

1152
01:00:52,269 --> 01:01:11,039
doesn't so in so insofar as we do all of

1153
01:01:07,000 --> 01:01:11,039
our peels here

1154
01:01:33,159 --> 01:01:37,769
I have to think about how this actually

1155
01:01:39,510 --> 01:01:44,440
gets composited on the back end so you

1156
01:01:42,519 --> 01:01:48,639
know the composite on the back end it

1157
01:01:44,440 --> 01:01:53,048
does the lighting peel composite that's

1158
01:01:48,639 --> 01:01:55,239
what this does right here so when we do

1159
01:01:53,048 --> 01:01:56,889
the lighting peel composite my thinking

1160
01:01:55,239 --> 01:01:59,709
here was that well we can just throw in

1161
01:01:56,889 --> 01:02:01,029
a clear an additional clear and it

1162
01:01:59,710 --> 01:02:02,409
should work because it'll just clear out

1163
01:02:01,030 --> 01:02:04,420
the depth feel so when they get

1164
01:02:02,409 --> 01:02:23,588
composited they'll only get the stuff

1165
01:02:04,420 --> 01:02:26,349
that comes after that was my thinking

1166
01:02:23,588 --> 01:02:28,420
anyway because we know we can render

1167
01:02:26,349 --> 01:02:30,548
stuff afterwards because we have like

1168
01:02:28,420 --> 01:02:32,170
the debug system is rendering stuff that

1169
01:02:30,548 --> 01:02:35,710
just gets rendered directly to the top

1170
01:02:32,170 --> 01:02:41,159
theft peel right I mean it's supposed to

1171
01:02:35,710 --> 01:02:46,500
that's supposed to work so I'm not sure

1172
01:02:41,159 --> 01:02:46,500
why we would have

1173
01:02:53,458 --> 01:03:00,538
right here we clear out the depth layer

1174
01:02:56,440 --> 01:03:04,298
for our our the peel that we're on and

1175
01:03:00,539 --> 01:03:08,459
we don't do a begin end peel here right

1176
01:03:04,298 --> 01:03:08,458
there's no depth peeling I don't think

1177
01:03:17,969 --> 01:03:24,309
because the only place that does that is

1178
01:03:21,639 --> 01:03:27,699
in here so I would have thought that a

1179
01:03:24,309 --> 01:03:29,920
clear plus the depth peel began we would

1180
01:03:27,699 --> 01:03:32,078
go through and we do deaf people and so

1181
01:03:29,920 --> 01:03:34,209
this stuff gets rendered multiple times

1182
01:03:32,079 --> 01:03:36,039
to each deaf peel if we then came

1183
01:03:34,208 --> 01:03:37,989
through and did the clear and then did

1184
01:03:36,039 --> 01:03:39,789
the output letting points after that I

1185
01:03:37,989 --> 01:03:44,559
would have thought that would have been

1186
01:03:39,789 --> 01:03:49,799
fine but evidently clearing after the

1187
01:03:44,559 --> 01:03:49,798
depth peels doesn't actually work

1188
01:03:51,389 --> 01:03:58,179
apparently

1189
01:03:52,889 --> 01:04:00,958
unbeknownst to me or rather contrary to

1190
01:03:58,179 --> 01:04:03,489
what I would have logically thought

1191
01:04:00,958 --> 01:04:07,708
clearing in here does not seem to

1192
01:04:03,489 --> 01:04:12,249
actually work now the DEF peel count is

1193
01:04:07,708 --> 01:04:16,139
constant right and all of those depth

1194
01:04:12,248 --> 01:04:16,139
peels are getting cleared

1195
01:04:24,610 --> 01:04:27,960
so the result multisample has already

1196
01:04:26,949 --> 01:04:31,809
happened

1197
01:04:27,960 --> 01:04:42,190
all of these are getting cleared I guess

1198
01:04:31,809 --> 01:04:45,489
the main frame buffer I guess the only

1199
01:04:42,190 --> 01:04:50,230
thing is the main frame buffer isn't

1200
01:04:45,489 --> 01:04:51,939
getting cleared is it so we've already

1201
01:04:50,230 --> 01:04:59,440
done every cell method this is only the

1202
01:04:51,940 --> 01:05:02,590
depth peel buffers so I don't actually

1203
01:04:59,440 --> 01:05:07,280
know if we do want to clear those that's

1204
01:05:02,590 --> 01:05:10,379
a good question but zooming we do

1205
01:05:07,280 --> 01:05:10,379
[Music]

1206
01:05:22,369 --> 01:05:33,539
I'm gonna say let's clear that main

1207
01:05:24,809 --> 01:05:35,400
buffer as well yeah that's just pure

1208
01:05:33,539 --> 01:05:36,839
bizarre to me I have no idea what's

1209
01:05:35,400 --> 01:05:39,059
going on here I'll be honest with you

1210
01:05:36,838 --> 01:05:46,018
this is the way of driving since you

1211
01:05:39,059 --> 01:05:48,028
can't step into it I would feel like so

1212
01:05:46,018 --> 01:05:50,129
that what happens when I do an f1 is the

1213
01:05:48,028 --> 01:05:51,688
inverse of what I would think what

1214
01:05:50,130 --> 01:05:55,169
actually happens is it clears everything

1215
01:05:51,688 --> 01:05:57,088
that comes after right so everything

1216
01:05:55,168 --> 01:05:59,848
that comes after the clear that gets

1217
01:05:57,088 --> 01:06:04,188
inserted is what ends up being cleared

1218
01:05:59,849 --> 01:06:04,189
and the stuff that came before remains

1219
01:06:04,458 --> 01:06:12,448
now what I would have thought would have

1220
01:06:06,239 --> 01:06:19,708
happened is when this resolves oh that's

1221
01:06:12,449 --> 01:06:22,380
not the main frame buffer so here's the

1222
01:06:19,708 --> 01:06:24,088
render entry end peels I this is still

1223
01:06:22,380 --> 01:06:27,449
binding the last depth peel buffer which

1224
01:06:24,088 --> 01:06:32,418
is not actually what I wanted right what

1225
01:06:27,449 --> 01:06:32,418
I actually wanted is for the end peels

1226
01:06:35,208 --> 01:06:40,108
what I actually want here is whatever

1227
01:06:37,650 --> 01:06:44,338
buffer you were targeting to be cleared

1228
01:06:40,108 --> 01:06:48,268
right I want whatever you were going to

1229
01:06:44,338 --> 01:06:51,469
render to to be cleared and we need to

1230
01:06:48,268 --> 01:06:51,468
rebind that buffer

1231
01:06:55,360 --> 01:07:00,559
so yeah I'm not sure if I really want to

1232
01:06:58,010 --> 01:07:06,110
do it this way maybe I just want to do

1233
01:07:00,559 --> 01:07:08,000
this it's it's hard to say right

1234
01:07:06,110 --> 01:07:16,820
it depends what we want that clear to

1235
01:07:08,000 --> 01:07:18,530
actually mean so I guess what we want to

1236
01:07:16,820 --> 01:07:20,510
do is when we do the clear here we want

1237
01:07:18,530 --> 01:07:24,140
to say like okay whatever the render

1238
01:07:20,510 --> 01:07:29,510
entry end peels would have targeted if

1239
01:07:24,139 --> 01:07:32,839
you know if you come through here and

1240
01:07:29,510 --> 01:07:43,850
you're on the last one we bind this

1241
01:07:32,840 --> 01:07:48,350
frame buffer that's the one we're

1242
01:07:43,849 --> 01:07:51,049
actually using and that's what we would

1243
01:07:48,349 --> 01:07:53,420
have to bind if we were currently on

1244
01:07:51,050 --> 01:07:58,070
that one so we almost need to like save

1245
01:07:53,420 --> 01:08:00,309
and restore it here which is kind of

1246
01:07:58,070 --> 01:08:00,309
nasty

1247
01:08:07,780 --> 01:08:11,019
so like

1248
01:08:22,279 --> 01:08:29,809
I mean you can see what I'm saying here

1249
01:08:24,078 --> 01:08:31,698
right this is really what needs to

1250
01:08:29,809 --> 01:08:39,980
happen and it's just kind of ugly

1251
01:08:31,698 --> 01:08:41,838
it's very special case like but I feel

1252
01:08:39,979 --> 01:08:43,729
like basically that still don't even

1253
01:08:41,838 --> 01:08:45,500
work which is weird but basically what

1254
01:08:43,729 --> 01:08:47,988
happens is when we come in through here

1255
01:08:45,500 --> 01:08:50,179
we rely on the fact that we're targeting

1256
01:08:47,988 --> 01:08:52,698
this frame buffer when we start the

1257
01:08:50,179 --> 01:08:54,529
first depth field buffer and then after

1258
01:08:52,698 --> 01:08:57,078
we're done with the DEF peels we end up

1259
01:08:54,529 --> 01:09:04,250
targeting this other frame buffer right

1260
01:08:57,078 --> 01:09:11,170
this one here so I guess actually

1261
01:09:04,250 --> 01:09:11,170
technically it's this and peeling

1262
01:09:14,189 --> 01:09:17,548
I don't really know because peeling will

1263
01:09:16,409 --> 01:09:19,948
start off as false

1264
01:09:17,548 --> 01:09:25,399
so the first clear actually doesn't even

1265
01:09:19,948 --> 01:09:25,399
want to do that which is even weirder

1266
01:09:25,850 --> 01:09:37,219
so who sets peeling to true so the first

1267
01:09:32,969 --> 01:09:37,219
time through peeling is set to false

1268
01:09:37,310 --> 01:09:45,480
because there's nothing to check against

1269
01:09:39,390 --> 01:09:47,730
right and then on peel index gets set

1270
01:09:45,479 --> 01:09:49,849
back to zero when you're done so there's

1271
01:09:47,729 --> 01:09:53,599
really no way to know whether you're in

1272
01:09:49,850 --> 01:09:53,600
one of these are not

1273
01:10:00,369 --> 01:10:12,729
I mean I guess one way to do it would be

1274
01:10:02,409 --> 01:10:18,399
to do it this way we would have to we

1275
01:10:12,729 --> 01:10:23,139
would effectively have to track you know

1276
01:10:18,399 --> 01:10:24,549
which one of these we were on since this

1277
01:10:23,140 --> 01:10:25,810
is messy enough I'm gonna say let's go

1278
01:10:24,550 --> 01:10:27,070
ahead and do it let's go ahead and

1279
01:10:25,810 --> 01:10:32,950
actually try to clean this up a little

1280
01:10:27,069 --> 01:10:34,420
bit because it's just kind of bad so

1281
01:10:32,949 --> 01:10:38,380
what we could do here is say well

1282
01:10:34,420 --> 01:10:42,010
alright when you do begin render entry

1283
01:10:38,380 --> 01:10:47,039
peels maybe that's when we target a

1284
01:10:42,010 --> 01:10:47,039
buffer you know

1285
01:10:58,399 --> 01:11:01,979
because you look at these we're gonna

1286
01:11:00,210 --> 01:11:05,149
jump back so you know you're gonna come

1287
01:11:01,979 --> 01:11:07,889
through you're gonna begin the the peels

1288
01:11:05,149 --> 01:11:10,679
you could just do this I mean I feel

1289
01:11:07,890 --> 01:11:12,570
like you could do this any way where you

1290
01:11:10,680 --> 01:11:15,060
say all right when we begin peels we

1291
01:11:12,569 --> 01:11:21,988
target whatever the peel buffer is that

1292
01:11:15,060 --> 01:11:33,420
we're on and then at the end you know we

1293
01:11:21,988 --> 01:11:35,689
increment the the on peel index and we

1294
01:11:33,420 --> 01:11:35,690
jump back

1295
01:11:39,609 --> 01:11:46,039
and similarly you know where the

1296
01:11:44,449 --> 01:11:47,269
repealing or not is in here which is

1297
01:11:46,039 --> 01:11:50,329
different from whether we're on appeal

1298
01:11:47,270 --> 01:11:52,370
or not assuming that we don't do that

1299
01:11:50,329 --> 01:11:54,619
we're gonna fall out of the loop then we

1300
01:11:52,369 --> 01:11:56,630
bind the other frame buffer and we know

1301
01:11:54,619 --> 01:11:58,130
that peeling is false and on peel index

1302
01:11:56,630 --> 01:11:59,180
also it has to equal zero because of

1303
01:11:58,130 --> 01:12:02,180
what we're gonna do inside the peel

1304
01:11:59,180 --> 01:12:03,980
thing so that's at least a little bit

1305
01:12:02,180 --> 01:12:06,890
cleaner there right so that when we go

1306
01:12:03,979 --> 01:12:11,329
to like start appeal we know what's

1307
01:12:06,890 --> 01:12:14,450
going on there the thing I suppose we

1308
01:12:11,329 --> 01:12:17,119
could do is clear at that point so when

1309
01:12:14,449 --> 01:12:22,099
you do a begin peel you would clear the

1310
01:12:17,119 --> 01:12:23,720
peel but I don't know if we want to do

1311
01:12:22,100 --> 01:12:32,240
that differently where we allow multiple

1312
01:12:23,720 --> 01:12:35,329
peel sets that doesn't really work so I

1313
01:12:32,239 --> 01:12:39,109
almost say this clear should really be

1314
01:12:35,329 --> 01:12:42,710
here technically meaning when you bind

1315
01:12:39,109 --> 01:12:45,819
the peel buffer then that is actually

1316
01:12:42,710 --> 01:12:45,819
where you would do this

1317
01:12:53,819 --> 01:13:01,590
and so this entry would be a real entry

1318
01:12:56,550 --> 01:13:04,320
right the the the render entry begin

1319
01:13:01,590 --> 01:13:20,690
peals would actually be a thing that

1320
01:13:04,319 --> 01:13:22,949
said what the color was and in that

1321
01:13:20,689 --> 01:13:25,409
entry you would store what the color is

1322
01:13:22,949 --> 01:13:33,779
that you expected to be clear to for

1323
01:13:25,409 --> 01:13:36,029
your peel resolve right you know

1324
01:13:33,779 --> 01:13:38,309
whatever you wanted that to be then when

1325
01:13:36,029 --> 01:13:41,099
you were done with the peels then it

1326
01:13:38,310 --> 01:13:45,900
would resolve the multi sample buffer

1327
01:13:41,100 --> 01:13:49,140
resolve it to the main buffer and off

1328
01:13:45,899 --> 01:13:50,759
you would go and then you're going to be

1329
01:13:49,140 --> 01:13:55,590
targeting the peel buffer directly from

1330
01:13:50,760 --> 01:13:58,489
then on right the main buffer I don't

1331
01:13:55,590 --> 01:13:58,489
know whatever you want to call that

1332
01:14:07,029 --> 01:14:10,199
and that seems fine

1333
01:14:10,770 --> 01:14:15,720
so then when you do a render entry full

1334
01:14:13,229 --> 01:14:21,629
clear you don't do this targeted next

1335
01:14:15,720 --> 01:14:25,460
thing anymore you just clear whatever

1336
01:14:21,630 --> 01:14:25,460
buffer you're targeting and that's it

1337
01:14:33,118 --> 01:14:35,929
I think

1338
01:14:54,590 --> 01:14:59,239
so I think that's right

1339
01:15:11,300 --> 01:15:18,840
so we'll see so if that's the case then

1340
01:15:15,539 --> 01:15:24,899
what you end up with is inside render

1341
01:15:18,840 --> 01:15:30,119
group here where we've got clear I'm

1342
01:15:24,899 --> 01:15:38,129
gonna call that something else where did

1343
01:15:30,119 --> 01:15:43,939
that go so in here I'm going to call

1344
01:15:38,130 --> 01:15:49,529
this push flow clear so we're super

1345
01:15:43,939 --> 01:16:02,279
obvious on what gets supposed to be full

1346
01:15:49,529 --> 01:16:09,869
clear depth peels gonna get its own one

1347
01:16:02,279 --> 01:16:12,738
of these entries now which also has the

1348
01:16:09,869 --> 01:16:12,738
clear color in it

1349
01:16:14,340 --> 01:16:23,279
that seems about right to me so the end

1350
01:16:21,569 --> 01:16:26,519
appeal doesn't have any information in

1351
01:16:23,279 --> 01:16:30,719
it but the begin depth field does and

1352
01:16:26,520 --> 01:16:45,449
that's I think a better way of looking

1353
01:16:30,719 --> 01:16:53,539
at that then we would go up into here

1354
01:16:45,448 --> 01:16:56,609
and say that this is a real citizen now

1355
01:16:53,539 --> 01:17:00,118
so in here we don't actually need to do

1356
01:16:56,609 --> 01:17:06,000
a clear anymore I don't think I think we

1357
01:17:00,118 --> 01:17:10,170
just do that and then the clear

1358
01:17:06,000 --> 01:17:12,719
functions that we actually have this is

1359
01:17:10,170 --> 01:17:14,670
a push flow clear that's going to do the

1360
01:17:12,719 --> 01:17:20,069
real clear

1361
01:17:14,670 --> 01:17:24,090
I don't know that this actually needs a

1362
01:17:20,069 --> 01:17:26,130
flow clear to be honest I don't think

1363
01:17:24,090 --> 01:17:27,270
this one uses depth peeling either but

1364
01:17:26,130 --> 01:17:33,779
we'll have to look to see what's

1365
01:17:27,270 --> 01:17:37,400
happening there exactly so we'll just

1366
01:17:33,779 --> 01:17:37,399
leave those as full clearest for now

1367
01:17:47,748 --> 01:17:52,319
so when we begin our def peels we need

1368
01:17:50,609 --> 01:17:57,090
to know which target it is we need to

1369
01:17:52,319 --> 01:17:59,158
know which one we're doing and we want

1370
01:17:57,090 --> 01:18:03,929
to know if it equals if it's the last

1371
01:17:59,158 --> 01:18:06,868
one right so the first time through it's

1372
01:18:03,929 --> 01:18:08,760
at zero and when it gets some extra it

1373
01:18:06,868 --> 01:18:10,828
goes to the top so I think all we need

1374
01:18:08,760 --> 01:18:16,320
to do here is just say all right look

1375
01:18:10,828 --> 01:18:18,808
whatever whichever one were on that's

1376
01:18:16,319 --> 01:18:20,219
going to tell us which whether we want

1377
01:18:18,809 --> 01:18:21,510
to clear it to nothing because it's the

1378
01:18:20,219 --> 01:18:22,649
depth feel or whether we want to clear

1379
01:18:21,510 --> 01:18:25,139
it to the background klar so it's the

1380
01:18:22,649 --> 01:18:28,469
last one we're gonna do we'll fill in

1381
01:18:25,139 --> 01:18:30,409
the background color there right so I

1382
01:18:28,469 --> 01:18:33,658
think that's roughly what we want to do

1383
01:18:30,408 --> 01:18:45,679
but it looks like we're not quite there

1384
01:18:33,658 --> 01:18:45,679
yet we're close

1385
01:18:47,340 --> 01:18:52,270
so I think that's a little bit cleaner

1386
01:18:50,199 --> 01:18:54,010
about with what's going on but still

1387
01:18:52,270 --> 01:18:56,980
yeah okay not quite there yet so let's

1388
01:18:54,010 --> 01:19:00,900
go ahead and and finish this off so when

1389
01:18:56,979 --> 01:19:00,899
we come through with the peels

1390
01:19:12,630 --> 01:19:20,359
I guess the only question I have here is

1391
01:19:15,750 --> 01:19:20,359
exactly how these are getting bound so

1392
01:19:21,590 --> 01:19:36,650
if we're peeling we use the previous

1393
01:19:24,719 --> 01:19:36,649
depth buffer and that seems fine and

1394
01:19:39,380 --> 01:19:43,710
that would have been cleared because it

1395
01:19:42,119 --> 01:19:45,809
would have gotten bound and when you

1396
01:19:43,710 --> 01:19:55,079
enter into the peel it will clear that

1397
01:19:45,810 --> 01:19:59,250
peel both the depth and the color right

1398
01:19:55,079 --> 01:20:04,590
you can see those two there so my only

1399
01:19:59,250 --> 01:20:09,810
question is this this guy doesn't seem

1400
01:20:04,590 --> 01:20:14,310
to be actually happening meaning this

1401
01:20:09,810 --> 01:20:24,480
clear color pit here assuming we're

1402
01:20:14,310 --> 01:20:27,210
tracking it right that should be gray

1403
01:20:24,479 --> 01:20:31,599
there and is not at the moment coming

1404
01:20:27,210 --> 01:20:34,630
through so this right here

1405
01:20:31,600 --> 01:20:39,489
[Music]

1406
01:20:34,630 --> 01:20:43,100
perhaps not sitting on peel index

1407
01:20:39,488 --> 01:20:50,419
correctly so on peel index will start

1408
01:20:43,100 --> 01:20:54,500
out at zero the first time through it

1409
01:20:50,420 --> 01:20:58,329
will clear it to all nothing's and go

1410
01:20:54,500 --> 01:21:02,869
it'll increment when it gets here

1411
01:20:58,329 --> 01:21:08,869
whatever max render target indexes

1412
01:21:02,869 --> 01:21:15,170
shouldn't it be depth feel count I'm not

1413
01:21:08,869 --> 01:21:20,930
sure why we have two specifications for

1414
01:21:15,170 --> 01:21:30,369
that yeah because it's just a depth

1415
01:21:20,930 --> 01:21:30,369
field count minus one here which

1416
01:21:35,420 --> 01:21:44,119
which doesn't seem logical I mean

1417
01:21:39,800 --> 01:21:50,090
basically what we're saying is that this

1418
01:21:44,119 --> 01:21:52,220
is the max render target index so we're

1419
01:21:50,090 --> 01:21:56,300
saying if the on peel index is less than

1420
01:21:52,220 --> 01:22:04,550
the max render target index then we

1421
01:21:56,300 --> 01:22:06,440
restore it and jump but if it's not then

1422
01:22:04,550 --> 01:22:09,250
we bind it so what's interesting about

1423
01:22:06,439 --> 01:22:09,250
that is

1424
01:22:20,819 --> 01:22:25,590
for some reason we didn't use it here

1425
01:22:23,500 --> 01:22:28,270
but that this is really all we're saying

1426
01:22:25,590 --> 01:22:30,550
we're just saying if it's on the maximum

1427
01:22:28,270 --> 01:22:33,449
then we should clear to the clear color

1428
01:22:30,550 --> 01:22:36,250
because it's the last one we can draw I

1429
01:22:33,448 --> 01:22:37,509
don't know why we must just not of like

1430
01:22:36,250 --> 01:22:43,238
when we originally doing it we must just

1431
01:22:37,510 --> 01:22:51,070
not have replaced it you know so that

1432
01:22:43,238 --> 01:22:53,289
seems fine so the other thing I would

1433
01:22:51,069 --> 01:22:56,019
say is I don't know if we really want

1434
01:22:53,289 --> 01:22:58,779
this other global here I don't like that

1435
01:22:56,020 --> 01:23:05,040
that seems busted so we're gonna go

1436
01:22:58,779 --> 01:23:13,118
ahead and get rid of it I think and say

1437
01:23:05,039 --> 01:23:16,198
look on peel index is just gonna have to

1438
01:23:13,118 --> 01:23:28,719
tell you the information that you need

1439
01:23:16,198 --> 01:23:30,578
you know I'm saying so basically you

1440
01:23:28,719 --> 01:23:35,170
only get one piece of information and

1441
01:23:30,578 --> 01:23:36,578
that's on peel index and on peel index

1442
01:23:35,170 --> 01:23:45,219
has to give you the information that

1443
01:23:36,578 --> 01:23:48,299
you're looking for if you can't get it

1444
01:23:45,219 --> 01:23:48,300
from that you don't get it

1445
01:23:54,510 --> 01:23:59,869
all right

1446
01:23:56,739 --> 01:23:59,869
[Music]

1447
01:24:15,239 --> 01:24:24,699
so resolve multisample presumably reads

1448
01:24:20,770 --> 01:24:36,490
from all the peel buffers and puts their

1449
01:24:24,699 --> 01:24:38,649
results so we're gonna take the frame

1450
01:24:36,489 --> 01:24:40,569
buffer we're writing to and we're gonna

1451
01:24:38,649 --> 01:24:44,500
put the result in there by reading from

1452
01:24:40,569 --> 01:24:50,380
all of the color buffers you know I'm

1453
01:24:44,500 --> 01:24:55,890
saying to you so if we look at where

1454
01:24:50,380 --> 01:25:03,119
resolve multi-sample is going to when we

1455
01:24:55,890 --> 01:25:07,360
do end peels we resolve the multi sample

1456
01:25:03,119 --> 01:25:09,699
to the depth peel resolve buffer for

1457
01:25:07,359 --> 01:25:12,489
that peel and we do the result mother

1458
01:25:09,699 --> 01:25:13,989
sample there and that gives us the final

1459
01:25:12,489 --> 01:25:22,750
result that we're gonna composite later

1460
01:25:13,989 --> 01:25:25,050
right so it looks like that kind of

1461
01:25:22,750 --> 01:25:28,180
educates me as to what our problem was

1462
01:25:25,050 --> 01:25:31,960
so because we leave the depth field

1463
01:25:28,180 --> 01:25:36,940
buffer is sitting around then it really

1464
01:25:31,960 --> 01:25:39,159
does mean that the clear would have to

1465
01:25:36,939 --> 01:25:42,429
clear all of them right it can't only

1466
01:25:39,159 --> 01:25:48,760
just clear the one of them it's just a

1467
01:25:42,430 --> 01:25:50,440
clear depth it's always the same I'm

1468
01:25:48,760 --> 01:25:52,380
gonna leave that outside so that when

1469
01:25:50,439 --> 01:25:57,189
this gets cleared it will get cleared to

1470
01:25:52,380 --> 01:25:59,369
the right values believe this expanded

1471
01:25:57,189 --> 01:25:59,369
there

1472
01:26:04,390 --> 01:26:17,060
and so that means that the full clear

1473
01:26:09,880 --> 01:26:22,000
would actually have to discard the data

1474
01:26:17,060 --> 01:26:25,190
that's in all the peeling buffers

1475
01:26:22,000 --> 01:26:31,210
unfortunately so when you do see the

1476
01:26:25,189 --> 01:26:31,210
full clear yeah it's gonna have to

1477
01:26:35,810 --> 01:26:49,289
it's gonna have to do that targeting but

1478
01:26:47,279 --> 01:26:58,829
I still think that should be okay so all

1479
01:26:49,289 --> 01:27:00,329
right let's keep going here so again

1480
01:26:58,829 --> 01:27:02,219
getting a little closer as we clean this

1481
01:27:00,329 --> 01:27:14,250
up you can see now I can actually see my

1482
01:27:02,219 --> 01:27:17,670
lighting points I'm getting some weird

1483
01:27:14,250 --> 01:27:18,869
like flit stalls so you can tell where

1484
01:27:17,670 --> 01:27:21,170
it's just a little bit wonky at this

1485
01:27:18,869 --> 01:27:21,170
point

1486
01:27:27,829 --> 01:27:32,420
and you can also see that the lighting

1487
01:27:30,229 --> 01:27:35,149
is actually for the lighting points it

1488
01:27:32,420 --> 01:27:38,149
actually looks about right which is

1489
01:27:35,149 --> 01:27:40,879
bizarre so it seems as though our main

1490
01:27:38,149 --> 01:27:46,029
problem with the lighting is actually in

1491
01:27:40,880 --> 01:27:48,829
the correspondence of lights to polygons

1492
01:27:46,029 --> 01:27:51,889
at the moment because you can see that

1493
01:27:48,829 --> 01:27:57,769
it's not all flickery here but if we

1494
01:27:51,889 --> 01:28:01,609
switch back to actually drawing the the

1495
01:27:57,770 --> 01:28:03,260
sampling is completely wrong so that's

1496
01:28:01,609 --> 01:28:08,179
interesting and that gives us some more

1497
01:28:03,260 --> 01:28:09,860
data to work with as well all right so

1498
01:28:08,179 --> 01:28:14,139
moving on here when we take a look at

1499
01:28:09,859 --> 01:28:21,049
what's happening with our def peels so

1500
01:28:14,139 --> 01:28:28,039
this is close to right now but I still

1501
01:28:21,050 --> 01:28:29,329
think it's subtly wrong well no you know

1502
01:28:28,039 --> 01:28:31,340
what I think this might be fine now

1503
01:28:29,329 --> 01:28:35,569
we're clearing the whole thing so when

1504
01:28:31,340 --> 01:28:38,539
the composite happens we actually should

1505
01:28:35,569 --> 01:28:40,789
be okay cuz the depth buffer and the

1506
01:28:38,539 --> 01:28:44,630
color since it's clearing the color to a

1507
01:28:40,789 --> 01:28:46,158
1.0 that should not allow anything below

1508
01:28:44,630 --> 01:28:49,369
it to show through so I think this is

1509
01:28:46,158 --> 01:28:52,369
actually right now I mean right in big

1510
01:28:49,369 --> 01:28:53,929
ol quotes there but I'm not sure boobs

1511
01:28:52,369 --> 01:28:56,029
I'm not sure what's going on with our

1512
01:28:53,929 --> 01:28:58,190
frame rate stutter though something

1513
01:28:56,029 --> 01:29:02,389
weird has happened that I'm going to

1514
01:28:58,189 --> 01:29:03,948
have to track down it might just be it

1515
01:29:02,389 --> 01:29:05,420
looks like when I run it in release mode

1516
01:29:03,948 --> 01:29:10,369
we're getting a full frame right here

1517
01:29:05,420 --> 01:29:13,969
for the most part so yeah it might just

1518
01:29:10,369 --> 01:29:14,750
be the debug situation being ugly but it

1519
01:29:13,969 --> 01:29:17,090
might be something look at it in a

1520
01:29:14,750 --> 01:29:19,399
second so what this tells me is we're

1521
01:29:17,090 --> 01:29:23,750
getting some kind of an anomaly because

1522
01:29:19,399 --> 01:29:28,879
if I switch to this mode the lighting

1523
01:29:23,750 --> 01:29:31,399
does not appear to be as messed up which

1524
01:29:28,880 --> 01:29:33,859
is a little bit weird now I do still see

1525
01:29:31,399 --> 01:29:36,219
a lot of flickering out in these regions

1526
01:29:33,859 --> 01:29:36,219
so

1527
01:29:37,908 --> 01:29:41,708
I'm not sure what to make of that

1528
01:29:42,340 --> 01:29:46,819
but you can see the lighting is very

1529
01:29:44,208 --> 01:29:50,269
smooth in here and when I flip back it's

1530
01:29:46,819 --> 01:29:53,988
all crazy so it feels like we first have

1531
01:29:50,269 --> 01:29:58,340
a correspondence bug actually where

1532
01:29:53,988 --> 01:30:02,839
we're not corresponding the samples for

1533
01:29:58,340 --> 01:30:06,679
the quads with the lights uh or we're

1534
01:30:02,840 --> 01:30:10,819
not downloading them right so when we do

1535
01:30:06,679 --> 01:30:13,038
like output lighting for example in here

1536
01:30:10,819 --> 01:30:16,488
maybe this output lighting textures is

1537
01:30:13,038 --> 01:30:18,559
busted with one possibility

1538
01:30:16,488 --> 01:30:20,799
another possibility is the things are

1539
01:30:18,559 --> 01:30:25,400
writing into the actual push quad are

1540
01:30:20,800 --> 01:30:26,900
broken so if we looked at where the

1541
01:30:25,399 --> 01:30:29,328
things we're lining up they wouldn't

1542
01:30:26,899 --> 01:30:31,429
line up properly so I'm not sure which

1543
01:30:29,328 --> 01:30:35,328
of those is happening and we're gonna

1544
01:30:31,429 --> 01:30:36,439
have to figure it out right I if we take

1545
01:30:35,328 --> 01:30:40,549
a look at what happens here we're just

1546
01:30:36,439 --> 01:30:43,729
sending down the full size of it every

1547
01:30:40,550 --> 01:30:46,208
frame and we send down the light data in

1548
01:30:43,729 --> 01:30:48,619
the light data zero and one arrays so

1549
01:30:46,208 --> 01:30:50,719
there's not a lot of weirdness going on

1550
01:30:48,618 --> 01:30:57,649
there it's pushed lighting is literally

1551
01:30:50,719 --> 01:30:59,090
just doing these two copies right so you

1552
01:30:57,649 --> 01:31:01,788
know this is the routine where we get

1553
01:30:59,090 --> 01:31:04,519
the information from we get it by

1554
01:31:01,788 --> 01:31:07,368
sampling these pointing to cease the the

1555
01:31:04,519 --> 01:31:10,219
point sees for the whole set of points

1556
01:31:07,368 --> 01:31:12,049
and we're just grabbing it out of the

1557
01:31:10,219 --> 01:31:16,609
the solutions that we had there's

1558
01:31:12,050 --> 01:31:19,189
nothing else happening in there Jimmy so

1559
01:31:16,609 --> 01:31:20,839
it's very straightforward and it seems

1560
01:31:19,189 --> 01:31:23,269
like it corresponds with this routine

1561
01:31:20,840 --> 01:31:26,779
pretty directly this is just taking the

1562
01:31:23,269 --> 01:31:29,970
point P and the emit C and drawing them

1563
01:31:26,779 --> 01:31:29,969
[Music]

1564
01:31:33,420 --> 01:31:53,920
but you know what you know what we're

1565
01:31:42,880 --> 01:32:03,340
not doing here so we aren't properly

1566
01:31:53,920 --> 01:32:11,020
handling the Maxum mission range where

1567
01:32:03,340 --> 01:32:13,779
is that device program so in the Z bias

1568
01:32:11,020 --> 01:32:15,610
program when we do our summation for the

1569
01:32:13,779 --> 01:32:26,319
lighting we should be blowing it out

1570
01:32:15,609 --> 01:32:29,789
based on how much light is available but

1571
01:32:26,319 --> 01:32:29,789
we're not doing that at all

1572
01:32:38,560 --> 01:32:43,930
so we definitely have some issues here

1573
01:32:45,550 --> 01:32:59,270
in terms of clamping but we do clamp it

1574
01:32:54,380 --> 01:33:01,369
here hmm so we're just passing down

1575
01:32:59,270 --> 01:33:04,220
points with the emission baked in to

1576
01:33:01,369 --> 01:33:06,590
full emission so I guess there isn't a

1577
01:33:04,220 --> 01:33:11,619
problem because the light data gets sent

1578
01:33:06,590 --> 01:33:11,619
down as floats and processed as floats

1579
01:33:17,170 --> 01:33:30,409
so the light data is stored as actual

1580
01:33:28,430 --> 01:33:32,150
float values at the moment we don't

1581
01:33:30,409 --> 01:33:34,489
actually pack it down so I guess that's

1582
01:33:32,149 --> 01:33:36,759
fine so the fact that it's an emission

1583
01:33:34,489 --> 01:33:43,189
the emission value gets blown out by the

1584
01:33:36,760 --> 01:33:44,840
maxim ition value is actually totally

1585
01:33:43,189 --> 01:33:48,739
fine

1586
01:33:44,840 --> 01:33:50,900
I was a little bit nervous about that

1587
01:33:48,739 --> 01:33:52,489
but looks like that's actually not a

1588
01:33:50,899 --> 01:33:54,949
problem at least not that I can think of

1589
01:33:52,489 --> 01:33:55,939
at the moment I just want to get a look

1590
01:33:54,949 --> 01:33:58,250
at this

1591
01:33:55,939 --> 01:34:01,819
push cube function just real quick so

1592
01:33:58,250 --> 01:34:02,899
when we take our light index here I want

1593
01:34:01,819 --> 01:34:05,539
to make sure that these are getting

1594
01:34:02,899 --> 01:34:08,299
correspond properly so we have a count

1595
01:34:05,539 --> 01:34:12,859
the count would be for the light index

1596
01:34:08,300 --> 01:34:16,960
would be strided here

1597
01:34:12,859 --> 01:34:16,960
[Music]

1598
01:34:20,659 --> 01:34:29,979
I don't see anything peculiar going on

1599
01:34:26,979 --> 01:34:29,979
there

1600
01:34:41,539 --> 01:34:51,510
hmm so I'm not sure I don't know what

1601
01:34:47,220 --> 01:34:55,170
we're getting in terms of they go

1602
01:34:51,510 --> 01:34:57,770
double-check the squad know know what's

1603
01:34:55,170 --> 01:34:57,770
going on there

1604
01:35:02,828 --> 01:35:09,750
it's like cut light index and that gets

1605
01:35:05,710 --> 01:35:22,529
set on here exactly as we would expect

1606
01:35:09,750 --> 01:35:33,158
and in here I mean that looks fine to me

1607
01:35:22,529 --> 01:35:36,488
so so I don't see what the problem is

1608
01:35:33,158 --> 01:35:38,618
and why those wouldn't be corresponding

1609
01:35:36,488 --> 01:35:42,069
properly but we definitely know there's

1610
01:35:38,618 --> 01:35:43,808
something up because we can see when we

1611
01:35:42,069 --> 01:35:46,509
actually output them the other way that

1612
01:35:43,809 --> 01:35:50,190
we don't have that problem I'm going to

1613
01:35:46,510 --> 01:35:50,190
take a look at output lighting textures

1614
01:35:51,270 --> 01:35:55,650
to see what's going on in there Oh

1615
01:36:06,920 --> 01:36:17,970
so if I take a quick peek in here I just

1616
01:36:11,130 --> 01:36:19,710
want to see some things like oops what

1617
01:36:17,970 --> 01:36:23,250
is the solution say for how many points

1618
01:36:19,710 --> 01:36:27,869
there are that's the value we would

1619
01:36:23,250 --> 01:36:32,159
expect what kind of position does it

1620
01:36:27,869 --> 01:36:42,359
think it has kind of color what kind of

1621
01:36:32,159 --> 01:36:47,779
direction so we definitely have some

1622
01:36:42,359 --> 01:36:47,779
points that don't have very much light

1623
01:36:50,989 --> 01:36:57,229
in fact everyone has very very low light

1624
01:37:13,229 --> 01:37:17,829
hmm which I'm not sure exactly why that

1625
01:37:16,029 --> 01:37:20,319
would be because again we're looking at

1626
01:37:17,829 --> 01:37:22,649
them in the other oh man let this run a

1627
01:37:20,319 --> 01:37:22,649
little bit

1628
01:37:48,170 --> 01:37:58,230
it's just really tiny light values for

1629
01:37:55,380 --> 01:38:01,409
the colors in emit c0 and I'm wondering

1630
01:37:58,229 --> 01:38:06,319
so if I were to switch to this one would

1631
01:38:01,408 --> 01:38:06,319
I suddenly see something different so

1632
01:38:07,279 --> 01:38:16,130
what do those same values look like if I

1633
01:38:12,479 --> 01:38:16,129
look at them here so

1634
01:38:37,939 --> 01:38:48,799
so they definitely don't look all that

1635
01:38:42,149 --> 01:38:50,609
unusual I want to try one more thing

1636
01:38:48,800 --> 01:38:53,190
because they don't look that different

1637
01:38:50,609 --> 01:38:54,569
between the two and yet one

1638
01:38:53,189 --> 01:38:59,069
visualization looks okay and the other

1639
01:38:54,569 --> 01:39:03,989
one looks wonky I want to try forcing

1640
01:38:59,069 --> 01:39:07,159
valid to false so forcing valid to false

1641
01:39:03,989 --> 01:39:10,260
would make it so that I always see

1642
01:39:07,159 --> 01:39:15,170
exactly what this frame computed and I

1643
01:39:10,260 --> 01:39:15,170
never average the previous frame right

1644
01:39:26,500 --> 01:39:32,119
that's so weird I have no idea what's

1645
01:39:29,750 --> 01:39:36,430
going on here like the lighting samples

1646
01:39:32,119 --> 01:39:38,779
for the quads are totally disaggregated

1647
01:39:36,430 --> 01:39:40,850
so this has nothing to do with storage

1648
01:39:38,779 --> 01:39:43,579
so storage is now out of the question so

1649
01:39:40,850 --> 01:39:45,890
the part that we changed is in theory

1650
01:39:43,579 --> 01:39:48,500
not actually happening anymore right

1651
01:39:45,890 --> 01:39:51,280
we're never looking at what the old

1652
01:39:48,500 --> 01:39:56,449
values were we're never taking this

1653
01:39:51,279 --> 01:40:00,529
branch we're only ever using the one

1654
01:39:56,449 --> 01:40:05,720
where we just directly set the values so

1655
01:40:00,529 --> 01:40:08,509
you know whatever omits e0 was and

1656
01:40:05,720 --> 01:40:13,720
whatever the direction was that's what

1657
01:40:08,510 --> 01:40:13,720
we send out the pipe

1658
01:40:49,368 --> 01:41:02,308
it feels like we must not be going over

1659
01:40:53,880 --> 01:41:13,980
all of the actual value somehow but I'm

1660
01:41:02,309 --> 01:41:16,949
not sure how I let me look so I come in

1661
01:41:13,979 --> 01:41:21,169
here to this function I want to see

1662
01:41:16,948 --> 01:41:39,899
which point indexes we actually do so

1663
01:41:21,170 --> 01:41:42,618
you know I mean that sure does look

1664
01:41:39,899 --> 01:41:42,618
correct right

1665
01:42:00,010 --> 01:42:03,530
so those are the emission values let's

1666
01:42:02,119 --> 01:42:12,800
take a look at the app restriction to

1667
01:42:03,529 --> 01:42:16,009
light so these should all be like you

1668
01:42:12,800 --> 01:42:17,930
know normal values which they look to be

1669
01:42:16,010 --> 01:42:21,110
you know either we didn't get any light

1670
01:42:17,930 --> 01:42:23,720
in which case for zero or we did get

1671
01:42:21,109 --> 01:42:34,670
light in which case we should be a

1672
01:42:23,720 --> 01:42:37,449
normal you know and that looks

1673
01:42:34,670 --> 01:42:37,449
reasonable

1674
01:42:43,460 --> 01:42:45,489
Oh

1675
01:43:15,220 --> 01:43:19,130
so I'm gonna take one more look at this

1676
01:43:17,630 --> 01:43:21,260
and then I think the next tack of my

1677
01:43:19,130 --> 01:43:22,940
take is to construct a very simple test

1678
01:43:21,260 --> 01:43:24,890
case that I can walk all the way through

1679
01:43:22,939 --> 01:43:31,989
because I really don't I just can't

1680
01:43:24,890 --> 01:43:31,990
guess what the value is I don't have I

1681
01:43:37,840 --> 01:43:51,199
don't have a guess I also don't know why

1682
01:43:40,369 --> 01:43:53,960
is this gray like why is that gray it's

1683
01:43:51,199 --> 01:43:55,510
happening is there a reason why it's

1684
01:43:53,960 --> 01:43:59,770
grayed out

1685
01:43:55,510 --> 01:43:59,770
that's just like a bug in Visual Studio

1686
01:44:00,579 --> 01:44:04,029
it's very strange

1687
01:45:18,158 --> 01:45:25,348
I just don't have a good idea here

1688
01:46:13,130 --> 01:46:17,720
see this is clearing the emission array

1689
01:46:26,969 --> 01:46:30,050
there's our lights

1690
01:46:38,260 --> 01:46:50,090
you know what I should probably do

1691
01:46:40,099 --> 01:46:54,500
actually let me go ahead and cut this

1692
01:46:50,090 --> 01:46:57,849
down to the smallest possible so I just

1693
01:46:54,500 --> 01:46:57,849
let's have less things to look at

1694
01:47:00,488 --> 01:47:04,098
because this would just be easier to it

1695
01:47:02,868 --> 01:47:10,479
actually also increases the framerate

1696
01:47:04,099 --> 01:47:10,480
which is nice so we can see so

1697
01:47:28,998 --> 01:47:35,090
again that looks pretty correct to me

1698
01:47:37,429 --> 01:47:45,199
yeah all right so if I go into the

1699
01:47:41,189 --> 01:47:45,199
lighting here and Irene Abel

1700
01:47:58,050 --> 01:48:03,929
you know that lighting looks pretty

1701
01:48:00,689 --> 01:48:08,908
reasonable I mean it could still be

1702
01:48:03,929 --> 01:48:11,760
buggy but it's pretty reasonable so then

1703
01:48:08,908 --> 01:48:13,848
to go from that to this when you're

1704
01:48:11,760 --> 01:48:16,920
actually drawing the quads I'm

1705
01:48:13,849 --> 01:48:19,078
completely at a loss to explain why

1706
01:48:16,920 --> 01:48:21,658
that's happening because I can't figure

1707
01:48:19,078 --> 01:48:24,058
out any reason why would have that kind

1708
01:48:21,658 --> 01:48:28,158
of a change so I think the fact that

1709
01:48:24,059 --> 01:48:31,199
it's emit c0 it must be the normals

1710
01:48:28,158 --> 01:48:33,649
let's find out by just stuffing the

1711
01:48:31,198 --> 01:48:38,250
normals with valid data

1712
01:48:33,649 --> 01:48:41,609
that's my only thinking here so let's

1713
01:48:38,250 --> 01:48:44,118
suppose we set all the normals to just

1714
01:48:41,609 --> 01:48:44,118
be like

1715
01:48:57,729 --> 01:49:04,840
so assuming we stuffed these values so

1716
01:49:00,679 --> 01:49:09,349
that the D values are all bogus right

1717
01:49:04,840 --> 01:49:11,828
then what do we see yeah it's still

1718
01:49:09,349 --> 01:49:16,449
garbage

1719
01:49:11,828 --> 01:49:16,448
all right let's stuff the color values

1720
01:49:24,930 --> 01:49:39,659
you know thought of as well no okay so

1721
01:49:38,460 --> 01:49:52,199
I'm just gonna set the color values as

1722
01:49:39,659 --> 01:50:04,109
well so the RG and B values are now all

1723
01:49:52,199 --> 01:50:07,079
supposed to be the same lovely so if

1724
01:50:04,109 --> 01:50:09,839
that's the case I'm gonna now let the D

1725
01:50:07,079 --> 01:50:11,670
values let the normals be whatever

1726
01:50:09,840 --> 01:50:17,220
they're almost want to be so just want

1727
01:50:11,670 --> 01:50:19,440
to see if there's noise there so there's

1728
01:50:17,220 --> 01:50:22,560
a tremendous amount of noise in the

1729
01:50:19,439 --> 01:50:25,619
normals right that's just garbage so

1730
01:50:22,560 --> 01:50:29,490
even if you assume that the color values

1731
01:50:25,619 --> 01:50:33,359
are the same every frame the normals are

1732
01:50:29,489 --> 01:50:34,949
varying that much which is ridiculous

1733
01:50:33,359 --> 01:50:43,949
right I mean that's just absolutely

1734
01:50:34,949 --> 01:50:47,069
crazy I mean there's just no chances

1735
01:50:43,949 --> 01:50:49,199
this is even remotely correct and I just

1736
01:50:47,069 --> 01:50:52,380
have no idea where that complete garbage

1737
01:50:49,199 --> 01:50:54,659
is coming from because it feels like

1738
01:50:52,380 --> 01:50:57,810
weird looping over the same information

1739
01:50:54,659 --> 01:51:06,239
that appears stable would you loop over

1740
01:50:57,810 --> 01:51:10,680
it per box here um you end up getting

1741
01:51:06,239 --> 01:51:13,199
the exact same stuff we were getting

1742
01:51:10,680 --> 01:51:19,619
before but if you actually go through

1743
01:51:13,199 --> 01:51:23,369
and output it for a point not so and I

1744
01:51:19,619 --> 01:51:25,470
have no explanation for that at all I

1745
01:51:23,369 --> 01:51:28,909
have no idea what's going on if that's

1746
01:51:25,470 --> 01:51:28,909
pure mystery to me

1747
01:51:32,069 --> 01:51:37,619
so I guess the next thing to do is I'm

1748
01:51:35,220 --> 01:51:40,170
gonna take a look and see if I have the

1749
01:51:37,619 --> 01:51:44,670
color values and the direction values

1750
01:51:40,170 --> 01:51:48,420
set here I want to go ahead and set them

1751
01:51:44,670 --> 01:51:52,109
somewhere else so if instead of setting

1752
01:51:48,420 --> 01:51:54,000
them here let's suppose I set them you

1753
01:51:52,109 --> 01:51:55,979
know so this is actually outputting what

1754
01:51:54,000 --> 01:51:58,739
it's supposed to output now right it's

1755
01:51:55,979 --> 01:52:02,369
it's just doing the same output routine

1756
01:51:58,739 --> 01:52:05,159
that it used to do and instead when I go

1757
01:52:02,369 --> 01:52:08,069
up here when I actually go to ratify

1758
01:52:05,159 --> 01:52:10,130
these points I'm going to actually set

1759
01:52:08,069 --> 01:52:12,869
them to I'm going to cold set them here

1760
01:52:10,130 --> 01:52:16,440
so I'm gonna set valid to false which

1761
01:52:12,869 --> 01:52:19,349
forces me always into this loop and

1762
01:52:16,439 --> 01:52:23,939
inside this loop I'm going to set the

1763
01:52:19,350 --> 01:52:26,150
values so that they have to be specific

1764
01:52:23,939 --> 01:52:26,149
things

1765
01:52:37,840 --> 01:52:43,739
so here are those two values that will

1766
01:52:41,319 --> 01:52:46,420
be coming out as C and D respectively

1767
01:52:43,739 --> 01:52:47,739
and so I'm going to set them to exactly

1768
01:52:46,420 --> 01:52:58,779
the same thing as I set them to you

1769
01:52:47,739 --> 01:53:00,460
before and now running so I'm basically

1770
01:52:58,779 --> 01:53:04,059
just isolating parts of the pipeline

1771
01:53:00,460 --> 01:53:07,359
here so what we write here does actually

1772
01:53:04,060 --> 01:53:12,360
come out if I was to flip this around

1773
01:53:07,359 --> 01:53:17,079
now I should see it shift over to blue

1774
01:53:12,359 --> 01:53:20,559
lighting and it does right so that seems

1775
01:53:17,079 --> 01:53:23,409
totally fair so the noise is definitely

1776
01:53:20,560 --> 01:53:25,150
coming upstream somehow meaning that the

1777
01:53:23,409 --> 01:53:27,430
actual information we're getting out

1778
01:53:25,149 --> 01:53:29,889
here somehow and this doesn't make any

1779
01:53:27,430 --> 01:53:32,500
sense because output lighting points is

1780
01:53:29,890 --> 01:53:39,850
reading from the same information so I

1781
01:53:32,500 --> 01:53:42,779
have no idea how it's possible I mean I

1782
01:53:39,850 --> 01:53:42,780
guess the thing is

1783
01:53:50,189 --> 01:53:54,879
am i like not rendering some of the

1784
01:53:53,260 --> 01:53:55,840
points my only right now like a subset

1785
01:53:54,880 --> 01:54:03,460
of the points I don't thinks I'm think

1786
01:53:55,840 --> 01:54:07,590
I'm rendering all of them I should be

1787
01:54:03,460 --> 01:54:07,590
able to see the noise in here

1788
01:54:12,140 --> 01:54:21,020
you know we're not drawing D so D does

1789
01:54:16,229 --> 01:54:26,129
not get drawn when we push this quad on

1790
01:54:21,020 --> 01:54:29,460
but you know D is not the only thing

1791
01:54:26,130 --> 01:54:32,340
that was problematic so if I don't stuff

1792
01:54:29,460 --> 01:54:37,679
the colors let's see let's see if it is

1793
01:54:32,340 --> 01:54:41,429
only D if I let the colors come through

1794
01:54:37,679 --> 01:54:43,770
however they want yeah it's still

1795
01:54:41,429 --> 01:54:55,590
complete garbage so how is it possible

1796
01:54:43,770 --> 01:54:58,010
that switching to here yeah I just don't

1797
01:54:55,590 --> 01:54:58,010
understand

1798
01:55:05,800 --> 01:55:11,199
those two things quote should coincide

1799
01:55:08,109 --> 01:55:15,899
and they do not coincide at all right

1800
01:55:11,199 --> 01:55:17,769
they are completely fictitious and

1801
01:55:15,899 --> 01:55:21,519
furthermore if we cranked up the

1802
01:55:17,770 --> 01:55:23,320
smoothing on that particular like so

1803
01:55:21,520 --> 01:55:25,330
let's say I blur it instead of over ten

1804
01:55:23,319 --> 01:55:28,840
frames I've lured over a hundred frames

1805
01:55:25,329 --> 01:55:31,210
so it's very blurry right this change is

1806
01:55:28,840 --> 01:55:34,650
not at all so it appears to just again

1807
01:55:31,210 --> 01:55:37,420
be just random values that it's getting

1808
01:55:34,649 --> 01:55:42,239
this one should be much smoother well

1809
01:55:37,420 --> 01:55:45,730
you know it's not oh wait no that's

1810
01:55:42,239 --> 01:55:51,779
because I've I'm not actually doing

1811
01:55:45,729 --> 01:55:51,779
smoothing this one is now about test

1812
01:55:57,139 --> 01:56:06,949
so I guess what I would say here is that

1813
01:56:00,859 --> 01:56:10,339
still seems wrong so there is more to it

1814
01:56:06,948 --> 01:56:11,988
than I'm making it appear because if it

1815
01:56:10,340 --> 01:56:14,869
was really smoothing over a hundred

1816
01:56:11,988 --> 01:56:16,638
frames here we would have a pretty

1817
01:56:14,868 --> 01:56:19,429
significant difference there

1818
01:56:16,639 --> 01:56:24,760
I guess the possible explanation is that

1819
01:56:19,429 --> 01:56:24,760
because of the directionality thing I

1820
01:56:24,789 --> 01:56:28,698
mean one way I could do it is say let's

1821
01:56:27,109 --> 01:56:30,618
suppose the direction is always set to

1822
01:56:28,698 --> 01:56:32,448
true I'm sorry fouled right so true so

1823
01:56:30,618 --> 01:56:40,250
it forces the blend case does that

1824
01:56:32,448 --> 01:56:43,759
remove the noise yeah it does so you can

1825
01:56:40,250 --> 01:56:45,829
see that this is perfectly smooth here

1826
01:56:43,760 --> 01:56:48,320
blended over a hundred frames so it

1827
01:56:45,829 --> 01:56:50,779
doesn't even really change for quite

1828
01:56:48,319 --> 01:56:52,939
some time right the frame lag on the

1829
01:56:50,779 --> 01:56:54,920
lighting change is massive and all the

1830
01:56:52,939 --> 01:57:03,439
lighting values are very smooth I switch

1831
01:56:54,920 --> 01:57:06,350
to here and they're complete nonsense so

1832
01:57:03,439 --> 01:57:08,750
what's going on right like what is

1833
01:57:06,350 --> 01:57:10,639
happening here again let's do the same

1834
01:57:08,750 --> 01:57:13,090
thing we did before let's stuff the

1835
01:57:10,639 --> 01:57:13,090
values

1836
01:57:20,670 --> 01:57:24,639
so assuming that I stuffed the values

1837
01:57:23,078 --> 01:57:32,018
that we're gonna send down the lighting

1838
01:57:24,639 --> 01:57:36,909
pipeline like so if I just take average

1839
01:57:32,019 --> 01:57:38,800
direction out of the equation by saying

1840
01:57:36,908 --> 01:57:49,420
alright let's just look at the emit

1841
01:57:38,800 --> 01:57:50,949
color by itself so we're vaping the the

1842
01:57:49,420 --> 01:57:54,880
average direction to light is just gone

1843
01:57:50,948 --> 01:57:56,500
it's always set to point upward and you

1844
01:57:54,880 --> 01:57:57,309
can see that just even the emit colors

1845
01:57:56,500 --> 01:58:02,050
are garbage

1846
01:57:57,309 --> 01:58:03,940
right they're totally wrong so I guess

1847
01:58:02,050 --> 01:58:07,750
now what I want to see is I want to see

1848
01:58:03,939 --> 01:58:12,038
this quad I want to see those those quad

1849
01:58:07,750 --> 01:58:13,929
indices I like what's going on right so

1850
01:58:12,038 --> 01:58:16,000
I'm gonna actually take a look inside

1851
01:58:13,929 --> 01:58:18,190
push quad because it's the only place I

1852
01:58:16,000 --> 01:58:20,920
can think of now to start to figure out

1853
01:58:18,189 --> 01:58:24,158
how is it possible that apparently the

1854
01:58:20,920 --> 01:58:26,408
data that looks absolutely fine is

1855
01:58:24,158 --> 01:58:28,509
somehow not nonetheless ending up

1856
01:58:26,408 --> 01:58:33,848
completely bogus and I have no idea how

1857
01:58:28,510 --> 01:58:35,289
right so let's go ahead in there to the

1858
01:58:33,849 --> 01:58:41,380
place where we actually push it and see

1859
01:58:35,288 --> 01:58:44,038
what we're pushing so these vertices as

1860
01:58:41,380 --> 01:58:44,038
they come out

1861
01:58:56,250 --> 01:59:00,329
I'm just going to look at what they are

1862
01:59:12,559 --> 01:59:21,420
all right there's one for every quad

1863
01:59:19,738 --> 01:59:22,768
these should all be the same because

1864
01:59:21,420 --> 01:59:23,998
like I said right now in fact we even

1865
01:59:22,769 --> 01:59:25,559
have to do on there it's like these

1866
01:59:23,998 --> 01:59:27,210
don't need to be per vertex they can

1867
01:59:25,559 --> 01:59:33,029
actually be primitive which we can do

1868
01:59:27,210 --> 01:59:35,480
later to just reduce the bandwidth so if

1869
01:59:33,029 --> 01:59:38,488
I take a look and I step through here

1870
01:59:35,479 --> 01:59:40,529
the light captured Olli as before and it

1871
01:59:38,488 --> 01:59:44,149
is and the indices should just climb up

1872
01:59:40,529 --> 01:59:44,149
nice and smooth like they are

1873
02:00:01,869 --> 02:00:08,019
so this should this is probably just the

1874
02:00:04,909 --> 02:00:10,519
sprite which has no light indices on it

1875
02:00:08,020 --> 02:00:13,390
and I yes a push rect

1876
02:00:10,520 --> 02:00:16,310
there's only push cubes have this and

1877
02:00:13,390 --> 02:00:18,740
this saw I mean it just looks totally

1878
02:00:16,310 --> 02:00:23,120
fine nothing out of the ordinary is

1879
02:00:18,739 --> 02:00:31,550
happening so that all seems reasonable

1880
02:00:23,119 --> 02:00:34,670
right and if we look at I guess I should

1881
02:00:31,550 --> 02:00:38,289
look at a subsequent frame as well like

1882
02:00:34,670 --> 02:00:38,289
are those values correct through here

1883
02:00:43,270 --> 02:00:52,730
this is all pushed bitmap unfortunately

1884
02:00:45,920 --> 02:00:55,449
let's look at push cube now so here we

1885
02:00:52,729 --> 02:00:55,449
are in push cube

1886
02:01:20,199 --> 02:01:29,279
I mean again all exactly what you would

1887
02:01:24,640 --> 02:01:33,000
suspect nothing weird is happening here

1888
02:01:29,279 --> 02:01:33,000
that I can see anyway

1889
02:01:44,149 --> 02:01:50,448
come into the lighting group 77 boxes

1890
02:01:52,010 --> 02:01:55,309
1,800 points

1891
02:02:13,208 --> 02:02:38,349
again everything just looks totally

1892
02:02:15,788 --> 02:02:40,809
clean here 1 2 1 2 45 so again that just

1893
02:02:38,349 --> 02:02:48,670
that just seems like totally fine

1894
02:02:40,809 --> 02:02:57,340
nothing bizarre happening right I see

1895
02:02:48,670 --> 02:03:01,090
what we get to by the end here oh come

1896
02:02:57,340 --> 02:03:03,179
on I hate that aspect of visual studio

1897
02:03:01,090 --> 02:03:06,099
studio how it can't show you variables

1898
02:03:03,179 --> 02:03:06,729
that were in the previous scope it's so

1899
02:03:06,099 --> 02:03:09,328
busted

1900
02:03:06,729 --> 02:03:12,539
you used to do it used to be able to

1901
02:03:09,328 --> 02:03:12,538
want this

1902
02:03:22,279 --> 02:03:27,000
so you know if I run this for a while I

1903
02:03:24,868 --> 02:03:29,689
should see this crawl up towards the

1904
02:03:27,000 --> 02:03:29,689
full value

1905
02:03:50,390 --> 02:03:58,730
and it totally does right so that all

1906
02:03:55,760 --> 02:04:00,470
seems pretty good I come through here

1907
02:03:58,729 --> 02:04:08,179
and we have average selection to light

1908
02:04:00,470 --> 02:04:12,159
getting zeroed out right could double

1909
02:04:08,180 --> 02:04:12,159
checked if that's plausible

1910
02:04:12,819 --> 02:04:24,170
here's that restriction to light and it

1911
02:04:16,880 --> 02:04:27,020
is exactly what you expect so that all

1912
02:04:24,170 --> 02:04:30,739
seems totally fine then we go through

1913
02:04:27,020 --> 02:04:34,120
the seventy seven boxes again each one

1914
02:04:30,739 --> 02:04:34,119
of them should have twenty-four

1915
02:04:44,109 --> 02:04:47,589
that all seems fine

1916
02:04:55,599 --> 02:05:01,260
it's just some basic stats there and

1917
02:04:58,868 --> 02:05:05,219
then we go to output lighting textures

1918
02:05:01,260 --> 02:05:05,219
we go through all the points again

1919
02:05:11,090 --> 02:05:15,550
and again that all seems really

1920
02:05:13,220 --> 02:05:15,550
straightforward

1921
02:05:45,849 --> 02:05:49,840
you gotta take a look at what these

1922
02:05:53,050 --> 02:05:56,739
these eyes look like

1923
02:06:12,260 --> 02:06:22,809
those look pretty reasonable cuz they

1924
02:06:17,719 --> 02:06:22,809
should mirror and they appear too

1925
02:06:24,590 --> 02:06:38,538
and then for the for the Z values there

1926
02:06:32,679 --> 02:06:40,130
I'm sorry the W values there those

1927
02:06:38,538 --> 02:06:41,899
should always be stuffed with just the

1928
02:06:40,130 --> 02:06:44,328
DX value which we took out of the

1929
02:06:41,899 --> 02:06:48,399
equation by setting with so it should

1930
02:06:44,328 --> 02:06:48,399
always be stuffed to 0 right because we

1931
02:06:48,519 --> 02:06:51,920
we are stuffing it here so we don't even

1932
02:06:50,569 --> 02:06:55,458
have to pay attention to that one it's

1933
02:06:51,920 --> 02:06:58,029
not even it's not relevant so that that

1934
02:06:55,458 --> 02:07:06,019
seems like it's the right point

1935
02:06:58,029 --> 02:07:09,649
information light data one which should

1936
02:07:06,019 --> 02:07:12,650
be the color values here let me go ahead

1937
02:07:09,649 --> 02:07:18,788
and take a look at what the emit c0 is

1938
02:07:12,649 --> 02:07:18,788
we should emit c0

1939
02:07:22,029 --> 02:07:32,409
I mean that all looks right to me

1940
02:07:29,819 --> 02:07:34,750
so these are the same so we're sending

1941
02:07:32,409 --> 02:07:36,430
down exactly the same packed values that

1942
02:07:34,750 --> 02:07:39,430
we're supposed to be sending down as far

1943
02:07:36,430 --> 02:07:41,530
as I can tell the color is positions and

1944
02:07:39,430 --> 02:07:44,770
the things all get packed in there

1945
02:07:41,529 --> 02:07:48,969
properly so the question is just how is

1946
02:07:44,770 --> 02:07:52,720
it possible that this routine gets the

1947
02:07:48,970 --> 02:08:00,490
right values and our routine doesn't how

1948
02:07:52,720 --> 02:08:02,260
does this routine manage to get proper

1949
02:08:00,489 --> 02:08:07,210
values and the other routine doesn't I

1950
02:08:02,260 --> 02:08:14,829
I'm so confused right now because this

1951
02:08:07,210 --> 02:08:18,819
routine I mean it loops over the boxes

1952
02:08:14,829 --> 02:08:23,529
so it is slightly different in that

1953
02:08:18,819 --> 02:08:26,259
sense but I have no idea how that could

1954
02:08:23,529 --> 02:08:28,389
ever actually affect it I could make the

1955
02:08:26,260 --> 02:08:31,920
other routine loop over boxes just to

1956
02:08:28,390 --> 02:08:31,920
validate that fact

1957
02:08:38,079 --> 02:08:50,289
I mean and the other thing we do here is

1958
02:08:41,109 --> 02:08:51,880
we clamp and we're not clamping here so

1959
02:08:50,289 --> 02:08:53,769
I mean I could see if this was a

1960
02:08:51,880 --> 02:08:54,909
clamping oriented thing but we clamp

1961
02:08:53,770 --> 02:08:57,820
inside the shader

1962
02:08:54,909 --> 02:08:59,649
so unless we messed up the clamping

1963
02:08:57,819 --> 02:09:02,500
inside the shader I'm not sure how that

1964
02:08:59,649 --> 02:09:06,309
even that wouldn't have an effect I

1965
02:09:02,500 --> 02:09:11,500
don't think so if I were to do something

1966
02:09:06,310 --> 02:09:21,220
where I said okay C equals the clamp of

1967
02:09:11,500 --> 02:09:23,649
C right yeah I don't think that should

1968
02:09:21,220 --> 02:09:30,789
actually have any effect at all on what

1969
02:09:23,649 --> 02:09:32,500
we're seeing yeah it doesn't so it's not

1970
02:09:30,789 --> 02:09:34,239
a clamping problem right we're not

1971
02:09:32,500 --> 02:09:37,899
getting something where the clamping is

1972
02:09:34,239 --> 02:09:40,149
is the primary is the primary problem

1973
02:09:37,899 --> 02:09:41,859
there what we're seeing is something

1974
02:09:40,149 --> 02:09:47,139
else and I don't know what that's

1975
02:09:41,859 --> 02:09:50,880
something else even is so this doesn't

1976
02:09:47,140 --> 02:09:50,880
appear to be a problem

1977
02:10:07,600 --> 02:10:13,750
it still looks totally fine so if I was

1978
02:10:10,989 --> 02:10:17,800
to do this the other way round again for

1979
02:10:13,750 --> 02:10:35,680
absolutely no reason whatsoever if I

1980
02:10:17,800 --> 02:10:37,840
just purely decided if I just decided to

1981
02:10:35,680 --> 02:10:39,990
make this do the loop the other way

1982
02:10:37,840 --> 02:10:39,989
around

1983
02:10:58,800 --> 02:11:13,210
like so and I will say that Shh

1984
02:11:10,770 --> 02:11:15,220
shouldn't really be commands light box

1985
02:11:13,210 --> 02:11:18,899
count that's a bit of a cheating move

1986
02:11:15,220 --> 02:11:18,900
there but that's okay for now I suppose

1987
02:11:22,739 --> 02:11:27,699
so here's us out putting these in

1988
02:11:25,659 --> 02:11:30,039
literally the exact same loop is the one

1989
02:11:27,699 --> 02:11:32,590
that works so we have one that outputs

1990
02:11:30,039 --> 02:11:36,519
them and works in one after that it's

1991
02:11:32,590 --> 02:11:39,250
exactly the same loop so again

1992
02:11:36,520 --> 02:11:40,690
completely identical here only

1993
02:11:39,250 --> 02:11:50,760
you know we've changed the loop

1994
02:11:40,689 --> 02:11:59,500
structure okay so continuing this

1995
02:11:50,760 --> 02:12:01,449
absolute absurdity what if I was to just

1996
02:11:59,500 --> 02:12:02,590
take the other routine so this is you

1997
02:12:01,449 --> 02:12:04,239
know we'll just leave this this is how

1998
02:12:02,590 --> 02:12:05,829
it's supposed to work and as far as we

1999
02:12:04,239 --> 02:12:08,349
know it should work so this is probably

2000
02:12:05,829 --> 02:12:11,079
correct and we've got a book somewhere

2001
02:12:08,350 --> 02:12:14,260
else if I was to take out put lighting

2002
02:12:11,079 --> 02:12:16,119
points which at this point I know works

2003
02:12:14,260 --> 02:12:18,340
properly in terms of outputting the

2004
02:12:16,119 --> 02:12:21,099
colors let's just have it out put the

2005
02:12:18,340 --> 02:12:23,319
colors right so this is what it draws

2006
02:12:21,100 --> 02:12:26,500
and it is drawing it properly

2007
02:12:23,319 --> 02:12:33,519
if we go back and look at how that's

2008
02:12:26,500 --> 02:12:35,560
working you can see that the only

2009
02:12:33,520 --> 02:12:37,360
difference here is you know we push the

2010
02:12:35,560 --> 02:12:41,500
full clear on so you know if I didn't

2011
02:12:37,359 --> 02:12:43,739
push the full clear on and I just let it

2012
02:12:41,500 --> 02:12:47,560
do its thing you can see that in this

2013
02:12:43,739 --> 02:12:52,359
scenario right I you have to look at

2014
02:12:47,560 --> 02:12:57,160
both things on top of each other but it

2015
02:12:52,359 --> 02:12:58,750
appears to me I can even still say even

2016
02:12:57,159 --> 02:13:00,670
with all that noise it's correct it's

2017
02:12:58,750 --> 02:13:02,260
still the same thing it was drawing so

2018
02:13:00,670 --> 02:13:03,569
the full clear really has nothing to do

2019
02:13:02,260 --> 02:13:06,130
with it

2020
02:13:03,569 --> 02:13:08,380
it's just output lighting points works

2021
02:13:06,130 --> 02:13:11,719
and output lighting textures doesn't

2022
02:13:08,380 --> 02:13:15,319
work so what if I just go ahead and

2023
02:13:11,719 --> 02:13:18,260
loan output lighting points into making

2024
02:13:15,319 --> 02:13:20,149
it be output letting textures right so

2025
02:13:18,260 --> 02:13:23,659
what if I literally take this thing

2026
02:13:20,149 --> 02:13:27,920
right here and instead of having it do

2027
02:13:23,658 --> 02:13:33,319
push quads what if I just get rid of the

2028
02:13:27,920 --> 02:13:34,849
full Clare okay and instead of doing a

2029
02:13:33,319 --> 02:13:47,509
push quad I'm just going to do this

2030
02:13:34,849 --> 02:13:50,029
operation so we literally take exactly

2031
02:13:47,510 --> 02:13:51,699
the operation we were doing here exactly

2032
02:13:50,029 --> 02:13:56,929
the same things that we're pushing on

2033
02:13:51,698 --> 02:13:58,248
okay so we got this front of it here so

2034
02:13:56,929 --> 02:13:59,979
I'm going to take the C and I'm gonna

2035
02:13:58,248 --> 02:14:03,380
make that be equal to the front of it

2036
02:13:59,979 --> 02:14:06,949
that's what we were using I'm gonna take

2037
02:14:03,380 --> 02:14:09,618
the p value and use that as is I don't

2038
02:14:06,948 --> 02:14:12,348
care about the D value because we're

2039
02:14:09,618 --> 02:14:15,618
stuffing that anyway but let's go ahead

2040
02:14:12,349 --> 02:14:19,998
and and and use that it's fine doesn't

2041
02:14:15,618 --> 02:14:23,029
matter and I'm gonna actually just stuff

2042
02:14:19,998 --> 02:14:25,038
those values you know directly in there

2043
02:14:23,029 --> 02:14:28,939
because I've got them there the lighting

2044
02:14:25,038 --> 02:14:33,618
textures thing here so I'm gonna set

2045
02:14:28,939 --> 02:14:35,178
that to dest and now we are actually

2046
02:14:33,618 --> 02:14:38,420
outputting the lighting value from here

2047
02:14:35,179 --> 02:14:40,309
and then I'm going to take the call at

2048
02:14:38,420 --> 02:14:49,429
the end and do the actual push lighting

2049
02:14:40,309 --> 02:14:56,150
just like the other one did so now the

2050
02:14:49,429 --> 02:14:57,979
exact same routine that we were using to

2051
02:14:56,149 --> 02:15:01,638
get correct results with rendering I'm

2052
02:14:57,979 --> 02:15:04,280
gonna use so here is the version that's

2053
02:15:01,639 --> 02:15:05,449
running through the old one here is the

2054
02:15:04,279 --> 02:15:08,359
version that's running through the new

2055
02:15:05,448 --> 02:15:14,328
one and there's absolutely no difference

2056
02:15:08,359 --> 02:15:16,788
between them right so something is super

2057
02:15:14,328 --> 02:15:19,038
messed up with our sampling with our

2058
02:15:16,788 --> 02:15:20,809
pulling from these values I mean I don't

2059
02:15:19,038 --> 02:15:22,969
see any way I could be making a mistake

2060
02:15:20,809 --> 02:15:25,239
up here now because it's literally doing

2061
02:15:22,969 --> 02:15:28,239
the exact same operation and if I

2062
02:15:25,238 --> 02:15:29,828
draw these directly I know that they're

2063
02:15:28,238 --> 02:15:34,419
correct I can see that they're correct

2064
02:15:29,828 --> 02:15:36,578
values so unless I'm really nuts and I'm

2065
02:15:34,420 --> 02:15:39,179
just missing some really obvious thing

2066
02:15:36,578 --> 02:15:39,179
that's going on here

2067
02:15:39,760 --> 02:15:45,429
this is gotta work right because if I

2068
02:15:42,248 --> 02:15:49,779
flip this to an if one if I just toggle

2069
02:15:45,429 --> 02:15:53,679
that right then all of a sudden when I

2070
02:15:49,779 --> 02:15:55,059
draw this thing it's right you know when

2071
02:15:53,679 --> 02:15:57,489
I draw these values they're right and

2072
02:15:55,059 --> 02:15:59,050
yet instead like those are the values

2073
02:15:57,488 --> 02:16:01,029
that should be interpolated right there

2074
02:15:59,050 --> 02:16:04,929
instead I just get garbage like complete

2075
02:16:01,029 --> 02:16:06,429
nonsense happening so where is the

2076
02:16:04,929 --> 02:16:08,800
nonsense coming from why am I getting

2077
02:16:06,429 --> 02:16:13,480
just just garbage there right why am I

2078
02:16:08,800 --> 02:16:18,099
getting totally arbitrary interpolation

2079
02:16:13,479 --> 02:16:19,238
happening what did we change you know

2080
02:16:18,099 --> 02:16:20,949
and this has been happening the entire

2081
02:16:19,238 --> 02:16:22,689
time so this has nothing to do with the

2082
02:16:20,948 --> 02:16:24,428
clear change nothing to do with any of

2083
02:16:22,689 --> 02:16:26,948
those this has been happening since we

2084
02:16:24,429 --> 02:16:30,489
made the initial modification at all

2085
02:16:26,948 --> 02:16:32,349
this has been happening so inside our

2086
02:16:30,488 --> 02:16:35,318
sunlight call or something you know this

2087
02:16:32,349 --> 02:16:37,960
is just working wrong and I have no idea

2088
02:16:35,318 --> 02:16:40,058
why the fragment light values that come

2089
02:16:37,959 --> 02:16:41,709
in here where we sample them off of our

2090
02:16:40,058 --> 02:16:47,709
two lighting textures that we're sending

2091
02:16:41,709 --> 02:16:49,659
down those are busted somehow so let's

2092
02:16:47,709 --> 02:16:55,799
take a look at what's happening one

2093
02:16:49,659 --> 02:16:59,648
thing we did change is way back when

2094
02:16:55,799 --> 02:17:07,659
when we set the render commands up right

2095
02:16:59,648 --> 02:17:09,879
these things here I you know that that

2096
02:17:07,659 --> 02:17:11,439
was something we changed and I don't

2097
02:17:09,879 --> 02:17:13,829
know whether that had anything to do

2098
02:17:11,439 --> 02:17:13,829
with it

2099
02:17:16,689 --> 02:17:22,809
I don't think there's any data from

2100
02:17:19,269 --> 02:17:23,590
there that we actually send down but

2101
02:17:22,808 --> 02:17:26,498
let's make sure

2102
02:17:23,590 --> 02:17:32,908
so those lighting texture informations

2103
02:17:26,498 --> 02:17:32,908
that we send down those come from the

2104
02:17:34,920 --> 02:17:46,779
from these right here this lighting

2105
02:17:38,498 --> 02:17:53,099
textures value and that's it's coming

2106
02:17:46,779 --> 02:17:53,099
from right here so these test textures

2107
02:17:53,760 --> 02:17:58,920
it's just a buffer we use it gets sent

2108
02:17:56,828 --> 02:18:02,968
down to the render system it picks it up

2109
02:17:58,920 --> 02:18:06,429
later when it when it wants to right

2110
02:18:02,968 --> 02:18:09,788
that's all that happens so in the OpenGL

2111
02:18:06,429 --> 02:18:12,369
layer we have those pieces of letting

2112
02:18:09,789 --> 02:18:14,819
information and they get sent down and

2113
02:18:12,369 --> 02:18:14,819
transferred

2114
02:18:25,279 --> 02:18:29,459
you know I guess one thing that's a

2115
02:18:27,449 --> 02:18:32,939
little bit odd there is that actually

2116
02:18:29,459 --> 02:18:35,789
gets sent down after the first time we

2117
02:18:32,939 --> 02:18:42,599
render is that that's just a that's one

2118
02:18:35,789 --> 02:18:44,699
frame lagged isn't it which is kind of a

2119
02:18:42,599 --> 02:18:47,340
separate problem I don't think that has

2120
02:18:44,699 --> 02:18:49,439
anything to do with the bud we're seeing

2121
02:18:47,340 --> 02:18:52,340
but it's worth noting that that should

2122
02:18:49,439 --> 02:18:55,340
really be queued for transfer prior to

2123
02:18:52,340 --> 02:18:55,340
the

2124
02:19:02,190 --> 02:19:07,370
prior to the actual drawing that occurs

2125
02:19:15,679 --> 02:19:23,359
meaning this is really in the wrong

2126
02:19:20,968 --> 02:19:23,358
place

2127
02:19:23,898 --> 02:19:37,228
technically it should be pushed before

2128
02:19:26,250 --> 02:19:40,228
everything else happens and you know if

2129
02:19:37,228 --> 02:19:43,858
we were to look at that I guess the way

2130
02:19:40,228 --> 02:19:45,750
I'd say it is you know that that call if

2131
02:19:43,859 --> 02:19:48,090
we're going to be honest with ourselves

2132
02:19:45,750 --> 02:19:52,648
this push lighting here should really

2133
02:19:48,090 --> 02:19:54,148
not be happening here at all the push

2134
02:19:52,648 --> 02:19:57,358
lighting call should actually be

2135
02:19:54,148 --> 02:20:00,299
occurring like at the head end right so

2136
02:19:57,359 --> 02:20:01,890
when it actually goes to start working

2137
02:20:00,299 --> 02:20:03,449
with this stuff and we enable the

2138
02:20:01,889 --> 02:20:18,119
lighting it should really push the

2139
02:20:03,450 --> 02:20:19,890
lighting at that point right it go right

2140
02:20:18,120 --> 02:20:21,660
because the Stu source is right and then

2141
02:20:19,889 --> 02:20:30,510
we fill them in later so that's that's

2142
02:20:21,659 --> 02:20:32,129
actually that's actually how that should

2143
02:20:30,510 --> 02:20:34,489
be working in order to not have a frame

2144
02:20:32,129 --> 02:20:34,489
of lag

2145
02:20:59,770 --> 02:21:10,579
again that should not really change that

2146
02:21:02,180 --> 02:21:12,649
okay well I am happy that I fixed the

2147
02:21:10,579 --> 02:21:16,059
problem I am NOT happy because that

2148
02:21:12,649 --> 02:21:16,059
should not have fixed the problem

2149
02:21:17,829 --> 02:21:24,110
those arrays should have been stable so

2150
02:21:22,040 --> 02:21:26,780
when we transfer them should have just

2151
02:21:24,110 --> 02:21:30,190
resulted in a frame of lag it should not

2152
02:21:26,780 --> 02:21:34,060
have changed what we're actually seeing

2153
02:21:30,190 --> 02:21:37,899
so I'm not gonna consider this okay yet

2154
02:21:34,059 --> 02:21:40,909
that's a happy accident I guess but

2155
02:21:37,899 --> 02:21:42,859
something is still wrong here and we

2156
02:21:40,909 --> 02:21:46,639
have to go figure out why that did that

2157
02:21:42,860 --> 02:21:49,610
because we must that would imply that

2158
02:21:46,639 --> 02:21:53,959
we're actually corrupting those arrays

2159
02:21:49,610 --> 02:21:55,280
or something at some point in the render

2160
02:21:53,959 --> 02:21:56,509
process so that the lighting information

2161
02:21:55,280 --> 02:22:00,650
got destroyed

2162
02:21:56,510 --> 02:22:02,780
but why like where is that happening so

2163
02:22:00,649 --> 02:22:08,899
we have to go we're not done yet

2164
02:22:02,780 --> 02:22:11,239
unfortunately we we found a bug we fixed

2165
02:22:08,899 --> 02:22:15,440
that bug it's there's still another bug

2166
02:22:11,239 --> 02:22:17,090
in here and it just happens that the

2167
02:22:15,440 --> 02:22:18,950
fact that we're sending them late was

2168
02:22:17,090 --> 02:22:21,020
exposing this other bug and sending them

2169
02:22:18,950 --> 02:22:22,880
the having them push at the right time

2170
02:22:21,020 --> 02:22:27,020
make us so that they aren't but that's

2171
02:22:22,879 --> 02:22:28,069
not really sufficient so let's push

2172
02:22:27,020 --> 02:22:30,440
forward and find out what the bug

2173
02:22:28,069 --> 02:22:31,909
actually was before I do that that I'm

2174
02:22:30,440 --> 02:22:34,810
going to clean out the stuff that was

2175
02:22:31,909 --> 02:22:34,809
happening here

2176
02:22:37,629 --> 02:22:41,670
because we don't care about this now

2177
02:22:51,130 --> 02:22:55,751
so let's see if this works properly now

2178
02:22:56,380 --> 02:23:13,640
with everything running as it normally

2179
02:22:58,399 --> 02:23:25,341
does so not quite so this valid part

2180
02:23:13,640 --> 02:23:27,050
still seems to be problematic for us and

2181
02:23:25,341 --> 02:23:29,091
you know that makes a little bit of

2182
02:23:27,050 --> 02:23:31,609
sense because it may be that since not

2183
02:23:29,091 --> 02:23:39,171
everyone gets light every frame we can't

2184
02:23:31,610 --> 02:23:41,181
really use that fact directly but here

2185
02:23:39,171 --> 02:23:44,871
is the lighting as it is you know

2186
02:23:41,181 --> 02:23:48,371
supposed to be running obviously and if

2187
02:23:44,870 --> 02:23:48,370
we see that at actual frame rate

2188
02:23:57,450 --> 02:24:02,650
you know we're in reasonable shape here

2189
02:23:59,890 --> 02:24:06,779
right that looks like the lighting used

2190
02:24:02,649 --> 02:24:06,779
to look for the most part

2191
02:24:20,489 --> 02:24:28,899
so the question here is why is it that

2192
02:24:25,450 --> 02:24:33,900
those light values get corrupted on the

2193
02:24:28,899 --> 02:24:33,899
round trip what was happening there

2194
02:24:34,649 --> 02:24:43,359
those late values should never be

2195
02:24:37,030 --> 02:24:46,509
touched by anyone right

2196
02:24:43,360 --> 02:24:46,509
[Music]

2197
02:24:53,889 --> 02:24:59,789
I just don't see where that was coming

2198
02:24:56,799 --> 02:24:59,789
from so if

2199
02:25:12,159 --> 02:25:23,521
all right that is definitely an owl of

2200
02:25:16,629 --> 02:25:27,699
shame right there oh man that was brutal

2201
02:25:23,521 --> 02:25:29,680
so hopefully everyone realized it at the

2202
02:25:27,700 --> 02:25:33,880
same time I did now that we had the

2203
02:25:29,680 --> 02:25:36,970
happy accident of figuring out that it

2204
02:25:33,879 --> 02:25:39,429
was because of a frame of lag so now I

2205
02:25:36,969 --> 02:25:45,939
know exactly what's happening and that

2206
02:25:39,430 --> 02:25:49,899
is pretty baller so what was happening

2207
02:25:45,940 --> 02:25:51,340
is that originally and maybe I should

2208
02:25:49,899 --> 02:25:52,899
draw this out on the blackboard but I'm

2209
02:25:51,340 --> 02:25:56,319
just gonna assume that everyone kind of

2210
02:25:52,899 --> 02:25:58,090
sees it now but we'll go to the Q&amp;A and

2211
02:25:56,319 --> 02:25:58,959
if anyone wants me to draw it out in the

2212
02:25:58,090 --> 02:26:03,329
blackboard I'll draw it on that

2213
02:25:58,959 --> 02:26:08,759
blackboard so what happened is

2214
02:26:03,329 --> 02:26:12,399
originally we were just assigning IDs

2215
02:26:08,760 --> 02:26:15,069
persistently so that when something got

2216
02:26:12,399 --> 02:26:21,549
a light index assigned that light index

2217
02:26:15,069 --> 02:26:24,159
was assigned the same every frame so the

2218
02:26:21,549 --> 02:26:29,469
fact that we were sending down the light

2219
02:26:24,159 --> 02:26:31,149
data from this frame for use on the next

2220
02:26:29,469 --> 02:26:33,909
frame was fine

2221
02:26:31,149 --> 02:26:36,430
because all of the quads were going to

2222
02:26:33,909 --> 02:26:40,090
use the same light indices as they would

2223
02:26:36,430 --> 02:26:41,590
have had the previous frame because

2224
02:26:40,090 --> 02:26:44,739
remember we were persisting the light

2225
02:26:41,590 --> 02:26:46,989
indices when we switched from persisting

2226
02:26:44,739 --> 02:26:49,449
light indices to persisting light values

2227
02:26:46,989 --> 02:26:52,209
it means that every quad potentially

2228
02:26:49,450 --> 02:26:54,280
gets a different light index every frame

2229
02:26:52,209 --> 02:26:55,569
because it doesn't matter what index is

2230
02:26:54,280 --> 02:26:59,730
assigned they just get assigned linearly

2231
02:26:55,569 --> 02:27:02,529
in the order they're pushed so now

2232
02:26:59,729 --> 02:27:05,829
sending the light data from a frame

2233
02:27:02,530 --> 02:27:08,141
behind right so using the light data

2234
02:27:05,829 --> 02:27:09,851
from the previous frame is wrong because

2235
02:27:08,140 --> 02:27:11,920
all of the quads are looking at

2236
02:27:09,851 --> 02:27:13,150
different light index positions as to

2237
02:27:11,920 --> 02:27:14,739
what they were assigned this frame

2238
02:27:13,149 --> 02:27:15,969
because what they were assigned last

2239
02:27:14,739 --> 02:27:18,069
frame is not what they were assigned

2240
02:27:15,969 --> 02:27:21,750
this frame or go they pick up lighting

2241
02:27:18,069 --> 02:27:21,750
from some totally unrelated quad

2242
02:27:23,149 --> 02:27:27,170
I don't know if you guys remember this

2243
02:27:25,459 --> 02:27:29,510
but we've talked about this before and

2244
02:27:27,170 --> 02:27:30,591
occasion some time people have asked me

2245
02:27:29,511 --> 02:27:33,021
what are the hardest bugs

2246
02:27:30,591 --> 02:27:34,521
I believe you can probably go back to

2247
02:27:33,021 --> 02:27:36,920
the archives and find me saying

2248
02:27:34,521 --> 02:27:38,811
something literally that in this index

2249
02:27:36,920 --> 02:27:40,851
is not lining up is one of the biggest

2250
02:27:38,810 --> 02:27:42,709
bugs that you have it take a long time

2251
02:27:40,851 --> 02:27:44,420
to find because it's hard to look at

2252
02:27:42,709 --> 02:27:46,459
them and debug them properly well ladies

2253
02:27:44,420 --> 02:27:48,200
and gentleman guess what that was

2254
02:27:46,459 --> 02:27:51,800
literally like an hour of debugging time

2255
02:27:48,200 --> 02:27:53,960
trying to nail that down right if you

2256
02:27:51,800 --> 02:27:55,341
take out the time that I went and

2257
02:27:53,959 --> 02:27:56,779
decided to fix the clearing stuff

2258
02:27:55,341 --> 02:27:58,940
because I wanted that to be fixed and

2259
02:27:56,780 --> 02:28:06,561
just look at the other part of it well

2260
02:27:58,940 --> 02:28:08,989
there you go all right so let's go ahead

2261
02:28:06,560 --> 02:28:11,209
and go to the QA we still got more

2262
02:28:08,989 --> 02:28:13,630
lighting work to do but we're we're over

2263
02:28:11,209 --> 02:28:13,630
time now

2264
02:28:37,829 --> 02:28:44,129
on topic questions please so on the

2265
02:28:41,469 --> 02:28:44,129
stuff we're doing today

2266
02:29:20,719 --> 02:29:24,989
let's see here

2267
02:29:23,399 --> 02:29:26,399
perhaps the perspective the game would

2268
02:29:24,989 --> 02:29:27,810
make this a bit awkward to do but are

2269
02:29:26,399 --> 02:29:30,569
you planning to have water in the game

2270
02:29:27,810 --> 02:29:32,789
with reflections since waves and shaders

2271
02:29:30,569 --> 02:29:36,569
and all that cool stuff or sine waves

2272
02:29:32,790 --> 02:29:41,220
and shaders and uncle stuff no I don't

2273
02:29:36,569 --> 02:29:43,739
think we would be doing that I haven't

2274
02:29:41,219 --> 02:29:46,229
thought about it too much but I do think

2275
02:29:43,739 --> 02:29:48,030
that you're kind of hitting the nail on

2276
02:29:46,229 --> 02:29:49,500
the head there that spending a lot of

2277
02:29:48,030 --> 02:29:51,630
time implanting reflections would

2278
02:29:49,500 --> 02:29:55,139
probably be wasted because it's a lot of

2279
02:29:51,629 --> 02:29:59,489
work to make reflections work properly

2280
02:29:55,139 --> 02:30:02,909
in a game you know there's a lot of sort

2281
02:29:59,489 --> 02:30:04,170
of additional rendering work you have to

2282
02:30:02,909 --> 02:30:06,180
do to kind of get that you have to

2283
02:30:04,170 --> 02:30:08,310
render from different direction and map

2284
02:30:06,180 --> 02:30:12,271
that directional render on to services

2285
02:30:08,310 --> 02:30:14,340
and so on so forth I and so for a game

2286
02:30:12,271 --> 02:30:17,690
like this that's top-down where it would

2287
02:30:14,340 --> 02:30:20,819
mostly be water reflecting up at us I

2288
02:30:17,690 --> 02:30:23,790
just don't think it's gonna be worth it

2289
02:30:20,819 --> 02:30:26,760
so we probably wouldn't do that unless

2290
02:30:23,790 --> 02:30:28,440
there's some other thing that we

2291
02:30:26,760 --> 02:30:38,130
encounter along the way that makes that

2292
02:30:28,440 --> 02:30:40,530
more sensible Oh pith no said blackboard

2293
02:30:38,129 --> 02:30:50,329
please so I'm going to draw it on the

2294
02:30:40,530 --> 02:30:50,329
blackboard so here's what was happening

2295
02:30:51,260 --> 02:30:57,450
before and then I'll show you why it

2296
02:30:54,659 --> 02:31:05,909
broke so previously what was happening

2297
02:30:57,450 --> 02:31:07,740
is we've got light results okay that's

2298
02:31:05,909 --> 02:31:09,180
light data zero light data one that's

2299
02:31:07,739 --> 02:31:11,489
what gets passed down to the renderer

2300
02:31:09,180 --> 02:31:12,720
and used so all of the fussing that we

2301
02:31:11,489 --> 02:31:15,810
do with ray casting and all that stuff

2302
02:31:12,719 --> 02:31:19,289
obviously all of that is just to produce

2303
02:31:15,810 --> 02:31:20,579
a single block of data and well in our

2304
02:31:19,290 --> 02:31:21,960
case we keep it in two separate blocks

2305
02:31:20,579 --> 02:31:24,569
but it doesn't matter they could be

2306
02:31:21,959 --> 02:31:27,419
contiguous in just one blob of data that

2307
02:31:24,569 --> 02:31:29,039
says the position color and direction of

2308
02:31:27,420 --> 02:31:31,110
the lighting information that we're

2309
02:31:29,040 --> 02:31:32,910
going to use to render the scene once we

2310
02:31:31,110 --> 02:31:36,239
actually go to make pixels on this

2311
02:31:32,909 --> 02:31:39,360
right so all of that lighting result

2312
02:31:36,239 --> 02:31:41,369
data is the thing that we actually need

2313
02:31:39,360 --> 02:31:43,260
to compute and how we compute it is

2314
02:31:41,370 --> 02:31:44,970
largely irrelevant for purposes of the

2315
02:31:43,260 --> 02:31:46,920
render the render just knows somebody

2316
02:31:44,969 --> 02:31:50,819
figured this out and now we're going to

2317
02:31:46,920 --> 02:31:54,270
use it right so what we need it is quads

2318
02:31:50,819 --> 02:31:57,478
out in the world that need to get

2319
02:31:54,270 --> 02:32:03,390
rendered have light points on them that

2320
02:31:57,478 --> 02:32:05,670
have to map into this buffer right so

2321
02:32:03,389 --> 02:32:07,109
each point on the quad that we're going

2322
02:32:05,670 --> 02:32:09,478
to sample lighting from because remember

2323
02:32:07,110 --> 02:32:11,040
any point in the quad we draw from a

2324
02:32:09,478 --> 02:32:13,978
bunch of sample points to figure out

2325
02:32:11,040 --> 02:32:15,570
what its color should be so when we draw

2326
02:32:13,978 --> 02:32:17,699
from these sample points to figure out

2327
02:32:15,569 --> 02:32:19,739
what color is we're looking into these

2328
02:32:17,700 --> 02:32:21,990
light results and the way that we're

2329
02:32:19,739 --> 02:32:24,360
doing that is by an index so there's

2330
02:32:21,989 --> 02:32:27,600
literally a value that comes with the

2331
02:32:24,360 --> 02:32:30,239
CLOB that says hey I've got four points

2332
02:32:27,600 --> 02:32:32,640
and they start at point 37 or something

2333
02:32:30,239 --> 02:32:34,379
right if this is light 37 so the shader

2334
02:32:32,639 --> 02:32:37,799
goes in and looks and goes okay from

2335
02:32:34,379 --> 02:32:40,170
point 37 I got to do for life so 37 38

2336
02:32:37,799 --> 02:32:42,629
39 and 40 I'm gonna look at and that's

2337
02:32:40,170 --> 02:32:44,879
what we've got okay very straightforward

2338
02:32:42,629 --> 02:32:48,389
at that point not a lot of weirdness

2339
02:32:44,879 --> 02:32:51,688
there that's just all of it happens now

2340
02:32:48,389 --> 02:32:53,909
our bug comes from the fact that this

2341
02:32:51,689 --> 02:32:56,939
particular piece of information the

2342
02:32:53,909 --> 02:32:59,728
index has to get assigned from somewhere

2343
02:32:56,939 --> 02:33:01,439
and in the old way what was happening is

2344
02:32:59,728 --> 02:33:04,529
that somewhere was getting assigned

2345
02:33:01,439 --> 02:33:09,300
stabili so every time you did a push

2346
02:33:04,530 --> 02:33:14,189
cube it was having a light index storage

2347
02:33:09,299 --> 02:33:19,170
value right that was persisting across

2348
02:33:14,189 --> 02:33:23,040
those pushes that said where it was so

2349
02:33:19,170 --> 02:33:25,829
on frame 0 this quad got these lighting

2350
02:33:23,040 --> 02:33:27,899
values on frame 1 it got these lighting

2351
02:33:25,829 --> 02:33:30,209
values again on frame 2 it got these

2352
02:33:27,898 --> 02:33:32,819
lighting values again the index was the

2353
02:33:30,209 --> 02:33:34,228
thing that persisted now the problem is

2354
02:33:32,819 --> 02:33:36,119
we know this was only going to be a

2355
02:33:34,228 --> 02:33:39,269
temporary solution without more work

2356
02:33:36,120 --> 02:33:40,979
because once we start moving around the

2357
02:33:39,270 --> 02:33:43,290
world we knew that we would have to

2358
02:33:40,978 --> 02:33:44,519
assign those indices dynamic dynamically

2359
02:33:43,290 --> 02:33:46,460
because there's only a certain amount of

2360
02:33:44,520 --> 02:33:48,319
room in our light result buffer

2361
02:33:46,459 --> 02:33:51,559
and so if there's a million entities in

2362
02:33:48,319 --> 02:33:53,629
the world we can only store you know ten

2363
02:33:51,559 --> 02:33:55,359
thousand of them or eight thousand of

2364
02:33:53,629 --> 02:33:58,549
them or something I don't know how many

2365
02:33:55,360 --> 02:34:00,979
we're gonna end up keeping in our local

2366
02:33:58,549 --> 02:34:02,929
light result buffer just in terms of

2367
02:34:00,978 --> 02:34:05,449
processing power wise and storage wise

2368
02:34:02,930 --> 02:34:07,520
and all that sort of stuff right so what

2369
02:34:05,450 --> 02:34:09,530
has to happen is those light indices had

2370
02:34:07,520 --> 02:34:11,600
to get allocated dynamically so that

2371
02:34:09,530 --> 02:34:13,159
when Andy came out of the lighting

2372
02:34:11,600 --> 02:34:14,630
solution it wasn't needing to be

2373
02:34:13,159 --> 02:34:15,799
computed lighting wise anymore it

2374
02:34:14,629 --> 02:34:18,439
wouldn't take up space

2375
02:34:15,799 --> 02:34:20,899
in the lighting solution however what I

2376
02:34:18,440 --> 02:34:23,239
realized was the better way to do that

2377
02:34:20,899 --> 02:34:25,940
would be just to store the light results

2378
02:34:23,239 --> 02:34:28,190
themselves back in the entity so that

2379
02:34:25,940 --> 02:34:31,640
led to the new way of doing things which

2380
02:34:28,190 --> 02:34:35,149
was instead of preserving this light

2381
02:34:31,639 --> 02:34:38,059
index we would just say oh okay at the

2382
02:34:35,149 --> 02:34:43,520
start of the frame let's go into the

2383
02:34:38,059 --> 02:34:47,510
entity now and grab the block of results

2384
02:34:43,520 --> 02:34:49,069
out of the entity place that into

2385
02:34:47,510 --> 02:34:51,530
wherever we want

2386
02:34:49,069 --> 02:34:53,510
so as we're just rendering we just go

2387
02:34:51,530 --> 02:34:55,159
through in any as we encounter entities

2388
02:34:53,510 --> 02:34:57,170
we just sort of push them on so they

2389
02:34:55,159 --> 02:35:00,950
just kind of get pushed on in any order

2390
02:34:57,170 --> 02:35:04,040
we want as we render grab the block of

2391
02:35:00,950 --> 02:35:05,540
results place it in here before I'm the

2392
02:35:04,040 --> 02:35:07,400
lighting computation and then when we're

2393
02:35:05,540 --> 02:35:10,550
done we'll write it back to the entity

2394
02:35:07,399 --> 02:35:12,319
so now we don't have to worry about

2395
02:35:10,549 --> 02:35:14,209
latencies anymore the light in the sees

2396
02:35:12,319 --> 02:35:16,399
of a quad or just arbitrary every frame

2397
02:35:14,209 --> 02:35:18,978
they change and we just know that the

2398
02:35:16,399 --> 02:35:22,219
results themselves are mapped back into

2399
02:35:18,978 --> 02:35:24,439
the correct position right and we wrote

2400
02:35:22,219 --> 02:35:28,849
this perfectly the first time we did it

2401
02:35:24,440 --> 02:35:31,550
right but there was a bug the bug was

2402
02:35:28,850 --> 02:35:35,149
that when we were rendering frames zero

2403
02:35:31,549 --> 02:35:39,409
one two three four five six what was

2404
02:35:35,149 --> 02:35:41,959
actually happening was that on this

2405
02:35:39,409 --> 02:35:44,478
frame we would compute light results

2406
02:35:41,959 --> 02:35:46,849
we'll call those are we were cute light

2407
02:35:44,478 --> 02:35:48,679
results and then we would use the light

2408
02:35:46,850 --> 02:35:50,479
results in our actual rendering from the

2409
02:35:48,680 --> 02:35:52,489
previous frame that means on frame zero

2410
02:35:50,478 --> 02:35:53,510
the lighting was garbage we just

2411
02:35:52,489 --> 02:35:56,299
couldn't see it because there was

2412
02:35:53,510 --> 02:35:58,610
nothing on frame zero then on frame one

2413
02:35:56,299 --> 02:36:00,289
what we would do is we would pass by now

2414
02:35:58,610 --> 02:36:02,630
we would get the lighting in

2415
02:36:00,290 --> 02:36:05,029
from the previous frame we would compute

2416
02:36:02,629 --> 02:36:07,369
a new lighting information right and

2417
02:36:05,029 --> 02:36:09,579
then we would render with the previous

2418
02:36:07,370 --> 02:36:14,810
frames lighting information right

2419
02:36:09,579 --> 02:36:16,129
previous previous so every frame we were

2420
02:36:14,809 --> 02:36:18,500
rendering with the previous frames

2421
02:36:16,129 --> 02:36:20,179
lighting information that was because we

2422
02:36:18,500 --> 02:36:22,818
pushed lighting on at the end of the

2423
02:36:20,180 --> 02:36:24,318
frame and that means that when it would

2424
02:36:22,818 --> 02:36:26,689
read through the render buffer to

2425
02:36:24,318 --> 02:36:28,728
execute all of the commands he had

2426
02:36:26,689 --> 02:36:30,409
already executed all of our render

2427
02:36:28,728 --> 02:36:34,728
commands before ever updating the

2428
02:36:30,409 --> 02:36:36,170
lighting textures so the fix or I

2429
02:36:34,728 --> 02:36:38,568
shouldn't let me describe the exact bug

2430
02:36:36,170 --> 02:36:40,309
first so the bug is that hey the

2431
02:36:38,568 --> 02:36:42,170
lighting indices aren't stable anymore

2432
02:36:40,309 --> 02:36:46,100
it's the results that we're preserving

2433
02:36:42,170 --> 02:36:48,020
not the indices so now using the

2434
02:36:46,100 --> 02:36:50,750
previous frame doesn't work

2435
02:36:48,020 --> 02:36:53,510
none of the indices line up all of the

2436
02:36:50,750 --> 02:36:56,299
entities quads have moved where they're

2437
02:36:53,510 --> 02:36:57,800
looking in the light buffer so they're

2438
02:36:56,299 --> 02:37:00,139
not looking in the same place they were

2439
02:36:57,799 --> 02:37:02,028
in the previous frame that just led to

2440
02:37:00,139 --> 02:37:03,799
completely random lighting results it

2441
02:37:02,029 --> 02:37:05,420
was grabbing lights from all kinds of

2442
02:37:03,799 --> 02:37:07,309
random places that had nothing to do

2443
02:37:05,420 --> 02:37:09,620
with where the lighting for this entity

2444
02:37:07,309 --> 02:37:11,510
was actually stored on this frame so the

2445
02:37:09,620 --> 02:37:14,090
only thing we added to fix it was to

2446
02:37:11,510 --> 02:37:15,590
stop doing this actually push down the

2447
02:37:14,090 --> 02:37:18,439
light information we want to use on this

2448
02:37:15,590 --> 02:37:22,930
frame on this frame and everything's

2449
02:37:18,439 --> 02:37:22,930
fixed does that make sense

2450
02:37:42,469 --> 02:37:46,438
what time of the free scene we're not

2451
02:37:45,030 --> 02:37:49,710
doing a hand made here tomorrow we're

2452
02:37:46,439 --> 02:37:53,100
off tomorrow sorry so it would be next

2453
02:37:49,709 --> 02:37:57,179
week usually the pre stream starts

2454
02:37:53,100 --> 02:38:01,409
around 10 minutes prior to noon

2455
02:37:57,180 --> 02:38:03,300
something like that with all of us so we

2456
02:38:01,409 --> 02:38:05,700
have to call the push lighting twice for

2457
02:38:03,299 --> 02:38:07,739
a solution or there is another cell

2458
02:38:05,700 --> 02:38:11,189
no we don't to call it twice all we have

2459
02:38:07,739 --> 02:38:15,689
to do is we just have to push at the

2460
02:38:11,189 --> 02:38:18,689
beginning of the frame so remember the

2461
02:38:15,689 --> 02:38:22,020
the rendering command buffer is just a

2462
02:38:18,689 --> 02:38:23,970
buffer of things to do so we can just

2463
02:38:22,020 --> 02:38:25,680
push the command that says update the

2464
02:38:23,969 --> 02:38:27,840
lighting textures as the very first

2465
02:38:25,680 --> 02:38:29,398
command which is what we do now and even

2466
02:38:27,840 --> 02:38:31,559
though we haven't filled in the lighting

2467
02:38:29,398 --> 02:38:33,359
information yet that's okay because all

2468
02:38:31,559 --> 02:38:35,519
we're doing is pushing the pointers on

2469
02:38:33,360 --> 02:38:37,229
that say where to grab it from then

2470
02:38:35,520 --> 02:38:39,329
we're doing all of the other pushes

2471
02:38:37,228 --> 02:38:41,039
computing the lighting and then we're

2472
02:38:39,329 --> 02:38:42,898
issuing that whole render command buffer

2473
02:38:41,040 --> 02:38:44,970
out to the renderer so we don't have to

2474
02:38:42,898 --> 02:38:46,500
do anything at all to fix the bug other

2475
02:38:44,969 --> 02:38:48,029
than just move the push call at the

2476
02:38:46,500 --> 02:38:48,719
beginning that's it we don't have to

2477
02:38:48,030 --> 02:38:51,420
change anything

2478
02:38:48,719 --> 02:38:54,179
so it's just fixed now it's it's correct

2479
02:38:51,420 --> 02:38:55,829
there's nothing there's nothing else

2480
02:38:54,180 --> 02:38:59,850
that has to happen right that's just

2481
02:38:55,829 --> 02:39:02,340
that's just what's going on right so

2482
02:38:59,850 --> 02:39:04,409
yeah no other no other changes are

2483
02:39:02,340 --> 02:39:09,719
actually necessary there and if we go

2484
02:39:04,409 --> 02:39:11,489
back and look at how we have this before

2485
02:39:09,719 --> 02:39:13,099
really this is the only part now that we

2486
02:39:11,489 --> 02:39:15,239
have to fix which is the fact that

2487
02:39:13,100 --> 02:39:17,760
there's a lot of people who don't get

2488
02:39:15,239 --> 02:39:20,129
lighting on a particular frame and so

2489
02:39:17,760 --> 02:39:21,870
that has to be fixed because we can't

2490
02:39:20,129 --> 02:39:23,369
use those directional values anymore as

2491
02:39:21,870 --> 02:39:25,760
as indication that you don't have

2492
02:39:23,370 --> 02:39:25,760
lighting

2493
02:39:31,000 --> 02:39:34,898
the seltzer I know you said it's a

2494
02:39:32,709 --> 02:39:36,429
common class of bug but do you have any

2495
02:39:34,898 --> 02:39:37,629
thoughts on how you might avoid a bug

2496
02:39:36,430 --> 02:39:46,029
like this in the future

2497
02:39:37,629 --> 02:39:48,278
not really so the the only thing I know

2498
02:39:46,029 --> 02:39:51,939
of that catches bugs like this and makes

2499
02:39:48,279 --> 02:39:53,319
them easier to debug was a program that

2500
02:39:51,939 --> 02:39:56,949
I wrote at rad game tools called

2501
02:39:53,318 --> 02:39:59,189
mustache which is designed to figure out

2502
02:39:56,949 --> 02:40:02,710
complex problems like this

2503
02:39:59,189 --> 02:40:09,578
unfortunately no debugger that I know of

2504
02:40:02,709 --> 02:40:11,259
has this capability so until a program

2505
02:40:09,578 --> 02:40:13,000
like that becomes more standard ly

2506
02:40:11,260 --> 02:40:16,510
integrated into debugging I don't know

2507
02:40:13,000 --> 02:40:18,398
that there is another way to if I knew

2508
02:40:16,510 --> 02:40:21,100
of a better way to keep bugs like this

2509
02:40:18,398 --> 02:40:24,129
from happening I wouldn't I would have

2510
02:40:21,100 --> 02:40:25,960
done it but the bottom line is sometimes

2511
02:40:24,129 --> 02:40:29,228
when you're doing finicky stuff like

2512
02:40:25,959 --> 02:40:31,688
this you just have a situation where you

2513
02:40:29,228 --> 02:40:33,549
can't avoid having indices like this you

2514
02:40:31,689 --> 02:40:35,318
know and you try to keep it to a minimum

2515
02:40:33,549 --> 02:40:37,478
you know I don't go introducing

2516
02:40:35,318 --> 02:40:38,978
indirection willy-nilly in fact I try to

2517
02:40:37,478 --> 02:40:40,238
keep things as direct as possible for

2518
02:40:38,978 --> 02:40:42,789
this very reason the more indirection

2519
02:40:40,238 --> 02:40:45,908
you have the more places there are for

2520
02:40:42,790 --> 02:40:48,100
those in directions to be wrong right so

2521
02:40:45,908 --> 02:40:50,199
it's definitely the case that you know

2522
02:40:48,100 --> 02:40:52,210
in general what I'm programming I am

2523
02:40:50,199 --> 02:40:53,199
actively trying to eliminate the places

2524
02:40:52,209 --> 02:40:55,719
where you can have the kind of bugs I

2525
02:40:53,199 --> 02:40:57,880
don't always know of or there may not

2526
02:40:55,719 --> 02:41:00,818
always exist a methodology for a

2527
02:40:57,879 --> 02:41:03,459
particular class of problems that can

2528
02:41:00,818 --> 02:41:07,059
get away with you know no indices or no

2529
02:41:03,459 --> 02:41:08,198
no sort of frame lag no you know and so

2530
02:41:07,059 --> 02:41:10,180
you tend to see this kind of thing

2531
02:41:08,199 --> 02:41:12,489
happen in complex rendering situations

2532
02:41:10,180 --> 02:41:16,420
like lighting where you're doing a lot

2533
02:41:12,488 --> 02:41:19,618
of what's the word I'm looking for where

2534
02:41:16,420 --> 02:41:23,290
you're doing sort of a lot of complex

2535
02:41:19,619 --> 02:41:25,869
frame to frame correspondence and a lot

2536
02:41:23,290 --> 02:41:28,090
of things that are using you know in the

2537
02:41:25,869 --> 02:41:29,439
C's and that's where stuff you end up in

2538
02:41:28,090 --> 02:41:30,578
situations where it's not a lot you can

2539
02:41:29,439 --> 02:41:32,170
really do about it you're gonna have

2540
02:41:30,578 --> 02:41:32,559
these bugs and you just gotta grin and

2541
02:41:32,170 --> 02:41:34,930
bear it

2542
02:41:32,559 --> 02:41:37,469
or grin and bear it or whatever that

2543
02:41:34,930 --> 02:41:37,470
phrase is

2544
02:41:43,908 --> 02:41:49,559
Val Basu this frame latency is bad if we

2545
02:41:46,828 --> 02:41:52,978
would make this a multi thread system

2546
02:41:49,559 --> 02:41:56,728
nope really there's no we're not doing

2547
02:41:52,978 --> 02:42:03,748
frame latency weird we're doing it on

2548
02:41:56,728 --> 02:42:06,059
the same frame are you allowed to

2549
02:42:03,748 --> 02:42:11,600
elaborate more on how moustache works

2550
02:42:06,059 --> 02:42:11,600
exactly I don't know

2551
02:42:21,510 --> 02:42:31,469
so you can't use the fourth lines of

2552
02:42:27,250 --> 02:42:42,370
light and on the sixth line the light

2553
02:42:31,469 --> 02:42:44,429
stops I'm not sure and storm bus I don't

2554
02:42:42,370 --> 02:42:55,780
understand the question can you

2555
02:42:44,430 --> 02:42:59,399
elaborate on that maybe I should go in

2556
02:42:55,780 --> 02:42:59,400
and while we're at it fix that

2557
02:43:23,500 --> 02:43:27,879
there we go so now we can look at our

2558
02:43:25,359 --> 02:43:43,510
lighting solution which I wanted to make

2559
02:43:27,879 --> 02:43:50,039
sure was still possible to do okay is

2560
02:43:43,510 --> 02:43:58,318
that it for the questions do we have any

2561
02:43:50,040 --> 02:43:58,319
question on the lighting

2562
02:44:31,319 --> 02:44:35,340
because what are the performance on that

2563
02:44:33,000 --> 02:44:37,649
well the big level is still problematic

2564
02:44:35,340 --> 02:44:39,479
performance wise I mean we we need to do

2565
02:44:37,649 --> 02:44:48,959
we were in the middle of optimizing the

2566
02:44:39,479 --> 02:44:51,270
lighting so we we still have a lot of

2567
02:44:48,959 --> 02:45:00,719
work to do before we're finished with

2568
02:44:51,271 --> 02:45:08,280
that optimization so if we let it create

2569
02:45:00,719 --> 02:45:09,989
a larger level it appears like the

2570
02:45:08,280 --> 02:45:12,390
lighting is fast enough now but it's not

2571
02:45:09,989 --> 02:45:14,940
actually because if you move to

2572
02:45:12,389 --> 02:45:16,979
someplace where more of stuff like more

2573
02:45:14,940 --> 02:45:18,720
screens are kind of in that visible set

2574
02:45:16,979 --> 02:45:23,189
you can see that the light the framerate

2575
02:45:18,719 --> 02:45:24,959
gets gets bad right so you know you can

2576
02:45:23,190 --> 02:45:26,579
kind of see the subset of the region for

2577
02:45:24,959 --> 02:45:28,139
its getting computed so this this white

2578
02:45:26,579 --> 02:45:32,010
area here is outside the lighting

2579
02:45:28,139 --> 02:45:33,899
computation boundary and this stuff is

2580
02:45:32,010 --> 02:45:36,389
inside the lighting computation boundary

2581
02:45:33,899 --> 02:45:39,510
so you can see what's getting lit and

2582
02:45:36,389 --> 02:45:42,959
what's not and you know like I said the

2583
02:45:39,510 --> 02:45:45,360
lighting is getting there we have to go

2584
02:45:42,959 --> 02:45:46,679
in and start the world-building process

2585
02:45:45,360 --> 02:45:49,829
which is what we'll do right after

2586
02:45:46,680 --> 02:45:53,670
lighting and then when points are

2587
02:45:49,829 --> 02:45:57,239
distributed more evenly across these

2588
02:45:53,670 --> 02:46:00,360
pieces then I think we'll get a much

2589
02:45:57,239 --> 02:46:02,190
better quality of lighting as well

2590
02:46:00,360 --> 02:46:05,280
because right now we're not distributing

2591
02:46:02,190 --> 02:46:06,600
our lighting points in a sane way to you

2592
02:46:05,280 --> 02:46:10,110
know these I think we can get rid of

2593
02:46:06,600 --> 02:46:13,559
these seams for example in a number of

2594
02:46:10,110 --> 02:46:14,850
ways and so on but so you know it's it's

2595
02:46:13,559 --> 02:46:17,579
definitely getting there it's just we've

2596
02:46:14,850 --> 02:46:20,550
got to get the speed up and there's a

2597
02:46:17,579 --> 02:46:21,899
lot of ways we could do that and so

2598
02:46:20,549 --> 02:46:24,090
we're gonna we're gonna take a look at a

2599
02:46:21,899 --> 02:46:27,139
couple more things but that's that's

2600
02:46:24,090 --> 02:46:27,139
really where we're at at the moment

2601
02:46:36,690 --> 02:46:43,239
Irma's can you implement more light

2602
02:46:38,920 --> 02:46:44,950
sources later I will actually start with

2603
02:46:43,239 --> 02:46:49,030
will you add toe mapping at some point

2604
02:46:44,950 --> 02:46:52,990
probably not tone mapping I wouldn't

2605
02:46:49,030 --> 02:46:57,610
success expect we may put a bloom filter

2606
02:46:52,989 --> 02:46:59,170
in them storm blasts can you implement

2607
02:46:57,610 --> 02:47:01,450
more light sources later like holding a

2608
02:46:59,170 --> 02:47:04,840
torch or other sources like actually

2609
02:47:01,450 --> 02:47:07,030
right now that is already happening so

2610
02:47:04,840 --> 02:47:09,670
you can add as many light source as you

2611
02:47:07,030 --> 02:47:13,150
want in fact the little guys are all

2612
02:47:09,670 --> 02:47:14,620
holding lights right now that are

2613
02:47:13,149 --> 02:47:17,500
getting fully computed you can actually

2614
02:47:14,620 --> 02:47:21,160
see that they're getting their full the

2615
02:47:17,500 --> 02:47:22,390
full treatment you know you can see for

2616
02:47:21,159 --> 02:47:24,390
example over here where there's a

2617
02:47:22,390 --> 02:47:26,440
ceiling you can see the lighting

2618
02:47:24,390 --> 02:47:29,440
reflecting off the ceiling of those

2619
02:47:26,440 --> 02:47:33,040
little guys moving around you can see

2620
02:47:29,440 --> 02:47:35,739
them lighting up this red wall etc etc

2621
02:47:33,040 --> 02:47:40,990
right so those are low low held light

2622
02:47:35,739 --> 02:47:43,479
sources that's why they don't have as

2623
02:47:40,989 --> 02:47:44,771
much range on the ground as this guy

2624
02:47:43,479 --> 02:47:45,909
because this guy's up higher as you move

2625
02:47:44,771 --> 02:47:49,750
the light source up higher it gets a

2626
02:47:45,909 --> 02:47:51,250
bigger spread right so yeah we already

2627
02:47:49,750 --> 02:47:53,140
have as many you can throw as many

2628
02:47:51,250 --> 02:47:54,969
lights in as you want this solution

2629
02:47:53,140 --> 02:47:56,709
doesn't have a fixed number of lights

2630
02:47:54,969 --> 02:48:00,029
you can have arbitrary number of lights

2631
02:47:56,709 --> 02:48:00,029
and we'll be playing with that later

2632
02:48:01,200 --> 02:48:05,120
[Music]

2633
02:48:13,659 --> 02:48:19,068
not exactly on topic but you don't use

2634
02:48:16,279 --> 02:48:27,350
your attempt in the for-loop in split

2635
02:48:19,068 --> 02:48:32,709
box oh we didn't really get a chance to

2636
02:48:27,350 --> 02:48:35,750
finish debugging that or really even

2637
02:48:32,709 --> 02:48:38,778
that that code is pretty primitive right

2638
02:48:35,750 --> 02:48:44,209
now we don't even draw it so when you

2639
02:48:38,779 --> 02:48:47,180
say we don't use the attempt what do you

2640
02:48:44,209 --> 02:48:50,648
mean is it just do you mean we just

2641
02:48:47,180 --> 02:48:50,648
don't break out of it properly

2642
02:49:07,620 --> 02:49:12,030
oh I see what you're saying yeah yeah

2643
02:49:10,020 --> 02:49:15,390
you're right

2644
02:49:12,030 --> 02:49:21,270
so this dim index should actually be

2645
02:49:15,389 --> 02:49:33,329
cycled right and it's not because next

2646
02:49:21,270 --> 02:49:34,920
dim index isn't updated so I think

2647
02:49:33,329 --> 02:49:38,030
that's actually what should be happening

2648
02:49:34,920 --> 02:49:40,260
right is that what you meant

2649
02:49:38,030 --> 02:49:50,100
I'm not sure if that's what you meant or

2650
02:49:40,260 --> 02:49:52,710
not I don't think we'll really see much

2651
02:49:50,100 --> 02:50:03,600
in the way of results from that but you

2652
02:49:52,709 --> 02:50:06,929
know some kind of weird oh you know what

2653
02:50:03,600 --> 02:50:08,670
that is so the lighting bounds probably

2654
02:50:06,930 --> 02:50:11,579
should be based on the camera as well

2655
02:50:08,670 --> 02:50:16,219
and right now they're not so that's a

2656
02:50:11,579 --> 02:50:16,219
little bit of a bug too right

2657
02:50:21,568 --> 02:50:24,759
Jackson Bannon what's there still

2658
02:50:23,259 --> 02:50:26,679
between a game without OpenGL and with

2659
02:50:24,759 --> 02:50:31,599
OpenGL so right now we have not updated

2660
02:50:26,679 --> 02:50:33,668
the old render path to be the new render

2661
02:50:31,599 --> 02:50:43,439
style so we can't really address that

2662
02:50:33,668 --> 02:50:43,439
yet that'll be later all right

2663
02:50:44,940 --> 02:50:49,301
otherwise you useless loop yes okay so

2664
02:50:47,620 --> 02:50:50,829
good that is what you meant there so I

2665
02:50:49,300 --> 02:50:52,300
think that's all that we really need to

2666
02:50:50,829 --> 02:50:56,021
do to take that into account this

2667
02:50:52,300 --> 02:50:59,409
routine is still kind of garbage we have

2668
02:50:56,021 --> 02:51:05,440
to go through and actually draw our our

2669
02:50:59,409 --> 02:51:07,119
hierarchy so have you tried the clang

2670
02:51:05,440 --> 02:51:10,721
compiler on Windows the versions of the

2671
02:51:07,120 --> 02:51:16,690
last three months I been I use clang on

2672
02:51:10,720 --> 02:51:18,761
Linux and Mac I have not tried the

2673
02:51:16,690 --> 02:51:20,230
Windows version in quite some time the

2674
02:51:18,761 --> 02:51:22,511
last time I tried it it wasn't really

2675
02:51:20,229 --> 02:51:24,761
there yet supposedly they've got it

2676
02:51:22,511 --> 02:51:26,950
putting PDP's now but I don't know I I

2677
02:51:24,761 --> 02:51:32,881
figured there's no rush to using it so

2678
02:51:26,950 --> 02:51:32,881
at some point I'll probably switch but

2679
02:51:33,630 --> 02:51:37,930
that's probably be after my current

2680
02:51:36,040 --> 02:51:39,819
rounded project because I don't have any

2681
02:51:37,931 --> 02:51:44,801
huge problems with a visual so you can

2682
02:51:39,819 --> 02:51:46,841
power at the moment I still use 2012 so

2683
02:51:44,800 --> 02:51:47,949
next time instead of updating to a new

2684
02:51:46,841 --> 02:51:49,569
visual studio compiler I'll probably

2685
02:51:47,950 --> 02:51:51,909
update to clang assuming that no one

2686
02:51:49,569 --> 02:51:53,681
says it's like busted on Windows

2687
02:51:51,909 --> 02:51:57,790
assuming it's you know working okay and

2688
02:51:53,681 --> 02:51:59,319
the ppb's work and stuff so cuz yeah it

2689
02:51:57,790 --> 02:52:00,869
would be nice to switch to clang because

2690
02:51:59,319 --> 02:52:02,739
then you could always be on clang

2691
02:52:00,870 --> 02:52:04,329
because almost everything you ever

2692
02:52:02,739 --> 02:52:07,300
compiled on would be on clang at that

2693
02:52:04,329 --> 02:52:12,489
point Linux Mac and Windows would all be

2694
02:52:07,300 --> 02:52:14,501
on playing and I assume I don't remember

2695
02:52:12,489 --> 02:52:16,149
what PlayStation 4 was using but I'm

2696
02:52:14,501 --> 02:52:18,011
assuming PlayStation 4 used clang

2697
02:52:16,149 --> 02:52:20,380
because I'm not sure what else it would

2698
02:52:18,011 --> 02:52:26,021
have used could have still use canoe I

2699
02:52:20,380 --> 02:52:27,520
guess I'm not sure but at that point I

2700
02:52:26,021 --> 02:52:30,791
think the only thing you would have to

2701
02:52:27,521 --> 02:52:34,061
use Visual Studio for would be like Xbox

2702
02:52:30,790 --> 02:52:36,750
maybe because Android ops uses claying

2703
02:52:34,060 --> 02:52:40,060
iOS uses clang Matt Goss uses clang

2704
02:52:36,751 --> 02:52:42,159
Linux uses clang so Windows is the only

2705
02:52:40,060 --> 02:52:43,421
place you still use Visual Studio so if

2706
02:52:42,159 --> 02:52:46,149
you switch that to clang you could be

2707
02:52:43,421 --> 02:52:47,501
clang everywhere and the only place you

2708
02:52:46,149 --> 02:52:50,470
might have to use something other than

2709
02:52:47,501 --> 02:52:52,360
clang would be like Xbox because I

2710
02:52:50,470 --> 02:52:57,279
assume I've never done any Xbox one

2711
02:52:52,360 --> 02:52:57,670
development but I assume that the Xbox

2712
02:52:57,280 --> 02:53:03,840
one

2713
02:52:57,670 --> 02:53:08,850
is currently using visual Studios

2714
02:53:03,840 --> 02:53:11,950
toolchain but I don't know and yeah I

2715
02:53:08,850 --> 02:53:13,360
see your point specifically I do agree

2716
02:53:11,950 --> 02:53:15,939
the clang compiler gives much better

2717
02:53:13,360 --> 02:53:18,370
error messages especially if you're

2718
02:53:15,939 --> 02:53:21,130
someone who's like a doing you know sort

2719
02:53:18,370 --> 02:53:24,310
of more C++ heavy stuff which I don't

2720
02:53:21,129 --> 02:53:25,839
really like but if you're the kind of

2721
02:53:24,309 --> 02:53:27,909
person who uses like templates and stuff

2722
02:53:25,840 --> 02:53:29,770
all over the place you know the template

2723
02:53:27,909 --> 02:53:32,260
error messages in Visual Studio have

2724
02:53:29,770 --> 02:53:34,540
historically been quite bad and it makes

2725
02:53:32,260 --> 02:53:36,399
it pretty hard to do to debug template

2726
02:53:34,540 --> 02:53:39,000
code errors

2727
02:53:36,399 --> 02:53:42,819
whereas clang does a much better job

2728
02:53:39,000 --> 02:53:44,790
from what I remember anyway in code

2729
02:53:42,819 --> 02:53:47,110
bases that are like template happy of

2730
02:53:44,790 --> 02:53:49,180
actually giving you actionable error

2731
02:53:47,110 --> 02:53:50,680
messages instead of going okay that

2732
02:53:49,180 --> 02:53:53,020
really didn't tell me what I need to

2733
02:53:50,680 --> 02:53:55,380
know I got to kind of guess myself about

2734
02:53:53,020 --> 02:53:58,569
what happened wrong in the template

2735
02:53:55,379 --> 02:54:00,069
expansions you know clang if I remember

2736
02:53:58,569 --> 02:54:03,430
correctly was pretty good about saying

2737
02:54:00,069 --> 02:54:05,469
here is where in the template stream of

2738
02:54:03,430 --> 02:54:09,639
things stuff went wrong and that was

2739
02:54:05,469 --> 02:54:11,849
nice so all right I'm gonna go close it

2740
02:54:09,639 --> 02:54:11,849
down

2741
02:54:16,620 --> 02:54:19,859
okay thank you everyone for joining me

2742
02:54:18,600 --> 02:54:21,030
for the episode of handmade hero it's

2743
02:54:19,859 --> 02:54:22,920
been a pleasure coding with you as

2744
02:54:21,030 --> 02:54:25,229
always if you would like to follow along

2745
02:54:22,920 --> 02:54:26,790
with the series at home you could always

2746
02:54:25,228 --> 02:54:28,679
pre-order the game on hand my hero org

2747
02:54:26,790 --> 02:54:30,960
and it comes with the source code that

2748
02:54:28,680 --> 02:54:35,130
you can use to play around with yourself

2749
02:54:30,959 --> 02:54:36,929
and experiment we also have a schedule

2750
02:54:35,129 --> 02:54:37,978
bot you can use if you want to know when

2751
02:54:36,930 --> 02:54:40,439
we're going to be live in that was a

2752
02:54:37,978 --> 02:54:44,549
question today the schedule bot will

2753
02:54:40,439 --> 02:54:48,059
tell you it opposed to schedule there is

2754
02:54:44,549 --> 02:54:51,569
a bit of a snafu with I'm updating the

2755
02:54:48,059 --> 02:54:53,549
Molly Rocket websites this month rolling

2756
02:54:51,569 --> 02:54:56,520
them over to all-new systems and stuff

2757
02:54:53,549 --> 02:55:00,978
and they're kind of going on to a CDN

2758
02:54:56,520 --> 02:55:04,140
which means that the place where these

2759
02:55:00,978 --> 02:55:06,510
tools get their information from as far

2760
02:55:04,139 --> 02:55:08,519
as the schedule is a little wonky so the

2761
02:55:06,510 --> 02:55:11,969
schedule bot is always up to date but

2762
02:55:08,520 --> 02:55:14,280
the information on some of the other

2763
02:55:11,969 --> 02:55:17,129
utilities like in sohbat i think on the

2764
02:55:14,280 --> 02:55:19,530
web and also this little guy here are

2765
02:55:17,129 --> 02:55:21,389
currently perhaps a little bit iffy so

2766
02:55:19,530 --> 02:55:22,890
that will be getting straightened out

2767
02:55:21,389 --> 02:55:24,209
but if you're wondering why there's been

2768
02:55:22,889 --> 02:55:25,858
some issues with that it's because

2769
02:55:24,209 --> 02:55:27,629
there's going to be a web migration and

2770
02:55:25,859 --> 02:55:29,100
some of the things cannot be done the

2771
02:55:27,629 --> 02:55:31,199
way that they used to be so i will be

2772
02:55:29,100 --> 02:55:33,420
working with people like the folks who

2773
02:55:31,200 --> 02:55:35,070
maintain and sohbat and so on to make

2774
02:55:33,420 --> 02:55:39,079
sure that they can get stuff from the

2775
02:55:35,069 --> 02:55:41,520
correct new locations but until then

2776
02:55:39,079 --> 02:55:44,370
schedule bot is the place to look if you

2777
02:55:41,520 --> 02:55:46,140
want to know what schedule is alright

2778
02:55:44,370 --> 02:55:47,370
we'll be back next week there is no

2779
02:55:46,139 --> 02:55:49,469
hand-made here tomorrow it's a day off

2780
02:55:47,370 --> 02:55:51,590
we'll be back next week when we can

2781
02:55:49,469 --> 02:55:53,569
resume our letting actualization and

2782
02:55:51,590 --> 02:55:56,010
we'll be playing around with that

2783
02:55:53,569 --> 02:55:57,619
spatial hierarchy and the update loop to

2784
02:55:56,010 --> 02:56:00,148
try and get to something nice and fast

2785
02:55:57,620 --> 02:56:01,950
and we'll also be probably introducing

2786
02:56:00,148 --> 02:56:03,539
our sky lighting into there as well so

2787
02:56:01,950 --> 02:56:04,740
we've got some work to do that'll be fun

2788
02:56:03,540 --> 02:56:06,930
and we'll be able to improve the

2789
02:56:04,739 --> 02:56:09,359
lighting quality but I think as well so

2790
02:56:06,930 --> 02:56:11,790
that'll be good that's it for this week

2791
02:56:09,359 --> 02:56:13,470
until next week have fun programming and

2792
02:56:11,790 --> 02:56:15,859
I'll see everyone on the Internet take

2793
02:56:13,469 --> 02:56:15,858
it easy everybody

