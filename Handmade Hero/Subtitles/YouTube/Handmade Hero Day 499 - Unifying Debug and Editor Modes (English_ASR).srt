1
00:00:00,000 --> 00:00:04,559
and welcome to hand made here oh sure we

2
00:00:01,439 --> 00:00:07,500
code a complete game live on stream we

3
00:00:04,559 --> 00:00:09,089
are kind of at a fun point in the

4
00:00:07,500 --> 00:00:12,480
project at least I've been having a lot

5
00:00:09,089 --> 00:00:14,699
of fun with it we're sort of at that

6
00:00:12,480 --> 00:00:16,230
point where all of our design decisions

7
00:00:14,699 --> 00:00:19,320
are kind of coming together and you can

8
00:00:16,230 --> 00:00:20,880
kind of see how everything is supposed

9
00:00:19,320 --> 00:00:22,260
to interrelate like a lot of the

10
00:00:20,879 --> 00:00:25,768
exploratory stuff we did is now

11
00:00:22,260 --> 00:00:28,320
resolving in a good way and so you know

12
00:00:25,768 --> 00:00:34,589
we're able to to just get a lot of stuff

13
00:00:28,320 --> 00:00:35,969
right I don't know a look at it is we're

14
00:00:34,590 --> 00:00:37,649
able to kind of get to the point where

15
00:00:35,969 --> 00:00:39,120
we're like okay we see exactly how

16
00:00:37,649 --> 00:00:40,620
assets should be managed now or we see

17
00:00:39,119 --> 00:00:42,269
exactly how this can be done in a simple

18
00:00:40,619 --> 00:00:45,449
nice clean way we don't have to worry

19
00:00:42,270 --> 00:00:48,960
about it anymore blah blah blah um oops

20
00:00:45,450 --> 00:00:55,670
did I launch that twice I did don't ask

21
00:00:48,960 --> 00:00:58,649
me why we go and so it's pretty exciting

22
00:00:55,670 --> 00:01:00,448
because really what you know the place

23
00:00:58,649 --> 00:01:06,000
we find ourselves in it's just this

24
00:01:00,448 --> 00:01:07,618
really kind of nice open field where we

25
00:01:06,000 --> 00:01:09,090
can say look anything that we go spend

26
00:01:07,618 --> 00:01:11,069
time on will probably yield some really

27
00:01:09,090 --> 00:01:14,579
good fruit right away right we're you

28
00:01:11,069 --> 00:01:16,139
know we're in good shape there and so I

29
00:01:14,579 --> 00:01:17,188
think what I want to do today just kind

30
00:01:16,140 --> 00:01:19,049
of finish up some of the stuff you're

31
00:01:17,188 --> 00:01:20,609
doing I'm gonna finally go

32
00:01:19,049 --> 00:01:21,868
I want to peg these guys to the corner

33
00:01:20,609 --> 00:01:23,429
of the screen I've been talked about

34
00:01:21,868 --> 00:01:25,978
many times you notice that our debug

35
00:01:23,430 --> 00:01:27,570
stuff doesn't peg properly to the corner

36
00:01:25,978 --> 00:01:30,868
of the screen like it should you know

37
00:01:27,569 --> 00:01:33,359
what I mean and so I think I might go

38
00:01:30,868 --> 00:01:36,209
play around just real quickly with that

39
00:01:33,359 --> 00:01:37,469
today just make make these things work a

40
00:01:36,209 --> 00:01:39,868
little bit more the way that I might

41
00:01:37,469 --> 00:01:41,849
want them to so that's one thing that I

42
00:01:39,868 --> 00:01:48,930
think I would like to do the other thing

43
00:01:41,849 --> 00:01:50,578
I would like to do is in the so we

44
00:01:48,930 --> 00:01:53,549
played a little bit with the camera

45
00:01:50,578 --> 00:01:56,938
making it a little bit less perspective

46
00:01:53,549 --> 00:01:59,490
II just to let the 2d art stuff work a

47
00:01:56,938 --> 00:02:03,059
little bit better I think now is the

48
00:01:59,489 --> 00:02:05,968
time to go really harp on that camera

49
00:02:03,060 --> 00:02:07,680
code so that is another thing big on the

50
00:02:05,968 --> 00:02:09,628
table and then finally and the thing

51
00:02:07,680 --> 00:02:11,039
that maybe will take up a fair bit of

52
00:02:09,628 --> 00:02:13,408
today because I don't know I wanted

53
00:02:11,038 --> 00:02:15,298
started the camera code stuff but we

54
00:02:13,408 --> 00:02:18,840
actually have all the stuff in here for

55
00:02:15,299 --> 00:02:21,090
editing alignment points we need to do a

56
00:02:18,840 --> 00:02:24,420
little bit of grunt work to save those

57
00:02:21,090 --> 00:02:26,459
out it's trivial for us to implement

58
00:02:24,419 --> 00:02:27,780
saving back to the HHA in fact we don't

59
00:02:26,459 --> 00:02:31,079
even have to implement it it's literally

60
00:02:27,780 --> 00:02:39,359
just a call that says hey we save this

61
00:02:31,079 --> 00:02:41,730
file so that's a no-brainer but the more

62
00:02:39,359 --> 00:02:43,230
the more difficult part well it's not

63
00:02:41,729 --> 00:02:47,098
only difficult but the more work

64
00:02:43,229 --> 00:02:49,469
intensive part is we have to go make a

65
00:02:47,098 --> 00:02:51,869
backing store for those that we can

66
00:02:49,469 --> 00:02:54,870
consider an authoritative file so in

67
00:02:51,870 --> 00:02:57,629
other words something that's like a text

68
00:02:54,870 --> 00:02:59,938
file that we can put aside the PNG s and

69
00:02:57,628 --> 00:03:02,638
consider it like canonical data for

70
00:02:59,938 --> 00:03:04,469
handmade hero so that we can say this

71
00:03:02,639 --> 00:03:06,689
text file

72
00:03:04,469 --> 00:03:09,419
you know describes the alignment points

73
00:03:06,688 --> 00:03:12,388
that we marked up on this thing so if we

74
00:03:09,419 --> 00:03:14,519
ever want to completely delete the hhas

75
00:03:12,389 --> 00:03:17,790
for this in their entirety so they're

76
00:03:14,519 --> 00:03:20,370
just gone there's no more hhas if we

77
00:03:17,789 --> 00:03:22,168
ever want to do that we can and we can

78
00:03:20,370 --> 00:03:25,979
still rebuild the entire handmade hero

79
00:03:22,169 --> 00:03:29,040
assets packaged together with the

80
00:03:25,979 --> 00:03:31,379
metadata can all be built again from

81
00:03:29,039 --> 00:03:33,780
source so we're just trying to close

82
00:03:31,378 --> 00:03:37,108
that loop because if we just save them

83
00:03:33,780 --> 00:03:39,030
back to the hhas you know we could

84
00:03:37,109 --> 00:03:42,930
consider those hhas authoritative but

85
00:03:39,030 --> 00:03:44,459
then it makes it a lot harder to you

86
00:03:42,930 --> 00:03:46,500
know store in a permanent archival

87
00:03:44,459 --> 00:03:48,209
format everyone understands text files

88
00:03:46,500 --> 00:03:53,039
source code control understands text

89
00:03:48,209 --> 00:03:56,969
files they're easy to verify visually or

90
00:03:53,039 --> 00:03:58,348
you know restore if they get broken so

91
00:03:56,969 --> 00:04:01,280
you know it just seems like a better

92
00:03:58,348 --> 00:04:04,108
idea to have that backing store there

93
00:04:01,280 --> 00:04:10,318
that's that's really all you know all

94
00:04:04,109 --> 00:04:13,560
there is to it little stretch first very

95
00:04:10,318 --> 00:04:16,709
important and then we'll get to work on

96
00:04:13,560 --> 00:04:20,009
some of these things so maybe what I'll

97
00:04:16,709 --> 00:04:21,569
do the outset is again just just maybe

98
00:04:20,009 --> 00:04:23,879
clean up some of that debugging stuff a

99
00:04:21,569 --> 00:04:25,230
little bit make that a little clearer

100
00:04:23,879 --> 00:04:27,990
one of the things

101
00:04:25,230 --> 00:04:30,120
that I'm not sure how I want to do

102
00:04:27,990 --> 00:04:32,310
here's we had some lighting test stuff

103
00:04:30,120 --> 00:04:35,009
in here before you can see I'm like

104
00:04:32,310 --> 00:04:39,089
pressing some keys right now for example

105
00:04:35,009 --> 00:04:42,779
and changing lighting you know all

106
00:04:39,089 --> 00:04:44,339
around there I I think we want to stop

107
00:04:42,779 --> 00:04:46,589
you know now that I've got more

108
00:04:44,339 --> 00:04:49,529
interface stuff I think maybe we want to

109
00:04:46,589 --> 00:04:51,929
go get our interface story together our

110
00:04:49,529 --> 00:04:54,859
developer interface story together bind

111
00:04:51,930 --> 00:05:02,060
our F keys to something that makes sense

112
00:04:54,860 --> 00:05:05,790
and put the debug system and the editor

113
00:05:02,060 --> 00:05:09,060
together in some way in that like make

114
00:05:05,790 --> 00:05:12,120
make it be so you hit f12 do editing f2

115
00:05:09,060 --> 00:05:17,000
to do debug or whatever so it's like it

116
00:05:12,120 --> 00:05:17,000
just makes them some more solid sense

117
00:05:17,660 --> 00:05:23,910
that's mostly all I want to do there and

118
00:05:21,269 --> 00:05:26,729
then get the get these things pegged

119
00:05:23,910 --> 00:05:28,830
properly when you turn them on

120
00:05:26,730 --> 00:05:31,379
get those pegged properly to the top of

121
00:05:28,829 --> 00:05:34,529
the screen so I would like something

122
00:05:31,379 --> 00:05:35,850
like that to happen and so like let's

123
00:05:34,529 --> 00:05:38,909
just get that going because it's been

124
00:05:35,850 --> 00:05:43,379
annoying me and I really don't want it

125
00:05:38,910 --> 00:05:48,320
to keep annoying me all right so let's

126
00:05:43,379 --> 00:05:51,930
suppose that in yeah in in the world's

127
00:05:48,319 --> 00:05:55,860
today that we want a more centralized

128
00:05:51,930 --> 00:05:58,189
that that handling of the you know

129
00:05:55,860 --> 00:06:03,720
pressing the f1 f2 whatever that is so

130
00:05:58,189 --> 00:06:06,540
in here in handmade game editor our

131
00:06:03,720 --> 00:06:10,350
in-game editor like the way that this

132
00:06:06,540 --> 00:06:12,689
stuff works is you can you you know when

133
00:06:10,350 --> 00:06:20,430
you hit a key it's gonna set this editor

134
00:06:12,689 --> 00:06:23,160
mode and like that mode that we set is

135
00:06:20,430 --> 00:06:27,180
just kind of ad hoc right now so you

136
00:06:23,160 --> 00:06:28,470
know edit mode underscore you can kind

137
00:06:27,180 --> 00:06:31,410
of see where that's where that's

138
00:06:28,470 --> 00:06:33,480
happening inside begin hit test it looks

139
00:06:31,410 --> 00:06:37,420
to see whether you push from those keys

140
00:06:33,480 --> 00:06:39,610
and then sets that up and you know

141
00:06:37,420 --> 00:06:41,410
again that I kind of feel like we want

142
00:06:39,610 --> 00:06:44,319
this to be handled in a more centralized

143
00:06:41,410 --> 00:06:47,590
fashion I don't really know how that

144
00:06:44,319 --> 00:06:49,870
should happen it's kind of a little

145
00:06:47,589 --> 00:06:51,759
confusing certainly because I haven't

146
00:06:49,870 --> 00:06:55,030
really thought through where that sort

147
00:06:51,759 --> 00:06:58,659
of stuff should happen but I think we

148
00:06:55,029 --> 00:07:02,289
want something a little bit more you

149
00:06:58,660 --> 00:07:06,120
know like in in this code this is our

150
00:07:02,290 --> 00:07:08,980
main game just you know central Nexus

151
00:07:06,120 --> 00:07:10,720
where we actually like put stuff out to

152
00:07:08,980 --> 00:07:13,360
the debug system and all that sort of

153
00:07:10,720 --> 00:07:15,400
thing so it kind of feels to me more

154
00:07:13,360 --> 00:07:20,350
like you know that should probably

155
00:07:15,399 --> 00:07:23,409
happen inside excuse me

156
00:07:20,350 --> 00:07:25,720
inside this general process here

157
00:07:23,410 --> 00:07:29,439
right like that seems like more what we

158
00:07:25,720 --> 00:07:31,270
would want to do and so I think here

159
00:07:29,439 --> 00:07:33,550
would it be where we would want to have

160
00:07:31,269 --> 00:07:37,889
the ability to have the fast F key

161
00:07:33,550 --> 00:07:42,180
access where we could say you know or a

162
00:07:37,889 --> 00:07:47,699
whatever the F keys are that you press

163
00:07:42,180 --> 00:07:52,930
they can yield various results right and

164
00:07:47,699 --> 00:07:54,939
some of those results might be things

165
00:07:52,930 --> 00:07:58,629
that the debug system looks at some of

166
00:07:54,939 --> 00:08:00,180
those might not be but I may want to

167
00:07:58,629 --> 00:08:05,589
kind of centralize that

168
00:08:00,180 --> 00:08:08,370
devmode you know what I mean and so what

169
00:08:05,589 --> 00:08:10,889
I'm thinking just in my head about how

170
00:08:08,370 --> 00:08:13,959
you know how that might come together is

171
00:08:10,889 --> 00:08:18,610
rather than having that editor have that

172
00:08:13,959 --> 00:08:21,459
in there mm-hmm maybe this is actually

173
00:08:18,610 --> 00:08:24,879
just like a more broad concept so maybe

174
00:08:21,459 --> 00:08:28,930
this is like a dev mode and the dev

175
00:08:24,879 --> 00:08:34,240
modes are actually things that are that

176
00:08:28,930 --> 00:08:37,299
span across multiple systems so I can be

177
00:08:34,240 --> 00:08:40,240
in one of n dev modes and depending on

178
00:08:37,299 --> 00:08:42,879
which dev mode I'm in I may get an

179
00:08:40,240 --> 00:08:43,690
editor running or I may get a debug

180
00:08:42,879 --> 00:08:46,330
system running

181
00:08:43,690 --> 00:08:48,640
but generally speaking since they what

182
00:08:46,330 --> 00:08:50,530
those systems kind of want to monopolize

183
00:08:48,639 --> 00:08:51,809
the user interface at that point

184
00:08:50,529 --> 00:08:56,069
potential

185
00:08:51,809 --> 00:09:00,129
I'm thinking maybe that's how we

186
00:08:56,070 --> 00:09:01,930
arbitrate that aspect so rather than

187
00:09:00,129 --> 00:09:04,299
forcing all of those systems to tie

188
00:09:01,929 --> 00:09:05,859
together through the same UI which I

189
00:09:04,299 --> 00:09:09,240
don't really think I want to do because

190
00:09:05,860 --> 00:09:11,560
I kind of want the flexibility to have

191
00:09:09,240 --> 00:09:13,060
different things completely take over

192
00:09:11,559 --> 00:09:15,278
the UI potentially depending on the

193
00:09:13,059 --> 00:09:17,109
circumstances rather than harmonizing

194
00:09:15,278 --> 00:09:20,799
all of those I think what I'd rather do

195
00:09:17,110 --> 00:09:23,139
is is have that dev mode be responsible

196
00:09:20,799 --> 00:09:26,319
for who gets to do which of those things

197
00:09:23,139 --> 00:09:28,180
you know what I mean and it could still

198
00:09:26,320 --> 00:09:30,610
be very ad hoc this is developer

199
00:09:28,179 --> 00:09:32,379
specific code doesn't have to be super

200
00:09:30,610 --> 00:09:34,810
polished or anything but I think that's

201
00:09:32,379 --> 00:09:36,789
roughly what I want to go with and so

202
00:09:34,809 --> 00:09:40,028
you know we'll have the asset editing

203
00:09:36,789 --> 00:09:43,120
stuff in there as as one way things

204
00:09:40,028 --> 00:09:48,909
could happen we could have like

205
00:09:43,120 --> 00:09:54,360
profiling be another example we could

206
00:09:48,909 --> 00:09:58,480
have you know settings be another one

207
00:09:54,360 --> 00:10:02,579
you know that sort of stuff so these can

208
00:09:58,480 --> 00:10:06,459
actually be quick ways of accessing

209
00:10:02,578 --> 00:10:09,299
basic elements of the debug UI as well

210
00:10:06,458 --> 00:10:09,299
as the editing UI

211
00:10:10,769 --> 00:10:17,139
yeah I mean that seems pretty good to me

212
00:10:14,948 --> 00:10:19,659
and and we could make it so that yeah

213
00:10:17,139 --> 00:10:25,019
like you know you push f1 and you get

214
00:10:19,659 --> 00:10:25,019
none you know maybe we have like

215
00:10:26,940 --> 00:10:36,810
something like this I don't know you

216
00:10:34,389 --> 00:10:36,810
know I'm saying

217
00:10:40,078 --> 00:10:44,769
so something like that seems pretty good

218
00:10:42,458 --> 00:10:47,919
to me I might say that this should

219
00:10:44,769 --> 00:10:51,639
practice would go a little bit more like

220
00:10:47,919 --> 00:10:55,088
this so this may be this is an f1 this

221
00:10:51,639 --> 00:10:56,680
actually starts maybe on f5 through f6

222
00:10:55,089 --> 00:11:01,839
f7

223
00:10:56,679 --> 00:11:09,489
I don't really know necessarily how I

224
00:11:01,839 --> 00:11:10,590
would I would want that to go something

225
00:11:09,490 --> 00:11:13,700
like this

226
00:11:10,590 --> 00:11:13,700
[Music]

227
00:11:16,049 --> 00:11:20,649
right like something where I can kind of

228
00:11:18,519 --> 00:11:23,169
have different types of stuff that we're

229
00:11:20,649 --> 00:11:25,028
doing there I don't know if we actually

230
00:11:23,169 --> 00:11:27,250
have I mean if we if we look at what's

231
00:11:25,028 --> 00:11:32,860
in there now most of it's largely

232
00:11:27,250 --> 00:11:34,750
useless you know we've got simple ways

233
00:11:32,860 --> 00:11:37,000
of setting some of these things but I

234
00:11:34,750 --> 00:11:40,208
feel like those these can be expressed

235
00:11:37,000 --> 00:11:44,039
better than they're being expressed now

236
00:11:40,208 --> 00:11:47,438
as well you know all this stuff could be

237
00:11:44,039 --> 00:11:50,250
expressed better we don't have stuff a

238
00:11:47,438 --> 00:11:50,250
renderer is still in there

239
00:11:51,179 --> 00:11:54,758
yeah so like a lot of this stuff is just

240
00:11:53,438 --> 00:11:56,500
a little vestigial remains and stuff so

241
00:11:54,759 --> 00:11:59,589
as we clean that up and make it actually

242
00:11:56,500 --> 00:12:01,058
more useful in the modern context and

243
00:11:59,589 --> 00:12:03,490
we've got our lighting tests on here

244
00:12:01,058 --> 00:12:08,409
which is sort of a separate line of

245
00:12:03,490 --> 00:12:12,930
things it just seems to me like we can

246
00:12:08,409 --> 00:12:12,929
this stuff can get improved and we can

247
00:12:14,339 --> 00:12:24,730
we can make this better right all right

248
00:12:19,208 --> 00:12:27,068
so I'm gonna proceed with this and we'll

249
00:12:24,730 --> 00:12:28,539
see where we get with it again this is

250
00:12:27,068 --> 00:12:32,019
just trying to improve that system make

251
00:12:28,539 --> 00:12:36,639
it a little bit more useful to me so

252
00:12:32,019 --> 00:12:39,519
what I want to do here is if the if the

253
00:12:36,639 --> 00:12:42,129
person presses f1 then they just clear

254
00:12:39,519 --> 00:12:43,480
you know they're not in a dev mode so f1

255
00:12:42,129 --> 00:12:46,629
is the way of getting rid of the dev

256
00:12:43,480 --> 00:12:49,178
mode entirely at any time you can just

257
00:12:46,629 --> 00:12:50,588
hit that and it goes away I don't want

258
00:12:49,178 --> 00:12:51,429
to make that the escape key because the

259
00:12:50,589 --> 00:12:54,670
escape keys

260
00:12:51,429 --> 00:12:56,679
actually a game-related key so I'd like

261
00:12:54,669 --> 00:12:59,409
that to remain free for processing by

262
00:12:56,679 --> 00:13:01,269
the game in an actual game setting so

263
00:12:59,409 --> 00:13:02,079
that that just doesn't have to ever be

264
00:13:01,269 --> 00:13:03,730
special

265
00:13:02,080 --> 00:13:07,139
especially handled it's actually just

266
00:13:03,730 --> 00:13:07,139
you know always uniformly correct

267
00:13:07,210 --> 00:13:13,629
so editing assets would be on f2 or

268
00:13:11,860 --> 00:13:18,310
maybe a four I don't know which one I

269
00:13:13,629 --> 00:13:24,669
want we'll see then three is is nothing

270
00:13:18,309 --> 00:13:26,588
at the moment and four is nothing so

271
00:13:24,669 --> 00:13:30,759
then it's five would be the first time

272
00:13:26,589 --> 00:13:34,110
that we get another mode here so then

273
00:13:30,759 --> 00:13:39,159
we've got like five six seven and eight

274
00:13:34,110 --> 00:13:44,019
so we've got profiling we've got you

275
00:13:39,159 --> 00:13:46,028
know rendering we've got lighting and

276
00:13:44,019 --> 00:13:47,139
we've got dumped and I don't really know

277
00:13:46,028 --> 00:13:50,860
if we're gonna actually use all these

278
00:13:47,139 --> 00:13:54,250
you know who knows this is dead mode and

279
00:13:50,860 --> 00:13:55,990
then and then instead of these things

280
00:13:54,250 --> 00:13:57,879
set on the editor these are just gonna

281
00:13:55,990 --> 00:14:00,970
be like a dev mode parameter that sits

282
00:13:57,879 --> 00:14:03,039
on the game so what I want to do is is

283
00:14:00,970 --> 00:14:04,690
make again like that's central it's so

284
00:14:03,039 --> 00:14:07,240
it's just part of the global game state

285
00:14:04,690 --> 00:14:09,640
that anyone can always access because

286
00:14:07,240 --> 00:14:12,549
it's like a developer global overriding

287
00:14:09,639 --> 00:14:14,319
mode that anyone who wants to just stick

288
00:14:12,549 --> 00:14:16,389
some debug code into that piece of their

289
00:14:14,320 --> 00:14:19,000
code can switch on this variable if they

290
00:14:16,389 --> 00:14:21,039
wish to and do whatever they want and so

291
00:14:19,000 --> 00:14:22,149
that's intentionally not hidden it's

292
00:14:21,039 --> 00:14:25,360
intentionally going to be exposed

293
00:14:22,149 --> 00:14:27,159
globally and the reason for that is

294
00:14:25,360 --> 00:14:28,778
because I don't want it to be

295
00:14:27,159 --> 00:14:31,299
heavyweight operation or a routing

296
00:14:28,778 --> 00:14:32,980
operation to access it I want everyone

297
00:14:31,299 --> 00:14:34,328
who ever wants to do anything related to

298
00:14:32,980 --> 00:14:37,389
it just be able to insert that code

299
00:14:34,328 --> 00:14:41,739
directly and that's that's actually the

300
00:14:37,389 --> 00:14:46,208
goal right so if I were to take that

301
00:14:41,740 --> 00:14:50,620
code now and in the in-game editor stop

302
00:14:46,208 --> 00:14:52,589
using the editor mode so rather than in

303
00:14:50,620 --> 00:14:56,700
here saying in game editor

304
00:14:52,590 --> 00:15:00,960
mode getting rid of that and having it

305
00:14:56,700 --> 00:15:04,410
use the the game asset mode I'm sorry

306
00:15:00,960 --> 00:15:06,330
using the game state it means I would

307
00:15:04,409 --> 00:15:08,639
have to pass the game state around here

308
00:15:06,330 --> 00:15:12,090
which maybe I don't necessarily want to

309
00:15:08,639 --> 00:15:14,309
do um so what I can do is I can mirror

310
00:15:12,090 --> 00:15:17,310
it into the editor if I want to so I can

311
00:15:14,309 --> 00:15:19,619
put that in here and then whenever we

312
00:15:17,309 --> 00:15:24,239
begin hit test write whenever we come in

313
00:15:19,620 --> 00:15:26,279
here I can just say well the editor game

314
00:15:24,240 --> 00:15:29,909
mode is going to be equal to the game

315
00:15:26,279 --> 00:15:33,360
States game mode always right so I'm

316
00:15:29,909 --> 00:15:35,669
just gonna force that Tunis to be what

317
00:15:33,360 --> 00:15:37,470
happens right and we could even make

318
00:15:35,669 --> 00:15:40,199
that be like a thing that gets passed in

319
00:15:37,470 --> 00:15:42,090
here and that's just so I don't have to

320
00:15:40,200 --> 00:15:45,390
pass the game state around because I

321
00:15:42,090 --> 00:15:46,500
don't really want to have to make sure

322
00:15:45,389 --> 00:15:48,449
that that it was good passed around the

323
00:15:46,500 --> 00:15:55,710
editor should be sufficient I could link

324
00:15:48,450 --> 00:15:56,370
it back but I'm not going to so there we

325
00:15:55,710 --> 00:15:59,100
go

326
00:15:56,370 --> 00:16:04,310
and then in here we supposed to be dev

327
00:15:59,100 --> 00:16:08,370
mode and so everyone who's checking that

328
00:16:04,309 --> 00:16:10,379
needs to then respect that value in here

329
00:16:08,370 --> 00:16:12,470
we've we've probably got this in an

330
00:16:10,379 --> 00:16:15,090
order that's not that's not flattering

331
00:16:12,470 --> 00:16:17,190
so you know the editor gets included

332
00:16:15,090 --> 00:16:19,519
first before the game state and we would

333
00:16:17,190 --> 00:16:22,080
need some more centralized location for

334
00:16:19,519 --> 00:16:23,909
defining this stuff that's actually not

335
00:16:22,080 --> 00:16:28,879
that hard to do right we can just put it

336
00:16:23,909 --> 00:16:28,879
right here and then we should be fine so

337
00:16:29,149 --> 00:16:35,399
here I just need to take any place that

338
00:16:32,610 --> 00:16:38,070
was referring to the you know to that as

339
00:16:35,399 --> 00:16:42,029
an editor specific concept and I just

340
00:16:38,070 --> 00:16:46,250
need to now refer to it in sort of the

341
00:16:42,029 --> 00:16:49,860
more unified context but that's it and

342
00:16:46,250 --> 00:16:52,110
then here let's see where we're at so

343
00:16:49,860 --> 00:16:55,649
the game state this actually has to

344
00:16:52,110 --> 00:16:57,090
happen a little bit later because we

345
00:16:55,649 --> 00:17:00,659
have to have actually initialized our

346
00:16:57,090 --> 00:17:03,149
game states so but once we have then we

347
00:17:00,659 --> 00:17:05,699
can actually do that checking so we

348
00:17:03,149 --> 00:17:08,459
probably want to do it somewhere here

349
00:17:05,699 --> 00:17:12,298
right like that once the game state has

350
00:17:08,459 --> 00:17:14,939
is known and initialized uh this needs

351
00:17:12,298 --> 00:17:17,548
to take the game state dev mode again

352
00:17:14,939 --> 00:17:20,069
because it gets replicated just every

353
00:17:17,548 --> 00:17:21,798
frame back in there but otherwise that's

354
00:17:20,068 --> 00:17:24,808
fine

355
00:17:21,798 --> 00:17:27,388
alright so now when we run we should use

356
00:17:24,808 --> 00:17:30,960
the new format which is to say f1 turns

357
00:17:27,388 --> 00:17:33,990
things off oh you know what else I have

358
00:17:30,960 --> 00:17:38,038
to do is stop using that for lighting so

359
00:17:33,990 --> 00:17:42,149
I now want to deep this like I'm just

360
00:17:38,038 --> 00:17:45,990
gonna disallow anyone else from using

361
00:17:42,148 --> 00:17:49,949
this stuff so you can't actually access

362
00:17:45,990 --> 00:17:54,620
any of these features anymore now we may

363
00:17:49,950 --> 00:17:58,200
still want these these features to be

364
00:17:54,619 --> 00:18:01,288
available so rather than like literally

365
00:17:58,200 --> 00:18:05,190
delete the code what I think I might do

366
00:18:01,288 --> 00:18:08,940
instead is just bucket them out here so

367
00:18:05,190 --> 00:18:13,919
that when they you know like this right

368
00:18:08,940 --> 00:18:18,360
here when they are needed again I could

369
00:18:13,919 --> 00:18:21,990
call something to have these be maybe

370
00:18:18,359 --> 00:18:24,689
tied into the interface right meaning

371
00:18:21,990 --> 00:18:28,558
all of this stuff could actually be

372
00:18:24,690 --> 00:18:32,700
debug UI that actually happens right we

373
00:18:28,558 --> 00:18:36,058
could make this be available as part of

374
00:18:32,700 --> 00:18:39,990
the lighting like a lighting UI feature

375
00:18:36,058 --> 00:18:42,119
you know what I mean and so you know if

376
00:18:39,990 --> 00:18:46,888
we look at debug interface here or

377
00:18:42,119 --> 00:18:49,469
whatever I could make like a kind of of

378
00:18:46,888 --> 00:18:50,849
clickable button or something I don't

379
00:18:49,470 --> 00:18:53,610
remember if we already have one of those

380
00:18:50,849 --> 00:18:55,678
or whatever but you know now that we

381
00:18:53,609 --> 00:19:00,028
kind of have a better idea of how that

382
00:18:55,679 --> 00:19:01,620
stuff is flowing through we could we

383
00:19:00,028 --> 00:19:04,528
could use one of these things to make

384
00:19:01,619 --> 00:19:09,298
like a debug button right so we could do

385
00:19:04,528 --> 00:19:13,888
like debug button you know they're

386
00:19:09,298 --> 00:19:15,538
lighting and or you know in fact that

387
00:19:13,888 --> 00:19:17,308
right there is just that we know what

388
00:19:15,538 --> 00:19:20,778
kind that is that's like a debug b32

389
00:19:17,308 --> 00:19:20,778
right so

390
00:19:22,369 --> 00:19:25,758
that's just that

391
00:19:31,579 --> 00:19:34,859
what's she lighting

392
00:19:33,359 --> 00:19:37,138
what was she letting go again sorry

393
00:19:34,859 --> 00:19:40,678
forgot it's world mode show buddy right

394
00:19:37,138 --> 00:19:54,000
yeah so these could just be something

395
00:19:40,679 --> 00:19:55,919
like this and this needs to do a little

396
00:19:54,000 --> 00:19:59,099
bit of clearing here so this one

397
00:19:55,919 --> 00:20:02,429
actually kind of wants to know when the

398
00:19:59,099 --> 00:20:05,369
thing was changed so that's a little bit

399
00:20:02,429 --> 00:20:10,278
more complicated this one's actually

400
00:20:05,369 --> 00:20:12,599
just a s32 value or I guess I should say

401
00:20:10,278 --> 00:20:16,319
kind of what more wants to be a u-32

402
00:20:12,599 --> 00:20:18,859
value almost but again that's that's

403
00:20:16,319 --> 00:20:22,950
something that you could edit

404
00:20:18,859 --> 00:20:26,668
so we could say debug what is debug box

405
00:20:22,950 --> 00:20:29,870
to rod I don't know what kind is maybe

406
00:20:26,669 --> 00:20:29,870
it's a u-32 I'm not sure

407
00:20:34,009 --> 00:20:43,649
and this again is just to be 32 so all

408
00:20:40,769 --> 00:20:46,338
of these we could do this way and maybe

409
00:20:43,648 --> 00:20:51,478
we will make something better for those

410
00:20:46,338 --> 00:20:58,858
lighting pattern I don't remember what

411
00:20:51,479 --> 00:21:01,048
that is oh yes I do that was a thing

412
00:20:58,858 --> 00:21:15,928
that allowed us to test our Rea

413
00:21:01,048 --> 00:21:17,219
distributions so like you know yeah we

414
00:21:15,929 --> 00:21:19,229
could still do it this way

415
00:21:17,219 --> 00:21:21,209
this one also wants to be that way right

416
00:21:19,229 --> 00:21:27,679
so this is a debug button but you can

417
00:21:21,209 --> 00:21:36,209
push and it's called like a cumulation I

418
00:21:27,679 --> 00:21:41,009
guess I don't know how we want to do

419
00:21:36,209 --> 00:21:48,599
that exactly I guess it's more like hey

420
00:21:41,009 --> 00:21:51,269
which one is this yeah I'm not sure so

421
00:21:48,598 --> 00:21:52,950
we'll know test lighting cumulating what

422
00:21:51,269 --> 00:21:56,098
is that doing it's like saying we won't

423
00:21:52,950 --> 00:21:57,538
turn it on or off and then I guess we so

424
00:21:56,098 --> 00:22:01,108
I guess what we want to do here is say

425
00:21:57,538 --> 00:22:07,019
look if you if you swapped which one it

426
00:22:01,108 --> 00:22:10,798
is it should return something so that we

427
00:22:07,019 --> 00:22:14,989
know we want to do that operation

428
00:22:10,798 --> 00:22:19,158
so we more want to do this like if

429
00:22:14,989 --> 00:22:19,159
accumulation sets to true

430
00:22:28,960 --> 00:22:34,069
so the way this worked originally is if

431
00:22:31,849 --> 00:22:36,288
the cumulating was set to true it turned

432
00:22:34,069 --> 00:22:38,359
it off so it's not accumulating and then

433
00:22:36,288 --> 00:22:41,450
the accumulation got set to zero if said

434
00:22:38,359 --> 00:22:43,248
accumulating true it just set to that so

435
00:22:41,450 --> 00:22:46,220
I'm guessing what we want to do here is

436
00:22:43,249 --> 00:22:51,339
just say all right so if we're not if

437
00:22:46,220 --> 00:22:55,249
you toggled it to be not accumulating

438
00:22:51,339 --> 00:22:57,618
then what we would want to do is set

439
00:22:55,249 --> 00:23:03,740
this to zero otherwise we don't have to

440
00:22:57,618 --> 00:23:07,278
do anything right I think that's my

441
00:23:03,740 --> 00:23:14,269
argument so anyway in here this is

442
00:23:07,278 --> 00:23:22,700
basically like our debug lighting and

443
00:23:14,269 --> 00:23:25,878
that needs to take the world mode so we

444
00:23:22,700 --> 00:23:27,919
can look at reenable exact in in a

445
00:23:25,878 --> 00:23:30,109
little bit but I want to make sure that

446
00:23:27,919 --> 00:23:31,429
we get the basis down first so I just

447
00:23:30,109 --> 00:23:33,138
wanted to button that up so we didn't

448
00:23:31,429 --> 00:23:34,730
delete any of that functionality just in

449
00:23:33,138 --> 00:23:36,709
case we want to do some stuff with that

450
00:23:34,730 --> 00:23:41,028
again as we when we move back to working

451
00:23:36,710 --> 00:23:43,460
on lighting a little bit more so now in

452
00:23:41,028 --> 00:23:49,398
terms of the features like being able to

453
00:23:43,460 --> 00:23:50,990
hit like f1 f2 and so on I want I now

454
00:23:49,398 --> 00:23:53,028
want to get it so that like this stuff

455
00:23:50,990 --> 00:23:54,980
goes away or comes back depending on

456
00:23:53,028 --> 00:24:00,138
which one of these buttons I'm pushing

457
00:23:54,980 --> 00:24:03,278
right and so trying to move forward on

458
00:24:00,138 --> 00:24:03,278
that a little bit

459
00:24:09,970 --> 00:24:31,670
so so I guess what we really want to do

460
00:24:25,789 --> 00:24:33,619
here is inside the debug system where

461
00:24:31,670 --> 00:24:38,420
we're actually setting up what we're

462
00:24:33,619 --> 00:24:41,119
drawing you know we've got and and we or

463
00:24:38,420 --> 00:24:44,690
did this once for the lighting so you

464
00:24:41,119 --> 00:24:51,049
know if you look at how this stuff is

465
00:24:44,690 --> 00:24:55,460
set up we had like a thing called like

466
00:24:51,049 --> 00:24:57,500
function group yeah this so we allowed

467
00:24:55,460 --> 00:25:00,799
people to dump whatever they want into

468
00:24:57,500 --> 00:25:04,700
these various groups and then we display

469
00:25:00,799 --> 00:25:06,200
them in different ways and so you know

470
00:25:04,700 --> 00:25:10,970
if you look at what happens with that

471
00:25:06,200 --> 00:25:12,440
oops with that function group thing you

472
00:25:10,970 --> 00:25:14,450
can kind of see how these trees are

473
00:25:12,440 --> 00:25:17,150
added and then they're they're added it

474
00:25:14,450 --> 00:25:19,789
like locations and this was actually the

475
00:25:17,150 --> 00:25:27,550
problem is this stuff doesn't snap right

476
00:25:19,789 --> 00:25:30,730
the way that I would want and so I think

477
00:25:27,549 --> 00:25:33,319
really all I want to do here is create

478
00:25:30,730 --> 00:25:36,049
some of these you know here's the

479
00:25:33,319 --> 00:25:39,230
profile group for example as well I want

480
00:25:36,049 --> 00:25:52,460
to create some of these variables that

481
00:25:39,230 --> 00:25:53,539
are that are gonna be stratified by by

482
00:25:52,460 --> 00:25:57,740
where that came from

483
00:25:53,539 --> 00:25:59,990
so in order to select which one of these

484
00:25:57,740 --> 00:26:01,549
we'd be doing like you know we'd go down

485
00:25:59,990 --> 00:26:09,620
here and we look at the function group

486
00:26:01,549 --> 00:26:12,950
thing this add tree here so rather than

487
00:26:09,619 --> 00:26:16,000
like how many trees do we have I kind of

488
00:26:12,950 --> 00:26:21,519
just want that to be more on the F keys

489
00:26:16,000 --> 00:26:21,519
you know what I mean so

490
00:26:23,579 --> 00:26:29,559
so I think all I really want to do is

491
00:26:27,160 --> 00:26:36,330
when we're doing our when we're doing

492
00:26:29,559 --> 00:26:36,329
the debug and and we go through here

493
00:26:36,960 --> 00:26:47,680
this stuff should be more predicated in

494
00:26:44,740 --> 00:26:51,250
terms of one ends up getting drawn and

495
00:26:47,680 --> 00:26:52,269
in fact yeah so I'm kind of seeing like

496
00:26:51,250 --> 00:27:00,130
how this should probably come together

497
00:26:52,269 --> 00:27:01,389
so maybe that's memory right and who

498
00:27:00,130 --> 00:27:04,920
knows what other stuff we want to put in

499
00:27:01,390 --> 00:27:04,920
here but so

500
00:27:24,619 --> 00:27:29,399
so I guess what I would say is this

501
00:27:27,450 --> 00:27:31,319
stuff here like where we do this format

502
00:27:29,400 --> 00:27:38,009
string whatever like all of this stuff I

503
00:27:31,319 --> 00:27:42,389
think now kind of wants to be you know

504
00:27:38,009 --> 00:27:44,819
wants to be more systemic so rather than

505
00:27:42,390 --> 00:27:47,190
making this stuff be like function info

506
00:27:44,819 --> 00:27:49,169
size and function info and like that

507
00:27:47,190 --> 00:27:59,570
sort of stuff I think we kind of want

508
00:27:49,170 --> 00:28:02,429
this stuff to be handled more like the

509
00:27:59,569 --> 00:28:05,428
other UI where they're not the floaty

510
00:28:02,429 --> 00:28:10,169
trees we just pick which one we're doing

511
00:28:05,429 --> 00:28:14,600
and we go from there so you know we

512
00:28:10,169 --> 00:28:19,400
could preserve the draw trees path but

513
00:28:14,599 --> 00:28:24,329
as something you can still call to if

514
00:28:19,400 --> 00:28:26,790
you're in whatever mode that is but that

515
00:28:24,329 --> 00:28:39,359
wouldn't be the default way of doing

516
00:28:26,789 --> 00:28:41,339
things right so instead Jimmy so instead

517
00:28:39,359 --> 00:28:44,459
of having this global debug table HUD

518
00:28:41,339 --> 00:28:46,199
function as well like we would just in

519
00:28:44,460 --> 00:28:49,279
fact I guess now I think about it we

520
00:28:46,200 --> 00:28:49,279
could just make that

521
00:28:56,619 --> 00:29:00,469
we could even make that HUD function be

522
00:28:59,089 --> 00:29:07,099
something that's actually determined

523
00:29:00,470 --> 00:29:09,110
outside yeah so I'm not sure exactly how

524
00:29:07,099 --> 00:29:10,819
I want that part to shake out but what I

525
00:29:09,109 --> 00:29:12,500
what I am fairly certain about here

526
00:29:10,819 --> 00:29:14,539
right because I want to have a couple

527
00:29:12,500 --> 00:29:18,349
different things that are going on here

528
00:29:14,539 --> 00:29:21,379
so I would like to have debug profiling

529
00:29:18,349 --> 00:29:23,149
be one of them I'd like to have debug

530
00:29:21,380 --> 00:29:26,660
rendering be one of them

531
00:29:23,150 --> 00:29:30,259
I'd like to have debug lighting be one

532
00:29:26,660 --> 00:29:34,190
of them and I'd like to have you know do

533
00:29:30,259 --> 00:29:35,660
you bet memory be one of them and that

534
00:29:34,190 --> 00:29:37,789
would sort of determine which part of

535
00:29:35,660 --> 00:29:41,810
this tree you were actually looking at

536
00:29:37,789 --> 00:29:43,609
and why um I guess like maybe we don't

537
00:29:41,809 --> 00:29:45,440
actually need a function for it per se

538
00:29:43,609 --> 00:29:48,829
but when I'm looking at what happens

539
00:29:45,440 --> 00:29:51,890
here we we tend to want to build like

540
00:29:48,829 --> 00:29:54,470
customized statics status strings so I

541
00:29:51,890 --> 00:29:58,030
feel like that sort of stuff kind of

542
00:29:54,470 --> 00:30:05,480
needs to be somewhere in here right and

543
00:29:58,029 --> 00:30:06,740
so I don't know like I feel like we're

544
00:30:05,480 --> 00:30:08,870
gonna want functions for it because

545
00:30:06,740 --> 00:30:11,539
we're gonna want to do other kinds of

546
00:30:08,869 --> 00:30:13,279
customized iteration that's you know

547
00:30:11,539 --> 00:30:15,470
maybe at least somewhat specific and

548
00:30:13,279 --> 00:30:17,809
maybe the answer is that should have

549
00:30:15,470 --> 00:30:20,390
been done as a debug element type and so

550
00:30:17,809 --> 00:30:26,629
the trees are just you know descriptions

551
00:30:20,390 --> 00:30:29,840
of what should happen I don't know it's

552
00:30:26,630 --> 00:30:31,850
pretty hard to say how hard would that

553
00:30:29,839 --> 00:30:38,389
be to implement so if we wanted to make

554
00:30:31,849 --> 00:30:40,990
those be nonspecific like meaning if I

555
00:30:38,390 --> 00:30:43,280
wanted that to just be a generic line

556
00:30:40,990 --> 00:30:46,700
how hard would that be for me to

557
00:30:43,279 --> 00:30:52,670
implement in the debug system like if I

558
00:30:46,700 --> 00:30:58,640
wanted so you know we've got these

559
00:30:52,670 --> 00:31:00,920
various types of things when we're

560
00:30:58,640 --> 00:31:03,590
actually outputting this stuff right

561
00:31:00,920 --> 00:31:05,900
we've got all this logic you know here's

562
00:31:03,589 --> 00:31:08,199
all these things you can draw you know

563
00:31:05,900 --> 00:31:08,200
what I mean

564
00:31:11,710 --> 00:31:16,039
so if we have all this can't we just

565
00:31:14,240 --> 00:31:17,420
make a thing that's like yeah you know

566
00:31:16,039 --> 00:31:25,428
you look here and you see you know last

567
00:31:17,420 --> 00:31:29,179
frame info or whatever and that's

568
00:31:25,429 --> 00:31:31,730
actually this so it looks trivial to

569
00:31:29,179 --> 00:31:37,820
actually have that happen so maybe

570
00:31:31,730 --> 00:31:41,269
that's just what should happen that just

571
00:31:37,819 --> 00:31:43,819
seems a lot more sensible to me so I'm

572
00:31:41,269 --> 00:31:46,490
gonna go ahead and say let's go ahead

573
00:31:43,819 --> 00:31:49,129
and and make this collapse down so you

574
00:31:46,490 --> 00:31:50,839
know here's the last frame info and you

575
00:31:49,130 --> 00:31:53,750
know this stuff can just be rolled into

576
00:31:50,839 --> 00:31:55,759
here this is the old version of that but

577
00:31:53,750 --> 00:31:58,730
here's the new version of that so we

578
00:31:55,759 --> 00:32:03,579
should be able to just grab that and you

579
00:31:58,730 --> 00:32:06,798
know do it this way instead so when we

580
00:32:03,579 --> 00:32:08,480
look at this piece of information here

581
00:32:06,798 --> 00:32:12,230
this the rest of this stuff stays the

582
00:32:08,480 --> 00:32:14,058
same and then the only difference is it

583
00:32:12,230 --> 00:32:18,110
goes into this like temporary text

584
00:32:14,058 --> 00:32:22,490
buffer thing rather than you know into

585
00:32:18,109 --> 00:32:27,740
it's the the that sort of pre created

586
00:32:22,490 --> 00:32:30,349
yeah pre created area so that should be

587
00:32:27,740 --> 00:32:34,130
fine and similarly like the way that

588
00:32:30,349 --> 00:32:36,409
we're doing this thing down here it

589
00:32:34,130 --> 00:32:39,410
looks like this just tallies up for a

590
00:32:36,410 --> 00:32:43,250
particular function what you wanted I

591
00:32:39,410 --> 00:32:46,100
don't see why that couldn't also be one

592
00:32:43,250 --> 00:32:49,849
of these things so like if I said this

593
00:32:46,099 --> 00:32:51,819
thing was a function summary or

594
00:32:49,849 --> 00:32:55,879
something

595
00:32:51,819 --> 00:32:58,039
then this I feel like would also you

596
00:32:55,880 --> 00:33:00,640
know should be able to be represented in

597
00:32:58,039 --> 00:33:04,759
the same way meaning like I don't

598
00:33:00,640 --> 00:33:11,410
substantively know why that wouldn't

599
00:33:04,759 --> 00:33:11,410
work so like this

600
00:33:14,868 --> 00:33:22,349
right printing it out the same way that

601
00:33:21,089 --> 00:33:25,528
we were printing out this and then

602
00:33:22,349 --> 00:33:30,388
calling basic text element seems like it

603
00:33:25,528 --> 00:33:32,548
should work you know and you know maybe

604
00:33:30,388 --> 00:33:34,378
I could even say well by default this

605
00:33:32,548 --> 00:33:40,878
says like function not found or

606
00:33:34,378 --> 00:33:43,558
something I feel like that would be

607
00:33:40,878 --> 00:33:45,888
reasonable so in here where we do like

608
00:33:43,558 --> 00:33:50,548
this you know global table HUD function

609
00:33:45,888 --> 00:33:52,589
well you know these in theory have data

610
00:33:50,548 --> 00:33:55,349
associated with them right like you know

611
00:33:52,589 --> 00:34:00,388
if I say that I've got some kind of

612
00:33:55,349 --> 00:34:02,908
bitmap ID or whatever right then I'd get

613
00:34:00,388 --> 00:34:06,408
it out of the the value of of whatever

614
00:34:02,909 --> 00:34:10,318
the you know event thing was and

615
00:34:06,409 --> 00:34:11,909
furthermore I assume any way that you

616
00:34:10,318 --> 00:34:14,909
know if you look at what like a default

617
00:34:11,909 --> 00:34:18,990
value is then you can see here like we

618
00:34:14,909 --> 00:34:20,700
say like debug event to text so like

619
00:34:18,989 --> 00:34:34,678
just looking at when you have those

620
00:34:20,699 --> 00:34:37,469
debug events when you look at these

621
00:34:34,679 --> 00:34:40,168
write debug events to text things you

622
00:34:37,469 --> 00:34:42,418
can see them using all of this

623
00:34:40,168 --> 00:34:46,199
additional information right so like the

624
00:34:42,418 --> 00:34:53,128
value are 32 and all that stuff so if we

625
00:34:46,199 --> 00:34:55,199
were to look at at that this stuff then

626
00:34:53,128 --> 00:34:57,630
we could easily say that one of those

627
00:34:55,199 --> 00:34:59,308
functions summaries just has like text

628
00:34:57,630 --> 00:35:00,990
in it right so like you know it could

629
00:34:59,309 --> 00:35:02,250
just set the value string pointer to be

630
00:35:00,989 --> 00:35:04,709
whatever the thing was that you were

631
00:35:02,250 --> 00:35:06,750
actually looking for or the name you

632
00:35:04,710 --> 00:35:09,059
know whatever the actual piece of data

633
00:35:06,750 --> 00:35:10,798
is that shows up in here we could use

634
00:35:09,059 --> 00:35:13,650
that as the query so in theory you

635
00:35:10,798 --> 00:35:16,108
should be able to in the debug system it

636
00:35:13,650 --> 00:35:18,510
should be just like there shouldn't be

637
00:35:16,108 --> 00:35:22,578
any weirdness about that you should be

638
00:35:18,510 --> 00:35:22,579
able to just go ahead and and grab

639
00:35:26,500 --> 00:35:34,190
whichever debug thing makes more sense

640
00:35:28,579 --> 00:35:37,429
there right I mean that just now that

641
00:35:34,190 --> 00:35:42,320
seems pretty basic so anyway I think

642
00:35:37,429 --> 00:35:44,059
that's what I would rather do so rather

643
00:35:42,320 --> 00:35:46,730
in here than saying like let's have this

644
00:35:44,059 --> 00:35:49,599
global you know global debug table

645
00:35:46,730 --> 00:35:49,599
where'd that go

646
00:35:51,280 --> 00:35:55,430
so rather than looking at the global

647
00:35:53,840 --> 00:35:57,320
debug table and saying well there's only

648
00:35:55,429 --> 00:35:58,519
one you know you get one summary

649
00:35:57,320 --> 00:35:59,930
function you should just be able to have

650
00:35:58,519 --> 00:36:01,460
as many summary functions as you want

651
00:35:59,929 --> 00:36:03,289
and then where there's those are placed

652
00:36:01,460 --> 00:36:06,260
you know they're they're placed wherever

653
00:36:03,289 --> 00:36:09,789
they are so that HUD function thing was

654
00:36:06,260 --> 00:36:09,790
probably just me screwing around

655
00:36:11,570 --> 00:36:18,230
so let's just let's get rid of that like

656
00:36:14,960 --> 00:36:22,849
let's just get get rid of that and then

657
00:36:18,230 --> 00:36:25,849
in here Jimmy when we get one of these

658
00:36:22,849 --> 00:36:32,239
events we'll just say look let's look

659
00:36:25,849 --> 00:36:34,279
for that event it's gonna have a value

660
00:36:32,239 --> 00:36:36,109
string pointer attached to it and that's

661
00:36:34,280 --> 00:36:46,190
the that's what you should look for so

662
00:36:36,110 --> 00:36:47,780
just get that get that thing right and I

663
00:36:46,190 --> 00:36:49,730
suppose what we could do here is we

664
00:36:47,780 --> 00:36:52,940
could also say instead of calling that

665
00:36:49,730 --> 00:36:54,829
function not found what we could do to

666
00:36:52,940 --> 00:36:57,250
is actually print something out there so

667
00:36:54,829 --> 00:37:00,199
in this case like when we can't find it

668
00:36:57,250 --> 00:37:02,650
then we could actually do a printf here

669
00:37:00,199 --> 00:37:02,649
and say

670
00:37:06,309 --> 00:37:12,670
you know if you asked me to print

671
00:37:08,619 --> 00:37:15,548
something out and I can't find it then

672
00:37:12,670 --> 00:37:36,579
I'm gonna you know I'm gonna tell you

673
00:37:15,548 --> 00:37:43,568
like this so I think that works don't

674
00:37:36,579 --> 00:37:46,630
need any of that nonsense there so that

675
00:37:43,568 --> 00:37:48,369
seems good so as far as HUD time

676
00:37:46,630 --> 00:37:53,108
function that's not going to be a thing

677
00:37:48,369 --> 00:37:58,358
anymore we need to define one of these

678
00:37:53,108 --> 00:38:02,348
function summary things and so what was

679
00:37:58,358 --> 00:38:04,958
it gonna be in handmade interface so

680
00:38:02,349 --> 00:38:07,509
that needs to kind of go in here as the

681
00:38:04,958 --> 00:38:08,739
thing that you can have and then will

682
00:38:07,509 --> 00:38:11,528
have to have a way of adding one of

683
00:38:08,739 --> 00:38:15,548
those obviously but we can do that

684
00:38:11,528 --> 00:38:20,048
pretty easily so let's see event

685
00:38:15,548 --> 00:38:20,559
undeclared identifier that's a good

686
00:38:20,048 --> 00:38:23,108
point

687
00:38:20,559 --> 00:38:30,880
we haven't actually gotten the event at

688
00:38:23,108 --> 00:38:34,438
that point I feel like the null event is

689
00:38:30,880 --> 00:38:34,439
something we probably just want up here

690
00:38:37,389 --> 00:38:46,839
um unless that lease to get cleared

691
00:38:40,269 --> 00:38:50,190
every time does it all right I took it

692
00:38:46,840 --> 00:38:50,190
back I lied

693
00:39:11,929 --> 00:39:16,279
so I'm gonna make that happen each time

694
00:39:19,880 --> 00:39:31,079
and that way everyone can use that if

695
00:39:23,369 --> 00:39:33,780
they want to so in this case we've got

696
00:39:31,079 --> 00:39:37,980
kind of multiple versions of event

697
00:39:33,780 --> 00:39:43,680
happening here and I can see why that is

698
00:39:37,980 --> 00:39:47,429
not fabulous because yeah we don't

699
00:39:43,679 --> 00:39:51,058
really want to have to those looking at

700
00:39:47,429 --> 00:39:57,440
events I guess I can just call this sub

701
00:39:51,059 --> 00:40:00,150
event here like so

702
00:39:57,440 --> 00:40:01,588
all right so in theory that should all

703
00:40:00,150 --> 00:40:04,470
be fine and we just need a way of

704
00:40:01,588 --> 00:40:06,150
actually adding those now and so now

705
00:40:04,469 --> 00:40:07,739
hopefully you can also see like we don't

706
00:40:06,150 --> 00:40:09,568
have any lines for the start of those

707
00:40:07,739 --> 00:40:10,798
trees and the reason why we don't have

708
00:40:09,568 --> 00:40:12,298
any lines for the start of those trees

709
00:40:10,798 --> 00:40:15,900
is because now we aren't printing them

710
00:40:12,298 --> 00:40:19,739
out there anymore right so when we

711
00:40:15,900 --> 00:40:22,019
actually look at it you know in the

712
00:40:19,739 --> 00:40:24,629
debug interface that's just I think

713
00:40:22,019 --> 00:40:26,940
that's cuz when we did the debug stuff

714
00:40:24,630 --> 00:40:28,588
originally you know it wasn't our finest

715
00:40:26,940 --> 00:40:30,329
hour certainly we kind of struggled

716
00:40:28,588 --> 00:40:31,980
exactly with how we wanted to do it and

717
00:40:30,329 --> 00:40:34,650
we never really ended up at a place that

718
00:40:31,980 --> 00:40:36,298
was all that great and so it tends to be

719
00:40:34,650 --> 00:40:38,519
more complicated than it needs to be and

720
00:40:36,298 --> 00:40:40,980
it doesn't really do a lot of stuff that

721
00:40:38,519 --> 00:40:42,719
you might want and so we had sort of

722
00:40:40,980 --> 00:40:44,219
these like route info function info

723
00:40:42,719 --> 00:40:46,259
things I think we just want those to go

724
00:40:44,219 --> 00:40:50,269
away right and that's how we were doing

725
00:40:46,260 --> 00:40:53,190
it we were basically creating a

726
00:40:50,269 --> 00:40:55,469
temporary buffer to write this into and

727
00:40:53,190 --> 00:40:58,380
then we you know pointed these things at

728
00:40:55,469 --> 00:41:01,798
it and that's just not a very good way

729
00:40:58,380 --> 00:41:04,230
to do that right that's that is not how

730
00:41:01,798 --> 00:41:06,420
we would actually like that to go and so

731
00:41:04,230 --> 00:41:08,190
we kind of want you know when we create

732
00:41:06,420 --> 00:41:10,019
these variable this variable link here

733
00:41:08,190 --> 00:41:13,260
that we were creating we would rather

734
00:41:10,019 --> 00:41:19,079
have this just be when we click

735
00:41:13,260 --> 00:41:20,670
thing we know that we can expand or

736
00:41:19,079 --> 00:41:23,610
collapse that thing kind of separately

737
00:41:20,670 --> 00:41:27,840
from it so I want to go in and see how

738
00:41:23,610 --> 00:41:32,820
exactly we specified this stuff I don't

739
00:41:27,840 --> 00:41:35,010
know if we've actually got yeah that

740
00:41:32,820 --> 00:41:41,970
that actually looks fine so when we

741
00:41:35,010 --> 00:41:44,220
create a variable link in here you know

742
00:41:41,969 --> 00:41:46,559
it it has the element and then it has

743
00:41:44,219 --> 00:41:49,649
children so I think that basically means

744
00:41:46,559 --> 00:41:53,360
that this type here can be anything that

745
00:41:49,650 --> 00:41:55,920
you actually wanted it to be I believe

746
00:41:53,360 --> 00:41:58,769
so if you look at what the debug element

747
00:41:55,920 --> 00:42:01,710
is on it I believe this could be set to

748
00:41:58,769 --> 00:42:04,800
whatever you wanted so when we do this

749
00:42:01,710 --> 00:42:10,349
stuff I feel like that would work let's

750
00:42:04,800 --> 00:42:14,010
make sure it does but basically what we

751
00:42:10,349 --> 00:42:18,210
want to do here is set this stuff up for

752
00:42:14,010 --> 00:42:20,880
a success right so looking into this

753
00:42:18,210 --> 00:42:22,650
debug elements the debug type here must

754
00:42:20,880 --> 00:42:25,410
have been set to something so when we

755
00:42:22,650 --> 00:42:27,000
have create variable linked which

756
00:42:25,409 --> 00:42:30,210
creates one of these sort of things that

757
00:42:27,000 --> 00:42:32,010
can can create trees or whatever when we

758
00:42:30,210 --> 00:42:34,170
do one of these things I was curious

759
00:42:32,010 --> 00:42:37,410
what kind of thing it actually creates

760
00:42:34,170 --> 00:42:40,200
by default and it looks like it actually

761
00:42:37,409 --> 00:42:44,489
creates it doesn't put an element in

762
00:42:40,199 --> 00:42:45,809
there at all right so if it doesn't put

763
00:42:44,489 --> 00:42:47,579
an element in there at all that means we

764
00:42:45,809 --> 00:42:49,889
could attach an element to it I would

765
00:42:47,579 --> 00:42:51,269
think and then the only question is did

766
00:42:49,889 --> 00:42:52,619
we do something weird where we don't

767
00:42:51,269 --> 00:42:56,639
process elements on things that have

768
00:42:52,619 --> 00:42:58,289
children yet I mean and it looks like

769
00:42:56,639 --> 00:42:59,940
unfortunately that is sort of the case

770
00:42:58,289 --> 00:43:03,840
you can see here like when we come

771
00:42:59,940 --> 00:43:06,450
through can't have children of a link it

772
00:43:03,840 --> 00:43:09,300
then says well okay then then you don't

773
00:43:06,449 --> 00:43:17,339
you know you don't do this

774
00:43:09,300 --> 00:43:20,880
if that's the case and again that seems

775
00:43:17,340 --> 00:43:24,990
less good right because we don't really

776
00:43:20,880 --> 00:43:26,950
care one way or the other about you know

777
00:43:24,989 --> 00:43:28,868
we would rather just be able to draw

778
00:43:26,949 --> 00:43:30,368
this and also have it so that if you

779
00:43:28,869 --> 00:43:37,510
interact with it it can expand the

780
00:43:30,369 --> 00:43:49,599
children so I'm not sure why you know

781
00:43:37,510 --> 00:43:51,730
that is actually that way and and I also

782
00:43:49,599 --> 00:43:54,220
don't really know why we have the link

783
00:43:51,730 --> 00:43:57,490
name replicated there like how often

784
00:43:54,219 --> 00:43:59,618
does that really have to happen so I'm

785
00:43:57,489 --> 00:44:01,419
gonna go on a bit of a rampage here and

786
00:43:59,619 --> 00:44:07,088
just try to clean this stuff up a little

787
00:44:01,420 --> 00:44:09,250
bit as well I'm deleting that for now so

788
00:44:07,088 --> 00:44:13,920
yeah if we come through here you know we

789
00:44:09,250 --> 00:44:17,710
should if I run this you know we'll get

790
00:44:13,920 --> 00:44:20,710
nominally those names placed in there

791
00:44:17,710 --> 00:44:22,990
right and that's fine and so what I want

792
00:44:20,710 --> 00:44:25,030
to look for I want to understand what's

793
00:44:22,989 --> 00:44:27,039
happening here when we have this name

794
00:44:25,030 --> 00:44:28,660
field like what is that name field

795
00:44:27,039 --> 00:44:32,289
actually doing and is it actually

796
00:44:28,659 --> 00:44:34,109
necessary so looking through where that

797
00:44:32,289 --> 00:44:37,179
actually gets called

798
00:44:34,110 --> 00:44:37,179
[Music]

799
00:44:46,329 --> 00:44:59,239
you know it looks like it's really only

800
00:44:48,920 --> 00:45:02,889
used inside the profiler tool tip and I

801
00:44:59,239 --> 00:45:09,669
guess we replicate that name out here

802
00:45:02,889 --> 00:45:14,109
but otherwise it really isn't

803
00:45:09,670 --> 00:45:26,360
necessarily you so I'm out try this I

804
00:45:14,110 --> 00:45:35,170
want to see everyone who calls that yeah

805
00:45:26,360 --> 00:45:38,349
so this this just doesn't seem necessary

806
00:45:35,170 --> 00:45:38,349
to me

807
00:45:51,318 --> 00:45:56,308
so it looks like the reason if that's

808
00:45:53,759 --> 00:45:59,639
there primarily is that getting you know

809
00:45:56,309 --> 00:46:02,249
it it does a simplified extraction of

810
00:45:59,639 --> 00:46:04,199
the name out of whatever the parse name

811
00:46:02,248 --> 00:46:05,669
field was there and I'm assuming that

812
00:46:04,199 --> 00:46:08,998
the reason we were doing that is because

813
00:46:05,670 --> 00:46:11,309
we wanted to save that name off and not

814
00:46:08,998 --> 00:46:22,528
have to extract it every time you know

815
00:46:11,309 --> 00:46:26,630
what I mean which is certainly

816
00:46:22,528 --> 00:46:26,630
reasonable but again I don't really know

817
00:46:29,239 --> 00:46:34,798
you know I don't really know if we made

818
00:46:31,409 --> 00:46:39,778
that decision particularly well so

819
00:46:34,798 --> 00:46:42,778
looking through here you know on the top

820
00:46:39,778 --> 00:46:45,440
clock's list again it just uses that get

821
00:46:42,778 --> 00:46:48,690
name for the element function there and

822
00:46:45,440 --> 00:46:50,818
it does that for the label for the arena

823
00:46:48,690 --> 00:46:52,769
C right so it's just getting the name of

824
00:46:50,818 --> 00:46:57,179
their source but most the time it does

825
00:46:52,768 --> 00:47:02,629
look like people just use the name from

826
00:46:57,179 --> 00:47:06,498
the actual events that are in there and

827
00:47:02,630 --> 00:47:06,499
that just seems better

828
00:47:14,590 --> 00:47:20,660
so what I would say is everyone who's

829
00:47:18,050 --> 00:47:22,760
accessing the name directly so you know

830
00:47:20,659 --> 00:47:29,599
I would I would say I don't know why

831
00:47:22,760 --> 00:47:32,890
this can't be that right right that

832
00:47:29,599 --> 00:47:32,889
would just work wouldn't it

833
00:47:42,309 --> 00:47:47,900
and so now everybody who accesses the

834
00:47:45,739 --> 00:47:51,859
name field is just asking for it through

835
00:47:47,900 --> 00:47:54,619
that excess or and so I think and I

836
00:47:51,860 --> 00:47:56,900
could be very wrong about this but I

837
00:47:54,619 --> 00:47:59,659
think what we could do there is say all

838
00:47:56,900 --> 00:48:02,000
right so get name on a debug element is

839
00:47:59,659 --> 00:48:05,809
actually going to be a little bit more

840
00:48:02,000 --> 00:48:11,570
complicated than it was before and what

841
00:48:05,809 --> 00:48:16,000
we'll do is we'll actually you know when

842
00:48:11,570 --> 00:48:19,130
we go to get the the name of the thing

843
00:48:16,000 --> 00:48:23,989
we can actually produce the name on the

844
00:48:19,130 --> 00:48:27,260
fly potentially if that name should be

845
00:48:23,989 --> 00:48:30,949
produced on the fly that seems like a

846
00:48:27,260 --> 00:48:33,920
better idea and we can look to see if

847
00:48:30,949 --> 00:48:42,919
you know to what extent that wouldn't

848
00:48:33,920 --> 00:48:50,450
work but if everyone is going through

849
00:48:42,920 --> 00:48:54,280
get name we can at least play around

850
00:48:50,449 --> 00:48:54,279
with it yes I guess what I would say

851
00:48:54,940 --> 00:49:04,280
okay so if I wanted to make that

852
00:49:01,420 --> 00:49:07,760
automatically handle sort of more

853
00:49:04,280 --> 00:49:10,930
complex cases where I want some of the

854
00:49:07,760 --> 00:49:13,700
names to be able to generate summaries

855
00:49:10,929 --> 00:49:16,699
instead of being named something

856
00:49:13,699 --> 00:49:18,529
specific then I think what I can do is

857
00:49:16,699 --> 00:49:21,519
when you are calling that get name

858
00:49:18,530 --> 00:49:25,880
function now I can make that be actually

859
00:49:21,519 --> 00:49:27,219
you know the I can actually have that

860
00:49:25,880 --> 00:49:35,960
call through to here

861
00:49:27,219 --> 00:49:41,839
so yeah I don't know whether these

862
00:49:35,960 --> 00:49:45,409
things I don't know to what extent this

863
00:49:41,840 --> 00:49:50,030
part actually matters all that much but

864
00:49:45,409 --> 00:49:54,069
I certainly can mirror that behavior and

865
00:49:50,030 --> 00:49:57,440
so what I would do here is say let's

866
00:49:54,070 --> 00:50:01,610
let's say that in order to access this

867
00:49:57,440 --> 00:50:04,639
thing when you call get name on a debug

868
00:50:01,610 --> 00:50:07,490
element you actually have to pass the

869
00:50:04,639 --> 00:50:10,099
same thing as we were passing before and

870
00:50:07,489 --> 00:50:16,009
maybe it thunks through to this thing

871
00:50:10,099 --> 00:50:18,289
right so in the case where the element

872
00:50:16,010 --> 00:50:21,410
actually does have an event structure

873
00:50:18,289 --> 00:50:24,340
associated with it then we can do

874
00:50:21,409 --> 00:50:24,339
something more like this

875
00:50:38,480 --> 00:50:42,900
for a lack of something better to do

876
00:50:40,858 --> 00:50:51,929
now in terms of what the flag should be

877
00:50:42,900 --> 00:50:56,780
here I guess I'm not sure probably none

878
00:50:51,929 --> 00:50:56,779
of these things maybe just add value

879
00:51:04,780 --> 00:51:10,450
I mean I couldn't yeah I'm not really

880
00:51:07,150 --> 00:51:17,079
sure what I would put there but let's

881
00:51:10,449 --> 00:51:19,210
say add value and so we would just dunk

882
00:51:17,079 --> 00:51:23,159
through to this and here is the part of

883
00:51:19,210 --> 00:51:23,159
the code that would actually do this

884
00:51:31,019 --> 00:51:39,280
stuff so it would actually you know it

885
00:51:37,119 --> 00:51:41,559
would actually do sort of the null event

886
00:51:39,280 --> 00:51:45,940
nonsense handling here so this stuff

887
00:51:41,559 --> 00:51:50,380
where it looks to see if it can get you

888
00:51:45,940 --> 00:51:53,849
know a it looks to see whether it can

889
00:51:50,380 --> 00:51:57,550
get one of these pieces of information

890
00:51:53,849 --> 00:51:59,650
so for example like you know this stuff

891
00:51:57,550 --> 00:52:01,810
here where it goes and does the debug

892
00:51:59,650 --> 00:52:04,599
state frames that kind of stuff

893
00:52:01,809 --> 00:52:06,699
and so I think it really just means that

894
00:52:04,599 --> 00:52:09,819
the get name function all it would

895
00:52:06,699 --> 00:52:13,509
really need to have passed to it would

896
00:52:09,820 --> 00:52:15,910
be the debug state itself like so and

897
00:52:13,510 --> 00:52:20,010
then I don't know if inside here you

898
00:52:15,909 --> 00:52:22,239
need to get for a debug event to text I

899
00:52:20,010 --> 00:52:25,480
guess I don't know whether we would want

900
00:52:22,239 --> 00:52:29,379
to add it in here or not but yeah we

901
00:52:25,480 --> 00:52:31,240
certainly could like again this stuff

902
00:52:29,380 --> 00:52:34,510
really I feel like could be made a lot

903
00:52:31,239 --> 00:52:36,699
better you know this is not good and we

904
00:52:34,510 --> 00:52:39,130
could improve this dramatically I'm just

905
00:52:36,699 --> 00:52:40,750
not sure how much of that improvement I

906
00:52:39,130 --> 00:52:44,140
really want to make at the immediate

907
00:52:40,750 --> 00:52:45,820
moment so we could through to here

908
00:52:44,139 --> 00:52:48,400
we could also do something slightly

909
00:52:45,820 --> 00:52:51,100
different which is to say that we you

910
00:52:48,400 --> 00:52:54,930
know by default take whatever the name

911
00:52:51,099 --> 00:53:00,630
is but then like you know if this thing

912
00:52:54,929 --> 00:53:00,629
when we look at what the type is here

913
00:53:04,670 --> 00:53:12,420
we can opt to do something different

914
00:53:07,409 --> 00:53:15,059
here and I mean so you know when we call

915
00:53:12,420 --> 00:53:16,590
get name on this thing then maybe we

916
00:53:15,059 --> 00:53:18,929
don't actually ever thunk through to

917
00:53:16,590 --> 00:53:23,610
that but we just handled those two kind

918
00:53:18,929 --> 00:53:27,929
of weird cases where we've got sort of

919
00:53:23,610 --> 00:53:32,789
the the function summary and the last

920
00:53:27,929 --> 00:53:34,859
frame info here domain so again not

921
00:53:32,789 --> 00:53:38,159
really sure I don't really like the way

922
00:53:34,860 --> 00:53:43,680
that that looks particularly much but

923
00:53:38,159 --> 00:53:45,629
you know it's good enough for now so if

924
00:53:43,679 --> 00:53:49,769
we take a look at what happens inside

925
00:53:45,630 --> 00:53:54,030
the debug type last frame info and we

926
00:53:49,769 --> 00:53:56,190
want that to be accessible elsewhere we

927
00:53:54,030 --> 00:54:00,230
can't just say well all right you know

928
00:53:56,190 --> 00:54:03,329
that's something that goes in here and

929
00:54:00,230 --> 00:54:05,519
maybe we continue to thunk through this

930
00:54:03,329 --> 00:54:09,509
this way but eventually we could unify

931
00:54:05,519 --> 00:54:10,889
these two things in a better way so you

932
00:54:09,510 --> 00:54:13,800
know we'll call the get main function

933
00:54:10,889 --> 00:54:16,889
there and it will output it the same

934
00:54:13,800 --> 00:54:20,000
would be true on function summary so you

935
00:54:16,889 --> 00:54:20,000
know this right here

936
00:54:28,239 --> 00:54:47,469
he's gonna do that format string so we'd

937
00:54:44,920 --> 00:54:49,510
call get name and and you know maybe we

938
00:54:47,469 --> 00:54:50,949
pass you a buffer that you can use but

939
00:54:49,510 --> 00:54:52,900
then we return it just in case we want

940
00:54:50,949 --> 00:54:55,179
to short-circuit that process and then

941
00:54:52,900 --> 00:54:57,130
we you know inside the function summary

942
00:54:55,179 --> 00:55:03,639
type we've got you know we've got this

943
00:54:57,130 --> 00:55:05,470
whole thing as well and you can kind of

944
00:55:03,639 --> 00:55:09,420
see how we would want to make this a lot

945
00:55:05,469 --> 00:55:21,129
better than it is kind of going forwards

946
00:55:09,420 --> 00:55:28,358
for size buffer and and I'm really

947
00:55:21,130 --> 00:55:31,180
tempted to do so but you know trying to

948
00:55:28,358 --> 00:55:33,699
keep it to a minimum so in here we can

949
00:55:31,179 --> 00:55:39,098
just patch that and then you know this

950
00:55:33,699 --> 00:55:43,389
will overwrite sort of the default

951
00:55:39,099 --> 00:55:47,140
result and it's just a hack - it's just

952
00:55:43,389 --> 00:55:48,730
a total like way to patch around what's

953
00:55:47,139 --> 00:55:50,769
happening rather than just rewriting the

954
00:55:48,730 --> 00:55:54,639
thing around it to do what it really

955
00:55:50,769 --> 00:55:56,650
should have done in the first place so

956
00:55:54,639 --> 00:55:59,679
either of these two is then the same

957
00:55:56,650 --> 00:56:01,500
meaning if you get either of those since

958
00:55:59,679 --> 00:56:05,679
we now want those to be able to be

959
00:56:01,500 --> 00:56:07,088
selectable expansion lines then we end

960
00:56:05,679 --> 00:56:12,309
up in a position where we kind of have

961
00:56:07,088 --> 00:56:15,400
to make this stuff happen and so both of

962
00:56:12,309 --> 00:56:18,730
those are going to want to do you know

963
00:56:15,400 --> 00:56:21,730
the the debug state call and they're

964
00:56:18,730 --> 00:56:28,659
going to want to have that buffer

965
00:56:21,730 --> 00:56:35,679
available in case they need to fill it

966
00:56:28,659 --> 00:56:37,149
so those can call it that way now and so

967
00:56:35,679 --> 00:56:39,730
when you get the name of the thing it

968
00:56:37,150 --> 00:56:41,778
can expand the name into something more

969
00:56:39,730 --> 00:56:45,139
complete

970
00:56:41,778 --> 00:56:49,489
and so then the question becomes oops

971
00:56:45,139 --> 00:56:53,269
oldest torrid event I don't actually

972
00:56:49,489 --> 00:57:03,818
know what oldest stored event is in this

973
00:56:53,268 --> 00:57:03,818
case tell me what that was

974
00:57:26,349 --> 00:57:31,489
zooming here I guess we don't really

975
00:57:28,789 --> 00:57:36,009
need to do the nil event case so really

976
00:57:31,489 --> 00:57:42,349
what we can do here is say well you know

977
00:57:36,010 --> 00:57:44,980
if the oldest stored event actually

978
00:57:42,349 --> 00:57:53,179
exists at all

979
00:57:44,980 --> 00:58:02,900
then you're gonna do this otherwise

980
00:57:53,179 --> 00:58:06,859
you're not and we can just do it that

981
00:58:02,900 --> 00:58:09,289
way right so you know if eventually you

982
00:58:06,860 --> 00:58:14,660
got this thing or if you didn't then

983
00:58:09,289 --> 00:58:17,329
that's you know off you go and I think

984
00:58:14,659 --> 00:58:18,859
that's all we really need we could do

985
00:58:17,329 --> 00:58:22,329
that a little bit cleaner than we do in

986
00:58:18,860 --> 00:58:22,329
fact I suppose I should do it this way

987
00:58:33,599 --> 00:58:38,009
so we just switch on whether or not we

988
00:58:35,800 --> 00:58:45,100
got a HUD function and we just set this

989
00:58:38,010 --> 00:58:54,430
to zero first right and that's pretty

990
00:58:45,099 --> 00:58:56,159
basic so I think that's good news that's

991
00:58:54,429 --> 00:58:59,949
gonna work

992
00:58:56,159 --> 00:59:18,000
so I think that's pretty good function

993
00:58:59,949 --> 00:59:20,349
name can also default to the value and

994
00:59:18,000 --> 00:59:22,929
then in here anytime that we were

995
00:59:20,349 --> 00:59:25,929
previously doing that get name where we

996
00:59:22,929 --> 00:59:30,819
need to do a format string there we

997
00:59:25,929 --> 00:59:43,509
could have a buffer that does the get

998
00:59:30,820 --> 00:59:48,600
name the element gets passed last the

999
00:59:43,510 --> 00:59:51,580
debug state gets passed here right yeah

1000
00:59:48,599 --> 00:59:53,739
so any way that we anywhere we do that

1001
00:59:51,579 --> 00:59:56,529
we want to actually call the get name

1002
00:59:53,739 --> 00:59:58,659
that way and you know we could try do we

1003
00:59:56,530 --> 01:00:00,460
could again like not call it in certain

1004
00:59:58,659 --> 01:00:03,210
places if we know that we don't need to

1005
01:00:00,460 --> 01:00:05,500
but it's still yeah I mean like I said

1006
01:00:03,210 --> 01:00:07,510
this is not really the way I would want

1007
01:00:05,500 --> 01:00:11,349
to do this you know if we were shipping

1008
01:00:07,510 --> 01:00:13,720
this system as a real thing I would go

1009
01:00:11,349 --> 01:00:16,480
and rewrite a lot of that stuff to work

1010
01:00:13,719 --> 01:00:19,599
in a cleaner way but at the moment you

1011
01:00:16,480 --> 01:00:21,760
know throwing in a bunch of disgusting

1012
01:00:19,599 --> 01:00:23,549
stuff here is totally fine with me

1013
01:00:21,760 --> 01:00:25,900
because I don't this system is not

1014
01:00:23,550 --> 01:00:28,960
really supposed to be ever seen by an

1015
01:00:25,900 --> 01:00:30,010
end user and so if we want to eventually

1016
01:00:28,960 --> 01:00:34,170
make it something that's a little bit

1017
01:00:30,010 --> 01:00:36,850
more real we certainly can do that but

1018
01:00:34,170 --> 01:00:43,110
at the you know will rewrite it at that

1019
01:00:36,849 --> 01:00:43,110
point not right now let's see oops

1020
01:00:49,239 --> 01:00:56,869
but that's it so you know it's ugly but

1021
01:00:52,248 --> 01:00:58,098
at least it's you know simple if you're

1022
01:00:56,869 --> 01:01:00,170
gonna do something ugly you might as

1023
01:00:58,099 --> 01:01:02,960
well do something simple ugly and

1024
01:01:00,170 --> 01:01:18,588
complicated is worse kind of why this

1025
01:01:02,960 --> 01:01:22,059
code isn't good to begin with so I think

1026
01:01:18,588 --> 01:01:25,670
that should allow us to get now a more

1027
01:01:22,059 --> 01:01:27,769
like anyone who wants to make one of

1028
01:01:25,670 --> 01:01:31,880
these things be an actual type I think

1029
01:01:27,768 --> 01:01:35,808
now could do that so they would be able

1030
01:01:31,880 --> 01:01:38,680
to stick actual type of debug event into

1031
01:01:35,809 --> 01:01:42,710
that hierarchy and have that debug event

1032
01:01:38,679 --> 01:01:44,598
produce the actual name so you know

1033
01:01:42,710 --> 01:01:56,960
nothing should change in the immediate

1034
01:01:44,599 --> 01:01:59,769
sense because the the trees in question

1035
01:01:56,960 --> 01:02:03,048
were not created with any particular

1036
01:01:59,768 --> 01:02:04,608
events underneath them and so now if we

1037
01:02:03,048 --> 01:02:06,559
wanted to create an event underneath

1038
01:02:04,608 --> 01:02:12,259
them so for this element if we wanted to

1039
01:02:06,559 --> 01:02:15,259
put into there some kind of a you know

1040
01:02:12,259 --> 01:02:19,039
some kind of a frame information that

1041
01:02:15,259 --> 01:02:23,119
actually had a stored event of a type we

1042
01:02:19,039 --> 01:02:25,249
could do so now if we're just looking

1043
01:02:23,119 --> 01:02:27,079
for last frame data then in theory this

1044
01:02:25,248 --> 01:02:30,139
one you can literally just change the

1045
01:02:27,079 --> 01:02:32,329
type and I think it works so meaning in

1046
01:02:30,139 --> 01:02:43,909
here if I just change the type of this

1047
01:02:32,329 --> 01:02:46,339
thing to be one of these I think you're

1048
01:02:43,909 --> 01:02:50,078
good to go at that point right meaning I

1049
01:02:46,338 --> 01:02:50,078
think that one oops

1050
01:02:50,699 --> 01:03:12,358
I think that one just kind of is all you

1051
01:02:54,989 --> 01:03:13,828
really actually needed it to do so I

1052
01:03:12,358 --> 01:03:15,509
think that works although I don't

1053
01:03:13,829 --> 01:03:17,190
actually know if a debug element is ever

1054
01:03:15,510 --> 01:03:19,650
created for those things to be

1055
01:03:17,190 --> 01:03:22,409
completely honest with you so let me

1056
01:03:19,650 --> 01:03:26,579
just see if I may need to create an

1057
01:03:22,409 --> 01:03:30,980
element that does that so you know the

1058
01:03:26,579 --> 01:03:30,980
diba the variable link

1059
01:03:41,329 --> 01:03:45,880
so yeah like the debug variable link

1060
01:03:44,690 --> 01:03:48,980
itself

1061
01:03:45,880 --> 01:03:55,700
I'd like that that also has a name like

1062
01:03:48,980 --> 01:03:57,679
what's the point of that so we want that

1063
01:03:55,699 --> 01:04:00,009
to use the name of the element for sure

1064
01:03:57,679 --> 01:04:00,009
right

1065
01:04:12,809 --> 01:04:18,190
yeah I mean so I guess the problem there

1066
01:04:16,030 --> 01:04:20,290
is it doesn't necessarily always create

1067
01:04:18,190 --> 01:04:22,360
one of those elements which is kind of

1068
01:04:20,289 --> 01:04:24,489
nuts like I don't know why we have to

1069
01:04:22,360 --> 01:04:26,800
have links and elements because since

1070
01:04:24,489 --> 01:04:35,349
the elements themselves I mean I guess

1071
01:04:26,800 --> 01:04:41,590
the idea I guess the idea here is just

1072
01:04:35,349 --> 01:04:43,089
that like okay elements are a little

1073
01:04:41,590 --> 01:04:47,740
heavier weight because they have to have

1074
01:04:43,090 --> 01:04:56,130
debug frames worth of stuff stored in

1075
01:04:47,739 --> 01:04:56,129
them maybe

1076
01:05:05,429 --> 01:05:10,808
but I mean if I'm just you know looking

1077
01:05:09,159 --> 01:05:14,318
at that I'm like well why wouldn't you

1078
01:05:10,809 --> 01:05:17,470
still want to create an element for each

1079
01:05:14,318 --> 01:05:21,608
of those so that the variable link that

1080
01:05:17,469 --> 01:05:22,500
links to it links to it properly you

1081
01:05:21,608 --> 01:05:25,028
know what I mean

1082
01:05:22,500 --> 01:05:26,889
like I feel like you really want to

1083
01:05:25,028 --> 01:05:30,760
force there to be an element at any

1084
01:05:26,889 --> 01:05:33,210
given time and the element is the thing

1085
01:05:30,760 --> 01:05:38,500
that you know stores this information

1086
01:05:33,210 --> 01:05:42,159
because well I think you kind of want

1087
01:05:38,500 --> 01:05:43,989
that to be true for debug variable links

1088
01:05:42,159 --> 01:05:47,078
doing next in previous and first child

1089
01:05:43,989 --> 01:05:49,838
last child right so unique you kind of

1090
01:05:47,079 --> 01:05:53,589
just want to then then just have the

1091
01:05:49,838 --> 01:05:54,818
element come off of it I would think so

1092
01:05:53,588 --> 01:05:58,568
I kind of feel like you really want to

1093
01:05:54,818 --> 01:06:05,619
do that and just trim the fat out of

1094
01:05:58,568 --> 01:06:07,449
that hear what I mean I think that's

1095
01:06:05,619 --> 01:06:09,640
what you want to do and it does mean you

1096
01:06:07,449 --> 01:06:11,048
will create dummy elements but I think

1097
01:06:09,639 --> 01:06:12,578
that's way better than what we were

1098
01:06:11,048 --> 01:06:14,170
doing before which seems like a really

1099
01:06:12,579 --> 01:06:15,869
bad idea

1100
01:06:14,170 --> 01:06:18,548
and so when you create one of these

1101
01:06:15,869 --> 01:06:21,160
variable links I think you want to pass

1102
01:06:18,548 --> 01:06:26,190
to it you know what the element was that

1103
01:06:21,159 --> 01:06:35,318
you were using most of the time right

1104
01:06:26,190 --> 01:06:37,210
and just looking through here like yeah

1105
01:06:35,318 --> 01:06:40,900
I mean that just seems like obviously

1106
01:06:37,210 --> 01:06:48,309
right so when you clone a variable link

1107
01:06:40,900 --> 01:06:50,470
right in this case it it will copy the

1108
01:06:48,309 --> 01:06:53,200
element so really the only person is

1109
01:06:50,469 --> 01:06:56,739
create who needs to fix what they're

1110
01:06:53,199 --> 01:06:59,348
doing so really create variable link is

1111
01:06:56,739 --> 01:07:03,368
the if you will pardon the pond weak

1112
01:06:59,349 --> 01:07:07,720
link so in the click in the places where

1113
01:07:03,369 --> 01:07:13,329
create variable link is called you know

1114
01:07:07,719 --> 01:07:15,429
there there is the element and here

1115
01:07:13,329 --> 01:07:17,590
there isn't and you would want to create

1116
01:07:15,429 --> 01:07:19,750
a synthetic element for it

1117
01:07:17,590 --> 01:07:24,250
same youth here same with here same with

1118
01:07:19,750 --> 01:07:36,880
here so really these all of these should

1119
01:07:24,250 --> 01:07:42,039
really just be this this should not ever

1120
01:07:36,880 --> 01:07:47,410
happen right and that should go like

1121
01:07:42,039 --> 01:07:49,420
that so this one here where it does

1122
01:07:47,409 --> 01:07:52,989
create variable link that's going to

1123
01:07:49,420 --> 01:07:58,030
pass this this is not going to happen

1124
01:07:52,989 --> 01:08:01,929
and so all of that's fine when you go

1125
01:07:58,030 --> 01:08:04,960
through this process and you're doing

1126
01:08:01,929 --> 01:08:08,799
get a create group with name and you

1127
01:08:04,960 --> 01:08:11,949
pass the name then when you do this

1128
01:08:08,800 --> 01:08:16,359
checking again that's gonna want to look

1129
01:08:11,949 --> 01:08:19,479
to see if the group has the same element

1130
01:08:16,359 --> 01:08:21,039
pointer really or an element pointer

1131
01:08:19,479 --> 01:08:25,719
with an equivalent name it's what you're

1132
01:08:21,039 --> 01:08:30,250
actually looking for and so I think what

1133
01:08:25,720 --> 01:08:33,609
you want to do here is say create

1134
01:08:30,250 --> 01:08:36,279
variable link with like a dummy element

1135
01:08:33,609 --> 01:08:46,150
you know what I mean so you're gonna

1136
01:08:36,279 --> 01:08:48,568
you're gonna push that on and you really

1137
01:08:46,149 --> 01:08:48,568
want this

1138
01:08:53,649 --> 01:09:00,829
so there's an element that's just a name

1139
01:08:56,180 --> 01:09:08,810
that's all it does and then that gets

1140
01:09:00,829 --> 01:09:10,220
you know gets this code yeah so I think

1141
01:09:08,810 --> 01:09:11,270
that's all you really want here so when

1142
01:09:10,220 --> 01:09:12,350
you create the very like you do you

1143
01:09:11,270 --> 01:09:13,910
create you know you create a name

1144
01:09:12,350 --> 01:09:17,210
element care

1145
01:09:13,909 --> 01:09:20,210
the name element is gonna be debug state

1146
01:09:17,210 --> 01:09:21,439
your name length name you know what I

1147
01:09:20,210 --> 01:09:23,539
mean

1148
01:09:21,439 --> 01:09:25,369
and so in here where you do the strings

1149
01:09:23,539 --> 01:09:27,949
are equal tests the strings are equal

1150
01:09:25,369 --> 01:09:31,010
test is going to use whatever that debug

1151
01:09:27,949 --> 01:09:36,710
element itself was using so inside the

1152
01:09:31,010 --> 01:09:41,000
create you know inside here you would

1153
01:09:36,710 --> 01:09:43,730
just have that temp variable which is

1154
01:09:41,000 --> 01:09:47,329
used to figure out what the name

1155
01:09:43,729 --> 01:09:49,279
actually was now since you don't want to

1156
01:09:47,329 --> 01:09:53,119
actually be doing expansions in here I

1157
01:09:49,279 --> 01:09:56,269
would say what you want to do is like

1158
01:09:53,119 --> 01:09:59,359
actually in here say okay get named

1159
01:09:56,270 --> 01:10:02,810
direct you would want to have a way of

1160
01:09:59,359 --> 01:10:06,229
saying in here tell me what the name of

1161
01:10:02,810 --> 01:10:08,750
this link would be if we weren't going

1162
01:10:06,229 --> 01:10:10,759
to expand it at all so if it just had to

1163
01:10:08,750 --> 01:10:15,439
look at the most direct version of the

1164
01:10:10,760 --> 01:10:17,030
name and really that's just a way of

1165
01:10:15,439 --> 01:10:19,339
saying I want to make sure it has an

1166
01:10:17,029 --> 01:10:28,939
element so you know we could also do

1167
01:10:19,340 --> 01:10:32,949
this and I mean honestly maybe it's

1168
01:10:28,939 --> 01:10:32,949
pointless to have a variable there

1169
01:10:38,340 --> 01:10:49,180
right so I think that's more or less

1170
01:10:47,079 --> 01:10:50,890
what we want given you know in terms of

1171
01:10:49,180 --> 01:10:52,480
making a situation that maybe isn't

1172
01:10:50,890 --> 01:11:00,400
great into something that's at least

1173
01:10:52,479 --> 01:11:02,019
okay and I like I would love to spend

1174
01:11:00,399 --> 01:11:05,279
some time improving this but you know

1175
01:11:02,020 --> 01:11:07,840
maybe just not today

1176
01:11:05,279 --> 01:11:10,029
cuz I don't really want to spend more

1177
01:11:07,840 --> 01:11:11,829
than a stream on it and that would kind

1178
01:11:10,029 --> 01:11:13,479
of be more getting into like let's let's

1179
01:11:11,829 --> 01:11:15,699
do a second pass or improving the debug

1180
01:11:13,479 --> 01:11:19,359
stuff so assuming that I want to do the

1181
01:11:15,699 --> 01:11:23,019
get name here we know that the link you

1182
01:11:19,359 --> 01:11:30,219
know has a has an element there and I

1183
01:11:23,020 --> 01:11:42,930
can get the name of it when we actually

1184
01:11:30,220 --> 01:11:42,930
use that it's this yeah

1185
01:11:47,649 --> 01:11:50,649
hmm

1186
01:11:50,930 --> 01:11:56,300
what is the complaint here

1187
01:11:53,550 --> 01:11:56,300
Oh parent

1188
01:12:11,849 --> 01:12:19,469
so where is create variable Lincoln why

1189
01:12:14,880 --> 01:12:22,380
was that not accepting that create

1190
01:12:19,469 --> 01:12:25,020
variable link why is that not accepting

1191
01:12:22,380 --> 01:12:27,060
what I want it to be called seems fine

1192
01:12:25,020 --> 01:12:31,219
is it just create name element oh yeah

1193
01:12:27,060 --> 01:12:37,530
so actually it's the fact that this

1194
01:12:31,219 --> 01:12:42,448
needs to have the debug state so I think

1195
01:12:37,529 --> 01:12:44,340
that's fine now so this would be like in

1196
01:12:42,448 --> 01:12:47,899
here now we can create the exact things

1197
01:12:44,340 --> 01:12:54,328
that I wanted because now we can create

1198
01:12:47,899 --> 01:12:55,828
arbitrary pieces of you know arbitrary

1199
01:12:54,328 --> 01:12:57,479
elements that can represent anything we

1200
01:12:55,828 --> 01:12:58,859
want and we can put them in there which

1201
01:12:57,479 --> 01:13:00,629
is what I actually wanted to have happen

1202
01:12:58,859 --> 01:13:03,719
in the first place right

1203
01:13:00,630 --> 01:13:05,789
um so I think that's pretty much done

1204
01:13:03,719 --> 01:13:07,529
now so when we want to create one of

1205
01:13:05,789 --> 01:13:10,500
these see bug elements I'm gonna look to

1206
01:13:07,529 --> 01:13:12,840
see how we were creating those before

1207
01:13:10,500 --> 01:13:15,560
because to be honest with you I have no

1208
01:13:12,840 --> 01:13:15,560
idea right

1209
01:13:25,170 --> 01:13:36,520
like that's not creating one yeah I

1210
01:13:34,899 --> 01:13:38,699
don't even know who was ever creating

1211
01:13:36,520 --> 01:13:38,700
these

1212
01:13:49,819 --> 01:13:56,329
so it looks like it literally this is

1213
01:13:52,850 --> 01:13:59,539
the only place that we ever did that and

1214
01:13:56,329 --> 01:14:01,850
here's how we were filling it out so if

1215
01:13:59,539 --> 01:14:09,829
we want to like inside create named

1216
01:14:01,850 --> 01:14:15,410
elements you know I guess we can I guess

1217
01:14:09,829 --> 01:14:18,350
we can create one this way so we push

1218
01:14:15,409 --> 01:14:23,119
one of these on we it doesn't have a way

1219
01:14:18,350 --> 01:14:25,070
of globally identifying itself so that's

1220
01:14:23,119 --> 01:14:28,220
just going to be zero

1221
01:14:25,069 --> 01:14:31,369
same with this like all of that stuff it

1222
01:14:28,220 --> 01:14:36,470
just doesn't have and then as far as

1223
01:14:31,369 --> 01:14:39,710
these are concerned the name of this is

1224
01:14:36,470 --> 01:14:44,650
going to be what it was was pushed in

1225
01:14:39,710 --> 01:14:44,649
here right so it's it's really gonna be

1226
01:14:45,250 --> 01:14:54,920
this function and I think that's all

1227
01:14:51,829 --> 01:15:05,149
there is the type is going to be

1228
01:14:54,920 --> 01:15:05,840
whatever type you ask it to be yeah and

1229
01:15:05,149 --> 01:15:07,609
that's it

1230
01:15:05,840 --> 01:15:10,369
it doesn't get inserted into the hash

1231
01:15:07,609 --> 01:15:13,130
table you because you can't look these

1232
01:15:10,369 --> 01:15:15,260
up they're not they're not hashed

1233
01:15:13,130 --> 01:15:18,529
they're not they're not hashed by grid

1234
01:15:15,260 --> 01:15:20,780
because there is no grid and I think

1235
01:15:18,529 --> 01:15:23,929
that's basically it if you want to put a

1236
01:15:20,779 --> 01:15:29,359
debug type in there so debug element

1237
01:15:23,930 --> 01:15:31,610
type or what was that thing we called it

1238
01:15:29,359 --> 01:15:34,069
just just debug type so if you want to

1239
01:15:31,609 --> 01:15:36,469
put one of those in there you can and

1240
01:15:34,069 --> 01:15:40,369
then you can just specify what type you

1241
01:15:36,470 --> 01:15:43,000
wanted the thing to be and so for things

1242
01:15:40,369 --> 01:15:43,000
which were

1243
01:15:46,828 --> 01:15:51,719
you know for things that are just sort

1244
01:15:48,748 --> 01:15:53,938
of arbitrary you know these would want

1245
01:15:51,719 --> 01:15:56,429
to be I guess they would want to be sort

1246
01:15:53,939 --> 01:15:57,780
of written here as something special so

1247
01:15:56,429 --> 01:16:00,449
they're kind of like a debug type

1248
01:15:57,779 --> 01:16:02,608
they're just a name you know

1249
01:16:00,448 --> 01:16:05,819
and so by default that is what you would

1250
01:16:02,609 --> 01:16:08,099
say in fact we could you know maybe even

1251
01:16:05,819 --> 01:16:10,918
have that be sort of what would normally

1252
01:16:08,099 --> 01:16:12,208
happen and then if you want to make it

1253
01:16:10,918 --> 01:16:15,389
be something else because it's got a

1254
01:16:12,208 --> 01:16:20,719
fancy way that it wants to to get at its

1255
01:16:15,389 --> 01:16:27,899
information then it can you know and I

1256
01:16:20,719 --> 01:16:30,359
guess I mean I'm not I'm not sure how we

1257
01:16:27,899 --> 01:16:33,829
want the function summary part of things

1258
01:16:30,359 --> 01:16:39,119
to go like where we want to get that

1259
01:16:33,828 --> 01:16:43,978
piece of information from the function

1260
01:16:39,118 --> 01:16:54,208
summary bit I mean cuz how it looks that

1261
01:16:43,979 --> 01:16:57,378
up is kind of I I don't really know how

1262
01:16:54,208 --> 01:17:00,418
it should be looking that up

1263
01:16:57,378 --> 01:17:01,588
so that's part is going to be we're

1264
01:17:00,418 --> 01:17:04,708
going to look at that a little bit more

1265
01:17:01,588 --> 01:17:07,338
carefully so I'm not going to touch that

1266
01:17:04,708 --> 01:17:07,338
just yet

1267
01:17:11,239 --> 01:17:36,760
all right however this stuff can now be

1268
01:17:33,739 --> 01:17:36,760
backported just fine

1269
01:17:40,390 --> 01:17:46,550
so I think you know if we if we now sort

1270
01:17:44,960 --> 01:17:50,720
of say all right that was that was that

1271
01:17:46,550 --> 01:17:55,220
that was what we're doing then this

1272
01:17:50,720 --> 01:17:56,780
stuff okay I'll be honest with you I

1273
01:17:55,220 --> 01:17:59,270
don't understand what just happened

1274
01:17:56,779 --> 01:18:01,189
there that shouldn't have done anything

1275
01:17:59,270 --> 01:18:10,880
oh because we did actually reach in and

1276
01:18:01,189 --> 01:18:14,899
change it never mind so I think that's

1277
01:18:10,880 --> 01:18:17,960
roughly what we wanted to do but you

1278
01:18:14,899 --> 01:18:20,719
know again pretty hacky so let's see

1279
01:18:17,960 --> 01:18:21,920
what's going on here in terms of making

1280
01:18:20,720 --> 01:18:25,070
this I don't know what

1281
01:18:21,920 --> 01:18:28,010
why that's unhandled because the type of

1282
01:18:25,069 --> 01:18:29,929
name as the type should be fine it

1283
01:18:28,010 --> 01:18:33,020
doesn't like the fact that when we're

1284
01:18:29,930 --> 01:18:35,210
interacting with this so it looks like I

1285
01:18:33,020 --> 01:18:39,110
guess the reason for that is because it

1286
01:18:35,210 --> 01:18:42,260
expects there to be events coming in for

1287
01:18:39,109 --> 01:18:43,819
this thing and obviously there aren't

1288
01:18:42,260 --> 01:18:46,520
going to be events coming in for this

1289
01:18:43,819 --> 01:18:50,119
thing so you know it's not an auto

1290
01:18:46,520 --> 01:18:53,690
modify variable it should be a an

1291
01:18:50,119 --> 01:18:58,599
expansion event that happens there you

1292
01:18:53,689 --> 01:18:58,599
know like a toggle right and

1293
01:19:01,590 --> 01:19:06,390
in order to push that on properly you

1294
01:19:04,710 --> 01:19:12,750
know I'd have to I have to make sure I

1295
01:19:06,390 --> 01:19:15,930
can have to make sure I get that part

1296
01:19:12,750 --> 01:19:18,930
correct but at the moment I just want to

1297
01:19:15,930 --> 01:19:23,070
see what was the problem with the

1298
01:19:18,930 --> 01:19:25,110
unhandled bit so that's actually pushing

1299
01:19:23,069 --> 01:19:29,029
it through this path which again I'm not

1300
01:19:25,109 --> 01:19:29,029
sure why it's doing that

1301
01:19:36,109 --> 01:19:41,969
yes so so this on the can have children

1302
01:19:39,899 --> 01:19:45,420
front so I want to figure out what's

1303
01:19:41,970 --> 01:19:48,199
going on there so in here on the can

1304
01:19:45,420 --> 01:19:48,199
have children front

1305
01:19:53,250 --> 01:19:57,869
yeah that that doesn't really make a lot

1306
01:19:55,738 --> 01:20:00,359
of sense to me so I feel like this is is

1307
01:19:57,869 --> 01:20:02,579
just dumb that should go like this and

1308
01:20:00,359 --> 01:20:06,799
that should really be does it have

1309
01:20:02,579 --> 01:20:06,800
children not can it have children right

1310
01:20:07,789 --> 01:20:31,680
so this should just be that so I do

1311
01:20:30,390 --> 01:20:34,980
think this stuff could be simplified

1312
01:20:31,680 --> 01:20:36,329
rather dramatically now you know just

1313
01:20:34,979 --> 01:20:38,218
looking at that code in there if we went

1314
01:20:36,329 --> 01:20:40,439
through it and took a bit of a hammer

1315
01:20:38,219 --> 01:20:45,149
and chisel to it I think we could rather

1316
01:20:40,439 --> 01:20:54,659
rather dramatically fix it but anyway if

1317
01:20:45,149 --> 01:20:56,639
you look here that's a bit weird so it

1318
01:20:54,659 --> 01:20:59,519
looks like can have children is

1319
01:20:56,640 --> 01:21:03,650
evaluating to true for people who don't

1320
01:20:59,520 --> 01:21:08,880
themselves actually have any children

1321
01:21:03,649 --> 01:21:18,689
which is a little confusing to me am I

1322
01:21:08,880 --> 01:21:24,390
wrong about that right I mean it looks

1323
01:21:18,689 --> 01:21:27,359
like so that is actually getting treated

1324
01:21:24,390 --> 01:21:35,369
as if it if can't have children is

1325
01:21:27,359 --> 01:21:38,359
always as if gap so there's always

1326
01:21:35,369 --> 01:21:38,359
equalling

1327
01:21:41,020 --> 01:21:54,670
so I wonder are we actually storing

1328
01:21:43,810 --> 01:21:57,789
these as circular linked lists we are

1329
01:21:54,670 --> 01:22:02,170
alright yeah this code needs to get

1330
01:21:57,789 --> 01:22:04,600
sledge-hammered anyway the code is not

1331
01:22:02,170 --> 01:22:07,300
great but it is functional and that's

1332
01:22:04,600 --> 01:22:13,690
something so let's just finish off what

1333
01:22:07,300 --> 01:22:16,360
we did want to do and and yeah I think

1334
01:22:13,689 --> 01:22:18,069
we came at this so reversed when we did

1335
01:22:16,359 --> 01:22:20,319
it you know figuring out what was going

1336
01:22:18,069 --> 01:22:22,000
on it really needs a pass at the end to

1337
01:22:20,319 --> 01:22:23,549
go okay now that we figured out how all

1338
01:22:22,000 --> 01:22:26,170
this stuff is getting threaded through

1339
01:22:23,550 --> 01:22:29,679
and stored like let's actually go

1340
01:22:26,170 --> 01:22:32,529
through and make this make more sense in

1341
01:22:29,679 --> 01:22:37,270
terms of how we're actually you know

1342
01:22:32,529 --> 01:22:40,649
using it which we never really did you

1343
01:22:37,270 --> 01:22:42,880
know so it's kind of just got too much

1344
01:22:40,649 --> 01:22:45,309
stretching and pulling and then it never

1345
01:22:42,880 --> 01:22:46,900
had a part where we went through and

1346
01:22:45,310 --> 01:22:49,690
actually tried to streamline it so it

1347
01:22:46,899 --> 01:22:51,729
kind of suffers from really roundabout

1348
01:22:49,689 --> 01:22:53,349
things happening that now could just be

1349
01:22:51,729 --> 01:22:55,029
simplified much like what we did with

1350
01:22:53,350 --> 01:22:56,289
the asset system yesterday where we just

1351
01:22:55,029 --> 01:23:00,819
said oh we could clean out this whole

1352
01:22:56,289 --> 01:23:03,698
set of things you know and then did so

1353
01:23:00,819 --> 01:23:07,149
it's just it's just it's unfortunate but

1354
01:23:03,698 --> 01:23:09,428
anyway um so now that that's working

1355
01:23:07,149 --> 01:23:12,399
let's go ahead and make it so that we

1356
01:23:09,429 --> 01:23:15,460
can again like have a more like direct

1357
01:23:12,399 --> 01:23:17,500
access UI for those things so if we're

1358
01:23:15,460 --> 01:23:20,079
looking at like the you know this stuff

1359
01:23:17,500 --> 01:23:23,109
here what I kind of want to do is just

1360
01:23:20,079 --> 01:23:27,059
maybe get the dev modes and and

1361
01:23:23,109 --> 01:23:30,130
correspond them to the dev modes so like

1362
01:23:27,060 --> 01:23:34,060
maybe the way this works here is is less

1363
01:23:30,130 --> 01:23:35,710
like this and and more sort of a you

1364
01:23:34,060 --> 01:23:38,140
know maybe we will store the route group

1365
01:23:35,710 --> 01:23:42,429
but maybe we also say like okay we've

1366
01:23:38,140 --> 01:23:46,869
got variable links for like Devon modes

1367
01:23:42,429 --> 01:23:48,489
and inside the you know the stuff in

1368
01:23:46,869 --> 01:23:50,769
hand made that a chore restore what all

1369
01:23:48,488 --> 01:23:53,198
those dead moves are just so we don't

1370
01:23:50,770 --> 01:23:53,590
have to bother with that we just say

1371
01:23:53,198 --> 01:23:56,559
that there

1372
01:23:53,590 --> 01:24:00,279
account in there and so when we look at

1373
01:23:56,560 --> 01:24:02,260
the dev modes these various pieces that

1374
01:24:00,279 --> 01:24:04,509
we want to kind of put together there

1375
01:24:02,260 --> 01:24:10,420
can just be setup

1376
01:24:04,510 --> 01:24:12,880
/ / dev mode right and so then all we

1377
01:24:10,420 --> 01:24:19,000
would do is say when we go to render

1378
01:24:12,880 --> 01:24:22,480
this stuff right rather than let's go

1379
01:24:19,000 --> 01:24:25,599
pick a particular look let's go draw all

1380
01:24:22,479 --> 01:24:28,118
the trees instead what we would do is

1381
01:24:25,599 --> 01:24:31,060
just say when we add these trees and

1382
01:24:28,118 --> 01:24:36,460
actually I guess I know how to think

1383
01:24:31,060 --> 01:24:42,190
about it yeah oops so sorry about that

1384
01:24:36,460 --> 01:24:45,099
that's not what I okay

1385
01:24:42,189 --> 01:24:47,710
what I meant to say was here so instead

1386
01:24:45,099 --> 01:24:50,889
of having the tree Sentinel maybe we

1387
01:24:47,710 --> 01:24:53,319
just say look we're not gonna have trees

1388
01:24:50,889 --> 01:24:55,300
working that way anymore instead what

1389
01:24:53,319 --> 01:24:59,859
we're gonna do is say there's a set of

1390
01:24:55,300 --> 01:25:01,480
trees they don't they don't have like

1391
01:24:59,859 --> 01:25:05,829
next in previous and they don't link

1392
01:25:01,479 --> 01:25:10,178
together maybe they don't even have a

1393
01:25:05,829 --> 01:25:12,639
position so you know this stuff now

1394
01:25:10,179 --> 01:25:18,849
becomes just a we're gonna draw a

1395
01:25:12,639 --> 01:25:21,969
particular variable link based on the

1396
01:25:18,849 --> 01:25:25,020
dev mode and so if I let's where where

1397
01:25:21,969 --> 01:25:25,020
do we draw the trees here

1398
01:25:27,729 --> 01:25:32,779
yeah so if I look at this right you can

1399
01:25:30,260 --> 01:25:35,449
see it kind of doing its thing here I'm

1400
01:25:32,779 --> 01:25:37,479
gonna say like let's just you know and

1401
01:25:35,449 --> 01:25:40,279
you got draw tree link you can see it

1402
01:25:37,479 --> 01:25:43,219
creating the layout there and then doing

1403
01:25:40,279 --> 01:25:45,289
it so you can you can see this happening

1404
01:25:43,220 --> 01:25:47,780
I'm gonna go ahead and say let's just

1405
01:25:45,289 --> 01:25:49,340
forget about that so I will you know

1406
01:25:47,779 --> 01:25:52,099
we'll leave the tree Sentinel in there

1407
01:25:49,340 --> 01:25:53,840
for the moment and then I will actually

1408
01:25:52,100 --> 01:25:57,800
do what I said I was going to do here

1409
01:25:53,840 --> 01:26:01,010
which is like set up the dev mode links

1410
01:25:57,800 --> 01:26:03,170
and set up those based on the count that

1411
01:26:01,010 --> 01:26:07,100
there are and then we'll just we're

1412
01:26:03,170 --> 01:26:11,239
gonna draw those directly so inside the

1413
01:26:07,100 --> 01:26:14,930
debug setup code you know rather than

1414
01:26:11,239 --> 01:26:18,139
calling this will just call this when we

1415
01:26:14,930 --> 01:26:30,700
create the initial layout right when we

1416
01:26:18,140 --> 01:26:30,700
do where is it so when we do this

1417
01:26:40,250 --> 01:27:00,109
guess I don't know what the group raised

1418
01:26:44,840 --> 01:27:05,869
so really I just want this right so

1419
01:27:00,109 --> 01:27:08,149
inside here we would say this thunks out

1420
01:27:05,869 --> 01:27:13,059
to a thing that draws an individual tree

1421
01:27:08,149 --> 01:27:17,349
and I want to kind of make it so that

1422
01:27:13,060 --> 01:27:21,140
the move box thing is probably outside

1423
01:27:17,350 --> 01:27:32,360
so like it's probably something like

1424
01:27:21,140 --> 01:27:37,660
this you know I'm saying and then here

1425
01:27:32,359 --> 01:27:37,659
it only does this part and in fact I

1426
01:27:40,750 --> 01:27:53,600
don't see any use of the layout in there

1427
01:27:44,180 --> 01:27:56,710
so it's really more like yeah it's it's

1428
01:27:53,600 --> 01:27:56,710
really just this

1429
01:28:03,569 --> 01:28:07,449
what I don't know is why we care about

1430
01:28:06,130 --> 01:28:12,250
the tree group I assume it's for

1431
01:28:07,449 --> 01:28:15,909
differentiation purposes and I suppose

1432
01:28:12,250 --> 01:28:18,850
that's okay it's just a pointer that we

1433
01:28:15,909 --> 01:28:21,519
use for differentiation so you know in

1434
01:28:18,850 --> 01:28:24,760
here you can see like the only thing we

1435
01:28:21,520 --> 01:28:28,000
do is we use it for that differentiation

1436
01:28:24,760 --> 01:28:29,829
that's it right and that's just so that

1437
01:28:28,000 --> 01:28:32,470
you can store information that's

1438
01:28:29,829 --> 01:28:34,390
dependent upon both things so you can

1439
01:28:32,470 --> 01:28:37,420
like expand something in one tree and

1440
01:28:34,390 --> 01:28:39,100
not in another so that's actually okay I

1441
01:28:37,420 --> 01:28:42,699
don't mind that

1442
01:28:39,100 --> 01:28:46,620
so we'll keep passing that down but

1443
01:28:42,699 --> 01:28:50,109
we'll just what we won't really use it

1444
01:28:46,619 --> 01:28:53,849
in in a large extent we will we will

1445
01:28:50,109 --> 01:28:53,849
probably just kind of ignore it right

1446
01:28:54,390 --> 01:29:02,970
okay so if I was to put in the stuff

1447
01:28:57,789 --> 01:29:02,970
here that needs to actually happen that

1448
01:29:03,149 --> 01:29:11,699
looks like that this uip is just like

1449
01:29:07,149 --> 01:29:14,379
where did you want it to be like that

1450
01:29:11,699 --> 01:29:19,260
we've got the you know we've got the

1451
01:29:14,380 --> 01:29:24,000
draw tree link nonsense happening here I

1452
01:29:19,260 --> 01:29:24,000
think that's all there is

1453
01:29:30,520 --> 01:29:36,170
yeah

1454
01:29:32,020 --> 01:29:39,590
so this can still work as it was working

1455
01:29:36,170 --> 01:29:43,399
if we wished it to it just passes that

1456
01:29:39,590 --> 01:29:45,920
UI key down this way and you know the

1457
01:29:43,399 --> 01:29:47,599
group as well and then what we can do

1458
01:29:45,920 --> 01:29:49,010
instead of actually ever calling that

1459
01:29:47,600 --> 01:29:51,140
because I don't actually want to call

1460
01:29:49,010 --> 01:29:55,390
that and you know again in here we say

1461
01:29:51,140 --> 01:29:57,980
like what the debug tree was in question

1462
01:29:55,390 --> 01:30:01,160
we can actually call this directly now

1463
01:29:57,979 --> 01:30:02,779
so instead of calling draw trees which

1464
01:30:01,159 --> 01:30:03,529
we're sort of saying I don't really care

1465
01:30:02,779 --> 01:30:05,269
about anymore

1466
01:30:03,529 --> 01:30:08,630
instead what we're gonna do is called

1467
01:30:05,270 --> 01:30:11,030
draw tree the debug tree tree is just

1468
01:30:08,630 --> 01:30:14,090
gonna be a ridiculous like a nonsense

1469
01:30:11,029 --> 01:30:17,829
tree that we just used for that

1470
01:30:14,090 --> 01:30:20,960
differentiation right so it's not really

1471
01:30:17,829 --> 01:30:22,699
it's not really there and that way we

1472
01:30:20,960 --> 01:30:24,590
can preserve the functionality of if for

1473
01:30:22,699 --> 01:30:28,729
some reason we wanted two trees to

1474
01:30:24,590 --> 01:30:30,619
actually happen we could do that and

1475
01:30:28,729 --> 01:30:32,989
then we'll worry about what this v2 is

1476
01:30:30,619 --> 01:30:35,449
in a second here but then we will say

1477
01:30:32,989 --> 01:30:37,779
whatever the dev mode links are for this

1478
01:30:35,449 --> 01:30:41,029
particular thing so in this case right

1479
01:30:37,779 --> 01:30:42,710
we've got some set of them here whatever

1480
01:30:41,029 --> 01:30:44,029
those dev mode links are those are the

1481
01:30:42,710 --> 01:30:47,420
things that we're actually going to use

1482
01:30:44,029 --> 01:30:49,819
so we're gonna reach into the game state

1483
01:30:47,420 --> 01:30:52,399
find out what that what those are

1484
01:30:49,819 --> 01:30:57,139
actually set to and remember we can I

1485
01:30:52,399 --> 01:30:58,789
think get that I don't remember how we

1486
01:30:57,140 --> 01:31:02,140
were accessing that particular piece of

1487
01:30:58,789 --> 01:31:02,140
information but we were

1488
01:31:11,219 --> 01:31:21,368
it's like get game assets right so you

1489
01:31:19,389 --> 01:31:23,199
can see here from the game memory you

1490
01:31:21,368 --> 01:31:26,408
can get the game state out of it so we

1491
01:31:23,198 --> 01:31:29,529
we are able to read that information

1492
01:31:26,408 --> 01:31:31,898
without needing to know anything else so

1493
01:31:29,529 --> 01:31:34,359
in theory here we should be able to

1494
01:31:31,899 --> 01:31:36,789
actually grab the tree in question

1495
01:31:34,359 --> 01:31:40,228
because we can say whatever that game

1496
01:31:36,788 --> 01:31:58,748
memory was you know that we were using

1497
01:31:40,229 --> 01:32:01,208
so I think where we call debug and write

1498
01:31:58,748 --> 01:32:03,849
we know what that is

1499
01:32:01,208 --> 01:32:08,550
so in debug and here you know we should

1500
01:32:03,849 --> 01:32:08,550
be allowed to do that if we wanted to

1501
01:32:13,408 --> 01:32:18,538
and that's where we would read that

1502
01:32:15,939 --> 01:32:18,539
value out

1503
01:32:26,250 --> 01:32:35,289
so that seems fine we can just do a

1504
01:32:31,829 --> 01:32:39,970
check here just to be like you know if

1505
01:32:35,289 --> 01:32:46,090
game state dev mode is less than a rate

1506
01:32:39,970 --> 01:32:48,220
count key bug state dead links we can

1507
01:32:46,090 --> 01:32:52,119
make sure that we've got one that isn't

1508
01:32:48,220 --> 01:32:59,230
gonna be like illegal and then we can go

1509
01:32:52,119 --> 01:33:01,988
from there but so I think that's fine we

1510
01:32:59,229 --> 01:33:16,179
need to actually pass the tree here like

1511
01:33:01,988 --> 01:33:18,219
so think that's it yeah and so now if we

1512
01:33:16,180 --> 01:33:20,770
run this we should not have any drawing

1513
01:33:18,220 --> 01:33:24,909
from the debug system no matter what I

1514
01:33:20,770 --> 01:33:26,890
put pic here right if I then go and ask

1515
01:33:24,909 --> 01:33:29,920
it to give me one of those debug

1516
01:33:26,890 --> 01:33:32,530
overlays I should be able to now get it

1517
01:33:29,920 --> 01:33:34,270
by just when we actually do our setup so

1518
01:33:32,529 --> 01:33:38,409
when we do like the debug and it's stuff

1519
01:33:34,270 --> 01:33:42,250
so here by setting these things up in

1520
01:33:38,409 --> 01:33:46,779
two particular locations so for example

1521
01:33:42,250 --> 01:33:48,550
I don't actually know which ones of

1522
01:33:46,779 --> 01:33:53,409
these things we want to actually supply

1523
01:33:48,550 --> 01:33:57,340
but for example if I just say that the

1524
01:33:53,409 --> 01:34:00,099
debug state dev mode links and I pick

1525
01:33:57,340 --> 01:34:02,260
one of the F keys that I wanted there so

1526
01:34:00,100 --> 01:34:03,880
like you know inside handmade H I just

1527
01:34:02,260 --> 01:34:06,489
say well whatever was supposed to be

1528
01:34:03,880 --> 01:34:08,319
linked to profiling you know all stuff

1529
01:34:06,488 --> 01:34:10,029
the profiling one here so like I said

1530
01:34:08,319 --> 01:34:14,590
don't really know how this is supposed

1531
01:34:10,029 --> 01:34:17,800
to work um um but maybe it works like

1532
01:34:14,590 --> 01:34:20,050
this who knows

1533
01:34:17,800 --> 01:34:25,840
but anyway so then I've got like the dev

1534
01:34:20,050 --> 01:34:27,789
mode links for rendering equals

1535
01:34:25,840 --> 01:34:30,850
something you know and I don't know what

1536
01:34:27,789 --> 01:34:34,590
it would be but then the debug state you

1537
01:34:30,850 --> 01:34:34,590
know dev mode links

1538
01:34:35,618 --> 01:34:48,979
two modes lighting memory and then maybe

1539
01:34:44,960 --> 01:34:54,050
like just like dump like I said I don't

1540
01:34:48,979 --> 01:34:56,439
know what that is maybe but right now

1541
01:34:54,050 --> 01:34:58,880
that's going to be like the route group

1542
01:34:56,439 --> 01:35:01,578
and then we can start reorganizing this

1543
01:34:58,880 --> 01:35:07,639
stuff so you know if we imagine we're

1544
01:35:01,578 --> 01:35:10,219
doing something like that you know then

1545
01:35:07,639 --> 01:35:21,920
like in theory you know I can set these

1546
01:35:10,219 --> 01:35:24,760
two that's weird why is f5 cause the

1547
01:35:21,920 --> 01:35:24,760
editor to come on

1548
01:35:31,469 --> 01:35:38,448
someone know what's going on there

1549
01:35:34,788 --> 01:35:38,448
where's those F keys

1550
01:36:03,560 --> 01:36:19,160
I don't know why that would be doing

1551
01:36:09,920 --> 01:36:23,239
what it's doing that's bizarre

1552
01:36:19,159 --> 01:36:30,800
don't you agree we're setting the dev

1553
01:36:23,239 --> 01:36:33,019
mode and you know we pass it down just

1554
01:36:30,800 --> 01:36:41,079
so it knows what mode were doing but

1555
01:36:33,020 --> 01:36:41,080
it's like it should always be so uh

1556
01:36:41,710 --> 01:36:47,869
that's interesting so it turns the

1557
01:36:45,649 --> 01:36:50,329
editor of the editor believes itself to

1558
01:36:47,869 --> 01:36:53,539
be in that mode when we when we actually

1559
01:36:50,329 --> 01:36:57,399
hit that button so like you know when we

1560
01:36:53,539 --> 01:36:57,399
set the dev mode to dev mode profiling

1561
01:37:06,750 --> 01:37:11,430
but I've no idea why so I'm interested

1562
01:37:08,850 --> 01:37:12,960
that I'd like to do a little stepping

1563
01:37:11,430 --> 01:37:17,250
into there just to see what's going on

1564
01:37:12,960 --> 01:37:20,149
because that's a peculiar one inside the

1565
01:37:17,250 --> 01:37:20,149
editor Oh

1566
01:37:25,619 --> 01:37:36,420
because writes yeah that's actually how

1567
01:37:29,609 --> 01:37:47,609
we wrote it so for now I guess we want

1568
01:37:36,420 --> 01:37:59,460
to do it this way and we'll cross that

1569
01:37:47,609 --> 01:38:02,729
bridge when we come to it all right so I

1570
01:37:59,460 --> 01:38:04,109
think that's fine and then we just need

1571
01:38:02,729 --> 01:38:07,469
to create like the correct correct

1572
01:38:04,109 --> 01:38:11,489
position from it so we'll see what

1573
01:38:07,470 --> 01:38:13,199
happens so it doesn't like looking at

1574
01:38:11,489 --> 01:38:15,569
that which I guess I can understand so I

1575
01:38:13,199 --> 01:38:23,309
don't know where those groups actually

1576
01:38:15,569 --> 01:38:27,809
are so we need to kind of get this stuff

1577
01:38:23,310 --> 01:38:29,789
going right so in terms of building what

1578
01:38:27,810 --> 01:38:33,210
interface we want here I think what I

1579
01:38:29,789 --> 01:38:35,359
want to do I guess so you can see how

1580
01:38:33,210 --> 01:38:37,619
we're doing like a debug data block and

1581
01:38:35,359 --> 01:38:43,529
then we say like okay here's the things

1582
01:38:37,619 --> 01:38:45,510
that go inside the profiler right in

1583
01:38:43,529 --> 01:38:48,869
terms of how we're we're making that go

1584
01:38:45,510 --> 01:38:52,289
we kind of want it here say like look we

1585
01:38:48,869 --> 01:38:55,619
want you to put that inside one of our

1586
01:38:52,289 --> 01:39:00,380
things like what we want we want the

1587
01:38:55,619 --> 01:39:02,939
ability to like specify that stuff and

1588
01:39:00,380 --> 01:39:06,390
so I'm trying to think of like what the

1589
01:39:02,939 --> 01:39:08,250
best way to do that would be because we

1590
01:39:06,390 --> 01:39:11,220
don't really want what I did here which

1591
01:39:08,250 --> 01:39:13,409
was just to do it inside this so in

1592
01:39:11,220 --> 01:39:18,570
terms of placing those things somewhere

1593
01:39:13,409 --> 01:39:21,859
I mean I think I mean guess I don't

1594
01:39:18,569 --> 01:39:21,859
really know but

1595
01:39:22,119 --> 01:39:28,250
and even this I don't I guess we don't

1596
01:39:25,670 --> 01:39:30,739
really even need that anymore so I think

1597
01:39:28,250 --> 01:39:33,770
what we want to do here is just say look

1598
01:39:30,738 --> 01:39:40,879
these devmode links things are just when

1599
01:39:33,770 --> 01:39:43,489
you actually when we see you ask for one

1600
01:39:40,880 --> 01:39:49,969
of these things to go into the HUD then

1601
01:39:43,488 --> 01:39:59,299
it just does I think that's all we

1602
01:39:49,969 --> 01:40:04,850
really need to say probably and I

1603
01:39:59,300 --> 01:40:09,980
suppose I suppose we could even just

1604
01:40:04,850 --> 01:40:12,560
make that be some way that you just set

1605
01:40:09,979 --> 01:40:15,439
what the debug thing is set to I don't

1606
01:40:12,560 --> 01:40:17,420
know there but anyway so like if we look

1607
01:40:15,439 --> 01:40:19,369
at what's going on here yeah like I want

1608
01:40:17,420 --> 01:40:22,940
to be able to say like set this thing

1609
01:40:19,369 --> 01:40:27,859
this data block to be the one that's

1610
01:40:22,939 --> 01:40:36,169
actually being used when we go into of

1611
01:40:27,859 --> 01:40:39,859
the debug collation pass so in here you

1612
01:40:36,170 --> 01:40:45,739
know when we see the different types of

1613
01:40:39,859 --> 01:40:51,579
data that are coming through it seems

1614
01:40:45,738 --> 01:40:54,829
like you could just say well whoever the

1615
01:40:51,579 --> 01:40:56,479
parent is if I say that that's somebody

1616
01:40:54,829 --> 01:40:58,779
who gets stored to the debug state than

1617
01:40:56,479 --> 01:40:58,779
it is

1618
01:41:29,390 --> 01:41:34,500
you know so you know what the default

1619
01:41:31,739 --> 01:41:36,479
parent group is right here right and so

1620
01:41:34,500 --> 01:41:39,050
what you could do is just say yeah you

1621
01:41:36,479 --> 01:42:01,469
know if if I see one of these things

1622
01:41:39,050 --> 01:42:03,900
like I could just say that and so then

1623
01:42:01,470 --> 01:42:06,659
the only question is like what is the

1624
01:42:03,899 --> 01:42:08,819
VAT like what goes in there here what I

1625
01:42:06,659 --> 01:42:11,000
mean and then you would say something

1626
01:42:08,819 --> 01:42:11,000
like

1627
01:42:17,920 --> 01:42:26,020
makes sense and so in this case I guess

1628
01:42:23,020 --> 01:42:28,330
since we know you know you're allowed to

1629
01:42:26,020 --> 01:42:31,360
do whatever you want as far as data is

1630
01:42:28,329 --> 01:42:33,130
concerned so you know you have the event

1631
01:42:31,359 --> 01:42:36,069
here so you should just be able to say

1632
01:42:33,130 --> 01:42:43,270
look that just all that does is set this

1633
01:42:36,069 --> 01:42:54,909
up so inside here you also have a thing

1634
01:42:43,270 --> 01:42:57,730
that's like oh there's there's that when

1635
01:42:54,909 --> 01:43:00,550
you encounter one of those inside here

1636
01:42:57,729 --> 01:43:04,178
it's just gonna take whatever that the

1637
01:43:00,550 --> 01:43:04,960
dev mode value is you know and it's

1638
01:43:04,179 --> 01:43:20,940
gonna use it

1639
01:43:04,960 --> 01:43:23,560
so it'll say like whatever the event

1640
01:43:20,939 --> 01:43:25,869
value would have been like this you 32

1641
01:43:23,560 --> 01:43:30,300
it'll just say like if that's less than

1642
01:43:25,869 --> 01:43:36,789
how many of these we are allowed to set

1643
01:43:30,300 --> 01:43:38,829
then go ahead and do it right so I think

1644
01:43:36,789 --> 01:43:41,100
that's all we would really need to do

1645
01:43:38,829 --> 01:43:43,689
for that set HUD and so inside here

1646
01:43:41,100 --> 01:43:45,460
where we actually you know record these

1647
01:43:43,689 --> 01:43:51,669
things they and they you know pop

1648
01:43:45,460 --> 01:43:55,840
through whenever we're doing one of

1649
01:43:51,670 --> 01:44:01,090
these debug event records I think that's

1650
01:43:55,840 --> 01:44:02,980
probably it you know what I mean

1651
01:44:01,090 --> 01:44:05,230
so let's see I don't know if that's

1652
01:44:02,979 --> 01:44:10,529
actually true but if I wanted to make

1653
01:44:05,229 --> 01:44:10,529
one of these for the debug system

1654
01:44:13,198 --> 01:44:24,869
and so it's just all it is is just that

1655
01:44:16,948 --> 01:44:28,409
value the debug name probably can stay

1656
01:44:24,869 --> 01:44:33,719
what it is and this is probably just

1657
01:44:28,409 --> 01:44:36,869
that and this is gonna be dev I guess

1658
01:44:33,719 --> 01:44:46,969
well I guess it's still just that no it

1659
01:44:36,869 --> 01:44:56,399
bid be set HUD right yeah I guess I

1660
01:44:46,969 --> 01:44:58,469
don't really know so yeah that works so

1661
01:44:56,399 --> 01:45:00,210
I think that means kind of the nice

1662
01:44:58,469 --> 01:45:01,829
thing about that is the debug system

1663
01:45:00,210 --> 01:45:03,539
doesn't really have to be aware of any

1664
01:45:01,829 --> 01:45:15,539
of these things now so you could just

1665
01:45:03,539 --> 01:45:28,100
say you know that's rendering that's

1666
01:45:15,539 --> 01:45:28,100
lighting and you know it would just work

1667
01:45:32,238 --> 01:45:41,639
right and that's pretty cool actually

1668
01:45:37,679 --> 01:45:44,300
so I think now we're mostly done with

1669
01:45:41,640 --> 01:45:44,300
what I wanted

1670
01:45:50,789 --> 01:45:56,130
I think that's pretty much everything so

1671
01:45:54,149 --> 01:45:58,319
that's a lot more than actually what I

1672
01:45:56,130 --> 01:45:59,670
hope to accomplish I was gonna just do

1673
01:45:58,319 --> 01:46:00,569
some quick sup move on but I kind of got

1674
01:45:59,670 --> 01:46:02,190
a little bit more into it so that

1675
01:46:00,569 --> 01:46:04,019
actually is more than I needed but I

1676
01:46:02,189 --> 01:46:05,460
think that's what we want so then all I

1677
01:46:04,020 --> 01:46:08,370
need to do is just snap this to the

1678
01:46:05,460 --> 01:46:10,140
upper corner and I think we're done so

1679
01:46:08,369 --> 01:46:14,849
you know when we look at what the actual

1680
01:46:10,140 --> 01:46:17,550
layout of this frame is when we look at

1681
01:46:14,850 --> 01:46:20,340
whatever the render state is I want this

1682
01:46:17,550 --> 01:46:23,900
to not be 0 0 I want it to be like the

1683
01:46:20,340 --> 01:46:28,380
upper left corner let's say for example

1684
01:46:23,899 --> 01:46:30,269
so this information this is actually

1685
01:46:28,380 --> 01:46:32,460
what I need it to be and I need to be

1686
01:46:30,270 --> 01:46:39,120
able to get what that wit and width and

1687
01:46:32,460 --> 01:46:40,949
height actually are so I want this and

1688
01:46:39,119 --> 01:46:47,760
in order to get those two pieces of

1689
01:46:40,949 --> 01:46:51,649
information I would need to look at the

1690
01:46:47,760 --> 01:46:55,320
render group which we have I believe

1691
01:46:51,649 --> 01:47:02,509
it's it's off of the UI though if I'm

1692
01:46:55,319 --> 01:47:02,509
not mistaken just actually down here

1693
01:47:11,800 --> 01:47:17,779
and so you know I I just want those to

1694
01:47:15,649 --> 01:47:19,460
always be up there now like I don't want

1695
01:47:17,779 --> 01:47:22,939
them like floating around I want to have

1696
01:47:19,460 --> 01:47:28,219
them be what what they actually are

1697
01:47:22,939 --> 01:47:39,198
let me hope let me just see here where

1698
01:47:28,219 --> 01:47:45,920
is render group it's actually in the

1699
01:47:39,198 --> 01:47:57,319
commands of render group isn't it yes

1700
01:47:45,920 --> 01:47:59,059
this so it's actually just render

1701
01:47:57,319 --> 01:48:02,768
command settings with so I'm going to

1702
01:47:59,059 --> 01:48:02,769
just use that more directly

1703
01:48:15,130 --> 01:48:19,639
so now I think that's all wired up

1704
01:48:17,269 --> 01:48:24,969
properly and in theory we would get the

1705
01:48:19,639 --> 01:48:26,840
correct location for our debug data

1706
01:48:24,969 --> 01:48:29,658
maybe maybe not

1707
01:48:26,840 --> 01:48:32,779
we'll see there is something really

1708
01:48:29,658 --> 01:48:35,299
weird that's going on with how we're

1709
01:48:32,779 --> 01:48:37,518
getting the letterboxing they're like

1710
01:48:35,300 --> 01:48:39,889
you'll notice the same thing happens we

1711
01:48:37,519 --> 01:48:42,550
should look into what it is the same

1712
01:48:39,889 --> 01:48:45,019
thing happens here like this should be

1713
01:48:42,550 --> 01:48:49,579
correct and it's not so our like

1714
01:48:45,019 --> 01:48:56,300
transform is not quite right that makes

1715
01:48:49,578 --> 01:48:59,299
sense so this is a little bit more easy

1716
01:48:56,300 --> 01:49:00,949
to use now too right so we can quickly

1717
01:48:59,300 --> 01:49:05,269
jump to whichever one of these were

1718
01:49:00,948 --> 01:49:07,098
actually trying to use and we still

1719
01:49:05,269 --> 01:49:08,630
should be able to do the global one too

1720
01:49:07,099 --> 01:49:10,819
like if we want to put a thing in there

1721
01:49:08,630 --> 01:49:14,328
that's like go back to the weird like

1722
01:49:10,819 --> 01:49:16,880
complete ontology one we can also make

1723
01:49:14,328 --> 01:49:19,698
this default to be bigger now too so it

1724
01:49:16,880 --> 01:49:22,368
would just by default extend down to

1725
01:49:19,698 --> 01:49:24,859
show more of our of our profile at any

1726
01:49:22,368 --> 01:49:26,118
given time so we're you know we're

1727
01:49:24,859 --> 01:49:28,268
getting there

1728
01:49:26,118 --> 01:49:33,279
we're getting there this could also be

1729
01:49:28,269 --> 01:49:33,280
extended to the full range of things

1730
01:49:33,429 --> 01:49:39,679
I'll go ahead and stop for now but

1731
01:49:37,639 --> 01:49:44,050
that's good I'm glad we got that out of

1732
01:49:39,679 --> 01:49:44,050
the way let me go ahead and set this to

1733
01:49:50,698 --> 01:49:56,729
and that way yeah we only get one and I

1734
01:49:53,880 --> 01:50:03,659
can also make this now which which would

1735
01:49:56,729 --> 01:50:10,049
be better - I can make the editor UI so

1736
01:50:03,658 --> 01:50:13,618
instead of it being sort of blocked up

1737
01:50:10,050 --> 01:50:19,800
against the on the middle of the screen

1738
01:50:13,618 --> 01:50:21,689
it can also use the UI space oh that's

1739
01:50:19,800 --> 01:50:24,480
kind of cool so the UI space actually

1740
01:50:21,689 --> 01:50:29,519
says what the min is so I guess I could

1741
01:50:24,479 --> 01:50:32,448
use that instead as well so like for

1742
01:50:29,520 --> 01:50:32,449
example here

1743
01:50:45,250 --> 01:51:04,630
I'm not sure that that's correct so this

1744
01:50:54,010 --> 01:51:07,600
should really just be we have any like

1745
01:51:04,630 --> 01:51:09,940
min dim there we go let's go say this

1746
01:51:07,600 --> 01:51:11,650
should really be this because it was

1747
01:51:09,939 --> 01:51:15,759
being specified in a rather weird way

1748
01:51:11,649 --> 01:51:17,889
there um but the UI space min and Max

1749
01:51:15,760 --> 01:51:20,020
there I don't really remember how that

1750
01:51:17,890 --> 01:51:24,039
was getting set up but I wonder if we

1751
01:51:20,020 --> 01:51:27,190
should just be using that I don't really

1752
01:51:24,039 --> 01:51:30,069
remember when UI space gets set but I

1753
01:51:27,189 --> 01:51:33,659
wonder if we can just use that in in the

1754
01:51:30,069 --> 01:51:33,659
thing you buy space min

1755
01:51:42,439 --> 01:51:46,089
and when that gets set up

1756
01:52:03,890 --> 01:52:10,079
so when you begin the UI frame it sets

1757
01:52:07,079 --> 01:52:14,880
that up to be zero zero two width and

1758
01:52:10,079 --> 01:52:19,350
height but that's not right is it

1759
01:52:14,880 --> 01:52:24,090
because that's not where it actually

1760
01:52:19,350 --> 01:52:26,910
starts like what's going on there

1761
01:52:24,090 --> 01:52:28,560
oh it's cuz it's centered in yeah

1762
01:52:26,909 --> 01:52:31,409
alright nevermind so that would work so

1763
01:52:28,560 --> 01:52:34,430
if that's center dim then why doesn't

1764
01:52:31,409 --> 01:52:43,109
this start at the top

1765
01:52:34,430 --> 01:52:45,840
did I do something weird yeah so it

1766
01:52:43,109 --> 01:52:51,619
needs to be min max right like yeah I

1767
01:52:45,840 --> 01:52:59,880
thought so so this actually has to be

1768
01:52:51,619 --> 01:53:02,159
set slightly differently but it should

1769
01:52:59,880 --> 01:53:11,909
be the entire it should be the entire

1770
01:53:02,159 --> 01:53:15,059
thing so I guess I fell right I guess I

1771
01:53:11,909 --> 01:53:17,880
see why I did this before so we want the

1772
01:53:15,060 --> 01:53:27,390
thing to go from the minimum to the

1773
01:53:17,880 --> 01:53:29,130
minimum X plus 700 and the max Y so I

1774
01:53:27,390 --> 01:53:31,920
did have it written right before I was

1775
01:53:29,130 --> 01:53:34,289
just being a little weird so now when we

1776
01:53:31,920 --> 01:53:37,079
do the editor right it should be the

1777
01:53:34,289 --> 01:53:39,359
whole sidebar and the weird part about

1778
01:53:37,079 --> 01:53:41,579
that is just for some reason we have our

1779
01:53:39,359 --> 01:53:44,909
transforms a little bit confused with

1780
01:53:41,579 --> 01:53:47,579
how this is working it seems like we're

1781
01:53:44,909 --> 01:53:49,979
somehow not getting maybe because of the

1782
01:53:47,579 --> 01:53:52,409
title bar we're not actually getting a

1783
01:53:49,979 --> 01:53:55,939
properly aspect ratio of things so when

1784
01:53:52,409 --> 01:53:55,939
you do the transforms you actually did

1785
01:53:56,510 --> 01:54:00,300
non-conforming aspect ratio so we kind

1786
01:53:59,310 --> 01:54:02,490
of got to go look at why that's

1787
01:54:00,300 --> 01:54:06,449
happening but otherwise if that does

1788
01:54:02,489 --> 01:54:09,599
mean is inside here this actually is not

1789
01:54:06,449 --> 01:54:12,869
necessary so I kind of jumped the gun on

1790
01:54:09,600 --> 01:54:15,440
that so what we can do here is actually

1791
01:54:12,869 --> 01:54:15,439
use

1792
01:54:15,659 --> 01:54:30,779
where we say you know this is where we

1793
01:54:26,369 --> 01:54:33,029
want to start displaying all of our

1794
01:54:30,779 --> 01:54:42,689
stuff and so when we draw the tree you

1795
01:54:33,029 --> 01:54:45,809
know we'll do it that way and that would

1796
01:54:42,689 --> 01:54:47,399
let me no longer have to be sort of

1797
01:54:45,810 --> 01:54:49,770
weird about how that's getting passed in

1798
01:54:47,399 --> 01:54:51,149
oops and that's already even a variable

1799
01:54:49,770 --> 01:54:56,630
that we had so we could have just used

1800
01:54:51,149 --> 01:54:56,629
that directly all right

1801
01:55:16,390 --> 01:55:25,100
and so those we probably want to also

1802
01:55:19,250 --> 01:55:29,029
make switch by default there you and I

1803
01:55:25,100 --> 01:55:30,380
mean and there's that yeah so this is

1804
01:55:29,029 --> 01:55:31,189
gonna be good this is this is much

1805
01:55:30,380 --> 01:55:38,750
better than it was

1806
01:55:31,189 --> 01:55:40,099
well we'll we've got a little bit more

1807
01:55:38,750 --> 01:55:42,859
work to do there but we can we can do

1808
01:55:40,100 --> 01:55:44,329
some other stuff all right let's see

1809
01:55:42,859 --> 01:55:45,979
what's going on here how would you go

1810
01:55:44,329 --> 01:55:47,809
about exposing a very object-oriented

1811
01:55:45,979 --> 01:55:51,109
API to see without ending up in the

1812
01:55:47,810 --> 01:55:53,240
disaster that dx12 did with their C API

1813
01:55:51,109 --> 01:56:02,779
especially if the API is something like

1814
01:55:53,239 --> 01:56:09,769
a device for its central access point um

1815
01:56:02,779 --> 01:56:13,550
I guess I don't really know I haven't

1816
01:56:09,770 --> 01:56:17,000
programmed dx12 myself so I don't really

1817
01:56:13,550 --> 01:56:19,820
know what the issues are with that is it

1818
01:56:17,000 --> 01:56:26,149
is it really a disaster I mean you know

1819
01:56:19,819 --> 01:56:28,719
I guess I haven't looked at it um so you

1820
01:56:26,149 --> 01:56:28,719
know maybe it is

1821
01:56:38,769 --> 01:56:46,170
oh my lord

1822
01:56:50,010 --> 01:57:02,829
yeah all right so fantastic um I guess

1823
01:56:56,618 --> 01:57:05,259
what I would say is normally if you were

1824
01:57:02,828 --> 01:57:09,099
just saying meaning you didn't work at

1825
01:57:05,260 --> 01:57:13,329
Microsoft on api's and you're like a

1826
01:57:09,099 --> 01:57:16,389
normal human being it's really not that

1827
01:57:13,328 --> 01:57:18,729
bad like you know if you have an

1828
01:57:16,389 --> 01:57:20,859
object-oriented API and we even do this

1829
01:57:18,729 --> 01:57:22,509
in handmade hero in a sense that we have

1830
01:57:20,859 --> 01:57:25,210
plenty of things that use a particular

1831
01:57:22,510 --> 01:57:42,340
state structure you know if you just

1832
01:57:25,210 --> 01:57:52,260
have something like you know then you

1833
01:57:42,340 --> 01:57:52,260
know just just write that or

1834
01:57:57,279 --> 01:58:05,649
whatever and it's just it's fine right I

1835
01:58:15,069 --> 01:58:21,139
mean there's nothing not object-oriented

1836
01:58:17,868 --> 01:58:22,639
about this right I can just say look I

1837
01:58:21,139 --> 01:58:25,550
want to get this device I want to ask

1838
01:58:22,639 --> 01:58:27,730
the device for a texture I want to free

1839
01:58:25,550 --> 01:58:31,159
the texture I want to close it right

1840
01:58:27,729 --> 01:58:34,098
it's just it looks fine right if you

1841
01:58:31,158 --> 01:58:36,529
just if you just actually only put in

1842
01:58:34,099 --> 01:58:38,869
the things you need for the code to work

1843
01:58:36,529 --> 01:58:41,800
then it just works it's only if you your

1844
01:58:38,868 --> 01:58:44,420
head is filled with all of this crazy

1845
01:58:41,800 --> 01:58:45,619
you know modern programming nonsense

1846
01:58:44,420 --> 01:58:47,210
that you think you would need anything

1847
01:58:45,618 --> 01:58:49,969
more than that I mean that's all you

1848
01:58:47,210 --> 01:58:51,498
need and there's nothing non

1849
01:58:49,969 --> 01:58:53,630
object-oriented about it I mean I don't

1850
01:58:51,498 --> 01:59:01,488
need to see anything in here this could

1851
01:58:53,630 --> 01:59:03,828
just be in a pig handle right I mean it

1852
01:59:01,488 --> 01:59:11,678
can be fully that or it can be you know

1853
01:59:03,828 --> 01:59:11,679
this right and this API works just fine

1854
01:59:14,679 --> 01:59:24,139
you know that there's nothing just

1855
01:59:19,969 --> 01:59:26,658
sensible basic stuff can already be the

1856
01:59:24,139 --> 01:59:28,368
same as object-oriented you know can

1857
01:59:26,658 --> 01:59:30,828
follow any object-oriented principle you

1858
01:59:28,368 --> 01:59:32,748
want where everything is hidden from the

1859
01:59:30,828 --> 01:59:35,719
person who's calling it and you never

1860
01:59:32,748 --> 01:59:39,529
reach inside the struct in any way it

1861
01:59:35,719 --> 01:59:41,300
just works right so it's only because

1862
01:59:39,529 --> 01:59:43,399
people somehow think that there's

1863
01:59:41,300 --> 01:59:44,599
something other than like generating CPU

1864
01:59:43,399 --> 01:59:46,609
instructions that they're supposed to be

1865
01:59:44,599 --> 01:59:49,819
doing at their day job but you know if

1866
01:59:46,609 --> 01:59:53,509
you just focus on what do you actually

1867
01:59:49,819 --> 01:59:55,969
need to write in order to get the thing

1868
01:59:53,510 --> 02:00:01,030
to happen then it really just works and

1869
01:59:55,969 --> 02:00:03,980
it doesn't have to be so crazy but

1870
02:00:01,029 --> 02:00:06,319
unfortunately people think that all that

1871
02:00:03,979 --> 02:00:08,839
complexity is somehow good it's not just

1872
02:00:06,319 --> 02:00:10,309
it generates slower code it's harder to

1873
02:00:08,840 --> 02:00:13,039
read it's hard to understand hard

1874
02:00:10,310 --> 02:00:15,020
learn harder to maintain works with less

1875
02:00:13,039 --> 02:00:24,229
languages you know that everything about

1876
02:00:15,020 --> 02:00:27,110
it is bad right 0zi says off-topic best

1877
02:00:24,229 --> 02:00:28,669
way of moving data from disk GPU what I

1878
02:00:27,109 --> 02:00:30,829
think I really wants to get a GPU map

1879
02:00:28,670 --> 02:00:31,609
memory chunk and map my asset file right

1880
02:00:30,829 --> 02:00:33,559
over there

1881
02:00:31,609 --> 02:00:35,179
assuming I'm prepared the data to be GPU

1882
02:00:33,560 --> 02:00:36,320
friendly what I have right now is

1883
02:00:35,180 --> 02:00:37,940
letting from disk and memory and then

1884
02:00:36,319 --> 02:00:39,409
either doing jail buffer sub data or map

1885
02:00:37,939 --> 02:00:42,109
view and copy the data how can I avoid

1886
02:00:39,409 --> 02:00:50,420
this copy um I don't think you really

1887
02:00:42,109 --> 02:00:52,159
can most of time on Windows

1888
02:00:50,420 --> 02:00:54,829
unfortunately and the reason that I say

1889
02:00:52,159 --> 02:00:57,739
that is because since it's a

1890
02:00:54,829 --> 02:01:01,039
heterogeneous environment in terms of

1891
02:00:57,739 --> 02:01:03,229
the GPU the problem that you're going to

1892
02:01:01,039 --> 02:01:05,420
run into is that while you could

1893
02:01:03,229 --> 02:01:07,989
probably do something sort of like what

1894
02:01:05,420 --> 02:01:07,989
you're talking about

1895
02:01:08,710 --> 02:01:20,029
with buffer with like vertex and pixel

1896
02:01:15,050 --> 02:01:22,250
I'm sorry vertex and buffer data like

1897
02:01:20,029 --> 02:01:23,960
like things that will be fetched by like

1898
02:01:22,250 --> 02:01:30,350
the vertex shader geometry shader things

1899
02:01:23,960 --> 02:01:33,890
like that in your defined format that

1900
02:01:30,350 --> 02:01:35,990
will work so you probably could do

1901
02:01:33,890 --> 02:01:39,920
something pretty close to that maybe on

1902
02:01:35,989 --> 02:01:41,239
PC it's harder but the problem is a lot

1903
02:01:39,920 --> 02:01:44,210
of the data you're downloading is

1904
02:01:41,239 --> 02:01:46,279
texture data and if you're downloading

1905
02:01:44,210 --> 02:01:49,130
texture data the problem is that that

1906
02:01:46,279 --> 02:01:51,289
format that the graphics card needs the

1907
02:01:49,130 --> 02:01:55,279
texture data in is not the format that

1908
02:01:51,289 --> 02:01:57,079
you have it in and you might ask why can

1909
02:01:55,279 --> 02:01:58,399
I just put it in the format that the GPU

1910
02:01:57,079 --> 02:02:00,140
needs it in and the reason is because

1911
02:01:58,399 --> 02:02:07,219
each GPU actually needs it in a

1912
02:02:00,140 --> 02:02:12,950
different format so I'm a little bit out

1913
02:02:07,220 --> 02:02:16,220
of my comfort zone really describing why

1914
02:02:12,949 --> 02:02:17,989
this is true so I would invite you to

1915
02:02:16,220 --> 02:02:19,579
take this with a large grain of salt you

1916
02:02:17,989 --> 02:02:22,039
really need to ask someone who's a

1917
02:02:19,579 --> 02:02:24,269
serious PC graphics programmer like in

1918
02:02:22,039 --> 02:02:25,769
other words their job is not to write

1919
02:02:24,270 --> 02:02:29,130
all the rest of the game code all they

1920
02:02:25,770 --> 02:02:31,980
do all day is PC GPU work because that

1921
02:02:29,130 --> 02:02:35,100
is a that is a job it's a full-time job

1922
02:02:31,979 --> 02:02:38,779
for multiple people at at you know

1923
02:02:35,100 --> 02:02:38,780
triple a game companies or whatever

1924
02:02:44,810 --> 02:02:56,420
texture fetches are extremely expensive

1925
02:02:49,609 --> 02:02:56,420
graphics pipeline elements because the

1926
02:02:57,079 --> 02:03:03,449
the way in which data is processed in

1927
02:03:00,539 --> 02:03:06,000
almost every other case is predictable

1928
02:03:03,449 --> 02:03:07,529
and can be streamed and to understand

1929
02:03:06,000 --> 02:03:11,489
this I guess the way I would point it

1930
02:03:07,529 --> 02:03:12,689
out is if I have a set of vertices and

1931
02:03:11,489 --> 02:03:15,750
I'm gonna draw those they represent

1932
02:03:12,689 --> 02:03:17,159
triangles then the GPU pretty much knows

1933
02:03:15,750 --> 02:03:18,840
it's going to go through these vertices

1934
02:03:17,159 --> 02:03:20,250
and transform them and it could

1935
02:03:18,840 --> 02:03:22,739
transform them into a cache or a

1936
02:03:20,250 --> 02:03:26,520
temporary buffer or all sorts of other

1937
02:03:22,739 --> 02:03:28,979
things like this right so it knows that

1938
02:03:26,520 --> 02:03:32,310
that's gonna happen or at the very least

1939
02:03:28,979 --> 02:03:33,989
it can say well if I need to transfer

1940
02:03:32,310 --> 02:03:36,930
them these vertices I can transfer them

1941
02:03:33,989 --> 02:03:39,750
in blocks and save the blocks and throw

1942
02:03:36,930 --> 02:03:44,270
out blocks after I'm done with them so I

1943
02:03:39,750 --> 02:03:47,039
never really need to have that much

1944
02:03:44,270 --> 02:03:51,390
scattering gathering of those buffers

1945
02:03:47,039 --> 02:03:52,920
most of the time right now for really

1946
02:03:51,390 --> 02:03:55,470
how to describe it in the correct way

1947
02:03:52,920 --> 02:03:58,230
but point being it's not so random

1948
02:03:55,470 --> 02:04:01,560
access it's fairly consistent how its

1949
02:03:58,229 --> 02:04:03,689
accessed but texture data is completely

1950
02:04:01,560 --> 02:04:06,120
different texture data is typically

1951
02:04:03,689 --> 02:04:09,239
fetched completely haphazardly right

1952
02:04:06,119 --> 02:04:10,859
like any given little piece of a

1953
02:04:09,239 --> 02:04:12,569
triangle that happens to be visible is

1954
02:04:10,859 --> 02:04:14,429
grabbing some random thing from some

1955
02:04:12,569 --> 02:04:15,929
random bitmap in a random texture and a

1956
02:04:14,430 --> 02:04:19,250
random place and getting just these four

1957
02:04:15,930 --> 02:04:22,500
pixels and using them right and so

1958
02:04:19,250 --> 02:04:25,829
paging that stuff in and out to like

1959
02:04:22,500 --> 02:04:29,130
have the the caching of it be coherent

1960
02:04:25,829 --> 02:04:31,439
it's like really tricky and you're

1961
02:04:29,130 --> 02:04:33,029
trying up to the entire pipeline to

1962
02:04:31,439 --> 02:04:34,739
minimize the amount of time you're

1963
02:04:33,029 --> 02:04:36,569
waiting around for textures to come in

1964
02:04:34,739 --> 02:04:37,559
and they're doing all kinds of crazy

1965
02:04:36,569 --> 02:04:39,808
stuff in there

1966
02:04:37,559 --> 02:04:42,989
all kinds of caching all kinds of like

1967
02:04:39,809 --> 02:04:44,849
trying to have most like lots and lots

1968
02:04:42,988 --> 02:04:46,408
of texture fetchers outstanding so

1969
02:04:44,849 --> 02:04:48,899
there's lots and lots of like virtual

1970
02:04:46,408 --> 02:04:50,958
threads in the thing waiting for texture

1971
02:04:48,899 --> 02:04:53,609
fetches to come back to like complete

1972
02:04:50,958 --> 02:04:55,800
operations so like we're running tons of

1973
02:04:53,609 --> 02:04:57,659
pixel pipelines in parallel and like

1974
02:04:55,800 --> 02:04:59,788
ping pong in between them based on who

1975
02:04:57,658 --> 02:05:01,978
got their texture fetches back so it's

1976
02:04:59,788 --> 02:05:03,688
this huge deal right it's not simple

1977
02:05:01,979 --> 02:05:05,668
it's very very complicated on the

1978
02:05:03,689 --> 02:05:09,329
hardware side because that's where like

1979
02:05:05,668 --> 02:05:10,648
all this time is being spent waiting for

1980
02:05:09,328 --> 02:05:16,049
these textures and you really have to

1981
02:05:10,649 --> 02:05:18,329
minimize that down right so where this

1982
02:05:16,050 --> 02:05:20,668
gets into the texture format issue is

1983
02:05:18,328 --> 02:05:24,299
that while the action will like bits of

1984
02:05:20,668 --> 02:05:26,458
a pixel or the same as you think they

1985
02:05:24,300 --> 02:05:30,359
are so like if you say this is an RGBA

1986
02:05:26,458 --> 02:05:33,088
texture then it probably is like an RGBA

1987
02:05:30,359 --> 02:05:35,459
texture and each pixel probably is 8

1988
02:05:33,088 --> 02:05:40,378
bits are 8 bits G 8 bits B 8 bits a

1989
02:05:35,458 --> 02:05:42,838
right that's like probably true what's

1990
02:05:40,378 --> 02:05:45,689
not true is that the way that you send

1991
02:05:42,838 --> 02:05:47,668
it down where it's just like a line like

1992
02:05:45,689 --> 02:05:49,918
one row of pixels and then another row

1993
02:05:47,668 --> 02:05:51,448
of pixels and other pixels that is not

1994
02:05:49,918 --> 02:05:54,689
how it will be started on the sword in

1995
02:05:51,448 --> 02:05:56,878
the GPU what will happen on the GPU is

1996
02:05:54,689 --> 02:05:59,999
that it will have to be what's called

1997
02:05:56,878 --> 02:06:02,818
swizzles which is when you store pixels

1998
02:05:59,998 --> 02:06:04,800
in some kind of a zigzag pattern and the

1999
02:06:02,819 --> 02:06:07,469
attempt what you're trying to do there

2000
02:06:04,800 --> 02:06:09,628
is remember caching still happens on the

2001
02:06:07,469 --> 02:06:12,208
GPU for things like texture fetches and

2002
02:06:09,628 --> 02:06:15,029
all that other stuff so when you go to

2003
02:06:12,208 --> 02:06:17,849
fetch a cache lines worth of data so 64

2004
02:06:15,029 --> 02:06:20,099
bytes or something you want the chances

2005
02:06:17,849 --> 02:06:22,199
that that has all the pixels that you

2006
02:06:20,099 --> 02:06:24,538
might need for that set of operations

2007
02:06:22,198 --> 02:06:26,158
you want the chances of that happening

2008
02:06:24,538 --> 02:06:29,578
on one cache line to be as high as

2009
02:06:26,158 --> 02:06:32,338
possible which is probably not like if

2010
02:06:29,578 --> 02:06:35,219
it's a 64 byte cache line let's say it's

2011
02:06:32,338 --> 02:06:38,189
probably not 16 pixels in a row this way

2012
02:06:35,219 --> 02:06:41,969
it's probably like a 4 by 4 block of

2013
02:06:38,189 --> 02:06:43,949
pixels or something right so what the

2014
02:06:41,969 --> 02:06:46,469
graphics card does is when you submit a

2015
02:06:43,948 --> 02:06:50,428
texture buffer it has to copy it anyway

2016
02:06:46,469 --> 02:06:50,930
it copies it out of the zigzag order and

2017
02:06:50,429 --> 02:06:54,050
in

2018
02:06:50,930 --> 02:06:56,570
to a new order right now sometimes that

2019
02:06:54,050 --> 02:06:58,430
happens on the GPU side and sometimes it

2020
02:06:56,569 --> 02:07:00,259
happens on the CPU side and it depends

2021
02:06:58,430 --> 02:07:02,289
on whether the GPU has an accelerated

2022
02:07:00,260 --> 02:07:07,100
Dees Whistler or something in it right

2023
02:07:02,289 --> 02:07:09,560
but that has to happen and on a lot of

2024
02:07:07,100 --> 02:07:11,090
drivers that happen to the driver so the

2025
02:07:09,560 --> 02:07:12,740
driver copies it from one place to

2026
02:07:11,090 --> 02:07:15,380
another using this whistle pattern and

2027
02:07:12,739 --> 02:07:17,599
then this the GPU just uploads it into

2028
02:07:15,380 --> 02:07:20,840
the memory using the mapping aperture

2029
02:07:17,600 --> 02:07:23,270
right so now you might ask well why

2030
02:07:20,840 --> 02:07:25,489
can't we just or always store the thing

2031
02:07:23,270 --> 02:07:26,840
prease whistled and then it could just

2032
02:07:25,489 --> 02:07:29,349
get transferred like any other buffer

2033
02:07:26,840 --> 02:07:33,560
data and the answer is because the

2034
02:07:29,350 --> 02:07:35,990
correct pattern force whistling depends

2035
02:07:33,560 --> 02:07:40,880
on how the memory crossbars were set up

2036
02:07:35,989 --> 02:07:43,250
on the GPU so when you go to fetch

2037
02:07:40,880 --> 02:07:45,590
something there's actually different

2038
02:07:43,250 --> 02:07:47,479
patterns of memory depending on how the

2039
02:07:45,590 --> 02:07:48,829
memory banks are laid out that are more

2040
02:07:47,479 --> 02:07:51,589
or less efficient because remember when

2041
02:07:48,829 --> 02:07:54,649
you fetch from memory it's not always a

2042
02:07:51,590 --> 02:07:56,869
uniform kind of a fetch if I fetch like

2043
02:07:54,649 --> 02:07:58,789
one byte from each of several memory

2044
02:07:56,869 --> 02:08:01,159
banks I may be able to do that faster

2045
02:07:58,789 --> 02:08:02,810
than fetching in from one databank or

2046
02:08:01,159 --> 02:08:04,460
maybe the opposite strew may be fetching

2047
02:08:02,810 --> 02:08:06,550
in from this one need a bank is faster

2048
02:08:04,460 --> 02:08:08,510
than fetching and from each one right

2049
02:08:06,550 --> 02:08:10,369
and so there's all these like

2050
02:08:08,510 --> 02:08:12,590
interleaving patterns that happen and

2051
02:08:10,369 --> 02:08:15,649
how the memory addressing plays out and

2052
02:08:12,590 --> 02:08:18,350
since you care about how fast that is

2053
02:08:15,649 --> 02:08:21,500
the Swizzle pattern needs to match the

2054
02:08:18,350 --> 02:08:26,990
design of the cache to memory crossbar

2055
02:08:21,500 --> 02:08:29,119
right not a hardware designer I spend no

2056
02:08:26,989 --> 02:08:31,309
time studying that stuff so I have no

2057
02:08:29,119 --> 02:08:32,720
idea what the constraints are there or

2058
02:08:31,310 --> 02:08:35,270
why they are the way they are or any of

2059
02:08:32,720 --> 02:08:39,500
that other stuff but what I can tell you

2060
02:08:35,270 --> 02:08:42,500
is every graphics card has it set up

2061
02:08:39,500 --> 02:08:43,550
differently and so depending on the

2062
02:08:42,500 --> 02:08:47,180
graphics card you need differents

2063
02:08:43,550 --> 02:08:49,159
whistle pattern so you can't even store

2064
02:08:47,180 --> 02:08:51,170
your assets in a format that you've

2065
02:08:49,159 --> 02:08:52,369
guaranteed is the right Swizzle pattern

2066
02:08:51,170 --> 02:08:54,560
for maximum performance a particular

2067
02:08:52,369 --> 02:08:56,180
Kravis card because each graphics card

2068
02:08:54,560 --> 02:08:59,900
will have a different swizzle pattern

2069
02:08:56,180 --> 02:09:04,119
that is the fastest for that this is why

2070
02:08:59,899 --> 02:09:04,119
if you're on PlayStation 4 Xbox one

2071
02:09:04,609 --> 02:09:11,118
you can priests whistle your textures

2072
02:09:06,738 --> 02:09:14,059
because the textures are in only one

2073
02:09:11,118 --> 02:09:16,729
fastest format it is a known GPU with a

2074
02:09:14,060 --> 02:09:18,710
known memory cross bar pattern so you

2075
02:09:16,729 --> 02:09:20,839
know that you just put them in the

2076
02:09:18,710 --> 02:09:22,880
format that it wants Swizzle pattern

2077
02:09:20,840 --> 02:09:25,610
wise for this one piece of hardware is

2078
02:09:22,880 --> 02:09:28,368
always right but that's just not true on

2079
02:09:25,609 --> 02:09:33,948
the PC now there have been attempts like

2080
02:09:28,368 --> 02:09:36,289
DirectX specifies a pre Swizzle pattern

2081
02:09:33,948 --> 02:09:38,089
the problem is they specified like one

2082
02:09:36,289 --> 02:09:40,488
Prius visible pattern or something and

2083
02:09:38,090 --> 02:09:42,170
it's not the right one for all cards so

2084
02:09:40,488 --> 02:09:44,448
it's still not it doesn't solve the

2085
02:09:42,170 --> 02:09:45,770
problem if every one standard on one

2086
02:09:44,448 --> 02:09:48,169
Swizzle pattern eventually in the future

2087
02:09:45,770 --> 02:09:51,380
it would solve the problem I don't think

2088
02:09:48,170 --> 02:09:53,539
they've done that yet though so you're

2089
02:09:51,380 --> 02:09:56,000
kind of faced with that problem and I

2090
02:09:53,539 --> 02:09:57,829
don't have a solution for you right you

2091
02:09:56,000 --> 02:10:04,219
just kind of have to deal with that and

2092
02:09:57,829 --> 02:10:11,899
so it may not really be it may not

2093
02:10:04,219 --> 02:10:14,060
really be a a thing where you want to

2094
02:10:11,899 --> 02:10:18,559
try to go as far as you're saying where

2095
02:10:14,060 --> 02:10:25,100
you just do the mem map and mem map into

2096
02:10:18,560 --> 02:10:28,850
a GPU buffer the other thing that I

2097
02:10:25,100 --> 02:10:32,630
would warn you about is when you map

2098
02:10:28,850 --> 02:10:34,579
memory into a GPU address space you you

2099
02:10:32,630 --> 02:10:36,350
may end up in right combining memory and

2100
02:10:34,579 --> 02:10:37,729
you don't necessarily know if the

2101
02:10:36,350 --> 02:10:40,670
operating system is doing the right

2102
02:10:37,729 --> 02:10:46,939
thing with respect to how memory mapping

2103
02:10:40,670 --> 02:10:51,829
is going to work in that case this is a

2104
02:10:46,939 --> 02:10:54,529
little bit more in the weeds but when

2105
02:10:51,829 --> 02:11:00,738
you are talking about memory that's

2106
02:10:54,529 --> 02:11:03,920
backed by hardware oftentimes it doesn't

2107
02:11:00,738 --> 02:11:09,138
use the same cache write combining rules

2108
02:11:03,920 --> 02:11:12,380
as like just regular CPU memory as a

2109
02:11:09,139 --> 02:11:14,960
result reading from that memory can be

2110
02:11:12,380 --> 02:11:17,210
incredibly expensive way more expensive

2111
02:11:14,960 --> 02:11:18,020
than it would be if it was regular GPU

2112
02:11:17,210 --> 02:11:22,250
memory

2113
02:11:18,020 --> 02:11:24,620
hmm so if you use some kind of an

2114
02:11:22,250 --> 02:11:28,489
operating system operation on memory

2115
02:11:24,619 --> 02:11:30,710
that's mapped to the GPU you really want

2116
02:11:28,489 --> 02:11:32,599
to make sure there's no chance this that

2117
02:11:30,710 --> 02:11:35,630
the operating system might think that it

2118
02:11:32,600 --> 02:11:37,250
can read from that memory because if it

2119
02:11:35,630 --> 02:11:44,810
ever does try to read from that memory

2120
02:11:37,250 --> 02:11:46,699
you may be in a lot of pain right so I

2121
02:11:44,810 --> 02:11:47,870
guess I would just point that out it's

2122
02:11:46,699 --> 02:11:50,149
not so much whether it reads or writes

2123
02:11:47,869 --> 02:11:53,390
its if it does those two things together

2124
02:11:50,149 --> 02:11:55,519
meaning if it writes and then reads back

2125
02:11:53,390 --> 02:11:58,940
something from that memory that would be

2126
02:11:55,520 --> 02:12:00,380
really bad because it it has to do

2127
02:11:58,939 --> 02:12:01,819
special things because of the cache

2128
02:12:00,380 --> 02:12:04,609
coherency with whatsoever happening on

2129
02:12:01,819 --> 02:12:07,159
the GPU it it has to do other things

2130
02:12:04,609 --> 02:12:09,529
where it uses write combining in these

2131
02:12:07,159 --> 02:12:11,989
ways that makes it so that reading back

2132
02:12:09,529 --> 02:12:14,719
becomes much more expensive that's all

2133
02:12:11,989 --> 02:12:16,189
so I'd be careful with that stuff I

2134
02:12:14,720 --> 02:12:17,810
don't have any specific recommendations

2135
02:12:16,189 --> 02:12:20,569
because I've never tried to do what

2136
02:12:17,810 --> 02:12:25,039
you're talking about so it may be just

2137
02:12:20,569 --> 02:12:26,779
fine but I just would be careful about

2138
02:12:25,039 --> 02:12:29,289
that I would check to make sure it's not

2139
02:12:26,779 --> 02:12:29,289
happening

2140
02:12:33,069 --> 02:12:38,389
updated dumped you speck a little is

2141
02:12:35,479 --> 02:12:46,719
this clear about things yeah let me take

2142
02:12:38,390 --> 02:12:48,680
a look the text wrapping station uses a

2143
02:12:46,720 --> 02:12:50,150
semicolon this says it's issues

2144
02:12:48,680 --> 02:12:51,770
therefore element names are not allowed

2145
02:12:50,149 --> 02:12:53,869
to semicolon only elements that knows

2146
02:12:51,770 --> 02:12:56,240
how much data they are reading can

2147
02:12:53,869 --> 02:13:03,309
contain semicolon yeah format

2148
02:12:56,239 --> 02:13:03,309
terminology general format tree view

2149
02:13:15,380 --> 02:13:22,289
yeah that's definitely clearer I'd have

2150
02:13:20,579 --> 02:13:24,539
to be I have to play with it a little

2151
02:13:22,289 --> 02:13:26,579
make sure I think that that split out

2152
02:13:24,539 --> 02:13:27,840
the right decisions there but yet that's

2153
02:13:26,579 --> 02:13:29,729
exactly what I'm talking about

2154
02:13:27,840 --> 02:13:31,829
meaning there just needs to be ways of

2155
02:13:29,729 --> 02:13:36,569
saying look I'm dumping stuff here and I

2156
02:13:31,829 --> 02:13:38,309
don't want to care if stuff has

2157
02:13:36,569 --> 02:13:39,659
semicolons in it so I can just make

2158
02:13:38,310 --> 02:13:41,490
multiple compounds and that will just

2159
02:13:39,659 --> 02:13:44,659
work so that looks more like what I was

2160
02:13:41,489 --> 02:13:44,659
yeah what I was saying

2161
02:13:45,710 --> 02:13:49,920
so oops fallacy is basically overusing

2162
02:13:48,779 --> 02:13:52,829
inheritance

2163
02:13:49,920 --> 02:13:58,529
no like I really want to emphasize the

2164
02:13:52,829 --> 02:14:01,260
fact that the problem with

2165
02:13:58,529 --> 02:14:02,550
object-oriented programming is is like

2166
02:14:01,260 --> 02:14:06,150
I've said it many times is the

2167
02:14:02,550 --> 02:14:08,460
object-oriented part meaning the problem

2168
02:14:06,149 --> 02:14:10,859
is the way that that you are told to

2169
02:14:08,460 --> 02:14:14,010
think about your program is just I think

2170
02:14:10,859 --> 02:14:16,439
fundamentally incorrect and the reason

2171
02:14:14,010 --> 02:14:18,989
for that is because this you know a CPU

2172
02:14:16,439 --> 02:14:27,479
doesn't have objects it's not a thing so

2173
02:14:18,989 --> 02:14:31,170
it's built upon a fictitious holy human

2174
02:14:27,479 --> 02:14:33,239
created artificial model rather than

2175
02:14:31,170 --> 02:14:35,609
something that comes from what the

2176
02:14:33,239 --> 02:14:36,840
computer actually does which you know I

2177
02:14:35,609 --> 02:14:39,359
mean obviously a computer is human

2178
02:14:36,840 --> 02:14:40,770
created but it's there it's the thing

2179
02:14:39,359 --> 02:14:44,429
you're actually using so it's actually

2180
02:14:40,770 --> 02:14:47,840
tangible and real and has actual real

2181
02:14:44,430 --> 02:14:50,670
answers when you look at what it's doing

2182
02:14:47,840 --> 02:14:52,890
object-oriented is like a fictitious way

2183
02:14:50,670 --> 02:14:54,270
of thinking about those things that none

2184
02:14:52,890 --> 02:14:55,829
of the things that you talked about you

2185
02:14:54,270 --> 02:14:57,360
an opportunity programming map to

2186
02:14:55,829 --> 02:14:59,609
something that happens on a computer

2187
02:14:57,359 --> 02:15:03,389
they're all things that are that are

2188
02:14:59,609 --> 02:15:06,119
just mental imaginary things the

2189
02:15:03,390 --> 02:15:08,100
programmer is imagining or that the

2190
02:15:06,119 --> 02:15:10,380
programming language imagines are true

2191
02:15:08,100 --> 02:15:12,750
but they are not true it is not true

2192
02:15:10,380 --> 02:15:14,489
that you can't access the internals of a

2193
02:15:12,750 --> 02:15:19,050
struct of a class that you have a

2194
02:15:14,489 --> 02:15:20,399
pointer to you just can write and so

2195
02:15:19,050 --> 02:15:22,860
operatory your programming the way the

2196
02:15:20,399 --> 02:15:25,109
reason I I don't care for it is not

2197
02:15:22,859 --> 02:15:26,158
because of any individual part of it is

2198
02:15:25,109 --> 02:15:28,018
bad because you

2199
02:15:26,158 --> 02:15:30,299
usually like opportunity programming

2200
02:15:28,019 --> 02:15:32,539
doesn't really have many techniques that

2201
02:15:30,300 --> 02:15:38,939
are part of it that didn't already exist

2202
02:15:32,538 --> 02:15:41,340
independently of it right it's more

2203
02:15:38,939 --> 02:15:43,289
about the fact that I've very

2204
02:15:41,340 --> 02:15:45,269
programming is a is a mental paradigm

2205
02:15:43,288 --> 02:15:46,859
that's talking about how the program

2206
02:15:45,269 --> 02:15:49,708
resourcing of their program and that

2207
02:15:46,859 --> 02:15:52,469
mental paradigm is not useful that's the

2208
02:15:49,708 --> 02:15:55,498
problem so it's not that inheritance is

2209
02:15:52,469 --> 02:15:59,118
wrong or encapsulation is wrong or

2210
02:15:55,498 --> 02:16:01,380
polymorphism is wrong it's not that

2211
02:15:59,118 --> 02:16:02,759
individual things that actually mean

2212
02:16:01,380 --> 02:16:04,788
something in an implementation sense are

2213
02:16:02,760 --> 02:16:08,369
somehow wrong because nothing

2214
02:16:04,788 --> 02:16:14,188
implementation wise is wrong as long as

2215
02:16:08,368 --> 02:16:16,498
it generates code right it's that if you

2216
02:16:14,189 --> 02:16:19,889
follow the object oriented programming

2217
02:16:16,498 --> 02:16:23,880
mindset it usually leads you to

2218
02:16:19,889 --> 02:16:26,578
construct programs that are not well

2219
02:16:23,880 --> 02:16:30,958
working they don't they don't usually

2220
02:16:26,578 --> 02:16:33,359
accurately arrive at the simple correct

2221
02:16:30,958 --> 02:16:36,299
solution to a programming problem they

2222
02:16:33,359 --> 02:16:38,399
usually have a lot of additional things

2223
02:16:36,299 --> 02:16:40,888
that were not necessary for the problem

2224
02:16:38,398 --> 02:16:44,250
and as a result they are slower harder

2225
02:16:40,888 --> 02:16:47,218
to read harder to maintain harder to

2226
02:16:44,250 --> 02:16:50,388
adapt to other circumstances harder to

2227
02:16:47,218 --> 02:17:00,089
modify harder to optimize right and

2228
02:16:50,388 --> 02:17:04,528
that's the problem so that's really the

2229
02:17:00,090 --> 02:17:06,238
case not that there's something

2230
02:17:04,529 --> 02:17:10,460
inherently wrong with a particular

2231
02:17:06,238 --> 02:17:10,459
technique right

2232
02:17:12,679 --> 02:17:16,950
that's that's all I would say and so if

2233
02:17:15,629 --> 02:17:18,478
you want to use an object-oriented

2234
02:17:16,950 --> 02:17:19,860
programming language and you want to use

2235
02:17:18,478 --> 02:17:21,718
object-oriented programming features I

2236
02:17:19,860 --> 02:17:24,380
don't even think that's necessarily bad

2237
02:17:21,718 --> 02:17:26,879
right as long as you are being

2238
02:17:24,379 --> 02:17:29,189
clear-headed about what the code is that

2239
02:17:26,879 --> 02:17:32,129
you're generating and you're thinking in

2240
02:17:29,190 --> 02:17:33,329
terms of what the actual result how it

2241
02:17:32,129 --> 02:17:35,728
works and what it does and you're

2242
02:17:33,329 --> 02:17:38,879
prioritizing that then I think you're

2243
02:17:35,728 --> 02:17:41,549
gonna be okay you know it's more a

2244
02:17:38,879 --> 02:17:44,039
problem if you if you allow these

2245
02:17:41,549 --> 02:17:47,879
fictitious constructs which were made

2246
02:17:44,040 --> 02:17:49,349
for various like imaginary reasons some

2247
02:17:47,879 --> 02:17:51,808
of which may be beneficial some of which

2248
02:17:49,349 --> 02:17:53,308
may be not but without the tie back to

2249
02:17:51,808 --> 02:17:55,138
what you were actually trying to do

2250
02:17:53,308 --> 02:17:57,119
which is create CPU instructions for a

2251
02:17:55,138 --> 02:17:58,888
computer to run you don't have a good

2252
02:17:57,120 --> 02:18:00,269
way of determining between them that's

2253
02:17:58,888 --> 02:18:02,489
how you end up with this proliferation

2254
02:18:00,269 --> 02:18:06,420
of people talking about things that are

2255
02:18:02,489 --> 02:18:08,250
obviously not true right where they'll

2256
02:18:06,420 --> 02:18:09,960
end up talking about oh this code is

2257
02:18:08,250 --> 02:18:12,120
better than this code and you're like

2258
02:18:09,959 --> 02:18:17,569
why and then they list a bunch of things

2259
02:18:12,120 --> 02:18:21,269
that actually don't have any practical

2260
02:18:17,569 --> 02:18:23,959
truth they don't actually produce better

2261
02:18:21,269 --> 02:18:26,399
code on a CPU and so you're like no like

2262
02:18:23,959 --> 02:18:29,728
what you mean to say is for your

2263
02:18:26,399 --> 02:18:32,039
imaginary world you created which you

2264
02:18:29,728 --> 02:18:33,388
may well believe in but you don't have

2265
02:18:32,040 --> 02:18:38,070
any proof that there's anything better

2266
02:18:33,388 --> 02:18:40,228
about it right you're saying that you

2267
02:18:38,069 --> 02:18:43,199
like this better it's it's sort of like

2268
02:18:40,228 --> 02:18:47,189
saying I think this picture is prettier

2269
02:18:43,200 --> 02:18:50,460
than this other picture right and that

2270
02:18:47,190 --> 02:18:53,670
may be true for you and beauty is in the

2271
02:18:50,459 --> 02:18:55,439
eye of the beholder but if you can't

2272
02:18:53,670 --> 02:18:58,290
point to something concrete that's

2273
02:18:55,440 --> 02:19:02,940
actually happening then you shouldn't be

2274
02:18:58,290 --> 02:19:05,309
advising other people to do it without

2275
02:19:02,940 --> 02:19:06,899
first that disclaimer that's like the

2276
02:19:05,308 --> 02:19:09,509
thing I'm telling you to do is really

2277
02:19:06,899 --> 02:19:13,978
just about my own personal aesthetic

2278
02:19:09,510 --> 02:19:15,950
preference you know and your own

2279
02:19:13,978 --> 02:19:21,709
personal ecstatic preferences are not

2280
02:19:15,950 --> 02:19:21,710
that's not engineering right that's art

2281
02:19:27,479 --> 02:19:31,479
zero is the greeting answer so is it

2282
02:19:29,739 --> 02:19:33,459
possible to memory map a file to GPU

2283
02:19:31,479 --> 02:19:35,260
pinned memory for non texture data then

2284
02:19:33,459 --> 02:19:36,939
I think about a complex 3d Mouse sounds

2285
02:19:35,260 --> 02:19:38,710
like you can't avoid this mem copy

2286
02:19:36,940 --> 02:19:42,030
I agree the textures are trickier

2287
02:19:38,709 --> 02:19:42,029
especially if they're compressed already

2288
02:19:58,639 --> 02:20:08,869
I mean so here's what I'd say I can't

2289
02:20:05,719 --> 02:20:12,829
think of any fundamental reason why the

2290
02:20:08,870 --> 02:20:17,449
operating system couldn't be written

2291
02:20:12,829 --> 02:20:21,439
such that you can overlay a GPU mapped

2292
02:20:17,449 --> 02:20:22,609
aperture with a memory map file I can't

2293
02:20:21,439 --> 02:20:27,079
think of any reason why you couldn't do

2294
02:20:22,609 --> 02:20:29,658
that but as far as I'm aware I can't

2295
02:20:27,079 --> 02:20:31,340
think of what API gyrations you could go

2296
02:20:29,658 --> 02:20:33,170
through to make Windows actually do that

2297
02:20:31,340 --> 02:20:36,529
and so I'm assuming that they haven't

2298
02:20:33,170 --> 02:20:38,510
actually implemented that so I would be

2299
02:20:36,529 --> 02:20:40,370
surprised if you can get it to work but

2300
02:20:38,510 --> 02:20:42,109
I mean I I don't know like I haven't

2301
02:20:40,370 --> 02:20:44,120
tried it so I'm not prepared to say

2302
02:20:42,109 --> 02:20:45,800
maybe it works but you have to

2303
02:20:44,120 --> 02:20:49,340
understand like so the way a memory map

2304
02:20:45,799 --> 02:20:51,318
file works right is the operating system

2305
02:20:49,340 --> 02:20:54,139
reserves inside the memory paging table

2306
02:20:51,318 --> 02:20:56,778
it reserves a range that's as big as you

2307
02:20:54,139 --> 02:20:59,959
told it to be so you say I want to map a

2308
02:20:56,779 --> 02:21:01,970
gigabyte of data in this file to this to

2309
02:20:59,959 --> 02:21:03,919
a location in memory and it goes okay

2310
02:21:01,969 --> 02:21:08,688
I'm gonna reserve that location and set

2311
02:21:03,920 --> 02:21:10,488
all those pages to be false when you go

2312
02:21:08,689 --> 02:21:13,670
to access one of them it will fault and

2313
02:21:10,488 --> 02:21:15,859
cause it to go a war you faulted here is

2314
02:21:13,670 --> 02:21:17,658
that mean the program crashed oh no what

2315
02:21:15,859 --> 02:21:19,430
actually was happening is they're

2316
02:21:17,658 --> 02:21:21,170
touching a reserved part that's supposed

2317
02:21:19,430 --> 02:21:24,229
to be mapped to a file that's fine with

2318
02:21:21,170 --> 02:21:26,898
me all loaded in from the file and then

2319
02:21:24,228 --> 02:21:30,379
allow that thread to resume right that's

2320
02:21:26,898 --> 02:21:32,180
what it's going to do so in order to

2321
02:21:30,379 --> 02:21:36,889
have something that was both mapped to

2322
02:21:32,180 --> 02:21:38,420
the GPU and mapped to a file you would

2323
02:21:36,889 --> 02:21:40,250
have to have the operating system be

2324
02:21:38,420 --> 02:21:42,859
able to set up the page table such that

2325
02:21:40,250 --> 02:21:45,439
it's set in the page table not only is

2326
02:21:42,859 --> 02:21:46,760
this set to be backed by the file so

2327
02:21:45,439 --> 02:21:50,270
when there's a fault I read from the

2328
02:21:46,760 --> 02:21:53,270
file but it's also set to be mapped on

2329
02:21:50,270 --> 02:21:56,779
the PCI bus aperture out to something

2330
02:21:53,270 --> 02:21:58,760
that's in GPU memory maybe you can do

2331
02:21:56,779 --> 02:22:01,130
that maybe it can't I don't like I said

2332
02:21:58,760 --> 02:22:03,790
I've never thought about that so I've

2333
02:22:01,129 --> 02:22:03,789
never tried it

2334
02:22:06,450 --> 02:22:15,850
go nuts you know I mean I don't know but

2335
02:22:14,379 --> 02:22:18,099
yeah I would point out compression is

2336
02:22:15,850 --> 02:22:20,140
relevant here it's unlikely that you're

2337
02:22:18,100 --> 02:22:22,109
gonna store all of your data in a police

2338
02:22:20,139 --> 02:22:24,278
in a professional high-end setting

2339
02:22:22,109 --> 02:22:26,380
you're not gonna store mesh data

2340
02:22:24,279 --> 02:22:29,020
probably raw you probably will have

2341
02:22:26,379 --> 02:22:30,459
compressed it and then so it doesn't

2342
02:22:29,020 --> 02:22:31,960
make a lot of sense to map the file

2343
02:22:30,459 --> 02:22:33,669
because typically what you're gonna do I

2344
02:22:31,959 --> 02:22:34,869
mean to map the file directly to GPU

2345
02:22:33,670 --> 02:22:37,090
memory maybe it makes sense to map the

2346
02:22:34,870 --> 02:22:38,859
file to just your own memory but

2347
02:22:37,090 --> 02:22:40,870
typically what you're gonna do is expand

2348
02:22:38,859 --> 02:22:43,540
the data out into GPU memory you're

2349
02:22:40,870 --> 02:22:46,450
gonna read a smaller more compressed

2350
02:22:43,540 --> 02:22:50,260
chunk from your data file format and

2351
02:22:46,450 --> 02:22:54,729
then decompress it into the GPU space so

2352
02:22:50,260 --> 02:22:56,680
again the the idea of flat mapping there

2353
02:22:54,728 --> 02:23:06,420
doesn't necessarily make a whole lot of

2354
02:22:56,680 --> 02:23:15,790
sense right now I think there have been

2355
02:23:06,420 --> 02:23:18,430
yeah I mean AMD anyway had some virtual

2356
02:23:15,790 --> 02:23:23,050
texturing stuff where they thunk through

2357
02:23:18,430 --> 02:23:25,239
two pages on disk and I can't remember

2358
02:23:23,049 --> 02:23:28,209
how that stuff's implemented you know so

2359
02:23:25,239 --> 02:23:32,619
there like I said there may be ways to

2360
02:23:28,209 --> 02:23:37,509
map GPU pages to file pages like that

2361
02:23:32,620 --> 02:23:40,840
maybe in the OS and I just don't know so

2362
02:23:37,510 --> 02:23:42,969
I'm sorry I can't I really can't speak

2363
02:23:40,840 --> 02:23:44,529
to it you know I can like I said I told

2364
02:23:42,969 --> 02:23:46,000
you I can tell you basically what

2365
02:23:44,529 --> 02:23:48,819
happened what would be required on the

2366
02:23:46,000 --> 02:23:50,219
OS side but I just don't know if

2367
02:23:48,818 --> 02:23:58,119
anyone's implemented that they may have

2368
02:23:50,219 --> 02:23:59,409
that you know they may not have quick

2369
02:23:58,120 --> 02:24:00,939
success the main thing of concerned with

2370
02:23:59,409 --> 02:24:02,920
is since I've never really programmed an

2371
02:24:00,939 --> 02:24:04,779
opportunity to programming I can't be

2372
02:24:02,920 --> 02:24:06,430
sure if I'm sometimes transitioning into

2373
02:24:04,779 --> 02:24:08,500
OOP accidentally and it really bugs me

2374
02:24:06,430 --> 02:24:10,840
since you could say that device or

2375
02:24:08,500 --> 02:24:17,379
texture structs or objects or stuff like

2376
02:24:10,840 --> 02:24:19,729
that um again I being religious about

2377
02:24:17,379 --> 02:24:22,189
object-oriented programming is

2378
02:24:19,729 --> 02:24:23,539
is bad and being religious about not

2379
02:24:22,190 --> 02:24:28,301
using object-oriented programming is

2380
02:24:23,540 --> 02:24:31,311
also bad in a sense meaning it's not

2381
02:24:28,300 --> 02:24:33,109
it's it's not like there's a programming

2382
02:24:31,310 --> 02:24:34,699
God who's gonna like come down and smite

2383
02:24:33,110 --> 02:24:39,290
you if you accidentally do one or the

2384
02:24:34,700 --> 02:24:43,851
other right so the correct philosophical

2385
02:24:39,290 --> 02:24:46,131
approach is just to say look if I'm

2386
02:24:43,851 --> 02:24:50,391
going to make a decision I should make

2387
02:24:46,130 --> 02:24:54,590
it on something measurable okay and that

2388
02:24:50,390 --> 02:24:59,810
is really all you need to remember if

2389
02:24:54,591 --> 02:25:04,190
you can't think of a reason why writing

2390
02:24:59,810 --> 02:25:06,560
code way a or way B is better or worse

2391
02:25:04,190 --> 02:25:11,149
if you can't come up with a measurable

2392
02:25:06,560 --> 02:25:14,720
thing right then it can't be that bad

2393
02:25:11,149 --> 02:25:17,600
either way or it's just it's past your

2394
02:25:14,720 --> 02:25:19,100
current ability level to know and you

2395
02:25:17,601 --> 02:25:20,601
know if something's past a current

2396
02:25:19,101 --> 02:25:23,120
ability level then it is you know

2397
02:25:20,601 --> 02:25:25,400
everyone is constantly getting better at

2398
02:25:23,120 --> 02:25:29,601
what they do including me including

2399
02:25:25,399 --> 02:25:30,890
everyone else and so you can only make

2400
02:25:29,601 --> 02:25:33,261
the best decision that you can make at

2401
02:25:30,890 --> 02:25:35,329
the time I mean that's just all there

2402
02:25:33,261 --> 02:25:36,829
all we can ever expect of ourselves to

2403
02:25:35,329 --> 02:25:39,200
do the best we could with the

2404
02:25:36,829 --> 02:25:41,899
information we had and would we like to

2405
02:25:39,200 --> 02:25:43,820
all be smarter sure but you know we can

2406
02:25:41,899 --> 02:25:45,560
only be as smart as we are on that day

2407
02:25:43,819 --> 02:25:51,319
right we can only have you know as much

2408
02:25:45,560 --> 02:25:53,479
as we can have and so when you look at

2409
02:25:51,319 --> 02:25:56,000
something and you go is there a way to

2410
02:25:53,479 --> 02:25:57,470
decide whether this thing is better or

2411
02:25:56,000 --> 02:26:00,261
worse right

2412
02:25:57,470 --> 02:26:02,390
you can usually suss out that just from

2413
02:26:00,261 --> 02:26:04,131
looking at what the results are of doing

2414
02:26:02,390 --> 02:26:06,171
it you know and if you want to look at

2415
02:26:04,130 --> 02:26:10,939
something object-oriented wise and

2416
02:26:06,171 --> 02:26:14,931
you're like you know I have an A or I

2417
02:26:10,940 --> 02:26:17,681
have a B and someone writes something

2418
02:26:14,931 --> 02:26:17,681
like this

2419
02:26:20,549 --> 02:26:40,289
I don't know why these aren't shifted up

2420
02:26:38,639 --> 02:26:41,639
here that's where I think they normally

2421
02:26:40,290 --> 02:26:43,680
go but I don't know I don't ever type

2422
02:26:41,639 --> 02:26:56,099
those in anymore so like I couldn't tell

2423
02:26:43,680 --> 02:26:58,200
you um so you know if you're talking

2424
02:26:56,100 --> 02:26:59,729
about this and then you're like well I

2425
02:26:58,200 --> 02:27:03,300
have a choice between these two things

2426
02:26:59,728 --> 02:27:15,000
and you know as a result I've got a

2427
02:27:03,299 --> 02:27:17,818
choice between these two things and so

2428
02:27:15,000 --> 02:27:19,770
in here I'm just like you know I would

2429
02:27:17,818 --> 02:27:33,269
access this thing this way and in here I

2430
02:27:19,770 --> 02:27:35,250
would do it you know this way right you

2431
02:27:33,270 --> 02:27:37,859
can make assessments in an objective

2432
02:27:35,250 --> 02:27:39,450
sense about these two things the first

2433
02:27:37,859 --> 02:27:41,189
thing I can say about it is there's no

2434
02:27:39,450 --> 02:27:43,829
difference between the CPU code

2435
02:27:41,189 --> 02:27:45,120
generated in either case right meaning I

2436
02:27:43,829 --> 02:27:47,760
know that this is going to increment

2437
02:27:45,120 --> 02:27:49,890
this value by one so the only thing that

2438
02:27:47,760 --> 02:27:51,780
I could really say is that well if the

2439
02:27:49,889 --> 02:27:53,039
compiler was going to screw up the code

2440
02:27:51,780 --> 02:27:54,450
gen for one of these it would almost

2441
02:27:53,040 --> 02:27:56,220
certainly be this one because there's a

2442
02:27:54,450 --> 02:27:58,979
lot more involved right

2443
02:27:56,219 --> 02:28:01,079
so you know it's a slight negative mark

2444
02:27:58,978 --> 02:28:02,459
on B because maybe the compiler

2445
02:28:01,079 --> 02:28:04,170
occasionally gets a sort of thing wrong

2446
02:28:02,459 --> 02:28:06,809
if we have too much of this happening

2447
02:28:04,170 --> 02:28:08,898
but otherwise I know that they they

2448
02:28:06,809 --> 02:28:11,670
don't there's no difference in the code

2449
02:28:08,898 --> 02:28:14,969
speed really there in any other way

2450
02:28:11,670 --> 02:28:17,100
right so then I just have to ask myself

2451
02:28:14,969 --> 02:28:20,519
well if I wrote it this way and this way

2452
02:28:17,100 --> 02:28:21,989
versus this way in this way what are the

2453
02:28:20,520 --> 02:28:24,989
practical difference as to how much I

2454
02:28:21,989 --> 02:28:26,789
have to type in and read and you know

2455
02:28:24,989 --> 02:28:29,219
you can see the difference between these

2456
02:28:26,790 --> 02:28:31,319
two things is massive right I mean

2457
02:28:29,219 --> 02:28:33,299
there's no question about which one

2458
02:28:31,318 --> 02:28:33,898
you'd rather type in this is way simpler

2459
02:28:33,299 --> 02:28:36,118
it's way

2460
02:28:33,898 --> 02:28:38,639
it's like way easier to read way smaller

2461
02:28:36,119 --> 02:28:40,890
than this it's a giant monstrosity right

2462
02:28:38,639 --> 02:28:42,090
even though it's doing no there's no

2463
02:28:40,889 --> 02:28:44,639
difference between these two things

2464
02:28:42,090 --> 02:28:47,010
right even if I want to have a new one

2465
02:28:44,639 --> 02:28:50,760
right and well I will get to that in one

2466
02:28:47,010 --> 02:28:54,689
second so they're basically like the

2467
02:28:50,760 --> 02:28:56,908
same kind of thing right and so in this

2468
02:28:54,689 --> 02:29:01,590
case I can say well what am I getting

2469
02:28:56,908 --> 02:29:03,568
for all of this extra typing and you

2470
02:29:01,590 --> 02:29:04,770
know you'd have to ask and I was trying

2471
02:29:03,568 --> 02:29:07,049
to programmer what they're getting

2472
02:29:04,770 --> 02:29:10,050
because I see you're getting nothing if

2473
02:29:07,049 --> 02:29:13,139
I want to go change how this stuff is

2474
02:29:10,049 --> 02:29:17,429
happening I can always just add you know

2475
02:29:13,139 --> 02:29:20,578
a an underscore here and change and

2476
02:29:17,430 --> 02:29:23,130
force everyone who's using it to call

2477
02:29:20,578 --> 02:29:25,529
into some accessor later if I want to so

2478
02:29:23,129 --> 02:29:27,328
if I don't have any reason to do that I

2479
02:29:25,529 --> 02:29:29,699
shouldn't bother because I'm just making

2480
02:29:27,328 --> 02:29:32,609
everyone's code worse all the time by

2481
02:29:29,699 --> 02:29:34,168
not doing that and so usually the idea

2482
02:29:32,609 --> 02:29:35,609
behind these you know the argument made

2483
02:29:34,168 --> 02:29:38,010
is that well you're you know you're kind

2484
02:29:35,609 --> 02:29:41,010
of like planning for some future change

2485
02:29:38,010 --> 02:29:42,930
that you might make but basically what

2486
02:29:41,010 --> 02:29:45,539
you're doing is forcing everyone to do

2487
02:29:42,930 --> 02:29:48,029
all you know a lot of object-oriented

2488
02:29:45,539 --> 02:29:52,289
programming patterns are about forcing

2489
02:29:48,029 --> 02:29:55,619
everyone else to do 100% of the typing

2490
02:29:52,289 --> 02:29:57,359
they would ever have to do if you ended

2491
02:29:55,619 --> 02:30:00,029
up changing everything about your

2492
02:29:57,359 --> 02:30:01,918
program every time rather than only

2493
02:30:00,029 --> 02:30:04,168
forcing them to do the typing necessary

2494
02:30:01,918 --> 02:30:06,959
for the things you actually end up doing

2495
02:30:04,168 --> 02:30:08,959
so this forces you to do all the typing

2496
02:30:06,959 --> 02:30:12,239
for any change you might make in Ex

2497
02:30:08,959 --> 02:30:13,619
ahead of time and then if you never

2498
02:30:12,238 --> 02:30:15,510
change X well you just wasted all your

2499
02:30:13,619 --> 02:30:15,869
time and everyone else's time doing it

2500
02:30:15,510 --> 02:30:18,389
right

2501
02:30:15,869 --> 02:30:20,010
whereas this does create typing in the

2502
02:30:18,389 --> 02:30:21,538
case where you then need to make X be

2503
02:30:20,010 --> 02:30:23,850
something that's a that's an accessor

2504
02:30:21,539 --> 02:30:27,300
based but you only pay it when you

2505
02:30:23,850 --> 02:30:28,229
actually do it right um and so when you

2506
02:30:27,299 --> 02:30:30,148
look at those two things that's pretty

2507
02:30:28,228 --> 02:30:34,559
easy to understand that difference you

2508
02:30:30,148 --> 02:30:36,418
know it's not very complicated so it's

2509
02:30:34,559 --> 02:30:38,578
pretty easy to say well why would I do

2510
02:30:36,418 --> 02:30:41,359
this like it doesn't it's just lots of

2511
02:30:38,578 --> 02:30:44,969
extra typing for no benefit right and so

2512
02:30:41,359 --> 02:30:47,100
the thing the reason why you pick one of

2513
02:30:44,969 --> 02:30:47,579
these things is not because someone such

2514
02:30:47,100 --> 02:30:49,620
as my

2515
02:30:47,579 --> 02:30:51,959
l told you object-oriented programming

2516
02:30:49,620 --> 02:30:55,670
was bad it's because you should be able

2517
02:30:51,959 --> 02:30:57,839
to do that analysis right and

2518
02:30:55,670 --> 02:31:00,389
furthermore you should be able to do the

2519
02:30:57,840 --> 02:31:03,329
analysis of if you knew ahead of time

2520
02:31:00,389 --> 02:31:05,629
that X was going to change then you

2521
02:31:03,329 --> 02:31:07,610
should have made accessories for it

2522
02:31:05,629 --> 02:31:11,279
right

2523
02:31:07,610 --> 02:31:13,650
so you should be able to do that

2524
02:31:11,280 --> 02:31:16,470
analysis and if you're not doing that

2525
02:31:13,649 --> 02:31:20,129
analysis then me or anyone else telling

2526
02:31:16,469 --> 02:31:21,959
you to or not do I'll be throwing your

2527
02:31:20,129 --> 02:31:24,209
programming really isn't helping

2528
02:31:21,959 --> 02:31:26,009
it's just cheating and so you should

2529
02:31:24,209 --> 02:31:28,259
spend your time figuring out how to get

2530
02:31:26,010 --> 02:31:30,450
better at this kind of analysis rather

2531
02:31:28,260 --> 02:31:33,989
than following my advice or someone

2532
02:31:30,450 --> 02:31:37,950
else's right now I'll take this a little

2533
02:31:33,989 --> 02:31:39,299
one step further and show you a place

2534
02:31:37,950 --> 02:31:41,100
where a difference of opinion could

2535
02:31:39,299 --> 02:31:43,379
arise and why you should be making

2536
02:31:41,100 --> 02:31:45,329
decisions for yourself there is one

2537
02:31:43,379 --> 02:31:46,979
difference between these two this one

2538
02:31:45,329 --> 02:31:48,360
lets you initialize it in two ways and

2539
02:31:46,979 --> 02:31:51,840
this one only lets you initialize it in

2540
02:31:48,360 --> 02:31:56,819
one way so for example if I want to say

2541
02:31:51,840 --> 02:32:01,889
you know a a here it's different than a

2542
02:31:56,819 --> 02:32:04,409
a initialize this one B that is the same

2543
02:32:01,889 --> 02:32:05,909
as that there is no I always will get a

2544
02:32:04,409 --> 02:32:09,360
zero initializer because it's got a

2545
02:32:05,909 --> 02:32:10,950
constructor here right so there is only

2546
02:32:09,360 --> 02:32:14,400
one way to initialize it and the

2547
02:32:10,950 --> 02:32:16,800
initialization is required right and so

2548
02:32:14,399 --> 02:32:19,289
in some people's world they're like I

2549
02:32:16,799 --> 02:32:21,299
want everything to always run a default

2550
02:32:19,290 --> 02:32:23,160
constructor because I want this set to

2551
02:32:21,299 --> 02:32:24,599
zero to always happen and I don't really

2552
02:32:23,159 --> 02:32:27,329
want the person to ever be able to do

2553
02:32:24,600 --> 02:32:28,649
anything else right and technically you

2554
02:32:27,329 --> 02:32:30,649
can do something else because if you

2555
02:32:28,649 --> 02:32:32,940
want to you could do something like this

2556
02:32:30,649 --> 02:32:35,670
where you basically make something the

2557
02:32:32,940 --> 02:32:39,450
size of a B and then you know put the B

2558
02:32:35,670 --> 02:32:41,850
in there right so you can still go

2559
02:32:39,450 --> 02:32:44,159
through a lot of gyrations to do it but

2560
02:32:41,850 --> 02:32:46,680
in my mind I would rather just have the

2561
02:32:44,159 --> 02:32:48,719
two simple ways of doing it one that is

2562
02:32:46,680 --> 02:32:52,979
the clear and one that is not the clear

2563
02:32:48,719 --> 02:32:58,319
and so I choose because I prefer this

2564
02:32:52,979 --> 02:33:00,389
ease of use and this paradigm I choose

2565
02:32:58,319 --> 02:33:01,170
this way of programming because I find

2566
02:33:00,389 --> 02:33:03,898
it to be more efficient

2567
02:33:01,170 --> 02:33:05,670
other people might not and they would

2568
02:33:03,898 --> 02:33:07,969
rather have a default constructor in

2569
02:33:05,670 --> 02:33:12,898
there so they should put that in there

2570
02:33:07,969 --> 02:33:15,719
right and that to me is a less clear-cut

2571
02:33:12,898 --> 02:33:18,539
win I think I can make a strong argument

2572
02:33:15,719 --> 02:33:20,698
for why this is better but it's not the

2573
02:33:18,540 --> 02:33:22,260
same as the like a priori forced

2574
02:33:20,699 --> 02:33:24,359
everyone to use accessors thing which i

2575
02:33:22,260 --> 02:33:27,510
think is like a pretty bad decision

2576
02:33:24,359 --> 02:33:29,158
like I said everything in

2577
02:33:27,510 --> 02:33:31,648
object-oriented programming is like that

2578
02:33:29,158 --> 02:33:34,648
meaning every last thing you might

2579
02:33:31,648 --> 02:33:36,539
choose to do is something that you don't

2580
02:33:34,648 --> 02:33:38,430
want to just assume it's bad or good you

2581
02:33:36,540 --> 02:33:40,140
should look at it if it's the first time

2582
02:33:38,430 --> 02:33:41,880
you've seen it and try to make an

2583
02:33:40,139 --> 02:33:44,099
assessment about whether you think it is

2584
02:33:41,879 --> 02:33:46,799
helpful or hurtful and in what

2585
02:33:44,100 --> 02:33:49,439
circumstances so some things you may say

2586
02:33:46,799 --> 02:33:51,299
are always bad other things you may say

2587
02:33:49,439 --> 02:33:54,238
are only sometimes bad and sometimes

2588
02:33:51,299 --> 02:33:56,698
useful right in it and that way you can

2589
02:33:54,238 --> 02:34:00,000
choose to use or not use them whenever

2590
02:33:56,699 --> 02:34:07,069
you find that you're in a circumstance

2591
02:34:00,000 --> 02:34:07,068
where they would be good right so

2592
02:34:19,899 --> 02:34:25,190
0zi in the example that you gave you

2593
02:34:23,959 --> 02:34:26,419
assume that you have access to the

2594
02:34:25,190 --> 02:34:28,431
source code that might be the case in

2595
02:34:26,420 --> 02:34:30,379
handmade hero but if you're using a

2596
02:34:28,431 --> 02:34:32,780
library you don't have sometimes extra

2597
02:34:30,379 --> 02:34:38,779
the CPC source is another reason to use

2598
02:34:32,780 --> 02:34:40,551
unity build without libraries sorry I'm

2599
02:34:38,780 --> 02:34:42,141
not sure exactly which example you're

2600
02:34:40,550 --> 02:34:48,319
referring to so I can't really clarify

2601
02:34:42,140 --> 02:34:50,060
much of that you're right that Oh OOP is

2602
02:34:48,319 --> 02:34:51,470
bad when every single field of a class

2603
02:34:50,060 --> 02:34:53,000
is to get excetera however in general it

2604
02:34:51,470 --> 02:34:54,979
is better to only have getters for most

2605
02:34:53,000 --> 02:34:56,271
fields making sure they can only be

2606
02:34:54,979 --> 02:34:57,590
change for the class itself it's the

2607
02:34:56,271 --> 02:34:59,061
same reason Global's are generally to be

2608
02:34:57,590 --> 02:35:01,250
avoided state changing really makes code

2609
02:34:59,060 --> 02:35:04,601
our default so I don't really agree with

2610
02:35:01,250 --> 02:35:11,209
that so I guess what I would say is I

2611
02:35:04,601 --> 02:35:18,230
really tend to factor things more

2612
02:35:11,209 --> 02:35:20,270
broadly than that so the way I look at

2613
02:35:18,229 --> 02:35:22,789
it is either someone should have access

2614
02:35:20,271 --> 02:35:24,650
to a struct or they shouldn't if they

2615
02:35:22,790 --> 02:35:27,170
shouldn't have access to the struct then

2616
02:35:24,649 --> 02:35:28,489
the whole thing should be opaque meaning

2617
02:35:27,170 --> 02:35:29,780
they should not even be able to see the

2618
02:35:28,489 --> 02:35:35,511
definition of the struct it should look

2619
02:35:29,780 --> 02:35:36,681
like this right or if they can access

2620
02:35:35,511 --> 02:35:37,750
the struck then it shouldn't have

2621
02:35:36,681 --> 02:35:44,840
getters and setters

2622
02:35:37,750 --> 02:35:47,750
generally speaking right and the reason

2623
02:35:44,840 --> 02:35:49,729
for that is either I trust the person

2624
02:35:47,750 --> 02:35:52,011
who's using this thing to know what

2625
02:35:49,729 --> 02:35:53,449
they're doing with it and it's generally

2626
02:35:52,011 --> 02:35:55,670
the kind of thing where people are

2627
02:35:53,450 --> 02:35:56,030
allowed to change the values in it or it

2628
02:35:55,670 --> 02:35:58,550
isn't

2629
02:35:56,030 --> 02:36:00,141
I don't usually find that mixing and

2630
02:35:58,550 --> 02:36:02,899
matching those makes a lot of sense

2631
02:36:00,140 --> 02:36:05,029
so having getters for fields is usually

2632
02:36:02,899 --> 02:36:08,329
again just a waste of typing for

2633
02:36:05,030 --> 02:36:14,450
anything where I don't think there's a

2634
02:36:08,329 --> 02:36:15,920
high risk of error and then where I

2635
02:36:14,450 --> 02:36:17,931
think there is a high risk of error or

2636
02:36:15,920 --> 02:36:19,940
I'm trying to ship like a strong library

2637
02:36:17,931 --> 02:36:21,649
where I really want to be able to modify

2638
02:36:19,940 --> 02:36:24,140
things behind the scenes I go this route

2639
02:36:21,649 --> 02:36:26,300
so you don't get to see anything about

2640
02:36:24,140 --> 02:36:27,979
it you just get back a blind pointer and

2641
02:36:26,300 --> 02:36:31,389
any operation you do goes through me

2642
02:36:27,979 --> 02:36:33,879
right so

2643
02:36:31,389 --> 02:36:35,500
I tend to categorize those things more

2644
02:36:33,879 --> 02:36:37,658
broadly which is why you don't see me

2645
02:36:35,500 --> 02:36:39,549
putting getters and setters on anything

2646
02:36:37,658 --> 02:36:42,969
that's generally used inside that region

2647
02:36:39,549 --> 02:36:45,759
and so again I think that's really

2648
02:36:42,969 --> 02:36:49,389
important because what the up getter

2649
02:36:45,760 --> 02:36:52,719
setter or just getter thing tends to

2650
02:36:49,389 --> 02:36:55,778
encourage is walling things off too

2651
02:36:52,719 --> 02:36:58,299
early so rather than allowing this much

2652
02:36:55,779 --> 02:37:00,790
code the ability to do that modification

2653
02:36:58,299 --> 02:37:02,438
and drawing the wall out here you tend

2654
02:37:00,790 --> 02:37:04,659
to draw it in here and then you just

2655
02:37:02,439 --> 02:37:07,300
have tons of extra typing that wasn't

2656
02:37:04,658 --> 02:37:09,430
necessary because in reality all of this

2657
02:37:07,299 --> 02:37:11,079
code really kind of did need to know how

2658
02:37:09,430 --> 02:37:12,760
those trucks work and then I agree that

2659
02:37:11,079 --> 02:37:14,738
the people out here don't need to know

2660
02:37:12,760 --> 02:37:16,148
but those people maybe should never see

2661
02:37:14,738 --> 02:37:29,459
the internals of that struct anyway

2662
02:37:16,148 --> 02:37:29,459
right so that's how I would put that

2663
02:37:31,920 --> 02:37:36,750
yeah I'm gonna go ahead and wrap it up

2664
02:37:46,450 --> 02:37:50,990
there we go all right thank you everyone

2665
02:37:49,761 --> 02:37:52,371
for joining me for the upset handmade

2666
02:37:50,989 --> 02:37:54,199
here it's my pleasure coding with you as

2667
02:37:52,370 --> 02:37:55,699
always if you would like to follow my

2668
02:37:54,200 --> 02:37:56,360
series at home you can always order the

2669
02:37:55,700 --> 02:37:58,190
game

2670
02:37:56,360 --> 02:37:59,900
well pre-order the game on handmade hero

2671
02:37:58,190 --> 02:38:03,560
org it comes to the source code so you

2672
02:37:59,899 --> 02:38:05,120
can follow along with it at home we will

2673
02:38:03,560 --> 02:38:07,431
be back for another surprise stream

2674
02:38:05,120 --> 02:38:11,060
sometime I don't really know exactly

2675
02:38:07,431 --> 02:38:13,131
when but keep your eyes peeled because

2676
02:38:11,060 --> 02:38:16,370
we are still celebrating

2677
02:38:13,130 --> 02:38:18,140
Krampus laughs which I believe is

2678
02:38:16,370 --> 02:38:19,729
officially today but we've been sort of

2679
02:38:18,140 --> 02:38:23,380
having two or three weeks of celebration

2680
02:38:19,729 --> 02:38:23,380
there let's find out

2681
02:38:36,220 --> 02:38:57,921
so it's maybe yeah I don't know I don't

2682
02:38:50,630 --> 02:39:01,251
know when it actually happens the 6th of

2683
02:38:57,921 --> 02:39:02,690
December yeah okay so on the preceding

2684
02:39:01,251 --> 02:39:06,291
evening December 5th

2685
02:39:02,690 --> 02:39:08,601
so it's tonight the hairy devil appears

2686
02:39:06,290 --> 02:39:11,689
on the streets sometimes the company st.

2687
02:39:08,601 --> 02:39:14,871
Nicholas and sometimes on his own he

2688
02:39:11,690 --> 02:39:19,070
will visit homes and businesses or it I

2689
02:39:14,870 --> 02:39:23,030
don't know if it is it a he or an it on

2690
02:39:19,070 --> 02:39:24,800
his own so I guess it's a he the st.

2691
02:39:23,031 --> 02:39:27,411
usually appears in the Eastern Rite

2692
02:39:24,800 --> 02:39:30,020
vestments of a bishop and he carries a

2693
02:39:27,411 --> 02:39:32,421
golden ceremonial staff that is not a

2694
02:39:30,021 --> 02:39:35,240
vestment of a bishop but I guess that's

2695
02:39:32,421 --> 02:39:37,190
just sometimes unlike North American

2696
02:39:35,240 --> 02:39:39,200
versions of Santa Claus in these Oh the

2697
02:39:37,190 --> 02:39:42,621
st. does not Krampus nevermind stuff

2698
02:39:39,200 --> 02:39:43,580
that's never and that's Santa Claus or

2699
02:39:42,620 --> 02:39:45,380
Saint Nicholas if you will

2700
02:39:43,581 --> 02:39:47,570
concerns only with good children while

2701
02:39:45,380 --> 02:39:49,671
Krampus runs were the bad Nicholas waits

2702
02:39:47,570 --> 02:39:54,200
as gifts well Krampus supplies coal and

2703
02:39:49,671 --> 02:40:00,411
Rutten bundles I don't know what those

2704
02:39:54,200 --> 02:40:05,750
are Krampus rootin so there we go so

2705
02:40:00,411 --> 02:40:08,690
there's competent and you know there you

2706
02:40:05,751 --> 02:40:11,570
go see he's got it there's a little kids

2707
02:40:08,690 --> 02:40:12,161
in the back just quality fun for the

2708
02:40:11,570 --> 02:40:16,601
whole family

2709
02:40:12,161 --> 02:40:18,861
chrome for self highly recommended so

2710
02:40:16,601 --> 02:40:21,411
have a good conference laugh this

2711
02:40:18,861 --> 02:40:26,240
evening we'll be back tomorrow for some

2712
02:40:21,411 --> 02:40:27,501
more post Krampus laugh revelry until

2713
02:40:26,240 --> 02:40:30,011
then have fun program I'll see everyone

2714
02:40:27,501 --> 02:40:30,011
on the Internet

