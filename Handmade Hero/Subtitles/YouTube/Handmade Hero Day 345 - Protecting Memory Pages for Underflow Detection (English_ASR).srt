1
00:00:01,070 --> 00:00:05,068
hello everyone and welcome to handmade

2
00:00:03,509 --> 00:00:08,399
hero the show recode a complete game

3
00:00:05,068 --> 00:00:11,339
live on stream today I wanted to take a

4
00:00:08,400 --> 00:00:13,289
second to show how to do something with

5
00:00:11,339 --> 00:00:15,269
our memory system now that we have made

6
00:00:13,289 --> 00:00:17,669
it so that the memory Rena's allocate

7
00:00:15,269 --> 00:00:19,260
memory to the platform layer rather than

8
00:00:17,670 --> 00:00:21,029
being passed the memory in through the

9
00:00:19,260 --> 00:00:22,830
platform layer there is an additional

10
00:00:21,028 --> 00:00:24,329
thing we can do now which we weren't

11
00:00:22,829 --> 00:00:27,000
able to really do before that's kind of

12
00:00:24,329 --> 00:00:29,368
a bonus so I thought I'd show you what

13
00:00:27,000 --> 00:00:31,259
it was it is not a feature that really

14
00:00:29,368 --> 00:00:32,729
is particularly relevant to the shipping

15
00:00:31,260 --> 00:00:34,170
version of the game but it is a feature

16
00:00:32,729 --> 00:00:36,750
that's relevant to debugging the game

17
00:00:34,170 --> 00:00:38,010
and it's a feature that potentially

18
00:00:36,750 --> 00:00:41,039
could have caught errors that we've

19
00:00:38,009 --> 00:00:43,229
already had on handmade hero so in

20
00:00:41,039 --> 00:00:44,820
general I think it's a worthwhile kind

21
00:00:43,229 --> 00:00:46,979
of thing it's the kind of thing that

22
00:00:44,820 --> 00:00:48,689
doesn't catch bugs all that often but

23
00:00:46,979 --> 00:00:49,919
when a Dutch cat does catch bugs they

24
00:00:48,689 --> 00:00:52,738
are bugs that would have taken you

25
00:00:49,920 --> 00:00:54,179
probably a little while to find and so

26
00:00:52,738 --> 00:00:55,529
it's kind of a valuable thing and it

27
00:00:54,179 --> 00:00:58,320
doesn't take too much you can implement

28
00:00:55,530 --> 00:00:59,760
it once and have it forever so it's not

29
00:00:58,320 --> 00:01:02,759
like a thing that particularly difficult

30
00:00:59,759 --> 00:01:06,329
either so let me go ahead and explain

31
00:01:02,759 --> 00:01:07,920
what we're going to do here and it'll

32
00:01:06,329 --> 00:01:10,200
take me a couple a couple minutes to

33
00:01:07,920 --> 00:01:11,460
kind of get around to it but basically

34
00:01:10,200 --> 00:01:13,890
what we're going to do today is day

35
00:01:11,459 --> 00:01:17,188
330-345 so if you want to follow along i

36
00:01:13,890 --> 00:01:21,420
used a 344 source code what you want to

37
00:01:17,188 --> 00:01:25,169
do when you're programming obviously is

38
00:01:21,420 --> 00:01:26,549
you want to have some ways when you're

39
00:01:25,170 --> 00:01:28,469
doing low-level programming like this

40
00:01:26,549 --> 00:01:30,509
where you can catch the kind of bugs

41
00:01:28,469 --> 00:01:32,340
that might take you a while to find and

42
00:01:30,509 --> 00:01:36,930
one of the most sort of insidious

43
00:01:32,340 --> 00:01:39,780
versions here right is you know buffer

44
00:01:36,930 --> 00:01:44,399
overruns right we all know that these

45
00:01:39,780 --> 00:01:46,700
are particularly a you know problematic

46
00:01:44,399 --> 00:01:48,899
i don't i spelled that right overruns

47
00:01:46,700 --> 00:01:50,909
thing is where we sort of you know we

48
00:01:48,899 --> 00:01:52,259
allocate this much memory and then

49
00:01:50,909 --> 00:01:54,509
someone's like writing into it and

50
00:01:52,259 --> 00:01:57,118
somebody writes over here right but

51
00:01:54,509 --> 00:01:59,099
there happens to be more stuff here

52
00:01:57,118 --> 00:02:01,140
because the actual allocated block let's

53
00:01:59,099 --> 00:02:03,269
say was that big so something else is

54
00:02:01,140 --> 00:02:04,950
here and this person who was trying to

55
00:02:03,269 --> 00:02:07,259
write into here got some pointer math

56
00:02:04,950 --> 00:02:09,179
wrong and wrote into here right it's the

57
00:02:07,259 --> 00:02:10,679
kind of its wits one of the kinds of

58
00:02:09,179 --> 00:02:12,420
bugs that people even created

59
00:02:10,679 --> 00:02:13,379
higher-level languages to solve to a

60
00:02:12,419 --> 00:02:14,939
certain extent

61
00:02:13,379 --> 00:02:16,319
right people don't like having buffer

62
00:02:14,939 --> 00:02:18,000
overrun bugs they're tricky to find

63
00:02:16,319 --> 00:02:19,530
tricky to know if you have them because

64
00:02:18,000 --> 00:02:21,270
they typically depend on the actual

65
00:02:19,530 --> 00:02:23,969
runtime parameters of the code they're

66
00:02:21,270 --> 00:02:27,270
not usually catchable at compile time

67
00:02:23,969 --> 00:02:29,789
always so you know static analysis tools

68
00:02:27,270 --> 00:02:31,680
can't always find them for you love

69
00:02:29,789 --> 00:02:34,109
habla and so you know it's the kind of

70
00:02:31,680 --> 00:02:36,450
thing that is a little bit problematic

71
00:02:34,110 --> 00:02:39,210
and see when you're doing this kind of

72
00:02:36,449 --> 00:02:41,009
code but you would like some way of

73
00:02:39,210 --> 00:02:42,090
being able to sell program and see you

74
00:02:41,009 --> 00:02:44,039
don't want to have to switch to

75
00:02:42,090 --> 00:02:45,539
something else just to find them so the

76
00:02:44,039 --> 00:02:48,179
question is how can you find them maybe

77
00:02:45,539 --> 00:02:49,769
more effectively in C well one of the

78
00:02:48,180 --> 00:02:51,629
nice things about the way that we're

79
00:02:49,770 --> 00:02:53,850
working with our code now is since we're

80
00:02:51,629 --> 00:02:55,919
in control of the platform layer we can

81
00:02:53,849 --> 00:02:58,859
do basically our own buffer overrun

82
00:02:55,919 --> 00:03:03,989
detection so if you remember we use a

83
00:02:58,860 --> 00:03:06,000
function called virtual a lock right and

84
00:03:03,990 --> 00:03:08,730
what virtual a lock does is virtual a

85
00:03:06,000 --> 00:03:11,069
lock is essentially you know we think of

86
00:03:08,729 --> 00:03:12,899
it as an alligator because conceptually

87
00:03:11,069 --> 00:03:15,539
that's what it's doing in our program so

88
00:03:12,900 --> 00:03:16,980
when we think about allocating memory we

89
00:03:15,539 --> 00:03:19,169
kind of think about this idea that when

90
00:03:16,979 --> 00:03:21,090
we allocate memory we are getting this

91
00:03:19,169 --> 00:03:23,159
memory we're like acquiring it from the

92
00:03:21,090 --> 00:03:24,689
system and when we free memory we're

93
00:03:23,159 --> 00:03:26,549
releasing it back to the system right

94
00:03:24,689 --> 00:03:28,020
that's kind of how we look at it because

95
00:03:26,550 --> 00:03:30,420
that's what it semantically means to our

96
00:03:28,020 --> 00:03:33,300
program but technically speaking that's

97
00:03:30,419 --> 00:03:35,939
not really exactly that's that's not the

98
00:03:33,300 --> 00:03:38,280
entirety of what it's doing right yes it

99
00:03:35,939 --> 00:03:40,079
is doing the sort of allocation and

100
00:03:38,280 --> 00:03:42,360
freeing operations as we would think of

101
00:03:40,080 --> 00:03:44,520
them semantically but we've also as we

102
00:03:42,360 --> 00:03:47,070
talked about in the past it also does

103
00:03:44,520 --> 00:03:51,000
memory mapping and what that means is

104
00:03:47,069 --> 00:03:52,889
that if we have a you know some kind of

105
00:03:51,000 --> 00:03:56,490
physical memory here right here is our

106
00:03:52,889 --> 00:03:57,989
physical memory you know and this is

107
00:03:56,490 --> 00:03:59,370
however much it is I don't remember how

108
00:03:57,990 --> 00:04:02,070
much is on this machine physical memory

109
00:03:59,370 --> 00:04:04,860
wise performance what do we have

110
00:04:02,069 --> 00:04:08,609
physical memory 12 gigabytes I guess

111
00:04:04,860 --> 00:04:10,590
something like this so you know if we

112
00:04:08,610 --> 00:04:12,270
have 12 gigs of physical memory right

113
00:04:10,590 --> 00:04:13,590
then obviously that's all the memory

114
00:04:12,270 --> 00:04:16,829
that we're operating with that's

115
00:04:13,590 --> 00:04:18,959
actually real but our programs might be

116
00:04:16,829 --> 00:04:22,259
allocating drastically more than 12

117
00:04:18,959 --> 00:04:24,478
gigabytes if we wanted to write and even

118
00:04:22,259 --> 00:04:25,889
if it wasn't even if let's say we're

119
00:04:24,478 --> 00:04:26,969
only allocating a little bit of memory

120
00:04:25,889 --> 00:04:28,949
there's nothing to say

121
00:04:26,970 --> 00:04:30,570
that two programs might not be

122
00:04:28,949 --> 00:04:33,180
allocating memory in effectively the

123
00:04:30,569 --> 00:04:35,339
same place right so how does this work

124
00:04:33,180 --> 00:04:36,870
well as we've talked about before in

125
00:04:35,339 --> 00:04:38,789
addition to physical memory there is the

126
00:04:36,870 --> 00:04:40,410
concept of virtual memory or virtual

127
00:04:38,790 --> 00:04:42,180
addressing space and what that is is

128
00:04:40,410 --> 00:04:44,610
what memory looks like to your program

129
00:04:42,180 --> 00:04:47,040
so in a virtual address space I may

130
00:04:44,610 --> 00:04:50,129
think that this block of memory right is

131
00:04:47,040 --> 00:04:54,540
is right here and maybe I said I

132
00:04:50,129 --> 00:04:57,269
allocated 8k of memory right and this is

133
00:04:54,540 --> 00:04:58,920
where it was in my address space and so

134
00:04:57,269 --> 00:05:00,599
I just think of it as I'm just you know

135
00:04:58,920 --> 00:05:02,400
I've got a pointer in here and I do some

136
00:05:00,600 --> 00:05:03,810
stuff with it and as far as I know you

137
00:05:02,399 --> 00:05:05,310
know it's just whatever the pointer was

138
00:05:03,810 --> 00:05:08,069
is where it is in virtual address space

139
00:05:05,310 --> 00:05:09,959
right but in physical memory the

140
00:05:08,069 --> 00:05:11,430
operating system has mapped this memory

141
00:05:09,959 --> 00:05:12,899
that i'm using into some place

142
00:05:11,430 --> 00:05:15,150
ville-marie may have nothing to do with

143
00:05:12,899 --> 00:05:17,849
these addresses first of all the

144
00:05:15,149 --> 00:05:19,649
operating system works on 4k pages so in

145
00:05:17,850 --> 00:05:21,330
theoretically if this might not even be

146
00:05:19,649 --> 00:05:23,459
in the same place it might be that

147
00:05:21,329 --> 00:05:25,439
there's some up here and some down here

148
00:05:23,459 --> 00:05:27,479
like here's 4k of it the first 4k and

149
00:05:25,439 --> 00:05:29,579
here's the second 4k or this could be

150
00:05:27,480 --> 00:05:31,080
this this could be the first 4k and that

151
00:05:29,579 --> 00:05:33,779
could be the second 4k right it could be

152
00:05:31,079 --> 00:05:35,759
mapped like this so essentially there is

153
00:05:33,779 --> 00:05:39,689
page table and all sorts of things that

154
00:05:35,759 --> 00:05:41,370
happen that translate these virtual

155
00:05:39,689 --> 00:05:42,959
addresses into physical addresses and

156
00:05:41,370 --> 00:05:44,459
the processor has a little table a

157
00:05:42,959 --> 00:05:46,199
translation lookaside buffer and all

158
00:05:44,459 --> 00:05:47,759
these are the things that there's just a

159
00:05:46,199 --> 00:05:50,129
whole bunch of mechanics that go into

160
00:05:47,759 --> 00:05:52,349
making this work smoothly the end result

161
00:05:50,129 --> 00:05:56,069
of course being that our CPU when we are

162
00:05:52,350 --> 00:05:57,870
executing our process as far as we know

163
00:05:56,069 --> 00:05:59,550
it looks like we've just got all this

164
00:05:57,870 --> 00:06:01,918
memory that just belongs to us and then

165
00:05:59,550 --> 00:06:04,228
it's it's we're talking about in our

166
00:06:01,918 --> 00:06:05,909
terms but really the operating system

167
00:06:04,228 --> 00:06:07,500
may be moving things around they may be

168
00:06:05,910 --> 00:06:09,360
in various places of physical memory

169
00:06:07,500 --> 00:06:11,250
they may be evicted out to the disk when

170
00:06:09,360 --> 00:06:13,470
our process is suspended all sorts of

171
00:06:11,250 --> 00:06:14,668
things could happen right so again we've

172
00:06:13,470 --> 00:06:15,900
talked about this on handmade here I'd

173
00:06:14,668 --> 00:06:17,069
encourage you to go back and watch the

174
00:06:15,899 --> 00:06:18,299
original episodes on that if you're

175
00:06:17,069 --> 00:06:21,120
uncomfortable with it but that's the

176
00:06:18,300 --> 00:06:24,540
basic idea of what happens with virtual

177
00:06:21,120 --> 00:06:28,740
and physical memory so what this means

178
00:06:24,540 --> 00:06:32,370
is that we can actually play a bit with

179
00:06:28,740 --> 00:06:34,889
how this this memory works because we

180
00:06:32,370 --> 00:06:39,209
know that these pages are really part of

181
00:06:34,889 --> 00:06:40,500
a scheme that that translates addresses

182
00:06:39,209 --> 00:06:42,779
into physical memory it

183
00:06:40,500 --> 00:06:46,470
not like the old days before memory

184
00:06:42,779 --> 00:06:48,869
management units when a pointer actually

185
00:06:46,470 --> 00:06:51,030
meant the physical like place in RAM

186
00:06:48,870 --> 00:06:52,110
where this thing was that is not what

187
00:06:51,029 --> 00:06:54,689
we're dealing with we're dealing with a

188
00:06:52,110 --> 00:06:56,430
virtual address space so if you think

189
00:06:54,689 --> 00:06:58,769
about what happens when we allocate

190
00:06:56,430 --> 00:07:01,290
something right we call virtual a lock

191
00:06:58,769 --> 00:07:03,240
and we're going to get a pointer to the

192
00:07:01,290 --> 00:07:05,280
beginning of of whatever this is and

193
00:07:03,240 --> 00:07:07,620
that buffer is going to be 64k aligned

194
00:07:05,279 --> 00:07:09,239
the reason it's going to be 64 Kaline is

195
00:07:07,620 --> 00:07:10,709
because when you allocate something with

196
00:07:09,240 --> 00:07:12,660
virtual alec it always gives you back

197
00:07:10,709 --> 00:07:14,879
things on 64k page granular that's the

198
00:07:12,660 --> 00:07:17,010
granularity of empties allocation of

199
00:07:14,879 --> 00:07:18,600
windows is allocation that's the Opera

200
00:07:17,009 --> 00:07:21,418
it's an operating system specific

201
00:07:18,600 --> 00:07:23,129
implementation detail and then what it's

202
00:07:21,418 --> 00:07:25,560
going to do is it's going to allocate

203
00:07:23,129 --> 00:07:27,779
some number of 4k pages the operating

204
00:07:25,560 --> 00:07:31,110
system works in these 4k pages so if we

205
00:07:27,779 --> 00:07:33,539
said we wanted 16 k it would not give us

206
00:07:31,110 --> 00:07:36,780
a single 16 k block what it actually

207
00:07:33,540 --> 00:07:38,939
gives us is a set of blocks that are

208
00:07:36,779 --> 00:07:42,599
each 4k that just happened to be

209
00:07:38,939 --> 00:07:45,120
contiguous ok so if we ask for 16 k

210
00:07:42,600 --> 00:07:46,979
we're actually at 44 k blocks that all

211
00:07:45,120 --> 00:07:50,160
just happen to be mapped contiguously in

212
00:07:46,978 --> 00:07:54,029
in memory but when we go through this

213
00:07:50,160 --> 00:07:56,340
memory make no mistake if our pointer is

214
00:07:54,029 --> 00:07:59,959
the pointer or anything up to the

215
00:07:56,339 --> 00:08:04,019
pointer plus 4 K minus 1 write a plus

216
00:07:59,959 --> 00:08:07,879
4095 right we are writing into this

217
00:08:04,019 --> 00:08:11,159
memory page but as soon as we go to 4096

218
00:08:07,879 --> 00:08:14,250
right now we're pointing into this

219
00:08:11,160 --> 00:08:16,080
memory page and they are actually

220
00:08:14,250 --> 00:08:18,329
different to the operating system

221
00:08:16,079 --> 00:08:20,099
everything inside this 4k page is the

222
00:08:18,329 --> 00:08:22,349
same everything inside this 4k page to

223
00:08:20,100 --> 00:08:25,470
be the same but between the two they are

224
00:08:22,350 --> 00:08:28,919
not the same what that means is we have

225
00:08:25,470 --> 00:08:32,099
the ability to actually allocate memory

226
00:08:28,918 --> 00:08:39,529
in such a way that would create what's

227
00:08:32,099 --> 00:08:41,669
called a guard page and I mean

228
00:08:39,529 --> 00:08:43,319
technically a guard page is usually used

229
00:08:41,668 --> 00:08:45,960
for something slightly different but it

230
00:08:43,320 --> 00:08:48,660
doesn't matter point being we can use

231
00:08:45,960 --> 00:08:51,240
something where we allocate an extra

232
00:08:48,659 --> 00:08:54,269
page of memory so that lets say we did

233
00:08:51,240 --> 00:08:56,580
want 16 k worth of memory we could then

234
00:08:54,269 --> 00:08:59,850
allocate an additional 4k page on the

235
00:08:56,580 --> 00:09:02,550
end so actually 16 k plus 4 case over

236
00:08:59,850 --> 00:09:04,740
20k total and we could then do something

237
00:09:02,549 --> 00:09:10,349
using a new function which we have not

238
00:09:04,740 --> 00:09:12,870
used called virtual protect and what we

239
00:09:10,350 --> 00:09:14,759
can do with virtual protect is say do

240
00:09:12,870 --> 00:09:16,950
not allow anyone to write to this page

241
00:09:14,759 --> 00:09:22,620
if anyone writes to this page I want you

242
00:09:16,950 --> 00:09:23,910
too hard fault right there okay so what

243
00:09:22,620 --> 00:09:24,870
will happen is people can write write

244
00:09:23,909 --> 00:09:26,759
write write write write write write

245
00:09:24,870 --> 00:09:29,340
write write write write write as soon as

246
00:09:26,759 --> 00:09:33,899
somebody writes over this page BAM it's

247
00:09:29,340 --> 00:09:38,340
over right it will fault as if we had

248
00:09:33,899 --> 00:09:41,250
written to a null pointer so now you may

249
00:09:38,340 --> 00:09:43,500
be saying well that's all great how are

250
00:09:41,250 --> 00:09:47,970
we going to deal with the fact that the

251
00:09:43,500 --> 00:09:51,419
16k buffer may actually have been much

252
00:09:47,970 --> 00:09:53,129
much more unaligned than that right what

253
00:09:51,419 --> 00:09:55,379
happens if the person only wants to

254
00:09:53,129 --> 00:09:58,559
allocate let's say they allocated I

255
00:09:55,379 --> 00:10:01,500
don't know 73 bites that was the

256
00:09:58,559 --> 00:10:04,319
allocation size they asked for well 73

257
00:10:01,500 --> 00:10:07,649
bytes is going to end up being like this

258
00:10:04,320 --> 00:10:09,480
little tiny part of the 4k page right so

259
00:10:07,649 --> 00:10:11,309
now yes we could allocate an additional

260
00:10:09,480 --> 00:10:13,620
4k page here and mark it as something

261
00:10:11,309 --> 00:10:15,839
that cannot be written to but they're

262
00:10:13,620 --> 00:10:17,789
still all of this buffer overrun space

263
00:10:15,840 --> 00:10:20,250
what that means is that there's still

264
00:10:17,789 --> 00:10:22,889
plenty of room for error that we won't

265
00:10:20,250 --> 00:10:24,960
catch and since buffer overruns often

266
00:10:22,889 --> 00:10:26,639
tend to be only by a little bit like

267
00:10:24,960 --> 00:10:29,100
it's very common for example to maybe

268
00:10:26,639 --> 00:10:32,909
have an off by one error it's not so

269
00:10:29,100 --> 00:10:35,430
common to have an off by 1734 or

270
00:10:32,909 --> 00:10:37,799
whatever right so it's definitely the

271
00:10:35,429 --> 00:10:41,399
case that we would like to have the very

272
00:10:37,799 --> 00:10:43,199
last little piece here whatever you know

273
00:10:41,399 --> 00:10:48,299
whatever the one closest the delegation

274
00:10:43,200 --> 00:10:49,740
is we like that default and the answer

275
00:10:48,299 --> 00:10:51,809
here is that's actually not that big of

276
00:10:49,740 --> 00:10:54,840
a deal if we want to do that all we have

277
00:10:51,809 --> 00:10:56,639
to do is when we allocate memory if we

278
00:10:54,840 --> 00:10:58,590
want to put our memory allocator in a

279
00:10:56,639 --> 00:11:01,169
mode that guards for buffer overruns off

280
00:10:58,590 --> 00:11:04,230
the beginning of a buffer then we always

281
00:11:01,169 --> 00:11:06,509
just take and we align ourselves such

282
00:11:04,230 --> 00:11:07,649
that whatever the pointer is that we

283
00:11:06,509 --> 00:11:10,139
return from our aliquet

284
00:11:07,649 --> 00:11:12,419
right is aligned at the beginning and we

285
00:11:10,139 --> 00:11:14,369
mark this the page you know the 4k page

286
00:11:12,419 --> 00:11:16,979
before it here are the 2 4get pages as

287
00:11:14,369 --> 00:11:18,778
unrideable on the other hand if what we

288
00:11:16,980 --> 00:11:21,300
wanted to do was catch buffer overruns

289
00:11:18,778 --> 00:11:24,928
that co off the far end of the buffer

290
00:11:21,299 --> 00:11:27,659
then we just move the pointer up to the

291
00:11:24,928 --> 00:11:30,328
end of the page that we get so that it

292
00:11:27,659 --> 00:11:34,139
ends right on the page boundary right

293
00:11:30,328 --> 00:11:36,719
and then we mark it now we can't quite

294
00:11:34,139 --> 00:11:38,610
do this always because if the person who

295
00:11:36,720 --> 00:11:41,399
allocated the memory asked for alignment

296
00:11:38,610 --> 00:11:42,899
of a certain kind we may not be able to

297
00:11:41,399 --> 00:11:45,539
move it all the way to the end for

298
00:11:42,899 --> 00:11:50,899
example if they ask for 73 bites but

299
00:11:45,539 --> 00:11:50,899
they wanted it 16 byte aligned right

300
00:11:50,928 --> 00:11:55,409
well then there's nothing we can do

301
00:11:53,068 --> 00:11:58,708
about it because 64 bytes would be the

302
00:11:55,409 --> 00:12:01,828
previous 16 boundary right and then 80

303
00:11:58,708 --> 00:12:03,328
bytes would be the next one and so we're

304
00:12:01,828 --> 00:12:05,368
going to have a seven bite overhang

305
00:12:03,328 --> 00:12:06,599
there regardless there's nothing we can

306
00:12:05,369 --> 00:12:08,939
do about that that you could overwrite

307
00:12:06,600 --> 00:12:11,369
do but fortunately usually when people

308
00:12:08,938 --> 00:12:13,438
ask for aligned memory they typically

309
00:12:11,369 --> 00:12:14,428
also specify a size that happens to be

310
00:12:13,438 --> 00:12:16,019
aligned to that that's just the way

311
00:12:14,428 --> 00:12:17,698
programming typically works I'm

312
00:12:16,019 --> 00:12:20,850
operating on simdi you know so I'm

313
00:12:17,698 --> 00:12:22,948
allocating M 128 typically I'm going to

314
00:12:20,850 --> 00:12:24,990
have an even multiple event M 128 which

315
00:12:22,948 --> 00:12:30,808
are 16 bytes right so it all works out

316
00:12:24,990 --> 00:12:32,370
in the in the end so previously we

317
00:12:30,808 --> 00:12:33,749
didn't really have any way to implement

318
00:12:32,370 --> 00:12:35,818
anything like this and the reason we

319
00:12:33,749 --> 00:12:37,920
didn't is because we were never actually

320
00:12:35,818 --> 00:12:39,299
asking the operating system for memory

321
00:12:37,919 --> 00:12:41,009
except for just the very beginning the

322
00:12:39,299 --> 00:12:43,979
program where we asked her one big block

323
00:12:41,009 --> 00:12:45,778
and one big block doesn't really help us

324
00:12:43,980 --> 00:12:47,519
because every time the user doesn't

325
00:12:45,778 --> 00:12:49,769
allocation they were out sub alka out of

326
00:12:47,519 --> 00:12:52,259
the block we had no ability to align and

327
00:12:49,769 --> 00:12:54,749
protect memory for them in that

328
00:12:52,259 --> 00:12:57,419
circumstance but now that we do have the

329
00:12:54,749 --> 00:13:00,990
ability to have our allocator go down

330
00:12:57,419 --> 00:13:02,669
through the system and allocate its

331
00:13:00,990 --> 00:13:05,639
memory directly from us if we should

332
00:13:02,669 --> 00:13:08,068
choose to do so we can effectively

333
00:13:05,639 --> 00:13:10,678
implement bounds checking by forcing it

334
00:13:08,068 --> 00:13:12,828
to do that and let me show you what I

335
00:13:10,678 --> 00:13:12,828
mean

336
00:13:15,500 --> 00:13:23,759
again just a reminder we're starting

337
00:13:17,610 --> 00:13:27,620
with day 344 is code here good I'm going

338
00:13:23,759 --> 00:13:27,620
to load up the handmade project build it

339
00:13:28,730 --> 00:13:35,670
here is memory and so what I want to do

340
00:13:33,509 --> 00:13:39,720
here is say alright here's my memory

341
00:13:35,669 --> 00:13:41,819
arena and I have these allocation flags

342
00:13:39,720 --> 00:13:44,730
that I that I'm passing down to the

343
00:13:41,820 --> 00:13:47,550
operating system and what I might want

344
00:13:44,730 --> 00:13:49,950
to do is just say okay those allocation

345
00:13:47,549 --> 00:13:53,129
flags that I have what if i were to

346
00:13:49,950 --> 00:13:55,230
specify another type of flag that says

347
00:13:53,129 --> 00:14:03,389
that we want to do that kind of overrun

348
00:13:55,230 --> 00:14:08,639
checking right so if i do that should be

349
00:14:03,389 --> 00:14:15,960
platform em right yeah if i say platform

350
00:14:08,639 --> 00:14:23,279
memory you know overflow checked or plat

351
00:14:15,960 --> 00:14:25,920
for a memory like underflow check then I

352
00:14:23,279 --> 00:14:27,480
should be able to specify / arena that I

353
00:14:25,919 --> 00:14:29,250
want this now you know now that think

354
00:14:27,480 --> 00:14:30,779
about it this is probably just a thing

355
00:14:29,250 --> 00:14:32,820
that we'd turn on at runtime and not for

356
00:14:30,779 --> 00:14:36,569
any particular arena well I'll do it

357
00:14:32,820 --> 00:14:38,940
poor arena for now anyway why not all

358
00:14:36,570 --> 00:14:40,980
right so all I want to do now say hey

359
00:14:38,940 --> 00:14:43,770
those allocation Flyers could be set to

360
00:14:40,980 --> 00:14:45,899
underflow check or overflow Chuck and so

361
00:14:43,769 --> 00:14:47,789
if those flags are set then we know that

362
00:14:45,899 --> 00:14:49,259
that's something that we want to have

363
00:14:47,789 --> 00:14:50,849
happening on this arena that debug

364
00:14:49,259 --> 00:14:52,649
option we want to have that on the arena

365
00:14:50,850 --> 00:14:54,720
and so what I'm going to do is in here

366
00:14:52,649 --> 00:14:57,870
where we have pushed sighs all I want to

367
00:14:54,720 --> 00:15:01,440
do inside the push size is I just want

368
00:14:57,870 --> 00:15:05,610
to go ahead and say hey let's assume

369
00:15:01,440 --> 00:15:11,760
that if this arena has the allocation

370
00:15:05,610 --> 00:15:14,330
flag set such that it wants some kind of

371
00:15:11,759 --> 00:15:14,330
bounds checking

372
00:15:22,059 --> 00:15:29,689
right so we just go ahead and say let's

373
00:15:28,129 --> 00:15:31,340
see what the allocation flag say if

374
00:15:29,690 --> 00:15:33,890
their overflow check or under flip check

375
00:15:31,340 --> 00:15:36,110
is on then what I want to do is instead

376
00:15:33,889 --> 00:15:38,149
of doing any of this and I guess

377
00:15:36,110 --> 00:15:45,080
technically some of this i do want to do

378
00:15:38,149 --> 00:15:48,110
for example i do want to do that right i

379
00:15:45,080 --> 00:15:49,940
do want to be able to do my zero size so

380
00:15:48,110 --> 00:15:52,399
that should happen regardless of what's

381
00:15:49,940 --> 00:15:53,600
happening but here what i want to do is

382
00:15:52,399 --> 00:15:55,340
say okay if we're going to underflow

383
00:15:53,600 --> 00:15:58,129
over check instead of doing all of this

384
00:15:55,340 --> 00:16:02,389
stuff that we were doing before i want

385
00:15:58,129 --> 00:16:06,019
to instead use essentially a new block

386
00:16:02,389 --> 00:16:09,679
for every single one of my allocations

387
00:16:06,019 --> 00:16:12,439
right so I want to effectively pass

388
00:16:09,679 --> 00:16:17,719
every allocation down to the system

389
00:16:12,440 --> 00:16:19,130
every time if that makes sense so what I

390
00:16:17,720 --> 00:16:21,350
can do here is just say like okay

391
00:16:19,129 --> 00:16:23,088
normally we're calling this only when we

392
00:16:21,350 --> 00:16:26,149
need a new block instead I'm just going

393
00:16:23,089 --> 00:16:28,370
to call it any time that I have anything

394
00:16:26,149 --> 00:16:31,250
happening at all and so I'm going to

395
00:16:28,370 --> 00:16:36,620
declare the result up here like so I'm

396
00:16:31,250 --> 00:16:38,389
going to get it like this and then I'm

397
00:16:36,620 --> 00:16:40,730
going to keep that path working the way

398
00:16:38,389 --> 00:16:41,509
that it was and so when we in dere said

399
00:16:40,730 --> 00:16:43,250
like all right we've got these

400
00:16:41,509 --> 00:16:44,720
allocation flags we want to do overflow

401
00:16:43,250 --> 00:16:46,730
or underflow checking in that case let's

402
00:16:44,720 --> 00:16:48,470
just allocate the memory and we'll pass

403
00:16:46,730 --> 00:16:51,889
the allocation flags down to the system

404
00:16:48,470 --> 00:16:53,629
as is and that's it and now everything

405
00:16:51,889 --> 00:16:56,449
that we do would actually go through an

406
00:16:53,629 --> 00:16:58,309
individual allocation right now this is

407
00:16:56,450 --> 00:16:59,629
going to be incredibly inefficient right

408
00:16:58,309 --> 00:17:02,269
this is definitely not something that we

409
00:16:59,629 --> 00:17:04,519
would ever ever ever want to do in

410
00:17:02,269 --> 00:17:06,529
practice when we were running the game

411
00:17:04,519 --> 00:17:09,740
but it's certainly something we could do

412
00:17:06,529 --> 00:17:11,990
for working on the game so I'm going to

413
00:17:09,740 --> 00:17:16,759
go ahead and and furthermore pass the

414
00:17:11,990 --> 00:17:19,068
the size in it down there we go and we

415
00:17:16,759 --> 00:17:21,890
also need the alignment here but I'll

416
00:17:19,068 --> 00:17:23,838
this will always be aligned to a 16-byte

417
00:17:21,890 --> 00:17:26,780
boundary at the moment so we shouldn't

418
00:17:23,838 --> 00:17:28,369
actually have a problem with that ok so

419
00:17:26,779 --> 00:17:29,569
now if i run it nothing in

420
00:17:28,369 --> 00:17:32,449
ticular is going to happen obviously

421
00:17:29,569 --> 00:17:34,669
because we don't actually have that flag

422
00:17:32,450 --> 00:17:38,299
set anywhere so in theory we just get

423
00:17:34,670 --> 00:17:41,509
the exact same thing but if i am to now

424
00:17:38,299 --> 00:17:44,149
go and say hey let's by default set

425
00:17:41,509 --> 00:17:46,220
those allocation flags so you know let's

426
00:17:44,150 --> 00:17:47,960
just say we're going to have a little

427
00:17:46,220 --> 00:17:50,180
weight here where we just say let's or

428
00:17:47,960 --> 00:17:53,360
it in i'm going to put overflow checking

429
00:17:50,180 --> 00:17:56,269
on this arena all on every arena

430
00:17:53,359 --> 00:17:59,539
basically then you can kind of see

431
00:17:56,269 --> 00:18:01,190
things are super slow right and they're

432
00:17:59,539 --> 00:18:03,710
because they're allocating allocating

433
00:18:01,190 --> 00:18:05,929
allocating and it can't ever free right

434
00:18:03,710 --> 00:18:07,308
and so eventually we'll just use up all

435
00:18:05,929 --> 00:18:09,980
the memory in the system and just crash

436
00:18:07,308 --> 00:18:12,200
right in fact this is probably a bad

437
00:18:09,980 --> 00:18:16,779
idea because now our thing is going to

438
00:18:12,200 --> 00:18:23,529
crash that's not good stop everyone stop

439
00:18:16,779 --> 00:18:23,529
no make it stop please

440
00:18:26,039 --> 00:18:28,099
you

441
00:18:31,460 --> 00:18:33,519
you

442
00:18:40,669 --> 00:18:51,739
that were the internet worm I don't

443
00:18:49,999 --> 00:18:53,538
understand how we have operating system

444
00:18:51,739 --> 00:18:55,009
still in this day and age when something

445
00:18:53,538 --> 00:18:55,970
just allocates a bunch of memory it's

446
00:18:55,009 --> 00:18:58,970
basically a distributed

447
00:18:55,970 --> 00:19:02,239
denial-of-service attack right it's like

448
00:18:58,970 --> 00:19:15,739
how did that happen and I have no idea

449
00:19:02,239 --> 00:19:17,210
Oh computer it's just like in the old

450
00:19:15,739 --> 00:19:18,470
days when you didn't actually have

451
00:19:17,210 --> 00:19:19,730
memory protection and you'd write a

452
00:19:18,470 --> 00:19:23,169
program and it would just crash your

453
00:19:19,730 --> 00:19:26,058
computer and that would be the end of it

454
00:19:23,169 --> 00:19:28,639
for the love of God man just close the

455
00:19:26,058 --> 00:19:32,950
application how hard is it you're an

456
00:19:28,638 --> 00:19:32,949
operating system have some self-respect

457
00:19:40,839 --> 00:19:48,128
windows how are you not yeah

458
00:19:50,769 --> 00:20:01,660
ladies and gentlemen is 2016 and all you

459
00:19:54,880 --> 00:20:10,290
have to do to kill Windows is just

460
00:20:01,660 --> 00:20:13,210
allocate some memory well that was fun

461
00:20:10,289 --> 00:20:18,309
are we still recording even I have no

462
00:20:13,210 --> 00:20:21,960
idea and we dropped quite a few frames

463
00:20:18,309 --> 00:20:27,009
to say the least but hey that's fine

464
00:20:21,960 --> 00:20:28,779
anyway I was just trying to show that we

465
00:20:27,009 --> 00:20:37,240
could pass all of our allocations down

466
00:20:28,779 --> 00:20:39,339
to the system oops Wow alright anyway so

467
00:20:37,240 --> 00:20:41,019
the problem that will have here if we

468
00:20:39,339 --> 00:20:43,959
want to run in this mode for sended

469
00:20:41,019 --> 00:20:46,660
period of time as you saw is we do need

470
00:20:43,960 --> 00:20:49,360
a way of freeing this memory when the

471
00:20:46,660 --> 00:20:52,269
time comes and so in order to do that we

472
00:20:49,359 --> 00:20:53,769
do need to have sort of a way of keeping

473
00:20:52,269 --> 00:20:57,190
our block footer and that sort of stuff

474
00:20:53,769 --> 00:20:59,259
which is these things here and so what I

475
00:20:57,190 --> 00:21:01,600
need to do is I need to have some way

476
00:20:59,259 --> 00:21:04,660
that I can still do the like freeze you

477
00:21:01,599 --> 00:21:06,250
know as we go so in order to do that

478
00:21:04,660 --> 00:21:09,400
what I want to try and do is I want to

479
00:21:06,250 --> 00:21:11,829
try and use the same path because you

480
00:21:09,400 --> 00:21:13,300
can see like I could go here and try to

481
00:21:11,829 --> 00:21:16,319
put in the block header and do all that

482
00:21:13,299 --> 00:21:18,309
sort of stuff and and you know try I

483
00:21:16,319 --> 00:21:20,889
don't know monkey around with it and

484
00:21:18,309 --> 00:21:23,230
whatever but as you can imagine if I do

485
00:21:20,890 --> 00:21:24,880
that stuff I gotta kind of reimplement

486
00:21:23,230 --> 00:21:26,589
all the stuff that I had here before

487
00:21:24,880 --> 00:21:27,700
because I already had the concept of

488
00:21:26,589 --> 00:21:28,929
sticking your foot around the end and

489
00:21:27,700 --> 00:21:30,970
knowing that i freed it and that sort of

490
00:21:28,930 --> 00:21:32,650
stuff so the question is can I do

491
00:21:30,970 --> 00:21:35,319
anything here that would force me to

492
00:21:32,650 --> 00:21:36,700
always allocate a block and make that be

493
00:21:35,319 --> 00:21:38,740
the default thing that happens and the

494
00:21:36,700 --> 00:21:40,600
answer is yes I can because you can see

495
00:21:38,740 --> 00:21:42,730
here that previously we were checking to

496
00:21:40,599 --> 00:21:45,879
see whether the arena had a particular

497
00:21:42,730 --> 00:21:47,319
size or not and we had this sort of

498
00:21:45,880 --> 00:21:50,740
minimum block size and all that sort of

499
00:21:47,319 --> 00:21:52,269
stuff what I could do instead is when I

500
00:21:50,740 --> 00:21:55,480
detect that the arena has this

501
00:21:52,269 --> 00:21:58,210
particular piece this particular flag

502
00:21:55,480 --> 00:22:00,789
set what i could do is just change the

503
00:21:58,210 --> 00:22:03,910
way that this particular thing works to

504
00:22:00,789 --> 00:22:04,629
ensure that arenas never actually keep

505
00:22:03,910 --> 00:22:07,450
any

506
00:22:04,630 --> 00:22:09,160
eyes other than the exact size they need

507
00:22:07,450 --> 00:22:12,460
for their it for the allocation they

508
00:22:09,160 --> 00:22:18,009
just did if that makes sense so what I

509
00:22:12,460 --> 00:22:26,500
want to do here is say like oh ok if I

510
00:22:18,009 --> 00:22:28,509
am I have to think about whether this

511
00:22:26,500 --> 00:22:30,970
getting effective size for here is a

512
00:22:28,509 --> 00:22:32,440
problem or not but if I am detecting

513
00:22:30,970 --> 00:22:35,410
that I have the overflow or underflow

514
00:22:32,440 --> 00:22:37,960
checking enabled then what I want to do

515
00:22:35,410 --> 00:22:39,880
is I want to say ok let's instead of

516
00:22:37,960 --> 00:22:41,860
trying to reimplement exactly the same

517
00:22:39,880 --> 00:22:44,620
thing we have there let's just make sure

518
00:22:41,859 --> 00:22:47,619
that we never try to allocate more than

519
00:22:44,619 --> 00:22:52,779
exactly the size that's going to give us

520
00:22:47,619 --> 00:22:54,250
what we want right and in fact we can

521
00:22:52,779 --> 00:22:56,230
still leave this code in there that

522
00:22:54,250 --> 00:22:57,549
won't really make any difference but

523
00:22:56,230 --> 00:22:59,710
what I want to do is you can see here we

524
00:22:57,549 --> 00:23:02,799
do this maximum size for Mary black

525
00:22:59,710 --> 00:23:05,950
fighter arena minimum block size so what

526
00:23:02,799 --> 00:23:08,409
we could do is just say like hey always

527
00:23:05,950 --> 00:23:09,880
zero out that minimum block size in fact

528
00:23:08,410 --> 00:23:12,460
maybe I can put it like this i could say

529
00:23:09,880 --> 00:23:14,940
just make the minimum block size always

530
00:23:12,460 --> 00:23:14,940
be zero

531
00:23:21,970 --> 00:23:28,399
typing is hard for this like a fun

532
00:23:25,398 --> 00:23:30,018
tomorrow there we go let's just always

533
00:23:28,398 --> 00:23:31,129
make the arena block size zero if we're

534
00:23:30,019 --> 00:23:33,500
going to do an underfloor over to check

535
00:23:31,130 --> 00:23:35,679
that way the amount we allocate is going

536
00:23:33,500 --> 00:23:39,409
to be exactly the right amount and never

537
00:23:35,679 --> 00:23:40,880
any different right that way we'll

538
00:23:39,409 --> 00:23:44,809
always sort of chain the blocks together

539
00:23:40,880 --> 00:23:47,330
still and off we go so let's give that a

540
00:23:44,808 --> 00:23:49,879
shot let's see if we're going to hose

541
00:23:47,329 --> 00:23:51,138
the system again hopefully we should be

542
00:23:49,880 --> 00:23:53,620
freeing things now although we don't

543
00:23:51,138 --> 00:23:53,619
appear to be

544
00:24:02,420 --> 00:24:06,289
looks like we have stabilized

545
00:24:08,109 --> 00:24:13,719
alright so that looks fairly stable now

546
00:24:10,509 --> 00:24:15,279
and that again is calling strictly

547
00:24:13,720 --> 00:24:18,069
through the operating systems allocator

548
00:24:15,279 --> 00:24:19,298
for every single allocation and you can

549
00:24:18,069 --> 00:24:22,629
see that we get kind of sluggish

550
00:24:19,298 --> 00:24:24,339
performance as a result because again

551
00:24:22,630 --> 00:24:25,809
even the debug system is going through

552
00:24:24,339 --> 00:24:29,349
all of those allocations which is not

553
00:24:25,808 --> 00:24:30,789
great right but that's that's it right

554
00:24:29,349 --> 00:24:33,909
so now we're getting allocations on

555
00:24:30,789 --> 00:24:36,220
every call and so now what we need to do

556
00:24:33,910 --> 00:24:37,720
is say well okay depending on whether we

557
00:24:36,220 --> 00:24:40,058
want to check for overflows or under

558
00:24:37,720 --> 00:24:42,339
flows we're going to want to put the

559
00:24:40,058 --> 00:24:44,139
memory block footer on different sides

560
00:24:42,339 --> 00:24:46,209
depending on which one we're checking

561
00:24:44,140 --> 00:24:47,590
for right if we're checking for

562
00:24:46,210 --> 00:24:48,730
overflows we would want to put the

563
00:24:47,589 --> 00:24:50,769
marriott footer at the beginning if

564
00:24:48,730 --> 00:24:51,940
we're checking for under flows we want

565
00:24:50,769 --> 00:24:54,789
to put the memory block footer at the

566
00:24:51,940 --> 00:24:57,820
end right because we don't we need the

567
00:24:54,789 --> 00:24:59,319
memory lock footer to to be out of the

568
00:24:57,819 --> 00:25:02,349
way so we can line up the thing with the

569
00:24:59,319 --> 00:25:03,639
page exactly where it should be now I

570
00:25:02,349 --> 00:25:04,839
need to double-check the memory block

571
00:25:03,640 --> 00:25:06,340
footer is not going to change our

572
00:25:04,839 --> 00:25:07,509
alignment it looks like it would looks

573
00:25:06,339 --> 00:25:10,359
like our memory lock foot are currently

574
00:25:07,509 --> 00:25:14,410
would because you can see this is going

575
00:25:10,359 --> 00:25:16,418
to be a three instead of four of these

576
00:25:14,410 --> 00:25:17,650
so I'm going to put a pad in here that's

577
00:25:16,419 --> 00:25:18,759
what the memory block footer should

578
00:25:17,650 --> 00:25:22,630
probably look like if we're going to

579
00:25:18,759 --> 00:25:24,160
move it and I feel like calling this the

580
00:25:22,630 --> 00:25:25,419
footer is probably not right because we

581
00:25:24,160 --> 00:25:31,929
might move it around now so i'm going to

582
00:25:25,419 --> 00:25:34,049
call us a memory block chain there you

583
00:25:31,929 --> 00:25:34,048
go

584
00:25:36,329 --> 00:25:43,569
alright so what I'd like to do now is

585
00:25:40,720 --> 00:25:45,579
say okay let's allow ourselves well

586
00:25:43,569 --> 00:25:47,528
first of all what we can do is let's try

587
00:25:45,579 --> 00:25:48,699
to catch overruns off the beginning of a

588
00:25:47,528 --> 00:25:51,159
buffer because that one will work

589
00:25:48,700 --> 00:25:55,630
automatically that one we don't have to

590
00:25:51,159 --> 00:25:58,149
do anything really to to change because

591
00:25:55,630 --> 00:25:59,440
we've already put our footer at we

592
00:25:58,148 --> 00:26:01,268
already put our memory block chain

593
00:25:59,440 --> 00:26:03,580
information at the end of our thing of

594
00:26:01,269 --> 00:26:04,990
at the end of our allocation so you know

595
00:26:03,579 --> 00:26:10,178
if you take a look at when we allocate

596
00:26:04,990 --> 00:26:13,388
this oh I killed Milton I'm sorry Milton

597
00:26:10,179 --> 00:26:16,899
I allocated too much memory and now

598
00:26:13,388 --> 00:26:23,558
Milton is unhappy you can go you can

599
00:26:16,898 --> 00:26:33,148
close Milton go ahead go go it's okay

600
00:26:23,558 --> 00:26:33,148
Milton Milton What's Wrong Milton

601
00:26:38,950 --> 00:26:47,559
and process there we go let's just go

602
00:26:44,509 --> 00:26:47,559
ahead and get our milton back

603
00:27:00,349 --> 00:27:06,839
there we go all right so what we are

604
00:27:05,099 --> 00:27:09,929
doing right now is just saying well okay

605
00:27:06,839 --> 00:27:12,169
we know that we have a footer on the end

606
00:27:09,930 --> 00:27:15,120
right now right there's our mr. footer

607
00:27:12,170 --> 00:27:17,039
and so since we've got a footer that

608
00:27:15,119 --> 00:27:18,509
means that if we wanted to the easiest

609
00:27:17,039 --> 00:27:21,000
thing to do would be to men protect the

610
00:27:18,509 --> 00:27:22,950
part before our allocation so that we'd

611
00:27:21,000 --> 00:27:27,180
catch over rights that go before the

612
00:27:22,950 --> 00:27:30,000
buffer in question right so if I want to

613
00:27:27,180 --> 00:27:33,240
do that what would I have to do at the

614
00:27:30,000 --> 00:27:34,349
operating system level right and so

615
00:27:33,240 --> 00:27:35,940
let's take a look at that because that's

616
00:27:34,349 --> 00:27:38,189
the actual interesting part of the

617
00:27:35,940 --> 00:27:41,130
implementation here so where we when we

618
00:27:38,190 --> 00:27:44,759
do platform allocate oops went to do

619
00:27:41,130 --> 00:27:47,220
allocate memory here it is when we do

620
00:27:44,759 --> 00:27:48,960
win through to allocate memory then here

621
00:27:47,220 --> 00:27:51,360
you can see the virtual Alec hall that

622
00:27:48,960 --> 00:27:52,769
we're making and like I said before what

623
00:27:51,359 --> 00:27:56,339
we want to do here is we want to make

624
00:27:52,769 --> 00:27:59,700
sure that we have 14 K page at the

625
00:27:56,339 --> 00:28:02,220
beginning of our memory block so that

626
00:27:59,700 --> 00:28:05,700
when we go to do overwrite checking

627
00:28:02,220 --> 00:28:10,470
what's at the beginning will be a blank

628
00:28:05,700 --> 00:28:12,480
page that we control right so if we

629
00:28:10,470 --> 00:28:13,559
wanted to do that it's pretty easy let's

630
00:28:12,480 --> 00:28:16,650
say I just wanted to do that without

631
00:28:13,559 --> 00:28:17,909
checking the flag although I could even

632
00:28:16,650 --> 00:28:21,780
do it which I going to flock here I

633
00:28:17,910 --> 00:28:24,810
would just say the total size is going

634
00:28:21,779 --> 00:28:33,869
to be that and then I could say well if

635
00:28:24,809 --> 00:28:37,289
the flags are are including underflow

636
00:28:33,869 --> 00:28:43,019
checking then what I want to do is I

637
00:28:37,289 --> 00:28:43,980
want to add 4k write one page and I'm

638
00:28:43,019 --> 00:28:46,759
probably going to just make that a

639
00:28:43,980 --> 00:28:46,759
constant

640
00:28:54,210 --> 00:29:01,360
maybe I'll make even make that to do so

641
00:28:58,990 --> 00:29:03,308
I'm going to add one page worth to the

642
00:29:01,359 --> 00:29:08,139
total size so that when i allocate it i

643
00:29:03,308 --> 00:29:10,240
will actually get that extra page that i

644
00:29:08,140 --> 00:29:12,120
wanted so i'll get one page plus however

645
00:29:10,240 --> 00:29:14,740
much we actually wanted to have happen

646
00:29:12,119 --> 00:29:17,649
and then you can kind of see here where

647
00:29:14,740 --> 00:29:19,900
we do our get base pointer off of block

648
00:29:17,650 --> 00:29:22,179
or whatever what did we do do we

649
00:29:19,900 --> 00:29:25,480
actually put this at the beginning i

650
00:29:22,179 --> 00:29:27,009
guess it looks like we did so yeah so

651
00:29:25,480 --> 00:29:28,660
we've kind of got this it looks like

652
00:29:27,009 --> 00:29:32,140
we've got counter reading problems here

653
00:29:28,660 --> 00:29:35,860
right we put the memory information that

654
00:29:32,140 --> 00:29:38,850
we needed on this guy sort of the loops

655
00:29:35,859 --> 00:29:42,039
for the chain for our saving to disk

656
00:29:38,849 --> 00:29:44,079
these are actually placed in kind of an

657
00:29:42,039 --> 00:29:45,759
inconvenient location if that makes

658
00:29:44,079 --> 00:29:47,558
sense it's on the wrong side of it and

659
00:29:45,759 --> 00:29:50,140
it also strikes me again and this you

660
00:29:47,558 --> 00:29:52,480
see this pretty often I prefer it when

661
00:29:50,140 --> 00:29:53,770
we don't actually have this problem so I

662
00:29:52,480 --> 00:29:57,940
don't know if we're going to want to try

663
00:29:53,769 --> 00:30:02,589
and get rid of it a little bit there we

664
00:29:57,940 --> 00:30:04,150
go I prefer to not have so many people

665
00:30:02,589 --> 00:30:05,769
sticking things on to allocations so

666
00:30:04,150 --> 00:30:08,140
like it's kind of annoying to have both

667
00:30:05,769 --> 00:30:12,539
of these things on there and we can talk

668
00:30:08,140 --> 00:30:14,860
about that a little bit separately but

669
00:30:12,539 --> 00:30:16,659
so what I want to do here is I want to

670
00:30:14,859 --> 00:30:19,569
say okay how do we you know how do I

671
00:30:16,660 --> 00:30:21,850
deal with this particular thing being in

672
00:30:19,569 --> 00:30:23,829
the way and one thing you know now that

673
00:30:21,849 --> 00:30:27,819
I think about it maybe that would be an

674
00:30:23,829 --> 00:30:31,990
easier way for us to deal with this is I

675
00:30:27,819 --> 00:30:37,019
could make it so that I I suppose I

676
00:30:31,990 --> 00:30:37,019
could make it so that you just get back

677
00:30:41,539 --> 00:30:47,309
you just get back kind of that chain

678
00:30:44,339 --> 00:30:50,220
because both people basically want to

679
00:30:47,309 --> 00:30:52,289
know the same thing right the arena is

680
00:30:50,220 --> 00:30:54,269
only tracking those blocks because it

681
00:30:52,289 --> 00:30:56,670
wants to be able to unwind memory and

682
00:30:54,269 --> 00:30:59,759
the win32 allocate memory call is

683
00:30:56,670 --> 00:31:01,620
exactly doing the same thing right it's

684
00:30:59,759 --> 00:31:03,509
just trying to keep a linked list of all

685
00:31:01,619 --> 00:31:05,879
the memory that's in the system so

686
00:31:03,509 --> 00:31:10,140
really if we wanted to we could just

687
00:31:05,880 --> 00:31:12,300
make it so that the arena and the memory

688
00:31:10,140 --> 00:31:16,470
allocator on the win32 side actually

689
00:31:12,299 --> 00:31:19,710
could just have the same data structure

690
00:31:16,470 --> 00:31:25,019
being used for that process if that

691
00:31:19,710 --> 00:31:27,150
makes sense I kind of feel like we're

692
00:31:25,019 --> 00:31:29,430
going to want to do that possibly before

693
00:31:27,150 --> 00:31:30,900
this had I've thought about that I would

694
00:31:29,430 --> 00:31:33,440
have said let's do that before this I'm

695
00:31:30,900 --> 00:31:35,820
kind of right in the middle of this now

696
00:31:33,440 --> 00:31:38,100
but what I'm gonna do alright so let's

697
00:31:35,819 --> 00:31:39,379
let me just finish the basics of what

698
00:31:38,099 --> 00:31:41,639
we're doing and we'll go talk about that

699
00:31:39,380 --> 00:31:43,260
so anyway when we actually do this

700
00:31:41,640 --> 00:31:45,870
allocation here you can see what happens

701
00:31:43,259 --> 00:31:47,430
is once i get back this memory block I'm

702
00:31:45,869 --> 00:31:49,649
sort of treating that as the actual

703
00:31:47,430 --> 00:31:51,060
block and what I would rather do at this

704
00:31:49,650 --> 00:31:53,430
point is I want to kind of move that

705
00:31:51,059 --> 00:31:57,059
block upwards a little bit right I want

706
00:31:53,430 --> 00:31:58,380
to move that block up to I want it to

707
00:31:57,059 --> 00:32:00,990
start thinking of the rubber block as

708
00:31:58,380 --> 00:32:06,840
being after the additional size that I

709
00:32:00,990 --> 00:32:09,509
sort of said here so you know I if if

710
00:32:06,839 --> 00:32:15,179
I'm in this underflow checking scenario

711
00:32:09,509 --> 00:32:25,769
I want to do that adjustment where block

712
00:32:15,180 --> 00:32:29,100
is going to be equal to you know one

713
00:32:25,769 --> 00:32:34,799
page past wherever virtual Alec gave me

714
00:32:29,099 --> 00:32:36,419
back right that makes sense okay so that

715
00:32:34,799 --> 00:32:38,279
just allocates an additional page at the

716
00:32:36,420 --> 00:32:40,259
beginning of things that's all it's

717
00:32:38,279 --> 00:32:41,670
doing nothing particularly fancy so

718
00:32:40,259 --> 00:32:42,900
again the game runs exactly the same

719
00:32:41,670 --> 00:32:44,190
except it's just allocating an extra

720
00:32:42,900 --> 00:32:46,080
page of memory every time it was doing

721
00:32:44,190 --> 00:32:47,490
an allocation and so then all we have to

722
00:32:46,079 --> 00:32:49,740
do is when we want the underflow

723
00:32:47,490 --> 00:32:52,079
checking to occur we just need to be

724
00:32:49,740 --> 00:32:54,059
able to take this block this original

725
00:32:52,079 --> 00:32:55,319
pointer that's that original page and we

726
00:32:54,059 --> 00:32:58,679
just need to virtual protect

727
00:32:55,319 --> 00:33:00,299
the page right so let's take a look at

728
00:32:58,680 --> 00:33:03,240
that call I talked about it already but

729
00:33:00,299 --> 00:33:10,409
it's it's the one that we need to use if

730
00:33:03,240 --> 00:33:14,339
we call virtual protect here is virtual

731
00:33:10,410 --> 00:33:17,970
protect if we call virtual protect in

732
00:33:14,339 --> 00:33:19,679
this case and we say all right we're

733
00:33:17,970 --> 00:33:23,220
here is the address that we want to

734
00:33:19,680 --> 00:33:24,870
protect here is the size right we know

735
00:33:23,220 --> 00:33:26,519
those two pieces of information we know

736
00:33:24,869 --> 00:33:28,769
we want to protect one page we know it

737
00:33:26,519 --> 00:33:33,509
starts at block then all we need to know

738
00:33:28,769 --> 00:33:36,190
here is what we want to do to this page

739
00:33:33,509 --> 00:33:38,919
and you can see in

740
00:33:36,190 --> 00:33:40,899
here we go in this list of constants

741
00:33:38,919 --> 00:33:44,620
what are the things we are what what the

742
00:33:40,898 --> 00:33:47,018
things that we can do are to the page so

743
00:33:44,619 --> 00:33:49,028
every memory page in Windows and

744
00:33:47,019 --> 00:33:51,808
generally speaking this is sort of like

745
00:33:49,028 --> 00:33:54,788
a function of the like processor and the

746
00:33:51,808 --> 00:33:58,148
operating system depending on what sorts

747
00:33:54,788 --> 00:34:00,669
of things they both support but any

748
00:33:58,148 --> 00:34:04,119
given memory page 1 of those 4k page

749
00:34:00,669 --> 00:34:05,830
pages in memory can have any number of

750
00:34:04,119 --> 00:34:07,449
bits set that say what's allowed to

751
00:34:05,829 --> 00:34:10,480
happen on it so you can see we've got

752
00:34:07,450 --> 00:34:12,668
page execute here and what that means is

753
00:34:10,480 --> 00:34:15,219
that if the instruction pointer for your

754
00:34:12,668 --> 00:34:17,078
code we're inside this page trying to

755
00:34:15,219 --> 00:34:23,439
read code bites from it it would be

756
00:34:17,079 --> 00:34:27,190
allowed right oops and that's all that

757
00:34:23,440 --> 00:34:30,128
means right you can't write to it you

758
00:34:27,190 --> 00:34:32,378
can only execute code out of it page

759
00:34:30,128 --> 00:34:35,980
execute read means that you could

760
00:34:32,378 --> 00:34:38,519
execute code in it or read like the data

761
00:34:35,980 --> 00:34:40,358
out of it but still not right to it

762
00:34:38,519 --> 00:34:42,309
execute read/write means you can do

763
00:34:40,358 --> 00:34:44,378
everything you can read it from the page

764
00:34:42,309 --> 00:34:47,769
right to the page or execute code that's

765
00:34:44,378 --> 00:34:51,098
in the page page execute right copy is a

766
00:34:47,769 --> 00:34:53,409
bizarre kind of thing this is like for

767
00:34:51,099 --> 00:34:55,480
unix fork and stuff like this it

768
00:34:53,409 --> 00:34:58,809
basically says that when you are going

769
00:34:55,480 --> 00:35:02,289
to use a particular page if you were

770
00:34:58,809 --> 00:35:03,549
going to execute that page if you're

771
00:35:02,289 --> 00:35:07,449
going to actually run something in that

772
00:35:03,550 --> 00:35:11,200
page or write to that page it would go

773
00:35:07,449 --> 00:35:14,108
ahead and duplicate that page to a new

774
00:35:11,199 --> 00:35:17,049
page if that makes sense this is for

775
00:35:14,108 --> 00:35:19,539
stuff I believe like fork you don't

776
00:35:17,050 --> 00:35:21,339
typically use it that much outside of

777
00:35:19,539 --> 00:35:24,338
that but you could imagine why you might

778
00:35:21,338 --> 00:35:25,809
want it right page no access is what

779
00:35:24,338 --> 00:35:27,670
we're looking for more it just means

780
00:35:25,809 --> 00:35:30,338
like if anyone touches this page it

781
00:35:27,670 --> 00:35:32,829
immediately should fault page read-only

782
00:35:30,338 --> 00:35:35,409
is that you could read from the page but

783
00:35:32,829 --> 00:35:37,269
just never write to it page read/write

784
00:35:35,409 --> 00:35:39,009
is exactly what it sounds like anything

785
00:35:37,269 --> 00:35:41,920
except executing code in the page is

786
00:35:39,010 --> 00:35:43,359
fine page right copy is the copy on

787
00:35:41,920 --> 00:35:45,700
write version that does not allow

788
00:35:43,358 --> 00:35:47,679
executing out of it so again for the

789
00:35:45,699 --> 00:35:49,779
unix fort command kinds of style stuff

790
00:35:47,679 --> 00:35:51,969
you clone all of the ad

791
00:35:49,780 --> 00:35:53,140
space of a process and then anytime you

792
00:35:51,969 --> 00:35:58,269
write to one of them it's going to clone

793
00:35:53,139 --> 00:36:01,059
to a new page page targets invalid and

794
00:35:58,269 --> 00:36:04,300
page targets no update I have never seen

795
00:36:01,059 --> 00:36:05,860
before I have no idea what they do set

796
00:36:04,300 --> 00:36:07,870
all locations of the pages that invalid

797
00:36:05,860 --> 00:36:18,990
targets for CFG use along with any

798
00:36:07,869 --> 00:36:18,989
ex--you page CFG is what what is CFG I

799
00:36:19,079 --> 00:36:26,619
don't know page of the region will not

800
00:36:25,150 --> 00:36:27,940
have their CFG haven't updated well the

801
00:36:26,619 --> 00:36:30,309
protection changes for richer protect

802
00:36:27,940 --> 00:36:31,900
simple the pages read I have no idea no

803
00:36:30,309 --> 00:36:36,250
idea what that is you're on your own

804
00:36:31,900 --> 00:36:38,079
page guard these are basically like the

805
00:36:36,250 --> 00:36:39,969
things that are used to you know grow

806
00:36:38,079 --> 00:36:42,489
the stack or do other things with guard

807
00:36:39,969 --> 00:36:46,230
pages basically what they do is when you

808
00:36:42,489 --> 00:36:49,419
touch them they fire off an alarm right

809
00:36:46,230 --> 00:36:50,769
they basically are things when for

810
00:36:49,420 --> 00:36:52,990
example the way that the stack

811
00:36:50,769 --> 00:36:57,820
oftentimes works the program stack works

812
00:36:52,989 --> 00:37:01,289
is you will take a piece of memory that

813
00:36:57,820 --> 00:37:01,289
is the initial part let me go ahead and

814
00:37:02,429 --> 00:37:07,899
this is why said back I was like it's

815
00:37:04,659 --> 00:37:09,250
not technically a guard page I said

816
00:37:07,900 --> 00:37:11,289
guard page because it's guarding us but

817
00:37:09,250 --> 00:37:12,460
it's not really garbage so what actually

818
00:37:11,289 --> 00:37:14,170
happens to the guard page is like

819
00:37:12,460 --> 00:37:16,240
typically what will happen is maybe you

820
00:37:14,170 --> 00:37:18,130
have the program stack here and then

821
00:37:16,239 --> 00:37:20,139
what happens is you want the program

822
00:37:18,130 --> 00:37:22,180
stack to grow as the program uses more

823
00:37:20,139 --> 00:37:24,460
of the stack so the program is touching

824
00:37:22,179 --> 00:37:26,349
touching touching touching and then when

825
00:37:24,460 --> 00:37:28,510
it touches this you don't really want it

826
00:37:26,349 --> 00:37:31,630
to fault what you want it to do is call

827
00:37:28,510 --> 00:37:36,280
a handler that's going to commit this

828
00:37:31,630 --> 00:37:38,230
page right and then let you know what

829
00:37:36,280 --> 00:37:39,880
you would then do is go allocate some

830
00:37:38,230 --> 00:37:41,889
more memory for the stack and guard

831
00:37:39,880 --> 00:37:44,349
another page right so it can kind of

832
00:37:41,889 --> 00:37:46,629
grow out like this what you don't want

833
00:37:44,349 --> 00:37:48,639
to do is actually stop the process from

834
00:37:46,630 --> 00:37:49,780
executing and consider in error so

835
00:37:48,639 --> 00:37:53,109
basically what happens when you hit the

836
00:37:49,780 --> 00:37:55,180
page guard is it will raise the

837
00:37:53,110 --> 00:37:57,460
violation exception so that you can

838
00:37:55,179 --> 00:37:59,440
handle it but then immediately turns off

839
00:37:57,460 --> 00:38:00,880
that status so that things that we're

840
00:37:59,440 --> 00:38:02,679
touching that page can still continue to

841
00:38:00,880 --> 00:38:03,700
touch that page right and you can resume

842
00:38:02,679 --> 00:38:07,239
executing as normal

843
00:38:03,699 --> 00:38:11,439
oops again we don't care about that we

844
00:38:07,239 --> 00:38:13,419
don't have to implement that page no

845
00:38:11,440 --> 00:38:16,088
cash is probably exactly what it sounds

846
00:38:13,420 --> 00:38:18,010
like but honestly I've never used it and

847
00:38:16,088 --> 00:38:19,989
Paige right combined same thing page

848
00:38:18,010 --> 00:38:22,000
right combined typically you don't set

849
00:38:19,989 --> 00:38:25,029
that's something that's set for Hardware

850
00:38:22,000 --> 00:38:26,588
access and so that would turn on right

851
00:38:25,030 --> 00:38:28,329
combining for these page to memory which

852
00:38:26,588 --> 00:38:30,369
is the thing that makes it so that when

853
00:38:28,329 --> 00:38:32,200
you you know do rights to it it doesn't

854
00:38:30,369 --> 00:38:33,990
flush all the rights in order

855
00:38:32,199 --> 00:38:39,069
necessarily they may be flushed

856
00:38:33,989 --> 00:38:41,739
aggregated if rights are expensive blah

857
00:38:39,070 --> 00:38:43,119
blah blah all right and then these

858
00:38:41,739 --> 00:38:46,358
Enclave ones are the things we talked

859
00:38:43,119 --> 00:38:49,358
about with SSG X that's that weird like

860
00:38:46,358 --> 00:38:50,799
Intel thing where you lose control of

861
00:38:49,358 --> 00:38:52,269
your own computer it's basically the

862
00:38:50,800 --> 00:38:55,060
thing that allows you to have encrypted

863
00:38:52,269 --> 00:38:57,639
memory that you can't touch so that's

864
00:38:55,059 --> 00:38:59,440
yeah that's what that is anyway so all

865
00:38:57,639 --> 00:39:01,269
we really care about here is page no

866
00:38:59,440 --> 00:39:03,608
access right all I really wanted was

867
00:39:01,269 --> 00:39:05,170
page no access so what I want to do here

868
00:39:03,608 --> 00:39:08,019
is I want a virtual protect this thing

869
00:39:05,170 --> 00:39:11,440
as page no access so that there's no way

870
00:39:08,019 --> 00:39:14,079
for anyone ever touch the page it's just

871
00:39:11,440 --> 00:39:15,280
going to be a problem if they do and we

872
00:39:14,079 --> 00:39:17,410
need to pass one more parameter which is

873
00:39:15,280 --> 00:39:24,819
what the old protect was so we're just

874
00:39:17,409 --> 00:39:26,259
have old protect and now in theory we

875
00:39:24,818 --> 00:39:33,519
are protecting the page now I'm going to

876
00:39:26,260 --> 00:39:34,690
check the return value just so we can

877
00:39:33,519 --> 00:39:36,280
ensure that it's actually working

878
00:39:34,690 --> 00:39:37,450
because maybe we passed some parameters

879
00:39:36,280 --> 00:39:40,660
wrong and we don't want to mess it up

880
00:39:37,449 --> 00:39:43,059
right so now those we have those guard

881
00:39:40,659 --> 00:39:44,500
pages happening there and we can verify

882
00:39:43,059 --> 00:39:46,420
that those are happening properly

883
00:39:44,500 --> 00:39:48,969
because now when we get this block back

884
00:39:46,420 --> 00:39:50,920
what we should be able to do right if I

885
00:39:48,969 --> 00:39:52,689
if I didn't call this virtual protect

886
00:39:50,920 --> 00:39:54,400
then in theory what I should have been

887
00:39:52,690 --> 00:39:57,190
able to do is say the part that I'm

888
00:39:54,400 --> 00:39:59,470
talking about right now if I was to set

889
00:39:57,190 --> 00:40:02,409
the the next pointer to say 0 or

890
00:39:59,469 --> 00:40:03,730
something it should be fine because we

891
00:40:02,409 --> 00:40:05,769
allocated that memory and we're just

892
00:40:03,730 --> 00:40:09,099
touching it and setting it to 0 but if

893
00:40:05,769 --> 00:40:11,530
instead I was to set virtual protect to

894
00:40:09,099 --> 00:40:14,079
say that page is no access now if i

895
00:40:11,530 --> 00:40:15,160
touch the page we should crash right or

896
00:40:14,079 --> 00:40:22,390
not

897
00:40:15,159 --> 00:40:27,789
I said we should crash apparently we

898
00:40:22,389 --> 00:40:32,920
don't crash apparently because we don't

899
00:40:27,789 --> 00:40:50,409
have underflow check on let's try that

900
00:40:32,920 --> 00:40:59,289
again alright one more time let's not

901
00:40:50,409 --> 00:41:10,269
protect the page no problem and protect

902
00:40:59,289 --> 00:41:11,980
the page and we crash right so now we

903
00:41:10,269 --> 00:41:13,659
have everything we need to create a

904
00:41:11,980 --> 00:41:15,639
bounced check ur right we have

905
00:41:13,659 --> 00:41:18,009
everything we need to make sure that the

906
00:41:15,639 --> 00:41:20,980
instant that anyone touches any piece of

907
00:41:18,010 --> 00:41:26,710
memory outside of a valid allocation

908
00:41:20,980 --> 00:41:29,530
location we will fault right we'll just

909
00:41:26,710 --> 00:41:30,639
felt right there so I feel like I want

910
00:41:29,530 --> 00:41:31,960
to be a little bit more efficient

911
00:41:30,639 --> 00:41:33,579
potentially than I'm being right now but

912
00:41:31,960 --> 00:41:34,720
I'm just not going to do that this time

913
00:41:33,579 --> 00:41:37,299
around so I'm just going to do the

914
00:41:34,719 --> 00:41:38,889
simpler thing here and say okay if we're

915
00:41:37,300 --> 00:41:41,070
doing platform underflow checking than

916
00:41:38,889 --> 00:41:44,500
we need what essentially amounts to be

917
00:41:41,070 --> 00:41:46,090
two extra pages right is what I'm going

918
00:41:44,500 --> 00:41:48,429
to do I'm going to say two times page

919
00:41:46,090 --> 00:41:51,550
size and I'm going to do that that is

920
00:41:48,429 --> 00:41:55,299
actually what I'm going to do in both

921
00:41:51,550 --> 00:41:58,750
cases right so I'm going to do I'm going

922
00:41:55,300 --> 00:42:00,250
to do well I got to add a little bit

923
00:41:58,750 --> 00:42:02,889
more to ago so let me just do this one

924
00:42:00,250 --> 00:42:05,260
first and then we'll go from there so

925
00:42:02,889 --> 00:42:10,599
I'm going to add two extra pages I'm

926
00:42:05,260 --> 00:42:12,640
going to take the Jews me I'm going to

927
00:42:10,599 --> 00:42:13,900
take the block here that I was going to

928
00:42:12,639 --> 00:42:15,730
use I'm going to put that in the first

929
00:42:13,900 --> 00:42:17,829
page and then protect the second page

930
00:42:15,730 --> 00:42:19,809
and I'm gonna make the third page and up

931
00:42:17,829 --> 00:42:22,929
be the stuff that's actually protected

932
00:42:19,809 --> 00:42:24,789
right so it's just super super piggy not

933
00:42:22,929 --> 00:42:27,579
not good at all but that's just what I'm

934
00:42:24,789 --> 00:42:28,838
going to do temporarily just to sort of

935
00:42:27,579 --> 00:42:30,548
get this working the way the

936
00:42:28,838 --> 00:42:32,139
I want it to work first and then

937
00:42:30,548 --> 00:42:33,788
tomorrow I think I want to try and sit

938
00:42:32,139 --> 00:42:35,679
down and figure out can we work out a

939
00:42:33,789 --> 00:42:37,059
nice way to make it so that all these

940
00:42:35,679 --> 00:42:39,788
things kind of collapse down into one

941
00:42:37,059 --> 00:42:41,019
and we'll go from there so anyway if we

942
00:42:39,789 --> 00:42:42,670
were going to do underflow checking we

943
00:42:41,018 --> 00:42:45,518
know we have two extra pages that beans

944
00:42:42,670 --> 00:42:47,528
that we have the block being where the

945
00:42:45,518 --> 00:42:49,508
block actually is and that's all fine

946
00:42:47,528 --> 00:42:51,039
and so the thing we want to protect is

947
00:42:49,509 --> 00:42:52,539
actually the block plus the page size

948
00:42:51,039 --> 00:42:54,880
and we're going to start that that's

949
00:42:52,539 --> 00:42:58,749
protectable we then have the block

950
00:42:54,880 --> 00:43:00,818
itself being where it was originally but

951
00:42:58,748 --> 00:43:03,748
i'm going to introduce the notion that

952
00:43:00,818 --> 00:43:03,748
the win32

953
00:43:23,079 --> 00:43:27,650
there it is result so I'm going to

954
00:43:25,699 --> 00:43:31,460
introduce the notion here that again the

955
00:43:27,650 --> 00:43:33,139
get base pointer for a block thing this

956
00:43:31,460 --> 00:43:34,579
is not really going to work anymore and

957
00:43:33,139 --> 00:43:35,900
the reason that this is not really going

958
00:43:34,579 --> 00:43:37,970
to work anymore is because if you ask

959
00:43:35,900 --> 00:43:39,710
for the base point of a block your

960
00:43:37,969 --> 00:43:42,048
problem is that you're going to not know

961
00:43:39,710 --> 00:43:43,970
whether this extra padding was happening

962
00:43:42,048 --> 00:43:45,500
or not now we could make it a global the

963
00:43:43,969 --> 00:43:47,118
juice is set for underflow checking or

964
00:43:45,500 --> 00:43:49,039
not and then you would always know

965
00:43:47,119 --> 00:43:50,990
throughout all the places but in this

966
00:43:49,039 --> 00:43:53,059
case you wouldn't really know because we

967
00:43:50,989 --> 00:43:54,919
want to allow different arenas to have

968
00:43:53,059 --> 00:43:58,970
the overflow or underflow checking on or

969
00:43:54,920 --> 00:44:00,889
off separately right so what I want to

970
00:43:58,969 --> 00:44:02,689
do here is say okay inside the memory

971
00:44:00,889 --> 00:44:05,538
block let's just go ahead since we also

972
00:44:02,690 --> 00:44:07,099
have we have plenty of extra padding in

973
00:44:05,539 --> 00:44:09,079
there I'm just going to say that we have

974
00:44:07,099 --> 00:44:11,599
a base pointer so that basically you can

975
00:44:09,079 --> 00:44:13,309
always get from the block to the result

976
00:44:11,599 --> 00:44:16,579
without calling get base pointer it's

977
00:44:13,309 --> 00:44:17,809
just is the base pointer right and so

978
00:44:16,579 --> 00:44:27,109
I'm going to say here that the base

979
00:44:17,809 --> 00:44:32,390
pointer in most cases is just going to

980
00:44:27,108 --> 00:44:34,460
be the the block plus one but in the

981
00:44:32,389 --> 00:44:36,348
case where we actually have some kind of

982
00:44:34,460 --> 00:44:38,990
checking turned on it's going to be

983
00:44:36,349 --> 00:44:42,190
something else right so in this case

984
00:44:38,989 --> 00:44:46,939
it's going to be 2 times the block size

985
00:44:42,190 --> 00:44:53,659
and off we go so then we know we always

986
00:44:46,940 --> 00:44:59,619
return the base pointer and we can also

987
00:44:53,659 --> 00:45:06,798
get rid of get block probes get base

988
00:44:59,619 --> 00:45:10,028
pointer for the block because now it is

989
00:45:06,798 --> 00:45:19,509
just a thing that's off of it directly

990
00:45:10,028 --> 00:45:19,509
right okay so moving on

991
00:45:23,000 --> 00:45:38,119
what are you unhappy about I did say two

992
00:45:28,190 --> 00:45:39,139
times page size right yes so ah got a

993
00:45:38,119 --> 00:45:47,299
little sloppy there at the point

994
00:45:39,139 --> 00:45:54,019
arithmetic where's my blog virtual

995
00:45:47,300 --> 00:45:56,090
protect I actually meant to only go the

996
00:45:54,019 --> 00:46:00,079
page size up not the page size Simon's

997
00:45:56,090 --> 00:46:02,210
the size of a block but my bad so yeah

998
00:46:00,079 --> 00:46:03,949
so now what we have to do is we have to

999
00:46:02,210 --> 00:46:06,769
figure out when we're virtual freeing

1000
00:46:03,949 --> 00:46:09,409
things well we've got a couple things we

1001
00:46:06,769 --> 00:46:11,150
have to do but first of all when we

1002
00:46:09,409 --> 00:46:13,099
virtual free things we can no longer

1003
00:46:11,150 --> 00:46:14,570
assume that the block itself is the

1004
00:46:13,099 --> 00:46:17,299
actual pointer that were virtually

1005
00:46:14,570 --> 00:46:19,160
freeing right and the reason for that is

1006
00:46:17,300 --> 00:46:20,660
because now we may have put the Block in

1007
00:46:19,159 --> 00:46:22,179
some location that has nothing to do

1008
00:46:20,659 --> 00:46:25,909
with the memory that we're actually

1009
00:46:22,179 --> 00:46:27,109
returning to you so we do now need to

1010
00:46:25,909 --> 00:46:29,750
lean on the thing that I was talking

1011
00:46:27,110 --> 00:46:31,070
about before where you know like we've

1012
00:46:29,750 --> 00:46:32,329
got this thing here where we r d like

1013
00:46:31,070 --> 00:46:34,070
adding memory we're expected to get back

1014
00:46:32,329 --> 00:46:36,230
to the block we actually need to get

1015
00:46:34,070 --> 00:46:38,180
down to the base of our allocation again

1016
00:46:36,230 --> 00:46:40,369
and in order to get down to the base of

1017
00:46:38,179 --> 00:46:42,109
our allocation we need to do the virtual

1018
00:46:40,369 --> 00:46:44,989
query call that I was talking about

1019
00:46:42,110 --> 00:46:46,789
before and the virtual query call I

1020
00:46:44,989 --> 00:46:49,299
believe should give us the piece of

1021
00:46:46,789 --> 00:46:53,360
information that we actually needed

1022
00:46:49,300 --> 00:46:55,130
where are you do not type that in right

1023
00:46:53,360 --> 00:46:59,210
right I thought I typed in virtual query

1024
00:46:55,130 --> 00:47:04,340
maybe I didn't that's right it's right

1025
00:46:59,210 --> 00:47:06,760
there and so in this case what I can do

1026
00:47:04,340 --> 00:47:06,760
is say okay

1027
00:47:13,458 --> 00:47:17,969
hmm alright maybe not so that won't help

1028
00:47:16,588 --> 00:47:20,278
us either because this has to be the

1029
00:47:17,969 --> 00:47:27,269
base address of the region of pages so I

1030
00:47:20,278 --> 00:47:32,458
can't actually round it down hmm this is

1031
00:47:27,268 --> 00:47:37,798
tricky I guess I'm just going to have to

1032
00:47:32,458 --> 00:47:41,728
I guess I'm just going to have to pass

1033
00:47:37,798 --> 00:47:45,438
that information to free as well because

1034
00:47:41,728 --> 00:47:57,718
it won't know it really wouldn't know

1035
00:47:45,438 --> 00:48:01,618
which one it really wouldn't know which

1036
00:47:57,719 --> 00:48:04,648
one it would have no idea how to get

1037
00:48:01,619 --> 00:48:08,729
back to what it needs to get back to you

1038
00:48:04,648 --> 00:48:11,788
know I'm saying so yeah it's just come

1039
00:48:08,728 --> 00:48:13,678
tough but anyway again not the end of

1040
00:48:11,789 --> 00:48:16,409
the world because we can figure this out

1041
00:48:13,679 --> 00:48:18,778
by just passing that in and I'll show

1042
00:48:16,409 --> 00:48:21,088
you what I'll show you that it is

1043
00:48:18,778 --> 00:48:22,259
relatively easy to make sure that as

1044
00:48:21,088 --> 00:48:24,719
long as we always know what we're doing

1045
00:48:22,259 --> 00:48:27,869
we can always back out the pointer to

1046
00:48:24,719 --> 00:48:30,418
something which will be correct if we

1047
00:48:27,869 --> 00:48:36,838
know which one we're doing so let's go

1048
00:48:30,418 --> 00:48:38,818
ahead and say platform here needs to

1049
00:48:36,838 --> 00:48:43,318
take symmetric flags so that we can work

1050
00:48:38,818 --> 00:48:48,838
backwards then when we go to win through

1051
00:48:43,318 --> 00:48:52,579
to memory we can do the reverse

1052
00:48:48,838 --> 00:48:54,929
operation so here we are with with block

1053
00:48:52,579 --> 00:48:57,689
and in this case what we want to do is

1054
00:48:54,929 --> 00:49:00,269
say oh well if what we were actually

1055
00:48:57,688 --> 00:49:02,938
doing is we were in an underflow

1056
00:49:00,268 --> 00:49:07,528
checking scenario then for underflow

1057
00:49:02,938 --> 00:49:13,009
checking we would like to say that the

1058
00:49:07,528 --> 00:49:15,119
block if we assume that it was say au8

1059
00:49:13,009 --> 00:49:17,489
we would like to say that whatever the

1060
00:49:15,119 --> 00:49:19,289
block is that we gave that we're getting

1061
00:49:17,489 --> 00:49:21,509
in here or rather whatever the memory is

1062
00:49:19,289 --> 00:49:23,399
that you're telling us to free we know

1063
00:49:21,509 --> 00:49:25,369
that that's two pages up from what it

1064
00:49:23,398 --> 00:49:28,670
should be right

1065
00:49:25,369 --> 00:49:30,920
so and I what I might do here is because

1066
00:49:28,670 --> 00:49:35,829
I would like to make this actual thing

1067
00:49:30,920 --> 00:49:35,829
little bit through to her okay sighs um

1068
00:49:36,880 --> 00:49:56,090
variable okay i know that i just have to

1069
00:49:47,329 --> 00:50:04,819
subtract two x the page size and i will

1070
00:49:56,090 --> 00:50:07,880
get back to where i'm supposed to be now

1071
00:50:04,820 --> 00:50:09,320
I still should be able to do all the

1072
00:50:07,880 --> 00:50:11,809
rest of my operations because I should

1073
00:50:09,320 --> 00:50:13,070
be able to always find it when we know

1074
00:50:11,809 --> 00:50:14,449
we're in underflip jacketing scenario i

1075
00:50:13,070 --> 00:50:16,640
should be able to go back and find the

1076
00:50:14,449 --> 00:50:19,549
Block in the location that it now is

1077
00:50:16,639 --> 00:50:21,529
right and so in theory now we're all

1078
00:50:19,550 --> 00:50:24,080
good and remember tech ting those pages

1079
00:50:21,530 --> 00:50:25,900
so if anyone tries to underflow even

1080
00:50:24,079 --> 00:50:30,110
just a little bit they would immediately

1081
00:50:25,900 --> 00:50:32,000
fault right and so previously if we

1082
00:50:30,110 --> 00:50:34,579
wanted to try and catch one of these for

1083
00:50:32,000 --> 00:50:42,170
example let's say we went into handmade

1084
00:50:34,579 --> 00:50:43,460
memory and turn this off so we're not

1085
00:50:42,170 --> 00:50:45,470
underflow chucking anymore we're just

1086
00:50:43,460 --> 00:50:47,659
doing the regular kind of running that

1087
00:50:45,469 --> 00:50:50,449
we normally would here's our 16 frames a

1088
00:50:47,659 --> 00:50:54,170
second and so let's say I went into

1089
00:50:50,449 --> 00:50:55,609
someplace kind of touchy trying to think

1090
00:50:54,170 --> 00:50:58,340
of what the best place to do this would

1091
00:50:55,610 --> 00:51:09,470
be but let's say that I went in

1092
00:50:58,340 --> 00:51:13,940
somewhere to maybe like world dot cpp

1093
00:51:09,469 --> 00:51:16,189
and let's see so we have a thing where

1094
00:51:13,940 --> 00:51:19,429
we're taking where we get a first free

1095
00:51:16,190 --> 00:51:21,440
chunk here and that we're allocating one

1096
00:51:19,429 --> 00:51:23,119
of these like world chunks and let's

1097
00:51:21,440 --> 00:51:25,849
suppose that I was just to touch

1098
00:51:23,119 --> 00:51:29,059
something right before the first free

1099
00:51:25,849 --> 00:51:32,029
chunk so let's say that I have my my

1100
00:51:29,059 --> 00:51:34,009
first free trunk on here and I you know

1101
00:51:32,030 --> 00:51:38,000
cast that to a you ate or something like

1102
00:51:34,010 --> 00:51:39,020
this and I'm going to go ahead and set

1103
00:51:38,000 --> 00:51:41,480
like

1104
00:51:39,019 --> 00:51:43,639
you know a few things back from it to be

1105
00:51:41,480 --> 00:51:46,519
zero so I'm just I'm just writing off

1106
00:51:43,639 --> 00:51:49,009
the end of that buffer right so that's

1107
00:51:46,519 --> 00:51:51,019
like plainly illegal right and it's

1108
00:51:49,010 --> 00:51:52,580
definitely a bug and could easily be

1109
00:51:51,019 --> 00:51:54,559
over writing something important we'll

1110
00:51:52,579 --> 00:51:56,329
never know until we see some really

1111
00:51:54,559 --> 00:52:02,059
weird behavior and are totally mystified

1112
00:51:56,329 --> 00:52:04,250
right but in theory if we've done our

1113
00:52:02,059 --> 00:52:06,679
underflow checking right now when we do

1114
00:52:04,250 --> 00:52:08,690
that it immediate it's like it's not

1115
00:52:06,679 --> 00:52:11,299
only does it catch it immediately with

1116
00:52:08,690 --> 00:52:14,019
no debugging effort but it also puts us

1117
00:52:11,300 --> 00:52:18,500
right on the line that that was the bug

1118
00:52:14,019 --> 00:52:20,659
right so again really really powerful

1119
00:52:18,500 --> 00:52:23,239
because who knows how long a bug like

1120
00:52:20,659 --> 00:52:25,879
that could sit in the code base without

1121
00:52:23,239 --> 00:52:27,919
us ever knowing it's there then we see

1122
00:52:25,880 --> 00:52:29,360
it we see a problem later on we're never

1123
00:52:27,920 --> 00:52:30,980
going to suspect that part of the code

1124
00:52:29,360 --> 00:52:34,519
because it's we haven't touched it in

1125
00:52:30,980 --> 00:52:36,250
forever right so when you're doing that

1126
00:52:34,519 --> 00:52:39,829
kind of low-level programming it helps

1127
00:52:36,250 --> 00:52:41,360
to have tools that allow you to catch

1128
00:52:39,829 --> 00:52:43,340
problems like that so if I remove the

1129
00:52:41,360 --> 00:52:45,730
offending line of code now we can run

1130
00:52:43,340 --> 00:52:50,780
through our chucker and it works okay

1131
00:52:45,730 --> 00:52:53,269
right so let's try exactly the same

1132
00:52:50,780 --> 00:52:56,900
thing now when we do the first free

1133
00:52:53,269 --> 00:53:00,289
chunk push there let's try we only

1134
00:52:56,900 --> 00:53:03,050
pushed on just this world chunk let's go

1135
00:53:00,289 --> 00:53:11,869
ahead and try going just one after it

1136
00:53:03,050 --> 00:53:14,230
right so I'm going to say writing one

1137
00:53:11,869 --> 00:53:14,230
after it

1138
00:53:22,980 --> 00:53:28,059
and you can see again now we're we're

1139
00:53:25,659 --> 00:53:29,799
over writing memory and again nothing is

1140
00:53:28,059 --> 00:53:33,130
nothing is happening right we're not

1141
00:53:29,800 --> 00:53:35,200
getting any kind of an error there it's

1142
00:53:33,130 --> 00:53:36,880
just fine so we would never know that

1143
00:53:35,199 --> 00:53:39,039
that was happening until we actually see

1144
00:53:36,880 --> 00:53:41,380
a symptom of the overwrite so what we

1145
00:53:39,039 --> 00:53:42,969
want to do now is say like okay we want

1146
00:53:41,380 --> 00:53:46,390
now want to be able to implement our

1147
00:53:42,969 --> 00:53:48,369
overflow checking overflow checking

1148
00:53:46,389 --> 00:53:49,809
would work exactly the same way it's

1149
00:53:48,369 --> 00:53:52,389
trivial fresh to implement at the win32

1150
00:53:49,809 --> 00:53:55,779
side of things unfortunately down here a

1151
00:53:52,389 --> 00:53:57,250
little bit it's a little bit nastier the

1152
00:53:55,780 --> 00:53:59,320
reason it's a little bit nastier over

1153
00:53:57,250 --> 00:54:01,420
here is just because now we've got a

1154
00:53:59,320 --> 00:54:02,890
situation where we need to move the

1155
00:54:01,420 --> 00:54:05,530
block chain that we're actually using

1156
00:54:02,889 --> 00:54:09,309
here we need to you move that out of the

1157
00:54:05,530 --> 00:54:11,860
way and so this is again why I say you

1158
00:54:09,309 --> 00:54:15,070
know what I think we want to do in this

1159
00:54:11,860 --> 00:54:16,960
scenario is we would like to make it so

1160
00:54:15,070 --> 00:54:27,190
that these two things work in concert a

1161
00:54:16,960 --> 00:54:29,820
little bit more I almost just feel like

1162
00:54:27,190 --> 00:54:35,139
we should be able to get the block chain

1163
00:54:29,820 --> 00:54:41,019
stuff back from like like that block

1164
00:54:35,139 --> 00:54:45,069
chain is a very simple thing it's just

1165
00:54:41,019 --> 00:54:51,780
this right and if you take a look at

1166
00:54:45,070 --> 00:54:51,780
what's going on in the lower level code

1167
00:54:51,929 --> 00:55:00,190
it's the same stuff right it's exactly

1168
00:54:56,409 --> 00:55:04,149
the same things we just have to add the

1169
00:55:00,190 --> 00:55:07,240
used right we just have to add that used

1170
00:55:04,150 --> 00:55:09,579
value and so I kind of feel like almost

1171
00:55:07,239 --> 00:55:13,000
what we want to do is just elevate this

1172
00:55:09,579 --> 00:55:14,139
construct up but I don't want to start

1173
00:55:13,000 --> 00:55:18,309
that now because we're almost out of

1174
00:55:14,139 --> 00:55:22,949
time so i think what i'm going to do is

1175
00:55:18,309 --> 00:55:27,630
I'm going to say let's go ahead and say

1176
00:55:22,949 --> 00:55:33,099
consolidate win through to and platform

1177
00:55:27,630 --> 00:55:35,820
nonspecific memory headers and then I

1178
00:55:33,099 --> 00:55:35,819
think we'll be all set

1179
00:55:38,998 --> 00:55:43,288
all right I'm going to go ahead and go

1180
00:55:40,900 --> 00:55:43,289
to QA

1181
00:55:59,309 --> 00:56:05,639
weight is in savate now able to

1182
00:56:03,179 --> 00:56:08,849
understand that I start the Q&amp;A in

1183
00:56:05,639 --> 00:56:15,539
another chat and then it starts the QA

1184
00:56:08,849 --> 00:56:18,049
in in the twitch chat did that just

1185
00:56:15,539 --> 00:56:18,050
happened

1186
00:56:46,358 --> 00:56:51,548
insofar as skin so bot is seriously the

1187
00:56:52,059 --> 00:57:19,880
greatest artificial intelligence that

1188
00:56:54,409 --> 00:57:21,889
mankind has ever known when can we get

1189
00:57:19,880 --> 00:57:24,588
it to the point where in so bot can just

1190
00:57:21,889 --> 00:57:28,460
do the programming on the stream and I

1191
00:57:24,588 --> 00:57:33,380
can just go home like when will we

1192
00:57:28,460 --> 00:57:36,228
actually just have in sohbat just does

1193
00:57:33,380 --> 00:57:39,619
handmade hero by itself and we don't

1194
00:57:36,228 --> 00:57:43,179
even need a human in the loop that is

1195
00:57:39,619 --> 00:57:43,180
really the future that we need

1196
00:58:15,498 --> 00:58:22,259
I'm following on linux with sdl because

1197
00:58:19,409 --> 00:58:25,199
I'm not sure it's worth building on X 11

1198
00:58:22,259 --> 00:58:27,088
or if Whelan is ready yet have you

1199
00:58:25,199 --> 00:58:31,079
thought about building on X 11 Whelan or

1200
00:58:27,088 --> 00:58:33,688
both know basically on linux I don't

1201
00:58:31,079 --> 00:58:35,309
really know linux very well so I don't

1202
00:58:33,688 --> 00:58:39,058
really have strong opinions about that

1203
00:58:35,309 --> 00:58:44,039
like probably on linux i'll just use sdl

1204
00:58:39,059 --> 00:58:45,929
or something or you know ask more lynn

1205
00:58:44,039 --> 00:58:48,839
eccentric people which one to use and

1206
00:58:45,929 --> 00:58:51,298
will write that I don't like on Windows

1207
00:58:48,838 --> 00:58:53,369
I knew a lot of stuff you know I'm not

1208
00:58:51,298 --> 00:58:55,139
and the the windows expert or anything

1209
00:58:53,369 --> 00:58:56,579
but like you know I know a lot of stuff

1210
00:58:55,139 --> 00:58:58,199
about how to structure the platform

1211
00:58:56,579 --> 00:59:00,239
layers and things like that so I have

1212
00:58:58,199 --> 00:59:04,619
opinions about it but I don't have

1213
00:59:00,239 --> 00:59:08,068
opinions about it on when x 11 platforms

1214
00:59:04,619 --> 00:59:10,919
at all or Wayland I've never even used

1215
00:59:08,068 --> 00:59:12,329
Wayland I know nothing about it other

1216
00:59:10,918 --> 00:59:13,618
than like it's one of those things are

1217
00:59:12,329 --> 00:59:16,079
like it's going to replace that

1218
00:59:13,619 --> 00:59:18,719
eventually or something but I don't

1219
00:59:16,079 --> 00:59:20,729
really yeah that's like not really my

1220
00:59:18,719 --> 00:59:25,289
area of expertise I don't ship games on

1221
00:59:20,728 --> 00:59:29,248
linux I don't have a lot of expertise

1222
00:59:25,289 --> 00:59:31,380
there before when you had fixed

1223
00:59:29,248 --> 00:59:33,268
allocation you could do a between run

1224
00:59:31,380 --> 00:59:34,709
save state kind of thing if I call

1225
00:59:33,268 --> 00:59:39,418
quickly how would you make that happen

1226
00:59:34,708 --> 00:59:41,928
with the dynamic blocks well we that's

1227
00:59:39,418 --> 00:59:41,929
what we did yesterday

1228
00:59:47,980 --> 00:59:52,670
so HR do you have any insight into if

1229
00:59:51,619 --> 00:59:55,250
you are developing this game in a

1230
00:59:52,670 --> 00:59:56,480
similar time flow to major devs example

1231
00:59:55,250 --> 00:59:58,010
you spent some time today working on

1232
00:59:56,480 --> 00:59:59,929
underflow overflow before such a thing

1233
00:59:58,010 --> 01:00:03,080
came into play is it just because of the

1234
00:59:59,929 --> 01:00:05,119
format of the show actually no that's

1235
01:00:03,079 --> 01:00:07,699
not true we have had overflow and

1236
01:00:05,119 --> 01:00:09,049
underflow bugs already well I don't know

1237
01:00:07,699 --> 01:00:10,659
if we ever had an underflow one but we

1238
01:00:09,050 --> 01:00:13,340
had an overflow bug already just

1239
01:00:10,659 --> 01:00:14,839
normally I would do that day one look

1240
01:00:13,340 --> 01:00:19,940
normally I'd have overflow checking in

1241
01:00:14,840 --> 01:00:21,559
there just day one but you know I try to

1242
01:00:19,940 --> 01:00:25,099
structure things based on when we kind

1243
01:00:21,559 --> 01:00:27,949
of naturally get to them in terms of

1244
01:00:25,099 --> 01:00:31,210
what we're doing when it makes sense and

1245
01:00:27,949 --> 01:00:31,210
now is when it made sense

1246
01:00:35,710 --> 01:00:41,108
in fact we don't know that we don't

1247
01:00:38,190 --> 01:00:43,780
right now have some overflow bugs in the

1248
01:00:41,108 --> 01:00:48,098
code right for all we know when we turn

1249
01:00:43,780 --> 01:00:49,420
on overflow detection tomorrow it'll

1250
01:00:48,099 --> 01:00:50,800
crash somewhere and we'll be like oh hey

1251
01:00:49,420 --> 01:00:52,389
look we've gotten over right look we

1252
01:00:50,800 --> 01:00:54,640
don't even know if we don't have an

1253
01:00:52,389 --> 01:00:57,009
overflow bug right now because we could

1254
01:00:54,639 --> 01:01:07,269
just have like a very subtle overflow

1255
01:00:57,010 --> 01:01:08,740
bug somewhere why do you look so

1256
01:01:07,269 --> 01:01:13,150
different from handmade here at day one

1257
01:01:08,739 --> 01:01:16,838
well it's been like two years almost two

1258
01:01:13,150 --> 01:01:20,559
years I it's deceptive because it says

1259
01:01:16,838 --> 01:01:24,460
345 but I don't stream every night so

1260
01:01:20,559 --> 01:01:26,289
it's it's you know it's only it makes it

1261
01:01:24,460 --> 01:01:28,320
seem like it's less days than it has

1262
01:01:26,289 --> 01:01:28,320
been

1263
01:01:43,699 --> 01:01:48,769
oh I see what you're asking sorry dr.

1264
01:01:47,150 --> 01:01:52,460
cheats I didn't understand the question

1265
01:01:48,769 --> 01:01:54,920
you're saying could we do it if across

1266
01:01:52,460 --> 01:01:56,289
different runs of the program wouldn't

1267
01:01:54,920 --> 01:01:58,639
you need to muck with the bass pointers

1268
01:01:56,289 --> 01:02:00,050
yeah if you wanted to make it work

1269
01:01:58,639 --> 01:02:02,409
across different runs of the program

1270
01:02:00,050 --> 01:02:05,990
it's that's really not that hard either

1271
01:02:02,409 --> 01:02:08,889
we don't really do that ever I on

1272
01:02:05,989 --> 01:02:11,838
handmade hero so I haven't felt the need

1273
01:02:08,889 --> 01:02:13,848
but yes you can totally do that all you

1274
01:02:11,838 --> 01:02:17,328
have to do is just when you call virtual

1275
01:02:13,849 --> 01:02:21,490
a lock pass in a base pointer and make

1276
01:02:17,329 --> 01:02:21,490
that base pointer just increment itself

1277
01:02:21,608 --> 01:02:32,230
as you do your allocations that's really

1278
01:02:30,079 --> 01:02:32,230
it

1279
01:02:33,539 --> 01:02:42,360
we just save you know we just have to

1280
01:02:35,849 --> 01:02:45,659
save that out actually now that I think

1281
01:02:42,360 --> 01:02:47,400
about it we wouldn't even have to do

1282
01:02:45,659 --> 01:02:49,619
that all you have to do is when you're

1283
01:02:47,400 --> 01:02:50,910
reloading you just you just reload one

1284
01:02:49,619 --> 01:02:52,559
of those things when you're streaming

1285
01:02:50,909 --> 01:02:55,170
out the blocks you just stream out the

1286
01:02:52,559 --> 01:02:57,449
base pointer and then when you reload

1287
01:02:55,170 --> 01:03:00,769
them you do do virtual Alec and pass the

1288
01:02:57,449 --> 01:03:00,769
base pointer you load it off the disk

1289
01:03:46,170 --> 01:03:49,619
I know this isn't relevant to the code

1290
01:03:48,150 --> 01:03:51,210
but does it seem strange to me in a

1291
01:03:49,619 --> 01:03:52,559
different location no not really because

1292
01:03:51,210 --> 01:03:55,730
it's the same computer and the same

1293
01:03:52,559 --> 01:03:55,730
monitor I just moved them

1294
01:04:04,059 --> 01:04:08,619
enemy mouse seems that arena start out

1295
01:04:06,219 --> 01:04:10,150
as a fast stack style allocator and I'm

1296
01:04:08,619 --> 01:04:11,528
leaving towards I'm going to keep you've

1297
01:04:10,150 --> 01:04:13,059
demonstrated the benefits of virtual

1298
01:04:11,528 --> 01:04:14,409
Ellicott cetera but can you comment on

1299
01:04:13,059 --> 01:04:18,209
the performance it and why you chose it

1300
01:04:14,409 --> 01:04:20,558
over Malik know so I just to be clear

1301
01:04:18,208 --> 01:04:23,889
I'm not necessarily saying that we'll

1302
01:04:20,559 --> 01:04:26,559
ever run in any of these modes probably

1303
01:04:23,889 --> 01:04:29,409
will set the initial allocation sizes of

1304
01:04:26,559 --> 01:04:31,869
our you know five or six arenas to just

1305
01:04:29,409 --> 01:04:34,929
be one allocation and they'll in at the

1306
01:04:31,869 --> 01:04:38,229
beginning and that'll be it so we

1307
01:04:34,929 --> 01:04:41,558
probably won't really do we will

1308
01:04:38,228 --> 01:04:43,958
probably leave it as running in its

1309
01:04:41,559 --> 01:04:46,809
stack mode because remember we haven't

1310
01:04:43,958 --> 01:04:49,179
changed that at all the only thing we

1311
01:04:46,809 --> 01:04:52,028
added was the fact that when you

1312
01:04:49,179 --> 01:04:54,009
overflow we will allocate a new page so

1313
01:04:52,028 --> 01:04:56,048
basically right now we're just running

1314
01:04:54,009 --> 01:04:57,429
in modes like I'm playing around with

1315
01:04:56,048 --> 01:05:01,389
like for example here's the debug mode

1316
01:04:57,429 --> 01:05:03,308
we can use or whatever but you never

1317
01:05:01,389 --> 01:05:04,868
want to take this branch like this

1318
01:05:03,309 --> 01:05:07,150
branch just doesn't ever want to be

1319
01:05:04,869 --> 01:05:10,630
taken and most of the time it's not

1320
01:05:07,150 --> 01:05:13,389
right so it still ends up being a very

1321
01:05:10,630 --> 01:05:15,548
fast stack style allocator provided that

1322
01:05:13,389 --> 01:05:23,679
you seed it with a good default page

1323
01:05:15,548 --> 01:05:27,038
size for the arena William Bundy it is

1324
01:05:23,679 --> 01:05:29,249
James Horner's a main theme from The

1325
01:05:27,039 --> 01:05:29,249
Rocketeer

1326
01:05:44,349 --> 01:05:52,969
window are any days missing from the

1327
01:05:47,000 --> 01:05:54,949
YouTube archive not that I know of as

1328
01:05:52,969 --> 01:05:57,730
far as i know all day all days are on

1329
01:05:54,949 --> 01:05:57,730
the youtube archive

1330
01:07:04,889 --> 01:07:10,058
was men protect the primary motivation

1331
01:07:07,869 --> 01:07:13,900
for moving to dynamic memory or were

1332
01:07:10,059 --> 01:07:15,369
there other reasons um like I said I

1333
01:07:13,900 --> 01:07:17,710
don't really have any motivation for

1334
01:07:15,369 --> 01:07:20,559
moving to dynamic memory I just wanted

1335
01:07:17,710 --> 01:07:23,289
to show how you could do it the game

1336
01:07:20,559 --> 01:07:25,359
will run in either mode right you can if

1337
01:07:23,289 --> 01:07:28,960
you would like to just get rid of this

1338
01:07:25,358 --> 01:07:31,088
path and then go back to having arenas

1339
01:07:28,960 --> 01:07:33,278
allocate a big chunk at the beginning

1340
01:07:31,088 --> 01:07:34,838
and that would be fine so I don't I

1341
01:07:33,278 --> 01:07:37,088
don't want to suggest that that one is

1342
01:07:34,838 --> 01:07:40,179
like good or bad it's just whichever one

1343
01:07:37,088 --> 01:07:42,489
you want and I wanted to show how you

1344
01:07:40,179 --> 01:07:44,048
that can be done like the game doesn't

1345
01:07:42,489 --> 01:07:45,970
really have to change at all right they

1346
01:07:44,048 --> 01:07:50,889
as long as the game just uses a push

1347
01:07:45,969 --> 01:07:53,018
style set up for its own purposes then

1348
01:07:50,889 --> 01:07:55,268
you can pretty much just choose whether

1349
01:07:53,018 --> 01:07:58,419
you're doing dynamic allocation or

1350
01:07:55,268 --> 01:08:01,088
non-dynamic right down to individual

1351
01:07:58,420 --> 01:08:04,180
structures if you want to do protected

1352
01:08:01,088 --> 01:08:06,088
pages but again that's really only for

1353
01:08:04,179 --> 01:08:09,098
debugging you don't ever want to do that

1354
01:08:06,088 --> 01:08:11,498
you don't want to protect allocate and

1355
01:08:09,099 --> 01:08:13,298
protect extra pages if you're not in a

1356
01:08:11,498 --> 01:08:17,108
debug scenario because it it's just

1357
01:08:13,298 --> 01:08:19,539
allocates way more memory and it's much

1358
01:08:17,109 --> 01:08:21,548
lower too because it has to actually do

1359
01:08:19,539 --> 01:08:24,338
a memory allocation every time we do a

1360
01:08:21,548 --> 01:08:26,048
push struct whereas normally every time

1361
01:08:24,338 --> 01:08:28,500
you push truck just just incrementing

1362
01:08:26,048 --> 01:08:28,500
the pointer over

1363
01:09:22,000 --> 01:09:27,250
all right looks like no more q Cohen so

1364
01:09:24,560 --> 01:09:27,250
I'm going to wrap it up

1365
01:09:34,939 --> 01:09:38,338
alright thank you everyone for joining

1366
01:09:36,689 --> 01:09:39,809
me for another episode of handmade hero

1367
01:09:38,338 --> 01:09:41,880
it's been a pleasure coding with you as

1368
01:09:39,810 --> 01:09:43,230
always if you would like to follow along

1369
01:09:41,880 --> 01:09:45,989
with stories at home you can always peer

1370
01:09:43,229 --> 01:09:47,909
to the game on handmade here org or go

1371
01:09:45,988 --> 01:09:49,349
to the forums to ask questions the

1372
01:09:47,909 --> 01:09:52,858
patreon page support the video series

1373
01:09:49,350 --> 01:09:56,430
schedule bot which tweets a schedule at

1374
01:09:52,859 --> 01:09:58,920
you or our past episode guide where the

1375
01:09:56,430 --> 01:10:01,460
old episodes are I'll be back here

1376
01:09:58,920 --> 01:10:04,440
tomorrow for the last stream of the week

1377
01:10:01,460 --> 01:10:07,050
not streaming on Friday I'll be back

1378
01:10:04,439 --> 01:10:08,789
here for 5 p.m. pacific daylight time

1379
01:10:07,050 --> 01:10:10,560
oak see you there for that I'm till then

1380
01:10:08,789 --> 01:10:12,659
if I programming it and i'll see you

1381
01:10:10,560 --> 01:10:14,930
guys on the internet take it easy

1382
01:10:12,659 --> 01:10:14,930
everyone

