1
00:00:00,240 --> 00:00:03,759
hello everybody and welcome to handmade

2
00:00:02,000 --> 00:00:07,359
hero sure we code a complete game

3
00:00:03,759 --> 00:00:08,000
live on stream we are uh basically going

4
00:00:07,359 --> 00:00:10,160
to

5
00:00:08,000 --> 00:00:11,599
you know switch we're going to switch

6
00:00:10,160 --> 00:00:14,960
gears a little bit

7
00:00:11,599 --> 00:00:18,160
um today because i don't know if you saw

8
00:00:14,960 --> 00:00:20,320
what i posted on twitter

9
00:00:18,160 --> 00:00:21,600
but basically i realized that what we

10
00:00:20,320 --> 00:00:25,039
were doing

11
00:00:21,600 --> 00:00:26,800
was dumb and i should have thought of it

12
00:00:25,039 --> 00:00:28,160
beforehand but it didn't

13
00:00:26,800 --> 00:00:30,400
anyway if you take a look at where we

14
00:00:28,160 --> 00:00:32,558
are we were trying to

15
00:00:30,399 --> 00:00:34,879
do some work on optimizing how we were

16
00:00:32,558 --> 00:00:38,000
doing ray marching

17
00:00:34,880 --> 00:00:40,399
i guess it's just retracing um but if

18
00:00:38,000 --> 00:00:42,079
you take a look at how we were doing it

19
00:00:40,399 --> 00:00:45,520
one of the things you can see

20
00:00:42,079 --> 00:00:48,558
is that we were in our

21
00:00:45,520 --> 00:00:50,559
in our lighting profiling uh when we

22
00:00:48,558 --> 00:00:52,878
were actually doing our grid raycast

23
00:00:50,558 --> 00:00:53,599
we were trying to see if we could just

24
00:00:52,878 --> 00:00:56,640
march

25
00:00:53,600 --> 00:00:59,920
through the grid um

26
00:00:56,640 --> 00:01:03,120
in a computational way so

27
00:00:59,920 --> 00:01:05,280
like down here you know we've got code

28
00:01:03,119 --> 00:01:06,158
that has the old way where we look into

29
00:01:05,280 --> 00:01:08,320
a table

30
00:01:06,159 --> 00:01:10,840
and then a new way where we just compute

31
00:01:08,319 --> 00:01:13,839
what we're doing

32
00:01:10,840 --> 00:01:13,840
and

33
00:01:14,239 --> 00:01:19,280
i wanted to look at what the timing

34
00:01:16,000 --> 00:01:22,159
difference would be between these two

35
00:01:19,280 --> 00:01:23,118
and it turns out that the answer is it's

36
00:01:22,159 --> 00:01:25,840
quite bad

37
00:01:23,118 --> 00:01:27,759
right so even though we did a like sort

38
00:01:25,840 --> 00:01:29,759
of pseudo-optimizing we didn't really

39
00:01:27,759 --> 00:01:31,519
optimize it particularly heavily but you

40
00:01:29,759 --> 00:01:33,280
know we did it's not much

41
00:01:31,519 --> 00:01:34,640
right it's like you know 10 instructions

42
00:01:33,280 --> 00:01:38,079
or something it's not

43
00:01:34,640 --> 00:01:38,799
huge um it turns out that this is just

44
00:01:38,078 --> 00:01:40,399
way too much

45
00:01:38,799 --> 00:01:42,000
probably because this is very

46
00:01:40,400 --> 00:01:43,520
predictable and straightforward for the

47
00:01:42,000 --> 00:01:44,959
processor and this is actually a bunch

48
00:01:43,519 --> 00:01:45,920
of computations and then a

49
00:01:44,959 --> 00:01:48,719
you know a thing where you have to

50
00:01:45,920 --> 00:01:50,079
actually depend on those computations

51
00:01:48,719 --> 00:01:51,679
so this can just be fired off

52
00:01:50,078 --> 00:01:52,798
immediately and this probably created

53
00:01:51,680 --> 00:01:55,118
some kind of dependency chain or

54
00:01:52,799 --> 00:01:57,920
something i don't know

55
00:01:55,118 --> 00:01:59,118
um but it was quite a bit worse now that

56
00:01:57,920 --> 00:02:02,478
doesn't actually

57
00:01:59,118 --> 00:02:03,040
mean that it is worse it could be that

58
00:02:02,478 --> 00:02:05,438
if we

59
00:02:03,040 --> 00:02:06,719
worked on this we could get it down but

60
00:02:05,438 --> 00:02:09,519
what i realized is

61
00:02:06,718 --> 00:02:11,199
that may just be a waste of time because

62
00:02:09,520 --> 00:02:13,520
if you take a look at what's going on in

63
00:02:11,199 --> 00:02:13,519
here

64
00:02:16,400 --> 00:02:20,239
i realized that there's no reason we

65
00:02:19,360 --> 00:02:22,720
can't just use

66
00:02:20,239 --> 00:02:24,080
the walk table and still use larger grid

67
00:02:22,719 --> 00:02:26,479
sizes

68
00:02:24,080 --> 00:02:27,760
so originally the problem and maybe i'll

69
00:02:26,479 --> 00:02:29,199
sketch this out on the blackboard

70
00:02:27,759 --> 00:02:30,479
because this was just something that i

71
00:02:29,199 --> 00:02:31,518
happen to randomly think of in the

72
00:02:30,479 --> 00:02:32,878
middle of the week while i was doing

73
00:02:31,519 --> 00:02:34,480
something totally unrelated to handmade

74
00:02:32,878 --> 00:02:35,919
hero

75
00:02:34,479 --> 00:02:37,359
it just pops in your brain like i think

76
00:02:35,919 --> 00:02:37,839
i just have background processes that

77
00:02:37,360 --> 00:02:40,160
are like

78
00:02:37,840 --> 00:02:42,000
spinning on code and they just like

79
00:02:40,159 --> 00:02:43,359
complete randomly and say oh hey by the

80
00:02:42,000 --> 00:02:44,159
way this was done what you did and i'm

81
00:02:43,360 --> 00:02:47,280
like

82
00:02:44,159 --> 00:02:51,439
yeah it was um so anyway

83
00:02:47,280 --> 00:02:56,318
on day 617 here

84
00:02:51,439 --> 00:03:00,878
what uh table

85
00:02:56,318 --> 00:03:02,958
driven raycast

86
00:03:00,878 --> 00:03:05,120
um so basically what was happening

87
00:03:02,959 --> 00:03:06,640
before is like all right so we know that

88
00:03:05,120 --> 00:03:08,239
the way that this thing works

89
00:03:06,639 --> 00:03:10,399
and i guess you know i can use the fancy

90
00:03:08,239 --> 00:03:15,439
little grid thing there we go

91
00:03:10,400 --> 00:03:15,439
um is we have a lighting voxel

92
00:03:16,158 --> 00:03:19,519
and we know that we're going to cast

93
00:03:17,519 --> 00:03:22,239
from the center of these voxel points

94
00:03:19,519 --> 00:03:22,879
to like create like our probe values

95
00:03:22,239 --> 00:03:25,360
right so we're

96
00:03:22,878 --> 00:03:26,798
picking like one of these right and

97
00:03:25,360 --> 00:03:28,799
we're in this voxel and we're going to

98
00:03:26,799 --> 00:03:31,200
send out like all these rays

99
00:03:28,799 --> 00:03:32,000
right so for any given array what we

100
00:03:31,199 --> 00:03:34,958
needed to do

101
00:03:32,000 --> 00:03:35,840
is like go okay we need to figure out

102
00:03:34,959 --> 00:03:37,840
how this ray

103
00:03:35,840 --> 00:03:39,598
marches along and we would just say look

104
00:03:37,840 --> 00:03:42,640
what's what geometry is in

105
00:03:39,598 --> 00:03:44,318
each part of this voxel as we go and and

106
00:03:42,639 --> 00:03:45,518
that's the whole thing and since we know

107
00:03:44,318 --> 00:03:46,000
that we're always starting from the

108
00:03:45,519 --> 00:03:48,239
center

109
00:03:46,000 --> 00:03:49,280
we know that we can just for each ray

110
00:03:48,239 --> 00:03:53,120
direction that we

111
00:03:49,280 --> 00:03:56,239
want to cast from our table we just have

112
00:03:53,120 --> 00:03:58,400
the the series of grid squares it goes

113
00:03:56,239 --> 00:03:58,400
through

114
00:03:58,840 --> 00:04:01,840
right

115
00:04:02,400 --> 00:04:05,438
so that's really nice and convenient and

116
00:04:04,080 --> 00:04:05,840
it just allows us to table drive the

117
00:04:05,438 --> 00:04:09,199
search

118
00:04:05,840 --> 00:04:10,158
problem is it depends on the lighting

119
00:04:09,199 --> 00:04:14,399
voxel

120
00:04:10,158 --> 00:04:17,279
right equaling the spatial voxel

121
00:04:14,400 --> 00:04:18,478
so or you know the the the spatial

122
00:04:17,279 --> 00:04:21,439
hierarchy that we use

123
00:04:18,478 --> 00:04:23,918
for uh determining what occluders we

124
00:04:21,439 --> 00:04:25,680
test the ray against for intersection

125
00:04:23,918 --> 00:04:27,599
so previously we had to have the

126
00:04:25,680 --> 00:04:29,519
lighting voxel and the spatial voxel be

127
00:04:27,600 --> 00:04:32,080
coincident meaning they had to have

128
00:04:29,519 --> 00:04:33,599
exactly the same size and the reason for

129
00:04:32,079 --> 00:04:35,680
that was because you always had to make

130
00:04:33,600 --> 00:04:37,199
sure you were starting

131
00:04:35,680 --> 00:04:39,600
in somewhere that coincides with the

132
00:04:37,199 --> 00:04:40,720
table so if the table was built for some

133
00:04:39,600 --> 00:04:42,720
other grid

134
00:04:40,720 --> 00:04:44,400
right so you know if we had just done

135
00:04:42,720 --> 00:04:45,680
like oh well here's this other grid we

136
00:04:44,399 --> 00:04:49,198
were doing or something

137
00:04:45,680 --> 00:04:51,360
right and the walk was supposed to be

138
00:04:49,199 --> 00:04:52,478
along that so it would do like here and

139
00:04:51,360 --> 00:04:56,479
then here or whatever

140
00:04:52,478 --> 00:04:56,800
right because then you could be casting

141
00:04:56,478 --> 00:04:59,039
from

142
00:04:56,800 --> 00:05:01,038
all sorts of different offsets relative

143
00:04:59,040 --> 00:05:02,400
to this grid the table would never line

144
00:05:01,038 --> 00:05:04,000
up with the cast anymore

145
00:05:02,399 --> 00:05:06,079
so i was like oh well if what if we just

146
00:05:04,000 --> 00:05:06,959
dynamically compute which grid squares

147
00:05:06,079 --> 00:05:08,879
to go through

148
00:05:06,959 --> 00:05:10,000
then we could use any size and i really

149
00:05:08,879 --> 00:05:11,199
want to be able to use bigger

150
00:05:10,000 --> 00:05:13,120
sizes because i think that would speed

151
00:05:11,199 --> 00:05:14,560
us up

152
00:05:13,120 --> 00:05:17,199
right now we don't get enough leverage

153
00:05:14,560 --> 00:05:17,199
for grid swear

154
00:05:21,759 --> 00:05:25,520
but what i realized is that's not

155
00:05:24,319 --> 00:05:28,159
necessary

156
00:05:25,519 --> 00:05:30,079
all you really need to do is know that

157
00:05:28,160 --> 00:05:31,680
there's a correspondence between these

158
00:05:30,079 --> 00:05:35,198
two things

159
00:05:31,680 --> 00:05:38,800
so sure we can always do the grid

160
00:05:35,199 --> 00:05:41,919
walk along this thing

161
00:05:38,800 --> 00:05:45,199
if we want to but we can then

162
00:05:41,918 --> 00:05:48,879
also just use that as a mapping

163
00:05:45,199 --> 00:05:52,080
into our spatial occupancy table

164
00:05:48,879 --> 00:05:52,959
so for example suppose we said look what

165
00:05:52,079 --> 00:05:56,800
we're gonna do

166
00:05:52,959 --> 00:05:59,839
is we're going to use

167
00:05:56,800 --> 00:06:00,879
like three or f or four or two or

168
00:05:59,839 --> 00:06:02,799
something

169
00:06:00,879 --> 00:06:04,839
we're going to group these squares

170
00:06:02,800 --> 00:06:07,840
together

171
00:06:04,839 --> 00:06:07,839
right

172
00:06:14,879 --> 00:06:21,839
like so

173
00:06:24,000 --> 00:06:28,160
and so we'll basically have a low

174
00:06:26,240 --> 00:06:28,879
resolution grid and a high resolution

175
00:06:28,160 --> 00:06:32,240
grid

176
00:06:28,879 --> 00:06:34,000
right and then we know

177
00:06:32,240 --> 00:06:35,280
that there's two ways we could now

178
00:06:34,000 --> 00:06:36,800
approach this problem

179
00:06:35,279 --> 00:06:39,279
and i don't know which one of them will

180
00:06:36,800 --> 00:06:41,038
work maybe neither of them in which case

181
00:06:39,279 --> 00:06:42,559
you know we're still back to square one

182
00:06:41,038 --> 00:06:45,120
but

183
00:06:42,560 --> 00:06:45,759
we can do one of two things one thing we

184
00:06:45,120 --> 00:06:49,439
can do

185
00:06:45,759 --> 00:06:52,160
is we can just loop through

186
00:06:49,439 --> 00:06:53,199
each grid square and we only need to

187
00:06:52,160 --> 00:06:55,199
actually do

188
00:06:53,199 --> 00:06:57,120
uh testing when we detect that we've

189
00:06:55,199 --> 00:06:58,478
actually moved into a larger square so

190
00:06:57,120 --> 00:07:00,319
we can just keep

191
00:06:58,478 --> 00:07:02,079
whatever our coordinates were and go

192
00:07:00,319 --> 00:07:04,800
from there or

193
00:07:02,079 --> 00:07:05,519
we can do just something which

194
00:07:04,800 --> 00:07:08,160
multiplies

195
00:07:05,519 --> 00:07:08,560
out our table more so we can just say

196
00:07:08,160 --> 00:07:10,639
look

197
00:07:08,560 --> 00:07:13,839
we know we're always aligned we're just

198
00:07:10,639 --> 00:07:17,038
aligned in one of four or eight ways

199
00:07:13,839 --> 00:07:17,758
right and the problem is the table gets

200
00:07:17,038 --> 00:07:21,279
bigger

201
00:07:17,759 --> 00:07:21,280
right um

202
00:07:21,519 --> 00:07:32,799
but the run time cost wouldn't

203
00:07:30,000 --> 00:07:32,800
if that makes sense

204
00:07:33,038 --> 00:07:45,680
so in that particular case

205
00:07:36,160 --> 00:07:47,840
it's like well you know all right um

206
00:07:45,680 --> 00:07:49,120
it's really hard to say will that be

207
00:07:47,839 --> 00:07:50,878
more efficient than what we were trying

208
00:07:49,120 --> 00:07:51,918
to do because it's it's in that sort of

209
00:07:50,879 --> 00:07:53,840
cloudy area

210
00:07:51,918 --> 00:07:55,439
of like what does the processor want to

211
00:07:53,839 --> 00:07:58,719
do um

212
00:07:55,439 --> 00:07:59,360
and i don't actually know but it's it

213
00:07:58,720 --> 00:08:04,560
seems

214
00:07:59,360 --> 00:08:08,080
worth doing to try to get the table

215
00:08:04,560 --> 00:08:08,079
uh to be you know

216
00:08:09,598 --> 00:08:13,199
to see if we can just make a table

217
00:08:11,598 --> 00:08:15,038
that's similar in science to our

218
00:08:13,199 --> 00:08:15,360
existing table but that actually just

219
00:08:15,038 --> 00:08:18,159
lets

220
00:08:15,360 --> 00:08:19,199
us walk directly without too much of a

221
00:08:18,160 --> 00:08:21,759
problem right

222
00:08:19,199 --> 00:08:23,520
so that's the thing that i would like to

223
00:08:21,759 --> 00:08:25,120
take a look at now one of the things is

224
00:08:23,519 --> 00:08:26,560
we could just expand the table directly

225
00:08:25,120 --> 00:08:28,399
now remember the problem here is that

226
00:08:26,560 --> 00:08:31,439
this is actually three dimensional

227
00:08:28,399 --> 00:08:33,360
so it's not going to be four right it's

228
00:08:31,439 --> 00:08:36,719
actually going to be eight

229
00:08:33,360 --> 00:08:36,719
if we group these up

230
00:08:38,839 --> 00:08:43,919
right it's going to be eight of these

231
00:08:41,519 --> 00:08:43,918
cells

232
00:08:44,000 --> 00:08:47,600
um so if we just did this directly our

233
00:08:46,879 --> 00:08:50,720
table

234
00:08:47,600 --> 00:08:52,320
would be like eight times the size that

235
00:08:50,720 --> 00:08:56,399
it was before which is quite

236
00:08:52,320 --> 00:08:59,440
uh a like it's quite a

237
00:08:56,399 --> 00:08:59,440
increase right

238
00:09:04,000 --> 00:09:07,519
and i don't know that there's much of a

239
00:09:06,639 --> 00:09:09,759
way you can

240
00:09:07,519 --> 00:09:11,360
really compress these it's a it's a good

241
00:09:09,759 --> 00:09:13,759
question um

242
00:09:11,360 --> 00:09:15,200
so like for example if you're always

243
00:09:13,759 --> 00:09:18,639
gonna start

244
00:09:15,200 --> 00:09:21,040
uh in one of these eight quadrants i

245
00:09:18,639 --> 00:09:22,559
mean or eight octants um i don't

246
00:09:21,039 --> 00:09:26,159
actually know

247
00:09:22,559 --> 00:09:27,838
whether it i don't actually know whether

248
00:09:26,159 --> 00:09:29,278
you need to store completely different

249
00:09:27,839 --> 00:09:31,200
walk tables for all of those like it

250
00:09:29,278 --> 00:09:33,120
could be that they're mostly the same

251
00:09:31,200 --> 00:09:37,519
set of walk tables

252
00:09:33,120 --> 00:09:38,320
um or that there's a way you can adjust

253
00:09:37,519 --> 00:09:40,959
the values

254
00:09:38,320 --> 00:09:42,320
fairly trivially to make that work i

255
00:09:40,958 --> 00:09:44,319
don't know

256
00:09:42,320 --> 00:09:46,160
um so there's a lot of things there that

257
00:09:44,320 --> 00:09:49,040
i don't know and another

258
00:09:46,159 --> 00:09:50,240
uh thing that's worth noting there is

259
00:09:49,039 --> 00:09:53,599
there's the possibility

260
00:09:50,240 --> 00:09:54,879
that it could be compressed um in some

261
00:09:53,600 --> 00:09:57,040
way for example

262
00:09:54,879 --> 00:09:58,159
let's suppose that you have two

263
00:09:57,039 --> 00:10:00,399
different rays

264
00:09:58,159 --> 00:10:01,600
and both rays traverse the exact same

265
00:10:00,399 --> 00:10:03,839
set of cells

266
00:10:01,600 --> 00:10:05,680
and the larger you make the cells

267
00:10:03,839 --> 00:10:06,079
probably the more likely that's going to

268
00:10:05,679 --> 00:10:09,120
be

269
00:10:06,078 --> 00:10:09,919
as well right because the larger the

270
00:10:09,120 --> 00:10:12,320
cells are

271
00:10:09,919 --> 00:10:14,000
the less variation there's going to be

272
00:10:12,320 --> 00:10:16,079
between two different rays because

273
00:10:14,000 --> 00:10:17,200
there's a much wider aperture that could

274
00:10:16,078 --> 00:10:19,599
catch you know

275
00:10:17,200 --> 00:10:21,920
so just to give a simple example suppose

276
00:10:19,600 --> 00:10:21,920
we took

277
00:10:22,000 --> 00:10:25,519
a grid like this and we said well okay

278
00:10:24,559 --> 00:10:28,799
we're going to take

279
00:10:25,519 --> 00:10:31,039
these two rays

280
00:10:28,799 --> 00:10:32,799
if we were talking about a grid that was

281
00:10:31,039 --> 00:10:34,879
exactly the resolution of this

282
00:10:32,799 --> 00:10:36,399
then these are not the same walk table

283
00:10:34,879 --> 00:10:39,120
set because one of them

284
00:10:36,399 --> 00:10:40,639
diverges and comes down here otherwise

285
00:10:39,120 --> 00:10:41,039
they're the same like this four was the

286
00:10:40,639 --> 00:10:43,519
same

287
00:10:41,039 --> 00:10:44,078
but then these three are different right

288
00:10:43,519 --> 00:10:46,560
um

289
00:10:44,078 --> 00:10:48,399
but what you'll notice is that if i was

290
00:10:46,559 --> 00:10:49,919
to then say well what if we had the grid

291
00:10:48,399 --> 00:10:51,519
squares be this large

292
00:10:49,919 --> 00:10:54,639
then all of a sudden if they're you know

293
00:10:51,519 --> 00:10:58,078
two by two this is maybe the same

294
00:10:54,639 --> 00:10:58,078
right um

295
00:10:58,159 --> 00:11:01,278
so it's possible that that could be the

296
00:11:00,078 --> 00:11:04,078
case um

297
00:11:01,278 --> 00:11:05,600
but i don't really know uh right like i

298
00:11:04,078 --> 00:11:08,479
don't i don't know to what extent that

299
00:11:05,600 --> 00:11:08,480
would really be true

300
00:11:08,958 --> 00:11:11,919
and the reason i say that is because if

301
00:11:10,639 --> 00:11:12,799
you think about what happens if you move

302
00:11:11,919 --> 00:11:16,958
this one down

303
00:11:12,799 --> 00:11:19,599
then they are different right so

304
00:11:16,958 --> 00:11:21,919
so really hard to say and i'm not sure

305
00:11:19,600 --> 00:11:21,920
um

306
00:11:22,639 --> 00:11:34,000
it's it's a really tough call so uh

307
00:11:29,839 --> 00:11:34,000
i guess what i would say first is

308
00:11:34,159 --> 00:11:41,360
maybe let's see what happens

309
00:11:38,240 --> 00:11:43,278
if we just try right um and we'll see

310
00:11:41,360 --> 00:11:46,480
where we get

311
00:11:43,278 --> 00:11:47,759
and based on what i see we'll determine

312
00:11:46,480 --> 00:11:49,039
what our next steps are going to be i

313
00:11:47,759 --> 00:11:52,319
really just don't

314
00:11:49,039 --> 00:11:53,519
know exactly what the right solution

315
00:11:52,320 --> 00:11:55,440
here is but

316
00:11:53,519 --> 00:11:57,839
so the other way to do it too was just

317
00:11:55,440 --> 00:11:57,839
to say

318
00:11:58,000 --> 00:12:02,399
look let's just still march on the low

319
00:12:00,879 --> 00:12:05,120
red on the high res grid

320
00:12:02,399 --> 00:12:06,559
and then just correspond back to the low

321
00:12:05,120 --> 00:12:08,959
res grid

322
00:12:06,559 --> 00:12:10,879
and that method's super simple right all

323
00:12:08,958 --> 00:12:11,439
we would do there is just instead of

324
00:12:10,879 --> 00:12:13,759
having an

325
00:12:11,440 --> 00:12:15,839
absolute delta we would have like a

326
00:12:13,759 --> 00:12:17,679
delta per channel so we'd actually track

327
00:12:15,839 --> 00:12:21,040
the xyz

328
00:12:17,679 --> 00:12:23,439
um in you know an actual

329
00:12:21,039 --> 00:12:24,240
uh and expanded so you know maybe we'd

330
00:12:23,440 --> 00:12:27,360
just do

331
00:12:24,240 --> 00:12:30,159
uh like eight

332
00:12:27,360 --> 00:12:31,519
you know eight eight eight uh packed

333
00:12:30,159 --> 00:12:34,399
into a register

334
00:12:31,519 --> 00:12:35,759
and then we'd just convert that into a

335
00:12:34,399 --> 00:12:41,440
high-res grid lookup

336
00:12:35,759 --> 00:12:41,439
by bit a few bit you know shuffles right

337
00:12:41,600 --> 00:12:44,800
and the problem with that

338
00:12:45,600 --> 00:12:49,440
because that's by far the easiest and it

339
00:12:47,679 --> 00:12:51,039
doesn't change the table size table size

340
00:12:49,440 --> 00:12:54,399
stays the same

341
00:12:51,039 --> 00:12:54,399
and we're probably quite fast

342
00:12:55,120 --> 00:12:58,240
the problem that we have with that is

343
00:12:57,679 --> 00:13:02,000
that

344
00:12:58,240 --> 00:13:05,120
i have no idea how we would actually

345
00:13:02,000 --> 00:13:08,399
um step it

346
00:13:05,120 --> 00:13:11,679
because each step in the

347
00:13:08,399 --> 00:13:14,639
hi-res grid doesn't necessarily

348
00:13:11,679 --> 00:13:15,278
translate into a step in the low res

349
00:13:14,639 --> 00:13:17,839
grid

350
00:13:15,278 --> 00:13:19,120
so you would have to have a loop like a

351
00:13:17,839 --> 00:13:21,680
separate loop

352
00:13:19,120 --> 00:13:22,240
that happens at the end of the main loop

353
00:13:21,679 --> 00:13:26,159
to

354
00:13:22,240 --> 00:13:26,159
keep stepping until you got to a new one

355
00:13:27,440 --> 00:13:30,480
and that just sounds dicey that sounds

356
00:13:29,679 --> 00:13:35,759
real bad

357
00:13:30,480 --> 00:13:39,920
right um

358
00:13:35,759 --> 00:13:41,600
uh it it could in theory be done with

359
00:13:39,919 --> 00:13:43,198
like conditional moves

360
00:13:41,600 --> 00:13:45,759
so that you don't have any branches and

361
00:13:43,198 --> 00:13:45,759
no loops

362
00:13:46,399 --> 00:13:50,240
and that's because you know you can't

363
00:13:47,759 --> 00:13:53,439
take more than three grid steps

364
00:13:50,240 --> 00:13:56,879
without getting to a new one right um

365
00:13:53,440 --> 00:13:57,600
there's no you know there's no plausible

366
00:13:56,879 --> 00:14:00,000
way you could

367
00:13:57,600 --> 00:14:01,680
you could hit three grid cells and not

368
00:14:00,000 --> 00:14:02,000
have the next step take you out of the

369
00:14:01,679 --> 00:14:05,919
grid

370
00:14:02,000 --> 00:14:05,919
i don't think um

371
00:14:06,958 --> 00:14:10,479
and you know maybe it's four i'd have to

372
00:14:08,480 --> 00:14:11,759
think about the fully 3d case but it's

373
00:14:10,480 --> 00:14:13,600
something like this so you could you

374
00:14:11,759 --> 00:14:15,039
know you could do like four conditional

375
00:14:13,600 --> 00:14:18,959
moves

376
00:14:15,039 --> 00:14:23,198
um and therefore not have a loop

377
00:14:18,958 --> 00:14:23,198
but i just don't know um

378
00:14:24,639 --> 00:14:32,799
i mean it sounds bad right

379
00:14:28,639 --> 00:14:32,799
and we can try it but it sounds bad

380
00:14:37,919 --> 00:14:42,000
so again pretty sure that there's

381
00:14:40,240 --> 00:14:43,680
probably

382
00:14:42,000 --> 00:14:45,839
there's something here we can use that's

383
00:14:43,679 --> 00:14:48,958
better than computing it on the fly

384
00:14:45,839 --> 00:14:50,959
like we were which even though it was

385
00:14:48,958 --> 00:14:53,439
fairly concise it seemed a little too

386
00:14:50,958 --> 00:14:53,439
expensive

387
00:14:54,078 --> 00:15:00,078
i don't know what we can do

388
00:14:58,320 --> 00:15:02,079
exactly here but it's i think it's just

389
00:15:00,078 --> 00:15:03,278
worth looking at this as an alternate

390
00:15:02,078 --> 00:15:06,159
method

391
00:15:03,278 --> 00:15:08,399
of trying to get that grid size to be

392
00:15:06,159 --> 00:15:11,759
larger

393
00:15:08,399 --> 00:15:17,198
so just to be clear what i mean by that

394
00:15:11,759 --> 00:15:17,198
if we take a look at our voxel

395
00:15:17,440 --> 00:15:21,519
so i guess it's in the renderer that

396
00:15:19,919 --> 00:15:24,240
specifies how big it is

397
00:15:21,519 --> 00:15:28,159
right so you can see here that we've got

398
00:15:24,240 --> 00:15:31,680
a 24 by 16 by 16 voxel

399
00:15:28,159 --> 00:15:34,639
and so you could imagine doing like

400
00:15:31,679 --> 00:15:37,278
a six by four by four or a twelve by

401
00:15:34,639 --> 00:15:37,278
eight by eight

402
00:15:38,839 --> 00:15:43,279
right

403
00:15:40,639 --> 00:15:44,480
and again we leave the lighting at this

404
00:15:43,278 --> 00:15:46,720
resolution

405
00:15:44,480 --> 00:15:49,360
but we're just talking about the spatial

406
00:15:46,720 --> 00:15:52,240
occupancy grid

407
00:15:49,360 --> 00:15:53,039
um and the spatial occupancy grid would

408
00:15:52,240 --> 00:15:57,198
be

409
00:15:53,039 --> 00:16:00,159
smaller so

410
00:15:57,198 --> 00:16:00,639
as a simple first test what i'd like to

411
00:16:00,159 --> 00:16:02,958
do

412
00:16:00,639 --> 00:16:04,480
is i'm just going to nerf this code here

413
00:16:02,958 --> 00:16:07,518
so we're not going to

414
00:16:04,480 --> 00:16:10,159
run the the branch of this code

415
00:16:07,519 --> 00:16:10,159
that does

416
00:16:11,360 --> 00:16:18,159
the that does the you know

417
00:16:15,278 --> 00:16:21,360
the computed step version uh and i'm

418
00:16:18,159 --> 00:16:22,600
going to go ahead and do

419
00:16:21,360 --> 00:16:25,749
a run of the

420
00:16:22,600 --> 00:16:25,749
[Music]

421
00:16:25,759 --> 00:16:34,320
uh profiler and if we take a look at

422
00:16:29,839 --> 00:16:36,160
the cost for our current scheme it's 4.5

423
00:16:34,320 --> 00:16:39,199
ish it's been that way

424
00:16:36,159 --> 00:16:41,360
for this scheme and what you can see

425
00:16:39,198 --> 00:16:42,799
is here's our box count distribution and

426
00:16:41,360 --> 00:16:44,560
you can see that like we just have a lot

427
00:16:42,799 --> 00:16:45,039
of trouble getting high box counts we

428
00:16:44,559 --> 00:16:46,638
want

429
00:16:45,039 --> 00:16:49,039
more of these because we're doing like

430
00:16:46,639 --> 00:16:51,360
way too much work right now on the grid

431
00:16:49,039 --> 00:16:54,958
iteration i think and not enough

432
00:16:51,360 --> 00:16:56,560
work in the actual box loop

433
00:16:54,958 --> 00:16:58,879
it's especially true because we have

434
00:16:56,559 --> 00:17:00,319
fairly sparse areas right now which

435
00:16:58,879 --> 00:17:01,919
you know may not be true always so i

436
00:17:00,320 --> 00:17:04,000
don't want to like try to push this

437
00:17:01,919 --> 00:17:06,240
number down artificially but

438
00:17:04,000 --> 00:17:08,240
you can see here we hardly ever get like

439
00:17:06,240 --> 00:17:08,798
largely we'd like to be able to do like

440
00:17:08,240 --> 00:17:11,919
at least

441
00:17:08,798 --> 00:17:13,759
eight per cell um because otherwise

442
00:17:11,919 --> 00:17:14,400
we're just spending a crap ton of time

443
00:17:13,759 --> 00:17:17,599
on

444
00:17:14,400 --> 00:17:18,640
loop overhead right uh and we almost

445
00:17:17,599 --> 00:17:20,958
never get there

446
00:17:18,640 --> 00:17:23,038
right um we almost never get there like

447
00:17:20,959 --> 00:17:25,839
the number of times we have

448
00:17:23,038 --> 00:17:27,599
uh stuff in the upper size of things is

449
00:17:25,838 --> 00:17:29,759
really low and when we do we

450
00:17:27,599 --> 00:17:31,839
we're usually wasting like some of our

451
00:17:29,759 --> 00:17:34,558
lane so we really want to push this up

452
00:17:31,839 --> 00:17:35,759
we want to see a lot of sevens uh maybe

453
00:17:34,558 --> 00:17:39,359
even a lot of like

454
00:17:35,759 --> 00:17:42,558
you know elevens and such

455
00:17:39,359 --> 00:17:43,918
uh or twelves um we just wanna be

456
00:17:42,558 --> 00:17:47,038
pushing up towards

457
00:17:43,919 --> 00:17:50,559
the like higher capacity for the test

458
00:17:47,038 --> 00:17:52,240
throughput inside a grid square

459
00:17:50,558 --> 00:17:54,558
so i just want to do a little bit of

460
00:17:52,240 --> 00:17:57,359
testing on this first just kind of like

461
00:17:54,558 --> 00:17:58,558
push it around a little bit and so if we

462
00:17:57,359 --> 00:18:02,399
take a look at

463
00:17:58,558 --> 00:18:05,759
when we actually do uh the

464
00:18:02,400 --> 00:18:08,640
the grid initialization um

465
00:18:05,759 --> 00:18:10,400
that part where we compute the spatial

466
00:18:08,640 --> 00:18:13,280
grid i want to see

467
00:18:10,400 --> 00:18:14,000
to what extent i can muck with it now

468
00:18:13,279 --> 00:18:15,599
the problem

469
00:18:14,000 --> 00:18:17,440
is i'm not sure how much of this is

470
00:18:15,599 --> 00:18:20,959
really

471
00:18:17,440 --> 00:18:22,240
um you can see here we do some testing

472
00:18:20,960 --> 00:18:25,519
and we we do stuff like

473
00:18:22,240 --> 00:18:26,960
uh looking at the the um atlas cell

474
00:18:25,519 --> 00:18:28,879
count and if the atlas cell count

475
00:18:26,960 --> 00:18:32,480
differs then we do stuff like

476
00:18:28,880 --> 00:18:32,480
making these grids and

477
00:18:36,319 --> 00:18:39,599
so that parts i think probably a bit of

478
00:18:38,880 --> 00:18:42,000
a problem

479
00:18:39,599 --> 00:18:43,519
because you know we well i guess it's

480
00:18:42,000 --> 00:18:44,160
not that big of a problem because i can

481
00:18:43,519 --> 00:18:47,679
just

482
00:18:44,160 --> 00:18:49,919
make these calls separately i suppose

483
00:18:47,679 --> 00:18:49,919
um

484
00:18:50,880 --> 00:18:54,799
and that would probably be fine so in

485
00:18:53,279 --> 00:18:58,079
here you can see

486
00:18:54,798 --> 00:18:59,519
where we do the where we do the spatial

487
00:18:58,079 --> 00:19:01,279
cell count you can see it

488
00:18:59,519 --> 00:19:02,558
taking the atlas cell count and just

489
00:19:01,279 --> 00:19:06,000
adding a gutter

490
00:19:02,558 --> 00:19:07,038
right so if we wanted to what we could

491
00:19:06,000 --> 00:19:09,679
do is just

492
00:19:07,038 --> 00:19:10,240
drop this right we could just drop this

493
00:19:09,679 --> 00:19:12,880
down

494
00:19:10,240 --> 00:19:14,720
and still do uh the part where we

495
00:19:12,880 --> 00:19:17,200
actually do the spatial grid

496
00:19:14,720 --> 00:19:19,360
that probably would all work so what

497
00:19:17,200 --> 00:19:20,720
i'll do is i'll do that inside hh light

498
00:19:19,359 --> 00:19:21,359
prof here and we'll just see what

499
00:19:20,720 --> 00:19:24,400
happens

500
00:19:21,359 --> 00:19:26,639
um just to see if i can you know

501
00:19:24,400 --> 00:19:28,480
sort of poke it a little bit and and uh

502
00:19:26,640 --> 00:19:31,120
and get a sense for it

503
00:19:28,480 --> 00:19:32,720
so when we load the solution here um

504
00:19:31,119 --> 00:19:33,678
what i'm going to do effectively is just

505
00:19:32,720 --> 00:19:36,079
overwrite it

506
00:19:33,679 --> 00:19:38,160
right and again this is just because

507
00:19:36,079 --> 00:19:40,319
we're in the test code so we don't

508
00:19:38,160 --> 00:19:41,519
you know we're not running the normal uh

509
00:19:40,319 --> 00:19:43,038
init code because

510
00:19:41,519 --> 00:19:45,359
we're not actually running inside the

511
00:19:43,038 --> 00:19:47,679
game when we're doing the test

512
00:19:45,359 --> 00:19:48,399
so in here where we do like vox seldim

513
00:19:47,679 --> 00:19:50,960
well the

514
00:19:48,400 --> 00:19:52,160
cell dim can still be the same so that's

515
00:19:50,960 --> 00:19:55,120
not really

516
00:19:52,160 --> 00:19:56,798
a big deal we do need to know what the

517
00:19:55,119 --> 00:19:57,759
fundamental unit is but i think we kind

518
00:19:56,798 --> 00:19:59,759
of know what the

519
00:19:57,759 --> 00:20:02,079
fundamental unit is always because it's

520
00:19:59,759 --> 00:20:03,919
always the same so i can again

521
00:20:02,079 --> 00:20:06,000
hard code that just for this test you

522
00:20:03,919 --> 00:20:08,640
can see that it's like 1.4 here

523
00:20:06,000 --> 00:20:10,400
right um so what i could do is i could

524
00:20:08,640 --> 00:20:12,080
just say look the fundamental unit is

525
00:20:10,400 --> 00:20:13,280
1.4 for all of our testing so we're just

526
00:20:12,079 --> 00:20:14,720
going to hard code that in while we're

527
00:20:13,279 --> 00:20:17,440
just doing this hack

528
00:20:14,720 --> 00:20:18,798
to see what's up and so then all i

529
00:20:17,440 --> 00:20:20,000
really need to do is take this spatial

530
00:20:18,798 --> 00:20:22,400
cell count here and when i do

531
00:20:20,000 --> 00:20:24,319
this computation this atlas cell count

532
00:20:22,400 --> 00:20:26,080
i'm just gonna divide it by two

533
00:20:24,319 --> 00:20:28,399
right so we're just going to decimate it

534
00:20:26,079 --> 00:20:29,678
by two um

535
00:20:28,400 --> 00:20:31,519
and then we're gonna set all the rest of

536
00:20:29,679 --> 00:20:34,000
stuff up this can stay the same

537
00:20:31,519 --> 00:20:34,558
this can stay the same so it's it's just

538
00:20:34,000 --> 00:20:36,319
this

539
00:20:34,558 --> 00:20:38,240
it's just the spatial grid where we do

540
00:20:36,319 --> 00:20:40,480
make voxelgrid that's the only thing

541
00:20:38,240 --> 00:20:40,480
right

542
00:20:42,798 --> 00:20:49,200
okay um so when we look

543
00:20:46,159 --> 00:20:50,799
at uh at this we

544
00:20:49,200 --> 00:20:52,319
we need to know what the atlas cell

545
00:20:50,798 --> 00:20:54,558
count actually is

546
00:20:52,319 --> 00:20:56,399
and i think the only real way for us to

547
00:20:54,558 --> 00:20:57,279
do that here is to look inside the

548
00:20:56,400 --> 00:20:59,120
solution

549
00:20:57,279 --> 00:21:00,960
um and so if you take a look at the

550
00:20:59,119 --> 00:21:02,158
lighting station it has the atlas

551
00:21:00,960 --> 00:21:04,880
well i mean you can see here it's got

552
00:21:02,159 --> 00:21:05,760
the atlas grid in it so i think we would

553
00:21:04,880 --> 00:21:09,280
just do

554
00:21:05,759 --> 00:21:09,279
inside that um

555
00:21:09,359 --> 00:21:13,119
where's our voxel grid there it is so

556
00:21:11,599 --> 00:21:14,798
inside the voxel grid you can see it's

557
00:21:13,119 --> 00:21:16,079
got that cell dim there so we can just

558
00:21:14,798 --> 00:21:19,599
look that up because we did

559
00:21:16,079 --> 00:21:19,599
save it to the drive

560
00:21:22,640 --> 00:21:34,640
all right um

561
00:21:31,519 --> 00:21:37,038
oh wait it's actually cell count

562
00:21:34,640 --> 00:21:38,559
sorry that's i don't know what's going

563
00:21:37,038 --> 00:21:41,359
on there all right

564
00:21:38,558 --> 00:21:42,879
uh so this would produce a different

565
00:21:41,359 --> 00:21:45,279
spatial

566
00:21:42,880 --> 00:21:46,320
uh alignment for this right it would it

567
00:21:45,279 --> 00:21:50,639
would produce a different

568
00:21:46,319 --> 00:21:52,079
sort of placement for it

569
00:21:50,640 --> 00:21:53,440
and i think the other thing that we're

570
00:21:52,079 --> 00:21:55,038
going to run into here is when we make

571
00:21:53,440 --> 00:21:56,880
this voxel grid i don't know how it

572
00:21:55,038 --> 00:21:58,558
figures out where the corner is

573
00:21:56,880 --> 00:22:00,880
right because that's gonna be a little

574
00:21:58,558 --> 00:22:04,079
bit weird so the total bounds

575
00:22:00,880 --> 00:22:04,080
thing here um

576
00:22:04,480 --> 00:22:09,038
i guess the answer is that that gets set

577
00:22:07,519 --> 00:22:13,119
periodically probably

578
00:22:09,038 --> 00:22:16,240
i would think so it's probably in here

579
00:22:13,119 --> 00:22:17,678
right where we're going to call setman

580
00:22:16,240 --> 00:22:19,599
corner

581
00:22:17,679 --> 00:22:21,600
and so we need to take a look at the

582
00:22:19,599 --> 00:22:27,839
setman corner call

583
00:22:21,599 --> 00:22:27,839
and just see what's going on here

584
00:22:32,000 --> 00:22:35,599
and so you can see the way that we were

585
00:22:33,679 --> 00:22:36,960
doing this right so we know where the

586
00:22:35,599 --> 00:22:38,879
atlas min corner is

587
00:22:36,960 --> 00:22:40,400
and that's fixed in position and then

588
00:22:38,880 --> 00:22:41,919
when we need to set our spatial min

589
00:22:40,400 --> 00:22:43,840
corner we need that to be aligned so

590
00:22:41,919 --> 00:22:47,200
we're basically saying look it's here

591
00:22:43,839 --> 00:22:47,759
and what you can see is we we use this

592
00:22:47,200 --> 00:22:51,600
thing called

593
00:22:47,759 --> 00:22:55,919
atlas to spatial grid offset um

594
00:22:51,599 --> 00:22:57,038
and i don't necessarily know why we

595
00:22:55,919 --> 00:23:00,000
chose to phrase it

596
00:22:57,038 --> 00:23:01,279
this way um meaning multiplied by the

597
00:23:00,000 --> 00:23:03,519
cell dim instead of just

598
00:23:01,279 --> 00:23:06,079
having that be the case because seldom

599
00:23:03,519 --> 00:23:08,639
size doesn't change

600
00:23:06,079 --> 00:23:10,960
but either way it's okay uh if we take a

601
00:23:08,640 --> 00:23:14,960
look at where that's actually computed

602
00:23:10,960 --> 00:23:18,400
which would presumably be in here

603
00:23:14,960 --> 00:23:19,200
where's the offset yeah so if we take a

604
00:23:18,400 --> 00:23:22,559
look at this

605
00:23:19,200 --> 00:23:24,480
we can adjust this value as well so now

606
00:23:22,558 --> 00:23:27,038
like effectively what's happening here

607
00:23:24,480 --> 00:23:30,319
is since would you look at like

608
00:23:27,038 --> 00:23:32,000
uh this vox cell dim value here the vox

609
00:23:30,319 --> 00:23:34,720
cell dim value

610
00:23:32,000 --> 00:23:36,240
always comes from the atlas it never

611
00:23:34,720 --> 00:23:38,880
comes from uh

612
00:23:36,240 --> 00:23:40,720
the spatial grid so in terms of setting

613
00:23:38,880 --> 00:23:41,840
up where the spatial grid is we can just

614
00:23:40,720 --> 00:23:45,440
say look it's gonna be

615
00:23:41,839 --> 00:23:48,319
two now because we

616
00:23:45,440 --> 00:23:49,919
are twice as large and that's just one

617
00:23:48,319 --> 00:23:50,480
of the reasons why i was saying like i

618
00:23:49,919 --> 00:23:52,559
don't

619
00:23:50,480 --> 00:23:54,558
know that we really want this to be

620
00:23:52,558 --> 00:23:56,720
based on the vox cell dim i mean i would

621
00:23:54,558 --> 00:24:00,879
pretty much say to do

622
00:23:56,720 --> 00:24:02,400
um probably just make atlas 2 spatial

623
00:24:00,880 --> 00:24:05,679
grid

624
00:24:02,400 --> 00:24:10,559
um a vector not

625
00:24:05,679 --> 00:24:10,559
an index uh

626
00:24:12,480 --> 00:24:18,240
so i don't know um i mean maybe we

627
00:24:15,919 --> 00:24:20,480
don't want to do that i'm not sure uh if

628
00:24:18,240 --> 00:24:24,319
we look at where

629
00:24:20,480 --> 00:24:26,880
that's actually getting used um

630
00:24:24,319 --> 00:24:28,000
i guess the problem we have is that that

631
00:24:26,880 --> 00:24:30,799
we're trying to do

632
00:24:28,000 --> 00:24:33,278
like this sort of offsetting where we we

633
00:24:30,798 --> 00:24:34,960
say like here's the voxel we're in

634
00:24:33,278 --> 00:24:37,038
uh and then we want to just add

635
00:24:34,960 --> 00:24:38,240
something to it i think we need that to

636
00:24:37,038 --> 00:24:41,359
probably be a more

637
00:24:38,240 --> 00:24:44,839
complex mapping right because that's not

638
00:24:41,359 --> 00:24:47,839
this is not going to be correct anymore

639
00:24:44,839 --> 00:24:47,839
um

640
00:24:50,640 --> 00:24:53,840
so you can see why i think like this

641
00:24:52,400 --> 00:24:55,278
used to be fairly straightforward

642
00:24:53,839 --> 00:24:58,839
because we knew that they were aligned

643
00:24:55,278 --> 00:25:01,679
but it's gonna need a little bit more

644
00:24:58,839 --> 00:25:02,879
um

645
00:25:01,679 --> 00:25:06,159
trying to think of what's going on it's

646
00:25:02,880 --> 00:25:06,159
gonna need a little bit more

647
00:25:07,440 --> 00:25:14,640
uh flexibility so

648
00:25:11,519 --> 00:25:16,720
when we're doing this and we say hey we

649
00:25:14,640 --> 00:25:20,559
need to get a grid index

650
00:25:16,720 --> 00:25:23,038
out of this thing for the walk

651
00:25:20,558 --> 00:25:23,839
this is no longer it doesn't make sense

652
00:25:23,038 --> 00:25:26,319
anymore

653
00:25:23,839 --> 00:25:27,439
right for this to just be a flat offset

654
00:25:26,319 --> 00:25:30,558
because it's not

655
00:25:27,440 --> 00:25:33,360
ever going to be correctly indexed

656
00:25:30,558 --> 00:25:34,079
the spatial grid is going to have to

657
00:25:33,359 --> 00:25:37,439
have

658
00:25:34,079 --> 00:25:41,199
a like a scale

659
00:25:37,440 --> 00:25:44,080
value as well as an offset right

660
00:25:41,200 --> 00:25:45,440
is the way to think of it and so in

661
00:25:44,079 --> 00:25:48,000
addition to

662
00:25:45,440 --> 00:25:50,558
mult in addition to offsetting it by one

663
00:25:48,000 --> 00:25:53,440
like you can see this wants to be

664
00:25:50,558 --> 00:25:54,399
you know one potentially but you know in

665
00:25:53,440 --> 00:25:57,038
here we could say

666
00:25:54,400 --> 00:25:58,320
all right we add these together and then

667
00:25:57,038 --> 00:26:00,158
we divide by two

668
00:25:58,319 --> 00:26:02,240
right that would give you the correct

669
00:26:00,159 --> 00:26:03,640
index you can see we probably want that

670
00:26:02,240 --> 00:26:06,400
to be

671
00:26:03,640 --> 00:26:07,600
systemic like we want that to be

672
00:26:06,400 --> 00:26:10,720
something that we know

673
00:26:07,599 --> 00:26:12,639
where it's happening right

674
00:26:10,720 --> 00:26:13,839
um but otherwise that's really all we

675
00:26:12,640 --> 00:26:17,840
would need to do

676
00:26:13,839 --> 00:26:17,839
and at this point i don't

677
00:26:18,000 --> 00:26:22,400
actually know if that takes care of

678
00:26:21,119 --> 00:26:24,558
everything but

679
00:26:22,400 --> 00:26:25,759
uh it probably doesn't yeah so you can

680
00:26:24,558 --> 00:26:27,678
see here like

681
00:26:25,759 --> 00:26:29,119
we got some weird results there but

682
00:26:27,679 --> 00:26:29,759
that's basically what we want to do so

683
00:26:29,119 --> 00:26:32,479
box count

684
00:26:29,759 --> 00:26:33,119
zero that doesn't really make any sense

685
00:26:32,480 --> 00:26:35,200
um

686
00:26:33,119 --> 00:26:36,558
what we're seeing there uh i like so we

687
00:26:35,200 --> 00:26:38,159
have to go figure out what what the heck

688
00:26:36,558 --> 00:26:42,079
is going on there right

689
00:26:38,159 --> 00:26:42,640
um but that's basically what we want to

690
00:26:42,079 --> 00:26:46,639
do

691
00:26:42,640 --> 00:26:49,759
so when we make uh

692
00:26:46,640 --> 00:26:52,080
yeah when we made this atlas here

693
00:26:49,759 --> 00:26:54,558
voxel dim looks correct spatial cell

694
00:26:52,079 --> 00:26:57,678
count is this divided by two

695
00:26:54,558 --> 00:27:01,519
plus two times oh well that's actually

696
00:26:57,679 --> 00:27:03,840
not correct though either right

697
00:27:01,519 --> 00:27:03,839
um

698
00:27:05,119 --> 00:27:14,000
so really this should just be v3s

699
00:27:09,200 --> 00:27:14,000
two two two like so um

700
00:27:14,159 --> 00:27:18,400
i mean again we we kind of have to

701
00:27:19,119 --> 00:27:23,678
make this a little bit more systemic but

702
00:27:21,440 --> 00:27:24,640
um so let's take a look at why this is

703
00:27:23,679 --> 00:27:26,640
happening first

704
00:27:24,640 --> 00:27:28,559
and try to start to clean that up

705
00:27:26,640 --> 00:27:30,320
because i think this should be

706
00:27:28,558 --> 00:27:31,759
mostly correct now we just have to go

707
00:27:30,319 --> 00:27:33,519
figure out like they probably missed one

708
00:27:31,759 --> 00:27:35,519
or two things in there

709
00:27:33,519 --> 00:27:37,278
because this is a pretty weird thing

710
00:27:35,519 --> 00:27:49,839
we're doing here

711
00:27:37,278 --> 00:27:49,839
so let's switch to debug build

712
00:27:54,319 --> 00:28:04,079
oops that's not the code i wanted to run

713
00:27:59,839 --> 00:28:05,678
okay um so yeah so what i want to do now

714
00:28:04,079 --> 00:28:07,439
is i just want to start taking a look at

715
00:28:05,679 --> 00:28:11,120
what's actually happening in here

716
00:28:07,440 --> 00:28:12,720
so when we do our lighting init i just

717
00:28:11,119 --> 00:28:17,839
want to look and see

718
00:28:12,720 --> 00:28:17,839
what's happening

719
00:28:21,440 --> 00:28:27,679
um do we not call that function we in

720
00:28:24,398 --> 00:28:31,599
the light prof we might not

721
00:28:27,679 --> 00:28:35,278
let me get us into

722
00:28:31,599 --> 00:28:36,879
this location first okay

723
00:28:35,278 --> 00:28:39,759
so let's just take a look at what these

724
00:28:36,880 --> 00:28:45,840
values actually are so here's solution

725
00:28:39,759 --> 00:28:45,839
atlas grid solution spatial grid

726
00:28:46,720 --> 00:28:59,839
here's the cell counts and

727
00:28:50,319 --> 00:28:59,839
those look about right

728
00:29:00,960 --> 00:29:04,159
so these values presumably won't get set

729
00:29:03,119 --> 00:29:08,558
till later

730
00:29:04,159 --> 00:29:08,559
um so we'll see

731
00:29:08,960 --> 00:29:15,759
i'm not sure cause yeah

732
00:29:12,000 --> 00:29:18,558
you need setman corner oh hmm

733
00:29:15,759 --> 00:29:19,119
so you know what probably we have to

734
00:29:18,558 --> 00:29:22,639
force

735
00:29:19,119 --> 00:29:23,038
the setman corner to get called though

736
00:29:22,640 --> 00:29:26,640
right

737
00:29:23,038 --> 00:29:28,798
like now that i think about it since

738
00:29:26,640 --> 00:29:29,200
we're probably just calling the yeah we

739
00:29:28,798 --> 00:29:31,918
are

740
00:29:29,200 --> 00:29:32,240
so the problem that we're going to have

741
00:29:31,919 --> 00:29:34,799
here

742
00:29:32,240 --> 00:29:36,880
is this is not going to be aligned

743
00:29:34,798 --> 00:29:38,960
anymore

744
00:29:36,880 --> 00:29:40,080
so that makes sense so if you take a

745
00:29:38,960 --> 00:29:42,000
look at the

746
00:29:40,079 --> 00:29:43,439
way this was working is you know you

747
00:29:42,000 --> 00:29:45,119
have to call update lighting get these

748
00:29:43,440 --> 00:29:46,159
things aligned and since we just saved

749
00:29:45,119 --> 00:29:48,239
it out directly

750
00:29:46,159 --> 00:29:51,679
um we were just loading it in from the

751
00:29:48,240 --> 00:29:54,480
actual game scenario and and running it

752
00:29:51,679 --> 00:29:54,880
um but that means we never actually do

753
00:29:54,480 --> 00:29:58,000
this

754
00:29:54,880 --> 00:29:59,278
call right so we need to if we're gonna

755
00:29:58,000 --> 00:30:02,079
reset this thing

756
00:29:59,278 --> 00:30:04,558
uh we need to to actually have some way

757
00:30:02,079 --> 00:30:08,000
of setting up the spatial min corner

758
00:30:04,558 --> 00:30:09,839
um the spatial min corner in this case

759
00:30:08,000 --> 00:30:13,038
we would get the atlas min corner which

760
00:30:09,839 --> 00:30:13,038
we can get pretty easily

761
00:30:15,038 --> 00:30:18,720
because we haven't changed it and then

762
00:30:18,000 --> 00:30:20,720
we need to just

763
00:30:18,720 --> 00:30:22,558
set the rest of this stuff up so you can

764
00:30:20,720 --> 00:30:23,600
see here like we need to figure out how

765
00:30:22,558 --> 00:30:27,599
this would actually

766
00:30:23,599 --> 00:30:29,038
um be aligned we know what the vox cell

767
00:30:27,599 --> 00:30:30,480
dim is we could have gotten this out of

768
00:30:29,038 --> 00:30:31,759
the atlas so i don't know why i bothered

769
00:30:30,480 --> 00:30:37,839
with this like we could have just done

770
00:30:31,759 --> 00:30:37,839
this right

771
00:30:41,200 --> 00:30:45,278
um so yeah i don't know why why we

772
00:30:44,000 --> 00:30:46,720
didn't do that because i'm pretty sure

773
00:30:45,278 --> 00:30:47,278
these are aligned to fundamental units

774
00:30:46,720 --> 00:30:49,519
anyway

775
00:30:47,278 --> 00:30:52,319
uh so anyway uh yeah like if you take a

776
00:30:49,519 --> 00:30:52,319
look at how this works

777
00:30:52,640 --> 00:30:56,000
um when we go ahead and get the minimum

778
00:30:55,119 --> 00:30:59,359
corner here

779
00:30:56,000 --> 00:31:01,440
we then just need to adjust by however

780
00:30:59,359 --> 00:31:02,558
much the offset is that we wanted to do

781
00:31:01,440 --> 00:31:05,840
here

782
00:31:02,558 --> 00:31:05,839
and um

783
00:31:10,880 --> 00:31:15,440
i mean i'm pretty sure that's that's

784
00:31:12,798 --> 00:31:15,440
just correct

785
00:31:16,159 --> 00:31:19,840
uh all right so let's take a look

786
00:31:20,079 --> 00:31:27,119
and let me just see what we get now um

787
00:31:23,839 --> 00:31:27,519
for box distributions i don't know why

788
00:31:27,119 --> 00:31:29,599
that's

789
00:31:27,519 --> 00:31:30,558
so apparently still wrong so apparently

790
00:31:29,599 --> 00:31:32,240
i'm not correct

791
00:31:30,558 --> 00:31:33,918
but that i figured that would be the

792
00:31:32,240 --> 00:31:35,759
main problem because

793
00:31:33,919 --> 00:31:37,840
that just doesn't set any dimensions on

794
00:31:35,759 --> 00:31:39,200
it right

795
00:31:37,839 --> 00:31:41,439
so let's take a look at the spatial grid

796
00:31:39,200 --> 00:31:42,798
here and see what it thinks so here's

797
00:31:41,440 --> 00:31:45,200
the new dimensions

798
00:31:42,798 --> 00:31:46,558
um for the spatial grid that you can see

799
00:31:45,200 --> 00:31:49,679
here

800
00:31:46,558 --> 00:31:51,038
uh oh yep i know what the other problem

801
00:31:49,679 --> 00:31:51,600
is so the other problem we're going to

802
00:31:51,038 --> 00:31:54,240
have here

803
00:31:51,599 --> 00:31:56,000
is that this vox dim is not correct so

804
00:31:54,240 --> 00:32:00,000
if this is too

805
00:31:56,000 --> 00:32:03,359
wide right it's it's got to be right

806
00:32:00,000 --> 00:32:05,038
it's got to be two um times the size

807
00:32:03,359 --> 00:32:06,398
for the dimension because it's going to

808
00:32:05,038 --> 00:32:08,558
be twice as long

809
00:32:06,398 --> 00:32:11,359
each individual cell will be twice as

810
00:32:08,558 --> 00:32:11,359
long right

811
00:32:11,759 --> 00:32:16,240
um so yeah so in here we need to change

812
00:32:14,159 --> 00:32:19,200
this up so this is going to be 2.0

813
00:32:16,240 --> 00:32:19,200
right um

814
00:32:20,159 --> 00:32:23,919
this is actually just going to be one at

815
00:32:22,480 --> 00:32:27,120
that point

816
00:32:23,919 --> 00:32:29,840
uh and this yeah

817
00:32:27,119 --> 00:32:29,839
i don't really know

818
00:32:32,880 --> 00:32:35,919
how we want to phrase this but this is

819
00:32:34,240 --> 00:32:38,079
going to be more like that right

820
00:32:35,919 --> 00:32:39,440
so it's just going to be one cell around

821
00:32:38,079 --> 00:32:40,879
the outside

822
00:32:39,440 --> 00:32:43,840
and that's always going to be true so we

823
00:32:40,880 --> 00:32:46,960
wouldn't really need to multiply that

824
00:32:43,839 --> 00:32:51,038
um that should be

825
00:32:46,960 --> 00:32:51,038
fine um

826
00:32:51,440 --> 00:32:56,080
and the index offset again like i don't

827
00:32:53,919 --> 00:32:57,679
really know like

828
00:32:56,079 --> 00:33:00,000
exactly how we want to phrase that but

829
00:32:57,679 --> 00:33:03,360
you can see here the way that

830
00:33:00,000 --> 00:33:07,119
that is phrased if i jump up

831
00:33:03,359 --> 00:33:12,000
to sorry just gotta type that in

832
00:33:07,119 --> 00:33:15,439
here when we do the flat index from

833
00:33:12,000 --> 00:33:20,000
and we do this uh offsetting here

834
00:33:15,440 --> 00:33:20,000
again that part is

835
00:33:21,440 --> 00:33:24,480
that part is it's yeah it's not really

836
00:33:23,359 --> 00:33:24,798
clear what you want to do so i think

837
00:33:24,480 --> 00:33:26,640
this

838
00:33:24,798 --> 00:33:28,240
one one one would still this would

839
00:33:26,640 --> 00:33:28,960
actually still be fine because we could

840
00:33:28,240 --> 00:33:30,720
have just done this

841
00:33:28,960 --> 00:33:32,558
left it the way it was and we just put

842
00:33:30,720 --> 00:33:35,600
that in

843
00:33:32,558 --> 00:33:36,879
so i don't know i'm really not sure how

844
00:33:35,599 --> 00:33:38,480
we want that to be phrased

845
00:33:36,880 --> 00:33:41,200
but we're gonna have to look at that

846
00:33:38,480 --> 00:33:41,200
separately anyway

847
00:33:41,679 --> 00:33:46,240
um all right so now if we take a look at

848
00:33:43,839 --> 00:33:48,959
what the box distribution is

849
00:33:46,240 --> 00:33:51,359
maybe we can see a little bit more

850
00:33:48,960 --> 00:33:55,120
clearly what's going on here

851
00:33:51,359 --> 00:33:56,959
um so again not really sure

852
00:33:55,119 --> 00:33:58,558
i understand what i'm looking at i think

853
00:33:56,960 --> 00:34:00,399
we may still have uh

854
00:33:58,558 --> 00:34:02,398
just a problem in here with with how

855
00:34:00,398 --> 00:34:05,678
we've set this up because

856
00:34:02,398 --> 00:34:06,719
just looking at the total uh box numbers

857
00:34:05,679 --> 00:34:08,320
is that

858
00:34:06,720 --> 00:34:10,079
oh well you know what no that could be

859
00:34:08,320 --> 00:34:11,679
correct because one of the things

860
00:34:10,079 --> 00:34:13,200
that you'll notice is like if we take a

861
00:34:11,679 --> 00:34:13,679
look back at the original box counts you

862
00:34:13,199 --> 00:34:15,199
can see

863
00:34:13,679 --> 00:34:17,119
how many input box there were look how

864
00:34:15,199 --> 00:34:20,078
many splits there were like this is what

865
00:34:17,119 --> 00:34:21,838
this is there's only 1251 boxes but this

866
00:34:20,079 --> 00:34:23,519
is how many actual splits

867
00:34:21,838 --> 00:34:25,119
we ended up with right so there's way

868
00:34:23,519 --> 00:34:27,039
more this would

869
00:34:25,119 --> 00:34:35,838
if this is correct which it may well not

870
00:34:27,039 --> 00:34:35,838
be it's much much lower right

871
00:34:47,119 --> 00:34:49,838
okay

872
00:35:01,838 --> 00:35:04,880
sorry i just glanced at chat everyone on

873
00:35:03,838 --> 00:35:06,880
the twitch chat

874
00:35:04,880 --> 00:35:08,960
who's here regularly understands what

875
00:35:06,880 --> 00:35:12,000
i'm talking about

876
00:35:08,960 --> 00:35:13,280
right i would assume that like

877
00:35:12,000 --> 00:35:14,838
it would only be people who are just

878
00:35:13,280 --> 00:35:17,200
dropping in for the first time who don't

879
00:35:14,838 --> 00:35:18,880
know

880
00:35:17,199 --> 00:35:20,719
because we've gone over every last

881
00:35:18,880 --> 00:35:23,599
little bit of this on the stream

882
00:35:20,719 --> 00:35:26,319
so people who've been watching they know

883
00:35:23,599 --> 00:35:26,320
what i'm talking about

884
00:35:27,519 --> 00:35:33,759
so anyway looks fine

885
00:35:30,559 --> 00:35:35,679
right um and i think i was right about

886
00:35:33,760 --> 00:35:38,160
this because if you just look at how

887
00:35:35,679 --> 00:35:39,919
many fewer total box there are now that

888
00:35:38,159 --> 00:35:40,799
could just be a premature victory lap

889
00:35:39,920 --> 00:35:42,838
because it could be

890
00:35:40,800 --> 00:35:44,640
the case that actually this is just

891
00:35:42,838 --> 00:35:48,078
buggy um

892
00:35:44,639 --> 00:35:50,078
and you know the

893
00:35:48,079 --> 00:35:52,079
the binning is is just going wrong or

894
00:35:50,079 --> 00:35:53,119
something right but i i if you take a

895
00:35:52,079 --> 00:35:55,200
look at that

896
00:35:53,119 --> 00:35:57,838
even just that doubling in size produces

897
00:35:55,199 --> 00:36:01,598
just such a much better

898
00:35:57,838 --> 00:36:02,239
arrangement here we are mostly up in the

899
00:36:01,599 --> 00:36:05,680
higher

900
00:36:02,239 --> 00:36:07,519
numbers there's very little down here

901
00:36:05,679 --> 00:36:09,199
and the number of zero cells dropped

902
00:36:07,519 --> 00:36:10,639
dramatically dropped by a factor of

903
00:36:09,199 --> 00:36:15,519
seven because now there's like

904
00:36:10,639 --> 00:36:15,519
larger empty space areas there

905
00:36:20,079 --> 00:36:23,280
and so that's really important too

906
00:36:21,358 --> 00:36:24,559
because we want to traverse empty space

907
00:36:23,280 --> 00:36:26,400
as quickly as possible we don't want to

908
00:36:24,559 --> 00:36:28,719
spend a lot of time

909
00:36:26,400 --> 00:36:29,760
uh looking at empty space and going is

910
00:36:28,719 --> 00:36:32,078
there anything here is there anything

911
00:36:29,760 --> 00:36:33,599
here right that's not

912
00:36:32,079 --> 00:36:34,960
doing anything for us we want to try and

913
00:36:33,599 --> 00:36:37,519
get to the places where we might have

914
00:36:34,960 --> 00:36:40,480
intersections as quickly as possible

915
00:36:37,519 --> 00:36:41,440
um so we can still run like we can look

916
00:36:40,480 --> 00:36:44,240
at this and say

917
00:36:41,440 --> 00:36:44,960
oh yeah okay so you know we can still

918
00:36:44,239 --> 00:36:47,439
run here

919
00:36:44,960 --> 00:36:49,199
and and i don't to be honest i'm not

920
00:36:47,440 --> 00:36:54,639
sure how we're doing the clamping

921
00:36:49,199 --> 00:36:58,078
um this should have crashed

922
00:36:54,639 --> 00:37:00,159
i want to say um well no because the

923
00:36:58,079 --> 00:37:04,720
initial grid index wouldn't so i guess

924
00:37:00,159 --> 00:37:07,279
i guess it won't crash um but uh

925
00:37:04,719 --> 00:37:08,399
we're not actually doing accurate

926
00:37:07,280 --> 00:37:11,680
testing here

927
00:37:08,400 --> 00:37:14,079
right um we're we're doing

928
00:37:11,679 --> 00:37:15,519
who knows what right so i just wanted to

929
00:37:14,079 --> 00:37:17,200
see what the difference was

930
00:37:15,519 --> 00:37:19,440
uh in runs and it looks like it actually

931
00:37:17,199 --> 00:37:23,039
doesn't affect the runtime

932
00:37:19,440 --> 00:37:26,559
very much at all it's basically the same

933
00:37:23,039 --> 00:37:26,559
which is a little surprising honestly

934
00:37:32,639 --> 00:37:36,319
so i'm not sure why that wouldn't have

935
00:37:34,639 --> 00:37:38,719
improved our performance

936
00:37:36,320 --> 00:37:41,119
uh but it's a little bit hard to say

937
00:37:38,719 --> 00:37:44,639
because we're not actually

938
00:37:41,119 --> 00:37:45,519
doing uh anything correctly now the walk

939
00:37:44,639 --> 00:37:49,358
table is

940
00:37:45,519 --> 00:37:53,440
you know completely wrong for what we're

941
00:37:49,358 --> 00:37:57,119
uh for what we're asking for

942
00:37:53,440 --> 00:37:59,039
so it's it's just

943
00:37:57,119 --> 00:38:00,320
uh trying to think of how to say this so

944
00:37:59,039 --> 00:38:02,800
it's it's

945
00:38:00,320 --> 00:38:04,160
although the initial grid index is going

946
00:38:02,800 --> 00:38:07,599
to be correct

947
00:38:04,159 --> 00:38:11,279
um the way that this was structured the

948
00:38:07,599 --> 00:38:14,800
actual uh walk would have been wrong

949
00:38:11,280 --> 00:38:18,640
right okay so

950
00:38:14,800 --> 00:38:21,519
i do know that the the breaking down

951
00:38:18,639 --> 00:38:23,358
of the cells into two small things does

952
00:38:21,519 --> 00:38:24,559
create problems for me but i don't

953
00:38:23,358 --> 00:38:27,279
actually want to

954
00:38:24,559 --> 00:38:28,559
to do that fix yet i want to leave that

955
00:38:27,280 --> 00:38:30,960
out

956
00:38:28,559 --> 00:38:32,078
and the reason for that is i want to

957
00:38:30,960 --> 00:38:34,960
make sure that

958
00:38:32,079 --> 00:38:37,200
in this code path here where we're doing

959
00:38:34,960 --> 00:38:39,838
this sort of initial grid index stuff

960
00:38:37,199 --> 00:38:40,960
what i want to do is change to passing

961
00:38:39,838 --> 00:38:47,838
something that's actually

962
00:38:40,960 --> 00:38:47,838
whole indices

963
00:38:48,159 --> 00:38:51,838
so if we take a look at the places where

964
00:38:50,559 --> 00:38:55,920
flat index from

965
00:38:51,838 --> 00:38:58,000
is called so in here where we've got

966
00:38:55,920 --> 00:38:59,119
a flat index from i'm just going to go

967
00:38:58,000 --> 00:39:02,239
ahead and say look

968
00:38:59,119 --> 00:39:03,280
uh let's nerf that call real quick and

969
00:39:02,239 --> 00:39:05,919
just see where it's called

970
00:39:03,280 --> 00:39:06,480
so you can see here we have flat index

971
00:39:05,920 --> 00:39:10,400
from

972
00:39:06,480 --> 00:39:12,719
um getting called often right

973
00:39:10,400 --> 00:39:14,320
and when when you produce the flat index

974
00:39:12,719 --> 00:39:15,358
from it's basically just the way of

975
00:39:14,320 --> 00:39:18,880
saying look which

976
00:39:15,358 --> 00:39:21,920
of these uh grid nodes are

977
00:39:18,880 --> 00:39:24,400
going to uh to access

978
00:39:21,920 --> 00:39:26,240
now there's a couple ways i can do this

979
00:39:24,400 --> 00:39:28,960
um

980
00:39:26,239 --> 00:39:29,759
but i'm going to need like this other

981
00:39:28,960 --> 00:39:32,960
thing

982
00:39:29,760 --> 00:39:32,960
uh i'm gonna need

983
00:39:33,280 --> 00:39:38,720
voxel i don't know

984
00:39:36,320 --> 00:39:40,800
what we want to call this sparse index

985
00:39:38,719 --> 00:39:44,078
or something

986
00:39:40,800 --> 00:39:45,519
um and i'm gonna need like a way of

987
00:39:44,079 --> 00:39:48,320
saying look we wanna

988
00:39:45,519 --> 00:39:49,039
pack the values into one thing so we can

989
00:39:48,320 --> 00:39:51,200
still do

990
00:39:49,039 --> 00:39:53,199
like addition and subtraction and crap

991
00:39:51,199 --> 00:39:57,838
on it but we're gonna need some way of

992
00:39:53,199 --> 00:39:57,838
doing that cleanly uh

993
00:40:02,400 --> 00:40:08,639
and to be completely honest i'm not 100

994
00:40:06,239 --> 00:40:10,078
sure exactly how i would want to do this

995
00:40:08,639 --> 00:40:13,199
but i think

996
00:40:10,079 --> 00:40:15,440
if i'm not mistaken we should

997
00:40:13,199 --> 00:40:16,639
because we don't ever overflow or

998
00:40:15,440 --> 00:40:19,760
underflow

999
00:40:16,639 --> 00:40:25,838
on the stepping these should be

1000
00:40:19,760 --> 00:40:25,839
things that will um

1001
00:40:26,000 --> 00:40:33,199
where you can still use a single value

1002
00:40:29,838 --> 00:40:36,559
to update it but the actual

1003
00:40:33,199 --> 00:40:40,879
indices for x y and z are all kept

1004
00:40:36,559 --> 00:40:44,400
separate right so

1005
00:40:40,880 --> 00:40:44,400
if you imagine something like this

1006
00:40:46,800 --> 00:40:50,240
put this in the same place as the flat

1007
00:40:50,838 --> 00:40:53,838
index

1008
00:41:03,920 --> 00:41:08,079
so if we put this in here and we want to

1009
00:41:06,318 --> 00:41:09,679
do the same assertion presumably just to

1010
00:41:08,079 --> 00:41:10,480
make sure that it always actually is

1011
00:41:09,679 --> 00:41:12,239
inside

1012
00:41:10,480 --> 00:41:14,639
um and then we do something like this

1013
00:41:12,239 --> 00:41:15,199
you can see like i don't actually want

1014
00:41:14,639 --> 00:41:16,879
to do

1015
00:41:15,199 --> 00:41:18,480
this anymore because i want to keep

1016
00:41:16,880 --> 00:41:21,200
these separate so instead of getting the

1017
00:41:18,480 --> 00:41:22,240
cell count what i'm actually going to do

1018
00:41:21,199 --> 00:41:24,719
is i'm just going to order these

1019
00:41:22,239 --> 00:41:24,719
together

1020
00:41:32,719 --> 00:41:36,078
right so what i want to do is i want to

1021
00:41:34,639 --> 00:41:39,279
have my x my y

1022
00:41:36,079 --> 00:41:41,920
and my z and i want these to be

1023
00:41:39,280 --> 00:41:43,280
just combined into one value now if i

1024
00:41:41,920 --> 00:41:45,519
just ordered them directly together

1025
00:41:43,280 --> 00:41:48,640
obviously this wouldn't work because

1026
00:41:45,519 --> 00:41:50,239
uh i would basically smush them all on

1027
00:41:48,639 --> 00:41:52,159
top of each other so we'd be no way to

1028
00:41:50,239 --> 00:41:53,838
get them back out again

1029
00:41:52,159 --> 00:41:55,358
so what i want to do here is just spread

1030
00:41:53,838 --> 00:41:56,639
them out

1031
00:41:55,358 --> 00:41:58,719
and since i know that i'm not going to

1032
00:41:56,639 --> 00:42:01,838
have voxels that are

1033
00:41:58,719 --> 00:42:03,598
particularly big in this case what i'll

1034
00:42:01,838 --> 00:42:04,960
probably do is say look let's just give

1035
00:42:03,599 --> 00:42:07,359
each one 10 bits

1036
00:42:04,960 --> 00:42:08,559
so you know something like this and you

1037
00:42:07,358 --> 00:42:12,078
know i mean i guess if you really wanted

1038
00:42:08,559 --> 00:42:12,078
to you could say let's give each one 11

1039
00:42:14,838 --> 00:42:20,159
bits and since we know z

1040
00:42:16,880 --> 00:42:22,720
is less uh

1041
00:42:20,159 --> 00:42:23,358
you could make that particular one not

1042
00:42:22,719 --> 00:42:25,039
have

1043
00:42:23,358 --> 00:42:26,960
11 right so you have like x and y have

1044
00:42:25,039 --> 00:42:27,358
11 or something you can do all kinds of

1045
00:42:26,960 --> 00:42:29,358
stuff

1046
00:42:27,358 --> 00:42:31,358
um but it doesn't matter at the moment

1047
00:42:29,358 --> 00:42:32,880
because we know that 10 bits is way more

1048
00:42:31,358 --> 00:42:36,719
than we're ever going to have

1049
00:42:32,880 --> 00:42:40,079
um because we can't afford

1050
00:42:36,719 --> 00:42:40,078
we can't afford to do something

1051
00:42:40,559 --> 00:42:44,480
budget-wise and that's that's that dense

1052
00:42:42,960 --> 00:42:45,599
like right now we're talking about four

1053
00:42:44,480 --> 00:42:48,719
or five bits

1054
00:42:45,599 --> 00:42:53,359
total for the index so that's

1055
00:42:48,719 --> 00:42:53,358
uh twice as many bits uh

1056
00:42:53,440 --> 00:42:57,280
we're never gonna get there it would be

1057
00:42:55,280 --> 00:42:58,960
great if we could but we're never gonna

1058
00:42:57,280 --> 00:43:00,800
um so anyway if we take a look at the

1059
00:42:58,960 --> 00:43:03,039
sparse index here

1060
00:43:00,800 --> 00:43:04,560
uh then what we can do is we can use the

1061
00:43:03,039 --> 00:43:12,800
sparse index to

1062
00:43:04,559 --> 00:43:15,519
to do various operations right

1063
00:43:12,800 --> 00:43:17,519
so what we want to do um is now have a

1064
00:43:15,519 --> 00:43:21,440
way to use the flat index

1065
00:43:17,519 --> 00:43:22,960
uh to look up um into the

1066
00:43:21,440 --> 00:43:25,519
we want to be able to take a sparse

1067
00:43:22,960 --> 00:43:28,400
index and we want to be able to look up

1068
00:43:25,519 --> 00:43:29,440
using the sparse index into a particular

1069
00:43:28,400 --> 00:43:30,800
voxel grid

1070
00:43:29,440 --> 00:43:32,880
and so effectively what we're doing

1071
00:43:30,800 --> 00:43:35,599
there is producing a flat index

1072
00:43:32,880 --> 00:43:37,039
uh you know we're doing this operation

1073
00:43:35,599 --> 00:43:39,039
right

1074
00:43:37,039 --> 00:43:40,480
and so we want something that works

1075
00:43:39,039 --> 00:43:42,239
basically like this

1076
00:43:40,480 --> 00:43:44,240
where we can produce a flat index from

1077
00:43:42,239 --> 00:43:47,358
and we more or less just want the same

1078
00:43:44,239 --> 00:43:49,199
exact call just flat index from

1079
00:43:47,358 --> 00:43:50,960
and instead it's going to take a voxel

1080
00:43:49,199 --> 00:43:53,679
sparse index here

1081
00:43:50,960 --> 00:43:54,079
right and then in addition to that we're

1082
00:43:53,679 --> 00:43:57,598
gonna

1083
00:43:54,079 --> 00:43:59,280
want some way right of

1084
00:43:57,599 --> 00:44:01,039
like we probably want this sort of

1085
00:43:59,280 --> 00:44:02,480
hard-coded almost

1086
00:44:01,039 --> 00:44:04,079
uh because when we're doing this

1087
00:44:02,480 --> 00:44:09,039
indexing we

1088
00:44:04,079 --> 00:44:12,000
want to have some way um

1089
00:44:09,039 --> 00:44:13,759
of reducing the order so like in the

1090
00:44:12,000 --> 00:44:15,440
same way that we were doing a divide by

1091
00:44:13,760 --> 00:44:16,319
two so what we want to do here is say

1092
00:44:15,440 --> 00:44:18,079
look we're going to do

1093
00:44:16,318 --> 00:44:20,239
a flat index from our sparse index but

1094
00:44:18,079 --> 00:44:21,680
we're we know that these indices are

1095
00:44:20,239 --> 00:44:23,279
going to be kind of in the wrong

1096
00:44:21,679 --> 00:44:25,519
dimensionality or something

1097
00:44:23,280 --> 00:44:25,519
right

1098
00:44:30,880 --> 00:44:34,480
so there's again a couple ways we can do

1099
00:44:32,559 --> 00:44:37,358
this and

1100
00:44:34,480 --> 00:44:38,960
this is how we would do again i don't

1101
00:44:37,358 --> 00:44:40,239
know which one we want to do but this is

1102
00:44:38,960 --> 00:44:43,358
how we would do

1103
00:44:40,239 --> 00:44:46,159
uh the version where we

1104
00:44:43,358 --> 00:44:47,759
step in the the high-res voxel but still

1105
00:44:46,159 --> 00:44:49,679
use the low-res voxel

1106
00:44:47,760 --> 00:44:51,839
so this would allow us to step in x y

1107
00:44:49,679 --> 00:44:52,480
and z using an offset and then we would

1108
00:44:51,838 --> 00:44:55,679
just

1109
00:44:52,480 --> 00:44:56,960
unpack these values and uh you know

1110
00:44:55,679 --> 00:44:59,519
shift them by

1111
00:44:56,960 --> 00:45:00,400
an extra bit to divide them by two and

1112
00:44:59,519 --> 00:45:02,400
then do a lookup

1113
00:45:00,400 --> 00:45:05,838
and that would be very you know simple

1114
00:45:02,400 --> 00:45:08,079
for us to do and pretty efficient

1115
00:45:05,838 --> 00:45:09,599
so the only problem that i have is i

1116
00:45:08,079 --> 00:45:11,519
don't know if i want to do that

1117
00:45:09,599 --> 00:45:13,680
i don't know if what i'd rather do is

1118
00:45:11,519 --> 00:45:16,000
just table drive the thing

1119
00:45:13,679 --> 00:45:17,598
by generating eight different tables

1120
00:45:16,000 --> 00:45:19,679
depending on where

1121
00:45:17,599 --> 00:45:20,800
which one of the grid squares you're in

1122
00:45:19,679 --> 00:45:24,159
so if you're in

1123
00:45:20,800 --> 00:45:26,079
you know um i'm sorry

1124
00:45:24,159 --> 00:45:27,358
which one of the octants you're in in a

1125
00:45:26,079 --> 00:45:33,839
larger grid cell

1126
00:45:27,358 --> 00:45:33,838
and i don't have any i just don't know

1127
00:45:38,559 --> 00:45:47,838
so here's a thought

1128
00:45:49,039 --> 00:45:54,239
you know what forget this

1129
00:45:52,639 --> 00:45:56,719
because i here's my here's my argument

1130
00:45:54,239 --> 00:45:58,639
here's the argument i'm going to make

1131
00:45:56,719 --> 00:46:00,799
i think i can safely go with the build

1132
00:45:58,639 --> 00:46:04,000
the additional tables here's why

1133
00:46:00,800 --> 00:46:05,680
sure there's eight different ways you

1134
00:46:04,000 --> 00:46:07,119
can be inside a grid cell so the table

1135
00:46:05,679 --> 00:46:08,399
gets expanded by a factor of eight

1136
00:46:07,119 --> 00:46:13,039
that's a lot right

1137
00:46:08,400 --> 00:46:16,480
but you're going to walk

1138
00:46:13,039 --> 00:46:19,279
like half as far possibly

1139
00:46:16,480 --> 00:46:21,838
two root two as far depending on how you

1140
00:46:19,280 --> 00:46:25,040
know the array goes

1141
00:46:21,838 --> 00:46:28,078
so the table also contracts

1142
00:46:25,039 --> 00:46:30,079
by half so

1143
00:46:28,079 --> 00:46:32,160
it's really only a factor of four

1144
00:46:30,079 --> 00:46:35,039
expansion

1145
00:46:32,159 --> 00:46:35,039
which is still bad

1146
00:46:38,719 --> 00:46:42,159
but not as bad so i'm going to say let's

1147
00:46:40,880 --> 00:46:45,200
go with that first

1148
00:46:42,159 --> 00:46:47,598
so let's just do that first

1149
00:46:45,199 --> 00:46:48,719
so in order to do that again so this

1150
00:46:47,599 --> 00:46:51,920
initial grid

1151
00:46:48,719 --> 00:46:55,279
grid index now has to be something that

1152
00:46:51,920 --> 00:46:57,519
we preserve and pass down

1153
00:46:55,280 --> 00:46:58,400
because this flat index is not going to

1154
00:46:57,519 --> 00:46:59,920
work so

1155
00:46:58,400 --> 00:47:02,720
what we're going to have to pass down

1156
00:46:59,920 --> 00:47:05,920
here rather than any of this stuff

1157
00:47:02,719 --> 00:47:06,480
we're going to have to take this atlas

1158
00:47:05,920 --> 00:47:09,039
index

1159
00:47:06,480 --> 00:47:11,199
and send it down directly so i'm just

1160
00:47:09,039 --> 00:47:14,000
going to start by trying to do that

1161
00:47:11,199 --> 00:47:17,199
and what i'll do is say all right let's

1162
00:47:14,000 --> 00:47:18,880
look at atlas index here

1163
00:47:17,199 --> 00:47:20,719
where were we passing the flat index

1164
00:47:18,880 --> 00:47:21,358
here you can see us passing it in so i'm

1165
00:47:20,719 --> 00:47:25,199
going to say

1166
00:47:21,358 --> 00:47:27,679
it takes the whole thing right

1167
00:47:25,199 --> 00:47:27,679
like so

1168
00:47:28,400 --> 00:47:33,039
if i go up to full cast you can see it

1169
00:47:30,719 --> 00:47:36,639
passing it here so i'm just going to say

1170
00:47:33,039 --> 00:47:39,838
look this is the atlas index again

1171
00:47:36,639 --> 00:47:40,558
right here uh and then when that gets

1172
00:47:39,838 --> 00:47:43,358
passed in

1173
00:47:40,559 --> 00:47:44,640
you can see here it's starting to get

1174
00:47:43,358 --> 00:47:46,960
used and

1175
00:47:44,639 --> 00:47:48,558
uh it's doing a look up here into the

1176
00:47:46,960 --> 00:47:50,838
spatial grid

1177
00:47:48,559 --> 00:47:53,839
to see whether or not it's inside

1178
00:47:50,838 --> 00:47:53,838
something

1179
00:47:56,079 --> 00:47:58,318
okay

1180
00:47:59,519 --> 00:48:04,800
um so if we now go and say all right we

1181
00:48:02,318 --> 00:48:09,039
need to figure out where we actually are

1182
00:48:04,800 --> 00:48:10,559
in our grid so for the atlas index

1183
00:48:09,039 --> 00:48:12,318
we know that this would give us the

1184
00:48:10,559 --> 00:48:14,559
actual grid square that we're in

1185
00:48:12,318 --> 00:48:15,440
we would divide this by two and then add

1186
00:48:14,559 --> 00:48:18,480
our one

1187
00:48:15,440 --> 00:48:19,200
offset right um so this is actually

1188
00:48:18,480 --> 00:48:21,039
correct

1189
00:48:19,199 --> 00:48:22,639
and then we would look that up in the in

1190
00:48:21,039 --> 00:48:24,079
the nodes right that's that's the

1191
00:48:22,639 --> 00:48:26,960
correct usage

1192
00:48:24,079 --> 00:48:27,680
of that but this isn't and the reason

1193
00:48:26,960 --> 00:48:30,318
this isn't

1194
00:48:27,679 --> 00:48:31,118
is because in grid raycast we expect

1195
00:48:30,318 --> 00:48:35,519
this thing

1196
00:48:31,119 --> 00:48:38,800
um to

1197
00:48:35,519 --> 00:48:42,159
actually have different information

1198
00:48:38,800 --> 00:48:45,200
so what we would need here is

1199
00:48:42,159 --> 00:48:48,318
when we look up the walk table offset so

1200
00:48:45,199 --> 00:48:51,598
this this bit here

1201
00:48:48,318 --> 00:48:54,318
um we would need to

1202
00:48:51,599 --> 00:48:55,280
use the walk table offset in a different

1203
00:48:54,318 --> 00:48:58,719
walk table

1204
00:48:55,280 --> 00:49:01,119
right so this where we do light sampling

1205
00:48:58,719 --> 00:49:03,838
walk table

1206
00:49:01,119 --> 00:49:05,920
this needs to actually have like a

1207
00:49:03,838 --> 00:49:10,400
dimensionality to it

1208
00:49:05,920 --> 00:49:11,119
um and so we're going to have to do is

1209
00:49:10,400 --> 00:49:14,559
have like

1210
00:49:11,119 --> 00:49:17,680
a octant index right

1211
00:49:14,559 --> 00:49:19,280
that we look up here uh and so the

1212
00:49:17,679 --> 00:49:22,719
initial grid index

1213
00:49:19,280 --> 00:49:25,599
which would come in uh and

1214
00:49:22,719 --> 00:49:26,558
is i guess i guess to be fair it is the

1215
00:49:25,599 --> 00:49:28,640
correct one

1216
00:49:26,559 --> 00:49:30,240
like you know we we did actually get it

1217
00:49:28,639 --> 00:49:34,639
so this this isn't

1218
00:49:30,239 --> 00:49:34,639
you know fake um

1219
00:49:37,679 --> 00:49:45,519
and i guess i can do this in 16. um so

1220
00:49:44,400 --> 00:49:48,240
it's not wrong but

1221
00:49:45,519 --> 00:49:48,719
it just is incomplete so in addition we

1222
00:49:48,239 --> 00:49:52,318
need

1223
00:49:48,719 --> 00:49:55,199
uh the octan index um and really that's

1224
00:49:52,318 --> 00:49:58,000
you know even smaller that that can not

1225
00:49:55,199 --> 00:50:00,960
be very much of anything really

1226
00:49:58,000 --> 00:50:01,838
so in here where this actually looks it

1227
00:50:00,960 --> 00:50:03,920
up we would need

1228
00:50:01,838 --> 00:50:05,519
a bigger table and then in here in

1229
00:50:03,920 --> 00:50:08,400
addition to the grid index

1230
00:50:05,519 --> 00:50:10,719
we would need the auxin index too and so

1231
00:50:08,400 --> 00:50:13,519
when we do this actual

1232
00:50:10,719 --> 00:50:15,838
initial grid index here what we need to

1233
00:50:13,519 --> 00:50:16,880
do for the octan index is we need the

1234
00:50:15,838 --> 00:50:19,519
remainder

1235
00:50:16,880 --> 00:50:20,000
right so we're gonna have to do like a

1236
00:50:19,519 --> 00:50:21,920
half

1237
00:50:20,000 --> 00:50:27,838
index we're gonna have to say like half

1238
00:50:21,920 --> 00:50:27,838
atlas index

1239
00:50:28,880 --> 00:50:33,039
like so um and then we're going to have

1240
00:50:31,358 --> 00:50:36,880
to actually do the

1241
00:50:33,039 --> 00:50:41,119
remainder so the remainder

1242
00:50:36,880 --> 00:50:44,640
um from that

1243
00:50:41,119 --> 00:50:45,599
is the atlas index minus the half atlas

1244
00:50:44,639 --> 00:50:48,480
index

1245
00:50:45,599 --> 00:50:54,640
times two right so this is how many we

1246
00:50:48,480 --> 00:50:59,199
had left over

1247
00:50:54,639 --> 00:50:59,199
now i don't know how we want to encode

1248
00:50:59,280 --> 00:51:06,319
this octant index

1249
00:51:03,280 --> 00:51:07,200
but presumably the easiest way would

1250
00:51:06,318 --> 00:51:09,838
just be to say

1251
00:51:07,199 --> 00:51:09,838
look

1252
00:51:11,440 --> 00:51:15,679
we're going to take the remaining x

1253
00:51:14,159 --> 00:51:17,358
which is either 0 1

1254
00:51:15,679 --> 00:51:23,838
we're going to add it to 2 times you

1255
00:51:17,358 --> 00:51:23,838
know or we can even do this

1256
00:51:25,358 --> 00:51:28,480
so we know the remainder is always zero

1257
00:51:27,920 --> 00:51:30,639
or one

1258
00:51:28,480 --> 00:51:32,880
we divided by two you can't have any

1259
00:51:30,639 --> 00:51:36,078
other remainder right

1260
00:51:32,880 --> 00:51:37,599
um and it was a positive value so once

1261
00:51:36,079 --> 00:51:40,240
we have this remainder we're just going

1262
00:51:37,599 --> 00:51:40,240
to say okay

1263
00:51:43,199 --> 00:51:55,118
x goes in that bit next bit up is y

1264
00:51:51,039 --> 00:51:55,119
next bit up is z right

1265
00:51:58,400 --> 00:52:03,440
so we can pretty easily you know decode

1266
00:52:00,719 --> 00:52:03,439
those values

1267
00:52:03,679 --> 00:52:09,679
and we can make this an actual

1268
00:52:07,519 --> 00:52:12,239
function so that it's you know not so

1269
00:52:09,679 --> 00:52:12,239
mysterious

1270
00:52:14,480 --> 00:52:18,800
uh and so here if we say like somebody

1271
00:52:17,280 --> 00:52:22,640
computed a remainder

1272
00:52:18,800 --> 00:52:23,920
somehow right and we want an octan index

1273
00:52:22,639 --> 00:52:27,759
from a remainder

1274
00:52:23,920 --> 00:52:29,280
well here it is

1275
00:52:27,760 --> 00:52:32,559
and again that's just so we don't have

1276
00:52:29,280 --> 00:52:35,519
to like have that

1277
00:52:32,559 --> 00:52:36,880
you know the way we decoded that we

1278
00:52:35,519 --> 00:52:37,519
don't want to strew that throughout the

1279
00:52:36,880 --> 00:52:39,119
code we'd

1280
00:52:37,519 --> 00:52:43,519
because what if we change it or you know

1281
00:52:39,119 --> 00:52:43,519
who knows what just also for clarity

1282
00:52:43,760 --> 00:52:49,200
okay uh so i think that's

1283
00:52:46,800 --> 00:52:50,960
really all we needed there uh and so now

1284
00:52:49,199 --> 00:52:55,679
the problem we have is this

1285
00:52:50,960 --> 00:52:57,679
um and we we don't actually have

1286
00:52:55,679 --> 00:53:00,558
uh these tables that we would actually

1287
00:52:57,679 --> 00:53:03,598
need so here's the letting solution

1288
00:53:00,559 --> 00:53:03,599
and what you can see

1289
00:53:03,760 --> 00:53:06,640
here on this uh

1290
00:53:07,440 --> 00:53:11,679
here on this light sampling walk table

1291
00:53:09,679 --> 00:53:14,000
um we kind of have a problem which is

1292
00:53:11,679 --> 00:53:16,239
that if we change this

1293
00:53:14,000 --> 00:53:17,838
we will break the loading because we

1294
00:53:16,239 --> 00:53:19,598
just flat saved it

1295
00:53:17,838 --> 00:53:22,558
so we may want to do is something like

1296
00:53:19,599 --> 00:53:26,079
this where we just push this down

1297
00:53:22,559 --> 00:53:26,880
here right because this stuff doesn't

1298
00:53:26,079 --> 00:53:31,039
have to

1299
00:53:26,880 --> 00:53:33,119
you know be changed or

1300
00:53:31,039 --> 00:53:34,558
it doesn't doesn't really affect us

1301
00:53:33,119 --> 00:53:37,920
right

1302
00:53:34,559 --> 00:53:37,920
so we'll just put a to-do in here

1303
00:53:41,358 --> 00:53:47,598
but that's basically what's going on

1304
00:53:44,800 --> 00:53:49,039
so in the light sampling walk table um

1305
00:53:47,599 --> 00:53:50,480
and in fact i guess i can just leave

1306
00:53:49,039 --> 00:53:53,599
this at the very end i mean

1307
00:53:50,480 --> 00:53:56,318
whatever uh

1308
00:53:53,599 --> 00:53:57,680
so we can now generate this in a way

1309
00:53:56,318 --> 00:53:59,199
that we say look we know there are eight

1310
00:53:57,679 --> 00:54:01,358
octants so we can generate each

1311
00:53:59,199 --> 00:54:05,039
individual octant for this thing

1312
00:54:01,358 --> 00:54:06,960
uh and off we go but our problem now is

1313
00:54:05,039 --> 00:54:09,519
well we're going to have to actually

1314
00:54:06,960 --> 00:54:10,800
compute that somehow and so when we do

1315
00:54:09,519 --> 00:54:12,960
compute walk table

1316
00:54:10,800 --> 00:54:14,400
you know we're going to have to uh take

1317
00:54:12,960 --> 00:54:17,679
into account

1318
00:54:14,400 --> 00:54:19,440
uh all of that stuff right so

1319
00:54:17,679 --> 00:54:20,719
if this is eight long and i guess

1320
00:54:19,440 --> 00:54:23,119
another way to look at it would

1321
00:54:20,719 --> 00:54:24,959
do this uh if we go to compute walk

1322
00:54:23,119 --> 00:54:28,318
table

1323
00:54:24,960 --> 00:54:31,280
like so let me say this thing returns

1324
00:54:28,318 --> 00:54:33,199
uh now like an array of pointers instead

1325
00:54:31,280 --> 00:54:35,040
of whatever and i don't know

1326
00:54:33,199 --> 00:54:36,798
this is getting kind of annoying now so

1327
00:54:35,039 --> 00:54:39,759
i feel like i want to stop doing that

1328
00:54:36,798 --> 00:54:44,480
like i would rather this thing just

1329
00:54:39,760 --> 00:54:44,480
did what it's going to do so

1330
00:54:45,119 --> 00:54:47,599
excuse me

1331
00:54:48,318 --> 00:54:52,079
so what i'd rather do here is say okay

1332
00:54:50,000 --> 00:54:55,199
the walk table entry maybe is a thing

1333
00:54:52,079 --> 00:54:55,680
that you know is taken as a dest so it

1334
00:54:55,199 --> 00:54:58,798
doesn't

1335
00:54:55,679 --> 00:54:58,798
you know write out that way

1336
00:55:04,838 --> 00:55:07,838
oops

1337
00:55:10,719 --> 00:55:14,399
where did my code go

1338
00:55:14,639 --> 00:55:18,879
well compiler will take me there in a

1339
00:55:16,559 --> 00:55:18,880
moment

1340
00:55:19,599 --> 00:55:25,680
there we go um so anyway if we

1341
00:55:22,719 --> 00:55:27,059
yeah just say hey uh go ahead and build

1342
00:55:25,679 --> 00:55:28,798
that i also don't know

1343
00:55:27,059 --> 00:55:31,838
[Music]

1344
00:55:28,798 --> 00:55:32,480
compute walk table fast let's get rid of

1345
00:55:31,838 --> 00:55:33,920
this

1346
00:55:32,480 --> 00:55:36,318
because we're not going to be using this

1347
00:55:33,920 --> 00:55:36,318
anymore

1348
00:55:39,280 --> 00:55:43,119
all right um

1349
00:55:45,679 --> 00:55:50,078
all right so then i think we're good uh

1350
00:55:47,920 --> 00:55:52,240
and now we just have to make sure that

1351
00:55:50,079 --> 00:55:54,160
uh you know we don't want to call

1352
00:55:52,239 --> 00:55:55,199
compute walktable fast anymore it's not

1353
00:55:54,159 --> 00:55:57,759
a thing we use

1354
00:55:55,199 --> 00:56:00,639
it was just some test code and we do

1355
00:55:57,760 --> 00:56:00,640
want to pass that in

1356
00:56:00,880 --> 00:56:07,039
i wish i had some more tea but i don't

1357
00:56:03,599 --> 00:56:07,039
uh so i think that's the end of it

1358
00:56:07,440 --> 00:56:13,599
yeah okay uh and so now what we need is

1359
00:56:11,519 --> 00:56:15,599
we need compute walk table to actually

1360
00:56:13,599 --> 00:56:19,200
generate

1361
00:56:15,599 --> 00:56:22,079
different versions of this table right

1362
00:56:19,199 --> 00:56:23,118
and what we want to do here is take a

1363
00:56:22,079 --> 00:56:31,839
look at that max

1364
00:56:23,119 --> 00:56:31,838
cost per ray so max cost per ray um

1365
00:56:32,079 --> 00:56:35,519
i mean i guess we don't have to care at

1366
00:56:33,358 --> 00:56:37,679
the moment i'll put it to do on it

1367
00:56:35,519 --> 00:56:37,679
but

1368
00:56:40,239 --> 00:56:45,838
in the past we were sending down

1369
00:56:48,000 --> 00:56:52,159
a much higher value than we should have

1370
00:56:50,400 --> 00:56:56,160
so we're sending down

1371
00:56:52,159 --> 00:56:58,399
16 and if we have the size

1372
00:56:56,159 --> 00:56:59,759
of the dimension the grid that should

1373
00:56:58,400 --> 00:57:03,200
shrink to eight

1374
00:56:59,760 --> 00:57:04,240
right um because we're no longer going

1375
00:57:03,199 --> 00:57:06,960
to need to

1376
00:57:04,239 --> 00:57:08,399
visit as many grid cells to get the same

1377
00:57:06,960 --> 00:57:11,679
distance

1378
00:57:08,400 --> 00:57:14,639
so i think that's probably pretty safe

1379
00:57:11,679 --> 00:57:16,960
to reduce so in here i would also say

1380
00:57:14,639 --> 00:57:16,960
okay

1381
00:57:18,719 --> 00:57:23,439
where we were setting that to 16 before

1382
00:57:24,838 --> 00:57:27,838
um

1383
00:57:31,199 --> 00:57:34,558
we can probably safely set that down to

1384
00:57:33,679 --> 00:57:36,960
eight and

1385
00:57:34,559 --> 00:57:38,000
for now i'll also inside our sort of

1386
00:57:36,960 --> 00:57:40,880
temporary code

1387
00:57:38,000 --> 00:57:41,838
inside hh light prof uh i'll do that as

1388
00:57:40,880 --> 00:57:44,160
well

1389
00:57:41,838 --> 00:57:44,159
right

1390
00:57:47,440 --> 00:57:52,318
so all that should be fine um and we can

1391
00:57:50,639 --> 00:57:55,759
you know drop the the number of grid

1392
00:57:52,318 --> 00:57:57,440
squares that you visit down

1393
00:57:55,760 --> 00:57:59,680
maybe i'll do it this way because i want

1394
00:57:57,440 --> 00:58:00,480
to just be clear that's temporary code

1395
00:57:59,679 --> 00:58:03,519
because

1396
00:58:00,480 --> 00:58:03,838
if we re build our test data that would

1397
00:58:03,519 --> 00:58:07,039
get

1398
00:58:03,838 --> 00:58:09,920
properly slip streamed in so

1399
00:58:07,039 --> 00:58:10,798
i think that's all we need there and

1400
00:58:09,920 --> 00:58:14,000
then inside

1401
00:58:10,798 --> 00:58:14,000
compute walk table

1402
00:58:15,599 --> 00:58:18,880
i just need some way of having compute

1403
00:58:17,679 --> 00:58:21,679
walk table

1404
00:58:18,880 --> 00:58:22,000
uh actually build the different octants

1405
00:58:21,679 --> 00:58:24,078
so

1406
00:58:22,000 --> 00:58:25,599
in here we would be writing to eight of

1407
00:58:24,079 --> 00:58:30,640
these

1408
00:58:25,599 --> 00:58:30,640
so each individual octant right

1409
00:58:30,719 --> 00:58:37,519
and if you look at

1410
00:58:34,639 --> 00:58:39,519
sort of how this code is structured what

1411
00:58:37,519 --> 00:58:41,358
you can see is it goes per sample

1412
00:58:39,519 --> 00:58:44,400
direction

1413
00:58:41,358 --> 00:58:45,440
and uh so in here where we do like this

1414
00:58:44,400 --> 00:58:48,000
push array

1415
00:58:45,440 --> 00:58:48,960
uh what i could probably just do is is

1416
00:58:48,000 --> 00:58:52,400
you know

1417
00:58:48,960 --> 00:58:54,720
something like this right um

1418
00:58:52,400 --> 00:58:56,318
where we just say okay like the dust

1419
00:58:54,719 --> 00:58:59,598
index i guess

1420
00:58:56,318 --> 00:58:59,599
uh is

1421
00:59:01,119 --> 00:59:04,880
well it's gonna be per so i guess i

1422
00:59:03,199 --> 00:59:06,558
don't i don't even really want to do

1423
00:59:04,880 --> 00:59:08,720
that right what we want to do is for

1424
00:59:06,559 --> 00:59:10,880
each sample index

1425
00:59:08,719 --> 00:59:12,399
no that's correct so for each one of

1426
00:59:10,880 --> 00:59:18,000
these i just want to go through

1427
00:59:12,400 --> 00:59:20,559
all of the octants so like you know

1428
00:59:18,000 --> 00:59:21,920
something like this uh and then we just

1429
00:59:20,559 --> 00:59:26,240
want to do

1430
00:59:21,920 --> 00:59:30,079
the the routine for that octant

1431
00:59:26,239 --> 00:59:34,558
and as far as i can imagine the only

1432
00:59:30,079 --> 00:59:34,559
difference here um

1433
00:59:34,719 --> 00:59:38,959
actually at all uh

1434
00:59:39,199 --> 00:59:43,439
so like the only change would just be

1435
00:59:41,199 --> 00:59:43,439
this

1436
00:59:43,838 --> 00:59:47,519
right like everything else is exactly

1437
00:59:46,639 --> 00:59:49,838
the same

1438
00:59:47,519 --> 00:59:52,318
the only difference is like the starting

1439
00:59:49,838 --> 00:59:52,318
values

1440
00:59:52,798 --> 00:59:56,719
so in one case it was going to be half

1441
00:59:55,679 --> 00:59:59,279
the cell dim

1442
00:59:56,719 --> 01:00:01,759
now it's going to be like 2 5 the cell

1443
00:59:59,280 --> 01:00:07,040
dim or seven five the cell dim

1444
01:00:01,760 --> 01:00:10,160
er in each dimension but that's the only

1445
01:00:07,039 --> 01:00:13,599
that's the only difference right

1446
01:00:10,159 --> 01:00:15,440
um and so you know this is a fairly

1447
01:00:13,599 --> 01:00:16,400
clean way to do this but it's a little

1448
01:00:15,440 --> 01:00:18,720
obtuse i

1449
01:00:16,400 --> 01:00:19,838
might just do the ridiculous version of

1450
01:00:18,719 --> 01:00:23,118
this where we just

1451
01:00:19,838 --> 01:00:23,599
said all right we actually loop over

1452
01:00:23,119 --> 01:00:29,280
each

1453
01:00:23,599 --> 01:00:31,838
kind um like so

1454
01:00:29,280 --> 01:00:33,040
like here's the different ones of these

1455
01:00:31,838 --> 01:00:36,960
we want

1456
01:00:33,039 --> 01:00:38,480
right and when we come down here and we

1457
01:00:36,960 --> 01:00:40,838
do this push array we're actually going

1458
01:00:38,480 --> 01:00:44,079
to have like this dust table

1459
01:00:40,838 --> 01:00:48,000
thing and i'm just going to say look

1460
01:00:44,079 --> 01:00:50,318
desk table equals dest

1461
01:00:48,000 --> 01:00:51,440
for whatever the octan index is and the

1462
01:00:50,318 --> 01:00:54,719
octan index

1463
01:00:51,440 --> 01:00:56,400
is just something we get from compute or

1464
01:00:54,719 --> 01:00:58,159
get octan index or whatever it is get

1465
01:00:56,400 --> 01:01:01,200
octant four

1466
01:00:58,159 --> 01:01:04,719
uh so it's basically uh

1467
01:01:01,199 --> 01:01:07,279
all we would do is say the remainder

1468
01:01:04,719 --> 01:01:09,519
is whatever we computed it to be right

1469
01:01:07,280 --> 01:01:14,079
so whatever one we're on

1470
01:01:09,519 --> 01:01:14,079
in this iteration we get that octane out

1471
01:01:17,519 --> 01:01:26,318
and that's it so you know

1472
01:01:21,119 --> 01:01:26,318
that seems fine and so at that point

1473
01:01:26,719 --> 01:01:32,558
if we know what this value is all right

1474
01:01:29,760 --> 01:01:34,240
and i can even put that here which is uh

1475
01:01:32,559 --> 01:01:36,640
sort of our

1476
01:01:34,239 --> 01:01:38,159
sub index or something i don't want to

1477
01:01:36,639 --> 01:01:40,239
call this it's not the octet index

1478
01:01:38,159 --> 01:01:42,318
because that's the thing we're actually

1479
01:01:40,239 --> 01:01:43,759
uh calling some things precise but this

1480
01:01:42,318 --> 01:01:45,599
is basically just our oh you know what

1481
01:01:43,760 --> 01:01:46,319
we call this the remainder which seems

1482
01:01:45,599 --> 01:01:49,200
good

1483
01:01:46,318 --> 01:01:51,039
let's call it that so if we have the

1484
01:01:49,199 --> 01:01:52,798
remainder

1485
01:01:51,039 --> 01:01:54,719
then we know what the starting location

1486
01:01:52,798 --> 01:01:57,759
would be uh for each of these

1487
01:01:54,719 --> 01:02:00,399
right inside the cell we would just have

1488
01:01:57,760 --> 01:02:04,559
the starting location worked out

1489
01:02:00,400 --> 01:02:08,720
uh to be uh 0.25 f

1490
01:02:04,559 --> 01:02:08,720
times seldim plus

1491
01:02:10,079 --> 01:02:13,440
half of the cell dim times that

1492
01:02:12,559 --> 01:02:17,039
remainder

1493
01:02:13,440 --> 01:02:20,480
right so if we just do the remainder

1494
01:02:17,039 --> 01:02:23,039
times the seldem like with the hadamard

1495
01:02:20,480 --> 01:02:26,480
product here

1496
01:02:23,039 --> 01:02:29,680
then off you go so

1497
01:02:26,480 --> 01:02:30,960
that's pretty straightforward and then

1498
01:02:29,679 --> 01:02:32,798
everything is the same

1499
01:02:30,960 --> 01:02:34,639
so that just computes eight tables

1500
01:02:32,798 --> 01:02:37,358
instead of one

1501
01:02:34,639 --> 01:02:38,960
and each table starts with an offset in

1502
01:02:37,358 --> 01:02:41,119
the octant

1503
01:02:38,960 --> 01:02:42,798
based on the remainder and everything

1504
01:02:41,119 --> 01:02:46,160
else would just work

1505
01:02:42,798 --> 01:02:48,239
now the problem is this code is going to

1506
01:02:46,159 --> 01:02:49,598
be hellish to debug

1507
01:02:48,239 --> 01:02:50,959
and the reason for that is the same

1508
01:02:49,599 --> 01:02:52,000
reason i always say i've said it a

1509
01:02:50,960 --> 01:02:54,480
billion times

1510
01:02:52,000 --> 01:02:57,679
i'll say it another billion times almost

1511
01:02:54,480 --> 01:02:59,039
all bugs come from index problems

1512
01:02:57,679 --> 01:03:01,358
all the other things that people always

1513
01:02:59,039 --> 01:03:03,039
say bugs come from are just i don't know

1514
01:03:01,358 --> 01:03:04,078
why because we never have those bugs and

1515
01:03:03,039 --> 01:03:05,920
i don't know you actually know how many

1516
01:03:04,079 --> 01:03:07,039
people ever have those bugs probably if

1517
01:03:05,920 --> 01:03:09,039
you're just sloppy you have them or

1518
01:03:07,039 --> 01:03:12,640
something

1519
01:03:09,039 --> 01:03:14,400
um but

1520
01:03:12,639 --> 01:03:17,440
when you have all of these different

1521
01:03:14,400 --> 01:03:19,039
indexing schemes

1522
01:03:17,440 --> 01:03:20,880
which pretty much only happens when

1523
01:03:19,039 --> 01:03:24,400
you're trying to write fast code

1524
01:03:20,880 --> 01:03:24,400
because otherwise you just use one

1525
01:03:25,280 --> 01:03:29,839
the mismatch between the indices and

1526
01:03:28,000 --> 01:03:30,880
like you computed would use the offs a

1527
01:03:29,838 --> 01:03:34,239
wrong offset here

1528
01:03:30,880 --> 01:03:35,680
this that there that is just the thing

1529
01:03:34,239 --> 01:03:39,199
that always produces

1530
01:03:35,679 --> 01:03:43,279
your bugs and again because we have

1531
01:03:39,199 --> 01:03:46,879
two spatially coincident but uh

1532
01:03:43,280 --> 01:03:49,680
effectively disparate grids uh

1533
01:03:46,880 --> 01:03:51,200
that mismatch is all you know the more

1534
01:03:49,679 --> 01:03:54,399
coordinate systems you have the more

1535
01:03:51,199 --> 01:03:54,399
bugs you have it's just

1536
01:03:54,880 --> 01:03:58,160
maybe it's just me but in my experience

1537
01:03:57,280 --> 01:04:00,400
that's like where

1538
01:03:58,159 --> 01:04:01,679
all the time spent debugging always

1539
01:04:00,400 --> 01:04:05,039
comes from like

1540
01:04:01,679 --> 01:04:06,399
miss thinking about um

1541
01:04:05,039 --> 01:04:08,000
mistakes and thinking about where

1542
01:04:06,400 --> 01:04:09,519
indices is or for getting an offset

1543
01:04:08,000 --> 01:04:10,960
somewhere for getting a divide get it

1544
01:04:09,519 --> 01:04:13,759
right like all that stuff

1545
01:04:10,960 --> 01:04:15,119
and so you try to make it as systematic

1546
01:04:13,760 --> 01:04:16,079
as possible when you go through it but

1547
01:04:15,119 --> 01:04:20,400
is there's always

1548
01:04:16,079 --> 01:04:23,440
kind of a a difficulty expressing these

1549
01:04:20,400 --> 01:04:25,440
things clearly in code

1550
01:04:23,440 --> 01:04:27,280
and a lot of times if you try to put

1551
01:04:25,440 --> 01:04:29,440
more structure in place you end up

1552
01:04:27,280 --> 01:04:31,039
actually obscuring it even more so like

1553
01:04:29,440 --> 01:04:32,639
it's a hard problem because there's not

1554
01:04:31,039 --> 01:04:36,559
a lot of good ways to attack it

1555
01:04:32,639 --> 01:04:41,038
in the languages that we have

1556
01:04:36,559 --> 01:04:42,559
so anyway um i don't really know that

1557
01:04:41,039 --> 01:04:44,559
there's that much more to do

1558
01:04:42,559 --> 01:04:47,119
besides just when we compute the walk

1559
01:04:44,559 --> 01:04:48,480
table uh we now need to return on the

1560
01:04:47,119 --> 01:04:51,599
part where we just

1561
01:04:48,480 --> 01:04:55,838
you know um

1562
01:04:51,599 --> 01:04:55,838
set up the corners

1563
01:04:56,719 --> 01:04:59,679
that may be it

1564
01:05:04,559 --> 01:05:07,839
i mean i i don't know but i'm thinking

1565
01:05:06,239 --> 01:05:08,879
about it like that that might have been

1566
01:05:07,838 --> 01:05:13,119
the complete

1567
01:05:08,880 --> 01:05:13,119
that might have been it um

1568
01:05:13,519 --> 01:05:16,639
i don't know if there's anything else

1569
01:05:14,639 --> 01:05:18,798
left to do um

1570
01:05:16,639 --> 01:05:20,078
so i think mostly now we're just to the

1571
01:05:18,798 --> 01:05:21,599
point of like now we've got to go

1572
01:05:20,079 --> 01:05:22,640
through and find out all the things we

1573
01:05:21,599 --> 01:05:25,200
did wrong

1574
01:05:22,639 --> 01:05:26,480
uh but but i think just in terms like

1575
01:05:25,199 --> 01:05:28,480
conceptually speaking

1576
01:05:26,480 --> 01:05:30,159
that's it right so now we just have to

1577
01:05:28,480 --> 01:05:33,358
go take care all the bugs that

1578
01:05:30,159 --> 01:05:36,879
that you know um got introduced

1579
01:05:33,358 --> 01:05:40,719
uh so let's start we'll look at

1580
01:05:36,880 --> 01:05:41,760
um oh uh so well for starters here's one

1581
01:05:40,719 --> 01:05:45,838
bug

1582
01:05:41,760 --> 01:05:45,839
i forgot to put that in place

1583
01:05:46,239 --> 01:05:50,639
um so let's just we'll take take him in

1584
01:05:48,639 --> 01:05:54,480
order we'll do crash bugs first

1585
01:05:50,639 --> 01:05:57,118
um doesn't look like we have any

1586
01:05:54,480 --> 01:05:58,400
um so now we're going to have to take a

1587
01:05:57,119 --> 01:06:01,680
look at just like

1588
01:05:58,400 --> 01:06:03,519
errors first i guess like actual errors

1589
01:06:01,679 --> 01:06:05,358
let's take a look at what the perf is on

1590
01:06:03,519 --> 01:06:06,239
it since i have no idea what to expect

1591
01:06:05,358 --> 01:06:09,838
here

1592
01:06:06,239 --> 01:06:11,358
um i don't know like

1593
01:06:09,838 --> 01:06:12,639
again until we get it debugged we don't

1594
01:06:11,358 --> 01:06:13,759
even really know what this number would

1595
01:06:12,639 --> 01:06:17,358
mean

1596
01:06:13,760 --> 01:06:21,200
um where is my

1597
01:06:17,358 --> 01:06:23,038
there it is um so again like i hope that

1598
01:06:21,199 --> 01:06:24,000
box count distribution is accurate i

1599
01:06:23,039 --> 01:06:27,200
don't know

1600
01:06:24,000 --> 01:06:30,239
um but we'll see so

1601
01:06:27,199 --> 01:06:32,399
this 4.22 that's like better than we've

1602
01:06:30,239 --> 01:06:33,439
had before certainly like significantly

1603
01:06:32,400 --> 01:06:36,079
better um

1604
01:06:33,440 --> 01:06:37,838
than we've had before like 4.5 was where

1605
01:06:36,079 --> 01:06:41,359
we were at before

1606
01:06:37,838 --> 01:06:43,759
um so that's a good sign anyway but

1607
01:06:41,358 --> 01:06:45,519
again we don't know anything about that

1608
01:06:43,760 --> 01:06:47,119
we don't have any idea like this is

1609
01:06:45,519 --> 01:06:47,440
probably just totally wrong and if we

1610
01:06:47,119 --> 01:06:50,160
run

1611
01:06:47,440 --> 01:06:51,358
this in the game i'm assuming we'll just

1612
01:06:50,159 --> 01:06:53,038
have garbage

1613
01:06:51,358 --> 01:06:55,759
yeah so you can see like there's nothing

1614
01:06:53,039 --> 01:06:55,760
happening right

1615
01:06:55,920 --> 01:06:59,119
so we need to go through now and and

1616
01:06:58,000 --> 01:07:02,000
find out like

1617
01:06:59,119 --> 01:07:03,358
where all the problems are here with

1618
01:07:02,000 --> 01:07:06,639
what's going on

1619
01:07:03,358 --> 01:07:09,838
and you know we may

1620
01:07:06,639 --> 01:07:14,000
need to postpone that mostly until

1621
01:07:09,838 --> 01:07:16,480
tomorrow at this point i would say that

1622
01:07:14,000 --> 01:07:19,039
you know it may also be a good time to

1623
01:07:16,480 --> 01:07:19,039
kind of like

1624
01:07:19,440 --> 01:07:22,880
you know start to pull some of the stuff

1625
01:07:21,119 --> 01:07:24,318
out from the lighting code that that we

1626
01:07:22,880 --> 01:07:26,000
know we're not going to use anymore like

1627
01:07:24,318 --> 01:07:27,599
the grid raycaster is obviously much

1628
01:07:26,000 --> 01:07:32,159
faster

1629
01:07:27,599 --> 01:07:34,079
than the aab caster now um

1630
01:07:32,159 --> 01:07:36,000
and we've i'm pretty confident we can

1631
01:07:34,079 --> 01:07:38,160
continue to improve the speed so i don't

1632
01:07:36,000 --> 01:07:41,199
know that we still need that in there so

1633
01:07:38,159 --> 01:07:44,000
you know pulling out the the

1634
01:07:41,199 --> 01:07:45,598
a b tester and and streamlining things

1635
01:07:44,000 --> 01:07:47,679
more might be a good thing to do

1636
01:07:45,599 --> 01:07:49,838
uh i guess did we already do some of

1637
01:07:47,679 --> 01:07:53,679
that though i i don't actually know

1638
01:07:49,838 --> 01:07:55,119
uh i i don't remember like what stuff

1639
01:07:53,679 --> 01:07:58,480
we've actually done

1640
01:07:55,119 --> 01:08:00,000
i think we did that right yeah um

1641
01:07:58,480 --> 01:08:01,679
so we've already done that so actually i

1642
01:08:00,000 --> 01:08:11,838
don't even know like why is this defined

1643
01:08:01,679 --> 01:08:11,838
still here

1644
01:08:12,079 --> 01:08:15,599
yeah not sure what the point of that was

1645
01:08:14,880 --> 01:08:18,640
um

1646
01:08:15,599 --> 01:08:20,560
so anyway like hopefully we can start to

1647
01:08:18,640 --> 01:08:22,000
streamline some this some more too and

1648
01:08:20,560 --> 01:08:22,960
and just simplify it down from where it

1649
01:08:22,000 --> 01:08:26,319
is because it's

1650
01:08:22,960 --> 01:08:27,838
it's still quite complicated um

1651
01:08:26,319 --> 01:08:29,359
and there's probably more stuff we could

1652
01:08:27,838 --> 01:08:30,238
do here to make it a little bit simpler

1653
01:08:29,359 --> 01:08:33,600
but

1654
01:08:30,238 --> 01:08:35,838
uh in terms of like yeah in

1655
01:08:33,600 --> 01:08:37,039
just in just in terms of what actual

1656
01:08:35,838 --> 01:08:38,960
test code is in here

1657
01:08:37,039 --> 01:08:40,158
so we can also pull out some of these

1658
01:08:38,960 --> 01:08:41,920
other things we've got this

1659
01:08:40,158 --> 01:08:44,158
you know and we can all we can go look

1660
01:08:41,920 --> 01:08:44,880
at the the code for compute table fast

1661
01:08:44,158 --> 01:08:47,278
later as well

1662
01:08:44,880 --> 01:08:48,560
uh you know we've got it saved in the

1663
01:08:47,279 --> 01:08:50,239
previous versions of the code so i don't

1664
01:08:48,560 --> 01:08:51,279
really need that anymore

1665
01:08:50,238 --> 01:08:52,798
we can also get rid of some of the

1666
01:08:51,279 --> 01:08:54,239
things like the test sphere and stuff

1667
01:08:52,798 --> 01:08:55,278
like we're not using any of that stuff

1668
01:08:54,238 --> 01:08:57,039
anymore

1669
01:08:55,279 --> 01:08:58,799
and we would have to rewrite it probably

1670
01:08:57,039 --> 01:09:00,560
if we were going to do

1671
01:08:58,798 --> 01:09:02,319
any kind of real testing with it so that

1672
01:09:00,560 --> 01:09:03,039
stuff i think can also be kind of pulled

1673
01:09:02,319 --> 01:09:05,039
out of there

1674
01:09:03,039 --> 01:09:06,560
um which i don't know if we did that

1675
01:09:05,039 --> 01:09:10,079
already either

1676
01:09:06,560 --> 01:09:12,159
uh but like there's let's see internal

1677
01:09:10,079 --> 01:09:14,640
lending core build a few slide maps

1678
01:09:12,158 --> 01:09:16,000
the the radiance pack and and binaural

1679
01:09:14,640 --> 01:09:16,960
to normal those we don't use right now

1680
01:09:16,000 --> 01:09:18,158
but i think we will so

1681
01:09:16,960 --> 01:09:19,198
i'll probably leave those in there just

1682
01:09:18,158 --> 01:09:21,838
because we'll probably have to use them

1683
01:09:19,198 --> 01:09:21,838
eventually

1684
01:09:29,039 --> 01:09:32,319
so you can see tests here and here we

1685
01:09:31,198 --> 01:09:37,358
don't really

1686
01:09:32,319 --> 01:09:37,359
want that anymore either

1687
01:09:37,838 --> 01:09:41,600
looks like this is some kind of a

1688
01:09:41,920 --> 01:09:45,520
drawing code we left in here

1689
01:09:46,079 --> 01:09:50,000
just to show where things where we were

1690
01:09:48,399 --> 01:09:51,679
in the voxel which we don't really need

1691
01:09:50,000 --> 01:09:55,760
at the moment

1692
01:09:51,679 --> 01:09:58,800
um so that's all fine

1693
01:09:55,760 --> 01:09:58,800
test sphere can go

1694
01:10:00,840 --> 01:10:03,840
um

1695
01:10:05,039 --> 01:10:11,119
and that all seems fine uh

1696
01:10:08,079 --> 01:10:11,600
so again yeah like just slowly trying to

1697
01:10:11,119 --> 01:10:13,439
build

1698
01:10:11,600 --> 01:10:14,960
bring this code which is pr like

1699
01:10:13,439 --> 01:10:16,000
probably the most complicated code we

1700
01:10:14,960 --> 01:10:18,560
have in the entire game

1701
01:10:16,000 --> 01:10:20,000
right just trying to like bring it as

1702
01:10:18,560 --> 01:10:21,679
much in line as possible

1703
01:10:20,000 --> 01:10:24,880
and we'll try to do one more pass over

1704
01:10:21,679 --> 01:10:24,880
it after we're done

1705
01:10:25,119 --> 01:10:29,039
uh but anyway we we now want to know

1706
01:10:28,319 --> 01:10:31,599
like okay

1707
01:10:29,039 --> 01:10:32,800
so what is going on here why are we

1708
01:10:31,600 --> 01:10:35,199
getting no

1709
01:10:32,800 --> 01:10:36,640
uh why are we getting no output like

1710
01:10:35,198 --> 01:10:39,919
what's actually happening

1711
01:10:36,640 --> 01:10:43,280
so maybe i guess we'll just step through

1712
01:10:39,920 --> 01:10:47,520
um in hh light prof and we'll

1713
01:10:43,279 --> 01:10:52,238
see what the actual difference is

1714
01:10:47,520 --> 01:10:59,840
so in hh light prof if i

1715
01:10:52,238 --> 01:10:59,839
turn off optimizations

1716
01:10:59,920 --> 01:11:05,520
uh and i step into grid raycast i should

1717
01:11:02,079 --> 01:11:05,519
be able to take a look at some of these

1718
01:11:10,840 --> 01:11:13,840
things

1719
01:11:15,439 --> 01:11:18,639
so my first question is you know how do

1720
01:11:17,600 --> 01:11:21,199
these things look

1721
01:11:18,640 --> 01:11:22,320
uh do they make sense you know what's

1722
01:11:21,198 --> 01:11:27,839
going on

1723
01:11:22,319 --> 01:11:27,840
so let's take a look at some of these

1724
01:11:28,319 --> 01:11:31,920
so here's you know just some of the

1725
01:11:30,560 --> 01:11:33,760
entries into the

1726
01:11:31,920 --> 01:11:36,000
walk table let's just see what they look

1727
01:11:33,760 --> 01:11:36,000
like

1728
01:11:38,800 --> 01:11:44,800
i mean they seem pretty placid

1729
01:11:42,238 --> 01:11:47,759
you know those are just grid steps right

1730
01:11:44,800 --> 01:11:47,760
basic grid steps

1731
01:11:47,840 --> 01:11:58,239
exactly what you would expect um

1732
01:11:55,840 --> 01:11:59,360
you know i mean there's there's nothing

1733
01:11:58,238 --> 01:12:01,519
weird

1734
01:11:59,359 --> 01:12:03,439
that's that's pretty straightforward

1735
01:12:01,520 --> 01:12:06,480
right

1736
01:12:03,439 --> 01:12:10,079
so let's take a look too at some of the

1737
01:12:06,479 --> 01:12:10,079
other computations here so like

1738
01:12:10,640 --> 01:12:14,320
if you take a look at the initial grid

1739
01:12:11,920 --> 01:12:14,319
index

1740
01:12:16,158 --> 01:12:22,319
and the octan index right

1741
01:12:20,079 --> 01:12:25,198
as i run through here we should get like

1742
01:12:22,319 --> 01:12:25,198
different octants

1743
01:12:33,439 --> 01:12:37,678
and to be completely honest i guess

1744
01:12:35,520 --> 01:12:40,640
that's not exactly the pattern that i

1745
01:12:37,679 --> 01:12:40,640
would have expected

1746
01:12:46,960 --> 01:12:50,560
so i guess i can see why though so the

1747
01:12:49,119 --> 01:12:54,719
reason for that is because

1748
01:12:50,560 --> 01:12:58,480
since we're going uh in sheets

1749
01:12:54,719 --> 01:13:00,640
you would only get uh alternating

1750
01:12:58,479 --> 01:13:02,319
right because if you look at how full

1751
01:13:00,640 --> 01:13:04,880
cast works

1752
01:13:02,319 --> 01:13:06,158
i should i should say compute lighting

1753
01:13:04,880 --> 01:13:09,359
so you can see it steps in

1754
01:13:06,158 --> 01:13:11,359
z x so you'd expect to see zero one zero

1755
01:13:09,359 --> 01:13:13,679
one zero one zero one zero right

1756
01:13:11,359 --> 01:13:15,759
and then you would expect to see like

1757
01:13:13,679 --> 01:13:18,319
four five four five four five four five

1758
01:13:15,760 --> 01:13:19,280
right um and that is what we get so that

1759
01:13:18,319 --> 01:13:22,960
that does seem

1760
01:13:19,279 --> 01:13:26,319
actually that does seem correct uh so

1761
01:13:22,960 --> 01:13:28,239
no real complaints there

1762
01:13:26,319 --> 01:13:32,319
um let me take a look at the spatial

1763
01:13:28,238 --> 01:13:34,639
grid in general

1764
01:13:32,319 --> 01:13:34,639
oops

1765
01:13:38,079 --> 01:13:42,238
i'm just curious about some of these

1766
01:13:39,760 --> 01:13:42,239
values

1767
01:13:44,640 --> 01:14:01,840
uh that seems fair

1768
01:13:48,238 --> 01:14:01,839
kind of what we would expect um

1769
01:14:08,079 --> 01:14:11,119
again really just don't see anything

1770
01:14:10,158 --> 01:14:14,719
weird here

1771
01:14:11,119 --> 01:14:16,960
this all seems placid

1772
01:14:14,719 --> 01:14:16,960
right

1773
01:14:17,760 --> 01:14:20,079
um

1774
01:14:20,800 --> 01:14:25,760
so to be completely honest i'm not sure

1775
01:14:23,119 --> 01:14:29,439
where the trouble is coming in i

1776
01:14:25,760 --> 01:14:34,640
i would have liked you know for for

1777
01:14:29,439 --> 01:14:36,319
my ease of not having to do much work

1778
01:14:34,640 --> 01:14:38,000
i would have preferred to see something

1779
01:14:36,319 --> 01:14:41,439
more blatantly wrong

1780
01:14:38,000 --> 01:14:43,198
right but this looks subtle

1781
01:14:41,439 --> 01:14:44,879
i don't see anything obviously weird

1782
01:14:43,198 --> 01:14:45,839
right so we're going to look up into the

1783
01:14:44,880 --> 01:14:48,719
walk table

1784
01:14:45,840 --> 01:14:50,480
here you can see that happening and

1785
01:14:48,719 --> 01:14:52,480
we're just going to take a look

1786
01:14:50,479 --> 01:14:54,718
at you know what we end up with here in

1787
01:14:52,479 --> 01:14:56,879
terms of

1788
01:14:54,719 --> 01:14:59,439
oh all this this needs to go away by the

1789
01:14:56,880 --> 01:14:59,440
way like

1790
01:15:02,800 --> 01:15:07,039
so the raid dim index that stuff sorry

1791
01:15:05,679 --> 01:15:08,000
we got to get we got to pull some of

1792
01:15:07,039 --> 01:15:08,880
this stuff out i don't want to be

1793
01:15:08,000 --> 01:15:11,520
stepping through this

1794
01:15:08,880 --> 01:15:12,719
code also we don't need like a bunch of

1795
01:15:11,520 --> 01:15:16,400
these values

1796
01:15:12,719 --> 01:15:18,480
right so in terms of the stuff that's in

1797
01:15:16,399 --> 01:15:20,399
here we don't need the t

1798
01:15:18,479 --> 01:15:22,399
values anymore those don't have to be

1799
01:15:20,399 --> 01:15:23,439
here because we're not doing that

1800
01:15:22,399 --> 01:15:25,519
so just get them out of the way so

1801
01:15:23,439 --> 01:15:27,198
they're not cluttering things up

1802
01:15:25,520 --> 01:15:29,760
similarly none of this stuff has to be

1803
01:15:27,198 --> 01:15:32,399
here that's all gone

1804
01:15:29,760 --> 01:15:39,840
uh and i also think these don't have to

1805
01:15:32,399 --> 01:15:39,839
be here

1806
01:15:41,119 --> 01:15:54,880
like infrared pacts

1807
01:15:52,960 --> 01:15:56,560
uh so a bunch of that stuff just isn't

1808
01:15:54,880 --> 01:16:00,640
relevant anymore

1809
01:15:56,560 --> 01:16:03,440
um i don't know if sign ray d

1810
01:16:00,640 --> 01:16:03,440
needs to be here

1811
01:16:04,319 --> 01:16:09,279
it does all right so just pulling some

1812
01:16:08,000 --> 01:16:11,840
of that stuff out so i don't have to

1813
01:16:09,279 --> 01:16:11,840
deal with it

1814
01:16:12,800 --> 01:16:17,279
oops and off we go

1815
01:16:18,479 --> 01:16:25,759
so let's see uh

1816
01:16:22,399 --> 01:16:35,839
i need to step in that just ran

1817
01:16:25,760 --> 01:16:35,840
it ran away from me

1818
01:16:42,800 --> 01:16:49,840
so we are doing tests

1819
01:16:55,679 --> 01:16:59,359
a lot of those tests have nothing in

1820
01:16:58,000 --> 01:17:02,800
them but that's what we would expect

1821
01:16:59,359 --> 01:17:06,000
because it's a very sparse system

1822
01:17:02,800 --> 01:17:06,000
that's just kind of the way it is

1823
01:17:06,079 --> 01:17:11,760
so i guess one thing i'm not 100 sure

1824
01:17:10,000 --> 01:17:16,000
about is i guess we don't really know

1825
01:17:11,760 --> 01:17:18,159
that it's broken

1826
01:17:16,000 --> 01:17:22,158
[Music]

1827
01:17:18,158 --> 01:17:23,599
all right um so let's

1828
01:17:22,158 --> 01:17:31,839
i guess let's take a look at what

1829
01:17:23,600 --> 01:17:31,840
happens if i weld it back in

1830
01:17:32,880 --> 01:17:36,079
uh so if you look at how this stuff's

1831
01:17:34,640 --> 01:17:39,920
working here

1832
01:17:36,079 --> 01:17:40,399
uh again like this this is kind of ugly

1833
01:17:39,920 --> 01:17:42,239
and

1834
01:17:40,399 --> 01:17:44,960
and i don't really love it so when we do

1835
01:17:42,238 --> 01:17:46,559
our voxel dim here

1836
01:17:44,960 --> 01:17:48,239
again what i want to do is when we

1837
01:17:46,560 --> 01:17:50,000
create this spatial grid and we have the

1838
01:17:48,238 --> 01:17:51,119
spatial cell count the atlas cell count

1839
01:17:50,000 --> 01:17:53,679
and all this garbage

1840
01:17:51,119 --> 01:17:55,119
so we need this stuff to be computed

1841
01:17:53,679 --> 01:17:58,158
differently

1842
01:17:55,119 --> 01:18:01,599
so i would want to do this

1843
01:17:58,158 --> 01:18:03,359
for starters right and then when we do

1844
01:18:01,600 --> 01:18:04,960
the voxel dim i would want to do this

1845
01:18:03,359 --> 01:18:09,039
right so there's basically like a

1846
01:18:04,960 --> 01:18:09,039
multiplier ratio there on each of those

1847
01:18:10,960 --> 01:18:14,960
and that part's pretty straightforward

1848
01:18:13,840 --> 01:18:17,119
but

1849
01:18:14,960 --> 01:18:17,119
the

1850
01:18:20,880 --> 01:18:26,480
the rest of this so down here i think

1851
01:18:23,359 --> 01:18:30,880
this just wants to do

1852
01:18:26,479 --> 01:18:34,399
a subtraction for the spatial min corner

1853
01:18:30,880 --> 01:18:35,760
i think it just wants to do whatever the

1854
01:18:34,399 --> 01:18:40,238
atlas

1855
01:18:35,760 --> 01:18:44,480
spatial uh

1856
01:18:40,238 --> 01:18:46,079
whatever the spatial grids cell dim is

1857
01:18:44,479 --> 01:18:48,079
it just wants to be one cell because

1858
01:18:46,079 --> 01:18:50,238
it's always one cell all the way around

1859
01:18:48,079 --> 01:18:51,920
right so i think it really that is the

1860
01:18:50,238 --> 01:18:55,839
way that wants to be phrased because it

1861
01:18:51,920 --> 01:18:55,840
always has a one cell apron

1862
01:19:15,679 --> 01:19:20,480
so i think that always wants to be

1863
01:19:17,359 --> 01:19:23,839
adjusted um

1864
01:19:20,479 --> 01:19:26,959
that way and then when we actually

1865
01:19:23,840 --> 01:19:31,119
do the flat index from

1866
01:19:26,960 --> 01:19:34,480
part of things uh over in full cast

1867
01:19:31,119 --> 01:19:35,439
that part's a little squinky but when we

1868
01:19:34,479 --> 01:19:38,959
do this

1869
01:19:35,439 --> 01:19:42,158
and we do this uh atlas

1870
01:19:38,960 --> 01:19:44,800
to spatial grid uh index offset

1871
01:19:42,158 --> 01:19:45,198
um that's still gonna be one all the way

1872
01:19:44,800 --> 01:19:47,920
around

1873
01:19:45,198 --> 01:19:49,198
right so i think that's the only

1874
01:19:47,920 --> 01:19:51,840
patching we would need to do

1875
01:19:49,198 --> 01:19:51,839
to run it in the game

1876
01:19:52,399 --> 01:19:54,799
i think

1877
01:19:56,158 --> 01:20:03,279
don't quote me on that um and so

1878
01:20:00,000 --> 01:20:06,880
i'm not really 100 certain oh so okay so

1879
01:20:03,279 --> 01:20:09,840
it turns out it maybe just works

1880
01:20:06,880 --> 01:20:12,960
so when we actually did the patching to

1881
01:20:09,840 --> 01:20:15,520
line the grid up properly in the game

1882
01:20:12,960 --> 01:20:17,359
it just worked so maybe there wasn't

1883
01:20:15,520 --> 01:20:21,120
anything wrong with it

1884
01:20:17,359 --> 01:20:21,119
and i just thought there was gonna be

1885
01:20:21,359 --> 01:20:27,759
um so that's fine uh and

1886
01:20:24,639 --> 01:20:29,359
i think again like we don't really know

1887
01:20:27,760 --> 01:20:30,719
exactly if we still got bugs because

1888
01:20:29,359 --> 01:20:32,238
we're kind of just playing it fast and

1889
01:20:30,719 --> 01:20:33,920
loose as we march down the optimization

1890
01:20:32,238 --> 01:20:35,119
curve we're going to have to sort of go

1891
01:20:33,920 --> 01:20:38,880
through and do

1892
01:20:35,119 --> 01:20:41,760
that sort of final pass on things but

1893
01:20:38,880 --> 01:20:41,760
taking a look at it

1894
01:20:42,560 --> 01:20:49,280
in terms of our current speed again

1895
01:20:46,319 --> 01:20:49,840
constant forward march of progress we've

1896
01:20:49,279 --> 01:20:53,039
gotten

1897
01:20:49,840 --> 01:20:56,400
again down a little bit lower

1898
01:20:53,039 --> 01:20:58,719
now one of the problems here is

1899
01:20:56,399 --> 01:20:59,759
again i'm not really sure how far we're

1900
01:20:58,719 --> 01:21:01,600
approaching

1901
01:20:59,760 --> 01:21:04,079
so this is with the larger grid size

1902
01:21:01,600 --> 01:21:07,120
right i'm not sure

1903
01:21:04,079 --> 01:21:09,039
i'm still even not sure if that's i mean

1904
01:21:07,119 --> 01:21:12,559
for all we know we want to be even

1905
01:21:09,039 --> 01:21:14,319
bigger than that right um

1906
01:21:12,560 --> 01:21:16,320
and so you know you could imagine going

1907
01:21:14,319 --> 01:21:20,079
up uh

1908
01:21:16,319 --> 01:21:22,238
one more to nine you could imagine going

1909
01:21:20,079 --> 01:21:25,679
up to 16.

1910
01:21:22,238 --> 01:21:29,198
um well it's not 16 is it 64

1911
01:21:25,679 --> 01:21:30,399
right um so you could imagine continuing

1912
01:21:29,198 --> 01:21:33,119
to

1913
01:21:30,399 --> 01:21:35,279
make it more and more ridiculous but at

1914
01:21:33,119 --> 01:21:37,920
least now we can see that like

1915
01:21:35,279 --> 01:21:38,800
okay we have very few splits now which

1916
01:21:37,920 --> 01:21:41,840
is good

1917
01:21:38,800 --> 01:21:42,239
um and we just have a lot more that are

1918
01:21:41,840 --> 01:21:45,039
there's

1919
01:21:42,238 --> 01:21:47,119
that are you know gonna actually utilize

1920
01:21:45,039 --> 01:21:49,840
that loop

1921
01:21:47,119 --> 01:21:50,158
and that's positive thing too so that's

1922
01:21:49,840 --> 01:21:52,159
just

1923
01:21:50,158 --> 01:21:54,479
looking better right that's looking

1924
01:21:52,158 --> 01:21:56,238
significantly better

1925
01:21:54,479 --> 01:21:58,158
so what i'd like to do now is really

1926
01:21:56,238 --> 01:22:00,000
quickly just take a look at what happens

1927
01:21:58,158 --> 01:22:00,719
again if we run the testing without

1928
01:22:00,000 --> 01:22:03,520
doing the

1929
01:22:00,719 --> 01:22:04,960
the sort of uh post you know the

1930
01:22:03,520 --> 01:22:06,400
postcode i'm also going to take a

1931
01:22:04,960 --> 01:22:08,239
snapshot of this

1932
01:22:06,399 --> 01:22:11,839
so in the lighting code here where we've

1933
01:22:08,238 --> 01:22:11,839
got our little timings here

1934
01:22:20,079 --> 01:22:23,840
so that's down more around let's call it

1935
01:22:22,319 --> 01:22:27,359
4.3

1936
01:22:23,840 --> 01:22:27,360
ish i mean

1937
01:22:28,158 --> 01:22:31,198
these are not precise numbers so i don't

1938
01:22:29,600 --> 01:22:32,800
know why i've been placing them in there

1939
01:22:31,198 --> 01:22:34,879
but oh well

1940
01:22:32,800 --> 01:22:36,840
so the 2x facial grid size got us down

1941
01:22:34,880 --> 01:22:39,600
further again

1942
01:22:36,840 --> 01:22:42,000
um but what i would like to know

1943
01:22:39,600 --> 01:22:43,760
is what happens if you know we don't do

1944
01:22:42,000 --> 01:22:46,719
any raycrafting

1945
01:22:43,760 --> 01:22:48,320
right how long does this take so in the

1946
01:22:46,719 --> 01:22:51,359
lighting code

1947
01:22:48,319 --> 01:22:54,079
again if i just say look

1948
01:22:51,359 --> 01:22:55,279
suppose we we don't bother with any of

1949
01:22:54,079 --> 01:22:57,920
the stuff that you were going to do

1950
01:22:55,279 --> 01:22:57,920
afterward

1951
01:22:58,880 --> 01:23:07,840
which i guess is

1952
01:23:09,600 --> 01:23:14,960
so right here like let's just suppose we

1953
01:23:12,479 --> 01:23:17,359
just don't do this code

1954
01:23:14,960 --> 01:23:18,319
right so we didn't have to do any of the

1955
01:23:17,359 --> 01:23:21,839
casting

1956
01:23:18,319 --> 01:23:21,840
at all

1957
01:23:26,960 --> 01:23:34,079
so that's 1.02 right

1958
01:23:30,000 --> 01:23:35,600
um so we now know that we have a

1959
01:23:34,079 --> 01:23:37,679
headroom and that's better

1960
01:23:35,600 --> 01:23:39,920
uh which i guess i'm not really sure why

1961
01:23:37,679 --> 01:23:39,920
but

1962
01:23:40,639 --> 01:23:42,960
right because that's a little bit

1963
01:23:41,840 --> 01:23:46,480
different than what you take before that

1964
01:23:42,960 --> 01:23:46,480
could easily be within variance

1965
01:23:46,840 --> 01:23:49,840
right

1966
01:23:51,840 --> 01:23:54,800
that's not particularly variant so i

1967
01:23:53,679 --> 01:23:55,840
don't know we might have improved some

1968
01:23:54,800 --> 01:23:57,600
things who knows

1969
01:23:55,840 --> 01:23:58,880
right maybe this oh you know it's

1970
01:23:57,600 --> 01:23:59,760
probably the spatial build getting

1971
01:23:58,880 --> 01:24:04,400
faster

1972
01:23:59,760 --> 01:24:07,039
right um so it's getting better

1973
01:24:04,399 --> 01:24:07,679
and if we look at the difference between

1974
01:24:07,039 --> 01:24:10,880
those two

1975
01:24:07,679 --> 01:24:14,000
we've only got 3.2

1976
01:24:10,880 --> 01:24:14,960
uh seconds worth of delta between doing

1977
01:24:14,000 --> 01:24:18,479
nothing so

1978
01:24:14,960 --> 01:24:20,239
the the grid raycast now uh is quite a

1979
01:24:18,479 --> 01:24:23,439
bit faster than it was

1980
01:24:20,238 --> 01:24:24,638
um when we started certainly

1981
01:24:23,439 --> 01:24:26,719
if you took a look at the difference

1982
01:24:24,639 --> 01:24:30,639
between these two things

1983
01:24:26,719 --> 01:24:33,198
we were at 7.2 so

1984
01:24:30,639 --> 01:24:33,199
where's our

1985
01:24:38,399 --> 01:24:46,559
there we go um so we were at

1986
01:24:41,719 --> 01:24:49,359
7.2 seconds or 7.3 seconds

1987
01:24:46,560 --> 01:24:50,639
right and we know that 1.2 of those

1988
01:24:49,359 --> 01:24:53,279
seconds

1989
01:24:50,639 --> 01:24:55,359
is just the preamble stuff so if we're

1990
01:24:53,279 --> 01:24:57,439
talking about 6.1 seconds and now we've

1991
01:24:55,359 --> 01:25:00,559
got ourselves down

1992
01:24:57,439 --> 01:25:00,559
to 4.2

1993
01:25:00,960 --> 01:25:04,960
so we've doubled the speed of the

1994
01:25:03,198 --> 01:25:08,638
raycaster

1995
01:25:04,960 --> 01:25:11,439
roughly speaking and

1996
01:25:08,639 --> 01:25:11,440
that seems good

1997
01:25:11,679 --> 01:25:14,880
i don't know how long the spatial

1998
01:25:13,198 --> 01:25:18,319
partition build uh

1999
01:25:14,880 --> 01:25:22,319
takes so i might say like

2000
01:25:18,319 --> 01:25:22,319
build this so

2001
01:25:24,238 --> 01:25:27,839
if we just don't do this

2002
01:25:28,560 --> 01:25:30,800
right

2003
01:25:37,600 --> 01:25:40,719
so i guess the problem there is someone

2004
01:25:39,198 --> 01:25:44,158
still accesses it

2005
01:25:40,719 --> 01:25:46,639
i'm not sure why um

2006
01:25:44,158 --> 01:25:48,960
because we're not creating it oh well

2007
01:25:46,639 --> 01:25:55,840
you know who is

2008
01:25:48,960 --> 01:25:55,840
uh it's this saucy salamander

2009
01:25:57,359 --> 01:25:59,759
right here

2010
01:26:05,119 --> 01:26:09,679
right because that does actually access

2011
01:26:08,079 --> 01:26:11,198
it to do the testing for

2012
01:26:09,679 --> 01:26:13,679
whether or not you start at it out

2013
01:26:11,198 --> 01:26:15,599
inside the grid

2014
01:26:13,679 --> 01:26:18,800
oh well i was hoping i could just kind

2015
01:26:15,600 --> 01:26:21,760
of nerf that computation entirely

2016
01:26:18,800 --> 01:26:25,039
well that's okay i suppose actually let

2017
01:26:21,760 --> 01:26:25,039
me just back it out like this

2018
01:26:25,760 --> 01:26:30,639
if i want to uh not

2019
01:26:28,960 --> 01:26:32,079
if i want to get rid of the cost of

2020
01:26:30,639 --> 01:26:32,800
building the spatial partition what i

2021
01:26:32,079 --> 01:26:37,840
could do

2022
01:26:32,800 --> 01:26:37,840
is just say um

2023
01:26:40,800 --> 01:26:48,320
when we do these

2024
01:26:44,399 --> 01:26:52,879
just don't do any computations in here

2025
01:26:48,319 --> 01:26:52,880
so all of this code can go away

2026
01:27:00,158 --> 01:27:04,799
maybe that would work um so that way i

2027
01:27:03,039 --> 01:27:06,000
can still test it without but it still

2028
01:27:04,800 --> 01:27:06,480
creates something there so people won't

2029
01:27:06,000 --> 01:27:07,679
crash

2030
01:27:06,479 --> 01:27:10,000
i don't know they probably will still

2031
01:27:07,679 --> 01:27:10,000
crash

2032
01:27:11,119 --> 01:27:18,559
so that's not accounting for anything

2033
01:27:14,639 --> 01:27:19,679
um maybe we're not even timing it

2034
01:27:18,560 --> 01:27:22,239
no we must be because it's in the

2035
01:27:19,679 --> 01:27:25,279
internal lighting core so i don't know

2036
01:27:22,238 --> 01:27:27,279
how that takes zero time but apparently

2037
01:27:25,279 --> 01:27:30,479
it does

2038
01:27:27,279 --> 01:27:30,479
unless i did that test wrong

2039
01:27:30,880 --> 01:27:35,520
so in theory that's just a non-issue um

2040
01:27:34,399 --> 01:27:37,439
which is what i would expect because it

2041
01:27:35,520 --> 01:27:39,840
was only done once right

2042
01:27:37,439 --> 01:27:41,519
um so it's you know it really shouldn't

2043
01:27:39,840 --> 01:27:44,319
contribute much

2044
01:27:41,520 --> 01:27:45,840
uh so that's fine all right so let's go

2045
01:27:44,319 --> 01:27:48,559
ahead and stop there and tomorrow we'll

2046
01:27:45,840 --> 01:28:01,840
take a look at some other things

2047
01:27:48,560 --> 01:28:01,840
i'll do a quick q a

2048
01:28:35,600 --> 01:28:40,960
that's a tough question from insobot

2049
01:28:38,079 --> 01:28:45,760
insabot is a rather

2050
01:28:40,960 --> 01:28:48,399
aggressive questioner um

2051
01:28:45,760 --> 01:28:48,400
you might say

2052
01:28:48,960 --> 01:28:58,800
you might say

2053
01:28:57,439 --> 01:29:00,638
can i run through how the lighting looks

2054
01:28:58,800 --> 01:29:01,920
now uh sure it's it's pretty

2055
01:29:00,639 --> 01:29:03,520
straightforward actually

2056
01:29:01,920 --> 01:29:05,440
um how it's actually working at the

2057
01:29:03,520 --> 01:29:07,120
moment um and we haven't gone into

2058
01:29:05,439 --> 01:29:10,479
sampling yet so we're gonna do some

2059
01:29:07,119 --> 01:29:13,119
different sampling things in here

2060
01:29:10,479 --> 01:29:14,238
to improve the quality of things but at

2061
01:29:13,119 --> 01:29:17,519
the moment

2062
01:29:14,238 --> 01:29:17,839
uh the process is pretty straightforward

2063
01:29:17,520 --> 01:29:21,040
now

2064
01:29:17,840 --> 01:29:25,199
what we do is we have a lighting voxel

2065
01:29:21,039 --> 01:29:28,560
that is imposed of the scene

2066
01:29:25,198 --> 01:29:29,119
and we step through the that casting

2067
01:29:28,560 --> 01:29:31,760
rays

2068
01:29:29,119 --> 01:29:33,840
out from the center to see what we hit

2069
01:29:31,760 --> 01:29:35,520
and we do a gather based on

2070
01:29:33,840 --> 01:29:37,679
the voxel itself so whatever the

2071
01:29:35,520 --> 01:29:39,840
previous frames voxel as we gather from

2072
01:29:37,679 --> 01:29:39,840
there

2073
01:29:41,600 --> 01:29:46,800
in order to speed up the ray casting we

2074
01:29:45,039 --> 01:29:48,399
have a second spatial grid which is half

2075
01:29:46,800 --> 01:29:49,360
the resolution of the voxel just because

2076
01:29:48,399 --> 01:29:53,198
the voxel's too

2077
01:29:49,359 --> 01:29:55,279
granular and we step through

2078
01:29:53,198 --> 01:29:57,439
uh that spatial grid looking for what

2079
01:29:55,279 --> 01:29:58,960
occluders exist in it and we do

2080
01:29:57,439 --> 01:30:00,479
the raycast against those to see what we

2081
01:29:58,960 --> 01:30:03,840
hit

2082
01:30:00,479 --> 01:30:04,638
uh and that's really it so it's it's

2083
01:30:03,840 --> 01:30:06,480
pretty straightforward

2084
01:30:04,639 --> 01:30:07,920
the problem as with anything is when you

2085
01:30:06,479 --> 01:30:11,119
have to go really fast

2086
01:30:07,920 --> 01:30:13,279
you know the code is very um dense

2087
01:30:11,119 --> 01:30:15,279
because you can't you know you can't

2088
01:30:13,279 --> 01:30:16,000
just write things the first way you have

2089
01:30:15,279 --> 01:30:18,399
to do them

2090
01:30:16,000 --> 01:30:19,600
pretty uh you know elaborate right like

2091
01:30:18,399 --> 01:30:21,039
this

2092
01:30:19,600 --> 01:30:22,880
so you get stuff that looks like that

2093
01:30:21,039 --> 01:30:23,439
which is kind of nonsense right but it's

2094
01:30:22,880 --> 01:30:24,560
just

2095
01:30:23,439 --> 01:30:26,638
you know it's it's not actually

2096
01:30:24,560 --> 01:30:29,039
complicated code it's

2097
01:30:26,639 --> 01:30:30,880
uh in terms of what's doing it's just we

2098
01:30:29,039 --> 01:30:32,238
had to write it in really obtuse ways

2099
01:30:30,880 --> 01:30:32,800
because that's the only way to actually

2100
01:30:32,238 --> 01:30:35,599
like

2101
01:30:32,800 --> 01:30:36,480
mostly it's because intel chips suck it

2102
01:30:35,600 --> 01:30:39,679
might be a right way

2103
01:30:36,479 --> 01:30:41,439
to say it right

2104
01:30:39,679 --> 01:30:42,880
if intel chips had a halfway sane

2105
01:30:41,439 --> 01:30:44,158
instruction set all this stuff would

2106
01:30:42,880 --> 01:30:45,440
look

2107
01:30:44,158 --> 01:30:47,359
pretty much exactly the same as it

2108
01:30:45,439 --> 01:30:49,279
looked before we started optimizing it

2109
01:30:47,359 --> 01:30:51,279
right but

2110
01:30:49,279 --> 01:30:54,319
sse is like one of the worst vector

2111
01:30:51,279 --> 01:30:58,479
instruction sets ever designed

2112
01:30:54,319 --> 01:30:58,479
so you know you get crap that looks like

2113
01:31:00,840 --> 01:31:03,840
this

2114
01:31:06,000 --> 01:31:09,439
yeah we'll probably do some de-noising

2115
01:31:08,399 --> 01:31:11,439
in a sense but

2116
01:31:09,439 --> 01:31:13,439
we probably won't quite do exactly

2117
01:31:11,439 --> 01:31:15,599
de-noising per se

2118
01:31:13,439 --> 01:31:17,839
we will be doing some things to make the

2119
01:31:15,600 --> 01:31:19,520
lighting more consistent

2120
01:31:17,840 --> 01:31:21,360
and then also we're going to spread it

2121
01:31:19,520 --> 01:31:22,480
out more but

2122
01:31:21,359 --> 01:31:25,279
we're probably not going to do like

2123
01:31:22,479 --> 01:31:29,279
literal denoising necessarily

2124
01:31:25,279 --> 01:31:30,000
but who knows is neon any better yes

2125
01:31:29,279 --> 01:31:32,559
it's way

2126
01:31:30,000 --> 01:31:32,560
way better

2127
01:31:38,639 --> 01:31:41,520
like way better

2128
01:31:41,920 --> 01:31:47,119
avx 512 is also way better but

2129
01:31:45,039 --> 01:31:48,719
nobody ships anything with it in there

2130
01:31:47,119 --> 01:31:50,880
so it doesn't matter

2131
01:31:48,719 --> 01:31:52,880
like basically the only chips with avx

2132
01:31:50,880 --> 01:31:53,359
512 support that you can actually use

2133
01:31:52,880 --> 01:31:56,719
are like

2134
01:31:53,359 --> 01:31:59,839
server machines so for game programming

2135
01:31:56,719 --> 01:31:59,840
it's useless

2136
01:32:04,158 --> 01:32:10,839
so avx-2 probably wouldn't help

2137
01:32:07,600 --> 01:32:13,760
particularly much for what we're doing

2138
01:32:10,840 --> 01:32:16,000
um

2139
01:32:13,760 --> 01:32:16,000
but

2140
01:32:16,880 --> 01:32:25,199
we so it's hard to say

2141
01:32:21,760 --> 01:32:26,400
avx2 is tough on a lot of parts it's

2142
01:32:25,198 --> 01:32:28,238
slow

2143
01:32:26,399 --> 01:32:29,439
um so you probably don't want to use it

2144
01:32:28,238 --> 01:32:31,439
and you don't want to mix

2145
01:32:29,439 --> 01:32:32,719
avx2 code because it has weird startup

2146
01:32:31,439 --> 01:32:36,638
penalties and stuff

2147
01:32:32,719 --> 01:32:40,639
on on zen it would probably be a big win

2148
01:32:36,639 --> 01:32:43,840
would be my guess so like if we if we

2149
01:32:40,639 --> 01:32:47,039
were on a horizon core i bet we'd see

2150
01:32:43,840 --> 01:32:50,800
some good wins on that um

2151
01:32:47,039 --> 01:32:52,079
but what i would say in general is

2152
01:32:50,800 --> 01:32:54,000
it's still just maybe a little too

2153
01:32:52,079 --> 01:32:55,920
aggressive at this

2154
01:32:54,000 --> 01:33:09,840
point so you know if you go ahead and

2155
01:32:55,920 --> 01:33:09,840
take a look at uh

2156
01:33:11,119 --> 01:33:15,840
i mean that's just rough a quarter of

2157
01:33:14,479 --> 01:33:19,279
the machines on steam

2158
01:33:15,840 --> 01:33:20,960
can't run your code that's not

2159
01:33:19,279 --> 01:33:22,479
i i just don't know if that's viable

2160
01:33:20,960 --> 01:33:26,158
right

2161
01:33:22,479 --> 01:33:28,559
um what i'd say about uh

2162
01:33:26,158 --> 01:33:29,759
oh skylake x also supports experts yeah

2163
01:33:28,560 --> 01:33:33,600
again skylake

2164
01:33:29,760 --> 01:33:35,920
x just nobody has that right

2165
01:33:33,600 --> 01:33:37,520
um those are server chips they don't

2166
01:33:35,920 --> 01:33:38,399
people with game machines don't have

2167
01:33:37,520 --> 01:33:41,920
that i mean here

2168
01:33:38,399 --> 01:33:45,279
look nobody has it

2169
01:33:41,920 --> 01:33:46,880
like literally nobody so

2170
01:33:45,279 --> 01:33:48,399
nobody has guy i don't i don't have

2171
01:33:46,880 --> 01:33:50,000
skylight x i don't have a single machine

2172
01:33:48,399 --> 01:33:52,319
in this office that's skylake x

2173
01:33:50,000 --> 01:33:55,679
it's just it's not a thing right it's

2174
01:33:52,319 --> 01:33:59,359
for server skus only at this point

2175
01:33:55,679 --> 01:34:05,840
and it doesn't even exist on amd

2176
01:33:59,359 --> 01:34:05,839
there are no avx 512 parts on amd

2177
01:34:12,238 --> 01:34:17,119
how is skylake x not server it's isn't

2178
01:34:15,359 --> 01:34:20,238
it definitely server like it's

2179
01:34:17,119 --> 01:34:22,158
i've only ever seen it in server skus

2180
01:34:20,238 --> 01:34:24,959
does anyone do desktop builds with

2181
01:34:22,158 --> 01:34:24,960
skylake x

2182
01:34:25,359 --> 01:34:28,319
maybe somebody does

2183
01:34:30,880 --> 01:34:34,960
because it depends on how you define

2184
01:34:32,560 --> 01:34:34,960
server

2185
01:34:43,279 --> 01:34:51,439
i mean is that

2186
01:34:46,319 --> 01:34:51,439
i guess that is not server maybe

2187
01:34:52,319 --> 01:34:56,000
i i could see i could see those i mean

2188
01:34:54,399 --> 01:34:59,198
that's a server

2189
01:34:56,000 --> 01:35:02,880
i don't know who maybe maybe like

2190
01:34:59,198 --> 01:35:05,919
real enthusiast gamers or something

2191
01:35:02,880 --> 01:35:08,560
would would put that in a

2192
01:35:05,920 --> 01:35:09,359
you know i mean i don't know yeah i mean

2193
01:35:08,560 --> 01:35:12,159
i guess like

2194
01:35:09,359 --> 01:35:12,479
i guess one of the things is in my mind

2195
01:35:12,158 --> 01:35:14,238
i

2196
01:35:12,479 --> 01:35:15,519
i think i probably don't have a

2197
01:35:14,238 --> 01:35:17,439
realistic picture of what

2198
01:35:15,520 --> 01:35:18,719
enthusiast gamers might actually spend

2199
01:35:17,439 --> 01:35:22,399
on their machine i mean i guess

2200
01:35:18,719 --> 01:35:28,239
i guess there are people out there who

2201
01:35:22,399 --> 01:35:32,000
spend a thousand dollars on a gaming cpu

2202
01:35:28,238 --> 01:35:32,000
um but

2203
01:35:33,600 --> 01:35:36,960
couldn't we do two pass one with and

2204
01:35:35,439 --> 01:35:40,000
without avx-2

2205
01:35:36,960 --> 01:35:40,560
um not really so the reason that that

2206
01:35:40,000 --> 01:35:43,840
doesn't

2207
01:35:40,560 --> 01:35:46,960
work particularly well

2208
01:35:43,840 --> 01:35:46,960
is that

2209
01:35:47,679 --> 01:35:53,520
if a cpu has avx-2 it's probably faster

2210
01:35:51,359 --> 01:35:55,359
than a chip that doesn't have avx-2

2211
01:35:53,520 --> 01:35:57,600
so it's unclear who you're optimizing

2212
01:35:55,359 --> 01:35:59,039
for at that point because

2213
01:35:57,600 --> 01:36:01,520
i mean i guess you could just say well

2214
01:35:59,039 --> 01:36:02,880
you turn on a higher quality setting

2215
01:36:01,520 --> 01:36:04,400
but typically the people we're

2216
01:36:02,880 --> 01:36:05,199
optimizing for are for the chips that

2217
01:36:04,399 --> 01:36:06,960
don't have it

2218
01:36:05,198 --> 01:36:08,479
right you're trying to get things fast

2219
01:36:06,960 --> 01:36:09,679
as fast as possible

2220
01:36:08,479 --> 01:36:12,158
for the machines that wouldn't have

2221
01:36:09,679 --> 01:36:12,880
avx-2 so this is usually the reason why

2222
01:36:12,158 --> 01:36:15,759
that kind of

2223
01:36:12,880 --> 01:36:16,880
a that kind of a dev process doesn't

2224
01:36:15,760 --> 01:36:18,800
make any sense

2225
01:36:16,880 --> 01:36:20,880
because you're just making the code even

2226
01:36:18,800 --> 01:36:23,279
faster on machines that already would

2227
01:36:20,880 --> 01:36:26,079
have run it faster

2228
01:36:23,279 --> 01:36:28,238
than the actual uh minimum spec you were

2229
01:36:26,079 --> 01:36:30,238
trying to optimize for you know

2230
01:36:28,238 --> 01:36:31,519
so those kind of paths only make sense

2231
01:36:30,238 --> 01:36:34,158
if you're trying to have an additional

2232
01:36:31,520 --> 01:36:34,159
quality setting

2233
01:36:35,039 --> 01:36:42,800
why is avx 512 so uncommon

2234
01:36:38,639 --> 01:36:42,800
probably number of registers

2235
01:36:44,319 --> 01:36:48,719
probably probably you'd have to ask

2236
01:36:47,520 --> 01:36:52,719
intel

2237
01:36:48,719 --> 01:36:54,079
and amd number number of registers and

2238
01:36:52,719 --> 01:36:58,000
size of register

2239
01:36:54,079 --> 01:36:58,000
would be my guess um

2240
01:36:58,960 --> 01:37:06,399
i i i don't know but that'd be my guess

2241
01:37:02,880 --> 01:37:08,480
abx-512 is a real bear it's 32 registers

2242
01:37:06,399 --> 01:37:09,439
which is way too many registers that

2243
01:37:08,479 --> 01:37:13,759
don't know why

2244
01:37:09,439 --> 01:37:17,599
it has that many um and it also adds

2245
01:37:13,760 --> 01:37:21,840
mask registers so it's just

2246
01:37:17,600 --> 01:37:21,840
it's the disaster

2247
01:37:22,158 --> 01:37:25,679
i want to say they do some crazy crap

2248
01:37:23,760 --> 01:37:27,920
like that i want to say like the mask

2249
01:37:25,679 --> 01:37:28,960
registers are aliased with the x87 part

2250
01:37:27,920 --> 01:37:31,920
or something

2251
01:37:28,960 --> 01:37:33,118
on modern implementations like i'm not

2252
01:37:31,920 --> 01:37:35,840
making that up i think that's actually

2253
01:37:33,118 --> 01:37:35,839
true

2254
01:37:39,920 --> 01:37:43,199
yeah so ice lake will have avx 512 i

2255
01:37:42,238 --> 01:37:45,599
think so

2256
01:37:43,198 --> 01:37:47,279
if they ever actually ship any of those

2257
01:37:45,600 --> 01:37:49,840
in quantity

2258
01:37:47,279 --> 01:37:49,840
it would

2259
01:38:02,238 --> 01:38:17,839
so all right i'm going to wrap it up

2260
01:38:22,319 --> 01:38:25,599
all right thank you everybody for

2261
01:38:24,399 --> 01:38:26,719
joining me for the episode of handmade

2262
01:38:25,600 --> 01:38:27,840
hero it's my pleasure coding with you as

2263
01:38:26,719 --> 01:38:29,118
always if you would like to follow the

2264
01:38:27,840 --> 01:38:30,360
series at home you can

2265
01:38:29,118 --> 01:38:31,920
always pre-order the game on

2266
01:38:30,359 --> 01:38:33,519
handmadehero.org and it comes with a

2267
01:38:31,920 --> 01:38:34,639
source code so that you can play around

2268
01:38:33,520 --> 01:38:36,080
with it

2269
01:38:34,639 --> 01:38:38,400
um we'll be taking a look at some other

2270
01:38:36,079 --> 01:38:40,238
optimization options tomorrow

2271
01:38:38,399 --> 01:38:41,439
as we continue just trying to make sure

2272
01:38:40,238 --> 01:38:44,000
the lighting code

2273
01:38:41,439 --> 01:38:45,519
core stuff operates as quickly and as

2274
01:38:44,000 --> 01:38:46,880
cleanly as it can

2275
01:38:45,520 --> 01:38:48,400
that's it for today hope to be back here

2276
01:38:46,880 --> 01:38:48,960
tomorrow till then have fun programming

2277
01:38:48,399 --> 01:38:50,399
everyone

2278
01:38:48,960 --> 01:38:53,198
and i'll see you on the internet take it

2279
01:38:50,399 --> 01:38:53,198
everybody

